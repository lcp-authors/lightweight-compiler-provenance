
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011124 <.init>:
   11124:	push	{r3, lr}
   11128:	bl	11768 <__assert_fail@plt+0x2a0>
   1112c:	pop	{r3, pc}

Disassembly of section .plt:

00011130 <pthread_mutex_unlock@plt-0x14>:
   11130:	push	{lr}		; (str lr, [sp, #-4]!)
   11134:	ldr	lr, [pc, #4]	; 11140 <pthread_mutex_unlock@plt-0x4>
   11138:	add	lr, pc, lr
   1113c:	ldr	pc, [lr, #8]!
   11140:	andeq	ip, r2, r0, asr #29

00011144 <pthread_mutex_unlock@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #44, 20	; 0x2c000
   1114c:	ldr	pc, [ip, #3776]!	; 0xec0

00011150 <calloc@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #44, 20	; 0x2c000
   11158:	ldr	pc, [ip, #3768]!	; 0xeb8

0001115c <fputs_unlocked@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #44, 20	; 0x2c000
   11164:	ldr	pc, [ip, #3760]!	; 0xeb0

00011168 <wctype@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #44, 20	; 0x2c000
   11170:	ldr	pc, [ip, #3752]!	; 0xea8

00011174 <wcrtomb@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #44, 20	; 0x2c000
   1117c:	ldr	pc, [ip, #3744]!	; 0xea0

00011180 <iswctype@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #44, 20	; 0x2c000
   11188:	ldr	pc, [ip, #3736]!	; 0xe98

0001118c <strcmp@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #44, 20	; 0x2c000
   11194:	ldr	pc, [ip, #3728]!	; 0xe90

00011198 <__gmpz_tdiv_q@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #44, 20	; 0x2c000
   111a0:	ldr	pc, [ip, #3720]!	; 0xe88

000111a4 <strcspn@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #44, 20	; 0x2c000
   111ac:	ldr	pc, [ip, #3712]!	; 0xe80

000111b0 <pthread_mutex_destroy@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #44, 20	; 0x2c000
   111b8:	ldr	pc, [ip, #3704]!	; 0xe78

000111bc <fflush@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #44, 20	; 0x2c000
   111c4:	ldr	pc, [ip, #3696]!	; 0xe70

000111c8 <wcwidth@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #44, 20	; 0x2c000
   111d0:	ldr	pc, [ip, #3688]!	; 0xe68

000111d4 <memmove@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #44, 20	; 0x2c000
   111dc:	ldr	pc, [ip, #3680]!	; 0xe60

000111e0 <free@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #44, 20	; 0x2c000
   111e8:	ldr	pc, [ip, #3672]!	; 0xe58

000111ec <pthread_mutex_lock@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #44, 20	; 0x2c000
   111f4:	ldr	pc, [ip, #3664]!	; 0xe50

000111f8 <_exit@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #44, 20	; 0x2c000
   11200:	ldr	pc, [ip, #3656]!	; 0xe48

00011204 <memcpy@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #44, 20	; 0x2c000
   1120c:	ldr	pc, [ip, #3648]!	; 0xe40

00011210 <__gmpz_sub@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #44, 20	; 0x2c000
   11218:	ldr	pc, [ip, #3640]!	; 0xe38

0001121c <pthread_mutex_init@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #44, 20	; 0x2c000
   11224:	ldr	pc, [ip, #3632]!	; 0xe30

00011228 <towlower@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #44, 20	; 0x2c000
   11230:	ldr	pc, [ip, #3624]!	; 0xe28

00011234 <mbsinit@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #44, 20	; 0x2c000
   1123c:	ldr	pc, [ip, #3616]!	; 0xe20

00011240 <memcmp@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #44, 20	; 0x2c000
   11248:	ldr	pc, [ip, #3608]!	; 0xe18

0001124c <fputc_unlocked@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #44, 20	; 0x2c000
   11254:	ldr	pc, [ip, #3600]!	; 0xe10

00011258 <dcgettext@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #44, 20	; 0x2c000
   11260:	ldr	pc, [ip, #3592]!	; 0xe08

00011264 <__gmpz_get_str@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #44, 20	; 0x2c000
   1126c:	ldr	pc, [ip, #3584]!	; 0xe00

00011270 <realloc@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #44, 20	; 0x2c000
   11278:	ldr	pc, [ip, #3576]!	; 0xdf8

0001127c <__gmpz_mul@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #44, 20	; 0x2c000
   11284:	ldr	pc, [ip, #3568]!	; 0xdf0

00011288 <textdomain@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #44, 20	; 0x2c000
   11290:	ldr	pc, [ip, #3560]!	; 0xde8

00011294 <iswcntrl@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #44, 20	; 0x2c000
   1129c:	ldr	pc, [ip, #3552]!	; 0xde0

000112a0 <__gmpz_out_str@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #44, 20	; 0x2c000
   112a8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112ac <iswprint@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #44, 20	; 0x2c000
   112b4:	ldr	pc, [ip, #3536]!	; 0xdd0

000112b8 <fwrite@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #44, 20	; 0x2c000
   112c0:	ldr	pc, [ip, #3528]!	; 0xdc8

000112c4 <lseek64@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #44, 20	; 0x2c000
   112cc:	ldr	pc, [ip, #3520]!	; 0xdc0

000112d0 <__ctype_get_mb_cur_max@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #44, 20	; 0x2c000
   112d8:	ldr	pc, [ip, #3512]!	; 0xdb8

000112dc <__fpending@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #44, 20	; 0x2c000
   112e4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112e8 <mbrtowc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #44, 20	; 0x2c000
   112f0:	ldr	pc, [ip, #3496]!	; 0xda8

000112f4 <error@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #44, 20	; 0x2c000
   112fc:	ldr	pc, [ip, #3488]!	; 0xda0

00011300 <strcoll@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #44, 20	; 0x2c000
   11308:	ldr	pc, [ip, #3480]!	; 0xd98

0001130c <puts@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #44, 20	; 0x2c000
   11314:	ldr	pc, [ip, #3472]!	; 0xd90

00011318 <malloc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #44, 20	; 0x2c000
   11320:	ldr	pc, [ip, #3464]!	; 0xd88

00011324 <__libc_start_main@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #44, 20	; 0x2c000
   1132c:	ldr	pc, [ip, #3456]!	; 0xd80

00011330 <__freading@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #44, 20	; 0x2c000
   11338:	ldr	pc, [ip, #3448]!	; 0xd78

0001133c <__ctype_tolower_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #44, 20	; 0x2c000
   11344:	ldr	pc, [ip, #3440]!	; 0xd70

00011348 <__ctype_toupper_loc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #44, 20	; 0x2c000
   11350:	ldr	pc, [ip, #3432]!	; 0xd68

00011354 <__gmon_start__@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #44, 20	; 0x2c000
   1135c:	ldr	pc, [ip, #3424]!	; 0xd60

00011360 <mempcpy@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #44, 20	; 0x2c000
   11368:	ldr	pc, [ip, #3416]!	; 0xd58

0001136c <getopt_long@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #44, 20	; 0x2c000
   11374:	ldr	pc, [ip, #3408]!	; 0xd50

00011378 <__ctype_b_loc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #44, 20	; 0x2c000
   11380:	ldr	pc, [ip, #3400]!	; 0xd48

00011384 <exit@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #44, 20	; 0x2c000
   1138c:	ldr	pc, [ip, #3392]!	; 0xd40

00011390 <strlen@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #44, 20	; 0x2c000
   11398:	ldr	pc, [ip, #3384]!	; 0xd38

0001139c <strchr@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #44, 20	; 0x2c000
   113a4:	ldr	pc, [ip, #3376]!	; 0xd30

000113a8 <__gmpz_tdiv_r@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #44, 20	; 0x2c000
   113b0:	ldr	pc, [ip, #3368]!	; 0xd28

000113b4 <__gmpz_clear@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #44, 20	; 0x2c000
   113bc:	ldr	pc, [ip, #3360]!	; 0xd20

000113c0 <__errno_location@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #44, 20	; 0x2c000
   113c8:	ldr	pc, [ip, #3352]!	; 0xd18

000113cc <iswalnum@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #44, 20	; 0x2c000
   113d4:	ldr	pc, [ip, #3344]!	; 0xd10

000113d8 <__cxa_atexit@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #44, 20	; 0x2c000
   113e0:	ldr	pc, [ip, #3336]!	; 0xd08

000113e4 <memset@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #44, 20	; 0x2c000
   113ec:	ldr	pc, [ip, #3328]!	; 0xd00

000113f0 <btowc@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #44, 20	; 0x2c000
   113f8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113fc <__printf_chk@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #44, 20	; 0x2c000
   11404:	ldr	pc, [ip, #3312]!	; 0xcf0

00011408 <fileno@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #44, 20	; 0x2c000
   11410:	ldr	pc, [ip, #3304]!	; 0xce8

00011414 <__fprintf_chk@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #44, 20	; 0x2c000
   1141c:	ldr	pc, [ip, #3296]!	; 0xce0

00011420 <memchr@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #44, 20	; 0x2c000
   11428:	ldr	pc, [ip, #3288]!	; 0xcd8

0001142c <fclose@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #44, 20	; 0x2c000
   11434:	ldr	pc, [ip, #3280]!	; 0xcd0

00011438 <fseeko64@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #44, 20	; 0x2c000
   11440:	ldr	pc, [ip, #3272]!	; 0xcc8

00011444 <__gmpz_init_set_ui@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #44, 20	; 0x2c000
   1144c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011450 <__overflow@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #44, 20	; 0x2c000
   11458:	ldr	pc, [ip, #3256]!	; 0xcb8

0001145c <setlocale@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #44, 20	; 0x2c000
   11464:	ldr	pc, [ip, #3248]!	; 0xcb0

00011468 <strrchr@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #44, 20	; 0x2c000
   11470:	ldr	pc, [ip, #3240]!	; 0xca8

00011474 <nl_langinfo@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #44, 20	; 0x2c000
   1147c:	ldr	pc, [ip, #3232]!	; 0xca0

00011480 <__gmpz_add@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #44, 20	; 0x2c000
   11488:	ldr	pc, [ip, #3224]!	; 0xc98

0001148c <__gmpz_init_set_str@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #44, 20	; 0x2c000
   11494:	ldr	pc, [ip, #3216]!	; 0xc90

00011498 <bindtextdomain@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #44, 20	; 0x2c000
   114a0:	ldr	pc, [ip, #3208]!	; 0xc88

000114a4 <towupper@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #44, 20	; 0x2c000
   114ac:	ldr	pc, [ip, #3200]!	; 0xc80

000114b0 <strncmp@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #44, 20	; 0x2c000
   114b8:	ldr	pc, [ip, #3192]!	; 0xc78

000114bc <abort@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #44, 20	; 0x2c000
   114c4:	ldr	pc, [ip, #3184]!	; 0xc70

000114c8 <__assert_fail@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #44, 20	; 0x2c000
   114d0:	ldr	pc, [ip, #3176]!	; 0xc68

Disassembly of section .text:

000114d4 <.text>:
   114d4:	strd	r4, [sp, #-12]!
   114d8:	mov	r5, r0
   114dc:	mov	r4, r1
   114e0:	ldr	r0, [r1]
   114e4:	str	lr, [sp, #8]
   114e8:	sub	sp, sp, #28
   114ec:	bl	14c4c <__assert_fail@plt+0x3784>
   114f0:	movw	r1, #50440	; 0xc508
   114f4:	movt	r1, #2
   114f8:	mov	r0, #6
   114fc:	bl	1145c <setlocale@plt>
   11500:	movw	r1, #52176	; 0xcbd0
   11504:	movt	r1, #2
   11508:	movw	r0, #51664	; 0xc9d0
   1150c:	movt	r0, #2
   11510:	bl	11498 <bindtextdomain@plt>
   11514:	movw	r0, #51664	; 0xc9d0
   11518:	movt	r0, #2
   1151c:	bl	11288 <textdomain@plt>
   11520:	mov	r2, #3
   11524:	movw	r3, #57672	; 0xe148
   11528:	movt	r3, #3
   1152c:	movw	r0, #17304	; 0x4398
   11530:	movt	r0, #1
   11534:	str	r2, [r3]
   11538:	bl	2c0e4 <__assert_fail@plt+0x1ac1c>
   1153c:	movw	r2, #52200	; 0xcbe8
   11540:	movt	r2, #2
   11544:	movw	r3, #52212	; 0xcbf4
   11548:	movt	r3, #2
   1154c:	mov	ip, #0
   11550:	movw	r1, #52228	; 0xcc04
   11554:	movt	r1, #2
   11558:	mov	r0, r5
   1155c:	str	r3, [sp, #12]
   11560:	movw	r3, #52240	; 0xcc10
   11564:	movt	r3, #2
   11568:	str	r2, [sp, #16]
   1156c:	movw	r2, #6504	; 0x1968
   11570:	movt	r2, #1
   11574:	str	r3, [sp]
   11578:	movw	r3, #51660	; 0xc9cc
   1157c:	movt	r3, #2
   11580:	str	r2, [sp, #4]
   11584:	movw	r2, #49568	; 0xc1a0
   11588:	movt	r2, #2
   1158c:	str	r1, [sp, #8]
   11590:	mov	r1, r4
   11594:	str	ip, [sp, #20]
   11598:	bl	144e4 <__assert_fail@plt+0x301c>
   1159c:	cmp	r5, #1
   115a0:	bls	116b8 <__assert_fail@plt+0x1f0>
   115a4:	movw	r1, #52256	; 0xcc20
   115a8:	movt	r1, #2
   115ac:	ldr	r0, [r4, #4]
   115b0:	bl	1118c <strcmp@plt>
   115b4:	cmp	r0, #0
   115b8:	bne	115c8 <__assert_fail@plt+0x100>
   115bc:	cmp	r5, #2
   115c0:	beq	116b8 <__assert_fail@plt+0x1f0>
   115c4:	add	r4, r4, #4
   115c8:	add	r4, r4, #4
   115cc:	movw	r5, #57776	; 0xe1b0
   115d0:	movt	r5, #3
   115d4:	mov	r0, #1
   115d8:	str	r4, [r5]
   115dc:	bl	1414c <__assert_fail@plt+0x2c84>
   115e0:	ldr	r5, [r5]
   115e4:	mov	r4, r0
   115e8:	ldr	r3, [r5]
   115ec:	cmp	r3, #0
   115f0:	bne	116ec <__assert_fail@plt+0x224>
   115f4:	ldr	r3, [r0]
   115f8:	cmp	r3, #0
   115fc:	beq	11660 <__assert_fail@plt+0x198>
   11600:	cmp	r3, #1
   11604:	bne	11728 <__assert_fail@plt+0x260>
   11608:	ldr	r0, [r0, #4]
   1160c:	bl	1130c <puts@plt>
   11610:	ldr	r0, [r4]
   11614:	cmp	r0, #0
   11618:	beq	116a8 <__assert_fail@plt+0x1e0>
   1161c:	cmp	r0, #1
   11620:	bne	11728 <__assert_fail@plt+0x260>
   11624:	ldr	r3, [r4, #4]
   11628:	ldrb	r2, [r3]
   1162c:	cmp	r2, #0
   11630:	beq	1165c <__assert_fail@plt+0x194>
   11634:	cmp	r2, #45	; 0x2d
   11638:	addeq	r3, r3, #1
   1163c:	b	1164c <__assert_fail@plt+0x184>
   11640:	ldrb	r2, [r3, #1]!
   11644:	cmp	r2, #0
   11648:	beq	116e4 <__assert_fail@plt+0x21c>
   1164c:	ldrb	r2, [r3]
   11650:	cmp	r2, #48	; 0x30
   11654:	beq	11640 <__assert_fail@plt+0x178>
   11658:	mov	r0, #0
   1165c:	bl	11384 <exit@plt>
   11660:	movw	r5, #57764	; 0xe1a4
   11664:	movt	r5, #3
   11668:	add	r2, r0, #4
   1166c:	mov	r1, #10
   11670:	ldr	r0, [r5]
   11674:	bl	112a0 <__gmpz_out_str@plt>
   11678:	ldr	r0, [r5]
   1167c:	ldr	r3, [r0, #20]
   11680:	ldr	r2, [r0, #24]
   11684:	cmp	r3, r2
   11688:	addcc	r1, r3, #1
   1168c:	movcc	r2, #10
   11690:	strcc	r1, [r0, #20]
   11694:	strbcc	r2, [r3]
   11698:	bcc	11610 <__assert_fail@plt+0x148>
   1169c:	mov	r1, #10
   116a0:	bl	11450 <__overflow@plt>
   116a4:	b	11610 <__assert_fail@plt+0x148>
   116a8:	ldr	r0, [r4, #8]
   116ac:	clz	r0, r0
   116b0:	lsr	r0, r0, #5
   116b4:	b	1165c <__assert_fail@plt+0x194>
   116b8:	mov	r2, #5
   116bc:	movw	r1, #52260	; 0xcc24
   116c0:	movt	r1, #2
   116c4:	mov	r0, #0
   116c8:	bl	11258 <dcgettext@plt>
   116cc:	mov	r1, #0
   116d0:	mov	r2, r0
   116d4:	mov	r0, r1
   116d8:	bl	112f4 <error@plt>
   116dc:	mov	r0, #2
   116e0:	bl	11968 <__assert_fail@plt+0x4a0>
   116e4:	mov	r0, #1
   116e8:	b	1165c <__assert_fail@plt+0x194>
   116ec:	mov	r2, #5
   116f0:	movw	r1, #52276	; 0xcc34
   116f4:	movt	r1, #2
   116f8:	mov	r0, #0
   116fc:	bl	11258 <dcgettext@plt>
   11700:	mov	r4, r0
   11704:	mov	r1, #8
   11708:	ldr	r2, [r5]
   1170c:	mov	r0, #0
   11710:	bl	171b4 <__assert_fail@plt+0x5cec>
   11714:	mov	r3, r0
   11718:	mov	r2, r4
   1171c:	mov	r1, #0
   11720:	mov	r0, #2
   11724:	bl	112f4 <error@plt>
   11728:	bl	114bc <abort@plt>
   1172c:	mov	fp, #0
   11730:	mov	lr, #0
   11734:	pop	{r1}		; (ldr r1, [sp], #4)
   11738:	mov	r2, sp
   1173c:	push	{r2}		; (str r2, [sp, #-4]!)
   11740:	push	{r0}		; (str r0, [sp, #-4]!)
   11744:	ldr	ip, [pc, #16]	; 1175c <__assert_fail@plt+0x294>
   11748:	push	{ip}		; (str ip, [sp, #-4]!)
   1174c:	ldr	r0, [pc, #12]	; 11760 <__assert_fail@plt+0x298>
   11750:	ldr	r3, [pc, #12]	; 11764 <__assert_fail@plt+0x29c>
   11754:	bl	11324 <__libc_start_main@plt>
   11758:	bl	114bc <abort@plt>
   1175c:	andeq	ip, r2, r0, ror #1
   11760:	ldrdeq	r1, [r1], -r4
   11764:	andeq	ip, r2, r0, lsl #1
   11768:	ldr	r3, [pc, #20]	; 11784 <__assert_fail@plt+0x2bc>
   1176c:	ldr	r2, [pc, #20]	; 11788 <__assert_fail@plt+0x2c0>
   11770:	add	r3, pc, r3
   11774:	ldr	r2, [r3, r2]
   11778:	cmp	r2, #0
   1177c:	bxeq	lr
   11780:	b	11354 <__gmon_start__@plt>
   11784:	andeq	ip, r2, r8, lsl #17
   11788:	andeq	r0, r0, ip, lsr r1
   1178c:	ldr	r0, [pc, #24]	; 117ac <__assert_fail@plt+0x2e4>
   11790:	ldr	r3, [pc, #24]	; 117b0 <__assert_fail@plt+0x2e8>
   11794:	cmp	r3, r0
   11798:	bxeq	lr
   1179c:	ldr	r3, [pc, #16]	; 117b4 <__assert_fail@plt+0x2ec>
   117a0:	cmp	r3, #0
   117a4:	bxeq	lr
   117a8:	bx	r3
   117ac:	andeq	lr, r3, ip, lsl #3
   117b0:	andeq	lr, r3, ip, lsl #3
   117b4:	andeq	r0, r0, r0
   117b8:	ldr	r0, [pc, #36]	; 117e4 <__assert_fail@plt+0x31c>
   117bc:	ldr	r1, [pc, #36]	; 117e8 <__assert_fail@plt+0x320>
   117c0:	sub	r1, r1, r0
   117c4:	asr	r1, r1, #2
   117c8:	add	r1, r1, r1, lsr #31
   117cc:	asrs	r1, r1, #1
   117d0:	bxeq	lr
   117d4:	ldr	r3, [pc, #16]	; 117ec <__assert_fail@plt+0x324>
   117d8:	cmp	r3, #0
   117dc:	bxeq	lr
   117e0:	bx	r3
   117e4:	andeq	lr, r3, ip, lsl #3
   117e8:	andeq	lr, r3, ip, lsl #3
   117ec:	andeq	r0, r0, r0
   117f0:	push	{r4, lr}
   117f4:	ldr	r4, [pc, #24]	; 11814 <__assert_fail@plt+0x34c>
   117f8:	ldrb	r3, [r4]
   117fc:	cmp	r3, #0
   11800:	popne	{r4, pc}
   11804:	bl	1178c <__assert_fail@plt+0x2c4>
   11808:	mov	r3, #1
   1180c:	strb	r3, [r4]
   11810:	pop	{r4, pc}
   11814:	andeq	lr, r3, ip, lsr #3
   11818:	b	117b8 <__assert_fail@plt+0x2f0>
   1181c:	mov	r2, #5
   11820:	movw	r1, #49492	; 0xc154
   11824:	movt	r1, #2
   11828:	mov	r0, #0
   1182c:	str	r4, [sp, #-8]!
   11830:	str	lr, [sp, #4]
   11834:	bl	11258 <dcgettext@plt>
   11838:	movw	r3, #57776	; 0xe1b0
   1183c:	movt	r3, #3
   11840:	ldr	r3, [r3]
   11844:	mov	r4, r0
   11848:	mov	r1, #8
   1184c:	mov	r0, #0
   11850:	ldr	r2, [r3, #-4]
   11854:	bl	171b4 <__assert_fail@plt+0x5cec>
   11858:	mov	r3, r0
   1185c:	mov	r2, r4
   11860:	mov	r1, #0
   11864:	mov	r0, #2
   11868:	bl	112f4 <error@plt>
   1186c:	movw	r3, #49416	; 0xc108
   11870:	movt	r3, #2
   11874:	str	r4, [sp, #-8]!
   11878:	movw	r1, #49532	; 0xc17c
   1187c:	movt	r1, #2
   11880:	str	lr, [sp, #4]
   11884:	movw	r0, #49548	; 0xc18c
   11888:	movt	r0, #2
   1188c:	mov	r2, #172	; 0xac
   11890:	bl	114c8 <__assert_fail@plt>
   11894:	ldr	r3, [r0]
   11898:	cmp	r3, #0
   1189c:	bne	118a8 <__assert_fail@plt+0x3e0>
   118a0:	mov	r0, #1
   118a4:	bx	lr
   118a8:	cmp	r3, #1
   118ac:	strd	r4, [sp, #-16]!
   118b0:	mov	r4, r0
   118b4:	str	r6, [sp, #8]
   118b8:	str	lr, [sp, #12]
   118bc:	bne	11964 <__assert_fail@plt+0x49c>
   118c0:	ldr	r5, [r0, #4]
   118c4:	ldrb	r1, [r5]
   118c8:	cmp	r1, #45	; 0x2d
   118cc:	movne	r1, r5
   118d0:	addeq	r1, r5, #1
   118d4:	ldrb	r2, [r1]
   118d8:	sub	r2, r2, #48	; 0x30
   118dc:	cmp	r2, #9
   118e0:	bhi	11900 <__assert_fail@plt+0x438>
   118e4:	ldrb	r2, [r1, #1]!
   118e8:	cmp	r2, #0
   118ec:	beq	11914 <__assert_fail@plt+0x44c>
   118f0:	ldrb	r2, [r1]
   118f4:	sub	r2, r2, #48	; 0x30
   118f8:	cmp	r2, #9
   118fc:	bls	118e4 <__assert_fail@plt+0x41c>
   11900:	ldrd	r4, [sp]
   11904:	mov	r0, #0
   11908:	ldr	r6, [sp, #8]
   1190c:	add	sp, sp, #12
   11910:	pop	{pc}		; (ldr pc, [sp], #4)
   11914:	mov	r2, #10
   11918:	mov	r1, r5
   1191c:	add	r0, r4, #4
   11920:	bl	1148c <__gmpz_init_set_str@plt>
   11924:	subs	r6, r0, #0
   11928:	bne	1194c <__assert_fail@plt+0x484>
   1192c:	mov	r0, r5
   11930:	bl	14484 <__assert_fail@plt+0x2fbc>
   11934:	str	r6, [r4]
   11938:	mov	r0, #1
   1193c:	ldrd	r4, [sp]
   11940:	ldr	r6, [sp, #8]
   11944:	add	sp, sp, #12
   11948:	pop	{pc}		; (ldr pc, [sp], #4)
   1194c:	movw	r2, #52440	; 0xccd8
   11950:	movt	r2, #2
   11954:	mov	r3, r5
   11958:	mov	r1, #34	; 0x22
   1195c:	mov	r0, #3
   11960:	bl	112f4 <error@plt>
   11964:	bl	114bc <abort@plt>
   11968:	subs	r5, r0, #0
   1196c:	str	r7, [sp, #-8]!
   11970:	str	lr, [sp, #4]
   11974:	sub	sp, sp, #56	; 0x38
   11978:	beq	119c0 <__assert_fail@plt+0x4f8>
   1197c:	movw	r3, #57760	; 0xe1a0
   11980:	movt	r3, #3
   11984:	ldr	r4, [r3]
   11988:	mov	r2, #5
   1198c:	movw	r1, #49576	; 0xc1a8
   11990:	movt	r1, #2
   11994:	mov	r0, #0
   11998:	bl	11258 <dcgettext@plt>
   1199c:	movw	r3, #57788	; 0xe1bc
   119a0:	movt	r3, #3
   119a4:	mov	r2, r0
   119a8:	mov	r1, #1
   119ac:	ldr	r3, [r3]
   119b0:	mov	r0, r4
   119b4:	bl	11414 <__fprintf_chk@plt>
   119b8:	mov	r0, r5
   119bc:	bl	11384 <exit@plt>
   119c0:	mov	r2, #5
   119c4:	movw	r1, #49616	; 0xc1d0
   119c8:	movt	r1, #2
   119cc:	movw	r4, #57764	; 0xe1a4
   119d0:	movt	r4, #3
   119d4:	bl	11258 <dcgettext@plt>
   119d8:	movw	r3, #57788	; 0xe1bc
   119dc:	movt	r3, #3
   119e0:	ldr	r3, [r3]
   119e4:	mov	r1, r0
   119e8:	mov	r0, #1
   119ec:	mov	r2, r3
   119f0:	bl	113fc <__printf_chk@plt>
   119f4:	ldr	r0, [r4]
   119f8:	ldr	r3, [r0, #20]
   119fc:	ldr	r2, [r0, #24]
   11a00:	cmp	r3, r2
   11a04:	addcc	r1, r3, #1
   11a08:	movcc	r2, #10
   11a0c:	strcc	r1, [r0, #20]
   11a10:	strbcc	r2, [r3]
   11a14:	bcs	11d6c <__assert_fail@plt+0x8a4>
   11a18:	mov	r2, #5
   11a1c:	movw	r1, #49656	; 0xc1f8
   11a20:	movt	r1, #2
   11a24:	mov	r0, #0
   11a28:	bl	11258 <dcgettext@plt>
   11a2c:	ldr	r1, [r4]
   11a30:	bl	1115c <fputs_unlocked@plt>
   11a34:	mov	r2, #5
   11a38:	movw	r1, #49704	; 0xc228
   11a3c:	movt	r1, #2
   11a40:	mov	r0, #0
   11a44:	bl	11258 <dcgettext@plt>
   11a48:	ldr	r1, [r4]
   11a4c:	bl	1115c <fputs_unlocked@plt>
   11a50:	mov	r2, #5
   11a54:	movw	r1, #49760	; 0xc260
   11a58:	movt	r1, #2
   11a5c:	mov	r0, #0
   11a60:	bl	11258 <dcgettext@plt>
   11a64:	ldr	r1, [r4]
   11a68:	bl	1115c <fputs_unlocked@plt>
   11a6c:	mov	r2, #5
   11a70:	movw	r1, #50036	; 0xc374
   11a74:	movt	r1, #2
   11a78:	mov	r0, #0
   11a7c:	bl	11258 <dcgettext@plt>
   11a80:	ldr	r1, [r4]
   11a84:	bl	1115c <fputs_unlocked@plt>
   11a88:	mov	r2, #5
   11a8c:	movw	r1, #50328	; 0xc498
   11a90:	movt	r1, #2
   11a94:	mov	r0, #0
   11a98:	bl	11258 <dcgettext@plt>
   11a9c:	ldr	r1, [r4]
   11aa0:	bl	1115c <fputs_unlocked@plt>
   11aa4:	mov	r2, #5
   11aa8:	movw	r1, #50444	; 0xc50c
   11aac:	movt	r1, #2
   11ab0:	mov	r0, #0
   11ab4:	bl	11258 <dcgettext@plt>
   11ab8:	ldr	r1, [r4]
   11abc:	bl	1115c <fputs_unlocked@plt>
   11ac0:	mov	r2, #5
   11ac4:	movw	r1, #50632	; 0xc5c8
   11ac8:	movt	r1, #2
   11acc:	mov	r0, #0
   11ad0:	bl	11258 <dcgettext@plt>
   11ad4:	ldr	r1, [r4]
   11ad8:	bl	1115c <fputs_unlocked@plt>
   11adc:	mov	r2, #5
   11ae0:	movw	r1, #50944	; 0xc700
   11ae4:	movt	r1, #2
   11ae8:	mov	r0, #0
   11aec:	bl	11258 <dcgettext@plt>
   11af0:	ldr	r1, [r4]
   11af4:	bl	1115c <fputs_unlocked@plt>
   11af8:	mov	r2, #5
   11afc:	movw	r1, #51148	; 0xc7cc
   11b00:	movt	r1, #2
   11b04:	mov	r0, #0
   11b08:	bl	11258 <dcgettext@plt>
   11b0c:	ldr	r1, [r4]
   11b10:	bl	1115c <fputs_unlocked@plt>
   11b14:	mov	r2, #5
   11b18:	movw	r1, #51440	; 0xc8f0
   11b1c:	movt	r1, #2
   11b20:	mov	r0, #0
   11b24:	bl	11258 <dcgettext@plt>
   11b28:	ldr	r1, [r4]
   11b2c:	bl	1115c <fputs_unlocked@plt>
   11b30:	movw	r0, #49416	; 0xc108
   11b34:	movt	r0, #2
   11b38:	ldr	ip, [r0, #20]
   11b3c:	ldrd	r2, [r0, #28]
   11b40:	ldr	r6, [r0, #24]
   11b44:	subs	r1, ip, #0
   11b48:	str	ip, [sp]
   11b4c:	ldrd	r8, [r0, #36]	; 0x24
   11b50:	strd	r2, [sp, #8]
   11b54:	ldrd	r2, [r0, #44]	; 0x2c
   11b58:	str	r6, [sp, #4]
   11b5c:	ldrd	r6, [r0, #52]	; 0x34
   11b60:	strd	r8, [sp, #16]
   11b64:	ldrd	r8, [r0, #60]	; 0x3c
   11b68:	strd	r2, [sp, #24]
   11b6c:	ldrd	r2, [r0, #68]	; 0x44
   11b70:	strd	r6, [sp, #32]
   11b74:	movwne	r7, #49568	; 0xc1a0
   11b78:	mov	r6, sp
   11b7c:	movtne	r7, #2
   11b80:	strd	r8, [sp, #40]	; 0x28
   11b84:	strd	r2, [sp, #48]	; 0x30
   11b88:	bne	11c80 <__assert_fail@plt+0x7b8>
   11b8c:	ldr	r6, [r6, #4]
   11b90:	movw	r1, #51596	; 0xc98c
   11b94:	movt	r1, #2
   11b98:	mov	r2, #5
   11b9c:	cmp	r6, #0
   11ba0:	beq	11c94 <__assert_fail@plt+0x7cc>
   11ba4:	mov	r0, #0
   11ba8:	bl	11258 <dcgettext@plt>
   11bac:	mov	r1, r0
   11bb0:	movw	r3, #51620	; 0xc9a4
   11bb4:	movt	r3, #2
   11bb8:	movw	r2, #51660	; 0xc9cc
   11bbc:	movt	r2, #2
   11bc0:	mov	r0, #1
   11bc4:	bl	113fc <__printf_chk@plt>
   11bc8:	mov	r1, #0
   11bcc:	mov	r0, #5
   11bd0:	bl	1145c <setlocale@plt>
   11bd4:	cmp	r0, #0
   11bd8:	movweq	r7, #49568	; 0xc1a0
   11bdc:	movteq	r7, #2
   11be0:	beq	11c04 <__assert_fail@plt+0x73c>
   11be4:	movw	r1, #51676	; 0xc9dc
   11be8:	movt	r1, #2
   11bec:	mov	r2, #3
   11bf0:	movw	r7, #49568	; 0xc1a0
   11bf4:	movt	r7, #2
   11bf8:	bl	114b0 <strncmp@plt>
   11bfc:	cmp	r0, #0
   11c00:	bne	11d4c <__assert_fail@plt+0x884>
   11c04:	mov	r2, #5
   11c08:	movw	r1, #51752	; 0xca28
   11c0c:	movt	r1, #2
   11c10:	mov	r0, #0
   11c14:	bl	11258 <dcgettext@plt>
   11c18:	mov	r1, r0
   11c1c:	movw	r3, #49568	; 0xc1a0
   11c20:	movt	r3, #2
   11c24:	movw	r2, #51620	; 0xc9a4
   11c28:	movt	r2, #2
   11c2c:	mov	r0, #1
   11c30:	bl	113fc <__printf_chk@plt>
   11c34:	mov	r2, #5
   11c38:	movw	r1, #51780	; 0xca44
   11c3c:	movt	r1, #2
   11c40:	mov	r0, #0
   11c44:	bl	11258 <dcgettext@plt>
   11c48:	movw	r2, #52324	; 0xcc64
   11c4c:	movt	r2, #2
   11c50:	cmp	r6, r7
   11c54:	movw	r3, #50440	; 0xc508
   11c58:	movt	r3, #2
   11c5c:	mov	r1, r0
   11c60:	moveq	r3, r2
   11c64:	mov	r2, r6
   11c68:	mov	r0, #1
   11c6c:	bl	113fc <__printf_chk@plt>
   11c70:	b	119b8 <__assert_fail@plt+0x4f0>
   11c74:	ldr	r1, [r6, #8]!
   11c78:	cmp	r1, #0
   11c7c:	beq	11b8c <__assert_fail@plt+0x6c4>
   11c80:	mov	r0, r7
   11c84:	bl	1118c <strcmp@plt>
   11c88:	cmp	r0, #0
   11c8c:	bne	11c74 <__assert_fail@plt+0x7ac>
   11c90:	b	11b8c <__assert_fail@plt+0x6c4>
   11c94:	mov	r0, r6
   11c98:	bl	11258 <dcgettext@plt>
   11c9c:	mov	r1, r0
   11ca0:	movw	r3, #51620	; 0xc9a4
   11ca4:	movt	r3, #2
   11ca8:	movw	r2, #51660	; 0xc9cc
   11cac:	movt	r2, #2
   11cb0:	mov	r0, #1
   11cb4:	bl	113fc <__printf_chk@plt>
   11cb8:	mov	r1, r6
   11cbc:	mov	r0, #5
   11cc0:	bl	1145c <setlocale@plt>
   11cc4:	cmp	r0, #0
   11cc8:	beq	11ce4 <__assert_fail@plt+0x81c>
   11ccc:	movw	r1, #51676	; 0xc9dc
   11cd0:	movt	r1, #2
   11cd4:	mov	r2, #3
   11cd8:	bl	114b0 <strncmp@plt>
   11cdc:	cmp	r0, #0
   11ce0:	bne	11d40 <__assert_fail@plt+0x878>
   11ce4:	mov	r2, #5
   11ce8:	movw	r1, #51752	; 0xca28
   11cec:	movt	r1, #2
   11cf0:	mov	r0, #0
   11cf4:	bl	11258 <dcgettext@plt>
   11cf8:	mov	r1, r0
   11cfc:	movw	r3, #49568	; 0xc1a0
   11d00:	movt	r3, #2
   11d04:	movw	r2, #51620	; 0xc9a4
   11d08:	movt	r2, #2
   11d0c:	mov	r0, #1
   11d10:	bl	113fc <__printf_chk@plt>
   11d14:	movw	r1, #51780	; 0xca44
   11d18:	movt	r1, #2
   11d1c:	mov	r2, #5
   11d20:	mov	r0, #0
   11d24:	bl	11258 <dcgettext@plt>
   11d28:	movw	r6, #49568	; 0xc1a0
   11d2c:	movt	r6, #2
   11d30:	movw	r3, #52324	; 0xcc64
   11d34:	movt	r3, #2
   11d38:	mov	r1, r0
   11d3c:	b	11c64 <__assert_fail@plt+0x79c>
   11d40:	movw	r7, #49568	; 0xc1a0
   11d44:	movt	r7, #2
   11d48:	mov	r6, r7
   11d4c:	mov	r2, #5
   11d50:	movw	r1, #51680	; 0xc9e0
   11d54:	movt	r1, #2
   11d58:	mov	r0, #0
   11d5c:	bl	11258 <dcgettext@plt>
   11d60:	ldr	r1, [r4]
   11d64:	bl	1115c <fputs_unlocked@plt>
   11d68:	b	11c04 <__assert_fail@plt+0x73c>
   11d6c:	mov	r1, #10
   11d70:	bl	11450 <__overflow@plt>
   11d74:	b	11a18 <__assert_fail@plt+0x550>
   11d78:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11d7c:	mov	r4, r1
   11d80:	strd	r6, [sp, #8]
   11d84:	mov	r6, r0
   11d88:	ldr	r0, [r0]
   11d8c:	strd	r8, [sp, #16]
   11d90:	str	lr, [sp, #24]
   11d94:	sub	sp, sp, #372	; 0x174
   11d98:	cmp	r0, #0
   11d9c:	bne	11efc <__assert_fail@plt+0xa34>
   11da0:	add	r5, r6, #4
   11da4:	mov	r1, #10
   11da8:	mov	r2, r5
   11dac:	bl	11264 <__gmpz_get_str@plt>
   11db0:	mov	r7, r0
   11db4:	mov	r0, r5
   11db8:	bl	113b4 <__gmpz_clear@plt>
   11dbc:	mov	r3, #1
   11dc0:	stm	r6, {r3, r7}
   11dc4:	ldr	r0, [r4]
   11dc8:	cmp	r0, #0
   11dcc:	beq	11f08 <__assert_fail@plt+0xa40>
   11dd0:	cmp	r0, #1
   11dd4:	ldreq	r5, [r4, #4]
   11dd8:	bne	11f04 <__assert_fail@plt+0xa3c>
   11ddc:	mov	r4, #0
   11de0:	movw	r2, #710	; 0x2c6
   11de4:	add	r1, sp, #112	; 0x70
   11de8:	movw	r3, #58096	; 0xe2f0
   11dec:	movt	r3, #3
   11df0:	mov	r0, r5
   11df4:	str	r4, [sp, #12]
   11df8:	str	r4, [sp, #16]
   11dfc:	str	r2, [r3]
   11e00:	str	r4, [sp, #20]
   11e04:	str	r4, [sp, #24]
   11e08:	str	r4, [sp, #28]
   11e0c:	str	r1, [sp, #40]	; 0x28
   11e10:	str	r4, [sp, #44]	; 0x2c
   11e14:	bl	11390 <strlen@plt>
   11e18:	mov	r1, r0
   11e1c:	add	r2, sp, #24
   11e20:	mov	r0, r5
   11e24:	bl	29c80 <__assert_fail@plt+0x187b8>
   11e28:	subs	r5, r0, #0
   11e2c:	bne	12148 <__assert_fail@plt+0xc80>
   11e30:	ldrb	r3, [sp, #52]	; 0x34
   11e34:	ldr	r4, [r6, #4]
   11e38:	bfi	r3, r5, #7, #1
   11e3c:	mov	r0, r4
   11e40:	strb	r3, [sp, #52]	; 0x34
   11e44:	bl	11390 <strlen@plt>
   11e48:	add	ip, sp, #12
   11e4c:	mov	r2, r0
   11e50:	mov	r1, r4
   11e54:	mov	r3, r5
   11e58:	add	r0, sp, #24
   11e5c:	str	ip, [sp]
   11e60:	bl	2a54c <__assert_fail@plt+0x19084>
   11e64:	subs	r8, r0, #0
   11e68:	blt	11f30 <__assert_fail@plt+0xa68>
   11e6c:	ldr	r7, [sp, #48]	; 0x30
   11e70:	cmp	r7, #0
   11e74:	beq	11fa0 <__assert_fail@plt+0xad8>
   11e78:	ldr	r3, [sp, #20]
   11e7c:	ldr	r3, [r3, #4]
   11e80:	cmp	r3, #0
   11e84:	movlt	r0, #16
   11e88:	blt	11f7c <__assert_fail@plt+0xab4>
   11e8c:	ldr	r2, [r6, #4]
   11e90:	mov	r0, #16
   11e94:	strb	r5, [r2, r3]
   11e98:	ldr	r3, [sp, #16]
   11e9c:	ldr	r5, [r6, #4]
   11ea0:	ldr	r3, [r3, #4]
   11ea4:	add	r5, r5, r3
   11ea8:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   11eac:	mov	r4, r0
   11eb0:	mov	r3, #1
   11eb4:	mov	r0, r5
   11eb8:	str	r3, [r4]
   11ebc:	bl	2ba10 <__assert_fail@plt+0x1a548>
   11ec0:	str	r0, [r4, #4]
   11ec4:	ldr	r3, [sp, #12]
   11ec8:	cmp	r3, #0
   11ecc:	bne	11f68 <__assert_fail@plt+0xaa0>
   11ed0:	mov	r3, #0
   11ed4:	add	r0, sp, #24
   11ed8:	str	r3, [sp, #40]	; 0x28
   11edc:	bl	2a384 <__assert_fail@plt+0x18ebc>
   11ee0:	mov	r0, r4
   11ee4:	add	sp, sp, #372	; 0x174
   11ee8:	ldrd	r4, [sp]
   11eec:	ldrd	r6, [sp, #8]
   11ef0:	ldrd	r8, [sp, #16]
   11ef4:	add	sp, sp, #24
   11ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   11efc:	cmp	r0, #1
   11f00:	beq	11dc4 <__assert_fail@plt+0x8fc>
   11f04:	bl	114bc <abort@plt>
   11f08:	add	r7, r4, #4
   11f0c:	mov	r1, #10
   11f10:	mov	r2, r7
   11f14:	bl	11264 <__gmpz_get_str@plt>
   11f18:	mov	r5, r0
   11f1c:	mov	r0, r7
   11f20:	bl	113b4 <__gmpz_clear@plt>
   11f24:	mov	r3, #1
   11f28:	stm	r4, {r3, r5}
   11f2c:	b	11ddc <__assert_fail@plt+0x914>
   11f30:	cmn	r8, #1
   11f34:	bne	12160 <__assert_fail@plt+0xc98>
   11f38:	ldr	r5, [sp, #48]	; 0x30
   11f3c:	mov	r0, #16
   11f40:	cmp	r5, #0
   11f44:	bne	11f7c <__assert_fail@plt+0xab4>
   11f48:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   11f4c:	mov	r4, r0
   11f50:	mov	r1, r5
   11f54:	str	r5, [r0], #4
   11f58:	bl	11444 <__gmpz_init_set_ui@plt>
   11f5c:	ldr	r3, [sp, #12]
   11f60:	cmp	r3, #0
   11f64:	beq	11ed0 <__assert_fail@plt+0xa08>
   11f68:	ldr	r0, [sp, #16]
   11f6c:	bl	14484 <__assert_fail@plt+0x2fbc>
   11f70:	ldr	r0, [sp, #20]
   11f74:	bl	14484 <__assert_fail@plt+0x2fbc>
   11f78:	b	11ed0 <__assert_fail@plt+0xa08>
   11f7c:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   11f80:	mov	r4, r0
   11f84:	mov	r3, #1
   11f88:	movw	r0, #50440	; 0xc508
   11f8c:	movt	r0, #2
   11f90:	str	r3, [r4]
   11f94:	bl	2ba10 <__assert_fail@plt+0x1a548>
   11f98:	str	r0, [r4, #4]
   11f9c:	b	11ec4 <__assert_fail@plt+0x9fc>
   11fa0:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   11fa4:	cmp	r0, #1
   11fa8:	mov	r5, r8
   11fac:	beq	120cc <__assert_fail@plt+0xc04>
   11fb0:	ldr	r6, [r6, #4]
   11fb4:	mov	r2, #0
   11fb8:	mov	r3, #0
   11fbc:	movw	r9, #52508	; 0xcd1c
   11fc0:	movt	r9, #2
   11fc4:	strb	r7, [sp, #56]	; 0x38
   11fc8:	mov	r5, #1
   11fcc:	strd	r2, [sp, #60]	; 0x3c
   11fd0:	strb	r7, [sp, #68]	; 0x44
   11fd4:	mov	r4, r6
   11fd8:	str	r6, [sp, #72]	; 0x48
   11fdc:	b	12040 <__assert_fail@plt+0xb78>
   11fe0:	ldrb	r3, [r4]
   11fe4:	lsr	r2, r3, #5
   11fe8:	and	r3, r3, #31
   11fec:	ldr	r2, [r9, r2, lsl #2]
   11ff0:	lsr	r3, r2, r3
   11ff4:	tst	r3, #1
   11ff8:	beq	120b0 <__assert_fail@plt+0xbe8>
   11ffc:	str	r5, [sp, #76]	; 0x4c
   12000:	ldrb	r4, [r4]
   12004:	strb	r5, [sp, #68]	; 0x44
   12008:	strb	r5, [sp, #80]	; 0x50
   1200c:	str	r4, [sp, #84]	; 0x54
   12010:	cmp	r4, #0
   12014:	beq	120c8 <__assert_fail@plt+0xc00>
   12018:	ldr	r4, [sp, #72]	; 0x48
   1201c:	sub	r3, r4, r6
   12020:	cmp	r3, r8
   12024:	bcs	120c8 <__assert_fail@plt+0xc00>
   12028:	ldr	r3, [sp, #76]	; 0x4c
   1202c:	mov	r2, #0
   12030:	add	r7, r7, #1
   12034:	strb	r2, [sp, #68]	; 0x44
   12038:	add	r4, r4, r3
   1203c:	str	r4, [sp, #72]	; 0x48
   12040:	ldrb	r3, [sp, #56]	; 0x38
   12044:	cmp	r3, #0
   12048:	beq	11fe0 <__assert_fail@plt+0xb18>
   1204c:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12050:	mov	r1, r0
   12054:	mov	r0, r4
   12058:	bl	2aaec <__assert_fail@plt+0x19624>
   1205c:	mov	r2, r0
   12060:	add	r3, sp, #60	; 0x3c
   12064:	mov	r1, r4
   12068:	add	r0, sp, #84	; 0x54
   1206c:	bl	14760 <__assert_fail@plt+0x3298>
   12070:	cmn	r0, #1
   12074:	str	r0, [sp, #76]	; 0x4c
   12078:	beq	120ec <__assert_fail@plt+0xc24>
   1207c:	cmn	r0, #2
   12080:	beq	12104 <__assert_fail@plt+0xc3c>
   12084:	cmp	r0, #0
   12088:	beq	12124 <__assert_fail@plt+0xc5c>
   1208c:	ldr	r4, [sp, #84]	; 0x54
   12090:	add	r0, sp, #60	; 0x3c
   12094:	strb	r5, [sp, #80]	; 0x50
   12098:	bl	11234 <mbsinit@plt>
   1209c:	cmp	r0, #0
   120a0:	strb	r5, [sp, #68]	; 0x44
   120a4:	movne	r3, #0
   120a8:	strbne	r3, [sp, #56]	; 0x38
   120ac:	b	12010 <__assert_fail@plt+0xb48>
   120b0:	add	r0, sp, #60	; 0x3c
   120b4:	bl	11234 <mbsinit@plt>
   120b8:	cmp	r0, #0
   120bc:	beq	12198 <__assert_fail@plt+0xcd0>
   120c0:	strb	r5, [sp, #56]	; 0x38
   120c4:	b	1204c <__assert_fail@plt+0xb84>
   120c8:	mov	r5, r7
   120cc:	mov	r0, #16
   120d0:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   120d4:	mov	r3, #0
   120d8:	mov	r4, r0
   120dc:	mov	r1, r5
   120e0:	str	r3, [r0], #4
   120e4:	bl	11444 <__gmpz_init_set_ui@plt>
   120e8:	b	11ec4 <__assert_fail@plt+0x9fc>
   120ec:	mov	r3, #0
   120f0:	strb	r5, [sp, #68]	; 0x44
   120f4:	str	r5, [sp, #76]	; 0x4c
   120f8:	strb	r3, [sp, #80]	; 0x50
   120fc:	ldr	r4, [sp, #72]	; 0x48
   12100:	b	1201c <__assert_fail@plt+0xb54>
   12104:	ldr	r4, [sp, #72]	; 0x48
   12108:	mov	r0, r4
   1210c:	bl	11390 <strlen@plt>
   12110:	mov	r3, #0
   12114:	strb	r5, [sp, #68]	; 0x44
   12118:	str	r0, [sp, #76]	; 0x4c
   1211c:	strb	r3, [sp, #80]	; 0x50
   12120:	b	1201c <__assert_fail@plt+0xb54>
   12124:	ldr	r4, [sp, #72]	; 0x48
   12128:	str	r5, [sp, #76]	; 0x4c
   1212c:	ldrb	r3, [r4]
   12130:	cmp	r3, #0
   12134:	bne	121b8 <__assert_fail@plt+0xcf0>
   12138:	ldr	r4, [sp, #84]	; 0x54
   1213c:	cmp	r4, #0
   12140:	beq	12090 <__assert_fail@plt+0xbc8>
   12144:	bl	1186c <__assert_fail@plt+0x3a4>
   12148:	movw	r2, #52440	; 0xccd8
   1214c:	movt	r2, #2
   12150:	mov	r3, r5
   12154:	mov	r1, r4
   12158:	mov	r0, #2
   1215c:	bl	112f4 <error@plt>
   12160:	cmn	r8, #2
   12164:	movne	r4, #75	; 0x4b
   12168:	bne	12174 <__assert_fail@plt+0xcac>
   1216c:	bl	113c0 <__errno_location@plt>
   12170:	ldr	r4, [r0]
   12174:	mov	r2, #5
   12178:	movw	r1, #51880	; 0xcaa8
   1217c:	movt	r1, #2
   12180:	mov	r0, #0
   12184:	bl	11258 <dcgettext@plt>
   12188:	mov	r2, r0
   1218c:	mov	r1, r4
   12190:	mov	r0, #3
   12194:	bl	112f4 <error@plt>
   12198:	movw	r3, #49416	; 0xc108
   1219c:	movt	r3, #2
   121a0:	movw	r1, #49532	; 0xc17c
   121a4:	movt	r1, #2
   121a8:	movw	r0, #51832	; 0xca78
   121ac:	movt	r0, #2
   121b0:	mov	r2, #143	; 0x8f
   121b4:	bl	114c8 <__assert_fail@plt>
   121b8:	movw	r3, #49416	; 0xc108
   121bc:	movt	r3, #2
   121c0:	movw	r1, #49532	; 0xc17c
   121c4:	movt	r1, #2
   121c8:	movw	r0, #51856	; 0xca90
   121cc:	movt	r0, #2
   121d0:	mov	r2, #171	; 0xab
   121d4:	bl	114c8 <__assert_fail@plt>
   121d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   121dc:	strd	r6, [sp, #8]
   121e0:	strd	r8, [sp, #16]
   121e4:	movw	r8, #57776	; 0xe1b0
   121e8:	movt	r8, #3
   121ec:	ldr	r4, [r8]
   121f0:	mov	r9, r0
   121f4:	strd	sl, [sp, #24]
   121f8:	str	lr, [sp, #32]
   121fc:	sub	sp, sp, #188	; 0xbc
   12200:	ldr	r0, [r4]
   12204:	cmp	r0, #0
   12208:	beq	13138 <__assert_fail@plt+0x1c70>
   1220c:	movw	r1, #51916	; 0xcacc
   12210:	movt	r1, #2
   12214:	bl	1118c <strcmp@plt>
   12218:	cmp	r0, #0
   1221c:	moveq	r3, #1
   12220:	movne	r3, #0
   12224:	add	r5, r4, r3, lsl #2
   12228:	ldr	r0, [r4, r3, lsl #2]
   1222c:	str	r5, [r8]
   12230:	bne	12310 <__assert_fail@plt+0xe48>
   12234:	cmp	r0, #0
   12238:	beq	12d20 <__assert_fail@plt+0x1858>
   1223c:	movw	r1, #51924	; 0xcad4
   12240:	movt	r1, #2
   12244:	bl	1118c <strcmp@plt>
   12248:	cmp	r0, #0
   1224c:	moveq	r2, #1
   12250:	movne	r2, #0
   12254:	add	r3, r5, r2, lsl #2
   12258:	str	r3, [r8]
   1225c:	bne	12d20 <__assert_fail@plt+0x1858>
   12260:	ldr	r5, [r5, r2, lsl #2]
   12264:	cmp	r5, #0
   12268:	beq	13138 <__assert_fail@plt+0x1c70>
   1226c:	add	r3, r3, #4
   12270:	mov	r0, #16
   12274:	str	r3, [r8]
   12278:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   1227c:	mov	r4, r0
   12280:	mov	r3, #1
   12284:	mov	r0, r5
   12288:	str	r3, [r4]
   1228c:	bl	2ba10 <__assert_fail@plt+0x1a548>
   12290:	str	r0, [r4, #4]
   12294:	ldr	r0, [r4]
   12298:	cmp	r0, #0
   1229c:	beq	12bb0 <__assert_fail@plt+0x16e8>
   122a0:	cmp	r0, #1
   122a4:	ldreq	r5, [r4, #4]
   122a8:	bne	12d04 <__assert_fail@plt+0x183c>
   122ac:	mov	r0, r5
   122b0:	bl	14a40 <__assert_fail@plt+0x3578>
   122b4:	mov	r5, r0
   122b8:	mov	r0, #16
   122bc:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   122c0:	mov	r3, #0
   122c4:	mov	r7, r0
   122c8:	mov	r1, r5
   122cc:	str	r3, [r0], #4
   122d0:	bl	11444 <__gmpz_init_set_ui@plt>
   122d4:	ldr	r3, [r4]
   122d8:	cmp	r3, #1
   122dc:	beq	1241c <__assert_fail@plt+0xf54>
   122e0:	add	r0, r4, #4
   122e4:	bl	113b4 <__gmpz_clear@plt>
   122e8:	mov	r0, r4
   122ec:	bl	14484 <__assert_fail@plt+0x2fbc>
   122f0:	mov	r0, r7
   122f4:	add	sp, sp, #188	; 0xbc
   122f8:	ldrd	r4, [sp]
   122fc:	ldrd	r6, [sp, #8]
   12300:	ldrd	r8, [sp, #16]
   12304:	ldrd	sl, [sp, #24]
   12308:	add	sp, sp, #32
   1230c:	pop	{pc}		; (ldr pc, [sp], #4)
   12310:	cmp	r0, #0
   12314:	beq	13138 <__assert_fail@plt+0x1c70>
   12318:	movw	r1, #51928	; 0xcad8
   1231c:	movt	r1, #2
   12320:	bl	1118c <strcmp@plt>
   12324:	cmp	r0, #0
   12328:	moveq	r3, #1
   1232c:	movne	r3, #0
   12330:	add	r4, r5, r3, lsl #2
   12334:	ldr	r0, [r5, r3, lsl #2]
   12338:	str	r4, [r8]
   1233c:	bne	12428 <__assert_fail@plt+0xf60>
   12340:	cmp	r0, #0
   12344:	beq	12bd8 <__assert_fail@plt+0x1710>
   12348:	movw	r1, #51924	; 0xcad4
   1234c:	movt	r1, #2
   12350:	bl	1118c <strcmp@plt>
   12354:	cmp	r0, #0
   12358:	moveq	r2, #1
   1235c:	movne	r2, #0
   12360:	add	r3, r4, r2, lsl #2
   12364:	str	r3, [r8]
   12368:	bne	12bd8 <__assert_fail@plt+0x1710>
   1236c:	ldr	r4, [r4, r2, lsl #2]
   12370:	cmp	r4, #0
   12374:	beq	13138 <__assert_fail@plt+0x1c70>
   12378:	add	r3, r3, #4
   1237c:	mov	r0, #16
   12380:	str	r3, [r8]
   12384:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   12388:	mov	r7, r0
   1238c:	mov	r3, #1
   12390:	mov	r0, r4
   12394:	str	r3, [r7]
   12398:	bl	2ba10 <__assert_fail@plt+0x1a548>
   1239c:	str	r0, [r7, #4]
   123a0:	ldr	r4, [r8]
   123a4:	ldr	r0, [r4]
   123a8:	cmp	r0, #0
   123ac:	beq	12d8c <__assert_fail@plt+0x18c4>
   123b0:	movw	r1, #51924	; 0xcad4
   123b4:	movt	r1, #2
   123b8:	bl	1118c <strcmp@plt>
   123bc:	cmp	r0, #0
   123c0:	moveq	r2, #1
   123c4:	movne	r2, #0
   123c8:	add	r3, r4, r2, lsl #2
   123cc:	str	r3, [r8]
   123d0:	bne	12d8c <__assert_fail@plt+0x18c4>
   123d4:	ldr	r5, [r4, r2, lsl #2]
   123d8:	cmp	r5, #0
   123dc:	beq	13138 <__assert_fail@plt+0x1c70>
   123e0:	add	r3, r3, #4
   123e4:	mov	r0, #16
   123e8:	str	r3, [r8]
   123ec:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   123f0:	mov	r4, r0
   123f4:	mov	r3, #1
   123f8:	mov	r0, r5
   123fc:	str	r3, [r4]
   12400:	bl	2ba10 <__assert_fail@plt+0x1a548>
   12404:	str	r0, [r4, #4]
   12408:	cmp	r9, #0
   1240c:	bne	12d9c <__assert_fail@plt+0x18d4>
   12410:	ldr	r3, [r4]
   12414:	cmp	r3, #1
   12418:	bne	122e0 <__assert_fail@plt+0xe18>
   1241c:	ldr	r0, [r4, #4]
   12420:	bl	14484 <__assert_fail@plt+0x2fbc>
   12424:	b	122e8 <__assert_fail@plt+0xe20>
   12428:	cmp	r0, #0
   1242c:	beq	13138 <__assert_fail@plt+0x1c70>
   12430:	movw	r1, #51936	; 0xcae0
   12434:	movt	r1, #2
   12438:	bl	1118c <strcmp@plt>
   1243c:	cmp	r0, #0
   12440:	moveq	r3, #1
   12444:	movne	r3, #0
   12448:	add	r5, r4, r3, lsl #2
   1244c:	ldr	r0, [r4, r3, lsl #2]
   12450:	str	r5, [r8]
   12454:	bne	127d8 <__assert_fail@plt+0x1310>
   12458:	cmp	r0, #0
   1245c:	beq	12e44 <__assert_fail@plt+0x197c>
   12460:	movw	r1, #51924	; 0xcad4
   12464:	movt	r1, #2
   12468:	bl	1118c <strcmp@plt>
   1246c:	cmp	r0, #0
   12470:	moveq	r2, #1
   12474:	movne	r2, #0
   12478:	add	r3, r5, r2, lsl #2
   1247c:	str	r3, [r8]
   12480:	bne	12e44 <__assert_fail@plt+0x197c>
   12484:	ldr	r4, [r5, r2, lsl #2]
   12488:	cmp	r4, #0
   1248c:	beq	13138 <__assert_fail@plt+0x1c70>
   12490:	add	r3, r3, #4
   12494:	mov	r0, #16
   12498:	str	r3, [r8]
   1249c:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   124a0:	mov	r6, r0
   124a4:	mov	r3, #1
   124a8:	mov	r0, r4
   124ac:	str	r3, [r6]
   124b0:	bl	2ba10 <__assert_fail@plt+0x1a548>
   124b4:	str	r0, [r6, #4]
   124b8:	ldr	r4, [r8]
   124bc:	ldr	r0, [r4]
   124c0:	cmp	r0, #0
   124c4:	beq	12e34 <__assert_fail@plt+0x196c>
   124c8:	movw	r1, #51924	; 0xcad4
   124cc:	movt	r1, #2
   124d0:	bl	1118c <strcmp@plt>
   124d4:	cmp	r0, #0
   124d8:	moveq	r2, #1
   124dc:	movne	r2, #0
   124e0:	add	r3, r4, r2, lsl #2
   124e4:	str	r3, [r8]
   124e8:	bne	12e34 <__assert_fail@plt+0x196c>
   124ec:	ldr	r4, [r4, r2, lsl #2]
   124f0:	cmp	r4, #0
   124f4:	beq	13138 <__assert_fail@plt+0x1c70>
   124f8:	add	r3, r3, #4
   124fc:	mov	r0, #16
   12500:	str	r3, [r8]
   12504:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   12508:	mov	r5, r0
   1250c:	mov	r3, #1
   12510:	mov	r0, r4
   12514:	str	r3, [r5]
   12518:	bl	2ba10 <__assert_fail@plt+0x1a548>
   1251c:	str	r0, [r5, #4]
   12520:	ldr	r0, [r6]
   12524:	cmp	r0, #0
   12528:	bne	12d08 <__assert_fail@plt+0x1840>
   1252c:	add	r4, r6, #4
   12530:	mov	r1, #10
   12534:	mov	r2, r4
   12538:	bl	11264 <__gmpz_get_str@plt>
   1253c:	mov	r7, r0
   12540:	mov	r0, r4
   12544:	bl	113b4 <__gmpz_clear@plt>
   12548:	mov	r3, #1
   1254c:	stm	r6, {r3, r7}
   12550:	ldr	r0, [r5]
   12554:	cmp	r0, #0
   12558:	bne	12cf8 <__assert_fail@plt+0x1830>
   1255c:	add	r4, r5, #4
   12560:	mov	r1, #10
   12564:	mov	r2, r4
   12568:	bl	11264 <__gmpz_get_str@plt>
   1256c:	mov	r9, r0
   12570:	mov	r0, r4
   12574:	bl	113b4 <__gmpz_clear@plt>
   12578:	mov	r3, #1
   1257c:	stm	r5, {r3, r9}
   12580:	ldrb	r3, [r9]
   12584:	cmp	r3, #0
   12588:	beq	12d30 <__assert_fail@plt+0x1868>
   1258c:	ldr	r4, [r6, #4]
   12590:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12594:	cmp	r0, #1
   12598:	bls	12e9c <__assert_fail@plt+0x19d4>
   1259c:	mov	r3, #0
   125a0:	movw	sl, #52508	; 0xcd1c
   125a4:	movt	sl, #2
   125a8:	mov	r1, r3
   125ac:	mov	r2, r3
   125b0:	mov	r8, r3
   125b4:	stmib	sp, {r1, r2}
   125b8:	strb	r3, [sp, #16]
   125bc:	str	r3, [sp, #20]
   125c0:	str	r3, [sp, #24]
   125c4:	strb	r3, [sp, #28]
   125c8:	ldrb	r3, [sp, #16]
   125cc:	str	r4, [sp, #32]
   125d0:	cmp	r3, #0
   125d4:	addne	r7, sp, #20
   125d8:	bne	12658 <__assert_fail@plt+0x1190>
   125dc:	ldrb	r3, [r4]
   125e0:	lsr	r2, r3, #5
   125e4:	and	r3, r3, #31
   125e8:	ldr	r2, [sl, r2, lsl #2]
   125ec:	lsr	r3, r2, r3
   125f0:	tst	r3, #1
   125f4:	beq	12f88 <__assert_fail@plt+0x1ac0>
   125f8:	mov	r3, #1
   125fc:	str	r3, [sp, #36]	; 0x24
   12600:	ldrb	r2, [r4]
   12604:	strb	r3, [sp, #28]
   12608:	strb	r3, [sp, #40]	; 0x28
   1260c:	cmp	r2, #0
   12610:	str	r2, [sp, #44]	; 0x2c
   12614:	beq	12d30 <__assert_fail@plt+0x1868>
   12618:	add	r8, r8, #1
   1261c:	ldr	r4, [sp, #32]
   12620:	mov	r0, r9
   12624:	ldrb	r1, [r4]
   12628:	bl	147d0 <__assert_fail@plt+0x3308>
   1262c:	cmp	r0, #0
   12630:	bne	12d34 <__assert_fail@plt+0x186c>
   12634:	mov	r3, #1
   12638:	add	r4, r4, r3
   1263c:	mov	r3, #0
   12640:	strb	r3, [sp, #28]
   12644:	ldrb	r3, [sp, #16]
   12648:	str	r4, [sp, #32]
   1264c:	cmp	r3, #0
   12650:	addne	r7, sp, #20
   12654:	beq	125dc <__assert_fail@plt+0x1114>
   12658:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   1265c:	mov	r1, r0
   12660:	mov	r0, r4
   12664:	bl	2aaec <__assert_fail@plt+0x19624>
   12668:	mov	r2, r0
   1266c:	mov	r3, r7
   12670:	mov	r1, r4
   12674:	add	r0, sp, #44	; 0x2c
   12678:	bl	14760 <__assert_fail@plt+0x3298>
   1267c:	cmn	r0, #1
   12680:	str	r0, [sp, #36]	; 0x24
   12684:	beq	12fa8 <__assert_fail@plt+0x1ae0>
   12688:	cmn	r0, #2
   1268c:	beq	13024 <__assert_fail@plt+0x1b5c>
   12690:	cmp	r0, #0
   12694:	beq	13044 <__assert_fail@plt+0x1b7c>
   12698:	ldr	fp, [sp, #44]	; 0x2c
   1269c:	mov	r4, #1
   126a0:	mov	r0, r7
   126a4:	strb	r4, [sp, #40]	; 0x28
   126a8:	bl	11234 <mbsinit@plt>
   126ac:	cmp	r0, #0
   126b0:	strb	r4, [sp, #28]
   126b4:	movne	r2, #0
   126b8:	strbne	r2, [sp, #16]
   126bc:	cmp	fp, #0
   126c0:	beq	13130 <__assert_fail@plt+0x1c68>
   126c4:	ldr	r3, [sp, #36]	; 0x24
   126c8:	add	r8, r8, #1
   126cc:	cmp	r3, #1
   126d0:	beq	1261c <__assert_fail@plt+0x1154>
   126d4:	ldr	r2, [sp, #4]
   126d8:	mov	r3, #0
   126dc:	mov	r4, r9
   126e0:	mov	r7, #1
   126e4:	strb	r3, [sp, #72]	; 0x48
   126e8:	str	r2, [sp, #76]	; 0x4c
   126ec:	ldr	r2, [sp, #8]
   126f0:	strb	r3, [sp, #84]	; 0x54
   126f4:	str	r9, [sp, #88]	; 0x58
   126f8:	str	r2, [sp, #80]	; 0x50
   126fc:	b	12768 <__assert_fail@plt+0x12a0>
   12700:	ldrb	r3, [r4]
   12704:	lsr	r2, r3, #5
   12708:	and	r3, r3, #31
   1270c:	ldr	r2, [sl, r2, lsl #2]
   12710:	lsr	r3, r2, r3
   12714:	tst	r3, #1
   12718:	beq	12f08 <__assert_fail@plt+0x1a40>
   1271c:	str	r7, [sp, #92]	; 0x5c
   12720:	ldrb	r4, [r4]
   12724:	strb	r7, [sp, #84]	; 0x54
   12728:	strb	r7, [sp, #96]	; 0x60
   1272c:	str	r4, [sp, #100]	; 0x64
   12730:	cmp	r4, #0
   12734:	beq	13088 <__assert_fail@plt+0x1bc0>
   12738:	ldrb	r3, [sp, #40]	; 0x28
   1273c:	cmp	r3, #0
   12740:	beq	12ed8 <__assert_fail@plt+0x1a10>
   12744:	ldr	r3, [sp, #44]	; 0x2c
   12748:	cmp	r3, r4
   1274c:	beq	12d34 <__assert_fail@plt+0x186c>
   12750:	ldr	fp, [sp, #88]	; 0x58
   12754:	ldr	r4, [sp, #92]	; 0x5c
   12758:	add	r4, fp, r4
   1275c:	mov	r3, #0
   12760:	strb	r3, [sp, #84]	; 0x54
   12764:	str	r4, [sp, #88]	; 0x58
   12768:	ldrb	r3, [sp, #72]	; 0x48
   1276c:	cmp	r3, #0
   12770:	beq	12700 <__assert_fail@plt+0x1238>
   12774:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12778:	mov	r1, r0
   1277c:	mov	r0, r4
   12780:	bl	2aaec <__assert_fail@plt+0x19624>
   12784:	mov	r2, r0
   12788:	add	r3, sp, #76	; 0x4c
   1278c:	mov	r1, r4
   12790:	add	r0, sp, #100	; 0x64
   12794:	bl	14760 <__assert_fail@plt+0x3298>
   12798:	cmn	r0, #1
   1279c:	str	r0, [sp, #92]	; 0x5c
   127a0:	beq	12ec8 <__assert_fail@plt+0x1a00>
   127a4:	cmn	r0, #2
   127a8:	beq	12f20 <__assert_fail@plt+0x1a58>
   127ac:	cmp	r0, #0
   127b0:	beq	12f40 <__assert_fail@plt+0x1a78>
   127b4:	ldr	r4, [sp, #100]	; 0x64
   127b8:	add	r0, sp, #76	; 0x4c
   127bc:	strb	r7, [sp, #96]	; 0x60
   127c0:	bl	11234 <mbsinit@plt>
   127c4:	cmp	r0, #0
   127c8:	strb	r7, [sp, #84]	; 0x54
   127cc:	movne	r3, #0
   127d0:	strbne	r3, [sp, #72]	; 0x48
   127d4:	b	12730 <__assert_fail@plt+0x1268>
   127d8:	cmp	r0, #0
   127dc:	beq	13138 <__assert_fail@plt+0x1c70>
   127e0:	movw	r1, #51944	; 0xcae8
   127e4:	movt	r1, #2
   127e8:	bl	1118c <strcmp@plt>
   127ec:	cmp	r0, #0
   127f0:	moveq	r3, #1
   127f4:	movne	r3, #0
   127f8:	add	r4, r5, r3, lsl #2
   127fc:	ldr	r0, [r5, r3, lsl #2]
   12800:	str	r4, [r8]
   12804:	bne	12c64 <__assert_fail@plt+0x179c>
   12808:	cmp	r0, #0
   1280c:	beq	12e54 <__assert_fail@plt+0x198c>
   12810:	movw	r1, #51924	; 0xcad4
   12814:	movt	r1, #2
   12818:	bl	1118c <strcmp@plt>
   1281c:	cmp	r0, #0
   12820:	moveq	r2, #1
   12824:	movne	r2, #0
   12828:	add	r3, r4, r2, lsl #2
   1282c:	str	r3, [r8]
   12830:	bne	12e54 <__assert_fail@plt+0x198c>
   12834:	ldr	r5, [r4, r2, lsl #2]
   12838:	cmp	r5, #0
   1283c:	beq	13138 <__assert_fail@plt+0x1c70>
   12840:	add	r3, r3, #4
   12844:	mov	r0, #16
   12848:	str	r3, [r8]
   1284c:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   12850:	mov	r4, r0
   12854:	mov	r3, #1
   12858:	mov	r0, r5
   1285c:	str	r3, [r4]
   12860:	bl	2ba10 <__assert_fail@plt+0x1a548>
   12864:	str	r0, [r4, #4]
   12868:	ldr	r5, [r8]
   1286c:	ldr	r0, [r5]
   12870:	cmp	r0, #0
   12874:	beq	12e74 <__assert_fail@plt+0x19ac>
   12878:	movw	r1, #51924	; 0xcad4
   1287c:	movt	r1, #2
   12880:	bl	1118c <strcmp@plt>
   12884:	cmp	r0, #0
   12888:	moveq	r2, #1
   1288c:	movne	r2, #0
   12890:	add	r3, r5, r2, lsl #2
   12894:	str	r3, [r8]
   12898:	bne	12e74 <__assert_fail@plt+0x19ac>
   1289c:	ldr	r6, [r5, r2, lsl #2]
   128a0:	cmp	r6, #0
   128a4:	beq	13138 <__assert_fail@plt+0x1c70>
   128a8:	add	r3, r3, #4
   128ac:	mov	r0, #16
   128b0:	str	r3, [r8]
   128b4:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   128b8:	mov	r5, r0
   128bc:	mov	r3, #1
   128c0:	mov	r0, r6
   128c4:	str	r3, [r5]
   128c8:	bl	2ba10 <__assert_fail@plt+0x1a548>
   128cc:	str	r0, [r5, #4]
   128d0:	ldr	r6, [r8]
   128d4:	ldr	r0, [r6]
   128d8:	cmp	r0, #0
   128dc:	beq	12e64 <__assert_fail@plt+0x199c>
   128e0:	movw	r1, #51924	; 0xcad4
   128e4:	movt	r1, #2
   128e8:	bl	1118c <strcmp@plt>
   128ec:	cmp	r0, #0
   128f0:	moveq	r2, #1
   128f4:	movne	r2, #0
   128f8:	add	r3, r6, r2, lsl #2
   128fc:	str	r3, [r8]
   12900:	bne	12e64 <__assert_fail@plt+0x199c>
   12904:	ldr	r7, [r6, r2, lsl #2]
   12908:	cmp	r7, #0
   1290c:	beq	13138 <__assert_fail@plt+0x1c70>
   12910:	add	r3, r3, #4
   12914:	mov	r0, #16
   12918:	str	r3, [r8]
   1291c:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   12920:	mov	r6, r0
   12924:	mov	r3, #1
   12928:	mov	r0, r7
   1292c:	str	r3, [r6]
   12930:	bl	2ba10 <__assert_fail@plt+0x1a548>
   12934:	str	r0, [r6, #4]
   12938:	ldr	r0, [r4]
   1293c:	cmp	r0, #0
   12940:	bne	12d14 <__assert_fail@plt+0x184c>
   12944:	add	r7, r4, #4
   12948:	mov	r1, #10
   1294c:	mov	r2, r7
   12950:	bl	11264 <__gmpz_get_str@plt>
   12954:	mov	r8, r0
   12958:	mov	r0, r7
   1295c:	bl	113b4 <__gmpz_clear@plt>
   12960:	mov	r3, #1
   12964:	stm	r4, {r3, r8}
   12968:	mov	r0, r5
   1296c:	bl	11894 <__assert_fail@plt+0x3cc>
   12970:	cmp	r0, #0
   12974:	beq	12be8 <__assert_fail@plt+0x1720>
   12978:	mov	r0, r6
   1297c:	bl	11894 <__assert_fail@plt+0x3cc>
   12980:	subs	r8, r0, #0
   12984:	beq	12be8 <__assert_fail@plt+0x1720>
   12988:	ldr	r3, [r5, #8]
   1298c:	cmp	r3, #0
   12990:	blt	13100 <__assert_fail@plt+0x1c38>
   12994:	cmp	r3, #1
   12998:	bgt	13094 <__assert_fail@plt+0x1bcc>
   1299c:	ldr	r2, [r5, #12]
   129a0:	cmp	r3, #0
   129a4:	ldr	sl, [r2]
   129a8:	moveq	sl, r3
   129ac:	beq	129c0 <__assert_fail@plt+0x14f8>
   129b0:	cmn	sl, #1
   129b4:	beq	13094 <__assert_fail@plt+0x1bcc>
   129b8:	clz	r8, sl
   129bc:	lsr	r8, r8, #5
   129c0:	ldr	r3, [r6, #8]
   129c4:	cmp	r3, #0
   129c8:	mvnlt	r9, #0
   129cc:	blt	129f8 <__assert_fail@plt+0x1530>
   129d0:	cmp	r3, #1
   129d4:	mvngt	r9, #1
   129d8:	bgt	129f8 <__assert_fail@plt+0x1530>
   129dc:	ldr	r2, [r6, #12]
   129e0:	cmp	r3, #0
   129e4:	ldr	r9, [r2]
   129e8:	moveq	r9, r3
   129ec:	beq	129f8 <__assert_fail@plt+0x1530>
   129f0:	cmn	r9, #1
   129f4:	mvneq	r9, #1
   129f8:	ldr	r7, [r4, #4]
   129fc:	mov	r0, r7
   12a00:	bl	11390 <strlen@plt>
   12a04:	mov	fp, r0
   12a08:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12a0c:	cmp	r0, #1
   12a10:	movls	r0, fp
   12a14:	bls	12a20 <__assert_fail@plt+0x1558>
   12a18:	mov	r0, r7
   12a1c:	bl	14a40 <__assert_fail@plt+0x3578>
   12a20:	cmp	sl, r0
   12a24:	orrhi	r8, r8, #1
   12a28:	ands	r3, r8, #255	; 0xff
   12a2c:	bne	12fe4 <__assert_fail@plt+0x1b1c>
   12a30:	sub	r2, r9, #1
   12a34:	cmn	r2, #3
   12a38:	bhi	12fe4 <__assert_fail@plt+0x1b1c>
   12a3c:	rsb	r2, sl, #1
   12a40:	str	r3, [sp, #4]
   12a44:	add	r0, r2, r0
   12a48:	cmp	r0, r9
   12a4c:	movcc	r9, r0
   12a50:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12a54:	cmp	r0, #1
   12a58:	ldr	r3, [sp, #4]
   12a5c:	beq	1310c <__assert_fail@plt+0x1c44>
   12a60:	add	r0, fp, #1
   12a64:	str	r3, [sp, #8]
   12a68:	mov	r8, #1
   12a6c:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   12a70:	ldr	r3, [sp, #8]
   12a74:	mov	fp, r0
   12a78:	mov	r1, #0
   12a7c:	mov	r0, #0
   12a80:	str	fp, [sp, #4]
   12a84:	str	r6, [sp, #8]
   12a88:	str	r4, [sp, #12]
   12a8c:	strb	r3, [sp, #128]	; 0x80
   12a90:	strd	r0, [sp, #132]	; 0x84
   12a94:	strb	r3, [sp, #140]	; 0x8c
   12a98:	movw	r3, #52508	; 0xcd1c
   12a9c:	movt	r3, #2
   12aa0:	mov	r4, r3
   12aa4:	str	r7, [sp, #144]	; 0x90
   12aa8:	b	12b2c <__assert_fail@plt+0x1664>
   12aac:	ldrb	r3, [r7]
   12ab0:	lsr	r2, r3, #5
   12ab4:	and	r3, r3, #31
   12ab8:	ldr	r2, [r4, r2, lsl #2]
   12abc:	lsr	r3, r2, r3
   12ac0:	tst	r3, #1
   12ac4:	beq	12fc4 <__assert_fail@plt+0x1afc>
   12ac8:	mov	r3, #1
   12acc:	str	r3, [sp, #148]	; 0x94
   12ad0:	ldrb	r7, [r7]
   12ad4:	strb	r3, [sp, #140]	; 0x8c
   12ad8:	strb	r3, [sp, #152]	; 0x98
   12adc:	str	r7, [sp, #156]	; 0x9c
   12ae0:	cmp	r7, #0
   12ae4:	beq	130e8 <__assert_fail@plt+0x1c20>
   12ae8:	cmp	r9, #0
   12aec:	beq	130e8 <__assert_fail@plt+0x1c20>
   12af0:	cmp	sl, r8
   12af4:	ldr	r7, [sp, #144]	; 0x90
   12af8:	ldr	r6, [sp, #148]	; 0x94
   12afc:	bhi	12b18 <__assert_fail@plt+0x1650>
   12b00:	mov	r0, fp
   12b04:	mov	r2, r6
   12b08:	mov	r1, r7
   12b0c:	sub	r9, r9, #1
   12b10:	bl	11360 <mempcpy@plt>
   12b14:	mov	fp, r0
   12b18:	add	r7, r7, r6
   12b1c:	mov	r3, #0
   12b20:	add	r8, r8, #1
   12b24:	strb	r3, [sp, #140]	; 0x8c
   12b28:	str	r7, [sp, #144]	; 0x90
   12b2c:	ldrb	r3, [sp, #128]	; 0x80
   12b30:	cmp	r3, #0
   12b34:	addne	r6, sp, #132	; 0x84
   12b38:	beq	12aac <__assert_fail@plt+0x15e4>
   12b3c:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12b40:	mov	r1, r0
   12b44:	mov	r0, r7
   12b48:	bl	2aaec <__assert_fail@plt+0x19624>
   12b4c:	mov	r2, r0
   12b50:	mov	r3, r6
   12b54:	mov	r1, r7
   12b58:	add	r0, sp, #156	; 0x9c
   12b5c:	bl	14760 <__assert_fail@plt+0x3298>
   12b60:	cmn	r0, #1
   12b64:	str	r0, [sp, #148]	; 0x94
   12b68:	beq	1306c <__assert_fail@plt+0x1ba4>
   12b6c:	cmn	r0, #2
   12b70:	beq	130a0 <__assert_fail@plt+0x1bd8>
   12b74:	cmp	r0, #0
   12b78:	beq	130c0 <__assert_fail@plt+0x1bf8>
   12b7c:	ldr	r7, [sp, #156]	; 0x9c
   12b80:	mov	r0, r6
   12b84:	mov	r6, #1
   12b88:	strb	r6, [sp, #152]	; 0x98
   12b8c:	bl	11234 <mbsinit@plt>
   12b90:	cmp	r0, #0
   12b94:	strbeq	r6, [sp, #140]	; 0x8c
   12b98:	beq	12ae0 <__assert_fail@plt+0x1618>
   12b9c:	mov	r3, #0
   12ba0:	mov	r2, #1
   12ba4:	strb	r3, [sp, #128]	; 0x80
   12ba8:	strb	r2, [sp, #140]	; 0x8c
   12bac:	b	12ae0 <__assert_fail@plt+0x1618>
   12bb0:	add	r6, r4, #4
   12bb4:	mov	r1, #10
   12bb8:	mov	r2, r6
   12bbc:	bl	11264 <__gmpz_get_str@plt>
   12bc0:	mov	r5, r0
   12bc4:	mov	r0, r6
   12bc8:	bl	113b4 <__gmpz_clear@plt>
   12bcc:	mov	r3, #1
   12bd0:	stm	r4, {r3, r5}
   12bd4:	b	122ac <__assert_fail@plt+0xde4>
   12bd8:	mov	r0, r9
   12bdc:	bl	121d8 <__assert_fail@plt+0xd10>
   12be0:	mov	r7, r0
   12be4:	b	123a0 <__assert_fail@plt+0xed8>
   12be8:	mov	r0, #16
   12bec:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   12bf0:	mov	r7, r0
   12bf4:	mov	r3, #1
   12bf8:	movw	r0, #50440	; 0xc508
   12bfc:	movt	r0, #2
   12c00:	str	r3, [r7]
   12c04:	bl	2ba10 <__assert_fail@plt+0x1a548>
   12c08:	str	r0, [r7, #4]
   12c0c:	ldr	r3, [r4]
   12c10:	cmp	r3, #1
   12c14:	beq	12f70 <__assert_fail@plt+0x1aa8>
   12c18:	add	r0, r4, #4
   12c1c:	bl	113b4 <__gmpz_clear@plt>
   12c20:	mov	r0, r4
   12c24:	bl	14484 <__assert_fail@plt+0x2fbc>
   12c28:	ldr	r3, [r5]
   12c2c:	cmp	r3, #1
   12c30:	beq	12f64 <__assert_fail@plt+0x1a9c>
   12c34:	add	r0, r5, #4
   12c38:	bl	113b4 <__gmpz_clear@plt>
   12c3c:	mov	r0, r5
   12c40:	bl	14484 <__assert_fail@plt+0x2fbc>
   12c44:	ldr	r3, [r6]
   12c48:	cmp	r3, #1
   12c4c:	beq	12f7c <__assert_fail@plt+0x1ab4>
   12c50:	add	r0, r6, #4
   12c54:	bl	113b4 <__gmpz_clear@plt>
   12c58:	mov	r0, r6
   12c5c:	bl	14484 <__assert_fail@plt+0x2fbc>
   12c60:	b	122f0 <__assert_fail@plt+0xe28>
   12c64:	cmp	r0, #0
   12c68:	beq	13138 <__assert_fail@plt+0x1c70>
   12c6c:	movw	r1, #51952	; 0xcaf0
   12c70:	movt	r1, #2
   12c74:	bl	1118c <strcmp@plt>
   12c78:	cmp	r0, #0
   12c7c:	moveq	r3, #1
   12c80:	movne	r3, #0
   12c84:	add	r5, r4, r3, lsl #2
   12c88:	str	r5, [r8]
   12c8c:	bne	12dd0 <__assert_fail@plt+0x1908>
   12c90:	mov	r0, r9
   12c94:	bl	1414c <__assert_fail@plt+0x2c84>
   12c98:	ldr	r5, [r8]
   12c9c:	mov	r7, r0
   12ca0:	ldr	r4, [r5]
   12ca4:	cmp	r4, #0
   12ca8:	beq	1317c <__assert_fail@plt+0x1cb4>
   12cac:	mov	r0, r4
   12cb0:	movw	r1, #51996	; 0xcb1c
   12cb4:	movt	r1, #2
   12cb8:	bl	1118c <strcmp@plt>
   12cbc:	cmp	r0, #0
   12cc0:	moveq	r4, #1
   12cc4:	movne	r4, #0
   12cc8:	add	r3, r5, r4, lsl #2
   12ccc:	str	r3, [r8]
   12cd0:	beq	122f0 <__assert_fail@plt+0xe28>
   12cd4:	mov	r2, #5
   12cd8:	movw	r1, #52000	; 0xcb20
   12cdc:	movt	r1, #2
   12ce0:	mov	r0, #0
   12ce4:	bl	11258 <dcgettext@plt>
   12ce8:	mov	r6, r0
   12cec:	mov	r1, #8
   12cf0:	ldr	r2, [r5, r4, lsl #2]
   12cf4:	b	1319c <__assert_fail@plt+0x1cd4>
   12cf8:	cmp	r0, #1
   12cfc:	ldreq	r9, [r5, #4]
   12d00:	beq	12580 <__assert_fail@plt+0x10b8>
   12d04:	bl	114bc <abort@plt>
   12d08:	cmp	r0, #1
   12d0c:	beq	12550 <__assert_fail@plt+0x1088>
   12d10:	b	12d04 <__assert_fail@plt+0x183c>
   12d14:	cmp	r0, #1
   12d18:	beq	12968 <__assert_fail@plt+0x14a0>
   12d1c:	b	12d04 <__assert_fail@plt+0x183c>
   12d20:	mov	r0, r9
   12d24:	bl	121d8 <__assert_fail@plt+0xd10>
   12d28:	mov	r4, r0
   12d2c:	b	12294 <__assert_fail@plt+0xdcc>
   12d30:	mov	r8, #0
   12d34:	mov	r0, #16
   12d38:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   12d3c:	mov	r3, #0
   12d40:	mov	r7, r0
   12d44:	mov	r1, r8
   12d48:	str	r3, [r0], #4
   12d4c:	bl	11444 <__gmpz_init_set_ui@plt>
   12d50:	ldr	r3, [r6]
   12d54:	cmp	r3, #1
   12d58:	beq	12e90 <__assert_fail@plt+0x19c8>
   12d5c:	add	r0, r6, #4
   12d60:	bl	113b4 <__gmpz_clear@plt>
   12d64:	mov	r0, r6
   12d68:	bl	14484 <__assert_fail@plt+0x2fbc>
   12d6c:	ldr	r3, [r5]
   12d70:	cmp	r3, #1
   12d74:	beq	12e84 <__assert_fail@plt+0x19bc>
   12d78:	add	r0, r5, #4
   12d7c:	bl	113b4 <__gmpz_clear@plt>
   12d80:	mov	r0, r5
   12d84:	bl	14484 <__assert_fail@plt+0x2fbc>
   12d88:	b	122f0 <__assert_fail@plt+0xe28>
   12d8c:	mov	r0, r9
   12d90:	bl	121d8 <__assert_fail@plt+0xd10>
   12d94:	mov	r4, r0
   12d98:	b	12408 <__assert_fail@plt+0xf40>
   12d9c:	mov	r1, r4
   12da0:	mov	r0, r7
   12da4:	bl	11d78 <__assert_fail@plt+0x8b0>
   12da8:	ldr	r3, [r7]
   12dac:	mov	r5, r0
   12db0:	cmp	r3, #1
   12db4:	beq	12ebc <__assert_fail@plt+0x19f4>
   12db8:	add	r0, r7, #4
   12dbc:	bl	113b4 <__gmpz_clear@plt>
   12dc0:	mov	r0, r7
   12dc4:	mov	r7, r5
   12dc8:	bl	14484 <__assert_fail@plt+0x2fbc>
   12dcc:	b	12410 <__assert_fail@plt+0xf48>
   12dd0:	ldr	r4, [r4, r3, lsl #2]
   12dd4:	cmp	r4, #0
   12dd8:	beq	12e08 <__assert_fail@plt+0x1940>
   12ddc:	mov	r0, r4
   12de0:	movw	r1, #51996	; 0xcb1c
   12de4:	movt	r1, #2
   12de8:	bl	1118c <strcmp@plt>
   12dec:	subs	r4, r0, #0
   12df0:	moveq	r3, #4
   12df4:	movne	r3, #0
   12df8:	add	r5, r5, r3
   12dfc:	str	r5, [r8]
   12e00:	beq	131b8 <__assert_fail@plt+0x1cf0>
   12e04:	ldr	r4, [r5]
   12e08:	add	r5, r5, #4
   12e0c:	mov	r0, #16
   12e10:	str	r5, [r8]
   12e14:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   12e18:	mov	r7, r0
   12e1c:	mov	r3, #1
   12e20:	mov	r0, r4
   12e24:	str	r3, [r7]
   12e28:	bl	2ba10 <__assert_fail@plt+0x1a548>
   12e2c:	str	r0, [r7, #4]
   12e30:	b	122f0 <__assert_fail@plt+0xe28>
   12e34:	mov	r0, r9
   12e38:	bl	121d8 <__assert_fail@plt+0xd10>
   12e3c:	mov	r5, r0
   12e40:	b	12520 <__assert_fail@plt+0x1058>
   12e44:	mov	r0, r9
   12e48:	bl	121d8 <__assert_fail@plt+0xd10>
   12e4c:	mov	r6, r0
   12e50:	b	124b8 <__assert_fail@plt+0xff0>
   12e54:	mov	r0, r9
   12e58:	bl	121d8 <__assert_fail@plt+0xd10>
   12e5c:	mov	r4, r0
   12e60:	b	12868 <__assert_fail@plt+0x13a0>
   12e64:	mov	r0, r9
   12e68:	bl	121d8 <__assert_fail@plt+0xd10>
   12e6c:	mov	r6, r0
   12e70:	b	12938 <__assert_fail@plt+0x1470>
   12e74:	mov	r0, r9
   12e78:	bl	121d8 <__assert_fail@plt+0xd10>
   12e7c:	mov	r5, r0
   12e80:	b	128d0 <__assert_fail@plt+0x1408>
   12e84:	ldr	r0, [r5, #4]
   12e88:	bl	14484 <__assert_fail@plt+0x2fbc>
   12e8c:	b	12d80 <__assert_fail@plt+0x18b8>
   12e90:	ldr	r0, [r6, #4]
   12e94:	bl	14484 <__assert_fail@plt+0x2fbc>
   12e98:	b	12d64 <__assert_fail@plt+0x189c>
   12e9c:	mov	r1, r9
   12ea0:	mov	r0, r4
   12ea4:	bl	111a4 <strcspn@plt>
   12ea8:	ldrb	r3, [r4, r0]
   12eac:	cmp	r3, #0
   12eb0:	beq	12d30 <__assert_fail@plt+0x1868>
   12eb4:	add	r8, r0, #1
   12eb8:	b	12d34 <__assert_fail@plt+0x186c>
   12ebc:	ldr	r0, [r7, #4]
   12ec0:	bl	14484 <__assert_fail@plt+0x2fbc>
   12ec4:	b	12dc0 <__assert_fail@plt+0x18f8>
   12ec8:	mov	r3, #0
   12ecc:	strb	r7, [sp, #84]	; 0x54
   12ed0:	str	r7, [sp, #92]	; 0x5c
   12ed4:	strb	r3, [sp, #96]	; 0x60
   12ed8:	ldr	fp, [sp, #88]	; 0x58
   12edc:	ldr	r3, [sp, #36]	; 0x24
   12ee0:	ldr	r4, [sp, #92]	; 0x5c
   12ee4:	cmp	r4, r3
   12ee8:	bne	12758 <__assert_fail@plt+0x1290>
   12eec:	mov	r2, r4
   12ef0:	mov	r0, fp
   12ef4:	ldr	r1, [sp, #32]
   12ef8:	bl	11240 <memcmp@plt>
   12efc:	cmp	r0, #0
   12f00:	beq	12d34 <__assert_fail@plt+0x186c>
   12f04:	b	12758 <__assert_fail@plt+0x1290>
   12f08:	add	r0, sp, #76	; 0x4c
   12f0c:	bl	11234 <mbsinit@plt>
   12f10:	cmp	r0, #0
   12f14:	beq	1313c <__assert_fail@plt+0x1c74>
   12f18:	strb	r7, [sp, #72]	; 0x48
   12f1c:	b	12774 <__assert_fail@plt+0x12ac>
   12f20:	ldr	fp, [sp, #88]	; 0x58
   12f24:	mov	r0, fp
   12f28:	bl	11390 <strlen@plt>
   12f2c:	mov	r3, #0
   12f30:	strb	r7, [sp, #84]	; 0x54
   12f34:	str	r0, [sp, #92]	; 0x5c
   12f38:	strb	r3, [sp, #96]	; 0x60
   12f3c:	b	12edc <__assert_fail@plt+0x1a14>
   12f40:	ldr	fp, [sp, #88]	; 0x58
   12f44:	str	r7, [sp, #92]	; 0x5c
   12f48:	ldrb	r3, [fp]
   12f4c:	cmp	r3, #0
   12f50:	bne	1315c <__assert_fail@plt+0x1c94>
   12f54:	ldr	r4, [sp, #100]	; 0x64
   12f58:	cmp	r4, #0
   12f5c:	beq	127b8 <__assert_fail@plt+0x12f0>
   12f60:	bl	1186c <__assert_fail@plt+0x3a4>
   12f64:	ldr	r0, [r5, #4]
   12f68:	bl	14484 <__assert_fail@plt+0x2fbc>
   12f6c:	b	12c3c <__assert_fail@plt+0x1774>
   12f70:	ldr	r0, [r4, #4]
   12f74:	bl	14484 <__assert_fail@plt+0x2fbc>
   12f78:	b	12c20 <__assert_fail@plt+0x1758>
   12f7c:	ldr	r0, [r6, #4]
   12f80:	bl	14484 <__assert_fail@plt+0x2fbc>
   12f84:	b	12c58 <__assert_fail@plt+0x1790>
   12f88:	add	r7, sp, #20
   12f8c:	mov	r0, r7
   12f90:	bl	11234 <mbsinit@plt>
   12f94:	cmp	r0, #0
   12f98:	beq	1313c <__assert_fail@plt+0x1c74>
   12f9c:	mov	r3, #1
   12fa0:	strb	r3, [sp, #16]
   12fa4:	b	12658 <__assert_fail@plt+0x1190>
   12fa8:	mov	r3, #1
   12fac:	mov	r2, #0
   12fb0:	add	r8, r8, r3
   12fb4:	strb	r3, [sp, #28]
   12fb8:	str	r3, [sp, #36]	; 0x24
   12fbc:	strb	r2, [sp, #40]	; 0x28
   12fc0:	b	1261c <__assert_fail@plt+0x1154>
   12fc4:	add	r6, sp, #132	; 0x84
   12fc8:	mov	r0, r6
   12fcc:	bl	11234 <mbsinit@plt>
   12fd0:	cmp	r0, #0
   12fd4:	beq	1313c <__assert_fail@plt+0x1c74>
   12fd8:	mov	r3, #1
   12fdc:	strb	r3, [sp, #128]	; 0x80
   12fe0:	b	12b3c <__assert_fail@plt+0x1674>
   12fe4:	movw	r0, #50440	; 0xc508
   12fe8:	movt	r0, #2
   12fec:	bl	2ba10 <__assert_fail@plt+0x1a548>
   12ff0:	str	r0, [sp, #4]
   12ff4:	mov	r0, #16
   12ff8:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   12ffc:	ldr	r8, [sp, #4]
   13000:	mov	r7, r0
   13004:	mov	r3, #1
   13008:	str	r3, [r7]
   1300c:	mov	r0, r8
   13010:	bl	2ba10 <__assert_fail@plt+0x1a548>
   13014:	str	r0, [r7, #4]
   13018:	mov	r0, r8
   1301c:	bl	14484 <__assert_fail@plt+0x2fbc>
   13020:	b	12c0c <__assert_fail@plt+0x1744>
   13024:	ldr	r0, [sp, #32]
   13028:	bl	11390 <strlen@plt>
   1302c:	mov	r3, #0
   13030:	mov	r2, #1
   13034:	strb	r2, [sp, #28]
   13038:	str	r0, [sp, #36]	; 0x24
   1303c:	strb	r3, [sp, #40]	; 0x28
   13040:	b	126c4 <__assert_fail@plt+0x11fc>
   13044:	ldr	r3, [sp, #32]
   13048:	mov	r2, #1
   1304c:	str	r2, [sp, #36]	; 0x24
   13050:	ldrb	r3, [r3]
   13054:	cmp	r3, #0
   13058:	bne	1315c <__assert_fail@plt+0x1c94>
   1305c:	ldr	fp, [sp, #44]	; 0x2c
   13060:	cmp	fp, #0
   13064:	beq	1269c <__assert_fail@plt+0x11d4>
   13068:	b	12f60 <__assert_fail@plt+0x1a98>
   1306c:	mov	r2, #1
   13070:	mov	r3, #0
   13074:	strb	r2, [sp, #140]	; 0x8c
   13078:	mov	r2, #1
   1307c:	str	r2, [sp, #148]	; 0x94
   13080:	strb	r3, [sp, #152]	; 0x98
   13084:	b	12ae8 <__assert_fail@plt+0x1620>
   13088:	ldr	r4, [sp, #32]
   1308c:	ldr	r3, [sp, #36]	; 0x24
   13090:	b	12638 <__assert_fail@plt+0x1170>
   13094:	mov	r8, #0
   13098:	mvn	sl, #1
   1309c:	b	129c0 <__assert_fail@plt+0x14f8>
   130a0:	ldr	r0, [sp, #144]	; 0x90
   130a4:	bl	11390 <strlen@plt>
   130a8:	mov	r3, #0
   130ac:	mov	r2, #1
   130b0:	strb	r2, [sp, #140]	; 0x8c
   130b4:	str	r0, [sp, #148]	; 0x94
   130b8:	strb	r3, [sp, #152]	; 0x98
   130bc:	b	12ae8 <__assert_fail@plt+0x1620>
   130c0:	ldr	r3, [sp, #144]	; 0x90
   130c4:	mov	r2, #1
   130c8:	str	r2, [sp, #148]	; 0x94
   130cc:	ldrb	r3, [r3]
   130d0:	cmp	r3, #0
   130d4:	bne	1315c <__assert_fail@plt+0x1c94>
   130d8:	ldr	r7, [sp, #156]	; 0x9c
   130dc:	cmp	r7, #0
   130e0:	beq	12b80 <__assert_fail@plt+0x16b8>
   130e4:	b	12f60 <__assert_fail@plt+0x1a98>
   130e8:	ldr	r6, [sp, #8]
   130ec:	mov	r2, fp
   130f0:	ldr	r4, [sp, #12]
   130f4:	mov	r3, #0
   130f8:	strb	r3, [r2]
   130fc:	b	12ff4 <__assert_fail@plt+0x1b2c>
   13100:	mov	r8, #0
   13104:	mvn	sl, #0
   13108:	b	129c0 <__assert_fail@plt+0x14f8>
   1310c:	add	r0, r9, #1
   13110:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   13114:	sub	r1, sl, #1
   13118:	mov	r2, r9
   1311c:	str	r0, [sp, #4]
   13120:	add	r1, r7, r1
   13124:	bl	11360 <mempcpy@plt>
   13128:	mov	r2, r0
   1312c:	b	130f4 <__assert_fail@plt+0x1c2c>
   13130:	mov	r8, fp
   13134:	b	12d34 <__assert_fail@plt+0x186c>
   13138:	bl	1181c <__assert_fail@plt+0x354>
   1313c:	movw	r3, #49416	; 0xc108
   13140:	movt	r3, #2
   13144:	movw	r1, #49532	; 0xc17c
   13148:	movt	r1, #2
   1314c:	movw	r0, #51832	; 0xca78
   13150:	movt	r0, #2
   13154:	mov	r2, #143	; 0x8f
   13158:	bl	114c8 <__assert_fail@plt>
   1315c:	movw	r3, #49416	; 0xc108
   13160:	movt	r3, #2
   13164:	movw	r1, #49532	; 0xc17c
   13168:	movt	r1, #2
   1316c:	movw	r0, #51856	; 0xca90
   13170:	movt	r0, #2
   13174:	mov	r2, #171	; 0xab
   13178:	bl	114c8 <__assert_fail@plt>
   1317c:	mov	r2, #5
   13180:	movw	r1, #51956	; 0xcaf4
   13184:	movt	r1, #2
   13188:	mov	r0, r4
   1318c:	bl	11258 <dcgettext@plt>
   13190:	ldr	r2, [r5, #-4]
   13194:	mov	r6, r0
   13198:	mov	r1, #8
   1319c:	mov	r0, #0
   131a0:	bl	171b4 <__assert_fail@plt+0x5cec>
   131a4:	mov	r3, r0
   131a8:	mov	r2, r6
   131ac:	mov	r1, #0
   131b0:	mov	r0, #2
   131b4:	bl	112f4 <error@plt>
   131b8:	mov	r2, #5
   131bc:	movw	r1, #52044	; 0xcb4c
   131c0:	movt	r1, #2
   131c4:	bl	11258 <dcgettext@plt>
   131c8:	mov	r2, r0
   131cc:	mov	r1, r4
   131d0:	mov	r0, #2
   131d4:	bl	112f4 <error@plt>
   131d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   131dc:	strd	r6, [sp, #8]
   131e0:	movw	r6, #57776	; 0xe1b0
   131e4:	movt	r6, #3
   131e8:	ldr	r4, [r6]
   131ec:	strd	r8, [sp, #16]
   131f0:	mov	r8, r0
   131f4:	strd	sl, [sp, #24]
   131f8:	str	lr, [sp, #32]
   131fc:	sub	sp, sp, #20
   13200:	ldr	r0, [r4]
   13204:	cmp	r0, #0
   13208:	beq	137c8 <__assert_fail@plt+0x2300>
   1320c:	movw	r1, #51924	; 0xcad4
   13210:	movt	r1, #2
   13214:	bl	1118c <strcmp@plt>
   13218:	cmp	r0, #0
   1321c:	moveq	r2, #1
   13220:	movne	r2, #0
   13224:	add	r3, r4, r2, lsl #2
   13228:	str	r3, [r6]
   1322c:	bne	137c8 <__assert_fail@plt+0x2300>
   13230:	ldr	r4, [r4, r2, lsl #2]
   13234:	cmp	r4, #0
   13238:	beq	138a4 <__assert_fail@plt+0x23dc>
   1323c:	add	r3, r3, #4
   13240:	mov	r0, #16
   13244:	str	r3, [r6]
   13248:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   1324c:	mov	r2, r0
   13250:	mov	r3, #1
   13254:	mov	r0, r4
   13258:	mov	r4, r2
   1325c:	str	r3, [r2]
   13260:	str	r2, [sp]
   13264:	bl	2ba10 <__assert_fail@plt+0x1a548>
   13268:	str	r0, [r4, #4]
   1326c:	ldr	r9, [r6]
   13270:	ldr	r0, [r9]
   13274:	cmp	r0, #0
   13278:	beq	133a0 <__assert_fail@plt+0x1ed8>
   1327c:	movw	r5, #52076	; 0xcb6c
   13280:	movt	r5, #2
   13284:	ldr	fp, [sp]
   13288:	movw	r7, #51924	; 0xcad4
   1328c:	movt	r7, #2
   13290:	b	132b4 <__assert_fail@plt+0x1dec>
   13294:	add	r0, r4, #4
   13298:	bl	113b4 <__gmpz_clear@plt>
   1329c:	mov	r0, r4
   132a0:	bl	14484 <__assert_fail@plt+0x2fbc>
   132a4:	ldr	r9, [r6]
   132a8:	ldr	r0, [r9]
   132ac:	cmp	r0, #0
   132b0:	beq	1339c <__assert_fail@plt+0x1ed4>
   132b4:	mov	r1, r5
   132b8:	bl	1118c <strcmp@plt>
   132bc:	cmp	r0, #0
   132c0:	moveq	r3, #1
   132c4:	movne	r3, #0
   132c8:	add	r4, r9, r3, lsl #2
   132cc:	ldr	r0, [r9, r3, lsl #2]
   132d0:	str	r4, [r6]
   132d4:	bne	133c0 <__assert_fail@plt+0x1ef8>
   132d8:	cmp	r0, #0
   132dc:	beq	13354 <__assert_fail@plt+0x1e8c>
   132e0:	mov	r1, r7
   132e4:	bl	1118c <strcmp@plt>
   132e8:	cmp	r0, #0
   132ec:	moveq	r3, #1
   132f0:	movne	r3, #0
   132f4:	add	r9, r4, r3, lsl #2
   132f8:	str	r9, [r6]
   132fc:	bne	13354 <__assert_fail@plt+0x1e8c>
   13300:	ldr	sl, [r4, r3, lsl #2]
   13304:	cmp	sl, #0
   13308:	beq	1386c <__assert_fail@plt+0x23a4>
   1330c:	add	r9, r9, #4
   13310:	mov	r0, #16
   13314:	str	r9, [r6]
   13318:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   1331c:	mov	r4, r0
   13320:	mov	r3, #1
   13324:	mov	r0, sl
   13328:	str	r3, [r4]
   1332c:	bl	2ba10 <__assert_fail@plt+0x1a548>
   13330:	cmp	r8, #0
   13334:	str	r0, [r4, #4]
   13338:	bne	13368 <__assert_fail@plt+0x1ea0>
   1333c:	ldr	r3, [r4]
   13340:	cmp	r3, #1
   13344:	bne	13294 <__assert_fail@plt+0x1dcc>
   13348:	ldr	r0, [r4, #4]
   1334c:	bl	14484 <__assert_fail@plt+0x2fbc>
   13350:	b	1329c <__assert_fail@plt+0x1dd4>
   13354:	mov	r0, r8
   13358:	bl	121d8 <__assert_fail@plt+0xd10>
   1335c:	cmp	r8, #0
   13360:	mov	r4, r0
   13364:	beq	1333c <__assert_fail@plt+0x1e74>
   13368:	mov	r1, r4
   1336c:	mov	r0, fp
   13370:	bl	11d78 <__assert_fail@plt+0x8b0>
   13374:	ldr	r3, [fp]
   13378:	mov	r9, r0
   1337c:	cmp	r3, #1
   13380:	beq	137bc <__assert_fail@plt+0x22f4>
   13384:	add	r0, fp, #4
   13388:	bl	113b4 <__gmpz_clear@plt>
   1338c:	mov	r0, fp
   13390:	mov	fp, r9
   13394:	bl	14484 <__assert_fail@plt+0x2fbc>
   13398:	b	1333c <__assert_fail@plt+0x1e74>
   1339c:	str	fp, [sp]
   133a0:	ldr	r0, [sp]
   133a4:	add	sp, sp, #20
   133a8:	ldrd	r4, [sp]
   133ac:	ldrd	r6, [sp, #8]
   133b0:	ldrd	r8, [sp, #16]
   133b4:	ldrd	sl, [sp, #24]
   133b8:	add	sp, sp, #32
   133bc:	pop	{pc}		; (ldr pc, [sp], #4)
   133c0:	cmp	r0, #0
   133c4:	str	fp, [sp]
   133c8:	beq	133a0 <__assert_fail@plt+0x1ed8>
   133cc:	movw	r3, #52080	; 0xcb70
   133d0:	movt	r3, #2
   133d4:	str	r3, [sp, #4]
   133d8:	movw	r3, #52084	; 0xcb74
   133dc:	movt	r3, #2
   133e0:	str	r3, [sp, #8]
   133e4:	movw	r3, #52088	; 0xcb78
   133e8:	movt	r3, #2
   133ec:	str	r3, [sp, #12]
   133f0:	ldr	r1, [sp, #4]
   133f4:	bl	1118c <strcmp@plt>
   133f8:	subs	fp, r0, #0
   133fc:	moveq	r3, #1
   13400:	movne	r3, #0
   13404:	add	r5, r4, r3, lsl #2
   13408:	ldr	r0, [r4, r3, lsl #2]
   1340c:	str	r5, [r6]
   13410:	bne	13740 <__assert_fail@plt+0x2278>
   13414:	cmp	r0, #0
   13418:	beq	13730 <__assert_fail@plt+0x2268>
   1341c:	movw	r1, #51924	; 0xcad4
   13420:	movt	r1, #2
   13424:	bl	1118c <strcmp@plt>
   13428:	cmp	r0, #0
   1342c:	moveq	r3, #1
   13430:	movne	r3, #0
   13434:	add	r4, r5, r3, lsl #2
   13438:	str	r4, [r6]
   1343c:	bne	13730 <__assert_fail@plt+0x2268>
   13440:	ldr	r5, [r5, r3, lsl #2]
   13444:	cmp	r5, #0
   13448:	beq	13810 <__assert_fail@plt+0x2348>
   1344c:	add	r4, r4, #4
   13450:	mov	r0, #16
   13454:	str	r4, [r6]
   13458:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   1345c:	mov	r4, r0
   13460:	mov	r3, #1
   13464:	mov	r0, r5
   13468:	str	r3, [r4]
   1346c:	bl	2ba10 <__assert_fail@plt+0x1a548>
   13470:	str	r0, [r4, #4]
   13474:	ldr	r5, [r6]
   13478:	ldr	r0, [r5]
   1347c:	cmp	r0, #0
   13480:	beq	1359c <__assert_fail@plt+0x20d4>
   13484:	movw	sl, #52076	; 0xcb6c
   13488:	movt	sl, #2
   1348c:	movw	r9, #51924	; 0xcad4
   13490:	movt	r9, #2
   13494:	b	134b8 <__assert_fail@plt+0x1ff0>
   13498:	add	r0, r5, #4
   1349c:	bl	113b4 <__gmpz_clear@plt>
   134a0:	mov	r0, r5
   134a4:	bl	14484 <__assert_fail@plt+0x2fbc>
   134a8:	ldr	r5, [r6]
   134ac:	ldr	r0, [r5]
   134b0:	cmp	r0, #0
   134b4:	beq	1359c <__assert_fail@plt+0x20d4>
   134b8:	mov	r1, sl
   134bc:	bl	1118c <strcmp@plt>
   134c0:	cmp	r0, #0
   134c4:	moveq	r3, #1
   134c8:	movne	r3, #0
   134cc:	add	r7, r5, r3, lsl #2
   134d0:	str	r7, [r6]
   134d4:	bne	1359c <__assert_fail@plt+0x20d4>
   134d8:	ldr	r0, [r5, r3, lsl #2]
   134dc:	cmp	r0, #0
   134e0:	beq	1358c <__assert_fail@plt+0x20c4>
   134e4:	mov	r1, r9
   134e8:	bl	1118c <strcmp@plt>
   134ec:	cmp	r0, #0
   134f0:	moveq	r3, #1
   134f4:	movne	r3, #0
   134f8:	add	r5, r7, r3, lsl #2
   134fc:	str	r5, [r6]
   13500:	bne	1358c <__assert_fail@plt+0x20c4>
   13504:	ldr	r7, [r7, r3, lsl #2]
   13508:	cmp	r7, #0
   1350c:	beq	137d8 <__assert_fail@plt+0x2310>
   13510:	add	r5, r5, #4
   13514:	mov	r0, #16
   13518:	str	r5, [r6]
   1351c:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   13520:	mov	r5, r0
   13524:	mov	r3, #1
   13528:	mov	r0, r7
   1352c:	str	r3, [r5]
   13530:	bl	2ba10 <__assert_fail@plt+0x1a548>
   13534:	str	r0, [r5, #4]
   13538:	cmp	r8, #0
   1353c:	bne	13558 <__assert_fail@plt+0x2090>
   13540:	ldr	r3, [r5]
   13544:	cmp	r3, #1
   13548:	bne	13498 <__assert_fail@plt+0x1fd0>
   1354c:	ldr	r0, [r5, #4]
   13550:	bl	14484 <__assert_fail@plt+0x2fbc>
   13554:	b	134a0 <__assert_fail@plt+0x1fd8>
   13558:	mov	r1, r5
   1355c:	mov	r0, r4
   13560:	bl	11d78 <__assert_fail@plt+0x8b0>
   13564:	ldr	r3, [r4]
   13568:	mov	r7, r0
   1356c:	cmp	r3, #1
   13570:	beq	136ac <__assert_fail@plt+0x21e4>
   13574:	add	r0, r4, #4
   13578:	bl	113b4 <__gmpz_clear@plt>
   1357c:	mov	r0, r4
   13580:	mov	r4, r7
   13584:	bl	14484 <__assert_fail@plt+0x2fbc>
   13588:	b	13540 <__assert_fail@plt+0x2078>
   1358c:	mov	r0, r8
   13590:	bl	121d8 <__assert_fail@plt+0xd10>
   13594:	mov	r5, r0
   13598:	b	13538 <__assert_fail@plt+0x2070>
   1359c:	cmp	r8, #0
   135a0:	beq	1367c <__assert_fail@plt+0x21b4>
   135a4:	ldr	r2, [sp]
   135a8:	ldr	r3, [r2]
   135ac:	cmp	r3, #0
   135b0:	beq	136e4 <__assert_fail@plt+0x221c>
   135b4:	cmp	r3, #1
   135b8:	bne	138a8 <__assert_fail@plt+0x23e0>
   135bc:	ldr	r5, [r2, #4]
   135c0:	ldrb	r2, [r5]
   135c4:	cmp	r2, #45	; 0x2d
   135c8:	movne	r2, r5
   135cc:	addeq	r2, r5, #1
   135d0:	b	135e0 <__assert_fail@plt+0x2118>
   135d4:	ldrb	r3, [r2, #1]!
   135d8:	cmp	r3, #0
   135dc:	beq	136b8 <__assert_fail@plt+0x21f0>
   135e0:	ldrb	r3, [r2]
   135e4:	sub	r3, r3, #48	; 0x30
   135e8:	cmp	r3, #9
   135ec:	bls	135d4 <__assert_fail@plt+0x210c>
   135f0:	movw	r1, #52092	; 0xcb7c
   135f4:	movt	r1, #2
   135f8:	mov	r2, #5
   135fc:	mov	r0, #0
   13600:	bl	11258 <dcgettext@plt>
   13604:	mov	r2, r0
   13608:	mov	r1, #0
   1360c:	mov	r0, #2
   13610:	bl	112f4 <error@plt>
   13614:	mov	r2, #10
   13618:	mov	r1, r5
   1361c:	add	r0, r4, #4
   13620:	bl	1148c <__gmpz_init_set_str@plt>
   13624:	subs	r7, r0, #0
   13628:	bne	13848 <__assert_fail@plt+0x2380>
   1362c:	mov	r0, r5
   13630:	bl	14484 <__assert_fail@plt+0x2fbc>
   13634:	str	r7, [r4]
   13638:	cmp	fp, #0
   1363c:	beq	137b0 <__assert_fail@plt+0x22e8>
   13640:	ldr	r5, [r4, #8]
   13644:	cmp	r5, #0
   13648:	beq	13860 <__assert_fail@plt+0x2398>
   1364c:	cmp	fp, #1
   13650:	movw	r0, #4504	; 0x1198
   13654:	movt	r0, #1
   13658:	movw	r3, #5032	; 0x13a8
   1365c:	movt	r3, #1
   13660:	moveq	fp, r0
   13664:	movne	fp, r3
   13668:	ldr	r3, [sp]
   1366c:	add	r2, r4, #4
   13670:	add	r1, r3, #4
   13674:	mov	r0, r1
   13678:	blx	fp
   1367c:	ldr	r3, [r4]
   13680:	cmp	r3, #1
   13684:	beq	137a4 <__assert_fail@plt+0x22dc>
   13688:	add	r0, r4, #4
   1368c:	bl	113b4 <__gmpz_clear@plt>
   13690:	mov	r0, r4
   13694:	bl	14484 <__assert_fail@plt+0x2fbc>
   13698:	ldr	r4, [r6]
   1369c:	ldr	r0, [r4]
   136a0:	cmp	r0, #0
   136a4:	bne	133f0 <__assert_fail@plt+0x1f28>
   136a8:	b	133a0 <__assert_fail@plt+0x1ed8>
   136ac:	ldr	r0, [r4, #4]
   136b0:	bl	14484 <__assert_fail@plt+0x2fbc>
   136b4:	b	1357c <__assert_fail@plt+0x20b4>
   136b8:	ldr	r3, [sp]
   136bc:	mov	r2, #10
   136c0:	mov	r1, r5
   136c4:	add	r0, r3, #4
   136c8:	bl	1148c <__gmpz_init_set_str@plt>
   136cc:	subs	r7, r0, #0
   136d0:	bne	13848 <__assert_fail@plt+0x2380>
   136d4:	mov	r0, r5
   136d8:	bl	14484 <__assert_fail@plt+0x2fbc>
   136dc:	ldr	r3, [sp]
   136e0:	str	r7, [r3]
   136e4:	ldr	r3, [r4]
   136e8:	cmp	r3, #0
   136ec:	beq	13638 <__assert_fail@plt+0x2170>
   136f0:	cmp	r3, #1
   136f4:	bne	138a8 <__assert_fail@plt+0x23e0>
   136f8:	ldr	r5, [r4, #4]
   136fc:	ldrb	r2, [r5]
   13700:	cmp	r2, #45	; 0x2d
   13704:	movne	r2, r5
   13708:	addeq	r2, r5, #1
   1370c:	b	1371c <__assert_fail@plt+0x2254>
   13710:	ldrb	r3, [r2, #1]!
   13714:	cmp	r3, #0
   13718:	beq	13614 <__assert_fail@plt+0x214c>
   1371c:	ldrb	r3, [r2]
   13720:	sub	r3, r3, #48	; 0x30
   13724:	cmp	r3, #9
   13728:	bls	13710 <__assert_fail@plt+0x2248>
   1372c:	b	135f0 <__assert_fail@plt+0x2128>
   13730:	mov	r0, r8
   13734:	bl	121d8 <__assert_fail@plt+0xd10>
   13738:	mov	r4, r0
   1373c:	b	13474 <__assert_fail@plt+0x1fac>
   13740:	cmp	r0, #0
   13744:	beq	133a0 <__assert_fail@plt+0x1ed8>
   13748:	ldr	r1, [sp, #8]
   1374c:	bl	1118c <strcmp@plt>
   13750:	cmp	r0, #0
   13754:	moveq	r3, #4
   13758:	movne	r3, #0
   1375c:	add	r5, r5, r3
   13760:	moveq	fp, #1
   13764:	ldr	r0, [r5]
   13768:	str	r5, [r6]
   1376c:	beq	13414 <__assert_fail@plt+0x1f4c>
   13770:	cmp	r0, #0
   13774:	beq	133a0 <__assert_fail@plt+0x1ed8>
   13778:	ldr	r1, [sp, #12]
   1377c:	bl	1118c <strcmp@plt>
   13780:	cmp	r0, #0
   13784:	moveq	r3, #4
   13788:	movne	r3, #0
   1378c:	add	r5, r5, r3
   13790:	str	r5, [r6]
   13794:	bne	133a0 <__assert_fail@plt+0x1ed8>
   13798:	mov	fp, #2
   1379c:	ldr	r0, [r5]
   137a0:	b	13414 <__assert_fail@plt+0x1f4c>
   137a4:	ldr	r0, [r4, #4]
   137a8:	bl	14484 <__assert_fail@plt+0x2fbc>
   137ac:	b	13690 <__assert_fail@plt+0x21c8>
   137b0:	movw	fp, #4732	; 0x127c
   137b4:	movt	fp, #1
   137b8:	b	13668 <__assert_fail@plt+0x21a0>
   137bc:	ldr	r0, [fp, #4]
   137c0:	bl	14484 <__assert_fail@plt+0x2fbc>
   137c4:	b	1338c <__assert_fail@plt+0x1ec4>
   137c8:	mov	r0, r8
   137cc:	bl	121d8 <__assert_fail@plt+0xd10>
   137d0:	str	r0, [sp]
   137d4:	b	1326c <__assert_fail@plt+0x1da4>
   137d8:	mov	r2, #5
   137dc:	movw	r1, #49492	; 0xc154
   137e0:	movt	r1, #2
   137e4:	bl	11258 <dcgettext@plt>
   137e8:	mov	r4, r0
   137ec:	mov	r1, #8
   137f0:	ldr	r2, [r5, #-4]
   137f4:	mov	r0, r7
   137f8:	bl	171b4 <__assert_fail@plt+0x5cec>
   137fc:	mov	r3, r0
   13800:	mov	r2, r4
   13804:	mov	r1, r7
   13808:	mov	r0, #2
   1380c:	bl	112f4 <error@plt>
   13810:	mov	r2, #5
   13814:	movw	r1, #49492	; 0xc154
   13818:	movt	r1, #2
   1381c:	bl	11258 <dcgettext@plt>
   13820:	mov	r6, r0
   13824:	mov	r1, #8
   13828:	ldr	r2, [r4, #-4]
   1382c:	mov	r0, r5
   13830:	bl	171b4 <__assert_fail@plt+0x5cec>
   13834:	mov	r3, r0
   13838:	mov	r2, r6
   1383c:	mov	r1, r5
   13840:	mov	r0, #2
   13844:	bl	112f4 <error@plt>
   13848:	movw	r2, #52440	; 0xccd8
   1384c:	movt	r2, #2
   13850:	mov	r3, r5
   13854:	mov	r1, #34	; 0x22
   13858:	mov	r0, #3
   1385c:	bl	112f4 <error@plt>
   13860:	movw	r1, #52116	; 0xcb94
   13864:	movt	r1, #2
   13868:	b	135f8 <__assert_fail@plt+0x2130>
   1386c:	mov	r2, #5
   13870:	movw	r1, #49492	; 0xc154
   13874:	movt	r1, #2
   13878:	bl	11258 <dcgettext@plt>
   1387c:	mov	r4, r0
   13880:	mov	r1, #8
   13884:	ldr	r2, [r9, #-4]
   13888:	mov	r0, sl
   1388c:	bl	171b4 <__assert_fail@plt+0x5cec>
   13890:	mov	r3, r0
   13894:	mov	r2, r4
   13898:	mov	r1, sl
   1389c:	mov	r0, #2
   138a0:	bl	112f4 <error@plt>
   138a4:	bl	1181c <__assert_fail@plt+0x354>
   138a8:	bl	114bc <abort@plt>
   138ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138b0:	strd	r6, [sp, #8]
   138b4:	movw	r6, #57776	; 0xe1b0
   138b8:	movt	r6, #3
   138bc:	strd	r8, [sp, #16]
   138c0:	mov	r7, r0
   138c4:	strd	sl, [sp, #24]
   138c8:	str	lr, [sp, #32]
   138cc:	sub	sp, sp, #20
   138d0:	bl	131d8 <__assert_fail@plt+0x1d10>
   138d4:	ldr	r4, [r6]
   138d8:	mov	r8, r0
   138dc:	ldr	r0, [r4]
   138e0:	cmp	r0, #0
   138e4:	beq	13a30 <__assert_fail@plt+0x2568>
   138e8:	movw	sl, #51924	; 0xcad4
   138ec:	movt	sl, #2
   138f0:	movw	r3, #52136	; 0xcba8
   138f4:	movt	r3, #2
   138f8:	movw	fp, #5248	; 0x1480
   138fc:	movt	fp, #1
   13900:	str	r3, [sp, #4]
   13904:	mov	r1, sl
   13908:	bl	1118c <strcmp@plt>
   1390c:	subs	r5, r0, #0
   13910:	moveq	r3, #1
   13914:	movne	r3, #0
   13918:	add	r9, r4, r3, lsl #2
   1391c:	str	r9, [r6]
   13920:	bne	13a90 <__assert_fail@plt+0x25c8>
   13924:	mov	r0, r7
   13928:	bl	131d8 <__assert_fail@plt+0x1d10>
   1392c:	cmp	r7, #0
   13930:	mov	r4, r0
   13934:	beq	13a04 <__assert_fail@plt+0x253c>
   13938:	ldr	r3, [r8]
   1393c:	cmp	r3, #0
   13940:	beq	139d0 <__assert_fail@plt+0x2508>
   13944:	cmp	r3, #1
   13948:	bne	13b2c <__assert_fail@plt+0x2664>
   1394c:	ldr	r9, [r8, #4]
   13950:	ldrb	r2, [r9]
   13954:	cmp	r2, #45	; 0x2d
   13958:	movne	r2, r9
   1395c:	addeq	r2, r9, #1
   13960:	b	13970 <__assert_fail@plt+0x24a8>
   13964:	ldrb	r3, [r2, #1]!
   13968:	cmp	r3, #0
   1396c:	beq	139a4 <__assert_fail@plt+0x24dc>
   13970:	ldrb	r3, [r2]
   13974:	sub	r3, r3, #48	; 0x30
   13978:	cmp	r3, #9
   1397c:	bls	13964 <__assert_fail@plt+0x249c>
   13980:	mov	r2, #5
   13984:	movw	r1, #52092	; 0xcb7c
   13988:	movt	r1, #2
   1398c:	mov	r0, #0
   13990:	bl	11258 <dcgettext@plt>
   13994:	mov	r2, r0
   13998:	mov	r1, #0
   1399c:	mov	r0, #2
   139a0:	bl	112f4 <error@plt>
   139a4:	mov	r2, #10
   139a8:	mov	r1, r9
   139ac:	add	r0, r8, #4
   139b0:	bl	1148c <__gmpz_init_set_str@plt>
   139b4:	subs	r3, r0, #0
   139b8:	bne	13b14 <__assert_fail@plt+0x264c>
   139bc:	mov	r0, r9
   139c0:	str	r3, [sp, #8]
   139c4:	bl	14484 <__assert_fail@plt+0x2fbc>
   139c8:	ldr	r3, [sp, #8]
   139cc:	str	r3, [r8]
   139d0:	ldr	r3, [r4]
   139d4:	cmp	r3, #0
   139d8:	bne	13a50 <__assert_fail@plt+0x2588>
   139dc:	add	r3, r4, #4
   139e0:	cmp	r5, #0
   139e4:	movw	r0, #4624	; 0x1210
   139e8:	movt	r0, #1
   139ec:	add	r1, r8, #4
   139f0:	movne	r5, r0
   139f4:	mov	r2, r3
   139f8:	moveq	r5, fp
   139fc:	mov	r0, r1
   13a00:	blx	r5
   13a04:	ldr	r3, [r4]
   13a08:	cmp	r3, #1
   13a0c:	beq	13ac4 <__assert_fail@plt+0x25fc>
   13a10:	add	r0, r4, #4
   13a14:	bl	113b4 <__gmpz_clear@plt>
   13a18:	mov	r0, r4
   13a1c:	bl	14484 <__assert_fail@plt+0x2fbc>
   13a20:	ldr	r4, [r6]
   13a24:	ldr	r0, [r4]
   13a28:	cmp	r0, #0
   13a2c:	bne	13904 <__assert_fail@plt+0x243c>
   13a30:	mov	r0, r8
   13a34:	add	sp, sp, #20
   13a38:	ldrd	r4, [sp]
   13a3c:	ldrd	r6, [sp, #8]
   13a40:	ldrd	r8, [sp, #16]
   13a44:	ldrd	sl, [sp, #24]
   13a48:	add	sp, sp, #32
   13a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a50:	cmp	r3, #1
   13a54:	bne	13b2c <__assert_fail@plt+0x2664>
   13a58:	ldr	r9, [r4, #4]
   13a5c:	ldrb	r2, [r9]
   13a60:	cmp	r2, #45	; 0x2d
   13a64:	movne	r2, r9
   13a68:	addeq	r2, r9, #1
   13a6c:	b	13a7c <__assert_fail@plt+0x25b4>
   13a70:	ldrb	r3, [r2, #1]!
   13a74:	cmp	r3, #0
   13a78:	beq	13ad0 <__assert_fail@plt+0x2608>
   13a7c:	ldrb	r3, [r2]
   13a80:	sub	r3, r3, #48	; 0x30
   13a84:	cmp	r3, #9
   13a88:	bls	13a70 <__assert_fail@plt+0x25a8>
   13a8c:	b	13980 <__assert_fail@plt+0x24b8>
   13a90:	ldr	r0, [r4, r3, lsl #2]
   13a94:	cmp	r0, #0
   13a98:	beq	13a30 <__assert_fail@plt+0x2568>
   13a9c:	ldr	r1, [sp, #4]
   13aa0:	bl	1118c <strcmp@plt>
   13aa4:	cmp	r0, #0
   13aa8:	moveq	r3, #4
   13aac:	movne	r3, #0
   13ab0:	add	r9, r9, r3
   13ab4:	str	r9, [r6]
   13ab8:	bne	13a30 <__assert_fail@plt+0x2568>
   13abc:	mov	r5, #1
   13ac0:	b	13924 <__assert_fail@plt+0x245c>
   13ac4:	ldr	r0, [r4, #4]
   13ac8:	bl	14484 <__assert_fail@plt+0x2fbc>
   13acc:	b	13a18 <__assert_fail@plt+0x2550>
   13ad0:	add	r3, r4, #4
   13ad4:	mov	r2, #10
   13ad8:	mov	r0, r3
   13adc:	mov	r1, r9
   13ae0:	str	r3, [sp, #8]
   13ae4:	bl	1148c <__gmpz_init_set_str@plt>
   13ae8:	subs	r2, r0, #0
   13aec:	ldr	r3, [sp, #8]
   13af0:	bne	13b14 <__assert_fail@plt+0x264c>
   13af4:	mov	r0, r9
   13af8:	str	r3, [sp, #8]
   13afc:	str	r2, [sp, #12]
   13b00:	bl	14484 <__assert_fail@plt+0x2fbc>
   13b04:	ldr	r3, [sp, #8]
   13b08:	ldr	r2, [sp, #12]
   13b0c:	str	r2, [r4]
   13b10:	b	139e0 <__assert_fail@plt+0x2518>
   13b14:	movw	r2, #52440	; 0xccd8
   13b18:	movt	r2, #2
   13b1c:	mov	r3, r9
   13b20:	mov	r1, #34	; 0x22
   13b24:	mov	r0, #3
   13b28:	bl	112f4 <error@plt>
   13b2c:	bl	114bc <abort@plt>
   13b30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13b34:	strd	r6, [sp, #8]
   13b38:	mov	r7, r0
   13b3c:	strd	r8, [sp, #16]
   13b40:	movw	r8, #57776	; 0xe1b0
   13b44:	movt	r8, #3
   13b48:	strd	sl, [sp, #24]
   13b4c:	str	lr, [sp, #32]
   13b50:	sub	sp, sp, #12
   13b54:	bl	138ac <__assert_fail@plt+0x23e4>
   13b58:	ldr	r5, [r8]
   13b5c:	mov	r4, r0
   13b60:	ldr	r0, [r5]
   13b64:	cmp	r0, #0
   13b68:	beq	13ef4 <__assert_fail@plt+0x2a2c>
   13b6c:	movw	r3, #52148	; 0xcbb4
   13b70:	movt	r3, #2
   13b74:	movw	r9, #52140	; 0xcbac
   13b78:	movt	r9, #2
   13b7c:	movw	sl, #52144	; 0xcbb0
   13b80:	movt	sl, #2
   13b84:	str	r3, [sp, #4]
   13b88:	b	13be4 <__assert_fail@plt+0x271c>
   13b8c:	add	r0, r4, #4
   13b90:	bl	113b4 <__gmpz_clear@plt>
   13b94:	mov	r0, r4
   13b98:	bl	14484 <__assert_fail@plt+0x2fbc>
   13b9c:	ldr	r3, [r5]
   13ba0:	cmp	r3, #1
   13ba4:	beq	13c9c <__assert_fail@plt+0x27d4>
   13ba8:	add	r0, r5, #4
   13bac:	bl	113b4 <__gmpz_clear@plt>
   13bb0:	mov	r0, r5
   13bb4:	bl	14484 <__assert_fail@plt+0x2fbc>
   13bb8:	mov	r0, #16
   13bbc:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   13bc0:	mov	r3, #0
   13bc4:	mov	r4, r0
   13bc8:	mov	r1, r6
   13bcc:	str	r3, [r0], #4
   13bd0:	bl	11444 <__gmpz_init_set_ui@plt>
   13bd4:	ldr	r5, [r8]
   13bd8:	ldr	r0, [r5]
   13bdc:	cmp	r0, #0
   13be0:	beq	13ef4 <__assert_fail@plt+0x2a2c>
   13be4:	mov	r1, r9
   13be8:	bl	1118c <strcmp@plt>
   13bec:	cmp	r0, #0
   13bf0:	moveq	r3, #1
   13bf4:	movne	r3, #0
   13bf8:	add	r6, r5, r3, lsl #2
   13bfc:	str	r6, [r8]
   13c00:	moveq	r6, r0
   13c04:	bne	13c38 <__assert_fail@plt+0x2770>
   13c08:	mov	r0, r7
   13c0c:	bl	138ac <__assert_fail@plt+0x23e4>
   13c10:	cmp	r7, #0
   13c14:	mov	r5, r0
   13c18:	moveq	r6, r7
   13c1c:	bne	13ca8 <__assert_fail@plt+0x27e0>
   13c20:	ldr	r3, [r4]
   13c24:	cmp	r3, #1
   13c28:	bne	13b8c <__assert_fail@plt+0x26c4>
   13c2c:	ldr	r0, [r4, #4]
   13c30:	bl	14484 <__assert_fail@plt+0x2fbc>
   13c34:	b	13b94 <__assert_fail@plt+0x26cc>
   13c38:	ldr	r0, [r5, r3, lsl #2]
   13c3c:	cmp	r0, #0
   13c40:	beq	13ef4 <__assert_fail@plt+0x2a2c>
   13c44:	mov	r1, sl
   13c48:	bl	1118c <strcmp@plt>
   13c4c:	cmp	r0, #0
   13c50:	moveq	r3, #1
   13c54:	movne	r3, #0
   13c58:	add	r5, r6, r3, lsl #2
   13c5c:	moveq	r6, #1
   13c60:	str	r5, [r8]
   13c64:	beq	13c08 <__assert_fail@plt+0x2740>
   13c68:	ldr	r0, [r6, r3, lsl #2]
   13c6c:	cmp	r0, #0
   13c70:	beq	13ef4 <__assert_fail@plt+0x2a2c>
   13c74:	ldr	r1, [sp, #4]
   13c78:	bl	1118c <strcmp@plt>
   13c7c:	cmp	r0, #0
   13c80:	moveq	r3, #1
   13c84:	movne	r3, #0
   13c88:	add	r6, r5, r3, lsl #2
   13c8c:	str	r6, [r8]
   13c90:	bne	13e1c <__assert_fail@plt+0x2954>
   13c94:	mov	r6, #2
   13c98:	b	13c08 <__assert_fail@plt+0x2740>
   13c9c:	ldr	r0, [r5, #4]
   13ca0:	bl	14484 <__assert_fail@plt+0x2fbc>
   13ca4:	b	13bb0 <__assert_fail@plt+0x26e8>
   13ca8:	ldr	r0, [r4]
   13cac:	cmp	r0, #0
   13cb0:	bne	13dcc <__assert_fail@plt+0x2904>
   13cb4:	add	r3, r4, #4
   13cb8:	mov	r1, #10
   13cbc:	mov	r2, r3
   13cc0:	str	r3, [sp]
   13cc4:	bl	11264 <__gmpz_get_str@plt>
   13cc8:	ldr	r3, [sp]
   13ccc:	mov	fp, r0
   13cd0:	mov	r0, r3
   13cd4:	bl	113b4 <__gmpz_clear@plt>
   13cd8:	mov	r3, #1
   13cdc:	stm	r4, {r3, fp}
   13ce0:	ldr	r0, [r5]
   13ce4:	cmp	r0, #0
   13ce8:	bne	13dd8 <__assert_fail@plt+0x2910>
   13cec:	add	r3, r5, #4
   13cf0:	mov	r1, #10
   13cf4:	mov	r2, r3
   13cf8:	str	r3, [sp]
   13cfc:	bl	11264 <__gmpz_get_str@plt>
   13d00:	ldr	r3, [sp]
   13d04:	mov	fp, r0
   13d08:	mov	r0, r3
   13d0c:	bl	113b4 <__gmpz_clear@plt>
   13d10:	mov	r3, #1
   13d14:	stm	r5, {r3, fp}
   13d18:	ldr	r0, [r4, #4]
   13d1c:	ldrb	r2, [r0]
   13d20:	cmp	r2, #45	; 0x2d
   13d24:	movne	r2, r0
   13d28:	addeq	r2, r0, #1
   13d2c:	b	13d3c <__assert_fail@plt+0x2874>
   13d30:	ldrb	r3, [r2, #1]!
   13d34:	cmp	r3, #0
   13d38:	beq	13de4 <__assert_fail@plt+0x291c>
   13d3c:	ldrb	r3, [r2]
   13d40:	sub	r3, r3, #48	; 0x30
   13d44:	cmp	r3, #9
   13d48:	bls	13d30 <__assert_fail@plt+0x2868>
   13d4c:	bl	113c0 <__errno_location@plt>
   13d50:	mov	r3, #0
   13d54:	str	r3, [r0]
   13d58:	ldr	r0, [r4, #4]
   13d5c:	ldr	r1, [r5, #4]
   13d60:	bl	11300 <strcoll@plt>
   13d64:	sub	r6, r6, #1
   13d68:	cmp	r6, #4
   13d6c:	ldrls	pc, [pc, r6, lsl #2]
   13d70:	b	13f14 <__assert_fail@plt+0x2a4c>
   13d74:	andeq	r3, r1, ip, lsr #27
   13d78:	andeq	r3, r1, r0, lsr #27
   13d7c:	muleq	r1, r4, sp
   13d80:	andeq	r3, r1, r8, lsl #27
   13d84:			; <UNDEFINED> instruction: 0x00013dbc
   13d88:	mvn	r6, r0
   13d8c:	lsr	r6, r6, #31
   13d90:	b	13c20 <__assert_fail@plt+0x2758>
   13d94:	adds	r6, r0, #0
   13d98:	movne	r6, #1
   13d9c:	b	13c20 <__assert_fail@plt+0x2758>
   13da0:	clz	r6, r0
   13da4:	lsr	r6, r6, #5
   13da8:	b	13c20 <__assert_fail@plt+0x2758>
   13dac:	cmp	r0, #0
   13db0:	movgt	r6, #0
   13db4:	movle	r6, #1
   13db8:	b	13c20 <__assert_fail@plt+0x2758>
   13dbc:	cmp	r0, #0
   13dc0:	movle	r6, #0
   13dc4:	movgt	r6, #1
   13dc8:	b	13c20 <__assert_fail@plt+0x2758>
   13dcc:	cmp	r0, #1
   13dd0:	beq	13ce0 <__assert_fail@plt+0x2818>
   13dd4:	bl	114bc <abort@plt>
   13dd8:	cmp	r0, #1
   13ddc:	beq	13d18 <__assert_fail@plt+0x2850>
   13de0:	b	13dd4 <__assert_fail@plt+0x290c>
   13de4:	ldr	r1, [r5, #4]
   13de8:	ldrb	r2, [r1]
   13dec:	cmp	r2, #45	; 0x2d
   13df0:	movne	r2, r1
   13df4:	addeq	r2, r1, #1
   13df8:	b	13e08 <__assert_fail@plt+0x2940>
   13dfc:	ldrb	r3, [r2, #1]!
   13e00:	cmp	r3, #0
   13e04:	beq	13eec <__assert_fail@plt+0x2a24>
   13e08:	ldrb	r3, [r2]
   13e0c:	sub	r3, r3, #48	; 0x30
   13e10:	cmp	r3, #9
   13e14:	bls	13dfc <__assert_fail@plt+0x2934>
   13e18:	b	13d4c <__assert_fail@plt+0x2884>
   13e1c:	ldr	r0, [r5, r3, lsl #2]
   13e20:	cmp	r0, #0
   13e24:	beq	13ef4 <__assert_fail@plt+0x2a2c>
   13e28:	movw	r1, #52152	; 0xcbb8
   13e2c:	movt	r1, #2
   13e30:	bl	1118c <strcmp@plt>
   13e34:	cmp	r0, #0
   13e38:	moveq	r3, #1
   13e3c:	movne	r3, #0
   13e40:	add	r5, r6, r3, lsl #2
   13e44:	str	r5, [r8]
   13e48:	beq	13c94 <__assert_fail@plt+0x27cc>
   13e4c:	ldr	r0, [r6, r3, lsl #2]
   13e50:	cmp	r0, #0
   13e54:	beq	13ef4 <__assert_fail@plt+0x2a2c>
   13e58:	movw	r1, #52156	; 0xcbbc
   13e5c:	movt	r1, #2
   13e60:	bl	1118c <strcmp@plt>
   13e64:	cmp	r0, #0
   13e68:	moveq	r3, #1
   13e6c:	movne	r3, #0
   13e70:	add	r6, r5, r3, lsl #2
   13e74:	str	r6, [r8]
   13e78:	moveq	r6, #3
   13e7c:	beq	13c08 <__assert_fail@plt+0x2740>
   13e80:	ldr	r0, [r5, r3, lsl #2]
   13e84:	cmp	r0, #0
   13e88:	beq	13ef4 <__assert_fail@plt+0x2a2c>
   13e8c:	movw	r1, #52160	; 0xcbc0
   13e90:	movt	r1, #2
   13e94:	bl	1118c <strcmp@plt>
   13e98:	cmp	r0, #0
   13e9c:	moveq	r3, #1
   13ea0:	movne	r3, #0
   13ea4:	add	r5, r6, r3, lsl #2
   13ea8:	moveq	r6, #4
   13eac:	str	r5, [r8]
   13eb0:	beq	13c08 <__assert_fail@plt+0x2740>
   13eb4:	ldr	r0, [r6, r3, lsl #2]
   13eb8:	cmp	r0, #0
   13ebc:	beq	13ef4 <__assert_fail@plt+0x2a2c>
   13ec0:	movw	r1, #52164	; 0xcbc4
   13ec4:	movt	r1, #2
   13ec8:	bl	1118c <strcmp@plt>
   13ecc:	cmp	r0, #0
   13ed0:	moveq	r3, #4
   13ed4:	movne	r3, #0
   13ed8:	add	r5, r5, r3
   13edc:	str	r5, [r8]
   13ee0:	bne	13ef4 <__assert_fail@plt+0x2a2c>
   13ee4:	mov	r6, #5
   13ee8:	b	13c08 <__assert_fail@plt+0x2740>
   13eec:	bl	2ab2c <__assert_fail@plt+0x19664>
   13ef0:	b	13d64 <__assert_fail@plt+0x289c>
   13ef4:	mov	r0, r4
   13ef8:	add	sp, sp, #12
   13efc:	ldrd	r4, [sp]
   13f00:	ldrd	r6, [sp, #8]
   13f04:	ldrd	r8, [sp, #16]
   13f08:	ldrd	sl, [sp, #24]
   13f0c:	add	sp, sp, #32
   13f10:	pop	{pc}		; (ldr pc, [sp], #4)
   13f14:	lsr	r6, r0, #31
   13f18:	b	13c20 <__assert_fail@plt+0x2758>
   13f1c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13f20:	movw	r5, #57776	; 0xe1b0
   13f24:	movt	r5, #3
   13f28:	strd	r6, [sp, #8]
   13f2c:	mov	r6, r0
   13f30:	movw	r7, #52168	; 0xcbc8
   13f34:	movt	r7, #2
   13f38:	strd	r8, [sp, #16]
   13f3c:	mov	r8, #0
   13f40:	str	sl, [sp, #24]
   13f44:	str	lr, [sp, #28]
   13f48:	bl	13b30 <__assert_fail@plt+0x2668>
   13f4c:	mov	r4, r0
   13f50:	ldr	r9, [r5]
   13f54:	ldr	r0, [r9]
   13f58:	cmp	r0, #0
   13f5c:	beq	14034 <__assert_fail@plt+0x2b6c>
   13f60:	mov	r1, r7
   13f64:	bl	1118c <strcmp@plt>
   13f68:	cmp	r0, #0
   13f6c:	moveq	r3, #4
   13f70:	movne	r3, #0
   13f74:	add	r9, r9, r3
   13f78:	str	r9, [r5]
   13f7c:	bne	14034 <__assert_fail@plt+0x2b6c>
   13f80:	cmp	r6, #0
   13f84:	beq	14120 <__assert_fail@plt+0x2c58>
   13f88:	ldr	r3, [r4]
   13f8c:	cmp	r3, #0
   13f90:	bne	140e4 <__assert_fail@plt+0x2c1c>
   13f94:	ldr	r0, [r4, #8]
   13f98:	adds	r0, r0, #0
   13f9c:	movne	r0, #1
   13fa0:	bl	13b30 <__assert_fail@plt+0x2668>
   13fa4:	ldr	r2, [r4]
   13fa8:	mov	r9, r0
   13fac:	cmp	r2, #0
   13fb0:	bne	14050 <__assert_fail@plt+0x2b88>
   13fb4:	ldr	r3, [r4, #8]
   13fb8:	cmp	r3, #0
   13fbc:	beq	13fe0 <__assert_fail@plt+0x2b18>
   13fc0:	ldr	r3, [r9]
   13fc4:	cmp	r3, #0
   13fc8:	bne	14094 <__assert_fail@plt+0x2bcc>
   13fcc:	ldr	r3, [r9, #8]
   13fd0:	cmp	r3, #0
   13fd4:	bne	14134 <__assert_fail@plt+0x2c6c>
   13fd8:	cmp	r2, #1
   13fdc:	beq	14140 <__assert_fail@plt+0x2c78>
   13fe0:	add	r0, r4, #4
   13fe4:	bl	113b4 <__gmpz_clear@plt>
   13fe8:	mov	r0, r4
   13fec:	bl	14484 <__assert_fail@plt+0x2fbc>
   13ff0:	ldr	r3, [r9]
   13ff4:	cmp	r3, #1
   13ff8:	beq	14128 <__assert_fail@plt+0x2c60>
   13ffc:	add	r0, r9, #4
   14000:	bl	113b4 <__gmpz_clear@plt>
   14004:	mov	r0, r9
   14008:	bl	14484 <__assert_fail@plt+0x2fbc>
   1400c:	mov	r0, #16
   14010:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   14014:	mov	r4, r0
   14018:	mov	r1, #0
   1401c:	str	r8, [r0], #4
   14020:	bl	11444 <__gmpz_init_set_ui@plt>
   14024:	ldr	r9, [r5]
   14028:	ldr	r0, [r9]
   1402c:	cmp	r0, #0
   14030:	bne	13f60 <__assert_fail@plt+0x2a98>
   14034:	mov	r0, r4
   14038:	ldrd	r4, [sp]
   1403c:	ldrd	r6, [sp, #8]
   14040:	ldrd	r8, [sp, #16]
   14044:	ldr	sl, [sp, #24]
   14048:	add	sp, sp, #28
   1404c:	pop	{pc}		; (ldr pc, [sp], #4)
   14050:	cmp	r2, #1
   14054:	bne	14148 <__assert_fail@plt+0x2c80>
   14058:	ldr	r0, [r4, #4]
   1405c:	ldrb	r3, [r0]
   14060:	cmp	r3, #0
   14064:	beq	1408c <__assert_fail@plt+0x2bc4>
   14068:	cmp	r3, #45	; 0x2d
   1406c:	movne	r3, r0
   14070:	addeq	r3, r0, #1
   14074:	ldrb	r1, [r3]
   14078:	cmp	r1, #48	; 0x30
   1407c:	bne	13fc0 <__assert_fail@plt+0x2af8>
   14080:	ldrb	r1, [r3, #1]!
   14084:	cmp	r1, #0
   14088:	bne	14074 <__assert_fail@plt+0x2bac>
   1408c:	bl	14484 <__assert_fail@plt+0x2fbc>
   14090:	b	13fe8 <__assert_fail@plt+0x2b20>
   14094:	cmp	r3, #1
   14098:	bne	14148 <__assert_fail@plt+0x2c80>
   1409c:	ldr	r0, [r9, #4]
   140a0:	ldrb	r3, [r0]
   140a4:	cmp	r3, #0
   140a8:	beq	13fd8 <__assert_fail@plt+0x2b10>
   140ac:	cmp	r3, #45	; 0x2d
   140b0:	movne	r3, r0
   140b4:	addeq	r3, r0, #1
   140b8:	b	140c8 <__assert_fail@plt+0x2c00>
   140bc:	ldrb	r1, [r3, #1]!
   140c0:	cmp	r1, #0
   140c4:	beq	13fd8 <__assert_fail@plt+0x2b10>
   140c8:	ldrb	r1, [r3]
   140cc:	cmp	r1, #48	; 0x30
   140d0:	beq	140bc <__assert_fail@plt+0x2bf4>
   140d4:	bl	14484 <__assert_fail@plt+0x2fbc>
   140d8:	mov	r0, r9
   140dc:	bl	14484 <__assert_fail@plt+0x2fbc>
   140e0:	b	13f50 <__assert_fail@plt+0x2a88>
   140e4:	cmp	r3, #1
   140e8:	bne	14148 <__assert_fail@plt+0x2c80>
   140ec:	ldr	r3, [r4, #4]
   140f0:	ldrb	r0, [r3]
   140f4:	cmp	r0, #0
   140f8:	beq	13fa0 <__assert_fail@plt+0x2ad8>
   140fc:	cmp	r0, #45	; 0x2d
   14100:	addeq	r3, r3, #1
   14104:	b	14114 <__assert_fail@plt+0x2c4c>
   14108:	ldrb	r0, [r3, #1]!
   1410c:	cmp	r0, #0
   14110:	beq	13fa0 <__assert_fail@plt+0x2ad8>
   14114:	ldrb	r2, [r3]
   14118:	cmp	r2, #48	; 0x30
   1411c:	beq	14108 <__assert_fail@plt+0x2c40>
   14120:	mov	r0, r6
   14124:	b	13fa0 <__assert_fail@plt+0x2ad8>
   14128:	ldr	r0, [r9, #4]
   1412c:	bl	14484 <__assert_fail@plt+0x2fbc>
   14130:	b	14004 <__assert_fail@plt+0x2b3c>
   14134:	add	r0, r9, #4
   14138:	bl	113b4 <__gmpz_clear@plt>
   1413c:	b	140d8 <__assert_fail@plt+0x2c10>
   14140:	ldr	r0, [r4, #4]
   14144:	b	1408c <__assert_fail@plt+0x2bc4>
   14148:	bl	114bc <abort@plt>
   1414c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14150:	strd	r6, [sp, #8]
   14154:	mov	r7, r0
   14158:	movw	r6, #57776	; 0xe1b0
   1415c:	movt	r6, #3
   14160:	strd	r8, [sp, #16]
   14164:	movw	r8, #52172	; 0xcbcc
   14168:	movt	r8, #2
   1416c:	str	sl, [sp, #24]
   14170:	mov	r9, #0
   14174:	str	lr, [sp, #28]
   14178:	bl	13f1c <__assert_fail@plt+0x2a54>
   1417c:	mov	r4, r0
   14180:	ldr	r5, [r6]
   14184:	ldr	r0, [r5]
   14188:	cmp	r0, #0
   1418c:	beq	1421c <__assert_fail@plt+0x2d54>
   14190:	mov	r1, r8
   14194:	bl	1118c <strcmp@plt>
   14198:	cmp	r0, #0
   1419c:	moveq	r3, #4
   141a0:	movne	r3, #0
   141a4:	add	r5, r5, r3
   141a8:	str	r5, [r6]
   141ac:	bne	1421c <__assert_fail@plt+0x2d54>
   141b0:	cmp	r7, #0
   141b4:	beq	142dc <__assert_fail@plt+0x2e14>
   141b8:	ldr	r3, [r4]
   141bc:	cmp	r3, #0
   141c0:	bne	142a0 <__assert_fail@plt+0x2dd8>
   141c4:	ldr	r0, [r4, #8]
   141c8:	clz	r0, r0
   141cc:	lsr	r0, r0, #5
   141d0:	bl	13f1c <__assert_fail@plt+0x2a54>
   141d4:	ldr	r3, [r4]
   141d8:	mov	r5, r0
   141dc:	cmp	r3, #0
   141e0:	bne	14238 <__assert_fail@plt+0x2d70>
   141e4:	ldr	r3, [r4, #8]
   141e8:	cmp	r3, #0
   141ec:	beq	14328 <__assert_fail@plt+0x2e60>
   141f0:	ldr	r3, [r5]
   141f4:	cmp	r3, #1
   141f8:	beq	14334 <__assert_fail@plt+0x2e6c>
   141fc:	add	r0, r5, #4
   14200:	bl	113b4 <__gmpz_clear@plt>
   14204:	mov	r0, r5
   14208:	bl	14484 <__assert_fail@plt+0x2fbc>
   1420c:	ldr	r5, [r6]
   14210:	ldr	r0, [r5]
   14214:	cmp	r0, #0
   14218:	bne	14190 <__assert_fail@plt+0x2cc8>
   1421c:	mov	r0, r4
   14220:	ldrd	r4, [sp]
   14224:	ldrd	r6, [sp, #8]
   14228:	ldrd	r8, [sp, #16]
   1422c:	ldr	sl, [sp, #24]
   14230:	add	sp, sp, #28
   14234:	pop	{pc}		; (ldr pc, [sp], #4)
   14238:	cmp	r3, #1
   1423c:	bne	14374 <__assert_fail@plt+0x2eac>
   14240:	ldr	r0, [r4, #4]
   14244:	ldrb	r3, [r0]
   14248:	cmp	r3, #0
   1424c:	beq	14274 <__assert_fail@plt+0x2dac>
   14250:	cmp	r3, #45	; 0x2d
   14254:	movne	r3, r0
   14258:	addeq	r3, r0, #1
   1425c:	ldrb	r2, [r3]
   14260:	cmp	r2, #48	; 0x30
   14264:	bne	141f0 <__assert_fail@plt+0x2d28>
   14268:	ldrb	r2, [r3, #1]!
   1426c:	cmp	r2, #0
   14270:	bne	1425c <__assert_fail@plt+0x2d94>
   14274:	bl	14484 <__assert_fail@plt+0x2fbc>
   14278:	mov	r0, r4
   1427c:	bl	14484 <__assert_fail@plt+0x2fbc>
   14280:	ldr	r3, [r5]
   14284:	cmp	r3, #0
   14288:	bne	142e4 <__assert_fail@plt+0x2e1c>
   1428c:	ldr	r3, [r5, #8]
   14290:	cmp	r3, #0
   14294:	beq	14348 <__assert_fail@plt+0x2e80>
   14298:	mov	r4, r5
   1429c:	b	14180 <__assert_fail@plt+0x2cb8>
   142a0:	cmp	r3, #1
   142a4:	bne	14374 <__assert_fail@plt+0x2eac>
   142a8:	ldr	r3, [r4, #4]
   142ac:	ldrb	r2, [r3]
   142b0:	cmp	r2, #0
   142b4:	beq	14340 <__assert_fail@plt+0x2e78>
   142b8:	cmp	r2, #45	; 0x2d
   142bc:	addeq	r3, r3, #1
   142c0:	b	142d0 <__assert_fail@plt+0x2e08>
   142c4:	ldrb	r2, [r3, #1]!
   142c8:	cmp	r2, #0
   142cc:	beq	14340 <__assert_fail@plt+0x2e78>
   142d0:	ldrb	r2, [r3]
   142d4:	cmp	r2, #48	; 0x30
   142d8:	beq	142c4 <__assert_fail@plt+0x2dfc>
   142dc:	mov	r0, #0
   142e0:	b	141d0 <__assert_fail@plt+0x2d08>
   142e4:	cmp	r3, #1
   142e8:	bne	14374 <__assert_fail@plt+0x2eac>
   142ec:	ldr	r0, [r5, #4]
   142f0:	ldrb	r3, [r0]
   142f4:	cmp	r3, #0
   142f8:	beq	14320 <__assert_fail@plt+0x2e58>
   142fc:	cmp	r3, #45	; 0x2d
   14300:	movne	r3, r0
   14304:	addeq	r3, r0, #1
   14308:	ldrb	r2, [r3]
   1430c:	cmp	r2, #48	; 0x30
   14310:	bne	14298 <__assert_fail@plt+0x2dd0>
   14314:	ldrb	r2, [r3, #1]!
   14318:	cmp	r2, #0
   1431c:	bne	14308 <__assert_fail@plt+0x2e40>
   14320:	bl	14484 <__assert_fail@plt+0x2fbc>
   14324:	b	14350 <__assert_fail@plt+0x2e88>
   14328:	add	r0, r4, #4
   1432c:	bl	113b4 <__gmpz_clear@plt>
   14330:	b	14278 <__assert_fail@plt+0x2db0>
   14334:	ldr	r0, [r5, #4]
   14338:	bl	14484 <__assert_fail@plt+0x2fbc>
   1433c:	b	14204 <__assert_fail@plt+0x2d3c>
   14340:	mov	r0, r7
   14344:	b	141d0 <__assert_fail@plt+0x2d08>
   14348:	add	r0, r5, #4
   1434c:	bl	113b4 <__gmpz_clear@plt>
   14350:	mov	r0, r5
   14354:	bl	14484 <__assert_fail@plt+0x2fbc>
   14358:	mov	r0, #16
   1435c:	bl	2b4a4 <__assert_fail@plt+0x19fdc>
   14360:	mov	r4, r0
   14364:	mov	r1, #0
   14368:	str	r9, [r0], #4
   1436c:	bl	11444 <__gmpz_init_set_ui@plt>
   14370:	b	14180 <__assert_fail@plt+0x2cb8>
   14374:	bl	114bc <abort@plt>
   14378:	movw	r3, #57780	; 0xe1b4
   1437c:	movt	r3, #3
   14380:	str	r0, [r3]
   14384:	bx	lr
   14388:	movw	r3, #57780	; 0xe1b4
   1438c:	movt	r3, #3
   14390:	strb	r0, [r3, #4]
   14394:	bx	lr
   14398:	movw	r3, #57764	; 0xe1a4
   1439c:	movt	r3, #3
   143a0:	strd	r4, [sp, #-16]!
   143a4:	ldr	r0, [r3]
   143a8:	str	r6, [sp, #8]
   143ac:	str	lr, [sp, #12]
   143b0:	sub	sp, sp, #8
   143b4:	bl	2bba8 <__assert_fail@plt+0x1a6e0>
   143b8:	cmp	r0, #0
   143bc:	beq	143e8 <__assert_fail@plt+0x2f20>
   143c0:	movw	r4, #57780	; 0xe1b4
   143c4:	movt	r4, #3
   143c8:	ldrb	r6, [r4, #4]
   143cc:	bl	113c0 <__errno_location@plt>
   143d0:	mov	r5, r0
   143d4:	cmp	r6, #0
   143d8:	beq	14414 <__assert_fail@plt+0x2f4c>
   143dc:	ldr	r3, [r0]
   143e0:	cmp	r3, #32
   143e4:	bne	14414 <__assert_fail@plt+0x2f4c>
   143e8:	movw	r3, #57760	; 0xe1a0
   143ec:	movt	r3, #3
   143f0:	ldr	r0, [r3]
   143f4:	bl	2bba8 <__assert_fail@plt+0x1a6e0>
   143f8:	cmp	r0, #0
   143fc:	bne	1445c <__assert_fail@plt+0x2f94>
   14400:	add	sp, sp, #8
   14404:	ldrd	r4, [sp]
   14408:	ldr	r6, [sp, #8]
   1440c:	add	sp, sp, #12
   14410:	pop	{pc}		; (ldr pc, [sp], #4)
   14414:	movw	r1, #52424	; 0xccc8
   14418:	movt	r1, #2
   1441c:	mov	r2, #5
   14420:	mov	r0, #0
   14424:	bl	11258 <dcgettext@plt>
   14428:	mov	r6, r0
   1442c:	ldr	r0, [r4]
   14430:	cmp	r0, #0
   14434:	beq	1446c <__assert_fail@plt+0x2fa4>
   14438:	ldr	r4, [r5]
   1443c:	bl	17a40 <__assert_fail@plt+0x6578>
   14440:	mov	r3, r0
   14444:	movw	r2, #52436	; 0xccd4
   14448:	movt	r2, #2
   1444c:	mov	r0, #0
   14450:	str	r6, [sp]
   14454:	mov	r1, r4
   14458:	bl	112f4 <error@plt>
   1445c:	movw	r3, #57672	; 0xe148
   14460:	movt	r3, #3
   14464:	ldr	r0, [r3]
   14468:	bl	111f8 <_exit@plt>
   1446c:	mov	r3, r6
   14470:	movw	r2, #52440	; 0xccd8
   14474:	movt	r2, #2
   14478:	ldr	r1, [r5]
   1447c:	bl	112f4 <error@plt>
   14480:	b	1445c <__assert_fail@plt+0x2f94>
   14484:	strd	r4, [sp, #-12]!
   14488:	mov	r5, r0
   1448c:	str	lr, [sp, #8]
   14490:	sub	sp, sp, #12
   14494:	bl	113c0 <__errno_location@plt>
   14498:	mov	r4, r0
   1449c:	mov	r2, #0
   144a0:	ldr	r3, [r4]
   144a4:	mov	r0, r5
   144a8:	str	r2, [r4]
   144ac:	str	r3, [sp]
   144b0:	str	r3, [sp, #4]
   144b4:	bl	111e0 <free@plt>
   144b8:	ldr	r3, [r4]
   144bc:	add	r2, sp, #8
   144c0:	clz	r3, r3
   144c4:	lsr	r3, r3, #5
   144c8:	add	r3, r2, r3, lsl #2
   144cc:	ldr	r3, [r3, #-8]
   144d0:	str	r3, [r4]
   144d4:	add	sp, sp, #12
   144d8:	ldrd	r4, [sp]
   144dc:	add	sp, sp, #8
   144e0:	pop	{pc}		; (ldr pc, [sp], #4)
   144e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144e8:	movw	r4, #57768	; 0xe1a8
   144ec:	movt	r4, #3
   144f0:	mov	r5, #0
   144f4:	cmp	r0, #2
   144f8:	strd	r6, [sp, #8]
   144fc:	str	r8, [sp, #16]
   14500:	str	lr, [sp, #20]
   14504:	sub	sp, sp, #16
   14508:	ldr	r6, [r4]
   1450c:	str	r5, [r4]
   14510:	beq	14540 <__assert_fail@plt+0x3078>
   14514:	mov	r2, #0
   14518:	movw	r3, #57752	; 0xe198
   1451c:	movt	r3, #3
   14520:	str	r6, [r4]
   14524:	str	r2, [r3]
   14528:	add	sp, sp, #16
   1452c:	ldrd	r4, [sp]
   14530:	ldrd	r6, [sp, #8]
   14534:	ldr	r8, [sp, #16]
   14538:	add	sp, sp, #20
   1453c:	pop	{pc}		; (ldr pc, [sp], #4)
   14540:	mov	r8, r3
   14544:	mov	r7, r2
   14548:	str	r5, [sp]
   1454c:	movw	r3, #52444	; 0xccdc
   14550:	movt	r3, #2
   14554:	movw	r2, #51924	; 0xcad4
   14558:	movt	r2, #2
   1455c:	bl	1136c <getopt_long@plt>
   14560:	cmn	r0, #1
   14564:	beq	14514 <__assert_fail@plt+0x304c>
   14568:	cmp	r0, #104	; 0x68
   1456c:	beq	145a8 <__assert_fail@plt+0x30e0>
   14570:	cmp	r0, #118	; 0x76
   14574:	bne	14514 <__assert_fail@plt+0x304c>
   14578:	add	ip, sp, #48	; 0x30
   1457c:	movw	r0, #57764	; 0xe1a4
   14580:	movt	r0, #3
   14584:	mov	r2, r8
   14588:	ldr	r3, [sp, #40]	; 0x28
   1458c:	mov	r1, r7
   14590:	str	ip, [sp]
   14594:	ldr	r0, [r0]
   14598:	str	ip, [sp, #12]
   1459c:	bl	2b190 <__assert_fail@plt+0x19cc8>
   145a0:	mov	r0, r5
   145a4:	bl	11384 <exit@plt>
   145a8:	mov	r0, r5
   145ac:	ldr	r3, [sp, #44]	; 0x2c
   145b0:	blx	r3
   145b4:	b	14514 <__assert_fail@plt+0x304c>
   145b8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   145bc:	mov	r5, #0
   145c0:	movw	r4, #57768	; 0xe1a8
   145c4:	movt	r4, #3
   145c8:	strd	r6, [sp, #8]
   145cc:	movw	ip, #50440	; 0xc508
   145d0:	movt	ip, #2
   145d4:	strd	r8, [sp, #16]
   145d8:	mov	r9, #1
   145dc:	str	lr, [sp, #24]
   145e0:	sub	sp, sp, #20
   145e4:	mov	r8, r3
   145e8:	ldrb	lr, [sp, #52]	; 0x34
   145ec:	mov	r7, r2
   145f0:	movw	r3, #52444	; 0xccdc
   145f4:	movt	r3, #2
   145f8:	movw	r2, #51924	; 0xcad4
   145fc:	movt	r2, #2
   14600:	str	r5, [sp]
   14604:	ldr	r6, [r4]
   14608:	str	r9, [r4]
   1460c:	cmp	lr, r5
   14610:	movne	r2, ip
   14614:	bl	1136c <getopt_long@plt>
   14618:	cmn	r0, #1
   1461c:	beq	14644 <__assert_fail@plt+0x317c>
   14620:	cmp	r0, #104	; 0x68
   14624:	beq	14690 <__assert_fail@plt+0x31c8>
   14628:	cmp	r0, #118	; 0x76
   1462c:	beq	14660 <__assert_fail@plt+0x3198>
   14630:	movw	r3, #57672	; 0xe148
   14634:	movt	r3, #3
   14638:	ldr	r0, [r3]
   1463c:	ldr	r3, [sp, #56]	; 0x38
   14640:	blx	r3
   14644:	str	r6, [r4]
   14648:	add	sp, sp, #20
   1464c:	ldrd	r4, [sp]
   14650:	ldrd	r6, [sp, #8]
   14654:	ldrd	r8, [sp, #16]
   14658:	add	sp, sp, #24
   1465c:	pop	{pc}		; (ldr pc, [sp], #4)
   14660:	add	ip, sp, #60	; 0x3c
   14664:	movw	r0, #57764	; 0xe1a4
   14668:	movt	r0, #3
   1466c:	mov	r2, r8
   14670:	ldr	r3, [sp, #48]	; 0x30
   14674:	mov	r1, r7
   14678:	str	ip, [sp]
   1467c:	ldr	r0, [r0]
   14680:	str	ip, [sp, #12]
   14684:	bl	2b190 <__assert_fail@plt+0x19cc8>
   14688:	mov	r0, r5
   1468c:	bl	11384 <exit@plt>
   14690:	mov	r0, r5
   14694:	ldr	r3, [sp, #56]	; 0x38
   14698:	blx	r3
   1469c:	b	14644 <__assert_fail@plt+0x317c>
   146a0:	str	r4, [sp, #-8]!
   146a4:	mov	r4, r0
   146a8:	str	lr, [sp, #4]
   146ac:	bl	111c8 <wcwidth@plt>
   146b0:	cmp	r0, #0
   146b4:	bge	146c8 <__assert_fail@plt+0x3200>
   146b8:	mov	r0, r4
   146bc:	bl	11294 <iswcntrl@plt>
   146c0:	clz	r0, r0
   146c4:	lsr	r0, r0, #5
   146c8:	ldr	r4, [sp]
   146cc:	add	sp, sp, #4
   146d0:	pop	{pc}		; (ldr pc, [sp], #4)
   146d4:	mov	r3, r1
   146d8:	strd	r4, [sp, #-16]!
   146dc:	mov	r4, r1
   146e0:	ldr	r2, [r1, #4]
   146e4:	mov	r5, r0
   146e8:	ldr	r1, [r3], #16
   146ec:	str	r6, [sp, #8]
   146f0:	str	lr, [sp, #12]
   146f4:	cmp	r1, r3
   146f8:	strne	r1, [r0]
   146fc:	beq	14728 <__assert_fail@plt+0x3260>
   14700:	ldrb	r3, [r4, #8]
   14704:	str	r2, [r5, #4]
   14708:	ldr	r6, [sp, #8]
   1470c:	cmp	r3, #0
   14710:	strb	r3, [r5, #8]
   14714:	ldrne	r3, [r4, #12]
   14718:	strne	r3, [r5, #12]
   1471c:	ldrd	r4, [sp]
   14720:	add	sp, sp, #12
   14724:	pop	{pc}		; (ldr pc, [sp], #4)
   14728:	add	r3, r0, #16
   1472c:	mov	r0, r3
   14730:	bl	11204 <memcpy@plt>
   14734:	ldr	r2, [r4, #4]
   14738:	str	r0, [r5]
   1473c:	b	14700 <__assert_fail@plt+0x3238>
   14740:	lsr	r2, r0, #5
   14744:	movw	r3, #52508	; 0xcd1c
   14748:	movt	r3, #2
   1474c:	and	r0, r0, #31
   14750:	ldr	r3, [r3, r2, lsl #2]
   14754:	lsr	r0, r3, r0
   14758:	and	r0, r0, #1
   1475c:	bx	lr
   14760:	strd	r4, [sp, #-20]!	; 0xffffffec
   14764:	mov	r5, r2
   14768:	strd	r6, [sp, #8]
   1476c:	subs	r6, r0, #0
   14770:	mov	r7, r1
   14774:	str	lr, [sp, #16]
   14778:	sub	sp, sp, #12
   1477c:	addeq	r6, sp, #4
   14780:	mov	r0, r6
   14784:	bl	112e8 <mbrtowc@plt>
   14788:	cmp	r5, #0
   1478c:	cmnne	r0, #3
   14790:	mov	r4, r0
   14794:	bhi	147b0 <__assert_fail@plt+0x32e8>
   14798:	mov	r0, r4
   1479c:	add	sp, sp, #12
   147a0:	ldrd	r4, [sp]
   147a4:	ldrd	r6, [sp, #8]
   147a8:	add	sp, sp, #16
   147ac:	pop	{pc}		; (ldr pc, [sp], #4)
   147b0:	mov	r0, #0
   147b4:	bl	2bee0 <__assert_fail@plt+0x1aa18>
   147b8:	cmp	r0, #0
   147bc:	bne	14798 <__assert_fail@plt+0x32d0>
   147c0:	ldrb	r3, [r7]
   147c4:	mov	r4, #1
   147c8:	str	r3, [r6]
   147cc:	b	14798 <__assert_fail@plt+0x32d0>
   147d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   147d4:	mov	r4, r0
   147d8:	mov	r5, r1
   147dc:	strd	r6, [sp, #8]
   147e0:	str	r8, [sp, #16]
   147e4:	str	lr, [sp, #20]
   147e8:	sub	sp, sp, #56	; 0x38
   147ec:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   147f0:	cmp	r0, #1
   147f4:	bls	14804 <__assert_fail@plt+0x333c>
   147f8:	uxtb	r7, r5
   147fc:	cmp	r7, #47	; 0x2f
   14800:	bhi	14828 <__assert_fail@plt+0x3360>
   14804:	mov	r1, r5
   14808:	mov	r0, r4
   1480c:	add	sp, sp, #56	; 0x38
   14810:	ldrd	r4, [sp]
   14814:	ldrd	r6, [sp, #8]
   14818:	ldr	r8, [sp, #16]
   1481c:	ldr	lr, [sp, #20]
   14820:	add	sp, sp, #24
   14824:	b	1139c <strchr@plt>
   14828:	mov	r3, #0
   1482c:	mov	r0, #0
   14830:	mov	r1, #0
   14834:	movw	r6, #52508	; 0xcd1c
   14838:	movt	r6, #2
   1483c:	mov	r5, #1
   14840:	strb	r3, [sp]
   14844:	strd	r0, [sp, #4]
   14848:	strb	r3, [sp, #12]
   1484c:	str	r4, [sp, #16]
   14850:	b	148b0 <__assert_fail@plt+0x33e8>
   14854:	ldrb	r3, [r4]
   14858:	lsr	r2, r3, #5
   1485c:	and	r3, r3, #31
   14860:	ldr	r2, [r6, r2, lsl #2]
   14864:	lsr	r3, r2, r3
   14868:	tst	r3, #1
   1486c:	beq	14940 <__assert_fail@plt+0x3478>
   14870:	str	r5, [sp, #20]
   14874:	ldrb	r0, [r4]
   14878:	strb	r5, [sp, #12]
   1487c:	strb	r5, [sp, #24]
   14880:	cmp	r0, #0
   14884:	str	r0, [sp, #28]
   14888:	beq	14980 <__assert_fail@plt+0x34b8>
   1488c:	ldr	r0, [sp, #16]
   14890:	mov	r4, #1
   14894:	ldrb	r3, [r0]
   14898:	cmp	r3, r7
   1489c:	beq	14980 <__assert_fail@plt+0x34b8>
   148a0:	add	r4, r0, r4
   148a4:	mov	r3, #0
   148a8:	strb	r3, [sp, #12]
   148ac:	str	r4, [sp, #16]
   148b0:	ldrb	r3, [sp]
   148b4:	cmp	r3, #0
   148b8:	addne	r8, sp, #4
   148bc:	beq	14854 <__assert_fail@plt+0x338c>
   148c0:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   148c4:	mov	r1, r0
   148c8:	mov	r0, r4
   148cc:	bl	2aaec <__assert_fail@plt+0x19624>
   148d0:	mov	r2, r0
   148d4:	mov	r3, r8
   148d8:	mov	r1, r4
   148dc:	add	r0, sp, #28
   148e0:	bl	14760 <__assert_fail@plt+0x3298>
   148e4:	cmn	r0, #1
   148e8:	str	r0, [sp, #20]
   148ec:	beq	1495c <__assert_fail@plt+0x3494>
   148f0:	cmn	r0, #2
   148f4:	beq	14998 <__assert_fail@plt+0x34d0>
   148f8:	cmp	r0, #0
   148fc:	beq	149b8 <__assert_fail@plt+0x34f0>
   14900:	ldr	r4, [sp, #28]
   14904:	mov	r0, r8
   14908:	strb	r5, [sp, #24]
   1490c:	bl	11234 <mbsinit@plt>
   14910:	cmp	r0, #0
   14914:	strb	r5, [sp, #12]
   14918:	movne	r3, #0
   1491c:	strbne	r3, [sp]
   14920:	cmp	r4, #0
   14924:	beq	14a38 <__assert_fail@plt+0x3570>
   14928:	ldr	r4, [sp, #16]
   1492c:	mov	r0, r4
   14930:	ldr	r4, [sp, #20]
   14934:	cmp	r4, #1
   14938:	bne	148a0 <__assert_fail@plt+0x33d8>
   1493c:	b	14894 <__assert_fail@plt+0x33cc>
   14940:	add	r8, sp, #4
   14944:	mov	r0, r8
   14948:	bl	11234 <mbsinit@plt>
   1494c:	cmp	r0, #0
   14950:	beq	149f8 <__assert_fail@plt+0x3530>
   14954:	strb	r5, [sp]
   14958:	b	148c0 <__assert_fail@plt+0x33f8>
   1495c:	ldr	r0, [sp, #16]
   14960:	mov	r3, #0
   14964:	mov	r4, #1
   14968:	strb	r5, [sp, #12]
   1496c:	str	r5, [sp, #20]
   14970:	strb	r3, [sp, #24]
   14974:	ldrb	r3, [r0]
   14978:	cmp	r3, r7
   1497c:	bne	148a0 <__assert_fail@plt+0x33d8>
   14980:	add	sp, sp, #56	; 0x38
   14984:	ldrd	r4, [sp]
   14988:	ldrd	r6, [sp, #8]
   1498c:	ldr	r8, [sp, #16]
   14990:	add	sp, sp, #20
   14994:	pop	{pc}		; (ldr pc, [sp], #4)
   14998:	ldr	r4, [sp, #16]
   1499c:	mov	r0, r4
   149a0:	bl	11390 <strlen@plt>
   149a4:	mov	r3, #0
   149a8:	strb	r5, [sp, #12]
   149ac:	str	r0, [sp, #20]
   149b0:	strb	r3, [sp, #24]
   149b4:	b	1492c <__assert_fail@plt+0x3464>
   149b8:	ldr	r4, [sp, #16]
   149bc:	str	r5, [sp, #20]
   149c0:	ldrb	r3, [r4]
   149c4:	cmp	r3, #0
   149c8:	bne	14a18 <__assert_fail@plt+0x3550>
   149cc:	ldr	r4, [sp, #28]
   149d0:	cmp	r4, #0
   149d4:	beq	14904 <__assert_fail@plt+0x343c>
   149d8:	movw	r3, #52540	; 0xcd3c
   149dc:	movt	r3, #2
   149e0:	movw	r1, #52560	; 0xcd50
   149e4:	movt	r1, #2
   149e8:	movw	r0, #49548	; 0xc18c
   149ec:	movt	r0, #2
   149f0:	mov	r2, #172	; 0xac
   149f4:	bl	114c8 <__assert_fail@plt>
   149f8:	movw	r3, #52540	; 0xcd3c
   149fc:	movt	r3, #2
   14a00:	movw	r1, #52560	; 0xcd50
   14a04:	movt	r1, #2
   14a08:	movw	r0, #51832	; 0xca78
   14a0c:	movt	r0, #2
   14a10:	mov	r2, #143	; 0x8f
   14a14:	bl	114c8 <__assert_fail@plt>
   14a18:	movw	r3, #52540	; 0xcd3c
   14a1c:	movt	r3, #2
   14a20:	movw	r1, #52560	; 0xcd50
   14a24:	movt	r1, #2
   14a28:	movw	r0, #51856	; 0xca90
   14a2c:	movt	r0, #2
   14a30:	mov	r2, #171	; 0xab
   14a34:	bl	114c8 <__assert_fail@plt>
   14a38:	mov	r0, r4
   14a3c:	b	14980 <__assert_fail@plt+0x34b8>
   14a40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a44:	mov	r4, r0
   14a48:	strd	r6, [sp, #8]
   14a4c:	str	r8, [sp, #16]
   14a50:	str	lr, [sp, #20]
   14a54:	sub	sp, sp, #56	; 0x38
   14a58:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   14a5c:	cmp	r0, #1
   14a60:	bhi	14a8c <__assert_fail@plt+0x35c4>
   14a64:	mov	r0, r4
   14a68:	bl	11390 <strlen@plt>
   14a6c:	mov	r5, r0
   14a70:	mov	r0, r5
   14a74:	add	sp, sp, #56	; 0x38
   14a78:	ldrd	r4, [sp]
   14a7c:	ldrd	r6, [sp, #8]
   14a80:	ldr	r8, [sp, #16]
   14a84:	add	sp, sp, #20
   14a88:	pop	{pc}		; (ldr pc, [sp], #4)
   14a8c:	mov	r3, #0
   14a90:	mov	r0, #0
   14a94:	mov	r1, #0
   14a98:	movw	r7, #52508	; 0xcd1c
   14a9c:	movt	r7, #2
   14aa0:	mov	r5, r3
   14aa4:	strb	r3, [sp]
   14aa8:	mov	r6, #1
   14aac:	strd	r0, [sp, #4]
   14ab0:	strb	r3, [sp, #12]
   14ab4:	str	r4, [sp, #16]
   14ab8:	b	14b10 <__assert_fail@plt+0x3648>
   14abc:	ldrb	r3, [r4]
   14ac0:	lsr	r2, r3, #5
   14ac4:	and	r3, r3, #31
   14ac8:	ldr	r2, [r7, r2, lsl #2]
   14acc:	lsr	r3, r2, r3
   14ad0:	tst	r3, #1
   14ad4:	beq	14b80 <__assert_fail@plt+0x36b8>
   14ad8:	str	r6, [sp, #20]
   14adc:	ldrb	r3, [r4]
   14ae0:	strb	r6, [sp, #24]
   14ae4:	mov	r4, r3
   14ae8:	str	r3, [sp, #28]
   14aec:	cmp	r4, #0
   14af0:	beq	14a70 <__assert_fail@plt+0x35a8>
   14af4:	ldr	r4, [sp, #16]
   14af8:	mov	r2, #0
   14afc:	add	r5, r5, #1
   14b00:	ldr	r3, [sp, #20]
   14b04:	strb	r2, [sp, #12]
   14b08:	add	r4, r4, r3
   14b0c:	str	r4, [sp, #16]
   14b10:	ldrb	r3, [sp]
   14b14:	cmp	r3, #0
   14b18:	addne	r8, sp, #4
   14b1c:	beq	14abc <__assert_fail@plt+0x35f4>
   14b20:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   14b24:	mov	r1, r0
   14b28:	mov	r0, r4
   14b2c:	bl	2aaec <__assert_fail@plt+0x19624>
   14b30:	mov	r2, r0
   14b34:	mov	r3, r8
   14b38:	mov	r1, r4
   14b3c:	add	r0, sp, #28
   14b40:	bl	14760 <__assert_fail@plt+0x3298>
   14b44:	cmn	r0, #1
   14b48:	str	r0, [sp, #20]
   14b4c:	beq	14b9c <__assert_fail@plt+0x36d4>
   14b50:	cmn	r0, #2
   14b54:	beq	14bb0 <__assert_fail@plt+0x36e8>
   14b58:	cmp	r0, #0
   14b5c:	beq	14bcc <__assert_fail@plt+0x3704>
   14b60:	ldr	r4, [sp, #28]
   14b64:	mov	r0, r8
   14b68:	strb	r6, [sp, #24]
   14b6c:	bl	11234 <mbsinit@plt>
   14b70:	cmp	r0, #0
   14b74:	movne	r3, #0
   14b78:	strbne	r3, [sp]
   14b7c:	b	14aec <__assert_fail@plt+0x3624>
   14b80:	add	r8, sp, #4
   14b84:	mov	r0, r8
   14b88:	bl	11234 <mbsinit@plt>
   14b8c:	cmp	r0, #0
   14b90:	beq	14c0c <__assert_fail@plt+0x3744>
   14b94:	strb	r6, [sp]
   14b98:	b	14b20 <__assert_fail@plt+0x3658>
   14b9c:	mov	r3, #0
   14ba0:	str	r6, [sp, #20]
   14ba4:	ldr	r4, [sp, #16]
   14ba8:	strb	r3, [sp, #24]
   14bac:	b	14af8 <__assert_fail@plt+0x3630>
   14bb0:	ldr	r4, [sp, #16]
   14bb4:	mov	r0, r4
   14bb8:	bl	11390 <strlen@plt>
   14bbc:	mov	r3, #0
   14bc0:	str	r0, [sp, #20]
   14bc4:	strb	r3, [sp, #24]
   14bc8:	b	14af8 <__assert_fail@plt+0x3630>
   14bcc:	ldr	r4, [sp, #16]
   14bd0:	str	r6, [sp, #20]
   14bd4:	ldrb	r3, [r4]
   14bd8:	cmp	r3, #0
   14bdc:	bne	14c2c <__assert_fail@plt+0x3764>
   14be0:	ldr	r4, [sp, #28]
   14be4:	cmp	r4, #0
   14be8:	beq	14b64 <__assert_fail@plt+0x369c>
   14bec:	movw	r3, #52576	; 0xcd60
   14bf0:	movt	r3, #2
   14bf4:	movw	r1, #52560	; 0xcd50
   14bf8:	movt	r1, #2
   14bfc:	movw	r0, #49548	; 0xc18c
   14c00:	movt	r0, #2
   14c04:	mov	r2, #172	; 0xac
   14c08:	bl	114c8 <__assert_fail@plt>
   14c0c:	movw	r3, #52576	; 0xcd60
   14c10:	movt	r3, #2
   14c14:	movw	r1, #52560	; 0xcd50
   14c18:	movt	r1, #2
   14c1c:	movw	r0, #51832	; 0xca78
   14c20:	movt	r0, #2
   14c24:	mov	r2, #143	; 0x8f
   14c28:	bl	114c8 <__assert_fail@plt>
   14c2c:	movw	r3, #52576	; 0xcd60
   14c30:	movt	r3, #2
   14c34:	movw	r1, #52560	; 0xcd50
   14c38:	movt	r1, #2
   14c3c:	movw	r0, #51856	; 0xca90
   14c40:	movt	r0, #2
   14c44:	mov	r2, #171	; 0xab
   14c48:	bl	114c8 <__assert_fail@plt>
   14c4c:	strd	r4, [sp, #-16]!
   14c50:	subs	r4, r0, #0
   14c54:	str	r6, [sp, #8]
   14c58:	str	lr, [sp, #12]
   14c5c:	beq	14cf4 <__assert_fail@plt+0x382c>
   14c60:	mov	r1, #47	; 0x2f
   14c64:	bl	11468 <strrchr@plt>
   14c68:	subs	r5, r0, #0
   14c6c:	beq	14ccc <__assert_fail@plt+0x3804>
   14c70:	add	r6, r5, #1
   14c74:	sub	r3, r6, r4
   14c78:	cmp	r3, #6
   14c7c:	ble	14ccc <__assert_fail@plt+0x3804>
   14c80:	movw	r1, #52652	; 0xcdac
   14c84:	movt	r1, #2
   14c88:	mov	r2, #7
   14c8c:	sub	r0, r5, #6
   14c90:	bl	114b0 <strncmp@plt>
   14c94:	cmp	r0, #0
   14c98:	bne	14ccc <__assert_fail@plt+0x3804>
   14c9c:	movw	r1, #52660	; 0xcdb4
   14ca0:	movt	r1, #2
   14ca4:	mov	r2, #3
   14ca8:	mov	r0, r6
   14cac:	bl	114b0 <strncmp@plt>
   14cb0:	cmp	r0, #0
   14cb4:	movne	r4, r6
   14cb8:	bne	14ccc <__assert_fail@plt+0x3804>
   14cbc:	add	r4, r5, #4
   14cc0:	movw	r3, #57744	; 0xe190
   14cc4:	movt	r3, #3
   14cc8:	str	r4, [r3]
   14ccc:	movw	r2, #57788	; 0xe1bc
   14cd0:	movt	r2, #3
   14cd4:	ldr	r6, [sp, #8]
   14cd8:	movw	r3, #57748	; 0xe194
   14cdc:	movt	r3, #3
   14ce0:	str	r4, [r2]
   14ce4:	str	r4, [r3]
   14ce8:	ldrd	r4, [sp]
   14cec:	add	sp, sp, #12
   14cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf4:	movw	r3, #57760	; 0xe1a0
   14cf8:	movt	r3, #3
   14cfc:	movw	r0, #52596	; 0xcd74
   14d00:	movt	r0, #2
   14d04:	ldr	r3, [r3]
   14d08:	mov	r2, #55	; 0x37
   14d0c:	mov	r1, #1
   14d10:	bl	112b8 <fwrite@plt>
   14d14:	bl	114bc <abort@plt>
   14d18:	mov	r2, #5
   14d1c:	strd	r4, [sp, #-16]!
   14d20:	mov	r5, r0
   14d24:	str	r6, [sp, #8]
   14d28:	mov	r6, r1
   14d2c:	mov	r1, r0
   14d30:	mov	r0, #0
   14d34:	str	lr, [sp, #12]
   14d38:	bl	11258 <dcgettext@plt>
   14d3c:	cmp	r5, r0
   14d40:	mov	r4, r0
   14d44:	beq	14d5c <__assert_fail@plt+0x3894>
   14d48:	mov	r0, r4
   14d4c:	ldrd	r4, [sp]
   14d50:	ldr	r6, [sp, #8]
   14d54:	add	sp, sp, #12
   14d58:	pop	{pc}		; (ldr pc, [sp], #4)
   14d5c:	bl	2bf38 <__assert_fail@plt+0x1aa70>
   14d60:	ldrb	r3, [r0]
   14d64:	bic	r3, r3, #32
   14d68:	cmp	r3, #85	; 0x55
   14d6c:	bne	14dd4 <__assert_fail@plt+0x390c>
   14d70:	ldrb	r3, [r0, #1]
   14d74:	bic	r3, r3, #32
   14d78:	cmp	r3, #84	; 0x54
   14d7c:	bne	14e54 <__assert_fail@plt+0x398c>
   14d80:	ldrb	r3, [r0, #2]
   14d84:	bic	r3, r3, #32
   14d88:	cmp	r3, #70	; 0x46
   14d8c:	bne	14e54 <__assert_fail@plt+0x398c>
   14d90:	ldrb	r3, [r0, #3]
   14d94:	cmp	r3, #45	; 0x2d
   14d98:	bne	14e54 <__assert_fail@plt+0x398c>
   14d9c:	ldrb	r3, [r0, #4]
   14da0:	cmp	r3, #56	; 0x38
   14da4:	bne	14e54 <__assert_fail@plt+0x398c>
   14da8:	ldrb	r3, [r0, #5]
   14dac:	cmp	r3, #0
   14db0:	bne	14e54 <__assert_fail@plt+0x398c>
   14db4:	ldrb	r2, [r4]
   14db8:	movw	r3, #52752	; 0xce10
   14dbc:	movt	r3, #2
   14dc0:	movw	r4, #52764	; 0xce1c
   14dc4:	movt	r4, #2
   14dc8:	cmp	r2, #96	; 0x60
   14dcc:	movne	r4, r3
   14dd0:	b	14d48 <__assert_fail@plt+0x3880>
   14dd4:	cmp	r3, #71	; 0x47
   14dd8:	bne	14e54 <__assert_fail@plt+0x398c>
   14ddc:	ldrb	r3, [r0, #1]
   14de0:	bic	r3, r3, #32
   14de4:	cmp	r3, #66	; 0x42
   14de8:	bne	14e54 <__assert_fail@plt+0x398c>
   14dec:	ldrb	r3, [r0, #2]
   14df0:	cmp	r3, #49	; 0x31
   14df4:	bne	14e54 <__assert_fail@plt+0x398c>
   14df8:	ldrb	r3, [r0, #3]
   14dfc:	cmp	r3, #56	; 0x38
   14e00:	bne	14e54 <__assert_fail@plt+0x398c>
   14e04:	ldrb	r3, [r0, #4]
   14e08:	cmp	r3, #48	; 0x30
   14e0c:	bne	14e54 <__assert_fail@plt+0x398c>
   14e10:	ldrb	r3, [r0, #5]
   14e14:	cmp	r3, #51	; 0x33
   14e18:	bne	14e54 <__assert_fail@plt+0x398c>
   14e1c:	ldrb	r3, [r0, #6]
   14e20:	cmp	r3, #48	; 0x30
   14e24:	bne	14e54 <__assert_fail@plt+0x398c>
   14e28:	ldrb	r3, [r0, #7]
   14e2c:	cmp	r3, #0
   14e30:	bne	14e54 <__assert_fail@plt+0x398c>
   14e34:	ldrb	r2, [r4]
   14e38:	movw	r3, #52756	; 0xce14
   14e3c:	movt	r3, #2
   14e40:	movw	r4, #52760	; 0xce18
   14e44:	movt	r4, #2
   14e48:	cmp	r2, #96	; 0x60
   14e4c:	movne	r4, r3
   14e50:	b	14d48 <__assert_fail@plt+0x3880>
   14e54:	movw	r3, #52768	; 0xce20
   14e58:	movt	r3, #2
   14e5c:	cmp	r6, #9
   14e60:	movw	r4, #52748	; 0xce0c
   14e64:	movt	r4, #2
   14e68:	movne	r4, r3
   14e6c:	b	14d48 <__assert_fail@plt+0x3880>
   14e70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e74:	strd	r6, [sp, #8]
   14e78:	strd	r8, [sp, #16]
   14e7c:	mov	r8, r3
   14e80:	strd	sl, [sp, #24]
   14e84:	mov	fp, r0
   14e88:	mov	sl, r1
   14e8c:	str	lr, [sp, #32]
   14e90:	sub	sp, sp, #140	; 0x8c
   14e94:	ldr	r3, [sp, #180]	; 0xb4
   14e98:	str	r2, [sp, #28]
   14e9c:	and	r4, r3, #2
   14ea0:	ubfx	r3, r3, #1, #1
   14ea4:	str	r3, [sp, #44]	; 0x2c
   14ea8:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   14eac:	ldr	r3, [sp, #176]	; 0xb0
   14eb0:	str	r0, [sp, #76]	; 0x4c
   14eb4:	cmp	r3, #10
   14eb8:	ldrls	pc, [pc, r3, lsl #2]
   14ebc:	b	16858 <__assert_fail@plt+0x5390>
   14ec0:	andeq	r5, r1, r0, asr #6
   14ec4:	andeq	r5, r1, ip, asr r4
   14ec8:	ldrdeq	r5, [r1], -r8
   14ecc:	andeq	r5, r1, r8, asr #9
   14ed0:	andeq	r5, r1, r8, asr #4
   14ed4:	andeq	r5, r1, r4, asr #5
   14ed8:	muleq	r1, ip, r3
   14edc:	andeq	r5, r1, r4, lsl #8
   14ee0:	andeq	r4, r1, ip, ror #29
   14ee4:	andeq	r4, r1, ip, ror #29
   14ee8:	andeq	r4, r1, ip, ror #29
   14eec:	ldr	r3, [sp, #176]	; 0xb0
   14ef0:	cmp	r3, #10
   14ef4:	beq	14f20 <__assert_fail@plt+0x3a58>
   14ef8:	mov	r1, r3
   14efc:	movw	r0, #52772	; 0xce24
   14f00:	movt	r0, #2
   14f04:	bl	14d18 <__assert_fail@plt+0x3850>
   14f08:	str	r0, [sp, #188]	; 0xbc
   14f0c:	movw	r0, #52768	; 0xce20
   14f10:	movt	r0, #2
   14f14:	ldr	r1, [sp, #176]	; 0xb0
   14f18:	bl	14d18 <__assert_fail@plt+0x3850>
   14f1c:	str	r0, [sp, #192]	; 0xc0
   14f20:	cmp	r4, #0
   14f24:	movne	r4, #0
   14f28:	beq	165e4 <__assert_fail@plt+0x511c>
   14f2c:	mov	r5, #0
   14f30:	ldr	r0, [sp, #192]	; 0xc0
   14f34:	mov	r9, r5
   14f38:	str	r5, [sp, #64]	; 0x40
   14f3c:	bl	11390 <strlen@plt>
   14f40:	mov	r3, #1
   14f44:	ldr	r2, [sp, #44]	; 0x2c
   14f48:	cmp	r0, r5
   14f4c:	moveq	r2, r5
   14f50:	str	r3, [sp, #32]
   14f54:	str	r3, [sp, #48]	; 0x30
   14f58:	str	r5, [sp, #52]	; 0x34
   14f5c:	str	r3, [sp, #60]	; 0x3c
   14f60:	ldr	r3, [sp, #180]	; 0xb4
   14f64:	str	r0, [sp, #56]	; 0x38
   14f68:	str	r5, [sp, #68]	; 0x44
   14f6c:	str	r5, [sp, #80]	; 0x50
   14f70:	str	r5, [sp, #84]	; 0x54
   14f74:	and	r3, r3, #1
   14f78:	str	r2, [sp, #88]	; 0x58
   14f7c:	str	r3, [sp, #92]	; 0x5c
   14f80:	ldr	r3, [sp, #180]	; 0xb4
   14f84:	and	r3, r3, #4
   14f88:	str	r3, [sp, #96]	; 0x60
   14f8c:	ldr	r3, [sp, #192]	; 0xc0
   14f90:	str	r3, [sp, #72]	; 0x48
   14f94:	mov	r3, fp
   14f98:	mov	r7, #0
   14f9c:	mov	fp, r9
   14fa0:	mov	r9, r3
   14fa4:	cmn	r8, #1
   14fa8:	beq	155ac <__assert_fail@plt+0x40e4>
   14fac:	subs	r6, r8, r7
   14fb0:	movne	r6, #1
   14fb4:	cmp	r6, #0
   14fb8:	beq	155c4 <__assert_fail@plt+0x40fc>
   14fbc:	ldr	r0, [sp, #28]
   14fc0:	ldr	r3, [sp, #48]	; 0x30
   14fc4:	cmp	r3, #0
   14fc8:	add	r3, r0, r7
   14fcc:	str	r3, [sp, #36]	; 0x24
   14fd0:	beq	15a50 <__assert_fail@plt+0x4588>
   14fd4:	ldr	r2, [sp, #56]	; 0x38
   14fd8:	cmp	r2, #0
   14fdc:	beq	15f50 <__assert_fail@plt+0x4a88>
   14fe0:	cmp	r2, #1
   14fe4:	mov	r3, r2
   14fe8:	movls	r3, #0
   14fec:	movhi	r3, #1
   14ff0:	cmn	r8, #1
   14ff4:	add	r5, r7, r2
   14ff8:	movne	r3, #0
   14ffc:	cmp	r3, #0
   15000:	beq	1500c <__assert_fail@plt+0x3b44>
   15004:	bl	11390 <strlen@plt>
   15008:	mov	r8, r0
   1500c:	cmp	r5, r8
   15010:	bhi	15f50 <__assert_fail@plt+0x4a88>
   15014:	ldr	r0, [sp, #36]	; 0x24
   15018:	ldr	r2, [sp, #56]	; 0x38
   1501c:	ldr	r1, [sp, #72]	; 0x48
   15020:	bl	11240 <memcmp@plt>
   15024:	cmp	r0, #0
   15028:	bne	15f50 <__assert_fail@plt+0x4a88>
   1502c:	ldr	r3, [sp, #44]	; 0x2c
   15030:	cmp	r3, #0
   15034:	bne	166fc <__assert_fail@plt+0x5234>
   15038:	ldr	r3, [sp, #36]	; 0x24
   1503c:	ldrb	r5, [r3]
   15040:	cmp	r5, #126	; 0x7e
   15044:	ldrls	pc, [pc, r5, lsl #2]
   15048:	b	164e4 <__assert_fail@plt+0x501c>
   1504c:	andeq	r5, r1, r0, lsr #14
   15050:	andeq	r6, r1, r4, ror #9
   15054:	andeq	r6, r1, r4, ror #9
   15058:	andeq	r6, r1, r4, ror #9
   1505c:	andeq	r6, r1, r4, ror #9
   15060:	andeq	r6, r1, r4, ror #9
   15064:	andeq	r6, r1, r4, ror #9
   15068:	andeq	r5, r1, r8, ror r6
   1506c:	andeq	r5, r1, r0, ror r6
   15070:	andeq	r5, r1, r0, lsl #13
   15074:	andeq	r5, r1, r4, lsl #16
   15078:	strdeq	r5, [r1], -r4
   1507c:	andeq	r5, r1, ip, lsl r5
   15080:	ldrdeq	r5, [r1], -r0
   15084:	andeq	r6, r1, r4, ror #9
   15088:	andeq	r6, r1, r4, ror #9
   1508c:	andeq	r6, r1, r4, ror #9
   15090:	andeq	r6, r1, r4, ror #9
   15094:	andeq	r6, r1, r4, ror #9
   15098:	andeq	r6, r1, r4, ror #9
   1509c:	andeq	r6, r1, r4, ror #9
   150a0:	andeq	r6, r1, r4, ror #9
   150a4:	andeq	r6, r1, r4, ror #9
   150a8:	andeq	r6, r1, r4, ror #9
   150ac:	andeq	r6, r1, r4, ror #9
   150b0:	andeq	r6, r1, r4, ror #9
   150b4:	andeq	r6, r1, r4, ror #9
   150b8:	andeq	r6, r1, r4, ror #9
   150bc:	andeq	r6, r1, r4, ror #9
   150c0:	andeq	r6, r1, r4, ror #9
   150c4:	andeq	r6, r1, r4, ror #9
   150c8:	andeq	r6, r1, r4, ror #9
   150cc:	andeq	r5, r1, ip, ror r8
   150d0:	andeq	r5, r1, r0, ror r8
   150d4:	andeq	r5, r1, r0, ror r8
   150d8:	andeq	r5, r1, r4, ror #16
   150dc:	andeq	r5, r1, r0, ror r8
   150e0:	andeq	r5, r1, r8, asr #18
   150e4:	andeq	r5, r1, r0, ror r8
   150e8:			; <UNDEFINED> instruction: 0x000159b8
   150ec:	andeq	r5, r1, r0, ror r8
   150f0:	andeq	r5, r1, r0, ror r8
   150f4:	andeq	r5, r1, r0, ror r8
   150f8:	andeq	r5, r1, r8, asr #18
   150fc:	andeq	r5, r1, r8, asr #18
   15100:	andeq	r5, r1, r8, asr #18
   15104:	andeq	r5, r1, r8, asr #18
   15108:	andeq	r5, r1, r8, asr #18
   1510c:	andeq	r5, r1, r8, asr #18
   15110:	andeq	r5, r1, r8, asr #18
   15114:	andeq	r5, r1, r8, asr #18
   15118:	andeq	r5, r1, r8, asr #18
   1511c:	andeq	r5, r1, r8, asr #18
   15120:	andeq	r5, r1, r8, asr #18
   15124:	andeq	r5, r1, r8, asr #18
   15128:	andeq	r5, r1, r8, asr #18
   1512c:	andeq	r5, r1, r8, asr #18
   15130:	andeq	r5, r1, r8, asr #18
   15134:	andeq	r5, r1, r8, asr #18
   15138:	andeq	r5, r1, r0, ror r8
   1513c:	andeq	r5, r1, r0, ror r8
   15140:	andeq	r5, r1, r0, ror r8
   15144:	andeq	r5, r1, r0, ror r8
   15148:	andeq	r5, r1, r8, ror #18
   1514c:	andeq	r6, r1, r4, ror #9
   15150:	andeq	r5, r1, r8, asr #18
   15154:	andeq	r5, r1, r8, asr #18
   15158:	andeq	r5, r1, r8, asr #18
   1515c:	andeq	r5, r1, r8, asr #18
   15160:	andeq	r5, r1, r8, asr #18
   15164:	andeq	r5, r1, r8, asr #18
   15168:	andeq	r5, r1, r8, asr #18
   1516c:	andeq	r5, r1, r8, asr #18
   15170:	andeq	r5, r1, r8, asr #18
   15174:	andeq	r5, r1, r8, asr #18
   15178:	andeq	r5, r1, r8, asr #18
   1517c:	andeq	r5, r1, r8, asr #18
   15180:	andeq	r5, r1, r8, asr #18
   15184:	andeq	r5, r1, r8, asr #18
   15188:	andeq	r5, r1, r8, asr #18
   1518c:	andeq	r5, r1, r8, asr #18
   15190:	andeq	r5, r1, r8, asr #18
   15194:	andeq	r5, r1, r8, asr #18
   15198:	andeq	r5, r1, r8, asr #18
   1519c:	andeq	r5, r1, r8, asr #18
   151a0:	andeq	r5, r1, r8, asr #18
   151a4:	andeq	r5, r1, r8, asr #18
   151a8:	andeq	r5, r1, r8, asr #18
   151ac:	andeq	r5, r1, r8, asr #18
   151b0:	andeq	r5, r1, r8, asr #18
   151b4:	andeq	r5, r1, r8, asr #18
   151b8:	andeq	r5, r1, r0, ror r8
   151bc:	andeq	r5, r1, ip, lsl #18
   151c0:	andeq	r5, r1, r8, asr #18
   151c4:	andeq	r5, r1, r0, ror r8
   151c8:	andeq	r5, r1, r8, asr #18
   151cc:	andeq	r5, r1, r0, ror r8
   151d0:	andeq	r5, r1, r8, asr #18
   151d4:	andeq	r5, r1, r8, asr #18
   151d8:	andeq	r5, r1, r8, asr #18
   151dc:	andeq	r5, r1, r8, asr #18
   151e0:	andeq	r5, r1, r8, asr #18
   151e4:	andeq	r5, r1, r8, asr #18
   151e8:	andeq	r5, r1, r8, asr #18
   151ec:	andeq	r5, r1, r8, asr #18
   151f0:	andeq	r5, r1, r8, asr #18
   151f4:	andeq	r5, r1, r8, asr #18
   151f8:	andeq	r5, r1, r8, asr #18
   151fc:	andeq	r5, r1, r8, asr #18
   15200:	andeq	r5, r1, r8, asr #18
   15204:	andeq	r5, r1, r8, asr #18
   15208:	andeq	r5, r1, r8, asr #18
   1520c:	andeq	r5, r1, r8, asr #18
   15210:	andeq	r5, r1, r8, asr #18
   15214:	andeq	r5, r1, r8, asr #18
   15218:	andeq	r5, r1, r8, asr #18
   1521c:	andeq	r5, r1, r8, asr #18
   15220:	andeq	r5, r1, r8, asr #18
   15224:	andeq	r5, r1, r8, asr #18
   15228:	andeq	r5, r1, r8, asr #18
   1522c:	andeq	r5, r1, r8, asr #18
   15230:	andeq	r5, r1, r8, asr #18
   15234:	andeq	r5, r1, r8, asr #18
   15238:	andeq	r5, r1, r8, lsl r8
   1523c:	andeq	r5, r1, r0, ror r8
   15240:	andeq	r5, r1, r8, lsl r8
   15244:	andeq	r5, r1, r4, ror #16
   15248:	ldr	r3, [sp, #180]	; 0xb4
   1524c:	cmp	r4, #0
   15250:	and	r3, r3, #1
   15254:	str	r3, [sp, #92]	; 0x5c
   15258:	ldr	r3, [sp, #180]	; 0xb4
   1525c:	and	r3, r3, #4
   15260:	str	r3, [sp, #96]	; 0x60
   15264:	moveq	r3, #1
   15268:	streq	r3, [sp, #60]	; 0x3c
   1526c:	beq	159fc <__assert_fail@plt+0x4534>
   15270:	mov	r3, #0
   15274:	mov	r2, #1
   15278:	mov	r4, r3
   1527c:	mov	r9, r3
   15280:	str	r2, [sp, #32]
   15284:	str	r2, [sp, #44]	; 0x2c
   15288:	str	r3, [sp, #48]	; 0x30
   1528c:	str	r2, [sp, #52]	; 0x34
   15290:	str	r2, [sp, #56]	; 0x38
   15294:	str	r3, [sp, #60]	; 0x3c
   15298:	str	r2, [sp, #64]	; 0x40
   1529c:	str	r2, [sp, #68]	; 0x44
   152a0:	str	r3, [sp, #80]	; 0x50
   152a4:	str	r3, [sp, #84]	; 0x54
   152a8:	str	r3, [sp, #88]	; 0x58
   152ac:	movw	r3, #52768	; 0xce20
   152b0:	movt	r3, #2
   152b4:	str	r3, [sp, #72]	; 0x48
   152b8:	mov	r3, #2
   152bc:	str	r3, [sp, #176]	; 0xb0
   152c0:	b	14f94 <__assert_fail@plt+0x3acc>
   152c4:	ldr	r3, [sp, #180]	; 0xb4
   152c8:	cmp	r4, #0
   152cc:	and	r3, r3, #1
   152d0:	str	r3, [sp, #92]	; 0x5c
   152d4:	ldr	r3, [sp, #180]	; 0xb4
   152d8:	and	r3, r3, #4
   152dc:	str	r3, [sp, #96]	; 0x60
   152e0:	bne	166b4 <__assert_fail@plt+0x51ec>
   152e4:	cmp	sl, #0
   152e8:	beq	16460 <__assert_fail@plt+0x4f98>
   152ec:	mov	r3, #34	; 0x22
   152f0:	mov	r2, r4
   152f4:	mov	r1, #1
   152f8:	mov	r9, r2
   152fc:	strb	r3, [fp]
   15300:	movw	r3, #52748	; 0xce0c
   15304:	movt	r3, #2
   15308:	mov	r4, r1
   1530c:	str	r1, [sp, #32]
   15310:	str	r2, [sp, #44]	; 0x2c
   15314:	str	r1, [sp, #48]	; 0x30
   15318:	str	r2, [sp, #52]	; 0x34
   1531c:	str	r1, [sp, #56]	; 0x38
   15320:	str	r1, [sp, #60]	; 0x3c
   15324:	str	r2, [sp, #64]	; 0x40
   15328:	str	r2, [sp, #68]	; 0x44
   1532c:	str	r3, [sp, #72]	; 0x48
   15330:	str	r2, [sp, #80]	; 0x50
   15334:	str	r2, [sp, #84]	; 0x54
   15338:	str	r2, [sp, #88]	; 0x58
   1533c:	b	14f94 <__assert_fail@plt+0x3acc>
   15340:	mov	r3, #0
   15344:	mov	r2, #1
   15348:	mov	r9, r3
   1534c:	str	r2, [sp, #32]
   15350:	str	r3, [sp, #44]	; 0x2c
   15354:	str	r3, [sp, #48]	; 0x30
   15358:	str	r3, [sp, #52]	; 0x34
   1535c:	str	r3, [sp, #60]	; 0x3c
   15360:	strd	r2, [sp, #64]	; 0x40
   15364:	str	r3, [sp, #72]	; 0x48
   15368:	str	r3, [sp, #80]	; 0x50
   1536c:	str	r3, [sp, #88]	; 0x58
   15370:	ldr	r3, [sp, #180]	; 0xb4
   15374:	and	r3, r3, r2
   15378:	str	r3, [sp, #92]	; 0x5c
   1537c:	ldr	r3, [sp, #180]	; 0xb4
   15380:	and	r3, r3, #4
   15384:	str	r3, [sp, #96]	; 0x60
   15388:	ldr	r3, [sp, #176]	; 0xb0
   1538c:	mov	r4, r3
   15390:	str	r3, [sp, #56]	; 0x38
   15394:	str	r3, [sp, #84]	; 0x54
   15398:	b	14f94 <__assert_fail@plt+0x3acc>
   1539c:	mov	r3, #1
   153a0:	mov	r4, #0
   153a4:	mov	r9, r4
   153a8:	str	r3, [sp, #32]
   153ac:	str	r3, [sp, #44]	; 0x2c
   153b0:	str	r3, [sp, #48]	; 0x30
   153b4:	str	r4, [sp, #52]	; 0x34
   153b8:	str	r3, [sp, #56]	; 0x38
   153bc:	str	r3, [sp, #60]	; 0x3c
   153c0:	str	r3, [sp, #88]	; 0x58
   153c4:	movw	r3, #52748	; 0xce0c
   153c8:	movt	r3, #2
   153cc:	str	r4, [sp, #64]	; 0x40
   153d0:	str	r4, [sp, #68]	; 0x44
   153d4:	str	r3, [sp, #72]	; 0x48
   153d8:	ldr	r3, [sp, #180]	; 0xb4
   153dc:	str	r4, [sp, #80]	; 0x50
   153e0:	str	r4, [sp, #84]	; 0x54
   153e4:	and	r3, r3, #1
   153e8:	str	r3, [sp, #92]	; 0x5c
   153ec:	ldr	r3, [sp, #180]	; 0xb4
   153f0:	and	r3, r3, #4
   153f4:	str	r3, [sp, #96]	; 0x60
   153f8:	mov	r3, #5
   153fc:	str	r3, [sp, #176]	; 0xb0
   15400:	b	14f94 <__assert_fail@plt+0x3acc>
   15404:	mov	r3, #1
   15408:	mov	r4, #0
   1540c:	mov	r9, r4
   15410:	str	r3, [sp, #32]
   15414:	str	r4, [sp, #44]	; 0x2c
   15418:	str	r3, [sp, #48]	; 0x30
   1541c:	str	r3, [sp, #60]	; 0x3c
   15420:	ldr	r3, [sp, #180]	; 0xb4
   15424:	str	r4, [sp, #52]	; 0x34
   15428:	str	r4, [sp, #56]	; 0x38
   1542c:	str	r4, [sp, #64]	; 0x40
   15430:	str	r4, [sp, #68]	; 0x44
   15434:	and	r3, r3, #1
   15438:	str	r4, [sp, #72]	; 0x48
   1543c:	str	r4, [sp, #80]	; 0x50
   15440:	str	r4, [sp, #84]	; 0x54
   15444:	str	r3, [sp, #92]	; 0x5c
   15448:	ldr	r3, [sp, #180]	; 0xb4
   1544c:	str	r4, [sp, #88]	; 0x58
   15450:	and	r3, r3, #4
   15454:	str	r3, [sp, #96]	; 0x60
   15458:	b	14f94 <__assert_fail@plt+0x3acc>
   1545c:	mov	r3, #0
   15460:	mov	r2, #1
   15464:	ldr	r1, [sp, #176]	; 0xb0
   15468:	mov	r4, r3
   1546c:	mov	r9, r3
   15470:	movw	r3, #52768	; 0xce20
   15474:	movt	r3, #2
   15478:	str	r2, [sp, #32]
   1547c:	str	r2, [sp, #44]	; 0x2c
   15480:	str	r4, [sp, #48]	; 0x30
   15484:	strd	r2, [sp, #68]	; 0x44
   15488:	ldr	r3, [sp, #180]	; 0xb4
   1548c:	str	r2, [sp, #52]	; 0x34
   15490:	str	r1, [sp, #56]	; 0x38
   15494:	str	r4, [sp, #60]	; 0x3c
   15498:	str	r2, [sp, #64]	; 0x40
   1549c:	and	r3, r3, r2
   154a0:	str	r4, [sp, #80]	; 0x50
   154a4:	str	r4, [sp, #84]	; 0x54
   154a8:	str	r4, [sp, #88]	; 0x58
   154ac:	str	r3, [sp, #92]	; 0x5c
   154b0:	ldr	r3, [sp, #180]	; 0xb4
   154b4:	and	r3, r3, #4
   154b8:	str	r3, [sp, #96]	; 0x60
   154bc:	mov	r3, #2
   154c0:	str	r3, [sp, #176]	; 0xb0
   154c4:	b	14f94 <__assert_fail@plt+0x3acc>
   154c8:	mov	r3, #1
   154cc:	mov	r2, #0
   154d0:	mov	r4, r2
   154d4:	mov	r9, r2
   154d8:	str	r3, [sp, #32]
   154dc:	str	r3, [sp, #44]	; 0x2c
   154e0:	str	r2, [sp, #48]	; 0x30
   154e4:	str	r3, [sp, #52]	; 0x34
   154e8:	str	r3, [sp, #56]	; 0x38
   154ec:	str	r3, [sp, #60]	; 0x3c
   154f0:	str	r3, [sp, #64]	; 0x40
   154f4:	str	r3, [sp, #68]	; 0x44
   154f8:	str	r3, [sp, #88]	; 0x58
   154fc:	movw	r3, #52768	; 0xce20
   15500:	movt	r3, #2
   15504:	str	r3, [sp, #72]	; 0x48
   15508:	ldr	r3, [sp, #180]	; 0xb4
   1550c:	str	r2, [sp, #80]	; 0x50
   15510:	str	r2, [sp, #84]	; 0x54
   15514:	and	r3, r3, #1
   15518:	b	154ac <__assert_fail@plt+0x3fe4>
   1551c:	mov	r5, #102	; 0x66
   15520:	mov	r6, #0
   15524:	ldr	r3, [sp, #44]	; 0x2c
   15528:	cmp	r3, #0
   1552c:	bne	163dc <__assert_fail@plt+0x4f14>
   15530:	ldr	r2, [sp, #52]	; 0x34
   15534:	eor	r3, fp, #1
   15538:	ands	r3, r2, r3
   1553c:	beq	15574 <__assert_fail@plt+0x40ac>
   15540:	cmp	sl, r4
   15544:	mov	fp, r3
   15548:	movhi	r2, #39	; 0x27
   1554c:	strbhi	r2, [r9, r4]
   15550:	add	r2, r4, #1
   15554:	cmp	sl, r2
   15558:	movhi	r1, #36	; 0x24
   1555c:	strbhi	r1, [r9, r2]
   15560:	add	r2, r4, #2
   15564:	add	r4, r4, #3
   15568:	cmp	sl, r2
   1556c:	movhi	r1, #39	; 0x27
   15570:	strbhi	r1, [r9, r2]
   15574:	cmp	sl, r4
   15578:	add	r7, r7, #1
   1557c:	movhi	r3, #92	; 0x5c
   15580:	strbhi	r3, [r9, r4]
   15584:	add	r4, r4, #1
   15588:	cmp	r4, sl
   1558c:	ldr	r3, [sp, #32]
   15590:	strbcc	r5, [r9, r4]
   15594:	cmp	r6, #0
   15598:	add	r4, r4, #1
   1559c:	moveq	r3, #0
   155a0:	cmn	r8, #1
   155a4:	str	r3, [sp, #32]
   155a8:	bne	14fac <__assert_fail@plt+0x3ae4>
   155ac:	ldr	r3, [sp, #28]
   155b0:	ldrb	r6, [r3, r7]
   155b4:	adds	r6, r6, #0
   155b8:	movne	r6, #1
   155bc:	cmp	r6, #0
   155c0:	bne	14fbc <__assert_fail@plt+0x3af4>
   155c4:	mov	r3, r9
   155c8:	mov	r9, fp
   155cc:	mov	fp, r3
   155d0:	ldr	r3, [sp, #68]	; 0x44
   155d4:	cmp	r4, #0
   155d8:	movne	r3, #0
   155dc:	cmp	r3, #0
   155e0:	bne	167d4 <__assert_fail@plt+0x530c>
   155e4:	ldr	r3, [sp, #44]	; 0x2c
   155e8:	ldr	r2, [sp, #52]	; 0x34
   155ec:	eor	r3, r3, #1
   155f0:	ands	r2, r3, r2
   155f4:	beq	1670c <__assert_fail@plt+0x5244>
   155f8:	ldr	r3, [sp, #80]	; 0x50
   155fc:	cmp	r3, #0
   15600:	beq	16710 <__assert_fail@plt+0x5248>
   15604:	ldr	r3, [sp, #32]
   15608:	cmp	r3, #0
   1560c:	bne	16784 <__assert_fail@plt+0x52bc>
   15610:	ldr	r3, [sp, #84]	; 0x54
   15614:	adds	r3, r3, #0
   15618:	movne	r3, #1
   1561c:	cmp	sl, #0
   15620:	movne	r3, #0
   15624:	cmp	r3, #0
   15628:	ldreq	r2, [sp, #80]	; 0x50
   1562c:	beq	16710 <__assert_fail@plt+0x5248>
   15630:	ldr	r2, [sp, #84]	; 0x54
   15634:	mov	sl, r2
   15638:	mov	r0, #0
   1563c:	mov	r4, #1
   15640:	mov	r1, #39	; 0x27
   15644:	str	r0, [sp, #44]	; 0x2c
   15648:	strb	r1, [fp]
   1564c:	str	r0, [sp, #48]	; 0x30
   15650:	str	r4, [sp, #52]	; 0x34
   15654:	str	r4, [sp, #56]	; 0x38
   15658:	str	r4, [sp, #64]	; 0x40
   1565c:	str	r0, [sp, #68]	; 0x44
   15660:	str	r3, [sp, #80]	; 0x50
   15664:	str	r2, [sp, #84]	; 0x54
   15668:	str	r0, [sp, #88]	; 0x58
   1566c:	b	152ac <__assert_fail@plt+0x3de4>
   15670:	mov	r5, #98	; 0x62
   15674:	b	15520 <__assert_fail@plt+0x4058>
   15678:	mov	r5, #97	; 0x61
   1567c:	b	15520 <__assert_fail@plt+0x4058>
   15680:	ldr	r3, [sp, #48]	; 0x30
   15684:	str	r3, [sp, #40]	; 0x28
   15688:	mov	r3, #116	; 0x74
   1568c:	ldr	r2, [sp, #68]	; 0x44
   15690:	cmp	r2, #0
   15694:	bne	15890 <__assert_fail@plt+0x43c8>
   15698:	ldr	r2, [sp, #60]	; 0x3c
   1569c:	cmp	r2, #0
   156a0:	bne	157ec <__assert_fail@plt+0x4324>
   156a4:	ldr	r3, [sp, #44]	; 0x2c
   156a8:	mov	r6, #0
   156ac:	cmp	r3, #0
   156b0:	beq	1585c <__assert_fail@plt+0x4394>
   156b4:	mov	r3, fp
   156b8:	ldr	r2, [sp, #184]	; 0xb8
   156bc:	cmp	r2, #0
   156c0:	beq	156e0 <__assert_fail@plt+0x4218>
   156c4:	ubfx	r1, r5, #5, #8
   156c8:	mov	r0, r2
   156cc:	and	r2, r5, #31
   156d0:	ldr	r1, [r0, r1, lsl #2]
   156d4:	lsr	r2, r1, r2
   156d8:	tst	r2, #1
   156dc:	bne	15524 <__assert_fail@plt+0x405c>
   156e0:	ldr	r2, [sp, #40]	; 0x28
   156e4:	cmp	r2, #0
   156e8:	addeq	r7, r7, #1
   156ec:	bne	15524 <__assert_fail@plt+0x405c>
   156f0:	cmp	r3, #0
   156f4:	beq	15588 <__assert_fail@plt+0x40c0>
   156f8:	cmp	sl, r4
   156fc:	mov	fp, #0
   15700:	movhi	r3, #39	; 0x27
   15704:	strbhi	r3, [r9, r4]
   15708:	add	r3, r4, #1
   1570c:	add	r4, r4, #2
   15710:	cmp	sl, r3
   15714:	movhi	r2, #39	; 0x27
   15718:	strbhi	r2, [r9, r3]
   1571c:	b	15588 <__assert_fail@plt+0x40c0>
   15720:	ldr	r3, [sp, #48]	; 0x30
   15724:	str	r3, [sp, #40]	; 0x28
   15728:	eor	r3, fp, #1
   1572c:	ldr	r2, [sp, #52]	; 0x34
   15730:	ands	r2, r2, r3
   15734:	beq	163f4 <__assert_fail@plt+0x4f2c>
   15738:	cmp	sl, r4
   1573c:	movhi	r3, #39	; 0x27
   15740:	strbhi	r3, [r9, r4]
   15744:	add	r3, r4, #1
   15748:	cmp	sl, r3
   1574c:	movhi	r1, #36	; 0x24
   15750:	strbhi	r1, [r9, r3]
   15754:	add	r3, r4, #2
   15758:	cmp	sl, r3
   1575c:	movhi	r1, #39	; 0x27
   15760:	strbhi	r1, [r9, r3]
   15764:	add	r3, r4, #3
   15768:	cmp	sl, r3
   1576c:	bls	16440 <__assert_fail@plt+0x4f78>
   15770:	mov	r4, r3
   15774:	mov	r3, #92	; 0x5c
   15778:	mov	fp, r2
   1577c:	mov	r2, r4
   15780:	strb	r3, [r9, r4]
   15784:	ldr	r3, [sp, #176]	; 0xb0
   15788:	add	r4, r4, #1
   1578c:	cmp	r3, #2
   15790:	beq	164a8 <__assert_fail@plt+0x4fe0>
   15794:	add	r3, r7, #1
   15798:	cmp	r3, r8
   1579c:	bcs	157b4 <__assert_fail@plt+0x42ec>
   157a0:	ldr	r1, [sp, #28]
   157a4:	ldrb	r3, [r1, r3]
   157a8:	sub	r3, r3, #48	; 0x30
   157ac:	cmp	r3, #9
   157b0:	bls	164b8 <__assert_fail@plt+0x4ff0>
   157b4:	mov	r3, #0
   157b8:	mov	r5, #48	; 0x30
   157bc:	ldr	r6, [sp, #64]	; 0x40
   157c0:	cmp	r6, #0
   157c4:	beq	156b8 <__assert_fail@plt+0x41f0>
   157c8:	mov	r6, #0
   157cc:	b	156e0 <__assert_fail@plt+0x4218>
   157d0:	ldr	r3, [sp, #48]	; 0x30
   157d4:	str	r3, [sp, #40]	; 0x28
   157d8:	ldr	r2, [sp, #60]	; 0x3c
   157dc:	mov	r5, #13
   157e0:	mov	r3, #114	; 0x72
   157e4:	cmp	r2, #0
   157e8:	beq	156a4 <__assert_fail@plt+0x41dc>
   157ec:	mov	r5, r3
   157f0:	b	15520 <__assert_fail@plt+0x4058>
   157f4:	ldr	r3, [sp, #48]	; 0x30
   157f8:	str	r3, [sp, #40]	; 0x28
   157fc:	mov	r3, #118	; 0x76
   15800:	b	15698 <__assert_fail@plt+0x41d0>
   15804:	ldr	r3, [sp, #48]	; 0x30
   15808:	str	r3, [sp, #40]	; 0x28
   1580c:	mov	r5, #10
   15810:	mov	r3, #110	; 0x6e
   15814:	b	15698 <__assert_fail@plt+0x41d0>
   15818:	ldr	r3, [sp, #48]	; 0x30
   1581c:	cmn	r8, #1
   15820:	str	r3, [sp, #40]	; 0x28
   15824:	beq	15c6c <__assert_fail@plt+0x47a4>
   15828:	subs	r3, r8, #1
   1582c:	movne	r3, #1
   15830:	cmp	r3, #0
   15834:	bne	15840 <__assert_fail@plt+0x4378>
   15838:	cmp	r7, #0
   1583c:	beq	15884 <__assert_fail@plt+0x43bc>
   15840:	mov	r6, #0
   15844:	ldr	r3, [sp, #64]	; 0x40
   15848:	cmp	r3, #0
   1584c:	beq	156b4 <__assert_fail@plt+0x41ec>
   15850:	ldr	r3, [sp, #44]	; 0x2c
   15854:	cmp	r3, #0
   15858:	bne	156b4 <__assert_fail@plt+0x41ec>
   1585c:	mov	r3, fp
   15860:	b	156e0 <__assert_fail@plt+0x4218>
   15864:	ldr	r3, [sp, #48]	; 0x30
   15868:	str	r3, [sp, #40]	; 0x28
   1586c:	b	15838 <__assert_fail@plt+0x4370>
   15870:	ldr	r3, [sp, #48]	; 0x30
   15874:	str	r3, [sp, #40]	; 0x28
   15878:	b	15840 <__assert_fail@plt+0x4378>
   1587c:	ldr	r6, [sp, #48]	; 0x30
   15880:	str	r6, [sp, #40]	; 0x28
   15884:	ldr	r3, [sp, #68]	; 0x44
   15888:	cmp	r3, #0
   1588c:	beq	15844 <__assert_fail@plt+0x437c>
   15890:	mov	r3, #2
   15894:	mov	fp, r9
   15898:	str	r3, [sp, #176]	; 0xb0
   1589c:	ldr	r3, [sp, #60]	; 0x3c
   158a0:	cmp	r3, #0
   158a4:	ldr	r3, [sp, #176]	; 0xb0
   158a8:	movne	r3, #4
   158ac:	str	r3, [sp, #176]	; 0xb0
   158b0:	mov	lr, #0
   158b4:	mov	r0, fp
   158b8:	ldr	r2, [sp, #28]
   158bc:	ldr	r3, [sp, #180]	; 0xb4
   158c0:	ldr	r1, [sp, #188]	; 0xbc
   158c4:	bic	ip, r3, #2
   158c8:	ldr	r3, [sp, #176]	; 0xb0
   158cc:	stm	sp, {r3, ip, lr}
   158d0:	mov	r3, r8
   158d4:	ldr	ip, [sp, #192]	; 0xc0
   158d8:	str	r1, [sp, #12]
   158dc:	mov	r1, sl
   158e0:	str	ip, [sp, #16]
   158e4:	bl	14e70 <__assert_fail@plt+0x39a8>
   158e8:	mov	r4, r0
   158ec:	mov	r0, r4
   158f0:	add	sp, sp, #140	; 0x8c
   158f4:	ldrd	r4, [sp]
   158f8:	ldrd	r6, [sp, #8]
   158fc:	ldrd	r8, [sp, #16]
   15900:	ldrd	sl, [sp, #24]
   15904:	add	sp, sp, #32
   15908:	pop	{pc}		; (ldr pc, [sp], #4)
   1590c:	ldr	r3, [sp, #48]	; 0x30
   15910:	str	r3, [sp, #40]	; 0x28
   15914:	ldr	r3, [sp, #176]	; 0xb0
   15918:	cmp	r3, #2
   1591c:	beq	15c94 <__assert_fail@plt+0x47cc>
   15920:	ldr	r3, [sp, #88]	; 0x58
   15924:	cmp	r3, #0
   15928:	moveq	r5, #92	; 0x5c
   1592c:	moveq	r3, r5
   15930:	beq	15698 <__assert_fail@plt+0x41d0>
   15934:	add	r7, r7, #1
   15938:	mov	r3, fp
   1593c:	mov	r6, #0
   15940:	mov	r5, #92	; 0x5c
   15944:	b	156f0 <__assert_fail@plt+0x4228>
   15948:	ldr	r3, [sp, #64]	; 0x40
   1594c:	cmp	r3, #0
   15950:	bne	167c8 <__assert_fail@plt+0x5300>
   15954:	ldr	r2, [sp, #48]	; 0x30
   15958:	mov	r3, fp
   1595c:	mov	r6, r2
   15960:	str	r2, [sp, #40]	; 0x28
   15964:	b	156b8 <__assert_fail@plt+0x41f0>
   15968:	ldr	r3, [sp, #176]	; 0xb0
   1596c:	cmp	r3, #2
   15970:	beq	16704 <__assert_fail@plt+0x523c>
   15974:	cmp	r3, #5
   15978:	ldr	r3, [sp, #48]	; 0x30
   1597c:	str	r3, [sp, #40]	; 0x28
   15980:	bne	159ac <__assert_fail@plt+0x44e4>
   15984:	ldr	r3, [sp, #96]	; 0x60
   15988:	cmp	r3, #0
   1598c:	beq	16408 <__assert_fail@plt+0x4f40>
   15990:	add	r3, r7, #2
   15994:	cmp	r3, r8
   15998:	bcs	159ac <__assert_fail@plt+0x44e4>
   1599c:	ldr	r2, [sp, #36]	; 0x24
   159a0:	ldrb	r5, [r2, #1]
   159a4:	cmp	r5, #63	; 0x3f
   159a8:	beq	164f0 <__assert_fail@plt+0x5028>
   159ac:	mov	r6, #0
   159b0:	mov	r5, #63	; 0x3f
   159b4:	b	15844 <__assert_fail@plt+0x437c>
   159b8:	ldr	r3, [sp, #176]	; 0xb0
   159bc:	cmp	r3, #2
   159c0:	ldr	r3, [sp, #48]	; 0x30
   159c4:	beq	161ac <__assert_fail@plt+0x4ce4>
   159c8:	mov	r5, #39	; 0x27
   159cc:	str	r3, [sp, #40]	; 0x28
   159d0:	str	r6, [sp, #80]	; 0x50
   159d4:	b	15844 <__assert_fail@plt+0x437c>
   159d8:	ldr	r3, [sp, #180]	; 0xb4
   159dc:	cmp	r4, #0
   159e0:	and	r3, r3, #1
   159e4:	str	r3, [sp, #92]	; 0x5c
   159e8:	ldr	r3, [sp, #180]	; 0xb4
   159ec:	and	r3, r3, #4
   159f0:	str	r3, [sp, #96]	; 0x60
   159f4:	bne	16814 <__assert_fail@plt+0x534c>
   159f8:	str	r4, [sp, #60]	; 0x3c
   159fc:	cmp	sl, #0
   15a00:	bne	167f8 <__assert_fail@plt+0x5330>
   15a04:	mov	r3, #1
   15a08:	movw	r2, #52768	; 0xce20
   15a0c:	movt	r2, #2
   15a10:	mov	r4, r3
   15a14:	mov	r3, #2
   15a18:	mov	r9, sl
   15a1c:	str	r4, [sp, #32]
   15a20:	str	sl, [sp, #44]	; 0x2c
   15a24:	str	sl, [sp, #48]	; 0x30
   15a28:	str	r4, [sp, #52]	; 0x34
   15a2c:	str	r4, [sp, #56]	; 0x38
   15a30:	str	r4, [sp, #64]	; 0x40
   15a34:	str	sl, [sp, #68]	; 0x44
   15a38:	str	r2, [sp, #72]	; 0x48
   15a3c:	str	sl, [sp, #80]	; 0x50
   15a40:	str	sl, [sp, #84]	; 0x54
   15a44:	str	sl, [sp, #88]	; 0x58
   15a48:	str	r3, [sp, #176]	; 0xb0
   15a4c:	b	14f94 <__assert_fail@plt+0x3acc>
   15a50:	ldrb	r5, [r0, r7]
   15a54:	cmp	r5, #126	; 0x7e
   15a58:	ldrls	pc, [pc, r5, lsl #2]
   15a5c:	b	15dc0 <__assert_fail@plt+0x48f8>
   15a60:	andeq	r5, r1, ip, lsl #27
   15a64:	andeq	r5, r1, r0, asr #27
   15a68:	andeq	r5, r1, r0, asr #27
   15a6c:	andeq	r5, r1, r0, asr #27
   15a70:	andeq	r5, r1, r0, asr #27
   15a74:	andeq	r5, r1, r0, asr #27
   15a78:	andeq	r5, r1, r0, asr #27
   15a7c:	andeq	r5, r1, ip, ror sp
   15a80:	andeq	r5, r1, ip, ror #26
   15a84:	strdeq	r5, [r1], -r0
   15a88:	andeq	r5, r1, ip, asr sp
   15a8c:	ldrdeq	r5, [r1], -r0
   15a90:			; <UNDEFINED> instruction: 0x00015db0
   15a94:	andeq	r5, r1, ip, lsr sp
   15a98:	andeq	r5, r1, r0, asr #27
   15a9c:	andeq	r5, r1, r0, asr #27
   15aa0:	andeq	r5, r1, r0, asr #27
   15aa4:	andeq	r5, r1, r0, asr #27
   15aa8:	andeq	r5, r1, r0, asr #27
   15aac:	andeq	r5, r1, r0, asr #27
   15ab0:	andeq	r5, r1, r0, asr #27
   15ab4:	andeq	r5, r1, r0, asr #27
   15ab8:	andeq	r5, r1, r0, asr #27
   15abc:	andeq	r5, r1, r0, asr #27
   15ac0:	andeq	r5, r1, r0, asr #27
   15ac4:	andeq	r5, r1, r0, asr #27
   15ac8:	andeq	r5, r1, r0, asr #27
   15acc:	andeq	r5, r1, r0, asr #27
   15ad0:	andeq	r5, r1, r0, asr #27
   15ad4:	andeq	r5, r1, r0, asr #27
   15ad8:	andeq	r5, r1, r0, asr #27
   15adc:	andeq	r5, r1, r0, asr #27
   15ae0:	andeq	r5, r1, r4, ror #25
   15ae4:	andeq	r5, r1, ip, asr #26
   15ae8:	andeq	r5, r1, ip, asr #26
   15aec:	andeq	r5, r1, r4, asr #25
   15af0:	andeq	r5, r1, ip, asr #26
   15af4:			; <UNDEFINED> instruction: 0x00015cb8
   15af8:	andeq	r5, r1, ip, asr #26
   15afc:	andeq	r5, r1, r8, lsr #26
   15b00:	andeq	r5, r1, ip, asr #26
   15b04:	andeq	r5, r1, ip, asr #26
   15b08:	andeq	r5, r1, ip, asr #26
   15b0c:			; <UNDEFINED> instruction: 0x00015cb8
   15b10:			; <UNDEFINED> instruction: 0x00015cb8
   15b14:			; <UNDEFINED> instruction: 0x00015cb8
   15b18:			; <UNDEFINED> instruction: 0x00015cb8
   15b1c:			; <UNDEFINED> instruction: 0x00015cb8
   15b20:			; <UNDEFINED> instruction: 0x00015cb8
   15b24:			; <UNDEFINED> instruction: 0x00015cb8
   15b28:			; <UNDEFINED> instruction: 0x00015cb8
   15b2c:			; <UNDEFINED> instruction: 0x00015cb8
   15b30:			; <UNDEFINED> instruction: 0x00015cb8
   15b34:			; <UNDEFINED> instruction: 0x00015cb8
   15b38:			; <UNDEFINED> instruction: 0x00015cb8
   15b3c:			; <UNDEFINED> instruction: 0x00015cb8
   15b40:			; <UNDEFINED> instruction: 0x00015cb8
   15b44:			; <UNDEFINED> instruction: 0x00015cb8
   15b48:			; <UNDEFINED> instruction: 0x00015cb8
   15b4c:	andeq	r5, r1, ip, asr #26
   15b50:	andeq	r5, r1, ip, asr #26
   15b54:	andeq	r5, r1, ip, asr #26
   15b58:	andeq	r5, r1, ip, asr #26
   15b5c:	andeq	r5, r1, r0, lsl #26
   15b60:	andeq	r5, r1, r0, asr #27
   15b64:			; <UNDEFINED> instruction: 0x00015cb8
   15b68:			; <UNDEFINED> instruction: 0x00015cb8
   15b6c:			; <UNDEFINED> instruction: 0x00015cb8
   15b70:			; <UNDEFINED> instruction: 0x00015cb8
   15b74:			; <UNDEFINED> instruction: 0x00015cb8
   15b78:			; <UNDEFINED> instruction: 0x00015cb8
   15b7c:			; <UNDEFINED> instruction: 0x00015cb8
   15b80:			; <UNDEFINED> instruction: 0x00015cb8
   15b84:			; <UNDEFINED> instruction: 0x00015cb8
   15b88:			; <UNDEFINED> instruction: 0x00015cb8
   15b8c:			; <UNDEFINED> instruction: 0x00015cb8
   15b90:			; <UNDEFINED> instruction: 0x00015cb8
   15b94:			; <UNDEFINED> instruction: 0x00015cb8
   15b98:			; <UNDEFINED> instruction: 0x00015cb8
   15b9c:			; <UNDEFINED> instruction: 0x00015cb8
   15ba0:			; <UNDEFINED> instruction: 0x00015cb8
   15ba4:			; <UNDEFINED> instruction: 0x00015cb8
   15ba8:			; <UNDEFINED> instruction: 0x00015cb8
   15bac:			; <UNDEFINED> instruction: 0x00015cb8
   15bb0:			; <UNDEFINED> instruction: 0x00015cb8
   15bb4:			; <UNDEFINED> instruction: 0x00015cb8
   15bb8:			; <UNDEFINED> instruction: 0x00015cb8
   15bbc:			; <UNDEFINED> instruction: 0x00015cb8
   15bc0:			; <UNDEFINED> instruction: 0x00015cb8
   15bc4:			; <UNDEFINED> instruction: 0x00015cb8
   15bc8:			; <UNDEFINED> instruction: 0x00015cb8
   15bcc:	andeq	r5, r1, ip, asr #26
   15bd0:	andeq	r5, r1, r0, lsl #25
   15bd4:			; <UNDEFINED> instruction: 0x00015cb8
   15bd8:	andeq	r5, r1, ip, asr #26
   15bdc:			; <UNDEFINED> instruction: 0x00015cb8
   15be0:	andeq	r5, r1, ip, asr #26
   15be4:			; <UNDEFINED> instruction: 0x00015cb8
   15be8:			; <UNDEFINED> instruction: 0x00015cb8
   15bec:			; <UNDEFINED> instruction: 0x00015cb8
   15bf0:			; <UNDEFINED> instruction: 0x00015cb8
   15bf4:			; <UNDEFINED> instruction: 0x00015cb8
   15bf8:			; <UNDEFINED> instruction: 0x00015cb8
   15bfc:			; <UNDEFINED> instruction: 0x00015cb8
   15c00:			; <UNDEFINED> instruction: 0x00015cb8
   15c04:			; <UNDEFINED> instruction: 0x00015cb8
   15c08:			; <UNDEFINED> instruction: 0x00015cb8
   15c0c:			; <UNDEFINED> instruction: 0x00015cb8
   15c10:			; <UNDEFINED> instruction: 0x00015cb8
   15c14:			; <UNDEFINED> instruction: 0x00015cb8
   15c18:			; <UNDEFINED> instruction: 0x00015cb8
   15c1c:			; <UNDEFINED> instruction: 0x00015cb8
   15c20:			; <UNDEFINED> instruction: 0x00015cb8
   15c24:			; <UNDEFINED> instruction: 0x00015cb8
   15c28:			; <UNDEFINED> instruction: 0x00015cb8
   15c2c:			; <UNDEFINED> instruction: 0x00015cb8
   15c30:			; <UNDEFINED> instruction: 0x00015cb8
   15c34:			; <UNDEFINED> instruction: 0x00015cb8
   15c38:			; <UNDEFINED> instruction: 0x00015cb8
   15c3c:			; <UNDEFINED> instruction: 0x00015cb8
   15c40:			; <UNDEFINED> instruction: 0x00015cb8
   15c44:			; <UNDEFINED> instruction: 0x00015cb8
   15c48:			; <UNDEFINED> instruction: 0x00015cb8
   15c4c:	andeq	r5, r1, ip, asr ip
   15c50:	andeq	r5, r1, ip, asr #26
   15c54:	andeq	r5, r1, ip, asr ip
   15c58:	andeq	r5, r1, r4, asr #25
   15c5c:	mov	r3, #0
   15c60:	cmn	r8, #1
   15c64:	str	r3, [sp, #40]	; 0x28
   15c68:	bne	15828 <__assert_fail@plt+0x4360>
   15c6c:	ldr	r3, [sp, #28]
   15c70:	ldrb	r3, [r3, #1]
   15c74:	adds	r3, r3, #0
   15c78:	movne	r3, #1
   15c7c:	b	15830 <__assert_fail@plt+0x4368>
   15c80:	mov	r3, #0
   15c84:	str	r3, [sp, #40]	; 0x28
   15c88:	ldr	r3, [sp, #176]	; 0xb0
   15c8c:	cmp	r3, #2
   15c90:	bne	15920 <__assert_fail@plt+0x4458>
   15c94:	ldr	r3, [sp, #44]	; 0x2c
   15c98:	cmp	r3, #0
   15c9c:	bne	165dc <__assert_fail@plt+0x5114>
   15ca0:	mov	r6, r3
   15ca4:	add	r7, r7, #1
   15ca8:	mov	r3, fp
   15cac:	mov	r5, #92	; 0x5c
   15cb0:	b	156f0 <__assert_fail@plt+0x4228>
   15cb4:	ldr	r6, [sp, #48]	; 0x30
   15cb8:	mov	r3, #0
   15cbc:	str	r3, [sp, #40]	; 0x28
   15cc0:	b	15844 <__assert_fail@plt+0x437c>
   15cc4:	mov	r3, #0
   15cc8:	str	r3, [sp, #40]	; 0x28
   15ccc:	b	15838 <__assert_fail@plt+0x4370>
   15cd0:	mov	r3, #0
   15cd4:	str	r3, [sp, #40]	; 0x28
   15cd8:	mov	r3, #118	; 0x76
   15cdc:	b	15698 <__assert_fail@plt+0x41d0>
   15ce0:	ldr	r6, [sp, #48]	; 0x30
   15ce4:	mov	r3, #0
   15ce8:	str	r3, [sp, #40]	; 0x28
   15cec:	b	15884 <__assert_fail@plt+0x43bc>
   15cf0:	mov	r3, #0
   15cf4:	str	r3, [sp, #40]	; 0x28
   15cf8:	mov	r3, #116	; 0x74
   15cfc:	b	1568c <__assert_fail@plt+0x41c4>
   15d00:	ldr	r3, [sp, #176]	; 0xb0
   15d04:	cmp	r3, #2
   15d08:	beq	16218 <__assert_fail@plt+0x4d50>
   15d0c:	cmp	r3, #5
   15d10:	mov	r3, #0
   15d14:	str	r3, [sp, #40]	; 0x28
   15d18:	beq	15984 <__assert_fail@plt+0x44bc>
   15d1c:	mov	r6, #0
   15d20:	mov	r5, #63	; 0x3f
   15d24:	b	15844 <__assert_fail@plt+0x437c>
   15d28:	ldr	r3, [sp, #176]	; 0xb0
   15d2c:	cmp	r3, #2
   15d30:	beq	161a0 <__assert_fail@plt+0x4cd8>
   15d34:	mov	r3, #0
   15d38:	b	159c8 <__assert_fail@plt+0x4500>
   15d3c:	mov	r3, #0
   15d40:	str	r3, [sp, #40]	; 0x28
   15d44:	mov	r3, #114	; 0x72
   15d48:	b	1568c <__assert_fail@plt+0x41c4>
   15d4c:	mov	r3, #0
   15d50:	mov	r6, r3
   15d54:	str	r3, [sp, #40]	; 0x28
   15d58:	b	15884 <__assert_fail@plt+0x43bc>
   15d5c:	mov	r3, #0
   15d60:	str	r3, [sp, #40]	; 0x28
   15d64:	mov	r3, #110	; 0x6e
   15d68:	b	1568c <__assert_fail@plt+0x41c4>
   15d6c:	mov	r3, #0
   15d70:	str	r3, [sp, #40]	; 0x28
   15d74:	mov	r3, #98	; 0x62
   15d78:	b	15698 <__assert_fail@plt+0x41d0>
   15d7c:	mov	r3, #0
   15d80:	str	r3, [sp, #40]	; 0x28
   15d84:	mov	r3, #97	; 0x61
   15d88:	b	15698 <__assert_fail@plt+0x41d0>
   15d8c:	ldr	r3, [sp, #60]	; 0x3c
   15d90:	cmp	r3, #0
   15d94:	bne	16184 <__assert_fail@plt+0x4cbc>
   15d98:	ldr	r3, [sp, #92]	; 0x5c
   15d9c:	cmp	r3, #0
   15da0:	addne	r7, r7, #1
   15da4:	bne	14fa4 <__assert_fail@plt+0x3adc>
   15da8:	str	r3, [sp, #40]	; 0x28
   15dac:	b	156a4 <__assert_fail@plt+0x41dc>
   15db0:	mov	r3, #0
   15db4:	str	r3, [sp, #40]	; 0x28
   15db8:	mov	r3, #102	; 0x66
   15dbc:	b	15698 <__assert_fail@plt+0x41d0>
   15dc0:	mov	r3, #0
   15dc4:	str	r3, [sp, #40]	; 0x28
   15dc8:	ldr	r3, [sp, #76]	; 0x4c
   15dcc:	cmp	r3, #1
   15dd0:	bne	16238 <__assert_fail@plt+0x4d70>
   15dd4:	bl	11378 <__ctype_b_loc@plt>
   15dd8:	ldr	r2, [r0]
   15ddc:	sxth	r3, r5
   15de0:	lsl	r3, r3, #1
   15de4:	ldr	r1, [sp, #76]	; 0x4c
   15de8:	ldrh	r3, [r2, r3]
   15dec:	mov	r0, r1
   15df0:	and	r3, r3, #16384	; 0x4000
   15df4:	cmp	r3, #0
   15df8:	ldr	r3, [sp, #60]	; 0x3c
   15dfc:	movne	r6, #1
   15e00:	moveq	r6, #0
   15e04:	movne	r2, #0
   15e08:	andeq	r2, r3, #1
   15e0c:	cmp	r2, #0
   15e10:	beq	15844 <__assert_fail@plt+0x437c>
   15e14:	ldr	r2, [sp, #60]	; 0x3c
   15e18:	mov	r6, #0
   15e1c:	add	r1, r0, r7
   15e20:	mov	ip, #39	; 0x27
   15e24:	str	r6, [sp, #100]	; 0x64
   15e28:	mov	r0, #0
   15e2c:	ldr	lr, [sp, #36]	; 0x24
   15e30:	str	r8, [sp, #36]	; 0x24
   15e34:	ldr	r6, [sp, #40]	; 0x28
   15e38:	ldr	r8, [sp, #44]	; 0x2c
   15e3c:	b	15eec <__assert_fail@plt+0x4a24>
   15e40:	cmp	r8, #0
   15e44:	bne	16420 <__assert_fail@plt+0x4f58>
   15e48:	ldr	r0, [sp, #52]	; 0x34
   15e4c:	eor	r3, fp, #1
   15e50:	ands	r3, r0, r3
   15e54:	beq	15e84 <__assert_fail@plt+0x49bc>
   15e58:	cmp	sl, r4
   15e5c:	add	r0, r4, #1
   15e60:	strbhi	ip, [r9, r4]
   15e64:	cmp	sl, r0
   15e68:	movhi	fp, #36	; 0x24
   15e6c:	strbhi	fp, [r9, r0]
   15e70:	add	r0, r4, #2
   15e74:	mov	fp, r3
   15e78:	cmp	sl, r0
   15e7c:	add	r4, r4, #3
   15e80:	strbhi	ip, [r9, r0]
   15e84:	cmp	sl, r4
   15e88:	movhi	r3, #92	; 0x5c
   15e8c:	strbhi	r3, [r9, r4]
   15e90:	add	r3, r4, #1
   15e94:	cmp	sl, r3
   15e98:	bls	15ea8 <__assert_fail@plt+0x49e0>
   15e9c:	lsr	r0, r5, #6
   15ea0:	add	r0, r0, #48	; 0x30
   15ea4:	strb	r0, [r9, r3]
   15ea8:	add	r3, r4, #2
   15eac:	cmp	sl, r3
   15eb0:	bls	15ec0 <__assert_fail@plt+0x49f8>
   15eb4:	ubfx	r0, r5, #3, #3
   15eb8:	add	r0, r0, #48	; 0x30
   15ebc:	strb	r0, [r9, r3]
   15ec0:	add	r7, r7, #1
   15ec4:	and	r5, r5, #7
   15ec8:	cmp	r1, r7
   15ecc:	add	r5, r5, #48	; 0x30
   15ed0:	add	r4, r4, #3
   15ed4:	bls	16434 <__assert_fail@plt+0x4f6c>
   15ed8:	mov	r0, r2
   15edc:	cmp	sl, r4
   15ee0:	strbhi	r5, [r9, r4]
   15ee4:	add	r4, r4, #1
   15ee8:	ldrb	r5, [lr, #1]!
   15eec:	cmp	r2, #0
   15ef0:	bne	15e40 <__assert_fail@plt+0x4978>
   15ef4:	eor	r3, r0, #1
   15ef8:	cmp	r6, #0
   15efc:	and	r3, r3, fp
   15f00:	uxtb	r3, r3
   15f04:	beq	15f18 <__assert_fail@plt+0x4a50>
   15f08:	cmp	sl, r4
   15f0c:	movhi	r6, #92	; 0x5c
   15f10:	strbhi	r6, [r9, r4]
   15f14:	add	r4, r4, #1
   15f18:	add	r7, r7, #1
   15f1c:	cmp	r7, r1
   15f20:	bcs	16414 <__assert_fail@plt+0x4f4c>
   15f24:	cmp	r3, #0
   15f28:	beq	16458 <__assert_fail@plt+0x4f90>
   15f2c:	cmp	sl, r4
   15f30:	add	r3, r4, #1
   15f34:	mov	r6, #0
   15f38:	strbhi	ip, [r9, r4]
   15f3c:	cmp	sl, r3
   15f40:	add	r4, r4, #2
   15f44:	mov	fp, r6
   15f48:	strbhi	ip, [r9, r3]
   15f4c:	b	15edc <__assert_fail@plt+0x4a14>
   15f50:	ldr	r3, [sp, #36]	; 0x24
   15f54:	ldrb	r5, [r3]
   15f58:	cmp	r5, #126	; 0x7e
   15f5c:	ldrls	pc, [pc, r5, lsl #2]
   15f60:	b	15dc0 <__assert_fail@plt+0x48f8>
   15f64:	andeq	r6, r1, r4, lsl #3
   15f68:	andeq	r5, r1, r0, asr #27
   15f6c:	andeq	r5, r1, r0, asr #27
   15f70:	andeq	r5, r1, r0, asr #27
   15f74:	andeq	r5, r1, r0, asr #27
   15f78:	andeq	r5, r1, r0, asr #27
   15f7c:	andeq	r5, r1, r0, asr #27
   15f80:	andeq	r5, r1, r8, ror r6
   15f84:	andeq	r5, r1, r0, ror r6
   15f88:	strdeq	r5, [r1], -r0
   15f8c:	andeq	r6, r1, r8, ror r1
   15f90:	ldrdeq	r5, [r1], -r0
   15f94:	andeq	r5, r1, ip, lsl r5
   15f98:	andeq	r6, r1, ip, ror #2
   15f9c:	andeq	r5, r1, r0, asr #27
   15fa0:	andeq	r5, r1, r0, asr #27
   15fa4:	andeq	r5, r1, r0, asr #27
   15fa8:	andeq	r5, r1, r0, asr #27
   15fac:	andeq	r5, r1, r0, asr #27
   15fb0:	andeq	r5, r1, r0, asr #27
   15fb4:	andeq	r5, r1, r0, asr #27
   15fb8:	andeq	r5, r1, r0, asr #27
   15fbc:	andeq	r5, r1, r0, asr #27
   15fc0:	andeq	r5, r1, r0, asr #27
   15fc4:	andeq	r5, r1, r0, asr #27
   15fc8:	andeq	r5, r1, r0, asr #27
   15fcc:	andeq	r5, r1, r0, asr #27
   15fd0:	andeq	r5, r1, r0, asr #27
   15fd4:	andeq	r5, r1, r0, asr #27
   15fd8:	andeq	r5, r1, r0, asr #27
   15fdc:	andeq	r5, r1, r0, asr #27
   15fe0:	andeq	r5, r1, r0, asr #27
   15fe4:	andeq	r5, r1, r0, ror #25
   15fe8:	andeq	r6, r1, r0, ror #2
   15fec:	andeq	r6, r1, r0, ror #2
   15ff0:	andeq	r5, r1, r4, asr #25
   15ff4:	andeq	r6, r1, r0, ror #2
   15ff8:			; <UNDEFINED> instruction: 0x00015cb4
   15ffc:	andeq	r6, r1, r0, ror #2
   16000:	andeq	r5, r1, r8, lsr #26
   16004:	andeq	r6, r1, r0, ror #2
   16008:	andeq	r6, r1, r0, ror #2
   1600c:	andeq	r6, r1, r0, ror #2
   16010:			; <UNDEFINED> instruction: 0x00015cb4
   16014:			; <UNDEFINED> instruction: 0x00015cb4
   16018:			; <UNDEFINED> instruction: 0x00015cb4
   1601c:			; <UNDEFINED> instruction: 0x00015cb4
   16020:			; <UNDEFINED> instruction: 0x00015cb4
   16024:			; <UNDEFINED> instruction: 0x00015cb4
   16028:			; <UNDEFINED> instruction: 0x00015cb4
   1602c:			; <UNDEFINED> instruction: 0x00015cb4
   16030:			; <UNDEFINED> instruction: 0x00015cb4
   16034:			; <UNDEFINED> instruction: 0x00015cb4
   16038:			; <UNDEFINED> instruction: 0x00015cb4
   1603c:			; <UNDEFINED> instruction: 0x00015cb4
   16040:			; <UNDEFINED> instruction: 0x00015cb4
   16044:			; <UNDEFINED> instruction: 0x00015cb4
   16048:			; <UNDEFINED> instruction: 0x00015cb4
   1604c:			; <UNDEFINED> instruction: 0x00015cb4
   16050:	andeq	r6, r1, r0, ror #2
   16054:	andeq	r6, r1, r0, ror #2
   16058:	andeq	r6, r1, r0, ror #2
   1605c:	andeq	r6, r1, r0, ror #2
   16060:	andeq	r5, r1, r0, lsl #26
   16064:	andeq	r5, r1, r0, asr #27
   16068:			; <UNDEFINED> instruction: 0x00015cb4
   1606c:			; <UNDEFINED> instruction: 0x00015cb4
   16070:			; <UNDEFINED> instruction: 0x00015cb4
   16074:			; <UNDEFINED> instruction: 0x00015cb4
   16078:			; <UNDEFINED> instruction: 0x00015cb4
   1607c:			; <UNDEFINED> instruction: 0x00015cb4
   16080:			; <UNDEFINED> instruction: 0x00015cb4
   16084:			; <UNDEFINED> instruction: 0x00015cb4
   16088:			; <UNDEFINED> instruction: 0x00015cb4
   1608c:			; <UNDEFINED> instruction: 0x00015cb4
   16090:			; <UNDEFINED> instruction: 0x00015cb4
   16094:			; <UNDEFINED> instruction: 0x00015cb4
   16098:			; <UNDEFINED> instruction: 0x00015cb4
   1609c:			; <UNDEFINED> instruction: 0x00015cb4
   160a0:			; <UNDEFINED> instruction: 0x00015cb4
   160a4:			; <UNDEFINED> instruction: 0x00015cb4
   160a8:			; <UNDEFINED> instruction: 0x00015cb4
   160ac:			; <UNDEFINED> instruction: 0x00015cb4
   160b0:			; <UNDEFINED> instruction: 0x00015cb4
   160b4:			; <UNDEFINED> instruction: 0x00015cb4
   160b8:			; <UNDEFINED> instruction: 0x00015cb4
   160bc:			; <UNDEFINED> instruction: 0x00015cb4
   160c0:			; <UNDEFINED> instruction: 0x00015cb4
   160c4:			; <UNDEFINED> instruction: 0x00015cb4
   160c8:			; <UNDEFINED> instruction: 0x00015cb4
   160cc:			; <UNDEFINED> instruction: 0x00015cb4
   160d0:	andeq	r6, r1, r0, ror #2
   160d4:	andeq	r5, r1, r0, lsl #25
   160d8:			; <UNDEFINED> instruction: 0x00015cb4
   160dc:	andeq	r6, r1, r0, ror #2
   160e0:			; <UNDEFINED> instruction: 0x00015cb4
   160e4:	andeq	r6, r1, r0, ror #2
   160e8:			; <UNDEFINED> instruction: 0x00015cb4
   160ec:			; <UNDEFINED> instruction: 0x00015cb4
   160f0:			; <UNDEFINED> instruction: 0x00015cb4
   160f4:			; <UNDEFINED> instruction: 0x00015cb4
   160f8:			; <UNDEFINED> instruction: 0x00015cb4
   160fc:			; <UNDEFINED> instruction: 0x00015cb4
   16100:			; <UNDEFINED> instruction: 0x00015cb4
   16104:			; <UNDEFINED> instruction: 0x00015cb4
   16108:			; <UNDEFINED> instruction: 0x00015cb4
   1610c:			; <UNDEFINED> instruction: 0x00015cb4
   16110:			; <UNDEFINED> instruction: 0x00015cb4
   16114:			; <UNDEFINED> instruction: 0x00015cb4
   16118:			; <UNDEFINED> instruction: 0x00015cb4
   1611c:			; <UNDEFINED> instruction: 0x00015cb4
   16120:			; <UNDEFINED> instruction: 0x00015cb4
   16124:			; <UNDEFINED> instruction: 0x00015cb4
   16128:			; <UNDEFINED> instruction: 0x00015cb4
   1612c:			; <UNDEFINED> instruction: 0x00015cb4
   16130:			; <UNDEFINED> instruction: 0x00015cb4
   16134:			; <UNDEFINED> instruction: 0x00015cb4
   16138:			; <UNDEFINED> instruction: 0x00015cb4
   1613c:			; <UNDEFINED> instruction: 0x00015cb4
   16140:			; <UNDEFINED> instruction: 0x00015cb4
   16144:			; <UNDEFINED> instruction: 0x00015cb4
   16148:			; <UNDEFINED> instruction: 0x00015cb4
   1614c:			; <UNDEFINED> instruction: 0x00015cb4
   16150:	andeq	r5, r1, ip, asr ip
   16154:	andeq	r6, r1, r0, ror #2
   16158:	andeq	r5, r1, ip, asr ip
   1615c:	andeq	r5, r1, r4, asr #25
   16160:	mov	r3, #0
   16164:	str	r3, [sp, #40]	; 0x28
   16168:	b	15840 <__assert_fail@plt+0x4378>
   1616c:	mov	r3, #0
   16170:	str	r3, [sp, #40]	; 0x28
   16174:	b	157d8 <__assert_fail@plt+0x4310>
   16178:	mov	r3, #0
   1617c:	str	r3, [sp, #40]	; 0x28
   16180:	b	1580c <__assert_fail@plt+0x4344>
   16184:	ldr	r3, [sp, #44]	; 0x2c
   16188:	cmp	r3, #0
   1618c:	beq	15724 <__assert_fail@plt+0x425c>
   16190:	ldr	r3, [sp, #52]	; 0x34
   16194:	mov	fp, r9
   16198:	str	r3, [sp, #60]	; 0x3c
   1619c:	b	1589c <__assert_fail@plt+0x43d4>
   161a0:	ldr	r3, [sp, #44]	; 0x2c
   161a4:	cmp	r3, #0
   161a8:	bne	165dc <__assert_fail@plt+0x5114>
   161ac:	str	r3, [sp, #40]	; 0x28
   161b0:	cmp	sl, #0
   161b4:	ldr	r3, [sp, #84]	; 0x54
   161b8:	clz	r3, r3
   161bc:	lsr	r3, r3, #5
   161c0:	moveq	r3, #0
   161c4:	cmp	r3, #0
   161c8:	strne	sl, [sp, #84]	; 0x54
   161cc:	movne	sl, #0
   161d0:	bne	16200 <__assert_fail@plt+0x4d38>
   161d4:	cmp	sl, r4
   161d8:	movhi	r3, #39	; 0x27
   161dc:	strbhi	r3, [r9, r4]
   161e0:	add	r3, r4, #1
   161e4:	cmp	sl, r3
   161e8:	movhi	r2, #92	; 0x5c
   161ec:	strbhi	r2, [r9, r3]
   161f0:	add	r3, r4, #2
   161f4:	cmp	sl, r3
   161f8:	movhi	r2, #39	; 0x27
   161fc:	strbhi	r2, [r9, r3]
   16200:	mov	r3, #0
   16204:	add	r4, r4, #3
   16208:	str	r6, [sp, #80]	; 0x50
   1620c:	mov	fp, r3
   16210:	mov	r5, #39	; 0x27
   16214:	b	156e0 <__assert_fail@plt+0x4218>
   16218:	ldr	r3, [sp, #44]	; 0x2c
   1621c:	cmp	r3, #0
   16220:	bne	165dc <__assert_fail@plt+0x5114>
   16224:	mov	r6, #0
   16228:	mov	r5, #63	; 0x3f
   1622c:	str	r3, [sp, #40]	; 0x28
   16230:	mov	r3, fp
   16234:	b	156e0 <__assert_fail@plt+0x4218>
   16238:	mov	r2, #0
   1623c:	mov	r3, #0
   16240:	cmn	r8, #1
   16244:	strd	r2, [sp, #128]	; 0x80
   16248:	bne	16258 <__assert_fail@plt+0x4d90>
   1624c:	ldr	r0, [sp, #28]
   16250:	bl	11390 <strlen@plt>
   16254:	mov	r8, r0
   16258:	str	r9, [sp, #100]	; 0x64
   1625c:	mov	r3, #0
   16260:	strd	sl, [sp, #104]	; 0x68
   16264:	ldr	sl, [sp, #28]
   16268:	str	r5, [sp, #112]	; 0x70
   1626c:	mov	r5, r3
   16270:	ldr	r9, [sp, #68]	; 0x44
   16274:	str	r4, [sp, #116]	; 0x74
   16278:	add	r4, r7, r5
   1627c:	add	r3, sp, #128	; 0x80
   16280:	add	fp, sl, r4
   16284:	sub	r2, r8, r4
   16288:	mov	r1, fp
   1628c:	add	r0, sp, #124	; 0x7c
   16290:	bl	14760 <__assert_fail@plt+0x3298>
   16294:	subs	r1, r0, #0
   16298:	beq	162d8 <__assert_fail@plt+0x4e10>
   1629c:	cmn	r1, #1
   162a0:	beq	16630 <__assert_fail@plt+0x5168>
   162a4:	cmn	r1, #2
   162a8:	beq	16650 <__assert_fail@plt+0x5188>
   162ac:	cmp	r9, #0
   162b0:	bne	16308 <__assert_fail@plt+0x4e40>
   162b4:	ldr	r0, [sp, #124]	; 0x7c
   162b8:	add	r5, r5, r1
   162bc:	bl	112ac <iswprint@plt>
   162c0:	cmp	r0, #0
   162c4:	add	r0, sp, #128	; 0x80
   162c8:	moveq	r6, #0
   162cc:	bl	11234 <mbsinit@plt>
   162d0:	cmp	r0, #0
   162d4:	beq	16278 <__assert_fail@plt+0x4db0>
   162d8:	ldr	r3, [sp, #60]	; 0x3c
   162dc:	add	r9, sp, #100	; 0x64
   162e0:	mov	r0, r5
   162e4:	ldm	r9, {r9, sl, fp}
   162e8:	eor	r2, r6, #1
   162ec:	ldr	r5, [sp, #112]	; 0x70
   162f0:	and	r2, r2, r3
   162f4:	uxtb	r2, r2
   162f8:	ldr	r4, [sp, #116]	; 0x74
   162fc:	cmp	r0, #1
   16300:	bhi	15e1c <__assert_fail@plt+0x4954>
   16304:	b	15e0c <__assert_fail@plt+0x4944>
   16308:	cmp	r1, #1
   1630c:	beq	162b4 <__assert_fail@plt+0x4dec>
   16310:	add	r2, r4, #1
   16314:	add	r3, sl, r1
   16318:	add	r2, sl, r2
   1631c:	add	r4, r3, r4
   16320:	ldrb	r3, [r2], #1
   16324:	sub	r3, r3, #91	; 0x5b
   16328:	cmp	r3, #33	; 0x21
   1632c:	ldrls	pc, [pc, r3, lsl #2]
   16330:	b	163bc <__assert_fail@plt+0x4ef4>
   16334:	andeq	r6, r1, r8, asr #7
   16338:	andeq	r6, r1, r8, asr #7
   1633c:			; <UNDEFINED> instruction: 0x000163bc
   16340:	andeq	r6, r1, r8, asr #7
   16344:			; <UNDEFINED> instruction: 0x000163bc
   16348:	andeq	r6, r1, r8, asr #7
   1634c:			; <UNDEFINED> instruction: 0x000163bc
   16350:			; <UNDEFINED> instruction: 0x000163bc
   16354:			; <UNDEFINED> instruction: 0x000163bc
   16358:			; <UNDEFINED> instruction: 0x000163bc
   1635c:			; <UNDEFINED> instruction: 0x000163bc
   16360:			; <UNDEFINED> instruction: 0x000163bc
   16364:			; <UNDEFINED> instruction: 0x000163bc
   16368:			; <UNDEFINED> instruction: 0x000163bc
   1636c:			; <UNDEFINED> instruction: 0x000163bc
   16370:			; <UNDEFINED> instruction: 0x000163bc
   16374:			; <UNDEFINED> instruction: 0x000163bc
   16378:			; <UNDEFINED> instruction: 0x000163bc
   1637c:			; <UNDEFINED> instruction: 0x000163bc
   16380:			; <UNDEFINED> instruction: 0x000163bc
   16384:			; <UNDEFINED> instruction: 0x000163bc
   16388:			; <UNDEFINED> instruction: 0x000163bc
   1638c:			; <UNDEFINED> instruction: 0x000163bc
   16390:			; <UNDEFINED> instruction: 0x000163bc
   16394:			; <UNDEFINED> instruction: 0x000163bc
   16398:			; <UNDEFINED> instruction: 0x000163bc
   1639c:			; <UNDEFINED> instruction: 0x000163bc
   163a0:			; <UNDEFINED> instruction: 0x000163bc
   163a4:			; <UNDEFINED> instruction: 0x000163bc
   163a8:			; <UNDEFINED> instruction: 0x000163bc
   163ac:			; <UNDEFINED> instruction: 0x000163bc
   163b0:			; <UNDEFINED> instruction: 0x000163bc
   163b4:			; <UNDEFINED> instruction: 0x000163bc
   163b8:	andeq	r6, r1, r8, asr #7
   163bc:	cmp	r4, r2
   163c0:	bne	16320 <__assert_fail@plt+0x4e58>
   163c4:	b	162b4 <__assert_fail@plt+0x4dec>
   163c8:	mov	r3, #2
   163cc:	ldr	fp, [sp, #100]	; 0x64
   163d0:	str	r3, [sp, #176]	; 0xb0
   163d4:	ldr	sl, [sp, #104]	; 0x68
   163d8:	b	1589c <__assert_fail@plt+0x43d4>
   163dc:	ldr	r2, [sp, #52]	; 0x34
   163e0:	mov	fp, r9
   163e4:	ldr	r3, [sp, #60]	; 0x3c
   163e8:	and	r3, r3, r2
   163ec:	str	r3, [sp, #60]	; 0x3c
   163f0:	b	1589c <__assert_fail@plt+0x43d4>
   163f4:	cmp	sl, r4
   163f8:	movhi	r2, fp
   163fc:	bhi	15774 <__assert_fail@plt+0x42ac>
   16400:	mov	r2, r4
   16404:	b	15784 <__assert_fail@plt+0x42bc>
   16408:	mov	r6, r3
   1640c:	mov	r5, #63	; 0x3f
   16410:	b	15844 <__assert_fail@plt+0x437c>
   16414:	ldr	r8, [sp, #36]	; 0x24
   16418:	ldr	r6, [sp, #100]	; 0x64
   1641c:	b	156f0 <__assert_fail@plt+0x4228>
   16420:	mov	fp, r9
   16424:	ldr	r8, [sp, #36]	; 0x24
   16428:	ldr	r3, [sp, #52]	; 0x34
   1642c:	str	r3, [sp, #60]	; 0x3c
   16430:	b	1589c <__assert_fail@plt+0x43d4>
   16434:	ldr	r8, [sp, #36]	; 0x24
   16438:	ldr	r6, [sp, #100]	; 0x64
   1643c:	b	15588 <__assert_fail@plt+0x40c0>
   16440:	mov	r3, #0
   16444:	add	r4, r4, #4
   16448:	mov	fp, r2
   1644c:	mov	r6, r3
   16450:	mov	r5, #48	; 0x30
   16454:	b	156e0 <__assert_fail@plt+0x4218>
   16458:	mov	r6, r3
   1645c:	b	15edc <__assert_fail@plt+0x4a14>
   16460:	mov	r3, #1
   16464:	movw	r2, #52748	; 0xce0c
   16468:	movt	r2, #2
   1646c:	mov	r4, r3
   16470:	mov	r9, sl
   16474:	str	r3, [sp, #32]
   16478:	str	sl, [sp, #44]	; 0x2c
   1647c:	str	r3, [sp, #48]	; 0x30
   16480:	str	sl, [sp, #52]	; 0x34
   16484:	str	r3, [sp, #56]	; 0x38
   16488:	str	r3, [sp, #60]	; 0x3c
   1648c:	str	sl, [sp, #64]	; 0x40
   16490:	str	sl, [sp, #68]	; 0x44
   16494:	str	r2, [sp, #72]	; 0x48
   16498:	str	sl, [sp, #80]	; 0x50
   1649c:	str	sl, [sp, #84]	; 0x54
   164a0:	str	sl, [sp, #88]	; 0x58
   164a4:	b	14f94 <__assert_fail@plt+0x3acc>
   164a8:	mov	r3, #0
   164ac:	mov	r5, #48	; 0x30
   164b0:	mov	r6, r3
   164b4:	b	156e0 <__assert_fail@plt+0x4218>
   164b8:	cmp	sl, r4
   164bc:	mov	r5, #48	; 0x30
   164c0:	movhi	r3, #48	; 0x30
   164c4:	strbhi	r3, [r9, r4]
   164c8:	add	r3, r2, #2
   164cc:	add	r4, r2, #3
   164d0:	cmp	sl, r3
   164d4:	movhi	r1, #48	; 0x30
   164d8:	strbhi	r1, [r9, r3]
   164dc:	mov	r3, #0
   164e0:	b	157bc <__assert_fail@plt+0x42f4>
   164e4:	ldr	r3, [sp, #48]	; 0x30
   164e8:	str	r3, [sp, #40]	; 0x28
   164ec:	b	15dc8 <__assert_fail@plt+0x4900>
   164f0:	ldr	r2, [sp, #28]
   164f4:	ldrb	r2, [r2, r3]
   164f8:	sub	r1, r2, #33	; 0x21
   164fc:	cmp	r1, #29
   16500:	ldrls	pc, [pc, r1, lsl #2]
   16504:	b	15840 <__assert_fail@plt+0x4378>
   16508:	andeq	r6, r1, r0, lsl #11
   1650c:	andeq	r5, r1, r0, asr #16
   16510:	andeq	r5, r1, r0, asr #16
   16514:	andeq	r5, r1, r0, asr #16
   16518:	andeq	r5, r1, r0, asr #16
   1651c:	andeq	r5, r1, r0, asr #16
   16520:	andeq	r6, r1, r0, lsl #11
   16524:	andeq	r6, r1, r0, lsl #11
   16528:	andeq	r6, r1, r0, lsl #11
   1652c:	andeq	r5, r1, r0, asr #16
   16530:	andeq	r5, r1, r0, asr #16
   16534:	andeq	r5, r1, r0, asr #16
   16538:	andeq	r6, r1, r0, lsl #11
   1653c:	andeq	r5, r1, r0, asr #16
   16540:	andeq	r6, r1, r0, lsl #11
   16544:	andeq	r5, r1, r0, asr #16
   16548:	andeq	r5, r1, r0, asr #16
   1654c:	andeq	r5, r1, r0, asr #16
   16550:	andeq	r5, r1, r0, asr #16
   16554:	andeq	r5, r1, r0, asr #16
   16558:	andeq	r5, r1, r0, asr #16
   1655c:	andeq	r5, r1, r0, asr #16
   16560:	andeq	r5, r1, r0, asr #16
   16564:	andeq	r5, r1, r0, asr #16
   16568:	andeq	r5, r1, r0, asr #16
   1656c:	andeq	r5, r1, r0, asr #16
   16570:	andeq	r5, r1, r0, asr #16
   16574:	andeq	r6, r1, r0, lsl #11
   16578:	andeq	r6, r1, r0, lsl #11
   1657c:	andeq	r6, r1, r0, lsl #11
   16580:	ldr	r1, [sp, #44]	; 0x2c
   16584:	cmp	r1, #0
   16588:	bne	167e8 <__assert_fail@plt+0x5320>
   1658c:	cmp	sl, r4
   16590:	mov	r7, r3
   16594:	movhi	r1, #63	; 0x3f
   16598:	mov	r5, r2
   1659c:	mov	r3, fp
   165a0:	strbhi	r1, [r9, r4]
   165a4:	add	r1, r4, #1
   165a8:	cmp	sl, r1
   165ac:	movhi	r0, #34	; 0x22
   165b0:	strbhi	r0, [r9, r1]
   165b4:	add	r1, r4, #2
   165b8:	cmp	sl, r1
   165bc:	movhi	r0, #34	; 0x22
   165c0:	strbhi	r0, [r9, r1]
   165c4:	add	r1, r4, #3
   165c8:	add	r4, r4, #4
   165cc:	cmp	sl, r1
   165d0:	movhi	r0, #63	; 0x3f
   165d4:	strbhi	r0, [r9, r1]
   165d8:	b	157bc <__assert_fail@plt+0x42f4>
   165dc:	mov	fp, r9
   165e0:	b	1589c <__assert_fail@plt+0x43d4>
   165e4:	ldr	r3, [sp, #188]	; 0xbc
   165e8:	ldrb	r3, [r3]
   165ec:	cmp	r3, #0
   165f0:	beq	14f2c <__assert_fail@plt+0x3a64>
   165f4:	ldr	r2, [sp, #188]	; 0xbc
   165f8:	cmp	sl, r4
   165fc:	bls	1661c <__assert_fail@plt+0x5154>
   16600:	strb	r3, [fp, r4]
   16604:	add	r4, r4, #1
   16608:	ldrb	r3, [r2, #1]!
   1660c:	cmp	r3, #0
   16610:	beq	14f2c <__assert_fail@plt+0x3a64>
   16614:	cmp	sl, r4
   16618:	bhi	16600 <__assert_fail@plt+0x5138>
   1661c:	ldrb	r3, [r2, #1]!
   16620:	add	r4, r4, #1
   16624:	cmp	r3, #0
   16628:	bne	165f8 <__assert_fail@plt+0x5130>
   1662c:	b	14f2c <__assert_fail@plt+0x3a64>
   16630:	add	r9, sp, #100	; 0x64
   16634:	mov	r0, r5
   16638:	ldr	r2, [sp, #60]	; 0x3c
   1663c:	mov	r6, #0
   16640:	ldm	r9, {r9, sl, fp}
   16644:	ldr	r5, [sp, #112]	; 0x70
   16648:	ldr	r4, [sp, #116]	; 0x74
   1664c:	b	162fc <__assert_fail@plt+0x4e34>
   16650:	cmp	r4, r8
   16654:	add	r9, sp, #100	; 0x64
   16658:	mov	r1, r4
   1665c:	mov	r2, fp
   16660:	ldm	r9, {r9, sl, fp}
   16664:	mov	r3, r5
   16668:	mov	r0, r5
   1666c:	ldr	r5, [sp, #112]	; 0x70
   16670:	ldr	r4, [sp, #116]	; 0x74
   16674:	bcs	166a8 <__assert_fail@plt+0x51e0>
   16678:	ldrb	r6, [r2]
   1667c:	cmp	r6, #0
   16680:	bne	16694 <__assert_fail@plt+0x51cc>
   16684:	b	167e0 <__assert_fail@plt+0x5318>
   16688:	ldrb	r6, [r2, #1]!
   1668c:	cmp	r6, #0
   16690:	beq	16778 <__assert_fail@plt+0x52b0>
   16694:	add	r3, r3, #1
   16698:	add	r1, r7, r3
   1669c:	cmp	r8, r1
   166a0:	bhi	16688 <__assert_fail@plt+0x51c0>
   166a4:	mov	r0, r3
   166a8:	mov	r6, #0
   166ac:	ldr	r2, [sp, #60]	; 0x3c
   166b0:	b	162fc <__assert_fail@plt+0x4e34>
   166b4:	mov	r3, #1
   166b8:	mov	r4, #0
   166bc:	mov	r9, r4
   166c0:	str	r3, [sp, #32]
   166c4:	str	r3, [sp, #44]	; 0x2c
   166c8:	str	r3, [sp, #48]	; 0x30
   166cc:	str	r4, [sp, #52]	; 0x34
   166d0:	str	r3, [sp, #56]	; 0x38
   166d4:	str	r3, [sp, #60]	; 0x3c
   166d8:	str	r3, [sp, #88]	; 0x58
   166dc:	movw	r3, #52748	; 0xce0c
   166e0:	movt	r3, #2
   166e4:	str	r4, [sp, #64]	; 0x40
   166e8:	str	r4, [sp, #68]	; 0x44
   166ec:	str	r3, [sp, #72]	; 0x48
   166f0:	str	r4, [sp, #80]	; 0x50
   166f4:	str	r4, [sp, #84]	; 0x54
   166f8:	b	14f94 <__assert_fail@plt+0x3acc>
   166fc:	mov	fp, r9
   16700:	b	158b0 <__assert_fail@plt+0x43e8>
   16704:	ldr	r3, [sp, #48]	; 0x30
   16708:	b	16224 <__assert_fail@plt+0x4d5c>
   1670c:	mov	r2, r3
   16710:	ldr	r3, [sp, #72]	; 0x48
   16714:	cmp	r3, #0
   16718:	moveq	r2, #0
   1671c:	andne	r2, r2, #1
   16720:	cmp	r2, #0
   16724:	beq	16754 <__assert_fail@plt+0x528c>
   16728:	mov	r2, r3
   1672c:	ldrb	r3, [r3]
   16730:	cmp	r3, #0
   16734:	beq	16754 <__assert_fail@plt+0x528c>
   16738:	cmp	sl, r4
   1673c:	bls	16764 <__assert_fail@plt+0x529c>
   16740:	strb	r3, [fp, r4]
   16744:	add	r4, r4, #1
   16748:	ldrb	r3, [r2, #1]!
   1674c:	cmp	r3, #0
   16750:	bne	16738 <__assert_fail@plt+0x5270>
   16754:	cmp	sl, r4
   16758:	movhi	r3, #0
   1675c:	strbhi	r3, [fp, r4]
   16760:	b	158ec <__assert_fail@plt+0x4424>
   16764:	ldrb	r3, [r2, #1]!
   16768:	add	r4, r4, #1
   1676c:	cmp	r3, #0
   16770:	bne	16738 <__assert_fail@plt+0x5270>
   16774:	b	16754 <__assert_fail@plt+0x528c>
   16778:	mov	r0, r3
   1677c:	ldr	r2, [sp, #60]	; 0x3c
   16780:	b	162fc <__assert_fail@plt+0x4e34>
   16784:	mov	ip, #5
   16788:	mov	r3, r8
   1678c:	ldr	r1, [sp, #84]	; 0x54
   16790:	str	ip, [sp]
   16794:	ldr	r2, [sp, #180]	; 0xb4
   16798:	ldr	ip, [sp, #188]	; 0xbc
   1679c:	ldr	r0, [sp, #184]	; 0xb8
   167a0:	str	r2, [sp, #4]
   167a4:	ldr	r2, [sp, #28]
   167a8:	str	ip, [sp, #12]
   167ac:	ldr	ip, [sp, #192]	; 0xc0
   167b0:	str	r0, [sp, #8]
   167b4:	mov	r0, fp
   167b8:	str	ip, [sp, #16]
   167bc:	bl	14e70 <__assert_fail@plt+0x39a8>
   167c0:	mov	r4, r0
   167c4:	b	158ec <__assert_fail@plt+0x4424>
   167c8:	mov	r6, r3
   167cc:	str	r3, [sp, #40]	; 0x28
   167d0:	b	1585c <__assert_fail@plt+0x4394>
   167d4:	mov	r3, #2
   167d8:	str	r3, [sp, #176]	; 0xb0
   167dc:	b	1589c <__assert_fail@plt+0x43d4>
   167e0:	ldr	r2, [sp, #60]	; 0x3c
   167e4:	b	162fc <__assert_fail@plt+0x4e34>
   167e8:	mov	r3, #5
   167ec:	mov	fp, r9
   167f0:	str	r3, [sp, #176]	; 0xb0
   167f4:	b	158b0 <__assert_fail@plt+0x43e8>
   167f8:	mov	r1, #1
   167fc:	mov	r9, #0
   16800:	mov	r3, r9
   16804:	mov	r2, r9
   16808:	str	r1, [sp, #32]
   1680c:	str	sl, [sp, #84]	; 0x54
   16810:	b	15638 <__assert_fail@plt+0x4170>
   16814:	mov	r3, #0
   16818:	mov	r2, #1
   1681c:	mov	r9, r3
   16820:	mov	r4, r3
   16824:	str	r2, [sp, #32]
   16828:	strd	r2, [sp, #44]	; 0x2c
   1682c:	strd	r2, [sp, #56]	; 0x38
   16830:	str	r3, [sp, #80]	; 0x50
   16834:	str	r3, [sp, #84]	; 0x54
   16838:	str	r3, [sp, #88]	; 0x58
   1683c:	movw	r3, #52768	; 0xce20
   16840:	movt	r3, #2
   16844:	str	r2, [sp, #52]	; 0x34
   16848:	str	r2, [sp, #64]	; 0x40
   1684c:	str	r2, [sp, #68]	; 0x44
   16850:	str	r3, [sp, #72]	; 0x48
   16854:	b	14f94 <__assert_fail@plt+0x3acc>
   16858:	bl	114bc <abort@plt>
   1685c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16860:	mov	r4, r0
   16864:	mov	r5, r3
   16868:	strd	r6, [sp, #8]
   1686c:	movw	r7, #57676	; 0xe14c
   16870:	movt	r7, #3
   16874:	strd	r8, [sp, #16]
   16878:	strd	sl, [sp, #24]
   1687c:	mov	sl, r1
   16880:	mov	fp, r2
   16884:	str	lr, [sp, #32]
   16888:	sub	sp, sp, #60	; 0x3c
   1688c:	bl	113c0 <__errno_location@plt>
   16890:	mov	r8, r0
   16894:	cmn	r4, #-2147483647	; 0x80000001
   16898:	ldr	r6, [r7]
   1689c:	movne	r0, #0
   168a0:	moveq	r0, #1
   168a4:	ldr	r3, [r8]
   168a8:	orrs	r0, r0, r4, lsr #31
   168ac:	str	r3, [sp, #28]
   168b0:	bne	16a40 <__assert_fail@plt+0x5578>
   168b4:	ldr	r3, [r7, #4]
   168b8:	cmp	r3, r4
   168bc:	bgt	1691c <__assert_fail@plt+0x5454>
   168c0:	add	r1, r7, #8
   168c4:	sub	r2, r4, r3
   168c8:	str	r3, [sp, #52]	; 0x34
   168cc:	cmp	r6, r1
   168d0:	add	r2, r2, #1
   168d4:	beq	16a18 <__assert_fail@plt+0x5550>
   168d8:	mov	r1, #8
   168dc:	mov	r0, r6
   168e0:	mvn	r3, #-2147483648	; 0x80000000
   168e4:	str	r1, [sp]
   168e8:	add	r1, sp, #52	; 0x34
   168ec:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   168f0:	mov	r6, r0
   168f4:	str	r0, [r7]
   168f8:	ldr	r0, [r7, #4]
   168fc:	mov	r1, #0
   16900:	ldr	r2, [sp, #52]	; 0x34
   16904:	sub	r2, r2, r0
   16908:	add	r0, r6, r0, lsl #3
   1690c:	lsl	r2, r2, #3
   16910:	bl	113e4 <memset@plt>
   16914:	ldr	r3, [sp, #52]	; 0x34
   16918:	str	r3, [r7, #4]
   1691c:	ldr	r1, [r5, #4]
   16920:	add	r0, r6, r4, lsl #3
   16924:	add	ip, r5, #8
   16928:	mov	r3, fp
   1692c:	mov	r2, sl
   16930:	ldr	r7, [r0, #4]
   16934:	str	r0, [sp, #36]	; 0x24
   16938:	str	ip, [sp, #40]	; 0x28
   1693c:	orr	r0, r1, #1
   16940:	ldr	r9, [r6, r4, lsl #3]
   16944:	str	ip, [sp, #8]
   16948:	ldr	lr, [r5, #44]	; 0x2c
   1694c:	str	r0, [sp, #4]
   16950:	ldr	ip, [r5]
   16954:	mov	r1, r9
   16958:	str	ip, [sp, #32]
   1695c:	ldr	ip, [r5, #40]	; 0x28
   16960:	str	ip, [sp, #12]
   16964:	ldr	ip, [sp, #32]
   16968:	str	lr, [sp, #16]
   1696c:	str	r0, [sp, #44]	; 0x2c
   16970:	mov	r0, r7
   16974:	str	ip, [sp]
   16978:	bl	14e70 <__assert_fail@plt+0x39a8>
   1697c:	cmp	r9, r0
   16980:	bhi	169f0 <__assert_fail@plt+0x5528>
   16984:	add	r9, r0, #1
   16988:	movw	r3, #57792	; 0xe1c0
   1698c:	movt	r3, #3
   16990:	cmp	r7, r3
   16994:	str	r9, [r6, r4, lsl #3]
   16998:	beq	169a4 <__assert_fail@plt+0x54dc>
   1699c:	mov	r0, r7
   169a0:	bl	14484 <__assert_fail@plt+0x2fbc>
   169a4:	mov	r0, r9
   169a8:	bl	2b4ec <__assert_fail@plt+0x1a024>
   169ac:	ldr	ip, [r5]
   169b0:	mov	r3, fp
   169b4:	mov	r2, sl
   169b8:	mov	r1, r9
   169bc:	mov	r7, r0
   169c0:	ldr	lr, [sp, #36]	; 0x24
   169c4:	ldr	r4, [r5, #40]	; 0x28
   169c8:	str	r0, [lr, #4]
   169cc:	ldr	lr, [r5, #44]	; 0x2c
   169d0:	str	ip, [sp]
   169d4:	ldr	ip, [sp, #44]	; 0x2c
   169d8:	str	ip, [sp, #4]
   169dc:	ldr	ip, [sp, #40]	; 0x28
   169e0:	str	r4, [sp, #12]
   169e4:	str	lr, [sp, #16]
   169e8:	str	ip, [sp, #8]
   169ec:	bl	14e70 <__assert_fail@plt+0x39a8>
   169f0:	ldr	r3, [sp, #28]
   169f4:	mov	r0, r7
   169f8:	str	r3, [r8]
   169fc:	add	sp, sp, #60	; 0x3c
   16a00:	ldrd	r4, [sp]
   16a04:	ldrd	r6, [sp, #8]
   16a08:	ldrd	r8, [sp, #16]
   16a0c:	ldrd	sl, [sp, #24]
   16a10:	add	sp, sp, #32
   16a14:	pop	{pc}		; (ldr pc, [sp], #4)
   16a18:	mov	r1, #8
   16a1c:	mvn	r3, #-2147483648	; 0x80000000
   16a20:	str	r1, [sp]
   16a24:	add	r1, sp, #52	; 0x34
   16a28:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   16a2c:	ldrd	r2, [r7, #8]
   16a30:	mov	r6, r0
   16a34:	str	r0, [r7]
   16a38:	strd	r2, [r0]
   16a3c:	b	168f8 <__assert_fail@plt+0x5430>
   16a40:	bl	114bc <abort@plt>
   16a44:	strd	r4, [sp, #-16]!
   16a48:	mov	r5, r0
   16a4c:	str	r6, [sp, #8]
   16a50:	str	lr, [sp, #12]
   16a54:	bl	113c0 <__errno_location@plt>
   16a58:	mov	r4, r0
   16a5c:	cmp	r5, #0
   16a60:	ldr	r0, [pc, #32]	; 16a88 <__assert_fail@plt+0x55c0>
   16a64:	mov	r1, #48	; 0x30
   16a68:	movne	r0, r5
   16a6c:	ldr	r6, [r4]
   16a70:	bl	2b930 <__assert_fail@plt+0x1a468>
   16a74:	str	r6, [r4]
   16a78:	ldrd	r4, [sp]
   16a7c:	ldr	r6, [sp, #8]
   16a80:	add	sp, sp, #12
   16a84:	pop	{pc}		; (ldr pc, [sp], #4)
   16a88:	andeq	lr, r3, r0, asr #5
   16a8c:	ldr	r3, [pc, #12]	; 16aa0 <__assert_fail@plt+0x55d8>
   16a90:	cmp	r0, #0
   16a94:	moveq	r0, r3
   16a98:	ldr	r0, [r0]
   16a9c:	bx	lr
   16aa0:	andeq	lr, r3, r0, asr #5
   16aa4:	ldr	r3, [pc, #12]	; 16ab8 <__assert_fail@plt+0x55f0>
   16aa8:	cmp	r0, #0
   16aac:	moveq	r0, r3
   16ab0:	str	r1, [r0]
   16ab4:	bx	lr
   16ab8:	andeq	lr, r3, r0, asr #5
   16abc:	ldr	r3, [pc, #52]	; 16af8 <__assert_fail@plt+0x5630>
   16ac0:	cmp	r0, #0
   16ac4:	push	{lr}		; (str lr, [sp, #-4]!)
   16ac8:	lsr	lr, r1, #5
   16acc:	and	r1, r1, #31
   16ad0:	moveq	r0, r3
   16ad4:	add	r3, r0, #8
   16ad8:	ldr	ip, [r3, lr, lsl #2]
   16adc:	lsr	r0, ip, r1
   16ae0:	eor	r2, r2, r0
   16ae4:	and	r0, r0, #1
   16ae8:	and	r2, r2, #1
   16aec:	eor	r1, ip, r2, lsl r1
   16af0:	str	r1, [r3, lr, lsl #2]
   16af4:	pop	{pc}		; (ldr pc, [sp], #4)
   16af8:	andeq	lr, r3, r0, asr #5
   16afc:	ldr	r3, [pc, #16]	; 16b14 <__assert_fail@plt+0x564c>
   16b00:	cmp	r0, #0
   16b04:	movne	r3, r0
   16b08:	ldr	r0, [r3, #4]
   16b0c:	str	r1, [r3, #4]
   16b10:	bx	lr
   16b14:	andeq	lr, r3, r0, asr #5
   16b18:	ldr	r3, [pc, #48]	; 16b50 <__assert_fail@plt+0x5688>
   16b1c:	cmp	r0, #0
   16b20:	mov	ip, #10
   16b24:	moveq	r0, r3
   16b28:	cmp	r2, #0
   16b2c:	cmpne	r1, #0
   16b30:	str	ip, [r0]
   16b34:	beq	16b44 <__assert_fail@plt+0x567c>
   16b38:	str	r1, [r0, #40]	; 0x28
   16b3c:	str	r2, [r0, #44]	; 0x2c
   16b40:	bx	lr
   16b44:	str	r4, [sp, #-8]!
   16b48:	str	lr, [sp, #4]
   16b4c:	bl	114bc <abort@plt>
   16b50:	andeq	lr, r3, r0, asr #5
   16b54:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16b58:	strd	r6, [sp, #8]
   16b5c:	mov	r7, r0
   16b60:	mov	r6, r1
   16b64:	strd	r8, [sp, #16]
   16b68:	mov	r8, r2
   16b6c:	mov	r9, r3
   16b70:	str	lr, [sp, #24]
   16b74:	sub	sp, sp, #28
   16b78:	ldr	r4, [sp, #56]	; 0x38
   16b7c:	ldr	ip, [pc, #104]	; 16bec <__assert_fail@plt+0x5724>
   16b80:	cmp	r4, #0
   16b84:	moveq	r4, ip
   16b88:	bl	113c0 <__errno_location@plt>
   16b8c:	ldr	ip, [r4, #44]	; 0x2c
   16b90:	mov	r5, r0
   16b94:	mov	r1, r6
   16b98:	add	lr, r4, #8
   16b9c:	mov	r3, r9
   16ba0:	ldr	r6, [r5]
   16ba4:	mov	r2, r8
   16ba8:	mov	r0, r7
   16bac:	str	ip, [sp, #16]
   16bb0:	ldr	ip, [r4, #40]	; 0x28
   16bb4:	str	lr, [sp, #8]
   16bb8:	str	ip, [sp, #12]
   16bbc:	ldr	ip, [r4, #4]
   16bc0:	str	ip, [sp, #4]
   16bc4:	ldr	ip, [r4]
   16bc8:	str	ip, [sp]
   16bcc:	bl	14e70 <__assert_fail@plt+0x39a8>
   16bd0:	str	r6, [r5]
   16bd4:	add	sp, sp, #28
   16bd8:	ldrd	r4, [sp]
   16bdc:	ldrd	r6, [sp, #8]
   16be0:	ldrd	r8, [sp, #16]
   16be4:	add	sp, sp, #24
   16be8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bec:	andeq	lr, r3, r0, asr #5
   16bf0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16bf4:	cmp	r2, #0
   16bf8:	ldr	r4, [pc, #192]	; 16cc0 <__assert_fail@plt+0x57f8>
   16bfc:	movne	r4, r2
   16c00:	strd	r6, [sp, #8]
   16c04:	strd	r8, [sp, #16]
   16c08:	mov	r9, r1
   16c0c:	mov	r8, r0
   16c10:	strd	sl, [sp, #24]
   16c14:	str	lr, [sp, #32]
   16c18:	sub	sp, sp, #36	; 0x24
   16c1c:	bl	113c0 <__errno_location@plt>
   16c20:	ldr	r5, [r4, #4]
   16c24:	mov	r6, r0
   16c28:	add	r7, r4, #8
   16c2c:	mov	r1, #0
   16c30:	mov	r3, r9
   16c34:	ldr	ip, [r4, #44]	; 0x2c
   16c38:	mov	r2, r8
   16c3c:	mov	r0, r1
   16c40:	ldr	sl, [r6]
   16c44:	orr	r5, r5, #1
   16c48:	str	ip, [sp, #16]
   16c4c:	ldr	ip, [r4, #40]	; 0x28
   16c50:	stmib	sp, {r5, r7, ip}
   16c54:	ldr	ip, [r4]
   16c58:	str	ip, [sp]
   16c5c:	bl	14e70 <__assert_fail@plt+0x39a8>
   16c60:	add	r1, r0, #1
   16c64:	mov	r0, r1
   16c68:	str	r1, [sp, #28]
   16c6c:	bl	2b4ec <__assert_fail@plt+0x1a024>
   16c70:	ldr	ip, [r4, #44]	; 0x2c
   16c74:	mov	fp, r0
   16c78:	mov	r3, r9
   16c7c:	mov	r2, r8
   16c80:	ldr	r1, [sp, #28]
   16c84:	str	ip, [sp, #16]
   16c88:	ldr	ip, [r4, #40]	; 0x28
   16c8c:	stmib	sp, {r5, r7, ip}
   16c90:	ldr	ip, [r4]
   16c94:	str	ip, [sp]
   16c98:	bl	14e70 <__assert_fail@plt+0x39a8>
   16c9c:	mov	r0, fp
   16ca0:	str	sl, [r6]
   16ca4:	add	sp, sp, #36	; 0x24
   16ca8:	ldrd	r4, [sp]
   16cac:	ldrd	r6, [sp, #8]
   16cb0:	ldrd	r8, [sp, #16]
   16cb4:	ldrd	sl, [sp, #24]
   16cb8:	add	sp, sp, #32
   16cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16cc0:	andeq	lr, r3, r0, asr #5
   16cc4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16cc8:	cmp	r3, #0
   16ccc:	ldr	r4, [pc, #220]	; 16db0 <__assert_fail@plt+0x58e8>
   16cd0:	movne	r4, r3
   16cd4:	strd	r6, [sp, #8]
   16cd8:	mov	r6, r2
   16cdc:	strd	r8, [sp, #16]
   16ce0:	mov	r9, r0
   16ce4:	strd	sl, [sp, #24]
   16ce8:	mov	sl, r1
   16cec:	str	lr, [sp, #32]
   16cf0:	sub	sp, sp, #44	; 0x2c
   16cf4:	bl	113c0 <__errno_location@plt>
   16cf8:	ldr	r5, [r4, #4]
   16cfc:	mov	r7, r0
   16d00:	mov	r1, #0
   16d04:	add	r8, r4, #8
   16d08:	mov	r3, sl
   16d0c:	ldr	ip, [r4, #44]	; 0x2c
   16d10:	mov	r2, r9
   16d14:	mov	r0, r1
   16d18:	ldr	lr, [r7]
   16d1c:	cmp	r6, r1
   16d20:	orreq	r5, r5, #1
   16d24:	str	ip, [sp, #16]
   16d28:	ldr	ip, [r4, #40]	; 0x28
   16d2c:	stmib	sp, {r5, r8, ip}
   16d30:	ldr	ip, [r4]
   16d34:	str	lr, [sp, #28]
   16d38:	str	ip, [sp]
   16d3c:	bl	14e70 <__assert_fail@plt+0x39a8>
   16d40:	add	r1, r0, #1
   16d44:	mov	fp, r0
   16d48:	mov	r0, r1
   16d4c:	str	r1, [sp, #36]	; 0x24
   16d50:	bl	2b4ec <__assert_fail@plt+0x1a024>
   16d54:	ldr	ip, [r4, #44]	; 0x2c
   16d58:	mov	r3, sl
   16d5c:	mov	r2, r9
   16d60:	ldr	r1, [sp, #36]	; 0x24
   16d64:	str	ip, [sp, #16]
   16d68:	ldr	ip, [r4, #40]	; 0x28
   16d6c:	str	r0, [sp, #32]
   16d70:	stmib	sp, {r5, r8, ip}
   16d74:	ldr	ip, [r4]
   16d78:	str	ip, [sp]
   16d7c:	bl	14e70 <__assert_fail@plt+0x39a8>
   16d80:	ldr	lr, [sp, #28]
   16d84:	cmp	r6, #0
   16d88:	ldr	r0, [sp, #32]
   16d8c:	str	lr, [r7]
   16d90:	strne	fp, [r6]
   16d94:	add	sp, sp, #44	; 0x2c
   16d98:	ldrd	r4, [sp]
   16d9c:	ldrd	r6, [sp, #8]
   16da0:	ldrd	r8, [sp, #16]
   16da4:	ldrd	sl, [sp, #24]
   16da8:	add	sp, sp, #32
   16dac:	pop	{pc}		; (ldr pc, [sp], #4)
   16db0:	andeq	lr, r3, r0, asr #5
   16db4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16db8:	movw	r5, #57676	; 0xe14c
   16dbc:	movt	r5, #3
   16dc0:	ldr	r3, [r5, #4]
   16dc4:	strd	r6, [sp, #8]
   16dc8:	str	r8, [sp, #16]
   16dcc:	str	lr, [sp, #20]
   16dd0:	ldr	r7, [r5]
   16dd4:	cmp	r3, #1
   16dd8:	ble	16dfc <__assert_fail@plt+0x5934>
   16ddc:	mov	r4, #1
   16de0:	add	r6, r7, #4
   16de4:	ldr	r0, [r6, r4, lsl #3]
   16de8:	add	r4, r4, #1
   16dec:	bl	14484 <__assert_fail@plt+0x2fbc>
   16df0:	ldr	r3, [r5, #4]
   16df4:	cmp	r3, r4
   16df8:	bgt	16de4 <__assert_fail@plt+0x591c>
   16dfc:	ldr	r0, [r7, #4]
   16e00:	movw	r4, #57792	; 0xe1c0
   16e04:	movt	r4, #3
   16e08:	cmp	r0, r4
   16e0c:	beq	16e20 <__assert_fail@plt+0x5958>
   16e10:	bl	14484 <__assert_fail@plt+0x2fbc>
   16e14:	mov	r3, #256	; 0x100
   16e18:	str	r3, [r5, #8]
   16e1c:	str	r4, [r5, #12]
   16e20:	ldr	r4, [pc, #44]	; 16e54 <__assert_fail@plt+0x598c>
   16e24:	cmp	r7, r4
   16e28:	beq	16e38 <__assert_fail@plt+0x5970>
   16e2c:	mov	r0, r7
   16e30:	bl	14484 <__assert_fail@plt+0x2fbc>
   16e34:	str	r4, [r5]
   16e38:	mov	r3, #1
   16e3c:	ldrd	r6, [sp, #8]
   16e40:	str	r3, [r5, #4]
   16e44:	ldrd	r4, [sp]
   16e48:	ldr	r8, [sp, #16]
   16e4c:	add	sp, sp, #20
   16e50:	pop	{pc}		; (ldr pc, [sp], #4)
   16e54:	andeq	lr, r3, r4, asr r1
   16e58:	ldr	r3, [pc, #4]	; 16e64 <__assert_fail@plt+0x599c>
   16e5c:	mvn	r2, #0
   16e60:	b	1685c <__assert_fail@plt+0x5394>
   16e64:	andeq	lr, r3, r0, asr #5
   16e68:	ldr	r3, [pc]	; 16e70 <__assert_fail@plt+0x59a8>
   16e6c:	b	1685c <__assert_fail@plt+0x5394>
   16e70:	andeq	lr, r3, r0, asr #5
   16e74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e78:	movw	r4, #57676	; 0xe14c
   16e7c:	movt	r4, #3
   16e80:	strd	r6, [sp, #8]
   16e84:	strd	r8, [sp, #16]
   16e88:	strd	sl, [sp, #24]
   16e8c:	mov	sl, r0
   16e90:	str	lr, [sp, #32]
   16e94:	sub	sp, sp, #44	; 0x2c
   16e98:	bl	113c0 <__errno_location@plt>
   16e9c:	ldr	r3, [r0]
   16ea0:	mov	r8, r0
   16ea4:	ldr	r2, [r4, #4]
   16ea8:	ldr	r5, [r4]
   16eac:	str	r3, [sp, #28]
   16eb0:	cmp	r2, #0
   16eb4:	bgt	16f10 <__assert_fail@plt+0x5a48>
   16eb8:	add	r3, r4, #8
   16ebc:	str	r2, [sp, #36]	; 0x24
   16ec0:	rsb	r2, r2, #1
   16ec4:	cmp	r5, r3
   16ec8:	beq	16fdc <__assert_fail@plt+0x5b14>
   16ecc:	mov	r1, #8
   16ed0:	mov	r0, r5
   16ed4:	mvn	r3, #-2147483648	; 0x80000000
   16ed8:	str	r1, [sp]
   16edc:	add	r1, sp, #36	; 0x24
   16ee0:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   16ee4:	mov	r5, r0
   16ee8:	str	r0, [r4]
   16eec:	ldr	r0, [r4, #4]
   16ef0:	mov	r1, #0
   16ef4:	ldr	r2, [sp, #36]	; 0x24
   16ef8:	sub	r2, r2, r0
   16efc:	add	r0, r5, r0, lsl #3
   16f00:	lsl	r2, r2, #3
   16f04:	bl	113e4 <memset@plt>
   16f08:	ldr	r3, [sp, #36]	; 0x24
   16f0c:	str	r3, [r4, #4]
   16f10:	movw	r4, #57792	; 0xe1c0
   16f14:	movt	r4, #3
   16f18:	ldr	r9, [r5]
   16f1c:	add	fp, r4, #264	; 0x108
   16f20:	mvn	r3, #0
   16f24:	ldr	r7, [r4, #260]	; 0x104
   16f28:	mov	r2, sl
   16f2c:	ldr	r6, [r5, #4]
   16f30:	str	fp, [sp, #8]
   16f34:	mov	r1, r9
   16f38:	ldr	ip, [r4, #256]	; 0x100
   16f3c:	orr	r7, r7, #1
   16f40:	ldr	lr, [r4, #300]	; 0x12c
   16f44:	mov	r0, r6
   16f48:	str	ip, [sp]
   16f4c:	str	r7, [sp, #4]
   16f50:	str	lr, [sp, #16]
   16f54:	ldr	ip, [r4, #296]	; 0x128
   16f58:	str	ip, [sp, #12]
   16f5c:	bl	14e70 <__assert_fail@plt+0x39a8>
   16f60:	cmp	r9, r0
   16f64:	bhi	16fb4 <__assert_fail@plt+0x5aec>
   16f68:	add	r9, r0, #1
   16f6c:	cmp	r6, r4
   16f70:	str	r9, [r5]
   16f74:	beq	16f80 <__assert_fail@plt+0x5ab8>
   16f78:	mov	r0, r6
   16f7c:	bl	14484 <__assert_fail@plt+0x2fbc>
   16f80:	mov	r0, r9
   16f84:	bl	2b4ec <__assert_fail@plt+0x1a024>
   16f88:	ldr	r3, [r4, #256]	; 0x100
   16f8c:	mov	r2, sl
   16f90:	mov	r1, r9
   16f94:	mov	r6, r0
   16f98:	ldr	lr, [r4, #296]	; 0x128
   16f9c:	ldr	ip, [r4, #300]	; 0x12c
   16fa0:	str	r0, [r5, #4]
   16fa4:	stm	sp, {r3, r7, fp, lr}
   16fa8:	mvn	r3, #0
   16fac:	str	ip, [sp, #16]
   16fb0:	bl	14e70 <__assert_fail@plt+0x39a8>
   16fb4:	ldr	r3, [sp, #28]
   16fb8:	mov	r0, r6
   16fbc:	str	r3, [r8]
   16fc0:	add	sp, sp, #44	; 0x2c
   16fc4:	ldrd	r4, [sp]
   16fc8:	ldrd	r6, [sp, #8]
   16fcc:	ldrd	r8, [sp, #16]
   16fd0:	ldrd	sl, [sp, #24]
   16fd4:	add	sp, sp, #32
   16fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fdc:	mov	r0, #8
   16fe0:	mvn	r3, #-2147483648	; 0x80000000
   16fe4:	add	r1, sp, #36	; 0x24
   16fe8:	str	r0, [sp]
   16fec:	mov	r0, #0
   16ff0:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   16ff4:	ldrd	r2, [r4, #8]
   16ff8:	mov	r5, r0
   16ffc:	str	r0, [r4]
   17000:	strd	r2, [r0]
   17004:	b	16eec <__assert_fail@plt+0x5a24>
   17008:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1700c:	movw	r4, #57676	; 0xe14c
   17010:	movt	r4, #3
   17014:	strd	r6, [sp, #8]
   17018:	strd	r8, [sp, #16]
   1701c:	strd	sl, [sp, #24]
   17020:	mov	sl, r0
   17024:	mov	fp, r1
   17028:	str	lr, [sp, #32]
   1702c:	sub	sp, sp, #44	; 0x2c
   17030:	bl	113c0 <__errno_location@plt>
   17034:	ldr	r3, [r0]
   17038:	mov	r8, r0
   1703c:	ldr	r2, [r4, #4]
   17040:	ldr	r5, [r4]
   17044:	str	r3, [sp, #28]
   17048:	cmp	r2, #0
   1704c:	bgt	170a8 <__assert_fail@plt+0x5be0>
   17050:	add	r3, r4, #8
   17054:	str	r2, [sp, #36]	; 0x24
   17058:	rsb	r2, r2, #1
   1705c:	cmp	r5, r3
   17060:	beq	17184 <__assert_fail@plt+0x5cbc>
   17064:	mov	r1, #8
   17068:	mov	r0, r5
   1706c:	mvn	r3, #-2147483648	; 0x80000000
   17070:	str	r1, [sp]
   17074:	add	r1, sp, #36	; 0x24
   17078:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   1707c:	mov	r5, r0
   17080:	str	r0, [r4]
   17084:	ldr	r0, [r4, #4]
   17088:	mov	r1, #0
   1708c:	ldr	r2, [sp, #36]	; 0x24
   17090:	sub	r2, r2, r0
   17094:	add	r0, r5, r0, lsl #3
   17098:	lsl	r2, r2, #3
   1709c:	bl	113e4 <memset@plt>
   170a0:	ldr	r3, [sp, #36]	; 0x24
   170a4:	str	r3, [r4, #4]
   170a8:	movw	r4, #57792	; 0xe1c0
   170ac:	movt	r4, #3
   170b0:	ldr	r9, [r5]
   170b4:	add	r0, r4, #264	; 0x108
   170b8:	mov	r3, fp
   170bc:	ldr	r7, [r4, #260]	; 0x104
   170c0:	mov	r2, sl
   170c4:	ldr	r6, [r5, #4]
   170c8:	str	r0, [sp, #8]
   170cc:	mov	r1, r9
   170d0:	ldr	ip, [r4, #256]	; 0x100
   170d4:	orr	r7, r7, #1
   170d8:	ldr	lr, [r4, #300]	; 0x12c
   170dc:	mov	r0, r6
   170e0:	str	ip, [sp]
   170e4:	str	r7, [sp, #4]
   170e8:	str	lr, [sp, #16]
   170ec:	ldr	ip, [r4, #296]	; 0x128
   170f0:	str	ip, [sp, #12]
   170f4:	bl	14e70 <__assert_fail@plt+0x39a8>
   170f8:	cmp	r9, r0
   170fc:	bhi	1715c <__assert_fail@plt+0x5c94>
   17100:	add	r9, r0, #1
   17104:	cmp	r6, r4
   17108:	str	r9, [r5]
   1710c:	beq	17118 <__assert_fail@plt+0x5c50>
   17110:	mov	r0, r6
   17114:	bl	14484 <__assert_fail@plt+0x2fbc>
   17118:	mov	r0, r9
   1711c:	bl	2b4ec <__assert_fail@plt+0x1a024>
   17120:	ldr	ip, [r4, #256]	; 0x100
   17124:	mov	r1, r9
   17128:	mov	r3, fp
   1712c:	mov	r2, sl
   17130:	mov	r6, r0
   17134:	ldr	r9, [r4, #296]	; 0x128
   17138:	ldr	lr, [r4, #300]	; 0x12c
   1713c:	str	r0, [r5, #4]
   17140:	str	ip, [sp]
   17144:	ldr	ip, [pc, #100]	; 171b0 <__assert_fail@plt+0x5ce8>
   17148:	str	r7, [sp, #4]
   1714c:	str	ip, [sp, #8]
   17150:	str	r9, [sp, #12]
   17154:	str	lr, [sp, #16]
   17158:	bl	14e70 <__assert_fail@plt+0x39a8>
   1715c:	ldr	r3, [sp, #28]
   17160:	mov	r0, r6
   17164:	str	r3, [r8]
   17168:	add	sp, sp, #44	; 0x2c
   1716c:	ldrd	r4, [sp]
   17170:	ldrd	r6, [sp, #8]
   17174:	ldrd	r8, [sp, #16]
   17178:	ldrd	sl, [sp, #24]
   1717c:	add	sp, sp, #32
   17180:	pop	{pc}		; (ldr pc, [sp], #4)
   17184:	mov	r0, #8
   17188:	mvn	r3, #-2147483648	; 0x80000000
   1718c:	add	r1, sp, #36	; 0x24
   17190:	str	r0, [sp]
   17194:	mov	r0, #0
   17198:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   1719c:	ldrd	r2, [r4, #8]
   171a0:	mov	r5, r0
   171a4:	str	r0, [r4]
   171a8:	strd	r2, [r0]
   171ac:	b	17084 <__assert_fail@plt+0x5bbc>
   171b0:	andeq	lr, r3, r8, asr #5
   171b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   171b8:	mov	r4, #0
   171bc:	mov	r5, #0
   171c0:	strd	r6, [sp, #8]
   171c4:	cmp	r1, #10
   171c8:	str	lr, [sp, #16]
   171cc:	sub	sp, sp, #100	; 0x64
   171d0:	strd	r4, [sp, #48]	; 0x30
   171d4:	beq	1721c <__assert_fail@plt+0x5d54>
   171d8:	mov	r3, sp
   171dc:	strd	r4, [sp, #8]
   171e0:	str	r1, [sp, #48]	; 0x30
   171e4:	mov	r1, r2
   171e8:	mvn	r2, #0
   171ec:	ldrd	r6, [sp, #48]	; 0x30
   171f0:	strd	r6, [sp]
   171f4:	strd	r4, [sp, #16]
   171f8:	strd	r4, [sp, #24]
   171fc:	strd	r4, [sp, #32]
   17200:	strd	r4, [sp, #40]	; 0x28
   17204:	bl	1685c <__assert_fail@plt+0x5394>
   17208:	add	sp, sp, #100	; 0x64
   1720c:	ldrd	r4, [sp]
   17210:	ldrd	r6, [sp, #8]
   17214:	add	sp, sp, #16
   17218:	pop	{pc}		; (ldr pc, [sp], #4)
   1721c:	bl	114bc <abort@plt>
   17220:	strd	r4, [sp, #-20]!	; 0xffffffec
   17224:	mov	r4, #0
   17228:	mov	r5, #0
   1722c:	strd	r6, [sp, #8]
   17230:	cmp	r1, #10
   17234:	str	lr, [sp, #16]
   17238:	sub	sp, sp, #100	; 0x64
   1723c:	strd	r4, [sp, #48]	; 0x30
   17240:	beq	1728c <__assert_fail@plt+0x5dc4>
   17244:	mov	ip, r2
   17248:	mov	r2, r3
   1724c:	strd	r4, [sp, #8]
   17250:	str	r1, [sp, #48]	; 0x30
   17254:	mov	r3, sp
   17258:	mov	r1, ip
   1725c:	ldrd	r6, [sp, #48]	; 0x30
   17260:	strd	r6, [sp]
   17264:	strd	r4, [sp, #16]
   17268:	strd	r4, [sp, #24]
   1726c:	strd	r4, [sp, #32]
   17270:	strd	r4, [sp, #40]	; 0x28
   17274:	bl	1685c <__assert_fail@plt+0x5394>
   17278:	add	sp, sp, #100	; 0x64
   1727c:	ldrd	r4, [sp]
   17280:	ldrd	r6, [sp, #8]
   17284:	add	sp, sp, #16
   17288:	pop	{pc}		; (ldr pc, [sp], #4)
   1728c:	bl	114bc <abort@plt>
   17290:	mov	r2, #0
   17294:	mov	r3, #0
   17298:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1729c:	strd	r6, [sp, #8]
   172a0:	cmp	r0, #10
   172a4:	strd	r8, [sp, #16]
   172a8:	strd	sl, [sp, #24]
   172ac:	str	lr, [sp, #32]
   172b0:	sub	sp, sp, #124	; 0x7c
   172b4:	strd	r2, [sp, #72]	; 0x48
   172b8:	strd	r2, [sp, #80]	; 0x50
   172bc:	strd	r2, [sp, #88]	; 0x58
   172c0:	strd	r2, [sp, #96]	; 0x60
   172c4:	strd	r2, [sp, #104]	; 0x68
   172c8:	strd	r2, [sp, #112]	; 0x70
   172cc:	beq	17470 <__assert_fail@plt+0x5fa8>
   172d0:	mov	r6, r1
   172d4:	movw	r4, #57676	; 0xe14c
   172d8:	movt	r4, #3
   172dc:	str	r0, [sp, #72]	; 0x48
   172e0:	ldrd	r0, [sp, #72]	; 0x48
   172e4:	strd	r0, [sp, #24]
   172e8:	strd	r2, [sp, #32]
   172ec:	strd	r2, [sp, #40]	; 0x28
   172f0:	strd	r2, [sp, #48]	; 0x30
   172f4:	strd	r2, [sp, #56]	; 0x38
   172f8:	strd	r2, [sp, #64]	; 0x40
   172fc:	bl	113c0 <__errno_location@plt>
   17300:	mov	r8, r0
   17304:	ldr	r5, [r4]
   17308:	ldr	r2, [r4, #4]
   1730c:	ldr	r9, [r0]
   17310:	cmp	r2, #0
   17314:	bgt	17370 <__assert_fail@plt+0x5ea8>
   17318:	add	r3, r4, #8
   1731c:	str	r2, [sp, #72]	; 0x48
   17320:	rsb	r2, r2, #1
   17324:	cmp	r5, r3
   17328:	beq	17444 <__assert_fail@plt+0x5f7c>
   1732c:	mov	r3, #8
   17330:	mov	r0, r5
   17334:	add	r1, sp, #72	; 0x48
   17338:	str	r3, [sp]
   1733c:	mvn	r3, #-2147483648	; 0x80000000
   17340:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17344:	mov	r5, r0
   17348:	str	r0, [r4]
   1734c:	ldr	r0, [r4, #4]
   17350:	mov	r1, #0
   17354:	ldr	r2, [sp, #72]	; 0x48
   17358:	sub	r2, r2, r0
   1735c:	add	r0, r5, r0, lsl #3
   17360:	lsl	r2, r2, #3
   17364:	bl	113e4 <memset@plt>
   17368:	ldr	r3, [sp, #72]	; 0x48
   1736c:	str	r3, [r4, #4]
   17370:	ldr	sl, [r5]
   17374:	add	r0, sp, #32
   17378:	mvn	r3, #0
   1737c:	mov	r2, r6
   17380:	ldr	r7, [sp, #28]
   17384:	ldr	r4, [r5, #4]
   17388:	mov	r1, sl
   1738c:	str	r0, [sp, #8]
   17390:	ldr	lr, [sp, #24]
   17394:	orr	r7, r7, #1
   17398:	ldr	ip, [sp, #64]	; 0x40
   1739c:	mov	r0, r4
   173a0:	ldr	fp, [sp, #68]	; 0x44
   173a4:	str	lr, [sp]
   173a8:	str	r7, [sp, #4]
   173ac:	str	ip, [sp, #12]
   173b0:	str	fp, [sp, #16]
   173b4:	bl	14e70 <__assert_fail@plt+0x39a8>
   173b8:	cmp	sl, r0
   173bc:	bhi	17420 <__assert_fail@plt+0x5f58>
   173c0:	add	sl, r0, #1
   173c4:	movw	r3, #57792	; 0xe1c0
   173c8:	movt	r3, #3
   173cc:	cmp	r4, r3
   173d0:	str	sl, [r5]
   173d4:	beq	173e0 <__assert_fail@plt+0x5f18>
   173d8:	mov	r0, r4
   173dc:	bl	14484 <__assert_fail@plt+0x2fbc>
   173e0:	mov	r0, sl
   173e4:	bl	2b4ec <__assert_fail@plt+0x1a024>
   173e8:	ldr	r3, [sp, #24]
   173ec:	mov	r2, r6
   173f0:	mov	r1, sl
   173f4:	mov	r4, r0
   173f8:	ldr	lr, [sp, #64]	; 0x40
   173fc:	ldr	ip, [sp, #68]	; 0x44
   17400:	str	r0, [r5, #4]
   17404:	add	r5, sp, #32
   17408:	stm	sp, {r3, r7}
   1740c:	mvn	r3, #0
   17410:	str	r5, [sp, #8]
   17414:	str	lr, [sp, #12]
   17418:	str	ip, [sp, #16]
   1741c:	bl	14e70 <__assert_fail@plt+0x39a8>
   17420:	mov	r0, r4
   17424:	str	r9, [r8]
   17428:	add	sp, sp, #124	; 0x7c
   1742c:	ldrd	r4, [sp]
   17430:	ldrd	r6, [sp, #8]
   17434:	ldrd	r8, [sp, #16]
   17438:	ldrd	sl, [sp, #24]
   1743c:	add	sp, sp, #32
   17440:	pop	{pc}		; (ldr pc, [sp], #4)
   17444:	mov	r0, #8
   17448:	mvn	r3, #-2147483648	; 0x80000000
   1744c:	add	r1, sp, #72	; 0x48
   17450:	str	r0, [sp]
   17454:	mov	r0, #0
   17458:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   1745c:	ldrd	r2, [r4, #8]
   17460:	mov	r5, r0
   17464:	str	r0, [r4]
   17468:	strd	r2, [r0]
   1746c:	b	1734c <__assert_fail@plt+0x5e84>
   17470:	bl	114bc <abort@plt>
   17474:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17478:	cmp	r0, #10
   1747c:	strd	r6, [sp, #8]
   17480:	mov	r6, #0
   17484:	mov	r7, #0
   17488:	strd	r8, [sp, #16]
   1748c:	strd	sl, [sp, #24]
   17490:	str	lr, [sp, #32]
   17494:	sub	sp, sp, #124	; 0x7c
   17498:	strd	r6, [sp, #72]	; 0x48
   1749c:	strd	r6, [sp, #80]	; 0x50
   174a0:	strd	r6, [sp, #88]	; 0x58
   174a4:	strd	r6, [sp, #96]	; 0x60
   174a8:	strd	r6, [sp, #104]	; 0x68
   174ac:	strd	r6, [sp, #112]	; 0x70
   174b0:	beq	1765c <__assert_fail@plt+0x6194>
   174b4:	mov	sl, r2
   174b8:	movw	r5, #57676	; 0xe14c
   174bc:	movt	r5, #3
   174c0:	str	r0, [sp, #72]	; 0x48
   174c4:	mov	r9, r1
   174c8:	ldrd	r2, [sp, #72]	; 0x48
   174cc:	strd	r2, [sp, #24]
   174d0:	strd	r6, [sp, #32]
   174d4:	strd	r6, [sp, #40]	; 0x28
   174d8:	strd	r6, [sp, #48]	; 0x30
   174dc:	strd	r6, [sp, #56]	; 0x38
   174e0:	strd	r6, [sp, #64]	; 0x40
   174e4:	bl	113c0 <__errno_location@plt>
   174e8:	mov	r7, r0
   174ec:	ldr	r4, [r5]
   174f0:	ldr	r2, [r5, #4]
   174f4:	ldr	fp, [r0]
   174f8:	cmp	r2, #0
   174fc:	bgt	17558 <__assert_fail@plt+0x6090>
   17500:	add	r3, r5, #8
   17504:	str	r2, [sp, #72]	; 0x48
   17508:	rsb	r2, r2, #1
   1750c:	cmp	r4, r3
   17510:	beq	17630 <__assert_fail@plt+0x6168>
   17514:	mov	r3, #8
   17518:	mov	r0, r4
   1751c:	add	r1, sp, #72	; 0x48
   17520:	str	r3, [sp]
   17524:	mvn	r3, #-2147483648	; 0x80000000
   17528:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   1752c:	mov	r4, r0
   17530:	str	r0, [r5]
   17534:	ldr	r0, [r5, #4]
   17538:	mov	r1, #0
   1753c:	ldr	r2, [sp, #72]	; 0x48
   17540:	sub	r2, r2, r0
   17544:	add	r0, r4, r0, lsl #3
   17548:	lsl	r2, r2, #3
   1754c:	bl	113e4 <memset@plt>
   17550:	ldr	r3, [sp, #72]	; 0x48
   17554:	str	r3, [r5, #4]
   17558:	ldr	ip, [sp, #24]
   1755c:	add	r0, sp, #32
   17560:	mov	r3, sl
   17564:	mov	r2, r9
   17568:	ldr	r6, [sp, #28]
   1756c:	ldr	r8, [r4]
   17570:	ldr	r5, [r4, #4]
   17574:	str	ip, [sp]
   17578:	orr	r6, r6, #1
   1757c:	ldr	ip, [sp, #64]	; 0x40
   17580:	mov	r1, r8
   17584:	str	r6, [sp, #4]
   17588:	ldr	lr, [sp, #68]	; 0x44
   1758c:	str	r0, [sp, #8]
   17590:	mov	r0, r5
   17594:	str	ip, [sp, #12]
   17598:	str	lr, [sp, #16]
   1759c:	bl	14e70 <__assert_fail@plt+0x39a8>
   175a0:	cmp	r8, r0
   175a4:	bhi	1760c <__assert_fail@plt+0x6144>
   175a8:	add	r8, r0, #1
   175ac:	movw	r3, #57792	; 0xe1c0
   175b0:	movt	r3, #3
   175b4:	cmp	r5, r3
   175b8:	str	r8, [r4]
   175bc:	beq	175c8 <__assert_fail@plt+0x6100>
   175c0:	mov	r0, r5
   175c4:	bl	14484 <__assert_fail@plt+0x2fbc>
   175c8:	mov	r0, r8
   175cc:	bl	2b4ec <__assert_fail@plt+0x1a024>
   175d0:	ldr	lr, [sp, #24]
   175d4:	mov	r1, r8
   175d8:	mov	r3, sl
   175dc:	mov	r2, r9
   175e0:	mov	r5, r0
   175e4:	ldr	r8, [sp, #64]	; 0x40
   175e8:	ldr	ip, [sp, #68]	; 0x44
   175ec:	str	r0, [r4, #4]
   175f0:	str	lr, [sp]
   175f4:	add	lr, sp, #32
   175f8:	str	r6, [sp, #4]
   175fc:	str	lr, [sp, #8]
   17600:	str	r8, [sp, #12]
   17604:	str	ip, [sp, #16]
   17608:	bl	14e70 <__assert_fail@plt+0x39a8>
   1760c:	mov	r0, r5
   17610:	str	fp, [r7]
   17614:	add	sp, sp, #124	; 0x7c
   17618:	ldrd	r4, [sp]
   1761c:	ldrd	r6, [sp, #8]
   17620:	ldrd	r8, [sp, #16]
   17624:	ldrd	sl, [sp, #24]
   17628:	add	sp, sp, #32
   1762c:	pop	{pc}		; (ldr pc, [sp], #4)
   17630:	mov	r0, #8
   17634:	mvn	r3, #-2147483648	; 0x80000000
   17638:	add	r1, sp, #72	; 0x48
   1763c:	str	r0, [sp]
   17640:	mov	r0, #0
   17644:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17648:	ldrd	r2, [r5, #8]
   1764c:	mov	r4, r0
   17650:	str	r0, [r5]
   17654:	strd	r2, [r0]
   17658:	b	17534 <__assert_fail@plt+0x606c>
   1765c:	bl	114bc <abort@plt>
   17660:	ldr	r3, [pc, #492]	; 17854 <__assert_fail@plt+0x638c>
   17664:	lsr	ip, r2, #5
   17668:	and	r2, r2, #31
   1766c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17670:	movw	r5, #57676	; 0xe14c
   17674:	movt	r5, #3
   17678:	strd	r6, [sp, #8]
   1767c:	strd	r8, [sp, #16]
   17680:	strd	sl, [sp, #24]
   17684:	mov	sl, r0
   17688:	mov	fp, r1
   1768c:	ldrd	r0, [r3]
   17690:	str	lr, [sp, #32]
   17694:	sub	sp, sp, #92	; 0x5c
   17698:	ldrd	r8, [r3, #8]
   1769c:	add	r6, sp, #48	; 0x30
   176a0:	strd	r0, [sp, #40]	; 0x28
   176a4:	ldrd	r0, [r3, #16]
   176a8:	strd	r8, [sp, #48]	; 0x30
   176ac:	ldrd	r8, [r3, #24]
   176b0:	strd	r0, [sp, #56]	; 0x38
   176b4:	ldrd	r0, [r3, #32]
   176b8:	strd	r8, [sp, #64]	; 0x40
   176bc:	ldrd	r8, [r3, #40]	; 0x28
   176c0:	strd	r0, [sp, #72]	; 0x48
   176c4:	strd	r8, [sp, #80]	; 0x50
   176c8:	ldr	r3, [r6, ip, lsl #2]
   176cc:	mvn	r1, r3, lsr r2
   176d0:	and	r1, r1, #1
   176d4:	eor	r2, r3, r1, lsl r2
   176d8:	str	r2, [r6, ip, lsl #2]
   176dc:	bl	113c0 <__errno_location@plt>
   176e0:	ldr	r3, [r0]
   176e4:	mov	r8, r0
   176e8:	ldr	r2, [r5, #4]
   176ec:	ldr	r4, [r5]
   176f0:	str	r3, [sp, #28]
   176f4:	cmp	r2, #0
   176f8:	bgt	17754 <__assert_fail@plt+0x628c>
   176fc:	add	r3, r5, #8
   17700:	str	r2, [sp, #36]	; 0x24
   17704:	rsb	r2, r2, #1
   17708:	cmp	r4, r3
   1770c:	beq	17828 <__assert_fail@plt+0x6360>
   17710:	mov	r1, #8
   17714:	mov	r0, r4
   17718:	mvn	r3, #-2147483648	; 0x80000000
   1771c:	str	r1, [sp]
   17720:	add	r1, sp, #36	; 0x24
   17724:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17728:	mov	r4, r0
   1772c:	str	r0, [r5]
   17730:	ldr	r0, [r5, #4]
   17734:	mov	r1, #0
   17738:	ldr	r2, [sp, #36]	; 0x24
   1773c:	sub	r2, r2, r0
   17740:	add	r0, r4, r0, lsl #3
   17744:	lsl	r2, r2, #3
   17748:	bl	113e4 <memset@plt>
   1774c:	ldr	r3, [sp, #36]	; 0x24
   17750:	str	r3, [r5, #4]
   17754:	ldr	ip, [sp, #40]	; 0x28
   17758:	mov	r3, fp
   1775c:	mov	r2, sl
   17760:	ldr	r7, [sp, #44]	; 0x2c
   17764:	ldr	r9, [r4]
   17768:	ldr	r5, [r4, #4]
   1776c:	str	ip, [sp]
   17770:	orr	r7, r7, #1
   17774:	ldr	ip, [sp, #80]	; 0x50
   17778:	mov	r1, r9
   1777c:	str	r7, [sp, #4]
   17780:	ldr	lr, [sp, #84]	; 0x54
   17784:	mov	r0, r5
   17788:	str	r6, [sp, #8]
   1778c:	str	ip, [sp, #12]
   17790:	str	lr, [sp, #16]
   17794:	bl	14e70 <__assert_fail@plt+0x39a8>
   17798:	cmp	r9, r0
   1779c:	bhi	17800 <__assert_fail@plt+0x6338>
   177a0:	add	r9, r0, #1
   177a4:	movw	r3, #57792	; 0xe1c0
   177a8:	movt	r3, #3
   177ac:	cmp	r5, r3
   177b0:	str	r9, [r4]
   177b4:	beq	177c0 <__assert_fail@plt+0x62f8>
   177b8:	mov	r0, r5
   177bc:	bl	14484 <__assert_fail@plt+0x2fbc>
   177c0:	mov	r0, r9
   177c4:	bl	2b4ec <__assert_fail@plt+0x1a024>
   177c8:	mov	r1, r9
   177cc:	ldr	ip, [sp, #40]	; 0x28
   177d0:	mov	r3, fp
   177d4:	mov	r2, sl
   177d8:	mov	r5, r0
   177dc:	ldr	r9, [sp, #80]	; 0x50
   177e0:	ldr	lr, [sp, #84]	; 0x54
   177e4:	str	r0, [r4, #4]
   177e8:	str	ip, [sp]
   177ec:	str	r7, [sp, #4]
   177f0:	str	r6, [sp, #8]
   177f4:	str	r9, [sp, #12]
   177f8:	str	lr, [sp, #16]
   177fc:	bl	14e70 <__assert_fail@plt+0x39a8>
   17800:	ldr	r3, [sp, #28]
   17804:	mov	r0, r5
   17808:	str	r3, [r8]
   1780c:	add	sp, sp, #92	; 0x5c
   17810:	ldrd	r4, [sp]
   17814:	ldrd	r6, [sp, #8]
   17818:	ldrd	r8, [sp, #16]
   1781c:	ldrd	sl, [sp, #24]
   17820:	add	sp, sp, #32
   17824:	pop	{pc}		; (ldr pc, [sp], #4)
   17828:	mov	r0, #8
   1782c:	mvn	r3, #-2147483648	; 0x80000000
   17830:	add	r1, sp, #36	; 0x24
   17834:	str	r0, [sp]
   17838:	mov	r0, #0
   1783c:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17840:	ldrd	r2, [r5, #8]
   17844:	mov	r4, r0
   17848:	str	r0, [r5]
   1784c:	strd	r2, [r0]
   17850:	b	17730 <__assert_fail@plt+0x6268>
   17854:	andeq	lr, r3, r0, asr #5
   17858:	ldr	ip, [pc, #476]	; 17a3c <__assert_fail@plt+0x6574>
   1785c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17860:	movw	r4, #57676	; 0xe14c
   17864:	movt	r4, #3
   17868:	ldrd	r2, [ip, #8]
   1786c:	strd	r6, [sp, #8]
   17870:	lsr	r7, r1, #5
   17874:	mov	r6, r0
   17878:	strd	r8, [sp, #16]
   1787c:	str	lr, [sp, #32]
   17880:	and	lr, r1, #31
   17884:	ldrd	r0, [ip]
   17888:	strd	sl, [sp, #24]
   1788c:	sub	sp, sp, #84	; 0x54
   17890:	add	r5, sp, #40	; 0x28
   17894:	strd	r0, [sp, #32]
   17898:	strd	r2, [sp, #40]	; 0x28
   1789c:	ldrd	r0, [ip, #16]
   178a0:	ldrd	r2, [ip, #24]
   178a4:	strd	r0, [sp, #48]	; 0x30
   178a8:	ldrd	r0, [ip, #32]
   178ac:	strd	r2, [sp, #56]	; 0x38
   178b0:	ldrd	r2, [ip, #40]	; 0x28
   178b4:	strd	r0, [sp, #64]	; 0x40
   178b8:	strd	r2, [sp, #72]	; 0x48
   178bc:	ldr	r1, [r5, r7, lsl #2]
   178c0:	mvn	r3, r1, lsr lr
   178c4:	and	r3, r3, #1
   178c8:	eor	r1, r1, r3, lsl lr
   178cc:	str	r1, [r5, r7, lsl #2]
   178d0:	bl	113c0 <__errno_location@plt>
   178d4:	mov	r9, r0
   178d8:	ldr	sl, [r0]
   178dc:	ldr	r2, [r4, #4]
   178e0:	ldr	r7, [r4]
   178e4:	cmp	r2, #0
   178e8:	bgt	17944 <__assert_fail@plt+0x647c>
   178ec:	add	r3, r4, #8
   178f0:	str	r2, [sp, #28]
   178f4:	rsb	r2, r2, #1
   178f8:	cmp	r7, r3
   178fc:	beq	17a10 <__assert_fail@plt+0x6548>
   17900:	mov	r1, #8
   17904:	mov	r0, r7
   17908:	mvn	r3, #-2147483648	; 0x80000000
   1790c:	str	r1, [sp]
   17910:	add	r1, sp, #28
   17914:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17918:	mov	r7, r0
   1791c:	str	r0, [r4]
   17920:	ldr	r0, [r4, #4]
   17924:	mov	r1, #0
   17928:	ldr	r2, [sp, #28]
   1792c:	sub	r2, r2, r0
   17930:	add	r0, r7, r0, lsl #3
   17934:	lsl	r2, r2, #3
   17938:	bl	113e4 <memset@plt>
   1793c:	ldr	r3, [sp, #28]
   17940:	str	r3, [r4, #4]
   17944:	ldr	ip, [sp, #32]
   17948:	mvn	r3, #0
   1794c:	mov	r2, r6
   17950:	ldr	r8, [sp, #36]	; 0x24
   17954:	ldr	fp, [r7]
   17958:	ldr	r4, [r7, #4]
   1795c:	str	ip, [sp]
   17960:	orr	r8, r8, #1
   17964:	ldr	ip, [sp, #72]	; 0x48
   17968:	mov	r1, fp
   1796c:	str	r8, [sp, #4]
   17970:	ldr	lr, [sp, #76]	; 0x4c
   17974:	mov	r0, r4
   17978:	str	r5, [sp, #8]
   1797c:	str	ip, [sp, #12]
   17980:	str	lr, [sp, #16]
   17984:	bl	14e70 <__assert_fail@plt+0x39a8>
   17988:	cmp	fp, r0
   1798c:	bhi	179ec <__assert_fail@plt+0x6524>
   17990:	add	fp, r0, #1
   17994:	movw	r3, #57792	; 0xe1c0
   17998:	movt	r3, #3
   1799c:	cmp	r4, r3
   179a0:	str	fp, [r7]
   179a4:	beq	179b0 <__assert_fail@plt+0x64e8>
   179a8:	mov	r0, r4
   179ac:	bl	14484 <__assert_fail@plt+0x2fbc>
   179b0:	mov	r0, fp
   179b4:	bl	2b4ec <__assert_fail@plt+0x1a024>
   179b8:	ldr	r3, [sp, #32]
   179bc:	mov	r2, r6
   179c0:	mov	r1, fp
   179c4:	mov	r4, r0
   179c8:	ldr	lr, [sp, #72]	; 0x48
   179cc:	ldr	ip, [sp, #76]	; 0x4c
   179d0:	str	r0, [r7, #4]
   179d4:	stm	sp, {r3, r8}
   179d8:	mvn	r3, #0
   179dc:	str	r5, [sp, #8]
   179e0:	str	lr, [sp, #12]
   179e4:	str	ip, [sp, #16]
   179e8:	bl	14e70 <__assert_fail@plt+0x39a8>
   179ec:	mov	r0, r4
   179f0:	str	sl, [r9]
   179f4:	add	sp, sp, #84	; 0x54
   179f8:	ldrd	r4, [sp]
   179fc:	ldrd	r6, [sp, #8]
   17a00:	ldrd	r8, [sp, #16]
   17a04:	ldrd	sl, [sp, #24]
   17a08:	add	sp, sp, #32
   17a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a10:	mov	r0, #8
   17a14:	mvn	r3, #-2147483648	; 0x80000000
   17a18:	add	r1, sp, #28
   17a1c:	str	r0, [sp]
   17a20:	mov	r0, #0
   17a24:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17a28:	ldrd	r2, [r4, #8]
   17a2c:	mov	r7, r0
   17a30:	str	r0, [r4]
   17a34:	strd	r2, [r0]
   17a38:	b	17920 <__assert_fail@plt+0x6458>
   17a3c:	andeq	lr, r3, r0, asr #5
   17a40:	ldr	ip, [pc, #472]	; 17c20 <__assert_fail@plt+0x6758>
   17a44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17a48:	mov	r5, r0
   17a4c:	movw	r4, #57676	; 0xe14c
   17a50:	movt	r4, #3
   17a54:	ldrd	r2, [ip]
   17a58:	ldrd	r0, [ip, #8]
   17a5c:	strd	r6, [sp, #8]
   17a60:	strd	r8, [sp, #16]
   17a64:	strd	sl, [sp, #24]
   17a68:	str	lr, [sp, #32]
   17a6c:	sub	sp, sp, #84	; 0x54
   17a70:	strd	r2, [sp, #32]
   17a74:	strd	r0, [sp, #40]	; 0x28
   17a78:	ldr	r6, [sp, #44]	; 0x2c
   17a7c:	ldrd	r2, [ip, #16]
   17a80:	ldrd	r0, [ip, #24]
   17a84:	mvn	lr, r6
   17a88:	and	lr, lr, #67108864	; 0x4000000
   17a8c:	eor	lr, lr, r6
   17a90:	ldrd	r6, [ip, #40]	; 0x28
   17a94:	strd	r2, [sp, #48]	; 0x30
   17a98:	ldrd	r2, [ip, #32]
   17a9c:	str	lr, [sp, #44]	; 0x2c
   17aa0:	strd	r0, [sp, #56]	; 0x38
   17aa4:	strd	r2, [sp, #64]	; 0x40
   17aa8:	strd	r6, [sp, #72]	; 0x48
   17aac:	bl	113c0 <__errno_location@plt>
   17ab0:	mov	r8, r0
   17ab4:	ldr	r9, [r0]
   17ab8:	ldr	r2, [r4, #4]
   17abc:	ldr	r6, [r4]
   17ac0:	cmp	r2, #0
   17ac4:	bgt	17b20 <__assert_fail@plt+0x6658>
   17ac8:	add	r3, r4, #8
   17acc:	str	r2, [sp, #28]
   17ad0:	rsb	r2, r2, #1
   17ad4:	cmp	r6, r3
   17ad8:	beq	17bf4 <__assert_fail@plt+0x672c>
   17adc:	mov	r1, #8
   17ae0:	mov	r0, r6
   17ae4:	mvn	r3, #-2147483648	; 0x80000000
   17ae8:	str	r1, [sp]
   17aec:	add	r1, sp, #28
   17af0:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17af4:	mov	r6, r0
   17af8:	str	r0, [r4]
   17afc:	ldr	r0, [r4, #4]
   17b00:	mov	r1, #0
   17b04:	ldr	r2, [sp, #28]
   17b08:	sub	r2, r2, r0
   17b0c:	add	r0, r6, r0, lsl #3
   17b10:	lsl	r2, r2, #3
   17b14:	bl	113e4 <memset@plt>
   17b18:	ldr	r3, [sp, #28]
   17b1c:	str	r3, [r4, #4]
   17b20:	ldr	sl, [r6]
   17b24:	add	r0, sp, #40	; 0x28
   17b28:	mvn	r3, #0
   17b2c:	mov	r2, r5
   17b30:	ldr	r7, [sp, #36]	; 0x24
   17b34:	ldr	r4, [r6, #4]
   17b38:	mov	r1, sl
   17b3c:	str	r0, [sp, #8]
   17b40:	ldr	lr, [sp, #32]
   17b44:	orr	r7, r7, #1
   17b48:	ldr	ip, [sp, #72]	; 0x48
   17b4c:	mov	r0, r4
   17b50:	ldr	fp, [sp, #76]	; 0x4c
   17b54:	str	lr, [sp]
   17b58:	str	r7, [sp, #4]
   17b5c:	str	ip, [sp, #12]
   17b60:	str	fp, [sp, #16]
   17b64:	bl	14e70 <__assert_fail@plt+0x39a8>
   17b68:	cmp	sl, r0
   17b6c:	bhi	17bd0 <__assert_fail@plt+0x6708>
   17b70:	add	sl, r0, #1
   17b74:	movw	r3, #57792	; 0xe1c0
   17b78:	movt	r3, #3
   17b7c:	cmp	r4, r3
   17b80:	str	sl, [r6]
   17b84:	beq	17b90 <__assert_fail@plt+0x66c8>
   17b88:	mov	r0, r4
   17b8c:	bl	14484 <__assert_fail@plt+0x2fbc>
   17b90:	mov	r0, sl
   17b94:	bl	2b4ec <__assert_fail@plt+0x1a024>
   17b98:	ldr	r3, [sp, #32]
   17b9c:	mov	r2, r5
   17ba0:	add	r5, sp, #40	; 0x28
   17ba4:	mov	r1, sl
   17ba8:	mov	r4, r0
   17bac:	ldr	lr, [sp, #72]	; 0x48
   17bb0:	ldr	ip, [sp, #76]	; 0x4c
   17bb4:	str	r0, [r6, #4]
   17bb8:	stm	sp, {r3, r7}
   17bbc:	mvn	r3, #0
   17bc0:	str	r5, [sp, #8]
   17bc4:	str	lr, [sp, #12]
   17bc8:	str	ip, [sp, #16]
   17bcc:	bl	14e70 <__assert_fail@plt+0x39a8>
   17bd0:	mov	r0, r4
   17bd4:	str	r9, [r8]
   17bd8:	add	sp, sp, #84	; 0x54
   17bdc:	ldrd	r4, [sp]
   17be0:	ldrd	r6, [sp, #8]
   17be4:	ldrd	r8, [sp, #16]
   17be8:	ldrd	sl, [sp, #24]
   17bec:	add	sp, sp, #32
   17bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   17bf4:	mov	r0, #8
   17bf8:	mvn	r3, #-2147483648	; 0x80000000
   17bfc:	add	r1, sp, #28
   17c00:	str	r0, [sp]
   17c04:	mov	r0, #0
   17c08:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17c0c:	ldrd	r2, [r4, #8]
   17c10:	mov	r6, r0
   17c14:	str	r0, [r4]
   17c18:	strd	r2, [r0]
   17c1c:	b	17afc <__assert_fail@plt+0x6634>
   17c20:	andeq	lr, r3, r0, asr #5
   17c24:	ldr	ip, [pc, #480]	; 17e0c <__assert_fail@plt+0x6944>
   17c28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17c2c:	mov	r5, r0
   17c30:	movw	r4, #57676	; 0xe14c
   17c34:	movt	r4, #3
   17c38:	ldrd	r2, [ip]
   17c3c:	strd	r6, [sp, #8]
   17c40:	mov	r6, r1
   17c44:	ldrd	r0, [ip, #8]
   17c48:	strd	r8, [sp, #16]
   17c4c:	strd	sl, [sp, #24]
   17c50:	str	lr, [sp, #32]
   17c54:	sub	sp, sp, #84	; 0x54
   17c58:	ldrd	r8, [ip, #40]	; 0x28
   17c5c:	strd	r2, [sp, #32]
   17c60:	strd	r0, [sp, #40]	; 0x28
   17c64:	ldrd	r2, [ip, #16]
   17c68:	ldr	r7, [sp, #44]	; 0x2c
   17c6c:	ldrd	r0, [ip, #24]
   17c70:	strd	r2, [sp, #48]	; 0x30
   17c74:	ldrd	r2, [ip, #32]
   17c78:	mvn	lr, r7
   17c7c:	and	lr, lr, #67108864	; 0x4000000
   17c80:	eor	lr, lr, r7
   17c84:	str	lr, [sp, #44]	; 0x2c
   17c88:	strd	r0, [sp, #56]	; 0x38
   17c8c:	strd	r2, [sp, #64]	; 0x40
   17c90:	strd	r8, [sp, #72]	; 0x48
   17c94:	bl	113c0 <__errno_location@plt>
   17c98:	mov	r9, r0
   17c9c:	ldr	sl, [r0]
   17ca0:	ldr	r2, [r4, #4]
   17ca4:	ldr	r7, [r4]
   17ca8:	cmp	r2, #0
   17cac:	bgt	17d08 <__assert_fail@plt+0x6840>
   17cb0:	add	r3, r4, #8
   17cb4:	str	r2, [sp, #28]
   17cb8:	rsb	r2, r2, #1
   17cbc:	cmp	r7, r3
   17cc0:	beq	17de0 <__assert_fail@plt+0x6918>
   17cc4:	mov	r1, #8
   17cc8:	mov	r0, r7
   17ccc:	mvn	r3, #-2147483648	; 0x80000000
   17cd0:	str	r1, [sp]
   17cd4:	add	r1, sp, #28
   17cd8:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17cdc:	mov	r7, r0
   17ce0:	str	r0, [r4]
   17ce4:	ldr	r0, [r4, #4]
   17ce8:	mov	r1, #0
   17cec:	ldr	r2, [sp, #28]
   17cf0:	sub	r2, r2, r0
   17cf4:	add	r0, r7, r0, lsl #3
   17cf8:	lsl	r2, r2, #3
   17cfc:	bl	113e4 <memset@plt>
   17d00:	ldr	r3, [sp, #28]
   17d04:	str	r3, [r4, #4]
   17d08:	ldr	ip, [sp, #32]
   17d0c:	add	r0, sp, #40	; 0x28
   17d10:	mov	r3, r6
   17d14:	mov	r2, r5
   17d18:	ldr	r8, [sp, #36]	; 0x24
   17d1c:	ldr	fp, [r7]
   17d20:	ldr	r4, [r7, #4]
   17d24:	str	ip, [sp]
   17d28:	orr	r8, r8, #1
   17d2c:	ldr	ip, [sp, #72]	; 0x48
   17d30:	mov	r1, fp
   17d34:	str	r8, [sp, #4]
   17d38:	ldr	lr, [sp, #76]	; 0x4c
   17d3c:	str	r0, [sp, #8]
   17d40:	mov	r0, r4
   17d44:	str	ip, [sp, #12]
   17d48:	str	lr, [sp, #16]
   17d4c:	bl	14e70 <__assert_fail@plt+0x39a8>
   17d50:	cmp	fp, r0
   17d54:	bhi	17dbc <__assert_fail@plt+0x68f4>
   17d58:	add	fp, r0, #1
   17d5c:	movw	r3, #57792	; 0xe1c0
   17d60:	movt	r3, #3
   17d64:	cmp	r4, r3
   17d68:	str	fp, [r7]
   17d6c:	beq	17d78 <__assert_fail@plt+0x68b0>
   17d70:	mov	r0, r4
   17d74:	bl	14484 <__assert_fail@plt+0x2fbc>
   17d78:	mov	r0, fp
   17d7c:	bl	2b4ec <__assert_fail@plt+0x1a024>
   17d80:	ldr	lr, [sp, #32]
   17d84:	mov	r2, r5
   17d88:	mov	r3, r6
   17d8c:	mov	r1, fp
   17d90:	mov	r4, r0
   17d94:	ldr	r5, [sp, #72]	; 0x48
   17d98:	ldr	ip, [sp, #76]	; 0x4c
   17d9c:	str	r0, [r7, #4]
   17da0:	str	lr, [sp]
   17da4:	add	lr, sp, #40	; 0x28
   17da8:	str	r8, [sp, #4]
   17dac:	str	lr, [sp, #8]
   17db0:	str	r5, [sp, #12]
   17db4:	str	ip, [sp, #16]
   17db8:	bl	14e70 <__assert_fail@plt+0x39a8>
   17dbc:	mov	r0, r4
   17dc0:	str	sl, [r9]
   17dc4:	add	sp, sp, #84	; 0x54
   17dc8:	ldrd	r4, [sp]
   17dcc:	ldrd	r6, [sp, #8]
   17dd0:	ldrd	r8, [sp, #16]
   17dd4:	ldrd	sl, [sp, #24]
   17dd8:	add	sp, sp, #32
   17ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   17de0:	mov	r0, #8
   17de4:	mvn	r3, #-2147483648	; 0x80000000
   17de8:	add	r1, sp, #28
   17dec:	str	r0, [sp]
   17df0:	mov	r0, #0
   17df4:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   17df8:	ldrd	r2, [r4, #8]
   17dfc:	mov	r7, r0
   17e00:	str	r0, [r4]
   17e04:	strd	r2, [r0]
   17e08:	b	17ce4 <__assert_fail@plt+0x681c>
   17e0c:	andeq	lr, r3, r0, asr #5
   17e10:	strd	r4, [sp, #-12]!
   17e14:	mov	r4, #0
   17e18:	mov	r5, #0
   17e1c:	str	lr, [sp, #8]
   17e20:	sub	sp, sp, #100	; 0x64
   17e24:	cmp	r1, #10
   17e28:	strd	r4, [sp]
   17e2c:	strd	r4, [sp, #8]
   17e30:	strd	r4, [sp, #16]
   17e34:	strd	r4, [sp, #24]
   17e38:	strd	r4, [sp, #32]
   17e3c:	strd	r4, [sp, #40]	; 0x28
   17e40:	beq	17e70 <__assert_fail@plt+0x69a8>
   17e44:	mov	ip, #67108864	; 0x4000000
   17e48:	mov	r3, sp
   17e4c:	str	r1, [sp]
   17e50:	mov	r1, r2
   17e54:	mvn	r2, #0
   17e58:	str	ip, [sp, #12]
   17e5c:	bl	1685c <__assert_fail@plt+0x5394>
   17e60:	add	sp, sp, #100	; 0x64
   17e64:	ldrd	r4, [sp]
   17e68:	add	sp, sp, #8
   17e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e70:	bl	114bc <abort@plt>
   17e74:	ldr	ip, [pc, #156]	; 17f18 <__assert_fail@plt+0x6a50>
   17e78:	cmp	r2, #0
   17e7c:	cmpne	r1, #0
   17e80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17e84:	strd	r6, [sp, #8]
   17e88:	mov	r6, r2
   17e8c:	str	r8, [sp, #16]
   17e90:	mov	r8, r3
   17e94:	strd	sl, [sp, #20]
   17e98:	ldrd	r4, [ip]
   17e9c:	str	lr, [sp, #28]
   17ea0:	sub	sp, sp, #48	; 0x30
   17ea4:	mov	lr, #10
   17ea8:	ldrd	r2, [ip, #8]
   17eac:	ldrd	sl, [ip, #16]
   17eb0:	strd	r4, [sp]
   17eb4:	ldrd	r4, [ip, #32]
   17eb8:	str	lr, [sp]
   17ebc:	strd	r2, [sp, #8]
   17ec0:	strd	sl, [sp, #16]
   17ec4:	ldrd	r2, [ip, #24]
   17ec8:	ldrd	sl, [ip, #40]	; 0x28
   17ecc:	strd	r2, [sp, #24]
   17ed0:	strd	r4, [sp, #32]
   17ed4:	strd	sl, [sp, #40]	; 0x28
   17ed8:	beq	17f14 <__assert_fail@plt+0x6a4c>
   17edc:	mov	r7, r1
   17ee0:	mov	r3, sp
   17ee4:	mov	r1, r8
   17ee8:	mvn	r2, #0
   17eec:	str	r7, [sp, #40]	; 0x28
   17ef0:	str	r6, [sp, #44]	; 0x2c
   17ef4:	bl	1685c <__assert_fail@plt+0x5394>
   17ef8:	add	sp, sp, #48	; 0x30
   17efc:	ldrd	r4, [sp]
   17f00:	ldrd	r6, [sp, #8]
   17f04:	ldr	r8, [sp, #16]
   17f08:	ldrd	sl, [sp, #20]
   17f0c:	add	sp, sp, #28
   17f10:	pop	{pc}		; (ldr pc, [sp], #4)
   17f14:	bl	114bc <abort@plt>
   17f18:	andeq	lr, r3, r0, asr #5
   17f1c:	ldr	ip, [pc, #156]	; 17fc0 <__assert_fail@plt+0x6af8>
   17f20:	cmp	r2, #0
   17f24:	cmpne	r1, #0
   17f28:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17f2c:	strd	r6, [sp, #8]
   17f30:	mov	r6, r2
   17f34:	str	r8, [sp, #16]
   17f38:	mov	r8, r3
   17f3c:	strd	sl, [sp, #20]
   17f40:	ldrd	r4, [ip]
   17f44:	str	lr, [sp, #28]
   17f48:	sub	sp, sp, #48	; 0x30
   17f4c:	mov	lr, #10
   17f50:	ldrd	r2, [ip, #8]
   17f54:	ldrd	sl, [ip, #16]
   17f58:	strd	r4, [sp]
   17f5c:	ldrd	r4, [ip, #32]
   17f60:	str	lr, [sp]
   17f64:	strd	r2, [sp, #8]
   17f68:	strd	sl, [sp, #16]
   17f6c:	ldrd	r2, [ip, #24]
   17f70:	ldrd	sl, [ip, #40]	; 0x28
   17f74:	strd	r2, [sp, #24]
   17f78:	strd	r4, [sp, #32]
   17f7c:	strd	sl, [sp, #40]	; 0x28
   17f80:	beq	17fbc <__assert_fail@plt+0x6af4>
   17f84:	ldr	r2, [sp, #80]	; 0x50
   17f88:	mov	r7, r1
   17f8c:	mov	r3, sp
   17f90:	mov	r1, r8
   17f94:	str	r7, [sp, #40]	; 0x28
   17f98:	str	r6, [sp, #44]	; 0x2c
   17f9c:	bl	1685c <__assert_fail@plt+0x5394>
   17fa0:	add	sp, sp, #48	; 0x30
   17fa4:	ldrd	r4, [sp]
   17fa8:	ldrd	r6, [sp, #8]
   17fac:	ldr	r8, [sp, #16]
   17fb0:	ldrd	sl, [sp, #20]
   17fb4:	add	sp, sp, #28
   17fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fbc:	bl	114bc <abort@plt>
   17fc0:	andeq	lr, r3, r0, asr #5
   17fc4:	ldr	ip, [pc, #512]	; 181cc <__assert_fail@plt+0x6d04>
   17fc8:	cmp	r0, #0
   17fcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17fd0:	ldrd	r4, [ip, #16]
   17fd4:	strd	r6, [sp, #8]
   17fd8:	clz	r6, r1
   17fdc:	mov	r7, r1
   17fe0:	strd	r8, [sp, #16]
   17fe4:	mov	r8, r0
   17fe8:	lsr	r6, r6, #5
   17fec:	strd	sl, [sp, #24]
   17ff0:	mov	fp, r2
   17ff4:	mov	sl, #10
   17ff8:	ldrd	r2, [ip]
   17ffc:	moveq	r6, #1
   18000:	str	lr, [sp, #32]
   18004:	sub	sp, sp, #92	; 0x5c
   18008:	cmp	r6, #0
   1800c:	ldrd	r0, [ip, #8]
   18010:	strd	r2, [sp, #40]	; 0x28
   18014:	strd	r4, [sp, #56]	; 0x38
   18018:	ldrd	r2, [ip, #24]
   1801c:	strd	r0, [sp, #48]	; 0x30
   18020:	ldrd	r0, [ip, #32]
   18024:	str	sl, [sp, #40]	; 0x28
   18028:	ldrd	r4, [ip, #40]	; 0x28
   1802c:	strd	r2, [sp, #64]	; 0x40
   18030:	strd	r0, [sp, #72]	; 0x48
   18034:	strd	r4, [sp, #80]	; 0x50
   18038:	bne	181c8 <__assert_fail@plt+0x6d00>
   1803c:	movw	r5, #57676	; 0xe14c
   18040:	movt	r5, #3
   18044:	str	r8, [sp, #80]	; 0x50
   18048:	str	r7, [sp, #84]	; 0x54
   1804c:	bl	113c0 <__errno_location@plt>
   18050:	ldr	r3, [r0]
   18054:	mov	r9, r0
   18058:	ldr	r2, [r5, #4]
   1805c:	ldr	r4, [r5]
   18060:	str	r3, [sp, #28]
   18064:	cmp	r2, #0
   18068:	movgt	r1, sl
   1806c:	bgt	180d4 <__assert_fail@plt+0x6c0c>
   18070:	add	r3, r5, #8
   18074:	str	r2, [sp, #36]	; 0x24
   18078:	rsb	r2, r2, #1
   1807c:	cmp	r4, r3
   18080:	beq	1819c <__assert_fail@plt+0x6cd4>
   18084:	mov	r1, #8
   18088:	mov	r0, r4
   1808c:	mvn	r3, #-2147483648	; 0x80000000
   18090:	str	r1, [sp]
   18094:	add	r1, sp, #36	; 0x24
   18098:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   1809c:	mov	r4, r0
   180a0:	str	r0, [r5]
   180a4:	ldr	r0, [r5, #4]
   180a8:	mov	r1, #0
   180ac:	ldr	r2, [sp, #36]	; 0x24
   180b0:	sub	r2, r2, r0
   180b4:	add	r0, r4, r0, lsl #3
   180b8:	lsl	r2, r2, #3
   180bc:	bl	113e4 <memset@plt>
   180c0:	ldr	r3, [sp, #36]	; 0x24
   180c4:	ldr	r1, [sp, #40]	; 0x28
   180c8:	ldr	r8, [sp, #80]	; 0x50
   180cc:	str	r3, [r5, #4]
   180d0:	ldr	r7, [sp, #84]	; 0x54
   180d4:	mvn	r3, #0
   180d8:	mov	r2, fp
   180dc:	ldr	r6, [sp, #44]	; 0x2c
   180e0:	ldr	sl, [r4]
   180e4:	ldr	r5, [r4, #4]
   180e8:	orr	r6, r6, #1
   180ec:	stm	sp, {r1, r6}
   180f0:	add	r1, sp, #48	; 0x30
   180f4:	str	r8, [sp, #12]
   180f8:	mov	r0, r5
   180fc:	str	r1, [sp, #8]
   18100:	mov	r1, sl
   18104:	str	r7, [sp, #16]
   18108:	bl	14e70 <__assert_fail@plt+0x39a8>
   1810c:	cmp	sl, r0
   18110:	bhi	18174 <__assert_fail@plt+0x6cac>
   18114:	add	r7, r0, #1
   18118:	movw	r3, #57792	; 0xe1c0
   1811c:	movt	r3, #3
   18120:	cmp	r5, r3
   18124:	str	r7, [r4]
   18128:	beq	18134 <__assert_fail@plt+0x6c6c>
   1812c:	mov	r0, r5
   18130:	bl	14484 <__assert_fail@plt+0x2fbc>
   18134:	mov	r0, r7
   18138:	bl	2b4ec <__assert_fail@plt+0x1a024>
   1813c:	ldr	r3, [sp, #40]	; 0x28
   18140:	mov	r2, fp
   18144:	mov	r1, r7
   18148:	mov	r5, r0
   1814c:	ldr	lr, [sp, #80]	; 0x50
   18150:	ldr	ip, [sp, #84]	; 0x54
   18154:	str	r0, [r4, #4]
   18158:	add	r4, sp, #48	; 0x30
   1815c:	stm	sp, {r3, r6}
   18160:	mvn	r3, #0
   18164:	str	r4, [sp, #8]
   18168:	str	lr, [sp, #12]
   1816c:	str	ip, [sp, #16]
   18170:	bl	14e70 <__assert_fail@plt+0x39a8>
   18174:	ldr	r3, [sp, #28]
   18178:	mov	r0, r5
   1817c:	str	r3, [r9]
   18180:	add	sp, sp, #92	; 0x5c
   18184:	ldrd	r4, [sp]
   18188:	ldrd	r6, [sp, #8]
   1818c:	ldrd	r8, [sp, #16]
   18190:	ldrd	sl, [sp, #24]
   18194:	add	sp, sp, #32
   18198:	pop	{pc}		; (ldr pc, [sp], #4)
   1819c:	mov	r1, #8
   181a0:	mvn	r3, #-2147483648	; 0x80000000
   181a4:	mov	r0, r6
   181a8:	str	r1, [sp]
   181ac:	add	r1, sp, #36	; 0x24
   181b0:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   181b4:	ldrd	r2, [r5, #8]
   181b8:	mov	r4, r0
   181bc:	str	r0, [r5]
   181c0:	strd	r2, [r0]
   181c4:	b	180a4 <__assert_fail@plt+0x6bdc>
   181c8:	bl	114bc <abort@plt>
   181cc:	andeq	lr, r3, r0, asr #5
   181d0:	ldr	ip, [pc, #536]	; 183f0 <__assert_fail@plt+0x6f28>
   181d4:	cmp	r0, #0
   181d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   181dc:	ldrd	r4, [ip, #16]
   181e0:	strd	r6, [sp, #8]
   181e4:	mov	r6, r1
   181e8:	mov	r7, r0
   181ec:	strd	r8, [sp, #16]
   181f0:	mov	r9, #10
   181f4:	strd	sl, [sp, #24]
   181f8:	mov	sl, r2
   181fc:	mov	fp, r3
   18200:	str	lr, [sp, #32]
   18204:	clz	lr, r1
   18208:	sub	sp, sp, #92	; 0x5c
   1820c:	ldrd	r2, [ip]
   18210:	lsr	lr, lr, #5
   18214:	moveq	lr, #1
   18218:	ldrd	r0, [ip, #8]
   1821c:	cmp	lr, #0
   18220:	strd	r4, [sp, #56]	; 0x38
   18224:	ldrd	r4, [ip, #40]	; 0x28
   18228:	str	lr, [sp, #28]
   1822c:	strd	r2, [sp, #40]	; 0x28
   18230:	ldrd	r2, [ip, #24]
   18234:	strd	r0, [sp, #48]	; 0x30
   18238:	ldrd	r0, [ip, #32]
   1823c:	str	r9, [sp, #40]	; 0x28
   18240:	strd	r2, [sp, #64]	; 0x40
   18244:	strd	r4, [sp, #80]	; 0x50
   18248:	strd	r0, [sp, #72]	; 0x48
   1824c:	bne	183ec <__assert_fail@plt+0x6f24>
   18250:	movw	r5, #57676	; 0xe14c
   18254:	movt	r5, #3
   18258:	str	r7, [sp, #80]	; 0x50
   1825c:	str	r6, [sp, #84]	; 0x54
   18260:	bl	113c0 <__errno_location@plt>
   18264:	ldr	r3, [r0]
   18268:	mov	r8, r0
   1826c:	ldr	r2, [r5, #4]
   18270:	ldr	r4, [r5]
   18274:	str	r3, [sp, #24]
   18278:	cmp	r2, #0
   1827c:	movgt	r1, r9
   18280:	bgt	182e8 <__assert_fail@plt+0x6e20>
   18284:	add	r3, r5, #8
   18288:	str	r2, [sp, #36]	; 0x24
   1828c:	rsb	r2, r2, #1
   18290:	cmp	r4, r3
   18294:	beq	183c0 <__assert_fail@plt+0x6ef8>
   18298:	mov	r1, #8
   1829c:	mov	r0, r4
   182a0:	mvn	r3, #-2147483648	; 0x80000000
   182a4:	str	r1, [sp]
   182a8:	add	r1, sp, #36	; 0x24
   182ac:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   182b0:	mov	r4, r0
   182b4:	str	r0, [r5]
   182b8:	ldr	r0, [r5, #4]
   182bc:	mov	r1, #0
   182c0:	ldr	r2, [sp, #36]	; 0x24
   182c4:	sub	r2, r2, r0
   182c8:	add	r0, r4, r0, lsl #3
   182cc:	lsl	r2, r2, #3
   182d0:	bl	113e4 <memset@plt>
   182d4:	ldr	r3, [sp, #36]	; 0x24
   182d8:	ldr	r1, [sp, #40]	; 0x28
   182dc:	ldr	r7, [sp, #80]	; 0x50
   182e0:	str	r3, [r5, #4]
   182e4:	ldr	r6, [sp, #84]	; 0x54
   182e8:	mov	r3, fp
   182ec:	mov	r2, sl
   182f0:	ldr	r0, [sp, #44]	; 0x2c
   182f4:	ldr	r9, [r4]
   182f8:	ldr	r5, [r4, #4]
   182fc:	orr	r0, r0, #1
   18300:	str	r1, [sp]
   18304:	add	r1, sp, #48	; 0x30
   18308:	str	r0, [sp, #4]
   1830c:	str	r1, [sp, #8]
   18310:	mov	r1, r9
   18314:	str	r7, [sp, #12]
   18318:	str	r6, [sp, #16]
   1831c:	str	r0, [sp, #28]
   18320:	mov	r0, r5
   18324:	bl	14e70 <__assert_fail@plt+0x39a8>
   18328:	cmp	r9, r0
   1832c:	bhi	18398 <__assert_fail@plt+0x6ed0>
   18330:	add	r6, r0, #1
   18334:	movw	r3, #57792	; 0xe1c0
   18338:	movt	r3, #3
   1833c:	cmp	r5, r3
   18340:	str	r6, [r4]
   18344:	beq	18350 <__assert_fail@plt+0x6e88>
   18348:	mov	r0, r5
   1834c:	bl	14484 <__assert_fail@plt+0x2fbc>
   18350:	mov	r0, r6
   18354:	bl	2b4ec <__assert_fail@plt+0x1a024>
   18358:	ldr	lr, [sp, #40]	; 0x28
   1835c:	mov	r1, r6
   18360:	mov	r3, fp
   18364:	mov	r2, sl
   18368:	mov	r5, r0
   1836c:	ldr	r6, [sp, #80]	; 0x50
   18370:	ldr	ip, [sp, #84]	; 0x54
   18374:	str	r0, [r4, #4]
   18378:	str	lr, [sp]
   1837c:	ldr	lr, [sp, #28]
   18380:	str	lr, [sp, #4]
   18384:	add	lr, sp, #48	; 0x30
   18388:	str	r6, [sp, #12]
   1838c:	str	lr, [sp, #8]
   18390:	str	ip, [sp, #16]
   18394:	bl	14e70 <__assert_fail@plt+0x39a8>
   18398:	ldr	r3, [sp, #24]
   1839c:	mov	r0, r5
   183a0:	str	r3, [r8]
   183a4:	add	sp, sp, #92	; 0x5c
   183a8:	ldrd	r4, [sp]
   183ac:	ldrd	r6, [sp, #8]
   183b0:	ldrd	r8, [sp, #16]
   183b4:	ldrd	sl, [sp, #24]
   183b8:	add	sp, sp, #32
   183bc:	pop	{pc}		; (ldr pc, [sp], #4)
   183c0:	mov	r1, #8
   183c4:	mvn	r3, #-2147483648	; 0x80000000
   183c8:	ldr	r0, [sp, #28]
   183cc:	str	r1, [sp]
   183d0:	add	r1, sp, #36	; 0x24
   183d4:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   183d8:	ldrd	r2, [r5, #8]
   183dc:	mov	r4, r0
   183e0:	str	r0, [r5]
   183e4:	strd	r2, [r0]
   183e8:	b	182b8 <__assert_fail@plt+0x6df0>
   183ec:	bl	114bc <abort@plt>
   183f0:	andeq	lr, r3, r0, asr #5
   183f4:	ldr	r3, [pc]	; 183fc <__assert_fail@plt+0x6f34>
   183f8:	b	1685c <__assert_fail@plt+0x5394>
   183fc:	andeq	lr, r3, ip, asr r1
   18400:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18404:	movw	r4, #57676	; 0xe14c
   18408:	movt	r4, #3
   1840c:	strd	r6, [sp, #8]
   18410:	strd	r8, [sp, #16]
   18414:	strd	sl, [sp, #24]
   18418:	mov	sl, r0
   1841c:	mov	fp, r1
   18420:	str	lr, [sp, #32]
   18424:	sub	sp, sp, #44	; 0x2c
   18428:	bl	113c0 <__errno_location@plt>
   1842c:	ldr	r3, [r0]
   18430:	mov	r8, r0
   18434:	ldr	r2, [r4, #4]
   18438:	ldr	r5, [r4]
   1843c:	str	r3, [sp, #28]
   18440:	cmp	r2, #0
   18444:	bgt	184a0 <__assert_fail@plt+0x6fd8>
   18448:	add	r3, r4, #8
   1844c:	str	r2, [sp, #36]	; 0x24
   18450:	rsb	r2, r2, #1
   18454:	cmp	r5, r3
   18458:	beq	1857c <__assert_fail@plt+0x70b4>
   1845c:	mov	r1, #8
   18460:	mov	r0, r5
   18464:	mvn	r3, #-2147483648	; 0x80000000
   18468:	str	r1, [sp]
   1846c:	add	r1, sp, #36	; 0x24
   18470:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   18474:	mov	r5, r0
   18478:	str	r0, [r4]
   1847c:	ldr	r0, [r4, #4]
   18480:	mov	r1, #0
   18484:	ldr	r2, [sp, #36]	; 0x24
   18488:	sub	r2, r2, r0
   1848c:	add	r0, r5, r0, lsl #3
   18490:	lsl	r2, r2, #3
   18494:	bl	113e4 <memset@plt>
   18498:	ldr	r3, [sp, #36]	; 0x24
   1849c:	str	r3, [r4, #4]
   184a0:	ldr	ip, [r4, #16]
   184a4:	mov	r3, fp
   184a8:	mov	r2, sl
   184ac:	ldr	r7, [r4, #20]
   184b0:	ldr	r0, [pc, #240]	; 185a8 <__assert_fail@plt+0x70e0>
   184b4:	ldr	r9, [r5]
   184b8:	orr	r7, r7, #1
   184bc:	ldr	r6, [r5, #4]
   184c0:	str	ip, [sp]
   184c4:	ldr	ip, [r4, #56]	; 0x38
   184c8:	mov	r1, r9
   184cc:	str	r7, [sp, #4]
   184d0:	ldr	lr, [r4, #60]	; 0x3c
   184d4:	str	r0, [sp, #8]
   184d8:	mov	r0, r6
   184dc:	str	ip, [sp, #12]
   184e0:	str	lr, [sp, #16]
   184e4:	bl	14e70 <__assert_fail@plt+0x39a8>
   184e8:	cmp	r9, r0
   184ec:	bhi	18554 <__assert_fail@plt+0x708c>
   184f0:	add	r9, r0, #1
   184f4:	movw	r3, #57792	; 0xe1c0
   184f8:	movt	r3, #3
   184fc:	cmp	r6, r3
   18500:	str	r9, [r5]
   18504:	beq	18510 <__assert_fail@plt+0x7048>
   18508:	mov	r0, r6
   1850c:	bl	14484 <__assert_fail@plt+0x2fbc>
   18510:	mov	r0, r9
   18514:	bl	2b4ec <__assert_fail@plt+0x1a024>
   18518:	ldr	ip, [r4, #16]
   1851c:	mov	r1, r9
   18520:	mov	r3, fp
   18524:	mov	r2, sl
   18528:	mov	r6, r0
   1852c:	ldr	r9, [r4, #56]	; 0x38
   18530:	ldr	lr, [r4, #60]	; 0x3c
   18534:	str	r0, [r5, #4]
   18538:	str	ip, [sp]
   1853c:	ldr	ip, [pc, #100]	; 185a8 <__assert_fail@plt+0x70e0>
   18540:	str	r7, [sp, #4]
   18544:	str	ip, [sp, #8]
   18548:	str	r9, [sp, #12]
   1854c:	str	lr, [sp, #16]
   18550:	bl	14e70 <__assert_fail@plt+0x39a8>
   18554:	ldr	r3, [sp, #28]
   18558:	mov	r0, r6
   1855c:	str	r3, [r8]
   18560:	add	sp, sp, #44	; 0x2c
   18564:	ldrd	r4, [sp]
   18568:	ldrd	r6, [sp, #8]
   1856c:	ldrd	r8, [sp, #16]
   18570:	ldrd	sl, [sp, #24]
   18574:	add	sp, sp, #32
   18578:	pop	{pc}		; (ldr pc, [sp], #4)
   1857c:	mov	r0, #8
   18580:	mvn	r3, #-2147483648	; 0x80000000
   18584:	add	r1, sp, #36	; 0x24
   18588:	str	r0, [sp]
   1858c:	mov	r0, #0
   18590:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   18594:	ldrd	r2, [r4, #8]
   18598:	mov	r5, r0
   1859c:	str	r0, [r4]
   185a0:	strd	r2, [r0]
   185a4:	b	1847c <__assert_fail@plt+0x6fb4>
   185a8:	andeq	lr, r3, r4, ror #2
   185ac:	ldr	r3, [pc, #4]	; 185b8 <__assert_fail@plt+0x70f0>
   185b0:	mvn	r2, #0
   185b4:	b	1685c <__assert_fail@plt+0x5394>
   185b8:	andeq	lr, r3, ip, asr r1
   185bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   185c0:	movw	r4, #57676	; 0xe14c
   185c4:	movt	r4, #3
   185c8:	strd	r6, [sp, #8]
   185cc:	strd	r8, [sp, #16]
   185d0:	strd	sl, [sp, #24]
   185d4:	mov	sl, r0
   185d8:	str	lr, [sp, #32]
   185dc:	sub	sp, sp, #44	; 0x2c
   185e0:	bl	113c0 <__errno_location@plt>
   185e4:	ldr	r3, [r0]
   185e8:	mov	r8, r0
   185ec:	ldr	r2, [r4, #4]
   185f0:	ldr	r5, [r4]
   185f4:	str	r3, [sp, #28]
   185f8:	cmp	r2, #0
   185fc:	bgt	18658 <__assert_fail@plt+0x7190>
   18600:	add	r3, r4, #8
   18604:	str	r2, [sp, #36]	; 0x24
   18608:	rsb	r2, r2, #1
   1860c:	cmp	r5, r3
   18610:	beq	18720 <__assert_fail@plt+0x7258>
   18614:	mov	r1, #8
   18618:	mov	r0, r5
   1861c:	mvn	r3, #-2147483648	; 0x80000000
   18620:	str	r1, [sp]
   18624:	add	r1, sp, #36	; 0x24
   18628:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   1862c:	mov	r5, r0
   18630:	str	r0, [r4]
   18634:	ldr	r0, [r4, #4]
   18638:	mov	r1, #0
   1863c:	ldr	r2, [sp, #36]	; 0x24
   18640:	sub	r2, r2, r0
   18644:	add	r0, r5, r0, lsl #3
   18648:	lsl	r2, r2, #3
   1864c:	bl	113e4 <memset@plt>
   18650:	ldr	r3, [sp, #36]	; 0x24
   18654:	str	r3, [r4, #4]
   18658:	ldr	ip, [r4, #16]
   1865c:	mvn	r3, #0
   18660:	mov	r2, sl
   18664:	ldr	r7, [r4, #20]
   18668:	ldr	fp, [pc, #220]	; 1874c <__assert_fail@plt+0x7284>
   1866c:	ldr	r9, [r5]
   18670:	orr	r7, r7, #1
   18674:	ldr	r6, [r5, #4]
   18678:	str	ip, [sp]
   1867c:	ldr	ip, [r4, #56]	; 0x38
   18680:	mov	r1, r9
   18684:	stmib	sp, {r7, fp}
   18688:	ldr	lr, [r4, #60]	; 0x3c
   1868c:	mov	r0, r6
   18690:	str	ip, [sp, #12]
   18694:	str	lr, [sp, #16]
   18698:	bl	14e70 <__assert_fail@plt+0x39a8>
   1869c:	cmp	r9, r0
   186a0:	bhi	186f8 <__assert_fail@plt+0x7230>
   186a4:	add	r9, r0, #1
   186a8:	movw	r3, #57792	; 0xe1c0
   186ac:	movt	r3, #3
   186b0:	cmp	r6, r3
   186b4:	str	r9, [r5]
   186b8:	beq	186c4 <__assert_fail@plt+0x71fc>
   186bc:	mov	r0, r6
   186c0:	bl	14484 <__assert_fail@plt+0x2fbc>
   186c4:	mov	r0, r9
   186c8:	bl	2b4ec <__assert_fail@plt+0x1a024>
   186cc:	ldr	r3, [r4, #16]
   186d0:	mov	r2, sl
   186d4:	mov	r1, r9
   186d8:	mov	r6, r0
   186dc:	ldr	lr, [r4, #56]	; 0x38
   186e0:	ldr	ip, [r4, #60]	; 0x3c
   186e4:	str	r0, [r5, #4]
   186e8:	stm	sp, {r3, r7, fp, lr}
   186ec:	mvn	r3, #0
   186f0:	str	ip, [sp, #16]
   186f4:	bl	14e70 <__assert_fail@plt+0x39a8>
   186f8:	ldr	r3, [sp, #28]
   186fc:	mov	r0, r6
   18700:	str	r3, [r8]
   18704:	add	sp, sp, #44	; 0x2c
   18708:	ldrd	r4, [sp]
   1870c:	ldrd	r6, [sp, #8]
   18710:	ldrd	r8, [sp, #16]
   18714:	ldrd	sl, [sp, #24]
   18718:	add	sp, sp, #32
   1871c:	pop	{pc}		; (ldr pc, [sp], #4)
   18720:	mov	r0, #8
   18724:	mvn	r3, #-2147483648	; 0x80000000
   18728:	add	r1, sp, #36	; 0x24
   1872c:	str	r0, [sp]
   18730:	mov	r0, #0
   18734:	bl	2b790 <__assert_fail@plt+0x1a2c8>
   18738:	ldrd	r2, [r4, #8]
   1873c:	mov	r5, r0
   18740:	str	r0, [r4]
   18744:	strd	r2, [r0]
   18748:	b	18634 <__assert_fail@plt+0x716c>
   1874c:	andeq	lr, r3, r4, ror #2
   18750:	ldr	r3, [r1, #40]	; 0x28
   18754:	ldr	ip, [r1, #56]	; 0x38
   18758:	cmp	ip, r3
   1875c:	ble	18820 <__assert_fail@plt+0x7358>
   18760:	str	r4, [sp, #-8]!
   18764:	ldr	r4, [r1, #80]	; 0x50
   18768:	str	lr, [sp, #4]
   1876c:	ldr	lr, [r1, #4]
   18770:	cmp	r4, #1
   18774:	ldrb	ip, [lr, r3]
   18778:	strb	ip, [r0]
   1877c:	ble	1879c <__assert_fail@plt+0x72d4>
   18780:	ldr	r4, [r1, #28]
   18784:	cmp	r3, r4
   18788:	beq	1879c <__assert_fail@plt+0x72d4>
   1878c:	ldr	r4, [r1, #8]
   18790:	ldr	r4, [r4, r3, lsl #2]
   18794:	cmn	r4, #1
   18798:	beq	187e0 <__assert_fail@plt+0x7318>
   1879c:	cmp	ip, #92	; 0x5c
   187a0:	beq	187d8 <__assert_fail@plt+0x7310>
   187a4:	cmp	ip, #91	; 0x5b
   187a8:	beq	18860 <__assert_fail@plt+0x7398>
   187ac:	cmp	ip, #93	; 0x5d
   187b0:	beq	188b8 <__assert_fail@plt+0x73f0>
   187b4:	cmp	ip, #94	; 0x5e
   187b8:	bne	187fc <__assert_fail@plt+0x7334>
   187bc:	mov	r2, #25
   187c0:	mov	r3, #1
   187c4:	ldr	r4, [sp]
   187c8:	add	sp, sp, #4
   187cc:	strb	r2, [r0, #4]
   187d0:	mov	r0, r3
   187d4:	pop	{pc}		; (ldr pc, [sp], #4)
   187d8:	tst	r2, #1
   187dc:	bne	18834 <__assert_fail@plt+0x736c>
   187e0:	mov	r2, #1
   187e4:	mov	r3, r2
   187e8:	strb	r2, [r0, #4]
   187ec:	ldr	r4, [sp]
   187f0:	add	sp, sp, #4
   187f4:	mov	r0, r3
   187f8:	pop	{pc}		; (ldr pc, [sp], #4)
   187fc:	cmp	ip, #45	; 0x2d
   18800:	bne	187e0 <__assert_fail@plt+0x7318>
   18804:	mov	r2, #22
   18808:	mov	r3, #1
   1880c:	ldr	r4, [sp]
   18810:	add	sp, sp, #4
   18814:	strb	r2, [r0, #4]
   18818:	mov	r0, r3
   1881c:	pop	{pc}		; (ldr pc, [sp], #4)
   18820:	mov	r2, #2
   18824:	mov	r3, #0
   18828:	strb	r2, [r0, #4]
   1882c:	mov	r0, r3
   18830:	bx	lr
   18834:	ldr	r2, [r1, #48]	; 0x30
   18838:	add	r3, r3, #1
   1883c:	cmp	r3, r2
   18840:	bge	187e0 <__assert_fail@plt+0x7318>
   18844:	str	r3, [r1, #40]	; 0x28
   18848:	mov	r2, #1
   1884c:	ldrb	r1, [lr, r3]
   18850:	mov	r3, r2
   18854:	strb	r1, [r0]
   18858:	strb	r2, [r0, #4]
   1885c:	b	187ec <__assert_fail@plt+0x7324>
   18860:	ldr	r1, [r1, #48]	; 0x30
   18864:	add	ip, r3, #1
   18868:	cmp	ip, r1
   1886c:	bge	188a0 <__assert_fail@plt+0x73d8>
   18870:	add	r3, lr, r3
   18874:	ldrb	r3, [r3, #1]
   18878:	cmp	r3, #58	; 0x3a
   1887c:	strb	r3, [r0]
   18880:	beq	188e4 <__assert_fail@plt+0x741c>
   18884:	cmp	r3, #61	; 0x3d
   18888:	beq	188d4 <__assert_fail@plt+0x740c>
   1888c:	cmp	r3, #46	; 0x2e
   18890:	moveq	r2, #26
   18894:	moveq	r3, #2
   18898:	strbeq	r2, [r0, #4]
   1889c:	beq	187ec <__assert_fail@plt+0x7324>
   188a0:	mov	r2, #1
   188a4:	mov	r1, #91	; 0x5b
   188a8:	mov	r3, r2
   188ac:	strb	r1, [r0]
   188b0:	strb	r2, [r0, #4]
   188b4:	b	187ec <__assert_fail@plt+0x7324>
   188b8:	mov	r2, #21
   188bc:	mov	r3, #1
   188c0:	ldr	r4, [sp]
   188c4:	add	sp, sp, #4
   188c8:	strb	r2, [r0, #4]
   188cc:	mov	r0, r3
   188d0:	pop	{pc}		; (ldr pc, [sp], #4)
   188d4:	mov	r2, #28
   188d8:	mov	r3, #2
   188dc:	strb	r2, [r0, #4]
   188e0:	b	187ec <__assert_fail@plt+0x7324>
   188e4:	tst	r2, #4
   188e8:	beq	188a0 <__assert_fail@plt+0x73d8>
   188ec:	mov	r2, #30
   188f0:	mov	r3, #2
   188f4:	strb	r2, [r0, #4]
   188f8:	b	187ec <__assert_fail@plt+0x7324>
   188fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18900:	strd	r6, [sp, #8]
   18904:	ldr	r7, [r0, #84]	; 0x54
   18908:	strd	r8, [sp, #16]
   1890c:	strd	sl, [sp, #24]
   18910:	mov	fp, r1
   18914:	str	lr, [sp, #32]
   18918:	sub	sp, sp, #52	; 0x34
   1891c:	ldr	r8, [r7, #24]
   18920:	str	r3, [sp, #24]
   18924:	add	r3, r3, r3, lsl #1
   18928:	add	r8, r8, r3, lsl #2
   1892c:	ldr	r1, [r8, #4]
   18930:	cmp	r1, #0
   18934:	ble	18ae8 <__assert_fail@plt+0x7620>
   18938:	ldr	r3, [sp, #88]	; 0x58
   1893c:	mov	r9, r2
   18940:	mov	r2, #1
   18944:	mov	sl, r0
   18948:	and	r0, fp, #2
   1894c:	mov	r4, #0
   18950:	str	r0, [sp, #12]
   18954:	and	r0, fp, #1
   18958:	add	r3, r3, r3, lsl r2
   1895c:	str	r0, [sp, #16]
   18960:	lsl	r2, r2, r9
   18964:	lsl	r3, r3, #3
   18968:	str	r2, [sp, #20]
   1896c:	str	r3, [sp, #28]
   18970:	mvn	r3, r2
   18974:	str	r3, [sp, #32]
   18978:	b	18990 <__assert_fail@plt+0x74c8>
   1897c:	cmp	r3, #4
   18980:	beq	18a0c <__assert_fail@plt+0x7544>
   18984:	add	r4, r4, #1
   18988:	cmp	r4, r1
   1898c:	bge	18ae8 <__assert_fail@plt+0x7620>
   18990:	ldr	r3, [r8, #8]
   18994:	ldr	r2, [r7]
   18998:	ldr	r5, [r3, r4, lsl #2]
   1899c:	add	r3, r2, r5, lsl #3
   189a0:	ldrb	r3, [r3, #4]
   189a4:	cmp	r3, #8
   189a8:	beq	189d4 <__assert_fail@plt+0x750c>
   189ac:	cmp	r3, #9
   189b0:	bne	1897c <__assert_fail@plt+0x74b4>
   189b4:	ldr	r3, [sp, #12]
   189b8:	cmp	r3, #0
   189bc:	beq	18984 <__assert_fail@plt+0x74bc>
   189c0:	ldr	r3, [r2, r5, lsl #3]
   189c4:	cmp	r3, r9
   189c8:	bne	18984 <__assert_fail@plt+0x74bc>
   189cc:	mov	r0, #0
   189d0:	b	189f0 <__assert_fail@plt+0x7528>
   189d4:	ldr	r3, [sp, #16]
   189d8:	cmp	r3, #0
   189dc:	beq	18984 <__assert_fail@plt+0x74bc>
   189e0:	ldr	r3, [r2, r5, lsl #3]
   189e4:	cmp	r3, r9
   189e8:	bne	18984 <__assert_fail@plt+0x74bc>
   189ec:	mvn	r0, #0
   189f0:	add	sp, sp, #52	; 0x34
   189f4:	ldrd	r4, [sp]
   189f8:	ldrd	r6, [sp, #8]
   189fc:	ldrd	r8, [sp, #16]
   18a00:	ldrd	sl, [sp, #24]
   18a04:	add	sp, sp, #32
   18a08:	pop	{pc}		; (ldr pc, [sp], #4)
   18a0c:	ldr	r3, [sp, #88]	; 0x58
   18a10:	cmn	r3, #1
   18a14:	beq	18984 <__assert_fail@plt+0x74bc>
   18a18:	add	r3, r5, r5, lsl #1
   18a1c:	ldr	r2, [sp, #28]
   18a20:	cmp	r9, #31
   18a24:	ldr	r6, [sl, #116]	; 0x74
   18a28:	lsl	r3, r3, #2
   18a2c:	str	r3, [sp, #36]	; 0x24
   18a30:	add	r6, r6, r2
   18a34:	bgt	18af0 <__assert_fail@plt+0x7628>
   18a38:	ldr	r3, [sp, #12]
   18a3c:	add	r6, r6, #24
   18a40:	str	r8, [sp, #40]	; 0x28
   18a44:	str	r4, [sp, #44]	; 0x2c
   18a48:	ldr	r4, [sp, #24]
   18a4c:	cmp	r3, #0
   18a50:	bne	18b80 <__assert_fail@plt+0x76b8>
   18a54:	ldr	r8, [sp, #36]	; 0x24
   18a58:	ldr	r3, [r6, #-24]	; 0xffffffe8
   18a5c:	cmp	r5, r3
   18a60:	bne	18ac0 <__assert_fail@plt+0x75f8>
   18a64:	ldr	r3, [r6, #-8]
   18a68:	mov	r2, r9
   18a6c:	mov	r1, fp
   18a70:	mov	r0, sl
   18a74:	ldr	ip, [sp, #20]
   18a78:	tst	ip, r3
   18a7c:	beq	18ac0 <__assert_fail@plt+0x75f8>
   18a80:	ldr	r3, [r7, #20]
   18a84:	add	r3, r3, r8
   18a88:	ldr	r3, [r3, #8]
   18a8c:	ldr	ip, [r3]
   18a90:	cmp	r4, ip
   18a94:	mov	r3, ip
   18a98:	beq	18b74 <__assert_fail@plt+0x76ac>
   18a9c:	ldr	ip, [sp, #88]	; 0x58
   18aa0:	str	ip, [sp]
   18aa4:	bl	188fc <__assert_fail@plt+0x7434>
   18aa8:	cmn	r0, #1
   18aac:	beq	189ec <__assert_fail@plt+0x7524>
   18ab0:	ldr	r3, [r6, #-8]
   18ab4:	ldr	r2, [sp, #32]
   18ab8:	and	r3, r3, r2
   18abc:	str	r3, [r6, #-8]
   18ac0:	add	r6, r6, #24
   18ac4:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   18ac8:	cmp	r3, #0
   18acc:	bne	18a58 <__assert_fail@plt+0x7590>
   18ad0:	ldr	r8, [sp, #40]	; 0x28
   18ad4:	ldr	r4, [sp, #44]	; 0x2c
   18ad8:	add	r4, r4, #1
   18adc:	ldr	r1, [r8, #4]
   18ae0:	cmp	r4, r1
   18ae4:	blt	18990 <__assert_fail@plt+0x74c8>
   18ae8:	asr	r0, fp, #1
   18aec:	b	189f0 <__assert_fail@plt+0x7528>
   18af0:	ldr	r2, [sp, #12]
   18af4:	add	r6, r6, #24
   18af8:	cmp	r2, #0
   18afc:	bne	18c0c <__assert_fail@plt+0x7744>
   18b00:	str	r8, [sp, #36]	; 0x24
   18b04:	mov	r8, r3
   18b08:	str	r4, [sp, #40]	; 0x28
   18b0c:	ldr	r4, [sp, #24]
   18b10:	mov	r2, r9
   18b14:	mov	r1, fp
   18b18:	ldr	r3, [r6, #-24]	; 0xffffffe8
   18b1c:	mov	r0, sl
   18b20:	add	r6, r6, #24
   18b24:	cmp	r5, r3
   18b28:	bne	18b5c <__assert_fail@plt+0x7694>
   18b2c:	ldr	r3, [r7, #20]
   18b30:	add	r3, r3, r8
   18b34:	ldr	r3, [r3, #8]
   18b38:	ldr	ip, [r3]
   18b3c:	cmp	r4, ip
   18b40:	mov	r3, ip
   18b44:	beq	18b74 <__assert_fail@plt+0x76ac>
   18b48:	ldr	ip, [sp, #88]	; 0x58
   18b4c:	str	ip, [sp]
   18b50:	bl	188fc <__assert_fail@plt+0x7434>
   18b54:	cmn	r0, #1
   18b58:	beq	189ec <__assert_fail@plt+0x7524>
   18b5c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   18b60:	cmp	r3, #0
   18b64:	bne	18b10 <__assert_fail@plt+0x7648>
   18b68:	ldr	r8, [sp, #36]	; 0x24
   18b6c:	ldr	r4, [sp, #40]	; 0x28
   18b70:	b	18ad8 <__assert_fail@plt+0x7610>
   18b74:	ldr	r3, [sp, #16]
   18b78:	rsb	r0, r3, #0
   18b7c:	b	189f0 <__assert_fail@plt+0x7528>
   18b80:	ldr	r8, [sp, #88]	; 0x58
   18b84:	b	18ba8 <__assert_fail@plt+0x76e0>
   18b88:	ldr	r3, [r6, #-8]
   18b8c:	ldr	r2, [sp, #32]
   18b90:	and	r3, r3, r2
   18b94:	str	r3, [r6, #-8]
   18b98:	add	r6, r6, #24
   18b9c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   18ba0:	cmp	r3, #0
   18ba4:	beq	18ad0 <__assert_fail@plt+0x7608>
   18ba8:	ldr	r3, [r6, #-24]	; 0xffffffe8
   18bac:	cmp	r3, r5
   18bb0:	bne	18b98 <__assert_fail@plt+0x76d0>
   18bb4:	ldr	r3, [r6, #-8]
   18bb8:	mov	r2, r9
   18bbc:	mov	r1, fp
   18bc0:	mov	r0, sl
   18bc4:	ldr	ip, [sp, #20]
   18bc8:	tst	ip, r3
   18bcc:	beq	18b98 <__assert_fail@plt+0x76d0>
   18bd0:	ldr	r3, [r7, #20]
   18bd4:	ldr	ip, [sp, #36]	; 0x24
   18bd8:	add	r3, r3, ip
   18bdc:	ldr	r3, [r3, #8]
   18be0:	ldr	ip, [r3]
   18be4:	cmp	r4, ip
   18be8:	mov	r3, ip
   18bec:	beq	18b74 <__assert_fail@plt+0x76ac>
   18bf0:	str	r8, [sp]
   18bf4:	bl	188fc <__assert_fail@plt+0x7434>
   18bf8:	cmn	r0, #1
   18bfc:	beq	189ec <__assert_fail@plt+0x7524>
   18c00:	cmp	r0, #0
   18c04:	bne	18b88 <__assert_fail@plt+0x76c0>
   18c08:	b	189cc <__assert_fail@plt+0x7504>
   18c0c:	str	r8, [sp, #40]	; 0x28
   18c10:	str	r4, [sp, #44]	; 0x2c
   18c14:	ldr	r4, [sp, #24]
   18c18:	ldr	r8, [sp, #88]	; 0x58
   18c1c:	b	18c2c <__assert_fail@plt+0x7764>
   18c20:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   18c24:	cmp	r3, #0
   18c28:	beq	18ad0 <__assert_fail@plt+0x7608>
   18c2c:	ldr	r3, [r6, #-24]	; 0xffffffe8
   18c30:	mov	r2, r9
   18c34:	mov	r1, fp
   18c38:	mov	r0, sl
   18c3c:	add	r6, r6, #24
   18c40:	cmp	r5, r3
   18c44:	bne	18c20 <__assert_fail@plt+0x7758>
   18c48:	ldr	r3, [r7, #20]
   18c4c:	ldr	ip, [sp, #36]	; 0x24
   18c50:	add	r3, r3, ip
   18c54:	ldr	r3, [r3, #8]
   18c58:	ldr	ip, [r3]
   18c5c:	cmp	r4, ip
   18c60:	mov	r3, ip
   18c64:	beq	18b74 <__assert_fail@plt+0x76ac>
   18c68:	str	r8, [sp]
   18c6c:	bl	188fc <__assert_fail@plt+0x7434>
   18c70:	cmn	r0, #1
   18c74:	beq	189ec <__assert_fail@plt+0x7524>
   18c78:	cmp	r0, #0
   18c7c:	beq	189cc <__assert_fail@plt+0x7504>
   18c80:	b	18c20 <__assert_fail@plt+0x7758>
   18c84:	ldr	r3, [r0, #80]	; 0x50
   18c88:	strd	r4, [sp, #-16]!
   18c8c:	mov	r4, r0
   18c90:	mov	r5, r1
   18c94:	str	r6, [sp, #8]
   18c98:	str	lr, [sp, #12]
   18c9c:	cmp	r3, #1
   18ca0:	ble	18ce8 <__assert_fail@plt+0x7820>
   18ca4:	cmn	r1, #-1073741823	; 0xc0000001
   18ca8:	bhi	18d28 <__assert_fail@plt+0x7860>
   18cac:	lsl	r6, r1, #2
   18cb0:	ldr	r0, [r0, #8]
   18cb4:	mov	r1, r6
   18cb8:	bl	2bb50 <__assert_fail@plt+0x1a688>
   18cbc:	subs	r3, r0, #0
   18cc0:	beq	18d28 <__assert_fail@plt+0x7860>
   18cc4:	ldr	r0, [r4, #12]
   18cc8:	str	r3, [r4, #8]
   18ccc:	cmp	r0, #0
   18cd0:	beq	18ce8 <__assert_fail@plt+0x7820>
   18cd4:	mov	r1, r6
   18cd8:	bl	2bb50 <__assert_fail@plt+0x1a688>
   18cdc:	cmp	r0, #0
   18ce0:	beq	18d28 <__assert_fail@plt+0x7860>
   18ce4:	str	r0, [r4, #12]
   18ce8:	ldrb	r3, [r4, #75]	; 0x4b
   18cec:	cmp	r3, #0
   18cf0:	bne	18d0c <__assert_fail@plt+0x7844>
   18cf4:	str	r5, [r4, #36]	; 0x24
   18cf8:	mov	r0, #0
   18cfc:	ldrd	r4, [sp]
   18d00:	ldr	r6, [sp, #8]
   18d04:	add	sp, sp, #12
   18d08:	pop	{pc}		; (ldr pc, [sp], #4)
   18d0c:	mov	r1, r5
   18d10:	ldr	r0, [r4, #4]
   18d14:	bl	2bb50 <__assert_fail@plt+0x1a688>
   18d18:	cmp	r0, #0
   18d1c:	beq	18d28 <__assert_fail@plt+0x7860>
   18d20:	str	r0, [r4, #4]
   18d24:	b	18cf4 <__assert_fail@plt+0x782c>
   18d28:	ldrd	r4, [sp]
   18d2c:	mov	r0, #12
   18d30:	ldr	r6, [sp, #8]
   18d34:	add	sp, sp, #12
   18d38:	pop	{pc}		; (ldr pc, [sp], #4)
   18d3c:	ldr	r3, [r1, #8]
   18d40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18d44:	mov	r4, #0
   18d48:	mov	r5, r1
   18d4c:	strd	r6, [sp, #8]
   18d50:	mov	r7, r2
   18d54:	str	r8, [sp, #16]
   18d58:	mov	r8, r0
   18d5c:	str	lr, [sp, #20]
   18d60:	lsl	r0, r3, #2
   18d64:	str	r2, [r1]
   18d68:	str	r3, [r1, #16]
   18d6c:	str	r4, [r1, #20]
   18d70:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   18d74:	cmp	r0, r4
   18d78:	str	r0, [r5, #24]
   18d7c:	beq	18e58 <__assert_fail@plt+0x7990>
   18d80:	ldr	r1, [r5, #8]
   18d84:	cmp	r1, #0
   18d88:	bgt	18d98 <__assert_fail@plt+0x78d0>
   18d8c:	b	18de4 <__assert_fail@plt+0x791c>
   18d90:	cmp	r4, r1
   18d94:	bge	18de4 <__assert_fail@plt+0x791c>
   18d98:	ldr	r2, [r5, #12]
   18d9c:	ldr	r3, [r8]
   18da0:	ldr	r6, [r2, r4, lsl #2]
   18da4:	add	r4, r4, #1
   18da8:	add	r3, r3, r6, lsl #3
   18dac:	ldrb	r3, [r3, #4]
   18db0:	tst	r3, #8
   18db4:	bne	18d90 <__assert_fail@plt+0x78c8>
   18db8:	ldr	r3, [r5, #16]
   18dbc:	ldr	r1, [r5, #20]
   18dc0:	ldr	r0, [r5, #24]
   18dc4:	cmp	r3, r1
   18dc8:	beq	18e30 <__assert_fail@plt+0x7968>
   18dcc:	add	r3, r1, #1
   18dd0:	str	r3, [r5, #20]
   18dd4:	str	r6, [r0, r1, lsl #2]
   18dd8:	ldr	r1, [r5, #8]
   18ddc:	cmp	r4, r1
   18de0:	blt	18d98 <__assert_fail@plt+0x78d0>
   18de4:	ldr	r6, [r8, #32]
   18de8:	ldr	r4, [r8, #68]	; 0x44
   18dec:	and	r7, r7, r4
   18df0:	add	r7, r7, r7, lsl #1
   18df4:	lsl	r4, r7, #2
   18df8:	add	r7, r6, r4
   18dfc:	ldr	r3, [r6, r4]
   18e00:	ldrd	r0, [r7, #4]
   18e04:	add	r2, r3, #1
   18e08:	cmp	r0, r3
   18e0c:	ble	18e60 <__assert_fail@plt+0x7998>
   18e10:	mov	r0, #0
   18e14:	str	r2, [r6, r4]
   18e18:	str	r5, [r1, r3, lsl #2]
   18e1c:	ldrd	r4, [sp]
   18e20:	ldrd	r6, [sp, #8]
   18e24:	ldr	r8, [sp, #16]
   18e28:	add	sp, sp, #20
   18e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e30:	add	r1, r1, #1
   18e34:	lsl	r3, r1, #1
   18e38:	lsl	r1, r1, #3
   18e3c:	str	r3, [r5, #16]
   18e40:	bl	2bb50 <__assert_fail@plt+0x1a688>
   18e44:	cmp	r0, #0
   18e48:	beq	18e58 <__assert_fail@plt+0x7990>
   18e4c:	str	r0, [r5, #24]
   18e50:	ldr	r1, [r5, #20]
   18e54:	b	18dcc <__assert_fail@plt+0x7904>
   18e58:	mov	r0, #12
   18e5c:	b	18e1c <__assert_fail@plt+0x7954>
   18e60:	mov	r0, r1
   18e64:	lsl	r1, r2, #3
   18e68:	lsl	r8, r2, #1
   18e6c:	bl	2bb50 <__assert_fail@plt+0x1a688>
   18e70:	subs	r1, r0, #0
   18e74:	beq	18e58 <__assert_fail@plt+0x7990>
   18e78:	ldr	r3, [r6, r4]
   18e7c:	str	r8, [r7, #4]
   18e80:	str	r1, [r7, #8]
   18e84:	add	r2, r3, #1
   18e88:	b	18e10 <__assert_fail@plt+0x7948>
   18e8c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18e90:	mov	r5, r0
   18e94:	ldr	r4, [r0, #28]
   18e98:	ldr	r3, [r0, #48]	; 0x30
   18e9c:	strd	r6, [sp, #8]
   18ea0:	strd	r8, [sp, #16]
   18ea4:	ldr	r8, [r0, #36]	; 0x24
   18ea8:	str	lr, [sp, #24]
   18eac:	sub	sp, sp, #84	; 0x54
   18eb0:	cmp	r8, r3
   18eb4:	movge	r8, r3
   18eb8:	cmp	r8, r4
   18ebc:	ble	18f50 <__assert_fail@plt+0x7a88>
   18ec0:	add	r9, r0, #16
   18ec4:	ldr	r3, [r5, #64]	; 0x40
   18ec8:	sub	r2, r8, r4
   18ecc:	ldrd	r0, [r9]
   18ed0:	cmp	r3, #0
   18ed4:	strd	r0, [sp, #8]
   18ed8:	bne	18fa4 <__assert_fail@plt+0x7adc>
   18edc:	ldr	r1, [r5]
   18ee0:	ldr	r3, [r5, #24]
   18ee4:	add	r3, r4, r3
   18ee8:	add	r1, r1, r3
   18eec:	mov	r3, r9
   18ef0:	add	r0, sp, #4
   18ef4:	bl	14760 <__assert_fail@plt+0x3298>
   18ef8:	sub	r3, r0, #1
   18efc:	cmn	r3, #3
   18f00:	bhi	18f70 <__assert_fail@plt+0x7aa8>
   18f04:	cmn	r0, #2
   18f08:	ldrne	lr, [sp, #4]
   18f0c:	beq	1904c <__assert_fail@plt+0x7b84>
   18f10:	add	r2, r4, #1
   18f14:	add	r1, r4, r0
   18f18:	lsl	r3, r4, #2
   18f1c:	ldr	ip, [r5, #8]
   18f20:	cmp	r2, r1
   18f24:	str	lr, [ip, r4, lsl #2]
   18f28:	bge	1903c <__assert_fail@plt+0x7b74>
   18f2c:	sub	r2, r0, #-1073741823	; 0xc0000001
   18f30:	add	r3, r3, #4
   18f34:	mov	r4, r1
   18f38:	lsl	r2, r2, #2
   18f3c:	add	r0, ip, r3
   18f40:	mov	r1, #255	; 0xff
   18f44:	bl	113e4 <memset@plt>
   18f48:	cmp	r4, r8
   18f4c:	blt	18ec4 <__assert_fail@plt+0x79fc>
   18f50:	str	r4, [r5, #28]
   18f54:	str	r4, [r5, #32]
   18f58:	add	sp, sp, #84	; 0x54
   18f5c:	ldrd	r4, [sp]
   18f60:	ldrd	r6, [sp, #8]
   18f64:	ldrd	r8, [sp, #16]
   18f68:	add	sp, sp, #24
   18f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f70:	ldr	r3, [r5]
   18f74:	mov	r0, #1
   18f78:	ldr	r1, [r5, #24]
   18f7c:	ldr	r2, [r5, #64]	; 0x40
   18f80:	add	r3, r3, r4
   18f84:	ldrd	r6, [sp, #8]
   18f88:	ldrb	lr, [r3, r1]
   18f8c:	cmp	r2, #0
   18f90:	str	lr, [sp, #4]
   18f94:	ldrbne	lr, [r2, lr]
   18f98:	strd	r6, [r9]
   18f9c:	strne	lr, [sp, #4]
   18fa0:	b	18f10 <__assert_fail@plt+0x7a48>
   18fa4:	ldr	r1, [r5, #80]	; 0x50
   18fa8:	cmp	r1, #0
   18fac:	cmpgt	r2, #0
   18fb0:	ble	19034 <__assert_fail@plt+0x7b6c>
   18fb4:	ldr	r1, [r5]
   18fb8:	ldr	r0, [r5, #4]
   18fbc:	ldr	ip, [r5, #24]
   18fc0:	add	r1, r1, r4
   18fc4:	ldrb	r1, [r1, ip]
   18fc8:	ldrb	r1, [r3, r1]
   18fcc:	strb	r1, [r0, r4]
   18fd0:	ldr	r3, [r5, #80]	; 0x50
   18fd4:	strb	r1, [sp, #16]
   18fd8:	cmp	r2, r3
   18fdc:	movlt	r3, r2
   18fe0:	cmp	r3, #1
   18fe4:	ble	19034 <__assert_fail@plt+0x7b6c>
   18fe8:	add	r0, sp, #16
   18fec:	mov	r1, #1
   18ff0:	ldr	r3, [r5]
   18ff4:	ldr	ip, [r5, #24]
   18ff8:	ldr	lr, [r5, #64]	; 0x40
   18ffc:	add	r3, r3, r4
   19000:	add	r3, r3, r1
   19004:	ldrb	ip, [r3, ip]
   19008:	ldr	r3, [r5, #4]
   1900c:	ldrb	ip, [lr, ip]
   19010:	add	r3, r3, r1
   19014:	add	r1, r1, #1
   19018:	strb	ip, [r3, r4]
   1901c:	ldr	r3, [r5, #80]	; 0x50
   19020:	strb	ip, [r0, #1]!
   19024:	cmp	r2, r3
   19028:	movlt	r3, r2
   1902c:	cmp	r3, r1
   19030:	bgt	18ff0 <__assert_fail@plt+0x7b28>
   19034:	add	r1, sp, #16
   19038:	b	18eec <__assert_fail@plt+0x7a24>
   1903c:	cmp	r8, r2
   19040:	mov	r4, r2
   19044:	bgt	18ec4 <__assert_fail@plt+0x79fc>
   19048:	b	18f50 <__assert_fail@plt+0x7a88>
   1904c:	ldr	r2, [r5, #36]	; 0x24
   19050:	ldr	r3, [r5, #48]	; 0x30
   19054:	cmp	r2, r3
   19058:	bge	18f70 <__assert_fail@plt+0x7aa8>
   1905c:	ldrd	r2, [sp, #8]
   19060:	strd	r2, [r5, #16]
   19064:	b	18f50 <__assert_fail@plt+0x7a88>
   19068:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1906c:	mov	r4, r0
   19070:	ldr	r5, [r0, #28]
   19074:	ldr	r3, [r0, #48]	; 0x30
   19078:	strd	r6, [sp, #8]
   1907c:	ldr	r6, [r0, #36]	; 0x24
   19080:	strd	r8, [sp, #16]
   19084:	strd	sl, [sp, #24]
   19088:	str	lr, [sp, #32]
   1908c:	sub	sp, sp, #108	; 0x6c
   19090:	ldrb	r2, [r0, #74]	; 0x4a
   19094:	cmp	r6, r3
   19098:	movge	r6, r3
   1909c:	cmp	r2, #0
   190a0:	bne	190b0 <__assert_fail@plt+0x7be8>
   190a4:	ldr	r3, [r0, #64]	; 0x40
   190a8:	cmp	r3, #0
   190ac:	beq	191f0 <__assert_fail@plt+0x7d28>
   190b0:	ldr	r7, [r4, #32]
   190b4:	cmp	r5, r6
   190b8:	bge	191c8 <__assert_fail@plt+0x7d00>
   190bc:	add	r3, r4, #16
   190c0:	sub	fp, r6, r5
   190c4:	str	r3, [sp, #20]
   190c8:	add	r3, sp, #28
   190cc:	str	r3, [sp, #12]
   190d0:	ldrd	r0, [r4, #16]
   190d4:	ldr	r3, [r4, #64]	; 0x40
   190d8:	strd	r0, [sp, #32]
   190dc:	cmp	r3, #0
   190e0:	bne	193c0 <__assert_fail@plt+0x7ef8>
   190e4:	ldr	r8, [r4]
   190e8:	ldr	r3, [r4, #24]
   190ec:	add	r3, r7, r3
   190f0:	add	r3, r8, r3
   190f4:	mov	r1, r3
   190f8:	str	r3, [sp, #4]
   190fc:	mov	r2, fp
   19100:	ldr	r0, [sp, #12]
   19104:	ldr	r3, [sp, #20]
   19108:	bl	14760 <__assert_fail@plt+0x3298>
   1910c:	sub	r3, r0, #1
   19110:	mov	r8, r0
   19114:	cmn	r3, #4
   19118:	str	r3, [sp, #8]
   1911c:	bhi	19458 <__assert_fail@plt+0x7f90>
   19120:	ldr	r9, [sp, #28]
   19124:	mov	fp, r5
   19128:	mov	r0, r9
   1912c:	bl	114a4 <towupper@plt>
   19130:	cmp	r9, r0
   19134:	mov	sl, r0
   19138:	beq	19440 <__assert_fail@plt+0x7f78>
   1913c:	add	r9, sp, #40	; 0x28
   19140:	add	r2, sp, #32
   19144:	mov	r0, r9
   19148:	mov	r1, sl
   1914c:	bl	11174 <wcrtomb@plt>
   19150:	cmp	r8, r0
   19154:	mov	r3, r0
   19158:	bne	194e8 <__assert_fail@plt+0x8020>
   1915c:	ldr	r0, [r4, #4]
   19160:	mov	r1, r9
   19164:	mov	r2, r8
   19168:	add	r0, r0, r5
   1916c:	bl	11204 <memcpy@plt>
   19170:	ldrb	r2, [r4, #76]	; 0x4c
   19174:	cmp	r2, #0
   19178:	bne	194c8 <__assert_fail@plt+0x8000>
   1917c:	add	r2, r8, r7
   19180:	ldr	r0, [r4, #8]
   19184:	add	r5, r5, #1
   19188:	add	ip, r8, fp
   1918c:	cmp	r5, ip
   19190:	mov	r7, r2
   19194:	lsl	r1, fp, #2
   19198:	str	sl, [r0, fp, lsl #2]
   1919c:	bge	190b4 <__assert_fail@plt+0x7bec>
   191a0:	sub	r2, r8, #-1073741823	; 0xc0000001
   191a4:	add	r1, r1, #4
   191a8:	lsl	r2, r2, #2
   191ac:	add	r0, r0, r1
   191b0:	mov	r1, #255	; 0xff
   191b4:	mov	r5, ip
   191b8:	bl	113e4 <memset@plt>
   191bc:	b	190b4 <__assert_fail@plt+0x7bec>
   191c0:	ldrd	r2, [sp, #32]
   191c4:	strd	r2, [r4, #16]
   191c8:	mov	r0, #0
   191cc:	str	r5, [r4, #28]
   191d0:	str	r7, [r4, #32]
   191d4:	add	sp, sp, #108	; 0x6c
   191d8:	ldrd	r4, [sp]
   191dc:	ldrd	r6, [sp, #8]
   191e0:	ldrd	r8, [sp, #16]
   191e4:	ldrd	sl, [sp, #24]
   191e8:	add	sp, sp, #32
   191ec:	pop	{pc}		; (ldr pc, [sp], #4)
   191f0:	ldrb	r3, [r0, #76]	; 0x4c
   191f4:	cmp	r3, #0
   191f8:	bne	190b0 <__assert_fail@plt+0x7be8>
   191fc:	cmp	r5, r6
   19200:	bge	19430 <__assert_fail@plt+0x7f68>
   19204:	add	sl, r0, #16
   19208:	str	r6, [sp, #4]
   1920c:	str	sl, [sp, #20]
   19210:	b	19290 <__assert_fail@plt+0x7dc8>
   19214:	add	r3, sp, #40	; 0x28
   19218:	add	r2, sp, #32
   1921c:	mov	r0, r3
   19220:	mov	r1, r9
   19224:	str	r3, [sp, #8]
   19228:	bl	11174 <wcrtomb@plt>
   1922c:	cmp	r7, r0
   19230:	bne	19418 <__assert_fail@plt+0x7f50>
   19234:	ldr	r0, [r4, #4]
   19238:	mov	r2, r7
   1923c:	ldr	r3, [sp, #8]
   19240:	add	r0, r0, r5
   19244:	mov	r1, r3
   19248:	bl	11204 <memcpy@plt>
   1924c:	ldr	r0, [r4, #8]
   19250:	add	r5, r5, #1
   19254:	add	ip, r7, r8
   19258:	cmp	r5, ip
   1925c:	lsl	r3, r8, #2
   19260:	str	r9, [r0, r8, lsl #2]
   19264:	bge	19284 <__assert_fail@plt+0x7dbc>
   19268:	sub	r2, r7, #-1073741823	; 0xc0000001
   1926c:	add	r3, r3, #4
   19270:	lsl	r2, r2, #2
   19274:	add	r0, r0, r3
   19278:	mov	r1, #255	; 0xff
   1927c:	mov	r5, ip
   19280:	bl	113e4 <memset@plt>
   19284:	ldr	r3, [sp, #4]
   19288:	cmp	r3, r5
   1928c:	ble	19430 <__assert_fail@plt+0x7f68>
   19290:	ldr	fp, [r4]
   19294:	mov	r8, r5
   19298:	ldr	r7, [r4, #24]
   1929c:	add	r2, fp, r7
   192a0:	ldrb	r9, [r2, r5]
   192a4:	tst	r9, #128	; 0x80
   192a8:	bne	192cc <__assert_fail@plt+0x7e04>
   192ac:	mov	r0, sl
   192b0:	bl	11234 <mbsinit@plt>
   192b4:	cmp	r0, #0
   192b8:	beq	192cc <__assert_fail@plt+0x7e04>
   192bc:	mov	r0, r9
   192c0:	bl	114a4 <towupper@plt>
   192c4:	bics	r3, r0, #127	; 0x7f
   192c8:	beq	19350 <__assert_fail@plt+0x7e88>
   192cc:	ldr	r3, [sp, #4]
   192d0:	add	r1, r7, r5
   192d4:	add	r0, sp, #28
   192d8:	add	r1, fp, r1
   192dc:	ldrd	r6, [sl]
   192e0:	str	r0, [sp, #12]
   192e4:	sub	r3, r3, r5
   192e8:	mov	r2, r3
   192ec:	str	r3, [sp, #16]
   192f0:	mov	r3, sl
   192f4:	strd	r6, [sp, #32]
   192f8:	bl	14760 <__assert_fail@plt+0x3298>
   192fc:	sub	r3, r0, #1
   19300:	mov	r7, r0
   19304:	cmn	r3, #4
   19308:	bhi	19368 <__assert_fail@plt+0x7ea0>
   1930c:	ldr	r3, [sp, #28]
   19310:	mov	r0, r3
   19314:	str	r3, [sp, #8]
   19318:	bl	114a4 <towupper@plt>
   1931c:	ldr	r3, [sp, #8]
   19320:	mov	r9, r0
   19324:	cmp	r3, r0
   19328:	bne	19214 <__assert_fail@plt+0x7d4c>
   1932c:	ldr	r1, [r4]
   19330:	mov	r2, r7
   19334:	ldr	r3, [r4, #24]
   19338:	ldr	r0, [r4, #4]
   1933c:	add	r3, r5, r3
   19340:	add	r1, r1, r3
   19344:	add	r0, r0, r5
   19348:	bl	11204 <memcpy@plt>
   1934c:	b	1924c <__assert_fail@plt+0x7d84>
   19350:	ldr	r3, [r4, #4]
   19354:	strb	r0, [r3, r5]
   19358:	ldr	r3, [r4, #8]
   1935c:	str	r0, [r3, r5, lsl #2]
   19360:	add	r5, r5, #1
   19364:	b	19284 <__assert_fail@plt+0x7dbc>
   19368:	cmn	r3, #3
   1936c:	beq	19398 <__assert_fail@plt+0x7ed0>
   19370:	ldr	r3, [r4, #4]
   19374:	cmn	r0, #1
   19378:	strb	r9, [r3, r5]
   1937c:	add	r5, r5, #1
   19380:	ldr	r3, [r4, #8]
   19384:	str	r9, [r3, r8, lsl #2]
   19388:	bne	19284 <__assert_fail@plt+0x7dbc>
   1938c:	ldrd	r2, [sp, #32]
   19390:	strd	r2, [sl]
   19394:	b	19284 <__assert_fail@plt+0x7dbc>
   19398:	ldr	r2, [r4, #36]	; 0x24
   1939c:	ldr	r3, [r4, #48]	; 0x30
   193a0:	cmp	r2, r3
   193a4:	blt	19428 <__assert_fail@plt+0x7f60>
   193a8:	ldr	r3, [r4, #4]
   193ac:	strb	r9, [r3, r5]
   193b0:	add	r5, r5, #1
   193b4:	ldr	r3, [r4, #8]
   193b8:	str	r9, [r3, r8, lsl #2]
   193bc:	b	19284 <__assert_fail@plt+0x7dbc>
   193c0:	ldr	lr, [r4, #80]	; 0x50
   193c4:	cmp	fp, #0
   193c8:	cmpgt	lr, #0
   193cc:	ble	196b0 <__assert_fail@plt+0x81e8>
   193d0:	ldr	r8, [r4]
   193d4:	cmp	lr, fp
   193d8:	add	r9, sp, #40	; 0x28
   193dc:	movge	lr, fp
   193e0:	mov	r1, r9
   193e4:	ldr	r2, [r4, #24]
   193e8:	add	r2, r7, r2
   193ec:	add	r8, r8, r2
   193f0:	mov	r2, r8
   193f4:	ldrb	r0, [r2], #1
   193f8:	ldrb	r0, [r3, r0]
   193fc:	sub	ip, r2, r8
   19400:	cmp	ip, lr
   19404:	strb	r0, [r1], #1
   19408:	blt	193f4 <__assert_fail@plt+0x7f2c>
   1940c:	mov	r1, r9
   19410:	str	r9, [sp, #4]
   19414:	b	190fc <__assert_fail@plt+0x7c34>
   19418:	mov	r7, r5
   1941c:	ldr	r6, [sp, #4]
   19420:	ldr	fp, [sp, #16]
   19424:	b	190d0 <__assert_fail@plt+0x7c08>
   19428:	ldrd	r2, [sp, #32]
   1942c:	strd	r2, [sl]
   19430:	mov	r0, #0
   19434:	str	r5, [r4, #28]
   19438:	str	r5, [r4, #32]
   1943c:	b	191d4 <__assert_fail@plt+0x7d0c>
   19440:	ldr	r0, [r4, #4]
   19444:	mov	r2, r8
   19448:	ldr	r1, [sp, #4]
   1944c:	add	r0, r0, r5
   19450:	bl	11204 <memcpy@plt>
   19454:	b	19170 <__assert_fail@plt+0x7ca8>
   19458:	cmn	r3, #3
   1945c:	bne	19470 <__assert_fail@plt+0x7fa8>
   19460:	ldr	r1, [r4, #36]	; 0x24
   19464:	ldr	r2, [r4, #48]	; 0x30
   19468:	cmp	r1, r2
   1946c:	blt	191c0 <__assert_fail@plt+0x7cf8>
   19470:	ldr	r2, [r4]
   19474:	ldr	r0, [r4, #24]
   19478:	ldr	r1, [r4, #64]	; 0x40
   1947c:	add	r2, r2, r7
   19480:	ldrb	r2, [r2, r0]
   19484:	cmp	r1, #0
   19488:	ldr	r0, [r4, #4]
   1948c:	ldrbne	r2, [r1, r2]
   19490:	lsl	r1, r5, #2
   19494:	strb	r2, [r0, r5]
   19498:	ldrb	r0, [r4, #76]	; 0x4c
   1949c:	cmp	r0, #0
   194a0:	ldrne	r0, [r4, #12]
   194a4:	strne	r7, [r0, r5, lsl #2]
   194a8:	cmn	r8, #1
   194ac:	add	r7, r7, #1
   194b0:	ldr	r0, [r4, #8]
   194b4:	add	r5, r5, #1
   194b8:	str	r2, [r0, r1]
   194bc:	ldrdeq	r2, [sp, #32]
   194c0:	strdeq	r2, [r4, #16]
   194c4:	b	190b4 <__assert_fail@plt+0x7bec>
   194c8:	ldr	r1, [r4, #12]
   194cc:	add	r2, r8, r7
   194d0:	add	r1, r1, r5, lsl #2
   194d4:	str	r7, [r1], #4
   194d8:	add	r7, r7, #1
   194dc:	cmp	r2, r7
   194e0:	bne	194d4 <__assert_fail@plt+0x800c>
   194e4:	b	19180 <__assert_fail@plt+0x7cb8>
   194e8:	cmn	r0, #1
   194ec:	beq	19440 <__assert_fail@plt+0x7f78>
   194f0:	add	r2, r0, r5
   194f4:	ldr	r0, [r4, #36]	; 0x24
   194f8:	str	r2, [sp, #4]
   194fc:	cmp	r2, r0
   19500:	bhi	191c0 <__assert_fail@plt+0x7cf8>
   19504:	ldr	r2, [r4, #12]
   19508:	cmp	r2, #0
   1950c:	beq	196b8 <__assert_fail@plt+0x81f0>
   19510:	ldrb	r0, [r4, #76]	; 0x4c
   19514:	cmp	r0, #0
   19518:	bne	195b8 <__assert_fail@plt+0x80f0>
   1951c:	cmp	r5, #0
   19520:	beq	195b0 <__assert_fail@plt+0x80e8>
   19524:	ldr	r2, [r4, #12]
   19528:	sub	r1, r5, #1
   1952c:	cmp	r1, #3
   19530:	ubfx	r1, r2, #2, #1
   19534:	bls	196dc <__assert_fail@plt+0x8214>
   19538:	cmp	r1, #0
   1953c:	sub	fp, r5, r1
   19540:	lsr	ip, fp, #1
   19544:	mov	r6, r1
   19548:	add	lr, r1, #1
   1954c:	strne	r0, [r2]
   19550:	add	r0, r2, r1, lsl #2
   19554:	add	ip, r0, ip, lsl #3
   19558:	stm	r0, {r6, lr}
   1955c:	add	r0, r0, #8
   19560:	add	r6, r6, #2
   19564:	cmp	ip, r0
   19568:	add	lr, lr, #2
   1956c:	bne	19558 <__assert_fail@plt+0x8090>
   19570:	bic	r0, fp, #1
   19574:	cmp	r0, fp
   19578:	add	r1, r0, r1
   1957c:	beq	195b0 <__assert_fail@plt+0x80e8>
   19580:	add	ip, r1, #1
   19584:	str	r1, [r2, r1, lsl #2]
   19588:	cmp	ip, r5
   1958c:	bcs	195b0 <__assert_fail@plt+0x80e8>
   19590:	add	r0, r1, #2
   19594:	str	ip, [r2, ip, lsl #2]
   19598:	cmp	r0, r5
   1959c:	bcs	195b0 <__assert_fail@plt+0x80e8>
   195a0:	add	r1, r1, #3
   195a4:	str	r0, [r2, r0, lsl #2]
   195a8:	cmp	r1, r5
   195ac:	strcc	r1, [r2, r1, lsl #2]
   195b0:	mov	r2, #1
   195b4:	strb	r2, [r4, #76]	; 0x4c
   195b8:	ldr	r0, [r4, #4]
   195bc:	mov	r2, r3
   195c0:	mov	r1, r9
   195c4:	str	r3, [sp, #12]
   195c8:	add	r0, r0, r5
   195cc:	bl	11204 <memcpy@plt>
   195d0:	ldr	r3, [sp, #12]
   195d4:	lsl	r2, r5, #2
   195d8:	ldr	r0, [r4, #8]
   195dc:	ldr	ip, [r4, #12]
   195e0:	cmp	r3, #1
   195e4:	add	lr, r0, r2
   195e8:	str	sl, [r0, r5, lsl #2]
   195ec:	add	r2, ip, r2
   195f0:	str	r7, [ip, r5, lsl #2]
   195f4:	bls	19670 <__assert_fail@plt+0x81a8>
   195f8:	cmp	r8, #1
   195fc:	movls	r2, #1
   19600:	bls	1963c <__assert_fail@plt+0x8174>
   19604:	cmp	r8, r3
   19608:	mov	r1, r2
   1960c:	movcc	sl, r8
   19610:	movcs	sl, r3
   19614:	mov	r2, #1
   19618:	mvn	r6, #0
   1961c:	add	r9, r2, r7
   19620:	add	r2, r2, #1
   19624:	cmp	r2, sl
   19628:	str	r9, [r1, #4]!
   1962c:	str	r6, [lr, #4]!
   19630:	bcc	1961c <__assert_fail@plt+0x8154>
   19634:	cmp	r2, r3
   19638:	bcs	19670 <__assert_fail@plt+0x81a8>
   1963c:	ldr	lr, [sp, #8]
   19640:	sub	r1, r5, #-1073741823	; 0xc0000001
   19644:	mvn	r5, #0
   19648:	add	r1, r1, r2
   1964c:	lsl	r1, r1, #2
   19650:	add	ip, ip, r1
   19654:	add	r0, r0, r1
   19658:	add	lr, lr, r7
   1965c:	add	r2, r2, #1
   19660:	str	lr, [ip, #4]!
   19664:	cmp	r3, r2
   19668:	str	r5, [r0, #4]!
   1966c:	bhi	1965c <__assert_fail@plt+0x8194>
   19670:	ldr	r6, [r4, #48]	; 0x30
   19674:	sub	r2, r3, r8
   19678:	ldr	r1, [r4, #52]	; 0x34
   1967c:	add	r6, r2, r6
   19680:	cmp	r1, r7
   19684:	str	r6, [r4, #48]	; 0x30
   19688:	ble	19698 <__assert_fail@plt+0x81d0>
   1968c:	ldr	r1, [r4, #56]	; 0x38
   19690:	add	r2, r1, r2
   19694:	str	r2, [r4, #56]	; 0x38
   19698:	ldr	r2, [r4, #36]	; 0x24
   1969c:	add	r7, r8, r7
   196a0:	ldr	r5, [sp, #4]
   196a4:	cmp	r6, r2
   196a8:	movge	r6, r2
   196ac:	b	190b4 <__assert_fail@plt+0x7bec>
   196b0:	add	r9, sp, #40	; 0x28
   196b4:	b	1940c <__assert_fail@plt+0x7f44>
   196b8:	lsl	r0, r0, #2
   196bc:	str	r3, [sp, #12]
   196c0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   196c4:	cmp	r0, #0
   196c8:	str	r0, [r4, #12]
   196cc:	moveq	r0, #12
   196d0:	ldr	r3, [sp, #12]
   196d4:	bne	19510 <__assert_fail@plt+0x8048>
   196d8:	b	191d4 <__assert_fail@plt+0x7d0c>
   196dc:	mov	r1, r0
   196e0:	b	19580 <__assert_fail@plt+0x80b8>
   196e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   196e8:	mov	r4, r0
   196ec:	ldr	ip, [r0, #8]
   196f0:	strd	r6, [sp, #8]
   196f4:	ldr	r6, [r0, #4]
   196f8:	strd	r8, [sp, #16]
   196fc:	str	sl, [sp, #24]
   19700:	str	lr, [sp, #28]
   19704:	sub	sp, sp, #8
   19708:	add	r3, sp, #8
   1970c:	cmp	ip, r6
   19710:	stmdb	r3, {r1, r2}
   19714:	ldrb	r5, [sp, #4]
   19718:	bcs	197e8 <__assert_fail@plt+0x8320>
   1971c:	ldr	r7, [r0, #12]
   19720:	ldr	r6, [r0, #20]
   19724:	lsl	r0, ip, #3
   19728:	cmp	r5, #5
   1972c:	ldr	lr, [r4]
   19730:	ldrd	r2, [sp]
   19734:	add	r1, lr, r0
   19738:	strd	r2, [lr, r0]
   1973c:	ldr	r3, [r1, #4]
   19740:	bfc	r3, #8, #10
   19744:	str	r3, [r1, #4]
   19748:	beq	197d4 <__assert_fail@plt+0x830c>
   1974c:	sub	r5, r5, #6
   19750:	clz	r5, r5
   19754:	lsr	r5, r5, #5
   19758:	ldrb	r3, [r1, #6]
   1975c:	mvn	r0, #0
   19760:	mov	r2, #0
   19764:	bfi	r3, r5, #4, #1
   19768:	strb	r3, [r1, #6]
   1976c:	str	r0, [r7, ip, lsl #2]
   19770:	ldr	r3, [r4, #8]
   19774:	add	r3, r3, r3, lsl #1
   19778:	lsl	r3, r3, #2
   1977c:	add	r1, r6, r3
   19780:	str	r2, [r6, r3]
   19784:	str	r2, [r1, #4]
   19788:	str	r2, [r1, #8]
   1978c:	ldr	r3, [r4, #8]
   19790:	ldr	r0, [r4, #24]
   19794:	add	r3, r3, r3, lsl #1
   19798:	lsl	r3, r3, #2
   1979c:	add	r1, r0, r3
   197a0:	str	r2, [r0, r3]
   197a4:	str	r2, [r1, #4]
   197a8:	str	r2, [r1, #8]
   197ac:	ldr	r0, [r4, #8]
   197b0:	add	r3, r0, #1
   197b4:	str	r3, [r4, #8]
   197b8:	add	sp, sp, #8
   197bc:	ldrd	r4, [sp]
   197c0:	ldrd	r6, [sp, #8]
   197c4:	ldrd	r8, [sp, #16]
   197c8:	ldr	sl, [sp, #24]
   197cc:	add	sp, sp, #28
   197d0:	pop	{pc}		; (ldr pc, [sp], #4)
   197d4:	ldr	r5, [r4, #92]	; 0x5c
   197d8:	cmp	r5, #1
   197dc:	movle	r5, #0
   197e0:	movgt	r5, #1
   197e4:	b	19758 <__assert_fail@plt+0x8290>
   197e8:	lsl	r9, r6, #1
   197ec:	movw	r3, #21845	; 0x5555
   197f0:	movt	r3, #5461	; 0x1555
   197f4:	cmp	r9, r3
   197f8:	bhi	198b4 <__assert_fail@plt+0x83ec>
   197fc:	lsl	r1, r6, #4
   19800:	ldr	r0, [r0]
   19804:	bl	2bb50 <__assert_fail@plt+0x1a688>
   19808:	cmp	r0, #0
   1980c:	beq	198b4 <__assert_fail@plt+0x83ec>
   19810:	lsl	r8, r6, #3
   19814:	str	r0, [r4]
   19818:	add	r6, r9, r6
   1981c:	ldr	r0, [r4, #12]
   19820:	mov	r1, r8
   19824:	bl	2bb50 <__assert_fail@plt+0x1a688>
   19828:	mov	r7, r0
   1982c:	mov	r1, r8
   19830:	lsl	r8, r6, #3
   19834:	ldr	r0, [r4, #16]
   19838:	bl	2bb50 <__assert_fail@plt+0x1a688>
   1983c:	mov	sl, r0
   19840:	mov	r1, r8
   19844:	ldr	r0, [r4, #20]
   19848:	bl	2bb50 <__assert_fail@plt+0x1a688>
   1984c:	mov	r6, r0
   19850:	mov	r1, r8
   19854:	ldr	r0, [r4, #24]
   19858:	bl	2bb50 <__assert_fail@plt+0x1a688>
   1985c:	cmp	sl, #0
   19860:	cmpne	r7, #0
   19864:	mov	r8, r0
   19868:	beq	19894 <__assert_fail@plt+0x83cc>
   1986c:	cmp	r0, #0
   19870:	cmpne	r6, #0
   19874:	beq	19894 <__assert_fail@plt+0x83cc>
   19878:	str	r9, [r4, #4]
   1987c:	str	r7, [r4, #12]
   19880:	str	sl, [r4, #16]
   19884:	str	r6, [r4, #20]
   19888:	str	r0, [r4, #24]
   1988c:	ldr	ip, [r4, #8]
   19890:	b	19724 <__assert_fail@plt+0x825c>
   19894:	mov	r0, r7
   19898:	bl	14484 <__assert_fail@plt+0x2fbc>
   1989c:	mov	r0, sl
   198a0:	bl	14484 <__assert_fail@plt+0x2fbc>
   198a4:	mov	r0, r6
   198a8:	bl	14484 <__assert_fail@plt+0x2fbc>
   198ac:	mov	r0, r8
   198b0:	bl	14484 <__assert_fail@plt+0x2fbc>
   198b4:	mvn	r0, #0
   198b8:	b	197b8 <__assert_fail@plt+0x82f0>
   198bc:	ldr	r3, [r0, #124]	; 0x7c
   198c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   198c4:	strd	r6, [sp, #8]
   198c8:	str	r8, [sp, #16]
   198cc:	mov	r8, r0
   198d0:	str	lr, [sp, #20]
   198d4:	cmp	r3, #0
   198d8:	ble	1995c <__assert_fail@plt+0x8494>
   198dc:	mov	r7, #0
   198e0:	ldr	r3, [r8, #132]	; 0x84
   198e4:	ldr	r6, [r3, r7, lsl #2]
   198e8:	ldr	r3, [r6, #16]
   198ec:	cmp	r3, #0
   198f0:	ble	19920 <__assert_fail@plt+0x8458>
   198f4:	mov	r4, #0
   198f8:	ldr	r3, [r6, #20]
   198fc:	ldr	r5, [r3, r4, lsl #2]
   19900:	add	r4, r4, #1
   19904:	ldr	r0, [r5, #16]
   19908:	bl	14484 <__assert_fail@plt+0x2fbc>
   1990c:	mov	r0, r5
   19910:	bl	14484 <__assert_fail@plt+0x2fbc>
   19914:	ldr	r3, [r6, #16]
   19918:	cmp	r3, r4
   1991c:	bgt	198f8 <__assert_fail@plt+0x8430>
   19920:	ldr	r0, [r6, #20]
   19924:	bl	14484 <__assert_fail@plt+0x2fbc>
   19928:	ldr	r3, [r6, #8]
   1992c:	cmp	r3, #0
   19930:	beq	1997c <__assert_fail@plt+0x84b4>
   19934:	ldr	r0, [r3, #8]
   19938:	add	r7, r7, #1
   1993c:	bl	14484 <__assert_fail@plt+0x2fbc>
   19940:	ldr	r0, [r6, #8]
   19944:	bl	14484 <__assert_fail@plt+0x2fbc>
   19948:	mov	r0, r6
   1994c:	bl	14484 <__assert_fail@plt+0x2fbc>
   19950:	ldr	r3, [r8, #124]	; 0x7c
   19954:	cmp	r3, r7
   19958:	bgt	198e0 <__assert_fail@plt+0x8418>
   1995c:	mov	r3, #0
   19960:	ldrd	r4, [sp]
   19964:	ldrd	r6, [sp, #8]
   19968:	str	r3, [r8, #108]	; 0x6c
   1996c:	str	r3, [r8, #124]	; 0x7c
   19970:	ldr	r8, [sp, #16]
   19974:	add	sp, sp, #20
   19978:	pop	{pc}		; (ldr pc, [sp], #4)
   1997c:	mov	r0, r6
   19980:	add	r7, r7, #1
   19984:	bl	14484 <__assert_fail@plt+0x2fbc>
   19988:	ldr	r3, [r8, #124]	; 0x7c
   1998c:	cmp	r3, r7
   19990:	bgt	198e0 <__assert_fail@plt+0x8418>
   19994:	b	1995c <__assert_fail@plt+0x8494>
   19998:	ldr	r3, [r0]
   1999c:	strd	r4, [sp, #-16]!
   199a0:	mov	r4, r0
   199a4:	str	r6, [sp, #8]
   199a8:	mov	r6, r1
   199ac:	str	lr, [sp, #12]
   199b0:	cmp	r3, #0
   199b4:	beq	199e8 <__assert_fail@plt+0x8520>
   199b8:	ldmib	r0, {r1, r5}
   199bc:	cmp	r1, #0
   199c0:	bne	19a2c <__assert_fail@plt+0x8564>
   199c4:	str	r6, [r5]
   199c8:	mov	r0, #1
   199cc:	ldr	r3, [r4, #4]
   199d0:	add	r3, r3, r0
   199d4:	str	r3, [r4, #4]
   199d8:	ldrd	r4, [sp]
   199dc:	ldr	r6, [sp, #8]
   199e0:	add	sp, sp, #12
   199e4:	pop	{pc}		; (ldr pc, [sp], #4)
   199e8:	mov	r5, #1
   199ec:	mov	r0, #4
   199f0:	str	r5, [r4]
   199f4:	str	r5, [r4, #4]
   199f8:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   199fc:	mov	r3, r0
   19a00:	cmp	r0, #0
   19a04:	str	r0, [r4, #8]
   19a08:	streq	r3, [r4]
   19a0c:	streq	r3, [r4, #4]
   19a10:	beq	199d8 <__assert_fail@plt+0x8510>
   19a14:	mov	r0, r5
   19a18:	str	r6, [r3]
   19a1c:	ldrd	r4, [sp]
   19a20:	ldr	r6, [sp, #8]
   19a24:	add	sp, sp, #12
   19a28:	pop	{pc}		; (ldr pc, [sp], #4)
   19a2c:	cmp	r3, r1
   19a30:	beq	19ab0 <__assert_fail@plt+0x85e8>
   19a34:	ldr	r3, [r5]
   19a38:	mov	r2, r1
   19a3c:	cmp	r3, r6
   19a40:	ble	19a78 <__assert_fail@plt+0x85b0>
   19a44:	cmp	r1, #0
   19a48:	ble	19a60 <__assert_fail@plt+0x8598>
   19a4c:	lsl	r2, r1, #2
   19a50:	add	r0, r5, #4
   19a54:	mov	r1, r5
   19a58:	bl	111d4 <memmove@plt>
   19a5c:	mov	r2, #0
   19a60:	str	r6, [r5, r2, lsl #2]
   19a64:	mov	r0, #1
   19a68:	ldr	r3, [r4, #4]
   19a6c:	add	r3, r3, r0
   19a70:	str	r3, [r4, #4]
   19a74:	b	199d8 <__assert_fail@plt+0x8510>
   19a78:	sub	r3, r1, #-1073741823	; 0xc0000001
   19a7c:	ldr	r0, [r5, r3, lsl #2]
   19a80:	lsl	r3, r3, #2
   19a84:	cmp	r6, r0
   19a88:	bge	19a60 <__assert_fail@plt+0x8598>
   19a8c:	add	r3, r3, #4
   19a90:	add	r3, r5, r3
   19a94:	str	r0, [r3], #-4
   19a98:	sub	r1, r1, #1
   19a9c:	ldr	r0, [r3, #-4]
   19aa0:	mov	r2, r1
   19aa4:	cmp	r0, r6
   19aa8:	bgt	19a94 <__assert_fail@plt+0x85cc>
   19aac:	b	19a60 <__assert_fail@plt+0x8598>
   19ab0:	lsl	r3, r1, #1
   19ab4:	mov	r0, r5
   19ab8:	lsl	r1, r1, #3
   19abc:	str	r3, [r4]
   19ac0:	bl	2bb50 <__assert_fail@plt+0x1a688>
   19ac4:	subs	r5, r0, #0
   19ac8:	beq	19ad8 <__assert_fail@plt+0x8610>
   19acc:	str	r5, [r4, #8]
   19ad0:	ldr	r1, [r4, #4]
   19ad4:	b	19a34 <__assert_fail@plt+0x856c>
   19ad8:	mov	r0, r5
   19adc:	b	199d8 <__assert_fail@plt+0x8510>
   19ae0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19ae4:	subs	r4, r0, #0
   19ae8:	strd	r6, [sp, #8]
   19aec:	str	r8, [sp, #16]
   19af0:	str	lr, [sp, #20]
   19af4:	ldr	r7, [sp, #28]
   19af8:	beq	19ba4 <__assert_fail@plt+0x86dc>
   19afc:	ldr	ip, [r4]
   19b00:	cmp	ip, #0
   19b04:	beq	19ba4 <__assert_fail@plt+0x86dc>
   19b08:	sub	ip, ip, #1
   19b0c:	ldr	lr, [r4, #8]
   19b10:	mov	r0, r3
   19b14:	add	r5, ip, ip, lsl #1
   19b18:	mov	r8, r1
   19b1c:	lsl	r6, r2, #3
   19b20:	lsl	r5, r5, #3
   19b24:	mov	r2, r6
   19b28:	ldr	r3, [lr, r5]
   19b2c:	add	lr, lr, r5
   19b30:	ldr	r1, [lr, #8]
   19b34:	str	ip, [r4]
   19b38:	str	r3, [r8]
   19b3c:	bl	11204 <memcpy@plt>
   19b40:	ldr	r3, [r4, #8]
   19b44:	mov	r2, r6
   19b48:	ldr	r0, [sp, #24]
   19b4c:	add	r3, r3, r5
   19b50:	ldr	r1, [r3, #8]
   19b54:	add	r1, r1, r6
   19b58:	bl	11204 <memcpy@plt>
   19b5c:	ldr	r0, [r7, #8]
   19b60:	bl	14484 <__assert_fail@plt+0x2fbc>
   19b64:	ldr	r3, [r4, #8]
   19b68:	add	r3, r3, r5
   19b6c:	ldr	r0, [r3, #8]
   19b70:	bl	14484 <__assert_fail@plt+0x2fbc>
   19b74:	ldr	r3, [r4, #8]
   19b78:	add	r5, r3, r5
   19b7c:	ldr	r0, [r5, #4]
   19b80:	ldrd	r2, [r5, #12]
   19b84:	strd	r2, [r7]
   19b88:	ldr	r3, [r5, #20]
   19b8c:	str	r3, [r7, #8]
   19b90:	ldrd	r4, [sp]
   19b94:	ldrd	r6, [sp, #8]
   19b98:	ldr	r8, [sp, #16]
   19b9c:	add	sp, sp, #20
   19ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ba4:	mvn	r0, #0
   19ba8:	b	19b90 <__assert_fail@plt+0x86c8>
   19bac:	ldr	ip, [r1, #4]
   19bb0:	cmp	ip, #0
   19bb4:	beq	19d4c <__assert_fail@plt+0x8884>
   19bb8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19bbc:	strd	r6, [sp, #8]
   19bc0:	str	lr, [sp, #28]
   19bc4:	ldr	lr, [r2, #4]
   19bc8:	strd	r8, [sp, #16]
   19bcc:	str	sl, [sp, #24]
   19bd0:	cmp	lr, #0
   19bd4:	beq	19cd4 <__assert_fail@plt+0x880c>
   19bd8:	ldr	r4, [r0]
   19bdc:	mov	r9, r2
   19be0:	add	r2, ip, lr
   19be4:	mov	r8, r1
   19be8:	mov	r7, r0
   19bec:	ldmib	r0, {r3, sl}
   19bf0:	add	r1, r2, r3
   19bf4:	cmp	r1, r4
   19bf8:	bgt	19d5c <__assert_fail@plt+0x8894>
   19bfc:	ldr	r0, [r8, #8]
   19c00:	add	r1, r3, ip
   19c04:	sub	r5, ip, #1
   19c08:	sub	r6, lr, #1
   19c0c:	add	r1, r1, lr
   19c10:	ldr	r2, [r9, #8]
   19c14:	sub	r3, r3, #1
   19c18:	ldr	ip, [r0, r5, lsl #2]
   19c1c:	ldr	lr, [r2, r6, lsl #2]
   19c20:	cmp	ip, lr
   19c24:	beq	19c40 <__assert_fail@plt+0x8778>
   19c28:	bge	19cf4 <__assert_fail@plt+0x882c>
   19c2c:	subs	r6, r6, #1
   19c30:	bmi	19c90 <__assert_fail@plt+0x87c8>
   19c34:	ldr	lr, [r2, r6, lsl #2]
   19c38:	cmp	ip, lr
   19c3c:	bne	19c28 <__assert_fail@plt+0x8760>
   19c40:	cmp	r3, #0
   19c44:	blt	19c70 <__assert_fail@plt+0x87a8>
   19c48:	ldr	r4, [sl, r3, lsl #2]
   19c4c:	add	lr, sl, r3, lsl #2
   19c50:	cmp	r4, ip
   19c54:	bgt	19c68 <__assert_fail@plt+0x87a0>
   19c58:	b	19d04 <__assert_fail@plt+0x883c>
   19c5c:	ldr	r4, [lr, #-4]!
   19c60:	cmp	r4, ip
   19c64:	ble	19d04 <__assert_fail@plt+0x883c>
   19c68:	subs	r3, r3, #1
   19c6c:	bcs	19c5c <__assert_fail@plt+0x8794>
   19c70:	sub	r1, r1, #1
   19c74:	str	ip, [sl, r1, lsl #2]
   19c78:	subs	r5, r5, #1
   19c7c:	bmi	19c90 <__assert_fail@plt+0x87c8>
   19c80:	subs	r6, r6, #1
   19c84:	bmi	19c90 <__assert_fail@plt+0x87c8>
   19c88:	ldr	ip, [r0, r5, lsl #2]
   19c8c:	b	19c34 <__assert_fail@plt+0x876c>
   19c90:	ldr	ip, [r7, #4]
   19c94:	ldr	r0, [r8, #4]
   19c98:	ldr	r2, [r9, #4]
   19c9c:	sub	r3, ip, #1
   19ca0:	add	r0, ip, r0
   19ca4:	add	r0, r0, r2
   19ca8:	sub	r2, r0, r1
   19cac:	sub	r0, r0, #1
   19cb0:	add	ip, ip, r2
   19cb4:	cmp	r3, #0
   19cb8:	cmpge	r2, #0
   19cbc:	str	ip, [r7, #4]
   19cc0:	bgt	19d20 <__assert_fail@plt+0x8858>
   19cc4:	lsl	r2, r2, #2
   19cc8:	add	r1, sl, r1, lsl #2
   19ccc:	mov	r0, sl
   19cd0:	bl	11204 <memcpy@plt>
   19cd4:	mov	ip, #0
   19cd8:	ldrd	r4, [sp]
   19cdc:	mov	r0, ip
   19ce0:	ldrd	r6, [sp, #8]
   19ce4:	ldrd	r8, [sp, #16]
   19ce8:	ldr	sl, [sp, #24]
   19cec:	add	sp, sp, #28
   19cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   19cf4:	subs	r5, r5, #1
   19cf8:	bmi	19c90 <__assert_fail@plt+0x87c8>
   19cfc:	ldr	ip, [r0, r5, lsl #2]
   19d00:	b	19c20 <__assert_fail@plt+0x8758>
   19d04:	cmp	r4, ip
   19d08:	bne	19c70 <__assert_fail@plt+0x87a8>
   19d0c:	b	19c78 <__assert_fail@plt+0x87b0>
   19d10:	sub	r3, r3, #1
   19d14:	str	ip, [sl, r4, lsl #2]
   19d18:	cmn	r3, #1
   19d1c:	beq	19d54 <__assert_fail@plt+0x888c>
   19d20:	ldr	lr, [sl, r0, lsl #2]
   19d24:	add	r4, r3, r2
   19d28:	ldr	ip, [sl, r3, lsl #2]
   19d2c:	cmp	lr, ip
   19d30:	ble	19d10 <__assert_fail@plt+0x8848>
   19d34:	subs	r2, r2, #1
   19d38:	sub	r0, r0, #1
   19d3c:	str	lr, [sl, r4, lsl #2]
   19d40:	bne	19d20 <__assert_fail@plt+0x8858>
   19d44:	ldr	sl, [r7, #8]
   19d48:	b	19cc8 <__assert_fail@plt+0x8800>
   19d4c:	mov	r0, ip
   19d50:	bx	lr
   19d54:	ldr	sl, [r7, #8]
   19d58:	b	19cc4 <__assert_fail@plt+0x87fc>
   19d5c:	add	r4, r2, r4
   19d60:	mov	r0, sl
   19d64:	lsl	r1, r4, #2
   19d68:	bl	2bb50 <__assert_fail@plt+0x1a688>
   19d6c:	subs	sl, r0, #0
   19d70:	beq	19d8c <__assert_fail@plt+0x88c4>
   19d74:	ldr	ip, [r8, #4]
   19d78:	ldr	lr, [r9, #4]
   19d7c:	str	r4, [r7]
   19d80:	str	sl, [r7, #8]
   19d84:	ldr	r3, [r7, #4]
   19d88:	b	19bfc <__assert_fail@plt+0x8734>
   19d8c:	mov	ip, #12
   19d90:	b	19cd8 <__assert_fail@plt+0x8810>
   19d94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19d98:	strd	r6, [sp, #8]
   19d9c:	subs	r6, r1, #0
   19da0:	str	r8, [sp, #16]
   19da4:	str	lr, [sp, #20]
   19da8:	beq	19eb8 <__assert_fail@plt+0x89f0>
   19dac:	ldr	r2, [r6, #4]
   19db0:	cmp	r2, #0
   19db4:	mov	ip, r2
   19db8:	beq	19eb8 <__assert_fail@plt+0x89f0>
   19dbc:	ldm	r0, {r1, r3}
   19dc0:	mov	r5, r0
   19dc4:	add	r4, r3, r2, lsl #1
   19dc8:	cmp	r1, r4
   19dcc:	blt	19ef4 <__assert_fail@plt+0x8a2c>
   19dd0:	cmp	r3, #0
   19dd4:	beq	19f34 <__assert_fail@plt+0x8a6c>
   19dd8:	sub	r2, r2, #1
   19ddc:	sub	r3, r3, #1
   19de0:	mvn	lr, r3
   19de4:	mvn	ip, r2
   19de8:	tst	lr, ip
   19dec:	bpl	19e48 <__assert_fail@plt+0x8980>
   19df0:	ldr	r7, [r5, #8]
   19df4:	ldr	r8, [r6, #8]
   19df8:	b	19e20 <__assert_fail@plt+0x8958>
   19dfc:	subge	r3, r3, #1
   19e00:	mvnge	lr, r3
   19e04:	bge	19e18 <__assert_fail@plt+0x8950>
   19e08:	sub	r2, r2, #1
   19e0c:	sub	r4, r4, #1
   19e10:	mvn	ip, r2
   19e14:	str	r1, [r7, r4, lsl #2]
   19e18:	tst	ip, lr
   19e1c:	bpl	19e48 <__assert_fail@plt+0x8980>
   19e20:	ldr	r0, [r7, r3, lsl #2]
   19e24:	ldr	r1, [r8, r2, lsl #2]
   19e28:	cmp	r0, r1
   19e2c:	bne	19dfc <__assert_fail@plt+0x8934>
   19e30:	sub	r2, r2, #1
   19e34:	sub	r3, r3, #1
   19e38:	mvn	lr, r3
   19e3c:	mvn	ip, r2
   19e40:	tst	ip, lr
   19e44:	bmi	19e20 <__assert_fail@plt+0x8958>
   19e48:	cmp	r2, #0
   19e4c:	blt	19e6c <__assert_fail@plt+0x89a4>
   19e50:	ldr	r0, [r5, #8]
   19e54:	add	r2, r2, #1
   19e58:	sub	r4, r4, r2
   19e5c:	lsl	r2, r2, #2
   19e60:	ldr	r1, [r6, #8]
   19e64:	add	r0, r0, r4, lsl #2
   19e68:	bl	11204 <memcpy@plt>
   19e6c:	ldr	r3, [r5, #4]
   19e70:	ldr	r0, [r6, #4]
   19e74:	add	r0, r3, r0, lsl #1
   19e78:	subs	r2, r0, r4
   19e7c:	sub	r0, r0, #1
   19e80:	beq	19eb8 <__assert_fail@plt+0x89f0>
   19e84:	ldr	r1, [r5, #8]
   19e88:	add	ip, r3, r2
   19e8c:	sub	r3, r3, #1
   19e90:	str	ip, [r5, #4]
   19e94:	ldr	lr, [r1, r0, lsl #2]
   19e98:	add	r5, r3, r2
   19e9c:	ldr	ip, [r1, r3, lsl #2]
   19ea0:	cmp	lr, ip
   19ea4:	ble	19ed0 <__assert_fail@plt+0x8a08>
   19ea8:	subs	r2, r2, #1
   19eac:	sub	r0, r0, #1
   19eb0:	str	lr, [r1, r5, lsl #2]
   19eb4:	bne	19e94 <__assert_fail@plt+0x89cc>
   19eb8:	mov	r0, #0
   19ebc:	ldrd	r4, [sp]
   19ec0:	ldrd	r6, [sp, #8]
   19ec4:	ldr	r8, [sp, #16]
   19ec8:	add	sp, sp, #20
   19ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   19ed0:	subs	r3, r3, #1
   19ed4:	str	ip, [r1, r5, lsl #2]
   19ed8:	bpl	19e94 <__assert_fail@plt+0x89cc>
   19edc:	mov	r0, r1
   19ee0:	lsl	r2, r2, #2
   19ee4:	add	r1, r1, r4, lsl #2
   19ee8:	bl	11204 <memcpy@plt>
   19eec:	mov	r0, #0
   19ef0:	b	19ebc <__assert_fail@plt+0x89f4>
   19ef4:	add	r2, r2, r1
   19ef8:	ldr	r0, [r0, #8]
   19efc:	lsl	r1, r2, #3
   19f00:	lsl	r4, r2, #1
   19f04:	bl	2bb50 <__assert_fail@plt+0x1a688>
   19f08:	cmp	r0, #0
   19f0c:	beq	19f50 <__assert_fail@plt+0x8a88>
   19f10:	ldr	r3, [r5, #4]
   19f14:	str	r4, [r5]
   19f18:	str	r0, [r5, #8]
   19f1c:	cmp	r3, #0
   19f20:	ldreq	ip, [r6, #4]
   19f24:	beq	19f38 <__assert_fail@plt+0x8a70>
   19f28:	ldr	r2, [r6, #4]
   19f2c:	add	r4, r3, r2, lsl #1
   19f30:	b	19dd8 <__assert_fail@plt+0x8910>
   19f34:	ldr	r0, [r0, #8]
   19f38:	ldr	r1, [r6, #8]
   19f3c:	str	ip, [r5, #4]
   19f40:	ldr	r2, [r6, #4]
   19f44:	lsl	r2, r2, #2
   19f48:	bl	11204 <memcpy@plt>
   19f4c:	b	19eb8 <__assert_fail@plt+0x89f0>
   19f50:	mov	r0, #12
   19f54:	b	19ebc <__assert_fail@plt+0x89f4>
   19f58:	cmp	r1, #0
   19f5c:	strd	r4, [sp, #-16]!
   19f60:	mov	r5, r0
   19f64:	str	r6, [sp, #8]
   19f68:	str	lr, [sp, #12]
   19f6c:	blt	1a020 <__assert_fail@plt+0x8b58>
   19f70:	ldr	r3, [r0, #48]	; 0x30
   19f74:	cmp	r3, r1
   19f78:	beq	1a034 <__assert_fail@plt+0x8b6c>
   19f7c:	ldr	r3, [r0, #80]	; 0x50
   19f80:	cmp	r3, #1
   19f84:	ble	19fd4 <__assert_fail@plt+0x8b0c>
   19f88:	ldr	r3, [r0, #8]
   19f8c:	add	r3, r3, r1, lsl #2
   19f90:	b	19f9c <__assert_fail@plt+0x8ad4>
   19f94:	cmn	r1, #1
   19f98:	beq	1a020 <__assert_fail@plt+0x8b58>
   19f9c:	ldr	r4, [r3], #-4
   19fa0:	sub	r1, r1, #1
   19fa4:	cmn	r4, #1
   19fa8:	beq	19f94 <__assert_fail@plt+0x8acc>
   19fac:	ldrb	r3, [r5, #78]	; 0x4e
   19fb0:	cmp	r3, #0
   19fb4:	bne	1a044 <__assert_fail@plt+0x8b7c>
   19fb8:	cmp	r4, #10
   19fbc:	movne	r0, #0
   19fc0:	beq	1a000 <__assert_fail@plt+0x8b38>
   19fc4:	ldrd	r4, [sp]
   19fc8:	ldr	r6, [sp, #8]
   19fcc:	add	sp, sp, #12
   19fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   19fd4:	ldr	r3, [r0, #4]
   19fd8:	ldr	r0, [r0, #68]	; 0x44
   19fdc:	ldrb	r3, [r3, r1]
   19fe0:	asr	r1, r3, #5
   19fe4:	and	r2, r3, #31
   19fe8:	ldr	r0, [r0, r1, lsl #2]
   19fec:	lsr	r0, r0, r2
   19ff0:	ands	r0, r0, #1
   19ff4:	bne	19fc4 <__assert_fail@plt+0x8afc>
   19ff8:	cmp	r3, #10
   19ffc:	bne	19fc4 <__assert_fail@plt+0x8afc>
   1a000:	ldrb	r3, [r5, #77]	; 0x4d
   1a004:	ldrd	r4, [sp]
   1a008:	ldr	r6, [sp, #8]
   1a00c:	add	sp, sp, #12
   1a010:	cmp	r3, #0
   1a014:	moveq	r0, #0
   1a018:	movne	r0, #2
   1a01c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a020:	ldr	r6, [sp, #8]
   1a024:	ldr	r0, [r5, #60]	; 0x3c
   1a028:	ldrd	r4, [sp]
   1a02c:	add	sp, sp, #12
   1a030:	pop	{pc}		; (ldr pc, [sp], #4)
   1a034:	tst	r2, #2
   1a038:	movne	r0, #8
   1a03c:	moveq	r0, #10
   1a040:	b	19fc4 <__assert_fail@plt+0x8afc>
   1a044:	mov	r0, r4
   1a048:	bl	113cc <iswalnum@plt>
   1a04c:	sub	r3, r4, #95	; 0x5f
   1a050:	cmp	r0, #0
   1a054:	clz	r3, r3
   1a058:	lsr	r3, r3, #5
   1a05c:	movne	r3, #1
   1a060:	cmp	r3, #0
   1a064:	movne	r0, #1
   1a068:	bne	19fc4 <__assert_fail@plt+0x8afc>
   1a06c:	b	19fb8 <__assert_fail@plt+0x8af0>
   1a070:	ldrb	ip, [r1, #4]
   1a074:	str	r4, [sp, #-8]!
   1a078:	ldr	r3, [r0, #4]
   1a07c:	str	lr, [sp, #4]
   1a080:	sub	ip, ip, #1
   1a084:	ldrb	r3, [r3, r2]
   1a088:	cmp	ip, #6
   1a08c:	ldrls	pc, [pc, ip, lsl #2]
   1a090:	b	1a0bc <__assert_fail@plt+0x8bf4>
   1a094:	strheq	sl, [r1], -r0
   1a098:	strheq	sl, [r1], -ip
   1a09c:	andeq	sl, r1, r0, ror #2
   1a0a0:	strheq	sl, [r1], -ip
   1a0a4:	ldrdeq	sl, [r1], -r4
   1a0a8:	strheq	sl, [r1], -ip
   1a0ac:	andeq	sl, r1, ip, asr #1
   1a0b0:	ldrb	ip, [r1]
   1a0b4:	cmp	ip, r3
   1a0b8:	beq	1a0f4 <__assert_fail@plt+0x8c2c>
   1a0bc:	mov	r0, #0
   1a0c0:	ldr	r4, [sp]
   1a0c4:	add	sp, sp, #4
   1a0c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0cc:	tst	r3, #128	; 0x80
   1a0d0:	bne	1a0bc <__assert_fail@plt+0x8bf4>
   1a0d4:	cmp	r3, #10
   1a0d8:	beq	1a194 <__assert_fail@plt+0x8ccc>
   1a0dc:	cmp	r3, #0
   1a0e0:	bne	1a0f4 <__assert_fail@plt+0x8c2c>
   1a0e4:	ldr	ip, [r0, #84]	; 0x54
   1a0e8:	ldr	ip, [ip, #128]	; 0x80
   1a0ec:	tst	ip, #128	; 0x80
   1a0f0:	bne	1a0bc <__assert_fail@plt+0x8bf4>
   1a0f4:	ldr	r4, [r1, #4]
   1a0f8:	mov	r3, #65280	; 0xff00
   1a0fc:	movt	r3, #3
   1a100:	and	r3, r3, r4
   1a104:	cmp	r3, #0
   1a108:	beq	1a150 <__assert_fail@plt+0x8c88>
   1a10c:	mov	r1, r2
   1a110:	ldr	r2, [r0, #88]	; 0x58
   1a114:	bl	19f58 <__assert_fail@plt+0x8a90>
   1a118:	ubfx	r1, r4, #8, #10
   1a11c:	ands	r2, r1, #4
   1a120:	bne	1a180 <__assert_fail@plt+0x8cb8>
   1a124:	tst	r1, #8
   1a128:	beq	1a134 <__assert_fail@plt+0x8c6c>
   1a12c:	tst	r0, #1
   1a130:	bne	1a0bc <__assert_fail@plt+0x8bf4>
   1a134:	tst	r1, #32
   1a138:	beq	1a144 <__assert_fail@plt+0x8c7c>
   1a13c:	ands	r3, r0, #2
   1a140:	beq	1a0bc <__assert_fail@plt+0x8bf4>
   1a144:	tst	r1, #128	; 0x80
   1a148:	ubfxne	r0, r0, #3, #1
   1a14c:	bne	1a0c0 <__assert_fail@plt+0x8bf8>
   1a150:	ldr	r4, [sp]
   1a154:	add	sp, sp, #4
   1a158:	mov	r0, #1
   1a15c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a160:	ldr	ip, [r1]
   1a164:	asr	lr, r3, #5
   1a168:	and	r3, r3, #31
   1a16c:	ldr	ip, [ip, lr, lsl #2]
   1a170:	lsr	r3, ip, r3
   1a174:	ands	r3, r3, #1
   1a178:	bne	1a0f4 <__assert_fail@plt+0x8c2c>
   1a17c:	b	1a0bc <__assert_fail@plt+0x8bf4>
   1a180:	ands	r3, r0, #1
   1a184:	beq	1a0bc <__assert_fail@plt+0x8bf4>
   1a188:	tst	r1, #8
   1a18c:	beq	1a134 <__assert_fail@plt+0x8c6c>
   1a190:	b	1a0bc <__assert_fail@plt+0x8bf4>
   1a194:	ldr	r3, [r0, #84]	; 0x54
   1a198:	ldr	r3, [r3, #128]	; 0x80
   1a19c:	ands	r3, r3, #64	; 0x40
   1a1a0:	bne	1a0f4 <__assert_fail@plt+0x8c2c>
   1a1a4:	b	1a0bc <__assert_fail@plt+0x8bf4>
   1a1a8:	ldr	r3, [r0, #24]
   1a1ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a1b0:	mov	r4, r0
   1a1b4:	strd	r6, [sp, #8]
   1a1b8:	mov	r7, r1
   1a1bc:	strd	r8, [sp, #16]
   1a1c0:	mov	r8, r2
   1a1c4:	strd	sl, [sp, #24]
   1a1c8:	cmp	r3, r1
   1a1cc:	str	lr, [sp, #32]
   1a1d0:	sub	sp, sp, #36	; 0x24
   1a1d4:	suble	r5, r1, r3
   1a1d8:	ble	1a23c <__assert_fail@plt+0x8d74>
   1a1dc:	ldr	r3, [r0, #80]	; 0x50
   1a1e0:	cmp	r3, #1
   1a1e4:	ble	1a1f4 <__assert_fail@plt+0x8d2c>
   1a1e8:	mov	r2, #0
   1a1ec:	mov	r3, #0
   1a1f0:	strd	r2, [r0, #16]
   1a1f4:	ldrb	r3, [r4, #75]	; 0x4b
   1a1f8:	tst	r8, #1
   1a1fc:	mov	r9, #0
   1a200:	movne	r1, #4
   1a204:	moveq	r1, #6
   1a208:	ldr	r0, [r4, #44]	; 0x2c
   1a20c:	str	r9, [r4, #24]
   1a210:	ldr	r2, [r4, #52]	; 0x34
   1a214:	cmp	r3, r9
   1a218:	str	r9, [r4, #28]
   1a21c:	movne	r3, r9
   1a220:	movne	r5, r7
   1a224:	str	r9, [r4, #32]
   1a228:	str	r0, [r4, #48]	; 0x30
   1a22c:	str	r2, [r4, #56]	; 0x38
   1a230:	str	r1, [r4, #60]	; 0x3c
   1a234:	strb	r9, [r4, #76]	; 0x4c
   1a238:	beq	1a318 <__assert_fail@plt+0x8e50>
   1a23c:	cmp	r5, #0
   1a240:	beq	1a32c <__assert_fail@plt+0x8e64>
   1a244:	ldrb	r2, [r4, #76]	; 0x4c
   1a248:	ldr	r1, [r4, #32]
   1a24c:	ldr	r6, [r4, #28]
   1a250:	cmp	r1, r5
   1a254:	ble	1a400 <__assert_fail@plt+0x8f38>
   1a258:	cmp	r2, #0
   1a25c:	bne	1a564 <__assert_fail@plt+0x909c>
   1a260:	mov	r2, r8
   1a264:	sub	r1, r5, #1
   1a268:	mov	r0, r4
   1a26c:	bl	19f58 <__assert_fail@plt+0x8a90>
   1a270:	ldr	r3, [r4, #80]	; 0x50
   1a274:	sub	r2, r6, r5
   1a278:	str	r0, [r4, #60]	; 0x3c
   1a27c:	cmp	r3, #1
   1a280:	bgt	1a33c <__assert_fail@plt+0x8e74>
   1a284:	ldrb	r3, [r4, #75]	; 0x4b
   1a288:	cmp	r3, #0
   1a28c:	bne	1a5a4 <__assert_fail@plt+0x90dc>
   1a290:	ldr	ip, [r4, #32]
   1a294:	str	r2, [r4, #28]
   1a298:	ldr	r1, [r4, #48]	; 0x30
   1a29c:	ldr	r0, [r4, #56]	; 0x38
   1a2a0:	sub	ip, ip, r5
   1a2a4:	ldr	r2, [r4, #80]	; 0x50
   1a2a8:	sub	r1, r1, r5
   1a2ac:	str	ip, [r4, #32]
   1a2b0:	sub	r0, r0, r5
   1a2b4:	cmp	r3, #0
   1a2b8:	bne	1a2c8 <__assert_fail@plt+0x8e00>
   1a2bc:	ldr	r3, [r4, #4]
   1a2c0:	add	r5, r3, r5
   1a2c4:	str	r5, [r4, #4]
   1a2c8:	cmp	r2, #1
   1a2cc:	str	r7, [r4, #24]
   1a2d0:	str	r1, [r4, #48]	; 0x30
   1a2d4:	str	r0, [r4, #56]	; 0x38
   1a2d8:	ble	1a368 <__assert_fail@plt+0x8ea0>
   1a2dc:	ldrb	r3, [r4, #72]	; 0x48
   1a2e0:	mov	r0, r4
   1a2e4:	cmp	r3, #0
   1a2e8:	bne	1a358 <__assert_fail@plt+0x8e90>
   1a2ec:	bl	18e8c <__assert_fail@plt+0x79c4>
   1a2f0:	mov	r3, #0
   1a2f4:	mov	r0, r3
   1a2f8:	str	r3, [r4, #40]	; 0x28
   1a2fc:	add	sp, sp, #36	; 0x24
   1a300:	ldrd	r4, [sp]
   1a304:	ldrd	r6, [sp, #8]
   1a308:	ldrd	r8, [sp, #16]
   1a30c:	ldrd	sl, [sp, #24]
   1a310:	add	sp, sp, #32
   1a314:	pop	{pc}		; (ldr pc, [sp], #4)
   1a318:	ldr	r2, [r4]
   1a31c:	mov	r5, r7
   1a320:	cmp	r5, #0
   1a324:	str	r2, [r4, #4]
   1a328:	bne	1a244 <__assert_fail@plt+0x8d7c>
   1a32c:	ldr	r1, [r4, #48]	; 0x30
   1a330:	ldr	r0, [r4, #56]	; 0x38
   1a334:	ldr	r2, [r4, #80]	; 0x50
   1a338:	b	1a2c8 <__assert_fail@plt+0x8e00>
   1a33c:	ldr	r0, [r4, #8]
   1a340:	lsl	r2, r2, #2
   1a344:	add	r1, r0, r5, lsl #2
   1a348:	bl	111d4 <memmove@plt>
   1a34c:	ldr	r2, [r4, #28]
   1a350:	sub	r2, r2, r5
   1a354:	b	1a284 <__assert_fail@plt+0x8dbc>
   1a358:	bl	19068 <__assert_fail@plt+0x7ba0>
   1a35c:	cmp	r0, #0
   1a360:	beq	1a2f0 <__assert_fail@plt+0x8e28>
   1a364:	b	1a2fc <__assert_fail@plt+0x8e34>
   1a368:	ldrb	r3, [r4, #75]	; 0x4b
   1a36c:	cmp	r3, #0
   1a370:	streq	r1, [r4, #28]
   1a374:	beq	1a2f0 <__assert_fail@plt+0x8e28>
   1a378:	ldrb	r3, [r4, #72]	; 0x48
   1a37c:	cmp	r3, #0
   1a380:	bne	1a864 <__assert_fail@plt+0x939c>
   1a384:	ldr	r0, [r4, #64]	; 0x40
   1a388:	cmp	r0, #0
   1a38c:	beq	1a2f0 <__assert_fail@plt+0x8e28>
   1a390:	ldr	r2, [r4, #28]
   1a394:	ldr	r3, [r4, #36]	; 0x24
   1a398:	cmp	r1, r3
   1a39c:	movge	r1, r3
   1a3a0:	cmp	r1, r2
   1a3a4:	ble	1aa3c <__assert_fail@plt+0x9574>
   1a3a8:	ldm	r4, {ip, lr}
   1a3ac:	add	r3, r2, #1
   1a3b0:	cmp	r1, r3
   1a3b4:	add	ip, ip, r2
   1a3b8:	ldrb	ip, [ip, r7]
   1a3bc:	ldrb	r0, [r0, ip]
   1a3c0:	strb	r0, [lr, r2]
   1a3c4:	ble	1a3f4 <__assert_fail@plt+0x8f2c>
   1a3c8:	ldr	r2, [r4]
   1a3cc:	ldr	r0, [r4, #24]
   1a3d0:	ldr	ip, [r4, #64]	; 0x40
   1a3d4:	add	r2, r2, r3
   1a3d8:	ldrb	r0, [r2, r0]
   1a3dc:	ldr	r2, [r4, #4]
   1a3e0:	ldrb	r0, [ip, r0]
   1a3e4:	strb	r0, [r2, r3]
   1a3e8:	add	r3, r3, #1
   1a3ec:	cmp	r1, r3
   1a3f0:	bne	1a3c8 <__assert_fail@plt+0x8f00>
   1a3f4:	str	r1, [r4, #28]
   1a3f8:	str	r1, [r4, #32]
   1a3fc:	b	1a2f0 <__assert_fail@plt+0x8e28>
   1a400:	cmp	r2, #0
   1a404:	bne	1a96c <__assert_fail@plt+0x94a4>
   1a408:	ldr	r2, [r4, #80]	; 0x50
   1a40c:	mov	r0, #0
   1a410:	str	r0, [r4, #28]
   1a414:	cmp	r2, #1
   1a418:	ble	1a724 <__assert_fail@plt+0x925c>
   1a41c:	ldrb	r0, [r4, #73]	; 0x49
   1a420:	cmp	r0, #0
   1a424:	beq	1a498 <__assert_fail@plt+0x8fd0>
   1a428:	ldr	ip, [r4]
   1a42c:	sub	r2, r5, r2
   1a430:	sub	r0, r5, #1
   1a434:	add	lr, ip, r3
   1a438:	add	r2, lr, r2
   1a43c:	add	r9, lr, r0
   1a440:	cmp	ip, r2
   1a444:	str	lr, [sp]
   1a448:	movcc	ip, r2
   1a44c:	cmp	ip, r9
   1a450:	bhi	1a498 <__assert_fail@plt+0x8fd0>
   1a454:	ldrb	r2, [lr, r0]
   1a458:	and	r2, r2, #192	; 0xc0
   1a45c:	cmp	r2, #128	; 0x80
   1a460:	movne	r1, lr
   1a464:	bne	1a8ec <__assert_fail@plt+0x9424>
   1a468:	mov	sl, lr
   1a46c:	sub	r2, r9, #1
   1a470:	sub	ip, ip, #1
   1a474:	b	1a48c <__assert_fail@plt+0x8fc4>
   1a478:	ldrb	r0, [r9]
   1a47c:	sub	r2, r2, #1
   1a480:	and	r0, r0, #192	; 0xc0
   1a484:	cmp	r0, #128	; 0x80
   1a488:	bne	1a8e4 <__assert_fail@plt+0x941c>
   1a48c:	cmp	ip, r2
   1a490:	mov	r9, r2
   1a494:	bne	1a478 <__assert_fail@plt+0x8fb0>
   1a498:	add	r9, r3, r1
   1a49c:	cmp	r7, r9
   1a4a0:	ble	1a7a4 <__assert_fail@plt+0x92dc>
   1a4a4:	add	fp, r4, #16
   1a4a8:	str	r7, [sp]
   1a4ac:	str	r6, [sp, #4]
   1a4b0:	ldr	r1, [r4]
   1a4b4:	mov	r3, fp
   1a4b8:	add	r0, sp, #16
   1a4bc:	ldr	sl, [r4, #44]	; 0x2c
   1a4c0:	ldrd	r6, [fp]
   1a4c4:	add	r1, r1, r9
   1a4c8:	sub	sl, sl, r9
   1a4cc:	mov	r2, sl
   1a4d0:	strd	r6, [sp, #24]
   1a4d4:	bl	14760 <__assert_fail@plt+0x3298>
   1a4d8:	sub	r3, r0, #1
   1a4dc:	cmn	r3, #4
   1a4e0:	ldrls	r1, [sp, #16]
   1a4e4:	bhi	1a998 <__assert_fail@plt+0x94d0>
   1a4e8:	add	r9, r9, r0
   1a4ec:	ldr	r3, [sp]
   1a4f0:	cmp	r3, r9
   1a4f4:	bgt	1a4b0 <__assert_fail@plt+0x8fe8>
   1a4f8:	sub	r9, r9, r3
   1a4fc:	cmn	r1, #1
   1a500:	ldr	r6, [sp, #4]
   1a504:	mov	r7, r3
   1a508:	str	r9, [r4, #28]
   1a50c:	beq	1a7ac <__assert_fail@plt+0x92e4>
   1a510:	ldrb	r3, [r4, #78]	; 0x4e
   1a514:	cmp	r3, #0
   1a518:	bne	1aa0c <__assert_fail@plt+0x9544>
   1a51c:	cmp	r1, #10
   1a520:	movne	r3, #0
   1a524:	bne	1a538 <__assert_fail@plt+0x9070>
   1a528:	ldrb	r3, [r4, #77]	; 0x4d
   1a52c:	cmp	r3, #0
   1a530:	moveq	r3, #0
   1a534:	movne	r3, #2
   1a538:	str	r3, [r4, #60]	; 0x3c
   1a53c:	cmp	r9, #0
   1a540:	bne	1a9bc <__assert_fail@plt+0x94f4>
   1a544:	ldrb	r3, [r4, #75]	; 0x4b
   1a548:	str	r9, [r4, #32]
   1a54c:	ldr	r1, [r4, #48]	; 0x30
   1a550:	ldr	r0, [r4, #56]	; 0x38
   1a554:	ldr	r2, [r4, #80]	; 0x50
   1a558:	sub	r1, r1, r5
   1a55c:	sub	r0, r0, r5
   1a560:	b	1a2b4 <__assert_fail@plt+0x8dec>
   1a564:	mov	r3, r6
   1a568:	mov	r2, #0
   1a56c:	ldr	r9, [r4, #12]
   1a570:	b	1a584 <__assert_fail@plt+0x90bc>
   1a574:	bge	1a718 <__assert_fail@plt+0x9250>
   1a578:	add	r2, r1, #1
   1a57c:	cmp	r2, r3
   1a580:	bge	1a5c0 <__assert_fail@plt+0x90f8>
   1a584:	add	r1, r2, r3
   1a588:	add	r1, r1, r1, lsr #31
   1a58c:	asr	r1, r1, #1
   1a590:	ldr	r0, [r9, r1, lsl #2]
   1a594:	cmp	r0, r5
   1a598:	ble	1a574 <__assert_fail@plt+0x90ac>
   1a59c:	mov	r3, r1
   1a5a0:	b	1a57c <__assert_fail@plt+0x90b4>
   1a5a4:	ldr	r0, [r4, #4]
   1a5a8:	add	r1, r0, r5
   1a5ac:	bl	111d4 <memmove@plt>
   1a5b0:	ldr	r2, [r4, #28]
   1a5b4:	ldrb	r3, [r4, #75]	; 0x4b
   1a5b8:	sub	r2, r2, r5
   1a5bc:	b	1a290 <__assert_fail@plt+0x8dc8>
   1a5c0:	cmp	r0, r5
   1a5c4:	addlt	sl, r1, #1
   1a5c8:	bge	1a718 <__assert_fail@plt+0x9250>
   1a5cc:	mov	r2, r8
   1a5d0:	mov	r0, r4
   1a5d4:	bl	19f58 <__assert_fail@plt+0x8a90>
   1a5d8:	sub	r3, r5, sl
   1a5dc:	cmp	r5, r6
   1a5e0:	str	r0, [r4, #60]	; 0x3c
   1a5e4:	clz	r3, r3
   1a5e8:	lsr	r3, r3, #5
   1a5ec:	movge	r3, #0
   1a5f0:	cmp	r3, #0
   1a5f4:	bne	1a7c4 <__assert_fail@plt+0x92fc>
   1a5f8:	ldr	r1, [r4, #44]	; 0x2c
   1a5fc:	mov	r3, #0
   1a600:	cmp	sl, #0
   1a604:	ldr	r0, [r4, #52]	; 0x34
   1a608:	strb	r3, [r4, #76]	; 0x4c
   1a60c:	sub	r1, r1, r7
   1a610:	add	r2, r1, r5
   1a614:	sub	r0, r0, r7
   1a618:	add	r3, r0, r5
   1a61c:	str	r2, [r4, #48]	; 0x30
   1a620:	str	r3, [r4, #56]	; 0x38
   1a624:	ble	1a654 <__assert_fail@plt+0x918c>
   1a628:	sub	r3, sl, #-1073741823	; 0xc0000001
   1a62c:	ldr	r2, [r9, r3, lsl #2]
   1a630:	add	r3, r9, r3, lsl #2
   1a634:	cmp	r2, r5
   1a638:	beq	1a64c <__assert_fail@plt+0x9184>
   1a63c:	b	1a654 <__assert_fail@plt+0x918c>
   1a640:	ldr	r2, [r3, #-4]!
   1a644:	cmp	r2, r5
   1a648:	bne	1a654 <__assert_fail@plt+0x918c>
   1a64c:	subs	sl, sl, #1
   1a650:	bne	1a640 <__assert_fail@plt+0x9178>
   1a654:	cmp	sl, r6
   1a658:	bge	1a6b0 <__assert_fail@plt+0x91e8>
   1a65c:	ldr	r3, [r4, #8]
   1a660:	lsl	ip, sl, #2
   1a664:	ldr	r2, [r3, sl, lsl #2]
   1a668:	add	r3, r3, ip
   1a66c:	cmn	r2, #1
   1a670:	beq	1a684 <__assert_fail@plt+0x91bc>
   1a674:	b	1a6b8 <__assert_fail@plt+0x91f0>
   1a678:	ldr	r2, [r3, #4]!
   1a67c:	cmn	r2, #1
   1a680:	bne	1a6b8 <__assert_fail@plt+0x91f0>
   1a684:	add	sl, sl, #1
   1a688:	cmp	sl, r6
   1a68c:	lsl	ip, sl, #2
   1a690:	bne	1a678 <__assert_fail@plt+0x91b0>
   1a694:	mov	r3, #0
   1a698:	mov	r2, r3
   1a69c:	str	r3, [r4, #28]
   1a6a0:	ldrb	r3, [r4, #75]	; 0x4b
   1a6a4:	str	r2, [r4, #32]
   1a6a8:	ldr	r2, [r4, #80]	; 0x50
   1a6ac:	b	1a2b4 <__assert_fail@plt+0x8dec>
   1a6b0:	beq	1a694 <__assert_fail@plt+0x91cc>
   1a6b4:	lsl	ip, sl, #2
   1a6b8:	ldr	r2, [r9, ip]
   1a6bc:	sub	r2, r2, r5
   1a6c0:	cmp	r2, #0
   1a6c4:	str	r2, [r4, #28]
   1a6c8:	beq	1a6a0 <__assert_fail@plt+0x91d8>
   1a6cc:	ble	1a6f4 <__assert_fail@plt+0x922c>
   1a6d0:	ldr	r1, [r4, #8]
   1a6d4:	mov	r3, #0
   1a6d8:	mvn	r0, #0
   1a6dc:	sub	r1, r1, #4
   1a6e0:	str	r0, [r1, #4]!
   1a6e4:	add	r3, r3, #1
   1a6e8:	ldr	r2, [r4, #28]
   1a6ec:	cmp	r2, r3
   1a6f0:	bgt	1a6e0 <__assert_fail@plt+0x9218>
   1a6f4:	mov	r1, #255	; 0xff
   1a6f8:	ldr	r0, [r4, #4]
   1a6fc:	bl	113e4 <memset@plt>
   1a700:	ldr	r2, [r4, #28]
   1a704:	ldr	r1, [r4, #48]	; 0x30
   1a708:	ldr	r0, [r4, #56]	; 0x38
   1a70c:	sub	r1, r1, r5
   1a710:	sub	r0, r0, r5
   1a714:	b	1a6a0 <__assert_fail@plt+0x91d8>
   1a718:	mov	sl, r1
   1a71c:	sub	r1, r1, #1
   1a720:	b	1a5cc <__assert_fail@plt+0x9104>
   1a724:	ldr	r9, [r4]
   1a728:	ldr	r1, [r4, #64]	; 0x40
   1a72c:	add	r9, r9, r3
   1a730:	add	r3, r9, r5
   1a734:	ldrb	ip, [r3, #-1]
   1a738:	cmp	r1, #0
   1a73c:	str	r0, [r4, #32]
   1a740:	ldr	r0, [r4, #68]	; 0x44
   1a744:	ldrbne	ip, [r1, ip]
   1a748:	asr	r1, ip, #5
   1a74c:	and	r3, ip, #31
   1a750:	ldr	r1, [r0, r1, lsl #2]
   1a754:	lsr	r3, r1, r3
   1a758:	ands	r1, r3, #1
   1a75c:	bne	1a774 <__assert_fail@plt+0x92ac>
   1a760:	cmp	ip, #10
   1a764:	bne	1a774 <__assert_fail@plt+0x92ac>
   1a768:	ldrb	r3, [r4, #77]	; 0x4d
   1a76c:	cmp	r3, #0
   1a770:	movne	r1, #2
   1a774:	ldrb	r3, [r4, #75]	; 0x4b
   1a778:	str	r1, [r4, #60]	; 0x3c
   1a77c:	ldr	r1, [r4, #48]	; 0x30
   1a780:	ldr	r0, [r4, #56]	; 0x38
   1a784:	cmp	r3, #0
   1a788:	sub	r1, r1, r5
   1a78c:	sub	r0, r0, r5
   1a790:	beq	1a2bc <__assert_fail@plt+0x8df4>
   1a794:	str	r7, [r4, #24]
   1a798:	str	r1, [r4, #48]	; 0x30
   1a79c:	str	r0, [r4, #56]	; 0x38
   1a7a0:	b	1a36c <__assert_fail@plt+0x8ea4>
   1a7a4:	sub	r9, r9, r7
   1a7a8:	str	r9, [r4, #28]
   1a7ac:	mov	r2, r8
   1a7b0:	sub	r1, r6, #1
   1a7b4:	mov	r0, r4
   1a7b8:	bl	19f58 <__assert_fail@plt+0x8a90>
   1a7bc:	str	r0, [r4, #60]	; 0x3c
   1a7c0:	b	1a53c <__assert_fail@plt+0x9074>
   1a7c4:	ldr	r3, [r9, sl, lsl #2]
   1a7c8:	cmp	r3, r5
   1a7cc:	bne	1a5f8 <__assert_fail@plt+0x9130>
   1a7d0:	ldr	r0, [r4, #8]
   1a7d4:	lsl	r8, r5, #2
   1a7d8:	sub	r2, r6, r5
   1a7dc:	lsl	r2, r2, #2
   1a7e0:	add	r1, r0, r8
   1a7e4:	bl	111d4 <memmove@plt>
   1a7e8:	ldr	r0, [r4, #4]
   1a7ec:	ldr	r2, [r4, #28]
   1a7f0:	add	r1, r0, r5
   1a7f4:	sub	r2, r2, r5
   1a7f8:	bl	111d4 <memmove@plt>
   1a7fc:	ldr	r3, [r4, #28]
   1a800:	ldr	r2, [r4, #32]
   1a804:	sub	r3, r3, r5
   1a808:	cmp	r3, #0
   1a80c:	sub	r2, r2, r5
   1a810:	str	r3, [r4, #28]
   1a814:	str	r2, [r4, #32]
   1a818:	ble	1a848 <__assert_fail@plt+0x9380>
   1a81c:	ldr	r1, [r4, #12]
   1a820:	mov	r2, #0
   1a824:	add	r0, r1, r8
   1a828:	sub	r1, r1, #4
   1a82c:	ldr	r3, [r0], #4
   1a830:	add	r2, r2, #1
   1a834:	sub	r3, r3, r5
   1a838:	str	r3, [r1, #4]!
   1a83c:	ldr	r3, [r4, #28]
   1a840:	cmp	r3, r2
   1a844:	bgt	1a82c <__assert_fail@plt+0x9364>
   1a848:	ldr	r1, [r4, #48]	; 0x30
   1a84c:	ldr	r0, [r4, #56]	; 0x38
   1a850:	ldrb	r3, [r4, #75]	; 0x4b
   1a854:	sub	r1, r1, r5
   1a858:	ldr	r2, [r4, #80]	; 0x50
   1a85c:	sub	r0, r0, r5
   1a860:	b	1a2b4 <__assert_fail@plt+0x8dec>
   1a864:	ldr	r5, [r4, #28]
   1a868:	ldr	r6, [r4, #36]	; 0x24
   1a86c:	cmp	r1, r6
   1a870:	movlt	r6, r1
   1a874:	cmp	r6, r5
   1a878:	ble	1aa44 <__assert_fail@plt+0x957c>
   1a87c:	bl	11348 <__ctype_toupper_loc@plt>
   1a880:	b	1a8a0 <__assert_fail@plt+0x93d8>
   1a884:	ldr	r3, [r1, r3, lsl #2]
   1a888:	ldr	r2, [r4, #4]
   1a88c:	strb	r3, [r2, r5]
   1a890:	add	r5, r5, #1
   1a894:	cmp	r6, r5
   1a898:	beq	1a8d8 <__assert_fail@plt+0x9410>
   1a89c:	ldr	r7, [r4, #24]
   1a8a0:	ldr	r3, [r4]
   1a8a4:	ldr	r2, [r4, #64]	; 0x40
   1a8a8:	ldr	r1, [r0]
   1a8ac:	add	r3, r3, r5
   1a8b0:	ldrb	r3, [r3, r7]
   1a8b4:	cmp	r2, #0
   1a8b8:	beq	1a884 <__assert_fail@plt+0x93bc>
   1a8bc:	ldrb	r2, [r2, r3]
   1a8c0:	ldr	r3, [r4, #4]
   1a8c4:	ldr	r2, [r1, r2, lsl #2]
   1a8c8:	strb	r2, [r3, r5]
   1a8cc:	add	r5, r5, #1
   1a8d0:	cmp	r5, r6
   1a8d4:	bne	1a89c <__assert_fail@plt+0x93d4>
   1a8d8:	str	r6, [r4, #28]
   1a8dc:	str	r6, [r4, #32]
   1a8e0:	b	1a2f0 <__assert_fail@plt+0x8e28>
   1a8e4:	mov	r1, sl
   1a8e8:	str	sl, [sp]
   1a8ec:	ldr	r2, [r4, #48]	; 0x30
   1a8f0:	ldr	r3, [r4, #64]	; 0x40
   1a8f4:	add	r2, r1, r2
   1a8f8:	sub	r2, r2, r9
   1a8fc:	cmp	r3, #0
   1a900:	moveq	r1, r9
   1a904:	bne	1aa4c <__assert_fail@plt+0x9584>
   1a908:	mov	sl, #0
   1a90c:	mov	fp, #0
   1a910:	add	r3, sp, #24
   1a914:	add	r0, sp, #12
   1a918:	strd	sl, [sp, #24]
   1a91c:	bl	14760 <__assert_fail@plt+0x3298>
   1a920:	ldr	r3, [sp]
   1a924:	add	sl, r3, r5
   1a928:	sub	r9, sl, r9
   1a92c:	cmp	r0, r9
   1a930:	bcc	1a93c <__assert_fail@plt+0x9474>
   1a934:	cmn	r0, #3
   1a938:	bls	1a948 <__assert_fail@plt+0x9480>
   1a93c:	ldr	r3, [r4, #24]
   1a940:	ldr	r1, [r4, #32]
   1a944:	b	1a498 <__assert_fail@plt+0x8fd0>
   1a948:	ldr	r1, [sp, #12]
   1a94c:	sub	r9, r0, r9
   1a950:	mov	r2, #0
   1a954:	mov	r3, #0
   1a958:	strd	r2, [r4, #16]
   1a95c:	str	r9, [r4, #28]
   1a960:	cmn	r1, #1
   1a964:	bne	1a510 <__assert_fail@plt+0x9048>
   1a968:	b	1a93c <__assert_fail@plt+0x9474>
   1a96c:	ldr	r0, [r4, #44]	; 0x2c
   1a970:	mov	ip, #0
   1a974:	ldr	r2, [r4, #52]	; 0x34
   1a978:	strb	ip, [r4, #76]	; 0x4c
   1a97c:	sub	r0, r0, r7
   1a980:	add	r0, r0, r5
   1a984:	sub	r2, r2, r7
   1a988:	add	r2, r2, r5
   1a98c:	str	r0, [r4, #48]	; 0x30
   1a990:	str	r2, [r4, #56]	; 0x38
   1a994:	b	1a408 <__assert_fail@plt+0x8f40>
   1a998:	mov	r1, #0
   1a99c:	cmp	sl, r1
   1a9a0:	cmpne	r0, r1
   1a9a4:	mov	r0, #1
   1a9a8:	ldrne	r3, [r4]
   1a9ac:	ldrbne	r1, [r3, r9]
   1a9b0:	ldrd	r2, [sp, #24]
   1a9b4:	strd	r2, [fp]
   1a9b8:	b	1a4e8 <__assert_fail@plt+0x9020>
   1a9bc:	ble	1a9e4 <__assert_fail@plt+0x951c>
   1a9c0:	ldr	r2, [r4, #8]
   1a9c4:	mov	r3, #0
   1a9c8:	mvn	r1, #0
   1a9cc:	sub	r2, r2, #4
   1a9d0:	str	r1, [r2, #4]!
   1a9d4:	add	r3, r3, #1
   1a9d8:	ldr	r9, [r4, #28]
   1a9dc:	cmp	r9, r3
   1a9e0:	bgt	1a9d0 <__assert_fail@plt+0x9508>
   1a9e4:	ldrb	r3, [r4, #75]	; 0x4b
   1a9e8:	cmp	r3, #0
   1a9ec:	beq	1a548 <__assert_fail@plt+0x9080>
   1a9f0:	mov	r2, r9
   1a9f4:	mov	r1, #255	; 0xff
   1a9f8:	ldr	r0, [r4, #4]
   1a9fc:	bl	113e4 <memset@plt>
   1aa00:	ldrb	r3, [r4, #75]	; 0x4b
   1aa04:	ldr	r9, [r4, #28]
   1aa08:	b	1a548 <__assert_fail@plt+0x9080>
   1aa0c:	mov	r0, r1
   1aa10:	str	r1, [sp]
   1aa14:	bl	113cc <iswalnum@plt>
   1aa18:	ldr	r1, [sp]
   1aa1c:	subs	r3, r1, #95	; 0x5f
   1aa20:	movne	r3, #1
   1aa24:	cmp	r0, #0
   1aa28:	movne	r3, #0
   1aa2c:	cmp	r3, #0
   1aa30:	moveq	r3, #1
   1aa34:	beq	1a538 <__assert_fail@plt+0x9070>
   1aa38:	b	1a51c <__assert_fail@plt+0x9054>
   1aa3c:	mov	r1, r2
   1aa40:	b	1a3f4 <__assert_fail@plt+0x8f2c>
   1aa44:	mov	r6, r5
   1aa48:	b	1a8d8 <__assert_fail@plt+0x9410>
   1aa4c:	cmp	r2, #6
   1aa50:	movlt	r1, r2
   1aa54:	movge	r1, #6
   1aa58:	subs	r0, r1, #1
   1aa5c:	bmi	1ab04 <__assert_fail@plt+0x963c>
   1aa60:	ldrb	lr, [r9, r0]
   1aa64:	add	ip, sp, #32
   1aa68:	add	ip, ip, r0
   1aa6c:	sub	r0, r1, #2
   1aa70:	cmn	r0, #1
   1aa74:	ldrb	lr, [r3, lr]
   1aa78:	strb	lr, [ip, #-16]
   1aa7c:	beq	1ab04 <__assert_fail@plt+0x963c>
   1aa80:	ldrb	lr, [r9, r0]
   1aa84:	add	ip, sp, #32
   1aa88:	add	ip, ip, r0
   1aa8c:	sub	r0, r1, #3
   1aa90:	cmn	r0, #1
   1aa94:	ldrb	lr, [r3, lr]
   1aa98:	strb	lr, [ip, #-16]
   1aa9c:	beq	1ab04 <__assert_fail@plt+0x963c>
   1aaa0:	ldrb	lr, [r9, r0]
   1aaa4:	add	ip, sp, #32
   1aaa8:	add	ip, ip, r0
   1aaac:	sub	r0, r1, #4
   1aab0:	cmn	r0, #1
   1aab4:	ldrb	lr, [r3, lr]
   1aab8:	strb	lr, [ip, #-16]
   1aabc:	beq	1ab04 <__assert_fail@plt+0x963c>
   1aac0:	ldrb	ip, [r9, r0]
   1aac4:	add	lr, sp, #32
   1aac8:	sub	r1, r1, #5
   1aacc:	add	r0, lr, r0
   1aad0:	cmn	r1, #1
   1aad4:	ldrb	ip, [r3, ip]
   1aad8:	strb	ip, [r0, #-16]
   1aadc:	beq	1ab04 <__assert_fail@plt+0x963c>
   1aae0:	ldrb	r0, [r9, r1]
   1aae4:	add	r1, lr, r1
   1aae8:	cmp	r2, #5
   1aaec:	ldrb	r0, [r3, r0]
   1aaf0:	strb	r0, [r1, #-16]
   1aaf4:	ble	1ab04 <__assert_fail@plt+0x963c>
   1aaf8:	ldrb	r1, [r9]
   1aafc:	ldrb	r3, [r3, r1]
   1ab00:	strb	r3, [sp, #16]
   1ab04:	add	r1, sp, #16
   1ab08:	b	1a908 <__assert_fail@plt+0x9440>
   1ab0c:	strd	r4, [sp, #-16]!
   1ab10:	mov	r4, r1
   1ab14:	mov	r1, r2
   1ab18:	ldr	r2, [r0, #88]	; 0x58
   1ab1c:	mov	r5, r0
   1ab20:	str	r6, [sp, #8]
   1ab24:	str	lr, [sp, #12]
   1ab28:	bl	19f58 <__assert_fail@plt+0x8a90>
   1ab2c:	ldr	r1, [r4, #8]
   1ab30:	cmp	r1, #0
   1ab34:	ble	1aba0 <__assert_fail@plt+0x96d8>
   1ab38:	ldr	ip, [r5, #84]	; 0x54
   1ab3c:	ands	r3, r0, #1
   1ab40:	and	r2, r0, #2
   1ab44:	and	r0, r0, #8
   1ab48:	ldr	lr, [r4, #12]
   1ab4c:	ldr	ip, [ip]
   1ab50:	beq	1abb4 <__assert_fail@plt+0x96ec>
   1ab54:	cmp	r2, #0
   1ab58:	beq	1ace4 <__assert_fail@plt+0x981c>
   1ab5c:	cmp	r0, #0
   1ab60:	beq	1ad74 <__assert_fail@plt+0x98ac>
   1ab64:	mov	r2, #0
   1ab68:	ldr	r0, [lr, r2, lsl #2]
   1ab6c:	add	r2, r2, #1
   1ab70:	add	r3, ip, r0, lsl #3
   1ab74:	ldrb	r4, [r3, #4]
   1ab78:	ldr	r3, [r3, #4]
   1ab7c:	cmp	r4, #2
   1ab80:	ubfx	r3, r3, #8, #10
   1ab84:	bne	1ab98 <__assert_fail@plt+0x96d0>
   1ab88:	cmp	r3, #0
   1ab8c:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ab90:	tst	r3, #8
   1ab94:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ab98:	cmp	r1, r2
   1ab9c:	bne	1ab68 <__assert_fail@plt+0x96a0>
   1aba0:	ldrd	r4, [sp]
   1aba4:	mov	r0, #0
   1aba8:	ldr	r6, [sp, #8]
   1abac:	add	sp, sp, #12
   1abb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1abb4:	cmp	r2, #0
   1abb8:	beq	1ac54 <__assert_fail@plt+0x978c>
   1abbc:	cmp	r0, #0
   1abc0:	sub	lr, lr, #4
   1abc4:	beq	1ac14 <__assert_fail@plt+0x974c>
   1abc8:	ldr	r0, [lr, #4]!
   1abcc:	add	r3, r3, #1
   1abd0:	add	r2, ip, r0, lsl #3
   1abd4:	ldrb	r4, [r2, #4]
   1abd8:	ldr	r2, [r2, #4]
   1abdc:	cmp	r4, #2
   1abe0:	ubfx	r2, r2, #8, #10
   1abe4:	bne	1ac08 <__assert_fail@plt+0x9740>
   1abe8:	cmp	r2, #0
   1abec:	beq	1abf8 <__assert_fail@plt+0x9730>
   1abf0:	tst	r2, #4
   1abf4:	bne	1ac08 <__assert_fail@plt+0x9740>
   1abf8:	ldrd	r4, [sp]
   1abfc:	ldr	r6, [sp, #8]
   1ac00:	add	sp, sp, #12
   1ac04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac08:	cmp	r1, r3
   1ac0c:	bne	1abc8 <__assert_fail@plt+0x9700>
   1ac10:	b	1aba0 <__assert_fail@plt+0x96d8>
   1ac14:	mov	r3, r0
   1ac18:	ldr	r0, [lr, #4]!
   1ac1c:	add	r3, r3, #1
   1ac20:	add	r2, ip, r0, lsl #3
   1ac24:	ldrb	r4, [r2, #4]
   1ac28:	ldr	r2, [r2, #4]
   1ac2c:	cmp	r4, #2
   1ac30:	ubfx	r2, r2, #8, #10
   1ac34:	bne	1ac48 <__assert_fail@plt+0x9780>
   1ac38:	cmp	r2, #0
   1ac3c:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ac40:	tst	r2, #132	; 0x84
   1ac44:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ac48:	cmp	r1, r3
   1ac4c:	bne	1ac18 <__assert_fail@plt+0x9750>
   1ac50:	b	1aba0 <__assert_fail@plt+0x96d8>
   1ac54:	cmp	r0, #0
   1ac58:	beq	1aca0 <__assert_fail@plt+0x97d8>
   1ac5c:	sub	lr, lr, #4
   1ac60:	mov	r3, r2
   1ac64:	ldr	r0, [lr, #4]!
   1ac68:	add	r3, r3, #1
   1ac6c:	add	r2, ip, r0, lsl #3
   1ac70:	ldrb	r4, [r2, #4]
   1ac74:	ldr	r2, [r2, #4]
   1ac78:	cmp	r4, #2
   1ac7c:	ubfx	r2, r2, #8, #10
   1ac80:	bne	1ac94 <__assert_fail@plt+0x97cc>
   1ac84:	cmp	r2, #0
   1ac88:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ac8c:	tst	r2, #36	; 0x24
   1ac90:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ac94:	cmp	r1, r3
   1ac98:	bne	1ac64 <__assert_fail@plt+0x979c>
   1ac9c:	b	1aba0 <__assert_fail@plt+0x96d8>
   1aca0:	sub	r2, lr, #4
   1aca4:	mov	r3, r0
   1aca8:	ldr	r0, [r2, #4]!
   1acac:	add	r3, r3, #1
   1acb0:	add	lr, ip, r0, lsl #3
   1acb4:	ldrb	r4, [lr, #4]
   1acb8:	ldr	lr, [lr, #4]
   1acbc:	cmp	r4, #2
   1acc0:	ubfx	lr, lr, #8, #10
   1acc4:	bne	1acd8 <__assert_fail@plt+0x9810>
   1acc8:	cmp	lr, #0
   1accc:	beq	1abf8 <__assert_fail@plt+0x9730>
   1acd0:	tst	lr, #164	; 0xa4
   1acd4:	beq	1abf8 <__assert_fail@plt+0x9730>
   1acd8:	cmp	r1, r3
   1acdc:	bne	1aca8 <__assert_fail@plt+0x97e0>
   1ace0:	b	1aba0 <__assert_fail@plt+0x96d8>
   1ace4:	cmp	r0, #0
   1ace8:	beq	1ad2c <__assert_fail@plt+0x9864>
   1acec:	mov	r3, r2
   1acf0:	ldr	r0, [lr, r3, lsl #2]
   1acf4:	add	r2, ip, r0, lsl #3
   1acf8:	ldrb	r4, [r2, #4]
   1acfc:	ldr	r2, [r2, #4]
   1ad00:	cmp	r4, #2
   1ad04:	ubfx	r2, r2, #8, #10
   1ad08:	bne	1ad1c <__assert_fail@plt+0x9854>
   1ad0c:	cmp	r2, #0
   1ad10:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ad14:	tst	r2, #8
   1ad18:	beq	1adb4 <__assert_fail@plt+0x98ec>
   1ad1c:	add	r3, r3, #1
   1ad20:	cmp	r1, r3
   1ad24:	bne	1acf0 <__assert_fail@plt+0x9828>
   1ad28:	b	1aba0 <__assert_fail@plt+0x96d8>
   1ad2c:	mov	r3, r0
   1ad30:	ldr	r0, [lr, r3, lsl #2]
   1ad34:	add	r2, ip, r0, lsl #3
   1ad38:	ldrb	r4, [r2, #4]
   1ad3c:	ldr	r2, [r2, #4]
   1ad40:	cmp	r4, #2
   1ad44:	ubfx	r2, r2, #8, #10
   1ad48:	bne	1ad64 <__assert_fail@plt+0x989c>
   1ad4c:	cmp	r2, #0
   1ad50:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ad54:	tst	r2, #8
   1ad58:	bne	1ad64 <__assert_fail@plt+0x989c>
   1ad5c:	tst	r2, #160	; 0xa0
   1ad60:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ad64:	add	r3, r3, #1
   1ad68:	cmp	r3, r1
   1ad6c:	bne	1ad30 <__assert_fail@plt+0x9868>
   1ad70:	b	1aba0 <__assert_fail@plt+0x96d8>
   1ad74:	mov	r3, r0
   1ad78:	ldr	r0, [lr, r3, lsl #2]
   1ad7c:	add	r2, ip, r0, lsl #3
   1ad80:	ldrb	r4, [r2, #4]
   1ad84:	ldr	r2, [r2, #4]
   1ad88:	cmp	r4, #2
   1ad8c:	ubfx	r2, r2, #8, #10
   1ad90:	bne	1ada4 <__assert_fail@plt+0x98dc>
   1ad94:	cmp	r2, #0
   1ad98:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ad9c:	tst	r2, #8
   1ada0:	beq	1adc0 <__assert_fail@plt+0x98f8>
   1ada4:	add	r3, r3, #1
   1ada8:	cmp	r1, r3
   1adac:	bne	1ad78 <__assert_fail@plt+0x98b0>
   1adb0:	b	1aba0 <__assert_fail@plt+0x96d8>
   1adb4:	tst	r2, #32
   1adb8:	beq	1abf8 <__assert_fail@plt+0x9730>
   1adbc:	b	1ad1c <__assert_fail@plt+0x9854>
   1adc0:	tst	r2, #128	; 0x80
   1adc4:	beq	1abf8 <__assert_fail@plt+0x9730>
   1adc8:	b	1ada4 <__assert_fail@plt+0x98dc>
   1adcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1add0:	strd	r6, [sp, #8]
   1add4:	strd	sl, [sp, #24]
   1add8:	ldr	fp, [r1]
   1addc:	strd	r8, [sp, #16]
   1ade0:	str	lr, [sp, #32]
   1ade4:	sub	sp, sp, #12
   1ade8:	ldr	r6, [r0, #84]	; 0x54
   1adec:	cmp	fp, #0
   1adf0:	ble	1aeac <__assert_fail@plt+0x99e4>
   1adf4:	mov	r8, r3
   1adf8:	mov	r9, r2
   1adfc:	mov	sl, r0
   1ae00:	mov	r7, r1
   1ae04:	mov	r4, #0
   1ae08:	b	1ae14 <__assert_fail@plt+0x994c>
   1ae0c:	cmp	r4, fp
   1ae10:	bge	1aeac <__assert_fail@plt+0x99e4>
   1ae14:	ldr	r3, [r9]
   1ae18:	ldr	ip, [r6]
   1ae1c:	ldr	r5, [r3, r4, lsl #2]
   1ae20:	add	r4, r4, #1
   1ae24:	add	lr, ip, r5, lsl #3
   1ae28:	ldrb	lr, [lr, #4]
   1ae2c:	cmp	lr, #8
   1ae30:	bne	1ae0c <__assert_fail@plt+0x9944>
   1ae34:	ldr	r3, [ip, r5, lsl #3]
   1ae38:	cmp	r3, #31
   1ae3c:	bgt	1ae0c <__assert_fail@plt+0x9944>
   1ae40:	ldr	r2, [r6, #80]	; 0x50
   1ae44:	lsr	r3, r2, r3
   1ae48:	tst	r3, #1
   1ae4c:	beq	1ae0c <__assert_fail@plt+0x9944>
   1ae50:	ldr	fp, [sl, #124]	; 0x7c
   1ae54:	ldr	r3, [sl, #128]	; 0x80
   1ae58:	ldr	r2, [sl, #132]	; 0x84
   1ae5c:	cmp	r3, fp
   1ae60:	beq	1aed4 <__assert_fail@plt+0x9a0c>
   1ae64:	mov	r1, #24
   1ae68:	mov	r0, #1
   1ae6c:	str	r2, [sp, #4]
   1ae70:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   1ae74:	ldr	r2, [sp, #4]
   1ae78:	ldr	r3, [sl, #124]	; 0x7c
   1ae7c:	str	r0, [r2, fp, lsl #2]
   1ae80:	ldr	r2, [sl, #132]	; 0x84
   1ae84:	add	r1, r3, #1
   1ae88:	ldr	r3, [r2, r3, lsl #2]
   1ae8c:	cmp	r3, #0
   1ae90:	beq	1aecc <__assert_fail@plt+0x9a04>
   1ae94:	str	r5, [r3, #4]
   1ae98:	str	r1, [sl, #124]	; 0x7c
   1ae9c:	str	r8, [r3]
   1aea0:	ldr	fp, [r7]
   1aea4:	cmp	r4, fp
   1aea8:	blt	1ae14 <__assert_fail@plt+0x994c>
   1aeac:	mov	r0, #0
   1aeb0:	add	sp, sp, #12
   1aeb4:	ldrd	r4, [sp]
   1aeb8:	ldrd	r6, [sp, #8]
   1aebc:	ldrd	r8, [sp, #16]
   1aec0:	ldrd	sl, [sp, #24]
   1aec4:	add	sp, sp, #32
   1aec8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aecc:	mov	r0, #12
   1aed0:	b	1aeb0 <__assert_fail@plt+0x99e8>
   1aed4:	mov	r0, r2
   1aed8:	lsl	r1, fp, #3
   1aedc:	bl	2bb50 <__assert_fail@plt+0x1a688>
   1aee0:	subs	r2, r0, #0
   1aee4:	lsl	r3, fp, #1
   1aee8:	beq	1aecc <__assert_fail@plt+0x9a04>
   1aeec:	str	r3, [sl, #128]	; 0x80
   1aef0:	str	r2, [sl, #132]	; 0x84
   1aef4:	ldr	fp, [sl, #124]	; 0x7c
   1aef8:	b	1ae64 <__assert_fail@plt+0x999c>
   1aefc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1af00:	mov	r5, r1
   1af04:	strd	r6, [sp, #8]
   1af08:	mov	r6, r0
   1af0c:	strd	r8, [sp, #16]
   1af10:	mov	r8, r3
   1af14:	strd	sl, [sp, #24]
   1af18:	mov	sl, r2
   1af1c:	str	lr, [sp, #32]
   1af20:	sub	sp, sp, #4
   1af24:	ldr	r9, [sp, #40]	; 0x28
   1af28:	ldr	ip, [sp, #48]	; 0x30
   1af2c:	ldr	r7, [sp, #44]	; 0x2c
   1af30:	tst	ip, #4194304	; 0x400000
   1af34:	beq	1af58 <__assert_fail@plt+0x9a90>
   1af38:	mov	r0, r7
   1af3c:	movw	r1, #53372	; 0xd07c
   1af40:	movt	r1, #2
   1af44:	bl	1118c <strcmp@plt>
   1af48:	cmp	r0, #0
   1af4c:	movweq	r7, #53364	; 0xd074
   1af50:	movteq	r7, #2
   1af54:	bne	1b05c <__assert_fail@plt+0x9b94>
   1af58:	ldr	r4, [r8]
   1af5c:	ldr	r3, [r9]
   1af60:	ldr	fp, [sl]
   1af64:	cmp	r3, r4
   1af68:	beq	1b140 <__assert_fail@plt+0x9c78>
   1af6c:	add	r3, r4, #1
   1af70:	mov	r0, r7
   1af74:	str	r3, [r8]
   1af78:	bl	11168 <wctype@plt>
   1af7c:	movw	r1, #53388	; 0xd08c
   1af80:	movt	r1, #2
   1af84:	str	r0, [fp, r4, lsl #2]
   1af88:	mov	r0, r7
   1af8c:	bl	1118c <strcmp@plt>
   1af90:	subs	r4, r0, #0
   1af94:	beq	1b014 <__assert_fail@plt+0x9b4c>
   1af98:	movw	r1, #53396	; 0xd094
   1af9c:	movt	r1, #2
   1afa0:	mov	r0, r7
   1afa4:	bl	1118c <strcmp@plt>
   1afa8:	subs	r4, r0, #0
   1afac:	bne	1b080 <__assert_fail@plt+0x9bb8>
   1afb0:	bl	11378 <__ctype_b_loc@plt>
   1afb4:	ldr	r3, [r0]
   1afb8:	cmp	r6, #0
   1afbc:	moveq	ip, #1
   1afc0:	sub	r3, r3, #2
   1afc4:	bne	1b268 <__assert_fail@plt+0x9da0>
   1afc8:	ldrh	r2, [r3, #2]!
   1afcc:	asr	r1, r4, #5
   1afd0:	and	r0, r4, #31
   1afd4:	add	r4, r4, #1
   1afd8:	tst	r2, #2
   1afdc:	beq	1afec <__assert_fail@plt+0x9b24>
   1afe0:	ldr	r2, [r5, r1, lsl #2]
   1afe4:	orr	r2, r2, ip, lsl r0
   1afe8:	str	r2, [r5, r1, lsl #2]
   1afec:	cmp	r4, #256	; 0x100
   1aff0:	bne	1afc8 <__assert_fail@plt+0x9b00>
   1aff4:	mov	r0, #0
   1aff8:	add	sp, sp, #4
   1affc:	ldrd	r4, [sp]
   1b000:	ldrd	r6, [sp, #8]
   1b004:	ldrd	r8, [sp, #16]
   1b008:	ldrd	sl, [sp, #24]
   1b00c:	add	sp, sp, #32
   1b010:	pop	{pc}		; (ldr pc, [sp], #4)
   1b014:	bl	11378 <__ctype_b_loc@plt>
   1b018:	ldr	r3, [r0]
   1b01c:	cmp	r6, #0
   1b020:	moveq	lr, #1
   1b024:	sub	r3, r3, #2
   1b028:	bne	1b22c <__assert_fail@plt+0x9d64>
   1b02c:	ldrh	r0, [r3, #2]!
   1b030:	asr	r2, r4, #5
   1b034:	and	ip, r4, #31
   1b038:	add	r4, r4, #1
   1b03c:	tst	r0, #8
   1b040:	beq	1b050 <__assert_fail@plt+0x9b88>
   1b044:	ldr	r1, [r5, r2, lsl #2]
   1b048:	orr	r1, r1, lr, lsl ip
   1b04c:	str	r1, [r5, r2, lsl #2]
   1b050:	cmp	r4, #256	; 0x100
   1b054:	bne	1b02c <__assert_fail@plt+0x9b64>
   1b058:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b05c:	mov	r0, r7
   1b060:	movw	r1, #53380	; 0xd084
   1b064:	movt	r1, #2
   1b068:	bl	1118c <strcmp@plt>
   1b06c:	cmp	r0, #0
   1b070:	movw	r3, #53364	; 0xd074
   1b074:	movt	r3, #2
   1b078:	moveq	r7, r3
   1b07c:	b	1af58 <__assert_fail@plt+0x9a90>
   1b080:	movw	r1, #53380	; 0xd084
   1b084:	movt	r1, #2
   1b088:	mov	r0, r7
   1b08c:	bl	1118c <strcmp@plt>
   1b090:	subs	r4, r0, #0
   1b094:	beq	1b0f8 <__assert_fail@plt+0x9c30>
   1b098:	movw	r1, #53404	; 0xd09c
   1b09c:	movt	r1, #2
   1b0a0:	mov	r0, r7
   1b0a4:	bl	1118c <strcmp@plt>
   1b0a8:	subs	r4, r0, #0
   1b0ac:	bne	1b16c <__assert_fail@plt+0x9ca4>
   1b0b0:	bl	11378 <__ctype_b_loc@plt>
   1b0b4:	ldr	r3, [r0]
   1b0b8:	cmp	r6, #0
   1b0bc:	moveq	ip, #1
   1b0c0:	sub	r3, r3, #2
   1b0c4:	bne	1b444 <__assert_fail@plt+0x9f7c>
   1b0c8:	ldrh	r2, [r3, #2]!
   1b0cc:	asr	r1, r4, #5
   1b0d0:	and	r0, r4, #31
   1b0d4:	add	r4, r4, #1
   1b0d8:	tst	r2, #8192	; 0x2000
   1b0dc:	beq	1b0ec <__assert_fail@plt+0x9c24>
   1b0e0:	ldr	r2, [r5, r1, lsl #2]
   1b0e4:	orr	r2, r2, ip, lsl r0
   1b0e8:	str	r2, [r5, r1, lsl #2]
   1b0ec:	cmp	r4, #256	; 0x100
   1b0f0:	bne	1b0c8 <__assert_fail@plt+0x9c00>
   1b0f4:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b0f8:	bl	11378 <__ctype_b_loc@plt>
   1b0fc:	ldr	r3, [r0]
   1b100:	cmp	r6, #0
   1b104:	moveq	ip, #1
   1b108:	sub	r3, r3, #2
   1b10c:	bne	1b2a4 <__assert_fail@plt+0x9ddc>
   1b110:	ldrh	r2, [r3, #2]!
   1b114:	asr	r1, r4, #5
   1b118:	and	r0, r4, #31
   1b11c:	add	r4, r4, #1
   1b120:	tst	r2, #512	; 0x200
   1b124:	beq	1b134 <__assert_fail@plt+0x9c6c>
   1b128:	ldr	r2, [r5, r1, lsl #2]
   1b12c:	orr	r2, r2, ip, lsl r0
   1b130:	str	r2, [r5, r1, lsl #2]
   1b134:	cmp	r4, #256	; 0x100
   1b138:	bne	1b110 <__assert_fail@plt+0x9c48>
   1b13c:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b140:	lsl	r4, r4, #1
   1b144:	mov	r0, fp
   1b148:	add	r4, r4, #1
   1b14c:	lsl	r1, r4, #2
   1b150:	bl	2bb50 <__assert_fail@plt+0x1a688>
   1b154:	subs	fp, r0, #0
   1b158:	beq	1b3a0 <__assert_fail@plt+0x9ed8>
   1b15c:	str	fp, [sl]
   1b160:	str	r4, [r9]
   1b164:	ldr	r4, [r8]
   1b168:	b	1af6c <__assert_fail@plt+0x9aa4>
   1b16c:	movw	r1, #53364	; 0xd074
   1b170:	movt	r1, #2
   1b174:	mov	r0, r7
   1b178:	bl	1118c <strcmp@plt>
   1b17c:	subs	r4, r0, #0
   1b180:	beq	1b1e4 <__assert_fail@plt+0x9d1c>
   1b184:	movw	r1, #53412	; 0xd0a4
   1b188:	movt	r1, #2
   1b18c:	mov	r0, r7
   1b190:	bl	1118c <strcmp@plt>
   1b194:	subs	r4, r0, #0
   1b198:	bne	1b2e0 <__assert_fail@plt+0x9e18>
   1b19c:	bl	11378 <__ctype_b_loc@plt>
   1b1a0:	ldr	r3, [r0]
   1b1a4:	cmp	r6, #0
   1b1a8:	moveq	ip, #1
   1b1ac:	sub	r3, r3, #2
   1b1b0:	bne	1b480 <__assert_fail@plt+0x9fb8>
   1b1b4:	ldrh	r1, [r3, #2]!
   1b1b8:	asr	r2, r4, #5
   1b1bc:	and	r0, r4, #31
   1b1c0:	add	r4, r4, #1
   1b1c4:	tst	r1, #2048	; 0x800
   1b1c8:	beq	1b1d8 <__assert_fail@plt+0x9d10>
   1b1cc:	ldr	r1, [r5, r2, lsl #2]
   1b1d0:	orr	r1, r1, ip, lsl r0
   1b1d4:	str	r1, [r5, r2, lsl #2]
   1b1d8:	cmp	r4, #256	; 0x100
   1b1dc:	bne	1b1b4 <__assert_fail@plt+0x9cec>
   1b1e0:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b1e4:	bl	11378 <__ctype_b_loc@plt>
   1b1e8:	ldr	r3, [r0]
   1b1ec:	cmp	r6, #0
   1b1f0:	moveq	ip, #1
   1b1f4:	sub	r3, r3, #2
   1b1f8:	bne	1b408 <__assert_fail@plt+0x9f40>
   1b1fc:	ldrh	r2, [r3, #2]!
   1b200:	asr	r1, r4, #5
   1b204:	and	r0, r4, #31
   1b208:	add	r4, r4, #1
   1b20c:	tst	r2, #1024	; 0x400
   1b210:	beq	1b220 <__assert_fail@plt+0x9d58>
   1b214:	ldr	r2, [r5, r1, lsl #2]
   1b218:	orr	r2, r2, ip, lsl r0
   1b21c:	str	r2, [r5, r1, lsl #2]
   1b220:	cmp	r4, #256	; 0x100
   1b224:	bne	1b1fc <__assert_fail@plt+0x9d34>
   1b228:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b22c:	add	ip, r6, #256	; 0x100
   1b230:	mov	lr, #1
   1b234:	ldrh	r2, [r3, #2]!
   1b238:	tst	r2, #8
   1b23c:	beq	1b258 <__assert_fail@plt+0x9d90>
   1b240:	ldrb	r2, [r6]
   1b244:	asr	r0, r2, #5
   1b248:	and	r2, r2, #31
   1b24c:	ldr	r1, [r5, r0, lsl #2]
   1b250:	orr	r2, r1, lr, lsl r2
   1b254:	str	r2, [r5, r0, lsl #2]
   1b258:	add	r6, r6, #1
   1b25c:	cmp	ip, r6
   1b260:	bne	1b234 <__assert_fail@plt+0x9d6c>
   1b264:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b268:	add	ip, r6, #256	; 0x100
   1b26c:	mov	lr, #1
   1b270:	ldrh	r2, [r3, #2]!
   1b274:	tst	r2, #2
   1b278:	beq	1b294 <__assert_fail@plt+0x9dcc>
   1b27c:	ldrb	r2, [r6]
   1b280:	asr	r0, r2, #5
   1b284:	and	r2, r2, #31
   1b288:	ldr	r1, [r5, r0, lsl #2]
   1b28c:	orr	r2, r1, lr, lsl r2
   1b290:	str	r2, [r5, r0, lsl #2]
   1b294:	add	r6, r6, #1
   1b298:	cmp	ip, r6
   1b29c:	bne	1b270 <__assert_fail@plt+0x9da8>
   1b2a0:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b2a4:	add	ip, r6, #256	; 0x100
   1b2a8:	mov	lr, #1
   1b2ac:	ldrh	r2, [r3, #2]!
   1b2b0:	tst	r2, #512	; 0x200
   1b2b4:	beq	1b2d0 <__assert_fail@plt+0x9e08>
   1b2b8:	ldrb	r2, [r6]
   1b2bc:	asr	r0, r2, #5
   1b2c0:	and	r2, r2, #31
   1b2c4:	ldr	r1, [r5, r0, lsl #2]
   1b2c8:	orr	r2, r1, lr, lsl r2
   1b2cc:	str	r2, [r5, r0, lsl #2]
   1b2d0:	add	r6, r6, #1
   1b2d4:	cmp	ip, r6
   1b2d8:	bne	1b2ac <__assert_fail@plt+0x9de4>
   1b2dc:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b2e0:	movw	r1, #53420	; 0xd0ac
   1b2e4:	movt	r1, #2
   1b2e8:	mov	r0, r7
   1b2ec:	bl	1118c <strcmp@plt>
   1b2f0:	subs	r4, r0, #0
   1b2f4:	bne	1b340 <__assert_fail@plt+0x9e78>
   1b2f8:	bl	11378 <__ctype_b_loc@plt>
   1b2fc:	ldr	r3, [r0]
   1b300:	cmp	r6, #0
   1b304:	moveq	ip, #1
   1b308:	sub	r3, r3, #2
   1b30c:	bne	1b690 <__assert_fail@plt+0xa1c8>
   1b310:	ldrh	r2, [r3, #2]!
   1b314:	asr	r1, r4, #5
   1b318:	and	r0, r4, #31
   1b31c:	add	r4, r4, #1
   1b320:	tst	r2, #16384	; 0x4000
   1b324:	beq	1b334 <__assert_fail@plt+0x9e6c>
   1b328:	ldr	r2, [r5, r1, lsl #2]
   1b32c:	orr	r2, r2, ip, lsl r0
   1b330:	str	r2, [r5, r1, lsl #2]
   1b334:	cmp	r4, #256	; 0x100
   1b338:	bne	1b310 <__assert_fail@plt+0x9e48>
   1b33c:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b340:	movw	r1, #53372	; 0xd07c
   1b344:	movt	r1, #2
   1b348:	mov	r0, r7
   1b34c:	bl	1118c <strcmp@plt>
   1b350:	subs	r4, r0, #0
   1b354:	bne	1b3a8 <__assert_fail@plt+0x9ee0>
   1b358:	bl	11378 <__ctype_b_loc@plt>
   1b35c:	ldr	r3, [r0]
   1b360:	cmp	r6, #0
   1b364:	moveq	ip, #1
   1b368:	sub	r3, r3, #2
   1b36c:	bne	1b708 <__assert_fail@plt+0xa240>
   1b370:	ldrh	r2, [r3, #2]!
   1b374:	asr	r1, r4, #5
   1b378:	and	r0, r4, #31
   1b37c:	add	r4, r4, #1
   1b380:	tst	r2, #256	; 0x100
   1b384:	beq	1b394 <__assert_fail@plt+0x9ecc>
   1b388:	ldr	r2, [r5, r1, lsl #2]
   1b38c:	orr	r2, r2, ip, lsl r0
   1b390:	str	r2, [r5, r1, lsl #2]
   1b394:	cmp	r4, #256	; 0x100
   1b398:	bne	1b370 <__assert_fail@plt+0x9ea8>
   1b39c:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b3a0:	mov	r0, #12
   1b3a4:	b	1aff8 <__assert_fail@plt+0x9b30>
   1b3a8:	movw	r1, #53428	; 0xd0b4
   1b3ac:	movt	r1, #2
   1b3b0:	mov	r0, r7
   1b3b4:	bl	1118c <strcmp@plt>
   1b3b8:	subs	r4, r0, #0
   1b3bc:	bne	1b4bc <__assert_fail@plt+0x9ff4>
   1b3c0:	bl	11378 <__ctype_b_loc@plt>
   1b3c4:	ldr	r3, [r0]
   1b3c8:	cmp	r6, #0
   1b3cc:	moveq	ip, #1
   1b3d0:	sub	r3, r3, #2
   1b3d4:	bne	1b6cc <__assert_fail@plt+0xa204>
   1b3d8:	ldrh	r2, [r3, #2]!
   1b3dc:	asr	r1, r4, #5
   1b3e0:	and	r0, r4, #31
   1b3e4:	add	r4, r4, #1
   1b3e8:	tst	r2, #1
   1b3ec:	beq	1b3fc <__assert_fail@plt+0x9f34>
   1b3f0:	ldr	r2, [r5, r1, lsl #2]
   1b3f4:	orr	r2, r2, ip, lsl r0
   1b3f8:	str	r2, [r5, r1, lsl #2]
   1b3fc:	cmp	r4, #256	; 0x100
   1b400:	bne	1b3d8 <__assert_fail@plt+0x9f10>
   1b404:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b408:	add	ip, r6, #256	; 0x100
   1b40c:	mov	lr, #1
   1b410:	ldrh	r2, [r3, #2]!
   1b414:	tst	r2, #1024	; 0x400
   1b418:	beq	1b434 <__assert_fail@plt+0x9f6c>
   1b41c:	ldrb	r2, [r6]
   1b420:	asr	r0, r2, #5
   1b424:	and	r2, r2, #31
   1b428:	ldr	r1, [r5, r0, lsl #2]
   1b42c:	orr	r2, r1, lr, lsl r2
   1b430:	str	r2, [r5, r0, lsl #2]
   1b434:	add	r6, r6, #1
   1b438:	cmp	ip, r6
   1b43c:	bne	1b410 <__assert_fail@plt+0x9f48>
   1b440:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b444:	add	ip, r6, #256	; 0x100
   1b448:	mov	lr, #1
   1b44c:	ldrh	r2, [r3, #2]!
   1b450:	tst	r2, #8192	; 0x2000
   1b454:	beq	1b470 <__assert_fail@plt+0x9fa8>
   1b458:	ldrb	r2, [r6]
   1b45c:	asr	r0, r2, #5
   1b460:	and	r2, r2, #31
   1b464:	ldr	r1, [r5, r0, lsl #2]
   1b468:	orr	r2, r1, lr, lsl r2
   1b46c:	str	r2, [r5, r0, lsl #2]
   1b470:	add	r6, r6, #1
   1b474:	cmp	ip, r6
   1b478:	bne	1b44c <__assert_fail@plt+0x9f84>
   1b47c:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b480:	add	r1, r6, #256	; 0x100
   1b484:	mov	lr, #1
   1b488:	ldrh	r2, [r3, #2]!
   1b48c:	tst	r2, #2048	; 0x800
   1b490:	beq	1b4ac <__assert_fail@plt+0x9fe4>
   1b494:	ldrb	r2, [r6]
   1b498:	asr	ip, r2, #5
   1b49c:	and	r2, r2, #31
   1b4a0:	ldr	r0, [r5, ip, lsl #2]
   1b4a4:	orr	r2, r0, lr, lsl r2
   1b4a8:	str	r2, [r5, ip, lsl #2]
   1b4ac:	add	r6, r6, #1
   1b4b0:	cmp	r1, r6
   1b4b4:	bne	1b488 <__assert_fail@plt+0x9fc0>
   1b4b8:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b4bc:	movw	r1, #53436	; 0xd0bc
   1b4c0:	movt	r1, #2
   1b4c4:	mov	r0, r7
   1b4c8:	bl	1118c <strcmp@plt>
   1b4cc:	subs	r4, r0, #0
   1b4d0:	bne	1b558 <__assert_fail@plt+0xa090>
   1b4d4:	bl	11378 <__ctype_b_loc@plt>
   1b4d8:	ldr	r3, [r0]
   1b4dc:	cmp	r6, #0
   1b4e0:	moveq	r0, #1
   1b4e4:	sub	r3, r3, #2
   1b4e8:	bne	1b51c <__assert_fail@plt+0xa054>
   1b4ec:	ldrsh	r2, [r3, #2]!
   1b4f0:	asr	r1, r4, #5
   1b4f4:	and	ip, r4, #31
   1b4f8:	add	r4, r4, #1
   1b4fc:	cmp	r2, #0
   1b500:	bge	1b510 <__assert_fail@plt+0xa048>
   1b504:	ldr	r2, [r5, r1, lsl #2]
   1b508:	orr	r2, r2, r0, lsl ip
   1b50c:	str	r2, [r5, r1, lsl #2]
   1b510:	cmp	r4, #256	; 0x100
   1b514:	bne	1b4ec <__assert_fail@plt+0xa024>
   1b518:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b51c:	add	lr, r6, #256	; 0x100
   1b520:	mov	ip, #1
   1b524:	ldrsh	r2, [r3, #2]!
   1b528:	cmp	r2, #0
   1b52c:	bge	1b548 <__assert_fail@plt+0xa080>
   1b530:	ldrb	r2, [r6]
   1b534:	asr	r0, r2, #5
   1b538:	and	r2, r2, #31
   1b53c:	ldr	r1, [r5, r0, lsl #2]
   1b540:	orr	r2, r1, ip, lsl r2
   1b544:	str	r2, [r5, r0, lsl #2]
   1b548:	add	r6, r6, #1
   1b54c:	cmp	lr, r6
   1b550:	bne	1b524 <__assert_fail@plt+0xa05c>
   1b554:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b558:	movw	r1, #53444	; 0xd0c4
   1b55c:	movt	r1, #2
   1b560:	mov	r0, r7
   1b564:	bl	1118c <strcmp@plt>
   1b568:	subs	r4, r0, #0
   1b56c:	bne	1b5f4 <__assert_fail@plt+0xa12c>
   1b570:	bl	11378 <__ctype_b_loc@plt>
   1b574:	ldr	r3, [r0]
   1b578:	cmp	r6, #0
   1b57c:	moveq	r0, #1
   1b580:	sub	r3, r3, #2
   1b584:	bne	1b5b8 <__assert_fail@plt+0xa0f0>
   1b588:	ldrh	r2, [r3, #2]!
   1b58c:	asr	r1, r4, #5
   1b590:	and	ip, r4, #31
   1b594:	add	r4, r4, #1
   1b598:	tst	r2, #4
   1b59c:	beq	1b5ac <__assert_fail@plt+0xa0e4>
   1b5a0:	ldr	r2, [r5, r1, lsl #2]
   1b5a4:	orr	r2, r2, r0, lsl ip
   1b5a8:	str	r2, [r5, r1, lsl #2]
   1b5ac:	cmp	r4, #256	; 0x100
   1b5b0:	bne	1b588 <__assert_fail@plt+0xa0c0>
   1b5b4:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b5b8:	add	lr, r6, #256	; 0x100
   1b5bc:	mov	ip, #1
   1b5c0:	ldrh	r2, [r3, #2]!
   1b5c4:	tst	r2, #4
   1b5c8:	beq	1b5e4 <__assert_fail@plt+0xa11c>
   1b5cc:	ldrb	r2, [r6]
   1b5d0:	asr	r0, r2, #5
   1b5d4:	and	r2, r2, #31
   1b5d8:	ldr	r1, [r5, r0, lsl #2]
   1b5dc:	orr	r2, r1, ip, lsl r2
   1b5e0:	str	r2, [r5, r0, lsl #2]
   1b5e4:	add	r6, r6, #1
   1b5e8:	cmp	lr, r6
   1b5ec:	bne	1b5c0 <__assert_fail@plt+0xa0f8>
   1b5f0:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b5f4:	mov	r0, r7
   1b5f8:	movw	r1, #53452	; 0xd0cc
   1b5fc:	movt	r1, #2
   1b600:	bl	1118c <strcmp@plt>
   1b604:	subs	r4, r0, #0
   1b608:	movne	r0, #4
   1b60c:	bne	1aff8 <__assert_fail@plt+0x9b30>
   1b610:	bl	11378 <__ctype_b_loc@plt>
   1b614:	ldr	r3, [r0]
   1b618:	cmp	r6, #0
   1b61c:	moveq	r0, #1
   1b620:	sub	r3, r3, #2
   1b624:	bne	1b658 <__assert_fail@plt+0xa190>
   1b628:	ldrh	r2, [r3, #2]!
   1b62c:	asr	r1, r4, #5
   1b630:	and	ip, r4, #31
   1b634:	add	r4, r4, #1
   1b638:	tst	r2, #4096	; 0x1000
   1b63c:	beq	1b64c <__assert_fail@plt+0xa184>
   1b640:	ldr	r2, [r5, r1, lsl #2]
   1b644:	orr	r2, r2, r0, lsl ip
   1b648:	str	r2, [r5, r1, lsl #2]
   1b64c:	cmp	r4, #256	; 0x100
   1b650:	bne	1b628 <__assert_fail@plt+0xa160>
   1b654:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b658:	mov	ip, #1
   1b65c:	ldrh	r2, [r3, #2]!
   1b660:	tst	r2, #4096	; 0x1000
   1b664:	beq	1b680 <__assert_fail@plt+0xa1b8>
   1b668:	ldrb	r2, [r6, r4]
   1b66c:	asr	r0, r2, #5
   1b670:	and	r2, r2, #31
   1b674:	ldr	r1, [r5, r0, lsl #2]
   1b678:	orr	r2, r1, ip, lsl r2
   1b67c:	str	r2, [r5, r0, lsl #2]
   1b680:	add	r4, r4, #1
   1b684:	cmp	r4, #256	; 0x100
   1b688:	bne	1b65c <__assert_fail@plt+0xa194>
   1b68c:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b690:	add	lr, r6, #256	; 0x100
   1b694:	mov	ip, #1
   1b698:	ldrh	r2, [r3, #2]!
   1b69c:	tst	r2, #16384	; 0x4000
   1b6a0:	beq	1b6bc <__assert_fail@plt+0xa1f4>
   1b6a4:	ldrb	r2, [r6]
   1b6a8:	asr	r0, r2, #5
   1b6ac:	and	r2, r2, #31
   1b6b0:	ldr	r1, [r5, r0, lsl #2]
   1b6b4:	orr	r2, r1, ip, lsl r2
   1b6b8:	str	r2, [r5, r0, lsl #2]
   1b6bc:	add	r6, r6, #1
   1b6c0:	cmp	lr, r6
   1b6c4:	bne	1b698 <__assert_fail@plt+0xa1d0>
   1b6c8:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b6cc:	add	lr, r6, #256	; 0x100
   1b6d0:	mov	ip, #1
   1b6d4:	ldrh	r2, [r3, #2]!
   1b6d8:	tst	r2, #1
   1b6dc:	beq	1b6f8 <__assert_fail@plt+0xa230>
   1b6e0:	ldrb	r2, [r6]
   1b6e4:	asr	r0, r2, #5
   1b6e8:	and	r2, r2, #31
   1b6ec:	ldr	r1, [r5, r0, lsl #2]
   1b6f0:	orr	r2, r1, ip, lsl r2
   1b6f4:	str	r2, [r5, r0, lsl #2]
   1b6f8:	add	r6, r6, #1
   1b6fc:	cmp	lr, r6
   1b700:	bne	1b6d4 <__assert_fail@plt+0xa20c>
   1b704:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b708:	add	lr, r6, #256	; 0x100
   1b70c:	mov	ip, #1
   1b710:	ldrh	r2, [r3, #2]!
   1b714:	tst	r2, #256	; 0x100
   1b718:	beq	1b734 <__assert_fail@plt+0xa26c>
   1b71c:	ldrb	r2, [r6]
   1b720:	asr	r0, r2, #5
   1b724:	and	r2, r2, #31
   1b728:	ldr	r1, [r5, r0, lsl #2]
   1b72c:	orr	r2, r1, ip, lsl r2
   1b730:	str	r2, [r5, r0, lsl #2]
   1b734:	add	r6, r6, #1
   1b738:	cmp	lr, r6
   1b73c:	bne	1b710 <__assert_fail@plt+0xa248>
   1b740:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b744:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b748:	strd	r6, [sp, #8]
   1b74c:	ldr	r6, [r0]
   1b750:	strd	r8, [sp, #16]
   1b754:	strd	sl, [sp, #24]
   1b758:	str	lr, [sp, #32]
   1b75c:	sub	sp, sp, #316	; 0x13c
   1b760:	ldr	ip, [r6, #92]	; 0x5c
   1b764:	cmp	ip, #1
   1b768:	ldreq	ip, [r0, #12]
   1b76c:	movne	ip, #0
   1b770:	ubfxeq	ip, ip, #22, #1
   1b774:	str	ip, [sp, #12]
   1b778:	ldr	ip, [r1]
   1b77c:	cmp	ip, #0
   1b780:	ble	1b864 <__assert_fail@plt+0xa39c>
   1b784:	mov	r4, r3
   1b788:	mov	r3, #255	; 0xff
   1b78c:	movt	r3, #32
   1b790:	mov	r5, #0
   1b794:	str	r2, [sp, #4]
   1b798:	str	r1, [sp, #20]
   1b79c:	str	r0, [sp, #24]
   1b7a0:	str	r3, [sp, #32]
   1b7a4:	mov	r3, #1
   1b7a8:	movt	r3, #32
   1b7ac:	str	r3, [sp, #36]	; 0x24
   1b7b0:	b	1b7e4 <__assert_fail@plt+0xa31c>
   1b7b4:	cmp	r7, #3
   1b7b8:	beq	1ba08 <__assert_fail@plt+0xa540>
   1b7bc:	cmp	r7, #6
   1b7c0:	beq	1b880 <__assert_fail@plt+0xa3b8>
   1b7c4:	and	r3, r7, #253	; 0xfd
   1b7c8:	cmp	r3, #5
   1b7cc:	beq	1bbc0 <__assert_fail@plt+0xa6f8>
   1b7d0:	cmp	r7, #2
   1b7d4:	beq	1bbdc <__assert_fail@plt+0xa714>
   1b7d8:	add	r5, r5, #1
   1b7dc:	cmp	r5, ip
   1b7e0:	bge	1b864 <__assert_fail@plt+0xa39c>
   1b7e4:	ldr	r3, [sp, #4]
   1b7e8:	ldr	r1, [r6]
   1b7ec:	ldr	r3, [r3]
   1b7f0:	ldr	r8, [r3, r5, lsl #2]
   1b7f4:	lsl	r3, r8, #3
   1b7f8:	add	r2, r1, r3
   1b7fc:	ldrb	r7, [r2, #4]
   1b800:	cmp	r7, #1
   1b804:	bne	1b7b4 <__assert_fail@plt+0xa2ec>
   1b808:	ldr	r2, [sp, #12]
   1b80c:	ldrb	r9, [r1, r8, lsl #3]
   1b810:	cmp	r2, #0
   1b814:	strb	r7, [r4, r9]
   1b818:	beq	1b834 <__assert_fail@plt+0xa36c>
   1b81c:	str	r3, [sp, #8]
   1b820:	bl	1133c <__ctype_tolower_loc@plt>
   1b824:	ldr	r2, [r0]
   1b828:	ldr	r3, [sp, #8]
   1b82c:	ldr	r2, [r2, r9, lsl #2]
   1b830:	strb	r7, [r4, r2]
   1b834:	ldr	r2, [sp, #24]
   1b838:	ldr	r2, [r2, #12]
   1b83c:	tst	r2, #4194304	; 0x400000
   1b840:	beq	1b850 <__assert_fail@plt+0xa388>
   1b844:	ldr	r2, [r6, #92]	; 0x5c
   1b848:	cmp	r2, #1
   1b84c:	bgt	1bae0 <__assert_fail@plt+0xa618>
   1b850:	ldr	r3, [sp, #20]
   1b854:	add	r5, r5, #1
   1b858:	ldr	ip, [r3]
   1b85c:	cmp	r5, ip
   1b860:	blt	1b7e4 <__assert_fail@plt+0xa31c>
   1b864:	add	sp, sp, #316	; 0x13c
   1b868:	ldrd	r4, [sp]
   1b86c:	ldrd	r6, [sp, #8]
   1b870:	ldrd	r8, [sp, #16]
   1b874:	ldrd	sl, [sp, #24]
   1b878:	add	sp, sp, #32
   1b87c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b880:	ldr	r1, [r6, #92]	; 0x5c
   1b884:	ldr	fp, [r2]
   1b888:	cmp	r1, #1
   1b88c:	ble	1b8b4 <__assert_fail@plt+0xa3ec>
   1b890:	ldr	r2, [fp, #36]	; 0x24
   1b894:	cmp	r2, #0
   1b898:	bne	1b994 <__assert_fail@plt+0xa4cc>
   1b89c:	ldrb	r2, [fp, #16]
   1b8a0:	tst	r2, #1
   1b8a4:	bne	1b994 <__assert_fail@plt+0xa4cc>
   1b8a8:	ldr	r2, [fp, #32]
   1b8ac:	cmp	r2, #0
   1b8b0:	bne	1b994 <__assert_fail@plt+0xa4cc>
   1b8b4:	ldr	r2, [fp, #20]
   1b8b8:	cmp	r2, #0
   1b8bc:	ble	1b7d8 <__assert_fail@plt+0xa310>
   1b8c0:	str	r5, [sp, #28]
   1b8c4:	mov	r5, fp
   1b8c8:	mov	r7, #0
   1b8cc:	ldr	fp, [sp, #24]
   1b8d0:	add	r8, sp, #56	; 0x38
   1b8d4:	add	r9, sp, #48	; 0x30
   1b8d8:	mov	sl, #1
   1b8dc:	mov	r2, #0
   1b8e0:	mov	r3, #0
   1b8e4:	mov	r0, r8
   1b8e8:	strd	r2, [r9]
   1b8ec:	lsl	r3, r7, #2
   1b8f0:	mov	r2, r9
   1b8f4:	ldr	r1, [r5]
   1b8f8:	str	r3, [sp, #8]
   1b8fc:	ldr	r1, [r1, r7, lsl #2]
   1b900:	add	r7, r7, #1
   1b904:	bl	11174 <wcrtomb@plt>
   1b908:	cmn	r0, #1
   1b90c:	beq	1b93c <__assert_fail@plt+0xa474>
   1b910:	ldr	r3, [sp, #12]
   1b914:	ldrb	r2, [sp, #56]	; 0x38
   1b918:	cmp	r3, #0
   1b91c:	strb	sl, [r4, r2]
   1b920:	str	r2, [sp, #16]
   1b924:	beq	1b93c <__assert_fail@plt+0xa474>
   1b928:	bl	1133c <__ctype_tolower_loc@plt>
   1b92c:	ldr	r1, [r0]
   1b930:	ldr	r2, [sp, #16]
   1b934:	ldr	r2, [r1, r2, lsl #2]
   1b938:	strb	sl, [r4, r2]
   1b93c:	ldr	r2, [fp, #12]
   1b940:	tst	r2, #4194304	; 0x400000
   1b944:	beq	1b980 <__assert_fail@plt+0xa4b8>
   1b948:	ldr	r2, [r6, #92]	; 0x5c
   1b94c:	cmp	r2, #1
   1b950:	ble	1b980 <__assert_fail@plt+0xa4b8>
   1b954:	ldr	r2, [r5]
   1b958:	ldr	r3, [sp, #8]
   1b95c:	ldr	r0, [r2, r3]
   1b960:	bl	11228 <towlower@plt>
   1b964:	mov	r1, r0
   1b968:	mov	r2, r9
   1b96c:	mov	r0, r8
   1b970:	bl	11174 <wcrtomb@plt>
   1b974:	cmn	r0, #1
   1b978:	ldrbne	r2, [sp, #56]	; 0x38
   1b97c:	strbne	sl, [r4, r2]
   1b980:	ldr	r2, [r5, #20]
   1b984:	cmp	r7, r2
   1b988:	blt	1b8dc <__assert_fail@plt+0xa414>
   1b98c:	ldr	r5, [sp, #28]
   1b990:	b	1b850 <__assert_fail@plt+0xa388>
   1b994:	mov	r3, #0
   1b998:	add	r8, sp, #56	; 0x38
   1b99c:	add	r9, sp, #48	; 0x30
   1b9a0:	mov	r7, #1
   1b9a4:	strb	r3, [sp, #48]	; 0x30
   1b9a8:	mov	r0, #0
   1b9ac:	mov	r1, #0
   1b9b0:	mov	r3, r8
   1b9b4:	mov	r2, #1
   1b9b8:	strd	r0, [r8]
   1b9bc:	mov	r1, r9
   1b9c0:	bl	14760 <__assert_fail@plt+0x3298>
   1b9c4:	cmn	r0, #2
   1b9c8:	beq	1b9e8 <__assert_fail@plt+0xa520>
   1b9cc:	ldrb	r3, [sp, #48]	; 0x30
   1b9d0:	add	r3, r3, #1
   1b9d4:	uxtb	r3, r3
   1b9d8:	cmp	r3, #0
   1b9dc:	strb	r3, [sp, #48]	; 0x30
   1b9e0:	bne	1b9a8 <__assert_fail@plt+0xa4e0>
   1b9e4:	b	1b850 <__assert_fail@plt+0xa388>
   1b9e8:	ldrb	r2, [sp, #48]	; 0x30
   1b9ec:	add	r3, r2, #1
   1b9f0:	strb	r7, [r4, r2]
   1b9f4:	uxtb	r3, r3
   1b9f8:	cmp	r3, #0
   1b9fc:	strb	r3, [sp, #48]	; 0x30
   1ba00:	bne	1b9a8 <__assert_fail@plt+0xa4e0>
   1ba04:	b	1b850 <__assert_fail@plt+0xa388>
   1ba08:	mov	sl, #0
   1ba0c:	mov	fp, #32
   1ba10:	str	r3, [sp, #8]
   1ba14:	str	r6, [sp, #16]
   1ba18:	mov	r6, fp
   1ba1c:	mov	fp, sl
   1ba20:	str	r5, [sp, #28]
   1ba24:	mov	r5, sl
   1ba28:	mov	r9, #1
   1ba2c:	ldr	sl, [sp, #12]
   1ba30:	mov	r0, r1
   1ba34:	cmp	sl, #0
   1ba38:	lsl	r7, fp, #3
   1ba3c:	ldr	r3, [sp, #8]
   1ba40:	ldr	r0, [r0, r3]
   1ba44:	ldr	r8, [r0, fp]
   1ba48:	bne	1ba8c <__assert_fail@plt+0xa5c4>
   1ba4c:	mov	r0, sl
   1ba50:	sub	lr, r4, r5
   1ba54:	lsr	r3, r8, r0
   1ba58:	tst	r3, #1
   1ba5c:	strbne	r9, [lr, r0]
   1ba60:	add	r0, r0, #1
   1ba64:	cmp	r0, #32
   1ba68:	bne	1ba54 <__assert_fail@plt+0xa58c>
   1ba6c:	add	fp, fp, #4
   1ba70:	add	r6, r6, #32
   1ba74:	cmp	fp, #32
   1ba78:	sub	r5, r5, #32
   1ba7c:	beq	1bad4 <__assert_fail@plt+0xa60c>
   1ba80:	ldr	r3, [sp, #16]
   1ba84:	ldr	r0, [r3]
   1ba88:	b	1ba34 <__assert_fail@plt+0xa56c>
   1ba8c:	add	r3, r5, r7
   1ba90:	add	r2, r7, #128	; 0x80
   1ba94:	lsr	r3, r8, r3
   1ba98:	add	r1, r4, r7
   1ba9c:	tst	r3, #1
   1baa0:	beq	1bac4 <__assert_fail@plt+0xa5fc>
   1baa4:	cmp	r2, #384	; 0x180
   1baa8:	strb	r9, [r4, r7]
   1baac:	bcs	1bac0 <__assert_fail@plt+0xa5f8>
   1bab0:	bl	1133c <__ctype_tolower_loc@plt>
   1bab4:	ldr	r3, [r0]
   1bab8:	ldr	r1, [r3, r7, lsl #2]
   1babc:	add	r1, r4, r1
   1bac0:	strb	r9, [r1]
   1bac4:	add	r7, r7, #1
   1bac8:	cmp	r7, r6
   1bacc:	bne	1ba8c <__assert_fail@plt+0xa5c4>
   1bad0:	b	1ba6c <__assert_fail@plt+0xa5a4>
   1bad4:	ldr	r6, [sp, #16]
   1bad8:	ldr	r5, [sp, #28]
   1badc:	b	1b850 <__assert_fail@plt+0xa388>
   1bae0:	ldr	r1, [r6]
   1bae4:	add	r2, r8, #1
   1bae8:	ldrb	r0, [r1, r8, lsl #3]
   1baec:	strb	r0, [sp, #56]	; 0x38
   1baf0:	ldr	r0, [r6, #8]
   1baf4:	cmp	r2, r0
   1baf8:	bcs	1bc00 <__assert_fail@plt+0xa738>
   1bafc:	add	r3, r3, #8
   1bb00:	ldr	r0, [sp, #32]
   1bb04:	add	r3, r1, r3
   1bb08:	ldr	r1, [r3, #4]
   1bb0c:	and	r1, r1, r0
   1bb10:	ldr	r0, [sp, #36]	; 0x24
   1bb14:	cmp	r1, r0
   1bb18:	bne	1bc00 <__assert_fail@plt+0xa738>
   1bb1c:	mov	ip, r0
   1bb20:	add	r7, sp, #57	; 0x39
   1bb24:	ldr	r0, [sp, #32]
   1bb28:	b	1bb44 <__assert_fail@plt+0xa67c>
   1bb2c:	ldr	r3, [r6]
   1bb30:	add	r3, r3, r2, lsl #3
   1bb34:	ldr	r1, [r3, #4]
   1bb38:	and	r1, r1, r0
   1bb3c:	cmp	r1, ip
   1bb40:	bne	1bb5c <__assert_fail@plt+0xa694>
   1bb44:	ldrb	r3, [r3]
   1bb48:	add	r2, r2, #1
   1bb4c:	strb	r3, [r7], #1
   1bb50:	ldr	r3, [r6, #8]
   1bb54:	cmp	r3, r2
   1bb58:	bhi	1bb2c <__assert_fail@plt+0xa664>
   1bb5c:	add	r8, sp, #56	; 0x38
   1bb60:	sub	r7, r7, r8
   1bb64:	add	r9, sp, #48	; 0x30
   1bb68:	mov	sl, #0
   1bb6c:	mov	fp, #0
   1bb70:	mov	r2, r7
   1bb74:	mov	r3, r9
   1bb78:	mov	r1, r8
   1bb7c:	add	r0, sp, #44	; 0x2c
   1bb80:	strd	sl, [sp, #48]	; 0x30
   1bb84:	bl	14760 <__assert_fail@plt+0x3298>
   1bb88:	cmp	r0, r7
   1bb8c:	bne	1b850 <__assert_fail@plt+0xa388>
   1bb90:	ldr	r0, [sp, #44]	; 0x2c
   1bb94:	bl	11228 <towlower@plt>
   1bb98:	mov	r1, r0
   1bb9c:	mov	r2, r9
   1bba0:	mov	r0, r8
   1bba4:	bl	11174 <wcrtomb@plt>
   1bba8:	cmn	r0, #1
   1bbac:	beq	1b850 <__assert_fail@plt+0xa388>
   1bbb0:	ldrb	r3, [sp, #56]	; 0x38
   1bbb4:	mov	r2, #1
   1bbb8:	strb	r2, [r4, r3]
   1bbbc:	b	1b850 <__assert_fail@plt+0xa388>
   1bbc0:	mov	r0, r4
   1bbc4:	mov	r2, #256	; 0x100
   1bbc8:	mov	r1, #1
   1bbcc:	bl	113e4 <memset@plt>
   1bbd0:	cmp	r7, #2
   1bbd4:	bne	1b864 <__assert_fail@plt+0xa39c>
   1bbd8:	b	1bbec <__assert_fail@plt+0xa724>
   1bbdc:	mov	r0, r4
   1bbe0:	mov	r2, #256	; 0x100
   1bbe4:	mov	r1, #1
   1bbe8:	bl	113e4 <memset@plt>
   1bbec:	ldr	r2, [sp, #24]
   1bbf0:	ldrb	r3, [r2, #28]
   1bbf4:	orr	r3, r3, #1
   1bbf8:	strb	r3, [r2, #28]
   1bbfc:	b	1b864 <__assert_fail@plt+0xa39c>
   1bc00:	add	r8, sp, #56	; 0x38
   1bc04:	b	1bb64 <__assert_fail@plt+0xa69c>
   1bc08:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bc0c:	ldr	r3, [r1, #56]	; 0x38
   1bc10:	strd	r6, [sp, #8]
   1bc14:	mov	r6, r0
   1bc18:	ldr	r7, [r1, #40]	; 0x28
   1bc1c:	strd	r8, [sp, #16]
   1bc20:	str	sl, [sp, #24]
   1bc24:	str	lr, [sp, #28]
   1bc28:	sub	sp, sp, #8
   1bc2c:	cmp	r3, r7
   1bc30:	movle	r3, #2
   1bc34:	movle	r0, #0
   1bc38:	strble	r3, [r6, #4]
   1bc3c:	ble	1bf04 <__assert_fail@plt+0xaa3c>
   1bc40:	ldr	sl, [r1, #4]
   1bc44:	mov	r8, r2
   1bc48:	mov	r5, r1
   1bc4c:	ldrb	r3, [r6, #6]
   1bc50:	ldr	r2, [r1, #80]	; 0x50
   1bc54:	ldrb	r4, [sl, r7]
   1bc58:	bic	r3, r3, #96	; 0x60
   1bc5c:	cmp	r2, #1
   1bc60:	strb	r4, [r6]
   1bc64:	strb	r3, [r6, #6]
   1bc68:	ble	1bf20 <__assert_fail@plt+0xaa58>
   1bc6c:	ldr	r3, [r1, #28]
   1bc70:	cmp	r7, r3
   1bc74:	beq	1bc88 <__assert_fail@plt+0xa7c0>
   1bc78:	ldr	r3, [r1, #8]
   1bc7c:	ldr	r3, [r3, r7, lsl #2]
   1bc80:	cmn	r3, #1
   1bc84:	beq	1c168 <__assert_fail@plt+0xaca0>
   1bc88:	cmp	r4, #92	; 0x5c
   1bc8c:	beq	1bf5c <__assert_fail@plt+0xaa94>
   1bc90:	ldr	r3, [r5, #8]
   1bc94:	mov	r2, #1
   1bc98:	strb	r2, [r6, #4]
   1bc9c:	ldr	r9, [r3, r7, lsl #2]
   1bca0:	mov	r0, r9
   1bca4:	sub	r9, r9, #95	; 0x5f
   1bca8:	bl	113cc <iswalnum@plt>
   1bcac:	ldrb	r3, [r6, #6]
   1bcb0:	clz	r9, r9
   1bcb4:	cmp	r0, #0
   1bcb8:	lsr	r9, r9, #5
   1bcbc:	movne	r9, #1
   1bcc0:	bfi	r3, r9, #6, #1
   1bcc4:	strb	r3, [r6, #6]
   1bcc8:	sub	r4, r4, #10
   1bccc:	cmp	r4, #115	; 0x73
   1bcd0:	ldrls	pc, [pc, r4, lsl #2]
   1bcd4:	b	1c160 <__assert_fail@plt+0xac98>
   1bcd8:	andeq	ip, r1, r0, asr #5
   1bcdc:	andeq	ip, r1, r0, ror #2
   1bce0:	andeq	ip, r1, r0, ror #2
   1bce4:	andeq	ip, r1, r0, ror #2
   1bce8:	andeq	ip, r1, r0, ror #2
   1bcec:	andeq	ip, r1, r0, ror #2
   1bcf0:	andeq	ip, r1, r0, ror #2
   1bcf4:	andeq	ip, r1, r0, ror #2
   1bcf8:	andeq	ip, r1, r0, ror #2
   1bcfc:	andeq	ip, r1, r0, ror #2
   1bd00:	andeq	ip, r1, r0, ror #2
   1bd04:	andeq	ip, r1, r0, ror #2
   1bd08:	andeq	ip, r1, r0, ror #2
   1bd0c:	andeq	ip, r1, r0, ror #2
   1bd10:	andeq	ip, r1, r0, ror #2
   1bd14:	andeq	ip, r1, r0, ror #2
   1bd18:	andeq	ip, r1, r0, ror #2
   1bd1c:	andeq	ip, r1, r0, ror #2
   1bd20:	andeq	ip, r1, r0, ror #2
   1bd24:	andeq	ip, r1, r0, ror #2
   1bd28:	andeq	ip, r1, r0, ror #2
   1bd2c:	andeq	ip, r1, r0, ror #2
   1bd30:	andeq	ip, r1, r0, ror #2
   1bd34:	andeq	ip, r1, r0, ror #2
   1bd38:	andeq	ip, r1, r0, ror #2
   1bd3c:	andeq	ip, r1, r0, ror #2
   1bd40:	andeq	fp, r1, r8, lsr #29
   1bd44:	andeq	ip, r1, r0, ror #2
   1bd48:	andeq	ip, r1, r0, ror #2
   1bd4c:	andeq	ip, r1, r0, ror #2
   1bd50:	andeq	ip, r1, ip, lsr r2
   1bd54:	andeq	ip, r1, r4, asr r2
   1bd58:	andeq	ip, r1, ip, lsr #4
   1bd5c:	andeq	ip, r1, ip, ror #4
   1bd60:	andeq	ip, r1, r0, ror #2
   1bd64:	andeq	ip, r1, r0, ror #2
   1bd68:			; <UNDEFINED> instruction: 0x0001c1b4
   1bd6c:	andeq	ip, r1, r0, ror #2
   1bd70:	andeq	ip, r1, r0, ror #2
   1bd74:	andeq	ip, r1, r0, ror #2
   1bd78:	andeq	ip, r1, r0, ror #2
   1bd7c:	andeq	ip, r1, r0, ror #2
   1bd80:	andeq	ip, r1, r0, ror #2
   1bd84:	andeq	ip, r1, r0, ror #2
   1bd88:	andeq	ip, r1, r0, ror #2
   1bd8c:	andeq	ip, r1, r0, ror #2
   1bd90:	andeq	ip, r1, r0, ror #2
   1bd94:	andeq	ip, r1, r0, ror #2
   1bd98:	andeq	ip, r1, r0, ror #2
   1bd9c:	andeq	ip, r1, r0, ror #2
   1bda0:	andeq	ip, r1, r0, ror #2
   1bda4:	andeq	ip, r1, r0, ror #2
   1bda8:	andeq	ip, r1, r0, ror #2
   1bdac:	andeq	ip, r1, r4, asr #3
   1bdb0:	andeq	ip, r1, r0, ror #2
   1bdb4:	andeq	ip, r1, r0, ror #2
   1bdb8:	andeq	ip, r1, r0, ror #2
   1bdbc:	andeq	ip, r1, r0, ror #2
   1bdc0:	andeq	ip, r1, r0, ror #2
   1bdc4:	andeq	ip, r1, r0, ror #2
   1bdc8:	andeq	ip, r1, r0, ror #2
   1bdcc:	andeq	ip, r1, r0, ror #2
   1bdd0:	andeq	ip, r1, r0, ror #2
   1bdd4:	andeq	ip, r1, r0, ror #2
   1bdd8:	andeq	ip, r1, r0, ror #2
   1bddc:	andeq	ip, r1, r0, ror #2
   1bde0:	andeq	ip, r1, r0, ror #2
   1bde4:	andeq	ip, r1, r0, ror #2
   1bde8:	andeq	ip, r1, r0, ror #2
   1bdec:	andeq	ip, r1, r0, ror #2
   1bdf0:	andeq	ip, r1, r0, ror #2
   1bdf4:	andeq	ip, r1, r0, ror #2
   1bdf8:	andeq	ip, r1, r0, ror #2
   1bdfc:	andeq	ip, r1, r0, ror #2
   1be00:	andeq	ip, r1, r0, ror #2
   1be04:	andeq	ip, r1, r0, ror #2
   1be08:	andeq	ip, r1, r0, ror #2
   1be0c:	andeq	ip, r1, r0, ror #2
   1be10:	andeq	ip, r1, r0, ror #2
   1be14:	andeq	ip, r1, r0, ror #2
   1be18:	andeq	ip, r1, r0, ror #2
   1be1c:	andeq	ip, r1, r0, ror #3
   1be20:	andeq	ip, r1, r0, ror #2
   1be24:	andeq	ip, r1, r0, ror #2
   1be28:	strdeq	ip, [r1], -r0
   1be2c:	andeq	ip, r1, r0, ror #2
   1be30:	andeq	ip, r1, r0, ror #2
   1be34:	andeq	ip, r1, r0, ror #2
   1be38:	andeq	ip, r1, r0, ror #2
   1be3c:	andeq	ip, r1, r0, ror #2
   1be40:	andeq	ip, r1, r0, ror #2
   1be44:	andeq	ip, r1, r0, ror #2
   1be48:	andeq	ip, r1, r0, ror #2
   1be4c:	andeq	ip, r1, r0, ror #2
   1be50:	andeq	ip, r1, r0, ror #2
   1be54:	andeq	ip, r1, r0, ror #2
   1be58:	andeq	ip, r1, r0, ror #2
   1be5c:	andeq	ip, r1, r0, ror #2
   1be60:	andeq	ip, r1, r0, ror #2
   1be64:	andeq	ip, r1, r0, ror #2
   1be68:	andeq	ip, r1, r0, ror #2
   1be6c:	andeq	ip, r1, r0, ror #2
   1be70:	andeq	ip, r1, r0, ror #2
   1be74:	andeq	ip, r1, r0, ror #2
   1be78:	andeq	ip, r1, r0, ror #2
   1be7c:	andeq	ip, r1, r0, ror #2
   1be80:	andeq	ip, r1, r0, ror #2
   1be84:	andeq	ip, r1, r0, ror #2
   1be88:	andeq	ip, r1, r0, ror #2
   1be8c:	andeq	ip, r1, r0, ror #2
   1be90:	andeq	ip, r1, r0, ror #2
   1be94:	andeq	ip, r1, r0, ror #2
   1be98:	andeq	ip, r1, r0, ror #2
   1be9c:	andeq	ip, r1, r8, lsl #5
   1bea0:	andeq	ip, r1, r4, lsr #5
   1bea4:	andeq	ip, r1, ip, asr #5
   1bea8:	tst	r8, #8
   1beac:	bne	1bef0 <__assert_fail@plt+0xaa28>
   1beb0:	ldr	r3, [r5, #48]	; 0x30
   1beb4:	add	r7, r7, #1
   1beb8:	cmp	r7, r3
   1bebc:	beq	1bef0 <__assert_fail@plt+0xaa28>
   1bec0:	mov	r2, r8
   1bec4:	mov	r1, r5
   1bec8:	str	r7, [r5, #40]	; 0x28
   1becc:	mov	r0, sp
   1bed0:	bl	1bc08 <__assert_fail@plt+0xa740>
   1bed4:	ldrb	r2, [sp, #4]
   1bed8:	ldr	r3, [r5, #40]	; 0x28
   1bedc:	sub	r2, r2, #9
   1bee0:	cmp	r2, #1
   1bee4:	sub	r3, r3, #1
   1bee8:	str	r3, [r5, #40]	; 0x28
   1beec:	bhi	1c160 <__assert_fail@plt+0xac98>
   1bef0:	mov	r3, #12
   1bef4:	mov	r2, #32
   1bef8:	mov	r0, #1
   1befc:	str	r2, [r6]
   1bf00:	strb	r3, [r6, #4]
   1bf04:	add	sp, sp, #8
   1bf08:	ldrd	r4, [sp]
   1bf0c:	ldrd	r6, [sp, #8]
   1bf10:	ldrd	r8, [sp, #16]
   1bf14:	ldr	sl, [sp, #24]
   1bf18:	add	sp, sp, #28
   1bf1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf20:	cmp	r4, #92	; 0x5c
   1bf24:	beq	1bf5c <__assert_fail@plt+0xaa94>
   1bf28:	mov	r3, #1
   1bf2c:	strb	r3, [r6, #4]
   1bf30:	bl	11378 <__ctype_b_loc@plt>
   1bf34:	ldr	r1, [r0]
   1bf38:	lsl	r3, r4, #1
   1bf3c:	ldrb	r2, [r6, #6]
   1bf40:	ldrh	r3, [r1, r3]
   1bf44:	ubfx	r3, r3, #3, #1
   1bf48:	cmp	r4, #95	; 0x5f
   1bf4c:	orreq	r3, r3, #1
   1bf50:	bfi	r2, r3, #6, #1
   1bf54:	strb	r2, [r6, #6]
   1bf58:	b	1bcc8 <__assert_fail@plt+0xa800>
   1bf5c:	ldr	r1, [r5, #48]	; 0x30
   1bf60:	add	r3, r7, #1
   1bf64:	cmp	r3, r1
   1bf68:	blt	1bf7c <__assert_fail@plt+0xaab4>
   1bf6c:	mov	r3, #36	; 0x24
   1bf70:	mov	r0, #1
   1bf74:	strb	r3, [r6, #4]
   1bf78:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1bf7c:	ldrb	r1, [r5, #75]	; 0x4b
   1bf80:	cmp	r1, #0
   1bf84:	bne	1c4ec <__assert_fail@plt+0xb024>
   1bf88:	ldrb	r7, [sl, r3]
   1bf8c:	mov	r1, #1
   1bf90:	strb	r7, [r6]
   1bf94:	cmp	r2, r1
   1bf98:	strb	r1, [r6, #4]
   1bf9c:	ble	1c188 <__assert_fail@plt+0xacc0>
   1bfa0:	ldr	r1, [r5, #8]
   1bfa4:	add	r1, r1, r3, lsl #2
   1bfa8:	ldr	r4, [r1]
   1bfac:	mov	r0, r4
   1bfb0:	sub	r4, r4, #95	; 0x5f
   1bfb4:	bl	113cc <iswalnum@plt>
   1bfb8:	ldrb	r3, [r6, #6]
   1bfbc:	clz	r4, r4
   1bfc0:	cmp	r0, #0
   1bfc4:	lsr	r4, r4, #5
   1bfc8:	movne	r4, #1
   1bfcc:	bfi	r3, r4, #6, #1
   1bfd0:	strb	r3, [r6, #6]
   1bfd4:	sub	r3, r7, #39	; 0x27
   1bfd8:	cmp	r3, #86	; 0x56
   1bfdc:	ldrls	pc, [pc, r3, lsl #2]
   1bfe0:	b	1c300 <__assert_fail@plt+0xae38>
   1bfe4:			; <UNDEFINED> instruction: 0x0001c4b4
   1bfe8:	ldrdeq	ip, [r1], -r4
   1bfec:	muleq	r1, ip, r4
   1bff0:	andeq	ip, r1, r0, lsl #6
   1bff4:	andeq	ip, r1, ip, ror r4
   1bff8:	andeq	ip, r1, r0, lsl #6
   1bffc:	andeq	ip, r1, r0, lsl #6
   1c000:	andeq	ip, r1, r0, lsl #6
   1c004:	andeq	ip, r1, r0, lsl #6
   1c008:	andeq	ip, r1, r0, lsl #6
   1c00c:	andeq	ip, r1, ip, asr r4
   1c010:	andeq	ip, r1, ip, asr r4
   1c014:	andeq	ip, r1, ip, asr r4
   1c018:	andeq	ip, r1, ip, asr r4
   1c01c:	andeq	ip, r1, ip, asr r4
   1c020:	andeq	ip, r1, ip, asr r4
   1c024:	andeq	ip, r1, ip, asr r4
   1c028:	andeq	ip, r1, ip, asr r4
   1c02c:	andeq	ip, r1, ip, asr r4
   1c030:	andeq	ip, r1, r0, lsl #6
   1c034:	andeq	ip, r1, r0, lsl #6
   1c038:	andeq	ip, r1, ip, lsr r4
   1c03c:	andeq	ip, r1, r0, lsl #6
   1c040:	andeq	ip, r1, ip, lsl r4
   1c044:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c048:	andeq	ip, r1, r0, lsl #6
   1c04c:	andeq	ip, r1, r0, lsl #6
   1c050:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c054:	andeq	ip, r1, r0, lsl #6
   1c058:	andeq	ip, r1, r0, lsl #6
   1c05c:	andeq	ip, r1, r0, lsl #6
   1c060:	andeq	ip, r1, r0, lsl #6
   1c064:	andeq	ip, r1, r0, lsl #6
   1c068:	andeq	ip, r1, r0, lsl #6
   1c06c:	andeq	ip, r1, r0, lsl #6
   1c070:	andeq	ip, r1, r0, lsl #6
   1c074:	andeq	ip, r1, r0, lsl #6
   1c078:	andeq	ip, r1, r0, lsl #6
   1c07c:	andeq	ip, r1, r0, lsl #6
   1c080:	andeq	ip, r1, r0, lsl #6
   1c084:	andeq	ip, r1, r0, lsl #6
   1c088:	andeq	ip, r1, r0, lsl #6
   1c08c:	andeq	ip, r1, r0, lsl #6
   1c090:	andeq	ip, r1, r0, lsl #6
   1c094:	andeq	ip, r1, r4, asr #7
   1c098:	andeq	ip, r1, r0, lsl #6
   1c09c:	andeq	ip, r1, r0, lsl #6
   1c0a0:	andeq	ip, r1, r0, lsl #6
   1c0a4:	andeq	ip, r1, ip, lsr #7
   1c0a8:	andeq	ip, r1, r0, lsl #6
   1c0ac:	andeq	ip, r1, r0, lsl #6
   1c0b0:	andeq	ip, r1, r0, lsl #6
   1c0b4:	andeq	ip, r1, r0, lsl #6
   1c0b8:	andeq	ip, r1, r0, lsl #6
   1c0bc:	andeq	ip, r1, r0, lsl #6
   1c0c0:	andeq	ip, r1, r0, lsl #6
   1c0c4:	andeq	ip, r1, r0, lsl #6
   1c0c8:	andeq	ip, r1, ip, lsl #7
   1c0cc:	andeq	ip, r1, r0, lsl #6
   1c0d0:	andeq	ip, r1, ip, ror #6
   1c0d4:	andeq	ip, r1, r0, lsl #6
   1c0d8:	andeq	ip, r1, r0, lsl #6
   1c0dc:	andeq	ip, r1, r0, lsl #6
   1c0e0:	andeq	ip, r1, r0, lsl #6
   1c0e4:	andeq	ip, r1, r0, lsl #6
   1c0e8:	andeq	ip, r1, r0, lsl #6
   1c0ec:	andeq	ip, r1, r0, lsl #6
   1c0f0:	andeq	ip, r1, r0, lsl #6
   1c0f4:	andeq	ip, r1, r0, lsl #6
   1c0f8:	andeq	ip, r1, r0, lsl #6
   1c0fc:	andeq	ip, r1, r0, lsl #6
   1c100:	andeq	ip, r1, r0, lsl #6
   1c104:	andeq	ip, r1, r0, lsl #6
   1c108:	andeq	ip, r1, r0, lsl #6
   1c10c:	andeq	ip, r1, r0, lsl #6
   1c110:	andeq	ip, r1, r0, lsl #6
   1c114:	andeq	ip, r1, r4, asr r3
   1c118:	andeq	ip, r1, r0, lsl #6
   1c11c:	andeq	ip, r1, r0, lsl #6
   1c120:	andeq	ip, r1, r0, lsl #6
   1c124:	andeq	ip, r1, ip, lsr r3
   1c128:	andeq	ip, r1, r0, lsl #6
   1c12c:	andeq	ip, r1, r0, lsl #6
   1c130:	andeq	ip, r1, r0, lsl #6
   1c134:	andeq	ip, r1, r0, lsr #6
   1c138:	andeq	ip, r1, r8, lsl #6
   1c13c:	andeq	ip, r1, r8, ror #5
   1c140:	add	r7, sl, r7
   1c144:	eor	r3, r8, #2048	; 0x800
   1c148:	ldrb	r2, [r7, #-1]
   1c14c:	ubfx	r3, r3, #11, #1
   1c150:	cmp	r2, #10
   1c154:	orrne	r3, r3, #1
   1c158:	cmp	r3, #0
   1c15c:	beq	1c214 <__assert_fail@plt+0xad4c>
   1c160:	mov	r0, #1
   1c164:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c168:	ldr	r3, [r6, #4]
   1c16c:	mov	r0, #1
   1c170:	bic	r3, r3, #2097152	; 0x200000
   1c174:	bic	r3, r3, #255	; 0xff
   1c178:	orr	r3, r3, #2097152	; 0x200000
   1c17c:	orr	r3, r3, r0
   1c180:	str	r3, [r6, #4]
   1c184:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c188:	bl	11378 <__ctype_b_loc@plt>
   1c18c:	ldr	r1, [r0]
   1c190:	lsl	r3, r7, #1
   1c194:	ldrb	r2, [r6, #6]
   1c198:	ldrh	r3, [r1, r3]
   1c19c:	ubfx	r3, r3, #3, #1
   1c1a0:	cmp	r7, #95	; 0x5f
   1c1a4:	orreq	r3, r3, #1
   1c1a8:	bfi	r2, r3, #6, #1
   1c1ac:	strb	r2, [r6, #6]
   1c1b0:	b	1bfd4 <__assert_fail@plt+0xab0c>
   1c1b4:	mov	r3, #5
   1c1b8:	mov	r0, #1
   1c1bc:	strb	r3, [r6, #4]
   1c1c0:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c1c4:	movw	r3, #1026	; 0x402
   1c1c8:	tst	r8, r3
   1c1cc:	bne	1c160 <__assert_fail@plt+0xac98>
   1c1d0:	mov	r3, #19
   1c1d4:	mov	r0, #1
   1c1d8:	strb	r3, [r6, #4]
   1c1dc:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c1e0:	mov	r3, #20
   1c1e4:	mov	r0, #1
   1c1e8:	strb	r3, [r6, #4]
   1c1ec:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c1f0:	mov	r3, #8
   1c1f4:	movt	r3, #128	; 0x80
   1c1f8:	tst	r8, r3
   1c1fc:	moveq	r3, #1
   1c200:	movne	r3, #0
   1c204:	cmp	r7, #0
   1c208:	moveq	r3, #0
   1c20c:	cmp	r3, #0
   1c210:	bne	1c140 <__assert_fail@plt+0xac78>
   1c214:	mov	r3, #12
   1c218:	mov	r2, #16
   1c21c:	mov	r0, #1
   1c220:	str	r2, [r6]
   1c224:	strb	r3, [r6, #4]
   1c228:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c22c:	mov	r3, #11
   1c230:	mov	r0, #1
   1c234:	strb	r3, [r6, #4]
   1c238:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c23c:	tst	r8, #8192	; 0x2000
   1c240:	beq	1c160 <__assert_fail@plt+0xac98>
   1c244:	mov	r3, #8
   1c248:	mov	r0, #1
   1c24c:	strb	r3, [r6, #4]
   1c250:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c254:	tst	r8, #8192	; 0x2000
   1c258:	beq	1c160 <__assert_fail@plt+0xac98>
   1c25c:	mov	r3, #9
   1c260:	mov	r0, #1
   1c264:	strb	r3, [r6, #4]
   1c268:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c26c:	movw	r3, #1026	; 0x402
   1c270:	tst	r8, r3
   1c274:	bne	1c160 <__assert_fail@plt+0xac98>
   1c278:	mov	r3, #18
   1c27c:	mov	r0, #1
   1c280:	strb	r3, [r6, #4]
   1c284:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c288:	and	r2, r8, #4608	; 0x1200
   1c28c:	cmp	r2, #4608	; 0x1200
   1c290:	moveq	r3, #23
   1c294:	moveq	r0, #1
   1c298:	strbeq	r3, [r6, #4]
   1c29c:	bne	1c160 <__assert_fail@plt+0xac98>
   1c2a0:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c2a4:	and	r2, r8, #33792	; 0x8400
   1c2a8:	cmp	r2, #32768	; 0x8000
   1c2ac:	bne	1c160 <__assert_fail@plt+0xac98>
   1c2b0:	mov	r3, #10
   1c2b4:	mov	r0, #1
   1c2b8:	strb	r3, [r6, #4]
   1c2bc:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c2c0:	tst	r8, #2048	; 0x800
   1c2c4:	beq	1c160 <__assert_fail@plt+0xac98>
   1c2c8:	b	1c2b0 <__assert_fail@plt+0xade8>
   1c2cc:	and	r2, r8, #4608	; 0x1200
   1c2d0:	cmp	r2, #4608	; 0x1200
   1c2d4:	moveq	r3, #24
   1c2d8:	moveq	r0, #1
   1c2dc:	strbeq	r3, [r6, #4]
   1c2e0:	bne	1c160 <__assert_fail@plt+0xac98>
   1c2e4:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c2e8:	and	r2, r8, #4608	; 0x1200
   1c2ec:	cmp	r2, #512	; 0x200
   1c2f0:	moveq	r3, #24
   1c2f4:	moveq	r0, #2
   1c2f8:	strbeq	r3, [r6, #4]
   1c2fc:	beq	1bf04 <__assert_fail@plt+0xaa3c>
   1c300:	mov	r0, #2
   1c304:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c308:	tst	r8, #33792	; 0x8400
   1c30c:	bne	1c300 <__assert_fail@plt+0xae38>
   1c310:	mov	r3, #10
   1c314:	mov	r0, #2
   1c318:	strb	r3, [r6, #4]
   1c31c:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c320:	and	r2, r8, #4608	; 0x1200
   1c324:	cmp	r2, #512	; 0x200
   1c328:	moveq	r3, #23
   1c32c:	moveq	r0, #2
   1c330:	strbeq	r3, [r6, #4]
   1c334:	bne	1c300 <__assert_fail@plt+0xae38>
   1c338:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c33c:	tst	r8, #524288	; 0x80000
   1c340:	bne	1c300 <__assert_fail@plt+0xae38>
   1c344:	mov	r3, #32
   1c348:	mov	r0, #2
   1c34c:	strb	r3, [r6, #4]
   1c350:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c354:	tst	r8, #524288	; 0x80000
   1c358:	bne	1c300 <__assert_fail@plt+0xae38>
   1c35c:	mov	r3, #34	; 0x22
   1c360:	mov	r0, #2
   1c364:	strb	r3, [r6, #4]
   1c368:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c36c:	tst	r8, #524288	; 0x80000
   1c370:	bne	1c300 <__assert_fail@plt+0xae38>
   1c374:	mov	r3, #12
   1c378:	mov	r2, #256	; 0x100
   1c37c:	mov	r0, #2
   1c380:	str	r2, [r6]
   1c384:	strb	r3, [r6, #4]
   1c388:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c38c:	tst	r8, #524288	; 0x80000
   1c390:	bne	1c300 <__assert_fail@plt+0xae38>
   1c394:	mov	r3, #12
   1c398:	mov	r2, #64	; 0x40
   1c39c:	mov	r0, #2
   1c3a0:	str	r2, [r6]
   1c3a4:	strb	r3, [r6, #4]
   1c3a8:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c3ac:	tst	r8, #524288	; 0x80000
   1c3b0:	bne	1c300 <__assert_fail@plt+0xae38>
   1c3b4:	mov	r3, #33	; 0x21
   1c3b8:	mov	r0, #2
   1c3bc:	strb	r3, [r6, #4]
   1c3c0:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c3c4:	tst	r8, #524288	; 0x80000
   1c3c8:	bne	1c300 <__assert_fail@plt+0xae38>
   1c3cc:	mov	r3, #35	; 0x23
   1c3d0:	mov	r0, #2
   1c3d4:	strb	r3, [r6, #4]
   1c3d8:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c3dc:	tst	r8, #524288	; 0x80000
   1c3e0:	bne	1c300 <__assert_fail@plt+0xae38>
   1c3e4:	mov	r3, #12
   1c3e8:	mov	r2, #512	; 0x200
   1c3ec:	mov	r0, #2
   1c3f0:	str	r2, [r6]
   1c3f4:	strb	r3, [r6, #4]
   1c3f8:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c3fc:	movw	r2, #1026	; 0x402
   1c400:	and	r2, r2, r8
   1c404:	cmp	r2, #2
   1c408:	moveq	r3, #19
   1c40c:	moveq	r0, r2
   1c410:	strbeq	r3, [r6, #4]
   1c414:	bne	1c300 <__assert_fail@plt+0xae38>
   1c418:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c41c:	tst	r8, #524288	; 0x80000
   1c420:	bne	1c300 <__assert_fail@plt+0xae38>
   1c424:	mov	r3, #12
   1c428:	mov	r2, #9
   1c42c:	mov	r0, #2
   1c430:	str	r2, [r6]
   1c434:	strb	r3, [r6, #4]
   1c438:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c43c:	tst	r8, #524288	; 0x80000
   1c440:	bne	1c300 <__assert_fail@plt+0xae38>
   1c444:	mov	r3, #12
   1c448:	mov	r2, #6
   1c44c:	mov	r0, #2
   1c450:	str	r2, [r6]
   1c454:	strb	r3, [r6, #4]
   1c458:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c45c:	tst	r8, #16384	; 0x4000
   1c460:	bne	1c300 <__assert_fail@plt+0xae38>
   1c464:	sub	r7, r7, #49	; 0x31
   1c468:	mov	r3, #4
   1c46c:	mov	r0, #2
   1c470:	str	r7, [r6]
   1c474:	strb	r3, [r6, #4]
   1c478:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c47c:	movw	r2, #1026	; 0x402
   1c480:	and	r2, r2, r8
   1c484:	cmp	r2, #2
   1c488:	moveq	r3, #18
   1c48c:	moveq	r0, r2
   1c490:	strbeq	r3, [r6, #4]
   1c494:	bne	1c300 <__assert_fail@plt+0xae38>
   1c498:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c49c:	tst	r8, #8192	; 0x2000
   1c4a0:	bne	1c300 <__assert_fail@plt+0xae38>
   1c4a4:	mov	r3, #9
   1c4a8:	mov	r0, #2
   1c4ac:	strb	r3, [r6, #4]
   1c4b0:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c4b4:	tst	r8, #524288	; 0x80000
   1c4b8:	bne	1c300 <__assert_fail@plt+0xae38>
   1c4bc:	mov	r3, #12
   1c4c0:	mov	r2, #128	; 0x80
   1c4c4:	mov	r0, #2
   1c4c8:	str	r2, [r6]
   1c4cc:	strb	r3, [r6, #4]
   1c4d0:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c4d4:	tst	r8, #8192	; 0x2000
   1c4d8:	bne	1c300 <__assert_fail@plt+0xae38>
   1c4dc:	mov	r3, #8
   1c4e0:	mov	r0, #2
   1c4e4:	strb	r3, [r6, #4]
   1c4e8:	b	1bf04 <__assert_fail@plt+0xaa3c>
   1c4ec:	cmp	r2, #1
   1c4f0:	ble	1c524 <__assert_fail@plt+0xb05c>
   1c4f4:	ldr	r1, [r5, #8]
   1c4f8:	ldr	r0, [r1, r3, lsl #2]
   1c4fc:	add	r1, r1, r3, lsl #2
   1c500:	cmn	r0, #1
   1c504:	beq	1c560 <__assert_fail@plt+0xb098>
   1c508:	ldr	r0, [r5, #28]
   1c50c:	add	r7, r7, #2
   1c510:	cmp	r0, r7
   1c514:	beq	1c524 <__assert_fail@plt+0xb05c>
   1c518:	ldr	r0, [r1, #4]
   1c51c:	cmn	r0, #1
   1c520:	beq	1c560 <__assert_fail@plt+0xb098>
   1c524:	ldrb	r0, [r5, #76]	; 0x4c
   1c528:	ldr	r1, [r5]
   1c52c:	ldr	ip, [r5, #24]
   1c530:	cmp	r0, #0
   1c534:	beq	1c554 <__assert_fail@plt+0xb08c>
   1c538:	ldr	r0, [r5, #12]
   1c53c:	add	r1, r1, ip
   1c540:	ldr	r0, [r0, r3, lsl #2]
   1c544:	ldrb	r7, [r1, r0]
   1c548:	tst	r7, #128	; 0x80
   1c54c:	beq	1bf8c <__assert_fail@plt+0xaac4>
   1c550:	b	1bf88 <__assert_fail@plt+0xaac0>
   1c554:	add	r1, r1, r3
   1c558:	ldrb	r7, [r1, ip]
   1c55c:	b	1bf8c <__assert_fail@plt+0xaac4>
   1c560:	ldrb	r7, [sl, r3]
   1c564:	mov	r3, #1
   1c568:	strb	r7, [r6]
   1c56c:	strb	r3, [r6, #4]
   1c570:	b	1bfa8 <__assert_fail@plt+0xaae0>
   1c574:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c578:	ldr	ip, [r0, #84]	; 0x54
   1c57c:	strd	r6, [sp, #8]
   1c580:	strd	r8, [sp, #16]
   1c584:	ldr	r8, [r0, #108]	; 0x6c
   1c588:	strd	sl, [sp, #24]
   1c58c:	str	lr, [sp, #32]
   1c590:	sub	sp, sp, #36	; 0x24
   1c594:	ldr	r7, [sp, #72]	; 0x48
   1c598:	str	ip, [sp, #12]
   1c59c:	cmp	r8, #0
   1c5a0:	ldr	r6, [sp, #80]	; 0x50
   1c5a4:	ble	1c88c <__assert_fail@plt+0xb3c4>
   1c5a8:	ldr	sl, [r0, #116]	; 0x74
   1c5ac:	mov	lr, r8
   1c5b0:	mov	r4, #0
   1c5b4:	add	ip, lr, r4
   1c5b8:	asr	ip, ip, #1
   1c5bc:	add	r5, ip, ip, lsl #1
   1c5c0:	add	r5, sl, r5, lsl #3
   1c5c4:	ldr	r5, [r5, #4]
   1c5c8:	cmp	r7, r5
   1c5cc:	bgt	1c7ec <__assert_fail@plt+0xb324>
   1c5d0:	cmp	ip, r4
   1c5d4:	ble	1c620 <__assert_fail@plt+0xb158>
   1c5d8:	add	lr, ip, r4
   1c5dc:	asr	lr, lr, #1
   1c5e0:	add	r5, lr, lr, lsl #1
   1c5e4:	add	r5, sl, r5, lsl #3
   1c5e8:	ldr	r5, [r5, #4]
   1c5ec:	cmp	r7, r5
   1c5f0:	ble	1c610 <__assert_fail@plt+0xb148>
   1c5f4:	b	1c7e0 <__assert_fail@plt+0xb318>
   1c5f8:	add	r5, ip, ip, lsl #1
   1c5fc:	add	r5, sl, r5, lsl #3
   1c600:	ldr	r5, [r5, #4]
   1c604:	cmp	r5, r7
   1c608:	blt	1c7ec <__assert_fail@plt+0xb324>
   1c60c:	mov	lr, ip
   1c610:	add	ip, r4, lr
   1c614:	cmp	r4, lr
   1c618:	asr	ip, ip, #1
   1c61c:	blt	1c5f8 <__assert_fail@plt+0xb130>
   1c620:	cmp	r8, r4
   1c624:	mvnle	r4, #0
   1c628:	ble	1c640 <__assert_fail@plt+0xb178>
   1c62c:	add	ip, r4, r4, lsl #1
   1c630:	add	ip, sl, ip, lsl #3
   1c634:	ldr	ip, [ip, #4]
   1c638:	cmp	r7, ip
   1c63c:	mvnne	r4, #0
   1c640:	mov	lr, r8
   1c644:	mov	r5, #0
   1c648:	add	fp, lr, r5
   1c64c:	add	fp, fp, fp, lsr #31
   1c650:	asr	fp, fp, #1
   1c654:	add	ip, fp, fp, lsl #1
   1c658:	add	ip, sl, ip, lsl #3
   1c65c:	ldr	ip, [ip, #4]
   1c660:	cmp	r6, ip
   1c664:	bgt	1c7d0 <__assert_fail@plt+0xb308>
   1c668:	cmp	fp, r5
   1c66c:	ble	1c6c8 <__assert_fail@plt+0xb200>
   1c670:	add	lr, fp, r5
   1c674:	add	lr, lr, lr, lsr #31
   1c678:	asr	lr, lr, #1
   1c67c:	add	ip, lr, lr, lsl #1
   1c680:	mov	r9, lr
   1c684:	add	ip, sl, ip, lsl #3
   1c688:	ldr	ip, [ip, #4]
   1c68c:	cmp	r6, ip
   1c690:	ble	1c6b8 <__assert_fail@plt+0xb1f0>
   1c694:	b	1c7c8 <__assert_fail@plt+0xb300>
   1c698:	asr	ip, ip, #1
   1c69c:	add	r9, ip, ip, lsl #1
   1c6a0:	mov	fp, ip
   1c6a4:	add	r9, sl, r9, lsl #3
   1c6a8:	ldr	r9, [r9, #4]
   1c6ac:	cmp	r9, r6
   1c6b0:	blt	1c7d0 <__assert_fail@plt+0xb308>
   1c6b4:	mov	lr, ip
   1c6b8:	add	ip, r5, lr
   1c6bc:	cmp	r5, lr
   1c6c0:	add	ip, ip, ip, lsr #31
   1c6c4:	blt	1c698 <__assert_fail@plt+0xb1d0>
   1c6c8:	cmp	r8, r5
   1c6cc:	ble	1c8bc <__assert_fail@plt+0xb3f4>
   1c6d0:	add	ip, r5, r5, lsl #1
   1c6d4:	add	sl, sl, ip, lsl #3
   1c6d8:	ldr	ip, [sl, #4]
   1c6dc:	cmp	r6, ip
   1c6e0:	mvnne	r5, #0
   1c6e4:	ldr	ip, [r1]
   1c6e8:	cmp	ip, #0
   1c6ec:	ble	1c834 <__assert_fail@plt+0xb36c>
   1c6f0:	mov	sl, r2
   1c6f4:	mov	r8, r0
   1c6f8:	str	r1, [sp, #16]
   1c6fc:	mov	fp, #0
   1c700:	str	r3, [sp, #20]
   1c704:	str	r5, [sp, #24]
   1c708:	str	r4, [sp, #28]
   1c70c:	ldr	r3, [sl]
   1c710:	lsl	r4, fp, #2
   1c714:	ldr	r2, [sp, #12]
   1c718:	ldr	r0, [r8, #116]	; 0x74
   1c71c:	ldr	r3, [r3, fp, lsl #2]
   1c720:	ldr	r1, [r2]
   1c724:	add	r3, r3, r3, lsl #1
   1c728:	add	r2, r0, r3, lsl #3
   1c72c:	ldr	r0, [r0, r3, lsl #3]
   1c730:	ldr	r3, [r2, #8]
   1c734:	ldr	r9, [r1, r0, lsl #3]
   1c738:	cmp	r7, r3
   1c73c:	blt	1c898 <__assert_fail@plt+0xb3d0>
   1c740:	ldr	r2, [r2, #12]
   1c744:	cmp	r7, r2
   1c748:	bgt	1c884 <__assert_fail@plt+0xb3bc>
   1c74c:	sub	r1, r7, r3
   1c750:	cmp	r7, r2
   1c754:	clz	r1, r1
   1c758:	lsr	r1, r1, #5
   1c75c:	beq	1c83c <__assert_fail@plt+0xb374>
   1c760:	cmp	r7, r3
   1c764:	movne	r5, #0
   1c768:	beq	1c840 <__assert_fail@plt+0xb378>
   1c76c:	cmp	r6, r3
   1c770:	blt	1c7a8 <__assert_fail@plt+0xb2e0>
   1c774:	cmp	r6, r2
   1c778:	movgt	r0, #1
   1c77c:	bgt	1c7a0 <__assert_fail@plt+0xb2d8>
   1c780:	sub	r1, r6, r3
   1c784:	cmp	r6, r2
   1c788:	clz	r1, r1
   1c78c:	lsr	r1, r1, #5
   1c790:	beq	1c7fc <__assert_fail@plt+0xb334>
   1c794:	cmp	r6, r3
   1c798:	movne	r0, #0
   1c79c:	beq	1c800 <__assert_fail@plt+0xb338>
   1c7a0:	cmp	r0, r5
   1c7a4:	beq	1c820 <__assert_fail@plt+0xb358>
   1c7a8:	mov	r0, #1
   1c7ac:	add	sp, sp, #36	; 0x24
   1c7b0:	ldrd	r4, [sp]
   1c7b4:	ldrd	r6, [sp, #8]
   1c7b8:	ldrd	r8, [sp, #16]
   1c7bc:	ldrd	sl, [sp, #24]
   1c7c0:	add	sp, sp, #32
   1c7c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7c8:	mov	lr, fp
   1c7cc:	mov	fp, r9
   1c7d0:	add	r5, fp, #1
   1c7d4:	cmp	r5, lr
   1c7d8:	blt	1c648 <__assert_fail@plt+0xb180>
   1c7dc:	b	1c6c8 <__assert_fail@plt+0xb200>
   1c7e0:	mov	r4, lr
   1c7e4:	mov	lr, ip
   1c7e8:	mov	ip, r4
   1c7ec:	add	r4, ip, #1
   1c7f0:	cmp	r4, lr
   1c7f4:	blt	1c5b4 <__assert_fail@plt+0xb0ec>
   1c7f8:	b	1c620 <__assert_fail@plt+0xb158>
   1c7fc:	orr	r1, r1, #2
   1c800:	ldr	r3, [sp, #24]
   1c804:	mov	r2, r9
   1c808:	mov	r0, r8
   1c80c:	str	r3, [sp]
   1c810:	ldr	r3, [sp, #76]	; 0x4c
   1c814:	bl	188fc <__assert_fail@plt+0x7434>
   1c818:	cmp	r0, r5
   1c81c:	bne	1c7a8 <__assert_fail@plt+0xb2e0>
   1c820:	ldr	r3, [sp, #16]
   1c824:	ldr	ip, [r3]
   1c828:	add	fp, fp, #1
   1c82c:	cmp	fp, ip
   1c830:	blt	1c70c <__assert_fail@plt+0xb244>
   1c834:	mov	r0, #0
   1c838:	b	1c7ac <__assert_fail@plt+0xb2e4>
   1c83c:	orr	r1, r1, #2
   1c840:	mov	r0, r8
   1c844:	ldr	r3, [sp, #20]
   1c848:	ldr	r2, [sp, #28]
   1c84c:	str	r2, [sp]
   1c850:	mov	r2, r9
   1c854:	bl	188fc <__assert_fail@plt+0x7434>
   1c858:	ldr	r3, [sl]
   1c85c:	mov	r5, r0
   1c860:	ldr	r2, [r8, #116]	; 0x74
   1c864:	ldr	r3, [r3, r4]
   1c868:	add	r3, r3, r3, lsl #1
   1c86c:	add	r2, r2, r3, lsl #3
   1c870:	ldr	r3, [r2, #8]
   1c874:	cmp	r6, r3
   1c878:	blt	1c8b4 <__assert_fail@plt+0xb3ec>
   1c87c:	ldr	r2, [r2, #12]
   1c880:	b	1c774 <__assert_fail@plt+0xb2ac>
   1c884:	mov	r5, #1
   1c888:	b	1c76c <__assert_fail@plt+0xb2a4>
   1c88c:	mvn	r4, #0
   1c890:	mov	r5, r4
   1c894:	b	1c6e4 <__assert_fail@plt+0xb21c>
   1c898:	cmp	r6, r3
   1c89c:	blt	1c828 <__assert_fail@plt+0xb360>
   1c8a0:	ldr	r2, [r2, #12]
   1c8a4:	cmp	r6, r2
   1c8a8:	bgt	1c7a8 <__assert_fail@plt+0xb2e0>
   1c8ac:	mvn	r5, #0
   1c8b0:	b	1c780 <__assert_fail@plt+0xb2b8>
   1c8b4:	mvn	r0, #0
   1c8b8:	b	1c7a0 <__assert_fail@plt+0xb2d8>
   1c8bc:	mvn	r5, #0
   1c8c0:	b	1c6e4 <__assert_fail@plt+0xb21c>
   1c8c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c8c8:	mov	r4, r0
   1c8cc:	strd	r6, [sp, #8]
   1c8d0:	ldr	r0, [r1, #80]	; 0x50
   1c8d4:	strd	r8, [sp, #16]
   1c8d8:	str	sl, [sp, #24]
   1c8dc:	str	lr, [sp, #28]
   1c8e0:	sub	sp, sp, #8
   1c8e4:	ldrb	r7, [sp, #44]	; 0x2c
   1c8e8:	cmp	r0, #1
   1c8ec:	ldr	ip, [r1, #40]	; 0x28
   1c8f0:	beq	1c958 <__assert_fail@plt+0xb490>
   1c8f4:	add	r5, ip, #1
   1c8f8:	ldr	r6, [r1, #28]
   1c8fc:	cmp	r5, r6
   1c900:	bge	1c958 <__assert_fail@plt+0xb490>
   1c904:	ldr	r0, [r1, #8]
   1c908:	ldr	lr, [r0, r5, lsl #2]
   1c90c:	add	r0, r0, r5, lsl #2
   1c910:	cmn	lr, #1
   1c914:	bne	1c958 <__assert_fail@plt+0xb490>
   1c918:	add	r3, ip, #2
   1c91c:	mov	r2, r0
   1c920:	b	1c934 <__assert_fail@plt+0xb46c>
   1c924:	ldr	ip, [r2, #4]!
   1c928:	add	r3, r3, #1
   1c92c:	cmn	ip, #1
   1c930:	bne	1c940 <__assert_fail@plt+0xb478>
   1c934:	cmp	r6, r3
   1c938:	mov	lr, r3
   1c93c:	bne	1c924 <__assert_fail@plt+0xb45c>
   1c940:	ldr	r3, [r0, #-4]
   1c944:	mov	r2, #1
   1c948:	mov	r0, #0
   1c94c:	strd	r2, [r4]
   1c950:	str	lr, [r1, #40]	; 0x28
   1c954:	b	1c9a0 <__assert_fail@plt+0xb4d8>
   1c958:	ldrb	lr, [r2, #4]
   1c95c:	add	r3, ip, r3
   1c960:	str	r3, [r1, #40]	; 0x28
   1c964:	and	r0, lr, #251	; 0xfb
   1c968:	cmp	lr, #28
   1c96c:	cmpne	r0, #26
   1c970:	beq	1c9bc <__assert_fail@plt+0xb4f4>
   1c974:	cmp	lr, #22
   1c978:	moveq	lr, r7
   1c97c:	orrne	lr, r7, #1
   1c980:	mov	r5, r2
   1c984:	cmp	lr, #0
   1c988:	beq	1cb34 <__assert_fail@plt+0xb66c>
   1c98c:	ldrb	r2, [r5]
   1c990:	mov	r3, #0
   1c994:	mov	r0, r3
   1c998:	str	r3, [r4]
   1c99c:	strb	r2, [r4, #4]
   1c9a0:	add	sp, sp, #8
   1c9a4:	ldrd	r4, [sp]
   1c9a8:	ldrd	r6, [sp, #8]
   1c9ac:	ldrd	r8, [sp, #16]
   1c9b0:	ldr	sl, [sp, #24]
   1c9b4:	add	sp, sp, #28
   1c9b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9bc:	ldr	r6, [r1, #56]	; 0x38
   1c9c0:	cmp	r3, r6
   1c9c4:	bge	1ca64 <__assert_fail@plt+0xb59c>
   1c9c8:	ldrb	r7, [r2]
   1c9cc:	mov	r5, #0
   1c9d0:	b	1c9f4 <__assert_fail@plt+0xb52c>
   1c9d4:	ldr	r3, [r4, #4]
   1c9d8:	strb	r0, [r3, r5]
   1c9dc:	add	r5, r5, #1
   1c9e0:	cmp	r5, #32
   1c9e4:	beq	1ca64 <__assert_fail@plt+0xb59c>
   1c9e8:	ldrb	lr, [r2, #4]
   1c9ec:	ldr	r3, [r1, #40]	; 0x28
   1c9f0:	ldr	r6, [r1, #56]	; 0x38
   1c9f4:	cmp	lr, #30
   1c9f8:	add	ip, r3, #1
   1c9fc:	beq	1ca6c <__assert_fail@plt+0xb5a4>
   1ca00:	ldr	r0, [r1, #4]
   1ca04:	str	ip, [r1, #40]	; 0x28
   1ca08:	ldrb	r0, [r0, r3]
   1ca0c:	cmp	r6, ip
   1ca10:	ble	1ca64 <__assert_fail@plt+0xb59c>
   1ca14:	cmp	r7, r0
   1ca18:	bne	1c9d4 <__assert_fail@plt+0xb50c>
   1ca1c:	ldr	r3, [r1, #4]
   1ca20:	ldrb	r3, [r3, ip]
   1ca24:	cmp	r3, #93	; 0x5d
   1ca28:	bne	1c9d4 <__assert_fail@plt+0xb50c>
   1ca2c:	ldr	r3, [r4, #4]
   1ca30:	add	ip, ip, #1
   1ca34:	mov	r0, #0
   1ca38:	str	ip, [r1, #40]	; 0x28
   1ca3c:	strb	r0, [r3, r5]
   1ca40:	ldrb	r3, [r2, #4]
   1ca44:	cmp	r3, #28
   1ca48:	beq	1cb60 <__assert_fail@plt+0xb698>
   1ca4c:	cmp	r3, #30
   1ca50:	beq	1cb54 <__assert_fail@plt+0xb68c>
   1ca54:	cmp	r3, #26
   1ca58:	moveq	r3, #3
   1ca5c:	streq	r3, [r4]
   1ca60:	b	1c9a0 <__assert_fail@plt+0xb4d8>
   1ca64:	mov	r0, #7
   1ca68:	b	1c9a0 <__assert_fail@plt+0xb4d8>
   1ca6c:	ldrb	r0, [r1, #75]	; 0x4b
   1ca70:	cmp	r0, #0
   1ca74:	beq	1ca00 <__assert_fail@plt+0xb538>
   1ca78:	ldrb	r0, [r1, #76]	; 0x4c
   1ca7c:	cmp	r0, #0
   1ca80:	beq	1cb1c <__assert_fail@plt+0xb654>
   1ca84:	ldr	r8, [r1, #28]
   1ca88:	lsl	lr, r3, #2
   1ca8c:	cmp	r3, r8
   1ca90:	beq	1caa4 <__assert_fail@plt+0xb5dc>
   1ca94:	ldr	r0, [r1, #8]
   1ca98:	ldr	r0, [r0, r3, lsl #2]
   1ca9c:	cmn	r0, #1
   1caa0:	beq	1ca00 <__assert_fail@plt+0xb538>
   1caa4:	ldr	r0, [r1]
   1caa8:	ldr	sl, [r1, #12]
   1caac:	ldr	r9, [r1, #24]
   1cab0:	ldr	sl, [sl, lr]
   1cab4:	add	r0, r0, sl
   1cab8:	ldrb	r0, [r0, r9]
   1cabc:	tst	r0, #128	; 0x80
   1cac0:	bne	1ca00 <__assert_fail@plt+0xb538>
   1cac4:	ldr	r9, [r1, #80]	; 0x50
   1cac8:	cmp	r9, #1
   1cacc:	beq	1cb14 <__assert_fail@plt+0xb64c>
   1cad0:	cmp	r8, ip
   1cad4:	ble	1cb14 <__assert_fail@plt+0xb64c>
   1cad8:	ldr	r9, [r1, #8]
   1cadc:	add	lr, r9, lr
   1cae0:	ldr	lr, [lr, #4]
   1cae4:	cmn	lr, #1
   1cae8:	bne	1cb14 <__assert_fail@plt+0xb64c>
   1caec:	add	r3, r3, #2
   1caf0:	sub	r9, r9, #4
   1caf4:	b	1cb04 <__assert_fail@plt+0xb63c>
   1caf8:	ldr	lr, [r9, r3, lsl #2]
   1cafc:	cmn	lr, #1
   1cb00:	bne	1cb14 <__assert_fail@plt+0xb64c>
   1cb04:	cmp	r8, r3
   1cb08:	mov	ip, r3
   1cb0c:	add	r3, r3, #1
   1cb10:	bne	1caf8 <__assert_fail@plt+0xb630>
   1cb14:	str	ip, [r1, #40]	; 0x28
   1cb18:	b	1ca0c <__assert_fail@plt+0xb544>
   1cb1c:	ldr	r0, [r1]
   1cb20:	str	ip, [r1, #40]	; 0x28
   1cb24:	ldr	lr, [r1, #24]
   1cb28:	add	r3, r0, r3
   1cb2c:	ldrb	r0, [r3, lr]
   1cb30:	b	1ca0c <__assert_fail@plt+0xb544>
   1cb34:	mov	r0, sp
   1cb38:	ldr	r2, [sp, #40]	; 0x28
   1cb3c:	bl	18750 <__assert_fail@plt+0x7288>
   1cb40:	ldrb	r3, [sp, #4]
   1cb44:	cmp	r3, #21
   1cb48:	movne	r0, #11
   1cb4c:	beq	1c98c <__assert_fail@plt+0xb4c4>
   1cb50:	b	1c9a0 <__assert_fail@plt+0xb4d8>
   1cb54:	mov	r3, #4
   1cb58:	str	r3, [r4]
   1cb5c:	b	1c9a0 <__assert_fail@plt+0xb4d8>
   1cb60:	mov	r3, #2
   1cb64:	str	r3, [r4]
   1cb68:	b	1c9a0 <__assert_fail@plt+0xb4d8>
   1cb6c:	add	ip, r0, r2, lsl #3
   1cb70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cb74:	strd	r6, [sp, #8]
   1cb78:	str	r8, [sp, #16]
   1cb7c:	ldrb	r8, [ip, #4]
   1cb80:	str	lr, [sp, #20]
   1cb84:	ldr	r7, [sp, #24]
   1cb88:	cmp	r8, #7
   1cb8c:	beq	1ccf4 <__assert_fail@plt+0xb82c>
   1cb90:	ldr	ip, [r3, #80]	; 0x50
   1cb94:	cmp	ip, #1
   1cb98:	beq	1cbf8 <__assert_fail@plt+0xb730>
   1cb9c:	ldr	ip, [r3, #28]
   1cba0:	add	lr, r7, #1
   1cba4:	cmp	lr, ip
   1cba8:	bge	1cbf8 <__assert_fail@plt+0xb730>
   1cbac:	ldr	r4, [r3, #8]
   1cbb0:	ldr	r5, [r4, lr, lsl #2]
   1cbb4:	add	r6, r4, lr, lsl #2
   1cbb8:	cmn	r5, #1
   1cbbc:	bne	1cbf8 <__assert_fail@plt+0xb730>
   1cbc0:	sub	ip, ip, r7
   1cbc4:	mov	lr, r6
   1cbc8:	mov	r4, #1
   1cbcc:	b	1cbdc <__assert_fail@plt+0xb714>
   1cbd0:	ldr	r5, [lr, #4]!
   1cbd4:	cmn	r5, #1
   1cbd8:	bne	1cbe8 <__assert_fail@plt+0xb720>
   1cbdc:	add	r4, r4, #1
   1cbe0:	cmp	ip, r4
   1cbe4:	bne	1cbd0 <__assert_fail@plt+0xb708>
   1cbe8:	cmp	r8, #5
   1cbec:	beq	1cc14 <__assert_fail@plt+0xb74c>
   1cbf0:	cmp	r8, #6
   1cbf4:	beq	1cc4c <__assert_fail@plt+0xb784>
   1cbf8:	mov	r4, #0
   1cbfc:	mov	r0, r4
   1cc00:	ldrd	r4, [sp]
   1cc04:	ldrd	r6, [sp, #8]
   1cc08:	ldr	r8, [sp, #16]
   1cc0c:	add	sp, sp, #20
   1cc10:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc14:	ldr	r2, [r1]
   1cc18:	tst	r2, #64	; 0x40
   1cc1c:	bne	1cc30 <__assert_fail@plt+0xb768>
   1cc20:	ldr	r1, [r3, #4]
   1cc24:	ldrb	r1, [r1, r7]
   1cc28:	cmp	r1, #10
   1cc2c:	beq	1cbf8 <__assert_fail@plt+0xb730>
   1cc30:	tst	r2, #128	; 0x80
   1cc34:	beq	1cbfc <__assert_fail@plt+0xb734>
   1cc38:	ldr	r3, [r3, #4]
   1cc3c:	ldrb	r3, [r3, r7]
   1cc40:	cmp	r3, #0
   1cc44:	beq	1cbf8 <__assert_fail@plt+0xb730>
   1cc48:	b	1cbfc <__assert_fail@plt+0xb734>
   1cc4c:	ldr	r7, [r0, r2, lsl #3]
   1cc50:	ldr	r0, [r7, #20]
   1cc54:	ldr	ip, [r7, #32]
   1cc58:	cmp	ip, #0
   1cc5c:	bne	1cc6c <__assert_fail@plt+0xb7a4>
   1cc60:	ldr	r3, [r7, #36]	; 0x24
   1cc64:	orrs	r3, r0, r3
   1cc68:	beq	1cdf4 <__assert_fail@plt+0xb92c>
   1cc6c:	cmp	r0, #0
   1cc70:	ldr	r6, [r6, #-4]
   1cc74:	ble	1cca8 <__assert_fail@plt+0xb7e0>
   1cc78:	ldr	r2, [r7]
   1cc7c:	ldr	r3, [r2]
   1cc80:	cmp	r6, r3
   1cc84:	beq	1cce4 <__assert_fail@plt+0xb81c>
   1cc88:	mov	r3, #0
   1cc8c:	b	1cc9c <__assert_fail@plt+0xb7d4>
   1cc90:	ldr	r1, [r2, #4]!
   1cc94:	cmp	r6, r1
   1cc98:	beq	1cce4 <__assert_fail@plt+0xb81c>
   1cc9c:	add	r3, r3, #1
   1cca0:	cmp	r3, r0
   1cca4:	bne	1cc90 <__assert_fail@plt+0xb7c8>
   1cca8:	ldr	r3, [r7, #36]	; 0x24
   1ccac:	cmp	r3, #0
   1ccb0:	ble	1cdb8 <__assert_fail@plt+0xb8f0>
   1ccb4:	mov	r5, #0
   1ccb8:	b	1ccc8 <__assert_fail@plt+0xb800>
   1ccbc:	ldr	r3, [r7, #36]	; 0x24
   1ccc0:	cmp	r5, r3
   1ccc4:	bge	1cdb4 <__assert_fail@plt+0xb8ec>
   1ccc8:	ldr	r3, [r7, #12]
   1cccc:	mov	r0, r6
   1ccd0:	ldr	r1, [r3, r5, lsl #2]
   1ccd4:	add	r5, r5, #1
   1ccd8:	bl	11180 <iswctype@plt>
   1ccdc:	cmp	r0, #0
   1cce0:	beq	1ccbc <__assert_fail@plt+0xb7f4>
   1cce4:	ldrb	r3, [r7, #16]
   1cce8:	tst	r3, #1
   1ccec:	beq	1cbfc <__assert_fail@plt+0xb734>
   1ccf0:	b	1cbf8 <__assert_fail@plt+0xb730>
   1ccf4:	ldr	r1, [r3, #4]
   1ccf8:	ldrb	r2, [r1, r7]
   1ccfc:	cmp	r2, #193	; 0xc1
   1cd00:	bls	1cbf8 <__assert_fail@plt+0xb730>
   1cd04:	ldr	r3, [r3, #48]	; 0x30
   1cd08:	add	r0, r7, #1
   1cd0c:	cmp	r0, r3
   1cd10:	bge	1cbf8 <__assert_fail@plt+0xb730>
   1cd14:	add	ip, r1, r7
   1cd18:	cmp	r2, #223	; 0xdf
   1cd1c:	ldrb	lr, [ip, #1]
   1cd20:	bls	1ce20 <__assert_fail@plt+0xb958>
   1cd24:	cmp	r2, #239	; 0xef
   1cd28:	bhi	1ce04 <__assert_fail@plt+0xb93c>
   1cd2c:	cmp	lr, #159	; 0x9f
   1cd30:	cmpls	r2, #224	; 0xe0
   1cd34:	movne	r4, #3
   1cd38:	beq	1cbf8 <__assert_fail@plt+0xb730>
   1cd3c:	add	r7, r7, r4
   1cd40:	cmp	r3, r7
   1cd44:	blt	1cbf8 <__assert_fail@plt+0xb730>
   1cd48:	ldrb	r3, [r1, r0]
   1cd4c:	eor	r3, r3, #128	; 0x80
   1cd50:	cmp	r3, #63	; 0x3f
   1cd54:	bhi	1cbf8 <__assert_fail@plt+0xb730>
   1cd58:	ldrb	r3, [ip, #2]
   1cd5c:	eor	r3, r3, #128	; 0x80
   1cd60:	cmp	r3, #63	; 0x3f
   1cd64:	bhi	1cbf8 <__assert_fail@plt+0xb730>
   1cd68:	cmp	r4, #3
   1cd6c:	beq	1cbfc <__assert_fail@plt+0xb734>
   1cd70:	ldrb	r3, [ip, #3]
   1cd74:	eor	r3, r3, #128	; 0x80
   1cd78:	cmp	r3, #63	; 0x3f
   1cd7c:	bhi	1cbf8 <__assert_fail@plt+0xb730>
   1cd80:	cmp	r4, #4
   1cd84:	beq	1cbfc <__assert_fail@plt+0xb734>
   1cd88:	ldrb	r3, [ip, #4]
   1cd8c:	eor	r3, r3, #128	; 0x80
   1cd90:	cmp	r3, #63	; 0x3f
   1cd94:	bhi	1cbf8 <__assert_fail@plt+0xb730>
   1cd98:	cmp	r4, #6
   1cd9c:	bne	1ce6c <__assert_fail@plt+0xb9a4>
   1cda0:	ldrb	r3, [ip, #5]
   1cda4:	eor	r3, r3, #128	; 0x80
   1cda8:	cmp	r3, #63	; 0x3f
   1cdac:	bls	1cbfc <__assert_fail@plt+0xb734>
   1cdb0:	b	1cbf8 <__assert_fail@plt+0xb730>
   1cdb4:	ldr	ip, [r7, #32]
   1cdb8:	cmp	ip, #0
   1cdbc:	ble	1cdf4 <__assert_fail@plt+0xb92c>
   1cdc0:	ldr	r2, [r7, #4]
   1cdc4:	mov	r3, #0
   1cdc8:	sub	r2, r2, #4
   1cdcc:	ldr	r1, [r2, #4]!
   1cdd0:	cmp	r6, r1
   1cdd4:	bcc	1cde8 <__assert_fail@plt+0xb920>
   1cdd8:	ldr	r1, [r7, #8]
   1cddc:	ldr	r1, [r1, r3, lsl #2]
   1cde0:	cmp	r6, r1
   1cde4:	bls	1cce4 <__assert_fail@plt+0xb81c>
   1cde8:	add	r3, r3, #1
   1cdec:	cmp	r3, ip
   1cdf0:	bne	1cdcc <__assert_fail@plt+0xb904>
   1cdf4:	ldrb	r3, [r7, #16]
   1cdf8:	tst	r3, #1
   1cdfc:	bne	1cbfc <__assert_fail@plt+0xb734>
   1ce00:	b	1cbf8 <__assert_fail@plt+0xb730>
   1ce04:	cmp	r2, #247	; 0xf7
   1ce08:	bhi	1ce34 <__assert_fail@plt+0xb96c>
   1ce0c:	cmp	lr, #143	; 0x8f
   1ce10:	cmpls	r2, #240	; 0xf0
   1ce14:	movne	r4, #4
   1ce18:	bne	1cd3c <__assert_fail@plt+0xb874>
   1ce1c:	b	1cbf8 <__assert_fail@plt+0xb730>
   1ce20:	eor	lr, lr, #128	; 0x80
   1ce24:	cmp	lr, #63	; 0x3f
   1ce28:	movls	r4, #2
   1ce2c:	bls	1cbfc <__assert_fail@plt+0xb734>
   1ce30:	b	1cbf8 <__assert_fail@plt+0xb730>
   1ce34:	cmp	r2, #251	; 0xfb
   1ce38:	bhi	1ce50 <__assert_fail@plt+0xb988>
   1ce3c:	cmp	lr, #135	; 0x87
   1ce40:	cmpls	r2, #248	; 0xf8
   1ce44:	movne	r4, #5
   1ce48:	bne	1cd3c <__assert_fail@plt+0xb874>
   1ce4c:	b	1cbf8 <__assert_fail@plt+0xb730>
   1ce50:	cmp	r2, #253	; 0xfd
   1ce54:	bhi	1cbf8 <__assert_fail@plt+0xb730>
   1ce58:	cmp	lr, #131	; 0x83
   1ce5c:	cmpls	r2, #252	; 0xfc
   1ce60:	beq	1cbf8 <__assert_fail@plt+0xb730>
   1ce64:	mov	r4, #6
   1ce68:	b	1cd3c <__assert_fail@plt+0xb874>
   1ce6c:	mov	r4, #5
   1ce70:	b	1cbfc <__assert_fail@plt+0xb734>
   1ce74:	strd	r4, [sp, #-16]!
   1ce78:	mov	r5, #255	; 0xff
   1ce7c:	movt	r5, #4
   1ce80:	mov	r4, r0
   1ce84:	str	r6, [sp, #8]
   1ce88:	str	lr, [sp, #12]
   1ce8c:	b	1ce94 <__assert_fail@plt+0xb9cc>
   1ce90:	mov	r4, r3
   1ce94:	ldr	r3, [r4, #4]
   1ce98:	cmp	r3, #0
   1ce9c:	bne	1ce90 <__assert_fail@plt+0xb9c8>
   1cea0:	ldr	r3, [r4, #8]
   1cea4:	cmp	r3, #0
   1cea8:	bne	1ce90 <__assert_fail@plt+0xb9c8>
   1ceac:	ldr	r3, [r4, #24]
   1ceb0:	and	r3, r3, r5
   1ceb4:	cmp	r3, #6
   1ceb8:	beq	1cf00 <__assert_fail@plt+0xba38>
   1cebc:	cmp	r3, #3
   1cec0:	beq	1cf48 <__assert_fail@plt+0xba80>
   1cec4:	ldr	r0, [r4]
   1cec8:	cmp	r0, #0
   1cecc:	beq	1cf38 <__assert_fail@plt+0xba70>
   1ced0:	ldr	r3, [r0, #8]
   1ced4:	cmp	r3, #0
   1ced8:	cmpne	r4, r3
   1cedc:	mov	r4, r0
   1cee0:	moveq	r2, #1
   1cee4:	movne	r2, #0
   1cee8:	cmp	r2, #0
   1ceec:	beq	1ce90 <__assert_fail@plt+0xb9c8>
   1cef0:	ldr	r3, [r4, #24]
   1cef4:	and	r3, r3, r5
   1cef8:	cmp	r3, #6
   1cefc:	bne	1cebc <__assert_fail@plt+0xb9f4>
   1cf00:	ldr	r6, [r4, #20]
   1cf04:	ldr	r0, [r6]
   1cf08:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cf0c:	ldr	r0, [r6, #4]
   1cf10:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cf14:	ldr	r0, [r6, #8]
   1cf18:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cf1c:	ldr	r0, [r6, #12]
   1cf20:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cf24:	mov	r0, r6
   1cf28:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cf2c:	ldr	r0, [r4]
   1cf30:	cmp	r0, #0
   1cf34:	bne	1ced0 <__assert_fail@plt+0xba08>
   1cf38:	ldrd	r4, [sp]
   1cf3c:	ldr	r6, [sp, #8]
   1cf40:	add	sp, sp, #12
   1cf44:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf48:	ldr	r0, [r4, #20]
   1cf4c:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cf50:	b	1cec4 <__assert_fail@plt+0xb9fc>
   1cf54:	ldr	r2, [r0]
   1cf58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cf5c:	strd	r6, [sp, #8]
   1cf60:	mov	r7, r0
   1cf64:	str	r8, [sp, #16]
   1cf68:	str	lr, [sp, #20]
   1cf6c:	cmp	r2, #0
   1cf70:	beq	1cff8 <__assert_fail@plt+0xbb30>
   1cf74:	ldr	r0, [r0, #8]
   1cf78:	cmp	r0, #0
   1cf7c:	beq	1cff8 <__assert_fail@plt+0xbb30>
   1cf80:	mov	r5, #255	; 0xff
   1cf84:	movt	r5, #4
   1cf88:	mov	r4, #0
   1cf8c:	b	1cfa8 <__assert_fail@plt+0xbae0>
   1cf90:	cmp	r3, #3
   1cf94:	beq	1d1d0 <__assert_fail@plt+0xbd08>
   1cf98:	add	r4, r4, #1
   1cf9c:	cmp	r4, r0
   1cfa0:	bcs	1cff8 <__assert_fail@plt+0xbb30>
   1cfa4:	ldr	r2, [r7]
   1cfa8:	add	r1, r2, r4, lsl #3
   1cfac:	ldr	r3, [r1, #4]
   1cfb0:	and	r3, r3, r5
   1cfb4:	cmp	r3, #6
   1cfb8:	bne	1cf90 <__assert_fail@plt+0xbac8>
   1cfbc:	ldr	r6, [r2, r4, lsl #3]
   1cfc0:	add	r4, r4, #1
   1cfc4:	ldr	r0, [r6]
   1cfc8:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cfcc:	ldr	r0, [r6, #4]
   1cfd0:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cfd4:	ldr	r0, [r6, #8]
   1cfd8:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cfdc:	ldr	r0, [r6, #12]
   1cfe0:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cfe4:	mov	r0, r6
   1cfe8:	bl	14484 <__assert_fail@plt+0x2fbc>
   1cfec:	ldr	r0, [r7, #8]
   1cff0:	cmp	r4, r0
   1cff4:	bcc	1cfa4 <__assert_fail@plt+0xbadc>
   1cff8:	ldr	r0, [r7, #12]
   1cffc:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d000:	ldr	r3, [r7, #8]
   1d004:	cmp	r3, #0
   1d008:	movne	r4, #0
   1d00c:	movne	r5, r4
   1d010:	beq	1d070 <__assert_fail@plt+0xbba8>
   1d014:	ldr	r3, [r7, #24]
   1d018:	cmp	r3, #0
   1d01c:	add	r2, r3, r4
   1d020:	beq	1d02c <__assert_fail@plt+0xbb64>
   1d024:	ldr	r0, [r2, #8]
   1d028:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d02c:	ldr	r3, [r7, #28]
   1d030:	cmp	r3, #0
   1d034:	add	r2, r3, r4
   1d038:	beq	1d044 <__assert_fail@plt+0xbb7c>
   1d03c:	ldr	r0, [r2, #8]
   1d040:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d044:	ldr	r0, [r7, #20]
   1d048:	cmp	r0, #0
   1d04c:	add	r3, r0, r4
   1d050:	beq	1d174 <__assert_fail@plt+0xbcac>
   1d054:	ldr	r0, [r3, #8]
   1d058:	add	r5, r5, #1
   1d05c:	add	r4, r4, #12
   1d060:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d064:	ldr	r3, [r7, #8]
   1d068:	cmp	r5, r3
   1d06c:	bcc	1d014 <__assert_fail@plt+0xbb4c>
   1d070:	ldr	r0, [r7, #20]
   1d074:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d078:	ldr	r0, [r7, #24]
   1d07c:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d080:	ldr	r0, [r7, #28]
   1d084:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d088:	ldr	r0, [r7]
   1d08c:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d090:	ldr	r0, [r7, #32]
   1d094:	cmp	r0, #0
   1d098:	movne	r8, #0
   1d09c:	beq	1d190 <__assert_fail@plt+0xbcc8>
   1d0a0:	add	r6, r8, r8, lsl #1
   1d0a4:	ldr	r3, [r0, r6, lsl #2]
   1d0a8:	add	r6, r0, r6, lsl #2
   1d0ac:	cmp	r3, #0
   1d0b0:	movgt	r5, #0
   1d0b4:	ble	1d120 <__assert_fail@plt+0xbc58>
   1d0b8:	ldr	r3, [r6, #8]
   1d0bc:	ldr	r4, [r3, r5, lsl #2]
   1d0c0:	ldr	r0, [r4, #24]
   1d0c4:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d0c8:	ldr	r0, [r4, #36]	; 0x24
   1d0cc:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d0d0:	ldr	r3, [r4, #40]	; 0x28
   1d0d4:	add	r2, r4, #4
   1d0d8:	cmp	r3, r2
   1d0dc:	beq	1d140 <__assert_fail@plt+0xbc78>
   1d0e0:	ldr	r0, [r3, #8]
   1d0e4:	add	r5, r5, #1
   1d0e8:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d0ec:	ldr	r0, [r4, #40]	; 0x28
   1d0f0:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d0f4:	ldr	r0, [r4, #12]
   1d0f8:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d0fc:	ldr	r0, [r4, #48]	; 0x30
   1d100:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d104:	ldr	r0, [r4, #44]	; 0x2c
   1d108:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d10c:	mov	r0, r4
   1d110:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d114:	ldr	r3, [r6]
   1d118:	cmp	r3, r5
   1d11c:	bgt	1d0b8 <__assert_fail@plt+0xbbf0>
   1d120:	ldr	r0, [r6, #8]
   1d124:	add	r8, r8, #1
   1d128:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d12c:	ldr	r3, [r7, #68]	; 0x44
   1d130:	cmp	r3, r8
   1d134:	bcc	1d18c <__assert_fail@plt+0xbcc4>
   1d138:	ldr	r0, [r7, #32]
   1d13c:	b	1d0a0 <__assert_fail@plt+0xbbd8>
   1d140:	ldr	r0, [r4, #12]
   1d144:	add	r5, r5, #1
   1d148:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d14c:	ldr	r0, [r4, #48]	; 0x30
   1d150:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d154:	ldr	r0, [r4, #44]	; 0x2c
   1d158:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d15c:	mov	r0, r4
   1d160:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d164:	ldr	r3, [r6]
   1d168:	cmp	r5, r3
   1d16c:	blt	1d0b8 <__assert_fail@plt+0xbbf0>
   1d170:	b	1d120 <__assert_fail@plt+0xbc58>
   1d174:	ldr	r3, [r7, #8]
   1d178:	add	r5, r5, #1
   1d17c:	add	r4, r4, #12
   1d180:	cmp	r3, r5
   1d184:	bhi	1d014 <__assert_fail@plt+0xbb4c>
   1d188:	b	1d074 <__assert_fail@plt+0xbbac>
   1d18c:	ldr	r0, [r7, #32]
   1d190:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d194:	ldr	r0, [r7, #60]	; 0x3c
   1d198:	movw	r3, #52880	; 0xce90
   1d19c:	movt	r3, #2
   1d1a0:	cmp	r0, r3
   1d1a4:	beq	1d1ac <__assert_fail@plt+0xbce4>
   1d1a8:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d1ac:	ldr	r0, [r7, #132]	; 0x84
   1d1b0:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d1b4:	mov	r0, r7
   1d1b8:	ldrd	r4, [sp]
   1d1bc:	ldrd	r6, [sp, #8]
   1d1c0:	ldr	r8, [sp, #16]
   1d1c4:	ldr	lr, [sp, #20]
   1d1c8:	add	sp, sp, #24
   1d1cc:	b	14484 <__assert_fail@plt+0x2fbc>
   1d1d0:	ldr	r0, [r1]
   1d1d4:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d1d8:	ldr	r0, [r7, #8]
   1d1dc:	b	1cf98 <__assert_fail@plt+0xbad0>
   1d1e0:	ldr	r2, [r1, #24]
   1d1e4:	mov	r3, #255	; 0xff
   1d1e8:	movt	r3, #4
   1d1ec:	str	r4, [sp, #-8]!
   1d1f0:	str	lr, [sp, #4]
   1d1f4:	and	r3, r3, r2
   1d1f8:	cmp	r3, #6
   1d1fc:	beq	1d218 <__assert_fail@plt+0xbd50>
   1d200:	cmp	r3, #3
   1d204:	beq	1d254 <__assert_fail@plt+0xbd8c>
   1d208:	ldr	r4, [sp]
   1d20c:	add	sp, sp, #4
   1d210:	mov	r0, #0
   1d214:	pop	{pc}		; (ldr pc, [sp], #4)
   1d218:	ldr	r4, [r1, #20]
   1d21c:	ldr	r0, [r4]
   1d220:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d224:	ldr	r0, [r4, #4]
   1d228:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d22c:	ldr	r0, [r4, #8]
   1d230:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d234:	ldr	r0, [r4, #12]
   1d238:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d23c:	mov	r0, r4
   1d240:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d244:	ldr	r4, [sp]
   1d248:	add	sp, sp, #4
   1d24c:	mov	r0, #0
   1d250:	pop	{pc}		; (ldr pc, [sp], #4)
   1d254:	ldr	r0, [r1, #20]
   1d258:	bl	14484 <__assert_fail@plt+0x2fbc>
   1d25c:	ldr	r4, [sp]
   1d260:	add	sp, sp, #4
   1d264:	mov	r0, #0
   1d268:	pop	{pc}		; (ldr pc, [sp], #4)
   1d26c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d270:	mov	r4, r2
   1d274:	strd	r6, [sp, #8]
   1d278:	lsl	r7, r1, #3
   1d27c:	mov	r6, r0
   1d280:	strd	r8, [sp, #16]
   1d284:	mov	r8, r1
   1d288:	strd	sl, [sp, #24]
   1d28c:	mov	sl, #0
   1d290:	str	lr, [sp, #32]
   1d294:	sub	sp, sp, #20
   1d298:	ldr	r9, [sp, #56]	; 0x38
   1d29c:	str	r3, [sp, #8]
   1d2a0:	ldr	r2, [r6]
   1d2a4:	mov	r5, r4
   1d2a8:	ldr	r1, [r6, #20]
   1d2ac:	add	r3, r2, r7
   1d2b0:	ldrb	r0, [r3, #4]
   1d2b4:	cmp	r0, #4
   1d2b8:	beq	1d4e0 <__assert_fail@plt+0xc018>
   1d2bc:	add	fp, r8, r8, lsl #1
   1d2c0:	lsl	fp, fp, #2
   1d2c4:	add	ip, r1, fp
   1d2c8:	ldr	r0, [ip, #4]
   1d2cc:	cmp	r0, #0
   1d2d0:	beq	1d630 <__assert_fail@plt+0xc168>
   1d2d4:	ldr	ip, [ip, #8]
   1d2d8:	add	r5, r4, r4, lsl #1
   1d2dc:	cmp	r0, #1
   1d2e0:	lsl	r5, r5, #2
   1d2e4:	add	r0, r1, r5
   1d2e8:	ldr	r7, [ip]
   1d2ec:	beq	1d428 <__assert_fail@plt+0xbf60>
   1d2f0:	ldr	ip, [r6, #8]
   1d2f4:	sub	r1, ip, #1
   1d2f8:	add	r3, r2, r1, lsl #3
   1d2fc:	cmp	r1, #0
   1d300:	movle	lr, #0
   1d304:	movgt	lr, #1
   1d308:	ldrb	r4, [r3, #6]
   1d30c:	str	sl, [r0, #4]
   1d310:	ands	lr, lr, r4, lsr #2
   1d314:	beq	1d590 <__assert_fail@plt+0xc0c8>
   1d318:	ldr	lr, [r6, #16]
   1d31c:	add	r4, r2, ip, lsl #3
   1d320:	sub	r4, r4, r3
   1d324:	sub	r4, r4, #16
   1d328:	add	lr, lr, ip, lsl #2
   1d32c:	b	1d350 <__assert_fail@plt+0xbe88>
   1d330:	add	r3, r3, r4
   1d334:	sub	r1, r1, #1
   1d338:	ldrb	r8, [r3, #6]
   1d33c:	cmp	r1, #0
   1d340:	movle	ip, #0
   1d344:	movgt	ip, #1
   1d348:	ands	ip, ip, r8, lsr #2
   1d34c:	beq	1d590 <__assert_fail@plt+0xc0c8>
   1d350:	ldr	ip, [lr, #-4]!
   1d354:	cmp	ip, r7
   1d358:	bne	1d330 <__assert_fail@plt+0xbe68>
   1d35c:	ldr	ip, [r3, #4]
   1d360:	ubfx	ip, ip, #8, #10
   1d364:	cmp	r9, ip
   1d368:	bne	1d330 <__assert_fail@plt+0xbe68>
   1d36c:	bl	19998 <__assert_fail@plt+0x84d0>
   1d370:	cmp	r0, #0
   1d374:	beq	1d408 <__assert_fail@plt+0xbf40>
   1d378:	ldr	r3, [r6]
   1d37c:	mov	r0, r6
   1d380:	ldr	r2, [r6, #20]
   1d384:	add	fp, r2, fp
   1d388:	ldr	r2, [fp, #8]
   1d38c:	ldr	r8, [r2, #4]
   1d390:	lsl	r7, r8, #3
   1d394:	add	r3, r3, r7
   1d398:	ldm	r3, {r1, r2}
   1d39c:	bl	196e4 <__assert_fail@plt+0x821c>
   1d3a0:	cmn	r0, #1
   1d3a4:	mov	r4, r0
   1d3a8:	beq	1d408 <__assert_fail@plt+0xbf40>
   1d3ac:	ldr	r3, [r6]
   1d3b0:	mov	r1, r0
   1d3b4:	ubfx	r2, r9, #0, #10
   1d3b8:	add	r0, r3, r0, lsl #3
   1d3bc:	add	ip, r3, r7
   1d3c0:	ldr	r3, [r0, #4]
   1d3c4:	bfi	r3, r2, #8, #10
   1d3c8:	str	r3, [r0, #4]
   1d3cc:	ldr	ip, [ip, #4]
   1d3d0:	ubfx	ip, ip, #8, #10
   1d3d4:	orr	r2, r2, ip
   1d3d8:	bfi	r3, r2, #8, #10
   1d3dc:	ubfx	r2, r3, #16, #8
   1d3e0:	str	r3, [r0, #4]
   1d3e4:	orr	r3, r2, #4
   1d3e8:	strb	r3, [r0, #6]
   1d3ec:	ldr	r3, [r6, #16]
   1d3f0:	ldr	r0, [r6, #20]
   1d3f4:	str	r8, [r3, r4, lsl #2]
   1d3f8:	add	r0, r0, r5
   1d3fc:	bl	19998 <__assert_fail@plt+0x84d0>
   1d400:	cmp	r0, #0
   1d404:	bne	1d2a0 <__assert_fail@plt+0xbdd8>
   1d408:	mov	r0, #12
   1d40c:	add	sp, sp, #20
   1d410:	ldrd	r4, [sp]
   1d414:	ldrd	r6, [sp, #8]
   1d418:	ldrd	r8, [sp, #16]
   1d41c:	ldrd	sl, [sp, #24]
   1d420:	add	sp, sp, #32
   1d424:	pop	{pc}		; (ldr pc, [sp], #4)
   1d428:	ldr	r1, [sp, #8]
   1d42c:	cmp	r8, r4
   1d430:	str	sl, [r0, #4]
   1d434:	sub	r1, r8, r1
   1d438:	clz	r1, r1
   1d43c:	lsr	r1, r1, #5
   1d440:	moveq	r1, #0
   1d444:	cmp	r1, #0
   1d448:	bne	1d640 <__assert_fail@plt+0xc178>
   1d44c:	ldr	r3, [r3, #4]
   1d450:	lsl	fp, r7, #3
   1d454:	mov	r0, r6
   1d458:	add	r2, r2, fp
   1d45c:	ldm	r2, {r1, r2}
   1d460:	ubfx	r3, r3, #8, #10
   1d464:	orr	r9, r9, r3
   1d468:	bl	196e4 <__assert_fail@plt+0x821c>
   1d46c:	cmn	r0, #1
   1d470:	mov	r4, r0
   1d474:	beq	1d408 <__assert_fail@plt+0xbf40>
   1d478:	ldr	r3, [r6]
   1d47c:	mov	r1, r0
   1d480:	ubfx	r2, r9, #0, #10
   1d484:	add	r0, r3, r0, lsl #3
   1d488:	add	ip, r3, fp
   1d48c:	ldr	r3, [r0, #4]
   1d490:	bfi	r3, r2, #8, #10
   1d494:	str	r3, [r0, #4]
   1d498:	ldr	ip, [ip, #4]
   1d49c:	ubfx	ip, ip, #8, #10
   1d4a0:	orr	r2, r2, ip
   1d4a4:	bfi	r3, r2, #8, #10
   1d4a8:	ubfx	r2, r3, #16, #8
   1d4ac:	str	r3, [r0, #4]
   1d4b0:	orr	r3, r2, #4
   1d4b4:	strb	r3, [r0, #6]
   1d4b8:	ldr	r3, [r6, #16]
   1d4bc:	ldr	r0, [r6, #20]
   1d4c0:	str	r7, [r3, r4, lsl #2]
   1d4c4:	add	r0, r0, r5
   1d4c8:	bl	19998 <__assert_fail@plt+0x84d0>
   1d4cc:	cmp	r0, #0
   1d4d0:	beq	1d408 <__assert_fail@plt+0xbf40>
   1d4d4:	mov	r8, r7
   1d4d8:	mov	r7, fp
   1d4dc:	b	1d2a0 <__assert_fail@plt+0xbdd8>
   1d4e0:	ldr	ip, [r6, #12]
   1d4e4:	lsl	r3, r8, #2
   1d4e8:	mov	r0, r6
   1d4ec:	add	r4, r4, r4, lsl #1
   1d4f0:	lsl	fp, r4, #2
   1d4f4:	str	r3, [sp, #12]
   1d4f8:	ldr	r8, [ip, r8, lsl #2]
   1d4fc:	add	r1, r1, fp
   1d500:	str	sl, [r1, #4]
   1d504:	lsl	r7, r8, #3
   1d508:	add	r2, r2, r7
   1d50c:	ldm	r2, {r1, r2}
   1d510:	bl	196e4 <__assert_fail@plt+0x821c>
   1d514:	cmn	r0, #1
   1d518:	mov	r4, r0
   1d51c:	ldr	r3, [sp, #12]
   1d520:	beq	1d408 <__assert_fail@plt+0xbf40>
   1d524:	ldr	lr, [r6]
   1d528:	ubfx	r0, r9, #0, #10
   1d52c:	mov	r1, r4
   1d530:	add	ip, lr, r4, lsl #3
   1d534:	add	lr, lr, r7
   1d538:	ldr	r2, [ip, #4]
   1d53c:	bfi	r2, r0, #8, #10
   1d540:	str	r2, [ip, #4]
   1d544:	ldr	lr, [lr, #4]
   1d548:	ubfx	lr, lr, #8, #10
   1d54c:	orr	r0, r0, lr
   1d550:	bfi	r2, r0, #8, #10
   1d554:	ubfx	r0, r2, #16, #8
   1d558:	str	r2, [ip, #4]
   1d55c:	orr	r2, r0, #4
   1d560:	strb	r2, [ip, #6]
   1d564:	ldr	r2, [r6, #12]
   1d568:	ldr	ip, [r6, #16]
   1d56c:	ldr	r0, [r6, #20]
   1d570:	str	r8, [ip, r4, lsl #2]
   1d574:	ldr	r3, [r2, r3]
   1d578:	add	r0, r0, fp
   1d57c:	str	r3, [r2, r5, lsl #2]
   1d580:	bl	19998 <__assert_fail@plt+0x84d0>
   1d584:	cmp	r0, #0
   1d588:	bne	1d2a0 <__assert_fail@plt+0xbdd8>
   1d58c:	b	1d408 <__assert_fail@plt+0xbf40>
   1d590:	lsl	r4, r7, #3
   1d594:	mov	r0, r6
   1d598:	add	r2, r2, r4
   1d59c:	ldm	r2, {r1, r2}
   1d5a0:	bl	196e4 <__assert_fail@plt+0x821c>
   1d5a4:	cmn	r0, #1
   1d5a8:	mov	r8, r0
   1d5ac:	beq	1d408 <__assert_fail@plt+0xbf40>
   1d5b0:	ldr	r3, [r6]
   1d5b4:	ubfx	r0, r9, #0, #10
   1d5b8:	mov	r1, r8
   1d5bc:	add	r2, r3, r8, lsl #3
   1d5c0:	add	r4, r3, r4
   1d5c4:	ldr	r3, [r2, #4]
   1d5c8:	bfi	r3, r0, #8, #10
   1d5cc:	str	r3, [r2, #4]
   1d5d0:	ldr	ip, [r4, #4]
   1d5d4:	ubfx	ip, ip, #8, #10
   1d5d8:	orr	r0, r0, ip
   1d5dc:	bfi	r3, r0, #8, #10
   1d5e0:	ubfx	r0, r3, #16, #8
   1d5e4:	str	r3, [r2, #4]
   1d5e8:	orr	r3, r0, #4
   1d5ec:	strb	r3, [r2, #6]
   1d5f0:	ldr	r3, [r6, #16]
   1d5f4:	ldr	r0, [r6, #20]
   1d5f8:	str	r7, [r3, r8, lsl #2]
   1d5fc:	add	r0, r0, r5
   1d600:	bl	19998 <__assert_fail@plt+0x84d0>
   1d604:	cmp	r0, #0
   1d608:	beq	1d408 <__assert_fail@plt+0xbf40>
   1d60c:	mov	r2, r8
   1d610:	mov	r1, r7
   1d614:	str	r9, [sp]
   1d618:	mov	r0, r6
   1d61c:	ldr	r3, [sp, #8]
   1d620:	bl	1d26c <__assert_fail@plt+0xbda4>
   1d624:	cmp	r0, #0
   1d628:	beq	1d378 <__assert_fail@plt+0xbeb0>
   1d62c:	b	1d40c <__assert_fail@plt+0xbf44>
   1d630:	ldr	r3, [r6, #12]
   1d634:	ldr	r2, [r3, r8, lsl #2]
   1d638:	str	r2, [r3, r4, lsl #2]
   1d63c:	b	1d40c <__assert_fail@plt+0xbf44>
   1d640:	mov	r1, r7
   1d644:	bl	19998 <__assert_fail@plt+0x84d0>
   1d648:	cmp	r0, #0
   1d64c:	movne	r0, #0
   1d650:	bne	1d40c <__assert_fail@plt+0xbf44>
   1d654:	b	1d408 <__assert_fail@plt+0xbf40>
   1d658:	ldr	r3, [r0, #36]	; 0x24
   1d65c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d660:	strd	r6, [sp, #8]
   1d664:	str	r8, [sp, #16]
   1d668:	str	lr, [sp, #20]
   1d66c:	cmn	r3, #-536870910	; 0xe0000002
   1d670:	bhi	1d838 <__assert_fail@plt+0xc370>
   1d674:	ldr	r2, [r0, #48]	; 0x30
   1d678:	lsl	r3, r3, #1
   1d67c:	mov	r4, r0
   1d680:	cmp	r3, r2
   1d684:	movge	r3, r2
   1d688:	cmp	r3, r1
   1d68c:	movge	r1, r3
   1d690:	bl	18c84 <__assert_fail@plt+0x77bc>
   1d694:	subs	r6, r0, #0
   1d698:	bne	1d704 <__assert_fail@plt+0xc23c>
   1d69c:	ldr	r0, [r4, #100]	; 0x64
   1d6a0:	cmp	r0, #0
   1d6a4:	beq	1d6c4 <__assert_fail@plt+0xc1fc>
   1d6a8:	ldr	r1, [r4, #36]	; 0x24
   1d6ac:	add	r1, r1, #1
   1d6b0:	lsl	r1, r1, #2
   1d6b4:	bl	2bb50 <__assert_fail@plt+0x1a688>
   1d6b8:	cmp	r0, #0
   1d6bc:	beq	1d838 <__assert_fail@plt+0xc370>
   1d6c0:	str	r0, [r4, #100]	; 0x64
   1d6c4:	ldrb	r3, [r4, #72]	; 0x48
   1d6c8:	ldr	r2, [r4, #80]	; 0x50
   1d6cc:	cmp	r3, #0
   1d6d0:	beq	1d71c <__assert_fail@plt+0xc254>
   1d6d4:	cmp	r2, #1
   1d6d8:	ble	1d7b4 <__assert_fail@plt+0xc2ec>
   1d6dc:	mov	r0, r4
   1d6e0:	ldrd	r4, [sp]
   1d6e4:	ldrd	r6, [sp, #8]
   1d6e8:	ldr	r8, [sp, #16]
   1d6ec:	ldr	lr, [sp, #20]
   1d6f0:	add	sp, sp, #24
   1d6f4:	b	19068 <__assert_fail@plt+0x7ba0>
   1d6f8:	mov	r1, r2
   1d6fc:	str	r1, [r4, #28]
   1d700:	str	r1, [r4, #32]
   1d704:	mov	r0, r6
   1d708:	ldrd	r4, [sp]
   1d70c:	ldrd	r6, [sp, #8]
   1d710:	ldr	r8, [sp, #16]
   1d714:	add	sp, sp, #20
   1d718:	pop	{pc}		; (ldr pc, [sp], #4)
   1d71c:	cmp	r2, #1
   1d720:	bgt	1d7a8 <__assert_fail@plt+0xc2e0>
   1d724:	ldr	r0, [r4, #64]	; 0x40
   1d728:	cmp	r0, #0
   1d72c:	beq	1d704 <__assert_fail@plt+0xc23c>
   1d730:	ldr	r2, [r4, #28]
   1d734:	ldr	r1, [r4, #36]	; 0x24
   1d738:	ldr	r3, [r4, #48]	; 0x30
   1d73c:	cmp	r1, r3
   1d740:	movge	r1, r3
   1d744:	cmp	r1, r2
   1d748:	ble	1d6f8 <__assert_fail@plt+0xc230>
   1d74c:	ldm	r4, {ip, lr}
   1d750:	add	r3, r2, #1
   1d754:	cmp	r1, r3
   1d758:	ldr	r5, [r4, #24]
   1d75c:	add	ip, ip, r2
   1d760:	ldrb	ip, [ip, r5]
   1d764:	ldrb	r0, [r0, ip]
   1d768:	strb	r0, [lr, r2]
   1d76c:	ble	1d6fc <__assert_fail@plt+0xc234>
   1d770:	ldr	r2, [r4]
   1d774:	ldr	r0, [r4, #24]
   1d778:	ldr	ip, [r4, #64]	; 0x40
   1d77c:	add	r2, r2, r3
   1d780:	ldrb	r0, [r2, r0]
   1d784:	ldr	r2, [r4, #4]
   1d788:	ldrb	r0, [ip, r0]
   1d78c:	strb	r0, [r2, r3]
   1d790:	add	r3, r3, #1
   1d794:	cmp	r1, r3
   1d798:	bne	1d770 <__assert_fail@plt+0xc2a8>
   1d79c:	str	r1, [r4, #28]
   1d7a0:	str	r1, [r4, #32]
   1d7a4:	b	1d704 <__assert_fail@plt+0xc23c>
   1d7a8:	mov	r0, r4
   1d7ac:	bl	18e8c <__assert_fail@plt+0x79c4>
   1d7b0:	b	1d704 <__assert_fail@plt+0xc23c>
   1d7b4:	ldr	r5, [r4, #28]
   1d7b8:	ldr	r7, [r4, #36]	; 0x24
   1d7bc:	ldr	r3, [r4, #48]	; 0x30
   1d7c0:	cmp	r7, r3
   1d7c4:	movge	r7, r3
   1d7c8:	cmp	r7, r5
   1d7cc:	ble	1d840 <__assert_fail@plt+0xc378>
   1d7d0:	bl	11348 <__ctype_toupper_loc@plt>
   1d7d4:	b	1d7f0 <__assert_fail@plt+0xc328>
   1d7d8:	ldr	r3, [r1, r3, lsl #2]
   1d7dc:	ldr	r2, [r4, #4]
   1d7e0:	strb	r3, [r2, r5]
   1d7e4:	add	r5, r5, #1
   1d7e8:	cmp	r7, r5
   1d7ec:	beq	1d82c <__assert_fail@plt+0xc364>
   1d7f0:	ldr	r3, [r4]
   1d7f4:	ldr	r1, [r4, #24]
   1d7f8:	ldr	r2, [r4, #64]	; 0x40
   1d7fc:	add	r3, r3, r5
   1d800:	ldrb	r3, [r3, r1]
   1d804:	cmp	r2, #0
   1d808:	ldr	r1, [r0]
   1d80c:	beq	1d7d8 <__assert_fail@plt+0xc310>
   1d810:	ldrb	r2, [r2, r3]
   1d814:	ldr	r3, [r4, #4]
   1d818:	ldr	r2, [r1, r2, lsl #2]
   1d81c:	strb	r2, [r3, r5]
   1d820:	add	r5, r5, #1
   1d824:	cmp	r7, r5
   1d828:	bne	1d7f0 <__assert_fail@plt+0xc328>
   1d82c:	str	r7, [r4, #28]
   1d830:	str	r7, [r4, #32]
   1d834:	b	1d704 <__assert_fail@plt+0xc23c>
   1d838:	mov	r6, #12
   1d83c:	b	1d704 <__assert_fail@plt+0xc23c>
   1d840:	mov	r7, r5
   1d844:	b	1d82c <__assert_fail@plt+0xc364>
   1d848:	ldr	r3, [r0, #36]	; 0x24
   1d84c:	strd	r4, [sp, #-16]!
   1d850:	mov	r4, r0
   1d854:	mov	r5, r1
   1d858:	str	r6, [sp, #8]
   1d85c:	str	lr, [sp, #12]
   1d860:	ldr	r6, [r0, #104]	; 0x68
   1d864:	cmp	r3, r1
   1d868:	bgt	1d8a8 <__assert_fail@plt+0xc3e0>
   1d86c:	ldr	r2, [r0, #48]	; 0x30
   1d870:	cmp	r3, r2
   1d874:	bge	1d8a8 <__assert_fail@plt+0xc3e0>
   1d878:	add	r1, r5, #1
   1d87c:	mov	r0, r4
   1d880:	bl	1d658 <__assert_fail@plt+0xc190>
   1d884:	cmp	r0, #0
   1d888:	bne	1d898 <__assert_fail@plt+0xc3d0>
   1d88c:	cmp	r6, r5
   1d890:	movge	r0, #0
   1d894:	blt	1d8c4 <__assert_fail@plt+0xc3fc>
   1d898:	ldrd	r4, [sp]
   1d89c:	ldr	r6, [sp, #8]
   1d8a0:	add	sp, sp, #12
   1d8a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8a8:	ldr	r3, [r4, #28]
   1d8ac:	cmp	r3, r5
   1d8b0:	bgt	1d88c <__assert_fail@plt+0xc3c4>
   1d8b4:	ldr	r2, [r4, #48]	; 0x30
   1d8b8:	cmp	r3, r2
   1d8bc:	bge	1d88c <__assert_fail@plt+0xc3c4>
   1d8c0:	b	1d878 <__assert_fail@plt+0xc3b0>
   1d8c4:	ldr	r3, [r4, #100]	; 0x64
   1d8c8:	sub	r2, r5, r6
   1d8cc:	add	r0, r6, #1
   1d8d0:	lsl	r2, r2, #2
   1d8d4:	mov	r1, #0
   1d8d8:	add	r0, r3, r0, lsl #2
   1d8dc:	bl	113e4 <memset@plt>
   1d8e0:	str	r5, [r4, #104]	; 0x68
   1d8e4:	mov	r0, #0
   1d8e8:	ldrd	r4, [sp]
   1d8ec:	ldr	r6, [sp, #8]
   1d8f0:	add	sp, sp, #12
   1d8f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d8fc:	mov	r5, r1
   1d900:	mov	r4, r2
   1d904:	strd	r6, [sp, #8]
   1d908:	mov	r6, r0
   1d90c:	strd	r8, [sp, #16]
   1d910:	mov	r8, r3
   1d914:	mov	r9, #1
   1d918:	str	sl, [sp, #24]
   1d91c:	str	lr, [sp, #28]
   1d920:	sub	sp, sp, #8
   1d924:	ldr	r7, [sp, #40]	; 0x28
   1d928:	ldr	r1, [r5, #4]
   1d92c:	cmp	r1, #0
   1d930:	ble	1d9a8 <__assert_fail@plt+0xc4e0>
   1d934:	subs	r2, r1, #1
   1d938:	ldr	ip, [r5, #8]
   1d93c:	moveq	r0, r2
   1d940:	beq	1d99c <__assert_fail@plt+0xc4d4>
   1d944:	mov	r0, #0
   1d948:	add	r3, r0, r2
   1d94c:	lsr	r3, r3, #1
   1d950:	ldr	lr, [ip, r3, lsl #2]
   1d954:	cmp	lr, r4
   1d958:	blt	1da2c <__assert_fail@plt+0xc564>
   1d95c:	cmp	r0, r3
   1d960:	bcs	1d99c <__assert_fail@plt+0xc4d4>
   1d964:	add	r2, r0, r3
   1d968:	lsr	r2, r2, #1
   1d96c:	ldr	lr, [ip, r2, lsl #2]
   1d970:	cmp	r4, lr
   1d974:	ble	1d98c <__assert_fail@plt+0xc4c4>
   1d978:	b	1da20 <__assert_fail@plt+0xc558>
   1d97c:	ldr	lr, [ip, r3, lsl #2]
   1d980:	cmp	r4, lr
   1d984:	bgt	1da2c <__assert_fail@plt+0xc564>
   1d988:	mov	r2, r3
   1d98c:	add	r3, r2, r0
   1d990:	cmp	r2, r0
   1d994:	lsr	r3, r3, #1
   1d998:	bhi	1d97c <__assert_fail@plt+0xc4b4>
   1d99c:	ldr	r3, [ip, r0, lsl #2]
   1d9a0:	cmp	r4, r3
   1d9a4:	beq	1da44 <__assert_fail@plt+0xc57c>
   1d9a8:	ldr	r3, [r6]
   1d9ac:	add	r2, r3, r4, lsl #3
   1d9b0:	ldrb	r2, [r2, #4]
   1d9b4:	cmp	r2, r7
   1d9b8:	bne	1d9c8 <__assert_fail@plt+0xc500>
   1d9bc:	ldr	r3, [r3, r4, lsl #3]
   1d9c0:	cmp	r3, r8
   1d9c4:	beq	1db3c <__assert_fail@plt+0xc674>
   1d9c8:	ldr	r3, [r5]
   1d9cc:	cmp	r3, #0
   1d9d0:	beq	1da64 <__assert_fail@plt+0xc59c>
   1d9d4:	cmp	r1, #0
   1d9d8:	ldr	sl, [r5, #8]
   1d9dc:	bne	1dabc <__assert_fail@plt+0xc5f4>
   1d9e0:	str	r4, [sl]
   1d9e4:	ldr	r3, [r5, #4]
   1d9e8:	add	r3, r3, #1
   1d9ec:	str	r3, [r5, #4]
   1d9f0:	ldr	r3, [r6, #20]
   1d9f4:	add	r4, r4, r4, lsl #1
   1d9f8:	lsl	r4, r4, #2
   1d9fc:	add	r3, r3, r4
   1da00:	ldr	r2, [r3, #4]
   1da04:	cmp	r2, #0
   1da08:	beq	1da44 <__assert_fail@plt+0xc57c>
   1da0c:	cmp	r2, #2
   1da10:	ldr	r3, [r3, #8]
   1da14:	beq	1da8c <__assert_fail@plt+0xc5c4>
   1da18:	ldr	r4, [r3]
   1da1c:	b	1d928 <__assert_fail@plt+0xc460>
   1da20:	mov	r0, r2
   1da24:	mov	r2, r3
   1da28:	mov	r3, r0
   1da2c:	add	r0, r3, #1
   1da30:	cmp	r0, r2
   1da34:	bcc	1d948 <__assert_fail@plt+0xc480>
   1da38:	ldr	r3, [ip, r0, lsl #2]
   1da3c:	cmp	r4, r3
   1da40:	bne	1d9a8 <__assert_fail@plt+0xc4e0>
   1da44:	mov	r0, #0
   1da48:	add	sp, sp, #8
   1da4c:	ldrd	r4, [sp]
   1da50:	ldrd	r6, [sp, #8]
   1da54:	ldrd	r8, [sp, #16]
   1da58:	ldr	sl, [sp, #24]
   1da5c:	add	sp, sp, #28
   1da60:	pop	{pc}		; (ldr pc, [sp], #4)
   1da64:	mov	r0, #4
   1da68:	str	r9, [r5]
   1da6c:	str	r9, [r5, #4]
   1da70:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1da74:	cmp	r0, #0
   1da78:	mov	r3, r0
   1da7c:	str	r0, [r5, #8]
   1da80:	beq	1db60 <__assert_fail@plt+0xc698>
   1da84:	str	r4, [r0]
   1da88:	b	1d9f0 <__assert_fail@plt+0xc528>
   1da8c:	mov	r1, r5
   1da90:	mov	r0, r6
   1da94:	ldr	r2, [r3, #4]
   1da98:	mov	r3, r8
   1da9c:	str	r7, [sp]
   1daa0:	bl	1d8f8 <__assert_fail@plt+0xc430>
   1daa4:	cmp	r0, #0
   1daa8:	bne	1da48 <__assert_fail@plt+0xc580>
   1daac:	ldr	r3, [r6, #20]
   1dab0:	add	r4, r3, r4
   1dab4:	ldr	r3, [r4, #8]
   1dab8:	b	1da18 <__assert_fail@plt+0xc550>
   1dabc:	cmp	r1, r3
   1dac0:	beq	1db70 <__assert_fail@plt+0xc6a8>
   1dac4:	ldr	r3, [sl]
   1dac8:	mov	r2, r1
   1dacc:	cmp	r4, r3
   1dad0:	bge	1db04 <__assert_fail@plt+0xc63c>
   1dad4:	cmp	r1, #0
   1dad8:	ble	1daf0 <__assert_fail@plt+0xc628>
   1dadc:	lsl	r2, r1, #2
   1dae0:	add	r0, sl, #4
   1dae4:	mov	r1, sl
   1dae8:	bl	111d4 <memmove@plt>
   1daec:	mov	r2, #0
   1daf0:	str	r4, [sl, r2, lsl #2]
   1daf4:	ldr	r3, [r5, #4]
   1daf8:	add	r3, r3, #1
   1dafc:	str	r3, [r5, #4]
   1db00:	b	1d9f0 <__assert_fail@plt+0xc528>
   1db04:	sub	r3, r1, #-1073741823	; 0xc0000001
   1db08:	ldr	r0, [sl, r3, lsl #2]
   1db0c:	lsl	r3, r3, #2
   1db10:	cmp	r4, r0
   1db14:	bge	1daf0 <__assert_fail@plt+0xc628>
   1db18:	add	r3, r3, #4
   1db1c:	add	r3, sl, r3
   1db20:	str	r0, [r3], #-4
   1db24:	sub	r1, r1, #1
   1db28:	ldr	r0, [r3, #-4]
   1db2c:	mov	r2, r1
   1db30:	cmp	r4, r0
   1db34:	blt	1db20 <__assert_fail@plt+0xc658>
   1db38:	b	1daf0 <__assert_fail@plt+0xc628>
   1db3c:	cmp	r7, #9
   1db40:	bne	1da44 <__assert_fail@plt+0xc57c>
   1db44:	mov	r1, r4
   1db48:	mov	r0, r5
   1db4c:	bl	19998 <__assert_fail@plt+0x84d0>
   1db50:	cmp	r0, #0
   1db54:	bne	1da44 <__assert_fail@plt+0xc57c>
   1db58:	mov	r0, #12
   1db5c:	b	1da48 <__assert_fail@plt+0xc580>
   1db60:	mov	r0, #12
   1db64:	str	r3, [r5]
   1db68:	str	r3, [r5, #4]
   1db6c:	b	1da48 <__assert_fail@plt+0xc580>
   1db70:	lsl	r3, r1, #1
   1db74:	mov	r0, sl
   1db78:	lsl	r1, r1, #3
   1db7c:	str	r3, [r5]
   1db80:	bl	2bb50 <__assert_fail@plt+0x1a688>
   1db84:	subs	sl, r0, #0
   1db88:	beq	1db58 <__assert_fail@plt+0xc690>
   1db8c:	str	sl, [r5, #8]
   1db90:	ldr	r1, [r5, #4]
   1db94:	b	1dac4 <__assert_fail@plt+0xc5fc>
   1db98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1db9c:	mov	r5, r2
   1dba0:	mov	r4, r3
   1dba4:	strd	r6, [sp, #8]
   1dba8:	mov	r6, #0
   1dbac:	mov	r7, r0
   1dbb0:	strd	r8, [sp, #16]
   1dbb4:	mov	r8, r1
   1dbb8:	ldr	r1, [r1, #4]
   1dbbc:	strd	sl, [sp, #24]
   1dbc0:	str	lr, [sp, #32]
   1dbc4:	sub	sp, sp, #28
   1dbc8:	lsl	r0, r1, #2
   1dbcc:	str	r1, [sp, #12]
   1dbd0:	str	r6, [sp, #16]
   1dbd4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1dbd8:	cmp	r0, r6
   1dbdc:	str	r0, [sp, #20]
   1dbe0:	beq	1dce0 <__assert_fail@plt+0xc818>
   1dbe4:	ldr	r3, [r8, #4]
   1dbe8:	add	r9, sp, #12
   1dbec:	cmp	r3, r6
   1dbf0:	ble	1dc88 <__assert_fail@plt+0xc7c0>
   1dbf4:	ldr	r3, [r8, #8]
   1dbf8:	ldr	r1, [r7, #24]
   1dbfc:	ldr	r2, [r3, r6, lsl #2]
   1dc00:	add	r3, r2, r2, lsl #1
   1dc04:	add	r1, r1, r3, lsl #2
   1dc08:	ldr	fp, [r1, #4]
   1dc0c:	cmp	fp, #0
   1dc10:	ble	1dca8 <__assert_fail@plt+0xc7e0>
   1dc14:	ldr	ip, [r1, #8]
   1dc18:	mov	r3, #0
   1dc1c:	ldr	sl, [r7]
   1dc20:	sub	ip, ip, #4
   1dc24:	b	1dc30 <__assert_fail@plt+0xc768>
   1dc28:	cmp	fp, r3
   1dc2c:	beq	1dca8 <__assert_fail@plt+0xc7e0>
   1dc30:	ldr	r0, [ip, #4]!
   1dc34:	add	r3, r3, #1
   1dc38:	add	lr, sl, r0, lsl #3
   1dc3c:	ldrb	lr, [lr, #4]
   1dc40:	cmp	r4, lr
   1dc44:	bne	1dc28 <__assert_fail@plt+0xc760>
   1dc48:	ldr	lr, [sl, r0, lsl #3]
   1dc4c:	cmp	r5, lr
   1dc50:	bne	1dc28 <__assert_fail@plt+0xc760>
   1dc54:	cmn	r0, #1
   1dc58:	beq	1dca8 <__assert_fail@plt+0xc7e0>
   1dc5c:	mov	r3, r5
   1dc60:	mov	r1, r9
   1dc64:	str	r4, [sp]
   1dc68:	mov	r0, r7
   1dc6c:	bl	1d8f8 <__assert_fail@plt+0xc430>
   1dc70:	subs	sl, r0, #0
   1dc74:	bne	1dcb8 <__assert_fail@plt+0xc7f0>
   1dc78:	ldr	r3, [r8, #4]
   1dc7c:	add	r6, r6, #1
   1dc80:	cmp	r3, r6
   1dc84:	bgt	1dbf4 <__assert_fail@plt+0xc72c>
   1dc88:	ldr	r0, [r8, #8]
   1dc8c:	mov	sl, #0
   1dc90:	bl	14484 <__assert_fail@plt+0x2fbc>
   1dc94:	ldr	r1, [r9, #8]
   1dc98:	ldrd	r2, [sp, #12]
   1dc9c:	strd	r2, [r8]
   1dca0:	str	r1, [r8, #8]
   1dca4:	b	1dcc0 <__assert_fail@plt+0xc7f8>
   1dca8:	mov	r0, r9
   1dcac:	bl	19d94 <__assert_fail@plt+0x88cc>
   1dcb0:	subs	sl, r0, #0
   1dcb4:	beq	1dc78 <__assert_fail@plt+0xc7b0>
   1dcb8:	ldr	r0, [sp, #20]
   1dcbc:	bl	14484 <__assert_fail@plt+0x2fbc>
   1dcc0:	mov	r0, sl
   1dcc4:	add	sp, sp, #28
   1dcc8:	ldrd	r4, [sp]
   1dccc:	ldrd	r6, [sp, #8]
   1dcd0:	ldrd	r8, [sp, #16]
   1dcd4:	ldrd	sl, [sp, #24]
   1dcd8:	add	sp, sp, #32
   1dcdc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dce0:	mov	sl, #12
   1dce4:	b	1dcc0 <__assert_fail@plt+0xc7f8>
   1dce8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dcec:	mov	r4, #0
   1dcf0:	strd	r6, [sp, #8]
   1dcf4:	mov	r6, r0
   1dcf8:	add	r0, r1, r1, lsl #1
   1dcfc:	strd	r8, [sp, #16]
   1dd00:	strd	sl, [sp, #24]
   1dd04:	str	lr, [sp, #32]
   1dd08:	sub	sp, sp, #44	; 0x2c
   1dd0c:	str	r1, [sp, #4]
   1dd10:	ldr	r1, [r6, #28]
   1dd14:	str	r3, [sp, #16]
   1dd18:	str	r4, [sp, #28]
   1dd1c:	str	r4, [sp, #32]
   1dd20:	str	r4, [sp, #36]	; 0x24
   1dd24:	add	r9, r1, r0, lsl #2
   1dd28:	ldr	sl, [r9, #4]
   1dd2c:	str	r9, [sp, #20]
   1dd30:	cmp	sl, r4
   1dd34:	ble	1e214 <__assert_fail@plt+0xcd4c>
   1dd38:	str	r2, [sp, #8]
   1dd3c:	ldr	r1, [r9, #8]
   1dd40:	ldr	r3, [sp, #4]
   1dd44:	ldr	r2, [r1, r4, lsl #2]
   1dd48:	cmp	r3, r2
   1dd4c:	beq	1df88 <__assert_fail@plt+0xcac0>
   1dd50:	ldr	r3, [r6]
   1dd54:	add	r3, r3, r2, lsl #3
   1dd58:	ldrb	r3, [r3, #4]
   1dd5c:	tst	r3, #8
   1dd60:	beq	1df88 <__assert_fail@plt+0xcac0>
   1dd64:	ldr	r3, [r6, #20]
   1dd68:	add	r2, r2, r2, lsl #1
   1dd6c:	lsl	r2, r2, #2
   1dd70:	add	r3, r3, r2
   1dd74:	ldmib	r3, {r0, r3}
   1dd78:	cmp	r0, #1
   1dd7c:	mvnle	r7, #0
   1dd80:	ldrgt	r7, [r3, #4]
   1dd84:	sub	lr, sl, #1
   1dd88:	cmp	lr, #0
   1dd8c:	mov	ip, lr
   1dd90:	ldr	r5, [r3]
   1dd94:	moveq	r8, lr
   1dd98:	beq	1ddf8 <__assert_fail@plt+0xc930>
   1dd9c:	mov	r0, lr
   1dda0:	mov	r8, #0
   1dda4:	add	r3, r0, r8
   1dda8:	lsr	r3, r3, #1
   1ddac:	ldr	fp, [r1, r3, lsl #2]
   1ddb0:	cmp	r5, fp
   1ddb4:	bgt	1e11c <__assert_fail@plt+0xcc54>
   1ddb8:	cmp	r3, r8
   1ddbc:	bls	1ddf8 <__assert_fail@plt+0xc930>
   1ddc0:	add	r0, r3, r8
   1ddc4:	lsr	r0, r0, #1
   1ddc8:	ldr	fp, [r1, r0, lsl #2]
   1ddcc:	cmp	r5, fp
   1ddd0:	ble	1dde8 <__assert_fail@plt+0xc920>
   1ddd4:	b	1e110 <__assert_fail@plt+0xcc48>
   1ddd8:	ldr	fp, [r1, r3, lsl #2]
   1dddc:	cmp	r5, fp
   1dde0:	bgt	1e11c <__assert_fail@plt+0xcc54>
   1dde4:	mov	r0, r3
   1dde8:	add	r3, r8, r0
   1ddec:	cmp	r8, r0
   1ddf0:	lsr	r3, r3, #1
   1ddf4:	bcc	1ddd8 <__assert_fail@plt+0xc910>
   1ddf8:	ldr	r3, [r1, r8, lsl #2]
   1ddfc:	cmp	r5, r3
   1de00:	beq	1de90 <__assert_fail@plt+0xc9c8>
   1de04:	ldr	r3, [sp, #8]
   1de08:	ldr	r0, [r3, #4]
   1de0c:	cmp	r0, #0
   1de10:	ble	1de90 <__assert_fail@plt+0xc9c8>
   1de14:	subs	r0, r0, #1
   1de18:	ldr	fp, [r3, #8]
   1de1c:	moveq	r8, r0
   1de20:	beq	1de84 <__assert_fail@plt+0xc9bc>
   1de24:	mov	r8, #0
   1de28:	str	r2, [sp, #12]
   1de2c:	add	r3, r0, r8
   1de30:	lsr	r3, r3, #1
   1de34:	ldr	r2, [fp, r3, lsl #2]
   1de38:	cmp	r5, r2
   1de3c:	bgt	1e1bc <__assert_fail@plt+0xccf4>
   1de40:	cmp	r3, r8
   1de44:	bls	1de80 <__assert_fail@plt+0xc9b8>
   1de48:	add	r0, r3, r8
   1de4c:	lsr	r0, r0, #1
   1de50:	ldr	r2, [fp, r0, lsl #2]
   1de54:	cmp	r5, r2
   1de58:	ble	1de70 <__assert_fail@plt+0xc9a8>
   1de5c:	b	1e1b0 <__assert_fail@plt+0xcce8>
   1de60:	ldr	r2, [fp, r3, lsl #2]
   1de64:	cmp	r5, r2
   1de68:	bgt	1e1bc <__assert_fail@plt+0xccf4>
   1de6c:	mov	r0, r3
   1de70:	add	r3, r8, r0
   1de74:	cmp	r8, r0
   1de78:	lsr	r3, r3, #1
   1de7c:	bcc	1de60 <__assert_fail@plt+0xc998>
   1de80:	ldr	r2, [sp, #12]
   1de84:	ldr	r3, [fp, r8, lsl #2]
   1de88:	cmp	r5, r3
   1de8c:	beq	1e18c <__assert_fail@plt+0xccc4>
   1de90:	cmp	r7, #0
   1de94:	ble	1df88 <__assert_fail@plt+0xcac0>
   1de98:	cmp	lr, #0
   1de9c:	movne	lr, #0
   1dea0:	beq	1def8 <__assert_fail@plt+0xca30>
   1dea4:	add	r3, ip, lr
   1dea8:	lsr	r3, r3, #1
   1deac:	ldr	r0, [r1, r3, lsl #2]
   1deb0:	cmp	r0, r7
   1deb4:	blt	1e1d8 <__assert_fail@plt+0xcd10>
   1deb8:	cmp	r3, lr
   1debc:	bls	1def8 <__assert_fail@plt+0xca30>
   1dec0:	add	ip, r3, lr
   1dec4:	lsr	ip, ip, #1
   1dec8:	ldr	r0, [r1, ip, lsl #2]
   1decc:	cmp	r7, r0
   1ded0:	ble	1dee8 <__assert_fail@plt+0xca20>
   1ded4:	b	1e1cc <__assert_fail@plt+0xcd04>
   1ded8:	ldr	r0, [r1, r3, lsl #2]
   1dedc:	cmp	r0, r7
   1dee0:	blt	1e1d8 <__assert_fail@plt+0xcd10>
   1dee4:	mov	ip, r3
   1dee8:	add	r3, lr, ip
   1deec:	cmp	lr, ip
   1def0:	lsr	r3, r3, #1
   1def4:	bcc	1ded8 <__assert_fail@plt+0xca10>
   1def8:	ldr	r3, [r1, lr, lsl #2]
   1defc:	cmp	r3, r7
   1df00:	beq	1df88 <__assert_fail@plt+0xcac0>
   1df04:	ldr	r3, [sp, #8]
   1df08:	ldr	r1, [r3, #4]
   1df0c:	cmp	r1, #0
   1df10:	ble	1df88 <__assert_fail@plt+0xcac0>
   1df14:	subs	r1, r1, #1
   1df18:	ldr	ip, [r3, #8]
   1df1c:	moveq	r0, r1
   1df20:	beq	1df7c <__assert_fail@plt+0xcab4>
   1df24:	mov	r0, #0
   1df28:	add	r3, r1, r0
   1df2c:	lsr	r3, r3, #1
   1df30:	ldr	lr, [ip, r3, lsl #2]
   1df34:	cmp	lr, r7
   1df38:	blt	1e1f4 <__assert_fail@plt+0xcd2c>
   1df3c:	cmp	r3, r0
   1df40:	bls	1df7c <__assert_fail@plt+0xcab4>
   1df44:	add	r1, r3, r0
   1df48:	lsr	r1, r1, #1
   1df4c:	ldr	lr, [ip, r1, lsl #2]
   1df50:	cmp	r7, lr
   1df54:	ble	1df6c <__assert_fail@plt+0xcaa4>
   1df58:	b	1e1e8 <__assert_fail@plt+0xcd20>
   1df5c:	ldr	lr, [ip, r3, lsl #2]
   1df60:	cmp	lr, r7
   1df64:	blt	1e1f4 <__assert_fail@plt+0xcd2c>
   1df68:	mov	r1, r3
   1df6c:	add	r3, r0, r1
   1df70:	cmp	r0, r1
   1df74:	lsr	r3, r3, #1
   1df78:	bcc	1df5c <__assert_fail@plt+0xca94>
   1df7c:	ldr	r3, [ip, r0, lsl #2]
   1df80:	cmp	r3, r7
   1df84:	beq	1e18c <__assert_fail@plt+0xccc4>
   1df88:	add	r4, r4, #1
   1df8c:	cmp	r4, sl
   1df90:	blt	1dd3c <__assert_fail@plt+0xc874>
   1df94:	cmp	sl, #0
   1df98:	ldr	r5, [sp, #8]
   1df9c:	ldr	r0, [sp, #36]	; 0x24
   1dfa0:	ble	1e0cc <__assert_fail@plt+0xcc04>
   1dfa4:	mov	r1, #0
   1dfa8:	ldr	r4, [sp, #20]
   1dfac:	ldr	ip, [r4, #8]
   1dfb0:	sub	ip, ip, #4
   1dfb4:	ldr	r2, [sp, #32]
   1dfb8:	ldr	lr, [ip, #4]!
   1dfbc:	cmp	r2, #0
   1dfc0:	ble	1e034 <__assert_fail@plt+0xcb6c>
   1dfc4:	subs	r2, r2, #1
   1dfc8:	moveq	r7, r2
   1dfcc:	beq	1e028 <__assert_fail@plt+0xcb60>
   1dfd0:	mov	r7, #0
   1dfd4:	add	r3, r2, r7
   1dfd8:	lsr	r3, r3, #1
   1dfdc:	ldr	r6, [r0, r3, lsl #2]
   1dfe0:	cmp	r6, lr
   1dfe4:	blt	1e100 <__assert_fail@plt+0xcc38>
   1dfe8:	cmp	r3, r7
   1dfec:	bls	1e028 <__assert_fail@plt+0xcb60>
   1dff0:	add	r2, r3, r7
   1dff4:	lsr	r2, r2, #1
   1dff8:	ldr	r6, [r0, r2, lsl #2]
   1dffc:	cmp	lr, r6
   1e000:	ble	1e018 <__assert_fail@plt+0xcb50>
   1e004:	b	1e0f4 <__assert_fail@plt+0xcc2c>
   1e008:	ldr	r6, [r0, r3, lsl #2]
   1e00c:	cmp	lr, r6
   1e010:	bgt	1e100 <__assert_fail@plt+0xcc38>
   1e014:	mov	r2, r3
   1e018:	add	r3, r7, r2
   1e01c:	cmp	r7, r2
   1e020:	lsr	r3, r3, #1
   1e024:	bcc	1e008 <__assert_fail@plt+0xcb40>
   1e028:	ldr	r3, [r0, r7, lsl #2]
   1e02c:	cmp	lr, r3
   1e030:	beq	1e0c0 <__assert_fail@plt+0xcbf8>
   1e034:	ldr	r7, [r5, #4]
   1e038:	cmp	r7, #0
   1e03c:	ble	1e0c0 <__assert_fail@plt+0xcbf8>
   1e040:	sub	r8, r7, #1
   1e044:	ldr	r3, [r5, #8]
   1e048:	cmp	r8, #0
   1e04c:	mov	r9, r8
   1e050:	moveq	r6, r8
   1e054:	beq	1e0b0 <__assert_fail@plt+0xcbe8>
   1e058:	mov	r6, #0
   1e05c:	add	r2, r9, r6
   1e060:	lsr	r2, r2, #1
   1e064:	ldr	fp, [r3, r2, lsl #2]
   1e068:	cmp	lr, fp
   1e06c:	bgt	1e17c <__assert_fail@plt+0xccb4>
   1e070:	cmp	r2, r6
   1e074:	bls	1e0b0 <__assert_fail@plt+0xcbe8>
   1e078:	add	r9, r2, r6
   1e07c:	lsr	r9, r9, #1
   1e080:	ldr	fp, [r3, r9, lsl #2]
   1e084:	cmp	lr, fp
   1e088:	ble	1e0a0 <__assert_fail@plt+0xcbd8>
   1e08c:	b	1e170 <__assert_fail@plt+0xcca8>
   1e090:	ldr	fp, [r3, r2, lsl #2]
   1e094:	cmp	lr, fp
   1e098:	bgt	1e17c <__assert_fail@plt+0xccb4>
   1e09c:	mov	r9, r2
   1e0a0:	add	r2, r6, r9
   1e0a4:	cmp	r6, r9
   1e0a8:	lsr	r2, r2, #1
   1e0ac:	bcc	1e090 <__assert_fail@plt+0xcbc8>
   1e0b0:	ldr	r2, [r3, r6, lsl #2]
   1e0b4:	add	r3, r3, r6, lsl #2
   1e0b8:	cmp	lr, r2
   1e0bc:	beq	1e12c <__assert_fail@plt+0xcc64>
   1e0c0:	add	r1, r1, #1
   1e0c4:	cmp	r1, sl
   1e0c8:	blt	1dfb4 <__assert_fail@plt+0xcaec>
   1e0cc:	mov	r7, #0
   1e0d0:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e0d4:	mov	r0, r7
   1e0d8:	add	sp, sp, #44	; 0x2c
   1e0dc:	ldrd	r4, [sp]
   1e0e0:	ldrd	r6, [sp, #8]
   1e0e4:	ldrd	r8, [sp, #16]
   1e0e8:	ldrd	sl, [sp, #24]
   1e0ec:	add	sp, sp, #32
   1e0f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0f4:	mov	r6, r2
   1e0f8:	mov	r2, r3
   1e0fc:	mov	r3, r6
   1e100:	add	r7, r3, #1
   1e104:	cmp	r7, r2
   1e108:	bcc	1dfd4 <__assert_fail@plt+0xcb0c>
   1e10c:	b	1e028 <__assert_fail@plt+0xcb60>
   1e110:	mov	r8, r3
   1e114:	mov	r3, r0
   1e118:	mov	r0, r8
   1e11c:	add	r8, r3, #1
   1e120:	cmp	r0, r8
   1e124:	bhi	1dda4 <__assert_fail@plt+0xc8dc>
   1e128:	b	1ddf8 <__assert_fail@plt+0xc930>
   1e12c:	cmp	r6, r7
   1e130:	mov	r2, r6
   1e134:	movlt	r7, #0
   1e138:	movge	r7, #1
   1e13c:	orrs	lr, r7, r6, lsr #31
   1e140:	bne	1e0c0 <__assert_fail@plt+0xcbf8>
   1e144:	cmp	r6, r8
   1e148:	str	r8, [r5, #4]
   1e14c:	bge	1e168 <__assert_fail@plt+0xcca0>
   1e150:	ldr	lr, [r3, #4]
   1e154:	add	r2, r2, #1
   1e158:	str	lr, [r3], #4
   1e15c:	ldr	lr, [r5, #4]
   1e160:	cmp	r2, lr
   1e164:	blt	1e150 <__assert_fail@plt+0xcc88>
   1e168:	ldr	sl, [r4, #4]
   1e16c:	b	1e0c0 <__assert_fail@plt+0xcbf8>
   1e170:	mov	r6, r2
   1e174:	mov	r2, r9
   1e178:	mov	r9, r6
   1e17c:	add	r6, r2, #1
   1e180:	cmp	r6, r9
   1e184:	bcc	1e05c <__assert_fail@plt+0xcb94>
   1e188:	b	1e0b0 <__assert_fail@plt+0xcbe8>
   1e18c:	ldr	r3, [r6, #28]
   1e190:	add	r0, sp, #28
   1e194:	ldr	r1, [sp, #16]
   1e198:	add	r2, r3, r2
   1e19c:	bl	19bac <__assert_fail@plt+0x86e4>
   1e1a0:	cmp	r0, #0
   1e1a4:	bne	1e204 <__assert_fail@plt+0xcd3c>
   1e1a8:	ldr	sl, [r9, #4]
   1e1ac:	b	1df88 <__assert_fail@plt+0xcac0>
   1e1b0:	mov	r8, r0
   1e1b4:	mov	r0, r3
   1e1b8:	mov	r3, r8
   1e1bc:	add	r8, r3, #1
   1e1c0:	cmp	r8, r0
   1e1c4:	bcc	1de2c <__assert_fail@plt+0xc964>
   1e1c8:	b	1de80 <__assert_fail@plt+0xc9b8>
   1e1cc:	mov	r0, ip
   1e1d0:	mov	ip, r3
   1e1d4:	mov	r3, r0
   1e1d8:	add	lr, r3, #1
   1e1dc:	cmp	lr, ip
   1e1e0:	bcc	1dea4 <__assert_fail@plt+0xc9dc>
   1e1e4:	b	1def8 <__assert_fail@plt+0xca30>
   1e1e8:	mov	r0, r1
   1e1ec:	mov	r1, r3
   1e1f0:	mov	r3, r0
   1e1f4:	add	r0, r3, #1
   1e1f8:	cmp	r0, r1
   1e1fc:	bcc	1df28 <__assert_fail@plt+0xca60>
   1e200:	b	1df7c <__assert_fail@plt+0xcab4>
   1e204:	mov	r7, r0
   1e208:	ldr	r0, [sp, #36]	; 0x24
   1e20c:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e210:	b	1e0d4 <__assert_fail@plt+0xcc0c>
   1e214:	mov	r0, r4
   1e218:	b	1e0cc <__assert_fail@plt+0xcc04>
   1e21c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e220:	mov	r5, r2
   1e224:	ldr	r2, [r1, #20]
   1e228:	strd	r6, [sp, #8]
   1e22c:	mov	r7, r1
   1e230:	strd	r8, [sp, #16]
   1e234:	add	r9, r5, r5, lsl #1
   1e238:	strd	sl, [sp, #24]
   1e23c:	lsl	r9, r9, #2
   1e240:	str	lr, [sp, #32]
   1e244:	sub	sp, sp, #44	; 0x2c
   1e248:	add	r2, r2, r9
   1e24c:	str	r0, [sp, #16]
   1e250:	ldr	r2, [r2, #4]
   1e254:	str	r3, [sp, #20]
   1e258:	add	r3, r2, #1
   1e25c:	lsl	r0, r3, #2
   1e260:	str	r3, [sp, #8]
   1e264:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1e268:	subs	r4, r0, #0
   1e26c:	beq	1e588 <__assert_fail@plt+0xd0c0>
   1e270:	ldr	ip, [r7]
   1e274:	lsl	r6, r5, #3
   1e278:	mov	r3, #65280	; 0xff00
   1e27c:	movt	r3, #3
   1e280:	str	r5, [r4]
   1e284:	mvn	r8, #0
   1e288:	ldr	r1, [r7, #24]
   1e28c:	add	r0, ip, r6
   1e290:	ldr	lr, [r0, #4]
   1e294:	add	r2, r1, r9
   1e298:	str	r8, [r2, #4]
   1e29c:	and	r3, r3, lr
   1e2a0:	cmp	r3, #0
   1e2a4:	beq	1e2d4 <__assert_fail@plt+0xce0c>
   1e2a8:	ldr	r3, [r7, #20]
   1e2ac:	add	r3, r3, r9
   1e2b0:	ldr	r8, [r3, #4]
   1e2b4:	cmp	r8, #0
   1e2b8:	beq	1e54c <__assert_fail@plt+0xd084>
   1e2bc:	ldr	r3, [r3, #8]
   1e2c0:	ldr	r3, [r3]
   1e2c4:	add	ip, ip, r3, lsl #3
   1e2c8:	ldrb	r3, [ip, #6]
   1e2cc:	tst	r3, #4
   1e2d0:	beq	1e554 <__assert_fail@plt+0xd08c>
   1e2d4:	ldrb	r3, [r0, #4]
   1e2d8:	tst	r3, #8
   1e2dc:	beq	1e478 <__assert_fail@plt+0xcfb0>
   1e2e0:	ldr	ip, [r7, #20]
   1e2e4:	add	r3, ip, r9
   1e2e8:	ldr	r2, [r3, #4]
   1e2ec:	cmp	r2, #0
   1e2f0:	ble	1e478 <__assert_fail@plt+0xcfb0>
   1e2f4:	mov	r2, #0
   1e2f8:	mov	sl, #1
   1e2fc:	mov	r8, r2
   1e300:	str	r2, [sp, #12]
   1e304:	ldr	r3, [r3, #8]
   1e308:	ldr	r2, [r3, r8, lsl #2]
   1e30c:	add	r6, r2, r2, lsl #1
   1e310:	lsl	r6, r6, #2
   1e314:	add	r0, r1, r6
   1e318:	ldr	r3, [r0, #4]
   1e31c:	cmn	r3, #1
   1e320:	moveq	r3, #1
   1e324:	streq	r3, [sp, #12]
   1e328:	beq	1e440 <__assert_fail@plt+0xcf78>
   1e32c:	cmp	r3, #0
   1e330:	beq	1e4e0 <__assert_fail@plt+0xd018>
   1e334:	ldrd	r2, [r0]
   1e338:	strd	r2, [sp, #28]
   1e33c:	ldr	r3, [r0, #8]
   1e340:	str	r3, [sp, #36]	; 0x24
   1e344:	ldr	r2, [sp, #32]
   1e348:	cmp	r2, #0
   1e34c:	mov	r3, r2
   1e350:	beq	1e428 <__assert_fail@plt+0xcf60>
   1e354:	ldr	r1, [sp, #8]
   1e358:	add	fp, sl, r2, lsl #1
   1e35c:	cmp	r1, fp
   1e360:	blt	1e514 <__assert_fail@plt+0xd04c>
   1e364:	cmp	sl, #0
   1e368:	beq	1e590 <__assert_fail@plt+0xd0c8>
   1e36c:	sub	r2, r2, #1
   1e370:	sub	r5, sl, #1
   1e374:	ldr	r1, [sp, #36]	; 0x24
   1e378:	cmp	r2, #0
   1e37c:	cmpge	r5, #0
   1e380:	mvn	r0, r2
   1e384:	blt	1e3d0 <__assert_fail@plt+0xcf08>
   1e388:	mov	r3, r5
   1e38c:	ldr	lr, [r4, r3, lsl #2]
   1e390:	ldr	ip, [r1, r2, lsl #2]
   1e394:	cmp	lr, ip
   1e398:	subeq	r2, r2, #1
   1e39c:	subeq	r3, r3, #1
   1e3a0:	mvneq	r0, r2
   1e3a4:	beq	1e3c0 <__assert_fail@plt+0xcef8>
   1e3a8:	subge	r3, r3, #1
   1e3ac:	bge	1e3c0 <__assert_fail@plt+0xcef8>
   1e3b0:	sub	r2, r2, #1
   1e3b4:	sub	fp, fp, #1
   1e3b8:	mvn	r0, r2
   1e3bc:	str	ip, [r4, fp, lsl #2]
   1e3c0:	mvn	ip, r3
   1e3c4:	lsr	ip, ip, #31
   1e3c8:	ands	ip, ip, r0, lsr #31
   1e3cc:	bne	1e38c <__assert_fail@plt+0xcec4>
   1e3d0:	cmp	r2, #0
   1e3d4:	blt	1e3ec <__assert_fail@plt+0xcf24>
   1e3d8:	add	r2, r2, #1
   1e3dc:	sub	fp, fp, r2
   1e3e0:	lsl	r2, r2, #2
   1e3e4:	add	r0, r4, fp, lsl #2
   1e3e8:	bl	11204 <memcpy@plt>
   1e3ec:	ldr	r3, [sp, #32]
   1e3f0:	add	r3, sl, r3, lsl #1
   1e3f4:	subs	r2, r3, fp
   1e3f8:	sub	r3, r3, #1
   1e3fc:	beq	1e428 <__assert_fail@plt+0xcf60>
   1e400:	add	sl, sl, r2
   1e404:	ldr	ip, [r4, r3, lsl #2]
   1e408:	add	r1, r5, r2
   1e40c:	ldr	r0, [r4, r5, lsl #2]
   1e410:	cmp	ip, r0
   1e414:	ble	1e4c0 <__assert_fail@plt+0xcff8>
   1e418:	subs	r2, r2, #1
   1e41c:	sub	r3, r3, #1
   1e420:	str	ip, [r4, r1, lsl #2]
   1e424:	bne	1e404 <__assert_fail@plt+0xcf3c>
   1e428:	ldr	r1, [r7, #24]
   1e42c:	add	r6, r1, r6
   1e430:	ldr	r3, [r6, #4]
   1e434:	cmp	r3, #0
   1e438:	beq	1e4f8 <__assert_fail@plt+0xd030>
   1e43c:	ldr	ip, [r7, #20]
   1e440:	add	r3, ip, r9
   1e444:	add	r8, r8, #1
   1e448:	ldr	r2, [r3, #4]
   1e44c:	cmp	r2, r8
   1e450:	bgt	1e304 <__assert_fail@plt+0xce3c>
   1e454:	ldr	r0, [sp, #12]
   1e458:	add	r2, r1, r9
   1e45c:	ldr	r3, [sp, #20]
   1e460:	eor	r3, r3, #1
   1e464:	tst	r0, r3
   1e468:	beq	1e480 <__assert_fail@plt+0xcfb8>
   1e46c:	mov	r3, #0
   1e470:	str	r3, [r2, #4]
   1e474:	b	1e490 <__assert_fail@plt+0xcfc8>
   1e478:	mov	sl, #1
   1e47c:	add	r2, r1, r9
   1e480:	ldr	r3, [sp, #8]
   1e484:	str	r3, [r1, r9]
   1e488:	str	sl, [r2, #4]
   1e48c:	str	r4, [r2, #8]
   1e490:	ldr	r2, [sp, #8]
   1e494:	mov	r0, #0
   1e498:	ldr	r3, [sp, #16]
   1e49c:	stm	r3, {r2, sl}
   1e4a0:	str	r4, [r3, #8]
   1e4a4:	add	sp, sp, #44	; 0x2c
   1e4a8:	ldrd	r4, [sp]
   1e4ac:	ldrd	r6, [sp, #8]
   1e4b0:	ldrd	r8, [sp, #16]
   1e4b4:	ldrd	sl, [sp, #24]
   1e4b8:	add	sp, sp, #32
   1e4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4c0:	subs	r5, r5, #1
   1e4c4:	str	r0, [r4, r1, lsl #2]
   1e4c8:	bpl	1e404 <__assert_fail@plt+0xcf3c>
   1e4cc:	lsl	r2, r2, #2
   1e4d0:	mov	r0, r4
   1e4d4:	add	r1, r4, fp, lsl #2
   1e4d8:	bl	11204 <memcpy@plt>
   1e4dc:	b	1e428 <__assert_fail@plt+0xcf60>
   1e4e0:	mov	r1, r7
   1e4e4:	add	r0, sp, #28
   1e4e8:	bl	1e21c <__assert_fail@plt+0xcd54>
   1e4ec:	cmp	r0, #0
   1e4f0:	beq	1e344 <__assert_fail@plt+0xce7c>
   1e4f4:	b	1e4a4 <__assert_fail@plt+0xcfdc>
   1e4f8:	mov	r3, #1
   1e4fc:	ldr	r0, [sp, #36]	; 0x24
   1e500:	str	r3, [sp, #12]
   1e504:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e508:	ldr	ip, [r7, #20]
   1e50c:	ldr	r1, [r7, #24]
   1e510:	b	1e440 <__assert_fail@plt+0xcf78>
   1e514:	add	r2, r1, r2
   1e518:	mov	r0, r4
   1e51c:	lsl	r3, r2, #1
   1e520:	lsl	r1, r2, #3
   1e524:	str	r3, [sp, #8]
   1e528:	bl	2bb50 <__assert_fail@plt+0x1a688>
   1e52c:	subs	r4, r0, #0
   1e530:	beq	1e588 <__assert_fail@plt+0xd0c0>
   1e534:	cmp	sl, #0
   1e538:	ldreq	r3, [sp, #32]
   1e53c:	beq	1e590 <__assert_fail@plt+0xd0c8>
   1e540:	ldr	r2, [sp, #32]
   1e544:	add	fp, sl, r2, lsl #1
   1e548:	b	1e36c <__assert_fail@plt+0xcea4>
   1e54c:	mov	sl, #1
   1e550:	b	1e480 <__assert_fail@plt+0xcfb8>
   1e554:	ubfx	lr, lr, #8, #10
   1e558:	mov	r3, r5
   1e55c:	mov	r2, r5
   1e560:	mov	r1, r5
   1e564:	mov	r0, r7
   1e568:	str	lr, [sp]
   1e56c:	bl	1d26c <__assert_fail@plt+0xbda4>
   1e570:	cmp	r0, #0
   1e574:	bne	1e4a4 <__assert_fail@plt+0xcfdc>
   1e578:	ldr	r0, [r7]
   1e57c:	ldr	r1, [r7, #24]
   1e580:	add	r0, r0, r6
   1e584:	b	1e2d4 <__assert_fail@plt+0xce0c>
   1e588:	mov	r0, #12
   1e58c:	b	1e4a4 <__assert_fail@plt+0xcfdc>
   1e590:	mov	r0, r4
   1e594:	lsl	r2, r3, #2
   1e598:	ldr	r1, [sp, #36]	; 0x24
   1e59c:	mov	sl, r3
   1e5a0:	bl	11204 <memcpy@plt>
   1e5a4:	b	1e428 <__assert_fail@plt+0xcf60>
   1e5a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e5ac:	mov	r3, #0
   1e5b0:	strd	r6, [sp, #8]
   1e5b4:	strd	r8, [sp, #16]
   1e5b8:	ldr	r8, [r2, #4]
   1e5bc:	strd	sl, [sp, #24]
   1e5c0:	str	lr, [sp, #32]
   1e5c4:	sub	sp, sp, #4
   1e5c8:	str	r3, [r0]
   1e5cc:	cmp	r8, r3
   1e5d0:	beq	1e860 <__assert_fail@plt+0xd398>
   1e5d4:	mov	r5, r8
   1e5d8:	ble	1e5f4 <__assert_fail@plt+0xd12c>
   1e5dc:	ldr	r3, [r2, #8]
   1e5e0:	add	lr, r3, r8, lsl #2
   1e5e4:	ldr	ip, [r3], #4
   1e5e8:	cmp	r3, lr
   1e5ec:	add	r5, r5, ip
   1e5f0:	bne	1e5e4 <__assert_fail@plt+0xd11c>
   1e5f4:	ldr	ip, [r1, #32]
   1e5f8:	ldr	r3, [r1, #68]	; 0x44
   1e5fc:	and	r3, r3, r5
   1e600:	add	r3, r3, r3, lsl #1
   1e604:	lsl	r3, r3, #2
   1e608:	ldr	r9, [ip, r3]
   1e60c:	add	r3, ip, r3
   1e610:	cmp	r9, #0
   1e614:	ble	1e65c <__assert_fail@plt+0xd194>
   1e618:	ldr	lr, [r3, #8]
   1e61c:	mov	ip, #0
   1e620:	sub	lr, lr, #4
   1e624:	b	1e634 <__assert_fail@plt+0xd16c>
   1e628:	add	ip, ip, #1
   1e62c:	cmp	ip, r9
   1e630:	beq	1e65c <__assert_fail@plt+0xd194>
   1e634:	ldr	r4, [lr, #4]!
   1e638:	ldr	r3, [r4]
   1e63c:	cmp	r3, r5
   1e640:	bne	1e628 <__assert_fail@plt+0xd160>
   1e644:	ldr	r3, [r4, #8]
   1e648:	cmp	r8, r3
   1e64c:	beq	1e788 <__assert_fail@plt+0xd2c0>
   1e650:	add	ip, ip, #1
   1e654:	cmp	ip, r9
   1e658:	bne	1e634 <__assert_fail@plt+0xd16c>
   1e65c:	mov	r6, r1
   1e660:	mov	r7, r0
   1e664:	mov	r1, #1
   1e668:	mov	r0, #56	; 0x38
   1e66c:	mov	r9, r2
   1e670:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   1e674:	subs	r4, r0, #0
   1e678:	beq	1e828 <__assert_fail@plt+0xd360>
   1e67c:	ldr	r3, [r9, #4]
   1e680:	add	r8, r4, #4
   1e684:	cmp	r3, #0
   1e688:	str	r3, [r4, #8]
   1e68c:	ble	1e7b0 <__assert_fail@plt+0xd2e8>
   1e690:	lsl	r0, r3, #2
   1e694:	str	r3, [r4, #4]
   1e698:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1e69c:	cmp	r0, #0
   1e6a0:	mov	r3, r0
   1e6a4:	str	r0, [r4, #12]
   1e6a8:	beq	1e868 <__assert_fail@plt+0xd3a0>
   1e6ac:	ldr	sl, [r9, #4]
   1e6b0:	ldr	r1, [r9, #8]
   1e6b4:	lsl	fp, sl, #2
   1e6b8:	mov	r2, fp
   1e6bc:	bl	11204 <memcpy@plt>
   1e6c0:	cmp	sl, #0
   1e6c4:	str	r8, [r4, #40]	; 0x28
   1e6c8:	ble	1e7c4 <__assert_fail@plt+0xd2fc>
   1e6cc:	ldr	r1, [r9, #8]
   1e6d0:	mov	sl, #65280	; 0xff00
   1e6d4:	movt	sl, #3
   1e6d8:	ldr	r9, [r6]
   1e6dc:	add	lr, fp, r1
   1e6e0:	b	1e724 <__assert_fail@plt+0xd25c>
   1e6e4:	ldrb	r2, [r4, #52]	; 0x34
   1e6e8:	cmp	r0, #2
   1e6ec:	ldrb	fp, [r3, #6]
   1e6f0:	ubfx	ip, r2, #5, #1
   1e6f4:	ubfx	fp, fp, #4, #1
   1e6f8:	orr	ip, ip, fp
   1e6fc:	bfi	r2, ip, #5, #1
   1e700:	strb	r2, [r4, #52]	; 0x34
   1e704:	beq	1e838 <__assert_fail@plt+0xd370>
   1e708:	cmp	r0, #4
   1e70c:	bne	1e848 <__assert_fail@plt+0xd380>
   1e710:	ldrb	r3, [r4, #52]	; 0x34
   1e714:	orr	r3, r3, #64	; 0x40
   1e718:	strb	r3, [r4, #52]	; 0x34
   1e71c:	cmp	lr, r1
   1e720:	beq	1e7c4 <__assert_fail@plt+0xd2fc>
   1e724:	ldr	r3, [r1], #4
   1e728:	add	r3, r9, r3, lsl #3
   1e72c:	ldrb	r0, [r3, #4]
   1e730:	cmp	r0, #1
   1e734:	bne	1e6e4 <__assert_fail@plt+0xd21c>
   1e738:	ldr	r2, [r3, #4]
   1e73c:	tst	sl, r2
   1e740:	beq	1e71c <__assert_fail@plt+0xd254>
   1e744:	ldrb	r2, [r3, #6]
   1e748:	ldrb	r3, [r4, #52]	; 0x34
   1e74c:	ubfx	r0, r2, #4, #1
   1e750:	ubfx	r2, r3, #5, #1
   1e754:	orr	r2, r2, r0
   1e758:	bfi	r3, r2, #5, #1
   1e75c:	strb	r3, [r4, #52]	; 0x34
   1e760:	ldrb	r3, [r4, #52]	; 0x34
   1e764:	orr	r3, r3, #128	; 0x80
   1e768:	strb	r3, [r4, #52]	; 0x34
   1e76c:	b	1e71c <__assert_fail@plt+0xd254>
   1e770:	ldr	r6, [r2, #8]
   1e774:	ldr	r7, [r4, #12]
   1e778:	ldr	r6, [r6, r3, lsl #2]
   1e77c:	ldr	r7, [r7, r3, lsl #2]
   1e780:	cmp	r7, r6
   1e784:	bne	1e628 <__assert_fail@plt+0xd160>
   1e788:	subs	r3, r3, #1
   1e78c:	bpl	1e770 <__assert_fail@plt+0xd2a8>
   1e790:	mov	r0, r4
   1e794:	add	sp, sp, #4
   1e798:	ldrd	r4, [sp]
   1e79c:	ldrd	r6, [sp, #8]
   1e7a0:	ldrd	r8, [sp, #16]
   1e7a4:	ldrd	sl, [sp, #24]
   1e7a8:	add	sp, sp, #32
   1e7ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7b0:	mov	r3, #0
   1e7b4:	str	r3, [r4, #4]
   1e7b8:	str	r3, [r8, #4]
   1e7bc:	str	r3, [r8, #8]
   1e7c0:	str	r8, [r4, #40]	; 0x28
   1e7c4:	mov	r2, r5
   1e7c8:	mov	r0, r6
   1e7cc:	mov	r1, r4
   1e7d0:	bl	18d3c <__assert_fail@plt+0x7874>
   1e7d4:	cmp	r0, #0
   1e7d8:	beq	1e790 <__assert_fail@plt+0xd2c8>
   1e7dc:	ldr	r0, [r4, #24]
   1e7e0:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e7e4:	ldr	r0, [r4, #36]	; 0x24
   1e7e8:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e7ec:	ldr	r3, [r4, #40]	; 0x28
   1e7f0:	cmp	r8, r3
   1e7f4:	beq	1e808 <__assert_fail@plt+0xd340>
   1e7f8:	ldr	r0, [r3, #8]
   1e7fc:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e800:	ldr	r0, [r4, #40]	; 0x28
   1e804:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e808:	ldr	r0, [r4, #12]
   1e80c:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e810:	ldr	r0, [r4, #48]	; 0x30
   1e814:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e818:	ldr	r0, [r4, #44]	; 0x2c
   1e81c:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e820:	mov	r0, r4
   1e824:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e828:	mov	r3, #12
   1e82c:	mov	r4, #0
   1e830:	str	r3, [r7]
   1e834:	b	1e790 <__assert_fail@plt+0xd2c8>
   1e838:	uxtb	r3, r2
   1e83c:	orr	r3, r3, #16
   1e840:	strb	r3, [r4, #52]	; 0x34
   1e844:	b	1e71c <__assert_fail@plt+0xd254>
   1e848:	cmp	r0, #12
   1e84c:	beq	1e760 <__assert_fail@plt+0xd298>
   1e850:	ldr	r3, [r3, #4]
   1e854:	tst	sl, r3
   1e858:	beq	1e71c <__assert_fail@plt+0xd254>
   1e85c:	b	1e760 <__assert_fail@plt+0xd298>
   1e860:	mov	r4, r8
   1e864:	b	1e790 <__assert_fail@plt+0xd2c8>
   1e868:	mov	r0, r4
   1e86c:	str	r3, [r4, #4]
   1e870:	str	r3, [r4, #8]
   1e874:	bl	14484 <__assert_fail@plt+0x2fbc>
   1e878:	b	1e828 <__assert_fail@plt+0xd360>
   1e87c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e880:	strd	r6, [sp, #8]
   1e884:	ldr	r6, [r0, #108]	; 0x6c
   1e888:	strd	r8, [sp, #16]
   1e88c:	strd	sl, [sp, #24]
   1e890:	str	lr, [sp, #32]
   1e894:	sub	sp, sp, #44	; 0x2c
   1e898:	cmp	r6, #0
   1e89c:	ble	1e9fc <__assert_fail@plt+0xd534>
   1e8a0:	ldr	r4, [r0, #116]	; 0x74
   1e8a4:	mov	r5, r6
   1e8a8:	mov	r9, #0
   1e8ac:	add	ip, r5, r9
   1e8b0:	asr	ip, ip, #1
   1e8b4:	add	lr, ip, ip, lsl #1
   1e8b8:	add	lr, r4, lr, lsl #3
   1e8bc:	ldr	lr, [lr, #4]
   1e8c0:	cmp	lr, r2
   1e8c4:	blt	1ed20 <__assert_fail@plt+0xd858>
   1e8c8:	cmp	ip, r9
   1e8cc:	ble	1e918 <__assert_fail@plt+0xd450>
   1e8d0:	add	r5, ip, r9
   1e8d4:	asr	r5, r5, #1
   1e8d8:	add	lr, r5, r5, lsl #1
   1e8dc:	add	lr, r4, lr, lsl #3
   1e8e0:	ldr	lr, [lr, #4]
   1e8e4:	cmp	r2, lr
   1e8e8:	ble	1e908 <__assert_fail@plt+0xd440>
   1e8ec:	b	1ed14 <__assert_fail@plt+0xd84c>
   1e8f0:	add	lr, ip, ip, lsl #1
   1e8f4:	add	lr, r4, lr, lsl #3
   1e8f8:	ldr	lr, [lr, #4]
   1e8fc:	cmp	r2, lr
   1e900:	bgt	1ed20 <__assert_fail@plt+0xd858>
   1e904:	mov	r5, ip
   1e908:	add	ip, r9, r5
   1e90c:	cmp	r9, r5
   1e910:	asr	ip, ip, #1
   1e914:	blt	1e8f0 <__assert_fail@plt+0xd428>
   1e918:	cmp	r6, r9
   1e91c:	ble	1e9fc <__assert_fail@plt+0xd534>
   1e920:	add	r9, r9, r9, lsl #1
   1e924:	lsl	ip, r9, #3
   1e928:	add	lr, r4, ip
   1e92c:	ldr	lr, [lr, #4]
   1e930:	cmp	r2, lr
   1e934:	bne	1e9fc <__assert_fail@plt+0xd534>
   1e938:	ldr	r9, [r0, #84]	; 0x54
   1e93c:	mov	r6, r2
   1e940:	mov	r7, r1
   1e944:	mov	r8, r0
   1e948:	str	r3, [sp, #12]
   1e94c:	add	r3, ip, #24
   1e950:	str	r3, [sp, #8]
   1e954:	ldr	r3, [sp, #8]
   1e958:	add	r4, r4, r3
   1e95c:	ldr	lr, [r7, #4]
   1e960:	cmp	lr, #0
   1e964:	ble	1e9ec <__assert_fail@plt+0xd524>
   1e968:	sub	lr, lr, #1
   1e96c:	ldr	ip, [r4, #-24]	; 0xffffffe8
   1e970:	cmp	lr, #0
   1e974:	mov	r1, lr
   1e978:	moveq	r5, lr
   1e97c:	ldr	r2, [r7, #8]
   1e980:	beq	1e9e0 <__assert_fail@plt+0xd518>
   1e984:	mov	r0, lr
   1e988:	mov	r5, #0
   1e98c:	add	r3, r0, r5
   1e990:	lsr	r3, r3, #1
   1e994:	ldr	sl, [r2, r3, lsl #2]
   1e998:	cmp	ip, sl
   1e99c:	bgt	1ea28 <__assert_fail@plt+0xd560>
   1e9a0:	cmp	r3, r5
   1e9a4:	bls	1e9e0 <__assert_fail@plt+0xd518>
   1e9a8:	add	r0, r3, r5
   1e9ac:	lsr	r0, r0, #1
   1e9b0:	ldr	sl, [r2, r0, lsl #2]
   1e9b4:	cmp	ip, sl
   1e9b8:	ble	1e9d0 <__assert_fail@plt+0xd508>
   1e9bc:	b	1ea1c <__assert_fail@plt+0xd554>
   1e9c0:	ldr	sl, [r2, r3, lsl #2]
   1e9c4:	cmp	ip, sl
   1e9c8:	bgt	1ea28 <__assert_fail@plt+0xd560>
   1e9cc:	mov	r0, r3
   1e9d0:	add	r3, r5, r0
   1e9d4:	cmp	r5, r0
   1e9d8:	lsr	r3, r3, #1
   1e9dc:	bcc	1e9c0 <__assert_fail@plt+0xd4f8>
   1e9e0:	ldr	r3, [r2, r5, lsl #2]
   1e9e4:	cmp	ip, r3
   1e9e8:	beq	1ea40 <__assert_fail@plt+0xd578>
   1e9ec:	add	r4, r4, #24
   1e9f0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1e9f4:	cmp	r3, #0
   1e9f8:	bne	1e95c <__assert_fail@plt+0xd494>
   1e9fc:	mov	r0, #0
   1ea00:	add	sp, sp, #44	; 0x2c
   1ea04:	ldrd	r4, [sp]
   1ea08:	ldrd	r6, [sp, #8]
   1ea0c:	ldrd	r8, [sp, #16]
   1ea10:	ldrd	sl, [sp, #24]
   1ea14:	add	sp, sp, #32
   1ea18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea1c:	mov	r5, r0
   1ea20:	mov	r0, r3
   1ea24:	mov	r3, r5
   1ea28:	add	r5, r3, #1
   1ea2c:	cmp	r5, r0
   1ea30:	bcc	1e98c <__assert_fail@plt+0xd4c4>
   1ea34:	ldr	r3, [r2, r5, lsl #2]
   1ea38:	cmp	ip, r3
   1ea3c:	bne	1e9ec <__assert_fail@plt+0xd524>
   1ea40:	ldr	r3, [r4, #-16]
   1ea44:	ldr	r5, [r4, #-12]
   1ea48:	add	r5, r6, r5
   1ea4c:	sub	r5, r5, r3
   1ea50:	cmp	r6, r5
   1ea54:	beq	1ebb8 <__assert_fail@plt+0xd6f0>
   1ea58:	ldr	r2, [r8, #100]	; 0x64
   1ea5c:	ldr	r3, [r9, #12]
   1ea60:	ldr	fp, [r2, r5, lsl #2]
   1ea64:	ldr	sl, [r3, ip, lsl #2]
   1ea68:	cmp	fp, #0
   1ea6c:	beq	1eccc <__assert_fail@plt+0xd804>
   1ea70:	ldr	ip, [fp, #8]
   1ea74:	cmp	ip, #0
   1ea78:	ble	1ecfc <__assert_fail@plt+0xd834>
   1ea7c:	subs	r2, ip, #1
   1ea80:	ldr	r0, [fp, #12]
   1ea84:	moveq	r1, r2
   1ea88:	beq	1eae4 <__assert_fail@plt+0xd61c>
   1ea8c:	mov	r1, #0
   1ea90:	add	r3, r2, r1
   1ea94:	lsr	r3, r3, #1
   1ea98:	ldr	lr, [r0, r3, lsl #2]
   1ea9c:	cmp	lr, sl
   1eaa0:	blt	1eba8 <__assert_fail@plt+0xd6e0>
   1eaa4:	cmp	r3, r1
   1eaa8:	bls	1eae4 <__assert_fail@plt+0xd61c>
   1eaac:	add	r2, r3, r1
   1eab0:	lsr	r2, r2, #1
   1eab4:	ldr	lr, [r0, r2, lsl #2]
   1eab8:	cmp	sl, lr
   1eabc:	ble	1ead4 <__assert_fail@plt+0xd60c>
   1eac0:	b	1eb9c <__assert_fail@plt+0xd6d4>
   1eac4:	ldr	lr, [r0, r3, lsl #2]
   1eac8:	cmp	sl, lr
   1eacc:	bgt	1eba8 <__assert_fail@plt+0xd6e0>
   1ead0:	mov	r2, r3
   1ead4:	add	r3, r1, r2
   1ead8:	cmp	r1, r2
   1eadc:	lsr	r3, r3, #1
   1eae0:	bcc	1eac4 <__assert_fail@plt+0xd5fc>
   1eae4:	ldr	r3, [r0, r1, lsl #2]
   1eae8:	cmp	sl, r3
   1eaec:	beq	1e9ec <__assert_fail@plt+0xd524>
   1eaf0:	lsl	r0, ip, #2
   1eaf4:	str	ip, [sp, #24]
   1eaf8:	str	ip, [sp, #28]
   1eafc:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1eb00:	cmp	r0, #0
   1eb04:	str	r0, [sp, #32]
   1eb08:	beq	1ed90 <__assert_fail@plt+0xd8c8>
   1eb0c:	ldr	r2, [fp, #8]
   1eb10:	add	r3, sp, #24
   1eb14:	ldr	r1, [fp, #12]
   1eb18:	str	r3, [sp, #4]
   1eb1c:	lsl	r2, r2, #2
   1eb20:	bl	11204 <memcpy@plt>
   1eb24:	ldr	r3, [sp, #4]
   1eb28:	mov	r2, #0
   1eb2c:	mov	r0, r3
   1eb30:	mov	r1, sl
   1eb34:	str	r3, [sp, #4]
   1eb38:	str	r2, [sp, #20]
   1eb3c:	bl	19998 <__assert_fail@plt+0x84d0>
   1eb40:	eor	r0, r0, #1
   1eb44:	ldr	r3, [sp, #4]
   1eb48:	ldr	r2, [sp, #20]
   1eb4c:	cmp	r2, #0
   1eb50:	orrne	r0, r0, #1
   1eb54:	tst	r0, #255	; 0xff
   1eb58:	bne	1ed30 <__assert_fail@plt+0xd868>
   1eb5c:	ldr	sl, [r8, #100]	; 0x64
   1eb60:	mov	r2, r3
   1eb64:	mov	r1, r9
   1eb68:	add	r0, sp, #20
   1eb6c:	bl	1e5a8 <__assert_fail@plt+0xd0e0>
   1eb70:	str	r0, [sl, r5, lsl #2]
   1eb74:	ldr	r0, [sp, #32]
   1eb78:	bl	14484 <__assert_fail@plt+0x2fbc>
   1eb7c:	ldr	r3, [r8, #100]	; 0x64
   1eb80:	ldr	r3, [r3, r5, lsl #2]
   1eb84:	cmp	r3, #0
   1eb88:	bne	1e9ec <__assert_fail@plt+0xd524>
   1eb8c:	ldr	r0, [sp, #20]
   1eb90:	cmp	r0, #0
   1eb94:	beq	1e9ec <__assert_fail@plt+0xd524>
   1eb98:	b	1ea00 <__assert_fail@plt+0xd538>
   1eb9c:	mov	r1, r3
   1eba0:	mov	r3, r2
   1eba4:	mov	r2, r1
   1eba8:	add	r1, r3, #1
   1ebac:	cmp	r2, r1
   1ebb0:	bhi	1ea90 <__assert_fail@plt+0xd5c8>
   1ebb4:	b	1eae4 <__assert_fail@plt+0xd61c>
   1ebb8:	ldr	r3, [r9, #20]
   1ebbc:	add	ip, ip, ip, lsl #1
   1ebc0:	cmp	lr, #0
   1ebc4:	movne	lr, #0
   1ebc8:	add	ip, r3, ip, lsl #2
   1ebcc:	ldr	r3, [ip, #8]
   1ebd0:	ldr	r5, [r3]
   1ebd4:	beq	1ec2c <__assert_fail@plt+0xd764>
   1ebd8:	add	r3, r1, lr
   1ebdc:	lsr	r3, r3, #1
   1ebe0:	ldr	r0, [r2, r3, lsl #2]
   1ebe4:	cmp	r0, r5
   1ebe8:	blt	1ecbc <__assert_fail@plt+0xd7f4>
   1ebec:	cmp	r3, lr
   1ebf0:	bls	1ec2c <__assert_fail@plt+0xd764>
   1ebf4:	add	r1, r3, lr
   1ebf8:	lsr	r1, r1, #1
   1ebfc:	ldr	r0, [r2, r1, lsl #2]
   1ec00:	cmp	r5, r0
   1ec04:	ble	1ec1c <__assert_fail@plt+0xd754>
   1ec08:	b	1ecb0 <__assert_fail@plt+0xd7e8>
   1ec0c:	ldr	r0, [r2, r3, lsl #2]
   1ec10:	cmp	r5, r0
   1ec14:	bgt	1ecbc <__assert_fail@plt+0xd7f4>
   1ec18:	mov	r1, r3
   1ec1c:	add	r3, lr, r1
   1ec20:	cmp	lr, r1
   1ec24:	lsr	r3, r3, #1
   1ec28:	bcc	1ec0c <__assert_fail@plt+0xd744>
   1ec2c:	ldr	r3, [r2, lr, lsl #2]
   1ec30:	cmp	r5, r3
   1ec34:	beq	1e9ec <__assert_fail@plt+0xd524>
   1ec38:	mov	r2, #1
   1ec3c:	mov	r3, #1
   1ec40:	mov	r0, #4
   1ec44:	strd	r2, [sp, #24]
   1ec48:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1ec4c:	cmp	r0, #0
   1ec50:	str	r0, [sp, #32]
   1ec54:	beq	1ed4c <__assert_fail@plt+0xd884>
   1ec58:	mov	r2, #0
   1ec5c:	ldr	r3, [sp, #80]	; 0x50
   1ec60:	add	r4, sp, #24
   1ec64:	mov	r1, r4
   1ec68:	str	r5, [r0]
   1ec6c:	mov	r0, r9
   1ec70:	str	r2, [sp, #20]
   1ec74:	ldr	r2, [sp, #12]
   1ec78:	bl	1db98 <__assert_fail@plt+0xc6d0>
   1ec7c:	mov	r5, r0
   1ec80:	mov	r1, r4
   1ec84:	mov	r0, r7
   1ec88:	bl	19d94 <__assert_fail@plt+0x88cc>
   1ec8c:	mov	r4, r0
   1ec90:	ldr	r0, [sp, #32]
   1ec94:	bl	14484 <__assert_fail@plt+0x2fbc>
   1ec98:	ldr	r0, [sp, #20]
   1ec9c:	orr	r3, r5, r4
   1eca0:	orrs	r3, r3, r0
   1eca4:	bne	1ed78 <__assert_fail@plt+0xd8b0>
   1eca8:	ldr	r4, [r8, #116]	; 0x74
   1ecac:	b	1e954 <__assert_fail@plt+0xd48c>
   1ecb0:	mov	r0, r3
   1ecb4:	mov	r3, r1
   1ecb8:	mov	r1, r0
   1ecbc:	add	lr, r3, #1
   1ecc0:	cmp	lr, r1
   1ecc4:	bcc	1ebd8 <__assert_fail@plt+0xd710>
   1ecc8:	b	1ec2c <__assert_fail@plt+0xd764>
   1eccc:	mov	r2, #1
   1ecd0:	mov	r3, #1
   1ecd4:	mov	r0, #4
   1ecd8:	strd	r2, [sp, #24]
   1ecdc:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1ece0:	cmp	r0, #0
   1ece4:	str	r0, [sp, #32]
   1ece8:	beq	1ed44 <__assert_fail@plt+0xd87c>
   1ecec:	add	r3, sp, #24
   1ecf0:	str	sl, [r0]
   1ecf4:	str	fp, [sp, #20]
   1ecf8:	b	1eb5c <__assert_fail@plt+0xd694>
   1ecfc:	mov	r2, #0
   1ed00:	add	r3, sp, #24
   1ed04:	str	r2, [sp, #24]
   1ed08:	str	r2, [r3, #4]
   1ed0c:	str	r2, [r3, #8]
   1ed10:	b	1eb2c <__assert_fail@plt+0xd664>
   1ed14:	mov	lr, r5
   1ed18:	mov	r5, ip
   1ed1c:	mov	ip, lr
   1ed20:	add	r9, ip, #1
   1ed24:	cmp	r9, r5
   1ed28:	blt	1e8ac <__assert_fail@plt+0xd3e4>
   1ed2c:	b	1e918 <__assert_fail@plt+0xd450>
   1ed30:	ldr	r0, [sp, #32]
   1ed34:	bl	14484 <__assert_fail@plt+0x2fbc>
   1ed38:	ldr	r0, [sp, #20]
   1ed3c:	cmp	r0, #0
   1ed40:	bne	1ea00 <__assert_fail@plt+0xd538>
   1ed44:	mov	r0, #12
   1ed48:	b	1ea00 <__assert_fail@plt+0xd538>
   1ed4c:	mov	r2, #0
   1ed50:	mov	r3, #0
   1ed54:	mov	ip, #12
   1ed58:	add	r4, sp, #24
   1ed5c:	mov	r1, r4
   1ed60:	mov	r0, r9
   1ed64:	str	ip, [sp, #20]
   1ed68:	strd	r2, [sp, #24]
   1ed6c:	ldr	r2, [sp, #12]
   1ed70:	ldr	r3, [sp, #80]	; 0x50
   1ed74:	b	1ec78 <__assert_fail@plt+0xd7b0>
   1ed78:	cmp	r0, #0
   1ed7c:	bne	1ea00 <__assert_fail@plt+0xd538>
   1ed80:	cmp	r5, #0
   1ed84:	movne	r0, r5
   1ed88:	moveq	r0, r4
   1ed8c:	b	1ea00 <__assert_fail@plt+0xd538>
   1ed90:	mov	r0, #0
   1ed94:	mov	r1, #0
   1ed98:	mov	r2, #12
   1ed9c:	add	r3, sp, #24
   1eda0:	strd	r0, [sp, #24]
   1eda4:	b	1eb2c <__assert_fail@plt+0xd664>
   1eda8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1edac:	mov	ip, #0
   1edb0:	strd	r6, [sp, #8]
   1edb4:	ldr	r6, [r2, #4]
   1edb8:	strd	r8, [sp, #16]
   1edbc:	strd	sl, [sp, #24]
   1edc0:	str	lr, [sp, #32]
   1edc4:	sub	sp, sp, #20
   1edc8:	str	ip, [r0]
   1edcc:	cmp	r6, ip
   1edd0:	moveq	r4, r6
   1edd4:	beq	1f04c <__assert_fail@plt+0xdb84>
   1edd8:	add	r7, r3, r6
   1eddc:	ble	1edf8 <__assert_fail@plt+0xd930>
   1ede0:	ldr	ip, [r2, #8]
   1ede4:	add	r4, ip, r6, lsl #2
   1ede8:	ldr	lr, [ip], #4
   1edec:	cmp	r4, ip
   1edf0:	add	r7, r7, lr
   1edf4:	bne	1ede8 <__assert_fail@plt+0xd920>
   1edf8:	ldr	lr, [r1, #32]
   1edfc:	ldr	ip, [r1, #68]	; 0x44
   1ee00:	and	ip, ip, r7
   1ee04:	add	ip, ip, ip, lsl #1
   1ee08:	lsl	ip, ip, #2
   1ee0c:	ldr	r8, [lr, ip]
   1ee10:	add	ip, lr, ip
   1ee14:	cmp	r8, #0
   1ee18:	ble	1ee7c <__assert_fail@plt+0xd9b4>
   1ee1c:	ldr	lr, [ip, #8]
   1ee20:	mov	ip, #0
   1ee24:	sub	lr, lr, #4
   1ee28:	b	1ee38 <__assert_fail@plt+0xd970>
   1ee2c:	add	ip, ip, #1
   1ee30:	cmp	ip, r8
   1ee34:	beq	1ee7c <__assert_fail@plt+0xd9b4>
   1ee38:	ldr	r4, [lr, #4]!
   1ee3c:	ldr	r5, [r4]
   1ee40:	cmp	r5, r7
   1ee44:	bne	1ee2c <__assert_fail@plt+0xd964>
   1ee48:	ldrb	r5, [r4, #52]	; 0x34
   1ee4c:	and	r5, r5, #15
   1ee50:	cmp	r5, r3
   1ee54:	bne	1ee2c <__assert_fail@plt+0xd964>
   1ee58:	ldr	fp, [r4, #40]	; 0x28
   1ee5c:	cmp	fp, #0
   1ee60:	beq	1ee2c <__assert_fail@plt+0xd964>
   1ee64:	ldr	r5, [fp, #4]
   1ee68:	cmp	r6, r5
   1ee6c:	beq	1f084 <__assert_fail@plt+0xdbbc>
   1ee70:	add	ip, ip, #1
   1ee74:	cmp	ip, r8
   1ee78:	bne	1ee38 <__assert_fail@plt+0xd970>
   1ee7c:	mov	r9, r1
   1ee80:	mov	r1, #1
   1ee84:	str	r0, [sp, #8]
   1ee88:	mov	r0, #56	; 0x38
   1ee8c:	mov	sl, r3
   1ee90:	mov	r6, r2
   1ee94:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   1ee98:	subs	r4, r0, #0
   1ee9c:	beq	1f19c <__assert_fail@plt+0xdcd4>
   1eea0:	ldr	r3, [r6, #4]
   1eea4:	add	fp, r4, #4
   1eea8:	cmp	r3, #0
   1eeac:	str	r3, [r4, #8]
   1eeb0:	ble	1f090 <__assert_fail@plt+0xdbc8>
   1eeb4:	lsl	r0, r3, #2
   1eeb8:	str	r3, [r4, #4]
   1eebc:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1eec0:	cmp	r0, #0
   1eec4:	mov	r3, r0
   1eec8:	str	r0, [r4, #12]
   1eecc:	beq	1f1b0 <__assert_fail@plt+0xdce8>
   1eed0:	ldr	r8, [r6, #4]
   1eed4:	ldr	r1, [r6, #8]
   1eed8:	lsl	r2, r8, #2
   1eedc:	bl	11204 <memcpy@plt>
   1eee0:	ldrb	r3, [r4, #52]	; 0x34
   1eee4:	cmp	r8, #0
   1eee8:	str	fp, [r4, #40]	; 0x28
   1eeec:	bfi	r3, sl, #0, #4
   1eef0:	strb	r3, [r4, #52]	; 0x34
   1eef4:	ble	1f034 <__assert_fail@plt+0xdb6c>
   1eef8:	and	r2, sl, #2
   1eefc:	mov	r1, #0
   1ef00:	and	r3, sl, #1
   1ef04:	mov	lr, r8
   1ef08:	mov	r5, r1
   1ef0c:	mov	r8, r3
   1ef10:	str	r2, [sp]
   1ef14:	and	r2, sl, #4
   1ef18:	str	r2, [sp, #4]
   1ef1c:	ldr	r3, [r6, #8]
   1ef20:	ldr	r2, [r9]
   1ef24:	ldr	r3, [r3, r5, lsl #2]
   1ef28:	add	r2, r2, r3, lsl #3
   1ef2c:	ldr	sl, [r2, #4]
   1ef30:	ldrb	r3, [r2, #4]
   1ef34:	ubfx	sl, sl, #8, #10
   1ef38:	cmp	r3, #1
   1ef3c:	cmpeq	sl, #0
   1ef40:	beq	1f028 <__assert_fail@plt+0xdb60>
   1ef44:	ldrb	ip, [r2, #6]
   1ef48:	cmp	r3, #2
   1ef4c:	ldrb	r2, [r4, #52]	; 0x34
   1ef50:	ubfx	ip, ip, #4, #1
   1ef54:	ubfx	r0, r2, #5, #1
   1ef58:	orr	r0, r0, ip
   1ef5c:	bfi	r2, r0, #5, #1
   1ef60:	uxtbeq	r3, r2
   1ef64:	orreq	r3, r3, #16
   1ef68:	strb	r2, [r4, #52]	; 0x34
   1ef6c:	strbeq	r3, [r4, #52]	; 0x34
   1ef70:	beq	1ef88 <__assert_fail@plt+0xdac0>
   1ef74:	cmp	r3, #4
   1ef78:	bne	1ef88 <__assert_fail@plt+0xdac0>
   1ef7c:	ldrb	r3, [r4, #52]	; 0x34
   1ef80:	orr	r3, r3, #64	; 0x40
   1ef84:	strb	r3, [r4, #52]	; 0x34
   1ef88:	cmp	sl, #0
   1ef8c:	beq	1f028 <__assert_fail@plt+0xdb60>
   1ef90:	ldr	r3, [r4, #40]	; 0x28
   1ef94:	cmp	fp, r3
   1ef98:	beq	1f0c8 <__assert_fail@plt+0xdc00>
   1ef9c:	tst	sl, #1
   1efa0:	beq	1f0b4 <__assert_fail@plt+0xdbec>
   1efa4:	cmp	r8, #0
   1efa8:	beq	1efdc <__assert_fail@plt+0xdb14>
   1efac:	tst	sl, #2
   1efb0:	bne	1efdc <__assert_fail@plt+0xdb14>
   1efb4:	tst	sl, #16
   1efb8:	beq	1efc8 <__assert_fail@plt+0xdb00>
   1efbc:	ldr	r3, [sp]
   1efc0:	cmp	r3, #0
   1efc4:	beq	1efdc <__assert_fail@plt+0xdb14>
   1efc8:	tst	sl, #64	; 0x40
   1efcc:	beq	1f024 <__assert_fail@plt+0xdb5c>
   1efd0:	ldr	r3, [sp, #4]
   1efd4:	cmp	r3, #0
   1efd8:	bne	1f024 <__assert_fail@plt+0xdb5c>
   1efdc:	subs	r3, r5, r1
   1efe0:	bmi	1f020 <__assert_fail@plt+0xdb58>
   1efe4:	ldr	r2, [r4, #8]
   1efe8:	cmp	r3, r2
   1efec:	bge	1f020 <__assert_fail@plt+0xdb58>
   1eff0:	sub	r2, r2, #1
   1eff4:	cmp	r3, r2
   1eff8:	str	r2, [r4, #8]
   1effc:	bge	1f020 <__assert_fail@plt+0xdb58>
   1f000:	ldr	r2, [r4, #12]
   1f004:	add	r2, r2, r3, lsl #2
   1f008:	ldr	r0, [r2, #4]
   1f00c:	add	r3, r3, #1
   1f010:	str	r0, [r2], #4
   1f014:	ldr	r0, [r4, #8]
   1f018:	cmp	r3, r0
   1f01c:	blt	1f008 <__assert_fail@plt+0xdb40>
   1f020:	add	r1, r1, #1
   1f024:	ldr	lr, [r6, #4]
   1f028:	add	r5, r5, #1
   1f02c:	cmp	r5, lr
   1f030:	blt	1ef1c <__assert_fail@plt+0xda54>
   1f034:	mov	r2, r7
   1f038:	mov	r0, r9
   1f03c:	mov	r1, r4
   1f040:	bl	18d3c <__assert_fail@plt+0x7874>
   1f044:	cmp	r0, #0
   1f048:	bne	1f150 <__assert_fail@plt+0xdc88>
   1f04c:	mov	r0, r4
   1f050:	add	sp, sp, #20
   1f054:	ldrd	r4, [sp]
   1f058:	ldrd	r6, [sp, #8]
   1f05c:	ldrd	r8, [sp, #16]
   1f060:	ldrd	sl, [sp, #24]
   1f064:	add	sp, sp, #32
   1f068:	pop	{pc}		; (ldr pc, [sp], #4)
   1f06c:	ldr	r9, [r2, #8]
   1f070:	ldr	sl, [fp, #8]
   1f074:	ldr	r9, [r9, r5, lsl #2]
   1f078:	ldr	sl, [sl, r5, lsl #2]
   1f07c:	cmp	sl, r9
   1f080:	bne	1ee2c <__assert_fail@plt+0xd964>
   1f084:	subs	r5, r5, #1
   1f088:	bpl	1f06c <__assert_fail@plt+0xdba4>
   1f08c:	b	1f04c <__assert_fail@plt+0xdb84>
   1f090:	mov	r3, #0
   1f094:	str	r3, [r4, #4]
   1f098:	str	r3, [fp, #4]
   1f09c:	str	r3, [fp, #8]
   1f0a0:	ldrb	r3, [r4, #52]	; 0x34
   1f0a4:	str	fp, [r4, #40]	; 0x28
   1f0a8:	bfi	r3, sl, #0, #4
   1f0ac:	strb	r3, [r4, #52]	; 0x34
   1f0b0:	b	1f034 <__assert_fail@plt+0xdb6c>
   1f0b4:	tst	sl, #2
   1f0b8:	beq	1efb4 <__assert_fail@plt+0xdaec>
   1f0bc:	cmp	r8, #0
   1f0c0:	beq	1efb4 <__assert_fail@plt+0xdaec>
   1f0c4:	b	1efdc <__assert_fail@plt+0xdb14>
   1f0c8:	mov	r0, #12
   1f0cc:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1f0d0:	subs	r3, r0, #0
   1f0d4:	beq	1f150 <__assert_fail@plt+0xdc88>
   1f0d8:	ldr	r2, [r6, #4]
   1f0dc:	str	r3, [r4, #40]	; 0x28
   1f0e0:	cmp	r2, #0
   1f0e4:	str	r2, [r3, #4]
   1f0e8:	ble	1f130 <__assert_fail@plt+0xdc68>
   1f0ec:	lsl	r0, r2, #2
   1f0f0:	str	r2, [r3]
   1f0f4:	str	r3, [sp, #12]
   1f0f8:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1f0fc:	ldr	r3, [sp, #12]
   1f100:	cmp	r0, #0
   1f104:	str	r0, [r3, #8]
   1f108:	beq	1f144 <__assert_fail@plt+0xdc7c>
   1f10c:	ldr	r2, [r6, #4]
   1f110:	ldr	r1, [r6, #8]
   1f114:	lsl	r2, r2, #2
   1f118:	bl	11204 <memcpy@plt>
   1f11c:	ldrb	r3, [r4, #52]	; 0x34
   1f120:	mov	r1, #0
   1f124:	orr	r3, r3, #128	; 0x80
   1f128:	strb	r3, [r4, #52]	; 0x34
   1f12c:	b	1ef9c <__assert_fail@plt+0xdad4>
   1f130:	mov	r2, #0
   1f134:	str	r2, [r3]
   1f138:	str	r2, [r3, #4]
   1f13c:	str	r2, [r3, #8]
   1f140:	b	1f11c <__assert_fail@plt+0xdc54>
   1f144:	mov	r8, r3
   1f148:	str	r0, [r8]
   1f14c:	str	r0, [r8, #4]
   1f150:	ldr	r0, [r4, #24]
   1f154:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f158:	ldr	r0, [r4, #36]	; 0x24
   1f15c:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f160:	ldr	r3, [r4, #40]	; 0x28
   1f164:	cmp	fp, r3
   1f168:	beq	1f17c <__assert_fail@plt+0xdcb4>
   1f16c:	ldr	r0, [r3, #8]
   1f170:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f174:	ldr	r0, [r4, #40]	; 0x28
   1f178:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f17c:	ldr	r0, [r4, #12]
   1f180:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f184:	ldr	r0, [r4, #48]	; 0x30
   1f188:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f18c:	ldr	r0, [r4, #44]	; 0x2c
   1f190:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f194:	mov	r0, r4
   1f198:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f19c:	ldr	r2, [sp, #8]
   1f1a0:	mov	r3, #12
   1f1a4:	mov	r4, #0
   1f1a8:	str	r3, [r2]
   1f1ac:	b	1f04c <__assert_fail@plt+0xdb84>
   1f1b0:	mov	r0, r4
   1f1b4:	str	r3, [r4, #4]
   1f1b8:	str	r3, [r4, #8]
   1f1bc:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f1c0:	b	1f19c <__assert_fail@plt+0xdcd4>
   1f1c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f1c8:	mov	ip, r1
   1f1cc:	strd	r6, [sp, #8]
   1f1d0:	strd	r8, [sp, #16]
   1f1d4:	ldr	r8, [r1, #8]
   1f1d8:	strd	sl, [sp, #24]
   1f1dc:	str	lr, [sp, #32]
   1f1e0:	sub	sp, sp, #14528	; 0x38c0
   1f1e4:	sub	sp, sp, #60	; 0x3c
   1f1e8:	add	r9, sp, #2288	; 0x8f0
   1f1ec:	add	r9, r9, #8
   1f1f0:	str	r1, [sp, #100]	; 0x64
   1f1f4:	mov	r1, #0
   1f1f8:	cmp	r8, r1
   1f1fc:	str	r1, [r9]
   1f200:	str	r1, [r9, #4]
   1f204:	str	r1, [r9, #8]
   1f208:	str	r1, [r9, #12]
   1f20c:	str	r1, [r9, #16]
   1f210:	str	r1, [r9, #20]
   1f214:	str	r1, [r9, #24]
   1f218:	str	r1, [r9, #28]
   1f21c:	str	r1, [ip, #44]	; 0x2c
   1f220:	str	r1, [ip, #48]	; 0x30
   1f224:	ble	2019c <__assert_fail@plt+0xecd4>
   1f228:	mov	r3, r1
   1f22c:	mov	r2, r1
   1f230:	str	r1, [sp, #48]	; 0x30
   1f234:	mov	fp, r0
   1f238:	mov	r6, r8
   1f23c:	str	r1, [sp, #104]	; 0x68
   1f240:	str	r0, [sp, #116]	; 0x74
   1f244:	strd	r2, [sp, #128]	; 0x80
   1f248:	sub	r3, r9, #2080	; 0x820
   1f24c:	str	r3, [sp, #124]	; 0x7c
   1f250:	ldr	r3, [sp, #100]	; 0x64
   1f254:	ldr	r1, [sp, #104]	; 0x68
   1f258:	ldr	r3, [r3, #12]
   1f25c:	lsl	r2, r1, #2
   1f260:	str	r2, [sp, #112]	; 0x70
   1f264:	ldr	r2, [sp, #116]	; 0x74
   1f268:	ldr	r1, [r3, r1, lsl #2]
   1f26c:	ldr	r2, [r2]
   1f270:	add	r3, r2, r1, lsl #3
   1f274:	ldrb	r0, [r3, #4]
   1f278:	str	r3, [sp, #96]	; 0x60
   1f27c:	cmp	r0, #1
   1f280:	ldr	r3, [r3, #4]
   1f284:	str	r0, [sp, #52]	; 0x34
   1f288:	ubfx	r3, r3, #8, #10
   1f28c:	beq	1f598 <__assert_fail@plt+0xe0d0>
   1f290:	cmp	r0, #3
   1f294:	beq	1ff48 <__assert_fail@plt+0xea80>
   1f298:	cmp	r0, #5
   1f29c:	beq	1fc70 <__assert_fail@plt+0xe7a8>
   1f2a0:	cmp	r0, #7
   1f2a4:	beq	1fe84 <__assert_fail@plt+0xe9bc>
   1f2a8:	ldr	r3, [sp, #104]	; 0x68
   1f2ac:	add	r3, r3, #1
   1f2b0:	cmp	r3, r6
   1f2b4:	str	r3, [sp, #104]	; 0x68
   1f2b8:	blt	1f250 <__assert_fail@plt+0xdd88>
   1f2bc:	ldr	r3, [sp, #48]	; 0x30
   1f2c0:	ldr	fp, [sp, #116]	; 0x74
   1f2c4:	cmp	r3, #0
   1f2c8:	ble	20198 <__assert_fail@plt+0xecd0>
   1f2cc:	add	r3, r3, #1
   1f2d0:	mov	r5, #0
   1f2d4:	lsl	r0, r3, #2
   1f2d8:	str	r3, [r9, #-2156]	; 0xfffff794
   1f2dc:	str	r5, [r9, #-2152]	; 0xfffff798
   1f2e0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1f2e4:	cmp	r0, r5
   1f2e8:	str	r0, [r9, #-2148]	; 0xfffff79c
   1f2ec:	beq	20148 <__assert_fail@plt+0xec80>
   1f2f0:	mov	r3, #0
   1f2f4:	mov	r2, #0
   1f2f8:	str	r5, [r9, #-2160]	; 0xfffff790
   1f2fc:	add	r1, sp, #3312	; 0xcf0
   1f300:	mov	sl, r5
   1f304:	str	r5, [sp]
   1f308:	add	r1, r1, #8
   1f30c:	mov	r8, r5
   1f310:	str	r5, [sp, #8]
   1f314:	strd	r2, [sp, #152]	; 0x98
   1f318:	mov	r4, r1
   1f31c:	strd	r2, [sp, #160]	; 0xa0
   1f320:	strd	r2, [sp, #168]	; 0xa8
   1f324:	strd	r2, [sp, #176]	; 0xb0
   1f328:	add	r3, sp, #136	; 0x88
   1f32c:	str	r5, [sp, #12]
   1f330:	str	r5, [sp, #16]
   1f334:	str	r3, [sp, #40]	; 0x28
   1f338:	add	r3, sp, #6336	; 0x18c0
   1f33c:	add	r3, r3, #56	; 0x38
   1f340:	str	r5, [sp, #24]
   1f344:	mov	r6, r3
   1f348:	str	r5, [sp, #32]
   1f34c:	str	r5, [sp, #52]	; 0x34
   1f350:	str	r3, [sp, #56]	; 0x38
   1f354:	str	r1, [sp, #60]	; 0x3c
   1f358:	str	r1, [sp, #108]	; 0x6c
   1f35c:	ldr	ip, [r4, #4]
   1f360:	mov	r3, #0
   1f364:	str	r3, [r9, #-2152]	; 0xfffff798
   1f368:	cmp	ip, r3
   1f36c:	movgt	r7, #0
   1f370:	ble	1f3bc <__assert_fail@plt+0xdef4>
   1f374:	ldr	r2, [r4, #8]
   1f378:	add	r0, sp, #140	; 0x8c
   1f37c:	ldr	r3, [fp, #12]
   1f380:	ldr	r2, [r2, r7, lsl #2]
   1f384:	add	r7, r7, #1
   1f388:	ldr	r3, [r3, r2, lsl #2]
   1f38c:	cmn	r3, #1
   1f390:	add	r2, r3, r3, lsl #1
   1f394:	beq	1f3b4 <__assert_fail@plt+0xdeec>
   1f398:	ldr	r1, [fp, #24]
   1f39c:	add	r1, r1, r2, lsl #2
   1f3a0:	bl	19d94 <__assert_fail@plt+0x88cc>
   1f3a4:	cmp	r0, #0
   1f3a8:	str	r0, [r9, #-2160]	; 0xfffff790
   1f3ac:	bne	20064 <__assert_fail@plt+0xeb9c>
   1f3b0:	ldr	ip, [r4, #4]
   1f3b4:	cmp	r7, ip
   1f3b8:	blt	1f374 <__assert_fail@plt+0xdeac>
   1f3bc:	mov	r3, #0
   1f3c0:	add	r2, sp, #140	; 0x8c
   1f3c4:	ldr	r0, [sp, #40]	; 0x28
   1f3c8:	mov	r1, fp
   1f3cc:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   1f3d0:	add	r3, sp, #248	; 0xf8
   1f3d4:	cmp	r0, #0
   1f3d8:	mov	r7, r0
   1f3dc:	str	r0, [r3, r8, lsl #2]
   1f3e0:	beq	20138 <__assert_fail@plt+0xec70>
   1f3e4:	ldrsb	r3, [r7, #52]	; 0x34
   1f3e8:	cmp	r3, #0
   1f3ec:	blt	20094 <__assert_fail@plt+0xebcc>
   1f3f0:	add	r3, sp, #1264	; 0x4f0
   1f3f4:	str	r7, [r9, r8, lsl #2]
   1f3f8:	add	r3, r3, #8
   1f3fc:	str	r7, [r3, r8, lsl #2]
   1f400:	add	r8, r8, #1
   1f404:	ldr	r0, [sp]
   1f408:	add	r4, r4, #12
   1f40c:	add	r6, r6, #32
   1f410:	ldr	r3, [sp, #48]	; 0x30
   1f414:	ldr	r2, [r6, #-32]	; 0xffffffe0
   1f418:	ldr	r1, [r6, #-24]	; 0xffffffe8
   1f41c:	cmp	r8, r3
   1f420:	ldr	r3, [r6, #-28]	; 0xffffffe4
   1f424:	orr	sl, sl, r2
   1f428:	ldr	r2, [r6, #-20]	; 0xffffffec
   1f42c:	str	sl, [r9, #-2144]	; 0xfffff7a0
   1f430:	ldr	ip, [sp, #8]
   1f434:	orr	r0, r0, r3
   1f438:	ldr	r3, [r6, #-16]
   1f43c:	str	r0, [r9, #-2140]	; 0xfffff7a4
   1f440:	str	r0, [sp]
   1f444:	ldr	r0, [sp, #12]
   1f448:	orr	ip, ip, r1
   1f44c:	str	ip, [r9, #-2136]	; 0xfffff7a8
   1f450:	str	ip, [sp, #8]
   1f454:	ldr	r1, [r6, #-12]
   1f458:	orr	r0, r0, r2
   1f45c:	ldr	ip, [sp, #16]
   1f460:	str	r0, [r9, #-2132]	; 0xfffff7ac
   1f464:	str	r0, [sp, #12]
   1f468:	ldr	r0, [sp, #24]
   1f46c:	orr	ip, ip, r3
   1f470:	ldrd	r2, [r6, #-8]
   1f474:	str	ip, [r9, #-2128]	; 0xfffff7b0
   1f478:	orr	r1, r0, r1
   1f47c:	ldr	r0, [sp, #32]
   1f480:	str	ip, [sp, #16]
   1f484:	orr	r5, r5, r3
   1f488:	str	r1, [r9, #-2124]	; 0xfffff7b4
   1f48c:	str	r1, [sp, #24]
   1f490:	str	r5, [r9, #-2116]	; 0xfffff7bc
   1f494:	orr	r2, r0, r2
   1f498:	str	r2, [r9, #-2120]	; 0xfffff7b8
   1f49c:	str	r2, [sp, #32]
   1f4a0:	bne	1f35c <__assert_fail@plt+0xde94>
   1f4a4:	ldr	r3, [sp, #52]	; 0x34
   1f4a8:	cmp	r3, #0
   1f4ac:	bne	201e0 <__assert_fail@plt+0xed18>
   1f4b0:	mov	r1, #256	; 0x100
   1f4b4:	mov	r0, #4
   1f4b8:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   1f4bc:	ldr	r3, [sp, #100]	; 0x64
   1f4c0:	cmp	r0, #0
   1f4c4:	mov	r7, r0
   1f4c8:	str	r0, [r3, #44]	; 0x2c
   1f4cc:	beq	20064 <__assert_fail@plt+0xeb9c>
   1f4d0:	ldr	lr, [sp, #56]	; 0x38
   1f4d4:	add	ip, sp, #148	; 0x94
   1f4d8:	add	r5, fp, #96	; 0x60
   1f4dc:	mov	r4, r0
   1f4e0:	add	r6, r0, #1024	; 0x400
   1f4e4:	ldr	r3, [ip, #4]!
   1f4e8:	cmp	r3, #0
   1f4ec:	movne	r0, r4
   1f4f0:	movne	r1, #1
   1f4f4:	beq	1f510 <__assert_fail@plt+0xe048>
   1f4f8:	tst	r3, #1
   1f4fc:	bne	20160 <__assert_fail@plt+0xec98>
   1f500:	lsrs	r3, r3, #1
   1f504:	add	r0, r0, #4
   1f508:	lsl	r1, r1, #1
   1f50c:	bne	1f4f8 <__assert_fail@plt+0xe030>
   1f510:	add	r4, r4, #128	; 0x80
   1f514:	add	r5, r5, #4
   1f518:	cmp	r6, r4
   1f51c:	add	lr, lr, #4
   1f520:	bne	1f4e4 <__assert_fail@plt+0xe01c>
   1f524:	ubfx	r3, sl, #10, #1
   1f528:	cmp	r3, #0
   1f52c:	beq	1f560 <__assert_fail@plt+0xe098>
   1f530:	ldr	ip, [sp, #48]	; 0x30
   1f534:	add	r2, sp, #6336	; 0x18c0
   1f538:	add	r1, r3, #1
   1f53c:	add	r2, r2, #56	; 0x38
   1f540:	sub	r0, r3, #1
   1f544:	add	r2, r2, r3, lsl #5
   1f548:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1f54c:	tst	r2, #1024	; 0x400
   1f550:	bne	201c8 <__assert_fail@plt+0xed00>
   1f554:	cmp	ip, r3
   1f558:	mov	r3, r1
   1f55c:	bne	1f534 <__assert_fail@plt+0xe06c>
   1f560:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   1f564:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f568:	ldr	r3, [sp, #48]	; 0x30
   1f56c:	ldr	r5, [sp, #60]	; 0x3c
   1f570:	add	r1, r3, r3, lsl #1
   1f574:	ldr	r3, [sp, #108]	; 0x6c
   1f578:	add	r4, r3, r1, lsl #2
   1f57c:	add	r5, r5, #12
   1f580:	ldr	r0, [r5, #-4]
   1f584:	bl	14484 <__assert_fail@plt+0x2fbc>
   1f588:	cmp	r4, r5
   1f58c:	bne	1f57c <__assert_fail@plt+0xe0b4>
   1f590:	mov	r0, #1
   1f594:	b	1fdb8 <__assert_fail@plt+0xe8f0>
   1f598:	ldrb	r2, [r2, r1, lsl #3]
   1f59c:	mov	ip, r0
   1f5a0:	asr	r1, r2, #5
   1f5a4:	and	r2, r2, #31
   1f5a8:	ldr	r0, [r9, r1, lsl #2]
   1f5ac:	orr	r2, r0, ip, lsl r2
   1f5b0:	str	r2, [r9, r1, lsl #2]
   1f5b4:	cmp	r3, #0
   1f5b8:	beq	1f878 <__assert_fail@plt+0xe3b0>
   1f5bc:	tst	r3, #32
   1f5c0:	bne	1fd20 <__assert_fail@plt+0xe858>
   1f5c4:	tst	r3, #128	; 0x80
   1f5c8:	bne	1fd60 <__assert_fail@plt+0xe898>
   1f5cc:	tst	r3, #4
   1f5d0:	beq	1f738 <__assert_fail@plt+0xe270>
   1f5d4:	ldr	r2, [sp, #52]	; 0x34
   1f5d8:	cmp	r2, #1
   1f5dc:	beq	20044 <__assert_fail@plt+0xeb7c>
   1f5e0:	ldr	r1, [sp, #116]	; 0x74
   1f5e4:	ldrd	r4, [r9]
   1f5e8:	ldr	lr, [r9, #16]
   1f5ec:	ldr	r2, [r1, #92]	; 0x5c
   1f5f0:	ldr	r0, [r9, #24]
   1f5f4:	ldr	ip, [r9, #28]
   1f5f8:	cmp	r2, #1
   1f5fc:	ldr	r2, [r9, #8]
   1f600:	str	lr, [sp, #56]	; 0x38
   1f604:	ldr	sl, [r9, #12]
   1f608:	str	r2, [sp]
   1f60c:	ldr	r2, [r9, #20]
   1f610:	str	r0, [sp, #16]
   1f614:	str	ip, [sp, #32]
   1f618:	str	r2, [sp, #12]
   1f61c:	mov	r2, r1
   1f620:	ldr	r1, [r1, #96]	; 0x60
   1f624:	ldr	r7, [r2, #120]	; 0x78
   1f628:	ldr	r8, [r2, #108]	; 0x6c
   1f62c:	ldr	ip, [r2, #100]	; 0x64
   1f630:	ldr	r0, [r2, #104]	; 0x68
   1f634:	str	r7, [sp, #24]
   1f638:	str	r8, [sp, #8]
   1f63c:	ldr	r7, [r2, #124]	; 0x7c
   1f640:	ldr	r8, [r2, #112]	; 0x70
   1f644:	ldr	fp, [r2, #116]	; 0x74
   1f648:	str	r7, [sp, #40]	; 0x28
   1f64c:	ble	1fed0 <__assert_fail@plt+0xea08>
   1f650:	ldr	r2, [sp, #116]	; 0x74
   1f654:	ldr	lr, [r2, #60]	; 0x3c
   1f658:	ldr	r2, [lr]
   1f65c:	mvn	r2, r2
   1f660:	orr	r2, r2, r1
   1f664:	ldr	r1, [lr, #4]
   1f668:	and	r2, r2, r4
   1f66c:	str	r2, [r9]
   1f670:	mvn	r1, r1
   1f674:	orr	r1, r1, ip
   1f678:	ldr	ip, [lr, #8]
   1f67c:	and	r1, r1, r5
   1f680:	orr	r2, r2, r1
   1f684:	mvn	r4, ip
   1f688:	ldr	ip, [lr, #20]
   1f68c:	orr	r4, r4, r0
   1f690:	ldr	r0, [lr, #12]
   1f694:	mvn	ip, ip
   1f698:	orr	ip, ip, fp
   1f69c:	mvn	r5, r0
   1f6a0:	ldr	r0, [sp]
   1f6a4:	and	r4, r4, r0
   1f6a8:	ldr	r0, [lr, #24]
   1f6ac:	orr	r2, r2, r4
   1f6b0:	stmib	r9, {r1, r4}
   1f6b4:	ldr	r1, [sp, #8]
   1f6b8:	ldr	r4, [sp, #56]	; 0x38
   1f6bc:	mvn	r0, r0
   1f6c0:	orr	r5, r5, r1
   1f6c4:	ldr	r1, [lr, #16]
   1f6c8:	and	r5, r5, sl
   1f6cc:	orr	r2, r2, r5
   1f6d0:	ldr	lr, [lr, #28]
   1f6d4:	str	r5, [r9, #12]
   1f6d8:	mvn	r1, r1
   1f6dc:	orr	r1, r1, r8
   1f6e0:	and	r1, r1, r4
   1f6e4:	ldr	r4, [sp, #12]
   1f6e8:	mvn	lr, lr
   1f6ec:	orr	r2, r2, r1
   1f6f0:	str	r1, [r9, #16]
   1f6f4:	ldr	r1, [sp, #24]
   1f6f8:	and	ip, ip, r4
   1f6fc:	orr	r2, r2, ip
   1f700:	str	ip, [r9, #20]
   1f704:	orr	r0, r0, r1
   1f708:	ldr	r1, [sp, #16]
   1f70c:	and	r0, r0, r1
   1f710:	ldr	r1, [sp, #40]	; 0x28
   1f714:	orr	ip, r2, r0
   1f718:	ldr	r2, [sp, #32]
   1f71c:	str	r0, [r9, #24]
   1f720:	orr	lr, lr, r1
   1f724:	and	lr, lr, r2
   1f728:	orr	ip, ip, lr
   1f72c:	str	lr, [r9, #28]
   1f730:	cmp	ip, #0
   1f734:	beq	1f2a8 <__assert_fail@plt+0xdde0>
   1f738:	tst	r3, #8
   1f73c:	beq	1f878 <__assert_fail@plt+0xe3b0>
   1f740:	ldr	r3, [sp, #52]	; 0x34
   1f744:	cmp	r3, #1
   1f748:	beq	20030 <__assert_fail@plt+0xeb68>
   1f74c:	ldr	r2, [sp, #116]	; 0x74
   1f750:	ldr	r5, [r9]
   1f754:	ldr	r1, [r9, #24]
   1f758:	add	r7, r2, #112	; 0x70
   1f75c:	ldr	r3, [r2, #92]	; 0x5c
   1f760:	ldm	r7, {r7, sl, lr}
   1f764:	str	r1, [sp, #12]
   1f768:	cmp	r3, #1
   1f76c:	ldr	ip, [r9, #28]
   1f770:	ldr	r3, [r9, #8]
   1f774:	ldr	r0, [r2, #100]	; 0x64
   1f778:	str	lr, [sp, #32]
   1f77c:	ldr	r1, [r2, #104]	; 0x68
   1f780:	str	r3, [sp]
   1f784:	str	ip, [sp, #16]
   1f788:	ldr	r3, [r9, #20]
   1f78c:	ldr	ip, [r2, #96]	; 0x60
   1f790:	ldr	r4, [r9, #4]
   1f794:	str	r3, [sp, #8]
   1f798:	ldr	r3, [r2, #108]	; 0x6c
   1f79c:	ldr	r2, [r2, #124]	; 0x7c
   1f7a0:	ldr	r8, [r9, #12]
   1f7a4:	ldr	fp, [r9, #16]
   1f7a8:	str	r2, [sp, #24]
   1f7ac:	ble	1ffc4 <__assert_fail@plt+0xeafc>
   1f7b0:	ldr	r2, [sp, #116]	; 0x74
   1f7b4:	ldr	r2, [r2, #60]	; 0x3c
   1f7b8:	ldr	lr, [r2]
   1f7bc:	and	ip, ip, lr
   1f7c0:	ldr	lr, [r2, #4]
   1f7c4:	bic	ip, r5, ip
   1f7c8:	str	ip, [r9]
   1f7cc:	and	r0, r0, lr
   1f7d0:	ldr	lr, [r2, #16]
   1f7d4:	bic	r4, r4, r0
   1f7d8:	ldr	r0, [r2, #8]
   1f7dc:	orr	r5, ip, r4
   1f7e0:	str	r4, [r9, #4]
   1f7e4:	ldr	ip, [sp]
   1f7e8:	and	r7, r7, lr
   1f7ec:	bic	r7, fp, r7
   1f7f0:	and	r1, r1, r0
   1f7f4:	ldr	r0, [r2, #20]
   1f7f8:	str	r7, [r9, #16]
   1f7fc:	bic	r1, ip, r1
   1f800:	ldr	ip, [r2, #12]
   1f804:	orr	r5, r5, r1
   1f808:	str	r1, [r9, #8]
   1f80c:	and	r0, r0, sl
   1f810:	and	r3, r3, ip
   1f814:	ldr	ip, [r2, #24]
   1f818:	bic	r3, r8, r3
   1f81c:	orr	r5, r5, r3
   1f820:	ldr	r2, [r2, #28]
   1f824:	str	r3, [r9, #12]
   1f828:	orr	r5, r5, r7
   1f82c:	ldr	r3, [sp, #8]
   1f830:	bic	r0, r3, r0
   1f834:	ldr	r3, [sp, #32]
   1f838:	orr	r5, r5, r0
   1f83c:	str	r0, [r9, #20]
   1f840:	and	r3, r3, ip
   1f844:	mov	ip, r3
   1f848:	ldr	r3, [sp, #12]
   1f84c:	bic	ip, r3, ip
   1f850:	ldr	r3, [sp, #24]
   1f854:	orr	r5, r5, ip
   1f858:	str	ip, [r9, #24]
   1f85c:	and	r3, r3, r2
   1f860:	ldr	r2, [sp, #16]
   1f864:	bic	r3, r2, r3
   1f868:	orr	r2, r5, r3
   1f86c:	str	r3, [r9, #28]
   1f870:	cmp	r2, #0
   1f874:	beq	1f2a8 <__assert_fail@plt+0xdde0>
   1f878:	ldr	r3, [sp, #48]	; 0x30
   1f87c:	cmp	r3, #0
   1f880:	movle	fp, #0
   1f884:	ble	1fc3c <__assert_fail@plt+0xe774>
   1f888:	add	r3, sp, #3312	; 0xcf0
   1f88c:	mov	fp, #0
   1f890:	add	r3, r3, #8
   1f894:	add	r4, sp, #6336	; 0x18c0
   1f898:	add	r4, r4, #56	; 0x38
   1f89c:	str	fp, [sp]
   1f8a0:	mov	r6, r4
   1f8a4:	str	r3, [sp, #8]
   1f8a8:	str	r3, [sp, #108]	; 0x6c
   1f8ac:	b	1f90c <__assert_fail@plt+0xe444>
   1f8b0:	ldr	r3, [sp, #96]	; 0x60
   1f8b4:	add	r0, sp, #14528	; 0x38c0
   1f8b8:	add	r0, r0, #56	; 0x38
   1f8bc:	ldrb	r2, [r3]
   1f8c0:	asr	r3, r2, #5
   1f8c4:	and	r2, r2, #31
   1f8c8:	add	r3, r0, r3, lsl #2
   1f8cc:	add	r3, r3, r1
   1f8d0:	sub	r3, r3, #8192	; 0x2000
   1f8d4:	ldr	r3, [r3]
   1f8d8:	lsr	r2, r3, r2
   1f8dc:	tst	r2, #1
   1f8e0:	bne	1f920 <__assert_fail@plt+0xe458>
   1f8e4:	ldr	r3, [sp]
   1f8e8:	add	r6, r6, #32
   1f8ec:	add	r2, r3, #1
   1f8f0:	ldr	r3, [sp, #48]	; 0x30
   1f8f4:	str	r2, [sp]
   1f8f8:	cmp	r2, r3
   1f8fc:	ldr	r3, [sp, #8]
   1f900:	add	r3, r3, #12
   1f904:	str	r3, [sp, #8]
   1f908:	bge	1fdd8 <__assert_fail@plt+0xe910>
   1f90c:	ldr	r3, [sp, #52]	; 0x34
   1f910:	cmp	r3, #1
   1f914:	ldr	r3, [sp]
   1f918:	lsl	r1, r3, #5
   1f91c:	beq	1f8b0 <__assert_fail@plt+0xe3e8>
   1f920:	ldr	fp, [r6]
   1f924:	ldm	r9, {r2, r4, lr}
   1f928:	ldr	sl, [r6, #4]
   1f92c:	and	r3, r2, fp
   1f930:	str	fp, [sp, #56]	; 0x38
   1f934:	ldr	r8, [r6, #8]
   1f938:	str	r3, [sp, #64]	; 0x40
   1f93c:	ldr	r7, [r6, #12]
   1f940:	and	r1, r4, sl
   1f944:	orr	r3, r3, r1
   1f948:	ldr	ip, [r9, #12]
   1f94c:	and	r0, lr, r8
   1f950:	str	r1, [sp, #68]	; 0x44
   1f954:	mov	r5, r0
   1f958:	ldr	r1, [r6, #16]
   1f95c:	orr	r3, r3, r5
   1f960:	ldr	r0, [r9, #16]
   1f964:	and	fp, ip, r7
   1f968:	orr	r3, r3, fp
   1f96c:	str	r5, [sp, #72]	; 0x48
   1f970:	ldr	r5, [r9, #20]
   1f974:	str	fp, [sp, #76]	; 0x4c
   1f978:	ldr	fp, [r9, #24]
   1f97c:	str	r5, [sp, #12]
   1f980:	ldr	r5, [r6, #20]
   1f984:	str	r1, [sp, #60]	; 0x3c
   1f988:	str	r5, [sp, #16]
   1f98c:	and	r5, r0, r1
   1f990:	orr	r3, r3, r5
   1f994:	ldr	r1, [sp, #12]
   1f998:	str	fp, [sp, #24]
   1f99c:	str	r5, [sp, #80]	; 0x50
   1f9a0:	ldr	r5, [sp, #16]
   1f9a4:	ldr	fp, [r6, #24]
   1f9a8:	and	r1, r1, r5
   1f9ac:	ldr	r5, [r9, #28]
   1f9b0:	orr	r3, r3, r1
   1f9b4:	str	fp, [sp, #32]
   1f9b8:	ldr	fp, [sp, #24]
   1f9bc:	str	r5, [sp, #40]	; 0x28
   1f9c0:	str	r1, [sp, #84]	; 0x54
   1f9c4:	ldr	r1, [r6, #28]
   1f9c8:	ldr	r5, [sp, #32]
   1f9cc:	and	fp, fp, r5
   1f9d0:	ldr	r5, [sp, #40]	; 0x28
   1f9d4:	orr	r3, r3, fp
   1f9d8:	str	fp, [sp, #88]	; 0x58
   1f9dc:	and	r5, r5, r1
   1f9e0:	orrs	r3, r3, r5
   1f9e4:	str	r5, [sp, #92]	; 0x5c
   1f9e8:	beq	1f8e4 <__assert_fail@plt+0xe41c>
   1f9ec:	ldr	fp, [sp, #56]	; 0x38
   1f9f0:	bic	r5, sl, r4
   1f9f4:	bic	r4, r4, sl
   1f9f8:	str	r5, [sp, #120]	; 0x78
   1f9fc:	bic	r3, fp, r2
   1fa00:	bic	r2, r2, fp
   1fa04:	ldr	fp, [sp, #32]
   1fa08:	mov	sl, r3
   1fa0c:	str	r3, [sp, #56]	; 0x38
   1fa10:	orr	r3, sl, r5
   1fa14:	bic	sl, r8, lr
   1fa18:	bic	lr, lr, r8
   1fa1c:	stm	r9, {r2, r4}
   1fa20:	orr	r2, r2, r4
   1fa24:	orr	r2, r2, lr
   1fa28:	bic	r8, r7, ip
   1fa2c:	ldr	r5, [sp, #16]
   1fa30:	str	lr, [r9, #8]
   1fa34:	bic	ip, ip, r7
   1fa38:	orr	r3, r3, sl
   1fa3c:	ldr	lr, [sp, #60]	; 0x3c
   1fa40:	orr	r2, r2, ip
   1fa44:	orr	r3, r3, r8
   1fa48:	str	ip, [r9, #12]
   1fa4c:	ldr	ip, [sp, #24]
   1fa50:	bic	r7, lr, r0
   1fa54:	bic	r0, r0, lr
   1fa58:	ldr	lr, [sp, #12]
   1fa5c:	orr	r2, r2, r0
   1fa60:	orr	r3, r3, r7
   1fa64:	str	r0, [r9, #16]
   1fa68:	bic	r0, ip, fp
   1fa6c:	bic	r4, r5, lr
   1fa70:	bic	r5, lr, r5
   1fa74:	bic	lr, fp, ip
   1fa78:	ldr	fp, [sp, #40]	; 0x28
   1fa7c:	orr	r3, r3, r4
   1fa80:	orr	r2, r2, r5
   1fa84:	orr	r3, r3, lr
   1fa88:	str	r5, [r9, #20]
   1fa8c:	orr	r2, r2, r0
   1fa90:	bic	ip, r1, fp
   1fa94:	bic	r1, fp, r1
   1fa98:	orrs	r3, r3, ip
   1fa9c:	orr	r5, r2, r1
   1faa0:	strd	r0, [r9, #24]
   1faa4:	beq	1fc10 <__assert_fail@plt+0xe748>
   1faa8:	ldr	r2, [sp, #48]	; 0x30
   1faac:	str	sl, [r9, #-2072]	; 0xfffff7e8
   1fab0:	ldr	r3, [sp, #64]	; 0x40
   1fab4:	str	ip, [r9, #-2052]	; 0xfffff7fc
   1fab8:	ldr	r1, [sp, #68]	; 0x44
   1fabc:	ldr	r0, [sp, #72]	; 0x48
   1fac0:	str	r3, [r9, #-2112]	; 0xfffff7c0
   1fac4:	ldr	fp, [sp, #76]	; 0x4c
   1fac8:	str	r1, [r9, #-2108]	; 0xfffff7c4
   1facc:	lsl	r1, r2, #1
   1fad0:	ldr	ip, [sp, #124]	; 0x7c
   1fad4:	str	r0, [r9, #-2104]	; 0xfffff7c8
   1fad8:	add	r0, sp, #14528	; 0x38c0
   1fadc:	add	r0, r0, #56	; 0x38
   1fae0:	str	r1, [sp, #60]	; 0x3c
   1fae4:	add	r3, r0, r2, lsl #5
   1fae8:	add	r2, r1, r2
   1faec:	ldr	r1, [sp, #80]	; 0x50
   1faf0:	str	fp, [r9, #-2100]	; 0xfffff7cc
   1faf4:	ldr	fp, [sp, #88]	; 0x58
   1faf8:	sub	r3, r3, #8192	; 0x2000
   1fafc:	ldr	r0, [sp, #108]	; 0x6c
   1fb00:	str	r1, [r9, #-2096]	; 0xfffff7d0
   1fb04:	ldr	r1, [sp, #84]	; 0x54
   1fb08:	str	r8, [r9, #-2068]	; 0xfffff7ec
   1fb0c:	add	r0, r0, r2, lsl #2
   1fb10:	str	r1, [r9, #-2092]	; 0xfffff7d4
   1fb14:	ldr	r1, [sp, #92]	; 0x5c
   1fb18:	str	r7, [r9, #-2064]	; 0xfffff7f0
   1fb1c:	str	r4, [r9, #-2060]	; 0xfffff7f4
   1fb20:	str	lr, [r9, #-2056]	; 0xfffff7f8
   1fb24:	str	r0, [sp, #12]
   1fb28:	str	fp, [r9, #-2088]	; 0xfffff7d8
   1fb2c:	str	r1, [r9, #-2084]	; 0xfffff7dc
   1fb30:	ldr	r1, [sp, #56]	; 0x38
   1fb34:	str	r1, [r9, #-2080]	; 0xfffff7e0
   1fb38:	ldr	r1, [sp, #120]	; 0x78
   1fb3c:	str	r1, [r9, #-2076]	; 0xfffff7e4
   1fb40:	ldrd	r0, [ip]
   1fb44:	ldrd	sl, [sp, #184]	; 0xb8
   1fb48:	ldr	r4, [sp, #12]
   1fb4c:	strd	r0, [r3]
   1fb50:	ldrd	r0, [sp, #192]	; 0xc0
   1fb54:	strd	sl, [sp, #24]
   1fb58:	ldrd	sl, [ip, #8]
   1fb5c:	strd	r0, [sp, #32]
   1fb60:	ldrd	r0, [ip, #16]
   1fb64:	strd	r0, [sp, #16]
   1fb68:	mov	r0, sl
   1fb6c:	mov	r1, fp
   1fb70:	ldrd	sl, [sp, #200]	; 0xc8
   1fb74:	strd	r0, [r3, #8]
   1fb78:	ldrd	r0, [sp, #16]
   1fb7c:	strd	sl, [sp, #40]	; 0x28
   1fb80:	ldrd	sl, [ip, #24]
   1fb84:	strd	r0, [r3, #16]
   1fb88:	ldrd	r0, [sp, #208]	; 0xd0
   1fb8c:	strd	r0, [sp, #16]
   1fb90:	mov	r0, sl
   1fb94:	mov	r1, fp
   1fb98:	ldrd	sl, [sp, #24]
   1fb9c:	strd	r0, [r3, #24]
   1fba0:	ldr	r3, [sp, #8]
   1fba4:	ldrd	r0, [sp, #32]
   1fba8:	strd	sl, [r6]
   1fbac:	ldrd	sl, [sp, #40]	; 0x28
   1fbb0:	ldr	r3, [r3, #4]
   1fbb4:	strd	r0, [r6, #8]
   1fbb8:	ldrd	r0, [sp, #16]
   1fbbc:	strd	sl, [r6, #16]
   1fbc0:	cmp	r3, #0
   1fbc4:	str	r3, [r4, #4]
   1fbc8:	strd	r0, [r6, #24]
   1fbcc:	ble	1fc54 <__assert_fail@plt+0xe78c>
   1fbd0:	ldr	r1, [sp, #108]	; 0x6c
   1fbd4:	lsl	r0, r3, #2
   1fbd8:	str	r3, [r1, r2, lsl #2]
   1fbdc:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1fbe0:	cmp	r0, #0
   1fbe4:	str	r0, [r4, #8]
   1fbe8:	ldr	r1, [sp, #60]	; 0x3c
   1fbec:	beq	20108 <__assert_fail@plt+0xec40>
   1fbf0:	ldr	r3, [sp, #8]
   1fbf4:	ldr	r2, [r3, #4]
   1fbf8:	ldr	r1, [r3, #8]
   1fbfc:	lsl	r2, r2, #2
   1fc00:	bl	11204 <memcpy@plt>
   1fc04:	ldr	r3, [sp, #48]	; 0x30
   1fc08:	add	r3, r3, #1
   1fc0c:	str	r3, [sp, #48]	; 0x30
   1fc10:	ldr	r0, [sp, #8]
   1fc14:	ldr	r3, [sp, #100]	; 0x64
   1fc18:	ldr	r2, [sp, #112]	; 0x70
   1fc1c:	ldr	r3, [r3, #12]
   1fc20:	ldr	r1, [r3, r2]
   1fc24:	bl	19998 <__assert_fail@plt+0x84d0>
   1fc28:	cmp	r0, #0
   1fc2c:	beq	1fd80 <__assert_fail@plt+0xe8b8>
   1fc30:	cmp	r5, #0
   1fc34:	bne	1f8e4 <__assert_fail@plt+0xe41c>
   1fc38:	ldr	fp, [sp]
   1fc3c:	ldr	r3, [sp, #48]	; 0x30
   1fc40:	cmp	r3, fp
   1fc44:	beq	1fde8 <__assert_fail@plt+0xe920>
   1fc48:	ldr	r3, [sp, #100]	; 0x64
   1fc4c:	ldr	r6, [r3, #8]
   1fc50:	b	1f2a8 <__assert_fail@plt+0xdde0>
   1fc54:	ldr	r1, [sp, #108]	; 0x6c
   1fc58:	mov	r3, #0
   1fc5c:	str	r3, [r1, r2, lsl #2]
   1fc60:	ldr	r2, [sp, #12]
   1fc64:	str	r3, [r2, #4]
   1fc68:	str	r3, [r2, #8]
   1fc6c:	b	1fc04 <__assert_fail@plt+0xe73c>
   1fc70:	ldr	r1, [sp, #116]	; 0x74
   1fc74:	ldr	r2, [r1, #92]	; 0x5c
   1fc78:	cmp	r2, #1
   1fc7c:	ble	1feb4 <__assert_fail@plt+0xe9ec>
   1fc80:	ldr	r2, [r1, #60]	; 0x3c
   1fc84:	ldm	r9, {r1, ip}
   1fc88:	ldm	r2, {r0, lr}
   1fc8c:	ldr	r4, [r2, #8]
   1fc90:	orr	r1, r1, r0
   1fc94:	orr	ip, ip, lr
   1fc98:	ldr	r0, [r9, #8]
   1fc9c:	stm	r9, {r1, ip}
   1fca0:	ldr	lr, [r2, #12]
   1fca4:	ldr	r1, [r9, #12]
   1fca8:	orr	r0, r0, r4
   1fcac:	str	r0, [r9, #8]
   1fcb0:	ldr	r4, [r2, #16]
   1fcb4:	orr	r1, r1, lr
   1fcb8:	ldr	r0, [r9, #16]
   1fcbc:	ldr	ip, [r2, #20]
   1fcc0:	str	r1, [r9, #12]
   1fcc4:	ldr	lr, [r9, #20]
   1fcc8:	orr	r0, r0, r4
   1fccc:	ldr	r1, [r2, #24]
   1fcd0:	str	r0, [r9, #16]
   1fcd4:	ldr	r0, [r9, #24]
   1fcd8:	orr	ip, lr, ip
   1fcdc:	ldr	r2, [r2, #28]
   1fce0:	str	ip, [r9, #20]
   1fce4:	ldr	ip, [r9, #28]
   1fce8:	orr	r1, r0, r1
   1fcec:	str	r1, [r9, #24]
   1fcf0:	orr	r2, ip, r2
   1fcf4:	str	r2, [r9, #28]
   1fcf8:	ldr	r2, [sp, #116]	; 0x74
   1fcfc:	ldr	r2, [r2, #128]	; 0x80
   1fd00:	tst	r2, #64	; 0x40
   1fd04:	beq	1fea4 <__assert_fail@plt+0xe9dc>
   1fd08:	tst	r2, #128	; 0x80
   1fd0c:	beq	1f5b4 <__assert_fail@plt+0xe0ec>
   1fd10:	ldr	r2, [r9]
   1fd14:	bic	r2, r2, #1
   1fd18:	str	r2, [r9]
   1fd1c:	b	1f5b4 <__assert_fail@plt+0xe0ec>
   1fd20:	ldr	r2, [r9]
   1fd24:	ldr	r1, [sp, #128]	; 0x80
   1fd28:	ldr	r0, [sp, #132]	; 0x84
   1fd2c:	tst	r2, #1024	; 0x400
   1fd30:	str	r1, [r9]
   1fd34:	strd	r0, [r9, #4]
   1fd38:	str	r0, [r9, #12]
   1fd3c:	str	r1, [r9, #16]
   1fd40:	str	r0, [r9, #20]
   1fd44:	str	r1, [r9, #24]
   1fd48:	str	r0, [r9, #28]
   1fd4c:	beq	1f2a8 <__assert_fail@plt+0xdde0>
   1fd50:	mov	r2, #1024	; 0x400
   1fd54:	tst	r3, #128	; 0x80
   1fd58:	str	r2, [r9]
   1fd5c:	beq	1f5cc <__assert_fail@plt+0xe104>
   1fd60:	ldr	r3, [sp, #128]	; 0x80
   1fd64:	ldr	r2, [sp, #132]	; 0x84
   1fd68:	str	r3, [r9]
   1fd6c:	strd	r2, [r9, #4]
   1fd70:	strd	r2, [r9, #12]
   1fd74:	strd	r2, [r9, #20]
   1fd78:	str	r2, [r9, #28]
   1fd7c:	b	1f2a8 <__assert_fail@plt+0xdde0>
   1fd80:	ldr	r3, [sp, #48]	; 0x30
   1fd84:	lsl	r3, r3, #1
   1fd88:	mov	r2, r3
   1fd8c:	mov	r3, r2
   1fd90:	ldr	r2, [sp, #48]	; 0x30
   1fd94:	ldr	r4, [sp, #108]	; 0x6c
   1fd98:	add	r1, r3, r2
   1fd9c:	add	r5, r4, r1, lsl #2
   1fda0:	add	r4, r4, #12
   1fda4:	ldr	r0, [r4, #-4]
   1fda8:	bl	14484 <__assert_fail@plt+0x2fbc>
   1fdac:	cmp	r5, r4
   1fdb0:	bne	1fda0 <__assert_fail@plt+0xe8d8>
   1fdb4:	mov	r0, #0
   1fdb8:	add	sp, sp, #14528	; 0x38c0
   1fdbc:	add	sp, sp, #60	; 0x3c
   1fdc0:	ldrd	r4, [sp]
   1fdc4:	ldrd	r6, [sp, #8]
   1fdc8:	ldrd	r8, [sp, #16]
   1fdcc:	ldrd	sl, [sp, #24]
   1fdd0:	add	sp, sp, #32
   1fdd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fdd8:	ldr	r3, [sp, #48]	; 0x30
   1fddc:	mov	fp, r2
   1fde0:	cmp	r3, fp
   1fde4:	bne	1fc48 <__assert_fail@plt+0xe780>
   1fde8:	ldr	r2, [sp, #100]	; 0x64
   1fdec:	lsl	sl, r3, #1
   1fdf0:	add	ip, sp, #3312	; 0xcf0
   1fdf4:	add	ip, ip, #8
   1fdf8:	ldrd	r6, [r9]
   1fdfc:	add	r1, sl, r3
   1fe00:	add	r5, ip, r1, lsl #2
   1fe04:	str	ip, [sp, #108]	; 0x6c
   1fe08:	ldr	lr, [sp, #112]	; 0x70
   1fe0c:	ldr	r0, [r2, #12]
   1fe10:	add	r2, sp, #14528	; 0x38c0
   1fe14:	add	r2, r2, #56	; 0x38
   1fe18:	add	r3, r2, r3, lsl #5
   1fe1c:	mov	r2, #1
   1fe20:	sub	r3, r3, #8192	; 0x2000
   1fe24:	ldr	r4, [r0, lr]
   1fe28:	mov	r0, #4
   1fe2c:	strd	r6, [r3]
   1fe30:	ldrd	r6, [r9, #16]
   1fe34:	str	r2, [ip, r1, lsl #2]
   1fe38:	str	r2, [r5, #4]
   1fe3c:	strd	r6, [sp]
   1fe40:	ldrd	r6, [r9, #8]
   1fe44:	strd	r6, [r3, #8]
   1fe48:	ldrd	r6, [sp]
   1fe4c:	strd	r6, [r3, #16]
   1fe50:	ldrd	r6, [r9, #24]
   1fe54:	strd	r6, [r3, #24]
   1fe58:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   1fe5c:	cmp	r0, #0
   1fe60:	str	r0, [r5, #8]
   1fe64:	beq	2011c <__assert_fail@plt+0xec54>
   1fe68:	ldr	r3, [sp, #100]	; 0x64
   1fe6c:	str	r4, [r0]
   1fe70:	ldr	r6, [r3, #8]
   1fe74:	ldr	r3, [sp, #48]	; 0x30
   1fe78:	add	r3, r3, #1
   1fe7c:	str	r3, [sp, #48]	; 0x30
   1fe80:	b	1fd60 <__assert_fail@plt+0xe898>
   1fe84:	ldr	r2, [sp, #116]	; 0x74
   1fe88:	mvn	r0, #0
   1fe8c:	mvn	r1, #0
   1fe90:	strd	r0, [r9]
   1fe94:	strd	r0, [r9, #8]
   1fe98:	ldr	r2, [r2, #128]	; 0x80
   1fe9c:	tst	r2, #64	; 0x40
   1fea0:	bne	1fd08 <__assert_fail@plt+0xe840>
   1fea4:	ldr	r1, [r9]
   1fea8:	bic	r1, r1, #1024	; 0x400
   1feac:	str	r1, [r9]
   1feb0:	b	1fd08 <__assert_fail@plt+0xe840>
   1feb4:	mvn	r0, #0
   1feb8:	mvn	r1, #0
   1febc:	strd	r0, [r9]
   1fec0:	strd	r0, [r9, #8]
   1fec4:	strd	r0, [r9, #16]
   1fec8:	strd	r0, [r9, #24]
   1fecc:	b	1fcf8 <__assert_fail@plt+0xe830>
   1fed0:	and	r2, r4, r1
   1fed4:	ldr	r4, [sp]
   1fed8:	and	r1, r5, ip
   1fedc:	orr	ip, r2, r1
   1fee0:	and	lr, lr, r8
   1fee4:	ldr	r5, [sp, #8]
   1fee8:	mov	r8, lr
   1feec:	str	r2, [r9]
   1fef0:	ldr	r2, [sp, #12]
   1fef4:	and	r4, r4, r0
   1fef8:	ldr	r0, [sp, #16]
   1fefc:	orr	ip, ip, r4
   1ff00:	and	r5, r5, sl
   1ff04:	ldr	r7, [sp, #24]
   1ff08:	orr	ip, ip, r5
   1ff0c:	and	r2, r2, fp
   1ff10:	orr	ip, ip, lr
   1ff14:	stmib	r9, {r1, r4, r5, r8}
   1ff18:	mov	fp, r2
   1ff1c:	orr	ip, ip, r2
   1ff20:	ldr	r2, [sp, #32]
   1ff24:	and	r0, r0, r7
   1ff28:	str	fp, [r9, #20]
   1ff2c:	ldr	r7, [sp, #40]	; 0x28
   1ff30:	orr	ip, ip, r0
   1ff34:	str	r0, [r9, #24]
   1ff38:	and	r2, r2, r7
   1ff3c:	orr	ip, ip, r2
   1ff40:	str	r2, [r9, #28]
   1ff44:	b	1f730 <__assert_fail@plt+0xe268>
   1ff48:	ldr	r2, [r2, r1, lsl #3]
   1ff4c:	ldm	r9, {r1, ip}
   1ff50:	ldm	r2, {r0, lr}
   1ff54:	ldr	r4, [r2, #8]
   1ff58:	orr	r1, r1, r0
   1ff5c:	orr	ip, ip, lr
   1ff60:	ldr	r0, [r9, #8]
   1ff64:	stm	r9, {r1, ip}
   1ff68:	ldr	lr, [r2, #12]
   1ff6c:	ldr	r1, [r9, #12]
   1ff70:	orr	r0, r0, r4
   1ff74:	str	r0, [r9, #8]
   1ff78:	ldr	r4, [r2, #16]
   1ff7c:	orr	r1, r1, lr
   1ff80:	ldr	r0, [r9, #16]
   1ff84:	ldr	ip, [r2, #20]
   1ff88:	str	r1, [r9, #12]
   1ff8c:	ldr	lr, [r9, #20]
   1ff90:	orr	r0, r0, r4
   1ff94:	ldr	r1, [r2, #24]
   1ff98:	str	r0, [r9, #16]
   1ff9c:	ldr	r0, [r9, #24]
   1ffa0:	orr	ip, lr, ip
   1ffa4:	ldr	r2, [r2, #28]
   1ffa8:	str	ip, [r9, #20]
   1ffac:	ldr	ip, [r9, #28]
   1ffb0:	orr	r1, r0, r1
   1ffb4:	str	r1, [r9, #24]
   1ffb8:	orr	r2, ip, r2
   1ffbc:	str	r2, [r9, #28]
   1ffc0:	b	1f5b4 <__assert_fail@plt+0xe0ec>
   1ffc4:	ldr	r2, [sp]
   1ffc8:	bic	ip, r5, ip
   1ffcc:	bic	r0, r4, r0
   1ffd0:	bic	r3, r8, r3
   1ffd4:	bic	r7, fp, r7
   1ffd8:	str	ip, [r9]
   1ffdc:	str	r3, [r9, #12]
   1ffe0:	str	r7, [r9, #16]
   1ffe4:	bic	r1, r2, r1
   1ffe8:	orr	r2, ip, r0
   1ffec:	orr	r2, r2, r1
   1fff0:	strd	r0, [r9, #4]
   1fff4:	orr	r2, r2, r3
   1fff8:	ldrd	r0, [sp, #8]
   1fffc:	orr	r2, r2, r7
   20000:	ldr	r3, [sp, #16]
   20004:	bic	ip, r1, lr
   20008:	ldr	r1, [sp, #24]
   2000c:	bic	sl, r0, sl
   20010:	orr	r2, r2, sl
   20014:	orr	r2, r2, ip
   20018:	str	sl, [r9, #20]
   2001c:	str	ip, [r9, #24]
   20020:	bic	r3, r3, r1
   20024:	orr	r2, r2, r3
   20028:	str	r3, [r9, #28]
   2002c:	b	1f870 <__assert_fail@plt+0xe3a8>
   20030:	ldr	r3, [sp, #96]	; 0x60
   20034:	ldrb	r3, [r3, #6]
   20038:	tst	r3, #64	; 0x40
   2003c:	beq	1f74c <__assert_fail@plt+0xe284>
   20040:	b	1fd60 <__assert_fail@plt+0xe898>
   20044:	ldr	r2, [sp, #96]	; 0x60
   20048:	ldrb	r2, [r2, #6]
   2004c:	tst	r2, #64	; 0x40
   20050:	bne	1f5e0 <__assert_fail@plt+0xe118>
   20054:	b	1fd60 <__assert_fail@plt+0xe898>
   20058:	ldr	r3, [r9, #-2160]	; 0xfffff790
   2005c:	cmp	r3, #0
   20060:	beq	200c4 <__assert_fail@plt+0xebfc>
   20064:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   20068:	ldr	r4, [sp, #108]	; 0x6c
   2006c:	bl	14484 <__assert_fail@plt+0x2fbc>
   20070:	ldr	r3, [sp, #48]	; 0x30
   20074:	add	r5, r3, r3, lsl #1
   20078:	add	r5, r4, r5, lsl #2
   2007c:	add	r4, r4, #12
   20080:	ldr	r0, [r4, #-4]
   20084:	bl	14484 <__assert_fail@plt+0x2fbc>
   20088:	cmp	r4, r5
   2008c:	bne	2007c <__assert_fail@plt+0xebb4>
   20090:	b	1fdb4 <__assert_fail@plt+0xe8ec>
   20094:	mov	r3, #1
   20098:	add	r2, sp, #140	; 0x8c
   2009c:	ldr	r0, [sp, #40]	; 0x28
   200a0:	mov	r1, fp
   200a4:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   200a8:	add	r3, sp, #1264	; 0x4f0
   200ac:	cmp	r0, #0
   200b0:	add	r3, r3, #8
   200b4:	str	r0, [r3, r8, lsl #2]
   200b8:	beq	20058 <__assert_fail@plt+0xeb90>
   200bc:	cmp	r7, r0
   200c0:	beq	200d8 <__assert_fail@plt+0xec10>
   200c4:	ldr	r3, [fp, #92]	; 0x5c
   200c8:	cmp	r3, #2
   200cc:	ldr	r3, [sp, #52]	; 0x34
   200d0:	movge	r3, #1
   200d4:	str	r3, [sp, #52]	; 0x34
   200d8:	mov	r3, #2
   200dc:	add	r2, sp, #140	; 0x8c
   200e0:	ldr	r0, [sp, #40]	; 0x28
   200e4:	mov	r1, fp
   200e8:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   200ec:	cmp	r0, #0
   200f0:	str	r0, [r9, r8, lsl #2]
   200f4:	bne	1f400 <__assert_fail@plt+0xdf38>
   200f8:	ldr	r3, [r9, #-2160]	; 0xfffff790
   200fc:	cmp	r3, #0
   20100:	beq	1f400 <__assert_fail@plt+0xdf38>
   20104:	b	20064 <__assert_fail@plt+0xeb9c>
   20108:	mov	r2, r1
   2010c:	ldr	r1, [sp, #12]
   20110:	str	r0, [r1]
   20114:	str	r0, [r1, #4]
   20118:	b	1fd8c <__assert_fail@plt+0xe8c4>
   2011c:	ldr	r3, [sp, #48]	; 0x30
   20120:	mov	r2, sl
   20124:	str	r0, [r5]
   20128:	str	r0, [r5, #4]
   2012c:	cmp	r3, #0
   20130:	beq	1fdb4 <__assert_fail@plt+0xe8ec>
   20134:	b	1fd8c <__assert_fail@plt+0xe8c4>
   20138:	ldr	r3, [r9, #-2160]	; 0xfffff790
   2013c:	cmp	r3, #0
   20140:	beq	1f3e4 <__assert_fail@plt+0xdf1c>
   20144:	b	20064 <__assert_fail@plt+0xeb9c>
   20148:	add	r2, sp, #3312	; 0xcf0
   2014c:	mov	r3, #12
   20150:	add	r2, r2, #8
   20154:	str	r3, [r9, #-2160]	; 0xfffff790
   20158:	str	r2, [sp, #108]	; 0x6c
   2015c:	b	20068 <__assert_fail@plt+0xeba0>
   20160:	ldr	r2, [lr]
   20164:	ands	r2, r1, r2
   20168:	bne	201c0 <__assert_fail@plt+0xecf8>
   2016c:	add	r2, r2, #1
   20170:	ldr	r8, [lr, r2, lsl #5]
   20174:	tst	r1, r8
   20178:	beq	2016c <__assert_fail@plt+0xeca4>
   2017c:	ldr	r8, [r5]
   20180:	add	r2, r9, r2, lsl #2
   20184:	tst	r1, r8
   20188:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   2018c:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   20190:	str	r2, [r0]
   20194:	b	1f500 <__assert_fail@plt+0xe038>
   20198:	bne	1fdb4 <__assert_fail@plt+0xe8ec>
   2019c:	mov	r1, #256	; 0x100
   201a0:	mov	r0, #4
   201a4:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   201a8:	ldr	r2, [sp, #100]	; 0x64
   201ac:	mov	r3, r0
   201b0:	adds	r0, r0, #0
   201b4:	movne	r0, #1
   201b8:	str	r3, [r2, #44]	; 0x2c
   201bc:	b	1fdb8 <__assert_fail@plt+0xe8f0>
   201c0:	mov	r2, #0
   201c4:	b	2017c <__assert_fail@plt+0xecb4>
   201c8:	ldr	r2, [sp, #52]	; 0x34
   201cc:	ldr	r3, [r9, r0, lsl #2]
   201d0:	cmp	r2, #0
   201d4:	strne	r3, [r7, #1064]	; 0x428
   201d8:	str	r3, [r7, #40]	; 0x28
   201dc:	b	1f560 <__assert_fail@plt+0xe098>
   201e0:	mov	r1, #512	; 0x200
   201e4:	mov	r0, #4
   201e8:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   201ec:	ldr	r3, [sp, #100]	; 0x64
   201f0:	cmp	r0, #0
   201f4:	mov	r7, r0
   201f8:	str	r0, [r3, #48]	; 0x30
   201fc:	beq	20064 <__assert_fail@plt+0xeb9c>
   20200:	ldr	ip, [sp, #56]	; 0x38
   20204:	add	r4, sp, #148	; 0x94
   20208:	mov	lr, r0
   2020c:	add	r5, r0, #1024	; 0x400
   20210:	ldr	r3, [r4, #4]!
   20214:	cmp	r3, #0
   20218:	movne	r0, lr
   2021c:	movne	r1, #1
   20220:	beq	2023c <__assert_fail@plt+0xed74>
   20224:	tst	r3, #1
   20228:	bne	20250 <__assert_fail@plt+0xed88>
   2022c:	lsrs	r3, r3, #1
   20230:	add	r0, r0, #4
   20234:	lsl	r1, r1, #1
   20238:	bne	20224 <__assert_fail@plt+0xed5c>
   2023c:	add	lr, lr, #128	; 0x80
   20240:	add	ip, ip, #4
   20244:	cmp	r5, lr
   20248:	bne	20210 <__assert_fail@plt+0xed48>
   2024c:	b	1f524 <__assert_fail@plt+0xe05c>
   20250:	ldr	r2, [ip]
   20254:	ands	r2, r1, r2
   20258:	bne	20284 <__assert_fail@plt+0xedbc>
   2025c:	add	r2, r2, #1
   20260:	ldr	r6, [ip, r2, lsl #5]
   20264:	tst	r1, r6
   20268:	beq	2025c <__assert_fail@plt+0xed94>
   2026c:	add	r2, r9, r2, lsl #2
   20270:	ldr	r6, [r2, #-2048]	; 0xfffff800
   20274:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   20278:	str	r6, [r0]
   2027c:	str	r2, [r0, #1024]	; 0x400
   20280:	b	2022c <__assert_fail@plt+0xed64>
   20284:	mov	r2, #0
   20288:	b	2026c <__assert_fail@plt+0xeda4>
   2028c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20290:	mov	r4, r0
   20294:	ldr	r0, [r0, #84]	; 0x54
   20298:	ldr	r5, [r1, #4]
   2029c:	strd	r6, [sp, #8]
   202a0:	mov	r7, r3
   202a4:	mov	r6, #0
   202a8:	strd	r8, [sp, #16]
   202ac:	mov	r9, r2
   202b0:	ldr	r3, [r0]
   202b4:	strd	sl, [sp, #24]
   202b8:	str	lr, [sp, #32]
   202bc:	sub	sp, sp, #76	; 0x4c
   202c0:	ldr	r2, [r4, #120]	; 0x78
   202c4:	str	r0, [sp, #16]
   202c8:	str	r1, [sp, #28]
   202cc:	ldr	r1, [sp, #116]	; 0x74
   202d0:	ldr	r3, [r3, r9, lsl #3]
   202d4:	add	r2, r1, r2
   202d8:	cmp	r2, r5
   202dc:	str	r3, [sp, #20]
   202e0:	str	r6, [sp, #40]	; 0x28
   202e4:	bge	20990 <__assert_fail@plt+0xf4c8>
   202e8:	ldr	r3, [sp, #28]
   202ec:	ldr	r2, [r4, #88]	; 0x58
   202f0:	ldr	r6, [r3]
   202f4:	ldr	r5, [r3, #8]
   202f8:	ldr	r3, [r4, #40]	; 0x28
   202fc:	cmp	r6, #0
   20300:	str	r3, [sp, #36]	; 0x24
   20304:	ldr	r3, [r4, #100]	; 0x64
   20308:	str	r3, [sp, #32]
   2030c:	bne	2073c <__assert_fail@plt+0xf274>
   20310:	sub	r1, r7, #1
   20314:	mov	r0, r4
   20318:	str	r7, [r4, #40]	; 0x28
   2031c:	str	r5, [r4, #100]	; 0x64
   20320:	bl	19f58 <__assert_fail@plt+0x8a90>
   20324:	mov	r8, r0
   20328:	mov	r2, #1
   2032c:	mov	r3, #1
   20330:	mov	r0, #4
   20334:	strd	r2, [sp, #48]	; 0x30
   20338:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2033c:	cmp	r0, #0
   20340:	str	r0, [sp, #56]	; 0x38
   20344:	beq	20a00 <__assert_fail@plt+0xf538>
   20348:	mov	ip, #0
   2034c:	add	r5, sp, #48	; 0x30
   20350:	str	r9, [r0]
   20354:	mov	r1, r5
   20358:	ldr	r0, [sp, #16]
   2035c:	str	ip, [sp, #40]	; 0x28
   20360:	ldr	r2, [sp, #20]
   20364:	ldr	r3, [sp, #120]	; 0x78
   20368:	bl	1db98 <__assert_fail@plt+0xc6d0>
   2036c:	cmp	r0, #0
   20370:	str	r0, [sp, #40]	; 0x28
   20374:	bne	2086c <__assert_fail@plt+0xf3a4>
   20378:	ldr	r3, [sp, #52]	; 0x34
   2037c:	mov	r6, r7
   20380:	cmp	r3, #0
   20384:	beq	203b0 <__assert_fail@plt+0xeee8>
   20388:	mov	r2, r6
   2038c:	mov	r0, r4
   20390:	ldr	r3, [sp, #20]
   20394:	ldr	r1, [sp, #120]	; 0x78
   20398:	str	r1, [sp]
   2039c:	mov	r1, r5
   203a0:	bl	1e87c <__assert_fail@plt+0xd3b4>
   203a4:	cmp	r0, #0
   203a8:	str	r0, [sp, #40]	; 0x28
   203ac:	bne	2086c <__assert_fail@plt+0xf3a4>
   203b0:	mov	r3, r8
   203b4:	mov	r2, r5
   203b8:	ldr	r1, [sp, #16]
   203bc:	add	r0, sp, #40	; 0x28
   203c0:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   203c4:	subs	fp, r0, #0
   203c8:	beq	20a08 <__assert_fail@plt+0xf540>
   203cc:	ldr	r3, [r4, #100]	; 0x64
   203d0:	str	fp, [r3, r6, lsl #2]
   203d4:	ldr	r3, [sp, #116]	; 0x74
   203d8:	cmp	r6, r3
   203dc:	bge	2067c <__assert_fail@plt+0xf1b4>
   203e0:	ldr	r3, [r4, #120]	; 0x78
   203e4:	cmp	r3, #0
   203e8:	blt	2067c <__assert_fail@plt+0xf1b4>
   203ec:	ldr	r3, [r4, #100]	; 0x64
   203f0:	mov	r2, #0
   203f4:	add	r9, r6, #1
   203f8:	str	r2, [sp, #8]
   203fc:	ldr	r1, [r3, r9, lsl #2]
   20400:	lsl	r3, r9, #2
   20404:	sub	r8, r9, #1
   20408:	str	r3, [sp, #12]
   2040c:	mov	r3, #0
   20410:	cmp	r1, r3
   20414:	str	r3, [sp, #52]	; 0x34
   20418:	beq	2083c <__assert_fail@plt+0xf374>
   2041c:	add	r5, sp, #48	; 0x30
   20420:	add	r1, r1, #4
   20424:	mov	r0, r5
   20428:	bl	19d94 <__assert_fail@plt+0x88cc>
   2042c:	cmp	r0, #0
   20430:	str	r0, [sp, #40]	; 0x28
   20434:	bne	2086c <__assert_fail@plt+0xf3a4>
   20438:	cmp	fp, #0
   2043c:	beq	205c4 <__assert_fail@plt+0xf0fc>
   20440:	ldr	r3, [fp, #20]
   20444:	mov	r2, #0
   20448:	str	r2, [sp, #44]	; 0x2c
   2044c:	str	r2, [sp, #60]	; 0x3c
   20450:	str	r2, [sp, #64]	; 0x40
   20454:	cmp	r3, r2
   20458:	str	r2, [sp, #68]	; 0x44
   2045c:	ldr	r7, [r4, #84]	; 0x54
   20460:	ble	20a38 <__assert_fail@plt+0xf570>
   20464:	str	r9, [sp, #24]
   20468:	mov	r9, r2
   2046c:	ldr	r3, [fp, #24]
   20470:	ldr	r0, [r7]
   20474:	ldr	r5, [r3]
   20478:	lsl	sl, r5, #3
   2047c:	add	r1, r0, sl
   20480:	b	204f4 <__assert_fail@plt+0xf02c>
   20484:	mov	r2, r8
   20488:	mov	r0, r4
   2048c:	bl	1a070 <__assert_fail@plt+0x8ba8>
   20490:	cmp	r0, #0
   20494:	beq	204d0 <__assert_fail@plt+0xf008>
   20498:	lsl	sl, r5, #2
   2049c:	ldr	r3, [sp, #48]	; 0x30
   204a0:	ldr	r2, [r7, #12]
   204a4:	cmp	r3, #0
   204a8:	ldr	r5, [r2, sl]
   204ac:	beq	207ec <__assert_fail@plt+0xf324>
   204b0:	ldr	r1, [sp, #52]	; 0x34
   204b4:	ldr	r6, [sp, #56]	; 0x38
   204b8:	cmp	r1, #0
   204bc:	bne	20894 <__assert_fail@plt+0xf3cc>
   204c0:	str	r5, [r6]
   204c4:	ldr	r3, [sp, #52]	; 0x34
   204c8:	add	r3, r3, #1
   204cc:	str	r3, [sp, #52]	; 0x34
   204d0:	ldr	r3, [fp, #20]
   204d4:	add	r9, r9, #1
   204d8:	cmp	r9, r3
   204dc:	bge	20820 <__assert_fail@plt+0xf358>
   204e0:	ldr	r3, [fp, #24]
   204e4:	ldr	r0, [r7]
   204e8:	ldr	r5, [r3, r9, lsl #2]
   204ec:	lsl	sl, r5, #3
   204f0:	add	r1, r0, sl
   204f4:	ldrb	r3, [r1, #6]
   204f8:	tst	r3, #16
   204fc:	beq	20484 <__assert_fail@plt+0xefbc>
   20500:	mov	r3, r4
   20504:	mov	r2, r5
   20508:	str	r8, [sp]
   2050c:	add	r1, r7, #128	; 0x80
   20510:	bl	1cb6c <__assert_fail@plt+0xb6a4>
   20514:	cmp	r0, #1
   20518:	ble	207d8 <__assert_fail@plt+0xf310>
   2051c:	ldr	r2, [r4, #100]	; 0x64
   20520:	add	r6, r0, r8
   20524:	lsl	sl, r5, #2
   20528:	ldr	r3, [r7, #12]
   2052c:	ldr	r1, [r2, r6, lsl #2]
   20530:	ldr	r5, [r3, r5, lsl #2]
   20534:	mov	r3, #0
   20538:	str	r3, [sp, #64]	; 0x40
   2053c:	cmp	r1, r3
   20540:	beq	2055c <__assert_fail@plt+0xf094>
   20544:	add	r1, r1, #4
   20548:	add	r0, sp, #60	; 0x3c
   2054c:	bl	19d94 <__assert_fail@plt+0x88cc>
   20550:	cmp	r0, #0
   20554:	str	r0, [sp, #44]	; 0x2c
   20558:	bne	205a4 <__assert_fail@plt+0xf0dc>
   2055c:	mov	r1, r5
   20560:	add	r0, sp, #60	; 0x3c
   20564:	bl	19998 <__assert_fail@plt+0x84d0>
   20568:	cmp	r0, #0
   2056c:	beq	2085c <__assert_fail@plt+0xf394>
   20570:	add	r2, sp, #60	; 0x3c
   20574:	mov	r1, r7
   20578:	ldr	r5, [r4, #100]	; 0x64
   2057c:	add	r0, sp, #44	; 0x2c
   20580:	bl	1e5a8 <__assert_fail@plt+0xd0e0>
   20584:	ldr	r3, [r4, #100]	; 0x64
   20588:	str	r0, [r5, r6, lsl #2]
   2058c:	ldr	r3, [r3, r6, lsl #2]
   20590:	cmp	r3, #0
   20594:	bne	2049c <__assert_fail@plt+0xefd4>
   20598:	ldr	r3, [sp, #44]	; 0x2c
   2059c:	cmp	r3, #0
   205a0:	beq	2049c <__assert_fail@plt+0xefd4>
   205a4:	ldr	r9, [sp, #24]
   205a8:	ldr	r0, [sp, #68]	; 0x44
   205ac:	bl	14484 <__assert_fail@plt+0x2fbc>
   205b0:	ldr	r3, [sp, #44]	; 0x2c
   205b4:	cmp	r3, #0
   205b8:	str	r3, [sp, #40]	; 0x28
   205bc:	bne	2086c <__assert_fail@plt+0xf3a4>
   205c0:	add	r5, sp, #48	; 0x30
   205c4:	ldr	r3, [sp, #52]	; 0x34
   205c8:	mov	r6, r9
   205cc:	cmp	r3, #0
   205d0:	beq	2061c <__assert_fail@plt+0xf154>
   205d4:	mov	r1, r5
   205d8:	ldr	r0, [sp, #16]
   205dc:	ldr	r2, [sp, #20]
   205e0:	ldr	r3, [sp, #120]	; 0x78
   205e4:	bl	1db98 <__assert_fail@plt+0xc6d0>
   205e8:	cmp	r0, #0
   205ec:	str	r0, [sp, #40]	; 0x28
   205f0:	bne	2086c <__assert_fail@plt+0xf3a4>
   205f4:	mov	r2, r9
   205f8:	mov	r0, r4
   205fc:	ldr	r3, [sp, #20]
   20600:	ldr	r1, [sp, #120]	; 0x78
   20604:	str	r1, [sp]
   20608:	mov	r1, r5
   2060c:	bl	1e87c <__assert_fail@plt+0xd3b4>
   20610:	cmp	r0, #0
   20614:	str	r0, [sp, #40]	; 0x28
   20618:	bne	2086c <__assert_fail@plt+0xf3a4>
   2061c:	mov	r1, r8
   20620:	mov	r0, r4
   20624:	ldr	r2, [r4, #88]	; 0x58
   20628:	bl	19f58 <__assert_fail@plt+0x8a90>
   2062c:	mov	r3, r0
   20630:	mov	r2, r5
   20634:	ldr	r1, [sp, #16]
   20638:	add	r0, sp, #40	; 0x28
   2063c:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   20640:	subs	fp, r0, #0
   20644:	beq	20914 <__assert_fail@plt+0xf44c>
   20648:	mov	r2, #0
   2064c:	ldr	r3, [r4, #100]	; 0x64
   20650:	str	r2, [sp, #8]
   20654:	ldr	r2, [sp, #12]
   20658:	str	fp, [r3, r2]
   2065c:	ldr	r2, [sp, #116]	; 0x74
   20660:	cmp	r2, r9
   20664:	ble	2067c <__assert_fail@plt+0xf1b4>
   20668:	ldr	r1, [sp, #8]
   2066c:	add	r9, r9, #1
   20670:	ldr	r2, [r4, #120]	; 0x78
   20674:	cmp	r2, r1
   20678:	bge	203fc <__assert_fail@plt+0xef34>
   2067c:	ldr	r0, [sp, #56]	; 0x38
   20680:	bl	14484 <__assert_fail@plt+0x2fbc>
   20684:	ldr	r3, [r4, #100]	; 0x64
   20688:	ldr	r2, [sp, #116]	; 0x74
   2068c:	ldr	r3, [r3, r2, lsl #2]
   20690:	cmp	r3, #0
   20694:	beq	20a18 <__assert_fail@plt+0xf550>
   20698:	ldr	r2, [sp, #28]
   2069c:	ldr	r1, [sp, #32]
   206a0:	str	r6, [r2]
   206a4:	ldr	r2, [sp, #36]	; 0x24
   206a8:	str	r2, [r4, #40]	; 0x28
   206ac:	ldr	r2, [r3, #8]
   206b0:	str	r1, [r4, #100]	; 0x64
   206b4:	cmp	r2, #0
   206b8:	ble	20a40 <__assert_fail@plt+0xf578>
   206bc:	subs	r2, r2, #1
   206c0:	ldr	ip, [r3, #12]
   206c4:	moveq	r1, r2
   206c8:	beq	20728 <__assert_fail@plt+0xf260>
   206cc:	ldr	lr, [sp, #112]	; 0x70
   206d0:	mov	r1, #0
   206d4:	add	r3, r1, r2
   206d8:	lsr	r3, r3, #1
   206dc:	ldr	r0, [ip, r3, lsl #2]
   206e0:	cmp	r0, lr
   206e4:	blt	209f0 <__assert_fail@plt+0xf528>
   206e8:	cmp	r3, r1
   206ec:	bls	20728 <__assert_fail@plt+0xf260>
   206f0:	add	r2, r3, r1
   206f4:	lsr	r2, r2, #1
   206f8:	ldr	r0, [ip, r2, lsl #2]
   206fc:	cmp	lr, r0
   20700:	ble	20718 <__assert_fail@plt+0xf250>
   20704:	b	209e4 <__assert_fail@plt+0xf51c>
   20708:	ldr	r0, [ip, r3, lsl #2]
   2070c:	cmp	lr, r0
   20710:	bgt	209f0 <__assert_fail@plt+0xf528>
   20714:	mov	r2, r3
   20718:	add	r3, r2, r1
   2071c:	cmp	r2, r1
   20720:	lsr	r3, r3, #1
   20724:	bhi	20708 <__assert_fail@plt+0xf240>
   20728:	ldr	r0, [ip, r1, lsl #2]
   2072c:	ldr	r3, [sp, #112]	; 0x70
   20730:	subs	r0, r0, r3
   20734:	movne	r0, #1
   20738:	b	20878 <__assert_fail@plt+0xf3b0>
   2073c:	sub	r1, r6, #1
   20740:	mov	r0, r4
   20744:	str	r6, [r4, #40]	; 0x28
   20748:	str	r5, [r4, #100]	; 0x64
   2074c:	bl	19f58 <__assert_fail@plt+0x8a90>
   20750:	cmp	r6, r7
   20754:	mov	r8, r0
   20758:	beq	20328 <__assert_fail@plt+0xee60>
   2075c:	ldr	fp, [r5, r6, lsl #2]
   20760:	cmp	fp, #0
   20764:	beq	20980 <__assert_fail@plt+0xf4b8>
   20768:	ldrb	r3, [fp, #52]	; 0x34
   2076c:	ands	r3, r3, #64	; 0x40
   20770:	streq	r3, [sp, #48]	; 0x30
   20774:	streq	r3, [sp, #52]	; 0x34
   20778:	streq	r3, [sp, #56]	; 0x38
   2077c:	beq	203d4 <__assert_fail@plt+0xef0c>
   20780:	ldr	r3, [fp, #8]
   20784:	cmp	r3, #0
   20788:	str	r3, [sp, #52]	; 0x34
   2078c:	ble	2093c <__assert_fail@plt+0xf474>
   20790:	lsl	r0, r3, #2
   20794:	str	r3, [sp, #48]	; 0x30
   20798:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2079c:	cmp	r0, #0
   207a0:	str	r0, [sp, #56]	; 0x38
   207a4:	beq	20a00 <__assert_fail@plt+0xf538>
   207a8:	ldr	r2, [fp, #8]
   207ac:	ldr	r1, [fp, #12]
   207b0:	lsl	r2, r2, #2
   207b4:	bl	11204 <memcpy@plt>
   207b8:	ldrb	r3, [fp, #52]	; 0x34
   207bc:	mov	r2, #0
   207c0:	str	r2, [sp, #40]	; 0x28
   207c4:	tst	r3, #64	; 0x40
   207c8:	beq	203d4 <__assert_fail@plt+0xef0c>
   207cc:	add	r5, sp, #48	; 0x30
   207d0:	ldr	r3, [sp, #52]	; 0x34
   207d4:	b	20380 <__assert_fail@plt+0xeeb8>
   207d8:	cmp	r0, #0
   207dc:	bne	20498 <__assert_fail@plt+0xefd0>
   207e0:	ldr	r0, [r7]
   207e4:	add	r1, r0, sl
   207e8:	b	20484 <__assert_fail@plt+0xefbc>
   207ec:	mov	r2, #1
   207f0:	mov	r3, #1
   207f4:	mov	r0, #4
   207f8:	strd	r2, [sp, #48]	; 0x30
   207fc:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   20800:	cmp	r0, #0
   20804:	str	r0, [sp, #56]	; 0x38
   20808:	beq	20850 <__assert_fail@plt+0xf388>
   2080c:	str	r5, [r0]
   20810:	add	r9, r9, #1
   20814:	ldr	r3, [fp, #20]
   20818:	cmp	r9, r3
   2081c:	blt	204e0 <__assert_fail@plt+0xf018>
   20820:	ldr	r9, [sp, #24]
   20824:	ldr	r0, [sp, #68]	; 0x44
   20828:	bl	14484 <__assert_fail@plt+0x2fbc>
   2082c:	mov	r3, #0
   20830:	add	r5, sp, #48	; 0x30
   20834:	str	r3, [sp, #40]	; 0x28
   20838:	b	205c4 <__assert_fail@plt+0xf0fc>
   2083c:	cmp	fp, #0
   20840:	bne	20440 <__assert_fail@plt+0xef78>
   20844:	mov	r6, r9
   20848:	add	r5, sp, #48	; 0x30
   2084c:	b	2061c <__assert_fail@plt+0xf154>
   20850:	mov	r2, #0
   20854:	mov	r3, #0
   20858:	strd	r2, [sp, #48]	; 0x30
   2085c:	ldr	r0, [sp, #68]	; 0x44
   20860:	bl	14484 <__assert_fail@plt+0x2fbc>
   20864:	mov	r3, #12
   20868:	str	r3, [sp, #40]	; 0x28
   2086c:	ldr	r0, [sp, #56]	; 0x38
   20870:	bl	14484 <__assert_fail@plt+0x2fbc>
   20874:	ldr	r0, [sp, #40]	; 0x28
   20878:	add	sp, sp, #76	; 0x4c
   2087c:	ldrd	r4, [sp]
   20880:	ldrd	r6, [sp, #8]
   20884:	ldrd	r8, [sp, #16]
   20888:	ldrd	sl, [sp, #24]
   2088c:	add	sp, sp, #32
   20890:	pop	{pc}		; (ldr pc, [sp], #4)
   20894:	cmp	r3, r1
   20898:	beq	20958 <__assert_fail@plt+0xf490>
   2089c:	ldr	r3, [r6]
   208a0:	mov	r2, r1
   208a4:	cmp	r5, r3
   208a8:	bge	208dc <__assert_fail@plt+0xf414>
   208ac:	cmp	r1, #0
   208b0:	ble	208c8 <__assert_fail@plt+0xf400>
   208b4:	lsl	r2, r1, #2
   208b8:	add	r0, r6, #4
   208bc:	mov	r1, r6
   208c0:	bl	111d4 <memmove@plt>
   208c4:	mov	r2, #0
   208c8:	str	r5, [r6, r2, lsl #2]
   208cc:	ldr	r3, [sp, #52]	; 0x34
   208d0:	add	r3, r3, #1
   208d4:	str	r3, [sp, #52]	; 0x34
   208d8:	b	204d0 <__assert_fail@plt+0xf008>
   208dc:	sub	r3, r1, #-1073741823	; 0xc0000001
   208e0:	ldr	r0, [r6, r3, lsl #2]
   208e4:	lsl	r3, r3, #2
   208e8:	cmp	r0, r5
   208ec:	ble	208c8 <__assert_fail@plt+0xf400>
   208f0:	add	r3, r3, #4
   208f4:	add	r3, r6, r3
   208f8:	str	r0, [r3], #-4
   208fc:	sub	r1, r1, #1
   20900:	ldr	r0, [r3, #-4]
   20904:	mov	r2, r1
   20908:	cmp	r5, r0
   2090c:	blt	208f8 <__assert_fail@plt+0xf430>
   20910:	b	208c8 <__assert_fail@plt+0xf400>
   20914:	ldr	r3, [sp, #40]	; 0x28
   20918:	cmp	r3, #0
   2091c:	bne	2086c <__assert_fail@plt+0xf3a4>
   20920:	ldr	r2, [sp, #8]
   20924:	ldr	r3, [r4, #100]	; 0x64
   20928:	add	r2, r2, #1
   2092c:	str	r2, [sp, #8]
   20930:	ldr	r2, [sp, #12]
   20934:	str	fp, [r3, r2]
   20938:	b	2065c <__assert_fail@plt+0xf194>
   2093c:	mov	r3, #0
   20940:	add	r5, sp, #48	; 0x30
   20944:	str	r3, [sp, #40]	; 0x28
   20948:	str	r3, [sp, #48]	; 0x30
   2094c:	str	r3, [r5, #4]
   20950:	str	r3, [r5, #8]
   20954:	b	203b0 <__assert_fail@plt+0xeee8>
   20958:	lsl	r3, r1, #1
   2095c:	mov	r0, r6
   20960:	lsl	r1, r1, #3
   20964:	str	r3, [sp, #48]	; 0x30
   20968:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2096c:	subs	r6, r0, #0
   20970:	beq	2085c <__assert_fail@plt+0xf394>
   20974:	str	r6, [sp, #56]	; 0x38
   20978:	ldr	r1, [sp, #52]	; 0x34
   2097c:	b	2089c <__assert_fail@plt+0xf3d4>
   20980:	str	fp, [sp, #48]	; 0x30
   20984:	str	fp, [sp, #52]	; 0x34
   20988:	str	fp, [sp, #56]	; 0x38
   2098c:	b	203d4 <__assert_fail@plt+0xef0c>
   20990:	mvn	r3, #-2147483648	; 0x80000000
   20994:	add	sl, r2, #1
   20998:	sub	r3, r3, r5
   2099c:	cmp	r3, sl
   209a0:	blt	20a00 <__assert_fail@plt+0xf538>
   209a4:	add	r8, r5, sl
   209a8:	cmn	r8, #-1073741823	; 0xc0000001
   209ac:	bhi	20a00 <__assert_fail@plt+0xf538>
   209b0:	ldr	fp, [sp, #28]
   209b4:	lsl	r1, r8, #2
   209b8:	ldr	r0, [fp, #8]
   209bc:	bl	2bb50 <__assert_fail@plt+0x1a688>
   209c0:	subs	r3, r0, #0
   209c4:	beq	20a00 <__assert_fail@plt+0xf538>
   209c8:	lsl	r2, sl, #2
   209cc:	mov	r1, r6
   209d0:	str	r8, [fp, #4]
   209d4:	add	r0, r3, r5, lsl #2
   209d8:	str	r3, [fp, #8]
   209dc:	bl	113e4 <memset@plt>
   209e0:	b	202e8 <__assert_fail@plt+0xee20>
   209e4:	mov	r1, r2
   209e8:	mov	r2, r3
   209ec:	mov	r3, r1
   209f0:	add	r1, r3, #1
   209f4:	cmp	r1, r2
   209f8:	bcc	206d4 <__assert_fail@plt+0xf20c>
   209fc:	b	20728 <__assert_fail@plt+0xf260>
   20a00:	mov	r0, #12
   20a04:	b	20878 <__assert_fail@plt+0xf3b0>
   20a08:	ldr	r3, [sp, #40]	; 0x28
   20a0c:	cmp	r3, #0
   20a10:	beq	203cc <__assert_fail@plt+0xef04>
   20a14:	b	2086c <__assert_fail@plt+0xf3a4>
   20a18:	ldr	r3, [sp, #28]
   20a1c:	mov	r0, #1
   20a20:	str	r6, [r3]
   20a24:	ldr	r3, [sp, #36]	; 0x24
   20a28:	str	r3, [r4, #40]	; 0x28
   20a2c:	ldr	r3, [sp, #32]
   20a30:	str	r3, [r4, #100]	; 0x64
   20a34:	b	20878 <__assert_fail@plt+0xf3b0>
   20a38:	mov	r0, #0
   20a3c:	b	20828 <__assert_fail@plt+0xf360>
   20a40:	mov	r0, #1
   20a44:	b	20878 <__assert_fail@plt+0xf3b0>
   20a48:	mov	ip, r2
   20a4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20a50:	mov	r4, r0
   20a54:	strd	r6, [sp, #8]
   20a58:	mov	r6, r2
   20a5c:	mov	r7, r3
   20a60:	strd	r8, [sp, #16]
   20a64:	mov	r3, #8
   20a68:	mov	r8, r1
   20a6c:	strd	sl, [sp, #24]
   20a70:	str	lr, [sp, #32]
   20a74:	sub	sp, sp, #20
   20a78:	ldr	r2, [ip], #8
   20a7c:	str	r7, [sp]
   20a80:	ldr	r5, [sp, #56]	; 0x38
   20a84:	mov	r1, ip
   20a88:	str	r5, [sp, #4]
   20a8c:	str	r3, [sp, #8]
   20a90:	ldr	r3, [r6, #4]
   20a94:	bl	2028c <__assert_fail@plt+0xedc4>
   20a98:	subs	fp, r0, #0
   20a9c:	beq	20ac0 <__assert_fail@plt+0xf5f8>
   20aa0:	mov	r0, fp
   20aa4:	add	sp, sp, #20
   20aa8:	ldrd	r4, [sp]
   20aac:	ldrd	r6, [sp, #8]
   20ab0:	ldrd	r8, [sp, #16]
   20ab4:	ldrd	sl, [sp, #24]
   20ab8:	add	sp, sp, #32
   20abc:	pop	{pc}		; (ldr pc, [sp], #4)
   20ac0:	ldr	r3, [r4, #108]	; 0x6c
   20ac4:	ldr	r1, [r4, #112]	; 0x70
   20ac8:	ldr	r9, [r6, #4]
   20acc:	ldr	sl, [r8]
   20ad0:	cmp	r3, r1
   20ad4:	ldr	r0, [r4, #116]	; 0x74
   20ad8:	movlt	lr, r9
   20adc:	bge	20b78 <__assert_fail@plt+0xf6b0>
   20ae0:	add	r2, r3, r3, lsl #1
   20ae4:	cmp	r3, #0
   20ae8:	lsl	r2, r2, #3
   20aec:	ble	20b08 <__assert_fail@plt+0xf640>
   20af0:	sub	r1, r2, #24
   20af4:	add	r1, r0, r1
   20af8:	ldr	ip, [r1, #4]
   20afc:	cmp	r5, ip
   20b00:	moveq	ip, #1
   20b04:	strbeq	ip, [r1, #20]
   20b08:	cmp	sl, r9
   20b0c:	add	ip, r0, r2
   20b10:	str	r7, [r0, r2]
   20b14:	add	r3, r3, #1
   20b18:	movne	r0, #0
   20b1c:	mvneq	r0, #0
   20b20:	mov	r1, #0
   20b24:	stmib	ip, {r5, sl}
   20b28:	str	r9, [ip, #12]
   20b2c:	sub	r2, r9, sl
   20b30:	add	r5, r5, lr
   20b34:	str	r0, [ip, #16]
   20b38:	mov	r0, r4
   20b3c:	str	r3, [r4, #108]	; 0x6c
   20b40:	strb	r1, [ip, #20]
   20b44:	ldr	r3, [r4, #120]	; 0x78
   20b48:	cmp	r3, r2
   20b4c:	strlt	r2, [r4, #120]	; 0x78
   20b50:	ldr	r1, [r8]
   20b54:	sub	r1, r5, r1
   20b58:	add	sp, sp, #20
   20b5c:	ldrd	r4, [sp]
   20b60:	ldrd	r6, [sp, #8]
   20b64:	ldrd	r8, [sp, #16]
   20b68:	ldrd	sl, [sp, #24]
   20b6c:	ldr	lr, [sp, #32]
   20b70:	add	sp, sp, #36	; 0x24
   20b74:	b	1d848 <__assert_fail@plt+0xc380>
   20b78:	add	r1, r1, r1, lsl #1
   20b7c:	lsl	r1, r1, #4
   20b80:	bl	2bb50 <__assert_fail@plt+0x1a688>
   20b84:	cmp	r0, #0
   20b88:	beq	20bcc <__assert_fail@plt+0xf704>
   20b8c:	ldr	r3, [r4, #108]	; 0x6c
   20b90:	mov	r1, fp
   20b94:	str	r0, [r4, #116]	; 0x74
   20b98:	ldr	r2, [r4, #112]	; 0x70
   20b9c:	add	r3, r3, r3, lsl #1
   20ba0:	add	r2, r2, r2, lsl #1
   20ba4:	add	r0, r0, r3, lsl #3
   20ba8:	lsl	r2, r2, #3
   20bac:	bl	113e4 <memset@plt>
   20bb0:	ldr	lr, [r6, #4]
   20bb4:	ldr	r2, [r4, #112]	; 0x70
   20bb8:	ldr	r3, [r4, #108]	; 0x6c
   20bbc:	ldr	r0, [r4, #116]	; 0x74
   20bc0:	lsl	r2, r2, #1
   20bc4:	str	r2, [r4, #112]	; 0x70
   20bc8:	b	20ae0 <__assert_fail@plt+0xf618>
   20bcc:	ldr	r0, [r4, #116]	; 0x74
   20bd0:	mov	fp, #12
   20bd4:	bl	14484 <__assert_fail@plt+0x2fbc>
   20bd8:	b	20aa0 <__assert_fail@plt+0xf5d8>
   20bdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20be0:	ldr	r4, [r2, #4]
   20be4:	ldrb	ip, [r1, #28]
   20be8:	ldr	r5, [r1]
   20bec:	adds	r3, r4, #0
   20bf0:	strd	r6, [sp, #8]
   20bf4:	movne	r3, #1
   20bf8:	strd	r8, [sp, #16]
   20bfc:	ands	r3, r3, ip, lsr #4
   20c00:	strd	sl, [sp, #24]
   20c04:	str	lr, [sp, #32]
   20c08:	sub	sp, sp, #20
   20c0c:	bne	20e84 <__assert_fail@plt+0xf9bc>
   20c10:	mov	sl, r2
   20c14:	ldr	r2, [r5, #64]	; 0x40
   20c18:	mov	r6, #0
   20c1c:	mov	r7, #0
   20c20:	mov	r1, r0
   20c24:	strd	r6, [sp, #8]
   20c28:	cmp	r2, #31
   20c2c:	beq	20eb4 <__assert_fail@plt+0xf9ec>
   20c30:	ldr	r0, [r5, #56]	; 0x38
   20c34:	lsl	r3, r2, #5
   20c38:	add	r2, r2, #1
   20c3c:	add	r8, r3, #4
   20c40:	mov	lr, #8
   20c44:	add	ip, r0, r3
   20c48:	str	r2, [r5, #64]	; 0x40
   20c4c:	add	r3, r3, #16
   20c50:	add	r8, r0, r8
   20c54:	strb	lr, [sp, #12]
   20c58:	add	r0, r0, r3
   20c5c:	mov	lr, #0
   20c60:	ldrd	r2, [sp, #8]
   20c64:	mvn	r6, #0
   20c68:	str	lr, [ip, #4]
   20c6c:	str	lr, [ip, #8]
   20c70:	str	lr, [ip, #12]
   20c74:	strd	r2, [ip, #24]
   20c78:	ldrb	r3, [r0, #14]
   20c7c:	bic	r3, r3, #12
   20c80:	strb	r3, [r0, #14]
   20c84:	str	lr, [ip, #16]
   20c88:	str	lr, [ip, #20]
   20c8c:	str	r6, [ip, #32]
   20c90:	ldr	r0, [r5, #64]	; 0x40
   20c94:	mov	r2, #0
   20c98:	mov	r3, #0
   20c9c:	strd	r2, [sp, #8]
   20ca0:	cmp	r0, #31
   20ca4:	beq	20ee8 <__assert_fail@plt+0xfa20>
   20ca8:	lsl	r3, r0, #5
   20cac:	add	r2, r0, #1
   20cb0:	ldr	r0, [r5, #56]	; 0x38
   20cb4:	add	r9, r3, #4
   20cb8:	mov	lr, #9
   20cbc:	add	ip, r0, r3
   20cc0:	str	r2, [r5, #64]	; 0x40
   20cc4:	add	r3, r3, #16
   20cc8:	add	r9, r0, r9
   20ccc:	strb	lr, [sp, #12]
   20cd0:	add	r0, r0, r3
   20cd4:	mov	lr, #0
   20cd8:	ldrd	r2, [sp, #8]
   20cdc:	mvn	r6, #0
   20ce0:	str	lr, [ip, #4]
   20ce4:	str	lr, [ip, #8]
   20ce8:	str	lr, [ip, #12]
   20cec:	strd	r2, [ip, #24]
   20cf0:	ldrb	r3, [r0, #14]
   20cf4:	bic	r3, r3, #12
   20cf8:	strb	r3, [r0, #14]
   20cfc:	str	lr, [ip, #16]
   20d00:	str	lr, [ip, #20]
   20d04:	str	r6, [ip, #32]
   20d08:	cmp	r4, #0
   20d0c:	ldr	r0, [r5, #64]	; 0x40
   20d10:	moveq	fp, r9
   20d14:	beq	20d9c <__assert_fail@plt+0xf8d4>
   20d18:	mov	r2, #0
   20d1c:	mov	r3, #0
   20d20:	cmp	r0, #31
   20d24:	strd	r2, [sp, #8]
   20d28:	beq	20f50 <__assert_fail@plt+0xfa88>
   20d2c:	ldr	r2, [r5, #56]	; 0x38
   20d30:	lsl	r3, r0, #5
   20d34:	add	r0, r0, #1
   20d38:	add	fp, r3, #4
   20d3c:	mov	lr, #16
   20d40:	str	r0, [r5, #64]	; 0x40
   20d44:	add	ip, r2, r3
   20d48:	add	r0, r3, lr
   20d4c:	add	fp, r2, fp
   20d50:	strb	lr, [sp, #12]
   20d54:	add	r0, r2, r0
   20d58:	mov	lr, #0
   20d5c:	ldrd	r2, [sp, #8]
   20d60:	mvn	r6, #0
   20d64:	cmp	r9, lr
   20d68:	str	lr, [ip, #4]
   20d6c:	str	r4, [ip, #8]
   20d70:	str	r9, [ip, #12]
   20d74:	strd	r2, [ip, #24]
   20d78:	ldrb	r3, [r0, #14]
   20d7c:	bic	r3, r3, #12
   20d80:	strb	r3, [r0, #14]
   20d84:	str	lr, [ip, #16]
   20d88:	str	lr, [ip, #20]
   20d8c:	str	r6, [ip, #32]
   20d90:	str	fp, [r4]
   20d94:	strne	fp, [r9]
   20d98:	ldr	r0, [r5, #64]	; 0x40
   20d9c:	mov	r2, #0
   20da0:	mov	r3, #0
   20da4:	cmp	r0, #31
   20da8:	strd	r2, [sp, #8]
   20dac:	beq	20f1c <__assert_fail@plt+0xfa54>
   20db0:	ldr	r4, [r5, #56]	; 0x38
   20db4:	lsl	r3, r0, #5
   20db8:	add	r0, r0, #1
   20dbc:	add	r2, r3, #4
   20dc0:	mov	ip, #16
   20dc4:	str	r0, [r5, #64]	; 0x40
   20dc8:	add	r0, r4, r3
   20dcc:	add	r3, r3, ip
   20dd0:	cmp	r8, #0
   20dd4:	strb	ip, [sp, #12]
   20dd8:	mov	ip, #0
   20ddc:	add	r3, r4, r3
   20de0:	ldrd	r6, [sp, #8]
   20de4:	add	r4, r4, r2
   20de8:	mvn	lr, #0
   20dec:	str	ip, [r0, #4]
   20df0:	str	r8, [r0, #8]
   20df4:	str	fp, [r0, #12]
   20df8:	strd	r6, [r0, #24]
   20dfc:	ldrb	r2, [r3, #14]
   20e00:	bic	r2, r2, #12
   20e04:	strb	r2, [r3, #14]
   20e08:	str	ip, [r0, #16]
   20e0c:	str	ip, [r0, #20]
   20e10:	str	lr, [r0, #32]
   20e14:	strne	r4, [r8]
   20e18:	cmp	fp, #0
   20e1c:	beq	20ea4 <__assert_fail@plt+0xf9dc>
   20e20:	cmp	r4, #0
   20e24:	str	r4, [fp]
   20e28:	beq	20ea4 <__assert_fail@plt+0xf9dc>
   20e2c:	cmp	r9, #0
   20e30:	cmpne	r8, #0
   20e34:	beq	20ea4 <__assert_fail@plt+0xf9dc>
   20e38:	ldr	r2, [sl, #20]
   20e3c:	ldrb	r3, [sl, #26]
   20e40:	str	r2, [r9, #20]
   20e44:	str	r2, [r8, #20]
   20e48:	ldrb	r2, [r9, #26]
   20e4c:	ubfx	r3, r3, #3, #1
   20e50:	bfi	r2, r3, #3, #1
   20e54:	strb	r2, [r9, #26]
   20e58:	ldrb	r2, [r8, #26]
   20e5c:	bfi	r2, r3, #3, #1
   20e60:	strb	r2, [r8, #26]
   20e64:	mov	r0, r4
   20e68:	add	sp, sp, #20
   20e6c:	ldrd	r4, [sp]
   20e70:	ldrd	r6, [sp, #8]
   20e74:	ldrd	r8, [sp, #16]
   20e78:	ldrd	sl, [sp, #24]
   20e7c:	add	sp, sp, #32
   20e80:	pop	{pc}		; (ldr pc, [sp], #4)
   20e84:	ldr	r3, [r2, #20]
   20e88:	cmp	r3, #31
   20e8c:	bgt	20e64 <__assert_fail@plt+0xf99c>
   20e90:	ldr	r1, [r5, #80]	; 0x50
   20e94:	lsr	r3, r1, r3
   20e98:	tst	r3, #1
   20e9c:	bne	20c10 <__assert_fail@plt+0xf748>
   20ea0:	b	20e64 <__assert_fail@plt+0xf99c>
   20ea4:	mov	r3, #12
   20ea8:	mov	r4, #0
   20eac:	str	r3, [r1]
   20eb0:	b	20e64 <__assert_fail@plt+0xf99c>
   20eb4:	mov	r0, #996	; 0x3e4
   20eb8:	str	r1, [sp, #4]
   20ebc:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   20ec0:	cmp	r0, #0
   20ec4:	ldr	r1, [sp, #4]
   20ec8:	beq	20f8c <__assert_fail@plt+0xfac4>
   20ecc:	ldr	ip, [r5, #56]	; 0x38
   20ed0:	mov	r2, #1
   20ed4:	mov	r8, #4
   20ed8:	mov	r3, #0
   20edc:	str	ip, [r0]
   20ee0:	str	r0, [r5, #56]	; 0x38
   20ee4:	b	20c40 <__assert_fail@plt+0xf778>
   20ee8:	mov	r0, #996	; 0x3e4
   20eec:	str	r1, [sp, #4]
   20ef0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   20ef4:	cmp	r0, #0
   20ef8:	ldr	r1, [sp, #4]
   20efc:	beq	20f84 <__assert_fail@plt+0xfabc>
   20f00:	ldr	ip, [r5, #56]	; 0x38
   20f04:	mov	r2, #1
   20f08:	mov	r9, #4
   20f0c:	mov	r3, #0
   20f10:	str	ip, [r0]
   20f14:	str	r0, [r5, #56]	; 0x38
   20f18:	b	20cb8 <__assert_fail@plt+0xf7f0>
   20f1c:	mov	r0, #996	; 0x3e4
   20f20:	str	r1, [sp, #4]
   20f24:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   20f28:	subs	r4, r0, #0
   20f2c:	ldr	r1, [sp, #4]
   20f30:	beq	20ea4 <__assert_fail@plt+0xf9dc>
   20f34:	ldr	ip, [r5, #56]	; 0x38
   20f38:	mov	r0, #1
   20f3c:	mov	r2, #4
   20f40:	mov	r3, #0
   20f44:	str	ip, [r4]
   20f48:	str	r4, [r5, #56]	; 0x38
   20f4c:	b	20dc0 <__assert_fail@plt+0xf8f8>
   20f50:	mov	r0, #996	; 0x3e4
   20f54:	str	r1, [sp, #4]
   20f58:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   20f5c:	subs	r2, r0, #0
   20f60:	ldr	r1, [sp, #4]
   20f64:	beq	20f94 <__assert_fail@plt+0xfacc>
   20f68:	ldr	ip, [r5, #56]	; 0x38
   20f6c:	mov	fp, #4
   20f70:	mov	r0, #1
   20f74:	mov	r3, #0
   20f78:	str	ip, [r2]
   20f7c:	str	r2, [r5, #56]	; 0x38
   20f80:	b	20d3c <__assert_fail@plt+0xf874>
   20f84:	mov	r9, r0
   20f88:	b	20d08 <__assert_fail@plt+0xf840>
   20f8c:	mov	r8, r0
   20f90:	b	20c90 <__assert_fail@plt+0xf7c8>
   20f94:	mov	fp, r2
   20f98:	b	20d98 <__assert_fail@plt+0xf8d0>
   20f9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20fa0:	mov	r5, r0
   20fa4:	mov	r0, #32
   20fa8:	strd	r6, [sp, #8]
   20fac:	mov	r7, r3
   20fb0:	strd	r8, [sp, #16]
   20fb4:	mov	r9, #0
   20fb8:	strd	sl, [sp, #24]
   20fbc:	mov	fp, r1
   20fc0:	mov	r1, #1
   20fc4:	str	lr, [sp, #32]
   20fc8:	sub	sp, sp, #44	; 0x2c
   20fcc:	mov	sl, r2
   20fd0:	ldrb	r8, [sp, #80]	; 0x50
   20fd4:	str	r9, [sp, #20]
   20fd8:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   20fdc:	subs	r4, r0, #0
   20fe0:	beq	2139c <__assert_fail@plt+0xfed4>
   20fe4:	mov	r1, #1
   20fe8:	mov	r0, #40	; 0x28
   20fec:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   20ff0:	subs	r6, r0, #0
   20ff4:	beq	213dc <__assert_fail@plt+0xff14>
   20ff8:	ldrb	ip, [r6, #16]
   20ffc:	add	lr, sp, #20
   21000:	mov	r0, fp
   21004:	add	r3, r6, #36	; 0x24
   21008:	add	r2, r6, #12
   2100c:	mov	r1, r4
   21010:	bfi	ip, r8, #0, #1
   21014:	strb	ip, [r6, #16]
   21018:	str	lr, [sp]
   2101c:	str	sl, [sp, #4]
   21020:	str	r9, [sp, #8]
   21024:	bl	1aefc <__assert_fail@plt+0x9a34>
   21028:	subs	sl, r0, #0
   2102c:	bne	2147c <__assert_fail@plt+0xffb4>
   21030:	ldrb	r3, [r7]
   21034:	cmp	r3, #0
   21038:	beq	21060 <__assert_fail@plt+0xfb98>
   2103c:	mov	ip, #1
   21040:	asr	r1, r3, #5
   21044:	and	r0, r3, #31
   21048:	ldrb	r3, [r7, #1]!
   2104c:	ldr	r2, [r4, r1, lsl #2]
   21050:	cmp	r3, #0
   21054:	orr	r2, r2, ip, lsl r0
   21058:	str	r2, [r4, r1, lsl #2]
   2105c:	bne	21040 <__assert_fail@plt+0xfb78>
   21060:	cmp	r8, #0
   21064:	beq	210f8 <__assert_fail@plt+0xfc30>
   21068:	ubfx	r1, r4, #2, #1
   2106c:	cmp	r1, #0
   21070:	moveq	r3, r1
   21074:	beq	21088 <__assert_fail@plt+0xfbc0>
   21078:	ldr	r2, [r4]
   2107c:	mov	r3, #1
   21080:	mvn	r2, r2
   21084:	str	r2, [r4]
   21088:	ldr	ip, [r4, r1, lsl #2]
   2108c:	rsb	lr, r1, #8
   21090:	add	r2, r4, r1, lsl #2
   21094:	lsr	lr, lr, #1
   21098:	ldr	r0, [r2, #4]
   2109c:	cmp	lr, #4
   210a0:	mvn	ip, ip
   210a4:	str	ip, [r4, r1, lsl #2]
   210a8:	mvn	r1, r0
   210ac:	ldr	lr, [r2, #8]
   210b0:	ldr	ip, [r2, #12]
   210b4:	ldr	r0, [r2, #16]
   210b8:	mvn	lr, lr
   210bc:	stmib	r2, {r1, lr}
   210c0:	mvn	ip, ip
   210c4:	ldr	r1, [r2, #20]
   210c8:	mvn	r0, r0
   210cc:	str	ip, [r2, #12]
   210d0:	str	r0, [r2, #16]
   210d4:	mvn	r1, r1
   210d8:	str	r1, [r2, #20]
   210dc:	bne	21348 <__assert_fail@plt+0xfe80>
   210e0:	ldr	r1, [r2, #24]
   210e4:	ldr	r3, [r2, #28]
   210e8:	mvn	r1, r1
   210ec:	mvn	r3, r3
   210f0:	str	r1, [r2, #24]
   210f4:	str	r3, [r2, #28]
   210f8:	ldr	r3, [r5, #92]	; 0x5c
   210fc:	cmp	r3, #1
   21100:	ble	211a8 <__assert_fail@plt+0xfce0>
   21104:	ldr	r3, [r5, #60]	; 0x3c
   21108:	add	r2, r4, #8
   2110c:	add	r0, r3, #8
   21110:	orr	r1, r3, r4
   21114:	cmp	r4, r0
   21118:	cmpcc	r3, r2
   2111c:	movcs	r2, #1
   21120:	movcc	r2, #0
   21124:	tst	r1, #7
   21128:	movne	r2, #0
   2112c:	cmp	r2, #0
   21130:	beq	213f8 <__assert_fail@plt+0xff30>
   21134:	ldr	ip, [r3]
   21138:	ldr	r1, [r4]
   2113c:	ldr	r2, [r3, #4]
   21140:	ldr	r0, [r4, #4]
   21144:	and	r1, r1, ip
   21148:	ldr	ip, [r4, #8]
   2114c:	ldr	lr, [r4, #12]
   21150:	and	r2, r2, r0
   21154:	stm	r4, {r1, r2}
   21158:	ldrd	r0, [r3, #8]
   2115c:	and	r0, r0, ip
   21160:	and	r1, r1, lr
   21164:	ldr	ip, [r4, #16]
   21168:	strd	r0, [r4, #8]
   2116c:	ldr	r2, [r3, #16]
   21170:	ldr	r0, [r3, #20]
   21174:	ldr	lr, [r4, #20]
   21178:	and	r2, r2, ip
   2117c:	ldr	ip, [r4, #24]
   21180:	str	r2, [r4, #16]
   21184:	ldr	r2, [r4, #28]
   21188:	and	r0, r0, lr
   2118c:	str	r0, [r4, #20]
   21190:	ldr	r1, [r3, #24]
   21194:	ldr	r3, [r3, #28]
   21198:	and	r1, r1, ip
   2119c:	and	r3, r3, r2
   211a0:	str	r1, [r4, #24]
   211a4:	str	r3, [r4, #28]
   211a8:	ldr	r2, [r5, #64]	; 0x40
   211ac:	mov	r7, #0
   211b0:	str	r7, [sp, #28]
   211b4:	cmp	r2, #31
   211b8:	beq	214bc <__assert_fail@plt+0xfff4>
   211bc:	ldr	r0, [r5, #56]	; 0x38
   211c0:	lsl	r3, r2, #5
   211c4:	add	r2, r2, #1
   211c8:	add	r9, r3, #4
   211cc:	mov	r1, #3
   211d0:	add	r8, r0, r3
   211d4:	str	r4, [sp, #24]
   211d8:	add	r3, r3, #16
   211dc:	str	r2, [r5, #64]	; 0x40
   211e0:	mov	r7, #0
   211e4:	strb	r1, [sp, #28]
   211e8:	add	r1, r0, r3
   211ec:	mvn	ip, #0
   211f0:	ldrd	r2, [sp, #24]
   211f4:	adds	r9, r0, r9
   211f8:	str	r7, [r8, #4]
   211fc:	str	r7, [r8, #8]
   21200:	str	r7, [r8, #12]
   21204:	strd	r2, [r8, #24]
   21208:	ldrb	r3, [r1, #14]
   2120c:	bic	r3, r3, #12
   21210:	strb	r3, [r1, #14]
   21214:	str	r7, [r8, #16]
   21218:	str	r7, [r8, #20]
   2121c:	str	ip, [r8, #32]
   21220:	beq	21368 <__assert_fail@plt+0xfea0>
   21224:	ldr	r3, [r5, #92]	; 0x5c
   21228:	cmp	r3, #1
   2122c:	ble	213ac <__assert_fail@plt+0xfee4>
   21230:	ldrb	r2, [r5, #88]	; 0x58
   21234:	ldr	r3, [r5, #64]	; 0x40
   21238:	orr	r2, r2, #2
   2123c:	cmp	r3, #31
   21240:	strb	r2, [r5, #88]	; 0x58
   21244:	beq	214e8 <__assert_fail@plt+0x10020>
   21248:	lsl	r7, r3, #5
   2124c:	add	r3, r3, #1
   21250:	add	fp, r7, #4
   21254:	mov	r2, #6
   21258:	str	r6, [sp, #24]
   2125c:	add	sl, r0, r7
   21260:	str	r3, [r5, #64]	; 0x40
   21264:	add	r7, r7, #16
   21268:	mvn	ip, #0
   2126c:	strb	r2, [sp, #28]
   21270:	add	r1, r0, r7
   21274:	mov	r7, #0
   21278:	ldrd	r2, [sp, #24]
   2127c:	adds	fp, r0, fp
   21280:	str	r7, [sl, #4]
   21284:	str	r7, [sl, #8]
   21288:	str	r7, [sl, #12]
   2128c:	strd	r2, [sl, #24]
   21290:	ldrb	r3, [r1, #14]
   21294:	bic	r3, r3, #12
   21298:	strb	r3, [r1, #14]
   2129c:	str	r7, [sl, #16]
   212a0:	str	r7, [sl, #20]
   212a4:	str	ip, [sl, #32]
   212a8:	beq	21368 <__assert_fail@plt+0xfea0>
   212ac:	ldr	r1, [r5, #64]	; 0x40
   212b0:	mov	r2, #0
   212b4:	mov	r3, #0
   212b8:	strd	r2, [sp, #32]
   212bc:	cmp	r1, #31
   212c0:	beq	21510 <__assert_fail@plt+0x10048>
   212c4:	lsl	r7, r1, #5
   212c8:	add	r1, r1, #1
   212cc:	add	r4, r7, #4
   212d0:	mov	r3, #10
   212d4:	mov	ip, #0
   212d8:	str	r1, [r5, #64]	; 0x40
   212dc:	add	r1, r0, r7
   212e0:	add	r7, r7, #16
   212e4:	strb	r3, [sp, #36]	; 0x24
   212e8:	add	r4, r0, r4
   212ec:	add	r0, r0, r7
   212f0:	ldrd	r2, [sp, #32]
   212f4:	mvn	lr, #0
   212f8:	str	ip, [r1, #4]
   212fc:	str	r9, [r1, #8]
   21300:	str	fp, [r1, #12]
   21304:	strd	r2, [r1, #24]
   21308:	ldrb	r3, [r0, #14]
   2130c:	bic	r3, r3, #12
   21310:	strb	r3, [r0, #14]
   21314:	str	ip, [r1, #16]
   21318:	str	ip, [r1, #20]
   2131c:	str	lr, [r1, #32]
   21320:	str	r4, [r8, #4]
   21324:	str	r4, [sl, #4]
   21328:	mov	r0, r4
   2132c:	add	sp, sp, #44	; 0x2c
   21330:	ldrd	r4, [sp]
   21334:	ldrd	r6, [sp, #8]
   21338:	ldrd	r8, [sp, #16]
   2133c:	ldrd	sl, [sp, #24]
   21340:	add	sp, sp, #32
   21344:	pop	{pc}		; (ldr pc, [sp], #4)
   21348:	add	r3, r3, #6
   2134c:	ldr	r2, [r4, r3, lsl #2]
   21350:	mvn	r2, r2
   21354:	str	r2, [r4, r3, lsl #2]
   21358:	ldr	r3, [r5, #92]	; 0x5c
   2135c:	cmp	r3, #1
   21360:	bgt	21104 <__assert_fail@plt+0xfc3c>
   21364:	b	211a8 <__assert_fail@plt+0xfce0>
   21368:	mov	r0, r4
   2136c:	mov	r4, #0
   21370:	bl	14484 <__assert_fail@plt+0x2fbc>
   21374:	ldr	r0, [r6]
   21378:	bl	14484 <__assert_fail@plt+0x2fbc>
   2137c:	ldr	r0, [r6, #4]
   21380:	bl	14484 <__assert_fail@plt+0x2fbc>
   21384:	ldr	r0, [r6, #8]
   21388:	bl	14484 <__assert_fail@plt+0x2fbc>
   2138c:	ldr	r0, [r6, #12]
   21390:	bl	14484 <__assert_fail@plt+0x2fbc>
   21394:	mov	r0, r6
   21398:	bl	14484 <__assert_fail@plt+0x2fbc>
   2139c:	ldr	r2, [sp, #84]	; 0x54
   213a0:	mov	r3, #12
   213a4:	str	r3, [r2]
   213a8:	b	21328 <__assert_fail@plt+0xfe60>
   213ac:	ldr	r0, [r6]
   213b0:	mov	r4, r9
   213b4:	bl	14484 <__assert_fail@plt+0x2fbc>
   213b8:	ldr	r0, [r6, #4]
   213bc:	bl	14484 <__assert_fail@plt+0x2fbc>
   213c0:	ldr	r0, [r6, #8]
   213c4:	bl	14484 <__assert_fail@plt+0x2fbc>
   213c8:	ldr	r0, [r6, #12]
   213cc:	bl	14484 <__assert_fail@plt+0x2fbc>
   213d0:	mov	r0, r6
   213d4:	bl	14484 <__assert_fail@plt+0x2fbc>
   213d8:	b	21328 <__assert_fail@plt+0xfe60>
   213dc:	mov	r0, r4
   213e0:	mov	r4, r6
   213e4:	bl	14484 <__assert_fail@plt+0x2fbc>
   213e8:	ldr	r2, [sp, #84]	; 0x54
   213ec:	mov	r3, #12
   213f0:	str	r3, [r2]
   213f4:	b	21328 <__assert_fail@plt+0xfe60>
   213f8:	ldr	r1, [r3]
   213fc:	ldr	r2, [r4]
   21400:	ldr	r0, [r4, #4]
   21404:	and	r2, r2, r1
   21408:	ldr	r1, [r4, #8]
   2140c:	str	r2, [r4]
   21410:	ldr	ip, [r3, #4]
   21414:	ldr	r2, [r4, #12]
   21418:	and	r0, r0, ip
   2141c:	ldr	ip, [r4, #16]
   21420:	str	r0, [r4, #4]
   21424:	ldr	lr, [r3, #8]
   21428:	ldr	r0, [r4, #20]
   2142c:	and	r1, r1, lr
   21430:	str	r1, [r4, #8]
   21434:	ldr	lr, [r3, #12]
   21438:	ldr	r1, [r4, #24]
   2143c:	and	r2, r2, lr
   21440:	str	r2, [r4, #12]
   21444:	ldr	lr, [r3, #16]
   21448:	ldr	r2, [r4, #28]
   2144c:	and	ip, ip, lr
   21450:	str	ip, [r4, #16]
   21454:	ldr	ip, [r3, #20]
   21458:	and	r0, r0, ip
   2145c:	str	r0, [r4, #20]
   21460:	ldr	r0, [r3, #24]
   21464:	and	r1, r1, r0
   21468:	str	r1, [r4, #24]
   2146c:	ldr	r3, [r3, #28]
   21470:	and	r3, r3, r2
   21474:	str	r3, [r4, #28]
   21478:	b	211a8 <__assert_fail@plt+0xfce0>
   2147c:	mov	r0, r4
   21480:	mov	r4, r9
   21484:	bl	14484 <__assert_fail@plt+0x2fbc>
   21488:	ldr	r0, [r6]
   2148c:	bl	14484 <__assert_fail@plt+0x2fbc>
   21490:	ldr	r0, [r6, #4]
   21494:	bl	14484 <__assert_fail@plt+0x2fbc>
   21498:	ldr	r0, [r6, #8]
   2149c:	bl	14484 <__assert_fail@plt+0x2fbc>
   214a0:	ldr	r0, [r6, #12]
   214a4:	bl	14484 <__assert_fail@plt+0x2fbc>
   214a8:	mov	r0, r6
   214ac:	bl	14484 <__assert_fail@plt+0x2fbc>
   214b0:	ldr	r3, [sp, #84]	; 0x54
   214b4:	str	sl, [r3]
   214b8:	b	21328 <__assert_fail@plt+0xfe60>
   214bc:	mov	r0, #996	; 0x3e4
   214c0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   214c4:	cmp	r0, #0
   214c8:	beq	21368 <__assert_fail@plt+0xfea0>
   214cc:	ldr	r1, [r5, #56]	; 0x38
   214d0:	mov	r3, r7
   214d4:	mov	r2, #1
   214d8:	mov	r9, #4
   214dc:	str	r0, [r5, #56]	; 0x38
   214e0:	str	r1, [r0]
   214e4:	b	211cc <__assert_fail@plt+0xfd04>
   214e8:	mov	r0, #996	; 0x3e4
   214ec:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   214f0:	cmp	r0, #0
   214f4:	beq	21368 <__assert_fail@plt+0xfea0>
   214f8:	ldr	r2, [r5, #56]	; 0x38
   214fc:	mov	r3, #1
   21500:	mov	fp, #4
   21504:	str	r0, [r5, #56]	; 0x38
   21508:	str	r2, [r0]
   2150c:	b	21254 <__assert_fail@plt+0xfd8c>
   21510:	mov	r0, #996	; 0x3e4
   21514:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   21518:	cmp	r0, #0
   2151c:	beq	21538 <__assert_fail@plt+0x10070>
   21520:	ldr	r3, [r5, #56]	; 0x38
   21524:	mov	r4, #4
   21528:	mov	r1, #1
   2152c:	str	r0, [r5, #56]	; 0x38
   21530:	str	r3, [r0]
   21534:	b	212d0 <__assert_fail@plt+0xfe08>
   21538:	mov	r4, r0
   2153c:	b	21328 <__assert_fail@plt+0xfe60>
   21540:	strd	r4, [sp, #-32]!	; 0xffffffe0
   21544:	mov	r4, r0
   21548:	mov	r5, r2
   2154c:	strd	r6, [sp, #8]
   21550:	subs	r6, r1, #0
   21554:	strd	r8, [sp, #16]
   21558:	str	sl, [sp, #24]
   2155c:	str	lr, [sp, #28]
   21560:	beq	2157c <__assert_fail@plt+0x100b4>
   21564:	ldr	r3, [r6, #4]
   21568:	cmp	r2, #0
   2156c:	cmpne	r3, #0
   21570:	bgt	215bc <__assert_fail@plt+0x100f4>
   21574:	cmp	r3, #0
   21578:	bgt	215c8 <__assert_fail@plt+0x10100>
   2157c:	cmp	r5, #0
   21580:	beq	21590 <__assert_fail@plt+0x100c8>
   21584:	ldr	r3, [r5, #4]
   21588:	cmp	r3, #0
   2158c:	bgt	215fc <__assert_fail@plt+0x10134>
   21590:	mov	r3, #0
   21594:	mov	r0, r3
   21598:	str	r3, [r4]
   2159c:	str	r3, [r4, #4]
   215a0:	str	r3, [r4, #8]
   215a4:	ldrd	r4, [sp]
   215a8:	ldrd	r6, [sp, #8]
   215ac:	ldrd	r8, [sp, #16]
   215b0:	ldr	sl, [sp, #24]
   215b4:	add	sp, sp, #28
   215b8:	pop	{pc}		; (ldr pc, [sp], #4)
   215bc:	ldr	r2, [r2, #4]
   215c0:	cmp	r2, #0
   215c4:	bgt	21630 <__assert_fail@plt+0x10168>
   215c8:	lsl	r0, r3, #2
   215cc:	str	r3, [r4]
   215d0:	str	r3, [r4, #4]
   215d4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   215d8:	cmp	r0, #0
   215dc:	str	r0, [r4, #8]
   215e0:	beq	2171c <__assert_fail@plt+0x10254>
   215e4:	ldr	r2, [r6, #4]
   215e8:	ldr	r1, [r6, #8]
   215ec:	lsl	r2, r2, #2
   215f0:	bl	11204 <memcpy@plt>
   215f4:	mov	r0, #0
   215f8:	b	215a4 <__assert_fail@plt+0x100dc>
   215fc:	lsl	r0, r3, #2
   21600:	str	r3, [r4]
   21604:	str	r3, [r4, #4]
   21608:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2160c:	cmp	r0, #0
   21610:	str	r0, [r4, #8]
   21614:	beq	2171c <__assert_fail@plt+0x10254>
   21618:	ldr	r2, [r5, #4]
   2161c:	ldr	r1, [r5, #8]
   21620:	lsl	r2, r2, #2
   21624:	bl	11204 <memcpy@plt>
   21628:	mov	r0, #0
   2162c:	b	215a4 <__assert_fail@plt+0x100dc>
   21630:	add	r3, r3, r2
   21634:	lsl	r0, r3, #2
   21638:	str	r3, [r4]
   2163c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   21640:	cmp	r0, #0
   21644:	str	r0, [r4, #8]
   21648:	beq	21730 <__assert_fail@plt+0x10268>
   2164c:	ldr	r7, [r6, #4]
   21650:	ldr	r8, [r5, #4]
   21654:	cmp	r7, #0
   21658:	ble	21738 <__assert_fail@plt+0x10270>
   2165c:	ldr	r1, [r6, #8]
   21660:	cmp	r8, #0
   21664:	movle	r6, #0
   21668:	movle	lr, r0
   2166c:	movle	r3, r6
   21670:	mov	r9, r1
   21674:	ble	21704 <__assert_fail@plt+0x1023c>
   21678:	mov	r6, #0
   2167c:	mov	lr, r0
   21680:	ldr	sl, [r5, #8]
   21684:	mov	ip, r6
   21688:	mov	r3, r6
   2168c:	b	21698 <__assert_fail@plt+0x101d0>
   21690:	cmp	r8, ip
   21694:	ble	21704 <__assert_fail@plt+0x1023c>
   21698:	ldr	r2, [r1]
   2169c:	add	r6, r6, #1
   216a0:	ldr	r1, [sl, ip, lsl #2]
   216a4:	cmp	r2, r1
   216a8:	addgt	ip, ip, #1
   216ac:	strgt	r1, [lr]
   216b0:	bgt	216c0 <__assert_fail@plt+0x101f8>
   216b4:	add	r3, r3, #1
   216b8:	addeq	ip, ip, #1
   216bc:	str	r2, [lr]
   216c0:	cmp	r7, r3
   216c4:	add	r1, r9, r3, lsl #2
   216c8:	add	lr, lr, #4
   216cc:	bgt	21690 <__assert_fail@plt+0x101c8>
   216d0:	cmp	r8, ip
   216d4:	bgt	216e4 <__assert_fail@plt+0x1021c>
   216d8:	mov	r0, #0
   216dc:	str	r6, [r4, #4]
   216e0:	b	215a4 <__assert_fail@plt+0x100dc>
   216e4:	ldr	r1, [r5, #8]
   216e8:	sub	r2, r8, ip
   216ec:	add	r0, r0, r6, lsl #2
   216f0:	add	r6, r6, r2
   216f4:	lsl	r2, r2, #2
   216f8:	add	r1, r1, ip, lsl #2
   216fc:	bl	11204 <memcpy@plt>
   21700:	b	216d8 <__assert_fail@plt+0x10210>
   21704:	sub	r3, r7, r3
   21708:	mov	r0, lr
   2170c:	lsl	r2, r3, #2
   21710:	add	r6, r6, r3
   21714:	bl	11204 <memcpy@plt>
   21718:	b	216d8 <__assert_fail@plt+0x10210>
   2171c:	mov	r3, #0
   21720:	mov	r0, #12
   21724:	str	r3, [r4]
   21728:	str	r3, [r4, #4]
   2172c:	b	215a4 <__assert_fail@plt+0x100dc>
   21730:	mov	r0, #12
   21734:	b	215a4 <__assert_fail@plt+0x100dc>
   21738:	mov	r6, #0
   2173c:	mov	ip, r6
   21740:	b	216d0 <__assert_fail@plt+0x10208>
   21744:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21748:	strd	r6, [sp, #8]
   2174c:	subs	r7, r3, #0
   21750:	subgt	r4, r1, #4
   21754:	subgt	r6, r2, #4
   21758:	str	r8, [sp, #16]
   2175c:	movgt	r5, #0
   21760:	movgt	r8, r0
   21764:	str	lr, [sp, #20]
   21768:	sub	sp, sp, #16
   2176c:	bgt	2179c <__assert_fail@plt+0x102d4>
   21770:	b	21800 <__assert_fail@plt+0x10338>
   21774:	bl	1e5a8 <__assert_fail@plt+0xd0e0>
   21778:	str	r0, [r4]
   2177c:	ldr	r0, [sp, #12]
   21780:	bl	14484 <__assert_fail@plt+0x2fbc>
   21784:	ldr	r3, [sp]
   21788:	cmp	r3, #0
   2178c:	bne	217e4 <__assert_fail@plt+0x1031c>
   21790:	add	r5, r5, #1
   21794:	cmp	r7, r5
   21798:	beq	21800 <__assert_fail@plt+0x10338>
   2179c:	ldr	r1, [r4, #4]!
   217a0:	ldr	ip, [r6, #4]!
   217a4:	cmp	r1, #0
   217a8:	streq	ip, [r4]
   217ac:	beq	21790 <__assert_fail@plt+0x102c8>
   217b0:	cmp	ip, #0
   217b4:	add	r2, ip, #4
   217b8:	add	r1, r1, #4
   217bc:	add	r0, sp, #4
   217c0:	beq	21790 <__assert_fail@plt+0x102c8>
   217c4:	bl	21540 <__assert_fail@plt+0x10078>
   217c8:	mov	r3, r0
   217cc:	add	r2, sp, #4
   217d0:	cmp	r3, #0
   217d4:	mov	r1, r8
   217d8:	mov	r0, sp
   217dc:	str	r3, [sp]
   217e0:	beq	21774 <__assert_fail@plt+0x102ac>
   217e4:	mov	r0, r3
   217e8:	add	sp, sp, #16
   217ec:	ldrd	r4, [sp]
   217f0:	ldrd	r6, [sp, #8]
   217f4:	ldr	r8, [sp, #16]
   217f8:	add	sp, sp, #20
   217fc:	pop	{pc}		; (ldr pc, [sp], #4)
   21800:	mov	r3, #0
   21804:	b	217e4 <__assert_fail@plt+0x1031c>
   21808:	lsl	ip, r2, #2
   2180c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21810:	mov	r4, r3
   21814:	strd	r6, [sp, #8]
   21818:	strd	r8, [sp, #16]
   2181c:	mov	r8, r2
   21820:	ldr	r9, [r3, #4]
   21824:	strd	sl, [sp, #24]
   21828:	mov	sl, r0
   2182c:	mov	fp, r1
   21830:	ldr	r2, [r0, #100]	; 0x64
   21834:	str	lr, [sp, #32]
   21838:	sub	sp, sp, #100	; 0x64
   2183c:	ldr	r6, [r0, #84]	; 0x54
   21840:	mov	r0, #0
   21844:	str	ip, [sp, #28]
   21848:	ldr	r3, [r2, r8, lsl #2]
   2184c:	add	r2, r2, ip
   21850:	cmp	r3, r0
   21854:	str	r3, [sp, #20]
   21858:	str	r0, [sp, #60]	; 0x3c
   2185c:	beq	21c10 <__assert_fail@plt+0x10748>
   21860:	cmp	r9, #0
   21864:	bne	218a0 <__assert_fail@plt+0x103d8>
   21868:	ldr	r3, [r1]
   2186c:	str	r9, [r3, r8, lsl #2]
   21870:	ldr	r3, [r2]
   21874:	ldrb	r9, [r3, #52]	; 0x34
   21878:	ands	r9, r9, #64	; 0x40
   2187c:	bne	219c4 <__assert_fail@plt+0x104fc>
   21880:	mov	r0, r9
   21884:	add	sp, sp, #100	; 0x64
   21888:	ldrd	r4, [sp]
   2188c:	ldrd	r6, [sp, #8]
   21890:	ldrd	r8, [sp, #16]
   21894:	ldrd	sl, [sp, #24]
   21898:	add	sp, sp, #32
   2189c:	pop	{pc}		; (ldr pc, [sp], #4)
   218a0:	mov	r2, r4
   218a4:	mov	r1, r6
   218a8:	str	r0, [sp, #64]	; 0x40
   218ac:	add	r0, sp, #64	; 0x40
   218b0:	bl	1e5a8 <__assert_fail@plt+0xd0e0>
   218b4:	ldr	r9, [sp, #64]	; 0x40
   218b8:	mov	r2, r0
   218bc:	cmp	r9, #0
   218c0:	bne	21880 <__assert_fail@plt+0x103b8>
   218c4:	mov	r5, r0
   218c8:	ldr	r7, [r5, #28]!
   218cc:	cmp	r7, #0
   218d0:	bne	21950 <__assert_fail@plt+0x10488>
   218d4:	ldr	r3, [r4, #4]
   218d8:	str	r2, [sp, #24]
   218dc:	lsl	r0, r3, #2
   218e0:	str	r3, [r2, #28]
   218e4:	str	r9, [r2, #32]
   218e8:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   218ec:	ldr	r2, [sp, #24]
   218f0:	cmp	r0, #0
   218f4:	str	r0, [r2, #36]	; 0x24
   218f8:	beq	21948 <__assert_fail@plt+0x10480>
   218fc:	ldr	r3, [r4, #4]
   21900:	str	r7, [sp, #64]	; 0x40
   21904:	cmp	r3, #0
   21908:	bgt	2191c <__assert_fail@plt+0x10454>
   2190c:	b	21950 <__assert_fail@plt+0x10488>
   21910:	ldr	r3, [r4, #4]
   21914:	cmp	r7, r3
   21918:	bge	21950 <__assert_fail@plt+0x10488>
   2191c:	ldr	r3, [r4, #8]
   21920:	mov	r0, r5
   21924:	ldr	r1, [r6, #28]
   21928:	ldr	r3, [r3, r7, lsl #2]
   2192c:	add	r7, r7, #1
   21930:	add	r3, r3, r3, lsl #1
   21934:	add	r1, r1, r3, lsl #2
   21938:	bl	19d94 <__assert_fail@plt+0x88cc>
   2193c:	cmp	r0, #0
   21940:	str	r0, [sp, #64]	; 0x40
   21944:	beq	21910 <__assert_fail@plt+0x10448>
   21948:	mov	r9, #12
   2194c:	b	21880 <__assert_fail@plt+0x103b8>
   21950:	ldr	r3, [sp, #20]
   21954:	mov	r2, r5
   21958:	mov	r0, r4
   2195c:	add	r3, r3, #4
   21960:	mov	r1, r3
   21964:	str	r3, [sp, #36]	; 0x24
   21968:	bl	19bac <__assert_fail@plt+0x86e4>
   2196c:	cmp	r0, #0
   21970:	str	r0, [sp, #60]	; 0x3c
   21974:	bne	22170 <__assert_fail@plt+0x10ca8>
   21978:	ldr	r9, [fp, #20]
   2197c:	cmp	r9, #0
   21980:	bne	21e90 <__assert_fail@plt+0x109c8>
   21984:	mov	r2, r4
   21988:	mov	r1, r6
   2198c:	ldr	r4, [fp]
   21990:	add	r0, sp, #60	; 0x3c
   21994:	bl	1e5a8 <__assert_fail@plt+0xd0e0>
   21998:	ldr	r9, [sp, #60]	; 0x3c
   2199c:	str	r0, [r4, r8, lsl #2]
   219a0:	cmp	r9, #0
   219a4:	bne	21880 <__assert_fail@plt+0x103b8>
   219a8:	ldr	r3, [sp, #28]
   219ac:	ldr	r2, [sl, #100]	; 0x64
   219b0:	add	r2, r2, r3
   219b4:	ldr	r3, [r2]
   219b8:	ldrb	r9, [r3, #52]	; 0x34
   219bc:	ands	r9, r9, #64	; 0x40
   219c0:	beq	21880 <__assert_fail@plt+0x103b8>
   219c4:	ldr	ip, [sl, #108]	; 0x6c
   219c8:	cmp	ip, #0
   219cc:	ble	21c48 <__assert_fail@plt+0x10780>
   219d0:	ldr	r0, [sl, #116]	; 0x74
   219d4:	mov	r2, ip
   219d8:	mov	lr, #0
   219dc:	add	r3, r2, lr
   219e0:	asr	r3, r3, #1
   219e4:	add	r1, r3, r3, lsl #1
   219e8:	add	r1, r0, r1, lsl #3
   219ec:	ldr	r1, [r1, #4]
   219f0:	cmp	r8, r1
   219f4:	bgt	21e20 <__assert_fail@plt+0x10958>
   219f8:	cmp	r3, lr
   219fc:	ble	21a48 <__assert_fail@plt+0x10580>
   21a00:	add	r2, r3, lr
   21a04:	asr	r2, r2, #1
   21a08:	add	r1, r2, r2, lsl #1
   21a0c:	add	r1, r0, r1, lsl #3
   21a10:	ldr	r1, [r1, #4]
   21a14:	cmp	r8, r1
   21a18:	ble	21a38 <__assert_fail@plt+0x10570>
   21a1c:	b	21e14 <__assert_fail@plt+0x1094c>
   21a20:	add	r1, r3, r3, lsl #1
   21a24:	add	r1, r0, r1, lsl #3
   21a28:	ldr	r1, [r1, #4]
   21a2c:	cmp	r8, r1
   21a30:	bgt	21e20 <__assert_fail@plt+0x10958>
   21a34:	mov	r2, r3
   21a38:	add	r3, lr, r2
   21a3c:	cmp	lr, r2
   21a40:	asr	r3, r3, #1
   21a44:	blt	21a20 <__assert_fail@plt+0x10558>
   21a48:	cmp	ip, lr
   21a4c:	str	lr, [sp, #44]	; 0x2c
   21a50:	ble	21c48 <__assert_fail@plt+0x10780>
   21a54:	add	r3, lr, lr, lsl #1
   21a58:	lsl	r3, r3, #3
   21a5c:	add	r0, r0, r3
   21a60:	str	r3, [sp, #48]	; 0x30
   21a64:	ldr	r3, [r0, #4]
   21a68:	cmp	r8, r3
   21a6c:	bne	21c48 <__assert_fail@plt+0x10780>
   21a70:	ldr	r3, [sp, #20]
   21a74:	ldr	r7, [sl, #84]	; 0x54
   21a78:	ldr	r0, [r3, #8]
   21a7c:	mov	r3, #0
   21a80:	str	r3, [sp, #64]	; 0x40
   21a84:	cmp	r0, r3
   21a88:	ble	21c48 <__assert_fail@plt+0x10780>
   21a8c:	add	r2, fp, #24
   21a90:	mov	r9, r8
   21a94:	mov	r8, r3
   21a98:	str	r2, [sp, #36]	; 0x24
   21a9c:	add	r2, fp, #20
   21aa0:	str	r2, [sp, #40]	; 0x28
   21aa4:	b	21abc <__assert_fail@plt+0x105f4>
   21aa8:	cmp	r3, #4
   21aac:	beq	21af4 <__assert_fail@plt+0x1062c>
   21ab0:	add	r8, r8, #1
   21ab4:	cmp	r8, r0
   21ab8:	bge	21c3c <__assert_fail@plt+0x10774>
   21abc:	ldr	r3, [sp, #20]
   21ac0:	ldr	r2, [fp, #8]
   21ac4:	ldr	r1, [r3, #12]
   21ac8:	ldr	r3, [r7]
   21acc:	ldr	r6, [r1, r8, lsl #2]
   21ad0:	add	r3, r3, r6, lsl #3
   21ad4:	cmp	r6, r2
   21ad8:	ldrb	r3, [r3, #4]
   21adc:	bne	21aa8 <__assert_fail@plt+0x105e0>
   21ae0:	ldr	r2, [fp, #12]
   21ae4:	cmp	r9, r2
   21ae8:	beq	21ab0 <__assert_fail@plt+0x105e8>
   21aec:	cmp	r3, #4
   21af0:	bne	21ab0 <__assert_fail@plt+0x105e8>
   21af4:	add	r3, r6, r6, lsl #1
   21af8:	ldr	r4, [sl, #116]	; 0x74
   21afc:	lsl	r2, r6, #2
   21b00:	str	r8, [sp, #52]	; 0x34
   21b04:	lsl	r3, r3, #2
   21b08:	ldr	r5, [sp, #44]	; 0x2c
   21b0c:	mov	r8, r2
   21b10:	str	r3, [sp, #32]
   21b14:	ldr	r3, [sp, #48]	; 0x30
   21b18:	add	r4, r4, r3
   21b1c:	ldr	r3, [r4]
   21b20:	cmp	r6, r3
   21b24:	bne	21bec <__assert_fail@plt+0x10724>
   21b28:	ldr	r3, [r4, #8]
   21b2c:	ldr	ip, [r4, #12]
   21b30:	sub	ip, ip, r3
   21b34:	cmp	ip, #0
   21b38:	add	ip, r9, ip
   21b3c:	beq	21c6c <__assert_fail@plt+0x107a4>
   21b40:	ldr	r3, [r7, #12]
   21b44:	ldr	r0, [r3, r8]
   21b48:	ldr	r3, [fp, #12]
   21b4c:	cmp	ip, r3
   21b50:	bgt	21bec <__assert_fail@plt+0x10724>
   21b54:	ldr	r3, [fp]
   21b58:	ldr	r2, [r3, ip, lsl #2]
   21b5c:	cmp	r2, #0
   21b60:	beq	21bec <__assert_fail@plt+0x10724>
   21b64:	ldr	r3, [r2, #8]
   21b68:	cmp	r3, #0
   21b6c:	ble	21bec <__assert_fail@plt+0x10724>
   21b70:	subs	r3, r3, #1
   21b74:	ldr	lr, [r2, #12]
   21b78:	moveq	r1, r3
   21b7c:	beq	21be0 <__assert_fail@plt+0x10718>
   21b80:	mov	r1, #0
   21b84:	str	ip, [sp, #24]
   21b88:	add	r2, r3, r1
   21b8c:	lsr	r2, r2, #1
   21b90:	ldr	ip, [lr, r2, lsl #2]
   21b94:	cmp	r0, ip
   21b98:	bgt	21c5c <__assert_fail@plt+0x10794>
   21b9c:	cmp	r2, r1
   21ba0:	bls	21bdc <__assert_fail@plt+0x10714>
   21ba4:	add	r3, r2, r1
   21ba8:	lsr	r3, r3, #1
   21bac:	ldr	ip, [lr, r3, lsl #2]
   21bb0:	cmp	r0, ip
   21bb4:	ble	21bcc <__assert_fail@plt+0x10704>
   21bb8:	b	21c50 <__assert_fail@plt+0x10788>
   21bbc:	ldr	ip, [lr, r2, lsl #2]
   21bc0:	cmp	r0, ip
   21bc4:	bgt	21c5c <__assert_fail@plt+0x10794>
   21bc8:	mov	r3, r2
   21bcc:	add	r2, r1, r3
   21bd0:	cmp	r1, r3
   21bd4:	lsr	r2, r2, #1
   21bd8:	bcc	21bbc <__assert_fail@plt+0x106f4>
   21bdc:	ldr	ip, [sp, #24]
   21be0:	ldr	r3, [lr, r1, lsl #2]
   21be4:	cmp	r0, r3
   21be8:	beq	21c84 <__assert_fail@plt+0x107bc>
   21bec:	ldrb	r3, [r4, #20]
   21bf0:	add	r5, r5, #1
   21bf4:	add	r4, r4, #24
   21bf8:	cmp	r3, #0
   21bfc:	bne	21b1c <__assert_fail@plt+0x10654>
   21c00:	ldr	r3, [sp, #20]
   21c04:	ldr	r8, [sp, #52]	; 0x34
   21c08:	ldr	r0, [r3, #8]
   21c0c:	b	21ab0 <__assert_fail@plt+0x105e8>
   21c10:	ldr	r5, [r1]
   21c14:	cmp	r9, r0
   21c18:	streq	r9, [r5, r8, lsl #2]
   21c1c:	beq	21880 <__assert_fail@plt+0x103b8>
   21c20:	mov	r2, r4
   21c24:	mov	r1, r6
   21c28:	add	r0, sp, #60	; 0x3c
   21c2c:	bl	1e5a8 <__assert_fail@plt+0xd0e0>
   21c30:	str	r0, [r5, r8, lsl #2]
   21c34:	ldr	r9, [sp, #60]	; 0x3c
   21c38:	b	21880 <__assert_fail@plt+0x103b8>
   21c3c:	ldr	r3, [sp, #64]	; 0x40
   21c40:	cmp	r3, #0
   21c44:	bne	22250 <__assert_fail@plt+0x10d88>
   21c48:	mov	r9, #0
   21c4c:	b	21880 <__assert_fail@plt+0x103b8>
   21c50:	mov	r1, r3
   21c54:	mov	r3, r2
   21c58:	mov	r2, r1
   21c5c:	add	r1, r2, #1
   21c60:	cmp	r3, r1
   21c64:	bhi	21b88 <__assert_fail@plt+0x106c0>
   21c68:	b	21bdc <__assert_fail@plt+0x10714>
   21c6c:	ldr	r3, [r7, #20]
   21c70:	ldr	r2, [sp, #32]
   21c74:	add	r3, r3, r2
   21c78:	ldr	r3, [r3, #8]
   21c7c:	ldr	r0, [r3]
   21c80:	b	21b48 <__assert_fail@plt+0x10680>
   21c84:	mov	r3, r6
   21c88:	str	r9, [sp]
   21c8c:	stmib	sp, {r0, ip}
   21c90:	mov	r0, sl
   21c94:	ldr	r2, [sp, #36]	; 0x24
   21c98:	ldr	r1, [sp, #40]	; 0x28
   21c9c:	bl	1c574 <__assert_fail@plt+0xb0ac>
   21ca0:	cmp	r0, #0
   21ca4:	bne	21bec <__assert_fail@plt+0x10724>
   21ca8:	ldr	r1, [sp, #64]	; 0x40
   21cac:	cmp	r1, #0
   21cb0:	beq	21e30 <__assert_fail@plt+0x10968>
   21cb4:	add	r4, sp, #64	; 0x40
   21cb8:	add	r0, sp, #80	; 0x50
   21cbc:	mov	r1, r5
   21cc0:	str	r6, [sp, #72]	; 0x48
   21cc4:	str	r9, [sp, #76]	; 0x4c
   21cc8:	bl	19998 <__assert_fail@plt+0x84d0>
   21ccc:	cmp	r0, #0
   21cd0:	beq	221e0 <__assert_fail@plt+0x10d18>
   21cd4:	ldr	r2, [sp, #28]
   21cd8:	mov	r1, r4
   21cdc:	mov	r0, sl
   21ce0:	ldr	r3, [sp, #64]	; 0x40
   21ce4:	ldr	r4, [r3, r2]
   21ce8:	bl	22258 <__assert_fail@plt+0x10d90>
   21cec:	cmp	r0, #0
   21cf0:	bne	22178 <__assert_fail@plt+0x10cb0>
   21cf4:	ldr	r1, [fp, #4]
   21cf8:	ldr	r2, [sp, #64]	; 0x40
   21cfc:	cmp	r1, #0
   21d00:	beq	21d1c <__assert_fail@plt+0x10854>
   21d04:	add	r3, r9, #1
   21d08:	mov	r0, r7
   21d0c:	bl	21744 <__assert_fail@plt+0x1027c>
   21d10:	cmp	r0, #0
   21d14:	bne	22178 <__assert_fail@plt+0x10cb0>
   21d18:	ldr	r2, [sp, #64]	; 0x40
   21d1c:	ldr	r3, [sp, #28]
   21d20:	ldr	lr, [sp, #84]	; 0x54
   21d24:	str	r4, [r2, r3]
   21d28:	cmp	lr, #0
   21d2c:	ble	21dac <__assert_fail@plt+0x108e4>
   21d30:	sub	r4, lr, #1
   21d34:	ldr	r1, [sp, #88]	; 0x58
   21d38:	cmp	r4, #0
   21d3c:	mov	r0, r4
   21d40:	movne	r2, #0
   21d44:	beq	22228 <__assert_fail@plt+0x10d60>
   21d48:	add	r3, r0, r2
   21d4c:	lsr	r3, r3, #1
   21d50:	ldr	ip, [r1, r3, lsl #2]
   21d54:	cmp	r5, ip
   21d58:	bgt	21e04 <__assert_fail@plt+0x1093c>
   21d5c:	cmp	r3, r2
   21d60:	bls	21d9c <__assert_fail@plt+0x108d4>
   21d64:	add	r0, r3, r2
   21d68:	lsr	r0, r0, #1
   21d6c:	ldr	ip, [r1, r0, lsl #2]
   21d70:	cmp	r5, ip
   21d74:	ble	21d8c <__assert_fail@plt+0x108c4>
   21d78:	b	21df8 <__assert_fail@plt+0x10930>
   21d7c:	ldr	ip, [r1, r3, lsl #2]
   21d80:	cmp	r5, ip
   21d84:	bgt	21e04 <__assert_fail@plt+0x1093c>
   21d88:	mov	r0, r3
   21d8c:	add	r3, r2, r0
   21d90:	cmp	r2, r0
   21d94:	lsr	r3, r3, #1
   21d98:	bcc	21d7c <__assert_fail@plt+0x108b4>
   21d9c:	lsl	r3, r2, #2
   21da0:	ldr	r3, [r1, r3]!
   21da4:	cmp	r5, r3
   21da8:	beq	21dbc <__assert_fail@plt+0x108f4>
   21dac:	ldr	r4, [sl, #116]	; 0x74
   21db0:	add	r3, r5, r5, lsl #1
   21db4:	add	r4, r4, r3, lsl #3
   21db8:	b	21bec <__assert_fail@plt+0x10724>
   21dbc:	cmp	lr, r2
   21dc0:	movgt	lr, #0
   21dc4:	movle	lr, #1
   21dc8:	orrs	r3, lr, r2, lsr #31
   21dcc:	bne	21dac <__assert_fail@plt+0x108e4>
   21dd0:	cmp	r2, r4
   21dd4:	str	r4, [sp, #84]	; 0x54
   21dd8:	bge	21dac <__assert_fail@plt+0x108e4>
   21ddc:	ldr	r3, [r1, #4]
   21de0:	add	r2, r2, #1
   21de4:	str	r3, [r1], #4
   21de8:	ldr	r3, [sp, #84]	; 0x54
   21dec:	cmp	r2, r3
   21df0:	blt	21ddc <__assert_fail@plt+0x10914>
   21df4:	b	21dac <__assert_fail@plt+0x108e4>
   21df8:	mov	r2, r0
   21dfc:	mov	r0, r3
   21e00:	mov	r3, r2
   21e04:	add	r2, r3, #1
   21e08:	cmp	r2, r0
   21e0c:	bcc	21d48 <__assert_fail@plt+0x10880>
   21e10:	b	21d9c <__assert_fail@plt+0x108d4>
   21e14:	mov	r1, r2
   21e18:	mov	r2, r3
   21e1c:	mov	r3, r1
   21e20:	add	lr, r3, #1
   21e24:	cmp	lr, r2
   21e28:	blt	219dc <__assert_fail@plt+0x10514>
   21e2c:	b	21a48 <__assert_fail@plt+0x10580>
   21e30:	ldrd	r2, [fp]
   21e34:	add	r4, sp, #64	; 0x40
   21e38:	ldr	ip, [fp, #20]
   21e3c:	ldr	r0, [fp, #24]
   21e40:	strd	r2, [sp, #64]	; 0x40
   21e44:	ldrd	r2, [fp, #8]
   21e48:	cmp	ip, #0
   21e4c:	strd	r2, [r4, #8]
   21e50:	ldrd	r2, [fp, #16]
   21e54:	str	r0, [r4, #24]
   21e58:	strd	r2, [r4, #16]
   21e5c:	ble	22194 <__assert_fail@plt+0x10ccc>
   21e60:	lsl	r0, ip, #2
   21e64:	str	ip, [sp, #80]	; 0x50
   21e68:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   21e6c:	cmp	r0, #0
   21e70:	str	r0, [sp, #88]	; 0x58
   21e74:	beq	2223c <__assert_fail@plt+0x10d74>
   21e78:	ldr	r2, [fp, #20]
   21e7c:	ldr	r1, [fp, #24]
   21e80:	lsl	r2, r2, #2
   21e84:	bl	11204 <memcpy@plt>
   21e88:	add	r0, sp, #80	; 0x50
   21e8c:	b	21cbc <__assert_fail@plt+0x107f4>
   21e90:	ldr	r3, [sl, #116]	; 0x74
   21e94:	str	r3, [sp, #32]
   21e98:	ble	21f88 <__assert_fail@plt+0x10ac0>
   21e9c:	mov	r7, r0
   21ea0:	str	r9, [sp, #24]
   21ea4:	mov	r9, r8
   21ea8:	str	sl, [sp, #48]	; 0x30
   21eac:	ldr	r3, [fp, #24]
   21eb0:	ldr	r0, [sp, #32]
   21eb4:	ldr	r3, [r3, r7, lsl #2]
   21eb8:	add	r3, r3, r3, lsl #1
   21ebc:	add	r2, r0, r3, lsl #3
   21ec0:	ldr	r1, [r2, #8]
   21ec4:	cmp	r9, r1
   21ec8:	ble	21f70 <__assert_fail@plt+0x10aa8>
   21ecc:	ldr	r1, [r2, #4]
   21ed0:	cmp	r9, r1
   21ed4:	bgt	21f70 <__assert_fail@plt+0x10aa8>
   21ed8:	ldr	r1, [r2, #12]
   21edc:	ldr	r2, [r0, r3, lsl #3]
   21ee0:	ldr	r3, [r6]
   21ee4:	cmp	r9, r1
   21ee8:	ldr	r0, [r4, #4]
   21eec:	ldr	r8, [r3, r2, lsl #3]
   21ef0:	str	r0, [sp, #40]	; 0x28
   21ef4:	beq	21f94 <__assert_fail@plt+0x10acc>
   21ef8:	cmp	r0, #0
   21efc:	ble	21f70 <__assert_fail@plt+0x10aa8>
   21f00:	mov	r5, #0
   21f04:	ldr	sl, [sp, #36]	; 0x24
   21f08:	b	21f18 <__assert_fail@plt+0x10a50>
   21f0c:	cmp	r5, r0
   21f10:	bge	21f68 <__assert_fail@plt+0x10aa0>
   21f14:	ldr	r3, [r6]
   21f18:	ldr	r2, [r4, #8]
   21f1c:	ldr	r1, [r2, r5, lsl #2]
   21f20:	add	r5, r5, #1
   21f24:	add	r2, r3, r1, lsl #3
   21f28:	ldrb	r2, [r2, #4]
   21f2c:	sub	r2, r2, #8
   21f30:	cmp	r2, #1
   21f34:	bhi	21f0c <__assert_fail@plt+0x10a44>
   21f38:	ldr	r3, [r3, r1, lsl #3]
   21f3c:	cmp	r8, r3
   21f40:	bne	21f0c <__assert_fail@plt+0x10a44>
   21f44:	mov	r3, sl
   21f48:	mov	r2, r4
   21f4c:	mov	r0, r6
   21f50:	bl	1dce8 <__assert_fail@plt+0xc820>
   21f54:	cmp	r0, #0
   21f58:	bne	22170 <__assert_fail@plt+0x10ca8>
   21f5c:	ldr	r0, [r4, #4]
   21f60:	cmp	r5, r0
   21f64:	blt	21f14 <__assert_fail@plt+0x10a4c>
   21f68:	ldr	r3, [fp, #20]
   21f6c:	str	r3, [sp, #24]
   21f70:	ldr	r3, [sp, #24]
   21f74:	add	r7, r7, #1
   21f78:	cmp	r7, r3
   21f7c:	blt	21eac <__assert_fail@plt+0x109e4>
   21f80:	ldr	sl, [sp, #48]	; 0x30
   21f84:	mov	r8, r9
   21f88:	mov	r3, #0
   21f8c:	str	r3, [sp, #60]	; 0x3c
   21f90:	b	21984 <__assert_fail@plt+0x104bc>
   21f94:	cmp	r0, #0
   21f98:	ble	21f70 <__assert_fail@plt+0x10aa8>
   21f9c:	ldr	sl, [r4, #8]
   21fa0:	mvn	r5, #0
   21fa4:	mov	r1, r5
   21fa8:	str	r6, [sp, #44]	; 0x2c
   21fac:	add	r2, sl, r0, lsl #2
   21fb0:	mov	r0, sl
   21fb4:	mov	r6, r2
   21fb8:	b	21fd8 <__assert_fail@plt+0x10b10>
   21fbc:	cmp	ip, #9
   21fc0:	bne	21fd0 <__assert_fail@plt+0x10b08>
   21fc4:	ldr	ip, [lr]
   21fc8:	cmp	r8, ip
   21fcc:	moveq	r5, r2
   21fd0:	cmp	r6, r0
   21fd4:	beq	22000 <__assert_fail@plt+0x10b38>
   21fd8:	ldr	r2, [r0], #4
   21fdc:	add	lr, r3, r2, lsl #3
   21fe0:	ldrb	ip, [lr, #4]
   21fe4:	cmp	ip, #8
   21fe8:	bne	21fbc <__assert_fail@plt+0x10af4>
   21fec:	ldr	ip, [r3, r2, lsl #3]
   21ff0:	cmp	r8, ip
   21ff4:	moveq	r1, r2
   21ff8:	cmp	r6, r0
   21ffc:	bne	21fd8 <__assert_fail@plt+0x10b10>
   22000:	cmp	r1, #0
   22004:	ldr	r6, [sp, #44]	; 0x2c
   22008:	bge	221a8 <__assert_fail@plt+0x10ce0>
   2200c:	cmp	r5, #0
   22010:	blt	21f70 <__assert_fail@plt+0x10aa8>
   22014:	mov	r3, sl
   22018:	ldr	sl, [sp, #40]	; 0x28
   2201c:	mov	r8, #0
   22020:	ldr	r1, [r3, r8, lsl #2]
   22024:	ldr	r3, [r6, #28]
   22028:	add	lr, r1, r1, lsl #1
   2202c:	lsl	lr, lr, #2
   22030:	add	r3, r3, lr
   22034:	ldr	r2, [r3, #4]
   22038:	cmp	r2, #0
   2203c:	ble	220bc <__assert_fail@plt+0x10bf4>
   22040:	subs	r2, r2, #1
   22044:	ldr	ip, [r3, #8]
   22048:	moveq	r0, r2
   2204c:	beq	220b0 <__assert_fail@plt+0x10be8>
   22050:	mov	r0, #0
   22054:	str	r1, [sp, #24]
   22058:	add	r3, r2, r0
   2205c:	lsr	r3, r3, #1
   22060:	ldr	r1, [ip, r3, lsl #2]
   22064:	cmp	r5, r1
   22068:	bgt	221f4 <__assert_fail@plt+0x10d2c>
   2206c:	cmp	r3, r0
   22070:	bls	220ac <__assert_fail@plt+0x10be4>
   22074:	add	r2, r3, r0
   22078:	lsr	r2, r2, #1
   2207c:	ldr	r1, [ip, r2, lsl #2]
   22080:	cmp	r5, r1
   22084:	ble	2209c <__assert_fail@plt+0x10bd4>
   22088:	b	221e8 <__assert_fail@plt+0x10d20>
   2208c:	ldr	r1, [ip, r3, lsl #2]
   22090:	cmp	r5, r1
   22094:	bgt	221f4 <__assert_fail@plt+0x10d2c>
   22098:	mov	r2, r3
   2209c:	add	r3, r0, r2
   220a0:	cmp	r0, r2
   220a4:	lsr	r3, r3, #1
   220a8:	bcc	2208c <__assert_fail@plt+0x10bc4>
   220ac:	ldr	r1, [sp, #24]
   220b0:	ldr	r3, [ip, r0, lsl #2]
   220b4:	cmp	r5, r3
   220b8:	beq	22204 <__assert_fail@plt+0x10d3c>
   220bc:	ldr	r3, [r6, #24]
   220c0:	add	lr, r3, lr
   220c4:	ldr	r2, [lr, #4]
   220c8:	cmp	r2, #0
   220cc:	ble	22144 <__assert_fail@plt+0x10c7c>
   220d0:	subs	r2, r2, #1
   220d4:	ldr	ip, [lr, #8]
   220d8:	moveq	r0, r2
   220dc:	beq	22138 <__assert_fail@plt+0x10c70>
   220e0:	mov	r0, #0
   220e4:	add	r3, r2, r0
   220e8:	lsr	r3, r3, #1
   220ec:	ldr	lr, [ip, r3, lsl #2]
   220f0:	cmp	lr, r5
   220f4:	blt	22218 <__assert_fail@plt+0x10d50>
   220f8:	cmp	r3, r0
   220fc:	bls	22138 <__assert_fail@plt+0x10c70>
   22100:	add	r2, r3, r0
   22104:	lsr	r2, r2, #1
   22108:	ldr	lr, [ip, r2, lsl #2]
   2210c:	cmp	r5, lr
   22110:	ble	22128 <__assert_fail@plt+0x10c60>
   22114:	b	2220c <__assert_fail@plt+0x10d44>
   22118:	ldr	lr, [ip, r3, lsl #2]
   2211c:	cmp	r5, lr
   22120:	bgt	22218 <__assert_fail@plt+0x10d50>
   22124:	mov	r2, r3
   22128:	add	r3, r0, r2
   2212c:	cmp	r0, r2
   22130:	lsr	r3, r3, #1
   22134:	bcc	22118 <__assert_fail@plt+0x10c50>
   22138:	ldr	r3, [ip, r0, lsl #2]
   2213c:	cmp	r5, r3
   22140:	beq	22204 <__assert_fail@plt+0x10d3c>
   22144:	mov	r2, r4
   22148:	mov	r0, r6
   2214c:	ldr	r3, [sp, #36]	; 0x24
   22150:	bl	1dce8 <__assert_fail@plt+0xc820>
   22154:	cmp	r0, #0
   22158:	bne	22170 <__assert_fail@plt+0x10ca8>
   2215c:	ldr	sl, [r4, #4]
   22160:	cmp	sl, r8
   22164:	ble	21f68 <__assert_fail@plt+0x10aa0>
   22168:	ldr	r3, [r4, #8]
   2216c:	b	22020 <__assert_fail@plt+0x10b58>
   22170:	mov	r9, r0
   22174:	b	21880 <__assert_fail@plt+0x103b8>
   22178:	mov	r9, r0
   2217c:	ldr	r3, [sp, #64]	; 0x40
   22180:	cmp	r3, #0
   22184:	beq	21880 <__assert_fail@plt+0x103b8>
   22188:	ldr	r0, [sp, #88]	; 0x58
   2218c:	bl	14484 <__assert_fail@plt+0x2fbc>
   22190:	b	21880 <__assert_fail@plt+0x103b8>
   22194:	add	r0, sp, #80	; 0x50
   22198:	str	r1, [sp, #80]	; 0x50
   2219c:	str	r1, [r0, #4]
   221a0:	str	r1, [r0, #8]
   221a4:	b	21cbc <__assert_fail@plt+0x107f4>
   221a8:	mov	r2, r4
   221ac:	mov	r0, r6
   221b0:	ldr	r3, [sp, #36]	; 0x24
   221b4:	bl	1dce8 <__assert_fail@plt+0xc820>
   221b8:	cmp	r0, #0
   221bc:	bne	22170 <__assert_fail@plt+0x10ca8>
   221c0:	cmp	r5, #0
   221c4:	blt	21f68 <__assert_fail@plt+0x10aa0>
   221c8:	ldr	r3, [r4, #4]
   221cc:	cmp	r3, #0
   221d0:	str	r3, [sp, #40]	; 0x28
   221d4:	ble	21f68 <__assert_fail@plt+0x10aa0>
   221d8:	ldr	sl, [r4, #8]
   221dc:	b	22014 <__assert_fail@plt+0x10b4c>
   221e0:	mov	r9, #12
   221e4:	b	2217c <__assert_fail@plt+0x10cb4>
   221e8:	mov	r0, r2
   221ec:	mov	r2, r3
   221f0:	mov	r3, r0
   221f4:	add	r0, r3, #1
   221f8:	cmp	r0, r2
   221fc:	bcc	22058 <__assert_fail@plt+0x10b90>
   22200:	b	220ac <__assert_fail@plt+0x10be4>
   22204:	add	r8, r8, #1
   22208:	b	22160 <__assert_fail@plt+0x10c98>
   2220c:	mov	r0, r2
   22210:	mov	r2, r3
   22214:	mov	r3, r0
   22218:	add	r0, r3, #1
   2221c:	cmp	r0, r2
   22220:	bcc	220e4 <__assert_fail@plt+0x10c1c>
   22224:	b	22138 <__assert_fail@plt+0x10c70>
   22228:	ldr	r3, [r1]
   2222c:	cmp	r3, r5
   22230:	bne	21dac <__assert_fail@plt+0x108e4>
   22234:	mov	r2, r4
   22238:	b	21dd0 <__assert_fail@plt+0x10908>
   2223c:	mov	r2, #0
   22240:	mov	r3, #0
   22244:	mov	r9, #12
   22248:	strd	r2, [sp, #80]	; 0x50
   2224c:	b	2217c <__assert_fail@plt+0x10cb4>
   22250:	mov	r9, #0
   22254:	b	22188 <__assert_fail@plt+0x10cc0>
   22258:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2225c:	ldr	r4, [r1, #8]
   22260:	strd	r6, [sp, #8]
   22264:	mov	r6, #1
   22268:	strd	r8, [sp, #16]
   2226c:	strd	sl, [sp, #24]
   22270:	mov	sl, r0
   22274:	mov	r0, #4
   22278:	str	lr, [sp, #32]
   2227c:	sub	sp, sp, #68	; 0x44
   22280:	mov	fp, r1
   22284:	ldr	r9, [r1, #12]
   22288:	str	r6, [sp, #48]	; 0x30
   2228c:	str	r6, [sp, #52]	; 0x34
   22290:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   22294:	cmp	r0, #0
   22298:	str	r0, [sp, #56]	; 0x38
   2229c:	beq	22764 <__assert_fail@plt+0x1129c>
   222a0:	mov	r2, r9
   222a4:	add	r3, sp, #48	; 0x30
   222a8:	str	r4, [r0]
   222ac:	mov	r1, fp
   222b0:	mov	r0, sl
   222b4:	bl	21808 <__assert_fail@plt+0x10340>
   222b8:	subs	r4, r0, #0
   222bc:	bne	22740 <__assert_fail@plt+0x11278>
   222c0:	cmp	r9, #0
   222c4:	movgt	r5, r6
   222c8:	strgt	r4, [sp, #24]
   222cc:	strgt	r6, [sp, #40]	; 0x28
   222d0:	strgt	r5, [sp, #44]	; 0x2c
   222d4:	ble	22740 <__assert_fail@plt+0x11278>
   222d8:	ldr	r0, [fp]
   222dc:	lsl	r3, r9, #2
   222e0:	str	r3, [sp, #20]
   222e4:	ldr	r3, [r0, r9, lsl #2]
   222e8:	cmp	r3, #0
   222ec:	ldreq	r3, [sp, #24]
   222f0:	movne	r3, #0
   222f4:	addeq	r3, r3, #1
   222f8:	mov	r2, r3
   222fc:	str	r3, [sp, #24]
   22300:	ldr	r3, [sl, #120]	; 0x78
   22304:	cmp	r3, r2
   22308:	blt	22748 <__assert_fail@plt+0x11280>
   2230c:	mov	r2, #0
   22310:	ldr	r3, [sl, #100]	; 0x64
   22314:	sub	r9, r9, #1
   22318:	str	r2, [sp, #52]	; 0x34
   2231c:	ldr	r2, [sp, #20]
   22320:	add	r3, r3, r2
   22324:	ldr	r5, [r3, #-4]
   22328:	cmp	r5, #0
   2232c:	beq	225e4 <__assert_fail@plt+0x1111c>
   22330:	ldr	r3, [r5, #20]
   22334:	ldr	r7, [sl, #84]	; 0x54
   22338:	cmp	r3, #0
   2233c:	ble	225e4 <__assert_fail@plt+0x1111c>
   22340:	ldr	r3, [r5, #24]
   22344:	add	r2, fp, #24
   22348:	mov	r8, #0
   2234c:	ldr	r1, [r7]
   22350:	str	r2, [sp, #32]
   22354:	add	r2, fp, #20
   22358:	ldr	r4, [r3]
   2235c:	str	r2, [sp, #36]	; 0x24
   22360:	lsl	r6, r4, #3
   22364:	add	r1, r1, r6
   22368:	ldrb	r3, [r1, #6]
   2236c:	str	r6, [sp, #16]
   22370:	mov	r6, r8
   22374:	mov	r8, r5
   22378:	tst	r3, #16
   2237c:	bne	22464 <__assert_fail@plt+0x10f9c>
   22380:	mov	r2, r9
   22384:	mov	r0, sl
   22388:	bl	1a070 <__assert_fail@plt+0x8ba8>
   2238c:	cmp	r0, #0
   22390:	beq	22430 <__assert_fail@plt+0x10f68>
   22394:	ldr	r3, [fp]
   22398:	ldr	r2, [sp, #20]
   2239c:	ldr	r2, [r3, r2]
   223a0:	cmp	r2, #0
   223a4:	beq	22430 <__assert_fail@plt+0x10f68>
   223a8:	ldr	r3, [r2, #8]
   223ac:	cmp	r3, #0
   223b0:	ble	22430 <__assert_fail@plt+0x10f68>
   223b4:	ldr	r1, [r7, #12]
   223b8:	subs	r3, r3, #1
   223bc:	ldr	ip, [r2, #12]
   223c0:	ldr	r0, [r1, r4, lsl #2]
   223c4:	moveq	r1, r3
   223c8:	beq	22424 <__assert_fail@plt+0x10f5c>
   223cc:	mov	r1, #0
   223d0:	add	r2, r3, r1
   223d4:	lsr	r2, r2, #1
   223d8:	ldr	lr, [ip, r2, lsl #2]
   223dc:	cmp	r0, lr
   223e0:	bgt	22554 <__assert_fail@plt+0x1108c>
   223e4:	cmp	r2, r1
   223e8:	bls	22424 <__assert_fail@plt+0x10f5c>
   223ec:	add	r3, r2, r1
   223f0:	lsr	r3, r3, #1
   223f4:	ldr	lr, [ip, r3, lsl #2]
   223f8:	cmp	r0, lr
   223fc:	ble	22414 <__assert_fail@plt+0x10f4c>
   22400:	b	22548 <__assert_fail@plt+0x11080>
   22404:	ldr	lr, [ip, r2, lsl #2]
   22408:	cmp	r0, lr
   2240c:	bgt	22554 <__assert_fail@plt+0x1108c>
   22410:	mov	r3, r2
   22414:	add	r2, r1, r3
   22418:	cmp	r1, r3
   2241c:	lsr	r2, r2, #1
   22420:	bcc	22404 <__assert_fail@plt+0x10f3c>
   22424:	ldr	r3, [ip, r1, lsl #2]
   22428:	cmp	r0, r3
   2242c:	beq	2256c <__assert_fail@plt+0x110a4>
   22430:	ldr	r3, [r8, #20]
   22434:	add	r6, r6, #1
   22438:	cmp	r6, r3
   2243c:	bge	225e4 <__assert_fail@plt+0x1111c>
   22440:	ldr	r3, [r8, #24]
   22444:	ldr	r1, [r7]
   22448:	ldr	r4, [r3, r6, lsl #2]
   2244c:	lsl	r3, r4, #3
   22450:	add	r1, r1, r3
   22454:	str	r3, [sp, #16]
   22458:	ldrb	r3, [r1, #6]
   2245c:	tst	r3, #16
   22460:	beq	22380 <__assert_fail@plt+0x10eb8>
   22464:	ldr	r1, [fp, #12]
   22468:	mov	r3, sl
   2246c:	mov	r2, r4
   22470:	ldr	r5, [sl, #84]	; 0x54
   22474:	str	r1, [sp, #28]
   22478:	mov	r1, r5
   2247c:	ldr	r0, [r1], #128	; 0x80
   22480:	str	r9, [sp]
   22484:	bl	1cb6c <__assert_fail@plt+0xb6a4>
   22488:	cmp	r0, #0
   2248c:	ble	22634 <__assert_fail@plt+0x1116c>
   22490:	ldr	r1, [sp, #28]
   22494:	add	r3, r9, r0
   22498:	cmp	r1, r3
   2249c:	blt	22570 <__assert_fail@plt+0x110a8>
   224a0:	ldr	r2, [fp]
   224a4:	ldr	r3, [r2, r3, lsl #2]
   224a8:	cmp	r3, #0
   224ac:	beq	22538 <__assert_fail@plt+0x11070>
   224b0:	ldr	r2, [r3, #8]
   224b4:	cmp	r2, #0
   224b8:	ble	22538 <__assert_fail@plt+0x11070>
   224bc:	ldr	r1, [r5, #12]
   224c0:	subs	r2, r2, #1
   224c4:	ldr	lr, [r3, #12]
   224c8:	ldr	ip, [r1, r4, lsl #2]
   224cc:	moveq	r1, r2
   224d0:	beq	2252c <__assert_fail@plt+0x11064>
   224d4:	mov	r1, #0
   224d8:	add	r3, r2, r1
   224dc:	lsr	r3, r3, #1
   224e0:	ldr	r5, [lr, r3, lsl #2]
   224e4:	cmp	ip, r5
   224e8:	bgt	226bc <__assert_fail@plt+0x111f4>
   224ec:	cmp	r3, r1
   224f0:	bls	2252c <__assert_fail@plt+0x11064>
   224f4:	add	r2, r3, r1
   224f8:	lsr	r2, r2, #1
   224fc:	ldr	r5, [lr, r2, lsl #2]
   22500:	cmp	ip, r5
   22504:	ble	2251c <__assert_fail@plt+0x11054>
   22508:	b	226b0 <__assert_fail@plt+0x111e8>
   2250c:	ldr	r5, [lr, r3, lsl #2]
   22510:	cmp	ip, r5
   22514:	bgt	226bc <__assert_fail@plt+0x111f4>
   22518:	mov	r2, r3
   2251c:	add	r3, r1, r2
   22520:	cmp	r1, r2
   22524:	lsr	r3, r3, #1
   22528:	bcc	2250c <__assert_fail@plt+0x11044>
   2252c:	ldr	r3, [lr, r1, lsl #2]
   22530:	cmp	ip, r3
   22534:	beq	22570 <__assert_fail@plt+0x110a8>
   22538:	ldr	r1, [r7]
   2253c:	ldr	r3, [sp, #16]
   22540:	add	r1, r1, r3
   22544:	b	22380 <__assert_fail@plt+0x10eb8>
   22548:	mov	r1, r3
   2254c:	mov	r3, r2
   22550:	mov	r2, r1
   22554:	add	r1, r2, #1
   22558:	cmp	r3, r1
   2255c:	bhi	223d0 <__assert_fail@plt+0x10f08>
   22560:	ldr	r3, [ip, r1, lsl #2]
   22564:	cmp	r0, r3
   22568:	bne	22430 <__assert_fail@plt+0x10f68>
   2256c:	mov	r0, #1
   22570:	ldr	r3, [fp, #20]
   22574:	cmp	r3, #0
   22578:	beq	225a8 <__assert_fail@plt+0x110e0>
   2257c:	ldr	r3, [r7, #12]
   22580:	add	ip, r9, r0
   22584:	mov	r0, sl
   22588:	ldr	r2, [sp, #32]
   2258c:	ldr	r1, [sp, #36]	; 0x24
   22590:	ldr	r3, [r3, r4, lsl #2]
   22594:	str	ip, [sp]
   22598:	stmib	sp, {r4, r9}
   2259c:	bl	1c574 <__assert_fail@plt+0xb0ac>
   225a0:	cmp	r0, #0
   225a4:	bne	22430 <__assert_fail@plt+0x10f68>
   225a8:	ldr	r1, [sp, #48]	; 0x30
   225ac:	cmp	r1, #0
   225b0:	beq	2263c <__assert_fail@plt+0x11174>
   225b4:	ldr	r3, [sp, #52]	; 0x34
   225b8:	ldr	r5, [sp, #56]	; 0x38
   225bc:	cmp	r3, #0
   225c0:	bne	22668 <__assert_fail@plt+0x111a0>
   225c4:	str	r4, [r5]
   225c8:	add	r6, r6, #1
   225cc:	ldr	r3, [sp, #52]	; 0x34
   225d0:	add	r3, r3, #1
   225d4:	str	r3, [sp, #52]	; 0x34
   225d8:	ldr	r3, [r8, #20]
   225dc:	cmp	r6, r3
   225e0:	blt	22440 <__assert_fail@plt+0x10f78>
   225e4:	add	r3, sp, #48	; 0x30
   225e8:	mov	r2, r9
   225ec:	mov	r1, fp
   225f0:	mov	r0, sl
   225f4:	bl	21808 <__assert_fail@plt+0x10340>
   225f8:	cmp	r0, #0
   225fc:	bne	22608 <__assert_fail@plt+0x11140>
   22600:	cmp	r9, #0
   22604:	bne	222d8 <__assert_fail@plt+0x10e10>
   22608:	mov	r4, r0
   2260c:	ldr	r0, [sp, #56]	; 0x38
   22610:	bl	14484 <__assert_fail@plt+0x2fbc>
   22614:	mov	r0, r4
   22618:	add	sp, sp, #68	; 0x44
   2261c:	ldrd	r4, [sp]
   22620:	ldrd	r6, [sp, #8]
   22624:	ldrd	r8, [sp, #16]
   22628:	ldrd	sl, [sp, #24]
   2262c:	add	sp, sp, #32
   22630:	pop	{pc}		; (ldr pc, [sp], #4)
   22634:	beq	22538 <__assert_fail@plt+0x11070>
   22638:	b	22570 <__assert_fail@plt+0x110a8>
   2263c:	ldr	r3, [sp, #40]	; 0x28
   22640:	mov	r0, #4
   22644:	str	r3, [sp, #48]	; 0x30
   22648:	ldr	r3, [sp, #44]	; 0x2c
   2264c:	str	r3, [sp, #52]	; 0x34
   22650:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   22654:	cmp	r0, #0
   22658:	str	r0, [sp, #56]	; 0x38
   2265c:	beq	22704 <__assert_fail@plt+0x1123c>
   22660:	str	r4, [r0]
   22664:	b	22430 <__assert_fail@plt+0x10f68>
   22668:	cmp	r1, r3
   2266c:	beq	22718 <__assert_fail@plt+0x11250>
   22670:	ldr	r1, [r5]
   22674:	mov	r2, r3
   22678:	cmp	r1, r4
   2267c:	ble	226cc <__assert_fail@plt+0x11204>
   22680:	cmp	r3, #0
   22684:	ble	2269c <__assert_fail@plt+0x111d4>
   22688:	lsl	r2, r3, #2
   2268c:	mov	r1, r5
   22690:	add	r0, r5, #4
   22694:	bl	111d4 <memmove@plt>
   22698:	mov	r2, #0
   2269c:	str	r4, [r5, r2, lsl #2]
   226a0:	ldr	r3, [sp, #52]	; 0x34
   226a4:	add	r3, r3, #1
   226a8:	str	r3, [sp, #52]	; 0x34
   226ac:	b	22430 <__assert_fail@plt+0x10f68>
   226b0:	mov	r1, r2
   226b4:	mov	r2, r3
   226b8:	mov	r3, r1
   226bc:	add	r1, r3, #1
   226c0:	cmp	r1, r2
   226c4:	bcc	224d8 <__assert_fail@plt+0x11010>
   226c8:	b	2252c <__assert_fail@plt+0x11064>
   226cc:	sub	r1, r3, #-1073741823	; 0xc0000001
   226d0:	ldr	r0, [r5, r1, lsl #2]
   226d4:	lsl	r1, r1, #2
   226d8:	cmp	r0, r4
   226dc:	ble	2269c <__assert_fail@plt+0x111d4>
   226e0:	add	r1, r1, #4
   226e4:	add	r1, r5, r1
   226e8:	str	r0, [r1], #-4
   226ec:	sub	r3, r3, #1
   226f0:	ldr	r0, [r1, #-4]
   226f4:	mov	r2, r3
   226f8:	cmp	r0, r4
   226fc:	bgt	226e8 <__assert_fail@plt+0x11220>
   22700:	b	2269c <__assert_fail@plt+0x111d4>
   22704:	mov	r2, #0
   22708:	mov	r3, #0
   2270c:	mov	r4, #12
   22710:	strd	r2, [sp, #48]	; 0x30
   22714:	b	22610 <__assert_fail@plt+0x11148>
   22718:	lsl	r3, r1, #1
   2271c:	mov	r0, r5
   22720:	lsl	r1, r1, #3
   22724:	str	r3, [sp, #48]	; 0x30
   22728:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2272c:	subs	r5, r0, #0
   22730:	beq	2276c <__assert_fail@plt+0x112a4>
   22734:	str	r5, [sp, #56]	; 0x38
   22738:	ldr	r3, [sp, #52]	; 0x34
   2273c:	b	22670 <__assert_fail@plt+0x111a8>
   22740:	ldr	r0, [sp, #56]	; 0x38
   22744:	b	22610 <__assert_fail@plt+0x11148>
   22748:	mov	r1, #0
   2274c:	ldr	r2, [sp, #20]
   22750:	mov	r4, r1
   22754:	bl	113e4 <memset@plt>
   22758:	ldr	r0, [sp, #56]	; 0x38
   2275c:	bl	14484 <__assert_fail@plt+0x2fbc>
   22760:	b	22614 <__assert_fail@plt+0x1114c>
   22764:	mov	r4, #12
   22768:	b	22614 <__assert_fail@plt+0x1114c>
   2276c:	mov	r4, #12
   22770:	ldr	r0, [sp, #56]	; 0x38
   22774:	b	22610 <__assert_fail@plt+0x11148>
   22778:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2277c:	ldr	r3, [r0, #84]	; 0x54
   22780:	strd	r6, [sp, #8]
   22784:	ldr	r6, [r1]
   22788:	strd	r8, [sp, #16]
   2278c:	strd	sl, [sp, #24]
   22790:	str	lr, [sp, #32]
   22794:	sub	sp, sp, #84	; 0x54
   22798:	ldr	sl, [r0, #40]	; 0x28
   2279c:	cmp	r6, #0
   227a0:	str	r3, [sp, #24]
   227a4:	ble	22cd4 <__assert_fail@plt+0x1180c>
   227a8:	lsl	r3, sl, #2
   227ac:	mov	fp, r0
   227b0:	mov	r9, sl
   227b4:	str	r2, [sp, #36]	; 0x24
   227b8:	str	r3, [sp, #44]	; 0x2c
   227bc:	mov	r3, #0
   227c0:	str	r1, [sp, #56]	; 0x38
   227c4:	str	r3, [sp, #16]
   227c8:	b	22810 <__assert_fail@plt+0x11348>
   227cc:	tst	r0, #1
   227d0:	beq	227fc <__assert_fail@plt+0x11334>
   227d4:	tst	r3, #8
   227d8:	bne	227fc <__assert_fail@plt+0x11334>
   227dc:	tst	r3, #32
   227e0:	beq	227ec <__assert_fail@plt+0x11324>
   227e4:	tst	r0, #2
   227e8:	beq	227fc <__assert_fail@plt+0x11334>
   227ec:	tst	r3, #128	; 0x80
   227f0:	beq	22880 <__assert_fail@plt+0x113b8>
   227f4:	tst	r0, #8
   227f8:	bne	22880 <__assert_fail@plt+0x113b8>
   227fc:	ldr	r3, [sp, #16]
   22800:	add	r3, r3, #1
   22804:	cmp	r3, r6
   22808:	str	r3, [sp, #16]
   2280c:	bge	22cd4 <__assert_fail@plt+0x1180c>
   22810:	ldr	r1, [sp, #16]
   22814:	ldr	r3, [sp, #36]	; 0x24
   22818:	ldr	r2, [r3]
   2281c:	ldr	r3, [sp, #24]
   22820:	ldr	sl, [r2, r1, lsl #2]
   22824:	ldr	r3, [r3]
   22828:	add	r3, r3, sl, lsl #3
   2282c:	ldrb	r2, [r3, #4]
   22830:	cmp	r2, #4
   22834:	bne	227fc <__assert_fail@plt+0x11334>
   22838:	ldr	r4, [r3, #4]
   2283c:	mov	r3, #65280	; 0xff00
   22840:	movt	r3, #3
   22844:	and	r3, r3, r4
   22848:	cmp	r3, #0
   2284c:	beq	22880 <__assert_fail@plt+0x113b8>
   22850:	mov	r1, r9
   22854:	mov	r0, fp
   22858:	ldr	r2, [fp, #88]	; 0x58
   2285c:	bl	19f58 <__assert_fail@plt+0x8a90>
   22860:	ubfx	r3, r4, #8, #10
   22864:	tst	r3, #4
   22868:	bne	227cc <__assert_fail@plt+0x11304>
   2286c:	tst	r3, #8
   22870:	beq	227dc <__assert_fail@plt+0x11314>
   22874:	tst	r0, #1
   22878:	beq	227dc <__assert_fail@plt+0x11314>
   2287c:	b	227fc <__assert_fail@plt+0x11334>
   22880:	ldr	ip, [fp, #108]	; 0x6c
   22884:	cmp	ip, #0
   22888:	mov	r4, ip
   2288c:	ble	22b14 <__assert_fail@plt+0x1164c>
   22890:	ldr	r1, [fp, #116]	; 0x74
   22894:	mov	r2, ip
   22898:	mov	r0, #0
   2289c:	add	r3, r2, r0
   228a0:	asr	r3, r3, #1
   228a4:	add	lr, r3, r3, lsl #1
   228a8:	add	lr, r1, lr, lsl #3
   228ac:	ldr	lr, [lr, #4]
   228b0:	cmp	r9, lr
   228b4:	bgt	22b04 <__assert_fail@plt+0x1163c>
   228b8:	cmp	r3, r0
   228bc:	ble	22908 <__assert_fail@plt+0x11440>
   228c0:	add	r2, r3, r0
   228c4:	asr	r2, r2, #1
   228c8:	add	lr, r2, r2, lsl #1
   228cc:	add	lr, r1, lr, lsl #3
   228d0:	ldr	lr, [lr, #4]
   228d4:	cmp	r9, lr
   228d8:	ble	228f8 <__assert_fail@plt+0x11430>
   228dc:	b	22af8 <__assert_fail@plt+0x11630>
   228e0:	add	lr, r3, r3, lsl #1
   228e4:	add	lr, r1, lr, lsl #3
   228e8:	ldr	lr, [lr, #4]
   228ec:	cmp	r9, lr
   228f0:	bgt	22b04 <__assert_fail@plt+0x1163c>
   228f4:	mov	r2, r3
   228f8:	add	r3, r0, r2
   228fc:	cmp	r0, r2
   22900:	asr	r3, r3, #1
   22904:	blt	228e0 <__assert_fail@plt+0x11418>
   22908:	cmp	ip, r0
   2290c:	ble	22b14 <__assert_fail@plt+0x1164c>
   22910:	add	r0, r0, r0, lsl #1
   22914:	add	r1, r1, r0, lsl #3
   22918:	ldr	r3, [r1, #4]
   2291c:	cmp	r9, r3
   22920:	bne	22b14 <__assert_fail@plt+0x1164c>
   22924:	add	r1, r1, #24
   22928:	b	22938 <__assert_fail@plt+0x11470>
   2292c:	ldrb	r3, [r1, #-28]	; 0xffffffe4
   22930:	cmp	r3, #0
   22934:	beq	22b14 <__assert_fail@plt+0x1164c>
   22938:	ldr	r3, [r1, #-24]	; 0xffffffe8
   2293c:	add	r1, r1, #24
   22940:	cmp	sl, r3
   22944:	bne	2292c <__assert_fail@plt+0x11464>
   22948:	lsl	r2, sl, #2
   2294c:	mov	r3, #0
   22950:	cmp	r4, ip
   22954:	str	r2, [sp, #40]	; 0x28
   22958:	str	r3, [sp, #64]	; 0x40
   2295c:	bge	22c88 <__assert_fail@plt+0x117c0>
   22960:	add	r3, sl, sl, lsl #1
   22964:	ldr	r8, [sp, #24]
   22968:	lsl	r3, r3, #2
   2296c:	str	r3, [sp, #48]	; 0x30
   22970:	b	22a58 <__assert_fail@plt+0x11590>
   22974:	ldr	r2, [r8, #20]
   22978:	ldr	r1, [sp, #48]	; 0x30
   2297c:	add	r2, r2, r1
   22980:	ldr	r2, [r2, #8]
   22984:	ldr	r2, [r2]
   22988:	add	r2, r2, r2, lsl #1
   2298c:	add	r6, r6, r2, lsl #2
   22990:	add	r3, r9, r3
   22994:	mov	r0, fp
   22998:	ldr	r2, [fp, #88]	; 0x58
   2299c:	sub	r5, r3, r5
   229a0:	sub	r1, r5, #1
   229a4:	bl	19f58 <__assert_fail@plt+0x8a90>
   229a8:	ldr	r2, [sp, #44]	; 0x2c
   229ac:	mov	r3, r0
   229b0:	ldr	r7, [fp, #100]	; 0x64
   229b4:	ldr	r2, [r7, r2]
   229b8:	ldr	r1, [r7, r5, lsl #2]
   229bc:	cmp	r2, #0
   229c0:	ldrne	r2, [r2, #8]
   229c4:	cmp	r1, #0
   229c8:	str	r2, [sp, #28]
   229cc:	beq	22aac <__assert_fail@plt+0x115e4>
   229d0:	mov	r2, r6
   229d4:	add	r0, sp, #68	; 0x44
   229d8:	ldr	r1, [r1, #40]	; 0x28
   229dc:	str	r3, [sp, #32]
   229e0:	bl	21540 <__assert_fail@plt+0x10078>
   229e4:	cmp	r0, #0
   229e8:	str	r0, [sp, #64]	; 0x40
   229ec:	ldr	r3, [sp, #32]
   229f0:	bne	22cc4 <__assert_fail@plt+0x117fc>
   229f4:	add	r2, sp, #68	; 0x44
   229f8:	mov	r1, r8
   229fc:	ldr	r7, [fp, #100]	; 0x64
   22a00:	add	r0, sp, #64	; 0x40
   22a04:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   22a08:	str	r0, [r7, r5, lsl #2]
   22a0c:	ldr	r0, [sp, #76]	; 0x4c
   22a10:	bl	14484 <__assert_fail@plt+0x2fbc>
   22a14:	ldr	r3, [fp, #100]	; 0x64
   22a18:	ldr	r2, [r3, r5, lsl #2]
   22a1c:	cmp	r2, #0
   22a20:	beq	22ad0 <__assert_fail@plt+0x11608>
   22a24:	ldr	r2, [sp, #20]
   22a28:	cmp	r2, #0
   22a2c:	bne	22a48 <__assert_fail@plt+0x11580>
   22a30:	ldr	r2, [sp, #44]	; 0x2c
   22a34:	ldr	r3, [r3, r2]
   22a38:	ldr	r2, [sp, #28]
   22a3c:	ldr	r3, [r3, #8]
   22a40:	cmp	r3, r2
   22a44:	bgt	22c40 <__assert_fail@plt+0x11778>
   22a48:	ldr	ip, [fp, #108]	; 0x6c
   22a4c:	add	r4, r4, #1
   22a50:	cmp	r4, ip
   22a54:	bge	22c88 <__assert_fail@plt+0x117c0>
   22a58:	ldr	r3, [fp, #116]	; 0x74
   22a5c:	add	r2, r4, r4, lsl #1
   22a60:	ldr	r1, [r3, r2, lsl #3]
   22a64:	add	r3, r3, r2, lsl #3
   22a68:	cmp	sl, r1
   22a6c:	bne	22a4c <__assert_fail@plt+0x11584>
   22a70:	ldr	r2, [r3, #4]
   22a74:	cmp	r9, r2
   22a78:	bne	22a4c <__assert_fail@plt+0x11584>
   22a7c:	ldr	r5, [r3, #8]
   22a80:	ldr	r3, [r3, #12]
   22a84:	ldr	r6, [r8, #24]
   22a88:	subs	r2, r3, r5
   22a8c:	str	r2, [sp, #20]
   22a90:	beq	22974 <__assert_fail@plt+0x114ac>
   22a94:	ldr	r2, [r8, #12]
   22a98:	ldr	r1, [sp, #40]	; 0x28
   22a9c:	ldr	r2, [r2, r1]
   22aa0:	add	r2, r2, r2, lsl #1
   22aa4:	add	r6, r6, r2, lsl #2
   22aa8:	b	22990 <__assert_fail@plt+0x114c8>
   22aac:	mov	r2, r6
   22ab0:	mov	r1, r8
   22ab4:	add	r0, sp, #64	; 0x40
   22ab8:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   22abc:	ldr	r3, [fp, #100]	; 0x64
   22ac0:	str	r0, [r7, r5, lsl #2]
   22ac4:	ldr	r2, [r3, r5, lsl #2]
   22ac8:	cmp	r2, #0
   22acc:	bne	22a24 <__assert_fail@plt+0x1155c>
   22ad0:	ldr	r0, [sp, #64]	; 0x40
   22ad4:	cmp	r0, #0
   22ad8:	beq	22a24 <__assert_fail@plt+0x1155c>
   22adc:	add	sp, sp, #84	; 0x54
   22ae0:	ldrd	r4, [sp]
   22ae4:	ldrd	r6, [sp, #8]
   22ae8:	ldrd	r8, [sp, #16]
   22aec:	ldrd	sl, [sp, #24]
   22af0:	add	sp, sp, #32
   22af4:	pop	{pc}		; (ldr pc, [sp], #4)
   22af8:	mov	r0, r2
   22afc:	mov	r2, r3
   22b00:	mov	r3, r0
   22b04:	add	r0, r3, #1
   22b08:	cmp	r0, r2
   22b0c:	blt	2289c <__assert_fail@plt+0x113d4>
   22b10:	b	22908 <__assert_fail@plt+0x11440>
   22b14:	ldr	r3, [fp, #84]	; 0x54
   22b18:	ldr	r1, [fp, #124]	; 0x7c
   22b1c:	str	r3, [sp, #52]	; 0x34
   22b20:	ldr	r3, [r3]
   22b24:	cmp	r1, #0
   22b28:	ldr	r2, [r3, sl, lsl #3]
   22b2c:	str	r2, [sp, #48]	; 0x30
   22b30:	ble	22948 <__assert_fail@plt+0x11480>
   22b34:	mov	r2, #0
   22b38:	str	sl, [sp, #40]	; 0x28
   22b3c:	str	r2, [sp, #28]
   22b40:	ldr	r2, [fp, #4]
   22b44:	str	r9, [sp, #32]
   22b48:	str	r4, [sp, #60]	; 0x3c
   22b4c:	mov	sl, r2
   22b50:	ldr	r0, [sp, #28]
   22b54:	ldr	r2, [fp, #132]	; 0x84
   22b58:	ldr	r4, [r2, r0, lsl #2]
   22b5c:	ldr	r2, [r4, #4]
   22b60:	ldr	r3, [r3, r2, lsl #3]
   22b64:	ldr	r2, [sp, #48]	; 0x30
   22b68:	cmp	r2, r3
   22b6c:	beq	22b90 <__assert_fail@plt+0x116c8>
   22b70:	ldr	r3, [sp, #28]
   22b74:	add	r3, r3, #1
   22b78:	cmp	r3, r1
   22b7c:	str	r3, [sp, #28]
   22b80:	bge	22ecc <__assert_fail@plt+0x11a04>
   22b84:	ldr	r3, [sp, #52]	; 0x34
   22b88:	ldr	r3, [r3]
   22b8c:	b	22b50 <__assert_fail@plt+0x11688>
   22b90:	ldr	r6, [r4]
   22b94:	ldr	ip, [r4, #16]
   22b98:	ldr	r7, [sp, #32]
   22b9c:	cmp	ip, #0
   22ba0:	ble	22cec <__assert_fail@plt+0x11824>
   22ba4:	mov	r3, sl
   22ba8:	mov	r5, #0
   22bac:	mov	sl, r7
   22bb0:	mov	r7, r6
   22bb4:	b	22bc8 <__assert_fail@plt+0x11700>
   22bb8:	ldr	ip, [r4, #16]
   22bbc:	mov	sl, r6
   22bc0:	cmp	r5, ip
   22bc4:	bge	22cdc <__assert_fail@plt+0x11814>
   22bc8:	ldr	r2, [r4, #20]
   22bcc:	ldr	r9, [r2, r5, lsl #2]
   22bd0:	ldr	r8, [r9, #4]
   22bd4:	sub	r2, r8, r7
   22bd8:	cmp	r2, #0
   22bdc:	add	r6, r2, sl
   22be0:	ble	22c0c <__assert_fail@plt+0x11744>
   22be4:	ldr	r1, [fp, #28]
   22be8:	cmp	r1, r6
   22bec:	blt	22c94 <__assert_fail@plt+0x117cc>
   22bf0:	add	r1, r3, r7
   22bf4:	add	r0, r3, sl
   22bf8:	str	r3, [sp, #20]
   22bfc:	bl	11240 <memcmp@plt>
   22c00:	cmp	r0, #0
   22c04:	ldr	r3, [sp, #20]
   22c08:	bne	22e74 <__assert_fail@plt+0x119ac>
   22c0c:	ldr	r1, [sp, #32]
   22c10:	mov	r2, r9
   22c14:	mov	r0, fp
   22c18:	add	r5, r5, #1
   22c1c:	mov	r7, r8
   22c20:	ldr	r3, [sp, #40]	; 0x28
   22c24:	str	r1, [sp]
   22c28:	mov	r1, r4
   22c2c:	bl	20a48 <__assert_fail@plt+0xf580>
   22c30:	cmp	r0, #1
   22c34:	ldr	r3, [fp, #4]
   22c38:	bls	22bb8 <__assert_fail@plt+0x116f0>
   22c3c:	b	22adc <__assert_fail@plt+0x11614>
   22c40:	add	r5, r6, #4
   22c44:	add	r6, r6, #8
   22c48:	mov	r2, r6
   22c4c:	mov	r1, r5
   22c50:	mov	r3, r9
   22c54:	mov	r0, fp
   22c58:	bl	1adcc <__assert_fail@plt+0x9904>
   22c5c:	cmp	r0, #0
   22c60:	str	r0, [sp, #64]	; 0x40
   22c64:	bne	22adc <__assert_fail@plt+0x11614>
   22c68:	mov	r2, r6
   22c6c:	mov	r1, r5
   22c70:	mov	r0, fp
   22c74:	bl	22778 <__assert_fail@plt+0x112b0>
   22c78:	cmp	r0, #0
   22c7c:	str	r0, [sp, #64]	; 0x40
   22c80:	beq	22a48 <__assert_fail@plt+0x11580>
   22c84:	b	22adc <__assert_fail@plt+0x11614>
   22c88:	ldr	r3, [sp, #56]	; 0x38
   22c8c:	ldr	r6, [r3]
   22c90:	b	227fc <__assert_fail@plt+0x11334>
   22c94:	ldr	lr, [fp, #48]	; 0x30
   22c98:	mov	r1, r6
   22c9c:	mov	r0, fp
   22ca0:	str	r2, [sp, #20]
   22ca4:	cmp	lr, r6
   22ca8:	blt	22f10 <__assert_fail@plt+0x11a48>
   22cac:	bl	1d848 <__assert_fail@plt+0xc380>
   22cb0:	cmp	r0, #0
   22cb4:	bne	22adc <__assert_fail@plt+0x11614>
   22cb8:	ldr	r3, [fp, #4]
   22cbc:	ldr	r2, [sp, #20]
   22cc0:	b	22bf0 <__assert_fail@plt+0x11728>
   22cc4:	ldr	r0, [sp, #76]	; 0x4c
   22cc8:	bl	14484 <__assert_fail@plt+0x2fbc>
   22ccc:	ldr	r0, [sp, #64]	; 0x40
   22cd0:	b	22adc <__assert_fail@plt+0x11614>
   22cd4:	mov	r0, #0
   22cd8:	b	22adc <__assert_fail@plt+0x11614>
   22cdc:	mov	r9, r6
   22ce0:	mov	sl, r3
   22ce4:	add	r6, r8, #1
   22ce8:	mov	r7, r9
   22cec:	ldr	r3, [sp, #32]
   22cf0:	cmp	r3, r6
   22cf4:	blt	22e44 <__assert_fail@plt+0x1197c>
   22cf8:	ldr	r8, [sp, #48]	; 0x30
   22cfc:	mov	r9, r3
   22d00:	ldr	r3, [r4]
   22d04:	sub	r3, r6, r3
   22d08:	cmp	r3, #0
   22d0c:	ble	22d38 <__assert_fail@plt+0x11870>
   22d10:	ldr	r3, [fp, #28]
   22d14:	cmp	r3, r7
   22d18:	ble	22ea0 <__assert_fail@plt+0x119d8>
   22d1c:	add	r5, r7, #1
   22d20:	add	r3, sl, r6
   22d24:	ldrb	r2, [sl, r7]
   22d28:	ldrb	r3, [r3, #-1]
   22d2c:	cmp	r2, r3
   22d30:	bne	22e44 <__assert_fail@plt+0x1197c>
   22d34:	mov	r7, r5
   22d38:	ldr	r3, [fp, #100]	; 0x64
   22d3c:	ldr	r3, [r3, r6, lsl #2]
   22d40:	cmp	r3, #0
   22d44:	beq	22e38 <__assert_fail@plt+0x11970>
   22d48:	ldr	ip, [r3, #8]
   22d4c:	cmp	ip, #0
   22d50:	ble	22e38 <__assert_fail@plt+0x11970>
   22d54:	ldr	r2, [r3, #12]
   22d58:	mov	r3, #0
   22d5c:	ldr	r1, [sp, #52]	; 0x34
   22d60:	sub	r2, r2, #4
   22d64:	ldr	r0, [r1]
   22d68:	b	22d74 <__assert_fail@plt+0x118ac>
   22d6c:	cmp	ip, r3
   22d70:	beq	22e38 <__assert_fail@plt+0x11970>
   22d74:	ldr	r5, [r2, #4]!
   22d78:	add	r3, r3, #1
   22d7c:	add	r1, r0, r5, lsl #3
   22d80:	ldrb	r1, [r1, #4]
   22d84:	cmp	r1, #9
   22d88:	bne	22d6c <__assert_fail@plt+0x118a4>
   22d8c:	ldr	r1, [r0, r5, lsl #3]
   22d90:	cmp	r8, r1
   22d94:	bne	22d6c <__assert_fail@plt+0x118a4>
   22d98:	cmn	r5, #1
   22d9c:	beq	22e38 <__assert_fail@plt+0x11970>
   22da0:	ldr	r3, [r4]
   22da4:	ldr	r1, [r4, #8]
   22da8:	cmp	r1, #0
   22dac:	beq	22e4c <__assert_fail@plt+0x11984>
   22db0:	mov	ip, #9
   22db4:	mov	r0, fp
   22db8:	ldr	r2, [r4, #4]
   22dbc:	stm	sp, {r5, r6, ip}
   22dc0:	bl	2028c <__assert_fail@plt+0xedc4>
   22dc4:	cmp	r0, #1
   22dc8:	beq	22e38 <__assert_fail@plt+0x11970>
   22dcc:	cmp	r0, #0
   22dd0:	bne	22adc <__assert_fail@plt+0x11614>
   22dd4:	ldrd	r2, [r4, #12]
   22dd8:	cmp	r3, r2
   22ddc:	beq	22ee8 <__assert_fail@plt+0x11a20>
   22de0:	mov	r1, #20
   22de4:	mov	r0, #1
   22de8:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   22dec:	subs	ip, r0, #0
   22df0:	beq	22ee0 <__assert_fail@plt+0x11a18>
   22df4:	ldr	lr, [r4, #16]
   22df8:	mov	r2, ip
   22dfc:	mov	r1, r4
   22e00:	mov	r0, fp
   22e04:	ldr	r3, [sp, #40]	; 0x28
   22e08:	add	sl, lr, #1
   22e0c:	str	sl, [sp, #20]
   22e10:	ldr	sl, [r4, #20]
   22e14:	str	ip, [sl, lr, lsl #2]
   22e18:	stm	ip, {r5, r6}
   22e1c:	ldr	ip, [sp, #20]
   22e20:	str	ip, [r4, #16]
   22e24:	str	r9, [sp]
   22e28:	bl	20a48 <__assert_fail@plt+0xf580>
   22e2c:	cmp	r0, #1
   22e30:	ldr	sl, [fp, #4]
   22e34:	bhi	22adc <__assert_fail@plt+0x11614>
   22e38:	add	r6, r6, #1
   22e3c:	cmp	r9, r6
   22e40:	bge	22d00 <__assert_fail@plt+0x11838>
   22e44:	ldr	r1, [fp, #124]	; 0x7c
   22e48:	b	22b70 <__assert_fail@plt+0x116a8>
   22e4c:	sub	r3, r6, r3
   22e50:	mov	r0, #12
   22e54:	add	r1, r3, #1
   22e58:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   22e5c:	cmp	r0, #0
   22e60:	mov	r1, r0
   22e64:	str	r0, [r4, #8]
   22e68:	beq	22ee0 <__assert_fail@plt+0x11a18>
   22e6c:	ldr	r3, [r4]
   22e70:	b	22db0 <__assert_fail@plt+0x118e8>
   22e74:	ldr	ip, [r4, #16]
   22e78:	mov	r6, r7
   22e7c:	mov	r7, sl
   22e80:	mov	sl, r3
   22e84:	cmp	r5, ip
   22e88:	blt	22e44 <__assert_fail@plt+0x1197c>
   22e8c:	cmp	r5, #0
   22e90:	ble	22cec <__assert_fail@plt+0x11824>
   22e94:	mov	r9, r7
   22e98:	mov	r8, r6
   22e9c:	b	22ce4 <__assert_fail@plt+0x1181c>
   22ea0:	ldr	r3, [fp, #48]	; 0x30
   22ea4:	cmp	r3, r7
   22ea8:	ble	22e44 <__assert_fail@plt+0x1197c>
   22eac:	add	r5, r7, #1
   22eb0:	mov	r0, fp
   22eb4:	mov	r1, r5
   22eb8:	bl	1d658 <__assert_fail@plt+0xc190>
   22ebc:	cmp	r0, #0
   22ec0:	bne	22adc <__assert_fail@plt+0x11614>
   22ec4:	ldr	sl, [fp, #4]
   22ec8:	b	22d20 <__assert_fail@plt+0x11858>
   22ecc:	ldr	r9, [sp, #32]
   22ed0:	ldr	sl, [sp, #40]	; 0x28
   22ed4:	ldr	r4, [sp, #60]	; 0x3c
   22ed8:	ldr	ip, [fp, #108]	; 0x6c
   22edc:	b	22948 <__assert_fail@plt+0x11480>
   22ee0:	mov	r0, #12
   22ee4:	b	22adc <__assert_fail@plt+0x11614>
   22ee8:	lsl	r3, r3, #1
   22eec:	ldr	r0, [r4, #20]
   22ef0:	add	sl, r3, #1
   22ef4:	lsl	r1, sl, #2
   22ef8:	bl	2bb50 <__assert_fail@plt+0x1a688>
   22efc:	cmp	r0, #0
   22f00:	beq	22ee0 <__assert_fail@plt+0x11a18>
   22f04:	str	sl, [r4, #12]
   22f08:	str	r0, [r4, #20]
   22f0c:	b	22de0 <__assert_fail@plt+0x11918>
   22f10:	mov	r6, r7
   22f14:	mov	r7, sl
   22f18:	mov	sl, r3
   22f1c:	b	22e84 <__assert_fail@plt+0x119bc>
   22f20:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22f24:	mov	r4, r1
   22f28:	ldr	r5, [r1, #40]	; 0x28
   22f2c:	ldr	r3, [r1, #104]	; 0x68
   22f30:	strd	r6, [sp, #8]
   22f34:	strd	r8, [sp, #16]
   22f38:	str	sl, [sp, #24]
   22f3c:	mov	sl, r0
   22f40:	str	lr, [sp, #28]
   22f44:	sub	sp, sp, #16
   22f48:	cmp	r3, r5
   22f4c:	ldr	r8, [r1, #84]	; 0x54
   22f50:	ldr	r9, [r1, #100]	; 0x64
   22f54:	bge	22f90 <__assert_fail@plt+0x11ac8>
   22f58:	mov	r6, r2
   22f5c:	str	r2, [r9, r5, lsl #2]
   22f60:	str	r5, [r1, #104]	; 0x68
   22f64:	ldr	r3, [r8, #76]	; 0x4c
   22f68:	cmp	r3, #0
   22f6c:	bne	23058 <__assert_fail@plt+0x11b90>
   22f70:	mov	r0, r6
   22f74:	add	sp, sp, #16
   22f78:	ldrd	r4, [sp]
   22f7c:	ldrd	r6, [sp, #8]
   22f80:	ldrd	r8, [sp, #16]
   22f84:	ldr	sl, [sp, #24]
   22f88:	add	sp, sp, #28
   22f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   22f90:	ldr	r3, [r9, r5, lsl #2]
   22f94:	cmp	r3, #0
   22f98:	moveq	r6, r2
   22f9c:	streq	r2, [r9, r5, lsl #2]
   22fa0:	beq	22f64 <__assert_fail@plt+0x11a9c>
   22fa4:	cmp	r2, #0
   22fa8:	ldr	r3, [r3, #40]	; 0x28
   22fac:	beq	23018 <__assert_fail@plt+0x11b50>
   22fb0:	ldr	r7, [r2, #40]	; 0x28
   22fb4:	add	r0, sp, #4
   22fb8:	mov	r2, r3
   22fbc:	mov	r1, r7
   22fc0:	bl	21540 <__assert_fail@plt+0x10078>
   22fc4:	cmp	r0, #0
   22fc8:	str	r0, [sl]
   22fcc:	bne	230bc <__assert_fail@plt+0x11bf4>
   22fd0:	ldr	r1, [r4, #40]	; 0x28
   22fd4:	mov	r0, r4
   22fd8:	ldr	r2, [r4, #88]	; 0x58
   22fdc:	sub	r1, r1, #1
   22fe0:	bl	19f58 <__assert_fail@plt+0x8a90>
   22fe4:	ldr	r9, [r4, #100]	; 0x64
   22fe8:	mov	r3, r0
   22fec:	add	r2, sp, #4
   22ff0:	mov	r1, r8
   22ff4:	mov	r0, sl
   22ff8:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   22ffc:	cmp	r7, #0
   23000:	mov	r6, r0
   23004:	str	r0, [r9, r5, lsl #2]
   23008:	beq	22f64 <__assert_fail@plt+0x11a9c>
   2300c:	ldr	r0, [sp, #12]
   23010:	bl	14484 <__assert_fail@plt+0x2fbc>
   23014:	b	22f64 <__assert_fail@plt+0x11a9c>
   23018:	ldrd	r6, [r3]
   2301c:	sub	r1, r5, #1
   23020:	mov	r0, r4
   23024:	ldr	r2, [r4, #88]	; 0x58
   23028:	strd	r6, [sp, #4]
   2302c:	ldr	r3, [r3, #8]
   23030:	str	r3, [sp, #12]
   23034:	bl	19f58 <__assert_fail@plt+0x8a90>
   23038:	mov	r3, r0
   2303c:	add	r2, sp, #4
   23040:	mov	r1, r8
   23044:	mov	r0, sl
   23048:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   2304c:	mov	r6, r0
   23050:	str	r0, [r9, r5, lsl #2]
   23054:	b	22f64 <__assert_fail@plt+0x11a9c>
   23058:	cmp	r6, #0
   2305c:	beq	230bc <__assert_fail@plt+0x11bf4>
   23060:	add	r7, r6, #8
   23064:	add	r8, r6, #12
   23068:	mov	r1, r7
   2306c:	mov	r2, r8
   23070:	mov	r3, r5
   23074:	mov	r0, r4
   23078:	bl	1adcc <__assert_fail@plt+0x9904>
   2307c:	cmp	r0, #0
   23080:	str	r0, [sl]
   23084:	bne	230bc <__assert_fail@plt+0x11bf4>
   23088:	ldrb	r3, [r6, #52]	; 0x34
   2308c:	tst	r3, #64	; 0x40
   23090:	beq	22f70 <__assert_fail@plt+0x11aa8>
   23094:	mov	r2, r8
   23098:	mov	r1, r7
   2309c:	mov	r0, r4
   230a0:	bl	22778 <__assert_fail@plt+0x112b0>
   230a4:	cmp	r0, #0
   230a8:	str	r0, [sl]
   230ac:	bne	230bc <__assert_fail@plt+0x11bf4>
   230b0:	ldr	r3, [r4, #100]	; 0x64
   230b4:	ldr	r6, [r3, r5, lsl #2]
   230b8:	b	22f70 <__assert_fail@plt+0x11aa8>
   230bc:	mov	r6, #0
   230c0:	b	22f70 <__assert_fail@plt+0x11aa8>
   230c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   230c8:	mov	r4, r0
   230cc:	mov	r5, r3
   230d0:	strd	r6, [sp, #8]
   230d4:	strd	r8, [sp, #16]
   230d8:	strd	sl, [sp, #24]
   230dc:	str	lr, [sp, #32]
   230e0:	sub	sp, sp, #428	; 0x1ac
   230e4:	ldr	sl, [r0]
   230e8:	str	r0, [sp, #32]
   230ec:	add	r0, sp, #144	; 0x90
   230f0:	str	r1, [sp, #56]	; 0x38
   230f4:	mov	r1, #0
   230f8:	str	r2, [sp, #72]	; 0x48
   230fc:	mov	r2, #136	; 0x88
   23100:	ldr	r6, [sp, #464]	; 0x1d0
   23104:	bl	113e4 <memset@plt>
   23108:	ldr	r2, [r4, #16]
   2310c:	cmp	r2, #0
   23110:	str	r2, [sp, #48]	; 0x30
   23114:	str	sl, [sp, #228]	; 0xe4
   23118:	beq	23134 <__assert_fail@plt+0x11c6c>
   2311c:	ldrb	r2, [r4, #28]
   23120:	subs	r3, r5, r6
   23124:	movne	r3, #1
   23128:	ands	r3, r3, r2, lsr #3
   2312c:	streq	r3, [sp, #48]	; 0x30
   23130:	bne	234d8 <__assert_fail@plt+0x12010>
   23134:	ldr	r3, [sp, #32]
   23138:	ldr	r2, [sp, #472]	; 0x1d8
   2313c:	ldr	r3, [r3, #24]
   23140:	cmp	r3, r2
   23144:	movcs	r3, #0
   23148:	strcs	r3, [sp, #108]	; 0x6c
   2314c:	bcs	2316c <__assert_fail@plt+0x11ca4>
   23150:	sub	r2, r2, #1
   23154:	sub	r1, r3, r2
   23158:	sub	r3, r2, r3
   2315c:	str	r3, [sp, #108]	; 0x6c
   23160:	ldr	r3, [sp, #472]	; 0x1d8
   23164:	add	r3, r3, r1
   23168:	str	r3, [sp, #472]	; 0x1d8
   2316c:	ldr	ip, [sp, #32]
   23170:	ldr	r3, [ip, #8]
   23174:	cmp	r3, #0
   23178:	beq	23dbc <__assert_fail@plt+0x128f4>
   2317c:	ldr	r3, [sl, #36]	; 0x24
   23180:	cmp	r3, #0
   23184:	beq	23dbc <__assert_fail@plt+0x128f4>
   23188:	ldr	r2, [sl, #40]	; 0x28
   2318c:	cmp	r2, #0
   23190:	beq	23dbc <__assert_fail@plt+0x128f4>
   23194:	ldr	r0, [sl, #44]	; 0x2c
   23198:	cmp	r0, #0
   2319c:	beq	23dbc <__assert_fail@plt+0x128f4>
   231a0:	ldr	r1, [sl, #48]	; 0x30
   231a4:	cmp	r1, #0
   231a8:	beq	23dbc <__assert_fail@plt+0x128f4>
   231ac:	ldr	r3, [r3, #8]
   231b0:	cmp	r3, #0
   231b4:	bne	231f8 <__assert_fail@plt+0x11d30>
   231b8:	ldr	r3, [r2, #8]
   231bc:	cmp	r3, #0
   231c0:	bne	231f8 <__assert_fail@plt+0x11d30>
   231c4:	ldr	r3, [r0, #8]
   231c8:	cmp	r3, #0
   231cc:	beq	231dc <__assert_fail@plt+0x11d14>
   231d0:	ldrsb	r3, [ip, #28]
   231d4:	cmp	r3, #0
   231d8:	blt	231f8 <__assert_fail@plt+0x11d30>
   231dc:	adds	r6, r6, #0
   231e0:	movne	r6, #1
   231e4:	cmp	r5, #0
   231e8:	moveq	r6, #0
   231ec:	cmp	r6, #0
   231f0:	bne	23dbc <__assert_fail@plt+0x128f4>
   231f4:	mov	r5, r6
   231f8:	ldr	r3, [sp, #472]	; 0x1d8
   231fc:	cmp	r3, #0
   23200:	bne	234c8 <__assert_fail@plt+0x12000>
   23204:	ldr	r3, [sl, #76]	; 0x4c
   23208:	adds	r3, r3, #0
   2320c:	movne	r3, #1
   23210:	str	r3, [sp, #20]
   23214:	str	r3, [sp, #60]	; 0x3c
   23218:	ldr	r8, [sp, #32]
   2321c:	add	r0, sp, #144	; 0x90
   23220:	ldr	r2, [sp, #56]	; 0x38
   23224:	ldr	r3, [sl, #8]
   23228:	ldr	ip, [r8, #12]
   2322c:	str	r2, [sp, #144]	; 0x90
   23230:	ldr	lr, [sl, #92]	; 0x5c
   23234:	add	r3, r3, #1
   23238:	ldrb	r2, [sl, #88]	; 0x58
   2323c:	and	r4, ip, #4194304	; 0x400000
   23240:	ubfx	ip, ip, #22, #1
   23244:	ldr	r8, [r8, #20]
   23248:	cmp	r3, lr
   2324c:	ldr	r7, [sp, #72]	; 0x48
   23250:	movlt	r3, lr
   23254:	str	r8, [sp, #80]	; 0x50
   23258:	strb	ip, [sp, #216]	; 0xd8
   2325c:	ubfx	ip, r2, #2, #1
   23260:	add	r1, r7, #1
   23264:	ubfx	r2, r2, #3, #1
   23268:	str	lr, [sp, #224]	; 0xe0
   2326c:	orrs	lr, r8, r4
   23270:	str	r7, [sp, #188]	; 0xbc
   23274:	movne	lr, #1
   23278:	moveq	lr, #0
   2327c:	str	r7, [sp, #192]	; 0xc0
   23280:	cmp	r3, r1
   23284:	str	r7, [sp, #196]	; 0xc4
   23288:	movlt	r1, r3
   2328c:	str	r7, [sp, #200]	; 0xc8
   23290:	str	r8, [sp, #208]	; 0xd0
   23294:	strb	ip, [sp, #217]	; 0xd9
   23298:	strb	r2, [sp, #218]	; 0xda
   2329c:	strb	lr, [sp, #219]	; 0xdb
   232a0:	bl	18c84 <__assert_fail@plt+0x77bc>
   232a4:	subs	r3, r0, #0
   232a8:	str	r3, [sp, #36]	; 0x24
   232ac:	bne	23990 <__assert_fail@plt+0x124c8>
   232b0:	ldrb	r3, [sl, #88]	; 0x58
   232b4:	add	r1, sl, #96	; 0x60
   232b8:	ldrb	r2, [sp, #219]	; 0xdb
   232bc:	str	r1, [sp, #212]	; 0xd4
   232c0:	ubfx	r3, r3, #4, #1
   232c4:	cmp	r2, #0
   232c8:	strb	r3, [sp, #222]	; 0xde
   232cc:	bne	232e4 <__assert_fail@plt+0x11e1c>
   232d0:	ldr	r3, [sl, #92]	; 0x5c
   232d4:	ldr	r2, [sp, #56]	; 0x38
   232d8:	cmp	r3, #1
   232dc:	str	r2, [sp, #148]	; 0x94
   232e0:	ble	240a0 <__assert_fail@plt+0x12bd8>
   232e4:	mov	r2, #0
   232e8:	ldr	r3, [sp, #32]
   232ec:	mvn	r1, #0
   232f0:	str	r2, [sp, #172]	; 0xac
   232f4:	str	r2, [sp, #176]	; 0xb0
   232f8:	ldr	r2, [sp, #468]	; 0x1d4
   232fc:	ldrb	r3, [r3, #28]
   23300:	str	r2, [sp, #196]	; 0xc4
   23304:	str	r2, [sp, #200]	; 0xc8
   23308:	ubfx	r3, r3, #7, #1
   2330c:	strb	r3, [sp, #221]	; 0xdd
   23310:	ldr	r7, [sl, #76]	; 0x4c
   23314:	str	r1, [sp, #236]	; 0xec
   23318:	ldr	r3, [sp, #480]	; 0x1e0
   2331c:	lsl	r4, r7, #1
   23320:	cmp	r4, #0
   23324:	str	r3, [sp, #232]	; 0xe8
   23328:	ble	23368 <__assert_fail@plt+0x11ea0>
   2332c:	movw	r3, #43690	; 0xaaaa
   23330:	movt	r3, #2730	; 0xaaa
   23334:	cmp	r4, r3
   23338:	bgt	241dc <__assert_fail@plt+0x12d14>
   2333c:	add	r0, r4, r7, lsl #2
   23340:	lsl	r0, r0, #3
   23344:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   23348:	str	r0, [sp, #260]	; 0x104
   2334c:	lsl	r0, r7, #3
   23350:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   23354:	ldr	r3, [sp, #260]	; 0x104
   23358:	str	r0, [sp, #276]	; 0x114
   2335c:	cmp	r0, #0
   23360:	cmpne	r3, #0
   23364:	beq	241dc <__assert_fail@plt+0x12d14>
   23368:	ldr	r2, [sp, #472]	; 0x1d8
   2336c:	mov	r3, #1
   23370:	str	r4, [sp, #256]	; 0x100
   23374:	str	r3, [sp, #264]	; 0x108
   23378:	str	r4, [sp, #272]	; 0x110
   2337c:	cmp	r2, r3
   23380:	bls	24170 <__assert_fail@plt+0x12ca8>
   23384:	ldr	r0, [sp, #180]	; 0xb4
   23388:	cmn	r0, #-1073741822	; 0xc0000002
   2338c:	bhi	241dc <__assert_fail@plt+0x12d14>
   23390:	add	r0, r0, #1
   23394:	lsl	r0, r0, #2
   23398:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2339c:	cmp	r0, #0
   233a0:	mov	r4, r0
   233a4:	str	r0, [sp, #244]	; 0xf4
   233a8:	beq	23de8 <__assert_fail@plt+0x12920>
   233ac:	ldr	r3, [sp, #480]	; 0x1e0
   233b0:	str	r5, [sp, #112]	; 0x70
   233b4:	ldr	r2, [sl, #92]	; 0x5c
   233b8:	tst	r3, #1
   233bc:	movne	r3, #4
   233c0:	moveq	r3, #6
   233c4:	cmp	r5, r6
   233c8:	str	r2, [sp, #88]	; 0x58
   233cc:	str	r3, [sp, #204]	; 0xcc
   233d0:	movge	r3, r5
   233d4:	movlt	r3, r6
   233d8:	mvngt	r2, #0
   233dc:	movle	r2, #1
   233e0:	str	r3, [sp, #64]	; 0x40
   233e4:	ldr	r3, [sp, #48]	; 0x30
   233e8:	str	r2, [sp, #96]	; 0x60
   233ec:	movlt	r2, r5
   233f0:	movge	r2, r6
   233f4:	str	r2, [sp, #76]	; 0x4c
   233f8:	cmp	r3, #0
   233fc:	beq	241ec <__assert_fail@plt+0x12d24>
   23400:	ldr	r3, [sp, #88]	; 0x58
   23404:	cmp	r3, #1
   23408:	moveq	r3, #4
   2340c:	beq	2342c <__assert_fail@plt+0x11f64>
   23410:	ldr	r3, [sp, #32]
   23414:	ldr	r2, [sp, #80]	; 0x50
   23418:	ldr	r3, [r3, #12]
   2341c:	and	r3, r3, #4194304	; 0x400000
   23420:	orrs	r3, r2, r3
   23424:	moveq	r3, #4
   23428:	movne	r3, #0
   2342c:	ldr	r2, [sp, #36]	; 0x24
   23430:	cmp	r5, r6
   23434:	movle	r2, #2
   23438:	ldr	r1, [sp, #80]	; 0x50
   2343c:	cmp	r1, #0
   23440:	orrne	r3, r3, #1
   23444:	orr	r3, r3, r2
   23448:	ldr	r1, [sp, #64]	; 0x40
   2344c:	ldr	r2, [sp, #76]	; 0x4c
   23450:	cmp	r5, r2
   23454:	movge	r2, #0
   23458:	movlt	r2, #1
   2345c:	cmp	r5, r1
   23460:	orrgt	r2, r2, #1
   23464:	cmp	r2, #0
   23468:	bne	23988 <__assert_fail@plt+0x124c0>
   2346c:	add	r2, sp, #424	; 0x1a8
   23470:	cmp	r5, r6
   23474:	str	sl, [sp, #68]	; 0x44
   23478:	sub	r3, r3, #4
   2347c:	suble	r2, r2, #312	; 0x138
   23480:	movgt	r2, #0
   23484:	str	r3, [sp, #92]	; 0x5c
   23488:	adds	r3, r2, #0
   2348c:	movne	r3, #1
   23490:	str	r2, [sp, #100]	; 0x64
   23494:	str	r3, [sp, #104]	; 0x68
   23498:	mov	r3, #65280	; 0xff00
   2349c:	movt	r3, #3
   234a0:	str	r3, [sp, #52]	; 0x34
   234a4:	ldr	r3, [sp, #92]	; 0x5c
   234a8:	cmp	r3, #4
   234ac:	ldrls	pc, [pc, r3, lsl #2]
   234b0:	b	2420c <__assert_fail@plt+0x12d44>
   234b4:	andeq	r3, r2, r0, lsl #20
   234b8:	andeq	r3, r2, r0, lsl #20
   234bc:	muleq	r2, r8, r9
   234c0:	ldrdeq	r3, [r2], -r4
   234c4:	strdeq	r3, [r2], -r0
   234c8:	mov	r3, #1
   234cc:	str	r3, [sp, #20]
   234d0:	str	r3, [sp, #60]	; 0x3c
   234d4:	b	23218 <__assert_fail@plt+0x11d50>
   234d8:	ldr	r3, [sp, #48]	; 0x30
   234dc:	tst	r2, #1
   234e0:	movne	r3, #0
   234e4:	str	r3, [sp, #48]	; 0x30
   234e8:	b	23134 <__assert_fail@plt+0x11c6c>
   234ec:	str	r5, [sp, #112]	; 0x70
   234f0:	mov	r1, r5
   234f4:	add	r0, sp, #144	; 0x90
   234f8:	ldr	r2, [sp, #480]	; 0x1e0
   234fc:	bl	1a1a8 <__assert_fail@plt+0x8ce0>
   23500:	subs	r3, r0, #0
   23504:	str	r3, [sp, #36]	; 0x24
   23508:	bne	24240 <__assert_fail@plt+0x12d78>
   2350c:	ldr	r3, [sp, #88]	; 0x58
   23510:	cmp	r3, #1
   23514:	beq	23534 <__assert_fail@plt+0x1206c>
   23518:	ldr	r3, [sp, #172]	; 0xac
   2351c:	cmp	r3, #0
   23520:	beq	23534 <__assert_fail@plt+0x1206c>
   23524:	ldr	r3, [sp, #152]	; 0x98
   23528:	ldr	r3, [r3]
   2352c:	cmn	r3, #1
   23530:	beq	23d6c <__assert_fail@plt+0x128a4>
   23534:	ldr	r4, [sp, #228]	; 0xe4
   23538:	mov	r3, #0
   2353c:	mov	r0, #0
   23540:	mov	r1, #0
   23544:	ldr	sl, [r4, #36]	; 0x24
   23548:	str	r3, [sp, #120]	; 0x78
   2354c:	strd	r0, [sp, #248]	; 0xf8
   23550:	str	r3, [sp, #264]	; 0x108
   23554:	ldr	r3, [sp, #184]	; 0xb8
   23558:	mov	r2, r3
   2355c:	ldrsb	r3, [sl, #52]	; 0x34
   23560:	str	r2, [sp, #12]
   23564:	cmp	r3, #0
   23568:	bge	235a8 <__assert_fail@plt+0x120e0>
   2356c:	sub	r1, r2, #1
   23570:	add	r0, sp, #144	; 0x90
   23574:	ldr	r2, [sp, #232]	; 0xe8
   23578:	bl	19f58 <__assert_fail@plt+0x8a90>
   2357c:	tst	r0, #1
   23580:	bne	2419c <__assert_fail@plt+0x12cd4>
   23584:	cmp	r0, #0
   23588:	beq	235a8 <__assert_fail@plt+0x120e0>
   2358c:	and	r3, r0, #6
   23590:	cmp	r3, #6
   23594:	beq	24380 <__assert_fail@plt+0x12eb8>
   23598:	tst	r0, #2
   2359c:	bne	24280 <__assert_fail@plt+0x12db8>
   235a0:	tst	r0, #4
   235a4:	bne	242a8 <__assert_fail@plt+0x12de0>
   235a8:	ldr	r3, [sp, #244]	; 0xf4
   235ac:	cmp	r3, #0
   235b0:	beq	24054 <__assert_fail@plt+0x12b8c>
   235b4:	ldr	r2, [r4, #76]	; 0x4c
   235b8:	ldr	r1, [sp, #12]
   235bc:	cmp	r2, #0
   235c0:	str	sl, [r3, r1, lsl #2]
   235c4:	bne	2433c <__assert_fail@plt+0x12e74>
   235c8:	ldrb	r3, [sl, #52]	; 0x34
   235cc:	ldr	r2, [sp, #104]	; 0x68
   235d0:	str	r2, [sp, #16]
   235d4:	ubfx	r3, r3, #4, #1
   235d8:	cmp	r3, #0
   235dc:	mvneq	fp, #0
   235e0:	streq	r3, [sp, #28]
   235e4:	bne	2424c <__assert_fail@plt+0x12d84>
   235e8:	ldr	r3, [sp, #100]	; 0x64
   235ec:	str	fp, [sp, #24]
   235f0:	ldr	r4, [sp, #184]	; 0xb8
   235f4:	str	r3, [sp, #40]	; 0x28
   235f8:	b	23658 <__assert_fail@plt+0x12190>
   235fc:	ldrb	r3, [r5, #52]	; 0x34
   23600:	ldr	r2, [sp, #16]
   23604:	ldr	r1, [sp, #12]
   23608:	ldr	r4, [sp, #184]	; 0xb8
   2360c:	cmp	sl, r5
   23610:	movne	r2, #0
   23614:	andeq	r2, r2, #1
   23618:	cmp	r2, #0
   2361c:	movne	r1, r8
   23620:	tst	r3, #16
   23624:	str	r1, [sp, #12]
   23628:	str	r2, [sp, #16]
   2362c:	beq	23654 <__assert_fail@plt+0x1218c>
   23630:	tst	r3, #128	; 0x80
   23634:	bne	23ab8 <__assert_fail@plt+0x125f0>
   23638:	ldr	r3, [sp, #20]
   2363c:	cmp	r3, #0
   23640:	beq	24278 <__assert_fail@plt+0x12db0>
   23644:	str	r4, [sp, #24]
   23648:	str	r3, [sp, #28]
   2364c:	mov	r3, #0
   23650:	str	r3, [sp, #40]	; 0x28
   23654:	mov	sl, r5
   23658:	ldr	r3, [sp, #200]	; 0xc8
   2365c:	cmp	r3, r4
   23660:	ble	23ab0 <__assert_fail@plt+0x125e8>
   23664:	ldr	r3, [sp, #180]	; 0xb4
   23668:	add	r8, r4, #1
   2366c:	cmp	r8, r3
   23670:	bge	23ad4 <__assert_fail@plt+0x1260c>
   23674:	ldr	r3, [sp, #172]	; 0xac
   23678:	cmp	r8, r3
   2367c:	bge	23d40 <__assert_fail@plt+0x12878>
   23680:	ldrb	r3, [sl, #52]	; 0x34
   23684:	tst	r3, #32
   23688:	bne	23b08 <__assert_fail@plt+0x12640>
   2368c:	ldr	r3, [sp, #148]	; 0x94
   23690:	add	r2, r4, #1
   23694:	str	r2, [sp, #184]	; 0xb8
   23698:	ldrb	r4, [r3, r4]
   2369c:	ldr	r3, [sl, #44]	; 0x2c
   236a0:	cmp	r3, #0
   236a4:	beq	23d10 <__assert_fail@plt+0x12848>
   236a8:	ldr	r5, [r3, r4, lsl #2]
   236ac:	ldr	r3, [sp, #244]	; 0xf4
   236b0:	cmp	r3, #0
   236b4:	beq	236cc <__assert_fail@plt+0x12204>
   236b8:	mov	r2, r5
   236bc:	add	r1, sp, #144	; 0x90
   236c0:	add	r0, sp, #120	; 0x78
   236c4:	bl	22f20 <__assert_fail@plt+0x11a58>
   236c8:	mov	r5, r0
   236cc:	cmp	r5, #0
   236d0:	bne	235fc <__assert_fail@plt+0x12134>
   236d4:	ldr	r3, [sp, #120]	; 0x78
   236d8:	ldr	r4, [sp, #244]	; 0xf4
   236dc:	cmp	r3, #0
   236e0:	bne	23de4 <__assert_fail@plt+0x1291c>
   236e4:	cmp	r4, #0
   236e8:	beq	23ab0 <__assert_fail@plt+0x125e8>
   236ec:	ldr	r2, [sp, #28]
   236f0:	ldr	r3, [sp, #60]	; 0x3c
   236f4:	eor	r3, r3, #1
   236f8:	tst	r2, r3
   236fc:	bne	23ab0 <__assert_fail@plt+0x125e8>
   23700:	ldr	r3, [sp, #184]	; 0xb8
   23704:	mov	r1, #0
   23708:	ldr	r0, [sp, #248]	; 0xf8
   2370c:	add	r4, r4, r3, lsl #2
   23710:	b	23728 <__assert_fail@plt+0x12260>
   23714:	ldr	ip, [r4, #4]!
   23718:	mov	r3, r2
   2371c:	mov	r1, #1
   23720:	cmp	ip, #0
   23724:	bne	23a74 <__assert_fail@plt+0x125ac>
   23728:	add	r2, r3, #1
   2372c:	cmp	r0, r2
   23730:	bge	23714 <__assert_fail@plt+0x1224c>
   23734:	ldr	fp, [sp, #24]
   23738:	cmp	r1, #0
   2373c:	strne	r3, [sp, #184]	; 0xb8
   23740:	ldr	r2, [sp, #40]	; 0x28
   23744:	cmp	r2, #0
   23748:	beq	2375c <__assert_fail@plt+0x12294>
   2374c:	ldr	r3, [r2]
   23750:	ldr	r1, [sp, #12]
   23754:	add	r3, r3, r1
   23758:	str	r3, [r2]
   2375c:	cmn	fp, #1
   23760:	beq	23d60 <__assert_fail@plt+0x12898>
   23764:	cmn	fp, #2
   23768:	ldr	r4, [sp, #244]	; 0xf4
   2376c:	beq	23de4 <__assert_fail@plt+0x1291c>
   23770:	ldr	r3, [sp, #32]
   23774:	str	fp, [sp, #236]	; 0xec
   23778:	ldrb	r3, [r3, #28]
   2377c:	tst	r3, #16
   23780:	bne	23e3c <__assert_fail@plt+0x12974>
   23784:	ldr	r2, [sp, #472]	; 0x1d8
   23788:	cmp	r2, #1
   2378c:	bls	2407c <__assert_fail@plt+0x12bb4>
   23790:	mov	r2, fp
   23794:	add	r0, sp, #144	; 0x90
   23798:	ldr	r1, [r4, fp, lsl #2]
   2379c:	bl	1ab0c <__assert_fail@plt+0x9644>
   237a0:	ldr	r3, [sp, #68]	; 0x44
   237a4:	ldrb	r3, [r3, #88]	; 0x58
   237a8:	str	r0, [sp, #240]	; 0xf0
   237ac:	tst	r3, #1
   237b0:	bne	237c4 <__assert_fail@plt+0x122fc>
   237b4:	ldr	r3, [sp, #68]	; 0x44
   237b8:	ldr	r3, [r3, #76]	; 0x4c
   237bc:	cmp	r3, #0
   237c0:	beq	25190 <__assert_fail@plt+0x13cc8>
   237c4:	ldr	r3, [sp, #228]	; 0xe4
   237c8:	cmn	fp, #-1073741822	; 0xc0000002
   237cc:	ldr	sl, [sp, #240]	; 0xf0
   237d0:	str	r3, [sp, #12]
   237d4:	bhi	23de4 <__assert_fail@plt+0x1291c>
   237d8:	add	r5, fp, #1
   237dc:	lsl	r4, r5, #2
   237e0:	mov	r0, r4
   237e4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   237e8:	subs	r9, r0, #0
   237ec:	beq	24288 <__assert_fail@plt+0x12dc0>
   237f0:	ldr	r3, [sp, #12]
   237f4:	ldr	r6, [r3, #76]	; 0x4c
   237f8:	cmp	r6, #0
   237fc:	beq	240f0 <__assert_fail@plt+0x12c28>
   23800:	mov	r0, r4
   23804:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   23808:	cmp	r0, #0
   2380c:	mov	r6, r0
   23810:	str	r0, [sp, #24]
   23814:	beq	243b4 <__assert_fail@plt+0x12eec>
   23818:	add	r4, sp, #296	; 0x128
   2381c:	mov	r8, #0
   23820:	lsl	r7, r5, #2
   23824:	mov	r1, #0
   23828:	mov	r0, r6
   2382c:	mov	r2, r7
   23830:	bl	113e4 <memset@plt>
   23834:	add	r1, sp, #280	; 0x118
   23838:	add	r0, sp, #144	; 0x90
   2383c:	str	r9, [sp, #280]	; 0x118
   23840:	str	r6, [sp, #284]	; 0x11c
   23844:	str	sl, [sp, #288]	; 0x120
   23848:	str	fp, [sp, #292]	; 0x124
   2384c:	str	r8, [r4]
   23850:	str	r8, [r4, #4]
   23854:	str	r8, [r4, #8]
   23858:	bl	22258 <__assert_fail@plt+0x10d90>
   2385c:	mov	r3, r0
   23860:	ldr	r0, [sp, #304]	; 0x130
   23864:	str	r3, [sp, #16]
   23868:	bl	14484 <__assert_fail@plt+0x2fbc>
   2386c:	ldr	r3, [sp, #16]
   23870:	cmp	r3, #0
   23874:	bne	24388 <__assert_fail@plt+0x12ec0>
   23878:	ldr	r3, [r9]
   2387c:	cmp	r3, #0
   23880:	bne	243dc <__assert_fail@plt+0x12f14>
   23884:	ldr	r3, [r6]
   23888:	cmp	r3, #0
   2388c:	bne	243dc <__assert_fail@plt+0x12f14>
   23890:	ldr	r3, [sp, #244]	; 0xf4
   23894:	sub	r7, r7, #4
   23898:	add	r3, r3, r7
   2389c:	subs	fp, fp, #1
   238a0:	bcc	241bc <__assert_fail@plt+0x12cf4>
   238a4:	ldr	r1, [r3, #-4]!
   238a8:	cmp	r1, #0
   238ac:	beq	2389c <__assert_fail@plt+0x123d4>
   238b0:	ldrb	r2, [r1, #52]	; 0x34
   238b4:	tst	r2, #16
   238b8:	beq	2389c <__assert_fail@plt+0x123d4>
   238bc:	mov	r2, fp
   238c0:	add	r0, sp, #144	; 0x90
   238c4:	bl	1ab0c <__assert_fail@plt+0x9644>
   238c8:	add	r5, fp, #1
   238cc:	mov	sl, r0
   238d0:	b	23820 <__assert_fail@plt+0x12358>
   238d4:	ldr	r3, [sp, #64]	; 0x40
   238d8:	cmp	r3, r5
   238dc:	ble	23948 <__assert_fail@plt+0x12480>
   238e0:	ldr	r3, [sp, #56]	; 0x38
   238e4:	ldr	r1, [sp, #80]	; 0x50
   238e8:	ldrb	r2, [r3, r5]
   238ec:	add	r3, r3, r5
   238f0:	ldrb	r2, [r1, r2]
   238f4:	ldr	r1, [sp, #48]	; 0x30
   238f8:	ldrb	r2, [r1, r2]
   238fc:	cmp	r2, #0
   23900:	bne	234f0 <__assert_fail@plt+0x12028>
   23904:	ldr	r2, [sp, #56]	; 0x38
   23908:	mov	ip, r1
   2390c:	ldr	r1, [sp, #64]	; 0x40
   23910:	ldr	lr, [sp, #80]	; 0x50
   23914:	sub	r0, r2, #1
   23918:	rsb	r2, r2, #1
   2391c:	add	r0, r0, r1
   23920:	b	23938 <__assert_fail@plt+0x12470>
   23924:	ldrb	r1, [r3, #1]!
   23928:	ldrb	r1, [lr, r1]
   2392c:	ldrb	r1, [ip, r1]
   23930:	cmp	r1, #0
   23934:	bne	234ec <__assert_fail@plt+0x12024>
   23938:	cmp	r0, r3
   2393c:	add	r5, r2, r3
   23940:	bne	23924 <__assert_fail@plt+0x1245c>
   23944:	str	r5, [sp, #112]	; 0x70
   23948:	ldr	r3, [sp, #64]	; 0x40
   2394c:	cmp	r3, r5
   23950:	bne	234f0 <__assert_fail@plt+0x12028>
   23954:	ldr	r2, [sp, #72]	; 0x48
   23958:	cmp	r2, r3
   2395c:	ldrgt	r2, [sp, #56]	; 0x38
   23960:	movle	r3, #0
   23964:	ldrbgt	r3, [r2, r3]
   23968:	ldr	r2, [sp, #80]	; 0x50
   2396c:	cmp	r2, #0
   23970:	ldrbne	r3, [r2, r3]
   23974:	ldr	r2, [sp, #48]	; 0x30
   23978:	ldrb	r3, [r2, r3]
   2397c:	cmp	r3, #0
   23980:	bne	234f0 <__assert_fail@plt+0x12028>
   23984:	ldr	sl, [sp, #68]	; 0x44
   23988:	mov	r3, #1
   2398c:	str	r3, [sp, #36]	; 0x24
   23990:	ldr	r4, [sp, #244]	; 0xf4
   23994:	b	23df0 <__assert_fail@plt+0x12928>
   23998:	ldr	r3, [sp, #64]	; 0x40
   2399c:	cmp	r3, r5
   239a0:	ble	23948 <__assert_fail@plt+0x12480>
   239a4:	ldr	r1, [sp, #48]	; 0x30
   239a8:	ldr	r3, [sp, #56]	; 0x38
   239ac:	ldrb	r2, [r3, r5]
   239b0:	add	r3, r3, r5
   239b4:	ldrb	r2, [r1, r2]
   239b8:	cmp	r2, #0
   239bc:	bne	234f0 <__assert_fail@plt+0x12028>
   239c0:	ldr	r2, [sp, #56]	; 0x38
   239c4:	mov	ip, r1
   239c8:	ldr	r1, [sp, #64]	; 0x40
   239cc:	sub	r0, r2, #1
   239d0:	rsb	r2, r2, #1
   239d4:	add	r0, r0, r1
   239d8:	b	239ec <__assert_fail@plt+0x12524>
   239dc:	ldrb	r1, [r3, #1]!
   239e0:	ldrb	r1, [ip, r1]
   239e4:	cmp	r1, #0
   239e8:	bne	234ec <__assert_fail@plt+0x12024>
   239ec:	cmp	r0, r3
   239f0:	add	r5, r2, r3
   239f4:	bne	239dc <__assert_fail@plt+0x12514>
   239f8:	str	r5, [sp, #112]	; 0x70
   239fc:	b	23948 <__assert_fail@plt+0x12480>
   23a00:	ldr	r3, [sp, #76]	; 0x4c
   23a04:	cmp	r3, r5
   23a08:	bgt	23984 <__assert_fail@plt+0x124bc>
   23a0c:	ldr	r3, [sp, #80]	; 0x50
   23a10:	cmp	r3, #0
   23a14:	beq	240a8 <__assert_fail@plt+0x12be0>
   23a18:	mov	ip, r3
   23a1c:	mov	r1, #0
   23a20:	ldr	r0, [sp, #48]	; 0x30
   23a24:	mov	r3, r5
   23a28:	ldr	r6, [sp, #56]	; 0x38
   23a2c:	ldr	lr, [sp, #72]	; 0x48
   23a30:	ldr	r4, [sp, #76]	; 0x4c
   23a34:	b	23a48 <__assert_fail@plt+0x12580>
   23a38:	sub	r3, r3, #1
   23a3c:	mov	r1, #1
   23a40:	cmp	r3, r4
   23a44:	blt	241f4 <__assert_fail@plt+0x12d2c>
   23a48:	cmp	lr, r3
   23a4c:	mov	r2, #0
   23a50:	ldrbgt	r2, [r6, r3]
   23a54:	ldrb	r2, [ip, r2]
   23a58:	ldrb	r2, [r0, r2]
   23a5c:	cmp	r2, #0
   23a60:	beq	23a38 <__assert_fail@plt+0x12570>
   23a64:	cmp	r1, #0
   23a68:	movne	r5, r3
   23a6c:	strne	r3, [sp, #112]	; 0x70
   23a70:	b	234f0 <__assert_fail@plt+0x12028>
   23a74:	mov	r2, #0
   23a78:	add	r1, sp, #144	; 0x90
   23a7c:	str	r3, [sp, #184]	; 0xb8
   23a80:	add	r0, sp, #120	; 0x78
   23a84:	bl	22f20 <__assert_fail@plt+0x11a58>
   23a88:	ldr	r3, [sp, #120]	; 0x78
   23a8c:	cmp	r3, #0
   23a90:	bne	23aa4 <__assert_fail@plt+0x125dc>
   23a94:	cmp	r0, #0
   23a98:	bne	24270 <__assert_fail@plt+0x12da8>
   23a9c:	ldr	r4, [sp, #244]	; 0xf4
   23aa0:	b	23700 <__assert_fail@plt+0x12238>
   23aa4:	cmp	r0, #0
   23aa8:	mov	r5, r0
   23aac:	bne	235fc <__assert_fail@plt+0x12134>
   23ab0:	ldr	fp, [sp, #24]
   23ab4:	b	23740 <__assert_fail@plt+0x12278>
   23ab8:	mov	r2, r4
   23abc:	mov	r1, r5
   23ac0:	add	r0, sp, #144	; 0x90
   23ac4:	bl	1ab0c <__assert_fail@plt+0x9644>
   23ac8:	cmp	r0, #0
   23acc:	beq	23654 <__assert_fail@plt+0x1218c>
   23ad0:	b	23638 <__assert_fail@plt+0x12170>
   23ad4:	ldr	r2, [sp, #192]	; 0xc0
   23ad8:	cmp	r3, r2
   23adc:	bge	23674 <__assert_fail@plt+0x121ac>
   23ae0:	add	r1, r4, #2
   23ae4:	add	r0, sp, #144	; 0x90
   23ae8:	bl	1d658 <__assert_fail@plt+0xc190>
   23aec:	cmp	r0, #0
   23af0:	str	r0, [sp, #120]	; 0x78
   23af4:	bne	241a8 <__assert_fail@plt+0x12ce0>
   23af8:	ldrb	r3, [sl, #52]	; 0x34
   23afc:	ldr	r4, [sp, #184]	; 0xb8
   23b00:	tst	r3, #32
   23b04:	beq	2368c <__assert_fail@plt+0x121c4>
   23b08:	ldr	fp, [sl, #8]
   23b0c:	ldr	r6, [sp, #228]	; 0xe4
   23b10:	cmp	fp, #0
   23b14:	ble	23e30 <__assert_fail@plt+0x12968>
   23b18:	add	r3, r6, #128	; 0x80
   23b1c:	mov	r7, #0
   23b20:	str	r3, [sp, #44]	; 0x2c
   23b24:	str	r8, [sp, #84]	; 0x54
   23b28:	b	23c48 <__assert_fail@plt+0x12780>
   23b2c:	tst	r0, #1
   23b30:	beq	23c3c <__assert_fail@plt+0x12774>
   23b34:	tst	r5, #8
   23b38:	bne	23c3c <__assert_fail@plt+0x12774>
   23b3c:	tst	r5, #32
   23b40:	beq	23b4c <__assert_fail@plt+0x12684>
   23b44:	tst	r0, #2
   23b48:	beq	23c3c <__assert_fail@plt+0x12774>
   23b4c:	tst	r5, #128	; 0x80
   23b50:	beq	23b5c <__assert_fail@plt+0x12694>
   23b54:	tst	r0, #8
   23b58:	beq	23c3c <__assert_fail@plt+0x12774>
   23b5c:	mov	r0, r8
   23b60:	add	r3, sp, #144	; 0x90
   23b64:	str	r4, [sp]
   23b68:	mov	r2, r9
   23b6c:	ldr	r1, [sp, #44]	; 0x2c
   23b70:	bl	1cb6c <__assert_fail@plt+0xb6a4>
   23b74:	subs	r4, r0, #0
   23b78:	beq	23c34 <__assert_fail@plt+0x1276c>
   23b7c:	ldr	r2, [sp, #184]	; 0xb8
   23b80:	add	r0, sp, #144	; 0x90
   23b84:	ldr	r3, [sp, #264]	; 0x108
   23b88:	cmp	r3, r4
   23b8c:	movlt	r3, r4
   23b90:	add	r4, r4, r2
   23b94:	mov	r1, r4
   23b98:	str	r3, [sp, #264]	; 0x108
   23b9c:	bl	1d848 <__assert_fail@plt+0xc380>
   23ba0:	cmp	r0, #0
   23ba4:	str	r0, [sp, #132]	; 0x84
   23ba8:	bne	23da0 <__assert_fail@plt+0x128d8>
   23bac:	ldr	r3, [r6, #12]
   23bb0:	ldr	r5, [sp, #244]	; 0xf4
   23bb4:	ldr	r2, [r6, #24]
   23bb8:	ldr	r3, [r3, r9, lsl #2]
   23bbc:	ldr	r1, [r5, r4, lsl #2]
   23bc0:	add	r3, r3, r3, lsl #1
   23bc4:	lsl	r3, r3, #2
   23bc8:	cmp	r1, #0
   23bcc:	add	ip, r2, r3
   23bd0:	beq	23ca4 <__assert_fail@plt+0x127dc>
   23bd4:	mov	r2, ip
   23bd8:	add	r0, sp, #280	; 0x118
   23bdc:	ldr	r1, [r1, #40]	; 0x28
   23be0:	bl	21540 <__assert_fail@plt+0x10078>
   23be4:	cmp	r0, #0
   23be8:	str	r0, [sp, #132]	; 0x84
   23bec:	bne	23da0 <__assert_fail@plt+0x128d8>
   23bf0:	sub	r1, r4, #1
   23bf4:	add	r0, sp, #144	; 0x90
   23bf8:	ldr	r2, [sp, #232]	; 0xe8
   23bfc:	bl	19f58 <__assert_fail@plt+0x8a90>
   23c00:	ldr	r5, [sp, #244]	; 0xf4
   23c04:	mov	r3, r0
   23c08:	add	r2, sp, #280	; 0x118
   23c0c:	mov	r1, r6
   23c10:	add	r0, sp, #132	; 0x84
   23c14:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   23c18:	str	r0, [r5, r4, lsl #2]
   23c1c:	ldr	r0, [sp, #288]	; 0x120
   23c20:	bl	14484 <__assert_fail@plt+0x2fbc>
   23c24:	ldr	r3, [sp, #244]	; 0xf4
   23c28:	ldr	r2, [r3, r4, lsl #2]
   23c2c:	cmp	r2, #0
   23c30:	beq	23cfc <__assert_fail@plt+0x12834>
   23c34:	ldr	fp, [sl, #8]
   23c38:	ldr	r4, [sp, #184]	; 0xb8
   23c3c:	add	r7, r7, #1
   23c40:	cmp	r7, fp
   23c44:	bge	23e2c <__assert_fail@plt+0x12964>
   23c48:	ldr	r2, [sl, #12]
   23c4c:	ldr	r8, [r6]
   23c50:	ldr	r9, [r2, r7, lsl #2]
   23c54:	add	r2, r8, r9, lsl #3
   23c58:	ldrb	r1, [r2, #6]
   23c5c:	tst	r1, #16
   23c60:	beq	23c3c <__assert_fail@plt+0x12774>
   23c64:	ldr	r5, [r2, #4]
   23c68:	ldr	r3, [sp, #52]	; 0x34
   23c6c:	tst	r3, r5
   23c70:	beq	23b5c <__assert_fail@plt+0x12694>
   23c74:	ubfx	r5, r5, #8, #10
   23c78:	mov	r1, r4
   23c7c:	add	r0, sp, #144	; 0x90
   23c80:	ldr	r2, [sp, #232]	; 0xe8
   23c84:	bl	19f58 <__assert_fail@plt+0x8a90>
   23c88:	tst	r5, #4
   23c8c:	bne	23b2c <__assert_fail@plt+0x12664>
   23c90:	tst	r5, #8
   23c94:	beq	23b3c <__assert_fail@plt+0x12674>
   23c98:	tst	r0, #1
   23c9c:	beq	23b3c <__assert_fail@plt+0x12674>
   23ca0:	b	23c3c <__assert_fail@plt+0x12774>
   23ca4:	add	r2, r2, r3
   23ca8:	sub	r1, r4, #1
   23cac:	ldrd	r2, [r2]
   23cb0:	add	r0, sp, #144	; 0x90
   23cb4:	mov	r8, r2
   23cb8:	mov	r9, r3
   23cbc:	ldr	r2, [sp, #232]	; 0xe8
   23cc0:	add	r3, sp, #280	; 0x118
   23cc4:	strd	r8, [r3]
   23cc8:	ldr	r3, [ip, #8]
   23ccc:	str	r3, [sp, #288]	; 0x120
   23cd0:	bl	19f58 <__assert_fail@plt+0x8a90>
   23cd4:	mov	r3, r0
   23cd8:	add	r2, sp, #280	; 0x118
   23cdc:	mov	r1, r6
   23ce0:	add	r0, sp, #132	; 0x84
   23ce4:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   23ce8:	ldr	r3, [sp, #244]	; 0xf4
   23cec:	str	r0, [r5, r4, lsl #2]
   23cf0:	ldr	r2, [r3, r4, lsl #2]
   23cf4:	cmp	r2, #0
   23cf8:	bne	23c34 <__assert_fail@plt+0x1276c>
   23cfc:	ldr	r0, [sp, #132]	; 0x84
   23d00:	cmp	r0, #0
   23d04:	beq	23c34 <__assert_fail@plt+0x1276c>
   23d08:	ldr	r8, [sp, #84]	; 0x54
   23d0c:	b	23da8 <__assert_fail@plt+0x128e0>
   23d10:	ldr	r5, [sl, #48]	; 0x30
   23d14:	cmp	r5, #0
   23d18:	beq	24020 <__assert_fail@plt+0x12b58>
   23d1c:	ldr	r1, [sp, #184]	; 0xb8
   23d20:	add	r0, sp, #144	; 0x90
   23d24:	ldr	r2, [sp, #232]	; 0xe8
   23d28:	sub	r1, r1, #1
   23d2c:	bl	19f58 <__assert_fail@plt+0x8a90>
   23d30:	tst	r0, #1
   23d34:	addne	r4, r4, #256	; 0x100
   23d38:	ldr	r5, [r5, r4, lsl #2]
   23d3c:	b	236ac <__assert_fail@plt+0x121e4>
   23d40:	ldr	r2, [sp, #192]	; 0xc0
   23d44:	cmp	r3, r2
   23d48:	bge	23680 <__assert_fail@plt+0x121b8>
   23d4c:	b	23ae0 <__assert_fail@plt+0x12618>
   23d50:	mov	r0, r9
   23d54:	bl	14484 <__assert_fail@plt+0x2fbc>
   23d58:	mov	r0, r4
   23d5c:	bl	14484 <__assert_fail@plt+0x2fbc>
   23d60:	add	r0, sp, #144	; 0x90
   23d64:	bl	198bc <__assert_fail@plt+0x83f4>
   23d68:	ldr	r5, [sp, #112]	; 0x70
   23d6c:	ldr	r2, [sp, #76]	; 0x4c
   23d70:	ldr	r3, [sp, #96]	; 0x60
   23d74:	add	r5, r5, r3
   23d78:	ldr	r3, [sp, #64]	; 0x40
   23d7c:	str	r5, [sp, #112]	; 0x70
   23d80:	cmp	r5, r3
   23d84:	movle	r3, #0
   23d88:	movgt	r3, #1
   23d8c:	cmp	r5, r2
   23d90:	orrlt	r3, r3, #1
   23d94:	cmp	r3, #0
   23d98:	beq	234a4 <__assert_fail@plt+0x11fdc>
   23d9c:	b	23984 <__assert_fail@plt+0x124bc>
   23da0:	ldr	r8, [sp, #84]	; 0x54
   23da4:	ldr	r3, [sp, #244]	; 0xf4
   23da8:	cmp	r3, #0
   23dac:	str	r0, [sp, #120]	; 0x78
   23db0:	beq	24048 <__assert_fail@plt+0x12b80>
   23db4:	mov	r5, #0
   23db8:	b	236b8 <__assert_fail@plt+0x121f0>
   23dbc:	mov	r3, #1
   23dc0:	str	r3, [sp, #36]	; 0x24
   23dc4:	ldr	r0, [sp, #36]	; 0x24
   23dc8:	add	sp, sp, #428	; 0x1ac
   23dcc:	ldrd	r4, [sp]
   23dd0:	ldrd	r6, [sp, #8]
   23dd4:	ldrd	r8, [sp, #16]
   23dd8:	ldrd	sl, [sp, #24]
   23ddc:	add	sp, sp, #32
   23de0:	pop	{pc}		; (ldr pc, [sp], #4)
   23de4:	ldr	sl, [sp, #68]	; 0x44
   23de8:	mov	r3, #12
   23dec:	str	r3, [sp, #36]	; 0x24
   23df0:	mov	r0, r4
   23df4:	bl	14484 <__assert_fail@plt+0x2fbc>
   23df8:	ldr	r3, [sl, #76]	; 0x4c
   23dfc:	cmp	r3, #0
   23e00:	bne	24180 <__assert_fail@plt+0x12cb8>
   23e04:	ldr	r0, [sp, #152]	; 0x98
   23e08:	bl	14484 <__assert_fail@plt+0x2fbc>
   23e0c:	ldr	r0, [sp, #156]	; 0x9c
   23e10:	bl	14484 <__assert_fail@plt+0x2fbc>
   23e14:	ldrb	r3, [sp, #219]	; 0xdb
   23e18:	cmp	r3, #0
   23e1c:	beq	23dc4 <__assert_fail@plt+0x128fc>
   23e20:	ldr	r0, [sp, #148]	; 0x94
   23e24:	bl	14484 <__assert_fail@plt+0x2fbc>
   23e28:	b	23dc4 <__assert_fail@plt+0x128fc>
   23e2c:	ldr	r8, [sp, #84]	; 0x54
   23e30:	mov	r3, #0
   23e34:	str	r3, [sp, #120]	; 0x78
   23e38:	b	2368c <__assert_fail@plt+0x121c4>
   23e3c:	ldr	r3, [sp, #68]	; 0x44
   23e40:	ldr	r3, [r3, #76]	; 0x4c
   23e44:	cmp	r3, #0
   23e48:	bne	24064 <__assert_fail@plt+0x12b9c>
   23e4c:	ldr	sl, [sp, #68]	; 0x44
   23e50:	ldr	r3, [sp, #472]	; 0x1d8
   23e54:	cmp	r3, #0
   23e58:	beq	23df0 <__assert_fail@plt+0x12928>
   23e5c:	cmp	r3, #1
   23e60:	bls	23eb0 <__assert_fail@plt+0x129e8>
   23e64:	sub	r2, r3, #2
   23e68:	ldr	r3, [sp, #476]	; 0x1dc
   23e6c:	cmp	r2, #4
   23e70:	movls	r2, #0
   23e74:	movhi	r2, #1
   23e78:	add	r3, r3, #8
   23e7c:	ubfx	r1, r3, #0, #3
   23e80:	cmp	r1, #0
   23e84:	movne	r2, #0
   23e88:	cmp	r2, #0
   23e8c:	beq	24f18 <__assert_fail@plt+0x13a50>
   23e90:	ldr	r1, [sp, #472]	; 0x1d8
   23e94:	mvn	r0, #0
   23e98:	ldr	r2, [sp, #476]	; 0x1dc
   23e9c:	add	r2, r2, r1, lsl #3
   23ea0:	mvn	r1, #0
   23ea4:	strd	r0, [r3], #8
   23ea8:	cmp	r2, r3
   23eac:	bne	23ea4 <__assert_fail@plt+0x129dc>
   23eb0:	ldr	r3, [sp, #32]
   23eb4:	ldrb	r3, [r3, #28]
   23eb8:	eor	r3, r3, #16
   23ebc:	mov	r5, #0
   23ec0:	ldr	r1, [sp, #236]	; 0xec
   23ec4:	ldr	r2, [sp, #472]	; 0x1d8
   23ec8:	subs	r2, r2, #1
   23ecc:	movne	r2, #1
   23ed0:	ands	r3, r2, r3, lsr #4
   23ed4:	ldr	r2, [sp, #476]	; 0x1dc
   23ed8:	str	r5, [r2]
   23edc:	str	r1, [r2, #4]
   23ee0:	bne	24438 <__assert_fail@plt+0x12f70>
   23ee4:	ldrb	r2, [sp, #220]	; 0xdc
   23ee8:	ldr	ip, [sp, #112]	; 0x70
   23eec:	ldr	r0, [sp, #156]	; 0x9c
   23ef0:	cmp	r2, #0
   23ef4:	ldrne	r5, [sp, #476]	; 0x1dc
   23ef8:	movne	r2, #0
   23efc:	ldrne	r7, [sp, #472]	; 0x1d8
   23f00:	ldr	r1, [sp, #172]	; 0xac
   23f04:	addne	r5, r5, #4
   23f08:	ldr	lr, [sp, #176]	; 0xb0
   23f0c:	bne	242f0 <__assert_fail@plt+0x12e28>
   23f10:	ldr	lr, [sp, #472]	; 0x1d8
   23f14:	ldr	r1, [sp, #476]	; 0x1dc
   23f18:	add	r0, r1, #4
   23f1c:	b	23f28 <__assert_fail@plt+0x12a60>
   23f20:	ldr	r3, [sp, #476]	; 0x1dc
   23f24:	ldr	r3, [r3, r2, lsl #3]
   23f28:	cmn	r3, #1
   23f2c:	add	r1, ip, r3
   23f30:	beq	23f48 <__assert_fail@plt+0x12a80>
   23f34:	ldr	r3, [r0, r2, lsl #3]
   23f38:	ldr	r5, [sp, #476]	; 0x1dc
   23f3c:	add	r3, ip, r3
   23f40:	str	r1, [r5, r2, lsl #3]
   23f44:	str	r3, [r0, r2, lsl #3]
   23f48:	add	r2, r2, #1
   23f4c:	cmp	lr, r2
   23f50:	bne	23f20 <__assert_fail@plt+0x12a58>
   23f54:	ldr	r3, [sp, #108]	; 0x6c
   23f58:	cmp	r3, #0
   23f5c:	ble	23fac <__assert_fail@plt+0x12ae4>
   23f60:	mov	r0, r3
   23f64:	ldr	r2, [sp, #472]	; 0x1d8
   23f68:	ldr	r3, [sp, #476]	; 0x1dc
   23f6c:	add	r3, r3, r2, lsl #3
   23f70:	sub	r2, r0, #1
   23f74:	cmp	r2, #4
   23f78:	ubfx	r1, r3, #0, #3
   23f7c:	movls	r2, #0
   23f80:	movhi	r2, #1
   23f84:	cmp	r1, #0
   23f88:	movne	r2, #0
   23f8c:	cmp	r2, #0
   23f90:	beq	24f40 <__assert_fail@plt+0x13a78>
   23f94:	add	r2, r3, r0, lsl #3
   23f98:	mvn	r1, #0
   23f9c:	mvn	r0, #0
   23fa0:	strd	r0, [r3], #8
   23fa4:	cmp	r3, r2
   23fa8:	bne	23fa0 <__assert_fail@plt+0x12ad8>
   23fac:	ldr	ip, [sl, #132]	; 0x84
   23fb0:	cmp	ip, #0
   23fb4:	beq	23df0 <__assert_fail@plt+0x12928>
   23fb8:	ldr	r3, [sp, #472]	; 0x1d8
   23fbc:	cmp	r3, #1
   23fc0:	bls	23df0 <__assert_fail@plt+0x12928>
   23fc4:	ldr	r1, [sp, #476]	; 0x1dc
   23fc8:	mov	r6, r3
   23fcc:	mov	r2, #0
   23fd0:	mov	r3, #1
   23fd4:	add	r5, r1, #4
   23fd8:	ldr	r1, [ip, r2, lsl #2]
   23fdc:	mov	r0, r3
   23fe0:	cmp	r1, r2
   23fe4:	add	lr, r1, #1
   23fe8:	beq	2400c <__assert_fail@plt+0x12b44>
   23fec:	ldr	r1, [sp, #476]	; 0x1dc
   23ff0:	ldr	r1, [r1, lr, lsl #3]
   23ff4:	ldr	lr, [sp, #476]	; 0x1dc
   23ff8:	str	r1, [lr, r3, lsl #3]
   23ffc:	ldr	r2, [ip, r2, lsl #2]
   24000:	add	r2, lr, r2, lsl #3
   24004:	ldr	r2, [r2, #12]
   24008:	str	r2, [r5, r3, lsl #3]
   2400c:	add	r3, r3, #1
   24010:	mov	r2, r0
   24014:	cmp	r6, r3
   24018:	bne	23fd8 <__assert_fail@plt+0x12b10>
   2401c:	b	23df0 <__assert_fail@plt+0x12928>
   24020:	mov	r1, sl
   24024:	ldr	r0, [sp, #228]	; 0xe4
   24028:	bl	1f1c4 <__assert_fail@plt+0xdcfc>
   2402c:	cmp	r0, #0
   24030:	bne	2369c <__assert_fail@plt+0x121d4>
   24034:	ldr	r3, [sp, #244]	; 0xf4
   24038:	mov	r2, #12
   2403c:	str	r2, [sp, #120]	; 0x78
   24040:	cmp	r3, #0
   24044:	bne	23db4 <__assert_fail@plt+0x128ec>
   24048:	mov	r4, #0
   2404c:	ldr	sl, [sp, #68]	; 0x44
   24050:	b	23de8 <__assert_fail@plt+0x12920>
   24054:	ldr	r3, [sp, #104]	; 0x68
   24058:	str	r3, [sp, #16]
   2405c:	ldrb	r3, [sl, #52]	; 0x34
   24060:	b	235d4 <__assert_fail@plt+0x1210c>
   24064:	mov	r2, fp
   24068:	add	r0, sp, #144	; 0x90
   2406c:	ldr	r1, [r4, fp, lsl #2]
   24070:	bl	1ab0c <__assert_fail@plt+0x9644>
   24074:	str	r0, [sp, #240]	; 0xf0
   24078:	b	237c4 <__assert_fail@plt+0x122fc>
   2407c:	ldr	sl, [sp, #68]	; 0x44
   24080:	ldr	r2, [sl, #76]	; 0x4c
   24084:	cmp	r2, #0
   24088:	bne	24064 <__assert_fail@plt+0x12b9c>
   2408c:	ldr	r2, [sp, #472]	; 0x1d8
   24090:	cmp	r2, #0
   24094:	bne	23eb8 <__assert_fail@plt+0x129f0>
   24098:	str	r2, [sp, #36]	; 0x24
   2409c:	b	23df0 <__assert_fail@plt+0x12928>
   240a0:	ldr	r2, [sp, #72]	; 0x48
   240a4:	b	232e8 <__assert_fail@plt+0x11e20>
   240a8:	mov	r1, r3
   240ac:	mov	r3, r5
   240b0:	ldr	r0, [sp, #48]	; 0x30
   240b4:	ldr	r4, [sp, #56]	; 0x38
   240b8:	ldr	ip, [sp, #72]	; 0x48
   240bc:	ldr	lr, [sp, #76]	; 0x4c
   240c0:	b	240d4 <__assert_fail@plt+0x12c0c>
   240c4:	sub	r3, r3, #1
   240c8:	mov	r1, #1
   240cc:	cmp	lr, r3
   240d0:	bgt	241f4 <__assert_fail@plt+0x12d2c>
   240d4:	cmp	ip, r3
   240d8:	mov	r2, #0
   240dc:	ldrbgt	r2, [r4, r3]
   240e0:	ldrb	r2, [r0, r2]
   240e4:	cmp	r2, #0
   240e8:	beq	240c4 <__assert_fail@plt+0x12bfc>
   240ec:	b	23a64 <__assert_fail@plt+0x1259c>
   240f0:	add	r1, sp, #280	; 0x118
   240f4:	add	r0, sp, #144	; 0x90
   240f8:	str	r9, [sp, #280]	; 0x118
   240fc:	str	r6, [sp, #284]	; 0x11c
   24100:	str	sl, [sp, #288]	; 0x120
   24104:	str	fp, [sp, #292]	; 0x124
   24108:	str	r6, [sp, #296]	; 0x128
   2410c:	str	r6, [sp, #300]	; 0x12c
   24110:	str	r6, [sp, #304]	; 0x130
   24114:	bl	22258 <__assert_fail@plt+0x10d90>
   24118:	mov	r7, r0
   2411c:	ldr	r0, [sp, #304]	; 0x130
   24120:	bl	14484 <__assert_fail@plt+0x2fbc>
   24124:	cmp	r7, #0
   24128:	bne	243d4 <__assert_fail@plt+0x12f0c>
   2412c:	ldr	r4, [r9]
   24130:	cmp	r4, #0
   24134:	beq	23d50 <__assert_fail@plt+0x12888>
   24138:	mov	r8, fp
   2413c:	mov	fp, sl
   24140:	ldr	sl, [sp, #68]	; 0x44
   24144:	ldr	r0, [sp, #244]	; 0xf4
   24148:	bl	14484 <__assert_fail@plt+0x2fbc>
   2414c:	mov	r0, #0
   24150:	str	r8, [sp, #236]	; 0xec
   24154:	str	fp, [sp, #240]	; 0xf0
   24158:	str	r9, [sp, #244]	; 0xf4
   2415c:	bl	14484 <__assert_fail@plt+0x2fbc>
   24160:	mov	r0, #0
   24164:	bl	14484 <__assert_fail@plt+0x2fbc>
   24168:	ldr	r4, [sp, #244]	; 0xf4
   2416c:	b	23e50 <__assert_fail@plt+0x12988>
   24170:	ldrb	r3, [sl, #88]	; 0x58
   24174:	tst	r3, #2
   24178:	bne	23384 <__assert_fail@plt+0x11ebc>
   2417c:	b	233ac <__assert_fail@plt+0x11ee4>
   24180:	add	r0, sp, #144	; 0x90
   24184:	bl	198bc <__assert_fail@plt+0x83f4>
   24188:	ldr	r0, [sp, #276]	; 0x114
   2418c:	bl	14484 <__assert_fail@plt+0x2fbc>
   24190:	ldr	r0, [sp, #260]	; 0x104
   24194:	bl	14484 <__assert_fail@plt+0x2fbc>
   24198:	b	23e04 <__assert_fail@plt+0x1293c>
   2419c:	ldr	sl, [r4, #40]	; 0x28
   241a0:	cmp	sl, #0
   241a4:	bne	235a8 <__assert_fail@plt+0x120e0>
   241a8:	mov	r3, #12
   241ac:	ldr	sl, [sp, #68]	; 0x44
   241b0:	str	r3, [sp, #36]	; 0x24
   241b4:	ldr	r4, [sp, #244]	; 0xf4
   241b8:	b	23df0 <__assert_fail@plt+0x12928>
   241bc:	mov	r0, r9
   241c0:	bl	14484 <__assert_fail@plt+0x2fbc>
   241c4:	mov	r0, r6
   241c8:	bl	14484 <__assert_fail@plt+0x2fbc>
   241cc:	add	r0, sp, #144	; 0x90
   241d0:	bl	198bc <__assert_fail@plt+0x83f4>
   241d4:	ldr	r5, [sp, #112]	; 0x70
   241d8:	b	23d6c <__assert_fail@plt+0x128a4>
   241dc:	mov	r3, #12
   241e0:	ldr	r4, [sp, #244]	; 0xf4
   241e4:	str	r3, [sp, #36]	; 0x24
   241e8:	b	23df0 <__assert_fail@plt+0x12928>
   241ec:	mov	r3, #8
   241f0:	b	23448 <__assert_fail@plt+0x11f80>
   241f4:	mov	r2, #1
   241f8:	ldr	sl, [sp, #68]	; 0x44
   241fc:	str	r2, [sp, #36]	; 0x24
   24200:	str	r3, [sp, #112]	; 0x70
   24204:	ldr	r4, [sp, #244]	; 0xf4
   24208:	b	23df0 <__assert_fail@plt+0x12928>
   2420c:	ldr	r4, [sp, #48]	; 0x30
   24210:	ldr	r1, [sp, #168]	; 0xa8
   24214:	sub	r2, r5, r1
   24218:	ldr	r3, [sp, #176]	; 0xb0
   2421c:	cmp	r3, r2
   24220:	bhi	251c0 <__assert_fail@plt+0x13cf8>
   24224:	mov	r1, r5
   24228:	add	r0, sp, #144	; 0x90
   2422c:	ldr	r2, [sp, #480]	; 0x1e0
   24230:	bl	1a1a8 <__assert_fail@plt+0x8ce0>
   24234:	subs	r3, r0, #0
   24238:	str	r3, [sp, #36]	; 0x24
   2423c:	beq	251b8 <__assert_fail@plt+0x13cf0>
   24240:	ldr	sl, [sp, #68]	; 0x44
   24244:	ldr	r4, [sp, #244]	; 0xf4
   24248:	b	23df0 <__assert_fail@plt+0x12928>
   2424c:	ldrsb	r3, [sl, #52]	; 0x34
   24250:	cmp	r3, #0
   24254:	blt	242c4 <__assert_fail@plt+0x12dfc>
   24258:	ldr	fp, [sp, #12]
   2425c:	ldr	r3, [sp, #20]
   24260:	cmp	r3, #0
   24264:	strne	r3, [sp, #28]
   24268:	bne	235e8 <__assert_fail@plt+0x12120>
   2426c:	b	2375c <__assert_fail@plt+0x12294>
   24270:	mov	r5, r0
   24274:	b	235fc <__assert_fail@plt+0x12134>
   24278:	mov	fp, r4
   2427c:	b	2375c <__assert_fail@plt+0x12294>
   24280:	ldr	sl, [r4, #44]	; 0x2c
   24284:	b	241a0 <__assert_fail@plt+0x12cd8>
   24288:	ldr	sl, [sp, #68]	; 0x44
   2428c:	bl	14484 <__assert_fail@plt+0x2fbc>
   24290:	mov	r3, #12
   24294:	mov	r0, r9
   24298:	str	r3, [sp, #36]	; 0x24
   2429c:	bl	14484 <__assert_fail@plt+0x2fbc>
   242a0:	ldr	r4, [sp, #244]	; 0xf4
   242a4:	b	23df0 <__assert_fail@plt+0x12928>
   242a8:	mov	r3, r0
   242ac:	mov	r1, r4
   242b0:	ldr	r2, [sl, #40]	; 0x28
   242b4:	add	r0, sp, #120	; 0x78
   242b8:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   242bc:	mov	sl, r0
   242c0:	b	241a0 <__assert_fail@plt+0x12cd8>
   242c4:	mov	r1, sl
   242c8:	add	r0, sp, #144	; 0x90
   242cc:	ldr	r2, [sp, #12]
   242d0:	bl	1ab0c <__assert_fail@plt+0x9644>
   242d4:	subs	r3, r0, #0
   242d8:	str	r3, [sp, #28]
   242dc:	bne	24258 <__assert_fail@plt+0x12d90>
   242e0:	mvn	fp, #0
   242e4:	b	235e8 <__assert_fail@plt+0x12120>
   242e8:	ldr	r3, [sp, #476]	; 0x1dc
   242ec:	ldr	r3, [r3, r2, lsl #3]
   242f0:	cmn	r3, #1
   242f4:	beq	2432c <__assert_fail@plt+0x12e64>
   242f8:	cmp	r1, r3
   242fc:	ldr	r6, [r5, r2, lsl #3]
   24300:	moveq	r3, lr
   24304:	ldrne	r3, [r0, r3, lsl #2]
   24308:	ldr	r8, [sp, #476]	; 0x1dc
   2430c:	cmp	r1, r6
   24310:	moveq	r6, lr
   24314:	str	r3, [r8, r2, lsl #3]
   24318:	add	r3, ip, r3
   2431c:	ldrne	r6, [r0, r6, lsl #2]
   24320:	str	r3, [r8, r2, lsl #3]
   24324:	add	r6, ip, r6
   24328:	str	r6, [r5, r2, lsl #3]
   2432c:	add	r2, r2, #1
   24330:	cmp	r2, r7
   24334:	bne	242e8 <__assert_fail@plt+0x12e20>
   24338:	b	23f54 <__assert_fail@plt+0x12a8c>
   2433c:	add	r4, sl, #8
   24340:	add	r5, sl, #12
   24344:	mov	r1, r4
   24348:	mov	r2, r5
   2434c:	mov	r3, #0
   24350:	add	r0, sp, #144	; 0x90
   24354:	bl	1adcc <__assert_fail@plt+0x9904>
   24358:	cmp	r0, #0
   2435c:	mov	fp, r0
   24360:	str	r0, [sp, #120]	; 0x78
   24364:	bne	2375c <__assert_fail@plt+0x12294>
   24368:	ldrb	r3, [sl, #52]	; 0x34
   2436c:	tst	r3, #64	; 0x40
   24370:	bne	24410 <__assert_fail@plt+0x12f48>
   24374:	mov	r2, #0
   24378:	str	r2, [sp, #16]
   2437c:	b	235d4 <__assert_fail@plt+0x1210c>
   24380:	ldr	sl, [r4, #48]	; 0x30
   24384:	b	241a0 <__assert_fail@plt+0x12cd8>
   24388:	mov	r7, r3
   2438c:	mov	r0, r9
   24390:	bl	14484 <__assert_fail@plt+0x2fbc>
   24394:	ldr	r0, [sp, #24]
   24398:	bl	14484 <__assert_fail@plt+0x2fbc>
   2439c:	cmp	r7, #1
   243a0:	beq	23d60 <__assert_fail@plt+0x12898>
   243a4:	str	r7, [sp, #36]	; 0x24
   243a8:	ldr	sl, [sp, #68]	; 0x44
   243ac:	ldr	r4, [sp, #244]	; 0xf4
   243b0:	b	23df0 <__assert_fail@plt+0x12928>
   243b4:	mov	r3, #12
   243b8:	mov	r0, r9
   243bc:	ldr	sl, [sp, #68]	; 0x44
   243c0:	str	r3, [sp, #36]	; 0x24
   243c4:	bl	14484 <__assert_fail@plt+0x2fbc>
   243c8:	mov	r0, r6
   243cc:	bl	14484 <__assert_fail@plt+0x2fbc>
   243d0:	b	23990 <__assert_fail@plt+0x124c8>
   243d4:	str	r6, [sp, #24]
   243d8:	b	2438c <__assert_fail@plt+0x12ec4>
   243dc:	mov	r3, r5
   243e0:	mov	r2, r6
   243e4:	ldr	r0, [sp, #12]
   243e8:	mov	r1, r9
   243ec:	bl	21744 <__assert_fail@plt+0x1027c>
   243f0:	mov	r7, r0
   243f4:	mov	r0, r6
   243f8:	bl	14484 <__assert_fail@plt+0x2fbc>
   243fc:	cmp	r7, #0
   24400:	beq	24138 <__assert_fail@plt+0x12c70>
   24404:	mov	r3, #0
   24408:	str	r3, [sp, #24]
   2440c:	b	2438c <__assert_fail@plt+0x12ec4>
   24410:	mov	r2, r5
   24414:	mov	r1, r4
   24418:	add	r0, sp, #144	; 0x90
   2441c:	bl	22778 <__assert_fail@plt+0x112b0>
   24420:	cmp	r0, #0
   24424:	mov	fp, r0
   24428:	str	r0, [sp, #120]	; 0x78
   2442c:	bne	2375c <__assert_fail@plt+0x12294>
   24430:	ldrb	r3, [sl, #52]	; 0x34
   24434:	b	24374 <__assert_fail@plt+0x12eac>
   24438:	ldr	r2, [sp, #32]
   2443c:	ldrb	r3, [sl, #88]	; 0x58
   24440:	ldr	r2, [r2]
   24444:	tst	r3, #1
   24448:	str	r2, [sp, #12]
   2444c:	beq	24d50 <__assert_fail@plt+0x13888>
   24450:	ldr	r3, [sl, #76]	; 0x4c
   24454:	cmp	r3, r5
   24458:	ble	24d50 <__assert_fail@plt+0x13888>
   2445c:	mov	r0, #0
   24460:	mov	r1, #2
   24464:	mov	r2, #0
   24468:	mov	r3, #16
   2446c:	add	ip, sp, #280	; 0x118
   24470:	strd	r0, [sp, #120]	; 0x78
   24474:	add	r1, sp, #292	; 0x124
   24478:	mov	r0, #48	; 0x30
   2447c:	strd	r2, [ip]
   24480:	str	r1, [sp, #16]
   24484:	str	r5, [sp, #128]	; 0x80
   24488:	str	r1, [sp, #288]	; 0x120
   2448c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   24490:	cmp	r0, #0
   24494:	str	r0, [sp, #128]	; 0x80
   24498:	beq	241dc <__assert_fail@plt+0x12d14>
   2449c:	ldr	r1, [sp, #12]
   244a0:	add	r2, sp, #132	; 0x84
   244a4:	ldr	r3, [sp, #280]	; 0x118
   244a8:	str	r2, [sp, #24]
   244ac:	ldr	fp, [r1, #72]	; 0x48
   244b0:	str	r5, [sp, #132]	; 0x84
   244b4:	ldr	r1, [sp, #472]	; 0x1d8
   244b8:	str	r5, [sp, #136]	; 0x88
   244bc:	str	r5, [sp, #140]	; 0x8c
   244c0:	cmp	r3, r1
   244c4:	movcs	r3, r1
   244c8:	addcs	r5, sp, #120	; 0x78
   244cc:	strcs	r3, [sp, #280]	; 0x118
   244d0:	bcc	2519c <__assert_fail@plt+0x13cd4>
   244d4:	ldr	r0, [sp, #288]	; 0x120
   244d8:	ldr	r3, [sp, #472]	; 0x1d8
   244dc:	ldr	r1, [sp, #476]	; 0x1dc
   244e0:	str	r0, [sp, #28]
   244e4:	lsl	r2, r3, #3
   244e8:	lsl	r3, r3, #4
   244ec:	mov	r4, r1
   244f0:	str	r2, [sp, #32]
   244f4:	str	r3, [sp, #44]	; 0x2c
   244f8:	bl	11204 <memcpy@plt>
   244fc:	ldr	r6, [r4], #4
   24500:	str	sl, [sp, #20]
   24504:	str	r4, [sp, #40]	; 0x28
   24508:	str	r6, [sp, #116]	; 0x74
   2450c:	ldr	r3, [sp, #476]	; 0x1dc
   24510:	ldr	r0, [r3, #4]
   24514:	cmp	r0, r6
   24518:	blt	2504c <__assert_fail@plt+0x13b84>
   2451c:	ldr	r3, [sp, #12]
   24520:	lsl	r4, fp, #3
   24524:	mov	r7, fp
   24528:	ldr	r2, [r3]
   2452c:	add	r1, r2, r4
   24530:	ldrb	r3, [r1, #4]
   24534:	cmp	r3, #8
   24538:	beq	24a30 <__assert_fail@plt+0x13568>
   2453c:	cmp	r3, #9
   24540:	beq	24a9c <__assert_fail@plt+0x135d4>
   24544:	cmp	r6, r0
   24548:	beq	24948 <__assert_fail@plt+0x13480>
   2454c:	cmp	r5, #0
   24550:	beq	245d4 <__assert_fail@plt+0x1310c>
   24554:	ldr	r2, [sp, #136]	; 0x88
   24558:	cmp	r2, #0
   2455c:	ble	245d4 <__assert_fail@plt+0x1310c>
   24560:	subs	r2, r2, #1
   24564:	ldr	r0, [sp, #140]	; 0x8c
   24568:	moveq	r1, r2
   2456c:	beq	245c8 <__assert_fail@plt+0x13100>
   24570:	mov	r1, #0
   24574:	add	r3, r2, r1
   24578:	lsr	r3, r3, #1
   2457c:	ldr	ip, [r0, r3, lsl #2]
   24580:	cmp	ip, fp
   24584:	blt	24938 <__assert_fail@plt+0x13470>
   24588:	cmp	r1, r3
   2458c:	bcs	245c8 <__assert_fail@plt+0x13100>
   24590:	add	r2, r1, r3
   24594:	lsr	r2, r2, #1
   24598:	ldr	ip, [r0, r2, lsl #2]
   2459c:	cmp	fp, ip
   245a0:	ble	245b8 <__assert_fail@plt+0x130f0>
   245a4:	b	2492c <__assert_fail@plt+0x13464>
   245a8:	ldr	ip, [r0, r3, lsl #2]
   245ac:	cmp	ip, fp
   245b0:	blt	24938 <__assert_fail@plt+0x13470>
   245b4:	mov	r2, r3
   245b8:	add	r3, r1, r2
   245bc:	cmp	r1, r2
   245c0:	lsr	r3, r3, #1
   245c4:	bcc	245a8 <__assert_fail@plt+0x130e0>
   245c8:	ldr	r3, [r0, r1, lsl #2]
   245cc:	cmp	r3, fp
   245d0:	beq	2495c <__assert_fail@plt+0x13494>
   245d4:	ldr	r6, [sp, #228]	; 0xe4
   245d8:	ldr	r0, [r6]
   245dc:	add	r1, r0, r4
   245e0:	ldrb	r3, [r1, #4]
   245e4:	tst	r3, #8
   245e8:	beq	24784 <__assert_fail@plt+0x132bc>
   245ec:	ldr	ip, [r6, #20]
   245f0:	add	r4, fp, fp, lsl #1
   245f4:	ldr	r2, [sp, #136]	; 0x88
   245f8:	ldr	r0, [sp, #116]	; 0x74
   245fc:	add	r4, ip, r4, lsl #2
   24600:	ldr	r1, [sp, #244]	; 0xf4
   24604:	cmp	r2, #0
   24608:	ldr	r6, [r1, r0, lsl #2]
   2460c:	ble	24684 <__assert_fail@plt+0x131bc>
   24610:	subs	r2, r2, #1
   24614:	moveq	r1, r2
   24618:	ldr	ip, [sp, #140]	; 0x8c
   2461c:	beq	24678 <__assert_fail@plt+0x131b0>
   24620:	mov	r1, #0
   24624:	add	r3, r2, r1
   24628:	lsr	r3, r3, #1
   2462c:	ldr	r0, [ip, r3, lsl #2]
   24630:	cmp	fp, r0
   24634:	bgt	24a70 <__assert_fail@plt+0x135a8>
   24638:	cmp	r3, r1
   2463c:	bls	24678 <__assert_fail@plt+0x131b0>
   24640:	add	r2, r3, r1
   24644:	lsr	r2, r2, #1
   24648:	ldr	r0, [ip, r2, lsl #2]
   2464c:	cmp	fp, r0
   24650:	ble	24668 <__assert_fail@plt+0x131a0>
   24654:	b	24a64 <__assert_fail@plt+0x1359c>
   24658:	ldr	r0, [ip, r3, lsl #2]
   2465c:	cmp	fp, r0
   24660:	bgt	24a70 <__assert_fail@plt+0x135a8>
   24664:	mov	r2, r3
   24668:	add	r3, r1, r2
   2466c:	cmp	r1, r2
   24670:	lsr	r3, r3, #1
   24674:	bcc	24658 <__assert_fail@plt+0x13190>
   24678:	ldr	r3, [ip, r1, lsl #2]
   2467c:	cmp	fp, r3
   24680:	beq	24698 <__assert_fail@plt+0x131d0>
   24684:	mov	r1, fp
   24688:	ldr	r0, [sp, #24]
   2468c:	bl	19998 <__assert_fail@plt+0x84d0>
   24690:	cmp	r0, #0
   24694:	beq	24fc0 <__assert_fail@plt+0x13af8>
   24698:	ldr	r9, [r4, #4]
   2469c:	cmp	r9, #0
   246a0:	ble	24864 <__assert_fail@plt+0x1339c>
   246a4:	ldr	r8, [r6, #8]
   246a8:	mvn	fp, #0
   246ac:	mov	lr, #0
   246b0:	ldr	sl, [r4, #8]
   246b4:	add	r7, r8, fp
   246b8:	cmp	r8, #0
   246bc:	ble	2473c <__assert_fail@plt+0x13274>
   246c0:	cmp	r7, #0
   246c4:	ldr	r4, [sl, lr, lsl #2]
   246c8:	moveq	r1, r7
   246cc:	ldr	r0, [r6, #12]
   246d0:	beq	24730 <__assert_fail@plt+0x13268>
   246d4:	mov	r2, r7
   246d8:	mov	r1, #0
   246dc:	add	r3, r2, r1
   246e0:	lsr	r3, r3, #1
   246e4:	ldr	ip, [r0, r3, lsl #2]
   246e8:	cmp	r4, ip
   246ec:	bgt	24764 <__assert_fail@plt+0x1329c>
   246f0:	cmp	r3, r1
   246f4:	bls	24730 <__assert_fail@plt+0x13268>
   246f8:	add	r2, r3, r1
   246fc:	lsr	r2, r2, #1
   24700:	ldr	ip, [r0, r2, lsl #2]
   24704:	cmp	r4, ip
   24708:	ble	24720 <__assert_fail@plt+0x13258>
   2470c:	b	24758 <__assert_fail@plt+0x13290>
   24710:	ldr	ip, [r0, r3, lsl #2]
   24714:	cmp	r4, ip
   24718:	bgt	24764 <__assert_fail@plt+0x1329c>
   2471c:	mov	r2, r3
   24720:	add	r3, r1, r2
   24724:	cmp	r1, r2
   24728:	lsr	r3, r3, #1
   2472c:	bcc	24710 <__assert_fail@plt+0x13248>
   24730:	ldr	r3, [r0, r1, lsl #2]
   24734:	cmp	r4, r3
   24738:	beq	24774 <__assert_fail@plt+0x132ac>
   2473c:	add	lr, lr, #1
   24740:	cmp	lr, r9
   24744:	bne	246b8 <__assert_fail@plt+0x131f0>
   24748:	cmp	fp, #0
   2474c:	blt	24fb8 <__assert_fail@plt+0x13af0>
   24750:	ldr	r6, [sp, #116]	; 0x74
   24754:	b	2450c <__assert_fail@plt+0x13044>
   24758:	mov	r1, r2
   2475c:	mov	r2, r3
   24760:	mov	r3, r1
   24764:	add	r1, r3, #1
   24768:	cmp	r2, r1
   2476c:	bhi	246dc <__assert_fail@plt+0x13214>
   24770:	b	24730 <__assert_fail@plt+0x13268>
   24774:	cmn	fp, #1
   24778:	bne	24b30 <__assert_fail@plt+0x13668>
   2477c:	mov	fp, r4
   24780:	b	2473c <__assert_fail@plt+0x13274>
   24784:	ldrb	r2, [r1, #6]
   24788:	tst	r2, #16
   2478c:	bne	24c78 <__assert_fail@plt+0x137b0>
   24790:	cmp	r3, #4
   24794:	beq	24cc4 <__assert_fail@plt+0x137fc>
   24798:	ldr	r8, [sp, #116]	; 0x74
   2479c:	mov	r2, r8
   247a0:	add	r0, sp, #144	; 0x90
   247a4:	bl	1a070 <__assert_fail@plt+0x8ba8>
   247a8:	cmp	r0, #0
   247ac:	beq	24864 <__assert_fail@plt+0x1339c>
   247b0:	ldr	r3, [r6, #12]
   247b4:	add	r8, r8, #1
   247b8:	ldr	fp, [r3, r7, lsl #2]
   247bc:	cmp	r5, #0
   247c0:	str	r8, [sp, #116]	; 0x74
   247c4:	beq	24920 <__assert_fail@plt+0x13458>
   247c8:	ldr	r3, [sp, #236]	; 0xec
   247cc:	cmp	r8, r3
   247d0:	bgt	24864 <__assert_fail@plt+0x1339c>
   247d4:	ldr	r3, [sp, #244]	; 0xf4
   247d8:	ldr	r3, [r3, r8, lsl #2]
   247dc:	cmp	r3, #0
   247e0:	beq	24864 <__assert_fail@plt+0x1339c>
   247e4:	ldr	r2, [r3, #8]
   247e8:	cmp	r2, #0
   247ec:	ble	24864 <__assert_fail@plt+0x1339c>
   247f0:	subs	r2, r2, #1
   247f4:	ldr	r0, [r3, #12]
   247f8:	moveq	r1, r2
   247fc:	beq	24858 <__assert_fail@plt+0x13390>
   24800:	mov	r1, #0
   24804:	add	r3, r2, r1
   24808:	lsr	r3, r3, #1
   2480c:	ldr	ip, [r0, r3, lsl #2]
   24810:	cmp	ip, fp
   24814:	blt	24a8c <__assert_fail@plt+0x135c4>
   24818:	cmp	r3, r1
   2481c:	bls	24858 <__assert_fail@plt+0x13390>
   24820:	add	r2, r3, r1
   24824:	lsr	r2, r2, #1
   24828:	ldr	ip, [r0, r2, lsl #2]
   2482c:	cmp	fp, ip
   24830:	ble	24848 <__assert_fail@plt+0x13380>
   24834:	b	24a80 <__assert_fail@plt+0x135b8>
   24838:	ldr	ip, [r0, r3, lsl #2]
   2483c:	cmp	ip, fp
   24840:	blt	24a8c <__assert_fail@plt+0x135c4>
   24844:	mov	r2, r3
   24848:	add	r3, r1, r2
   2484c:	cmp	r1, r2
   24850:	lsr	r3, r3, #1
   24854:	bcc	24838 <__assert_fail@plt+0x13370>
   24858:	ldr	r3, [r0, r1, lsl #2]
   2485c:	cmp	r3, fp
   24860:	beq	24920 <__assert_fail@plt+0x13458>
   24864:	ldr	ip, [sp, #24]
   24868:	mov	r0, r5
   2486c:	ldr	r1, [sp, #28]
   24870:	ldr	r2, [sp, #472]	; 0x1d8
   24874:	ldr	r3, [sp, #476]	; 0x1dc
   24878:	stm	sp, {r1, ip}
   2487c:	add	r1, sp, #116	; 0x74
   24880:	bl	19ae0 <__assert_fail@plt+0x8618>
   24884:	subs	fp, r0, #0
   24888:	bge	24750 <__assert_fail@plt+0x13288>
   2488c:	ldr	sl, [sp, #20]
   24890:	ldr	r0, [sp, #140]	; 0x8c
   24894:	bl	14484 <__assert_fail@plt+0x2fbc>
   24898:	ldr	r3, [sp, #16]
   2489c:	ldr	r0, [sp, #288]	; 0x120
   248a0:	cmp	r0, r3
   248a4:	beq	248ac <__assert_fail@plt+0x133e4>
   248a8:	bl	14484 <__assert_fail@plt+0x2fbc>
   248ac:	ldr	r1, [sp, #16]
   248b0:	mov	r2, #0
   248b4:	mov	r3, #16
   248b8:	cmp	r5, #0
   248bc:	str	r1, [sp, #288]	; 0x120
   248c0:	add	r1, sp, #280	; 0x118
   248c4:	strd	r2, [r1]
   248c8:	beq	23988 <__assert_fail@plt+0x124c0>
   248cc:	mov	r6, #24
   248d0:	ldr	r4, [sp, #36]	; 0x24
   248d4:	b	248f4 <__assert_fail@plt+0x1342c>
   248d8:	add	r0, r0, r7
   248dc:	ldr	r0, [r0, #20]
   248e0:	bl	14484 <__assert_fail@plt+0x2fbc>
   248e4:	ldr	r3, [r5, #8]
   248e8:	add	r3, r3, r7
   248ec:	ldr	r0, [r3, #8]
   248f0:	bl	14484 <__assert_fail@plt+0x2fbc>
   248f4:	ldr	r3, [r5]
   248f8:	mul	r7, r6, r4
   248fc:	ldr	r0, [r5, #8]
   24900:	cmp	r4, r3
   24904:	add	r4, r4, #1
   24908:	blt	248d8 <__assert_fail@plt+0x13410>
   2490c:	mov	r3, #1
   24910:	str	r3, [sp, #36]	; 0x24
   24914:	bl	14484 <__assert_fail@plt+0x2fbc>
   24918:	ldr	r4, [sp, #244]	; 0xf4
   2491c:	b	23df0 <__assert_fail@plt+0x12928>
   24920:	mov	r3, #0
   24924:	str	r3, [sp, #136]	; 0x88
   24928:	b	24748 <__assert_fail@plt+0x13280>
   2492c:	mov	r1, r2
   24930:	mov	r2, r3
   24934:	mov	r3, r1
   24938:	add	r1, r3, #1
   2493c:	cmp	r2, r1
   24940:	bhi	24574 <__assert_fail@plt+0x130ac>
   24944:	b	245c8 <__assert_fail@plt+0x13100>
   24948:	ldr	r3, [sp, #240]	; 0xf0
   2494c:	cmp	r3, fp
   24950:	bne	2454c <__assert_fail@plt+0x13084>
   24954:	cmp	r5, #0
   24958:	beq	25160 <__assert_fail@plt+0x13c98>
   2495c:	ldr	r0, [sp, #40]	; 0x28
   24960:	mov	r3, #0
   24964:	ldr	r1, [sp, #472]	; 0x1d8
   24968:	ldr	r2, [sp, #476]	; 0x1dc
   2496c:	ldr	r2, [r2, r3, lsl #3]
   24970:	cmp	r2, #0
   24974:	blt	24984 <__assert_fail@plt+0x134bc>
   24978:	ldr	r2, [r0, r3, lsl #3]
   2497c:	cmn	r2, #1
   24980:	beq	24afc <__assert_fail@plt+0x13634>
   24984:	add	r3, r3, #1
   24988:	cmp	r1, r3
   2498c:	bne	24968 <__assert_fail@plt+0x134a0>
   24990:	ldr	sl, [sp, #20]
   24994:	ldr	r0, [sp, #140]	; 0x8c
   24998:	bl	14484 <__assert_fail@plt+0x2fbc>
   2499c:	ldr	r3, [sp, #16]
   249a0:	ldr	r0, [sp, #288]	; 0x120
   249a4:	cmp	r0, r3
   249a8:	beq	251a4 <__assert_fail@plt+0x13cdc>
   249ac:	bl	14484 <__assert_fail@plt+0x2fbc>
   249b0:	ldr	r1, [sp, #16]
   249b4:	mov	r2, #0
   249b8:	mov	r3, #16
   249bc:	cmp	r5, #0
   249c0:	str	r1, [sp, #288]	; 0x120
   249c4:	add	r1, sp, #280	; 0x118
   249c8:	strd	r2, [r1]
   249cc:	beq	24a20 <__assert_fail@plt+0x13558>
   249d0:	ldr	r3, [r5]
   249d4:	cmp	r3, #0
   249d8:	movgt	r6, #0
   249dc:	movgt	r4, r6
   249e0:	ble	24a18 <__assert_fail@plt+0x13550>
   249e4:	ldr	r3, [r5, #8]
   249e8:	add	r6, r6, #1
   249ec:	add	r3, r3, r4
   249f0:	ldr	r0, [r3, #20]
   249f4:	bl	14484 <__assert_fail@plt+0x2fbc>
   249f8:	ldr	r3, [r5, #8]
   249fc:	add	r3, r3, r4
   24a00:	add	r4, r4, #24
   24a04:	ldr	r0, [r3, #8]
   24a08:	bl	14484 <__assert_fail@plt+0x2fbc>
   24a0c:	ldr	r3, [r5]
   24a10:	cmp	r6, r3
   24a14:	blt	249e4 <__assert_fail@plt+0x1351c>
   24a18:	ldr	r0, [r5, #8]
   24a1c:	bl	14484 <__assert_fail@plt+0x2fbc>
   24a20:	ldr	r4, [sp, #244]	; 0xf4
   24a24:	ldr	r3, [sp, #476]	; 0x1dc
   24a28:	ldr	r3, [r3]
   24a2c:	b	23ee4 <__assert_fail@plt+0x12a1c>
   24a30:	ldr	r3, [r2, fp, lsl #3]
   24a34:	ldr	r2, [sp, #472]	; 0x1d8
   24a38:	add	r3, r3, #1
   24a3c:	cmp	r2, r3
   24a40:	ble	24544 <__assert_fail@plt+0x1307c>
   24a44:	ldr	r2, [sp, #476]	; 0x1dc
   24a48:	ldr	r1, [sp, #476]	; 0x1dc
   24a4c:	add	r2, r2, r3, lsl #3
   24a50:	str	r6, [r1, r3, lsl #3]
   24a54:	mvn	r3, #0
   24a58:	str	r3, [r2, #4]
   24a5c:	ldr	r0, [r1, #4]
   24a60:	b	24544 <__assert_fail@plt+0x1307c>
   24a64:	mov	r1, r2
   24a68:	mov	r2, r3
   24a6c:	mov	r3, r1
   24a70:	add	r1, r3, #1
   24a74:	cmp	r2, r1
   24a78:	bhi	24624 <__assert_fail@plt+0x1315c>
   24a7c:	b	24678 <__assert_fail@plt+0x131b0>
   24a80:	mov	r1, r2
   24a84:	mov	r2, r3
   24a88:	mov	r3, r1
   24a8c:	add	r1, r3, #1
   24a90:	cmp	r2, r1
   24a94:	bhi	24804 <__assert_fail@plt+0x1333c>
   24a98:	b	24858 <__assert_fail@plt+0x13390>
   24a9c:	ldr	r3, [r1]
   24aa0:	ldr	r2, [sp, #472]	; 0x1d8
   24aa4:	add	r3, r3, #1
   24aa8:	cmp	r2, r3
   24aac:	ble	24544 <__assert_fail@plt+0x1307c>
   24ab0:	ldr	r2, [sp, #476]	; 0x1dc
   24ab4:	ldr	r0, [sp, #476]	; 0x1dc
   24ab8:	ldr	r2, [r2, r3, lsl #3]
   24abc:	add	r0, r0, r3, lsl #3
   24ac0:	cmp	r2, r6
   24ac4:	blt	24f94 <__assert_fail@plt+0x13acc>
   24ac8:	ldrb	r2, [r1, #6]
   24acc:	tst	r2, #8
   24ad0:	beq	24f6c <__assert_fail@plt+0x13aa4>
   24ad4:	ldr	r1, [sp, #28]
   24ad8:	ldr	r3, [r1, r3, lsl #3]
   24adc:	cmn	r3, #1
   24ae0:	beq	24f6c <__assert_fail@plt+0x13aa4>
   24ae4:	ldr	r2, [sp, #32]
   24ae8:	ldr	r0, [sp, #476]	; 0x1dc
   24aec:	bl	11204 <memcpy@plt>
   24af0:	ldr	r3, [sp, #476]	; 0x1dc
   24af4:	ldr	r0, [r3, #4]
   24af8:	b	24544 <__assert_fail@plt+0x1307c>
   24afc:	ldr	ip, [sp, #24]
   24b00:	mov	r0, r5
   24b04:	ldr	r1, [sp, #28]
   24b08:	ldr	r2, [sp, #472]	; 0x1d8
   24b0c:	ldr	r3, [sp, #476]	; 0x1dc
   24b10:	stm	sp, {r1, ip}
   24b14:	add	r1, sp, #116	; 0x74
   24b18:	bl	19ae0 <__assert_fail@plt+0x8618>
   24b1c:	subs	fp, r0, #0
   24b20:	blt	24990 <__assert_fail@plt+0x134c8>
   24b24:	mov	r7, fp
   24b28:	lsl	r4, fp, #3
   24b2c:	b	245d4 <__assert_fail@plt+0x1310c>
   24b30:	ldr	r2, [sp, #136]	; 0x88
   24b34:	cmp	r2, #0
   24b38:	ble	24bb0 <__assert_fail@plt+0x136e8>
   24b3c:	subs	r2, r2, #1
   24b40:	ldr	r0, [sp, #140]	; 0x8c
   24b44:	moveq	r1, r2
   24b48:	beq	24ba4 <__assert_fail@plt+0x136dc>
   24b4c:	mov	r1, #0
   24b50:	add	r3, r2, r1
   24b54:	lsr	r3, r3, #1
   24b58:	ldr	ip, [r0, r3, lsl #2]
   24b5c:	cmp	fp, ip
   24b60:	bgt	24cb4 <__assert_fail@plt+0x137ec>
   24b64:	cmp	r3, r1
   24b68:	bls	24ba4 <__assert_fail@plt+0x136dc>
   24b6c:	add	r2, r3, r1
   24b70:	lsr	r2, r2, #1
   24b74:	ldr	ip, [r0, r2, lsl #2]
   24b78:	cmp	fp, ip
   24b7c:	ble	24b94 <__assert_fail@plt+0x136cc>
   24b80:	b	24ca8 <__assert_fail@plt+0x137e0>
   24b84:	ldr	ip, [r0, r3, lsl #2]
   24b88:	cmp	fp, ip
   24b8c:	bgt	24cb4 <__assert_fail@plt+0x137ec>
   24b90:	mov	r2, r3
   24b94:	add	r3, r1, r2
   24b98:	cmp	r1, r2
   24b9c:	lsr	r3, r3, #1
   24ba0:	bcc	24b84 <__assert_fail@plt+0x136bc>
   24ba4:	ldr	r3, [r0, r1, lsl #2]
   24ba8:	cmp	fp, r3
   24bac:	beq	24f8c <__assert_fail@plt+0x13ac4>
   24bb0:	cmp	r5, #0
   24bb4:	beq	24748 <__assert_fail@plt+0x13280>
   24bb8:	ldr	r6, [r5]
   24bbc:	ldmib	r5, {r1, r3}
   24bc0:	ldr	r7, [sp, #116]	; 0x74
   24bc4:	add	r2, r6, #1
   24bc8:	cmp	r2, r1
   24bcc:	str	r2, [r5]
   24bd0:	beq	250ec <__assert_fail@plt+0x13c24>
   24bd4:	add	r2, r6, r6, lsl #1
   24bd8:	ldr	r0, [sp, #44]	; 0x2c
   24bdc:	lsl	r6, r2, #3
   24be0:	str	r7, [r3, r2, lsl #3]
   24be4:	add	r7, r3, r6
   24be8:	str	r4, [r7, #4]
   24bec:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   24bf0:	ldr	r3, [r5, #8]
   24bf4:	str	r0, [r7, #8]
   24bf8:	add	r3, r3, r6
   24bfc:	ldr	r0, [r3, #8]
   24c00:	cmp	r0, #0
   24c04:	beq	25130 <__assert_fail@plt+0x13c68>
   24c08:	ldr	r4, [sp, #32]
   24c0c:	ldr	r1, [sp, #476]	; 0x1dc
   24c10:	mov	r2, r4
   24c14:	bl	11204 <memcpy@plt>
   24c18:	ldr	r3, [r5, #8]
   24c1c:	mov	r2, r4
   24c20:	ldr	r1, [sp, #28]
   24c24:	add	r3, r3, r6
   24c28:	ldr	r0, [r3, #8]
   24c2c:	add	r0, r0, r4
   24c30:	bl	11204 <memcpy@plt>
   24c34:	ldr	r2, [r5, #8]
   24c38:	ldr	r3, [sp, #136]	; 0x88
   24c3c:	add	r6, r2, r6
   24c40:	cmp	r3, #0
   24c44:	str	r3, [r6, #16]
   24c48:	ble	250d8 <__assert_fail@plt+0x13c10>
   24c4c:	lsl	r0, r3, #2
   24c50:	str	r3, [r6, #12]
   24c54:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   24c58:	cmp	r0, #0
   24c5c:	str	r0, [r6, #20]
   24c60:	beq	25180 <__assert_fail@plt+0x13cb8>
   24c64:	ldr	r2, [sp, #136]	; 0x88
   24c68:	ldr	r1, [sp, #140]	; 0x8c
   24c6c:	lsl	r2, r2, #2
   24c70:	bl	11204 <memcpy@plt>
   24c74:	b	24748 <__assert_fail@plt+0x13280>
   24c78:	ldr	ip, [sp, #116]	; 0x74
   24c7c:	add	r3, sp, #144	; 0x90
   24c80:	mov	r2, fp
   24c84:	add	r1, r6, #128	; 0x80
   24c88:	str	ip, [sp]
   24c8c:	bl	1cb6c <__assert_fail@plt+0xb6a4>
   24c90:	subs	r8, r0, #0
   24c94:	bne	24f84 <__assert_fail@plt+0x13abc>
   24c98:	ldr	r1, [r6]
   24c9c:	ldr	r8, [sp, #116]	; 0x74
   24ca0:	add	r1, r1, r4
   24ca4:	b	2479c <__assert_fail@plt+0x132d4>
   24ca8:	mov	r1, r2
   24cac:	mov	r2, r3
   24cb0:	mov	r3, r1
   24cb4:	add	r1, r3, #1
   24cb8:	cmp	r2, r1
   24cbc:	bhi	24b50 <__assert_fail@plt+0x13688>
   24cc0:	b	24ba4 <__assert_fail@plt+0x136dc>
   24cc4:	ldr	r3, [r1]
   24cc8:	ldr	r2, [sp, #472]	; 0x1d8
   24ccc:	add	r3, r3, #1
   24cd0:	cmp	r2, r3
   24cd4:	ble	24e50 <__assert_fail@plt+0x13988>
   24cd8:	ldr	r2, [sp, #476]	; 0x1dc
   24cdc:	cmp	r5, #0
   24ce0:	ldr	r1, [sp, #476]	; 0x1dc
   24ce4:	add	r2, r2, r3, lsl #3
   24ce8:	ldr	r0, [r1, r3, lsl #3]
   24cec:	ldr	r3, [r2, #4]
   24cf0:	sub	r8, r3, r0
   24cf4:	beq	24f7c <__assert_fail@plt+0x13ab4>
   24cf8:	cmn	r0, #1
   24cfc:	beq	24864 <__assert_fail@plt+0x1339c>
   24d00:	cmn	r3, #1
   24d04:	beq	24864 <__assert_fail@plt+0x1339c>
   24d08:	cmp	r8, #0
   24d0c:	beq	24e58 <__assert_fail@plt+0x13990>
   24d10:	ldr	r4, [sp, #116]	; 0x74
   24d14:	ldr	r1, [sp, #148]	; 0x94
   24d18:	ldr	r3, [sp, #172]	; 0xac
   24d1c:	sub	r3, r3, r4
   24d20:	cmp	r8, r3
   24d24:	bgt	24864 <__assert_fail@plt+0x1339c>
   24d28:	add	r0, r1, r0
   24d2c:	mov	r2, r8
   24d30:	add	r1, r1, r4
   24d34:	bl	11240 <memcmp@plt>
   24d38:	cmp	r0, #0
   24d3c:	bne	24864 <__assert_fail@plt+0x1339c>
   24d40:	ldr	r3, [r6, #12]
   24d44:	add	r8, r8, r4
   24d48:	ldr	fp, [r3, fp, lsl #2]
   24d4c:	b	247bc <__assert_fail@plt+0x132f4>
   24d50:	mov	r0, #0
   24d54:	mov	r1, #2
   24d58:	mov	r3, #16
   24d5c:	mov	r2, #0
   24d60:	strd	r0, [sp, #120]	; 0x78
   24d64:	add	r0, sp, #280	; 0x118
   24d68:	mov	ip, #0
   24d6c:	add	r1, sp, #292	; 0x124
   24d70:	add	lr, sp, #132	; 0x84
   24d74:	strd	r2, [r0]
   24d78:	mov	r5, ip
   24d7c:	ldr	r3, [sp, #12]
   24d80:	str	r1, [sp, #16]
   24d84:	str	lr, [sp, #24]
   24d88:	str	ip, [sp, #128]	; 0x80
   24d8c:	str	r1, [sp, #288]	; 0x120
   24d90:	ldr	fp, [r3, #72]	; 0x48
   24d94:	str	ip, [sp, #132]	; 0x84
   24d98:	str	ip, [sp, #136]	; 0x88
   24d9c:	str	ip, [sp, #140]	; 0x8c
   24da0:	mov	r3, #8
   24da4:	add	r0, sp, #280	; 0x118
   24da8:	ldr	r2, [sp, #16]
   24dac:	ldr	r1, [sp, #472]	; 0x1d8
   24db0:	bl	2bc30 <__assert_fail@plt+0x1a768>
   24db4:	cmp	r0, #0
   24db8:	bne	244d4 <__assert_fail@plt+0x1300c>
   24dbc:	ldr	r3, [sp, #16]
   24dc0:	ldr	r0, [sp, #288]	; 0x120
   24dc4:	cmp	r0, r3
   24dc8:	beq	24dd0 <__assert_fail@plt+0x13908>
   24dcc:	bl	14484 <__assert_fail@plt+0x2fbc>
   24dd0:	ldr	r1, [sp, #16]
   24dd4:	mov	r2, #0
   24dd8:	mov	r3, #16
   24ddc:	cmp	r5, #0
   24de0:	str	r1, [sp, #288]	; 0x120
   24de4:	add	r1, sp, #280	; 0x118
   24de8:	strd	r2, [r1]
   24dec:	beq	241dc <__assert_fail@plt+0x12d14>
   24df0:	ldr	r3, [r5]
   24df4:	cmp	r3, #0
   24df8:	movgt	r4, #0
   24dfc:	ldrgt	r6, [sp, #36]	; 0x24
   24e00:	ble	24e38 <__assert_fail@plt+0x13970>
   24e04:	add	r6, r6, #1
   24e08:	ldr	r3, [r5, #8]
   24e0c:	add	r3, r3, r4
   24e10:	ldr	r0, [r3, #20]
   24e14:	bl	14484 <__assert_fail@plt+0x2fbc>
   24e18:	ldr	r3, [r5, #8]
   24e1c:	add	r3, r3, r4
   24e20:	add	r4, r4, #24
   24e24:	ldr	r0, [r3, #8]
   24e28:	bl	14484 <__assert_fail@plt+0x2fbc>
   24e2c:	ldr	r3, [r5]
   24e30:	cmp	r6, r3
   24e34:	blt	24e04 <__assert_fail@plt+0x1393c>
   24e38:	mov	r3, #12
   24e3c:	ldr	r0, [r5, #8]
   24e40:	str	r3, [sp, #36]	; 0x24
   24e44:	bl	14484 <__assert_fail@plt+0x2fbc>
   24e48:	ldr	r4, [sp, #244]	; 0xf4
   24e4c:	b	23df0 <__assert_fail@plt+0x12928>
   24e50:	cmp	r5, #0
   24e54:	bne	24864 <__assert_fail@plt+0x1339c>
   24e58:	mov	r1, fp
   24e5c:	ldr	r0, [sp, #24]
   24e60:	bl	19998 <__assert_fail@plt+0x84d0>
   24e64:	cmp	r0, #0
   24e68:	beq	24fc0 <__assert_fail@plt+0x13af8>
   24e6c:	ldr	r8, [sp, #116]	; 0x74
   24e70:	ldr	r3, [sp, #244]	; 0xf4
   24e74:	ldr	r0, [r3, r8, lsl #2]
   24e78:	ldr	r2, [r0, #8]
   24e7c:	cmp	r2, #0
   24e80:	ble	24f0c <__assert_fail@plt+0x13a44>
   24e84:	ldr	r1, [r6, #20]
   24e88:	mov	r3, #12
   24e8c:	subs	r2, r2, #1
   24e90:	ldr	ip, [r0, #12]
   24e94:	mla	fp, r3, fp, r1
   24e98:	moveq	r1, r2
   24e9c:	ldr	r3, [fp, #8]
   24ea0:	ldr	r0, [r3]
   24ea4:	beq	24f00 <__assert_fail@plt+0x13a38>
   24ea8:	mov	r1, #0
   24eac:	add	r3, r2, r1
   24eb0:	lsr	r3, r3, #1
   24eb4:	ldr	lr, [ip, r3, lsl #2]
   24eb8:	cmp	r0, lr
   24ebc:	bgt	25120 <__assert_fail@plt+0x13c58>
   24ec0:	cmp	r1, r3
   24ec4:	bcs	24f00 <__assert_fail@plt+0x13a38>
   24ec8:	add	r2, r1, r3
   24ecc:	lsr	r2, r2, #1
   24ed0:	ldr	lr, [ip, r2, lsl #2]
   24ed4:	cmp	r0, lr
   24ed8:	ble	24ef0 <__assert_fail@plt+0x13a28>
   24edc:	b	25114 <__assert_fail@plt+0x13c4c>
   24ee0:	ldr	lr, [ip, r3, lsl #2]
   24ee4:	cmp	r0, lr
   24ee8:	bgt	25120 <__assert_fail@plt+0x13c58>
   24eec:	mov	r2, r3
   24ef0:	add	r3, r1, r2
   24ef4:	cmp	r1, r2
   24ef8:	lsr	r3, r3, #1
   24efc:	bcc	24ee0 <__assert_fail@plt+0x13a18>
   24f00:	ldr	fp, [ip, r1, lsl #2]
   24f04:	cmp	r0, fp
   24f08:	beq	24748 <__assert_fail@plt+0x13280>
   24f0c:	ldr	r1, [r6]
   24f10:	add	r1, r1, r4
   24f14:	b	2479c <__assert_fail@plt+0x132d4>
   24f18:	ldr	r2, [sp, #472]	; 0x1d8
   24f1c:	ldr	r3, [sp, #476]	; 0x1dc
   24f20:	sub	r1, r3, #8
   24f24:	add	r1, r1, r2, lsl #3
   24f28:	mvn	r2, #0
   24f2c:	str	r2, [r3, #12]
   24f30:	str	r2, [r3, #8]!
   24f34:	cmp	r1, r3
   24f38:	bne	24f2c <__assert_fail@plt+0x13a64>
   24f3c:	b	23eb0 <__assert_fail@plt+0x129e8>
   24f40:	ldr	r2, [sp, #472]	; 0x1d8
   24f44:	add	r1, r2, r0
   24f48:	ldr	r2, [sp, #476]	; 0x1dc
   24f4c:	add	r1, r2, r1, lsl #3
   24f50:	mvn	r2, #0
   24f54:	add	r3, r3, #8
   24f58:	str	r2, [r3, #-8]
   24f5c:	str	r2, [r3, #-4]
   24f60:	cmp	r1, r3
   24f64:	bne	24f54 <__assert_fail@plt+0x13a8c>
   24f68:	b	23fac <__assert_fail@plt+0x12ae4>
   24f6c:	ldr	r3, [sp, #476]	; 0x1dc
   24f70:	str	r6, [r0, #4]
   24f74:	ldr	r0, [r3, #4]
   24f78:	b	24544 <__assert_fail@plt+0x1307c>
   24f7c:	cmp	r8, #0
   24f80:	beq	24e58 <__assert_fail@plt+0x13990>
   24f84:	ldr	r4, [sp, #116]	; 0x74
   24f88:	b	24d40 <__assert_fail@plt+0x13878>
   24f8c:	mov	fp, r4
   24f90:	b	24748 <__assert_fail@plt+0x13280>
   24f94:	str	r6, [r0, #4]
   24f98:	ldr	r0, [sp, #28]
   24f9c:	ldr	r2, [sp, #32]
   24fa0:	ldr	r1, [sp, #476]	; 0x1dc
   24fa4:	bl	11204 <memcpy@plt>
   24fa8:	ldr	r6, [sp, #116]	; 0x74
   24fac:	ldr	r3, [sp, #476]	; 0x1dc
   24fb0:	ldr	r0, [r3, #4]
   24fb4:	b	24544 <__assert_fail@plt+0x1307c>
   24fb8:	cmn	fp, #2
   24fbc:	bne	24864 <__assert_fail@plt+0x1339c>
   24fc0:	ldr	sl, [sp, #20]
   24fc4:	ldr	r0, [sp, #140]	; 0x8c
   24fc8:	bl	14484 <__assert_fail@plt+0x2fbc>
   24fcc:	ldr	r3, [sp, #16]
   24fd0:	ldr	r0, [sp, #288]	; 0x120
   24fd4:	cmp	r0, r3
   24fd8:	beq	24fe0 <__assert_fail@plt+0x13b18>
   24fdc:	bl	14484 <__assert_fail@plt+0x2fbc>
   24fe0:	ldr	r1, [sp, #16]
   24fe4:	mov	r2, #0
   24fe8:	mov	r3, #16
   24fec:	cmp	r5, #0
   24ff0:	str	r1, [sp, #288]	; 0x120
   24ff4:	add	r1, sp, #280	; 0x118
   24ff8:	strd	r2, [r1]
   24ffc:	beq	241dc <__assert_fail@plt+0x12d14>
   25000:	ldr	r3, [r5]
   25004:	cmp	r3, #0
   25008:	movgt	r4, #0
   2500c:	ldrgt	r6, [sp, #36]	; 0x24
   25010:	ble	24e38 <__assert_fail@plt+0x13970>
   25014:	add	r6, r6, #1
   25018:	ldr	r3, [r5, #8]
   2501c:	add	r3, r3, r4
   25020:	ldr	r0, [r3, #20]
   25024:	bl	14484 <__assert_fail@plt+0x2fbc>
   25028:	ldr	r3, [r5, #8]
   2502c:	add	r3, r3, r4
   25030:	add	r4, r4, #24
   25034:	ldr	r0, [r3, #8]
   25038:	bl	14484 <__assert_fail@plt+0x2fbc>
   2503c:	ldr	r3, [r5]
   25040:	cmp	r6, r3
   25044:	blt	25014 <__assert_fail@plt+0x13b4c>
   25048:	b	24e38 <__assert_fail@plt+0x13970>
   2504c:	ldr	sl, [sp, #20]
   25050:	ldr	r0, [sp, #140]	; 0x8c
   25054:	bl	14484 <__assert_fail@plt+0x2fbc>
   25058:	ldr	r3, [sp, #16]
   2505c:	ldr	r0, [sp, #288]	; 0x120
   25060:	cmp	r0, r3
   25064:	beq	2506c <__assert_fail@plt+0x13ba4>
   25068:	bl	14484 <__assert_fail@plt+0x2fbc>
   2506c:	ldr	r1, [sp, #16]
   25070:	mov	r2, #0
   25074:	mov	r3, #16
   25078:	cmp	r5, #0
   2507c:	str	r1, [sp, #288]	; 0x120
   25080:	add	r1, sp, #280	; 0x118
   25084:	strd	r2, [r1]
   25088:	beq	24a20 <__assert_fail@plt+0x13558>
   2508c:	ldr	r3, [r5]
   25090:	cmp	r3, #0
   25094:	movgt	r6, #0
   25098:	movgt	r4, r6
   2509c:	ble	24a18 <__assert_fail@plt+0x13550>
   250a0:	ldr	r3, [r5, #8]
   250a4:	add	r6, r6, #1
   250a8:	add	r3, r3, r4
   250ac:	ldr	r0, [r3, #20]
   250b0:	bl	14484 <__assert_fail@plt+0x2fbc>
   250b4:	ldr	r3, [r5, #8]
   250b8:	add	r3, r3, r4
   250bc:	add	r4, r4, #24
   250c0:	ldr	r0, [r3, #8]
   250c4:	bl	14484 <__assert_fail@plt+0x2fbc>
   250c8:	ldr	r3, [r5]
   250cc:	cmp	r6, r3
   250d0:	blt	250a0 <__assert_fail@plt+0x13bd8>
   250d4:	b	24a18 <__assert_fail@plt+0x13550>
   250d8:	mov	r3, #0
   250dc:	str	r3, [r6, #12]
   250e0:	str	r3, [r6, #16]
   250e4:	str	r3, [r6, #20]
   250e8:	b	24748 <__assert_fail@plt+0x13280>
   250ec:	mov	r1, #48	; 0x30
   250f0:	mov	r0, r3
   250f4:	mul	r1, r1, r2
   250f8:	bl	2bb50 <__assert_fail@plt+0x1a688>
   250fc:	subs	r3, r0, #0
   25100:	beq	25130 <__assert_fail@plt+0x13c68>
   25104:	ldr	r2, [r5, #4]
   25108:	lsl	r2, r2, #1
   2510c:	strd	r2, [r5, #4]
   25110:	b	24bd4 <__assert_fail@plt+0x1370c>
   25114:	mov	r1, r2
   25118:	mov	r2, r3
   2511c:	mov	r3, r1
   25120:	add	r1, r3, #1
   25124:	cmp	r2, r1
   25128:	bhi	24eac <__assert_fail@plt+0x139e4>
   2512c:	b	24f00 <__assert_fail@plt+0x13a38>
   25130:	ldr	sl, [sp, #20]
   25134:	ldr	r0, [sp, #140]	; 0x8c
   25138:	bl	14484 <__assert_fail@plt+0x2fbc>
   2513c:	ldr	r3, [sp, #16]
   25140:	ldr	r0, [sp, #288]	; 0x120
   25144:	cmp	r0, r3
   25148:	bne	24fdc <__assert_fail@plt+0x13b14>
   2514c:	mov	r2, #0
   25150:	mov	r3, #16
   25154:	add	r1, sp, #280	; 0x118
   25158:	strd	r2, [r1]
   2515c:	b	25000 <__assert_fail@plt+0x13b38>
   25160:	ldr	sl, [sp, #20]
   25164:	ldr	r0, [sp, #140]	; 0x8c
   25168:	bl	14484 <__assert_fail@plt+0x2fbc>
   2516c:	ldr	r3, [sp, #16]
   25170:	ldr	r0, [sp, #288]	; 0x120
   25174:	cmp	r0, r3
   25178:	bne	24a1c <__assert_fail@plt+0x13554>
   2517c:	b	24a20 <__assert_fail@plt+0x13558>
   25180:	str	r0, [r6, #12]
   25184:	str	r0, [r6, #16]
   25188:	ldr	sl, [sp, #20]
   2518c:	b	25134 <__assert_fail@plt+0x13c6c>
   25190:	ldr	sl, [sp, #68]	; 0x44
   25194:	ldr	r3, [sp, #472]	; 0x1d8
   25198:	b	23e5c <__assert_fail@plt+0x12994>
   2519c:	add	r5, sp, #120	; 0x78
   251a0:	b	24da0 <__assert_fail@plt+0x138d8>
   251a4:	mov	r2, #0
   251a8:	mov	r3, #16
   251ac:	add	r1, sp, #280	; 0x118
   251b0:	strd	r2, [r1]
   251b4:	b	249d0 <__assert_fail@plt+0x13508>
   251b8:	ldr	r1, [sp, #168]	; 0xa8
   251bc:	sub	r2, r5, r1
   251c0:	ldr	r0, [sp, #172]	; 0xac
   251c4:	mov	r3, r4
   251c8:	cmp	r0, r2
   251cc:	bls	251dc <__assert_fail@plt+0x13d14>
   251d0:	ldr	r3, [sp, #148]	; 0x94
   251d4:	ldrb	r3, [r3, r2]
   251d8:	add	r3, r4, r3
   251dc:	ldrb	r3, [r3]
   251e0:	cmp	r3, #0
   251e4:	bne	234f0 <__assert_fail@plt+0x12028>
   251e8:	ldr	r2, [sp, #76]	; 0x4c
   251ec:	ldr	r3, [sp, #96]	; 0x60
   251f0:	add	r5, r5, r3
   251f4:	ldr	r3, [sp, #64]	; 0x40
   251f8:	str	r5, [sp, #112]	; 0x70
   251fc:	cmp	r5, r3
   25200:	movle	r3, #0
   25204:	movgt	r3, #1
   25208:	cmp	r5, r2
   2520c:	orrlt	r3, r3, #1
   25210:	cmp	r3, #0
   25214:	beq	24214 <__assert_fail@plt+0x12d4c>
   25218:	b	23984 <__assert_fail@plt+0x124bc>
   2521c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25220:	mov	r5, r1
   25224:	strd	r6, [sp, #8]
   25228:	strd	r8, [sp, #16]
   2522c:	mov	r9, r0
   25230:	strd	sl, [sp, #24]
   25234:	str	lr, [sp, #32]
   25238:	sub	sp, sp, #164	; 0xa4
   2523c:	ldr	sl, [r1]
   25240:	str	r2, [sp, #20]
   25244:	ldrb	r2, [r2, #4]
   25248:	str	r3, [sp, #32]
   2524c:	sub	r3, r2, #1
   25250:	cmp	r3, #35	; 0x23
   25254:	ldrls	pc, [pc, r3, lsl #2]
   25258:	b	25eb8 <__assert_fail@plt+0x149f0>
   2525c:	andeq	r5, r2, r8, asr sl
   25260:			; <UNDEFINED> instruction: 0x000257b0
   25264:			; <UNDEFINED> instruction: 0x00025eb8
   25268:			; <UNDEFINED> instruction: 0x00025cb0
   2526c:	andeq	r5, r2, r4, lsr #24
   25270:			; <UNDEFINED> instruction: 0x00025eb8
   25274:			; <UNDEFINED> instruction: 0x00025eb8
   25278:	andeq	r5, r2, r0, lsl r7
   2527c:	ldrdeq	r5, [r2], -r0
   25280:			; <UNDEFINED> instruction: 0x000257b0
   25284:	strdeq	r5, [r2], -r8
   25288:	ldrdeq	r5, [r2], -r8
   2528c:			; <UNDEFINED> instruction: 0x00025eb8
   25290:			; <UNDEFINED> instruction: 0x00025eb8
   25294:			; <UNDEFINED> instruction: 0x00025eb8
   25298:			; <UNDEFINED> instruction: 0x00025eb8
   2529c:			; <UNDEFINED> instruction: 0x00025eb8
   252a0:	strdeq	r5, [r2], -r8
   252a4:	strdeq	r5, [r2], -r8
   252a8:	andeq	r5, r2, r4, ror #26
   252ac:			; <UNDEFINED> instruction: 0x00025eb8
   252b0:			; <UNDEFINED> instruction: 0x00025eb8
   252b4:	andeq	r5, r2, ip, ror #5
   252b8:	andeq	r5, r2, r4, lsl r3
   252bc:			; <UNDEFINED> instruction: 0x00025eb8
   252c0:			; <UNDEFINED> instruction: 0x00025eb8
   252c4:			; <UNDEFINED> instruction: 0x00025eb8
   252c8:			; <UNDEFINED> instruction: 0x00025eb8
   252cc:			; <UNDEFINED> instruction: 0x00025eb8
   252d0:			; <UNDEFINED> instruction: 0x00025eb8
   252d4:			; <UNDEFINED> instruction: 0x00025eb8
   252d8:	strdeq	r5, [r2], -ip
   252dc:	strdeq	r5, [r2], -ip
   252e0:	muleq	r2, r8, lr
   252e4:	muleq	r2, r8, lr
   252e8:			; <UNDEFINED> instruction: 0x00025eb8
   252ec:	ldr	r3, [sp, #32]
   252f0:	tst	r3, #16777216	; 0x1000000
   252f4:	bne	260c4 <__assert_fail@plt+0x14bfc>
   252f8:	ldr	r3, [sp, #32]
   252fc:	tst	r3, #32
   25300:	bne	260c4 <__assert_fail@plt+0x14bfc>
   25304:	tst	r3, #16
   25308:	bne	26bdc <__assert_fail@plt+0x15714>
   2530c:	cmp	r2, #9
   25310:	beq	25ed0 <__assert_fail@plt+0x14a08>
   25314:	ldr	r3, [sp, #20]
   25318:	mov	r4, #1
   2531c:	strb	r4, [r3, #4]
   25320:	ldr	r2, [sl, #64]	; 0x40
   25324:	cmp	r2, #31
   25328:	beq	26b1c <__assert_fail@plt+0x15654>
   2532c:	ldr	r0, [sl, #56]	; 0x38
   25330:	lsl	r3, r2, #5
   25334:	add	r4, r2, r4
   25338:	add	r2, r3, #4
   2533c:	add	r1, r0, r3
   25340:	add	r3, r3, #16
   25344:	str	r4, [sl, #64]	; 0x40
   25348:	adds	r2, r0, r2
   2534c:	add	r0, r0, r3
   25350:	ldr	r3, [sp, #20]
   25354:	mov	ip, #0
   25358:	mvn	lr, #0
   2535c:	str	r2, [sp, #28]
   25360:	str	ip, [r1, #4]
   25364:	str	ip, [r1, #8]
   25368:	str	ip, [r1, #12]
   2536c:	ldrd	r2, [r3]
   25370:	strd	r2, [r1, #24]
   25374:	ldrb	r3, [r0, #14]
   25378:	bic	r3, r3, #12
   2537c:	strb	r3, [r0, #14]
   25380:	str	ip, [r1, #16]
   25384:	str	ip, [r1, #20]
   25388:	str	lr, [r1, #32]
   2538c:	beq	25c0c <__assert_fail@plt+0x14744>
   25390:	ldr	r6, [sp, #20]
   25394:	mov	r1, r9
   25398:	mov	r5, #0
   2539c:	ldr	r4, [sp, #32]
   253a0:	mov	r0, r6
   253a4:	and	r3, r4, #2097152	; 0x200000
   253a8:	mov	r2, r4
   253ac:	str	r3, [sp, #52]	; 0x34
   253b0:	bl	1bc08 <__assert_fail@plt+0xa740>
   253b4:	ldr	r3, [r9, #40]	; 0x28
   253b8:	and	r2, r4, #16777216	; 0x1000000
   253bc:	ldrb	r7, [r6, #4]
   253c0:	str	r2, [sp, #36]	; 0x24
   253c4:	add	r0, r3, r0
   253c8:	str	r0, [r9, #40]	; 0x28
   253cc:	cmp	r7, #23
   253d0:	cmpne	r7, #11
   253d4:	sub	r2, r7, #18
   253d8:	moveq	r3, #1
   253dc:	movne	r3, #0
   253e0:	cmp	r2, #1
   253e4:	orrls	r3, r3, #1
   253e8:	sub	r1, r7, #18
   253ec:	clz	r1, r1
   253f0:	cmp	r3, #0
   253f4:	lsr	r1, r1, #5
   253f8:	beq	257b8 <__assert_fail@plt+0x142f0>
   253fc:	ldr	r3, [sp, #20]
   25400:	cmp	r7, #23
   25404:	add	r6, sp, #96	; 0x60
   25408:	ldr	r4, [r9, #40]	; 0x28
   2540c:	ldrd	r2, [r3]
   25410:	strd	r2, [sp, #96]	; 0x60
   25414:	beq	26214 <__assert_fail@plt+0x14d4c>
   25418:	cmp	r7, #19
   2541c:	mov	r8, r1
   25420:	beq	26148 <__assert_fail@plt+0x14c80>
   25424:	mov	r1, r9
   25428:	ldr	r0, [sp, #20]
   2542c:	ldr	r2, [sp, #32]
   25430:	bl	1bc08 <__assert_fail@plt+0xa740>
   25434:	ldr	r3, [r9, #40]	; 0x28
   25438:	ldr	r2, [sp, #28]
   2543c:	add	r0, r3, r0
   25440:	cmp	r2, #0
   25444:	str	r0, [r9, #40]	; 0x28
   25448:	beq	26380 <__assert_fail@plt+0x14eb8>
   2544c:	cmp	r7, #18
   25450:	beq	269b4 <__assert_fail@plt+0x154ec>
   25454:	ldrb	r3, [r2, #24]
   25458:	mov	r7, r2
   2545c:	cmp	r3, #17
   25460:	beq	262c8 <__assert_fail@plt+0x14e00>
   25464:	mov	r8, #0
   25468:	add	fp, sp, #128	; 0x80
   2546c:	str	r8, [sp, #40]	; 0x28
   25470:	mvn	r3, #0
   25474:	mov	r6, #11
   25478:	str	r3, [sp, #24]
   2547c:	mov	r2, #0
   25480:	mov	r3, #0
   25484:	strd	r2, [fp]
   25488:	ldr	r1, [sl, #64]	; 0x40
   2548c:	cmp	r1, #31
   25490:	beq	2639c <__assert_fail@plt+0x14ed4>
   25494:	ldr	r4, [sl, #56]	; 0x38
   25498:	lsl	r3, r1, #5
   2549c:	add	r1, r1, #1
   254a0:	add	r0, r3, #4
   254a4:	add	r2, r4, r3
   254a8:	add	r3, r3, #16
   254ac:	str	r1, [sl, #64]	; 0x40
   254b0:	add	r3, r4, r3
   254b4:	add	r4, r4, r0
   254b8:	stmib	r2, {r5, r7}
   254bc:	mvn	ip, #0
   254c0:	cmp	r4, #0
   254c4:	str	r5, [r2, #12]
   254c8:	strb	r6, [sp, #132]	; 0x84
   254cc:	ldrd	r0, [fp]
   254d0:	strd	r0, [r2, #24]
   254d4:	ldrb	r0, [r3, #14]
   254d8:	bic	r0, r0, #12
   254dc:	strb	r0, [r3, #14]
   254e0:	str	r5, [r2, #16]
   254e4:	str	r5, [r2, #20]
   254e8:	str	ip, [r2, #32]
   254ec:	str	r4, [r7]
   254f0:	beq	26128 <__assert_fail@plt+0x14c60>
   254f4:	ldr	r3, [sp, #24]
   254f8:	add	r1, r8, #2
   254fc:	cmp	r1, r3
   25500:	bgt	25ff4 <__assert_fail@plt+0x14b2c>
   25504:	mov	r8, r4
   25508:	mov	r2, fp
   2550c:	str	sl, [sp, #16]
   25510:	str	r9, [sp, #44]	; 0x2c
   25514:	mov	r9, r1
   25518:	mov	fp, r2
   2551c:	mov	r6, r2
   25520:	b	25528 <__assert_fail@plt+0x14060>
   25524:	mov	r7, r3
   25528:	ldr	r2, [sl, #64]	; 0x40
   2552c:	cmp	r2, #31
   25530:	beq	260e8 <__assert_fail@plt+0x14c20>
   25534:	ldr	r0, [sl, #56]	; 0x38
   25538:	lsl	r3, r2, #5
   2553c:	add	r2, r2, #1
   25540:	add	lr, r3, #4
   25544:	add	ip, r0, r3
   25548:	add	r3, r3, #16
   2554c:	str	r2, [sl, #64]	; 0x40
   25550:	add	r1, r0, r3
   25554:	add	r0, r0, lr
   25558:	str	r5, [ip, #4]
   2555c:	mvn	lr, #0
   25560:	cmp	r0, #0
   25564:	str	r5, [ip, #8]
   25568:	str	r5, [ip, #12]
   2556c:	ldrd	r2, [r7, #20]
   25570:	strd	r2, [ip, #24]
   25574:	ldrb	r3, [r1, #14]
   25578:	bic	r3, r3, #12
   2557c:	strb	r3, [r1, #14]
   25580:	str	r5, [ip, #16]
   25584:	str	r5, [ip, #20]
   25588:	str	lr, [ip, #32]
   2558c:	str	r0, [fp]
   25590:	beq	26114 <__assert_fail@plt+0x14c4c>
   25594:	str	r8, [ip, #4]
   25598:	ldr	r8, [fp]
   2559c:	ldrb	r3, [r8, #26]
   255a0:	orr	r3, r3, #4
   255a4:	strb	r3, [r8, #26]
   255a8:	ldr	r3, [r7, #4]
   255ac:	cmp	r3, #0
   255b0:	addne	fp, r8, #4
   255b4:	bne	25524 <__assert_fail@plt+0x1405c>
   255b8:	ldr	r2, [r7, #8]
   255bc:	cmp	r2, #0
   255c0:	cmpne	r2, r3
   255c4:	mov	r3, r7
   255c8:	bne	260dc <__assert_fail@plt+0x14c14>
   255cc:	ldr	r2, [r7]
   255d0:	ldr	r8, [r8]
   255d4:	subs	r7, r2, #0
   255d8:	bne	255b8 <__assert_fail@plt+0x140f0>
   255dc:	mov	r2, r6
   255e0:	ldr	r6, [sp, #128]	; 0x80
   255e4:	str	sl, [sp, #16]
   255e8:	mov	r0, #0
   255ec:	mov	r1, #0
   255f0:	strd	r0, [r2]
   255f4:	ldr	r1, [sp, #16]
   255f8:	ldr	r0, [r1, #64]	; 0x40
   255fc:	cmp	r0, #31
   25600:	beq	2619c <__assert_fail@plt+0x14cd4>
   25604:	lsl	r3, r0, #5
   25608:	add	ip, r0, #1
   2560c:	ldr	r0, [r1, #56]	; 0x38
   25610:	add	r8, r3, #4
   25614:	add	r7, r0, r3
   25618:	mov	lr, #16
   2561c:	str	ip, [r1, #64]	; 0x40
   25620:	add	r3, r3, lr
   25624:	add	r8, r0, r8
   25628:	str	r5, [r7, #4]
   2562c:	add	r3, r0, r3
   25630:	mvn	ip, #0
   25634:	str	r4, [r7, #8]
   25638:	cmp	r6, #0
   2563c:	str	r6, [r7, #12]
   25640:	strb	lr, [sp, #132]	; 0x84
   25644:	ldrd	sl, [r2]
   25648:	strd	sl, [r7, #24]
   2564c:	ldrb	lr, [r3, #14]
   25650:	bic	lr, lr, #12
   25654:	strb	lr, [r3, #14]
   25658:	str	r5, [r7, #16]
   2565c:	str	r5, [r7, #20]
   25660:	str	ip, [r7, #32]
   25664:	str	r8, [r4]
   25668:	beq	26128 <__assert_fail@plt+0x14c60>
   2566c:	cmp	r8, #0
   25670:	str	r8, [r6]
   25674:	beq	26128 <__assert_fail@plt+0x14c60>
   25678:	mov	sl, #0
   2567c:	mov	fp, #0
   25680:	strd	sl, [r2]
   25684:	ldr	r3, [r1, #64]	; 0x40
   25688:	cmp	r3, #31
   2568c:	lslne	ip, r3, #5
   25690:	addne	lr, r3, #1
   25694:	addne	r4, ip, #4
   25698:	beq	261d8 <__assert_fail@plt+0x14d10>
   2569c:	add	r3, r0, ip
   256a0:	str	lr, [r1, #64]	; 0x40
   256a4:	mov	lr, #10
   256a8:	add	ip, ip, #16
   256ac:	add	r4, r0, r4
   256b0:	stmib	r3, {r5, r8}
   256b4:	add	r0, r0, ip
   256b8:	mvn	ip, #0
   256bc:	str	r5, [r3, #12]
   256c0:	cmp	r4, #0
   256c4:	strb	lr, [sp, #132]	; 0x84
   256c8:	ldrd	sl, [r2]
   256cc:	strd	sl, [r3, #24]
   256d0:	ldrb	lr, [r0, #14]
   256d4:	bic	lr, lr, #12
   256d8:	strb	lr, [r0, #14]
   256dc:	str	r5, [r3, #16]
   256e0:	str	r5, [r3, #20]
   256e4:	str	ip, [r3, #32]
   256e8:	str	r4, [r7, #4]
   256ec:	beq	26128 <__assert_fail@plt+0x14c60>
   256f0:	ldr	r3, [sp, #24]
   256f4:	add	r9, r9, #1
   256f8:	cmp	r9, r3
   256fc:	bgt	25fe8 <__assert_fail@plt+0x14b20>
   25700:	mov	r7, r6
   25704:	mov	sl, r1
   25708:	ldr	r8, [r6]
   2570c:	b	25518 <__assert_fail@plt+0x14050>
   25710:	ldr	r4, [r5, #24]
   25714:	mov	r1, r0
   25718:	ldr	r6, [sp, #20]
   2571c:	ldr	r7, [sp, #32]
   25720:	add	r3, r4, #1
   25724:	mov	r0, r6
   25728:	str	r3, [r5, #24]
   2572c:	orr	r2, r7, #8388608	; 0x800000
   25730:	bl	1bc08 <__assert_fail@plt+0xa740>
   25734:	ldr	r3, [r9, #40]	; 0x28
   25738:	ldrb	r2, [r6, #4]
   2573c:	add	r3, r3, r0
   25740:	cmp	r2, #9
   25744:	str	r3, [r9, #40]	; 0x28
   25748:	moveq	r5, #0
   2574c:	beq	25ef0 <__assert_fail@plt+0x14a28>
   25750:	ldr	r3, [sp, #200]	; 0xc8
   25754:	mov	r1, r5
   25758:	mov	r2, r6
   2575c:	add	r0, r3, #1
   25760:	ldr	r3, [sp, #204]	; 0xcc
   25764:	stm	sp, {r0, r3}
   25768:	mov	r3, r7
   2576c:	mov	r0, r9
   25770:	bl	27b20 <__assert_fail@plt+0x16658>
   25774:	ldr	r3, [sp, #204]	; 0xcc
   25778:	mov	r5, r0
   2577c:	ldr	r3, [r3]
   25780:	cmp	r3, #0
   25784:	bne	257b0 <__assert_fail@plt+0x142e8>
   25788:	ldr	r3, [sp, #20]
   2578c:	ldrb	r3, [r3, #4]
   25790:	cmp	r3, #9
   25794:	beq	25ef0 <__assert_fail@plt+0x14a28>
   25798:	cmp	r0, #0
   2579c:	beq	257a4 <__assert_fail@plt+0x142dc>
   257a0:	bl	1ce74 <__assert_fail@plt+0xb9ac>
   257a4:	ldr	r2, [sp, #204]	; 0xcc
   257a8:	mov	r3, #8
   257ac:	str	r3, [r2]
   257b0:	mov	r3, #0
   257b4:	str	r3, [sp, #28]
   257b8:	ldr	r0, [sp, #28]
   257bc:	add	sp, sp, #164	; 0xa4
   257c0:	ldrd	r4, [sp]
   257c4:	ldrd	r6, [sp, #8]
   257c8:	ldrd	r8, [sp, #16]
   257cc:	ldrd	sl, [sp, #24]
   257d0:	add	sp, sp, #32
   257d4:	pop	{pc}		; (ldr pc, [sp], #4)
   257d8:	ldr	r3, [sp, #20]
   257dc:	ldr	r5, [r3]
   257e0:	movw	r3, #783	; 0x30f
   257e4:	tst	r5, r3
   257e8:	beq	25848 <__assert_fail@plt+0x14380>
   257ec:	ldrb	r3, [sl, #88]	; 0x58
   257f0:	ands	r4, r3, #16
   257f4:	bne	25848 <__assert_fail@plt+0x14380>
   257f8:	orr	r3, r3, #16
   257fc:	ands	r2, r3, #8
   25800:	mov	r1, r3
   25804:	strb	r3, [sl, #88]	; 0x58
   25808:	bne	27584 <__assert_fail@plt+0x160bc>
   2580c:	mov	r3, #0
   25810:	movt	r3, #1023	; 0x3ff
   25814:	tst	r1, #4
   25818:	mvn	r1, #2013265921	; 0x78000001
   2581c:	strd	r2, [sl, #96]	; 0x60
   25820:	mvn	r3, #-134217727	; 0xf8000001
   25824:	str	r1, [sl, #104]	; 0x68
   25828:	str	r3, [sl, #108]	; 0x6c
   2582c:	beq	27504 <__assert_fail@plt+0x1603c>
   25830:	ldr	r3, [sp, #20]
   25834:	str	r2, [sl, #112]	; 0x70
   25838:	str	r2, [sl, #116]	; 0x74
   2583c:	str	r2, [sl, #120]	; 0x78
   25840:	str	r2, [sl, #124]	; 0x7c
   25844:	ldr	r5, [r3]
   25848:	sub	r3, r5, #256	; 0x100
   2584c:	bics	r6, r3, #256	; 0x100
   25850:	bne	26aa8 <__assert_fail@plt+0x155e0>
   25854:	cmp	r5, #256	; 0x100
   25858:	beq	26ca4 <__assert_fail@plt+0x157dc>
   2585c:	ldr	r2, [sp, #20]
   25860:	mov	r3, #5
   25864:	str	r3, [r2]
   25868:	ldr	r2, [sl, #64]	; 0x40
   2586c:	cmp	r2, #31
   25870:	beq	2749c <__assert_fail@plt+0x15fd4>
   25874:	lsl	r3, r2, r3
   25878:	add	r1, r2, #1
   2587c:	ldr	r2, [sl, #56]	; 0x38
   25880:	add	r4, r3, #4
   25884:	add	ip, r2, r3
   25888:	add	r3, r3, #16
   2588c:	str	r1, [sl, #64]	; 0x40
   25890:	add	r3, r2, r3
   25894:	add	r4, r2, r4
   25898:	ldr	r2, [sp, #20]
   2589c:	mov	lr, #0
   258a0:	mvn	r5, #0
   258a4:	str	lr, [ip, #4]
   258a8:	str	lr, [ip, #8]
   258ac:	str	lr, [ip, #12]
   258b0:	ldrd	r0, [r2]
   258b4:	strd	r0, [ip, #24]
   258b8:	ldrb	r2, [r3, #14]
   258bc:	bic	r2, r2, #12
   258c0:	strb	r2, [r3, #14]
   258c4:	str	lr, [ip, #16]
   258c8:	str	lr, [ip, #20]
   258cc:	str	r5, [ip, #32]
   258d0:	ldr	r2, [sp, #20]
   258d4:	mov	r3, #10
   258d8:	str	r3, [r2]
   258dc:	ldr	r2, [sl, #64]	; 0x40
   258e0:	cmp	r2, #31
   258e4:	beq	270a0 <__assert_fail@plt+0x15bd8>
   258e8:	ldr	r0, [sl, #56]	; 0x38
   258ec:	lsl	r3, r2, #5
   258f0:	add	r2, r2, #1
   258f4:	add	r5, r3, #4
   258f8:	add	r1, r0, r3
   258fc:	add	r3, r3, #16
   25900:	str	r2, [sl, #64]	; 0x40
   25904:	add	r5, r0, r5
   25908:	add	r0, r0, r3
   2590c:	ldr	r3, [sp, #20]
   25910:	mov	ip, #0
   25914:	mvn	lr, #0
   25918:	str	ip, [r1, #4]
   2591c:	str	ip, [r1, #8]
   25920:	str	ip, [r1, #12]
   25924:	ldrd	r2, [r3]
   25928:	strd	r2, [r1, #24]
   2592c:	ldrb	r3, [r0, #14]
   25930:	bic	r3, r3, #12
   25934:	strb	r3, [r0, #14]
   25938:	str	ip, [r1, #16]
   2593c:	str	ip, [r1, #20]
   25940:	str	lr, [r1, #32]
   25944:	mov	r2, #0
   25948:	mov	r3, #0
   2594c:	strd	r2, [sp, #128]	; 0x80
   25950:	ldr	r2, [sl, #64]	; 0x40
   25954:	cmp	r2, #31
   25958:	beq	27074 <__assert_fail@plt+0x15bac>
   2595c:	ldr	r0, [sl, #56]	; 0x38
   25960:	lsl	r3, r2, #5
   25964:	add	r2, r2, #1
   25968:	add	r6, r3, #4
   2596c:	add	ip, r0, r3
   25970:	mov	lr, #0
   25974:	str	r2, [sl, #64]	; 0x40
   25978:	mov	r2, #10
   2597c:	add	r3, r3, #16
   25980:	str	lr, [ip, #4]
   25984:	add	r1, r0, r3
   25988:	add	r6, r0, r6
   2598c:	strd	r4, [ip, #8]
   25990:	mvn	r0, #0
   25994:	cmp	r4, lr
   25998:	str	r6, [sp, #28]
   2599c:	strb	r2, [sp, #132]	; 0x84
   259a0:	ldrd	r2, [sp, #128]	; 0x80
   259a4:	strd	r2, [ip, #24]
   259a8:	ldrb	r3, [r1, #14]
   259ac:	bic	r3, r3, #12
   259b0:	strb	r3, [r1, #14]
   259b4:	str	lr, [ip, #16]
   259b8:	str	lr, [ip, #20]
   259bc:	str	r0, [ip, #32]
   259c0:	beq	26f18 <__assert_fail@plt+0x15a50>
   259c4:	cmp	r5, lr
   259c8:	str	r6, [r4]
   259cc:	beq	25c0c <__assert_fail@plt+0x14744>
   259d0:	cmp	r6, lr
   259d4:	str	r6, [r5]
   259d8:	beq	25c0c <__assert_fail@plt+0x14744>
   259dc:	mov	r1, r9
   259e0:	ldr	r0, [sp, #20]
   259e4:	ldr	r2, [sp, #32]
   259e8:	bl	1bc08 <__assert_fail@plt+0xa740>
   259ec:	ldr	r3, [r9, #40]	; 0x28
   259f0:	add	r3, r3, r0
   259f4:	str	r3, [r9, #40]	; 0x28
   259f8:	b	257b8 <__assert_fail@plt+0x142f0>
   259fc:	sub	r1, r2, #33	; 0x21
   25a00:	movw	r3, #53460	; 0xd0d4
   25a04:	movt	r3, #2
   25a08:	clz	r1, r1
   25a0c:	lsr	r1, r1, #5
   25a10:	movw	r2, #53388	; 0xd08c
   25a14:	movt	r2, #2
   25a18:	str	r1, [sp]
   25a1c:	mov	r0, sl
   25a20:	ldr	r1, [sp, #204]	; 0xcc
   25a24:	str	r1, [sp, #4]
   25a28:	ldr	r1, [r9, #64]	; 0x40
   25a2c:	bl	20f9c <__assert_fail@plt+0xfad4>
   25a30:	ldr	r3, [sp, #204]	; 0xcc
   25a34:	str	r0, [sp, #28]
   25a38:	ldr	r2, [r3]
   25a3c:	clz	r3, r0
   25a40:	lsr	r3, r3, #5
   25a44:	cmp	r2, #0
   25a48:	moveq	r3, #0
   25a4c:	cmp	r3, #0
   25a50:	beq	25390 <__assert_fail@plt+0x13ec8>
   25a54:	b	257b0 <__assert_fail@plt+0x142e8>
   25a58:	ldr	r2, [sl, #64]	; 0x40
   25a5c:	cmp	r2, #31
   25a60:	beq	26ff0 <__assert_fail@plt+0x15b28>
   25a64:	ldr	r0, [sl, #56]	; 0x38
   25a68:	lsl	r3, r2, #5
   25a6c:	add	r2, r2, #1
   25a70:	add	ip, r3, #4
   25a74:	add	r1, r0, r3
   25a78:	add	r3, r3, #16
   25a7c:	str	r2, [sl, #64]	; 0x40
   25a80:	adds	r2, r0, ip
   25a84:	add	r0, r0, r3
   25a88:	ldr	r3, [sp, #20]
   25a8c:	mov	r4, #0
   25a90:	mvn	r7, #0
   25a94:	str	r2, [sp, #28]
   25a98:	str	r4, [r1, #4]
   25a9c:	str	r4, [r1, #8]
   25aa0:	str	r4, [r1, #12]
   25aa4:	ldrd	r2, [r3]
   25aa8:	strd	r2, [r1, #24]
   25aac:	ldrb	r3, [r0, #14]
   25ab0:	bic	r3, r3, #12
   25ab4:	strb	r3, [r0, #14]
   25ab8:	str	r4, [r1, #16]
   25abc:	str	r4, [r1, #20]
   25ac0:	str	r7, [r1, #32]
   25ac4:	beq	25c0c <__assert_fail@plt+0x14744>
   25ac8:	ldr	r3, [sl, #92]	; 0x5c
   25acc:	cmp	r3, #1
   25ad0:	ble	25390 <__assert_fail@plt+0x13ec8>
   25ad4:	ldr	r8, [sp, #20]
   25ad8:	ldr	r5, [sp, #28]
   25adc:	ldr	r6, [sp, #32]
   25ae0:	b	25af0 <__assert_fail@plt+0x14628>
   25ae4:	subs	r5, ip, #0
   25ae8:	str	ip, [fp]
   25aec:	beq	25c0c <__assert_fail@plt+0x14744>
   25af0:	ldr	r3, [r9, #40]	; 0x28
   25af4:	ldr	r2, [r9, #56]	; 0x38
   25af8:	cmp	r2, r3
   25afc:	ble	26c9c <__assert_fail@plt+0x157d4>
   25b00:	ldr	r2, [r9, #28]
   25b04:	cmp	r3, r2
   25b08:	beq	26c9c <__assert_fail@plt+0x157d4>
   25b0c:	ldr	r2, [r9, #8]
   25b10:	ldr	r3, [r2, r3, lsl #2]
   25b14:	cmn	r3, #1
   25b18:	bne	26c9c <__assert_fail@plt+0x157d4>
   25b1c:	mov	r2, r6
   25b20:	mov	r1, r9
   25b24:	mov	r0, r8
   25b28:	bl	1bc08 <__assert_fail@plt+0xa740>
   25b2c:	ldr	r3, [r9, #40]	; 0x28
   25b30:	add	r3, r3, r0
   25b34:	str	r3, [r9, #40]	; 0x28
   25b38:	ldr	r2, [sl, #64]	; 0x40
   25b3c:	cmp	r2, #31
   25b40:	beq	26c60 <__assert_fail@plt+0x15798>
   25b44:	ldr	fp, [sl, #56]	; 0x38
   25b48:	lsl	r3, r2, #5
   25b4c:	add	r2, r2, #1
   25b50:	add	r0, r3, #4
   25b54:	add	ip, fp, r3
   25b58:	add	r3, r3, #16
   25b5c:	str	r2, [sl, #64]	; 0x40
   25b60:	add	r1, fp, r3
   25b64:	add	fp, fp, r0
   25b68:	str	r4, [ip, #4]
   25b6c:	str	r4, [ip, #8]
   25b70:	str	r4, [ip, #12]
   25b74:	ldrd	r2, [r8]
   25b78:	strd	r2, [ip, #24]
   25b7c:	ldrb	r3, [r1, #14]
   25b80:	bic	r3, r3, #12
   25b84:	strb	r3, [r1, #14]
   25b88:	str	r4, [ip, #16]
   25b8c:	str	r4, [ip, #20]
   25b90:	str	r7, [ip, #32]
   25b94:	mov	r2, #0
   25b98:	mov	r3, #0
   25b9c:	strd	r2, [sp, #128]	; 0x80
   25ba0:	add	r2, sp, #128	; 0x80
   25ba4:	ldr	r1, [sl, #64]	; 0x40
   25ba8:	cmp	r1, #31
   25bac:	beq	26c2c <__assert_fail@plt+0x15764>
   25bb0:	ldr	r0, [sl, #56]	; 0x38
   25bb4:	lsl	r3, r1, #5
   25bb8:	add	lr, r1, #1
   25bbc:	add	ip, r3, #4
   25bc0:	add	r1, r0, r3
   25bc4:	str	lr, [sl, #64]	; 0x40
   25bc8:	mov	lr, #16
   25bcc:	add	r3, r3, lr
   25bd0:	add	ip, r0, ip
   25bd4:	add	r0, r0, r3
   25bd8:	stmib	r1, {r4, r5, fp}
   25bdc:	cmp	fp, #0
   25be0:	strb	lr, [sp, #132]	; 0x84
   25be4:	ldrd	r2, [r2]
   25be8:	strd	r2, [r1, #24]
   25bec:	ldrb	r3, [r0, #14]
   25bf0:	bic	r3, r3, #12
   25bf4:	strb	r3, [r0, #14]
   25bf8:	str	r4, [r1, #16]
   25bfc:	str	r4, [r1, #20]
   25c00:	str	r7, [r1, #32]
   25c04:	str	ip, [r5]
   25c08:	bne	25ae4 <__assert_fail@plt+0x1461c>
   25c0c:	mov	r2, #0
   25c10:	mov	r3, #12
   25c14:	str	r2, [sp, #28]
   25c18:	ldr	r2, [sp, #204]	; 0xcc
   25c1c:	str	r3, [r2]
   25c20:	b	257b8 <__assert_fail@plt+0x142f0>
   25c24:	ldr	r2, [sl, #64]	; 0x40
   25c28:	cmp	r2, #31
   25c2c:	beq	26f34 <__assert_fail@plt+0x15a6c>
   25c30:	ldr	r0, [sl, #56]	; 0x38
   25c34:	lsl	r3, r2, #5
   25c38:	add	r2, r2, #1
   25c3c:	add	lr, r3, #4
   25c40:	add	r1, r0, r3
   25c44:	add	r3, r3, #16
   25c48:	str	r2, [sl, #64]	; 0x40
   25c4c:	adds	r2, r0, lr
   25c50:	add	r0, r0, r3
   25c54:	ldr	r3, [sp, #20]
   25c58:	mov	ip, #0
   25c5c:	mvn	lr, #0
   25c60:	str	r2, [sp, #28]
   25c64:	str	ip, [r1, #4]
   25c68:	str	ip, [r1, #8]
   25c6c:	str	ip, [r1, #12]
   25c70:	ldrd	r2, [r3]
   25c74:	strd	r2, [r1, #24]
   25c78:	ldrb	r3, [r0, #14]
   25c7c:	bic	r3, r3, #12
   25c80:	strb	r3, [r0, #14]
   25c84:	str	ip, [r1, #16]
   25c88:	str	ip, [r1, #20]
   25c8c:	str	lr, [r1, #32]
   25c90:	beq	25c0c <__assert_fail@plt+0x14744>
   25c94:	ldr	r3, [sl, #92]	; 0x5c
   25c98:	cmp	r3, #1
   25c9c:	ble	25390 <__assert_fail@plt+0x13ec8>
   25ca0:	ldrb	r3, [sl, #88]	; 0x58
   25ca4:	orr	r3, r3, #2
   25ca8:	strb	r3, [sl, #88]	; 0x58
   25cac:	b	25390 <__assert_fail@plt+0x13ec8>
   25cb0:	ldr	r3, [sp, #20]
   25cb4:	mov	r4, #1
   25cb8:	ldr	r2, [sl, #84]	; 0x54
   25cbc:	ldr	r3, [r3]
   25cc0:	lsl	r3, r4, r3
   25cc4:	ands	r2, r3, r2
   25cc8:	beq	26f60 <__assert_fail@plt+0x15a98>
   25ccc:	ldr	r1, [sl, #64]	; 0x40
   25cd0:	ldr	r2, [sl, #80]	; 0x50
   25cd4:	cmp	r1, #31
   25cd8:	orr	r3, r2, r3
   25cdc:	str	r3, [sl, #80]	; 0x50
   25ce0:	beq	2704c <__assert_fail@plt+0x15b84>
   25ce4:	ldr	r0, [sl, #56]	; 0x38
   25ce8:	lsl	r3, r1, #5
   25cec:	add	r4, r1, #1
   25cf0:	add	r2, r3, #4
   25cf4:	add	r1, r0, r3
   25cf8:	add	r3, r3, #16
   25cfc:	str	r4, [sl, #64]	; 0x40
   25d00:	adds	r2, r0, r2
   25d04:	add	r0, r0, r3
   25d08:	ldr	r3, [sp, #20]
   25d0c:	mov	ip, #0
   25d10:	mvn	lr, #0
   25d14:	str	r2, [sp, #28]
   25d18:	str	ip, [r1, #4]
   25d1c:	str	ip, [r1, #8]
   25d20:	str	ip, [r1, #12]
   25d24:	ldrd	r2, [r3]
   25d28:	strd	r2, [r1, #24]
   25d2c:	ldrb	r3, [r0, #14]
   25d30:	bic	r3, r3, #12
   25d34:	strb	r3, [r0, #14]
   25d38:	str	ip, [r1, #16]
   25d3c:	str	ip, [r1, #20]
   25d40:	str	lr, [r1, #32]
   25d44:	beq	25c0c <__assert_fail@plt+0x14744>
   25d48:	ldrb	r3, [sl, #88]	; 0x58
   25d4c:	ldr	r2, [sl, #76]	; 0x4c
   25d50:	orr	r3, r3, #2
   25d54:	add	r2, r2, #1
   25d58:	str	r2, [sl, #76]	; 0x4c
   25d5c:	strb	r3, [sl, #88]	; 0x58
   25d60:	b	25390 <__assert_fail@plt+0x13ec8>
   25d64:	mov	r6, #0
   25d68:	mov	r1, #1
   25d6c:	mov	r0, #32
   25d70:	str	r6, [sp, #68]	; 0x44
   25d74:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   25d78:	mov	r4, r0
   25d7c:	mov	r1, #1
   25d80:	mov	r0, #40	; 0x28
   25d84:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   25d88:	clz	r5, r0
   25d8c:	cmp	r4, r6
   25d90:	str	r0, [sp, #16]
   25d94:	lsr	r5, r5, #5
   25d98:	moveq	r5, #1
   25d9c:	cmp	r5, r6
   25da0:	bne	26f74 <__assert_fail@plt+0x15aac>
   25da4:	ldr	r6, [sp, #20]
   25da8:	mov	r1, r9
   25dac:	ldr	r2, [sp, #32]
   25db0:	mov	r0, r6
   25db4:	bl	18750 <__assert_fail@plt+0x7288>
   25db8:	ldrb	r3, [r6, #4]
   25dbc:	mov	fp, r0
   25dc0:	cmp	r3, #2
   25dc4:	beq	26f24 <__assert_fail@plt+0x15a5c>
   25dc8:	cmp	r3, #25
   25dcc:	strne	r5, [sp, #44]	; 0x2c
   25dd0:	beq	26b54 <__assert_fail@plt+0x1568c>
   25dd4:	cmp	r3, #21
   25dd8:	beq	26b44 <__assert_fail@plt+0x1567c>
   25ddc:	ldr	r5, [sp, #20]
   25de0:	mov	r3, #0
   25de4:	mov	r0, #1
   25de8:	mov	r6, #3
   25dec:	str	sl, [sp, #24]
   25df0:	ldr	r2, [sp, #32]
   25df4:	str	r3, [sp, #36]	; 0x24
   25df8:	str	r3, [sp, #40]	; 0x28
   25dfc:	add	r3, sp, #96	; 0x60
   25e00:	str	r3, [sp, #28]
   25e04:	ubfx	r1, r2, #16, #1
   25e08:	mov	sl, r2
   25e0c:	str	r1, [sp, #48]	; 0x30
   25e10:	ldr	ip, [sp, #28]
   25e14:	mov	r3, fp
   25e18:	mov	r2, r5
   25e1c:	mov	r1, r9
   25e20:	str	sl, [sp]
   25e24:	str	r0, [sp, #4]
   25e28:	add	r0, sp, #72	; 0x48
   25e2c:	str	r6, [sp, #72]	; 0x48
   25e30:	str	ip, [sp, #76]	; 0x4c
   25e34:	bl	1c8c4 <__assert_fail@plt+0xb3fc>
   25e38:	cmp	r0, #0
   25e3c:	bne	26c8c <__assert_fail@plt+0x157c4>
   25e40:	mov	r2, sl
   25e44:	mov	r1, r9
   25e48:	mov	r0, r5
   25e4c:	bl	18750 <__assert_fail@plt+0x7288>
   25e50:	ldr	r3, [sp, #72]	; 0x48
   25e54:	mov	fp, r0
   25e58:	sub	r2, r3, #2
   25e5c:	bics	r2, r2, #2
   25e60:	beq	25e78 <__assert_fail@plt+0x149b0>
   25e64:	ldrb	r2, [r5, #4]
   25e68:	cmp	r2, #2
   25e6c:	beq	26bc8 <__assert_fail@plt+0x15700>
   25e70:	cmp	r2, #22
   25e74:	beq	26d28 <__assert_fail@plt+0x15860>
   25e78:	cmp	r3, #4
   25e7c:	ldrls	pc, [pc, r3, lsl #2]
   25e80:	b	26a1c <__assert_fail@plt+0x15554>
   25e84:	andeq	r6, r2, r0, lsl sl
   25e88:	andeq	r6, r2, r0, ror #19
   25e8c:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   25e90:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   25e94:	andeq	r6, r2, ip, lsl sl
   25e98:	sub	r1, r2, #35	; 0x23
   25e9c:	movw	r3, #50440	; 0xc508
   25ea0:	movt	r3, #2
   25ea4:	clz	r1, r1
   25ea8:	movw	r2, #53404	; 0xd09c
   25eac:	movt	r2, #2
   25eb0:	lsr	r1, r1, #5
   25eb4:	b	25a18 <__assert_fail@plt+0x14550>
   25eb8:	mov	r2, #0
   25ebc:	mov	r3, #5
   25ec0:	str	r2, [sp, #28]
   25ec4:	ldr	r2, [sp, #204]	; 0xcc
   25ec8:	str	r3, [r2]
   25ecc:	b	257b8 <__assert_fail@plt+0x142f0>
   25ed0:	ldr	r3, [sp, #32]
   25ed4:	ands	r3, r3, #131072	; 0x20000
   25ed8:	bne	25314 <__assert_fail@plt+0x13e4c>
   25edc:	str	r3, [sp, #28]
   25ee0:	mov	r2, #16
   25ee4:	ldr	r3, [sp, #204]	; 0xcc
   25ee8:	str	r2, [r3]
   25eec:	b	257b8 <__assert_fail@plt+0x142f0>
   25ef0:	cmp	r4, #8
   25ef4:	bls	269cc <__assert_fail@plt+0x15504>
   25ef8:	mov	r3, #0
   25efc:	mov	r2, #0
   25f00:	strd	r2, [sp, #128]	; 0x80
   25f04:	ldr	r3, [sl, #64]	; 0x40
   25f08:	cmp	r3, #31
   25f0c:	beq	26fc4 <__assert_fail@plt+0x15afc>
   25f10:	ldr	r0, [sl, #56]	; 0x38
   25f14:	lsl	r1, r3, #5
   25f18:	add	r2, r3, #1
   25f1c:	add	r6, r1, #4
   25f20:	add	r3, r0, r1
   25f24:	mov	ip, #0
   25f28:	str	r2, [sl, #64]	; 0x40
   25f2c:	mov	lr, #17
   25f30:	add	r8, r0, r6
   25f34:	str	ip, [r3, #4]
   25f38:	add	r2, r1, #16
   25f3c:	mvn	fp, #0
   25f40:	str	r5, [r3, #8]
   25f44:	add	r2, r0, r2
   25f48:	cmp	r5, ip
   25f4c:	str	ip, [r3, #12]
   25f50:	str	r8, [sp, #28]
   25f54:	strb	lr, [sp, #132]	; 0x84
   25f58:	ldrd	r6, [sp, #128]	; 0x80
   25f5c:	strd	r6, [r3, #24]
   25f60:	ldrb	lr, [r2, #14]
   25f64:	bic	lr, lr, #12
   25f68:	strb	lr, [r2, #14]
   25f6c:	str	ip, [r3, #16]
   25f70:	str	ip, [r3, #20]
   25f74:	str	fp, [r3, #32]
   25f78:	ldr	r3, [sp, #28]
   25f7c:	strne	r8, [r5]
   25f80:	cmp	r3, #0
   25f84:	beq	25c0c <__assert_fail@plt+0x14744>
   25f88:	add	r1, r0, r1
   25f8c:	str	r4, [r1, #24]
   25f90:	b	25390 <__assert_fail@plt+0x13ec8>
   25f94:	ldr	r7, [sp, #76]	; 0x4c
   25f98:	mov	r0, r7
   25f9c:	bl	11390 <strlen@plt>
   25fa0:	cmp	r0, #1
   25fa4:	bne	26fb0 <__assert_fail@plt+0x15ae8>
   25fa8:	ldr	r1, [sp, #204]	; 0xcc
   25fac:	mov	r2, #0
   25fb0:	ldrb	r3, [r7]
   25fb4:	str	r2, [r1]
   25fb8:	asr	r1, r3, #5
   25fbc:	and	r3, r3, #31
   25fc0:	ldr	r2, [r4, r1, lsl #2]
   25fc4:	orr	r3, r2, r0, lsl r3
   25fc8:	str	r3, [r4, r1, lsl #2]
   25fcc:	ldrb	r3, [r5, #4]
   25fd0:	cmp	r3, #2
   25fd4:	beq	26bc8 <__assert_fail@plt+0x15700>
   25fd8:	cmp	r3, #21
   25fdc:	beq	270f8 <__assert_fail@plt+0x15c30>
   25fe0:	mov	r0, #0
   25fe4:	b	25e10 <__assert_fail@plt+0x14948>
   25fe8:	ldr	r9, [sp, #44]	; 0x2c
   25fec:	mov	sl, r1
   25ff0:	mov	fp, r2
   25ff4:	ldr	r3, [sp, #40]	; 0x28
   25ff8:	cmp	r3, #0
   25ffc:	beq	263c8 <__assert_fail@plt+0x14f00>
   26000:	mov	r3, #0
   26004:	mov	r2, #0
   26008:	strd	r2, [fp]
   2600c:	ldr	r3, [sl, #64]	; 0x40
   26010:	cmp	r3, #31
   26014:	beq	26960 <__assert_fail@plt+0x15498>
   26018:	ldr	r0, [sl, #56]	; 0x38
   2601c:	lsl	r2, r3, #5
   26020:	add	r3, r3, #1
   26024:	add	ip, r2, #4
   26028:	ldr	r6, [sp, #40]	; 0x28
   2602c:	add	r1, r0, r2
   26030:	add	ip, r0, ip
   26034:	str	r3, [sl, #64]	; 0x40
   26038:	mov	r3, #16
   2603c:	mvn	lr, #0
   26040:	add	r2, r2, r3
   26044:	add	r0, r0, r2
   26048:	stmib	r1, {r5, r6}
   2604c:	str	r4, [r1, #12]
   26050:	strb	r3, [sp, #132]	; 0x84
   26054:	ldrd	r2, [fp]
   26058:	strd	r2, [r1, #24]
   2605c:	ldrb	r3, [r0, #14]
   26060:	bic	r3, r3, #12
   26064:	strb	r3, [r0, #14]
   26068:	ldr	r3, [sp, #204]	; 0xcc
   2606c:	str	r5, [r1, #16]
   26070:	str	r5, [r1, #20]
   26074:	str	lr, [r1, #32]
   26078:	str	ip, [r6]
   2607c:	ldr	r3, [r3]
   26080:	str	ip, [r4]
   26084:	cmp	r3, #0
   26088:	bne	26940 <__assert_fail@plt+0x15478>
   2608c:	str	ip, [sp, #28]
   26090:	ldr	r3, [sp, #36]	; 0x24
   26094:	cmp	r3, #0
   26098:	ldr	r3, [sp, #20]
   2609c:	ldrb	r7, [r3, #4]
   260a0:	beq	253cc <__assert_fail@plt+0x13f04>
   260a4:	cmp	r7, #23
   260a8:	cmpne	r7, #11
   260ac:	bne	253cc <__assert_fail@plt+0x13f04>
   260b0:	ldr	r3, [sp, #28]
   260b4:	cmp	r3, #0
   260b8:	beq	260c4 <__assert_fail@plt+0x14bfc>
   260bc:	mov	r0, r3
   260c0:	bl	1ce74 <__assert_fail@plt+0xb9ac>
   260c4:	mov	r2, #0
   260c8:	mov	r3, #13
   260cc:	str	r2, [sp, #28]
   260d0:	ldr	r2, [sp, #204]	; 0xcc
   260d4:	str	r3, [r2]
   260d8:	b	257b8 <__assert_fail@plt+0x142f0>
   260dc:	mov	r3, r2
   260e0:	add	fp, r8, #8
   260e4:	b	25524 <__assert_fail@plt+0x1405c>
   260e8:	mov	r0, #996	; 0x3e4
   260ec:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   260f0:	cmp	r0, #0
   260f4:	beq	262b4 <__assert_fail@plt+0x14dec>
   260f8:	ldr	r1, [sl, #56]	; 0x38
   260fc:	mov	r2, #1
   26100:	mov	lr, #4
   26104:	mov	r3, #0
   26108:	str	r1, [r0]
   2610c:	str	r0, [sl, #56]	; 0x38
   26110:	b	25544 <__assert_fail@plt+0x1407c>
   26114:	mov	r2, r6
   26118:	mov	r6, r0
   2611c:	str	sl, [sp, #16]
   26120:	b	255e8 <__assert_fail@plt+0x14120>
   26124:	str	r0, [r1]
   26128:	ldr	r2, [sp, #204]	; 0xcc
   2612c:	mov	r3, #12
   26130:	str	r3, [r2]
   26134:	mov	r3, #0
   26138:	ldr	r0, [sp, #28]
   2613c:	str	r3, [sp, #28]
   26140:	bl	1ce74 <__assert_fail@plt+0xb9ac>
   26144:	b	257b8 <__assert_fail@plt+0x142f0>
   26148:	mov	r1, r9
   2614c:	ldr	r0, [sp, #20]
   26150:	ldr	r2, [sp, #32]
   26154:	bl	1bc08 <__assert_fail@plt+0xa740>
   26158:	ldr	r3, [r9, #40]	; 0x28
   2615c:	ldr	r2, [sp, #28]
   26160:	add	r0, r3, r0
   26164:	cmp	r2, #0
   26168:	str	r0, [r9, #40]	; 0x28
   2616c:	beq	26380 <__assert_fail@plt+0x14eb8>
   26170:	ldrb	r3, [r2, #24]
   26174:	mov	r7, r2
   26178:	add	fp, sp, #128	; 0x80
   2617c:	cmp	r3, #17
   26180:	mov	r3, #0
   26184:	str	r3, [sp, #40]	; 0x28
   26188:	mov	r3, #1
   2618c:	str	r3, [sp, #24]
   26190:	beq	262e0 <__assert_fail@plt+0x14e18>
   26194:	mov	r6, #10
   26198:	b	2547c <__assert_fail@plt+0x13fb4>
   2619c:	mov	r0, #996	; 0x3e4
   261a0:	str	r2, [sp, #48]	; 0x30
   261a4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   261a8:	cmp	r0, #0
   261ac:	beq	26128 <__assert_fail@plt+0x14c60>
   261b0:	ldr	r2, [sp, #16]
   261b4:	mov	ip, #1
   261b8:	mov	r8, #4
   261bc:	mov	r3, #0
   261c0:	ldr	r1, [sp, #16]
   261c4:	ldr	lr, [r2, #56]	; 0x38
   261c8:	str	lr, [r0]
   261cc:	str	r0, [r2, #56]	; 0x38
   261d0:	ldr	r2, [sp, #48]	; 0x30
   261d4:	b	25614 <__assert_fail@plt+0x1414c>
   261d8:	mov	r0, #996	; 0x3e4
   261dc:	str	r2, [sp, #48]	; 0x30
   261e0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   261e4:	cmp	r0, #0
   261e8:	beq	26128 <__assert_fail@plt+0x14c60>
   261ec:	ldr	r2, [sp, #16]
   261f0:	mov	lr, #1
   261f4:	mov	r4, #4
   261f8:	mov	ip, #0
   261fc:	ldr	r1, [sp, #16]
   26200:	ldr	r3, [r2, #56]	; 0x38
   26204:	str	r3, [r0]
   26208:	str	r0, [r2, #56]	; 0x38
   2620c:	ldr	r2, [sp, #48]	; 0x30
   26210:	b	2569c <__assert_fail@plt+0x141d4>
   26214:	ldr	r8, [sp, #20]
   26218:	mvn	fp, #0
   2621c:	movw	r7, #32816	; 0x8030
   26220:	mov	r1, r9
   26224:	mov	r0, r8
   26228:	ldr	r2, [sp, #32]
   2622c:	bl	1bc08 <__assert_fail@plt+0xa740>
   26230:	ldr	r2, [r9, #40]	; 0x28
   26234:	ldrb	r3, [r8, #4]
   26238:	ldrb	r1, [r8]
   2623c:	add	r0, r2, r0
   26240:	cmp	r3, #2
   26244:	str	r0, [r9, #40]	; 0x28
   26248:	beq	26908 <__assert_fail@plt+0x15440>
   2624c:	cmp	r3, #24
   26250:	beq	263d0 <__assert_fail@plt+0x14f08>
   26254:	cmp	r1, #44	; 0x2c
   26258:	beq	26474 <__assert_fail@plt+0x14fac>
   2625c:	cmp	r3, #1
   26260:	beq	2626c <__assert_fail@plt+0x14da4>
   26264:	mvn	fp, #1
   26268:	b	26220 <__assert_fail@plt+0x14d58>
   2626c:	sub	r2, r1, #48	; 0x30
   26270:	uxtb	r0, r2
   26274:	cmp	r0, #9
   26278:	movhi	r3, #0
   2627c:	movls	r3, #1
   26280:	cmn	fp, #2
   26284:	moveq	r3, #0
   26288:	cmp	r3, #0
   2628c:	beq	26264 <__assert_fail@plt+0x14d9c>
   26290:	cmn	fp, #1
   26294:	add	r3, fp, fp, lsl #2
   26298:	moveq	fp, r2
   2629c:	beq	26220 <__assert_fail@plt+0x14d58>
   262a0:	add	fp, r1, r3, lsl #1
   262a4:	cmp	fp, r7
   262a8:	movge	fp, r7
   262ac:	sub	fp, fp, #48	; 0x30
   262b0:	b	26220 <__assert_fail@plt+0x14d58>
   262b4:	mov	r2, r6
   262b8:	mov	r6, r0
   262bc:	str	r0, [fp]
   262c0:	str	sl, [sp, #16]
   262c4:	b	255e8 <__assert_fail@plt+0x14120>
   262c8:	mov	r3, #0
   262cc:	add	fp, sp, #128	; 0x80
   262d0:	mov	r8, r3
   262d4:	str	r3, [sp, #40]	; 0x28
   262d8:	mvn	r3, #0
   262dc:	str	r3, [sp, #24]
   262e0:	mov	r3, r7
   262e4:	ldr	ip, [r7, #20]
   262e8:	b	262f0 <__assert_fail@plt+0x14e28>
   262ec:	mov	r3, r2
   262f0:	ldr	r2, [r3, #4]
   262f4:	cmp	r2, #0
   262f8:	bne	262ec <__assert_fail@plt+0x14e24>
   262fc:	ldr	r2, [r3, #8]
   26300:	cmp	r2, #0
   26304:	bne	262ec <__assert_fail@plt+0x14e24>
   26308:	b	26340 <__assert_fail@plt+0x14e78>
   2630c:	ldr	r1, [r3]
   26310:	cmp	r1, #0
   26314:	beq	26370 <__assert_fail@plt+0x14ea8>
   26318:	ldr	r2, [r1, #8]
   2631c:	sub	r0, r3, r2
   26320:	cmp	r2, #0
   26324:	clz	r0, r0
   26328:	mov	r3, r1
   2632c:	lsr	r0, r0, #5
   26330:	moveq	r1, #1
   26334:	movne	r1, r0
   26338:	cmp	r1, #0
   2633c:	beq	262ec <__assert_fail@plt+0x14e24>
   26340:	ldrb	r2, [r3, #24]
   26344:	cmp	r2, #17
   26348:	bne	2630c <__assert_fail@plt+0x14e44>
   2634c:	ldr	r2, [r3, #20]
   26350:	cmp	ip, r2
   26354:	bne	2630c <__assert_fail@plt+0x14e44>
   26358:	ldrb	r2, [r3, #26]
   2635c:	ldr	r1, [r3]
   26360:	orr	r2, r2, #8
   26364:	cmp	r1, #0
   26368:	strb	r2, [r3, #26]
   2636c:	bne	26318 <__assert_fail@plt+0x14e50>
   26370:	ldr	r3, [sp, #24]
   26374:	cmn	r3, #1
   26378:	bne	26194 <__assert_fail@plt+0x14ccc>
   2637c:	b	25470 <__assert_fail@plt+0x13fa8>
   26380:	ldr	r3, [sp, #204]	; 0xcc
   26384:	ldr	r3, [r3]
   26388:	cmp	r3, #0
   2638c:	bne	257b0 <__assert_fail@plt+0x142e8>
   26390:	mov	r3, #0
   26394:	str	r3, [sp, #28]
   26398:	b	26090 <__assert_fail@plt+0x14bc8>
   2639c:	mov	r0, #996	; 0x3e4
   263a0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   263a4:	subs	r4, r0, #0
   263a8:	beq	26128 <__assert_fail@plt+0x14c60>
   263ac:	ldr	r2, [sl, #56]	; 0x38
   263b0:	mov	r1, #1
   263b4:	mov	r0, #4
   263b8:	mov	r3, #0
   263bc:	str	r2, [r4]
   263c0:	str	r4, [sl, #56]	; 0x38
   263c4:	b	254a4 <__assert_fail@plt+0x13fdc>
   263c8:	str	r4, [sp, #28]
   263cc:	b	26090 <__assert_fail@plt+0x14bc8>
   263d0:	cmn	fp, #1
   263d4:	str	fp, [sp, #24]
   263d8:	beq	26458 <__assert_fail@plt+0x14f90>
   263dc:	cmn	fp, #2
   263e0:	movne	r8, fp
   263e4:	beq	26bb8 <__assert_fail@plt+0x156f0>
   263e8:	ldr	r3, [sp, #24]
   263ec:	cmp	r3, #32768	; 0x8000
   263f0:	movlt	r4, #0
   263f4:	movge	r4, #1
   263f8:	cmp	r4, #0
   263fc:	bne	2654c <__assert_fail@plt+0x15084>
   26400:	mov	r1, r9
   26404:	ldr	r0, [sp, #20]
   26408:	ldr	r2, [sp, #32]
   2640c:	bl	1bc08 <__assert_fail@plt+0xa740>
   26410:	ldr	r3, [r9, #40]	; 0x28
   26414:	ldr	r2, [sp, #28]
   26418:	add	r0, r3, r0
   2641c:	cmp	r2, #0
   26420:	str	r0, [r9, #40]	; 0x28
   26424:	beq	26380 <__assert_fail@plt+0x14eb8>
   26428:	ldr	r3, [sp, #24]
   2642c:	orrs	r3, r8, r3
   26430:	bne	2655c <__assert_fail@plt+0x15094>
   26434:	mov	r0, r2
   26438:	bl	1ce74 <__assert_fail@plt+0xb9ac>
   2643c:	ldr	r3, [sp, #204]	; 0xcc
   26440:	ldr	r3, [r3]
   26444:	cmp	r3, #0
   26448:	beq	26390 <__assert_fail@plt+0x14ec8>
   2644c:	b	26134 <__assert_fail@plt+0x14c6c>
   26450:	cmp	r3, #2
   26454:	beq	269a4 <__assert_fail@plt+0x154dc>
   26458:	ldr	r2, [sp, #204]	; 0xcc
   2645c:	mov	r3, #10
   26460:	str	r3, [r2]
   26464:	ldr	r3, [sp, #28]
   26468:	cmp	r3, #0
   2646c:	beq	257b0 <__assert_fail@plt+0x142e8>
   26470:	b	26134 <__assert_fail@plt+0x14c6c>
   26474:	cmn	fp, #1
   26478:	str	fp, [sp, #24]
   2647c:	bne	268f4 <__assert_fail@plt+0x1542c>
   26480:	cmp	r3, #1
   26484:	bne	26458 <__assert_fail@plt+0x14f90>
   26488:	mov	r8, #0
   2648c:	mvn	r3, #0
   26490:	ldr	fp, [sp, #20]
   26494:	movw	r7, #32816	; 0x8030
   26498:	str	r3, [sp, #24]
   2649c:	mov	r3, r6
   264a0:	mov	r6, r4
   264a4:	mov	r4, r8
   264a8:	mov	r8, r9
   264ac:	mov	r9, r3
   264b0:	mov	r1, r8
   264b4:	mov	r0, fp
   264b8:	ldr	r2, [sp, #32]
   264bc:	bl	1bc08 <__assert_fail@plt+0xa740>
   264c0:	ldr	r2, [r8, #40]	; 0x28
   264c4:	ldrb	r1, [fp, #4]
   264c8:	ldrb	ip, [fp]
   264cc:	add	r0, r2, r0
   264d0:	cmp	r1, #2
   264d4:	str	r0, [r8, #40]	; 0x28
   264d8:	beq	2698c <__assert_fail@plt+0x154c4>
   264dc:	cmp	r1, #24
   264e0:	cmpne	ip, #44	; 0x2c
   264e4:	beq	264fc <__assert_fail@plt+0x15034>
   264e8:	cmp	r1, #1
   264ec:	beq	268a4 <__assert_fail@plt+0x153dc>
   264f0:	mvn	r3, #1
   264f4:	str	r3, [sp, #24]
   264f8:	b	264b0 <__assert_fail@plt+0x14fe8>
   264fc:	mov	r2, r9
   26500:	mov	r9, r8
   26504:	mov	r8, r4
   26508:	mov	r4, r6
   2650c:	mov	r6, r2
   26510:	ldr	r2, [sp, #24]
   26514:	cmn	r2, #2
   26518:	beq	26bb8 <__assert_fail@plt+0x156f0>
   2651c:	cmn	r2, #1
   26520:	cmpne	r8, r2
   26524:	bgt	26458 <__assert_fail@plt+0x14f90>
   26528:	cmp	r1, #24
   2652c:	bne	26458 <__assert_fail@plt+0x14f90>
   26530:	cmn	r2, #1
   26534:	bne	263e8 <__assert_fail@plt+0x14f20>
   26538:	cmp	r8, #32768	; 0x8000
   2653c:	movlt	r4, #0
   26540:	movge	r4, #1
   26544:	cmp	r4, #0
   26548:	beq	26400 <__assert_fail@plt+0x14f38>
   2654c:	ldr	r2, [sp, #204]	; 0xcc
   26550:	mov	r3, #15
   26554:	str	r3, [r2]
   26558:	b	26464 <__assert_fail@plt+0x14f9c>
   2655c:	cmp	r8, #0
   26560:	ble	278b4 <__assert_fail@plt+0x163ec>
   26564:	cmp	r8, #1
   26568:	beq	278c0 <__assert_fail@plt+0x163f8>
   2656c:	ldr	r4, [r2]
   26570:	mov	r3, #2
   26574:	mov	r6, r2
   26578:	add	fp, sp, #128	; 0x80
   2657c:	str	r8, [sp, #16]
   26580:	mov	r8, r3
   26584:	str	r9, [sp, #40]	; 0x28
   26588:	mov	r9, r2
   2658c:	mov	r7, fp
   26590:	b	26598 <__assert_fail@plt+0x150d0>
   26594:	mov	r6, r3
   26598:	ldr	r2, [sl, #64]	; 0x40
   2659c:	cmp	r2, #31
   265a0:	beq	267f8 <__assert_fail@plt+0x15330>
   265a4:	ldr	r0, [sl, #56]	; 0x38
   265a8:	lsl	r3, r2, #5
   265ac:	add	r2, r2, #1
   265b0:	add	lr, r3, #4
   265b4:	add	ip, r0, r3
   265b8:	add	r3, r3, #16
   265bc:	str	r2, [sl, #64]	; 0x40
   265c0:	add	r1, r0, r3
   265c4:	add	r0, r0, lr
   265c8:	str	r5, [ip, #4]
   265cc:	mvn	lr, #0
   265d0:	cmp	r0, #0
   265d4:	str	r5, [ip, #8]
   265d8:	str	r5, [ip, #12]
   265dc:	ldrd	r2, [r6, #20]
   265e0:	strd	r2, [ip, #24]
   265e4:	ldrb	r3, [r1, #14]
   265e8:	bic	r3, r3, #12
   265ec:	strb	r3, [r1, #14]
   265f0:	str	r5, [ip, #16]
   265f4:	str	r5, [ip, #20]
   265f8:	str	lr, [ip, #32]
   265fc:	str	r0, [r7]
   26600:	beq	26830 <__assert_fail@plt+0x15368>
   26604:	str	r4, [ip, #4]
   26608:	ldr	r4, [r7]
   2660c:	ldrb	r3, [r4, #26]
   26610:	orr	r3, r3, #4
   26614:	strb	r3, [r4, #26]
   26618:	ldr	r3, [r6, #4]
   2661c:	cmp	r3, #0
   26620:	addne	r7, r4, #4
   26624:	bne	26594 <__assert_fail@plt+0x150cc>
   26628:	ldr	r2, [r6, #8]
   2662c:	cmp	r2, #0
   26630:	cmpne	r2, r3
   26634:	mov	r3, r6
   26638:	bne	26824 <__assert_fail@plt+0x1535c>
   2663c:	ldr	r2, [r6]
   26640:	ldr	r4, [r4]
   26644:	subs	r6, r2, #0
   26648:	bne	26628 <__assert_fail@plt+0x15160>
   2664c:	ldr	r6, [sp, #128]	; 0x80
   26650:	mov	r3, #0
   26654:	mov	r2, #0
   26658:	strd	r2, [fp]
   2665c:	ldr	r3, [sl, #64]	; 0x40
   26660:	cmp	r3, #31
   26664:	beq	26838 <__assert_fail@plt+0x15370>
   26668:	ldr	r0, [sl, #56]	; 0x38
   2666c:	lsl	r1, r3, #5
   26670:	add	lr, r3, #1
   26674:	add	r4, r1, #4
   26678:	add	r3, r0, r1
   2667c:	mov	ip, #16
   26680:	str	lr, [sl, #64]	; 0x40
   26684:	add	r1, r1, ip
   26688:	add	r4, r0, r4
   2668c:	stmib	r3, {r5, r9}
   26690:	add	r2, r0, r1
   26694:	mvn	lr, #0
   26698:	str	r6, [r3, #12]
   2669c:	cmp	r6, #0
   266a0:	strb	ip, [sp, #132]	; 0x84
   266a4:	ldrd	r0, [fp]
   266a8:	strd	r0, [r3, #24]
   266ac:	ldrb	ip, [r2, #14]
   266b0:	bic	ip, ip, #12
   266b4:	strb	ip, [r2, #14]
   266b8:	str	r5, [r3, #16]
   266bc:	str	r5, [r3, #20]
   266c0:	str	lr, [r3, #32]
   266c4:	str	r4, [r9]
   266c8:	beq	26128 <__assert_fail@plt+0x14c60>
   266cc:	cmp	r4, #0
   266d0:	str	r4, [r6]
   266d4:	beq	26128 <__assert_fail@plt+0x14c60>
   266d8:	ldr	r3, [sp, #16]
   266dc:	add	r8, r8, #1
   266e0:	mov	r9, r4
   266e4:	cmp	r3, r8
   266e8:	bge	2658c <__assert_fail@plt+0x150c4>
   266ec:	ldr	r9, [sp, #40]	; 0x28
   266f0:	mov	r8, r3
   266f4:	ldr	r3, [sp, #24]
   266f8:	cmp	r8, r3
   266fc:	beq	263c8 <__assert_fail@plt+0x14f00>
   26700:	add	fp, sp, #128	; 0x80
   26704:	str	r8, [sp, #16]
   26708:	mov	r1, fp
   2670c:	str	r9, [sp, #40]	; 0x28
   26710:	ldr	r7, [r6]
   26714:	b	26720 <__assert_fail@plt+0x15258>
   26718:	mov	r6, r3
   2671c:	add	r1, r7, #4
   26720:	ldr	r3, [sl, #64]	; 0x40
   26724:	cmp	r3, #31
   26728:	beq	26870 <__assert_fail@plt+0x153a8>
   2672c:	ldr	r0, [sl, #56]	; 0x38
   26730:	lsl	r2, r3, #5
   26734:	add	lr, r3, #1
   26738:	add	ip, r2, #4
   2673c:	add	r3, r0, r2
   26740:	str	lr, [sl, #64]	; 0x40
   26744:	add	r2, r2, #16
   26748:	add	r2, r0, r2
   2674c:	add	r0, r0, ip
   26750:	str	r5, [r3, #4]
   26754:	mvn	ip, #0
   26758:	cmp	r0, #0
   2675c:	str	r5, [r3, #8]
   26760:	str	r5, [r3, #12]
   26764:	ldrd	r8, [r6, #20]
   26768:	strd	r8, [r3, #24]
   2676c:	ldrb	lr, [r2, #14]
   26770:	bic	lr, lr, #12
   26774:	strb	lr, [r2, #14]
   26778:	str	r5, [r3, #16]
   2677c:	str	r5, [r3, #20]
   26780:	str	ip, [r3, #32]
   26784:	str	r0, [r1]
   26788:	beq	26128 <__assert_fail@plt+0x14c60>
   2678c:	str	r7, [r3, #4]
   26790:	ldr	r7, [r1]
   26794:	ldrb	r3, [r7, #26]
   26798:	orr	r3, r3, #4
   2679c:	strb	r3, [r7, #26]
   267a0:	ldr	r3, [r6, #4]
   267a4:	cmp	r3, #0
   267a8:	bne	26718 <__assert_fail@plt+0x15250>
   267ac:	ldr	r8, [sp, #16]
   267b0:	ldr	r9, [sp, #40]	; 0x28
   267b4:	ldr	r2, [r6, #8]
   267b8:	cmp	r2, #0
   267bc:	cmpne	r2, r3
   267c0:	mov	r3, r6
   267c4:	bne	2694c <__assert_fail@plt+0x15484>
   267c8:	ldr	r2, [r6]
   267cc:	ldr	r7, [r7]
   267d0:	subs	r6, r2, #0
   267d4:	bne	267b4 <__assert_fail@plt+0x152ec>
   267d8:	ldr	r7, [sp, #128]	; 0x80
   267dc:	cmp	r7, #0
   267e0:	beq	26128 <__assert_fail@plt+0x14c60>
   267e4:	ldrb	r3, [r7, #24]
   267e8:	str	r4, [sp, #40]	; 0x28
   267ec:	cmp	r3, #17
   267f0:	bne	26370 <__assert_fail@plt+0x14ea8>
   267f4:	b	262e0 <__assert_fail@plt+0x14e18>
   267f8:	mov	r0, #996	; 0x3e4
   267fc:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   26800:	cmp	r0, #0
   26804:	beq	26864 <__assert_fail@plt+0x1539c>
   26808:	ldr	r1, [sl, #56]	; 0x38
   2680c:	mov	r2, #1
   26810:	mov	lr, #4
   26814:	mov	r3, #0
   26818:	str	r1, [r0]
   2681c:	str	r0, [sl, #56]	; 0x38
   26820:	b	265b4 <__assert_fail@plt+0x150ec>
   26824:	mov	r3, r2
   26828:	add	r7, r4, #8
   2682c:	b	26594 <__assert_fail@plt+0x150cc>
   26830:	mov	r6, r0
   26834:	b	26650 <__assert_fail@plt+0x15188>
   26838:	mov	r0, #996	; 0x3e4
   2683c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   26840:	cmp	r0, #0
   26844:	beq	26128 <__assert_fail@plt+0x14c60>
   26848:	ldr	r3, [sl, #56]	; 0x38
   2684c:	mov	lr, #1
   26850:	mov	r4, #4
   26854:	mov	r1, #0
   26858:	str	r3, [r0]
   2685c:	str	r0, [sl, #56]	; 0x38
   26860:	b	26678 <__assert_fail@plt+0x151b0>
   26864:	mov	r6, r0
   26868:	str	r0, [r7]
   2686c:	b	26650 <__assert_fail@plt+0x15188>
   26870:	mov	r0, #996	; 0x3e4
   26874:	str	r1, [sp, #44]	; 0x2c
   26878:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2687c:	cmp	r0, #0
   26880:	ldr	r1, [sp, #44]	; 0x2c
   26884:	beq	26124 <__assert_fail@plt+0x14c5c>
   26888:	ldr	r3, [sl, #56]	; 0x38
   2688c:	mov	lr, #1
   26890:	mov	ip, #4
   26894:	mov	r2, #0
   26898:	str	r3, [r0]
   2689c:	str	r0, [sl, #56]	; 0x38
   268a0:	b	2673c <__assert_fail@plt+0x15274>
   268a4:	ldr	r3, [sp, #24]
   268a8:	sub	r1, ip, #48	; 0x30
   268ac:	uxtb	r0, r1
   268b0:	cmp	r0, #9
   268b4:	movhi	r2, #0
   268b8:	movls	r2, #1
   268bc:	cmn	r3, #2
   268c0:	moveq	r2, #0
   268c4:	cmp	r2, #0
   268c8:	beq	264f0 <__assert_fail@plt+0x15028>
   268cc:	cmn	r3, #1
   268d0:	add	r2, r3, r3, lsl #2
   268d4:	streq	r1, [sp, #24]
   268d8:	beq	264b0 <__assert_fail@plt+0x14fe8>
   268dc:	add	ip, ip, r2, lsl #1
   268e0:	cmp	ip, r7
   268e4:	movge	ip, r7
   268e8:	sub	r3, ip, #48	; 0x30
   268ec:	str	r3, [sp, #24]
   268f0:	b	264b0 <__assert_fail@plt+0x14fe8>
   268f4:	ldr	r2, [sp, #24]
   268f8:	cmn	r2, #2
   268fc:	beq	26908 <__assert_fail@plt+0x15440>
   26900:	cmp	r3, #1
   26904:	beq	278fc <__assert_fail@plt+0x16434>
   26908:	ldr	r2, [sp, #52]	; 0x34
   2690c:	cmp	r2, #0
   26910:	beq	26450 <__assert_fail@plt+0x14f88>
   26914:	ldrd	r2, [r6]
   26918:	mov	r1, #1
   2691c:	str	r4, [r9, #40]	; 0x28
   26920:	ldr	r0, [sp, #20]
   26924:	ldr	ip, [sp, #28]
   26928:	strd	r2, [r0]
   2692c:	ldr	r3, [sp, #204]	; 0xcc
   26930:	strb	r1, [r0, #4]
   26934:	ldr	r3, [r3]
   26938:	cmp	r3, #0
   2693c:	beq	2608c <__assert_fail@plt+0x14bc4>
   26940:	cmp	ip, #0
   26944:	bne	2608c <__assert_fail@plt+0x14bc4>
   26948:	b	26464 <__assert_fail@plt+0x14f9c>
   2694c:	mov	r6, r2
   26950:	add	r1, r7, #8
   26954:	str	r8, [sp, #16]
   26958:	str	r9, [sp, #40]	; 0x28
   2695c:	b	26720 <__assert_fail@plt+0x15258>
   26960:	mov	r0, #996	; 0x3e4
   26964:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   26968:	cmp	r0, #0
   2696c:	beq	27038 <__assert_fail@plt+0x15b70>
   26970:	ldr	r1, [sl, #56]	; 0x38
   26974:	mov	ip, #4
   26978:	mov	r3, #1
   2697c:	mov	r2, #0
   26980:	str	r1, [r0]
   26984:	str	r0, [sl, #56]	; 0x38
   26988:	b	26028 <__assert_fail@plt+0x14b60>
   2698c:	ldr	r3, [sp, #52]	; 0x34
   26990:	mov	r4, r6
   26994:	mov	r6, r9
   26998:	mov	r9, r8
   2699c:	cmp	r3, #0
   269a0:	bne	26914 <__assert_fail@plt+0x1544c>
   269a4:	ldr	r2, [sp, #204]	; 0xcc
   269a8:	mov	r3, #9
   269ac:	str	r3, [r2]
   269b0:	b	26464 <__assert_fail@plt+0x14f9c>
   269b4:	mvn	r3, #0
   269b8:	mov	r4, r2
   269bc:	mov	r6, r2
   269c0:	mov	r8, #1
   269c4:	str	r3, [sp, #24]
   269c8:	b	26700 <__assert_fail@plt+0x15238>
   269cc:	ldr	r3, [sl, #84]	; 0x54
   269d0:	mov	r2, #1
   269d4:	orr	r3, r3, r2, lsl r4
   269d8:	str	r3, [sl, #84]	; 0x54
   269dc:	b	25ef8 <__assert_fail@plt+0x14a30>
   269e0:	ldr	r2, [sp, #16]
   269e4:	ldr	r0, [r2]
   269e8:	ldr	r3, [r2, #20]
   269ec:	ldr	r2, [sp, #36]	; 0x24
   269f0:	cmp	r3, r2
   269f4:	beq	270cc <__assert_fail@plt+0x15c04>
   269f8:	ldr	ip, [sp, #16]
   269fc:	add	r1, r3, #1
   26a00:	ldr	r2, [sp, #76]	; 0x4c
   26a04:	str	r1, [ip, #20]
   26a08:	str	r2, [r0, r3, lsl #2]
   26a0c:	b	25fcc <__assert_fail@plt+0x14b04>
   26a10:	ldrb	r3, [sp, #76]	; 0x4c
   26a14:	mov	r0, #1
   26a18:	b	25fb8 <__assert_fail@plt+0x14af0>
   26a1c:	ldr	r2, [sp, #16]
   26a20:	add	r0, sp, #68	; 0x44
   26a24:	mov	r1, r4
   26a28:	ldr	ip, [sp, #76]	; 0x4c
   26a2c:	str	r0, [sp]
   26a30:	str	sl, [sp, #8]
   26a34:	add	r3, r2, #36	; 0x24
   26a38:	add	r2, r2, #12
   26a3c:	ldr	r0, [r9, #64]	; 0x40
   26a40:	str	ip, [sp, #4]
   26a44:	bl	1aefc <__assert_fail@plt+0x9a34>
   26a48:	ldr	r3, [sp, #204]	; 0xcc
   26a4c:	cmp	r0, #0
   26a50:	str	r0, [r3]
   26a54:	beq	25fcc <__assert_fail@plt+0x14b04>
   26a58:	ldr	sl, [sp, #24]
   26a5c:	mov	r0, r4
   26a60:	bl	14484 <__assert_fail@plt+0x2fbc>
   26a64:	ldr	r4, [sp, #16]
   26a68:	ldr	r0, [r4]
   26a6c:	bl	14484 <__assert_fail@plt+0x2fbc>
   26a70:	ldr	r0, [r4, #4]
   26a74:	bl	14484 <__assert_fail@plt+0x2fbc>
   26a78:	ldr	r0, [r4, #8]
   26a7c:	bl	14484 <__assert_fail@plt+0x2fbc>
   26a80:	ldr	r0, [r4, #12]
   26a84:	bl	14484 <__assert_fail@plt+0x2fbc>
   26a88:	mov	r0, r4
   26a8c:	bl	14484 <__assert_fail@plt+0x2fbc>
   26a90:	ldr	r3, [sp, #204]	; 0xcc
   26a94:	ldr	r3, [r3]
   26a98:	cmp	r3, #0
   26a9c:	bne	257b0 <__assert_fail@plt+0x142e8>
   26aa0:	str	r3, [sp, #28]
   26aa4:	b	25390 <__assert_fail@plt+0x13ec8>
   26aa8:	ldr	r2, [sl, #64]	; 0x40
   26aac:	cmp	r2, #31
   26ab0:	beq	27470 <__assert_fail@plt+0x15fa8>
   26ab4:	ldr	r0, [sl, #56]	; 0x38
   26ab8:	lsl	r3, r2, #5
   26abc:	add	r2, r2, #1
   26ac0:	add	lr, r3, #4
   26ac4:	add	r1, r0, r3
   26ac8:	add	r3, r3, #16
   26acc:	str	r2, [sl, #64]	; 0x40
   26ad0:	adds	r2, r0, lr
   26ad4:	add	r0, r0, r3
   26ad8:	ldr	r3, [sp, #20]
   26adc:	mov	ip, #0
   26ae0:	mvn	lr, #0
   26ae4:	str	r2, [sp, #28]
   26ae8:	str	ip, [r1, #4]
   26aec:	str	ip, [r1, #8]
   26af0:	str	ip, [r1, #12]
   26af4:	ldrd	r2, [r3]
   26af8:	strd	r2, [r1, #24]
   26afc:	ldrb	r3, [r0, #14]
   26b00:	bic	r3, r3, #12
   26b04:	strb	r3, [r0, #14]
   26b08:	str	ip, [r1, #16]
   26b0c:	str	ip, [r1, #20]
   26b10:	str	lr, [r1, #32]
   26b14:	bne	259dc <__assert_fail@plt+0x14514>
   26b18:	b	25c0c <__assert_fail@plt+0x14744>
   26b1c:	mov	r0, #996	; 0x3e4
   26b20:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   26b24:	cmp	r0, #0
   26b28:	beq	25c0c <__assert_fail@plt+0x14744>
   26b2c:	ldr	r1, [sl, #56]	; 0x38
   26b30:	mov	r2, #4
   26b34:	mov	r3, #0
   26b38:	str	r1, [r0]
   26b3c:	str	r0, [sl, #56]	; 0x38
   26b40:	b	2533c <__assert_fail@plt+0x13e74>
   26b44:	ldr	r2, [sp, #20]
   26b48:	mov	r3, #1
   26b4c:	strb	r3, [r2, #4]
   26b50:	b	25ddc <__assert_fail@plt+0x14914>
   26b54:	ldr	r2, [sp, #16]
   26b58:	ldr	r1, [sp, #32]
   26b5c:	ldrb	r3, [r2, #16]
   26b60:	tst	r1, #256	; 0x100
   26b64:	orr	r3, r3, #1
   26b68:	strb	r3, [r2, #16]
   26b6c:	beq	26b7c <__assert_fail@plt+0x156b4>
   26b70:	ldr	r3, [r4]
   26b74:	orr	r3, r3, #1024	; 0x400
   26b78:	str	r3, [r4]
   26b7c:	ldr	r3, [r9, #40]	; 0x28
   26b80:	mov	r1, r9
   26b84:	ldr	r5, [sp, #20]
   26b88:	ldr	r2, [sp, #32]
   26b8c:	add	fp, r3, fp
   26b90:	mov	r0, r5
   26b94:	str	fp, [r9, #40]	; 0x28
   26b98:	bl	18750 <__assert_fail@plt+0x7288>
   26b9c:	ldrb	r3, [r5, #4]
   26ba0:	mov	fp, r0
   26ba4:	cmp	r3, #2
   26ba8:	beq	26f24 <__assert_fail@plt+0x15a5c>
   26bac:	mov	r2, #1
   26bb0:	str	r2, [sp, #44]	; 0x2c
   26bb4:	b	25dd4 <__assert_fail@plt+0x1490c>
   26bb8:	ldr	r3, [sp, #52]	; 0x34
   26bbc:	cmp	r3, #0
   26bc0:	bne	26914 <__assert_fail@plt+0x1544c>
   26bc4:	b	26458 <__assert_fail@plt+0x14f90>
   26bc8:	mov	r3, #7
   26bcc:	ldr	sl, [sp, #24]
   26bd0:	ldr	r2, [sp, #204]	; 0xcc
   26bd4:	str	r3, [r2]
   26bd8:	b	26a5c <__assert_fail@plt+0x15594>
   26bdc:	ldr	r4, [sp, #20]
   26be0:	mov	r2, r3
   26be4:	mov	r1, r9
   26be8:	mov	r6, r3
   26bec:	mov	r0, r4
   26bf0:	bl	1bc08 <__assert_fail@plt+0xa740>
   26bf4:	ldr	lr, [sp, #200]	; 0xc8
   26bf8:	mov	r3, r6
   26bfc:	mov	r2, r4
   26c00:	mov	r1, r5
   26c04:	ldr	ip, [r9, #40]	; 0x28
   26c08:	str	lr, [sp]
   26c0c:	ldr	lr, [sp, #204]	; 0xcc
   26c10:	add	ip, ip, r0
   26c14:	mov	r0, r9
   26c18:	str	lr, [sp, #4]
   26c1c:	str	ip, [r9, #40]	; 0x28
   26c20:	bl	2521c <__assert_fail@plt+0x13d54>
   26c24:	str	r0, [sp, #28]
   26c28:	b	257b8 <__assert_fail@plt+0x142f0>
   26c2c:	mov	r0, #996	; 0x3e4
   26c30:	str	r2, [sp, #16]
   26c34:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   26c38:	cmp	r0, #0
   26c3c:	beq	25c0c <__assert_fail@plt+0x14744>
   26c40:	ldr	r1, [sl, #56]	; 0x38
   26c44:	mov	lr, #1
   26c48:	mov	ip, #4
   26c4c:	mov	r3, #0
   26c50:	ldr	r2, [sp, #16]
   26c54:	str	r1, [r0]
   26c58:	str	r0, [sl, #56]	; 0x38
   26c5c:	b	25bc0 <__assert_fail@plt+0x146f8>
   26c60:	mov	r0, #996	; 0x3e4
   26c64:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   26c68:	subs	fp, r0, #0
   26c6c:	beq	25b94 <__assert_fail@plt+0x146cc>
   26c70:	ldr	r1, [sl, #56]	; 0x38
   26c74:	mov	r0, #4
   26c78:	mov	r2, #1
   26c7c:	mov	r3, #0
   26c80:	str	r1, [fp]
   26c84:	str	fp, [sl, #56]	; 0x38
   26c88:	b	25b54 <__assert_fail@plt+0x1468c>
   26c8c:	ldr	sl, [sp, #24]
   26c90:	ldr	r3, [sp, #204]	; 0xcc
   26c94:	str	r0, [r3]
   26c98:	b	26a5c <__assert_fail@plt+0x15594>
   26c9c:	str	r5, [sp, #28]
   26ca0:	b	25390 <__assert_fail@plt+0x13ec8>
   26ca4:	ldr	r2, [sp, #20]
   26ca8:	mov	r3, #6
   26cac:	str	r3, [r2]
   26cb0:	ldr	r2, [sl, #64]	; 0x40
   26cb4:	cmp	r2, #31
   26cb8:	beq	274d0 <__assert_fail@plt+0x16008>
   26cbc:	lsl	r3, r2, #5
   26cc0:	add	r1, r2, #1
   26cc4:	ldr	r2, [sl, #56]	; 0x38
   26cc8:	add	r4, r3, #4
   26ccc:	add	ip, r2, r3
   26cd0:	add	r3, r3, #16
   26cd4:	str	r1, [sl, #64]	; 0x40
   26cd8:	add	r4, r2, r4
   26cdc:	add	r2, r2, r3
   26ce0:	ldr	r3, [sp, #20]
   26ce4:	mov	lr, #0
   26ce8:	mvn	r5, #0
   26cec:	str	lr, [ip, #4]
   26cf0:	str	lr, [ip, #8]
   26cf4:	str	lr, [ip, #12]
   26cf8:	ldrd	r0, [r3]
   26cfc:	strd	r0, [ip, #24]
   26d00:	ldrb	r3, [r2, #14]
   26d04:	bic	r3, r3, #12
   26d08:	strb	r3, [r2, #14]
   26d0c:	str	lr, [ip, #16]
   26d10:	str	lr, [ip, #20]
   26d14:	str	r5, [ip, #32]
   26d18:	ldr	r2, [sp, #20]
   26d1c:	mov	r3, #9
   26d20:	str	r3, [r2]
   26d24:	b	258dc <__assert_fail@plt+0x14414>
   26d28:	ldr	r3, [r9, #40]	; 0x28
   26d2c:	mov	r2, sl
   26d30:	add	r0, sp, #88	; 0x58
   26d34:	mov	r1, r9
   26d38:	add	r3, r3, fp
   26d3c:	str	r3, [r9, #40]	; 0x28
   26d40:	bl	18750 <__assert_fail@plt+0x7288>
   26d44:	ldrb	r2, [sp, #92]	; 0x5c
   26d48:	mov	r3, r0
   26d4c:	cmp	r2, #2
   26d50:	beq	26bc8 <__assert_fail@plt+0x15700>
   26d54:	cmp	r2, #21
   26d58:	beq	2701c <__assert_fail@plt+0x15b54>
   26d5c:	mov	r1, #1
   26d60:	add	ip, sp, #128	; 0x80
   26d64:	str	sl, [sp]
   26d68:	add	r2, sp, #88	; 0x58
   26d6c:	add	r0, sp, #80	; 0x50
   26d70:	str	r1, [sp, #4]
   26d74:	mov	r1, r9
   26d78:	str	r6, [sp, #80]	; 0x50
   26d7c:	str	ip, [sp, #84]	; 0x54
   26d80:	bl	1c8c4 <__assert_fail@plt+0xb3fc>
   26d84:	cmp	r0, #0
   26d88:	bne	26c8c <__assert_fail@plt+0x157c4>
   26d8c:	mov	r2, sl
   26d90:	mov	r1, r9
   26d94:	mov	r0, r5
   26d98:	bl	18750 <__assert_fail@plt+0x7288>
   26d9c:	ldr	r2, [sp, #72]	; 0x48
   26da0:	mov	fp, r0
   26da4:	sub	r3, r2, #2
   26da8:	bics	r3, r3, #2
   26dac:	beq	276c0 <__assert_fail@plt+0x161f8>
   26db0:	ldr	r3, [sp, #80]	; 0x50
   26db4:	sub	r1, r3, #2
   26db8:	bics	r1, r1, #2
   26dbc:	beq	276c0 <__assert_fail@plt+0x161f8>
   26dc0:	cmp	r2, #3
   26dc4:	moveq	r1, #1
   26dc8:	movne	r1, #0
   26dcc:	str	r1, [sp, #52]	; 0x34
   26dd0:	beq	276dc <__assert_fail@plt+0x16214>
   26dd4:	cmp	r3, #3
   26dd8:	beq	27778 <__assert_fail@plt+0x162b0>
   26ddc:	cmp	r2, #0
   26de0:	bne	276a8 <__assert_fail@plt+0x161e0>
   26de4:	ldrb	r7, [sp, #76]	; 0x4c
   26de8:	cmp	r3, #0
   26dec:	beq	276b8 <__assert_fail@plt+0x161f0>
   26df0:	cmp	r3, #3
   26df4:	bne	276d4 <__assert_fail@plt+0x1620c>
   26df8:	ldr	r1, [sp, #84]	; 0x54
   26dfc:	ldrb	r8, [r1]
   26e00:	cmp	r2, #0
   26e04:	ldr	r1, [sp, #52]	; 0x34
   26e08:	moveq	r1, #1
   26e0c:	cmp	r1, #0
   26e10:	beq	276a0 <__assert_fail@plt+0x161d8>
   26e14:	ldr	r2, [sp, #24]
   26e18:	ldr	r2, [r2, #92]	; 0x5c
   26e1c:	cmp	r2, #1
   26e20:	ble	2758c <__assert_fail@plt+0x160c4>
   26e24:	mov	r0, r7
   26e28:	bl	113f0 <btowc@plt>
   26e2c:	ldr	r3, [sp, #80]	; 0x50
   26e30:	mov	r7, r0
   26e34:	cmp	r3, #3
   26e38:	cmpne	r3, #0
   26e3c:	bne	27598 <__assert_fail@plt+0x160d0>
   26e40:	ldr	r3, [sp, #24]
   26e44:	ldr	r3, [r3, #92]	; 0x5c
   26e48:	cmp	r3, #1
   26e4c:	ble	26e5c <__assert_fail@plt+0x15994>
   26e50:	mov	r0, r8
   26e54:	bl	113f0 <btowc@plt>
   26e58:	mov	r8, r0
   26e5c:	cmn	r7, #1
   26e60:	cmnne	r8, #1
   26e64:	beq	26fb0 <__assert_fail@plt+0x15ae8>
   26e68:	ldr	r3, [sp, #48]	; 0x30
   26e6c:	cmp	r8, r7
   26e70:	movcs	r3, #0
   26e74:	andcc	r3, r3, #1
   26e78:	cmp	r3, #0
   26e7c:	bne	276c0 <__assert_fail@plt+0x161f8>
   26e80:	ldr	r3, [sp, #24]
   26e84:	ldr	r3, [r3, #92]	; 0x5c
   26e88:	cmp	r3, #1
   26e8c:	ble	26ec4 <__assert_fail@plt+0x159fc>
   26e90:	ldr	r2, [sp, #16]
   26e94:	ldr	r1, [sp, #40]	; 0x28
   26e98:	ldr	r3, [r2, #32]
   26e9c:	ldr	r2, [r2, #4]
   26ea0:	cmp	r3, r1
   26ea4:	beq	27854 <__assert_fail@plt+0x1638c>
   26ea8:	ldr	r0, [sp, #16]
   26eac:	str	r7, [r2, r3, lsl #2]
   26eb0:	ldr	r2, [r0, #8]
   26eb4:	ldr	r3, [r0, #32]
   26eb8:	add	r1, r3, #1
   26ebc:	str	r1, [r0, #32]
   26ec0:	str	r8, [r2, r3, lsl #2]
   26ec4:	mov	r3, #0
   26ec8:	mov	ip, #1
   26ecc:	cmp	r7, r3
   26ed0:	asr	r2, r3, #5
   26ed4:	and	r0, r3, #31
   26ed8:	movhi	r1, #0
   26edc:	movls	r1, #1
   26ee0:	cmp	r8, r3
   26ee4:	add	r3, r3, #1
   26ee8:	movcc	r1, #0
   26eec:	cmp	r1, #0
   26ef0:	beq	26f00 <__assert_fail@plt+0x15a38>
   26ef4:	ldr	r1, [r4, r2, lsl #2]
   26ef8:	orr	r1, r1, ip, lsl r0
   26efc:	str	r1, [r4, r2, lsl #2]
   26f00:	cmp	r3, #256	; 0x100
   26f04:	bne	26ecc <__assert_fail@plt+0x15a04>
   26f08:	ldr	r2, [sp, #204]	; 0xcc
   26f0c:	mov	r3, #0
   26f10:	str	r3, [r2]
   26f14:	b	25fcc <__assert_fail@plt+0x14b04>
   26f18:	cmp	r5, #0
   26f1c:	strne	r6, [r5]
   26f20:	b	25c0c <__assert_fail@plt+0x14744>
   26f24:	ldr	r2, [sp, #204]	; 0xcc
   26f28:	mov	r3, #2
   26f2c:	str	r3, [r2]
   26f30:	b	26a5c <__assert_fail@plt+0x15594>
   26f34:	mov	r0, #996	; 0x3e4
   26f38:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   26f3c:	cmp	r0, #0
   26f40:	beq	25c0c <__assert_fail@plt+0x14744>
   26f44:	ldr	r1, [sl, #56]	; 0x38
   26f48:	mov	lr, #4
   26f4c:	mov	r2, #1
   26f50:	mov	r3, #0
   26f54:	str	r1, [r0]
   26f58:	str	r0, [sl, #56]	; 0x38
   26f5c:	b	25c40 <__assert_fail@plt+0x14778>
   26f60:	str	r2, [sp, #28]
   26f64:	mov	r3, #6
   26f68:	ldr	r2, [sp, #204]	; 0xcc
   26f6c:	str	r3, [r2]
   26f70:	b	257b8 <__assert_fail@plt+0x142f0>
   26f74:	mov	r0, r4
   26f78:	str	r6, [sp, #28]
   26f7c:	bl	14484 <__assert_fail@plt+0x2fbc>
   26f80:	ldr	r0, [sp, #16]
   26f84:	bl	14484 <__assert_fail@plt+0x2fbc>
   26f88:	ldr	r2, [sp, #204]	; 0xcc
   26f8c:	mov	r3, #12
   26f90:	str	r3, [r2]
   26f94:	b	257b8 <__assert_fail@plt+0x142f0>
   26f98:	ldr	r0, [sp, #84]	; 0x54
   26f9c:	strd	r2, [sp, #56]	; 0x38
   26fa0:	bl	11390 <strlen@plt>
   26fa4:	cmp	r0, #1
   26fa8:	ldrd	r2, [sp, #56]	; 0x38
   26fac:	bls	276fc <__assert_fail@plt+0x16234>
   26fb0:	mov	r3, #3
   26fb4:	ldr	sl, [sp, #24]
   26fb8:	ldr	r2, [sp, #204]	; 0xcc
   26fbc:	str	r3, [r2]
   26fc0:	b	26a5c <__assert_fail@plt+0x15594>
   26fc4:	mov	r0, #996	; 0x3e4
   26fc8:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   26fcc:	cmp	r0, #0
   26fd0:	beq	25c0c <__assert_fail@plt+0x14744>
   26fd4:	ldr	r3, [sl, #56]	; 0x38
   26fd8:	mov	r2, #1
   26fdc:	mov	r6, #4
   26fe0:	mov	r1, #0
   26fe4:	str	r3, [r0]
   26fe8:	str	r0, [sl, #56]	; 0x38
   26fec:	b	25f20 <__assert_fail@plt+0x14a58>
   26ff0:	mov	r0, #996	; 0x3e4
   26ff4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   26ff8:	cmp	r0, #0
   26ffc:	beq	25c0c <__assert_fail@plt+0x14744>
   27000:	ldr	r1, [sl, #56]	; 0x38
   27004:	mov	r2, #1
   27008:	mov	ip, #4
   2700c:	mov	r3, #0
   27010:	str	r1, [r0]
   27014:	str	r0, [sl, #56]	; 0x38
   27018:	b	25a74 <__assert_fail@plt+0x145ac>
   2701c:	ldr	r2, [r9, #40]	; 0x28
   27020:	mov	r1, #1
   27024:	ldr	r3, [sp, #72]	; 0x48
   27028:	sub	r2, r2, fp
   2702c:	str	r2, [r9, #40]	; 0x28
   27030:	strb	r1, [r5, #4]
   27034:	b	25e78 <__assert_fail@plt+0x149b0>
   27038:	ldr	r3, [sp, #204]	; 0xcc
   2703c:	ldr	r3, [r3]
   27040:	cmp	r3, #0
   27044:	beq	26390 <__assert_fail@plt+0x14ec8>
   27048:	b	26134 <__assert_fail@plt+0x14c6c>
   2704c:	mov	r0, #996	; 0x3e4
   27050:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   27054:	cmp	r0, #0
   27058:	beq	25c0c <__assert_fail@plt+0x14744>
   2705c:	ldr	r1, [sl, #56]	; 0x38
   27060:	mov	r2, #4
   27064:	mov	r3, #0
   27068:	str	r1, [r0]
   2706c:	str	r0, [sl, #56]	; 0x38
   27070:	b	25cf4 <__assert_fail@plt+0x1482c>
   27074:	mov	r0, #996	; 0x3e4
   27078:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2707c:	cmp	r0, #0
   27080:	beq	25c0c <__assert_fail@plt+0x14744>
   27084:	ldr	r1, [sl, #56]	; 0x38
   27088:	mov	r6, #4
   2708c:	mov	r2, #1
   27090:	mov	r3, #0
   27094:	str	r1, [r0]
   27098:	str	r0, [sl, #56]	; 0x38
   2709c:	b	2596c <__assert_fail@plt+0x144a4>
   270a0:	mov	r0, #996	; 0x3e4
   270a4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   270a8:	cmp	r0, #0
   270ac:	beq	278cc <__assert_fail@plt+0x16404>
   270b0:	ldr	r1, [sl, #56]	; 0x38
   270b4:	mov	r2, #1
   270b8:	mov	r5, #4
   270bc:	mov	r3, #0
   270c0:	str	r1, [r0]
   270c4:	str	r0, [sl, #56]	; 0x38
   270c8:	b	258f8 <__assert_fail@plt+0x14430>
   270cc:	lsl	r3, r2, #1
   270d0:	add	r3, r3, #1
   270d4:	lsl	r1, r3, #2
   270d8:	str	r3, [sp, #36]	; 0x24
   270dc:	bl	2bb50 <__assert_fail@plt+0x1a688>
   270e0:	cmp	r0, #0
   270e4:	beq	2784c <__assert_fail@plt+0x16384>
   270e8:	ldr	r2, [sp, #16]
   270ec:	str	r0, [r2]
   270f0:	ldr	r3, [r2, #20]
   270f4:	b	269f8 <__assert_fail@plt+0x15530>
   270f8:	ldr	r3, [r9, #40]	; 0x28
   270fc:	ldr	sl, [sp, #24]
   27100:	ldr	r2, [sp, #44]	; 0x2c
   27104:	add	fp, r3, fp
   27108:	str	fp, [r9, #40]	; 0x28
   2710c:	cmp	r2, #0
   27110:	beq	271a4 <__assert_fail@plt+0x15cdc>
   27114:	ubfx	r2, r4, #2, #1
   27118:	cmp	r2, #0
   2711c:	moveq	r1, r2
   27120:	beq	27134 <__assert_fail@plt+0x15c6c>
   27124:	ldr	r3, [r4]
   27128:	mov	r1, #1
   2712c:	mvn	r3, r3
   27130:	str	r3, [r4]
   27134:	ldr	ip, [r4, r2, lsl #2]
   27138:	rsb	lr, r2, #8
   2713c:	add	r3, r4, r2, lsl #2
   27140:	lsr	lr, lr, #1
   27144:	ldr	r0, [r3, #4]
   27148:	cmp	lr, #4
   2714c:	mvn	ip, ip
   27150:	str	ip, [r4, r2, lsl #2]
   27154:	mvn	r2, r0
   27158:	ldr	lr, [r3, #8]
   2715c:	ldr	ip, [r3, #12]
   27160:	ldr	r0, [r3, #16]
   27164:	mvn	lr, lr
   27168:	stmib	r3, {r2, lr}
   2716c:	mvn	ip, ip
   27170:	ldr	r2, [r3, #20]
   27174:	mvn	r0, r0
   27178:	str	ip, [r3, #12]
   2717c:	str	r0, [r3, #16]
   27180:	mvn	r2, r2
   27184:	str	r2, [r3, #20]
   27188:	bne	27368 <__assert_fail@plt+0x15ea0>
   2718c:	ldr	r1, [r3, #24]
   27190:	ldr	r2, [r3, #28]
   27194:	mvn	r1, r1
   27198:	mvn	r2, r2
   2719c:	str	r1, [r3, #24]
   271a0:	str	r2, [r3, #28]
   271a4:	ldr	r1, [sl, #92]	; 0x5c
   271a8:	cmp	r1, #1
   271ac:	ble	2725c <__assert_fail@plt+0x15d94>
   271b0:	ldr	r3, [sl, #60]	; 0x3c
   271b4:	add	r0, r4, #8
   271b8:	add	r2, r3, #8
   271bc:	orr	ip, r3, r4
   271c0:	cmp	r3, r0
   271c4:	cmpcc	r4, r2
   271c8:	movcs	r2, #1
   271cc:	movcc	r2, #0
   271d0:	tst	ip, #7
   271d4:	movne	r2, #0
   271d8:	cmp	r2, #0
   271dc:	ldr	r2, [r4]
   271e0:	beq	277a0 <__assert_fail@plt+0x162d8>
   271e4:	ldm	r3, {ip, lr}
   271e8:	ldr	r0, [r4, #4]
   271ec:	and	r2, r2, ip
   271f0:	ldr	ip, [r4, #8]
   271f4:	and	r0, r0, lr
   271f8:	str	r2, [r4]
   271fc:	ldr	r2, [r4, #12]
   27200:	str	r0, [r4, #4]
   27204:	ldr	r0, [r3, #8]
   27208:	ldr	lr, [r3, #12]
   2720c:	and	ip, ip, r0
   27210:	ldr	r0, [r4, #16]
   27214:	and	r2, r2, lr
   27218:	str	ip, [r4, #8]
   2721c:	ldr	lr, [r4, #20]
   27220:	str	r2, [r4, #12]
   27224:	ldr	r2, [r3, #16]
   27228:	ldr	ip, [r3, #20]
   2722c:	and	r2, r2, r0
   27230:	ldr	r0, [r4, #24]
   27234:	and	ip, ip, lr
   27238:	str	r2, [r4, #16]
   2723c:	ldr	r2, [r4, #28]
   27240:	str	ip, [r4, #20]
   27244:	ldr	ip, [r3, #24]
   27248:	ldr	r3, [r3, #28]
   2724c:	and	r0, r0, ip
   27250:	and	r3, r3, r2
   27254:	str	r0, [r4, #24]
   27258:	str	r3, [r4, #28]
   2725c:	ldr	r3, [sp, #16]
   27260:	ldr	r3, [r3, #20]
   27264:	cmp	r3, #0
   27268:	bne	2737c <__assert_fail@plt+0x15eb4>
   2726c:	ldr	r2, [sp, #16]
   27270:	ldr	r3, [r2, #24]
   27274:	cmp	r3, #0
   27278:	bne	2737c <__assert_fail@plt+0x15eb4>
   2727c:	ldr	r3, [r2, #28]
   27280:	cmp	r3, #0
   27284:	bne	2737c <__assert_fail@plt+0x15eb4>
   27288:	ldr	r3, [r2, #32]
   2728c:	cmp	r3, #0
   27290:	bne	2737c <__assert_fail@plt+0x15eb4>
   27294:	cmp	r1, #1
   27298:	ble	272b4 <__assert_fail@plt+0x15dec>
   2729c:	ldr	r3, [r2, #36]	; 0x24
   272a0:	cmp	r3, #0
   272a4:	bne	2737c <__assert_fail@plt+0x15eb4>
   272a8:	ldrb	r3, [r2, #16]
   272ac:	tst	r3, #1
   272b0:	bne	2737c <__assert_fail@plt+0x15eb4>
   272b4:	ldr	r5, [sp, #16]
   272b8:	ldr	r0, [r5]
   272bc:	bl	14484 <__assert_fail@plt+0x2fbc>
   272c0:	ldr	r0, [r5, #4]
   272c4:	bl	14484 <__assert_fail@plt+0x2fbc>
   272c8:	ldr	r0, [r5, #8]
   272cc:	bl	14484 <__assert_fail@plt+0x2fbc>
   272d0:	ldr	r0, [r5, #12]
   272d4:	bl	14484 <__assert_fail@plt+0x2fbc>
   272d8:	mov	r0, r5
   272dc:	bl	14484 <__assert_fail@plt+0x2fbc>
   272e0:	ldr	r1, [sl, #64]	; 0x40
   272e4:	cmp	r1, #31
   272e8:	beq	27820 <__assert_fail@plt+0x16358>
   272ec:	ldr	r2, [sl, #56]	; 0x38
   272f0:	lsl	r3, r1, #5
   272f4:	add	r5, r1, #1
   272f8:	mov	lr, #3
   272fc:	mov	r1, #0
   27300:	add	ip, r3, #24
   27304:	add	r0, r3, #16
   27308:	str	r5, [sl, #64]	; 0x40
   2730c:	add	r5, r3, #4
   27310:	mvn	r7, #0
   27314:	add	r3, r2, r3
   27318:	add	r6, r2, ip
   2731c:	add	r0, r2, r0
   27320:	adds	r5, r2, r5
   27324:	str	r1, [r3, #4]
   27328:	str	r1, [r3, #8]
   2732c:	str	r1, [r3, #12]
   27330:	str	r4, [r2, ip]
   27334:	strb	lr, [r6, #4]
   27338:	ldrb	r2, [r0, #14]
   2733c:	str	r5, [sp, #28]
   27340:	bic	r2, r2, #12
   27344:	strb	r2, [r0, #14]
   27348:	str	r1, [r3, #16]
   2734c:	str	r1, [r3, #20]
   27350:	str	r7, [r3, #32]
   27354:	bne	25390 <__assert_fail@plt+0x13ec8>
   27358:	ldr	r2, [sp, #204]	; 0xcc
   2735c:	mov	r3, #12
   27360:	str	r3, [r2]
   27364:	b	26a5c <__assert_fail@plt+0x15594>
   27368:	add	r3, r1, #6
   2736c:	ldr	r2, [r4, r3, lsl #2]
   27370:	mvn	r2, r2
   27374:	str	r2, [r4, r3, lsl #2]
   27378:	b	271a4 <__assert_fail@plt+0x15cdc>
   2737c:	ldrb	r2, [sl, #88]	; 0x58
   27380:	ldr	r3, [sl, #64]	; 0x40
   27384:	orr	r2, r2, #2
   27388:	cmp	r3, #31
   2738c:	strb	r2, [sl, #88]	; 0x58
   27390:	beq	27708 <__assert_fail@plt+0x16240>
   27394:	ldr	r0, [sl, #56]	; 0x38
   27398:	lsl	r5, r3, #5
   2739c:	add	ip, r3, #1
   273a0:	mov	lr, #6
   273a4:	mov	r3, #0
   273a8:	str	ip, [sl, #64]	; 0x40
   273ac:	add	ip, r5, #4
   273b0:	add	r1, r5, #24
   273b4:	add	r2, r5, #16
   273b8:	mvn	r6, #0
   273bc:	adds	r8, r0, ip
   273c0:	ldr	ip, [sp, #16]
   273c4:	add	r7, r0, r5
   273c8:	add	r5, r0, r1
   273cc:	add	r2, r0, r2
   273d0:	str	r3, [r7, #4]
   273d4:	str	r3, [r7, #8]
   273d8:	str	r3, [r7, #12]
   273dc:	str	ip, [r0, r1]
   273e0:	strb	lr, [r5, #4]
   273e4:	ldrb	r1, [r2, #14]
   273e8:	bic	r1, r1, #12
   273ec:	strb	r1, [r2, #14]
   273f0:	str	r3, [r7, #16]
   273f4:	str	r3, [r7, #20]
   273f8:	str	r6, [r7, #32]
   273fc:	beq	27358 <__assert_fail@plt+0x15e90>
   27400:	ldr	r3, [r4]
   27404:	cmp	r3, #0
   27408:	bne	275a0 <__assert_fail@plt+0x160d8>
   2740c:	ldr	r3, [r4, #4]
   27410:	cmp	r3, #0
   27414:	bne	275a0 <__assert_fail@plt+0x160d8>
   27418:	ldr	r3, [r4, #8]
   2741c:	cmp	r3, #0
   27420:	bne	275a0 <__assert_fail@plt+0x160d8>
   27424:	ldr	r3, [r4, #12]
   27428:	cmp	r3, #0
   2742c:	bne	275a0 <__assert_fail@plt+0x160d8>
   27430:	ldr	r3, [r4, #16]
   27434:	cmp	r3, #0
   27438:	bne	275a0 <__assert_fail@plt+0x160d8>
   2743c:	ldr	r3, [r4, #20]
   27440:	cmp	r3, #0
   27444:	bne	275a0 <__assert_fail@plt+0x160d8>
   27448:	ldr	r3, [r4, #24]
   2744c:	cmp	r3, #0
   27450:	bne	275a0 <__assert_fail@plt+0x160d8>
   27454:	ldr	r3, [r4, #28]
   27458:	cmp	r3, #0
   2745c:	bne	275a0 <__assert_fail@plt+0x160d8>
   27460:	mov	r0, r4
   27464:	str	r8, [sp, #28]
   27468:	bl	14484 <__assert_fail@plt+0x2fbc>
   2746c:	b	25390 <__assert_fail@plt+0x13ec8>
   27470:	mov	r0, #996	; 0x3e4
   27474:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   27478:	cmp	r0, #0
   2747c:	beq	25c0c <__assert_fail@plt+0x14744>
   27480:	ldr	r1, [sl, #56]	; 0x38
   27484:	mov	lr, #4
   27488:	mov	r2, #1
   2748c:	mov	r3, #0
   27490:	str	r1, [r0]
   27494:	str	r0, [sl, #56]	; 0x38
   27498:	b	26ac4 <__assert_fail@plt+0x155fc>
   2749c:	mov	r0, #996	; 0x3e4
   274a0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   274a4:	cmp	r0, #0
   274a8:	mov	r4, r0
   274ac:	beq	258d0 <__assert_fail@plt+0x14408>
   274b0:	ldr	ip, [sl, #56]	; 0x38
   274b4:	mov	r3, r6
   274b8:	mov	r2, r0
   274bc:	mov	r1, #1
   274c0:	mov	r4, #4
   274c4:	str	ip, [r0]
   274c8:	str	r0, [sl, #56]	; 0x38
   274cc:	b	25884 <__assert_fail@plt+0x143bc>
   274d0:	mov	r0, #996	; 0x3e4
   274d4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   274d8:	cmp	r0, #0
   274dc:	mov	r4, r0
   274e0:	beq	26d18 <__assert_fail@plt+0x15850>
   274e4:	ldr	ip, [sl, #56]	; 0x38
   274e8:	mov	r3, r6
   274ec:	mov	r2, r0
   274f0:	mov	r1, #1
   274f4:	mov	r4, #4
   274f8:	str	ip, [r0]
   274fc:	str	r0, [sl, #56]	; 0x38
   27500:	b	26ccc <__assert_fail@plt+0x15804>
   27504:	mov	r4, #128	; 0x80
   27508:	mov	r7, #4
   2750c:	bl	11378 <__ctype_b_loc@plt>
   27510:	ldr	r2, [r0]
   27514:	add	ip, r7, #24
   27518:	sub	r3, r4, #-2147483647	; 0x80000001
   2751c:	mov	lr, #1
   27520:	add	ip, sl, ip, lsl #2
   27524:	add	r7, sl, #128	; 0x80
   27528:	add	r6, r2, r3, lsl lr
   2752c:	mov	r0, r6
   27530:	mov	r1, #0
   27534:	ldrh	r2, [r0, #2]!
   27538:	add	r3, r4, r1
   2753c:	ubfx	r2, r2, #3, #1
   27540:	cmp	r3, #95	; 0x5f
   27544:	movne	r3, r2
   27548:	orreq	r3, r2, #1
   2754c:	cmp	r3, #0
   27550:	beq	27560 <__assert_fail@plt+0x16098>
   27554:	ldr	r3, [ip]
   27558:	orr	r3, r3, lr, lsl r1
   2755c:	str	r3, [ip]
   27560:	add	r1, r1, #1
   27564:	cmp	r1, #32
   27568:	bne	27534 <__assert_fail@plt+0x1606c>
   2756c:	add	ip, ip, #4
   27570:	add	r4, r4, #32
   27574:	cmp	ip, r7
   27578:	add	r6, r6, #64	; 0x40
   2757c:	bne	2752c <__assert_fail@plt+0x16064>
   27580:	b	25848 <__assert_fail@plt+0x14380>
   27584:	mov	r7, r4
   27588:	b	2750c <__assert_fail@plt+0x16044>
   2758c:	cmp	r3, #3
   27590:	cmpne	r3, #0
   27594:	beq	26e68 <__assert_fail@plt+0x159a0>
   27598:	ldr	r8, [sp, #84]	; 0x54
   2759c:	b	26e5c <__assert_fail@plt+0x15994>
   275a0:	ldr	r2, [sl, #64]	; 0x40
   275a4:	cmp	r2, #31
   275a8:	beq	27754 <__assert_fail@plt+0x1628c>
   275ac:	lsl	r3, r2, #5
   275b0:	add	r2, r2, #1
   275b4:	mov	r6, #0
   275b8:	mov	lr, #3
   275bc:	add	r1, r3, #24
   275c0:	add	r5, r0, r3
   275c4:	str	r2, [sl, #64]	; 0x40
   275c8:	add	ip, r0, r1
   275cc:	add	r2, r3, #16
   275d0:	add	r2, r0, r2
   275d4:	add	r3, r3, #4
   275d8:	str	r6, [r5, #4]
   275dc:	adds	fp, r0, r3
   275e0:	str	r6, [r5, #8]
   275e4:	str	r6, [r5, #12]
   275e8:	str	r4, [r0, r1]
   275ec:	strb	lr, [ip, #4]
   275f0:	ldrb	r3, [r2, #14]
   275f4:	bic	r3, r3, #12
   275f8:	strb	r3, [r2, #14]
   275fc:	mvn	r3, #0
   27600:	str	r6, [r5, #16]
   27604:	str	r6, [r5, #20]
   27608:	str	r3, [r5, #32]
   2760c:	beq	27358 <__assert_fail@plt+0x15e90>
   27610:	mov	r2, #0
   27614:	mov	r3, #0
   27618:	strd	r2, [sp, #128]	; 0x80
   2761c:	ldr	r1, [sl, #64]	; 0x40
   27620:	cmp	r1, #31
   27624:	beq	2772c <__assert_fail@plt+0x16264>
   27628:	ldr	ip, [sl, #56]	; 0x38
   2762c:	lsl	r3, r1, #5
   27630:	add	r1, r1, #1
   27634:	mov	lr, #10
   27638:	str	r1, [sl, #64]	; 0x40
   2763c:	add	r1, r3, #4
   27640:	add	r2, r3, #16
   27644:	add	r6, ip, r1
   27648:	add	r3, ip, r3
   2764c:	mov	r1, #0
   27650:	add	r2, ip, r2
   27654:	cmp	r6, r1
   27658:	mvn	ip, #0
   2765c:	str	r6, [sp, #28]
   27660:	stmib	r3, {r1, fp}
   27664:	str	r8, [r3, #12]
   27668:	strb	lr, [sp, #132]	; 0x84
   2766c:	ldrd	r0, [sp, #128]	; 0x80
   27670:	strd	r0, [r3, #24]
   27674:	ldrb	r1, [r2, #14]
   27678:	bic	r1, r1, #12
   2767c:	strb	r1, [r2, #14]
   27680:	mov	r2, #0
   27684:	str	r2, [r3, #16]
   27688:	str	r2, [r3, #20]
   2768c:	str	ip, [r3, #32]
   27690:	str	r6, [r5, #4]
   27694:	str	r6, [r7, #4]
   27698:	bne	25390 <__assert_fail@plt+0x13ec8>
   2769c:	b	27358 <__assert_fail@plt+0x15e90>
   276a0:	ldr	r7, [sp, #76]	; 0x4c
   276a4:	b	26e34 <__assert_fail@plt+0x1596c>
   276a8:	cmp	r3, #0
   276ac:	movne	r7, #0
   276b0:	bne	276d4 <__assert_fail@plt+0x1620c>
   276b4:	mov	r7, r3
   276b8:	ldrb	r8, [sp, #84]	; 0x54
   276bc:	b	26e00 <__assert_fail@plt+0x15938>
   276c0:	mov	r3, #11
   276c4:	ldr	sl, [sp, #24]
   276c8:	ldr	r2, [sp, #204]	; 0xcc
   276cc:	str	r3, [r2]
   276d0:	b	26a5c <__assert_fail@plt+0x15594>
   276d4:	mov	r8, #0
   276d8:	b	26e00 <__assert_fail@plt+0x15938>
   276dc:	ldr	r0, [sp, #76]	; 0x4c
   276e0:	strd	r2, [sp, #56]	; 0x38
   276e4:	bl	11390 <strlen@plt>
   276e8:	cmp	r0, #1
   276ec:	ldrd	r2, [sp, #56]	; 0x38
   276f0:	bhi	26fb0 <__assert_fail@plt+0x15ae8>
   276f4:	cmp	r3, #3
   276f8:	beq	26f98 <__assert_fail@plt+0x15ad0>
   276fc:	ldr	r1, [sp, #76]	; 0x4c
   27700:	ldrb	r7, [r1]
   27704:	b	26de8 <__assert_fail@plt+0x15920>
   27708:	mov	r0, #996	; 0x3e4
   2770c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   27710:	cmp	r0, #0
   27714:	beq	27358 <__assert_fail@plt+0x15e90>
   27718:	ldr	r2, [sl, #56]	; 0x38
   2771c:	mov	r3, #0
   27720:	str	r2, [r0]
   27724:	str	r0, [sl, #56]	; 0x38
   27728:	b	27394 <__assert_fail@plt+0x15ecc>
   2772c:	mov	r0, #996	; 0x3e4
   27730:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   27734:	cmp	r0, #0
   27738:	beq	27358 <__assert_fail@plt+0x15e90>
   2773c:	ldr	r3, [sl, #56]	; 0x38
   27740:	mov	r1, r6
   27744:	str	r3, [r0]
   27748:	str	r0, [sl, #56]	; 0x38
   2774c:	str	r6, [sl, #64]	; 0x40
   27750:	b	27628 <__assert_fail@plt+0x16160>
   27754:	mov	r0, #996	; 0x3e4
   27758:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2775c:	cmp	r0, #0
   27760:	beq	27358 <__assert_fail@plt+0x15e90>
   27764:	ldr	r3, [sl, #56]	; 0x38
   27768:	mov	r2, #0
   2776c:	str	r3, [r0]
   27770:	str	r0, [sl, #56]	; 0x38
   27774:	b	275ac <__assert_fail@plt+0x160e4>
   27778:	ldr	r0, [sp, #84]	; 0x54
   2777c:	strd	r2, [sp, #56]	; 0x38
   27780:	bl	11390 <strlen@plt>
   27784:	cmp	r0, #1
   27788:	bhi	26fb0 <__assert_fail@plt+0x15ae8>
   2778c:	ldrd	r2, [sp, #56]	; 0x38
   27790:	cmp	r2, #0
   27794:	movne	r7, #0
   27798:	bne	26df8 <__assert_fail@plt+0x15930>
   2779c:	b	26de4 <__assert_fail@plt+0x1591c>
   277a0:	ldr	r0, [r3]
   277a4:	ldr	ip, [r4, #4]
   277a8:	and	r2, r2, r0
   277ac:	ldr	r0, [r4, #8]
   277b0:	str	r2, [r4]
   277b4:	ldr	lr, [r3, #4]
   277b8:	ldr	r2, [r4, #12]
   277bc:	and	ip, ip, lr
   277c0:	ldr	lr, [r4, #16]
   277c4:	str	ip, [r4, #4]
   277c8:	ldr	r5, [r3, #8]
   277cc:	ldr	ip, [r4, #20]
   277d0:	and	r0, r0, r5
   277d4:	str	r0, [r4, #8]
   277d8:	ldr	r5, [r3, #12]
   277dc:	ldr	r0, [r4, #24]
   277e0:	and	r2, r2, r5
   277e4:	str	r2, [r4, #12]
   277e8:	ldr	r5, [r3, #16]
   277ec:	ldr	r2, [r4, #28]
   277f0:	and	lr, lr, r5
   277f4:	str	lr, [r4, #16]
   277f8:	ldr	lr, [r3, #20]
   277fc:	and	ip, ip, lr
   27800:	str	ip, [r4, #20]
   27804:	ldr	ip, [r3, #24]
   27808:	and	r0, r0, ip
   2780c:	str	r0, [r4, #24]
   27810:	ldr	r3, [r3, #28]
   27814:	and	r3, r3, r2
   27818:	str	r3, [r4, #28]
   2781c:	b	2725c <__assert_fail@plt+0x15d94>
   27820:	mov	r0, #996	; 0x3e4
   27824:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   27828:	cmp	r0, #0
   2782c:	beq	27358 <__assert_fail@plt+0x15e90>
   27830:	ldr	r2, [sl, #56]	; 0x38
   27834:	mov	r3, #0
   27838:	mov	r1, r3
   2783c:	str	r2, [r0]
   27840:	str	r0, [sl, #56]	; 0x38
   27844:	str	r3, [sl, #64]	; 0x40
   27848:	b	272ec <__assert_fail@plt+0x15e24>
   2784c:	ldr	sl, [sp, #24]
   27850:	b	27358 <__assert_fail@plt+0x15e90>
   27854:	lsl	r3, r1, #1
   27858:	mov	r0, r2
   2785c:	add	r3, r3, #1
   27860:	str	r3, [sp, #40]	; 0x28
   27864:	lsl	r3, r3, #2
   27868:	mov	r1, r3
   2786c:	str	r3, [sp, #56]	; 0x38
   27870:	bl	2bb50 <__assert_fail@plt+0x1a688>
   27874:	ldr	r3, [sp, #56]	; 0x38
   27878:	mov	r2, r0
   2787c:	str	r2, [sp, #52]	; 0x34
   27880:	mov	r1, r3
   27884:	ldr	r3, [sp, #16]
   27888:	ldr	r0, [r3, #8]
   2788c:	bl	2bb50 <__assert_fail@plt+0x1a688>
   27890:	ldr	r2, [sp, #52]	; 0x34
   27894:	cmp	r0, #0
   27898:	cmpne	r2, #0
   2789c:	beq	278d4 <__assert_fail@plt+0x1640c>
   278a0:	ldr	r1, [sp, #16]
   278a4:	str	r2, [r1, #4]
   278a8:	str	r0, [r1, #8]
   278ac:	ldr	r3, [r1, #32]
   278b0:	b	26ea8 <__assert_fail@plt+0x159e0>
   278b4:	add	fp, sp, #128	; 0x80
   278b8:	ldr	r7, [sp, #28]
   278bc:	b	267e4 <__assert_fail@plt+0x1531c>
   278c0:	ldr	r6, [sp, #28]
   278c4:	mov	r4, r6
   278c8:	b	266f4 <__assert_fail@plt+0x1522c>
   278cc:	mov	r5, r0
   278d0:	b	25944 <__assert_fail@plt+0x1447c>
   278d4:	mov	r8, r0
   278d8:	mov	r0, r2
   278dc:	ldr	sl, [sp, #24]
   278e0:	bl	14484 <__assert_fail@plt+0x2fbc>
   278e4:	mov	r0, r8
   278e8:	bl	14484 <__assert_fail@plt+0x2fbc>
   278ec:	ldr	r2, [sp, #204]	; 0xcc
   278f0:	mov	r3, #12
   278f4:	str	r3, [r2]
   278f8:	b	26a5c <__assert_fail@plt+0x15594>
   278fc:	ldr	r8, [sp, #24]
   27900:	b	2648c <__assert_fail@plt+0x14fc4>
   27904:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27908:	strd	r6, [sp, #8]
   2790c:	mov	r7, r2
   27910:	strd	r8, [sp, #16]
   27914:	mov	r8, r1
   27918:	strd	sl, [sp, #24]
   2791c:	mov	fp, r0
   27920:	str	lr, [sp, #32]
   27924:	sub	sp, sp, #44	; 0x2c
   27928:	ldr	r6, [sp, #80]	; 0x50
   2792c:	str	r3, [sp, #12]
   27930:	ldr	r5, [sp, #84]	; 0x54
   27934:	ldr	r9, [r1]
   27938:	str	r6, [sp]
   2793c:	str	r5, [sp, #4]
   27940:	bl	2521c <__assert_fail@plt+0x13d54>
   27944:	ldr	r2, [r5]
   27948:	clz	r3, r0
   2794c:	lsr	r3, r3, #5
   27950:	cmp	r2, #0
   27954:	moveq	r3, #0
   27958:	cmp	r3, #0
   2795c:	bne	27b18 <__assert_fail@plt+0x16650>
   27960:	mov	r4, r0
   27964:	strd	r8, [sp, #16]
   27968:	str	r3, [sp, #24]
   2796c:	ldrb	r2, [r7, #4]
   27970:	and	r3, r2, #247	; 0xf7
   27974:	cmp	r3, #2
   27978:	beq	279f4 <__assert_fail@plt+0x1652c>
   2797c:	clz	r3, r6
   27980:	lsr	r3, r3, #5
   27984:	cmp	r2, #9
   27988:	orrne	r3, r3, #1
   2798c:	cmp	r3, #0
   27990:	beq	279f4 <__assert_fail@plt+0x1652c>
   27994:	mov	r2, r7
   27998:	mov	r0, fp
   2799c:	str	r6, [sp]
   279a0:	str	r5, [sp, #4]
   279a4:	ldr	r3, [sp, #12]
   279a8:	ldr	r1, [sp, #16]
   279ac:	bl	2521c <__assert_fail@plt+0x13d54>
   279b0:	ldr	r2, [r5]
   279b4:	clz	r3, r0
   279b8:	mov	sl, r0
   279bc:	lsr	r3, r3, #5
   279c0:	cmp	r2, #0
   279c4:	moveq	r3, #0
   279c8:	cmp	r3, #0
   279cc:	bne	27ae0 <__assert_fail@plt+0x16618>
   279d0:	cmp	r4, #0
   279d4:	cmpne	r0, #0
   279d8:	bne	27a14 <__assert_fail@plt+0x1654c>
   279dc:	ldrb	r2, [r7, #4]
   279e0:	cmp	r4, #0
   279e4:	moveq	r4, r0
   279e8:	and	r3, r2, #247	; 0xf7
   279ec:	cmp	r3, #2
   279f0:	bne	2797c <__assert_fail@plt+0x164b4>
   279f4:	mov	r0, r4
   279f8:	add	sp, sp, #44	; 0x2c
   279fc:	ldrd	r4, [sp]
   27a00:	ldrd	r6, [sp, #8]
   27a04:	ldrd	r8, [sp, #16]
   27a08:	ldrd	sl, [sp, #24]
   27a0c:	add	sp, sp, #32
   27a10:	pop	{pc}		; (ldr pc, [sp], #4)
   27a14:	ldr	r2, [sp, #20]
   27a18:	mov	r0, #0
   27a1c:	mov	r1, #0
   27a20:	strd	r0, [sp, #32]
   27a24:	ldr	ip, [r2, #64]	; 0x40
   27a28:	cmp	ip, #31
   27a2c:	beq	27aac <__assert_fail@plt+0x165e4>
   27a30:	ldr	r0, [r2, #56]	; 0x38
   27a34:	lsl	r3, ip, #5
   27a38:	add	ip, ip, #1
   27a3c:	add	r1, r3, #4
   27a40:	mov	r2, #16
   27a44:	ldr	lr, [sp, #24]
   27a48:	strb	r2, [sp, #36]	; 0x24
   27a4c:	add	r2, r0, r3
   27a50:	add	r3, r3, #16
   27a54:	add	r3, r0, r3
   27a58:	add	r0, r0, r1
   27a5c:	ldr	r1, [sp, #20]
   27a60:	cmp	r0, #0
   27a64:	ldrd	r8, [sp, #32]
   27a68:	str	ip, [r1, #64]	; 0x40
   27a6c:	mvn	r1, #0
   27a70:	str	lr, [r2, #4]
   27a74:	str	r4, [r2, #8]
   27a78:	str	sl, [r2, #12]
   27a7c:	strd	r8, [r2, #24]
   27a80:	ldrb	ip, [r3, #14]
   27a84:	bic	ip, ip, #12
   27a88:	strb	ip, [r3, #14]
   27a8c:	str	lr, [r2, #16]
   27a90:	str	lr, [r2, #20]
   27a94:	str	r1, [r2, #32]
   27a98:	str	r0, [r4]
   27a9c:	str	r0, [sl]
   27aa0:	beq	27af8 <__assert_fail@plt+0x16630>
   27aa4:	mov	r4, r0
   27aa8:	b	2796c <__assert_fail@plt+0x164a4>
   27aac:	mov	r0, #996	; 0x3e4
   27ab0:	str	r3, [sp, #28]
   27ab4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   27ab8:	cmp	r0, #0
   27abc:	beq	27af8 <__assert_fail@plt+0x16630>
   27ac0:	ldr	lr, [sp, #20]
   27ac4:	mov	ip, #1
   27ac8:	mov	r1, #4
   27acc:	ldr	r3, [sp, #28]
   27ad0:	ldr	r2, [lr, #56]	; 0x38
   27ad4:	str	r2, [r0]
   27ad8:	str	r0, [lr, #56]	; 0x38
   27adc:	b	27a40 <__assert_fail@plt+0x16578>
   27ae0:	cmp	r4, #0
   27ae4:	beq	27b18 <__assert_fail@plt+0x16650>
   27ae8:	mov	r0, r4
   27aec:	mov	r4, #0
   27af0:	bl	1ce74 <__assert_fail@plt+0xb9ac>
   27af4:	b	279f4 <__assert_fail@plt+0x1652c>
   27af8:	mov	r0, sl
   27afc:	bl	1ce74 <__assert_fail@plt+0xb9ac>
   27b00:	mov	r0, r4
   27b04:	mov	r4, #0
   27b08:	bl	1ce74 <__assert_fail@plt+0xb9ac>
   27b0c:	mov	r3, #12
   27b10:	str	r3, [r5]
   27b14:	b	279f4 <__assert_fail@plt+0x1652c>
   27b18:	mov	r4, #0
   27b1c:	b	279f4 <__assert_fail@plt+0x1652c>
   27b20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27b24:	mov	r5, r2
   27b28:	mov	r4, r0
   27b2c:	strd	r6, [sp, #8]
   27b30:	ldr	r6, [r1]
   27b34:	strd	r8, [sp, #16]
   27b38:	mov	r8, r3
   27b3c:	strd	sl, [sp, #24]
   27b40:	mov	sl, r1
   27b44:	str	lr, [sp, #32]
   27b48:	sub	sp, sp, #76	; 0x4c
   27b4c:	ldr	r9, [sp, #116]	; 0x74
   27b50:	ldr	ip, [r6, #84]	; 0x54
   27b54:	str	r9, [sp, #4]
   27b58:	str	ip, [sp, #16]
   27b5c:	ldr	ip, [sp, #112]	; 0x70
   27b60:	str	ip, [sp]
   27b64:	bl	27904 <__assert_fail@plt+0x1643c>
   27b68:	ldr	r2, [r9]
   27b6c:	clz	r3, r0
   27b70:	lsr	r3, r3, #5
   27b74:	cmp	r2, #0
   27b78:	moveq	r3, #0
   27b7c:	cmp	r3, #0
   27b80:	bne	286c8 <__assert_fail@plt+0x17200>
   27b84:	movw	r3, #1026	; 0x402
   27b88:	mov	r2, #65280	; 0xff00
   27b8c:	movt	r2, #65503	; 0xffdf
   27b90:	and	r3, r8, r3
   27b94:	str	r8, [sp, #12]
   27b98:	mov	r7, r0
   27b9c:	str	sl, [sp, #20]
   27ba0:	str	r3, [sp, #32]
   27ba4:	and	r3, r8, #4608	; 0x1200
   27ba8:	str	r3, [sp, #36]	; 0x24
   27bac:	and	r3, r8, #33792	; 0x8400
   27bb0:	str	r2, [sp, #40]	; 0x28
   27bb4:	str	r3, [sp, #44]	; 0x2c
   27bb8:	and	r3, r8, #8192	; 0x2000
   27bbc:	str	r9, [sp, #116]	; 0x74
   27bc0:	str	r3, [sp, #28]
   27bc4:	and	r3, r8, #8
   27bc8:	str	r3, [sp, #52]	; 0x34
   27bcc:	and	r3, r8, #2048	; 0x800
   27bd0:	str	r3, [sp, #56]	; 0x38
   27bd4:	and	r3, r8, #524288	; 0x80000
   27bd8:	str	r3, [sp, #48]	; 0x30
   27bdc:	and	r3, r8, #16384	; 0x4000
   27be0:	str	r3, [sp, #60]	; 0x3c
   27be4:	ldrb	r3, [r5, #4]
   27be8:	cmp	r3, #10
   27bec:	bne	27fa0 <__assert_fail@plt+0x16ad8>
   27bf0:	ldr	r0, [r4, #40]	; 0x28
   27bf4:	ldr	r3, [r4, #56]	; 0x38
   27bf8:	cmp	r3, r0
   27bfc:	ble	27f74 <__assert_fail@plt+0x16aac>
   27c00:	ldr	r1, [r4, #4]
   27c04:	add	fp, r0, #1
   27c08:	ldrb	ip, [r5, #6]
   27c0c:	ldr	r2, [r4, #80]	; 0x50
   27c10:	ldrb	sl, [r1, r0]
   27c14:	bic	ip, ip, #96	; 0x60
   27c18:	cmp	r2, #1
   27c1c:	strb	sl, [r5]
   27c20:	strb	ip, [r5, #6]
   27c24:	ble	27fc0 <__assert_fail@plt+0x16af8>
   27c28:	ldr	ip, [r4, #28]
   27c2c:	cmp	r0, ip
   27c30:	beq	27c44 <__assert_fail@plt+0x1677c>
   27c34:	ldr	ip, [r4, #8]
   27c38:	ldr	ip, [ip, r0, lsl #2]
   27c3c:	cmn	ip, #1
   27c40:	beq	28284 <__assert_fail@plt+0x16dbc>
   27c44:	cmp	sl, #92	; 0x5c
   27c48:	beq	27ffc <__assert_fail@plt+0x16b34>
   27c4c:	ldr	r2, [r4, #8]
   27c50:	mov	r1, #1
   27c54:	strb	r1, [r5, #4]
   27c58:	ldr	r2, [r2, r0, lsl #2]
   27c5c:	mov	r0, r2
   27c60:	str	r2, [sp, #24]
   27c64:	bl	113cc <iswalnum@plt>
   27c68:	ldr	r2, [sp, #24]
   27c6c:	adds	r0, r0, #0
   27c70:	movne	r0, #1
   27c74:	ldrb	r1, [r5, #6]
   27c78:	cmp	r2, #95	; 0x5f
   27c7c:	orreq	r0, r0, #1
   27c80:	bfi	r1, r0, #6, #1
   27c84:	strb	r1, [r5, #6]
   27c88:	sub	r3, sl, #10
   27c8c:	cmp	r3, #115	; 0x73
   27c90:	ldrls	pc, [pc, r3, lsl #2]
   27c94:	b	27e74 <__assert_fail@plt+0x169ac>
   27c98:	andeq	r8, r2, ip, ror #5
   27c9c:	andeq	r7, r2, r4, ror lr
   27ca0:	andeq	r7, r2, r4, ror lr
   27ca4:	andeq	r7, r2, r4, ror lr
   27ca8:	andeq	r7, r2, r4, ror lr
   27cac:	andeq	r7, r2, r4, ror lr
   27cb0:	andeq	r7, r2, r4, ror lr
   27cb4:	andeq	r7, r2, r4, ror lr
   27cb8:	andeq	r7, r2, r4, ror lr
   27cbc:	andeq	r7, r2, r4, ror lr
   27cc0:	andeq	r7, r2, r4, ror lr
   27cc4:	andeq	r7, r2, r4, ror lr
   27cc8:	andeq	r7, r2, r4, ror lr
   27ccc:	andeq	r7, r2, r4, ror lr
   27cd0:	andeq	r7, r2, r4, ror lr
   27cd4:	andeq	r7, r2, r4, ror lr
   27cd8:	andeq	r7, r2, r4, ror lr
   27cdc:	andeq	r7, r2, r4, ror lr
   27ce0:	andeq	r7, r2, r4, ror lr
   27ce4:	andeq	r7, r2, r4, ror lr
   27ce8:	andeq	r7, r2, r4, ror lr
   27cec:	andeq	r7, r2, r4, ror lr
   27cf0:	andeq	r7, r2, r4, ror lr
   27cf4:	andeq	r7, r2, r4, ror lr
   27cf8:	andeq	r7, r2, r4, ror lr
   27cfc:	andeq	r7, r2, r4, ror lr
   27d00:	andeq	r8, r2, ip, lsl #6
   27d04:	andeq	r7, r2, r4, ror lr
   27d08:	andeq	r7, r2, r4, ror lr
   27d0c:	andeq	r7, r2, r4, ror lr
   27d10:	andeq	r8, r2, ip, lsr r3
   27d14:	andeq	r8, r2, r8, asr r3
   27d18:	andeq	r8, r2, r8, ror r3
   27d1c:	andeq	r8, r2, r8, lsl #7
   27d20:	andeq	r7, r2, r4, ror lr
   27d24:	andeq	r7, r2, r4, ror lr
   27d28:	andeq	r8, r2, r4, lsr #7
   27d2c:	andeq	r7, r2, r4, ror lr
   27d30:	andeq	r7, r2, r4, ror lr
   27d34:	andeq	r7, r2, r4, ror lr
   27d38:	andeq	r7, r2, r4, ror lr
   27d3c:	andeq	r7, r2, r4, ror lr
   27d40:	andeq	r7, r2, r4, ror lr
   27d44:	andeq	r7, r2, r4, ror lr
   27d48:	andeq	r7, r2, r4, ror lr
   27d4c:	andeq	r7, r2, r4, ror lr
   27d50:	andeq	r7, r2, r4, ror lr
   27d54:	andeq	r7, r2, r4, ror lr
   27d58:	andeq	r7, r2, r4, ror lr
   27d5c:	andeq	r7, r2, r4, ror lr
   27d60:	andeq	r7, r2, r4, ror lr
   27d64:	andeq	r7, r2, r4, ror lr
   27d68:	andeq	r7, r2, r4, ror lr
   27d6c:			; <UNDEFINED> instruction: 0x000283b4
   27d70:	andeq	r7, r2, r4, ror lr
   27d74:	andeq	r7, r2, r4, ror lr
   27d78:	andeq	r7, r2, r4, ror lr
   27d7c:	andeq	r7, r2, r4, ror lr
   27d80:	andeq	r7, r2, r4, ror lr
   27d84:	andeq	r7, r2, r4, ror lr
   27d88:	andeq	r7, r2, r4, ror lr
   27d8c:	andeq	r7, r2, r4, ror lr
   27d90:	andeq	r7, r2, r4, ror lr
   27d94:	andeq	r7, r2, r4, ror lr
   27d98:	andeq	r7, r2, r4, ror lr
   27d9c:	andeq	r7, r2, r4, ror lr
   27da0:	andeq	r7, r2, r4, ror lr
   27da4:	andeq	r7, r2, r4, ror lr
   27da8:	andeq	r7, r2, r4, ror lr
   27dac:	andeq	r7, r2, r4, ror lr
   27db0:	andeq	r7, r2, r4, ror lr
   27db4:	andeq	r7, r2, r4, ror lr
   27db8:	andeq	r7, r2, r4, ror lr
   27dbc:	andeq	r7, r2, r4, ror lr
   27dc0:	andeq	r7, r2, r4, ror lr
   27dc4:	andeq	r7, r2, r4, ror lr
   27dc8:	andeq	r7, r2, r4, ror lr
   27dcc:	andeq	r7, r2, r4, ror lr
   27dd0:	andeq	r7, r2, r4, ror lr
   27dd4:	andeq	r7, r2, r4, ror lr
   27dd8:	andeq	r7, r2, r4, ror lr
   27ddc:	ldrdeq	r8, [r2], -r0
   27de0:	andeq	r7, r2, r4, ror lr
   27de4:	andeq	r7, r2, r4, ror lr
   27de8:	andeq	r8, r2, r0, ror #7
   27dec:	andeq	r7, r2, r4, ror lr
   27df0:	andeq	r7, r2, r4, ror lr
   27df4:	andeq	r7, r2, r4, ror lr
   27df8:	andeq	r7, r2, r4, ror lr
   27dfc:	andeq	r7, r2, r4, ror lr
   27e00:	andeq	r7, r2, r4, ror lr
   27e04:	andeq	r7, r2, r4, ror lr
   27e08:	andeq	r7, r2, r4, ror lr
   27e0c:	andeq	r7, r2, r4, ror lr
   27e10:	andeq	r7, r2, r4, ror lr
   27e14:	andeq	r7, r2, r4, ror lr
   27e18:	andeq	r7, r2, r4, ror lr
   27e1c:	andeq	r7, r2, r4, ror lr
   27e20:	andeq	r7, r2, r4, ror lr
   27e24:	andeq	r7, r2, r4, ror lr
   27e28:	andeq	r7, r2, r4, ror lr
   27e2c:	andeq	r7, r2, r4, ror lr
   27e30:	andeq	r7, r2, r4, ror lr
   27e34:	andeq	r7, r2, r4, ror lr
   27e38:	andeq	r7, r2, r4, ror lr
   27e3c:	andeq	r7, r2, r4, ror lr
   27e40:	andeq	r7, r2, r4, ror lr
   27e44:	andeq	r7, r2, r4, ror lr
   27e48:	andeq	r7, r2, r4, ror lr
   27e4c:	andeq	r7, r2, r4, ror lr
   27e50:	andeq	r7, r2, r4, ror lr
   27e54:	andeq	r7, r2, r4, ror lr
   27e58:	andeq	r7, r2, r4, ror lr
   27e5c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   27e60:	andeq	r7, r2, r8, ror #28
   27e64:	ldrdeq	r8, [r2], -r0
   27e68:	ldr	r3, [sp, #44]	; 0x2c
   27e6c:	cmp	r3, #32768	; 0x8000
   27e70:	beq	282f8 <__assert_fail@plt+0x16e30>
   27e74:	str	fp, [r4, #40]	; 0x28
   27e78:	ldr	fp, [r6, #84]	; 0x54
   27e7c:	mov	r2, r5
   27e80:	mov	r0, r4
   27e84:	ldr	ip, [sp, #16]
   27e88:	ldr	r3, [sp, #12]
   27e8c:	ldr	r1, [sp, #20]
   27e90:	str	ip, [r6, #84]	; 0x54
   27e94:	ldr	ip, [sp, #112]	; 0x70
   27e98:	str	ip, [sp]
   27e9c:	ldr	ip, [sp, #116]	; 0x74
   27ea0:	str	ip, [sp, #4]
   27ea4:	bl	27904 <__assert_fail@plt+0x1643c>
   27ea8:	ldr	r3, [sp, #116]	; 0x74
   27eac:	mov	sl, r0
   27eb0:	ldr	r2, [r3]
   27eb4:	clz	r3, r0
   27eb8:	lsr	r3, r3, #5
   27ebc:	cmp	r2, #0
   27ec0:	moveq	r3, #0
   27ec4:	cmp	r3, #0
   27ec8:	bne	286b0 <__assert_fail@plt+0x171e8>
   27ecc:	ldr	r3, [r6, #84]	; 0x54
   27ed0:	orr	fp, r3, fp
   27ed4:	str	fp, [r6, #84]	; 0x54
   27ed8:	mov	r2, #0
   27edc:	mov	r3, #0
   27ee0:	strd	r2, [sp, #64]	; 0x40
   27ee4:	ldr	fp, [r6, #64]	; 0x40
   27ee8:	cmp	fp, #31
   27eec:	beq	28018 <__assert_fail@plt+0x16b50>
   27ef0:	ldr	r0, [r6, #56]	; 0x38
   27ef4:	lsl	r3, fp, #5
   27ef8:	add	fp, fp, #1
   27efc:	add	ip, r3, #4
   27f00:	add	r2, r0, r3
   27f04:	mov	lr, #0
   27f08:	str	fp, [r6, #64]	; 0x40
   27f0c:	mov	fp, #10
   27f10:	add	r3, r3, #16
   27f14:	str	lr, [r2, #4]
   27f18:	add	r3, r0, r3
   27f1c:	cmp	r7, lr
   27f20:	str	r7, [r2, #8]
   27f24:	add	r0, r0, ip
   27f28:	mvn	ip, #0
   27f2c:	str	sl, [r2, #12]
   27f30:	strb	fp, [sp, #68]	; 0x44
   27f34:	ldrd	r8, [sp, #64]	; 0x40
   27f38:	strd	r8, [r2, #24]
   27f3c:	ldrb	fp, [r3, #14]
   27f40:	bic	fp, fp, #12
   27f44:	strb	fp, [r3, #14]
   27f48:	str	lr, [r2, #16]
   27f4c:	str	lr, [r2, #20]
   27f50:	str	ip, [r2, #32]
   27f54:	strne	r0, [r7]
   27f58:	cmp	sl, #0
   27f5c:	beq	27f88 <__assert_fail@plt+0x16ac0>
   27f60:	cmp	r0, #0
   27f64:	str	r0, [sl]
   27f68:	beq	27f90 <__assert_fail@plt+0x16ac8>
   27f6c:	mov	r7, r0
   27f70:	b	27be4 <__assert_fail@plt+0x1671c>
   27f74:	mov	r3, #2
   27f78:	mov	sl, #0
   27f7c:	strb	r3, [r5, #4]
   27f80:	str	r0, [r4, #40]	; 0x28
   27f84:	b	27ed8 <__assert_fail@plt+0x16a10>
   27f88:	cmp	r0, #0
   27f8c:	bne	27f6c <__assert_fail@plt+0x16aa4>
   27f90:	ldr	r9, [sp, #116]	; 0x74
   27f94:	mov	r3, #12
   27f98:	mov	r7, #0
   27f9c:	str	r3, [r9]
   27fa0:	mov	r0, r7
   27fa4:	add	sp, sp, #76	; 0x4c
   27fa8:	ldrd	r4, [sp]
   27fac:	ldrd	r6, [sp, #8]
   27fb0:	ldrd	r8, [sp, #16]
   27fb4:	ldrd	sl, [sp, #24]
   27fb8:	add	sp, sp, #32
   27fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   27fc0:	cmp	sl, #92	; 0x5c
   27fc4:	beq	27ffc <__assert_fail@plt+0x16b34>
   27fc8:	mov	r2, #1
   27fcc:	strb	r2, [r5, #4]
   27fd0:	bl	11378 <__ctype_b_loc@plt>
   27fd4:	ldr	r0, [r0]
   27fd8:	lsl	r2, sl, #1
   27fdc:	ldrb	r1, [r5, #6]
   27fe0:	ldrh	r2, [r0, r2]
   27fe4:	ubfx	r2, r2, #3, #1
   27fe8:	cmp	sl, #95	; 0x5f
   27fec:	orreq	r2, r2, #1
   27ff0:	bfi	r1, r2, #6, #1
   27ff4:	strb	r1, [r5, #6]
   27ff8:	b	27c88 <__assert_fail@plt+0x167c0>
   27ffc:	ldr	r3, [r4, #48]	; 0x30
   28000:	cmp	r3, fp
   28004:	bgt	28044 <__assert_fail@plt+0x16b7c>
   28008:	mov	r3, #36	; 0x24
   2800c:	strb	r3, [r5, #4]
   28010:	str	fp, [r4, #40]	; 0x28
   28014:	b	27e78 <__assert_fail@plt+0x169b0>
   28018:	mov	r0, #996	; 0x3e4
   2801c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   28020:	cmp	r0, #0
   28024:	beq	27f90 <__assert_fail@plt+0x16ac8>
   28028:	ldr	r2, [r6, #56]	; 0x38
   2802c:	mov	fp, #1
   28030:	mov	ip, #4
   28034:	mov	r3, #0
   28038:	str	r2, [r0]
   2803c:	str	r0, [r6, #56]	; 0x38
   28040:	b	27f00 <__assert_fail@plt+0x16a38>
   28044:	ldrb	r3, [r4, #75]	; 0x4b
   28048:	add	r0, r0, #2
   2804c:	mov	r8, r0
   28050:	cmp	r3, #0
   28054:	bne	2864c <__assert_fail@plt+0x17184>
   28058:	ldrb	sl, [r1, fp]
   2805c:	mov	r1, #1
   28060:	strb	sl, [r5]
   28064:	cmp	r2, r1
   28068:	strb	r1, [r5, #4]
   2806c:	ble	282a4 <__assert_fail@plt+0x16ddc>
   28070:	ldr	r0, [r4, #8]
   28074:	add	r0, r0, fp, lsl #2
   28078:	ldr	fp, [r0]
   2807c:	mov	r0, fp
   28080:	sub	fp, fp, #95	; 0x5f
   28084:	bl	113cc <iswalnum@plt>
   28088:	ldrb	r2, [r5, #6]
   2808c:	clz	fp, fp
   28090:	cmp	r0, #0
   28094:	lsr	fp, fp, #5
   28098:	movne	fp, #1
   2809c:	bfi	r2, fp, #6, #1
   280a0:	strb	r2, [r5, #6]
   280a4:	sub	r2, sl, #39	; 0x27
   280a8:	cmp	r2, #86	; 0x56
   280ac:	ldrls	pc, [pc, r2, lsl #2]
   280b0:	b	28248 <__assert_fail@plt+0x16d80>
   280b4:	andeq	r8, r2, ip, lsl #12
   280b8:	andeq	r8, r2, r0, lsr r6
   280bc:	andeq	r8, r2, r4, lsl r4
   280c0:	andeq	r8, r2, r8, asr #4
   280c4:	andeq	r8, r2, r4, lsr r4
   280c8:	andeq	r8, r2, r8, asr #4
   280cc:	andeq	r8, r2, r8, asr #4
   280d0:	andeq	r8, r2, r8, asr #4
   280d4:	andeq	r8, r2, r8, asr #4
   280d8:	andeq	r8, r2, r8, asr #4
   280dc:	andeq	r8, r2, r0, asr r4
   280e0:	andeq	r8, r2, r0, asr r4
   280e4:	andeq	r8, r2, r0, asr r4
   280e8:	andeq	r8, r2, r0, asr r4
   280ec:	andeq	r8, r2, r0, asr r4
   280f0:	andeq	r8, r2, r0, asr r4
   280f4:	andeq	r8, r2, r0, asr r4
   280f8:	andeq	r8, r2, r0, asr r4
   280fc:	andeq	r8, r2, r0, asr r4
   28100:	andeq	r8, r2, r8, asr #4
   28104:	andeq	r8, r2, r8, asr #4
   28108:	andeq	r8, r2, r4, ror r4
   2810c:	andeq	r8, r2, r8, asr #4
   28110:	muleq	r2, r8, r4
   28114:			; <UNDEFINED> instruction: 0x000284bc
   28118:	andeq	r8, r2, r8, asr #4
   2811c:	andeq	r8, r2, r8, asr #4
   28120:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28124:	andeq	r8, r2, r8, asr #4
   28128:	andeq	r8, r2, r8, asr #4
   2812c:	andeq	r8, r2, r8, asr #4
   28130:	andeq	r8, r2, r8, asr #4
   28134:	andeq	r8, r2, r8, asr #4
   28138:	andeq	r8, r2, r8, asr #4
   2813c:	andeq	r8, r2, r8, asr #4
   28140:	andeq	r8, r2, r8, asr #4
   28144:	andeq	r8, r2, r8, asr #4
   28148:	andeq	r8, r2, r8, asr #4
   2814c:	andeq	r8, r2, r8, asr #4
   28150:	andeq	r8, r2, r8, asr #4
   28154:	andeq	r8, r2, r8, asr #4
   28158:	andeq	r8, r2, r8, asr #4
   2815c:	andeq	r8, r2, r8, asr #4
   28160:	andeq	r8, r2, r8, asr #4
   28164:	strdeq	r8, [r2], -ip
   28168:	andeq	r8, r2, r8, asr #4
   2816c:	andeq	r8, r2, r8, asr #4
   28170:	andeq	r8, r2, r8, asr #4
   28174:	andeq	r8, r2, r8, lsl r5
   28178:	andeq	r8, r2, r8, asr #4
   2817c:	andeq	r8, r2, r8, asr #4
   28180:	andeq	r8, r2, r8, asr #4
   28184:	andeq	r8, r2, r8, asr #4
   28188:	andeq	r8, r2, r8, asr #4
   2818c:	andeq	r8, r2, r8, asr #4
   28190:	andeq	r8, r2, r8, asr #4
   28194:	andeq	r8, r2, r8, asr #4
   28198:	andeq	r8, r2, r4, lsr r5
   2819c:	andeq	r8, r2, r8, asr #4
   281a0:	andeq	r8, r2, r8, asr r5
   281a4:	andeq	r8, r2, r8, asr #4
   281a8:	andeq	r8, r2, r8, asr #4
   281ac:	andeq	r8, r2, r8, asr #4
   281b0:	andeq	r8, r2, r8, asr #4
   281b4:	andeq	r8, r2, r8, asr #4
   281b8:	andeq	r8, r2, r8, asr #4
   281bc:	andeq	r8, r2, r8, asr #4
   281c0:	andeq	r8, r2, r8, asr #4
   281c4:	andeq	r8, r2, r8, asr #4
   281c8:	andeq	r8, r2, r8, asr #4
   281cc:	andeq	r8, r2, r8, asr #4
   281d0:	andeq	r8, r2, r8, asr #4
   281d4:	andeq	r8, r2, r8, asr #4
   281d8:	andeq	r8, r2, r8, asr #4
   281dc:	andeq	r8, r2, r8, asr #4
   281e0:	andeq	r8, r2, r8, asr #4
   281e4:	andeq	r8, r2, ip, ror r5
   281e8:	andeq	r8, r2, r8, asr #4
   281ec:	andeq	r8, r2, r8, asr #4
   281f0:	andeq	r8, r2, r8, asr #4
   281f4:	muleq	r2, r8, r5
   281f8:	andeq	r8, r2, r8, asr #4
   281fc:	andeq	r8, r2, r8, asr #4
   28200:	andeq	r8, r2, r8, asr #4
   28204:			; <UNDEFINED> instruction: 0x000285b4
   28208:	ldrdeq	r8, [r2], -r0
   2820c:	strdeq	r8, [r2], -r0
   28210:	ldr	r3, [sp, #12]
   28214:	mov	r1, r4
   28218:	add	r0, sp, #64	; 0x40
   2821c:	str	fp, [r4, #40]	; 0x28
   28220:	orr	r2, r3, #8388608	; 0x800000
   28224:	bl	1bc08 <__assert_fail@plt+0xa740>
   28228:	ldrb	r3, [sp, #68]	; 0x44
   2822c:	ldr	fp, [r4, #40]	; 0x28
   28230:	sub	r3, r3, #9
   28234:	cmp	r3, #1
   28238:	sub	r3, fp, #1
   2823c:	mov	r8, fp
   28240:	str	r3, [r4, #40]	; 0x28
   28244:	bls	28324 <__assert_fail@plt+0x16e5c>
   28248:	ldrb	r3, [r5, #4]
   2824c:	str	r8, [r4, #40]	; 0x28
   28250:	and	r2, r3, #247	; 0xf7
   28254:	cmp	r2, #2
   28258:	moveq	sl, #0
   2825c:	beq	27ed8 <__assert_fail@plt+0x16a10>
   28260:	ldr	r2, [sp, #112]	; 0x70
   28264:	clz	r1, r2
   28268:	lsr	r1, r1, #5
   2826c:	cmp	r3, #9
   28270:	orrne	r1, r1, #1
   28274:	cmp	r1, #0
   28278:	moveq	sl, r1
   2827c:	beq	27ed8 <__assert_fail@plt+0x16a10>
   28280:	b	27e78 <__assert_fail@plt+0x169b0>
   28284:	ldr	r3, [r5, #4]
   28288:	ldr	r2, [sp, #40]	; 0x28
   2828c:	and	r3, r3, r2
   28290:	orr	r3, r3, #2097152	; 0x200000
   28294:	orr	r3, r3, #1
   28298:	str	r3, [r5, #4]
   2829c:	str	fp, [r4, #40]	; 0x28
   282a0:	b	27e78 <__assert_fail@plt+0x169b0>
   282a4:	bl	11378 <__ctype_b_loc@plt>
   282a8:	ldr	r0, [r0]
   282ac:	lsl	r2, sl, #1
   282b0:	ldrb	r1, [r5, #6]
   282b4:	ldrh	r2, [r0, r2]
   282b8:	ubfx	r2, r2, #3, #1
   282bc:	cmp	sl, #95	; 0x5f
   282c0:	orreq	r2, r2, #1
   282c4:	bfi	r1, r2, #6, #1
   282c8:	strb	r1, [r5, #6]
   282cc:	b	280a4 <__assert_fail@plt+0x16bdc>
   282d0:	ldr	r3, [sp, #36]	; 0x24
   282d4:	cmp	r3, #4608	; 0x1200
   282d8:	moveq	r3, #24
   282dc:	strbeq	r3, [r5, #4]
   282e0:	streq	fp, [r4, #40]	; 0x28
   282e4:	bne	27e74 <__assert_fail@plt+0x169ac>
   282e8:	b	27e78 <__assert_fail@plt+0x169b0>
   282ec:	ldr	r3, [sp, #56]	; 0x38
   282f0:	cmp	r3, #0
   282f4:	beq	27e74 <__assert_fail@plt+0x169ac>
   282f8:	mov	r3, #10
   282fc:	mov	sl, #0
   28300:	strb	r3, [r5, #4]
   28304:	str	fp, [r4, #40]	; 0x28
   28308:	b	27ed8 <__assert_fail@plt+0x16a10>
   2830c:	ldr	r3, [sp, #52]	; 0x34
   28310:	cmp	r3, #0
   28314:	bne	28324 <__assert_fail@plt+0x16e5c>
   28318:	ldr	r3, [r4, #48]	; 0x30
   2831c:	cmp	r3, fp
   28320:	bne	28210 <__assert_fail@plt+0x16d48>
   28324:	mov	r3, #12
   28328:	mov	r2, #32
   2832c:	str	r2, [r5]
   28330:	strb	r3, [r5, #4]
   28334:	str	fp, [r4, #40]	; 0x28
   28338:	b	27e78 <__assert_fail@plt+0x169b0>
   2833c:	ldr	r3, [sp, #28]
   28340:	cmp	r3, #0
   28344:	beq	27e74 <__assert_fail@plt+0x169ac>
   28348:	mov	r3, #8
   2834c:	strb	r3, [r5, #4]
   28350:	str	fp, [r4, #40]	; 0x28
   28354:	b	27e78 <__assert_fail@plt+0x169b0>
   28358:	ldr	r3, [sp, #28]
   2835c:	cmp	r3, #0
   28360:	beq	27e74 <__assert_fail@plt+0x169ac>
   28364:	mov	r3, #9
   28368:	strb	r3, [r5, #4]
   2836c:	mov	r3, #9
   28370:	str	fp, [r4, #40]	; 0x28
   28374:	b	28260 <__assert_fail@plt+0x16d98>
   28378:	mov	r3, #11
   2837c:	strb	r3, [r5, #4]
   28380:	str	fp, [r4, #40]	; 0x28
   28384:	b	27e78 <__assert_fail@plt+0x169b0>
   28388:	ldr	r3, [sp, #32]
   2838c:	cmp	r3, #0
   28390:	bne	27e74 <__assert_fail@plt+0x169ac>
   28394:	mov	r3, #18
   28398:	strb	r3, [r5, #4]
   2839c:	str	fp, [r4, #40]	; 0x28
   283a0:	b	27e78 <__assert_fail@plt+0x169b0>
   283a4:	mov	r3, #5
   283a8:	strb	r3, [r5, #4]
   283ac:	str	fp, [r4, #40]	; 0x28
   283b0:	b	27e78 <__assert_fail@plt+0x169b0>
   283b4:	ldr	r3, [sp, #32]
   283b8:	cmp	r3, #0
   283bc:	bne	27e74 <__assert_fail@plt+0x169ac>
   283c0:	mov	r3, #19
   283c4:	strb	r3, [r5, #4]
   283c8:	str	fp, [r4, #40]	; 0x28
   283cc:	b	27e78 <__assert_fail@plt+0x169b0>
   283d0:	mov	r3, #20
   283d4:	strb	r3, [r5, #4]
   283d8:	str	fp, [r4, #40]	; 0x28
   283dc:	b	27e78 <__assert_fail@plt+0x169b0>
   283e0:	mov	r3, #12
   283e4:	mov	r2, #16
   283e8:	str	r2, [r5]
   283ec:	strb	r3, [r5, #4]
   283f0:	str	fp, [r4, #40]	; 0x28
   283f4:	b	27e78 <__assert_fail@plt+0x169b0>
   283f8:	ldr	r3, [sp, #36]	; 0x24
   283fc:	cmp	r3, #4608	; 0x1200
   28400:	bne	27e74 <__assert_fail@plt+0x169ac>
   28404:	mov	r3, #23
   28408:	strb	r3, [r5, #4]
   2840c:	str	fp, [r4, #40]	; 0x28
   28410:	b	27e78 <__assert_fail@plt+0x169b0>
   28414:	ldr	r3, [sp, #28]
   28418:	cmp	r3, #0
   2841c:	bne	28248 <__assert_fail@plt+0x16d80>
   28420:	mov	r3, #9
   28424:	strb	r3, [r5, #4]
   28428:	mov	r3, #9
   2842c:	str	r8, [r4, #40]	; 0x28
   28430:	b	28260 <__assert_fail@plt+0x16d98>
   28434:	ldr	r3, [sp, #32]
   28438:	cmp	r3, #2
   2843c:	bne	28248 <__assert_fail@plt+0x16d80>
   28440:	mov	r3, #18
   28444:	strb	r3, [r5, #4]
   28448:	str	r8, [r4, #40]	; 0x28
   2844c:	b	27e78 <__assert_fail@plt+0x169b0>
   28450:	ldr	r3, [sp, #60]	; 0x3c
   28454:	cmp	r3, #0
   28458:	bne	28248 <__assert_fail@plt+0x16d80>
   2845c:	sub	r3, sl, #49	; 0x31
   28460:	mov	r2, #4
   28464:	str	r3, [r5]
   28468:	strb	r2, [r5, #4]
   2846c:	str	r8, [r4, #40]	; 0x28
   28470:	b	27e78 <__assert_fail@plt+0x169b0>
   28474:	ldr	r3, [sp, #48]	; 0x30
   28478:	cmp	r3, #0
   2847c:	bne	28248 <__assert_fail@plt+0x16d80>
   28480:	mov	r3, #12
   28484:	mov	r2, #6
   28488:	str	r2, [r5]
   2848c:	strb	r3, [r5, #4]
   28490:	str	r8, [r4, #40]	; 0x28
   28494:	b	27e78 <__assert_fail@plt+0x169b0>
   28498:	ldr	r3, [sp, #48]	; 0x30
   2849c:	cmp	r3, #0
   284a0:	bne	28248 <__assert_fail@plt+0x16d80>
   284a4:	mov	r3, #12
   284a8:	mov	r2, #9
   284ac:	str	r2, [r5]
   284b0:	strb	r3, [r5, #4]
   284b4:	str	r8, [r4, #40]	; 0x28
   284b8:	b	27e78 <__assert_fail@plt+0x169b0>
   284bc:	ldr	r3, [sp, #32]
   284c0:	cmp	r3, #2
   284c4:	bne	28248 <__assert_fail@plt+0x16d80>
   284c8:	mov	r3, #19
   284cc:	strb	r3, [r5, #4]
   284d0:	str	r8, [r4, #40]	; 0x28
   284d4:	b	27e78 <__assert_fail@plt+0x169b0>
   284d8:	ldr	r3, [sp, #48]	; 0x30
   284dc:	cmp	r3, #0
   284e0:	bne	28248 <__assert_fail@plt+0x16d80>
   284e4:	mov	r3, #12
   284e8:	mov	r2, #512	; 0x200
   284ec:	str	r2, [r5]
   284f0:	strb	r3, [r5, #4]
   284f4:	str	r8, [r4, #40]	; 0x28
   284f8:	b	27e78 <__assert_fail@plt+0x169b0>
   284fc:	ldr	r3, [sp, #48]	; 0x30
   28500:	cmp	r3, #0
   28504:	bne	28248 <__assert_fail@plt+0x16d80>
   28508:	mov	r3, #35	; 0x23
   2850c:	strb	r3, [r5, #4]
   28510:	str	r8, [r4, #40]	; 0x28
   28514:	b	27e78 <__assert_fail@plt+0x169b0>
   28518:	ldr	r3, [sp, #48]	; 0x30
   2851c:	cmp	r3, #0
   28520:	bne	28248 <__assert_fail@plt+0x16d80>
   28524:	mov	r3, #33	; 0x21
   28528:	strb	r3, [r5, #4]
   2852c:	str	r8, [r4, #40]	; 0x28
   28530:	b	27e78 <__assert_fail@plt+0x169b0>
   28534:	ldr	r3, [sp, #48]	; 0x30
   28538:	cmp	r3, #0
   2853c:	bne	28248 <__assert_fail@plt+0x16d80>
   28540:	mov	r3, #12
   28544:	mov	r2, #64	; 0x40
   28548:	str	r2, [r5]
   2854c:	strb	r3, [r5, #4]
   28550:	str	r8, [r4, #40]	; 0x28
   28554:	b	27e78 <__assert_fail@plt+0x169b0>
   28558:	ldr	r3, [sp, #48]	; 0x30
   2855c:	cmp	r3, #0
   28560:	bne	28248 <__assert_fail@plt+0x16d80>
   28564:	mov	r3, #12
   28568:	mov	r2, #256	; 0x100
   2856c:	str	r2, [r5]
   28570:	strb	r3, [r5, #4]
   28574:	str	r8, [r4, #40]	; 0x28
   28578:	b	27e78 <__assert_fail@plt+0x169b0>
   2857c:	ldr	r3, [sp, #48]	; 0x30
   28580:	cmp	r3, #0
   28584:	bne	28248 <__assert_fail@plt+0x16d80>
   28588:	mov	r3, #34	; 0x22
   2858c:	strb	r3, [r5, #4]
   28590:	str	r8, [r4, #40]	; 0x28
   28594:	b	27e78 <__assert_fail@plt+0x169b0>
   28598:	ldr	r3, [sp, #48]	; 0x30
   2859c:	cmp	r3, #0
   285a0:	bne	28248 <__assert_fail@plt+0x16d80>
   285a4:	mov	r3, #32
   285a8:	strb	r3, [r5, #4]
   285ac:	str	r8, [r4, #40]	; 0x28
   285b0:	b	27e78 <__assert_fail@plt+0x169b0>
   285b4:	ldr	r3, [sp, #36]	; 0x24
   285b8:	cmp	r3, #512	; 0x200
   285bc:	bne	28248 <__assert_fail@plt+0x16d80>
   285c0:	mov	r3, #23
   285c4:	strb	r3, [r5, #4]
   285c8:	str	r8, [r4, #40]	; 0x28
   285cc:	b	27e78 <__assert_fail@plt+0x169b0>
   285d0:	ldr	r3, [sp, #44]	; 0x2c
   285d4:	cmp	r3, #0
   285d8:	bne	28248 <__assert_fail@plt+0x16d80>
   285dc:	mov	sl, r3
   285e0:	mov	r3, #10
   285e4:	strb	r3, [r5, #4]
   285e8:	str	r8, [r4, #40]	; 0x28
   285ec:	b	27ed8 <__assert_fail@plt+0x16a10>
   285f0:	ldr	r3, [sp, #36]	; 0x24
   285f4:	cmp	r3, #512	; 0x200
   285f8:	bne	28248 <__assert_fail@plt+0x16d80>
   285fc:	mov	r3, #24
   28600:	strb	r3, [r5, #4]
   28604:	str	r8, [r4, #40]	; 0x28
   28608:	b	27e78 <__assert_fail@plt+0x169b0>
   2860c:	ldr	r3, [sp, #48]	; 0x30
   28610:	cmp	r3, #0
   28614:	bne	28248 <__assert_fail@plt+0x16d80>
   28618:	mov	r3, #12
   2861c:	mov	r2, #128	; 0x80
   28620:	str	r2, [r5]
   28624:	strb	r3, [r5, #4]
   28628:	str	r8, [r4, #40]	; 0x28
   2862c:	b	27e78 <__assert_fail@plt+0x169b0>
   28630:	ldr	r3, [sp, #28]
   28634:	cmp	r3, #0
   28638:	bne	28248 <__assert_fail@plt+0x16d80>
   2863c:	mov	r3, #8
   28640:	strb	r3, [r5, #4]
   28644:	str	r8, [r4, #40]	; 0x28
   28648:	b	27e78 <__assert_fail@plt+0x169b0>
   2864c:	cmp	r2, #1
   28650:	ble	28680 <__assert_fail@plt+0x171b8>
   28654:	ldr	r0, [r4, #8]
   28658:	ldr	r3, [r0, fp, lsl #2]
   2865c:	add	r0, r0, fp, lsl #2
   28660:	cmn	r3, #1
   28664:	beq	286dc <__assert_fail@plt+0x17214>
   28668:	ldr	r3, [r4, #28]
   2866c:	cmp	r3, r8
   28670:	beq	28680 <__assert_fail@plt+0x171b8>
   28674:	ldr	r3, [r0, #4]
   28678:	cmn	r3, #1
   2867c:	beq	286dc <__assert_fail@plt+0x17214>
   28680:	ldrb	ip, [r4, #76]	; 0x4c
   28684:	ldr	r0, [r4]
   28688:	ldr	r3, [r4, #24]
   2868c:	cmp	ip, #0
   28690:	beq	286d0 <__assert_fail@plt+0x17208>
   28694:	ldr	ip, [r4, #12]
   28698:	add	r3, r0, r3
   2869c:	ldr	r0, [ip, fp, lsl #2]
   286a0:	ldrb	sl, [r3, r0]
   286a4:	tst	sl, #128	; 0x80
   286a8:	beq	2805c <__assert_fail@plt+0x16b94>
   286ac:	b	28058 <__assert_fail@plt+0x16b90>
   286b0:	cmp	r7, #0
   286b4:	beq	286c8 <__assert_fail@plt+0x17200>
   286b8:	mov	r0, r7
   286bc:	mov	r7, #0
   286c0:	bl	1ce74 <__assert_fail@plt+0xb9ac>
   286c4:	b	27fa0 <__assert_fail@plt+0x16ad8>
   286c8:	mov	r7, #0
   286cc:	b	27fa0 <__assert_fail@plt+0x16ad8>
   286d0:	add	r0, r0, fp
   286d4:	ldrb	sl, [r0, r3]
   286d8:	b	2805c <__assert_fail@plt+0x16b94>
   286dc:	ldrb	sl, [r1, fp]
   286e0:	mov	r2, #1
   286e4:	strb	sl, [r5]
   286e8:	strb	r2, [r5, #4]
   286ec:	b	28078 <__assert_fail@plt+0x16bb0>
   286f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   286f4:	mov	r5, r2
   286f8:	strd	r6, [sp, #8]
   286fc:	mov	r6, r0
   28700:	mov	r7, r3
   28704:	ldrb	r3, [r0, #28]
   28708:	mov	r0, #0
   2870c:	strd	r8, [sp, #16]
   28710:	mov	r8, r1
   28714:	strd	sl, [sp, #24]
   28718:	ldr	r2, [r6, #4]
   2871c:	str	lr, [sp, #32]
   28720:	sub	sp, sp, #148	; 0x94
   28724:	bic	r3, r3, #111	; 0x6f
   28728:	str	r0, [r6, #8]
   2872c:	str	r7, [r6, #12]
   28730:	str	r0, [r6, #24]
   28734:	cmp	r2, #159	; 0x9f
   28738:	strb	r3, [r6, #28]
   2873c:	str	r0, [sp, #36]	; 0x24
   28740:	ldr	r4, [r6]
   28744:	bls	29a44 <__assert_fail@plt+0x1857c>
   28748:	mov	r3, #160	; 0xa0
   2874c:	mov	r1, #0
   28750:	mov	r2, r3
   28754:	mov	r0, r4
   28758:	str	r3, [r6, #8]
   2875c:	bl	113e4 <memset@plt>
   28760:	movw	r3, #43689	; 0xaaa9
   28764:	movt	r3, #2730	; 0xaaa
   28768:	mov	r2, #31
   2876c:	cmp	r5, r3
   28770:	str	r2, [r4, #64]	; 0x40
   28774:	bhi	28f4c <__assert_fail@plt+0x17a84>
   28778:	add	r9, r5, #1
   2877c:	lsl	r0, r9, #3
   28780:	str	r9, [r4, #4]
   28784:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   28788:	cmp	r5, #0
   2878c:	str	r0, [r4]
   28790:	beq	29a68 <__assert_fail@plt+0x185a0>
   28794:	mov	r1, #1
   28798:	lsl	r1, r1, #1
   2879c:	cmp	r5, r1
   287a0:	bcs	28798 <__assert_fail@plt+0x172d0>
   287a4:	sub	sl, r1, #1
   287a8:	mov	r0, #12
   287ac:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   287b0:	str	r0, [r4, #32]
   287b4:	str	sl, [r4, #68]	; 0x44
   287b8:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   287bc:	str	r0, [r4, #92]	; 0x5c
   287c0:	mov	r0, #14
   287c4:	bl	11474 <nl_langinfo@plt>
   287c8:	ldrb	r3, [r0]
   287cc:	and	r3, r3, #223	; 0xdf
   287d0:	cmp	r3, #85	; 0x55
   287d4:	bne	2882c <__assert_fail@plt+0x17364>
   287d8:	ldrb	r3, [r0, #1]
   287dc:	and	r3, r3, #223	; 0xdf
   287e0:	cmp	r3, #84	; 0x54
   287e4:	bne	2882c <__assert_fail@plt+0x17364>
   287e8:	ldrb	r3, [r0, #2]
   287ec:	and	r3, r3, #223	; 0xdf
   287f0:	cmp	r3, #70	; 0x46
   287f4:	bne	2882c <__assert_fail@plt+0x17364>
   287f8:	ldrb	r3, [r0, #3]
   287fc:	movw	r1, #53464	; 0xd0d8
   28800:	movt	r1, #2
   28804:	cmp	r3, #45	; 0x2d
   28808:	moveq	r3, #4
   2880c:	movne	r3, #3
   28810:	add	r0, r0, r3
   28814:	bl	1118c <strcmp@plt>
   28818:	cmp	r0, #0
   2881c:	bne	2882c <__assert_fail@plt+0x17364>
   28820:	ldrb	r3, [r4, #88]	; 0x58
   28824:	orr	r3, r3, #4
   28828:	strb	r3, [r4, #88]	; 0x58
   2882c:	ldrb	r3, [r4, #88]	; 0x58
   28830:	ldr	r2, [r4, #92]	; 0x5c
   28834:	bfc	r3, #3, #1
   28838:	cmp	r2, #1
   2883c:	strb	r3, [r4, #88]	; 0x58
   28840:	ble	2885c <__assert_fail@plt+0x17394>
   28844:	uxtb	sl, r3
   28848:	ands	sl, sl, #4
   2884c:	beq	28fa8 <__assert_fail@plt+0x17ae0>
   28850:	movw	r3, #52880	; 0xce90
   28854:	movt	r3, #2
   28858:	str	r3, [r4, #60]	; 0x3c
   2885c:	ldr	r3, [r4]
   28860:	cmp	r3, #0
   28864:	beq	28f4c <__assert_fail@plt+0x17a84>
   28868:	ldr	r3, [r4, #32]
   2886c:	cmp	r3, #0
   28870:	beq	28f4c <__assert_fail@plt+0x17a84>
   28874:	mov	r1, #0
   28878:	movw	r2, #0
   2887c:	movt	r2, #0
   28880:	mov	r3, #1
   28884:	cmp	r2, r1
   28888:	str	r1, [sp, #36]	; 0x24
   2888c:	mov	r1, #1
   28890:	moveq	r3, r2
   28894:	movw	r2, #0
   28898:	movt	r2, #0
   2889c:	cmp	r2, #0
   288a0:	moveq	r1, r2
   288a4:	orr	r3, r3, r1
   288a8:	ands	r3, r3, #255	; 0xff
   288ac:	str	r3, [sp, #16]
   288b0:	beq	288d4 <__assert_fail@plt+0x1740c>
   288b4:	mov	r1, #0
   288b8:	add	r0, r4, #136	; 0x88
   288bc:	bl	1121c <pthread_mutex_init@plt>
   288c0:	cmp	r0, #0
   288c4:	bne	28f4c <__assert_fail@plt+0x17a84>
   288c8:	ldr	r3, [sp, #36]	; 0x24
   288cc:	cmp	r3, #0
   288d0:	bne	28f54 <__assert_fail@plt+0x17a8c>
   288d4:	and	r3, r7, #4194304	; 0x400000
   288d8:	mov	r2, #76	; 0x4c
   288dc:	ldr	sl, [r6, #20]
   288e0:	mov	r1, #0
   288e4:	add	r0, sp, #64	; 0x40
   288e8:	mov	fp, r3
   288ec:	str	r3, [sp, #12]
   288f0:	bl	113e4 <memset@plt>
   288f4:	ldrb	r3, [r4, #88]	; 0x58
   288f8:	adds	ip, fp, #0
   288fc:	orr	fp, sl, fp
   28900:	movne	ip, #1
   28904:	str	r8, [sp, #60]	; 0x3c
   28908:	ldr	r1, [r4, #92]	; 0x5c
   2890c:	adds	r2, fp, #0
   28910:	movne	r2, #1
   28914:	cmp	r5, #0
   28918:	str	r5, [sp, #104]	; 0x68
   2891c:	str	r5, [sp, #108]	; 0x6c
   28920:	ubfx	r0, r3, #2, #1
   28924:	str	r5, [sp, #112]	; 0x70
   28928:	ubfx	r3, r3, #3, #1
   2892c:	str	r5, [sp, #116]	; 0x74
   28930:	str	sl, [sp, #124]	; 0x7c
   28934:	strb	ip, [sp, #132]	; 0x84
   28938:	strb	r0, [sp, #133]	; 0x85
   2893c:	strb	r3, [sp, #134]	; 0x86
   28940:	strb	r2, [sp, #135]	; 0x87
   28944:	str	r1, [sp, #140]	; 0x8c
   28948:	bne	28f88 <__assert_fail@plt+0x17ac0>
   2894c:	cmp	r2, #0
   28950:	ldr	r3, [sp, #12]
   28954:	ldrne	r8, [sp, #64]	; 0x40
   28958:	cmp	r3, #0
   2895c:	str	r8, [sp, #64]	; 0x40
   28960:	beq	28a2c <__assert_fail@plt+0x17564>
   28964:	cmp	r1, #1
   28968:	ble	299b8 <__assert_fail@plt+0x184f0>
   2896c:	add	r0, sp, #60	; 0x3c
   28970:	bl	19068 <__assert_fail@plt+0x7ba0>
   28974:	cmp	r0, #0
   28978:	bne	289b4 <__assert_fail@plt+0x174ec>
   2897c:	ldr	r3, [sp, #92]	; 0x5c
   28980:	cmp	r5, r3
   28984:	ble	29ae4 <__assert_fail@plt+0x1861c>
   28988:	ldr	r3, [sp, #88]	; 0x58
   2898c:	ldr	r2, [r4, #92]	; 0x5c
   28990:	ldr	r1, [sp, #96]	; 0x60
   28994:	add	r3, r3, r2
   28998:	cmp	r1, r3
   2899c:	bgt	29ae4 <__assert_fail@plt+0x1861c>
   289a0:	lsl	r1, r1, #1
   289a4:	add	r0, sp, #60	; 0x3c
   289a8:	bl	18c84 <__assert_fail@plt+0x77bc>
   289ac:	cmp	r0, #0
   289b0:	beq	2896c <__assert_fail@plt+0x174a4>
   289b4:	ldr	r5, [r6]
   289b8:	str	r0, [sp, #36]	; 0x24
   289bc:	ldr	r0, [r5, #56]	; 0x38
   289c0:	cmp	r0, #0
   289c4:	beq	289d8 <__assert_fail@plt+0x17510>
   289c8:	ldr	r7, [r0]
   289cc:	bl	14484 <__assert_fail@plt+0x2fbc>
   289d0:	subs	r0, r7, #0
   289d4:	bne	289c8 <__assert_fail@plt+0x17500>
   289d8:	mov	r3, #31
   289dc:	mov	r7, #0
   289e0:	ldr	r0, [r5, #16]
   289e4:	str	r7, [r5, #52]	; 0x34
   289e8:	str	r7, [r5, #56]	; 0x38
   289ec:	str	r3, [r5, #64]	; 0x40
   289f0:	bl	14484 <__assert_fail@plt+0x2fbc>
   289f4:	str	r7, [r5, #16]
   289f8:	ldr	r0, [sp, #68]	; 0x44
   289fc:	bl	14484 <__assert_fail@plt+0x2fbc>
   28a00:	ldr	r0, [sp, #72]	; 0x48
   28a04:	bl	14484 <__assert_fail@plt+0x2fbc>
   28a08:	ldrb	r3, [sp, #135]	; 0x87
   28a0c:	cmp	r3, r7
   28a10:	bne	29a80 <__assert_fail@plt+0x185b8>
   28a14:	ldr	r3, [sp, #16]
   28a18:	cmp	r3, #0
   28a1c:	beq	28f54 <__assert_fail@plt+0x17a8c>
   28a20:	add	r0, r4, #136	; 0x88
   28a24:	bl	111b0 <pthread_mutex_destroy@plt>
   28a28:	b	28f54 <__assert_fail@plt+0x17a8c>
   28a2c:	cmp	r1, #1
   28a30:	bgt	298bc <__assert_fail@plt+0x183f4>
   28a34:	cmp	fp, #0
   28a38:	ldr	r1, [sp, #96]	; 0x60
   28a3c:	beq	29058 <__assert_fail@plt+0x17b90>
   28a40:	ldr	r3, [sp, #88]	; 0x58
   28a44:	ldr	r2, [sp, #108]	; 0x6c
   28a48:	cmp	r1, r2
   28a4c:	movge	r1, r2
   28a50:	cmp	r1, r3
   28a54:	ble	29c28 <__assert_fail@plt+0x18760>
   28a58:	ldr	r0, [sp, #60]	; 0x3c
   28a5c:	add	r2, r3, #1
   28a60:	cmp	r1, r2
   28a64:	ldr	lr, [sp, #84]	; 0x54
   28a68:	ldr	ip, [sp, #124]	; 0x7c
   28a6c:	add	r0, r0, r3
   28a70:	ldrb	r0, [r0, lr]
   28a74:	ldrb	r0, [ip, r0]
   28a78:	strb	r0, [r8, r3]
   28a7c:	ble	28aac <__assert_fail@plt+0x175e4>
   28a80:	ldr	r3, [sp, #60]	; 0x3c
   28a84:	ldr	r0, [sp, #84]	; 0x54
   28a88:	ldr	ip, [sp, #124]	; 0x7c
   28a8c:	add	r3, r3, r2
   28a90:	ldrb	r0, [r3, r0]
   28a94:	ldr	r3, [sp, #64]	; 0x40
   28a98:	ldrb	r0, [ip, r0]
   28a9c:	strb	r0, [r3, r2]
   28aa0:	add	r2, r2, #1
   28aa4:	cmp	r1, r2
   28aa8:	bne	28a80 <__assert_fail@plt+0x175b8>
   28aac:	mov	r3, #0
   28ab0:	str	r3, [sp, #36]	; 0x24
   28ab4:	str	r1, [sp, #88]	; 0x58
   28ab8:	str	r1, [sp, #92]	; 0x5c
   28abc:	ldr	r5, [r6]
   28ac0:	mov	r8, #0
   28ac4:	orr	r2, r7, #8388608	; 0x800000
   28ac8:	add	r1, sp, #60	; 0x3c
   28acc:	add	r0, sp, #40	; 0x28
   28ad0:	str	r8, [r6, #24]
   28ad4:	str	r7, [r5, #128]	; 0x80
   28ad8:	bl	1bc08 <__assert_fail@plt+0xa740>
   28adc:	ldr	ip, [sp, #100]	; 0x64
   28ae0:	add	r1, sp, #36	; 0x24
   28ae4:	mov	r3, r7
   28ae8:	add	r2, sp, #40	; 0x28
   28aec:	str	r8, [sp]
   28af0:	str	r1, [sp, #4]
   28af4:	mov	r1, r6
   28af8:	add	ip, ip, r0
   28afc:	add	r0, sp, #60	; 0x3c
   28b00:	str	ip, [sp, #100]	; 0x64
   28b04:	bl	27b20 <__assert_fail@plt+0x16658>
   28b08:	ldr	sl, [sp, #36]	; 0x24
   28b0c:	clz	r3, r0
   28b10:	mov	r9, r0
   28b14:	lsr	r3, r3, #5
   28b18:	cmp	sl, r8
   28b1c:	movne	sl, r3
   28b20:	moveq	sl, r8
   28b24:	cmp	sl, r8
   28b28:	bne	29c40 <__assert_fail@plt+0x18778>
   28b2c:	mov	r2, #0
   28b30:	mov	r3, #0
   28b34:	strd	r2, [sp, #48]	; 0x30
   28b38:	ldr	r2, [r5, #64]	; 0x40
   28b3c:	cmp	r2, #31
   28b40:	beq	29ab0 <__assert_fail@plt+0x185e8>
   28b44:	ldr	r7, [r5, #56]	; 0x38
   28b48:	lsl	r3, r2, #5
   28b4c:	add	r2, r2, #1
   28b50:	add	r0, r3, #4
   28b54:	add	ip, r7, r3
   28b58:	mov	lr, #0
   28b5c:	str	r2, [r5, #64]	; 0x40
   28b60:	mov	r2, #2
   28b64:	add	r3, r3, #16
   28b68:	str	lr, [ip, #4]
   28b6c:	add	r1, r7, r3
   28b70:	adds	r7, r7, r0
   28b74:	str	lr, [ip, #8]
   28b78:	mvn	r0, #0
   28b7c:	moveq	r8, #1
   28b80:	str	lr, [ip, #12]
   28b84:	movne	r8, lr
   28b88:	cmp	r9, lr
   28b8c:	strb	r2, [sp, #52]	; 0x34
   28b90:	ldrd	r2, [sp, #48]	; 0x30
   28b94:	strd	r2, [ip, #24]
   28b98:	ldrb	r3, [r1, #14]
   28b9c:	bic	r3, r3, #12
   28ba0:	strb	r3, [r1, #14]
   28ba4:	str	lr, [ip, #16]
   28ba8:	str	lr, [ip, #20]
   28bac:	str	r0, [ip, #32]
   28bb0:	beq	28c44 <__assert_fail@plt+0x1777c>
   28bb4:	mov	r3, #0
   28bb8:	mov	r2, #0
   28bbc:	strd	r2, [sp, #48]	; 0x30
   28bc0:	ldr	r3, [r5, #64]	; 0x40
   28bc4:	cmp	r3, #31
   28bc8:	beq	29bdc <__assert_fail@plt+0x18714>
   28bcc:	ldr	r0, [r5, #56]	; 0x38
   28bd0:	lsl	r1, r3, #5
   28bd4:	add	r3, r3, #1
   28bd8:	add	r2, r1, #4
   28bdc:	add	ip, r0, r1
   28be0:	mov	lr, #0
   28be4:	str	r3, [r5, #64]	; 0x40
   28be8:	mov	r3, #16
   28bec:	mvn	r5, #0
   28bf0:	add	r1, r1, r3
   28bf4:	str	lr, [ip, #4]
   28bf8:	str	r9, [ip, #8]
   28bfc:	add	r1, r0, r1
   28c00:	add	r0, r0, r2
   28c04:	str	r7, [ip, #12]
   28c08:	cmp	r0, lr
   28c0c:	orreq	r8, r8, #1
   28c10:	cmp	r7, lr
   28c14:	strb	r3, [sp, #52]	; 0x34
   28c18:	ldrd	r2, [sp, #48]	; 0x30
   28c1c:	strd	r2, [ip, #24]
   28c20:	ldrb	r3, [r1, #14]
   28c24:	bic	r3, r3, #12
   28c28:	strb	r3, [r1, #14]
   28c2c:	str	lr, [ip, #16]
   28c30:	str	lr, [ip, #20]
   28c34:	str	r5, [ip, #32]
   28c38:	str	r0, [r9]
   28c3c:	strne	r0, [r7]
   28c40:	mov	r7, r0
   28c44:	cmp	r8, #0
   28c48:	ldr	r5, [r6]
   28c4c:	bne	29a9c <__assert_fail@plt+0x185d4>
   28c50:	ldr	r0, [r5, #4]
   28c54:	str	r7, [r4, #52]	; 0x34
   28c58:	lsl	r0, r0, #2
   28c5c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   28c60:	ldr	r3, [r5, #4]
   28c64:	str	r0, [r5, #12]
   28c68:	lsl	r0, r3, #2
   28c6c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   28c70:	ldr	r3, [r5, #4]
   28c74:	str	r0, [r5, #16]
   28c78:	add	r3, r3, r3, lsl #1
   28c7c:	lsl	r0, r3, #2
   28c80:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   28c84:	ldr	r3, [r5, #4]
   28c88:	str	r0, [r5, #20]
   28c8c:	add	r3, r3, r3, lsl #1
   28c90:	lsl	r0, r3, #2
   28c94:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   28c98:	ldr	r3, [r5, #12]
   28c9c:	str	r0, [r5, #24]
   28ca0:	cmp	r3, #0
   28ca4:	beq	290b4 <__assert_fail@plt+0x17bec>
   28ca8:	ldr	r3, [r5, #16]
   28cac:	cmp	r3, #0
   28cb0:	beq	290b4 <__assert_fail@plt+0x17bec>
   28cb4:	ldr	r3, [r5, #20]
   28cb8:	cmp	r3, #0
   28cbc:	beq	290b4 <__assert_fail@plt+0x17bec>
   28cc0:	cmp	r0, #0
   28cc4:	beq	290b4 <__assert_fail@plt+0x17bec>
   28cc8:	ldr	r0, [r6, #24]
   28ccc:	lsl	r0, r0, #2
   28cd0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   28cd4:	cmp	r0, #0
   28cd8:	str	r0, [r5, #132]	; 0x84
   28cdc:	beq	2993c <__assert_fail@plt+0x18474>
   28ce0:	ldr	ip, [r6, #24]
   28ce4:	cmp	ip, #0
   28ce8:	beq	28d98 <__assert_fail@plt+0x178d0>
   28cec:	sub	r3, ip, #1
   28cf0:	ubfx	r2, r0, #2, #1
   28cf4:	cmp	r3, #4
   28cf8:	bls	29c10 <__assert_fail@plt+0x18748>
   28cfc:	cmp	r2, #0
   28d00:	beq	29a74 <__assert_fail@plt+0x185ac>
   28d04:	mov	r7, r2
   28d08:	mov	r9, #1
   28d0c:	str	r8, [r0]
   28d10:	sub	r8, ip, r2
   28d14:	add	r2, r0, r2, lsl #2
   28d18:	mov	lr, r9
   28d1c:	lsr	r3, r8, #1
   28d20:	add	r1, r9, #1
   28d24:	add	r3, r2, r3, lsl #3
   28d28:	add	r2, r2, #8
   28d2c:	str	lr, [r2, #-8]
   28d30:	add	lr, lr, #2
   28d34:	str	r1, [r2, #-4]
   28d38:	cmp	r3, r2
   28d3c:	add	r1, r1, #2
   28d40:	bne	28d28 <__assert_fail@plt+0x17860>
   28d44:	bic	r3, r8, #1
   28d48:	cmp	r3, r8
   28d4c:	add	r7, r3, r7
   28d50:	add	r3, r3, r9
   28d54:	beq	28d98 <__assert_fail@plt+0x178d0>
   28d58:	add	r2, r3, #1
   28d5c:	str	r3, [r0, r7, lsl #2]
   28d60:	cmp	ip, r2
   28d64:	bls	28d98 <__assert_fail@plt+0x178d0>
   28d68:	add	r1, r3, #2
   28d6c:	str	r2, [r0, r2, lsl #2]
   28d70:	cmp	ip, r1
   28d74:	bls	28d98 <__assert_fail@plt+0x178d0>
   28d78:	add	r2, r3, #3
   28d7c:	str	r1, [r0, r1, lsl #2]
   28d80:	cmp	ip, r2
   28d84:	bls	28d98 <__assert_fail@plt+0x178d0>
   28d88:	add	r3, r3, #4
   28d8c:	str	r2, [r0, r2, lsl #2]
   28d90:	cmp	ip, r3
   28d94:	strhi	r3, [r0, r3, lsl #2]
   28d98:	ldr	r2, [r5, #52]	; 0x34
   28d9c:	mov	r8, #1
   28da0:	ldrb	r1, [r2, #24]
   28da4:	mov	lr, r2
   28da8:	ldr	r3, [r2, #4]
   28dac:	b	28dd0 <__assert_fail@plt+0x17908>
   28db0:	cmp	r1, #17
   28db4:	beq	29068 <__assert_fail@plt+0x17ba0>
   28db8:	cmp	r3, #0
   28dbc:	beq	28df8 <__assert_fail@plt+0x17930>
   28dc0:	ldrb	r1, [r3, #24]
   28dc4:	ldr	r7, [r3, #4]
   28dc8:	mov	lr, r3
   28dcc:	mov	r3, r7
   28dd0:	cmp	r1, #4
   28dd4:	bne	28db0 <__assert_fail@plt+0x178e8>
   28dd8:	ldr	r7, [lr, #20]
   28ddc:	cmp	r3, #0
   28de0:	ldr	r1, [r5, #80]	; 0x50
   28de4:	ldr	r7, [r0, r7, lsl #2]
   28de8:	orr	r1, r1, r8, lsl r7
   28dec:	str	r7, [lr, #20]
   28df0:	str	r1, [r5, #80]	; 0x50
   28df4:	bne	28dc0 <__assert_fail@plt+0x178f8>
   28df8:	mov	r1, #0
   28dfc:	b	28e04 <__assert_fail@plt+0x1793c>
   28e00:	mov	lr, r3
   28e04:	ldr	r3, [lr, #8]
   28e08:	cmp	r3, r1
   28e0c:	cmpne	r3, #0
   28e10:	bne	28dc0 <__assert_fail@plt+0x178f8>
   28e14:	ldr	r3, [lr]
   28e18:	mov	r1, lr
   28e1c:	cmp	r3, #0
   28e20:	bne	28e00 <__assert_fail@plt+0x17938>
   28e24:	cmp	ip, #0
   28e28:	beq	28e58 <__assert_fail@plt+0x17990>
   28e2c:	ldr	r3, [r0]
   28e30:	cmp	r3, #0
   28e34:	bne	28e68 <__assert_fail@plt+0x179a0>
   28e38:	mov	r1, r0
   28e3c:	b	28e4c <__assert_fail@plt+0x17984>
   28e40:	ldr	lr, [r1, #4]!
   28e44:	cmp	lr, r3
   28e48:	bne	28e68 <__assert_fail@plt+0x179a0>
   28e4c:	add	r3, r3, #1
   28e50:	cmp	r3, ip
   28e54:	bne	28e40 <__assert_fail@plt+0x17978>
   28e58:	bl	14484 <__assert_fail@plt+0x2fbc>
   28e5c:	ldr	r2, [r5, #52]	; 0x34
   28e60:	mov	r3, #0
   28e64:	str	r3, [r5, #132]	; 0x84
   28e68:	mov	r7, #0
   28e6c:	mov	r8, r2
   28e70:	ldr	r3, [r8, #4]
   28e74:	cmp	r3, #0
   28e78:	beq	28e8c <__assert_fail@plt+0x179c4>
   28e7c:	mov	r8, r3
   28e80:	ldr	r3, [r8, #4]
   28e84:	cmp	r3, #0
   28e88:	bne	28e7c <__assert_fail@plt+0x179b4>
   28e8c:	ldr	r2, [r8, #8]
   28e90:	cmp	r2, #0
   28e94:	bne	28e6c <__assert_fail@plt+0x179a4>
   28e98:	mov	r3, r2
   28e9c:	b	28ee4 <__assert_fail@plt+0x17a1c>
   28ea0:	cmp	r3, #0
   28ea4:	beq	28ec0 <__assert_fail@plt+0x179f8>
   28ea8:	ldrb	r2, [r3, #24]
   28eac:	cmp	r2, #17
   28eb0:	beq	28f2c <__assert_fail@plt+0x17a64>
   28eb4:	ldr	r3, [sp, #48]	; 0x30
   28eb8:	cmp	r3, #0
   28ebc:	bne	2987c <__assert_fail@plt+0x183b4>
   28ec0:	ldr	r2, [r8]
   28ec4:	cmp	r2, #0
   28ec8:	beq	290c4 <__assert_fail@plt+0x17bfc>
   28ecc:	ldr	r3, [r2, #8]
   28ed0:	cmp	r3, #0
   28ed4:	cmpne	r8, r3
   28ed8:	bne	29adc <__assert_fail@plt+0x18614>
   28edc:	mov	r8, r2
   28ee0:	ldr	r2, [r2, #4]
   28ee4:	cmp	r2, #0
   28ee8:	str	r7, [sp, #48]	; 0x30
   28eec:	beq	28ea0 <__assert_fail@plt+0x179d8>
   28ef0:	ldrb	r1, [r2, #24]
   28ef4:	cmp	r1, #17
   28ef8:	bne	28ea0 <__assert_fail@plt+0x179d8>
   28efc:	mov	r1, r6
   28f00:	add	r0, sp, #48	; 0x30
   28f04:	bl	20bdc <__assert_fail@plt+0xf714>
   28f08:	ldr	r3, [r8, #8]
   28f0c:	cmp	r0, #0
   28f10:	str	r0, [r8, #4]
   28f14:	strne	r8, [r0]
   28f18:	cmp	r3, #0
   28f1c:	beq	28eb4 <__assert_fail@plt+0x179ec>
   28f20:	ldrb	r2, [r3, #24]
   28f24:	cmp	r2, #17
   28f28:	bne	28eb4 <__assert_fail@plt+0x179ec>
   28f2c:	mov	r2, r3
   28f30:	mov	r1, r6
   28f34:	add	r0, sp, #48	; 0x30
   28f38:	bl	20bdc <__assert_fail@plt+0xf714>
   28f3c:	cmp	r0, #0
   28f40:	str	r0, [r8, #8]
   28f44:	strne	r8, [r0]
   28f48:	b	28eb4 <__assert_fail@plt+0x179ec>
   28f4c:	mov	r3, #12
   28f50:	str	r3, [sp, #36]	; 0x24
   28f54:	mov	r0, r4
   28f58:	bl	1cf54 <__assert_fail@plt+0xba8c>
   28f5c:	ldr	r0, [sp, #36]	; 0x24
   28f60:	mov	r3, #0
   28f64:	str	r3, [r6]
   28f68:	str	r3, [r6, #4]
   28f6c:	add	sp, sp, #148	; 0x94
   28f70:	ldrd	r4, [sp]
   28f74:	ldrd	r6, [sp, #8]
   28f78:	ldrd	r8, [sp, #16]
   28f7c:	ldrd	sl, [sp, #24]
   28f80:	add	sp, sp, #32
   28f84:	pop	{pc}		; (ldr pc, [sp], #4)
   28f88:	mov	r1, r9
   28f8c:	add	r0, sp, #60	; 0x3c
   28f90:	bl	18c84 <__assert_fail@plt+0x77bc>
   28f94:	cmp	r0, #0
   28f98:	bne	289b4 <__assert_fail@plt+0x174ec>
   28f9c:	ldrb	r2, [sp, #135]	; 0x87
   28fa0:	ldr	r1, [r4, #92]	; 0x5c
   28fa4:	b	2894c <__assert_fail@plt+0x17484>
   28fa8:	mov	r1, #1
   28fac:	mov	r0, #32
   28fb0:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   28fb4:	cmp	r0, #0
   28fb8:	str	r0, [r4, #60]	; 0x3c
   28fbc:	beq	28f4c <__assert_fail@plt+0x17a84>
   28fc0:	str	r5, [sp, #12]
   28fc4:	mov	r5, r4
   28fc8:	lsl	fp, sl, #3
   28fcc:	mov	r4, #0
   28fd0:	b	28ff8 <__assert_fail@plt+0x17b30>
   28fd4:	cmp	r3, #0
   28fd8:	bne	28fe8 <__assert_fail@plt+0x17b20>
   28fdc:	ldrb	r3, [r5, #88]	; 0x58
   28fe0:	orr	r3, r3, #8
   28fe4:	strb	r3, [r5, #88]	; 0x58
   28fe8:	add	r4, r4, #1
   28fec:	add	fp, fp, #1
   28ff0:	cmp	r4, #32
   28ff4:	beq	29040 <__assert_fail@plt+0x17b78>
   28ff8:	mov	r0, fp
   28ffc:	bl	113f0 <btowc@plt>
   29000:	cmn	r0, #1
   29004:	bic	r3, fp, #127	; 0x7f
   29008:	beq	28fd4 <__assert_fail@plt+0x17b0c>
   2900c:	ldr	r1, [r5, #60]	; 0x3c
   29010:	cmp	r3, #0
   29014:	mov	r2, #1
   29018:	ldr	r3, [r1, sl]
   2901c:	orr	r3, r3, r2, lsl r4
   29020:	str	r3, [r1, sl]
   29024:	bne	28fe8 <__assert_fail@plt+0x17b20>
   29028:	cmp	r0, fp
   2902c:	bne	28fdc <__assert_fail@plt+0x17b14>
   29030:	add	r4, r4, #1
   29034:	add	fp, fp, #1
   29038:	cmp	r4, #32
   2903c:	bne	28ff8 <__assert_fail@plt+0x17b30>
   29040:	add	sl, sl, #4
   29044:	cmp	sl, #32
   29048:	bne	28fc8 <__assert_fail@plt+0x17b00>
   2904c:	mov	r4, r5
   29050:	ldr	r5, [sp, #12]
   29054:	b	2885c <__assert_fail@plt+0x17394>
   29058:	str	r3, [sp, #36]	; 0x24
   2905c:	str	r1, [sp, #88]	; 0x58
   29060:	str	r1, [sp, #92]	; 0x5c
   29064:	b	28abc <__assert_fail@plt+0x175f4>
   29068:	cmp	r3, #0
   2906c:	beq	28df8 <__assert_fail@plt+0x17930>
   29070:	ldrb	r1, [r3, #24]
   29074:	ldr	r7, [r3, #4]
   29078:	cmp	r1, #17
   2907c:	bne	28dc8 <__assert_fail@plt+0x17900>
   29080:	ldr	r1, [r3, #20]
   29084:	cmp	r7, #0
   29088:	str	r7, [lr, #4]
   2908c:	ldr	r3, [lr, #20]
   29090:	strne	lr, [r7]
   29094:	cmp	r1, #31
   29098:	ldrle	r9, [r5, #80]	; 0x50
   2909c:	ldr	r3, [r0, r3, lsl #2]
   290a0:	str	r3, [r0, r1, lsl #2]
   290a4:	bicle	r1, r9, r8, lsl r1
   290a8:	mov	r3, r7
   290ac:	strle	r1, [r5, #80]	; 0x50
   290b0:	b	28db8 <__assert_fail@plt+0x178f0>
   290b4:	mov	r3, #12
   290b8:	ldr	r5, [r6]
   290bc:	str	r3, [sp, #36]	; 0x24
   290c0:	b	289bc <__assert_fail@plt+0x174f4>
   290c4:	ldr	r3, [r5, #52]	; 0x34
   290c8:	mov	r7, r3
   290cc:	ldr	r3, [r3, #4]
   290d0:	cmp	r3, #0
   290d4:	bne	290c8 <__assert_fail@plt+0x17c00>
   290d8:	ldr	r3, [r7, #8]
   290dc:	cmp	r3, #0
   290e0:	bne	290c8 <__assert_fail@plt+0x17c00>
   290e4:	b	2912c <__assert_fail@plt+0x17c64>
   290e8:	ldr	r3, [r7, #4]
   290ec:	ldr	r2, [r3, #12]
   290f0:	ldr	r3, [r3, #28]
   290f4:	str	r2, [r7, #12]
   290f8:	str	r3, [r7, #28]
   290fc:	ldr	r1, [r7]
   29100:	cmp	r1, #0
   29104:	beq	29188 <__assert_fail@plt+0x17cc0>
   29108:	ldr	r3, [r1, #8]
   2910c:	sub	r2, r7, r3
   29110:	cmp	r3, #0
   29114:	clz	r2, r2
   29118:	mov	r7, r1
   2911c:	lsr	r2, r2, #5
   29120:	moveq	r2, #1
   29124:	cmp	r2, #0
   29128:	beq	290c8 <__assert_fail@plt+0x17c00>
   2912c:	ldrb	r3, [r7, #24]
   29130:	cmp	r3, #16
   29134:	beq	290e8 <__assert_fail@plt+0x17c20>
   29138:	add	r3, r7, #20
   2913c:	mov	r0, r5
   29140:	ldm	r3, {r1, r2}
   29144:	str	r7, [r7, #12]
   29148:	bl	196e4 <__assert_fail@plt+0x821c>
   2914c:	cmn	r0, #1
   29150:	str	r0, [r7, #28]
   29154:	beq	298a8 <__assert_fail@plt+0x183e0>
   29158:	ldrb	r3, [r7, #24]
   2915c:	cmp	r3, #12
   29160:	bne	290fc <__assert_fail@plt+0x17c34>
   29164:	ldr	r3, [r5]
   29168:	ldr	r2, [r7, #20]
   2916c:	add	r0, r3, r0, lsl #3
   29170:	ldr	r3, [r0, #4]
   29174:	bfi	r3, r2, #8, #10
   29178:	str	r3, [r0, #4]
   2917c:	ldr	r1, [r7]
   29180:	cmp	r1, #0
   29184:	bne	29108 <__assert_fail@plt+0x17c40>
   29188:	ldr	fp, [r5, #52]	; 0x34
   2918c:	mov	r3, fp
   29190:	b	291bc <__assert_fail@plt+0x17cf4>
   29194:	cmp	r2, #0
   29198:	ldr	r1, [r3, #8]
   2919c:	beq	291f4 <__assert_fail@plt+0x17d2c>
   291a0:	ldr	r0, [r3, #16]
   291a4:	cmp	r1, #0
   291a8:	str	r0, [r2, #16]
   291ac:	beq	291b8 <__assert_fail@plt+0x17cf0>
   291b0:	ldr	r3, [r3, #16]
   291b4:	str	r3, [r1, #16]
   291b8:	mov	r3, r2
   291bc:	ldrb	r1, [r3, #24]
   291c0:	ldr	r2, [r3, #4]
   291c4:	cmp	r1, #11
   291c8:	beq	291ec <__assert_fail@plt+0x17d24>
   291cc:	cmp	r1, #16
   291d0:	bne	29194 <__assert_fail@plt+0x17ccc>
   291d4:	ldr	r1, [r3, #8]
   291d8:	ldr	r0, [r1, #12]
   291dc:	str	r0, [r2, #16]
   291e0:	ldr	r3, [r3, #16]
   291e4:	str	r3, [r1, #16]
   291e8:	b	291b8 <__assert_fail@plt+0x17cf0>
   291ec:	str	r3, [r2, #16]
   291f0:	b	291b8 <__assert_fail@plt+0x17cf0>
   291f4:	cmp	r1, #0
   291f8:	beq	2920c <__assert_fail@plt+0x17d44>
   291fc:	ldr	r3, [r3, #16]
   29200:	mov	r2, r1
   29204:	str	r3, [r1, #16]
   29208:	b	291b8 <__assert_fail@plt+0x17cf0>
   2920c:	ldr	r1, [r3]
   29210:	cmp	r1, #0
   29214:	bne	29220 <__assert_fail@plt+0x17d58>
   29218:	b	29240 <__assert_fail@plt+0x17d78>
   2921c:	mov	r1, r2
   29220:	ldr	r2, [r1, #8]
   29224:	cmp	r2, #0
   29228:	cmpne	r2, r3
   2922c:	bne	291b8 <__assert_fail@plt+0x17cf0>
   29230:	ldr	r2, [r1]
   29234:	mov	r3, r1
   29238:	cmp	r2, #0
   2923c:	bne	2921c <__assert_fail@plt+0x17d54>
   29240:	mov	r7, #1
   29244:	mov	r9, #2
   29248:	str	r4, [sp, #20]
   2924c:	ldrb	r2, [fp, #24]
   29250:	ldr	r3, [fp, #28]
   29254:	sub	r2, r2, #2
   29258:	cmp	r2, #14
   2925c:	ldrls	pc, [pc, r2, lsl #2]
   29260:	b	29414 <__assert_fail@plt+0x17f4c>
   29264:	andeq	r9, r2, r8, lsl r3
   29268:	andeq	r9, r2, r4, lsl r4
   2926c:	andeq	r9, r2, r8, ror #7
   29270:	andeq	r9, r2, r4, lsl r4
   29274:	andeq	r9, r2, r4, lsl r4
   29278:	andeq	r9, r2, r4, lsl r4
   2927c:			; <UNDEFINED> instruction: 0x000293b0
   29280:			; <UNDEFINED> instruction: 0x000293b0
   29284:	andeq	r9, r2, r0, lsr #5
   29288:	andeq	r9, r2, r0, lsr #5
   2928c:			; <UNDEFINED> instruction: 0x000293b0
   29290:	andeq	r9, r2, r4, lsl r4
   29294:	andeq	r9, r2, r4, lsl r4
   29298:	andeq	r9, r2, r4, lsl r4
   2929c:	andeq	r9, r2, r8, lsl r3
   292a0:	ldrb	r2, [r5, #88]	; 0x58
   292a4:	add	r3, r3, r3, lsl #1
   292a8:	mov	r0, #8
   292ac:	orr	r2, r2, #1
   292b0:	strb	r2, [r5, #88]	; 0x58
   292b4:	ldr	r2, [fp, #4]
   292b8:	cmp	r2, #0
   292bc:	ldrne	r2, [r2, #12]
   292c0:	ldreq	r2, [fp, #16]
   292c4:	ldr	sl, [r2, #28]
   292c8:	ldr	r2, [fp, #8]
   292cc:	cmp	r2, #0
   292d0:	ldrne	r2, [r2, #12]
   292d4:	ldreq	r2, [fp, #16]
   292d8:	ldr	r4, [r2, #28]
   292dc:	ldr	r2, [r5, #20]
   292e0:	add	r8, r2, r3, lsl #2
   292e4:	str	r9, [r2, r3, lsl #2]
   292e8:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   292ec:	cmp	r0, #0
   292f0:	str	r0, [r8, #8]
   292f4:	beq	298a4 <__assert_fail@plt+0x183dc>
   292f8:	cmp	sl, r4
   292fc:	streq	r7, [r8, #4]
   29300:	streq	sl, [r0]
   29304:	beq	29318 <__assert_fail@plt+0x17e50>
   29308:	str	r9, [r8, #4]
   2930c:	strlt	sl, [r0]
   29310:	strlt	r4, [r0, #4]
   29314:	stmge	r0, {r4, sl}
   29318:	ldr	r3, [fp, #4]
   2931c:	cmp	r3, #0
   29320:	beq	29330 <__assert_fail@plt+0x17e68>
   29324:	mov	fp, r3
   29328:	b	2924c <__assert_fail@plt+0x17d84>
   2932c:	mov	fp, r8
   29330:	ldr	r2, [fp, #8]
   29334:	sub	r3, r2, r3
   29338:	cmp	r2, #0
   2933c:	clz	r3, r3
   29340:	moveq	sl, #1
   29344:	lsr	r3, r3, #5
   29348:	movne	sl, r3
   2934c:	cmp	sl, #0
   29350:	beq	299b0 <__assert_fail@plt+0x184e8>
   29354:	ldr	r8, [fp]
   29358:	mov	r3, fp
   2935c:	cmp	r8, #0
   29360:	bne	2932c <__assert_fail@plt+0x17e64>
   29364:	ldr	r4, [sp, #20]
   29368:	mov	fp, r8
   2936c:	mov	r7, r8
   29370:	ldr	r2, [r5, #24]
   29374:	add	r9, r7, r7, lsl #1
   29378:	lsl	r9, r9, #2
   2937c:	add	r3, r2, r9
   29380:	ldr	r3, [r3, #4]
   29384:	cmp	r3, #0
   29388:	beq	29460 <__assert_fail@plt+0x17f98>
   2938c:	ldr	r3, [r5, #8]
   29390:	add	r7, r7, #1
   29394:	cmp	r3, r7
   29398:	bne	29374 <__assert_fail@plt+0x17eac>
   2939c:	cmp	fp, #0
   293a0:	beq	2949c <__assert_fail@plt+0x17fd4>
   293a4:	mov	fp, #0
   293a8:	mov	r7, fp
   293ac:	b	29374 <__assert_fail@plt+0x17eac>
   293b0:	ldr	r1, [fp, #16]
   293b4:	add	r3, r3, r3, lsl #1
   293b8:	mov	r0, #4
   293bc:	ldr	r2, [r5, #20]
   293c0:	ldr	r8, [r1, #28]
   293c4:	add	sl, r2, r3, lsl #2
   293c8:	str	r7, [r2, r3, lsl #2]
   293cc:	str	r7, [sl, #4]
   293d0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   293d4:	cmp	r0, #0
   293d8:	str	r0, [sl, #8]
   293dc:	beq	29bc8 <__assert_fail@plt+0x18700>
   293e0:	str	r8, [r0]
   293e4:	b	29318 <__assert_fail@plt+0x17e50>
   293e8:	ldr	r1, [fp, #16]
   293ec:	ldr	r2, [r5, #12]
   293f0:	ldr	r8, [r1, #28]
   293f4:	str	r8, [r2, r3, lsl #2]
   293f8:	ldrb	r0, [fp, #24]
   293fc:	cmp	r0, #4
   29400:	bne	29318 <__assert_fail@plt+0x17e50>
   29404:	ldr	r2, [r5, #20]
   29408:	add	r3, r3, r3, lsl #1
   2940c:	add	sl, r2, r3, lsl #2
   29410:	b	293c8 <__assert_fail@plt+0x17f00>
   29414:	ldr	r1, [fp, #16]
   29418:	ldr	r2, [r5, #12]
   2941c:	ldr	r1, [r1, #28]
   29420:	str	r1, [r2, r3, lsl #2]
   29424:	b	29318 <__assert_fail@plt+0x17e50>
   29428:	ldr	r0, [sp, #56]	; 0x38
   2942c:	bl	14484 <__assert_fail@plt+0x2fbc>
   29430:	ldr	r3, [r5, #8]
   29434:	cmp	r3, r7
   29438:	moveq	fp, r9
   2943c:	moveq	r7, fp
   29440:	movne	fp, sl
   29444:	ldr	r2, [r5, #24]
   29448:	add	r9, r7, r7, lsl #1
   2944c:	lsl	r9, r9, #2
   29450:	add	r1, r2, r9
   29454:	ldr	r1, [r1, #4]
   29458:	cmp	r1, #0
   2945c:	bne	29390 <__assert_fail@plt+0x17ec8>
   29460:	mov	r3, #1
   29464:	mov	r2, r7
   29468:	mov	r1, r5
   2946c:	add	r0, sp, #48	; 0x30
   29470:	bl	1e21c <__assert_fail@plt+0xcd54>
   29474:	cmp	r0, #0
   29478:	bne	29878 <__assert_fail@plt+0x183b0>
   2947c:	ldr	r2, [r5, #24]
   29480:	add	r7, r7, #1
   29484:	add	r9, r2, r9
   29488:	ldr	r9, [r9, #4]
   2948c:	cmp	r9, #0
   29490:	beq	29428 <__assert_fail@plt+0x17f60>
   29494:	ldr	r3, [r5, #8]
   29498:	b	29394 <__assert_fail@plt+0x17ecc>
   2949c:	ldrb	r3, [r6, #28]
   294a0:	tst	r3, #16
   294a4:	bne	294c0 <__assert_fail@plt+0x17ff8>
   294a8:	ldr	r3, [r6, #24]
   294ac:	cmp	r3, #0
   294b0:	beq	294c0 <__assert_fail@plt+0x17ff8>
   294b4:	ldrb	r3, [r5, #88]	; 0x58
   294b8:	tst	r3, #1
   294bc:	bne	294cc <__assert_fail@plt+0x18004>
   294c0:	ldr	r3, [r5, #76]	; 0x4c
   294c4:	cmp	r3, #0
   294c8:	beq	295f0 <__assert_fail@plt+0x18128>
   294cc:	add	r7, r7, r7, lsl #1
   294d0:	lsl	r0, r7, #2
   294d4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   294d8:	cmp	r0, #0
   294dc:	str	r0, [r5, #28]
   294e0:	beq	290b4 <__assert_fail@plt+0x17bec>
   294e4:	ldr	r3, [r5, #8]
   294e8:	cmp	r3, #0
   294ec:	movne	r3, #0
   294f0:	movne	r2, r3
   294f4:	bne	29500 <__assert_fail@plt+0x18038>
   294f8:	b	295f0 <__assert_fail@plt+0x18128>
   294fc:	ldr	r0, [r5, #28]
   29500:	add	ip, r3, r3, lsl #1
   29504:	add	r3, r3, #1
   29508:	add	r1, r0, ip, lsl #2
   2950c:	str	r2, [r0, ip, lsl #2]
   29510:	str	r2, [r1, #4]
   29514:	str	r2, [r1, #8]
   29518:	ldr	r1, [r5, #8]
   2951c:	cmp	r1, r3
   29520:	bhi	294fc <__assert_fail@plt+0x18034>
   29524:	cmp	r1, #0
   29528:	beq	295f0 <__assert_fail@plt+0x18128>
   2952c:	ldr	ip, [r5, #24]
   29530:	mov	r3, #0
   29534:	mov	sl, r3
   29538:	str	r4, [sp, #20]
   2953c:	mov	r4, r3
   29540:	str	r8, [sp, #24]
   29544:	str	fp, [sp, #28]
   29548:	add	fp, ip, r4
   2954c:	ldmib	fp, {r3, r9}
   29550:	cmp	r3, #0
   29554:	ble	295d8 <__assert_fail@plt+0x18110>
   29558:	sub	r9, r9, #4
   2955c:	mov	r8, #0
   29560:	b	29580 <__assert_fail@plt+0x180b8>
   29564:	add	r3, r1, #1
   29568:	add	r8, r8, #1
   2956c:	str	r3, [r7, #4]
   29570:	str	sl, [r0, r1, lsl #2]
   29574:	ldr	r3, [fp, #4]
   29578:	cmp	r8, r3
   2957c:	bge	295d4 <__assert_fail@plt+0x1810c>
   29580:	ldr	r3, [r9, #4]!
   29584:	ldr	r2, [r5, #28]
   29588:	add	r3, r3, r3, lsl #1
   2958c:	add	r7, r2, r3, lsl #2
   29590:	ldr	lr, [r2, r3, lsl #2]
   29594:	ldr	r1, [r7, #4]
   29598:	ldr	r0, [r7, #8]
   2959c:	cmp	lr, r1
   295a0:	bne	29564 <__assert_fail@plt+0x1809c>
   295a4:	add	r1, r1, #1
   295a8:	lsl	ip, r1, #1
   295ac:	lsl	r1, r1, #3
   295b0:	str	ip, [r2, r3, lsl #2]
   295b4:	bl	2bb50 <__assert_fail@plt+0x1a688>
   295b8:	cmp	r0, #0
   295bc:	beq	298a4 <__assert_fail@plt+0x183dc>
   295c0:	ldr	ip, [r5, #24]
   295c4:	str	r0, [r7, #8]
   295c8:	ldr	r1, [r7, #4]
   295cc:	add	fp, ip, r4
   295d0:	b	29564 <__assert_fail@plt+0x1809c>
   295d4:	ldr	r1, [r5, #8]
   295d8:	add	sl, sl, #1
   295dc:	add	r4, r4, #12
   295e0:	cmp	sl, r1
   295e4:	bcc	29548 <__assert_fail@plt+0x18080>
   295e8:	add	r4, sp, #20
   295ec:	ldm	r4, {r4, r8, fp}
   295f0:	mov	r1, #0
   295f4:	str	r1, [sp, #36]	; 0x24
   295f8:	ldr	r3, [sp, #12]
   295fc:	ldrb	r2, [r4, #88]	; 0x58
   29600:	clz	r3, r3
   29604:	lsr	r3, r3, #5
   29608:	ands	r3, r3, r2, lsr #2
   2960c:	bne	298d0 <__assert_fail@plt+0x18408>
   29610:	ldr	r7, [r4, #24]
   29614:	ldr	r3, [r4, #52]	; 0x34
   29618:	ldr	r3, [r3, #12]
   2961c:	ldr	r3, [r3, #28]
   29620:	add	r2, r3, r3, lsl #1
   29624:	str	r3, [r4, #72]	; 0x48
   29628:	add	r7, r7, r2, lsl #2
   2962c:	ldr	r3, [r7, #4]
   29630:	cmp	r3, #0
   29634:	str	r3, [sp, #52]	; 0x34
   29638:	ble	29888 <__assert_fail@plt+0x183c0>
   2963c:	lsl	r0, r3, #2
   29640:	str	r3, [sp, #48]	; 0x30
   29644:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   29648:	cmp	r0, #0
   2964c:	mov	r8, r0
   29650:	str	r0, [sp, #56]	; 0x38
   29654:	beq	29c08 <__assert_fail@plt+0x18740>
   29658:	ldr	r2, [r7, #4]
   2965c:	add	r5, sp, #48	; 0x30
   29660:	ldr	r1, [r7, #8]
   29664:	lsl	r2, r2, #2
   29668:	bl	11204 <memcpy@plt>
   2966c:	mov	r3, #0
   29670:	str	r3, [sp, #40]	; 0x28
   29674:	ldr	r3, [r4, #76]	; 0x4c
   29678:	cmp	r3, #0
   2967c:	ble	297a8 <__assert_fail@plt+0x182e0>
   29680:	ldr	r7, [sp, #52]	; 0x34
   29684:	cmp	r7, #0
   29688:	ble	297a8 <__assert_fail@plt+0x182e0>
   2968c:	mov	ip, #0
   29690:	b	296a4 <__assert_fail@plt+0x181dc>
   29694:	add	ip, ip, #1
   29698:	cmp	r7, ip
   2969c:	ble	297a8 <__assert_fail@plt+0x182e0>
   296a0:	ldr	r8, [sp, #56]	; 0x38
   296a4:	ldr	r3, [r8, ip, lsl #2]
   296a8:	ldr	r0, [r4]
   296ac:	add	r9, r0, r3, lsl #3
   296b0:	ldrb	r2, [r9, #4]
   296b4:	cmp	r2, #4
   296b8:	bne	29694 <__assert_fail@plt+0x181cc>
   296bc:	sub	lr, r8, #4
   296c0:	mov	r1, #0
   296c4:	b	296d4 <__assert_fail@plt+0x1820c>
   296c8:	add	r1, r1, #1
   296cc:	cmp	r7, r1
   296d0:	beq	29694 <__assert_fail@plt+0x181cc>
   296d4:	ldr	r2, [lr, #4]!
   296d8:	add	sl, r0, r2, lsl #3
   296dc:	ldrb	sl, [sl, #4]
   296e0:	cmp	sl, #9
   296e4:	bne	296c8 <__assert_fail@plt+0x18200>
   296e8:	ldr	sl, [r0, r2, lsl #3]
   296ec:	ldr	r2, [r9]
   296f0:	cmp	sl, r2
   296f4:	bne	296c8 <__assert_fail@plt+0x18200>
   296f8:	ldr	r1, [r4, #20]
   296fc:	add	r3, r3, r3, lsl #1
   29700:	subs	r2, r7, #1
   29704:	add	r3, r1, r3, lsl #2
   29708:	moveq	r1, r2
   2970c:	ldr	r3, [r3, #8]
   29710:	ldr	lr, [r3]
   29714:	beq	29770 <__assert_fail@plt+0x182a8>
   29718:	mov	r1, #0
   2971c:	add	r3, r2, r1
   29720:	lsr	r3, r3, #1
   29724:	ldr	r0, [r8, r3, lsl #2]
   29728:	cmp	lr, r0
   2972c:	bgt	29868 <__assert_fail@plt+0x183a0>
   29730:	cmp	r3, r1
   29734:	bls	29770 <__assert_fail@plt+0x182a8>
   29738:	add	r2, r3, r1
   2973c:	lsr	r2, r2, #1
   29740:	ldr	r0, [r8, r2, lsl #2]
   29744:	cmp	lr, r0
   29748:	ble	29768 <__assert_fail@plt+0x182a0>
   2974c:	b	2985c <__assert_fail@plt+0x18394>
   29750:	add	r3, r1, r2
   29754:	lsr	r3, r3, #1
   29758:	ldr	r0, [r8, r3, lsl #2]
   2975c:	cmp	lr, r0
   29760:	bgt	29868 <__assert_fail@plt+0x183a0>
   29764:	mov	r2, r3
   29768:	cmp	r1, r2
   2976c:	bcc	29750 <__assert_fail@plt+0x18288>
   29770:	ldr	r3, [r8, r1, lsl #2]
   29774:	cmp	lr, r3
   29778:	beq	29694 <__assert_fail@plt+0x181cc>
   2977c:	ldr	r1, [r4, #24]
   29780:	add	lr, lr, lr, lsl #1
   29784:	mov	r0, r5
   29788:	add	r1, r1, lr, lsl #2
   2978c:	bl	19d94 <__assert_fail@plt+0x88cc>
   29790:	cmp	r0, #0
   29794:	bne	297ec <__assert_fail@plt+0x18324>
   29798:	ldr	r7, [sp, #52]	; 0x34
   2979c:	mov	ip, #1
   297a0:	cmp	r7, ip
   297a4:	bgt	296a0 <__assert_fail@plt+0x181d8>
   297a8:	mov	r3, #0
   297ac:	mov	r2, r5
   297b0:	mov	r1, r4
   297b4:	add	r0, sp, #40	; 0x28
   297b8:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   297bc:	cmp	r0, #0
   297c0:	str	r0, [r4, #36]	; 0x24
   297c4:	beq	299a8 <__assert_fail@plt+0x184e0>
   297c8:	ldrsb	r3, [r0, #52]	; 0x34
   297cc:	cmp	r3, #0
   297d0:	strge	r0, [r4, #40]	; 0x28
   297d4:	strge	r0, [r4, #44]	; 0x2c
   297d8:	strge	r0, [r4, #48]	; 0x30
   297dc:	blt	29944 <__assert_fail@plt+0x1847c>
   297e0:	ldr	r0, [sp, #56]	; 0x38
   297e4:	bl	14484 <__assert_fail@plt+0x2fbc>
   297e8:	mov	r0, #0
   297ec:	ldr	r5, [r6]
   297f0:	str	r0, [sp, #36]	; 0x24
   297f4:	ldr	r0, [r5, #56]	; 0x38
   297f8:	cmp	r0, #0
   297fc:	beq	29810 <__assert_fail@plt+0x18348>
   29800:	ldr	r7, [r0]
   29804:	bl	14484 <__assert_fail@plt+0x2fbc>
   29808:	subs	r0, r7, #0
   2980c:	bne	29800 <__assert_fail@plt+0x18338>
   29810:	mov	r3, #31
   29814:	mov	r7, #0
   29818:	ldr	r0, [r5, #16]
   2981c:	str	r7, [r5, #52]	; 0x34
   29820:	str	r7, [r5, #56]	; 0x38
   29824:	str	r3, [r5, #64]	; 0x40
   29828:	bl	14484 <__assert_fail@plt+0x2fbc>
   2982c:	str	r7, [r5, #16]
   29830:	ldr	r0, [sp, #68]	; 0x44
   29834:	bl	14484 <__assert_fail@plt+0x2fbc>
   29838:	ldr	r0, [sp, #72]	; 0x48
   2983c:	bl	14484 <__assert_fail@plt+0x2fbc>
   29840:	ldrb	r3, [sp, #135]	; 0x87
   29844:	cmp	r3, r7
   29848:	bne	298b0 <__assert_fail@plt+0x183e8>
   2984c:	ldr	r0, [sp, #36]	; 0x24
   29850:	cmp	r0, #0
   29854:	beq	28f6c <__assert_fail@plt+0x17aa4>
   29858:	b	28a14 <__assert_fail@plt+0x1754c>
   2985c:	mov	r1, r2
   29860:	mov	r2, r3
   29864:	mov	r3, r1
   29868:	add	r1, r3, #1
   2986c:	cmp	r1, r2
   29870:	bcc	2971c <__assert_fail@plt+0x18254>
   29874:	b	29770 <__assert_fail@plt+0x182a8>
   29878:	mov	r3, r0
   2987c:	str	r3, [sp, #36]	; 0x24
   29880:	ldr	r5, [r6]
   29884:	b	289bc <__assert_fail@plt+0x174f4>
   29888:	mov	r3, #0
   2988c:	add	r5, sp, #48	; 0x30
   29890:	str	r3, [sp, #40]	; 0x28
   29894:	str	r3, [sp, #48]	; 0x30
   29898:	str	r3, [r5, #4]
   2989c:	str	r3, [r5, #8]
   298a0:	b	29674 <__assert_fail@plt+0x181ac>
   298a4:	ldr	r4, [sp, #20]
   298a8:	mov	r3, #12
   298ac:	b	2987c <__assert_fail@plt+0x183b4>
   298b0:	ldr	r0, [sp, #64]	; 0x40
   298b4:	bl	14484 <__assert_fail@plt+0x2fbc>
   298b8:	b	2984c <__assert_fail@plt+0x18384>
   298bc:	add	r0, sp, #60	; 0x3c
   298c0:	bl	18e8c <__assert_fail@plt+0x79c4>
   298c4:	ldr	r3, [sp, #12]
   298c8:	str	r3, [sp, #36]	; 0x24
   298cc:	b	28abc <__assert_fail@plt+0x175f4>
   298d0:	ldr	r2, [r6, #20]
   298d4:	cmp	r2, #0
   298d8:	bne	29610 <__assert_fail@plt+0x18148>
   298dc:	ldr	r5, [r4, #8]
   298e0:	cmp	r5, #0
   298e4:	beq	29c4c <__assert_fail@plt+0x18784>
   298e8:	ldr	lr, [r4]
   298ec:	mov	r0, r2
   298f0:	mov	ip, r2
   298f4:	mov	r1, lr
   298f8:	ldrb	r2, [r1, #4]
   298fc:	sub	r2, r2, #1
   29900:	cmp	r2, #11
   29904:	ldrls	pc, [pc, r2, lsl #2]
   29908:	b	29c7c <__assert_fail@plt+0x187b4>
   2990c:	andeq	r9, r2, ip, asr fp
   29910:	strdeq	r9, [r2], -r4
   29914:	andeq	r9, r2, ip, ror #22
   29918:	strdeq	r9, [r2], -r4
   2991c:	strdeq	r9, [r2], -r0
   29920:	andeq	r9, r2, r0, lsl r6
   29924:	andeq	r9, r2, ip, ror ip
   29928:	strdeq	r9, [r2], -r4
   2992c:	strdeq	r9, [r2], -r4
   29930:	strdeq	r9, [r2], -r4
   29934:	strdeq	r9, [r2], -r4
   29938:	andeq	r9, r2, r4, lsr #23
   2993c:	ldr	r2, [r5, #52]	; 0x34
   29940:	b	28e68 <__assert_fail@plt+0x179a0>
   29944:	mov	r3, #1
   29948:	mov	r2, r5
   2994c:	mov	r1, r4
   29950:	add	r0, sp, #40	; 0x28
   29954:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   29958:	mov	r3, #2
   2995c:	mov	r2, r5
   29960:	str	r0, [r4, #40]	; 0x28
   29964:	mov	r1, r4
   29968:	add	r0, sp, #40	; 0x28
   2996c:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   29970:	mov	r3, #6
   29974:	mov	r2, r5
   29978:	str	r0, [r4, #44]	; 0x2c
   2997c:	mov	r1, r4
   29980:	add	r0, sp, #40	; 0x28
   29984:	bl	1eda8 <__assert_fail@plt+0xd8e0>
   29988:	ldr	r3, [r4, #40]	; 0x28
   2998c:	str	r0, [r4, #48]	; 0x30
   29990:	cmp	r3, #0
   29994:	beq	299a8 <__assert_fail@plt+0x184e0>
   29998:	ldr	r3, [r4, #44]	; 0x2c
   2999c:	cmp	r0, #0
   299a0:	cmpne	r3, #0
   299a4:	bne	297e0 <__assert_fail@plt+0x18318>
   299a8:	ldr	r0, [sp, #40]	; 0x28
   299ac:	b	297ec <__assert_fail@plt+0x18324>
   299b0:	mov	r3, r2
   299b4:	b	29324 <__assert_fail@plt+0x17e5c>
   299b8:	ldr	r5, [sp, #88]	; 0x58
   299bc:	ldr	r9, [sp, #96]	; 0x60
   299c0:	ldr	r3, [sp, #108]	; 0x6c
   299c4:	cmp	r9, r3
   299c8:	movge	r9, r3
   299cc:	cmp	r9, r5
   299d0:	ble	29c30 <__assert_fail@plt+0x18768>
   299d4:	bl	11348 <__ctype_toupper_loc@plt>
   299d8:	b	299f8 <__assert_fail@plt+0x18530>
   299dc:	ldr	r2, [r0]
   299e0:	ldr	r3, [r2, r3, lsl #2]
   299e4:	strb	r3, [r8, r5]
   299e8:	add	r5, r5, #1
   299ec:	cmp	r9, r5
   299f0:	beq	29a30 <__assert_fail@plt+0x18568>
   299f4:	ldr	r8, [sp, #64]	; 0x40
   299f8:	ldr	r3, [sp, #60]	; 0x3c
   299fc:	ldr	r1, [sp, #84]	; 0x54
   29a00:	ldr	r2, [sp, #124]	; 0x7c
   29a04:	add	r3, r3, r5
   29a08:	ldrb	r3, [r3, r1]
   29a0c:	cmp	r2, #0
   29a10:	beq	299dc <__assert_fail@plt+0x18514>
   29a14:	ldrb	r2, [r2, r3]
   29a18:	ldr	r3, [r0]
   29a1c:	ldr	r3, [r3, r2, lsl #2]
   29a20:	strb	r3, [r8, r5]
   29a24:	add	r5, r5, #1
   29a28:	cmp	r9, r5
   29a2c:	bne	299f4 <__assert_fail@plt+0x1852c>
   29a30:	mov	r3, #0
   29a34:	str	r3, [sp, #36]	; 0x24
   29a38:	str	r9, [sp, #88]	; 0x58
   29a3c:	str	r9, [sp, #92]	; 0x5c
   29a40:	b	28abc <__assert_fail@plt+0x175f4>
   29a44:	mov	r0, r4
   29a48:	mov	r1, #160	; 0xa0
   29a4c:	bl	2bb50 <__assert_fail@plt+0x1a688>
   29a50:	subs	r4, r0, #0
   29a54:	beq	29c38 <__assert_fail@plt+0x18770>
   29a58:	mov	r3, #160	; 0xa0
   29a5c:	str	r4, [r6]
   29a60:	str	r3, [r6, #4]
   29a64:	b	28748 <__assert_fail@plt+0x17280>
   29a68:	mov	sl, r5
   29a6c:	mov	r1, #1
   29a70:	b	287a8 <__assert_fail@plt+0x172e0>
   29a74:	mov	r7, r8
   29a78:	mov	r9, r8
   29a7c:	b	28d10 <__assert_fail@plt+0x17848>
   29a80:	ldr	r0, [sp, #64]	; 0x40
   29a84:	bl	14484 <__assert_fail@plt+0x2fbc>
   29a88:	b	28a14 <__assert_fail@plt+0x1754c>
   29a8c:	cmp	r9, #0
   29a90:	movne	r8, #1
   29a94:	bne	28bb4 <__assert_fail@plt+0x176ec>
   29a98:	ldr	r5, [r6]
   29a9c:	mov	r2, #12
   29aa0:	mov	r3, #0
   29aa4:	str	r2, [sp, #36]	; 0x24
   29aa8:	str	r3, [r4, #52]	; 0x34
   29aac:	b	289bc <__assert_fail@plt+0x174f4>
   29ab0:	mov	r0, #996	; 0x3e4
   29ab4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   29ab8:	subs	r7, r0, #0
   29abc:	beq	29a8c <__assert_fail@plt+0x185c4>
   29ac0:	ldr	r1, [r5, #56]	; 0x38
   29ac4:	mov	r3, sl
   29ac8:	mov	r2, #1
   29acc:	mov	r0, #4
   29ad0:	str	r1, [r7]
   29ad4:	str	r7, [r5, #56]	; 0x38
   29ad8:	b	28b54 <__assert_fail@plt+0x1768c>
   29adc:	mov	r2, r3
   29ae0:	b	28e6c <__assert_fail@plt+0x179a4>
   29ae4:	mov	r3, #0
   29ae8:	str	r3, [sp, #36]	; 0x24
   29aec:	b	28abc <__assert_fail@plt+0x175f4>
   29af0:	mov	r0, r3
   29af4:	add	ip, ip, #1
   29af8:	add	r1, r1, #8
   29afc:	cmp	ip, r5
   29b00:	bne	298f8 <__assert_fail@plt+0x18430>
   29b04:	orr	fp, fp, r0
   29b08:	ands	fp, fp, #255	; 0xff
   29b0c:	moveq	r0, fp
   29b10:	beq	29c50 <__assert_fail@plt+0x18788>
   29b14:	add	ip, lr, ip, lsl #3
   29b18:	mov	r2, #7
   29b1c:	b	29b34 <__assert_fail@plt+0x1866c>
   29b20:	cmp	r3, #5
   29b24:	strbeq	r2, [lr, #4]
   29b28:	add	lr, lr, #8
   29b2c:	cmp	ip, lr
   29b30:	beq	29c50 <__assert_fail@plt+0x18788>
   29b34:	ldrb	r3, [lr, #4]
   29b38:	cmp	r3, #1
   29b3c:	bne	29b20 <__assert_fail@plt+0x18658>
   29b40:	ldrsb	r3, [lr]
   29b44:	cmp	r3, #0
   29b48:	bge	29b28 <__assert_fail@plt+0x18660>
   29b4c:	ldrb	r3, [lr, #6]
   29b50:	bfc	r3, #5, #1
   29b54:	strb	r3, [lr, #6]
   29b58:	b	29b28 <__assert_fail@plt+0x18660>
   29b5c:	ldrsb	r2, [r1]
   29b60:	cmp	r2, #0
   29b64:	movlt	fp, r3
   29b68:	b	29af4 <__assert_fail@plt+0x1862c>
   29b6c:	ldr	r2, [r1]
   29b70:	ldr	r7, [r2, #16]
   29b74:	cmp	r7, #0
   29b78:	bne	29610 <__assert_fail@plt+0x18148>
   29b7c:	ldr	r7, [r2, #20]
   29b80:	cmp	r7, #0
   29b84:	bne	29610 <__assert_fail@plt+0x18148>
   29b88:	ldr	r7, [r2, #24]
   29b8c:	cmp	r7, #0
   29b90:	bne	29610 <__assert_fail@plt+0x18148>
   29b94:	ldr	r2, [r2, #28]
   29b98:	cmp	r2, #0
   29b9c:	beq	29af4 <__assert_fail@plt+0x1862c>
   29ba0:	b	29610 <__assert_fail@plt+0x18148>
   29ba4:	ldr	r2, [r1]
   29ba8:	cmp	r2, #32
   29bac:	beq	29af4 <__assert_fail@plt+0x1862c>
   29bb0:	bls	29c1c <__assert_fail@plt+0x18754>
   29bb4:	cmp	r2, #64	; 0x40
   29bb8:	beq	29af4 <__assert_fail@plt+0x1862c>
   29bbc:	cmp	r2, #128	; 0x80
   29bc0:	beq	29af4 <__assert_fail@plt+0x1862c>
   29bc4:	b	29610 <__assert_fail@plt+0x18148>
   29bc8:	mov	r3, #12
   29bcc:	ldr	r4, [sp, #20]
   29bd0:	str	r0, [sl]
   29bd4:	str	r0, [sl, #4]
   29bd8:	b	2987c <__assert_fail@plt+0x183b4>
   29bdc:	mov	r0, #996	; 0x3e4
   29be0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   29be4:	cmp	r0, #0
   29be8:	beq	29a98 <__assert_fail@plt+0x185d0>
   29bec:	ldr	ip, [r5, #56]	; 0x38
   29bf0:	mov	r2, #4
   29bf4:	mov	r3, #1
   29bf8:	mov	r1, #0
   29bfc:	str	ip, [r0]
   29c00:	str	r0, [r5, #56]	; 0x38
   29c04:	b	28bdc <__assert_fail@plt+0x17714>
   29c08:	mov	r0, #12
   29c0c:	b	297ec <__assert_fail@plt+0x18324>
   29c10:	mov	r3, r8
   29c14:	mov	r7, r8
   29c18:	b	28d58 <__assert_fail@plt+0x17890>
   29c1c:	cmp	r2, #16
   29c20:	beq	29af4 <__assert_fail@plt+0x1862c>
   29c24:	b	29610 <__assert_fail@plt+0x18148>
   29c28:	mov	r1, r3
   29c2c:	b	28aac <__assert_fail@plt+0x175e4>
   29c30:	mov	r9, r5
   29c34:	b	29a30 <__assert_fail@plt+0x18568>
   29c38:	mov	r0, #12
   29c3c:	b	28f6c <__assert_fail@plt+0x17aa4>
   29c40:	ldr	r5, [r6]
   29c44:	str	r8, [r4, #52]	; 0x34
   29c48:	b	289bc <__assert_fail@plt+0x174f4>
   29c4c:	mov	r0, r5
   29c50:	ldrb	r3, [r4, #88]	; 0x58
   29c54:	mov	r1, #1
   29c58:	ldr	r2, [r4, #76]	; 0x4c
   29c5c:	str	r1, [r4, #92]	; 0x5c
   29c60:	and	r3, r3, #251	; 0xfb
   29c64:	cmp	r2, #0
   29c68:	movle	r2, r0
   29c6c:	orrgt	r2, r0, #1
   29c70:	bfi	r3, r2, #1, #1
   29c74:	strb	r3, [r4, #88]	; 0x58
   29c78:	b	29610 <__assert_fail@plt+0x18148>
   29c7c:	bl	114bc <abort@plt>
   29c80:	movw	r3, #58096	; 0xe2f0
   29c84:	movt	r3, #3
   29c88:	str	r4, [sp, #-8]!
   29c8c:	ldr	r3, [r3]
   29c90:	str	lr, [sp, #4]
   29c94:	mov	lr, r2
   29c98:	mov	r2, r1
   29c9c:	ldrb	ip, [lr, #28]
   29ca0:	mov	r1, r0
   29ca4:	mov	r0, lr
   29ca8:	ubfx	r4, r3, #25, #1
   29cac:	bfi	ip, r4, #4, #1
   29cb0:	mvn	ip, ip, lsl #25
   29cb4:	mvn	ip, ip, lsr #25
   29cb8:	strb	ip, [lr, #28]
   29cbc:	bl	286f0 <__assert_fail@plt+0x17228>
   29cc0:	subs	r3, r0, #0
   29cc4:	beq	29cf8 <__assert_fail@plt+0x18830>
   29cc8:	movw	r1, #52880	; 0xce90
   29ccc:	movt	r1, #2
   29cd0:	ldr	r4, [sp]
   29cd4:	add	r3, r1, r3, lsl #2
   29cd8:	add	r1, r1, #32
   29cdc:	mov	r2, #5
   29ce0:	mov	r0, #0
   29ce4:	ldr	lr, [sp, #4]
   29ce8:	add	sp, sp, #8
   29cec:	ldr	r3, [r3, #416]	; 0x1a0
   29cf0:	add	r1, r1, r3
   29cf4:	b	11258 <dcgettext@plt>
   29cf8:	ldr	r4, [sp]
   29cfc:	add	sp, sp, #4
   29d00:	pop	{pc}		; (ldr pc, [sp], #4)
   29d04:	movw	r3, #58096	; 0xe2f0
   29d08:	movt	r3, #3
   29d0c:	ldr	r2, [r3]
   29d10:	str	r0, [r3]
   29d14:	mov	r0, r2
   29d18:	bx	lr
   29d1c:	strd	r4, [sp, #-16]!
   29d20:	mov	r2, #256	; 0x100
   29d24:	mov	r4, r0
   29d28:	ldr	r5, [r0]
   29d2c:	mov	r1, #0
   29d30:	str	r6, [sp, #8]
   29d34:	ldr	r6, [r0, #16]
   29d38:	str	lr, [sp, #12]
   29d3c:	mov	r0, r6
   29d40:	bl	113e4 <memset@plt>
   29d44:	ldr	r1, [r5, #36]	; 0x24
   29d48:	mov	r3, r6
   29d4c:	mov	r0, r4
   29d50:	add	r2, r1, #12
   29d54:	add	r1, r1, #8
   29d58:	bl	1b744 <__assert_fail@plt+0xa27c>
   29d5c:	ldr	r3, [r5, #36]	; 0x24
   29d60:	ldr	r0, [r5, #40]	; 0x28
   29d64:	cmp	r3, r0
   29d68:	beq	29d84 <__assert_fail@plt+0x188bc>
   29d6c:	add	r2, r0, #12
   29d70:	add	r1, r0, #8
   29d74:	mov	r3, r6
   29d78:	mov	r0, r4
   29d7c:	bl	1b744 <__assert_fail@plt+0xa27c>
   29d80:	ldr	r0, [r5, #36]	; 0x24
   29d84:	ldr	r1, [r5, #44]	; 0x2c
   29d88:	cmp	r1, r0
   29d8c:	beq	29da8 <__assert_fail@plt+0x188e0>
   29d90:	add	r2, r1, #12
   29d94:	mov	r0, r4
   29d98:	mov	r3, r6
   29d9c:	add	r1, r1, #8
   29da0:	bl	1b744 <__assert_fail@plt+0xa27c>
   29da4:	ldr	r0, [r5, #36]	; 0x24
   29da8:	ldr	r1, [r5, #48]	; 0x30
   29dac:	cmp	r1, r0
   29db0:	beq	29dc8 <__assert_fail@plt+0x18900>
   29db4:	add	r2, r1, #12
   29db8:	mov	r3, r6
   29dbc:	add	r1, r1, #8
   29dc0:	mov	r0, r4
   29dc4:	bl	1b744 <__assert_fail@plt+0xa27c>
   29dc8:	ldrb	r3, [r4, #28]
   29dcc:	mov	r0, #0
   29dd0:	ldr	r6, [sp, #8]
   29dd4:	orr	r3, r3, #8
   29dd8:	strb	r3, [r4, #28]
   29ddc:	ldrd	r4, [sp]
   29de0:	add	sp, sp, #12
   29de4:	pop	{pc}		; (ldr pc, [sp], #4)
   29de8:	cmp	r3, r2
   29dec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29df0:	strd	r6, [sp, #8]
   29df4:	strd	r8, [sp, #16]
   29df8:	strd	sl, [sp, #24]
   29dfc:	str	lr, [sp, #32]
   29e00:	sub	sp, sp, #52	; 0x34
   29e04:	movle	lr, #0
   29e08:	movgt	lr, #1
   29e0c:	ldr	ip, [sp, #88]	; 0x58
   29e10:	orrs	lr, lr, r3, lsr #31
   29e14:	ldrb	lr, [sp, #100]	; 0x64
   29e18:	ldr	r8, [sp, #96]	; 0x60
   29e1c:	add	r7, r3, ip
   29e20:	str	lr, [sp, #36]	; 0x24
   29e24:	ldr	lr, [r0]
   29e28:	str	lr, [sp, #28]
   29e2c:	bne	2a12c <__assert_fail@plt+0x18c64>
   29e30:	cmp	r7, r2
   29e34:	mov	fp, r3
   29e38:	str	r2, [sp, #32]
   29e3c:	mov	r4, r0
   29e40:	mov	r3, r2
   29e44:	str	r1, [sp, #40]	; 0x28
   29e48:	bgt	2a0d8 <__assert_fail@plt+0x18c10>
   29e4c:	cmp	ip, #0
   29e50:	cmpge	fp, r7
   29e54:	bgt	2a0d8 <__assert_fail@plt+0x18c10>
   29e58:	cmp	r7, #0
   29e5c:	blt	2a0e0 <__assert_fail@plt+0x18c18>
   29e60:	cmp	fp, r7
   29e64:	movgt	r2, #0
   29e68:	movle	r2, #1
   29e6c:	ands	r3, r2, ip, lsr #31
   29e70:	bne	2a0e0 <__assert_fail@plt+0x18c18>
   29e74:	movw	r2, #0
   29e78:	movt	r2, #0
   29e7c:	cmp	r2, #0
   29e80:	mov	r5, #1
   29e84:	moveq	r5, r2
   29e88:	movw	r2, #0
   29e8c:	movt	r2, #0
   29e90:	mov	r0, #1
   29e94:	cmp	r2, #0
   29e98:	moveq	r0, r2
   29e9c:	orr	r5, r5, r0
   29ea0:	ands	r5, r5, #255	; 0xff
   29ea4:	beq	29eb8 <__assert_fail@plt+0x189f0>
   29ea8:	ldr	r3, [sp, #28]
   29eac:	mov	r5, #1
   29eb0:	add	r0, r3, #136	; 0x88
   29eb4:	bl	111ec <pthread_mutex_lock@plt>
   29eb8:	ldrb	r0, [r4, #28]
   29ebc:	cmp	fp, r7
   29ec0:	ubfx	r3, r0, #5, #2
   29ec4:	str	r3, [sp, #44]	; 0x2c
   29ec8:	bge	29ee0 <__assert_fail@plt+0x18a18>
   29ecc:	ldr	r2, [r4, #16]
   29ed0:	cmp	r2, #0
   29ed4:	beq	29ee0 <__assert_fail@plt+0x18a18>
   29ed8:	tst	r0, #8
   29edc:	beq	2a080 <__assert_fail@plt+0x18bb8>
   29ee0:	ubfx	r2, r0, #4, #1
   29ee4:	cmp	r8, #0
   29ee8:	orreq	r2, r2, #1
   29eec:	ands	r2, r2, #255	; 0xff
   29ef0:	bne	2a06c <__assert_fail@plt+0x18ba4>
   29ef4:	and	r0, r0, #6
   29ef8:	ldr	ip, [r4, #24]
   29efc:	cmp	r0, #4
   29f00:	beq	2a13c <__assert_fail@plt+0x18c74>
   29f04:	add	sl, ip, #1
   29f08:	mov	r6, sl
   29f0c:	lsl	r0, sl, #3
   29f10:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   29f14:	subs	r9, r0, #0
   29f18:	beq	2a134 <__assert_fail@plt+0x18c6c>
   29f1c:	mov	r3, fp
   29f20:	mov	r0, r4
   29f24:	str	sl, [sp, #8]
   29f28:	ldr	ip, [sp, #92]	; 0x5c
   29f2c:	ldr	r2, [sp, #32]
   29f30:	ldr	r1, [sp, #40]	; 0x28
   29f34:	stm	sp, {r7, ip}
   29f38:	ldr	ip, [sp, #44]	; 0x2c
   29f3c:	str	r9, [sp, #12]
   29f40:	str	ip, [sp, #16]
   29f44:	bl	230c4 <__assert_fail@plt+0x11bfc>
   29f48:	cmp	r0, #0
   29f4c:	beq	29f9c <__assert_fail@plt+0x18ad4>
   29f50:	cmp	r0, #1
   29f54:	mvneq	r4, #0
   29f58:	beq	29f60 <__assert_fail@plt+0x18a98>
   29f5c:	mvn	r4, #1
   29f60:	mov	r0, r9
   29f64:	bl	14484 <__assert_fail@plt+0x2fbc>
   29f68:	cmp	r5, #0
   29f6c:	beq	29f7c <__assert_fail@plt+0x18ab4>
   29f70:	ldr	r3, [sp, #28]
   29f74:	add	r0, r3, #136	; 0x88
   29f78:	bl	11144 <pthread_mutex_unlock@plt>
   29f7c:	mov	r0, r4
   29f80:	add	sp, sp, #52	; 0x34
   29f84:	ldrd	r4, [sp]
   29f88:	ldrd	r6, [sp, #8]
   29f8c:	ldrd	r8, [sp, #16]
   29f90:	ldrd	sl, [sp, #24]
   29f94:	add	sp, sp, #32
   29f98:	pop	{pc}		; (ldr pc, [sp], #4)
   29f9c:	cmp	r8, #0
   29fa0:	beq	2a050 <__assert_fail@plt+0x18b88>
   29fa4:	ldrb	r7, [r4, #28]
   29fa8:	add	sl, r6, #1
   29fac:	ubfx	r7, r7, #1, #2
   29fb0:	cmp	r7, #0
   29fb4:	beq	2a090 <__assert_fail@plt+0x18bc8>
   29fb8:	cmp	r7, #1
   29fbc:	beq	2a168 <__assert_fail@plt+0x18ca0>
   29fc0:	ldr	fp, [r8]
   29fc4:	mov	r7, #2
   29fc8:	cmp	r6, #0
   29fcc:	ble	2a1d0 <__assert_fail@plt+0x18d08>
   29fd0:	ldrd	r0, [r8, #4]
   29fd4:	add	lr, r9, r6, lsl #3
   29fd8:	mov	r3, r9
   29fdc:	mov	r2, r6
   29fe0:	sub	r0, r0, #4
   29fe4:	sub	r1, r1, #4
   29fe8:	ldr	ip, [r3]
   29fec:	add	r3, r3, #8
   29ff0:	str	ip, [r0, #4]!
   29ff4:	ldr	ip, [r3, #-4]
   29ff8:	cmp	r3, lr
   29ffc:	str	ip, [r1, #4]!
   2a000:	bne	29fe8 <__assert_fail@plt+0x18b20>
   2a004:	ldr	fp, [r8]
   2a008:	cmp	r2, fp
   2a00c:	bcs	2a038 <__assert_fail@plt+0x18b70>
   2a010:	ldr	ip, [r8, #4]
   2a014:	mvn	r3, #0
   2a018:	ldr	r0, [r8, #8]
   2a01c:	str	r3, [r0, r2, lsl #2]
   2a020:	add	r6, r6, #1
   2a024:	str	r3, [ip, r2, lsl #2]
   2a028:	mov	r2, r6
   2a02c:	ldr	r1, [r8]
   2a030:	cmp	r1, r6
   2a034:	bhi	2a01c <__assert_fail@plt+0x18b54>
   2a038:	ldrb	r3, [r4, #28]
   2a03c:	bfi	r3, r7, #1, #2
   2a040:	and	r2, r3, #6
   2a044:	cmp	r2, #0
   2a048:	strb	r3, [r4, #28]
   2a04c:	beq	29f5c <__assert_fail@plt+0x18a94>
   2a050:	ldr	r3, [sp, #36]	; 0x24
   2a054:	ldr	r4, [r9]
   2a058:	cmp	r3, #0
   2a05c:	beq	29f60 <__assert_fail@plt+0x18a98>
   2a060:	ldr	r3, [r9, #4]
   2a064:	sub	r4, r3, r4
   2a068:	b	29f60 <__assert_fail@plt+0x18a98>
   2a06c:	mov	sl, #1
   2a070:	mov	r0, #8
   2a074:	mov	r6, sl
   2a078:	mov	r8, #0
   2a07c:	b	29f10 <__assert_fail@plt+0x18a48>
   2a080:	mov	r0, r4
   2a084:	bl	29d1c <__assert_fail@plt+0x18854>
   2a088:	ldrb	r0, [r4, #28]
   2a08c:	b	29ee0 <__assert_fail@plt+0x18a18>
   2a090:	lsl	r7, sl, #2
   2a094:	mov	fp, sl
   2a098:	mov	r0, r7
   2a09c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2a0a0:	cmp	r0, #0
   2a0a4:	str	r0, [r8, #4]
   2a0a8:	beq	2a1dc <__assert_fail@plt+0x18d14>
   2a0ac:	mov	r0, r7
   2a0b0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2a0b4:	cmp	r0, #0
   2a0b8:	mov	r7, r0
   2a0bc:	str	r0, [r8, #8]
   2a0c0:	movne	r7, #1
   2a0c4:	strne	sl, [r8]
   2a0c8:	bne	29fc8 <__assert_fail@plt+0x18b00>
   2a0cc:	ldr	r0, [r8, #4]
   2a0d0:	bl	14484 <__assert_fail@plt+0x2fbc>
   2a0d4:	b	2a038 <__assert_fail@plt+0x18b70>
   2a0d8:	mov	r7, r3
   2a0dc:	b	29e74 <__assert_fail@plt+0x189ac>
   2a0e0:	movw	r2, #0
   2a0e4:	movt	r2, #0
   2a0e8:	cmp	r2, #0
   2a0ec:	mov	r5, #1
   2a0f0:	moveq	r5, r2
   2a0f4:	movw	r2, #0
   2a0f8:	movt	r2, #0
   2a0fc:	mov	r1, #1
   2a100:	cmp	r2, #0
   2a104:	moveq	r1, r2
   2a108:	orr	r5, r5, r1
   2a10c:	ands	r5, r5, #255	; 0xff
   2a110:	movne	r7, #0
   2a114:	bne	29ea8 <__assert_fail@plt+0x189e0>
   2a118:	ldrb	r0, [r4, #28]
   2a11c:	mov	r7, r5
   2a120:	ubfx	r3, r0, #5, #2
   2a124:	str	r3, [sp, #44]	; 0x2c
   2a128:	b	29ee0 <__assert_fail@plt+0x18a18>
   2a12c:	mvn	r4, #0
   2a130:	b	29f7c <__assert_fail@plt+0x18ab4>
   2a134:	mvn	r4, #1
   2a138:	b	29f68 <__assert_fail@plt+0x18aa0>
   2a13c:	ldr	sl, [r8]
   2a140:	cmp	sl, ip
   2a144:	bhi	29f04 <__assert_fail@plt+0x18a3c>
   2a148:	cmp	sl, #0
   2a14c:	mov	r6, sl
   2a150:	bgt	29f0c <__assert_fail@plt+0x18a44>
   2a154:	mov	sl, #1
   2a158:	mov	r8, r2
   2a15c:	mov	r6, sl
   2a160:	mov	r0, #8
   2a164:	b	29f10 <__assert_fail@plt+0x18a48>
   2a168:	ldr	fp, [r8]
   2a16c:	cmp	fp, sl
   2a170:	bcs	29fc8 <__assert_fail@plt+0x18b00>
   2a174:	lsl	fp, sl, #2
   2a178:	ldr	r0, [r8, #4]
   2a17c:	mov	r1, fp
   2a180:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2a184:	subs	r2, r0, #0
   2a188:	str	r2, [sp, #32]
   2a18c:	beq	2a1dc <__assert_fail@plt+0x18d14>
   2a190:	mov	r1, fp
   2a194:	ldr	r0, [r8, #8]
   2a198:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2a19c:	ldr	r2, [sp, #32]
   2a1a0:	subs	r1, r0, #0
   2a1a4:	movne	fp, sl
   2a1a8:	strne	sl, [r8]
   2a1ac:	strne	r1, [r8, #8]
   2a1b0:	strne	r2, [r8, #4]
   2a1b4:	bne	29fc8 <__assert_fail@plt+0x18b00>
   2a1b8:	mov	r0, r2
   2a1bc:	str	r1, [sp, #32]
   2a1c0:	bl	14484 <__assert_fail@plt+0x2fbc>
   2a1c4:	ldr	r1, [sp, #32]
   2a1c8:	mov	r7, r1
   2a1cc:	b	2a038 <__assert_fail@plt+0x18b70>
   2a1d0:	mov	r6, #0
   2a1d4:	mov	r2, r6
   2a1d8:	b	2a008 <__assert_fail@plt+0x18b40>
   2a1dc:	mov	r7, #0
   2a1e0:	b	2a038 <__assert_fail@plt+0x18b70>
   2a1e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a1e8:	mov	r4, r0
   2a1ec:	mov	r0, #0
   2a1f0:	tst	r2, #1
   2a1f4:	movw	r5, #45820	; 0xb2fc
   2a1f8:	movt	r5, #3
   2a1fc:	movw	r3, #710	; 0x2c6
   2a200:	movt	r3, #257	; 0x101
   2a204:	strd	r6, [sp, #8]
   2a208:	mov	r6, r2
   2a20c:	str	r8, [sp, #16]
   2a210:	mov	r7, r1
   2a214:	movne	r8, r5
   2a218:	str	lr, [sp, #20]
   2a21c:	moveq	r8, r3
   2a220:	str	r0, [r4]
   2a224:	str	r0, [r4, #4]
   2a228:	str	r0, [r4, #8]
   2a22c:	mov	r0, #256	; 0x100
   2a230:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2a234:	cmp	r0, #0
   2a238:	str	r0, [r4, #16]
   2a23c:	beq	2a2e8 <__assert_fail@plt+0x18e20>
   2a240:	lsl	r5, r6, #21
   2a244:	ands	r2, r6, #4
   2a248:	and	r5, r5, #4194304	; 0x400000
   2a24c:	orr	r5, r5, r8
   2a250:	bne	2a2c0 <__assert_fail@plt+0x18df8>
   2a254:	ldrb	r3, [r4, #28]
   2a258:	ubfx	r6, r6, #3, #1
   2a25c:	mov	r1, #0
   2a260:	mov	r0, r7
   2a264:	str	r1, [r4, #20]
   2a268:	bfi	r3, r2, #7, #1
   2a26c:	bfi	r3, r6, #4, #1
   2a270:	strb	r3, [r4, #28]
   2a274:	bl	11390 <strlen@plt>
   2a278:	mov	r2, r0
   2a27c:	mov	r3, r5
   2a280:	mov	r1, r7
   2a284:	mov	r0, r4
   2a288:	bl	286f0 <__assert_fail@plt+0x17228>
   2a28c:	cmp	r0, #16
   2a290:	mov	r5, r0
   2a294:	beq	2a2d0 <__assert_fail@plt+0x18e08>
   2a298:	cmp	r0, #0
   2a29c:	bne	2a2d4 <__assert_fail@plt+0x18e0c>
   2a2a0:	mov	r0, r4
   2a2a4:	bl	29d1c <__assert_fail@plt+0x18854>
   2a2a8:	mov	r0, r5
   2a2ac:	ldrd	r4, [sp]
   2a2b0:	ldrd	r6, [sp, #8]
   2a2b4:	ldr	r8, [sp, #16]
   2a2b8:	add	sp, sp, #20
   2a2bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2a2c0:	bic	r5, r5, #64	; 0x40
   2a2c4:	mov	r2, #1
   2a2c8:	orr	r5, r5, #256	; 0x100
   2a2cc:	b	2a254 <__assert_fail@plt+0x18d8c>
   2a2d0:	mov	r5, #8
   2a2d4:	ldr	r0, [r4, #16]
   2a2d8:	bl	14484 <__assert_fail@plt+0x2fbc>
   2a2dc:	mov	r3, #0
   2a2e0:	str	r3, [r4, #16]
   2a2e4:	b	2a2a8 <__assert_fail@plt+0x18de0>
   2a2e8:	mov	r5, #12
   2a2ec:	b	2a2a8 <__assert_fail@plt+0x18de0>
   2a2f0:	cmp	r0, #16
   2a2f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a2f8:	strd	r6, [sp, #8]
   2a2fc:	str	r8, [sp, #16]
   2a300:	str	lr, [sp, #20]
   2a304:	bhi	2a380 <__assert_fail@plt+0x18eb8>
   2a308:	movw	r1, #52880	; 0xce90
   2a30c:	movt	r1, #2
   2a310:	add	ip, r1, r0, lsl #2
   2a314:	mov	r4, r3
   2a318:	add	r1, r1, #32
   2a31c:	mov	r6, r2
   2a320:	mov	r0, #0
   2a324:	ldr	r3, [ip, #416]	; 0x1a0
   2a328:	mov	r2, #5
   2a32c:	add	r1, r1, r3
   2a330:	bl	11258 <dcgettext@plt>
   2a334:	mov	r7, r0
   2a338:	bl	11390 <strlen@plt>
   2a33c:	cmp	r4, #0
   2a340:	add	r5, r0, #1
   2a344:	beq	2a368 <__assert_fail@plt+0x18ea0>
   2a348:	cmp	r5, r4
   2a34c:	mov	r1, r7
   2a350:	subhi	r2, r4, #1
   2a354:	movhi	r3, #0
   2a358:	movls	r2, r5
   2a35c:	mov	r0, r6
   2a360:	strbhi	r3, [r6, r2]
   2a364:	bl	11204 <memcpy@plt>
   2a368:	mov	r0, r5
   2a36c:	ldrd	r4, [sp]
   2a370:	ldrd	r6, [sp, #8]
   2a374:	ldr	r8, [sp, #16]
   2a378:	add	sp, sp, #20
   2a37c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a380:	bl	114bc <abort@plt>
   2a384:	strd	r4, [sp, #-16]!
   2a388:	mov	r4, r0
   2a38c:	ldr	r5, [r0]
   2a390:	str	r6, [sp, #8]
   2a394:	str	lr, [sp, #12]
   2a398:	cmp	r5, #0
   2a39c:	beq	2a3e4 <__assert_fail@plt+0x18f1c>
   2a3a0:	movw	r2, #0
   2a3a4:	movt	r2, #0
   2a3a8:	cmp	r2, #0
   2a3ac:	mov	r3, #1
   2a3b0:	moveq	r3, r2
   2a3b4:	movw	r2, #0
   2a3b8:	movt	r2, #0
   2a3bc:	mov	r1, #1
   2a3c0:	cmp	r2, #0
   2a3c4:	moveq	r1, r2
   2a3c8:	orr	r3, r3, r1
   2a3cc:	tst	r3, #1
   2a3d0:	beq	2a3dc <__assert_fail@plt+0x18f14>
   2a3d4:	add	r0, r5, #136	; 0x88
   2a3d8:	bl	111b0 <pthread_mutex_destroy@plt>
   2a3dc:	mov	r0, r5
   2a3e0:	bl	1cf54 <__assert_fail@plt+0xba8c>
   2a3e4:	mov	r5, #0
   2a3e8:	ldr	r0, [r4, #16]
   2a3ec:	str	r5, [r4]
   2a3f0:	str	r5, [r4, #4]
   2a3f4:	bl	14484 <__assert_fail@plt+0x2fbc>
   2a3f8:	str	r5, [r4, #16]
   2a3fc:	ldr	r0, [r4, #20]
   2a400:	bl	14484 <__assert_fail@plt+0x2fbc>
   2a404:	ldr	r6, [sp, #8]
   2a408:	str	r5, [r4, #20]
   2a40c:	ldrd	r4, [sp]
   2a410:	add	sp, sp, #12
   2a414:	pop	{pc}		; (ldr pc, [sp], #4)
   2a418:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a41c:	strd	r6, [sp, #8]
   2a420:	strd	r8, [sp, #16]
   2a424:	strd	sl, [sp, #24]
   2a428:	str	lr, [sp, #32]
   2a42c:	sub	sp, sp, #36	; 0x24
   2a430:	ldr	r6, [sp, #72]	; 0x48
   2a434:	bics	ip, r6, #7
   2a438:	movne	r0, #2
   2a43c:	bne	2a4f4 <__assert_fail@plt+0x1902c>
   2a440:	ands	sl, r6, #4
   2a444:	mov	r7, r3
   2a448:	str	r2, [sp, #28]
   2a44c:	mov	r8, r1
   2a450:	mov	r5, r0
   2a454:	bne	2a510 <__assert_fail@plt+0x19048>
   2a458:	mov	r0, r1
   2a45c:	bl	11390 <strlen@plt>
   2a460:	mov	r9, r0
   2a464:	movw	r2, #0
   2a468:	movt	r2, #0
   2a46c:	ldr	fp, [r5]
   2a470:	cmp	r2, #0
   2a474:	mov	r4, #1
   2a478:	moveq	r4, r2
   2a47c:	movw	r2, #0
   2a480:	movt	r2, #0
   2a484:	mov	r1, #1
   2a488:	cmp	r2, #0
   2a48c:	moveq	r1, r2
   2a490:	orr	r4, r4, r1
   2a494:	ands	r4, r4, #255	; 0xff
   2a498:	beq	2a4a4 <__assert_fail@plt+0x18fdc>
   2a49c:	add	r0, fp, #136	; 0x88
   2a4a0:	bl	111ec <pthread_mutex_lock@plt>
   2a4a4:	ldrb	r2, [r5, #28]
   2a4a8:	tst	r2, #16
   2a4ac:	beq	2a51c <__assert_fail@plt+0x19054>
   2a4b0:	mov	ip, #0
   2a4b4:	mov	r0, r5
   2a4b8:	str	r9, [sp]
   2a4bc:	mov	r3, sl
   2a4c0:	mov	r1, r8
   2a4c4:	mov	r2, r9
   2a4c8:	stmib	sp, {r9, ip}
   2a4cc:	str	ip, [sp, #12]
   2a4d0:	str	r6, [sp, #16]
   2a4d4:	bl	230c4 <__assert_fail@plt+0x11bfc>
   2a4d8:	mov	r5, r0
   2a4dc:	cmp	r4, #0
   2a4e0:	beq	2a4ec <__assert_fail@plt+0x19024>
   2a4e4:	add	r0, fp, #136	; 0x88
   2a4e8:	bl	11144 <pthread_mutex_unlock@plt>
   2a4ec:	adds	r0, r5, #0
   2a4f0:	movne	r0, #1
   2a4f4:	add	sp, sp, #36	; 0x24
   2a4f8:	ldrd	r4, [sp]
   2a4fc:	ldrd	r6, [sp, #8]
   2a500:	ldrd	r8, [sp, #16]
   2a504:	ldrd	sl, [sp, #24]
   2a508:	add	sp, sp, #32
   2a50c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a510:	ldr	sl, [r3]
   2a514:	ldr	r9, [r3, #4]
   2a518:	b	2a464 <__assert_fail@plt+0x18f9c>
   2a51c:	ldr	ip, [sp, #28]
   2a520:	mov	r0, r5
   2a524:	mov	r3, sl
   2a528:	mov	r1, r8
   2a52c:	mov	r2, r9
   2a530:	str	r9, [sp]
   2a534:	stmib	sp, {r9, ip}
   2a538:	str	r7, [sp, #12]
   2a53c:	str	r6, [sp, #16]
   2a540:	bl	230c4 <__assert_fail@plt+0x11bfc>
   2a544:	mov	r5, r0
   2a548:	b	2a4dc <__assert_fail@plt+0x19014>
   2a54c:	cmp	r2, r3
   2a550:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a554:	movge	ip, #0
   2a558:	movlt	ip, #1
   2a55c:	strd	r6, [sp, #8]
   2a560:	orrs	ip, ip, r3, lsr #31
   2a564:	strd	r8, [sp, #16]
   2a568:	strd	sl, [sp, #24]
   2a56c:	str	lr, [sp, #32]
   2a570:	sub	sp, sp, #44	; 0x2c
   2a574:	ldr	fp, [r0]
   2a578:	ldr	r8, [sp, #80]	; 0x50
   2a57c:	bne	2a7b8 <__assert_fail@plt+0x192f0>
   2a580:	movw	lr, #0
   2a584:	movt	lr, #0
   2a588:	str	r1, [sp, #36]	; 0x24
   2a58c:	cmp	lr, #0
   2a590:	mov	ip, #1
   2a594:	moveq	ip, lr
   2a598:	movw	lr, #0
   2a59c:	movt	lr, #0
   2a5a0:	mov	r6, #1
   2a5a4:	cmp	lr, #0
   2a5a8:	mov	r4, r3
   2a5ac:	moveq	r6, lr
   2a5b0:	mov	r5, r0
   2a5b4:	orr	r3, ip, r6
   2a5b8:	mov	r7, r2
   2a5bc:	ands	r3, r3, #255	; 0xff
   2a5c0:	str	r3, [sp, #28]
   2a5c4:	beq	2a5d0 <__assert_fail@plt+0x19108>
   2a5c8:	add	r0, fp, #136	; 0x88
   2a5cc:	bl	111ec <pthread_mutex_lock@plt>
   2a5d0:	ldrb	r2, [r5, #28]
   2a5d4:	ubfx	r3, r2, #4, #1
   2a5d8:	ubfx	r1, r2, #5, #2
   2a5dc:	cmp	r8, #0
   2a5e0:	orreq	r3, r3, #1
   2a5e4:	ands	r3, r3, #255	; 0xff
   2a5e8:	str	r1, [sp, #32]
   2a5ec:	bne	2a750 <__assert_fail@plt+0x19288>
   2a5f0:	and	r2, r2, #6
   2a5f4:	ldr	r1, [r5, #24]
   2a5f8:	cmp	r2, #4
   2a5fc:	beq	2a7c8 <__assert_fail@plt+0x19300>
   2a600:	add	sl, r1, #1
   2a604:	mov	r6, sl
   2a608:	lsl	r0, sl, #3
   2a60c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2a610:	subs	r9, r0, #0
   2a614:	beq	2a7c0 <__assert_fail@plt+0x192f8>
   2a618:	ldr	ip, [sp, #32]
   2a61c:	mov	r2, r7
   2a620:	mov	r3, r4
   2a624:	mov	r0, r5
   2a628:	stm	sp, {r4, r7, sl}
   2a62c:	str	r9, [sp, #12]
   2a630:	str	ip, [sp, #16]
   2a634:	ldr	r1, [sp, #36]	; 0x24
   2a638:	bl	230c4 <__assert_fail@plt+0x11bfc>
   2a63c:	cmp	r0, #0
   2a640:	beq	2a690 <__assert_fail@plt+0x191c8>
   2a644:	cmp	r0, #1
   2a648:	mvneq	r4, #0
   2a64c:	beq	2a654 <__assert_fail@plt+0x1918c>
   2a650:	mvn	r4, #1
   2a654:	mov	r0, r9
   2a658:	bl	14484 <__assert_fail@plt+0x2fbc>
   2a65c:	ldr	r3, [sp, #28]
   2a660:	cmp	r3, #0
   2a664:	beq	2a670 <__assert_fail@plt+0x191a8>
   2a668:	add	r0, fp, #136	; 0x88
   2a66c:	bl	11144 <pthread_mutex_unlock@plt>
   2a670:	mov	r0, r4
   2a674:	add	sp, sp, #44	; 0x2c
   2a678:	ldrd	r4, [sp]
   2a67c:	ldrd	r6, [sp, #8]
   2a680:	ldrd	r8, [sp, #16]
   2a684:	ldrd	sl, [sp, #24]
   2a688:	add	sp, sp, #32
   2a68c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a690:	cmp	r8, #0
   2a694:	beq	2a744 <__assert_fail@plt+0x1927c>
   2a698:	ldrb	r7, [r5, #28]
   2a69c:	add	sl, r6, #1
   2a6a0:	ubfx	r7, r7, #1, #2
   2a6a4:	cmp	r7, #0
   2a6a8:	beq	2a764 <__assert_fail@plt+0x1929c>
   2a6ac:	cmp	r7, #1
   2a6b0:	beq	2a7f4 <__assert_fail@plt+0x1932c>
   2a6b4:	ldr	r3, [r8]
   2a6b8:	mov	r7, #2
   2a6bc:	cmp	r6, #0
   2a6c0:	ble	2a864 <__assert_fail@plt+0x1939c>
   2a6c4:	ldrd	r0, [r8, #4]
   2a6c8:	add	lr, r9, r6, lsl #3
   2a6cc:	mov	r3, r9
   2a6d0:	mov	r2, r6
   2a6d4:	sub	r0, r0, #4
   2a6d8:	sub	r1, r1, #4
   2a6dc:	ldr	ip, [r3]
   2a6e0:	add	r3, r3, #8
   2a6e4:	str	ip, [r0, #4]!
   2a6e8:	ldr	ip, [r3, #-4]
   2a6ec:	cmp	r3, lr
   2a6f0:	str	ip, [r1, #4]!
   2a6f4:	bne	2a6dc <__assert_fail@plt+0x19214>
   2a6f8:	ldr	r3, [r8]
   2a6fc:	cmp	r2, r3
   2a700:	bcs	2a72c <__assert_fail@plt+0x19264>
   2a704:	ldr	ip, [r8, #4]
   2a708:	mvn	r3, #0
   2a70c:	ldr	r0, [r8, #8]
   2a710:	str	r3, [r0, r2, lsl #2]
   2a714:	add	r6, r6, #1
   2a718:	str	r3, [ip, r2, lsl #2]
   2a71c:	mov	r2, r6
   2a720:	ldr	r1, [r8]
   2a724:	cmp	r1, r6
   2a728:	bhi	2a710 <__assert_fail@plt+0x19248>
   2a72c:	ldrb	r3, [r5, #28]
   2a730:	bfi	r3, r7, #1, #2
   2a734:	and	r2, r3, #6
   2a738:	cmp	r2, #0
   2a73c:	strb	r3, [r5, #28]
   2a740:	beq	2a650 <__assert_fail@plt+0x19188>
   2a744:	ldr	r3, [r9, #4]
   2a748:	sub	r4, r3, r4
   2a74c:	b	2a654 <__assert_fail@plt+0x1918c>
   2a750:	mov	sl, #1
   2a754:	mov	r0, #8
   2a758:	mov	r6, sl
   2a75c:	mov	r8, #0
   2a760:	b	2a60c <__assert_fail@plt+0x19144>
   2a764:	lsl	r7, sl, #2
   2a768:	str	sl, [sp, #32]
   2a76c:	mov	r0, r7
   2a770:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2a774:	cmp	r0, #0
   2a778:	str	r0, [r8, #4]
   2a77c:	ldr	r3, [sp, #32]
   2a780:	beq	2a870 <__assert_fail@plt+0x193a8>
   2a784:	mov	r0, r7
   2a788:	str	r3, [sp, #32]
   2a78c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2a790:	ldr	r3, [sp, #32]
   2a794:	cmp	r0, #0
   2a798:	mov	r7, r0
   2a79c:	movne	r7, #1
   2a7a0:	str	r0, [r8, #8]
   2a7a4:	strne	r3, [r8]
   2a7a8:	bne	2a6bc <__assert_fail@plt+0x191f4>
   2a7ac:	ldr	r0, [r8, #4]
   2a7b0:	bl	14484 <__assert_fail@plt+0x2fbc>
   2a7b4:	b	2a72c <__assert_fail@plt+0x19264>
   2a7b8:	mvn	r4, #0
   2a7bc:	b	2a670 <__assert_fail@plt+0x191a8>
   2a7c0:	mvn	r4, #1
   2a7c4:	b	2a65c <__assert_fail@plt+0x19194>
   2a7c8:	ldr	sl, [r8]
   2a7cc:	cmp	sl, r1
   2a7d0:	bhi	2a600 <__assert_fail@plt+0x19138>
   2a7d4:	cmp	sl, #0
   2a7d8:	mov	r6, sl
   2a7dc:	bgt	2a608 <__assert_fail@plt+0x19140>
   2a7e0:	mov	sl, #1
   2a7e4:	mov	r8, r3
   2a7e8:	mov	r6, sl
   2a7ec:	mov	r0, #8
   2a7f0:	b	2a60c <__assert_fail@plt+0x19144>
   2a7f4:	ldr	r3, [r8]
   2a7f8:	cmp	r3, sl
   2a7fc:	bcs	2a6bc <__assert_fail@plt+0x191f4>
   2a800:	lsl	r3, sl, #2
   2a804:	ldr	r0, [r8, #4]
   2a808:	mov	r1, r3
   2a80c:	str	r3, [sp, #36]	; 0x24
   2a810:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2a814:	subs	r2, r0, #0
   2a818:	str	r2, [sp, #32]
   2a81c:	beq	2a870 <__assert_fail@plt+0x193a8>
   2a820:	ldr	r3, [sp, #36]	; 0x24
   2a824:	ldr	r0, [r8, #8]
   2a828:	mov	r1, r3
   2a82c:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2a830:	ldr	r2, [sp, #32]
   2a834:	subs	r1, r0, #0
   2a838:	movne	r3, sl
   2a83c:	strne	sl, [r8]
   2a840:	strne	r1, [r8, #8]
   2a844:	strne	r2, [r8, #4]
   2a848:	bne	2a6bc <__assert_fail@plt+0x191f4>
   2a84c:	mov	r0, r2
   2a850:	str	r1, [sp, #32]
   2a854:	bl	14484 <__assert_fail@plt+0x2fbc>
   2a858:	ldr	r1, [sp, #32]
   2a85c:	mov	r7, r1
   2a860:	b	2a72c <__assert_fail@plt+0x19264>
   2a864:	mov	r6, #0
   2a868:	mov	r2, r6
   2a86c:	b	2a6fc <__assert_fail@plt+0x19234>
   2a870:	mov	r7, #0
   2a874:	b	2a72c <__assert_fail@plt+0x19264>
   2a878:	str	r4, [sp, #-8]!
   2a87c:	mov	r4, #0
   2a880:	str	lr, [sp, #4]
   2a884:	sub	sp, sp, #16
   2a888:	ldr	lr, [sp, #24]
   2a88c:	ldr	ip, [sp, #28]
   2a890:	str	lr, [sp]
   2a894:	str	r4, [sp, #12]
   2a898:	stmib	sp, {r2, ip}
   2a89c:	bl	29de8 <__assert_fail@plt+0x18920>
   2a8a0:	add	sp, sp, #16
   2a8a4:	ldr	r4, [sp]
   2a8a8:	add	sp, sp, #4
   2a8ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2a8b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2a8b4:	strd	r6, [sp, #8]
   2a8b8:	mov	r7, r3
   2a8bc:	strd	r8, [sp, #16]
   2a8c0:	str	sl, [sp, #24]
   2a8c4:	str	lr, [sp, #28]
   2a8c8:	sub	sp, sp, #24
   2a8cc:	ldr	r5, [sp, #56]	; 0x38
   2a8d0:	ldr	r6, [sp, #68]	; 0x44
   2a8d4:	orr	r3, r5, r2
   2a8d8:	orrs	r3, r3, r6
   2a8dc:	bmi	2a998 <__assert_fail@plt+0x194d0>
   2a8e0:	adds	r9, r2, r5
   2a8e4:	mov	r4, r2
   2a8e8:	bvs	2a998 <__assert_fail@plt+0x194d0>
   2a8ec:	cmp	r5, #0
   2a8f0:	mov	sl, r0
   2a8f4:	beq	2a9a0 <__assert_fail@plt+0x194d8>
   2a8f8:	cmp	r2, #0
   2a8fc:	str	r1, [sp, #20]
   2a900:	moveq	r8, r2
   2a904:	bne	2a964 <__assert_fail@plt+0x1949c>
   2a908:	ldr	r0, [sp, #64]	; 0x40
   2a90c:	mov	r3, #1
   2a910:	mov	ip, #0
   2a914:	mov	r2, r9
   2a918:	mov	r1, r7
   2a91c:	str	ip, [sp]
   2a920:	str	r6, [sp, #4]
   2a924:	str	r0, [sp, #8]
   2a928:	mov	r0, sl
   2a92c:	str	r3, [sp, #12]
   2a930:	ldr	r3, [sp, #60]	; 0x3c
   2a934:	bl	29de8 <__assert_fail@plt+0x18920>
   2a938:	mov	r4, r0
   2a93c:	mov	r0, r8
   2a940:	bl	14484 <__assert_fail@plt+0x2fbc>
   2a944:	mov	r0, r4
   2a948:	add	sp, sp, #24
   2a94c:	ldrd	r4, [sp]
   2a950:	ldrd	r6, [sp, #8]
   2a954:	ldrd	r8, [sp, #16]
   2a958:	ldr	sl, [sp, #24]
   2a95c:	add	sp, sp, #28
   2a960:	pop	{pc}		; (ldr pc, [sp], #4)
   2a964:	mov	r0, r9
   2a968:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2a96c:	subs	r8, r0, #0
   2a970:	beq	2a998 <__assert_fail@plt+0x194d0>
   2a974:	mov	r2, r4
   2a978:	ldr	r1, [sp, #20]
   2a97c:	bl	11204 <memcpy@plt>
   2a980:	mov	r1, r7
   2a984:	mov	r2, r5
   2a988:	add	r0, r8, r4
   2a98c:	mov	r7, r8
   2a990:	bl	11204 <memcpy@plt>
   2a994:	b	2a908 <__assert_fail@plt+0x19440>
   2a998:	mvn	r4, #1
   2a99c:	b	2a944 <__assert_fail@plt+0x1947c>
   2a9a0:	mov	r7, r1
   2a9a4:	mov	r8, r5
   2a9a8:	b	2a908 <__assert_fail@plt+0x19440>
   2a9ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2a9b0:	strd	r6, [sp, #8]
   2a9b4:	mov	r7, r3
   2a9b8:	strd	r8, [sp, #16]
   2a9bc:	str	sl, [sp, #24]
   2a9c0:	str	lr, [sp, #28]
   2a9c4:	sub	sp, sp, #24
   2a9c8:	ldr	r5, [sp, #56]	; 0x38
   2a9cc:	ldr	r6, [sp, #72]	; 0x48
   2a9d0:	orr	r3, r5, r2
   2a9d4:	orrs	r3, r3, r6
   2a9d8:	bmi	2aa90 <__assert_fail@plt+0x195c8>
   2a9dc:	adds	r9, r2, r5
   2a9e0:	mov	r4, r2
   2a9e4:	bvs	2aa90 <__assert_fail@plt+0x195c8>
   2a9e8:	cmp	r5, #0
   2a9ec:	mov	sl, r0
   2a9f0:	beq	2aa98 <__assert_fail@plt+0x195d0>
   2a9f4:	cmp	r2, #0
   2a9f8:	str	r1, [sp, #20]
   2a9fc:	moveq	r8, r2
   2aa00:	bne	2aa5c <__assert_fail@plt+0x19594>
   2aa04:	ldr	r3, [sp, #64]	; 0x40
   2aa08:	mov	ip, #0
   2aa0c:	mov	r2, r9
   2aa10:	mov	r1, r7
   2aa14:	mov	r0, sl
   2aa18:	stm	sp, {r3, r6}
   2aa1c:	ldr	r3, [sp, #68]	; 0x44
   2aa20:	str	ip, [sp, #12]
   2aa24:	str	r3, [sp, #8]
   2aa28:	ldr	r3, [sp, #60]	; 0x3c
   2aa2c:	bl	29de8 <__assert_fail@plt+0x18920>
   2aa30:	mov	r4, r0
   2aa34:	mov	r0, r8
   2aa38:	bl	14484 <__assert_fail@plt+0x2fbc>
   2aa3c:	mov	r0, r4
   2aa40:	add	sp, sp, #24
   2aa44:	ldrd	r4, [sp]
   2aa48:	ldrd	r6, [sp, #8]
   2aa4c:	ldrd	r8, [sp, #16]
   2aa50:	ldr	sl, [sp, #24]
   2aa54:	add	sp, sp, #28
   2aa58:	pop	{pc}		; (ldr pc, [sp], #4)
   2aa5c:	mov	r0, r9
   2aa60:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2aa64:	subs	r8, r0, #0
   2aa68:	beq	2aa90 <__assert_fail@plt+0x195c8>
   2aa6c:	mov	r2, r4
   2aa70:	ldr	r1, [sp, #20]
   2aa74:	bl	11204 <memcpy@plt>
   2aa78:	mov	r1, r7
   2aa7c:	mov	r2, r5
   2aa80:	add	r0, r8, r4
   2aa84:	mov	r7, r8
   2aa88:	bl	11204 <memcpy@plt>
   2aa8c:	b	2aa04 <__assert_fail@plt+0x1953c>
   2aa90:	mvn	r4, #1
   2aa94:	b	2aa3c <__assert_fail@plt+0x19574>
   2aa98:	mov	r7, r1
   2aa9c:	mov	r8, r5
   2aaa0:	b	2aa04 <__assert_fail@plt+0x1953c>
   2aaa4:	cmp	r2, #0
   2aaa8:	beq	2aad0 <__assert_fail@plt+0x19608>
   2aaac:	ldrb	ip, [r0, #28]
   2aab0:	push	{lr}		; (str lr, [sp, #-4]!)
   2aab4:	mov	lr, #1
   2aab8:	bfi	ip, lr, #1, #2
   2aabc:	strb	ip, [r0, #28]
   2aac0:	strd	r2, [r1]
   2aac4:	ldr	r3, [sp, #4]
   2aac8:	str	r3, [r1, #8]
   2aacc:	pop	{pc}		; (ldr pc, [sp], #4)
   2aad0:	ldrb	r3, [r0, #28]
   2aad4:	bfi	r3, r2, #1, #2
   2aad8:	strb	r3, [r0, #28]
   2aadc:	str	r2, [r1]
   2aae0:	str	r2, [r1, #4]
   2aae4:	str	r2, [r1, #8]
   2aae8:	bx	lr
   2aaec:	strd	r4, [sp, #-16]!
   2aaf0:	mov	r4, r1
   2aaf4:	mov	r1, #0
   2aaf8:	mov	r2, r4
   2aafc:	mov	r5, r0
   2ab00:	str	r6, [sp, #8]
   2ab04:	str	lr, [sp, #12]
   2ab08:	bl	11420 <memchr@plt>
   2ab0c:	cmp	r0, #0
   2ab10:	ldr	r6, [sp, #8]
   2ab14:	subne	r0, r0, r5
   2ab18:	moveq	r0, r4
   2ab1c:	ldrd	r4, [sp]
   2ab20:	add	sp, sp, #12
   2ab24:	addne	r0, r0, #1
   2ab28:	pop	{pc}		; (ldr pc, [sp], #4)
   2ab2c:	mov	r3, r0
   2ab30:	push	{lr}		; (str lr, [sp, #-4]!)
   2ab34:	ldrb	r0, [r0]
   2ab38:	ldrb	r2, [r1]
   2ab3c:	cmp	r0, #45	; 0x2d
   2ab40:	beq	2abe0 <__assert_fail@plt+0x19718>
   2ab44:	cmp	r2, #45	; 0x2d
   2ab48:	beq	2ac1c <__assert_fail@plt+0x19754>
   2ab4c:	cmp	r0, #48	; 0x30
   2ab50:	beq	2acec <__assert_fail@plt+0x19824>
   2ab54:	cmp	r2, #48	; 0x30
   2ab58:	beq	2ace4 <__assert_fail@plt+0x1981c>
   2ab5c:	cmp	r2, r0
   2ab60:	sub	ip, r0, #48	; 0x30
   2ab64:	bne	2ab84 <__assert_fail@plt+0x196bc>
   2ab68:	cmp	ip, #9
   2ab6c:	bhi	2ad14 <__assert_fail@plt+0x1984c>
   2ab70:	ldrb	r0, [r3, #1]!
   2ab74:	ldrb	r2, [r1, #1]!
   2ab78:	sub	ip, r0, #48	; 0x30
   2ab7c:	cmp	r0, r2
   2ab80:	beq	2ab68 <__assert_fail@plt+0x196a0>
   2ab84:	cmp	ip, #9
   2ab88:	sub	r0, r0, r2
   2ab8c:	bhi	2ad18 <__assert_fail@plt+0x19850>
   2ab90:	mov	lr, #0
   2ab94:	ldrb	ip, [r3, #1]!
   2ab98:	add	lr, lr, #1
   2ab9c:	sub	ip, ip, #48	; 0x30
   2aba0:	cmp	ip, #9
   2aba4:	bls	2ab94 <__assert_fail@plt+0x196cc>
   2aba8:	sub	r3, r2, #48	; 0x30
   2abac:	cmp	r3, #9
   2abb0:	bhi	2ad30 <__assert_fail@plt+0x19868>
   2abb4:	mov	r2, #0
   2abb8:	ldrb	r3, [r1, #1]!
   2abbc:	add	r2, r2, #1
   2abc0:	sub	r3, r3, #48	; 0x30
   2abc4:	cmp	r3, #9
   2abc8:	bls	2abb8 <__assert_fail@plt+0x196f0>
   2abcc:	cmp	lr, r2
   2abd0:	beq	2acfc <__assert_fail@plt+0x19834>
   2abd4:	bcs	2ac34 <__assert_fail@plt+0x1976c>
   2abd8:	mvn	r0, #0
   2abdc:	pop	{pc}		; (ldr pc, [sp], #4)
   2abe0:	ldrb	r0, [r3, #1]!
   2abe4:	cmp	r0, #48	; 0x30
   2abe8:	beq	2abe0 <__assert_fail@plt+0x19718>
   2abec:	cmp	r2, #45	; 0x2d
   2abf0:	sub	ip, r0, #48	; 0x30
   2abf4:	beq	2ac5c <__assert_fail@plt+0x19794>
   2abf8:	cmp	ip, #9
   2abfc:	bls	2abd8 <__assert_fail@plt+0x19710>
   2ac00:	cmp	r2, #48	; 0x30
   2ac04:	beq	2acf4 <__assert_fail@plt+0x1982c>
   2ac08:	sub	r0, r2, #48	; 0x30
   2ac0c:	cmp	r0, #9
   2ac10:	movhi	r0, #0
   2ac14:	mvnls	r0, #0
   2ac18:	pop	{pc}		; (ldr pc, [sp], #4)
   2ac1c:	ldrb	r2, [r1, #1]!
   2ac20:	cmp	r2, #48	; 0x30
   2ac24:	beq	2ac1c <__assert_fail@plt+0x19754>
   2ac28:	sub	r2, r2, #48	; 0x30
   2ac2c:	cmp	r2, #9
   2ac30:	bhi	2ac40 <__assert_fail@plt+0x19778>
   2ac34:	mov	r0, #1
   2ac38:	pop	{pc}		; (ldr pc, [sp], #4)
   2ac3c:	ldrb	r0, [r3, #1]!
   2ac40:	cmp	r0, #48	; 0x30
   2ac44:	beq	2ac3c <__assert_fail@plt+0x19774>
   2ac48:	sub	r0, r0, #48	; 0x30
   2ac4c:	cmp	r0, #9
   2ac50:	movhi	r0, #0
   2ac54:	movls	r0, #1
   2ac58:	b	2ac38 <__assert_fail@plt+0x19770>
   2ac5c:	ldrb	r2, [r1, #1]!
   2ac60:	cmp	r2, #48	; 0x30
   2ac64:	beq	2ac5c <__assert_fail@plt+0x19794>
   2ac68:	cmp	r0, r2
   2ac6c:	bne	2ac8c <__assert_fail@plt+0x197c4>
   2ac70:	cmp	ip, #9
   2ac74:	bhi	2ad3c <__assert_fail@plt+0x19874>
   2ac78:	ldrb	r0, [r3, #1]!
   2ac7c:	ldrb	r2, [r1, #1]!
   2ac80:	sub	ip, r0, #48	; 0x30
   2ac84:	cmp	r0, r2
   2ac88:	beq	2ac70 <__assert_fail@plt+0x197a8>
   2ac8c:	cmp	ip, #9
   2ac90:	sub	r0, r2, r0
   2ac94:	bhi	2ad40 <__assert_fail@plt+0x19878>
   2ac98:	mov	lr, #0
   2ac9c:	ldrb	ip, [r3, #1]!
   2aca0:	add	lr, lr, #1
   2aca4:	sub	ip, ip, #48	; 0x30
   2aca8:	cmp	ip, #9
   2acac:	bls	2ac9c <__assert_fail@plt+0x197d4>
   2acb0:	sub	r2, r2, #48	; 0x30
   2acb4:	cmp	r2, #9
   2acb8:	bhi	2ad54 <__assert_fail@plt+0x1988c>
   2acbc:	mov	r2, #0
   2acc0:	ldrb	r3, [r1, #1]!
   2acc4:	add	r2, r2, #1
   2acc8:	sub	r3, r3, #48	; 0x30
   2accc:	cmp	r3, #9
   2acd0:	bls	2acc0 <__assert_fail@plt+0x197f8>
   2acd4:	cmp	r2, lr
   2acd8:	beq	2ad08 <__assert_fail@plt+0x19840>
   2acdc:	bhi	2ac34 <__assert_fail@plt+0x1976c>
   2ace0:	b	2abd8 <__assert_fail@plt+0x19710>
   2ace4:	ldrb	r2, [r1, #1]!
   2ace8:	b	2ab54 <__assert_fail@plt+0x1968c>
   2acec:	ldrb	r0, [r3, #1]!
   2acf0:	b	2ab4c <__assert_fail@plt+0x19684>
   2acf4:	ldrb	r2, [r1, #1]!
   2acf8:	b	2ac00 <__assert_fail@plt+0x19738>
   2acfc:	cmp	lr, #0
   2ad00:	moveq	r0, #0
   2ad04:	b	2ac38 <__assert_fail@plt+0x19770>
   2ad08:	cmp	r2, #0
   2ad0c:	moveq	r0, #0
   2ad10:	b	2ac38 <__assert_fail@plt+0x19770>
   2ad14:	sub	r0, r0, r2
   2ad18:	sub	r3, r2, #48	; 0x30
   2ad1c:	cmp	r3, #9
   2ad20:	movls	lr, #0
   2ad24:	bls	2abb4 <__assert_fail@plt+0x196ec>
   2ad28:	mov	r0, #0
   2ad2c:	b	2ac38 <__assert_fail@plt+0x19770>
   2ad30:	adds	r0, lr, #0
   2ad34:	movne	r0, #1
   2ad38:	b	2ac38 <__assert_fail@plt+0x19770>
   2ad3c:	sub	r0, r2, r0
   2ad40:	sub	r2, r2, #48	; 0x30
   2ad44:	cmp	r2, #9
   2ad48:	movls	lr, #0
   2ad4c:	bls	2acbc <__assert_fail@plt+0x197f4>
   2ad50:	b	2ad28 <__assert_fail@plt+0x19860>
   2ad54:	adds	r0, lr, #0
   2ad58:	movne	r0, #1
   2ad5c:	rsb	r0, r0, #0
   2ad60:	b	2ac38 <__assert_fail@plt+0x19770>
   2ad64:	cmp	r1, #0
   2ad68:	strd	r4, [sp, #-16]!
   2ad6c:	mov	ip, r3
   2ad70:	str	r6, [sp, #8]
   2ad74:	mov	r4, r0
   2ad78:	str	lr, [sp, #12]
   2ad7c:	sub	sp, sp, #32
   2ad80:	ldr	r5, [sp, #48]	; 0x30
   2ad84:	ldr	r6, [sp, #52]	; 0x34
   2ad88:	beq	2aecc <__assert_fail@plt+0x19a04>
   2ad8c:	mov	r3, r1
   2ad90:	mov	r1, #1
   2ad94:	stm	sp, {r2, ip}
   2ad98:	movw	r2, #53468	; 0xd0dc
   2ad9c:	movt	r2, #2
   2ada0:	bl	11414 <__fprintf_chk@plt>
   2ada4:	mov	r2, #5
   2ada8:	movw	r1, #53488	; 0xd0f0
   2adac:	movt	r1, #2
   2adb0:	mov	r0, #0
   2adb4:	bl	11258 <dcgettext@plt>
   2adb8:	movw	ip, #2022	; 0x7e6
   2adbc:	mov	r3, r0
   2adc0:	mov	r1, #1
   2adc4:	movw	r2, #54216	; 0xd3c8
   2adc8:	movt	r2, #2
   2adcc:	mov	r0, r4
   2add0:	str	ip, [sp]
   2add4:	bl	11414 <__fprintf_chk@plt>
   2add8:	mov	r1, r4
   2addc:	mov	r0, #10
   2ade0:	bl	1124c <fputc_unlocked@plt>
   2ade4:	mov	r2, #5
   2ade8:	movw	r1, #53492	; 0xd0f4
   2adec:	movt	r1, #2
   2adf0:	mov	r0, #0
   2adf4:	bl	11258 <dcgettext@plt>
   2adf8:	mov	r2, r0
   2adfc:	mov	r1, #1
   2ae00:	movw	r3, #53664	; 0xd1a0
   2ae04:	movt	r3, #2
   2ae08:	mov	r0, r4
   2ae0c:	bl	11414 <__fprintf_chk@plt>
   2ae10:	mov	r1, r4
   2ae14:	mov	r0, #10
   2ae18:	bl	1124c <fputc_unlocked@plt>
   2ae1c:	cmp	r6, #9
   2ae20:	ldrls	pc, [pc, r6, lsl #2]
   2ae24:	b	2b138 <__assert_fail@plt+0x19c70>
   2ae28:			; <UNDEFINED> instruction: 0x0002aeb8
   2ae2c:	andeq	sl, r2, r8, ror #29
   2ae30:	andeq	sl, r2, r4, lsr #30
   2ae34:	andeq	sl, r2, r4, ror #30
   2ae38:	andeq	sl, r2, ip, lsr #31
   2ae3c:	andeq	sl, r2, r4, ror #31
   2ae40:	andeq	fp, r2, ip, lsr #32
   2ae44:	andeq	fp, r2, r0, lsl #1
   2ae48:	ldrdeq	fp, [r2], -r8
   2ae4c:	andeq	sl, r2, r0, asr lr
   2ae50:	movw	r1, #53968	; 0xd2d0
   2ae54:	movt	r1, #2
   2ae58:	mov	r2, #5
   2ae5c:	mov	r0, #0
   2ae60:	bl	11258 <dcgettext@plt>
   2ae64:	ldr	lr, [r5, #4]
   2ae68:	mov	r2, r0
   2ae6c:	mov	r1, #1
   2ae70:	mov	r0, r4
   2ae74:	ldr	r3, [r5, #8]
   2ae78:	ldr	ip, [r5, #32]
   2ae7c:	str	lr, [sp]
   2ae80:	ldr	lr, [r5, #12]
   2ae84:	str	ip, [sp, #28]
   2ae88:	ldr	ip, [r5, #28]
   2ae8c:	str	r3, [sp, #4]
   2ae90:	ldr	r3, [r5, #16]
   2ae94:	str	lr, [sp, #8]
   2ae98:	ldr	lr, [r5, #20]
   2ae9c:	str	ip, [sp, #24]
   2aea0:	ldr	ip, [r5, #24]
   2aea4:	str	r3, [sp, #12]
   2aea8:	ldr	r3, [r5]
   2aeac:	str	lr, [sp, #16]
   2aeb0:	str	ip, [sp, #20]
   2aeb4:	bl	11414 <__fprintf_chk@plt>
   2aeb8:	add	sp, sp, #32
   2aebc:	ldrd	r4, [sp]
   2aec0:	ldr	r6, [sp, #8]
   2aec4:	add	sp, sp, #12
   2aec8:	pop	{pc}		; (ldr pc, [sp], #4)
   2aecc:	mov	r3, r2
   2aed0:	mov	r1, #1
   2aed4:	str	ip, [sp]
   2aed8:	movw	r2, #53480	; 0xd0e8
   2aedc:	movt	r2, #2
   2aee0:	bl	11414 <__fprintf_chk@plt>
   2aee4:	b	2ada4 <__assert_fail@plt+0x198dc>
   2aee8:	mov	r2, #5
   2aeec:	movw	r1, #53700	; 0xd1c4
   2aef0:	movt	r1, #2
   2aef4:	mov	r0, #0
   2aef8:	bl	11258 <dcgettext@plt>
   2aefc:	ldr	r3, [r5]
   2af00:	mov	r2, r0
   2af04:	mov	r1, #1
   2af08:	mov	r0, r4
   2af0c:	add	sp, sp, #32
   2af10:	ldrd	r4, [sp]
   2af14:	ldr	r6, [sp, #8]
   2af18:	ldr	lr, [sp, #12]
   2af1c:	add	sp, sp, #16
   2af20:	b	11414 <__fprintf_chk@plt>
   2af24:	mov	r2, #5
   2af28:	movw	r1, #53716	; 0xd1d4
   2af2c:	movt	r1, #2
   2af30:	mov	r0, #0
   2af34:	bl	11258 <dcgettext@plt>
   2af38:	ldm	r5, {r3, ip}
   2af3c:	mov	r2, r0
   2af40:	mov	r1, #1
   2af44:	mov	r0, r4
   2af48:	str	ip, [sp, #48]	; 0x30
   2af4c:	add	sp, sp, #32
   2af50:	ldrd	r4, [sp]
   2af54:	ldr	r6, [sp, #8]
   2af58:	ldr	lr, [sp, #12]
   2af5c:	add	sp, sp, #16
   2af60:	b	11414 <__fprintf_chk@plt>
   2af64:	mov	r2, #5
   2af68:	movw	r1, #53740	; 0xd1ec
   2af6c:	movt	r1, #2
   2af70:	mov	r0, #0
   2af74:	bl	11258 <dcgettext@plt>
   2af78:	ldm	r5, {r3, lr}
   2af7c:	mov	r2, r0
   2af80:	mov	r1, #1
   2af84:	mov	r0, r4
   2af88:	ldr	ip, [r5, #8]
   2af8c:	str	lr, [sp, #48]	; 0x30
   2af90:	str	ip, [sp, #52]	; 0x34
   2af94:	add	sp, sp, #32
   2af98:	ldrd	r4, [sp]
   2af9c:	ldr	r6, [sp, #8]
   2afa0:	ldr	lr, [sp, #12]
   2afa4:	add	sp, sp, #16
   2afa8:	b	11414 <__fprintf_chk@plt>
   2afac:	mov	r2, #5
   2afb0:	movw	r1, #53768	; 0xd208
   2afb4:	movt	r1, #2
   2afb8:	mov	r0, #0
   2afbc:	bl	11258 <dcgettext@plt>
   2afc0:	ldmib	r5, {r3, ip, lr}
   2afc4:	mov	r2, r0
   2afc8:	mov	r1, #1
   2afcc:	mov	r0, r4
   2afd0:	str	r3, [sp]
   2afd4:	ldr	r3, [r5]
   2afd8:	stmib	sp, {ip, lr}
   2afdc:	bl	11414 <__fprintf_chk@plt>
   2afe0:	b	2aeb8 <__assert_fail@plt+0x199f0>
   2afe4:	mov	r2, #5
   2afe8:	movw	r1, #53800	; 0xd228
   2afec:	movt	r1, #2
   2aff0:	mov	r0, #0
   2aff4:	bl	11258 <dcgettext@plt>
   2aff8:	ldmib	r5, {ip, lr}
   2affc:	mov	r2, r0
   2b000:	mov	r1, #1
   2b004:	mov	r0, r4
   2b008:	ldr	r3, [r5, #16]
   2b00c:	str	ip, [sp]
   2b010:	ldr	ip, [r5, #12]
   2b014:	str	r3, [sp, #12]
   2b018:	ldr	r3, [r5]
   2b01c:	str	lr, [sp, #4]
   2b020:	str	ip, [sp, #8]
   2b024:	bl	11414 <__fprintf_chk@plt>
   2b028:	b	2aeb8 <__assert_fail@plt+0x199f0>
   2b02c:	mov	r2, #5
   2b030:	movw	r1, #53836	; 0xd24c
   2b034:	movt	r1, #2
   2b038:	mov	r0, #0
   2b03c:	bl	11258 <dcgettext@plt>
   2b040:	ldr	lr, [r5, #4]
   2b044:	mov	r2, r0
   2b048:	mov	r1, #1
   2b04c:	mov	r0, r4
   2b050:	ldr	r3, [r5, #8]
   2b054:	ldr	ip, [r5, #20]
   2b058:	str	lr, [sp]
   2b05c:	ldr	lr, [r5, #12]
   2b060:	str	ip, [sp, #16]
   2b064:	ldr	ip, [r5, #16]
   2b068:	str	r3, [sp, #4]
   2b06c:	ldr	r3, [r5]
   2b070:	str	lr, [sp, #8]
   2b074:	str	ip, [sp, #12]
   2b078:	bl	11414 <__fprintf_chk@plt>
   2b07c:	b	2aeb8 <__assert_fail@plt+0x199f0>
   2b080:	mov	r2, #5
   2b084:	movw	r1, #53876	; 0xd274
   2b088:	movt	r1, #2
   2b08c:	mov	r0, #0
   2b090:	bl	11258 <dcgettext@plt>
   2b094:	ldmib	r5, {r3, ip}
   2b098:	mov	r2, r0
   2b09c:	mov	r1, #1
   2b0a0:	mov	r0, r4
   2b0a4:	ldr	lr, [r5, #24]
   2b0a8:	str	r3, [sp]
   2b0ac:	ldr	r3, [r5, #12]
   2b0b0:	str	lr, [sp, #20]
   2b0b4:	ldr	lr, [r5, #20]
   2b0b8:	str	ip, [sp, #4]
   2b0bc:	ldr	ip, [r5, #16]
   2b0c0:	str	r3, [sp, #8]
   2b0c4:	ldr	r3, [r5]
   2b0c8:	str	ip, [sp, #12]
   2b0cc:	str	lr, [sp, #16]
   2b0d0:	bl	11414 <__fprintf_chk@plt>
   2b0d4:	b	2aeb8 <__assert_fail@plt+0x199f0>
   2b0d8:	mov	r2, #5
   2b0dc:	movw	r1, #53920	; 0xd2a0
   2b0e0:	movt	r1, #2
   2b0e4:	mov	r0, #0
   2b0e8:	bl	11258 <dcgettext@plt>
   2b0ec:	ldmib	r5, {ip, lr}
   2b0f0:	mov	r2, r0
   2b0f4:	mov	r1, #1
   2b0f8:	mov	r0, r4
   2b0fc:	ldr	r3, [r5, #28]
   2b100:	str	ip, [sp]
   2b104:	ldr	ip, [r5, #12]
   2b108:	str	r3, [sp, #24]
   2b10c:	ldr	r3, [r5, #24]
   2b110:	str	lr, [sp, #4]
   2b114:	ldr	lr, [r5, #16]
   2b118:	str	ip, [sp, #8]
   2b11c:	ldr	ip, [r5, #20]
   2b120:	str	r3, [sp, #20]
   2b124:	ldr	r3, [r5]
   2b128:	str	lr, [sp, #12]
   2b12c:	str	ip, [sp, #16]
   2b130:	bl	11414 <__fprintf_chk@plt>
   2b134:	b	2aeb8 <__assert_fail@plt+0x199f0>
   2b138:	movw	r1, #54020	; 0xd304
   2b13c:	movt	r1, #2
   2b140:	b	2ae58 <__assert_fail@plt+0x19990>
   2b144:	strd	r4, [sp, #-12]!
   2b148:	str	lr, [sp, #8]
   2b14c:	sub	sp, sp, #12
   2b150:	ldr	r5, [sp, #24]
   2b154:	ldr	ip, [r5]
   2b158:	cmp	ip, #0
   2b15c:	beq	2b178 <__assert_fail@plt+0x19cb0>
   2b160:	mov	lr, r5
   2b164:	mov	ip, #0
   2b168:	ldr	r4, [lr, #4]!
   2b16c:	add	ip, ip, #1
   2b170:	cmp	r4, #0
   2b174:	bne	2b168 <__assert_fail@plt+0x19ca0>
   2b178:	stm	sp, {r5, ip}
   2b17c:	bl	2ad64 <__assert_fail@plt+0x1989c>
   2b180:	add	sp, sp, #12
   2b184:	ldrd	r4, [sp]
   2b188:	add	sp, sp, #8
   2b18c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b190:	push	{lr}		; (str lr, [sp, #-4]!)
   2b194:	sub	sp, sp, #52	; 0x34
   2b198:	ldr	ip, [sp, #56]	; 0x38
   2b19c:	ldr	lr, [ip]
   2b1a0:	cmp	lr, #0
   2b1a4:	str	lr, [sp, #8]
   2b1a8:	beq	2b240 <__assert_fail@plt+0x19d78>
   2b1ac:	ldr	lr, [ip, #4]
   2b1b0:	cmp	lr, #0
   2b1b4:	str	lr, [sp, #12]
   2b1b8:	beq	2b254 <__assert_fail@plt+0x19d8c>
   2b1bc:	ldr	lr, [ip, #8]
   2b1c0:	cmp	lr, #0
   2b1c4:	str	lr, [sp, #16]
   2b1c8:	beq	2b25c <__assert_fail@plt+0x19d94>
   2b1cc:	ldr	lr, [ip, #12]
   2b1d0:	cmp	lr, #0
   2b1d4:	str	lr, [sp, #20]
   2b1d8:	beq	2b264 <__assert_fail@plt+0x19d9c>
   2b1dc:	ldr	lr, [ip, #16]
   2b1e0:	cmp	lr, #0
   2b1e4:	str	lr, [sp, #24]
   2b1e8:	beq	2b26c <__assert_fail@plt+0x19da4>
   2b1ec:	ldr	lr, [ip, #20]
   2b1f0:	cmp	lr, #0
   2b1f4:	str	lr, [sp, #28]
   2b1f8:	beq	2b274 <__assert_fail@plt+0x19dac>
   2b1fc:	ldr	lr, [ip, #24]
   2b200:	cmp	lr, #0
   2b204:	str	lr, [sp, #32]
   2b208:	beq	2b27c <__assert_fail@plt+0x19db4>
   2b20c:	ldr	lr, [ip, #28]
   2b210:	cmp	lr, #0
   2b214:	str	lr, [sp, #36]	; 0x24
   2b218:	beq	2b284 <__assert_fail@plt+0x19dbc>
   2b21c:	ldr	lr, [ip, #32]
   2b220:	cmp	lr, #0
   2b224:	str	lr, [sp, #40]	; 0x28
   2b228:	beq	2b28c <__assert_fail@plt+0x19dc4>
   2b22c:	ldr	ip, [ip, #36]	; 0x24
   2b230:	cmp	ip, #0
   2b234:	str	ip, [sp, #44]	; 0x2c
   2b238:	movne	lr, #10
   2b23c:	moveq	lr, #9
   2b240:	add	ip, sp, #8
   2b244:	stm	sp, {ip, lr}
   2b248:	bl	2ad64 <__assert_fail@plt+0x1989c>
   2b24c:	add	sp, sp, #52	; 0x34
   2b250:	pop	{pc}		; (ldr pc, [sp], #4)
   2b254:	mov	lr, #1
   2b258:	b	2b240 <__assert_fail@plt+0x19d78>
   2b25c:	mov	lr, #2
   2b260:	b	2b240 <__assert_fail@plt+0x19d78>
   2b264:	mov	lr, #3
   2b268:	b	2b240 <__assert_fail@plt+0x19d78>
   2b26c:	mov	lr, #4
   2b270:	b	2b240 <__assert_fail@plt+0x19d78>
   2b274:	mov	lr, #5
   2b278:	b	2b240 <__assert_fail@plt+0x19d78>
   2b27c:	mov	lr, #6
   2b280:	b	2b240 <__assert_fail@plt+0x19d78>
   2b284:	mov	lr, #7
   2b288:	b	2b240 <__assert_fail@plt+0x19d78>
   2b28c:	mov	lr, #8
   2b290:	b	2b240 <__assert_fail@plt+0x19d78>
   2b294:	push	{r3}		; (str r3, [sp, #-4]!)
   2b298:	push	{lr}		; (str lr, [sp, #-4]!)
   2b29c:	sub	sp, sp, #56	; 0x38
   2b2a0:	ldr	ip, [sp, #64]	; 0x40
   2b2a4:	add	r3, sp, #64	; 0x40
   2b2a8:	str	r3, [sp, #12]
   2b2ac:	cmp	ip, #0
   2b2b0:	str	ip, [sp, #16]
   2b2b4:	beq	2b34c <__assert_fail@plt+0x19e84>
   2b2b8:	ldr	ip, [sp, #68]	; 0x44
   2b2bc:	cmp	ip, #0
   2b2c0:	str	ip, [sp, #20]
   2b2c4:	beq	2b370 <__assert_fail@plt+0x19ea8>
   2b2c8:	ldr	ip, [sp, #72]	; 0x48
   2b2cc:	cmp	ip, #0
   2b2d0:	str	ip, [sp, #24]
   2b2d4:	beq	2b378 <__assert_fail@plt+0x19eb0>
   2b2d8:	ldr	ip, [sp, #76]	; 0x4c
   2b2dc:	cmp	ip, #0
   2b2e0:	str	ip, [sp, #28]
   2b2e4:	beq	2b380 <__assert_fail@plt+0x19eb8>
   2b2e8:	ldr	ip, [sp, #80]	; 0x50
   2b2ec:	cmp	ip, #0
   2b2f0:	str	ip, [sp, #32]
   2b2f4:	beq	2b388 <__assert_fail@plt+0x19ec0>
   2b2f8:	ldr	ip, [sp, #84]	; 0x54
   2b2fc:	cmp	ip, #0
   2b300:	str	ip, [sp, #36]	; 0x24
   2b304:	beq	2b390 <__assert_fail@plt+0x19ec8>
   2b308:	ldr	ip, [sp, #88]	; 0x58
   2b30c:	cmp	ip, #0
   2b310:	str	ip, [sp, #40]	; 0x28
   2b314:	beq	2b398 <__assert_fail@plt+0x19ed0>
   2b318:	ldr	ip, [sp, #92]	; 0x5c
   2b31c:	cmp	ip, #0
   2b320:	str	ip, [sp, #44]	; 0x2c
   2b324:	beq	2b3a0 <__assert_fail@plt+0x19ed8>
   2b328:	ldr	ip, [sp, #96]	; 0x60
   2b32c:	cmp	ip, #0
   2b330:	str	ip, [sp, #48]	; 0x30
   2b334:	beq	2b3a8 <__assert_fail@plt+0x19ee0>
   2b338:	ldr	r3, [sp, #100]	; 0x64
   2b33c:	cmp	r3, #0
   2b340:	str	r3, [sp, #52]	; 0x34
   2b344:	movne	ip, #10
   2b348:	moveq	ip, #9
   2b34c:	ldr	r3, [sp, #60]	; 0x3c
   2b350:	add	lr, sp, #16
   2b354:	str	lr, [sp]
   2b358:	str	ip, [sp, #4]
   2b35c:	bl	2ad64 <__assert_fail@plt+0x1989c>
   2b360:	add	sp, sp, #56	; 0x38
   2b364:	pop	{lr}		; (ldr lr, [sp], #4)
   2b368:	add	sp, sp, #4
   2b36c:	bx	lr
   2b370:	mov	ip, #1
   2b374:	b	2b34c <__assert_fail@plt+0x19e84>
   2b378:	mov	ip, #2
   2b37c:	b	2b34c <__assert_fail@plt+0x19e84>
   2b380:	mov	ip, #3
   2b384:	b	2b34c <__assert_fail@plt+0x19e84>
   2b388:	mov	ip, #4
   2b38c:	b	2b34c <__assert_fail@plt+0x19e84>
   2b390:	mov	ip, #5
   2b394:	b	2b34c <__assert_fail@plt+0x19e84>
   2b398:	mov	ip, #6
   2b39c:	b	2b34c <__assert_fail@plt+0x19e84>
   2b3a0:	mov	ip, #7
   2b3a4:	b	2b34c <__assert_fail@plt+0x19e84>
   2b3a8:	mov	ip, #8
   2b3ac:	b	2b34c <__assert_fail@plt+0x19e84>
   2b3b0:	movw	r3, #57764	; 0xe1a4
   2b3b4:	movt	r3, #3
   2b3b8:	str	r4, [sp, #-8]!
   2b3bc:	mov	r0, #10
   2b3c0:	ldr	r1, [r3]
   2b3c4:	str	lr, [sp, #4]
   2b3c8:	bl	1124c <fputc_unlocked@plt>
   2b3cc:	mov	r2, #5
   2b3d0:	movw	r1, #54080	; 0xd340
   2b3d4:	movt	r1, #2
   2b3d8:	mov	r0, #0
   2b3dc:	bl	11258 <dcgettext@plt>
   2b3e0:	mov	r1, r0
   2b3e4:	movw	r2, #54100	; 0xd354
   2b3e8:	movt	r2, #2
   2b3ec:	mov	r0, #1
   2b3f0:	bl	113fc <__printf_chk@plt>
   2b3f4:	mov	r2, #5
   2b3f8:	movw	r1, #54124	; 0xd36c
   2b3fc:	movt	r1, #2
   2b400:	mov	r0, #0
   2b404:	bl	11258 <dcgettext@plt>
   2b408:	mov	r1, r0
   2b40c:	movw	r3, #51620	; 0xc9a4
   2b410:	movt	r3, #2
   2b414:	movw	r2, #51660	; 0xc9cc
   2b418:	movt	r2, #2
   2b41c:	mov	r0, #1
   2b420:	bl	113fc <__printf_chk@plt>
   2b424:	mov	r2, #5
   2b428:	movw	r1, #54144	; 0xd380
   2b42c:	movt	r1, #2
   2b430:	mov	r0, #0
   2b434:	bl	11258 <dcgettext@plt>
   2b438:	mov	r1, r0
   2b43c:	movw	r2, #54184	; 0xd3a8
   2b440:	movt	r2, #2
   2b444:	mov	r0, #1
   2b448:	ldr	r4, [sp]
   2b44c:	ldr	lr, [sp, #4]
   2b450:	add	sp, sp, #8
   2b454:	b	113fc <__printf_chk@plt>
   2b458:	strd	r4, [sp, #-16]!
   2b45c:	mov	r4, r0
   2b460:	mov	r5, r2
   2b464:	str	r6, [sp, #8]
   2b468:	mov	r6, r1
   2b46c:	str	lr, [sp, #12]
   2b470:	bl	2bf84 <__assert_fail@plt+0x1aabc>
   2b474:	cmp	r0, #0
   2b478:	beq	2b48c <__assert_fail@plt+0x19fc4>
   2b47c:	ldrd	r4, [sp]
   2b480:	ldr	r6, [sp, #8]
   2b484:	add	sp, sp, #12
   2b488:	pop	{pc}		; (ldr pc, [sp], #4)
   2b48c:	cmp	r4, #0
   2b490:	beq	2b4a0 <__assert_fail@plt+0x19fd8>
   2b494:	cmp	r6, #0
   2b498:	cmpne	r5, #0
   2b49c:	beq	2b47c <__assert_fail@plt+0x19fb4>
   2b4a0:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b4a4:	str	r4, [sp, #-8]!
   2b4a8:	str	lr, [sp, #4]
   2b4ac:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2b4b0:	cmp	r0, #0
   2b4b4:	beq	2b4c4 <__assert_fail@plt+0x19ffc>
   2b4b8:	ldr	r4, [sp]
   2b4bc:	add	sp, sp, #4
   2b4c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b4c4:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b4c8:	str	r4, [sp, #-8]!
   2b4cc:	str	lr, [sp, #4]
   2b4d0:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2b4d4:	cmp	r0, #0
   2b4d8:	beq	2b4e8 <__assert_fail@plt+0x1a020>
   2b4dc:	ldr	r4, [sp]
   2b4e0:	add	sp, sp, #4
   2b4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   2b4e8:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b4ec:	str	r4, [sp, #-8]!
   2b4f0:	str	lr, [sp, #4]
   2b4f4:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2b4f8:	cmp	r0, #0
   2b4fc:	beq	2b50c <__assert_fail@plt+0x1a044>
   2b500:	ldr	r4, [sp]
   2b504:	add	sp, sp, #4
   2b508:	pop	{pc}		; (ldr pc, [sp], #4)
   2b50c:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b510:	strd	r4, [sp, #-16]!
   2b514:	mov	r5, r0
   2b518:	mov	r4, r1
   2b51c:	str	r6, [sp, #8]
   2b520:	str	lr, [sp, #12]
   2b524:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2b528:	cmp	r0, #0
   2b52c:	beq	2b540 <__assert_fail@plt+0x1a078>
   2b530:	ldrd	r4, [sp]
   2b534:	ldr	r6, [sp, #8]
   2b538:	add	sp, sp, #12
   2b53c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b540:	adds	r4, r4, #0
   2b544:	movne	r4, #1
   2b548:	cmp	r5, #0
   2b54c:	moveq	r4, #1
   2b550:	cmp	r4, #0
   2b554:	beq	2b530 <__assert_fail@plt+0x1a068>
   2b558:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b55c:	cmp	r1, #0
   2b560:	orreq	r1, r1, #1
   2b564:	str	r4, [sp, #-8]!
   2b568:	str	lr, [sp, #4]
   2b56c:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2b570:	cmp	r0, #0
   2b574:	beq	2b584 <__assert_fail@plt+0x1a0bc>
   2b578:	ldr	r4, [sp]
   2b57c:	add	sp, sp, #4
   2b580:	pop	{pc}		; (ldr pc, [sp], #4)
   2b584:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b588:	strd	r4, [sp, #-16]!
   2b58c:	mov	r4, r0
   2b590:	mov	r5, r2
   2b594:	str	r6, [sp, #8]
   2b598:	mov	r6, r1
   2b59c:	str	lr, [sp, #12]
   2b5a0:	bl	2bf84 <__assert_fail@plt+0x1aabc>
   2b5a4:	cmp	r0, #0
   2b5a8:	beq	2b5bc <__assert_fail@plt+0x1a0f4>
   2b5ac:	ldrd	r4, [sp]
   2b5b0:	ldr	r6, [sp, #8]
   2b5b4:	add	sp, sp, #12
   2b5b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b5bc:	cmp	r4, #0
   2b5c0:	beq	2b5d0 <__assert_fail@plt+0x1a108>
   2b5c4:	cmp	r6, #0
   2b5c8:	cmpne	r5, #0
   2b5cc:	beq	2b5ac <__assert_fail@plt+0x1a0e4>
   2b5d0:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b5d4:	cmp	r2, #0
   2b5d8:	cmpne	r1, #0
   2b5dc:	str	r4, [sp, #-8]!
   2b5e0:	moveq	r2, #1
   2b5e4:	str	lr, [sp, #4]
   2b5e8:	moveq	r1, r2
   2b5ec:	bl	2bf84 <__assert_fail@plt+0x1aabc>
   2b5f0:	cmp	r0, #0
   2b5f4:	beq	2b604 <__assert_fail@plt+0x1a13c>
   2b5f8:	ldr	r4, [sp]
   2b5fc:	add	sp, sp, #4
   2b600:	pop	{pc}		; (ldr pc, [sp], #4)
   2b604:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b608:	mov	r2, r1
   2b60c:	mov	r1, r0
   2b610:	str	r4, [sp, #-8]!
   2b614:	mov	r0, #0
   2b618:	str	lr, [sp, #4]
   2b61c:	bl	2bf84 <__assert_fail@plt+0x1aabc>
   2b620:	cmp	r0, #0
   2b624:	beq	2b634 <__assert_fail@plt+0x1a16c>
   2b628:	ldr	r4, [sp]
   2b62c:	add	sp, sp, #4
   2b630:	pop	{pc}		; (ldr pc, [sp], #4)
   2b634:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b638:	cmp	r1, #0
   2b63c:	cmpne	r0, #0
   2b640:	str	r4, [sp, #-8]!
   2b644:	moveq	r2, #1
   2b648:	movne	r2, r1
   2b64c:	str	lr, [sp, #4]
   2b650:	movne	r1, r0
   2b654:	moveq	r1, r2
   2b658:	mov	r0, #0
   2b65c:	bl	2bf84 <__assert_fail@plt+0x1aabc>
   2b660:	cmp	r0, #0
   2b664:	beq	2b674 <__assert_fail@plt+0x1a1ac>
   2b668:	ldr	r4, [sp]
   2b66c:	add	sp, sp, #4
   2b670:	pop	{pc}		; (ldr pc, [sp], #4)
   2b674:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b678:	cmp	r0, #0
   2b67c:	strd	r4, [sp, #-16]!
   2b680:	mov	r5, r1
   2b684:	ldr	r4, [r1]
   2b688:	str	r6, [sp, #8]
   2b68c:	str	lr, [sp, #12]
   2b690:	beq	2b6d8 <__assert_fail@plt+0x1a210>
   2b694:	lsr	r3, r4, #1
   2b698:	add	r3, r3, #1
   2b69c:	adds	r4, r4, r3
   2b6a0:	bcs	2b6d4 <__assert_fail@plt+0x1a20c>
   2b6a4:	mov	r2, #1
   2b6a8:	mov	r1, r4
   2b6ac:	bl	2bf84 <__assert_fail@plt+0x1aabc>
   2b6b0:	cmp	r0, #0
   2b6b4:	beq	2b6cc <__assert_fail@plt+0x1a204>
   2b6b8:	ldr	r6, [sp, #8]
   2b6bc:	str	r4, [r5]
   2b6c0:	ldrd	r4, [sp]
   2b6c4:	add	sp, sp, #12
   2b6c8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b6cc:	cmp	r4, #0
   2b6d0:	beq	2b6b8 <__assert_fail@plt+0x1a1f0>
   2b6d4:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b6d8:	cmp	r4, #0
   2b6dc:	mov	r2, #1
   2b6e0:	moveq	r4, #64	; 0x40
   2b6e4:	mov	r1, r4
   2b6e8:	bl	2bf84 <__assert_fail@plt+0x1aabc>
   2b6ec:	cmp	r0, #0
   2b6f0:	bne	2b6b8 <__assert_fail@plt+0x1a1f0>
   2b6f4:	b	2b6d4 <__assert_fail@plt+0x1a20c>
   2b6f8:	cmp	r0, #0
   2b6fc:	strd	r4, [sp, #-16]!
   2b700:	mov	r5, r1
   2b704:	ldr	r4, [r1]
   2b708:	str	r6, [sp, #8]
   2b70c:	mov	r6, r2
   2b710:	str	lr, [sp, #12]
   2b714:	beq	2b75c <__assert_fail@plt+0x1a294>
   2b718:	lsr	r3, r4, #1
   2b71c:	add	r3, r3, #1
   2b720:	adds	r4, r4, r3
   2b724:	bcs	2b758 <__assert_fail@plt+0x1a290>
   2b728:	mov	r1, r4
   2b72c:	bl	2bf84 <__assert_fail@plt+0x1aabc>
   2b730:	cmp	r0, #0
   2b734:	beq	2b74c <__assert_fail@plt+0x1a284>
   2b738:	ldr	r6, [sp, #8]
   2b73c:	str	r4, [r5]
   2b740:	ldrd	r4, [sp]
   2b744:	add	sp, sp, #12
   2b748:	pop	{pc}		; (ldr pc, [sp], #4)
   2b74c:	cmp	r4, #0
   2b750:	cmpne	r6, #0
   2b754:	beq	2b738 <__assert_fail@plt+0x1a270>
   2b758:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b75c:	cmp	r4, #0
   2b760:	bne	2b774 <__assert_fail@plt+0x1a2ac>
   2b764:	mov	r4, #64	; 0x40
   2b768:	udiv	r4, r4, r2
   2b76c:	cmp	r2, #64	; 0x40
   2b770:	addhi	r4, r4, #1
   2b774:	mov	r2, r6
   2b778:	mov	r1, r4
   2b77c:	mov	r0, #0
   2b780:	bl	2bf84 <__assert_fail@plt+0x1aabc>
   2b784:	cmp	r0, #0
   2b788:	bne	2b738 <__assert_fail@plt+0x1a270>
   2b78c:	b	2b758 <__assert_fail@plt+0x1a290>
   2b790:	ldr	ip, [r1]
   2b794:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b798:	strd	r6, [sp, #8]
   2b79c:	mov	r7, r1
   2b7a0:	mov	r6, r0
   2b7a4:	str	r8, [sp, #16]
   2b7a8:	mvn	r8, r3
   2b7ac:	lsr	r8, r8, #31
   2b7b0:	str	lr, [sp, #20]
   2b7b4:	asr	r1, ip, #1
   2b7b8:	ldr	lr, [sp, #24]
   2b7bc:	adds	r4, ip, r1
   2b7c0:	mvnvs	r4, #-2147483648	; 0x80000000
   2b7c4:	cmp	r3, r4
   2b7c8:	movge	r1, #0
   2b7cc:	andlt	r1, r8, #1
   2b7d0:	cmp	r1, #0
   2b7d4:	movne	r4, r3
   2b7d8:	smull	r0, r1, r4, lr
   2b7dc:	cmp	r1, r0, asr #31
   2b7e0:	bne	2b890 <__assert_fail@plt+0x1a3c8>
   2b7e4:	cmp	r0, #63	; 0x3f
   2b7e8:	mov	r5, r0
   2b7ec:	ble	2b85c <__assert_fail@plt+0x1a394>
   2b7f0:	cmp	r6, #0
   2b7f4:	sub	r1, r4, ip
   2b7f8:	streq	r6, [r7]
   2b7fc:	cmp	r1, r2
   2b800:	bge	2b830 <__assert_fail@plt+0x1a368>
   2b804:	adds	r4, ip, r2
   2b808:	bvs	2b88c <__assert_fail@plt+0x1a3c4>
   2b80c:	cmp	r4, r3
   2b810:	movle	r3, #0
   2b814:	andgt	r3, r8, #1
   2b818:	cmp	r3, #0
   2b81c:	bne	2b88c <__assert_fail@plt+0x1a3c4>
   2b820:	smull	r0, r1, r4, lr
   2b824:	cmp	r1, r0, asr #31
   2b828:	mov	r5, r0
   2b82c:	bne	2b88c <__assert_fail@plt+0x1a3c4>
   2b830:	mov	r1, r5
   2b834:	mov	r0, r6
   2b838:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2b83c:	cmp	r0, #0
   2b840:	beq	2b870 <__assert_fail@plt+0x1a3a8>
   2b844:	ldr	r8, [sp, #16]
   2b848:	str	r4, [r7]
   2b84c:	ldrd	r4, [sp]
   2b850:	ldrd	r6, [sp, #8]
   2b854:	add	sp, sp, #20
   2b858:	pop	{pc}		; (ldr pc, [sp], #4)
   2b85c:	mov	r0, #64	; 0x40
   2b860:	sdiv	r4, r0, lr
   2b864:	mls	r5, lr, r4, r0
   2b868:	sub	r5, r0, r5
   2b86c:	b	2b7f0 <__assert_fail@plt+0x1a328>
   2b870:	adds	r5, r5, #0
   2b874:	movne	r5, #1
   2b878:	cmp	r6, #0
   2b87c:	movne	r6, r5
   2b880:	moveq	r6, #1
   2b884:	cmp	r6, #0
   2b888:	beq	2b844 <__assert_fail@plt+0x1a37c>
   2b88c:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b890:	mvn	r0, #-2147483648	; 0x80000000
   2b894:	b	2b860 <__assert_fail@plt+0x1a398>
   2b898:	mov	r1, #1
   2b89c:	str	r4, [sp, #-8]!
   2b8a0:	str	lr, [sp, #4]
   2b8a4:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   2b8a8:	cmp	r0, #0
   2b8ac:	beq	2b8bc <__assert_fail@plt+0x1a3f4>
   2b8b0:	ldr	r4, [sp]
   2b8b4:	add	sp, sp, #4
   2b8b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b8bc:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b8c0:	mov	r1, #1
   2b8c4:	str	r4, [sp, #-8]!
   2b8c8:	str	lr, [sp, #4]
   2b8cc:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   2b8d0:	cmp	r0, #0
   2b8d4:	beq	2b8e4 <__assert_fail@plt+0x1a41c>
   2b8d8:	ldr	r4, [sp]
   2b8dc:	add	sp, sp, #4
   2b8e0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b8e4:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b8e8:	str	r4, [sp, #-8]!
   2b8ec:	str	lr, [sp, #4]
   2b8f0:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   2b8f4:	cmp	r0, #0
   2b8f8:	beq	2b908 <__assert_fail@plt+0x1a440>
   2b8fc:	ldr	r4, [sp]
   2b900:	add	sp, sp, #4
   2b904:	pop	{pc}		; (ldr pc, [sp], #4)
   2b908:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b90c:	str	r4, [sp, #-8]!
   2b910:	str	lr, [sp, #4]
   2b914:	bl	2baa0 <__assert_fail@plt+0x1a5d8>
   2b918:	cmp	r0, #0
   2b91c:	beq	2b92c <__assert_fail@plt+0x1a464>
   2b920:	ldr	r4, [sp]
   2b924:	add	sp, sp, #4
   2b928:	pop	{pc}		; (ldr pc, [sp], #4)
   2b92c:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b930:	strd	r4, [sp, #-16]!
   2b934:	mov	r4, r1
   2b938:	str	r6, [sp, #8]
   2b93c:	mov	r6, r0
   2b940:	mov	r0, r1
   2b944:	str	lr, [sp, #12]
   2b948:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2b94c:	subs	r5, r0, #0
   2b950:	beq	2b974 <__assert_fail@plt+0x1a4ac>
   2b954:	mov	r2, r4
   2b958:	mov	r1, r6
   2b95c:	bl	11204 <memcpy@plt>
   2b960:	mov	r0, r5
   2b964:	ldrd	r4, [sp]
   2b968:	ldr	r6, [sp, #8]
   2b96c:	add	sp, sp, #12
   2b970:	pop	{pc}		; (ldr pc, [sp], #4)
   2b974:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b978:	strd	r4, [sp, #-16]!
   2b97c:	mov	r4, r1
   2b980:	str	r6, [sp, #8]
   2b984:	mov	r6, r0
   2b988:	mov	r0, r1
   2b98c:	str	lr, [sp, #12]
   2b990:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2b994:	subs	r5, r0, #0
   2b998:	beq	2b9bc <__assert_fail@plt+0x1a4f4>
   2b99c:	mov	r2, r4
   2b9a0:	mov	r1, r6
   2b9a4:	bl	11204 <memcpy@plt>
   2b9a8:	mov	r0, r5
   2b9ac:	ldrd	r4, [sp]
   2b9b0:	ldr	r6, [sp, #8]
   2b9b4:	add	sp, sp, #12
   2b9b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b9bc:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2b9c0:	strd	r4, [sp, #-16]!
   2b9c4:	mov	r4, r1
   2b9c8:	str	r6, [sp, #8]
   2b9cc:	mov	r6, r0
   2b9d0:	add	r0, r1, #1
   2b9d4:	str	lr, [sp, #12]
   2b9d8:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2b9dc:	subs	r5, r0, #0
   2b9e0:	beq	2ba0c <__assert_fail@plt+0x1a544>
   2b9e4:	mov	r3, #0
   2b9e8:	mov	r1, r6
   2b9ec:	mov	r2, r4
   2b9f0:	strb	r3, [r5, r4]
   2b9f4:	bl	11204 <memcpy@plt>
   2b9f8:	mov	r0, r5
   2b9fc:	ldrd	r4, [sp]
   2ba00:	ldr	r6, [sp, #8]
   2ba04:	add	sp, sp, #12
   2ba08:	pop	{pc}		; (ldr pc, [sp], #4)
   2ba0c:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2ba10:	strd	r4, [sp, #-16]!
   2ba14:	str	r6, [sp, #8]
   2ba18:	mov	r6, r0
   2ba1c:	str	lr, [sp, #12]
   2ba20:	bl	11390 <strlen@plt>
   2ba24:	add	r4, r0, #1
   2ba28:	mov	r0, r4
   2ba2c:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2ba30:	subs	r5, r0, #0
   2ba34:	beq	2ba58 <__assert_fail@plt+0x1a590>
   2ba38:	mov	r2, r4
   2ba3c:	mov	r1, r6
   2ba40:	bl	11204 <memcpy@plt>
   2ba44:	mov	r0, r5
   2ba48:	ldrd	r4, [sp]
   2ba4c:	ldr	r6, [sp, #8]
   2ba50:	add	sp, sp, #12
   2ba54:	pop	{pc}		; (ldr pc, [sp], #4)
   2ba58:	bl	2ba5c <__assert_fail@plt+0x1a594>
   2ba5c:	movw	r3, #57672	; 0xe148
   2ba60:	movt	r3, #3
   2ba64:	str	r4, [sp, #-8]!
   2ba68:	ldr	r4, [r3]
   2ba6c:	mov	r2, #5
   2ba70:	movw	r1, #54264	; 0xd3f8
   2ba74:	movt	r1, #2
   2ba78:	mov	r0, #0
   2ba7c:	str	lr, [sp, #4]
   2ba80:	bl	11258 <dcgettext@plt>
   2ba84:	mov	r3, r0
   2ba88:	movw	r2, #52440	; 0xccd8
   2ba8c:	movt	r2, #2
   2ba90:	mov	r1, #0
   2ba94:	mov	r0, r4
   2ba98:	bl	112f4 <error@plt>
   2ba9c:	bl	114bc <abort@plt>
   2baa0:	cmp	r1, #0
   2baa4:	cmpne	r0, #0
   2baa8:	beq	2baf4 <__assert_fail@plt+0x1a62c>
   2baac:	strd	r4, [sp, #-16]!
   2bab0:	umull	r4, r5, r0, r1
   2bab4:	str	r6, [sp, #8]
   2bab8:	str	lr, [sp, #12]
   2babc:	adds	r3, r5, #0
   2bac0:	movne	r3, #1
   2bac4:	cmp	r4, #0
   2bac8:	blt	2bad4 <__assert_fail@plt+0x1a60c>
   2bacc:	cmp	r3, #0
   2bad0:	beq	2bb00 <__assert_fail@plt+0x1a638>
   2bad4:	bl	113c0 <__errno_location@plt>
   2bad8:	mov	r3, #12
   2badc:	ldrd	r4, [sp]
   2bae0:	ldr	r6, [sp, #8]
   2bae4:	add	sp, sp, #12
   2bae8:	str	r3, [r0]
   2baec:	mov	r0, #0
   2baf0:	pop	{pc}		; (ldr pc, [sp], #4)
   2baf4:	mov	r1, #1
   2baf8:	mov	r0, r1
   2bafc:	b	11150 <calloc@plt>
   2bb00:	ldrd	r4, [sp]
   2bb04:	ldr	r6, [sp, #8]
   2bb08:	ldr	lr, [sp, #12]
   2bb0c:	add	sp, sp, #16
   2bb10:	b	11150 <calloc@plt>
   2bb14:	cmp	r0, #0
   2bb18:	beq	2bb24 <__assert_fail@plt+0x1a65c>
   2bb1c:	blt	2bb2c <__assert_fail@plt+0x1a664>
   2bb20:	b	11318 <malloc@plt>
   2bb24:	mov	r0, #1
   2bb28:	b	11318 <malloc@plt>
   2bb2c:	str	r4, [sp, #-8]!
   2bb30:	str	lr, [sp, #4]
   2bb34:	bl	113c0 <__errno_location@plt>
   2bb38:	mov	r3, #12
   2bb3c:	ldr	r4, [sp]
   2bb40:	add	sp, sp, #4
   2bb44:	str	r3, [r0]
   2bb48:	mov	r0, #0
   2bb4c:	pop	{pc}		; (ldr pc, [sp], #4)
   2bb50:	cmp	r0, #0
   2bb54:	beq	2bb7c <__assert_fail@plt+0x1a6b4>
   2bb58:	cmp	r1, #0
   2bb5c:	str	r4, [sp, #-8]!
   2bb60:	str	lr, [sp, #4]
   2bb64:	beq	2bb84 <__assert_fail@plt+0x1a6bc>
   2bb68:	blt	2bb98 <__assert_fail@plt+0x1a6d0>
   2bb6c:	ldr	r4, [sp]
   2bb70:	ldr	lr, [sp, #4]
   2bb74:	add	sp, sp, #8
   2bb78:	b	11270 <realloc@plt>
   2bb7c:	mov	r0, r1
   2bb80:	b	2bb14 <__assert_fail@plt+0x1a64c>
   2bb84:	bl	14484 <__assert_fail@plt+0x2fbc>
   2bb88:	ldr	r4, [sp]
   2bb8c:	add	sp, sp, #4
   2bb90:	mov	r0, #0
   2bb94:	pop	{pc}		; (ldr pc, [sp], #4)
   2bb98:	bl	113c0 <__errno_location@plt>
   2bb9c:	mov	r3, #12
   2bba0:	str	r3, [r0]
   2bba4:	b	2bb88 <__assert_fail@plt+0x1a6c0>
   2bba8:	strd	r4, [sp, #-16]!
   2bbac:	mov	r4, r0
   2bbb0:	str	r6, [sp, #8]
   2bbb4:	str	lr, [sp, #12]
   2bbb8:	bl	112dc <__fpending@plt>
   2bbbc:	ldr	r5, [r4]
   2bbc0:	mov	r6, r0
   2bbc4:	mov	r0, r4
   2bbc8:	bl	2bcfc <__assert_fail@plt+0x1a834>
   2bbcc:	mov	r4, r0
   2bbd0:	and	r5, r5, #32
   2bbd4:	cmp	r5, #0
   2bbd8:	bne	2bc10 <__assert_fail@plt+0x1a748>
   2bbdc:	cmp	r0, #0
   2bbe0:	beq	2bbfc <__assert_fail@plt+0x1a734>
   2bbe4:	cmp	r6, #0
   2bbe8:	bne	2bc28 <__assert_fail@plt+0x1a760>
   2bbec:	bl	113c0 <__errno_location@plt>
   2bbf0:	ldr	r4, [r0]
   2bbf4:	subs	r4, r4, #9
   2bbf8:	mvnne	r4, #0
   2bbfc:	mov	r0, r4
   2bc00:	ldrd	r4, [sp]
   2bc04:	ldr	r6, [sp, #8]
   2bc08:	add	sp, sp, #12
   2bc0c:	pop	{pc}		; (ldr pc, [sp], #4)
   2bc10:	cmp	r0, #0
   2bc14:	bne	2bc28 <__assert_fail@plt+0x1a760>
   2bc18:	bl	113c0 <__errno_location@plt>
   2bc1c:	str	r4, [r0]
   2bc20:	mvn	r4, #0
   2bc24:	b	2bbfc <__assert_fail@plt+0x1a734>
   2bc28:	mvn	r4, #0
   2bc2c:	b	2bbfc <__assert_fail@plt+0x1a734>
   2bc30:	ldr	ip, [r0, #4]
   2bc34:	cmp	ip, r1
   2bc38:	bcs	2bca4 <__assert_fail@plt+0x1a7dc>
   2bc3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2bc40:	mov	r5, r1
   2bc44:	mov	r4, r0
   2bc48:	strd	r6, [sp, #8]
   2bc4c:	umull	r6, r7, r1, r3
   2bc50:	str	r8, [sp, #16]
   2bc54:	mov	r8, r3
   2bc58:	str	lr, [sp, #20]
   2bc5c:	cmp	r7, #0
   2bc60:	bne	2bce8 <__assert_fail@plt+0x1a820>
   2bc64:	ldr	r0, [r0, #8]
   2bc68:	cmp	r0, r2
   2bc6c:	beq	2bcb4 <__assert_fail@plt+0x1a7ec>
   2bc70:	mov	r1, r6
   2bc74:	bl	2bb50 <__assert_fail@plt+0x1a688>
   2bc78:	subs	r6, r0, #0
   2bc7c:	beq	2bce0 <__assert_fail@plt+0x1a818>
   2bc80:	mov	r3, #1
   2bc84:	str	r5, [r4]
   2bc88:	stmib	r4, {r5, r6}
   2bc8c:	ldrd	r4, [sp]
   2bc90:	mov	r0, r3
   2bc94:	ldrd	r6, [sp, #8]
   2bc98:	ldr	r8, [sp, #16]
   2bc9c:	add	sp, sp, #20
   2bca0:	pop	{pc}		; (ldr pc, [sp], #4)
   2bca4:	mov	r3, #1
   2bca8:	str	r1, [r0]
   2bcac:	mov	r0, r3
   2bcb0:	bx	lr
   2bcb4:	mov	r0, r6
   2bcb8:	bl	2bb14 <__assert_fail@plt+0x1a64c>
   2bcbc:	subs	r6, r0, #0
   2bcc0:	beq	2bce0 <__assert_fail@plt+0x1a818>
   2bcc4:	ldr	r1, [r4, #8]
   2bcc8:	cmp	r1, #0
   2bccc:	beq	2bc80 <__assert_fail@plt+0x1a7b8>
   2bcd0:	ldr	r2, [r4]
   2bcd4:	mul	r2, r2, r8
   2bcd8:	bl	11204 <memcpy@plt>
   2bcdc:	b	2bc80 <__assert_fail@plt+0x1a7b8>
   2bce0:	mov	r3, #0
   2bce4:	b	2bc8c <__assert_fail@plt+0x1a7c4>
   2bce8:	bl	113c0 <__errno_location@plt>
   2bcec:	mov	r2, #12
   2bcf0:	mov	r3, #0
   2bcf4:	str	r2, [r0]
   2bcf8:	b	2bc8c <__assert_fail@plt+0x1a7c4>
   2bcfc:	strd	r4, [sp, #-12]!
   2bd00:	mov	r4, r0
   2bd04:	str	lr, [sp, #8]
   2bd08:	sub	sp, sp, #12
   2bd0c:	bl	11408 <fileno@plt>
   2bd10:	cmp	r0, #0
   2bd14:	mov	r0, r4
   2bd18:	blt	2bd9c <__assert_fail@plt+0x1a8d4>
   2bd1c:	bl	11330 <__freading@plt>
   2bd20:	cmp	r0, #0
   2bd24:	bne	2bd68 <__assert_fail@plt+0x1a8a0>
   2bd28:	mov	r0, r4
   2bd2c:	bl	2bdb0 <__assert_fail@plt+0x1a8e8>
   2bd30:	cmp	r0, #0
   2bd34:	beq	2bd98 <__assert_fail@plt+0x1a8d0>
   2bd38:	bl	113c0 <__errno_location@plt>
   2bd3c:	mov	r5, r0
   2bd40:	mov	r0, r4
   2bd44:	ldr	r4, [r5]
   2bd48:	bl	1142c <fclose@plt>
   2bd4c:	cmp	r4, #0
   2bd50:	mvnne	r0, #0
   2bd54:	strne	r4, [r5]
   2bd58:	add	sp, sp, #12
   2bd5c:	ldrd	r4, [sp]
   2bd60:	add	sp, sp, #8
   2bd64:	pop	{pc}		; (ldr pc, [sp], #4)
   2bd68:	mov	r0, r4
   2bd6c:	bl	11408 <fileno@plt>
   2bd70:	mov	r1, #1
   2bd74:	mov	r2, #0
   2bd78:	mov	r3, #0
   2bd7c:	str	r1, [sp]
   2bd80:	bl	112c4 <lseek64@plt>
   2bd84:	mvn	r3, #0
   2bd88:	mvn	r2, #0
   2bd8c:	cmp	r1, r3
   2bd90:	cmpeq	r0, r2
   2bd94:	bne	2bd28 <__assert_fail@plt+0x1a860>
   2bd98:	mov	r0, r4
   2bd9c:	add	sp, sp, #12
   2bda0:	ldrd	r4, [sp]
   2bda4:	ldr	lr, [sp, #8]
   2bda8:	add	sp, sp, #12
   2bdac:	b	1142c <fclose@plt>
   2bdb0:	str	r4, [sp, #-8]!
   2bdb4:	subs	r4, r0, #0
   2bdb8:	str	lr, [sp, #4]
   2bdbc:	sub	sp, sp, #8
   2bdc0:	beq	2bddc <__assert_fail@plt+0x1a914>
   2bdc4:	bl	11330 <__freading@plt>
   2bdc8:	cmp	r0, #0
   2bdcc:	beq	2bddc <__assert_fail@plt+0x1a914>
   2bdd0:	ldr	r3, [r4]
   2bdd4:	tst	r3, #256	; 0x100
   2bdd8:	bne	2bdf4 <__assert_fail@plt+0x1a92c>
   2bddc:	mov	r0, r4
   2bde0:	add	sp, sp, #8
   2bde4:	ldr	r4, [sp]
   2bde8:	ldr	lr, [sp, #4]
   2bdec:	add	sp, sp, #8
   2bdf0:	b	111bc <fflush@plt>
   2bdf4:	mov	r1, #1
   2bdf8:	mov	r2, #0
   2bdfc:	mov	r3, #0
   2be00:	mov	r0, r4
   2be04:	str	r1, [sp]
   2be08:	bl	2be10 <__assert_fail@plt+0x1a948>
   2be0c:	b	2bddc <__assert_fail@plt+0x1a914>
   2be10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2be14:	mov	r4, r0
   2be18:	ldr	ip, [r0, #4]
   2be1c:	strd	r6, [sp, #8]
   2be20:	str	lr, [sp, #20]
   2be24:	ldr	lr, [r0, #8]
   2be28:	str	r8, [sp, #16]
   2be2c:	sub	sp, sp, #8
   2be30:	ldr	r5, [sp, #32]
   2be34:	cmp	lr, ip
   2be38:	beq	2be60 <__assert_fail@plt+0x1a998>
   2be3c:	mov	r0, r4
   2be40:	str	r5, [sp, #32]
   2be44:	add	sp, sp, #8
   2be48:	ldrd	r4, [sp]
   2be4c:	ldrd	r6, [sp, #8]
   2be50:	ldr	r8, [sp, #16]
   2be54:	ldr	lr, [sp, #20]
   2be58:	add	sp, sp, #24
   2be5c:	b	11438 <fseeko64@plt>
   2be60:	ldr	ip, [r0, #16]
   2be64:	ldr	lr, [r0, #20]
   2be68:	cmp	lr, ip
   2be6c:	bne	2be3c <__assert_fail@plt+0x1a974>
   2be70:	ldr	r8, [r0, #36]	; 0x24
   2be74:	cmp	r8, #0
   2be78:	bne	2be3c <__assert_fail@plt+0x1a974>
   2be7c:	mov	r6, r2
   2be80:	mov	r7, r3
   2be84:	bl	11408 <fileno@plt>
   2be88:	mov	r2, r6
   2be8c:	mov	r3, r7
   2be90:	str	r5, [sp]
   2be94:	bl	112c4 <lseek64@plt>
   2be98:	mvn	r3, #0
   2be9c:	mvn	r2, #0
   2bea0:	cmp	r1, r3
   2bea4:	cmpeq	r0, r2
   2bea8:	beq	2bed8 <__assert_fail@plt+0x1aa10>
   2beac:	ldr	r3, [r4]
   2beb0:	strd	r0, [r4, #80]	; 0x50
   2beb4:	bic	r3, r3, #16
   2beb8:	str	r3, [r4]
   2bebc:	mov	r0, r8
   2bec0:	add	sp, sp, #8
   2bec4:	ldrd	r4, [sp]
   2bec8:	ldrd	r6, [sp, #8]
   2becc:	ldr	r8, [sp, #16]
   2bed0:	add	sp, sp, #20
   2bed4:	pop	{pc}		; (ldr pc, [sp], #4)
   2bed8:	mvn	r8, #0
   2bedc:	b	2bebc <__assert_fail@plt+0x1a9f4>
   2bee0:	push	{lr}		; (str lr, [sp, #-4]!)
   2bee4:	sub	sp, sp, #268	; 0x10c
   2bee8:	movw	r2, #257	; 0x101
   2beec:	add	r1, sp, #4
   2bef0:	bl	2bfbc <__assert_fail@plt+0x1aaf4>
   2bef4:	cmp	r0, #0
   2bef8:	movne	r0, #0
   2befc:	bne	2bf30 <__assert_fail@plt+0x1aa68>
   2bf00:	movw	r1, #54284	; 0xd40c
   2bf04:	movt	r1, #2
   2bf08:	add	r0, sp, #4
   2bf0c:	bl	1118c <strcmp@plt>
   2bf10:	cmp	r0, #0
   2bf14:	beq	2bf30 <__assert_fail@plt+0x1aa68>
   2bf18:	add	r0, sp, #4
   2bf1c:	movw	r1, #54288	; 0xd410
   2bf20:	movt	r1, #2
   2bf24:	bl	1118c <strcmp@plt>
   2bf28:	adds	r0, r0, #0
   2bf2c:	movne	r0, #1
   2bf30:	add	sp, sp, #268	; 0x10c
   2bf34:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf38:	mov	r0, #14
   2bf3c:	str	r4, [sp, #-8]!
   2bf40:	str	lr, [sp, #4]
   2bf44:	bl	11474 <nl_langinfo@plt>
   2bf48:	cmp	r0, #0
   2bf4c:	beq	2bf70 <__assert_fail@plt+0x1aaa8>
   2bf50:	ldrb	r2, [r0]
   2bf54:	movw	r3, #54296	; 0xd418
   2bf58:	movt	r3, #2
   2bf5c:	ldr	r4, [sp]
   2bf60:	add	sp, sp, #4
   2bf64:	cmp	r2, #0
   2bf68:	moveq	r0, r3
   2bf6c:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf70:	ldr	r4, [sp]
   2bf74:	add	sp, sp, #4
   2bf78:	movw	r0, #54296	; 0xd418
   2bf7c:	movt	r0, #2
   2bf80:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf84:	umull	r2, r3, r1, r2
   2bf88:	cmp	r3, #0
   2bf8c:	bne	2bf98 <__assert_fail@plt+0x1aad0>
   2bf90:	mov	r1, r2
   2bf94:	b	2bb50 <__assert_fail@plt+0x1a688>
   2bf98:	str	r4, [sp, #-8]!
   2bf9c:	str	lr, [sp, #4]
   2bfa0:	bl	113c0 <__errno_location@plt>
   2bfa4:	mov	r3, #12
   2bfa8:	ldr	r4, [sp]
   2bfac:	add	sp, sp, #4
   2bfb0:	str	r3, [r0]
   2bfb4:	mov	r0, #0
   2bfb8:	pop	{pc}		; (ldr pc, [sp], #4)
   2bfbc:	strd	r4, [sp, #-16]!
   2bfc0:	mov	r5, r1
   2bfc4:	mov	r1, #0
   2bfc8:	mov	r4, r2
   2bfcc:	str	r6, [sp, #8]
   2bfd0:	str	lr, [sp, #12]
   2bfd4:	bl	1145c <setlocale@plt>
   2bfd8:	subs	r6, r0, #0
   2bfdc:	beq	2c05c <__assert_fail@plt+0x1ab94>
   2bfe0:	bl	11390 <strlen@plt>
   2bfe4:	cmp	r4, r0
   2bfe8:	bhi	2c008 <__assert_fail@plt+0x1ab40>
   2bfec:	cmp	r4, #0
   2bff0:	moveq	r0, #34	; 0x22
   2bff4:	bne	2c02c <__assert_fail@plt+0x1ab64>
   2bff8:	ldrd	r4, [sp]
   2bffc:	ldr	r6, [sp, #8]
   2c000:	add	sp, sp, #12
   2c004:	pop	{pc}		; (ldr pc, [sp], #4)
   2c008:	add	r2, r0, #1
   2c00c:	mov	r1, r6
   2c010:	mov	r0, r5
   2c014:	bl	11204 <memcpy@plt>
   2c018:	ldrd	r4, [sp]
   2c01c:	mov	r0, #0
   2c020:	ldr	r6, [sp, #8]
   2c024:	add	sp, sp, #12
   2c028:	pop	{pc}		; (ldr pc, [sp], #4)
   2c02c:	sub	r4, r4, #1
   2c030:	mov	r1, r6
   2c034:	mov	r2, r4
   2c038:	mov	r0, r5
   2c03c:	bl	11204 <memcpy@plt>
   2c040:	mov	r3, #0
   2c044:	mov	r0, #34	; 0x22
   2c048:	strb	r3, [r5, r4]
   2c04c:	ldrd	r4, [sp]
   2c050:	ldr	r6, [sp, #8]
   2c054:	add	sp, sp, #12
   2c058:	pop	{pc}		; (ldr pc, [sp], #4)
   2c05c:	cmp	r4, #0
   2c060:	mov	r0, #22
   2c064:	strbne	r6, [r5]
   2c068:	ldrd	r4, [sp]
   2c06c:	ldr	r6, [sp, #8]
   2c070:	add	sp, sp, #12
   2c074:	pop	{pc}		; (ldr pc, [sp], #4)
   2c078:	mov	r1, #0
   2c07c:	b	1145c <setlocale@plt>
   2c080:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c084:	mov	r7, r0
   2c088:	ldr	r6, [pc, #72]	; 2c0d8 <__assert_fail@plt+0x1ac10>
   2c08c:	ldr	r5, [pc, #72]	; 2c0dc <__assert_fail@plt+0x1ac14>
   2c090:	add	r6, pc, r6
   2c094:	add	r5, pc, r5
   2c098:	sub	r6, r6, r5
   2c09c:	mov	r8, r1
   2c0a0:	mov	r9, r2
   2c0a4:	bl	11124 <pthread_mutex_unlock@plt-0x20>
   2c0a8:	asrs	r6, r6, #2
   2c0ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c0b0:	mov	r4, #0
   2c0b4:	add	r4, r4, #1
   2c0b8:	ldr	r3, [r5], #4
   2c0bc:	mov	r2, r9
   2c0c0:	mov	r1, r8
   2c0c4:	mov	r0, r7
   2c0c8:	blx	r3
   2c0cc:	cmp	r6, r4
   2c0d0:	bne	2c0b4 <__assert_fail@plt+0x1abec>
   2c0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c0d8:	andeq	r1, r1, r4, ror lr
   2c0dc:	andeq	r1, r1, ip, ror #28
   2c0e0:	bx	lr
   2c0e4:	ldr	r3, [pc, #12]	; 2c0f8 <__assert_fail@plt+0x1ac30>
   2c0e8:	mov	r1, #0
   2c0ec:	add	r3, pc, r3
   2c0f0:	ldr	r2, [r3]
   2c0f4:	b	113d8 <__cxa_atexit@plt>
   2c0f8:	andeq	r2, r1, r0, asr r0

Disassembly of section .fini:

0002c0fc <.fini>:
   2c0fc:	push	{r3, lr}
   2c100:	pop	{r3, pc}
