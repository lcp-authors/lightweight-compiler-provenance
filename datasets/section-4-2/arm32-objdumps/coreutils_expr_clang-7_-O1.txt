
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

000113f0 <.init>:
   113f0:	push	{r3, lr}
   113f4:	bl	117f4 <__assert_fail@plt+0x48>
   113f8:	pop	{r3, pc}

Disassembly of section .plt:

000113fc <pthread_mutex_unlock@plt-0x14>:
   113fc:	push	{lr}		; (str lr, [sp, #-4]!)
   11400:	ldr	lr, [pc, #4]	; 1140c <pthread_mutex_unlock@plt-0x4>
   11404:	add	lr, pc, lr
   11408:	ldr	pc, [lr, #8]!
   1140c:	strdeq	r3, [r2], -r4

00011410 <pthread_mutex_unlock@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #143360	; 0x23000
   11418:	ldr	pc, [ip, #3060]!	; 0xbf4

0001141c <calloc@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #143360	; 0x23000
   11424:	ldr	pc, [ip, #3052]!	; 0xbec

00011428 <fputs_unlocked@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #143360	; 0x23000
   11430:	ldr	pc, [ip, #3044]!	; 0xbe4

00011434 <wctype@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #143360	; 0x23000
   1143c:	ldr	pc, [ip, #3036]!	; 0xbdc

00011440 <wcrtomb@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #143360	; 0x23000
   11448:	ldr	pc, [ip, #3028]!	; 0xbd4

0001144c <iswctype@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #143360	; 0x23000
   11454:	ldr	pc, [ip, #3020]!	; 0xbcc

00011458 <strcmp@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #143360	; 0x23000
   11460:	ldr	pc, [ip, #3012]!	; 0xbc4

00011464 <__gmpz_tdiv_q@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #143360	; 0x23000
   1146c:	ldr	pc, [ip, #3004]!	; 0xbbc

00011470 <strcspn@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #143360	; 0x23000
   11478:	ldr	pc, [ip, #2996]!	; 0xbb4

0001147c <pthread_mutex_destroy@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #143360	; 0x23000
   11484:	ldr	pc, [ip, #2988]!	; 0xbac

00011488 <fflush@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #143360	; 0x23000
   11490:	ldr	pc, [ip, #2980]!	; 0xba4

00011494 <wcwidth@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #143360	; 0x23000
   1149c:	ldr	pc, [ip, #2972]!	; 0xb9c

000114a0 <memmove@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #143360	; 0x23000
   114a8:	ldr	pc, [ip, #2964]!	; 0xb94

000114ac <free@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #143360	; 0x23000
   114b4:	ldr	pc, [ip, #2956]!	; 0xb8c

000114b8 <pthread_mutex_lock@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #143360	; 0x23000
   114c0:	ldr	pc, [ip, #2948]!	; 0xb84

000114c4 <_exit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #143360	; 0x23000
   114cc:	ldr	pc, [ip, #2940]!	; 0xb7c

000114d0 <memcpy@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #143360	; 0x23000
   114d8:	ldr	pc, [ip, #2932]!	; 0xb74

000114dc <__gmpz_sub@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #143360	; 0x23000
   114e4:	ldr	pc, [ip, #2924]!	; 0xb6c

000114e8 <tolower@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #143360	; 0x23000
   114f0:	ldr	pc, [ip, #2916]!	; 0xb64

000114f4 <pthread_mutex_init@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #143360	; 0x23000
   114fc:	ldr	pc, [ip, #2908]!	; 0xb5c

00011500 <towlower@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #143360	; 0x23000
   11508:	ldr	pc, [ip, #2900]!	; 0xb54

0001150c <mbsinit@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #143360	; 0x23000
   11514:	ldr	pc, [ip, #2892]!	; 0xb4c

00011518 <memcmp@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #143360	; 0x23000
   11520:	ldr	pc, [ip, #2884]!	; 0xb44

00011524 <dcgettext@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #143360	; 0x23000
   1152c:	ldr	pc, [ip, #2876]!	; 0xb3c

00011530 <__gmpz_get_str@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #143360	; 0x23000
   11538:	ldr	pc, [ip, #2868]!	; 0xb34

0001153c <realloc@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #143360	; 0x23000
   11544:	ldr	pc, [ip, #2860]!	; 0xb2c

00011548 <__gmpz_mul@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #143360	; 0x23000
   11550:	ldr	pc, [ip, #2852]!	; 0xb24

00011554 <textdomain@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #143360	; 0x23000
   1155c:	ldr	pc, [ip, #2844]!	; 0xb1c

00011560 <iswcntrl@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #143360	; 0x23000
   11568:	ldr	pc, [ip, #2836]!	; 0xb14

0001156c <__gmpz_out_str@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #143360	; 0x23000
   11574:	ldr	pc, [ip, #2828]!	; 0xb0c

00011578 <iswprint@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #143360	; 0x23000
   11580:	ldr	pc, [ip, #2820]!	; 0xb04

00011584 <fwrite@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #143360	; 0x23000
   1158c:	ldr	pc, [ip, #2812]!	; 0xafc

00011590 <lseek64@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #143360	; 0x23000
   11598:	ldr	pc, [ip, #2804]!	; 0xaf4

0001159c <__ctype_get_mb_cur_max@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #143360	; 0x23000
   115a4:	ldr	pc, [ip, #2796]!	; 0xaec

000115a8 <__gmpz_fits_ulong_p@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #143360	; 0x23000
   115b0:	ldr	pc, [ip, #2788]!	; 0xae4

000115b4 <__fpending@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #143360	; 0x23000
   115bc:	ldr	pc, [ip, #2780]!	; 0xadc

000115c0 <ferror_unlocked@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #143360	; 0x23000
   115c8:	ldr	pc, [ip, #2772]!	; 0xad4

000115cc <mbrtowc@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #143360	; 0x23000
   115d4:	ldr	pc, [ip, #2764]!	; 0xacc

000115d8 <error@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #143360	; 0x23000
   115e0:	ldr	pc, [ip, #2756]!	; 0xac4

000115e4 <__gmpz_get_ui@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #143360	; 0x23000
   115ec:	ldr	pc, [ip, #2748]!	; 0xabc

000115f0 <strcoll@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #143360	; 0x23000
   115f8:	ldr	pc, [ip, #2740]!	; 0xab4

000115fc <puts@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #143360	; 0x23000
   11604:	ldr	pc, [ip, #2732]!	; 0xaac

00011608 <malloc@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #143360	; 0x23000
   11610:	ldr	pc, [ip, #2724]!	; 0xaa4

00011614 <__libc_start_main@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #143360	; 0x23000
   1161c:	ldr	pc, [ip, #2716]!	; 0xa9c

00011620 <__freading@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #143360	; 0x23000
   11628:	ldr	pc, [ip, #2708]!	; 0xa94

0001162c <__gmon_start__@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #143360	; 0x23000
   11634:	ldr	pc, [ip, #2700]!	; 0xa8c

00011638 <getopt_long@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #143360	; 0x23000
   11640:	ldr	pc, [ip, #2692]!	; 0xa84

00011644 <__ctype_b_loc@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #143360	; 0x23000
   1164c:	ldr	pc, [ip, #2684]!	; 0xa7c

00011650 <exit@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #143360	; 0x23000
   11658:	ldr	pc, [ip, #2676]!	; 0xa74

0001165c <strlen@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #143360	; 0x23000
   11664:	ldr	pc, [ip, #2668]!	; 0xa6c

00011668 <strchr@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #143360	; 0x23000
   11670:	ldr	pc, [ip, #2660]!	; 0xa64

00011674 <__gmpz_tdiv_r@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #143360	; 0x23000
   1167c:	ldr	pc, [ip, #2652]!	; 0xa5c

00011680 <__gmpz_clear@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #143360	; 0x23000
   11688:	ldr	pc, [ip, #2644]!	; 0xa54

0001168c <__errno_location@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #143360	; 0x23000
   11694:	ldr	pc, [ip, #2636]!	; 0xa4c

00011698 <iswalnum@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #143360	; 0x23000
   116a0:	ldr	pc, [ip, #2628]!	; 0xa44

000116a4 <__cxa_atexit@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #143360	; 0x23000
   116ac:	ldr	pc, [ip, #2620]!	; 0xa3c

000116b0 <memset@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #143360	; 0x23000
   116b8:	ldr	pc, [ip, #2612]!	; 0xa34

000116bc <btowc@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #143360	; 0x23000
   116c4:	ldr	pc, [ip, #2604]!	; 0xa2c

000116c8 <__printf_chk@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #143360	; 0x23000
   116d0:	ldr	pc, [ip, #2596]!	; 0xa24

000116d4 <fileno@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #143360	; 0x23000
   116dc:	ldr	pc, [ip, #2588]!	; 0xa1c

000116e0 <__fprintf_chk@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #143360	; 0x23000
   116e8:	ldr	pc, [ip, #2580]!	; 0xa14

000116ec <memchr@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #143360	; 0x23000
   116f4:	ldr	pc, [ip, #2572]!	; 0xa0c

000116f8 <fclose@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #143360	; 0x23000
   11700:	ldr	pc, [ip, #2564]!	; 0xa04

00011704 <fseeko64@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #143360	; 0x23000
   1170c:	ldr	pc, [ip, #2556]!	; 0x9fc

00011710 <__gmpz_init_set_ui@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #143360	; 0x23000
   11718:	ldr	pc, [ip, #2548]!	; 0x9f4

0001171c <setlocale@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #143360	; 0x23000
   11724:	ldr	pc, [ip, #2540]!	; 0x9ec

00011728 <toupper@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #143360	; 0x23000
   11730:	ldr	pc, [ip, #2532]!	; 0x9e4

00011734 <strrchr@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #143360	; 0x23000
   1173c:	ldr	pc, [ip, #2524]!	; 0x9dc

00011740 <nl_langinfo@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #143360	; 0x23000
   11748:	ldr	pc, [ip, #2516]!	; 0x9d4

0001174c <__gmpz_add@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #143360	; 0x23000
   11754:	ldr	pc, [ip, #2508]!	; 0x9cc

00011758 <__gmpz_init_set_str@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #143360	; 0x23000
   11760:	ldr	pc, [ip, #2500]!	; 0x9c4

00011764 <bindtextdomain@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #143360	; 0x23000
   1176c:	ldr	pc, [ip, #2492]!	; 0x9bc

00011770 <towupper@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #143360	; 0x23000
   11778:	ldr	pc, [ip, #2484]!	; 0x9b4

0001177c <strncmp@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #143360	; 0x23000
   11784:	ldr	pc, [ip, #2476]!	; 0x9ac

00011788 <abort@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #143360	; 0x23000
   11790:	ldr	pc, [ip, #2468]!	; 0x9a4

00011794 <putchar_unlocked@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #143360	; 0x23000
   1179c:	ldr	pc, [ip, #2460]!	; 0x99c

000117a0 <__mempcpy_chk@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #143360	; 0x23000
   117a8:	ldr	pc, [ip, #2452]!	; 0x994

000117ac <__assert_fail@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #143360	; 0x23000
   117b4:	ldr	pc, [ip, #2444]!	; 0x98c

Disassembly of section .text:

000117b8 <.text>:
   117b8:	mov	fp, #0
   117bc:	mov	lr, #0
   117c0:	pop	{r1}		; (ldr r1, [sp], #4)
   117c4:	mov	r2, sp
   117c8:	push	{r2}		; (str r2, [sp, #-4]!)
   117cc:	push	{r0}		; (str r0, [sp, #-4]!)
   117d0:	ldr	ip, [pc, #16]	; 117e8 <__assert_fail@plt+0x3c>
   117d4:	push	{ip}		; (str ip, [sp, #-4]!)
   117d8:	ldr	r0, [pc, #12]	; 117ec <__assert_fail@plt+0x40>
   117dc:	ldr	r3, [pc, #12]	; 117f0 <__assert_fail@plt+0x44>
   117e0:	bl	11614 <__libc_start_main@plt>
   117e4:	bl	11788 <abort@plt>
   117e8:	andeq	r3, r2, ip, lsr r4
   117ec:	andeq	r1, r1, r8, ror #23
   117f0:	ldrdeq	r3, [r2], -ip
   117f4:	ldr	r3, [pc, #20]	; 11810 <__assert_fail@plt+0x64>
   117f8:	ldr	r2, [pc, #20]	; 11814 <__assert_fail@plt+0x68>
   117fc:	add	r3, pc, r3
   11800:	ldr	r2, [r3, r2]
   11804:	cmp	r2, #0
   11808:	bxeq	lr
   1180c:	b	1162c <__gmon_start__@plt>
   11810:	strdeq	r3, [r2], -ip
   11814:	andeq	r0, r0, r4, asr #2
   11818:	ldr	r0, [pc, #24]	; 11838 <__assert_fail@plt+0x8c>
   1181c:	ldr	r3, [pc, #24]	; 1183c <__assert_fail@plt+0x90>
   11820:	cmp	r3, r0
   11824:	bxeq	lr
   11828:	ldr	r3, [pc, #16]	; 11840 <__assert_fail@plt+0x94>
   1182c:	cmp	r3, #0
   11830:	bxeq	lr
   11834:	bx	r3
   11838:	muleq	r3, r8, r1
   1183c:	muleq	r3, r8, r1
   11840:	andeq	r0, r0, r0
   11844:	ldr	r0, [pc, #36]	; 11870 <__assert_fail@plt+0xc4>
   11848:	ldr	r1, [pc, #36]	; 11874 <__assert_fail@plt+0xc8>
   1184c:	sub	r1, r1, r0
   11850:	asr	r1, r1, #2
   11854:	add	r1, r1, r1, lsr #31
   11858:	asrs	r1, r1, #1
   1185c:	bxeq	lr
   11860:	ldr	r3, [pc, #16]	; 11878 <__assert_fail@plt+0xcc>
   11864:	cmp	r3, #0
   11868:	bxeq	lr
   1186c:	bx	r3
   11870:	muleq	r3, r8, r1
   11874:	muleq	r3, r8, r1
   11878:	andeq	r0, r0, r0
   1187c:	push	{r4, lr}
   11880:	ldr	r4, [pc, #24]	; 118a0 <__assert_fail@plt+0xf4>
   11884:	ldrb	r3, [r4]
   11888:	cmp	r3, #0
   1188c:	popne	{r4, pc}
   11890:	bl	11818 <__assert_fail@plt+0x6c>
   11894:	mov	r3, #1
   11898:	strb	r3, [r4]
   1189c:	pop	{r4, pc}
   118a0:			; <UNDEFINED> instruction: 0x000351b4
   118a4:	b	11844 <__assert_fail@plt+0x98>
   118a8:	push	{fp, lr}
   118ac:	mov	fp, sp
   118b0:	mov	r4, r0
   118b4:	cmp	r0, #0
   118b8:	bne	11a20 <__assert_fail@plt+0x274>
   118bc:	movw	r1, #13451	; 0x348b
   118c0:	movt	r1, #2
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	bl	11524 <dcgettext@plt>
   118d0:	mov	r1, r0
   118d4:	movw	r0, #20932	; 0x51c4
   118d8:	movt	r0, #3
   118dc:	ldr	r2, [r0]
   118e0:	mov	r0, #1
   118e4:	mov	r3, r2
   118e8:	bl	116c8 <__printf_chk@plt>
   118ec:	mov	r0, #10
   118f0:	bl	11794 <putchar_unlocked@plt>
   118f4:	movw	r1, #13490	; 0x34b2
   118f8:	movt	r1, #2
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	bl	11524 <dcgettext@plt>
   11908:	movw	r5, #20908	; 0x51ac
   1190c:	movt	r5, #3
   11910:	ldr	r1, [r5]
   11914:	bl	11428 <fputs_unlocked@plt>
   11918:	movw	r1, #13535	; 0x34df
   1191c:	movt	r1, #2
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	bl	11524 <dcgettext@plt>
   1192c:	ldr	r1, [r5]
   11930:	bl	11428 <fputs_unlocked@plt>
   11934:	movw	r1, #13589	; 0x3515
   11938:	movt	r1, #2
   1193c:	mov	r0, #0
   11940:	mov	r2, #5
   11944:	bl	11524 <dcgettext@plt>
   11948:	ldr	r1, [r5]
   1194c:	bl	11428 <fputs_unlocked@plt>
   11950:	movw	r1, #13863	; 0x3627
   11954:	movt	r1, #2
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	bl	11524 <dcgettext@plt>
   11964:	ldr	r1, [r5]
   11968:	bl	11428 <fputs_unlocked@plt>
   1196c:	movw	r1, #14153	; 0x3749
   11970:	movt	r1, #2
   11974:	mov	r0, #0
   11978:	mov	r2, #5
   1197c:	bl	11524 <dcgettext@plt>
   11980:	ldr	r1, [r5]
   11984:	bl	11428 <fputs_unlocked@plt>
   11988:	movw	r1, #14266	; 0x37ba
   1198c:	movt	r1, #2
   11990:	mov	r0, #0
   11994:	mov	r2, #5
   11998:	bl	11524 <dcgettext@plt>
   1199c:	ldr	r1, [r5]
   119a0:	bl	11428 <fputs_unlocked@plt>
   119a4:	movw	r1, #14453	; 0x3875
   119a8:	movt	r1, #2
   119ac:	mov	r0, #0
   119b0:	mov	r2, #5
   119b4:	bl	11524 <dcgettext@plt>
   119b8:	ldr	r1, [r5]
   119bc:	bl	11428 <fputs_unlocked@plt>
   119c0:	movw	r1, #14763	; 0x39ab
   119c4:	movt	r1, #2
   119c8:	mov	r0, #0
   119cc:	mov	r2, #5
   119d0:	bl	11524 <dcgettext@plt>
   119d4:	ldr	r1, [r5]
   119d8:	bl	11428 <fputs_unlocked@plt>
   119dc:	movw	r1, #14964	; 0x3a74
   119e0:	movt	r1, #2
   119e4:	mov	r0, #0
   119e8:	mov	r2, #5
   119ec:	bl	11524 <dcgettext@plt>
   119f0:	ldr	r1, [r5]
   119f4:	bl	11428 <fputs_unlocked@plt>
   119f8:	movw	r1, #15256	; 0x3b98
   119fc:	movt	r1, #2
   11a00:	mov	r0, #0
   11a04:	mov	r2, #5
   11a08:	bl	11524 <dcgettext@plt>
   11a0c:	ldr	r1, [r5]
   11a10:	bl	11428 <fputs_unlocked@plt>
   11a14:	bl	11a64 <__assert_fail@plt+0x2b8>
   11a18:	mov	r0, r4
   11a1c:	bl	11650 <exit@plt>
   11a20:	movw	r0, #20904	; 0x51a8
   11a24:	movt	r0, #3
   11a28:	ldr	r5, [r0]
   11a2c:	movw	r1, #13412	; 0x3464
   11a30:	movt	r1, #2
   11a34:	mov	r0, #0
   11a38:	mov	r2, #5
   11a3c:	bl	11524 <dcgettext@plt>
   11a40:	mov	r2, r0
   11a44:	movw	r0, #20932	; 0x51c4
   11a48:	movt	r0, #3
   11a4c:	ldr	r3, [r0]
   11a50:	mov	r0, r5
   11a54:	mov	r1, #1
   11a58:	bl	116e0 <__fprintf_chk@plt>
   11a5c:	mov	r0, r4
   11a60:	bl	11650 <exit@plt>
   11a64:	push	{r4, r5, fp, lr}
   11a68:	add	fp, sp, #8
   11a6c:	sub	sp, sp, #56	; 0x38
   11a70:	movw	r0, #16288	; 0x3fa0
   11a74:	movt	r0, #2
   11a78:	add	r1, r0, #32
   11a7c:	mov	r5, sp
   11a80:	mov	r2, #48	; 0x30
   11a84:	vld1.64	{d16-d17}, [r1]
   11a88:	add	r1, r5, #32
   11a8c:	add	r3, r0, #16
   11a90:	vld1.64	{d18-d19}, [r0], r2
   11a94:	vld1.64	{d20-d21}, [r3]
   11a98:	vldr	d22, [r0]
   11a9c:	vst1.64	{d16-d17}, [r1]
   11aa0:	add	r0, r5, #16
   11aa4:	vst1.64	{d20-d21}, [r0]
   11aa8:	mov	r0, r5
   11aac:	vst1.64	{d18-d19}, [r0], r2
   11ab0:	vstr	d22, [r0]
   11ab4:	ldr	r1, [sp]
   11ab8:	cmp	r1, #0
   11abc:	beq	11ae4 <__assert_fail@plt+0x338>
   11ac0:	mov	r5, sp
   11ac4:	movw	r4, #15412	; 0x3c34
   11ac8:	movt	r4, #2
   11acc:	mov	r0, r4
   11ad0:	bl	11458 <strcmp@plt>
   11ad4:	cmp	r0, #0
   11ad8:	ldrne	r1, [r5, #8]!
   11adc:	cmpne	r1, #0
   11ae0:	bne	11acc <__assert_fail@plt+0x320>
   11ae4:	ldr	r4, [r5, #4]
   11ae8:	movw	r1, #15660	; 0x3d2c
   11aec:	movt	r1, #2
   11af0:	mov	r0, #0
   11af4:	mov	r2, #5
   11af8:	bl	11524 <dcgettext@plt>
   11afc:	mov	r1, r0
   11b00:	movw	r2, #15441	; 0x3c51
   11b04:	movt	r2, #2
   11b08:	movw	r3, #15683	; 0x3d43
   11b0c:	movt	r3, #2
   11b10:	mov	r0, #1
   11b14:	bl	116c8 <__printf_chk@plt>
   11b18:	movw	r5, #15412	; 0x3c34
   11b1c:	movt	r5, #2
   11b20:	cmp	r4, #0
   11b24:	moveq	r4, r5
   11b28:	mov	r0, #5
   11b2c:	mov	r1, #0
   11b30:	bl	1171c <setlocale@plt>
   11b34:	cmp	r0, #0
   11b38:	beq	11b78 <__assert_fail@plt+0x3cc>
   11b3c:	movw	r1, #15723	; 0x3d6b
   11b40:	movt	r1, #2
   11b44:	mov	r2, #3
   11b48:	bl	1177c <strncmp@plt>
   11b4c:	cmp	r0, #0
   11b50:	beq	11b78 <__assert_fail@plt+0x3cc>
   11b54:	movw	r1, #15727	; 0x3d6f
   11b58:	movt	r1, #2
   11b5c:	mov	r0, #0
   11b60:	mov	r2, #5
   11b64:	bl	11524 <dcgettext@plt>
   11b68:	movw	r1, #20908	; 0x51ac
   11b6c:	movt	r1, #3
   11b70:	ldr	r1, [r1]
   11b74:	bl	11428 <fputs_unlocked@plt>
   11b78:	movw	r1, #15798	; 0x3db6
   11b7c:	movt	r1, #2
   11b80:	mov	r0, #0
   11b84:	mov	r2, #5
   11b88:	bl	11524 <dcgettext@plt>
   11b8c:	mov	r1, r0
   11b90:	movw	r2, #15683	; 0x3d43
   11b94:	movt	r2, #2
   11b98:	mov	r0, #1
   11b9c:	mov	r3, r5
   11ba0:	bl	116c8 <__printf_chk@plt>
   11ba4:	movw	r1, #15825	; 0x3dd1
   11ba8:	movt	r1, #2
   11bac:	mov	r0, #0
   11bb0:	mov	r2, #5
   11bb4:	bl	11524 <dcgettext@plt>
   11bb8:	mov	r1, r0
   11bbc:	movw	r0, #15593	; 0x3ce9
   11bc0:	movt	r0, #2
   11bc4:	movw	r3, #15875	; 0x3e03
   11bc8:	movt	r3, #2
   11bcc:	cmp	r4, r5
   11bd0:	moveq	r3, r0
   11bd4:	mov	r0, #1
   11bd8:	mov	r2, r4
   11bdc:	bl	116c8 <__printf_chk@plt>
   11be0:	sub	sp, fp, #8
   11be4:	pop	{r4, r5, fp, pc}
   11be8:	push	{r4, r5, r6, sl, fp, lr}
   11bec:	add	fp, sp, #16
   11bf0:	sub	sp, sp, #24
   11bf4:	mov	r4, r1
   11bf8:	mov	r5, r0
   11bfc:	ldr	r0, [r1]
   11c00:	bl	13634 <__assert_fail@plt+0x1e88>
   11c04:	movw	r1, #15875	; 0x3e03
   11c08:	movt	r1, #2
   11c0c:	mov	r0, #6
   11c10:	bl	1171c <setlocale@plt>
   11c14:	movw	r6, #15445	; 0x3c55
   11c18:	movt	r6, #2
   11c1c:	movw	r1, #15417	; 0x3c39
   11c20:	movt	r1, #2
   11c24:	mov	r0, r6
   11c28:	bl	11764 <bindtextdomain@plt>
   11c2c:	mov	r0, r6
   11c30:	bl	11554 <textdomain@plt>
   11c34:	bl	11d80 <__assert_fail@plt+0x5d4>
   11c38:	movw	r0, #12356	; 0x3044
   11c3c:	movt	r0, #1
   11c40:	bl	23440 <__assert_fail@plt+0x11c94>
   11c44:	mov	ip, #0
   11c48:	movw	r1, #15497	; 0x3c89
   11c4c:	movt	r1, #2
   11c50:	movw	r2, #15482	; 0x3c7a
   11c54:	movt	r2, #2
   11c58:	movw	r3, #15470	; 0x3c6e
   11c5c:	movt	r3, #2
   11c60:	movw	r6, #6312	; 0x18a8
   11c64:	movt	r6, #1
   11c68:	movw	r0, #15455	; 0x3c5f
   11c6c:	movt	r0, #2
   11c70:	stm	sp, {r0, r6}
   11c74:	str	r3, [sp, #8]
   11c78:	str	r2, [sp, #12]
   11c7c:	str	r1, [sp, #16]
   11c80:	str	ip, [sp, #20]
   11c84:	movw	r2, #15412	; 0x3c34
   11c88:	movt	r2, #2
   11c8c:	movw	r3, #15441	; 0x3c51
   11c90:	movt	r3, #2
   11c94:	mov	r0, r5
   11c98:	mov	r1, r4
   11c9c:	bl	13154 <__assert_fail@plt+0x19a8>
   11ca0:	cmp	r5, #2
   11ca4:	bcc	11d14 <__assert_fail@plt+0x568>
   11ca8:	mov	r6, r4
   11cac:	ldr	r0, [r6, #4]!
   11cb0:	movw	r1, #15509	; 0x3c95
   11cb4:	movt	r1, #2
   11cb8:	bl	11458 <strcmp@plt>
   11cbc:	cmp	r0, #0
   11cc0:	bne	11cd4 <__assert_fail@plt+0x528>
   11cc4:	sub	r0, r5, #1
   11cc8:	cmp	r0, #1
   11ccc:	mov	r4, r6
   11cd0:	bls	11d14 <__assert_fail@plt+0x568>
   11cd4:	add	r0, r4, #4
   11cd8:	movw	r5, #20920	; 0x51b8
   11cdc:	movt	r5, #3
   11ce0:	str	r0, [r5]
   11ce4:	mov	r0, #1
   11ce8:	bl	11d94 <__assert_fail@plt+0x5e8>
   11cec:	mov	r4, r0
   11cf0:	bl	11e44 <__assert_fail@plt+0x698>
   11cf4:	cmp	r0, #0
   11cf8:	beq	11d40 <__assert_fail@plt+0x594>
   11cfc:	mov	r0, r4
   11d00:	bl	11e60 <__assert_fail@plt+0x6b4>
   11d04:	mov	r0, r4
   11d08:	bl	11eb4 <__assert_fail@plt+0x708>
   11d0c:	sub	sp, fp, #16
   11d10:	pop	{r4, r5, r6, sl, fp, pc}
   11d14:	movw	r1, #15512	; 0x3c98
   11d18:	movt	r1, #2
   11d1c:	mov	r0, #0
   11d20:	mov	r2, #5
   11d24:	bl	11524 <dcgettext@plt>
   11d28:	mov	r2, r0
   11d2c:	mov	r0, #0
   11d30:	mov	r1, #0
   11d34:	bl	115d8 <error@plt>
   11d38:	mov	r0, #2
   11d3c:	bl	118a8 <__assert_fail@plt+0xfc>
   11d40:	movw	r1, #15528	; 0x3ca8
   11d44:	movt	r1, #2
   11d48:	mov	r0, #0
   11d4c:	mov	r2, #5
   11d50:	bl	11524 <dcgettext@plt>
   11d54:	mov	r4, r0
   11d58:	ldr	r0, [r5]
   11d5c:	ldr	r2, [r0]
   11d60:	mov	r0, #0
   11d64:	mov	r1, #8
   11d68:	bl	14bc8 <__assert_fail@plt+0x341c>
   11d6c:	mov	r3, r0
   11d70:	mov	r0, #2
   11d74:	mov	r1, #0
   11d78:	mov	r2, r4
   11d7c:	bl	115d8 <error@plt>
   11d80:	movw	r0, #20816	; 0x5150
   11d84:	movt	r0, #3
   11d88:	mov	r1, #3
   11d8c:	str	r1, [r0]
   11d90:	bx	lr
   11d94:	push	{r4, r5, r6, r7, fp, lr}
   11d98:	add	fp, sp, #16
   11d9c:	mov	r4, r0
   11da0:	bl	11f20 <__assert_fail@plt+0x774>
   11da4:	mov	r6, r0
   11da8:	movw	r0, #15876	; 0x3e04
   11dac:	movt	r0, #2
   11db0:	bl	11fd0 <__assert_fail@plt+0x824>
   11db4:	cmp	r0, #0
   11db8:	beq	11e3c <__assert_fail@plt+0x690>
   11dbc:	movw	r5, #15876	; 0x3e04
   11dc0:	movt	r5, #2
   11dc4:	cmp	r4, #0
   11dc8:	mov	r0, #0
   11dcc:	movne	r0, r6
   11dd0:	blne	11eb4 <__assert_fail@plt+0x708>
   11dd4:	bl	11f20 <__assert_fail@plt+0x774>
   11dd8:	mov	r7, r0
   11ddc:	mov	r0, r6
   11de0:	bl	11eb4 <__assert_fail@plt+0x708>
   11de4:	cmp	r0, #0
   11de8:	beq	11e1c <__assert_fail@plt+0x670>
   11dec:	mov	r0, r6
   11df0:	bl	12010 <__assert_fail@plt+0x864>
   11df4:	mov	r0, r7
   11df8:	bl	11eb4 <__assert_fail@plt+0x708>
   11dfc:	cmp	r0, #0
   11e00:	beq	11e28 <__assert_fail@plt+0x67c>
   11e04:	mov	r0, r7
   11e08:	bl	12010 <__assert_fail@plt+0x864>
   11e0c:	mov	r0, #0
   11e10:	bl	12044 <__assert_fail@plt+0x898>
   11e14:	mov	r6, r0
   11e18:	b	11e2c <__assert_fail@plt+0x680>
   11e1c:	mov	r0, r7
   11e20:	bl	12010 <__assert_fail@plt+0x864>
   11e24:	b	11e2c <__assert_fail@plt+0x680>
   11e28:	mov	r6, r7
   11e2c:	mov	r0, r5
   11e30:	bl	11fd0 <__assert_fail@plt+0x824>
   11e34:	cmp	r0, #0
   11e38:	bne	11dc4 <__assert_fail@plt+0x618>
   11e3c:	mov	r0, r6
   11e40:	pop	{r4, r5, r6, r7, fp, pc}
   11e44:	movw	r0, #20920	; 0x51b8
   11e48:	movt	r0, #3
   11e4c:	ldr	r0, [r0]
   11e50:	ldr	r0, [r0]
   11e54:	clz	r0, r0
   11e58:	lsr	r0, r0, #5
   11e5c:	bx	lr
   11e60:	push	{fp, lr}
   11e64:	mov	fp, sp
   11e68:	ldr	r1, [r0]
   11e6c:	cmp	r1, #1
   11e70:	beq	11ea4 <__assert_fail@plt+0x6f8>
   11e74:	cmp	r1, #0
   11e78:	bne	11eb0 <__assert_fail@plt+0x704>
   11e7c:	movw	r1, #20908	; 0x51ac
   11e80:	movt	r1, #3
   11e84:	ldr	r1, [r1]
   11e88:	add	r2, r0, #4
   11e8c:	mov	r0, r1
   11e90:	mov	r1, #10
   11e94:	bl	1156c <__gmpz_out_str@plt>
   11e98:	mov	r0, #10
   11e9c:	pop	{fp, lr}
   11ea0:	b	11794 <putchar_unlocked@plt>
   11ea4:	ldr	r0, [r0, #4]
   11ea8:	pop	{fp, lr}
   11eac:	b	115fc <puts@plt>
   11eb0:	bl	11788 <abort@plt>
   11eb4:	ldr	r1, [r0]
   11eb8:	cmp	r1, #1
   11ebc:	beq	11ee0 <__assert_fail@plt+0x734>
   11ec0:	cmp	r1, #0
   11ec4:	ldreq	r0, [r0, #8]
   11ec8:	clzeq	r0, r0
   11ecc:	lsreq	r0, r0, #5
   11ed0:	bxeq	lr
   11ed4:	push	{fp, lr}
   11ed8:	mov	fp, sp
   11edc:	bl	11788 <abort@plt>
   11ee0:	ldr	r1, [r0, #4]
   11ee4:	ldrb	r2, [r1]
   11ee8:	mov	r0, #1
   11eec:	cmp	r2, #0
   11ef0:	bxeq	lr
   11ef4:	cmp	r2, #45	; 0x2d
   11ef8:	addeq	r1, r1, #1
   11efc:	ldrb	r2, [r1], #1
   11f00:	uxtb	r2, r2
   11f04:	cmp	r2, #48	; 0x30
   11f08:	movne	r0, #0
   11f0c:	bxne	lr
   11f10:	ldrb	r2, [r1], #1
   11f14:	cmp	r2, #0
   11f18:	bne	11f00 <__assert_fail@plt+0x754>
   11f1c:	bx	lr
   11f20:	push	{r4, r5, r6, r7, fp, lr}
   11f24:	add	fp, sp, #16
   11f28:	mov	r4, r0
   11f2c:	bl	12074 <__assert_fail@plt+0x8c8>
   11f30:	mov	r5, r0
   11f34:	movw	r0, #15878	; 0x3e06
   11f38:	movt	r0, #2
   11f3c:	bl	11fd0 <__assert_fail@plt+0x824>
   11f40:	cmp	r0, #0
   11f44:	beq	11fc8 <__assert_fail@plt+0x81c>
   11f48:	movw	r6, #15878	; 0x3e06
   11f4c:	movt	r6, #2
   11f50:	cmp	r4, #0
   11f54:	mov	r0, #0
   11f58:	beq	11f68 <__assert_fail@plt+0x7bc>
   11f5c:	mov	r0, r5
   11f60:	bl	11eb4 <__assert_fail@plt+0x708>
   11f64:	eor	r0, r0, #1
   11f68:	bl	12074 <__assert_fail@plt+0x8c8>
   11f6c:	mov	r7, r0
   11f70:	mov	r0, r5
   11f74:	bl	11eb4 <__assert_fail@plt+0x708>
   11f78:	cmp	r0, #0
   11f7c:	bne	11f90 <__assert_fail@plt+0x7e4>
   11f80:	mov	r0, r7
   11f84:	bl	11eb4 <__assert_fail@plt+0x708>
   11f88:	cmp	r0, #0
   11f8c:	beq	11fb0 <__assert_fail@plt+0x804>
   11f90:	mov	r0, r5
   11f94:	bl	12010 <__assert_fail@plt+0x864>
   11f98:	mov	r0, r7
   11f9c:	bl	12010 <__assert_fail@plt+0x864>
   11fa0:	mov	r0, #0
   11fa4:	bl	12044 <__assert_fail@plt+0x898>
   11fa8:	mov	r5, r0
   11fac:	b	11fb8 <__assert_fail@plt+0x80c>
   11fb0:	mov	r0, r7
   11fb4:	bl	12010 <__assert_fail@plt+0x864>
   11fb8:	mov	r0, r6
   11fbc:	bl	11fd0 <__assert_fail@plt+0x824>
   11fc0:	cmp	r0, #0
   11fc4:	bne	11f50 <__assert_fail@plt+0x7a4>
   11fc8:	mov	r0, r5
   11fcc:	pop	{r4, r5, r6, r7, fp, pc}
   11fd0:	push	{r4, r5, fp, lr}
   11fd4:	add	fp, sp, #8
   11fd8:	mov	r1, r0
   11fdc:	movw	r4, #20920	; 0x51b8
   11fe0:	movt	r4, #3
   11fe4:	ldr	r5, [r4]
   11fe8:	ldr	r0, [r5]
   11fec:	cmp	r0, #0
   11ff0:	moveq	r0, #0
   11ff4:	popeq	{r4, r5, fp, pc}
   11ff8:	bl	11458 <strcmp@plt>
   11ffc:	clz	r0, r0
   12000:	lsr	r0, r0, #5
   12004:	add	r1, r5, r0, lsl #2
   12008:	str	r1, [r4]
   1200c:	pop	{r4, r5, fp, pc}
   12010:	push	{r4, sl, fp, lr}
   12014:	add	fp, sp, #8
   12018:	mov	r4, r0
   1201c:	ldr	r1, [r0], #4
   12020:	cmp	r1, #1
   12024:	bne	12034 <__assert_fail@plt+0x888>
   12028:	ldr	r0, [r0]
   1202c:	bl	1312c <__assert_fail@plt+0x1980>
   12030:	b	12038 <__assert_fail@plt+0x88c>
   12034:	bl	11680 <__gmpz_clear@plt>
   12038:	mov	r0, r4
   1203c:	pop	{r4, sl, fp, lr}
   12040:	b	1312c <__assert_fail@plt+0x1980>
   12044:	push	{r4, r5, fp, lr}
   12048:	add	fp, sp, #8
   1204c:	mov	r4, r0
   12050:	mov	r0, #16
   12054:	bl	22624 <__assert_fail@plt+0x10e78>
   12058:	mov	r5, r0
   1205c:	mov	r1, #0
   12060:	str	r1, [r0], #4
   12064:	mov	r1, r4
   12068:	bl	11710 <__gmpz_init_set_ui@plt>
   1206c:	mov	r0, r5
   12070:	pop	{r4, r5, fp, pc}
   12074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12078:	add	fp, sp, #28
   1207c:	sub	sp, sp, #4
   12080:	mov	r4, r0
   12084:	bl	12260 <__assert_fail@plt+0xab4>
   12088:	mov	sl, r0
   1208c:	movw	r6, #15880	; 0x3e08
   12090:	movt	r6, #2
   12094:	str	r4, [sp]
   12098:	b	120b8 <__assert_fail@plt+0x90c>
   1209c:	mov	r0, sl
   120a0:	bl	12010 <__assert_fail@plt+0x864>
   120a4:	mov	r0, r9
   120a8:	bl	12010 <__assert_fail@plt+0x864>
   120ac:	mov	r0, r8
   120b0:	bl	12044 <__assert_fail@plt+0x898>
   120b4:	mov	sl, r0
   120b8:	mov	r0, r6
   120bc:	bl	11fd0 <__assert_fail@plt+0x824>
   120c0:	cmp	r0, #0
   120c4:	mov	r5, #0
   120c8:	bne	12158 <__assert_fail@plt+0x9ac>
   120cc:	movw	r0, #15882	; 0x3e0a
   120d0:	movt	r0, #2
   120d4:	bl	11fd0 <__assert_fail@plt+0x824>
   120d8:	mov	r5, #1
   120dc:	cmp	r0, #0
   120e0:	bne	12158 <__assert_fail@plt+0x9ac>
   120e4:	movw	r0, #15889	; 0x3e11
   120e8:	movt	r0, #2
   120ec:	bl	11fd0 <__assert_fail@plt+0x824>
   120f0:	mov	r5, #2
   120f4:	cmp	r0, #0
   120f8:	bne	12158 <__assert_fail@plt+0x9ac>
   120fc:	movw	r0, #15885	; 0x3e0d
   12100:	movt	r0, #2
   12104:	bl	11fd0 <__assert_fail@plt+0x824>
   12108:	cmp	r0, #0
   1210c:	bne	12158 <__assert_fail@plt+0x9ac>
   12110:	movw	r0, #15888	; 0x3e10
   12114:	movt	r0, #2
   12118:	bl	11fd0 <__assert_fail@plt+0x824>
   1211c:	mov	r5, #3
   12120:	cmp	r0, #0
   12124:	bne	12158 <__assert_fail@plt+0x9ac>
   12128:	movw	r0, #15891	; 0x3e13
   1212c:	movt	r0, #2
   12130:	bl	11fd0 <__assert_fail@plt+0x824>
   12134:	mov	r5, #4
   12138:	cmp	r0, #0
   1213c:	bne	12158 <__assert_fail@plt+0x9ac>
   12140:	movw	r0, #15894	; 0x3e16
   12144:	movt	r0, #2
   12148:	bl	11fd0 <__assert_fail@plt+0x824>
   1214c:	mov	r5, #5
   12150:	cmp	r0, #0
   12154:	beq	12250 <__assert_fail@plt+0xaa4>
   12158:	mov	r0, r4
   1215c:	bl	12260 <__assert_fail@plt+0xab4>
   12160:	mov	r9, r0
   12164:	mov	r8, #0
   12168:	cmp	r4, #0
   1216c:	beq	1209c <__assert_fail@plt+0x8f0>
   12170:	mov	r4, r6
   12174:	mov	r0, sl
   12178:	bl	12350 <__assert_fail@plt+0xba4>
   1217c:	mov	r0, r9
   12180:	bl	12350 <__assert_fail@plt+0xba4>
   12184:	ldr	r7, [sl, #4]
   12188:	mov	r0, r7
   1218c:	bl	123a0 <__assert_fail@plt+0xbf4>
   12190:	cmp	r0, #0
   12194:	beq	121bc <__assert_fail@plt+0xa10>
   12198:	ldr	r6, [r9, #4]
   1219c:	mov	r0, r6
   121a0:	bl	123a0 <__assert_fail@plt+0xbf4>
   121a4:	cmp	r0, #0
   121a8:	beq	121bc <__assert_fail@plt+0xa10>
   121ac:	mov	r0, r7
   121b0:	mov	r1, r6
   121b4:	bl	21f00 <__assert_fail@plt+0x10754>
   121b8:	b	121d4 <__assert_fail@plt+0xa28>
   121bc:	bl	1168c <__errno_location@plt>
   121c0:	mov	r1, #0
   121c4:	str	r1, [r0]
   121c8:	ldr	r0, [sl, #4]
   121cc:	ldr	r1, [r9, #4]
   121d0:	bl	115f0 <strcoll@plt>
   121d4:	mov	r8, r0
   121d8:	cmp	r5, #5
   121dc:	bhi	1225c <__assert_fail@plt+0xab0>
   121e0:	add	r0, pc, #4
   121e4:	mov	r6, r4
   121e8:	ldr	pc, [r0, r5, lsl #2]
   121ec:	andeq	r2, r1, r4, lsl #4
   121f0:	andeq	r2, r1, r0, lsr #4
   121f4:	andeq	r2, r1, r4, lsl r2
   121f8:	andeq	r2, r1, r0, lsr r2
   121fc:	andeq	r2, r1, ip, lsl #4
   12200:	andeq	r2, r1, ip, lsr r2
   12204:	lsr	r8, r8, #31
   12208:	b	12248 <__assert_fail@plt+0xa9c>
   1220c:	cmn	r8, #1
   12210:	b	12240 <__assert_fail@plt+0xa94>
   12214:	clz	r0, r8
   12218:	lsr	r8, r0, #5
   1221c:	b	12248 <__assert_fail@plt+0xa9c>
   12220:	cmp	r8, #1
   12224:	mov	r8, #0
   12228:	movwlt	r8, #1
   1222c:	b	12248 <__assert_fail@plt+0xa9c>
   12230:	cmp	r8, #0
   12234:	movwne	r8, #1
   12238:	b	12248 <__assert_fail@plt+0xa9c>
   1223c:	cmp	r8, #0
   12240:	mov	r8, #0
   12244:	movwgt	r8, #1
   12248:	ldr	r4, [sp]
   1224c:	b	1209c <__assert_fail@plt+0x8f0>
   12250:	mov	r0, sl
   12254:	sub	sp, fp, #28
   12258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1225c:	bl	11788 <abort@plt>
   12260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12264:	add	fp, sp, #28
   12268:	sub	sp, sp, #4
   1226c:	mov	r4, r0
   12270:	bl	123dc <__assert_fail@plt+0xc30>
   12274:	mov	r5, r0
   12278:	add	r6, r0, #4
   1227c:	movw	r9, #15896	; 0x3e18
   12280:	movt	r9, #2
   12284:	movw	r8, #15510	; 0x3c96
   12288:	movt	r8, #2
   1228c:	b	12298 <__assert_fail@plt+0xaec>
   12290:	mov	r0, r7
   12294:	bl	12010 <__assert_fail@plt+0x864>
   12298:	mov	r0, r9
   1229c:	bl	11fd0 <__assert_fail@plt+0x824>
   122a0:	mov	sl, #0
   122a4:	cmp	r0, #0
   122a8:	bne	122c0 <__assert_fail@plt+0xb14>
   122ac:	mov	r0, r8
   122b0:	bl	11fd0 <__assert_fail@plt+0x824>
   122b4:	mov	sl, #1
   122b8:	cmp	r0, #0
   122bc:	beq	12320 <__assert_fail@plt+0xb74>
   122c0:	mov	r0, r4
   122c4:	bl	123dc <__assert_fail@plt+0xc30>
   122c8:	mov	r7, r0
   122cc:	cmp	r4, #0
   122d0:	beq	12290 <__assert_fail@plt+0xae4>
   122d4:	mov	r0, r5
   122d8:	bl	1250c <__assert_fail@plt+0xd60>
   122dc:	cmp	r0, #0
   122e0:	beq	1232c <__assert_fail@plt+0xb80>
   122e4:	mov	r0, r7
   122e8:	bl	1250c <__assert_fail@plt+0xd60>
   122ec:	cmp	r0, #0
   122f0:	beq	1232c <__assert_fail@plt+0xb80>
   122f4:	cmp	sl, #0
   122f8:	movw	r3, #5340	; 0x14dc
   122fc:	movt	r3, #1
   12300:	movw	r0, #5964	; 0x174c
   12304:	movt	r0, #1
   12308:	moveq	r3, r0
   1230c:	add	r2, r7, #4
   12310:	mov	r0, r6
   12314:	mov	r1, r6
   12318:	blx	r3
   1231c:	b	12290 <__assert_fail@plt+0xae4>
   12320:	mov	r0, r5
   12324:	sub	sp, fp, #28
   12328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1232c:	movw	r1, #15898	; 0x3e1a
   12330:	movt	r1, #2
   12334:	mov	r0, #0
   12338:	mov	r2, #5
   1233c:	bl	11524 <dcgettext@plt>
   12340:	mov	r2, r0
   12344:	mov	r0, #2
   12348:	mov	r1, #0
   1234c:	bl	115d8 <error@plt>
   12350:	push	{r4, r5, r6, sl, fp, lr}
   12354:	add	fp, sp, #16
   12358:	mov	r4, r0
   1235c:	ldr	r0, [r0]
   12360:	cmp	r0, #1
   12364:	popeq	{r4, r5, r6, sl, fp, pc}
   12368:	cmp	r0, #0
   1236c:	bne	1239c <__assert_fail@plt+0xbf0>
   12370:	add	r5, r4, #4
   12374:	mov	r0, #0
   12378:	mov	r1, #10
   1237c:	mov	r2, r5
   12380:	bl	11530 <__gmpz_get_str@plt>
   12384:	mov	r6, r0
   12388:	mov	r0, r5
   1238c:	bl	11680 <__gmpz_clear@plt>
   12390:	mov	r0, #1
   12394:	stm	r4, {r0, r6}
   12398:	pop	{r4, r5, r6, sl, fp, pc}
   1239c:	bl	11788 <abort@plt>
   123a0:	mov	r1, r0
   123a4:	ldrb	r2, [r1], #1
   123a8:	cmp	r2, #45	; 0x2d
   123ac:	movne	r1, r0
   123b0:	add	r0, r1, #1
   123b4:	ldrb	r1, [r0, #-1]
   123b8:	sub	r1, r1, #48	; 0x30
   123bc:	cmp	r1, #9
   123c0:	movhi	r0, #0
   123c4:	bxhi	lr
   123c8:	ldrb	r1, [r0], #1
   123cc:	cmp	r1, #0
   123d0:	moveq	r0, #1
   123d4:	bxeq	lr
   123d8:	b	123b4 <__assert_fail@plt+0xc08>
   123dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e0:	add	fp, sp, #28
   123e4:	sub	sp, sp, #4
   123e8:	mov	r4, r0
   123ec:	bl	1259c <__assert_fail@plt+0xdf0>
   123f0:	mov	sl, r0
   123f4:	add	r6, r0, #4
   123f8:	movw	r7, #15919	; 0x3e2f
   123fc:	movt	r7, #2
   12400:	movw	r8, #17984	; 0x4640
   12404:	movt	r8, #2
   12408:	b	12414 <__assert_fail@plt+0xc68>
   1240c:	mov	r0, r5
   12410:	bl	12010 <__assert_fail@plt+0x864>
   12414:	mov	r0, r7
   12418:	bl	11fd0 <__assert_fail@plt+0x824>
   1241c:	mov	r9, #0
   12420:	cmp	r0, #0
   12424:	bne	12454 <__assert_fail@plt+0xca8>
   12428:	mov	r0, r8
   1242c:	bl	11fd0 <__assert_fail@plt+0x824>
   12430:	mov	r9, #1
   12434:	cmp	r0, #0
   12438:	bne	12454 <__assert_fail@plt+0xca8>
   1243c:	movw	r0, #15921	; 0x3e31
   12440:	movt	r0, #2
   12444:	bl	11fd0 <__assert_fail@plt+0x824>
   12448:	mov	r9, #2
   1244c:	cmp	r0, #0
   12450:	beq	124d0 <__assert_fail@plt+0xd24>
   12454:	mov	r0, r4
   12458:	bl	1259c <__assert_fail@plt+0xdf0>
   1245c:	mov	r5, r0
   12460:	cmp	r4, #0
   12464:	beq	1240c <__assert_fail@plt+0xc60>
   12468:	mov	r0, sl
   1246c:	bl	1250c <__assert_fail@plt+0xd60>
   12470:	cmp	r0, #0
   12474:	beq	124dc <__assert_fail@plt+0xd30>
   12478:	mov	r0, r5
   1247c:	bl	1250c <__assert_fail@plt+0xd60>
   12480:	cmp	r0, #0
   12484:	beq	124dc <__assert_fail@plt+0xd30>
   12488:	cmp	r9, #0
   1248c:	movw	r3, #5448	; 0x1548
   12490:	movt	r3, #1
   12494:	beq	124bc <__assert_fail@plt+0xd10>
   12498:	ldr	r0, [r5, #8]
   1249c:	cmp	r0, #0
   124a0:	beq	124e8 <__assert_fail@plt+0xd3c>
   124a4:	cmp	r9, #1
   124a8:	movw	r3, #5748	; 0x1674
   124ac:	movt	r3, #1
   124b0:	movw	r0, #5220	; 0x1464
   124b4:	movt	r0, #1
   124b8:	moveq	r3, r0
   124bc:	add	r2, r5, #4
   124c0:	mov	r0, r6
   124c4:	mov	r1, r6
   124c8:	blx	r3
   124cc:	b	1240c <__assert_fail@plt+0xc60>
   124d0:	mov	r0, sl
   124d4:	sub	sp, fp, #28
   124d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124dc:	movw	r1, #15898	; 0x3e1a
   124e0:	movt	r1, #2
   124e4:	b	124f0 <__assert_fail@plt+0xd44>
   124e8:	movw	r1, #15923	; 0x3e33
   124ec:	movt	r1, #2
   124f0:	mov	r0, #0
   124f4:	mov	r2, #5
   124f8:	bl	11524 <dcgettext@plt>
   124fc:	mov	r2, r0
   12500:	mov	r0, #2
   12504:	mov	r1, #0
   12508:	bl	115d8 <error@plt>
   1250c:	push	{r4, r5, r6, sl, fp, lr}
   12510:	add	fp, sp, #16
   12514:	mov	r4, r0
   12518:	ldr	r1, [r0]
   1251c:	mov	r0, #1
   12520:	cmp	r1, #0
   12524:	beq	1257c <__assert_fail@plt+0xdd0>
   12528:	cmp	r1, #1
   1252c:	bne	12580 <__assert_fail@plt+0xdd4>
   12530:	mov	r6, r4
   12534:	ldr	r5, [r6, #4]!
   12538:	mov	r0, r5
   1253c:	bl	123a0 <__assert_fail@plt+0xbf4>
   12540:	mov	r1, r0
   12544:	mov	r0, #0
   12548:	cmp	r1, #0
   1254c:	popeq	{r4, r5, r6, sl, fp, pc}
   12550:	mov	r0, r6
   12554:	mov	r1, r5
   12558:	mov	r2, #10
   1255c:	bl	11758 <__gmpz_init_set_str@plt>
   12560:	cmp	r0, #0
   12564:	bne	12584 <__assert_fail@plt+0xdd8>
   12568:	mov	r0, r5
   1256c:	bl	1312c <__assert_fail@plt+0x1980>
   12570:	mov	r0, #0
   12574:	str	r0, [r4]
   12578:	mov	r0, #1
   1257c:	pop	{r4, r5, r6, sl, fp, pc}
   12580:	bl	11788 <abort@plt>
   12584:	movw	r2, #16360	; 0x3fe8
   12588:	movt	r2, #2
   1258c:	mov	r0, #3
   12590:	mov	r1, #34	; 0x22
   12594:	mov	r3, r5
   12598:	bl	115d8 <error@plt>
   1259c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   125a0:	add	fp, sp, #24
   125a4:	mov	r4, r0
   125a8:	bl	1261c <__assert_fail@plt+0xe70>
   125ac:	mov	r6, r0
   125b0:	movw	r0, #15940	; 0x3e44
   125b4:	movt	r0, #2
   125b8:	bl	11fd0 <__assert_fail@plt+0x824>
   125bc:	cmp	r0, #0
   125c0:	beq	12614 <__assert_fail@plt+0xe68>
   125c4:	movw	r8, #15940	; 0x3e44
   125c8:	movt	r8, #2
   125cc:	mov	r0, r4
   125d0:	bl	1261c <__assert_fail@plt+0xe70>
   125d4:	mov	r7, r0
   125d8:	cmp	r4, #0
   125dc:	beq	125fc <__assert_fail@plt+0xe50>
   125e0:	mov	r0, r6
   125e4:	mov	r1, r7
   125e8:	bl	12844 <__assert_fail@plt+0x1098>
   125ec:	mov	r5, r0
   125f0:	mov	r0, r6
   125f4:	bl	12010 <__assert_fail@plt+0x864>
   125f8:	mov	r6, r5
   125fc:	mov	r0, r7
   12600:	bl	12010 <__assert_fail@plt+0x864>
   12604:	mov	r0, r8
   12608:	bl	11fd0 <__assert_fail@plt+0x824>
   1260c:	cmp	r0, #0
   12610:	bne	125cc <__assert_fail@plt+0xe20>
   12614:	mov	r0, r6
   12618:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1261c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12620:	add	fp, sp, #24
   12624:	mov	r4, r0
   12628:	movw	r0, #15896	; 0x3e18
   1262c:	movt	r0, #2
   12630:	bl	11fd0 <__assert_fail@plt+0x824>
   12634:	cmp	r0, #0
   12638:	beq	12660 <__assert_fail@plt+0xeb4>
   1263c:	bl	12a18 <__assert_fail@plt+0x126c>
   12640:	movw	r0, #20920	; 0x51b8
   12644:	movt	r0, #3
   12648:	ldr	r1, [r0]
   1264c:	add	r2, r1, #4
   12650:	str	r2, [r0]
   12654:	ldr	r0, [r1]
   12658:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1265c:	b	12a74 <__assert_fail@plt+0x12c8>
   12660:	movw	r0, #15942	; 0x3e46
   12664:	movt	r0, #2
   12668:	bl	11fd0 <__assert_fail@plt+0x824>
   1266c:	cmp	r0, #0
   12670:	beq	126a4 <__assert_fail@plt+0xef8>
   12674:	mov	r0, r4
   12678:	bl	1261c <__assert_fail@plt+0xe70>
   1267c:	mov	r4, r0
   12680:	bl	12350 <__assert_fail@plt+0xba4>
   12684:	ldr	r0, [r4, #4]
   12688:	bl	133a0 <__assert_fail@plt+0x1bf4>
   1268c:	bl	12044 <__assert_fail@plt+0x898>
   12690:	mov	r5, r0
   12694:	mov	r0, r4
   12698:	bl	12010 <__assert_fail@plt+0x864>
   1269c:	mov	r0, r5
   126a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   126a4:	movw	r0, #15949	; 0x3e4d
   126a8:	movt	r0, #2
   126ac:	bl	11fd0 <__assert_fail@plt+0x824>
   126b0:	cmp	r0, #0
   126b4:	beq	126f8 <__assert_fail@plt+0xf4c>
   126b8:	mov	r0, r4
   126bc:	bl	1261c <__assert_fail@plt+0xe70>
   126c0:	mov	r6, r0
   126c4:	mov	r0, r4
   126c8:	bl	1261c <__assert_fail@plt+0xe70>
   126cc:	mov	r5, r0
   126d0:	cmp	r4, #0
   126d4:	beq	12760 <__assert_fail@plt+0xfb4>
   126d8:	mov	r0, r6
   126dc:	mov	r1, r5
   126e0:	bl	12844 <__assert_fail@plt+0x1098>
   126e4:	mov	r7, r0
   126e8:	mov	r0, r6
   126ec:	bl	12010 <__assert_fail@plt+0x864>
   126f0:	mov	r0, r5
   126f4:	b	12838 <__assert_fail@plt+0x108c>
   126f8:	movw	r0, #15955	; 0x3e53
   126fc:	movt	r0, #2
   12700:	bl	11fd0 <__assert_fail@plt+0x824>
   12704:	cmp	r0, #0
   12708:	beq	1276c <__assert_fail@plt+0xfc0>
   1270c:	mov	r0, r4
   12710:	bl	1261c <__assert_fail@plt+0xe70>
   12714:	mov	r5, r0
   12718:	mov	r0, r4
   1271c:	bl	1261c <__assert_fail@plt+0xe70>
   12720:	mov	r4, r0
   12724:	mov	r0, r5
   12728:	bl	12350 <__assert_fail@plt+0xba4>
   1272c:	mov	r0, r4
   12730:	bl	12350 <__assert_fail@plt+0xba4>
   12734:	ldr	r1, [r4, #4]
   12738:	ldr	r0, [r5, #4]
   1273c:	bl	12aa8 <__assert_fail@plt+0x12fc>
   12740:	bl	12044 <__assert_fail@plt+0x898>
   12744:	mov	r6, r0
   12748:	mov	r0, r5
   1274c:	bl	12010 <__assert_fail@plt+0x864>
   12750:	mov	r0, r4
   12754:	bl	12010 <__assert_fail@plt+0x864>
   12758:	mov	r0, r6
   1275c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12760:	mov	r7, r6
   12764:	mov	r0, r5
   12768:	b	12838 <__assert_fail@plt+0x108c>
   1276c:	movw	r0, #15961	; 0x3e59
   12770:	movt	r0, #2
   12774:	bl	11fd0 <__assert_fail@plt+0x824>
   12778:	cmp	r0, #0
   1277c:	beq	12808 <__assert_fail@plt+0x105c>
   12780:	mov	r0, r4
   12784:	bl	1261c <__assert_fail@plt+0xe70>
   12788:	mov	r5, r0
   1278c:	mov	r0, r4
   12790:	bl	1261c <__assert_fail@plt+0xe70>
   12794:	mov	r6, r0
   12798:	mov	r0, r4
   1279c:	bl	1261c <__assert_fail@plt+0xe70>
   127a0:	mov	r4, r0
   127a4:	mov	r0, r5
   127a8:	bl	12350 <__assert_fail@plt+0xba4>
   127ac:	mov	r0, r6
   127b0:	bl	1250c <__assert_fail@plt+0xd60>
   127b4:	cmp	r0, #0
   127b8:	beq	12814 <__assert_fail@plt+0x1068>
   127bc:	mov	r0, r4
   127c0:	bl	1250c <__assert_fail@plt+0xd60>
   127c4:	cmp	r0, #0
   127c8:	beq	12814 <__assert_fail@plt+0x1068>
   127cc:	add	r0, r6, #4
   127d0:	bl	12c7c <__assert_fail@plt+0x14d0>
   127d4:	mov	r7, r0
   127d8:	add	r0, r4, #4
   127dc:	bl	12c7c <__assert_fail@plt+0x14d0>
   127e0:	mov	r2, r0
   127e4:	ldr	r0, [r5, #4]
   127e8:	mov	r1, r7
   127ec:	bl	12cc4 <__assert_fail@plt+0x1518>
   127f0:	mov	r8, r0
   127f4:	bl	12a74 <__assert_fail@plt+0x12c8>
   127f8:	mov	r7, r0
   127fc:	mov	r0, r8
   12800:	bl	1312c <__assert_fail@plt+0x1980>
   12804:	b	12824 <__assert_fail@plt+0x1078>
   12808:	mov	r0, r4
   1280c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12810:	b	12e58 <__assert_fail@plt+0x16ac>
   12814:	movw	r0, #15875	; 0x3e03
   12818:	movt	r0, #2
   1281c:	bl	12a74 <__assert_fail@plt+0x12c8>
   12820:	mov	r7, r0
   12824:	mov	r0, r5
   12828:	bl	12010 <__assert_fail@plt+0x864>
   1282c:	mov	r0, r6
   12830:	bl	12010 <__assert_fail@plt+0x864>
   12834:	mov	r0, r4
   12838:	bl	12010 <__assert_fail@plt+0x864>
   1283c:	mov	r0, r7
   12840:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12844:	push	{r4, r5, r6, r7, fp, lr}
   12848:	add	fp, sp, #16
   1284c:	sub	sp, sp, #304	; 0x130
   12850:	mov	r5, r1
   12854:	mov	r4, r0
   12858:	bl	12350 <__assert_fail@plt+0xba4>
   1285c:	mov	r0, r5
   12860:	bl	12350 <__assert_fail@plt+0xba4>
   12864:	movw	r0, #21240	; 0x52f8
   12868:	movt	r0, #3
   1286c:	movw	r1, #710	; 0x2c6
   12870:	str	r1, [r0]
   12874:	mov	r0, #0
   12878:	str	r0, [sp, #12]
   1287c:	str	r0, [sp, #8]
   12880:	str	r0, [sp, #4]
   12884:	str	r0, [fp, #-48]	; 0xffffffd0
   12888:	str	r0, [fp, #-44]	; 0xffffffd4
   1288c:	add	r1, sp, #16
   12890:	str	r1, [fp, #-32]	; 0xffffffe0
   12894:	str	r0, [fp, #-28]	; 0xffffffe4
   12898:	ldr	r5, [r5, #4]
   1289c:	mov	r0, r5
   128a0:	bl	1165c <strlen@plt>
   128a4:	mov	r1, r0
   128a8:	sub	r2, fp, #48	; 0x30
   128ac:	mov	r0, r5
   128b0:	bl	15280 <__assert_fail@plt+0x3ad4>
   128b4:	cmp	r0, #0
   128b8:	bne	129c8 <__assert_fail@plt+0x121c>
   128bc:	ldrb	r0, [fp, #-20]	; 0xffffffec
   128c0:	and	r0, r0, #127	; 0x7f
   128c4:	strb	r0, [fp, #-20]	; 0xffffffec
   128c8:	ldr	r5, [r4, #4]
   128cc:	mov	r0, r5
   128d0:	bl	1165c <strlen@plt>
   128d4:	mov	r2, r0
   128d8:	add	r0, sp, #4
   128dc:	str	r0, [sp]
   128e0:	sub	r0, fp, #48	; 0x30
   128e4:	mov	r1, r5
   128e8:	mov	r3, #0
   128ec:	bl	16540 <__assert_fail@plt+0x4d94>
   128f0:	mov	r5, r0
   128f4:	cmp	r0, #0
   128f8:	blt	1293c <__assert_fail@plt+0x1190>
   128fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12900:	cmp	r0, #0
   12904:	beq	12960 <__assert_fail@plt+0x11b4>
   12908:	ldr	r0, [sp, #12]
   1290c:	ldr	r0, [r0, #4]
   12910:	cmn	r0, #1
   12914:	ble	12950 <__assert_fail@plt+0x11a4>
   12918:	ldr	r1, [r4, #4]
   1291c:	mov	r2, #0
   12920:	strb	r2, [r1, r0]
   12924:	ldr	r0, [r4, #4]
   12928:	ldr	r1, [sp, #8]
   1292c:	ldr	r1, [r1, #4]
   12930:	add	r0, r0, r1
   12934:	bl	12a74 <__assert_fail@plt+0x12c8>
   12938:	b	1298c <__assert_fail@plt+0x11e0>
   1293c:	cmn	r5, #1
   12940:	bne	129e0 <__assert_fail@plt+0x1234>
   12944:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12948:	cmp	r0, #0
   1294c:	beq	12984 <__assert_fail@plt+0x11d8>
   12950:	movw	r0, #15875	; 0x3e03
   12954:	movt	r0, #2
   12958:	bl	12a74 <__assert_fail@plt+0x12c8>
   1295c:	b	1298c <__assert_fail@plt+0x11e0>
   12960:	bl	1159c <__ctype_get_mb_cur_max@plt>
   12964:	cmp	r0, #1
   12968:	beq	1297c <__assert_fail@plt+0x11d0>
   1296c:	ldr	r0, [r4, #4]
   12970:	mov	r1, r5
   12974:	bl	12f78 <__assert_fail@plt+0x17cc>
   12978:	mov	r5, r0
   1297c:	mov	r0, r5
   12980:	b	12988 <__assert_fail@plt+0x11dc>
   12984:	mov	r0, #0
   12988:	bl	12044 <__assert_fail@plt+0x898>
   1298c:	mov	r4, r0
   12990:	ldr	r0, [sp, #4]
   12994:	cmp	r0, #0
   12998:	beq	129ac <__assert_fail@plt+0x1200>
   1299c:	ldr	r0, [sp, #8]
   129a0:	bl	1312c <__assert_fail@plt+0x1980>
   129a4:	ldr	r0, [sp, #12]
   129a8:	bl	1312c <__assert_fail@plt+0x1980>
   129ac:	mov	r0, #0
   129b0:	str	r0, [fp, #-32]	; 0xffffffe0
   129b4:	sub	r0, fp, #48	; 0x30
   129b8:	bl	15ac8 <__assert_fail@plt+0x431c>
   129bc:	mov	r0, r4
   129c0:	sub	sp, fp, #16
   129c4:	pop	{r4, r5, r6, r7, fp, pc}
   129c8:	mov	r3, r0
   129cc:	movw	r2, #16360	; 0x3fe8
   129d0:	movt	r2, #2
   129d4:	mov	r0, #2
   129d8:	mov	r1, #0
   129dc:	bl	115d8 <error@plt>
   129e0:	mov	r4, #75	; 0x4b
   129e4:	cmn	r5, #2
   129e8:	bne	129f4 <__assert_fail@plt+0x1248>
   129ec:	bl	1168c <__errno_location@plt>
   129f0:	ldr	r4, [r0]
   129f4:	movw	r1, #16246	; 0x3f76
   129f8:	movt	r1, #2
   129fc:	mov	r0, #0
   12a00:	mov	r2, #5
   12a04:	bl	11524 <dcgettext@plt>
   12a08:	mov	r2, r0
   12a0c:	mov	r0, #3
   12a10:	mov	r1, r4
   12a14:	bl	115d8 <error@plt>
   12a18:	push	{r4, sl, fp, lr}
   12a1c:	add	fp, sp, #8
   12a20:	bl	11e44 <__assert_fail@plt+0x698>
   12a24:	cmp	r0, #0
   12a28:	popeq	{r4, sl, fp, pc}
   12a2c:	movw	r1, #15968	; 0x3e60
   12a30:	movt	r1, #2
   12a34:	mov	r0, #0
   12a38:	mov	r2, #5
   12a3c:	bl	11524 <dcgettext@plt>
   12a40:	mov	r4, r0
   12a44:	movw	r0, #20920	; 0x51b8
   12a48:	movt	r0, #3
   12a4c:	ldr	r0, [r0]
   12a50:	ldr	r2, [r0, #-4]
   12a54:	mov	r0, #0
   12a58:	mov	r1, #8
   12a5c:	bl	14bc8 <__assert_fail@plt+0x341c>
   12a60:	mov	r3, r0
   12a64:	mov	r0, #2
   12a68:	mov	r1, #0
   12a6c:	mov	r2, r4
   12a70:	bl	115d8 <error@plt>
   12a74:	push	{r4, r5, fp, lr}
   12a78:	add	fp, sp, #8
   12a7c:	mov	r4, r0
   12a80:	mov	r0, #16
   12a84:	bl	22624 <__assert_fail@plt+0x10e78>
   12a88:	mov	r5, r0
   12a8c:	mov	r0, #1
   12a90:	str	r0, [r5]
   12a94:	mov	r0, r4
   12a98:	bl	229b4 <__assert_fail@plt+0x11208>
   12a9c:	str	r0, [r5, #4]
   12aa0:	mov	r0, r5
   12aa4:	pop	{r4, r5, fp, pc}
   12aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12aac:	add	fp, sp, #28
   12ab0:	sub	sp, sp, #116	; 0x74
   12ab4:	mov	r5, r0
   12ab8:	ldrb	r0, [r1]
   12abc:	cmp	r0, #0
   12ac0:	beq	12c48 <__assert_fail@plt+0x149c>
   12ac4:	mov	r4, r1
   12ac8:	bl	1159c <__ctype_get_mb_cur_max@plt>
   12acc:	cmp	r0, #2
   12ad0:	bcc	12c50 <__assert_fail@plt+0x14a4>
   12ad4:	mov	r7, #0
   12ad8:	str	r7, [sp, #68]	; 0x44
   12adc:	str	r7, [sp, #64]	; 0x40
   12ae0:	strb	r7, [sp, #60]	; 0x3c
   12ae4:	str	r5, [sp, #76]	; 0x4c
   12ae8:	strb	r7, [sp, #72]	; 0x48
   12aec:	add	r0, sp, #60	; 0x3c
   12af0:	bl	13454 <__assert_fail@plt+0x1ca8>
   12af4:	ldrb	r0, [sp, #84]	; 0x54
   12af8:	cmp	r0, #0
   12afc:	beq	12b0c <__assert_fail@plt+0x1360>
   12b00:	ldr	r0, [sp, #88]	; 0x58
   12b04:	cmp	r0, #0
   12b08:	beq	12c70 <__assert_fail@plt+0x14c4>
   12b0c:	add	r5, sp, #4
   12b10:	add	r9, r5, #4
   12b14:	mov	r6, #0
   12b18:	add	r8, sp, #60	; 0x3c
   12b1c:	mov	sl, #0
   12b20:	mov	r7, #0
   12b24:	add	sl, sl, #1
   12b28:	ldr	r0, [sp, #80]	; 0x50
   12b2c:	cmp	r0, #1
   12b30:	bne	12b50 <__assert_fail@plt+0x13a4>
   12b34:	ldr	r0, [sp, #76]	; 0x4c
   12b38:	ldrb	r1, [r0]
   12b3c:	mov	r0, r4
   12b40:	bl	132c8 <__assert_fail@plt+0x1b1c>
   12b44:	cmp	r0, #0
   12b48:	beq	12c10 <__assert_fail@plt+0x1464>
   12b4c:	b	12c6c <__assert_fail@plt+0x14c0>
   12b50:	strb	r6, [sp, #4]
   12b54:	str	r4, [sp, #20]
   12b58:	str	r6, [r9]
   12b5c:	str	r6, [r9, #4]
   12b60:	strb	r6, [sp, #16]
   12b64:	mov	r0, r5
   12b68:	bl	13454 <__assert_fail@plt+0x1ca8>
   12b6c:	ldrb	r1, [sp, #28]
   12b70:	ldr	r0, [sp, #32]
   12b74:	cmp	r0, #0
   12b78:	bne	12b84 <__assert_fail@plt+0x13d8>
   12b7c:	cmp	r1, #0
   12b80:	bne	12c10 <__assert_fail@plt+0x1464>
   12b84:	clz	r1, r1
   12b88:	lsr	r1, r1, #5
   12b8c:	tst	r1, #1
   12b90:	bne	12bb0 <__assert_fail@plt+0x1404>
   12b94:	ldrb	r1, [sp, #84]	; 0x54
   12b98:	cmp	r1, #0
   12b9c:	beq	12bb0 <__assert_fail@plt+0x1404>
   12ba0:	ldr	r1, [sp, #88]	; 0x58
   12ba4:	cmp	r0, r1
   12ba8:	bne	12bd4 <__assert_fail@plt+0x1428>
   12bac:	b	12c6c <__assert_fail@plt+0x14c0>
   12bb0:	ldr	r2, [sp, #24]
   12bb4:	ldr	r0, [sp, #80]	; 0x50
   12bb8:	cmp	r2, r0
   12bbc:	bne	12bd4 <__assert_fail@plt+0x1428>
   12bc0:	ldr	r1, [sp, #76]	; 0x4c
   12bc4:	ldr	r0, [sp, #20]
   12bc8:	bl	11518 <memcmp@plt>
   12bcc:	cmp	r0, #0
   12bd0:	beq	12c6c <__assert_fail@plt+0x14c0>
   12bd4:	strb	r6, [sp, #16]
   12bd8:	ldr	r0, [sp, #20]
   12bdc:	ldr	r1, [sp, #24]
   12be0:	add	r0, r0, r1
   12be4:	str	r0, [sp, #20]
   12be8:	mov	r0, r5
   12bec:	bl	13454 <__assert_fail@plt+0x1ca8>
   12bf0:	ldrb	r2, [sp, #28]
   12bf4:	clz	r0, r2
   12bf8:	lsr	r1, r0, #5
   12bfc:	ldr	r0, [sp, #32]
   12c00:	cmp	r0, #0
   12c04:	bne	12b8c <__assert_fail@plt+0x13e0>
   12c08:	cmp	r2, #0
   12c0c:	beq	12b8c <__assert_fail@plt+0x13e0>
   12c10:	strb	r7, [sp, #72]	; 0x48
   12c14:	ldr	r0, [sp, #76]	; 0x4c
   12c18:	ldr	r1, [sp, #80]	; 0x50
   12c1c:	add	r0, r0, r1
   12c20:	str	r0, [sp, #76]	; 0x4c
   12c24:	mov	r0, r8
   12c28:	bl	13454 <__assert_fail@plt+0x1ca8>
   12c2c:	ldrb	r0, [sp, #84]	; 0x54
   12c30:	cmp	r0, #0
   12c34:	beq	12b24 <__assert_fail@plt+0x1378>
   12c38:	ldr	r0, [sp, #88]	; 0x58
   12c3c:	cmp	r0, #0
   12c40:	bne	12b24 <__assert_fail@plt+0x1378>
   12c44:	b	12c70 <__assert_fail@plt+0x14c4>
   12c48:	mov	r7, #0
   12c4c:	b	12c70 <__assert_fail@plt+0x14c4>
   12c50:	mov	r0, r5
   12c54:	mov	r1, r4
   12c58:	bl	11470 <strcspn@plt>
   12c5c:	ldrb	r7, [r5, r0]
   12c60:	cmp	r7, #0
   12c64:	addne	r7, r0, #1
   12c68:	b	12c70 <__assert_fail@plt+0x14c4>
   12c6c:	mov	r7, sl
   12c70:	mov	r0, r7
   12c74:	sub	sp, fp, #28
   12c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c7c:	push	{r4, sl, fp, lr}
   12c80:	add	fp, sp, #8
   12c84:	mov	r4, r0
   12c88:	ldr	r0, [r0, #4]
   12c8c:	cmp	r0, #0
   12c90:	mvnlt	r0, #0
   12c94:	poplt	{r4, sl, fp, pc}
   12c98:	mov	r0, r4
   12c9c:	bl	115a8 <__gmpz_fits_ulong_p@plt>
   12ca0:	cmp	r0, #0
   12ca4:	beq	12cbc <__assert_fail@plt+0x1510>
   12ca8:	mov	r0, r4
   12cac:	bl	115e4 <__gmpz_get_ui@plt>
   12cb0:	cmn	r0, #1
   12cb4:	mvneq	r0, #1
   12cb8:	pop	{r4, sl, fp, pc}
   12cbc:	mvn	r0, #1
   12cc0:	pop	{r4, sl, fp, pc}
   12cc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cc8:	add	fp, sp, #28
   12ccc:	sub	sp, sp, #60	; 0x3c
   12cd0:	mov	r7, r2
   12cd4:	mov	r4, r1
   12cd8:	mov	r6, r0
   12cdc:	bl	1165c <strlen@plt>
   12ce0:	mov	r8, r0
   12ce4:	bl	1159c <__ctype_get_mb_cur_max@plt>
   12ce8:	cmp	r0, #2
   12cec:	mov	r0, r8
   12cf0:	bcc	12cfc <__assert_fail@plt+0x1550>
   12cf4:	mov	r0, r6
   12cf8:	bl	133a0 <__assert_fail@plt+0x1bf4>
   12cfc:	add	r1, r7, #1
   12d00:	cmp	r1, #2
   12d04:	bcc	12d58 <__assert_fail@plt+0x15ac>
   12d08:	sub	r1, r4, #1
   12d0c:	cmp	r1, r0
   12d10:	bcs	12d58 <__assert_fail@plt+0x15ac>
   12d14:	sub	r0, r0, r4
   12d18:	add	r5, r0, #1
   12d1c:	cmp	r5, r7
   12d20:	movhi	r5, r7
   12d24:	bl	1159c <__ctype_get_mb_cur_max@plt>
   12d28:	cmp	r0, #1
   12d2c:	bne	12d6c <__assert_fail@plt+0x15c0>
   12d30:	add	r4, r6, r4
   12d34:	add	r0, r5, #1
   12d38:	bl	22624 <__assert_fail@plt+0x10e78>
   12d3c:	mov	r8, r0
   12d40:	sub	r1, r4, #1
   12d44:	mov	r2, r5
   12d48:	mvn	r3, #0
   12d4c:	bl	117a0 <__mempcpy_chk@plt>
   12d50:	mov	r7, r0
   12d54:	b	12e44 <__assert_fail@plt+0x1698>
   12d58:	movw	r0, #15875	; 0x3e03
   12d5c:	movt	r0, #2
   12d60:	sub	sp, fp, #28
   12d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d68:	b	229b4 <__assert_fail@plt+0x11208>
   12d6c:	add	r0, r8, #1
   12d70:	bl	22624 <__assert_fail@plt+0x10e78>
   12d74:	mov	r8, r0
   12d78:	mov	r0, #0
   12d7c:	str	r0, [sp, #12]
   12d80:	str	r0, [sp, #8]
   12d84:	strb	r0, [sp, #4]
   12d88:	str	r6, [sp, #20]
   12d8c:	strb	r0, [sp, #16]
   12d90:	add	r0, sp, #4
   12d94:	bl	13454 <__assert_fail@plt+0x1ca8>
   12d98:	ldr	r0, [sp, #32]
   12d9c:	cmp	r0, #0
   12da0:	movwne	r0, #1
   12da4:	cmp	r5, #0
   12da8:	mov	r7, r8
   12dac:	beq	12e44 <__assert_fail@plt+0x1698>
   12db0:	ldrb	r1, [sp, #28]
   12db4:	clz	r1, r1
   12db8:	lsr	r1, r1, #5
   12dbc:	orrs	r0, r1, r0
   12dc0:	mov	r7, r8
   12dc4:	beq	12e44 <__assert_fail@plt+0x1698>
   12dc8:	mov	r6, #1
   12dcc:	mov	sl, #0
   12dd0:	add	r9, sp, #4
   12dd4:	mov	r7, r8
   12dd8:	cmp	r6, r4
   12ddc:	bcc	12dfc <__assert_fail@plt+0x1650>
   12de0:	ldr	r1, [sp, #20]
   12de4:	ldr	r2, [sp, #24]
   12de8:	mov	r0, r7
   12dec:	mvn	r3, #0
   12df0:	bl	117a0 <__mempcpy_chk@plt>
   12df4:	mov	r7, r0
   12df8:	sub	r5, r5, #1
   12dfc:	strb	sl, [sp, #16]
   12e00:	ldr	r0, [sp, #20]
   12e04:	ldr	r1, [sp, #24]
   12e08:	add	r0, r0, r1
   12e0c:	str	r0, [sp, #20]
   12e10:	mov	r0, r9
   12e14:	bl	13454 <__assert_fail@plt+0x1ca8>
   12e18:	ldr	r0, [sp, #32]
   12e1c:	cmp	r0, #0
   12e20:	movwne	r0, #1
   12e24:	cmp	r5, #0
   12e28:	beq	12e44 <__assert_fail@plt+0x1698>
   12e2c:	ldrb	r1, [sp, #28]
   12e30:	clz	r1, r1
   12e34:	lsr	r1, r1, #5
   12e38:	orrs	r0, r1, r0
   12e3c:	add	r6, r6, #1
   12e40:	bne	12dd8 <__assert_fail@plt+0x162c>
   12e44:	mov	r0, #0
   12e48:	strb	r0, [r7]
   12e4c:	mov	r0, r8
   12e50:	sub	sp, fp, #28
   12e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e58:	push	{r4, sl, fp, lr}
   12e5c:	add	fp, sp, #8
   12e60:	mov	r4, r0
   12e64:	bl	12a18 <__assert_fail@plt+0x126c>
   12e68:	movw	r0, #16136	; 0x3f08
   12e6c:	movt	r0, #2
   12e70:	bl	11fd0 <__assert_fail@plt+0x824>
   12e74:	cmp	r0, #0
   12e78:	beq	12ef4 <__assert_fail@plt+0x1748>
   12e7c:	mov	r0, r4
   12e80:	bl	11d94 <__assert_fail@plt+0x5e8>
   12e84:	mov	r4, r0
   12e88:	bl	11e44 <__assert_fail@plt+0x698>
   12e8c:	cmp	r0, #0
   12e90:	bne	12f28 <__assert_fail@plt+0x177c>
   12e94:	movw	r0, #16093	; 0x3edd
   12e98:	movt	r0, #2
   12e9c:	bl	11fd0 <__assert_fail@plt+0x824>
   12ea0:	cmp	r0, #0
   12ea4:	movne	r0, r4
   12ea8:	popne	{r4, sl, fp, pc}
   12eac:	movw	r1, #16175	; 0x3f2f
   12eb0:	movt	r1, #2
   12eb4:	mov	r0, #0
   12eb8:	mov	r2, #5
   12ebc:	bl	11524 <dcgettext@plt>
   12ec0:	mov	r4, r0
   12ec4:	movw	r0, #20920	; 0x51b8
   12ec8:	movt	r0, #3
   12ecc:	ldr	r0, [r0]
   12ed0:	ldr	r2, [r0]
   12ed4:	mov	r0, #0
   12ed8:	mov	r1, #8
   12edc:	bl	14bc8 <__assert_fail@plt+0x341c>
   12ee0:	mov	r3, r0
   12ee4:	mov	r0, #2
   12ee8:	mov	r1, #0
   12eec:	mov	r2, r4
   12ef0:	bl	115d8 <error@plt>
   12ef4:	movw	r0, #16093	; 0x3edd
   12ef8:	movt	r0, #2
   12efc:	bl	11fd0 <__assert_fail@plt+0x824>
   12f00:	cmp	r0, #0
   12f04:	bne	12f54 <__assert_fail@plt+0x17a8>
   12f08:	movw	r0, #20920	; 0x51b8
   12f0c:	movt	r0, #3
   12f10:	ldr	r1, [r0]
   12f14:	add	r2, r1, #4
   12f18:	str	r2, [r0]
   12f1c:	ldr	r0, [r1]
   12f20:	pop	{r4, sl, fp, lr}
   12f24:	b	12a74 <__assert_fail@plt+0x12c8>
   12f28:	movw	r1, #16138	; 0x3f0a
   12f2c:	movt	r1, #2
   12f30:	mov	r0, #0
   12f34:	mov	r2, #5
   12f38:	bl	11524 <dcgettext@plt>
   12f3c:	mov	r4, r0
   12f40:	movw	r0, #20920	; 0x51b8
   12f44:	movt	r0, #3
   12f48:	ldr	r0, [r0]
   12f4c:	ldr	r2, [r0, #-4]
   12f50:	b	12ed4 <__assert_fail@plt+0x1728>
   12f54:	movw	r1, #16217	; 0x3f59
   12f58:	movt	r1, #2
   12f5c:	mov	r0, #0
   12f60:	mov	r2, #5
   12f64:	bl	11524 <dcgettext@plt>
   12f68:	mov	r2, r0
   12f6c:	mov	r0, #2
   12f70:	mov	r1, #0
   12f74:	bl	115d8 <error@plt>
   12f78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f7c:	add	fp, sp, #24
   12f80:	sub	sp, sp, #56	; 0x38
   12f84:	mov	r4, r1
   12f88:	mov	r6, r0
   12f8c:	mov	r5, #0
   12f90:	str	r5, [sp, #8]
   12f94:	str	r5, [sp, #4]
   12f98:	strb	r5, [sp]
   12f9c:	str	r0, [sp, #16]
   12fa0:	strb	r5, [sp, #12]
   12fa4:	mov	r0, sp
   12fa8:	bl	13454 <__assert_fail@plt+0x1ca8>
   12fac:	ldrb	r0, [sp, #24]
   12fb0:	cmp	r0, #0
   12fb4:	beq	12fc4 <__assert_fail@plt+0x1818>
   12fb8:	ldr	r0, [sp, #28]
   12fbc:	cmp	r0, #0
   12fc0:	beq	13018 <__assert_fail@plt+0x186c>
   12fc4:	mov	r8, #0
   12fc8:	mov	r7, sp
   12fcc:	mov	r5, #0
   12fd0:	ldr	r0, [sp, #16]
   12fd4:	sub	r0, r0, r6
   12fd8:	cmp	r0, r4
   12fdc:	addcc	r5, r5, #1
   12fe0:	bcs	13018 <__assert_fail@plt+0x186c>
   12fe4:	strb	r8, [sp, #12]
   12fe8:	ldr	r0, [sp, #16]
   12fec:	ldr	r1, [sp, #20]
   12ff0:	add	r0, r0, r1
   12ff4:	str	r0, [sp, #16]
   12ff8:	mov	r0, r7
   12ffc:	bl	13454 <__assert_fail@plt+0x1ca8>
   13000:	ldrb	r0, [sp, #24]
   13004:	cmp	r0, #0
   13008:	beq	12fd0 <__assert_fail@plt+0x1824>
   1300c:	ldr	r0, [sp, #28]
   13010:	cmp	r0, #0
   13014:	bne	12fd0 <__assert_fail@plt+0x1824>
   13018:	mov	r0, r5
   1301c:	sub	sp, fp, #24
   13020:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13024:	movw	r1, #20924	; 0x51bc
   13028:	movt	r1, #3
   1302c:	str	r0, [r1]
   13030:	bx	lr
   13034:	movw	r1, #20928	; 0x51c0
   13038:	movt	r1, #3
   1303c:	strb	r0, [r1]
   13040:	bx	lr
   13044:	push	{r4, r5, r6, sl, fp, lr}
   13048:	add	fp, sp, #16
   1304c:	sub	sp, sp, #8
   13050:	movw	r0, #20908	; 0x51ac
   13054:	movt	r0, #3
   13058:	ldr	r0, [r0]
   1305c:	bl	22e14 <__assert_fail@plt+0x11668>
   13060:	cmp	r0, #0
   13064:	beq	1308c <__assert_fail@plt+0x18e0>
   13068:	movw	r0, #20928	; 0x51c0
   1306c:	movt	r0, #3
   13070:	ldrb	r0, [r0]
   13074:	cmp	r0, #0
   13078:	beq	130ac <__assert_fail@plt+0x1900>
   1307c:	bl	1168c <__errno_location@plt>
   13080:	ldr	r0, [r0]
   13084:	cmp	r0, #32
   13088:	bne	130ac <__assert_fail@plt+0x1900>
   1308c:	movw	r0, #20904	; 0x51a8
   13090:	movt	r0, #3
   13094:	ldr	r0, [r0]
   13098:	bl	22e14 <__assert_fail@plt+0x11668>
   1309c:	cmp	r0, #0
   130a0:	subeq	sp, fp, #16
   130a4:	popeq	{r4, r5, r6, sl, fp, pc}
   130a8:	b	1311c <__assert_fail@plt+0x1970>
   130ac:	movw	r1, #16344	; 0x3fd8
   130b0:	movt	r1, #2
   130b4:	mov	r0, #0
   130b8:	mov	r2, #5
   130bc:	bl	11524 <dcgettext@plt>
   130c0:	mov	r4, r0
   130c4:	movw	r0, #20924	; 0x51bc
   130c8:	movt	r0, #3
   130cc:	ldr	r6, [r0]
   130d0:	bl	1168c <__errno_location@plt>
   130d4:	ldr	r5, [r0]
   130d8:	cmp	r6, #0
   130dc:	bne	130f8 <__assert_fail@plt+0x194c>
   130e0:	movw	r2, #16360	; 0x3fe8
   130e4:	movt	r2, #2
   130e8:	mov	r0, #0
   130ec:	mov	r1, r5
   130f0:	mov	r3, r4
   130f4:	b	13118 <__assert_fail@plt+0x196c>
   130f8:	mov	r0, r6
   130fc:	bl	14d1c <__assert_fail@plt+0x3570>
   13100:	mov	r3, r0
   13104:	str	r4, [sp]
   13108:	movw	r2, #16356	; 0x3fe4
   1310c:	movt	r2, #2
   13110:	mov	r0, #0
   13114:	mov	r1, r5
   13118:	bl	115d8 <error@plt>
   1311c:	movw	r0, #20816	; 0x5150
   13120:	movt	r0, #3
   13124:	ldr	r0, [r0]
   13128:	bl	114c4 <_exit@plt>
   1312c:	push	{r4, r5, r6, sl, fp, lr}
   13130:	add	fp, sp, #16
   13134:	mov	r4, r0
   13138:	bl	1168c <__errno_location@plt>
   1313c:	mov	r5, r0
   13140:	ldr	r6, [r0]
   13144:	mov	r0, r4
   13148:	bl	114ac <free@plt>
   1314c:	str	r6, [r5]
   13150:	pop	{r4, r5, r6, sl, fp, pc}
   13154:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13158:	add	fp, sp, #24
   1315c:	sub	sp, sp, #8
   13160:	movw	r6, #20912	; 0x51b0
   13164:	movt	r6, #3
   13168:	ldr	r7, [r6]
   1316c:	mov	r4, #0
   13170:	str	r4, [r6]
   13174:	cmp	r0, #2
   13178:	bne	131e8 <__assert_fail@plt+0x1a3c>
   1317c:	mov	r8, r3
   13180:	mov	r5, r2
   13184:	str	r4, [sp]
   13188:	movw	r2, #15896	; 0x3e18
   1318c:	movt	r2, #2
   13190:	movw	r3, #16376	; 0x3ff8
   13194:	movt	r3, #2
   13198:	bl	11638 <getopt_long@plt>
   1319c:	cmp	r0, #104	; 0x68
   131a0:	beq	131dc <__assert_fail@plt+0x1a30>
   131a4:	cmp	r0, #118	; 0x76
   131a8:	bne	131e8 <__assert_fail@plt+0x1a3c>
   131ac:	ldr	r3, [fp, #8]
   131b0:	add	r1, fp, #16
   131b4:	str	r1, [sp, #4]
   131b8:	movw	r0, #20908	; 0x51ac
   131bc:	movt	r0, #3
   131c0:	ldr	r0, [r0]
   131c4:	str	r1, [sp]
   131c8:	mov	r1, r5
   131cc:	mov	r2, r8
   131d0:	bl	224d0 <__assert_fail@plt+0x10d24>
   131d4:	mov	r0, #0
   131d8:	bl	11650 <exit@plt>
   131dc:	ldr	r1, [fp, #12]
   131e0:	mov	r0, #0
   131e4:	blx	r1
   131e8:	movw	r0, #20896	; 0x51a0
   131ec:	movt	r0, #3
   131f0:	str	r4, [r0]
   131f4:	str	r7, [r6]
   131f8:	sub	sp, fp, #24
   131fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13200:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13204:	add	fp, sp, #24
   13208:	sub	sp, sp, #8
   1320c:	mov	r8, r3
   13210:	mov	r5, r2
   13214:	movw	r6, #20912	; 0x51b0
   13218:	movt	r6, #3
   1321c:	ldr	r7, [r6]
   13220:	mov	r2, #1
   13224:	str	r2, [r6]
   13228:	mov	r2, #0
   1322c:	str	r2, [sp]
   13230:	ldr	r3, [fp, #12]
   13234:	movw	r4, #15875	; 0x3e03
   13238:	movt	r4, #2
   1323c:	movw	r2, #15896	; 0x3e18
   13240:	movt	r2, #2
   13244:	cmp	r3, #0
   13248:	movne	r2, r4
   1324c:	movw	r3, #16376	; 0x3ff8
   13250:	movt	r3, #2
   13254:	bl	11638 <getopt_long@plt>
   13258:	cmn	r0, #1
   1325c:	beq	1328c <__assert_fail@plt+0x1ae0>
   13260:	ldr	r1, [fp, #16]
   13264:	cmp	r0, #104	; 0x68
   13268:	beq	13284 <__assert_fail@plt+0x1ad8>
   1326c:	cmp	r0, #118	; 0x76
   13270:	beq	13298 <__assert_fail@plt+0x1aec>
   13274:	movw	r0, #20816	; 0x5150
   13278:	movt	r0, #3
   1327c:	ldr	r0, [r0]
   13280:	b	13288 <__assert_fail@plt+0x1adc>
   13284:	mov	r0, #0
   13288:	blx	r1
   1328c:	str	r7, [r6]
   13290:	sub	sp, fp, #24
   13294:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13298:	ldr	r3, [fp, #8]
   1329c:	add	r1, fp, #20
   132a0:	str	r1, [sp, #4]
   132a4:	movw	r0, #20908	; 0x51ac
   132a8:	movt	r0, #3
   132ac:	ldr	r0, [r0]
   132b0:	str	r1, [sp]
   132b4:	mov	r1, r5
   132b8:	mov	r2, r8
   132bc:	bl	224d0 <__assert_fail@plt+0x10d24>
   132c0:	mov	r0, #0
   132c4:	bl	11650 <exit@plt>
   132c8:	push	{r4, r5, r6, sl, fp, lr}
   132cc:	add	fp, sp, #16
   132d0:	sub	sp, sp, #56	; 0x38
   132d4:	mov	r5, r1
   132d8:	mov	r6, r0
   132dc:	and	r4, r1, #240	; 0xf0
   132e0:	bl	1159c <__ctype_get_mb_cur_max@plt>
   132e4:	cmp	r4, #48	; 0x30
   132e8:	cmpcs	r0, #2
   132ec:	bcs	13304 <__assert_fail@plt+0x1b58>
   132f0:	mov	r0, r6
   132f4:	mov	r1, r5
   132f8:	sub	sp, fp, #16
   132fc:	pop	{r4, r5, r6, sl, fp, lr}
   13300:	b	11668 <strchr@plt>
   13304:	mov	r4, #0
   13308:	str	r4, [sp, #8]
   1330c:	str	r4, [sp, #4]
   13310:	strb	r4, [sp]
   13314:	str	r6, [sp, #16]
   13318:	strb	r4, [sp, #12]
   1331c:	mov	r0, sp
   13320:	bl	13454 <__assert_fail@plt+0x1ca8>
   13324:	ldrb	r0, [sp, #24]
   13328:	cmp	r0, #0
   1332c:	beq	1333c <__assert_fail@plt+0x1b90>
   13330:	ldr	r0, [sp, #28]
   13334:	cmp	r0, #0
   13338:	beq	13394 <__assert_fail@plt+0x1be8>
   1333c:	uxtb	r6, r5
   13340:	mov	r5, sp
   13344:	ldr	r0, [sp, #20]
   13348:	cmp	r0, #1
   1334c:	bne	13360 <__assert_fail@plt+0x1bb4>
   13350:	ldr	r4, [sp, #16]
   13354:	ldrb	r1, [r4]
   13358:	cmp	r1, r6
   1335c:	beq	13394 <__assert_fail@plt+0x1be8>
   13360:	mov	r4, #0
   13364:	strb	r4, [sp, #12]
   13368:	ldr	r1, [sp, #16]
   1336c:	add	r0, r1, r0
   13370:	str	r0, [sp, #16]
   13374:	mov	r0, r5
   13378:	bl	13454 <__assert_fail@plt+0x1ca8>
   1337c:	ldrb	r0, [sp, #24]
   13380:	cmp	r0, #0
   13384:	beq	13344 <__assert_fail@plt+0x1b98>
   13388:	ldr	r0, [sp, #28]
   1338c:	cmp	r0, #0
   13390:	bne	13344 <__assert_fail@plt+0x1b98>
   13394:	mov	r0, r4
   13398:	sub	sp, fp, #16
   1339c:	pop	{r4, r5, r6, sl, fp, pc}
   133a0:	push	{r4, r5, r6, sl, fp, lr}
   133a4:	add	fp, sp, #16
   133a8:	sub	sp, sp, #56	; 0x38
   133ac:	mov	r5, r0
   133b0:	bl	1159c <__ctype_get_mb_cur_max@plt>
   133b4:	cmp	r0, #2
   133b8:	bcc	13444 <__assert_fail@plt+0x1c98>
   133bc:	mov	r4, #0
   133c0:	str	r4, [sp, #8]
   133c4:	str	r4, [sp, #4]
   133c8:	strb	r4, [sp]
   133cc:	str	r5, [sp, #16]
   133d0:	strb	r4, [sp, #12]
   133d4:	mov	r0, sp
   133d8:	bl	13454 <__assert_fail@plt+0x1ca8>
   133dc:	ldrb	r0, [sp, #24]
   133e0:	cmp	r0, #0
   133e4:	beq	133f4 <__assert_fail@plt+0x1c48>
   133e8:	ldr	r0, [sp, #28]
   133ec:	cmp	r0, #0
   133f0:	beq	13438 <__assert_fail@plt+0x1c8c>
   133f4:	mov	r6, #0
   133f8:	mov	r5, sp
   133fc:	mov	r4, #0
   13400:	strb	r6, [sp, #12]
   13404:	ldr	r0, [sp, #16]
   13408:	ldr	r1, [sp, #20]
   1340c:	add	r0, r0, r1
   13410:	str	r0, [sp, #16]
   13414:	mov	r0, r5
   13418:	bl	13454 <__assert_fail@plt+0x1ca8>
   1341c:	add	r4, r4, #1
   13420:	ldr	r0, [sp, #28]
   13424:	ldrb	r1, [sp, #24]
   13428:	cmp	r1, #0
   1342c:	beq	13400 <__assert_fail@plt+0x1c54>
   13430:	cmp	r0, #0
   13434:	bne	13400 <__assert_fail@plt+0x1c54>
   13438:	mov	r0, r4
   1343c:	sub	sp, fp, #16
   13440:	pop	{r4, r5, r6, sl, fp, pc}
   13444:	mov	r0, r5
   13448:	sub	sp, fp, #16
   1344c:	pop	{r4, r5, r6, sl, fp, lr}
   13450:	b	1165c <strlen@plt>
   13454:	push	{r4, r5, r6, r7, fp, lr}
   13458:	add	fp, sp, #16
   1345c:	mov	r4, r0
   13460:	ldrb	r0, [r0, #12]
   13464:	cmp	r0, #0
   13468:	popne	{r4, r5, r6, r7, fp, pc}
   1346c:	ldrb	r0, [r4]
   13470:	cmp	r0, #0
   13474:	bne	134c0 <__assert_fail@plt+0x1d14>
   13478:	ldr	r0, [r4, #16]
   1347c:	ldrb	r0, [r0]
   13480:	bl	2320c <__assert_fail@plt+0x11a60>
   13484:	cmp	r0, #0
   13488:	beq	134a8 <__assert_fail@plt+0x1cfc>
   1348c:	mov	r0, #1
   13490:	str	r0, [r4, #20]
   13494:	ldr	r1, [r4, #16]
   13498:	ldrb	r1, [r1]
   1349c:	strb	r0, [r4, #24]
   134a0:	str	r1, [r4, #28]
   134a4:	b	13578 <__assert_fail@plt+0x1dcc>
   134a8:	add	r0, r4, #4
   134ac:	bl	1150c <mbsinit@plt>
   134b0:	cmp	r0, #0
   134b4:	beq	13584 <__assert_fail@plt+0x1dd8>
   134b8:	mov	r0, #1
   134bc:	strb	r0, [r4]
   134c0:	ldr	r7, [r4, #16]
   134c4:	bl	1159c <__ctype_get_mb_cur_max@plt>
   134c8:	mov	r1, r0
   134cc:	mov	r0, r7
   134d0:	bl	21ed0 <__assert_fail@plt+0x10724>
   134d4:	mov	r2, r0
   134d8:	add	r6, r4, #28
   134dc:	add	r5, r4, #4
   134e0:	mov	r0, r6
   134e4:	mov	r1, r7
   134e8:	mov	r3, r5
   134ec:	bl	23234 <__assert_fail@plt+0x11a88>
   134f0:	str	r0, [r4, #20]
   134f4:	cmn	r0, #2
   134f8:	beq	13564 <__assert_fail@plt+0x1db8>
   134fc:	cmp	r0, #0
   13500:	beq	13520 <__assert_fail@plt+0x1d74>
   13504:	cmn	r0, #1
   13508:	bne	13544 <__assert_fail@plt+0x1d98>
   1350c:	mov	r0, #0
   13510:	strb	r0, [r4, #24]
   13514:	mov	r0, #1
   13518:	str	r0, [r4, #20]
   1351c:	b	13578 <__assert_fail@plt+0x1dcc>
   13520:	mov	r0, #1
   13524:	str	r0, [r4, #20]
   13528:	ldr	r0, [r4, #16]
   1352c:	ldrb	r0, [r0]
   13530:	cmp	r0, #0
   13534:	bne	135a4 <__assert_fail@plt+0x1df8>
   13538:	ldr	r0, [r6]
   1353c:	cmp	r0, #0
   13540:	bne	135c4 <__assert_fail@plt+0x1e18>
   13544:	mov	r0, #1
   13548:	strb	r0, [r4, #24]
   1354c:	mov	r0, r5
   13550:	bl	1150c <mbsinit@plt>
   13554:	cmp	r0, #0
   13558:	movne	r0, #0
   1355c:	strbne	r0, [r4]
   13560:	b	13578 <__assert_fail@plt+0x1dcc>
   13564:	ldr	r0, [r4, #16]
   13568:	bl	1165c <strlen@plt>
   1356c:	str	r0, [r4, #20]
   13570:	mov	r0, #0
   13574:	strb	r0, [r4, #24]
   13578:	mov	r0, #1
   1357c:	strb	r0, [r4, #12]
   13580:	pop	{r4, r5, r6, r7, fp, pc}
   13584:	movw	r0, #16008	; 0x3e88
   13588:	movt	r0, #2
   1358c:	movw	r1, #16031	; 0x3e9f
   13590:	movt	r1, #2
   13594:	movw	r3, #16047	; 0x3eaf
   13598:	movt	r3, #2
   1359c:	mov	r2, #143	; 0x8f
   135a0:	bl	117ac <__assert_fail@plt>
   135a4:	movw	r0, #16095	; 0x3edf
   135a8:	movt	r0, #2
   135ac:	movw	r1, #16031	; 0x3e9f
   135b0:	movt	r1, #2
   135b4:	movw	r3, #16047	; 0x3eaf
   135b8:	movt	r3, #2
   135bc:	mov	r2, #171	; 0xab
   135c0:	bl	117ac <__assert_fail@plt>
   135c4:	movw	r0, #16118	; 0x3ef6
   135c8:	movt	r0, #2
   135cc:	movw	r1, #16031	; 0x3e9f
   135d0:	movt	r1, #2
   135d4:	movw	r3, #16047	; 0x3eaf
   135d8:	movt	r3, #2
   135dc:	mov	r2, #172	; 0xac
   135e0:	bl	117ac <__assert_fail@plt>
   135e4:	ldr	r2, [r0, #16]
   135e8:	add	r1, r2, r1
   135ec:	str	r1, [r0, #16]
   135f0:	bx	lr
   135f4:	ldrb	r3, [r1]
   135f8:	mov	r2, r0
   135fc:	strb	r3, [r2], #4
   13600:	cmp	r3, #0
   13604:	beq	13614 <__assert_fail@plt+0x1e68>
   13608:	ldmib	r1, {r3, ip}
   1360c:	stm	r2, {r3, ip}
   13610:	b	13620 <__assert_fail@plt+0x1e74>
   13614:	mov	r3, #0
   13618:	str	r3, [r2]
   1361c:	str	r3, [r2, #4]
   13620:	ldrb	r2, [r1, #12]
   13624:	strb	r2, [r0, #12]
   13628:	add	r0, r0, #16
   1362c:	add	r1, r1, #16
   13630:	b	231bc <__assert_fail@plt+0x11a10>
   13634:	push	{r4, r5, fp, lr}
   13638:	add	fp, sp, #8
   1363c:	cmp	r0, #0
   13640:	beq	136d4 <__assert_fail@plt+0x1f28>
   13644:	mov	r4, r0
   13648:	mov	r1, #47	; 0x2f
   1364c:	bl	11734 <strrchr@plt>
   13650:	cmp	r0, #0
   13654:	mov	r5, r4
   13658:	addne	r5, r0, #1
   1365c:	sub	r0, r5, r4
   13660:	cmp	r0, #7
   13664:	blt	136b8 <__assert_fail@plt+0x1f0c>
   13668:	sub	r0, r5, #7
   1366c:	movw	r1, #16480	; 0x4060
   13670:	movt	r1, #2
   13674:	mov	r2, #7
   13678:	bl	1177c <strncmp@plt>
   1367c:	cmp	r0, #0
   13680:	bne	136b8 <__assert_fail@plt+0x1f0c>
   13684:	movw	r1, #16488	; 0x4068
   13688:	movt	r1, #2
   1368c:	mov	r0, r5
   13690:	mov	r2, #3
   13694:	bl	1177c <strncmp@plt>
   13698:	cmp	r0, #0
   1369c:	beq	136a8 <__assert_fail@plt+0x1efc>
   136a0:	mov	r4, r5
   136a4:	b	136b8 <__assert_fail@plt+0x1f0c>
   136a8:	add	r4, r5, #3
   136ac:	movw	r0, #20888	; 0x5198
   136b0:	movt	r0, #3
   136b4:	str	r4, [r0]
   136b8:	movw	r0, #20892	; 0x519c
   136bc:	movt	r0, #3
   136c0:	str	r4, [r0]
   136c4:	movw	r0, #20932	; 0x51c4
   136c8:	movt	r0, #3
   136cc:	str	r4, [r0]
   136d0:	pop	{r4, r5, fp, pc}
   136d4:	movw	r0, #20904	; 0x51a8
   136d8:	movt	r0, #3
   136dc:	ldr	r3, [r0]
   136e0:	movw	r0, #16424	; 0x4028
   136e4:	movt	r0, #2
   136e8:	mov	r1, #55	; 0x37
   136ec:	mov	r2, #1
   136f0:	bl	11584 <fwrite@plt>
   136f4:	bl	11788 <abort@plt>
   136f8:	push	{r4, r5, r6, sl, fp, lr}
   136fc:	add	fp, sp, #16
   13700:	mov	r4, r0
   13704:	movw	r0, #20936	; 0x51c8
   13708:	movt	r0, #3
   1370c:	cmp	r4, #0
   13710:	moveq	r4, r0
   13714:	bl	1168c <__errno_location@plt>
   13718:	mov	r5, r0
   1371c:	ldr	r6, [r0]
   13720:	mov	r0, r4
   13724:	mov	r1, #48	; 0x30
   13728:	bl	22918 <__assert_fail@plt+0x1116c>
   1372c:	str	r6, [r5]
   13730:	pop	{r4, r5, r6, sl, fp, pc}
   13734:	movw	r1, #20936	; 0x51c8
   13738:	movt	r1, #3
   1373c:	cmp	r0, #0
   13740:	movne	r1, r0
   13744:	ldr	r0, [r1]
   13748:	bx	lr
   1374c:	movw	r2, #20936	; 0x51c8
   13750:	movt	r2, #3
   13754:	cmp	r0, #0
   13758:	movne	r2, r0
   1375c:	str	r1, [r2]
   13760:	bx	lr
   13764:	movw	r3, #20936	; 0x51c8
   13768:	movt	r3, #3
   1376c:	cmp	r0, #0
   13770:	movne	r3, r0
   13774:	ubfx	r0, r1, #5, #3
   13778:	add	r0, r3, r0, lsl #2
   1377c:	ldr	r3, [r0, #8]
   13780:	and	r1, r1, #31
   13784:	eor	r2, r2, r3, lsr r1
   13788:	and	r2, r2, #1
   1378c:	eor	r2, r3, r2, lsl r1
   13790:	str	r2, [r0, #8]
   13794:	mov	r0, #1
   13798:	and	r0, r0, r3, lsr r1
   1379c:	bx	lr
   137a0:	movw	r2, #20936	; 0x51c8
   137a4:	movt	r2, #3
   137a8:	cmp	r0, #0
   137ac:	movne	r2, r0
   137b0:	ldr	r0, [r2, #4]
   137b4:	str	r1, [r2, #4]
   137b8:	bx	lr
   137bc:	movw	r3, #20936	; 0x51c8
   137c0:	movt	r3, #3
   137c4:	cmp	r0, #0
   137c8:	movne	r3, r0
   137cc:	mov	r0, #10
   137d0:	str	r0, [r3]
   137d4:	cmp	r1, #0
   137d8:	cmpne	r2, #0
   137dc:	bne	137ec <__assert_fail@plt+0x2040>
   137e0:	push	{fp, lr}
   137e4:	mov	fp, sp
   137e8:	bl	11788 <abort@plt>
   137ec:	str	r1, [r3, #40]	; 0x28
   137f0:	str	r2, [r3, #44]	; 0x2c
   137f4:	bx	lr
   137f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137fc:	add	fp, sp, #28
   13800:	sub	sp, sp, #20
   13804:	mov	r8, r3
   13808:	mov	r9, r2
   1380c:	mov	sl, r1
   13810:	mov	r7, r0
   13814:	ldr	r0, [fp, #8]
   13818:	movw	r5, #20936	; 0x51c8
   1381c:	movt	r5, #3
   13820:	cmp	r0, #0
   13824:	movne	r5, r0
   13828:	bl	1168c <__errno_location@plt>
   1382c:	mov	r4, r0
   13830:	ldm	r5, {r0, r1}
   13834:	ldr	r2, [r5, #40]	; 0x28
   13838:	ldr	r3, [r5, #44]	; 0x2c
   1383c:	ldr	r6, [r4]
   13840:	add	r5, r5, #8
   13844:	stm	sp, {r0, r1, r5}
   13848:	str	r2, [sp, #12]
   1384c:	str	r3, [sp, #16]
   13850:	mov	r0, r7
   13854:	mov	r1, sl
   13858:	mov	r2, r9
   1385c:	mov	r3, r8
   13860:	bl	13870 <__assert_fail@plt+0x20c4>
   13864:	str	r6, [r4]
   13868:	sub	sp, fp, #28
   1386c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13874:	add	fp, sp, #28
   13878:	sub	sp, sp, #156	; 0x9c
   1387c:	mov	r9, r3
   13880:	str	r2, [fp, #-84]	; 0xffffffac
   13884:	mov	r6, r1
   13888:	mov	r7, r0
   1388c:	ldr	r0, [fp, #12]
   13890:	and	r1, r0, #4
   13894:	str	r1, [sp, #32]
   13898:	and	r1, r0, #1
   1389c:	str	r1, [sp, #36]	; 0x24
   138a0:	ubfx	sl, r0, #1, #1
   138a4:	bl	1159c <__ctype_get_mb_cur_max@plt>
   138a8:	str	r0, [sp, #40]	; 0x28
   138ac:	ldr	r0, [fp, #24]
   138b0:	str	r0, [sp, #76]	; 0x4c
   138b4:	ldr	r0, [fp, #20]
   138b8:	str	r0, [sp, #68]	; 0x44
   138bc:	ldr	r0, [fp, #8]
   138c0:	str	r0, [fp, #-60]	; 0xffffffc4
   138c4:	mov	r0, #0
   138c8:	str	r0, [sp, #72]	; 0x48
   138cc:	mov	r0, #0
   138d0:	str	r0, [sp, #92]	; 0x5c
   138d4:	mov	r0, #0
   138d8:	str	r0, [fp, #-72]	; 0xffffffb8
   138dc:	mov	r0, #0
   138e0:	mov	r1, #0
   138e4:	str	r1, [fp, #-56]	; 0xffffffc8
   138e8:	mov	r1, #0
   138ec:	str	r1, [sp, #56]	; 0x38
   138f0:	mov	r5, #1
   138f4:	str	r7, [sp, #80]	; 0x50
   138f8:	mov	r4, r6
   138fc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13900:	cmp	r6, #10
   13904:	bhi	1486c <__assert_fail@plt+0x30c0>
   13908:	add	r1, pc, #20
   1390c:	mov	r8, #0
   13910:	mov	r2, #1
   13914:	mov	r3, #0
   13918:	ldr	ip, [fp, #-84]	; 0xffffffac
   1391c:	mov	lr, r9
   13920:	ldr	pc, [r1, r6, lsl #2]
   13924:	strdeq	r3, [r1], -ip
   13928:	andeq	r3, r1, ip, lsr #20
   1392c:	andeq	r3, r1, ip, ror #19
   13930:	andeq	r3, r1, r4, ror #19
   13934:	andeq	r3, r1, r0, lsr #20
   13938:	andeq	r3, r1, r0, lsl #21
   1393c:	andeq	r3, r1, ip, lsl #20
   13940:	ldrdeq	r3, [r1], -ip
   13944:	andeq	r3, r1, r0, asr r9
   13948:	andeq	r3, r1, r0, asr r9
   1394c:	andeq	r3, r1, r8, ror r9
   13950:	movw	r0, #16572	; 0x40bc
   13954:	movt	r0, #2
   13958:	mov	r1, r6
   1395c:	bl	14e78 <__assert_fail@plt+0x36cc>
   13960:	str	r0, [sp, #68]	; 0x44
   13964:	movw	r0, #16244	; 0x3f74
   13968:	movt	r0, #2
   1396c:	mov	r1, r6
   13970:	bl	14e78 <__assert_fail@plt+0x36cc>
   13974:	str	r0, [sp, #76]	; 0x4c
   13978:	mov	r8, #0
   1397c:	tst	sl, #1
   13980:	bne	139b8 <__assert_fail@plt+0x220c>
   13984:	ldr	r0, [sp, #68]	; 0x44
   13988:	ldrb	r0, [r0]
   1398c:	cmp	r0, #0
   13990:	beq	139b8 <__assert_fail@plt+0x220c>
   13994:	ldr	r1, [sp, #68]	; 0x44
   13998:	add	r1, r1, #1
   1399c:	mov	r8, #0
   139a0:	cmp	r8, r4
   139a4:	strbcc	r0, [r7, r8]
   139a8:	ldrb	r0, [r1, r8]
   139ac:	add	r8, r8, #1
   139b0:	cmp	r0, #0
   139b4:	bne	139a0 <__assert_fail@plt+0x21f4>
   139b8:	ldr	r6, [sp, #76]	; 0x4c
   139bc:	mov	r0, r6
   139c0:	bl	1165c <strlen@plt>
   139c4:	str	r0, [fp, #-72]	; 0xffffffb8
   139c8:	str	r6, [sp, #92]	; 0x5c
   139cc:	mov	r2, #1
   139d0:	mov	r3, sl
   139d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   139d8:	mov	lr, r9
   139dc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   139e0:	b	13adc <__assert_fail@plt+0x2330>
   139e4:	mov	r0, #1
   139e8:	b	13a2c <__assert_fail@plt+0x2280>
   139ec:	tst	sl, #1
   139f0:	bne	13a2c <__assert_fail@plt+0x2280>
   139f4:	mov	r2, r0
   139f8:	b	13a54 <__assert_fail@plt+0x22a8>
   139fc:	mov	r6, #0
   13a00:	mov	r8, #0
   13a04:	mov	r2, r0
   13a08:	b	13ad8 <__assert_fail@plt+0x232c>
   13a0c:	mov	r0, #1
   13a10:	str	r0, [fp, #-72]	; 0xffffffb8
   13a14:	mov	r8, #0
   13a18:	mov	r6, #5
   13a1c:	b	13a98 <__assert_fail@plt+0x22ec>
   13a20:	mov	r2, #1
   13a24:	tst	sl, #1
   13a28:	beq	13a54 <__assert_fail@plt+0x22a8>
   13a2c:	mov	r1, #1
   13a30:	str	r1, [fp, #-72]	; 0xffffffb8
   13a34:	mov	r8, #0
   13a38:	mov	r6, #2
   13a3c:	movw	r1, #16244	; 0x3f74
   13a40:	movt	r1, #2
   13a44:	str	r1, [sp, #92]	; 0x5c
   13a48:	mov	r2, r0
   13a4c:	mov	r3, #1
   13a50:	b	13adc <__assert_fail@plt+0x2330>
   13a54:	mov	r8, #1
   13a58:	mov	r6, #2
   13a5c:	cmp	r4, #0
   13a60:	movne	r0, #39	; 0x27
   13a64:	strbne	r0, [r7]
   13a68:	movw	r0, #16244	; 0x3f74
   13a6c:	movt	r0, #2
   13a70:	str	r0, [sp, #92]	; 0x5c
   13a74:	mov	r0, #1
   13a78:	str	r0, [fp, #-72]	; 0xffffffb8
   13a7c:	b	13ad8 <__assert_fail@plt+0x232c>
   13a80:	mov	r6, #5
   13a84:	tst	sl, #1
   13a88:	beq	13ab0 <__assert_fail@plt+0x2304>
   13a8c:	mov	r0, #1
   13a90:	str	r0, [fp, #-72]	; 0xffffffb8
   13a94:	mov	r8, #0
   13a98:	movw	r0, #16570	; 0x40ba
   13a9c:	movt	r0, #2
   13aa0:	str	r0, [sp, #92]	; 0x5c
   13aa4:	mov	r2, #1
   13aa8:	mov	r3, #1
   13aac:	b	13adc <__assert_fail@plt+0x2330>
   13ab0:	cmp	r4, #0
   13ab4:	movne	r0, #34	; 0x22
   13ab8:	strbne	r0, [r7]
   13abc:	mov	r8, #1
   13ac0:	movw	r0, #16570	; 0x40ba
   13ac4:	movt	r0, #2
   13ac8:	str	r0, [sp, #92]	; 0x5c
   13acc:	mov	r0, #1
   13ad0:	str	r0, [fp, #-72]	; 0xffffffb8
   13ad4:	mov	r2, #1
   13ad8:	mov	r3, #0
   13adc:	ldr	r0, [fp, #16]
   13ae0:	cmp	r0, #0
   13ae4:	movwne	r0, #1
   13ae8:	and	r0, r0, r3
   13aec:	str	r0, [fp, #-88]	; 0xffffffa8
   13af0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13af4:	cmp	r0, #0
   13af8:	movwne	r0, #1
   13afc:	and	r1, r0, r3
   13b00:	and	r1, r2, r1
   13b04:	str	r1, [sp, #48]	; 0x30
   13b08:	str	r6, [fp, #-60]	; 0xffffffc4
   13b0c:	subs	r6, r6, #2
   13b10:	clz	r1, r6
   13b14:	lsr	r1, r1, #5
   13b18:	and	r1, r1, r3
   13b1c:	str	r1, [sp, #60]	; 0x3c
   13b20:	str	r6, [fp, #-80]	; 0xffffffb0
   13b24:	mov	r1, r6
   13b28:	movwne	r1, #1
   13b2c:	str	r3, [fp, #-76]	; 0xffffffb4
   13b30:	eor	r3, r3, #1
   13b34:	str	r3, [sp, #88]	; 0x58
   13b38:	orr	r3, r1, r3
   13b3c:	str	r3, [sp, #64]	; 0x40
   13b40:	and	r1, r1, r2
   13b44:	str	r1, [fp, #-68]	; 0xffffffbc
   13b48:	and	r0, r0, r1
   13b4c:	str	r0, [fp, #-64]	; 0xffffffc0
   13b50:	str	r2, [sp, #84]	; 0x54
   13b54:	eor	r0, r2, #1
   13b58:	str	r0, [sp, #52]	; 0x34
   13b5c:	mov	r6, #0
   13b60:	cmn	lr, #1
   13b64:	beq	13b74 <__assert_fail@plt+0x23c8>
   13b68:	cmp	r6, lr
   13b6c:	bne	13b80 <__assert_fail@plt+0x23d4>
   13b70:	b	146ec <__assert_fail@plt+0x2f40>
   13b74:	ldrb	r0, [ip, r6]
   13b78:	cmp	r0, #0
   13b7c:	beq	146ec <__assert_fail@plt+0x2f40>
   13b80:	str	r5, [fp, #-48]	; 0xffffffd0
   13b84:	mov	sl, #0
   13b88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b8c:	cmp	r0, #0
   13b90:	beq	13bc4 <__assert_fail@plt+0x2418>
   13b94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b98:	add	r5, r6, r0
   13b9c:	cmp	r0, #2
   13ba0:	bcc	13bbc <__assert_fail@plt+0x2410>
   13ba4:	cmn	lr, #1
   13ba8:	bne	13bbc <__assert_fail@plt+0x2410>
   13bac:	mov	r0, ip
   13bb0:	bl	1165c <strlen@plt>
   13bb4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13bb8:	mov	lr, r0
   13bbc:	cmp	r5, lr
   13bc0:	bls	13bd0 <__assert_fail@plt+0x2424>
   13bc4:	mov	r0, #0
   13bc8:	str	r0, [fp, #-52]	; 0xffffffcc
   13bcc:	b	13c1c <__assert_fail@plt+0x2470>
   13bd0:	mov	r5, r4
   13bd4:	mov	r4, lr
   13bd8:	add	r0, ip, r6
   13bdc:	ldr	r1, [sp, #92]	; 0x5c
   13be0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13be4:	bl	11518 <memcmp@plt>
   13be8:	cmp	r0, #0
   13bec:	mov	r1, r0
   13bf0:	movwne	r1, #1
   13bf4:	ldr	r2, [sp, #88]	; 0x58
   13bf8:	orr	r1, r1, r2
   13bfc:	tst	r1, #1
   13c00:	beq	147b0 <__assert_fail@plt+0x3004>
   13c04:	clz	r0, r0
   13c08:	lsr	r0, r0, #5
   13c0c:	str	r0, [fp, #-52]	; 0xffffffcc
   13c10:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c14:	mov	lr, r4
   13c18:	mov	r4, r5
   13c1c:	ldrb	r5, [ip, r6]
   13c20:	cmp	r5, #126	; 0x7e
   13c24:	bhi	13fe0 <__assert_fail@plt+0x2834>
   13c28:	mov	r9, #1
   13c2c:	mov	r2, #110	; 0x6e
   13c30:	mov	r0, #97	; 0x61
   13c34:	add	r3, pc, #4
   13c38:	mov	r1, #0
   13c3c:	ldr	pc, [r3, r5, lsl #2]
   13c40:	ldrdeq	r3, [r1], -r8
   13c44:	andeq	r3, r1, r0, ror #31
   13c48:	andeq	r3, r1, r0, ror #31
   13c4c:	andeq	r3, r1, r0, ror #31
   13c50:	andeq	r3, r1, r0, ror #31
   13c54:	andeq	r3, r1, r0, ror #31
   13c58:	andeq	r3, r1, r0, ror #31
   13c5c:	andeq	r4, r1, r4, lsr #1
   13c60:			; <UNDEFINED> instruction: 0x00013eb8
   13c64:			; <UNDEFINED> instruction: 0x00013eb0
   13c68:	andeq	r3, r1, r4, asr #29
   13c6c:	andeq	r3, r1, r8, asr #30
   13c70:	andeq	r3, r1, r8, lsr #29
   13c74:	andeq	r3, r1, r0, asr #29
   13c78:	andeq	r3, r1, r0, ror #31
   13c7c:	andeq	r3, r1, r0, ror #31
   13c80:	andeq	r3, r1, r0, ror #31
   13c84:	andeq	r3, r1, r0, ror #31
   13c88:	andeq	r3, r1, r0, ror #31
   13c8c:	andeq	r3, r1, r0, ror #31
   13c90:	andeq	r3, r1, r0, ror #31
   13c94:	andeq	r3, r1, r0, ror #31
   13c98:	andeq	r3, r1, r0, ror #31
   13c9c:	andeq	r3, r1, r0, ror #31
   13ca0:	andeq	r3, r1, r0, ror #31
   13ca4:	andeq	r3, r1, r0, ror #31
   13ca8:	andeq	r3, r1, r0, ror #31
   13cac:	andeq	r3, r1, r0, ror #31
   13cb0:	andeq	r3, r1, r0, ror #31
   13cb4:	andeq	r3, r1, r0, ror #31
   13cb8:	andeq	r3, r1, r0, ror #31
   13cbc:	andeq	r3, r1, r0, ror #31
   13cc0:	andeq	r4, r1, r4, asr r0
   13cc4:	andeq	r4, r1, r8, asr r0
   13cc8:	andeq	r4, r1, r8, asr r0
   13ccc:	andeq	r3, r1, r0, asr lr
   13cd0:	andeq	r4, r1, r8, asr r0
   13cd4:	andeq	r3, r1, ip, lsr lr
   13cd8:	andeq	r4, r1, r8, asr r0
   13cdc:	andeq	r3, r1, r0, asr pc
   13ce0:	andeq	r4, r1, r8, asr r0
   13ce4:	andeq	r4, r1, r8, asr r0
   13ce8:	andeq	r4, r1, r8, asr r0
   13cec:	andeq	r3, r1, ip, lsr lr
   13cf0:	andeq	r3, r1, ip, lsr lr
   13cf4:	andeq	r3, r1, ip, lsr lr
   13cf8:	andeq	r3, r1, ip, lsr lr
   13cfc:	andeq	r3, r1, ip, lsr lr
   13d00:	andeq	r3, r1, ip, lsr lr
   13d04:	andeq	r3, r1, ip, lsr lr
   13d08:	andeq	r3, r1, ip, lsr lr
   13d0c:	andeq	r3, r1, ip, lsr lr
   13d10:	andeq	r3, r1, ip, lsr lr
   13d14:	andeq	r3, r1, ip, lsr lr
   13d18:	andeq	r3, r1, ip, lsr lr
   13d1c:	andeq	r3, r1, ip, lsr lr
   13d20:	andeq	r3, r1, ip, lsr lr
   13d24:	andeq	r3, r1, ip, lsr lr
   13d28:	andeq	r3, r1, ip, lsr lr
   13d2c:	andeq	r4, r1, r8, asr r0
   13d30:	andeq	r4, r1, r8, asr r0
   13d34:	andeq	r4, r1, r8, asr r0
   13d38:	andeq	r4, r1, r8, asr r0
   13d3c:	andeq	r3, r1, r8, lsl pc
   13d40:	andeq	r3, r1, r0, ror #31
   13d44:	andeq	r3, r1, ip, lsr lr
   13d48:	andeq	r3, r1, ip, lsr lr
   13d4c:	andeq	r3, r1, ip, lsr lr
   13d50:	andeq	r3, r1, ip, lsr lr
   13d54:	andeq	r3, r1, ip, lsr lr
   13d58:	andeq	r3, r1, ip, lsr lr
   13d5c:	andeq	r3, r1, ip, lsr lr
   13d60:	andeq	r3, r1, ip, lsr lr
   13d64:	andeq	r3, r1, ip, lsr lr
   13d68:	andeq	r3, r1, ip, lsr lr
   13d6c:	andeq	r3, r1, ip, lsr lr
   13d70:	andeq	r3, r1, ip, lsr lr
   13d74:	andeq	r3, r1, ip, lsr lr
   13d78:	andeq	r3, r1, ip, lsr lr
   13d7c:	andeq	r3, r1, ip, lsr lr
   13d80:	andeq	r3, r1, ip, lsr lr
   13d84:	andeq	r3, r1, ip, lsr lr
   13d88:	andeq	r3, r1, ip, lsr lr
   13d8c:	andeq	r3, r1, ip, lsr lr
   13d90:	andeq	r3, r1, ip, lsr lr
   13d94:	andeq	r3, r1, ip, lsr lr
   13d98:	andeq	r3, r1, ip, lsr lr
   13d9c:	andeq	r3, r1, ip, lsr lr
   13da0:	andeq	r3, r1, ip, lsr lr
   13da4:	andeq	r3, r1, ip, lsr lr
   13da8:	andeq	r3, r1, ip, lsr lr
   13dac:	andeq	r4, r1, r8, asr r0
   13db0:	andeq	r3, r1, r4, lsl #29
   13db4:	andeq	r3, r1, ip, lsr lr
   13db8:	andeq	r4, r1, r8, asr r0
   13dbc:	andeq	r3, r1, ip, lsr lr
   13dc0:	andeq	r4, r1, r8, asr r0
   13dc4:	andeq	r3, r1, ip, lsr lr
   13dc8:	andeq	r3, r1, ip, lsr lr
   13dcc:	andeq	r3, r1, ip, lsr lr
   13dd0:	andeq	r3, r1, ip, lsr lr
   13dd4:	andeq	r3, r1, ip, lsr lr
   13dd8:	andeq	r3, r1, ip, lsr lr
   13ddc:	andeq	r3, r1, ip, lsr lr
   13de0:	andeq	r3, r1, ip, lsr lr
   13de4:	andeq	r3, r1, ip, lsr lr
   13de8:	andeq	r3, r1, ip, lsr lr
   13dec:	andeq	r3, r1, ip, lsr lr
   13df0:	andeq	r3, r1, ip, lsr lr
   13df4:	andeq	r3, r1, ip, lsr lr
   13df8:	andeq	r3, r1, ip, lsr lr
   13dfc:	andeq	r3, r1, ip, lsr lr
   13e00:	andeq	r3, r1, ip, lsr lr
   13e04:	andeq	r3, r1, ip, lsr lr
   13e08:	andeq	r3, r1, ip, lsr lr
   13e0c:	andeq	r3, r1, ip, lsr lr
   13e10:	andeq	r3, r1, ip, lsr lr
   13e14:	andeq	r3, r1, ip, lsr lr
   13e18:	andeq	r3, r1, ip, lsr lr
   13e1c:	andeq	r3, r1, ip, lsr lr
   13e20:	andeq	r3, r1, ip, lsr lr
   13e24:	andeq	r3, r1, ip, lsr lr
   13e28:	andeq	r3, r1, ip, lsr lr
   13e2c:	andeq	r3, r1, r4, ror #28
   13e30:	andeq	r4, r1, r8, asr r0
   13e34:	andeq	r3, r1, r4, ror #28
   13e38:	andeq	r3, r1, r0, asr lr
   13e3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e40:	cmp	r0, #0
   13e44:	beq	140b8 <__assert_fail@plt+0x290c>
   13e48:	ldr	r0, [fp, #16]
   13e4c:	b	140bc <__assert_fail@plt+0x2910>
   13e50:	mov	r9, #0
   13e54:	cmp	r6, #0
   13e58:	beq	14054 <__assert_fail@plt+0x28a8>
   13e5c:	mov	sl, #0
   13e60:	b	13e3c <__assert_fail@plt+0x2690>
   13e64:	mov	r9, #0
   13e68:	cmn	lr, #1
   13e6c:	beq	14038 <__assert_fail@plt+0x288c>
   13e70:	cmp	r6, #0
   13e74:	bne	13e5c <__assert_fail@plt+0x26b0>
   13e78:	cmp	lr, #1
   13e7c:	beq	14054 <__assert_fail@plt+0x28a8>
   13e80:	b	13e5c <__assert_fail@plt+0x26b0>
   13e84:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13e88:	cmp	r0, #2
   13e8c:	bne	14080 <__assert_fail@plt+0x28d4>
   13e90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e94:	tst	r0, #1
   13e98:	bne	147c8 <__assert_fail@plt+0x301c>
   13e9c:	mov	sl, #0
   13ea0:	mov	r0, #92	; 0x5c
   13ea4:	b	14094 <__assert_fail@plt+0x28e8>
   13ea8:	mov	r0, #102	; 0x66
   13eac:	b	140a4 <__assert_fail@plt+0x28f8>
   13eb0:	mov	r2, #116	; 0x74
   13eb4:	b	13ec4 <__assert_fail@plt+0x2718>
   13eb8:	mov	r0, #98	; 0x62
   13ebc:	b	140a4 <__assert_fail@plt+0x28f8>
   13ec0:	mov	r2, #114	; 0x72
   13ec4:	ldr	r0, [sp, #64]	; 0x40
   13ec8:	tst	r0, #1
   13ecc:	mov	r0, r2
   13ed0:	bne	140a4 <__assert_fail@plt+0x28f8>
   13ed4:	b	147c8 <__assert_fail@plt+0x301c>
   13ed8:	ldr	r0, [sp, #84]	; 0x54
   13edc:	tst	r0, #1
   13ee0:	beq	14194 <__assert_fail@plt+0x29e8>
   13ee4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13ee8:	tst	r0, #1
   13eec:	bne	147c8 <__assert_fail@plt+0x301c>
   13ef0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13ef4:	cmp	r0, #2
   13ef8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13efc:	movwne	r0, #1
   13f00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13f04:	orr	r0, r0, r2
   13f08:	tst	r0, #1
   13f0c:	beq	14588 <__assert_fail@plt+0x2ddc>
   13f10:	mov	r0, r8
   13f14:	b	145bc <__assert_fail@plt+0x2e10>
   13f18:	mov	sl, #0
   13f1c:	mov	r5, #63	; 0x3f
   13f20:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13f24:	cmp	r0, #5
   13f28:	beq	14348 <__assert_fail@plt+0x2b9c>
   13f2c:	cmp	r0, #2
   13f30:	bne	143e8 <__assert_fail@plt+0x2c3c>
   13f34:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f38:	tst	r0, #1
   13f3c:	mov	r9, #0
   13f40:	beq	13e3c <__assert_fail@plt+0x2690>
   13f44:	b	147c8 <__assert_fail@plt+0x301c>
   13f48:	mov	r0, #118	; 0x76
   13f4c:	b	140a4 <__assert_fail@plt+0x28f8>
   13f50:	mov	r5, #39	; 0x27
   13f54:	mov	r0, #1
   13f58:	str	r0, [sp, #56]	; 0x38
   13f5c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13f60:	cmp	r0, #2
   13f64:	bne	141b4 <__assert_fail@plt+0x2a08>
   13f68:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f6c:	tst	r0, #1
   13f70:	bne	147c8 <__assert_fail@plt+0x301c>
   13f74:	ldr	r2, [sp, #72]	; 0x48
   13f78:	cmp	r2, #0
   13f7c:	mov	r0, r2
   13f80:	movwne	r0, #1
   13f84:	clz	r1, r4
   13f88:	lsr	r1, r1, #5
   13f8c:	orrs	r0, r0, r1
   13f90:	moveq	r2, r4
   13f94:	str	r2, [sp, #72]	; 0x48
   13f98:	moveq	r4, r0
   13f9c:	cmp	r8, r4
   13fa0:	movcc	r0, #39	; 0x27
   13fa4:	strbcc	r0, [r7, r8]
   13fa8:	add	r0, r8, #1
   13fac:	cmp	r0, r4
   13fb0:	movcc	r1, #92	; 0x5c
   13fb4:	strbcc	r1, [r7, r0]
   13fb8:	add	r0, r8, #2
   13fbc:	cmp	r0, r4
   13fc0:	movcc	r1, #39	; 0x27
   13fc4:	strbcc	r1, [r7, r0]
   13fc8:	add	r8, r8, #3
   13fcc:	mov	r0, #0
   13fd0:	str	r0, [fp, #-56]	; 0xffffffc8
   13fd4:	mov	sl, #0
   13fd8:	mov	r9, #1
   13fdc:	b	13e3c <__assert_fail@plt+0x2690>
   13fe0:	str	r4, [sp, #24]
   13fe4:	ldr	r0, [sp, #40]	; 0x28
   13fe8:	cmp	r0, #1
   13fec:	bne	141bc <__assert_fail@plt+0x2a10>
   13ff0:	str	lr, [sp, #28]
   13ff4:	bl	11644 <__ctype_b_loc@plt>
   13ff8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ffc:	ldr	r0, [r0]
   14000:	add	r0, r0, r5, lsl #1
   14004:	ldrb	r0, [r0, #1]
   14008:	ubfx	r9, r0, #6, #1
   1400c:	mov	r1, #1
   14010:	ldr	r4, [sp, #24]
   14014:	ldr	r0, [sp, #52]	; 0x34
   14018:	orr	r0, r9, r0
   1401c:	mov	r2, r1
   14020:	cmp	r1, #1
   14024:	bhi	143f0 <__assert_fail@plt+0x2c44>
   14028:	tst	r0, #1
   1402c:	beq	143f0 <__assert_fail@plt+0x2c44>
   14030:	ldr	lr, [sp, #28]
   14034:	b	13e3c <__assert_fail@plt+0x2690>
   14038:	cmp	r6, #0
   1403c:	ldrbeq	r0, [ip, #1]
   14040:	cmpeq	r0, #0
   14044:	beq	14054 <__assert_fail@plt+0x28a8>
   14048:	mvn	lr, #0
   1404c:	mov	sl, #0
   14050:	b	13e3c <__assert_fail@plt+0x2690>
   14054:	mov	r1, #1
   14058:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1405c:	cmp	r0, #2
   14060:	bne	14078 <__assert_fail@plt+0x28cc>
   14064:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14068:	tst	r0, #1
   1406c:	mov	r9, r1
   14070:	beq	13e3c <__assert_fail@plt+0x2690>
   14074:	b	147c8 <__assert_fail@plt+0x301c>
   14078:	mov	r9, r1
   1407c:	b	13e3c <__assert_fail@plt+0x2690>
   14080:	mov	sl, #0
   14084:	mov	r0, #92	; 0x5c
   14088:	ldr	r1, [sp, #48]	; 0x30
   1408c:	cmp	r1, #0
   14090:	beq	140a4 <__assert_fail@plt+0x28f8>
   14094:	mov	r9, #0
   14098:	cmp	sl, #0
   1409c:	beq	14654 <__assert_fail@plt+0x2ea8>
   140a0:	b	14690 <__assert_fail@plt+0x2ee4>
   140a4:	mov	r9, #0
   140a8:	ldr	r1, [sp, #84]	; 0x54
   140ac:	tst	r1, #1
   140b0:	mov	sl, #0
   140b4:	bne	140f4 <__assert_fail@plt+0x2948>
   140b8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   140bc:	cmp	r0, #0
   140c0:	mov	r0, r5
   140c4:	beq	140e8 <__assert_fail@plt+0x293c>
   140c8:	ubfx	r0, r5, #5, #3
   140cc:	ldr	r1, [fp, #16]
   140d0:	ldr	r0, [r1, r0, lsl #2]
   140d4:	and	r1, r5, #31
   140d8:	mov	r2, #1
   140dc:	tst	r0, r2, lsl r1
   140e0:	mov	r0, r5
   140e4:	bne	140f4 <__assert_fail@plt+0x2948>
   140e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   140ec:	cmp	r1, #0
   140f0:	beq	1464c <__assert_fail@plt+0x2ea0>
   140f4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   140f8:	tst	r1, #1
   140fc:	bne	147c8 <__assert_fail@plt+0x301c>
   14100:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14104:	cmp	r1, #2
   14108:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1410c:	movwne	r1, #1
   14110:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14114:	orr	r1, r1, r2
   14118:	tst	r1, #1
   1411c:	beq	14128 <__assert_fail@plt+0x297c>
   14120:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14124:	b	14164 <__assert_fail@plt+0x29b8>
   14128:	cmp	r8, r4
   1412c:	movcc	r1, #39	; 0x27
   14130:	strbcc	r1, [r7, r8]
   14134:	add	r1, r8, #1
   14138:	cmp	r1, r4
   1413c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14140:	movcc	r2, #36	; 0x24
   14144:	strbcc	r2, [r7, r1]
   14148:	add	r1, r8, #2
   1414c:	cmp	r1, r4
   14150:	movcc	r2, #39	; 0x27
   14154:	strbcc	r2, [r7, r1]
   14158:	add	r8, r8, #3
   1415c:	mov	r1, #1
   14160:	str	r1, [fp, #-56]	; 0xffffffc8
   14164:	cmp	r8, r4
   14168:	movcc	r1, #92	; 0x5c
   1416c:	strbcc	r1, [r7, r8]
   14170:	add	r8, r8, #1
   14174:	cmp	r8, r4
   14178:	strbcc	r0, [r7, r8]
   1417c:	and	r5, r5, r9
   14180:	add	r8, r8, #1
   14184:	add	r6, r6, #1
   14188:	cmn	lr, #1
   1418c:	bne	13b68 <__assert_fail@plt+0x23bc>
   14190:	b	13b74 <__assert_fail@plt+0x23c8>
   14194:	mov	r9, #0
   14198:	ldr	r0, [sp, #36]	; 0x24
   1419c:	cmp	r0, #0
   141a0:	mov	sl, #0
   141a4:	mov	r5, #0
   141a8:	beq	140b8 <__assert_fail@plt+0x290c>
   141ac:	ldr	r5, [fp, #-48]	; 0xffffffd0
   141b0:	b	14184 <__assert_fail@plt+0x29d8>
   141b4:	mov	r9, #1
   141b8:	b	13e3c <__assert_fail@plt+0x2690>
   141bc:	mov	r0, #0
   141c0:	str	r0, [fp, #-36]	; 0xffffffdc
   141c4:	str	r0, [fp, #-40]	; 0xffffffd8
   141c8:	cmn	lr, #1
   141cc:	bne	141e0 <__assert_fail@plt+0x2a34>
   141d0:	mov	r0, ip
   141d4:	bl	1165c <strlen@plt>
   141d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   141dc:	mov	lr, r0
   141e0:	add	r0, ip, r6
   141e4:	str	r0, [sp, #20]
   141e8:	mov	r9, #1
   141ec:	mov	r7, #0
   141f0:	sub	r4, fp, #40	; 0x28
   141f4:	str	lr, [sp, #28]
   141f8:	str	r7, [sp, #44]	; 0x2c
   141fc:	add	r7, r7, r6
   14200:	add	r1, ip, r7
   14204:	sub	r2, lr, r7
   14208:	sub	r0, fp, #44	; 0x2c
   1420c:	mov	r3, r4
   14210:	bl	23234 <__assert_fail@plt+0x11a88>
   14214:	cmp	r0, #0
   14218:	beq	146d8 <__assert_fail@plt+0x2f2c>
   1421c:	cmn	r0, #1
   14220:	beq	14698 <__assert_fail@plt+0x2eec>
   14224:	cmn	r0, #2
   14228:	ldr	lr, [sp, #28]
   1422c:	beq	146a0 <__assert_fail@plt+0x2ef4>
   14230:	cmp	r0, #2
   14234:	mov	r1, #0
   14238:	movwcc	r1, #1
   1423c:	ldr	r2, [sp, #60]	; 0x3c
   14240:	eor	r2, r2, #1
   14244:	orrs	r1, r2, r1
   14248:	ldr	r4, [sp, #24]
   1424c:	bne	1430c <__assert_fail@plt+0x2b60>
   14250:	ldr	r1, [sp, #44]	; 0x2c
   14254:	ldr	r2, [sp, #20]
   14258:	add	r1, r2, r1
   1425c:	mov	r2, #1
   14260:	ldrb	r3, [r1, r2]
   14264:	sub	r3, r3, #91	; 0x5b
   14268:	cmp	r3, #33	; 0x21
   1426c:	bhi	14300 <__assert_fail@plt+0x2b54>
   14270:	add	r7, pc, #0
   14274:	ldr	pc, [r7, r3, lsl #2]
   14278:	andeq	r4, r1, r0, asr #15
   1427c:	andeq	r4, r1, r0, asr #15
   14280:	andeq	r4, r1, r0, lsl #6
   14284:	andeq	r4, r1, r0, asr #15
   14288:	andeq	r4, r1, r0, lsl #6
   1428c:	andeq	r4, r1, r0, asr #15
   14290:	andeq	r4, r1, r0, lsl #6
   14294:	andeq	r4, r1, r0, lsl #6
   14298:	andeq	r4, r1, r0, lsl #6
   1429c:	andeq	r4, r1, r0, lsl #6
   142a0:	andeq	r4, r1, r0, lsl #6
   142a4:	andeq	r4, r1, r0, lsl #6
   142a8:	andeq	r4, r1, r0, lsl #6
   142ac:	andeq	r4, r1, r0, lsl #6
   142b0:	andeq	r4, r1, r0, lsl #6
   142b4:	andeq	r4, r1, r0, lsl #6
   142b8:	andeq	r4, r1, r0, lsl #6
   142bc:	andeq	r4, r1, r0, lsl #6
   142c0:	andeq	r4, r1, r0, lsl #6
   142c4:	andeq	r4, r1, r0, lsl #6
   142c8:	andeq	r4, r1, r0, lsl #6
   142cc:	andeq	r4, r1, r0, lsl #6
   142d0:	andeq	r4, r1, r0, lsl #6
   142d4:	andeq	r4, r1, r0, lsl #6
   142d8:	andeq	r4, r1, r0, lsl #6
   142dc:	andeq	r4, r1, r0, lsl #6
   142e0:	andeq	r4, r1, r0, lsl #6
   142e4:	andeq	r4, r1, r0, lsl #6
   142e8:	andeq	r4, r1, r0, lsl #6
   142ec:	andeq	r4, r1, r0, lsl #6
   142f0:	andeq	r4, r1, r0, lsl #6
   142f4:	andeq	r4, r1, r0, lsl #6
   142f8:	andeq	r4, r1, r0, lsl #6
   142fc:	andeq	r4, r1, r0, asr #15
   14300:	add	r2, r2, #1
   14304:	cmp	r2, r0
   14308:	bcc	14260 <__assert_fail@plt+0x2ab4>
   1430c:	ldr	r7, [sp, #44]	; 0x2c
   14310:	add	r7, r0, r7
   14314:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14318:	bl	11578 <iswprint@plt>
   1431c:	cmp	r0, #0
   14320:	movwne	r0, #1
   14324:	and	r9, r9, r0
   14328:	sub	r4, fp, #40	; 0x28
   1432c:	mov	r0, r4
   14330:	bl	1150c <mbsinit@plt>
   14334:	ldr	lr, [sp, #28]
   14338:	cmp	r0, #0
   1433c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14340:	beq	141f8 <__assert_fail@plt+0x2a4c>
   14344:	b	146e0 <__assert_fail@plt+0x2f34>
   14348:	ldr	r0, [sp, #32]
   1434c:	cmp	r0, #0
   14350:	beq	143e8 <__assert_fail@plt+0x2c3c>
   14354:	add	r0, r6, #2
   14358:	cmp	r0, lr
   1435c:	bcs	143e8 <__assert_fail@plt+0x2c3c>
   14360:	add	r1, ip, r6
   14364:	ldrb	r1, [r1, #1]
   14368:	cmp	r1, #63	; 0x3f
   1436c:	bne	143e8 <__assert_fail@plt+0x2c3c>
   14370:	ldrb	r9, [ip, r0]
   14374:	sub	r2, r9, #33	; 0x21
   14378:	cmp	r2, #29
   1437c:	bhi	143e8 <__assert_fail@plt+0x2c3c>
   14380:	mov	r3, #1
   14384:	movw	r1, #20929	; 0x51c1
   14388:	movt	r1, #14336	; 0x3800
   1438c:	tst	r1, r3, lsl r2
   14390:	beq	143e8 <__assert_fail@plt+0x2c3c>
   14394:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14398:	tst	r1, #1
   1439c:	bne	147c8 <__assert_fail@plt+0x301c>
   143a0:	cmp	r8, r4
   143a4:	movcc	r1, #63	; 0x3f
   143a8:	strbcc	r1, [r7, r8]
   143ac:	add	r2, r8, #1
   143b0:	cmp	r2, r4
   143b4:	movcc	r1, #34	; 0x22
   143b8:	strbcc	r1, [r7, r2]
   143bc:	add	r2, r8, #2
   143c0:	cmp	r2, r4
   143c4:	movcc	r1, #34	; 0x22
   143c8:	strbcc	r1, [r7, r2]
   143cc:	add	r2, r8, #3
   143d0:	cmp	r2, r4
   143d4:	movcc	r1, #63	; 0x3f
   143d8:	strbcc	r1, [r7, r2]
   143dc:	add	r8, r8, #4
   143e0:	mov	r6, r0
   143e4:	mov	r5, r9
   143e8:	mov	r9, #0
   143ec:	b	13e3c <__assert_fail@plt+0x2690>
   143f0:	add	r1, r2, r6
   143f4:	str	r1, [sp, #44]	; 0x2c
   143f8:	add	r1, r6, #1
   143fc:	mov	r3, #0
   14400:	ldr	lr, [sp, #28]
   14404:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14408:	tst	r0, #1
   1440c:	bne	14500 <__assert_fail@plt+0x2d54>
   14410:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14414:	tst	r2, #1
   14418:	bne	147c8 <__assert_fail@plt+0x301c>
   1441c:	cmp	r6, #2
   14420:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14424:	movwne	r3, #1
   14428:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1442c:	orr	r3, r3, r2
   14430:	tst	r3, #1
   14434:	bne	14470 <__assert_fail@plt+0x2cc4>
   14438:	cmp	r8, r4
   1443c:	movcc	r2, #39	; 0x27
   14440:	strbcc	r2, [r7, r8]
   14444:	add	r3, r8, #1
   14448:	cmp	r3, r4
   1444c:	movcc	r2, #36	; 0x24
   14450:	strbcc	r2, [r7, r3]
   14454:	add	r3, r8, #2
   14458:	cmp	r3, r4
   1445c:	movcc	r2, #39	; 0x27
   14460:	strbcc	r2, [r7, r3]
   14464:	add	r8, r8, #3
   14468:	mov	r2, #1
   1446c:	str	r2, [fp, #-56]	; 0xffffffc8
   14470:	cmp	r8, r4
   14474:	movcc	r2, #92	; 0x5c
   14478:	strbcc	r2, [r7, r8]
   1447c:	add	r3, r8, #1
   14480:	cmp	r3, r4
   14484:	bcs	144a4 <__assert_fail@plt+0x2cf8>
   14488:	and	r7, r5, #192	; 0xc0
   1448c:	mov	r2, #48	; 0x30
   14490:	orr	r7, r2, r7, lsr #6
   14494:	ldr	r6, [sp, #80]	; 0x50
   14498:	strb	r7, [r6, r3]
   1449c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   144a0:	ldr	r7, [sp, #80]	; 0x50
   144a4:	add	r3, r8, #2
   144a8:	cmp	r3, r4
   144ac:	bcs	144cc <__assert_fail@plt+0x2d20>
   144b0:	lsr	r7, r5, #3
   144b4:	mov	r2, #6
   144b8:	bfi	r7, r2, #3, #29
   144bc:	ldr	r6, [sp, #80]	; 0x50
   144c0:	strb	r7, [r6, r3]
   144c4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   144c8:	ldr	r7, [sp, #80]	; 0x50
   144cc:	mov	r2, #6
   144d0:	bfi	r5, r2, #3, #29
   144d4:	add	r8, r8, #3
   144d8:	mov	r3, #1
   144dc:	b	14524 <__assert_fail@plt+0x2d78>
   144e0:	ldr	r7, [sp, #80]	; 0x50
   144e4:	cmp	r8, r4
   144e8:	strbcc	r5, [r7, r8]
   144ec:	ldrb	r5, [ip, r1]
   144f0:	add	r1, r1, #1
   144f4:	add	r8, r8, #1
   144f8:	tst	r0, #1
   144fc:	beq	14410 <__assert_fail@plt+0x2c64>
   14500:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14504:	tst	r2, #1
   14508:	beq	1451c <__assert_fail@plt+0x2d70>
   1450c:	cmp	r8, r4
   14510:	movcc	r2, #92	; 0x5c
   14514:	strbcc	r2, [r7, r8]
   14518:	add	r8, r8, #1
   1451c:	mov	r2, #0
   14520:	str	r2, [fp, #-52]	; 0xffffffcc
   14524:	and	sl, r3, #1
   14528:	ldr	r2, [sp, #44]	; 0x2c
   1452c:	cmp	r2, r1
   14530:	bls	1463c <__assert_fail@plt+0x2e90>
   14534:	cmp	sl, #0
   14538:	movwne	sl, #1
   1453c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14540:	mvn	r7, r2
   14544:	orr	r7, r7, sl
   14548:	tst	r7, #1
   1454c:	bne	144e0 <__assert_fail@plt+0x2d34>
   14550:	cmp	r8, r4
   14554:	ldrcc	r7, [sp, #80]	; 0x50
   14558:	movcc	r2, #39	; 0x27
   1455c:	strbcc	r2, [r7, r8]
   14560:	add	r7, r8, #1
   14564:	cmp	r7, r4
   14568:	ldrcc	r6, [sp, #80]	; 0x50
   1456c:	movcc	r2, #39	; 0x27
   14570:	strbcc	r2, [r6, r7]
   14574:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   14578:	add	r8, r8, #2
   1457c:	mov	r2, #0
   14580:	str	r2, [fp, #-56]	; 0xffffffc8
   14584:	b	144e0 <__assert_fail@plt+0x2d34>
   14588:	cmp	r8, r4
   1458c:	movcc	r0, #39	; 0x27
   14590:	strbcc	r0, [r7, r8]
   14594:	add	r0, r8, #1
   14598:	cmp	r0, r4
   1459c:	movcc	r1, #36	; 0x24
   145a0:	strbcc	r1, [r7, r0]
   145a4:	add	r0, r8, #2
   145a8:	cmp	r0, r4
   145ac:	movcc	r1, #39	; 0x27
   145b0:	strbcc	r1, [r7, r0]
   145b4:	add	r0, r8, #3
   145b8:	mov	r2, #1
   145bc:	cmp	r0, r4
   145c0:	movcc	r1, #92	; 0x5c
   145c4:	strbcc	r1, [r7, r0]
   145c8:	str	r2, [fp, #-56]	; 0xffffffc8
   145cc:	add	r8, r0, #1
   145d0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   145d4:	cmp	r1, #2
   145d8:	beq	1462c <__assert_fail@plt+0x2e80>
   145dc:	add	r1, r6, #1
   145e0:	mov	r9, #0
   145e4:	mov	sl, #1
   145e8:	mov	r5, #48	; 0x30
   145ec:	cmp	r1, lr
   145f0:	bcs	13e3c <__assert_fail@plt+0x2690>
   145f4:	ldrb	r1, [ip, r1]
   145f8:	sub	r1, r1, #48	; 0x30
   145fc:	uxtb	r1, r1
   14600:	cmp	r1, #9
   14604:	bhi	13e3c <__assert_fail@plt+0x2690>
   14608:	cmp	r8, r4
   1460c:	movcc	r1, #48	; 0x30
   14610:	strbcc	r1, [r7, r8]
   14614:	add	r1, r0, #2
   14618:	cmp	r1, r4
   1461c:	movcc	r2, #48	; 0x30
   14620:	strbcc	r2, [r7, r1]
   14624:	add	r8, r0, #3
   14628:	b	13e3c <__assert_fail@plt+0x2690>
   1462c:	mov	r0, #48	; 0x30
   14630:	mov	sl, #1
   14634:	mov	r9, #0
   14638:	b	140e8 <__assert_fail@plt+0x293c>
   1463c:	sub	r6, r1, #1
   14640:	cmp	sl, #0
   14644:	movwne	sl, #1
   14648:	mov	r0, r5
   1464c:	cmp	sl, #0
   14650:	bne	14690 <__assert_fail@plt+0x2ee4>
   14654:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14658:	tst	r1, #1
   1465c:	beq	14690 <__assert_fail@plt+0x2ee4>
   14660:	cmp	r8, r4
   14664:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14668:	movcc	r1, #39	; 0x27
   1466c:	strbcc	r1, [r7, r8]
   14670:	add	r1, r8, #1
   14674:	cmp	r1, r4
   14678:	movcc	r2, #39	; 0x27
   1467c:	strbcc	r2, [r7, r1]
   14680:	add	r8, r8, #2
   14684:	mov	r1, #0
   14688:	str	r1, [fp, #-56]	; 0xffffffc8
   1468c:	b	14174 <__assert_fail@plt+0x29c8>
   14690:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14694:	b	14174 <__assert_fail@plt+0x29c8>
   14698:	mov	r9, #0
   1469c:	b	146d8 <__assert_fail@plt+0x2f2c>
   146a0:	mov	r9, #0
   146a4:	cmp	r7, lr
   146a8:	bcs	146d8 <__assert_fail@plt+0x2f2c>
   146ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   146b0:	ldr	r7, [sp, #44]	; 0x2c
   146b4:	ldr	r0, [sp, #20]
   146b8:	ldrb	r0, [r0, r7]
   146bc:	cmp	r0, #0
   146c0:	beq	146e0 <__assert_fail@plt+0x2f34>
   146c4:	add	r7, r7, #1
   146c8:	add	r0, r6, r7
   146cc:	cmp	r0, lr
   146d0:	bcc	146b4 <__assert_fail@plt+0x2f08>
   146d4:	b	146e0 <__assert_fail@plt+0x2f34>
   146d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   146dc:	ldr	r7, [sp, #44]	; 0x2c
   146e0:	mov	r1, r7
   146e4:	ldr	r7, [sp, #80]	; 0x50
   146e8:	b	14010 <__assert_fail@plt+0x2864>
   146ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   146f0:	eor	r0, r1, #2
   146f4:	orr	r0, r0, r8
   146f8:	clz	r0, r0
   146fc:	lsr	r0, r0, #5
   14700:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14704:	tst	r2, r0
   14708:	bne	147c8 <__assert_fail@plt+0x301c>
   1470c:	cmp	r1, #2
   14710:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14714:	movwne	r0, #1
   14718:	orr	r0, r2, r0
   1471c:	tst	r0, #1
   14720:	ldreq	r0, [sp, #56]	; 0x38
   14724:	eoreq	r0, r0, #1
   14728:	tsteq	r0, #1
   1472c:	bne	14760 <__assert_fail@plt+0x2fb4>
   14730:	mov	r9, lr
   14734:	tst	r5, #1
   14738:	bne	14830 <__assert_fail@plt+0x3084>
   1473c:	ldr	r0, [sp, #72]	; 0x48
   14740:	cmp	r0, #0
   14744:	beq	14760 <__assert_fail@plt+0x2fb4>
   14748:	mov	r5, #0
   1474c:	cmp	r4, #0
   14750:	ldr	r0, [sp, #84]	; 0x54
   14754:	mov	sl, r2
   14758:	ldr	r6, [sp, #72]	; 0x48
   1475c:	beq	138f8 <__assert_fail@plt+0x214c>
   14760:	ldr	r1, [sp, #92]	; 0x5c
   14764:	clz	r0, r1
   14768:	lsr	r0, r0, #5
   1476c:	orr	r0, r0, r2
   14770:	tst	r0, #1
   14774:	bne	147a0 <__assert_fail@plt+0x2ff4>
   14778:	ldrb	r0, [r1]
   1477c:	cmp	r0, #0
   14780:	beq	147a0 <__assert_fail@plt+0x2ff4>
   14784:	add	r1, r1, #1
   14788:	cmp	r8, r4
   1478c:	strbcc	r0, [r7, r8]
   14790:	add	r8, r8, #1
   14794:	ldrb	r0, [r1], #1
   14798:	cmp	r0, #0
   1479c:	bne	14788 <__assert_fail@plt+0x2fdc>
   147a0:	cmp	r8, r4
   147a4:	movcc	r0, #0
   147a8:	strbcc	r0, [r7, r8]
   147ac:	b	14824 <__assert_fail@plt+0x3078>
   147b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   147b4:	mov	lr, r4
   147b8:	mov	r4, r5
   147bc:	b	147c8 <__assert_fail@plt+0x301c>
   147c0:	ldr	r7, [sp, #80]	; 0x50
   147c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   147c8:	mov	r0, #0
   147cc:	ldr	r1, [fp, #12]
   147d0:	bic	r1, r1, #2
   147d4:	ldr	r2, [sp, #84]	; 0x54
   147d8:	tst	r2, #1
   147dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   147e0:	mov	r2, r3
   147e4:	movwne	r2, #4
   147e8:	cmp	r3, #2
   147ec:	movne	r2, r3
   147f0:	str	r2, [sp]
   147f4:	str	r1, [sp, #4]
   147f8:	str	r0, [sp, #8]
   147fc:	ldr	r0, [sp, #68]	; 0x44
   14800:	str	r0, [sp, #12]
   14804:	ldr	r0, [sp, #76]	; 0x4c
   14808:	str	r0, [sp, #16]
   1480c:	mov	r0, r7
   14810:	mov	r1, r4
   14814:	mov	r2, ip
   14818:	mov	r3, lr
   1481c:	bl	13870 <__assert_fail@plt+0x20c4>
   14820:	mov	r8, r0
   14824:	mov	r0, r8
   14828:	sub	sp, fp, #28
   1482c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14830:	mov	r0, #5
   14834:	str	r0, [sp]
   14838:	ldr	r0, [fp, #12]
   1483c:	str	r0, [sp, #4]
   14840:	ldr	r0, [fp, #16]
   14844:	str	r0, [sp, #8]
   14848:	ldr	r0, [sp, #68]	; 0x44
   1484c:	str	r0, [sp, #12]
   14850:	ldr	r0, [sp, #76]	; 0x4c
   14854:	str	r0, [sp, #16]
   14858:	mov	r0, r7
   1485c:	ldr	r1, [sp, #72]	; 0x48
   14860:	ldr	r2, [fp, #-84]	; 0xffffffac
   14864:	mov	r3, r9
   14868:	b	1481c <__assert_fail@plt+0x3070>
   1486c:	bl	11788 <abort@plt>
   14870:	mov	r3, r2
   14874:	mov	r2, #0
   14878:	b	1487c <__assert_fail@plt+0x30d0>
   1487c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14880:	add	fp, sp, #28
   14884:	sub	sp, sp, #36	; 0x24
   14888:	mov	r4, r2
   1488c:	str	r2, [sp, #24]
   14890:	mov	r5, r1
   14894:	mov	r6, r0
   14898:	str	r0, [sp, #20]
   1489c:	movw	r8, #20936	; 0x51c8
   148a0:	movt	r8, #3
   148a4:	cmp	r3, #0
   148a8:	movne	r8, r3
   148ac:	bl	1168c <__errno_location@plt>
   148b0:	str	r0, [sp, #28]
   148b4:	ldm	r8, {r3, r9}
   148b8:	ldr	r1, [r8, #40]	; 0x28
   148bc:	ldr	r2, [r8, #44]	; 0x2c
   148c0:	ldr	r7, [r0]
   148c4:	str	r7, [sp, #32]
   148c8:	add	sl, r8, #8
   148cc:	cmp	r4, #0
   148d0:	orreq	r9, r9, #1
   148d4:	stm	sp, {r3, r9, sl}
   148d8:	str	r1, [sp, #12]
   148dc:	str	r2, [sp, #16]
   148e0:	mov	r0, #0
   148e4:	mov	r1, #0
   148e8:	mov	r2, r6
   148ec:	mov	r3, r5
   148f0:	mov	r7, r5
   148f4:	bl	13870 <__assert_fail@plt+0x20c4>
   148f8:	mov	r5, r0
   148fc:	add	r4, r0, #1
   14900:	mov	r0, r4
   14904:	bl	22660 <__assert_fail@plt+0x10eb4>
   14908:	mov	r6, r0
   1490c:	ldr	r0, [r8]
   14910:	ldr	r1, [r8, #40]	; 0x28
   14914:	ldr	r2, [r8, #44]	; 0x2c
   14918:	stm	sp, {r0, r9, sl}
   1491c:	str	r1, [sp, #12]
   14920:	str	r2, [sp, #16]
   14924:	mov	r0, r6
   14928:	mov	r1, r4
   1492c:	ldr	r2, [sp, #20]
   14930:	mov	r3, r7
   14934:	bl	13870 <__assert_fail@plt+0x20c4>
   14938:	ldr	r0, [sp, #24]
   1493c:	ldr	r1, [sp, #32]
   14940:	ldr	r2, [sp, #28]
   14944:	str	r1, [r2]
   14948:	cmp	r0, #0
   1494c:	strne	r5, [r0]
   14950:	mov	r0, r6
   14954:	sub	sp, fp, #28
   14958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1495c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14960:	add	fp, sp, #24
   14964:	movw	r8, #20824	; 0x5158
   14968:	movt	r8, #3
   1496c:	ldr	r4, [r8]
   14970:	movw	r5, #20828	; 0x515c
   14974:	movt	r5, #3
   14978:	ldr	r0, [r5]
   1497c:	cmp	r0, #2
   14980:	blt	149ac <__assert_fail@plt+0x3200>
   14984:	add	r7, r4, #12
   14988:	mov	r6, #0
   1498c:	ldr	r0, [r7, r6, lsl #3]
   14990:	bl	1312c <__assert_fail@plt+0x1980>
   14994:	add	r0, r6, #1
   14998:	ldr	r1, [r5]
   1499c:	add	r2, r6, #2
   149a0:	cmp	r2, r1
   149a4:	mov	r6, r0
   149a8:	blt	1498c <__assert_fail@plt+0x31e0>
   149ac:	ldr	r0, [r4, #4]
   149b0:	movw	r7, #20984	; 0x51f8
   149b4:	movt	r7, #3
   149b8:	cmp	r0, r7
   149bc:	beq	149d4 <__assert_fail@plt+0x3228>
   149c0:	bl	1312c <__assert_fail@plt+0x1980>
   149c4:	movw	r0, #20832	; 0x5160
   149c8:	movt	r0, #3
   149cc:	mov	r6, #256	; 0x100
   149d0:	strd	r6, [r0]
   149d4:	movw	r6, #20832	; 0x5160
   149d8:	movt	r6, #3
   149dc:	cmp	r4, r6
   149e0:	beq	149f0 <__assert_fail@plt+0x3244>
   149e4:	mov	r0, r4
   149e8:	bl	1312c <__assert_fail@plt+0x1980>
   149ec:	str	r6, [r8]
   149f0:	mov	r0, #1
   149f4:	str	r0, [r5]
   149f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149fc:	movw	r3, #20936	; 0x51c8
   14a00:	movt	r3, #3
   14a04:	mvn	r2, #0
   14a08:	b	14a0c <__assert_fail@plt+0x3260>
   14a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a10:	add	fp, sp, #28
   14a14:	sub	sp, sp, #44	; 0x2c
   14a18:	mov	r7, r3
   14a1c:	str	r2, [sp, #36]	; 0x24
   14a20:	str	r1, [sp, #32]
   14a24:	mov	r5, r0
   14a28:	bl	1168c <__errno_location@plt>
   14a2c:	cmp	r5, #0
   14a30:	blt	14b9c <__assert_fail@plt+0x33f0>
   14a34:	cmn	r5, #-2147483647	; 0x80000001
   14a38:	beq	14b9c <__assert_fail@plt+0x33f0>
   14a3c:	movw	r4, #20824	; 0x5158
   14a40:	movt	r4, #3
   14a44:	ldr	r6, [r4]
   14a48:	str	r0, [sp, #28]
   14a4c:	ldr	r0, [r0]
   14a50:	str	r0, [sp, #24]
   14a54:	movw	r8, #20828	; 0x515c
   14a58:	movt	r8, #3
   14a5c:	ldr	r1, [r8]
   14a60:	cmp	r1, r5
   14a64:	ble	14a70 <__assert_fail@plt+0x32c4>
   14a68:	mov	sl, r6
   14a6c:	b	14ad8 <__assert_fail@plt+0x332c>
   14a70:	str	r1, [fp, #-32]	; 0xffffffe0
   14a74:	mov	r0, #8
   14a78:	str	r0, [sp]
   14a7c:	movw	r9, #20832	; 0x5160
   14a80:	movt	r9, #3
   14a84:	subs	r0, r6, r9
   14a88:	movne	r0, r6
   14a8c:	add	r2, r5, #1
   14a90:	sub	r2, r2, r1
   14a94:	sub	r1, fp, #32
   14a98:	mvn	r3, #-2147483648	; 0x80000000
   14a9c:	bl	22748 <__assert_fail@plt+0x10f9c>
   14aa0:	mov	sl, r0
   14aa4:	str	r0, [r4]
   14aa8:	cmp	r6, r9
   14aac:	ldrdeq	r0, [r9]
   14ab0:	stmeq	sl, {r0, r1}
   14ab4:	ldr	r1, [r8]
   14ab8:	add	r0, sl, r1, lsl #3
   14abc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14ac0:	sub	r1, r2, r1
   14ac4:	lsl	r2, r1, #3
   14ac8:	mov	r1, #0
   14acc:	bl	116b0 <memset@plt>
   14ad0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ad4:	str	r0, [r8]
   14ad8:	mov	r9, sl
   14adc:	ldr	r6, [r9, r5, lsl #3]!
   14ae0:	ldr	r4, [r9, #4]!
   14ae4:	ldm	r7, {r0, r1}
   14ae8:	ldr	r2, [r7, #40]	; 0x28
   14aec:	ldr	r3, [r7, #44]	; 0x2c
   14af0:	orr	r8, r1, #1
   14af4:	add	r1, r7, #8
   14af8:	stm	sp, {r0, r8}
   14afc:	str	r1, [sp, #20]
   14b00:	add	r0, sp, #8
   14b04:	stm	r0, {r1, r2, r3}
   14b08:	mov	r0, r4
   14b0c:	mov	r1, r6
   14b10:	ldr	r2, [sp, #32]
   14b14:	ldr	r3, [sp, #36]	; 0x24
   14b18:	bl	13870 <__assert_fail@plt+0x20c4>
   14b1c:	cmp	r6, r0
   14b20:	bhi	14b84 <__assert_fail@plt+0x33d8>
   14b24:	add	r6, r0, #1
   14b28:	str	r6, [sl, r5, lsl #3]
   14b2c:	movw	r0, #20984	; 0x51f8
   14b30:	movt	r0, #3
   14b34:	cmp	r4, r0
   14b38:	beq	14b44 <__assert_fail@plt+0x3398>
   14b3c:	mov	r0, r4
   14b40:	bl	1312c <__assert_fail@plt+0x1980>
   14b44:	mov	r0, r6
   14b48:	bl	22660 <__assert_fail@plt+0x10eb4>
   14b4c:	mov	r4, r0
   14b50:	str	r0, [r9]
   14b54:	ldr	r0, [r7]
   14b58:	ldr	r1, [r7, #40]	; 0x28
   14b5c:	ldr	r2, [r7, #44]	; 0x2c
   14b60:	stm	sp, {r0, r8}
   14b64:	ldr	r0, [sp, #20]
   14b68:	add	r3, sp, #8
   14b6c:	stm	r3, {r0, r1, r2}
   14b70:	mov	r0, r4
   14b74:	mov	r1, r6
   14b78:	ldr	r2, [sp, #32]
   14b7c:	ldr	r3, [sp, #36]	; 0x24
   14b80:	bl	13870 <__assert_fail@plt+0x20c4>
   14b84:	ldr	r0, [sp, #28]
   14b88:	ldr	r1, [sp, #24]
   14b8c:	str	r1, [r0]
   14b90:	mov	r0, r4
   14b94:	sub	sp, fp, #28
   14b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b9c:	bl	11788 <abort@plt>
   14ba0:	movw	r3, #20936	; 0x51c8
   14ba4:	movt	r3, #3
   14ba8:	b	14a0c <__assert_fail@plt+0x3260>
   14bac:	mov	r1, r0
   14bb0:	mov	r0, #0
   14bb4:	b	149fc <__assert_fail@plt+0x3250>
   14bb8:	mov	r2, r1
   14bbc:	mov	r1, r0
   14bc0:	mov	r0, #0
   14bc4:	b	14ba0 <__assert_fail@plt+0x33f4>
   14bc8:	push	{r4, r5, r6, sl, fp, lr}
   14bcc:	add	fp, sp, #16
   14bd0:	sub	sp, sp, #48	; 0x30
   14bd4:	mov	r4, r2
   14bd8:	mov	r5, r0
   14bdc:	mov	r6, sp
   14be0:	mov	r0, r6
   14be4:	bl	14c04 <__assert_fail@plt+0x3458>
   14be8:	mov	r0, r5
   14bec:	mov	r1, r4
   14bf0:	mvn	r2, #0
   14bf4:	mov	r3, r6
   14bf8:	bl	14a0c <__assert_fail@plt+0x3260>
   14bfc:	sub	sp, fp, #16
   14c00:	pop	{r4, r5, r6, sl, fp, pc}
   14c04:	vmov.i32	q8, #0	; 0x00000000
   14c08:	mov	r2, #32
   14c0c:	mov	r3, r0
   14c10:	vst1.32	{d16-d17}, [r3], r2
   14c14:	vst1.32	{d16-d17}, [r3]
   14c18:	add	r2, r0, #16
   14c1c:	vst1.32	{d16-d17}, [r2]
   14c20:	cmp	r1, #10
   14c24:	strne	r1, [r0]
   14c28:	bxne	lr
   14c2c:	push	{fp, lr}
   14c30:	mov	fp, sp
   14c34:	bl	11788 <abort@plt>
   14c38:	push	{r4, r5, r6, r7, fp, lr}
   14c3c:	add	fp, sp, #16
   14c40:	sub	sp, sp, #48	; 0x30
   14c44:	mov	r4, r3
   14c48:	mov	r5, r2
   14c4c:	mov	r6, r0
   14c50:	mov	r7, sp
   14c54:	mov	r0, r7
   14c58:	bl	14c04 <__assert_fail@plt+0x3458>
   14c5c:	mov	r0, r6
   14c60:	mov	r1, r5
   14c64:	mov	r2, r4
   14c68:	mov	r3, r7
   14c6c:	bl	14a0c <__assert_fail@plt+0x3260>
   14c70:	sub	sp, fp, #16
   14c74:	pop	{r4, r5, r6, r7, fp, pc}
   14c78:	mov	r2, r1
   14c7c:	mov	r1, r0
   14c80:	mov	r0, #0
   14c84:	b	14bc8 <__assert_fail@plt+0x341c>
   14c88:	mov	r3, r2
   14c8c:	mov	r2, r1
   14c90:	mov	r1, r0
   14c94:	mov	r0, #0
   14c98:	b	14c38 <__assert_fail@plt+0x348c>
   14c9c:	push	{r4, r5, r6, sl, fp, lr}
   14ca0:	add	fp, sp, #16
   14ca4:	sub	sp, sp, #48	; 0x30
   14ca8:	mov	r4, r1
   14cac:	mov	r5, r0
   14cb0:	mov	r0, #32
   14cb4:	movw	r1, #20936	; 0x51c8
   14cb8:	movt	r1, #3
   14cbc:	add	r3, r1, #16
   14cc0:	vld1.64	{d16-d17}, [r1], r0
   14cc4:	mov	r6, sp
   14cc8:	vld1.64	{d18-d19}, [r3]
   14ccc:	add	r3, r6, #16
   14cd0:	vld1.64	{d20-d21}, [r1]
   14cd4:	vst1.64	{d18-d19}, [r3]
   14cd8:	mov	r1, r6
   14cdc:	vst1.64	{d16-d17}, [r1], r0
   14ce0:	vst1.64	{d20-d21}, [r1]
   14ce4:	mov	r0, r6
   14ce8:	mov	r1, r2
   14cec:	mov	r2, #1
   14cf0:	bl	13764 <__assert_fail@plt+0x1fb8>
   14cf4:	mov	r0, #0
   14cf8:	mov	r1, r5
   14cfc:	mov	r2, r4
   14d00:	mov	r3, r6
   14d04:	bl	14a0c <__assert_fail@plt+0x3260>
   14d08:	sub	sp, fp, #16
   14d0c:	pop	{r4, r5, r6, sl, fp, pc}
   14d10:	mov	r2, r1
   14d14:	mvn	r1, #0
   14d18:	b	14c9c <__assert_fail@plt+0x34f0>
   14d1c:	mov	r1, #58	; 0x3a
   14d20:	b	14d10 <__assert_fail@plt+0x3564>
   14d24:	mov	r2, #58	; 0x3a
   14d28:	b	14c9c <__assert_fail@plt+0x34f0>
   14d2c:	push	{r4, r5, r6, sl, fp, lr}
   14d30:	add	fp, sp, #16
   14d34:	sub	sp, sp, #48	; 0x30
   14d38:	mov	r4, r2
   14d3c:	mov	r5, r0
   14d40:	mov	r6, sp
   14d44:	mov	r0, r6
   14d48:	bl	14c04 <__assert_fail@plt+0x3458>
   14d4c:	mov	r0, r6
   14d50:	mov	r1, #58	; 0x3a
   14d54:	mov	r2, #1
   14d58:	bl	13764 <__assert_fail@plt+0x1fb8>
   14d5c:	mov	r0, r5
   14d60:	mov	r1, r4
   14d64:	mvn	r2, #0
   14d68:	mov	r3, r6
   14d6c:	bl	14a0c <__assert_fail@plt+0x3260>
   14d70:	sub	sp, fp, #16
   14d74:	pop	{r4, r5, r6, sl, fp, pc}
   14d78:	push	{fp, lr}
   14d7c:	mov	fp, sp
   14d80:	sub	sp, sp, #8
   14d84:	mvn	ip, #0
   14d88:	str	ip, [sp]
   14d8c:	bl	14d98 <__assert_fail@plt+0x35ec>
   14d90:	mov	sp, fp
   14d94:	pop	{fp, pc}
   14d98:	push	{r4, r5, r6, r7, fp, lr}
   14d9c:	add	fp, sp, #16
   14da0:	sub	sp, sp, #48	; 0x30
   14da4:	mov	r7, r3
   14da8:	mov	r5, r0
   14dac:	mov	r0, #32
   14db0:	movw	r3, #20936	; 0x51c8
   14db4:	movt	r3, #3
   14db8:	add	r4, r3, #16
   14dbc:	vld1.64	{d16-d17}, [r3], r0
   14dc0:	mov	r6, sp
   14dc4:	vld1.64	{d18-d19}, [r4]
   14dc8:	add	r4, r6, #16
   14dcc:	vld1.64	{d20-d21}, [r3]
   14dd0:	vst1.64	{d18-d19}, [r4]
   14dd4:	mov	r3, r6
   14dd8:	vst1.64	{d16-d17}, [r3], r0
   14ddc:	vst1.64	{d20-d21}, [r3]
   14de0:	mov	r0, r6
   14de4:	bl	137bc <__assert_fail@plt+0x2010>
   14de8:	ldr	r2, [fp, #8]
   14dec:	mov	r0, r5
   14df0:	mov	r1, r7
   14df4:	mov	r3, r6
   14df8:	bl	14a0c <__assert_fail@plt+0x3260>
   14dfc:	sub	sp, fp, #16
   14e00:	pop	{r4, r5, r6, r7, fp, pc}
   14e04:	mov	r3, r2
   14e08:	mov	r2, r1
   14e0c:	mov	r1, r0
   14e10:	mov	r0, #0
   14e14:	b	14d78 <__assert_fail@plt+0x35cc>
   14e18:	push	{fp, lr}
   14e1c:	mov	fp, sp
   14e20:	sub	sp, sp, #8
   14e24:	mov	ip, r2
   14e28:	mov	r2, r1
   14e2c:	mov	r1, r0
   14e30:	str	r3, [sp]
   14e34:	mov	r0, #0
   14e38:	mov	r3, ip
   14e3c:	bl	14d98 <__assert_fail@plt+0x35ec>
   14e40:	mov	sp, fp
   14e44:	pop	{fp, pc}
   14e48:	movw	r3, #20840	; 0x5168
   14e4c:	movt	r3, #3
   14e50:	b	14a0c <__assert_fail@plt+0x3260>
   14e54:	mov	r2, r1
   14e58:	mov	r1, r0
   14e5c:	mov	r0, #0
   14e60:	b	14e48 <__assert_fail@plt+0x369c>
   14e64:	mvn	r2, #0
   14e68:	b	14e48 <__assert_fail@plt+0x369c>
   14e6c:	mov	r1, r0
   14e70:	mov	r0, #0
   14e74:	b	14e64 <__assert_fail@plt+0x36b8>
   14e78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e7c:	add	fp, sp, #24
   14e80:	sub	sp, sp, #16
   14e84:	mov	r4, r1
   14e88:	mov	r5, r0
   14e8c:	mov	r7, #0
   14e90:	mov	r0, #0
   14e94:	mov	r1, r5
   14e98:	mov	r2, #5
   14e9c:	bl	11524 <dcgettext@plt>
   14ea0:	cmp	r0, r5
   14ea4:	beq	14eb0 <__assert_fail@plt+0x3704>
   14ea8:	sub	sp, fp, #24
   14eac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14eb0:	bl	23158 <__assert_fail@plt+0x119ac>
   14eb4:	mov	r6, r0
   14eb8:	mov	r8, #56	; 0x38
   14ebc:	mov	r0, #45	; 0x2d
   14ec0:	stm	sp, {r0, r8}
   14ec4:	str	r7, [sp, #8]
   14ec8:	str	r7, [sp, #12]
   14ecc:	mov	r0, r6
   14ed0:	mov	r1, #85	; 0x55
   14ed4:	mov	r2, #84	; 0x54
   14ed8:	mov	r3, #70	; 0x46
   14edc:	bl	14f74 <__assert_fail@plt+0x37c8>
   14ee0:	cmp	r0, #0
   14ee4:	beq	14f00 <__assert_fail@plt+0x3754>
   14ee8:	ldrb	r1, [r5]
   14eec:	movw	r2, #16574	; 0x40be
   14ef0:	movt	r2, #2
   14ef4:	movw	r0, #16578	; 0x40c2
   14ef8:	movt	r0, #2
   14efc:	b	14f44 <__assert_fail@plt+0x3798>
   14f00:	mov	r0, #48	; 0x30
   14f04:	mov	r1, #51	; 0x33
   14f08:	str	r8, [sp]
   14f0c:	stmib	sp, {r0, r1}
   14f10:	str	r0, [sp, #12]
   14f14:	mov	r0, r6
   14f18:	mov	r1, #71	; 0x47
   14f1c:	mov	r2, #66	; 0x42
   14f20:	mov	r3, #49	; 0x31
   14f24:	bl	14f74 <__assert_fail@plt+0x37c8>
   14f28:	cmp	r0, #0
   14f2c:	beq	14f54 <__assert_fail@plt+0x37a8>
   14f30:	ldrb	r1, [r5]
   14f34:	movw	r2, #16582	; 0x40c6
   14f38:	movt	r2, #2
   14f3c:	movw	r0, #16586	; 0x40ca
   14f40:	movt	r0, #2
   14f44:	cmp	r1, #96	; 0x60
   14f48:	moveq	r0, r2
   14f4c:	sub	sp, fp, #24
   14f50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f54:	movw	r1, #16570	; 0x40ba
   14f58:	movt	r1, #2
   14f5c:	movw	r0, #16244	; 0x3f74
   14f60:	movt	r0, #2
   14f64:	cmp	r4, #9
   14f68:	moveq	r0, r1
   14f6c:	sub	sp, fp, #24
   14f70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f74:	push	{r4, r5, r6, r7, fp, lr}
   14f78:	add	fp, sp, #16
   14f7c:	sub	sp, sp, #16
   14f80:	mov	r4, r3
   14f84:	mov	r5, r2
   14f88:	mov	r7, r1
   14f8c:	mov	r6, r0
   14f90:	mov	r0, r1
   14f94:	bl	22da4 <__assert_fail@plt+0x115f8>
   14f98:	ldrb	r1, [r6]
   14f9c:	cmp	r0, #0
   14fa0:	andne	r1, r1, #223	; 0xdf
   14fa4:	mov	r0, #0
   14fa8:	cmp	r1, r7
   14fac:	bne	14fec <__assert_fail@plt+0x3840>
   14fb0:	cmp	r7, #0
   14fb4:	moveq	r0, #1
   14fb8:	subeq	sp, fp, #16
   14fbc:	popeq	{r4, r5, r6, r7, fp, pc}
   14fc0:	ldr	r0, [fp, #20]
   14fc4:	ldr	r1, [fp, #16]
   14fc8:	ldr	r2, [fp, #12]
   14fcc:	ldr	r3, [fp, #8]
   14fd0:	str	r2, [sp]
   14fd4:	str	r1, [sp, #4]
   14fd8:	str	r0, [sp, #8]
   14fdc:	mov	r0, r6
   14fe0:	mov	r1, r5
   14fe4:	mov	r2, r4
   14fe8:	bl	14ff4 <__assert_fail@plt+0x3848>
   14fec:	sub	sp, fp, #16
   14ff0:	pop	{r4, r5, r6, r7, fp, pc}
   14ff4:	push	{r4, r5, r6, r7, fp, lr}
   14ff8:	add	fp, sp, #16
   14ffc:	sub	sp, sp, #8
   15000:	mov	r4, r3
   15004:	mov	r5, r2
   15008:	mov	r7, r1
   1500c:	mov	r6, r0
   15010:	mov	r0, r1
   15014:	bl	22da4 <__assert_fail@plt+0x115f8>
   15018:	ldrb	r1, [r6, #1]
   1501c:	cmp	r0, #0
   15020:	andne	r1, r1, #223	; 0xdf
   15024:	mov	r0, #0
   15028:	cmp	r1, r7
   1502c:	bne	15064 <__assert_fail@plt+0x38b8>
   15030:	cmp	r7, #0
   15034:	moveq	r0, #1
   15038:	subeq	sp, fp, #16
   1503c:	popeq	{r4, r5, r6, r7, fp, pc}
   15040:	ldr	r0, [fp, #16]
   15044:	ldr	r1, [fp, #12]
   15048:	ldr	r3, [fp, #8]
   1504c:	str	r1, [sp]
   15050:	str	r0, [sp, #4]
   15054:	mov	r0, r6
   15058:	mov	r1, r5
   1505c:	mov	r2, r4
   15060:	bl	1506c <__assert_fail@plt+0x38c0>
   15064:	sub	sp, fp, #16
   15068:	pop	{r4, r5, r6, r7, fp, pc}
   1506c:	push	{r4, r5, r6, r7, fp, lr}
   15070:	add	fp, sp, #16
   15074:	sub	sp, sp, #8
   15078:	mov	r4, r3
   1507c:	mov	r5, r2
   15080:	mov	r7, r1
   15084:	mov	r6, r0
   15088:	mov	r0, r1
   1508c:	bl	22da4 <__assert_fail@plt+0x115f8>
   15090:	ldrb	r1, [r6, #2]
   15094:	cmp	r0, #0
   15098:	andne	r1, r1, #223	; 0xdf
   1509c:	mov	r0, #0
   150a0:	cmp	r1, r7
   150a4:	bne	150d4 <__assert_fail@plt+0x3928>
   150a8:	cmp	r7, #0
   150ac:	moveq	r0, #1
   150b0:	subeq	sp, fp, #16
   150b4:	popeq	{r4, r5, r6, r7, fp, pc}
   150b8:	ldr	r0, [fp, #12]
   150bc:	ldr	r3, [fp, #8]
   150c0:	str	r0, [sp]
   150c4:	mov	r0, r6
   150c8:	mov	r1, r5
   150cc:	mov	r2, r4
   150d0:	bl	150dc <__assert_fail@plt+0x3930>
   150d4:	sub	sp, fp, #16
   150d8:	pop	{r4, r5, r6, r7, fp, pc}
   150dc:	push	{r4, r5, r6, r7, fp, lr}
   150e0:	add	fp, sp, #16
   150e4:	mov	r4, r3
   150e8:	mov	r5, r2
   150ec:	mov	r7, r1
   150f0:	mov	r6, r0
   150f4:	mov	r0, r1
   150f8:	bl	22da4 <__assert_fail@plt+0x115f8>
   150fc:	ldrb	r1, [r6, #3]
   15100:	ldr	r3, [fp, #8]
   15104:	cmp	r0, #0
   15108:	andne	r1, r1, #223	; 0xdf
   1510c:	mov	r0, #0
   15110:	cmp	r1, r7
   15114:	popne	{r4, r5, r6, r7, fp, pc}
   15118:	cmp	r7, #0
   1511c:	beq	15134 <__assert_fail@plt+0x3988>
   15120:	mov	r0, r6
   15124:	mov	r1, r5
   15128:	mov	r2, r4
   1512c:	pop	{r4, r5, r6, r7, fp, lr}
   15130:	b	1513c <__assert_fail@plt+0x3990>
   15134:	mov	r0, #1
   15138:	pop	{r4, r5, r6, r7, fp, pc}
   1513c:	push	{r4, r5, r6, r7, fp, lr}
   15140:	add	fp, sp, #16
   15144:	mov	r4, r3
   15148:	mov	r5, r2
   1514c:	mov	r7, r1
   15150:	mov	r6, r0
   15154:	mov	r0, r1
   15158:	bl	22da4 <__assert_fail@plt+0x115f8>
   1515c:	ldrb	r1, [r6, #4]
   15160:	cmp	r0, #0
   15164:	andne	r1, r1, #223	; 0xdf
   15168:	mov	r0, #0
   1516c:	cmp	r1, r7
   15170:	popne	{r4, r5, r6, r7, fp, pc}
   15174:	cmp	r7, #0
   15178:	beq	15190 <__assert_fail@plt+0x39e4>
   1517c:	mov	r0, r6
   15180:	mov	r1, r5
   15184:	mov	r2, r4
   15188:	pop	{r4, r5, r6, r7, fp, lr}
   1518c:	b	15198 <__assert_fail@plt+0x39ec>
   15190:	mov	r0, #1
   15194:	pop	{r4, r5, r6, r7, fp, pc}
   15198:	push	{r4, r5, r6, sl, fp, lr}
   1519c:	add	fp, sp, #16
   151a0:	mov	r4, r2
   151a4:	mov	r6, r1
   151a8:	mov	r5, r0
   151ac:	mov	r0, r1
   151b0:	bl	22da4 <__assert_fail@plt+0x115f8>
   151b4:	ldrb	r1, [r5, #5]
   151b8:	cmp	r0, #0
   151bc:	andne	r1, r1, #223	; 0xdf
   151c0:	mov	r0, #0
   151c4:	cmp	r1, r6
   151c8:	popne	{r4, r5, r6, sl, fp, pc}
   151cc:	cmp	r6, #0
   151d0:	beq	151e4 <__assert_fail@plt+0x3a38>
   151d4:	mov	r0, r5
   151d8:	mov	r1, r4
   151dc:	pop	{r4, r5, r6, sl, fp, lr}
   151e0:	b	151ec <__assert_fail@plt+0x3a40>
   151e4:	mov	r0, #1
   151e8:	pop	{r4, r5, r6, sl, fp, pc}
   151ec:	push	{r4, r5, fp, lr}
   151f0:	add	fp, sp, #8
   151f4:	mov	r5, r1
   151f8:	mov	r4, r0
   151fc:	mov	r0, r1
   15200:	bl	22da4 <__assert_fail@plt+0x115f8>
   15204:	ldrb	r1, [r4, #6]
   15208:	cmp	r0, #0
   1520c:	andne	r1, r1, #223	; 0xdf
   15210:	mov	r0, #0
   15214:	cmp	r1, r5
   15218:	popne	{r4, r5, fp, pc}
   1521c:	cmp	r5, #0
   15220:	beq	15230 <__assert_fail@plt+0x3a84>
   15224:	mov	r0, r4
   15228:	pop	{r4, r5, fp, lr}
   1522c:	b	15238 <__assert_fail@plt+0x3a8c>
   15230:	mov	r0, #1
   15234:	pop	{r4, r5, fp, pc}
   15238:	push	{r4, sl, fp, lr}
   1523c:	add	fp, sp, #8
   15240:	mov	r4, r0
   15244:	mov	r0, #0
   15248:	bl	22da4 <__assert_fail@plt+0x115f8>
   1524c:	ldrb	r1, [r4, #7]
   15250:	cmp	r0, #0
   15254:	beq	1526c <__assert_fail@plt+0x3ac0>
   15258:	tst	r1, #223	; 0xdf
   1525c:	moveq	r0, #1
   15260:	popeq	{r4, sl, fp, pc}
   15264:	mov	r0, #0
   15268:	pop	{r4, sl, fp, pc}
   1526c:	cmp	r1, #0
   15270:	moveq	r0, #1
   15274:	popeq	{r4, sl, fp, pc}
   15278:	mov	r0, #0
   1527c:	pop	{r4, sl, fp, pc}
   15280:	push	{fp, lr}
   15284:	mov	fp, sp
   15288:	mov	ip, r1
   1528c:	mov	lr, r0
   15290:	movw	r0, #21240	; 0x52f8
   15294:	movt	r0, #3
   15298:	ldr	r3, [r0]
   1529c:	mov	r0, #16
   152a0:	and	r0, r0, r3, lsr #21
   152a4:	ldrb	r1, [r2, #28]
   152a8:	and	r1, r1, #111	; 0x6f
   152ac:	orr	r0, r1, r0
   152b0:	orr	r0, r0, #128	; 0x80
   152b4:	strb	r0, [r2, #28]
   152b8:	mov	r0, r2
   152bc:	mov	r1, lr
   152c0:	mov	r2, ip
   152c4:	bl	152fc <__assert_fail@plt+0x3b50>
   152c8:	cmp	r0, #0
   152cc:	moveq	r0, #0
   152d0:	popeq	{fp, pc}
   152d4:	movw	r1, #17064	; 0x42a8
   152d8:	movt	r1, #2
   152dc:	ldr	r0, [r1, r0, lsl #2]
   152e0:	movw	r1, #16680	; 0x4128
   152e4:	movt	r1, #2
   152e8:	add	r1, r1, r0
   152ec:	mov	r0, #0
   152f0:	mov	r2, #5
   152f4:	pop	{fp, lr}
   152f8:	b	11524 <dcgettext@plt>
   152fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15300:	add	fp, sp, #24
   15304:	sub	sp, sp, #96	; 0x60
   15308:	mov	r6, r3
   1530c:	mov	r7, r2
   15310:	mov	r8, r1
   15314:	mov	r4, r0
   15318:	mov	r0, #0
   1531c:	str	r0, [fp, #-28]	; 0xffffffe4
   15320:	str	r0, [r4, #8]
   15324:	str	r3, [r4, #12]
   15328:	str	r0, [r4, #24]
   1532c:	ldrb	r0, [r4, #28]
   15330:	and	r0, r0, #144	; 0x90
   15334:	strb	r0, [r4, #28]
   15338:	ldr	r5, [r4]
   1533c:	ldr	r0, [r4, #4]
   15340:	cmp	r0, #159	; 0x9f
   15344:	bls	15498 <__assert_fail@plt+0x3cec>
   15348:	mov	r0, #160	; 0xa0
   1534c:	str	r0, [r4, #8]
   15350:	mov	r0, r5
   15354:	mov	r1, r7
   15358:	bl	16a10 <__assert_fail@plt+0x5264>
   1535c:	str	r0, [fp, #-28]	; 0xffffffe4
   15360:	cmp	r0, #0
   15364:	bne	15398 <__assert_fail@plt+0x3bec>
   15368:	movw	r1, #0
   1536c:	movt	r1, #0
   15370:	movw	r2, #0
   15374:	movt	r2, #0
   15378:	orrs	r1, r2, r1
   1537c:	beq	15398 <__assert_fail@plt+0x3bec>
   15380:	add	r0, r5, #136	; 0x88
   15384:	mov	r1, #0
   15388:	bl	114f4 <pthread_mutex_init@plt>
   1538c:	cmp	r0, #0
   15390:	bne	154c4 <__assert_fail@plt+0x3d18>
   15394:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15398:	cmp	r0, #0
   1539c:	bne	154cc <__assert_fail@plt+0x3d20>
   153a0:	ldr	r3, [r4, #20]
   153a4:	str	r5, [sp, #4]
   153a8:	ubfx	r0, r6, #22, #1
   153ac:	str	r0, [sp]
   153b0:	add	r0, sp, #8
   153b4:	mov	r1, r8
   153b8:	mov	r2, r7
   153bc:	bl	16bbc <__assert_fail@plt+0x5410>
   153c0:	str	r0, [fp, #-28]	; 0xffffffe4
   153c4:	cmp	r0, #0
   153c8:	bne	15464 <__assert_fail@plt+0x3cb8>
   153cc:	mov	r0, #0
   153d0:	str	r0, [r4, #24]
   153d4:	add	r0, sp, #8
   153d8:	sub	r3, fp, #28
   153dc:	mov	r1, r4
   153e0:	mov	r2, r6
   153e4:	bl	16d90 <__assert_fail@plt+0x55e4>
   153e8:	str	r0, [r5, #52]	; 0x34
   153ec:	cmp	r0, #0
   153f0:	beq	15464 <__assert_fail@plt+0x3cb8>
   153f4:	mov	r0, r4
   153f8:	bl	16e64 <__assert_fail@plt+0x56b8>
   153fc:	str	r0, [fp, #-28]	; 0xffffffe4
   15400:	cmp	r0, #0
   15404:	bne	15464 <__assert_fail@plt+0x3cb8>
   15408:	ands	r0, r6, #4194304	; 0x400000
   1540c:	bne	15430 <__assert_fail@plt+0x3c84>
   15410:	ldrb	r0, [r5, #88]	; 0x58
   15414:	ands	r0, r0, #4
   15418:	beq	15430 <__assert_fail@plt+0x3c84>
   1541c:	ldr	r0, [r4, #20]
   15420:	cmp	r0, #0
   15424:	bne	15430 <__assert_fail@plt+0x3c84>
   15428:	mov	r0, r5
   1542c:	bl	17080 <__assert_fail@plt+0x58d4>
   15430:	mov	r0, r5
   15434:	bl	1721c <__assert_fail@plt+0x5a70>
   15438:	str	r0, [fp, #-28]	; 0xffffffe4
   1543c:	mov	r0, r4
   15440:	bl	16d0c <__assert_fail@plt+0x5560>
   15444:	add	r0, sp, #8
   15448:	bl	16d5c <__assert_fail@plt+0x55b0>
   1544c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15450:	cmp	r0, #0
   15454:	bne	15474 <__assert_fail@plt+0x3cc8>
   15458:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1545c:	sub	sp, fp, #24
   15460:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15464:	mov	r0, r4
   15468:	bl	16d0c <__assert_fail@plt+0x5560>
   1546c:	add	r0, sp, #8
   15470:	bl	16d5c <__assert_fail@plt+0x55b0>
   15474:	movw	r0, #0
   15478:	movt	r0, #0
   1547c:	movw	r1, #0
   15480:	movt	r1, #0
   15484:	orrs	r0, r1, r0
   15488:	beq	154cc <__assert_fail@plt+0x3d20>
   1548c:	add	r0, r5, #136	; 0x88
   15490:	bl	1147c <pthread_mutex_destroy@plt>
   15494:	b	154cc <__assert_fail@plt+0x3d20>
   15498:	mov	r9, #160	; 0xa0
   1549c:	mov	r0, r5
   154a0:	mov	r1, #160	; 0xa0
   154a4:	bl	22a9c <__assert_fail@plt+0x112f0>
   154a8:	cmp	r0, #0
   154ac:	moveq	r0, #12
   154b0:	subeq	sp, fp, #24
   154b4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   154b8:	mov	r5, r0
   154bc:	stm	r4, {r0, r9}
   154c0:	b	15348 <__assert_fail@plt+0x3b9c>
   154c4:	mov	r0, #12
   154c8:	str	r0, [fp, #-28]	; 0xffffffe4
   154cc:	mov	r0, r5
   154d0:	bl	15b30 <__assert_fail@plt+0x4384>
   154d4:	mov	r0, #0
   154d8:	str	r0, [r4]
   154dc:	str	r0, [r4, #4]
   154e0:	b	15458 <__assert_fail@plt+0x3cac>
   154e4:	movw	r2, #21240	; 0x52f8
   154e8:	movt	r2, #3
   154ec:	ldr	r1, [r2]
   154f0:	str	r0, [r2]
   154f4:	mov	r0, r1
   154f8:	bx	lr
   154fc:	push	{r4, r5, r6, sl, fp, lr}
   15500:	add	fp, sp, #16
   15504:	mov	r4, r0
   15508:	ldr	r6, [r0]
   1550c:	ldr	r5, [r0, #16]
   15510:	mov	r0, r5
   15514:	mov	r1, #0
   15518:	mov	r2, #256	; 0x100
   1551c:	bl	116b0 <memset@plt>
   15520:	ldr	r1, [r6, #36]	; 0x24
   15524:	mov	r0, r4
   15528:	mov	r2, r5
   1552c:	bl	15598 <__assert_fail@plt+0x3dec>
   15530:	ldr	r0, [r6, #36]	; 0x24
   15534:	ldr	r1, [r6, #40]	; 0x28
   15538:	cmp	r0, r1
   1553c:	beq	1554c <__assert_fail@plt+0x3da0>
   15540:	mov	r0, r4
   15544:	mov	r2, r5
   15548:	bl	15598 <__assert_fail@plt+0x3dec>
   1554c:	ldr	r0, [r6, #36]	; 0x24
   15550:	ldr	r1, [r6, #44]	; 0x2c
   15554:	cmp	r0, r1
   15558:	beq	15568 <__assert_fail@plt+0x3dbc>
   1555c:	mov	r0, r4
   15560:	mov	r2, r5
   15564:	bl	15598 <__assert_fail@plt+0x3dec>
   15568:	ldr	r0, [r6, #36]	; 0x24
   1556c:	ldr	r1, [r6, #48]	; 0x30
   15570:	cmp	r0, r1
   15574:	beq	15584 <__assert_fail@plt+0x3dd8>
   15578:	mov	r0, r4
   1557c:	mov	r2, r5
   15580:	bl	15598 <__assert_fail@plt+0x3dec>
   15584:	ldrb	r0, [r4, #28]
   15588:	orr	r0, r0, #8
   1558c:	strb	r0, [r4, #28]
   15590:	mov	r0, #0
   15594:	pop	{r4, r5, r6, sl, fp, pc}
   15598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1559c:	add	fp, sp, #28
   155a0:	sub	sp, sp, #308	; 0x134
   155a4:	str	r2, [sp, #28]
   155a8:	str	r0, [sp, #16]
   155ac:	ldr	r8, [r0]
   155b0:	ldr	r0, [r8, #92]	; 0x5c
   155b4:	mov	sl, #0
   155b8:	cmp	r0, #1
   155bc:	ldreq	r0, [sp, #16]
   155c0:	ldrbeq	r0, [r0, #14]
   155c4:	ubfxeq	sl, r0, #6, #1
   155c8:	ldr	r0, [r1, #8]
   155cc:	cmp	r0, #1
   155d0:	blt	1590c <__assert_fail@plt+0x4160>
   155d4:	add	r0, sp, #32
   155d8:	add	r0, r0, #1
   155dc:	str	r0, [sp]
   155e0:	mov	r4, #1
   155e4:	movw	r0, #1
   155e8:	movt	r0, #32
   155ec:	add	r0, r0, #254	; 0xfe
   155f0:	str	r0, [sp, #4]
   155f4:	mov	r2, #0
   155f8:	str	r1, [sp, #8]
   155fc:	str	r8, [sp, #20]
   15600:	ldr	r0, [r1, #12]
   15604:	str	r2, [sp, #12]
   15608:	ldr	r9, [r0, r2, lsl #2]
   1560c:	ldr	r0, [r8]
   15610:	add	r1, r0, r9, lsl #3
   15614:	ldrb	r5, [r1, #4]
   15618:	cmp	r5, #1
   1561c:	beq	156a4 <__assert_fail@plt+0x3ef8>
   15620:	cmp	r5, #6
   15624:	beq	157a4 <__assert_fail@plt+0x3ff8>
   15628:	cmp	r5, #3
   1562c:	bne	15828 <__assert_fail@plt+0x407c>
   15630:	mov	r7, #0
   15634:	ldr	r5, [sp, #28]
   15638:	mov	r6, #0
   1563c:	str	r9, [sp, #24]
   15640:	ldr	r0, [r8]
   15644:	ldr	r0, [r0, r9, lsl #3]
   15648:	ldr	r9, [r0, r6, lsl #2]
   1564c:	mov	r8, #0
   15650:	b	15668 <__assert_fail@plt+0x3ebc>
   15654:	add	r0, r7, r8
   15658:	bl	114e8 <tolower@plt>
   1565c:	ldr	r1, [sp, #28]
   15660:	strb	r4, [r1, r0]
   15664:	b	15678 <__assert_fail@plt+0x3ecc>
   15668:	tst	r9, r4, lsl r8
   1566c:	strbne	r4, [r5, r8]
   15670:	cmpne	sl, #0
   15674:	bne	15654 <__assert_fail@plt+0x3ea8>
   15678:	add	r8, r8, #1
   1567c:	cmp	r8, #32
   15680:	bne	15668 <__assert_fail@plt+0x3ebc>
   15684:	add	r5, r5, #32
   15688:	add	r6, r6, #1
   1568c:	add	r7, r7, #32
   15690:	cmp	r6, #8
   15694:	ldr	r8, [sp, #20]
   15698:	ldr	r9, [sp, #24]
   1569c:	bne	15640 <__assert_fail@plt+0x3e94>
   156a0:	b	158f4 <__assert_fail@plt+0x4148>
   156a4:	ldrb	r0, [r0, r9, lsl #3]
   156a8:	ldr	r1, [sp, #28]
   156ac:	strb	r4, [r1, r0]
   156b0:	cmp	sl, #0
   156b4:	beq	156c4 <__assert_fail@plt+0x3f18>
   156b8:	bl	114e8 <tolower@plt>
   156bc:	ldr	r1, [sp, #28]
   156c0:	strb	r4, [r1, r0]
   156c4:	ldr	r0, [sp, #16]
   156c8:	ldrb	r0, [r0, #14]
   156cc:	tst	r0, #64	; 0x40
   156d0:	beq	158f4 <__assert_fail@plt+0x4148>
   156d4:	ldr	r0, [r8, #92]	; 0x5c
   156d8:	cmp	r0, #2
   156dc:	blt	158f4 <__assert_fail@plt+0x4148>
   156e0:	ldr	r0, [r8]
   156e4:	ldrb	r0, [r0, r9, lsl #3]
   156e8:	strb	r0, [sp, #32]
   156ec:	ldr	r0, [r8, #8]
   156f0:	add	r1, r9, #1
   156f4:	cmp	r1, r0
   156f8:	ldr	r0, [sp]
   156fc:	add	r5, sp, #32
   15700:	bcs	1574c <__assert_fail@plt+0x3fa0>
   15704:	ldr	r0, [sp]
   15708:	ldr	r1, [r8]
   1570c:	add	r1, r1, r9, lsl #3
   15710:	ldr	r2, [r1, #12]
   15714:	ldr	r3, [sp, #4]
   15718:	and	r2, r2, r3
   1571c:	movw	r3, #1
   15720:	movt	r3, #32
   15724:	cmp	r2, r3
   15728:	bne	1574c <__assert_fail@plt+0x3fa0>
   1572c:	ldrb	r1, [r1, #8]
   15730:	strb	r1, [r0], #1
   15734:	add	r1, r9, #1
   15738:	ldr	r2, [r8, #8]
   1573c:	add	r3, r9, #2
   15740:	cmp	r3, r2
   15744:	mov	r9, r1
   15748:	bcc	15708 <__assert_fail@plt+0x3f5c>
   1574c:	mov	r1, #0
   15750:	str	r1, [fp, #-44]	; 0xffffffd4
   15754:	str	r1, [fp, #-48]	; 0xffffffd0
   15758:	sub	r6, r0, r5
   1575c:	sub	r0, fp, #36	; 0x24
   15760:	mov	r1, r5
   15764:	mov	r2, r6
   15768:	sub	r3, fp, #48	; 0x30
   1576c:	bl	23234 <__assert_fail@plt+0x11a88>
   15770:	cmp	r0, r6
   15774:	bne	158f4 <__assert_fail@plt+0x4148>
   15778:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1577c:	bl	11500 <towlower@plt>
   15780:	mov	r1, r0
   15784:	mov	r0, r5
   15788:	sub	r2, fp, #48	; 0x30
   1578c:	bl	11440 <wcrtomb@plt>
   15790:	cmn	r0, #1
   15794:	ldrbne	r0, [sp, #32]
   15798:	ldrne	r1, [sp, #28]
   1579c:	strbne	r4, [r1, r0]
   157a0:	b	158f4 <__assert_fail@plt+0x4148>
   157a4:	ldr	r6, [r0, r9, lsl #3]
   157a8:	ldr	r0, [r8, #92]	; 0x5c
   157ac:	cmp	r0, #2
   157b0:	blt	15840 <__assert_fail@plt+0x4094>
   157b4:	ldr	r0, [r6, #36]	; 0x24
   157b8:	cmp	r0, #0
   157bc:	bne	157d4 <__assert_fail@plt+0x4028>
   157c0:	ldrb	r0, [r6, #16]
   157c4:	tst	r0, #1
   157c8:	ldreq	r0, [r6, #32]
   157cc:	cmpeq	r0, #0
   157d0:	beq	15840 <__assert_fail@plt+0x4094>
   157d4:	mov	r0, #0
   157d8:	strb	r0, [fp, #-48]	; 0xffffffd0
   157dc:	add	r5, sp, #32
   157e0:	mov	r0, #0
   157e4:	str	r0, [sp, #36]	; 0x24
   157e8:	str	r0, [sp, #32]
   157ec:	mov	r0, #0
   157f0:	sub	r1, fp, #48	; 0x30
   157f4:	mov	r2, #1
   157f8:	mov	r3, r5
   157fc:	bl	23234 <__assert_fail@plt+0x11a88>
   15800:	cmn	r0, #2
   15804:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   15808:	ldreq	r1, [sp, #28]
   1580c:	strbeq	r4, [r1, r0]
   15810:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   15814:	add	r0, r0, #1
   15818:	strb	r0, [fp, #-48]	; 0xffffffd0
   1581c:	tst	r0, #255	; 0xff
   15820:	bne	157e0 <__assert_fail@plt+0x4034>
   15824:	b	158f4 <__assert_fail@plt+0x4148>
   15828:	cmp	r5, #7
   1582c:	bhi	158f4 <__assert_fail@plt+0x4148>
   15830:	mov	r0, #164	; 0xa4
   15834:	tst	r0, r4, lsl r5
   15838:	beq	158f4 <__assert_fail@plt+0x4148>
   1583c:	b	15914 <__assert_fail@plt+0x4168>
   15840:	ldr	r0, [r6, #20]
   15844:	cmp	r0, #1
   15848:	blt	158f4 <__assert_fail@plt+0x4148>
   1584c:	mov	r9, #0
   15850:	mov	r0, #0
   15854:	str	r0, [fp, #-44]	; 0xffffffd4
   15858:	str	r0, [fp, #-48]	; 0xffffffd0
   1585c:	ldr	r0, [r6]
   15860:	ldr	r1, [r0, r9, lsl #2]
   15864:	add	r5, sp, #32
   15868:	mov	r0, r5
   1586c:	sub	r2, fp, #48	; 0x30
   15870:	bl	11440 <wcrtomb@plt>
   15874:	cmn	r0, #1
   15878:	beq	1589c <__assert_fail@plt+0x40f0>
   1587c:	ldrb	r0, [sp, #32]
   15880:	ldr	r1, [sp, #28]
   15884:	strb	r4, [r1, r0]
   15888:	cmp	sl, #0
   1588c:	beq	1589c <__assert_fail@plt+0x40f0>
   15890:	bl	114e8 <tolower@plt>
   15894:	ldr	r1, [sp, #28]
   15898:	strb	r4, [r1, r0]
   1589c:	ldr	r0, [sp, #16]
   158a0:	ldrb	r0, [r0, #14]
   158a4:	tst	r0, #64	; 0x40
   158a8:	beq	158e4 <__assert_fail@plt+0x4138>
   158ac:	ldr	r0, [r8, #92]	; 0x5c
   158b0:	cmp	r0, #2
   158b4:	blt	158e4 <__assert_fail@plt+0x4138>
   158b8:	ldr	r0, [r6]
   158bc:	ldr	r0, [r0, r9, lsl #2]
   158c0:	bl	11500 <towlower@plt>
   158c4:	mov	r1, r0
   158c8:	mov	r0, r5
   158cc:	sub	r2, fp, #48	; 0x30
   158d0:	bl	11440 <wcrtomb@plt>
   158d4:	cmn	r0, #1
   158d8:	ldrbne	r0, [sp, #32]
   158dc:	ldrne	r1, [sp, #28]
   158e0:	strbne	r4, [r1, r0]
   158e4:	add	r9, r9, #1
   158e8:	ldr	r0, [r6, #20]
   158ec:	cmp	r9, r0
   158f0:	blt	15850 <__assert_fail@plt+0x40a4>
   158f4:	ldr	r1, [sp, #8]
   158f8:	ldr	r0, [r1, #8]
   158fc:	ldr	r2, [sp, #12]
   15900:	add	r2, r2, #1
   15904:	cmp	r2, r0
   15908:	blt	15600 <__assert_fail@plt+0x3e54>
   1590c:	sub	sp, fp, #28
   15910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15914:	ldr	r0, [sp, #28]
   15918:	mov	r1, #1
   1591c:	mov	r2, #256	; 0x100
   15920:	bl	116b0 <memset@plt>
   15924:	cmp	r5, #2
   15928:	ldreq	r1, [sp, #16]
   1592c:	ldrbeq	r0, [r1, #28]
   15930:	orreq	r0, r0, #1
   15934:	strbeq	r0, [r1, #28]
   15938:	sub	sp, fp, #28
   1593c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15940:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15944:	add	fp, sp, #24
   15948:	mov	r7, r2
   1594c:	mov	r8, r1
   15950:	mov	r4, r0
   15954:	mov	r0, #0
   15958:	str	r0, [r4]
   1595c:	str	r0, [r4, #4]
   15960:	str	r0, [r4, #8]
   15964:	mov	r0, #256	; 0x100
   15968:	bl	22a6c <__assert_fail@plt+0x112c0>
   1596c:	str	r0, [r4, #16]
   15970:	cmp	r0, #0
   15974:	beq	15a24 <__assert_fail@plt+0x4278>
   15978:	movw	r0, #45820	; 0xb2fc
   1597c:	movt	r0, #3
   15980:	tst	r7, #1
   15984:	movweq	r0, #710	; 0x2c6
   15988:	movteq	r0, #257	; 0x101
   1598c:	and	r1, r7, #2
   15990:	orr	r5, r0, r1, lsl #21
   15994:	tst	r7, #4
   15998:	bne	159ac <__assert_fail@plt+0x4200>
   1599c:	ldrb	r0, [r4, #28]
   159a0:	and	r0, r0, #127	; 0x7f
   159a4:	strb	r0, [r4, #28]
   159a8:	b	159c8 <__assert_fail@plt+0x421c>
   159ac:	ldrb	r0, [r4, #28]
   159b0:	orr	r0, r0, #128	; 0x80
   159b4:	strb	r0, [r4, #28]
   159b8:	movw	r0, #45758	; 0xb2be
   159bc:	movt	r0, #323	; 0x143
   159c0:	and	r0, r5, r0
   159c4:	orr	r5, r0, #256	; 0x100
   159c8:	mov	r6, #0
   159cc:	str	r6, [r4, #20]
   159d0:	and	r0, r7, #8
   159d4:	ldrb	r1, [r4, #28]
   159d8:	and	r1, r1, #239	; 0xef
   159dc:	orr	r0, r1, r0, lsl #1
   159e0:	strb	r0, [r4, #28]
   159e4:	mov	r0, r8
   159e8:	bl	1165c <strlen@plt>
   159ec:	mov	r2, r0
   159f0:	mov	r0, r4
   159f4:	mov	r1, r8
   159f8:	mov	r3, r5
   159fc:	bl	152fc <__assert_fail@plt+0x3b50>
   15a00:	mov	r5, r0
   15a04:	cmp	r0, #16
   15a08:	movweq	r5, #8
   15a0c:	cmp	r5, #0
   15a10:	bne	15a30 <__assert_fail@plt+0x4284>
   15a14:	mov	r0, r4
   15a18:	bl	154fc <__assert_fail@plt+0x3d50>
   15a1c:	mov	r0, r6
   15a20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a24:	mov	r6, #12
   15a28:	mov	r0, r6
   15a2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a30:	ldr	r0, [r4, #16]
   15a34:	bl	1312c <__assert_fail@plt+0x1980>
   15a38:	str	r6, [r4, #16]
   15a3c:	mov	r0, r5
   15a40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a44:	push	{r4, r5, r6, r7, fp, lr}
   15a48:	add	fp, sp, #16
   15a4c:	cmp	r0, #17
   15a50:	bcs	15ac4 <__assert_fail@plt+0x4318>
   15a54:	mov	r5, r3
   15a58:	mov	r4, r2
   15a5c:	movw	r1, #17064	; 0x42a8
   15a60:	movt	r1, #2
   15a64:	ldr	r0, [r1, r0, lsl #2]
   15a68:	movw	r1, #16680	; 0x4128
   15a6c:	movt	r1, #2
   15a70:	add	r1, r1, r0
   15a74:	mov	r0, #0
   15a78:	mov	r2, #5
   15a7c:	bl	11524 <dcgettext@plt>
   15a80:	mov	r6, r0
   15a84:	bl	1165c <strlen@plt>
   15a88:	add	r7, r0, #1
   15a8c:	cmp	r5, #0
   15a90:	beq	15aac <__assert_fail@plt+0x4300>
   15a94:	cmp	r7, r5
   15a98:	mov	r2, r7
   15a9c:	bhi	15ab4 <__assert_fail@plt+0x4308>
   15aa0:	mov	r0, r4
   15aa4:	mov	r1, r6
   15aa8:	bl	114d0 <memcpy@plt>
   15aac:	mov	r0, r7
   15ab0:	pop	{r4, r5, r6, r7, fp, pc}
   15ab4:	sub	r2, r5, #1
   15ab8:	mov	r0, #0
   15abc:	strb	r0, [r4, r2]
   15ac0:	b	15aa0 <__assert_fail@plt+0x42f4>
   15ac4:	bl	11788 <abort@plt>
   15ac8:	push	{r4, r5, fp, lr}
   15acc:	add	fp, sp, #8
   15ad0:	mov	r4, r0
   15ad4:	ldr	r5, [r0]
   15ad8:	cmp	r5, #0
   15adc:	beq	15b08 <__assert_fail@plt+0x435c>
   15ae0:	movw	r0, #0
   15ae4:	movt	r0, #0
   15ae8:	movw	r1, #0
   15aec:	movt	r1, #0
   15af0:	orrs	r0, r1, r0
   15af4:	beq	15b00 <__assert_fail@plt+0x4354>
   15af8:	add	r0, r5, #136	; 0x88
   15afc:	bl	1147c <pthread_mutex_destroy@plt>
   15b00:	mov	r0, r5
   15b04:	bl	15b30 <__assert_fail@plt+0x4384>
   15b08:	mov	r5, #0
   15b0c:	str	r5, [r4]
   15b10:	str	r5, [r4, #4]
   15b14:	ldr	r0, [r4, #16]
   15b18:	bl	1312c <__assert_fail@plt+0x1980>
   15b1c:	str	r5, [r4, #16]
   15b20:	ldr	r0, [r4, #20]
   15b24:	bl	1312c <__assert_fail@plt+0x1980>
   15b28:	str	r5, [r4, #20]
   15b2c:	pop	{r4, r5, fp, pc}
   15b30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b34:	add	fp, sp, #24
   15b38:	mov	r8, r0
   15b3c:	ldr	r0, [r0]
   15b40:	cmp	r0, #0
   15b44:	ldrne	r0, [r8, #8]
   15b48:	cmpne	r0, #0
   15b4c:	beq	15b78 <__assert_fail@plt+0x43cc>
   15b50:	mov	r5, #0
   15b54:	mov	r6, #0
   15b58:	ldr	r0, [r8]
   15b5c:	add	r0, r0, r5
   15b60:	bl	16948 <__assert_fail@plt+0x519c>
   15b64:	add	r5, r5, #8
   15b68:	add	r6, r6, #1
   15b6c:	ldr	r0, [r8, #8]
   15b70:	cmp	r6, r0
   15b74:	bcc	15b58 <__assert_fail@plt+0x43ac>
   15b78:	ldr	r0, [r8, #12]
   15b7c:	bl	1312c <__assert_fail@plt+0x1980>
   15b80:	ldr	r0, [r8, #8]
   15b84:	cmp	r0, #0
   15b88:	beq	15be4 <__assert_fail@plt+0x4438>
   15b8c:	mov	r5, #0
   15b90:	mov	r6, #8
   15b94:	ldr	r0, [r8, #24]
   15b98:	cmp	r0, #0
   15b9c:	beq	15ba8 <__assert_fail@plt+0x43fc>
   15ba0:	ldr	r0, [r0, r6]
   15ba4:	bl	1312c <__assert_fail@plt+0x1980>
   15ba8:	ldr	r0, [r8, #28]
   15bac:	cmp	r0, #0
   15bb0:	beq	15bbc <__assert_fail@plt+0x4410>
   15bb4:	ldr	r0, [r0, r6]
   15bb8:	bl	1312c <__assert_fail@plt+0x1980>
   15bbc:	ldr	r0, [r8, #20]
   15bc0:	cmp	r0, #0
   15bc4:	beq	15bd0 <__assert_fail@plt+0x4424>
   15bc8:	ldr	r0, [r0, r6]
   15bcc:	bl	1312c <__assert_fail@plt+0x1980>
   15bd0:	add	r6, r6, #12
   15bd4:	add	r5, r5, #1
   15bd8:	ldr	r0, [r8, #8]
   15bdc:	cmp	r5, r0
   15be0:	bcc	15b94 <__assert_fail@plt+0x43e8>
   15be4:	ldr	r0, [r8, #20]
   15be8:	bl	1312c <__assert_fail@plt+0x1980>
   15bec:	ldr	r0, [r8, #24]
   15bf0:	bl	1312c <__assert_fail@plt+0x1980>
   15bf4:	ldr	r0, [r8, #28]
   15bf8:	bl	1312c <__assert_fail@plt+0x1980>
   15bfc:	ldr	r0, [r8]
   15c00:	bl	1312c <__assert_fail@plt+0x1980>
   15c04:	ldr	r0, [r8, #32]
   15c08:	cmp	r0, #0
   15c0c:	beq	15c68 <__assert_fail@plt+0x44bc>
   15c10:	mov	r5, #0
   15c14:	ldr	r6, [r8, #32]
   15c18:	add	r0, r5, r5, lsl #1
   15c1c:	ldr	r0, [r6, r0, lsl #2]!
   15c20:	add	r7, r6, #8
   15c24:	cmp	r0, #1
   15c28:	blt	15c4c <__assert_fail@plt+0x44a0>
   15c2c:	mov	r4, #0
   15c30:	ldr	r0, [r7]
   15c34:	ldr	r0, [r0, r4, lsl #2]
   15c38:	bl	16978 <__assert_fail@plt+0x51cc>
   15c3c:	add	r4, r4, #1
   15c40:	ldr	r0, [r6]
   15c44:	cmp	r4, r0
   15c48:	blt	15c30 <__assert_fail@plt+0x4484>
   15c4c:	ldr	r0, [r7]
   15c50:	bl	1312c <__assert_fail@plt+0x1980>
   15c54:	add	r0, r5, #1
   15c58:	ldr	r1, [r8, #68]	; 0x44
   15c5c:	cmp	r5, r1
   15c60:	mov	r5, r0
   15c64:	bcc	15c14 <__assert_fail@plt+0x4468>
   15c68:	ldr	r0, [r8, #32]
   15c6c:	bl	1312c <__assert_fail@plt+0x1980>
   15c70:	ldr	r0, [r8, #60]	; 0x3c
   15c74:	movw	r1, #17132	; 0x42ec
   15c78:	movt	r1, #2
   15c7c:	cmp	r0, r1
   15c80:	beq	15c88 <__assert_fail@plt+0x44dc>
   15c84:	bl	1312c <__assert_fail@plt+0x1980>
   15c88:	ldr	r0, [r8, #132]	; 0x84
   15c8c:	bl	1312c <__assert_fail@plt+0x1980>
   15c90:	mov	r0, r8
   15c94:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c98:	b	1312c <__assert_fail@plt+0x1980>
   15c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ca0:	add	fp, sp, #28
   15ca4:	sub	sp, sp, #28
   15ca8:	mov	r7, #2
   15cac:	ldr	sl, [fp, #8]
   15cb0:	cmp	sl, #7
   15cb4:	bhi	15d88 <__assert_fail@plt+0x45dc>
   15cb8:	mov	r6, r3
   15cbc:	mov	r9, r2
   15cc0:	mov	r4, r1
   15cc4:	mov	r5, r0
   15cc8:	ldr	r0, [r0]
   15ccc:	str	r0, [sp, #24]
   15cd0:	tst	sl, #4
   15cd4:	bne	15cec <__assert_fail@plt+0x4540>
   15cd8:	mov	r0, r4
   15cdc:	bl	1165c <strlen@plt>
   15ce0:	mov	r7, r0
   15ce4:	mov	r8, #0
   15ce8:	b	15cf4 <__assert_fail@plt+0x4548>
   15cec:	ldr	r8, [r6]
   15cf0:	ldr	r7, [r6, #4]
   15cf4:	movw	r0, #0
   15cf8:	movt	r0, #0
   15cfc:	movw	r1, #0
   15d00:	movt	r1, #0
   15d04:	orrs	r0, r1, r0
   15d08:	str	r0, [sp, #20]
   15d0c:	beq	15d1c <__assert_fail@plt+0x4570>
   15d10:	ldr	r0, [sp, #24]
   15d14:	add	r0, r0, #136	; 0x88
   15d18:	bl	114b8 <pthread_mutex_lock@plt>
   15d1c:	ldrb	r0, [r5, #28]
   15d20:	tst	r0, #16
   15d24:	bne	15d38 <__assert_fail@plt+0x458c>
   15d28:	str	r7, [sp]
   15d2c:	stmib	sp, {r7, r9}
   15d30:	str	r6, [sp, #12]
   15d34:	b	15d4c <__assert_fail@plt+0x45a0>
   15d38:	mov	r0, #0
   15d3c:	str	r7, [sp]
   15d40:	str	r7, [sp, #4]
   15d44:	str	r0, [sp, #8]
   15d48:	str	r0, [sp, #12]
   15d4c:	str	sl, [sp, #16]
   15d50:	mov	r0, r5
   15d54:	mov	r1, r4
   15d58:	mov	r2, r7
   15d5c:	mov	r3, r8
   15d60:	bl	15d94 <__assert_fail@plt+0x45e8>
   15d64:	mov	r7, r0
   15d68:	ldr	r0, [sp, #20]
   15d6c:	cmp	r0, #0
   15d70:	beq	15d80 <__assert_fail@plt+0x45d4>
   15d74:	ldr	r0, [sp, #24]
   15d78:	add	r0, r0, #136	; 0x88
   15d7c:	bl	11410 <pthread_mutex_unlock@plt>
   15d80:	cmp	r7, #0
   15d84:	movwne	r7, #1
   15d88:	mov	r0, r7
   15d8c:	sub	sp, fp, #28
   15d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d98:	add	fp, sp, #28
   15d9c:	sub	sp, sp, #212	; 0xd4
   15da0:	mov	r6, r3
   15da4:	str	r2, [sp, #60]	; 0x3c
   15da8:	str	r1, [sp, #36]	; 0x24
   15dac:	mov	sl, r0
   15db0:	ldr	r8, [r0]
   15db4:	add	r0, sp, #64	; 0x40
   15db8:	mov	r7, #0
   15dbc:	mov	r1, #0
   15dc0:	mov	r2, #136	; 0x88
   15dc4:	bl	116b0 <memset@plt>
   15dc8:	str	r8, [sp, #148]	; 0x94
   15dcc:	ldr	r1, [sl, #16]
   15dd0:	ldr	r0, [fp, #16]
   15dd4:	ldr	ip, [fp, #8]
   15dd8:	cmp	r1, #0
   15ddc:	mov	r5, #0
   15de0:	beq	15dfc <__assert_fail@plt+0x4650>
   15de4:	ldrb	r2, [sl, #28]
   15de8:	and	r2, r2, #9
   15dec:	cmp	r2, #8
   15df0:	movne	r1, #0
   15df4:	subs	r5, r6, ip
   15df8:	movne	r5, r1
   15dfc:	str	r6, [sp, #44]	; 0x2c
   15e00:	ldr	r1, [sl, #8]
   15e04:	ldr	r2, [sl, #24]
   15e08:	mvn	r3, r2
   15e0c:	cmp	r2, r0
   15e10:	addcc	r7, r3, r0
   15e14:	mov	r9, #1
   15e18:	cmp	r1, #0
   15e1c:	beq	16318 <__assert_fail@plt+0x4b6c>
   15e20:	ldr	r1, [r8, #36]	; 0x24
   15e24:	cmp	r1, #0
   15e28:	ldrne	r2, [r8, #40]	; 0x28
   15e2c:	cmpne	r2, #0
   15e30:	beq	16318 <__assert_fail@plt+0x4b6c>
   15e34:	ldr	r3, [r8, #44]	; 0x2c
   15e38:	cmp	r3, #0
   15e3c:	ldrne	r6, [r8, #48]	; 0x30
   15e40:	cmpne	r6, #0
   15e44:	beq	16318 <__assert_fail@plt+0x4b6c>
   15e48:	ldr	lr, [sl, #20]
   15e4c:	ldr	r1, [r1, #8]
   15e50:	cmp	r1, #0
   15e54:	bne	15e64 <__assert_fail@plt+0x46b8>
   15e58:	ldr	r1, [r2, #8]
   15e5c:	cmp	r1, #0
   15e60:	beq	163e4 <__assert_fail@plt+0x4c38>
   15e64:	mov	r6, ip
   15e68:	ldr	r0, [fp, #16]
   15e6c:	mov	r4, r7
   15e70:	subs	r0, r0, r7
   15e74:	str	r0, [sp, #48]	; 0x30
   15e78:	mov	r0, #1
   15e7c:	str	r0, [sp, #40]	; 0x28
   15e80:	bne	15e94 <__assert_fail@plt+0x46e8>
   15e84:	ldr	r0, [r8, #76]	; 0x4c
   15e88:	cmp	r0, #0
   15e8c:	movwne	r0, #1
   15e90:	str	r0, [sp, #40]	; 0x28
   15e94:	ldr	r0, [r8, #8]
   15e98:	ldr	r1, [sl, #12]
   15e9c:	str	r8, [sp, #8]
   15ea0:	str	lr, [sp, #56]	; 0x38
   15ea4:	str	lr, [sp]
   15ea8:	ubfx	r1, r1, #22, #1
   15eac:	str	r1, [sp, #4]
   15eb0:	add	r3, r0, #1
   15eb4:	add	r0, sp, #64	; 0x40
   15eb8:	ldr	r7, [sp, #36]	; 0x24
   15ebc:	mov	r1, r7
   15ec0:	ldr	r2, [sp, #60]	; 0x3c
   15ec4:	bl	1c67c <__assert_fail@plt+0xaed0>
   15ec8:	cmp	r0, #0
   15ecc:	bne	16528 <__assert_fail@plt+0x4d7c>
   15ed0:	ldr	r1, [fp, #24]
   15ed4:	ldr	r0, [fp, #12]
   15ed8:	str	r0, [sp, #116]	; 0x74
   15edc:	str	r0, [sp, #120]	; 0x78
   15ee0:	str	sl, [sp, #32]
   15ee4:	ldrb	r0, [sl, #28]
   15ee8:	lsr	r0, r0, #7
   15eec:	strb	r0, [sp, #141]	; 0x8d
   15ef0:	ldr	r0, [r8, #76]	; 0x4c
   15ef4:	lsl	r2, r0, #1
   15ef8:	add	r0, sp, #64	; 0x40
   15efc:	bl	1c72c <__assert_fail@plt+0xaf80>
   15f00:	cmp	r0, #0
   15f04:	bne	16528 <__assert_fail@plt+0x4d7c>
   15f08:	ldr	r0, [sp, #48]	; 0x30
   15f0c:	cmp	r0, #1
   15f10:	bhi	15f20 <__assert_fail@plt+0x4774>
   15f14:	ldrb	r0, [r8, #88]	; 0x58
   15f18:	tst	r0, #2
   15f1c:	beq	15f48 <__assert_fail@plt+0x479c>
   15f20:	mov	r9, #12
   15f24:	ldr	r0, [sp, #100]	; 0x64
   15f28:	cmn	r0, #-1073741822	; 0xc0000002
   15f2c:	bhi	162f8 <__assert_fail@plt+0x4b4c>
   15f30:	mov	r1, #4
   15f34:	add	r0, r1, r0, lsl #2
   15f38:	bl	22a6c <__assert_fail@plt+0x112c0>
   15f3c:	str	r0, [sp, #164]	; 0xa4
   15f40:	cmp	r0, #0
   15f44:	beq	162f8 <__assert_fail@plt+0x4b4c>
   15f48:	str	r4, [sp, #16]
   15f4c:	ldr	r4, [sp, #44]	; 0x2c
   15f50:	str	r4, [fp, #-36]	; 0xffffffdc
   15f54:	mov	r0, #4
   15f58:	ldr	r1, [fp, #24]
   15f5c:	tst	r1, #1
   15f60:	mov	r1, #4
   15f64:	movweq	r1, #6
   15f68:	str	r1, [sp, #124]	; 0x7c
   15f6c:	cmp	r6, r4
   15f70:	mov	lr, #1
   15f74:	mvnlt	lr, #0
   15f78:	mov	r1, r8
   15f7c:	mov	r8, r6
   15f80:	movlt	r8, r4
   15f84:	mov	sl, r4
   15f88:	movlt	sl, r6
   15f8c:	str	r1, [sp, #52]	; 0x34
   15f90:	ldr	ip, [r1, #92]	; 0x5c
   15f94:	cmp	r5, #0
   15f98:	beq	15fe4 <__assert_fail@plt+0x4838>
   15f9c:	cmp	ip, #1
   15fa0:	ldr	r2, [sp, #60]	; 0x3c
   15fa4:	ldr	r3, [sp, #56]	; 0x38
   15fa8:	beq	15fc8 <__assert_fail@plt+0x481c>
   15fac:	ldr	r0, [sp, #32]
   15fb0:	ldr	r0, [r0, #12]
   15fb4:	and	r0, r0, #4194304	; 0x400000
   15fb8:	orr	r0, r3, r0
   15fbc:	clz	r0, r0
   15fc0:	lsr	r0, r0, #5
   15fc4:	lsl	r0, r0, #2
   15fc8:	cmp	r3, #0
   15fcc:	mov	r1, r3
   15fd0:	movwne	r1, #1
   15fd4:	cmp	r6, r4
   15fd8:	orrge	r1, r1, #2
   15fdc:	orr	r0, r1, r0
   15fe0:	b	15ff0 <__assert_fail@plt+0x4844>
   15fe4:	mov	r0, #8
   15fe8:	ldr	r2, [sp, #60]	; 0x3c
   15fec:	ldr	r3, [sp, #56]	; 0x38
   15ff0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15ff4:	cmp	r1, sl
   15ff8:	cmpge	r8, r1
   15ffc:	blt	162f0 <__assert_fail@plt+0x4b44>
   16000:	sub	r1, fp, #36	; 0x24
   16004:	cmp	r6, r4
   16008:	movwlt	r1, #0
   1600c:	str	r1, [sp, #28]
   16010:	sub	r4, r0, #4
   16014:	add	r9, sp, #64	; 0x40
   16018:	str	ip, [sp, #44]	; 0x2c
   1601c:	str	lr, [sp, #24]
   16020:	str	r4, [sp, #20]
   16024:	cmp	r4, #4
   16028:	bhi	1608c <__assert_fail@plt+0x48e0>
   1602c:	add	r0, pc, #0
   16030:	ldr	pc, [r0, r4, lsl #2]
   16034:	andeq	r6, r1, r8, asr #32
   16038:	andeq	r6, r1, r8, asr #32
   1603c:	andeq	r6, r1, r0, lsl r1
   16040:	andeq	r6, r1, r0, asr #2
   16044:	andeq	r6, r1, ip, ror r1
   16048:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1604c:	cmp	r0, sl
   16050:	blt	162f0 <__assert_fail@plt+0x4b44>
   16054:	mov	r1, #0
   16058:	cmp	r0, r2
   1605c:	ldrblt	r1, [r7, r0]
   16060:	cmp	r3, #0
   16064:	ldrbne	r1, [r3, r1]
   16068:	ldrb	r1, [r5, r1]
   1606c:	cmp	r1, #0
   16070:	bne	1617c <__assert_fail@plt+0x49d0>
   16074:	sub	r1, r0, #1
   16078:	str	r1, [fp, #-36]	; 0xffffffdc
   1607c:	cmp	r0, sl
   16080:	mov	r0, r1
   16084:	bgt	16054 <__assert_fail@plt+0x48a8>
   16088:	b	162f0 <__assert_fail@plt+0x4b44>
   1608c:	ldr	r0, [sp, #88]	; 0x58
   16090:	ldr	r2, [sp, #96]	; 0x60
   16094:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16098:	sub	r0, r1, r0
   1609c:	cmp	r0, r2
   160a0:	bcs	160e4 <__assert_fail@plt+0x4938>
   160a4:	mov	r1, #0
   160a8:	ldr	r2, [sp, #92]	; 0x5c
   160ac:	cmp	r0, r2
   160b0:	ldrcc	r1, [sp, #68]	; 0x44
   160b4:	ldrbcc	r1, [r1, r0]
   160b8:	ldrb	r0, [r5, r1]
   160bc:	cmp	r0, #0
   160c0:	bne	1617c <__assert_fail@plt+0x49d0>
   160c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   160c8:	add	r0, r0, lr
   160cc:	str	r0, [fp, #-36]	; 0xffffffdc
   160d0:	cmp	r0, sl
   160d4:	blt	162f0 <__assert_fail@plt+0x4b44>
   160d8:	cmp	r0, r8
   160dc:	ble	1608c <__assert_fail@plt+0x48e0>
   160e0:	b	162f0 <__assert_fail@plt+0x4b44>
   160e4:	mov	r0, r9
   160e8:	ldr	r2, [fp, #24]
   160ec:	bl	1c7b4 <__assert_fail@plt+0xb008>
   160f0:	cmp	r0, #0
   160f4:	bne	16530 <__assert_fail@plt+0x4d84>
   160f8:	ldr	r0, [sp, #88]	; 0x58
   160fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16100:	sub	r0, r1, r0
   16104:	add	r9, sp, #64	; 0x40
   16108:	ldr	lr, [sp, #24]
   1610c:	b	160a4 <__assert_fail@plt+0x48f8>
   16110:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16114:	cmp	r0, r8
   16118:	bge	16170 <__assert_fail@plt+0x49c4>
   1611c:	ldrb	r1, [r7, r0]
   16120:	ldrb	r1, [r5, r1]
   16124:	cmp	r1, #0
   16128:	bne	16170 <__assert_fail@plt+0x49c4>
   1612c:	add	r0, r0, #1
   16130:	str	r0, [fp, #-36]	; 0xffffffdc
   16134:	cmp	r0, r8
   16138:	blt	1611c <__assert_fail@plt+0x4970>
   1613c:	b	16170 <__assert_fail@plt+0x49c4>
   16140:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16144:	cmp	r0, r8
   16148:	bge	16170 <__assert_fail@plt+0x49c4>
   1614c:	ldrb	r1, [r7, r0]
   16150:	ldrb	r1, [r3, r1]
   16154:	ldrb	r1, [r5, r1]
   16158:	cmp	r1, #0
   1615c:	bne	16170 <__assert_fail@plt+0x49c4>
   16160:	add	r0, r0, #1
   16164:	str	r0, [fp, #-36]	; 0xffffffdc
   16168:	cmp	r0, r8
   1616c:	blt	1614c <__assert_fail@plt+0x49a0>
   16170:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16174:	cmp	r1, r8
   16178:	beq	162d0 <__assert_fail@plt+0x4b24>
   1617c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16180:	mov	r0, r9
   16184:	ldr	r2, [fp, #24]
   16188:	bl	1c7b4 <__assert_fail@plt+0xb008>
   1618c:	cmp	r0, #0
   16190:	bne	16530 <__assert_fail@plt+0x4d84>
   16194:	ldr	r0, [sp, #44]	; 0x2c
   16198:	cmp	r0, #1
   1619c:	add	r9, sp, #64	; 0x40
   161a0:	ldrne	r0, [sp, #92]	; 0x5c
   161a4:	cmpne	r0, #0
   161a8:	bne	1622c <__assert_fail@plt+0x4a80>
   161ac:	mov	r0, #0
   161b0:	str	r0, [sp, #172]	; 0xac
   161b4:	str	r0, [sp, #184]	; 0xb8
   161b8:	str	r0, [sp, #168]	; 0xa8
   161bc:	mov	r0, r9
   161c0:	ldr	r1, [sp, #40]	; 0x28
   161c4:	ldr	r2, [sp, #28]
   161c8:	bl	1cde0 <__assert_fail@plt+0xb634>
   161cc:	cmn	r0, #1
   161d0:	mov	r4, r9
   161d4:	beq	16294 <__assert_fail@plt+0x4ae8>
   161d8:	mov	r2, r0
   161dc:	cmn	r0, #2
   161e0:	beq	16538 <__assert_fail@plt+0x4d8c>
   161e4:	str	r2, [sp, #156]	; 0x9c
   161e8:	ldr	r0, [sp, #48]	; 0x30
   161ec:	cmp	r0, #2
   161f0:	bcc	16240 <__assert_fail@plt+0x4a94>
   161f4:	ldr	r0, [sp, #32]
   161f8:	ldrb	r0, [r0, #28]
   161fc:	ands	r0, r0, #16
   16200:	bne	16240 <__assert_fail@plt+0x4a94>
   16204:	ldr	r0, [sp, #164]	; 0xa4
   16208:	ldr	r1, [r0, r2, lsl #2]
   1620c:	add	r0, sp, #64	; 0x40
   16210:	bl	1d154 <__assert_fail@plt+0xb9a8>
   16214:	str	r0, [sp, #160]	; 0xa0
   16218:	ldr	r0, [sp, #52]	; 0x34
   1621c:	ldrb	r0, [r0, #88]	; 0x58
   16220:	tst	r0, #1
   16224:	beq	16264 <__assert_fail@plt+0x4ab8>
   16228:	b	16274 <__assert_fail@plt+0x4ac8>
   1622c:	ldr	r0, [sp, #72]	; 0x48
   16230:	ldr	r0, [r0]
   16234:	cmn	r0, #1
   16238:	bne	161ac <__assert_fail@plt+0x4a00>
   1623c:	b	162a0 <__assert_fail@plt+0x4af4>
   16240:	ldr	r0, [sp, #52]	; 0x34
   16244:	ldr	r0, [r0, #76]	; 0x4c
   16248:	cmp	r0, #0
   1624c:	beq	16324 <__assert_fail@plt+0x4b78>
   16250:	ldr	r0, [sp, #164]	; 0xa4
   16254:	ldr	r1, [r0, r2, lsl #2]
   16258:	add	r0, sp, #64	; 0x40
   1625c:	bl	1d154 <__assert_fail@plt+0xb9a8>
   16260:	str	r0, [sp, #160]	; 0xa0
   16264:	ldr	r0, [sp, #52]	; 0x34
   16268:	ldr	r0, [r0, #76]	; 0x4c
   1626c:	cmp	r0, #0
   16270:	beq	16324 <__assert_fail@plt+0x4b78>
   16274:	add	r0, sp, #64	; 0x40
   16278:	bl	1d1cc <__assert_fail@plt+0xba20>
   1627c:	cmp	r0, #0
   16280:	beq	16324 <__assert_fail@plt+0x4b78>
   16284:	mov	r9, r0
   16288:	cmp	r0, #1
   1628c:	add	r4, sp, #64	; 0x40
   16290:	bne	162f4 <__assert_fail@plt+0x4b48>
   16294:	mov	r0, r4
   16298:	bl	1d3ec <__assert_fail@plt+0xbc40>
   1629c:	mov	r9, r4
   162a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   162a4:	ldr	lr, [sp, #24]
   162a8:	add	r0, r0, lr
   162ac:	str	r0, [fp, #-36]	; 0xffffffdc
   162b0:	cmp	r0, sl
   162b4:	blt	162f0 <__assert_fail@plt+0x4b44>
   162b8:	cmp	r8, r0
   162bc:	ldr	r2, [sp, #60]	; 0x3c
   162c0:	ldr	r4, [sp, #20]
   162c4:	ldr	r3, [sp, #56]	; 0x38
   162c8:	bge	16024 <__assert_fail@plt+0x4878>
   162cc:	b	162f0 <__assert_fail@plt+0x4b44>
   162d0:	mov	r0, #0
   162d4:	cmp	r1, r2
   162d8:	ldrblt	r0, [r7, r1]
   162dc:	cmp	r3, #0
   162e0:	ldrbne	r0, [r3, r0]
   162e4:	ldrb	r0, [r5, r0]
   162e8:	cmp	r0, #0
   162ec:	bne	1617c <__assert_fail@plt+0x49d0>
   162f0:	mov	r9, #1
   162f4:	ldr	r8, [sp, #52]	; 0x34
   162f8:	ldr	r0, [sp, #164]	; 0xa4
   162fc:	bl	1312c <__assert_fail@plt+0x1980>
   16300:	ldr	r0, [r8, #76]	; 0x4c
   16304:	cmp	r0, #0
   16308:	addne	r0, sp, #64	; 0x40
   1630c:	blne	1d714 <__assert_fail@plt+0xbf68>
   16310:	add	r0, sp, #64	; 0x40
   16314:	bl	16d5c <__assert_fail@plt+0x55b0>
   16318:	mov	r0, r9
   1631c:	sub	sp, fp, #28
   16320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16324:	ldr	sl, [sp, #48]	; 0x30
   16328:	cmp	sl, #0
   1632c:	beq	16420 <__assert_fail@plt+0x4c74>
   16330:	cmp	sl, #1
   16334:	ldr	r8, [sp, #52]	; 0x34
   16338:	ldr	r6, [sp, #16]
   1633c:	ldr	r4, [fp, #16]
   16340:	beq	16360 <__assert_fail@plt+0x4bb4>
   16344:	mvn	r0, r6
   16348:	add	r0, r0, r4
   1634c:	lsl	r2, r0, #3
   16350:	ldr	r0, [fp, #20]
   16354:	add	r0, r0, #8
   16358:	mov	r1, #255	; 0xff
   1635c:	bl	116b0 <memset@plt>
   16360:	mov	r0, #0
   16364:	ldr	r1, [sp, #156]	; 0x9c
   16368:	ldr	r2, [fp, #20]
   1636c:	stm	r2, {r0, r1}
   16370:	cmp	sl, #2
   16374:	bcc	163c8 <__assert_fail@plt+0x4c1c>
   16378:	ldr	r0, [sp, #32]
   1637c:	ldrb	r0, [r0, #28]
   16380:	ands	r0, r0, #16
   16384:	bne	163c8 <__assert_fail@plt+0x4c1c>
   16388:	ldrb	r1, [r8, #88]	; 0x58
   1638c:	mov	r0, #0
   16390:	tst	r1, #1
   16394:	beq	163a8 <__assert_fail@plt+0x4bfc>
   16398:	ldr	r1, [r8, #76]	; 0x4c
   1639c:	mov	r0, #0
   163a0:	cmp	r1, #0
   163a4:	movwgt	r0, #1
   163a8:	str	r0, [sp]
   163ac:	add	r1, sp, #64	; 0x40
   163b0:	ldr	r0, [sp, #32]
   163b4:	mov	r2, sl
   163b8:	ldr	r3, [fp, #20]
   163bc:	bl	1d494 <__assert_fail@plt+0xbce8>
   163c0:	cmp	r0, #0
   163c4:	bne	16528 <__assert_fail@plt+0x4d7c>
   163c8:	ldr	r0, [fp, #20]
   163cc:	add	r0, r0, #4
   163d0:	add	r1, sp, #64	; 0x40
   163d4:	add	lr, r1, #32
   163d8:	ldrb	r2, [sp, #140]	; 0x8c
   163dc:	mov	r3, r4
   163e0:	b	1646c <__assert_fail@plt+0x4cc0>
   163e4:	ldr	r1, [r3, #8]
   163e8:	cmp	r1, #0
   163ec:	beq	163fc <__assert_fail@plt+0x4c50>
   163f0:	ldrsb	r1, [sl, #28]
   163f4:	cmp	r1, #0
   163f8:	blt	15e64 <__assert_fail@plt+0x46b8>
   163fc:	mov	r6, #0
   16400:	ldr	r0, [sp, #44]	; 0x2c
   16404:	cmp	r0, #0
   16408:	beq	16428 <__assert_fail@plt+0x4c7c>
   1640c:	cmp	ip, #0
   16410:	mov	r0, #0
   16414:	str	r0, [sp, #44]	; 0x2c
   16418:	bne	16318 <__assert_fail@plt+0x4b6c>
   1641c:	b	15e68 <__assert_fail@plt+0x46bc>
   16420:	mov	r9, #0
   16424:	b	162f4 <__assert_fail@plt+0x4b48>
   16428:	mov	r0, #0
   1642c:	str	r0, [sp, #44]	; 0x2c
   16430:	b	15e68 <__assert_fail@plt+0x46bc>
   16434:	ldr	ip, [sp, #76]	; 0x4c
   16438:	ldr	r5, [sp, #92]	; 0x5c
   1643c:	cmp	r7, r5
   16440:	mov	r1, lr
   16444:	addne	r1, ip, r7, lsl #2
   16448:	ldr	r1, [r1]
   1644c:	str	r1, [r0, #-4]
   16450:	ldr	r1, [r0]
   16454:	cmp	r1, r5
   16458:	mov	r4, lr
   1645c:	addne	r4, ip, r1, lsl #2
   16460:	ldr	r1, [r4]
   16464:	str	r1, [r0]
   16468:	b	16480 <__assert_fail@plt+0x4cd4>
   1646c:	ldr	r7, [r0, #-4]
   16470:	cmn	r7, #1
   16474:	beq	16494 <__assert_fail@plt+0x4ce8>
   16478:	cmp	r2, #0
   1647c:	bne	16434 <__assert_fail@plt+0x4c88>
   16480:	ldmda	r0, {r1, r7}
   16484:	ldr	r5, [fp, #-36]	; 0xffffffdc
   16488:	add	r1, r1, r5
   1648c:	add	r7, r7, r5
   16490:	stmda	r0, {r1, r7}
   16494:	add	r0, r0, #8
   16498:	sub	r3, r3, #1
   1649c:	cmp	r6, r3
   164a0:	bne	1646c <__assert_fail@plt+0x4cc0>
   164a4:	cmp	r6, #0
   164a8:	ldr	r4, [fp, #20]
   164ac:	ble	164c0 <__assert_fail@plt+0x4d14>
   164b0:	add	r0, r4, sl, lsl #3
   164b4:	lsl	r2, r6, #3
   164b8:	mov	r1, #255	; 0xff
   164bc:	bl	116b0 <memset@plt>
   164c0:	ldr	r0, [r8, #132]	; 0x84
   164c4:	mov	r9, #0
   164c8:	cmp	r0, #0
   164cc:	beq	162f8 <__assert_fail@plt+0x4b4c>
   164d0:	cmp	sl, #2
   164d4:	bcc	162f8 <__assert_fail@plt+0x4b4c>
   164d8:	ldr	r1, [fp, #16]
   164dc:	sub	r1, r1, #1
   164e0:	sub	r1, r1, r6
   164e4:	mov	r2, #0
   164e8:	ldr	r3, [r0, r2, lsl #2]
   164ec:	cmp	r2, r3
   164f0:	beq	16514 <__assert_fail@plt+0x4d68>
   164f4:	add	r7, r4, r2, lsl #3
   164f8:	add	r3, r4, r3, lsl #3
   164fc:	ldr	r3, [r3, #8]
   16500:	str	r3, [r7, #8]
   16504:	ldr	r3, [r0, r2, lsl #2]
   16508:	add	r3, r4, r3, lsl #3
   1650c:	ldr	r3, [r3, #12]
   16510:	str	r3, [r7, #12]
   16514:	add	r2, r2, #1
   16518:	cmp	r1, r2
   1651c:	bne	164e8 <__assert_fail@plt+0x4d3c>
   16520:	mov	r9, #0
   16524:	b	162f8 <__assert_fail@plt+0x4b4c>
   16528:	mov	r9, r0
   1652c:	b	162f8 <__assert_fail@plt+0x4b4c>
   16530:	mov	r9, r0
   16534:	b	162f4 <__assert_fail@plt+0x4b48>
   16538:	mov	r9, #12
   1653c:	b	162f4 <__assert_fail@plt+0x4b48>
   16540:	push	{fp, lr}
   16544:	mov	fp, sp
   16548:	sub	sp, sp, #16
   1654c:	mov	ip, #1
   16550:	str	ip, [sp, #12]
   16554:	str	r2, [sp, #4]
   16558:	mov	ip, #0
   1655c:	str	ip, [sp]
   16560:	ldr	ip, [fp, #8]
   16564:	str	ip, [sp, #8]
   16568:	bl	16574 <__assert_fail@plt+0x4dc8>
   1656c:	mov	sp, fp
   16570:	pop	{fp, pc}
   16574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16578:	add	fp, sp, #28
   1657c:	sub	sp, sp, #36	; 0x24
   16580:	mvn	r7, #0
   16584:	cmp	r3, #0
   16588:	blt	16724 <__assert_fail@plt+0x4f78>
   1658c:	mov	r9, r3
   16590:	mov	r8, r2
   16594:	cmp	r3, r2
   16598:	bgt	16724 <__assert_fail@plt+0x4f78>
   1659c:	mov	r5, r0
   165a0:	str	r1, [sp, #28]
   165a4:	ldr	r0, [fp, #8]
   165a8:	add	r0, r0, r9
   165ac:	ldr	r4, [r5]
   165b0:	cmp	r0, r8
   165b4:	mov	r6, r8
   165b8:	bicle	r6, r0, r0, asr #31
   165bc:	movw	r0, #0
   165c0:	movt	r0, #0
   165c4:	movw	r1, #0
   165c8:	movt	r1, #0
   165cc:	orrs	r0, r1, r0
   165d0:	str	r0, [sp, #32]
   165d4:	beq	165e0 <__assert_fail@plt+0x4e34>
   165d8:	add	r0, r4, #136	; 0x88
   165dc:	bl	114b8 <pthread_mutex_lock@plt>
   165e0:	str	r4, [sp, #20]
   165e4:	ldr	r4, [fp, #16]
   165e8:	ldrb	r0, [r5, #28]
   165ec:	ubfx	r1, r0, #5, #2
   165f0:	str	r1, [sp, #24]
   165f4:	cmp	r6, r9
   165f8:	ble	16614 <__assert_fail@plt+0x4e68>
   165fc:	tst	r0, #8
   16600:	bne	16614 <__assert_fail@plt+0x4e68>
   16604:	ldr	r0, [r5, #16]
   16608:	cmp	r0, #0
   1660c:	movne	r0, r5
   16610:	blne	154fc <__assert_fail@plt+0x3d50>
   16614:	mov	r7, #1
   16618:	mov	sl, #0
   1661c:	cmp	r4, #0
   16620:	beq	16658 <__assert_fail@plt+0x4eac>
   16624:	ldrb	r0, [r5, #28]
   16628:	ands	r1, r0, #16
   1662c:	bne	16658 <__assert_fail@plt+0x4eac>
   16630:	and	r0, r0, #6
   16634:	cmp	r0, #4
   16638:	bne	1664c <__assert_fail@plt+0x4ea0>
   1663c:	ldr	r7, [r4]
   16640:	ldr	r0, [r5, #24]
   16644:	cmp	r7, r0
   16648:	bls	16744 <__assert_fail@plt+0x4f98>
   1664c:	ldr	r0, [r5, #24]
   16650:	add	r7, r0, #1
   16654:	mov	sl, r4
   16658:	lsl	r0, r7, #3
   1665c:	bl	22a6c <__assert_fail@plt+0x112c0>
   16660:	cmp	r0, #0
   16664:	beq	16730 <__assert_fail@plt+0x4f84>
   16668:	mov	r4, r0
   1666c:	ldr	r0, [fp, #12]
   16670:	str	r6, [sp]
   16674:	stmib	sp, {r0, r7}
   16678:	str	r4, [sp, #12]
   1667c:	ldr	r0, [sp, #24]
   16680:	str	r0, [sp, #16]
   16684:	mov	r0, r5
   16688:	ldr	r1, [sp, #28]
   1668c:	mov	r2, r8
   16690:	mov	r3, r9
   16694:	bl	15d94 <__assert_fail@plt+0x45e8>
   16698:	cmp	r0, #0
   1669c:	beq	166b0 <__assert_fail@plt+0x4f04>
   166a0:	mvn	r7, #1
   166a4:	cmp	r0, #1
   166a8:	mvneq	r7, #0
   166ac:	b	16704 <__assert_fail@plt+0x4f58>
   166b0:	cmp	sl, #0
   166b4:	beq	166e8 <__assert_fail@plt+0x4f3c>
   166b8:	ldrb	r0, [r5, #28]
   166bc:	ubfx	r3, r0, #1, #2
   166c0:	mov	r0, sl
   166c4:	mov	r1, r4
   166c8:	mov	r2, r7
   166cc:	bl	1c524 <__assert_fail@plt+0xad78>
   166d0:	ldrb	r1, [r5, #28]
   166d4:	and	r1, r1, #249	; 0xf9
   166d8:	bfi	r1, r0, #1, #2
   166dc:	strb	r1, [r5, #28]
   166e0:	tst	r0, #3
   166e4:	beq	16700 <__assert_fail@plt+0x4f54>
   166e8:	ldr	r0, [fp, #20]
   166ec:	cmp	r0, #0
   166f0:	ldreq	r7, [r4]
   166f4:	ldrne	r0, [r4, #4]
   166f8:	subne	r7, r0, r9
   166fc:	b	16704 <__assert_fail@plt+0x4f58>
   16700:	mvn	r7, #1
   16704:	ldr	r5, [sp, #32]
   16708:	mov	r0, r4
   1670c:	bl	1312c <__assert_fail@plt+0x1980>
   16710:	cmp	r5, #0
   16714:	beq	16724 <__assert_fail@plt+0x4f78>
   16718:	ldr	r0, [sp, #20]
   1671c:	add	r0, r0, #136	; 0x88
   16720:	bl	11410 <pthread_mutex_unlock@plt>
   16724:	mov	r0, r7
   16728:	sub	sp, fp, #28
   1672c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16730:	mvn	r7, #1
   16734:	ldr	r5, [sp, #32]
   16738:	cmp	r5, #0
   1673c:	bne	16718 <__assert_fail@plt+0x4f6c>
   16740:	b	16724 <__assert_fail@plt+0x4f78>
   16744:	cmp	r7, #1
   16748:	movwlt	r4, #0
   1674c:	movwlt	r7, #1
   16750:	b	16654 <__assert_fail@plt+0x4ea8>
   16754:	push	{fp, lr}
   16758:	mov	fp, sp
   1675c:	sub	sp, sp, #16
   16760:	mov	ip, #0
   16764:	str	ip, [sp, #12]
   16768:	str	r2, [sp, #4]
   1676c:	ldr	ip, [fp, #12]
   16770:	str	ip, [sp, #8]
   16774:	ldr	ip, [fp, #8]
   16778:	str	ip, [sp]
   1677c:	bl	16574 <__assert_fail@plt+0x4dc8>
   16780:	mov	sp, fp
   16784:	pop	{fp, pc}
   16788:	push	{fp, lr}
   1678c:	mov	fp, sp
   16790:	sub	sp, sp, #24
   16794:	mov	ip, #1
   16798:	str	ip, [sp, #20]
   1679c:	mov	ip, #0
   167a0:	str	ip, [sp, #8]
   167a4:	ldr	ip, [fp, #20]
   167a8:	str	ip, [sp, #16]
   167ac:	ldr	ip, [fp, #16]
   167b0:	str	ip, [sp, #12]
   167b4:	ldr	ip, [fp, #12]
   167b8:	str	ip, [sp, #4]
   167bc:	ldr	ip, [fp, #8]
   167c0:	str	ip, [sp]
   167c4:	bl	167d0 <__assert_fail@plt+0x5024>
   167c8:	mov	sp, fp
   167cc:	pop	{fp, pc}
   167d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167d4:	add	fp, sp, #28
   167d8:	sub	sp, sp, #20
   167dc:	mov	r6, r2
   167e0:	mov	r8, r1
   167e4:	mov	r1, r0
   167e8:	ldr	r4, [fp, #8]
   167ec:	orr	r0, r4, r2
   167f0:	ldr	r2, [fp, #24]
   167f4:	orr	r0, r0, r2
   167f8:	cmp	r0, #0
   167fc:	blt	168b0 <__assert_fail@plt+0x5104>
   16800:	adds	sl, r6, r4
   16804:	bvs	168b0 <__assert_fail@plt+0x5104>
   16808:	mov	r5, #0
   1680c:	cmp	r4, #1
   16810:	blt	16864 <__assert_fail@plt+0x50b8>
   16814:	mov	r9, r3
   16818:	cmp	r6, #1
   1681c:	blt	1686c <__assert_fail@plt+0x50c0>
   16820:	mov	r0, sl
   16824:	mov	r5, r1
   16828:	bl	22a6c <__assert_fail@plt+0x112c0>
   1682c:	cmp	r0, #0
   16830:	beq	168b0 <__assert_fail@plt+0x5104>
   16834:	mov	r7, r0
   16838:	mov	r1, r8
   1683c:	mov	r2, r6
   16840:	bl	114d0 <memcpy@plt>
   16844:	add	r0, r7, r6
   16848:	mov	r1, r9
   1684c:	mov	r2, r4
   16850:	bl	114d0 <memcpy@plt>
   16854:	ldr	r2, [fp, #24]
   16858:	mov	r1, r5
   1685c:	mov	r5, r7
   16860:	b	16870 <__assert_fail@plt+0x50c4>
   16864:	mov	r7, r8
   16868:	b	16870 <__assert_fail@plt+0x50c4>
   1686c:	mov	r7, r9
   16870:	ldr	r0, [fp, #28]
   16874:	add	r6, fp, #12
   16878:	ldm	r6, {r3, r4, r6}
   1687c:	str	r4, [sp]
   16880:	stmib	sp, {r2, r6}
   16884:	str	r0, [sp, #12]
   16888:	mov	r0, r1
   1688c:	mov	r1, r7
   16890:	mov	r2, sl
   16894:	bl	16574 <__assert_fail@plt+0x4dc8>
   16898:	mov	r4, r0
   1689c:	mov	r0, r5
   168a0:	bl	1312c <__assert_fail@plt+0x1980>
   168a4:	mov	r0, r4
   168a8:	sub	sp, fp, #28
   168ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168b0:	mvn	r0, #1
   168b4:	sub	sp, fp, #28
   168b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168bc:	push	{fp, lr}
   168c0:	mov	fp, sp
   168c4:	sub	sp, sp, #24
   168c8:	mov	ip, #0
   168cc:	str	ip, [sp, #20]
   168d0:	ldr	ip, [fp, #24]
   168d4:	str	ip, [sp, #16]
   168d8:	ldr	ip, [fp, #20]
   168dc:	str	ip, [sp, #12]
   168e0:	ldr	ip, [fp, #16]
   168e4:	str	ip, [sp, #8]
   168e8:	ldr	ip, [fp, #12]
   168ec:	str	ip, [sp, #4]
   168f0:	ldr	ip, [fp, #8]
   168f4:	str	ip, [sp]
   168f8:	bl	167d0 <__assert_fail@plt+0x5024>
   168fc:	mov	sp, fp
   16900:	pop	{fp, pc}
   16904:	ldrb	ip, [r0, #28]
   16908:	bic	ip, ip, #6
   1690c:	cmp	r2, #0
   16910:	beq	16930 <__assert_fail@plt+0x5184>
   16914:	push	{fp, lr}
   16918:	mov	fp, sp
   1691c:	ldr	lr, [fp, #8]
   16920:	orr	ip, ip, #2
   16924:	strb	ip, [r0, #28]
   16928:	stm	r1, {r2, r3, lr}
   1692c:	pop	{fp, pc}
   16930:	strb	ip, [r0, #28]
   16934:	mov	r0, #0
   16938:	str	r0, [r1]
   1693c:	str	r0, [r1, #4]
   16940:	str	r0, [r1, #8]
   16944:	bx	lr
   16948:	ldr	r1, [r0, #4]
   1694c:	movw	r2, #255	; 0xff
   16950:	movt	r2, #4
   16954:	and	r1, r1, r2
   16958:	cmp	r1, #6
   1695c:	bne	16968 <__assert_fail@plt+0x51bc>
   16960:	ldr	r0, [r0]
   16964:	b	169d8 <__assert_fail@plt+0x522c>
   16968:	cmp	r1, #3
   1696c:	bxne	lr
   16970:	ldr	r0, [r0]
   16974:	b	1312c <__assert_fail@plt+0x1980>
   16978:	push	{r4, sl, fp, lr}
   1697c:	add	fp, sp, #8
   16980:	mov	r4, r0
   16984:	ldr	r0, [r0, #24]
   16988:	bl	1312c <__assert_fail@plt+0x1980>
   1698c:	ldr	r0, [r4, #36]	; 0x24
   16990:	bl	1312c <__assert_fail@plt+0x1980>
   16994:	ldr	r0, [r4, #40]	; 0x28
   16998:	add	r1, r4, #4
   1699c:	cmp	r0, r1
   169a0:	beq	169b4 <__assert_fail@plt+0x5208>
   169a4:	ldr	r0, [r0, #8]
   169a8:	bl	1312c <__assert_fail@plt+0x1980>
   169ac:	ldr	r0, [r4, #40]	; 0x28
   169b0:	bl	1312c <__assert_fail@plt+0x1980>
   169b4:	ldr	r0, [r4, #12]
   169b8:	bl	1312c <__assert_fail@plt+0x1980>
   169bc:	ldr	r0, [r4, #48]	; 0x30
   169c0:	bl	1312c <__assert_fail@plt+0x1980>
   169c4:	ldr	r0, [r4, #44]	; 0x2c
   169c8:	bl	1312c <__assert_fail@plt+0x1980>
   169cc:	mov	r0, r4
   169d0:	pop	{r4, sl, fp, lr}
   169d4:	b	1312c <__assert_fail@plt+0x1980>
   169d8:	push	{r4, sl, fp, lr}
   169dc:	add	fp, sp, #8
   169e0:	mov	r4, r0
   169e4:	ldr	r0, [r0]
   169e8:	bl	1312c <__assert_fail@plt+0x1980>
   169ec:	ldr	r0, [r4, #4]
   169f0:	bl	1312c <__assert_fail@plt+0x1980>
   169f4:	ldr	r0, [r4, #8]
   169f8:	bl	1312c <__assert_fail@plt+0x1980>
   169fc:	ldr	r0, [r4, #12]
   16a00:	bl	1312c <__assert_fail@plt+0x1980>
   16a04:	mov	r0, r4
   16a08:	pop	{r4, sl, fp, lr}
   16a0c:	b	1312c <__assert_fail@plt+0x1980>
   16a10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16a14:	add	fp, sp, #24
   16a18:	mov	r5, r1
   16a1c:	mov	r9, r0
   16a20:	mov	r1, #0
   16a24:	mov	r2, #160	; 0xa0
   16a28:	bl	116b0 <memset@plt>
   16a2c:	mov	r0, #31
   16a30:	str	r0, [r9, #64]	; 0x40
   16a34:	movw	r0, #43689	; 0xaaa9
   16a38:	movt	r0, #2730	; 0xaaa
   16a3c:	cmp	r5, r0
   16a40:	bhi	16bb4 <__assert_fail@plt+0x5408>
   16a44:	add	r0, r5, #1
   16a48:	str	r0, [r9, #4]
   16a4c:	lsl	r0, r0, #3
   16a50:	bl	22a6c <__assert_fail@plt+0x112c0>
   16a54:	str	r0, [r9]
   16a58:	mov	r0, #1
   16a5c:	mov	r6, r0
   16a60:	lsl	r0, r0, #1
   16a64:	cmp	r6, r5
   16a68:	bls	16a5c <__assert_fail@plt+0x52b0>
   16a6c:	mov	r0, #12
   16a70:	mov	r1, r6
   16a74:	bl	22a18 <__assert_fail@plt+0x1126c>
   16a78:	str	r0, [r9, #32]
   16a7c:	sub	r0, r6, #1
   16a80:	str	r0, [r9, #68]	; 0x44
   16a84:	bl	1159c <__ctype_get_mb_cur_max@plt>
   16a88:	str	r0, [r9, #92]	; 0x5c
   16a8c:	mov	r0, #14
   16a90:	bl	11740 <nl_langinfo@plt>
   16a94:	ldrb	r1, [r0]
   16a98:	orr	r1, r1, #32
   16a9c:	cmp	r1, #117	; 0x75
   16aa0:	bne	16aec <__assert_fail@plt+0x5340>
   16aa4:	ldrb	r1, [r0, #1]
   16aa8:	orr	r1, r1, #32
   16aac:	cmp	r1, #116	; 0x74
   16ab0:	bne	16aec <__assert_fail@plt+0x5340>
   16ab4:	ldrb	r1, [r0, #2]
   16ab8:	orr	r1, r1, #32
   16abc:	cmp	r1, #102	; 0x66
   16ac0:	bne	16aec <__assert_fail@plt+0x5340>
   16ac4:	ldrb	r1, [r0, #3]!
   16ac8:	cmp	r1, #45	; 0x2d
   16acc:	addeq	r0, r0, #1
   16ad0:	movw	r1, #17180	; 0x431c
   16ad4:	movt	r1, #2
   16ad8:	bl	11458 <strcmp@plt>
   16adc:	cmp	r0, #0
   16ae0:	ldrbeq	r0, [r9, #88]	; 0x58
   16ae4:	orreq	r0, r0, #4
   16ae8:	strbeq	r0, [r9, #88]	; 0x58
   16aec:	ldrb	r0, [r9, #88]	; 0x58
   16af0:	and	r1, r0, #247	; 0xf7
   16af4:	strb	r1, [r9, #88]	; 0x58
   16af8:	ldr	r1, [r9, #92]	; 0x5c
   16afc:	cmp	r1, #2
   16b00:	blt	16b98 <__assert_fail@plt+0x53ec>
   16b04:	tst	r0, #4
   16b08:	bne	16b8c <__assert_fail@plt+0x53e0>
   16b0c:	mov	r8, #1
   16b10:	mov	r0, #32
   16b14:	mov	r1, #1
   16b18:	bl	22a18 <__assert_fail@plt+0x1126c>
   16b1c:	str	r0, [r9, #60]	; 0x3c
   16b20:	cmp	r0, #0
   16b24:	beq	16bb4 <__assert_fail@plt+0x5408>
   16b28:	mov	r7, #0
   16b2c:	mov	r6, #0
   16b30:	mov	r4, #0
   16b34:	add	r5, r7, r4
   16b38:	mov	r0, r5
   16b3c:	bl	116bc <btowc@plt>
   16b40:	cmn	r0, #1
   16b44:	ldrne	r1, [r9, #60]	; 0x3c
   16b48:	ldrne	r2, [r1, r6, lsl #2]
   16b4c:	orrne	r2, r2, r8, lsl r4
   16b50:	strne	r2, [r1, r6, lsl #2]
   16b54:	cmp	r5, #127	; 0x7f
   16b58:	bhi	16b6c <__assert_fail@plt+0x53c0>
   16b5c:	cmp	r5, r0
   16b60:	ldrbne	r0, [r9, #88]	; 0x58
   16b64:	orrne	r0, r0, #8
   16b68:	strbne	r0, [r9, #88]	; 0x58
   16b6c:	add	r4, r4, #1
   16b70:	cmp	r4, #32
   16b74:	bne	16b34 <__assert_fail@plt+0x5388>
   16b78:	add	r6, r6, #1
   16b7c:	add	r7, r7, #32
   16b80:	cmp	r6, #8
   16b84:	bne	16b30 <__assert_fail@plt+0x5384>
   16b88:	b	16b98 <__assert_fail@plt+0x53ec>
   16b8c:	movw	r0, #17132	; 0x42ec
   16b90:	movt	r0, #2
   16b94:	str	r0, [r9, #60]	; 0x3c
   16b98:	ldr	r0, [r9]
   16b9c:	cmp	r0, #0
   16ba0:	ldrne	r1, [r9, #32]
   16ba4:	movne	r0, #0
   16ba8:	cmpne	r1, #0
   16bac:	moveq	r0, #12
   16bb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16bb4:	mov	r0, #12
   16bb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16bbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16bc0:	add	fp, sp, #24
   16bc4:	sub	sp, sp, #8
   16bc8:	mov	r8, r3
   16bcc:	mov	r5, r2
   16bd0:	mov	r7, r1
   16bd4:	mov	r4, r0
   16bd8:	vmov.i32	q8, #0	; 0x00000000
   16bdc:	mov	r0, #80	; 0x50
   16be0:	mov	r1, r4
   16be4:	vst1.32	{d16-d17}, [r1], r0
   16be8:	mov	r0, #0
   16bec:	str	r0, [r1]
   16bf0:	add	r0, r4, #64	; 0x40
   16bf4:	vst1.32	{d16-d17}, [r0]
   16bf8:	add	r0, r4, #48	; 0x30
   16bfc:	vst1.32	{d16-d17}, [r0]
   16c00:	add	r0, r4, #32
   16c04:	vst1.32	{d16-d17}, [r0]
   16c08:	add	r0, r4, #16
   16c0c:	vst1.32	{d16-d17}, [r0]
   16c10:	ldr	r6, [fp, #12]
   16c14:	str	r6, [sp, #4]
   16c18:	ldr	r9, [fp, #8]
   16c1c:	str	r9, [sp]
   16c20:	mov	r0, r7
   16c24:	mov	r1, r2
   16c28:	mov	r2, r4
   16c2c:	bl	17400 <__assert_fail@plt+0x5c54>
   16c30:	cmp	r5, #1
   16c34:	blt	16c4c <__assert_fail@plt+0x54a0>
   16c38:	add	r1, r5, #1
   16c3c:	mov	r0, r4
   16c40:	bl	17458 <__assert_fail@plt+0x5cac>
   16c44:	cmp	r0, #0
   16c48:	bne	16d04 <__assert_fail@plt+0x5558>
   16c4c:	ldrb	r0, [r4, #75]	; 0x4b
   16c50:	cmp	r0, #0
   16c54:	ldrne	r7, [r4, #4]
   16c58:	str	r7, [r4, #4]
   16c5c:	ldr	r0, [r6, #92]	; 0x5c
   16c60:	cmp	r9, #0
   16c64:	beq	16cc0 <__assert_fail@plt+0x5514>
   16c68:	cmp	r0, #2
   16c6c:	blt	16cd4 <__assert_fail@plt+0x5528>
   16c70:	mov	r0, r4
   16c74:	bl	174fc <__assert_fail@plt+0x5d50>
   16c78:	cmp	r0, #0
   16c7c:	bne	16d04 <__assert_fail@plt+0x5558>
   16c80:	ldr	r1, [r4, #32]
   16c84:	mov	r0, #0
   16c88:	cmp	r1, r5
   16c8c:	bge	16d04 <__assert_fail@plt+0x5558>
   16c90:	ldr	r2, [r4, #28]
   16c94:	ldr	r1, [r4, #36]	; 0x24
   16c98:	ldr	r3, [r6, #92]	; 0x5c
   16c9c:	add	r2, r3, r2
   16ca0:	cmp	r1, r2
   16ca4:	bgt	16d04 <__assert_fail@plt+0x5558>
   16ca8:	lsl	r1, r1, #1
   16cac:	mov	r0, r4
   16cb0:	bl	17458 <__assert_fail@plt+0x5cac>
   16cb4:	cmp	r0, #0
   16cb8:	beq	16c70 <__assert_fail@plt+0x54c4>
   16cbc:	b	16d04 <__assert_fail@plt+0x5558>
   16cc0:	cmp	r0, #2
   16cc4:	blt	16ce0 <__assert_fail@plt+0x5534>
   16cc8:	mov	r0, r4
   16ccc:	bl	17b30 <__assert_fail@plt+0x6384>
   16cd0:	b	16d00 <__assert_fail@plt+0x5554>
   16cd4:	mov	r0, r4
   16cd8:	bl	17ac4 <__assert_fail@plt+0x6318>
   16cdc:	b	16d00 <__assert_fail@plt+0x5554>
   16ce0:	cmp	r8, #0
   16ce4:	beq	16cf4 <__assert_fail@plt+0x5548>
   16ce8:	mov	r0, r4
   16cec:	bl	17cc0 <__assert_fail@plt+0x6514>
   16cf0:	b	16d00 <__assert_fail@plt+0x5554>
   16cf4:	ldr	r0, [r4, #36]	; 0x24
   16cf8:	str	r0, [r4, #28]
   16cfc:	str	r0, [r4, #32]
   16d00:	mov	r0, #0
   16d04:	sub	sp, fp, #24
   16d08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16d0c:	push	{r4, r5, fp, lr}
   16d10:	add	fp, sp, #8
   16d14:	ldr	r4, [r0]
   16d18:	ldr	r0, [r4, #56]	; 0x38
   16d1c:	cmp	r0, #0
   16d20:	beq	16d38 <__assert_fail@plt+0x558c>
   16d24:	ldr	r5, [r0]
   16d28:	bl	1312c <__assert_fail@plt+0x1980>
   16d2c:	cmp	r5, #0
   16d30:	mov	r0, r5
   16d34:	bne	16d24 <__assert_fail@plt+0x5578>
   16d38:	mov	r0, #31
   16d3c:	str	r0, [r4, #64]	; 0x40
   16d40:	mov	r5, #0
   16d44:	str	r5, [r4, #52]	; 0x34
   16d48:	str	r5, [r4, #56]	; 0x38
   16d4c:	ldr	r0, [r4, #16]
   16d50:	bl	1312c <__assert_fail@plt+0x1980>
   16d54:	str	r5, [r4, #16]
   16d58:	pop	{r4, r5, fp, pc}
   16d5c:	push	{r4, sl, fp, lr}
   16d60:	add	fp, sp, #8
   16d64:	mov	r4, r0
   16d68:	ldr	r0, [r0, #8]
   16d6c:	bl	1312c <__assert_fail@plt+0x1980>
   16d70:	ldr	r0, [r4, #12]
   16d74:	bl	1312c <__assert_fail@plt+0x1980>
   16d78:	ldrb	r0, [r4, #75]	; 0x4b
   16d7c:	cmp	r0, #0
   16d80:	popeq	{r4, sl, fp, pc}
   16d84:	ldr	r0, [r4, #4]
   16d88:	pop	{r4, sl, fp, lr}
   16d8c:	b	1312c <__assert_fail@plt+0x1980>
   16d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d94:	add	fp, sp, #28
   16d98:	sub	sp, sp, #20
   16d9c:	mov	r8, r3
   16da0:	mov	r4, r2
   16da4:	mov	r7, r1
   16da8:	mov	r5, r0
   16dac:	ldr	r9, [r1]
   16db0:	str	r2, [r9, #128]	; 0x80
   16db4:	orr	r2, r2, #8388608	; 0x800000
   16db8:	add	sl, sp, #12
   16dbc:	mov	r0, sl
   16dc0:	mov	r1, r5
   16dc4:	bl	17d20 <__assert_fail@plt+0x6574>
   16dc8:	mov	r6, #0
   16dcc:	stm	sp, {r6, r8}
   16dd0:	mov	r0, r5
   16dd4:	mov	r1, r7
   16dd8:	mov	r2, sl
   16ddc:	mov	r3, r4
   16de0:	bl	17d40 <__assert_fail@plt+0x6594>
   16de4:	mov	r7, r0
   16de8:	cmp	r0, #0
   16dec:	bne	16dfc <__assert_fail@plt+0x5650>
   16df0:	ldr	r0, [r8]
   16df4:	cmp	r0, #0
   16df8:	bne	16e48 <__assert_fail@plt+0x569c>
   16dfc:	mov	r0, r9
   16e00:	mov	r1, #0
   16e04:	mov	r2, #0
   16e08:	mov	r3, #2
   16e0c:	bl	17eac <__assert_fail@plt+0x6700>
   16e10:	mov	r4, r0
   16e14:	cmp	r7, #0
   16e18:	beq	16e38 <__assert_fail@plt+0x568c>
   16e1c:	mov	r0, r9
   16e20:	mov	r1, r7
   16e24:	mov	r2, r4
   16e28:	mov	r3, #16
   16e2c:	bl	17eac <__assert_fail@plt+0x6700>
   16e30:	mov	r6, r0
   16e34:	b	16e3c <__assert_fail@plt+0x5690>
   16e38:	mov	r6, r4
   16e3c:	cmp	r4, #0
   16e40:	cmpne	r6, #0
   16e44:	beq	16e54 <__assert_fail@plt+0x56a8>
   16e48:	mov	r0, r6
   16e4c:	sub	sp, fp, #28
   16e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e54:	mov	r0, #12
   16e58:	str	r0, [r8]
   16e5c:	mov	r6, #0
   16e60:	b	16e48 <__assert_fail@plt+0x569c>
   16e64:	push	{r4, r5, r6, r7, fp, lr}
   16e68:	add	fp, sp, #16
   16e6c:	mov	r6, r0
   16e70:	ldr	r4, [r0]
   16e74:	ldr	r0, [r4, #4]
   16e78:	lsl	r0, r0, #2
   16e7c:	bl	22a6c <__assert_fail@plt+0x112c0>
   16e80:	str	r0, [r4, #12]
   16e84:	ldr	r0, [r4, #4]
   16e88:	lsl	r0, r0, #2
   16e8c:	bl	22a6c <__assert_fail@plt+0x112c0>
   16e90:	str	r0, [r4, #16]
   16e94:	ldr	r0, [r4, #4]
   16e98:	add	r0, r0, r0, lsl #1
   16e9c:	lsl	r0, r0, #2
   16ea0:	bl	22a6c <__assert_fail@plt+0x112c0>
   16ea4:	str	r0, [r4, #20]
   16ea8:	ldr	r0, [r4, #4]
   16eac:	add	r0, r0, r0, lsl #1
   16eb0:	lsl	r0, r0, #2
   16eb4:	bl	22a6c <__assert_fail@plt+0x112c0>
   16eb8:	str	r0, [r4, #24]
   16ebc:	ldr	r1, [r4, #12]
   16ec0:	mov	r7, #12
   16ec4:	cmp	r1, #0
   16ec8:	ldrne	r1, [r4, #16]
   16ecc:	cmpne	r1, #0
   16ed0:	beq	16ee4 <__assert_fail@plt+0x5738>
   16ed4:	cmp	r0, #0
   16ed8:	ldrne	r0, [r4, #20]
   16edc:	cmpne	r0, #0
   16ee0:	bne	16eec <__assert_fail@plt+0x5740>
   16ee4:	mov	r0, r7
   16ee8:	pop	{r4, r5, r6, r7, fp, pc}
   16eec:	ldr	r0, [r6, #24]
   16ef0:	lsl	r0, r0, #2
   16ef4:	bl	22a6c <__assert_fail@plt+0x112c0>
   16ef8:	str	r0, [r4, #132]	; 0x84
   16efc:	cmp	r0, #0
   16f00:	beq	16fa4 <__assert_fail@plt+0x57f8>
   16f04:	ldr	r0, [r6, #24]
   16f08:	cmp	r0, #0
   16f0c:	beq	16f2c <__assert_fail@plt+0x5780>
   16f10:	ldr	r0, [r4, #132]	; 0x84
   16f14:	mov	r1, #0
   16f18:	str	r1, [r0, r1, lsl #2]
   16f1c:	add	r1, r1, #1
   16f20:	ldr	r2, [r6, #24]
   16f24:	cmp	r1, r2
   16f28:	bcc	16f18 <__assert_fail@plt+0x576c>
   16f2c:	ldr	r0, [r4, #52]	; 0x34
   16f30:	movw	r1, #44604	; 0xae3c
   16f34:	movt	r1, #1
   16f38:	mov	r2, r4
   16f3c:	bl	1adbc <__assert_fail@plt+0x9610>
   16f40:	ldr	r1, [r6, #24]
   16f44:	mov	r0, #0
   16f48:	cmp	r1, #0
   16f4c:	beq	16f88 <__assert_fail@plt+0x57dc>
   16f50:	ldr	r2, [r4, #132]	; 0x84
   16f54:	ldr	r3, [r2]
   16f58:	cmp	r3, #0
   16f5c:	bne	16f8c <__assert_fail@plt+0x57e0>
   16f60:	mov	r3, #1
   16f64:	mov	r0, r3
   16f68:	ldr	r1, [r6, #24]
   16f6c:	cmp	r3, r1
   16f70:	bcs	16f8c <__assert_fail@plt+0x57e0>
   16f74:	ldr	r5, [r2, r0, lsl #2]
   16f78:	add	r3, r0, #1
   16f7c:	cmp	r0, r5
   16f80:	beq	16f64 <__assert_fail@plt+0x57b8>
   16f84:	b	16f8c <__assert_fail@plt+0x57e0>
   16f88:	mov	r1, #0
   16f8c:	cmp	r0, r1
   16f90:	bne	16fa4 <__assert_fail@plt+0x57f8>
   16f94:	ldr	r0, [r4, #132]	; 0x84
   16f98:	bl	1312c <__assert_fail@plt+0x1980>
   16f9c:	mov	r0, #0
   16fa0:	str	r0, [r4, #132]	; 0x84
   16fa4:	ldr	r0, [r4, #52]	; 0x34
   16fa8:	movw	r1, #44756	; 0xaed4
   16fac:	movt	r1, #1
   16fb0:	mov	r2, r6
   16fb4:	bl	188e4 <__assert_fail@plt+0x7138>
   16fb8:	cmp	r0, #0
   16fbc:	bne	1707c <__assert_fail@plt+0x58d0>
   16fc0:	ldr	r0, [r4, #52]	; 0x34
   16fc4:	movw	r1, #44892	; 0xaf5c
   16fc8:	movt	r1, #1
   16fcc:	mov	r2, r4
   16fd0:	bl	188e4 <__assert_fail@plt+0x7138>
   16fd4:	cmp	r0, #0
   16fd8:	bne	1707c <__assert_fail@plt+0x58d0>
   16fdc:	ldr	r0, [r4, #52]	; 0x34
   16fe0:	movw	r1, #45032	; 0xafe8
   16fe4:	movt	r1, #1
   16fe8:	mov	r2, r4
   16fec:	bl	1adbc <__assert_fail@plt+0x9610>
   16ff0:	ldr	r0, [r4, #52]	; 0x34
   16ff4:	movw	r1, #45132	; 0xb04c
   16ff8:	movt	r1, #1
   16ffc:	mov	r2, r4
   17000:	bl	1adbc <__assert_fail@plt+0x9610>
   17004:	cmp	r0, #0
   17008:	bne	1707c <__assert_fail@plt+0x58d0>
   1700c:	mov	r0, r4
   17010:	bl	1b160 <__assert_fail@plt+0x99b4>
   17014:	cmp	r0, #0
   17018:	popne	{r4, r5, r6, r7, fp, pc}
   1701c:	ldrb	r0, [r6, #28]
   17020:	tst	r0, #16
   17024:	bne	1703c <__assert_fail@plt+0x5890>
   17028:	ldr	r0, [r6, #24]
   1702c:	cmp	r0, #0
   17030:	ldrbne	r0, [r4, #88]	; 0x58
   17034:	tstne	r0, #1
   17038:	bne	17048 <__assert_fail@plt+0x589c>
   1703c:	ldr	r0, [r4, #76]	; 0x4c
   17040:	cmp	r0, #0
   17044:	beq	17070 <__assert_fail@plt+0x58c4>
   17048:	ldr	r0, [r4, #8]
   1704c:	add	r0, r0, r0, lsl #1
   17050:	lsl	r0, r0, #2
   17054:	bl	22a6c <__assert_fail@plt+0x112c0>
   17058:	str	r0, [r4, #28]
   1705c:	cmp	r0, #0
   17060:	beq	16ee4 <__assert_fail@plt+0x5738>
   17064:	mov	r0, r4
   17068:	pop	{r4, r5, r6, r7, fp, lr}
   1706c:	b	1b21c <__assert_fail@plt+0x9a70>
   17070:	mov	r7, #0
   17074:	mov	r0, r7
   17078:	pop	{r4, r5, r6, r7, fp, pc}
   1707c:	pop	{r4, r5, r6, r7, fp, pc}
   17080:	push	{r4, r5, r6, r7, fp, lr}
   17084:	add	fp, sp, #16
   17088:	ldr	r1, [r0, #8]
   1708c:	cmp	r1, #0
   17090:	beq	17170 <__assert_fail@plt+0x59c4>
   17094:	ldr	r3, [r0]
   17098:	mov	r5, #0
   1709c:	mov	ip, #1
   170a0:	mov	lr, #139	; 0x8b
   170a4:	mov	r2, #0
   170a8:	mov	r4, #0
   170ac:	add	r1, r3, r4, lsl #3
   170b0:	ldrb	r6, [r1, #4]
   170b4:	sub	r6, r6, #1
   170b8:	cmp	r6, #11
   170bc:	bhi	17218 <__assert_fail@plt+0x5a6c>
   170c0:	add	r7, pc, #0
   170c4:	ldr	pc, [r7, r6, lsl #2]
   170c8:	andeq	r7, r1, r0, asr r1
   170cc:	strdeq	r7, [r1], -r8
   170d0:	andeq	r7, r1, ip, lsl #2
   170d4:	strdeq	r7, [r1], -r8
   170d8:	andeq	r7, r1, r8, ror #2
   170dc:	andeq	r7, r1, r4, lsl r2
   170e0:	andeq	r7, r1, r8, lsl r2
   170e4:	strdeq	r7, [r1], -r8
   170e8:	strdeq	r7, [r1], -r8
   170ec:	strdeq	r7, [r1], -r8
   170f0:	strdeq	r7, [r1], -r8
   170f4:	andeq	r7, r1, r0, lsr r1
   170f8:	ldr	r1, [r0, #8]
   170fc:	add	r4, r4, #1
   17100:	cmp	r4, r1
   17104:	bcc	170ac <__assert_fail@plt+0x5900>
   17108:	b	17178 <__assert_fail@plt+0x59cc>
   1710c:	ldr	r1, [r3, r4, lsl #3]
   17110:	mov	r6, #4
   17114:	ldr	r7, [r1, r6, lsl #2]
   17118:	cmp	r7, #0
   1711c:	popne	{r4, r5, r6, r7, fp, pc}
   17120:	add	r6, r6, #1
   17124:	cmp	r6, #7
   17128:	bls	17114 <__assert_fail@plt+0x5968>
   1712c:	b	170f8 <__assert_fail@plt+0x594c>
   17130:	ldr	r1, [r3, r4, lsl #3]
   17134:	sub	r1, r1, #16
   17138:	ror	r1, r1, #4
   1713c:	cmp	r1, #7
   17140:	bhi	17214 <__assert_fail@plt+0x5a68>
   17144:	tst	lr, ip, lsl r1
   17148:	bne	170f8 <__assert_fail@plt+0x594c>
   1714c:	b	17214 <__assert_fail@plt+0x5a68>
   17150:	ldrsb	r1, [r1]
   17154:	cmp	r1, #0
   17158:	mov	r1, #0
   1715c:	movwlt	r1, #1
   17160:	orr	r2, r2, r1
   17164:	b	170f8 <__assert_fail@plt+0x594c>
   17168:	mov	r5, #1
   1716c:	b	170f8 <__assert_fail@plt+0x594c>
   17170:	mov	r2, #0
   17174:	mov	r5, #0
   17178:	tst	r2, #1
   1717c:	tsteq	r5, #1
   17180:	beq	171e4 <__assert_fail@plt+0x5a38>
   17184:	ldr	r1, [r0, #8]
   17188:	cmp	r1, #0
   1718c:	beq	171e4 <__assert_fail@plt+0x5a38>
   17190:	mov	r2, #0
   17194:	mov	r3, #7
   17198:	ldr	r1, [r0]
   1719c:	add	r4, r1, r2, lsl #3
   171a0:	ldr	r1, [r4, #4]
   171a4:	uxtb	r6, r1
   171a8:	cmp	r6, #5
   171ac:	beq	171cc <__assert_fail@plt+0x5a20>
   171b0:	cmp	r6, #1
   171b4:	bne	171d4 <__assert_fail@plt+0x5a28>
   171b8:	ldrsb	r7, [r4]
   171bc:	cmn	r7, #1
   171c0:	bgt	171d4 <__assert_fail@plt+0x5a28>
   171c4:	bic	r1, r1, #2097152	; 0x200000
   171c8:	b	171d0 <__assert_fail@plt+0x5a24>
   171cc:	bfi	r1, r3, #0, #8
   171d0:	str	r1, [r4, #4]
   171d4:	ldr	r1, [r0, #8]
   171d8:	add	r2, r2, #1
   171dc:	cmp	r2, r1
   171e0:	bcc	17198 <__assert_fail@plt+0x59ec>
   171e4:	mov	r1, #1
   171e8:	str	r1, [r0, #92]	; 0x5c
   171ec:	ldr	r1, [r0, #76]	; 0x4c
   171f0:	mov	r2, #0
   171f4:	cmp	r1, #0
   171f8:	movwgt	r2, #1
   171fc:	orr	r1, r5, r2
   17200:	and	r1, r1, #1
   17204:	ldrb	r2, [r0, #88]	; 0x58
   17208:	and	r2, r2, #249	; 0xf9
   1720c:	orr	r1, r2, r1, lsl #1
   17210:	strb	r1, [r0, #88]	; 0x58
   17214:	pop	{r4, r5, r6, r7, fp, pc}
   17218:	bl	11788 <abort@plt>
   1721c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17220:	add	fp, sp, #24
   17224:	sub	sp, sp, #16
   17228:	mov	r9, r0
   1722c:	ldr	r0, [r0, #24]
   17230:	ldr	r1, [r9, #52]	; 0x34
   17234:	ldr	r1, [r1, #12]
   17238:	ldr	r1, [r1, #28]
   1723c:	str	r1, [r9, #72]	; 0x48
   17240:	add	r1, r1, r1, lsl #1
   17244:	add	r1, r0, r1, lsl #2
   17248:	mov	r0, sp
   1724c:	bl	1bf60 <__assert_fail@plt+0xa7b4>
   17250:	str	r0, [sp, #12]
   17254:	cmp	r0, #0
   17258:	bne	173f8 <__assert_fail@plt+0x5c4c>
   1725c:	ldr	r0, [r9, #76]	; 0x4c
   17260:	cmp	r0, #1
   17264:	ldrge	r0, [sp, #4]
   17268:	cmpge	r0, #1
   1726c:	blt	17338 <__assert_fail@plt+0x5b8c>
   17270:	mov	r7, #0
   17274:	mov	r8, sp
   17278:	ldr	r3, [sp, #8]
   1727c:	ldr	r1, [r3, r7, lsl #2]
   17280:	ldr	r6, [r9]
   17284:	add	r2, r6, r1, lsl #3
   17288:	ldrb	ip, [r2, #4]
   1728c:	cmp	ip, #4
   17290:	bne	17328 <__assert_fail@plt+0x5b7c>
   17294:	mov	r5, #0
   17298:	cmp	r0, #1
   1729c:	blt	172d0 <__assert_fail@plt+0x5b24>
   172a0:	ldr	r4, [r3, r5, lsl #2]
   172a4:	add	r2, r6, r4, lsl #3
   172a8:	ldrb	r2, [r2, #4]
   172ac:	cmp	r2, #9
   172b0:	bne	172c4 <__assert_fail@plt+0x5b18>
   172b4:	ldr	r2, [r6, r1, lsl #3]
   172b8:	ldr	r4, [r6, r4, lsl #3]
   172bc:	cmp	r4, r2
   172c0:	beq	172d0 <__assert_fail@plt+0x5b24>
   172c4:	add	r5, r5, #1
   172c8:	cmp	r5, r0
   172cc:	blt	172a0 <__assert_fail@plt+0x5af4>
   172d0:	cmp	r5, r0
   172d4:	beq	17328 <__assert_fail@plt+0x5b7c>
   172d8:	cmp	ip, #4
   172dc:	bne	17328 <__assert_fail@plt+0x5b7c>
   172e0:	ldr	r0, [r9, #20]
   172e4:	add	r1, r1, r1, lsl #1
   172e8:	add	r0, r0, r1, lsl #2
   172ec:	ldr	r0, [r0, #8]
   172f0:	ldr	r6, [r0]
   172f4:	mov	r0, r8
   172f8:	mov	r1, r6
   172fc:	bl	1bfdc <__assert_fail@plt+0xa830>
   17300:	cmp	r0, #0
   17304:	bne	17328 <__assert_fail@plt+0x5b7c>
   17308:	ldr	r0, [r9, #24]
   1730c:	add	r1, r6, r6, lsl #1
   17310:	add	r1, r0, r1, lsl #2
   17314:	mov	r0, r8
   17318:	bl	1bb5c <__assert_fail@plt+0xa3b0>
   1731c:	mov	r7, #0
   17320:	cmp	r0, #0
   17324:	bne	173f8 <__assert_fail@plt+0x5c4c>
   17328:	add	r7, r7, #1
   1732c:	ldr	r0, [sp, #4]
   17330:	cmp	r7, r0
   17334:	blt	17278 <__assert_fail@plt+0x5acc>
   17338:	add	r0, sp, #12
   1733c:	mov	r2, sp
   17340:	mov	r1, r9
   17344:	mov	r3, #0
   17348:	bl	1c048 <__assert_fail@plt+0xa89c>
   1734c:	str	r0, [r9, #36]	; 0x24
   17350:	cmp	r0, #0
   17354:	beq	173d4 <__assert_fail@plt+0x5c28>
   17358:	ldrsb	r1, [r0, #52]	; 0x34
   1735c:	cmn	r1, #1
   17360:	ble	17374 <__assert_fail@plt+0x5bc8>
   17364:	str	r0, [r9, #40]	; 0x28
   17368:	str	r0, [r9, #44]	; 0x2c
   1736c:	str	r0, [r9, #48]	; 0x30
   17370:	b	173ec <__assert_fail@plt+0x5c40>
   17374:	add	r5, sp, #12
   17378:	mov	r6, sp
   1737c:	mov	r0, r5
   17380:	mov	r1, r9
   17384:	mov	r2, r6
   17388:	mov	r3, #1
   1738c:	bl	1c048 <__assert_fail@plt+0xa89c>
   17390:	str	r0, [r9, #40]	; 0x28
   17394:	mov	r0, r5
   17398:	mov	r1, r9
   1739c:	mov	r2, r6
   173a0:	mov	r3, #2
   173a4:	bl	1c048 <__assert_fail@plt+0xa89c>
   173a8:	str	r0, [r9, #44]	; 0x2c
   173ac:	mov	r0, r5
   173b0:	mov	r1, r9
   173b4:	mov	r2, r6
   173b8:	mov	r3, #6
   173bc:	bl	1c048 <__assert_fail@plt+0xa89c>
   173c0:	str	r0, [r9, #48]	; 0x30
   173c4:	ldr	r1, [r9, #40]	; 0x28
   173c8:	cmp	r1, #0
   173cc:	cmpne	r0, #0
   173d0:	bne	173e0 <__assert_fail@plt+0x5c34>
   173d4:	ldr	r0, [sp, #12]
   173d8:	sub	sp, fp, #24
   173dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   173e0:	ldr	r0, [r9, #44]	; 0x2c
   173e4:	cmp	r0, #0
   173e8:	beq	173d4 <__assert_fail@plt+0x5c28>
   173ec:	ldr	r0, [sp, #8]
   173f0:	bl	1312c <__assert_fail@plt+0x1980>
   173f4:	mov	r0, #0
   173f8:	sub	sp, fp, #24
   173fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17400:	str	r1, [r2, #48]	; 0x30
   17404:	str	r0, [r2]
   17408:	str	r1, [r2, #44]	; 0x2c
   1740c:	str	r3, [r2, #64]	; 0x40
   17410:	ldr	r0, [sp]
   17414:	strb	r0, [r2, #72]	; 0x48
   17418:	cmp	r3, #0
   1741c:	movwne	r3, #1
   17420:	orr	r0, r3, r0
   17424:	strb	r0, [r2, #75]	; 0x4b
   17428:	ldr	r0, [sp, #4]
   1742c:	ldr	r3, [r0, #92]	; 0x5c
   17430:	str	r3, [r2, #80]	; 0x50
   17434:	ldrb	r3, [r0, #88]	; 0x58
   17438:	ubfx	r3, r3, #2, #1
   1743c:	strb	r3, [r2, #73]	; 0x49
   17440:	ldrb	r0, [r0, #88]	; 0x58
   17444:	str	r1, [r2, #56]	; 0x38
   17448:	str	r1, [r2, #52]	; 0x34
   1744c:	ubfx	r0, r0, #3, #1
   17450:	strb	r0, [r2, #74]	; 0x4a
   17454:	bx	lr
   17458:	push	{r4, r5, r6, r7, fp, lr}
   1745c:	add	fp, sp, #16
   17460:	mov	r4, r1
   17464:	mov	r5, r0
   17468:	ldr	r0, [r0, #80]	; 0x50
   1746c:	cmp	r0, #2
   17470:	blt	174bc <__assert_fail@plt+0x5d10>
   17474:	mov	r6, #12
   17478:	cmn	r4, #-1073741823	; 0xc0000001
   1747c:	bhi	174e8 <__assert_fail@plt+0x5d3c>
   17480:	ldr	r0, [r5, #8]
   17484:	lsl	r7, r4, #2
   17488:	mov	r1, r7
   1748c:	bl	22a9c <__assert_fail@plt+0x112f0>
   17490:	cmp	r0, #0
   17494:	beq	174e8 <__assert_fail@plt+0x5d3c>
   17498:	str	r0, [r5, #8]
   1749c:	ldr	r0, [r5, #12]
   174a0:	cmp	r0, #0
   174a4:	beq	174bc <__assert_fail@plt+0x5d10>
   174a8:	mov	r1, r7
   174ac:	bl	22a9c <__assert_fail@plt+0x112f0>
   174b0:	cmp	r0, #0
   174b4:	beq	174e8 <__assert_fail@plt+0x5d3c>
   174b8:	str	r0, [r5, #12]
   174bc:	ldrb	r0, [r5, #75]	; 0x4b
   174c0:	cmp	r0, #0
   174c4:	beq	174e0 <__assert_fail@plt+0x5d34>
   174c8:	ldr	r0, [r5, #4]
   174cc:	mov	r1, r4
   174d0:	bl	22a9c <__assert_fail@plt+0x112f0>
   174d4:	cmp	r0, #0
   174d8:	beq	174f0 <__assert_fail@plt+0x5d44>
   174dc:	str	r0, [r5, #4]
   174e0:	str	r4, [r5, #36]	; 0x24
   174e4:	mov	r6, #0
   174e8:	mov	r0, r6
   174ec:	pop	{r4, r5, r6, r7, fp, pc}
   174f0:	mov	r6, #12
   174f4:	mov	r0, r6
   174f8:	pop	{r4, r5, r6, r7, fp, pc}
   174fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17500:	add	fp, sp, #28
   17504:	sub	sp, sp, #92	; 0x5c
   17508:	mov	r6, r0
   1750c:	ldrb	r0, [r0, #74]	; 0x4a
   17510:	ldr	sl, [r6, #28]
   17514:	ldr	r5, [r6, #36]	; 0x24
   17518:	ldr	r1, [r6, #48]	; 0x30
   1751c:	cmp	r5, r1
   17520:	movgt	r5, r1
   17524:	cmp	r0, #0
   17528:	str	r6, [sp]
   1752c:	bne	17548 <__assert_fail@plt+0x5d9c>
   17530:	ldr	r0, [r6, #64]	; 0x40
   17534:	cmp	r0, #0
   17538:	bne	17548 <__assert_fail@plt+0x5d9c>
   1753c:	ldrb	r0, [r6, #76]	; 0x4c
   17540:	cmp	r0, #0
   17544:	beq	17550 <__assert_fail@plt+0x5da4>
   17548:	ldr	ip, [r6, #32]
   1754c:	b	17768 <__assert_fail@plt+0x5fbc>
   17550:	cmp	r5, sl
   17554:	ble	17564 <__assert_fail@plt+0x5db8>
   17558:	add	r8, r6, #16
   1755c:	mov	r9, r5
   17560:	b	175bc <__assert_fail@plt+0x5e10>
   17564:	mov	ip, sl
   17568:	b	17a90 <__assert_fail@plt+0x62e4>
   1756c:	add	r0, r4, #1
   17570:	cmp	r0, #2
   17574:	bcc	1758c <__assert_fail@plt+0x5de0>
   17578:	ldr	r1, [sp]
   1757c:	ldr	r0, [r1, #36]	; 0x24
   17580:	ldr	r1, [r1, #48]	; 0x30
   17584:	cmp	r0, r1
   17588:	blt	17724 <__assert_fail@plt+0x5f78>
   1758c:	ldr	r1, [sp]
   17590:	ldr	r0, [r1, #4]
   17594:	strb	r6, [r0, r7]
   17598:	ldr	r0, [r1, #8]
   1759c:	str	r6, [r0, r7, lsl #2]
   175a0:	add	sl, r7, #1
   175a4:	cmn	r4, #1
   175a8:	bne	17700 <__assert_fail@plt+0x5f54>
   175ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   175b0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   175b4:	stm	r8, {r0, r1}
   175b8:	b	17700 <__assert_fail@plt+0x5f54>
   175bc:	ldr	r0, [r6]
   175c0:	ldr	r1, [r6, #24]
   175c4:	add	r1, r1, sl
   175c8:	ldrb	r6, [r0, r1]
   175cc:	tst	r6, #128	; 0x80
   175d0:	bne	17618 <__assert_fail@plt+0x5e6c>
   175d4:	mov	r0, r8
   175d8:	mov	r4, sl
   175dc:	bl	1150c <mbsinit@plt>
   175e0:	cmp	r0, #0
   175e4:	beq	17618 <__assert_fail@plt+0x5e6c>
   175e8:	mov	r0, r6
   175ec:	bl	11770 <towupper@plt>
   175f0:	mov	sl, r4
   175f4:	cmp	r0, #127	; 0x7f
   175f8:	bhi	17618 <__assert_fail@plt+0x5e6c>
   175fc:	ldr	r2, [sp]
   17600:	ldr	r1, [r2, #4]
   17604:	strb	r0, [r1, sl]
   17608:	ldr	r1, [r2, #8]
   1760c:	str	r0, [r1, sl, lsl #2]
   17610:	add	sl, sl, #1
   17614:	b	17700 <__assert_fail@plt+0x5f54>
   17618:	ldm	r8, {r0, r1}
   1761c:	str	r1, [fp, #-36]	; 0xffffffdc
   17620:	str	r0, [fp, #-40]	; 0xffffffd8
   17624:	sub	r2, r5, sl
   17628:	ldr	r1, [sp]
   1762c:	ldr	r0, [r1]
   17630:	ldr	r1, [r1, #24]
   17634:	add	r0, r0, r1
   17638:	mov	r7, sl
   1763c:	add	r1, r0, sl
   17640:	add	r0, sp, #12
   17644:	mov	r3, r8
   17648:	bl	23234 <__assert_fail@plt+0x11a88>
   1764c:	mov	r4, r0
   17650:	sub	r0, r0, #1
   17654:	cmn	r0, #4
   17658:	bhi	1756c <__assert_fail@plt+0x5dc0>
   1765c:	ldr	r0, [sp, #12]
   17660:	bl	11770 <towupper@plt>
   17664:	mov	r6, r0
   17668:	ldr	r0, [sp, #12]
   1766c:	cmp	r6, r0
   17670:	add	sl, sp, #16
   17674:	bne	17698 <__assert_fail@plt+0x5eec>
   17678:	ldr	r5, [sp]
   1767c:	ldr	r1, [r5]
   17680:	ldr	r0, [r5, #4]
   17684:	ldr	r2, [r5, #24]
   17688:	add	r0, r0, r7
   1768c:	add	r1, r1, r2
   17690:	add	r1, r1, r7
   17694:	b	176c0 <__assert_fail@plt+0x5f14>
   17698:	mov	r0, sl
   1769c:	mov	r1, r6
   176a0:	sub	r2, fp, #40	; 0x28
   176a4:	bl	11440 <wcrtomb@plt>
   176a8:	cmp	r4, r0
   176ac:	bne	17714 <__assert_fail@plt+0x5f68>
   176b0:	ldr	r5, [sp]
   176b4:	ldr	r0, [r5, #4]
   176b8:	add	r0, r0, r7
   176bc:	mov	r1, sl
   176c0:	mov	r2, r4
   176c4:	bl	114d0 <memcpy@plt>
   176c8:	ldr	r0, [r5, #8]
   176cc:	str	r6, [r0, r7, lsl #2]
   176d0:	add	r6, r4, r7
   176d4:	add	sl, r7, #1
   176d8:	cmp	sl, r6
   176dc:	mov	r5, r9
   176e0:	bge	17700 <__assert_fail@plt+0x5f54>
   176e4:	mvn	r1, #3
   176e8:	add	r2, r1, r4, lsl #2
   176ec:	add	r0, r0, r7, lsl #2
   176f0:	add	r0, r0, #4
   176f4:	mov	r1, #255	; 0xff
   176f8:	bl	116b0 <memset@plt>
   176fc:	mov	sl, r6
   17700:	cmp	r5, sl
   17704:	mov	ip, sl
   17708:	ldr	r6, [sp]
   1770c:	bgt	175bc <__assert_fail@plt+0x5e10>
   17710:	b	17a90 <__assert_fail@plt+0x62e4>
   17714:	mov	ip, r7
   17718:	mov	sl, r7
   1771c:	ldr	r6, [sp]
   17720:	b	17770 <__assert_fail@plt+0x5fc4>
   17724:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17728:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1772c:	stm	r8, {r0, r1}
   17730:	mov	ip, r7
   17734:	mov	sl, r7
   17738:	ldr	r6, [sp]
   1773c:	b	17a90 <__assert_fail@plt+0x62e4>
   17740:	mvn	r1, #3
   17744:	add	r2, r1, r5, lsl #2
   17748:	add	r0, r0, sl, lsl #2
   1774c:	add	r0, r0, #4
   17750:	mov	r1, #255	; 0xff
   17754:	mov	r5, ip
   17758:	bl	116b0 <memset@plt>
   1775c:	mov	ip, r5
   17760:	mov	sl, r4
   17764:	ldr	r5, [sp, #4]
   17768:	cmp	sl, r5
   1776c:	bge	17a90 <__assert_fail@plt+0x62e4>
   17770:	mov	r3, r6
   17774:	ldr	r0, [r6, #16]!
   17778:	ldr	r1, [r6, #4]
   1777c:	str	r0, [fp, #-40]	; 0xffffffd8
   17780:	str	r1, [fp, #-36]	; 0xffffffdc
   17784:	str	r5, [sp, #4]
   17788:	sub	r2, r5, sl
   1778c:	ldr	r0, [r6, #48]	; 0x30
   17790:	cmp	r0, #0
   17794:	bne	1785c <__assert_fail@plt+0x60b0>
   17798:	ldr	r0, [r3]
   1779c:	ldr	r1, [r3, #24]
   177a0:	add	r0, r0, r1
   177a4:	add	r4, r0, ip
   177a8:	mov	r9, ip
   177ac:	add	r0, sp, #8
   177b0:	mov	r1, r4
   177b4:	mov	r3, r6
   177b8:	bl	23234 <__assert_fail@plt+0x11a88>
   177bc:	mov	r5, r0
   177c0:	sub	r8, r0, #1
   177c4:	cmn	r8, #4
   177c8:	bhi	178b8 <__assert_fail@plt+0x610c>
   177cc:	ldr	r0, [sp, #8]
   177d0:	bl	11770 <towupper@plt>
   177d4:	mov	r7, r0
   177d8:	ldr	r0, [sp, #8]
   177dc:	cmp	r7, r0
   177e0:	bne	177f8 <__assert_fail@plt+0x604c>
   177e4:	ldr	r6, [sp]
   177e8:	ldr	r0, [r6, #4]
   177ec:	add	r0, r0, sl
   177f0:	mov	r1, r4
   177f4:	b	17820 <__assert_fail@plt+0x6074>
   177f8:	add	r0, sp, #16
   177fc:	sub	r2, fp, #40	; 0x28
   17800:	mov	r1, r7
   17804:	bl	11440 <wcrtomb@plt>
   17808:	cmp	r0, r5
   1780c:	bne	17934 <__assert_fail@plt+0x6188>
   17810:	ldr	r6, [sp]
   17814:	ldr	r0, [r6, #4]
   17818:	add	r0, r0, sl
   1781c:	add	r1, sp, #16
   17820:	mov	r2, r5
   17824:	bl	114d0 <memcpy@plt>
   17828:	ldrb	r0, [r6, #76]	; 0x4c
   1782c:	cmp	r0, #0
   17830:	mov	ip, r9
   17834:	bne	17a5c <__assert_fail@plt+0x62b0>
   17838:	ldr	r0, [r6, #8]
   1783c:	str	r7, [r0, sl, lsl #2]
   17840:	add	r4, r5, sl
   17844:	add	ip, r5, ip
   17848:	add	r1, sl, #1
   1784c:	cmp	r1, r4
   17850:	blt	17740 <__assert_fail@plt+0x5f94>
   17854:	mov	sl, r1
   17858:	b	17764 <__assert_fail@plt+0x5fb8>
   1785c:	add	r4, sp, #16
   17860:	cmp	r2, #1
   17864:	ldrge	r1, [sp]
   17868:	ldrge	r1, [r1, #80]	; 0x50
   1786c:	cmpge	r1, #1
   17870:	blt	177a8 <__assert_fail@plt+0x5ffc>
   17874:	mov	r1, #0
   17878:	add	r4, sp, #16
   1787c:	ldr	r5, [sp]
   17880:	ldr	r3, [r5]
   17884:	ldr	r7, [r5, #24]
   17888:	add	r3, r3, r7
   1788c:	add	r3, r3, ip
   17890:	ldrb	r3, [r3, r1]
   17894:	ldrb	r3, [r0, r3]
   17898:	strb	r3, [r4, r1]
   1789c:	add	r1, r1, #1
   178a0:	cmp	r1, r2
   178a4:	bge	177a8 <__assert_fail@plt+0x5ffc>
   178a8:	ldr	r3, [r5, #80]	; 0x50
   178ac:	cmp	r1, r3
   178b0:	blt	17880 <__assert_fail@plt+0x60d4>
   178b4:	b	177a8 <__assert_fail@plt+0x5ffc>
   178b8:	add	r0, r5, #1
   178bc:	cmp	r0, #2
   178c0:	mov	ip, r9
   178c4:	ldr	r3, [sp]
   178c8:	bcc	178dc <__assert_fail@plt+0x6130>
   178cc:	ldr	r0, [r3, #36]	; 0x24
   178d0:	ldr	r1, [r3, #48]	; 0x30
   178d4:	cmp	r0, r1
   178d8:	blt	17a80 <__assert_fail@plt+0x62d4>
   178dc:	ldr	r0, [r3]
   178e0:	ldr	r2, [r3, #24]
   178e4:	ldr	r1, [r3, #64]	; 0x40
   178e8:	add	r2, r2, ip
   178ec:	ldrb	r0, [r0, r2]
   178f0:	cmp	r1, #0
   178f4:	ldrbne	r0, [r1, r0]
   178f8:	ldr	r2, [sp]
   178fc:	ldr	r1, [r2, #4]
   17900:	strb	r0, [r1, sl]
   17904:	ldrb	r1, [r2, #76]	; 0x4c
   17908:	cmp	r1, #0
   1790c:	ldrne	r1, [r2, #12]
   17910:	strne	ip, [r1, sl, lsl #2]
   17914:	ldr	r1, [r2, #8]
   17918:	str	r0, [r1, sl, lsl #2]
   1791c:	add	sl, sl, #1
   17920:	add	ip, ip, #1
   17924:	cmn	r5, #1
   17928:	beq	17ab0 <__assert_fail@plt+0x6304>
   1792c:	ldr	r6, [sp]
   17930:	b	17764 <__assert_fail@plt+0x5fb8>
   17934:	mov	r2, r0
   17938:	cmn	r0, #1
   1793c:	beq	177e4 <__assert_fail@plt+0x6038>
   17940:	mov	ip, r9
   17944:	add	r1, r2, sl
   17948:	ldr	r3, [sp]
   1794c:	ldr	r0, [r3, #36]	; 0x24
   17950:	cmp	r1, r0
   17954:	bhi	17a80 <__assert_fail@plt+0x62d4>
   17958:	str	r1, [sp, #4]
   1795c:	ldr	r1, [r3, #12]
   17960:	cmp	r1, #0
   17964:	mov	r6, r3
   17968:	bne	17988 <__assert_fail@plt+0x61dc>
   1796c:	lsl	r0, r0, #2
   17970:	mov	r4, r2
   17974:	bl	22a6c <__assert_fail@plt+0x112c0>
   17978:	mov	r2, r4
   1797c:	str	r0, [r6, #12]
   17980:	cmp	r0, #0
   17984:	beq	17aa4 <__assert_fail@plt+0x62f8>
   17988:	ldrb	r0, [r6, #76]	; 0x4c
   1798c:	cmp	r0, #0
   17990:	bne	179bc <__assert_fail@plt+0x6210>
   17994:	cmp	sl, #0
   17998:	beq	179b4 <__assert_fail@plt+0x6208>
   1799c:	ldr	r0, [r6, #12]
   179a0:	mov	r1, #0
   179a4:	str	r1, [r0, r1, lsl #2]
   179a8:	add	r1, r1, #1
   179ac:	cmp	sl, r1
   179b0:	bne	179a4 <__assert_fail@plt+0x61f8>
   179b4:	mov	r0, #1
   179b8:	strb	r0, [r6, #76]	; 0x4c
   179bc:	ldr	r0, [r6, #4]
   179c0:	add	r0, r0, sl
   179c4:	add	r1, sp, #16
   179c8:	mov	r4, r2
   179cc:	bl	114d0 <memcpy@plt>
   179d0:	ldr	r1, [r6, #8]
   179d4:	str	r7, [r1, sl, lsl #2]
   179d8:	ldr	r0, [r6, #12]
   179dc:	mov	ip, r9
   179e0:	str	r9, [r0, sl, lsl #2]
   179e4:	cmp	r4, #2
   179e8:	bcc	17a20 <__assert_fail@plt+0x6274>
   179ec:	add	r0, r0, sl, lsl #2
   179f0:	add	r1, r1, sl, lsl #2
   179f4:	mov	r2, #1
   179f8:	mvn	r3, #0
   179fc:	cmp	r2, r5
   17a00:	mov	r7, r8
   17a04:	movcc	r7, r2
   17a08:	add	r7, r7, ip
   17a0c:	str	r7, [r0, r2, lsl #2]
   17a10:	str	r3, [r1, r2, lsl #2]
   17a14:	add	r2, r2, #1
   17a18:	cmp	r4, r2
   17a1c:	bne	179fc <__assert_fail@plt+0x6250>
   17a20:	sub	r1, r4, r5
   17a24:	ldr	r0, [r6, #48]	; 0x30
   17a28:	ldr	r2, [r6, #52]	; 0x34
   17a2c:	add	r0, r0, r1
   17a30:	str	r0, [r6, #48]	; 0x30
   17a34:	cmp	r2, ip
   17a38:	ldrgt	r2, [r6, #56]	; 0x38
   17a3c:	addgt	r1, r2, r1
   17a40:	strgt	r1, [r6, #56]	; 0x38
   17a44:	add	ip, r5, ip
   17a48:	ldr	r5, [r6, #36]	; 0x24
   17a4c:	cmp	r5, r0
   17a50:	movgt	r5, r0
   17a54:	ldr	sl, [sp, #4]
   17a58:	b	17768 <__assert_fail@plt+0x5fbc>
   17a5c:	ldr	r0, [r6, #12]
   17a60:	add	r0, r0, sl, lsl #2
   17a64:	mov	r1, ip
   17a68:	mov	r2, r5
   17a6c:	str	r1, [r0], #4
   17a70:	add	r1, r1, #1
   17a74:	subs	r2, r2, #1
   17a78:	bne	17a6c <__assert_fail@plt+0x62c0>
   17a7c:	b	17838 <__assert_fail@plt+0x608c>
   17a80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17a84:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17a88:	stm	r6, {r0, r1}
   17a8c:	mov	r6, r3
   17a90:	str	sl, [r6, #28]
   17a94:	str	ip, [r6, #32]
   17a98:	mov	r0, #0
   17a9c:	sub	sp, fp, #28
   17aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aa4:	mov	r0, #12
   17aa8:	sub	sp, fp, #28
   17aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ab0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17ab4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17ab8:	stm	r6, {r0, r1}
   17abc:	ldr	r6, [sp]
   17ac0:	b	17764 <__assert_fail@plt+0x5fb8>
   17ac4:	push	{r4, r5, r6, sl, fp, lr}
   17ac8:	add	fp, sp, #16
   17acc:	mov	r4, r0
   17ad0:	ldr	r5, [r0, #28]
   17ad4:	ldr	r6, [r0, #36]	; 0x24
   17ad8:	ldr	r0, [r0, #48]	; 0x30
   17adc:	cmp	r6, r0
   17ae0:	movgt	r6, r0
   17ae4:	cmp	r5, r6
   17ae8:	bge	17b24 <__assert_fail@plt+0x6378>
   17aec:	ldr	r0, [r4]
   17af0:	ldr	r2, [r4, #24]
   17af4:	ldr	r1, [r4, #64]	; 0x40
   17af8:	add	r0, r0, r2
   17afc:	ldrb	r0, [r0, r5]
   17b00:	cmp	r1, #0
   17b04:	ldrbne	r0, [r1, r0]
   17b08:	bl	11728 <toupper@plt>
   17b0c:	ldr	r1, [r4, #4]
   17b10:	strb	r0, [r1, r5]
   17b14:	add	r5, r5, #1
   17b18:	cmp	r5, r6
   17b1c:	blt	17aec <__assert_fail@plt+0x6340>
   17b20:	mov	r5, r6
   17b24:	str	r5, [r4, #28]
   17b28:	str	r5, [r4, #32]
   17b2c:	pop	{r4, r5, r6, sl, fp, pc}
   17b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b34:	add	fp, sp, #28
   17b38:	sub	sp, sp, #68	; 0x44
   17b3c:	mov	r4, r0
   17b40:	ldr	r6, [r0, #28]
   17b44:	ldr	r7, [r0, #36]	; 0x24
   17b48:	ldr	r0, [r0, #48]	; 0x30
   17b4c:	cmp	r7, r0
   17b50:	movgt	r7, r0
   17b54:	cmp	r7, r6
   17b58:	ble	17cac <__assert_fail@plt+0x6500>
   17b5c:	add	r8, r4, #16
   17b60:	mov	r5, sp
   17b64:	sub	r2, r7, r6
   17b68:	ldm	r8, {r9, sl}
   17b6c:	ldr	r0, [r4, #64]	; 0x40
   17b70:	cmp	r0, #0
   17b74:	bne	17c34 <__assert_fail@plt+0x6488>
   17b78:	ldr	r0, [r4]
   17b7c:	ldr	r1, [r4, #24]
   17b80:	add	r0, r0, r1
   17b84:	add	r1, r0, r6
   17b88:	mov	r0, r5
   17b8c:	mov	r3, r8
   17b90:	bl	23234 <__assert_fail@plt+0x11a88>
   17b94:	add	r1, r0, #1
   17b98:	cmp	r1, #2
   17b9c:	bcc	17bb8 <__assert_fail@plt+0x640c>
   17ba0:	cmn	r0, #2
   17ba4:	bne	17be4 <__assert_fail@plt+0x6438>
   17ba8:	ldr	r0, [r4, #36]	; 0x24
   17bac:	ldr	r1, [r4, #48]	; 0x30
   17bb0:	cmp	r0, r1
   17bb4:	blt	17ca8 <__assert_fail@plt+0x64fc>
   17bb8:	ldr	r0, [r4]
   17bbc:	ldr	r1, [r4, #24]
   17bc0:	add	r1, r1, r6
   17bc4:	ldrb	r0, [r0, r1]
   17bc8:	str	r0, [sp]
   17bcc:	ldr	r1, [r4, #64]	; 0x40
   17bd0:	cmp	r1, #0
   17bd4:	ldrbne	r0, [r1, r0]
   17bd8:	strne	r0, [sp]
   17bdc:	stm	r8, {r9, sl}
   17be0:	mov	r0, #1
   17be4:	mov	r9, r5
   17be8:	ldr	r3, [r4, #8]
   17bec:	ldr	r1, [sp]
   17bf0:	str	r1, [r3, r6, lsl #2]
   17bf4:	add	r5, r0, r6
   17bf8:	add	r1, r6, #1
   17bfc:	cmp	r1, r5
   17c00:	bge	17c20 <__assert_fail@plt+0x6474>
   17c04:	mvn	r1, #3
   17c08:	add	r2, r1, r0, lsl #2
   17c0c:	add	r0, r3, r6, lsl #2
   17c10:	add	r0, r0, #4
   17c14:	mov	r1, #255	; 0xff
   17c18:	bl	116b0 <memset@plt>
   17c1c:	mov	r1, r5
   17c20:	cmp	r7, r1
   17c24:	mov	r6, r1
   17c28:	mov	r5, r9
   17c2c:	bgt	17b64 <__assert_fail@plt+0x63b8>
   17c30:	b	17cb0 <__assert_fail@plt+0x6504>
   17c34:	cmp	r2, #1
   17c38:	add	r1, sp, #4
   17c3c:	blt	17b88 <__assert_fail@plt+0x63dc>
   17c40:	ldr	r0, [r4, #80]	; 0x50
   17c44:	cmp	r0, #1
   17c48:	add	r1, sp, #4
   17c4c:	blt	17b88 <__assert_fail@plt+0x63dc>
   17c50:	mov	lr, r5
   17c54:	mov	r0, #0
   17c58:	ldm	r4, {r1, ip}
   17c5c:	ldr	r5, [r4, #24]
   17c60:	ldr	r3, [r4, #64]	; 0x40
   17c64:	add	r1, r1, r5
   17c68:	add	r1, r1, r6
   17c6c:	ldrb	r1, [r1, r0]
   17c70:	ldrb	r1, [r3, r1]
   17c74:	add	r3, ip, r6
   17c78:	strb	r1, [r3, r0]
   17c7c:	add	r3, sp, #4
   17c80:	strb	r1, [r3, r0]
   17c84:	add	r0, r0, #1
   17c88:	cmp	r0, r2
   17c8c:	bge	17c9c <__assert_fail@plt+0x64f0>
   17c90:	ldr	r1, [r4, #80]	; 0x50
   17c94:	cmp	r0, r1
   17c98:	blt	17c58 <__assert_fail@plt+0x64ac>
   17c9c:	add	r1, sp, #4
   17ca0:	mov	r5, lr
   17ca4:	b	17b88 <__assert_fail@plt+0x63dc>
   17ca8:	stm	r8, {r9, sl}
   17cac:	mov	r1, r6
   17cb0:	str	r1, [r4, #28]
   17cb4:	str	r1, [r4, #32]
   17cb8:	sub	sp, fp, #28
   17cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cc0:	ldr	r1, [r0, #28]
   17cc4:	ldr	ip, [r0, #36]	; 0x24
   17cc8:	ldr	r3, [r0, #48]	; 0x30
   17ccc:	cmp	ip, r3
   17cd0:	movgt	ip, r3
   17cd4:	cmp	r1, ip
   17cd8:	bge	17d14 <__assert_fail@plt+0x6568>
   17cdc:	push	{r4, sl, fp, lr}
   17ce0:	add	fp, sp, #8
   17ce4:	ldm	r0, {r3, lr}
   17ce8:	ldr	r2, [r0, #24]
   17cec:	ldr	r4, [r0, #64]	; 0x40
   17cf0:	add	r2, r3, r2
   17cf4:	ldrb	r2, [r2, r1]
   17cf8:	ldrb	r2, [r4, r2]
   17cfc:	strb	r2, [lr, r1]
   17d00:	add	r1, r1, #1
   17d04:	cmp	r1, ip
   17d08:	blt	17ce4 <__assert_fail@plt+0x6538>
   17d0c:	mov	r1, ip
   17d10:	pop	{r4, sl, fp, lr}
   17d14:	str	r1, [r0, #28]
   17d18:	str	r1, [r0, #32]
   17d1c:	bx	lr
   17d20:	push	{r4, sl, fp, lr}
   17d24:	add	fp, sp, #8
   17d28:	mov	r4, r1
   17d2c:	bl	17ee4 <__assert_fail@plt+0x6738>
   17d30:	ldr	r1, [r4, #40]	; 0x28
   17d34:	add	r0, r1, r0
   17d38:	str	r0, [r4, #40]	; 0x28
   17d3c:	pop	{r4, sl, fp, pc}
   17d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d44:	add	fp, sp, #28
   17d48:	sub	sp, sp, #28
   17d4c:	mov	r5, r2
   17d50:	mov	sl, r0
   17d54:	ldr	r4, [r1]
   17d58:	ldr	r0, [r4, #84]	; 0x54
   17d5c:	str	r0, [sp, #12]
   17d60:	ldr	r7, [fp, #12]
   17d64:	str	r7, [sp, #4]
   17d68:	ldr	r8, [fp, #8]
   17d6c:	str	r8, [sp]
   17d70:	mov	r0, sl
   17d74:	str	r1, [sp, #16]
   17d78:	str	r3, [sp, #20]
   17d7c:	bl	18774 <__assert_fail@plt+0x6fc8>
   17d80:	mov	r6, r0
   17d84:	cmp	r0, #0
   17d88:	bne	17d98 <__assert_fail@plt+0x65ec>
   17d8c:	ldr	r0, [r7]
   17d90:	cmp	r0, #0
   17d94:	bne	17e80 <__assert_fail@plt+0x66d4>
   17d98:	ldr	r0, [sp, #20]
   17d9c:	orr	r7, r0, #8388608	; 0x800000
   17da0:	ldrb	r0, [r5, #4]
   17da4:	cmp	r0, #10
   17da8:	bne	17e64 <__assert_fail@plt+0x66b8>
   17dac:	mov	r0, r5
   17db0:	mov	r1, sl
   17db4:	mov	r2, r7
   17db8:	bl	17d20 <__assert_fail@plt+0x6574>
   17dbc:	ldrb	r0, [r5, #4]
   17dc0:	orr	r1, r0, #8
   17dc4:	mov	r2, #0
   17dc8:	cmp	r1, #10
   17dcc:	bne	17df0 <__assert_fail@plt+0x6644>
   17dd0:	mov	r0, r4
   17dd4:	mov	r1, r6
   17dd8:	mov	r3, #10
   17ddc:	bl	17eac <__assert_fail@plt+0x6700>
   17de0:	mov	r6, r0
   17de4:	cmp	r0, #0
   17de8:	bne	17da0 <__assert_fail@plt+0x65f4>
   17dec:	b	17e74 <__assert_fail@plt+0x66c8>
   17df0:	cmp	r8, #0
   17df4:	beq	17e00 <__assert_fail@plt+0x6654>
   17df8:	cmp	r0, #9
   17dfc:	beq	17dd0 <__assert_fail@plt+0x6624>
   17e00:	ldr	r0, [r4, #84]	; 0x54
   17e04:	str	r0, [sp, #24]
   17e08:	ldr	r0, [sp, #12]
   17e0c:	str	r0, [r4, #84]	; 0x54
   17e10:	mov	r9, r8
   17e14:	str	r8, [sp]
   17e18:	ldr	r8, [fp, #12]
   17e1c:	str	r8, [sp, #4]
   17e20:	mov	r0, sl
   17e24:	ldr	r1, [sp, #16]
   17e28:	mov	r2, r5
   17e2c:	ldr	r3, [sp, #20]
   17e30:	bl	18774 <__assert_fail@plt+0x6fc8>
   17e34:	mov	r2, r0
   17e38:	cmp	r0, #0
   17e3c:	bne	17e4c <__assert_fail@plt+0x66a0>
   17e40:	ldr	r0, [r8]
   17e44:	cmp	r0, #0
   17e48:	bne	17e88 <__assert_fail@plt+0x66dc>
   17e4c:	ldr	r0, [r4, #84]	; 0x54
   17e50:	ldr	r1, [sp, #24]
   17e54:	orr	r0, r0, r1
   17e58:	str	r0, [r4, #84]	; 0x54
   17e5c:	mov	r8, r9
   17e60:	b	17dd0 <__assert_fail@plt+0x6624>
   17e64:	mov	r4, r6
   17e68:	mov	r0, r4
   17e6c:	sub	sp, fp, #28
   17e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e74:	mov	r0, #12
   17e78:	ldr	r1, [fp, #12]
   17e7c:	str	r0, [r1]
   17e80:	mov	r4, #0
   17e84:	b	17e68 <__assert_fail@plt+0x66bc>
   17e88:	cmp	r6, #0
   17e8c:	beq	17e80 <__assert_fail@plt+0x66d4>
   17e90:	movw	r1, #35164	; 0x895c
   17e94:	movt	r1, #1
   17e98:	mov	r4, #0
   17e9c:	mov	r0, r6
   17ea0:	mov	r2, #0
   17ea4:	bl	188e4 <__assert_fail@plt+0x7138>
   17ea8:	b	17e68 <__assert_fail@plt+0x66bc>
   17eac:	push	{fp, lr}
   17eb0:	mov	fp, sp
   17eb4:	sub	sp, sp, #8
   17eb8:	mov	ip, #0
   17ebc:	str	ip, [sp]
   17ec0:	uxtb	ip, r3
   17ec4:	ldr	r3, [sp, #4]
   17ec8:	bfc	r3, #0, #23
   17ecc:	orr	r3, r3, ip
   17ed0:	str	r3, [sp, #4]
   17ed4:	mov	r3, sp
   17ed8:	bl	18f24 <__assert_fail@plt+0x7778>
   17edc:	mov	sp, fp
   17ee0:	pop	{fp, pc}
   17ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ee8:	add	fp, sp, #28
   17eec:	sub	sp, sp, #12
   17ef0:	mov	r7, r1
   17ef4:	mov	sl, r0
   17ef8:	ldr	r0, [r1, #40]	; 0x28
   17efc:	ldr	r1, [r1, #56]	; 0x38
   17f00:	cmp	r1, r0
   17f04:	ble	17fe0 <__assert_fail@plt+0x6834>
   17f08:	mov	r9, r2
   17f0c:	ldr	r1, [r7, #4]
   17f10:	ldrb	r6, [r1, r0]
   17f14:	mov	r5, sl
   17f18:	strb	r6, [r5], #4
   17f1c:	ldr	r4, [r5]
   17f20:	bic	r0, r4, #6291456	; 0x600000
   17f24:	str	r0, [r5]
   17f28:	ldr	r0, [r7, #80]	; 0x50
   17f2c:	movw	r8, #65280	; 0xff00
   17f30:	movt	r8, #65439	; 0xff9f
   17f34:	cmp	r0, #2
   17f38:	blt	17f5c <__assert_fail@plt+0x67b0>
   17f3c:	ldr	r1, [r7, #28]
   17f40:	ldr	r0, [r7, #40]	; 0x28
   17f44:	cmp	r0, r1
   17f48:	beq	17f5c <__assert_fail@plt+0x67b0>
   17f4c:	ldr	r1, [r7, #8]
   17f50:	ldr	r0, [r1, r0, lsl #2]
   17f54:	cmn	r0, #1
   17f58:	beq	18414 <__assert_fail@plt+0x6c68>
   17f5c:	cmp	r6, #92	; 0x5c
   17f60:	bne	17ff0 <__assert_fail@plt+0x6844>
   17f64:	ldr	r0, [r7, #40]	; 0x28
   17f68:	ldr	r1, [r7, #48]	; 0x30
   17f6c:	add	r0, r0, #1
   17f70:	cmp	r0, r1
   17f74:	bge	18044 <__assert_fail@plt+0x6898>
   17f78:	mov	r0, r7
   17f7c:	bl	18698 <__assert_fail@plt+0x6eec>
   17f80:	mov	r6, r0
   17f84:	strb	r0, [sl]
   17f88:	and	r0, r4, r8
   17f8c:	orr	r4, r0, #1
   17f90:	str	r4, [sl, #4]
   17f94:	ldr	r0, [r7, #80]	; 0x50
   17f98:	cmp	r0, #2
   17f9c:	blt	18268 <__assert_fail@plt+0x6abc>
   17fa0:	ldr	r0, [r7, #40]	; 0x28
   17fa4:	add	r1, r0, #1
   17fa8:	mov	r0, r7
   17fac:	bl	18758 <__assert_fail@plt+0x6fac>
   17fb0:	mov	r7, r0
   17fb4:	bl	11698 <iswalnum@plt>
   17fb8:	cmp	r0, #0
   17fbc:	movwne	r0, #1
   17fc0:	sub	r1, r7, #95	; 0x5f
   17fc4:	clz	r1, r1
   17fc8:	lsr	r1, r1, #5
   17fcc:	orr	r0, r1, r0
   17fd0:	ldr	r1, [r5]
   17fd4:	bic	r1, r1, #4194304	; 0x400000
   17fd8:	orr	r0, r1, r0, lsl #22
   17fdc:	b	18288 <__assert_fail@plt+0x6adc>
   17fe0:	mov	r0, #2
   17fe4:	strb	r0, [sl, #4]
   17fe8:	mov	r8, #0
   17fec:	b	1868c <__assert_fail@plt+0x6ee0>
   17ff0:	and	r0, r4, r8
   17ff4:	orr	r4, r0, #1
   17ff8:	str	r4, [r5]
   17ffc:	ldr	r0, [r7, #80]	; 0x50
   18000:	cmp	r0, #2
   18004:	blt	18050 <__assert_fail@plt+0x68a4>
   18008:	ldr	r1, [r7, #40]	; 0x28
   1800c:	mov	r0, r7
   18010:	bl	18758 <__assert_fail@plt+0x6fac>
   18014:	mov	r4, r0
   18018:	bl	11698 <iswalnum@plt>
   1801c:	cmp	r0, #0
   18020:	movwne	r0, #1
   18024:	sub	r1, r4, #95	; 0x5f
   18028:	clz	r1, r1
   1802c:	lsr	r1, r1, #5
   18030:	orr	r0, r1, r0
   18034:	ldr	r1, [r5]
   18038:	bic	r1, r1, #4194304	; 0x400000
   1803c:	orr	r0, r1, r0, lsl #22
   18040:	b	18070 <__assert_fail@plt+0x68c4>
   18044:	and	r0, r4, r8
   18048:	orr	r0, r0, #36	; 0x24
   1804c:	b	18420 <__assert_fail@plt+0x6c74>
   18050:	bl	11644 <__ctype_b_loc@plt>
   18054:	ldr	r0, [r0]
   18058:	add	r0, r0, r6, lsl #1
   1805c:	ldrh	r0, [r0]
   18060:	ubfx	r0, r0, #3, #1
   18064:	cmp	r6, #95	; 0x5f
   18068:	movweq	r0, #1
   1806c:	orr	r0, r4, r0, lsl #22
   18070:	str	r0, [r5]
   18074:	sub	r1, r6, #10
   18078:	mov	r8, #1
   1807c:	cmp	r1, #115	; 0x73
   18080:	bhi	1868c <__assert_fail@plt+0x6ee0>
   18084:	add	r2, pc, #0
   18088:	ldr	pc, [r2, r1, lsl #2]
   1808c:	andeq	r8, r1, ip, asr r2
   18090:	andeq	r8, r1, ip, lsl #13
   18094:	andeq	r8, r1, ip, lsl #13
   18098:	andeq	r8, r1, ip, lsl #13
   1809c:	andeq	r8, r1, ip, lsl #13
   180a0:	andeq	r8, r1, ip, lsl #13
   180a4:	andeq	r8, r1, ip, lsl #13
   180a8:	andeq	r8, r1, ip, lsl #13
   180ac:	andeq	r8, r1, ip, lsl #13
   180b0:	andeq	r8, r1, ip, lsl #13
   180b4:	andeq	r8, r1, ip, lsl #13
   180b8:	andeq	r8, r1, ip, lsl #13
   180bc:	andeq	r8, r1, ip, lsl #13
   180c0:	andeq	r8, r1, ip, lsl #13
   180c4:	andeq	r8, r1, ip, lsl #13
   180c8:	andeq	r8, r1, ip, lsl #13
   180cc:	andeq	r8, r1, ip, lsl #13
   180d0:	andeq	r8, r1, ip, lsl #13
   180d4:	andeq	r8, r1, ip, lsl #13
   180d8:	andeq	r8, r1, ip, lsl #13
   180dc:	andeq	r8, r1, ip, lsl #13
   180e0:	andeq	r8, r1, ip, lsl #13
   180e4:	andeq	r8, r1, ip, lsl #13
   180e8:	andeq	r8, r1, ip, lsl #13
   180ec:	andeq	r8, r1, ip, lsl #13
   180f0:	andeq	r8, r1, ip, lsl #13
   180f4:	andeq	r8, r1, ip, lsr #8
   180f8:	andeq	r8, r1, ip, lsl #13
   180fc:	andeq	r8, r1, ip, lsl #13
   18100:	andeq	r8, r1, ip, lsl #13
   18104:	andeq	r8, r1, ip, lsl #9
   18108:	muleq	r1, r8, r4
   1810c:	andeq	r8, r1, r4, lsr #9
   18110:	andeq	r8, r1, ip, lsr #9
   18114:	andeq	r8, r1, ip, lsl #13
   18118:	andeq	r8, r1, ip, lsl #13
   1811c:			; <UNDEFINED> instruction: 0x000184bc
   18120:	andeq	r8, r1, ip, lsl #13
   18124:	andeq	r8, r1, ip, lsl #13
   18128:	andeq	r8, r1, ip, lsl #13
   1812c:	andeq	r8, r1, ip, lsl #13
   18130:	andeq	r8, r1, ip, lsl #13
   18134:	andeq	r8, r1, ip, lsl #13
   18138:	andeq	r8, r1, ip, lsl #13
   1813c:	andeq	r8, r1, ip, lsl #13
   18140:	andeq	r8, r1, ip, lsl #13
   18144:	andeq	r8, r1, ip, lsl #13
   18148:	andeq	r8, r1, ip, lsl #13
   1814c:	andeq	r8, r1, ip, lsl #13
   18150:	andeq	r8, r1, ip, lsl #13
   18154:	andeq	r8, r1, ip, lsl #13
   18158:	andeq	r8, r1, ip, lsl #13
   1815c:	andeq	r8, r1, ip, lsl #13
   18160:	andeq	r8, r1, r4, asr #9
   18164:	andeq	r8, r1, ip, lsl #13
   18168:	andeq	r8, r1, ip, lsl #13
   1816c:	andeq	r8, r1, ip, lsl #13
   18170:	andeq	r8, r1, ip, lsl #13
   18174:	andeq	r8, r1, ip, lsl #13
   18178:	andeq	r8, r1, ip, lsl #13
   1817c:	andeq	r8, r1, ip, lsl #13
   18180:	andeq	r8, r1, ip, lsl #13
   18184:	andeq	r8, r1, ip, lsl #13
   18188:	andeq	r8, r1, ip, lsl #13
   1818c:	andeq	r8, r1, ip, lsl #13
   18190:	andeq	r8, r1, ip, lsl #13
   18194:	andeq	r8, r1, ip, lsl #13
   18198:	andeq	r8, r1, ip, lsl #13
   1819c:	andeq	r8, r1, ip, lsl #13
   181a0:	andeq	r8, r1, ip, lsl #13
   181a4:	andeq	r8, r1, ip, lsl #13
   181a8:	andeq	r8, r1, ip, lsl #13
   181ac:	andeq	r8, r1, ip, lsl #13
   181b0:	andeq	r8, r1, ip, lsl #13
   181b4:	andeq	r8, r1, ip, lsl #13
   181b8:	andeq	r8, r1, ip, lsl #13
   181bc:	andeq	r8, r1, ip, lsl #13
   181c0:	andeq	r8, r1, ip, lsl #13
   181c4:	andeq	r8, r1, ip, lsl #13
   181c8:	andeq	r8, r1, ip, lsl #13
   181cc:	andeq	r8, r1, ip, lsl #13
   181d0:	ldrdeq	r8, [r1], -r4
   181d4:	andeq	r8, r1, ip, lsl #13
   181d8:	andeq	r8, r1, ip, lsl #13
   181dc:	ldrdeq	r8, [r1], -ip
   181e0:	andeq	r8, r1, ip, lsl #13
   181e4:	andeq	r8, r1, ip, lsl #13
   181e8:	andeq	r8, r1, ip, lsl #13
   181ec:	andeq	r8, r1, ip, lsl #13
   181f0:	andeq	r8, r1, ip, lsl #13
   181f4:	andeq	r8, r1, ip, lsl #13
   181f8:	andeq	r8, r1, ip, lsl #13
   181fc:	andeq	r8, r1, ip, lsl #13
   18200:	andeq	r8, r1, ip, lsl #13
   18204:	andeq	r8, r1, ip, lsl #13
   18208:	andeq	r8, r1, ip, lsl #13
   1820c:	andeq	r8, r1, ip, lsl #13
   18210:	andeq	r8, r1, ip, lsl #13
   18214:	andeq	r8, r1, ip, lsl #13
   18218:	andeq	r8, r1, ip, lsl #13
   1821c:	andeq	r8, r1, ip, lsl #13
   18220:	andeq	r8, r1, ip, lsl #13
   18224:	andeq	r8, r1, ip, lsl #13
   18228:	andeq	r8, r1, ip, lsl #13
   1822c:	andeq	r8, r1, ip, lsl #13
   18230:	andeq	r8, r1, ip, lsl #13
   18234:	andeq	r8, r1, ip, lsl #13
   18238:	andeq	r8, r1, ip, lsl #13
   1823c:	andeq	r8, r1, ip, lsl #13
   18240:	andeq	r8, r1, ip, lsl #13
   18244:	andeq	r8, r1, ip, lsl #13
   18248:	andeq	r8, r1, ip, lsl #13
   1824c:	andeq	r8, r1, ip, lsl #13
   18250:	andeq	r8, r1, r4, lsl #10
   18254:	andeq	r8, r1, r4, lsl r5
   18258:	andeq	r8, r1, r8, lsr #10
   1825c:	tst	r9, #2048	; 0x800
   18260:	bne	18520 <__assert_fail@plt+0x6d74>
   18264:	b	1868c <__assert_fail@plt+0x6ee0>
   18268:	bl	11644 <__ctype_b_loc@plt>
   1826c:	ldr	r0, [r0]
   18270:	add	r0, r0, r6, lsl #1
   18274:	ldrh	r0, [r0]
   18278:	ubfx	r0, r0, #3, #1
   1827c:	cmp	r6, #95	; 0x5f
   18280:	movweq	r0, #1
   18284:	orr	r0, r4, r0, lsl #22
   18288:	str	r0, [r5]
   1828c:	sub	r1, r6, #39	; 0x27
   18290:	mov	r8, #2
   18294:	cmp	r1, #86	; 0x56
   18298:	bhi	1868c <__assert_fail@plt+0x6ee0>
   1829c:	add	r2, pc, #0
   182a0:	ldr	pc, [r2, r1, lsl #2]
   182a4:	andeq	r8, r1, r4, ror #10
   182a8:	andeq	r8, r1, r4, ror r5
   182ac:	andeq	r8, r1, r4, lsl #11
   182b0:	andeq	r8, r1, ip, lsl #13
   182b4:	muleq	r1, r4, r5
   182b8:	andeq	r8, r1, ip, lsl #13
   182bc:	andeq	r8, r1, ip, lsl #13
   182c0:	andeq	r8, r1, ip, lsl #13
   182c4:	andeq	r8, r1, ip, lsl #13
   182c8:	andeq	r8, r1, ip, lsl #13
   182cc:	andeq	r8, r1, r0, lsl #8
   182d0:	andeq	r8, r1, r0, lsl #8
   182d4:	andeq	r8, r1, r0, lsl #8
   182d8:	andeq	r8, r1, r0, lsl #8
   182dc:	andeq	r8, r1, r0, lsl #8
   182e0:	andeq	r8, r1, r0, lsl #8
   182e4:	andeq	r8, r1, r0, lsl #8
   182e8:	andeq	r8, r1, r0, lsl #8
   182ec:	andeq	r8, r1, r0, lsl #8
   182f0:	andeq	r8, r1, ip, lsl #13
   182f4:	andeq	r8, r1, ip, lsl #13
   182f8:	andeq	r8, r1, ip, lsr #11
   182fc:	andeq	r8, r1, ip, lsl #13
   18300:			; <UNDEFINED> instruction: 0x000185bc
   18304:	andeq	r8, r1, ip, asr #11
   18308:	andeq	r8, r1, ip, lsl #13
   1830c:	andeq	r8, r1, ip, lsl #13
   18310:	andeq	r8, r1, r4, ror #11
   18314:	andeq	r8, r1, ip, lsl #13
   18318:	andeq	r8, r1, ip, lsl #13
   1831c:	andeq	r8, r1, ip, lsl #13
   18320:	andeq	r8, r1, ip, lsl #13
   18324:	andeq	r8, r1, ip, lsl #13
   18328:	andeq	r8, r1, ip, lsl #13
   1832c:	andeq	r8, r1, ip, lsl #13
   18330:	andeq	r8, r1, ip, lsl #13
   18334:	andeq	r8, r1, ip, lsl #13
   18338:	andeq	r8, r1, ip, lsl #13
   1833c:	andeq	r8, r1, ip, lsl #13
   18340:	andeq	r8, r1, ip, lsl #13
   18344:	andeq	r8, r1, ip, lsl #13
   18348:	andeq	r8, r1, ip, lsl #13
   1834c:	andeq	r8, r1, ip, lsl #13
   18350:	andeq	r8, r1, ip, lsl #13
   18354:	strdeq	r8, [r1], -r4
   18358:	andeq	r8, r1, ip, lsl #13
   1835c:	andeq	r8, r1, ip, lsl #13
   18360:	andeq	r8, r1, ip, lsl #13
   18364:	andeq	r8, r1, r4, lsl #12
   18368:	andeq	r8, r1, ip, lsl #13
   1836c:	andeq	r8, r1, ip, lsl #13
   18370:	andeq	r8, r1, ip, lsl #13
   18374:	andeq	r8, r1, ip, lsl #13
   18378:	andeq	r8, r1, ip, lsl #13
   1837c:	andeq	r8, r1, ip, lsl #13
   18380:	andeq	r8, r1, ip, lsl #13
   18384:	andeq	r8, r1, ip, lsl #13
   18388:	andeq	r8, r1, r4, lsl r6
   1838c:	andeq	r8, r1, ip, lsl #13
   18390:	andeq	r8, r1, r4, lsr #12
   18394:	andeq	r8, r1, ip, lsl #13
   18398:	andeq	r8, r1, ip, lsl #13
   1839c:	andeq	r8, r1, ip, lsl #13
   183a0:	andeq	r8, r1, ip, lsl #13
   183a4:	andeq	r8, r1, ip, lsl #13
   183a8:	andeq	r8, r1, ip, lsl #13
   183ac:	andeq	r8, r1, ip, lsl #13
   183b0:	andeq	r8, r1, ip, lsl #13
   183b4:	andeq	r8, r1, ip, lsl #13
   183b8:	andeq	r8, r1, ip, lsl #13
   183bc:	andeq	r8, r1, ip, lsl #13
   183c0:	andeq	r8, r1, ip, lsl #13
   183c4:	andeq	r8, r1, ip, lsl #13
   183c8:	andeq	r8, r1, ip, lsl #13
   183cc:	andeq	r8, r1, ip, lsl #13
   183d0:	andeq	r8, r1, ip, lsl #13
   183d4:	andeq	r8, r1, r4, lsr r6
   183d8:	andeq	r8, r1, ip, lsl #13
   183dc:	andeq	r8, r1, ip, lsl #13
   183e0:	andeq	r8, r1, ip, lsl #13
   183e4:	andeq	r8, r1, r4, asr #12
   183e8:	andeq	r8, r1, ip, lsl #13
   183ec:	andeq	r8, r1, ip, lsl #13
   183f0:	andeq	r8, r1, ip, lsl #13
   183f4:	andeq	r8, r1, r4, asr r6
   183f8:	andeq	r8, r1, r8, ror #12
   183fc:	andeq	r8, r1, r4, ror r6
   18400:	tst	r9, #16384	; 0x4000
   18404:	bne	1868c <__assert_fail@plt+0x6ee0>
   18408:	sub	r1, r6, #49	; 0x31
   1840c:	mov	r2, #4
   18410:	b	184f4 <__assert_fail@plt+0x6d48>
   18414:	and	r0, r4, r8
   18418:	orr	r0, r0, #1
   1841c:	orr	r0, r0, #2097152	; 0x200000
   18420:	str	r0, [r5]
   18424:	mov	r8, #1
   18428:	b	1868c <__assert_fail@plt+0x6ee0>
   1842c:	tst	r9, #8
   18430:	bne	18478 <__assert_fail@plt+0x6ccc>
   18434:	ldr	r0, [r7, #40]	; 0x28
   18438:	ldr	r1, [r7, #48]	; 0x30
   1843c:	add	r0, r0, #1
   18440:	cmp	r0, r1
   18444:	beq	18478 <__assert_fail@plt+0x6ccc>
   18448:	str	r0, [r7, #40]	; 0x28
   1844c:	add	r0, sp, #4
   18450:	mov	r1, r7
   18454:	mov	r2, r9
   18458:	bl	17ee4 <__assert_fail@plt+0x6738>
   1845c:	ldr	r0, [r7, #40]	; 0x28
   18460:	sub	r0, r0, #1
   18464:	str	r0, [r7, #40]	; 0x28
   18468:	ldrb	r0, [sp, #8]
   1846c:	sub	r0, r0, #9
   18470:	cmp	r0, #1
   18474:	bhi	1868c <__assert_fail@plt+0x6ee0>
   18478:	mov	r0, #32
   1847c:	str	r0, [sl]
   18480:	mov	r0, #12
   18484:	strb	r0, [sl, #4]
   18488:	b	1868c <__assert_fail@plt+0x6ee0>
   1848c:	tst	r9, #8192	; 0x2000
   18490:	bne	1857c <__assert_fail@plt+0x6dd0>
   18494:	b	1868c <__assert_fail@plt+0x6ee0>
   18498:	tst	r9, #8192	; 0x2000
   1849c:	bne	1858c <__assert_fail@plt+0x6de0>
   184a0:	b	1868c <__assert_fail@plt+0x6ee0>
   184a4:	mov	r1, #11
   184a8:	b	18684 <__assert_fail@plt+0x6ed8>
   184ac:	movw	r1, #1026	; 0x402
   184b0:	tst	r9, r1
   184b4:	bne	1868c <__assert_fail@plt+0x6ee0>
   184b8:	b	185a4 <__assert_fail@plt+0x6df8>
   184bc:	mov	r1, #5
   184c0:	b	18684 <__assert_fail@plt+0x6ed8>
   184c4:	movw	r1, #1026	; 0x402
   184c8:	tst	r9, r1
   184cc:	bne	1868c <__assert_fail@plt+0x6ee0>
   184d0:	b	185dc <__assert_fail@plt+0x6e30>
   184d4:	mov	r1, #20
   184d8:	b	18684 <__assert_fail@plt+0x6ed8>
   184dc:	movw	r1, #8
   184e0:	movt	r1, #128	; 0x80
   184e4:	tst	r9, r1
   184e8:	beq	18538 <__assert_fail@plt+0x6d8c>
   184ec:	mov	r1, #16
   184f0:	mov	r2, #12
   184f4:	bfi	r0, r2, #0, #8
   184f8:	str	r1, [sl]
   184fc:	str	r0, [sl, #4]
   18500:	b	1868c <__assert_fail@plt+0x6ee0>
   18504:	and	r1, r9, #4608	; 0x1200
   18508:	cmp	r1, #4608	; 0x1200
   1850c:	beq	18660 <__assert_fail@plt+0x6eb4>
   18510:	b	1868c <__assert_fail@plt+0x6ee0>
   18514:	and	r1, r9, #33792	; 0x8400
   18518:	cmp	r1, #32768	; 0x8000
   1851c:	bne	1868c <__assert_fail@plt+0x6ee0>
   18520:	mov	r1, #10
   18524:	b	18684 <__assert_fail@plt+0x6ed8>
   18528:	and	r1, r9, #4608	; 0x1200
   1852c:	cmp	r1, #4608	; 0x1200
   18530:	beq	18680 <__assert_fail@plt+0x6ed4>
   18534:	b	1868c <__assert_fail@plt+0x6ee0>
   18538:	ldr	r1, [r7, #40]	; 0x28
   1853c:	cmp	r1, #0
   18540:	beq	184ec <__assert_fail@plt+0x6d40>
   18544:	tst	r9, #2048	; 0x800
   18548:	beq	1868c <__assert_fail@plt+0x6ee0>
   1854c:	ldr	r2, [r7, #4]
   18550:	add	r1, r2, r1
   18554:	ldrb	r1, [r1, #-1]
   18558:	cmp	r1, #10
   1855c:	beq	184ec <__assert_fail@plt+0x6d40>
   18560:	b	1868c <__assert_fail@plt+0x6ee0>
   18564:	tst	r9, #524288	; 0x80000
   18568:	bne	1868c <__assert_fail@plt+0x6ee0>
   1856c:	mov	r1, #128	; 0x80
   18570:	b	184f0 <__assert_fail@plt+0x6d44>
   18574:	tst	r9, #8192	; 0x2000
   18578:	bne	1868c <__assert_fail@plt+0x6ee0>
   1857c:	mov	r1, #8
   18580:	b	18684 <__assert_fail@plt+0x6ed8>
   18584:	tst	r9, #8192	; 0x2000
   18588:	bne	1868c <__assert_fail@plt+0x6ee0>
   1858c:	mov	r1, #9
   18590:	b	18684 <__assert_fail@plt+0x6ed8>
   18594:	movw	r1, #1026	; 0x402
   18598:	and	r1, r9, r1
   1859c:	cmp	r1, #2
   185a0:	bne	1868c <__assert_fail@plt+0x6ee0>
   185a4:	mov	r1, #18
   185a8:	b	18684 <__assert_fail@plt+0x6ed8>
   185ac:	tst	r9, #524288	; 0x80000
   185b0:	bne	1868c <__assert_fail@plt+0x6ee0>
   185b4:	mov	r1, #6
   185b8:	b	184f0 <__assert_fail@plt+0x6d44>
   185bc:	tst	r9, #524288	; 0x80000
   185c0:	bne	1868c <__assert_fail@plt+0x6ee0>
   185c4:	mov	r1, #9
   185c8:	b	184f0 <__assert_fail@plt+0x6d44>
   185cc:	movw	r1, #1026	; 0x402
   185d0:	and	r1, r9, r1
   185d4:	cmp	r1, #2
   185d8:	bne	1868c <__assert_fail@plt+0x6ee0>
   185dc:	mov	r1, #19
   185e0:	b	18684 <__assert_fail@plt+0x6ed8>
   185e4:	tst	r9, #524288	; 0x80000
   185e8:	bne	1868c <__assert_fail@plt+0x6ee0>
   185ec:	mov	r1, #512	; 0x200
   185f0:	b	184f0 <__assert_fail@plt+0x6d44>
   185f4:	tst	r9, #524288	; 0x80000
   185f8:	bne	1868c <__assert_fail@plt+0x6ee0>
   185fc:	mov	r1, #35	; 0x23
   18600:	b	18684 <__assert_fail@plt+0x6ed8>
   18604:	tst	r9, #524288	; 0x80000
   18608:	bne	1868c <__assert_fail@plt+0x6ee0>
   1860c:	mov	r1, #33	; 0x21
   18610:	b	18684 <__assert_fail@plt+0x6ed8>
   18614:	tst	r9, #524288	; 0x80000
   18618:	bne	1868c <__assert_fail@plt+0x6ee0>
   1861c:	mov	r1, #64	; 0x40
   18620:	b	184f0 <__assert_fail@plt+0x6d44>
   18624:	tst	r9, #524288	; 0x80000
   18628:	bne	1868c <__assert_fail@plt+0x6ee0>
   1862c:	mov	r1, #256	; 0x100
   18630:	b	184f0 <__assert_fail@plt+0x6d44>
   18634:	tst	r9, #524288	; 0x80000
   18638:	bne	1868c <__assert_fail@plt+0x6ee0>
   1863c:	mov	r1, #34	; 0x22
   18640:	b	18684 <__assert_fail@plt+0x6ed8>
   18644:	tst	r9, #524288	; 0x80000
   18648:	bne	1868c <__assert_fail@plt+0x6ee0>
   1864c:	mov	r1, #32
   18650:	b	18684 <__assert_fail@plt+0x6ed8>
   18654:	and	r1, r9, #4608	; 0x1200
   18658:	cmp	r1, #512	; 0x200
   1865c:	bne	1868c <__assert_fail@plt+0x6ee0>
   18660:	mov	r1, #23
   18664:	b	18684 <__assert_fail@plt+0x6ed8>
   18668:	tst	r9, #33792	; 0x8400
   1866c:	bne	1868c <__assert_fail@plt+0x6ee0>
   18670:	b	18520 <__assert_fail@plt+0x6d74>
   18674:	and	r1, r9, #4608	; 0x1200
   18678:	cmp	r1, #512	; 0x200
   1867c:	bne	1868c <__assert_fail@plt+0x6ee0>
   18680:	mov	r1, #24
   18684:	bfi	r0, r1, #0, #8
   18688:	str	r0, [r5]
   1868c:	mov	r0, r8
   18690:	sub	sp, fp, #28
   18694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18698:	ldrb	r1, [r0, #75]	; 0x4b
   1869c:	cmp	r1, #0
   186a0:	bne	186c0 <__assert_fail@plt+0x6f14>
   186a4:	ldr	r1, [r0, #4]
   186a8:	ldr	r0, [r0, #40]	; 0x28
   186ac:	add	r0, r1, r0
   186b0:	add	r0, r0, #1
   186b4:	ldrb	r3, [r0]
   186b8:	uxtb	r0, r3
   186bc:	bx	lr
   186c0:	ldr	r1, [r0, #80]	; 0x50
   186c4:	cmp	r1, #2
   186c8:	blt	18700 <__assert_fail@plt+0x6f54>
   186cc:	ldr	r2, [r0, #8]
   186d0:	ldr	r3, [r0, #40]	; 0x28
   186d4:	add	ip, r3, #1
   186d8:	ldr	r1, [r2, ip, lsl #2]
   186dc:	cmn	r1, #1
   186e0:	beq	1874c <__assert_fail@plt+0x6fa0>
   186e4:	ldr	r1, [r0, #28]
   186e8:	add	r3, r3, #2
   186ec:	cmp	r1, r3
   186f0:	beq	18700 <__assert_fail@plt+0x6f54>
   186f4:	ldr	r1, [r2, r3, lsl #2]
   186f8:	cmn	r1, #1
   186fc:	beq	1874c <__assert_fail@plt+0x6fa0>
   18700:	push	{fp, lr}
   18704:	mov	fp, sp
   18708:	ldrb	lr, [r0, #76]	; 0x4c
   1870c:	ldr	r1, [r0, #40]	; 0x28
   18710:	add	ip, r1, #1
   18714:	cmp	lr, #0
   18718:	mov	r3, ip
   1871c:	ldrne	r3, [r0, #12]
   18720:	ldrne	r3, [r3, ip, lsl #2]
   18724:	ldr	r1, [r0]
   18728:	ldr	r2, [r0, #24]
   1872c:	add	r2, r2, r3
   18730:	add	r1, r1, r2
   18734:	ldrsb	r3, [r1]
   18738:	cmp	lr, #0
   1873c:	pop	{fp, lr}
   18740:	beq	186b8 <__assert_fail@plt+0x6f0c>
   18744:	cmn	r3, #1
   18748:	bgt	186b8 <__assert_fail@plt+0x6f0c>
   1874c:	ldr	r0, [r0, #4]
   18750:	add	r0, r0, ip
   18754:	b	186b4 <__assert_fail@plt+0x6f08>
   18758:	ldr	r2, [r0, #80]	; 0x50
   1875c:	cmp	r2, #1
   18760:	ldrne	r0, [r0, #8]
   18764:	ldrne	r0, [r0, r1, lsl #2]
   18768:	ldreq	r0, [r0, #4]
   1876c:	ldrbeq	r0, [r0, r1]
   18770:	bx	lr
   18774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18778:	add	fp, sp, #28
   1877c:	sub	sp, sp, #20
   18780:	mov	r6, r2
   18784:	mov	r7, r1
   18788:	mov	r1, r0
   1878c:	ldr	r0, [r7]
   18790:	str	r0, [sp, #8]
   18794:	ldr	r5, [fp, #12]
   18798:	str	r5, [sp, #4]
   1879c:	ldr	r4, [fp, #8]
   187a0:	str	r4, [sp]
   187a4:	str	r1, [sp, #12]
   187a8:	mov	r0, r1
   187ac:	mov	r1, r7
   187b0:	str	r3, [sp, #16]
   187b4:	bl	18974 <__assert_fail@plt+0x71c8>
   187b8:	cmp	r0, #0
   187bc:	bne	187e4 <__assert_fail@plt+0x7038>
   187c0:	ldr	r1, [r5]
   187c4:	cmp	r1, #0
   187c8:	beq	187e4 <__assert_fail@plt+0x7038>
   187cc:	mov	r6, #0
   187d0:	b	188b0 <__assert_fail@plt+0x7104>
   187d4:	cmp	r5, #0
   187d8:	movne	r8, r5
   187dc:	mov	r0, r8
   187e0:	mov	r4, r9
   187e4:	mov	r5, r0
   187e8:	ldrb	r0, [r6, #4]
   187ec:	orr	r1, r0, #8
   187f0:	cmp	r1, #10
   187f4:	beq	188ac <__assert_fail@plt+0x7100>
   187f8:	cmp	r4, #0
   187fc:	beq	18808 <__assert_fail@plt+0x705c>
   18800:	cmp	r0, #9
   18804:	beq	188ac <__assert_fail@plt+0x7100>
   18808:	mov	r9, r4
   1880c:	str	r4, [sp]
   18810:	ldr	sl, [fp, #12]
   18814:	str	sl, [sp, #4]
   18818:	ldr	r0, [sp, #12]
   1881c:	mov	r1, r7
   18820:	mov	r2, r6
   18824:	ldr	r3, [sp, #16]
   18828:	bl	18974 <__assert_fail@plt+0x71c8>
   1882c:	mov	r8, r0
   18830:	cmp	r0, #0
   18834:	bne	18844 <__assert_fail@plt+0x7098>
   18838:	ldr	r0, [sl]
   1883c:	cmp	r0, #0
   18840:	bne	188bc <__assert_fail@plt+0x7110>
   18844:	cmp	r5, #0
   18848:	cmpne	r8, #0
   1884c:	beq	187d4 <__assert_fail@plt+0x7028>
   18850:	ldr	r0, [sp, #8]
   18854:	mov	r1, r5
   18858:	mov	r2, r8
   1885c:	mov	r3, #16
   18860:	bl	17eac <__assert_fail@plt+0x6700>
   18864:	cmp	r0, #0
   18868:	mov	r4, r9
   1886c:	bne	187e4 <__assert_fail@plt+0x7038>
   18870:	movw	r4, #35164	; 0x895c
   18874:	movt	r4, #1
   18878:	mov	r6, #0
   1887c:	mov	r0, r8
   18880:	mov	r1, r4
   18884:	mov	r2, #0
   18888:	bl	188e4 <__assert_fail@plt+0x7138>
   1888c:	mov	r0, r5
   18890:	mov	r1, r4
   18894:	mov	r2, #0
   18898:	bl	188e4 <__assert_fail@plt+0x7138>
   1889c:	mov	r0, #12
   188a0:	ldr	r1, [fp, #12]
   188a4:	str	r0, [r1]
   188a8:	b	188b0 <__assert_fail@plt+0x7104>
   188ac:	mov	r6, r5
   188b0:	mov	r0, r6
   188b4:	sub	sp, fp, #28
   188b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188bc:	cmp	r5, #0
   188c0:	mov	r6, #0
   188c4:	beq	188b0 <__assert_fail@plt+0x7104>
   188c8:	movw	r1, #35164	; 0x895c
   188cc:	movt	r1, #1
   188d0:	mov	r6, #0
   188d4:	mov	r0, r5
   188d8:	mov	r2, #0
   188dc:	bl	188e4 <__assert_fail@plt+0x7138>
   188e0:	b	188b0 <__assert_fail@plt+0x7104>
   188e4:	push	{r4, r5, r6, sl, fp, lr}
   188e8:	add	fp, sp, #16
   188ec:	mov	r4, r2
   188f0:	mov	r5, r1
   188f4:	b	188fc <__assert_fail@plt+0x7150>
   188f8:	ldr	r0, [r6, #8]
   188fc:	mov	r6, r0
   18900:	ldr	r0, [r0, #4]
   18904:	cmp	r0, #0
   18908:	bne	188fc <__assert_fail@plt+0x7150>
   1890c:	ldr	r0, [r6, #8]
   18910:	cmp	r0, #0
   18914:	bne	188f8 <__assert_fail@plt+0x714c>
   18918:	mov	r0, r4
   1891c:	mov	r1, r6
   18920:	blx	r5
   18924:	cmp	r0, #0
   18928:	bne	18958 <__assert_fail@plt+0x71ac>
   1892c:	ldr	r1, [r6]
   18930:	cmp	r1, #0
   18934:	popeq	{r4, r5, r6, sl, fp, pc}
   18938:	ldr	r0, [r1, #8]
   1893c:	cmp	r0, r6
   18940:	mov	r6, r1
   18944:	beq	18918 <__assert_fail@plt+0x716c>
   18948:	cmp	r0, #0
   1894c:	mov	r6, r1
   18950:	beq	18918 <__assert_fail@plt+0x716c>
   18954:	b	188fc <__assert_fail@plt+0x7150>
   18958:	pop	{r4, r5, r6, sl, fp, pc}
   1895c:	push	{fp, lr}
   18960:	mov	fp, sp
   18964:	add	r0, r1, #20
   18968:	bl	16948 <__assert_fail@plt+0x519c>
   1896c:	mov	r0, #0
   18970:	pop	{fp, pc}
   18974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18978:	add	fp, sp, #28
   1897c:	sub	sp, sp, #12
   18980:	mov	r9, r3
   18984:	mov	r5, r2
   18988:	mov	r6, r1
   1898c:	mov	sl, r0
   18990:	and	ip, r3, #16
   18994:	and	r8, r3, #32
   18998:	and	r0, r3, #16777216	; 0x1000000
   1899c:	str	r0, [sp, #8]
   189a0:	ldr	r3, [fp, #12]
   189a4:	ldr	r4, [fp, #8]
   189a8:	mvn	r1, #0
   189ac:	b	189d0 <__assert_fail@plt+0x7224>
   189b0:	mov	r0, r5
   189b4:	mov	r1, sl
   189b8:	mov	r2, r9
   189bc:	mov	r7, ip
   189c0:	bl	17d20 <__assert_fail@plt+0x6574>
   189c4:	mvn	r1, #0
   189c8:	mov	ip, r7
   189cc:	ldr	r3, [fp, #12]
   189d0:	ldr	r0, [r5, #4]
   189d4:	uxtab	r1, r1, r0
   189d8:	ldr	r7, [r6]
   189dc:	cmp	r1, #35	; 0x23
   189e0:	bhi	18a88 <__assert_fail@plt+0x72dc>
   189e4:	add	r2, pc, #0
   189e8:	ldr	pc, [r2, r1, lsl #2]
   189ec:	andeq	r8, r1, r0, asr fp
   189f0:	andeq	r8, r1, r8, lsl #30
   189f4:	andeq	r8, r1, r8, lsl #21
   189f8:	andeq	r8, r1, ip, lsl #24
   189fc:	andeq	r8, r1, r8, ror #24
   18a00:	andeq	r8, r1, r8, lsl #21
   18a04:	andeq	r8, r1, r8, lsl #21
   18a08:	andeq	r8, r1, ip, lsr #25
   18a0c:	muleq	r1, r8, sl
   18a10:	andeq	r8, r1, r8, lsl #30
   18a14:	andeq	r8, r1, r8, lsl #21
   18a18:	ldrdeq	r8, [r1], -r4
   18a1c:	andeq	r8, r1, r8, lsl #21
   18a20:	andeq	r8, r1, r8, lsl #21
   18a24:	andeq	r8, r1, r8, lsl #21
   18a28:	andeq	r8, r1, r8, lsl #21
   18a2c:	andeq	r8, r1, r8, lsl #21
   18a30:	andeq	r8, r1, r8, lsl #21
   18a34:	andeq	r8, r1, r8, lsl #21
   18a38:	andeq	r8, r1, r4, lsl sp
   18a3c:	andeq	r8, r1, r8, lsl #21
   18a40:	andeq	r8, r1, r8, lsl #21
   18a44:	andeq	r8, r1, ip, ror sl
   18a48:	andeq	r8, r1, r8, lsr #21
   18a4c:	andeq	r8, r1, r8, lsl #21
   18a50:	andeq	r8, r1, r8, lsl #21
   18a54:	andeq	r8, r1, r8, lsl #21
   18a58:	andeq	r8, r1, r8, lsl #21
   18a5c:	andeq	r8, r1, r8, lsl #21
   18a60:	andeq	r8, r1, r8, lsl #21
   18a64:	andeq	r8, r1, r8, lsl #21
   18a68:	andeq	r8, r1, r0, ror #21
   18a6c:	andeq	r8, r1, r0, ror #21
   18a70:	andeq	r8, r1, r4, lsl fp
   18a74:	andeq	r8, r1, r4, lsl fp
   18a78:	andeq	r8, r1, ip, lsl #28
   18a7c:	ldr	r1, [sp, #8]
   18a80:	cmp	r1, #0
   18a84:	bne	18ed8 <__assert_fail@plt+0x772c>
   18a88:	cmp	r8, #0
   18a8c:	bne	18ed8 <__assert_fail@plt+0x772c>
   18a90:	cmp	ip, #0
   18a94:	bne	189b0 <__assert_fail@plt+0x7204>
   18a98:	tst	r9, #131072	; 0x20000
   18a9c:	uxtbeq	r1, r0
   18aa0:	cmpeq	r1, #9
   18aa4:	beq	18e18 <__assert_fail@plt+0x766c>
   18aa8:	mov	r1, #1
   18aac:	bfi	r0, r1, #0, #8
   18ab0:	str	r0, [r5, #4]
   18ab4:	mov	r4, #0
   18ab8:	mov	r0, r7
   18abc:	mov	r1, #0
   18ac0:	mov	r2, #0
   18ac4:	mov	r3, r5
   18ac8:	bl	18f24 <__assert_fail@plt+0x7778>
   18acc:	mov	r6, r0
   18ad0:	cmp	r0, #0
   18ad4:	mov	r8, sl
   18ad8:	bne	18d4c <__assert_fail@plt+0x75a0>
   18adc:	b	18e8c <__assert_fail@plt+0x76e0>
   18ae0:	mov	r8, sl
   18ae4:	ldr	r1, [sl, #64]	; 0x40
   18ae8:	mvn	r2, #32
   18aec:	uxtab	r0, r2, r0
   18af0:	clz	r0, r0
   18af4:	lsr	r0, r0, #5
   18af8:	stm	sp, {r0, r3}
   18afc:	movw	r2, #17182	; 0x431e
   18b00:	movt	r2, #2
   18b04:	mov	r4, r3
   18b08:	movw	r3, #15725	; 0x3d6d
   18b0c:	movt	r3, #2
   18b10:	b	18b44 <__assert_fail@plt+0x7398>
   18b14:	mov	r8, sl
   18b18:	ldr	r1, [sl, #64]	; 0x40
   18b1c:	mvn	r2, #34	; 0x22
   18b20:	uxtab	r0, r2, r0
   18b24:	clz	r0, r0
   18b28:	lsr	r0, r0, #5
   18b2c:	stm	sp, {r0, r3}
   18b30:	movw	r2, #17188	; 0x4324
   18b34:	movt	r2, #2
   18b38:	mov	r4, r3
   18b3c:	movw	r3, #15875	; 0x3e03
   18b40:	movt	r3, #2
   18b44:	mov	r0, r7
   18b48:	bl	196e0 <__assert_fail@plt+0x7f34>
   18b4c:	b	18d34 <__assert_fail@plt+0x7588>
   18b50:	mov	r4, #0
   18b54:	mov	r0, r7
   18b58:	mov	r1, #0
   18b5c:	mov	r2, #0
   18b60:	mov	r3, r5
   18b64:	bl	18f24 <__assert_fail@plt+0x7778>
   18b68:	cmp	r0, #0
   18b6c:	beq	18e8c <__assert_fail@plt+0x76e0>
   18b70:	mov	r6, r0
   18b74:	ldr	r0, [r7, #92]	; 0x5c
   18b78:	cmp	r0, #2
   18b7c:	mov	r8, sl
   18b80:	blt	18d4c <__assert_fail@plt+0x75a0>
   18b84:	ldr	r0, [r8, #40]	; 0x28
   18b88:	ldr	r1, [r8, #56]	; 0x38
   18b8c:	cmp	r1, r0
   18b90:	ble	18d4c <__assert_fail@plt+0x75a0>
   18b94:	ldr	r1, [r8, #28]
   18b98:	cmp	r0, r1
   18b9c:	beq	18d4c <__assert_fail@plt+0x75a0>
   18ba0:	ldr	r1, [r8, #8]
   18ba4:	ldr	r0, [r1, r0, lsl #2]
   18ba8:	cmn	r0, #1
   18bac:	bne	18d4c <__assert_fail@plt+0x75a0>
   18bb0:	mov	r0, r5
   18bb4:	mov	r1, r8
   18bb8:	mov	r2, r9
   18bbc:	bl	17d20 <__assert_fail@plt+0x6574>
   18bc0:	mov	r0, r7
   18bc4:	mov	r1, #0
   18bc8:	mov	r2, #0
   18bcc:	mov	r3, r5
   18bd0:	bl	18f24 <__assert_fail@plt+0x7778>
   18bd4:	mov	r4, r0
   18bd8:	mov	r0, r7
   18bdc:	mov	r1, r6
   18be0:	mov	r2, r4
   18be4:	mov	r3, #16
   18be8:	bl	17eac <__assert_fail@plt+0x6700>
   18bec:	cmp	r4, #0
   18bf0:	ldr	r1, [fp, #12]
   18bf4:	movne	r6, r0
   18bf8:	cmpne	r0, #0
   18bfc:	bne	18b84 <__assert_fail@plt+0x73d8>
   18c00:	mov	r0, #12
   18c04:	str	r0, [r1]
   18c08:	b	18f08 <__assert_fail@plt+0x775c>
   18c0c:	ldr	r0, [r5]
   18c10:	mov	r1, #1
   18c14:	ldr	r2, [r7, #84]	; 0x54
   18c18:	tst	r2, r1, lsl r0
   18c1c:	beq	18f18 <__assert_fail@plt+0x776c>
   18c20:	lsl	r0, r1, r0
   18c24:	ldr	r1, [r7, #80]	; 0x50
   18c28:	orr	r0, r1, r0
   18c2c:	str	r0, [r7, #80]	; 0x50
   18c30:	mov	r4, #0
   18c34:	mov	r0, r7
   18c38:	mov	r1, #0
   18c3c:	mov	r2, #0
   18c40:	mov	r3, r5
   18c44:	bl	18f24 <__assert_fail@plt+0x7778>
   18c48:	cmp	r0, #0
   18c4c:	beq	18e8c <__assert_fail@plt+0x76e0>
   18c50:	mov	r6, r0
   18c54:	mov	r8, sl
   18c58:	ldr	r0, [r7, #76]	; 0x4c
   18c5c:	add	r0, r0, #1
   18c60:	str	r0, [r7, #76]	; 0x4c
   18c64:	b	18c9c <__assert_fail@plt+0x74f0>
   18c68:	mov	r4, #0
   18c6c:	mov	r0, r7
   18c70:	mov	r1, #0
   18c74:	mov	r2, #0
   18c78:	mov	r3, r5
   18c7c:	bl	18f24 <__assert_fail@plt+0x7778>
   18c80:	cmp	r0, #0
   18c84:	beq	18e8c <__assert_fail@plt+0x76e0>
   18c88:	mov	r6, r0
   18c8c:	ldr	r0, [r7, #92]	; 0x5c
   18c90:	cmp	r0, #2
   18c94:	mov	r8, sl
   18c98:	blt	18d4c <__assert_fail@plt+0x75a0>
   18c9c:	ldrb	r0, [r7, #88]	; 0x58
   18ca0:	orr	r0, r0, #2
   18ca4:	strb	r0, [r7, #88]	; 0x58
   18ca8:	b	18d4c <__assert_fail@plt+0x75a0>
   18cac:	add	r0, r4, #1
   18cb0:	stm	sp, {r0, r3}
   18cb4:	mov	r8, sl
   18cb8:	mov	r0, sl
   18cbc:	mov	r1, r6
   18cc0:	mov	r2, r5
   18cc4:	mov	r4, r3
   18cc8:	mov	r3, r9
   18ccc:	bl	18fcc <__assert_fail@plt+0x7820>
   18cd0:	b	18d34 <__assert_fail@plt+0x7588>
   18cd4:	ldr	r0, [r5]
   18cd8:	movw	r1, #783	; 0x30f
   18cdc:	tst	r0, r1
   18ce0:	beq	18cf8 <__assert_fail@plt+0x754c>
   18ce4:	ldrb	r0, [r7, #88]	; 0x58
   18ce8:	tst	r0, #16
   18cec:	moveq	r0, r7
   18cf0:	bleq	19604 <__assert_fail@plt+0x7e58>
   18cf4:	ldr	r0, [r5]
   18cf8:	cmp	r0, #256	; 0x100
   18cfc:	beq	18e24 <__assert_fail@plt+0x7678>
   18d00:	cmp	r0, #512	; 0x200
   18d04:	bne	18e9c <__assert_fail@plt+0x76f0>
   18d08:	mov	r6, #10
   18d0c:	mov	r0, #5
   18d10:	b	18e2c <__assert_fail@plt+0x7680>
   18d14:	str	r3, [sp]
   18d18:	mov	r8, sl
   18d1c:	mov	r0, sl
   18d20:	mov	r1, r7
   18d24:	mov	r2, r5
   18d28:	mov	r4, r3
   18d2c:	mov	r3, r9
   18d30:	bl	190e0 <__assert_fail@plt+0x7934>
   18d34:	mov	r6, r0
   18d38:	cmp	r0, #0
   18d3c:	bne	18d4c <__assert_fail@plt+0x75a0>
   18d40:	ldr	r0, [r4]
   18d44:	cmp	r0, #0
   18d48:	bne	18f08 <__assert_fail@plt+0x775c>
   18d4c:	mov	r0, r5
   18d50:	mov	r1, r8
   18d54:	mov	r2, r9
   18d58:	bl	17d20 <__assert_fail@plt+0x6574>
   18d5c:	mov	r4, #1
   18d60:	movw	r8, #2048	; 0x800
   18d64:	movt	r8, #140	; 0x8c
   18d68:	ldr	r2, [fp, #12]
   18d6c:	ldrb	r0, [r5, #4]
   18d70:	cmp	r0, #23
   18d74:	bhi	18e04 <__assert_fail@plt+0x7658>
   18d78:	tst	r8, r4, lsl r0
   18d7c:	beq	18e04 <__assert_fail@plt+0x7658>
   18d80:	str	r9, [sp]
   18d84:	str	r2, [sp, #4]
   18d88:	mov	r0, r6
   18d8c:	mov	r1, sl
   18d90:	mov	r2, r7
   18d94:	mov	r3, r5
   18d98:	bl	198d0 <__assert_fail@plt+0x8124>
   18d9c:	ldr	r2, [fp, #12]
   18da0:	cmp	r0, #0
   18da4:	bne	18db4 <__assert_fail@plt+0x7608>
   18da8:	ldr	r1, [r2]
   18dac:	cmp	r1, #0
   18db0:	bne	18ee4 <__assert_fail@plt+0x7738>
   18db4:	ldr	r1, [sp, #8]
   18db8:	cmp	r1, #0
   18dbc:	mov	r6, r0
   18dc0:	beq	18d6c <__assert_fail@plt+0x75c0>
   18dc4:	ldrb	r1, [r5, #4]
   18dc8:	cmp	r1, #23
   18dcc:	beq	18ddc <__assert_fail@plt+0x7630>
   18dd0:	cmp	r1, #11
   18dd4:	mov	r6, r0
   18dd8:	bne	18d6c <__assert_fail@plt+0x75c0>
   18ddc:	cmp	r0, #0
   18de0:	beq	18df8 <__assert_fail@plt+0x764c>
   18de4:	movw	r1, #35164	; 0x895c
   18de8:	movt	r1, #1
   18dec:	mov	r2, #0
   18df0:	bl	188e4 <__assert_fail@plt+0x7138>
   18df4:	ldr	r2, [fp, #12]
   18df8:	mov	r0, #13
   18dfc:	str	r0, [r2]
   18e00:	b	18f08 <__assert_fail@plt+0x775c>
   18e04:	mov	r4, r6
   18e08:	b	18f0c <__assert_fail@plt+0x7760>
   18e0c:	mov	r0, #5
   18e10:	str	r0, [r3]
   18e14:	b	18f08 <__assert_fail@plt+0x775c>
   18e18:	mov	r0, #16
   18e1c:	str	r0, [r3]
   18e20:	b	18f08 <__assert_fail@plt+0x775c>
   18e24:	mov	r6, #9
   18e28:	mov	r0, #6
   18e2c:	str	r0, [r5]
   18e30:	mov	r4, #0
   18e34:	mov	r0, r7
   18e38:	mov	r1, #0
   18e3c:	mov	r2, #0
   18e40:	mov	r3, r5
   18e44:	bl	18f24 <__assert_fail@plt+0x7778>
   18e48:	mov	r8, r0
   18e4c:	str	r6, [r5]
   18e50:	mov	r0, r7
   18e54:	mov	r1, #0
   18e58:	mov	r2, #0
   18e5c:	mov	r3, r5
   18e60:	bl	18f24 <__assert_fail@plt+0x7778>
   18e64:	mov	r1, r0
   18e68:	mov	r0, r7
   18e6c:	mov	r7, r1
   18e70:	mov	r1, r8
   18e74:	mov	r2, r7
   18e78:	mov	r3, #10
   18e7c:	bl	17eac <__assert_fail@plt+0x6700>
   18e80:	cmp	r8, #0
   18e84:	cmpne	r7, #0
   18e88:	bne	18eb4 <__assert_fail@plt+0x7708>
   18e8c:	mov	r0, #12
   18e90:	ldr	r1, [fp, #12]
   18e94:	str	r0, [r1]
   18e98:	b	18f0c <__assert_fail@plt+0x7760>
   18e9c:	mov	r4, #0
   18ea0:	mov	r0, r7
   18ea4:	mov	r1, #0
   18ea8:	mov	r2, #0
   18eac:	mov	r3, r5
   18eb0:	bl	18f24 <__assert_fail@plt+0x7778>
   18eb4:	mov	r6, r0
   18eb8:	cmp	r0, #0
   18ebc:	beq	18e8c <__assert_fail@plt+0x76e0>
   18ec0:	mov	r0, r5
   18ec4:	mov	r1, sl
   18ec8:	mov	r2, r9
   18ecc:	bl	17d20 <__assert_fail@plt+0x6574>
   18ed0:	mov	r4, r6
   18ed4:	b	18f0c <__assert_fail@plt+0x7760>
   18ed8:	mov	r0, #13
   18edc:	str	r0, [r3]
   18ee0:	b	18f08 <__assert_fail@plt+0x775c>
   18ee4:	cmp	r6, #0
   18ee8:	beq	18f08 <__assert_fail@plt+0x775c>
   18eec:	movw	r1, #35164	; 0x895c
   18ef0:	movt	r1, #1
   18ef4:	mov	r4, #0
   18ef8:	mov	r0, r6
   18efc:	mov	r2, #0
   18f00:	bl	188e4 <__assert_fail@plt+0x7138>
   18f04:	b	18f0c <__assert_fail@plt+0x7760>
   18f08:	mov	r4, #0
   18f0c:	mov	r0, r4
   18f10:	sub	sp, fp, #28
   18f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f18:	mov	r0, #6
   18f1c:	ldr	r1, [fp, #12]
   18f20:	b	18c04 <__assert_fail@plt+0x7458>
   18f24:	push	{r4, r5, r6, r7, fp, lr}
   18f28:	add	fp, sp, #16
   18f2c:	mov	r6, r3
   18f30:	mov	r4, r2
   18f34:	mov	r5, r1
   18f38:	mov	r7, r0
   18f3c:	ldr	r0, [r0, #64]	; 0x40
   18f40:	cmp	r0, #31
   18f44:	beq	18fa0 <__assert_fail@plt+0x77f4>
   18f48:	ldr	r0, [r7, #56]	; 0x38
   18f4c:	ldr	r1, [r7, #64]	; 0x40
   18f50:	add	r2, r1, #1
   18f54:	str	r2, [r7, #64]	; 0x40
   18f58:	add	r0, r0, r1, lsl #5
   18f5c:	mov	r1, #0
   18f60:	str	r1, [r0, #4]!
   18f64:	str	r5, [r0, #4]
   18f68:	str	r4, [r0, #8]
   18f6c:	ldm	r6, {r2, r3}
   18f70:	str	r1, [r0, #12]
   18f74:	str	r1, [r0, #16]
   18f78:	mvn	r1, #0
   18f7c:	str	r1, [r0, #28]
   18f80:	str	r2, [r0, #20]
   18f84:	bic	r1, r3, #786432	; 0xc0000
   18f88:	str	r1, [r0, #24]
   18f8c:	cmp	r5, #0
   18f90:	strne	r0, [r5]
   18f94:	cmp	r4, #0
   18f98:	strne	r0, [r4]
   18f9c:	pop	{r4, r5, r6, r7, fp, pc}
   18fa0:	mov	r0, #996	; 0x3e4
   18fa4:	bl	22a6c <__assert_fail@plt+0x112c0>
   18fa8:	cmp	r0, #0
   18fac:	moveq	r0, #0
   18fb0:	popeq	{r4, r5, r6, r7, fp, pc}
   18fb4:	ldr	r1, [r7, #56]	; 0x38
   18fb8:	str	r1, [r0]
   18fbc:	mov	r1, #0
   18fc0:	str	r1, [r7, #64]	; 0x40
   18fc4:	str	r0, [r7, #56]	; 0x38
   18fc8:	b	18f48 <__assert_fail@plt+0x779c>
   18fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fd0:	add	fp, sp, #28
   18fd4:	sub	sp, sp, #12
   18fd8:	mov	r5, r3
   18fdc:	mov	r6, r2
   18fe0:	mov	r7, r1
   18fe4:	mov	r4, r0
   18fe8:	ldr	r8, [r1]
   18fec:	ldr	sl, [r1, #24]
   18ff0:	add	r0, sl, #1
   18ff4:	str	r0, [r1, #24]
   18ff8:	orr	r2, r3, #8388608	; 0x800000
   18ffc:	mov	r0, r6
   19000:	mov	r1, r4
   19004:	bl	17d20 <__assert_fail@plt+0x6574>
   19008:	ldrb	r0, [r6, #4]
   1900c:	mov	r1, #0
   19010:	ldr	r9, [fp, #12]
   19014:	cmp	r0, #9
   19018:	beq	19064 <__assert_fail@plt+0x78b8>
   1901c:	ldr	r0, [fp, #8]
   19020:	stm	sp, {r0, r9}
   19024:	mov	r0, r4
   19028:	mov	r1, r7
   1902c:	mov	r2, r6
   19030:	mov	r3, r5
   19034:	bl	17d40 <__assert_fail@plt+0x6594>
   19038:	mov	r1, r0
   1903c:	ldr	r0, [r9]
   19040:	mov	r5, #0
   19044:	cmp	r0, #0
   19048:	bne	1909c <__assert_fail@plt+0x78f0>
   1904c:	ldrb	r0, [r6, #4]
   19050:	cmp	r0, #9
   19054:	bne	190b4 <__assert_fail@plt+0x7908>
   19058:	ldr	r0, [r9]
   1905c:	cmp	r0, #0
   19060:	bne	1909c <__assert_fail@plt+0x78f0>
   19064:	cmp	sl, #8
   19068:	ldrls	r0, [r8, #84]	; 0x54
   1906c:	movls	r2, #1
   19070:	orrls	r0, r0, r2, lsl sl
   19074:	strls	r0, [r8, #84]	; 0x54
   19078:	mov	r5, #0
   1907c:	mov	r0, r8
   19080:	mov	r2, #0
   19084:	mov	r3, #17
   19088:	bl	17eac <__assert_fail@plt+0x6700>
   1908c:	cmp	r0, #0
   19090:	beq	190a8 <__assert_fail@plt+0x78fc>
   19094:	str	sl, [r0, #20]
   19098:	mov	r5, r0
   1909c:	mov	r0, r5
   190a0:	sub	sp, fp, #28
   190a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190a8:	mov	r0, #12
   190ac:	str	r0, [r9]
   190b0:	b	1909c <__assert_fail@plt+0x78f0>
   190b4:	cmp	r1, #0
   190b8:	beq	190d4 <__assert_fail@plt+0x7928>
   190bc:	movw	r2, #35164	; 0x895c
   190c0:	movt	r2, #1
   190c4:	mov	r0, r1
   190c8:	mov	r1, r2
   190cc:	mov	r2, #0
   190d0:	bl	188e4 <__assert_fail@plt+0x7138>
   190d4:	mov	r0, #8
   190d8:	str	r0, [r9]
   190dc:	b	1909c <__assert_fail@plt+0x78f0>
   190e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190e4:	add	fp, sp, #28
   190e8:	sub	sp, sp, #124	; 0x7c
   190ec:	mov	r8, r3
   190f0:	mov	r6, r2
   190f4:	mov	r9, r1
   190f8:	mov	r7, r0
   190fc:	mov	r5, #0
   19100:	str	r5, [fp, #-32]	; 0xffffffe0
   19104:	str	r5, [fp, #-36]	; 0xffffffdc
   19108:	mov	r0, #32
   1910c:	mov	r1, #1
   19110:	bl	22a18 <__assert_fail@plt+0x1126c>
   19114:	mov	r4, r0
   19118:	mov	r0, #40	; 0x28
   1911c:	mov	r1, #1
   19120:	bl	22a18 <__assert_fail@plt+0x1126c>
   19124:	mov	sl, r0
   19128:	cmp	r4, #0
   1912c:	cmpne	sl, #0
   19130:	beq	195bc <__assert_fail@plt+0x7e10>
   19134:	mov	r0, r6
   19138:	mov	r1, r7
   1913c:	mov	r2, r8
   19140:	bl	19c04 <__assert_fail@plt+0x8458>
   19144:	mov	r5, r0
   19148:	ldrb	r0, [r6, #4]
   1914c:	cmp	r0, #25
   19150:	beq	19164 <__assert_fail@plt+0x79b8>
   19154:	cmp	r0, #2
   19158:	beq	195b4 <__assert_fail@plt+0x7e08>
   1915c:	mov	r0, #0
   19160:	b	191b4 <__assert_fail@plt+0x7a08>
   19164:	ldrb	r0, [sl, #16]
   19168:	orr	r0, r0, #1
   1916c:	strb	r0, [sl, #16]
   19170:	tst	r8, #256	; 0x100
   19174:	beq	19184 <__assert_fail@plt+0x79d8>
   19178:	mov	r0, r4
   1917c:	mov	r1, #10
   19180:	bl	19d78 <__assert_fail@plt+0x85cc>
   19184:	ldr	r0, [r7, #40]	; 0x28
   19188:	add	r0, r0, r5
   1918c:	str	r0, [r7, #40]	; 0x28
   19190:	mov	r0, r6
   19194:	mov	r1, r7
   19198:	mov	r2, r8
   1919c:	bl	19c04 <__assert_fail@plt+0x8458>
   191a0:	mov	r5, r0
   191a4:	ldrb	r0, [r6, #4]
   191a8:	cmp	r0, #2
   191ac:	beq	195b4 <__assert_fail@plt+0x7e08>
   191b0:	mov	r0, #1
   191b4:	str	r0, [sp, #20]
   191b8:	ldr	r0, [r6, #4]
   191bc:	uxtb	r1, r0
   191c0:	cmp	r1, #21
   191c4:	moveq	r1, #1
   191c8:	bfieq	r0, r1, #0, #8
   191cc:	streq	r0, [r6, #4]
   191d0:	str	sl, [sp, #24]
   191d4:	mov	r0, #3
   191d8:	str	r0, [fp, #-44]	; 0xffffffd4
   191dc:	add	r0, sp, #68	; 0x44
   191e0:	str	r0, [fp, #-40]	; 0xffffffd8
   191e4:	mov	r0, #1
   191e8:	str	r8, [sp]
   191ec:	str	r0, [sp, #4]
   191f0:	sub	r0, fp, #44	; 0x2c
   191f4:	mov	r1, r7
   191f8:	mov	r2, r6
   191fc:	mov	r3, r5
   19200:	bl	19d9c <__assert_fail@plt+0x85f0>
   19204:	cmp	r0, #0
   19208:	bne	195a4 <__assert_fail@plt+0x7df8>
   1920c:	mov	r0, #0
   19210:	str	r0, [sp, #16]
   19214:	mov	r0, r6
   19218:	mov	r1, r7
   1921c:	mov	r2, r8
   19220:	bl	19c04 <__assert_fail@plt+0x8458>
   19224:	mov	sl, r0
   19228:	ldr	r5, [fp, #-44]	; 0xffffffd4
   1922c:	cmp	r5, #2
   19230:	beq	19298 <__assert_fail@plt+0x7aec>
   19234:	cmp	r5, #4
   19238:	bne	1925c <__assert_fail@plt+0x7ab0>
   1923c:	ldr	r0, [r7, #64]	; 0x40
   19240:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19244:	stm	sp, {r1, r8}
   19248:	mov	r1, r4
   1924c:	ldr	r2, [sp, #24]
   19250:	sub	r3, fp, #36	; 0x24
   19254:	bl	1a138 <__assert_fail@plt+0x898c>
   19258:	b	192a4 <__assert_fail@plt+0x7af8>
   1925c:	ldrb	r0, [r6, #4]
   19260:	cmp	r0, #22
   19264:	beq	19304 <__assert_fail@plt+0x7b58>
   19268:	cmp	r0, #2
   1926c:	beq	195a0 <__assert_fail@plt+0x7df4>
   19270:	cmp	r5, #1
   19274:	beq	193c4 <__assert_fail@plt+0x7c18>
   19278:	cmp	r5, #2
   1927c:	beq	19298 <__assert_fail@plt+0x7aec>
   19280:	cmp	r5, #3
   19284:	bne	193f4 <__assert_fail@plt+0x7c48>
   19288:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1928c:	mov	r0, r4
   19290:	bl	1a100 <__assert_fail@plt+0x8954>
   19294:	b	192a4 <__assert_fail@plt+0x7af8>
   19298:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1929c:	mov	r0, r4
   192a0:	bl	1a0c8 <__assert_fail@plt+0x891c>
   192a4:	ldr	r1, [fp, #8]
   192a8:	str	r0, [r1]
   192ac:	cmp	r0, #0
   192b0:	bne	195ac <__assert_fail@plt+0x7e00>
   192b4:	ldrb	r0, [r6, #4]
   192b8:	cmp	r0, #21
   192bc:	beq	1942c <__assert_fail@plt+0x7c80>
   192c0:	cmp	r0, #2
   192c4:	beq	195a0 <__assert_fail@plt+0x7df4>
   192c8:	mov	r0, #3
   192cc:	str	r0, [fp, #-44]	; 0xffffffd4
   192d0:	add	r0, sp, #68	; 0x44
   192d4:	str	r0, [fp, #-40]	; 0xffffffd8
   192d8:	str	r8, [sp]
   192dc:	mov	r0, #0
   192e0:	str	r0, [sp, #4]
   192e4:	sub	r0, fp, #44	; 0x2c
   192e8:	mov	r1, r7
   192ec:	mov	r2, r6
   192f0:	mov	r3, sl
   192f4:	bl	19d9c <__assert_fail@plt+0x85f0>
   192f8:	cmp	r0, #0
   192fc:	beq	19214 <__assert_fail@plt+0x7a68>
   19300:	b	195a4 <__assert_fail@plt+0x7df8>
   19304:	ldr	r0, [r7, #40]	; 0x28
   19308:	add	r0, r0, sl
   1930c:	str	r0, [r7, #40]	; 0x28
   19310:	add	r0, sp, #28
   19314:	mov	r1, r7
   19318:	mov	r2, r8
   1931c:	bl	19c04 <__assert_fail@plt+0x8458>
   19320:	mov	r3, r0
   19324:	ldrb	r0, [sp, #32]
   19328:	cmp	r0, #21
   1932c:	beq	193a8 <__assert_fail@plt+0x7bfc>
   19330:	cmp	r0, #2
   19334:	sub	r1, fp, #52	; 0x34
   19338:	beq	195a0 <__assert_fail@plt+0x7df4>
   1933c:	mov	r0, #3
   19340:	str	r0, [fp, #-52]	; 0xffffffcc
   19344:	add	r0, sp, #36	; 0x24
   19348:	str	r0, [fp, #-48]	; 0xffffffd0
   1934c:	str	r8, [sp]
   19350:	mov	r0, #1
   19354:	str	r0, [sp, #4]
   19358:	mov	r0, r1
   1935c:	mov	r5, r1
   19360:	mov	r1, r7
   19364:	add	r2, sp, #28
   19368:	bl	19d9c <__assert_fail@plt+0x85f0>
   1936c:	cmp	r0, #0
   19370:	bne	195a4 <__assert_fail@plt+0x7df8>
   19374:	mov	r0, r6
   19378:	mov	r1, r7
   1937c:	mov	r2, r8
   19380:	bl	19c04 <__assert_fail@plt+0x8458>
   19384:	mov	sl, r0
   19388:	stm	sp, {r5, r9}
   1938c:	str	r8, [sp, #8]
   19390:	mov	r0, r4
   19394:	ldr	r1, [sp, #24]
   19398:	sub	r2, fp, #32
   1939c:	sub	r3, fp, #44	; 0x2c
   193a0:	bl	19ea4 <__assert_fail@plt+0x86f8>
   193a4:	b	192a4 <__assert_fail@plt+0x7af8>
   193a8:	ldr	r0, [r7, #40]	; 0x28
   193ac:	sub	r0, r0, sl
   193b0:	str	r0, [r7, #40]	; 0x28
   193b4:	mov	r0, #1
   193b8:	strb	r0, [r6, #4]
   193bc:	cmp	r5, #1
   193c0:	bne	19278 <__assert_fail@plt+0x7acc>
   193c4:	ldr	r5, [sp, #24]
   193c8:	ldr	r0, [r5, #20]
   193cc:	ldr	r1, [sp, #16]
   193d0:	cmp	r1, r0
   193d4:	beq	19404 <__assert_fail@plt+0x7c58>
   193d8:	ldr	r0, [r5]
   193dc:	ldr	r1, [r5, #20]
   193e0:	add	r2, r1, #1
   193e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   193e8:	str	r2, [r5, #20]
   193ec:	str	r3, [r0, r1, lsl #2]
   193f0:	b	192b4 <__assert_fail@plt+0x7b08>
   193f4:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   193f8:	mov	r0, r4
   193fc:	bl	19d78 <__assert_fail@plt+0x85cc>
   19400:	b	192b4 <__assert_fail@plt+0x7b08>
   19404:	mov	r1, #1
   19408:	orr	r0, r1, r0, lsl #1
   1940c:	str	r0, [sp, #16]
   19410:	lsl	r1, r0, #2
   19414:	ldr	r0, [r5]
   19418:	bl	22a9c <__assert_fail@plt+0x112f0>
   1941c:	cmp	r0, #0
   19420:	beq	195dc <__assert_fail@plt+0x7e30>
   19424:	str	r0, [r5]
   19428:	b	193d8 <__assert_fail@plt+0x7c2c>
   1942c:	ldr	r0, [r7, #40]	; 0x28
   19430:	add	r0, r0, sl
   19434:	str	r0, [r7, #40]	; 0x28
   19438:	ldr	r0, [sp, #20]
   1943c:	cmp	r0, #0
   19440:	movne	r0, r4
   19444:	blne	1a9a0 <__assert_fail@plt+0x91f4>
   19448:	ldr	r0, [r9, #92]	; 0x5c
   1944c:	cmp	r0, #2
   19450:	ldr	sl, [sp, #24]
   19454:	blt	19464 <__assert_fail@plt+0x7cb8>
   19458:	ldr	r1, [r9, #60]	; 0x3c
   1945c:	mov	r0, r4
   19460:	bl	1a9c0 <__assert_fail@plt+0x9214>
   19464:	ldr	r0, [sl, #20]
   19468:	cmp	r0, #0
   1946c:	bne	19494 <__assert_fail@plt+0x7ce8>
   19470:	ldr	r0, [sl, #24]
   19474:	cmp	r0, #0
   19478:	bne	19494 <__assert_fail@plt+0x7ce8>
   1947c:	ldr	r0, [sl, #28]
   19480:	cmp	r0, #0
   19484:	bne	19494 <__assert_fail@plt+0x7ce8>
   19488:	ldr	r0, [sl, #32]
   1948c:	cmp	r0, #0
   19490:	beq	19550 <__assert_fail@plt+0x7da4>
   19494:	ldrb	r0, [r9, #88]	; 0x58
   19498:	orr	r0, r0, #2
   1949c:	strb	r0, [r9, #88]	; 0x58
   194a0:	str	sl, [sp, #68]	; 0x44
   194a4:	ldr	r7, [sp, #72]	; 0x48
   194a8:	mov	r0, #6
   194ac:	strb	r0, [sp, #72]	; 0x48
   194b0:	mov	r6, #0
   194b4:	add	r3, sp, #68	; 0x44
   194b8:	mov	r0, r9
   194bc:	mov	r1, #0
   194c0:	mov	r2, #0
   194c4:	bl	18f24 <__assert_fail@plt+0x7778>
   194c8:	cmp	r0, #0
   194cc:	beq	195e0 <__assert_fail@plt+0x7e34>
   194d0:	mov	r5, r0
   194d4:	bic	r0, r7, #255	; 0xff
   194d8:	ldr	r1, [r4, r6, lsl #2]
   194dc:	cmp	r1, #0
   194e0:	bne	194fc <__assert_fail@plt+0x7d50>
   194e4:	add	r6, r6, #1
   194e8:	cmp	r6, #7
   194ec:	bls	194d8 <__assert_fail@plt+0x7d2c>
   194f0:	mov	r0, r4
   194f4:	bl	1312c <__assert_fail@plt+0x1980>
   194f8:	b	19544 <__assert_fail@plt+0x7d98>
   194fc:	str	r4, [sp, #68]	; 0x44
   19500:	orr	r0, r0, #3
   19504:	str	r0, [sp, #72]	; 0x48
   19508:	add	r3, sp, #68	; 0x44
   1950c:	mov	r0, r9
   19510:	mov	r1, #0
   19514:	mov	r2, #0
   19518:	bl	18f24 <__assert_fail@plt+0x7778>
   1951c:	cmp	r0, #0
   19520:	beq	195e0 <__assert_fail@plt+0x7e34>
   19524:	mov	r1, r0
   19528:	mov	r0, r9
   1952c:	mov	r2, r5
   19530:	mov	r3, #10
   19534:	bl	17eac <__assert_fail@plt+0x6700>
   19538:	mov	r5, r0
   1953c:	cmp	r0, #0
   19540:	beq	195e0 <__assert_fail@plt+0x7e34>
   19544:	mov	r0, r5
   19548:	sub	sp, fp, #28
   1954c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19550:	ldr	r0, [r9, #92]	; 0x5c
   19554:	cmp	r0, #2
   19558:	blt	19574 <__assert_fail@plt+0x7dc8>
   1955c:	ldr	r0, [sl, #36]	; 0x24
   19560:	cmp	r0, #0
   19564:	bne	19494 <__assert_fail@plt+0x7ce8>
   19568:	ldrb	r0, [sl, #16]
   1956c:	tst	r0, #1
   19570:	bne	19494 <__assert_fail@plt+0x7ce8>
   19574:	mov	r0, sl
   19578:	bl	169d8 <__assert_fail@plt+0x522c>
   1957c:	str	r4, [sp, #68]	; 0x44
   19580:	mov	r0, #3
   19584:	strb	r0, [sp, #72]	; 0x48
   19588:	add	r3, sp, #68	; 0x44
   1958c:	mov	r0, r9
   19590:	mov	r1, #0
   19594:	mov	r2, #0
   19598:	bl	18f24 <__assert_fail@plt+0x7778>
   1959c:	b	19538 <__assert_fail@plt+0x7d8c>
   195a0:	mov	r0, #7
   195a4:	ldr	r1, [fp, #8]
   195a8:	str	r0, [r1]
   195ac:	ldr	sl, [sp, #24]
   195b0:	b	195ec <__assert_fail@plt+0x7e40>
   195b4:	mov	r0, #2
   195b8:	b	195e4 <__assert_fail@plt+0x7e38>
   195bc:	mov	r0, r4
   195c0:	bl	1312c <__assert_fail@plt+0x1980>
   195c4:	mov	r0, sl
   195c8:	bl	1312c <__assert_fail@plt+0x1980>
   195cc:	mov	r0, #12
   195d0:	ldr	r1, [fp, #8]
   195d4:	str	r0, [r1]
   195d8:	b	19544 <__assert_fail@plt+0x7d98>
   195dc:	mov	sl, r5
   195e0:	mov	r0, #12
   195e4:	ldr	r1, [fp, #8]
   195e8:	str	r0, [r1]
   195ec:	mov	r0, r4
   195f0:	bl	1312c <__assert_fail@plt+0x1980>
   195f4:	mov	r0, sl
   195f8:	bl	169d8 <__assert_fail@plt+0x522c>
   195fc:	mov	r5, #0
   19600:	b	19544 <__assert_fail@plt+0x7d98>
   19604:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19608:	add	fp, sp, #24
   1960c:	mov	r4, r0
   19610:	ldrb	r0, [r0, #88]	; 0x58
   19614:	orr	r1, r0, #16
   19618:	strb	r1, [r4, #88]	; 0x58
   1961c:	tst	r0, #8
   19620:	bne	1965c <__assert_fail@plt+0x7eb0>
   19624:	movw	r1, #0
   19628:	movt	r1, #1023	; 0x3ff
   1962c:	mov	r2, #0
   19630:	mvn	r3, #2013265921	; 0x78000001
   19634:	mvn	r7, #-134217727	; 0xf8000001
   19638:	str	r2, [r4, #96]	; 0x60
   1963c:	add	r2, r4, #100	; 0x64
   19640:	stm	r2, {r1, r3, r7}
   19644:	tst	r0, #4
   19648:	beq	19668 <__assert_fail@plt+0x7ebc>
   1964c:	vmov.i32	q8, #0	; 0x00000000
   19650:	add	r0, r4, #112	; 0x70
   19654:	vst1.32	{d16-d17}, [r0]
   19658:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1965c:	mov	r5, #0
   19660:	mov	r8, #0
   19664:	b	19670 <__assert_fail@plt+0x7ec4>
   19668:	mov	r8, #4
   1966c:	mov	r5, #128	; 0x80
   19670:	bl	11644 <__ctype_b_loc@plt>
   19674:	ldr	r0, [r0]
   19678:	add	r6, r0, r5, lsl #1
   1967c:	mov	r1, #1
   19680:	b	19698 <__assert_fail@plt+0x7eec>
   19684:	add	r6, r6, #64	; 0x40
   19688:	add	r8, r8, #1
   1968c:	add	r5, r5, #32
   19690:	cmp	r8, #8
   19694:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   19698:	add	r0, r4, r8, lsl #2
   1969c:	add	r2, r0, #96	; 0x60
   196a0:	mov	r3, #0
   196a4:	mov	r0, r6
   196a8:	add	r7, r5, r3
   196ac:	cmp	r7, #95	; 0x5f
   196b0:	beq	196c0 <__assert_fail@plt+0x7f14>
   196b4:	ldrh	r7, [r0]
   196b8:	ands	r7, r7, #8
   196bc:	beq	196cc <__assert_fail@plt+0x7f20>
   196c0:	ldr	r7, [r2]
   196c4:	orr	r7, r7, r1, lsl r3
   196c8:	str	r7, [r2]
   196cc:	add	r0, r0, #2
   196d0:	add	r3, r3, #1
   196d4:	cmp	r3, #32
   196d8:	bne	196a8 <__assert_fail@plt+0x7efc>
   196dc:	b	19684 <__assert_fail@plt+0x7ed8>
   196e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196e4:	add	fp, sp, #28
   196e8:	sub	sp, sp, #20
   196ec:	mov	r8, r3
   196f0:	mov	r6, r2
   196f4:	mov	r4, r1
   196f8:	mov	r9, r0
   196fc:	mov	r7, #0
   19700:	str	r7, [sp, #16]
   19704:	mov	r0, #32
   19708:	mov	r1, #1
   1970c:	bl	22a18 <__assert_fail@plt+0x1126c>
   19710:	ldr	r1, [fp, #12]
   19714:	cmp	r0, #0
   19718:	beq	19888 <__assert_fail@plt+0x80dc>
   1971c:	mov	r5, r0
   19720:	mov	r0, #40	; 0x28
   19724:	mov	r1, #1
   19728:	bl	22a18 <__assert_fail@plt+0x1126c>
   1972c:	cmp	r0, #0
   19730:	beq	19894 <__assert_fail@plt+0x80e8>
   19734:	mov	sl, r0
   19738:	ldr	r1, [fp, #8]
   1973c:	ldrb	r0, [r0, #16]
   19740:	and	r0, r0, #254	; 0xfe
   19744:	orr	r0, r0, r1
   19748:	strb	r0, [sl, #16]
   1974c:	mov	r7, #0
   19750:	stm	sp, {r6, r7}
   19754:	add	r3, sp, #16
   19758:	mov	r0, r4
   1975c:	mov	r1, r5
   19760:	mov	r2, sl
   19764:	bl	1a138 <__assert_fail@plt+0x898c>
   19768:	cmp	r0, #0
   1976c:	bne	198b0 <__assert_fail@plt+0x8104>
   19770:	ldrb	r0, [r8]
   19774:	cmp	r0, #0
   19778:	beq	19798 <__assert_fail@plt+0x7fec>
   1977c:	add	r4, r8, #1
   19780:	uxtb	r1, r0
   19784:	mov	r0, r5
   19788:	bl	19d78 <__assert_fail@plt+0x85cc>
   1978c:	ldrb	r0, [r4], #1
   19790:	cmp	r0, #0
   19794:	bne	19780 <__assert_fail@plt+0x7fd4>
   19798:	ldr	r0, [fp, #8]
   1979c:	cmp	r0, #0
   197a0:	movne	r0, r5
   197a4:	blne	1a9a0 <__assert_fail@plt+0x91f4>
   197a8:	ldr	r0, [r9, #92]	; 0x5c
   197ac:	cmp	r0, #2
   197b0:	blt	197c0 <__assert_fail@plt+0x8014>
   197b4:	ldr	r1, [r9, #60]	; 0x3c
   197b8:	mov	r0, r5
   197bc:	bl	1a9c0 <__assert_fail@plt+0x9214>
   197c0:	str	r5, [sp, #8]
   197c4:	ldr	r4, [sp, #12]
   197c8:	bfc	r4, #0, #23
   197cc:	orr	r0, r4, #3
   197d0:	str	r0, [sp, #12]
   197d4:	mov	r7, #0
   197d8:	add	r3, sp, #8
   197dc:	mov	r0, r9
   197e0:	mov	r1, #0
   197e4:	mov	r2, #0
   197e8:	bl	18f24 <__assert_fail@plt+0x7778>
   197ec:	cmp	r0, #0
   197f0:	beq	1986c <__assert_fail@plt+0x80c0>
   197f4:	mov	r6, r0
   197f8:	ldr	r0, [r9, #92]	; 0x5c
   197fc:	cmp	r0, #2
   19800:	blt	19854 <__assert_fail@plt+0x80a8>
   19804:	str	sl, [sp, #8]
   19808:	orr	r0, r4, #6
   1980c:	str	r0, [sp, #12]
   19810:	ldrb	r0, [r9, #88]	; 0x58
   19814:	orr	r0, r0, #2
   19818:	strb	r0, [r9, #88]	; 0x58
   1981c:	add	r3, sp, #8
   19820:	mov	r0, r9
   19824:	mov	r1, #0
   19828:	mov	r2, #0
   1982c:	bl	18f24 <__assert_fail@plt+0x7778>
   19830:	cmp	r0, #0
   19834:	beq	1986c <__assert_fail@plt+0x80c0>
   19838:	mov	r2, r0
   1983c:	mov	r0, r9
   19840:	mov	r1, r6
   19844:	mov	r3, #10
   19848:	bl	17eac <__assert_fail@plt+0x6700>
   1984c:	mov	r7, r0
   19850:	b	19860 <__assert_fail@plt+0x80b4>
   19854:	mov	r0, sl
   19858:	bl	169d8 <__assert_fail@plt+0x522c>
   1985c:	mov	r7, r6
   19860:	mov	r0, r7
   19864:	sub	sp, fp, #28
   19868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1986c:	mov	r0, r5
   19870:	bl	1312c <__assert_fail@plt+0x1980>
   19874:	mov	r0, sl
   19878:	bl	169d8 <__assert_fail@plt+0x522c>
   1987c:	mov	r0, #12
   19880:	ldr	r1, [fp, #12]
   19884:	b	1988c <__assert_fail@plt+0x80e0>
   19888:	mov	r0, #12
   1988c:	str	r0, [r1]
   19890:	b	19860 <__assert_fail@plt+0x80b4>
   19894:	mov	r0, r5
   19898:	bl	1312c <__assert_fail@plt+0x1980>
   1989c:	mov	r0, #12
   198a0:	ldr	r1, [fp, #12]
   198a4:	str	r0, [r1]
   198a8:	mov	r7, #0
   198ac:	b	19860 <__assert_fail@plt+0x80b4>
   198b0:	mov	r6, r0
   198b4:	mov	r0, r5
   198b8:	bl	1312c <__assert_fail@plt+0x1980>
   198bc:	mov	r0, sl
   198c0:	bl	169d8 <__assert_fail@plt+0x522c>
   198c4:	ldr	r0, [fp, #12]
   198c8:	str	r6, [r0]
   198cc:	b	19860 <__assert_fail@plt+0x80b4>
   198d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198d4:	add	fp, sp, #28
   198d8:	sub	sp, sp, #20
   198dc:	mov	r7, r3
   198e0:	mov	r5, r2
   198e4:	mov	r8, r1
   198e8:	mov	r4, r0
   198ec:	ldrb	r0, [r3, #4]
   198f0:	ldr	r1, [fp, #12]
   198f4:	str	r1, [sp, #16]
   198f8:	ldr	sl, [fp, #8]
   198fc:	cmp	r0, #23
   19900:	bne	19958 <__assert_fail@plt+0x81ac>
   19904:	ldr	r0, [r7]
   19908:	str	r0, [sp, #12]
   1990c:	ldr	r0, [r7, #4]
   19910:	str	r0, [sp, #8]
   19914:	ldr	r0, [r8, #40]	; 0x28
   19918:	str	r0, [sp, #4]
   1991c:	mov	r0, r8
   19920:	mov	r1, r7
   19924:	mov	r2, sl
   19928:	bl	1ac14 <__assert_fail@plt+0x9468>
   1992c:	cmn	r0, #1
   19930:	bne	19974 <__assert_fail@plt+0x81c8>
   19934:	ldrb	r0, [r7, #4]
   19938:	cmp	r0, #1
   1993c:	bne	19950 <__assert_fail@plt+0x81a4>
   19940:	ldrb	r0, [r7]
   19944:	mov	r6, #0
   19948:	cmp	r0, #44	; 0x2c
   1994c:	beq	19980 <__assert_fail@plt+0x81d4>
   19950:	mov	r0, #10
   19954:	b	19bc8 <__assert_fail@plt+0x841c>
   19958:	mvn	r9, #0
   1995c:	cmp	r0, #19
   19960:	movweq	r9, #1
   19964:	sub	r0, r0, #18
   19968:	clz	r0, r0
   1996c:	lsr	r6, r0, #5
   19970:	b	19a18 <__assert_fail@plt+0x826c>
   19974:	mov	r6, r0
   19978:	cmn	r0, #2
   1997c:	beq	199a0 <__assert_fail@plt+0x81f4>
   19980:	ldrb	r0, [r7, #4]
   19984:	cmp	r0, #24
   19988:	mov	r9, r6
   1998c:	beq	199e8 <__assert_fail@plt+0x823c>
   19990:	cmp	r0, #1
   19994:	ldrbeq	r0, [r7]
   19998:	cmpeq	r0, #44	; 0x2c
   1999c:	beq	199cc <__assert_fail@plt+0x8220>
   199a0:	tst	sl, #2097152	; 0x200000
   199a4:	beq	19be0 <__assert_fail@plt+0x8434>
   199a8:	ldr	r0, [sp, #4]
   199ac:	str	r0, [r8, #40]	; 0x28
   199b0:	ldr	r0, [sp, #12]
   199b4:	str	r0, [r7]
   199b8:	ldr	r0, [sp, #8]
   199bc:	str	r0, [r7, #4]
   199c0:	mov	r0, #1
   199c4:	strb	r0, [r7, #4]
   199c8:	b	19bd4 <__assert_fail@plt+0x8428>
   199cc:	mov	r0, r8
   199d0:	mov	r1, r7
   199d4:	mov	r2, sl
   199d8:	bl	1ac14 <__assert_fail@plt+0x9468>
   199dc:	mov	r9, r0
   199e0:	cmn	r0, #2
   199e4:	beq	199a0 <__assert_fail@plt+0x81f4>
   199e8:	cmn	r9, #1
   199ec:	beq	199f8 <__assert_fail@plt+0x824c>
   199f0:	cmp	r6, r9
   199f4:	bgt	19950 <__assert_fail@plt+0x81a4>
   199f8:	ldrb	r0, [r7, #4]
   199fc:	cmp	r0, #24
   19a00:	bne	19950 <__assert_fail@plt+0x81a4>
   19a04:	cmn	r9, #1
   19a08:	mov	r0, r9
   19a0c:	moveq	r0, r6
   19a10:	cmp	r0, #32768	; 0x8000
   19a14:	bge	19bfc <__assert_fail@plt+0x8450>
   19a18:	mov	r0, r7
   19a1c:	mov	r1, r8
   19a20:	mov	r2, sl
   19a24:	bl	17d20 <__assert_fail@plt+0x6574>
   19a28:	cmp	r4, #0
   19a2c:	beq	19bd0 <__assert_fail@plt+0x8424>
   19a30:	orrs	r0, r9, r6
   19a34:	beq	19b28 <__assert_fail@plt+0x837c>
   19a38:	mov	r8, #0
   19a3c:	cmp	r6, #1
   19a40:	bge	19b40 <__assert_fail@plt+0x8394>
   19a44:	ldrb	r0, [r4, #24]
   19a48:	cmp	r0, #17
   19a4c:	bne	19a64 <__assert_fail@plt+0x82b8>
   19a50:	ldr	r2, [r4, #20]
   19a54:	movw	r1, #44440	; 0xad98
   19a58:	movt	r1, #1
   19a5c:	mov	r0, r4
   19a60:	bl	188e4 <__assert_fail@plt+0x7138>
   19a64:	mov	r3, #10
   19a68:	cmn	r9, #1
   19a6c:	movweq	r3, #11
   19a70:	mov	r0, r5
   19a74:	mov	r1, r4
   19a78:	mov	r2, #0
   19a7c:	bl	17eac <__assert_fail@plt+0x6700>
   19a80:	cmp	r0, #0
   19a84:	beq	19bc4 <__assert_fail@plt+0x8418>
   19a88:	mov	r7, r0
   19a8c:	add	r0, r6, #2
   19a90:	cmp	r0, r9
   19a94:	ble	19abc <__assert_fail@plt+0x8310>
   19a98:	cmp	r8, #0
   19a9c:	beq	19b20 <__assert_fail@plt+0x8374>
   19aa0:	mov	r0, r5
   19aa4:	mov	r1, r8
   19aa8:	mov	r2, r7
   19aac:	mov	r3, #16
   19ab0:	sub	sp, fp, #28
   19ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ab8:	b	17eac <__assert_fail@plt+0x6700>
   19abc:	add	r6, r6, #1
   19ac0:	mov	r0, r4
   19ac4:	mov	r1, r5
   19ac8:	bl	1acbc <__assert_fail@plt+0x9510>
   19acc:	mov	r4, r0
   19ad0:	mov	r0, r5
   19ad4:	mov	r1, r7
   19ad8:	mov	r2, r4
   19adc:	mov	r3, #16
   19ae0:	bl	17eac <__assert_fail@plt+0x6700>
   19ae4:	cmp	r4, #0
   19ae8:	movne	r1, r0
   19aec:	cmpne	r0, #0
   19af0:	beq	19bc4 <__assert_fail@plt+0x8418>
   19af4:	mov	r0, r5
   19af8:	mov	r2, #0
   19afc:	mov	r3, #10
   19b00:	bl	17eac <__assert_fail@plt+0x6700>
   19b04:	cmp	r0, #0
   19b08:	beq	19bc4 <__assert_fail@plt+0x8418>
   19b0c:	mov	r7, r0
   19b10:	add	r6, r6, #1
   19b14:	cmp	r6, r9
   19b18:	blt	19ac0 <__assert_fail@plt+0x8314>
   19b1c:	b	19a98 <__assert_fail@plt+0x82ec>
   19b20:	mov	r4, r7
   19b24:	b	19bd4 <__assert_fail@plt+0x8428>
   19b28:	movw	r1, #35164	; 0x895c
   19b2c:	movt	r1, #1
   19b30:	mov	r0, r4
   19b34:	mov	r2, #0
   19b38:	bl	188e4 <__assert_fail@plt+0x7138>
   19b3c:	b	19bd0 <__assert_fail@plt+0x8424>
   19b40:	bne	19b6c <__assert_fail@plt+0x83c0>
   19b44:	mov	r8, r4
   19b48:	cmp	r6, r9
   19b4c:	beq	19bbc <__assert_fail@plt+0x8410>
   19b50:	mov	r0, r4
   19b54:	mov	r1, r5
   19b58:	bl	1acbc <__assert_fail@plt+0x9510>
   19b5c:	mov	r4, r0
   19b60:	cmp	r0, #0
   19b64:	bne	19a44 <__assert_fail@plt+0x8298>
   19b68:	b	19bc4 <__assert_fail@plt+0x8418>
   19b6c:	mov	r7, #1
   19b70:	mov	r8, r4
   19b74:	mov	r0, r4
   19b78:	mov	r1, r5
   19b7c:	bl	1acbc <__assert_fail@plt+0x9510>
   19b80:	mov	r4, r0
   19b84:	mov	r0, r5
   19b88:	mov	r1, r8
   19b8c:	mov	r2, r4
   19b90:	mov	r3, #16
   19b94:	bl	17eac <__assert_fail@plt+0x6700>
   19b98:	cmp	r4, #0
   19b9c:	movne	r8, r0
   19ba0:	cmpne	r0, #0
   19ba4:	beq	19bc4 <__assert_fail@plt+0x8418>
   19ba8:	add	r7, r7, #1
   19bac:	cmp	r7, r6
   19bb0:	blt	19b74 <__assert_fail@plt+0x83c8>
   19bb4:	cmp	r6, r9
   19bb8:	bne	19b50 <__assert_fail@plt+0x83a4>
   19bbc:	mov	r4, r8
   19bc0:	b	19bd4 <__assert_fail@plt+0x8428>
   19bc4:	mov	r0, #12
   19bc8:	ldr	r1, [sp, #16]
   19bcc:	str	r0, [r1]
   19bd0:	mov	r4, #0
   19bd4:	mov	r0, r4
   19bd8:	sub	sp, fp, #28
   19bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19be0:	ldrb	r0, [r7, #4]
   19be4:	mov	r1, #10
   19be8:	cmp	r0, #2
   19bec:	movweq	r1, #9
   19bf0:	ldr	r0, [sp, #16]
   19bf4:	str	r1, [r0]
   19bf8:	b	19bd0 <__assert_fail@plt+0x8424>
   19bfc:	mov	r0, #15
   19c00:	b	19bc8 <__assert_fail@plt+0x841c>
   19c04:	push	{r4, sl, fp, lr}
   19c08:	add	fp, sp, #8
   19c0c:	ldr	ip, [r1, #40]	; 0x28
   19c10:	ldr	r3, [r1, #56]	; 0x38
   19c14:	cmp	r3, ip
   19c18:	ble	19c98 <__assert_fail@plt+0x84ec>
   19c1c:	ldr	r3, [r1, #4]
   19c20:	ldrb	ip, [r3, ip]
   19c24:	strb	ip, [r0]
   19c28:	ldr	r3, [r1, #80]	; 0x50
   19c2c:	cmp	r3, #2
   19c30:	blt	19c54 <__assert_fail@plt+0x84a8>
   19c34:	ldr	lr, [r1, #28]
   19c38:	ldr	r4, [r1, #40]	; 0x28
   19c3c:	cmp	r4, lr
   19c40:	beq	19c54 <__assert_fail@plt+0x84a8>
   19c44:	ldr	r3, [r1, #8]
   19c48:	ldr	r3, [r3, r4, lsl #2]
   19c4c:	cmn	r3, #1
   19c50:	beq	19d44 <__assert_fail@plt+0x8598>
   19c54:	tst	r2, #1
   19c58:	beq	19cac <__assert_fail@plt+0x8500>
   19c5c:	cmp	ip, #92	; 0x5c
   19c60:	bne	19cac <__assert_fail@plt+0x8500>
   19c64:	ldr	r2, [r1, #40]	; 0x28
   19c68:	ldr	r3, [r1, #48]	; 0x30
   19c6c:	add	r2, r2, #1
   19c70:	cmp	r2, r3
   19c74:	bge	19d44 <__assert_fail@plt+0x8598>
   19c78:	str	r2, [r1, #40]	; 0x28
   19c7c:	ldr	r1, [r1, #4]
   19c80:	ldrb	r2, [r1, r2]
   19c84:	mov	r1, #1
   19c88:	strb	r1, [r0, #4]
   19c8c:	strb	r2, [r0]
   19c90:	mov	r0, r1
   19c94:	pop	{r4, sl, fp, pc}
   19c98:	mov	r1, #2
   19c9c:	strb	r1, [r0, #4]
   19ca0:	mov	r1, #0
   19ca4:	mov	r0, r1
   19ca8:	pop	{r4, sl, fp, pc}
   19cac:	cmp	ip, #92	; 0x5c
   19cb0:	bgt	19d04 <__assert_fail@plt+0x8558>
   19cb4:	cmp	ip, #45	; 0x2d
   19cb8:	beq	19d1c <__assert_fail@plt+0x8570>
   19cbc:	cmp	ip, #91	; 0x5b
   19cc0:	bne	19d44 <__assert_fail@plt+0x8598>
   19cc4:	ldr	r3, [r1, #40]	; 0x28
   19cc8:	ldr	r4, [r1, #48]	; 0x30
   19ccc:	add	r3, r3, #1
   19cd0:	cmp	r3, r4
   19cd4:	bge	19d38 <__assert_fail@plt+0x858c>
   19cd8:	ldr	r1, [r1, #4]
   19cdc:	ldrb	r1, [r1, r3]
   19ce0:	strb	r1, [r0]
   19ce4:	cmp	r1, #61	; 0x3d
   19ce8:	beq	19d54 <__assert_fail@plt+0x85a8>
   19cec:	cmp	r1, #58	; 0x3a
   19cf0:	beq	19d5c <__assert_fail@plt+0x85b0>
   19cf4:	cmp	r1, #46	; 0x2e
   19cf8:	bne	19d40 <__assert_fail@plt+0x8594>
   19cfc:	mov	r1, #26
   19d00:	b	19d68 <__assert_fail@plt+0x85bc>
   19d04:	cmp	ip, #93	; 0x5d
   19d08:	beq	19d24 <__assert_fail@plt+0x8578>
   19d0c:	cmp	ip, #94	; 0x5e
   19d10:	bne	19d44 <__assert_fail@plt+0x8598>
   19d14:	mov	r1, #25
   19d18:	b	19d28 <__assert_fail@plt+0x857c>
   19d1c:	mov	r1, #22
   19d20:	b	19d28 <__assert_fail@plt+0x857c>
   19d24:	mov	r1, #21
   19d28:	strb	r1, [r0, #4]
   19d2c:	mov	r1, #1
   19d30:	mov	r0, r1
   19d34:	pop	{r4, sl, fp, pc}
   19d38:	mov	r1, #0
   19d3c:	strb	r1, [r0]
   19d40:	strb	ip, [r0]
   19d44:	mov	r1, #1
   19d48:	strb	r1, [r0, #4]
   19d4c:	mov	r0, r1
   19d50:	pop	{r4, sl, fp, pc}
   19d54:	mov	r1, #28
   19d58:	b	19d68 <__assert_fail@plt+0x85bc>
   19d5c:	tst	r2, #4
   19d60:	beq	19d40 <__assert_fail@plt+0x8594>
   19d64:	mov	r1, #30
   19d68:	strb	r1, [r0, #4]
   19d6c:	mov	r1, #2
   19d70:	mov	r0, r1
   19d74:	pop	{r4, sl, fp, pc}
   19d78:	asr	r2, r1, #31
   19d7c:	add	r2, r1, r2, lsr #27
   19d80:	asr	r2, r2, #5
   19d84:	ldr	ip, [r0, r2, lsl #2]
   19d88:	and	r1, r1, #31
   19d8c:	mov	r3, #1
   19d90:	orr	r1, ip, r3, lsl r1
   19d94:	str	r1, [r0, r2, lsl #2]
   19d98:	bx	lr
   19d9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19da0:	add	fp, sp, #24
   19da4:	sub	sp, sp, #8
   19da8:	mov	r5, r3
   19dac:	mov	r8, r2
   19db0:	mov	r6, r1
   19db4:	mov	r9, r0
   19db8:	ldr	r7, [r1, #40]	; 0x28
   19dbc:	mov	r0, r1
   19dc0:	mov	r1, r7
   19dc4:	bl	1a9e4 <__assert_fail@plt+0x9238>
   19dc8:	cmp	r0, #2
   19dcc:	blt	19e04 <__assert_fail@plt+0x8658>
   19dd0:	mov	r4, r0
   19dd4:	mov	r0, #1
   19dd8:	str	r0, [r9]
   19ddc:	mov	r0, r6
   19de0:	mov	r1, r7
   19de4:	bl	18758 <__assert_fail@plt+0x6fac>
   19de8:	str	r0, [r9, #4]
   19dec:	ldr	r0, [r6, #40]	; 0x28
   19df0:	add	r0, r0, r4
   19df4:	str	r0, [r6, #40]	; 0x28
   19df8:	mov	r0, #0
   19dfc:	sub	sp, fp, #24
   19e00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19e04:	ldr	r0, [fp, #12]
   19e08:	ldr	r2, [fp, #8]
   19e0c:	add	r1, r7, r5
   19e10:	str	r1, [r6, #40]	; 0x28
   19e14:	ldrb	r1, [r8, #4]
   19e18:	sub	r1, r1, #22
   19e1c:	cmp	r1, #8
   19e20:	bhi	19e8c <__assert_fail@plt+0x86e0>
   19e24:	add	r3, pc, #0
   19e28:	ldr	pc, [r3, r1, lsl #2]
   19e2c:	andeq	r9, r1, r8, ror #28
   19e30:	andeq	r9, r1, ip, lsl #29
   19e34:	andeq	r9, r1, ip, lsl #29
   19e38:	andeq	r9, r1, ip, lsl #29
   19e3c:	andeq	r9, r1, r0, asr lr
   19e40:	andeq	r9, r1, ip, lsl #29
   19e44:	andeq	r9, r1, r0, asr lr
   19e48:	andeq	r9, r1, ip, lsl #29
   19e4c:	andeq	r9, r1, r0, asr lr
   19e50:	mov	r0, r9
   19e54:	mov	r1, r6
   19e58:	mov	r2, r8
   19e5c:	sub	sp, fp, #24
   19e60:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   19e64:	b	1aa40 <__assert_fail@plt+0x9294>
   19e68:	cmp	r0, #0
   19e6c:	bne	19e8c <__assert_fail@plt+0x86e0>
   19e70:	mov	r0, sp
   19e74:	mov	r1, r6
   19e78:	bl	19c04 <__assert_fail@plt+0x8458>
   19e7c:	ldrb	r1, [sp, #4]
   19e80:	mov	r0, #11
   19e84:	cmp	r1, #21
   19e88:	bne	19e9c <__assert_fail@plt+0x86f0>
   19e8c:	mov	r0, #0
   19e90:	str	r0, [r9]
   19e94:	ldrb	r1, [r8]
   19e98:	strb	r1, [r9, #4]
   19e9c:	sub	sp, fp, #24
   19ea0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ea8:	add	fp, sp, #28
   19eac:	sub	sp, sp, #12
   19eb0:	mov	sl, r0
   19eb4:	ldr	r7, [r3]
   19eb8:	mov	r0, #11
   19ebc:	cmp	r7, #2
   19ec0:	cmpne	r7, #4
   19ec4:	beq	19edc <__assert_fail@plt+0x8730>
   19ec8:	ldr	r8, [fp, #8]
   19ecc:	ldr	r5, [r8]
   19ed0:	cmp	r5, #2
   19ed4:	cmpne	r5, #4
   19ed8:	bne	19ee4 <__assert_fail@plt+0x8738>
   19edc:	sub	sp, fp, #28
   19ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ee4:	mov	r6, r3
   19ee8:	mov	r9, r2
   19eec:	mov	r4, r1
   19ef0:	cmp	r7, #3
   19ef4:	bne	19f08 <__assert_fail@plt+0x875c>
   19ef8:	ldr	r0, [r6, #4]
   19efc:	bl	1165c <strlen@plt>
   19f00:	cmp	r0, #1
   19f04:	bhi	1a050 <__assert_fail@plt+0x88a4>
   19f08:	cmp	r5, #3
   19f0c:	bne	19f20 <__assert_fail@plt+0x8774>
   19f10:	ldr	r0, [r8, #4]
   19f14:	bl	1165c <strlen@plt>
   19f18:	cmp	r0, #1
   19f1c:	bhi	1a050 <__assert_fail@plt+0x88a4>
   19f20:	cmp	r7, #3
   19f24:	beq	19f38 <__assert_fail@plt+0x878c>
   19f28:	mov	r0, #0
   19f2c:	cmp	r7, #0
   19f30:	ldrbeq	r0, [r6, #4]
   19f34:	b	19f40 <__assert_fail@plt+0x8794>
   19f38:	ldr	r0, [r6, #4]
   19f3c:	ldrb	r0, [r0]
   19f40:	stmib	sp, {r4, r9}
   19f44:	cmp	r5, #3
   19f48:	beq	19f5c <__assert_fail@plt+0x87b0>
   19f4c:	mov	r9, #0
   19f50:	cmp	r5, #0
   19f54:	ldrbeq	r9, [r8, #4]
   19f58:	b	19f64 <__assert_fail@plt+0x87b8>
   19f5c:	ldr	r1, [r8, #4]
   19f60:	ldrb	r9, [r1]
   19f64:	ldr	r4, [fp, #12]
   19f68:	cmp	r7, #3
   19f6c:	cmpne	r7, #0
   19f70:	bne	19f84 <__assert_fail@plt+0x87d8>
   19f74:	mov	r1, r4
   19f78:	bl	1ac04 <__assert_fail@plt+0x9458>
   19f7c:	mov	r7, r0
   19f80:	b	19f88 <__assert_fail@plt+0x87dc>
   19f84:	ldr	r7, [r6, #4]
   19f88:	ldr	r0, [r8]
   19f8c:	cmp	r0, #3
   19f90:	cmpne	r0, #0
   19f94:	bne	19fac <__assert_fail@plt+0x8800>
   19f98:	mov	r0, r9
   19f9c:	mov	r1, r4
   19fa0:	bl	1ac04 <__assert_fail@plt+0x9458>
   19fa4:	mov	r6, r0
   19fa8:	b	19fb0 <__assert_fail@plt+0x8804>
   19fac:	ldr	r6, [r8, #4]
   19fb0:	ldr	r1, [sp, #8]
   19fb4:	ldr	r5, [sp, #4]
   19fb8:	mov	r0, #3
   19fbc:	cmn	r7, #1
   19fc0:	cmnne	r6, #1
   19fc4:	beq	19edc <__assert_fail@plt+0x8730>
   19fc8:	ldr	r0, [fp, #16]
   19fcc:	tst	r0, #65536	; 0x10000
   19fd0:	beq	19fe0 <__assert_fail@plt+0x8834>
   19fd4:	cmp	r7, r6
   19fd8:	mov	r0, #11
   19fdc:	bhi	19edc <__assert_fail@plt+0x8730>
   19fe0:	ldr	r0, [r4, #92]	; 0x5c
   19fe4:	cmp	r0, #2
   19fe8:	blt	1a01c <__assert_fail@plt+0x8870>
   19fec:	ldr	r0, [r5, #32]
   19ff0:	ldr	r1, [r1]
   19ff4:	cmp	r1, r0
   19ff8:	beq	1a05c <__assert_fail@plt+0x88b0>
   19ffc:	ldr	r0, [r5, #4]
   1a000:	ldr	r1, [r5, #32]
   1a004:	str	r7, [r0, r1, lsl #2]
   1a008:	ldr	r0, [r5, #8]
   1a00c:	ldr	r1, [r5, #32]
   1a010:	add	r2, r1, #1
   1a014:	str	r2, [r5, #32]
   1a018:	str	r6, [r0, r1, lsl #2]
   1a01c:	mov	r5, #0
   1a020:	cmp	r7, r5
   1a024:	cmpls	r5, r6
   1a028:	bhi	1a038 <__assert_fail@plt+0x888c>
   1a02c:	mov	r0, sl
   1a030:	mov	r1, r5
   1a034:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a038:	add	r5, r5, #1
   1a03c:	cmp	r5, #256	; 0x100
   1a040:	bne	1a020 <__assert_fail@plt+0x8874>
   1a044:	mov	r0, #0
   1a048:	sub	sp, fp, #28
   1a04c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a050:	mov	r0, #3
   1a054:	sub	sp, fp, #28
   1a058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a05c:	mov	r1, #1
   1a060:	orr	r8, r1, r0, lsl #1
   1a064:	lsl	r4, r8, #2
   1a068:	ldr	r0, [r5, #4]
   1a06c:	mov	r1, r4
   1a070:	bl	22a9c <__assert_fail@plt+0x112f0>
   1a074:	mov	r9, r0
   1a078:	ldr	r0, [r5, #8]
   1a07c:	mov	r1, r4
   1a080:	bl	22a9c <__assert_fail@plt+0x112f0>
   1a084:	mov	r4, r0
   1a088:	cmp	r9, #0
   1a08c:	cmpne	r4, #0
   1a090:	bne	1a0b0 <__assert_fail@plt+0x8904>
   1a094:	mov	r0, r9
   1a098:	bl	1312c <__assert_fail@plt+0x1980>
   1a09c:	mov	r0, r4
   1a0a0:	bl	1312c <__assert_fail@plt+0x1980>
   1a0a4:	mov	r0, #12
   1a0a8:	sub	sp, fp, #28
   1a0ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0b0:	ldr	r5, [sp, #4]
   1a0b4:	str	r9, [r5, #4]
   1a0b8:	str	r4, [r5, #8]
   1a0bc:	ldr	r0, [sp, #8]
   1a0c0:	str	r8, [r0]
   1a0c4:	b	19ffc <__assert_fail@plt+0x8850>
   1a0c8:	push	{r4, r5, fp, lr}
   1a0cc:	add	fp, sp, #8
   1a0d0:	mov	r5, r1
   1a0d4:	mov	r4, r0
   1a0d8:	mov	r0, r1
   1a0dc:	bl	1165c <strlen@plt>
   1a0e0:	cmp	r0, #1
   1a0e4:	movne	r0, #3
   1a0e8:	popne	{r4, r5, fp, pc}
   1a0ec:	ldrb	r1, [r5]
   1a0f0:	mov	r0, r4
   1a0f4:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a0f8:	mov	r0, #0
   1a0fc:	pop	{r4, r5, fp, pc}
   1a100:	push	{r4, r5, fp, lr}
   1a104:	add	fp, sp, #8
   1a108:	mov	r5, r1
   1a10c:	mov	r4, r0
   1a110:	mov	r0, r1
   1a114:	bl	1165c <strlen@plt>
   1a118:	cmp	r0, #1
   1a11c:	movne	r0, #3
   1a120:	popne	{r4, r5, fp, pc}
   1a124:	ldrb	r1, [r5]
   1a128:	mov	r0, r4
   1a12c:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a130:	mov	r0, #0
   1a134:	pop	{r4, r5, fp, pc}
   1a138:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a13c:	add	fp, sp, #24
   1a140:	mov	r5, r3
   1a144:	mov	r7, r2
   1a148:	mov	r4, r1
   1a14c:	mov	r8, r0
   1a150:	ldr	r6, [fp, #8]
   1a154:	ldrb	r0, [fp, #14]
   1a158:	tst	r0, #64	; 0x40
   1a15c:	beq	1a198 <__assert_fail@plt+0x89ec>
   1a160:	movw	r1, #17194	; 0x432a
   1a164:	movt	r1, #2
   1a168:	mov	r0, r6
   1a16c:	bl	11458 <strcmp@plt>
   1a170:	cmp	r0, #0
   1a174:	beq	1a190 <__assert_fail@plt+0x89e4>
   1a178:	movw	r1, #17200	; 0x4330
   1a17c:	movt	r1, #2
   1a180:	mov	r0, r6
   1a184:	bl	11458 <strcmp@plt>
   1a188:	cmp	r0, #0
   1a18c:	bne	1a198 <__assert_fail@plt+0x89ec>
   1a190:	movw	r6, #17206	; 0x4336
   1a194:	movt	r6, #2
   1a198:	ldr	r0, [r7, #36]	; 0x24
   1a19c:	ldr	r1, [r5]
   1a1a0:	cmp	r1, r0
   1a1a4:	beq	1a6b4 <__assert_fail@plt+0x8f08>
   1a1a8:	mov	r0, r6
   1a1ac:	bl	11434 <wctype@plt>
   1a1b0:	ldr	r1, [r7, #12]
   1a1b4:	ldr	r2, [r7, #36]	; 0x24
   1a1b8:	add	r3, r2, #1
   1a1bc:	str	r3, [r7, #36]	; 0x24
   1a1c0:	str	r0, [r1, r2, lsl #2]
   1a1c4:	movw	r1, #17182	; 0x431e
   1a1c8:	movt	r1, #2
   1a1cc:	mov	r0, r6
   1a1d0:	bl	11458 <strcmp@plt>
   1a1d4:	cmp	r0, #0
   1a1d8:	beq	1a33c <__assert_fail@plt+0x8b90>
   1a1dc:	movw	r1, #17212	; 0x433c
   1a1e0:	movt	r1, #2
   1a1e4:	mov	r0, r6
   1a1e8:	bl	11458 <strcmp@plt>
   1a1ec:	cmp	r0, #0
   1a1f0:	beq	1a38c <__assert_fail@plt+0x8be0>
   1a1f4:	movw	r1, #17200	; 0x4330
   1a1f8:	movt	r1, #2
   1a1fc:	mov	r0, r6
   1a200:	bl	11458 <strcmp@plt>
   1a204:	cmp	r0, #0
   1a208:	beq	1a3dc <__assert_fail@plt+0x8c30>
   1a20c:	movw	r1, #17188	; 0x4324
   1a210:	movt	r1, #2
   1a214:	mov	r0, r6
   1a218:	bl	11458 <strcmp@plt>
   1a21c:	cmp	r0, #0
   1a220:	beq	1a430 <__assert_fail@plt+0x8c84>
   1a224:	movw	r1, #17206	; 0x4336
   1a228:	movt	r1, #2
   1a22c:	mov	r0, r6
   1a230:	bl	11458 <strcmp@plt>
   1a234:	cmp	r0, #0
   1a238:	beq	1a484 <__assert_fail@plt+0x8cd8>
   1a23c:	movw	r1, #17243	; 0x435b
   1a240:	movt	r1, #2
   1a244:	mov	r0, r6
   1a248:	bl	11458 <strcmp@plt>
   1a24c:	cmp	r0, #0
   1a250:	beq	1a4d8 <__assert_fail@plt+0x8d2c>
   1a254:	movw	r1, #17218	; 0x4342
   1a258:	movt	r1, #2
   1a25c:	mov	r0, r6
   1a260:	bl	11458 <strcmp@plt>
   1a264:	cmp	r0, #0
   1a268:	beq	1a52c <__assert_fail@plt+0x8d80>
   1a26c:	movw	r1, #17194	; 0x432a
   1a270:	movt	r1, #2
   1a274:	mov	r0, r6
   1a278:	bl	11458 <strcmp@plt>
   1a27c:	cmp	r0, #0
   1a280:	beq	1a57c <__assert_fail@plt+0x8dd0>
   1a284:	movw	r1, #17224	; 0x4348
   1a288:	movt	r1, #2
   1a28c:	mov	r0, r6
   1a290:	bl	11458 <strcmp@plt>
   1a294:	cmp	r0, #0
   1a298:	beq	1a5cc <__assert_fail@plt+0x8e20>
   1a29c:	movw	r1, #17230	; 0x434e
   1a2a0:	movt	r1, #2
   1a2a4:	mov	r0, r6
   1a2a8:	bl	11458 <strcmp@plt>
   1a2ac:	cmp	r0, #0
   1a2b0:	beq	1a618 <__assert_fail@plt+0x8e6c>
   1a2b4:	movw	r1, #17236	; 0x4354
   1a2b8:	movt	r1, #2
   1a2bc:	mov	r0, r6
   1a2c0:	bl	11458 <strcmp@plt>
   1a2c4:	cmp	r0, #0
   1a2c8:	beq	1a668 <__assert_fail@plt+0x8ebc>
   1a2cc:	movw	r1, #17242	; 0x435a
   1a2d0:	movt	r1, #2
   1a2d4:	mov	r0, r6
   1a2d8:	bl	11458 <strcmp@plt>
   1a2dc:	mov	r1, r0
   1a2e0:	mov	r0, #4
   1a2e4:	cmp	r1, #0
   1a2e8:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a2ec:	bl	11644 <__ctype_b_loc@plt>
   1a2f0:	mov	r6, r0
   1a2f4:	cmp	r8, #0
   1a2f8:	bne	1a8f0 <__assert_fail@plt+0x9144>
   1a2fc:	mov	r7, #0
   1a300:	mov	r5, #0
   1a304:	ldr	r0, [r6]
   1a308:	add	r0, r0, r7
   1a30c:	ldrb	r0, [r0, #1]
   1a310:	tst	r0, #16
   1a314:	beq	1a324 <__assert_fail@plt+0x8b78>
   1a318:	mov	r0, r4
   1a31c:	mov	r1, r5
   1a320:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a324:	add	r7, r7, #2
   1a328:	add	r5, r5, #1
   1a32c:	mov	r0, #0
   1a330:	cmp	r5, #256	; 0x100
   1a334:	bne	1a304 <__assert_fail@plt+0x8b58>
   1a338:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a33c:	bl	11644 <__ctype_b_loc@plt>
   1a340:	mov	r6, r0
   1a344:	cmp	r8, #0
   1a348:	bne	1a6e0 <__assert_fail@plt+0x8f34>
   1a34c:	mov	r7, #0
   1a350:	mov	r5, #0
   1a354:	b	1a36c <__assert_fail@plt+0x8bc0>
   1a358:	add	r7, r7, #2
   1a35c:	add	r5, r5, #1
   1a360:	cmp	r5, #256	; 0x100
   1a364:	moveq	r0, #0
   1a368:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a36c:	ldr	r0, [r6]
   1a370:	ldrb	r0, [r0, r7]
   1a374:	tst	r0, #8
   1a378:	beq	1a358 <__assert_fail@plt+0x8bac>
   1a37c:	mov	r0, r4
   1a380:	mov	r1, r5
   1a384:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a388:	b	1a358 <__assert_fail@plt+0x8bac>
   1a38c:	bl	11644 <__ctype_b_loc@plt>
   1a390:	mov	r6, r0
   1a394:	cmp	r8, #0
   1a398:	bne	1a718 <__assert_fail@plt+0x8f6c>
   1a39c:	mov	r7, #0
   1a3a0:	mov	r5, #0
   1a3a4:	b	1a3bc <__assert_fail@plt+0x8c10>
   1a3a8:	add	r7, r7, #2
   1a3ac:	add	r5, r5, #1
   1a3b0:	cmp	r5, #256	; 0x100
   1a3b4:	moveq	r0, #0
   1a3b8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a3bc:	ldr	r0, [r6]
   1a3c0:	ldrb	r0, [r0, r7]
   1a3c4:	tst	r0, #2
   1a3c8:	beq	1a3a8 <__assert_fail@plt+0x8bfc>
   1a3cc:	mov	r0, r4
   1a3d0:	mov	r1, r5
   1a3d4:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a3d8:	b	1a3a8 <__assert_fail@plt+0x8bfc>
   1a3dc:	bl	11644 <__ctype_b_loc@plt>
   1a3e0:	mov	r6, r0
   1a3e4:	cmp	r8, #0
   1a3e8:	bne	1a750 <__assert_fail@plt+0x8fa4>
   1a3ec:	mov	r7, #0
   1a3f0:	mov	r5, #0
   1a3f4:	b	1a40c <__assert_fail@plt+0x8c60>
   1a3f8:	add	r7, r7, #2
   1a3fc:	add	r5, r5, #1
   1a400:	cmp	r5, #256	; 0x100
   1a404:	moveq	r0, #0
   1a408:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a40c:	ldr	r0, [r6]
   1a410:	add	r0, r0, r7
   1a414:	ldrb	r0, [r0, #1]
   1a418:	tst	r0, #2
   1a41c:	beq	1a3f8 <__assert_fail@plt+0x8c4c>
   1a420:	mov	r0, r4
   1a424:	mov	r1, r5
   1a428:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a42c:	b	1a3f8 <__assert_fail@plt+0x8c4c>
   1a430:	bl	11644 <__ctype_b_loc@plt>
   1a434:	mov	r6, r0
   1a438:	cmp	r8, #0
   1a43c:	bne	1a78c <__assert_fail@plt+0x8fe0>
   1a440:	mov	r7, #0
   1a444:	mov	r5, #0
   1a448:	b	1a460 <__assert_fail@plt+0x8cb4>
   1a44c:	add	r7, r7, #2
   1a450:	add	r5, r5, #1
   1a454:	cmp	r5, #256	; 0x100
   1a458:	moveq	r0, #0
   1a45c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a460:	ldr	r0, [r6]
   1a464:	add	r0, r0, r7
   1a468:	ldrb	r0, [r0, #1]
   1a46c:	tst	r0, #32
   1a470:	beq	1a44c <__assert_fail@plt+0x8ca0>
   1a474:	mov	r0, r4
   1a478:	mov	r1, r5
   1a47c:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a480:	b	1a44c <__assert_fail@plt+0x8ca0>
   1a484:	bl	11644 <__ctype_b_loc@plt>
   1a488:	mov	r6, r0
   1a48c:	cmp	r8, #0
   1a490:	bne	1a7c8 <__assert_fail@plt+0x901c>
   1a494:	mov	r7, #0
   1a498:	mov	r5, #0
   1a49c:	b	1a4b4 <__assert_fail@plt+0x8d08>
   1a4a0:	add	r7, r7, #2
   1a4a4:	add	r5, r5, #1
   1a4a8:	cmp	r5, #256	; 0x100
   1a4ac:	moveq	r0, #0
   1a4b0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a4b4:	ldr	r0, [r6]
   1a4b8:	add	r0, r0, r7
   1a4bc:	ldrb	r0, [r0, #1]
   1a4c0:	tst	r0, #4
   1a4c4:	beq	1a4a0 <__assert_fail@plt+0x8cf4>
   1a4c8:	mov	r0, r4
   1a4cc:	mov	r1, r5
   1a4d0:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a4d4:	b	1a4a0 <__assert_fail@plt+0x8cf4>
   1a4d8:	bl	11644 <__ctype_b_loc@plt>
   1a4dc:	mov	r6, r0
   1a4e0:	cmp	r8, #0
   1a4e4:	bne	1a804 <__assert_fail@plt+0x9058>
   1a4e8:	mov	r7, #0
   1a4ec:	mov	r5, #0
   1a4f0:	b	1a508 <__assert_fail@plt+0x8d5c>
   1a4f4:	add	r7, r7, #2
   1a4f8:	add	r5, r5, #1
   1a4fc:	cmp	r5, #256	; 0x100
   1a500:	moveq	r0, #0
   1a504:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a508:	ldr	r0, [r6]
   1a50c:	add	r0, r0, r7
   1a510:	ldrb	r0, [r0, #1]
   1a514:	tst	r0, #8
   1a518:	beq	1a4f4 <__assert_fail@plt+0x8d48>
   1a51c:	mov	r0, r4
   1a520:	mov	r1, r5
   1a524:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a528:	b	1a4f4 <__assert_fail@plt+0x8d48>
   1a52c:	bl	11644 <__ctype_b_loc@plt>
   1a530:	mov	r6, r0
   1a534:	cmp	r8, #0
   1a538:	bne	1a840 <__assert_fail@plt+0x9094>
   1a53c:	mov	r7, #0
   1a540:	mov	r5, #0
   1a544:	ldr	r0, [r6]
   1a548:	add	r0, r0, r7
   1a54c:	ldrb	r0, [r0, #1]
   1a550:	tst	r0, #64	; 0x40
   1a554:	beq	1a564 <__assert_fail@plt+0x8db8>
   1a558:	mov	r0, r4
   1a55c:	mov	r1, r5
   1a560:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a564:	add	r7, r7, #2
   1a568:	add	r5, r5, #1
   1a56c:	mov	r0, #0
   1a570:	cmp	r5, #256	; 0x100
   1a574:	bne	1a544 <__assert_fail@plt+0x8d98>
   1a578:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a57c:	bl	11644 <__ctype_b_loc@plt>
   1a580:	mov	r6, r0
   1a584:	cmp	r8, #0
   1a588:	bne	1a87c <__assert_fail@plt+0x90d0>
   1a58c:	mov	r7, #0
   1a590:	mov	r5, #0
   1a594:	ldr	r0, [r6]
   1a598:	add	r0, r0, r7
   1a59c:	ldrb	r0, [r0, #1]
   1a5a0:	tst	r0, #1
   1a5a4:	beq	1a5b4 <__assert_fail@plt+0x8e08>
   1a5a8:	mov	r0, r4
   1a5ac:	mov	r1, r5
   1a5b0:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a5b4:	add	r7, r7, #2
   1a5b8:	add	r5, r5, #1
   1a5bc:	mov	r0, #0
   1a5c0:	cmp	r5, #256	; 0x100
   1a5c4:	bne	1a594 <__assert_fail@plt+0x8de8>
   1a5c8:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a5cc:	bl	11644 <__ctype_b_loc@plt>
   1a5d0:	mov	r6, r0
   1a5d4:	cmp	r8, #0
   1a5d8:	bne	1a8b8 <__assert_fail@plt+0x910c>
   1a5dc:	mov	r7, #0
   1a5e0:	mov	r5, #0
   1a5e4:	ldr	r0, [r6]
   1a5e8:	ldrb	r0, [r0, r7]
   1a5ec:	tst	r0, #1
   1a5f0:	beq	1a600 <__assert_fail@plt+0x8e54>
   1a5f4:	mov	r0, r4
   1a5f8:	mov	r1, r5
   1a5fc:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a600:	add	r7, r7, #2
   1a604:	add	r5, r5, #1
   1a608:	mov	r0, #0
   1a60c:	cmp	r5, #256	; 0x100
   1a610:	bne	1a5e4 <__assert_fail@plt+0x8e38>
   1a614:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a618:	bl	11644 <__ctype_b_loc@plt>
   1a61c:	mov	r6, r0
   1a620:	cmp	r8, #0
   1a624:	bne	1a92c <__assert_fail@plt+0x9180>
   1a628:	mov	r7, #0
   1a62c:	mov	r5, #0
   1a630:	ldr	r0, [r6]
   1a634:	add	r0, r0, r7
   1a638:	ldrsh	r0, [r0]
   1a63c:	cmn	r0, #1
   1a640:	bgt	1a650 <__assert_fail@plt+0x8ea4>
   1a644:	mov	r0, r4
   1a648:	mov	r1, r5
   1a64c:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a650:	add	r7, r7, #2
   1a654:	add	r5, r5, #1
   1a658:	mov	r0, #0
   1a65c:	cmp	r5, #256	; 0x100
   1a660:	bne	1a630 <__assert_fail@plt+0x8e84>
   1a664:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a668:	bl	11644 <__ctype_b_loc@plt>
   1a66c:	mov	r6, r0
   1a670:	cmp	r8, #0
   1a674:	bne	1a968 <__assert_fail@plt+0x91bc>
   1a678:	mov	r7, #0
   1a67c:	mov	r5, #0
   1a680:	ldr	r0, [r6]
   1a684:	ldrb	r0, [r0, r7]
   1a688:	tst	r0, #4
   1a68c:	beq	1a69c <__assert_fail@plt+0x8ef0>
   1a690:	mov	r0, r4
   1a694:	mov	r1, r5
   1a698:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a69c:	add	r7, r7, #2
   1a6a0:	add	r5, r5, #1
   1a6a4:	mov	r0, #0
   1a6a8:	cmp	r5, #256	; 0x100
   1a6ac:	bne	1a680 <__assert_fail@plt+0x8ed4>
   1a6b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a6b4:	mov	r1, #1
   1a6b8:	orr	r9, r1, r0, lsl #1
   1a6bc:	lsl	r1, r9, #2
   1a6c0:	ldr	r0, [r7, #12]
   1a6c4:	bl	22a9c <__assert_fail@plt+0x112f0>
   1a6c8:	cmp	r0, #0
   1a6cc:	moveq	r0, #12
   1a6d0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a6d4:	str	r0, [r7, #12]
   1a6d8:	str	r9, [r5]
   1a6dc:	b	1a1a8 <__assert_fail@plt+0x89fc>
   1a6e0:	mov	r5, #0
   1a6e4:	ldr	r0, [r6]
   1a6e8:	ldrb	r0, [r0, r5]
   1a6ec:	tst	r0, #8
   1a6f0:	beq	1a700 <__assert_fail@plt+0x8f54>
   1a6f4:	ldrb	r1, [r8]
   1a6f8:	mov	r0, r4
   1a6fc:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a700:	add	r8, r8, #1
   1a704:	add	r5, r5, #2
   1a708:	mov	r0, #0
   1a70c:	cmp	r5, #512	; 0x200
   1a710:	bne	1a6e4 <__assert_fail@plt+0x8f38>
   1a714:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a718:	mov	r5, #0
   1a71c:	ldr	r0, [r6]
   1a720:	ldrb	r0, [r0, r5]
   1a724:	tst	r0, #2
   1a728:	beq	1a738 <__assert_fail@plt+0x8f8c>
   1a72c:	ldrb	r1, [r8]
   1a730:	mov	r0, r4
   1a734:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a738:	add	r8, r8, #1
   1a73c:	add	r5, r5, #2
   1a740:	mov	r0, #0
   1a744:	cmp	r5, #512	; 0x200
   1a748:	bne	1a71c <__assert_fail@plt+0x8f70>
   1a74c:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a750:	mov	r5, #0
   1a754:	ldr	r0, [r6]
   1a758:	add	r0, r0, r5
   1a75c:	ldrb	r0, [r0, #1]
   1a760:	tst	r0, #2
   1a764:	beq	1a774 <__assert_fail@plt+0x8fc8>
   1a768:	ldrb	r1, [r8]
   1a76c:	mov	r0, r4
   1a770:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a774:	add	r8, r8, #1
   1a778:	add	r5, r5, #2
   1a77c:	mov	r0, #0
   1a780:	cmp	r5, #512	; 0x200
   1a784:	bne	1a754 <__assert_fail@plt+0x8fa8>
   1a788:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a78c:	mov	r5, #0
   1a790:	ldr	r0, [r6]
   1a794:	add	r0, r0, r5
   1a798:	ldrb	r0, [r0, #1]
   1a79c:	tst	r0, #32
   1a7a0:	beq	1a7b0 <__assert_fail@plt+0x9004>
   1a7a4:	ldrb	r1, [r8]
   1a7a8:	mov	r0, r4
   1a7ac:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a7b0:	add	r8, r8, #1
   1a7b4:	add	r5, r5, #2
   1a7b8:	mov	r0, #0
   1a7bc:	cmp	r5, #512	; 0x200
   1a7c0:	bne	1a790 <__assert_fail@plt+0x8fe4>
   1a7c4:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a7c8:	mov	r5, #0
   1a7cc:	ldr	r0, [r6]
   1a7d0:	add	r0, r0, r5
   1a7d4:	ldrb	r0, [r0, #1]
   1a7d8:	tst	r0, #4
   1a7dc:	beq	1a7ec <__assert_fail@plt+0x9040>
   1a7e0:	ldrb	r1, [r8]
   1a7e4:	mov	r0, r4
   1a7e8:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a7ec:	add	r8, r8, #1
   1a7f0:	add	r5, r5, #2
   1a7f4:	mov	r0, #0
   1a7f8:	cmp	r5, #512	; 0x200
   1a7fc:	bne	1a7cc <__assert_fail@plt+0x9020>
   1a800:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a804:	mov	r5, #0
   1a808:	ldr	r0, [r6]
   1a80c:	add	r0, r0, r5
   1a810:	ldrb	r0, [r0, #1]
   1a814:	tst	r0, #8
   1a818:	beq	1a828 <__assert_fail@plt+0x907c>
   1a81c:	ldrb	r1, [r8]
   1a820:	mov	r0, r4
   1a824:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a828:	add	r8, r8, #1
   1a82c:	add	r5, r5, #2
   1a830:	mov	r0, #0
   1a834:	cmp	r5, #512	; 0x200
   1a838:	bne	1a808 <__assert_fail@plt+0x905c>
   1a83c:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a840:	mov	r5, #0
   1a844:	ldr	r0, [r6]
   1a848:	add	r0, r0, r5
   1a84c:	ldrb	r0, [r0, #1]
   1a850:	tst	r0, #64	; 0x40
   1a854:	beq	1a864 <__assert_fail@plt+0x90b8>
   1a858:	ldrb	r1, [r8]
   1a85c:	mov	r0, r4
   1a860:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a864:	add	r8, r8, #1
   1a868:	add	r5, r5, #2
   1a86c:	mov	r0, #0
   1a870:	cmp	r5, #512	; 0x200
   1a874:	bne	1a844 <__assert_fail@plt+0x9098>
   1a878:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a87c:	mov	r5, #0
   1a880:	ldr	r0, [r6]
   1a884:	add	r0, r0, r5
   1a888:	ldrb	r0, [r0, #1]
   1a88c:	tst	r0, #1
   1a890:	beq	1a8a0 <__assert_fail@plt+0x90f4>
   1a894:	ldrb	r1, [r8]
   1a898:	mov	r0, r4
   1a89c:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a8a0:	add	r8, r8, #1
   1a8a4:	add	r5, r5, #2
   1a8a8:	mov	r0, #0
   1a8ac:	cmp	r5, #512	; 0x200
   1a8b0:	bne	1a880 <__assert_fail@plt+0x90d4>
   1a8b4:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a8b8:	mov	r5, #0
   1a8bc:	ldr	r0, [r6]
   1a8c0:	ldrb	r0, [r0, r5]
   1a8c4:	tst	r0, #1
   1a8c8:	beq	1a8d8 <__assert_fail@plt+0x912c>
   1a8cc:	ldrb	r1, [r8]
   1a8d0:	mov	r0, r4
   1a8d4:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a8d8:	add	r8, r8, #1
   1a8dc:	add	r5, r5, #2
   1a8e0:	mov	r0, #0
   1a8e4:	cmp	r5, #512	; 0x200
   1a8e8:	bne	1a8bc <__assert_fail@plt+0x9110>
   1a8ec:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a8f0:	mov	r5, #0
   1a8f4:	ldr	r0, [r6]
   1a8f8:	add	r0, r0, r5
   1a8fc:	ldrb	r0, [r0, #1]
   1a900:	tst	r0, #16
   1a904:	beq	1a914 <__assert_fail@plt+0x9168>
   1a908:	ldrb	r1, [r8]
   1a90c:	mov	r0, r4
   1a910:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a914:	add	r8, r8, #1
   1a918:	add	r5, r5, #2
   1a91c:	mov	r0, #0
   1a920:	cmp	r5, #512	; 0x200
   1a924:	bne	1a8f4 <__assert_fail@plt+0x9148>
   1a928:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a92c:	mov	r5, #0
   1a930:	ldr	r0, [r6]
   1a934:	add	r0, r0, r5
   1a938:	ldrsh	r0, [r0]
   1a93c:	cmn	r0, #1
   1a940:	bgt	1a950 <__assert_fail@plt+0x91a4>
   1a944:	ldrb	r1, [r8]
   1a948:	mov	r0, r4
   1a94c:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a950:	add	r8, r8, #1
   1a954:	add	r5, r5, #2
   1a958:	mov	r0, #0
   1a95c:	cmp	r5, #512	; 0x200
   1a960:	bne	1a930 <__assert_fail@plt+0x9184>
   1a964:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a968:	mov	r5, #0
   1a96c:	ldr	r0, [r6]
   1a970:	ldrb	r0, [r0, r5]
   1a974:	tst	r0, #4
   1a978:	beq	1a988 <__assert_fail@plt+0x91dc>
   1a97c:	ldrb	r1, [r8]
   1a980:	mov	r0, r4
   1a984:	bl	19d78 <__assert_fail@plt+0x85cc>
   1a988:	add	r8, r8, #1
   1a98c:	add	r5, r5, #2
   1a990:	mov	r0, #0
   1a994:	cmp	r5, #512	; 0x200
   1a998:	bne	1a96c <__assert_fail@plt+0x91c0>
   1a99c:	b	1a6b0 <__assert_fail@plt+0x8f04>
   1a9a0:	mov	r1, #0
   1a9a4:	ldr	r2, [r0, r1, lsl #2]
   1a9a8:	mvn	r2, r2
   1a9ac:	str	r2, [r0, r1, lsl #2]
   1a9b0:	add	r1, r1, #1
   1a9b4:	cmp	r1, #8
   1a9b8:	bne	1a9a4 <__assert_fail@plt+0x91f8>
   1a9bc:	bx	lr
   1a9c0:	mov	r2, #0
   1a9c4:	ldr	ip, [r1, r2, lsl #2]
   1a9c8:	ldr	r3, [r0, r2, lsl #2]
   1a9cc:	and	r3, r3, ip
   1a9d0:	str	r3, [r0, r2, lsl #2]
   1a9d4:	add	r2, r2, #1
   1a9d8:	cmp	r2, #8
   1a9dc:	bne	1a9c4 <__assert_fail@plt+0x9218>
   1a9e0:	bx	lr
   1a9e4:	push	{fp, lr}
   1a9e8:	mov	fp, sp
   1a9ec:	mov	lr, r0
   1a9f0:	ldr	r3, [r0, #80]	; 0x50
   1a9f4:	mov	r0, #1
   1a9f8:	cmp	r3, #1
   1a9fc:	beq	1aa3c <__assert_fail@plt+0x9290>
   1aa00:	ldr	ip, [lr, #28]
   1aa04:	add	r3, r1, #1
   1aa08:	cmp	r3, ip
   1aa0c:	bge	1aa3c <__assert_fail@plt+0x9290>
   1aa10:	ldr	r0, [lr, #8]
   1aa14:	add	ip, r0, r1, lsl #2
   1aa18:	mov	r0, #1
   1aa1c:	ldr	r3, [ip, r0, lsl #2]
   1aa20:	cmn	r3, #1
   1aa24:	popne	{fp, pc}
   1aa28:	add	r0, r0, #1
   1aa2c:	add	r3, r1, r0
   1aa30:	ldr	r2, [lr, #28]
   1aa34:	cmp	r3, r2
   1aa38:	blt	1aa1c <__assert_fail@plt+0x9270>
   1aa3c:	pop	{fp, pc}
   1aa40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1aa44:	add	fp, sp, #24
   1aa48:	mov	r7, r1
   1aa4c:	mov	r9, r0
   1aa50:	ldr	r0, [r1, #40]	; 0x28
   1aa54:	ldr	r1, [r1, #56]	; 0x38
   1aa58:	mov	r8, #7
   1aa5c:	cmp	r1, r0
   1aa60:	ble	1ab28 <__assert_fail@plt+0x937c>
   1aa64:	mov	r6, r2
   1aa68:	ldrb	r5, [r2]
   1aa6c:	mov	r4, #0
   1aa70:	ldrb	r0, [r6, #4]
   1aa74:	cmp	r0, #30
   1aa78:	bne	1aa88 <__assert_fail@plt+0x92dc>
   1aa7c:	mov	r0, r7
   1aa80:	bl	1ab30 <__assert_fail@plt+0x9384>
   1aa84:	b	1aa9c <__assert_fail@plt+0x92f0>
   1aa88:	ldr	r0, [r7, #4]
   1aa8c:	ldr	r1, [r7, #40]	; 0x28
   1aa90:	add	r2, r1, #1
   1aa94:	str	r2, [r7, #40]	; 0x28
   1aa98:	ldrb	r0, [r0, r1]
   1aa9c:	ldr	r1, [r7, #40]	; 0x28
   1aaa0:	ldr	r2, [r7, #56]	; 0x38
   1aaa4:	cmp	r2, r1
   1aaa8:	ble	1ab28 <__assert_fail@plt+0x937c>
   1aaac:	cmp	r0, r5
   1aab0:	bne	1aac4 <__assert_fail@plt+0x9318>
   1aab4:	ldr	r2, [r7, #4]
   1aab8:	ldrb	r2, [r2, r1]
   1aabc:	cmp	r2, #93	; 0x5d
   1aac0:	beq	1aae0 <__assert_fail@plt+0x9334>
   1aac4:	ldr	r1, [r9, #4]
   1aac8:	strb	r0, [r1, r4]
   1aacc:	add	r0, r4, #1
   1aad0:	cmp	r4, #30
   1aad4:	mov	r4, r0
   1aad8:	bls	1aa70 <__assert_fail@plt+0x92c4>
   1aadc:	b	1ab28 <__assert_fail@plt+0x937c>
   1aae0:	add	r0, r1, #1
   1aae4:	str	r0, [r7, #40]	; 0x28
   1aae8:	ldr	r0, [r9, #4]
   1aaec:	mov	r8, #0
   1aaf0:	strb	r8, [r0, r4]
   1aaf4:	ldrb	r0, [r6, #4]
   1aaf8:	cmp	r0, #30
   1aafc:	beq	1ab18 <__assert_fail@plt+0x936c>
   1ab00:	cmp	r0, #28
   1ab04:	beq	1ab20 <__assert_fail@plt+0x9374>
   1ab08:	cmp	r0, #26
   1ab0c:	bne	1ab28 <__assert_fail@plt+0x937c>
   1ab10:	mov	r0, #3
   1ab14:	b	1ab24 <__assert_fail@plt+0x9378>
   1ab18:	mov	r0, #4
   1ab1c:	b	1ab24 <__assert_fail@plt+0x9378>
   1ab20:	mov	r0, #2
   1ab24:	str	r0, [r9]
   1ab28:	mov	r0, r8
   1ab2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ab30:	push	{r4, r5, r6, sl, fp, lr}
   1ab34:	add	fp, sp, #16
   1ab38:	mov	r4, r0
   1ab3c:	ldrb	r0, [r0, #75]	; 0x4b
   1ab40:	cmp	r0, #0
   1ab44:	bne	1ab64 <__assert_fail@plt+0x93b8>
   1ab48:	ldr	r0, [r4, #4]
   1ab4c:	ldr	r1, [r4, #40]	; 0x28
   1ab50:	add	r2, r1, #1
   1ab54:	str	r2, [r4, #40]	; 0x28
   1ab58:	ldrb	r6, [r0, r1]
   1ab5c:	uxtb	r0, r6
   1ab60:	pop	{r4, r5, r6, sl, fp, pc}
   1ab64:	ldrb	r0, [r4, #76]	; 0x4c
   1ab68:	cmp	r0, #0
   1ab6c:	beq	1abd0 <__assert_fail@plt+0x9424>
   1ab70:	ldr	r0, [r4, #28]
   1ab74:	ldr	r5, [r4, #40]	; 0x28
   1ab78:	cmp	r5, r0
   1ab7c:	beq	1ab90 <__assert_fail@plt+0x93e4>
   1ab80:	ldr	r0, [r4, #8]
   1ab84:	ldr	r0, [r0, r5, lsl #2]
   1ab88:	cmn	r0, #1
   1ab8c:	beq	1abec <__assert_fail@plt+0x9440>
   1ab90:	ldr	r0, [r4]
   1ab94:	ldr	r1, [r4, #12]
   1ab98:	ldr	r2, [r4, #24]
   1ab9c:	ldr	r1, [r1, r5, lsl #2]
   1aba0:	add	r1, r2, r1
   1aba4:	add	r0, r0, r1
   1aba8:	ldrsb	r6, [r0]
   1abac:	cmn	r6, #1
   1abb0:	ble	1abec <__assert_fail@plt+0x9440>
   1abb4:	mov	r0, r4
   1abb8:	mov	r1, r5
   1abbc:	bl	1a9e4 <__assert_fail@plt+0x9238>
   1abc0:	add	r0, r0, r5
   1abc4:	str	r0, [r4, #40]	; 0x28
   1abc8:	uxtb	r0, r6
   1abcc:	pop	{r4, r5, r6, sl, fp, pc}
   1abd0:	ldr	r0, [r4]
   1abd4:	ldr	r1, [r4, #24]
   1abd8:	ldr	r2, [r4, #40]	; 0x28
   1abdc:	add	r3, r2, #1
   1abe0:	str	r3, [r4, #40]	; 0x28
   1abe4:	add	r1, r2, r1
   1abe8:	b	1ab58 <__assert_fail@plt+0x93ac>
   1abec:	add	r0, r5, #1
   1abf0:	str	r0, [r4, #40]	; 0x28
   1abf4:	ldr	r0, [r4, #4]
   1abf8:	ldrb	r6, [r0, r5]
   1abfc:	uxtb	r0, r6
   1ac00:	pop	{r4, r5, r6, sl, fp, pc}
   1ac04:	ldr	r1, [r1, #92]	; 0x5c
   1ac08:	cmp	r1, #2
   1ac0c:	bxlt	lr
   1ac10:	b	116bc <btowc@plt>
   1ac14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ac18:	add	fp, sp, #24
   1ac1c:	mov	r4, r2
   1ac20:	mov	r5, r1
   1ac24:	mov	r6, r0
   1ac28:	mvn	r0, #0
   1ac2c:	movw	r8, #32816	; 0x8030
   1ac30:	b	1ac48 <__assert_fail@plt+0x949c>
   1ac34:	add	r0, r7, r7, lsl #2
   1ac38:	add	r1, r1, r0, lsl #1
   1ac3c:	sub	r0, r1, #48	; 0x30
   1ac40:	cmp	r1, r8
   1ac44:	movwgt	r0, #32768	; 0x8000
   1ac48:	mov	r7, r0
   1ac4c:	mov	r0, r5
   1ac50:	mov	r1, r6
   1ac54:	mov	r2, r4
   1ac58:	bl	17d20 <__assert_fail@plt+0x6574>
   1ac5c:	ldrb	r2, [r5, #4]
   1ac60:	cmp	r2, #24
   1ac64:	beq	1acb4 <__assert_fail@plt+0x9508>
   1ac68:	cmp	r2, #2
   1ac6c:	beq	1acb0 <__assert_fail@plt+0x9504>
   1ac70:	ldrb	r1, [r5]
   1ac74:	cmp	r1, #44	; 0x2c
   1ac78:	beq	1acb4 <__assert_fail@plt+0x9508>
   1ac7c:	mvn	r0, #1
   1ac80:	cmp	r1, #48	; 0x30
   1ac84:	bcc	1ac48 <__assert_fail@plt+0x949c>
   1ac88:	cmp	r2, #1
   1ac8c:	bne	1ac48 <__assert_fail@plt+0x949c>
   1ac90:	cmn	r7, #2
   1ac94:	beq	1ac48 <__assert_fail@plt+0x949c>
   1ac98:	cmp	r1, #57	; 0x39
   1ac9c:	bhi	1ac48 <__assert_fail@plt+0x949c>
   1aca0:	cmn	r7, #1
   1aca4:	bne	1ac34 <__assert_fail@plt+0x9488>
   1aca8:	sub	r0, r1, #48	; 0x30
   1acac:	b	1ac48 <__assert_fail@plt+0x949c>
   1acb0:	mvn	r7, #1
   1acb4:	mov	r0, r7
   1acb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1acbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1acc0:	add	fp, sp, #24
   1acc4:	sub	sp, sp, #8
   1acc8:	mov	r8, r1
   1accc:	mov	r5, r0
   1acd0:	mov	r3, r0
   1acd4:	ldr	r7, [r3], #20
   1acd8:	mov	r6, #0
   1acdc:	mov	r0, r1
   1ace0:	mov	r1, #0
   1ace4:	mov	r2, #0
   1ace8:	bl	18f24 <__assert_fail@plt+0x7778>
   1acec:	str	r0, [sp, #4]
   1acf0:	cmp	r0, #0
   1acf4:	beq	1ad8c <__assert_fail@plt+0x95e0>
   1acf8:	add	r4, sp, #4
   1acfc:	mov	r6, #0
   1ad00:	str	r7, [r0]
   1ad04:	ldr	r0, [r4]
   1ad08:	ldr	r1, [r0, #24]
   1ad0c:	orr	r1, r1, #262144	; 0x40000
   1ad10:	str	r1, [r0, #24]
   1ad14:	ldr	r0, [r5, #4]
   1ad18:	ldr	r7, [r4]
   1ad1c:	cmp	r0, #0
   1ad20:	beq	1ad30 <__assert_fail@plt+0x9584>
   1ad24:	add	r4, r7, #4
   1ad28:	mov	r5, r0
   1ad2c:	b	1ad64 <__assert_fail@plt+0x95b8>
   1ad30:	mov	r1, #0
   1ad34:	mov	r0, r5
   1ad38:	ldr	r5, [r5, #8]
   1ad3c:	cmp	r5, r1
   1ad40:	cmpne	r5, #0
   1ad44:	bne	1ad60 <__assert_fail@plt+0x95b4>
   1ad48:	ldr	r7, [r7]
   1ad4c:	ldr	r5, [r0]
   1ad50:	cmp	r5, #0
   1ad54:	mov	r1, r0
   1ad58:	bne	1ad34 <__assert_fail@plt+0x9588>
   1ad5c:	b	1ad88 <__assert_fail@plt+0x95dc>
   1ad60:	add	r4, r7, #8
   1ad64:	add	r3, r5, #20
   1ad68:	mov	r0, r8
   1ad6c:	mov	r1, #0
   1ad70:	mov	r2, #0
   1ad74:	bl	18f24 <__assert_fail@plt+0x7778>
   1ad78:	str	r0, [r4]
   1ad7c:	cmp	r0, #0
   1ad80:	bne	1ad00 <__assert_fail@plt+0x9554>
   1ad84:	b	1ad8c <__assert_fail@plt+0x95e0>
   1ad88:	ldr	r6, [sp, #4]
   1ad8c:	mov	r0, r6
   1ad90:	sub	sp, fp, #24
   1ad94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ad98:	ldr	r2, [r1, #24]
   1ad9c:	uxtb	r3, r2
   1ada0:	cmp	r3, #17
   1ada4:	ldreq	r3, [r1, #20]
   1ada8:	cmpeq	r3, r0
   1adac:	orreq	r0, r2, #524288	; 0x80000
   1adb0:	streq	r0, [r1, #24]
   1adb4:	mov	r0, #0
   1adb8:	bx	lr
   1adbc:	push	{r4, r5, r6, r7, fp, lr}
   1adc0:	add	fp, sp, #16
   1adc4:	mov	r4, r2
   1adc8:	mov	r5, r1
   1adcc:	mov	r6, r0
   1add0:	mov	r0, r2
   1add4:	mov	r1, r6
   1add8:	blx	r5
   1addc:	cmp	r0, #0
   1ade0:	popne	{r4, r5, r6, r7, fp, pc}
   1ade4:	ldr	r7, [r6, #4]
   1ade8:	cmp	r7, #0
   1adec:	bne	1ae20 <__assert_fail@plt+0x9674>
   1adf0:	mov	r1, #0
   1adf4:	b	1ae0c <__assert_fail@plt+0x9660>
   1adf8:	ldr	r6, [r0]
   1adfc:	cmp	r6, #0
   1ae00:	mov	r1, r0
   1ae04:	moveq	r0, #0
   1ae08:	popeq	{r4, r5, r6, r7, fp, pc}
   1ae0c:	mov	r0, r6
   1ae10:	ldr	r7, [r6, #8]
   1ae14:	cmp	r7, r1
   1ae18:	cmpne	r7, #0
   1ae1c:	beq	1adf8 <__assert_fail@plt+0x964c>
   1ae20:	mov	r0, r4
   1ae24:	mov	r1, r7
   1ae28:	blx	r5
   1ae2c:	cmp	r0, #0
   1ae30:	mov	r6, r7
   1ae34:	beq	1ade4 <__assert_fail@plt+0x9638>
   1ae38:	pop	{r4, r5, r6, r7, fp, pc}
   1ae3c:	ldrb	r2, [r1, #24]
   1ae40:	cmp	r2, #17
   1ae44:	beq	1ae78 <__assert_fail@plt+0x96cc>
   1ae48:	cmp	r2, #4
   1ae4c:	bne	1aecc <__assert_fail@plt+0x9720>
   1ae50:	ldr	r2, [r0, #132]	; 0x84
   1ae54:	cmp	r2, #0
   1ae58:	beq	1aecc <__assert_fail@plt+0x9720>
   1ae5c:	ldr	r3, [r1, #20]
   1ae60:	ldr	r2, [r2, r3, lsl #2]
   1ae64:	str	r2, [r1, #20]
   1ae68:	ldr	r1, [r0, #80]	; 0x50
   1ae6c:	mov	r3, #1
   1ae70:	orr	r1, r1, r3, lsl r2
   1ae74:	b	1aec8 <__assert_fail@plt+0x971c>
   1ae78:	ldr	r2, [r1, #4]
   1ae7c:	cmp	r2, #0
   1ae80:	beq	1aecc <__assert_fail@plt+0x9720>
   1ae84:	ldrb	r3, [r2, #24]
   1ae88:	cmp	r3, #17
   1ae8c:	bne	1aecc <__assert_fail@plt+0x9720>
   1ae90:	ldr	r3, [r2, #4]
   1ae94:	ldr	r2, [r2, #20]
   1ae98:	str	r3, [r1, #4]
   1ae9c:	cmp	r3, #0
   1aea0:	strne	r1, [r3]
   1aea4:	ldr	r1, [r1, #20]
   1aea8:	ldr	r3, [r0, #132]	; 0x84
   1aeac:	ldr	r1, [r3, r1, lsl #2]
   1aeb0:	str	r1, [r3, r2, lsl #2]
   1aeb4:	cmp	r2, #31
   1aeb8:	bgt	1aecc <__assert_fail@plt+0x9720>
   1aebc:	ldr	r1, [r0, #80]	; 0x50
   1aec0:	mov	r3, #1
   1aec4:	bic	r1, r1, r3, lsl r2
   1aec8:	str	r1, [r0, #80]	; 0x50
   1aecc:	mov	r0, #0
   1aed0:	bx	lr
   1aed4:	push	{r4, r5, fp, lr}
   1aed8:	add	fp, sp, #8
   1aedc:	sub	sp, sp, #8
   1aee0:	mov	r4, r1
   1aee4:	mov	r5, r0
   1aee8:	mov	r0, #0
   1aeec:	str	r0, [sp, #4]
   1aef0:	ldr	r2, [r1, #4]
   1aef4:	cmp	r2, #0
   1aef8:	beq	1af20 <__assert_fail@plt+0x9774>
   1aefc:	ldrb	r0, [r2, #24]
   1af00:	cmp	r0, #17
   1af04:	bne	1af20 <__assert_fail@plt+0x9774>
   1af08:	add	r0, sp, #4
   1af0c:	mov	r1, r5
   1af10:	bl	1b2e4 <__assert_fail@plt+0x9b38>
   1af14:	str	r0, [r4, #4]
   1af18:	cmp	r0, #0
   1af1c:	strne	r4, [r0]
   1af20:	ldr	r2, [r4, #8]
   1af24:	cmp	r2, #0
   1af28:	beq	1af50 <__assert_fail@plt+0x97a4>
   1af2c:	ldrb	r0, [r2, #24]
   1af30:	cmp	r0, #17
   1af34:	bne	1af50 <__assert_fail@plt+0x97a4>
   1af38:	add	r0, sp, #4
   1af3c:	mov	r1, r5
   1af40:	bl	1b2e4 <__assert_fail@plt+0x9b38>
   1af44:	str	r0, [r4, #8]
   1af48:	cmp	r0, #0
   1af4c:	strne	r4, [r0]
   1af50:	ldr	r0, [sp, #4]
   1af54:	sub	sp, fp, #8
   1af58:	pop	{r4, r5, fp, pc}
   1af5c:	push	{r4, r5, fp, lr}
   1af60:	add	fp, sp, #8
   1af64:	mov	r4, r1
   1af68:	mov	r5, r0
   1af6c:	ldr	r2, [r1, #24]
   1af70:	uxtb	r0, r2
   1af74:	cmp	r0, #16
   1af78:	bne	1af98 <__assert_fail@plt+0x97ec>
   1af7c:	ldr	r0, [r4, #4]
   1af80:	ldr	r1, [r0, #12]
   1af84:	str	r1, [r4, #12]
   1af88:	ldr	r0, [r0, #28]
   1af8c:	str	r0, [r4, #28]
   1af90:	mov	r0, #0
   1af94:	pop	{r4, r5, fp, pc}
   1af98:	str	r4, [r4, #12]
   1af9c:	ldr	r1, [r4, #20]
   1afa0:	mov	r0, r5
   1afa4:	bl	1b400 <__assert_fail@plt+0x9c54>
   1afa8:	str	r0, [r4, #28]
   1afac:	cmn	r0, #1
   1afb0:	moveq	r0, #12
   1afb4:	popeq	{r4, r5, fp, pc}
   1afb8:	mov	r1, r0
   1afbc:	ldrb	r2, [r4, #24]
   1afc0:	mov	r0, #0
   1afc4:	cmp	r2, #12
   1afc8:	popne	{r4, r5, fp, pc}
   1afcc:	ldr	r2, [r5]
   1afd0:	add	r1, r2, r1, lsl #3
   1afd4:	ldr	r2, [r1, #4]
   1afd8:	ldr	r3, [r4, #20]
   1afdc:	bfi	r2, r3, #8, #10
   1afe0:	str	r2, [r1, #4]
   1afe4:	pop	{r4, r5, fp, pc}
   1afe8:	ldrb	r0, [r1, #24]
   1afec:	cmp	r0, #16
   1aff0:	beq	1b004 <__assert_fail@plt+0x9858>
   1aff4:	cmp	r0, #11
   1aff8:	bne	1b020 <__assert_fail@plt+0x9874>
   1affc:	ldr	r0, [r1, #4]
   1b000:	b	1b040 <__assert_fail@plt+0x9894>
   1b004:	ldmib	r1, {r0, r2}
   1b008:	ldr	r3, [r2, #12]
   1b00c:	str	r3, [r0, #16]
   1b010:	ldr	r0, [r1, #16]
   1b014:	str	r0, [r2, #16]
   1b018:	mov	r0, #0
   1b01c:	bx	lr
   1b020:	ldr	r0, [r1, #4]
   1b024:	cmp	r0, #0
   1b028:	ldrne	r2, [r1, #16]
   1b02c:	strne	r2, [r0, #16]
   1b030:	ldr	r0, [r1, #8]
   1b034:	cmp	r0, #0
   1b038:	beq	1b044 <__assert_fail@plt+0x9898>
   1b03c:	ldr	r1, [r1, #16]
   1b040:	str	r1, [r0, #16]
   1b044:	mov	r0, #0
   1b048:	bx	lr
   1b04c:	ldr	ip, [r1, #28]
   1b050:	ldrb	r2, [r1, #24]
   1b054:	sub	r2, r2, #2
   1b058:	cmp	r2, #14
   1b05c:	bhi	1b114 <__assert_fail@plt+0x9968>
   1b060:	add	r3, pc, #0
   1b064:	ldr	pc, [r3, r2, lsl #2]
   1b068:	andeq	fp, r1, r8, asr r1
   1b06c:	andeq	fp, r1, r4, lsl r1
   1b070:	andeq	fp, r1, r8, lsr #2
   1b074:	andeq	fp, r1, r4, lsl r1
   1b078:	andeq	fp, r1, r4, lsl r1
   1b07c:	andeq	fp, r1, r4, lsl r1
   1b080:	andeq	fp, r1, r4, lsr #1
   1b084:	andeq	fp, r1, r4, lsr #1
   1b088:	strheq	fp, [r1], -ip
   1b08c:	strheq	fp, [r1], -ip
   1b090:	andeq	fp, r1, r4, lsr #1
   1b094:	andeq	fp, r1, r4, lsl r1
   1b098:	andeq	fp, r1, r4, lsl r1
   1b09c:	andeq	fp, r1, r4, lsl r1
   1b0a0:	andeq	fp, r1, r8, asr r1
   1b0a4:	ldr	r0, [r0, #20]
   1b0a8:	add	r2, ip, ip, lsl #1
   1b0ac:	add	r0, r0, r2, lsl #2
   1b0b0:	ldr	r1, [r1, #16]
   1b0b4:	ldr	r1, [r1, #28]
   1b0b8:	b	1b648 <__assert_fail@plt+0x9e9c>
   1b0bc:	push	{fp, lr}
   1b0c0:	mov	fp, sp
   1b0c4:	ldrb	r2, [r0, #88]	; 0x58
   1b0c8:	orr	r2, r2, #1
   1b0cc:	strb	r2, [r0, #88]	; 0x58
   1b0d0:	add	r3, r1, #16
   1b0d4:	ldr	lr, [r1, #4]
   1b0d8:	ldr	r1, [r1, #8]
   1b0dc:	cmp	r1, #0
   1b0e0:	mov	r2, r3
   1b0e4:	addne	r2, r1, #12
   1b0e8:	ldr	r1, [r2]
   1b0ec:	ldr	r2, [r1, #28]
   1b0f0:	cmp	lr, #0
   1b0f4:	addne	r3, lr, #12
   1b0f8:	ldr	r1, [r3]
   1b0fc:	ldr	r1, [r1, #28]
   1b100:	ldr	r0, [r0, #20]
   1b104:	add	r3, ip, ip, lsl #1
   1b108:	add	r0, r0, r3, lsl #2
   1b10c:	pop	{fp, lr}
   1b110:	b	1b5d0 <__assert_fail@plt+0x9e24>
   1b114:	ldr	r0, [r0, #12]
   1b118:	ldr	r1, [r1, #16]
   1b11c:	ldr	r1, [r1, #28]
   1b120:	str	r1, [r0, ip, lsl #2]
   1b124:	b	1b158 <__assert_fail@plt+0x99ac>
   1b128:	ldr	r3, [r0, #12]
   1b12c:	ldr	r2, [r1, #16]
   1b130:	ldr	r2, [r2, #28]
   1b134:	str	r2, [r3, ip, lsl #2]
   1b138:	ldrb	r1, [r1, #24]
   1b13c:	cmp	r1, #4
   1b140:	bne	1b158 <__assert_fail@plt+0x99ac>
   1b144:	ldr	r0, [r0, #20]
   1b148:	add	r1, ip, ip, lsl #1
   1b14c:	add	r0, r0, r1, lsl #2
   1b150:	mov	r1, r2
   1b154:	b	1b648 <__assert_fail@plt+0x9e9c>
   1b158:	mov	r0, #0
   1b15c:	bx	lr
   1b160:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b164:	add	fp, sp, #24
   1b168:	sub	sp, sp, #16
   1b16c:	mov	r4, r0
   1b170:	ldr	r0, [r0, #8]
   1b174:	cmp	r0, #0
   1b178:	beq	1b210 <__assert_fail@plt+0x9a64>
   1b17c:	mov	r7, #0
   1b180:	add	r8, sp, #4
   1b184:	mov	r6, #0
   1b188:	ldr	r0, [r4, #24]
   1b18c:	add	r5, r6, r6, lsl #1
   1b190:	add	r0, r0, r5, lsl #2
   1b194:	ldr	r0, [r0, #4]
   1b198:	cmp	r0, #0
   1b19c:	beq	1b1a8 <__assert_fail@plt+0x99fc>
   1b1a0:	mov	r0, r7
   1b1a4:	b	1b1e8 <__assert_fail@plt+0x9a3c>
   1b1a8:	mov	r0, r8
   1b1ac:	mov	r1, r4
   1b1b0:	mov	r2, r6
   1b1b4:	mov	r3, #1
   1b1b8:	bl	1b694 <__assert_fail@plt+0x9ee8>
   1b1bc:	cmp	r0, #0
   1b1c0:	bne	1b214 <__assert_fail@plt+0x9a68>
   1b1c4:	ldr	r0, [r4, #24]
   1b1c8:	add	r0, r0, r5, lsl #2
   1b1cc:	ldr	r0, [r0, #4]
   1b1d0:	cmp	r0, #0
   1b1d4:	mov	r0, r7
   1b1d8:	bne	1b1e8 <__assert_fail@plt+0x9a3c>
   1b1dc:	ldr	r0, [sp, #12]
   1b1e0:	bl	1312c <__assert_fail@plt+0x1980>
   1b1e4:	mov	r0, #1
   1b1e8:	ldr	r1, [r4, #8]
   1b1ec:	add	r2, r6, #1
   1b1f0:	subs	r3, r2, r1
   1b1f4:	mov	r6, r3
   1b1f8:	movne	r6, r2
   1b1fc:	movwne	r3, #1
   1b200:	and	r7, r0, r3
   1b204:	tst	r0, #1
   1b208:	cmpeq	r2, r1
   1b20c:	bne	1b188 <__assert_fail@plt+0x99dc>
   1b210:	mov	r0, #0
   1b214:	sub	sp, fp, #24
   1b218:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b21c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b220:	add	fp, sp, #24
   1b224:	mov	r4, r0
   1b228:	ldr	r0, [r0, #8]
   1b22c:	cmp	r0, #0
   1b230:	beq	1b2dc <__assert_fail@plt+0x9b30>
   1b234:	mov	r0, #0
   1b238:	mov	r1, #0
   1b23c:	mov	r2, #0
   1b240:	ldr	r3, [r4, #28]
   1b244:	str	r0, [r3, r1]!
   1b248:	str	r0, [r3, #4]
   1b24c:	str	r0, [r3, #8]
   1b250:	add	r1, r1, #12
   1b254:	add	r2, r2, #1
   1b258:	ldr	r3, [r4, #8]
   1b25c:	cmp	r2, r3
   1b260:	bcc	1b240 <__assert_fail@plt+0x9a94>
   1b264:	cmp	r3, #0
   1b268:	beq	1b2dc <__assert_fail@plt+0x9b30>
   1b26c:	mov	r5, #0
   1b270:	ldr	r0, [r4, #24]
   1b274:	add	r8, r5, r5, lsl #1
   1b278:	add	r0, r0, r8, lsl #2
   1b27c:	ldr	r1, [r0, #4]
   1b280:	cmp	r1, #1
   1b284:	blt	1b2cc <__assert_fail@plt+0x9b20>
   1b288:	ldr	r7, [r0, #8]
   1b28c:	mov	r6, #0
   1b290:	ldr	r0, [r7, r6, lsl #2]
   1b294:	add	r0, r0, r0, lsl #1
   1b298:	ldr	r1, [r4, #28]
   1b29c:	add	r0, r1, r0, lsl #2
   1b2a0:	mov	r1, r5
   1b2a4:	bl	1bf00 <__assert_fail@plt+0xa754>
   1b2a8:	cmp	r0, #0
   1b2ac:	moveq	r0, #12
   1b2b0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b2b4:	add	r6, r6, #1
   1b2b8:	ldr	r0, [r4, #24]
   1b2bc:	add	r0, r0, r8, lsl #2
   1b2c0:	ldr	r0, [r0, #4]
   1b2c4:	cmp	r6, r0
   1b2c8:	blt	1b290 <__assert_fail@plt+0x9ae4>
   1b2cc:	add	r5, r5, #1
   1b2d0:	ldr	r0, [r4, #8]
   1b2d4:	cmp	r5, r0
   1b2d8:	bcc	1b270 <__assert_fail@plt+0x9ac4>
   1b2dc:	mov	r0, #0
   1b2e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b2e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2e8:	add	fp, sp, #28
   1b2ec:	sub	sp, sp, #4
   1b2f0:	mov	r9, r2
   1b2f4:	mov	r8, r0
   1b2f8:	ldr	r5, [r2, #4]
   1b2fc:	ldr	r6, [r1]
   1b300:	cmp	r5, #0
   1b304:	ldrbne	r0, [r1, #28]
   1b308:	andsne	r0, r0, #16
   1b30c:	bne	1b3d8 <__assert_fail@plt+0x9c2c>
   1b310:	mov	r0, r6
   1b314:	mov	r1, #0
   1b318:	mov	r2, #0
   1b31c:	mov	r3, #8
   1b320:	bl	17eac <__assert_fail@plt+0x6700>
   1b324:	mov	sl, r0
   1b328:	mov	r0, r6
   1b32c:	mov	r1, #0
   1b330:	mov	r2, #0
   1b334:	mov	r3, #9
   1b338:	bl	17eac <__assert_fail@plt+0x6700>
   1b33c:	mov	r4, r0
   1b340:	cmp	r5, #0
   1b344:	mov	r7, r0
   1b348:	beq	1b364 <__assert_fail@plt+0x9bb8>
   1b34c:	mov	r0, r6
   1b350:	mov	r1, r5
   1b354:	mov	r2, r4
   1b358:	mov	r3, #16
   1b35c:	bl	17eac <__assert_fail@plt+0x6700>
   1b360:	mov	r7, r0
   1b364:	mov	r0, r6
   1b368:	mov	r1, sl
   1b36c:	mov	r2, r7
   1b370:	mov	r3, #16
   1b374:	bl	17eac <__assert_fail@plt+0x6700>
   1b378:	cmp	r4, #0
   1b37c:	beq	1b38c <__assert_fail@plt+0x9be0>
   1b380:	cmp	sl, #0
   1b384:	cmpne	r7, #0
   1b388:	bne	1b39c <__assert_fail@plt+0x9bf0>
   1b38c:	mov	r0, #12
   1b390:	str	r0, [r8]
   1b394:	mov	r5, #0
   1b398:	b	1b3f4 <__assert_fail@plt+0x9c48>
   1b39c:	mov	r5, r0
   1b3a0:	cmp	r0, #0
   1b3a4:	beq	1b38c <__assert_fail@plt+0x9be0>
   1b3a8:	ldr	r0, [r9, #20]
   1b3ac:	str	r0, [r4, #20]
   1b3b0:	str	r0, [sl, #20]
   1b3b4:	ldr	r0, [r4, #24]
   1b3b8:	ldr	r1, [r9, #24]
   1b3bc:	lsr	r1, r1, #19
   1b3c0:	bfi	r0, r1, #19, #1
   1b3c4:	str	r0, [r4, #24]
   1b3c8:	ldr	r0, [sl, #24]
   1b3cc:	bfi	r0, r1, #19, #1
   1b3d0:	str	r0, [sl, #24]
   1b3d4:	b	1b3f4 <__assert_fail@plt+0x9c48>
   1b3d8:	ldr	r0, [r9, #20]
   1b3dc:	cmp	r0, #31
   1b3e0:	bgt	1b3f4 <__assert_fail@plt+0x9c48>
   1b3e4:	ldr	r1, [r6, #80]	; 0x50
   1b3e8:	mov	r2, #1
   1b3ec:	tst	r1, r2, lsl r0
   1b3f0:	bne	1b310 <__assert_fail@plt+0x9b64>
   1b3f4:	mov	r0, r5
   1b3f8:	sub	sp, fp, #28
   1b3fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b400:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b404:	add	fp, sp, #28
   1b408:	sub	sp, sp, #12
   1b40c:	mov	r5, r2
   1b410:	mov	r9, r1
   1b414:	mov	r4, r0
   1b418:	ldr	r7, [r0, #4]
   1b41c:	ldr	r0, [r0, #8]
   1b420:	cmp	r0, r7
   1b424:	bcs	1b4f4 <__assert_fail@plt+0x9d48>
   1b428:	ldr	r0, [r4]
   1b42c:	ldr	r1, [r4, #8]
   1b430:	str	r9, [r0, r1, lsl #3]!
   1b434:	str	r5, [r0, #4]
   1b438:	ldr	r0, [r4]
   1b43c:	ldr	r1, [r4, #8]
   1b440:	add	r0, r0, r1, lsl #3
   1b444:	ldr	r1, [r0, #4]
   1b448:	bfc	r1, #8, #10
   1b44c:	str	r1, [r0, #4]
   1b450:	uxtb	r1, r5
   1b454:	cmp	r1, #5
   1b458:	bne	1b46c <__assert_fail@plt+0x9cc0>
   1b45c:	ldr	r2, [r4, #92]	; 0x5c
   1b460:	mov	r0, #1048576	; 0x100000
   1b464:	cmp	r2, #1
   1b468:	bgt	1b47c <__assert_fail@plt+0x9cd0>
   1b46c:	sub	r0, r1, #6
   1b470:	clz	r0, r0
   1b474:	lsr	r0, r0, #5
   1b478:	lsl	r0, r0, #20
   1b47c:	ldr	r1, [r4]
   1b480:	ldr	r2, [r4, #8]
   1b484:	add	r1, r1, r2, lsl #3
   1b488:	ldr	r2, [r1, #4]
   1b48c:	bic	r2, r2, #1048576	; 0x100000
   1b490:	orr	r0, r2, r0
   1b494:	str	r0, [r1, #4]
   1b498:	ldr	r0, [r4, #8]
   1b49c:	ldr	r1, [r4, #12]
   1b4a0:	mvn	r2, #0
   1b4a4:	str	r2, [r1, r0, lsl #2]
   1b4a8:	ldr	r0, [r4, #8]
   1b4ac:	ldr	r1, [r4, #20]
   1b4b0:	add	r0, r0, r0, lsl #1
   1b4b4:	mov	r2, #0
   1b4b8:	str	r2, [r1, r0, lsl #2]!
   1b4bc:	str	r2, [r1, #4]
   1b4c0:	str	r2, [r1, #8]
   1b4c4:	ldr	r0, [r4, #8]
   1b4c8:	ldr	r1, [r4, #24]
   1b4cc:	add	r0, r0, r0, lsl #1
   1b4d0:	str	r2, [r1, r0, lsl #2]!
   1b4d4:	str	r2, [r1, #4]
   1b4d8:	str	r2, [r1, #8]
   1b4dc:	ldr	r6, [r4, #8]
   1b4e0:	add	r0, r6, #1
   1b4e4:	str	r0, [r4, #8]
   1b4e8:	mov	r0, r6
   1b4ec:	sub	sp, fp, #28
   1b4f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4f4:	lsl	r1, r7, #1
   1b4f8:	mvn	r6, #0
   1b4fc:	movw	r0, #21845	; 0x5555
   1b500:	movt	r0, #5461	; 0x1555
   1b504:	cmp	r1, r0
   1b508:	bhi	1b4e8 <__assert_fail@plt+0x9d3c>
   1b50c:	str	r1, [sp, #8]
   1b510:	ldr	r0, [r4]
   1b514:	lsl	r1, r7, #4
   1b518:	bl	22a9c <__assert_fail@plt+0x112f0>
   1b51c:	cmp	r0, #0
   1b520:	beq	1b4e8 <__assert_fail@plt+0x9d3c>
   1b524:	str	r0, [r4]
   1b528:	ldr	r0, [r4, #12]
   1b52c:	lsl	r8, r7, #3
   1b530:	mov	r1, r8
   1b534:	bl	22a9c <__assert_fail@plt+0x112f0>
   1b538:	str	r0, [sp, #4]
   1b53c:	ldr	r0, [r4, #16]
   1b540:	mov	r1, r8
   1b544:	bl	22a9c <__assert_fail@plt+0x112f0>
   1b548:	mov	r2, r0
   1b54c:	ldr	r0, [r4, #20]
   1b550:	add	r1, r7, r7, lsl #1
   1b554:	mov	r7, r2
   1b558:	lsl	r8, r1, #3
   1b55c:	mov	r1, r8
   1b560:	bl	22a9c <__assert_fail@plt+0x112f0>
   1b564:	mov	sl, r0
   1b568:	ldr	r0, [r4, #24]
   1b56c:	mov	r1, r8
   1b570:	bl	22a9c <__assert_fail@plt+0x112f0>
   1b574:	mov	r8, r0
   1b578:	ldr	r0, [sp, #4]
   1b57c:	cmp	r0, #0
   1b580:	beq	1b590 <__assert_fail@plt+0x9de4>
   1b584:	cmp	r7, #0
   1b588:	cmpne	sl, #0
   1b58c:	bne	1b5b0 <__assert_fail@plt+0x9e04>
   1b590:	bl	1312c <__assert_fail@plt+0x1980>
   1b594:	mov	r0, r7
   1b598:	bl	1312c <__assert_fail@plt+0x1980>
   1b59c:	mov	r0, sl
   1b5a0:	bl	1312c <__assert_fail@plt+0x1980>
   1b5a4:	mov	r0, r8
   1b5a8:	bl	1312c <__assert_fail@plt+0x1980>
   1b5ac:	b	1b4e8 <__assert_fail@plt+0x9d3c>
   1b5b0:	cmp	r8, #0
   1b5b4:	beq	1b590 <__assert_fail@plt+0x9de4>
   1b5b8:	add	r1, r4, #12
   1b5bc:	stm	r1, {r0, r7, sl}
   1b5c0:	str	r8, [r4, #24]
   1b5c4:	ldr	r0, [sp, #8]
   1b5c8:	str	r0, [r4, #4]
   1b5cc:	b	1b428 <__assert_fail@plt+0x9c7c>
   1b5d0:	push	{r4, r5, r6, sl, fp, lr}
   1b5d4:	add	fp, sp, #16
   1b5d8:	mov	r5, r2
   1b5dc:	mov	r4, r1
   1b5e0:	mov	r6, r0
   1b5e4:	mov	r0, #2
   1b5e8:	str	r0, [r6]
   1b5ec:	mov	r0, #8
   1b5f0:	bl	22a6c <__assert_fail@plt+0x112c0>
   1b5f4:	str	r0, [r6, #8]
   1b5f8:	cmp	r0, #0
   1b5fc:	moveq	r0, #12
   1b600:	popeq	{r4, r5, r6, sl, fp, pc}
   1b604:	cmp	r4, r5
   1b608:	bne	1b624 <__assert_fail@plt+0x9e78>
   1b60c:	mov	r0, #1
   1b610:	str	r0, [r6, #4]
   1b614:	ldr	r0, [r6, #8]
   1b618:	str	r4, [r0]
   1b61c:	mov	r0, #0
   1b620:	pop	{r4, r5, r6, sl, fp, pc}
   1b624:	mov	r0, #2
   1b628:	str	r0, [r6, #4]
   1b62c:	ldr	r0, [r6, #8]
   1b630:	cmp	r4, r5
   1b634:	stmlt	r0, {r4, r5}
   1b638:	strge	r5, [r0]
   1b63c:	strge	r4, [r0, #4]
   1b640:	mov	r0, #0
   1b644:	pop	{r4, r5, r6, sl, fp, pc}
   1b648:	push	{r4, r5, fp, lr}
   1b64c:	add	fp, sp, #8
   1b650:	mov	r5, r1
   1b654:	mov	r4, r0
   1b658:	mov	r0, #1
   1b65c:	str	r0, [r4]
   1b660:	str	r0, [r4, #4]
   1b664:	mov	r0, #4
   1b668:	bl	22a6c <__assert_fail@plt+0x112c0>
   1b66c:	str	r0, [r4, #8]
   1b670:	cmp	r0, #0
   1b674:	strne	r5, [r0]
   1b678:	movne	r0, #0
   1b67c:	popne	{r4, r5, fp, pc}
   1b680:	mov	r0, #0
   1b684:	str	r0, [r4]
   1b688:	str	r0, [r4, #4]
   1b68c:	mov	r0, #12
   1b690:	pop	{r4, r5, fp, pc}
   1b694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b698:	add	fp, sp, #28
   1b69c:	sub	sp, sp, #44	; 0x2c
   1b6a0:	mov	r8, r3
   1b6a4:	mov	r6, r2
   1b6a8:	mov	r5, r1
   1b6ac:	mov	r7, r0
   1b6b0:	ldr	r0, [r1, #20]
   1b6b4:	add	r4, r2, r2, lsl #1
   1b6b8:	add	r0, r0, r4, lsl #2
   1b6bc:	ldr	r0, [r0, #4]
   1b6c0:	add	r1, r0, #1
   1b6c4:	add	r0, sp, #32
   1b6c8:	bl	1b8a0 <__assert_fail@plt+0xa0f4>
   1b6cc:	cmp	r0, #0
   1b6d0:	bne	1b898 <__assert_fail@plt+0xa0ec>
   1b6d4:	ldr	r0, [sp, #36]	; 0x24
   1b6d8:	ldr	r1, [sp, #40]	; 0x28
   1b6dc:	add	r2, r0, #1
   1b6e0:	str	r2, [sp, #36]	; 0x24
   1b6e4:	str	r6, [r1, r0, lsl #2]
   1b6e8:	ldr	r0, [r5, #24]
   1b6ec:	add	r0, r0, r4, lsl #2
   1b6f0:	mvn	r1, #0
   1b6f4:	str	r1, [r0, #4]
   1b6f8:	ldr	r1, [r5]
   1b6fc:	add	r0, r1, r6, lsl #3
   1b700:	ldr	r0, [r0, #4]
   1b704:	ubfx	r0, r0, #8, #10
   1b708:	cmp	r0, #0
   1b70c:	beq	1b75c <__assert_fail@plt+0x9fb0>
   1b710:	ldr	r2, [r5, #20]
   1b714:	add	r2, r2, r4, lsl #2
   1b718:	ldr	r3, [r2, #4]
   1b71c:	cmp	r3, #0
   1b720:	beq	1b75c <__assert_fail@plt+0x9fb0>
   1b724:	ldr	r2, [r2, #8]
   1b728:	ldr	r2, [r2]
   1b72c:	add	r1, r1, r2, lsl #3
   1b730:	ldrb	r1, [r1, #6]
   1b734:	tst	r1, #4
   1b738:	bne	1b75c <__assert_fail@plt+0x9fb0>
   1b73c:	str	r0, [sp]
   1b740:	mov	r0, r5
   1b744:	mov	r1, r6
   1b748:	mov	r2, r6
   1b74c:	mov	r3, r6
   1b750:	bl	1b8d0 <__assert_fail@plt+0xa124>
   1b754:	cmp	r0, #0
   1b758:	bne	1b898 <__assert_fail@plt+0xa0ec>
   1b75c:	ldr	r0, [r5]
   1b760:	add	r0, r0, r6, lsl #3
   1b764:	ldrb	r0, [r0, #4]
   1b768:	tst	r0, #8
   1b76c:	beq	1b86c <__assert_fail@plt+0xa0c0>
   1b770:	ldr	r0, [r5, #20]
   1b774:	add	r1, r0, r4, lsl #2
   1b778:	ldr	r1, [r1, #4]
   1b77c:	cmp	r1, #1
   1b780:	blt	1b86c <__assert_fail@plt+0xa0c0>
   1b784:	str	r8, [sp, #8]
   1b788:	str	r7, [sp, #12]
   1b78c:	mov	r8, #0
   1b790:	add	r7, sp, #16
   1b794:	add	sl, sp, #32
   1b798:	mov	r6, #0
   1b79c:	add	r0, r0, r4, lsl #2
   1b7a0:	ldr	r0, [r0, #8]
   1b7a4:	ldr	r2, [r0, r6, lsl #2]
   1b7a8:	add	r9, r2, r2, lsl #1
   1b7ac:	ldr	r0, [r5, #24]
   1b7b0:	add	r0, r0, r9, lsl #2
   1b7b4:	ldr	r1, [r0, #4]
   1b7b8:	cmn	r1, #1
   1b7bc:	beq	1b824 <__assert_fail@plt+0xa078>
   1b7c0:	cmp	r1, #0
   1b7c4:	bne	1b7e4 <__assert_fail@plt+0xa038>
   1b7c8:	mov	r0, r7
   1b7cc:	mov	r1, r5
   1b7d0:	mov	r3, #0
   1b7d4:	bl	1b694 <__assert_fail@plt+0x9ee8>
   1b7d8:	cmp	r0, #0
   1b7dc:	beq	1b7f4 <__assert_fail@plt+0xa048>
   1b7e0:	b	1b898 <__assert_fail@plt+0xa0ec>
   1b7e4:	vldr	d16, [r0]
   1b7e8:	ldr	r0, [r0, #8]
   1b7ec:	str	r0, [sp, #24]
   1b7f0:	vstr	d16, [sp, #16]
   1b7f4:	mov	r0, sl
   1b7f8:	mov	r1, r7
   1b7fc:	bl	1bb5c <__assert_fail@plt+0xa3b0>
   1b800:	cmp	r0, #0
   1b804:	bne	1b898 <__assert_fail@plt+0xa0ec>
   1b808:	ldr	r0, [r5, #24]
   1b80c:	add	r0, r0, r9, lsl #2
   1b810:	ldr	r0, [r0, #4]
   1b814:	cmp	r0, #0
   1b818:	bne	1b828 <__assert_fail@plt+0xa07c>
   1b81c:	ldr	r0, [sp, #24]
   1b820:	bl	1312c <__assert_fail@plt+0x1980>
   1b824:	mov	r8, #1
   1b828:	ldr	r0, [r5, #20]
   1b82c:	add	r1, r0, r4, lsl #2
   1b830:	ldr	r1, [r1, #4]
   1b834:	add	r6, r6, #1
   1b838:	cmp	r6, r1
   1b83c:	blt	1b79c <__assert_fail@plt+0x9ff0>
   1b840:	tst	r8, #1
   1b844:	ldr	r7, [sp, #12]
   1b848:	ldr	r0, [sp, #8]
   1b84c:	beq	1b86c <__assert_fail@plt+0xa0c0>
   1b850:	cmp	r0, #0
   1b854:	bne	1b86c <__assert_fail@plt+0xa0c0>
   1b858:	ldr	r0, [r5, #24]
   1b85c:	add	r0, r0, r4, lsl #2
   1b860:	mov	r1, #0
   1b864:	str	r1, [r0, #4]
   1b868:	b	1b884 <__assert_fail@plt+0xa0d8>
   1b86c:	ldr	r0, [r5, #24]
   1b870:	vldr	d16, [sp, #32]
   1b874:	add	r0, r0, r4, lsl #2
   1b878:	ldr	r1, [sp, #40]	; 0x28
   1b87c:	str	r1, [r0, #8]
   1b880:	vstr	d16, [r0]
   1b884:	ldr	r0, [sp, #40]	; 0x28
   1b888:	vldr	d16, [sp, #32]
   1b88c:	str	r0, [r7, #8]
   1b890:	vstr	d16, [r7]
   1b894:	mov	r0, #0
   1b898:	sub	sp, fp, #28
   1b89c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8a0:	push	{r4, r5, fp, lr}
   1b8a4:	add	fp, sp, #8
   1b8a8:	mov	r4, r0
   1b8ac:	mov	r5, #0
   1b8b0:	stm	r0, {r1, r5}
   1b8b4:	lsl	r0, r1, #2
   1b8b8:	bl	22a6c <__assert_fail@plt+0x112c0>
   1b8bc:	str	r0, [r4, #8]
   1b8c0:	cmp	r0, #0
   1b8c4:	movweq	r5, #12
   1b8c8:	mov	r0, r5
   1b8cc:	pop	{r4, r5, fp, pc}
   1b8d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8d4:	add	fp, sp, #28
   1b8d8:	sub	sp, sp, #20
   1b8dc:	str	r3, [sp, #8]
   1b8e0:	mov	r8, r2
   1b8e4:	mov	sl, r1
   1b8e8:	mov	r5, r0
   1b8ec:	ldr	r0, [fp, #8]
   1b8f0:	str	r0, [sp, #16]
   1b8f4:	ldr	r0, [r5]
   1b8f8:	add	r0, r0, sl, lsl #3
   1b8fc:	ldrb	r1, [r0, #4]!
   1b900:	cmp	r1, #4
   1b904:	bne	1b980 <__assert_fail@plt+0xa1d4>
   1b908:	ldr	r0, [r5, #12]
   1b90c:	ldr	r1, [r5, #20]
   1b910:	ldr	r4, [r0, sl, lsl #2]
   1b914:	add	r6, r8, r8, lsl #1
   1b918:	add	r0, r1, r6, lsl #2
   1b91c:	mov	r1, #0
   1b920:	str	r1, [r0, #4]
   1b924:	mov	r0, r5
   1b928:	mov	r1, r4
   1b92c:	ldr	r2, [sp, #16]
   1b930:	bl	1bcf0 <__assert_fail@plt+0xa544>
   1b934:	mov	r9, #12
   1b938:	cmn	r0, #1
   1b93c:	beq	1bb40 <__assert_fail@plt+0xa394>
   1b940:	mov	r7, r0
   1b944:	ldr	r0, [r5, #12]
   1b948:	ldr	r1, [r0, sl, lsl #2]
   1b94c:	str	r1, [r0, r8, lsl #2]
   1b950:	ldr	r0, [r5, #20]
   1b954:	add	r0, r0, r6, lsl #2
   1b958:	mov	r1, r7
   1b95c:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1b960:	mov	r1, #0
   1b964:	cmp	r0, #0
   1b968:	mov	sl, r4
   1b96c:	mov	r8, r7
   1b970:	beq	1bb40 <__assert_fail@plt+0xa394>
   1b974:	cmp	r1, #0
   1b978:	beq	1b8f4 <__assert_fail@plt+0xa148>
   1b97c:	b	1bb20 <__assert_fail@plt+0xa374>
   1b980:	ldr	r1, [r5, #20]
   1b984:	add	r7, sl, sl, lsl #1
   1b988:	add	r3, r1, r7, lsl #2
   1b98c:	ldr	r2, [r3, #4]
   1b990:	cmp	r2, #0
   1b994:	beq	1bb30 <__assert_fail@plt+0xa384>
   1b998:	ldr	r3, [r3, #8]
   1b99c:	ldr	r9, [r3]
   1b9a0:	add	r4, r8, r8, lsl #1
   1b9a4:	add	r6, r1, r4, lsl #2
   1b9a8:	mov	r1, #0
   1b9ac:	str	r1, [r6, #4]
   1b9b0:	cmp	r2, #1
   1b9b4:	bne	1b9f0 <__assert_fail@plt+0xa244>
   1b9b8:	ldr	r1, [sp, #8]
   1b9bc:	cmp	sl, r1
   1b9c0:	bne	1ba28 <__assert_fail@plt+0xa27c>
   1b9c4:	cmp	r8, sl
   1b9c8:	beq	1ba28 <__assert_fail@plt+0xa27c>
   1b9cc:	mov	r0, r6
   1b9d0:	mov	r1, r9
   1b9d4:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1b9d8:	cmp	r0, #0
   1b9dc:	mov	r1, #1
   1b9e0:	movwne	r1, #2
   1b9e4:	cmp	r1, #0
   1b9e8:	beq	1b8f4 <__assert_fail@plt+0xa148>
   1b9ec:	b	1bb20 <__assert_fail@plt+0xa374>
   1b9f0:	str	r4, [sp, #12]
   1b9f4:	mov	r0, r5
   1b9f8:	mov	r1, r9
   1b9fc:	ldr	r4, [sp, #16]
   1ba00:	mov	r2, r4
   1ba04:	bl	1be80 <__assert_fail@plt+0xa6d4>
   1ba08:	cmn	r0, #1
   1ba0c:	beq	1ba68 <__assert_fail@plt+0xa2bc>
   1ba10:	mov	r1, r0
   1ba14:	mov	r0, r6
   1ba18:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1ba1c:	cmp	r0, #0
   1ba20:	bne	1bacc <__assert_fail@plt+0xa320>
   1ba24:	b	1bb54 <__assert_fail@plt+0xa3a8>
   1ba28:	ldr	r0, [r0]
   1ba2c:	ubfx	r0, r0, #8, #10
   1ba30:	ldr	r2, [sp, #16]
   1ba34:	orr	r2, r0, r2
   1ba38:	mov	r0, r5
   1ba3c:	mov	r1, r9
   1ba40:	str	r2, [sp, #16]
   1ba44:	bl	1bcf0 <__assert_fail@plt+0xa544>
   1ba48:	mov	sl, r9
   1ba4c:	mov	r9, #12
   1ba50:	cmn	r0, #1
   1ba54:	beq	1bb40 <__assert_fail@plt+0xa394>
   1ba58:	mov	r8, r0
   1ba5c:	ldr	r0, [r5, #20]
   1ba60:	add	r0, r0, r4, lsl #2
   1ba64:	b	1bb08 <__assert_fail@plt+0xa35c>
   1ba68:	mov	r0, r5
   1ba6c:	mov	r8, r9
   1ba70:	mov	r1, r9
   1ba74:	mov	r2, r4
   1ba78:	bl	1bcf0 <__assert_fail@plt+0xa544>
   1ba7c:	mov	r9, #12
   1ba80:	cmn	r0, #1
   1ba84:	beq	1bb40 <__assert_fail@plt+0xa394>
   1ba88:	mov	r6, r0
   1ba8c:	ldr	r0, [r5, #20]
   1ba90:	ldr	r1, [sp, #12]
   1ba94:	add	r0, r0, r1, lsl #2
   1ba98:	mov	r1, r6
   1ba9c:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1baa0:	cmp	r0, #0
   1baa4:	beq	1bb40 <__assert_fail@plt+0xa394>
   1baa8:	ldr	r4, [sp, #16]
   1baac:	str	r4, [sp]
   1bab0:	mov	r0, r5
   1bab4:	mov	r1, r8
   1bab8:	mov	r2, r6
   1babc:	ldr	r3, [sp, #8]
   1bac0:	bl	1b8d0 <__assert_fail@plt+0xa124>
   1bac4:	cmp	r0, #0
   1bac8:	bne	1bb4c <__assert_fail@plt+0xa3a0>
   1bacc:	ldr	r0, [r5, #20]
   1bad0:	add	r0, r0, r7, lsl #2
   1bad4:	ldr	r0, [r0, #8]
   1bad8:	ldr	sl, [r0, #4]
   1badc:	mov	r0, r5
   1bae0:	mov	r1, sl
   1bae4:	mov	r2, r4
   1bae8:	bl	1bcf0 <__assert_fail@plt+0xa544>
   1baec:	mov	r9, #12
   1baf0:	cmn	r0, #1
   1baf4:	beq	1bb40 <__assert_fail@plt+0xa394>
   1baf8:	mov	r8, r0
   1bafc:	ldr	r0, [r5, #20]
   1bb00:	ldr	r1, [sp, #12]
   1bb04:	add	r0, r0, r1, lsl #2
   1bb08:	mov	r1, r8
   1bb0c:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1bb10:	mov	r1, #0
   1bb14:	cmp	r0, #0
   1bb18:	bne	1b974 <__assert_fail@plt+0xa1c8>
   1bb1c:	b	1bb40 <__assert_fail@plt+0xa394>
   1bb20:	mov	r9, #12
   1bb24:	cmp	r1, #2
   1bb28:	moveq	r9, #0
   1bb2c:	b	1bb40 <__assert_fail@plt+0xa394>
   1bb30:	ldr	r0, [r5, #12]
   1bb34:	ldr	r1, [r0, sl, lsl #2]
   1bb38:	str	r1, [r0, r8, lsl #2]
   1bb3c:	mov	r9, #0
   1bb40:	mov	r0, r9
   1bb44:	sub	sp, fp, #28
   1bb48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb4c:	mov	r9, r0
   1bb50:	b	1bb40 <__assert_fail@plt+0xa394>
   1bb54:	mov	r9, #12
   1bb58:	b	1bb40 <__assert_fail@plt+0xa394>
   1bb5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bb60:	add	fp, sp, #24
   1bb64:	mov	r8, #0
   1bb68:	cmp	r1, #0
   1bb6c:	beq	1bcc8 <__assert_fail@plt+0xa51c>
   1bb70:	mov	r6, r1
   1bb74:	ldr	r1, [r1, #4]
   1bb78:	cmp	r1, #0
   1bb7c:	beq	1bcc8 <__assert_fail@plt+0xa51c>
   1bb80:	mov	r9, r0
   1bb84:	ldr	r2, [r0]
   1bb88:	ldr	r0, [r0, #4]
   1bb8c:	add	r3, r0, r1, lsl #1
   1bb90:	cmp	r2, r3
   1bb94:	bge	1bbc0 <__assert_fail@plt+0xa414>
   1bb98:	add	r7, r2, r1
   1bb9c:	lsl	r1, r7, #3
   1bba0:	ldr	r0, [r9, #8]
   1bba4:	bl	22a9c <__assert_fail@plt+0x112f0>
   1bba8:	cmp	r0, #0
   1bbac:	beq	1bce4 <__assert_fail@plt+0xa538>
   1bbb0:	str	r0, [r9, #8]
   1bbb4:	lsl	r0, r7, #1
   1bbb8:	str	r0, [r9]
   1bbbc:	ldr	r0, [r9, #4]
   1bbc0:	ldr	r2, [r6, #4]
   1bbc4:	cmp	r0, #0
   1bbc8:	beq	1bcd0 <__assert_fail@plt+0xa524>
   1bbcc:	add	r7, r0, r2, lsl #1
   1bbd0:	sub	r1, r0, #1
   1bbd4:	sub	r0, r2, #1
   1bbd8:	orr	r2, r0, r1
   1bbdc:	cmp	r2, #0
   1bbe0:	blt	1bc2c <__assert_fail@plt+0xa480>
   1bbe4:	ldr	r2, [r6, #8]
   1bbe8:	ldr	r3, [r9, #8]
   1bbec:	ldr	r4, [r2, r0, lsl #2]
   1bbf0:	ldr	r5, [r3, r1, lsl #2]
   1bbf4:	cmp	r5, r4
   1bbf8:	bne	1bc08 <__assert_fail@plt+0xa45c>
   1bbfc:	sub	r1, r1, #1
   1bc00:	sub	r0, r0, #1
   1bc04:	b	1bc20 <__assert_fail@plt+0xa474>
   1bc08:	bge	1bc1c <__assert_fail@plt+0xa470>
   1bc0c:	sub	r7, r7, #1
   1bc10:	str	r4, [r3, r7, lsl #2]
   1bc14:	sub	r0, r0, #1
   1bc18:	b	1bc20 <__assert_fail@plt+0xa474>
   1bc1c:	sub	r1, r1, #1
   1bc20:	orr	r5, r0, r1
   1bc24:	cmn	r5, #1
   1bc28:	bgt	1bbec <__assert_fail@plt+0xa440>
   1bc2c:	cmp	r0, #0
   1bc30:	blt	1bc50 <__assert_fail@plt+0xa4a4>
   1bc34:	add	r2, r0, #1
   1bc38:	sub	r7, r7, r2
   1bc3c:	ldr	r0, [r9, #8]
   1bc40:	add	r0, r0, r7, lsl #2
   1bc44:	ldr	r1, [r6, #8]
   1bc48:	lsl	r2, r2, #2
   1bc4c:	bl	114d0 <memcpy@plt>
   1bc50:	ldr	r1, [r6, #4]
   1bc54:	ldr	r0, [r9, #4]
   1bc58:	add	r1, r0, r1, lsl #1
   1bc5c:	sub	r1, r1, #1
   1bc60:	sub	r2, r1, r7
   1bc64:	adds	r2, r2, #1
   1bc68:	beq	1bcc8 <__assert_fail@plt+0xa51c>
   1bc6c:	add	r3, r2, r0
   1bc70:	str	r3, [r9, #4]
   1bc74:	sub	r3, r0, #1
   1bc78:	ldr	r0, [r9, #8]
   1bc7c:	ldr	r6, [r0, r3, lsl #2]
   1bc80:	ldr	r5, [r0, r1, lsl #2]
   1bc84:	cmp	r5, r6
   1bc88:	ble	1bca4 <__assert_fail@plt+0xa4f8>
   1bc8c:	add	r6, r2, r3
   1bc90:	str	r5, [r0, r6, lsl #2]
   1bc94:	subs	r2, r2, #1
   1bc98:	sub	r1, r1, #1
   1bc9c:	bne	1bc7c <__assert_fail@plt+0xa4d0>
   1bca0:	b	1bcc8 <__assert_fail@plt+0xa51c>
   1bca4:	add	r5, r2, r3
   1bca8:	str	r6, [r0, r5, lsl #2]
   1bcac:	sub	r6, r3, #1
   1bcb0:	cmp	r3, #0
   1bcb4:	mov	r3, r6
   1bcb8:	bgt	1bc7c <__assert_fail@plt+0xa4d0>
   1bcbc:	add	r1, r0, r7, lsl #2
   1bcc0:	lsl	r2, r2, #2
   1bcc4:	bl	114d0 <memcpy@plt>
   1bcc8:	mov	r0, r8
   1bccc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bcd0:	str	r2, [r9, #4]
   1bcd4:	ldr	r0, [r9, #8]
   1bcd8:	ldr	r2, [r6, #4]
   1bcdc:	ldr	r1, [r6, #8]
   1bce0:	b	1bcc0 <__assert_fail@plt+0xa514>
   1bce4:	mov	r8, #12
   1bce8:	mov	r0, r8
   1bcec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bcf0:	push	{r4, r5, r6, sl, fp, lr}
   1bcf4:	add	fp, sp, #16
   1bcf8:	mov	r6, r2
   1bcfc:	mov	r4, r1
   1bd00:	mov	r5, r0
   1bd04:	ldr	r0, [r0]
   1bd08:	ldr	r1, [r0, r1, lsl #3]!
   1bd0c:	ldr	r2, [r0, #4]
   1bd10:	mov	r0, r5
   1bd14:	bl	1b400 <__assert_fail@plt+0x9c54>
   1bd18:	cmn	r0, #1
   1bd1c:	ldrne	r1, [r5]
   1bd20:	addne	r1, r1, r0, lsl #3
   1bd24:	ldrne	r2, [r1, #4]
   1bd28:	bfine	r2, r6, #8, #10
   1bd2c:	strne	r2, [r1, #4]
   1bd30:	ldrne	r1, [r5]
   1bd34:	addne	r2, r1, r4, lsl #3
   1bd38:	ldrne	r2, [r2, #4]
   1bd3c:	movwne	r3, #65280	; 0xff00
   1bd40:	movtne	r3, #3
   1bd44:	andne	r2, r2, r3
   1bd48:	addne	r1, r1, r0, lsl #3
   1bd4c:	ldrne	r3, [r1, #4]
   1bd50:	orrne	r2, r2, r3
   1bd54:	strne	r2, [r1, #4]
   1bd58:	ldrne	r1, [r5]
   1bd5c:	addne	r1, r1, r0, lsl #3
   1bd60:	ldrne	r2, [r1, #4]
   1bd64:	orrne	r2, r2, #262144	; 0x40000
   1bd68:	strne	r2, [r1, #4]
   1bd6c:	ldrne	r1, [r5, #16]
   1bd70:	strne	r4, [r1, r0, lsl #2]
   1bd74:	pop	{r4, r5, r6, sl, fp, pc}
   1bd78:	push	{r4, r5, fp, lr}
   1bd7c:	add	fp, sp, #8
   1bd80:	mov	r5, r1
   1bd84:	mov	r4, r0
   1bd88:	ldr	r2, [r0]
   1bd8c:	cmp	r2, #0
   1bd90:	beq	1bdbc <__assert_fail@plt+0xa610>
   1bd94:	ldr	r1, [r4, #4]
   1bd98:	cmp	r1, #0
   1bd9c:	bne	1bdd4 <__assert_fail@plt+0xa628>
   1bda0:	ldr	r0, [r4, #8]
   1bda4:	str	r5, [r0]
   1bda8:	ldr	r0, [r4, #4]
   1bdac:	add	r0, r0, #1
   1bdb0:	str	r0, [r4, #4]
   1bdb4:	mov	r0, #1
   1bdb8:	pop	{r4, r5, fp, pc}
   1bdbc:	mov	r0, r4
   1bdc0:	mov	r1, r5
   1bdc4:	bl	1b648 <__assert_fail@plt+0x9e9c>
   1bdc8:	clz	r0, r0
   1bdcc:	lsr	r0, r0, #5
   1bdd0:	pop	{r4, r5, fp, pc}
   1bdd4:	cmp	r2, r1
   1bdd8:	bne	1be04 <__assert_fail@plt+0xa658>
   1bddc:	lsl	r0, r2, #1
   1bde0:	str	r0, [r4]
   1bde4:	ldr	r0, [r4, #8]
   1bde8:	lsl	r1, r2, #3
   1bdec:	bl	22a9c <__assert_fail@plt+0x112f0>
   1bdf0:	cmp	r0, #0
   1bdf4:	moveq	r0, #0
   1bdf8:	popeq	{r4, r5, fp, pc}
   1bdfc:	str	r0, [r4, #8]
   1be00:	ldr	r1, [r4, #4]
   1be04:	ldr	ip, [r4, #8]
   1be08:	ldr	r2, [ip]
   1be0c:	cmp	r2, r5
   1be10:	ble	1be48 <__assert_fail@plt+0xa69c>
   1be14:	cmp	r1, #1
   1be18:	blt	1be78 <__assert_fail@plt+0xa6cc>
   1be1c:	add	r2, ip, r1, lsl #2
   1be20:	add	r1, r1, #1
   1be24:	mov	r3, r2
   1be28:	ldr	r0, [r3, #-4]!
   1be2c:	str	r0, [r2]
   1be30:	sub	r1, r1, #1
   1be34:	cmp	r1, #1
   1be38:	mov	r2, r3
   1be3c:	bgt	1be28 <__assert_fail@plt+0xa67c>
   1be40:	sub	r1, r1, #1
   1be44:	b	1be78 <__assert_fail@plt+0xa6cc>
   1be48:	add	r2, ip, r1, lsl #2
   1be4c:	ldr	r3, [r2, #-4]
   1be50:	cmp	r3, r5
   1be54:	ble	1be78 <__assert_fail@plt+0xa6cc>
   1be58:	sub	r1, r1, #2
   1be5c:	str	r3, [r2]
   1be60:	ldr	r3, [r2, #-8]
   1be64:	sub	r2, r2, #4
   1be68:	sub	r1, r1, #1
   1be6c:	cmp	r3, r5
   1be70:	bgt	1be5c <__assert_fail@plt+0xa6b0>
   1be74:	add	r1, r1, #2
   1be78:	str	r5, [ip, r1, lsl #2]
   1be7c:	b	1bda8 <__assert_fail@plt+0xa5fc>
   1be80:	push	{r4, r5, fp, lr}
   1be84:	add	fp, sp, #8
   1be88:	mov	ip, r0
   1be8c:	ldr	r3, [r0, #8]
   1be90:	sub	lr, r3, #1
   1be94:	mvn	r0, #0
   1be98:	cmp	lr, #1
   1be9c:	blt	1bef4 <__assert_fail@plt+0xa748>
   1bea0:	ldr	r4, [ip]
   1bea4:	add	r4, r4, lr, lsl #3
   1bea8:	ldr	r5, [r4, #4]
   1beac:	ands	r4, r5, #262144	; 0x40000
   1beb0:	beq	1bef4 <__assert_fail@plt+0xa748>
   1beb4:	ldr	r4, [ip, #16]
   1beb8:	sub	lr, r4, #4
   1bebc:	ldr	r4, [lr, r3, lsl #2]
   1bec0:	cmp	r4, r1
   1bec4:	ubfxeq	r4, r5, #8, #10
   1bec8:	cmpeq	r4, r2
   1becc:	beq	1bef8 <__assert_fail@plt+0xa74c>
   1bed0:	sub	r4, r3, #2
   1bed4:	cmp	r4, #1
   1bed8:	poplt	{r4, r5, fp, pc}
   1bedc:	ldr	r4, [ip]
   1bee0:	add	r4, r4, r3, lsl #3
   1bee4:	ldr	r5, [r4, #-12]
   1bee8:	ands	r4, r5, #262144	; 0x40000
   1beec:	sub	r3, r3, #1
   1bef0:	bne	1bebc <__assert_fail@plt+0xa710>
   1bef4:	pop	{r4, r5, fp, pc}
   1bef8:	sub	r0, r3, #1
   1befc:	pop	{r4, r5, fp, pc}
   1bf00:	push	{r4, r5, fp, lr}
   1bf04:	add	fp, sp, #8
   1bf08:	mov	r4, r1
   1bf0c:	mov	r5, r0
   1bf10:	ldr	r0, [r0]
   1bf14:	ldr	r1, [r5, #4]
   1bf18:	cmp	r0, r1
   1bf1c:	bne	1bf48 <__assert_fail@plt+0xa79c>
   1bf20:	mov	r1, #2
   1bf24:	add	r0, r1, r0, lsl #1
   1bf28:	str	r0, [r5]
   1bf2c:	lsl	r1, r0, #2
   1bf30:	ldr	r0, [r5, #8]
   1bf34:	bl	22a9c <__assert_fail@plt+0x112f0>
   1bf38:	cmp	r0, #0
   1bf3c:	moveq	r0, #0
   1bf40:	popeq	{r4, r5, fp, pc}
   1bf44:	str	r0, [r5, #8]
   1bf48:	ldmib	r5, {r0, r1}
   1bf4c:	add	r2, r0, #1
   1bf50:	str	r2, [r5, #4]
   1bf54:	str	r4, [r1, r0, lsl #2]
   1bf58:	mov	r0, #1
   1bf5c:	pop	{r4, r5, fp, pc}
   1bf60:	push	{r4, r5, fp, lr}
   1bf64:	add	fp, sp, #8
   1bf68:	mov	r5, r1
   1bf6c:	mov	r4, r0
   1bf70:	ldr	r0, [r1, #4]
   1bf74:	str	r0, [r4, #4]
   1bf78:	ldr	r1, [r1, #4]
   1bf7c:	cmp	r1, #1
   1bf80:	blt	1bfb4 <__assert_fail@plt+0xa808>
   1bf84:	str	r0, [r4]
   1bf88:	lsl	r0, r0, #2
   1bf8c:	bl	22a6c <__assert_fail@plt+0x112c0>
   1bf90:	str	r0, [r4, #8]
   1bf94:	cmp	r0, #0
   1bf98:	beq	1bfc8 <__assert_fail@plt+0xa81c>
   1bf9c:	ldr	r2, [r5, #4]
   1bfa0:	ldr	r1, [r5, #8]
   1bfa4:	lsl	r2, r2, #2
   1bfa8:	bl	114d0 <memcpy@plt>
   1bfac:	mov	r0, #0
   1bfb0:	pop	{r4, r5, fp, pc}
   1bfb4:	mov	r0, #0
   1bfb8:	str	r0, [r4]
   1bfbc:	str	r0, [r4, #4]
   1bfc0:	str	r0, [r4, #8]
   1bfc4:	pop	{r4, r5, fp, pc}
   1bfc8:	mov	r0, #0
   1bfcc:	str	r0, [r4]
   1bfd0:	str	r0, [r4, #4]
   1bfd4:	mov	r0, #12
   1bfd8:	pop	{r4, r5, fp, pc}
   1bfdc:	mov	ip, r0
   1bfe0:	ldr	r0, [r0, #4]
   1bfe4:	cmp	r0, #1
   1bfe8:	movlt	r0, #0
   1bfec:	bxlt	lr
   1bff0:	push	{r4, r5, r6, r7, fp, lr}
   1bff4:	add	fp, sp, #16
   1bff8:	subs	r2, r0, #1
   1bffc:	mov	r0, #0
   1c000:	mov	r3, #0
   1c004:	beq	1c034 <__assert_fail@plt+0xa888>
   1c008:	ldr	lr, [ip, #8]
   1c00c:	mov	r3, #0
   1c010:	mov	r4, #1
   1c014:	add	r5, r2, r3
   1c018:	lsr	r6, r5, #1
   1c01c:	ldr	r7, [lr, r6, lsl #2]
   1c020:	cmp	r7, r1
   1c024:	movge	r2, r6
   1c028:	addlt	r3, r4, r5, lsr #1
   1c02c:	cmp	r3, r2
   1c030:	bcc	1c014 <__assert_fail@plt+0xa868>
   1c034:	ldr	r2, [ip, #8]
   1c038:	ldr	r2, [r2, r3, lsl #2]
   1c03c:	cmp	r2, r1
   1c040:	addeq	r0, r3, #1
   1c044:	pop	{r4, r5, r6, r7, fp, pc}
   1c048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c04c:	add	fp, sp, #28
   1c050:	sub	sp, sp, #12
   1c054:	mov	r6, r1
   1c058:	ldr	r1, [r2, #4]
   1c05c:	cmp	r1, #0
   1c060:	beq	1c128 <__assert_fail@plt+0xa97c>
   1c064:	mov	r5, r3
   1c068:	mov	sl, r2
   1c06c:	str	r0, [sp, #4]
   1c070:	mov	r0, r2
   1c074:	mov	r1, r3
   1c078:	bl	1c13c <__assert_fail@plt+0xa990>
   1c07c:	mov	r4, r0
   1c080:	ldr	r0, [r6, #32]
   1c084:	str	r6, [sp, #8]
   1c088:	ldr	r1, [r6, #68]	; 0x44
   1c08c:	and	r1, r1, r4
   1c090:	add	r1, r1, r1, lsl #1
   1c094:	mov	r6, r0
   1c098:	ldr	r2, [r6, r1, lsl #2]!
   1c09c:	cmp	r2, #1
   1c0a0:	blt	1c0f4 <__assert_fail@plt+0xa948>
   1c0a4:	add	r0, r0, r1, lsl #2
   1c0a8:	ldr	r8, [r0, #8]
   1c0ac:	mov	r9, #0
   1c0b0:	ldr	r7, [r8, r9, lsl #2]
   1c0b4:	ldr	r0, [r7]
   1c0b8:	cmp	r0, r4
   1c0bc:	bne	1c0e4 <__assert_fail@plt+0xa938>
   1c0c0:	ldrb	r0, [r7, #52]	; 0x34
   1c0c4:	and	r0, r0, #15
   1c0c8:	cmp	r0, r5
   1c0cc:	bne	1c0e4 <__assert_fail@plt+0xa938>
   1c0d0:	ldr	r0, [r7, #40]	; 0x28
   1c0d4:	mov	r1, sl
   1c0d8:	bl	1c168 <__assert_fail@plt+0xa9bc>
   1c0dc:	cmp	r0, #0
   1c0e0:	bne	1c130 <__assert_fail@plt+0xa984>
   1c0e4:	ldr	r0, [r6]
   1c0e8:	add	r9, r9, #1
   1c0ec:	cmp	r9, r0
   1c0f0:	blt	1c0b0 <__assert_fail@plt+0xa904>
   1c0f4:	ldr	r0, [sp, #8]
   1c0f8:	mov	r1, sl
   1c0fc:	mov	r2, r5
   1c100:	mov	r3, r4
   1c104:	bl	1c1c8 <__assert_fail@plt+0xaa1c>
   1c108:	mov	r7, r0
   1c10c:	cmp	r0, #0
   1c110:	bne	1c130 <__assert_fail@plt+0xa984>
   1c114:	mov	r0, #12
   1c118:	ldr	r1, [sp, #4]
   1c11c:	str	r0, [r1]
   1c120:	mov	r7, #0
   1c124:	b	1c130 <__assert_fail@plt+0xa984>
   1c128:	mov	r7, #0
   1c12c:	str	r7, [r0]
   1c130:	mov	r0, r7
   1c134:	sub	sp, fp, #28
   1c138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c13c:	mov	r2, r0
   1c140:	ldr	r3, [r0, #4]
   1c144:	add	r0, r3, r1
   1c148:	cmp	r3, #1
   1c14c:	bxlt	lr
   1c150:	ldr	r1, [r2, #8]
   1c154:	ldr	r2, [r1], #4
   1c158:	add	r0, r2, r0
   1c15c:	subs	r3, r3, #1
   1c160:	bne	1c154 <__assert_fail@plt+0xa9a8>
   1c164:	bx	lr
   1c168:	push	{fp, lr}
   1c16c:	mov	fp, sp
   1c170:	mov	lr, r0
   1c174:	mov	r0, #0
   1c178:	cmp	lr, #0
   1c17c:	cmpne	r1, #0
   1c180:	beq	1c1c4 <__assert_fail@plt+0xaa18>
   1c184:	ldr	ip, [lr, #4]
   1c188:	ldr	r3, [r1, #4]
   1c18c:	cmp	ip, r3
   1c190:	popne	{fp, pc}
   1c194:	sub	r3, ip, #1
   1c198:	add	r2, r3, #1
   1c19c:	cmp	r2, #1
   1c1a0:	movlt	r0, #1
   1c1a4:	poplt	{fp, pc}
   1c1a8:	ldr	r2, [r1, #8]
   1c1ac:	ldr	ip, [r2, r3, lsl #2]
   1c1b0:	ldr	r2, [lr, #8]
   1c1b4:	ldr	r2, [r2, r3, lsl #2]
   1c1b8:	sub	r3, r3, #1
   1c1bc:	cmp	r2, ip
   1c1c0:	beq	1c198 <__assert_fail@plt+0xa9ec>
   1c1c4:	pop	{fp, pc}
   1c1c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1cc:	add	fp, sp, #28
   1c1d0:	sub	sp, sp, #20
   1c1d4:	mov	r8, r3
   1c1d8:	mov	r9, r2
   1c1dc:	mov	r7, r1
   1c1e0:	mov	r6, r0
   1c1e4:	mov	r0, #56	; 0x38
   1c1e8:	mov	r1, #1
   1c1ec:	bl	22a18 <__assert_fail@plt+0x1126c>
   1c1f0:	cmp	r0, #0
   1c1f4:	beq	1c3c0 <__assert_fail@plt+0xac14>
   1c1f8:	mov	r4, r0
   1c1fc:	add	r5, r0, #4
   1c200:	mov	r0, r5
   1c204:	mov	r1, r7
   1c208:	bl	1bf60 <__assert_fail@plt+0xa7b4>
   1c20c:	cmp	r0, #0
   1c210:	bne	1c3c8 <__assert_fail@plt+0xac1c>
   1c214:	str	r8, [sp, #4]
   1c218:	str	r5, [r4, #40]	; 0x28
   1c21c:	and	r0, r9, #15
   1c220:	ldrb	r1, [r4, #52]	; 0x34
   1c224:	and	r1, r1, #240	; 0xf0
   1c228:	orr	r0, r1, r0
   1c22c:	strb	r0, [r4, #52]	; 0x34
   1c230:	ldr	r0, [r7, #4]
   1c234:	cmp	r0, #1
   1c238:	blt	1c394 <__assert_fail@plt+0xabe8>
   1c23c:	mov	r3, r5
   1c240:	and	r0, r9, #4
   1c244:	str	r0, [sp]
   1c248:	and	r0, r9, #2
   1c24c:	str	r0, [sp, #8]
   1c250:	and	r0, r9, #1
   1c254:	str	r0, [sp, #16]
   1c258:	mov	r8, #0
   1c25c:	movw	r0, #65280	; 0xff00
   1c260:	movt	r0, #3
   1c264:	add	sl, r0, #255	; 0xff
   1c268:	mov	r9, #0
   1c26c:	str	r5, [sp, #12]
   1c270:	ldr	r0, [r7, #8]
   1c274:	ldr	r0, [r0, r8, lsl #2]
   1c278:	ldr	r1, [r6]
   1c27c:	add	r0, r1, r0, lsl #3
   1c280:	ldr	r5, [r0, #4]
   1c284:	and	r0, r5, sl
   1c288:	cmp	r0, #1
   1c28c:	beq	1c384 <__assert_fail@plt+0xabd8>
   1c290:	movw	r0, #65280	; 0xff00
   1c294:	movt	r0, #3
   1c298:	and	r0, r5, r0
   1c29c:	mov	r1, #32
   1c2a0:	and	r1, r1, r5, lsr #15
   1c2a4:	ldrb	r2, [r4, #52]	; 0x34
   1c2a8:	orr	r1, r2, r1
   1c2ac:	strb	r1, [r4, #52]	; 0x34
   1c2b0:	uxtb	r2, r5
   1c2b4:	cmp	r2, #2
   1c2b8:	beq	1c2cc <__assert_fail@plt+0xab20>
   1c2bc:	cmp	r2, #4
   1c2c0:	bne	1c2d8 <__assert_fail@plt+0xab2c>
   1c2c4:	mov	r2, #64	; 0x40
   1c2c8:	b	1c2d0 <__assert_fail@plt+0xab24>
   1c2cc:	mov	r2, #16
   1c2d0:	orr	r1, r1, r2
   1c2d4:	strb	r1, [r4, #52]	; 0x34
   1c2d8:	cmp	r0, #0
   1c2dc:	beq	1c384 <__assert_fail@plt+0xabd8>
   1c2e0:	ldr	r0, [r4, #40]	; 0x28
   1c2e4:	cmp	r0, r3
   1c2e8:	bne	1c324 <__assert_fail@plt+0xab78>
   1c2ec:	mov	r0, #12
   1c2f0:	bl	22a6c <__assert_fail@plt+0x112c0>
   1c2f4:	cmp	r0, #0
   1c2f8:	beq	1c3b8 <__assert_fail@plt+0xac0c>
   1c2fc:	str	r0, [r4, #40]	; 0x28
   1c300:	mov	r1, r7
   1c304:	bl	1bf60 <__assert_fail@plt+0xa7b4>
   1c308:	cmp	r0, #0
   1c30c:	bne	1c3b8 <__assert_fail@plt+0xac0c>
   1c310:	ldrb	r0, [r4, #52]	; 0x34
   1c314:	orr	r0, r0, #128	; 0x80
   1c318:	strb	r0, [r4, #52]	; 0x34
   1c31c:	mov	r9, #0
   1c320:	ldr	r3, [sp, #12]
   1c324:	ldr	r0, [sp, #16]
   1c328:	cmp	r0, #0
   1c32c:	bne	1c338 <__assert_fail@plt+0xab8c>
   1c330:	ands	r0, r5, #256	; 0x100
   1c334:	bne	1c370 <__assert_fail@plt+0xabc4>
   1c338:	ldr	r0, [sp, #16]
   1c33c:	cmp	r0, #0
   1c340:	andsne	r0, r5, #512	; 0x200
   1c344:	bne	1c370 <__assert_fail@plt+0xabc4>
   1c348:	ldr	r0, [sp, #8]
   1c34c:	cmp	r0, #0
   1c350:	bne	1c35c <__assert_fail@plt+0xabb0>
   1c354:	ands	r0, r5, #4096	; 0x1000
   1c358:	bne	1c370 <__assert_fail@plt+0xabc4>
   1c35c:	ldr	r0, [sp]
   1c360:	cmp	r0, #0
   1c364:	bne	1c384 <__assert_fail@plt+0xabd8>
   1c368:	ands	r0, r5, #16384	; 0x4000
   1c36c:	beq	1c384 <__assert_fail@plt+0xabd8>
   1c370:	sub	r1, r8, r9
   1c374:	mov	r0, r3
   1c378:	bl	1c3d4 <__assert_fail@plt+0xac28>
   1c37c:	ldr	r3, [sp, #12]
   1c380:	add	r9, r9, #1
   1c384:	ldr	r0, [r7, #4]
   1c388:	add	r8, r8, #1
   1c38c:	cmp	r8, r0
   1c390:	blt	1c270 <__assert_fail@plt+0xaac4>
   1c394:	mov	r0, r6
   1c398:	mov	r1, r4
   1c39c:	ldr	r2, [sp, #4]
   1c3a0:	bl	1c41c <__assert_fail@plt+0xac70>
   1c3a4:	cmp	r0, #0
   1c3a8:	bne	1c3b8 <__assert_fail@plt+0xac0c>
   1c3ac:	mov	r0, r4
   1c3b0:	sub	sp, fp, #28
   1c3b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3b8:	mov	r0, r4
   1c3bc:	bl	16978 <__assert_fail@plt+0x51cc>
   1c3c0:	mov	r4, #0
   1c3c4:	b	1c3ac <__assert_fail@plt+0xac00>
   1c3c8:	mov	r0, r4
   1c3cc:	bl	1312c <__assert_fail@plt+0x1980>
   1c3d0:	b	1c3c0 <__assert_fail@plt+0xac14>
   1c3d4:	cmp	r1, #0
   1c3d8:	ldrge	r2, [r0, #4]
   1c3dc:	cmpge	r2, r1
   1c3e0:	bgt	1c3e8 <__assert_fail@plt+0xac3c>
   1c3e4:	bx	lr
   1c3e8:	sub	r2, r2, #1
   1c3ec:	str	r2, [r0, #4]
   1c3f0:	cmp	r2, r1
   1c3f4:	bxle	lr
   1c3f8:	ldr	r2, [r0, #8]
   1c3fc:	add	r3, r2, r1, lsl #2
   1c400:	ldr	r3, [r3, #4]
   1c404:	str	r3, [r2, r1, lsl #2]
   1c408:	add	r1, r1, #1
   1c40c:	ldr	r3, [r0, #4]
   1c410:	cmp	r1, r3
   1c414:	blt	1c3fc <__assert_fail@plt+0xac50>
   1c418:	b	1c3e4 <__assert_fail@plt+0xac38>
   1c41c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c420:	add	fp, sp, #28
   1c424:	sub	sp, sp, #4
   1c428:	mov	r9, r2
   1c42c:	mov	r4, r1
   1c430:	mov	r7, r0
   1c434:	str	r2, [r1]
   1c438:	ldr	r1, [r1, #8]
   1c43c:	add	r5, r4, #16
   1c440:	mov	r0, r5
   1c444:	bl	1b8a0 <__assert_fail@plt+0xa0f4>
   1c448:	mov	r8, #12
   1c44c:	cmp	r0, #0
   1c450:	bne	1c4e4 <__assert_fail@plt+0xad38>
   1c454:	ldr	r0, [r4, #8]
   1c458:	cmp	r0, #1
   1c45c:	blt	1c4a0 <__assert_fail@plt+0xacf4>
   1c460:	mov	r6, #0
   1c464:	ldr	r0, [r4, #12]
   1c468:	ldr	r1, [r0, r6, lsl #2]
   1c46c:	ldr	r0, [r7]
   1c470:	add	r0, r0, r1, lsl #3
   1c474:	ldrb	r0, [r0, #4]
   1c478:	tst	r0, #8
   1c47c:	bne	1c490 <__assert_fail@plt+0xace4>
   1c480:	mov	r0, r5
   1c484:	bl	1bf00 <__assert_fail@plt+0xa754>
   1c488:	cmp	r0, #0
   1c48c:	beq	1c4e4 <__assert_fail@plt+0xad38>
   1c490:	ldr	r0, [r4, #8]
   1c494:	add	r6, r6, #1
   1c498:	cmp	r6, r0
   1c49c:	blt	1c464 <__assert_fail@plt+0xacb8>
   1c4a0:	ldr	sl, [r7, #32]
   1c4a4:	ldr	r0, [r7, #68]	; 0x44
   1c4a8:	and	r0, r0, r9
   1c4ac:	add	r7, r0, r0, lsl #1
   1c4b0:	mov	r6, sl
   1c4b4:	ldr	r1, [r6, r7, lsl #2]!
   1c4b8:	mov	r5, r6
   1c4bc:	ldr	r0, [r5, #4]!
   1c4c0:	cmp	r0, r1
   1c4c4:	ble	1c4f0 <__assert_fail@plt+0xad44>
   1c4c8:	add	r0, sl, r7, lsl #2
   1c4cc:	ldr	r0, [r0, #8]
   1c4d0:	ldr	r1, [r6]
   1c4d4:	add	r2, r1, #1
   1c4d8:	str	r2, [r6]
   1c4dc:	str	r4, [r0, r1, lsl #2]
   1c4e0:	mov	r8, #0
   1c4e4:	mov	r0, r8
   1c4e8:	sub	sp, fp, #28
   1c4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4f0:	add	r9, sl, r7, lsl #2
   1c4f4:	ldr	r0, [r9, #8]!
   1c4f8:	mov	r2, #2
   1c4fc:	add	r1, r2, r1, lsl #1
   1c500:	str	r1, [sp]
   1c504:	lsl	r1, r1, #2
   1c508:	bl	22a9c <__assert_fail@plt+0x112f0>
   1c50c:	cmp	r0, #0
   1c510:	beq	1c4e4 <__assert_fail@plt+0xad38>
   1c514:	str	r0, [r9]
   1c518:	ldr	r0, [sp]
   1c51c:	str	r0, [r5]
   1c520:	b	1c4c8 <__assert_fail@plt+0xad1c>
   1c524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c528:	add	fp, sp, #28
   1c52c:	sub	sp, sp, #4
   1c530:	mov	r5, r2
   1c534:	mov	sl, r1
   1c538:	mov	r4, r0
   1c53c:	add	r8, r2, #1
   1c540:	cmp	r3, #1
   1c544:	beq	1c598 <__assert_fail@plt+0xadec>
   1c548:	mov	r6, #2
   1c54c:	cmp	r3, #0
   1c550:	bne	1c5a8 <__assert_fail@plt+0xadfc>
   1c554:	lsl	r6, r8, #2
   1c558:	mov	r0, r6
   1c55c:	bl	22a6c <__assert_fail@plt+0x112c0>
   1c560:	str	r0, [r4, #4]
   1c564:	mov	r7, #0
   1c568:	cmp	r0, #0
   1c56c:	beq	1c65c <__assert_fail@plt+0xaeb0>
   1c570:	mov	r0, r6
   1c574:	bl	22a6c <__assert_fail@plt+0x112c0>
   1c578:	str	r0, [r4, #8]
   1c57c:	cmp	r0, #0
   1c580:	beq	1c668 <__assert_fail@plt+0xaebc>
   1c584:	str	r8, [r4]
   1c588:	mov	r6, #1
   1c58c:	cmp	r5, #1
   1c590:	bge	1c5b0 <__assert_fail@plt+0xae04>
   1c594:	b	1c628 <__assert_fail@plt+0xae7c>
   1c598:	ldr	r0, [r4]
   1c59c:	mov	r6, #1
   1c5a0:	cmp	r8, r0
   1c5a4:	bhi	1c5dc <__assert_fail@plt+0xae30>
   1c5a8:	cmp	r5, #1
   1c5ac:	blt	1c628 <__assert_fail@plt+0xae7c>
   1c5b0:	add	r0, sl, #4
   1c5b4:	ldmib	r4, {r1, r2}
   1c5b8:	mov	r3, r5
   1c5bc:	ldr	r7, [r0, #-4]
   1c5c0:	str	r7, [r1], #4
   1c5c4:	ldr	r7, [r0]
   1c5c8:	str	r7, [r2], #4
   1c5cc:	add	r0, r0, #8
   1c5d0:	subs	r3, r3, #1
   1c5d4:	bne	1c5bc <__assert_fail@plt+0xae10>
   1c5d8:	b	1c62c <__assert_fail@plt+0xae80>
   1c5dc:	ldr	r0, [r4, #4]
   1c5e0:	lsl	r9, r8, #2
   1c5e4:	mov	r1, r9
   1c5e8:	bl	22a9c <__assert_fail@plt+0x112f0>
   1c5ec:	mov	r7, #0
   1c5f0:	str	r0, [sp]
   1c5f4:	cmp	r0, #0
   1c5f8:	beq	1c65c <__assert_fail@plt+0xaeb0>
   1c5fc:	ldr	r0, [r4, #8]
   1c600:	mov	r1, r9
   1c604:	bl	22a9c <__assert_fail@plt+0x112f0>
   1c608:	cmp	r0, #0
   1c60c:	beq	1c674 <__assert_fail@plt+0xaec8>
   1c610:	str	r8, [r4]
   1c614:	ldr	r1, [sp]
   1c618:	str	r1, [r4, #4]
   1c61c:	str	r0, [r4, #8]
   1c620:	cmp	r5, #1
   1c624:	bge	1c5b0 <__assert_fail@plt+0xae04>
   1c628:	mov	r5, #0
   1c62c:	ldr	r0, [r4]
   1c630:	cmp	r5, r0
   1c634:	bcs	1c658 <__assert_fail@plt+0xaeac>
   1c638:	ldmib	r4, {r0, r1}
   1c63c:	mvn	r2, #0
   1c640:	str	r2, [r1, r5, lsl #2]
   1c644:	str	r2, [r0, r5, lsl #2]
   1c648:	add	r5, r5, #1
   1c64c:	ldr	r3, [r4]
   1c650:	cmp	r5, r3
   1c654:	bcc	1c640 <__assert_fail@plt+0xae94>
   1c658:	mov	r7, r6
   1c65c:	mov	r0, r7
   1c660:	sub	sp, fp, #28
   1c664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c668:	ldr	r0, [r4, #4]
   1c66c:	bl	1312c <__assert_fail@plt+0x1980>
   1c670:	b	1c65c <__assert_fail@plt+0xaeb0>
   1c674:	ldr	r0, [sp]
   1c678:	b	1c66c <__assert_fail@plt+0xaec0>
   1c67c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c680:	add	fp, sp, #24
   1c684:	sub	sp, sp, #8
   1c688:	mov	r7, r3
   1c68c:	mov	r4, r2
   1c690:	mov	r8, r1
   1c694:	mov	r5, r0
   1c698:	ldr	r9, [fp, #16]
   1c69c:	ldr	r6, [r9, #92]	; 0x5c
   1c6a0:	str	r9, [sp, #4]
   1c6a4:	ldr	r0, [fp, #12]
   1c6a8:	str	r0, [sp]
   1c6ac:	ldr	r3, [fp, #8]
   1c6b0:	mov	r0, r1
   1c6b4:	mov	r1, r2
   1c6b8:	mov	r2, r5
   1c6bc:	bl	17400 <__assert_fail@plt+0x5c54>
   1c6c0:	cmp	r6, r7
   1c6c4:	movgt	r7, r6
   1c6c8:	add	r1, r4, #1
   1c6cc:	cmp	r1, r7
   1c6d0:	movge	r1, r7
   1c6d4:	mov	r0, r5
   1c6d8:	bl	17458 <__assert_fail@plt+0x5cac>
   1c6dc:	cmp	r0, #0
   1c6e0:	bne	1c724 <__assert_fail@plt+0xaf78>
   1c6e4:	add	r1, r9, #96	; 0x60
   1c6e8:	str	r1, [r5, #68]	; 0x44
   1c6ec:	ldrb	r1, [r9, #88]	; 0x58
   1c6f0:	ubfx	r1, r1, #4, #1
   1c6f4:	strb	r1, [r5, #78]	; 0x4e
   1c6f8:	ldrb	r1, [r5, #75]	; 0x4b
   1c6fc:	cmp	r1, #0
   1c700:	beq	1c70c <__assert_fail@plt+0xaf60>
   1c704:	mov	r4, #0
   1c708:	b	1c71c <__assert_fail@plt+0xaf70>
   1c70c:	str	r8, [r5, #4]
   1c710:	ldr	r1, [r9, #92]	; 0x5c
   1c714:	cmp	r1, #1
   1c718:	movwgt	r4, #0
   1c71c:	str	r4, [r5, #28]
   1c720:	str	r4, [r5, #32]
   1c724:	sub	sp, fp, #24
   1c728:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c72c:	push	{r4, r5, r6, sl, fp, lr}
   1c730:	add	fp, sp, #16
   1c734:	mov	r4, r2
   1c738:	mov	r5, r0
   1c73c:	mvn	r0, #0
   1c740:	str	r1, [r5, #88]	; 0x58
   1c744:	str	r0, [r5, #92]	; 0x5c
   1c748:	cmp	r2, #1
   1c74c:	blt	1c798 <__assert_fail@plt+0xafec>
   1c750:	mov	r6, #12
   1c754:	movw	r0, #43690	; 0xaaaa
   1c758:	movt	r0, #2730	; 0xaaa
   1c75c:	cmp	r4, r0
   1c760:	bhi	1c790 <__assert_fail@plt+0xafe4>
   1c764:	add	r0, r4, r4, lsl #1
   1c768:	lsl	r0, r0, #3
   1c76c:	bl	22a6c <__assert_fail@plt+0x112c0>
   1c770:	str	r0, [r5, #116]	; 0x74
   1c774:	lsl	r0, r4, #2
   1c778:	bl	22a6c <__assert_fail@plt+0x112c0>
   1c77c:	str	r0, [r5, #132]	; 0x84
   1c780:	cmp	r0, #0
   1c784:	ldrne	r0, [r5, #116]	; 0x74
   1c788:	cmpne	r0, #0
   1c78c:	bne	1c798 <__assert_fail@plt+0xafec>
   1c790:	mov	r0, r6
   1c794:	pop	{r4, r5, r6, sl, fp, pc}
   1c798:	mov	r0, #1
   1c79c:	str	r0, [r5, #120]	; 0x78
   1c7a0:	str	r4, [r5, #112]	; 0x70
   1c7a4:	str	r4, [r5, #128]	; 0x80
   1c7a8:	mov	r6, #0
   1c7ac:	mov	r0, r6
   1c7b0:	pop	{r4, r5, r6, sl, fp, pc}
   1c7b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7b8:	add	fp, sp, #28
   1c7bc:	sub	sp, sp, #28
   1c7c0:	mov	r6, r2
   1c7c4:	mov	r7, r1
   1c7c8:	mov	r4, r0
   1c7cc:	ldr	r0, [r0, #24]
   1c7d0:	cmp	r0, r1
   1c7d4:	ble	1c940 <__assert_fail@plt+0xb194>
   1c7d8:	ldr	r0, [r4, #80]	; 0x50
   1c7dc:	cmp	r0, #2
   1c7e0:	movge	r0, #0
   1c7e4:	strge	r0, [r4, #16]
   1c7e8:	strge	r0, [r4, #20]
   1c7ec:	mov	r0, #0
   1c7f0:	str	r0, [r4, #24]
   1c7f4:	str	r0, [r4, #28]
   1c7f8:	str	r0, [r4, #32]
   1c7fc:	strb	r0, [r4, #76]	; 0x4c
   1c800:	mov	r0, #4
   1c804:	tst	r6, #1
   1c808:	movweq	r0, #6
   1c80c:	ldr	r1, [r4, #44]	; 0x2c
   1c810:	ldr	r2, [r4, #52]	; 0x34
   1c814:	str	r1, [r4, #48]	; 0x30
   1c818:	str	r2, [r4, #56]	; 0x38
   1c81c:	str	r0, [r4, #60]	; 0x3c
   1c820:	ldrb	r0, [r4, #75]	; 0x4b
   1c824:	cmp	r0, #0
   1c828:	mov	r5, r7
   1c82c:	ldreq	r0, [r4]
   1c830:	streq	r0, [r4, #4]
   1c834:	moveq	r5, r7
   1c838:	cmp	r5, #0
   1c83c:	beq	1c8c8 <__assert_fail@plt+0xb11c>
   1c840:	ldr	r0, [r4, #32]
   1c844:	cmp	r5, r0
   1c848:	bge	1c950 <__assert_fail@plt+0xb1a4>
   1c84c:	ldrb	r0, [r4, #76]	; 0x4c
   1c850:	cmp	r0, #0
   1c854:	bne	1ca84 <__assert_fail@plt+0xb2d8>
   1c858:	sub	r1, r5, #1
   1c85c:	mov	r0, r4
   1c860:	mov	r2, r6
   1c864:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1c868:	str	r0, [r4, #60]	; 0x3c
   1c86c:	ldr	r0, [r4, #80]	; 0x50
   1c870:	cmp	r0, #2
   1c874:	blt	1c890 <__assert_fail@plt+0xb0e4>
   1c878:	ldr	r0, [r4, #8]
   1c87c:	ldr	r2, [r4, #28]
   1c880:	add	r1, r0, r5, lsl #2
   1c884:	sub	r2, r2, r5
   1c888:	lsl	r2, r2, #2
   1c88c:	bl	114a0 <memmove@plt>
   1c890:	ldrb	r0, [r4, #75]	; 0x4b
   1c894:	cmp	r0, #0
   1c898:	bne	1cb78 <__assert_fail@plt+0xb3cc>
   1c89c:	ldr	r0, [r4, #28]
   1c8a0:	ldr	r1, [r4, #32]
   1c8a4:	sub	r0, r0, r5
   1c8a8:	sub	r1, r1, r5
   1c8ac:	str	r0, [r4, #28]
   1c8b0:	str	r1, [r4, #32]
   1c8b4:	ldrb	r0, [r4, #75]	; 0x4b
   1c8b8:	cmp	r0, #0
   1c8bc:	ldreq	r0, [r4, #4]
   1c8c0:	addeq	r0, r0, r5
   1c8c4:	streq	r0, [r4, #4]
   1c8c8:	str	r7, [r4, #24]
   1c8cc:	ldr	r0, [r4, #48]	; 0x30
   1c8d0:	ldr	r1, [r4, #56]	; 0x38
   1c8d4:	ldr	r2, [r4, #80]	; 0x50
   1c8d8:	sub	r0, r0, r5
   1c8dc:	str	r0, [r4, #48]	; 0x30
   1c8e0:	sub	r1, r1, r5
   1c8e4:	str	r1, [r4, #56]	; 0x38
   1c8e8:	cmp	r2, #2
   1c8ec:	blt	1c914 <__assert_fail@plt+0xb168>
   1c8f0:	ldrb	r0, [r4, #72]	; 0x48
   1c8f4:	cmp	r0, #0
   1c8f8:	beq	1c928 <__assert_fail@plt+0xb17c>
   1c8fc:	mov	r0, r4
   1c900:	bl	174fc <__assert_fail@plt+0x5d50>
   1c904:	cmp	r0, #0
   1c908:	beq	1c930 <__assert_fail@plt+0xb184>
   1c90c:	sub	sp, fp, #28
   1c910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c914:	ldrb	r1, [r4, #75]	; 0x4b
   1c918:	cmp	r1, #0
   1c91c:	bne	1cb90 <__assert_fail@plt+0xb3e4>
   1c920:	str	r0, [r4, #28]
   1c924:	b	1c930 <__assert_fail@plt+0xb184>
   1c928:	mov	r0, r4
   1c92c:	bl	17b30 <__assert_fail@plt+0x6384>
   1c930:	mov	r0, #0
   1c934:	str	r0, [r4, #40]	; 0x28
   1c938:	sub	sp, fp, #28
   1c93c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c940:	sub	r5, r7, r0
   1c944:	cmp	r5, #0
   1c948:	bne	1c840 <__assert_fail@plt+0xb094>
   1c94c:	b	1c8c8 <__assert_fail@plt+0xb11c>
   1c950:	ldr	r9, [r4, #28]
   1c954:	ldrb	r0, [r4, #76]	; 0x4c
   1c958:	cmp	r0, #0
   1c95c:	bne	1cd08 <__assert_fail@plt+0xb55c>
   1c960:	mov	r0, #0
   1c964:	str	r0, [r4, #28]
   1c968:	ldr	r1, [r4, #80]	; 0x50
   1c96c:	cmp	r1, #2
   1c970:	blt	1cba8 <__assert_fail@plt+0xb3fc>
   1c974:	mvn	r0, #0
   1c978:	str	r0, [sp, #24]
   1c97c:	ldrb	r0, [r4, #73]	; 0x49
   1c980:	cmp	r0, #0
   1c984:	beq	1ca38 <__assert_fail@plt+0xb28c>
   1c988:	ldr	r2, [r4]
   1c98c:	ldr	r0, [r4, #24]
   1c990:	add	r0, r2, r0
   1c994:	add	r8, r0, r5
   1c998:	sub	r1, r5, r1
   1c99c:	add	r1, r0, r1
   1c9a0:	cmp	r1, r2
   1c9a4:	movcc	r1, r2
   1c9a8:	mov	sl, r8
   1c9ac:	sub	sl, sl, #1
   1c9b0:	cmp	sl, r1
   1c9b4:	bcc	1ca2c <__assert_fail@plt+0xb280>
   1c9b8:	ldrb	r2, [sl]
   1c9bc:	and	r2, r2, #192	; 0xc0
   1c9c0:	cmp	r2, #128	; 0x80
   1c9c4:	beq	1c9ac <__assert_fail@plt+0xb200>
   1c9c8:	ldr	r1, [r4, #48]	; 0x30
   1c9cc:	add	r3, r0, r1
   1c9d0:	sub	r2, r3, sl
   1c9d4:	ldr	r0, [r4, #64]	; 0x40
   1c9d8:	cmp	r0, #0
   1c9dc:	mov	r1, sl
   1c9e0:	bne	1cd90 <__assert_fail@plt+0xb5e4>
   1c9e4:	mov	r0, #0
   1c9e8:	str	r0, [sp, #20]
   1c9ec:	str	r0, [sp, #16]
   1c9f0:	add	r0, sp, #12
   1c9f4:	add	r3, sp, #16
   1c9f8:	bl	23234 <__assert_fail@plt+0x11a88>
   1c9fc:	sub	r1, r8, sl
   1ca00:	cmp	r0, r1
   1ca04:	bcc	1ca2c <__assert_fail@plt+0xb280>
   1ca08:	cmn	r0, #3
   1ca0c:	bhi	1ca2c <__assert_fail@plt+0xb280>
   1ca10:	mov	r2, #0
   1ca14:	str	r2, [r4, #16]
   1ca18:	str	r2, [r4, #20]
   1ca1c:	sub	r0, r0, r1
   1ca20:	str	r0, [r4, #28]
   1ca24:	ldr	r0, [sp, #12]
   1ca28:	str	r0, [sp, #24]
   1ca2c:	ldr	r8, [sp, #24]
   1ca30:	cmn	r8, #1
   1ca34:	bne	1ca5c <__assert_fail@plt+0xb2b0>
   1ca38:	add	r2, sp, #24
   1ca3c:	mov	r0, r4
   1ca40:	mov	r1, r7
   1ca44:	bl	1d804 <__assert_fail@plt+0xc058>
   1ca48:	sub	r0, r0, r7
   1ca4c:	str	r0, [r4, #28]
   1ca50:	ldr	r8, [sp, #24]
   1ca54:	cmn	r8, #1
   1ca58:	beq	1cccc <__assert_fail@plt+0xb520>
   1ca5c:	ldrb	r0, [r4, #78]	; 0x4e
   1ca60:	cmp	r0, #0
   1ca64:	bne	1cd6c <__assert_fail@plt+0xb5c0>
   1ca68:	mov	r0, #0
   1ca6c:	cmp	r8, #10
   1ca70:	bne	1ccdc <__assert_fail@plt+0xb530>
   1ca74:	ldrb	r0, [r4, #77]	; 0x4d
   1ca78:	cmp	r0, #0
   1ca7c:	movwne	r0, #2
   1ca80:	b	1ccdc <__assert_fail@plt+0xb530>
   1ca84:	ldr	r8, [r4, #12]
   1ca88:	ldr	r9, [r4, #28]
   1ca8c:	mov	r0, #0
   1ca90:	mov	r1, r9
   1ca94:	add	r2, r0, r1
   1ca98:	add	r2, r2, r2, lsr #31
   1ca9c:	asr	sl, r2, #1
   1caa0:	ldr	r2, [r8, sl, lsl #2]
   1caa4:	cmp	r2, r5
   1caa8:	mov	r3, sl
   1caac:	bgt	1cabc <__assert_fail@plt+0xb310>
   1cab0:	bge	1cac8 <__assert_fail@plt+0xb31c>
   1cab4:	add	r0, sl, #1
   1cab8:	mov	r3, r1
   1cabc:	cmp	r0, r3
   1cac0:	mov	r1, r3
   1cac4:	blt	1ca94 <__assert_fail@plt+0xb2e8>
   1cac8:	cmp	r2, r5
   1cacc:	addlt	sl, sl, #1
   1cad0:	sub	r1, sl, #1
   1cad4:	mov	r0, r4
   1cad8:	mov	r2, r6
   1cadc:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1cae0:	str	r0, [r4, #60]	; 0x3c
   1cae4:	cmp	r9, r5
   1cae8:	ble	1cafc <__assert_fail@plt+0xb350>
   1caec:	cmp	sl, r5
   1caf0:	ldreq	r0, [r8, sl, lsl #2]
   1caf4:	cmpeq	r0, r5
   1caf8:	beq	1cc58 <__assert_fail@plt+0xb4ac>
   1cafc:	mov	r0, #0
   1cb00:	strb	r0, [r4, #76]	; 0x4c
   1cb04:	sub	r0, r5, r7
   1cb08:	ldr	r1, [r4, #44]	; 0x2c
   1cb0c:	ldr	r2, [r4, #52]	; 0x34
   1cb10:	add	r1, r0, r1
   1cb14:	str	r1, [r4, #48]	; 0x30
   1cb18:	add	r0, r0, r2
   1cb1c:	str	r0, [r4, #56]	; 0x38
   1cb20:	sub	r1, r8, #4
   1cb24:	mov	r0, sl
   1cb28:	cmp	sl, #1
   1cb2c:	blt	1cb40 <__assert_fail@plt+0xb394>
   1cb30:	ldr	r2, [r1, r0, lsl #2]
   1cb34:	sub	sl, r0, #1
   1cb38:	cmp	r2, r5
   1cb3c:	beq	1cb24 <__assert_fail@plt+0xb378>
   1cb40:	cmp	r0, r9
   1cb44:	bge	1cb64 <__assert_fail@plt+0xb3b8>
   1cb48:	ldr	r1, [r4, #8]
   1cb4c:	ldr	r2, [r1, r0, lsl #2]
   1cb50:	cmn	r2, #1
   1cb54:	bne	1cb64 <__assert_fail@plt+0xb3b8>
   1cb58:	add	r0, r0, #1
   1cb5c:	cmp	r0, r9
   1cb60:	blt	1cb4c <__assert_fail@plt+0xb3a0>
   1cb64:	cmp	r0, r9
   1cb68:	bne	1cbf4 <__assert_fail@plt+0xb448>
   1cb6c:	mov	r0, #0
   1cb70:	str	r0, [r4, #28]
   1cb74:	b	1ccec <__assert_fail@plt+0xb540>
   1cb78:	ldr	r0, [r4, #4]
   1cb7c:	ldr	r2, [r4, #28]
   1cb80:	add	r1, r0, r5
   1cb84:	sub	r2, r2, r5
   1cb88:	bl	114a0 <memmove@plt>
   1cb8c:	b	1c89c <__assert_fail@plt+0xb0f0>
   1cb90:	ldrb	r0, [r4, #72]	; 0x48
   1cb94:	cmp	r0, #0
   1cb98:	beq	1cc40 <__assert_fail@plt+0xb494>
   1cb9c:	mov	r0, r4
   1cba0:	bl	17ac4 <__assert_fail@plt+0x6318>
   1cba4:	b	1c930 <__assert_fail@plt+0xb184>
   1cba8:	ldr	r2, [r4]
   1cbac:	ldr	r3, [r4, #24]
   1cbb0:	ldr	r1, [r4, #64]	; 0x40
   1cbb4:	add	r3, r5, r3
   1cbb8:	add	r2, r2, r3
   1cbbc:	ldrb	r6, [r2, #-1]
   1cbc0:	str	r0, [r4, #32]
   1cbc4:	cmp	r1, #0
   1cbc8:	ldrbne	r6, [r1, r6]
   1cbcc:	ldr	r0, [r4, #68]	; 0x44
   1cbd0:	mov	r1, r6
   1cbd4:	bl	1d8b0 <__assert_fail@plt+0xc104>
   1cbd8:	mov	r1, #1
   1cbdc:	cmp	r0, #0
   1cbe0:	moveq	r1, #0
   1cbe4:	cmpeq	r6, #10
   1cbe8:	beq	1ccf8 <__assert_fail@plt+0xb54c>
   1cbec:	str	r1, [r4, #60]	; 0x3c
   1cbf0:	b	1c8b4 <__assert_fail@plt+0xb108>
   1cbf4:	ldr	r0, [r8, r0, lsl #2]
   1cbf8:	subs	r0, r0, r5
   1cbfc:	str	r0, [r4, #28]
   1cc00:	beq	1ccec <__assert_fail@plt+0xb540>
   1cc04:	ldr	r2, [r4, #28]
   1cc08:	cmp	r2, #1
   1cc0c:	blt	1cc30 <__assert_fail@plt+0xb484>
   1cc10:	ldr	r0, [r4, #8]
   1cc14:	mov	r1, #0
   1cc18:	mvn	r3, #0
   1cc1c:	str	r3, [r0, r1, lsl #2]
   1cc20:	add	r1, r1, #1
   1cc24:	ldr	r2, [r4, #28]
   1cc28:	cmp	r1, r2
   1cc2c:	blt	1cc1c <__assert_fail@plt+0xb470>
   1cc30:	ldr	r0, [r4, #4]
   1cc34:	mov	r1, #255	; 0xff
   1cc38:	bl	116b0 <memset@plt>
   1cc3c:	b	1ccec <__assert_fail@plt+0xb540>
   1cc40:	ldr	r0, [r4, #64]	; 0x40
   1cc44:	cmp	r0, #0
   1cc48:	beq	1c930 <__assert_fail@plt+0xb184>
   1cc4c:	mov	r0, r4
   1cc50:	bl	17cc0 <__assert_fail@plt+0x6514>
   1cc54:	b	1c930 <__assert_fail@plt+0xb184>
   1cc58:	ldr	r0, [r4, #8]
   1cc5c:	add	r1, r0, r5, lsl #2
   1cc60:	sub	r2, r9, r5
   1cc64:	lsl	r2, r2, #2
   1cc68:	bl	114a0 <memmove@plt>
   1cc6c:	ldr	r0, [r4, #4]
   1cc70:	ldr	r2, [r4, #28]
   1cc74:	add	r1, r0, r5
   1cc78:	sub	r2, r2, r5
   1cc7c:	bl	114a0 <memmove@plt>
   1cc80:	ldr	r0, [r4, #28]
   1cc84:	ldr	r1, [r4, #32]
   1cc88:	sub	r0, r0, r5
   1cc8c:	sub	r1, r1, r5
   1cc90:	str	r0, [r4, #28]
   1cc94:	str	r1, [r4, #32]
   1cc98:	cmp	r0, #1
   1cc9c:	blt	1c8b4 <__assert_fail@plt+0xb108>
   1cca0:	ldr	r0, [r4, #12]
   1cca4:	add	r1, r0, r5, lsl #2
   1cca8:	mov	r2, #0
   1ccac:	ldr	r3, [r1, r2, lsl #2]
   1ccb0:	sub	r3, r3, r5
   1ccb4:	str	r3, [r0, r2, lsl #2]
   1ccb8:	add	r2, r2, #1
   1ccbc:	ldr	r3, [r4, #28]
   1ccc0:	cmp	r2, r3
   1ccc4:	blt	1ccac <__assert_fail@plt+0xb500>
   1ccc8:	b	1c8b4 <__assert_fail@plt+0xb108>
   1cccc:	sub	r1, r9, #1
   1ccd0:	mov	r0, r4
   1ccd4:	mov	r2, r6
   1ccd8:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1ccdc:	str	r0, [r4, #60]	; 0x3c
   1cce0:	ldr	r0, [r4, #28]
   1cce4:	cmp	r0, #0
   1cce8:	bne	1cd30 <__assert_fail@plt+0xb584>
   1ccec:	ldr	r0, [r4, #28]
   1ccf0:	str	r0, [r4, #32]
   1ccf4:	b	1c8b4 <__assert_fail@plt+0xb108>
   1ccf8:	ldrb	r1, [r4, #77]	; 0x4d
   1ccfc:	cmp	r1, #0
   1cd00:	movwne	r1, #2
   1cd04:	b	1cbec <__assert_fail@plt+0xb440>
   1cd08:	mov	r0, #0
   1cd0c:	strb	r0, [r4, #76]	; 0x4c
   1cd10:	sub	r0, r5, r7
   1cd14:	ldr	r1, [r4, #44]	; 0x2c
   1cd18:	ldr	r2, [r4, #52]	; 0x34
   1cd1c:	add	r1, r0, r1
   1cd20:	str	r1, [r4, #48]	; 0x30
   1cd24:	add	r0, r0, r2
   1cd28:	str	r0, [r4, #56]	; 0x38
   1cd2c:	b	1c960 <__assert_fail@plt+0xb1b4>
   1cd30:	ldr	r2, [r4, #28]
   1cd34:	cmp	r2, #1
   1cd38:	blt	1cd5c <__assert_fail@plt+0xb5b0>
   1cd3c:	ldr	r0, [r4, #8]
   1cd40:	mov	r1, #0
   1cd44:	mvn	r3, #0
   1cd48:	str	r3, [r0, r1, lsl #2]
   1cd4c:	add	r1, r1, #1
   1cd50:	ldr	r2, [r4, #28]
   1cd54:	cmp	r1, r2
   1cd58:	blt	1cd48 <__assert_fail@plt+0xb59c>
   1cd5c:	ldrb	r0, [r4, #75]	; 0x4b
   1cd60:	cmp	r0, #0
   1cd64:	bne	1cc30 <__assert_fail@plt+0xb484>
   1cd68:	b	1ccec <__assert_fail@plt+0xb540>
   1cd6c:	mov	r0, r8
   1cd70:	bl	11698 <iswalnum@plt>
   1cd74:	mov	r1, r0
   1cd78:	mov	r0, #1
   1cd7c:	cmp	r8, #95	; 0x5f
   1cd80:	beq	1ccdc <__assert_fail@plt+0xb530>
   1cd84:	cmp	r1, #0
   1cd88:	beq	1ca68 <__assert_fail@plt+0xb2bc>
   1cd8c:	b	1ccdc <__assert_fail@plt+0xb530>
   1cd90:	cmp	r2, #1
   1cd94:	blt	1cdd8 <__assert_fail@plt+0xb62c>
   1cd98:	sub	r1, sl, #1
   1cd9c:	sub	r1, r1, r3
   1cda0:	cmn	r1, #7
   1cda4:	mvnle	r1, #6
   1cda8:	mvn	r3, #1
   1cdac:	sub	ip, r3, r1
   1cdb0:	add	r1, sp, #6
   1cdb4:	ldrb	r3, [sl, ip]
   1cdb8:	ldrb	r3, [r0, r3]
   1cdbc:	strb	r3, [r1, ip]
   1cdc0:	sub	lr, ip, #1
   1cdc4:	add	r3, ip, #1
   1cdc8:	cmp	r3, #1
   1cdcc:	mov	ip, lr
   1cdd0:	bgt	1cdb4 <__assert_fail@plt+0xb608>
   1cdd4:	b	1c9e4 <__assert_fail@plt+0xb238>
   1cdd8:	add	r1, sp, #6
   1cddc:	b	1c9e4 <__assert_fail@plt+0xb238>
   1cde0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cde4:	add	fp, sp, #28
   1cde8:	sub	sp, sp, #20
   1cdec:	mov	sl, r2
   1cdf0:	str	r1, [sp, #12]
   1cdf4:	mov	r7, r0
   1cdf8:	ldr	r5, [r0, #84]	; 0x54
   1cdfc:	ldr	r8, [r0, #40]	; 0x28
   1ce00:	mov	r0, #0
   1ce04:	str	r0, [sp, #16]
   1ce08:	cmp	r2, #0
   1ce0c:	str	r2, [sp, #4]
   1ce10:	movwne	sl, #1
   1ce14:	ldr	r4, [r5, #36]	; 0x24
   1ce18:	ldrsb	r0, [r4, #52]	; 0x34
   1ce1c:	cmn	r0, #1
   1ce20:	bgt	1ce8c <__assert_fail@plt+0xb6e0>
   1ce24:	ldr	r2, [r7, #88]	; 0x58
   1ce28:	sub	r1, r8, #1
   1ce2c:	mov	r0, r7
   1ce30:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1ce34:	tst	r0, #1
   1ce38:	bne	1ce88 <__assert_fail@plt+0xb6dc>
   1ce3c:	mov	r3, r0
   1ce40:	cmp	r0, #0
   1ce44:	beq	1ce8c <__assert_fail@plt+0xb6e0>
   1ce48:	ands	r1, r3, #2
   1ce4c:	and	r0, r3, #4
   1ce50:	cmpne	r0, #0
   1ce54:	bne	1cee4 <__assert_fail@plt+0xb738>
   1ce58:	cmp	r1, #0
   1ce5c:	bne	1cef4 <__assert_fail@plt+0xb748>
   1ce60:	cmp	r0, #0
   1ce64:	beq	1ce8c <__assert_fail@plt+0xb6e0>
   1ce68:	ldr	r2, [r4, #40]	; 0x28
   1ce6c:	add	r0, sp, #16
   1ce70:	mov	r1, r5
   1ce74:	bl	1c048 <__assert_fail@plt+0xa89c>
   1ce78:	mov	r4, r0
   1ce7c:	cmp	r4, #0
   1ce80:	bne	1ce94 <__assert_fail@plt+0xb6e8>
   1ce84:	b	1d098 <__assert_fail@plt+0xb8ec>
   1ce88:	ldr	r4, [r5, #40]	; 0x28
   1ce8c:	cmp	r4, #0
   1ce90:	beq	1d098 <__assert_fail@plt+0xb8ec>
   1ce94:	ldr	r0, [r7, #100]	; 0x64
   1ce98:	cmp	r0, #0
   1ce9c:	beq	1ceb0 <__assert_fail@plt+0xb704>
   1cea0:	str	r4, [r0, r8, lsl #2]
   1cea4:	ldr	r0, [r5, #76]	; 0x4c
   1cea8:	cmp	r0, #0
   1ceac:	bne	1d0c8 <__assert_fail@plt+0xb91c>
   1ceb0:	ldrb	r0, [r4, #52]	; 0x34
   1ceb4:	tst	r0, #16
   1ceb8:	bne	1d0a0 <__assert_fail@plt+0xb8f4>
   1cebc:	mov	r0, #0
   1cec0:	str	r0, [sp, #8]
   1cec4:	mvn	r6, #0
   1cec8:	str	r8, [sp]
   1cecc:	ldr	r0, [r7, #40]	; 0x28
   1ced0:	ldr	r1, [r7, #56]	; 0x38
   1ced4:	cmp	r1, r0
   1ced8:	ble	1d074 <__assert_fail@plt+0xb8c8>
   1cedc:	add	r8, sp, #16
   1cee0:	b	1cf60 <__assert_fail@plt+0xb7b4>
   1cee4:	ldr	r4, [r5, #48]	; 0x30
   1cee8:	cmp	r4, #0
   1ceec:	bne	1ce94 <__assert_fail@plt+0xb6e8>
   1cef0:	b	1d098 <__assert_fail@plt+0xb8ec>
   1cef4:	ldr	r4, [r5, #44]	; 0x2c
   1cef8:	cmp	r4, #0
   1cefc:	bne	1ce94 <__assert_fail@plt+0xb6e8>
   1cf00:	b	1d098 <__assert_fail@plt+0xb8ec>
   1cf04:	ldr	r2, [r7, #48]	; 0x30
   1cf08:	cmp	r1, r2
   1cf0c:	bge	1cf74 <__assert_fail@plt+0xb7c8>
   1cf10:	b	1cf20 <__assert_fail@plt+0xb774>
   1cf14:	ldr	r2, [r7, #48]	; 0x30
   1cf18:	cmp	r1, r2
   1cf1c:	bge	1cf80 <__assert_fail@plt+0xb7d4>
   1cf20:	add	r1, r0, #2
   1cf24:	mov	r0, r7
   1cf28:	bl	1dc5c <__assert_fail@plt+0xc4b0>
   1cf2c:	str	r0, [sp, #16]
   1cf30:	cmp	r0, #0
   1cf34:	beq	1cf80 <__assert_fail@plt+0xb7d4>
   1cf38:	b	1d098 <__assert_fail@plt+0xb8ec>
   1cf3c:	cmp	r9, r4
   1cf40:	ldr	r0, [sp]
   1cf44:	moveq	r0, r5
   1cf48:	str	r0, [sp]
   1cf4c:	sub	r0, r9, r4
   1cf50:	clz	r0, r0
   1cf54:	lsr	r0, r0, #5
   1cf58:	and	sl, sl, r0
   1cf5c:	b	1d014 <__assert_fail@plt+0xb868>
   1cf60:	mov	r9, r4
   1cf64:	add	r5, r0, #1
   1cf68:	ldr	r1, [r7, #36]	; 0x24
   1cf6c:	cmp	r5, r1
   1cf70:	bge	1cf04 <__assert_fail@plt+0xb758>
   1cf74:	ldr	r1, [r7, #28]
   1cf78:	cmp	r5, r1
   1cf7c:	bge	1cf14 <__assert_fail@plt+0xb768>
   1cf80:	mov	r0, r8
   1cf84:	mov	r1, r7
   1cf88:	mov	r2, r9
   1cf8c:	bl	1dd30 <__assert_fail@plt+0xc584>
   1cf90:	mov	r4, r0
   1cf94:	ldr	r0, [r7, #100]	; 0x64
   1cf98:	cmp	r0, #0
   1cf9c:	beq	1cfb4 <__assert_fail@plt+0xb808>
   1cfa0:	mov	r0, r8
   1cfa4:	mov	r1, r7
   1cfa8:	mov	r2, r4
   1cfac:	bl	1dde0 <__assert_fail@plt+0xc634>
   1cfb0:	mov	r4, r0
   1cfb4:	cmp	r4, #0
   1cfb8:	bne	1d008 <__assert_fail@plt+0xb85c>
   1cfbc:	ldr	r0, [sp, #16]
   1cfc0:	cmp	r0, #0
   1cfc4:	bne	1d098 <__assert_fail@plt+0xb8ec>
   1cfc8:	ldr	r0, [sp, #8]
   1cfcc:	clz	r0, r0
   1cfd0:	lsr	r0, r0, #5
   1cfd4:	ldr	r1, [sp, #12]
   1cfd8:	orr	r0, r0, r1
   1cfdc:	cmp	r0, #1
   1cfe0:	bne	1d074 <__assert_fail@plt+0xb8c8>
   1cfe4:	ldr	r0, [r7, #100]	; 0x64
   1cfe8:	cmp	r0, #0
   1cfec:	beq	1d074 <__assert_fail@plt+0xb8c8>
   1cff0:	mov	r0, r8
   1cff4:	mov	r1, r7
   1cff8:	bl	1df2c <__assert_fail@plt+0xc780>
   1cffc:	mov	r4, r0
   1d000:	cmp	r0, #0
   1d004:	beq	1d074 <__assert_fail@plt+0xb8c8>
   1d008:	tst	sl, #1
   1d00c:	bne	1cf3c <__assert_fail@plt+0xb790>
   1d010:	mov	sl, #0
   1d014:	ldrb	r0, [r4, #52]	; 0x34
   1d018:	tst	r0, #16
   1d01c:	beq	1d064 <__assert_fail@plt+0xb8b8>
   1d020:	sxtb	r0, r0
   1d024:	cmn	r0, #1
   1d028:	bgt	1d044 <__assert_fail@plt+0xb898>
   1d02c:	ldr	r2, [r7, #40]	; 0x28
   1d030:	mov	r0, r7
   1d034:	mov	r1, r4
   1d038:	bl	1d154 <__assert_fail@plt+0xb9a8>
   1d03c:	cmp	r0, #0
   1d040:	beq	1d064 <__assert_fail@plt+0xb8b8>
   1d044:	ldr	r6, [r7, #40]	; 0x28
   1d048:	ldr	r0, [sp, #12]
   1d04c:	cmp	r0, #0
   1d050:	beq	1d08c <__assert_fail@plt+0xb8e0>
   1d054:	mov	r0, #0
   1d058:	str	r0, [sp, #4]
   1d05c:	mov	r0, #1
   1d060:	str	r0, [sp, #8]
   1d064:	ldr	r0, [r7, #40]	; 0x28
   1d068:	ldr	r1, [r7, #56]	; 0x38
   1d06c:	cmp	r1, r0
   1d070:	bgt	1cf60 <__assert_fail@plt+0xb7b4>
   1d074:	ldr	r2, [sp, #4]
   1d078:	cmp	r2, #0
   1d07c:	ldrne	r0, [r2]
   1d080:	ldrne	r1, [sp]
   1d084:	addne	r0, r0, r1
   1d088:	strne	r0, [r2]
   1d08c:	mov	r0, r6
   1d090:	sub	sp, fp, #28
   1d094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d098:	mvn	r6, #1
   1d09c:	b	1d08c <__assert_fail@plt+0xb8e0>
   1d0a0:	sxtb	r0, r0
   1d0a4:	cmn	r0, #1
   1d0a8:	ble	1d118 <__assert_fail@plt+0xb96c>
   1d0ac:	mov	r0, #1
   1d0b0:	str	r0, [sp, #8]
   1d0b4:	ldr	r0, [sp, #12]
   1d0b8:	cmp	r0, #0
   1d0bc:	mov	r6, r8
   1d0c0:	bne	1cec8 <__assert_fail@plt+0xb71c>
   1d0c4:	b	1d14c <__assert_fail@plt+0xb9a0>
   1d0c8:	add	r5, r4, #4
   1d0cc:	mov	sl, #0
   1d0d0:	mov	r0, r7
   1d0d4:	mov	r1, r5
   1d0d8:	mov	r2, #0
   1d0dc:	bl	1d8d8 <__assert_fail@plt+0xc12c>
   1d0e0:	str	r0, [sp, #16]
   1d0e4:	cmp	r0, #0
   1d0e8:	bne	1d110 <__assert_fail@plt+0xb964>
   1d0ec:	ldrb	r0, [r4, #52]	; 0x34
   1d0f0:	tst	r0, #64	; 0x40
   1d0f4:	beq	1ceb0 <__assert_fail@plt+0xb704>
   1d0f8:	mov	r0, r7
   1d0fc:	mov	r1, r5
   1d100:	bl	1d964 <__assert_fail@plt+0xc1b8>
   1d104:	str	r0, [sp, #16]
   1d108:	cmp	r0, #0
   1d10c:	beq	1ceb0 <__assert_fail@plt+0xb704>
   1d110:	mov	r6, r0
   1d114:	b	1d08c <__assert_fail@plt+0xb8e0>
   1d118:	mov	r0, r7
   1d11c:	mov	r1, r4
   1d120:	mov	r2, r8
   1d124:	bl	1d154 <__assert_fail@plt+0xb9a8>
   1d128:	cmp	r0, #0
   1d12c:	mov	r6, r8
   1d130:	mvneq	r6, #0
   1d134:	movwne	r0, #1
   1d138:	str	r0, [sp, #8]
   1d13c:	beq	1cec8 <__assert_fail@plt+0xb71c>
   1d140:	ldr	r0, [sp, #12]
   1d144:	cmp	r0, #0
   1d148:	bne	1cec8 <__assert_fail@plt+0xb71c>
   1d14c:	mov	r6, r8
   1d150:	b	1d08c <__assert_fail@plt+0xb8e0>
   1d154:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d158:	add	fp, sp, #24
   1d15c:	mov	r3, r2
   1d160:	mov	r8, r1
   1d164:	mov	r6, r0
   1d168:	ldr	r2, [r0, #88]	; 0x58
   1d16c:	mov	r1, r3
   1d170:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1d174:	mov	r9, r0
   1d178:	ldr	r0, [r8, #8]
   1d17c:	cmp	r0, #1
   1d180:	blt	1d1c0 <__assert_fail@plt+0xba14>
   1d184:	ldr	r4, [r8, #12]
   1d188:	ldr	r6, [r6, #84]	; 0x54
   1d18c:	mov	r5, #0
   1d190:	ldr	r7, [r4, r5, lsl #2]
   1d194:	mov	r0, r6
   1d198:	mov	r1, r7
   1d19c:	mov	r2, r9
   1d1a0:	bl	205fc <__assert_fail@plt+0xee50>
   1d1a4:	cmp	r0, #0
   1d1a8:	movne	r0, r7
   1d1ac:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d1b0:	add	r5, r5, #1
   1d1b4:	ldr	r0, [r8, #8]
   1d1b8:	cmp	r5, r0
   1d1bc:	blt	1d190 <__assert_fail@plt+0xb9e4>
   1d1c0:	mov	r7, #0
   1d1c4:	mov	r0, r7
   1d1c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d1cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1d0:	add	fp, sp, #28
   1d1d4:	sub	sp, sp, #44	; 0x2c
   1d1d8:	ldr	r7, [r0, #92]	; 0x5c
   1d1dc:	cmn	r7, #-1073741822	; 0xc0000002
   1d1e0:	bhi	1d3dc <__assert_fail@plt+0xbc30>
   1d1e4:	ldr	r5, [r0, #84]	; 0x54
   1d1e8:	str	r0, [sp, #12]
   1d1ec:	ldr	sl, [r0, #96]	; 0x60
   1d1f0:	mov	r0, #4
   1d1f4:	add	r6, r0, r7, lsl #2
   1d1f8:	mov	r0, r6
   1d1fc:	bl	22a6c <__assert_fail@plt+0x112c0>
   1d200:	mov	r4, #12
   1d204:	cmp	r0, #0
   1d208:	beq	1d3ac <__assert_fail@plt+0xbc00>
   1d20c:	mov	r9, r0
   1d210:	ldr	r0, [r5, #76]	; 0x4c
   1d214:	cmp	r0, #0
   1d218:	beq	1d240 <__assert_fail@plt+0xba94>
   1d21c:	mov	r0, r6
   1d220:	bl	22a6c <__assert_fail@plt+0x112c0>
   1d224:	cmp	r0, #0
   1d228:	beq	1d3b0 <__assert_fail@plt+0xbc04>
   1d22c:	mov	r8, r0
   1d230:	str	r5, [sp, #8]
   1d234:	add	r4, sp, #16
   1d238:	mov	r5, sl
   1d23c:	b	1d2a8 <__assert_fail@plt+0xbafc>
   1d240:	str	r7, [sp]
   1d244:	add	r4, sp, #16
   1d248:	mov	r8, #0
   1d24c:	mov	r0, r4
   1d250:	mov	r1, r9
   1d254:	mov	r2, #0
   1d258:	mov	r3, sl
   1d25c:	bl	20670 <__assert_fail@plt+0xeec4>
   1d260:	ldr	r0, [sp, #12]
   1d264:	mov	r1, r4
   1d268:	bl	20690 <__assert_fail@plt+0xeee4>
   1d26c:	mov	r4, r0
   1d270:	ldr	r0, [sp, #40]	; 0x28
   1d274:	bl	1312c <__assert_fail@plt+0x1980>
   1d278:	cmp	r4, #0
   1d27c:	bne	1d3b4 <__assert_fail@plt+0xbc08>
   1d280:	ldr	r0, [r9]
   1d284:	cmp	r0, #0
   1d288:	bne	1d390 <__assert_fail@plt+0xbbe4>
   1d28c:	mov	r4, #1
   1d290:	b	1d3b4 <__assert_fail@plt+0xbc08>
   1d294:	mov	r0, sl
   1d298:	mov	r2, r7
   1d29c:	bl	1d154 <__assert_fail@plt+0xb9a8>
   1d2a0:	mov	r4, r5
   1d2a4:	mov	r5, r0
   1d2a8:	add	sl, r7, #1
   1d2ac:	lsl	r2, sl, #2
   1d2b0:	mov	r0, r8
   1d2b4:	mov	r1, #0
   1d2b8:	bl	116b0 <memset@plt>
   1d2bc:	str	r7, [sp]
   1d2c0:	mov	r0, r4
   1d2c4:	mov	r1, r9
   1d2c8:	mov	r6, r8
   1d2cc:	mov	r2, r8
   1d2d0:	mov	r8, r5
   1d2d4:	mov	r3, r5
   1d2d8:	bl	20670 <__assert_fail@plt+0xeec4>
   1d2dc:	ldr	r0, [sp, #12]
   1d2e0:	mov	r5, r4
   1d2e4:	mov	r1, r4
   1d2e8:	bl	20690 <__assert_fail@plt+0xeee4>
   1d2ec:	mov	r4, r0
   1d2f0:	ldr	r0, [sp, #40]	; 0x28
   1d2f4:	bl	1312c <__assert_fail@plt+0x1980>
   1d2f8:	cmp	r4, #0
   1d2fc:	bne	1d3e4 <__assert_fail@plt+0xbc38>
   1d300:	mov	r1, r9
   1d304:	ldr	r0, [r9]
   1d308:	cmp	r0, #0
   1d30c:	ldreq	r0, [r6]
   1d310:	cmpeq	r0, #0
   1d314:	bne	1d364 <__assert_fail@plt+0xbbb8>
   1d318:	mov	r4, #1
   1d31c:	cmp	r7, #1
   1d320:	blt	1d3d0 <__assert_fail@plt+0xbc24>
   1d324:	sub	r7, r7, #1
   1d328:	ldr	sl, [sp, #12]
   1d32c:	ldr	r0, [sl, #100]	; 0x64
   1d330:	mov	r9, r1
   1d334:	mov	r8, r6
   1d338:	ldr	r1, [r0, r7, lsl #2]
   1d33c:	cmp	r1, #0
   1d340:	ldrbne	r2, [r1, #52]	; 0x34
   1d344:	tstne	r2, #16
   1d348:	bne	1d294 <__assert_fail@plt+0xbae8>
   1d34c:	sub	r1, r7, #1
   1d350:	add	r2, r7, #1
   1d354:	cmp	r2, #2
   1d358:	mov	r7, r1
   1d35c:	bge	1d338 <__assert_fail@plt+0xbb8c>
   1d360:	b	1d3b4 <__assert_fail@plt+0xbc08>
   1d364:	ldr	r0, [sp, #8]
   1d368:	mov	r9, r1
   1d36c:	mov	r2, r6
   1d370:	mov	r3, sl
   1d374:	bl	2079c <__assert_fail@plt+0xeff0>
   1d378:	mov	r4, r0
   1d37c:	mov	r0, r6
   1d380:	bl	1312c <__assert_fail@plt+0x1980>
   1d384:	cmp	r4, #0
   1d388:	mov	sl, r8
   1d38c:	bne	1d3b0 <__assert_fail@plt+0xbc04>
   1d390:	ldr	r4, [sp, #12]
   1d394:	ldr	r0, [r4, #100]	; 0x64
   1d398:	bl	1312c <__assert_fail@plt+0x1980>
   1d39c:	str	r7, [r4, #92]	; 0x5c
   1d3a0:	str	sl, [r4, #96]	; 0x60
   1d3a4:	str	r9, [r4, #100]	; 0x64
   1d3a8:	mov	r4, #0
   1d3ac:	mov	r9, #0
   1d3b0:	mov	r8, #0
   1d3b4:	mov	r0, r9
   1d3b8:	bl	1312c <__assert_fail@plt+0x1980>
   1d3bc:	mov	r0, r8
   1d3c0:	bl	1312c <__assert_fail@plt+0x1980>
   1d3c4:	mov	r0, r4
   1d3c8:	sub	sp, fp, #28
   1d3cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3d0:	mov	r9, r1
   1d3d4:	mov	r8, r6
   1d3d8:	b	1d3b4 <__assert_fail@plt+0xbc08>
   1d3dc:	mov	r4, #12
   1d3e0:	b	1d3c4 <__assert_fail@plt+0xbc18>
   1d3e4:	mov	r8, r6
   1d3e8:	b	1d3b4 <__assert_fail@plt+0xbc08>
   1d3ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d3f0:	add	fp, sp, #24
   1d3f4:	mov	r8, r0
   1d3f8:	ldr	r0, [r0, #124]	; 0x7c
   1d3fc:	cmp	r0, #1
   1d400:	blt	1d484 <__assert_fail@plt+0xbcd8>
   1d404:	mov	r7, #0
   1d408:	ldr	r0, [r8, #132]	; 0x84
   1d40c:	ldr	r5, [r0, r7, lsl #2]
   1d410:	ldr	r0, [r5, #16]
   1d414:	cmp	r0, #1
   1d418:	blt	1d448 <__assert_fail@plt+0xbc9c>
   1d41c:	mov	r4, #0
   1d420:	ldr	r0, [r5, #20]
   1d424:	ldr	r6, [r0, r4, lsl #2]
   1d428:	ldr	r0, [r6, #16]
   1d42c:	bl	1312c <__assert_fail@plt+0x1980>
   1d430:	mov	r0, r6
   1d434:	bl	1312c <__assert_fail@plt+0x1980>
   1d438:	add	r4, r4, #1
   1d43c:	ldr	r0, [r5, #16]
   1d440:	cmp	r4, r0
   1d444:	blt	1d420 <__assert_fail@plt+0xbc74>
   1d448:	ldr	r0, [r5, #20]
   1d44c:	bl	1312c <__assert_fail@plt+0x1980>
   1d450:	ldr	r0, [r5, #8]
   1d454:	cmp	r0, #0
   1d458:	beq	1d46c <__assert_fail@plt+0xbcc0>
   1d45c:	ldr	r0, [r0, #8]
   1d460:	bl	1312c <__assert_fail@plt+0x1980>
   1d464:	ldr	r0, [r5, #8]
   1d468:	bl	1312c <__assert_fail@plt+0x1980>
   1d46c:	mov	r0, r5
   1d470:	bl	1312c <__assert_fail@plt+0x1980>
   1d474:	add	r7, r7, #1
   1d478:	ldr	r0, [r8, #124]	; 0x7c
   1d47c:	cmp	r7, r0
   1d480:	blt	1d408 <__assert_fail@plt+0xbc5c>
   1d484:	mov	r0, #0
   1d488:	str	r0, [r8, #108]	; 0x6c
   1d48c:	str	r0, [r8, #124]	; 0x7c
   1d490:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d498:	add	fp, sp, #28
   1d49c:	sub	sp, sp, #204	; 0xcc
   1d4a0:	mov	r5, r3
   1d4a4:	mov	r6, r2
   1d4a8:	mov	r8, r1
   1d4ac:	ldr	r4, [r0]
   1d4b0:	movw	r0, #17168	; 0x4310
   1d4b4:	movt	r0, #2
   1d4b8:	vldr	d16, [r0]
   1d4bc:	ldr	r0, [r0, #8]
   1d4c0:	str	r0, [fp, #-56]	; 0xffffffc8
   1d4c4:	vstr	d16, [fp, #-64]	; 0xffffffc0
   1d4c8:	add	r0, sp, #28
   1d4cc:	bl	21838 <__assert_fail@plt+0x1008c>
   1d4d0:	mov	r7, #0
   1d4d4:	ldr	r0, [fp, #8]
   1d4d8:	cmp	r0, #0
   1d4dc:	mov	r9, #0
   1d4e0:	beq	1d504 <__assert_fail@plt+0xbd58>
   1d4e4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d4e8:	add	r0, r0, r0, lsl #1
   1d4ec:	lsl	r0, r0, #3
   1d4f0:	bl	22a6c <__assert_fail@plt+0x112c0>
   1d4f4:	str	r0, [fp, #-56]	; 0xffffffc8
   1d4f8:	cmp	r0, #0
   1d4fc:	beq	1d708 <__assert_fail@plt+0xbf5c>
   1d500:	sub	r9, fp, #64	; 0x40
   1d504:	ldr	sl, [r4, #72]	; 0x48
   1d508:	str	r7, [fp, #-44]	; 0xffffffd4
   1d50c:	str	r7, [fp, #-48]	; 0xffffffd0
   1d510:	str	r7, [fp, #-40]	; 0xffffffd8
   1d514:	add	r0, sp, #28
   1d518:	mov	r1, r6
   1d51c:	bl	21850 <__assert_fail@plt+0x100a4>
   1d520:	cmp	r0, #0
   1d524:	beq	1d6f8 <__assert_fail@plt+0xbf4c>
   1d528:	str	r4, [sp, #20]
   1d52c:	str	r8, [sp, #24]
   1d530:	add	r0, sp, #28
   1d534:	bl	21928 <__assert_fail@plt+0x1017c>
   1d538:	mov	r4, r0
   1d53c:	lsl	r2, r6, #3
   1d540:	mov	r1, r5
   1d544:	bl	114d0 <memcpy@plt>
   1d548:	ldr	r8, [r5]
   1d54c:	ldr	r0, [r5, #4]
   1d550:	str	r8, [fp, #-32]	; 0xffffffe0
   1d554:	cmp	r8, r0
   1d558:	bgt	1d6cc <__assert_fail@plt+0xbf20>
   1d55c:	clz	r0, r6
   1d560:	lsr	r0, r0, #5
   1d564:	clz	r1, r9
   1d568:	lsr	r1, r1, #5
   1d56c:	orr	r0, r1, r0
   1d570:	str	r0, [sp, #16]
   1d574:	ldr	r7, [sp, #24]
   1d578:	str	r8, [sp]
   1d57c:	str	r6, [sp, #4]
   1d580:	ldr	r0, [sp, #20]
   1d584:	mov	r1, r5
   1d588:	mov	r2, r4
   1d58c:	mov	r3, sl
   1d590:	bl	21930 <__assert_fail@plt+0x10184>
   1d594:	ldr	r0, [r5, #4]
   1d598:	cmp	r8, r0
   1d59c:	ldreq	r0, [r7, #96]	; 0x60
   1d5a0:	cmpeq	sl, r0
   1d5a4:	beq	1d5c4 <__assert_fail@plt+0xbe18>
   1d5a8:	cmp	r9, #0
   1d5ac:	beq	1d62c <__assert_fail@plt+0xbe80>
   1d5b0:	sub	r0, fp, #48	; 0x30
   1d5b4:	mov	r1, sl
   1d5b8:	bl	1bfdc <__assert_fail@plt+0xa830>
   1d5bc:	cmp	r0, #0
   1d5c0:	beq	1d62c <__assert_fail@plt+0xbe80>
   1d5c4:	ldr	r0, [sp, #16]
   1d5c8:	cmp	r0, #0
   1d5cc:	bne	1d6cc <__assert_fail@plt+0xbf20>
   1d5d0:	mov	r0, #0
   1d5d4:	ldr	r1, [r5, r0, lsl #3]
   1d5d8:	cmp	r1, #0
   1d5dc:	blt	1d5f0 <__assert_fail@plt+0xbe44>
   1d5e0:	add	r1, r5, r0, lsl #3
   1d5e4:	ldr	r1, [r1, #4]
   1d5e8:	cmn	r1, #1
   1d5ec:	beq	1d600 <__assert_fail@plt+0xbe54>
   1d5f0:	add	r0, r0, #1
   1d5f4:	cmp	r0, r6
   1d5f8:	bcc	1d5d4 <__assert_fail@plt+0xbe28>
   1d5fc:	b	1d6cc <__assert_fail@plt+0xbf20>
   1d600:	str	r4, [sp]
   1d604:	sub	r0, fp, #48	; 0x30
   1d608:	str	r0, [sp, #4]
   1d60c:	mov	r0, r9
   1d610:	sub	r1, fp, #32
   1d614:	mov	r2, r6
   1d618:	mov	r3, r5
   1d61c:	bl	219e4 <__assert_fail@plt+0x10238>
   1d620:	mov	sl, r0
   1d624:	cmn	r0, #1
   1d628:	ble	1d6cc <__assert_fail@plt+0xbf20>
   1d62c:	sub	r0, fp, #32
   1d630:	stm	sp, {r0, sl}
   1d634:	sub	r0, fp, #48	; 0x30
   1d638:	str	r0, [sp, #8]
   1d63c:	str	r9, [sp, #12]
   1d640:	mov	r0, r7
   1d644:	mov	r1, r6
   1d648:	mov	r2, r5
   1d64c:	mov	r3, r4
   1d650:	bl	21a9c <__assert_fail@plt+0x102f0>
   1d654:	mov	sl, r0
   1d658:	cmn	r0, #1
   1d65c:	ble	1d674 <__assert_fail@plt+0xbec8>
   1d660:	ldr	r0, [r5, #4]
   1d664:	ldr	r8, [fp, #-32]	; 0xffffffe0
   1d668:	cmp	r8, r0
   1d66c:	ble	1d578 <__assert_fail@plt+0xbdcc>
   1d670:	b	1d6cc <__assert_fail@plt+0xbf20>
   1d674:	cmn	sl, #2
   1d678:	beq	1d6f0 <__assert_fail@plt+0xbf44>
   1d67c:	str	r4, [sp]
   1d680:	sub	r0, fp, #48	; 0x30
   1d684:	str	r0, [sp, #4]
   1d688:	mov	r0, r9
   1d68c:	sub	r1, fp, #32
   1d690:	mov	r2, r6
   1d694:	mov	r3, r5
   1d698:	bl	219e4 <__assert_fail@plt+0x10238>
   1d69c:	mov	sl, r0
   1d6a0:	cmn	r0, #1
   1d6a4:	bgt	1d660 <__assert_fail@plt+0xbeb4>
   1d6a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d6ac:	bl	1312c <__assert_fail@plt+0x1980>
   1d6b0:	add	r0, sp, #28
   1d6b4:	bl	218a4 <__assert_fail@plt+0x100f8>
   1d6b8:	mov	r0, r9
   1d6bc:	bl	218c0 <__assert_fail@plt+0x10114>
   1d6c0:	mov	r0, #1
   1d6c4:	sub	sp, fp, #28
   1d6c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d6d0:	bl	1312c <__assert_fail@plt+0x1980>
   1d6d4:	add	r0, sp, #28
   1d6d8:	bl	218a4 <__assert_fail@plt+0x100f8>
   1d6dc:	mov	r0, r9
   1d6e0:	bl	218c0 <__assert_fail@plt+0x10114>
   1d6e4:	mov	r0, #0
   1d6e8:	sub	sp, fp, #28
   1d6ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d6f4:	bl	1312c <__assert_fail@plt+0x1980>
   1d6f8:	add	r0, sp, #28
   1d6fc:	bl	218a4 <__assert_fail@plt+0x100f8>
   1d700:	mov	r0, r9
   1d704:	bl	218c0 <__assert_fail@plt+0x10114>
   1d708:	mov	r0, #12
   1d70c:	sub	sp, fp, #28
   1d710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d714:	push	{r4, sl, fp, lr}
   1d718:	add	fp, sp, #8
   1d71c:	mov	r4, r0
   1d720:	bl	1d3ec <__assert_fail@plt+0xbc40>
   1d724:	ldr	r0, [r4, #132]	; 0x84
   1d728:	bl	1312c <__assert_fail@plt+0x1980>
   1d72c:	ldr	r0, [r4, #116]	; 0x74
   1d730:	pop	{r4, sl, fp, lr}
   1d734:	b	1312c <__assert_fail@plt+0x1980>
   1d738:	push	{r4, r5, fp, lr}
   1d73c:	add	fp, sp, #8
   1d740:	mov	r4, r0
   1d744:	cmn	r1, #1
   1d748:	ldrle	r0, [r4, #60]	; 0x3c
   1d74c:	pople	{r4, r5, fp, pc}
   1d750:	ldr	r0, [r4, #48]	; 0x30
   1d754:	cmp	r0, r1
   1d758:	beq	1d7f8 <__assert_fail@plt+0xc04c>
   1d75c:	ldr	r0, [r4, #80]	; 0x50
   1d760:	cmp	r0, #2
   1d764:	blt	1d7b8 <__assert_fail@plt+0xc00c>
   1d768:	ldr	r0, [r4, #8]
   1d76c:	b	1d784 <__assert_fail@plt+0xbfd8>
   1d770:	sub	r2, r1, #1
   1d774:	cmp	r1, #0
   1d778:	mov	r1, r2
   1d77c:	ldrle	r0, [r4, #60]	; 0x3c
   1d780:	pople	{r4, r5, fp, pc}
   1d784:	ldr	r5, [r0, r1, lsl #2]
   1d788:	cmn	r5, #1
   1d78c:	beq	1d770 <__assert_fail@plt+0xbfc4>
   1d790:	ldrb	r0, [r4, #78]	; 0x4e
   1d794:	cmp	r0, #0
   1d798:	beq	1d7dc <__assert_fail@plt+0xc030>
   1d79c:	mov	r0, r5
   1d7a0:	bl	11698 <iswalnum@plt>
   1d7a4:	mov	r1, r0
   1d7a8:	mov	r0, #1
   1d7ac:	cmp	r5, #95	; 0x5f
   1d7b0:	bne	1d7d4 <__assert_fail@plt+0xc028>
   1d7b4:	b	1d7f4 <__assert_fail@plt+0xc048>
   1d7b8:	ldr	r2, [r4, #4]
   1d7bc:	ldr	r0, [r4, #68]	; 0x44
   1d7c0:	ldrb	r5, [r2, r1]
   1d7c4:	mov	r1, r5
   1d7c8:	bl	1d8b0 <__assert_fail@plt+0xc104>
   1d7cc:	mov	r1, r0
   1d7d0:	mov	r0, #1
   1d7d4:	cmp	r1, #0
   1d7d8:	bne	1d7f4 <__assert_fail@plt+0xc048>
   1d7dc:	mov	r0, #0
   1d7e0:	cmp	r5, #10
   1d7e4:	popne	{r4, r5, fp, pc}
   1d7e8:	ldrb	r0, [r4, #77]	; 0x4d
   1d7ec:	cmp	r0, #0
   1d7f0:	movwne	r0, #2
   1d7f4:	pop	{r4, r5, fp, pc}
   1d7f8:	and	r0, r2, #2
   1d7fc:	eor	r0, r0, #10
   1d800:	pop	{r4, r5, fp, pc}
   1d804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d808:	add	fp, sp, #28
   1d80c:	sub	sp, sp, #12
   1d810:	str	r2, [sp, #4]
   1d814:	mov	sl, r1
   1d818:	mov	r7, r0
   1d81c:	ldr	r0, [r0, #24]
   1d820:	ldr	r1, [r7, #32]
   1d824:	add	r5, r1, r0
   1d828:	mvn	r1, #0
   1d82c:	cmp	r5, sl
   1d830:	bge	1d89c <__assert_fail@plt+0xc0f0>
   1d834:	add	r4, r7, #16
   1d838:	b	1d85c <__assert_fail@plt+0xc0b0>
   1d83c:	mov	r1, #0
   1d840:	cmp	r6, #0
   1d844:	cmpne	r0, #0
   1d848:	ldrne	r0, [r7]
   1d84c:	ldrbne	r1, [r0, r5]
   1d850:	stm	r4, {r8, r9}
   1d854:	mov	r0, #1
   1d858:	b	1d890 <__assert_fail@plt+0xc0e4>
   1d85c:	ldr	r0, [r7]
   1d860:	ldr	r2, [r7, #44]	; 0x2c
   1d864:	add	r1, r0, r5
   1d868:	sub	r6, r2, r5
   1d86c:	ldm	r4, {r8, r9}
   1d870:	add	r0, sp, #8
   1d874:	mov	r2, r6
   1d878:	mov	r3, r4
   1d87c:	bl	23234 <__assert_fail@plt+0x11a88>
   1d880:	sub	r1, r0, #1
   1d884:	cmn	r1, #3
   1d888:	bcs	1d83c <__assert_fail@plt+0xc090>
   1d88c:	ldr	r1, [sp, #8]
   1d890:	add	r5, r0, r5
   1d894:	cmp	r5, sl
   1d898:	blt	1d85c <__assert_fail@plt+0xc0b0>
   1d89c:	ldr	r0, [sp, #4]
   1d8a0:	str	r1, [r0]
   1d8a4:	mov	r0, r5
   1d8a8:	sub	sp, fp, #28
   1d8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8b0:	asr	r2, r1, #31
   1d8b4:	add	r2, r1, r2, lsr #27
   1d8b8:	asr	r2, r2, #5
   1d8bc:	ldr	r0, [r0, r2, lsl #2]
   1d8c0:	and	r1, r1, #31
   1d8c4:	mov	r2, #1
   1d8c8:	and	r0, r0, r2, lsl r1
   1d8cc:	cmp	r0, #0
   1d8d0:	movwne	r0, #1
   1d8d4:	bx	lr
   1d8d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d8dc:	add	fp, sp, #24
   1d8e0:	mov	r6, r0
   1d8e4:	ldr	r0, [r1, #4]
   1d8e8:	cmp	r0, #1
   1d8ec:	blt	1d95c <__assert_fail@plt+0xc1b0>
   1d8f0:	mov	r8, r2
   1d8f4:	mov	r5, r1
   1d8f8:	ldr	r7, [r6, #84]	; 0x54
   1d8fc:	mov	r4, #0
   1d900:	mov	r9, #1
   1d904:	ldr	r0, [r5, #8]
   1d908:	ldr	r1, [r0, r4, lsl #2]
   1d90c:	ldr	r0, [r7]
   1d910:	add	r2, r0, r1, lsl #3
   1d914:	ldrb	r2, [r2, #4]
   1d918:	cmp	r2, #8
   1d91c:	bne	1d94c <__assert_fail@plt+0xc1a0>
   1d920:	ldr	r0, [r0, r1, lsl #3]
   1d924:	cmp	r0, #31
   1d928:	bgt	1d94c <__assert_fail@plt+0xc1a0>
   1d92c:	ldr	r2, [r7, #80]	; 0x50
   1d930:	tst	r2, r9, lsl r0
   1d934:	beq	1d94c <__assert_fail@plt+0xc1a0>
   1d938:	mov	r0, r6
   1d93c:	mov	r2, r8
   1d940:	bl	1dfa0 <__assert_fail@plt+0xc7f4>
   1d944:	cmp	r0, #0
   1d948:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d94c:	add	r4, r4, #1
   1d950:	ldr	r0, [r5, #4]
   1d954:	cmp	r4, r0
   1d958:	blt	1d904 <__assert_fail@plt+0xc158>
   1d95c:	mov	r0, #0
   1d960:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d968:	add	fp, sp, #28
   1d96c:	sub	sp, sp, #52	; 0x34
   1d970:	mov	r5, r0
   1d974:	ldr	r0, [r1, #4]
   1d978:	cmp	r0, #1
   1d97c:	blt	1dc3c <__assert_fail@plt+0xc490>
   1d980:	mov	r8, r1
   1d984:	ldr	r9, [r5, #84]	; 0x54
   1d988:	ldr	r0, [r5, #40]	; 0x28
   1d98c:	str	r0, [sp, #32]
   1d990:	mov	sl, #0
   1d994:	str	r1, [sp, #4]
   1d998:	str	r9, [sp, #16]
   1d99c:	ldr	r0, [r8, #8]
   1d9a0:	ldr	r4, [r0, sl, lsl #2]
   1d9a4:	ldr	r0, [r9]
   1d9a8:	add	r0, r0, r4, lsl #3
   1d9ac:	ldr	r6, [r0, #4]
   1d9b0:	uxtb	r0, r6
   1d9b4:	cmp	r0, #4
   1d9b8:	bne	1dc2c <__assert_fail@plt+0xc480>
   1d9bc:	movw	r0, #65280	; 0xff00
   1d9c0:	movt	r0, #3
   1d9c4:	tst	r6, r0
   1d9c8:	beq	1da1c <__assert_fail@plt+0xc270>
   1d9cc:	ldr	r2, [r5, #88]	; 0x58
   1d9d0:	mov	r0, r5
   1d9d4:	ldr	r1, [sp, #32]
   1d9d8:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1d9dc:	and	r1, r0, #1
   1d9e0:	tst	r6, #1024	; 0x400
   1d9e4:	beq	1d9f0 <__assert_fail@plt+0xc244>
   1d9e8:	cmp	r1, #0
   1d9ec:	beq	1dc2c <__assert_fail@plt+0xc480>
   1d9f0:	tst	r6, #2048	; 0x800
   1d9f4:	cmpne	r1, #0
   1d9f8:	bne	1dc2c <__assert_fail@plt+0xc480>
   1d9fc:	tst	r6, #8192	; 0x2000
   1da00:	beq	1da0c <__assert_fail@plt+0xc260>
   1da04:	ands	r1, r0, #2
   1da08:	beq	1dc2c <__assert_fail@plt+0xc480>
   1da0c:	tst	r6, #32768	; 0x8000
   1da10:	beq	1da1c <__assert_fail@plt+0xc270>
   1da14:	ands	r0, r0, #8
   1da18:	beq	1dc2c <__assert_fail@plt+0xc480>
   1da1c:	ldr	r6, [r5, #108]	; 0x6c
   1da20:	mov	r0, r5
   1da24:	mov	r1, r4
   1da28:	ldr	r2, [sp, #32]
   1da2c:	bl	1e02c <__assert_fail@plt+0xc880>
   1da30:	str	r0, [fp, #-32]	; 0xffffffe0
   1da34:	cmp	r0, #0
   1da38:	bne	1dc44 <__assert_fail@plt+0xc498>
   1da3c:	ldr	r0, [r5, #108]	; 0x6c
   1da40:	cmp	r6, r0
   1da44:	bge	1dc2c <__assert_fail@plt+0xc480>
   1da48:	add	r0, r6, r6, lsl #1
   1da4c:	lsl	r7, r0, #3
   1da50:	str	r4, [sp, #8]
   1da54:	ldr	r0, [r5, #116]	; 0x74
   1da58:	ldr	r1, [r0, r7]
   1da5c:	cmp	r1, r4
   1da60:	bne	1dc18 <__assert_fail@plt+0xc46c>
   1da64:	add	r0, r0, r7
   1da68:	ldr	r1, [r0, #4]
   1da6c:	ldr	r2, [sp, #32]
   1da70:	cmp	r1, r2
   1da74:	bne	1dc18 <__assert_fail@plt+0xc46c>
   1da78:	ldr	r2, [r0, #8]
   1da7c:	ldr	r3, [r0, #12]
   1da80:	ldr	r0, [r9, #24]
   1da84:	str	r0, [sp, #28]
   1da88:	cmp	r3, r2
   1da8c:	bne	1daa4 <__assert_fail@plt+0xc2f8>
   1da90:	ldr	r0, [r9, #20]
   1da94:	add	r1, r4, r4, lsl #1
   1da98:	add	r0, r0, r1, lsl #2
   1da9c:	ldr	r0, [r0, #8]
   1daa0:	b	1daac <__assert_fail@plt+0xc300>
   1daa4:	ldr	r0, [r9, #12]
   1daa8:	add	r0, r0, r4, lsl #2
   1daac:	ldr	r0, [r0]
   1dab0:	add	r9, r0, r0, lsl #1
   1dab4:	ldr	r4, [sp, #32]
   1dab8:	str	r3, [sp, #20]
   1dabc:	add	r0, r3, r4
   1dac0:	str	r2, [sp, #24]
   1dac4:	sub	r8, r0, r2
   1dac8:	sub	r1, r8, #1
   1dacc:	ldr	r2, [r5, #88]	; 0x58
   1dad0:	mov	r0, r5
   1dad4:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1dad8:	mov	r3, r0
   1dadc:	ldr	r0, [r5, #100]	; 0x64
   1dae0:	ldr	r1, [r0, r4, lsl #2]
   1dae4:	ldr	r0, [r0, r8, lsl #2]
   1dae8:	cmp	r1, #0
   1daec:	ldrne	r1, [r1, #8]
   1daf0:	moveq	r1, #0
   1daf4:	str	r1, [sp, #12]
   1daf8:	add	r4, sp, #36	; 0x24
   1dafc:	ldr	r1, [sp, #28]
   1db00:	add	r2, r1, r9, lsl #2
   1db04:	cmp	r0, #0
   1db08:	str	r2, [sp, #28]
   1db0c:	beq	1db7c <__assert_fail@plt+0xc3d0>
   1db10:	mov	r9, r3
   1db14:	ldr	r1, [r0, #40]	; 0x28
   1db18:	mov	r0, r4
   1db1c:	bl	1e3dc <__assert_fail@plt+0xcc30>
   1db20:	str	r0, [fp, #-32]	; 0xffffffe0
   1db24:	cmp	r0, #0
   1db28:	ldr	r1, [sp, #16]
   1db2c:	bne	1dc50 <__assert_fail@plt+0xc4a4>
   1db30:	sub	r0, fp, #32
   1db34:	mov	r2, r4
   1db38:	mov	r3, r9
   1db3c:	bl	1c048 <__assert_fail@plt+0xa89c>
   1db40:	ldr	r1, [r5, #100]	; 0x64
   1db44:	str	r0, [r1, r8, lsl #2]
   1db48:	ldr	r0, [sp, #44]	; 0x2c
   1db4c:	bl	1312c <__assert_fail@plt+0x1980>
   1db50:	ldr	r0, [r5, #100]	; 0x64
   1db54:	ldr	r0, [r0, r8, lsl #2]
   1db58:	cmp	r0, #0
   1db5c:	bne	1db6c <__assert_fail@plt+0xc3c0>
   1db60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1db64:	cmp	r0, #0
   1db68:	bne	1dc44 <__assert_fail@plt+0xc498>
   1db6c:	ldr	r8, [sp, #4]
   1db70:	ldr	r4, [sp, #8]
   1db74:	ldr	r9, [sp, #16]
   1db78:	b	1dbb8 <__assert_fail@plt+0xc40c>
   1db7c:	sub	r0, fp, #32
   1db80:	ldr	r9, [sp, #16]
   1db84:	mov	r1, r9
   1db88:	bl	1c048 <__assert_fail@plt+0xa89c>
   1db8c:	ldr	r1, [r5, #100]	; 0x64
   1db90:	str	r0, [r1, r8, lsl #2]
   1db94:	ldr	r0, [r5, #100]	; 0x64
   1db98:	ldr	r0, [r0, r8, lsl #2]
   1db9c:	cmp	r0, #0
   1dba0:	ldr	r8, [sp, #4]
   1dba4:	ldr	r4, [sp, #8]
   1dba8:	bne	1dbb8 <__assert_fail@plt+0xc40c>
   1dbac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1dbb0:	cmp	r0, #0
   1dbb4:	bne	1dc44 <__assert_fail@plt+0xc498>
   1dbb8:	ldr	r0, [sp, #24]
   1dbbc:	ldr	r1, [sp, #20]
   1dbc0:	cmp	r1, r0
   1dbc4:	bne	1dc18 <__assert_fail@plt+0xc46c>
   1dbc8:	ldr	r0, [r5, #100]	; 0x64
   1dbcc:	ldr	r1, [sp, #32]
   1dbd0:	ldr	r0, [r0, r1, lsl #2]
   1dbd4:	ldr	r0, [r0, #8]
   1dbd8:	ldr	r1, [sp, #12]
   1dbdc:	cmp	r0, r1
   1dbe0:	ble	1dc18 <__assert_fail@plt+0xc46c>
   1dbe4:	mov	r0, r5
   1dbe8:	ldr	r1, [sp, #28]
   1dbec:	ldr	r2, [sp, #32]
   1dbf0:	bl	1d8d8 <__assert_fail@plt+0xc12c>
   1dbf4:	str	r0, [fp, #-32]	; 0xffffffe0
   1dbf8:	cmp	r0, #0
   1dbfc:	bne	1dc44 <__assert_fail@plt+0xc498>
   1dc00:	mov	r0, r5
   1dc04:	ldr	r1, [sp, #28]
   1dc08:	bl	1d964 <__assert_fail@plt+0xc1b8>
   1dc0c:	str	r0, [fp, #-32]	; 0xffffffe0
   1dc10:	cmp	r0, #0
   1dc14:	bne	1dc44 <__assert_fail@plt+0xc498>
   1dc18:	add	r7, r7, #24
   1dc1c:	add	r6, r6, #1
   1dc20:	ldr	r0, [r5, #108]	; 0x6c
   1dc24:	cmp	r6, r0
   1dc28:	blt	1da54 <__assert_fail@plt+0xc2a8>
   1dc2c:	ldr	r0, [r8, #4]
   1dc30:	add	sl, sl, #1
   1dc34:	cmp	sl, r0
   1dc38:	blt	1d99c <__assert_fail@plt+0xc1f0>
   1dc3c:	mov	r0, #0
   1dc40:	str	r0, [fp, #-32]	; 0xffffffe0
   1dc44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1dc48:	sub	sp, fp, #28
   1dc4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc50:	ldr	r0, [sp, #44]	; 0x2c
   1dc54:	bl	1312c <__assert_fail@plt+0x1980>
   1dc58:	b	1dc44 <__assert_fail@plt+0xc498>
   1dc5c:	push	{r4, r5, fp, lr}
   1dc60:	add	fp, sp, #8
   1dc64:	mov	r4, r0
   1dc68:	ldr	r0, [r0, #36]	; 0x24
   1dc6c:	mov	r5, #12
   1dc70:	cmn	r0, #-536870910	; 0xe0000002
   1dc74:	bhi	1dd28 <__assert_fail@plt+0xc57c>
   1dc78:	ldr	r2, [r4, #48]	; 0x30
   1dc7c:	cmp	r2, r0, lsl #1
   1dc80:	lslge	r2, r0, #1
   1dc84:	cmp	r2, r1
   1dc88:	movle	r2, r1
   1dc8c:	mov	r0, r4
   1dc90:	mov	r1, r2
   1dc94:	bl	17458 <__assert_fail@plt+0x5cac>
   1dc98:	cmp	r0, #0
   1dc9c:	popne	{r4, r5, fp, pc}
   1dca0:	ldr	r0, [r4, #100]	; 0x64
   1dca4:	cmp	r0, #0
   1dca8:	beq	1dcc8 <__assert_fail@plt+0xc51c>
   1dcac:	ldr	r1, [r4, #36]	; 0x24
   1dcb0:	mov	r2, #4
   1dcb4:	add	r1, r2, r1, lsl #2
   1dcb8:	bl	22a9c <__assert_fail@plt+0x112f0>
   1dcbc:	cmp	r0, #0
   1dcc0:	beq	1dd28 <__assert_fail@plt+0xc57c>
   1dcc4:	str	r0, [r4, #100]	; 0x64
   1dcc8:	ldr	r0, [r4, #80]	; 0x50
   1dccc:	ldrb	r1, [r4, #72]	; 0x48
   1dcd0:	cmp	r1, #0
   1dcd4:	beq	1dcf4 <__assert_fail@plt+0xc548>
   1dcd8:	cmp	r0, #2
   1dcdc:	blt	1dd08 <__assert_fail@plt+0xc55c>
   1dce0:	mov	r0, r4
   1dce4:	bl	174fc <__assert_fail@plt+0x5d50>
   1dce8:	cmp	r0, #0
   1dcec:	popne	{r4, r5, fp, pc}
   1dcf0:	b	1dd24 <__assert_fail@plt+0xc578>
   1dcf4:	cmp	r0, #2
   1dcf8:	blt	1dd14 <__assert_fail@plt+0xc568>
   1dcfc:	mov	r0, r4
   1dd00:	bl	17b30 <__assert_fail@plt+0x6384>
   1dd04:	b	1dd24 <__assert_fail@plt+0xc578>
   1dd08:	mov	r0, r4
   1dd0c:	bl	17ac4 <__assert_fail@plt+0x6318>
   1dd10:	b	1dd24 <__assert_fail@plt+0xc578>
   1dd14:	ldr	r0, [r4, #64]	; 0x40
   1dd18:	cmp	r0, #0
   1dd1c:	movne	r0, r4
   1dd20:	blne	17cc0 <__assert_fail@plt+0x6514>
   1dd24:	mov	r5, #0
   1dd28:	mov	r0, r5
   1dd2c:	pop	{r4, r5, fp, pc}
   1dd30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dd34:	add	fp, sp, #24
   1dd38:	mov	r6, r2
   1dd3c:	mov	r4, r1
   1dd40:	mov	r5, r0
   1dd44:	ldrb	r0, [r2, #52]	; 0x34
   1dd48:	tst	r0, #32
   1dd4c:	bne	1ddc4 <__assert_fail@plt+0xc618>
   1dd50:	ldr	r0, [r4, #4]
   1dd54:	ldr	r1, [r4, #40]	; 0x28
   1dd58:	add	r2, r1, #1
   1dd5c:	str	r2, [r4, #40]	; 0x28
   1dd60:	ldrb	r7, [r0, r1]
   1dd64:	ldr	r0, [r6, #44]	; 0x2c
   1dd68:	cmp	r0, #0
   1dd6c:	ldrne	r0, [r0, r7, lsl #2]
   1dd70:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dd74:	ldr	r8, [r6, #48]	; 0x30
   1dd78:	cmp	r8, #0
   1dd7c:	bne	1dda4 <__assert_fail@plt+0xc5f8>
   1dd80:	ldr	r0, [r4, #84]	; 0x54
   1dd84:	mov	r1, r6
   1dd88:	bl	1fb88 <__assert_fail@plt+0xe3dc>
   1dd8c:	cmp	r0, #0
   1dd90:	bne	1dd64 <__assert_fail@plt+0xc5b8>
   1dd94:	mov	r0, #12
   1dd98:	str	r0, [r5]
   1dd9c:	mov	r0, #0
   1dda0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dda4:	ldr	r0, [r4, #40]	; 0x28
   1dda8:	ldr	r2, [r4, #88]	; 0x58
   1ddac:	sub	r1, r0, #1
   1ddb0:	mov	r0, r4
   1ddb4:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1ddb8:	bfi	r7, r0, #8, #1
   1ddbc:	ldr	r0, [r8, r7, lsl #2]
   1ddc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ddc4:	mov	r0, r4
   1ddc8:	mov	r1, r6
   1ddcc:	bl	1f9c4 <__assert_fail@plt+0xe218>
   1ddd0:	str	r0, [r5]
   1ddd4:	cmp	r0, #0
   1ddd8:	beq	1dd50 <__assert_fail@plt+0xc5a4>
   1dddc:	b	1dd9c <__assert_fail@plt+0xc5f0>
   1dde0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dde4:	add	fp, sp, #24
   1dde8:	sub	sp, sp, #16
   1ddec:	mov	r7, r2
   1ddf0:	mov	r4, r1
   1ddf4:	mov	r8, r0
   1ddf8:	ldr	r5, [r1, #40]	; 0x28
   1ddfc:	ldr	r6, [r1, #84]	; 0x54
   1de00:	ldr	r0, [r1, #100]	; 0x64
   1de04:	ldr	r1, [r1, #104]	; 0x68
   1de08:	cmp	r5, r1
   1de0c:	ble	1de1c <__assert_fail@plt+0xc670>
   1de10:	str	r7, [r0, r5, lsl #2]
   1de14:	str	r5, [r4, #104]	; 0x68
   1de18:	b	1deb8 <__assert_fail@plt+0xc70c>
   1de1c:	ldr	r1, [r0, r5, lsl #2]
   1de20:	cmp	r1, #0
   1de24:	beq	1de58 <__assert_fail@plt+0xc6ac>
   1de28:	ldr	r0, [r0, r5, lsl #2]
   1de2c:	ldr	r2, [r0, #40]	; 0x28
   1de30:	cmp	r7, #0
   1de34:	beq	1de60 <__assert_fail@plt+0xc6b4>
   1de38:	ldr	r9, [r7, #40]	; 0x28
   1de3c:	mov	r0, sp
   1de40:	mov	r1, r9
   1de44:	bl	1e3dc <__assert_fail@plt+0xcc30>
   1de48:	str	r0, [r8]
   1de4c:	cmp	r0, #0
   1de50:	beq	1de74 <__assert_fail@plt+0xc6c8>
   1de54:	b	1df24 <__assert_fail@plt+0xc778>
   1de58:	str	r7, [r0, r5, lsl #2]
   1de5c:	b	1deb8 <__assert_fail@plt+0xc70c>
   1de60:	vldr	d16, [r2]
   1de64:	ldr	r0, [r2, #8]
   1de68:	str	r0, [sp, #8]
   1de6c:	vstr	d16, [sp]
   1de70:	mov	r9, #0
   1de74:	ldr	r0, [r4, #40]	; 0x28
   1de78:	ldr	r2, [r4, #88]	; 0x58
   1de7c:	sub	r1, r0, #1
   1de80:	mov	r0, r4
   1de84:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1de88:	mov	r3, r0
   1de8c:	mov	r2, sp
   1de90:	mov	r0, r8
   1de94:	mov	r1, r6
   1de98:	bl	1c048 <__assert_fail@plt+0xa89c>
   1de9c:	mov	r7, r0
   1dea0:	ldr	r0, [r4, #100]	; 0x64
   1dea4:	str	r7, [r0, r5, lsl #2]
   1dea8:	cmp	r9, #0
   1deac:	beq	1deb8 <__assert_fail@plt+0xc70c>
   1deb0:	ldr	r0, [sp, #8]
   1deb4:	bl	1312c <__assert_fail@plt+0x1980>
   1deb8:	cmp	r7, #0
   1debc:	ldrne	r0, [r6, #76]	; 0x4c
   1dec0:	cmpne	r0, #0
   1dec4:	bne	1ded4 <__assert_fail@plt+0xc728>
   1dec8:	mov	r0, r7
   1decc:	sub	sp, fp, #24
   1ded0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ded4:	add	r6, r7, #4
   1ded8:	mov	r0, r4
   1dedc:	mov	r1, r6
   1dee0:	mov	r2, r5
   1dee4:	bl	1d8d8 <__assert_fail@plt+0xc12c>
   1dee8:	str	r0, [r8]
   1deec:	cmp	r0, #0
   1def0:	bne	1df24 <__assert_fail@plt+0xc778>
   1def4:	ldrb	r0, [r7, #52]	; 0x34
   1def8:	tst	r0, #64	; 0x40
   1defc:	beq	1dec8 <__assert_fail@plt+0xc71c>
   1df00:	mov	r0, r4
   1df04:	mov	r1, r6
   1df08:	bl	1d964 <__assert_fail@plt+0xc1b8>
   1df0c:	str	r0, [r8]
   1df10:	cmp	r0, #0
   1df14:	mov	r7, #0
   1df18:	ldreq	r0, [r4, #100]	; 0x64
   1df1c:	ldreq	r7, [r0, r5, lsl #2]
   1df20:	b	1dec8 <__assert_fail@plt+0xc71c>
   1df24:	mov	r7, #0
   1df28:	b	1dec8 <__assert_fail@plt+0xc71c>
   1df2c:	push	{r4, r5, r6, sl, fp, lr}
   1df30:	add	fp, sp, #16
   1df34:	mov	r4, r1
   1df38:	mov	r6, r0
   1df3c:	b	1df60 <__assert_fail@plt+0xc7b4>
   1df40:	mov	r0, r6
   1df44:	mov	r1, r4
   1df48:	mov	r2, #0
   1df4c:	bl	1dde0 <__assert_fail@plt+0xc634>
   1df50:	cmp	r0, #0
   1df54:	ldreq	r1, [r6]
   1df58:	cmpeq	r1, #0
   1df5c:	popne	{r4, r5, r6, sl, fp, pc}
   1df60:	ldr	r1, [r4, #40]	; 0x28
   1df64:	ldr	r0, [r4, #104]	; 0x68
   1df68:	cmp	r1, r0
   1df6c:	movge	r0, #0
   1df70:	popge	{r4, r5, r6, sl, fp, pc}
   1df74:	add	r2, r1, #1
   1df78:	ldr	r3, [r4, #40]	; 0x28
   1df7c:	ldr	r5, [r4, #100]	; 0x64
   1df80:	add	r3, r3, #1
   1df84:	str	r3, [r4, #40]	; 0x28
   1df88:	add	r1, r5, r1, lsl #2
   1df8c:	ldr	r1, [r1, #4]
   1df90:	cmp	r1, #0
   1df94:	mov	r1, r2
   1df98:	beq	1df68 <__assert_fail@plt+0xc7bc>
   1df9c:	b	1df40 <__assert_fail@plt+0xc794>
   1dfa0:	push	{r4, r5, r6, r7, fp, lr}
   1dfa4:	add	fp, sp, #16
   1dfa8:	mov	r4, r2
   1dfac:	mov	r6, r1
   1dfb0:	mov	r5, r0
   1dfb4:	ldr	r0, [r0, #124]	; 0x7c
   1dfb8:	ldr	r7, [r5, #128]	; 0x80
   1dfbc:	cmp	r0, r7
   1dfc0:	beq	1e008 <__assert_fail@plt+0xc85c>
   1dfc4:	mov	r0, #1
   1dfc8:	mov	r1, #24
   1dfcc:	bl	22a18 <__assert_fail@plt+0x1126c>
   1dfd0:	ldr	r1, [r5, #124]	; 0x7c
   1dfd4:	ldr	r2, [r5, #132]	; 0x84
   1dfd8:	str	r0, [r2, r1, lsl #2]
   1dfdc:	ldr	r0, [r5, #132]	; 0x84
   1dfe0:	ldr	r0, [r0, r1, lsl #2]
   1dfe4:	cmp	r0, #0
   1dfe8:	strne	r6, [r0, #4]
   1dfec:	addne	r1, r1, #1
   1dff0:	strne	r1, [r5, #124]	; 0x7c
   1dff4:	strne	r4, [r0]
   1dff8:	movne	r0, #0
   1dffc:	popne	{r4, r5, r6, r7, fp, pc}
   1e000:	mov	r0, #12
   1e004:	pop	{r4, r5, r6, r7, fp, pc}
   1e008:	ldr	r0, [r5, #132]	; 0x84
   1e00c:	lsl	r1, r7, #3
   1e010:	bl	22a9c <__assert_fail@plt+0x112f0>
   1e014:	cmp	r0, #0
   1e018:	beq	1e000 <__assert_fail@plt+0xc854>
   1e01c:	lsl	r1, r7, #1
   1e020:	str	r1, [r5, #128]	; 0x80
   1e024:	str	r0, [r5, #132]	; 0x84
   1e028:	b	1dfc4 <__assert_fail@plt+0xc818>
   1e02c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e030:	add	fp, sp, #28
   1e034:	sub	sp, sp, #52	; 0x34
   1e038:	str	r1, [sp, #36]	; 0x24
   1e03c:	mov	r4, r0
   1e040:	ldr	r5, [r0, #4]
   1e044:	ldr	r6, [r0, #84]	; 0x54
   1e048:	str	r2, [fp, #-36]	; 0xffffffdc
   1e04c:	mov	r1, r2
   1e050:	bl	1e60c <__assert_fail@plt+0xce60>
   1e054:	cmn	r0, #1
   1e058:	beq	1e088 <__assert_fail@plt+0xc8dc>
   1e05c:	ldr	r1, [r4, #116]	; 0x74
   1e060:	add	r0, r0, r0, lsl #1
   1e064:	add	r0, r1, r0, lsl #3
   1e068:	ldr	r2, [sp, #36]	; 0x24
   1e06c:	ldr	r1, [r0]
   1e070:	cmp	r1, r2
   1e074:	beq	1e3bc <__assert_fail@plt+0xcc10>
   1e078:	ldrb	r1, [r0, #20]
   1e07c:	add	r0, r0, #24
   1e080:	cmp	r1, #0
   1e084:	bne	1e06c <__assert_fail@plt+0xc8c0>
   1e088:	ldr	r0, [r4, #124]	; 0x7c
   1e08c:	cmp	r0, #1
   1e090:	blt	1e3bc <__assert_fail@plt+0xcc10>
   1e094:	mov	ip, r6
   1e098:	ldr	r0, [r6]
   1e09c:	ldr	r1, [sp, #36]	; 0x24
   1e0a0:	ldr	r2, [r0, r1, lsl #3]
   1e0a4:	mov	r6, #0
   1e0a8:	str	r4, [sp, #28]
   1e0ac:	mov	r3, r5
   1e0b0:	str	ip, [sp, #24]
   1e0b4:	str	r2, [sp, #20]
   1e0b8:	b	1e264 <__assert_fail@plt+0xcab8>
   1e0bc:	ldr	ip, [sp, #24]
   1e0c0:	ldr	r2, [sp, #20]
   1e0c4:	b	1e104 <__assert_fail@plt+0xc958>
   1e0c8:	ldr	r0, [r4, #48]	; 0x30
   1e0cc:	cmp	r6, r0
   1e0d0:	bge	1e3a8 <__assert_fail@plt+0xcbfc>
   1e0d4:	mov	r9, r6
   1e0d8:	add	r1, r6, #1
   1e0dc:	mov	r0, r4
   1e0e0:	bl	1dc5c <__assert_fail@plt+0xc4b0>
   1e0e4:	cmp	r0, #0
   1e0e8:	bne	1e3cc <__assert_fail@plt+0xcc20>
   1e0ec:	ldr	r3, [r4, #4]
   1e0f0:	ldr	r7, [sp, #32]
   1e0f4:	mov	r6, r9
   1e0f8:	ldr	ip, [sp, #24]
   1e0fc:	ldr	r2, [sp, #20]
   1e100:	b	1e11c <__assert_fail@plt+0xc970>
   1e104:	ldr	r0, [r7]
   1e108:	cmp	r5, r0
   1e10c:	ble	1e134 <__assert_fail@plt+0xc988>
   1e110:	ldr	r0, [r4, #28]
   1e114:	cmp	r6, r0
   1e118:	bge	1e0c8 <__assert_fail@plt+0xc91c>
   1e11c:	ldrb	r0, [r3, r6]
   1e120:	add	r1, r3, r5
   1e124:	ldrb	r1, [r1, #-1]
   1e128:	cmp	r0, r1
   1e12c:	bne	1e3a8 <__assert_fail@plt+0xcbfc>
   1e130:	add	r6, r6, #1
   1e134:	ldr	r0, [r4, #100]	; 0x64
   1e138:	ldr	r0, [r0, r5, lsl #2]
   1e13c:	cmp	r0, #0
   1e140:	beq	1e248 <__assert_fail@plt+0xca9c>
   1e144:	mov	r9, r6
   1e148:	mov	sl, r3
   1e14c:	add	r1, r0, #4
   1e150:	mov	r0, ip
   1e154:	mov	r3, #9
   1e158:	bl	1e7c4 <__assert_fail@plt+0xd018>
   1e15c:	cmn	r0, #1
   1e160:	beq	1e234 <__assert_fail@plt+0xca88>
   1e164:	mov	r4, r0
   1e168:	ldr	r1, [sp, #32]
   1e16c:	ldr	r0, [r1, #8]
   1e170:	cmp	r0, #0
   1e174:	bne	1e1a0 <__assert_fail@plt+0xc9f4>
   1e178:	ldr	r0, [r1]
   1e17c:	sub	r0, r5, r0
   1e180:	add	r1, r0, #1
   1e184:	mov	r8, #12
   1e188:	mov	r0, #12
   1e18c:	bl	22a18 <__assert_fail@plt+0x1126c>
   1e190:	ldr	r1, [sp, #32]
   1e194:	str	r0, [r1, #8]
   1e198:	cmp	r0, #0
   1e19c:	beq	1e3c0 <__assert_fail@plt+0xcc14>
   1e1a0:	ldr	r3, [r1]
   1e1a4:	ldr	r2, [r1, #4]
   1e1a8:	ldr	r1, [r1, #8]
   1e1ac:	stm	sp, {r4, r5}
   1e1b0:	mov	r0, #9
   1e1b4:	str	r0, [sp, #8]
   1e1b8:	ldr	r0, [sp, #28]
   1e1bc:	bl	1e818 <__assert_fail@plt+0xd06c>
   1e1c0:	ldr	r7, [sp, #32]
   1e1c4:	cmp	r0, #1
   1e1c8:	mov	r3, sl
   1e1cc:	mov	r6, r9
   1e1d0:	ldr	ip, [sp, #24]
   1e1d4:	ldr	r2, [sp, #20]
   1e1d8:	beq	1e248 <__assert_fail@plt+0xca9c>
   1e1dc:	mov	r8, r0
   1e1e0:	cmp	r0, #0
   1e1e4:	bne	1e3c0 <__assert_fail@plt+0xcc14>
   1e1e8:	mov	r0, r7
   1e1ec:	mov	r1, r4
   1e1f0:	mov	r2, r5
   1e1f4:	bl	1ebec <__assert_fail@plt+0xd440>
   1e1f8:	cmp	r0, #0
   1e1fc:	beq	1e3d4 <__assert_fail@plt+0xcc28>
   1e200:	mov	r2, r0
   1e204:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e208:	str	r0, [sp]
   1e20c:	ldr	r4, [sp, #28]
   1e210:	mov	r0, r4
   1e214:	mov	r1, r7
   1e218:	ldr	r3, [sp, #36]	; 0x24
   1e21c:	bl	1e72c <__assert_fail@plt+0xcf80>
   1e220:	cmp	r0, #1
   1e224:	bhi	1e3cc <__assert_fail@plt+0xcc20>
   1e228:	ldr	r3, [r4, #4]
   1e22c:	ldr	r7, [sp, #32]
   1e230:	b	1e23c <__assert_fail@plt+0xca90>
   1e234:	ldr	r7, [sp, #32]
   1e238:	mov	r3, sl
   1e23c:	mov	r6, r9
   1e240:	ldr	ip, [sp, #24]
   1e244:	ldr	r2, [sp, #20]
   1e248:	add	r1, r5, #1
   1e24c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e250:	cmp	r5, r0
   1e254:	mov	r5, r1
   1e258:	ldr	r4, [sp, #28]
   1e25c:	blt	1e104 <__assert_fail@plt+0xc958>
   1e260:	b	1e3a8 <__assert_fail@plt+0xcbfc>
   1e264:	ldr	r0, [r4, #132]	; 0x84
   1e268:	ldr	r7, [r0, r6, lsl #2]
   1e26c:	ldr	r0, [r7, #4]
   1e270:	ldr	r1, [ip]
   1e274:	ldr	r0, [r1, r0, lsl #3]
   1e278:	cmp	r0, r2
   1e27c:	str	r6, [sp, #16]
   1e280:	bne	1e3a8 <__assert_fail@plt+0xcbfc>
   1e284:	ldr	r5, [r7]
   1e288:	ldr	r0, [r7, #16]
   1e28c:	cmp	r0, #1
   1e290:	str	r7, [sp, #32]
   1e294:	mov	sl, #0
   1e298:	blt	1e2a8 <__assert_fail@plt+0xcafc>
   1e29c:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1e2a0:	mov	r9, r5
   1e2a4:	b	1e2dc <__assert_fail@plt+0xcb30>
   1e2a8:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1e2ac:	b	1e380 <__assert_fail@plt+0xcbd4>
   1e2b0:	ldr	r0, [r4, #48]	; 0x30
   1e2b4:	cmp	r1, r0
   1e2b8:	bgt	1e37c <__assert_fail@plt+0xcbd0>
   1e2bc:	mov	r7, r6
   1e2c0:	mov	r0, r4
   1e2c4:	bl	1e698 <__assert_fail@plt+0xceec>
   1e2c8:	cmp	r0, #0
   1e2cc:	bne	1e3cc <__assert_fail@plt+0xcc20>
   1e2d0:	ldr	r3, [r4, #4]
   1e2d4:	mov	r6, r7
   1e2d8:	b	1e30c <__assert_fail@plt+0xcb60>
   1e2dc:	ldr	r0, [r7, #20]
   1e2e0:	ldr	r2, [r0, sl, lsl #2]
   1e2e4:	ldr	r0, [r2, #4]
   1e2e8:	str	r0, [fp, #-32]	; 0xffffffe0
   1e2ec:	sub	r5, r0, r9
   1e2f0:	cmp	r5, #1
   1e2f4:	blt	1e338 <__assert_fail@plt+0xcb8c>
   1e2f8:	add	r1, r5, r6
   1e2fc:	ldr	r0, [r4, #28]
   1e300:	cmp	r1, r0
   1e304:	str	r2, [sp, #40]	; 0x28
   1e308:	bgt	1e2b0 <__assert_fail@plt+0xcb04>
   1e30c:	add	r0, r3, r6
   1e310:	add	r1, r3, r9
   1e314:	mov	r8, r6
   1e318:	mov	r2, r5
   1e31c:	mov	r7, r3
   1e320:	bl	11518 <memcmp@plt>
   1e324:	mov	r3, r7
   1e328:	cmp	r0, #0
   1e32c:	ldr	r7, [sp, #32]
   1e330:	ldr	r2, [sp, #40]	; 0x28
   1e334:	bne	1e37c <__assert_fail@plt+0xcbd0>
   1e338:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e33c:	str	r0, [sp]
   1e340:	mov	r0, r4
   1e344:	mov	r1, r7
   1e348:	ldr	r3, [sp, #36]	; 0x24
   1e34c:	bl	1e72c <__assert_fail@plt+0xcf80>
   1e350:	cmp	r0, #1
   1e354:	bhi	1e3cc <__assert_fail@plt+0xcc20>
   1e358:	add	r6, r5, r6
   1e35c:	add	sl, sl, #1
   1e360:	ldr	r3, [r4, #4]
   1e364:	ldr	r0, [r7, #16]
   1e368:	cmp	sl, r0
   1e36c:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1e370:	mov	r9, r5
   1e374:	blt	1e2dc <__assert_fail@plt+0xcb30>
   1e378:	b	1e380 <__assert_fail@plt+0xcbd4>
   1e37c:	mov	r5, r9
   1e380:	ldr	r0, [r7, #16]
   1e384:	cmp	sl, r0
   1e388:	blt	1e3a0 <__assert_fail@plt+0xcbf4>
   1e38c:	cmp	sl, #0
   1e390:	addne	r5, r5, #1
   1e394:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e398:	cmp	r5, r0
   1e39c:	ble	1e0bc <__assert_fail@plt+0xc910>
   1e3a0:	ldr	ip, [sp, #24]
   1e3a4:	ldr	r2, [sp, #20]
   1e3a8:	ldr	r6, [sp, #16]
   1e3ac:	add	r6, r6, #1
   1e3b0:	ldr	r0, [r4, #124]	; 0x7c
   1e3b4:	cmp	r6, r0
   1e3b8:	blt	1e264 <__assert_fail@plt+0xcab8>
   1e3bc:	mov	r8, #0
   1e3c0:	mov	r0, r8
   1e3c4:	sub	sp, fp, #28
   1e3c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3cc:	mov	r8, r0
   1e3d0:	b	1e3c0 <__assert_fail@plt+0xcc14>
   1e3d4:	mov	r8, #12
   1e3d8:	b	1e3c0 <__assert_fail@plt+0xcc14>
   1e3dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3e0:	add	fp, sp, #28
   1e3e4:	sub	sp, sp, #4
   1e3e8:	mov	sl, r2
   1e3ec:	mov	r8, r0
   1e3f0:	cmp	r1, #0
   1e3f4:	beq	1e42c <__assert_fail@plt+0xcc80>
   1e3f8:	mov	r6, r1
   1e3fc:	ldr	r0, [r1, #4]
   1e400:	cmp	sl, #0
   1e404:	beq	1e418 <__assert_fail@plt+0xcc6c>
   1e408:	cmp	r0, #1
   1e40c:	ldrge	r1, [sl, #4]
   1e410:	cmpge	r1, #1
   1e414:	bge	1e46c <__assert_fail@plt+0xccc0>
   1e418:	cmp	r0, #1
   1e41c:	blt	1e42c <__assert_fail@plt+0xcc80>
   1e420:	mov	r0, r8
   1e424:	mov	r1, r6
   1e428:	b	1e448 <__assert_fail@plt+0xcc9c>
   1e42c:	cmp	sl, #0
   1e430:	beq	1e454 <__assert_fail@plt+0xcca8>
   1e434:	ldr	r0, [sl, #4]
   1e438:	cmp	r0, #1
   1e43c:	blt	1e454 <__assert_fail@plt+0xcca8>
   1e440:	mov	r0, r8
   1e444:	mov	r1, sl
   1e448:	sub	sp, fp, #28
   1e44c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e450:	b	1bf60 <__assert_fail@plt+0xa7b4>
   1e454:	mov	r0, #0
   1e458:	str	r0, [r8]
   1e45c:	str	r0, [r8, #4]
   1e460:	str	r0, [r8, #8]
   1e464:	sub	sp, fp, #28
   1e468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e46c:	add	r0, r1, r0
   1e470:	str	r0, [r8]
   1e474:	lsl	r0, r0, #2
   1e478:	bl	22a6c <__assert_fail@plt+0x112c0>
   1e47c:	str	r0, [r8, #8]
   1e480:	cmp	r0, #0
   1e484:	beq	1e600 <__assert_fail@plt+0xce54>
   1e488:	ldr	r2, [sl, #4]
   1e48c:	mov	r4, #0
   1e490:	cmp	r2, #0
   1e494:	mov	r0, #0
   1e498:	movwgt	r0, #1
   1e49c:	ldr	r3, [r6, #4]
   1e4a0:	cmp	r3, #1
   1e4a4:	blt	1e564 <__assert_fail@plt+0xcdb8>
   1e4a8:	mov	r9, #0
   1e4ac:	cmp	r2, #1
   1e4b0:	blt	1e574 <__assert_fail@plt+0xcdc8>
   1e4b4:	mov	ip, #0
   1e4b8:	mov	r0, #0
   1e4bc:	mov	r4, ip
   1e4c0:	mov	r7, r0
   1e4c4:	ldr	r0, [sl, #8]
   1e4c8:	ldr	r1, [r0, r4, lsl #2]
   1e4cc:	ldr	r0, [r6, #8]
   1e4d0:	ldr	r5, [r0, r9, lsl #2]
   1e4d4:	cmp	r5, r1
   1e4d8:	ble	1e518 <__assert_fail@plt+0xcd6c>
   1e4dc:	ldr	r0, [r8, #8]
   1e4e0:	str	r1, [r0, r7, lsl #2]
   1e4e4:	ldr	r2, [sl, #4]
   1e4e8:	add	r1, r4, #1
   1e4ec:	cmp	r2, r1
   1e4f0:	mov	r0, #0
   1e4f4:	movwgt	r0, #1
   1e4f8:	ldr	r3, [r6, #4]
   1e4fc:	cmp	r3, r9
   1e500:	ble	1e5a0 <__assert_fail@plt+0xcdf4>
   1e504:	add	r7, r7, #1
   1e508:	cmp	r2, r1
   1e50c:	mov	r4, r1
   1e510:	bgt	1e4c4 <__assert_fail@plt+0xcd18>
   1e514:	b	1e578 <__assert_fail@plt+0xcdcc>
   1e518:	ldr	r0, [r8, #8]
   1e51c:	str	r5, [r0, r7, lsl #2]
   1e520:	add	lr, r4, #1
   1e524:	cmp	r5, r1
   1e528:	mov	ip, r4
   1e52c:	moveq	ip, lr
   1e530:	ldr	r2, [sl, #4]
   1e534:	cmp	r2, ip
   1e538:	mov	r0, #0
   1e53c:	movwgt	r0, #1
   1e540:	add	r9, r9, #1
   1e544:	ldr	r3, [r6, #4]
   1e548:	cmp	r3, r9
   1e54c:	ble	1e5e8 <__assert_fail@plt+0xce3c>
   1e550:	add	r0, r7, #1
   1e554:	cmp	r2, ip
   1e558:	bgt	1e4bc <__assert_fail@plt+0xcd10>
   1e55c:	add	r7, r7, #1
   1e560:	b	1e578 <__assert_fail@plt+0xcdcc>
   1e564:	mov	r6, #0
   1e568:	cmp	r0, #0
   1e56c:	bne	1e5b0 <__assert_fail@plt+0xce04>
   1e570:	b	1e5d8 <__assert_fail@plt+0xce2c>
   1e574:	mov	r7, #0
   1e578:	ldr	r0, [r8, #8]
   1e57c:	add	r0, r0, r7, lsl #2
   1e580:	ldr	r1, [r6, #8]
   1e584:	add	r1, r1, r9, lsl #2
   1e588:	sub	r2, r3, r9
   1e58c:	lsl	r2, r2, #2
   1e590:	bl	114d0 <memcpy@plt>
   1e594:	sub	r0, r7, r9
   1e598:	ldr	r1, [r6, #4]
   1e59c:	b	1e5d4 <__assert_fail@plt+0xce28>
   1e5a0:	add	r6, r7, #1
   1e5a4:	add	r4, r4, #1
   1e5a8:	cmp	r0, #0
   1e5ac:	beq	1e5d8 <__assert_fail@plt+0xce2c>
   1e5b0:	ldr	r0, [r8, #8]
   1e5b4:	add	r0, r0, r6, lsl #2
   1e5b8:	ldr	r1, [sl, #8]
   1e5bc:	add	r1, r1, r4, lsl #2
   1e5c0:	sub	r2, r2, r4
   1e5c4:	lsl	r2, r2, #2
   1e5c8:	bl	114d0 <memcpy@plt>
   1e5cc:	sub	r0, r6, r4
   1e5d0:	ldr	r1, [sl, #4]
   1e5d4:	add	r6, r0, r1
   1e5d8:	str	r6, [r8, #4]
   1e5dc:	mov	r0, #0
   1e5e0:	sub	sp, fp, #28
   1e5e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5e8:	cmp	r5, r1
   1e5ec:	moveq	r4, lr
   1e5f0:	add	r6, r7, #1
   1e5f4:	cmp	r0, #0
   1e5f8:	bne	1e5b0 <__assert_fail@plt+0xce04>
   1e5fc:	b	1e5d8 <__assert_fail@plt+0xce2c>
   1e600:	mov	r0, #12
   1e604:	sub	sp, fp, #28
   1e608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e60c:	push	{r4, r5, r6, r7, fp, lr}
   1e610:	add	fp, sp, #16
   1e614:	mov	ip, r0
   1e618:	ldr	lr, [r0, #108]	; 0x6c
   1e61c:	cmp	lr, #1
   1e620:	blt	1e684 <__assert_fail@plt+0xced8>
   1e624:	ldr	r2, [ip, #116]	; 0x74
   1e628:	mov	r0, #0
   1e62c:	mov	r3, #1
   1e630:	mov	r4, lr
   1e634:	add	r5, r0, r4
   1e638:	add	r5, r5, r5, lsr #31
   1e63c:	asr	r6, r5, #1
   1e640:	add	r7, r6, r6, lsl #1
   1e644:	add	r7, r2, r7, lsl #3
   1e648:	ldr	r7, [r7, #4]
   1e64c:	cmp	r7, r1
   1e650:	addlt	r0, r3, r5, asr #1
   1e654:	movge	r4, r6
   1e658:	cmp	r0, r4
   1e65c:	blt	1e634 <__assert_fail@plt+0xce88>
   1e660:	cmp	r0, lr
   1e664:	bge	1e690 <__assert_fail@plt+0xcee4>
   1e668:	ldr	r2, [ip, #116]	; 0x74
   1e66c:	add	r3, r0, r0, lsl #1
   1e670:	add	r2, r2, r3, lsl #3
   1e674:	ldr	r2, [r2, #4]
   1e678:	cmp	r2, r1
   1e67c:	mvnne	r0, #0
   1e680:	pop	{r4, r5, r6, r7, fp, pc}
   1e684:	mov	r0, #0
   1e688:	cmp	r0, lr
   1e68c:	blt	1e668 <__assert_fail@plt+0xcebc>
   1e690:	mvn	r0, #0
   1e694:	pop	{r4, r5, r6, r7, fp, pc}
   1e698:	push	{r4, r5, r6, r7, fp, lr}
   1e69c:	add	fp, sp, #16
   1e6a0:	mov	r4, r1
   1e6a4:	mov	r5, r0
   1e6a8:	ldr	r0, [r0, #36]	; 0x24
   1e6ac:	ldr	r7, [r5, #104]	; 0x68
   1e6b0:	cmp	r0, r1
   1e6b4:	ldrle	r1, [r5, #48]	; 0x30
   1e6b8:	cmple	r0, r1
   1e6bc:	blt	1e70c <__assert_fail@plt+0xcf60>
   1e6c0:	ldr	r0, [r5, #28]
   1e6c4:	cmp	r0, r4
   1e6c8:	ldrle	r1, [r5, #48]	; 0x30
   1e6cc:	cmple	r0, r1
   1e6d0:	blt	1e70c <__assert_fail@plt+0xcf60>
   1e6d4:	mov	r6, #0
   1e6d8:	cmp	r7, r4
   1e6dc:	bge	1e724 <__assert_fail@plt+0xcf78>
   1e6e0:	sub	r0, r4, r7
   1e6e4:	lsl	r2, r0, #2
   1e6e8:	ldr	r0, [r5, #100]	; 0x64
   1e6ec:	add	r0, r0, r7, lsl #2
   1e6f0:	add	r0, r0, #4
   1e6f4:	mov	r6, #0
   1e6f8:	mov	r1, #0
   1e6fc:	bl	116b0 <memset@plt>
   1e700:	str	r4, [r5, #104]	; 0x68
   1e704:	mov	r0, r6
   1e708:	pop	{r4, r5, r6, r7, fp, pc}
   1e70c:	add	r1, r4, #1
   1e710:	mov	r0, r5
   1e714:	bl	1dc5c <__assert_fail@plt+0xc4b0>
   1e718:	mov	r6, r0
   1e71c:	cmp	r0, #0
   1e720:	beq	1e6d4 <__assert_fail@plt+0xcf28>
   1e724:	mov	r0, r6
   1e728:	pop	{r4, r5, r6, r7, fp, pc}
   1e72c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e730:	add	fp, sp, #24
   1e734:	sub	sp, sp, #16
   1e738:	mov	r7, r3
   1e73c:	mov	r6, r2
   1e740:	mov	r8, r1
   1e744:	mov	r4, r0
   1e748:	ldr	r2, [r2]
   1e74c:	ldr	r3, [r6, #4]
   1e750:	mov	r0, #8
   1e754:	str	r0, [sp, #8]
   1e758:	ldr	r5, [fp, #8]
   1e75c:	str	r5, [sp, #4]
   1e760:	str	r7, [sp]
   1e764:	add	r1, r6, #8
   1e768:	mov	r0, r4
   1e76c:	bl	1e818 <__assert_fail@plt+0xd06c>
   1e770:	cmp	r0, #0
   1e774:	beq	1e780 <__assert_fail@plt+0xcfd4>
   1e778:	sub	sp, fp, #24
   1e77c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e780:	ldr	r3, [r8]
   1e784:	ldr	r0, [r6, #4]
   1e788:	str	r0, [sp]
   1e78c:	mov	r0, r4
   1e790:	mov	r1, r7
   1e794:	mov	r2, r5
   1e798:	bl	1ec6c <__assert_fail@plt+0xd4c0>
   1e79c:	cmp	r0, #0
   1e7a0:	bne	1e778 <__assert_fail@plt+0xcfcc>
   1e7a4:	ldr	r0, [r6, #4]
   1e7a8:	add	r0, r0, r5
   1e7ac:	ldr	r1, [r8]
   1e7b0:	sub	r1, r0, r1
   1e7b4:	mov	r0, r4
   1e7b8:	sub	sp, fp, #24
   1e7bc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e7c0:	b	1e698 <__assert_fail@plt+0xceec>
   1e7c4:	push	{r4, r5, fp, lr}
   1e7c8:	add	fp, sp, #8
   1e7cc:	ldr	r4, [r1, #4]
   1e7d0:	cmp	r4, #1
   1e7d4:	blt	1e810 <__assert_fail@plt+0xd064>
   1e7d8:	ldr	ip, [r0]
   1e7dc:	ldr	lr, [r1, #8]
   1e7e0:	mov	r4, #0
   1e7e4:	ldr	r0, [lr, r4, lsl #2]
   1e7e8:	add	r5, ip, r0, lsl #3
   1e7ec:	ldrb	r5, [r5, #4]
   1e7f0:	cmp	r5, r3
   1e7f4:	ldreq	r5, [ip, r0, lsl #3]
   1e7f8:	cmpeq	r5, r2
   1e7fc:	popeq	{r4, r5, fp, pc}
   1e800:	add	r4, r4, #1
   1e804:	ldr	r0, [r1, #4]
   1e808:	cmp	r4, r0
   1e80c:	blt	1e7e4 <__assert_fail@plt+0xd038>
   1e810:	mvn	r0, #0
   1e814:	pop	{r4, r5, fp, pc}
   1e818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e81c:	add	fp, sp, #28
   1e820:	sub	sp, sp, #44	; 0x2c
   1e824:	mov	sl, r3
   1e828:	mov	r8, r2
   1e82c:	mov	r7, r1
   1e830:	mov	r4, r0
   1e834:	ldr	r1, [r0, #84]	; 0x54
   1e838:	mov	r0, #0
   1e83c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e840:	str	r1, [sp, #20]
   1e844:	ldr	r0, [r1]
   1e848:	ldr	r0, [r0, r2, lsl #3]
   1e84c:	str	r0, [sp, #16]
   1e850:	ldr	r0, [r4, #120]	; 0x78
   1e854:	ldr	r1, [fp, #12]
   1e858:	add	r0, r0, r1
   1e85c:	ldr	r5, [r7, #4]
   1e860:	cmp	r5, r0
   1e864:	ble	1eb84 <__assert_fail@plt+0xd3d8>
   1e868:	ldr	r0, [r4, #40]	; 0x28
   1e86c:	str	r0, [sp, #12]
   1e870:	ldr	r2, [r4, #88]	; 0x58
   1e874:	ldr	r0, [r4, #100]	; 0x64
   1e878:	str	r0, [sp, #8]
   1e87c:	ldr	r6, [r7]
   1e880:	ldr	r0, [r7, #8]
   1e884:	str	r0, [r4, #100]	; 0x64
   1e888:	cmp	r6, #0
   1e88c:	moveq	r6, sl
   1e890:	str	r6, [r4, #40]	; 0x28
   1e894:	sub	r1, r6, #1
   1e898:	mov	r0, r4
   1e89c:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1e8a0:	mov	r9, r0
   1e8a4:	cmp	r6, sl
   1e8a8:	mov	r5, r4
   1e8ac:	bne	1e8ec <__assert_fail@plt+0xd140>
   1e8b0:	add	r0, sp, #24
   1e8b4:	mov	r1, r8
   1e8b8:	bl	1b648 <__assert_fail@plt+0x9e9c>
   1e8bc:	str	r0, [fp, #-32]	; 0xffffffe0
   1e8c0:	cmp	r0, #0
   1e8c4:	bne	1ebe4 <__assert_fail@plt+0xd438>
   1e8c8:	add	r1, sp, #24
   1e8cc:	ldr	r0, [sp, #20]
   1e8d0:	ldr	r2, [sp, #16]
   1e8d4:	ldr	r3, [fp, #16]
   1e8d8:	bl	1ed68 <__assert_fail@plt+0xd5bc>
   1e8dc:	str	r0, [fp, #-32]	; 0xffffffe0
   1e8e0:	cmp	r0, #0
   1e8e4:	beq	1e954 <__assert_fail@plt+0xd1a8>
   1e8e8:	b	1eb74 <__assert_fail@plt+0xd3c8>
   1e8ec:	ldr	r0, [r5, #100]	; 0x64
   1e8f0:	ldr	r8, [r0, r6, lsl #2]
   1e8f4:	cmp	r8, #0
   1e8f8:	beq	1e91c <__assert_fail@plt+0xd170>
   1e8fc:	ldrb	r0, [r8, #52]	; 0x34
   1e900:	tst	r0, #64	; 0x40
   1e904:	bne	1e930 <__assert_fail@plt+0xd184>
   1e908:	mov	r0, #0
   1e90c:	str	r0, [sp, #28]
   1e910:	str	r0, [sp, #24]
   1e914:	str	r0, [sp, #32]
   1e918:	b	1e948 <__assert_fail@plt+0xd19c>
   1e91c:	mov	r8, #0
   1e920:	str	r8, [sp, #28]
   1e924:	str	r8, [sp, #24]
   1e928:	str	r8, [sp, #32]
   1e92c:	b	1e9bc <__assert_fail@plt+0xd210>
   1e930:	add	r1, r8, #4
   1e934:	add	r0, sp, #24
   1e938:	bl	1bf60 <__assert_fail@plt+0xa7b4>
   1e93c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e940:	cmp	r0, #0
   1e944:	bne	1ebe4 <__assert_fail@plt+0xd438>
   1e948:	ldrb	r0, [r8, #52]	; 0x34
   1e94c:	tst	r0, #64	; 0x40
   1e950:	beq	1e9bc <__assert_fail@plt+0xd210>
   1e954:	ldr	r0, [sp, #28]
   1e958:	cmp	r0, #0
   1e95c:	beq	1e988 <__assert_fail@plt+0xd1dc>
   1e960:	ldr	r0, [fp, #16]
   1e964:	str	r0, [sp]
   1e968:	add	r1, sp, #24
   1e96c:	mov	r0, r5
   1e970:	mov	r2, r6
   1e974:	ldr	r3, [sp, #16]
   1e978:	bl	1ee60 <__assert_fail@plt+0xd6b4>
   1e97c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e980:	cmp	r0, #0
   1e984:	bne	1eb74 <__assert_fail@plt+0xd3c8>
   1e988:	sub	r0, fp, #32
   1e98c:	add	r2, sp, #24
   1e990:	ldr	r1, [sp, #20]
   1e994:	mov	r3, r9
   1e998:	bl	1c048 <__assert_fail@plt+0xa89c>
   1e99c:	mov	r8, r0
   1e9a0:	cmp	r0, #0
   1e9a4:	bne	1e9b4 <__assert_fail@plt+0xd208>
   1e9a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e9ac:	cmp	r0, #0
   1e9b0:	bne	1eb74 <__assert_fail@plt+0xd3c8>
   1e9b4:	ldr	r0, [r5, #100]	; 0x64
   1e9b8:	str	r8, [r0, r6, lsl #2]
   1e9bc:	ldr	r0, [fp, #12]
   1e9c0:	cmp	r6, r0
   1e9c4:	bge	1eb18 <__assert_fail@plt+0xd36c>
   1e9c8:	str	r7, [sp, #4]
   1e9cc:	add	r7, r6, #1
   1e9d0:	add	r4, sp, #24
   1e9d4:	mov	sl, #0
   1e9d8:	sub	r6, r7, #1
   1e9dc:	ldr	r0, [r5, #120]	; 0x78
   1e9e0:	cmp	sl, r0
   1e9e4:	bgt	1eb14 <__assert_fail@plt+0xd368>
   1e9e8:	mov	r0, #0
   1e9ec:	str	r0, [sp, #28]
   1e9f0:	ldr	r0, [r5, #100]	; 0x64
   1e9f4:	ldr	r0, [r0, r7, lsl #2]
   1e9f8:	cmp	r0, #0
   1e9fc:	beq	1ea18 <__assert_fail@plt+0xd26c>
   1ea00:	add	r1, r0, #4
   1ea04:	mov	r0, r4
   1ea08:	bl	1bb5c <__assert_fail@plt+0xa3b0>
   1ea0c:	str	r0, [fp, #-32]	; 0xffffffe0
   1ea10:	cmp	r0, #0
   1ea14:	bne	1eb74 <__assert_fail@plt+0xd3c8>
   1ea18:	cmp	r8, #0
   1ea1c:	beq	1ea40 <__assert_fail@plt+0xd294>
   1ea20:	add	r2, r8, #16
   1ea24:	mov	r0, r5
   1ea28:	mov	r1, r6
   1ea2c:	mov	r3, r4
   1ea30:	bl	1f0f4 <__assert_fail@plt+0xd948>
   1ea34:	str	r0, [fp, #-32]	; 0xffffffe0
   1ea38:	cmp	r0, #0
   1ea3c:	bne	1eb74 <__assert_fail@plt+0xd3c8>
   1ea40:	ldr	r0, [sp, #28]
   1ea44:	cmp	r0, #0
   1ea48:	beq	1eaa8 <__assert_fail@plt+0xd2fc>
   1ea4c:	mov	r8, r6
   1ea50:	mov	r9, r5
   1ea54:	ldr	r0, [sp, #20]
   1ea58:	mov	r1, r4
   1ea5c:	ldr	r6, [sp, #16]
   1ea60:	mov	r2, r6
   1ea64:	ldr	r5, [fp, #16]
   1ea68:	mov	r3, r5
   1ea6c:	bl	1ed68 <__assert_fail@plt+0xd5bc>
   1ea70:	str	r0, [fp, #-32]	; 0xffffffe0
   1ea74:	cmp	r0, #0
   1ea78:	bne	1eb74 <__assert_fail@plt+0xd3c8>
   1ea7c:	str	r5, [sp]
   1ea80:	mov	r5, r9
   1ea84:	mov	r0, r9
   1ea88:	mov	r1, r4
   1ea8c:	mov	r2, r7
   1ea90:	mov	r3, r6
   1ea94:	bl	1ee60 <__assert_fail@plt+0xd6b4>
   1ea98:	str	r0, [fp, #-32]	; 0xffffffe0
   1ea9c:	cmp	r0, #0
   1eaa0:	mov	r6, r8
   1eaa4:	bne	1eb74 <__assert_fail@plt+0xd3c8>
   1eaa8:	ldr	r2, [r5, #88]	; 0x58
   1eaac:	mov	r0, r5
   1eab0:	mov	r1, r6
   1eab4:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1eab8:	mov	r3, r0
   1eabc:	sub	r0, fp, #32
   1eac0:	ldr	r1, [sp, #20]
   1eac4:	mov	r2, r4
   1eac8:	bl	1c048 <__assert_fail@plt+0xa89c>
   1eacc:	mov	r8, r0
   1ead0:	cmp	r0, #0
   1ead4:	bne	1eae4 <__assert_fail@plt+0xd338>
   1ead8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1eadc:	cmp	r0, #0
   1eae0:	bne	1eb74 <__assert_fail@plt+0xd3c8>
   1eae4:	ldr	r0, [r5, #100]	; 0x64
   1eae8:	str	r8, [r0, r7, lsl #2]
   1eaec:	cmp	r8, #0
   1eaf0:	mov	r1, #0
   1eaf4:	addeq	r1, sl, #1
   1eaf8:	add	r0, r7, #1
   1eafc:	ldr	r2, [fp, #12]
   1eb00:	cmp	r7, r2
   1eb04:	mov	r7, r0
   1eb08:	mov	sl, r1
   1eb0c:	blt	1e9d8 <__assert_fail@plt+0xd22c>
   1eb10:	sub	r6, r0, #1
   1eb14:	ldr	r7, [sp, #4]
   1eb18:	ldr	r0, [sp, #32]
   1eb1c:	bl	1312c <__assert_fail@plt+0x1980>
   1eb20:	ldr	r0, [r5, #100]	; 0x64
   1eb24:	ldr	r1, [fp, #12]
   1eb28:	ldr	r0, [r0, r1, lsl #2]
   1eb2c:	str	r6, [r7]
   1eb30:	ldr	r1, [sp, #12]
   1eb34:	str	r1, [r5, #40]	; 0x28
   1eb38:	ldr	r1, [sp, #8]
   1eb3c:	str	r1, [r5, #100]	; 0x64
   1eb40:	cmp	r0, #0
   1eb44:	beq	1eb64 <__assert_fail@plt+0xd3b8>
   1eb48:	ldr	r1, [fp, #8]
   1eb4c:	add	r0, r0, #4
   1eb50:	bl	1bfdc <__assert_fail@plt+0xa830>
   1eb54:	mov	r4, #0
   1eb58:	cmp	r0, #0
   1eb5c:	moveq	r4, #1
   1eb60:	b	1eb68 <__assert_fail@plt+0xd3bc>
   1eb64:	mov	r4, #1
   1eb68:	mov	r0, r4
   1eb6c:	sub	sp, fp, #28
   1eb70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb74:	ldr	r0, [sp, #32]
   1eb78:	bl	1312c <__assert_fail@plt+0x1980>
   1eb7c:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1eb80:	b	1eb68 <__assert_fail@plt+0xd3bc>
   1eb84:	str	r4, [sp, #12]
   1eb88:	mvn	r1, #-2147483648	; 0x80000000
   1eb8c:	sub	r1, r1, r5
   1eb90:	mov	r4, #12
   1eb94:	cmp	r1, r0
   1eb98:	ble	1eb68 <__assert_fail@plt+0xd3bc>
   1eb9c:	add	r6, r0, #1
   1eba0:	add	r1, r6, r5
   1eba4:	cmn	r1, #-1073741823	; 0xc0000001
   1eba8:	bhi	1eb68 <__assert_fail@plt+0xd3bc>
   1ebac:	ldr	r0, [r7, #8]
   1ebb0:	mov	r9, r1
   1ebb4:	lsl	r1, r1, #2
   1ebb8:	bl	22a9c <__assert_fail@plt+0x112f0>
   1ebbc:	cmp	r0, #0
   1ebc0:	beq	1eb68 <__assert_fail@plt+0xd3bc>
   1ebc4:	str	r9, [r7, #4]
   1ebc8:	str	r0, [r7, #8]
   1ebcc:	add	r0, r0, r5, lsl #2
   1ebd0:	lsl	r2, r6, #2
   1ebd4:	mov	r1, #0
   1ebd8:	bl	116b0 <memset@plt>
   1ebdc:	ldr	r4, [sp, #12]
   1ebe0:	b	1e868 <__assert_fail@plt+0xd0bc>
   1ebe4:	mov	r4, r0
   1ebe8:	b	1eb68 <__assert_fail@plt+0xd3bc>
   1ebec:	push	{r4, r5, r6, r7, fp, lr}
   1ebf0:	add	fp, sp, #16
   1ebf4:	mov	r5, r2
   1ebf8:	mov	r6, r1
   1ebfc:	mov	r4, r0
   1ec00:	ldr	r0, [r0, #12]
   1ec04:	ldr	r1, [r4, #16]
   1ec08:	cmp	r1, r0
   1ec0c:	beq	1ec40 <__assert_fail@plt+0xd494>
   1ec10:	mov	r0, #1
   1ec14:	mov	r1, #20
   1ec18:	bl	22a18 <__assert_fail@plt+0x1126c>
   1ec1c:	cmp	r0, #0
   1ec20:	ldrne	r1, [r4, #16]
   1ec24:	ldrne	r2, [r4, #20]
   1ec28:	strne	r0, [r2, r1, lsl #2]
   1ec2c:	strne	r6, [r0]
   1ec30:	strne	r5, [r0, #4]
   1ec34:	addne	r1, r1, #1
   1ec38:	strne	r1, [r4, #16]
   1ec3c:	pop	{r4, r5, r6, r7, fp, pc}
   1ec40:	mov	r1, #1
   1ec44:	orr	r7, r1, r0, lsl #1
   1ec48:	lsl	r1, r7, #2
   1ec4c:	ldr	r0, [r4, #20]
   1ec50:	bl	22a9c <__assert_fail@plt+0x112f0>
   1ec54:	cmp	r0, #0
   1ec58:	moveq	r0, #0
   1ec5c:	popeq	{r4, r5, r6, r7, fp, pc}
   1ec60:	str	r7, [r4, #12]
   1ec64:	str	r0, [r4, #20]
   1ec68:	b	1ec10 <__assert_fail@plt+0xd464>
   1ec6c:	push	{r4, r5, r6, r7, fp, lr}
   1ec70:	add	fp, sp, #16
   1ec74:	mov	r5, r3
   1ec78:	mov	r6, r2
   1ec7c:	mov	r7, r1
   1ec80:	mov	r4, r0
   1ec84:	ldr	r1, [r0, #108]	; 0x6c
   1ec88:	ldr	r2, [r0, #112]	; 0x70
   1ec8c:	cmp	r1, r2
   1ec90:	blt	1ece0 <__assert_fail@plt+0xd534>
   1ec94:	ldr	r0, [r4, #116]	; 0x74
   1ec98:	add	r1, r2, r2, lsl #1
   1ec9c:	lsl	r1, r1, #4
   1eca0:	bl	22a9c <__assert_fail@plt+0x112f0>
   1eca4:	cmp	r0, #0
   1eca8:	beq	1ed58 <__assert_fail@plt+0xd5ac>
   1ecac:	str	r0, [r4, #116]	; 0x74
   1ecb0:	ldr	r1, [r4, #108]	; 0x6c
   1ecb4:	ldr	r2, [r4, #112]	; 0x70
   1ecb8:	add	r1, r1, r1, lsl #1
   1ecbc:	add	r0, r0, r1, lsl #3
   1ecc0:	add	r1, r2, r2, lsl #1
   1ecc4:	lsl	r2, r1, #3
   1ecc8:	mov	r1, #0
   1eccc:	bl	116b0 <memset@plt>
   1ecd0:	ldr	r1, [r4, #108]	; 0x6c
   1ecd4:	ldr	r0, [r4, #112]	; 0x70
   1ecd8:	lsl	r0, r0, #1
   1ecdc:	str	r0, [r4, #112]	; 0x70
   1ece0:	ldr	r2, [fp, #8]
   1ece4:	cmp	r1, #1
   1ece8:	blt	1ed0c <__assert_fail@plt+0xd560>
   1ecec:	ldr	r0, [r4, #116]	; 0x74
   1ecf0:	sub	r3, r1, #1
   1ecf4:	add	r3, r3, r3, lsl #1
   1ecf8:	add	r0, r0, r3, lsl #3
   1ecfc:	ldr	r3, [r0, #4]
   1ed00:	cmp	r3, r6
   1ed04:	moveq	r3, #1
   1ed08:	strbeq	r3, [r0, #20]
   1ed0c:	ldr	r3, [r4, #116]	; 0x74
   1ed10:	add	r0, r1, r1, lsl #1
   1ed14:	str	r7, [r3, r0, lsl #3]!
   1ed18:	mov	r0, #0
   1ed1c:	cmp	r2, r5
   1ed20:	mov	r7, #0
   1ed24:	mvneq	r7, #0
   1ed28:	str	r6, [r3, #4]
   1ed2c:	str	r5, [r3, #8]
   1ed30:	str	r2, [r3, #12]
   1ed34:	str	r7, [r3, #16]
   1ed38:	add	r1, r1, #1
   1ed3c:	str	r1, [r4, #108]	; 0x6c
   1ed40:	strb	r0, [r3, #20]
   1ed44:	sub	r1, r2, r5
   1ed48:	ldr	r2, [r4, #120]	; 0x78
   1ed4c:	cmp	r2, r1
   1ed50:	strlt	r1, [r4, #120]	; 0x78
   1ed54:	pop	{r4, r5, r6, r7, fp, pc}
   1ed58:	ldr	r0, [r4, #116]	; 0x74
   1ed5c:	bl	1312c <__assert_fail@plt+0x1980>
   1ed60:	mov	r0, #12
   1ed64:	pop	{r4, r5, r6, r7, fp, pc}
   1ed68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed6c:	add	fp, sp, #28
   1ed70:	sub	sp, sp, #20
   1ed74:	mov	r9, r3
   1ed78:	mov	sl, r2
   1ed7c:	mov	r4, r1
   1ed80:	mov	r7, r0
   1ed84:	ldr	r1, [r1, #4]
   1ed88:	add	r0, sp, #8
   1ed8c:	bl	1b8a0 <__assert_fail@plt+0xa0f4>
   1ed90:	cmp	r0, #0
   1ed94:	bne	1ee58 <__assert_fail@plt+0xd6ac>
   1ed98:	ldr	r0, [r4, #4]
   1ed9c:	cmp	r0, #1
   1eda0:	blt	1ee20 <__assert_fail@plt+0xd674>
   1eda4:	mov	r8, #0
   1eda8:	ldr	r0, [r4, #8]
   1edac:	ldr	r5, [r0, r8, lsl #2]
   1edb0:	add	r0, r5, r5, lsl #1
   1edb4:	ldr	r1, [r7, #24]
   1edb8:	add	r6, r1, r0, lsl #2
   1edbc:	mov	r0, r7
   1edc0:	mov	r1, r6
   1edc4:	mov	r2, sl
   1edc8:	mov	r3, r9
   1edcc:	bl	1e7c4 <__assert_fail@plt+0xd018>
   1edd0:	cmn	r0, #1
   1edd4:	beq	1edfc <__assert_fail@plt+0xd650>
   1edd8:	str	r9, [sp]
   1eddc:	mov	r0, r7
   1ede0:	add	r1, sp, #8
   1ede4:	mov	r2, r5
   1ede8:	mov	r3, sl
   1edec:	bl	1f2b0 <__assert_fail@plt+0xdb04>
   1edf0:	cmp	r0, #0
   1edf4:	beq	1ee10 <__assert_fail@plt+0xd664>
   1edf8:	b	1ee48 <__assert_fail@plt+0xd69c>
   1edfc:	add	r0, sp, #8
   1ee00:	mov	r1, r6
   1ee04:	bl	1bb5c <__assert_fail@plt+0xa3b0>
   1ee08:	cmp	r0, #0
   1ee0c:	bne	1ee48 <__assert_fail@plt+0xd69c>
   1ee10:	ldr	r0, [r4, #4]
   1ee14:	add	r8, r8, #1
   1ee18:	cmp	r8, r0
   1ee1c:	blt	1eda8 <__assert_fail@plt+0xd5fc>
   1ee20:	ldr	r0, [r4, #8]
   1ee24:	bl	1312c <__assert_fail@plt+0x1980>
   1ee28:	vldr	d16, [sp, #8]
   1ee2c:	ldr	r0, [sp, #16]
   1ee30:	str	r0, [r4, #8]
   1ee34:	vstr	d16, [r4]
   1ee38:	mov	r5, #0
   1ee3c:	mov	r0, r5
   1ee40:	sub	sp, fp, #28
   1ee44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee48:	mov	r5, r0
   1ee4c:	ldr	r0, [sp, #16]
   1ee50:	bl	1312c <__assert_fail@plt+0x1980>
   1ee54:	b	1ee3c <__assert_fail@plt+0xd690>
   1ee58:	mov	r5, r0
   1ee5c:	b	1ee3c <__assert_fail@plt+0xd690>
   1ee60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee64:	add	fp, sp, #28
   1ee68:	sub	sp, sp, #44	; 0x2c
   1ee6c:	str	r3, [sp, #8]
   1ee70:	mov	r6, r2
   1ee74:	mov	r7, r1
   1ee78:	ldr	r8, [r0, #84]	; 0x54
   1ee7c:	str	r0, [sp, #20]
   1ee80:	mov	r1, r2
   1ee84:	bl	1e60c <__assert_fail@plt+0xce60>
   1ee88:	mov	r1, #0
   1ee8c:	cmn	r0, #1
   1ee90:	beq	1f0e8 <__assert_fail@plt+0xd93c>
   1ee94:	add	r1, r0, r0, lsl #1
   1ee98:	add	sl, sp, #28
   1ee9c:	str	r8, [sp, #12]
   1eea0:	str	r7, [sp, #24]
   1eea4:	str	r1, [sp, #4]
   1eea8:	b	1eeb0 <__assert_fail@plt+0xd704>
   1eeac:	ldr	r1, [sp, #4]
   1eeb0:	ldr	r0, [sp, #20]
   1eeb4:	ldr	r0, [r0, #116]	; 0x74
   1eeb8:	add	r0, r0, r1, lsl #3
   1eebc:	add	r0, r0, #12
   1eec0:	mov	r9, r0
   1eec4:	ldr	r1, [r0, #-12]
   1eec8:	mov	r0, r7
   1eecc:	bl	1bfdc <__assert_fail@plt+0xa830>
   1eed0:	cmp	r0, #0
   1eed4:	beq	1f098 <__assert_fail@plt+0xd8ec>
   1eed8:	ldmda	r9, {r0, r1}
   1eedc:	add	r1, r1, r6
   1eee0:	sub	r5, r1, r0
   1eee4:	cmp	r5, r6
   1eee8:	bne	1ef88 <__assert_fail@plt+0xd7dc>
   1eeec:	mov	r5, r6
   1eef0:	ldr	r0, [r8, #20]
   1eef4:	ldr	r1, [r9, #-12]
   1eef8:	add	r1, r1, r1, lsl #1
   1eefc:	add	r0, r0, r1, lsl #2
   1ef00:	ldr	r0, [r0, #8]
   1ef04:	ldr	r4, [r0]
   1ef08:	mov	r0, r7
   1ef0c:	mov	r1, r4
   1ef10:	bl	1bfdc <__assert_fail@plt+0xa830>
   1ef14:	mov	r1, #4
   1ef18:	cmp	r0, #0
   1ef1c:	bne	1ef78 <__assert_fail@plt+0xd7cc>
   1ef20:	mov	r6, r8
   1ef24:	mov	r0, sl
   1ef28:	mov	r1, r4
   1ef2c:	bl	1b648 <__assert_fail@plt+0x9e9c>
   1ef30:	mov	r8, r0
   1ef34:	str	r0, [fp, #-32]	; 0xffffffe0
   1ef38:	mov	r0, r6
   1ef3c:	mov	r1, sl
   1ef40:	ldr	r2, [sp, #8]
   1ef44:	ldr	r3, [fp, #8]
   1ef48:	bl	1ed68 <__assert_fail@plt+0xd5bc>
   1ef4c:	mov	r6, r0
   1ef50:	mov	r0, r7
   1ef54:	mov	r1, sl
   1ef58:	bl	1bb5c <__assert_fail@plt+0xa3b0>
   1ef5c:	mov	r4, r0
   1ef60:	ldr	r0, [sp, #36]	; 0x24
   1ef64:	bl	1312c <__assert_fail@plt+0x1980>
   1ef68:	orr	r0, r6, r8
   1ef6c:	orrs	r0, r0, r4
   1ef70:	mov	r1, #2
   1ef74:	bne	1f0ac <__assert_fail@plt+0xd900>
   1ef78:	ldr	r8, [sp, #12]
   1ef7c:	mov	r6, r5
   1ef80:	add	sl, sp, #28
   1ef84:	b	1f088 <__assert_fail@plt+0xd8dc>
   1ef88:	ldr	r0, [sp, #20]
   1ef8c:	ldr	r0, [r0, #100]	; 0x64
   1ef90:	ldr	r0, [r0, r5, lsl #2]
   1ef94:	ldr	r1, [r9, #-12]
   1ef98:	ldr	r2, [r8, #12]
   1ef9c:	ldr	r7, [r2, r1, lsl #2]
   1efa0:	cmp	r0, #0
   1efa4:	beq	1f018 <__assert_fail@plt+0xd86c>
   1efa8:	add	r4, r0, #4
   1efac:	mov	r0, r4
   1efb0:	mov	r1, r7
   1efb4:	bl	1bfdc <__assert_fail@plt+0xa830>
   1efb8:	mov	r1, #4
   1efbc:	add	sl, sp, #28
   1efc0:	cmp	r0, #0
   1efc4:	bne	1f088 <__assert_fail@plt+0xd8dc>
   1efc8:	mov	r0, sl
   1efcc:	mov	r1, r4
   1efd0:	bl	1bf60 <__assert_fail@plt+0xa7b4>
   1efd4:	mov	r4, r0
   1efd8:	str	r0, [fp, #-32]	; 0xffffffe0
   1efdc:	mov	r0, sl
   1efe0:	mov	r1, r7
   1efe4:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1efe8:	cmp	r4, #0
   1efec:	bne	1eff8 <__assert_fail@plt+0xd84c>
   1eff0:	cmp	r0, #0
   1eff4:	bne	1f034 <__assert_fail@plt+0xd888>
   1eff8:	ldr	r0, [sp, #36]	; 0x24
   1effc:	bl	1312c <__assert_fail@plt+0x1980>
   1f000:	cmp	r4, #0
   1f004:	movweq	r4, #12
   1f008:	str	r4, [fp, #-32]	; 0xffffffe0
   1f00c:	mov	r1, #1
   1f010:	str	r4, [sp, #16]
   1f014:	b	1f088 <__assert_fail@plt+0xd8dc>
   1f018:	add	sl, sp, #28
   1f01c:	mov	r0, sl
   1f020:	mov	r1, r7
   1f024:	bl	1b648 <__assert_fail@plt+0x9e9c>
   1f028:	str	r0, [fp, #-32]	; 0xffffffe0
   1f02c:	cmp	r0, #0
   1f030:	bne	1f0cc <__assert_fail@plt+0xd920>
   1f034:	sub	r0, fp, #32
   1f038:	mov	r1, r8
   1f03c:	mov	r2, sl
   1f040:	bl	1f3b8 <__assert_fail@plt+0xdc0c>
   1f044:	ldr	r4, [sp, #20]
   1f048:	ldr	r1, [r4, #100]	; 0x64
   1f04c:	str	r0, [r1, r5, lsl #2]
   1f050:	ldr	r0, [sp, #36]	; 0x24
   1f054:	bl	1312c <__assert_fail@plt+0x1980>
   1f058:	ldr	r0, [r4, #100]	; 0x64
   1f05c:	ldr	r0, [r0, r5, lsl #2]
   1f060:	clz	r0, r0
   1f064:	lsr	r0, r0, #5
   1f068:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1f06c:	cmp	r2, #0
   1f070:	mov	r1, r2
   1f074:	movwne	r1, #1
   1f078:	ands	r1, r0, r1
   1f07c:	ldr	r0, [sp, #16]
   1f080:	movne	r0, r2
   1f084:	str	r0, [sp, #16]
   1f088:	ldr	r7, [sp, #24]
   1f08c:	cmp	r1, #0
   1f090:	cmpne	r1, #4
   1f094:	bne	1f0d4 <__assert_fail@plt+0xd928>
   1f098:	add	r0, r9, #24
   1f09c:	ldrb	r1, [r9, #8]
   1f0a0:	cmp	r1, #0
   1f0a4:	bne	1eec0 <__assert_fail@plt+0xd714>
   1f0a8:	b	1f0e4 <__assert_fail@plt+0xd938>
   1f0ac:	cmp	r6, #0
   1f0b0:	movne	r4, r6
   1f0b4:	cmp	r8, #0
   1f0b8:	movne	r4, r8
   1f0bc:	str	r4, [fp, #-32]	; 0xffffffe0
   1f0c0:	mov	r1, #1
   1f0c4:	str	r4, [sp, #16]
   1f0c8:	b	1ef78 <__assert_fail@plt+0xd7cc>
   1f0cc:	mov	r1, #1
   1f0d0:	b	1f084 <__assert_fail@plt+0xd8d8>
   1f0d4:	cmp	r1, #2
   1f0d8:	beq	1eeac <__assert_fail@plt+0xd700>
   1f0dc:	ldr	r1, [sp, #16]
   1f0e0:	b	1f0e8 <__assert_fail@plt+0xd93c>
   1f0e4:	mov	r1, #0
   1f0e8:	mov	r0, r1
   1f0ec:	sub	sp, fp, #28
   1f0f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0f8:	add	fp, sp, #28
   1f0fc:	sub	sp, sp, #36	; 0x24
   1f100:	str	r0, [sp, #12]
   1f104:	ldr	r5, [r0, #84]	; 0x54
   1f108:	mov	r0, #0
   1f10c:	str	r0, [sp, #32]
   1f110:	str	r0, [sp, #20]
   1f114:	str	r0, [sp, #16]
   1f118:	str	r0, [sp, #24]
   1f11c:	ldr	r0, [r2, #4]
   1f120:	cmp	r0, #1
   1f124:	blt	1f270 <__assert_fail@plt+0xdac4>
   1f128:	mov	sl, r3
   1f12c:	mov	r4, r2
   1f130:	mov	r6, r1
   1f134:	mov	r7, #0
   1f138:	str	r1, [sp, #8]
   1f13c:	str	r2, [sp, #4]
   1f140:	str	r3, [sp]
   1f144:	ldr	r0, [r4, #8]
   1f148:	ldr	r8, [r0, r7, lsl #2]
   1f14c:	ldr	r0, [r5]
   1f150:	add	r0, r0, r8, lsl #3
   1f154:	ldrb	r0, [r0, #6]
   1f158:	tst	r0, #16
   1f15c:	bne	1f180 <__assert_fail@plt+0xd9d4>
   1f160:	ldr	r0, [r5]
   1f164:	add	r1, r0, r8, lsl #3
   1f168:	ldr	r0, [sp, #12]
   1f16c:	mov	r2, r6
   1f170:	bl	1f890 <__assert_fail@plt+0xe0e4>
   1f174:	cmp	r0, #0
   1f178:	bne	1f248 <__assert_fail@plt+0xda9c>
   1f17c:	b	1f260 <__assert_fail@plt+0xdab4>
   1f180:	mov	r0, r5
   1f184:	mov	r1, r8
   1f188:	ldr	r9, [sp, #12]
   1f18c:	mov	r2, r9
   1f190:	mov	r3, r6
   1f194:	bl	1f5bc <__assert_fail@plt+0xde10>
   1f198:	cmp	r0, #2
   1f19c:	blt	1f240 <__assert_fail@plt+0xda94>
   1f1a0:	add	r4, r0, r6
   1f1a4:	ldr	r0, [r9, #100]	; 0x64
   1f1a8:	ldr	r0, [r0, r4, lsl #2]
   1f1ac:	ldr	r1, [r5, #12]
   1f1b0:	ldr	r2, [r1, r8, lsl #2]
   1f1b4:	mov	r1, #0
   1f1b8:	str	r1, [sp, #20]
   1f1bc:	cmp	r0, #0
   1f1c0:	mov	sl, r9
   1f1c4:	add	r6, sp, #16
   1f1c8:	beq	1f1ec <__assert_fail@plt+0xda40>
   1f1cc:	add	r1, r0, #4
   1f1d0:	mov	r0, r6
   1f1d4:	mov	r9, r2
   1f1d8:	bl	1bb5c <__assert_fail@plt+0xa3b0>
   1f1dc:	mov	r2, r9
   1f1e0:	str	r0, [sp, #32]
   1f1e4:	cmp	r0, #0
   1f1e8:	bne	1f298 <__assert_fail@plt+0xdaec>
   1f1ec:	mov	r0, r6
   1f1f0:	mov	r1, r2
   1f1f4:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1f1f8:	cmp	r0, #0
   1f1fc:	beq	1f284 <__assert_fail@plt+0xdad8>
   1f200:	mov	r2, r6
   1f204:	add	r0, sp, #32
   1f208:	mov	r1, r5
   1f20c:	bl	1f3b8 <__assert_fail@plt+0xdc0c>
   1f210:	ldr	r1, [sl, #100]	; 0x64
   1f214:	str	r0, [r1, r4, lsl #2]
   1f218:	ldr	r0, [sl, #100]	; 0x64
   1f21c:	ldr	r0, [r0, r4, lsl #2]
   1f220:	cmp	r0, #0
   1f224:	ldr	sl, [sp]
   1f228:	ldmib	sp, {r4, r6}
   1f22c:	bne	1f248 <__assert_fail@plt+0xda9c>
   1f230:	ldr	r9, [sp, #32]
   1f234:	cmp	r9, #0
   1f238:	beq	1f248 <__assert_fail@plt+0xda9c>
   1f23c:	b	1f29c <__assert_fail@plt+0xdaf0>
   1f240:	cmp	r0, #0
   1f244:	beq	1f160 <__assert_fail@plt+0xd9b4>
   1f248:	ldr	r0, [r5, #12]
   1f24c:	ldr	r1, [r0, r8, lsl #2]
   1f250:	mov	r0, sl
   1f254:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1f258:	cmp	r0, #0
   1f25c:	beq	1f284 <__assert_fail@plt+0xdad8>
   1f260:	ldr	r0, [r4, #4]
   1f264:	add	r7, r7, #1
   1f268:	cmp	r7, r0
   1f26c:	blt	1f144 <__assert_fail@plt+0xd998>
   1f270:	ldr	r0, [sp, #24]
   1f274:	bl	1312c <__assert_fail@plt+0x1980>
   1f278:	mov	r0, #0
   1f27c:	sub	sp, fp, #28
   1f280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f284:	ldr	r0, [sp, #24]
   1f288:	bl	1312c <__assert_fail@plt+0x1980>
   1f28c:	mov	r0, #12
   1f290:	sub	sp, fp, #28
   1f294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f298:	mov	r9, r0
   1f29c:	ldr	r0, [sp, #24]
   1f2a0:	bl	1312c <__assert_fail@plt+0x1980>
   1f2a4:	mov	r0, r9
   1f2a8:	sub	sp, fp, #28
   1f2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f2b4:	add	fp, sp, #24
   1f2b8:	sub	sp, sp, #8
   1f2bc:	mov	r5, r3
   1f2c0:	mov	r7, r2
   1f2c4:	mov	r4, r1
   1f2c8:	mov	r6, r0
   1f2cc:	mov	r0, r1
   1f2d0:	mov	r1, r2
   1f2d4:	bl	1bfdc <__assert_fail@plt+0xa830>
   1f2d8:	cmp	r0, #0
   1f2dc:	beq	1f2ec <__assert_fail@plt+0xdb40>
   1f2e0:	mov	r0, #0
   1f2e4:	sub	sp, fp, #24
   1f2e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f2ec:	ldr	r8, [fp, #8]
   1f2f0:	ldr	r0, [r6]
   1f2f4:	add	r1, r0, r7, lsl #3
   1f2f8:	ldrb	r1, [r1, #4]
   1f2fc:	cmp	r1, r8
   1f300:	ldreq	r0, [r0, r7, lsl #3]
   1f304:	cmpeq	r0, r5
   1f308:	beq	1f390 <__assert_fail@plt+0xdbe4>
   1f30c:	mov	r0, r4
   1f310:	mov	r1, r7
   1f314:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1f318:	cmp	r0, #0
   1f31c:	beq	1f3ac <__assert_fail@plt+0xdc00>
   1f320:	ldr	r0, [r6, #20]
   1f324:	add	r7, r7, r7, lsl #1
   1f328:	add	r0, r0, r7, lsl #2
   1f32c:	ldr	r1, [r0, #4]
   1f330:	cmp	r1, #2
   1f334:	beq	1f344 <__assert_fail@plt+0xdb98>
   1f338:	cmp	r1, #0
   1f33c:	bne	1f368 <__assert_fail@plt+0xdbbc>
   1f340:	b	1f2e0 <__assert_fail@plt+0xdb34>
   1f344:	ldr	r0, [r0, #8]
   1f348:	ldr	r2, [r0, #4]
   1f34c:	str	r8, [sp]
   1f350:	mov	r0, r6
   1f354:	mov	r1, r4
   1f358:	mov	r3, r5
   1f35c:	bl	1f2b0 <__assert_fail@plt+0xdb04>
   1f360:	cmp	r0, #0
   1f364:	bne	1f2e4 <__assert_fail@plt+0xdb38>
   1f368:	ldr	r0, [r6, #20]
   1f36c:	add	r0, r0, r7, lsl #2
   1f370:	ldr	r0, [r0, #8]
   1f374:	ldr	r7, [r0]
   1f378:	mov	r0, r4
   1f37c:	mov	r1, r7
   1f380:	bl	1bfdc <__assert_fail@plt+0xa830>
   1f384:	cmp	r0, #0
   1f388:	beq	1f2f0 <__assert_fail@plt+0xdb44>
   1f38c:	b	1f2e0 <__assert_fail@plt+0xdb34>
   1f390:	cmp	r8, #9
   1f394:	bne	1f2e0 <__assert_fail@plt+0xdb34>
   1f398:	mov	r0, r4
   1f39c:	mov	r1, r7
   1f3a0:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   1f3a4:	cmp	r0, #0
   1f3a8:	bne	1f2e0 <__assert_fail@plt+0xdb34>
   1f3ac:	mov	r0, #12
   1f3b0:	sub	sp, fp, #24
   1f3b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f3b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3bc:	add	fp, sp, #28
   1f3c0:	sub	sp, sp, #4
   1f3c4:	mov	r9, r1
   1f3c8:	ldr	r1, [r2, #4]
   1f3cc:	cmp	r1, #0
   1f3d0:	beq	1f474 <__assert_fail@plt+0xdcc8>
   1f3d4:	mov	sl, r2
   1f3d8:	str	r0, [sp]
   1f3dc:	mov	r6, #0
   1f3e0:	mov	r0, r2
   1f3e4:	mov	r1, #0
   1f3e8:	bl	1c13c <__assert_fail@plt+0xa990>
   1f3ec:	mov	r7, r0
   1f3f0:	ldr	r0, [r9, #32]
   1f3f4:	ldr	r1, [r9, #68]	; 0x44
   1f3f8:	and	r1, r1, r7
   1f3fc:	add	r1, r1, r1, lsl #1
   1f400:	mov	r5, r0
   1f404:	ldr	r2, [r5, r1, lsl #2]!
   1f408:	cmp	r2, #1
   1f40c:	blt	1f44c <__assert_fail@plt+0xdca0>
   1f410:	add	r0, r0, r1, lsl #2
   1f414:	ldr	r8, [r0, #8]
   1f418:	ldr	r4, [r8, r6, lsl #2]
   1f41c:	ldr	r0, [r4]
   1f420:	cmp	r7, r0
   1f424:	bne	1f43c <__assert_fail@plt+0xdc90>
   1f428:	add	r0, r4, #4
   1f42c:	mov	r1, sl
   1f430:	bl	1c168 <__assert_fail@plt+0xa9bc>
   1f434:	cmp	r0, #0
   1f438:	bne	1f468 <__assert_fail@plt+0xdcbc>
   1f43c:	ldr	r0, [r5]
   1f440:	add	r6, r6, #1
   1f444:	cmp	r6, r0
   1f448:	blt	1f418 <__assert_fail@plt+0xdc6c>
   1f44c:	mov	r0, r9
   1f450:	mov	r1, sl
   1f454:	mov	r2, r7
   1f458:	bl	1f494 <__assert_fail@plt+0xdce8>
   1f45c:	mov	r4, r0
   1f460:	cmp	r0, #0
   1f464:	beq	1f480 <__assert_fail@plt+0xdcd4>
   1f468:	mov	r0, r4
   1f46c:	sub	sp, fp, #28
   1f470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f474:	mov	r4, #0
   1f478:	str	r4, [r0]
   1f47c:	b	1f468 <__assert_fail@plt+0xdcbc>
   1f480:	mov	r0, #12
   1f484:	ldr	r1, [sp]
   1f488:	str	r0, [r1]
   1f48c:	mov	r4, #0
   1f490:	b	1f468 <__assert_fail@plt+0xdcbc>
   1f494:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f498:	add	fp, sp, #24
   1f49c:	mov	r8, r2
   1f4a0:	mov	r7, r1
   1f4a4:	mov	r9, r0
   1f4a8:	mov	r0, #56	; 0x38
   1f4ac:	mov	r1, #1
   1f4b0:	bl	22a18 <__assert_fail@plt+0x1126c>
   1f4b4:	cmp	r0, #0
   1f4b8:	beq	1f5b0 <__assert_fail@plt+0xde04>
   1f4bc:	mov	r4, r0
   1f4c0:	add	r5, r0, #4
   1f4c4:	mov	r0, r5
   1f4c8:	mov	r1, r7
   1f4cc:	bl	1bf60 <__assert_fail@plt+0xa7b4>
   1f4d0:	cmp	r0, #0
   1f4d4:	bne	1f59c <__assert_fail@plt+0xddf0>
   1f4d8:	str	r5, [r4, #40]	; 0x28
   1f4dc:	ldr	r0, [r7, #4]
   1f4e0:	cmp	r0, #1
   1f4e4:	blt	1f57c <__assert_fail@plt+0xddd0>
   1f4e8:	mov	r0, #0
   1f4ec:	movw	ip, #65280	; 0xff00
   1f4f0:	movt	ip, #3
   1f4f4:	add	r2, ip, #255	; 0xff
   1f4f8:	mov	lr, #32
   1f4fc:	ldr	r1, [r7, #8]
   1f500:	ldr	r1, [r1, r0, lsl #2]
   1f504:	ldr	r3, [r9]
   1f508:	add	r5, r3, r1, lsl #3
   1f50c:	ldr	r3, [r5, #4]!
   1f510:	and	r1, r3, r2
   1f514:	cmp	r1, #1
   1f518:	beq	1f56c <__assert_fail@plt+0xddc0>
   1f51c:	and	r1, lr, r3, lsr #15
   1f520:	ldrb	r6, [r4, #52]	; 0x34
   1f524:	orr	r1, r6, r1
   1f528:	strb	r1, [r4, #52]	; 0x34
   1f52c:	uxtb	r3, r3
   1f530:	cmp	r3, #12
   1f534:	beq	1f564 <__assert_fail@plt+0xddb8>
   1f538:	cmp	r3, #4
   1f53c:	beq	1f550 <__assert_fail@plt+0xdda4>
   1f540:	cmp	r3, #2
   1f544:	bne	1f558 <__assert_fail@plt+0xddac>
   1f548:	orr	r1, r1, #16
   1f54c:	b	1f568 <__assert_fail@plt+0xddbc>
   1f550:	orr	r1, r1, #64	; 0x40
   1f554:	b	1f568 <__assert_fail@plt+0xddbc>
   1f558:	ldr	r3, [r5]
   1f55c:	tst	r3, ip
   1f560:	beq	1f56c <__assert_fail@plt+0xddc0>
   1f564:	orr	r1, r1, #128	; 0x80
   1f568:	strb	r1, [r4, #52]	; 0x34
   1f56c:	ldr	r1, [r7, #4]
   1f570:	add	r0, r0, #1
   1f574:	cmp	r0, r1
   1f578:	blt	1f4fc <__assert_fail@plt+0xdd50>
   1f57c:	mov	r0, r9
   1f580:	mov	r1, r4
   1f584:	mov	r2, r8
   1f588:	bl	1c41c <__assert_fail@plt+0xac70>
   1f58c:	cmp	r0, #0
   1f590:	bne	1f5a8 <__assert_fail@plt+0xddfc>
   1f594:	mov	r0, r4
   1f598:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f59c:	mov	r0, r4
   1f5a0:	bl	1312c <__assert_fail@plt+0x1980>
   1f5a4:	b	1f5b0 <__assert_fail@plt+0xde04>
   1f5a8:	mov	r0, r4
   1f5ac:	bl	16978 <__assert_fail@plt+0x51cc>
   1f5b0:	mov	r4, #0
   1f5b4:	mov	r0, r4
   1f5b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f5bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5c0:	add	fp, sp, #28
   1f5c4:	sub	sp, sp, #4
   1f5c8:	mov	sl, r3
   1f5cc:	mov	r7, r2
   1f5d0:	mov	r5, r0
   1f5d4:	ldr	r6, [r0]
   1f5d8:	add	r0, r6, r1, lsl #3
   1f5dc:	ldrb	r8, [r0, #4]
   1f5e0:	cmp	r8, #7
   1f5e4:	beq	1f784 <__assert_fail@plt+0xdfd8>
   1f5e8:	mov	r4, r1
   1f5ec:	mov	r0, r7
   1f5f0:	mov	r1, sl
   1f5f4:	bl	1a9e4 <__assert_fail@plt+0x9238>
   1f5f8:	mov	r9, r0
   1f5fc:	mov	r2, #0
   1f600:	cmp	r8, #5
   1f604:	bne	1f648 <__assert_fail@plt+0xde9c>
   1f608:	cmp	r9, #2
   1f60c:	blt	1f770 <__assert_fail@plt+0xdfc4>
   1f610:	ldr	r0, [r5, #128]	; 0x80
   1f614:	tst	r0, #64	; 0x40
   1f618:	bne	1f62c <__assert_fail@plt+0xde80>
   1f61c:	ldr	r1, [r7, #4]
   1f620:	ldrb	r1, [r1, sl]
   1f624:	cmp	r1, #10
   1f628:	beq	1f770 <__assert_fail@plt+0xdfc4>
   1f62c:	tst	r0, #128	; 0x80
   1f630:	beq	1f76c <__assert_fail@plt+0xdfc0>
   1f634:	ldr	r0, [r7, #4]
   1f638:	ldrb	r0, [r0, sl]
   1f63c:	cmp	r0, #0
   1f640:	movne	r2, r9
   1f644:	b	1f770 <__assert_fail@plt+0xdfc4>
   1f648:	cmp	r8, #6
   1f64c:	bne	1f770 <__assert_fail@plt+0xdfc4>
   1f650:	cmp	r9, #2
   1f654:	blt	1f770 <__assert_fail@plt+0xdfc4>
   1f658:	ldr	r4, [r6, r4, lsl #3]
   1f65c:	ldr	r0, [r4, #32]
   1f660:	cmp	r0, #0
   1f664:	bne	1f680 <__assert_fail@plt+0xded4>
   1f668:	ldr	r0, [r4, #36]	; 0x24
   1f66c:	cmp	r0, #0
   1f670:	bne	1f680 <__assert_fail@plt+0xded4>
   1f674:	ldr	r0, [r4, #20]
   1f678:	cmp	r0, #0
   1f67c:	beq	1f77c <__assert_fail@plt+0xdfd0>
   1f680:	mov	r0, r7
   1f684:	mov	r1, sl
   1f688:	bl	18758 <__assert_fail@plt+0x6fac>
   1f68c:	mov	r6, r0
   1f690:	ldr	r0, [r4, #20]
   1f694:	cmp	r0, #1
   1f698:	blt	1f6c0 <__assert_fail@plt+0xdf14>
   1f69c:	ldr	r0, [r4]
   1f6a0:	mov	r1, #0
   1f6a4:	ldr	r2, [r0, r1, lsl #2]
   1f6a8:	cmp	r6, r2
   1f6ac:	beq	1f740 <__assert_fail@plt+0xdf94>
   1f6b0:	add	r1, r1, #1
   1f6b4:	ldr	r2, [r4, #20]
   1f6b8:	cmp	r1, r2
   1f6bc:	blt	1f6a4 <__assert_fail@plt+0xdef8>
   1f6c0:	ldr	r0, [r4, #36]	; 0x24
   1f6c4:	cmp	r0, #1
   1f6c8:	blt	1f6f8 <__assert_fail@plt+0xdf4c>
   1f6cc:	mov	r5, #0
   1f6d0:	ldr	r0, [r4, #12]
   1f6d4:	ldr	r1, [r0, r5, lsl #2]
   1f6d8:	mov	r0, r6
   1f6dc:	bl	1144c <iswctype@plt>
   1f6e0:	cmp	r0, #0
   1f6e4:	bne	1f740 <__assert_fail@plt+0xdf94>
   1f6e8:	add	r5, r5, #1
   1f6ec:	ldr	r0, [r4, #36]	; 0x24
   1f6f0:	cmp	r5, r0
   1f6f4:	blt	1f6d0 <__assert_fail@plt+0xdf24>
   1f6f8:	ldr	r0, [r4, #32]
   1f6fc:	cmp	r0, #1
   1f700:	blt	1f738 <__assert_fail@plt+0xdf8c>
   1f704:	ldr	r0, [r4, #4]
   1f708:	mov	r1, #0
   1f70c:	ldr	r2, [r0, r1, lsl #2]
   1f710:	cmp	r2, r6
   1f714:	bhi	1f728 <__assert_fail@plt+0xdf7c>
   1f718:	ldr	r2, [r4, #8]
   1f71c:	ldr	r2, [r2, r1, lsl #2]
   1f720:	cmp	r6, r2
   1f724:	bls	1f740 <__assert_fail@plt+0xdf94>
   1f728:	add	r1, r1, #1
   1f72c:	ldr	r2, [r4, #32]
   1f730:	cmp	r1, r2
   1f734:	blt	1f70c <__assert_fail@plt+0xdf60>
   1f738:	mov	r0, #0
   1f73c:	b	1f744 <__assert_fail@plt+0xdf98>
   1f740:	mov	r0, r9
   1f744:	ldrb	r1, [r4, #16]
   1f748:	tst	r1, #1
   1f74c:	mov	r2, #0
   1f750:	bne	1f75c <__assert_fail@plt+0xdfb0>
   1f754:	mov	r2, r0
   1f758:	b	1f770 <__assert_fail@plt+0xdfc4>
   1f75c:	cmp	r0, #0
   1f760:	bgt	1f770 <__assert_fail@plt+0xdfc4>
   1f764:	cmp	r9, #1
   1f768:	movle	r9, #1
   1f76c:	mov	r2, r9
   1f770:	mov	r0, r2
   1f774:	sub	sp, fp, #28
   1f778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f77c:	mov	r6, #0
   1f780:	b	1f690 <__assert_fail@plt+0xdee4>
   1f784:	ldr	r0, [r7, #4]
   1f788:	ldrb	r5, [r0, sl]
   1f78c:	mov	r2, #0
   1f790:	cmp	r5, #194	; 0xc2
   1f794:	bcc	1f770 <__assert_fail@plt+0xdfc4>
   1f798:	ldr	r1, [r7, #48]	; 0x30
   1f79c:	add	r2, sl, #2
   1f7a0:	cmp	r2, r1
   1f7a4:	ble	1f7b0 <__assert_fail@plt+0xe004>
   1f7a8:	mov	r2, #0
   1f7ac:	b	1f770 <__assert_fail@plt+0xdfc4>
   1f7b0:	add	r0, r0, sl
   1f7b4:	ldrb	r3, [r0, #1]
   1f7b8:	cmp	r5, #223	; 0xdf
   1f7bc:	bhi	1f7dc <__assert_fail@plt+0xe030>
   1f7c0:	mov	r2, #2
   1f7c4:	cmp	r3, #191	; 0xbf
   1f7c8:	movwhi	r2, #0
   1f7cc:	sxtb	r0, r3
   1f7d0:	cmn	r0, #1
   1f7d4:	movwgt	r2, #0
   1f7d8:	b	1f770 <__assert_fail@plt+0xdfc4>
   1f7dc:	cmp	r5, #239	; 0xef
   1f7e0:	bhi	1f7fc <__assert_fail@plt+0xe050>
   1f7e4:	mov	r2, #3
   1f7e8:	cmp	r5, #224	; 0xe0
   1f7ec:	bne	1f858 <__assert_fail@plt+0xe0ac>
   1f7f0:	cmp	r3, #160	; 0xa0
   1f7f4:	bcc	1f7a8 <__assert_fail@plt+0xdffc>
   1f7f8:	b	1f858 <__assert_fail@plt+0xe0ac>
   1f7fc:	cmp	r5, #247	; 0xf7
   1f800:	bhi	1f81c <__assert_fail@plt+0xe070>
   1f804:	mov	r2, #4
   1f808:	cmp	r5, #240	; 0xf0
   1f80c:	bne	1f858 <__assert_fail@plt+0xe0ac>
   1f810:	cmp	r3, #144	; 0x90
   1f814:	bcc	1f7a8 <__assert_fail@plt+0xdffc>
   1f818:	b	1f858 <__assert_fail@plt+0xe0ac>
   1f81c:	cmp	r5, #251	; 0xfb
   1f820:	bhi	1f83c <__assert_fail@plt+0xe090>
   1f824:	mov	r2, #5
   1f828:	cmp	r5, #248	; 0xf8
   1f82c:	bne	1f858 <__assert_fail@plt+0xe0ac>
   1f830:	cmp	r3, #136	; 0x88
   1f834:	bcc	1f7a8 <__assert_fail@plt+0xdffc>
   1f838:	b	1f858 <__assert_fail@plt+0xe0ac>
   1f83c:	cmp	r5, #253	; 0xfd
   1f840:	bhi	1f7a8 <__assert_fail@plt+0xdffc>
   1f844:	mov	r2, #6
   1f848:	cmp	r5, #252	; 0xfc
   1f84c:	bne	1f858 <__assert_fail@plt+0xe0ac>
   1f850:	cmp	r3, #132	; 0x84
   1f854:	bcc	1f7a8 <__assert_fail@plt+0xdffc>
   1f858:	add	r3, r2, sl
   1f85c:	cmp	r3, r1
   1f860:	bgt	1f7a8 <__assert_fail@plt+0xdffc>
   1f864:	mov	r1, #1
   1f868:	ldrb	r3, [r0, r1]
   1f86c:	sxtb	r7, r3
   1f870:	cmn	r7, #1
   1f874:	bgt	1f7a8 <__assert_fail@plt+0xdffc>
   1f878:	cmp	r3, #191	; 0xbf
   1f87c:	bhi	1f7a8 <__assert_fail@plt+0xdffc>
   1f880:	add	r1, r1, #1
   1f884:	cmp	r1, r2
   1f888:	bcc	1f868 <__assert_fail@plt+0xe0bc>
   1f88c:	b	1f770 <__assert_fail@plt+0xdfc4>
   1f890:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f894:	add	fp, sp, #24
   1f898:	mov	r6, r0
   1f89c:	ldr	r7, [r1, #4]
   1f8a0:	mvn	r0, #0
   1f8a4:	uxtab	r0, r0, r7
   1f8a8:	mov	r8, #0
   1f8ac:	cmp	r0, #6
   1f8b0:	bhi	1f9bc <__assert_fail@plt+0xe210>
   1f8b4:	mov	r5, r2
   1f8b8:	ldr	r2, [r6, #4]
   1f8bc:	ldrb	r2, [r2, r5]
   1f8c0:	sxtb	r3, r2
   1f8c4:	add	r4, pc, #0
   1f8c8:	ldr	pc, [r4, r0, lsl #2]
   1f8cc:	andeq	pc, r1, r8, ror #17
   1f8d0:			; <UNDEFINED> instruction: 0x0001f9bc
   1f8d4:	strdeq	pc, [r1], -ip
   1f8d8:			; <UNDEFINED> instruction: 0x0001f9bc
   1f8dc:	andeq	pc, r1, ip, lsl r9	; <UNPREDICTABLE>
   1f8e0:			; <UNDEFINED> instruction: 0x0001f9bc
   1f8e4:	andeq	pc, r1, r4, lsl r9	; <UNPREDICTABLE>
   1f8e8:	ldrb	r0, [r1]
   1f8ec:	uxtb	r1, r3
   1f8f0:	cmp	r0, r1
   1f8f4:	beq	1f950 <__assert_fail@plt+0xe1a4>
   1f8f8:	b	1f9bc <__assert_fail@plt+0xe210>
   1f8fc:	ldr	r0, [r1]
   1f900:	mov	r1, r2
   1f904:	bl	1d8b0 <__assert_fail@plt+0xc104>
   1f908:	cmp	r0, #0
   1f90c:	bne	1f950 <__assert_fail@plt+0xe1a4>
   1f910:	b	1f9bc <__assert_fail@plt+0xe210>
   1f914:	cmp	r3, #0
   1f918:	blt	1f9bc <__assert_fail@plt+0xe210>
   1f91c:	cmp	r2, #0
   1f920:	beq	1f940 <__assert_fail@plt+0xe194>
   1f924:	cmp	r2, #10
   1f928:	bne	1f950 <__assert_fail@plt+0xe1a4>
   1f92c:	ldr	r0, [r6, #84]	; 0x54
   1f930:	ldrb	r0, [r0, #128]	; 0x80
   1f934:	tst	r0, #64	; 0x40
   1f938:	bne	1f950 <__assert_fail@plt+0xe1a4>
   1f93c:	b	1f9bc <__assert_fail@plt+0xe210>
   1f940:	ldr	r0, [r6, #84]	; 0x54
   1f944:	ldrb	r0, [r0, #128]	; 0x80
   1f948:	tst	r0, #128	; 0x80
   1f94c:	bne	1f9bc <__assert_fail@plt+0xe210>
   1f950:	movw	r0, #65280	; 0xff00
   1f954:	movt	r0, #3
   1f958:	tst	r7, r0
   1f95c:	beq	1f9b8 <__assert_fail@plt+0xe20c>
   1f960:	ldr	r2, [r6, #88]	; 0x58
   1f964:	mov	r0, r6
   1f968:	mov	r1, r5
   1f96c:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1f970:	and	r1, r0, #1
   1f974:	tst	r7, #1024	; 0x400
   1f978:	beq	1f984 <__assert_fail@plt+0xe1d8>
   1f97c:	cmp	r1, #0
   1f980:	beq	1f9bc <__assert_fail@plt+0xe210>
   1f984:	tst	r7, #2048	; 0x800
   1f988:	cmpne	r1, #0
   1f98c:	bne	1f9bc <__assert_fail@plt+0xe210>
   1f990:	tst	r7, #8192	; 0x2000
   1f994:	beq	1f9a0 <__assert_fail@plt+0xe1f4>
   1f998:	ands	r1, r0, #2
   1f99c:	beq	1f9bc <__assert_fail@plt+0xe210>
   1f9a0:	and	r1, r7, #32768	; 0x8000
   1f9a4:	mov	r2, #1
   1f9a8:	eor	r1, r2, r1, lsr #15
   1f9ac:	and	r0, r0, #8
   1f9b0:	orr	r0, r1, r0, lsr #3
   1f9b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f9b8:	mov	r8, #1
   1f9bc:	mov	r0, r8
   1f9c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f9c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9c8:	add	fp, sp, #28
   1f9cc:	sub	sp, sp, #20
   1f9d0:	mov	r5, r0
   1f9d4:	ldr	r0, [r1, #8]
   1f9d8:	cmp	r0, #1
   1f9dc:	blt	1fb7c <__assert_fail@plt+0xe3d0>
   1f9e0:	mov	r4, r1
   1f9e4:	ldr	sl, [r5, #84]	; 0x54
   1f9e8:	mov	r8, #0
   1f9ec:	movw	r9, #65280	; 0xff00
   1f9f0:	movt	r9, #3
   1f9f4:	ldr	r0, [r4, #12]
   1f9f8:	ldr	r7, [r0, r8, lsl #2]
   1f9fc:	ldr	r0, [sl]
   1fa00:	add	r0, r0, r7, lsl #3
   1fa04:	ldr	r6, [r0, #4]
   1fa08:	tst	r6, #1048576	; 0x100000
   1fa0c:	beq	1fb6c <__assert_fail@plt+0xe3c0>
   1fa10:	tst	r6, r9
   1fa14:	beq	1fa68 <__assert_fail@plt+0xe2bc>
   1fa18:	ldr	r1, [r5, #40]	; 0x28
   1fa1c:	ldr	r2, [r5, #88]	; 0x58
   1fa20:	mov	r0, r5
   1fa24:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1fa28:	and	r1, r0, #1
   1fa2c:	tst	r6, #1024	; 0x400
   1fa30:	beq	1fa3c <__assert_fail@plt+0xe290>
   1fa34:	cmp	r1, #0
   1fa38:	beq	1fb6c <__assert_fail@plt+0xe3c0>
   1fa3c:	tst	r6, #2048	; 0x800
   1fa40:	cmpne	r1, #0
   1fa44:	bne	1fb6c <__assert_fail@plt+0xe3c0>
   1fa48:	tst	r6, #8192	; 0x2000
   1fa4c:	beq	1fa58 <__assert_fail@plt+0xe2ac>
   1fa50:	ands	r1, r0, #2
   1fa54:	beq	1fb6c <__assert_fail@plt+0xe3c0>
   1fa58:	tst	r6, #32768	; 0x8000
   1fa5c:	beq	1fa68 <__assert_fail@plt+0xe2bc>
   1fa60:	ands	r0, r0, #8
   1fa64:	beq	1fb6c <__assert_fail@plt+0xe3c0>
   1fa68:	ldr	r3, [r5, #40]	; 0x28
   1fa6c:	mov	r0, sl
   1fa70:	mov	r1, r7
   1fa74:	mov	r2, r5
   1fa78:	bl	1f5bc <__assert_fail@plt+0xde10>
   1fa7c:	cmp	r0, #0
   1fa80:	beq	1fb6c <__assert_fail@plt+0xe3c0>
   1fa84:	ldr	r1, [r5, #40]	; 0x28
   1fa88:	ldr	r2, [r5, #120]	; 0x78
   1fa8c:	cmp	r2, r0
   1fa90:	movlt	r2, r0
   1fa94:	str	r2, [r5, #120]	; 0x78
   1fa98:	add	r6, r1, r0
   1fa9c:	mov	r0, r5
   1faa0:	mov	r1, r6
   1faa4:	bl	1e698 <__assert_fail@plt+0xceec>
   1faa8:	str	r0, [sp, #16]
   1faac:	cmp	r0, #0
   1fab0:	bne	1fb80 <__assert_fail@plt+0xe3d4>
   1fab4:	ldr	r0, [r5, #100]	; 0x64
   1fab8:	ldr	r9, [r0, r6, lsl #2]
   1fabc:	ldr	r0, [sl, #12]
   1fac0:	ldr	r1, [sl, #24]
   1fac4:	ldr	r0, [r0, r7, lsl #2]
   1fac8:	add	r0, r0, r0, lsl #1
   1facc:	add	r2, r1, r0, lsl #2
   1fad0:	cmp	r9, #0
   1fad4:	beq	1faf8 <__assert_fail@plt+0xe34c>
   1fad8:	ldr	r1, [r9, #40]	; 0x28
   1fadc:	mov	r7, sp
   1fae0:	mov	r0, r7
   1fae4:	bl	1e3dc <__assert_fail@plt+0xcc30>
   1fae8:	str	r0, [sp, #16]
   1faec:	cmp	r0, #0
   1faf0:	beq	1fb0c <__assert_fail@plt+0xe360>
   1faf4:	b	1fb80 <__assert_fail@plt+0xe3d4>
   1faf8:	vldr	d16, [r2]
   1fafc:	ldr	r0, [r2, #8]
   1fb00:	str	r0, [sp, #8]
   1fb04:	vstr	d16, [sp]
   1fb08:	mov	r7, sp
   1fb0c:	ldr	r2, [r5, #88]	; 0x58
   1fb10:	sub	r1, r6, #1
   1fb14:	mov	r0, r5
   1fb18:	bl	1d738 <__assert_fail@plt+0xbf8c>
   1fb1c:	mov	r3, r0
   1fb20:	add	r0, sp, #16
   1fb24:	mov	r1, sl
   1fb28:	mov	r2, r7
   1fb2c:	bl	1c048 <__assert_fail@plt+0xa89c>
   1fb30:	ldr	r1, [r5, #100]	; 0x64
   1fb34:	str	r0, [r1, r6, lsl #2]
   1fb38:	cmp	r9, #0
   1fb3c:	beq	1fb48 <__assert_fail@plt+0xe39c>
   1fb40:	ldr	r0, [sp, #8]
   1fb44:	bl	1312c <__assert_fail@plt+0x1980>
   1fb48:	ldr	r0, [r5, #100]	; 0x64
   1fb4c:	ldr	r0, [r0, r6, lsl #2]
   1fb50:	cmp	r0, #0
   1fb54:	movw	r9, #65280	; 0xff00
   1fb58:	movt	r9, #3
   1fb5c:	bne	1fb6c <__assert_fail@plt+0xe3c0>
   1fb60:	ldr	r0, [sp, #16]
   1fb64:	cmp	r0, #0
   1fb68:	bne	1fb80 <__assert_fail@plt+0xe3d4>
   1fb6c:	add	r8, r8, #1
   1fb70:	ldr	r0, [r4, #8]
   1fb74:	cmp	r8, r0
   1fb78:	blt	1f9f4 <__assert_fail@plt+0xe248>
   1fb7c:	mov	r0, #0
   1fb80:	sub	sp, fp, #28
   1fb84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb8c:	add	fp, sp, #28
   1fb90:	sub	sp, sp, #68	; 0x44
   1fb94:	sub	sp, sp, #14336	; 0x3800
   1fb98:	mov	r4, r1
   1fb9c:	mov	r7, r0
   1fba0:	mov	r6, #0
   1fba4:	str	r6, [r1, #44]	; 0x2c
   1fba8:	str	r6, [r1, #48]	; 0x30
   1fbac:	sub	lr, fp, #4096	; 0x1000
   1fbb0:	sub	r2, lr, #2128	; 0x850
   1fbb4:	add	r3, sp, #16
   1fbb8:	bl	20038 <__assert_fail@plt+0xe88c>
   1fbbc:	cmp	r0, #0
   1fbc0:	ble	1ff50 <__assert_fail@plt+0xe7a4>
   1fbc4:	mov	r5, r0
   1fbc8:	str	r4, [sp, #4]
   1fbcc:	add	r1, r0, #1
   1fbd0:	sub	r0, fp, #3120	; 0xc30
   1fbd4:	bl	1b8a0 <__assert_fail@plt+0xa0f4>
   1fbd8:	str	r0, [fp, #-36]	; 0xffffffdc
   1fbdc:	cmp	r0, #0
   1fbe0:	bne	1ff1c <__assert_fail@plt+0xe770>
   1fbe4:	sub	r0, fp, #3152	; 0xc50
   1fbe8:	bl	20568 <__assert_fail@plt+0xedbc>
   1fbec:	sub	r9, fp, #3120	; 0xc30
   1fbf0:	sub	lr, fp, #1024	; 0x400
   1fbf4:	sub	r6, lr, #36	; 0x24
   1fbf8:	mov	sl, #0
   1fbfc:	mov	r0, #0
   1fc00:	str	r0, [sp, #8]
   1fc04:	str	r5, [sp, #12]
   1fc08:	mov	r0, #0
   1fc0c:	str	r0, [fp, #-3116]	; 0xfffff3d4
   1fc10:	add	r0, sl, sl, lsl #1
   1fc14:	sub	lr, fp, #4096	; 0x1000
   1fc18:	sub	r1, lr, #2128	; 0x850
   1fc1c:	add	r0, r1, r0, lsl #2
   1fc20:	mov	r4, r0
   1fc24:	ldr	r1, [r4, #4]!
   1fc28:	cmp	r1, #1
   1fc2c:	blt	1fc90 <__assert_fail@plt+0xe4e4>
   1fc30:	ldr	r5, [r0, #8]
   1fc34:	mov	r6, #0
   1fc38:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1fc3c:	ldr	r0, [r5, r6, lsl #2]
   1fc40:	ldr	r2, [r7, #12]
   1fc44:	ldr	r0, [r2, r0, lsl #2]
   1fc48:	cmn	r0, #1
   1fc4c:	beq	1fc70 <__assert_fail@plt+0xe4c4>
   1fc50:	ldr	r1, [r7, #24]
   1fc54:	add	r0, r0, r0, lsl #1
   1fc58:	add	r1, r1, r0, lsl #2
   1fc5c:	mov	r0, r9
   1fc60:	bl	1bb5c <__assert_fail@plt+0xa3b0>
   1fc64:	mov	r1, #0
   1fc68:	cmp	r0, #0
   1fc6c:	bne	1ff14 <__assert_fail@plt+0xe768>
   1fc70:	ldr	r0, [r4]
   1fc74:	add	r6, r6, #1
   1fc78:	cmp	r6, r0
   1fc7c:	blt	1fc3c <__assert_fail@plt+0xe490>
   1fc80:	str	r1, [fp, #-36]	; 0xffffffdc
   1fc84:	ldr	r5, [sp, #12]
   1fc88:	sub	lr, fp, #1024	; 0x400
   1fc8c:	sub	r6, lr, #36	; 0x24
   1fc90:	sub	r0, fp, #36	; 0x24
   1fc94:	mov	r1, r7
   1fc98:	mov	r2, r9
   1fc9c:	mov	r3, #0
   1fca0:	bl	1c048 <__assert_fail@plt+0xa89c>
   1fca4:	mov	r8, r0
   1fca8:	str	r0, [r6, sl, lsl #2]
   1fcac:	cmp	r0, #0
   1fcb0:	bne	1fcc0 <__assert_fail@plt+0xe514>
   1fcb4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1fcb8:	cmp	r0, #0
   1fcbc:	bne	1ff1c <__assert_fail@plt+0xe770>
   1fcc0:	ldrsb	r0, [r8, #52]	; 0x34
   1fcc4:	cmn	r0, #1
   1fcc8:	ble	1fcec <__assert_fail@plt+0xe540>
   1fccc:	sub	lr, fp, #2048	; 0x800
   1fcd0:	sub	r0, lr, #36	; 0x24
   1fcd4:	str	r8, [r0, sl, lsl #2]
   1fcd8:	ldr	r0, [r6, sl, lsl #2]
   1fcdc:	sub	lr, fp, #3072	; 0xc00
   1fce0:	sub	r1, lr, #36	; 0x24
   1fce4:	str	r0, [r1, sl, lsl #2]
   1fce8:	b	1fd78 <__assert_fail@plt+0xe5cc>
   1fcec:	sub	r0, fp, #36	; 0x24
   1fcf0:	mov	r1, r7
   1fcf4:	mov	r2, r9
   1fcf8:	mov	r3, #1
   1fcfc:	bl	1c048 <__assert_fail@plt+0xa89c>
   1fd00:	sub	lr, fp, #2048	; 0x800
   1fd04:	sub	r1, lr, #36	; 0x24
   1fd08:	str	r0, [r1, sl, lsl #2]
   1fd0c:	cmp	r0, #0
   1fd10:	bne	1fd20 <__assert_fail@plt+0xe574>
   1fd14:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1fd18:	cmp	r1, #0
   1fd1c:	bne	1ff1c <__assert_fail@plt+0xe770>
   1fd20:	cmp	r8, r0
   1fd24:	beq	1fd44 <__assert_fail@plt+0xe598>
   1fd28:	ldr	r0, [r7, #92]	; 0x5c
   1fd2c:	cmp	r0, #1
   1fd30:	mov	r0, #0
   1fd34:	movwgt	r0, #1
   1fd38:	ldr	r1, [sp, #8]
   1fd3c:	orr	r1, r1, r0
   1fd40:	str	r1, [sp, #8]
   1fd44:	sub	r0, fp, #36	; 0x24
   1fd48:	mov	r1, r7
   1fd4c:	mov	r2, r9
   1fd50:	mov	r3, #2
   1fd54:	bl	1c048 <__assert_fail@plt+0xa89c>
   1fd58:	sub	lr, fp, #3072	; 0xc00
   1fd5c:	sub	r1, lr, #36	; 0x24
   1fd60:	str	r0, [r1, sl, lsl #2]
   1fd64:	cmp	r0, #0
   1fd68:	bne	1fd78 <__assert_fail@plt+0xe5cc>
   1fd6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1fd70:	cmp	r0, #0
   1fd74:	bne	1ff1c <__assert_fail@plt+0xe770>
   1fd78:	add	r0, sp, #16
   1fd7c:	add	r1, r0, sl, lsl #5
   1fd80:	sub	r0, fp, #3152	; 0xc50
   1fd84:	bl	20578 <__assert_fail@plt+0xedcc>
   1fd88:	add	sl, sl, #1
   1fd8c:	cmp	sl, r5
   1fd90:	blt	1fc08 <__assert_fail@plt+0xe45c>
   1fd94:	ldr	r0, [sp, #8]
   1fd98:	tst	r0, #1
   1fd9c:	bne	1ff74 <__assert_fail@plt+0xe7c8>
   1fda0:	mov	r0, #4
   1fda4:	mov	r1, #256	; 0x100
   1fda8:	bl	22a18 <__assert_fail@plt+0x1126c>
   1fdac:	mov	r8, r0
   1fdb0:	ldr	r0, [sp, #4]
   1fdb4:	str	r8, [r0, #44]	; 0x2c
   1fdb8:	cmp	r8, #0
   1fdbc:	beq	1ff1c <__assert_fail@plt+0xe770>
   1fdc0:	mov	r0, #0
   1fdc4:	mov	r1, #0
   1fdc8:	add	r5, sp, #16
   1fdcc:	mov	r9, r5
   1fdd0:	sub	r2, fp, #3152	; 0xc50
   1fdd4:	ldr	r2, [r2, r1, lsl #2]
   1fdd8:	cmp	r2, #0
   1fddc:	beq	1fe54 <__assert_fail@plt+0xe6a8>
   1fde0:	add	r3, r7, r1, lsl #2
   1fde4:	add	ip, r3, #96	; 0x60
   1fde8:	lsl	r4, r1, #5
   1fdec:	mov	r6, #1
   1fdf0:	b	1fe34 <__assert_fail@plt+0xe688>
   1fdf4:	mov	lr, #0
   1fdf8:	ldr	r3, [r9, lr, lsl #3]
   1fdfc:	add	lr, lr, #4
   1fe00:	tst	r3, r6
   1fe04:	beq	1fdf8 <__assert_fail@plt+0xe64c>
   1fe08:	ldr	r3, [ip]
   1fe0c:	tst	r3, r6
   1fe10:	sub	r3, fp, #2048	; 0x800
   1fe14:	sub	r3, r3, #36	; 0x24
   1fe18:	sub	r5, fp, #1024	; 0x400
   1fe1c:	sub	r5, r5, #36	; 0x24
   1fe20:	moveq	r3, r5
   1fe24:	add	r3, r3, lr
   1fe28:	ldr	r3, [r3, #-4]
   1fe2c:	str	r3, [r8, r4, lsl #2]
   1fe30:	b	1fe3c <__assert_fail@plt+0xe690>
   1fe34:	tst	r2, #1
   1fe38:	bne	1fdf4 <__assert_fail@plt+0xe648>
   1fe3c:	add	r4, r4, #1
   1fe40:	lsr	r3, r2, #1
   1fe44:	lsl	r6, r6, #1
   1fe48:	cmp	r0, r2, lsr #1
   1fe4c:	mov	r2, r3
   1fe50:	bne	1fe34 <__assert_fail@plt+0xe688>
   1fe54:	add	r9, r9, #4
   1fe58:	add	r1, r1, #1
   1fe5c:	cmp	r1, #8
   1fe60:	bne	1fdd0 <__assert_fail@plt+0xe624>
   1fe64:	sub	r0, fp, #3152	; 0xc50
   1fe68:	mov	r1, #10
   1fe6c:	bl	1d8b0 <__assert_fail@plt+0xc104>
   1fe70:	cmp	r0, #0
   1fe74:	beq	1fed4 <__assert_fail@plt+0xe728>
   1fe78:	ldr	r0, [sp, #12]
   1fe7c:	cmp	r0, #1
   1fe80:	blt	1fed4 <__assert_fail@plt+0xe728>
   1fe84:	mov	r4, #0
   1fe88:	add	r5, sp, #16
   1fe8c:	mov	r0, r5
   1fe90:	mov	r1, #10
   1fe94:	bl	1d8b0 <__assert_fail@plt+0xc104>
   1fe98:	cmp	r0, #0
   1fe9c:	bne	1feb8 <__assert_fail@plt+0xe70c>
   1fea0:	add	r5, r5, #32
   1fea4:	add	r4, r4, #1
   1fea8:	ldr	r0, [sp, #12]
   1feac:	cmp	r4, r0
   1feb0:	blt	1fe8c <__assert_fail@plt+0xe6e0>
   1feb4:	b	1fed4 <__assert_fail@plt+0xe728>
   1feb8:	sub	lr, fp, #3072	; 0xc00
   1febc:	sub	r0, lr, #36	; 0x24
   1fec0:	ldr	r0, [r0, r4, lsl #2]
   1fec4:	str	r0, [r8, #40]	; 0x28
   1fec8:	ldr	r1, [sp, #8]
   1fecc:	tst	r1, #1
   1fed0:	strne	r0, [r8, #1064]	; 0x428
   1fed4:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   1fed8:	bl	1312c <__assert_fail@plt+0x1980>
   1fedc:	mov	r6, #1
   1fee0:	ldr	r5, [sp, #12]
   1fee4:	cmp	r5, #1
   1fee8:	blt	1ff08 <__assert_fail@plt+0xe75c>
   1feec:	sub	lr, fp, #4096	; 0x1000
   1fef0:	sub	r0, lr, #2128	; 0x850
   1fef4:	add	r4, r0, #8
   1fef8:	ldr	r0, [r4], #12
   1fefc:	bl	1312c <__assert_fail@plt+0x1980>
   1ff00:	subs	r5, r5, #1
   1ff04:	bne	1fef8 <__assert_fail@plt+0xe74c>
   1ff08:	mov	r0, r6
   1ff0c:	sub	sp, fp, #28
   1ff10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff14:	str	r0, [fp, #-36]	; 0xffffffdc
   1ff18:	ldr	r5, [sp, #12]
   1ff1c:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   1ff20:	bl	1312c <__assert_fail@plt+0x1980>
   1ff24:	mov	r6, #0
   1ff28:	cmp	r5, #1
   1ff2c:	blt	1ff08 <__assert_fail@plt+0xe75c>
   1ff30:	sub	lr, fp, #4096	; 0x1000
   1ff34:	sub	r0, lr, #2128	; 0x850
   1ff38:	add	r4, r0, #8
   1ff3c:	ldr	r0, [r4], #12
   1ff40:	bl	1312c <__assert_fail@plt+0x1980>
   1ff44:	subs	r5, r5, #1
   1ff48:	bne	1ff3c <__assert_fail@plt+0xe790>
   1ff4c:	b	1ff08 <__assert_fail@plt+0xe75c>
   1ff50:	bne	1ff08 <__assert_fail@plt+0xe75c>
   1ff54:	mov	r0, #4
   1ff58:	mov	r1, #256	; 0x100
   1ff5c:	bl	22a18 <__assert_fail@plt+0x1126c>
   1ff60:	mov	r6, r0
   1ff64:	str	r0, [r4, #44]	; 0x2c
   1ff68:	cmp	r0, #0
   1ff6c:	movwne	r6, #1
   1ff70:	b	1ff08 <__assert_fail@plt+0xe75c>
   1ff74:	mov	r0, #4
   1ff78:	mov	r1, #512	; 0x200
   1ff7c:	bl	22a18 <__assert_fail@plt+0x1126c>
   1ff80:	mov	r8, r0
   1ff84:	ldr	r0, [sp, #4]
   1ff88:	str	r8, [r0, #48]	; 0x30
   1ff8c:	cmp	r8, #0
   1ff90:	beq	1ff1c <__assert_fail@plt+0xe770>
   1ff94:	sub	ip, r6, #4
   1ff98:	sub	lr, fp, #2048	; 0x800
   1ff9c:	sub	r0, lr, #36	; 0x24
   1ffa0:	sub	lr, r0, #4
   1ffa4:	mov	r2, #0
   1ffa8:	add	r3, sp, #16
   1ffac:	mov	r7, #0
   1ffb0:	sub	r0, fp, #3152	; 0xc50
   1ffb4:	ldr	r5, [r0, r7, lsl #2]
   1ffb8:	cmp	r5, #0
   1ffbc:	beq	20024 <__assert_fail@plt+0xe878>
   1ffc0:	lsl	r0, r7, #5
   1ffc4:	mov	r1, #1
   1ffc8:	b	20004 <__assert_fail@plt+0xe858>
   1ffcc:	mov	r4, r3
   1ffd0:	mov	sl, ip
   1ffd4:	mov	r9, lr
   1ffd8:	add	sl, sl, #4
   1ffdc:	add	r9, r9, #4
   1ffe0:	ldr	r6, [r4], #32
   1ffe4:	tst	r6, r1
   1ffe8:	beq	1ffd8 <__assert_fail@plt+0xe82c>
   1ffec:	ldr	r4, [sl]
   1fff0:	mov	r6, r8
   1fff4:	str	r4, [r6, r0, lsl #2]!
   1fff8:	ldr	r4, [r9]
   1fffc:	str	r4, [r6, #1024]	; 0x400
   20000:	b	2000c <__assert_fail@plt+0xe860>
   20004:	tst	r5, #1
   20008:	bne	1ffcc <__assert_fail@plt+0xe820>
   2000c:	add	r0, r0, #1
   20010:	lsr	r4, r5, #1
   20014:	lsl	r1, r1, #1
   20018:	cmp	r2, r5, lsr #1
   2001c:	mov	r5, r4
   20020:	bne	20004 <__assert_fail@plt+0xe858>
   20024:	add	r3, r3, #4
   20028:	add	r7, r7, #1
   2002c:	cmp	r7, #8
   20030:	bne	1ffb0 <__assert_fail@plt+0xe804>
   20034:	b	1fe64 <__assert_fail@plt+0xe6b8>
   20038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2003c:	add	fp, sp, #28
   20040:	sub	sp, sp, #148	; 0x94
   20044:	str	r3, [sp, #40]	; 0x28
   20048:	str	r2, [sp, #36]	; 0x24
   2004c:	mov	r8, r1
   20050:	mov	sl, r0
   20054:	sub	r7, fp, #64	; 0x40
   20058:	mov	r0, r7
   2005c:	bl	20568 <__assert_fail@plt+0xedbc>
   20060:	ldr	r0, [r8, #8]
   20064:	cmp	r0, #1
   20068:	blt	20524 <__assert_fail@plt+0xed78>
   2006c:	add	r4, sl, #96	; 0x60
   20070:	mov	r6, #0
   20074:	add	r5, sp, #80	; 0x50
   20078:	mov	r0, #0
   2007c:	str	r0, [sp, #44]	; 0x2c
   20080:	str	r8, [sp, #16]
   20084:	stm	sp, {r4, sl}
   20088:	ldr	r0, [r8, #12]
   2008c:	ldr	r0, [r0, r6, lsl #2]
   20090:	ldr	r1, [sl]
   20094:	add	r3, r1, r0, lsl #3
   20098:	ldr	r9, [r3, #4]!
   2009c:	uxtb	r2, r9
   200a0:	cmp	r2, #1
   200a4:	str	r2, [sp, #32]
   200a8:	bne	20184 <__assert_fail@plt+0xe9d8>
   200ac:	str	r3, [sp, #12]
   200b0:	str	r0, [sp, #28]
   200b4:	str	r1, [sp, #24]
   200b8:	ldrb	r1, [r1, r0, lsl #3]
   200bc:	mov	r0, r7
   200c0:	bl	19d78 <__assert_fail@plt+0x85cc>
   200c4:	movw	r0, #65280	; 0xff00
   200c8:	movt	r0, #3
   200cc:	ands	r0, r9, r0
   200d0:	beq	20320 <__assert_fail@plt+0xeb74>
   200d4:	tst	r9, #8192	; 0x2000
   200d8:	beq	2010c <__assert_fail@plt+0xe960>
   200dc:	mov	r0, r7
   200e0:	mov	r1, #10
   200e4:	bl	1d8b0 <__assert_fail@plt+0xc104>
   200e8:	str	r0, [sp, #8]
   200ec:	mov	r0, r7
   200f0:	bl	20568 <__assert_fail@plt+0xedbc>
   200f4:	ldr	r0, [sp, #8]
   200f8:	cmp	r0, #0
   200fc:	beq	204fc <__assert_fail@plt+0xed50>
   20100:	mov	r0, r7
   20104:	mov	r1, #10
   20108:	bl	19d78 <__assert_fail@plt+0x85cc>
   2010c:	tst	r9, #32768	; 0x8000
   20110:	bne	202e0 <__assert_fail@plt+0xeb34>
   20114:	tst	r9, #1024	; 0x400
   20118:	beq	20274 <__assert_fail@plt+0xeac8>
   2011c:	ldr	r0, [sp, #32]
   20120:	cmp	r0, #1
   20124:	bne	20138 <__assert_fail@plt+0xe98c>
   20128:	ldr	r0, [sp, #12]
   2012c:	ldrb	r0, [r0, #2]
   20130:	tst	r0, #64	; 0x40
   20134:	beq	202e0 <__assert_fail@plt+0xeb34>
   20138:	mov	ip, r6
   2013c:	ldr	r0, [sl, #92]	; 0x5c
   20140:	cmp	r0, #1
   20144:	ble	20240 <__assert_fail@plt+0xea94>
   20148:	ldr	r1, [sl, #60]	; 0x3c
   2014c:	mov	r0, #0
   20150:	mov	r2, #0
   20154:	ldr	r3, [r4, r2, lsl #2]
   20158:	ldr	r6, [r1, r2, lsl #2]
   2015c:	mvn	r6, r6
   20160:	orr	r3, r3, r6
   20164:	ldr	r6, [r7, r2, lsl #2]
   20168:	and	r3, r6, r3
   2016c:	str	r3, [r7, r2, lsl #2]
   20170:	orr	r0, r3, r0
   20174:	add	r2, r2, #1
   20178:	cmp	r2, #8
   2017c:	bne	20154 <__assert_fail@plt+0xe9a8>
   20180:	b	20268 <__assert_fail@plt+0xeabc>
   20184:	cmp	r2, #7
   20188:	beq	201b8 <__assert_fail@plt+0xea0c>
   2018c:	cmp	r2, #5
   20190:	beq	201dc <__assert_fail@plt+0xea30>
   20194:	cmp	r2, #3
   20198:	bne	204fc <__assert_fail@plt+0xed50>
   2019c:	str	r3, [sp, #12]
   201a0:	str	r0, [sp, #28]
   201a4:	str	r1, [sp, #24]
   201a8:	ldr	r1, [r1, r0, lsl #3]
   201ac:	mov	r0, r7
   201b0:	bl	20578 <__assert_fail@plt+0xedcc>
   201b4:	b	200c4 <__assert_fail@plt+0xe918>
   201b8:	str	r3, [sp, #12]
   201bc:	str	r1, [sp, #24]
   201c0:	str	r0, [sp, #28]
   201c4:	mvn	r0, #0
   201c8:	str	r0, [fp, #-52]	; 0xffffffcc
   201cc:	str	r0, [fp, #-56]	; 0xffffffc8
   201d0:	str	r0, [fp, #-60]	; 0xffffffc4
   201d4:	str	r0, [fp, #-64]	; 0xffffffc0
   201d8:	b	2020c <__assert_fail@plt+0xea60>
   201dc:	str	r3, [sp, #12]
   201e0:	str	r1, [sp, #24]
   201e4:	str	r0, [sp, #28]
   201e8:	ldr	r0, [sl, #92]	; 0x5c
   201ec:	cmp	r0, #2
   201f0:	blt	20204 <__assert_fail@plt+0xea58>
   201f4:	ldr	r1, [sl, #60]	; 0x3c
   201f8:	mov	r0, r7
   201fc:	bl	20578 <__assert_fail@plt+0xedcc>
   20200:	b	2020c <__assert_fail@plt+0xea60>
   20204:	mov	r0, r7
   20208:	bl	2059c <__assert_fail@plt+0xedf0>
   2020c:	ldrb	r0, [sl, #128]	; 0x80
   20210:	tst	r0, #64	; 0x40
   20214:	bne	20224 <__assert_fail@plt+0xea78>
   20218:	mov	r0, r7
   2021c:	mov	r1, #10
   20220:	bl	205c4 <__assert_fail@plt+0xee18>
   20224:	ldrb	r0, [sl, #128]	; 0x80
   20228:	tst	r0, #128	; 0x80
   2022c:	beq	200c4 <__assert_fail@plt+0xe918>
   20230:	mov	r0, r7
   20234:	mov	r1, #0
   20238:	bl	205c4 <__assert_fail@plt+0xee18>
   2023c:	b	200c4 <__assert_fail@plt+0xe918>
   20240:	mov	r0, #0
   20244:	mov	r1, #0
   20248:	ldr	r2, [r4, r1, lsl #2]
   2024c:	ldr	r3, [r7, r1, lsl #2]
   20250:	and	r2, r3, r2
   20254:	str	r2, [r7, r1, lsl #2]
   20258:	orr	r0, r2, r0
   2025c:	add	r1, r1, #1
   20260:	cmp	r1, #8
   20264:	bne	20248 <__assert_fail@plt+0xea9c>
   20268:	cmp	r0, #0
   2026c:	mov	r6, ip
   20270:	beq	204fc <__assert_fail@plt+0xed50>
   20274:	tst	r9, #2048	; 0x800
   20278:	beq	20320 <__assert_fail@plt+0xeb74>
   2027c:	ldr	r0, [sp, #32]
   20280:	cmp	r0, #1
   20284:	bne	20298 <__assert_fail@plt+0xeaec>
   20288:	ldr	r0, [sp, #12]
   2028c:	ldrb	r0, [r0, #2]
   20290:	tst	r0, #64	; 0x40
   20294:	bne	202e0 <__assert_fail@plt+0xeb34>
   20298:	ldr	r0, [sl, #92]	; 0x5c
   2029c:	mov	ip, r6
   202a0:	cmp	r0, #1
   202a4:	ble	202ec <__assert_fail@plt+0xeb40>
   202a8:	ldr	r1, [sl, #60]	; 0x3c
   202ac:	mov	r0, #0
   202b0:	mov	r2, #0
   202b4:	ldr	r3, [r4, r2, lsl #2]
   202b8:	ldr	r6, [r1, r2, lsl #2]
   202bc:	and	r3, r6, r3
   202c0:	ldr	r6, [r7, r2, lsl #2]
   202c4:	bic	r3, r6, r3
   202c8:	str	r3, [r7, r2, lsl #2]
   202cc:	orr	r0, r3, r0
   202d0:	add	r2, r2, #1
   202d4:	cmp	r2, #8
   202d8:	bne	202b4 <__assert_fail@plt+0xeb08>
   202dc:	b	20314 <__assert_fail@plt+0xeb68>
   202e0:	mov	r0, r7
   202e4:	bl	20568 <__assert_fail@plt+0xedbc>
   202e8:	b	204fc <__assert_fail@plt+0xed50>
   202ec:	mov	r0, #0
   202f0:	mov	r1, #0
   202f4:	ldr	r2, [r4, r1, lsl #2]
   202f8:	ldr	r3, [r7, r1, lsl #2]
   202fc:	bic	r2, r3, r2
   20300:	str	r2, [r7, r1, lsl #2]
   20304:	orr	r0, r2, r0
   20308:	add	r1, r1, #1
   2030c:	cmp	r1, #8
   20310:	bne	202f4 <__assert_fail@plt+0xeb48>
   20314:	cmp	r0, #0
   20318:	mov	r6, ip
   2031c:	beq	204fc <__assert_fail@plt+0xed50>
   20320:	str	r6, [sp, #20]
   20324:	ldr	r9, [sp, #44]	; 0x2c
   20328:	mov	r6, #0
   2032c:	cmp	r9, #1
   20330:	blt	20484 <__assert_fail@plt+0xecd8>
   20334:	ldr	sl, [sp, #40]	; 0x28
   20338:	ldr	r4, [sp, #32]
   2033c:	cmp	r4, #1
   20340:	bne	20364 <__assert_fail@plt+0xebb8>
   20344:	ldr	r0, [sp, #28]
   20348:	ldr	r1, [sp, #24]
   2034c:	ldrb	r1, [r1, r0, lsl #3]
   20350:	ldr	r0, [sp, #40]	; 0x28
   20354:	add	r0, r0, r6, lsl #5
   20358:	bl	1d8b0 <__assert_fail@plt+0xc104>
   2035c:	cmp	r0, #0
   20360:	beq	20474 <__assert_fail@plt+0xecc8>
   20364:	mov	r0, #0
   20368:	mov	r1, #0
   2036c:	ldr	r2, [r7, r1, lsl #2]
   20370:	ldr	r3, [sl, r1, lsl #2]
   20374:	and	r2, r3, r2
   20378:	str	r2, [r5, r1, lsl #2]
   2037c:	orr	r0, r2, r0
   20380:	add	r1, r1, #1
   20384:	cmp	r1, #8
   20388:	bne	2036c <__assert_fail@plt+0xebc0>
   2038c:	cmp	r0, #0
   20390:	beq	20474 <__assert_fail@plt+0xecc8>
   20394:	mov	r8, r9
   20398:	mov	r9, #0
   2039c:	mov	r0, #0
   203a0:	mov	r1, #0
   203a4:	add	r5, sp, #48	; 0x30
   203a8:	ldr	r2, [r7, r1, lsl #2]
   203ac:	ldr	r3, [sl, r1, lsl #2]
   203b0:	bic	r4, r3, r2
   203b4:	str	r4, [r5, r1, lsl #2]
   203b8:	bic	r2, r2, r3
   203bc:	str	r2, [r7, r1, lsl #2]
   203c0:	orr	r9, r2, r9
   203c4:	orr	r0, r4, r0
   203c8:	add	r1, r1, #1
   203cc:	cmp	r1, #8
   203d0:	bne	203a8 <__assert_fail@plt+0xebfc>
   203d4:	cmp	r0, #0
   203d8:	beq	20428 <__assert_fail@plt+0xec7c>
   203dc:	ldr	r4, [sp, #40]	; 0x28
   203e0:	add	r0, r4, r8, lsl #5
   203e4:	add	r1, sp, #48	; 0x30
   203e8:	bl	205e8 <__assert_fail@plt+0xee3c>
   203ec:	add	r0, r4, r6, lsl #5
   203f0:	add	r5, sp, #80	; 0x50
   203f4:	mov	r1, r5
   203f8:	bl	205e8 <__assert_fail@plt+0xee3c>
   203fc:	add	r0, r8, r8, lsl #1
   20400:	ldr	r2, [sp, #36]	; 0x24
   20404:	add	r0, r2, r0, lsl #2
   20408:	add	r1, r6, r6, lsl #1
   2040c:	add	r1, r2, r1, lsl #2
   20410:	bl	1bf60 <__assert_fail@plt+0xa7b4>
   20414:	cmp	r0, #0
   20418:	bne	20538 <__assert_fail@plt+0xed8c>
   2041c:	add	r8, r8, #1
   20420:	str	r8, [sp, #44]	; 0x2c
   20424:	b	20430 <__assert_fail@plt+0xec84>
   20428:	str	r8, [sp, #44]	; 0x2c
   2042c:	add	r5, sp, #80	; 0x50
   20430:	ldr	r8, [sp, #16]
   20434:	ldr	r0, [r8, #12]
   20438:	ldr	r1, [sp, #20]
   2043c:	ldr	r1, [r0, r1, lsl #2]
   20440:	add	r0, r6, r6, lsl #1
   20444:	ldr	r2, [sp, #36]	; 0x24
   20448:	add	r0, r2, r0, lsl #2
   2044c:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   20450:	cmp	r0, #0
   20454:	beq	2053c <__assert_fail@plt+0xed90>
   20458:	cmp	r9, #0
   2045c:	mov	r0, #0
   20460:	movweq	r0, #17
   20464:	cmp	r0, #0
   20468:	bne	204dc <__assert_fail@plt+0xed30>
   2046c:	ldr	r9, [sp, #44]	; 0x2c
   20470:	ldr	r4, [sp, #32]
   20474:	add	sl, sl, #32
   20478:	add	r6, r6, #1
   2047c:	cmp	r6, r9
   20480:	blt	2033c <__assert_fail@plt+0xeb90>
   20484:	cmp	r6, r9
   20488:	bne	204f0 <__assert_fail@plt+0xed44>
   2048c:	ldr	r0, [sp, #40]	; 0x28
   20490:	add	r0, r0, r9, lsl #5
   20494:	mov	r1, r7
   20498:	bl	205e8 <__assert_fail@plt+0xee3c>
   2049c:	ldr	r0, [r8, #12]
   204a0:	ldr	r6, [sp, #20]
   204a4:	ldr	r1, [r0, r6, lsl #2]
   204a8:	add	r0, r9, r9, lsl #1
   204ac:	ldr	r2, [sp, #36]	; 0x24
   204b0:	add	r0, r2, r0, lsl #2
   204b4:	bl	1b648 <__assert_fail@plt+0x9e9c>
   204b8:	cmp	r0, #0
   204bc:	ldr	sl, [sp, #4]
   204c0:	bne	20540 <__assert_fail@plt+0xed94>
   204c4:	mov	r0, r7
   204c8:	bl	20568 <__assert_fail@plt+0xedbc>
   204cc:	add	r9, r9, #1
   204d0:	str	r9, [sp, #44]	; 0x2c
   204d4:	ldr	r4, [sp]
   204d8:	b	204fc <__assert_fail@plt+0xed50>
   204dc:	cmp	r0, #17
   204e0:	bne	20510 <__assert_fail@plt+0xed64>
   204e4:	ldr	r9, [sp, #44]	; 0x2c
   204e8:	cmp	r6, r9
   204ec:	beq	2048c <__assert_fail@plt+0xece0>
   204f0:	str	r9, [sp, #44]	; 0x2c
   204f4:	ldm	sp, {r4, sl}
   204f8:	ldr	r6, [sp, #20]
   204fc:	ldr	r0, [r8, #8]
   20500:	add	r6, r6, #1
   20504:	cmp	r6, r0
   20508:	blt	20088 <__assert_fail@plt+0xe8dc>
   2050c:	b	2052c <__assert_fail@plt+0xed80>
   20510:	cmp	r9, #0
   20514:	ldm	sp, {r4, sl}
   20518:	ldr	r6, [sp, #20]
   2051c:	bne	204fc <__assert_fail@plt+0xed50>
   20520:	b	2052c <__assert_fail@plt+0xed80>
   20524:	mov	r0, #0
   20528:	str	r0, [sp, #44]	; 0x2c
   2052c:	ldr	r0, [sp, #44]	; 0x2c
   20530:	sub	sp, fp, #28
   20534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20538:	str	r8, [sp, #44]	; 0x2c
   2053c:	ldr	r9, [sp, #44]	; 0x2c
   20540:	cmp	r9, #1
   20544:	blt	20560 <__assert_fail@plt+0xedb4>
   20548:	ldr	r0, [sp, #36]	; 0x24
   2054c:	add	r5, r0, #8
   20550:	ldr	r0, [r5], #12
   20554:	bl	1312c <__assert_fail@plt+0x1980>
   20558:	subs	r9, r9, #1
   2055c:	bne	20550 <__assert_fail@plt+0xeda4>
   20560:	mvn	r0, #0
   20564:	b	20528 <__assert_fail@plt+0xed7c>
   20568:	vmov.i32	q8, #0	; 0x00000000
   2056c:	vst1.32	{d16-d17}, [r0]!
   20570:	vst1.32	{d16-d17}, [r0]
   20574:	bx	lr
   20578:	mov	r2, #0
   2057c:	ldr	ip, [r1, r2, lsl #2]
   20580:	ldr	r3, [r0, r2, lsl #2]
   20584:	orr	r3, r3, ip
   20588:	str	r3, [r0, r2, lsl #2]
   2058c:	add	r2, r2, #1
   20590:	cmp	r2, #8
   20594:	bne	2057c <__assert_fail@plt+0xedd0>
   20598:	bx	lr
   2059c:	mvn	r1, #0
   205a0:	str	r1, [r0]
   205a4:	str	r1, [r0, #4]
   205a8:	str	r1, [r0, #8]
   205ac:	str	r1, [r0, #12]
   205b0:	str	r1, [r0, #16]
   205b4:	str	r1, [r0, #20]
   205b8:	str	r1, [r0, #24]
   205bc:	str	r1, [r0, #28]
   205c0:	bx	lr
   205c4:	asr	r2, r1, #31
   205c8:	add	r2, r1, r2, lsr #27
   205cc:	asr	r2, r2, #5
   205d0:	ldr	ip, [r0, r2, lsl #2]
   205d4:	and	r1, r1, #31
   205d8:	mov	r3, #1
   205dc:	bic	r1, ip, r3, lsl r1
   205e0:	str	r1, [r0, r2, lsl #2]
   205e4:	bx	lr
   205e8:	vld1.32	{d16-d17}, [r1]!
   205ec:	vld1.32	{d18-d19}, [r1]
   205f0:	vst1.32	{d16-d17}, [r0]!
   205f4:	vst1.32	{d18-d19}, [r0]
   205f8:	bx	lr
   205fc:	ldr	r0, [r0]
   20600:	add	r0, r0, r1, lsl #3
   20604:	ldr	r1, [r0, #4]
   20608:	uxtb	r3, r1
   2060c:	mov	r0, #0
   20610:	cmp	r3, #2
   20614:	bne	2066c <__assert_fail@plt+0xeec0>
   20618:	movw	r3, #65280	; 0xff00
   2061c:	movt	r3, #3
   20620:	tst	r1, r3
   20624:	moveq	r0, #1
   20628:	bxeq	lr
   2062c:	ands	ip, r2, #1
   20630:	bne	2063c <__assert_fail@plt+0xee90>
   20634:	ands	r3, r1, #1024	; 0x400
   20638:	bne	2066c <__assert_fail@plt+0xeec0>
   2063c:	cmp	ip, #0
   20640:	andsne	r3, r1, #2048	; 0x800
   20644:	bne	2066c <__assert_fail@plt+0xeec0>
   20648:	tst	r2, #2
   2064c:	bne	20658 <__assert_fail@plt+0xeeac>
   20650:	ands	r3, r1, #8192	; 0x2000
   20654:	bxne	lr
   20658:	and	r0, r1, #32768	; 0x8000
   2065c:	mov	r1, #1
   20660:	eor	r0, r1, r0, lsr #15
   20664:	and	r1, r2, #8
   20668:	orr	r0, r0, r1, lsr #3
   2066c:	bx	lr
   20670:	stm	r0, {r1, r2, r3}
   20674:	mov	r1, #0
   20678:	str	r1, [r0, #24]
   2067c:	str	r1, [r0, #20]
   20680:	str	r1, [r0, #16]
   20684:	ldr	r1, [sp]
   20688:	str	r1, [r0, #12]
   2068c:	bx	lr
   20690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20694:	add	fp, sp, #28
   20698:	sub	sp, sp, #12
   2069c:	mov	sl, r1
   206a0:	mov	r6, r0
   206a4:	ldr	r1, [r1, #8]
   206a8:	ldr	r5, [sl, #12]
   206ac:	mov	r0, sp
   206b0:	bl	1b648 <__assert_fail@plt+0x9e9c>
   206b4:	cmp	r0, #0
   206b8:	bne	20794 <__assert_fail@plt+0xefe8>
   206bc:	mov	r3, sp
   206c0:	mov	r0, r6
   206c4:	mov	r1, sl
   206c8:	mov	r2, r5
   206cc:	bl	20848 <__assert_fail@plt+0xf09c>
   206d0:	cmp	r0, #0
   206d4:	bne	20760 <__assert_fail@plt+0xefb4>
   206d8:	mov	r9, #0
   206dc:	mov	r8, sp
   206e0:	mov	r1, #0
   206e4:	cmp	r5, #1
   206e8:	blt	20768 <__assert_fail@plt+0xefbc>
   206ec:	ldr	r0, [sl]
   206f0:	ldr	r2, [r0, r5, lsl #2]
   206f4:	cmp	r2, #0
   206f8:	mov	r4, #0
   206fc:	addeq	r4, r1, #1
   20700:	ldr	r1, [r6, #120]	; 0x78
   20704:	cmp	r4, r1
   20708:	bgt	20770 <__assert_fail@plt+0xefc4>
   2070c:	str	r9, [sp, #4]
   20710:	ldr	r0, [r6, #100]	; 0x64
   20714:	sub	r5, r5, #1
   20718:	ldr	r0, [r0, r5, lsl #2]
   2071c:	cmp	r0, #0
   20720:	beq	20740 <__assert_fail@plt+0xef94>
   20724:	mov	r0, r6
   20728:	mov	r1, sl
   2072c:	mov	r2, r5
   20730:	mov	r3, r8
   20734:	bl	20970 <__assert_fail@plt+0xf1c4>
   20738:	cmp	r0, #0
   2073c:	bne	20760 <__assert_fail@plt+0xefb4>
   20740:	mov	r0, r6
   20744:	mov	r1, sl
   20748:	mov	r2, r5
   2074c:	mov	r3, r8
   20750:	bl	20848 <__assert_fail@plt+0xf09c>
   20754:	cmp	r0, #0
   20758:	mov	r1, r4
   2075c:	beq	206e4 <__assert_fail@plt+0xef38>
   20760:	mov	r7, r0
   20764:	b	20780 <__assert_fail@plt+0xefd4>
   20768:	mov	r7, #0
   2076c:	b	20780 <__assert_fail@plt+0xefd4>
   20770:	lsl	r2, r5, #2
   20774:	mov	r7, #0
   20778:	mov	r1, #0
   2077c:	bl	116b0 <memset@plt>
   20780:	ldr	r0, [sp, #8]
   20784:	bl	1312c <__assert_fail@plt+0x1980>
   20788:	mov	r0, r7
   2078c:	sub	sp, fp, #28
   20790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20794:	mov	r7, r0
   20798:	b	20788 <__assert_fail@plt+0xefdc>
   2079c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207a0:	add	fp, sp, #28
   207a4:	sub	sp, sp, #20
   207a8:	cmp	r3, #1
   207ac:	blt	2083c <__assert_fail@plt+0xf090>
   207b0:	mov	r4, r3
   207b4:	mov	r5, r2
   207b8:	mov	r6, r1
   207bc:	mov	sl, r0
   207c0:	mov	r7, #0
   207c4:	add	r8, sp, #4
   207c8:	add	r9, sp, #16
   207cc:	ldr	r0, [r5, r7, lsl #2]
   207d0:	ldr	r1, [r6, r7, lsl #2]
   207d4:	cmp	r1, #0
   207d8:	beq	2082c <__assert_fail@plt+0xf080>
   207dc:	cmp	r0, #0
   207e0:	beq	20830 <__assert_fail@plt+0xf084>
   207e4:	add	r1, r1, #4
   207e8:	add	r2, r0, #4
   207ec:	mov	r0, r8
   207f0:	bl	1e3dc <__assert_fail@plt+0xcc30>
   207f4:	str	r0, [sp, #16]
   207f8:	cmp	r0, #0
   207fc:	bne	20840 <__assert_fail@plt+0xf094>
   20800:	mov	r0, r9
   20804:	mov	r1, sl
   20808:	mov	r2, r8
   2080c:	bl	1f3b8 <__assert_fail@plt+0xdc0c>
   20810:	str	r0, [r6, r7, lsl #2]
   20814:	ldr	r0, [sp, #12]
   20818:	bl	1312c <__assert_fail@plt+0x1980>
   2081c:	ldr	r0, [sp, #16]
   20820:	cmp	r0, #0
   20824:	beq	20830 <__assert_fail@plt+0xf084>
   20828:	b	20840 <__assert_fail@plt+0xf094>
   2082c:	str	r0, [r6, r7, lsl #2]
   20830:	add	r7, r7, #1
   20834:	cmp	r7, r4
   20838:	blt	207cc <__assert_fail@plt+0xf020>
   2083c:	mov	r0, #0
   20840:	sub	sp, fp, #28
   20844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2084c:	add	fp, sp, #28
   20850:	sub	sp, sp, #12
   20854:	mov	sl, r2
   20858:	mov	r8, r1
   2085c:	mov	r6, r0
   20860:	ldr	r9, [r0, #84]	; 0x54
   20864:	mov	r0, #0
   20868:	str	r0, [sp, #8]
   2086c:	ldr	r1, [r6, #100]	; 0x64
   20870:	ldr	r7, [r1, r2, lsl #2]
   20874:	cmp	r7, #0
   20878:	mov	r4, r7
   2087c:	addne	r4, r4, #4
   20880:	ldr	r1, [r3, #4]
   20884:	cmp	r1, #0
   20888:	beq	20918 <__assert_fail@plt+0xf16c>
   2088c:	mov	r5, r3
   20890:	cmp	r7, #0
   20894:	beq	208e8 <__assert_fail@plt+0xf13c>
   20898:	mov	r0, r9
   2089c:	mov	r1, r5
   208a0:	mov	r2, r4
   208a4:	bl	20ab4 <__assert_fail@plt+0xf308>
   208a8:	str	r0, [sp, #8]
   208ac:	cmp	r0, #0
   208b0:	bne	20940 <__assert_fail@plt+0xf194>
   208b4:	ldr	r0, [r8, #20]
   208b8:	cmp	r0, #0
   208bc:	beq	208e8 <__assert_fail@plt+0xf13c>
   208c0:	ldr	r0, [r6, #116]	; 0x74
   208c4:	stm	sp, {r0, sl}
   208c8:	add	r3, r8, #16
   208cc:	mov	r0, r9
   208d0:	mov	r1, r5
   208d4:	mov	r2, r4
   208d8:	bl	20b8c <__assert_fail@plt+0xf3e0>
   208dc:	str	r0, [sp, #8]
   208e0:	cmp	r0, #0
   208e4:	bne	20940 <__assert_fail@plt+0xf194>
   208e8:	add	r0, sp, #8
   208ec:	mov	r1, r9
   208f0:	mov	r2, r5
   208f4:	bl	1f3b8 <__assert_fail@plt+0xdc0c>
   208f8:	ldr	r1, [r8]
   208fc:	str	r0, [r1, sl, lsl #2]
   20900:	ldr	r0, [sp, #8]
   20904:	cmp	r0, #0
   20908:	bne	20940 <__assert_fail@plt+0xf194>
   2090c:	cmp	r7, #0
   20910:	bne	20928 <__assert_fail@plt+0xf17c>
   20914:	b	2093c <__assert_fail@plt+0xf190>
   20918:	ldr	r1, [r8]
   2091c:	str	r0, [r1, sl, lsl #2]
   20920:	cmp	r7, #0
   20924:	beq	2093c <__assert_fail@plt+0xf190>
   20928:	ldr	r0, [r6, #100]	; 0x64
   2092c:	ldr	r0, [r0, sl, lsl #2]
   20930:	ldrb	r0, [r0, #52]	; 0x34
   20934:	tst	r0, #64	; 0x40
   20938:	bne	20948 <__assert_fail@plt+0xf19c>
   2093c:	mov	r0, #0
   20940:	sub	sp, fp, #28
   20944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20948:	mov	r0, r6
   2094c:	mov	r1, r8
   20950:	mov	r2, sl
   20954:	mov	r3, r4
   20958:	bl	20dd0 <__assert_fail@plt+0xf624>
   2095c:	str	r0, [sp, #8]
   20960:	cmp	r0, #0
   20964:	moveq	r0, #0
   20968:	sub	sp, fp, #28
   2096c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20974:	add	fp, sp, #28
   20978:	sub	sp, sp, #20
   2097c:	str	r3, [sp, #12]
   20980:	mov	sl, r0
   20984:	ldr	r0, [r0, #100]	; 0x64
   20988:	ldr	r7, [r0, r2, lsl #2]
   2098c:	ldr	r0, [r7, #20]
   20990:	cmp	r0, #1
   20994:	blt	20a9c <__assert_fail@plt+0xf2f0>
   20998:	mov	r5, r2
   2099c:	mov	r6, r1
   209a0:	ldr	r8, [sl, #84]	; 0x54
   209a4:	add	r0, r1, #16
   209a8:	str	r0, [sp, #8]
   209ac:	add	r0, r2, #1
   209b0:	str	r0, [sp, #16]
   209b4:	mov	r9, #0
   209b8:	ldr	r0, [r7, #24]
   209bc:	ldr	r4, [r0, r9, lsl #2]
   209c0:	ldr	r0, [r8]
   209c4:	add	r0, r0, r4, lsl #3
   209c8:	ldrb	r0, [r0, #6]
   209cc:	tst	r0, #16
   209d0:	beq	209f8 <__assert_fail@plt+0xf24c>
   209d4:	ldr	r0, [r6, #12]
   209d8:	str	r0, [sp]
   209dc:	mov	r0, sl
   209e0:	mov	r1, r6
   209e4:	mov	r2, r4
   209e8:	mov	r3, r5
   209ec:	bl	217b8 <__assert_fail@plt+0x1000c>
   209f0:	cmp	r0, #0
   209f4:	bne	20a48 <__assert_fail@plt+0xf29c>
   209f8:	ldr	r0, [r8]
   209fc:	add	r1, r0, r4, lsl #3
   20a00:	mov	r0, sl
   20a04:	mov	r2, r5
   20a08:	bl	1f890 <__assert_fail@plt+0xe0e4>
   20a0c:	cmp	r0, #0
   20a10:	beq	20a8c <__assert_fail@plt+0xf2e0>
   20a14:	ldr	r0, [r6]
   20a18:	ldr	r1, [sp, #16]
   20a1c:	ldr	r0, [r0, r1, lsl #2]
   20a20:	cmp	r0, #0
   20a24:	beq	20a8c <__assert_fail@plt+0xf2e0>
   20a28:	ldr	r1, [r8, #12]
   20a2c:	ldr	r1, [r1, r4, lsl #2]
   20a30:	add	r0, r0, #4
   20a34:	bl	1bfdc <__assert_fail@plt+0xa830>
   20a38:	mov	r1, r0
   20a3c:	mov	r0, #1
   20a40:	cmp	r1, #0
   20a44:	beq	20a8c <__assert_fail@plt+0xf2e0>
   20a48:	ldr	r1, [r6, #20]
   20a4c:	cmp	r1, #0
   20a50:	beq	20a78 <__assert_fail@plt+0xf2cc>
   20a54:	ldr	r1, [r8, #12]
   20a58:	ldr	r2, [r1, r4, lsl #2]
   20a5c:	stm	sp, {r4, r5}
   20a60:	add	r3, r0, r5
   20a64:	mov	r0, sl
   20a68:	ldr	r1, [sp, #8]
   20a6c:	bl	21450 <__assert_fail@plt+0xfca4>
   20a70:	cmp	r0, #0
   20a74:	bne	20a8c <__assert_fail@plt+0xf2e0>
   20a78:	ldr	r0, [sp, #12]
   20a7c:	mov	r1, r4
   20a80:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   20a84:	cmp	r0, #0
   20a88:	beq	20aa8 <__assert_fail@plt+0xf2fc>
   20a8c:	add	r9, r9, #1
   20a90:	ldr	r0, [r7, #20]
   20a94:	cmp	r9, r0
   20a98:	blt	209b8 <__assert_fail@plt+0xf20c>
   20a9c:	mov	r0, #0
   20aa0:	sub	sp, fp, #28
   20aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20aa8:	mov	r0, #12
   20aac:	sub	sp, fp, #28
   20ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ab4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20ab8:	add	fp, sp, #24
   20abc:	sub	sp, sp, #8
   20ac0:	mov	r8, r2
   20ac4:	mov	r5, r1
   20ac8:	mov	r6, r0
   20acc:	mov	r0, #0
   20ad0:	str	r0, [sp, #4]
   20ad4:	add	r0, sp, #4
   20ad8:	mov	r1, r6
   20adc:	mov	r2, r5
   20ae0:	bl	1f3b8 <__assert_fail@plt+0xdc0c>
   20ae4:	ldr	r9, [sp, #4]
   20ae8:	cmp	r9, #0
   20aec:	bne	20b78 <__assert_fail@plt+0xf3cc>
   20af0:	mov	r7, r0
   20af4:	ldr	r0, [r7, #28]!
   20af8:	cmp	r0, #0
   20afc:	bne	20b64 <__assert_fail@plt+0xf3b8>
   20b00:	ldr	r1, [r5, #4]
   20b04:	mov	r0, r7
   20b08:	bl	1b8a0 <__assert_fail@plt+0xa0f4>
   20b0c:	str	r0, [sp, #4]
   20b10:	mov	r9, #12
   20b14:	cmp	r0, #0
   20b18:	bne	20b78 <__assert_fail@plt+0xf3cc>
   20b1c:	ldr	r0, [r5, #4]
   20b20:	cmp	r0, #1
   20b24:	blt	20b64 <__assert_fail@plt+0xf3b8>
   20b28:	mov	r4, #0
   20b2c:	ldr	r0, [r5, #8]
   20b30:	ldr	r0, [r0, r4, lsl #2]
   20b34:	add	r0, r0, r0, lsl #1
   20b38:	ldr	r1, [r6, #28]
   20b3c:	add	r1, r1, r0, lsl #2
   20b40:	mov	r0, r7
   20b44:	bl	1bb5c <__assert_fail@plt+0xa3b0>
   20b48:	cmp	r0, #0
   20b4c:	bne	20b84 <__assert_fail@plt+0xf3d8>
   20b50:	add	r4, r4, #1
   20b54:	ldr	r1, [r5, #4]
   20b58:	cmp	r4, r1
   20b5c:	blt	20b2c <__assert_fail@plt+0xf380>
   20b60:	str	r0, [sp, #4]
   20b64:	mov	r0, r5
   20b68:	mov	r1, r8
   20b6c:	mov	r2, r7
   20b70:	bl	210bc <__assert_fail@plt+0xf910>
   20b74:	mov	r9, r0
   20b78:	mov	r0, r9
   20b7c:	sub	sp, fp, #24
   20b80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20b84:	str	r0, [sp, #4]
   20b88:	b	20b78 <__assert_fail@plt+0xf3cc>
   20b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b90:	add	fp, sp, #28
   20b94:	sub	sp, sp, #12
   20b98:	str	r2, [sp, #4]
   20b9c:	mov	r6, r0
   20ba0:	ldr	r0, [r3, #4]
   20ba4:	cmp	r0, #1
   20ba8:	blt	20dc4 <__assert_fail@plt+0xf618>
   20bac:	mov	r4, r3
   20bb0:	mov	r9, r1
   20bb4:	mov	r8, #0
   20bb8:	str	r6, [sp]
   20bbc:	str	r3, [sp, #8]
   20bc0:	ldr	r0, [r4, #8]
   20bc4:	ldr	r0, [r0, r8, lsl #2]
   20bc8:	add	r0, r0, r0, lsl #1
   20bcc:	ldr	r1, [fp, #8]
   20bd0:	add	r1, r1, r0, lsl #3
   20bd4:	ldr	r2, [r1, #8]
   20bd8:	ldr	r3, [fp, #12]
   20bdc:	cmp	r2, r3
   20be0:	bge	20db4 <__assert_fail@plt+0xf608>
   20be4:	ldr	r1, [r1, #4]
   20be8:	ldr	r2, [fp, #12]
   20bec:	cmp	r1, r2
   20bf0:	blt	20db4 <__assert_fail@plt+0xf608>
   20bf4:	ldr	r1, [fp, #8]
   20bf8:	ldr	r2, [r1, r0, lsl #3]!
   20bfc:	ldr	r0, [r6]
   20c00:	ldr	sl, [r0, r2, lsl #3]
   20c04:	ldr	r1, [r1, #12]
   20c08:	ldr	r2, [fp, #12]
   20c0c:	cmp	r1, r2
   20c10:	bne	20d44 <__assert_fail@plt+0xf598>
   20c14:	ldr	r1, [r9, #4]
   20c18:	cmp	r1, #1
   20c1c:	blt	20db4 <__assert_fail@plt+0xf608>
   20c20:	ldmib	r9, {r2, r3}
   20c24:	mvn	ip, #0
   20c28:	mov	r7, #0
   20c2c:	mvn	r1, #0
   20c30:	ldr	r5, [r3, r7, lsl #2]
   20c34:	add	r4, r0, r5, lsl #3
   20c38:	ldrb	r4, [r4, #4]
   20c3c:	cmp	r4, #9
   20c40:	beq	20c5c <__assert_fail@plt+0xf4b0>
   20c44:	cmp	r4, #8
   20c48:	bne	20c68 <__assert_fail@plt+0xf4bc>
   20c4c:	ldr	r4, [r0, r5, lsl #3]
   20c50:	cmp	sl, r4
   20c54:	moveq	r1, r5
   20c58:	b	20c68 <__assert_fail@plt+0xf4bc>
   20c5c:	ldr	r4, [r0, r5, lsl #3]
   20c60:	cmp	sl, r4
   20c64:	moveq	ip, r5
   20c68:	add	r7, r7, #1
   20c6c:	cmp	r7, r2
   20c70:	blt	20c30 <__assert_fail@plt+0xf484>
   20c74:	cmp	r1, #0
   20c78:	blt	20ca0 <__assert_fail@plt+0xf4f4>
   20c7c:	mov	r0, r6
   20c80:	mov	r2, r9
   20c84:	ldr	r3, [sp, #4]
   20c88:	mov	r4, ip
   20c8c:	bl	212a8 <__assert_fail@plt+0xfafc>
   20c90:	mov	ip, r4
   20c94:	ldr	r6, [sp]
   20c98:	cmp	r0, #0
   20c9c:	bne	20dc8 <__assert_fail@plt+0xf61c>
   20ca0:	cmp	ip, #0
   20ca4:	ldr	r4, [sp, #8]
   20ca8:	ldrge	r0, [r9, #4]
   20cac:	cmpge	r0, #1
   20cb0:	blt	20db4 <__assert_fail@plt+0xf608>
   20cb4:	mov	sl, #0
   20cb8:	ldr	r0, [r9, #8]
   20cbc:	ldr	r4, [r0, sl, lsl #2]
   20cc0:	add	r5, r4, r4, lsl #1
   20cc4:	ldr	r0, [r6, #28]
   20cc8:	add	r0, r0, r5, lsl #2
   20ccc:	mov	r1, ip
   20cd0:	mov	r7, ip
   20cd4:	bl	1bfdc <__assert_fail@plt+0xa830>
   20cd8:	cmp	r0, #0
   20cdc:	beq	20ce8 <__assert_fail@plt+0xf53c>
   20ce0:	mov	ip, r7
   20ce4:	b	20d2c <__assert_fail@plt+0xf580>
   20ce8:	ldr	r0, [r6, #24]
   20cec:	add	r0, r0, r5, lsl #2
   20cf0:	mov	r5, r7
   20cf4:	mov	r1, r7
   20cf8:	bl	1bfdc <__assert_fail@plt+0xa830>
   20cfc:	cmp	r0, #0
   20d00:	bne	20d28 <__assert_fail@plt+0xf57c>
   20d04:	mov	r0, r6
   20d08:	mov	r1, r4
   20d0c:	mov	r2, r9
   20d10:	ldr	r3, [sp, #4]
   20d14:	bl	212a8 <__assert_fail@plt+0xfafc>
   20d18:	cmp	r0, #0
   20d1c:	bne	20dc8 <__assert_fail@plt+0xf61c>
   20d20:	sub	sl, sl, #1
   20d24:	ldr	r6, [sp]
   20d28:	mov	ip, r5
   20d2c:	ldr	r0, [r9, #4]
   20d30:	add	sl, sl, #1
   20d34:	cmp	sl, r0
   20d38:	ldr	r4, [sp, #8]
   20d3c:	blt	20cb8 <__assert_fail@plt+0xf50c>
   20d40:	b	20db4 <__assert_fail@plt+0xf608>
   20d44:	ldr	r0, [r9, #4]
   20d48:	cmp	r0, #1
   20d4c:	blt	20db4 <__assert_fail@plt+0xf608>
   20d50:	mov	r5, #0
   20d54:	ldr	r0, [r9, #8]
   20d58:	ldr	r1, [r0, r5, lsl #2]
   20d5c:	ldr	r0, [r6]
   20d60:	add	r2, r0, r1, lsl #3
   20d64:	ldr	r2, [r2, #4]
   20d68:	and	r2, r2, #254	; 0xfe
   20d6c:	orr	r2, r2, #1
   20d70:	cmp	r2, #9
   20d74:	ldreq	r0, [r0, r1, lsl #3]
   20d78:	cmpeq	sl, r0
   20d7c:	beq	20d94 <__assert_fail@plt+0xf5e8>
   20d80:	ldr	r0, [r9, #4]
   20d84:	add	r5, r5, #1
   20d88:	cmp	r5, r0
   20d8c:	blt	20d54 <__assert_fail@plt+0xf5a8>
   20d90:	b	20db4 <__assert_fail@plt+0xf608>
   20d94:	mov	r0, r6
   20d98:	mov	r2, r9
   20d9c:	ldr	r3, [sp, #4]
   20da0:	bl	212a8 <__assert_fail@plt+0xfafc>
   20da4:	ldr	r6, [sp]
   20da8:	cmp	r0, #0
   20dac:	beq	20d80 <__assert_fail@plt+0xf5d4>
   20db0:	b	20dc8 <__assert_fail@plt+0xf61c>
   20db4:	add	r8, r8, #1
   20db8:	ldr	r0, [r4, #4]
   20dbc:	cmp	r8, r0
   20dc0:	blt	20bc0 <__assert_fail@plt+0xf414>
   20dc4:	mov	r0, #0
   20dc8:	sub	sp, fp, #28
   20dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dd4:	add	fp, sp, #28
   20dd8:	sub	sp, sp, #84	; 0x54
   20ddc:	mov	r4, r3
   20de0:	mov	r7, r2
   20de4:	str	r1, [sp, #52]	; 0x34
   20de8:	ldr	r1, [r0, #84]	; 0x54
   20dec:	str	r1, [sp, #48]	; 0x30
   20df0:	str	r0, [sp, #44]	; 0x2c
   20df4:	mov	r1, r2
   20df8:	bl	1e60c <__assert_fail@plt+0xce60>
   20dfc:	str	r0, [sp, #20]
   20e00:	mov	sl, #0
   20e04:	cmn	r0, #1
   20e08:	beq	210a0 <__assert_fail@plt+0xf8f4>
   20e0c:	str	sl, [sp, #56]	; 0x38
   20e10:	str	r4, [sp, #24]
   20e14:	ldr	r0, [r4, #4]
   20e18:	cmp	r0, #1
   20e1c:	blt	210a0 <__assert_fail@plt+0xf8f4>
   20e20:	add	r0, r7, #1
   20e24:	str	r0, [sp, #8]
   20e28:	add	r0, sp, #56	; 0x38
   20e2c:	add	r0, r0, #16
   20e30:	str	r0, [sp, #28]
   20e34:	ldr	r2, [sp, #52]	; 0x34
   20e38:	add	r0, r2, #16
   20e3c:	str	r0, [sp, #32]
   20e40:	ldr	r0, [sp, #20]
   20e44:	add	r0, r0, r0, lsl #1
   20e48:	str	r0, [sp, #16]
   20e4c:	lsl	r0, r0, #3
   20e50:	str	r0, [sp, #12]
   20e54:	mov	r1, #0
   20e58:	ldr	sl, [sp, #24]
   20e5c:	ldr	r3, [sp, #48]	; 0x30
   20e60:	str	r7, [sp, #40]	; 0x28
   20e64:	ldr	r0, [sl, #8]
   20e68:	str	r1, [sp, #36]	; 0x24
   20e6c:	ldr	r9, [r0, r1, lsl #2]
   20e70:	ldr	r0, [r3]
   20e74:	add	r0, r0, r9, lsl #3
   20e78:	ldrb	r0, [r0, #4]
   20e7c:	ldr	r1, [r2, #8]
   20e80:	cmp	r9, r1
   20e84:	bne	20ea0 <__assert_fail@plt+0xf6f4>
   20e88:	cmp	r0, #4
   20e8c:	bne	21074 <__assert_fail@plt+0xf8c8>
   20e90:	ldr	r0, [r2, #12]
   20e94:	cmp	r0, r7
   20e98:	bne	20ea8 <__assert_fail@plt+0xf6fc>
   20e9c:	b	21074 <__assert_fail@plt+0xf8c8>
   20ea0:	cmp	r0, #4
   20ea4:	bne	21074 <__assert_fail@plt+0xf8c8>
   20ea8:	ldr	r0, [sp, #44]	; 0x2c
   20eac:	ldr	r0, [r0, #116]	; 0x74
   20eb0:	ldr	r1, [sp, #16]
   20eb4:	add	r5, r0, r1, lsl #3
   20eb8:	ldr	r4, [sp, #12]
   20ebc:	ldr	r8, [sp, #20]
   20ec0:	b	20ed8 <__assert_fail@plt+0xf72c>
   20ec4:	mov	r0, r5
   20ec8:	ldr	r7, [sp, #40]	; 0x28
   20ecc:	ldr	r2, [sp, #52]	; 0x34
   20ed0:	ldr	r3, [sp, #48]	; 0x30
   20ed4:	b	2105c <__assert_fail@plt+0xf8b0>
   20ed8:	ldr	r0, [r5]
   20edc:	cmp	r0, r9
   20ee0:	bne	21058 <__assert_fail@plt+0xf8ac>
   20ee4:	ldr	r0, [r5, #8]
   20ee8:	ldr	r1, [r5, #12]
   20eec:	subs	r0, r1, r0
   20ef0:	add	r6, r0, r7
   20ef4:	beq	20f04 <__assert_fail@plt+0xf758>
   20ef8:	ldr	r0, [r3, #12]
   20efc:	add	r0, r0, r9, lsl #2
   20f00:	b	20f14 <__assert_fail@plt+0xf768>
   20f04:	ldr	r0, [r3, #20]
   20f08:	add	r1, r9, r9, lsl #1
   20f0c:	add	r0, r0, r1, lsl #2
   20f10:	ldr	r0, [r0, #8]
   20f14:	ldr	r1, [r2, #12]
   20f18:	cmp	r6, r1
   20f1c:	bgt	21058 <__assert_fail@plt+0xf8ac>
   20f20:	ldr	r1, [r2]
   20f24:	ldr	r1, [r1, r6, lsl #2]
   20f28:	cmp	r1, #0
   20f2c:	beq	21058 <__assert_fail@plt+0xf8ac>
   20f30:	ldr	r7, [r0]
   20f34:	add	r0, r1, #4
   20f38:	mov	r1, r7
   20f3c:	bl	1bfdc <__assert_fail@plt+0xa830>
   20f40:	cmp	r0, #0
   20f44:	beq	20ec4 <__assert_fail@plt+0xf718>
   20f48:	str	r7, [sp]
   20f4c:	str	r6, [sp, #4]
   20f50:	ldr	r0, [sp, #44]	; 0x2c
   20f54:	ldr	r1, [sp, #32]
   20f58:	mov	r2, r9
   20f5c:	ldr	r7, [sp, #40]	; 0x28
   20f60:	mov	r3, r7
   20f64:	bl	21450 <__assert_fail@plt+0xfca4>
   20f68:	cmp	r0, #0
   20f6c:	mov	r0, r5
   20f70:	ldr	r2, [sp, #52]	; 0x34
   20f74:	ldr	r3, [sp, #48]	; 0x30
   20f78:	bne	2105c <__assert_fail@plt+0xf8b0>
   20f7c:	ldr	r0, [sp, #56]	; 0x38
   20f80:	cmp	r0, #0
   20f84:	bne	20fb8 <__assert_fail@plt+0xf80c>
   20f88:	mov	r0, r2
   20f8c:	mov	r1, #12
   20f90:	vld1.32	{d16-d17}, [r0], r1
   20f94:	vld1.32	{d18-d19}, [r0]
   20f98:	add	r0, sp, #56	; 0x38
   20f9c:	vst1.64	{d16-d17}, [r0], r1
   20fa0:	vst1.32	{d18-d19}, [r0]
   20fa4:	ldr	r0, [sp, #28]
   20fa8:	ldr	r1, [sp, #32]
   20fac:	bl	1bf60 <__assert_fail@plt+0xa7b4>
   20fb0:	cmp	r0, #0
   20fb4:	bne	210ac <__assert_fail@plt+0xf900>
   20fb8:	str	r7, [sp, #68]	; 0x44
   20fbc:	str	r9, [sp, #64]	; 0x40
   20fc0:	ldr	r0, [sp, #28]
   20fc4:	mov	r1, r8
   20fc8:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   20fcc:	cmp	r0, #0
   20fd0:	beq	210b4 <__assert_fail@plt+0xf908>
   20fd4:	mov	r0, r7
   20fd8:	ldr	r7, [sp, #56]	; 0x38
   20fdc:	ldr	r5, [r7, r0, lsl #2]
   20fe0:	ldr	r0, [sp, #44]	; 0x2c
   20fe4:	add	r1, sp, #56	; 0x38
   20fe8:	bl	20690 <__assert_fail@plt+0xeee4>
   20fec:	cmp	r0, #0
   20ff0:	bne	210ac <__assert_fail@plt+0xf900>
   20ff4:	ldr	r0, [sp, #52]	; 0x34
   20ff8:	ldr	r1, [r0, #4]
   20ffc:	cmp	r1, #0
   21000:	beq	2101c <__assert_fail@plt+0xf870>
   21004:	ldr	r0, [sp, #48]	; 0x30
   21008:	mov	r2, r7
   2100c:	ldr	r3, [sp, #8]
   21010:	bl	2079c <__assert_fail@plt+0xeff0>
   21014:	cmp	r0, #0
   21018:	bne	210ac <__assert_fail@plt+0xf900>
   2101c:	ldr	r0, [sp, #40]	; 0x28
   21020:	str	r5, [r7, r0, lsl #2]
   21024:	mov	r7, r0
   21028:	ldr	r5, [sp, #28]
   2102c:	mov	r0, r5
   21030:	mov	r1, r8
   21034:	bl	1bfdc <__assert_fail@plt+0xa830>
   21038:	sub	r1, r0, #1
   2103c:	mov	r0, r5
   21040:	bl	1c3d4 <__assert_fail@plt+0xac28>
   21044:	ldr	r0, [sp, #44]	; 0x2c
   21048:	ldr	r0, [r0, #116]	; 0x74
   2104c:	add	r0, r0, r4
   21050:	ldr	sl, [sp, #24]
   21054:	b	20ecc <__assert_fail@plt+0xf720>
   21058:	mov	r0, r5
   2105c:	add	r4, r4, #24
   21060:	add	r5, r0, #24
   21064:	add	r8, r8, #1
   21068:	ldrb	r0, [r0, #20]
   2106c:	cmp	r0, #0
   21070:	bne	20ed8 <__assert_fail@plt+0xf72c>
   21074:	ldr	r1, [sp, #36]	; 0x24
   21078:	add	r1, r1, #1
   2107c:	ldr	r0, [sl, #4]
   21080:	cmp	r1, r0
   21084:	blt	20e64 <__assert_fail@plt+0xf6b8>
   21088:	mov	sl, #0
   2108c:	ldr	r0, [sp, #56]	; 0x38
   21090:	cmp	r0, #0
   21094:	beq	210a0 <__assert_fail@plt+0xf8f4>
   21098:	ldr	r0, [sp, #80]	; 0x50
   2109c:	bl	1312c <__assert_fail@plt+0x1980>
   210a0:	mov	r0, sl
   210a4:	sub	sp, fp, #28
   210a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210ac:	mov	sl, r0
   210b0:	b	2108c <__assert_fail@plt+0xf8e0>
   210b4:	mov	sl, #12
   210b8:	b	2108c <__assert_fail@plt+0xf8e0>
   210bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210c0:	add	fp, sp, #28
   210c4:	sub	sp, sp, #4
   210c8:	mov	r9, r2
   210cc:	mov	r8, r0
   210d0:	ldr	r2, [r1, #4]
   210d4:	mov	r0, #0
   210d8:	cmp	r2, #0
   210dc:	beq	21294 <__assert_fail@plt+0xfae8>
   210e0:	mov	sl, r1
   210e4:	ldr	r1, [r9, #4]
   210e8:	cmp	r1, #0
   210ec:	beq	21294 <__assert_fail@plt+0xfae8>
   210f0:	add	r0, r1, r2
   210f4:	ldm	r8, {r1, r2}
   210f8:	add	r2, r2, r0
   210fc:	cmp	r2, r1
   21100:	ble	21124 <__assert_fail@plt+0xf978>
   21104:	add	r4, r1, r0
   21108:	lsl	r1, r4, #2
   2110c:	ldr	r0, [r8, #8]
   21110:	bl	22a9c <__assert_fail@plt+0x112f0>
   21114:	cmp	r0, #0
   21118:	beq	2129c <__assert_fail@plt+0xfaf0>
   2111c:	str	r4, [r8]
   21120:	str	r0, [r8, #8]
   21124:	ldr	r1, [r8, #4]
   21128:	ldr	r6, [sl, #4]
   2112c:	ldr	r0, [sl, #8]
   21130:	add	r3, r6, r1
   21134:	ldr	r5, [r9, #4]
   21138:	ldr	r2, [r9, #8]
   2113c:	add	ip, r3, r5
   21140:	sub	r7, r1, #1
   21144:	sub	r3, r5, #1
   21148:	sub	r4, r6, #1
   2114c:	ldr	r1, [r2, r3, lsl #2]
   21150:	ldr	r6, [r0, r4, lsl #2]
   21154:	cmp	r6, r1
   21158:	beq	21174 <__assert_fail@plt+0xf9c8>
   2115c:	blt	211a4 <__assert_fail@plt+0xf9f8>
   21160:	sub	r1, r4, #1
   21164:	cmp	r4, #0
   21168:	mov	r4, r1
   2116c:	bgt	2114c <__assert_fail@plt+0xf9a0>
   21170:	b	211f4 <__assert_fail@plt+0xfa48>
   21174:	cmp	r7, #0
   21178:	blt	211d4 <__assert_fail@plt+0xfa28>
   2117c:	ldr	r5, [r8, #8]
   21180:	mov	r1, r7
   21184:	ldr	r7, [r5, r1, lsl #2]
   21188:	cmp	r7, r6
   2118c:	ble	211b0 <__assert_fail@plt+0xfa04>
   21190:	sub	r7, r1, #1
   21194:	cmp	r1, #0
   21198:	mov	r1, r7
   2119c:	bgt	21184 <__assert_fail@plt+0xf9d8>
   211a0:	b	211d4 <__assert_fail@plt+0xfa28>
   211a4:	subs	r3, r3, #1
   211a8:	bge	2114c <__assert_fail@plt+0xf9a0>
   211ac:	b	211f4 <__assert_fail@plt+0xfa48>
   211b0:	ldr	r7, [r8, #8]
   211b4:	ldr	r7, [r7, r1, lsl #2]
   211b8:	cmp	r7, r6
   211bc:	mov	r7, r1
   211c0:	bne	211d4 <__assert_fail@plt+0xfa28>
   211c4:	mov	r7, r1
   211c8:	cmp	r4, #1
   211cc:	bge	211e8 <__assert_fail@plt+0xfa3c>
   211d0:	b	211f4 <__assert_fail@plt+0xfa48>
   211d4:	ldr	r1, [r8, #8]
   211d8:	sub	ip, ip, #1
   211dc:	str	r6, [r1, ip, lsl #2]
   211e0:	cmp	r4, #1
   211e4:	blt	211f4 <__assert_fail@plt+0xfa48>
   211e8:	subs	r3, r3, #1
   211ec:	sub	r4, r4, #1
   211f0:	bge	2114c <__assert_fail@plt+0xf9a0>
   211f4:	ldr	r1, [sl, #4]
   211f8:	ldr	r7, [r8, #4]
   211fc:	add	r0, r7, r1
   21200:	ldr	r3, [r9, #4]
   21204:	add	r0, r0, r3
   21208:	sub	r0, r0, #1
   2120c:	sub	r6, r0, ip
   21210:	add	r2, r6, #1
   21214:	add	r5, r2, r7
   21218:	str	r5, [r8, #4]
   2121c:	cmp	r7, #1
   21220:	cmpge	r6, #0
   21224:	blt	21280 <__assert_fail@plt+0xfad4>
   21228:	add	r3, r7, r3
   2122c:	add	r1, r3, r1
   21230:	sub	r3, r1, ip
   21234:	ldr	r1, [r8, #8]
   21238:	add	r3, r1, r3, lsl #2
   2123c:	sub	r7, r7, #1
   21240:	ldr	r6, [r1, r7, lsl #2]
   21244:	ldr	r5, [r1, r0, lsl #2]
   21248:	cmp	r5, r6
   2124c:	bgt	21268 <__assert_fail@plt+0xfabc>
   21250:	str	r6, [r3, r7, lsl #2]
   21254:	sub	r6, r7, #1
   21258:	cmp	r7, #0
   2125c:	mov	r7, r6
   21260:	bgt	21240 <__assert_fail@plt+0xfa94>
   21264:	b	21280 <__assert_fail@plt+0xfad4>
   21268:	str	r5, [r3, r7, lsl #2]
   2126c:	sub	r3, r3, #4
   21270:	subs	r2, r2, #1
   21274:	sub	r0, r0, #1
   21278:	bne	21240 <__assert_fail@plt+0xfa94>
   2127c:	mov	r2, #0
   21280:	ldr	r0, [r8, #8]
   21284:	add	r1, r0, ip, lsl #2
   21288:	lsl	r2, r2, #2
   2128c:	bl	114d0 <memcpy@plt>
   21290:	mov	r0, #0
   21294:	sub	sp, fp, #28
   21298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2129c:	mov	r0, #12
   212a0:	sub	sp, fp, #28
   212a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212ac:	add	fp, sp, #28
   212b0:	sub	sp, sp, #28
   212b4:	str	r3, [sp]
   212b8:	mov	r7, r1
   212bc:	str	r0, [sp, #12]
   212c0:	ldr	r0, [r0, #28]
   212c4:	mov	r8, #0
   212c8:	str	r8, [sp, #20]
   212cc:	str	r8, [sp, #16]
   212d0:	str	r8, [sp, #24]
   212d4:	add	r1, r1, r1, lsl #1
   212d8:	add	r1, r0, r1, lsl #2
   212dc:	mov	r4, r1
   212e0:	ldr	r0, [r4, #4]!
   212e4:	cmp	r0, #1
   212e8:	blt	21434 <__assert_fail@plt+0xfc88>
   212ec:	str	r2, [sp, #4]
   212f0:	str	r1, [sp, #8]
   212f4:	add	r9, r1, #8
   212f8:	mov	r6, #0
   212fc:	ldr	r0, [r9]
   21300:	ldr	r0, [r0, r6, lsl #2]
   21304:	cmp	r0, r7
   21308:	beq	213c8 <__assert_fail@plt+0xfc1c>
   2130c:	ldr	r1, [sp, #12]
   21310:	ldr	r1, [r1]
   21314:	add	r1, r1, r0, lsl #3
   21318:	ldrb	r1, [r1, #4]
   2131c:	tst	r1, #8
   21320:	beq	213c8 <__assert_fail@plt+0xfc1c>
   21324:	ldr	r1, [sp, #12]
   21328:	ldr	r1, [r1, #20]
   2132c:	add	r5, r0, r0, lsl #1
   21330:	add	r0, r1, r5, lsl #2
   21334:	ldr	r1, [r0, #4]
   21338:	ldr	r0, [r0, #8]
   2133c:	ldr	r8, [r0]
   21340:	mvn	sl, #0
   21344:	cmp	r1, #2
   21348:	ldrge	sl, [r0, #4]
   2134c:	ldr	r0, [sp, #8]
   21350:	mov	r1, r8
   21354:	bl	1bfdc <__assert_fail@plt+0xa830>
   21358:	cmp	r0, #0
   2135c:	beq	21394 <__assert_fail@plt+0xfbe8>
   21360:	cmp	sl, #1
   21364:	blt	213c8 <__assert_fail@plt+0xfc1c>
   21368:	ldr	r0, [sp, #8]
   2136c:	mov	r1, sl
   21370:	bl	1bfdc <__assert_fail@plt+0xa830>
   21374:	cmp	r0, #0
   21378:	bne	213c8 <__assert_fail@plt+0xfc1c>
   2137c:	ldr	r0, [sp, #4]
   21380:	mov	r1, sl
   21384:	bl	1bfdc <__assert_fail@plt+0xa830>
   21388:	cmp	r0, #0
   2138c:	bne	213a8 <__assert_fail@plt+0xfbfc>
   21390:	b	213c8 <__assert_fail@plt+0xfc1c>
   21394:	ldr	r0, [sp, #4]
   21398:	mov	r1, r8
   2139c:	bl	1bfdc <__assert_fail@plt+0xa830>
   213a0:	cmp	r0, #0
   213a4:	beq	21360 <__assert_fail@plt+0xfbb4>
   213a8:	ldr	r0, [sp, #12]
   213ac:	ldr	r0, [r0, #28]
   213b0:	add	r2, r0, r5, lsl #2
   213b4:	add	r0, sp, #16
   213b8:	ldr	r1, [sp]
   213bc:	bl	210bc <__assert_fail@plt+0xf910>
   213c0:	cmp	r0, #0
   213c4:	bne	21448 <__assert_fail@plt+0xfc9c>
   213c8:	add	r6, r6, #1
   213cc:	ldr	r0, [r4]
   213d0:	cmp	r6, r0
   213d4:	blt	212fc <__assert_fail@plt+0xfb50>
   213d8:	cmp	r0, #1
   213dc:	mov	r8, #0
   213e0:	ldr	r5, [sp, #4]
   213e4:	blt	21434 <__assert_fail@plt+0xfc88>
   213e8:	mov	r7, #0
   213ec:	add	sl, sp, #16
   213f0:	ldr	r0, [r9]
   213f4:	ldr	r6, [r0, r7, lsl #2]
   213f8:	mov	r0, sl
   213fc:	mov	r1, r6
   21400:	bl	1bfdc <__assert_fail@plt+0xa830>
   21404:	cmp	r0, #0
   21408:	bne	21424 <__assert_fail@plt+0xfc78>
   2140c:	mov	r0, r5
   21410:	mov	r1, r6
   21414:	bl	1bfdc <__assert_fail@plt+0xa830>
   21418:	sub	r1, r0, #1
   2141c:	mov	r0, r5
   21420:	bl	1c3d4 <__assert_fail@plt+0xac28>
   21424:	ldr	r0, [r4]
   21428:	add	r7, r7, #1
   2142c:	cmp	r7, r0
   21430:	blt	213f0 <__assert_fail@plt+0xfc44>
   21434:	ldr	r0, [sp, #24]
   21438:	bl	1312c <__assert_fail@plt+0x1980>
   2143c:	mov	r0, r8
   21440:	sub	sp, fp, #28
   21444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21448:	mov	r8, r0
   2144c:	b	21434 <__assert_fail@plt+0xfc88>
   21450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21454:	add	fp, sp, #28
   21458:	sub	sp, sp, #20
   2145c:	str	r2, [sp, #12]
   21460:	mov	r6, r1
   21464:	mov	r7, r0
   21468:	str	r3, [sp, #16]
   2146c:	mov	r1, r3
   21470:	bl	1e60c <__assert_fail@plt+0xce60>
   21474:	str	r0, [sp, #8]
   21478:	ldr	r1, [fp, #12]
   2147c:	mov	r0, r7
   21480:	bl	1e60c <__assert_fail@plt+0xce60>
   21484:	mov	r4, r0
   21488:	ldr	r0, [r6, #4]
   2148c:	cmp	r0, #1
   21490:	blt	21514 <__assert_fail@plt+0xfd68>
   21494:	ldr	sl, [r7, #84]	; 0x54
   21498:	mov	r5, #0
   2149c:	ldr	r0, [r6, #8]
   214a0:	ldr	r1, [r0, r5, lsl #2]
   214a4:	add	r0, r1, r1, lsl #1
   214a8:	ldr	r2, [r7, #116]	; 0x74
   214ac:	ldr	r0, [r2, r0, lsl #3]
   214b0:	ldr	r2, [sl]
   214b4:	ldr	r9, [r2, r0, lsl #3]
   214b8:	ldr	r0, [sp, #16]
   214bc:	str	r0, [sp]
   214c0:	ldr	r0, [sp, #8]
   214c4:	str	r0, [sp, #4]
   214c8:	mov	r0, r7
   214cc:	mov	r2, r9
   214d0:	ldr	r3, [sp, #12]
   214d4:	bl	2152c <__assert_fail@plt+0xfd80>
   214d8:	mov	r8, r0
   214dc:	ldr	r0, [r6, #8]
   214e0:	ldr	r1, [r0, r5, lsl #2]
   214e4:	ldr	r0, [fp, #12]
   214e8:	stm	sp, {r0, r4}
   214ec:	mov	r0, r7
   214f0:	mov	r2, r9
   214f4:	ldr	r3, [fp, #8]
   214f8:	bl	2152c <__assert_fail@plt+0xfd80>
   214fc:	cmp	r0, r8
   21500:	bne	21520 <__assert_fail@plt+0xfd74>
   21504:	add	r5, r5, #1
   21508:	ldr	r0, [r6, #4]
   2150c:	cmp	r5, r0
   21510:	blt	2149c <__assert_fail@plt+0xfcf0>
   21514:	mov	r0, #0
   21518:	sub	sp, fp, #28
   2151c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21520:	mov	r0, #1
   21524:	sub	sp, fp, #28
   21528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2152c:	push	{r4, r5, fp, lr}
   21530:	add	fp, sp, #8
   21534:	sub	sp, sp, #8
   21538:	ldr	r4, [r0, #116]	; 0x74
   2153c:	add	r1, r1, r1, lsl #1
   21540:	add	r4, r4, r1, lsl #3
   21544:	ldr	ip, [r4, #8]
   21548:	mvn	r1, #0
   2154c:	ldr	lr, [fp, #8]
   21550:	cmp	ip, lr
   21554:	bgt	215a4 <__assert_fail@plt+0xfdf8>
   21558:	ldr	r4, [r4, #12]
   2155c:	mov	r1, #1
   21560:	cmp	r4, lr
   21564:	blt	215a4 <__assert_fail@plt+0xfdf8>
   21568:	sub	r1, r4, lr
   2156c:	clz	r1, r1
   21570:	lsr	r4, r1, #5
   21574:	mov	r5, #1
   21578:	lsl	r1, r4, #1
   2157c:	cmp	ip, lr
   21580:	orreq	r1, r5, r4, lsl #1
   21584:	cmp	r1, #0
   21588:	beq	215a0 <__assert_fail@plt+0xfdf4>
   2158c:	ldr	r5, [fp, #12]
   21590:	str	r5, [sp]
   21594:	bl	215b0 <__assert_fail@plt+0xfe04>
   21598:	sub	sp, fp, #8
   2159c:	pop	{r4, r5, fp, pc}
   215a0:	mov	r1, #0
   215a4:	mov	r0, r1
   215a8:	sub	sp, fp, #8
   215ac:	pop	{r4, r5, fp, pc}
   215b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215b4:	add	fp, sp, #28
   215b8:	sub	sp, sp, #36	; 0x24
   215bc:	mov	r6, r2
   215c0:	mov	r5, r1
   215c4:	mov	r7, r0
   215c8:	ldr	r4, [r0, #84]	; 0x54
   215cc:	ldr	r0, [r4, #24]
   215d0:	str	r3, [sp, #32]
   215d4:	add	r1, r3, r3, lsl #1
   215d8:	add	r0, r0, r1, lsl #2
   215dc:	mov	r2, r0
   215e0:	ldr	r1, [r2, #4]!
   215e4:	str	r2, [sp, #24]
   215e8:	cmp	r1, #1
   215ec:	blt	21784 <__assert_fail@plt+0xffd8>
   215f0:	mov	r1, #1
   215f4:	mvn	r2, r1, lsl r6
   215f8:	str	r2, [sp, #16]
   215fc:	lsl	r1, r1, r6
   21600:	str	r1, [sp, #20]
   21604:	mov	sl, #0
   21608:	cmp	r6, #31
   2160c:	mov	r1, #0
   21610:	movwgt	r1, #1
   21614:	and	r2, r5, #2
   21618:	str	r2, [sp, #8]
   2161c:	orr	r1, r1, r2, lsr #1
   21620:	str	r1, [sp, #12]
   21624:	add	r0, r0, #8
   21628:	str	r0, [sp, #28]
   2162c:	and	r0, r5, #1
   21630:	str	r0, [sp, #4]
   21634:	ldr	r0, [sp, #28]
   21638:	ldr	r0, [r0]
   2163c:	ldr	r8, [r0, sl, lsl #2]
   21640:	ldr	r0, [r4]
   21644:	add	r1, r0, r8, lsl #3
   21648:	ldrb	r1, [r1, #4]
   2164c:	cmp	r1, #9
   21650:	beq	2173c <__assert_fail@plt+0xff90>
   21654:	cmp	r1, #8
   21658:	beq	21758 <__assert_fail@plt+0xffac>
   2165c:	cmp	r1, #4
   21660:	bne	21770 <__assert_fail@plt+0xffc4>
   21664:	ldr	r0, [fp, #8]
   21668:	cmn	r0, #1
   2166c:	beq	21770 <__assert_fail@plt+0xffc4>
   21670:	ldr	r0, [r7, #116]	; 0x74
   21674:	ldr	r1, [fp, #8]
   21678:	add	r1, r1, r1, lsl #1
   2167c:	add	r0, r0, r1, lsl #3
   21680:	add	r9, r0, #16
   21684:	ldr	r0, [r9, #-16]
   21688:	cmp	r0, r8
   2168c:	bne	21728 <__assert_fail@plt+0xff7c>
   21690:	cmp	r6, #31
   21694:	bgt	216a8 <__assert_fail@plt+0xfefc>
   21698:	ldr	r0, [r9]
   2169c:	ldr	r1, [sp, #20]
   216a0:	tst	r0, r1
   216a4:	beq	21728 <__assert_fail@plt+0xff7c>
   216a8:	ldr	r0, [r4, #20]
   216ac:	add	r1, r8, r8, lsl #1
   216b0:	add	r0, r0, r1, lsl #2
   216b4:	ldr	r0, [r0, #8]
   216b8:	ldr	r3, [r0]
   216bc:	ldr	r0, [sp, #32]
   216c0:	cmp	r3, r0
   216c4:	beq	21790 <__assert_fail@plt+0xffe4>
   216c8:	ldr	r0, [fp, #8]
   216cc:	str	r0, [sp]
   216d0:	mov	r0, r7
   216d4:	mov	r1, r5
   216d8:	mov	r2, r6
   216dc:	bl	215b0 <__assert_fail@plt+0xfe04>
   216e0:	cmp	r0, #0
   216e4:	beq	216fc <__assert_fail@plt+0xff50>
   216e8:	cmn	r0, #1
   216ec:	beq	217a4 <__assert_fail@plt+0xfff8>
   216f0:	cmp	r6, #31
   216f4:	ble	21718 <__assert_fail@plt+0xff6c>
   216f8:	b	21728 <__assert_fail@plt+0xff7c>
   216fc:	ldr	r0, [sp, #12]
   21700:	cmp	r0, #0
   21704:	beq	21718 <__assert_fail@plt+0xff6c>
   21708:	ldr	r0, [sp, #8]
   2170c:	cmp	r0, #0
   21710:	beq	21728 <__assert_fail@plt+0xff7c>
   21714:	b	217a0 <__assert_fail@plt+0xfff4>
   21718:	ldr	r0, [r9]
   2171c:	ldr	r1, [sp, #16]
   21720:	and	r0, r0, r1
   21724:	str	r0, [r9]
   21728:	ldrb	r0, [r9, #4]
   2172c:	add	r9, r9, #24
   21730:	cmp	r0, #0
   21734:	bne	21684 <__assert_fail@plt+0xfed8>
   21738:	b	21770 <__assert_fail@plt+0xffc4>
   2173c:	ldr	r1, [sp, #8]
   21740:	cmp	r1, #0
   21744:	beq	21770 <__assert_fail@plt+0xffc4>
   21748:	ldr	r0, [r0, r8, lsl #3]
   2174c:	cmp	r0, r6
   21750:	bne	21770 <__assert_fail@plt+0xffc4>
   21754:	b	217a0 <__assert_fail@plt+0xfff4>
   21758:	ldr	r1, [sp, #4]
   2175c:	cmp	r1, #0
   21760:	beq	21770 <__assert_fail@plt+0xffc4>
   21764:	ldr	r0, [r0, r8, lsl #3]
   21768:	cmp	r0, r6
   2176c:	beq	217ac <__assert_fail@plt+0x10000>
   21770:	ldr	r0, [sp, #24]
   21774:	ldr	r0, [r0]
   21778:	add	sl, sl, #1
   2177c:	cmp	sl, r0
   21780:	blt	21634 <__assert_fail@plt+0xfe88>
   21784:	ubfx	r0, r5, #1, #1
   21788:	sub	sp, fp, #28
   2178c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21790:	ldr	r0, [sp, #4]
   21794:	rsb	r0, r0, #0
   21798:	sub	sp, fp, #28
   2179c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217a0:	mov	r0, #0
   217a4:	sub	sp, fp, #28
   217a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217ac:	mvn	r0, #0
   217b0:	sub	sp, fp, #28
   217b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   217bc:	add	fp, sp, #24
   217c0:	mov	r7, r3
   217c4:	mov	r5, r2
   217c8:	mov	r8, r1
   217cc:	mov	r2, r0
   217d0:	ldr	r6, [r0, #84]	; 0x54
   217d4:	mov	r0, r6
   217d8:	mov	r1, r5
   217dc:	bl	1f5bc <__assert_fail@plt+0xde10>
   217e0:	mov	r4, r0
   217e4:	cmp	r0, #1
   217e8:	blt	21824 <__assert_fail@plt+0x10078>
   217ec:	ldr	r1, [fp, #8]
   217f0:	add	r0, r4, r7
   217f4:	cmp	r0, r1
   217f8:	bgt	21824 <__assert_fail@plt+0x10078>
   217fc:	ldr	r1, [r8]
   21800:	ldr	r0, [r1, r0, lsl #2]
   21804:	cmp	r0, #0
   21808:	beq	2182c <__assert_fail@plt+0x10080>
   2180c:	ldr	r1, [r6, #12]
   21810:	ldr	r1, [r1, r5, lsl #2]
   21814:	add	r0, r0, #4
   21818:	bl	1bfdc <__assert_fail@plt+0xa830>
   2181c:	cmp	r0, #0
   21820:	moveq	r4, #0
   21824:	mov	r0, r4
   21828:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2182c:	mov	r4, #0
   21830:	mov	r0, r4
   21834:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21838:	mov	r1, #16
   2183c:	mov	r2, #0
   21840:	add	r3, r0, #12
   21844:	str	r2, [r0]
   21848:	stmib	r0, {r1, r3}
   2184c:	bx	lr
   21850:	push	{r4, sl, fp, lr}
   21854:	add	fp, sp, #8
   21858:	mov	r4, r0
   2185c:	ldr	r0, [r0]
   21860:	cmp	r0, r1
   21864:	bcs	21898 <__assert_fail@plt+0x100ec>
   21868:	add	r2, r4, #12
   2186c:	mov	r0, r4
   21870:	mov	r3, #8
   21874:	bl	22e9c <__assert_fail@plt+0x116f0>
   21878:	mov	r1, r0
   2187c:	mov	r0, #1
   21880:	cmp	r1, #0
   21884:	popne	{r4, sl, fp, pc}
   21888:	mov	r0, r4
   2188c:	bl	21da0 <__assert_fail@plt+0x105f4>
   21890:	mov	r0, #0
   21894:	pop	{r4, sl, fp, pc}
   21898:	str	r1, [r4]
   2189c:	mov	r0, #1
   218a0:	pop	{r4, sl, fp, pc}
   218a4:	push	{r4, sl, fp, lr}
   218a8:	add	fp, sp, #8
   218ac:	mov	r4, r0
   218b0:	bl	21dc8 <__assert_fail@plt+0x1061c>
   218b4:	mov	r0, r4
   218b8:	pop	{r4, sl, fp, lr}
   218bc:	b	21838 <__assert_fail@plt+0x1008c>
   218c0:	cmp	r0, #0
   218c4:	bxeq	lr
   218c8:	push	{r4, r5, r6, sl, fp, lr}
   218cc:	add	fp, sp, #16
   218d0:	mov	r4, r0
   218d4:	ldr	r1, [r0]
   218d8:	ldr	r0, [r0, #8]
   218dc:	cmp	r1, #1
   218e0:	blt	21920 <__assert_fail@plt+0x10174>
   218e4:	mov	r5, #0
   218e8:	mov	r6, #0
   218ec:	add	r0, r0, r5
   218f0:	ldr	r0, [r0, #20]
   218f4:	bl	1312c <__assert_fail@plt+0x1980>
   218f8:	ldr	r0, [r4, #8]
   218fc:	add	r0, r0, r5
   21900:	ldr	r0, [r0, #8]
   21904:	bl	1312c <__assert_fail@plt+0x1980>
   21908:	add	r5, r5, #24
   2190c:	add	r6, r6, #1
   21910:	ldr	r1, [r4]
   21914:	ldr	r0, [r4, #8]
   21918:	cmp	r6, r1
   2191c:	blt	218ec <__assert_fail@plt+0x10140>
   21920:	pop	{r4, r5, r6, sl, fp, lr}
   21924:	b	1312c <__assert_fail@plt+0x1980>
   21928:	ldr	r0, [r0, #8]
   2192c:	bx	lr
   21930:	push	{r4, r5, fp, lr}
   21934:	add	fp, sp, #8
   21938:	ldr	r4, [r0]
   2193c:	add	r0, r4, r3, lsl #3
   21940:	ldr	r0, [r0, #4]
   21944:	uxtb	r5, r0
   21948:	ldr	lr, [fp, #12]
   2194c:	ldr	ip, [fp, #8]
   21950:	cmp	r5, #9
   21954:	beq	21980 <__assert_fail@plt+0x101d4>
   21958:	cmp	r5, #8
   2195c:	bne	2197c <__assert_fail@plt+0x101d0>
   21960:	ldr	r0, [r4, r3, lsl #3]
   21964:	add	r0, r0, #1
   21968:	cmp	r0, lr
   2196c:	strlt	ip, [r1, r0, lsl #3]!
   21970:	mvnlt	r0, #0
   21974:	strlt	r0, [r1, #4]
   21978:	poplt	{r4, r5, fp, pc}
   2197c:	pop	{r4, r5, fp, pc}
   21980:	ldr	r3, [r4, r3, lsl #3]
   21984:	add	r3, r3, #1
   21988:	cmp	r3, lr
   2198c:	popge	{r4, r5, fp, pc}
   21990:	ldr	r4, [r1, r3, lsl #3]
   21994:	cmp	r4, ip
   21998:	bge	219b8 <__assert_fail@plt+0x1020c>
   2199c:	add	r0, r1, r3, lsl #3
   219a0:	str	ip, [r0, #4]
   219a4:	lsl	r3, lr, #3
   219a8:	mov	r0, r2
   219ac:	mov	r2, r3
   219b0:	pop	{r4, r5, fp, lr}
   219b4:	b	114d0 <memcpy@plt>
   219b8:	tst	r0, #524288	; 0x80000
   219bc:	ldrne	r0, [r2, r3, lsl #3]
   219c0:	cmnne	r0, #1
   219c4:	bne	219d4 <__assert_fail@plt+0x10228>
   219c8:	add	r0, r1, r3, lsl #3
   219cc:	str	ip, [r0, #4]
   219d0:	pop	{r4, r5, fp, pc}
   219d4:	lsl	r3, lr, #3
   219d8:	mov	r0, r1
   219dc:	mov	r1, r2
   219e0:	b	219ac <__assert_fail@plt+0x10200>
   219e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   219e8:	add	fp, sp, #24
   219ec:	mov	r4, r0
   219f0:	mvn	r0, #0
   219f4:	cmp	r4, #0
   219f8:	beq	21a98 <__assert_fail@plt+0x102ec>
   219fc:	mov	r5, r2
   21a00:	ldr	r2, [r4]
   21a04:	cmp	r2, #0
   21a08:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   21a0c:	ldr	r9, [fp, #12]
   21a10:	ldr	r8, [fp, #8]
   21a14:	sub	r0, r2, #1
   21a18:	str	r0, [r4]
   21a1c:	ldr	r2, [r4, #8]
   21a20:	add	r6, r0, r0, lsl #1
   21a24:	ldr	r0, [r2, r6, lsl #3]!
   21a28:	str	r0, [r1]
   21a2c:	ldr	r1, [r2, #8]
   21a30:	lsl	r7, r5, #3
   21a34:	mov	r0, r3
   21a38:	mov	r2, r7
   21a3c:	bl	114d0 <memcpy@plt>
   21a40:	ldr	r0, [r4, #8]
   21a44:	add	r0, r0, r6, lsl #3
   21a48:	ldr	r0, [r0, #8]
   21a4c:	add	r1, r0, r5, lsl #3
   21a50:	mov	r0, r8
   21a54:	mov	r2, r7
   21a58:	bl	114d0 <memcpy@plt>
   21a5c:	ldr	r0, [r9, #8]
   21a60:	bl	1312c <__assert_fail@plt+0x1980>
   21a64:	ldr	r0, [r4, #8]
   21a68:	add	r0, r0, r6, lsl #3
   21a6c:	ldr	r0, [r0, #8]
   21a70:	bl	1312c <__assert_fail@plt+0x1980>
   21a74:	ldr	r0, [r4, #8]
   21a78:	add	r0, r0, r6, lsl #3
   21a7c:	vldr	d16, [r0, #12]
   21a80:	ldr	r0, [r0, #20]
   21a84:	str	r0, [r9, #8]
   21a88:	vstr	d16, [r9]
   21a8c:	ldr	r0, [r4, #8]
   21a90:	add	r0, r0, r6, lsl #3
   21a94:	ldr	r0, [r0, #4]
   21a98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21aa0:	add	fp, sp, #28
   21aa4:	sub	sp, sp, #20
   21aa8:	mov	r9, r3
   21aac:	mov	r5, r0
   21ab0:	ldr	r4, [r0, #84]	; 0x54
   21ab4:	ldr	r3, [r4]
   21ab8:	ldr	sl, [fp, #12]
   21abc:	add	r0, r3, sl, lsl #3
   21ac0:	ldr	r7, [r0, #4]
   21ac4:	ldr	r0, [fp, #16]
   21ac8:	ldr	r6, [fp, #8]
   21acc:	tst	r7, #8
   21ad0:	bne	21b8c <__assert_fail@plt+0x103e0>
   21ad4:	tst	r7, #1048576	; 0x100000
   21ad8:	bne	21c2c <__assert_fail@plt+0x10480>
   21adc:	mov	ip, r1
   21ae0:	mov	r9, r6
   21ae4:	uxtb	r1, r7
   21ae8:	cmp	r1, #4
   21aec:	bne	21c50 <__assert_fail@plt+0x104a4>
   21af0:	ldr	r0, [r3, sl, lsl #3]
   21af4:	add	r0, r0, #1
   21af8:	mov	r7, #0
   21afc:	mov	r6, ip
   21b00:	cmp	r0, ip
   21b04:	mov	r3, r2
   21b08:	movlt	r1, r3
   21b0c:	ldrlt	r2, [r1, r0, lsl #3]!
   21b10:	ldrlt	r1, [r1, #4]
   21b14:	sublt	r7, r1, r2
   21b18:	ldr	r1, [fp, #20]
   21b1c:	cmp	r1, #0
   21b20:	beq	21cd4 <__assert_fail@plt+0x10528>
   21b24:	mvn	r8, #0
   21b28:	cmp	r0, r6
   21b2c:	bge	21d40 <__assert_fail@plt+0x10594>
   21b30:	ldr	r1, [r3, r0, lsl #3]
   21b34:	cmn	r1, #1
   21b38:	beq	21d40 <__assert_fail@plt+0x10594>
   21b3c:	add	r0, r3, r0, lsl #3
   21b40:	ldr	r0, [r0, #4]
   21b44:	cmn	r0, #1
   21b48:	beq	21d40 <__assert_fail@plt+0x10594>
   21b4c:	cmp	r7, #0
   21b50:	beq	21d4c <__assert_fail@plt+0x105a0>
   21b54:	mov	r0, r9
   21b58:	ldr	r2, [r9]
   21b5c:	ldr	r0, [r5, #28]
   21b60:	sub	r0, r0, r2
   21b64:	cmp	r0, r7
   21b68:	blt	21d40 <__assert_fail@plt+0x10594>
   21b6c:	ldr	r3, [r5, #4]
   21b70:	add	r0, r3, r1
   21b74:	add	r1, r3, r2
   21b78:	mov	r2, r7
   21b7c:	bl	11518 <memcmp@plt>
   21b80:	cmp	r0, #0
   21b84:	bne	21d40 <__assert_fail@plt+0x10594>
   21b88:	b	21cdc <__assert_fail@plt+0x10530>
   21b8c:	str	r1, [sp, #12]
   21b90:	str	r2, [sp, #16]
   21b94:	ldr	r2, [r6]
   21b98:	ldr	r1, [r5, #100]	; 0x64
   21b9c:	ldr	r5, [r1, r2, lsl #2]
   21ba0:	ldr	r4, [r4, #20]
   21ba4:	mov	r1, sl
   21ba8:	bl	1bfdc <__assert_fail@plt+0xa830>
   21bac:	cmp	r0, #0
   21bb0:	bne	21bcc <__assert_fail@plt+0x10420>
   21bb4:	ldr	r0, [fp, #16]
   21bb8:	mov	r1, sl
   21bbc:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   21bc0:	mvn	r8, #1
   21bc4:	cmp	r0, #0
   21bc8:	beq	21d40 <__assert_fail@plt+0x10594>
   21bcc:	add	r0, sl, sl, lsl #1
   21bd0:	add	r1, r4, r0, lsl #2
   21bd4:	mov	r0, r1
   21bd8:	ldr	r2, [r0, #4]!
   21bdc:	cmp	r2, #1
   21be0:	blt	21c78 <__assert_fail@plt+0x104cc>
   21be4:	add	sl, r5, #4
   21be8:	ldr	r7, [r1, #8]
   21bec:	ldr	r6, [r0]
   21bf0:	mov	r5, #0
   21bf4:	mvn	r8, #0
   21bf8:	ldr	r4, [r7, r5, lsl #2]
   21bfc:	mov	r0, sl
   21c00:	mov	r1, r4
   21c04:	bl	1bfdc <__assert_fail@plt+0xa830>
   21c08:	cmp	r0, #0
   21c0c:	beq	21c1c <__assert_fail@plt+0x10470>
   21c10:	cmn	r8, #1
   21c14:	bne	21c80 <__assert_fail@plt+0x104d4>
   21c18:	mov	r8, r4
   21c1c:	add	r5, r5, #1
   21c20:	cmp	r5, r6
   21c24:	blt	21bf8 <__assert_fail@plt+0x1044c>
   21c28:	b	21d40 <__assert_fail@plt+0x10594>
   21c2c:	mov	r9, r6
   21c30:	ldr	r3, [r6]
   21c34:	mov	r0, r4
   21c38:	mov	r1, sl
   21c3c:	mov	r2, r5
   21c40:	bl	1f5bc <__assert_fail@plt+0xde10>
   21c44:	mov	r7, r0
   21c48:	cmp	r0, #0
   21c4c:	bne	21cdc <__assert_fail@plt+0x10530>
   21c50:	ldr	r0, [r4]
   21c54:	add	r1, r0, sl, lsl #3
   21c58:	ldr	r2, [r9]
   21c5c:	mov	r0, r5
   21c60:	bl	1f890 <__assert_fail@plt+0xe0e4>
   21c64:	mvn	r8, #0
   21c68:	mov	r7, #1
   21c6c:	cmp	r0, #0
   21c70:	bne	21cdc <__assert_fail@plt+0x10530>
   21c74:	b	21d40 <__assert_fail@plt+0x10594>
   21c78:	mvn	r8, #0
   21c7c:	b	21d40 <__assert_fail@plt+0x10594>
   21c80:	ldr	r5, [fp, #16]
   21c84:	mov	r0, r5
   21c88:	mov	r1, r8
   21c8c:	bl	1bfdc <__assert_fail@plt+0xa830>
   21c90:	cmp	r0, #0
   21c94:	bne	21d3c <__assert_fail@plt+0x10590>
   21c98:	ldr	r0, [fp, #20]
   21c9c:	cmp	r0, #0
   21ca0:	beq	21d40 <__assert_fail@plt+0x10594>
   21ca4:	ldr	r1, [fp, #8]
   21ca8:	ldr	r1, [r1]
   21cac:	ldr	r2, [sp, #16]
   21cb0:	stm	sp, {r2, r9}
   21cb4:	str	r5, [sp, #8]
   21cb8:	mov	r2, r4
   21cbc:	ldr	r3, [sp, #12]
   21cc0:	bl	21de0 <__assert_fail@plt+0x10634>
   21cc4:	mvn	r4, #1
   21cc8:	cmp	r0, #0
   21ccc:	movne	r8, r4
   21cd0:	b	21d40 <__assert_fail@plt+0x10594>
   21cd4:	cmp	r7, #0
   21cd8:	beq	21d4c <__assert_fail@plt+0x105a0>
   21cdc:	ldr	r0, [r4, #12]
   21ce0:	ldr	r4, [r0, sl, lsl #2]
   21ce4:	ldr	r0, [r9]
   21ce8:	add	r0, r0, r7
   21cec:	str	r0, [r9]
   21cf0:	ldr	r1, [fp, #20]
   21cf4:	cmp	r1, #0
   21cf8:	beq	21d30 <__assert_fail@plt+0x10584>
   21cfc:	ldr	r1, [r5, #92]	; 0x5c
   21d00:	mvn	r8, #0
   21d04:	cmp	r0, r1
   21d08:	bgt	21d40 <__assert_fail@plt+0x10594>
   21d0c:	ldr	r1, [r5, #100]	; 0x64
   21d10:	ldr	r0, [r1, r0, lsl #2]
   21d14:	cmp	r0, #0
   21d18:	beq	21d40 <__assert_fail@plt+0x10594>
   21d1c:	add	r0, r0, #4
   21d20:	mov	r1, r4
   21d24:	bl	1bfdc <__assert_fail@plt+0xa830>
   21d28:	cmp	r0, #0
   21d2c:	beq	21d40 <__assert_fail@plt+0x10594>
   21d30:	mov	r0, #0
   21d34:	ldr	r1, [fp, #16]
   21d38:	str	r0, [r1, #4]
   21d3c:	mov	r8, r4
   21d40:	mov	r0, r8
   21d44:	sub	sp, fp, #28
   21d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d4c:	ldr	r0, [fp, #16]
   21d50:	mov	r1, sl
   21d54:	bl	1bd78 <__assert_fail@plt+0xa5cc>
   21d58:	cmp	r0, #0
   21d5c:	beq	21d98 <__assert_fail@plt+0x105ec>
   21d60:	ldr	r0, [r4, #20]
   21d64:	add	r1, sl, sl, lsl #1
   21d68:	add	r0, r0, r1, lsl #2
   21d6c:	ldr	r0, [r0, #8]
   21d70:	ldr	r8, [r0]
   21d74:	ldr	r0, [r9]
   21d78:	ldr	r1, [r5, #100]	; 0x64
   21d7c:	ldr	r0, [r1, r0, lsl #2]
   21d80:	add	r0, r0, #4
   21d84:	mov	r1, r8
   21d88:	bl	1bfdc <__assert_fail@plt+0xa830>
   21d8c:	cmp	r0, #0
   21d90:	bne	21d40 <__assert_fail@plt+0x10594>
   21d94:	b	21c50 <__assert_fail@plt+0x104a4>
   21d98:	mvn	r8, #1
   21d9c:	b	21d40 <__assert_fail@plt+0x10594>
   21da0:	push	{r4, sl, fp, lr}
   21da4:	add	fp, sp, #8
   21da8:	mov	r4, r0
   21dac:	bl	21dc8 <__assert_fail@plt+0x1061c>
   21db0:	mov	r0, #0
   21db4:	add	r1, r4, #12
   21db8:	mvn	r2, #0
   21dbc:	stm	r4, {r0, r2}
   21dc0:	str	r1, [r4, #8]
   21dc4:	pop	{r4, sl, fp, pc}
   21dc8:	mov	r1, r0
   21dcc:	ldr	r0, [r0, #8]
   21dd0:	add	r1, r1, #12
   21dd4:	cmp	r0, r1
   21dd8:	bxeq	lr
   21ddc:	b	1312c <__assert_fail@plt+0x1980>
   21de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21de4:	add	fp, sp, #28
   21de8:	sub	sp, sp, #12
   21dec:	mov	r6, r3
   21df0:	mov	r9, r2
   21df4:	mov	r5, r1
   21df8:	mov	r4, r0
   21dfc:	ldr	r7, [r0]
   21e00:	ldr	r1, [r0, #4]
   21e04:	add	r0, r7, #1
   21e08:	str	r0, [r4]
   21e0c:	ldr	r2, [fp, #16]
   21e10:	str	r2, [sp, #8]
   21e14:	ldr	r2, [fp, #12]
   21e18:	str	r2, [sp, #4]
   21e1c:	ldr	sl, [fp, #8]
   21e20:	cmp	r0, r1
   21e24:	bne	21e50 <__assert_fail@plt+0x106a4>
   21e28:	ldr	r0, [r4, #8]
   21e2c:	add	r1, r1, r1, lsl #1
   21e30:	lsl	r1, r1, #4
   21e34:	bl	22a9c <__assert_fail@plt+0x112f0>
   21e38:	cmp	r0, #0
   21e3c:	beq	21ec4 <__assert_fail@plt+0x10718>
   21e40:	str	r0, [r4, #8]
   21e44:	ldr	r0, [r4, #4]
   21e48:	lsl	r0, r0, #1
   21e4c:	str	r0, [r4, #4]
   21e50:	ldr	r0, [r4, #8]
   21e54:	add	r8, r7, r7, lsl #1
   21e58:	str	r5, [r0, r8, lsl #3]!
   21e5c:	str	r9, [r0, #4]
   21e60:	lsl	r0, r6, #4
   21e64:	bl	22a6c <__assert_fail@plt+0x112c0>
   21e68:	ldr	r1, [r4, #8]
   21e6c:	add	r1, r1, r8, lsl #3
   21e70:	str	r0, [r1, #8]
   21e74:	cmp	r0, #0
   21e78:	beq	21ec4 <__assert_fail@plt+0x10718>
   21e7c:	lsl	r5, r6, #3
   21e80:	mov	r1, sl
   21e84:	mov	r2, r5
   21e88:	bl	114d0 <memcpy@plt>
   21e8c:	ldr	r0, [r4, #8]
   21e90:	add	r0, r0, r8, lsl #3
   21e94:	ldr	r0, [r0, #8]
   21e98:	add	r0, r0, r6, lsl #3
   21e9c:	ldr	r1, [sp, #4]
   21ea0:	mov	r2, r5
   21ea4:	bl	114d0 <memcpy@plt>
   21ea8:	ldr	r0, [r4, #8]
   21eac:	add	r0, r0, r8, lsl #3
   21eb0:	add	r0, r0, #12
   21eb4:	ldr	r1, [sp, #8]
   21eb8:	sub	sp, fp, #28
   21ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ec0:	b	1bf60 <__assert_fail@plt+0xa7b4>
   21ec4:	mov	r0, #12
   21ec8:	sub	sp, fp, #28
   21ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ed0:	push	{r4, r5, fp, lr}
   21ed4:	add	fp, sp, #8
   21ed8:	mov	r4, r1
   21edc:	mov	r5, r0
   21ee0:	mov	r1, #0
   21ee4:	mov	r2, r4
   21ee8:	bl	116ec <memchr@plt>
   21eec:	rsb	r1, r5, #1
   21ef0:	cmp	r0, #0
   21ef4:	addne	r4, r1, r0
   21ef8:	mov	r0, r4
   21efc:	pop	{r4, r5, fp, pc}
   21f00:	b	21f04 <__assert_fail@plt+0x10758>
   21f04:	push	{r4, sl, fp, lr}
   21f08:	add	fp, sp, #8
   21f0c:	ldrb	ip, [r1]
   21f10:	ldrb	r3, [r0]
   21f14:	cmp	r3, #45	; 0x2d
   21f18:	bne	21ff4 <__assert_fail@plt+0x10848>
   21f1c:	ldrb	r4, [r0, #1]!
   21f20:	cmp	r4, #48	; 0x30
   21f24:	beq	21f1c <__assert_fail@plt+0x10770>
   21f28:	cmp	ip, #45	; 0x2d
   21f2c:	bne	22100 <__assert_fail@plt+0x10954>
   21f30:	ldrb	ip, [r1, #1]!
   21f34:	cmp	ip, #48	; 0x30
   21f38:	beq	21f30 <__assert_fail@plt+0x10784>
   21f3c:	cmp	ip, r4
   21f40:	bne	21f84 <__assert_fail@plt+0x107d8>
   21f44:	sub	r2, r4, #48	; 0x30
   21f48:	cmp	r2, #9
   21f4c:	bhi	21f84 <__assert_fail@plt+0x107d8>
   21f50:	mov	r2, #0
   21f54:	add	r3, r1, r2
   21f58:	ldrb	ip, [r3, #1]
   21f5c:	add	r3, r0, r2
   21f60:	ldrb	r4, [r3, #1]
   21f64:	add	r2, r2, #1
   21f68:	cmp	ip, r4
   21f6c:	bne	21f7c <__assert_fail@plt+0x107d0>
   21f70:	sub	r3, r4, #48	; 0x30
   21f74:	cmp	r3, #10
   21f78:	bcc	21f54 <__assert_fail@plt+0x107a8>
   21f7c:	add	r1, r1, r2
   21f80:	add	r0, r0, r2
   21f84:	sub	r3, r4, #48	; 0x30
   21f88:	mov	r2, #0
   21f8c:	cmp	r3, #9
   21f90:	mov	lr, #0
   21f94:	bhi	21fb4 <__assert_fail@plt+0x10808>
   21f98:	add	r0, r0, #1
   21f9c:	mov	lr, #0
   21fa0:	ldrb	r3, [r0, lr]
   21fa4:	sub	r3, r3, #48	; 0x30
   21fa8:	add	lr, lr, #1
   21fac:	cmp	r3, #10
   21fb0:	bcc	21fa0 <__assert_fail@plt+0x107f4>
   21fb4:	sub	r0, ip, #48	; 0x30
   21fb8:	cmp	r0, #9
   21fbc:	bhi	21fdc <__assert_fail@plt+0x10830>
   21fc0:	add	r0, r1, #1
   21fc4:	mov	r2, #0
   21fc8:	ldrb	r1, [r0, r2]
   21fcc:	sub	r1, r1, #48	; 0x30
   21fd0:	add	r2, r2, #1
   21fd4:	cmp	r1, #10
   21fd8:	bcc	21fc8 <__assert_fail@plt+0x1081c>
   21fdc:	cmp	lr, r2
   21fe0:	bne	22118 <__assert_fail@plt+0x1096c>
   21fe4:	cmp	lr, #0
   21fe8:	subne	lr, ip, r4
   21fec:	mov	r0, lr
   21ff0:	pop	{r4, sl, fp, pc}
   21ff4:	cmp	ip, #45	; 0x2d
   21ff8:	bne	22048 <__assert_fail@plt+0x1089c>
   21ffc:	add	r1, r1, #1
   22000:	ldrb	r2, [r1], #1
   22004:	cmp	r2, #48	; 0x30
   22008:	beq	22000 <__assert_fail@plt+0x10854>
   2200c:	sub	r1, r2, #48	; 0x30
   22010:	mov	lr, #1
   22014:	cmp	r1, #10
   22018:	bcc	22110 <__assert_fail@plt+0x10964>
   2201c:	cmp	r3, #48	; 0x30
   22020:	bne	22034 <__assert_fail@plt+0x10888>
   22024:	add	r0, r0, #1
   22028:	ldrb	r3, [r0], #1
   2202c:	cmp	r3, #48	; 0x30
   22030:	beq	22028 <__assert_fail@plt+0x1087c>
   22034:	sub	r0, r3, #48	; 0x30
   22038:	mov	lr, #0
   2203c:	cmp	r0, #10
   22040:	b	2211c <__assert_fail@plt+0x10970>
   22044:	ldrb	r3, [r0, #1]!
   22048:	cmp	r3, #48	; 0x30
   2204c:	beq	22044 <__assert_fail@plt+0x10898>
   22050:	b	22058 <__assert_fail@plt+0x108ac>
   22054:	ldrb	ip, [r1, #1]!
   22058:	cmp	ip, #48	; 0x30
   2205c:	beq	22054 <__assert_fail@plt+0x108a8>
   22060:	cmp	r3, ip
   22064:	bne	22090 <__assert_fail@plt+0x108e4>
   22068:	sub	r2, r3, #48	; 0x30
   2206c:	cmp	r2, #9
   22070:	bhi	22090 <__assert_fail@plt+0x108e4>
   22074:	ldrb	ip, [r1, #1]!
   22078:	ldrb	r3, [r0, #1]!
   2207c:	cmp	r3, ip
   22080:	bne	22090 <__assert_fail@plt+0x108e4>
   22084:	sub	r2, r3, #48	; 0x30
   22088:	cmp	r2, #10
   2208c:	bcc	22074 <__assert_fail@plt+0x108c8>
   22090:	sub	r4, r3, #48	; 0x30
   22094:	mov	r2, #0
   22098:	cmp	r4, #9
   2209c:	mov	lr, #0
   220a0:	bhi	220c0 <__assert_fail@plt+0x10914>
   220a4:	add	r0, r0, #1
   220a8:	mov	lr, #0
   220ac:	ldrb	r4, [r0, lr]
   220b0:	sub	r4, r4, #48	; 0x30
   220b4:	add	lr, lr, #1
   220b8:	cmp	r4, #10
   220bc:	bcc	220ac <__assert_fail@plt+0x10900>
   220c0:	sub	r0, ip, #48	; 0x30
   220c4:	cmp	r0, #9
   220c8:	bhi	220e8 <__assert_fail@plt+0x1093c>
   220cc:	add	r0, r1, #1
   220d0:	mov	r2, #0
   220d4:	ldrb	r1, [r0, r2]
   220d8:	sub	r1, r1, #48	; 0x30
   220dc:	add	r2, r2, #1
   220e0:	cmp	r1, #10
   220e4:	bcc	220d4 <__assert_fail@plt+0x10928>
   220e8:	cmp	lr, r2
   220ec:	bne	22128 <__assert_fail@plt+0x1097c>
   220f0:	cmp	lr, #0
   220f4:	subne	lr, r3, ip
   220f8:	mov	r0, lr
   220fc:	pop	{r4, sl, fp, pc}
   22100:	sub	r0, r4, #48	; 0x30
   22104:	mvn	lr, #0
   22108:	cmp	r0, #10
   2210c:	bcs	22130 <__assert_fail@plt+0x10984>
   22110:	mov	r0, lr
   22114:	pop	{r4, sl, fp, pc}
   22118:	mvn	lr, #0
   2211c:	movwcc	lr, #1
   22120:	mov	r0, lr
   22124:	pop	{r4, sl, fp, pc}
   22128:	mov	lr, #1
   2212c:	b	22154 <__assert_fail@plt+0x109a8>
   22130:	cmp	ip, #48	; 0x30
   22134:	bne	22148 <__assert_fail@plt+0x1099c>
   22138:	add	r0, r1, #1
   2213c:	ldrb	ip, [r0], #1
   22140:	cmp	ip, #48	; 0x30
   22144:	beq	2213c <__assert_fail@plt+0x10990>
   22148:	sub	r0, ip, #48	; 0x30
   2214c:	mov	lr, #0
   22150:	cmp	r0, #10
   22154:	mvncc	lr, #0
   22158:	mov	r0, lr
   2215c:	pop	{r4, sl, fp, pc}
   22160:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22164:	add	fp, sp, #24
   22168:	sub	sp, sp, #32
   2216c:	mov	r4, r2
   22170:	mov	r8, r0
   22174:	ldr	r6, [fp, #12]
   22178:	ldr	r7, [fp, #8]
   2217c:	cmp	r1, #0
   22180:	beq	221a8 <__assert_fail@plt+0x109fc>
   22184:	mov	r5, r1
   22188:	str	r4, [sp]
   2218c:	str	r3, [sp, #4]
   22190:	movw	r2, #17249	; 0x4361
   22194:	movt	r2, #2
   22198:	mov	r0, r8
   2219c:	mov	r1, #1
   221a0:	mov	r3, r5
   221a4:	b	221c0 <__assert_fail@plt+0x10a14>
   221a8:	str	r3, [sp]
   221ac:	movw	r2, #17261	; 0x436d
   221b0:	movt	r2, #2
   221b4:	mov	r0, r8
   221b8:	mov	r1, #1
   221bc:	mov	r3, r4
   221c0:	bl	116e0 <__fprintf_chk@plt>
   221c4:	movw	r1, #17268	; 0x4374
   221c8:	movt	r1, #2
   221cc:	mov	r0, #0
   221d0:	mov	r2, #5
   221d4:	bl	11524 <dcgettext@plt>
   221d8:	mov	r3, r0
   221dc:	movw	r0, #2022	; 0x7e6
   221e0:	str	r0, [sp]
   221e4:	movw	r2, #17986	; 0x4642
   221e8:	movt	r2, #2
   221ec:	mov	r0, r8
   221f0:	mov	r1, #1
   221f4:	bl	116e0 <__fprintf_chk@plt>
   221f8:	movw	r4, #15874	; 0x3e02
   221fc:	movt	r4, #2
   22200:	mov	r0, r4
   22204:	mov	r1, r8
   22208:	bl	11428 <fputs_unlocked@plt>
   2220c:	movw	r1, #17272	; 0x4378
   22210:	movt	r1, #2
   22214:	mov	r0, #0
   22218:	mov	r2, #5
   2221c:	bl	11524 <dcgettext@plt>
   22220:	mov	r2, r0
   22224:	movw	r3, #17443	; 0x4423
   22228:	movt	r3, #2
   2222c:	mov	r0, r8
   22230:	mov	r1, #1
   22234:	bl	116e0 <__fprintf_chk@plt>
   22238:	mov	r0, r4
   2223c:	mov	r1, r8
   22240:	bl	11428 <fputs_unlocked@plt>
   22244:	cmp	r6, #9
   22248:	bhi	22284 <__assert_fail@plt+0x10ad8>
   2224c:	add	r0, pc, #0
   22250:	ldr	pc, [r0, r6, lsl #2]
   22254:	andeq	r2, r2, ip, ror r2
   22258:	muleq	r2, r0, r2
   2225c:	andeq	r2, r2, r0, asr #5
   22260:	andeq	r2, r2, r8, ror #5
   22264:	andeq	r2, r2, r0, lsl r3
   22268:	andeq	r2, r2, r8, lsr r3
   2226c:	andeq	r2, r2, r0, ror #6
   22270:	muleq	r2, r8, r3
   22274:	andeq	r2, r2, r8, lsr r4
   22278:	andeq	r2, r2, r0, ror #7
   2227c:	sub	sp, fp, #24
   22280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22284:	movw	r1, #17796	; 0x4584
   22288:	movt	r1, #2
   2228c:	b	223e8 <__assert_fail@plt+0x10c3c>
   22290:	movw	r1, #17477	; 0x4445
   22294:	movt	r1, #2
   22298:	mov	r0, #0
   2229c:	mov	r2, #5
   222a0:	bl	11524 <dcgettext@plt>
   222a4:	mov	r2, r0
   222a8:	ldr	r3, [r7]
   222ac:	mov	r0, r8
   222b0:	mov	r1, #1
   222b4:	sub	sp, fp, #24
   222b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   222bc:	b	116e0 <__fprintf_chk@plt>
   222c0:	movw	r1, #17493	; 0x4455
   222c4:	movt	r1, #2
   222c8:	mov	r0, #0
   222cc:	mov	r2, #5
   222d0:	bl	11524 <dcgettext@plt>
   222d4:	mov	r2, r0
   222d8:	ldr	r3, [r7]
   222dc:	ldr	r0, [r7, #4]
   222e0:	str	r0, [sp]
   222e4:	b	223d4 <__assert_fail@plt+0x10c28>
   222e8:	movw	r1, #17516	; 0x446c
   222ec:	movt	r1, #2
   222f0:	mov	r0, #0
   222f4:	mov	r2, #5
   222f8:	bl	11524 <dcgettext@plt>
   222fc:	mov	r2, r0
   22300:	ldr	r3, [r7]
   22304:	ldmib	r7, {r0, r1}
   22308:	stm	sp, {r0, r1}
   2230c:	b	223d4 <__assert_fail@plt+0x10c28>
   22310:	movw	r1, #17544	; 0x4488
   22314:	movt	r1, #2
   22318:	mov	r0, #0
   2231c:	mov	r2, #5
   22320:	bl	11524 <dcgettext@plt>
   22324:	mov	r2, r0
   22328:	ldr	r3, [r7]
   2232c:	ldmib	r7, {r0, r1, r7}
   22330:	stm	sp, {r0, r1, r7}
   22334:	b	223d4 <__assert_fail@plt+0x10c28>
   22338:	movw	r1, #17576	; 0x44a8
   2233c:	movt	r1, #2
   22340:	mov	r0, #0
   22344:	mov	r2, #5
   22348:	bl	11524 <dcgettext@plt>
   2234c:	mov	r2, r0
   22350:	ldr	r3, [r7]
   22354:	ldmib	r7, {r0, r1, r6, r7}
   22358:	stm	sp, {r0, r1, r6, r7}
   2235c:	b	223d4 <__assert_fail@plt+0x10c28>
   22360:	movw	r1, #17612	; 0x44cc
   22364:	movt	r1, #2
   22368:	mov	r0, #0
   2236c:	mov	r2, #5
   22370:	bl	11524 <dcgettext@plt>
   22374:	mov	r2, r0
   22378:	ldr	r3, [r7]
   2237c:	ldmib	r7, {r0, r1, r6}
   22380:	ldr	r5, [r7, #16]
   22384:	ldr	r7, [r7, #20]
   22388:	stm	sp, {r0, r1, r6}
   2238c:	str	r5, [sp, #12]
   22390:	str	r7, [sp, #16]
   22394:	b	223d4 <__assert_fail@plt+0x10c28>
   22398:	movw	r1, #17652	; 0x44f4
   2239c:	movt	r1, #2
   223a0:	mov	r0, #0
   223a4:	mov	r2, #5
   223a8:	bl	11524 <dcgettext@plt>
   223ac:	mov	r2, r0
   223b0:	ldr	r3, [r7]
   223b4:	ldmib	r7, {r0, r1, r6}
   223b8:	ldr	r5, [r7, #16]
   223bc:	ldr	r4, [r7, #20]
   223c0:	ldr	r7, [r7, #24]
   223c4:	stm	sp, {r0, r1, r6}
   223c8:	str	r5, [sp, #12]
   223cc:	str	r4, [sp, #16]
   223d0:	str	r7, [sp, #20]
   223d4:	mov	r0, r8
   223d8:	mov	r1, #1
   223dc:	b	22488 <__assert_fail@plt+0x10cdc>
   223e0:	movw	r1, #17744	; 0x4550
   223e4:	movt	r1, #2
   223e8:	mov	r0, #0
   223ec:	mov	r2, #5
   223f0:	bl	11524 <dcgettext@plt>
   223f4:	mov	ip, r0
   223f8:	ldr	r3, [r7]
   223fc:	ldr	r0, [r7, #4]
   22400:	ldr	r1, [r7, #8]
   22404:	ldr	r6, [r7, #12]
   22408:	ldr	r5, [r7, #16]
   2240c:	ldr	r4, [r7, #20]
   22410:	ldr	r2, [r7, #24]
   22414:	ldr	lr, [r7, #28]
   22418:	ldr	r7, [r7, #32]
   2241c:	stm	sp, {r0, r1, r6}
   22420:	str	r5, [sp, #12]
   22424:	str	r4, [sp, #16]
   22428:	str	r2, [sp, #20]
   2242c:	str	lr, [sp, #24]
   22430:	str	r7, [sp, #28]
   22434:	b	2247c <__assert_fail@plt+0x10cd0>
   22438:	movw	r1, #17696	; 0x4520
   2243c:	movt	r1, #2
   22440:	mov	r0, #0
   22444:	mov	r2, #5
   22448:	bl	11524 <dcgettext@plt>
   2244c:	mov	ip, r0
   22450:	ldr	r3, [r7]
   22454:	ldmib	r7, {r0, r1, r6}
   22458:	ldr	r5, [r7, #16]
   2245c:	ldr	r4, [r7, #20]
   22460:	ldr	r2, [r7, #24]
   22464:	ldr	r7, [r7, #28]
   22468:	stm	sp, {r0, r1, r6}
   2246c:	str	r5, [sp, #12]
   22470:	str	r4, [sp, #16]
   22474:	str	r2, [sp, #20]
   22478:	str	r7, [sp, #24]
   2247c:	mov	r0, r8
   22480:	mov	r1, #1
   22484:	mov	r2, ip
   22488:	bl	116e0 <__fprintf_chk@plt>
   2248c:	sub	sp, fp, #24
   22490:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22494:	push	{r4, sl, fp, lr}
   22498:	add	fp, sp, #8
   2249c:	sub	sp, sp, #8
   224a0:	mov	lr, #0
   224a4:	ldr	ip, [fp, #8]
   224a8:	ldr	r4, [ip, lr, lsl #2]
   224ac:	add	lr, lr, #1
   224b0:	cmp	r4, #0
   224b4:	bne	224a8 <__assert_fail@plt+0x10cfc>
   224b8:	sub	r4, lr, #1
   224bc:	str	ip, [sp]
   224c0:	str	r4, [sp, #4]
   224c4:	bl	22160 <__assert_fail@plt+0x109b4>
   224c8:	sub	sp, fp, #8
   224cc:	pop	{r4, sl, fp, pc}
   224d0:	push	{r4, r5, fp, lr}
   224d4:	add	fp, sp, #8
   224d8:	sub	sp, sp, #48	; 0x30
   224dc:	mov	ip, #0
   224e0:	ldr	r4, [fp, #8]
   224e4:	add	lr, sp, #8
   224e8:	ldr	r5, [r4]
   224ec:	str	r5, [lr, ip, lsl #2]
   224f0:	cmp	r5, #0
   224f4:	beq	22508 <__assert_fail@plt+0x10d5c>
   224f8:	add	ip, ip, #1
   224fc:	add	r4, r4, #4
   22500:	cmp	ip, #10
   22504:	bcc	224e8 <__assert_fail@plt+0x10d3c>
   22508:	str	lr, [sp]
   2250c:	str	ip, [sp, #4]
   22510:	bl	22160 <__assert_fail@plt+0x109b4>
   22514:	sub	sp, fp, #8
   22518:	pop	{r4, r5, fp, pc}
   2251c:	push	{fp, lr}
   22520:	mov	fp, sp
   22524:	sub	sp, sp, #8
   22528:	add	ip, fp, #8
   2252c:	str	ip, [sp, #4]
   22530:	str	ip, [sp]
   22534:	bl	224d0 <__assert_fail@plt+0x10d24>
   22538:	mov	sp, fp
   2253c:	pop	{fp, pc}
   22540:	push	{fp, lr}
   22544:	mov	fp, sp
   22548:	movw	r0, #20908	; 0x51ac
   2254c:	movt	r0, #3
   22550:	ldr	r1, [r0]
   22554:	movw	r0, #15874	; 0x3e02
   22558:	movt	r0, #2
   2255c:	bl	11428 <fputs_unlocked@plt>
   22560:	movw	r1, #17856	; 0x45c0
   22564:	movt	r1, #2
   22568:	mov	r0, #0
   2256c:	mov	r2, #5
   22570:	bl	11524 <dcgettext@plt>
   22574:	mov	r1, r0
   22578:	movw	r2, #17876	; 0x45d4
   2257c:	movt	r2, #2
   22580:	mov	r0, #1
   22584:	bl	116c8 <__printf_chk@plt>
   22588:	movw	r1, #17898	; 0x45ea
   2258c:	movt	r1, #2
   22590:	mov	r0, #0
   22594:	mov	r2, #5
   22598:	bl	11524 <dcgettext@plt>
   2259c:	mov	r1, r0
   225a0:	movw	r2, #15441	; 0x3c51
   225a4:	movt	r2, #2
   225a8:	movw	r3, #15683	; 0x3d43
   225ac:	movt	r3, #2
   225b0:	mov	r0, #1
   225b4:	bl	116c8 <__printf_chk@plt>
   225b8:	movw	r1, #17918	; 0x45fe
   225bc:	movt	r1, #2
   225c0:	mov	r0, #0
   225c4:	mov	r2, #5
   225c8:	bl	11524 <dcgettext@plt>
   225cc:	mov	r1, r0
   225d0:	movw	r2, #17957	; 0x4625
   225d4:	movt	r2, #2
   225d8:	mov	r0, #1
   225dc:	pop	{fp, lr}
   225e0:	b	116c8 <__printf_chk@plt>
   225e4:	b	225e8 <__assert_fail@plt+0x10e3c>
   225e8:	push	{r4, r5, r6, sl, fp, lr}
   225ec:	add	fp, sp, #16
   225f0:	mov	r4, r2
   225f4:	mov	r5, r1
   225f8:	mov	r6, r0
   225fc:	bl	23294 <__assert_fail@plt+0x11ae8>
   22600:	cmp	r0, #0
   22604:	popne	{r4, r5, r6, sl, fp, pc}
   22608:	cmp	r6, #0
   2260c:	beq	22620 <__assert_fail@plt+0x10e74>
   22610:	cmp	r5, #0
   22614:	cmpne	r4, #0
   22618:	bne	22620 <__assert_fail@plt+0x10e74>
   2261c:	pop	{r4, r5, r6, sl, fp, pc}
   22620:	bl	229d4 <__assert_fail@plt+0x11228>
   22624:	push	{fp, lr}
   22628:	mov	fp, sp
   2262c:	bl	22a6c <__assert_fail@plt+0x112c0>
   22630:	bl	22638 <__assert_fail@plt+0x10e8c>
   22634:	pop	{fp, pc}
   22638:	cmp	r0, #0
   2263c:	bxne	lr
   22640:	push	{fp, lr}
   22644:	mov	fp, sp
   22648:	bl	229d4 <__assert_fail@plt+0x11228>
   2264c:	push	{fp, lr}
   22650:	mov	fp, sp
   22654:	bl	23124 <__assert_fail@plt+0x11978>
   22658:	bl	22638 <__assert_fail@plt+0x10e8c>
   2265c:	pop	{fp, pc}
   22660:	b	22624 <__assert_fail@plt+0x10e78>
   22664:	push	{r4, r5, fp, lr}
   22668:	add	fp, sp, #8
   2266c:	mov	r4, r1
   22670:	mov	r5, r0
   22674:	bl	22a9c <__assert_fail@plt+0x112f0>
   22678:	cmp	r0, #0
   2267c:	popne	{r4, r5, fp, pc}
   22680:	cmp	r5, #0
   22684:	beq	22694 <__assert_fail@plt+0x10ee8>
   22688:	cmp	r4, #0
   2268c:	bne	22694 <__assert_fail@plt+0x10ee8>
   22690:	pop	{r4, r5, fp, pc}
   22694:	bl	229d4 <__assert_fail@plt+0x11228>
   22698:	push	{fp, lr}
   2269c:	mov	fp, sp
   226a0:	bl	23128 <__assert_fail@plt+0x1197c>
   226a4:	bl	22638 <__assert_fail@plt+0x10e8c>
   226a8:	pop	{fp, pc}
   226ac:	push	{fp, lr}
   226b0:	mov	fp, sp
   226b4:	bl	23138 <__assert_fail@plt+0x1198c>
   226b8:	bl	22638 <__assert_fail@plt+0x10e8c>
   226bc:	pop	{fp, pc}
   226c0:	push	{fp, lr}
   226c4:	mov	fp, sp
   226c8:	mov	r2, r1
   226cc:	mov	r1, r0
   226d0:	mov	r0, #0
   226d4:	bl	225e8 <__assert_fail@plt+0x10e3c>
   226d8:	pop	{fp, pc}
   226dc:	mov	r2, r1
   226e0:	mov	r1, r0
   226e4:	mov	r0, #0
   226e8:	b	226ac <__assert_fail@plt+0x10f00>
   226ec:	mov	r2, #1
   226f0:	b	226f4 <__assert_fail@plt+0x10f48>
   226f4:	push	{r4, r5, fp, lr}
   226f8:	add	fp, sp, #8
   226fc:	mov	r4, r1
   22700:	ldr	r5, [r1]
   22704:	cmp	r0, #0
   22708:	beq	22720 <__assert_fail@plt+0x10f74>
   2270c:	mov	r1, #1
   22710:	add	r1, r1, r5, lsr #1
   22714:	adds	r5, r5, r1
   22718:	bcc	22738 <__assert_fail@plt+0x10f8c>
   2271c:	bl	229d4 <__assert_fail@plt+0x11228>
   22720:	cmp	r5, #0
   22724:	bne	22738 <__assert_fail@plt+0x10f8c>
   22728:	mov	r1, #64	; 0x40
   2272c:	udiv	r5, r1, r2
   22730:	cmp	r2, #64	; 0x40
   22734:	addhi	r5, r5, #1
   22738:	mov	r1, r5
   2273c:	bl	225e8 <__assert_fail@plt+0x10e3c>
   22740:	str	r5, [r4]
   22744:	pop	{r4, r5, fp, pc}
   22748:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2274c:	add	fp, sp, #24
   22750:	mov	r8, r1
   22754:	ldr	r6, [r1]
   22758:	add	r1, r6, r6, asr #1
   2275c:	cmp	r1, r6
   22760:	mvnvs	r1, #-2147483648	; 0x80000000
   22764:	cmp	r1, r3
   22768:	mov	r5, r1
   2276c:	movgt	r5, r3
   22770:	cmn	r3, #1
   22774:	movle	r5, r1
   22778:	ldr	r4, [fp, #8]
   2277c:	cmn	r4, #1
   22780:	ble	227a8 <__assert_fail@plt+0x10ffc>
   22784:	cmp	r4, #0
   22788:	beq	227fc <__assert_fail@plt+0x11050>
   2278c:	cmn	r5, #1
   22790:	ble	227d0 <__assert_fail@plt+0x11024>
   22794:	mvn	r7, #-2147483648	; 0x80000000
   22798:	udiv	r1, r7, r4
   2279c:	cmp	r1, r5
   227a0:	bge	227fc <__assert_fail@plt+0x11050>
   227a4:	b	2280c <__assert_fail@plt+0x11060>
   227a8:	cmn	r5, #1
   227ac:	ble	227ec <__assert_fail@plt+0x11040>
   227b0:	cmn	r4, #1
   227b4:	beq	227fc <__assert_fail@plt+0x11050>
   227b8:	mov	r1, #-2147483648	; 0x80000000
   227bc:	sdiv	r1, r1, r4
   227c0:	mvn	r7, #-2147483648	; 0x80000000
   227c4:	cmp	r1, r5
   227c8:	bge	227fc <__assert_fail@plt+0x11050>
   227cc:	b	2280c <__assert_fail@plt+0x11060>
   227d0:	beq	227fc <__assert_fail@plt+0x11050>
   227d4:	mov	r1, #-2147483648	; 0x80000000
   227d8:	sdiv	r1, r1, r5
   227dc:	mvn	r7, #-2147483648	; 0x80000000
   227e0:	cmp	r1, r4
   227e4:	bge	227fc <__assert_fail@plt+0x11050>
   227e8:	b	2280c <__assert_fail@plt+0x11060>
   227ec:	mvn	r7, #-2147483648	; 0x80000000
   227f0:	sdiv	r1, r7, r4
   227f4:	cmp	r5, r1
   227f8:	blt	2280c <__assert_fail@plt+0x11060>
   227fc:	mul	r1, r5, r4
   22800:	mov	r7, #64	; 0x40
   22804:	cmp	r1, #63	; 0x3f
   22808:	bgt	22814 <__assert_fail@plt+0x11068>
   2280c:	sdiv	r5, r7, r4
   22810:	mul	r1, r5, r4
   22814:	cmp	r0, #0
   22818:	moveq	r7, #0
   2281c:	streq	r7, [r8]
   22820:	sub	r7, r5, r6
   22824:	cmp	r7, r2
   22828:	bge	228d4 <__assert_fail@plt+0x11128>
   2282c:	add	r5, r6, r2
   22830:	mov	r1, #0
   22834:	cmp	r5, r3
   22838:	mov	r2, #0
   2283c:	movwgt	r2, #1
   22840:	cmn	r3, #1
   22844:	movwgt	r1, #1
   22848:	cmp	r5, r6
   2284c:	bvs	228bc <__assert_fail@plt+0x11110>
   22850:	ands	r1, r1, r2
   22854:	bne	228bc <__assert_fail@plt+0x11110>
   22858:	cmn	r4, #1
   2285c:	ble	22884 <__assert_fail@plt+0x110d8>
   22860:	cmp	r4, #0
   22864:	beq	228d0 <__assert_fail@plt+0x11124>
   22868:	cmn	r5, #1
   2286c:	ble	228a8 <__assert_fail@plt+0x110fc>
   22870:	mvn	r1, #-2147483648	; 0x80000000
   22874:	udiv	r1, r1, r4
   22878:	cmp	r1, r5
   2287c:	bge	228d0 <__assert_fail@plt+0x11124>
   22880:	b	228bc <__assert_fail@plt+0x11110>
   22884:	cmn	r5, #1
   22888:	ble	228c0 <__assert_fail@plt+0x11114>
   2288c:	cmn	r4, #1
   22890:	beq	228d0 <__assert_fail@plt+0x11124>
   22894:	mov	r1, #-2147483648	; 0x80000000
   22898:	sdiv	r1, r1, r4
   2289c:	cmp	r1, r5
   228a0:	bge	228d0 <__assert_fail@plt+0x11124>
   228a4:	b	228bc <__assert_fail@plt+0x11110>
   228a8:	beq	228d0 <__assert_fail@plt+0x11124>
   228ac:	mov	r1, #-2147483648	; 0x80000000
   228b0:	sdiv	r1, r1, r5
   228b4:	cmp	r1, r4
   228b8:	bge	228d0 <__assert_fail@plt+0x11124>
   228bc:	bl	229d4 <__assert_fail@plt+0x11228>
   228c0:	mvn	r1, #-2147483648	; 0x80000000
   228c4:	sdiv	r1, r1, r4
   228c8:	cmp	r5, r1
   228cc:	blt	228bc <__assert_fail@plt+0x11110>
   228d0:	mul	r1, r5, r4
   228d4:	bl	22664 <__assert_fail@plt+0x10eb8>
   228d8:	str	r5, [r8]
   228dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   228e0:	mov	r1, #1
   228e4:	b	228e8 <__assert_fail@plt+0x1113c>
   228e8:	push	{fp, lr}
   228ec:	mov	fp, sp
   228f0:	bl	22a18 <__assert_fail@plt+0x1126c>
   228f4:	bl	22638 <__assert_fail@plt+0x10e8c>
   228f8:	pop	{fp, pc}
   228fc:	mov	r1, #1
   22900:	b	22904 <__assert_fail@plt+0x11158>
   22904:	push	{fp, lr}
   22908:	mov	fp, sp
   2290c:	bl	23134 <__assert_fail@plt+0x11988>
   22910:	bl	22638 <__assert_fail@plt+0x10e8c>
   22914:	pop	{fp, pc}
   22918:	push	{r4, r5, r6, sl, fp, lr}
   2291c:	add	fp, sp, #16
   22920:	mov	r4, r1
   22924:	mov	r5, r0
   22928:	mov	r0, r1
   2292c:	bl	22624 <__assert_fail@plt+0x10e78>
   22930:	mov	r6, r0
   22934:	mov	r1, r5
   22938:	mov	r2, r4
   2293c:	bl	114d0 <memcpy@plt>
   22940:	mov	r0, r6
   22944:	pop	{r4, r5, r6, sl, fp, pc}
   22948:	push	{r4, r5, r6, sl, fp, lr}
   2294c:	add	fp, sp, #16
   22950:	mov	r4, r1
   22954:	mov	r5, r0
   22958:	mov	r0, r1
   2295c:	bl	2264c <__assert_fail@plt+0x10ea0>
   22960:	mov	r6, r0
   22964:	mov	r1, r5
   22968:	mov	r2, r4
   2296c:	bl	114d0 <memcpy@plt>
   22970:	mov	r0, r6
   22974:	pop	{r4, r5, r6, sl, fp, pc}
   22978:	push	{r4, r5, r6, sl, fp, lr}
   2297c:	add	fp, sp, #16
   22980:	mov	r4, r1
   22984:	mov	r5, r0
   22988:	add	r0, r1, #1
   2298c:	bl	2264c <__assert_fail@plt+0x10ea0>
   22990:	mov	r6, r0
   22994:	mov	r0, #0
   22998:	strb	r0, [r6, r4]
   2299c:	mov	r0, r6
   229a0:	mov	r1, r5
   229a4:	mov	r2, r4
   229a8:	bl	114d0 <memcpy@plt>
   229ac:	mov	r0, r6
   229b0:	pop	{r4, r5, r6, sl, fp, pc}
   229b4:	push	{r4, sl, fp, lr}
   229b8:	add	fp, sp, #8
   229bc:	mov	r4, r0
   229c0:	bl	1165c <strlen@plt>
   229c4:	add	r1, r0, #1
   229c8:	mov	r0, r4
   229cc:	pop	{r4, sl, fp, lr}
   229d0:	b	22918 <__assert_fail@plt+0x1116c>
   229d4:	push	{fp, lr}
   229d8:	mov	fp, sp
   229dc:	movw	r0, #20816	; 0x5150
   229e0:	movt	r0, #3
   229e4:	ldr	r4, [r0]
   229e8:	movw	r1, #18033	; 0x4671
   229ec:	movt	r1, #2
   229f0:	mov	r0, #0
   229f4:	mov	r2, #5
   229f8:	bl	11524 <dcgettext@plt>
   229fc:	mov	r3, r0
   22a00:	movw	r2, #16360	; 0x3fe8
   22a04:	movt	r2, #2
   22a08:	mov	r0, r4
   22a0c:	mov	r1, #0
   22a10:	bl	115d8 <error@plt>
   22a14:	bl	11788 <abort@plt>
   22a18:	clz	r2, r1
   22a1c:	lsr	r2, r2, #5
   22a20:	clz	r3, r0
   22a24:	lsr	r3, r3, #5
   22a28:	orrs	r2, r3, r2
   22a2c:	movwne	r1, #1
   22a30:	movwne	r0, #1
   22a34:	cmp	r1, #0
   22a38:	beq	22a68 <__assert_fail@plt+0x112bc>
   22a3c:	mvn	r2, #-2147483648	; 0x80000000
   22a40:	udiv	r2, r2, r1
   22a44:	cmp	r2, r0
   22a48:	bcs	22a68 <__assert_fail@plt+0x112bc>
   22a4c:	push	{fp, lr}
   22a50:	mov	fp, sp
   22a54:	bl	1168c <__errno_location@plt>
   22a58:	mov	r1, #12
   22a5c:	str	r1, [r0]
   22a60:	mov	r0, #0
   22a64:	pop	{fp, pc}
   22a68:	b	1141c <calloc@plt>
   22a6c:	cmp	r0, #0
   22a70:	movweq	r0, #1
   22a74:	cmn	r0, #1
   22a78:	ble	22a80 <__assert_fail@plt+0x112d4>
   22a7c:	b	11608 <malloc@plt>
   22a80:	push	{fp, lr}
   22a84:	mov	fp, sp
   22a88:	bl	1168c <__errno_location@plt>
   22a8c:	mov	r1, #12
   22a90:	str	r1, [r0]
   22a94:	mov	r0, #0
   22a98:	pop	{fp, pc}
   22a9c:	push	{fp, lr}
   22aa0:	mov	fp, sp
   22aa4:	cmp	r0, #0
   22aa8:	beq	22ac4 <__assert_fail@plt+0x11318>
   22aac:	cmp	r1, #0
   22ab0:	beq	22ad0 <__assert_fail@plt+0x11324>
   22ab4:	cmn	r1, #1
   22ab8:	ble	22adc <__assert_fail@plt+0x11330>
   22abc:	pop	{fp, lr}
   22ac0:	b	1153c <realloc@plt>
   22ac4:	mov	r0, r1
   22ac8:	pop	{fp, lr}
   22acc:	b	22a6c <__assert_fail@plt+0x112c0>
   22ad0:	bl	1312c <__assert_fail@plt+0x1980>
   22ad4:	mov	r0, #0
   22ad8:	pop	{fp, pc}
   22adc:	bl	1168c <__errno_location@plt>
   22ae0:	mov	r1, #12
   22ae4:	str	r1, [r0]
   22ae8:	mov	r0, #0
   22aec:	pop	{fp, pc}
   22af0:	mov	r1, r0
   22af4:	sub	r2, r0, #65	; 0x41
   22af8:	mov	r0, #1
   22afc:	cmp	r2, #26
   22b00:	subcs	r2, r1, #97	; 0x61
   22b04:	cmpcs	r2, #26
   22b08:	bcs	22b10 <__assert_fail@plt+0x11364>
   22b0c:	bx	lr
   22b10:	sub	r1, r1, #48	; 0x30
   22b14:	cmp	r1, #10
   22b18:	movcs	r0, #0
   22b1c:	bx	lr
   22b20:	mov	r1, r0
   22b24:	sub	r2, r0, #65	; 0x41
   22b28:	mov	r0, #1
   22b2c:	cmp	r2, #26
   22b30:	subcs	r1, r1, #97	; 0x61
   22b34:	cmpcs	r1, #26
   22b38:	movcs	r0, #0
   22b3c:	bx	lr
   22b40:	mov	r1, #0
   22b44:	cmp	r0, #128	; 0x80
   22b48:	movwcc	r1, #1
   22b4c:	mov	r0, r1
   22b50:	bx	lr
   22b54:	sub	r1, r0, #9
   22b58:	clz	r1, r1
   22b5c:	lsr	r1, r1, #5
   22b60:	sub	r0, r0, #32
   22b64:	clz	r0, r0
   22b68:	lsr	r0, r0, #5
   22b6c:	orr	r0, r0, r1
   22b70:	bx	lr
   22b74:	mov	r1, r0
   22b78:	mov	r0, #1
   22b7c:	cmp	r1, #32
   22b80:	bxcc	lr
   22b84:	cmp	r1, #127	; 0x7f
   22b88:	movne	r0, #0
   22b8c:	bx	lr
   22b90:	sub	r1, r0, #48	; 0x30
   22b94:	mov	r0, #0
   22b98:	cmp	r1, #10
   22b9c:	movwcc	r0, #1
   22ba0:	bx	lr
   22ba4:	sub	r1, r0, #33	; 0x21
   22ba8:	mov	r0, #0
   22bac:	cmp	r1, #94	; 0x5e
   22bb0:	movwcc	r0, #1
   22bb4:	bx	lr
   22bb8:	sub	r1, r0, #97	; 0x61
   22bbc:	mov	r0, #0
   22bc0:	cmp	r1, #26
   22bc4:	movwcc	r0, #1
   22bc8:	bx	lr
   22bcc:	sub	r1, r0, #32
   22bd0:	mov	r0, #0
   22bd4:	cmp	r1, #95	; 0x5f
   22bd8:	movwcc	r0, #1
   22bdc:	bx	lr
   22be0:	sub	r1, r0, #33	; 0x21
   22be4:	cmp	r1, #93	; 0x5d
   22be8:	bhi	22d74 <__assert_fail@plt+0x115c8>
   22bec:	mov	r0, #1
   22bf0:	add	r2, pc, #0
   22bf4:	ldr	pc, [r2, r1, lsl #2]
   22bf8:	andeq	r2, r2, r0, ror sp
   22bfc:	andeq	r2, r2, r0, ror sp
   22c00:	andeq	r2, r2, r0, ror sp
   22c04:	andeq	r2, r2, r0, ror sp
   22c08:	andeq	r2, r2, r0, ror sp
   22c0c:	andeq	r2, r2, r0, ror sp
   22c10:	andeq	r2, r2, r0, ror sp
   22c14:	andeq	r2, r2, r0, ror sp
   22c18:	andeq	r2, r2, r0, ror sp
   22c1c:	andeq	r2, r2, r0, ror sp
   22c20:	andeq	r2, r2, r0, ror sp
   22c24:	andeq	r2, r2, r0, ror sp
   22c28:	andeq	r2, r2, r0, ror sp
   22c2c:	andeq	r2, r2, r0, ror sp
   22c30:	andeq	r2, r2, r0, ror sp
   22c34:	andeq	r2, r2, r4, ror sp
   22c38:	andeq	r2, r2, r4, ror sp
   22c3c:	andeq	r2, r2, r4, ror sp
   22c40:	andeq	r2, r2, r4, ror sp
   22c44:	andeq	r2, r2, r4, ror sp
   22c48:	andeq	r2, r2, r4, ror sp
   22c4c:	andeq	r2, r2, r4, ror sp
   22c50:	andeq	r2, r2, r4, ror sp
   22c54:	andeq	r2, r2, r4, ror sp
   22c58:	andeq	r2, r2, r4, ror sp
   22c5c:	andeq	r2, r2, r0, ror sp
   22c60:	andeq	r2, r2, r0, ror sp
   22c64:	andeq	r2, r2, r0, ror sp
   22c68:	andeq	r2, r2, r0, ror sp
   22c6c:	andeq	r2, r2, r0, ror sp
   22c70:	andeq	r2, r2, r0, ror sp
   22c74:	andeq	r2, r2, r0, ror sp
   22c78:	andeq	r2, r2, r4, ror sp
   22c7c:	andeq	r2, r2, r4, ror sp
   22c80:	andeq	r2, r2, r4, ror sp
   22c84:	andeq	r2, r2, r4, ror sp
   22c88:	andeq	r2, r2, r4, ror sp
   22c8c:	andeq	r2, r2, r4, ror sp
   22c90:	andeq	r2, r2, r4, ror sp
   22c94:	andeq	r2, r2, r4, ror sp
   22c98:	andeq	r2, r2, r4, ror sp
   22c9c:	andeq	r2, r2, r4, ror sp
   22ca0:	andeq	r2, r2, r4, ror sp
   22ca4:	andeq	r2, r2, r4, ror sp
   22ca8:	andeq	r2, r2, r4, ror sp
   22cac:	andeq	r2, r2, r4, ror sp
   22cb0:	andeq	r2, r2, r4, ror sp
   22cb4:	andeq	r2, r2, r4, ror sp
   22cb8:	andeq	r2, r2, r4, ror sp
   22cbc:	andeq	r2, r2, r4, ror sp
   22cc0:	andeq	r2, r2, r4, ror sp
   22cc4:	andeq	r2, r2, r4, ror sp
   22cc8:	andeq	r2, r2, r4, ror sp
   22ccc:	andeq	r2, r2, r4, ror sp
   22cd0:	andeq	r2, r2, r4, ror sp
   22cd4:	andeq	r2, r2, r4, ror sp
   22cd8:	andeq	r2, r2, r4, ror sp
   22cdc:	andeq	r2, r2, r4, ror sp
   22ce0:	andeq	r2, r2, r0, ror sp
   22ce4:	andeq	r2, r2, r0, ror sp
   22ce8:	andeq	r2, r2, r0, ror sp
   22cec:	andeq	r2, r2, r0, ror sp
   22cf0:	andeq	r2, r2, r0, ror sp
   22cf4:	andeq	r2, r2, r0, ror sp
   22cf8:	andeq	r2, r2, r4, ror sp
   22cfc:	andeq	r2, r2, r4, ror sp
   22d00:	andeq	r2, r2, r4, ror sp
   22d04:	andeq	r2, r2, r4, ror sp
   22d08:	andeq	r2, r2, r4, ror sp
   22d0c:	andeq	r2, r2, r4, ror sp
   22d10:	andeq	r2, r2, r4, ror sp
   22d14:	andeq	r2, r2, r4, ror sp
   22d18:	andeq	r2, r2, r4, ror sp
   22d1c:	andeq	r2, r2, r4, ror sp
   22d20:	andeq	r2, r2, r4, ror sp
   22d24:	andeq	r2, r2, r4, ror sp
   22d28:	andeq	r2, r2, r4, ror sp
   22d2c:	andeq	r2, r2, r4, ror sp
   22d30:	andeq	r2, r2, r4, ror sp
   22d34:	andeq	r2, r2, r4, ror sp
   22d38:	andeq	r2, r2, r4, ror sp
   22d3c:	andeq	r2, r2, r4, ror sp
   22d40:	andeq	r2, r2, r4, ror sp
   22d44:	andeq	r2, r2, r4, ror sp
   22d48:	andeq	r2, r2, r4, ror sp
   22d4c:	andeq	r2, r2, r4, ror sp
   22d50:	andeq	r2, r2, r4, ror sp
   22d54:	andeq	r2, r2, r4, ror sp
   22d58:	andeq	r2, r2, r4, ror sp
   22d5c:	andeq	r2, r2, r4, ror sp
   22d60:	andeq	r2, r2, r0, ror sp
   22d64:	andeq	r2, r2, r0, ror sp
   22d68:	andeq	r2, r2, r0, ror sp
   22d6c:	andeq	r2, r2, r0, ror sp
   22d70:	bx	lr
   22d74:	mov	r0, #0
   22d78:	bx	lr
   22d7c:	sub	r0, r0, #9
   22d80:	cmp	r0, #23
   22d84:	movhi	r0, #0
   22d88:	bxhi	lr
   22d8c:	bic	r0, r0, #-16777216	; 0xff000000
   22d90:	movw	r1, #31
   22d94:	movt	r1, #128	; 0x80
   22d98:	mov	r2, #1
   22d9c:	and	r0, r2, r1, lsr r0
   22da0:	bx	lr
   22da4:	sub	r1, r0, #65	; 0x41
   22da8:	mov	r0, #0
   22dac:	cmp	r1, #26
   22db0:	movwcc	r0, #1
   22db4:	bx	lr
   22db8:	mov	r1, r0
   22dbc:	sub	r2, r0, #48	; 0x30
   22dc0:	mov	r0, #1
   22dc4:	cmp	r2, #22
   22dc8:	bhi	22de0 <__assert_fail@plt+0x11634>
   22dcc:	mov	ip, #1
   22dd0:	movw	r3, #1023	; 0x3ff
   22dd4:	movt	r3, #126	; 0x7e
   22dd8:	tst	r3, ip, lsl r2
   22ddc:	bxne	lr
   22de0:	sub	r1, r1, #97	; 0x61
   22de4:	cmp	r1, #6
   22de8:	movcs	r0, #0
   22dec:	bxcs	lr
   22df0:	bx	lr
   22df4:	sub	r1, r0, #65	; 0x41
   22df8:	cmp	r1, #26
   22dfc:	addcc	r0, r0, #32
   22e00:	bx	lr
   22e04:	sub	r1, r0, #97	; 0x61
   22e08:	cmp	r1, #26
   22e0c:	subcc	r0, r0, #32
   22e10:	bx	lr
   22e14:	push	{r4, r5, r6, sl, fp, lr}
   22e18:	add	fp, sp, #16
   22e1c:	mov	r4, r0
   22e20:	bl	115b4 <__fpending@plt>
   22e24:	mov	r5, r0
   22e28:	mov	r0, r4
   22e2c:	bl	115c0 <ferror_unlocked@plt>
   22e30:	mov	r6, r0
   22e34:	mov	r0, r4
   22e38:	bl	22f5c <__assert_fail@plt+0x117b0>
   22e3c:	cmp	r6, #0
   22e40:	beq	22e60 <__assert_fail@plt+0x116b4>
   22e44:	mvn	r4, #0
   22e48:	cmp	r0, #0
   22e4c:	bne	22e94 <__assert_fail@plt+0x116e8>
   22e50:	bl	1168c <__errno_location@plt>
   22e54:	mov	r1, #0
   22e58:	str	r1, [r0]
   22e5c:	b	22e94 <__assert_fail@plt+0x116e8>
   22e60:	cmp	r0, #0
   22e64:	mov	r4, r0
   22e68:	mvnne	r4, #0
   22e6c:	cmp	r5, #0
   22e70:	bne	22e94 <__assert_fail@plt+0x116e8>
   22e74:	cmp	r0, #0
   22e78:	beq	22e94 <__assert_fail@plt+0x116e8>
   22e7c:	bl	1168c <__errno_location@plt>
   22e80:	ldr	r0, [r0]
   22e84:	subs	r4, r0, #9
   22e88:	mvnne	r4, #0
   22e8c:	mov	r0, r4
   22e90:	pop	{r4, r5, r6, sl, fp, pc}
   22e94:	mov	r0, r4
   22e98:	pop	{r4, r5, r6, sl, fp, pc}
   22e9c:	push	{r4, r5, r6, r7, fp, lr}
   22ea0:	add	fp, sp, #16
   22ea4:	mov	r5, r1
   22ea8:	mov	r4, r0
   22eac:	ldr	r0, [r0, #4]
   22eb0:	cmp	r0, r1
   22eb4:	strcs	r5, [r4]
   22eb8:	movcs	r0, #1
   22ebc:	popcs	{r4, r5, r6, r7, fp, pc}
   22ec0:	mov	r6, r3
   22ec4:	cmp	r3, #0
   22ec8:	beq	22ef0 <__assert_fail@plt+0x11744>
   22ecc:	mvn	r0, #0
   22ed0:	udiv	r0, r0, r6
   22ed4:	cmp	r0, r5
   22ed8:	bcs	22ef0 <__assert_fail@plt+0x11744>
   22edc:	bl	1168c <__errno_location@plt>
   22ee0:	mov	r1, #12
   22ee4:	str	r1, [r0]
   22ee8:	mov	r0, #0
   22eec:	pop	{r4, r5, r6, r7, fp, pc}
   22ef0:	mul	r1, r6, r5
   22ef4:	ldr	r0, [r4, #8]
   22ef8:	cmp	r0, r2
   22efc:	beq	22f14 <__assert_fail@plt+0x11768>
   22f00:	bl	22a9c <__assert_fail@plt+0x112f0>
   22f04:	mov	r7, r0
   22f08:	cmp	r0, #0
   22f0c:	bne	22f44 <__assert_fail@plt+0x11798>
   22f10:	b	22f54 <__assert_fail@plt+0x117a8>
   22f14:	mov	r0, r1
   22f18:	bl	22a6c <__assert_fail@plt+0x112c0>
   22f1c:	cmp	r0, #0
   22f20:	beq	22f54 <__assert_fail@plt+0x117a8>
   22f24:	mov	r7, r0
   22f28:	ldr	r1, [r4, #8]
   22f2c:	cmp	r1, #0
   22f30:	beq	22f44 <__assert_fail@plt+0x11798>
   22f34:	ldr	r0, [r4]
   22f38:	mul	r2, r0, r6
   22f3c:	mov	r0, r7
   22f40:	bl	114d0 <memcpy@plt>
   22f44:	str	r5, [r4]
   22f48:	stmib	r4, {r5, r7}
   22f4c:	mov	r0, #1
   22f50:	pop	{r4, r5, r6, r7, fp, pc}
   22f54:	mov	r0, #0
   22f58:	pop	{r4, r5, r6, r7, fp, pc}
   22f5c:	push	{r4, r5, fp, lr}
   22f60:	add	fp, sp, #8
   22f64:	sub	sp, sp, #8
   22f68:	mov	r4, r0
   22f6c:	bl	116d4 <fileno@plt>
   22f70:	cmn	r0, #1
   22f74:	ble	22fec <__assert_fail@plt+0x11840>
   22f78:	mov	r0, r4
   22f7c:	bl	11620 <__freading@plt>
   22f80:	cmp	r0, #0
   22f84:	beq	22fb0 <__assert_fail@plt+0x11804>
   22f88:	mov	r0, r4
   22f8c:	bl	116d4 <fileno@plt>
   22f90:	mov	r1, #1
   22f94:	str	r1, [sp]
   22f98:	mov	r2, #0
   22f9c:	mov	r3, #0
   22fa0:	bl	11590 <lseek64@plt>
   22fa4:	and	r0, r0, r1
   22fa8:	cmn	r0, #1
   22fac:	beq	22fec <__assert_fail@plt+0x11840>
   22fb0:	mov	r0, r4
   22fb4:	bl	22ffc <__assert_fail@plt+0x11850>
   22fb8:	cmp	r0, #0
   22fbc:	beq	22fec <__assert_fail@plt+0x11840>
   22fc0:	bl	1168c <__errno_location@plt>
   22fc4:	ldr	r5, [r0]
   22fc8:	mov	r0, r4
   22fcc:	bl	116f8 <fclose@plt>
   22fd0:	cmp	r5, #0
   22fd4:	beq	22fe4 <__assert_fail@plt+0x11838>
   22fd8:	bl	1168c <__errno_location@plt>
   22fdc:	str	r5, [r0]
   22fe0:	mvn	r0, #0
   22fe4:	sub	sp, fp, #8
   22fe8:	pop	{r4, r5, fp, pc}
   22fec:	mov	r0, r4
   22ff0:	sub	sp, fp, #8
   22ff4:	pop	{r4, r5, fp, lr}
   22ff8:	b	116f8 <fclose@plt>
   22ffc:	push	{r4, sl, fp, lr}
   23000:	add	fp, sp, #8
   23004:	mov	r4, r0
   23008:	cmp	r0, #0
   2300c:	beq	23024 <__assert_fail@plt+0x11878>
   23010:	mov	r0, r4
   23014:	bl	11620 <__freading@plt>
   23018:	cmp	r0, #0
   2301c:	movne	r0, r4
   23020:	blne	23030 <__assert_fail@plt+0x11884>
   23024:	mov	r0, r4
   23028:	pop	{r4, sl, fp, lr}
   2302c:	b	11488 <fflush@plt>
   23030:	ldrb	r1, [r0, #1]
   23034:	tst	r1, #1
   23038:	bxeq	lr
   2303c:	push	{fp, lr}
   23040:	mov	fp, sp
   23044:	sub	sp, sp, #8
   23048:	mov	r1, #1
   2304c:	str	r1, [sp]
   23050:	mov	r2, #0
   23054:	mov	r3, #0
   23058:	bl	23064 <__assert_fail@plt+0x118b8>
   2305c:	mov	sp, fp
   23060:	pop	{fp, pc}
   23064:	push	{r4, r5, r6, r7, fp, lr}
   23068:	add	fp, sp, #16
   2306c:	sub	sp, sp, #8
   23070:	mov	r5, r3
   23074:	mov	r6, r2
   23078:	mov	r4, r0
   2307c:	ldr	r0, [r0, #4]
   23080:	ldr	r1, [r4, #8]
   23084:	cmp	r1, r0
   23088:	bne	230a4 <__assert_fail@plt+0x118f8>
   2308c:	ldrd	r0, [r4, #16]
   23090:	cmp	r1, r0
   23094:	bne	230a4 <__assert_fail@plt+0x118f8>
   23098:	ldr	r0, [r4, #36]	; 0x24
   2309c:	cmp	r0, #0
   230a0:	beq	230bc <__assert_fail@plt+0x11910>
   230a4:	mov	r0, r4
   230a8:	mov	r2, r6
   230ac:	mov	r3, r5
   230b0:	sub	sp, fp, #16
   230b4:	pop	{r4, r5, r6, r7, fp, lr}
   230b8:	b	11704 <fseeko64@plt>
   230bc:	ldr	r7, [fp, #8]
   230c0:	mov	r0, r4
   230c4:	bl	116d4 <fileno@plt>
   230c8:	str	r7, [sp]
   230cc:	mov	r2, r6
   230d0:	mov	r3, r5
   230d4:	bl	11590 <lseek64@plt>
   230d8:	and	r2, r0, r1
   230dc:	cmn	r2, #1
   230e0:	mvneq	r0, #0
   230e4:	subeq	sp, fp, #16
   230e8:	popeq	{r4, r5, r6, r7, fp, pc}
   230ec:	strd	r0, [r4, #80]	; 0x50
   230f0:	ldr	r0, [r4]
   230f4:	bic	r0, r0, #16
   230f8:	str	r0, [r4]
   230fc:	mov	r0, #0
   23100:	sub	sp, fp, #16
   23104:	pop	{r4, r5, r6, r7, fp, pc}
   23108:	push	{fp, lr}
   2310c:	mov	fp, sp
   23110:	bl	1168c <__errno_location@plt>
   23114:	mov	r1, #12
   23118:	str	r1, [r0]
   2311c:	mov	r0, #0
   23120:	pop	{fp, pc}
   23124:	b	22a6c <__assert_fail@plt+0x112c0>
   23128:	cmp	r1, #0
   2312c:	orreq	r1, r1, #1
   23130:	b	22a9c <__assert_fail@plt+0x112f0>
   23134:	b	22a18 <__assert_fail@plt+0x1126c>
   23138:	clz	r3, r2
   2313c:	lsr	ip, r3, #5
   23140:	clz	r3, r1
   23144:	lsr	r3, r3, #5
   23148:	orrs	r3, r3, ip
   2314c:	movwne	r1, #1
   23150:	movwne	r2, #1
   23154:	b	23294 <__assert_fail@plt+0x11ae8>
   23158:	push	{fp, lr}
   2315c:	mov	fp, sp
   23160:	mov	r0, #14
   23164:	bl	11740 <nl_langinfo@plt>
   23168:	movw	r1, #15875	; 0x3e03
   2316c:	movt	r1, #2
   23170:	cmp	r0, #0
   23174:	movne	r1, r0
   23178:	ldrb	r2, [r1]
   2317c:	movw	r0, #18050	; 0x4682
   23180:	movt	r0, #2
   23184:	cmp	r2, #0
   23188:	movne	r0, r1
   2318c:	pop	{fp, pc}
   23190:	push	{r4, sl, fp, lr}
   23194:	add	fp, sp, #8
   23198:	mov	r4, r0
   2319c:	bl	11494 <wcwidth@plt>
   231a0:	cmn	r0, #1
   231a4:	popgt	{r4, sl, fp, pc}
   231a8:	mov	r0, r4
   231ac:	bl	11560 <iswcntrl@plt>
   231b0:	clz	r0, r0
   231b4:	lsr	r0, r0, #5
   231b8:	pop	{r4, sl, fp, pc}
   231bc:	push	{r4, r5, r6, sl, fp, lr}
   231c0:	add	fp, sp, #16
   231c4:	mov	r5, r1
   231c8:	mov	r4, r0
   231cc:	ldr	r6, [r1], #16
   231d0:	cmp	r6, r1
   231d4:	bne	231e8 <__assert_fail@plt+0x11a3c>
   231d8:	ldr	r2, [r5, #4]
   231dc:	add	r6, r4, #16
   231e0:	mov	r0, r6
   231e4:	bl	114d0 <memcpy@plt>
   231e8:	str	r6, [r4]
   231ec:	ldr	r0, [r5, #4]
   231f0:	str	r0, [r4, #4]
   231f4:	ldrb	r0, [r5, #8]
   231f8:	strb	r0, [r4, #8]
   231fc:	cmp	r0, #0
   23200:	ldrne	r0, [r5, #12]
   23204:	strne	r0, [r4, #12]
   23208:	pop	{r4, r5, r6, sl, fp, pc}
   2320c:	ubfx	r1, r0, #5, #3
   23210:	movw	r2, #18056	; 0x4688
   23214:	movt	r2, #2
   23218:	ldr	r1, [r2, r1, lsl #2]
   2321c:	and	r0, r0, #31
   23220:	mov	r2, #1
   23224:	and	r0, r1, r2, lsl r0
   23228:	cmp	r0, #0
   2322c:	movwne	r0, #1
   23230:	bx	lr
   23234:	push	{r4, r5, r6, r7, fp, lr}
   23238:	add	fp, sp, #16
   2323c:	sub	sp, sp, #8
   23240:	mov	r7, r2
   23244:	mov	r4, r1
   23248:	add	r5, sp, #4
   2324c:	cmp	r0, #0
   23250:	movne	r5, r0
   23254:	mov	r0, r5
   23258:	bl	115cc <mbrtowc@plt>
   2325c:	mov	r6, r0
   23260:	cmp	r7, #0
   23264:	beq	23288 <__assert_fail@plt+0x11adc>
   23268:	cmn	r6, #2
   2326c:	bcc	23288 <__assert_fail@plt+0x11adc>
   23270:	mov	r0, #0
   23274:	bl	232d0 <__assert_fail@plt+0x11b24>
   23278:	cmp	r0, #0
   2327c:	ldrbeq	r0, [r4]
   23280:	streq	r0, [r5]
   23284:	moveq	r6, #1
   23288:	mov	r0, r6
   2328c:	sub	sp, fp, #16
   23290:	pop	{r4, r5, r6, r7, fp, pc}
   23294:	cmp	r2, #0
   23298:	beq	232c8 <__assert_fail@plt+0x11b1c>
   2329c:	mvn	r3, #0
   232a0:	udiv	r3, r3, r2
   232a4:	cmp	r3, r1
   232a8:	bcs	232c8 <__assert_fail@plt+0x11b1c>
   232ac:	push	{fp, lr}
   232b0:	mov	fp, sp
   232b4:	bl	1168c <__errno_location@plt>
   232b8:	mov	r1, #12
   232bc:	str	r1, [r0]
   232c0:	mov	r0, #0
   232c4:	pop	{fp, pc}
   232c8:	mul	r1, r2, r1
   232cc:	b	22a9c <__assert_fail@plt+0x112f0>
   232d0:	push	{r4, sl, fp, lr}
   232d4:	add	fp, sp, #8
   232d8:	sub	sp, sp, #264	; 0x108
   232dc:	add	r1, sp, #7
   232e0:	movw	r2, #257	; 0x101
   232e4:	bl	23334 <__assert_fail@plt+0x11b88>
   232e8:	mov	r4, #0
   232ec:	cmp	r0, #0
   232f0:	bne	23328 <__assert_fail@plt+0x11b7c>
   232f4:	add	r0, sp, #7
   232f8:	movw	r1, #18088	; 0x46a8
   232fc:	movt	r1, #2
   23300:	bl	11458 <strcmp@plt>
   23304:	cmp	r0, #0
   23308:	beq	23328 <__assert_fail@plt+0x11b7c>
   2330c:	add	r0, sp, #7
   23310:	movw	r1, #18090	; 0x46aa
   23314:	movt	r1, #2
   23318:	bl	11458 <strcmp@plt>
   2331c:	mov	r4, r0
   23320:	cmp	r0, #0
   23324:	movwne	r4, #1
   23328:	mov	r0, r4
   2332c:	sub	sp, fp, #8
   23330:	pop	{r4, sl, fp, pc}
   23334:	b	23338 <__assert_fail@plt+0x11b8c>
   23338:	push	{r4, r5, r6, r7, fp, lr}
   2333c:	add	fp, sp, #16
   23340:	mov	r6, r2
   23344:	mov	r4, r1
   23348:	bl	233d4 <__assert_fail@plt+0x11c28>
   2334c:	cmp	r0, #0
   23350:	beq	23380 <__assert_fail@plt+0x11bd4>
   23354:	mov	r7, r0
   23358:	bl	1165c <strlen@plt>
   2335c:	cmp	r0, r6
   23360:	bcs	233a0 <__assert_fail@plt+0x11bf4>
   23364:	add	r2, r0, #1
   23368:	mov	r0, r4
   2336c:	mov	r1, r7
   23370:	bl	114d0 <memcpy@plt>
   23374:	mov	r5, #0
   23378:	mov	r0, r5
   2337c:	pop	{r4, r5, r6, r7, fp, pc}
   23380:	mov	r5, #22
   23384:	cmp	r6, #0
   23388:	movne	r0, #0
   2338c:	strbne	r0, [r4]
   23390:	movne	r0, r5
   23394:	popne	{r4, r5, r6, r7, fp, pc}
   23398:	mov	r0, r5
   2339c:	pop	{r4, r5, r6, r7, fp, pc}
   233a0:	mov	r5, #34	; 0x22
   233a4:	cmp	r6, #0
   233a8:	beq	233c8 <__assert_fail@plt+0x11c1c>
   233ac:	sub	r6, r6, #1
   233b0:	mov	r0, r4
   233b4:	mov	r1, r7
   233b8:	mov	r2, r6
   233bc:	bl	114d0 <memcpy@plt>
   233c0:	mov	r0, #0
   233c4:	strb	r0, [r4, r6]
   233c8:	mov	r0, r5
   233cc:	pop	{r4, r5, r6, r7, fp, pc}
   233d0:	b	233d4 <__assert_fail@plt+0x11c28>
   233d4:	mov	r1, #0
   233d8:	b	1171c <setlocale@plt>
   233dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   233e0:	mov	r7, r0
   233e4:	ldr	r6, [pc, #72]	; 23434 <__assert_fail@plt+0x11c88>
   233e8:	ldr	r5, [pc, #72]	; 23438 <__assert_fail@plt+0x11c8c>
   233ec:	add	r6, pc, r6
   233f0:	add	r5, pc, r5
   233f4:	sub	r6, r6, r5
   233f8:	mov	r8, r1
   233fc:	mov	r9, r2
   23400:	bl	113f0 <pthread_mutex_unlock@plt-0x20>
   23404:	asrs	r6, r6, #2
   23408:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2340c:	mov	r4, #0
   23410:	add	r4, r4, #1
   23414:	ldr	r3, [r5], #4
   23418:	mov	r2, r9
   2341c:	mov	r1, r8
   23420:	mov	r0, r7
   23424:	blx	r3
   23428:	cmp	r6, r4
   2342c:	bne	23410 <__assert_fail@plt+0x11c64>
   23430:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23434:	andeq	r1, r1, r0, lsl fp
   23438:	andeq	r1, r1, r8, lsl #22
   2343c:	bx	lr
   23440:	ldr	r3, [pc, #12]	; 23454 <__assert_fail@plt+0x11ca8>
   23444:	mov	r1, #0
   23448:	add	r3, pc, r3
   2344c:	ldr	r2, [r3]
   23450:	b	116a4 <__cxa_atexit@plt>
   23454:	strdeq	r1, [r1], -ip

Disassembly of section .fini:

00023458 <.fini>:
   23458:	push	{r3, lr}
   2345c:	pop	{r3, pc}
