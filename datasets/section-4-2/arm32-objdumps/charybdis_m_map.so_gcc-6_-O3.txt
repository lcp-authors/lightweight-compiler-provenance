
../repos/charybdis/modules/.libs/m_map.so:     file format elf32-littlearm


Disassembly of section .init:

000005a4 <_init>:
 5a4:	push	{r3, lr}
 5a8:	bl	63c <call_weak_fn>
 5ac:	pop	{r3, pc}

Disassembly of section .plt:

000005b0 <.plt>:
 5b0:	push	{lr}		; (str lr, [sp, #-4]!)
 5b4:	ldr	lr, [pc, #4]	; 5c0 <.plt+0x10>
 5b8:	add	lr, pc, lr
 5bc:	ldr	pc, [lr, #8]!
 5c0:	.word	0x00011a40

000005c4 <raise@plt>:
 5c4:	add	ip, pc, #0, 12
 5c8:	add	ip, ip, #69632	; 0x11000
 5cc:	ldr	pc, [ip, #2624]!	; 0xa40

000005d0 <__cxa_finalize@plt>:
 5d0:	add	ip, pc, #0, 12
 5d4:	add	ip, ip, #69632	; 0x11000
 5d8:	ldr	pc, [ip, #2616]!	; 0xa38

000005dc <__gmon_start__@plt>:
 5dc:	add	ip, pc, #0, 12
 5e0:	add	ip, ip, #69632	; 0x11000
 5e4:	ldr	pc, [ip, #2608]!	; 0xa30

000005e8 <sendto_one_numeric@plt>:
 5e8:	add	ip, pc, #0, 12
 5ec:	add	ip, ip, #69632	; 0x11000
 5f0:	ldr	pc, [ip, #2600]!	; 0xa28

000005f4 <strlen@plt>:
 5f4:	add	ip, pc, #0, 12
 5f8:	add	ip, ip, #69632	; 0x11000
 5fc:	ldr	pc, [ip, #2592]!	; 0xa20

00000600 <snprintf@plt>:
 600:	add	ip, pc, #0, 12
 604:	add	ip, ip, #69632	; 0x11000
 608:	ldr	pc, [ip, #2584]!	; 0xa18

0000060c <memset@plt>:
 60c:	add	ip, pc, #0, 12
 610:	add	ip, ip, #69632	; 0x11000
 614:	ldr	pc, [ip, #2576]!	; 0xa10

00000618 <scache_send_missing@plt>:
 618:	add	ip, pc, #0, 12
 61c:	add	ip, ip, #69632	; 0x11000
 620:	ldr	pc, [ip, #2568]!	; 0xa08

00000624 <rb_strlcpy@plt>:
 624:	add	ip, pc, #0, 12
 628:	add	ip, ip, #69632	; 0x11000
 62c:	ldr	pc, [ip, #2560]!	; 0xa00

00000630 <rb_strlcat@plt>:
 630:	add	ip, pc, #0, 12
 634:	add	ip, ip, #69632	; 0x11000
 638:	ldr	pc, [ip, #2552]!	; 0x9f8

Disassembly of section .text:

0000063c <call_weak_fn>:
 63c:	ldr	r3, [pc, #20]	; 658 <call_weak_fn+0x1c>
 640:	ldr	r2, [pc, #20]	; 65c <call_weak_fn+0x20>
 644:	add	r3, pc, r3
 648:	ldr	r2, [r3, r2]
 64c:	cmp	r2, #0
 650:	bxeq	lr
 654:	b	5dc <__gmon_start__@plt>
 658:	.word	0x000119b4
 65c:	.word	0x00000048

00000660 <deregister_tm_clones>:
 660:	ldr	r3, [pc, #52]	; 69c <deregister_tm_clones+0x3c>
 664:	ldr	r0, [pc, #52]	; 6a0 <deregister_tm_clones+0x40>
 668:	add	r3, pc, r3
 66c:	add	r0, pc, r0
 670:	add	r3, r3, #3
 674:	sub	r3, r3, r0
 678:	cmp	r3, #6
 67c:	ldr	r3, [pc, #32]	; 6a4 <deregister_tm_clones+0x44>
 680:	add	r3, pc, r3
 684:	bxls	lr
 688:	ldr	r2, [pc, #24]	; 6a8 <deregister_tm_clones+0x48>
 68c:	ldr	r3, [r3, r2]
 690:	cmp	r3, #0
 694:	bxeq	lr
 698:	bx	r3
 69c:	.word	0x00011a64
 6a0:	.word	0x00011a60
 6a4:	.word	0x00011978
 6a8:	.word	0x0000003c

000006ac <register_tm_clones>:
 6ac:	ldr	r1, [pc, #56]	; 6ec <register_tm_clones+0x40>
 6b0:	ldr	r0, [pc, #56]	; 6f0 <register_tm_clones+0x44>
 6b4:	add	r1, pc, r1
 6b8:	add	r0, pc, r0
 6bc:	sub	r1, r1, r0
 6c0:	ldr	r3, [pc, #44]	; 6f4 <register_tm_clones+0x48>
 6c4:	asr	r1, r1, #2
 6c8:	add	r3, pc, r3
 6cc:	add	r1, r1, r1, lsr #31
 6d0:	asrs	r1, r1, #1
 6d4:	bxeq	lr
 6d8:	ldr	r2, [pc, #24]	; 6f8 <register_tm_clones+0x4c>
 6dc:	ldr	r3, [r3, r2]
 6e0:	cmp	r3, #0
 6e4:	bxeq	lr
 6e8:	bx	r3
 6ec:	.word	0x00011a18
 6f0:	.word	0x00011a14
 6f4:	.word	0x00011930
 6f8:	.word	0x00000050

000006fc <__do_global_dtors_aux>:
 6fc:	ldr	r3, [pc, #76]	; 750 <__do_global_dtors_aux+0x54>
 700:	ldr	r2, [pc, #76]	; 754 <__do_global_dtors_aux+0x58>
 704:	add	r3, pc, r3
 708:	add	r2, pc, r2
 70c:	ldrb	r3, [r3]
 710:	cmp	r3, #0
 714:	bxne	lr
 718:	ldr	r3, [pc, #56]	; 758 <__do_global_dtors_aux+0x5c>
 71c:	push	{r4, lr}
 720:	ldr	r3, [r2, r3]
 724:	cmp	r3, #0
 728:	beq	738 <__do_global_dtors_aux+0x3c>
 72c:	ldr	r3, [pc, #40]	; 75c <__do_global_dtors_aux+0x60>
 730:	ldr	r0, [pc, r3]
 734:	bl	5d0 <__cxa_finalize@plt>
 738:	bl	660 <deregister_tm_clones>
 73c:	ldr	r3, [pc, #28]	; 760 <__do_global_dtors_aux+0x64>
 740:	mov	r2, #1
 744:	add	r3, pc, r3
 748:	strb	r2, [r3]
 74c:	pop	{r4, pc}
 750:	.word	0x000119c8
 754:	.word	0x000118f0
 758:	.word	0x00000038
 75c:	.word	0x00011924
 760:	.word	0x00011988

00000764 <frame_dummy>:
 764:	ldr	r0, [pc, #56]	; 7a4 <frame_dummy+0x40>
 768:	ldr	r3, [pc, #56]	; 7a8 <frame_dummy+0x44>
 76c:	add	r0, pc, r0
 770:	ldr	r2, [r0]
 774:	add	r3, pc, r3
 778:	cmp	r2, #0
 77c:	bne	784 <frame_dummy+0x20>
 780:	b	6ac <register_tm_clones>
 784:	ldr	r2, [pc, #32]	; 7ac <frame_dummy+0x48>
 788:	ldr	r3, [r3, r2]
 78c:	cmp	r3, #0
 790:	beq	780 <frame_dummy+0x1c>
 794:	push	{r4, lr}
 798:	blx	r3
 79c:	pop	{r4, lr}
 7a0:	b	6ac <register_tm_clones>
 7a4:	.word	0x00011788
 7a8:	.word	0x00011884
 7ac:	.word	0x0000004c

000007b0 <dump_map>:
 7b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 7b4:	mov	r3, #0
 7b8:	mov	r6, r1
 7bc:	strb	r3, [r2]
 7c0:	sub	sp, sp, #12
 7c4:	mov	r4, r2
 7c8:	mov	r8, r0
 7cc:	add	r1, r1, #88	; 0x58
 7d0:	mov	r0, r2
 7d4:	mov	r2, #512	; 0x200
 7d8:	bl	630 <rb_strlcat@plt>
 7dc:	ldrb	r3, [r6, #396]	; 0x18c
 7e0:	ldr	r7, [pc, #420]	; 98c <dump_map+0x1dc>
 7e4:	cmp	r3, #0
 7e8:	add	r7, pc, r7
 7ec:	bne	950 <dump_map+0x1a0>
 7f0:	ldr	r5, [pc, #408]	; 990 <dump_map+0x1e0>
 7f4:	add	r5, pc, r5
 7f8:	mov	r0, r5
 7fc:	bl	5f4 <strlen@plt>
 800:	mov	r3, #32
 804:	sub	r2, r0, #49	; 0x31
 808:	cmn	r2, #-2147483598	; 0x80000032
 80c:	strb	r3, [r5, r0]
 810:	add	r3, r0, #1
 814:	bls	828 <dump_map+0x78>
 818:	rsb	r2, r0, #49	; 0x31
 81c:	mov	r1, #45	; 0x2d
 820:	add	r0, r5, r3
 824:	bl	60c <memset@plt>
 828:	ldr	r3, [pc, #356]	; 994 <dump_map+0x1e4>
 82c:	ldr	r2, [r6, #28]
 830:	mov	r0, #1000	; 0x3e8
 834:	ldr	r3, [r7, r3]
 838:	ldr	r5, [r2, #56]	; 0x38
 83c:	ldr	r7, [pc, #340]	; 998 <dump_map+0x1e8>
 840:	ldr	r2, [r3, #4]
 844:	add	r7, pc, r7
 848:	mov	r1, r2
 84c:	add	r2, r2, r2, lsr #31
 850:	asr	r2, r2, #1
 854:	mla	r0, r0, r5, r2
 858:	bl	d28 <__udivsi3>
 85c:	mov	r3, r5
 860:	mov	ip, r0
 864:	ldr	r0, [pc, #304]	; 99c <dump_map+0x1ec>
 868:	asr	r1, ip, #31
 86c:	smull	r2, r0, r0, ip
 870:	ldr	r2, [pc, #296]	; 9a0 <dump_map+0x1f0>
 874:	rsb	r1, r1, r0, asr #2
 878:	str	r1, [sp]
 87c:	add	r1, r1, r1, lsl #2
 880:	add	r2, pc, r2
 884:	sub	r1, ip, r1, lsl #1
 888:	str	r1, [sp, #4]
 88c:	add	r0, r7, #50	; 0x32
 890:	ldr	r1, [pc, #268]	; 9a4 <dump_map+0x1f4>
 894:	bl	600 <snprintf@plt>
 898:	ldr	r2, [pc, #264]	; 9a8 <dump_map+0x1f8>
 89c:	mov	r3, r7
 8a0:	add	r2, pc, r2
 8a4:	mov	r1, #15
 8a8:	mov	r0, r8
 8ac:	bl	5e8 <sendto_one_numeric@plt>
 8b0:	ldr	r3, [r6, #28]
 8b4:	ldr	r5, [r3, #36]	; 0x24
 8b8:	cmp	r5, #0
 8bc:	beq	948 <dump_map+0x198>
 8c0:	ldr	r9, [r3, #44]	; 0x2c
 8c4:	cmp	r9, #0
 8c8:	beq	8fc <dump_map+0x14c>
 8cc:	add	r7, r7, #3
 8d0:	cmp	r4, r7
 8d4:	bls	8fc <dump_map+0x14c>
 8d8:	ldrb	r2, [r4, #-3]
 8dc:	mov	r3, #32
 8e0:	strb	r3, [r4, #-2]
 8e4:	cmp	r2, #96	; 0x60
 8e8:	strbeq	r3, [r4, #-3]
 8ec:	ldr	r3, [r6, #28]
 8f0:	ldr	r5, [r3, #36]	; 0x24
 8f4:	cmp	r5, #0
 8f8:	beq	948 <dump_map+0x198>
 8fc:	add	fp, r4, #4
 900:	mov	r6, #1
 904:	mov	r7, #32
 908:	mov	sl, #45	; 0x2d
 90c:	cmp	r9, r6
 910:	movgt	r3, #124	; 0x7c
 914:	movle	r3, #96	; 0x60
 918:	ldr	r1, [r5]
 91c:	mov	r2, fp
 920:	strb	r7, [r4]
 924:	strb	sl, [r4, #2]
 928:	strb	r7, [r4, #3]
 92c:	strb	r3, [r4, #1]
 930:	mov	r0, r8
 934:	bl	7b0 <dump_map>
 938:	ldr	r5, [r5, #8]
 93c:	add	r6, r6, #1
 940:	cmp	r5, #0
 944:	bne	90c <dump_map+0x15c>
 948:	add	sp, sp, #12
 94c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 950:	ldr	r1, [pc, #84]	; 9ac <dump_map+0x1fc>
 954:	mov	r2, #512	; 0x200
 958:	add	r1, pc, r1
 95c:	mov	r0, r4
 960:	bl	630 <rb_strlcat@plt>
 964:	add	r1, r6, #396	; 0x18c
 968:	mov	r2, #512	; 0x200
 96c:	mov	r0, r4
 970:	bl	630 <rb_strlcat@plt>
 974:	ldr	r1, [pc, #52]	; 9b0 <dump_map+0x200>
 978:	mov	r2, #512	; 0x200
 97c:	add	r1, pc, r1
 980:	mov	r0, r4
 984:	bl	630 <rb_strlcat@plt>
 988:	b	7f0 <dump_map+0x40>
 98c:	.word	0x00011810
 990:	.word	0x000118dc
 994:	.word	0x00000040
 998:	.word	0x0001188c
 99c:	.word	0x66666667
 9a0:	.word	0x0000070c
 9a4:	.word	0x000001ce
 9a8:	.word	0x00000708
 9ac:	.word	0x0000062c
 9b0:	.word	0x0000060c

000009b4 <mo_map>:
 9b4:	ldr	r3, [pc, #64]	; 9fc <mo_map+0x48>
 9b8:	ldr	r2, [pc, #64]	; a00 <mo_map+0x4c>
 9bc:	add	r3, pc, r3
 9c0:	push	{r4, lr}
 9c4:	mov	r0, r1
 9c8:	mov	r4, r1
 9cc:	ldr	r1, [r3, r2]
 9d0:	ldr	r2, [pc, #44]	; a04 <mo_map+0x50>
 9d4:	add	r2, pc, r2
 9d8:	bl	7b0 <dump_map>
 9dc:	mov	r0, r4
 9e0:	bl	618 <scache_send_missing@plt>
 9e4:	ldr	r2, [pc, #28]	; a08 <mo_map+0x54>
 9e8:	mov	r0, r4
 9ec:	add	r2, pc, r2
 9f0:	mov	r1, #17
 9f4:	pop	{r4, lr}
 9f8:	b	5e8 <sendto_one_numeric@plt>
 9fc:	.word	0x0001163c
 a00:	.word	0x00000054
 a04:	.word	0x000116fc
 a08:	.word	0x000005c0

00000a0c <flattened_map>:
 a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 a10:	vpush	{d8}
 a14:	ldr	r9, [pc, #548]	; c40 <flattened_map+0x234>
 a18:	ldr	r3, [pc, #548]	; c44 <flattened_map+0x238>
 a1c:	add	r9, pc, r9
 a20:	sub	sp, sp, #548	; 0x224
 a24:	add	r5, sp, #32
 a28:	str	r0, [sp, #12]
 a2c:	ldr	r4, [r9, r3]
 a30:	mov	r2, #512	; 0x200
 a34:	add	r1, r4, #88	; 0x58
 a38:	mov	r0, r5
 a3c:	bl	624 <rb_strlcpy@plt>
 a40:	mov	r0, r5
 a44:	bl	5f4 <strlen@plt>
 a48:	add	r3, sp, #544	; 0x220
 a4c:	mov	r2, #32
 a50:	add	r3, r3, r0
 a54:	sub	r1, r0, #49	; 0x31
 a58:	cmn	r1, #-2147483598	; 0x80000032
 a5c:	strb	r2, [r3, #-512]	; 0xfffffe00
 a60:	bls	a78 <flattened_map+0x6c>
 a64:	add	r3, r0, #1
 a68:	rsb	r2, r0, #49	; 0x31
 a6c:	mov	r1, #45	; 0x2d
 a70:	add	r0, r5, r3
 a74:	bl	60c <memset@plt>
 a78:	ldr	r2, [r4, #28]
 a7c:	ldr	r3, [pc, #452]	; c48 <flattened_map+0x23c>
 a80:	vldr	s16, [pc, #436]	; c3c <flattened_map+0x230>
 a84:	ldr	r2, [r2, #56]	; 0x38
 a88:	ldr	fp, [r9, r3]
 a8c:	mov	r3, r2
 a90:	vmov	s15, r2
 a94:	vldr	s14, [fp, #4]
 a98:	ldr	r2, [pc, #428]	; c4c <flattened_map+0x240>
 a9c:	ldr	r1, [pc, #428]	; c50 <flattened_map+0x244>
 aa0:	vcvt.f32.u32	s15, s15
 aa4:	vcvt.f32.s32	s13, s14
 aa8:	add	r2, pc, r2
 aac:	add	r0, r5, #50	; 0x32
 ab0:	vmul.f32	s15, s15, s16
 ab4:	vdiv.f32	s14, s15, s13
 ab8:	vcvt.f64.f32	d7, s14
 abc:	vstr	d7, [sp]
 ac0:	bl	600 <snprintf@plt>
 ac4:	ldr	r2, [pc, #392]	; c54 <flattened_map+0x248>
 ac8:	mov	r3, r5
 acc:	add	r2, pc, r2
 ad0:	mov	r1, #15
 ad4:	ldr	r0, [sp, #12]
 ad8:	bl	5e8 <sendto_one_numeric@plt>
 adc:	ldr	r3, [pc, #372]	; c58 <flattened_map+0x24c>
 ae0:	ldr	r7, [r9, r3]
 ae4:	ldr	r4, [r7]
 ae8:	cmp	r4, #0
 aec:	beq	c30 <flattened_map+0x224>
 af0:	ldr	r3, [pc, #356]	; c5c <flattened_map+0x250>
 af4:	ldr	r6, [pc, #356]	; c60 <flattened_map+0x254>
 af8:	add	r3, pc, r3
 afc:	str	r3, [sp, #16]
 b00:	ldr	r3, [pc, #348]	; c64 <flattened_map+0x258>
 b04:	mov	r8, #0
 b08:	add	r3, pc, r3
 b0c:	str	r3, [sp, #20]
 b10:	ldr	r3, [pc, #336]	; c68 <flattened_map+0x25c>
 b14:	add	r6, pc, r6
 b18:	add	r3, pc, r3
 b1c:	str	r3, [sp, #28]
 b20:	str	r7, [sp, #24]
 b24:	str	r6, [sp, #8]
 b28:	ldr	sl, [r4]
 b2c:	ldr	ip, [pc, #312]	; c6c <flattened_map+0x260>
 b30:	add	r8, r8, #1
 b34:	ldrh	r3, [sl, #80]	; 0x50
 b38:	cmp	r3, #4
 b3c:	beq	c24 <flattened_map+0x218>
 b40:	ldr	r3, [r9, ip]
 b44:	ldr	r1, [sp, #8]
 b48:	mov	r0, r5
 b4c:	ldr	r3, [r3, #12]
 b50:	mov	r2, #512	; 0x200
 b54:	cmp	r3, #0
 b58:	bne	b70 <flattened_map+0x164>
 b5c:	ldrd	r6, [sl, #64]	; 0x40
 b60:	mov	r7, #0
 b64:	and	r6, r6, #2048	; 0x800
 b68:	orrs	r3, r6, r7
 b6c:	bne	c24 <flattened_map+0x218>
 b70:	ldr	r3, [sp, #24]
 b74:	ldr	r3, [r3, #8]
 b78:	cmp	r8, r3
 b7c:	moveq	r2, #512	; 0x200
 b80:	ldreq	r1, [sp, #28]
 b84:	moveq	r0, r5
 b88:	bl	624 <rb_strlcpy@plt>
 b8c:	mov	r2, #512	; 0x200
 b90:	add	r1, sl, #88	; 0x58
 b94:	mov	r0, r5
 b98:	bl	630 <rb_strlcat@plt>
 b9c:	mov	r0, r5
 ba0:	bl	5f4 <strlen@plt>
 ba4:	add	r3, sp, #544	; 0x220
 ba8:	mov	ip, #32
 bac:	mov	r1, #45	; 0x2d
 bb0:	sub	r2, r0, #49	; 0x31
 bb4:	add	r3, r3, r0
 bb8:	cmn	r2, #-2147483598	; 0x80000032
 bbc:	rsb	r2, r0, #49	; 0x31
 bc0:	add	r0, r0, #1
 bc4:	strb	ip, [r3, #-512]	; 0xfffffe00
 bc8:	add	r0, r5, r0
 bcc:	bls	bd4 <flattened_map+0x1c8>
 bd0:	bl	60c <memset@plt>
 bd4:	ldr	r3, [sl, #28]
 bd8:	vldr	s15, [fp, #4]
 bdc:	ldr	r2, [sp, #16]
 be0:	ldr	r1, [r3, #56]	; 0x38
 be4:	add	r0, r5, #50	; 0x32
 be8:	vcvt.f32.s32	s13, s15
 bec:	vmov	s15, r1
 bf0:	mov	r3, r1
 bf4:	ldr	r1, [pc, #84]	; c50 <flattened_map+0x244>
 bf8:	vcvt.f32.u32	s15, s15
 bfc:	vmul.f32	s15, s15, s16
 c00:	vdiv.f32	s14, s15, s13
 c04:	vcvt.f64.f32	d7, s14
 c08:	vstr	d7, [sp]
 c0c:	bl	600 <snprintf@plt>
 c10:	mov	r3, r5
 c14:	ldr	r2, [sp, #20]
 c18:	mov	r1, #15
 c1c:	ldr	r0, [sp, #12]
 c20:	bl	5e8 <sendto_one_numeric@plt>
 c24:	ldr	r4, [r4, #8]
 c28:	cmp	r4, #0
 c2c:	bne	b28 <flattened_map+0x11c>
 c30:	add	sp, sp, #548	; 0x224
 c34:	vpop	{d8}
 c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c3c:	.word	0x42c80000
 c40:	.word	0x000115dc
 c44:	.word	0x00000054
 c48:	.word	0x00000040
 c4c:	.word	0x00000514
 c50:	.word	0x000001ce
 c54:	.word	0x000004dc
 c58:	.word	0x00000034
 c5c:	.word	0x000004c4
 c60:	.word	0x000004cc
 c64:	.word	0x000004a0
 c68:	.word	0x000004c0
 c6c:	.word	0x00000044

00000c70 <m_map>:
 c70:	ldrd	r2, [r2, #64]	; 0x40
 c74:	push	{r4, lr}
 c78:	mov	r3, #0
 c7c:	mov	r4, r1
 c80:	and	r2, r2, #67108864	; 0x4000000
 c84:	ldr	r1, [pc, #128]	; d0c <m_map+0x9c>
 c88:	orrs	r3, r2, r3
 c8c:	add	r1, pc, r1
 c90:	bne	ca8 <m_map+0x38>
 c94:	ldr	r3, [pc, #116]	; d10 <m_map+0xa0>
 c98:	ldr	r3, [r1, r3]
 c9c:	ldr	r3, [r3]
 ca0:	cmp	r3, #0
 ca4:	bne	cbc <m_map+0x4c>
 ca8:	ldr	r3, [pc, #100]	; d14 <m_map+0xa4>
 cac:	ldr	r3, [r1, r3]
 cb0:	ldr	r3, [r3, #176]	; 0xb0
 cb4:	cmp	r3, #0
 cb8:	beq	cdc <m_map+0x6c>
 cbc:	mov	r0, r4
 cc0:	bl	a0c <flattened_map>
 cc4:	ldr	r2, [pc, #76]	; d18 <m_map+0xa8>
 cc8:	mov	r0, r4
 ccc:	add	r2, pc, r2
 cd0:	mov	r1, #17
 cd4:	pop	{r4, lr}
 cd8:	b	5e8 <sendto_one_numeric@plt>
 cdc:	ldr	r3, [pc, #56]	; d1c <m_map+0xac>
 ce0:	ldr	r2, [pc, #56]	; d20 <m_map+0xb0>
 ce4:	mov	r0, r4
 ce8:	add	r2, pc, r2
 cec:	ldr	r1, [r1, r3]
 cf0:	bl	7b0 <dump_map>
 cf4:	ldr	r2, [pc, #40]	; d24 <m_map+0xb4>
 cf8:	mov	r0, r4
 cfc:	add	r2, pc, r2
 d00:	mov	r1, #17
 d04:	pop	{r4, lr}
 d08:	b	5e8 <sendto_one_numeric@plt>
 d0c:	.word	0x0001136c
 d10:	.word	0x00000044
 d14:	.word	0x00000058
 d18:	.word	0x000002e0
 d1c:	.word	0x00000054
 d20:	.word	0x000113e8
 d24:	.word	0x000002b0

00000d28 <__udivsi3>:
 d28:	subs	r2, r1, #1
 d2c:	bxeq	lr
 d30:	bcc	f08 <__udivsi3+0x1e0>
 d34:	cmp	r0, r1
 d38:	bls	eec <__udivsi3+0x1c4>
 d3c:	tst	r1, r2
 d40:	beq	ef8 <__udivsi3+0x1d0>
 d44:	clz	r3, r0
 d48:	clz	r2, r1
 d4c:	sub	r3, r2, r3
 d50:	rsbs	r3, r3, #31
 d54:	addne	r3, r3, r3, lsl #1
 d58:	mov	r2, #0
 d5c:	addne	pc, pc, r3, lsl #2
 d60:	nop			; (mov r0, r0)
 d64:	cmp	r0, r1, lsl #31
 d68:	adc	r2, r2, r2
 d6c:	subcs	r0, r0, r1, lsl #31
 d70:	cmp	r0, r1, lsl #30
 d74:	adc	r2, r2, r2
 d78:	subcs	r0, r0, r1, lsl #30
 d7c:	cmp	r0, r1, lsl #29
 d80:	adc	r2, r2, r2
 d84:	subcs	r0, r0, r1, lsl #29
 d88:	cmp	r0, r1, lsl #28
 d8c:	adc	r2, r2, r2
 d90:	subcs	r0, r0, r1, lsl #28
 d94:	cmp	r0, r1, lsl #27
 d98:	adc	r2, r2, r2
 d9c:	subcs	r0, r0, r1, lsl #27
 da0:	cmp	r0, r1, lsl #26
 da4:	adc	r2, r2, r2
 da8:	subcs	r0, r0, r1, lsl #26
 dac:	cmp	r0, r1, lsl #25
 db0:	adc	r2, r2, r2
 db4:	subcs	r0, r0, r1, lsl #25
 db8:	cmp	r0, r1, lsl #24
 dbc:	adc	r2, r2, r2
 dc0:	subcs	r0, r0, r1, lsl #24
 dc4:	cmp	r0, r1, lsl #23
 dc8:	adc	r2, r2, r2
 dcc:	subcs	r0, r0, r1, lsl #23
 dd0:	cmp	r0, r1, lsl #22
 dd4:	adc	r2, r2, r2
 dd8:	subcs	r0, r0, r1, lsl #22
 ddc:	cmp	r0, r1, lsl #21
 de0:	adc	r2, r2, r2
 de4:	subcs	r0, r0, r1, lsl #21
 de8:	cmp	r0, r1, lsl #20
 dec:	adc	r2, r2, r2
 df0:	subcs	r0, r0, r1, lsl #20
 df4:	cmp	r0, r1, lsl #19
 df8:	adc	r2, r2, r2
 dfc:	subcs	r0, r0, r1, lsl #19
 e00:	cmp	r0, r1, lsl #18
 e04:	adc	r2, r2, r2
 e08:	subcs	r0, r0, r1, lsl #18
 e0c:	cmp	r0, r1, lsl #17
 e10:	adc	r2, r2, r2
 e14:	subcs	r0, r0, r1, lsl #17
 e18:	cmp	r0, r1, lsl #16
 e1c:	adc	r2, r2, r2
 e20:	subcs	r0, r0, r1, lsl #16
 e24:	cmp	r0, r1, lsl #15
 e28:	adc	r2, r2, r2
 e2c:	subcs	r0, r0, r1, lsl #15
 e30:	cmp	r0, r1, lsl #14
 e34:	adc	r2, r2, r2
 e38:	subcs	r0, r0, r1, lsl #14
 e3c:	cmp	r0, r1, lsl #13
 e40:	adc	r2, r2, r2
 e44:	subcs	r0, r0, r1, lsl #13
 e48:	cmp	r0, r1, lsl #12
 e4c:	adc	r2, r2, r2
 e50:	subcs	r0, r0, r1, lsl #12
 e54:	cmp	r0, r1, lsl #11
 e58:	adc	r2, r2, r2
 e5c:	subcs	r0, r0, r1, lsl #11
 e60:	cmp	r0, r1, lsl #10
 e64:	adc	r2, r2, r2
 e68:	subcs	r0, r0, r1, lsl #10
 e6c:	cmp	r0, r1, lsl #9
 e70:	adc	r2, r2, r2
 e74:	subcs	r0, r0, r1, lsl #9
 e78:	cmp	r0, r1, lsl #8
 e7c:	adc	r2, r2, r2
 e80:	subcs	r0, r0, r1, lsl #8
 e84:	cmp	r0, r1, lsl #7
 e88:	adc	r2, r2, r2
 e8c:	subcs	r0, r0, r1, lsl #7
 e90:	cmp	r0, r1, lsl #6
 e94:	adc	r2, r2, r2
 e98:	subcs	r0, r0, r1, lsl #6
 e9c:	cmp	r0, r1, lsl #5
 ea0:	adc	r2, r2, r2
 ea4:	subcs	r0, r0, r1, lsl #5
 ea8:	cmp	r0, r1, lsl #4
 eac:	adc	r2, r2, r2
 eb0:	subcs	r0, r0, r1, lsl #4
 eb4:	cmp	r0, r1, lsl #3
 eb8:	adc	r2, r2, r2
 ebc:	subcs	r0, r0, r1, lsl #3
 ec0:	cmp	r0, r1, lsl #2
 ec4:	adc	r2, r2, r2
 ec8:	subcs	r0, r0, r1, lsl #2
 ecc:	cmp	r0, r1, lsl #1
 ed0:	adc	r2, r2, r2
 ed4:	subcs	r0, r0, r1, lsl #1
 ed8:	cmp	r0, r1
 edc:	adc	r2, r2, r2
 ee0:	subcs	r0, r0, r1
 ee4:	mov	r0, r2
 ee8:	bx	lr
 eec:	moveq	r0, #1
 ef0:	movne	r0, #0
 ef4:	bx	lr
 ef8:	clz	r2, r1
 efc:	rsb	r2, r2, #31
 f00:	lsr	r0, r0, r2
 f04:	bx	lr
 f08:	cmp	r0, #0
 f0c:	mvnne	r0, #0
 f10:	b	f34 <__aeabi_idiv0>

00000f14 <__aeabi_uidivmod>:
 f14:	cmp	r1, #0
 f18:	beq	f08 <__udivsi3+0x1e0>
 f1c:	push	{r0, r1, lr}
 f20:	bl	d28 <__udivsi3>
 f24:	pop	{r1, r2, lr}
 f28:	mul	r3, r2, r0
 f2c:	sub	r1, r1, r3
 f30:	bx	lr

00000f34 <__aeabi_idiv0>:
 f34:	push	{r1, lr}
 f38:	mov	r0, #8
 f3c:	bl	5c4 <raise@plt>
 f40:	pop	{r1, pc}

Disassembly of section .fini:

00000f44 <_fini>:
 f44:	push	{r3, lr}
 f48:	pop	{r3, pc}
