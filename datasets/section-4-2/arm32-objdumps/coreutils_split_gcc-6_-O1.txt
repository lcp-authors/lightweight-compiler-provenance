
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011118 <.init>:
   11118:	push	{r3, lr}
   1111c:	bl	1152c <__assert_fail@plt+0x4c>
   11120:	pop	{r3, pc}

Disassembly of section .plt:

00011124 <fdopen@plt-0x14>:
   11124:	push	{lr}		; (str lr, [sp, #-4]!)
   11128:	ldr	lr, [pc, #4]	; 11134 <fdopen@plt-0x4>
   1112c:	add	lr, pc, lr
   11130:	ldr	pc, [lr, #8]!
   11134:	andeq	r9, r1, ip, asr #29

00011138 <fdopen@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #102400	; 0x19000
   11140:	ldr	pc, [ip, #3788]!	; 0xecc

00011144 <calloc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #102400	; 0x19000
   1114c:	ldr	pc, [ip, #3780]!	; 0xec4

00011150 <fputs_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #102400	; 0x19000
   11158:	ldr	pc, [ip, #3772]!	; 0xebc

0001115c <raise@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #102400	; 0x19000
   11164:	ldr	pc, [ip, #3764]!	; 0xeb4

00011168 <strcmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #102400	; 0x19000
   11170:	ldr	pc, [ip, #3756]!	; 0xeac

00011174 <strtol@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #102400	; 0x19000
   1117c:	ldr	pc, [ip, #3748]!	; 0xea4

00011180 <read@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #102400	; 0x19000
   11188:	ldr	pc, [ip, #3740]!	; 0xe9c

0001118c <fflush@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #102400	; 0x19000
   11194:	ldr	pc, [ip, #3732]!	; 0xe94

00011198 <sigprocmask@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #102400	; 0x19000
   111a0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a4 <memmove@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #102400	; 0x19000
   111ac:	ldr	pc, [ip, #3716]!	; 0xe84

000111b0 <free@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #102400	; 0x19000
   111b8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111bc <_exit@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #102400	; 0x19000
   111c4:	ldr	pc, [ip, #3700]!	; 0xe74

000111c8 <memcpy@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #102400	; 0x19000
   111d0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d4 <__strtoull_internal@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #102400	; 0x19000
   111dc:	ldr	pc, [ip, #3684]!	; 0xe64

000111e0 <mbsinit@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #102400	; 0x19000
   111e8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111ec <ftruncate64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #102400	; 0x19000
   111f4:	ldr	pc, [ip, #3668]!	; 0xe54

000111f8 <fwrite_unlocked@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #102400	; 0x19000
   11200:	ldr	pc, [ip, #3660]!	; 0xe4c

00011204 <memcmp@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #102400	; 0x19000
   1120c:	ldr	pc, [ip, #3652]!	; 0xe44

00011210 <fputc_unlocked@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #102400	; 0x19000
   11218:	ldr	pc, [ip, #3644]!	; 0xe3c

0001121c <dcgettext@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #102400	; 0x19000
   11224:	ldr	pc, [ip, #3636]!	; 0xe34

00011228 <dup2@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #102400	; 0x19000
   11230:	ldr	pc, [ip, #3628]!	; 0xe2c

00011234 <realloc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #102400	; 0x19000
   1123c:	ldr	pc, [ip, #3620]!	; 0xe24

00011240 <textdomain@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #102400	; 0x19000
   11248:	ldr	pc, [ip, #3612]!	; 0xe1c

0001124c <rawmemchr@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #102400	; 0x19000
   11254:	ldr	pc, [ip, #3604]!	; 0xe14

00011258 <iswprint@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #102400	; 0x19000
   11260:	ldr	pc, [ip, #3596]!	; 0xe0c

00011264 <__fxstat64@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #102400	; 0x19000
   1126c:	ldr	pc, [ip, #3588]!	; 0xe04

00011270 <sigaction@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #102400	; 0x19000
   11278:	ldr	pc, [ip, #3580]!	; 0xdfc

0001127c <fwrite@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #102400	; 0x19000
   11284:	ldr	pc, [ip, #3572]!	; 0xdf4

00011288 <lseek64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #102400	; 0x19000
   11290:	ldr	pc, [ip, #3564]!	; 0xdec

00011294 <waitpid@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #102400	; 0x19000
   1129c:	ldr	pc, [ip, #3556]!	; 0xde4

000112a0 <__ctype_get_mb_cur_max@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #102400	; 0x19000
   112a8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ac <strcpy@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #102400	; 0x19000
   112b4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112b8 <__fpending@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #102400	; 0x19000
   112c0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112c4 <mbrtowc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #102400	; 0x19000
   112cc:	ldr	pc, [ip, #3524]!	; 0xdc4

000112d0 <error@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #102400	; 0x19000
   112d8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112dc <open64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #102400	; 0x19000
   112e4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112e8 <getenv@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #102400	; 0x19000
   112f0:	ldr	pc, [ip, #3500]!	; 0xdac

000112f4 <malloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #102400	; 0x19000
   112fc:	ldr	pc, [ip, #3492]!	; 0xda4

00011300 <sigaddset@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #102400	; 0x19000
   11308:	ldr	pc, [ip, #3484]!	; 0xd9c

0001130c <__libc_start_main@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #102400	; 0x19000
   11314:	ldr	pc, [ip, #3476]!	; 0xd94

00011318 <__freading@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #102400	; 0x19000
   11320:	ldr	pc, [ip, #3468]!	; 0xd8c

00011324 <__gmon_start__@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #102400	; 0x19000
   1132c:	ldr	pc, [ip, #3460]!	; 0xd84

00011330 <getopt_long@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #102400	; 0x19000
   11338:	ldr	pc, [ip, #3452]!	; 0xd7c

0001133c <__ctype_b_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #102400	; 0x19000
   11344:	ldr	pc, [ip, #3444]!	; 0xd74

00011348 <exit@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #102400	; 0x19000
   11350:	ldr	pc, [ip, #3436]!	; 0xd6c

00011354 <strlen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #102400	; 0x19000
   1135c:	ldr	pc, [ip, #3428]!	; 0xd64

00011360 <__libc_current_sigrtmax@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #102400	; 0x19000
   11368:	ldr	pc, [ip, #3420]!	; 0xd5c

0001136c <strchr@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #102400	; 0x19000
   11374:	ldr	pc, [ip, #3412]!	; 0xd54

00011378 <setenv@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #102400	; 0x19000
   11380:	ldr	pc, [ip, #3404]!	; 0xd4c

00011384 <memrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #102400	; 0x19000
   1138c:	ldr	pc, [ip, #3396]!	; 0xd44

00011390 <getpagesize@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #102400	; 0x19000
   11398:	ldr	pc, [ip, #3388]!	; 0xd3c

0001139c <__errno_location@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #102400	; 0x19000
   113a4:	ldr	pc, [ip, #3380]!	; 0xd34

000113a8 <__sprintf_chk@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #102400	; 0x19000
   113b0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113b4 <__cxa_atexit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #102400	; 0x19000
   113bc:	ldr	pc, [ip, #3364]!	; 0xd24

000113c0 <memset@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #102400	; 0x19000
   113c8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113cc <__printf_chk@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #102400	; 0x19000
   113d4:	ldr	pc, [ip, #3348]!	; 0xd14

000113d8 <write@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #102400	; 0x19000
   113e0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113e4 <fileno@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #102400	; 0x19000
   113ec:	ldr	pc, [ip, #3332]!	; 0xd04

000113f0 <__fprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #102400	; 0x19000
   113f8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113fc <memchr@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #102400	; 0x19000
   11404:	ldr	pc, [ip, #3316]!	; 0xcf4

00011408 <fclose@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #102400	; 0x19000
   11410:	ldr	pc, [ip, #3308]!	; 0xcec

00011414 <pipe@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #102400	; 0x19000
   1141c:	ldr	pc, [ip, #3300]!	; 0xce4

00011420 <fseeko64@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #102400	; 0x19000
   11428:	ldr	pc, [ip, #3292]!	; 0xcdc

0001142c <fcntl64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #102400	; 0x19000
   11434:	ldr	pc, [ip, #3284]!	; 0xcd4

00011438 <setlocale@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #102400	; 0x19000
   11440:	ldr	pc, [ip, #3276]!	; 0xccc

00011444 <sigemptyset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #102400	; 0x19000
   1144c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011450 <fork@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #102400	; 0x19000
   11458:	ldr	pc, [ip, #3260]!	; 0xcbc

0001145c <execl@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #102400	; 0x19000
   11464:	ldr	pc, [ip, #3252]!	; 0xcb4

00011468 <strrchr@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #102400	; 0x19000
   11470:	ldr	pc, [ip, #3244]!	; 0xcac

00011474 <nl_langinfo@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #102400	; 0x19000
   1147c:	ldr	pc, [ip, #3236]!	; 0xca4

00011480 <clearerr_unlocked@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #102400	; 0x19000
   11488:	ldr	pc, [ip, #3228]!	; 0xc9c

0001148c <bindtextdomain@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #102400	; 0x19000
   11494:	ldr	pc, [ip, #3220]!	; 0xc94

00011498 <aligned_alloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #102400	; 0x19000
   114a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000114a4 <__libc_current_sigrtmin@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #102400	; 0x19000
   114ac:	ldr	pc, [ip, #3204]!	; 0xc84

000114b0 <strncmp@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #102400	; 0x19000
   114b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000114bc <abort@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #102400	; 0x19000
   114c4:	ldr	pc, [ip, #3188]!	; 0xc74

000114c8 <close@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #102400	; 0x19000
   114d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114d4 <strspn@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #102400	; 0x19000
   114dc:	ldr	pc, [ip, #3172]!	; 0xc64

000114e0 <__assert_fail@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #102400	; 0x19000
   114e8:	ldr	pc, [ip, #3164]!	; 0xc5c

Disassembly of section .text:

000114f0 <.text>:
   114f0:	mov	fp, #0
   114f4:	mov	lr, #0
   114f8:	pop	{r1}		; (ldr r1, [sp], #4)
   114fc:	mov	r2, sp
   11500:	push	{r2}		; (str r2, [sp, #-4]!)
   11504:	push	{r0}		; (str r0, [sp, #-4]!)
   11508:	ldr	ip, [pc, #16]	; 11520 <__assert_fail@plt+0x40>
   1150c:	push	{ip}		; (str ip, [sp, #-4]!)
   11510:	ldr	r0, [pc, #12]	; 11524 <__assert_fail@plt+0x44>
   11514:	ldr	r3, [pc, #12]	; 11528 <__assert_fail@plt+0x48>
   11518:	bl	1130c <__libc_start_main@plt>
   1151c:	bl	114bc <abort@plt>
   11520:	andeq	r8, r1, ip, asr lr
   11524:	ldrdeq	r2, [r1], -r4
   11528:	strdeq	r8, [r1], -ip
   1152c:	ldr	r3, [pc, #20]	; 11548 <__assert_fail@plt+0x68>
   11530:	ldr	r2, [pc, #20]	; 1154c <__assert_fail@plt+0x6c>
   11534:	add	r3, pc, r3
   11538:	ldr	r2, [r3, r2]
   1153c:	cmp	r2, #0
   11540:	bxeq	lr
   11544:	b	11324 <__gmon_start__@plt>
   11548:	andeq	r9, r1, r4, asr #21
   1154c:	andeq	r0, r0, r8, asr #2
   11550:	ldr	r3, [pc, #28]	; 11574 <__assert_fail@plt+0x94>
   11554:	ldr	r0, [pc, #28]	; 11578 <__assert_fail@plt+0x98>
   11558:	sub	r3, r3, r0
   1155c:	cmp	r3, #6
   11560:	bxls	lr
   11564:	ldr	r3, [pc, #16]	; 1157c <__assert_fail@plt+0x9c>
   11568:	cmp	r3, #0
   1156c:	bxeq	lr
   11570:	bx	r3
   11574:	andeq	fp, r2, r3, asr r3
   11578:	andeq	fp, r2, r0, asr r3
   1157c:	andeq	r0, r0, r0
   11580:	ldr	r1, [pc, #36]	; 115ac <__assert_fail@plt+0xcc>
   11584:	ldr	r0, [pc, #36]	; 115b0 <__assert_fail@plt+0xd0>
   11588:	sub	r1, r1, r0
   1158c:	asr	r1, r1, #2
   11590:	add	r1, r1, r1, lsr #31
   11594:	asrs	r1, r1, #1
   11598:	bxeq	lr
   1159c:	ldr	r3, [pc, #16]	; 115b4 <__assert_fail@plt+0xd4>
   115a0:	cmp	r3, #0
   115a4:	bxeq	lr
   115a8:	bx	r3
   115ac:	andeq	fp, r2, r0, asr r3
   115b0:	andeq	fp, r2, r0, asr r3
   115b4:	andeq	r0, r0, r0
   115b8:	push	{r4, lr}
   115bc:	ldr	r4, [pc, #24]	; 115dc <__assert_fail@plt+0xfc>
   115c0:	ldrb	r3, [r4]
   115c4:	cmp	r3, #0
   115c8:	popne	{r4, pc}
   115cc:	bl	11550 <__assert_fail@plt+0x70>
   115d0:	mov	r3, #1
   115d4:	strb	r3, [r4]
   115d8:	pop	{r4, pc}
   115dc:	andeq	fp, r2, ip, ror #6
   115e0:	ldr	r0, [pc, #40]	; 11610 <__assert_fail@plt+0x130>
   115e4:	ldr	r3, [r0]
   115e8:	cmp	r3, #0
   115ec:	bne	115f4 <__assert_fail@plt+0x114>
   115f0:	b	11580 <__assert_fail@plt+0xa0>
   115f4:	ldr	r3, [pc, #24]	; 11614 <__assert_fail@plt+0x134>
   115f8:	cmp	r3, #0
   115fc:	beq	115f0 <__assert_fail@plt+0x110>
   11600:	push	{r4, lr}
   11604:	blx	r3
   11608:	pop	{r4, lr}
   1160c:	b	11580 <__assert_fail@plt+0xa0>
   11610:	andeq	sl, r2, r4, lsl pc
   11614:	andeq	r0, r0, r0
   11618:	push	{r4, r5, r6, r7, r8, lr}
   1161c:	ldr	r3, [pc, #652]	; 118b0 <__assert_fail@plt+0x3d0>
   11620:	ldr	r4, [r3]
   11624:	cmp	r4, #0
   11628:	beq	11834 <__assert_fail@plt+0x354>
   1162c:	ldr	r3, [pc, #636]	; 118b0 <__assert_fail@plt+0x3d0>
   11630:	ldr	r3, [r3, #24]
   11634:	sub	r1, r3, #1
   11638:	cmp	r3, #0
   1163c:	beq	116ac <__assert_fail@plt+0x1cc>
   11640:	ldr	r0, [pc, #616]	; 118b0 <__assert_fail@plt+0x3d0>
   11644:	ldr	r7, [r0, #32]
   11648:	ldr	r2, [pc, #612]	; 118b4 <__assert_fail@plt+0x3d4>
   1164c:	ldrb	r5, [r2, #4]
   11650:	ldr	ip, [r2]
   11654:	add	r2, r7, r3, lsl #2
   11658:	ldr	r0, [r0, #28]
   1165c:	add	r0, r0, r3
   11660:	mov	r6, #0
   11664:	ldr	r3, [r2, #-4]
   11668:	add	r3, r3, #1
   1166c:	str	r3, [r2, #-4]
   11670:	cmp	r1, #0
   11674:	movne	lr, #0
   11678:	andeq	lr, r5, #1
   1167c:	cmp	lr, #0
   11680:	bne	11820 <__assert_fail@plt+0x340>
   11684:	ldrb	r3, [ip, r3]
   11688:	strb	r3, [r0, #-1]!
   1168c:	cmp	r3, #0
   11690:	popne	{r4, r5, r6, r7, r8, pc}
   11694:	str	r6, [r2, #-4]!
   11698:	ldrb	r3, [ip]
   1169c:	strb	r3, [r0]
   116a0:	sub	r1, r1, #1
   116a4:	cmn	r1, #1
   116a8:	bne	11664 <__assert_fail@plt+0x184>
   116ac:	mov	r2, #5
   116b0:	ldr	r1, [pc, #512]	; 118b8 <__assert_fail@plt+0x3d8>
   116b4:	mov	r0, #0
   116b8:	bl	1121c <dcgettext@plt>
   116bc:	mov	r2, r0
   116c0:	mov	r1, #0
   116c4:	mov	r0, #1
   116c8:	bl	112d0 <error@plt>
   116cc:	ldr	r3, [pc, #476]	; 118b0 <__assert_fail@plt+0x3d0>
   116d0:	add	r2, r7, #2
   116d4:	str	r2, [r3, #4]
   116d8:	ldr	r2, [r3, #24]
   116dc:	add	r2, r2, #1
   116e0:	str	r2, [r3, #24]
   116e4:	add	r1, r7, #3
   116e8:	ldr	r3, [r3, #12]
   116ec:	cmp	r1, r3
   116f0:	bcc	11808 <__assert_fail@plt+0x328>
   116f4:	mov	r0, r4
   116f8:	bl	17620 <__assert_fail@plt+0x6140>
   116fc:	ldr	r3, [pc, #428]	; 118b0 <__assert_fail@plt+0x3d0>
   11700:	str	r0, [r3]
   11704:	ldr	r2, [r3, #12]
   11708:	ldr	r1, [r3, #32]
   1170c:	ldr	ip, [pc, #416]	; 118b4 <__assert_fail@plt+0x3d4>
   11710:	ldr	ip, [ip]
   11714:	ldr	r1, [r1]
   11718:	ldrb	r1, [ip, r1]
   1171c:	strb	r1, [r0, r2]
   11720:	add	r2, r2, #1
   11724:	str	r2, [r3, #12]
   11728:	ldr	r4, [pc, #384]	; 118b0 <__assert_fail@plt+0x3d0>
   1172c:	ldr	r6, [r4]
   11730:	ldr	r5, [r4, #12]
   11734:	add	r5, r6, r5
   11738:	str	r5, [r4, #28]
   1173c:	ldr	r8, [r4, #24]
   11740:	ldr	r3, [pc, #364]	; 118b4 <__assert_fail@plt+0x3d4>
   11744:	ldr	r3, [r3]
   11748:	mov	r2, r8
   1174c:	ldrb	r1, [r3]
   11750:	mov	r0, r5
   11754:	bl	113c0 <memset@plt>
   11758:	ldr	r1, [r4, #16]
   1175c:	cmp	r1, #0
   11760:	beq	11770 <__assert_fail@plt+0x290>
   11764:	ldr	r2, [r4, #20]
   11768:	add	r0, r5, r8
   1176c:	bl	111c8 <memcpy@plt>
   11770:	ldr	r4, [pc, #312]	; 118b0 <__assert_fail@plt+0x3d0>
   11774:	ldr	r3, [r4, #4]
   11778:	mov	r2, #0
   1177c:	strb	r2, [r6, r3]
   11780:	ldr	r0, [r4, #32]
   11784:	bl	14f60 <__assert_fail@plt+0x3a80>
   11788:	mov	r1, #4
   1178c:	ldr	r0, [r4, #24]
   11790:	bl	17ab8 <__assert_fail@plt+0x65d8>
   11794:	mov	r5, r0
   11798:	str	r0, [r4, #32]
   1179c:	ldr	r6, [r4, #36]	; 0x24
   117a0:	cmp	r6, #0
   117a4:	popeq	{r4, r5, r6, r7, r8, pc}
   117a8:	cmp	r7, #0
   117ac:	bne	1180c <__assert_fail@plt+0x32c>
   117b0:	mov	r0, r6
   117b4:	bl	11354 <strlen@plt>
   117b8:	mov	r4, r0
   117bc:	ldr	r3, [pc, #236]	; 118b0 <__assert_fail@plt+0x3d0>
   117c0:	ldr	r7, [r3, #24]
   117c4:	sub	r0, r7, r0
   117c8:	ldr	r3, [r3, #28]
   117cc:	mov	r2, r4
   117d0:	mov	r1, r6
   117d4:	add	r0, r3, r0
   117d8:	bl	111c8 <memcpy@plt>
   117dc:	add	r1, r5, r7, lsl #2
   117e0:	cmp	r4, #0
   117e4:	popeq	{r4, r5, r6, r7, r8, pc}
   117e8:	add	r2, r6, r4
   117ec:	mov	r0, r6
   117f0:	ldrb	r3, [r2, #-1]!
   117f4:	sub	r3, r3, #48	; 0x30
   117f8:	str	r3, [r1, #-4]!
   117fc:	cmp	r0, r2
   11800:	bne	117f0 <__assert_fail@plt+0x310>
   11804:	pop	{r4, r5, r6, r7, r8, pc}
   11808:	bl	17b90 <__assert_fail@plt+0x66b0>
   1180c:	ldr	r3, [pc, #168]	; 118bc <__assert_fail@plt+0x3dc>
   11810:	ldr	r2, [pc, #168]	; 118c0 <__assert_fail@plt+0x3e0>
   11814:	ldr	r1, [pc, #168]	; 118c4 <__assert_fail@plt+0x3e4>
   11818:	ldr	r0, [pc, #168]	; 118c8 <__assert_fail@plt+0x3e8>
   1181c:	bl	114e0 <__assert_fail@plt>
   11820:	ldr	lr, [r7]
   11824:	add	lr, ip, lr
   11828:	ldrb	lr, [lr, #1]
   1182c:	cmp	lr, #0
   11830:	bne	11684 <__assert_fail@plt+0x1a4>
   11834:	ldr	r3, [pc, #116]	; 118b0 <__assert_fail@plt+0x3d0>
   11838:	ldr	r7, [r3, #4]
   1183c:	cmp	r7, #0
   11840:	bne	116cc <__assert_fail@plt+0x1ec>
   11844:	mov	r6, r3
   11848:	ldr	r0, [r3, #8]
   1184c:	bl	11354 <strlen@plt>
   11850:	mov	r5, r0
   11854:	str	r0, [r6, #12]
   11858:	ldr	r0, [r6, #16]
   1185c:	cmp	r0, #0
   11860:	moveq	r0, r7
   11864:	beq	1186c <__assert_fail@plt+0x38c>
   11868:	bl	11354 <strlen@plt>
   1186c:	ldr	r2, [pc, #60]	; 118b0 <__assert_fail@plt+0x3d0>
   11870:	str	r0, [r2, #20]
   11874:	ldr	r3, [r2, #24]
   11878:	add	r3, r5, r3
   1187c:	add	r3, r3, r0
   11880:	str	r3, [r2, #4]
   11884:	add	r1, r3, #1
   11888:	cmp	r5, r1
   1188c:	bhi	11808 <__assert_fail@plt+0x328>
   11890:	mov	r0, r4
   11894:	bl	17620 <__assert_fail@plt+0x6140>
   11898:	ldr	r3, [pc, #16]	; 118b0 <__assert_fail@plt+0x3d0>
   1189c:	str	r0, [r3]
   118a0:	ldr	r2, [r3, #12]
   118a4:	ldr	r1, [r3, #8]
   118a8:	bl	111c8 <memcpy@plt>
   118ac:	b	11728 <__assert_fail@plt+0x248>
   118b0:	andeq	fp, r2, r0, ror r3
   118b4:	andeq	fp, r2, r4, asr r1
   118b8:	andeq	r9, r1, r8, lsr #32
   118bc:	andeq	r8, r1, r4, lsl #29
   118c0:	muleq	r0, r9, r1
   118c4:	andeq	r9, r1, r4, lsl r0
   118c8:	andeq	r9, r1, r0, lsr #32
   118cc:	push	{r4, r5, r6, r7, lr}
   118d0:	sub	sp, sp, #116	; 0x74
   118d4:	mov	r4, r0
   118d8:	ldr	r3, [pc, #1224]	; 11da8 <__assert_fail@plt+0x8c8>
   118dc:	ldr	r3, [r3, #40]	; 0x28
   118e0:	cmp	r3, #0
   118e4:	beq	11a24 <__assert_fail@plt+0x544>
   118e8:	ldr	r0, [pc, #1212]	; 11dac <__assert_fail@plt+0x8cc>
   118ec:	bl	112e8 <getenv@plt>
   118f0:	subs	r6, r0, #0
   118f4:	ldr	r3, [pc, #1204]	; 11db0 <__assert_fail@plt+0x8d0>
   118f8:	cmp	r0, #0
   118fc:	moveq	r6, r3
   11900:	mov	r2, #1
   11904:	mov	r1, r4
   11908:	ldr	r0, [pc, #1188]	; 11db4 <__assert_fail@plt+0x8d4>
   1190c:	bl	11378 <setenv@plt>
   11910:	cmp	r0, #0
   11914:	bne	11bac <__assert_fail@plt+0x6cc>
   11918:	ldr	r3, [pc, #1160]	; 11da8 <__assert_fail@plt+0x8c8>
   1191c:	ldrb	r3, [r3, #44]	; 0x2c
   11920:	cmp	r3, #0
   11924:	bne	11bd4 <__assert_fail@plt+0x6f4>
   11928:	add	r0, sp, #8
   1192c:	bl	11414 <pipe@plt>
   11930:	subs	r4, r0, #0
   11934:	bne	11c18 <__assert_fail@plt+0x738>
   11938:	bl	11450 <fork@plt>
   1193c:	subs	r5, r0, #0
   11940:	bne	11ce0 <__assert_fail@plt+0x800>
   11944:	ldr	r3, [pc, #1116]	; 11da8 <__assert_fail@plt+0x8c8>
   11948:	ldr	r3, [r3, #152]	; 0x98
   1194c:	cmp	r3, #0
   11950:	beq	1197c <__assert_fail@plt+0x49c>
   11954:	ldr	r5, [pc, #1100]	; 11da8 <__assert_fail@plt+0x8c8>
   11958:	ldr	r3, [r5, #156]	; 0x9c
   1195c:	ldr	r0, [r3, r4, lsl #2]
   11960:	bl	114c8 <close@plt>
   11964:	cmp	r0, #0
   11968:	bne	11c40 <__assert_fail@plt+0x760>
   1196c:	add	r4, r4, #1
   11970:	ldr	r3, [r5, #152]	; 0x98
   11974:	cmp	r4, r3
   11978:	bcc	11958 <__assert_fail@plt+0x478>
   1197c:	ldr	r0, [sp, #12]
   11980:	bl	114c8 <close@plt>
   11984:	cmp	r0, #0
   11988:	bne	11c68 <__assert_fail@plt+0x788>
   1198c:	ldr	r0, [sp, #8]
   11990:	cmp	r0, #0
   11994:	beq	119b8 <__assert_fail@plt+0x4d8>
   11998:	mov	r1, #0
   1199c:	bl	11228 <dup2@plt>
   119a0:	cmp	r0, #0
   119a4:	bne	11c90 <__assert_fail@plt+0x7b0>
   119a8:	ldr	r0, [sp, #8]
   119ac:	bl	114c8 <close@plt>
   119b0:	cmp	r0, #0
   119b4:	bne	11cb8 <__assert_fail@plt+0x7d8>
   119b8:	ldr	r4, [pc, #1000]	; 11da8 <__assert_fail@plt+0x8c8>
   119bc:	mov	r2, #0
   119c0:	add	r1, r4, #160	; 0xa0
   119c4:	mov	r0, #2
   119c8:	bl	11198 <sigprocmask@plt>
   119cc:	mov	r0, r6
   119d0:	bl	14be0 <__assert_fail@plt+0x3700>
   119d4:	ldr	r4, [r4, #40]	; 0x28
   119d8:	mov	r5, #0
   119dc:	str	r5, [sp]
   119e0:	mov	r3, r4
   119e4:	ldr	r2, [pc, #972]	; 11db8 <__assert_fail@plt+0x8d8>
   119e8:	mov	r1, r0
   119ec:	mov	r0, r6
   119f0:	bl	1145c <execl@plt>
   119f4:	bl	1139c <__errno_location@plt>
   119f8:	ldr	r7, [r0]
   119fc:	mov	r2, #5
   11a00:	ldr	r1, [pc, #948]	; 11dbc <__assert_fail@plt+0x8dc>
   11a04:	mov	r0, r5
   11a08:	bl	1121c <dcgettext@plt>
   11a0c:	str	r4, [sp]
   11a10:	mov	r3, r6
   11a14:	mov	r2, r0
   11a18:	mov	r1, r7
   11a1c:	mov	r0, #1
   11a20:	bl	112d0 <error@plt>
   11a24:	ldr	r3, [pc, #892]	; 11da8 <__assert_fail@plt+0x8c8>
   11a28:	ldrb	r3, [r3, #44]	; 0x2c
   11a2c:	cmp	r3, #0
   11a30:	bne	11ae4 <__assert_fail@plt+0x604>
   11a34:	ldr	r2, [pc, #900]	; 11dc0 <__assert_fail@plt+0x8e0>
   11a38:	mov	r1, #65	; 0x41
   11a3c:	mov	r0, r4
   11a40:	bl	14e5c <__assert_fail@plt+0x397c>
   11a44:	subs	r5, r0, #0
   11a48:	blt	11d30 <__assert_fail@plt+0x850>
   11a4c:	add	r2, sp, #8
   11a50:	mov	r1, r5
   11a54:	mov	r0, #3
   11a58:	bl	11264 <__fxstat64@plt>
   11a5c:	cmp	r0, #0
   11a60:	bne	11b24 <__assert_fail@plt+0x644>
   11a64:	ldr	r3, [pc, #828]	; 11da8 <__assert_fail@plt+0x8c8>
   11a68:	ldrd	r0, [r3, #144]	; 0x90
   11a6c:	ldrd	r2, [sp, #104]	; 0x68
   11a70:	cmp	r1, r3
   11a74:	cmpeq	r0, r2
   11a78:	beq	11b60 <__assert_fail@plt+0x680>
   11a7c:	mov	r2, #0
   11a80:	mov	r3, #0
   11a84:	mov	r0, r5
   11a88:	bl	111ec <ftruncate64@plt>
   11a8c:	cmp	r0, #0
   11a90:	beq	11d30 <__assert_fail@plt+0x850>
   11a94:	ldr	r3, [sp, #24]
   11a98:	and	r3, r3, #61440	; 0xf000
   11a9c:	cmp	r3, #32768	; 0x8000
   11aa0:	bne	11d30 <__assert_fail@plt+0x850>
   11aa4:	bl	1139c <__errno_location@plt>
   11aa8:	ldr	r5, [r0]
   11aac:	mov	r2, #5
   11ab0:	ldr	r1, [pc, #780]	; 11dc4 <__assert_fail@plt+0x8e4>
   11ab4:	mov	r0, #0
   11ab8:	bl	1121c <dcgettext@plt>
   11abc:	mov	r6, r0
   11ac0:	mov	r2, r4
   11ac4:	mov	r1, #3
   11ac8:	mov	r0, #0
   11acc:	bl	16b18 <__assert_fail@plt+0x5638>
   11ad0:	mov	r3, r0
   11ad4:	mov	r2, r6
   11ad8:	mov	r1, r5
   11adc:	mov	r0, #1
   11ae0:	bl	112d0 <error@plt>
   11ae4:	ldr	r3, [pc, #732]	; 11dc8 <__assert_fail@plt+0x8e8>
   11ae8:	ldr	r5, [r3]
   11aec:	mov	r2, #5
   11af0:	ldr	r1, [pc, #724]	; 11dcc <__assert_fail@plt+0x8ec>
   11af4:	mov	r0, #0
   11af8:	bl	1121c <dcgettext@plt>
   11afc:	mov	r6, r0
   11b00:	mov	r1, r4
   11b04:	mov	r0, #4
   11b08:	bl	16a4c <__assert_fail@plt+0x556c>
   11b0c:	mov	r3, r0
   11b10:	mov	r2, r6
   11b14:	mov	r1, #1
   11b18:	mov	r0, r5
   11b1c:	bl	113f0 <__fprintf_chk@plt>
   11b20:	b	11a34 <__assert_fail@plt+0x554>
   11b24:	bl	1139c <__errno_location@plt>
   11b28:	ldr	r5, [r0]
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #664]	; 11dd0 <__assert_fail@plt+0x8f0>
   11b34:	mov	r0, #0
   11b38:	bl	1121c <dcgettext@plt>
   11b3c:	mov	r6, r0
   11b40:	mov	r1, r4
   11b44:	mov	r0, #4
   11b48:	bl	16a4c <__assert_fail@plt+0x556c>
   11b4c:	mov	r3, r0
   11b50:	mov	r2, r6
   11b54:	mov	r1, r5
   11b58:	mov	r0, #1
   11b5c:	bl	112d0 <error@plt>
   11b60:	ldr	r3, [pc, #576]	; 11da8 <__assert_fail@plt+0x8c8>
   11b64:	ldrd	r0, [r3, #48]	; 0x30
   11b68:	ldrd	r2, [sp, #8]
   11b6c:	cmp	r1, r3
   11b70:	cmpeq	r0, r2
   11b74:	bne	11a7c <__assert_fail@plt+0x59c>
   11b78:	mov	r2, #5
   11b7c:	ldr	r1, [pc, #592]	; 11dd4 <__assert_fail@plt+0x8f4>
   11b80:	mov	r0, #0
   11b84:	bl	1121c <dcgettext@plt>
   11b88:	mov	r5, r0
   11b8c:	mov	r1, r4
   11b90:	mov	r0, #4
   11b94:	bl	16a4c <__assert_fail@plt+0x556c>
   11b98:	mov	r3, r0
   11b9c:	mov	r2, r5
   11ba0:	mov	r1, #0
   11ba4:	mov	r0, #1
   11ba8:	bl	112d0 <error@plt>
   11bac:	bl	1139c <__errno_location@plt>
   11bb0:	ldr	r4, [r0]
   11bb4:	mov	r2, #5
   11bb8:	ldr	r1, [pc, #536]	; 11dd8 <__assert_fail@plt+0x8f8>
   11bbc:	mov	r0, #0
   11bc0:	bl	1121c <dcgettext@plt>
   11bc4:	mov	r2, r0
   11bc8:	mov	r1, r4
   11bcc:	mov	r0, #1
   11bd0:	bl	112d0 <error@plt>
   11bd4:	ldr	r3, [pc, #492]	; 11dc8 <__assert_fail@plt+0x8e8>
   11bd8:	ldr	r5, [r3]
   11bdc:	mov	r2, #5
   11be0:	ldr	r1, [pc, #500]	; 11ddc <__assert_fail@plt+0x8fc>
   11be4:	mov	r0, #0
   11be8:	bl	1121c <dcgettext@plt>
   11bec:	mov	r7, r0
   11bf0:	mov	r2, r4
   11bf4:	mov	r1, #3
   11bf8:	mov	r0, #0
   11bfc:	bl	16b18 <__assert_fail@plt+0x5638>
   11c00:	mov	r3, r0
   11c04:	mov	r2, r7
   11c08:	mov	r1, #1
   11c0c:	mov	r0, r5
   11c10:	bl	113f0 <__fprintf_chk@plt>
   11c14:	b	11928 <__assert_fail@plt+0x448>
   11c18:	bl	1139c <__errno_location@plt>
   11c1c:	ldr	r4, [r0]
   11c20:	mov	r2, #5
   11c24:	ldr	r1, [pc, #436]	; 11de0 <__assert_fail@plt+0x900>
   11c28:	mov	r0, #0
   11c2c:	bl	1121c <dcgettext@plt>
   11c30:	mov	r2, r0
   11c34:	mov	r1, r4
   11c38:	mov	r0, #1
   11c3c:	bl	112d0 <error@plt>
   11c40:	bl	1139c <__errno_location@plt>
   11c44:	ldr	r4, [r0]
   11c48:	mov	r2, #5
   11c4c:	ldr	r1, [pc, #400]	; 11de4 <__assert_fail@plt+0x904>
   11c50:	mov	r0, #0
   11c54:	bl	1121c <dcgettext@plt>
   11c58:	mov	r2, r0
   11c5c:	mov	r1, r4
   11c60:	mov	r0, #1
   11c64:	bl	112d0 <error@plt>
   11c68:	bl	1139c <__errno_location@plt>
   11c6c:	ldr	r4, [r0]
   11c70:	mov	r2, #5
   11c74:	ldr	r1, [pc, #364]	; 11de8 <__assert_fail@plt+0x908>
   11c78:	mov	r0, #0
   11c7c:	bl	1121c <dcgettext@plt>
   11c80:	mov	r2, r0
   11c84:	mov	r1, r4
   11c88:	mov	r0, #1
   11c8c:	bl	112d0 <error@plt>
   11c90:	bl	1139c <__errno_location@plt>
   11c94:	ldr	r4, [r0]
   11c98:	mov	r2, #5
   11c9c:	ldr	r1, [pc, #328]	; 11dec <__assert_fail@plt+0x90c>
   11ca0:	mov	r0, #0
   11ca4:	bl	1121c <dcgettext@plt>
   11ca8:	mov	r2, r0
   11cac:	mov	r1, r4
   11cb0:	mov	r0, #1
   11cb4:	bl	112d0 <error@plt>
   11cb8:	bl	1139c <__errno_location@plt>
   11cbc:	ldr	r4, [r0]
   11cc0:	mov	r2, #5
   11cc4:	ldr	r1, [pc, #292]	; 11df0 <__assert_fail@plt+0x910>
   11cc8:	mov	r0, #0
   11ccc:	bl	1121c <dcgettext@plt>
   11cd0:	mov	r2, r0
   11cd4:	mov	r1, r4
   11cd8:	mov	r0, #1
   11cdc:	bl	112d0 <error@plt>
   11ce0:	cmn	r5, #1
   11ce4:	beq	11d3c <__assert_fail@plt+0x85c>
   11ce8:	ldr	r0, [sp, #8]
   11cec:	bl	114c8 <close@plt>
   11cf0:	cmp	r0, #0
   11cf4:	bne	11d64 <__assert_fail@plt+0x884>
   11cf8:	ldr	r3, [pc, #168]	; 11da8 <__assert_fail@plt+0x8c8>
   11cfc:	str	r5, [r3, #288]	; 0x120
   11d00:	ldr	r2, [r3, #152]	; 0x98
   11d04:	ldr	r3, [r3, #292]	; 0x124
   11d08:	cmp	r2, r3
   11d0c:	beq	11d8c <__assert_fail@plt+0x8ac>
   11d10:	ldr	r3, [pc, #144]	; 11da8 <__assert_fail@plt+0x8c8>
   11d14:	ldr	r1, [r3, #156]	; 0x9c
   11d18:	ldr	r2, [r3, #152]	; 0x98
   11d1c:	add	r0, r2, #1
   11d20:	str	r0, [r3, #152]	; 0x98
   11d24:	ldr	r3, [sp, #12]
   11d28:	str	r3, [r1, r2, lsl #2]
   11d2c:	ldr	r5, [sp, #12]
   11d30:	mov	r0, r5
   11d34:	add	sp, sp, #116	; 0x74
   11d38:	pop	{r4, r5, r6, r7, pc}
   11d3c:	bl	1139c <__errno_location@plt>
   11d40:	ldr	r4, [r0]
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [pc, #164]	; 11df4 <__assert_fail@plt+0x914>
   11d4c:	mov	r0, #0
   11d50:	bl	1121c <dcgettext@plt>
   11d54:	mov	r2, r0
   11d58:	mov	r1, r4
   11d5c:	mov	r0, #1
   11d60:	bl	112d0 <error@plt>
   11d64:	bl	1139c <__errno_location@plt>
   11d68:	ldr	r4, [r0]
   11d6c:	mov	r2, #5
   11d70:	ldr	r1, [pc, #128]	; 11df8 <__assert_fail@plt+0x918>
   11d74:	mov	r0, #0
   11d78:	bl	1121c <dcgettext@plt>
   11d7c:	mov	r2, r0
   11d80:	mov	r1, r4
   11d84:	mov	r0, #1
   11d88:	bl	112d0 <error@plt>
   11d8c:	ldr	r4, [pc, #20]	; 11da8 <__assert_fail@plt+0x8c8>
   11d90:	mov	r2, #4
   11d94:	add	r1, r4, #292	; 0x124
   11d98:	ldr	r0, [r4, #156]	; 0x9c
   11d9c:	bl	17714 <__assert_fail@plt+0x6234>
   11da0:	str	r0, [r4, #156]	; 0x9c
   11da4:	b	11d10 <__assert_fail@plt+0x830>
   11da8:	andeq	fp, r2, r0, ror r3
   11dac:	strheq	r9, [r1], -r4
   11db0:	andeq	r9, r1, r8, asr #32
   11db4:	strheq	r9, [r1], -ip
   11db8:	andeq	r9, r1, ip, ror #2
   11dbc:	andeq	r9, r1, r0, ror r1
   11dc0:			; <UNDEFINED> instruction: 0x000001b6
   11dc4:	muleq	r1, ip, r0
   11dc8:	andeq	fp, r2, r4, ror #6
   11dcc:	andeq	r9, r1, r0, asr r0
   11dd0:	andeq	r9, r1, r4, rrx
   11dd4:	andeq	r9, r1, r8, ror r0
   11dd8:	andeq	r9, r1, r4, asr #1
   11ddc:	andeq	r9, r1, ip, ror #1
   11de0:	andeq	r9, r1, r4, lsl #2
   11de4:	andeq	r9, r1, ip, lsl r1
   11de8:	andeq	r9, r1, r0, lsr r1
   11dec:	andeq	r9, r1, r4, asr #2
   11df0:	andeq	r9, r1, r8, asr r1
   11df4:	muleq	r1, r4, r1
   11df8:	andeq	r9, r1, ip, lsr #3
   11dfc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e00:	add	r9, r0, r1, lsl #4
   11e04:	ldr	r3, [r9, #4]
   11e08:	cmp	r3, #0
   11e0c:	movge	r5, #0
   11e10:	blt	11e1c <__assert_fail@plt+0x93c>
   11e14:	mov	r0, r5
   11e18:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e1c:	cmp	r1, #0
   11e20:	subeq	r4, r2, #1
   11e24:	subne	r4, r1, #1
   11e28:	mov	r8, r2
   11e2c:	mov	r7, r1
   11e30:	mov	r6, r0
   11e34:	mov	r5, #0
   11e38:	b	11e90 <__assert_fail@plt+0x9b0>
   11e3c:	ldr	r0, [r9]
   11e40:	bl	118cc <__assert_fail@plt+0x3ec>
   11e44:	b	11ea8 <__assert_fail@plt+0x9c8>
   11e48:	ldr	r2, [r6, r7, lsl #4]
   11e4c:	mov	r1, #3
   11e50:	mov	r0, #0
   11e54:	bl	16b18 <__assert_fail@plt+0x5638>
   11e58:	mov	r3, r0
   11e5c:	ldr	r2, [pc, #304]	; 11f94 <__assert_fail@plt+0xab4>
   11e60:	mov	r1, sl
   11e64:	mov	r0, #1
   11e68:	bl	112d0 <error@plt>
   11e6c:	ldr	r0, [r5, #8]
   11e70:	bl	14db4 <__assert_fail@plt+0x38d4>
   11e74:	cmp	r0, #0
   11e78:	bne	11f10 <__assert_fail@plt+0xa30>
   11e7c:	mov	r3, #0
   11e80:	str	r3, [r5, #8]
   11e84:	mvn	r3, #1
   11e88:	str	r3, [r5, #4]
   11e8c:	mov	r5, #1
   11e90:	ldr	r3, [r9, #4]
   11e94:	cmn	r3, #1
   11e98:	beq	11e3c <__assert_fail@plt+0x95c>
   11e9c:	ldr	r1, [pc, #244]	; 11f98 <__assert_fail@plt+0xab8>
   11ea0:	ldr	r0, [r9]
   11ea4:	bl	14e5c <__assert_fail@plt+0x397c>
   11ea8:	cmp	r0, #0
   11eac:	bge	11f38 <__assert_fail@plt+0xa58>
   11eb0:	bl	1139c <__errno_location@plt>
   11eb4:	mov	fp, r0
   11eb8:	ldr	sl, [r0]
   11ebc:	sub	r3, sl, #23
   11ec0:	cmp	r3, #1
   11ec4:	bhi	11e48 <__assert_fail@plt+0x968>
   11ec8:	add	r5, r6, r4, lsl #4
   11ecc:	ldr	r3, [r5, #4]
   11ed0:	cmp	r3, #0
   11ed4:	bge	11e6c <__assert_fail@plt+0x98c>
   11ed8:	cmp	r4, #0
   11edc:	subne	r4, r4, #1
   11ee0:	subeq	r4, r8, #1
   11ee4:	cmp	r4, r7
   11ee8:	bne	11ec8 <__assert_fail@plt+0x9e8>
   11eec:	ldr	r2, [r6, r7, lsl #4]
   11ef0:	mov	r1, #3
   11ef4:	mov	r0, #0
   11ef8:	bl	16b18 <__assert_fail@plt+0x5638>
   11efc:	mov	r3, r0
   11f00:	ldr	r2, [pc, #140]	; 11f94 <__assert_fail@plt+0xab4>
   11f04:	mov	r1, sl
   11f08:	mov	r0, #1
   11f0c:	bl	112d0 <error@plt>
   11f10:	ldr	r4, [fp]
   11f14:	ldr	r2, [r5]
   11f18:	mov	r1, #3
   11f1c:	mov	r0, #0
   11f20:	bl	16b18 <__assert_fail@plt+0x5638>
   11f24:	mov	r3, r0
   11f28:	ldr	r2, [pc, #100]	; 11f94 <__assert_fail@plt+0xab4>
   11f2c:	mov	r1, r4
   11f30:	mov	r0, #1
   11f34:	bl	112d0 <error@plt>
   11f38:	str	r0, [r9, #4]
   11f3c:	ldr	r1, [pc, #88]	; 11f9c <__assert_fail@plt+0xabc>
   11f40:	bl	11138 <fdopen@plt>
   11f44:	str	r0, [r9, #8]
   11f48:	cmp	r0, #0
   11f4c:	beq	11f68 <__assert_fail@plt+0xa88>
   11f50:	ldr	r3, [pc, #72]	; 11fa0 <__assert_fail@plt+0xac0>
   11f54:	ldr	r2, [r3, #288]	; 0x120
   11f58:	str	r2, [r9, #12]
   11f5c:	mov	r2, #0
   11f60:	str	r2, [r3, #288]	; 0x120
   11f64:	b	11e14 <__assert_fail@plt+0x934>
   11f68:	bl	1139c <__errno_location@plt>
   11f6c:	ldr	r4, [r0]
   11f70:	ldr	r2, [r6, r7, lsl #4]
   11f74:	mov	r1, #3
   11f78:	mov	r0, #0
   11f7c:	bl	16b18 <__assert_fail@plt+0x5638>
   11f80:	mov	r3, r0
   11f84:	ldr	r2, [pc, #8]	; 11f94 <__assert_fail@plt+0xab4>
   11f88:	mov	r1, r4
   11f8c:	mov	r0, #1
   11f90:	bl	112d0 <error@plt>
   11f94:	andeq	r9, r1, ip, lsr r2
   11f98:	andeq	r0, r0, r1, lsl #24
   11f9c:	andeq	r9, r1, r8, asr #3
   11fa0:	andeq	fp, r2, r0, ror r3
   11fa4:	push	{r4, r5, r6, r7, lr}
   11fa8:	sub	sp, sp, #36	; 0x24
   11fac:	mov	r4, r1
   11fb0:	mov	r6, r2
   11fb4:	mov	r5, r3
   11fb8:	cmp	r0, #0
   11fbc:	beq	12208 <__assert_fail@plt+0xd28>
   11fc0:	bl	14db4 <__assert_fail@plt+0x38d4>
   11fc4:	cmp	r0, #0
   11fc8:	beq	11ff4 <__assert_fail@plt+0xb14>
   11fcc:	bl	1139c <__errno_location@plt>
   11fd0:	ldr	r7, [r0]
   11fd4:	ldr	r3, [pc, #624]	; 1224c <__assert_fail@plt+0xd6c>
   11fd8:	ldr	r3, [r3, #40]	; 0x28
   11fdc:	adds	r3, r3, #0
   11fe0:	movne	r3, #1
   11fe4:	cmp	r7, #32
   11fe8:	movne	r3, #0
   11fec:	cmp	r3, #0
   11ff0:	beq	1210c <__assert_fail@plt+0xc2c>
   11ff4:	cmp	r4, #0
   11ff8:	blt	1205c <__assert_fail@plt+0xb7c>
   11ffc:	ldr	r3, [pc, #584]	; 1224c <__assert_fail@plt+0xd6c>
   12000:	ldr	lr, [r3, #152]	; 0x98
   12004:	cmp	lr, #0
   12008:	beq	1205c <__assert_fail@plt+0xb7c>
   1200c:	ldr	r7, [r3, #156]	; 0x9c
   12010:	ldr	r3, [r7]
   12014:	cmp	r4, r3
   12018:	addne	r2, r7, #4
   1201c:	movne	ip, lr
   12020:	movne	r3, #0
   12024:	beq	12130 <__assert_fail@plt+0xc50>
   12028:	add	r3, r3, #1
   1202c:	cmp	ip, r3
   12030:	beq	1205c <__assert_fail@plt+0xb7c>
   12034:	mov	r1, r2
   12038:	add	r2, r2, #4
   1203c:	ldr	r0, [r1]
   12040:	cmp	r4, r0
   12044:	bne	12028 <__assert_fail@plt+0xb48>
   12048:	sub	lr, lr, #1
   1204c:	ldr	r3, [pc, #504]	; 1224c <__assert_fail@plt+0xd6c>
   12050:	str	lr, [r3, #152]	; 0x98
   12054:	ldr	r3, [r7, lr, lsl #2]
   12058:	str	r3, [r1]
   1205c:	cmp	r6, #0
   12060:	ble	12104 <__assert_fail@plt+0xc24>
   12064:	mov	r2, #0
   12068:	add	r1, sp, #32
   1206c:	str	r2, [r1, #-24]!	; 0xffffffe8
   12070:	mov	r0, r6
   12074:	bl	11294 <waitpid@plt>
   12078:	cmn	r0, #1
   1207c:	beq	12138 <__assert_fail@plt+0xc58>
   12080:	ldr	r3, [sp, #8]
   12084:	and	r2, r3, #127	; 0x7f
   12088:	add	r2, r2, #1
   1208c:	sxtb	r2, r2
   12090:	cmp	r2, #1
   12094:	ble	12184 <__assert_fail@plt+0xca4>
   12098:	and	r4, r3, #127	; 0x7f
   1209c:	cmp	r4, #13
   120a0:	beq	12104 <__assert_fail@plt+0xc24>
   120a4:	add	r1, sp, #12
   120a8:	mov	r0, r4
   120ac:	bl	16ef8 <__assert_fail@plt+0x5a18>
   120b0:	cmp	r0, #0
   120b4:	bne	12168 <__assert_fail@plt+0xc88>
   120b8:	mov	r2, #5
   120bc:	ldr	r1, [pc, #396]	; 12250 <__assert_fail@plt+0xd70>
   120c0:	mov	r0, #0
   120c4:	bl	1121c <dcgettext@plt>
   120c8:	mov	r6, r0
   120cc:	mov	r2, r5
   120d0:	mov	r1, #3
   120d4:	mov	r0, #0
   120d8:	bl	16b18 <__assert_fail@plt+0x5638>
   120dc:	ldr	r3, [pc, #360]	; 1224c <__assert_fail@plt+0xd6c>
   120e0:	ldr	r3, [r3, #40]	; 0x28
   120e4:	str	r3, [sp, #4]
   120e8:	add	r3, sp, #12
   120ec:	str	r3, [sp]
   120f0:	mov	r3, r0
   120f4:	mov	r2, r6
   120f8:	mov	r1, #0
   120fc:	add	r0, r4, #128	; 0x80
   12100:	bl	112d0 <error@plt>
   12104:	add	sp, sp, #36	; 0x24
   12108:	pop	{r4, r5, r6, r7, pc}
   1210c:	mov	r2, r5
   12110:	mov	r1, #3
   12114:	mov	r0, #0
   12118:	bl	16b18 <__assert_fail@plt+0x5638>
   1211c:	mov	r3, r0
   12120:	ldr	r2, [pc, #300]	; 12254 <__assert_fail@plt+0xd74>
   12124:	mov	r1, r7
   12128:	mov	r0, #1
   1212c:	bl	112d0 <error@plt>
   12130:	mov	r1, r7
   12134:	b	12048 <__assert_fail@plt+0xb68>
   12138:	bl	1139c <__errno_location@plt>
   1213c:	ldr	r4, [r0]
   12140:	cmp	r4, #10
   12144:	beq	12080 <__assert_fail@plt+0xba0>
   12148:	mov	r2, #5
   1214c:	ldr	r1, [pc, #260]	; 12258 <__assert_fail@plt+0xd78>
   12150:	mov	r0, #0
   12154:	bl	1121c <dcgettext@plt>
   12158:	mov	r2, r0
   1215c:	mov	r1, r4
   12160:	mov	r0, #1
   12164:	bl	112d0 <error@plt>
   12168:	str	r4, [sp]
   1216c:	ldr	r3, [pc, #232]	; 1225c <__assert_fail@plt+0xd7c>
   12170:	mov	r2, #19
   12174:	mov	r1, #1
   12178:	add	r0, sp, #12
   1217c:	bl	113a8 <__sprintf_chk@plt>
   12180:	b	120b8 <__assert_fail@plt+0xbd8>
   12184:	tst	r3, #127	; 0x7f
   12188:	bne	121e4 <__assert_fail@plt+0xd04>
   1218c:	asr	r3, r3, #8
   12190:	ands	r4, r3, #255	; 0xff
   12194:	beq	12104 <__assert_fail@plt+0xc24>
   12198:	mov	r2, #5
   1219c:	ldr	r1, [pc, #188]	; 12260 <__assert_fail@plt+0xd80>
   121a0:	mov	r0, #0
   121a4:	bl	1121c <dcgettext@plt>
   121a8:	mov	r6, r0
   121ac:	mov	r2, r5
   121b0:	mov	r1, #3
   121b4:	mov	r0, #0
   121b8:	bl	16b18 <__assert_fail@plt+0x5638>
   121bc:	ldr	r3, [pc, #136]	; 1224c <__assert_fail@plt+0xd6c>
   121c0:	ldr	r3, [r3, #40]	; 0x28
   121c4:	str	r3, [sp, #4]
   121c8:	str	r4, [sp]
   121cc:	mov	r3, r0
   121d0:	mov	r2, r6
   121d4:	mov	r1, #0
   121d8:	mov	r0, r4
   121dc:	bl	112d0 <error@plt>
   121e0:	b	12104 <__assert_fail@plt+0xc24>
   121e4:	mov	r2, #5
   121e8:	ldr	r1, [pc, #116]	; 12264 <__assert_fail@plt+0xd84>
   121ec:	mov	r0, #0
   121f0:	bl	1121c <dcgettext@plt>
   121f4:	ldr	r3, [sp, #8]
   121f8:	mov	r2, r0
   121fc:	mov	r1, #0
   12200:	mov	r0, #1
   12204:	bl	112d0 <error@plt>
   12208:	cmp	r1, #0
   1220c:	blt	1205c <__assert_fail@plt+0xb7c>
   12210:	mov	r0, r4
   12214:	bl	114c8 <close@plt>
   12218:	cmp	r0, #0
   1221c:	bge	11ffc <__assert_fail@plt+0xb1c>
   12220:	bl	1139c <__errno_location@plt>
   12224:	ldr	r4, [r0]
   12228:	mov	r2, r5
   1222c:	mov	r1, #3
   12230:	mov	r0, #0
   12234:	bl	16b18 <__assert_fail@plt+0x5638>
   12238:	mov	r3, r0
   1223c:	ldr	r2, [pc, #16]	; 12254 <__assert_fail@plt+0xd74>
   12240:	mov	r1, r4
   12244:	mov	r0, #1
   12248:	bl	112d0 <error@plt>
   1224c:	andeq	fp, r2, r0, ror r3
   12250:	andeq	r9, r1, ip, ror #3
   12254:	andeq	r9, r1, ip, lsr r2
   12258:	andeq	r9, r1, ip, asr #3
   1225c:	andeq	r9, r1, r8, ror #3
   12260:	andeq	r9, r1, r8, lsl r2
   12264:	andeq	r9, r1, r0, asr #4
   12268:	push	{r4, r5, r6, r7, r8, lr}
   1226c:	mov	r5, r1
   12270:	mov	r4, r2
   12274:	cmp	r0, #0
   12278:	beq	122cc <__assert_fail@plt+0xdec>
   1227c:	cmp	r1, #0
   12280:	cmpeq	r2, #0
   12284:	bne	12298 <__assert_fail@plt+0xdb8>
   12288:	ldr	r3, [pc, #228]	; 12374 <__assert_fail@plt+0xe94>
   1228c:	ldrb	r0, [r3, #296]	; 0x128
   12290:	cmp	r0, #0
   12294:	popne	{r4, r5, r6, r7, r8, pc}
   12298:	ldr	r6, [pc, #212]	; 12374 <__assert_fail@plt+0xe94>
   1229c:	ldr	r7, [pc, #212]	; 12378 <__assert_fail@plt+0xe98>
   122a0:	ldr	r3, [r6]
   122a4:	ldr	r2, [r6, #288]	; 0x120
   122a8:	ldr	r1, [r7, #8]
   122ac:	mov	r0, #0
   122b0:	bl	11fa4 <__assert_fail@plt+0xac4>
   122b4:	bl	11618 <__assert_fail@plt+0x138>
   122b8:	ldr	r0, [r6]
   122bc:	bl	118cc <__assert_fail@plt+0x3ec>
   122c0:	str	r0, [r7, #8]
   122c4:	cmp	r0, #0
   122c8:	blt	12318 <__assert_fail@plt+0xe38>
   122cc:	mov	r2, r4
   122d0:	mov	r1, r5
   122d4:	ldr	r3, [pc, #156]	; 12378 <__assert_fail@plt+0xe98>
   122d8:	ldr	r0, [r3, #8]
   122dc:	bl	15060 <__assert_fail@plt+0x3b80>
   122e0:	cmp	r4, r0
   122e4:	beq	1236c <__assert_fail@plt+0xe8c>
   122e8:	bl	1139c <__errno_location@plt>
   122ec:	ldr	r4, [r0]
   122f0:	ldr	r3, [pc, #124]	; 12374 <__assert_fail@plt+0xe94>
   122f4:	ldr	r3, [r3, #40]	; 0x28
   122f8:	adds	r3, r3, #0
   122fc:	movne	r3, #1
   12300:	cmp	r4, #32
   12304:	movne	r3, #0
   12308:	cmp	r3, #0
   1230c:	beq	12344 <__assert_fail@plt+0xe64>
   12310:	mov	r0, #0
   12314:	pop	{r4, r5, r6, r7, r8, pc}
   12318:	bl	1139c <__errno_location@plt>
   1231c:	ldr	r4, [r0]
   12320:	ldr	r2, [r6]
   12324:	mov	r1, #3
   12328:	mov	r0, #0
   1232c:	bl	16b18 <__assert_fail@plt+0x5638>
   12330:	mov	r3, r0
   12334:	ldr	r2, [pc, #64]	; 1237c <__assert_fail@plt+0xe9c>
   12338:	mov	r1, r4
   1233c:	mov	r0, #1
   12340:	bl	112d0 <error@plt>
   12344:	ldr	r3, [pc, #40]	; 12374 <__assert_fail@plt+0xe94>
   12348:	ldr	r2, [r3]
   1234c:	mov	r1, #3
   12350:	mov	r0, #0
   12354:	bl	16b18 <__assert_fail@plt+0x5638>
   12358:	mov	r3, r0
   1235c:	ldr	r2, [pc, #24]	; 1237c <__assert_fail@plt+0xe9c>
   12360:	mov	r1, r4
   12364:	mov	r0, #1
   12368:	bl	112d0 <error@plt>
   1236c:	mov	r0, #1
   12370:	pop	{r4, r5, r6, r7, r8, pc}
   12374:	andeq	fp, r2, r0, ror r3
   12378:	andeq	fp, r2, r4, asr r1
   1237c:	andeq	r9, r1, ip, lsr r2
   12380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12384:	sub	sp, sp, #44	; 0x2c
   12388:	strd	r0, [sp, #16]
   1238c:	str	r2, [sp, #28]
   12390:	str	r3, [sp, #32]
   12394:	ldr	r5, [sp, #80]	; 0x50
   12398:	mov	r6, r0
   1239c:	mov	r7, r1
   123a0:	mov	sl, #0
   123a4:	mov	fp, #0
   123a8:	mov	r8, #1
   123ac:	mov	r4, r8
   123b0:	ldr	r3, [sp, #88]	; 0x58
   123b4:	ldr	r2, [sp, #92]	; 0x5c
   123b8:	orr	r3, r3, r2
   123bc:	str	r3, [sp, #36]	; 0x24
   123c0:	b	1253c <__assert_fail@plt+0x105c>
   123c4:	cmp	r8, #0
   123c8:	beq	123f8 <__assert_fail@plt+0xf18>
   123cc:	ldr	r2, [sp, #32]
   123d0:	ldr	r1, [sp, #28]
   123d4:	mov	r0, #0
   123d8:	bl	16c94 <__assert_fail@plt+0x57b4>
   123dc:	mov	r5, r0
   123e0:	cmn	r0, #1
   123e4:	beq	1242c <__assert_fail@plt+0xf4c>
   123e8:	clz	r3, r0
   123ec:	lsr	r3, r3, #5
   123f0:	str	r3, [sp, #24]
   123f4:	b	12558 <__assert_fail@plt+0x1078>
   123f8:	mov	r3, #1
   123fc:	str	r3, [sp]
   12400:	mov	r2, r6
   12404:	mov	r3, r7
   12408:	mov	r0, #0
   1240c:	bl	11288 <lseek64@plt>
   12410:	mvn	r2, #0
   12414:	mvn	r3, #0
   12418:	cmp	r1, r3
   1241c:	cmpeq	r0, r2
   12420:	ldrdne	r6, [sp, #16]
   12424:	movne	r4, #1
   12428:	b	123cc <__assert_fail@plt+0xeec>
   1242c:	bl	1139c <__errno_location@plt>
   12430:	ldr	r4, [r0]
   12434:	ldr	r3, [pc, #460]	; 12608 <__assert_fail@plt+0x1128>
   12438:	ldr	r2, [r3, #300]	; 0x12c
   1243c:	mov	r1, #3
   12440:	mov	r0, #0
   12444:	bl	16b18 <__assert_fail@plt+0x5638>
   12448:	mov	r3, r0
   1244c:	ldr	r2, [pc, #440]	; 1260c <__assert_fail@plt+0x112c>
   12450:	mov	r1, r4
   12454:	mov	r0, #1
   12458:	bl	112d0 <error@plt>
   1245c:	uxtb	r2, r4
   12460:	mov	r3, #0
   12464:	ldrd	sl, [sp, #8]
   12468:	adds	sl, sl, r2
   1246c:	adc	fp, fp, r3
   12470:	strd	sl, [sp, #8]
   12474:	ldrd	r2, [sp, #88]	; 0x58
   12478:	cmp	fp, r3
   1247c:	cmpeq	sl, r2
   12480:	movcc	r4, #1
   12484:	movcs	r4, #0
   12488:	cmp	r9, #0
   1248c:	orreq	r4, r4, #1
   12490:	orr	r3, r0, r4
   12494:	tst	r3, #255	; 0xff
   12498:	beq	1259c <__assert_fail@plt+0x10bc>
   1249c:	add	r8, r8, r6
   124a0:	sub	r5, r5, r6
   124a4:	ldrd	sl, [sp, #16]
   124a8:	mov	r6, sl
   124ac:	mov	r3, #0
   124b0:	cmp	fp, r3
   124b4:	cmpeq	sl, r5
   124b8:	bhi	125ec <__assert_fail@plt+0x110c>
   124bc:	orr	r3, r4, r0
   124c0:	tst	r3, #255	; 0xff
   124c4:	beq	1245c <__assert_fail@plt+0xf7c>
   124c8:	mov	r2, r6
   124cc:	mov	r1, r8
   124d0:	mov	r0, r4
   124d4:	bl	12268 <__assert_fail@plt+0xd88>
   124d8:	b	1245c <__assert_fail@plt+0xf7c>
   124dc:	cmp	r5, #0
   124e0:	beq	1252c <__assert_fail@plt+0x104c>
   124e4:	orr	r3, r4, r8
   124e8:	tst	r3, #255	; 0xff
   124ec:	ldrne	r9, [sp, #28]
   124f0:	bne	12584 <__assert_fail@plt+0x10a4>
   124f4:	uxtb	r2, r4
   124f8:	mov	r3, #0
   124fc:	adds	sl, sl, r2
   12500:	adc	fp, fp, r3
   12504:	eor	r4, r8, #1
   12508:	ldrd	r2, [sp, #88]	; 0x58
   1250c:	cmp	r3, fp
   12510:	cmpeq	r2, sl
   12514:	movne	r4, #0
   12518:	andeq	r4, r4, #1
   1251c:	cmp	r4, #0
   12520:	bne	125a0 <__assert_fail@plt+0x10c0>
   12524:	subs	r6, r6, r5
   12528:	sbc	r7, r7, #0
   1252c:	mvn	r5, #0
   12530:	ldr	r3, [sp, #24]
   12534:	cmp	r3, #0
   12538:	bne	125a0 <__assert_fail@plt+0x10c0>
   1253c:	cmn	r5, #1
   12540:	beq	123c4 <__assert_fail@plt+0xee4>
   12544:	ldr	r3, [sp, #32]
   12548:	cmp	r5, r3
   1254c:	movcs	r3, #0
   12550:	movcc	r3, #1
   12554:	str	r3, [sp, #24]
   12558:	mov	r3, #0
   1255c:	cmp	r7, r3
   12560:	cmpeq	r6, r5
   12564:	bhi	124dc <__assert_fail@plt+0xffc>
   12568:	ldr	r9, [sp, #28]
   1256c:	mov	r0, r8
   12570:	strd	sl, [sp, #8]
   12574:	mov	r8, r9
   12578:	ldr	r9, [sp, #36]	; 0x24
   1257c:	b	124bc <__assert_fail@plt+0xfdc>
   12580:	ldrd	r6, [sp, #16]
   12584:	mov	r2, r5
   12588:	mov	r1, r9
   1258c:	mov	r0, r4
   12590:	bl	12268 <__assert_fail@plt+0xd88>
   12594:	mov	r8, r0
   12598:	b	124f4 <__assert_fail@plt+0x1014>
   1259c:	ldrd	sl, [sp, #8]
   125a0:	ldrd	r2, [sp, #88]	; 0x58
   125a4:	cmp	fp, r3
   125a8:	cmpeq	sl, r2
   125ac:	bcs	125e4 <__assert_fail@plt+0x1104>
   125b0:	mov	r5, #0
   125b4:	mov	r4, #1
   125b8:	mov	r6, r2
   125bc:	mov	r7, r3
   125c0:	mov	r2, r5
   125c4:	mov	r1, r5
   125c8:	mov	r0, r4
   125cc:	bl	12268 <__assert_fail@plt+0xd88>
   125d0:	adds	sl, sl, #1
   125d4:	adc	fp, fp, #0
   125d8:	cmp	r7, fp
   125dc:	cmpeq	r6, sl
   125e0:	bne	125c0 <__assert_fail@plt+0x10e0>
   125e4:	add	sp, sp, #44	; 0x2c
   125e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125ec:	ldrd	sl, [sp, #8]
   125f0:	mov	r9, r8
   125f4:	mov	r8, r0
   125f8:	cmp	r5, #0
   125fc:	bne	12580 <__assert_fail@plt+0x10a0>
   12600:	ldrd	r6, [sp, #16]
   12604:	b	1252c <__assert_fail@plt+0x104c>
   12608:	andeq	fp, r2, r0, ror r3
   1260c:	andeq	r9, r1, ip, lsr r2
   12610:	push	{lr}		; (str lr, [sp, #-4]!)
   12614:	sub	sp, sp, #60	; 0x3c
   12618:	subs	r6, r0, #0
   1261c:	beq	12658 <__assert_fail@plt+0x1178>
   12620:	ldr	r3, [pc, #840]	; 12970 <__assert_fail@plt+0x1490>
   12624:	ldr	r4, [r3]
   12628:	mov	r2, #5
   1262c:	ldr	r1, [pc, #832]	; 12974 <__assert_fail@plt+0x1494>
   12630:	mov	r0, #0
   12634:	bl	1121c <dcgettext@plt>
   12638:	ldr	r3, [pc, #824]	; 12978 <__assert_fail@plt+0x1498>
   1263c:	ldr	r3, [r3]
   12640:	mov	r2, r0
   12644:	mov	r1, #1
   12648:	mov	r0, r4
   1264c:	bl	113f0 <__fprintf_chk@plt>
   12650:	mov	r0, r6
   12654:	bl	11348 <exit@plt>
   12658:	mov	r2, #5
   1265c:	ldr	r1, [pc, #792]	; 1297c <__assert_fail@plt+0x149c>
   12660:	mov	r0, #0
   12664:	bl	1121c <dcgettext@plt>
   12668:	ldr	r3, [pc, #776]	; 12978 <__assert_fail@plt+0x1498>
   1266c:	ldr	r2, [r3]
   12670:	mov	r1, r0
   12674:	mov	r0, #1
   12678:	bl	113cc <__printf_chk@plt>
   1267c:	mov	r2, #5
   12680:	ldr	r1, [pc, #760]	; 12980 <__assert_fail@plt+0x14a0>
   12684:	mov	r0, #0
   12688:	bl	1121c <dcgettext@plt>
   1268c:	ldr	r4, [pc, #752]	; 12984 <__assert_fail@plt+0x14a4>
   12690:	ldr	r1, [r4]
   12694:	bl	11150 <fputs_unlocked@plt>
   12698:	mov	r2, #5
   1269c:	ldr	r1, [pc, #740]	; 12988 <__assert_fail@plt+0x14a8>
   126a0:	mov	r0, #0
   126a4:	bl	1121c <dcgettext@plt>
   126a8:	ldr	r1, [r4]
   126ac:	bl	11150 <fputs_unlocked@plt>
   126b0:	mov	r2, #5
   126b4:	ldr	r1, [pc, #720]	; 1298c <__assert_fail@plt+0x14ac>
   126b8:	mov	r0, #0
   126bc:	bl	1121c <dcgettext@plt>
   126c0:	ldr	r1, [r4]
   126c4:	bl	11150 <fputs_unlocked@plt>
   126c8:	ldr	r5, [r4]
   126cc:	mov	r2, #5
   126d0:	ldr	r1, [pc, #696]	; 12990 <__assert_fail@plt+0x14b0>
   126d4:	mov	r0, #0
   126d8:	bl	1121c <dcgettext@plt>
   126dc:	mov	r3, #2
   126e0:	mov	r2, r0
   126e4:	mov	r1, #1
   126e8:	mov	r0, r5
   126ec:	bl	113f0 <__fprintf_chk@plt>
   126f0:	mov	r2, #5
   126f4:	ldr	r1, [pc, #664]	; 12994 <__assert_fail@plt+0x14b4>
   126f8:	mov	r0, #0
   126fc:	bl	1121c <dcgettext@plt>
   12700:	ldr	r1, [r4]
   12704:	bl	11150 <fputs_unlocked@plt>
   12708:	mov	r2, #5
   1270c:	ldr	r1, [pc, #644]	; 12998 <__assert_fail@plt+0x14b8>
   12710:	mov	r0, #0
   12714:	bl	1121c <dcgettext@plt>
   12718:	ldr	r1, [r4]
   1271c:	bl	11150 <fputs_unlocked@plt>
   12720:	mov	r2, #5
   12724:	ldr	r1, [pc, #624]	; 1299c <__assert_fail@plt+0x14bc>
   12728:	mov	r0, #0
   1272c:	bl	1121c <dcgettext@plt>
   12730:	ldr	r1, [r4]
   12734:	bl	11150 <fputs_unlocked@plt>
   12738:	mov	r2, #5
   1273c:	ldr	r1, [pc, #604]	; 129a0 <__assert_fail@plt+0x14c0>
   12740:	mov	r0, #0
   12744:	bl	1121c <dcgettext@plt>
   12748:	ldr	r1, [r4]
   1274c:	bl	11150 <fputs_unlocked@plt>
   12750:	mov	r2, #5
   12754:	ldr	r1, [pc, #584]	; 129a4 <__assert_fail@plt+0x14c4>
   12758:	mov	r0, #0
   1275c:	bl	1121c <dcgettext@plt>
   12760:	ldr	r1, [r4]
   12764:	bl	11150 <fputs_unlocked@plt>
   12768:	mov	ip, sp
   1276c:	ldr	lr, [pc, #564]	; 129a8 <__assert_fail@plt+0x14c8>
   12770:	ldm	lr!, {r0, r1, r2, r3}
   12774:	stmia	ip!, {r0, r1, r2, r3}
   12778:	ldm	lr!, {r0, r1, r2, r3}
   1277c:	stmia	ip!, {r0, r1, r2, r3}
   12780:	ldm	lr!, {r0, r1, r2, r3}
   12784:	stmia	ip!, {r0, r1, r2, r3}
   12788:	ldm	lr, {r0, r1}
   1278c:	stm	ip, {r0, r1}
   12790:	ldr	r1, [sp]
   12794:	cmp	r1, #0
   12798:	moveq	r4, sp
   1279c:	beq	127c4 <__assert_fail@plt+0x12e4>
   127a0:	mov	r4, sp
   127a4:	ldr	r5, [pc, #512]	; 129ac <__assert_fail@plt+0x14cc>
   127a8:	mov	r0, r5
   127ac:	bl	11168 <strcmp@plt>
   127b0:	cmp	r0, #0
   127b4:	beq	127c4 <__assert_fail@plt+0x12e4>
   127b8:	ldr	r1, [r4, #8]!
   127bc:	cmp	r1, #0
   127c0:	bne	127a8 <__assert_fail@plt+0x12c8>
   127c4:	ldr	r4, [r4, #4]
   127c8:	cmp	r4, #0
   127cc:	beq	128e0 <__assert_fail@plt+0x1400>
   127d0:	mov	r2, #5
   127d4:	ldr	r1, [pc, #468]	; 129b0 <__assert_fail@plt+0x14d0>
   127d8:	mov	r0, #0
   127dc:	bl	1121c <dcgettext@plt>
   127e0:	ldr	r3, [pc, #460]	; 129b4 <__assert_fail@plt+0x14d4>
   127e4:	ldr	r2, [pc, #460]	; 129b8 <__assert_fail@plt+0x14d8>
   127e8:	mov	r1, r0
   127ec:	mov	r0, #1
   127f0:	bl	113cc <__printf_chk@plt>
   127f4:	mov	r1, #0
   127f8:	mov	r0, #5
   127fc:	bl	11438 <setlocale@plt>
   12800:	cmp	r0, #0
   12804:	beq	1281c <__assert_fail@plt+0x133c>
   12808:	mov	r2, #3
   1280c:	ldr	r1, [pc, #424]	; 129bc <__assert_fail@plt+0x14dc>
   12810:	bl	114b0 <strncmp@plt>
   12814:	cmp	r0, #0
   12818:	bne	1287c <__assert_fail@plt+0x139c>
   1281c:	mov	r2, #5
   12820:	ldr	r1, [pc, #408]	; 129c0 <__assert_fail@plt+0x14e0>
   12824:	mov	r0, #0
   12828:	bl	1121c <dcgettext@plt>
   1282c:	ldr	r5, [pc, #376]	; 129ac <__assert_fail@plt+0x14cc>
   12830:	mov	r3, r5
   12834:	ldr	r2, [pc, #376]	; 129b4 <__assert_fail@plt+0x14d4>
   12838:	mov	r1, r0
   1283c:	mov	r0, #1
   12840:	bl	113cc <__printf_chk@plt>
   12844:	mov	r2, #5
   12848:	ldr	r1, [pc, #372]	; 129c4 <__assert_fail@plt+0x14e4>
   1284c:	mov	r0, #0
   12850:	bl	1121c <dcgettext@plt>
   12854:	mov	r1, r0
   12858:	ldr	r2, [pc, #360]	; 129c8 <__assert_fail@plt+0x14e8>
   1285c:	ldr	r3, [pc, #360]	; 129cc <__assert_fail@plt+0x14ec>
   12860:	cmp	r4, r5
   12864:	movne	r3, r2
   12868:	mov	r2, r4
   1286c:	mov	r0, #1
   12870:	bl	113cc <__printf_chk@plt>
   12874:	b	12650 <__assert_fail@plt+0x1170>
   12878:	ldr	r4, [pc, #300]	; 129ac <__assert_fail@plt+0x14cc>
   1287c:	mov	r2, #5
   12880:	ldr	r1, [pc, #328]	; 129d0 <__assert_fail@plt+0x14f0>
   12884:	mov	r0, #0
   12888:	bl	1121c <dcgettext@plt>
   1288c:	ldr	r3, [pc, #240]	; 12984 <__assert_fail@plt+0x14a4>
   12890:	ldr	r1, [r3]
   12894:	bl	11150 <fputs_unlocked@plt>
   12898:	b	1281c <__assert_fail@plt+0x133c>
   1289c:	mov	r2, #5
   128a0:	ldr	r1, [pc, #280]	; 129c0 <__assert_fail@plt+0x14e0>
   128a4:	mov	r0, #0
   128a8:	bl	1121c <dcgettext@plt>
   128ac:	ldr	r4, [pc, #248]	; 129ac <__assert_fail@plt+0x14cc>
   128b0:	mov	r3, r4
   128b4:	ldr	r2, [pc, #248]	; 129b4 <__assert_fail@plt+0x14d4>
   128b8:	mov	r1, r0
   128bc:	mov	r0, #1
   128c0:	bl	113cc <__printf_chk@plt>
   128c4:	mov	r2, #5
   128c8:	ldr	r1, [pc, #244]	; 129c4 <__assert_fail@plt+0x14e4>
   128cc:	mov	r0, #0
   128d0:	bl	1121c <dcgettext@plt>
   128d4:	mov	r1, r0
   128d8:	ldr	r3, [pc, #236]	; 129cc <__assert_fail@plt+0x14ec>
   128dc:	b	12868 <__assert_fail@plt+0x1388>
   128e0:	mov	r2, #5
   128e4:	ldr	r1, [pc, #196]	; 129b0 <__assert_fail@plt+0x14d0>
   128e8:	mov	r0, #0
   128ec:	bl	1121c <dcgettext@plt>
   128f0:	ldr	r3, [pc, #188]	; 129b4 <__assert_fail@plt+0x14d4>
   128f4:	ldr	r2, [pc, #188]	; 129b8 <__assert_fail@plt+0x14d8>
   128f8:	mov	r1, r0
   128fc:	mov	r0, #1
   12900:	bl	113cc <__printf_chk@plt>
   12904:	mov	r1, #0
   12908:	mov	r0, #5
   1290c:	bl	11438 <setlocale@plt>
   12910:	cmp	r0, #0
   12914:	beq	1289c <__assert_fail@plt+0x13bc>
   12918:	mov	r2, #3
   1291c:	ldr	r1, [pc, #152]	; 129bc <__assert_fail@plt+0x14dc>
   12920:	bl	114b0 <strncmp@plt>
   12924:	cmp	r0, #0
   12928:	bne	12878 <__assert_fail@plt+0x1398>
   1292c:	mov	r2, #5
   12930:	ldr	r1, [pc, #136]	; 129c0 <__assert_fail@plt+0x14e0>
   12934:	mov	r0, #0
   12938:	bl	1121c <dcgettext@plt>
   1293c:	ldr	r4, [pc, #104]	; 129ac <__assert_fail@plt+0x14cc>
   12940:	mov	r3, r4
   12944:	ldr	r2, [pc, #104]	; 129b4 <__assert_fail@plt+0x14d4>
   12948:	mov	r1, r0
   1294c:	mov	r0, #1
   12950:	bl	113cc <__printf_chk@plt>
   12954:	mov	r2, #5
   12958:	ldr	r1, [pc, #100]	; 129c4 <__assert_fail@plt+0x14e4>
   1295c:	mov	r0, #0
   12960:	bl	1121c <dcgettext@plt>
   12964:	mov	r1, r0
   12968:	ldr	r3, [pc, #92]	; 129cc <__assert_fail@plt+0x14ec>
   1296c:	b	12868 <__assert_fail@plt+0x1388>
   12970:	andeq	fp, r2, r0, ror #6
   12974:	andeq	r9, r1, ip, ror #4
   12978:	andeq	fp, r2, ip, lsr #10
   1297c:	muleq	r1, r4, r2
   12980:			; <UNDEFINED> instruction: 0x000192bc
   12984:	andeq	fp, r2, r4, ror #6
   12988:	andeq	r9, r1, r8, lsr #6
   1298c:	andeq	r9, r1, r0, ror #6
   12990:	andeq	r9, r1, ip, lsr #7
   12994:	strdeq	r9, [r1], -r0
   12998:	andeq	r9, r1, r4, ror #16
   1299c:	muleq	r1, r4, r8
   129a0:	andeq	r9, r1, ip, asr #17
   129a4:	andeq	r9, r1, r0, lsr #19
   129a8:	muleq	r1, r4, lr
   129ac:	andeq	r9, r1, r4, ror #4
   129b0:	strdeq	r9, [r1], -r4
   129b4:	andeq	r9, r1, ip, lsl #22
   129b8:	andeq	r9, r1, r4, lsr fp
   129bc:	andeq	r9, r1, r4, asr #22
   129c0:	muleq	r1, r0, fp
   129c4:	andeq	r9, r1, ip, lsr #23
   129c8:	andeq	r9, r1, r0, ror #16
   129cc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   129d0:	andeq	r9, r1, r8, asr #22
   129d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d8:	sub	sp, sp, #260	; 0x104
   129dc:	str	r0, [sp, #24]
   129e0:	mov	r5, r1
   129e4:	bl	11390 <getpagesize@plt>
   129e8:	str	r0, [sp, #56]	; 0x38
   129ec:	ldr	r0, [r5]
   129f0:	bl	15130 <__assert_fail@plt+0x3c50>
   129f4:	ldr	r1, [pc, #2676]	; 13470 <__assert_fail@plt+0x1f90>
   129f8:	mov	r0, #6
   129fc:	bl	11438 <setlocale@plt>
   12a00:	ldr	r4, [pc, #2668]	; 13474 <__assert_fail@plt+0x1f94>
   12a04:	ldr	r1, [pc, #2668]	; 13478 <__assert_fail@plt+0x1f98>
   12a08:	mov	r0, r4
   12a0c:	bl	1148c <bindtextdomain@plt>
   12a10:	mov	r0, r4
   12a14:	bl	11240 <textdomain@plt>
   12a18:	ldr	r0, [pc, #2652]	; 1347c <__assert_fail@plt+0x1f9c>
   12a1c:	bl	18e60 <__assert_fail@plt+0x7980>
   12a20:	ldr	r3, [pc, #2840]	; 13540 <__assert_fail@plt+0x2060>
   12a24:	ldr	r2, [pc, #2816]	; 1352c <__assert_fail@plt+0x204c>
   12a28:	str	r2, [r3, #300]	; 0x12c
   12a2c:	ldr	r2, [pc, #2636]	; 13480 <__assert_fail@plt+0x1fa0>
   12a30:	str	r2, [r3, #8]
   12a34:	mov	r2, #0
   12a38:	mov	r3, #0
   12a3c:	strd	r2, [sp, #32]
   12a40:	strd	r2, [sp, #40]	; 0x28
   12a44:	mov	sl, #0
   12a48:	str	sl, [sp, #52]	; 0x34
   12a4c:	str	sl, [sp, #72]	; 0x48
   12a50:	ldr	fp, [pc, #2604]	; 13484 <__assert_fail@plt+0x1fa4>
   12a54:	ldr	r9, [pc, #2604]	; 13488 <__assert_fail@plt+0x1fa8>
   12a58:	add	r7, r9, #344	; 0x158
   12a5c:	ldr	r6, [fp]
   12a60:	cmp	r6, #0
   12a64:	moveq	r6, #1
   12a68:	mov	r3, #0
   12a6c:	str	r3, [sp]
   12a70:	add	r3, r9, #72	; 0x48
   12a74:	ldr	r2, [pc, #2576]	; 1348c <__assert_fail@plt+0x1fac>
   12a78:	mov	r1, r5
   12a7c:	ldr	r0, [sp, #24]
   12a80:	bl	11330 <getopt_long@plt>
   12a84:	mov	r4, r0
   12a88:	cmn	r0, #1
   12a8c:	beq	1326c <__assert_fail@plt+0x1d8c>
   12a90:	cmp	r0, #101	; 0x65
   12a94:	beq	131b8 <__assert_fail@plt+0x1cd8>
   12a98:	ble	12ad4 <__assert_fail@plt+0x15f4>
   12a9c:	cmp	r0, #120	; 0x78
   12aa0:	beq	12bd0 <__assert_fail@plt+0x16f0>
   12aa4:	bgt	12ccc <__assert_fail@plt+0x17ec>
   12aa8:	cmp	r0, #110	; 0x6e
   12aac:	beq	12e38 <__assert_fail@plt+0x1958>
   12ab0:	ble	12c68 <__assert_fail@plt+0x1788>
   12ab4:	cmp	r0, #116	; 0x74
   12ab8:	beq	12ff4 <__assert_fail@plt+0x1b14>
   12abc:	cmp	r0, #117	; 0x75
   12ac0:	bne	13264 <__assert_fail@plt+0x1d84>
   12ac4:	mov	r2, #1
   12ac8:	ldr	r3, [pc, #2672]	; 13540 <__assert_fail@plt+0x2060>
   12acc:	strb	r2, [r3, #304]	; 0x130
   12ad0:	b	12a5c <__assert_fail@plt+0x157c>
   12ad4:	cmp	r0, #57	; 0x39
   12ad8:	ble	12b48 <__assert_fail@plt+0x1668>
   12adc:	cmp	r0, #97	; 0x61
   12ae0:	beq	12d30 <__assert_fail@plt+0x1850>
   12ae4:	ble	12b68 <__assert_fail@plt+0x1688>
   12ae8:	cmp	r0, #98	; 0x62
   12aec:	bne	12bc8 <__assert_fail@plt+0x16e8>
   12af0:	cmp	sl, #0
   12af4:	bne	12dc0 <__assert_fail@plt+0x18e0>
   12af8:	ldr	r3, [pc, #2448]	; 13490 <__assert_fail@plt+0x1fb0>
   12afc:	ldr	r4, [r3]
   12b00:	mov	r2, #5
   12b04:	ldr	r1, [pc, #2440]	; 13494 <__assert_fail@plt+0x1fb4>
   12b08:	mov	r0, #0
   12b0c:	bl	1121c <dcgettext@plt>
   12b10:	mov	r3, #0
   12b14:	str	r3, [sp, #16]
   12b18:	str	r0, [sp, #12]
   12b1c:	str	r7, [sp, #8]
   12b20:	mvn	r2, #0
   12b24:	mvn	r3, #-2147483648	; 0x80000000
   12b28:	strd	r2, [sp]
   12b2c:	mov	r2, #1
   12b30:	mov	r3, #0
   12b34:	mov	r0, r4
   12b38:	bl	17d08 <__assert_fail@plt+0x6828>
   12b3c:	strd	r0, [sp, #32]
   12b40:	mov	sl, #1
   12b44:	b	12a5c <__assert_fail@plt+0x157c>
   12b48:	cmp	r0, #48	; 0x30
   12b4c:	bge	130c0 <__assert_fail@plt+0x1be0>
   12b50:	cmn	r0, #3
   12b54:	beq	13228 <__assert_fail@plt+0x1d48>
   12b58:	cmn	r0, #2
   12b5c:	bne	13264 <__assert_fail@plt+0x1d84>
   12b60:	mov	r0, #0
   12b64:	bl	12610 <__assert_fail@plt+0x1130>
   12b68:	cmp	r0, #67	; 0x43
   12b6c:	bne	13264 <__assert_fail@plt+0x1d84>
   12b70:	cmp	sl, #0
   12b74:	bne	12e10 <__assert_fail@plt+0x1930>
   12b78:	ldr	r3, [pc, #2320]	; 13490 <__assert_fail@plt+0x1fb0>
   12b7c:	ldr	r4, [r3]
   12b80:	mov	r2, #5
   12b84:	ldr	r1, [pc, #2312]	; 13494 <__assert_fail@plt+0x1fb4>
   12b88:	mov	r0, #0
   12b8c:	bl	1121c <dcgettext@plt>
   12b90:	mov	r3, #0
   12b94:	str	r3, [sp, #16]
   12b98:	str	r0, [sp, #12]
   12b9c:	str	r7, [sp, #8]
   12ba0:	mvn	r2, #0
   12ba4:	mov	r3, #0
   12ba8:	strd	r2, [sp]
   12bac:	mov	r2, #1
   12bb0:	mov	r3, #0
   12bb4:	mov	r0, r4
   12bb8:	bl	17d08 <__assert_fail@plt+0x6828>
   12bbc:	strd	r0, [sp, #32]
   12bc0:	mov	sl, #2
   12bc4:	b	12a5c <__assert_fail@plt+0x157c>
   12bc8:	cmp	r0, #100	; 0x64
   12bcc:	bne	13264 <__assert_fail@plt+0x1d84>
   12bd0:	cmp	r4, #100	; 0x64
   12bd4:	ldreq	r2, [pc, #2236]	; 13498 <__assert_fail@plt+0x1fb8>
   12bd8:	ldrne	r2, [pc, #2236]	; 1349c <__assert_fail@plt+0x1fbc>
   12bdc:	ldr	r3, [pc, #2408]	; 1354c <__assert_fail@plt+0x206c>
   12be0:	str	r2, [r3]
   12be4:	ldr	r3, [pc, #2212]	; 13490 <__assert_fail@plt+0x1fb0>
   12be8:	ldr	r6, [r3]
   12bec:	cmp	r6, #0
   12bf0:	beq	12a5c <__assert_fail@plt+0x157c>
   12bf4:	mov	r0, r6
   12bf8:	bl	11354 <strlen@plt>
   12bfc:	mov	r8, r0
   12c00:	ldr	r3, [pc, #2372]	; 1354c <__assert_fail@plt+0x206c>
   12c04:	ldr	r1, [r3]
   12c08:	mov	r0, r6
   12c0c:	bl	114d4 <strspn@plt>
   12c10:	cmp	r8, r0
   12c14:	bne	13174 <__assert_fail@plt+0x1c94>
   12c18:	ldrb	r3, [r6]
   12c1c:	cmp	r3, #48	; 0x30
   12c20:	bne	12c5c <__assert_fail@plt+0x177c>
   12c24:	ldrb	r3, [r6, #1]
   12c28:	cmp	r3, #0
   12c2c:	addne	r3, r6, #1
   12c30:	ldrne	r1, [pc, #2136]	; 13490 <__assert_fail@plt+0x1fb0>
   12c34:	beq	12c5c <__assert_fail@plt+0x177c>
   12c38:	mov	r6, r3
   12c3c:	str	r3, [r1]
   12c40:	add	r3, r3, #1
   12c44:	ldrb	r2, [r6]
   12c48:	cmp	r2, #48	; 0x30
   12c4c:	bne	12c5c <__assert_fail@plt+0x177c>
   12c50:	ldrb	r2, [r3]
   12c54:	cmp	r2, #0
   12c58:	bne	12c38 <__assert_fail@plt+0x1758>
   12c5c:	ldr	r3, [pc, #2268]	; 13540 <__assert_fail@plt+0x2060>
   12c60:	str	r6, [r3, #36]	; 0x24
   12c64:	b	12a5c <__assert_fail@plt+0x157c>
   12c68:	cmp	r0, #108	; 0x6c
   12c6c:	bne	13264 <__assert_fail@plt+0x1d84>
   12c70:	cmp	sl, #0
   12c74:	bne	12de8 <__assert_fail@plt+0x1908>
   12c78:	ldr	r3, [pc, #2064]	; 13490 <__assert_fail@plt+0x1fb0>
   12c7c:	ldr	r4, [r3]
   12c80:	mov	r2, #5
   12c84:	ldr	r1, [pc, #2068]	; 134a0 <__assert_fail@plt+0x1fc0>
   12c88:	mov	r0, #0
   12c8c:	bl	1121c <dcgettext@plt>
   12c90:	mov	r3, #0
   12c94:	str	r3, [sp, #16]
   12c98:	str	r0, [sp, #12]
   12c9c:	ldr	r3, [pc, #1996]	; 13470 <__assert_fail@plt+0x1f90>
   12ca0:	str	r3, [sp, #8]
   12ca4:	mvn	r2, #0
   12ca8:	mvn	r3, #0
   12cac:	strd	r2, [sp]
   12cb0:	mov	r2, #1
   12cb4:	mov	r3, #0
   12cb8:	mov	r0, r4
   12cbc:	bl	17d08 <__assert_fail@plt+0x6828>
   12cc0:	strd	r0, [sp, #32]
   12cc4:	mov	sl, #3
   12cc8:	b	12a5c <__assert_fail@plt+0x157c>
   12ccc:	ldr	r3, [pc, #2000]	; 134a4 <__assert_fail@plt+0x1fc4>
   12cd0:	cmp	r0, r3
   12cd4:	beq	131c8 <__assert_fail@plt+0x1ce8>
   12cd8:	ble	12d18 <__assert_fail@plt+0x1838>
   12cdc:	ldr	r3, [pc, #1988]	; 134a8 <__assert_fail@plt+0x1fc8>
   12ce0:	cmp	r0, r3
   12ce4:	beq	131dc <__assert_fail@plt+0x1cfc>
   12ce8:	add	r3, r3, #1
   12cec:	cmp	r0, r3
   12cf0:	bne	13264 <__assert_fail@plt+0x1d84>
   12cf4:	ldr	r3, [pc, #1940]	; 13490 <__assert_fail@plt+0x1fb0>
   12cf8:	ldr	r4, [r3]
   12cfc:	mov	r0, r4
   12d00:	bl	14be0 <__assert_fail@plt+0x3700>
   12d04:	cmp	r4, r0
   12d08:	bne	12d84 <__assert_fail@plt+0x18a4>
   12d0c:	ldr	r3, [pc, #2092]	; 13540 <__assert_fail@plt+0x2060>
   12d10:	str	r4, [r3, #16]
   12d14:	b	12a5c <__assert_fail@plt+0x157c>
   12d18:	cmp	r0, #256	; 0x100
   12d1c:	bne	13264 <__assert_fail@plt+0x1d84>
   12d20:	mov	r2, #1
   12d24:	ldr	r3, [pc, #2068]	; 13540 <__assert_fail@plt+0x2060>
   12d28:	strb	r2, [r3, #44]	; 0x2c
   12d2c:	b	12a5c <__assert_fail@plt+0x157c>
   12d30:	ldr	r3, [pc, #1880]	; 13490 <__assert_fail@plt+0x1fb0>
   12d34:	ldr	r4, [r3]
   12d38:	mov	r2, #5
   12d3c:	ldr	r1, [pc, #1896]	; 134ac <__assert_fail@plt+0x1fcc>
   12d40:	mov	r0, #0
   12d44:	bl	1121c <dcgettext@plt>
   12d48:	mov	r3, #0
   12d4c:	str	r3, [sp, #16]
   12d50:	str	r0, [sp, #12]
   12d54:	ldr	r3, [pc, #1812]	; 13470 <__assert_fail@plt+0x1f90>
   12d58:	str	r3, [sp, #8]
   12d5c:	mvn	r2, #-1073741824	; 0xc0000000
   12d60:	mov	r3, #0
   12d64:	strd	r2, [sp]
   12d68:	mov	r2, #0
   12d6c:	mov	r3, #0
   12d70:	mov	r0, r4
   12d74:	bl	17d08 <__assert_fail@plt+0x6828>
   12d78:	ldr	r3, [pc, #1984]	; 13540 <__assert_fail@plt+0x2060>
   12d7c:	str	r0, [r3, #24]
   12d80:	b	12a5c <__assert_fail@plt+0x157c>
   12d84:	mov	r2, #5
   12d88:	ldr	r1, [pc, #1824]	; 134b0 <__assert_fail@plt+0x1fd0>
   12d8c:	mov	r0, #0
   12d90:	bl	1121c <dcgettext@plt>
   12d94:	mov	r4, r0
   12d98:	ldr	r3, [pc, #1776]	; 13490 <__assert_fail@plt+0x1fb0>
   12d9c:	ldr	r0, [r3]
   12da0:	bl	16c80 <__assert_fail@plt+0x57a0>
   12da4:	mov	r3, r0
   12da8:	mov	r2, r4
   12dac:	mov	r1, #0
   12db0:	mov	r0, r1
   12db4:	bl	112d0 <error@plt>
   12db8:	mov	r0, #1
   12dbc:	bl	12610 <__assert_fail@plt+0x1130>
   12dc0:	mov	r2, #5
   12dc4:	ldr	r1, [pc, #1768]	; 134b4 <__assert_fail@plt+0x1fd4>
   12dc8:	mov	r0, #0
   12dcc:	bl	1121c <dcgettext@plt>
   12dd0:	mov	r2, r0
   12dd4:	mov	r1, #0
   12dd8:	mov	r0, r1
   12ddc:	bl	112d0 <error@plt>
   12de0:	mov	r0, #1
   12de4:	bl	12610 <__assert_fail@plt+0x1130>
   12de8:	mov	r2, #5
   12dec:	ldr	r1, [pc, #1728]	; 134b4 <__assert_fail@plt+0x1fd4>
   12df0:	mov	r0, #0
   12df4:	bl	1121c <dcgettext@plt>
   12df8:	mov	r2, r0
   12dfc:	mov	r1, #0
   12e00:	mov	r0, r1
   12e04:	bl	112d0 <error@plt>
   12e08:	mov	r0, #1
   12e0c:	bl	12610 <__assert_fail@plt+0x1130>
   12e10:	mov	r2, #5
   12e14:	ldr	r1, [pc, #1688]	; 134b4 <__assert_fail@plt+0x1fd4>
   12e18:	mov	r0, #0
   12e1c:	bl	1121c <dcgettext@plt>
   12e20:	mov	r2, r0
   12e24:	mov	r1, #0
   12e28:	mov	r0, r1
   12e2c:	bl	112d0 <error@plt>
   12e30:	mov	r0, #1
   12e34:	bl	12610 <__assert_fail@plt+0x1130>
   12e38:	cmp	sl, #0
   12e3c:	bne	12e4c <__assert_fail@plt+0x196c>
   12e40:	bl	1133c <__ctype_b_loc@plt>
   12e44:	ldr	r2, [pc, #1604]	; 13490 <__assert_fail@plt+0x1fb0>
   12e48:	b	12e7c <__assert_fail@plt+0x199c>
   12e4c:	mov	r2, #5
   12e50:	ldr	r1, [pc, #1628]	; 134b4 <__assert_fail@plt+0x1fd4>
   12e54:	mov	r0, #0
   12e58:	bl	1121c <dcgettext@plt>
   12e5c:	mov	r2, r0
   12e60:	mov	r1, #0
   12e64:	mov	r0, r1
   12e68:	bl	112d0 <error@plt>
   12e6c:	mov	r0, #1
   12e70:	bl	12610 <__assert_fail@plt+0x1130>
   12e74:	add	r4, r4, #1
   12e78:	str	r4, [r2]
   12e7c:	ldr	r4, [r2]
   12e80:	ldrb	r3, [r4]
   12e84:	ldr	r1, [r0]
   12e88:	lsl	r3, r3, #1
   12e8c:	ldrh	r3, [r1, r3]
   12e90:	tst	r3, #8192	; 0x2000
   12e94:	bne	12e74 <__assert_fail@plt+0x1994>
   12e98:	mov	r2, #2
   12e9c:	ldr	r1, [pc, #1556]	; 134b8 <__assert_fail@plt+0x1fd8>
   12ea0:	mov	r0, r4
   12ea4:	bl	114b0 <strncmp@plt>
   12ea8:	cmp	r0, #0
   12eac:	bne	12f80 <__assert_fail@plt+0x1aa0>
   12eb0:	add	r4, r4, #2
   12eb4:	ldr	r3, [pc, #1492]	; 13490 <__assert_fail@plt+0x1fb0>
   12eb8:	str	r4, [r3]
   12ebc:	mov	sl, #7
   12ec0:	ldr	r3, [pc, #1480]	; 13490 <__assert_fail@plt+0x1fb0>
   12ec4:	ldr	r6, [r3]
   12ec8:	mov	r1, #47	; 0x2f
   12ecc:	mov	r0, r6
   12ed0:	bl	1136c <strchr@plt>
   12ed4:	subs	r4, r0, #0
   12ed8:	beq	12fac <__assert_fail@plt+0x1acc>
   12edc:	mov	r2, #5
   12ee0:	ldr	r1, [pc, #1588]	; 1351c <__assert_fail@plt+0x203c>
   12ee4:	mov	r0, #0
   12ee8:	bl	1121c <dcgettext@plt>
   12eec:	mov	r3, #0
   12ef0:	str	r3, [sp, #16]
   12ef4:	str	r0, [sp, #12]
   12ef8:	ldr	r3, [pc, #1392]	; 13470 <__assert_fail@plt+0x1f90>
   12efc:	str	r3, [sp, #8]
   12f00:	mvn	r2, #0
   12f04:	mvn	r3, #0
   12f08:	strd	r2, [sp]
   12f0c:	mov	r2, #1
   12f10:	mov	r3, #0
   12f14:	add	r0, r4, #1
   12f18:	bl	17d08 <__assert_fail@plt+0x6828>
   12f1c:	strd	r0, [sp, #32]
   12f20:	ldr	r3, [pc, #1384]	; 13490 <__assert_fail@plt+0x1fb0>
   12f24:	ldr	r3, [r3]
   12f28:	cmp	r4, r3
   12f2c:	beq	12a5c <__assert_fail@plt+0x157c>
   12f30:	mov	r6, #0
   12f34:	strb	r6, [r4]
   12f38:	ldr	r3, [pc, #1360]	; 13490 <__assert_fail@plt+0x1fb0>
   12f3c:	ldr	r4, [r3]
   12f40:	mov	r2, #5
   12f44:	ldr	r1, [pc, #1392]	; 134bc <__assert_fail@plt+0x1fdc>
   12f48:	mov	r0, r6
   12f4c:	bl	1121c <dcgettext@plt>
   12f50:	str	r6, [sp, #16]
   12f54:	str	r0, [sp, #12]
   12f58:	ldr	r3, [pc, #1296]	; 13470 <__assert_fail@plt+0x1f90>
   12f5c:	str	r3, [sp, #8]
   12f60:	ldrd	r2, [sp, #32]
   12f64:	strd	r2, [sp]
   12f68:	mov	r2, #1
   12f6c:	mov	r3, #0
   12f70:	mov	r0, r4
   12f74:	bl	17d08 <__assert_fail@plt+0x6828>
   12f78:	strd	r0, [sp, #40]	; 0x28
   12f7c:	b	12a5c <__assert_fail@plt+0x157c>
   12f80:	mov	r2, #2
   12f84:	ldr	r1, [pc, #1332]	; 134c0 <__assert_fail@plt+0x1fe0>
   12f88:	mov	r0, r4
   12f8c:	bl	114b0 <strncmp@plt>
   12f90:	cmp	r0, #0
   12f94:	addeq	r4, r4, #2
   12f98:	ldreq	r3, [pc, #1264]	; 13490 <__assert_fail@plt+0x1fb0>
   12f9c:	streq	r4, [r3]
   12fa0:	moveq	sl, #6
   12fa4:	movne	sl, #5
   12fa8:	b	12ec0 <__assert_fail@plt+0x19e0>
   12fac:	mov	r2, #5
   12fb0:	ldr	r1, [pc, #1380]	; 1351c <__assert_fail@plt+0x203c>
   12fb4:	mov	r0, #0
   12fb8:	bl	1121c <dcgettext@plt>
   12fbc:	mov	r3, #0
   12fc0:	str	r3, [sp, #16]
   12fc4:	str	r0, [sp, #12]
   12fc8:	ldr	r3, [pc, #1184]	; 13470 <__assert_fail@plt+0x1f90>
   12fcc:	str	r3, [sp, #8]
   12fd0:	mvn	r2, #0
   12fd4:	mvn	r3, #0
   12fd8:	strd	r2, [sp]
   12fdc:	mov	r2, #1
   12fe0:	mov	r3, #0
   12fe4:	mov	r0, r6
   12fe8:	bl	17d08 <__assert_fail@plt+0x6828>
   12fec:	strd	r0, [sp, #32]
   12ff0:	b	12a5c <__assert_fail@plt+0x157c>
   12ff4:	ldr	r3, [pc, #1172]	; 13490 <__assert_fail@plt+0x1fb0>
   12ff8:	ldr	r0, [r3]
   12ffc:	ldrb	r3, [r0]
   13000:	cmp	r3, #0
   13004:	beq	1304c <__assert_fail@plt+0x1b6c>
   13008:	ldrb	r2, [r0, #1]
   1300c:	cmp	r2, #0
   13010:	beq	13028 <__assert_fail@plt+0x1b48>
   13014:	ldr	r1, [pc, #1192]	; 134c4 <__assert_fail@plt+0x1fe4>
   13018:	bl	11168 <strcmp@plt>
   1301c:	cmp	r0, #0
   13020:	bne	1306c <__assert_fail@plt+0x1b8c>
   13024:	mov	r3, #0
   13028:	ldr	r2, [pc, #1308]	; 1354c <__assert_fail@plt+0x206c>
   1302c:	ldr	r2, [r2, #12]
   13030:	cmp	r2, #0
   13034:	blt	13040 <__assert_fail@plt+0x1b60>
   13038:	cmp	r2, r3
   1303c:	bne	130a0 <__assert_fail@plt+0x1bc0>
   13040:	ldr	r2, [pc, #1284]	; 1354c <__assert_fail@plt+0x206c>
   13044:	str	r3, [r2, #12]
   13048:	b	12a5c <__assert_fail@plt+0x157c>
   1304c:	mov	r2, #5
   13050:	ldr	r1, [pc, #1136]	; 134c8 <__assert_fail@plt+0x1fe8>
   13054:	mov	r0, #0
   13058:	bl	1121c <dcgettext@plt>
   1305c:	mov	r2, r0
   13060:	mov	r1, #0
   13064:	mov	r0, #1
   13068:	bl	112d0 <error@plt>
   1306c:	mov	r2, #5
   13070:	ldr	r1, [pc, #1108]	; 134cc <__assert_fail@plt+0x1fec>
   13074:	mov	r0, #0
   13078:	bl	1121c <dcgettext@plt>
   1307c:	mov	r4, r0
   13080:	ldr	r3, [pc, #1032]	; 13490 <__assert_fail@plt+0x1fb0>
   13084:	ldr	r0, [r3]
   13088:	bl	16c80 <__assert_fail@plt+0x57a0>
   1308c:	mov	r3, r0
   13090:	mov	r2, r4
   13094:	mov	r1, #0
   13098:	mov	r0, #1
   1309c:	bl	112d0 <error@plt>
   130a0:	mov	r2, #5
   130a4:	ldr	r1, [pc, #1060]	; 134d0 <__assert_fail@plt+0x1ff0>
   130a8:	mov	r0, #0
   130ac:	bl	1121c <dcgettext@plt>
   130b0:	mov	r2, r0
   130b4:	mov	r1, #0
   130b8:	mov	r0, #1
   130bc:	bl	112d0 <error@plt>
   130c0:	cmp	sl, #0
   130c4:	beq	13100 <__assert_fail@plt+0x1c20>
   130c8:	bics	r3, sl, #4
   130cc:	ldrdeq	r2, [sp, #32]
   130d0:	strdeq	r2, [sp, #64]	; 0x40
   130d4:	beq	13110 <__assert_fail@plt+0x1c30>
   130d8:	mov	r2, #5
   130dc:	ldr	r1, [pc, #976]	; 134b4 <__assert_fail@plt+0x1fd4>
   130e0:	mov	r0, #0
   130e4:	bl	1121c <dcgettext@plt>
   130e8:	mov	r2, r0
   130ec:	mov	r1, #0
   130f0:	mov	r0, r1
   130f4:	bl	112d0 <error@plt>
   130f8:	mov	r0, #1
   130fc:	bl	12610 <__assert_fail@plt+0x1130>
   13100:	mov	r2, #0
   13104:	mov	r3, #0
   13108:	strd	r2, [sp, #64]	; 0x40
   1310c:	mov	sl, #4
   13110:	ldr	r3, [sp, #52]	; 0x34
   13114:	cmp	r3, #0
   13118:	cmpne	r3, r6
   1311c:	bne	14b94 <__assert_fail@plt+0x36b4>
   13120:	add	r3, pc, #832	; 0x340
   13124:	ldrd	r2, [r3]
   13128:	ldrd	r0, [sp, #64]	; 0x40
   1312c:	cmp	r1, r3
   13130:	cmpeq	r0, r2
   13134:	bhi	14a1c <__assert_fail@plt+0x353c>
   13138:	mov	ip, #10
   1313c:	umull	r2, r3, r0, ip
   13140:	mla	r3, ip, r1, r3
   13144:	sub	ip, r4, #48	; 0x30
   13148:	adds	r0, r2, ip
   1314c:	adc	r1, r3, ip, asr #31
   13150:	strd	r0, [sp, #32]
   13154:	ldrd	r2, [sp, #64]	; 0x40
   13158:	cmp	r1, r3
   1315c:	cmpeq	r0, r2
   13160:	strcs	r6, [sp, #52]	; 0x34
   13164:	bcs	12a5c <__assert_fail@plt+0x157c>
   13168:	mov	r6, r2
   1316c:	mov	r7, r3
   13170:	b	14a20 <__assert_fail@plt+0x3540>
   13174:	cmp	r4, #100	; 0x64
   13178:	mov	r2, #5
   1317c:	ldreq	r1, [pc, #848]	; 134d4 <__assert_fail@plt+0x1ff4>
   13180:	ldrne	r1, [pc, #848]	; 134d8 <__assert_fail@plt+0x1ff8>
   13184:	mov	r0, #0
   13188:	bl	1121c <dcgettext@plt>
   1318c:	mov	r4, r0
   13190:	ldr	r3, [pc, #760]	; 13490 <__assert_fail@plt+0x1fb0>
   13194:	ldr	r0, [r3]
   13198:	bl	16c80 <__assert_fail@plt+0x57a0>
   1319c:	mov	r3, r0
   131a0:	mov	r2, r4
   131a4:	mov	r1, #0
   131a8:	mov	r0, r1
   131ac:	bl	112d0 <error@plt>
   131b0:	mov	r0, #1
   131b4:	bl	12610 <__assert_fail@plt+0x1130>
   131b8:	mov	r2, #1
   131bc:	ldr	r3, [pc, #892]	; 13540 <__assert_fail@plt+0x2060>
   131c0:	strb	r2, [r3, #296]	; 0x128
   131c4:	b	12a5c <__assert_fail@plt+0x157c>
   131c8:	ldr	r3, [pc, #704]	; 13490 <__assert_fail@plt+0x1fb0>
   131cc:	ldr	r2, [r3]
   131d0:	ldr	r3, [pc, #872]	; 13540 <__assert_fail@plt+0x2060>
   131d4:	str	r2, [r3, #40]	; 0x28
   131d8:	b	12a5c <__assert_fail@plt+0x157c>
   131dc:	ldr	r3, [pc, #684]	; 13490 <__assert_fail@plt+0x1fb0>
   131e0:	ldr	r4, [r3]
   131e4:	mov	r2, #5
   131e8:	ldr	r1, [pc, #748]	; 134dc <__assert_fail@plt+0x1ffc>
   131ec:	mov	r0, #0
   131f0:	bl	1121c <dcgettext@plt>
   131f4:	mov	r3, #0
   131f8:	str	r3, [sp, #16]
   131fc:	str	r0, [sp, #12]
   13200:	str	r7, [sp, #8]
   13204:	mvn	r2, #-2147483647	; 0x80000001
   13208:	mov	r3, #0
   1320c:	strd	r2, [sp]
   13210:	mov	r2, #1
   13214:	mov	r3, #0
   13218:	mov	r0, r4
   1321c:	bl	17d08 <__assert_fail@plt+0x6828>
   13220:	str	r0, [sp, #72]	; 0x48
   13224:	b	12a5c <__assert_fail@plt+0x157c>
   13228:	mov	r4, #0
   1322c:	str	r4, [sp, #8]
   13230:	ldr	r3, [pc, #680]	; 134e0 <__assert_fail@plt+0x2000>
   13234:	str	r3, [sp, #4]
   13238:	ldr	r3, [pc, #676]	; 134e4 <__assert_fail@plt+0x2004>
   1323c:	str	r3, [sp]
   13240:	ldr	r3, [pc, #672]	; 134e8 <__assert_fail@plt+0x2008>
   13244:	ldr	r3, [r3]
   13248:	ldr	r2, [pc, #668]	; 134ec <__assert_fail@plt+0x200c>
   1324c:	ldr	r1, [pc, #668]	; 134f0 <__assert_fail@plt+0x2010>
   13250:	ldr	r0, [pc, #668]	; 134f4 <__assert_fail@plt+0x2014>
   13254:	ldr	r0, [r0]
   13258:	bl	1750c <__assert_fail@plt+0x602c>
   1325c:	mov	r0, r4
   13260:	bl	11348 <exit@plt>
   13264:	mov	r0, #1
   13268:	bl	12610 <__assert_fail@plt+0x1130>
   1326c:	ldrd	r2, [sp, #40]	; 0x28
   13270:	orrs	r3, r2, r3
   13274:	beq	132b0 <__assert_fail@plt+0x1dd0>
   13278:	ldr	r3, [pc, #704]	; 13540 <__assert_fail@plt+0x2060>
   1327c:	ldr	r3, [r3, #40]	; 0x28
   13280:	cmp	r3, #0
   13284:	beq	132b0 <__assert_fail@plt+0x1dd0>
   13288:	mov	r2, #5
   1328c:	ldr	r1, [pc, #612]	; 134f8 <__assert_fail@plt+0x2018>
   13290:	mov	r0, #0
   13294:	bl	1121c <dcgettext@plt>
   13298:	mov	r2, r0
   1329c:	mov	r1, #0
   132a0:	mov	r0, r1
   132a4:	bl	112d0 <error@plt>
   132a8:	mov	r0, #1
   132ac:	bl	12610 <__assert_fail@plt+0x1130>
   132b0:	cmp	sl, #0
   132b4:	beq	13300 <__assert_fail@plt+0x1e20>
   132b8:	ldrd	r2, [sp, #32]
   132bc:	orrs	r3, r2, r3
   132c0:	bne	13310 <__assert_fail@plt+0x1e30>
   132c4:	mov	r2, #5
   132c8:	ldr	r1, [pc, #464]	; 134a0 <__assert_fail@plt+0x1fc0>
   132cc:	mov	r0, #0
   132d0:	bl	1121c <dcgettext@plt>
   132d4:	mov	r4, r0
   132d8:	ldr	r0, [pc, #540]	; 134fc <__assert_fail@plt+0x201c>
   132dc:	bl	16c80 <__assert_fail@plt+0x57a0>
   132e0:	str	r0, [sp]
   132e4:	mov	r3, r4
   132e8:	ldr	r2, [pc, #560]	; 13520 <__assert_fail@plt+0x2040>
   132ec:	mov	r1, #0
   132f0:	mov	r0, r1
   132f4:	bl	112d0 <error@plt>
   132f8:	mov	r0, #1
   132fc:	bl	12610 <__assert_fail@plt+0x1130>
   13300:	mov	r2, #1000	; 0x3e8
   13304:	mov	r3, #0
   13308:	strd	r2, [sp, #32]
   1330c:	mov	sl, #3
   13310:	ldr	r3, [pc, #564]	; 1354c <__assert_fail@plt+0x206c>
   13314:	ldr	r3, [r3, #12]
   13318:	cmp	r3, #0
   1331c:	movlt	r2, #10
   13320:	ldrlt	r3, [pc, #548]	; 1354c <__assert_fail@plt+0x206c>
   13324:	strlt	r2, [r3, #12]
   13328:	ldr	r3, [pc, #528]	; 13540 <__assert_fail@plt+0x2060>
   1332c:	ldr	r0, [r3, #36]	; 0x24
   13330:	cmp	r0, #0
   13334:	beq	14a5c <__assert_fail@plt+0x357c>
   13338:	mov	r2, #0
   1333c:	ldr	r3, [pc, #520]	; 1354c <__assert_fail@plt+0x206c>
   13340:	strb	r2, [r3, #4]
   13344:	sub	r4, sl, #5
   13348:	cmp	r4, #2
   1334c:	bls	14a78 <__assert_fail@plt+0x3598>
   13350:	ldr	r3, [pc, #488]	; 13540 <__assert_fail@plt+0x2060>
   13354:	ldr	r3, [r3, #24]
   13358:	cmp	r3, #0
   1335c:	moveq	r8, #0
   13360:	moveq	r9, #0
   13364:	beq	1344c <__assert_fail@plt+0x1f6c>
   13368:	mov	r2, #0
   1336c:	ldr	r3, [pc, #472]	; 1354c <__assert_fail@plt+0x206c>
   13370:	strb	r2, [r3, #4]
   13374:	ldr	r3, [pc, #264]	; 13484 <__assert_fail@plt+0x1fa4>
   13378:	ldr	r3, [r3]
   1337c:	ldr	ip, [sp, #24]
   13380:	cmp	ip, r3
   13384:	ble	13550 <__assert_fail@plt+0x2070>
   13388:	add	r2, r3, #1
   1338c:	ldr	r1, [pc, #240]	; 13484 <__assert_fail@plt+0x1fa4>
   13390:	str	r2, [r1]
   13394:	ldr	r0, [r5, r3, lsl #2]
   13398:	ldr	r1, [pc, #416]	; 13540 <__assert_fail@plt+0x2060>
   1339c:	str	r0, [r1, #300]	; 0x12c
   133a0:	cmp	ip, r2
   133a4:	ble	13550 <__assert_fail@plt+0x2070>
   133a8:	add	r3, r3, #2
   133ac:	ldr	r1, [pc, #208]	; 13484 <__assert_fail@plt+0x1fa4>
   133b0:	str	r3, [r1]
   133b4:	ldr	r1, [r5, r2, lsl #2]
   133b8:	ldr	r2, [pc, #384]	; 13540 <__assert_fail@plt+0x2060>
   133bc:	str	r1, [r2, #8]
   133c0:	cmp	ip, r3
   133c4:	ble	13550 <__assert_fail@plt+0x2070>
   133c8:	mov	r2, #5
   133cc:	ldr	r1, [pc, #300]	; 13500 <__assert_fail@plt+0x2020>
   133d0:	mov	r0, #0
   133d4:	bl	1121c <dcgettext@plt>
   133d8:	mov	r4, r0
   133dc:	ldr	r3, [pc, #160]	; 13484 <__assert_fail@plt+0x1fa4>
   133e0:	ldr	r3, [r3]
   133e4:	ldr	r0, [r5, r3, lsl #2]
   133e8:	bl	16c80 <__assert_fail@plt+0x57a0>
   133ec:	mov	r3, r0
   133f0:	mov	r2, r4
   133f4:	mov	r1, #0
   133f8:	mov	r0, r1
   133fc:	bl	112d0 <error@plt>
   13400:	mov	r0, #1
   13404:	bl	12610 <__assert_fail@plt+0x1130>
   13408:	ldrd	r2, [sp, #112]	; 0x70
   1340c:	ldrd	r8, [sp, #32]
   13410:	mvn	r0, r8
   13414:	mvn	r1, r9
   13418:	cmp	r1, r3
   1341c:	cmpeq	r0, r2
   13420:	movcs	r1, #1
   13424:	movcc	r1, #0
   13428:	cmp	r3, r9
   1342c:	cmpeq	r2, r8
   13430:	movcs	r1, #0
   13434:	andcc	r1, r1, #1
   13438:	cmp	r1, #0
   1343c:	beq	14aa4 <__assert_fail@plt+0x35c4>
   13440:	adds	r6, r6, r2
   13444:	adc	r7, r7, r3
   13448:	b	14aa4 <__assert_fail@plt+0x35c4>
   1344c:	mov	r3, r8
   13450:	cmp	r9, #0
   13454:	cmpeq	r8, #2
   13458:	movcc	r3, #2
   1345c:	ldr	r2, [pc, #220]	; 13540 <__assert_fail@plt+0x2060>
   13460:	str	r3, [r2, #24]
   13464:	b	13374 <__assert_fail@plt+0x1e94>
   13468:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1346c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   13470:	andeq	r9, r1, r0, ror #16
   13474:	andeq	r9, r1, r8, lsr fp
   13478:	andeq	r9, r1, r0, ror #23
   1347c:	andeq	r4, r1, r0, asr #25
   13480:	andeq	sl, r1, ip, asr r0
   13484:	andeq	fp, r2, r8, asr r3
   13488:	andeq	r8, r1, r4, lsl #29
   1348c:	strdeq	r9, [r1], -ip
   13490:	andeq	fp, r2, r8, ror #6
   13494:	andeq	r9, r1, r4, lsl #25
   13498:	andeq	r9, r1, r4, asr sp
   1349c:	andeq	r9, r1, r0, ror #26
   134a0:	muleq	r1, ip, ip
   134a4:	andeq	r0, r0, r1, lsl #2
   134a8:	andeq	r0, r0, r2, lsl #2
   134ac:	andeq	r9, r1, r8, lsl ip
   134b0:	andeq	r9, r1, r0, lsr ip
   134b4:	andeq	r9, r1, r0, ror #24
   134b8:			; <UNDEFINED> instruction: 0x00019cb4
   134bc:	ldrdeq	r9, [r1], -r8
   134c0:			; <UNDEFINED> instruction: 0x00019cb8
   134c4:	andeq	r9, r1, r8, lsl #26
   134c8:	strdeq	r9, [r1], -r0
   134cc:	andeq	r9, r1, ip, lsl #26
   134d0:	andeq	r9, r1, ip, lsr #26
   134d4:	andeq	r9, r1, r4, ror sp
   134d8:	andeq	r9, r1, r4, lsr #27
   134dc:	ldrdeq	r9, [r1], -r4
   134e0:	andeq	r9, r1, ip, ror #27
   134e4:	andeq	r9, r1, r0, lsl #28
   134e8:	andeq	fp, r2, r4, ror #2
   134ec:	andeq	r9, r1, r4, lsr fp
   134f0:	andeq	r9, r1, r4, ror #4
   134f4:	andeq	fp, r2, r4, ror #6
   134f8:	andeq	r9, r1, r4, lsl lr
   134fc:	andeq	r9, r1, ip, asr #28
   13500:	andeq	r9, r1, r4, lsl #29
   13504:	andeq	fp, r2, r0, lsr #7
   13508:	svcne	0x00fe0000
   1350c:	andeq	fp, r2, r4, lsr #9
   13510:	muleq	r1, r8, lr
   13514:	ldrdeq	r9, [r1], -r8
   13518:	strdeq	r9, [r1], -r4
   1351c:			; <UNDEFINED> instruction: 0x00019cbc
   13520:	andeq	r9, r1, r0, asr lr
   13524:	andeq	r8, r1, ip, ror #31
   13528:	andeq	r9, r1, r4, lsl pc
   1352c:	strdeq	r9, [r1], -r8
   13530:	andeq	r9, r1, r0
   13534:	andeq	r0, r0, r3, ror #6
   13538:	andeq	r9, r1, r8, lsr pc
   1353c:	andeq	r9, r1, r4, lsl r0
   13540:	andeq	fp, r2, r0, ror r3
   13544:	andeq	r9, r1, r8, asr pc
   13548:	andeq	r9, r1, ip, lsr r2
   1354c:	andeq	fp, r2, r4, asr r1
   13550:	ldr	r3, [pc, #-24]	; 13540 <__assert_fail@plt+0x2060>
   13554:	ldr	r0, [r3, #36]	; 0x24
   13558:	cmp	r0, #0
   1355c:	beq	13574 <__assert_fail@plt+0x2094>
   13560:	bl	11354 <strlen@plt>
   13564:	ldr	r3, [pc, #-44]	; 13540 <__assert_fail@plt+0x2060>
   13568:	ldr	r3, [r3, #24]
   1356c:	cmp	r0, r3
   13570:	bhi	136ac <__assert_fail@plt+0x21cc>
   13574:	ldr	r3, [pc, #-60]	; 13540 <__assert_fail@plt+0x2060>
   13578:	ldr	r5, [r3, #300]	; 0x12c
   1357c:	ldr	r1, [pc, #-88]	; 1352c <__assert_fail@plt+0x204c>
   13580:	mov	r0, r5
   13584:	bl	11168 <strcmp@plt>
   13588:	cmp	r0, #0
   1358c:	beq	135ac <__assert_fail@plt+0x20cc>
   13590:	mov	r3, #0
   13594:	mov	r2, r3
   13598:	mov	r1, r5
   1359c:	mov	r0, r3
   135a0:	bl	14e98 <__assert_fail@plt+0x39b8>
   135a4:	cmp	r0, #0
   135a8:	blt	136d4 <__assert_fail@plt+0x21f4>
   135ac:	ldr	r2, [pc, #-176]	; 13504 <__assert_fail@plt+0x2024>
   135b0:	mov	r1, #0
   135b4:	mov	r0, #3
   135b8:	bl	11264 <__fxstat64@plt>
   135bc:	cmp	r0, #0
   135c0:	bne	13714 <__assert_fail@plt+0x2234>
   135c4:	ldr	r3, [sp, #72]	; 0x48
   135c8:	cmp	r3, #0
   135cc:	bne	13600 <__assert_fail@plt+0x2120>
   135d0:	ldr	r3, [pc, #-152]	; 13540 <__assert_fail@plt+0x2060>
   135d4:	ldr	r3, [r3, #104]	; 0x68
   135d8:	sub	r1, r3, #131072	; 0x20000
   135dc:	ldr	r2, [pc, #-220]	; 13508 <__assert_fail@plt+0x2028>
   135e0:	cmp	r1, r2
   135e4:	movhi	r3, #131072	; 0x20000
   135e8:	strhi	r3, [sp, #72]	; 0x48
   135ec:	bhi	13600 <__assert_fail@plt+0x2120>
   135f0:	sub	r2, r3, #1
   135f4:	cmn	r2, #-536870911	; 0xe0000001
   135f8:	movhi	r3, #512	; 0x200
   135fc:	str	r3, [sp, #72]	; 0x48
   13600:	ldr	r3, [sp, #72]	; 0x48
   13604:	add	r1, r3, #1
   13608:	ldr	r0, [sp, #56]	; 0x38
   1360c:	bl	175d8 <__assert_fail@plt+0x60f8>
   13610:	str	r0, [sp, #88]	; 0x58
   13614:	cmp	r4, #1
   13618:	bls	13744 <__assert_fail@plt+0x2264>
   1361c:	mvn	r8, #0
   13620:	mvn	r2, #0
   13624:	mvn	r3, #-2147483648	; 0x80000000
   13628:	strd	r2, [sp, #24]
   1362c:	ldr	r3, [pc, #-244]	; 13540 <__assert_fail@plt+0x2060>
   13630:	ldr	r3, [r3, #40]	; 0x28
   13634:	cmp	r3, #0
   13638:	beq	13680 <__assert_fail@plt+0x21a0>
   1363c:	ldr	r0, [pc, #-312]	; 1350c <__assert_fail@plt+0x202c>
   13640:	bl	11444 <sigemptyset@plt>
   13644:	add	r2, sp, #112	; 0x70
   13648:	mov	r1, #0
   1364c:	mov	r0, #13
   13650:	bl	11270 <sigaction@plt>
   13654:	ldr	r3, [sp, #112]	; 0x70
   13658:	cmp	r3, #1
   1365c:	beq	1366c <__assert_fail@plt+0x218c>
   13660:	mov	r1, #13
   13664:	ldr	r0, [pc, #-352]	; 1350c <__assert_fail@plt+0x202c>
   13668:	bl	11300 <sigaddset@plt>
   1366c:	ldr	r1, [pc, #-308]	; 13540 <__assert_fail@plt+0x2060>
   13670:	add	r2, r1, #160	; 0xa0
   13674:	add	r1, r1, #308	; 0x134
   13678:	mov	r0, #0
   1367c:	bl	11198 <sigprocmask@plt>
   13680:	sub	sl, sl, #1
   13684:	cmp	sl, #6
   13688:	ldrls	pc, [pc, sl, lsl #2]
   1368c:	b	149f4 <__assert_fail@plt+0x3514>
   13690:	andeq	r3, r1, r0, lsr #21
   13694:	andeq	r3, r1, r4, lsl #22
   13698:	muleq	r1, r8, r9
   1369c:	muleq	r1, r8, r9
   136a0:	andeq	r3, r1, ip, lsl #28
   136a4:	andeq	r4, r1, r8, lsl #1
   136a8:	strdeq	r4, [r1], -ip
   136ac:	mov	r2, #5
   136b0:	ldr	r1, [pc, #-424]	; 13510 <__assert_fail@plt+0x2030>
   136b4:	mov	r0, #0
   136b8:	bl	1121c <dcgettext@plt>
   136bc:	mov	r2, r0
   136c0:	mov	r1, #0
   136c4:	mov	r0, r1
   136c8:	bl	112d0 <error@plt>
   136cc:	mov	r0, #1
   136d0:	bl	12610 <__assert_fail@plt+0x1130>
   136d4:	bl	1139c <__errno_location@plt>
   136d8:	ldr	r4, [r0]
   136dc:	mov	r2, #5
   136e0:	ldr	r1, [pc, #-468]	; 13514 <__assert_fail@plt+0x2034>
   136e4:	mov	r0, #0
   136e8:	bl	1121c <dcgettext@plt>
   136ec:	mov	r5, r0
   136f0:	ldr	r3, [pc, #-440]	; 13540 <__assert_fail@plt+0x2060>
   136f4:	ldr	r1, [r3, #300]	; 0x12c
   136f8:	mov	r0, #4
   136fc:	bl	16a4c <__assert_fail@plt+0x556c>
   13700:	mov	r3, r0
   13704:	mov	r2, r5
   13708:	mov	r1, r4
   1370c:	mov	r0, #1
   13710:	bl	112d0 <error@plt>
   13714:	bl	1139c <__errno_location@plt>
   13718:	ldr	r4, [r0]
   1371c:	ldr	r3, [pc, #-484]	; 13540 <__assert_fail@plt+0x2060>
   13720:	ldr	r2, [r3, #300]	; 0x12c
   13724:	mov	r1, #3
   13728:	mov	r0, #0
   1372c:	bl	16b18 <__assert_fail@plt+0x5638>
   13730:	mov	r3, r0
   13734:	ldr	r2, [pc, #-500]	; 13548 <__assert_fail@plt+0x2068>
   13738:	mov	r1, r4
   1373c:	mov	r0, #1
   13740:	bl	112d0 <error@plt>
   13744:	ldr	r8, [sp, #72]	; 0x48
   13748:	mov	r3, #1
   1374c:	str	r3, [sp]
   13750:	mov	r2, #0
   13754:	mov	r3, #0
   13758:	mov	r0, #0
   1375c:	bl	11288 <lseek64@plt>
   13760:	mov	r2, r0
   13764:	mov	r3, r1
   13768:	strd	r2, [sp, #24]
   1376c:	cmp	r0, #0
   13770:	sbcs	r3, r3, #0
   13774:	blt	138e4 <__assert_fail@plt+0x2404>
   13778:	mov	r6, #0
   1377c:	mov	r7, #0
   13780:	mov	r9, #0
   13784:	mov	r4, r8
   13788:	mov	r5, #0
   1378c:	ldr	fp, [sp, #88]	; 0x58
   13790:	sub	r2, r8, r6
   13794:	add	r1, fp, r6
   13798:	mov	r0, r9
   1379c:	bl	16c94 <__assert_fail@plt+0x57b4>
   137a0:	cmp	r0, #0
   137a4:	beq	1389c <__assert_fail@plt+0x23bc>
   137a8:	cmn	r0, #1
   137ac:	beq	138f8 <__assert_fail@plt+0x2418>
   137b0:	adds	r6, r6, r0
   137b4:	adc	r7, r7, #0
   137b8:	cmp	r6, r4
   137bc:	sbcs	r3, r7, r5
   137c0:	blt	13790 <__assert_fail@plt+0x22b0>
   137c4:	ldr	r3, [pc, #-652]	; 13540 <__assert_fail@plt+0x2060>
   137c8:	ldrd	r4, [r3, #96]	; 0x60
   137cc:	orrs	r3, r4, r5
   137d0:	beq	1393c <__assert_fail@plt+0x245c>
   137d4:	ldrd	r8, [sp, #24]
   137d8:	adds	r8, r8, r6
   137dc:	adc	r9, r9, r7
   137e0:	ldr	r3, [pc, #-680]	; 13540 <__assert_fail@plt+0x2060>
   137e4:	ldr	r3, [r3, #64]	; 0x40
   137e8:	and	r2, r3, #53248	; 0xd000
   137ec:	cmp	r4, r8
   137f0:	sbcs	r3, r5, r9
   137f4:	movge	r3, #1
   137f8:	movlt	r3, #0
   137fc:	cmp	r2, #32768	; 0x8000
   13800:	movne	r3, #0
   13804:	andeq	r3, r3, #1
   13808:	cmp	r3, #0
   1380c:	bne	13878 <__assert_fail@plt+0x2398>
   13810:	mov	r3, #2
   13814:	str	r3, [sp]
   13818:	mov	r2, #0
   1381c:	mov	r3, #0
   13820:	mov	r0, #0
   13824:	bl	11288 <lseek64@plt>
   13828:	mov	r4, r0
   1382c:	mov	r5, r1
   13830:	cmp	r0, #0
   13834:	sbcs	r3, r1, #0
   13838:	blt	138f8 <__assert_fail@plt+0x2418>
   1383c:	cmp	r9, r1
   13840:	cmpeq	r8, r0
   13844:	beq	13878 <__assert_fail@plt+0x2398>
   13848:	mov	r0, #0
   1384c:	str	r0, [sp]
   13850:	mov	r2, r8
   13854:	mov	r3, r9
   13858:	bl	11288 <lseek64@plt>
   1385c:	cmp	r0, #0
   13860:	sbcs	r3, r1, #0
   13864:	blt	138f8 <__assert_fail@plt+0x2418>
   13868:	cmp	r4, r8
   1386c:	sbcs	r3, r5, r9
   13870:	movlt	r4, r8
   13874:	movlt	r5, r9
   13878:	subs	r4, r4, r8
   1387c:	sbc	r5, r5, r9
   13880:	adds	r6, r6, r4
   13884:	adc	r7, r7, r5
   13888:	mvn	r2, #0
   1388c:	mvn	r3, #-2147483648	; 0x80000000
   13890:	cmp	r7, r3
   13894:	cmpeq	r6, r2
   13898:	beq	1394c <__assert_fail@plt+0x246c>
   1389c:	cmp	r6, #0
   138a0:	sbcs	r3, r7, #0
   138a4:	blt	138f8 <__assert_fail@plt+0x2418>
   138a8:	ldr	r8, [sp, #72]	; 0x48
   138ac:	asr	r9, r8, #31
   138b0:	cmp	r6, r8
   138b4:	sbcs	r3, r7, r9
   138b8:	movlt	r8, r6
   138bc:	ldrd	r2, [sp, #32]
   138c0:	cmp	r2, #0
   138c4:	sbcs	r3, r3, #0
   138c8:	blt	1395c <__assert_fail@plt+0x247c>
   138cc:	strd	r6, [sp, #24]
   138d0:	ldrd	r2, [sp, #32]
   138d4:	cmp	r7, r3
   138d8:	cmpeq	r6, r2
   138dc:	strdcc	r2, [sp, #24]
   138e0:	b	1362c <__assert_fail@plt+0x214c>
   138e4:	bl	1139c <__errno_location@plt>
   138e8:	ldr	r3, [r0]
   138ec:	cmp	r3, #29
   138f0:	moveq	r3, #0
   138f4:	streq	r3, [r0]
   138f8:	bl	1139c <__errno_location@plt>
   138fc:	ldr	r4, [r0]
   13900:	mov	r2, #5
   13904:	ldr	r1, [pc, #-1012]	; 13518 <__assert_fail@plt+0x2038>
   13908:	mov	r0, #0
   1390c:	bl	1121c <dcgettext@plt>
   13910:	mov	r5, r0
   13914:	ldr	r3, [pc, #-988]	; 13540 <__assert_fail@plt+0x2060>
   13918:	ldr	r2, [r3, #300]	; 0x12c
   1391c:	mov	r1, #3
   13920:	mov	r0, #0
   13924:	bl	16b18 <__assert_fail@plt+0x5638>
   13928:	mov	r3, r0
   1392c:	mov	r2, r5
   13930:	mov	r1, r4
   13934:	mov	r0, #1
   13938:	bl	112d0 <error@plt>
   1393c:	bl	1139c <__errno_location@plt>
   13940:	mov	r3, #75	; 0x4b
   13944:	str	r3, [r0]
   13948:	b	138f8 <__assert_fail@plt+0x2418>
   1394c:	bl	1139c <__errno_location@plt>
   13950:	mov	r3, #75	; 0x4b
   13954:	str	r3, [r0]
   13958:	b	138f8 <__assert_fail@plt+0x2418>
   1395c:	mov	r2, #5
   13960:	ldr	r1, [pc, #-1100]	; 1351c <__assert_fail@plt+0x203c>
   13964:	mov	r0, #0
   13968:	bl	1121c <dcgettext@plt>
   1396c:	mov	r4, r0
   13970:	add	r2, sp, #112	; 0x70
   13974:	ldrd	r0, [sp, #32]
   13978:	bl	150c8 <__assert_fail@plt+0x3be8>
   1397c:	bl	16c80 <__assert_fail@plt+0x57a0>
   13980:	str	r0, [sp]
   13984:	mov	r3, r4
   13988:	ldr	r2, [pc, #-1136]	; 13520 <__assert_fail@plt+0x2040>
   1398c:	mov	r1, #75	; 0x4b
   13990:	mov	r0, #1
   13994:	bl	112d0 <error@plt>
   13998:	ldr	r3, [sp, #72]	; 0x48
   1399c:	str	r3, [sp, #40]	; 0x28
   139a0:	mov	r6, #0
   139a4:	mov	r7, #0
   139a8:	mov	sl, #1
   139ac:	ldr	r8, [pc, #-1128]	; 1354c <__assert_fail@plt+0x206c>
   139b0:	str	sl, [sp, #24]
   139b4:	ldrd	sl, [sp, #32]
   139b8:	b	13a18 <__assert_fail@plt+0x2538>
   139bc:	bl	1139c <__errno_location@plt>
   139c0:	ldr	r4, [r0]
   139c4:	ldr	r3, [pc, #-1164]	; 13540 <__assert_fail@plt+0x2060>
   139c8:	ldr	r2, [r3, #300]	; 0x12c
   139cc:	mov	r1, #3
   139d0:	mov	r0, #0
   139d4:	bl	16b18 <__assert_fail@plt+0x5638>
   139d8:	mov	r3, r0
   139dc:	ldr	r2, [pc, #-1180]	; 13548 <__assert_fail@plt+0x2068>
   139e0:	mov	r1, r4
   139e4:	mov	r0, #1
   139e8:	bl	112d0 <error@plt>
   139ec:	cmp	r5, r9
   139f0:	beq	13a0c <__assert_fail@plt+0x252c>
   139f4:	sub	r2, r5, r9
   139f8:	mov	r1, r9
   139fc:	ldr	r0, [sp, #24]
   13a00:	bl	12268 <__assert_fail@plt+0xd88>
   13a04:	mov	r3, #0
   13a08:	str	r3, [sp, #24]
   13a0c:	ldr	r3, [sp, #32]
   13a10:	cmp	r3, #0
   13a14:	beq	13ac4 <__assert_fail@plt+0x25e4>
   13a18:	ldr	r2, [sp, #40]	; 0x28
   13a1c:	ldr	r1, [sp, #88]	; 0x58
   13a20:	mov	r0, #0
   13a24:	bl	16c94 <__assert_fail@plt+0x57b4>
   13a28:	str	r0, [sp, #32]
   13a2c:	cmn	r0, #1
   13a30:	beq	139bc <__assert_fail@plt+0x24dc>
   13a34:	ldr	r4, [sp, #88]	; 0x58
   13a38:	ldr	r2, [sp, #32]
   13a3c:	add	r5, r4, r2
   13a40:	ldr	r3, [r8, #12]
   13a44:	strb	r3, [r4, r2]
   13a48:	mov	r9, r4
   13a4c:	ldr	r1, [r8, #12]
   13a50:	mov	r0, r4
   13a54:	bl	1124c <rawmemchr@plt>
   13a58:	cmp	r5, r0
   13a5c:	beq	139ec <__assert_fail@plt+0x250c>
   13a60:	add	r4, r0, #1
   13a64:	adds	r6, r6, #1
   13a68:	adc	r7, r7, #0
   13a6c:	cmp	r7, fp
   13a70:	cmpeq	r6, sl
   13a74:	bcc	13a4c <__assert_fail@plt+0x256c>
   13a78:	sub	r2, r4, r9
   13a7c:	mov	r1, r9
   13a80:	ldr	r0, [sp, #24]
   13a84:	bl	12268 <__assert_fail@plt+0xd88>
   13a88:	mov	r9, r4
   13a8c:	mov	r6, #0
   13a90:	mov	r7, #0
   13a94:	mov	r3, #1
   13a98:	str	r3, [sp, #24]
   13a9c:	b	13a4c <__assert_fail@plt+0x256c>
   13aa0:	mov	r2, #0
   13aa4:	mov	r3, #0
   13aa8:	strd	r2, [sp, #8]
   13aac:	mvn	r3, #0
   13ab0:	str	r3, [sp]
   13ab4:	ldr	r3, [sp, #72]	; 0x48
   13ab8:	ldr	r2, [sp, #88]	; 0x58
   13abc:	ldrd	r0, [sp, #32]
   13ac0:	bl	12380 <__assert_fail@plt+0xea0>
   13ac4:	mov	r0, #0
   13ac8:	bl	114c8 <close@plt>
   13acc:	cmp	r0, #0
   13ad0:	beq	149f8 <__assert_fail@plt+0x3518>
   13ad4:	bl	1139c <__errno_location@plt>
   13ad8:	ldr	r4, [r0]
   13adc:	ldr	r3, [pc, #-1444]	; 13540 <__assert_fail@plt+0x2060>
   13ae0:	ldr	r2, [r3, #300]	; 0x12c
   13ae4:	mov	r1, #3
   13ae8:	mov	r0, #0
   13aec:	bl	16b18 <__assert_fail@plt+0x5638>
   13af0:	mov	r3, r0
   13af4:	ldr	r2, [pc, #-1460]	; 13548 <__assert_fail@plt+0x2068>
   13af8:	mov	r1, r4
   13afc:	mov	r0, #1
   13b00:	bl	112d0 <error@plt>
   13b04:	ldr	r3, [sp, #72]	; 0x48
   13b08:	str	r3, [sp, #64]	; 0x40
   13b0c:	mov	fp, #0
   13b10:	str	fp, [sp, #52]	; 0x34
   13b14:	str	fp, [sp, #72]	; 0x48
   13b18:	str	fp, [sp, #40]	; 0x28
   13b1c:	mov	r8, #0
   13b20:	mov	r9, #0
   13b24:	mov	r6, fp
   13b28:	ldr	r2, [sp, #64]	; 0x40
   13b2c:	ldr	r1, [sp, #88]	; 0x58
   13b30:	mov	r0, #0
   13b34:	bl	16c94 <__assert_fail@plt+0x57b4>
   13b38:	mov	r7, r0
   13b3c:	cmn	r0, #1
   13b40:	beq	13b60 <__assert_fail@plt+0x2680>
   13b44:	cmp	r0, #0
   13b48:	beq	14b7c <__assert_fail@plt+0x369c>
   13b4c:	ldr	r5, [sp, #88]	; 0x58
   13b50:	ldr	r3, [sp, #64]	; 0x40
   13b54:	mvn	r3, r3
   13b58:	str	r3, [sp, #76]	; 0x4c
   13b5c:	b	13cd8 <__assert_fail@plt+0x27f8>
   13b60:	bl	1139c <__errno_location@plt>
   13b64:	ldr	r4, [r0]
   13b68:	ldr	r3, [pc, #-1584]	; 13540 <__assert_fail@plt+0x2060>
   13b6c:	ldr	r2, [r3, #300]	; 0x12c
   13b70:	mov	r1, #3
   13b74:	mov	r0, #0
   13b78:	bl	16b18 <__assert_fail@plt+0x5638>
   13b7c:	mov	r3, r0
   13b80:	ldr	r2, [pc, #-1600]	; 13548 <__assert_fail@plt+0x2068>
   13b84:	mov	r1, r4
   13b88:	mov	r0, #1
   13b8c:	bl	112d0 <error@plt>
   13b90:	mov	r2, r7
   13b94:	ldr	r3, [pc, #-1616]	; 1354c <__assert_fail@plt+0x206c>
   13b98:	ldr	r1, [r3, #12]
   13b9c:	mov	r0, r5
   13ba0:	bl	11384 <memrchr@plt>
   13ba4:	mov	sl, r0
   13ba8:	mov	fp, #0
   13bac:	mov	r4, fp
   13bb0:	b	13d48 <__assert_fail@plt+0x2868>
   13bb4:	mov	r2, r6
   13bb8:	ldr	r1, [sp, #40]	; 0x28
   13bbc:	bl	12268 <__assert_fail@plt+0xd88>
   13bc0:	ldrd	r2, [sp, #56]	; 0x38
   13bc4:	adds	r2, r2, r8
   13bc8:	adc	r3, r3, r9
   13bcc:	mov	r8, r2
   13bd0:	mov	r9, r3
   13bd4:	ldr	r3, [sp, #64]	; 0x40
   13bd8:	cmp	r6, r3
   13bdc:	ldrls	r3, [sp, #64]	; 0x40
   13be0:	strls	r3, [sp, #72]	; 0x48
   13be4:	movls	r6, #0
   13be8:	bls	13d70 <__assert_fail@plt+0x2890>
   13bec:	mov	r6, r3
   13bf0:	mov	r1, r3
   13bf4:	ldr	r0, [sp, #40]	; 0x28
   13bf8:	bl	17620 <__assert_fail@plt+0x6140>
   13bfc:	str	r0, [sp, #40]	; 0x28
   13c00:	str	r6, [sp, #72]	; 0x48
   13c04:	mov	r6, #0
   13c08:	b	13d70 <__assert_fail@plt+0x2890>
   13c0c:	ldr	r3, [sp, #52]	; 0x34
   13c10:	eor	sl, r3, #1
   13c14:	cmp	r7, #0
   13c18:	moveq	sl, #0
   13c1c:	andne	sl, sl, #1
   13c20:	cmp	sl, #0
   13c24:	beq	13dbc <__assert_fail@plt+0x28dc>
   13c28:	cmp	fp, #0
   13c2c:	beq	14b3c <__assert_fail@plt+0x365c>
   13c30:	orrs	r3, r8, r9
   13c34:	mov	r2, r4
   13c38:	mov	r1, r5
   13c3c:	moveq	r0, #1
   13c40:	movne	r0, #0
   13c44:	bl	12268 <__assert_fail@plt+0xd88>
   13c48:	adds	r8, r8, r4
   13c4c:	adc	r9, r9, #0
   13c50:	sub	r7, r7, r4
   13c54:	add	r5, r5, r4
   13c58:	b	13cbc <__assert_fail@plt+0x27dc>
   13c5c:	cmp	sl, #0
   13c60:	moveq	r4, r7
   13c64:	ldr	r2, [sp, #72]	; 0x48
   13c68:	sub	r3, r2, r6
   13c6c:	cmp	r3, r4
   13c70:	bcs	13c9c <__assert_fail@plt+0x27bc>
   13c74:	mov	r3, r2
   13c78:	ldr	r2, [sp, #76]	; 0x4c
   13c7c:	cmp	r3, r2
   13c80:	bhi	13dec <__assert_fail@plt+0x290c>
   13c84:	ldr	r2, [sp, #64]	; 0x40
   13c88:	add	r1, r3, r2
   13c8c:	str	r1, [sp, #72]	; 0x48
   13c90:	ldr	r0, [sp, #40]	; 0x28
   13c94:	bl	17620 <__assert_fail@plt+0x6140>
   13c98:	str	r0, [sp, #40]	; 0x28
   13c9c:	mov	r2, r4
   13ca0:	mov	r1, r5
   13ca4:	ldr	r3, [sp, #40]	; 0x28
   13ca8:	add	r0, r3, r6
   13cac:	bl	111c8 <memcpy@plt>
   13cb0:	add	r6, r6, r4
   13cb4:	sub	r7, r7, r4
   13cb8:	add	r5, r5, r4
   13cbc:	cmp	sl, #0
   13cc0:	movne	r3, #0
   13cc4:	strne	r3, [sp, #52]	; 0x34
   13cc8:	movne	r8, #0
   13ccc:	movne	r9, #0
   13cd0:	cmp	r7, #0
   13cd4:	beq	13b28 <__assert_fail@plt+0x2648>
   13cd8:	mov	r3, #0
   13cdc:	mov	r0, r6
   13ce0:	mov	r1, r3
   13ce4:	strd	r0, [sp, #56]	; 0x38
   13ce8:	mov	r2, r7
   13cec:	mov	r3, #0
   13cf0:	strd	r2, [sp, #24]
   13cf4:	ldrd	sl, [sp, #32]
   13cf8:	subs	r2, sl, r8
   13cfc:	sbc	r3, fp, r9
   13d00:	subs	r0, r2, r6
   13d04:	sbc	r1, r3, r1
   13d08:	mov	r2, r0
   13d0c:	mov	r3, r1
   13d10:	ldrd	r0, [sp, #24]
   13d14:	cmp	r3, r1
   13d18:	cmpeq	r2, r0
   13d1c:	bhi	13b90 <__assert_fail@plt+0x26b0>
   13d20:	sub	r4, sl, r8
   13d24:	sub	r4, r4, r6
   13d28:	sub	fp, r4, #1
   13d2c:	add	fp, r5, fp
   13d30:	mov	r2, r4
   13d34:	ldr	r3, [pc, #-2032]	; 1354c <__assert_fail@plt+0x206c>
   13d38:	ldr	r1, [r3, #12]
   13d3c:	mov	r0, r5
   13d40:	bl	11384 <memrchr@plt>
   13d44:	mov	sl, r0
   13d48:	cmp	r6, #0
   13d4c:	beq	13d70 <__assert_fail@plt+0x2890>
   13d50:	orrs	r3, r8, r9
   13d54:	moveq	r0, #1
   13d58:	movne	r0, #0
   13d5c:	cmp	sl, #0
   13d60:	moveq	r3, r0
   13d64:	orrne	r3, r0, #1
   13d68:	cmp	r3, #0
   13d6c:	bne	13bb4 <__assert_fail@plt+0x26d4>
   13d70:	cmp	sl, #0
   13d74:	beq	13c0c <__assert_fail@plt+0x272c>
   13d78:	sub	sl, sl, r5
   13d7c:	add	sl, sl, #1
   13d80:	orrs	r3, r8, r9
   13d84:	mov	r2, sl
   13d88:	mov	r1, r5
   13d8c:	moveq	r0, #1
   13d90:	movne	r0, #0
   13d94:	bl	12268 <__assert_fail@plt+0xd88>
   13d98:	adds	r8, r8, sl
   13d9c:	adc	r9, r9, #0
   13da0:	sub	r7, r7, sl
   13da4:	add	r5, r5, sl
   13da8:	cmp	fp, #0
   13dac:	beq	14bac <__assert_fail@plt+0x36cc>
   13db0:	sub	r4, r4, sl
   13db4:	mov	r3, #1
   13db8:	str	r3, [sp, #52]	; 0x34
   13dbc:	adds	sl, fp, #0
   13dc0:	movne	sl, #1
   13dc4:	cmp	r4, #0
   13dc8:	cmpne	fp, #0
   13dcc:	bne	13c5c <__assert_fail@plt+0x277c>
   13dd0:	clz	fp, fp
   13dd4:	lsr	fp, fp, #5
   13dd8:	cmp	r7, #0
   13ddc:	moveq	fp, #0
   13de0:	cmp	fp, #0
   13de4:	bne	13c5c <__assert_fail@plt+0x277c>
   13de8:	b	13cbc <__assert_fail@plt+0x27dc>
   13dec:	bl	17b90 <__assert_fail@plt+0x66b0>
   13df0:	orrs	r3, r8, r9
   13df4:	mov	r2, fp
   13df8:	ldr	r1, [sp, #40]	; 0x28
   13dfc:	moveq	r0, #1
   13e00:	movne	r0, #0
   13e04:	bl	12268 <__assert_fail@plt+0xd88>
   13e08:	b	14b88 <__assert_fail@plt+0x36a8>
   13e0c:	ldrd	r2, [sp, #40]	; 0x28
   13e10:	orrs	r3, r2, r3
   13e14:	bne	13e4c <__assert_fail@plt+0x296c>
   13e18:	ldrd	r4, [sp, #32]
   13e1c:	mov	r2, r4
   13e20:	mov	r3, r5
   13e24:	ldrd	r0, [sp, #24]
   13e28:	bl	18c88 <__assert_fail@plt+0x77a8>
   13e2c:	mov	r2, r4
   13e30:	mov	r3, r5
   13e34:	strd	r2, [sp, #8]
   13e38:	str	r8, [sp]
   13e3c:	ldr	r3, [sp, #72]	; 0x48
   13e40:	ldr	r2, [sp, #88]	; 0x58
   13e44:	bl	12380 <__assert_fail@plt+0xea0>
   13e48:	b	13ac4 <__assert_fail@plt+0x25e4>
   13e4c:	ldrd	r4, [sp, #40]	; 0x28
   13e50:	ldrd	r0, [sp, #32]
   13e54:	mov	r3, r1
   13e58:	cmp	r5, r1
   13e5c:	cmpeq	r4, r0
   13e60:	movls	r3, #1
   13e64:	movhi	r3, #0
   13e68:	ldrd	r4, [sp, #24]
   13e6c:	cmp	r5, r1
   13e70:	cmpeq	r4, r0
   13e74:	movcc	r3, #0
   13e78:	andcs	r3, r3, #1
   13e7c:	cmp	r3, #0
   13e80:	beq	13f24 <__assert_fail@plt+0x2a44>
   13e84:	ldrd	sl, [sp, #32]
   13e88:	mov	r2, sl
   13e8c:	mov	r3, fp
   13e90:	ldrd	r0, [sp, #24]
   13e94:	bl	18c88 <__assert_fail@plt+0x77a8>
   13e98:	ldrd	r6, [sp, #40]	; 0x28
   13e9c:	subs	r6, r6, #1
   13ea0:	sbc	r7, r7, #0
   13ea4:	mul	r3, r6, r1
   13ea8:	mla	r3, r0, r7, r3
   13eac:	umull	r6, r7, r6, r0
   13eb0:	add	r7, r3, r7
   13eb4:	mov	r4, r6
   13eb8:	mov	r5, r7
   13ebc:	ldrd	r2, [sp, #40]	; 0x28
   13ec0:	cmp	r3, fp
   13ec4:	cmpeq	r2, sl
   13ec8:	beq	13ee8 <__assert_fail@plt+0x2a08>
   13ecc:	mov	sl, r2
   13ed0:	mul	r3, r0, r3
   13ed4:	mla	r1, sl, r1, r3
   13ed8:	umull	r2, r3, r0, sl
   13edc:	strd	r2, [sp, #24]
   13ee0:	add	r3, r1, r3
   13ee4:	str	r3, [sp, #28]
   13ee8:	mov	r3, #0
   13eec:	cmp	r4, r8
   13ef0:	sbcs	r1, r5, r3
   13ef4:	bge	13f38 <__assert_fail@plt+0x2a58>
   13ef8:	sub	r8, r8, r6
   13efc:	mov	r2, r8
   13f00:	ldr	r0, [sp, #88]	; 0x58
   13f04:	add	r1, r0, r6
   13f08:	bl	111a4 <memmove@plt>
   13f0c:	mov	sl, #0
   13f10:	ldr	r9, [pc, #-2520]	; 13540 <__assert_fail@plt+0x2060>
   13f14:	mvn	r7, #0
   13f18:	ldr	fp, [sp, #72]	; 0x48
   13f1c:	mov	r2, r8
   13f20:	b	13fe8 <__assert_fail@plt+0x2b08>
   13f24:	ldr	r3, [pc, #-2568]	; 13524 <__assert_fail@plt+0x2044>
   13f28:	mov	r2, #996	; 0x3e4
   13f2c:	ldr	r1, [pc, #-2552]	; 1353c <__assert_fail@plt+0x205c>
   13f30:	ldr	r0, [pc, #-2576]	; 13528 <__assert_fail@plt+0x2048>
   13f34:	bl	114e0 <__assert_fail@plt>
   13f38:	mov	r1, #1
   13f3c:	str	r1, [sp]
   13f40:	subs	r2, r4, r8
   13f44:	sbc	r3, r5, r3
   13f48:	mov	r0, #0
   13f4c:	bl	11288 <lseek64@plt>
   13f50:	cmp	r0, #0
   13f54:	sbcs	r3, r1, #0
   13f58:	mvnge	r8, #0
   13f5c:	bge	13f0c <__assert_fail@plt+0x2a2c>
   13f60:	bl	1139c <__errno_location@plt>
   13f64:	ldr	r4, [r0]
   13f68:	ldr	r3, [pc, #-2608]	; 13540 <__assert_fail@plt+0x2060>
   13f6c:	ldr	r2, [r3, #300]	; 0x12c
   13f70:	mov	r1, #3
   13f74:	mov	r0, #0
   13f78:	bl	16b18 <__assert_fail@plt+0x5638>
   13f7c:	mov	r3, r0
   13f80:	ldr	r2, [pc, #-2624]	; 13548 <__assert_fail@plt+0x2068>
   13f84:	mov	r1, r4
   13f88:	mov	r0, #1
   13f8c:	bl	112d0 <error@plt>
   13f90:	mov	r2, fp
   13f94:	ldr	r1, [sp, #88]	; 0x58
   13f98:	mov	r0, sl
   13f9c:	bl	16c94 <__assert_fail@plt+0x57b4>
   13fa0:	mov	r2, r0
   13fa4:	cmn	r0, #1
   13fa8:	bne	14000 <__assert_fail@plt+0x2b20>
   13fac:	bl	1139c <__errno_location@plt>
   13fb0:	ldr	r4, [r0]
   13fb4:	ldr	r3, [pc, #-2684]	; 13540 <__assert_fail@plt+0x2060>
   13fb8:	ldr	r2, [r3, #300]	; 0x12c
   13fbc:	mov	r1, #3
   13fc0:	mov	r0, #0
   13fc4:	bl	16b18 <__assert_fail@plt+0x5638>
   13fc8:	mov	r3, r0
   13fcc:	ldr	r2, [pc, #-2700]	; 13548 <__assert_fail@plt+0x2068>
   13fd0:	mov	r1, r4
   13fd4:	mov	r0, #1
   13fd8:	bl	112d0 <error@plt>
   13fdc:	adds	r4, r4, r6
   13fe0:	adc	r5, r5, #0
   13fe4:	mov	r2, r7
   13fe8:	ldrd	r0, [sp, #24]
   13fec:	cmp	r4, r0
   13ff0:	sbcs	r3, r5, r1
   13ff4:	bge	13ac4 <__assert_fail@plt+0x25e4>
   13ff8:	cmn	r2, #1
   13ffc:	beq	13f90 <__assert_fail@plt+0x2ab0>
   14000:	cmp	r2, #0
   14004:	beq	13ac4 <__assert_fail@plt+0x25e4>
   14008:	ldrd	r0, [sp, #24]
   1400c:	subs	r0, r0, r4
   14010:	sbc	r1, r1, r5
   14014:	mov	r3, #0
   14018:	mov	r6, r0
   1401c:	cmp	r2, r0
   14020:	sbcs	r1, r3, r1
   14024:	movlt	r6, r2
   14028:	mov	r2, r6
   1402c:	ldr	r1, [sp, #88]	; 0x58
   14030:	mov	r0, #1
   14034:	bl	15060 <__assert_fail@plt+0x3b80>
   14038:	cmp	r0, r6
   1403c:	beq	13fdc <__assert_fail@plt+0x2afc>
   14040:	bl	1139c <__errno_location@plt>
   14044:	ldr	r8, [r0]
   14048:	ldr	r3, [r9, #40]	; 0x28
   1404c:	adds	r3, r3, #0
   14050:	movne	r3, #1
   14054:	cmp	r8, #32
   14058:	movne	r3, #0
   1405c:	cmp	r3, #0
   14060:	bne	13fdc <__assert_fail@plt+0x2afc>
   14064:	ldr	r2, [pc, #-2880]	; 1352c <__assert_fail@plt+0x204c>
   14068:	mov	r1, #3
   1406c:	mov	r0, #0
   14070:	bl	16b18 <__assert_fail@plt+0x5638>
   14074:	mov	r3, r0
   14078:	ldr	r2, [pc, #-2872]	; 13548 <__assert_fail@plt+0x2068>
   1407c:	mov	r1, r8
   14080:	mov	r0, #1
   14084:	bl	112d0 <error@plt>
   14088:	ldr	r3, [sp, #72]	; 0x48
   1408c:	str	r3, [sp, #108]	; 0x6c
   14090:	ldrd	r0, [sp, #40]	; 0x28
   14094:	ldrd	r2, [sp, #32]
   14098:	cmp	r1, r3
   1409c:	cmpeq	r0, r2
   140a0:	bhi	141c0 <__assert_fail@plt+0x2ce0>
   140a4:	ldrd	r0, [sp, #24]
   140a8:	cmp	r1, r3
   140ac:	cmpeq	r0, r2
   140b0:	bcc	141c0 <__assert_fail@plt+0x2ce0>
   140b4:	ldrd	r2, [sp, #32]
   140b8:	ldrd	r0, [sp, #24]
   140bc:	bl	18c88 <__assert_fail@plt+0x77a8>
   140c0:	str	r0, [sp, #56]	; 0x38
   140c4:	str	r1, [sp, #60]	; 0x3c
   140c8:	ldrd	r2, [sp, #40]	; 0x28
   140cc:	cmp	r3, #0
   140d0:	cmpeq	r2, #1
   140d4:	bls	14480 <__assert_fail@plt+0x2fa0>
   140d8:	subs	r2, r2, #1
   140dc:	sbc	r3, r3, #0
   140e0:	mov	sl, r2
   140e4:	mov	fp, r3
   140e8:	mul	r3, r0, r3
   140ec:	mla	r1, r2, r1, r3
   140f0:	umull	r4, r5, r0, r2
   140f4:	add	r5, r1, r5
   140f8:	subs	r4, r4, #1
   140fc:	sbc	r5, r5, #0
   14100:	mov	r6, r4
   14104:	mov	r7, r5
   14108:	mov	r3, #0
   1410c:	cmp	r4, r8
   14110:	sbcs	r1, r5, r3
   14114:	bge	141d4 <__assert_fail@plt+0x2cf4>
   14118:	sub	r8, r8, r4
   1411c:	mov	r2, r8
   14120:	ldr	r0, [sp, #88]	; 0x58
   14124:	add	r1, r0, r4
   14128:	bl	111a4 <memmove@plt>
   1412c:	strd	r4, [sp, #80]	; 0x50
   14130:	mov	r3, #0
   14134:	str	r3, [sp, #100]	; 0x64
   14138:	mov	r3, #1
   1413c:	str	r3, [sp, #52]	; 0x34
   14140:	ldrd	r2, [sp, #40]	; 0x28
   14144:	orr	r9, r2, r3
   14148:	mov	r0, r8
   1414c:	str	r9, [sp, #72]	; 0x48
   14150:	ldrd	r2, [sp, #80]	; 0x50
   14154:	ldrd	r4, [sp, #24]
   14158:	cmp	r2, r4
   1415c:	sbcs	r3, r3, r5
   14160:	bge	144a4 <__assert_fail@plt+0x2fc4>
   14164:	cmn	r0, #1
   14168:	beq	14230 <__assert_fail@plt+0x2d50>
   1416c:	cmp	r0, #0
   14170:	beq	144a4 <__assert_fail@plt+0x2fc4>
   14174:	ldrd	r8, [sp, #24]
   14178:	ldrd	r2, [sp, #80]	; 0x50
   1417c:	subs	r8, r8, r2
   14180:	sbc	r9, r9, r3
   14184:	mov	r2, r0
   14188:	mov	r3, #0
   1418c:	mov	r1, r8
   14190:	cmp	r0, r8
   14194:	sbcs	r0, r3, r9
   14198:	movlt	r1, r2
   1419c:	str	r1, [sp, #92]	; 0x5c
   141a0:	ldr	r9, [sp, #88]	; 0x58
   141a4:	add	r3, r9, r1
   141a8:	str	r3, [sp, #76]	; 0x4c
   141ac:	mov	r3, #0
   141b0:	str	r3, [sp, #100]	; 0x64
   141b4:	mov	r4, r9
   141b8:	ldrd	r8, [sp, #40]	; 0x28
   141bc:	b	14314 <__assert_fail@plt+0x2e34>
   141c0:	ldr	r3, [pc, #-3224]	; 13530 <__assert_fail@plt+0x2050>
   141c4:	ldr	r2, [pc, #-3224]	; 13534 <__assert_fail@plt+0x2054>
   141c8:	ldr	r1, [pc, #-3220]	; 1353c <__assert_fail@plt+0x205c>
   141cc:	ldr	r0, [pc, #-3228]	; 13538 <__assert_fail@plt+0x2058>
   141d0:	bl	114e0 <__assert_fail@plt>
   141d4:	mov	r1, #1
   141d8:	str	r1, [sp]
   141dc:	subs	r2, r4, r8
   141e0:	sbc	r3, r5, r3
   141e4:	mov	r0, #0
   141e8:	bl	11288 <lseek64@plt>
   141ec:	cmp	r0, #0
   141f0:	sbcs	r3, r1, #0
   141f4:	strdge	r4, [sp, #80]	; 0x50
   141f8:	mvnge	r8, #0
   141fc:	bge	14130 <__assert_fail@plt+0x2c50>
   14200:	bl	1139c <__errno_location@plt>
   14204:	ldr	r4, [r0]
   14208:	ldr	r3, [pc, #-3280]	; 13540 <__assert_fail@plt+0x2060>
   1420c:	ldr	r2, [r3, #300]	; 0x12c
   14210:	mov	r1, #3
   14214:	mov	r0, #0
   14218:	bl	16b18 <__assert_fail@plt+0x5638>
   1421c:	mov	r3, r0
   14220:	ldr	r2, [pc, #-3296]	; 13548 <__assert_fail@plt+0x2068>
   14224:	mov	r1, r4
   14228:	mov	r0, #1
   1422c:	bl	112d0 <error@plt>
   14230:	ldr	r2, [sp, #108]	; 0x6c
   14234:	ldr	r1, [sp, #88]	; 0x58
   14238:	mov	r0, #0
   1423c:	bl	16c94 <__assert_fail@plt+0x57b4>
   14240:	cmn	r0, #1
   14244:	bne	1416c <__assert_fail@plt+0x2c8c>
   14248:	bl	1139c <__errno_location@plt>
   1424c:	ldr	r4, [r0]
   14250:	ldr	r3, [pc, #-3352]	; 13540 <__assert_fail@plt+0x2060>
   14254:	ldr	r2, [r3, #300]	; 0x12c
   14258:	mov	r1, #3
   1425c:	mov	r0, #0
   14260:	bl	16b18 <__assert_fail@plt+0x5638>
   14264:	mov	r3, r0
   14268:	ldr	r2, [pc, #-3368]	; 13548 <__assert_fail@plt+0x2068>
   1426c:	mov	r1, r4
   14270:	mov	r0, #1
   14274:	bl	112d0 <error@plt>
   14278:	mov	r2, #0
   1427c:	mov	r3, r2
   14280:	b	1433c <__assert_fail@plt+0x2e5c>
   14284:	mov	r5, r3
   14288:	mov	r2, r3
   1428c:	mov	r1, r4
   14290:	mov	r0, #1
   14294:	bl	15060 <__assert_fail@plt+0x3b80>
   14298:	cmp	r5, r0
   1429c:	beq	143ac <__assert_fail@plt+0x2ecc>
   142a0:	bl	1139c <__errno_location@plt>
   142a4:	ldr	r4, [r0]
   142a8:	mov	r2, #5
   142ac:	ldr	r1, [pc, #-3440]	; 13544 <__assert_fail@plt+0x2064>
   142b0:	mov	r0, #0
   142b4:	bl	1121c <dcgettext@plt>
   142b8:	mov	r3, r0
   142bc:	ldr	r2, [pc, #-3452]	; 13548 <__assert_fail@plt+0x2068>
   142c0:	mov	r1, r4
   142c4:	mov	r0, #1
   142c8:	bl	112d0 <error@plt>
   142cc:	ldr	r2, [sp, #96]	; 0x60
   142d0:	mov	r1, r4
   142d4:	ldr	r0, [sp, #52]	; 0x34
   142d8:	bl	12268 <__assert_fail@plt+0xd88>
   142dc:	b	143ac <__assert_fail@plt+0x2ecc>
   142e0:	ldrd	r6, [sp, #24]
   142e4:	subs	r6, r6, #1
   142e8:	sbc	r7, r7, #0
   142ec:	b	14454 <__assert_fail@plt+0x2f74>
   142f0:	mov	r3, #1
   142f4:	str	r3, [sp, #100]	; 0x64
   142f8:	ldr	r3, [sp, #92]	; 0x5c
   142fc:	ldr	r2, [sp, #96]	; 0x60
   14300:	sub	r3, r3, r2
   14304:	str	r3, [sp, #92]	; 0x5c
   14308:	ldr	r4, [sp, #64]	; 0x40
   1430c:	ldr	r3, [sp, #104]	; 0x68
   14310:	str	r3, [sp, #52]	; 0x34
   14314:	mvn	r0, #0
   14318:	ldr	r3, [sp, #76]	; 0x4c
   1431c:	cmp	r3, r4
   14320:	beq	14150 <__assert_fail@plt+0x2c70>
   14324:	ldrd	r2, [sp, #80]	; 0x50
   14328:	subs	r2, r6, r2
   1432c:	sbc	r3, r7, r3
   14330:	cmp	r2, #0
   14334:	sbcs	r1, r3, #0
   14338:	blt	14278 <__assert_fail@plt+0x2d98>
   1433c:	ldr	r0, [sp, #92]	; 0x5c
   14340:	mov	r1, #0
   14344:	mov	ip, r2
   14348:	cmp	r0, r2
   1434c:	sbcs	r3, r1, r3
   14350:	movlt	ip, r0
   14354:	ldr	r3, [sp, #92]	; 0x5c
   14358:	sub	r2, r3, ip
   1435c:	ldr	r3, [pc, #-3608]	; 1354c <__assert_fail@plt+0x206c>
   14360:	ldr	r1, [r3, #12]
   14364:	add	r0, r4, ip
   14368:	bl	113fc <memchr@plt>
   1436c:	cmp	r0, #0
   14370:	addne	r3, r0, #1
   14374:	strne	r3, [sp, #64]	; 0x40
   14378:	movne	r3, #1
   1437c:	ldreq	r3, [sp, #76]	; 0x4c
   14380:	streq	r3, [sp, #64]	; 0x40
   14384:	moveq	r3, #0
   14388:	str	r3, [sp, #104]	; 0x68
   1438c:	ldr	r3, [sp, #64]	; 0x40
   14390:	sub	r3, r3, r4
   14394:	str	r3, [sp, #96]	; 0x60
   14398:	cmp	fp, r9
   1439c:	cmpeq	sl, r8
   143a0:	beq	14284 <__assert_fail@plt+0x2da4>
   143a4:	orrs	r3, r8, r9
   143a8:	beq	142cc <__assert_fail@plt+0x2dec>
   143ac:	ldrd	r2, [sp, #80]	; 0x50
   143b0:	ldr	r1, [sp, #96]	; 0x60
   143b4:	adds	r2, r2, r1
   143b8:	adc	r3, r3, #0
   143bc:	strd	r2, [sp, #80]	; 0x50
   143c0:	ldr	r1, [sp, #104]	; 0x68
   143c4:	str	r1, [sp, #52]	; 0x34
   143c8:	subs	r2, r2, #1
   143cc:	sbc	r3, r3, #0
   143d0:	mov	r4, r2
   143d4:	mov	r5, r3
   143d8:	ldr	r3, [sp, #52]	; 0x34
   143dc:	cmp	r3, #0
   143e0:	bne	14400 <__assert_fail@plt+0x2f20>
   143e4:	cmp	r4, r6
   143e8:	sbcs	r3, r5, r7
   143ec:	blt	142f8 <__assert_fail@plt+0x2e18>
   143f0:	ldr	r3, [sp, #76]	; 0x4c
   143f4:	ldr	r2, [sp, #64]	; 0x40
   143f8:	cmp	r3, r2
   143fc:	beq	142f0 <__assert_fail@plt+0x2e10>
   14400:	adds	sl, sl, #1
   14404:	adc	fp, fp, #0
   14408:	cmp	fp, r9
   1440c:	cmpeq	sl, r8
   14410:	movhi	r3, #1
   14414:	movls	r3, #0
   14418:	ldr	r2, [sp, #72]	; 0x48
   1441c:	cmp	r2, #0
   14420:	moveq	r3, #0
   14424:	andne	r3, r3, #1
   14428:	cmp	r3, #0
   1442c:	bne	13ac4 <__assert_fail@plt+0x25e4>
   14430:	ldrd	r0, [sp, #32]
   14434:	cmp	fp, r1
   14438:	cmpeq	sl, r0
   1443c:	beq	142e0 <__assert_fail@plt+0x2e00>
   14440:	ldrd	r0, [sp, #56]	; 0x38
   14444:	adds	r0, r0, r6
   14448:	adc	r1, r1, r7
   1444c:	mov	r6, r0
   14450:	mov	r7, r1
   14454:	cmp	r4, r6
   14458:	sbcs	r2, r5, r7
   1445c:	strlt	r3, [sp, #52]	; 0x34
   14460:	blt	143d8 <__assert_fail@plt+0x2ef8>
   14464:	orrs	r3, r8, r9
   14468:	bne	143d8 <__assert_fail@plt+0x2ef8>
   1446c:	mov	r2, #0
   14470:	mov	r1, r2
   14474:	mov	r0, #1
   14478:	bl	12268 <__assert_fail@plt+0xd88>
   1447c:	b	143d8 <__assert_fail@plt+0x2ef8>
   14480:	ldrd	r6, [sp, #56]	; 0x38
   14484:	subs	r6, r6, #1
   14488:	sbc	r7, r7, #0
   1448c:	mov	r2, #0
   14490:	mov	r3, #0
   14494:	strd	r2, [sp, #80]	; 0x50
   14498:	mov	sl, #1
   1449c:	mov	fp, #0
   144a0:	b	14130 <__assert_fail@plt+0x2c50>
   144a4:	ldr	r3, [sp, #100]	; 0x64
   144a8:	cmp	r3, #0
   144ac:	beq	144b8 <__assert_fail@plt+0x2fd8>
   144b0:	adds	sl, sl, #1
   144b4:	adc	fp, fp, #0
   144b8:	mov	r5, #0
   144bc:	mov	r4, #1
   144c0:	b	144dc <__assert_fail@plt+0x2ffc>
   144c4:	mov	r2, r5
   144c8:	mov	r1, r5
   144cc:	mov	r0, r4
   144d0:	bl	12268 <__assert_fail@plt+0xd88>
   144d4:	adds	sl, sl, #1
   144d8:	adc	fp, fp, #0
   144dc:	ldrd	r2, [sp, #40]	; 0x28
   144e0:	orrs	r3, r2, r3
   144e4:	bne	13ac4 <__assert_fail@plt+0x25e4>
   144e8:	ldrd	r2, [sp, #32]
   144ec:	cmp	fp, r3
   144f0:	cmpeq	sl, r2
   144f4:	bls	144c4 <__assert_fail@plt+0x2fe4>
   144f8:	b	13ac4 <__assert_fail@plt+0x25e4>
   144fc:	ldr	r3, [sp, #72]	; 0x48
   14500:	str	r3, [sp, #92]	; 0x5c
   14504:	ldrd	r2, [sp, #40]	; 0x28
   14508:	orrs	r3, r2, r3
   1450c:	bne	14590 <__assert_fail@plt+0x30b0>
   14510:	mvn	r2, #0
   14514:	mov	r3, #0
   14518:	ldrd	r0, [sp, #32]
   1451c:	cmp	r1, r3
   14520:	cmpeq	r0, r2
   14524:	bhi	14558 <__assert_fail@plt+0x3078>
   14528:	ldrd	r2, [sp, #32]
   1452c:	mov	r9, r2
   14530:	mov	r1, #16
   14534:	mov	r0, r2
   14538:	bl	176e4 <__assert_fail@plt+0x6204>
   1453c:	mov	sl, r0
   14540:	mov	r4, r0
   14544:	mov	r5, #0
   14548:	ldr	r8, [pc, #1648]	; 14bc0 <__assert_fail@plt+0x36e0>
   1454c:	mvn	r7, #0
   14550:	mov	r6, r5
   14554:	b	1457c <__assert_fail@plt+0x309c>
   14558:	bl	17b90 <__assert_fail@plt+0x66b0>
   1455c:	bl	11618 <__assert_fail@plt+0x138>
   14560:	ldr	r0, [r8]
   14564:	bl	17b74 <__assert_fail@plt+0x6694>
   14568:	str	r0, [r4, #-16]
   1456c:	str	r7, [r4, #-12]
   14570:	str	r6, [r4, #-8]
   14574:	str	r6, [r4, #-4]
   14578:	add	r5, r5, #1
   1457c:	add	r4, r4, #16
   14580:	cmp	r9, r5
   14584:	bne	1455c <__assert_fail@plt+0x307c>
   14588:	str	sl, [sp, #72]	; 0x48
   1458c:	b	14598 <__assert_fail@plt+0x30b8>
   14590:	mov	r3, #0
   14594:	str	r3, [sp, #72]	; 0x48
   14598:	mov	r2, #1
   1459c:	mov	r3, #0
   145a0:	strd	r2, [sp, #24]
   145a4:	mov	r3, #0
   145a8:	str	r3, [sp, #52]	; 0x34
   145ac:	mov	sl, r3
   145b0:	str	r3, [sp, #56]	; 0x38
   145b4:	str	r3, [sp, #80]	; 0x50
   145b8:	ldr	r9, [pc, #1540]	; 14bc4 <__assert_fail@plt+0x36e4>
   145bc:	ldr	fp, [pc, #1532]	; 14bc0 <__assert_fail@plt+0x36e0>
   145c0:	ldr	r2, [sp, #92]	; 0x5c
   145c4:	ldr	r1, [sp, #88]	; 0x58
   145c8:	mov	r0, #0
   145cc:	bl	16c94 <__assert_fail@plt+0x57b4>
   145d0:	cmn	r0, #1
   145d4:	beq	145f8 <__assert_fail@plt+0x3118>
   145d8:	cmp	r0, #0
   145dc:	beq	14954 <__assert_fail@plt+0x3474>
   145e0:	ldr	r5, [sp, #88]	; 0x58
   145e4:	add	r7, r5, r0
   145e8:	cmp	r5, r7
   145ec:	beq	145c0 <__assert_fail@plt+0x30e0>
   145f0:	str	r7, [sp, #76]	; 0x4c
   145f4:	b	1478c <__assert_fail@plt+0x32ac>
   145f8:	bl	1139c <__errno_location@plt>
   145fc:	ldr	r4, [r0]
   14600:	ldr	r3, [pc, #1464]	; 14bc0 <__assert_fail@plt+0x36e0>
   14604:	ldr	r2, [r3, #300]	; 0x12c
   14608:	mov	r1, #3
   1460c:	mov	r0, #0
   14610:	bl	16b18 <__assert_fail@plt+0x5638>
   14614:	mov	r3, r0
   14618:	ldr	r2, [pc, #1448]	; 14bc8 <__assert_fail@plt+0x36e8>
   1461c:	mov	r1, r4
   14620:	mov	r0, #1
   14624:	bl	112d0 <error@plt>
   14628:	ldrb	r3, [fp, #304]	; 0x130
   1462c:	cmp	r3, #0
   14630:	bne	1468c <__assert_fail@plt+0x31ac>
   14634:	ldr	r3, [pc, #1424]	; 14bcc <__assert_fail@plt+0x36ec>
   14638:	ldr	r3, [r3]
   1463c:	mov	r2, #1
   14640:	mov	r1, r6
   14644:	mov	r0, r5
   14648:	bl	111f8 <fwrite_unlocked@plt>
   1464c:	cmp	r0, #1
   14650:	beq	147d0 <__assert_fail@plt+0x32f0>
   14654:	ldr	r3, [pc, #1392]	; 14bcc <__assert_fail@plt+0x36ec>
   14658:	ldr	r0, [r3]
   1465c:	bl	11480 <clearerr_unlocked@plt>
   14660:	bl	1139c <__errno_location@plt>
   14664:	ldr	r4, [r0]
   14668:	mov	r2, #5
   1466c:	ldr	r1, [pc, #1372]	; 14bd0 <__assert_fail@plt+0x36f0>
   14670:	mov	r0, #0
   14674:	bl	1121c <dcgettext@plt>
   14678:	mov	r3, r0
   1467c:	ldr	r2, [pc, #1348]	; 14bc8 <__assert_fail@plt+0x36e8>
   14680:	mov	r1, r4
   14684:	mov	r0, #1
   14688:	bl	112d0 <error@plt>
   1468c:	mov	r2, r6
   14690:	mov	r1, r5
   14694:	mov	r0, #1
   14698:	bl	15060 <__assert_fail@plt+0x3b80>
   1469c:	cmp	r6, r0
   146a0:	beq	147d0 <__assert_fail@plt+0x32f0>
   146a4:	bl	1139c <__errno_location@plt>
   146a8:	ldr	r4, [r0]
   146ac:	mov	r2, #5
   146b0:	ldr	r1, [pc, #1304]	; 14bd0 <__assert_fail@plt+0x36f0>
   146b4:	mov	r0, #0
   146b8:	bl	1121c <dcgettext@plt>
   146bc:	mov	r3, r0
   146c0:	ldr	r2, [pc, #1280]	; 14bc8 <__assert_fail@plt+0x36e8>
   146c4:	mov	r1, r4
   146c8:	mov	r0, #1
   146cc:	bl	112d0 <error@plt>
   146d0:	ldr	r2, [sp, #32]
   146d4:	ldr	r1, [sp, #52]	; 0x34
   146d8:	ldr	r0, [sp, #72]	; 0x48
   146dc:	bl	11dfc <__assert_fail@plt+0x91c>
   146e0:	orr	sl, sl, r0
   146e4:	uxtb	sl, sl
   146e8:	ldrb	r3, [fp, #304]	; 0x130
   146ec:	cmp	r3, #0
   146f0:	bne	147fc <__assert_fail@plt+0x331c>
   146f4:	ldr	r3, [sp, #72]	; 0x48
   146f8:	ldr	r2, [sp, #52]	; 0x34
   146fc:	add	r3, r3, r2, lsl #4
   14700:	str	r3, [sp, #64]	; 0x40
   14704:	ldr	r3, [r3, #8]
   14708:	mov	r2, #1
   1470c:	mov	r1, r6
   14710:	mov	r0, r5
   14714:	bl	111f8 <fwrite_unlocked@plt>
   14718:	cmp	r0, #1
   1471c:	beq	14898 <__assert_fail@plt+0x33b8>
   14720:	bl	1139c <__errno_location@plt>
   14724:	ldr	r5, [r0]
   14728:	ldr	r3, [fp, #40]	; 0x28
   1472c:	adds	r3, r3, #0
   14730:	movne	r3, #1
   14734:	cmp	r5, #32
   14738:	movne	r3, #0
   1473c:	cmp	r3, #0
   14740:	beq	14870 <__assert_fail@plt+0x3390>
   14744:	bl	1139c <__errno_location@plt>
   14748:	mov	r5, r0
   1474c:	cmp	sl, #0
   14750:	bne	148cc <__assert_fail@plt+0x33ec>
   14754:	cmp	r8, #0
   14758:	beq	14780 <__assert_fail@plt+0x32a0>
   1475c:	ldr	r3, [sp, #52]	; 0x34
   14760:	add	r1, r3, #1
   14764:	str	r1, [sp, #52]	; 0x34
   14768:	mov	r2, r1
   1476c:	mov	r3, #0
   14770:	ldrd	r0, [sp, #32]
   14774:	cmp	r3, r1
   14778:	cmpeq	r2, r0
   1477c:	beq	14924 <__assert_fail@plt+0x3444>
   14780:	mov	r5, r4
   14784:	cmp	r7, r4
   14788:	beq	145c0 <__assert_fail@plt+0x30e0>
   1478c:	sub	r2, r7, r5
   14790:	ldr	r1, [r9, #12]
   14794:	mov	r0, r5
   14798:	bl	113fc <memchr@plt>
   1479c:	cmp	r0, #0
   147a0:	addne	r4, r0, #1
   147a4:	movne	r8, #1
   147a8:	ldreq	r4, [sp, #76]	; 0x4c
   147ac:	moveq	r8, #0
   147b0:	sub	r6, r4, r5
   147b4:	ldrd	r2, [sp, #40]	; 0x28
   147b8:	orrs	r1, r2, r3
   147bc:	beq	146d0 <__assert_fail@plt+0x31f0>
   147c0:	ldrd	r0, [sp, #24]
   147c4:	cmp	r1, r3
   147c8:	cmpeq	r0, r2
   147cc:	beq	14628 <__assert_fail@plt+0x3148>
   147d0:	cmp	r8, #0
   147d4:	beq	14780 <__assert_fail@plt+0x32a0>
   147d8:	ldrd	r2, [sp, #24]
   147dc:	ldrd	r0, [sp, #32]
   147e0:	cmp	r3, r1
   147e4:	cmpeq	r2, r0
   147e8:	beq	14944 <__assert_fail@plt+0x3464>
   147ec:	adds	r2, r2, #1
   147f0:	adc	r3, r3, #0
   147f4:	strd	r2, [sp, #24]
   147f8:	b	14780 <__assert_fail@plt+0x32a0>
   147fc:	ldr	r3, [sp, #72]	; 0x48
   14800:	ldr	r2, [sp, #52]	; 0x34
   14804:	add	r3, r3, r2, lsl #4
   14808:	str	r3, [sp, #64]	; 0x40
   1480c:	mov	r2, r6
   14810:	mov	r1, r5
   14814:	ldr	r0, [r3, #4]
   14818:	bl	15060 <__assert_fail@plt+0x3b80>
   1481c:	cmp	r6, r0
   14820:	beq	14898 <__assert_fail@plt+0x33b8>
   14824:	bl	1139c <__errno_location@plt>
   14828:	ldr	r5, [r0]
   1482c:	ldr	r3, [fp, #40]	; 0x28
   14830:	adds	r3, r3, #0
   14834:	movne	r3, #1
   14838:	cmp	r5, #32
   1483c:	movne	r3, #0
   14840:	cmp	r3, #0
   14844:	bne	14744 <__assert_fail@plt+0x3264>
   14848:	ldr	r3, [sp, #64]	; 0x40
   1484c:	ldr	r2, [r3]
   14850:	mov	r1, #3
   14854:	mov	r0, #0
   14858:	bl	16b18 <__assert_fail@plt+0x5638>
   1485c:	mov	r3, r0
   14860:	ldr	r2, [pc, #864]	; 14bc8 <__assert_fail@plt+0x36e8>
   14864:	mov	r1, r5
   14868:	mov	r0, #1
   1486c:	bl	112d0 <error@plt>
   14870:	ldr	r3, [sp, #64]	; 0x40
   14874:	ldr	r2, [r3]
   14878:	mov	r1, #3
   1487c:	mov	r0, #0
   14880:	bl	16b18 <__assert_fail@plt+0x5638>
   14884:	mov	r3, r0
   14888:	ldr	r2, [pc, #824]	; 14bc8 <__assert_fail@plt+0x36e8>
   1488c:	mov	r1, r5
   14890:	mov	r0, #1
   14894:	bl	112d0 <error@plt>
   14898:	bl	1139c <__errno_location@plt>
   1489c:	mov	r5, r0
   148a0:	ldr	r3, [fp, #40]	; 0x28
   148a4:	ldr	r2, [r0]
   148a8:	adds	r3, r3, #0
   148ac:	movne	r3, #1
   148b0:	cmp	r2, #32
   148b4:	movne	r3, #0
   148b8:	ldr	r2, [sp, #56]	; 0x38
   148bc:	cmp	r3, #0
   148c0:	moveq	r2, #1
   148c4:	str	r2, [sp, #56]	; 0x38
   148c8:	b	1474c <__assert_fail@plt+0x326c>
   148cc:	ldr	r3, [sp, #72]	; 0x48
   148d0:	ldr	r2, [sp, #52]	; 0x34
   148d4:	add	r6, r3, r2, lsl #4
   148d8:	ldr	r0, [r6, #8]
   148dc:	bl	14db4 <__assert_fail@plt+0x38d4>
   148e0:	cmp	r0, #0
   148e4:	bne	148fc <__assert_fail@plt+0x341c>
   148e8:	mov	r3, #0
   148ec:	str	r3, [r6, #8]
   148f0:	mvn	r3, #1
   148f4:	str	r3, [r6, #4]
   148f8:	b	14754 <__assert_fail@plt+0x3274>
   148fc:	ldr	r4, [r5]
   14900:	ldr	r2, [r6]
   14904:	mov	r1, #3
   14908:	mov	r0, #0
   1490c:	bl	16b18 <__assert_fail@plt+0x5638>
   14910:	mov	r3, r0
   14914:	ldr	r2, [pc, #684]	; 14bc8 <__assert_fail@plt+0x36e8>
   14918:	mov	r1, r4
   1491c:	mov	r0, #1
   14920:	bl	112d0 <error@plt>
   14924:	ldr	r3, [sp, #56]	; 0x38
   14928:	cmp	r3, #0
   1492c:	beq	14970 <__assert_fail@plt+0x3490>
   14930:	str	r3, [sp, #80]	; 0x50
   14934:	mov	r3, #0
   14938:	str	r3, [sp, #56]	; 0x38
   1493c:	str	r3, [sp, #52]	; 0x34
   14940:	b	14780 <__assert_fail@plt+0x32a0>
   14944:	mov	r2, #1
   14948:	mov	r3, #0
   1494c:	strd	r2, [sp, #24]
   14950:	b	14780 <__assert_fail@plt+0x32a0>
   14954:	ldrd	r2, [sp, #40]	; 0x28
   14958:	orrs	r3, r2, r3
   1495c:	bne	13ac4 <__assert_fail@plt+0x25e4>
   14960:	ldr	r3, [sp, #80]	; 0x50
   14964:	cmp	r3, #0
   14968:	ldreq	r4, [sp, #52]	; 0x34
   1496c:	beq	14974 <__assert_fail@plt+0x3494>
   14970:	ldr	r4, [sp, #32]
   14974:	ldr	r5, [sp, #72]	; 0x48
   14978:	mov	r6, #0
   1497c:	mov	r7, #0
   14980:	ldr	sl, [pc, #568]	; 14bc0 <__assert_fail@plt+0x36e0>
   14984:	mvn	r9, #1
   14988:	b	149bc <__assert_fail@plt+0x34dc>
   1498c:	mov	r8, r5
   14990:	ldr	r1, [r5, #4]
   14994:	cmp	r1, #0
   14998:	blt	149ac <__assert_fail@plt+0x34cc>
   1499c:	ldr	r3, [r5]
   149a0:	ldr	r2, [r5, #12]
   149a4:	ldr	r0, [r5, #8]
   149a8:	bl	11fa4 <__assert_fail@plt+0xac4>
   149ac:	str	r9, [r8, #4]
   149b0:	adds	r6, r6, #1
   149b4:	adc	r7, r7, #0
   149b8:	add	r5, r5, #16
   149bc:	mov	r1, r6
   149c0:	ldrd	r2, [sp, #32]
   149c4:	cmp	r7, r3
   149c8:	cmpeq	r6, r2
   149cc:	beq	13ac4 <__assert_fail@plt+0x25e4>
   149d0:	cmp	r4, r6
   149d4:	bhi	1498c <__assert_fail@plt+0x34ac>
   149d8:	ldrb	r3, [sl, #296]	; 0x128
   149dc:	cmp	r3, #0
   149e0:	bne	1498c <__assert_fail@plt+0x34ac>
   149e4:	ldr	r2, [sp, #32]
   149e8:	ldr	r0, [sp, #72]	; 0x48
   149ec:	bl	11dfc <__assert_fail@plt+0x91c>
   149f0:	b	1498c <__assert_fail@plt+0x34ac>
   149f4:	bl	114bc <abort@plt>
   149f8:	ldr	r2, [pc, #448]	; 14bc0 <__assert_fail@plt+0x36e0>
   149fc:	ldr	r3, [r2]
   14a00:	ldr	r2, [r2, #288]	; 0x120
   14a04:	ldr	r1, [pc, #440]	; 14bc4 <__assert_fail@plt+0x36e4>
   14a08:	ldr	r1, [r1, #8]
   14a0c:	mov	r0, #0
   14a10:	bl	11fa4 <__assert_fail@plt+0xac4>
   14a14:	mov	r0, #0
   14a18:	bl	11348 <exit@plt>
   14a1c:	ldrd	r6, [sp, #64]	; 0x40
   14a20:	mov	r2, #5
   14a24:	ldr	r1, [pc, #424]	; 14bd4 <__assert_fail@plt+0x36f4>
   14a28:	mov	r0, #0
   14a2c:	bl	1121c <dcgettext@plt>
   14a30:	mov	r5, r0
   14a34:	add	r2, sp, #112	; 0x70
   14a38:	mov	r0, r6
   14a3c:	mov	r1, r7
   14a40:	bl	150c8 <__assert_fail@plt+0x3be8>
   14a44:	str	r4, [sp]
   14a48:	mov	r3, r0
   14a4c:	mov	r2, r5
   14a50:	mov	r1, #0
   14a54:	mov	r0, #1
   14a58:	bl	112d0 <error@plt>
   14a5c:	sub	r4, sl, #5
   14a60:	cmp	r4, #2
   14a64:	bhi	13350 <__assert_fail@plt+0x1e70>
   14a68:	ldrd	r6, [sp, #32]
   14a6c:	subs	r6, r6, #1
   14a70:	sbc	r7, r7, #0
   14a74:	b	14aa4 <__assert_fail@plt+0x35c4>
   14a78:	ldrd	r6, [sp, #32]
   14a7c:	subs	r6, r6, #1
   14a80:	sbc	r7, r7, #0
   14a84:	ldr	r3, [pc, #332]	; 14bd8 <__assert_fail@plt+0x36f8>
   14a88:	str	r3, [sp]
   14a8c:	add	r3, sp, #112	; 0x70
   14a90:	mov	r2, #10
   14a94:	mov	r1, #0
   14a98:	bl	17e28 <__assert_fail@plt+0x6948>
   14a9c:	cmp	r0, #0
   14aa0:	beq	13408 <__assert_fail@plt+0x1f28>
   14aa4:	ldr	r3, [pc, #280]	; 14bc4 <__assert_fail@plt+0x36e4>
   14aa8:	ldr	r0, [r3]
   14aac:	bl	11354 <strlen@plt>
   14ab0:	str	r0, [sp, #52]	; 0x34
   14ab4:	mov	r8, #0
   14ab8:	mov	r9, #0
   14abc:	mov	fp, #0
   14ac0:	adds	r8, r8, #1
   14ac4:	adc	r9, r9, #0
   14ac8:	ldr	r2, [sp, #52]	; 0x34
   14acc:	mov	r3, fp
   14ad0:	mov	r0, r6
   14ad4:	mov	r1, r7
   14ad8:	bl	18c88 <__assert_fail@plt+0x77a8>
   14adc:	mov	r6, r0
   14ae0:	mov	r7, r1
   14ae4:	orrs	r3, r6, r7
   14ae8:	bne	14ac0 <__assert_fail@plt+0x35e0>
   14aec:	mov	r2, #0
   14af0:	ldr	r3, [pc, #204]	; 14bc4 <__assert_fail@plt+0x36e4>
   14af4:	strb	r2, [r3, #4]
   14af8:	ldr	r3, [pc, #192]	; 14bc0 <__assert_fail@plt+0x36e0>
   14afc:	ldr	r2, [r3, #24]
   14b00:	cmp	r2, #0
   14b04:	beq	1344c <__assert_fail@plt+0x1f6c>
   14b08:	mov	r3, #0
   14b0c:	cmp	r9, r3
   14b10:	cmpeq	r8, r2
   14b14:	bls	13368 <__assert_fail@plt+0x1e88>
   14b18:	mov	r2, #5
   14b1c:	ldr	r1, [pc, #184]	; 14bdc <__assert_fail@plt+0x36fc>
   14b20:	mov	r0, #0
   14b24:	bl	1121c <dcgettext@plt>
   14b28:	strd	r8, [sp]
   14b2c:	mov	r2, r0
   14b30:	mov	r1, #0
   14b34:	mov	r0, #1
   14b38:	bl	112d0 <error@plt>
   14b3c:	orrs	r3, r8, r9
   14b40:	mov	r2, r7
   14b44:	mov	r1, r5
   14b48:	moveq	r0, #1
   14b4c:	movne	r0, #0
   14b50:	bl	12268 <__assert_fail@plt+0xd88>
   14b54:	ldrd	r2, [sp, #24]
   14b58:	adds	r2, r2, r8
   14b5c:	adc	r3, r3, r9
   14b60:	mov	r8, r2
   14b64:	mov	r9, r3
   14b68:	add	r5, r5, r7
   14b6c:	adds	sl, fp, #0
   14b70:	movne	sl, #1
   14b74:	mov	r7, #0
   14b78:	b	13dd0 <__assert_fail@plt+0x28f0>
   14b7c:	mov	fp, r6
   14b80:	cmp	r6, #0
   14b84:	bne	13df0 <__assert_fail@plt+0x2910>
   14b88:	ldr	r0, [sp, #40]	; 0x28
   14b8c:	bl	14f60 <__assert_fail@plt+0x3a80>
   14b90:	b	13ac4 <__assert_fail@plt+0x25e4>
   14b94:	sub	r4, r4, #48	; 0x30
   14b98:	mov	r2, r4
   14b9c:	asr	r3, r4, #31
   14ba0:	strd	r2, [sp, #32]
   14ba4:	str	r6, [sp, #52]	; 0x34
   14ba8:	b	12a5c <__assert_fail@plt+0x157c>
   14bac:	adds	sl, fp, #0
   14bb0:	movne	sl, #1
   14bb4:	mov	r3, #1
   14bb8:	str	r3, [sp, #52]	; 0x34
   14bbc:	b	13dd0 <__assert_fail@plt+0x28f0>
   14bc0:	andeq	fp, r2, r0, ror r3
   14bc4:	andeq	fp, r2, r4, asr r1
   14bc8:	andeq	r9, r1, ip, lsr r2
   14bcc:	andeq	fp, r2, r4, ror #6
   14bd0:	andeq	r9, r1, r8, asr pc
   14bd4:	andeq	r9, r1, r4, ror #30
   14bd8:	andeq	r9, r1, r0, ror #16
   14bdc:	andeq	r9, r1, r8, asr lr
   14be0:	ldrb	r3, [r0]
   14be4:	cmp	r3, #47	; 0x2f
   14be8:	bne	14bf8 <__assert_fail@plt+0x3718>
   14bec:	ldrb	r3, [r0, #1]!
   14bf0:	cmp	r3, #47	; 0x2f
   14bf4:	beq	14bec <__assert_fail@plt+0x370c>
   14bf8:	ldrb	r2, [r0]
   14bfc:	cmp	r2, #0
   14c00:	bxeq	lr
   14c04:	push	{lr}		; (str lr, [sp, #-4]!)
   14c08:	mov	r1, r0
   14c0c:	mov	r3, #0
   14c10:	mov	lr, #1
   14c14:	mov	ip, r3
   14c18:	b	14c28 <__assert_fail@plt+0x3748>
   14c1c:	ldrb	r2, [r1, #1]!
   14c20:	cmp	r2, #0
   14c24:	beq	14c44 <__assert_fail@plt+0x3764>
   14c28:	cmp	r2, #47	; 0x2f
   14c2c:	moveq	r3, lr
   14c30:	beq	14c1c <__assert_fail@plt+0x373c>
   14c34:	cmp	r3, #0
   14c38:	movne	r0, r1
   14c3c:	movne	r3, ip
   14c40:	b	14c1c <__assert_fail@plt+0x373c>
   14c44:	pop	{pc}		; (ldr pc, [sp], #4)
   14c48:	push	{r4, lr}
   14c4c:	mov	r4, r0
   14c50:	bl	11354 <strlen@plt>
   14c54:	cmp	r0, #1
   14c58:	popls	{r4, pc}
   14c5c:	sub	r3, r0, #1
   14c60:	add	r2, r4, r3
   14c64:	ldrb	r1, [r4, r3]
   14c68:	cmp	r1, #47	; 0x2f
   14c6c:	popne	{r4, pc}
   14c70:	cmp	r3, #1
   14c74:	beq	14c98 <__assert_fail@plt+0x37b8>
   14c78:	sub	r0, r3, #1
   14c7c:	ldrb	r1, [r2, #-1]!
   14c80:	cmp	r1, #47	; 0x2f
   14c84:	beq	14c90 <__assert_fail@plt+0x37b0>
   14c88:	mov	r0, r3
   14c8c:	pop	{r4, pc}
   14c90:	mov	r3, r0
   14c94:	b	14c70 <__assert_fail@plt+0x3790>
   14c98:	mov	r0, #1
   14c9c:	pop	{r4, pc}
   14ca0:	ldr	r3, [pc, #4]	; 14cac <__assert_fail@plt+0x37cc>
   14ca4:	str	r0, [r3]
   14ca8:	bx	lr
   14cac:	andeq	fp, r2, r4, lsr #10
   14cb0:	ldr	r3, [pc, #4]	; 14cbc <__assert_fail@plt+0x37dc>
   14cb4:	strb	r0, [r3, #4]
   14cb8:	bx	lr
   14cbc:	andeq	fp, r2, r4, lsr #10
   14cc0:	push	{r4, r5, r6, lr}
   14cc4:	sub	sp, sp, #8
   14cc8:	ldr	r3, [pc, #200]	; 14d98 <__assert_fail@plt+0x38b8>
   14ccc:	ldr	r0, [r3]
   14cd0:	bl	18378 <__assert_fail@plt+0x6e98>
   14cd4:	cmp	r0, #0
   14cd8:	beq	14cfc <__assert_fail@plt+0x381c>
   14cdc:	ldr	r3, [pc, #184]	; 14d9c <__assert_fail@plt+0x38bc>
   14ce0:	ldrb	r3, [r3, #4]
   14ce4:	cmp	r3, #0
   14ce8:	beq	14d18 <__assert_fail@plt+0x3838>
   14cec:	bl	1139c <__errno_location@plt>
   14cf0:	ldr	r3, [r0]
   14cf4:	cmp	r3, #32
   14cf8:	bne	14d18 <__assert_fail@plt+0x3838>
   14cfc:	ldr	r3, [pc, #156]	; 14da0 <__assert_fail@plt+0x38c0>
   14d00:	ldr	r0, [r3]
   14d04:	bl	18378 <__assert_fail@plt+0x6e98>
   14d08:	cmp	r0, #0
   14d0c:	bne	14d8c <__assert_fail@plt+0x38ac>
   14d10:	add	sp, sp, #8
   14d14:	pop	{r4, r5, r6, pc}
   14d18:	mov	r2, #5
   14d1c:	ldr	r1, [pc, #128]	; 14da4 <__assert_fail@plt+0x38c4>
   14d20:	mov	r0, #0
   14d24:	bl	1121c <dcgettext@plt>
   14d28:	mov	r4, r0
   14d2c:	ldr	r3, [pc, #104]	; 14d9c <__assert_fail@plt+0x38bc>
   14d30:	ldr	r5, [r3]
   14d34:	cmp	r5, #0
   14d38:	beq	14d70 <__assert_fail@plt+0x3890>
   14d3c:	bl	1139c <__errno_location@plt>
   14d40:	ldr	r6, [r0]
   14d44:	mov	r0, r5
   14d48:	bl	16af8 <__assert_fail@plt+0x5618>
   14d4c:	str	r4, [sp]
   14d50:	mov	r3, r0
   14d54:	ldr	r2, [pc, #76]	; 14da8 <__assert_fail@plt+0x38c8>
   14d58:	mov	r1, r6
   14d5c:	mov	r0, #0
   14d60:	bl	112d0 <error@plt>
   14d64:	ldr	r3, [pc, #64]	; 14dac <__assert_fail@plt+0x38cc>
   14d68:	ldr	r0, [r3]
   14d6c:	bl	111bc <_exit@plt>
   14d70:	bl	1139c <__errno_location@plt>
   14d74:	mov	r3, r4
   14d78:	ldr	r2, [pc, #48]	; 14db0 <__assert_fail@plt+0x38d0>
   14d7c:	ldr	r1, [r0]
   14d80:	mov	r0, #0
   14d84:	bl	112d0 <error@plt>
   14d88:	b	14d64 <__assert_fail@plt+0x3884>
   14d8c:	ldr	r3, [pc, #24]	; 14dac <__assert_fail@plt+0x38cc>
   14d90:	ldr	r0, [r3]
   14d94:	bl	111bc <_exit@plt>
   14d98:	andeq	fp, r2, r4, ror #6
   14d9c:	andeq	fp, r2, r4, lsr #10
   14da0:	andeq	fp, r2, r0, ror #6
   14da4:	andeq	r9, r1, r8, asr pc
   14da8:	andeq	r9, r1, r0, asr lr
   14dac:	andeq	fp, r2, r8, ror #2
   14db0:	andeq	r9, r1, ip, lsr r2
   14db4:	push	{r4, r5, r6, lr}
   14db8:	sub	sp, sp, #8
   14dbc:	mov	r4, r0
   14dc0:	bl	113e4 <fileno@plt>
   14dc4:	cmp	r0, #0
   14dc8:	blt	14e40 <__assert_fail@plt+0x3960>
   14dcc:	mov	r0, r4
   14dd0:	bl	11318 <__freading@plt>
   14dd4:	cmp	r0, #0
   14dd8:	beq	14e0c <__assert_fail@plt+0x392c>
   14ddc:	mov	r0, r4
   14de0:	bl	113e4 <fileno@plt>
   14de4:	mov	r3, #1
   14de8:	str	r3, [sp]
   14dec:	mov	r2, #0
   14df0:	mov	r3, #0
   14df4:	bl	11288 <lseek64@plt>
   14df8:	mvn	r2, #0
   14dfc:	mvn	r3, #0
   14e00:	cmp	r1, r3
   14e04:	cmpeq	r0, r2
   14e08:	beq	14e4c <__assert_fail@plt+0x396c>
   14e0c:	mov	r0, r4
   14e10:	bl	14efc <__assert_fail@plt+0x3a1c>
   14e14:	cmp	r0, #0
   14e18:	beq	14e4c <__assert_fail@plt+0x396c>
   14e1c:	bl	1139c <__errno_location@plt>
   14e20:	mov	r5, r0
   14e24:	ldr	r6, [r0]
   14e28:	mov	r0, r4
   14e2c:	bl	11408 <fclose@plt>
   14e30:	cmp	r6, #0
   14e34:	strne	r6, [r5]
   14e38:	mvnne	r0, #0
   14e3c:	b	14e54 <__assert_fail@plt+0x3974>
   14e40:	mov	r0, r4
   14e44:	bl	11408 <fclose@plt>
   14e48:	b	14e54 <__assert_fail@plt+0x3974>
   14e4c:	mov	r0, r4
   14e50:	bl	11408 <fclose@plt>
   14e54:	add	sp, sp, #8
   14e58:	pop	{r4, r5, r6, pc}
   14e5c:	push	{r1, r2, r3}
   14e60:	push	{lr}		; (str lr, [sp, #-4]!)
   14e64:	sub	sp, sp, #8
   14e68:	ldr	r1, [sp, #12]
   14e6c:	tst	r1, #64	; 0x40
   14e70:	addne	r3, sp, #20
   14e74:	strne	r3, [sp, #4]
   14e78:	ldrne	r2, [sp, #16]
   14e7c:	moveq	r2, #0
   14e80:	bl	112dc <open64@plt>
   14e84:	bl	17014 <__assert_fail@plt+0x5b34>
   14e88:	add	sp, sp, #8
   14e8c:	pop	{lr}		; (ldr lr, [sp], #4)
   14e90:	add	sp, sp, #12
   14e94:	bx	lr
   14e98:	push	{r4, r5, r6, r7, r8, lr}
   14e9c:	mov	r5, r0
   14ea0:	mov	r0, r1
   14ea4:	mov	r1, r2
   14ea8:	mov	r2, r3
   14eac:	bl	112dc <open64@plt>
   14eb0:	mov	r4, r0
   14eb4:	cmp	r5, r0
   14eb8:	movne	r3, #0
   14ebc:	moveq	r3, #1
   14ec0:	orrs	r3, r3, r0, lsr #31
   14ec4:	beq	14ed0 <__assert_fail@plt+0x39f0>
   14ec8:	mov	r0, r4
   14ecc:	pop	{r4, r5, r6, r7, r8, pc}
   14ed0:	mov	r1, r5
   14ed4:	bl	11228 <dup2@plt>
   14ed8:	mov	r6, r0
   14edc:	bl	1139c <__errno_location@plt>
   14ee0:	mov	r5, r0
   14ee4:	ldr	r7, [r0]
   14ee8:	mov	r0, r4
   14eec:	bl	114c8 <close@plt>
   14ef0:	str	r7, [r5]
   14ef4:	mov	r4, r6
   14ef8:	b	14ec8 <__assert_fail@plt+0x39e8>
   14efc:	push	{r4, lr}
   14f00:	sub	sp, sp, #8
   14f04:	subs	r4, r0, #0
   14f08:	beq	14f1c <__assert_fail@plt+0x3a3c>
   14f0c:	mov	r0, r4
   14f10:	bl	11318 <__freading@plt>
   14f14:	cmp	r0, #0
   14f18:	bne	14f2c <__assert_fail@plt+0x3a4c>
   14f1c:	mov	r0, r4
   14f20:	bl	1118c <fflush@plt>
   14f24:	add	sp, sp, #8
   14f28:	pop	{r4, pc}
   14f2c:	ldr	r3, [r4]
   14f30:	tst	r3, #256	; 0x100
   14f34:	bne	14f44 <__assert_fail@plt+0x3a64>
   14f38:	mov	r0, r4
   14f3c:	bl	1118c <fflush@plt>
   14f40:	b	14f24 <__assert_fail@plt+0x3a44>
   14f44:	mov	r3, #1
   14f48:	str	r3, [sp]
   14f4c:	mov	r2, #0
   14f50:	mov	r3, #0
   14f54:	mov	r0, r4
   14f58:	bl	14fb8 <__assert_fail@plt+0x3ad8>
   14f5c:	b	14f38 <__assert_fail@plt+0x3a58>
   14f60:	push	{r4, r5, lr}
   14f64:	sub	sp, sp, #12
   14f68:	mov	r5, r0
   14f6c:	bl	1139c <__errno_location@plt>
   14f70:	mov	r4, r0
   14f74:	ldr	r3, [r0]
   14f78:	str	r3, [sp]
   14f7c:	str	r3, [sp, #4]
   14f80:	mov	r3, #0
   14f84:	str	r3, [r0]
   14f88:	mov	r0, r5
   14f8c:	bl	111b0 <free@plt>
   14f90:	ldr	r3, [r4]
   14f94:	cmp	r3, #0
   14f98:	moveq	r3, #4
   14f9c:	movne	r3, #0
   14fa0:	add	r2, sp, #8
   14fa4:	add	r3, r2, r3
   14fa8:	ldr	r3, [r3, #-8]
   14fac:	str	r3, [r4]
   14fb0:	add	sp, sp, #12
   14fb4:	pop	{r4, r5, pc}
   14fb8:	push	{r4, r5, r6, r7, lr}
   14fbc:	sub	sp, sp, #12
   14fc0:	mov	r4, r0
   14fc4:	mov	r6, r2
   14fc8:	mov	r7, r3
   14fcc:	ldr	r5, [sp, #32]
   14fd0:	ldr	r2, [r0, #8]
   14fd4:	ldr	r3, [r0, #4]
   14fd8:	cmp	r2, r3
   14fdc:	beq	14ffc <__assert_fail@plt+0x3b1c>
   14fe0:	str	r5, [sp]
   14fe4:	mov	r2, r6
   14fe8:	mov	r3, r7
   14fec:	mov	r0, r4
   14ff0:	bl	11420 <fseeko64@plt>
   14ff4:	add	sp, sp, #12
   14ff8:	pop	{r4, r5, r6, r7, pc}
   14ffc:	ldr	r2, [r0, #20]
   15000:	ldr	r3, [r0, #16]
   15004:	cmp	r2, r3
   15008:	bne	14fe0 <__assert_fail@plt+0x3b00>
   1500c:	ldr	r3, [r0, #36]	; 0x24
   15010:	cmp	r3, #0
   15014:	bne	14fe0 <__assert_fail@plt+0x3b00>
   15018:	bl	113e4 <fileno@plt>
   1501c:	str	r5, [sp]
   15020:	mov	r2, r6
   15024:	mov	r3, r7
   15028:	bl	11288 <lseek64@plt>
   1502c:	mvn	r2, #0
   15030:	mvn	r3, #0
   15034:	cmp	r1, r3
   15038:	cmpeq	r0, r2
   1503c:	beq	15058 <__assert_fail@plt+0x3b78>
   15040:	ldr	r3, [r4]
   15044:	bic	r3, r3, #16
   15048:	str	r3, [r4]
   1504c:	strd	r0, [r4, #80]	; 0x50
   15050:	mov	r0, #0
   15054:	b	14ff4 <__assert_fail@plt+0x3b14>
   15058:	mvn	r0, #0
   1505c:	b	14ff4 <__assert_fail@plt+0x3b14>
   15060:	push	{r4, r5, r6, r7, r8, lr}
   15064:	subs	r4, r2, #0
   15068:	beq	150c0 <__assert_fail@plt+0x3be0>
   1506c:	mov	r7, r0
   15070:	mov	r5, r1
   15074:	mov	r6, #0
   15078:	mov	r2, r4
   1507c:	mov	r1, r5
   15080:	mov	r0, r7
   15084:	bl	16d08 <__assert_fail@plt+0x5828>
   15088:	cmn	r0, #1
   1508c:	beq	150b8 <__assert_fail@plt+0x3bd8>
   15090:	cmp	r0, #0
   15094:	beq	150ac <__assert_fail@plt+0x3bcc>
   15098:	add	r6, r6, r0
   1509c:	add	r5, r5, r0
   150a0:	subs	r4, r4, r0
   150a4:	bne	15078 <__assert_fail@plt+0x3b98>
   150a8:	b	150b8 <__assert_fail@plt+0x3bd8>
   150ac:	bl	1139c <__errno_location@plt>
   150b0:	mov	r3, #28
   150b4:	str	r3, [r0]
   150b8:	mov	r0, r6
   150bc:	pop	{r4, r5, r6, r7, r8, pc}
   150c0:	mov	r6, r4
   150c4:	b	150b8 <__assert_fail@plt+0x3bd8>
   150c8:	push	{r4, r5, r6, r8, r9, lr}
   150cc:	mov	r4, r0
   150d0:	mov	r5, r1
   150d4:	add	r6, r2, #20
   150d8:	mov	r3, #0
   150dc:	strb	r3, [r2, #20]
   150e0:	mov	r8, #10
   150e4:	mov	r9, #0
   150e8:	mov	r2, r8
   150ec:	mov	r3, r9
   150f0:	mov	r0, r4
   150f4:	mov	r1, r5
   150f8:	bl	18c88 <__assert_fail@plt+0x77a8>
   150fc:	add	r2, r2, #48	; 0x30
   15100:	strb	r2, [r6, #-1]!
   15104:	mov	r2, r8
   15108:	mov	r3, r9
   1510c:	mov	r0, r4
   15110:	mov	r1, r5
   15114:	bl	18c88 <__assert_fail@plt+0x77a8>
   15118:	mov	r4, r0
   1511c:	mov	r5, r1
   15120:	orrs	r3, r4, r5
   15124:	bne	150e8 <__assert_fail@plt+0x3c08>
   15128:	mov	r0, r6
   1512c:	pop	{r4, r5, r6, r8, r9, pc}
   15130:	push	{r4, r5, r6, lr}
   15134:	subs	r4, r0, #0
   15138:	beq	151b0 <__assert_fail@plt+0x3cd0>
   1513c:	mov	r1, #47	; 0x2f
   15140:	mov	r0, r4
   15144:	bl	11468 <strrchr@plt>
   15148:	cmp	r0, #0
   1514c:	addne	r5, r0, #1
   15150:	moveq	r5, r4
   15154:	sub	r3, r5, r4
   15158:	cmp	r3, #6
   1515c:	ble	1519c <__assert_fail@plt+0x3cbc>
   15160:	mov	r2, #7
   15164:	ldr	r1, [pc, #96]	; 151cc <__assert_fail@plt+0x3cec>
   15168:	sub	r0, r5, #7
   1516c:	bl	114b0 <strncmp@plt>
   15170:	cmp	r0, #0
   15174:	bne	1519c <__assert_fail@plt+0x3cbc>
   15178:	mov	r2, #3
   1517c:	ldr	r1, [pc, #76]	; 151d0 <__assert_fail@plt+0x3cf0>
   15180:	mov	r0, r5
   15184:	bl	114b0 <strncmp@plt>
   15188:	cmp	r0, #0
   1518c:	addeq	r4, r5, #3
   15190:	ldreq	r3, [pc, #60]	; 151d4 <__assert_fail@plt+0x3cf4>
   15194:	streq	r4, [r3]
   15198:	movne	r4, r5
   1519c:	ldr	r3, [pc, #52]	; 151d8 <__assert_fail@plt+0x3cf8>
   151a0:	str	r4, [r3]
   151a4:	ldr	r3, [pc, #48]	; 151dc <__assert_fail@plt+0x3cfc>
   151a8:	str	r4, [r3]
   151ac:	pop	{r4, r5, r6, pc}
   151b0:	ldr	r3, [pc, #40]	; 151e0 <__assert_fail@plt+0x3d00>
   151b4:	ldr	r3, [r3]
   151b8:	mov	r2, #55	; 0x37
   151bc:	mov	r1, #1
   151c0:	ldr	r0, [pc, #28]	; 151e4 <__assert_fail@plt+0x3d04>
   151c4:	bl	1127c <fwrite@plt>
   151c8:	bl	114bc <abort@plt>
   151cc:	andeq	sl, r1, r0, lsr #2
   151d0:	andeq	sl, r1, r8, lsr #2
   151d4:	andeq	fp, r2, r0, asr r3
   151d8:	andeq	fp, r2, ip, lsr #10
   151dc:	andeq	fp, r2, r4, asr r3
   151e0:	andeq	fp, r2, r0, ror #6
   151e4:	andeq	sl, r1, r8, ror #1
   151e8:	push	{r4, r5, r6, lr}
   151ec:	mov	r5, r0
   151f0:	mov	r4, r1
   151f4:	mov	r2, #48	; 0x30
   151f8:	mov	r1, #0
   151fc:	bl	113c0 <memset@plt>
   15200:	cmp	r4, #10
   15204:	beq	15214 <__assert_fail@plt+0x3d34>
   15208:	str	r4, [r5]
   1520c:	mov	r0, r5
   15210:	pop	{r4, r5, r6, pc}
   15214:	bl	114bc <abort@plt>
   15218:	push	{r4, r5, r6, lr}
   1521c:	mov	r4, r0
   15220:	mov	r5, r1
   15224:	mov	r2, #5
   15228:	mov	r1, r0
   1522c:	mov	r0, #0
   15230:	bl	1121c <dcgettext@plt>
   15234:	cmp	r4, r0
   15238:	popne	{r4, r5, r6, pc}
   1523c:	bl	183f0 <__assert_fail@plt+0x6f10>
   15240:	ldrb	r3, [r0]
   15244:	bic	r3, r3, #32
   15248:	cmp	r3, #85	; 0x55
   1524c:	beq	152c8 <__assert_fail@plt+0x3de8>
   15250:	cmp	r3, #71	; 0x47
   15254:	bne	15324 <__assert_fail@plt+0x3e44>
   15258:	ldrb	r3, [r0, #1]
   1525c:	bic	r3, r3, #32
   15260:	cmp	r3, #66	; 0x42
   15264:	bne	15324 <__assert_fail@plt+0x3e44>
   15268:	ldrb	r3, [r0, #2]
   1526c:	cmp	r3, #49	; 0x31
   15270:	bne	15324 <__assert_fail@plt+0x3e44>
   15274:	ldrb	r3, [r0, #3]
   15278:	cmp	r3, #56	; 0x38
   1527c:	bne	15324 <__assert_fail@plt+0x3e44>
   15280:	ldrb	r3, [r0, #4]
   15284:	cmp	r3, #48	; 0x30
   15288:	bne	15324 <__assert_fail@plt+0x3e44>
   1528c:	ldrb	r3, [r0, #5]
   15290:	cmp	r3, #51	; 0x33
   15294:	bne	15324 <__assert_fail@plt+0x3e44>
   15298:	ldrb	r3, [r0, #6]
   1529c:	cmp	r3, #48	; 0x30
   152a0:	bne	15324 <__assert_fail@plt+0x3e44>
   152a4:	ldrb	r3, [r0, #7]
   152a8:	cmp	r3, #0
   152ac:	bne	15324 <__assert_fail@plt+0x3e44>
   152b0:	ldrb	r2, [r4]
   152b4:	ldr	r3, [pc, #124]	; 15338 <__assert_fail@plt+0x3e58>
   152b8:	ldr	r0, [pc, #124]	; 1533c <__assert_fail@plt+0x3e5c>
   152bc:	cmp	r2, #96	; 0x60
   152c0:	movne	r0, r3
   152c4:	pop	{r4, r5, r6, pc}
   152c8:	ldrb	r3, [r0, #1]
   152cc:	bic	r3, r3, #32
   152d0:	cmp	r3, #84	; 0x54
   152d4:	bne	15324 <__assert_fail@plt+0x3e44>
   152d8:	ldrb	r3, [r0, #2]
   152dc:	bic	r3, r3, #32
   152e0:	cmp	r3, #70	; 0x46
   152e4:	bne	15324 <__assert_fail@plt+0x3e44>
   152e8:	ldrb	r3, [r0, #3]
   152ec:	cmp	r3, #45	; 0x2d
   152f0:	bne	15324 <__assert_fail@plt+0x3e44>
   152f4:	ldrb	r3, [r0, #4]
   152f8:	cmp	r3, #56	; 0x38
   152fc:	bne	15324 <__assert_fail@plt+0x3e44>
   15300:	ldrb	r3, [r0, #5]
   15304:	cmp	r3, #0
   15308:	bne	15324 <__assert_fail@plt+0x3e44>
   1530c:	ldrb	r2, [r4]
   15310:	ldr	r3, [pc, #40]	; 15340 <__assert_fail@plt+0x3e60>
   15314:	ldr	r0, [pc, #40]	; 15344 <__assert_fail@plt+0x3e64>
   15318:	cmp	r2, #96	; 0x60
   1531c:	movne	r0, r3
   15320:	pop	{r4, r5, r6, pc}
   15324:	ldr	r3, [pc, #28]	; 15348 <__assert_fail@plt+0x3e68>
   15328:	ldr	r0, [pc, #28]	; 1534c <__assert_fail@plt+0x3e6c>
   1532c:	cmp	r5, #9
   15330:	movne	r0, r3
   15334:	pop	{r4, r5, r6, pc}
   15338:	andeq	sl, r1, r4, lsl #3
   1533c:	andeq	sl, r1, ip, lsl #3
   15340:	andeq	sl, r1, r0, lsl #3
   15344:	muleq	r1, r0, r1
   15348:	andeq	sl, r1, r8, lsl #3
   1534c:	muleq	r1, r0, r1
   15350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15354:	sub	sp, sp, #116	; 0x74
   15358:	str	r0, [sp, #36]	; 0x24
   1535c:	mov	sl, r1
   15360:	str	r2, [sp, #52]	; 0x34
   15364:	str	r3, [sp, #28]
   15368:	ldr	r8, [sp, #152]	; 0x98
   1536c:	bl	112a0 <__ctype_get_mb_cur_max@plt>
   15370:	str	r0, [sp, #84]	; 0x54
   15374:	ldr	r3, [sp, #156]	; 0x9c
   15378:	lsr	r3, r3, #1
   1537c:	and	r3, r3, #1
   15380:	str	r3, [sp, #32]
   15384:	mov	r3, #1
   15388:	str	r3, [sp, #40]	; 0x28
   1538c:	mov	r3, #0
   15390:	str	r3, [sp, #80]	; 0x50
   15394:	str	r3, [sp, #44]	; 0x2c
   15398:	str	r3, [sp, #48]	; 0x30
   1539c:	str	r3, [sp, #60]	; 0x3c
   153a0:	str	r3, [sp, #72]	; 0x48
   153a4:	str	r3, [sp, #76]	; 0x4c
   153a8:	mov	r7, sl
   153ac:	mov	sl, r8
   153b0:	cmp	sl, #10
   153b4:	ldrls	pc, [pc, sl, lsl #2]
   153b8:	b	15570 <__assert_fail@plt+0x4090>
   153bc:	andeq	r5, r1, r0, lsr #8
   153c0:	strdeq	r5, [r1], -r0
   153c4:	andeq	r5, r1, ip, asr #10
   153c8:	andeq	r5, r1, r8, ror #7
   153cc:	andeq	r5, r1, r0, lsl #10
   153d0:	andeq	r5, r1, r0, lsr r4
   153d4:	muleq	r1, ip, r4
   153d8:	andeq	r5, r1, r4, ror r5
   153dc:	andeq	r5, r1, ip, ror #8
   153e0:	andeq	r5, r1, ip, ror #8
   153e4:	andeq	r5, r1, ip, ror #8
   153e8:	mov	r3, #1
   153ec:	str	r3, [sp, #48]	; 0x30
   153f0:	mov	r3, #1
   153f4:	str	r3, [sp, #32]
   153f8:	str	r3, [sp, #60]	; 0x3c
   153fc:	ldr	r3, [pc, #4068]	; 163e8 <__assert_fail@plt+0x4f08>
   15400:	str	r3, [sp, #72]	; 0x48
   15404:	mov	fp, #0
   15408:	mov	sl, #2
   1540c:	mov	r6, #0
   15410:	ldr	r3, [sp, #48]	; 0x30
   15414:	eor	r3, r3, #1
   15418:	str	r3, [sp, #68]	; 0x44
   1541c:	b	15d04 <__assert_fail@plt+0x4824>
   15420:	mov	r3, #0
   15424:	str	r3, [sp, #32]
   15428:	mov	fp, r3
   1542c:	b	1540c <__assert_fail@plt+0x3f2c>
   15430:	ldr	r3, [sp, #32]
   15434:	cmp	r3, #0
   15438:	bne	1558c <__assert_fail@plt+0x40ac>
   1543c:	cmp	r7, #0
   15440:	beq	155ac <__assert_fail@plt+0x40cc>
   15444:	ldr	r3, [sp, #36]	; 0x24
   15448:	mov	r2, #34	; 0x22
   1544c:	strb	r2, [r3]
   15450:	mov	r3, #1
   15454:	str	r3, [sp, #48]	; 0x30
   15458:	str	r3, [sp, #60]	; 0x3c
   1545c:	ldr	r3, [pc, #3980]	; 163f0 <__assert_fail@plt+0x4f10>
   15460:	str	r3, [sp, #72]	; 0x48
   15464:	mov	fp, #1
   15468:	b	1540c <__assert_fail@plt+0x3f2c>
   1546c:	cmp	sl, #10
   15470:	beq	15494 <__assert_fail@plt+0x3fb4>
   15474:	mov	r1, sl
   15478:	ldr	r0, [pc, #3948]	; 163ec <__assert_fail@plt+0x4f0c>
   1547c:	bl	15218 <__assert_fail@plt+0x3d38>
   15480:	str	r0, [sp, #164]	; 0xa4
   15484:	mov	r1, sl
   15488:	ldr	r0, [pc, #3928]	; 163e8 <__assert_fail@plt+0x4f08>
   1548c:	bl	15218 <__assert_fail@plt+0x3d38>
   15490:	str	r0, [sp, #168]	; 0xa8
   15494:	ldr	r3, [sp, #32]
   15498:	cmp	r3, #0
   1549c:	movne	fp, #0
   154a0:	bne	154d8 <__assert_fail@plt+0x3ff8>
   154a4:	ldr	r3, [sp, #164]	; 0xa4
   154a8:	ldrb	r3, [r3]
   154ac:	cmp	r3, #0
   154b0:	beq	154f8 <__assert_fail@plt+0x4018>
   154b4:	ldr	r2, [sp, #164]	; 0xa4
   154b8:	mov	fp, #0
   154bc:	ldr	r1, [sp, #36]	; 0x24
   154c0:	cmp	r7, fp
   154c4:	strbhi	r3, [r1, fp]
   154c8:	add	fp, fp, #1
   154cc:	ldrb	r3, [r2, #1]!
   154d0:	cmp	r3, #0
   154d4:	bne	154c0 <__assert_fail@plt+0x3fe0>
   154d8:	ldr	r0, [sp, #168]	; 0xa8
   154dc:	bl	11354 <strlen@plt>
   154e0:	str	r0, [sp, #60]	; 0x3c
   154e4:	ldr	r3, [sp, #168]	; 0xa8
   154e8:	str	r3, [sp, #72]	; 0x48
   154ec:	mov	r3, #1
   154f0:	str	r3, [sp, #48]	; 0x30
   154f4:	b	1540c <__assert_fail@plt+0x3f2c>
   154f8:	mov	fp, #0
   154fc:	b	154d8 <__assert_fail@plt+0x3ff8>
   15500:	ldr	r3, [sp, #32]
   15504:	cmp	r3, #0
   15508:	bne	155c8 <__assert_fail@plt+0x40e8>
   1550c:	mov	r3, #1
   15510:	str	r3, [sp, #48]	; 0x30
   15514:	cmp	r7, #0
   15518:	beq	155e4 <__assert_fail@plt+0x4104>
   1551c:	ldr	r3, [sp, #36]	; 0x24
   15520:	mov	r2, #39	; 0x27
   15524:	strb	r2, [r3]
   15528:	mov	r3, #0
   1552c:	str	r3, [sp, #32]
   15530:	mov	r3, #1
   15534:	str	r3, [sp, #60]	; 0x3c
   15538:	ldr	r3, [pc, #3752]	; 163e8 <__assert_fail@plt+0x4f08>
   1553c:	str	r3, [sp, #72]	; 0x48
   15540:	mov	fp, #1
   15544:	mov	sl, #2
   15548:	b	1540c <__assert_fail@plt+0x3f2c>
   1554c:	ldr	r3, [sp, #32]
   15550:	cmp	r3, #0
   15554:	beq	15514 <__assert_fail@plt+0x4034>
   15558:	mov	r3, #1
   1555c:	str	r3, [sp, #60]	; 0x3c
   15560:	ldr	r3, [pc, #3712]	; 163e8 <__assert_fail@plt+0x4f08>
   15564:	str	r3, [sp, #72]	; 0x48
   15568:	mov	fp, #0
   1556c:	b	1540c <__assert_fail@plt+0x3f2c>
   15570:	bl	114bc <abort@plt>
   15574:	mov	r3, #0
   15578:	str	r3, [sp, #32]
   1557c:	mov	r3, #1
   15580:	str	r3, [sp, #48]	; 0x30
   15584:	mov	fp, #0
   15588:	b	1540c <__assert_fail@plt+0x3f2c>
   1558c:	ldr	r3, [sp, #32]
   15590:	str	r3, [sp, #48]	; 0x30
   15594:	mov	r3, #1
   15598:	str	r3, [sp, #60]	; 0x3c
   1559c:	ldr	r3, [pc, #3660]	; 163f0 <__assert_fail@plt+0x4f10>
   155a0:	str	r3, [sp, #72]	; 0x48
   155a4:	mov	fp, #0
   155a8:	b	1540c <__assert_fail@plt+0x3f2c>
   155ac:	mov	r3, #1
   155b0:	str	r3, [sp, #48]	; 0x30
   155b4:	str	r3, [sp, #60]	; 0x3c
   155b8:	ldr	r3, [pc, #3632]	; 163f0 <__assert_fail@plt+0x4f10>
   155bc:	str	r3, [sp, #72]	; 0x48
   155c0:	mov	fp, #1
   155c4:	b	1540c <__assert_fail@plt+0x3f2c>
   155c8:	mov	r3, #1
   155cc:	str	r3, [sp, #60]	; 0x3c
   155d0:	ldr	r3, [pc, #3600]	; 163e8 <__assert_fail@plt+0x4f08>
   155d4:	str	r3, [sp, #72]	; 0x48
   155d8:	mov	fp, #0
   155dc:	mov	sl, #2
   155e0:	b	1540c <__assert_fail@plt+0x3f2c>
   155e4:	mov	r3, #0
   155e8:	str	r3, [sp, #32]
   155ec:	mov	r3, #1
   155f0:	str	r3, [sp, #60]	; 0x3c
   155f4:	ldr	r3, [pc, #3564]	; 163e8 <__assert_fail@plt+0x4f08>
   155f8:	str	r3, [sp, #72]	; 0x48
   155fc:	mov	fp, #1
   15600:	mov	sl, #2
   15604:	b	1540c <__assert_fail@plt+0x3f2c>
   15608:	mov	r3, #0
   1560c:	str	r3, [sp, #56]	; 0x38
   15610:	ldr	r3, [sp, #52]	; 0x34
   15614:	add	r2, r3, r6
   15618:	str	r2, [sp, #64]	; 0x40
   1561c:	ldrb	r4, [r3, r6]
   15620:	cmp	r4, #126	; 0x7e
   15624:	ldrls	pc, [pc, r4, lsl #2]
   15628:	b	15e64 <__assert_fail@plt+0x4984>
   1562c:	andeq	r5, r1, r4, asr #16
   15630:	andeq	r5, r1, r4, ror #28
   15634:	andeq	r5, r1, r4, ror #28
   15638:	andeq	r5, r1, r4, ror #28
   1563c:	andeq	r5, r1, r4, ror #28
   15640:	andeq	r5, r1, r4, ror #28
   15644:	andeq	r5, r1, r4, ror #28
   15648:	andeq	r5, r1, r0, lsr #23
   1564c:	andeq	r5, r1, ip, lsr r8
   15650:	andeq	r5, r1, r8, asr fp
   15654:	andeq	r5, r1, r0, asr fp
   15658:	andeq	r5, r1, r0, asr #21
   1565c:			; <UNDEFINED> instruction: 0x00015ab8
   15660:	andeq	r5, r1, r4, lsr r8
   15664:	andeq	r5, r1, r4, ror #28
   15668:	andeq	r5, r1, r4, ror #28
   1566c:	andeq	r5, r1, r4, ror #28
   15670:	andeq	r5, r1, r4, ror #28
   15674:	andeq	r5, r1, r4, ror #28
   15678:	andeq	r5, r1, r4, ror #28
   1567c:	andeq	r5, r1, r4, ror #28
   15680:	andeq	r5, r1, r4, ror #28
   15684:	andeq	r5, r1, r4, ror #28
   15688:	andeq	r5, r1, r4, ror #28
   1568c:	andeq	r5, r1, r4, ror #28
   15690:	andeq	r5, r1, r4, ror #28
   15694:	andeq	r5, r1, r4, ror #28
   15698:	andeq	r5, r1, r4, ror #28
   1569c:	andeq	r5, r1, r4, ror #28
   156a0:	andeq	r5, r1, r4, ror #28
   156a4:	andeq	r5, r1, r4, ror #28
   156a8:	andeq	r5, r1, r4, ror #28
   156ac:	strdeq	r5, [r1], -r4
   156b0:	strdeq	r5, [r1], -r0
   156b4:	strdeq	r5, [r1], -r0
   156b8:	andeq	r5, r1, r8, asr #23
   156bc:	strdeq	r5, [r1], -r0
   156c0:	andeq	r6, r1, r8, lsr r2
   156c4:	strdeq	r5, [r1], -r0
   156c8:	andeq	r5, r1, r8, asr #27
   156cc:	strdeq	r5, [r1], -r0
   156d0:	strdeq	r5, [r1], -r0
   156d4:	strdeq	r5, [r1], -r0
   156d8:	andeq	r6, r1, r8, lsr r2
   156dc:	andeq	r6, r1, r8, lsr r2
   156e0:	andeq	r6, r1, r8, lsr r2
   156e4:	andeq	r6, r1, r8, lsr r2
   156e8:	andeq	r6, r1, r8, lsr r2
   156ec:	andeq	r6, r1, r8, lsr r2
   156f0:	andeq	r6, r1, r8, lsr r2
   156f4:	andeq	r6, r1, r8, lsr r2
   156f8:	andeq	r6, r1, r8, lsr r2
   156fc:	andeq	r6, r1, r8, lsr r2
   15700:	andeq	r6, r1, r8, lsr r2
   15704:	andeq	r6, r1, r8, lsr r2
   15708:	andeq	r6, r1, r8, lsr r2
   1570c:	andeq	r6, r1, r8, lsr r2
   15710:	andeq	r6, r1, r8, lsr r2
   15714:	andeq	r6, r1, r8, lsr r2
   15718:	strdeq	r5, [r1], -r0
   1571c:	strdeq	r5, [r1], -r0
   15720:	strdeq	r5, [r1], -r0
   15724:	strdeq	r5, [r1], -r0
   15728:	andeq	r5, r1, ip, asr #18
   1572c:	andeq	r5, r1, r4, ror #28
   15730:	andeq	r6, r1, r8, lsr r2
   15734:	andeq	r6, r1, r8, lsr r2
   15738:	andeq	r6, r1, r8, lsr r2
   1573c:	andeq	r6, r1, r8, lsr r2
   15740:	andeq	r6, r1, r8, lsr r2
   15744:	andeq	r6, r1, r8, lsr r2
   15748:	andeq	r6, r1, r8, lsr r2
   1574c:	andeq	r6, r1, r8, lsr r2
   15750:	andeq	r6, r1, r8, lsr r2
   15754:	andeq	r6, r1, r8, lsr r2
   15758:	andeq	r6, r1, r8, lsr r2
   1575c:	andeq	r6, r1, r8, lsr r2
   15760:	andeq	r6, r1, r8, lsr r2
   15764:	andeq	r6, r1, r8, lsr r2
   15768:	andeq	r6, r1, r8, lsr r2
   1576c:	andeq	r6, r1, r8, lsr r2
   15770:	andeq	r6, r1, r8, lsr r2
   15774:	andeq	r6, r1, r8, lsr r2
   15778:	andeq	r6, r1, r8, lsr r2
   1577c:	andeq	r6, r1, r8, lsr r2
   15780:	andeq	r6, r1, r8, lsr r2
   15784:	andeq	r6, r1, r8, lsr r2
   15788:	andeq	r6, r1, r8, lsr r2
   1578c:	andeq	r6, r1, r8, lsr r2
   15790:	andeq	r6, r1, r8, lsr r2
   15794:	andeq	r6, r1, r8, lsr r2
   15798:	strdeq	r5, [r1], -r0
   1579c:	andeq	r5, r1, r8, asr #21
   157a0:	andeq	r6, r1, r8, lsr r2
   157a4:	strdeq	r5, [r1], -r0
   157a8:	andeq	r6, r1, r8, lsr r2
   157ac:	strdeq	r5, [r1], -r0
   157b0:	andeq	r6, r1, r8, lsr r2
   157b4:	andeq	r6, r1, r8, lsr r2
   157b8:	andeq	r6, r1, r8, lsr r2
   157bc:	andeq	r6, r1, r8, lsr r2
   157c0:	andeq	r6, r1, r8, lsr r2
   157c4:	andeq	r6, r1, r8, lsr r2
   157c8:	andeq	r6, r1, r8, lsr r2
   157cc:	andeq	r6, r1, r8, lsr r2
   157d0:	andeq	r6, r1, r8, lsr r2
   157d4:	andeq	r6, r1, r8, lsr r2
   157d8:	andeq	r6, r1, r8, lsr r2
   157dc:	andeq	r6, r1, r8, lsr r2
   157e0:	andeq	r6, r1, r8, lsr r2
   157e4:	andeq	r6, r1, r8, lsr r2
   157e8:	andeq	r6, r1, r8, lsr r2
   157ec:	andeq	r6, r1, r8, lsr r2
   157f0:	andeq	r6, r1, r8, lsr r2
   157f4:	andeq	r6, r1, r8, lsr r2
   157f8:	andeq	r6, r1, r8, lsr r2
   157fc:	andeq	r6, r1, r8, lsr r2
   15800:	andeq	r6, r1, r8, lsr r2
   15804:	andeq	r6, r1, r8, lsr r2
   15808:	andeq	r6, r1, r8, lsr r2
   1580c:	andeq	r6, r1, r8, lsr r2
   15810:	andeq	r6, r1, r8, lsr r2
   15814:	andeq	r6, r1, r8, lsr r2
   15818:	andeq	r5, r1, r8, lsr #23
   1581c:	strdeq	r5, [r1], -r0
   15820:	andeq	r5, r1, r8, lsr #23
   15824:	andeq	r5, r1, r8, asr #23
   15828:	mov	r3, #0
   1582c:	str	r3, [sp, #56]	; 0x38
   15830:	b	15610 <__assert_fail@plt+0x4130>
   15834:	mov	r3, #114	; 0x72
   15838:	b	15b5c <__assert_fail@plt+0x467c>
   1583c:	mov	r3, #98	; 0x62
   15840:	b	15b74 <__assert_fail@plt+0x4694>
   15844:	ldr	r3, [sp, #48]	; 0x30
   15848:	cmp	r3, #0
   1584c:	beq	15934 <__assert_fail@plt+0x4454>
   15850:	ldr	r3, [sp, #32]
   15854:	cmp	r3, #0
   15858:	bne	163bc <__assert_fail@plt+0x4edc>
   1585c:	ldr	r3, [sp, #44]	; 0x2c
   15860:	eor	r3, r3, #1
   15864:	cmp	sl, #2
   15868:	movne	r3, #0
   1586c:	andeq	r3, r3, #1
   15870:	cmp	r3, #0
   15874:	moveq	r2, fp
   15878:	beq	158bc <__assert_fail@plt+0x43dc>
   1587c:	cmp	r7, fp
   15880:	ldrhi	r2, [sp, #36]	; 0x24
   15884:	movhi	r1, #39	; 0x27
   15888:	strbhi	r1, [r2, fp]
   1588c:	add	r2, fp, #1
   15890:	cmp	r7, r2
   15894:	ldrhi	r1, [sp, #36]	; 0x24
   15898:	movhi	r0, #36	; 0x24
   1589c:	strbhi	r0, [r1, r2]
   158a0:	add	r2, fp, #2
   158a4:	cmp	r7, r2
   158a8:	ldrhi	r1, [sp, #36]	; 0x24
   158ac:	movhi	r0, #39	; 0x27
   158b0:	strbhi	r0, [r1, r2]
   158b4:	add	r2, fp, #3
   158b8:	str	r3, [sp, #44]	; 0x2c
   158bc:	cmp	r7, r2
   158c0:	ldrhi	r3, [sp, #36]	; 0x24
   158c4:	movhi	r1, #92	; 0x5c
   158c8:	strbhi	r1, [r3, r2]
   158cc:	add	fp, r2, #1
   158d0:	cmp	r5, #0
   158d4:	beq	16240 <__assert_fail@plt+0x4d60>
   158d8:	add	r3, r6, #1
   158dc:	ldr	r1, [sp, #28]
   158e0:	cmp	r1, r3
   158e4:	bls	16250 <__assert_fail@plt+0x4d70>
   158e8:	ldr	r1, [sp, #52]	; 0x34
   158ec:	ldrb	r3, [r1, r3]
   158f0:	sub	r3, r3, #48	; 0x30
   158f4:	uxtb	r3, r3
   158f8:	cmp	r3, #9
   158fc:	bhi	1625c <__assert_fail@plt+0x4d7c>
   15900:	cmp	r7, fp
   15904:	movhi	r3, #48	; 0x30
   15908:	ldrhi	r1, [sp, #36]	; 0x24
   1590c:	strbhi	r3, [r1, fp]
   15910:	add	r3, r2, #2
   15914:	cmp	r7, r3
   15918:	movhi	r1, #48	; 0x30
   1591c:	ldrhi	r0, [sp, #36]	; 0x24
   15920:	strbhi	r1, [r0, r3]
   15924:	add	fp, r2, #3
   15928:	ldr	r8, [sp, #32]
   1592c:	mov	r4, #48	; 0x30
   15930:	b	15c0c <__assert_fail@plt+0x472c>
   15934:	ldr	r3, [sp, #156]	; 0x9c
   15938:	tst	r3, #1
   1593c:	bne	15d00 <__assert_fail@plt+0x4820>
   15940:	ldr	r5, [sp, #48]	; 0x30
   15944:	mov	r8, r5
   15948:	b	15c0c <__assert_fail@plt+0x472c>
   1594c:	cmp	sl, #2
   15950:	beq	15968 <__assert_fail@plt+0x4488>
   15954:	cmp	sl, #5
   15958:	beq	15980 <__assert_fail@plt+0x44a0>
   1595c:	mov	r8, #0
   15960:	mov	r5, r8
   15964:	b	15c0c <__assert_fail@plt+0x472c>
   15968:	ldr	r3, [sp, #32]
   1596c:	cmp	r3, #0
   15970:	bne	163d0 <__assert_fail@plt+0x4ef0>
   15974:	mov	r8, r3
   15978:	mov	r5, r3
   1597c:	b	15c0c <__assert_fail@plt+0x472c>
   15980:	ldr	r3, [sp, #156]	; 0x9c
   15984:	tst	r3, #4
   15988:	beq	16268 <__assert_fail@plt+0x4d88>
   1598c:	add	r3, r6, #2
   15990:	ldr	r2, [sp, #28]
   15994:	cmp	r2, r3
   15998:	bls	16274 <__assert_fail@plt+0x4d94>
   1599c:	ldr	r2, [sp, #52]	; 0x34
   159a0:	add	r2, r2, r6
   159a4:	ldrb	r2, [r2, #1]
   159a8:	cmp	r2, #63	; 0x3f
   159ac:	movne	r8, #0
   159b0:	movne	r5, r8
   159b4:	bne	15c0c <__assert_fail@plt+0x472c>
   159b8:	ldr	r2, [sp, #52]	; 0x34
   159bc:	ldrb	r2, [r2, r3]
   159c0:	sub	r1, r2, #33	; 0x21
   159c4:	cmp	r1, #29
   159c8:	ldrls	pc, [pc, r1, lsl #2]
   159cc:	b	16280 <__assert_fail@plt+0x4da0>
   159d0:	andeq	r5, r1, r8, asr #20
   159d4:	andeq	r6, r1, r0, lsl #5
   159d8:	andeq	r6, r1, r0, lsl #5
   159dc:	andeq	r6, r1, r0, lsl #5
   159e0:	andeq	r6, r1, r0, lsl #5
   159e4:	andeq	r6, r1, r0, lsl #5
   159e8:	andeq	r5, r1, r8, asr #20
   159ec:	andeq	r5, r1, r8, asr #20
   159f0:	andeq	r5, r1, r8, asr #20
   159f4:	andeq	r6, r1, r0, lsl #5
   159f8:	andeq	r6, r1, r0, lsl #5
   159fc:	andeq	r6, r1, r0, lsl #5
   15a00:	andeq	r5, r1, r8, asr #20
   15a04:	andeq	r6, r1, r0, lsl #5
   15a08:	andeq	r5, r1, r8, asr #20
   15a0c:	andeq	r6, r1, r0, lsl #5
   15a10:	andeq	r6, r1, r0, lsl #5
   15a14:	andeq	r6, r1, r0, lsl #5
   15a18:	andeq	r6, r1, r0, lsl #5
   15a1c:	andeq	r6, r1, r0, lsl #5
   15a20:	andeq	r6, r1, r0, lsl #5
   15a24:	andeq	r6, r1, r0, lsl #5
   15a28:	andeq	r6, r1, r0, lsl #5
   15a2c:	andeq	r6, r1, r0, lsl #5
   15a30:	andeq	r6, r1, r0, lsl #5
   15a34:	andeq	r6, r1, r0, lsl #5
   15a38:	andeq	r6, r1, r0, lsl #5
   15a3c:	andeq	r5, r1, r8, asr #20
   15a40:	andeq	r5, r1, r8, asr #20
   15a44:	andeq	r5, r1, r8, asr #20
   15a48:	ldr	r1, [sp, #32]
   15a4c:	cmp	r1, #0
   15a50:	bne	16490 <__assert_fail@plt+0x4fb0>
   15a54:	cmp	r7, fp
   15a58:	movhi	r1, #63	; 0x3f
   15a5c:	ldrhi	r0, [sp, #36]	; 0x24
   15a60:	strbhi	r1, [r0, fp]
   15a64:	add	r1, fp, #1
   15a68:	cmp	r7, r1
   15a6c:	ldrhi	r0, [sp, #36]	; 0x24
   15a70:	movhi	ip, #34	; 0x22
   15a74:	strbhi	ip, [r0, r1]
   15a78:	add	r1, fp, #2
   15a7c:	cmp	r7, r1
   15a80:	ldrhi	r0, [sp, #36]	; 0x24
   15a84:	movhi	ip, #34	; 0x22
   15a88:	strbhi	ip, [r0, r1]
   15a8c:	add	r1, fp, #3
   15a90:	cmp	r7, r1
   15a94:	movhi	r0, #63	; 0x3f
   15a98:	ldrhi	ip, [sp, #36]	; 0x24
   15a9c:	strbhi	r0, [ip, r1]
   15aa0:	add	fp, fp, #4
   15aa4:	ldr	r5, [sp, #32]
   15aa8:	mov	r8, r5
   15aac:	mov	r4, r2
   15ab0:	mov	r6, r3
   15ab4:	b	15c0c <__assert_fail@plt+0x472c>
   15ab8:	mov	r3, #102	; 0x66
   15abc:	b	15b74 <__assert_fail@plt+0x4694>
   15ac0:	mov	r3, #118	; 0x76
   15ac4:	b	15b74 <__assert_fail@plt+0x4694>
   15ac8:	cmp	sl, #2
   15acc:	beq	15b38 <__assert_fail@plt+0x4658>
   15ad0:	ldr	r3, [sp, #48]	; 0x30
   15ad4:	ldr	r2, [sp, #32]
   15ad8:	and	r3, r3, r2
   15adc:	tst	r9, r3
   15ae0:	moveq	r3, r4
   15ae4:	beq	15b74 <__assert_fail@plt+0x4694>
   15ae8:	mov	r8, #0
   15aec:	mov	r5, r8
   15af0:	eor	r5, r5, #1
   15af4:	ldr	r3, [sp, #44]	; 0x2c
   15af8:	and	r5, r5, r3
   15afc:	tst	r5, #255	; 0xff
   15b00:	beq	15ce0 <__assert_fail@plt+0x4800>
   15b04:	cmp	r7, fp
   15b08:	ldrhi	r3, [sp, #36]	; 0x24
   15b0c:	movhi	r2, #39	; 0x27
   15b10:	strbhi	r2, [r3, fp]
   15b14:	add	r3, fp, #1
   15b18:	cmp	r7, r3
   15b1c:	ldrhi	r2, [sp, #36]	; 0x24
   15b20:	movhi	r1, #39	; 0x27
   15b24:	strbhi	r1, [r2, r3]
   15b28:	add	fp, fp, #2
   15b2c:	mov	r3, #0
   15b30:	str	r3, [sp, #44]	; 0x2c
   15b34:	b	15ce0 <__assert_fail@plt+0x4800>
   15b38:	ldr	r3, [sp, #32]
   15b3c:	cmp	r3, #0
   15b40:	bne	163dc <__assert_fail@plt+0x4efc>
   15b44:	mov	r8, r3
   15b48:	mov	r5, r3
   15b4c:	b	15af0 <__assert_fail@plt+0x4610>
   15b50:	mov	r3, #110	; 0x6e
   15b54:	b	15b5c <__assert_fail@plt+0x467c>
   15b58:	mov	r3, #116	; 0x74
   15b5c:	ldr	r2, [sp, #32]
   15b60:	cmp	sl, #2
   15b64:	movne	r2, #0
   15b68:	andeq	r2, r2, #1
   15b6c:	cmp	r2, #0
   15b70:	bne	15b94 <__assert_fail@plt+0x46b4>
   15b74:	ldr	r2, [sp, #48]	; 0x30
   15b78:	cmp	r2, #0
   15b7c:	moveq	r8, r2
   15b80:	moveq	r5, r2
   15b84:	beq	15c0c <__assert_fail@plt+0x472c>
   15b88:	mov	r4, r3
   15b8c:	mov	r8, #0
   15b90:	b	15c64 <__assert_fail@plt+0x4784>
   15b94:	mov	r8, sl
   15b98:	mov	sl, r7
   15b9c:	b	16408 <__assert_fail@plt+0x4f28>
   15ba0:	mov	r3, #97	; 0x61
   15ba4:	b	15b74 <__assert_fail@plt+0x4694>
   15ba8:	ldr	r3, [sp, #28]
   15bac:	cmn	r3, #1
   15bb0:	beq	15bdc <__assert_fail@plt+0x46fc>
   15bb4:	ldr	r3, [sp, #28]
   15bb8:	subs	r3, r3, #1
   15bbc:	movne	r3, #1
   15bc0:	cmp	r3, #0
   15bc4:	bne	1628c <__assert_fail@plt+0x4dac>
   15bc8:	cmp	r6, #0
   15bcc:	beq	15bf4 <__assert_fail@plt+0x4714>
   15bd0:	mov	r8, #0
   15bd4:	mov	r5, r8
   15bd8:	b	15c0c <__assert_fail@plt+0x472c>
   15bdc:	ldr	r3, [sp, #52]	; 0x34
   15be0:	ldrb	r3, [r3, #1]
   15be4:	adds	r3, r3, #0
   15be8:	movne	r3, #1
   15bec:	b	15bc0 <__assert_fail@plt+0x46e0>
   15bf0:	mov	r8, #0
   15bf4:	ldr	r5, [sp, #32]
   15bf8:	cmp	sl, #2
   15bfc:	movne	r5, #0
   15c00:	andeq	r5, r5, #1
   15c04:	cmp	r5, #0
   15c08:	bne	15dbc <__assert_fail@plt+0x48dc>
   15c0c:	ldr	r3, [sp, #68]	; 0x44
   15c10:	cmp	sl, #2
   15c14:	orreq	r3, r3, #1
   15c18:	eor	r3, r3, #1
   15c1c:	ldr	r2, [sp, #32]
   15c20:	orr	r3, r2, r3
   15c24:	tst	r3, #255	; 0xff
   15c28:	beq	15c58 <__assert_fail@plt+0x4778>
   15c2c:	ldr	r3, [sp, #160]	; 0xa0
   15c30:	cmp	r3, #0
   15c34:	beq	15c58 <__assert_fail@plt+0x4778>
   15c38:	lsr	r2, r4, #5
   15c3c:	uxtb	r2, r2
   15c40:	and	r3, r4, #31
   15c44:	ldr	r1, [sp, #160]	; 0xa0
   15c48:	ldr	r2, [r1, r2, lsl #2]
   15c4c:	lsr	r3, r2, r3
   15c50:	tst	r3, #1
   15c54:	bne	15c64 <__assert_fail@plt+0x4784>
   15c58:	ldr	r3, [sp, #56]	; 0x38
   15c5c:	cmp	r3, #0
   15c60:	beq	15af0 <__assert_fail@plt+0x4610>
   15c64:	ldr	r3, [sp, #32]
   15c68:	cmp	r3, #0
   15c6c:	bne	16478 <__assert_fail@plt+0x4f98>
   15c70:	ldr	r3, [sp, #44]	; 0x2c
   15c74:	eor	r3, r3, #1
   15c78:	cmp	sl, #2
   15c7c:	movne	r3, #0
   15c80:	andeq	r3, r3, #1
   15c84:	cmp	r3, #0
   15c88:	beq	15ccc <__assert_fail@plt+0x47ec>
   15c8c:	cmp	r7, fp
   15c90:	ldrhi	r2, [sp, #36]	; 0x24
   15c94:	movhi	r1, #39	; 0x27
   15c98:	strbhi	r1, [r2, fp]
   15c9c:	add	r2, fp, #1
   15ca0:	cmp	r7, r2
   15ca4:	ldrhi	r1, [sp, #36]	; 0x24
   15ca8:	movhi	r0, #36	; 0x24
   15cac:	strbhi	r0, [r1, r2]
   15cb0:	add	r2, fp, #2
   15cb4:	cmp	r7, r2
   15cb8:	ldrhi	r1, [sp, #36]	; 0x24
   15cbc:	movhi	r0, #39	; 0x27
   15cc0:	strbhi	r0, [r1, r2]
   15cc4:	add	fp, fp, #3
   15cc8:	str	r3, [sp, #44]	; 0x2c
   15ccc:	cmp	r7, fp
   15cd0:	ldrhi	r3, [sp, #36]	; 0x24
   15cd4:	movhi	r2, #92	; 0x5c
   15cd8:	strbhi	r2, [r3, fp]
   15cdc:	add	fp, fp, #1
   15ce0:	cmp	fp, r7
   15ce4:	ldrcc	r3, [sp, #36]	; 0x24
   15ce8:	strbcc	r4, [r3, fp]
   15cec:	add	fp, fp, #1
   15cf0:	ldr	r3, [sp, #40]	; 0x28
   15cf4:	cmp	r8, #0
   15cf8:	moveq	r3, #0
   15cfc:	str	r3, [sp, #40]	; 0x28
   15d00:	add	r6, r6, #1
   15d04:	ldr	r3, [sp, #28]
   15d08:	cmn	r3, #1
   15d0c:	beq	16298 <__assert_fail@plt+0x4db8>
   15d10:	ldr	r3, [sp, #28]
   15d14:	subs	r8, r3, r6
   15d18:	movne	r8, #1
   15d1c:	cmp	r8, #0
   15d20:	beq	162ac <__assert_fail@plt+0x4dcc>
   15d24:	ldr	r5, [sp, #48]	; 0x30
   15d28:	cmp	sl, #2
   15d2c:	moveq	r5, #0
   15d30:	andne	r5, r5, #1
   15d34:	ldr	r3, [sp, #60]	; 0x3c
   15d38:	adds	r9, r3, #0
   15d3c:	movne	r9, #1
   15d40:	ands	r2, r5, r9
   15d44:	str	r2, [sp, #56]	; 0x38
   15d48:	beq	15610 <__assert_fail@plt+0x4130>
   15d4c:	add	r4, r6, r3
   15d50:	ldr	r2, [sp, #28]
   15d54:	cmp	r3, #1
   15d58:	movls	r3, #0
   15d5c:	movhi	r3, #1
   15d60:	cmn	r2, #1
   15d64:	movne	r3, #0
   15d68:	cmp	r3, #0
   15d6c:	beq	15d7c <__assert_fail@plt+0x489c>
   15d70:	ldr	r0, [sp, #52]	; 0x34
   15d74:	bl	11354 <strlen@plt>
   15d78:	str	r0, [sp, #28]
   15d7c:	ldr	r3, [sp, #28]
   15d80:	cmp	r3, r4
   15d84:	bcc	15608 <__assert_fail@plt+0x4128>
   15d88:	ldr	r2, [sp, #60]	; 0x3c
   15d8c:	ldr	r1, [sp, #72]	; 0x48
   15d90:	ldr	r3, [sp, #52]	; 0x34
   15d94:	add	r0, r3, r6
   15d98:	bl	11204 <memcmp@plt>
   15d9c:	cmp	r0, #0
   15da0:	bne	15828 <__assert_fail@plt+0x4348>
   15da4:	ldr	r3, [sp, #32]
   15da8:	cmp	r3, #0
   15dac:	beq	15610 <__assert_fail@plt+0x4130>
   15db0:	mov	r8, sl
   15db4:	mov	sl, r7
   15db8:	b	16408 <__assert_fail@plt+0x4f28>
   15dbc:	mov	r8, sl
   15dc0:	mov	sl, r7
   15dc4:	b	16408 <__assert_fail@plt+0x4f28>
   15dc8:	cmp	sl, #2
   15dcc:	strne	r8, [sp, #80]	; 0x50
   15dd0:	movne	r5, #0
   15dd4:	bne	15c0c <__assert_fail@plt+0x472c>
   15dd8:	ldr	r3, [sp, #32]
   15ddc:	cmp	r3, #0
   15de0:	bne	163f4 <__assert_fail@plt+0x4f14>
   15de4:	ldr	r2, [sp, #76]	; 0x4c
   15de8:	adds	r3, r7, #0
   15dec:	movne	r3, #1
   15df0:	cmp	r2, #0
   15df4:	movne	r3, #0
   15df8:	cmp	r3, #0
   15dfc:	movne	r3, #0
   15e00:	bne	15e30 <__assert_fail@plt+0x4950>
   15e04:	cmp	r7, fp
   15e08:	ldrhi	r3, [sp, #36]	; 0x24
   15e0c:	movhi	r2, #39	; 0x27
   15e10:	strbhi	r2, [r3, fp]
   15e14:	add	r3, fp, #1
   15e18:	cmp	r7, r3
   15e1c:	ldrhi	r2, [sp, #36]	; 0x24
   15e20:	movhi	r1, #92	; 0x5c
   15e24:	strbhi	r1, [r2, r3]
   15e28:	mov	r3, r7
   15e2c:	ldr	r7, [sp, #76]	; 0x4c
   15e30:	add	r2, fp, #2
   15e34:	cmp	r2, r3
   15e38:	ldrcc	r1, [sp, #36]	; 0x24
   15e3c:	movcc	r0, #39	; 0x27
   15e40:	strbcc	r0, [r1, r2]
   15e44:	add	fp, fp, #3
   15e48:	ldr	r2, [sp, #32]
   15e4c:	mov	r5, r2
   15e50:	str	r8, [sp, #80]	; 0x50
   15e54:	str	r2, [sp, #44]	; 0x2c
   15e58:	str	r7, [sp, #76]	; 0x4c
   15e5c:	mov	r7, r3
   15e60:	b	15c0c <__assert_fail@plt+0x472c>
   15e64:	ldr	r5, [sp, #84]	; 0x54
   15e68:	cmp	r5, #1
   15e6c:	beq	15e9c <__assert_fail@plt+0x49bc>
   15e70:	mov	r3, #0
   15e74:	str	r3, [sp, #104]	; 0x68
   15e78:	str	r3, [sp, #108]	; 0x6c
   15e7c:	ldr	r3, [sp, #28]
   15e80:	cmn	r3, #1
   15e84:	beq	15ed0 <__assert_fail@plt+0x49f0>
   15e88:	mov	r3, #0
   15e8c:	str	r4, [sp, #88]	; 0x58
   15e90:	str	fp, [sp, #92]	; 0x5c
   15e94:	mov	fp, r3
   15e98:	b	15ff8 <__assert_fail@plt+0x4b18>
   15e9c:	bl	1133c <__ctype_b_loc@plt>
   15ea0:	ldr	r2, [r0]
   15ea4:	lsl	r3, r4, #1
   15ea8:	ldrh	r8, [r2, r3]
   15eac:	lsr	r8, r8, #14
   15eb0:	and	r8, r8, #1
   15eb4:	mov	r2, r5
   15eb8:	eor	r5, r8, #1
   15ebc:	ldr	r3, [sp, #48]	; 0x30
   15ec0:	and	r5, r5, r3
   15ec4:	ands	r5, r5, #255	; 0xff
   15ec8:	beq	15c0c <__assert_fail@plt+0x472c>
   15ecc:	b	16090 <__assert_fail@plt+0x4bb0>
   15ed0:	ldr	r0, [sp, #52]	; 0x34
   15ed4:	bl	11354 <strlen@plt>
   15ed8:	str	r0, [sp, #28]
   15edc:	b	15e88 <__assert_fail@plt+0x49a8>
   15ee0:	mov	r2, fp
   15ee4:	mov	r1, r4
   15ee8:	ldr	r4, [sp, #88]	; 0x58
   15eec:	ldr	fp, [sp, #92]	; 0x5c
   15ef0:	ldr	r0, [sp, #28]
   15ef4:	cmp	r0, r5
   15ef8:	bls	160c4 <__assert_fail@plt+0x4be4>
   15efc:	ldrb	r3, [r1]
   15f00:	cmp	r3, #0
   15f04:	beq	160cc <__assert_fail@plt+0x4bec>
   15f08:	mov	r3, r1
   15f0c:	add	r2, r2, #1
   15f10:	add	r1, r6, r2
   15f14:	cmp	r0, r1
   15f18:	bls	160d4 <__assert_fail@plt+0x4bf4>
   15f1c:	ldrb	r1, [r3, #1]!
   15f20:	cmp	r1, #0
   15f24:	bne	15f0c <__assert_fail@plt+0x4a2c>
   15f28:	mov	r8, #0
   15f2c:	b	16088 <__assert_fail@plt+0x4ba8>
   15f30:	cmp	r4, r5
   15f34:	beq	15fd4 <__assert_fail@plt+0x4af4>
   15f38:	ldrb	r3, [r4, #1]!
   15f3c:	sub	r3, r3, #91	; 0x5b
   15f40:	cmp	r3, #33	; 0x21
   15f44:	ldrls	pc, [pc, r3, lsl #2]
   15f48:	b	15f30 <__assert_fail@plt+0x4a50>
   15f4c:	andeq	r6, r1, r0, lsl #8
   15f50:	andeq	r6, r1, r0, lsl #8
   15f54:	andeq	r5, r1, r0, lsr pc
   15f58:	andeq	r6, r1, r0, lsl #8
   15f5c:	andeq	r5, r1, r0, lsr pc
   15f60:	andeq	r6, r1, r0, lsl #8
   15f64:	andeq	r5, r1, r0, lsr pc
   15f68:	andeq	r5, r1, r0, lsr pc
   15f6c:	andeq	r5, r1, r0, lsr pc
   15f70:	andeq	r5, r1, r0, lsr pc
   15f74:	andeq	r5, r1, r0, lsr pc
   15f78:	andeq	r5, r1, r0, lsr pc
   15f7c:	andeq	r5, r1, r0, lsr pc
   15f80:	andeq	r5, r1, r0, lsr pc
   15f84:	andeq	r5, r1, r0, lsr pc
   15f88:	andeq	r5, r1, r0, lsr pc
   15f8c:	andeq	r5, r1, r0, lsr pc
   15f90:	andeq	r5, r1, r0, lsr pc
   15f94:	andeq	r5, r1, r0, lsr pc
   15f98:	andeq	r5, r1, r0, lsr pc
   15f9c:	andeq	r5, r1, r0, lsr pc
   15fa0:	andeq	r5, r1, r0, lsr pc
   15fa4:	andeq	r5, r1, r0, lsr pc
   15fa8:	andeq	r5, r1, r0, lsr pc
   15fac:	andeq	r5, r1, r0, lsr pc
   15fb0:	andeq	r5, r1, r0, lsr pc
   15fb4:	andeq	r5, r1, r0, lsr pc
   15fb8:	andeq	r5, r1, r0, lsr pc
   15fbc:	andeq	r5, r1, r0, lsr pc
   15fc0:	andeq	r5, r1, r0, lsr pc
   15fc4:	andeq	r5, r1, r0, lsr pc
   15fc8:	andeq	r5, r1, r0, lsr pc
   15fcc:	andeq	r5, r1, r0, lsr pc
   15fd0:	andeq	r6, r1, r0, lsl #8
   15fd4:	ldr	r0, [sp, #100]	; 0x64
   15fd8:	bl	11258 <iswprint@plt>
   15fdc:	cmp	r0, #0
   15fe0:	moveq	r8, #0
   15fe4:	add	fp, fp, r9
   15fe8:	add	r0, sp, #104	; 0x68
   15fec:	bl	111e0 <mbsinit@plt>
   15ff0:	cmp	r0, #0
   15ff4:	bne	16068 <__assert_fail@plt+0x4b88>
   15ff8:	add	r5, r6, fp
   15ffc:	ldr	r3, [sp, #52]	; 0x34
   16000:	add	r4, r3, r5
   16004:	add	r3, sp, #104	; 0x68
   16008:	ldr	r2, [sp, #28]
   1600c:	sub	r2, r2, r5
   16010:	mov	r1, r4
   16014:	add	r0, sp, #100	; 0x64
   16018:	bl	18424 <__assert_fail@plt+0x6f44>
   1601c:	subs	r9, r0, #0
   16020:	beq	160dc <__assert_fail@plt+0x4bfc>
   16024:	cmn	r9, #1
   16028:	beq	16078 <__assert_fail@plt+0x4b98>
   1602c:	cmn	r9, #2
   16030:	beq	15ee0 <__assert_fail@plt+0x4a00>
   16034:	ldr	r3, [sp, #32]
   16038:	cmp	sl, #2
   1603c:	movne	r3, #0
   16040:	andeq	r3, r3, #1
   16044:	cmp	r3, #0
   16048:	beq	15fd4 <__assert_fail@plt+0x4af4>
   1604c:	cmp	r9, #1
   16050:	bls	15fd4 <__assert_fail@plt+0x4af4>
   16054:	sub	r3, r9, #1
   16058:	add	r5, r3, r5
   1605c:	ldr	r3, [sp, #52]	; 0x34
   16060:	add	r5, r3, r5
   16064:	b	15f38 <__assert_fail@plt+0x4a58>
   16068:	ldr	r4, [sp, #88]	; 0x58
   1606c:	mov	r2, fp
   16070:	ldr	fp, [sp, #92]	; 0x5c
   16074:	b	16088 <__assert_fail@plt+0x4ba8>
   16078:	ldr	r4, [sp, #88]	; 0x58
   1607c:	mov	r2, fp
   16080:	ldr	fp, [sp, #92]	; 0x5c
   16084:	mov	r8, #0
   16088:	cmp	r2, #1
   1608c:	bls	15eb8 <__assert_fail@plt+0x49d8>
   16090:	add	r1, r6, r2
   16094:	ldr	ip, [sp, #64]	; 0x40
   16098:	mov	r5, #0
   1609c:	eor	r3, r8, #1
   160a0:	ldr	r2, [sp, #48]	; 0x30
   160a4:	and	r3, r3, r2
   160a8:	uxtb	r3, r3
   160ac:	ldr	r9, [sp, #32]
   160b0:	ldr	lr, [sp, #44]	; 0x2c
   160b4:	ldr	r2, [sp, #56]	; 0x38
   160b8:	str	r8, [sp, #56]	; 0x38
   160bc:	ldr	r0, [sp, #36]	; 0x24
   160c0:	b	1615c <__assert_fail@plt+0x4c7c>
   160c4:	mov	r8, #0
   160c8:	b	16088 <__assert_fail@plt+0x4ba8>
   160cc:	mov	r8, #0
   160d0:	b	16088 <__assert_fail@plt+0x4ba8>
   160d4:	mov	r8, #0
   160d8:	b	16088 <__assert_fail@plt+0x4ba8>
   160dc:	ldr	r4, [sp, #88]	; 0x58
   160e0:	mov	r2, fp
   160e4:	ldr	fp, [sp, #92]	; 0x5c
   160e8:	b	16088 <__assert_fail@plt+0x4ba8>
   160ec:	cmp	r2, #0
   160f0:	beq	16104 <__assert_fail@plt+0x4c24>
   160f4:	cmp	r7, fp
   160f8:	movhi	r2, #92	; 0x5c
   160fc:	strbhi	r2, [r0, fp]
   16100:	add	fp, fp, #1
   16104:	add	r8, r6, #1
   16108:	cmp	r1, r8
   1610c:	bls	16214 <__assert_fail@plt+0x4d34>
   16110:	eor	r2, r5, #1
   16114:	and	r2, r2, lr
   16118:	ands	r2, r2, #255	; 0xff
   1611c:	beq	16230 <__assert_fail@plt+0x4d50>
   16120:	cmp	r7, fp
   16124:	movhi	r2, #39	; 0x27
   16128:	strbhi	r2, [r0, fp]
   1612c:	add	r2, fp, #1
   16130:	cmp	r7, r2
   16134:	movhi	lr, #39	; 0x27
   16138:	strbhi	lr, [r0, r2]
   1613c:	add	fp, fp, #2
   16140:	mov	r6, r8
   16144:	mov	r2, r3
   16148:	mov	lr, r3
   1614c:	cmp	r7, fp
   16150:	strbhi	r4, [r0, fp]
   16154:	add	fp, fp, #1
   16158:	ldrb	r4, [ip, #1]!
   1615c:	cmp	r3, #0
   16160:	beq	160ec <__assert_fail@plt+0x4c0c>
   16164:	cmp	r9, #0
   16168:	bne	1646c <__assert_fail@plt+0x4f8c>
   1616c:	eor	r5, lr, #1
   16170:	cmp	sl, #2
   16174:	movne	r5, #0
   16178:	andeq	r5, r5, #1
   1617c:	cmp	r5, #0
   16180:	beq	161b8 <__assert_fail@plt+0x4cd8>
   16184:	cmp	r7, fp
   16188:	movhi	lr, #39	; 0x27
   1618c:	strbhi	lr, [r0, fp]
   16190:	add	lr, fp, #1
   16194:	cmp	r7, lr
   16198:	movhi	r8, #36	; 0x24
   1619c:	strbhi	r8, [r0, lr]
   161a0:	add	lr, fp, #2
   161a4:	cmp	r7, lr
   161a8:	movhi	r8, #39	; 0x27
   161ac:	strbhi	r8, [r0, lr]
   161b0:	add	fp, fp, #3
   161b4:	mov	lr, r5
   161b8:	cmp	r7, fp
   161bc:	movhi	r5, #92	; 0x5c
   161c0:	strbhi	r5, [r0, fp]
   161c4:	add	r5, fp, #1
   161c8:	cmp	r7, r5
   161cc:	lsrhi	r8, r4, #6
   161d0:	addhi	r8, r8, #48	; 0x30
   161d4:	strbhi	r8, [r0, r5]
   161d8:	add	r8, fp, #2
   161dc:	cmp	r7, r8
   161e0:	lsrhi	r5, r4, #3
   161e4:	andhi	r5, r5, #7
   161e8:	addhi	r5, r5, #48	; 0x30
   161ec:	strbhi	r5, [r0, r8]
   161f0:	add	fp, fp, #3
   161f4:	and	r4, r4, #7
   161f8:	add	r4, r4, #48	; 0x30
   161fc:	add	r5, r6, #1
   16200:	cmp	r1, r5
   16204:	bls	16220 <__assert_fail@plt+0x4d40>
   16208:	mov	r6, r5
   1620c:	mov	r5, r3
   16210:	b	1614c <__assert_fail@plt+0x4c6c>
   16214:	str	lr, [sp, #44]	; 0x2c
   16218:	ldr	r8, [sp, #56]	; 0x38
   1621c:	b	15af0 <__assert_fail@plt+0x4610>
   16220:	str	lr, [sp, #44]	; 0x2c
   16224:	ldr	r8, [sp, #56]	; 0x38
   16228:	mov	r5, r3
   1622c:	b	15af0 <__assert_fail@plt+0x4610>
   16230:	mov	r6, r8
   16234:	b	1614c <__assert_fail@plt+0x4c6c>
   16238:	mov	r5, #0
   1623c:	b	15c0c <__assert_fail@plt+0x472c>
   16240:	mov	r8, r5
   16244:	ldr	r5, [sp, #48]	; 0x30
   16248:	mov	r4, #48	; 0x30
   1624c:	b	15c0c <__assert_fail@plt+0x472c>
   16250:	ldr	r8, [sp, #32]
   16254:	mov	r4, #48	; 0x30
   16258:	b	15c0c <__assert_fail@plt+0x472c>
   1625c:	ldr	r8, [sp, #32]
   16260:	mov	r4, #48	; 0x30
   16264:	b	15c0c <__assert_fail@plt+0x472c>
   16268:	mov	r8, #0
   1626c:	mov	r5, r8
   16270:	b	15c0c <__assert_fail@plt+0x472c>
   16274:	mov	r8, #0
   16278:	mov	r5, r8
   1627c:	b	15c0c <__assert_fail@plt+0x472c>
   16280:	mov	r8, #0
   16284:	mov	r5, r8
   16288:	b	15c0c <__assert_fail@plt+0x472c>
   1628c:	mov	r8, #0
   16290:	mov	r5, r8
   16294:	b	15c0c <__assert_fail@plt+0x472c>
   16298:	ldr	r3, [sp, #52]	; 0x34
   1629c:	ldrb	r8, [r3, r6]
   162a0:	adds	r8, r8, #0
   162a4:	movne	r8, #1
   162a8:	b	15d1c <__assert_fail@plt+0x483c>
   162ac:	cmp	sl, #2
   162b0:	movne	r3, #0
   162b4:	moveq	r3, #1
   162b8:	ldr	r1, [sp, #32]
   162bc:	mov	r2, r1
   162c0:	and	r2, r2, r3
   162c4:	cmp	fp, #0
   162c8:	movne	r2, #0
   162cc:	andeq	r2, r2, #1
   162d0:	cmp	r2, #0
   162d4:	bne	16484 <__assert_fail@plt+0x4fa4>
   162d8:	eor	r2, r1, #1
   162dc:	and	r3, r3, r2
   162e0:	ldr	r1, [sp, #80]	; 0x50
   162e4:	tst	r1, r3
   162e8:	beq	16360 <__assert_fail@plt+0x4e80>
   162ec:	ldr	r3, [sp, #40]	; 0x28
   162f0:	cmp	r3, #0
   162f4:	bne	1631c <__assert_fail@plt+0x4e3c>
   162f8:	ldr	r1, [sp, #76]	; 0x4c
   162fc:	clz	r3, r7
   16300:	lsr	r3, r3, #5
   16304:	cmp	r1, #0
   16308:	moveq	r3, #0
   1630c:	cmp	r3, #0
   16310:	beq	16360 <__assert_fail@plt+0x4e80>
   16314:	ldr	r7, [sp, #76]	; 0x4c
   16318:	b	153b0 <__assert_fail@plt+0x3ed0>
   1631c:	ldr	r3, [sp, #168]	; 0xa8
   16320:	str	r3, [sp, #16]
   16324:	ldr	r3, [sp, #164]	; 0xa4
   16328:	str	r3, [sp, #12]
   1632c:	ldr	r3, [sp, #160]	; 0xa0
   16330:	str	r3, [sp, #8]
   16334:	ldr	r3, [sp, #156]	; 0x9c
   16338:	str	r3, [sp, #4]
   1633c:	mov	r3, #5
   16340:	str	r3, [sp]
   16344:	ldr	r3, [sp, #28]
   16348:	ldr	r2, [sp, #52]	; 0x34
   1634c:	ldr	r1, [sp, #76]	; 0x4c
   16350:	ldr	r0, [sp, #36]	; 0x24
   16354:	bl	15350 <__assert_fail@plt+0x3e70>
   16358:	mov	fp, r0
   1635c:	b	16460 <__assert_fail@plt+0x4f80>
   16360:	mov	sl, r7
   16364:	ldr	r3, [sp, #72]	; 0x48
   16368:	cmp	r3, #0
   1636c:	moveq	r2, #0
   16370:	andne	r2, r2, #1
   16374:	cmp	r2, #0
   16378:	beq	163a8 <__assert_fail@plt+0x4ec8>
   1637c:	mov	r2, r3
   16380:	ldrb	r3, [r3]
   16384:	cmp	r3, #0
   16388:	beq	163a8 <__assert_fail@plt+0x4ec8>
   1638c:	ldr	r1, [sp, #36]	; 0x24
   16390:	cmp	sl, fp
   16394:	strbhi	r3, [r1, fp]
   16398:	add	fp, fp, #1
   1639c:	ldrb	r3, [r2, #1]!
   163a0:	cmp	r3, #0
   163a4:	bne	16390 <__assert_fail@plt+0x4eb0>
   163a8:	cmp	sl, fp
   163ac:	movhi	r3, #0
   163b0:	ldrhi	r2, [sp, #36]	; 0x24
   163b4:	strbhi	r3, [r2, fp]
   163b8:	b	16460 <__assert_fail@plt+0x4f80>
   163bc:	mov	r8, sl
   163c0:	mov	sl, r7
   163c4:	ldr	r3, [sp, #32]
   163c8:	str	r3, [sp, #48]	; 0x30
   163cc:	b	16408 <__assert_fail@plt+0x4f28>
   163d0:	mov	r8, sl
   163d4:	mov	sl, r7
   163d8:	b	16408 <__assert_fail@plt+0x4f28>
   163dc:	mov	r8, sl
   163e0:	mov	sl, r7
   163e4:	b	16408 <__assert_fail@plt+0x4f28>
   163e8:	andeq	sl, r1, r8, lsl #3
   163ec:	muleq	r1, r4, r1
   163f0:	muleq	r1, r0, r1
   163f4:	mov	r8, sl
   163f8:	mov	sl, r7
   163fc:	b	16408 <__assert_fail@plt+0x4f28>
   16400:	mov	r8, sl
   16404:	mov	sl, r7
   16408:	ldr	r3, [sp, #48]	; 0x30
   1640c:	cmp	r8, #2
   16410:	movne	r3, #0
   16414:	andeq	r3, r3, #1
   16418:	cmp	r3, #0
   1641c:	movne	r8, #4
   16420:	ldr	r3, [sp, #168]	; 0xa8
   16424:	str	r3, [sp, #16]
   16428:	ldr	r3, [sp, #164]	; 0xa4
   1642c:	str	r3, [sp, #12]
   16430:	mov	r3, #0
   16434:	str	r3, [sp, #8]
   16438:	ldr	r3, [sp, #156]	; 0x9c
   1643c:	bic	r3, r3, #2
   16440:	str	r3, [sp, #4]
   16444:	str	r8, [sp]
   16448:	ldr	r3, [sp, #28]
   1644c:	ldr	r2, [sp, #52]	; 0x34
   16450:	mov	r1, sl
   16454:	ldr	r0, [sp, #36]	; 0x24
   16458:	bl	15350 <__assert_fail@plt+0x3e70>
   1645c:	mov	fp, r0
   16460:	mov	r0, fp
   16464:	add	sp, sp, #116	; 0x74
   16468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1646c:	mov	r8, sl
   16470:	mov	sl, r7
   16474:	b	16408 <__assert_fail@plt+0x4f28>
   16478:	mov	r8, sl
   1647c:	mov	sl, r7
   16480:	b	16408 <__assert_fail@plt+0x4f28>
   16484:	mov	r8, sl
   16488:	mov	sl, r7
   1648c:	b	16408 <__assert_fail@plt+0x4f28>
   16490:	mov	r8, sl
   16494:	mov	sl, r7
   16498:	b	16420 <__assert_fail@plt+0x4f40>
   1649c:	mov	r3, #1
   164a0:	str	r3, [sp, #32]
   164a4:	str	r3, [sp, #48]	; 0x30
   164a8:	str	r3, [sp, #60]	; 0x3c
   164ac:	ldr	r3, [pc, #-196]	; 163f0 <__assert_fail@plt+0x4f10>
   164b0:	str	r3, [sp, #72]	; 0x48
   164b4:	mov	fp, #0
   164b8:	mov	sl, #5
   164bc:	b	1540c <__assert_fail@plt+0x3f2c>
   164c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164c4:	sub	sp, sp, #52	; 0x34
   164c8:	mov	r5, r0
   164cc:	str	r1, [sp, #24]
   164d0:	str	r2, [sp, #28]
   164d4:	mov	r4, r3
   164d8:	bl	1139c <__errno_location@plt>
   164dc:	str	r0, [sp, #32]
   164e0:	ldr	r3, [r0]
   164e4:	str	r3, [sp, #36]	; 0x24
   164e8:	ldr	r3, [pc, #396]	; 1667c <__assert_fail@plt+0x519c>
   164ec:	ldr	r6, [r3]
   164f0:	cmn	r5, #-2147483647	; 0x80000001
   164f4:	movne	r3, #0
   164f8:	moveq	r3, #1
   164fc:	orrs	r3, r3, r5, lsr #31
   16500:	bne	16640 <__assert_fail@plt+0x5160>
   16504:	ldr	r3, [pc, #368]	; 1667c <__assert_fail@plt+0x519c>
   16508:	ldr	r2, [r3, #4]
   1650c:	cmp	r5, r2
   16510:	blt	16578 <__assert_fail@plt+0x5098>
   16514:	str	r2, [sp, #44]	; 0x2c
   16518:	add	r3, r3, #8
   1651c:	cmp	r6, r3
   16520:	beq	16644 <__assert_fail@plt+0x5164>
   16524:	sub	r2, r5, r2
   16528:	mov	r3, #8
   1652c:	str	r3, [sp]
   16530:	mvn	r3, #-2147483648	; 0x80000000
   16534:	add	r2, r2, #1
   16538:	add	r1, sp, #44	; 0x2c
   1653c:	mov	r0, r6
   16540:	bl	17798 <__assert_fail@plt+0x62b8>
   16544:	mov	r6, r0
   16548:	ldr	r3, [pc, #300]	; 1667c <__assert_fail@plt+0x519c>
   1654c:	str	r0, [r3]
   16550:	ldr	r7, [pc, #292]	; 1667c <__assert_fail@plt+0x519c>
   16554:	ldr	r0, [r7, #4]
   16558:	ldr	r2, [sp, #44]	; 0x2c
   1655c:	sub	r2, r2, r0
   16560:	lsl	r2, r2, #3
   16564:	mov	r1, #0
   16568:	add	r0, r6, r0, lsl #3
   1656c:	bl	113c0 <memset@plt>
   16570:	ldr	r3, [sp, #44]	; 0x2c
   16574:	str	r3, [r7, #4]
   16578:	add	fp, r6, r5, lsl #3
   1657c:	ldr	r8, [r6, r5, lsl #3]
   16580:	ldr	r7, [fp, #4]
   16584:	ldr	r9, [r4, #4]
   16588:	orr	r9, r9, #1
   1658c:	add	sl, r4, #8
   16590:	ldr	r3, [r4, #44]	; 0x2c
   16594:	str	r3, [sp, #16]
   16598:	ldr	r3, [r4, #40]	; 0x28
   1659c:	str	r3, [sp, #12]
   165a0:	str	sl, [sp, #8]
   165a4:	str	r9, [sp, #4]
   165a8:	ldr	r3, [r4]
   165ac:	str	r3, [sp]
   165b0:	ldr	r3, [sp, #28]
   165b4:	ldr	r2, [sp, #24]
   165b8:	mov	r1, r8
   165bc:	mov	r0, r7
   165c0:	bl	15350 <__assert_fail@plt+0x3e70>
   165c4:	cmp	r8, r0
   165c8:	bhi	16628 <__assert_fail@plt+0x5148>
   165cc:	add	r8, r0, #1
   165d0:	str	r8, [r6, r5, lsl #3]
   165d4:	ldr	r3, [pc, #164]	; 16680 <__assert_fail@plt+0x51a0>
   165d8:	cmp	r7, r3
   165dc:	beq	165e8 <__assert_fail@plt+0x5108>
   165e0:	mov	r0, r7
   165e4:	bl	14f60 <__assert_fail@plt+0x3a80>
   165e8:	mov	r0, r8
   165ec:	bl	17614 <__assert_fail@plt+0x6134>
   165f0:	mov	r7, r0
   165f4:	str	r0, [fp, #4]
   165f8:	ldr	r3, [r4, #44]	; 0x2c
   165fc:	str	r3, [sp, #16]
   16600:	ldr	r3, [r4, #40]	; 0x28
   16604:	str	r3, [sp, #12]
   16608:	str	sl, [sp, #8]
   1660c:	str	r9, [sp, #4]
   16610:	ldr	r3, [r4]
   16614:	str	r3, [sp]
   16618:	ldr	r3, [sp, #28]
   1661c:	ldr	r2, [sp, #24]
   16620:	mov	r1, r8
   16624:	bl	15350 <__assert_fail@plt+0x3e70>
   16628:	ldr	r3, [sp, #32]
   1662c:	ldr	r2, [sp, #36]	; 0x24
   16630:	str	r2, [r3]
   16634:	mov	r0, r7
   16638:	add	sp, sp, #52	; 0x34
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16640:	bl	114bc <abort@plt>
   16644:	sub	r2, r5, r2
   16648:	mov	r3, #8
   1664c:	str	r3, [sp]
   16650:	mvn	r3, #-2147483648	; 0x80000000
   16654:	add	r2, r2, #1
   16658:	add	r1, sp, #44	; 0x2c
   1665c:	mov	r0, #0
   16660:	bl	17798 <__assert_fail@plt+0x62b8>
   16664:	mov	r6, r0
   16668:	ldr	r3, [pc, #12]	; 1667c <__assert_fail@plt+0x519c>
   1666c:	str	r0, [r3], #8
   16670:	ldm	r3, {r0, r1}
   16674:	stm	r6, {r0, r1}
   16678:	b	16550 <__assert_fail@plt+0x5070>
   1667c:	andeq	fp, r2, ip, ror #2
   16680:	andeq	fp, r2, r0, lsr r5
   16684:	push	{r4, r5, r6, lr}
   16688:	mov	r4, r0
   1668c:	bl	1139c <__errno_location@plt>
   16690:	mov	r5, r0
   16694:	ldr	r6, [r0]
   16698:	cmp	r4, #0
   1669c:	ldr	r3, [pc, #20]	; 166b8 <__assert_fail@plt+0x51d8>
   166a0:	moveq	r4, r3
   166a4:	mov	r1, #48	; 0x30
   166a8:	mov	r0, r4
   166ac:	bl	17b00 <__assert_fail@plt+0x6620>
   166b0:	str	r6, [r5]
   166b4:	pop	{r4, r5, r6, pc}
   166b8:	andeq	fp, r2, r0, lsr r6
   166bc:	subs	r3, r0, #0
   166c0:	ldr	r2, [pc, #8]	; 166d0 <__assert_fail@plt+0x51f0>
   166c4:	moveq	r3, r2
   166c8:	ldr	r0, [r3]
   166cc:	bx	lr
   166d0:	andeq	fp, r2, r0, lsr r6
   166d4:	subs	r3, r0, #0
   166d8:	ldr	r2, [pc, #8]	; 166e8 <__assert_fail@plt+0x5208>
   166dc:	moveq	r3, r2
   166e0:	str	r1, [r3]
   166e4:	bx	lr
   166e8:	andeq	fp, r2, r0, lsr r6
   166ec:	push	{lr}		; (str lr, [sp, #-4]!)
   166f0:	subs	r3, r0, #0
   166f4:	ldr	r0, [pc, #44]	; 16728 <__assert_fail@plt+0x5248>
   166f8:	moveq	r3, r0
   166fc:	add	r3, r3, #8
   16700:	lsr	lr, r1, #5
   16704:	and	r1, r1, #31
   16708:	ldr	ip, [r3, lr, lsl #2]
   1670c:	lsr	r0, ip, r1
   16710:	eor	r2, r2, r0
   16714:	and	r2, r2, #1
   16718:	eor	r1, ip, r2, lsl r1
   1671c:	str	r1, [r3, lr, lsl #2]
   16720:	and	r0, r0, #1
   16724:	pop	{pc}		; (ldr pc, [sp], #4)
   16728:	andeq	fp, r2, r0, lsr r6
   1672c:	subs	r3, r0, #0
   16730:	ldr	r2, [pc, #12]	; 16744 <__assert_fail@plt+0x5264>
   16734:	moveq	r3, r2
   16738:	ldr	r0, [r3, #4]
   1673c:	str	r1, [r3, #4]
   16740:	bx	lr
   16744:	andeq	fp, r2, r0, lsr r6
   16748:	subs	r3, r0, #0
   1674c:	ldr	r0, [pc, #40]	; 1677c <__assert_fail@plt+0x529c>
   16750:	moveq	r3, r0
   16754:	mov	r0, #10
   16758:	str	r0, [r3]
   1675c:	cmp	r2, #0
   16760:	cmpne	r1, #0
   16764:	beq	16774 <__assert_fail@plt+0x5294>
   16768:	str	r1, [r3, #40]	; 0x28
   1676c:	str	r2, [r3, #44]	; 0x2c
   16770:	bx	lr
   16774:	push	{r4, lr}
   16778:	bl	114bc <abort@plt>
   1677c:	andeq	fp, r2, r0, lsr r6
   16780:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16784:	sub	sp, sp, #24
   16788:	mov	r7, r0
   1678c:	mov	r8, r1
   16790:	mov	r9, r2
   16794:	mov	sl, r3
   16798:	ldr	r4, [sp, #56]	; 0x38
   1679c:	cmp	r4, #0
   167a0:	ldr	r3, [pc, #84]	; 167fc <__assert_fail@plt+0x531c>
   167a4:	moveq	r4, r3
   167a8:	bl	1139c <__errno_location@plt>
   167ac:	mov	r5, r0
   167b0:	ldr	r6, [r0]
   167b4:	ldr	r3, [r4, #44]	; 0x2c
   167b8:	str	r3, [sp, #16]
   167bc:	ldr	r3, [r4, #40]	; 0x28
   167c0:	str	r3, [sp, #12]
   167c4:	add	r3, r4, #8
   167c8:	str	r3, [sp, #8]
   167cc:	ldr	r3, [r4, #4]
   167d0:	str	r3, [sp, #4]
   167d4:	ldr	r3, [r4]
   167d8:	str	r3, [sp]
   167dc:	mov	r3, sl
   167e0:	mov	r2, r9
   167e4:	mov	r1, r8
   167e8:	mov	r0, r7
   167ec:	bl	15350 <__assert_fail@plt+0x3e70>
   167f0:	str	r6, [r5]
   167f4:	add	sp, sp, #24
   167f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167fc:	andeq	fp, r2, r0, lsr r6
   16800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16804:	sub	sp, sp, #44	; 0x2c
   16808:	str	r0, [sp, #28]
   1680c:	str	r1, [sp, #32]
   16810:	mov	r6, r2
   16814:	subs	r4, r3, #0
   16818:	ldr	r3, [pc, #172]	; 168cc <__assert_fail@plt+0x53ec>
   1681c:	moveq	r4, r3
   16820:	bl	1139c <__errno_location@plt>
   16824:	mov	r7, r0
   16828:	ldr	fp, [r0]
   1682c:	ldr	r5, [r4, #4]
   16830:	cmp	r6, #0
   16834:	orreq	r5, r5, #1
   16838:	add	r9, r4, #8
   1683c:	ldr	r3, [r4, #44]	; 0x2c
   16840:	str	r3, [sp, #16]
   16844:	ldr	r3, [r4, #40]	; 0x28
   16848:	str	r3, [sp, #12]
   1684c:	str	r9, [sp, #8]
   16850:	str	r5, [sp, #4]
   16854:	ldr	r3, [r4]
   16858:	str	r3, [sp]
   1685c:	ldr	r3, [sp, #32]
   16860:	ldr	r2, [sp, #28]
   16864:	mov	r1, #0
   16868:	mov	r0, r1
   1686c:	bl	15350 <__assert_fail@plt+0x3e70>
   16870:	mov	sl, r0
   16874:	add	r8, r0, #1
   16878:	mov	r0, r8
   1687c:	bl	17614 <__assert_fail@plt+0x6134>
   16880:	str	r0, [sp, #36]	; 0x24
   16884:	ldr	r3, [r4, #44]	; 0x2c
   16888:	str	r3, [sp, #16]
   1688c:	ldr	r3, [r4, #40]	; 0x28
   16890:	str	r3, [sp, #12]
   16894:	str	r9, [sp, #8]
   16898:	str	r5, [sp, #4]
   1689c:	ldr	r3, [r4]
   168a0:	str	r3, [sp]
   168a4:	ldr	r3, [sp, #32]
   168a8:	ldr	r2, [sp, #28]
   168ac:	mov	r1, r8
   168b0:	bl	15350 <__assert_fail@plt+0x3e70>
   168b4:	str	fp, [r7]
   168b8:	cmp	r6, #0
   168bc:	strne	sl, [r6]
   168c0:	ldr	r0, [sp, #36]	; 0x24
   168c4:	add	sp, sp, #44	; 0x2c
   168c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168cc:	andeq	fp, r2, r0, lsr r6
   168d0:	push	{r4, lr}
   168d4:	mov	r3, r2
   168d8:	mov	r2, #0
   168dc:	bl	16800 <__assert_fail@plt+0x5320>
   168e0:	pop	{r4, pc}
   168e4:	push	{r4, r5, r6, r7, r8, lr}
   168e8:	ldr	r3, [pc, #140]	; 1697c <__assert_fail@plt+0x549c>
   168ec:	ldr	r7, [r3]
   168f0:	ldr	r3, [r3, #4]
   168f4:	cmp	r3, #1
   168f8:	ble	16924 <__assert_fail@plt+0x5444>
   168fc:	mov	r5, r7
   16900:	mov	r4, #1
   16904:	ldr	r6, [pc, #112]	; 1697c <__assert_fail@plt+0x549c>
   16908:	ldr	r0, [r5, #12]
   1690c:	bl	14f60 <__assert_fail@plt+0x3a80>
   16910:	add	r4, r4, #1
   16914:	add	r5, r5, #8
   16918:	ldr	r3, [r6, #4]
   1691c:	cmp	r3, r4
   16920:	bgt	16908 <__assert_fail@plt+0x5428>
   16924:	ldr	r0, [r7, #4]
   16928:	ldr	r3, [pc, #80]	; 16980 <__assert_fail@plt+0x54a0>
   1692c:	cmp	r0, r3
   16930:	beq	1694c <__assert_fail@plt+0x546c>
   16934:	bl	14f60 <__assert_fail@plt+0x3a80>
   16938:	ldr	r3, [pc, #60]	; 1697c <__assert_fail@plt+0x549c>
   1693c:	mov	r2, #256	; 0x100
   16940:	str	r2, [r3, #8]
   16944:	ldr	r2, [pc, #52]	; 16980 <__assert_fail@plt+0x54a0>
   16948:	str	r2, [r3, #12]
   1694c:	ldr	r3, [pc, #48]	; 16984 <__assert_fail@plt+0x54a4>
   16950:	cmp	r7, r3
   16954:	beq	1696c <__assert_fail@plt+0x548c>
   16958:	mov	r0, r7
   1695c:	bl	14f60 <__assert_fail@plt+0x3a80>
   16960:	ldr	r3, [pc, #20]	; 1697c <__assert_fail@plt+0x549c>
   16964:	add	r2, r3, #8
   16968:	str	r2, [r3]
   1696c:	mov	r2, #1
   16970:	ldr	r3, [pc, #4]	; 1697c <__assert_fail@plt+0x549c>
   16974:	str	r2, [r3, #4]
   16978:	pop	{r4, r5, r6, r7, r8, pc}
   1697c:	andeq	fp, r2, ip, ror #2
   16980:	andeq	fp, r2, r0, lsr r5
   16984:	andeq	fp, r2, r4, ror r1
   16988:	push	{r4, lr}
   1698c:	ldr	r3, [pc, #8]	; 1699c <__assert_fail@plt+0x54bc>
   16990:	mvn	r2, #0
   16994:	bl	164c0 <__assert_fail@plt+0x4fe0>
   16998:	pop	{r4, pc}
   1699c:	andeq	fp, r2, r0, lsr r6
   169a0:	push	{r4, lr}
   169a4:	ldr	r3, [pc, #4]	; 169b0 <__assert_fail@plt+0x54d0>
   169a8:	bl	164c0 <__assert_fail@plt+0x4fe0>
   169ac:	pop	{r4, pc}
   169b0:	andeq	fp, r2, r0, lsr r6
   169b4:	push	{r4, lr}
   169b8:	mov	r1, r0
   169bc:	mov	r0, #0
   169c0:	bl	16988 <__assert_fail@plt+0x54a8>
   169c4:	pop	{r4, pc}
   169c8:	push	{r4, lr}
   169cc:	mov	r2, r1
   169d0:	mov	r1, r0
   169d4:	mov	r0, #0
   169d8:	bl	169a0 <__assert_fail@plt+0x54c0>
   169dc:	pop	{r4, pc}
   169e0:	push	{r4, r5, lr}
   169e4:	sub	sp, sp, #52	; 0x34
   169e8:	mov	r4, r0
   169ec:	mov	r5, r2
   169f0:	mov	r0, sp
   169f4:	bl	151e8 <__assert_fail@plt+0x3d08>
   169f8:	mov	r3, sp
   169fc:	mvn	r2, #0
   16a00:	mov	r1, r5
   16a04:	mov	r0, r4
   16a08:	bl	164c0 <__assert_fail@plt+0x4fe0>
   16a0c:	add	sp, sp, #52	; 0x34
   16a10:	pop	{r4, r5, pc}
   16a14:	push	{r4, r5, r6, lr}
   16a18:	sub	sp, sp, #48	; 0x30
   16a1c:	mov	r4, r0
   16a20:	mov	r5, r2
   16a24:	mov	r6, r3
   16a28:	mov	r0, sp
   16a2c:	bl	151e8 <__assert_fail@plt+0x3d08>
   16a30:	mov	r3, sp
   16a34:	mov	r2, r6
   16a38:	mov	r1, r5
   16a3c:	mov	r0, r4
   16a40:	bl	164c0 <__assert_fail@plt+0x4fe0>
   16a44:	add	sp, sp, #48	; 0x30
   16a48:	pop	{r4, r5, r6, pc}
   16a4c:	push	{r4, lr}
   16a50:	mov	r2, r1
   16a54:	mov	r1, r0
   16a58:	mov	r0, #0
   16a5c:	bl	169e0 <__assert_fail@plt+0x5500>
   16a60:	pop	{r4, pc}
   16a64:	push	{r4, lr}
   16a68:	mov	r3, r2
   16a6c:	mov	r2, r1
   16a70:	mov	r1, r0
   16a74:	mov	r0, #0
   16a78:	bl	16a14 <__assert_fail@plt+0x5534>
   16a7c:	pop	{r4, pc}
   16a80:	push	{r4, r5, r6, lr}
   16a84:	sub	sp, sp, #48	; 0x30
   16a88:	mov	r4, r0
   16a8c:	mov	r5, r1
   16a90:	mov	r6, r2
   16a94:	mov	ip, sp
   16a98:	ldr	lr, [pc, #64]	; 16ae0 <__assert_fail@plt+0x5600>
   16a9c:	ldm	lr!, {r0, r1, r2, r3}
   16aa0:	stmia	ip!, {r0, r1, r2, r3}
   16aa4:	ldm	lr!, {r0, r1, r2, r3}
   16aa8:	stmia	ip!, {r0, r1, r2, r3}
   16aac:	ldm	lr, {r0, r1, r2, r3}
   16ab0:	stm	ip, {r0, r1, r2, r3}
   16ab4:	mov	r2, #1
   16ab8:	mov	r1, r6
   16abc:	mov	r0, sp
   16ac0:	bl	166ec <__assert_fail@plt+0x520c>
   16ac4:	mov	r3, sp
   16ac8:	mov	r2, r5
   16acc:	mov	r1, r4
   16ad0:	mov	r0, #0
   16ad4:	bl	164c0 <__assert_fail@plt+0x4fe0>
   16ad8:	add	sp, sp, #48	; 0x30
   16adc:	pop	{r4, r5, r6, pc}
   16ae0:	andeq	fp, r2, r0, lsr r6
   16ae4:	push	{r4, lr}
   16ae8:	mov	r2, r1
   16aec:	mvn	r1, #0
   16af0:	bl	16a80 <__assert_fail@plt+0x55a0>
   16af4:	pop	{r4, pc}
   16af8:	push	{r4, lr}
   16afc:	mov	r1, #58	; 0x3a
   16b00:	bl	16ae4 <__assert_fail@plt+0x5604>
   16b04:	pop	{r4, pc}
   16b08:	push	{r4, lr}
   16b0c:	mov	r2, #58	; 0x3a
   16b10:	bl	16a80 <__assert_fail@plt+0x55a0>
   16b14:	pop	{r4, pc}
   16b18:	push	{r4, r5, lr}
   16b1c:	sub	sp, sp, #100	; 0x64
   16b20:	mov	r4, r0
   16b24:	mov	r5, r2
   16b28:	mov	r0, sp
   16b2c:	bl	151e8 <__assert_fail@plt+0x3d08>
   16b30:	add	lr, sp, #48	; 0x30
   16b34:	mov	ip, sp
   16b38:	ldm	ip!, {r0, r1, r2, r3}
   16b3c:	stmia	lr!, {r0, r1, r2, r3}
   16b40:	ldm	ip!, {r0, r1, r2, r3}
   16b44:	stmia	lr!, {r0, r1, r2, r3}
   16b48:	ldm	ip, {r0, r1, r2, r3}
   16b4c:	stm	lr, {r0, r1, r2, r3}
   16b50:	mov	r2, #1
   16b54:	mov	r1, #58	; 0x3a
   16b58:	add	r0, sp, #48	; 0x30
   16b5c:	bl	166ec <__assert_fail@plt+0x520c>
   16b60:	add	r3, sp, #48	; 0x30
   16b64:	mvn	r2, #0
   16b68:	mov	r1, r5
   16b6c:	mov	r0, r4
   16b70:	bl	164c0 <__assert_fail@plt+0x4fe0>
   16b74:	add	sp, sp, #100	; 0x64
   16b78:	pop	{r4, r5, pc}
   16b7c:	push	{r4, r5, r6, r7, lr}
   16b80:	sub	sp, sp, #52	; 0x34
   16b84:	mov	r4, r0
   16b88:	mov	r6, r1
   16b8c:	mov	r7, r2
   16b90:	mov	r5, r3
   16b94:	mov	ip, sp
   16b98:	ldr	lr, [pc, #64]	; 16be0 <__assert_fail@plt+0x5700>
   16b9c:	ldm	lr!, {r0, r1, r2, r3}
   16ba0:	stmia	ip!, {r0, r1, r2, r3}
   16ba4:	ldm	lr!, {r0, r1, r2, r3}
   16ba8:	stmia	ip!, {r0, r1, r2, r3}
   16bac:	ldm	lr, {r0, r1, r2, r3}
   16bb0:	stm	ip, {r0, r1, r2, r3}
   16bb4:	mov	r2, r7
   16bb8:	mov	r1, r6
   16bbc:	mov	r0, sp
   16bc0:	bl	16748 <__assert_fail@plt+0x5268>
   16bc4:	mov	r3, sp
   16bc8:	ldr	r2, [sp, #72]	; 0x48
   16bcc:	mov	r1, r5
   16bd0:	mov	r0, r4
   16bd4:	bl	164c0 <__assert_fail@plt+0x4fe0>
   16bd8:	add	sp, sp, #52	; 0x34
   16bdc:	pop	{r4, r5, r6, r7, pc}
   16be0:	andeq	fp, r2, r0, lsr r6
   16be4:	push	{lr}		; (str lr, [sp, #-4]!)
   16be8:	sub	sp, sp, #12
   16bec:	mvn	ip, #0
   16bf0:	str	ip, [sp]
   16bf4:	bl	16b7c <__assert_fail@plt+0x569c>
   16bf8:	add	sp, sp, #12
   16bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16c00:	push	{r4, lr}
   16c04:	mov	r3, r2
   16c08:	mov	r2, r1
   16c0c:	mov	r1, r0
   16c10:	mov	r0, #0
   16c14:	bl	16be4 <__assert_fail@plt+0x5704>
   16c18:	pop	{r4, pc}
   16c1c:	push	{lr}		; (str lr, [sp, #-4]!)
   16c20:	sub	sp, sp, #12
   16c24:	str	r3, [sp]
   16c28:	mov	r3, r2
   16c2c:	mov	r2, r1
   16c30:	mov	r1, r0
   16c34:	mov	r0, #0
   16c38:	bl	16b7c <__assert_fail@plt+0x569c>
   16c3c:	add	sp, sp, #12
   16c40:	pop	{pc}		; (ldr pc, [sp], #4)
   16c44:	push	{r4, lr}
   16c48:	ldr	r3, [pc, #4]	; 16c54 <__assert_fail@plt+0x5774>
   16c4c:	bl	164c0 <__assert_fail@plt+0x4fe0>
   16c50:	pop	{r4, pc}
   16c54:	andeq	fp, r2, ip, ror r1
   16c58:	push	{r4, lr}
   16c5c:	mov	r2, r1
   16c60:	mov	r1, r0
   16c64:	mov	r0, #0
   16c68:	bl	16c44 <__assert_fail@plt+0x5764>
   16c6c:	pop	{r4, pc}
   16c70:	push	{r4, lr}
   16c74:	mvn	r2, #0
   16c78:	bl	16c44 <__assert_fail@plt+0x5764>
   16c7c:	pop	{r4, pc}
   16c80:	push	{r4, lr}
   16c84:	mov	r1, r0
   16c88:	mov	r0, #0
   16c8c:	bl	16c70 <__assert_fail@plt+0x5790>
   16c90:	pop	{r4, pc}
   16c94:	push	{r4, r5, r6, r7, r8, lr}
   16c98:	mov	r8, r0
   16c9c:	mov	r7, r1
   16ca0:	mov	r4, r2
   16ca4:	ldr	r5, [pc, #88]	; 16d04 <__assert_fail@plt+0x5824>
   16ca8:	b	16cb0 <__assert_fail@plt+0x57d0>
   16cac:	mov	r4, r5
   16cb0:	mov	r2, r4
   16cb4:	mov	r1, r7
   16cb8:	mov	r0, r8
   16cbc:	bl	11180 <read@plt>
   16cc0:	subs	r6, r0, #0
   16cc4:	bge	16cfc <__assert_fail@plt+0x581c>
   16cc8:	bl	1139c <__errno_location@plt>
   16ccc:	ldr	r3, [r0]
   16cd0:	cmp	r3, #4
   16cd4:	beq	16cb0 <__assert_fail@plt+0x57d0>
   16cd8:	cmp	r4, r5
   16cdc:	movls	r4, #0
   16ce0:	movhi	r4, #1
   16ce4:	cmp	r3, #22
   16ce8:	movne	r4, #0
   16cec:	cmp	r4, #0
   16cf0:	bne	16cac <__assert_fail@plt+0x57cc>
   16cf4:	mov	r0, r6
   16cf8:	pop	{r4, r5, r6, r7, r8, pc}
   16cfc:	mov	r0, r6
   16d00:	pop	{r4, r5, r6, r7, r8, pc}
   16d04:	svcvc	0x00f00000	; IMB
   16d08:	push	{r4, r5, r6, r7, r8, lr}
   16d0c:	mov	r8, r0
   16d10:	mov	r7, r1
   16d14:	mov	r4, r2
   16d18:	ldr	r5, [pc, #88]	; 16d78 <__assert_fail@plt+0x5898>
   16d1c:	b	16d24 <__assert_fail@plt+0x5844>
   16d20:	mov	r4, r5
   16d24:	mov	r2, r4
   16d28:	mov	r1, r7
   16d2c:	mov	r0, r8
   16d30:	bl	113d8 <write@plt>
   16d34:	subs	r6, r0, #0
   16d38:	bge	16d70 <__assert_fail@plt+0x5890>
   16d3c:	bl	1139c <__errno_location@plt>
   16d40:	ldr	r3, [r0]
   16d44:	cmp	r3, #4
   16d48:	beq	16d24 <__assert_fail@plt+0x5844>
   16d4c:	cmp	r4, r5
   16d50:	movls	r4, #0
   16d54:	movhi	r4, #1
   16d58:	cmp	r3, #22
   16d5c:	movne	r4, #0
   16d60:	cmp	r4, #0
   16d64:	bne	16d20 <__assert_fail@plt+0x5840>
   16d68:	mov	r0, r6
   16d6c:	pop	{r4, r5, r6, r7, r8, pc}
   16d70:	mov	r0, r6
   16d74:	pop	{r4, r5, r6, r7, r8, pc}
   16d78:	svcvc	0x00f00000	; IMB
   16d7c:	push	{r4, r5, r6, r7, lr}
   16d80:	sub	sp, sp, #12
   16d84:	mov	r6, r0
   16d88:	mov	r7, r1
   16d8c:	ldrb	r3, [r0]
   16d90:	sub	r3, r3, #48	; 0x30
   16d94:	cmp	r3, #9
   16d98:	bls	16e60 <__assert_fail@plt+0x5980>
   16d9c:	ldr	r5, [pc, #324]	; 16ee8 <__assert_fail@plt+0x5a08>
   16da0:	mov	r4, #0
   16da4:	mov	r1, r6
   16da8:	mov	r0, r5
   16dac:	bl	11168 <strcmp@plt>
   16db0:	cmp	r0, #0
   16db4:	beq	16e90 <__assert_fail@plt+0x59b0>
   16db8:	add	r4, r4, #1
   16dbc:	add	r5, r5, #12
   16dc0:	cmp	r4, #35	; 0x23
   16dc4:	bne	16da4 <__assert_fail@plt+0x58c4>
   16dc8:	bl	114a4 <__libc_current_sigrtmin@plt>
   16dcc:	mov	r5, r0
   16dd0:	bl	11360 <__libc_current_sigrtmax@plt>
   16dd4:	mov	r4, r0
   16dd8:	cmp	r5, #0
   16ddc:	ble	16df8 <__assert_fail@plt+0x5918>
   16de0:	mov	r2, #5
   16de4:	ldr	r1, [pc, #256]	; 16eec <__assert_fail@plt+0x5a0c>
   16de8:	mov	r0, r6
   16dec:	bl	114b0 <strncmp@plt>
   16df0:	cmp	r0, #0
   16df4:	beq	16eac <__assert_fail@plt+0x59cc>
   16df8:	cmp	r4, #0
   16dfc:	ble	16ee0 <__assert_fail@plt+0x5a00>
   16e00:	mov	r2, #5
   16e04:	ldr	r1, [pc, #228]	; 16ef0 <__assert_fail@plt+0x5a10>
   16e08:	mov	r0, r6
   16e0c:	bl	114b0 <strncmp@plt>
   16e10:	cmp	r0, #0
   16e14:	bne	16ee0 <__assert_fail@plt+0x5a00>
   16e18:	mov	r2, #10
   16e1c:	add	r1, sp, #4
   16e20:	add	r0, r6, #5
   16e24:	bl	11174 <strtol@plt>
   16e28:	ldr	r3, [sp, #4]
   16e2c:	ldrb	r3, [r3]
   16e30:	cmp	r3, #0
   16e34:	bne	16ee0 <__assert_fail@plt+0x5a00>
   16e38:	sub	r5, r5, r4
   16e3c:	cmp	r0, r5
   16e40:	movlt	r5, #0
   16e44:	movge	r5, #1
   16e48:	cmp	r0, #0
   16e4c:	movgt	r5, #0
   16e50:	cmp	r5, #0
   16e54:	beq	16ee0 <__assert_fail@plt+0x5a00>
   16e58:	add	r0, r4, r0
   16e5c:	b	16e9c <__assert_fail@plt+0x59bc>
   16e60:	mov	r2, #10
   16e64:	add	r1, sp, #4
   16e68:	bl	11174 <strtol@plt>
   16e6c:	ldr	r3, [sp, #4]
   16e70:	ldrb	r3, [r3]
   16e74:	cmp	r0, #64	; 0x40
   16e78:	cmple	r3, #0
   16e7c:	moveq	r3, #1
   16e80:	movne	r3, #0
   16e84:	cmp	r3, #0
   16e88:	mvneq	r0, #0
   16e8c:	b	16e9c <__assert_fail@plt+0x59bc>
   16e90:	add	r4, r4, r4, lsl #1
   16e94:	ldr	r3, [pc, #88]	; 16ef4 <__assert_fail@plt+0x5a14>
   16e98:	ldr	r0, [r3, r4, lsl #2]
   16e9c:	str	r0, [r7]
   16ea0:	asr	r0, r0, #31
   16ea4:	add	sp, sp, #12
   16ea8:	pop	{r4, r5, r6, r7, pc}
   16eac:	mov	r2, #10
   16eb0:	add	r1, sp, #4
   16eb4:	add	r0, r6, #5
   16eb8:	bl	11174 <strtol@plt>
   16ebc:	ldr	r3, [sp, #4]
   16ec0:	ldrb	r3, [r3]
   16ec4:	cmp	r0, #0
   16ec8:	cmpge	r3, #0
   16ecc:	bne	16ee0 <__assert_fail@plt+0x5a00>
   16ed0:	sub	r4, r4, r5
   16ed4:	cmp	r0, r4
   16ed8:	addle	r0, r5, r0
   16edc:	ble	16e9c <__assert_fail@plt+0x59bc>
   16ee0:	mvn	r0, #0
   16ee4:	b	16e9c <__assert_fail@plt+0x59bc>
   16ee8:			; <UNDEFINED> instruction: 0x0002b1b0
   16eec:	strdeq	sl, [r1], -ip
   16ef0:	andeq	sl, r1, r4, lsl #4
   16ef4:	andeq	fp, r2, ip, lsr #3
   16ef8:	push	{r4, r5, r6, lr}
   16efc:	sub	sp, sp, #8
   16f00:	mov	r5, r1
   16f04:	ldr	r3, [pc, #248]	; 17004 <__assert_fail@plt+0x5b24>
   16f08:	ldr	r3, [r3]
   16f0c:	cmp	r0, r3
   16f10:	beq	16fb8 <__assert_fail@plt+0x5ad8>
   16f14:	mov	r4, r0
   16f18:	ldr	r3, [pc, #228]	; 17004 <__assert_fail@plt+0x5b24>
   16f1c:	mov	r1, #1
   16f20:	ldr	r2, [r3, #12]
   16f24:	cmp	r2, r4
   16f28:	beq	16fbc <__assert_fail@plt+0x5adc>
   16f2c:	add	r1, r1, #1
   16f30:	add	r3, r3, #12
   16f34:	cmp	r1, #35	; 0x23
   16f38:	bne	16f20 <__assert_fail@plt+0x5a40>
   16f3c:	bl	114a4 <__libc_current_sigrtmin@plt>
   16f40:	mov	r6, r0
   16f44:	bl	11360 <__libc_current_sigrtmax@plt>
   16f48:	mov	r2, r0
   16f4c:	cmp	r4, r0
   16f50:	movle	r3, #0
   16f54:	movgt	r3, #1
   16f58:	cmp	r4, r6
   16f5c:	orrlt	r3, r3, #1
   16f60:	cmp	r3, #0
   16f64:	bne	16ffc <__assert_fail@plt+0x5b1c>
   16f68:	sub	r3, r0, r6
   16f6c:	add	r3, r3, r3, lsr #31
   16f70:	add	r3, r6, r3, asr #1
   16f74:	cmp	r4, r3
   16f78:	bgt	16fe0 <__assert_fail@plt+0x5b00>
   16f7c:	ldr	r3, [pc, #132]	; 17008 <__assert_fail@plt+0x5b28>
   16f80:	ldr	r0, [r3]
   16f84:	str	r0, [r5]
   16f88:	ldrh	r3, [r3, #4]
   16f8c:	strh	r3, [r5, #4]
   16f90:	subs	r0, r4, r6
   16f94:	beq	16fd8 <__assert_fail@plt+0x5af8>
   16f98:	str	r0, [sp]
   16f9c:	ldr	r3, [pc, #104]	; 1700c <__assert_fail@plt+0x5b2c>
   16fa0:	mvn	r2, #0
   16fa4:	mov	r1, #1
   16fa8:	add	r0, r5, #5
   16fac:	bl	113a8 <__sprintf_chk@plt>
   16fb0:	mov	r0, #0
   16fb4:	b	16fd8 <__assert_fail@plt+0x5af8>
   16fb8:	mov	r1, #0
   16fbc:	add	r1, r1, r1, lsl #1
   16fc0:	ldr	r3, [pc, #60]	; 17004 <__assert_fail@plt+0x5b24>
   16fc4:	add	r1, r3, r1, lsl #2
   16fc8:	add	r1, r1, #4
   16fcc:	mov	r0, r5
   16fd0:	bl	112ac <strcpy@plt>
   16fd4:	mov	r0, #0
   16fd8:	add	sp, sp, #8
   16fdc:	pop	{r4, r5, r6, pc}
   16fe0:	ldr	r3, [pc, #40]	; 17010 <__assert_fail@plt+0x5b30>
   16fe4:	ldr	r0, [r3]
   16fe8:	str	r0, [r5]
   16fec:	ldrh	r3, [r3, #4]
   16ff0:	strh	r3, [r5, #4]
   16ff4:	mov	r6, r2
   16ff8:	b	16f90 <__assert_fail@plt+0x5ab0>
   16ffc:	mvn	r0, #0
   17000:	b	16fd8 <__assert_fail@plt+0x5af8>
   17004:	andeq	fp, r2, ip, lsr #3
   17008:	strdeq	sl, [r1], -ip
   1700c:	andeq	sl, r1, ip, lsl #4
   17010:	andeq	sl, r1, r4, lsl #4
   17014:	push	{r4, r5, r6, r7, r8, lr}
   17018:	mov	r4, r0
   1701c:	cmp	r0, #2
   17020:	bls	1702c <__assert_fail@plt+0x5b4c>
   17024:	mov	r0, r4
   17028:	pop	{r4, r5, r6, r7, r8, pc}
   1702c:	bl	184c8 <__assert_fail@plt+0x6fe8>
   17030:	mov	r6, r0
   17034:	bl	1139c <__errno_location@plt>
   17038:	mov	r5, r0
   1703c:	ldr	r7, [r0]
   17040:	mov	r0, r4
   17044:	bl	114c8 <close@plt>
   17048:	str	r7, [r5]
   1704c:	mov	r4, r6
   17050:	b	17024 <__assert_fail@plt+0x5b44>
   17054:	push	{r4, r5, r6, lr}
   17058:	sub	sp, sp, #32
   1705c:	mov	r4, r0
   17060:	ldr	r5, [sp, #48]	; 0x30
   17064:	ldr	r6, [sp, #52]	; 0x34
   17068:	cmp	r1, #0
   1706c:	beq	17124 <__assert_fail@plt+0x5c44>
   17070:	str	r3, [sp, #4]
   17074:	str	r2, [sp]
   17078:	mov	r3, r1
   1707c:	ldr	r2, [pc, #940]	; 17430 <__assert_fail@plt+0x5f50>
   17080:	mov	r1, #1
   17084:	bl	113f0 <__fprintf_chk@plt>
   17088:	mov	r2, #5
   1708c:	ldr	r1, [pc, #928]	; 17434 <__assert_fail@plt+0x5f54>
   17090:	mov	r0, #0
   17094:	bl	1121c <dcgettext@plt>
   17098:	ldr	r3, [pc, #920]	; 17438 <__assert_fail@plt+0x5f58>
   1709c:	str	r3, [sp]
   170a0:	mov	r3, r0
   170a4:	ldr	r2, [pc, #912]	; 1743c <__assert_fail@plt+0x5f5c>
   170a8:	mov	r1, #1
   170ac:	mov	r0, r4
   170b0:	bl	113f0 <__fprintf_chk@plt>
   170b4:	mov	r1, r4
   170b8:	mov	r0, #10
   170bc:	bl	11210 <fputc_unlocked@plt>
   170c0:	mov	r2, #5
   170c4:	ldr	r1, [pc, #884]	; 17440 <__assert_fail@plt+0x5f60>
   170c8:	mov	r0, #0
   170cc:	bl	1121c <dcgettext@plt>
   170d0:	ldr	r3, [pc, #876]	; 17444 <__assert_fail@plt+0x5f64>
   170d4:	mov	r2, r0
   170d8:	mov	r1, #1
   170dc:	mov	r0, r4
   170e0:	bl	113f0 <__fprintf_chk@plt>
   170e4:	mov	r1, r4
   170e8:	mov	r0, #10
   170ec:	bl	11210 <fputc_unlocked@plt>
   170f0:	cmp	r6, #9
   170f4:	ldrls	pc, [pc, r6, lsl #2]
   170f8:	b	173c8 <__assert_fail@plt+0x5ee8>
   170fc:	andeq	r7, r1, r0, ror #2
   17100:	andeq	r7, r1, ip, lsr r1
   17104:	andeq	r7, r1, r8, ror #2
   17108:	muleq	r1, r8, r1
   1710c:	ldrdeq	r7, [r1], -r0
   17110:	andeq	r7, r1, r0, lsl r2
   17114:	andeq	r7, r1, r8, asr r2
   17118:	andeq	r7, r1, r8, lsr #5
   1711c:	andeq	r7, r1, r0, lsl #6
   17120:	andeq	r7, r1, r0, ror #6
   17124:	str	r3, [sp]
   17128:	mov	r3, r2
   1712c:	ldr	r2, [pc, #788]	; 17448 <__assert_fail@plt+0x5f68>
   17130:	mov	r1, #1
   17134:	bl	113f0 <__fprintf_chk@plt>
   17138:	b	17088 <__assert_fail@plt+0x5ba8>
   1713c:	mov	r2, #5
   17140:	ldr	r1, [pc, #772]	; 1744c <__assert_fail@plt+0x5f6c>
   17144:	mov	r0, #0
   17148:	bl	1121c <dcgettext@plt>
   1714c:	ldr	r3, [r5]
   17150:	mov	r2, r0
   17154:	mov	r1, #1
   17158:	mov	r0, r4
   1715c:	bl	113f0 <__fprintf_chk@plt>
   17160:	add	sp, sp, #32
   17164:	pop	{r4, r5, r6, pc}
   17168:	mov	r2, #5
   1716c:	ldr	r1, [pc, #732]	; 17450 <__assert_fail@plt+0x5f70>
   17170:	mov	r0, #0
   17174:	bl	1121c <dcgettext@plt>
   17178:	ldr	r3, [r5]
   1717c:	ldr	r2, [r5, #4]
   17180:	str	r2, [sp]
   17184:	mov	r2, r0
   17188:	mov	r1, #1
   1718c:	mov	r0, r4
   17190:	bl	113f0 <__fprintf_chk@plt>
   17194:	b	17160 <__assert_fail@plt+0x5c80>
   17198:	mov	r2, #5
   1719c:	ldr	r1, [pc, #688]	; 17454 <__assert_fail@plt+0x5f74>
   171a0:	mov	r0, #0
   171a4:	bl	1121c <dcgettext@plt>
   171a8:	ldr	r3, [r5]
   171ac:	ldr	r2, [r5, #8]
   171b0:	str	r2, [sp, #4]
   171b4:	ldr	r2, [r5, #4]
   171b8:	str	r2, [sp]
   171bc:	mov	r2, r0
   171c0:	mov	r1, #1
   171c4:	mov	r0, r4
   171c8:	bl	113f0 <__fprintf_chk@plt>
   171cc:	b	17160 <__assert_fail@plt+0x5c80>
   171d0:	mov	r2, #5
   171d4:	ldr	r1, [pc, #636]	; 17458 <__assert_fail@plt+0x5f78>
   171d8:	mov	r0, #0
   171dc:	bl	1121c <dcgettext@plt>
   171e0:	ldr	r3, [r5]
   171e4:	ldr	r2, [r5, #12]
   171e8:	str	r2, [sp, #8]
   171ec:	ldr	r2, [r5, #8]
   171f0:	str	r2, [sp, #4]
   171f4:	ldr	r2, [r5, #4]
   171f8:	str	r2, [sp]
   171fc:	mov	r2, r0
   17200:	mov	r1, #1
   17204:	mov	r0, r4
   17208:	bl	113f0 <__fprintf_chk@plt>
   1720c:	b	17160 <__assert_fail@plt+0x5c80>
   17210:	mov	r2, #5
   17214:	ldr	r1, [pc, #576]	; 1745c <__assert_fail@plt+0x5f7c>
   17218:	mov	r0, #0
   1721c:	bl	1121c <dcgettext@plt>
   17220:	ldr	r3, [r5]
   17224:	ldr	r2, [r5, #16]
   17228:	str	r2, [sp, #12]
   1722c:	ldr	r2, [r5, #12]
   17230:	str	r2, [sp, #8]
   17234:	ldr	r2, [r5, #8]
   17238:	str	r2, [sp, #4]
   1723c:	ldr	r2, [r5, #4]
   17240:	str	r2, [sp]
   17244:	mov	r2, r0
   17248:	mov	r1, #1
   1724c:	mov	r0, r4
   17250:	bl	113f0 <__fprintf_chk@plt>
   17254:	b	17160 <__assert_fail@plt+0x5c80>
   17258:	mov	r2, #5
   1725c:	ldr	r1, [pc, #508]	; 17460 <__assert_fail@plt+0x5f80>
   17260:	mov	r0, #0
   17264:	bl	1121c <dcgettext@plt>
   17268:	ldr	r3, [r5]
   1726c:	ldr	r2, [r5, #20]
   17270:	str	r2, [sp, #16]
   17274:	ldr	r2, [r5, #16]
   17278:	str	r2, [sp, #12]
   1727c:	ldr	r2, [r5, #12]
   17280:	str	r2, [sp, #8]
   17284:	ldr	r2, [r5, #8]
   17288:	str	r2, [sp, #4]
   1728c:	ldr	r2, [r5, #4]
   17290:	str	r2, [sp]
   17294:	mov	r2, r0
   17298:	mov	r1, #1
   1729c:	mov	r0, r4
   172a0:	bl	113f0 <__fprintf_chk@plt>
   172a4:	b	17160 <__assert_fail@plt+0x5c80>
   172a8:	mov	r2, #5
   172ac:	ldr	r1, [pc, #432]	; 17464 <__assert_fail@plt+0x5f84>
   172b0:	mov	r0, #0
   172b4:	bl	1121c <dcgettext@plt>
   172b8:	ldr	r3, [r5]
   172bc:	ldr	r2, [r5, #24]
   172c0:	str	r2, [sp, #20]
   172c4:	ldr	r2, [r5, #20]
   172c8:	str	r2, [sp, #16]
   172cc:	ldr	r2, [r5, #16]
   172d0:	str	r2, [sp, #12]
   172d4:	ldr	r2, [r5, #12]
   172d8:	str	r2, [sp, #8]
   172dc:	ldr	r2, [r5, #8]
   172e0:	str	r2, [sp, #4]
   172e4:	ldr	r2, [r5, #4]
   172e8:	str	r2, [sp]
   172ec:	mov	r2, r0
   172f0:	mov	r1, #1
   172f4:	mov	r0, r4
   172f8:	bl	113f0 <__fprintf_chk@plt>
   172fc:	b	17160 <__assert_fail@plt+0x5c80>
   17300:	mov	r2, #5
   17304:	ldr	r1, [pc, #348]	; 17468 <__assert_fail@plt+0x5f88>
   17308:	mov	r0, #0
   1730c:	bl	1121c <dcgettext@plt>
   17310:	ldr	r3, [r5]
   17314:	ldr	r2, [r5, #28]
   17318:	str	r2, [sp, #24]
   1731c:	ldr	r2, [r5, #24]
   17320:	str	r2, [sp, #20]
   17324:	ldr	r2, [r5, #20]
   17328:	str	r2, [sp, #16]
   1732c:	ldr	r2, [r5, #16]
   17330:	str	r2, [sp, #12]
   17334:	ldr	r2, [r5, #12]
   17338:	str	r2, [sp, #8]
   1733c:	ldr	r2, [r5, #8]
   17340:	str	r2, [sp, #4]
   17344:	ldr	r2, [r5, #4]
   17348:	str	r2, [sp]
   1734c:	mov	r2, r0
   17350:	mov	r1, #1
   17354:	mov	r0, r4
   17358:	bl	113f0 <__fprintf_chk@plt>
   1735c:	b	17160 <__assert_fail@plt+0x5c80>
   17360:	mov	r2, #5
   17364:	ldr	r1, [pc, #256]	; 1746c <__assert_fail@plt+0x5f8c>
   17368:	mov	r0, #0
   1736c:	bl	1121c <dcgettext@plt>
   17370:	ldr	r3, [r5]
   17374:	ldr	r2, [r5, #32]
   17378:	str	r2, [sp, #28]
   1737c:	ldr	r2, [r5, #28]
   17380:	str	r2, [sp, #24]
   17384:	ldr	r2, [r5, #24]
   17388:	str	r2, [sp, #20]
   1738c:	ldr	r2, [r5, #20]
   17390:	str	r2, [sp, #16]
   17394:	ldr	r2, [r5, #16]
   17398:	str	r2, [sp, #12]
   1739c:	ldr	r2, [r5, #12]
   173a0:	str	r2, [sp, #8]
   173a4:	ldr	r2, [r5, #8]
   173a8:	str	r2, [sp, #4]
   173ac:	ldr	r2, [r5, #4]
   173b0:	str	r2, [sp]
   173b4:	mov	r2, r0
   173b8:	mov	r1, #1
   173bc:	mov	r0, r4
   173c0:	bl	113f0 <__fprintf_chk@plt>
   173c4:	b	17160 <__assert_fail@plt+0x5c80>
   173c8:	mov	r2, #5
   173cc:	ldr	r1, [pc, #156]	; 17470 <__assert_fail@plt+0x5f90>
   173d0:	mov	r0, #0
   173d4:	bl	1121c <dcgettext@plt>
   173d8:	ldr	r3, [r5]
   173dc:	ldr	r2, [r5, #32]
   173e0:	str	r2, [sp, #28]
   173e4:	ldr	r2, [r5, #28]
   173e8:	str	r2, [sp, #24]
   173ec:	ldr	r2, [r5, #24]
   173f0:	str	r2, [sp, #20]
   173f4:	ldr	r2, [r5, #20]
   173f8:	str	r2, [sp, #16]
   173fc:	ldr	r2, [r5, #16]
   17400:	str	r2, [sp, #12]
   17404:	ldr	r2, [r5, #12]
   17408:	str	r2, [sp, #8]
   1740c:	ldr	r2, [r5, #8]
   17410:	str	r2, [sp, #4]
   17414:	ldr	r2, [r5, #4]
   17418:	str	r2, [sp]
   1741c:	mov	r2, r0
   17420:	mov	r1, #1
   17424:	mov	r0, r4
   17428:	bl	113f0 <__fprintf_chk@plt>
   1742c:	b	17160 <__assert_fail@plt+0x5c80>
   17430:	andeq	sl, r1, r0, lsl r2
   17434:	andeq	sl, r1, r4, lsr #4
   17438:	andeq	r0, r0, r6, ror #15
   1743c:	strdeq	sl, [r1], -ip
   17440:	andeq	sl, r1, r8, lsr #4
   17444:	ldrdeq	sl, [r1], -r4
   17448:	andeq	sl, r1, ip, lsl r2
   1744c:	strdeq	sl, [r1], -r8
   17450:	andeq	sl, r1, r8, lsl #6
   17454:	andeq	sl, r1, r0, lsr #6
   17458:	andeq	sl, r1, ip, lsr r3
   1745c:	andeq	sl, r1, ip, asr r3
   17460:	andeq	sl, r1, r0, lsl #7
   17464:	andeq	sl, r1, r8, lsr #7
   17468:	ldrdeq	sl, [r1], -r4
   1746c:	andeq	sl, r1, r4, lsl #8
   17470:	andeq	sl, r1, r8, lsr r4
   17474:	push	{r4, r5, lr}
   17478:	sub	sp, sp, #12
   1747c:	ldr	r5, [sp, #24]
   17480:	ldr	ip, [r5]
   17484:	cmp	ip, #0
   17488:	beq	174b8 <__assert_fail@plt+0x5fd8>
   1748c:	mov	lr, r5
   17490:	mov	ip, #0
   17494:	add	ip, ip, #1
   17498:	ldr	r4, [lr, #4]!
   1749c:	cmp	r4, #0
   174a0:	bne	17494 <__assert_fail@plt+0x5fb4>
   174a4:	str	ip, [sp, #4]
   174a8:	str	r5, [sp]
   174ac:	bl	17054 <__assert_fail@plt+0x5b74>
   174b0:	add	sp, sp, #12
   174b4:	pop	{r4, r5, pc}
   174b8:	mov	ip, #0
   174bc:	b	174a4 <__assert_fail@plt+0x5fc4>
   174c0:	push	{r4, r5, lr}
   174c4:	sub	sp, sp, #52	; 0x34
   174c8:	ldr	r4, [sp, #64]	; 0x40
   174cc:	sub	r4, r4, #4
   174d0:	add	r5, sp, #4
   174d4:	mov	ip, #0
   174d8:	ldr	lr, [r4, #4]!
   174dc:	str	lr, [r5, #4]!
   174e0:	cmp	lr, #0
   174e4:	beq	174f4 <__assert_fail@plt+0x6014>
   174e8:	add	ip, ip, #1
   174ec:	cmp	ip, #10
   174f0:	bne	174d8 <__assert_fail@plt+0x5ff8>
   174f4:	str	ip, [sp, #4]
   174f8:	add	ip, sp, #8
   174fc:	str	ip, [sp]
   17500:	bl	17054 <__assert_fail@plt+0x5b74>
   17504:	add	sp, sp, #52	; 0x34
   17508:	pop	{r4, r5, pc}
   1750c:	push	{r3}		; (str r3, [sp, #-4]!)
   17510:	push	{lr}		; (str lr, [sp, #-4]!)
   17514:	sub	sp, sp, #16
   17518:	add	r3, sp, #24
   1751c:	str	r3, [sp, #12]
   17520:	str	r3, [sp]
   17524:	ldr	r3, [sp, #20]
   17528:	bl	174c0 <__assert_fail@plt+0x5fe0>
   1752c:	add	sp, sp, #16
   17530:	pop	{lr}		; (ldr lr, [sp], #4)
   17534:	add	sp, sp, #4
   17538:	bx	lr
   1753c:	push	{r4, lr}
   17540:	ldr	r3, [pc, #112]	; 175b8 <__assert_fail@plt+0x60d8>
   17544:	ldr	r1, [r3]
   17548:	mov	r0, #10
   1754c:	bl	11210 <fputc_unlocked@plt>
   17550:	mov	r2, #5
   17554:	ldr	r1, [pc, #96]	; 175bc <__assert_fail@plt+0x60dc>
   17558:	mov	r0, #0
   1755c:	bl	1121c <dcgettext@plt>
   17560:	ldr	r2, [pc, #88]	; 175c0 <__assert_fail@plt+0x60e0>
   17564:	mov	r1, r0
   17568:	mov	r0, #1
   1756c:	bl	113cc <__printf_chk@plt>
   17570:	mov	r2, #5
   17574:	ldr	r1, [pc, #72]	; 175c4 <__assert_fail@plt+0x60e4>
   17578:	mov	r0, #0
   1757c:	bl	1121c <dcgettext@plt>
   17580:	ldr	r3, [pc, #64]	; 175c8 <__assert_fail@plt+0x60e8>
   17584:	ldr	r2, [pc, #64]	; 175cc <__assert_fail@plt+0x60ec>
   17588:	mov	r1, r0
   1758c:	mov	r0, #1
   17590:	bl	113cc <__printf_chk@plt>
   17594:	mov	r2, #5
   17598:	ldr	r1, [pc, #48]	; 175d0 <__assert_fail@plt+0x60f0>
   1759c:	mov	r0, #0
   175a0:	bl	1121c <dcgettext@plt>
   175a4:	ldr	r2, [pc, #40]	; 175d4 <__assert_fail@plt+0x60f4>
   175a8:	mov	r1, r0
   175ac:	mov	r0, #1
   175b0:	bl	113cc <__printf_chk@plt>
   175b4:	pop	{r4, pc}
   175b8:	andeq	fp, r2, r4, ror #6
   175bc:	andeq	sl, r1, r4, ror r4
   175c0:	andeq	sl, r1, r8, lsl #9
   175c4:	andeq	sl, r1, r0, lsr #9
   175c8:	andeq	r9, r1, ip, lsl #22
   175cc:	andeq	r9, r1, r4, lsr fp
   175d0:			; <UNDEFINED> instruction: 0x0001a4b4
   175d4:	ldrdeq	sl, [r1], -ip
   175d8:	push	{r4, lr}
   175dc:	bl	11498 <aligned_alloc@plt>
   175e0:	cmp	r0, #0
   175e4:	popne	{r4, pc}
   175e8:	bl	17b90 <__assert_fail@plt+0x66b0>
   175ec:	push	{r4, lr}
   175f0:	bl	182f8 <__assert_fail@plt+0x6e18>
   175f4:	cmp	r0, #0
   175f8:	popne	{r4, pc}
   175fc:	bl	17b90 <__assert_fail@plt+0x66b0>
   17600:	push	{r4, lr}
   17604:	bl	182f8 <__assert_fail@plt+0x6e18>
   17608:	cmp	r0, #0
   1760c:	popne	{r4, pc}
   17610:	bl	17b90 <__assert_fail@plt+0x66b0>
   17614:	push	{r4, lr}
   17618:	bl	175ec <__assert_fail@plt+0x610c>
   1761c:	pop	{r4, pc}
   17620:	push	{r4, r5, r6, lr}
   17624:	mov	r5, r0
   17628:	mov	r4, r1
   1762c:	bl	18328 <__assert_fail@plt+0x6e48>
   17630:	cmp	r0, #0
   17634:	popne	{r4, r5, r6, pc}
   17638:	adds	r4, r4, #0
   1763c:	movne	r4, #1
   17640:	cmp	r5, #0
   17644:	orreq	r4, r4, #1
   17648:	cmp	r4, #0
   1764c:	popeq	{r4, r5, r6, pc}
   17650:	bl	17b90 <__assert_fail@plt+0x66b0>
   17654:	push	{r4, lr}
   17658:	cmp	r1, #0
   1765c:	orreq	r1, r1, #1
   17660:	bl	18328 <__assert_fail@plt+0x6e48>
   17664:	cmp	r0, #0
   17668:	popne	{r4, pc}
   1766c:	bl	17b90 <__assert_fail@plt+0x66b0>
   17670:	push	{r4, r5, r6, lr}
   17674:	mov	r6, r0
   17678:	mov	r5, r1
   1767c:	mov	r4, r2
   17680:	bl	1847c <__assert_fail@plt+0x6f9c>
   17684:	cmp	r0, #0
   17688:	popne	{r4, r5, r6, pc}
   1768c:	cmp	r6, #0
   17690:	beq	176a0 <__assert_fail@plt+0x61c0>
   17694:	cmp	r5, #0
   17698:	cmpne	r4, #0
   1769c:	popeq	{r4, r5, r6, pc}
   176a0:	bl	17b90 <__assert_fail@plt+0x66b0>
   176a4:	push	{r4, lr}
   176a8:	bl	17670 <__assert_fail@plt+0x6190>
   176ac:	pop	{r4, pc}
   176b0:	push	{r4, lr}
   176b4:	mov	ip, r1
   176b8:	mov	r3, r2
   176bc:	cmp	r2, #0
   176c0:	cmpne	r1, #0
   176c4:	moveq	r3, #1
   176c8:	moveq	ip, r3
   176cc:	mov	r2, r3
   176d0:	mov	r1, ip
   176d4:	bl	1847c <__assert_fail@plt+0x6f9c>
   176d8:	cmp	r0, #0
   176dc:	popne	{r4, pc}
   176e0:	bl	17b90 <__assert_fail@plt+0x66b0>
   176e4:	push	{r4, lr}
   176e8:	mov	r2, r1
   176ec:	mov	r1, r0
   176f0:	mov	r0, #0
   176f4:	bl	17670 <__assert_fail@plt+0x6190>
   176f8:	pop	{r4, pc}
   176fc:	push	{r4, lr}
   17700:	mov	r2, r1
   17704:	mov	r1, r0
   17708:	mov	r0, #0
   1770c:	bl	176b0 <__assert_fail@plt+0x61d0>
   17710:	pop	{r4, pc}
   17714:	push	{r4, r5, r6, r7, r8, lr}
   17718:	mov	r5, r1
   1771c:	mov	r6, r2
   17720:	ldr	r4, [r1]
   17724:	subs	r7, r0, #0
   17728:	beq	17744 <__assert_fail@plt+0x6264>
   1772c:	lsr	r2, r4, #1
   17730:	add	r3, r2, #1
   17734:	mvn	r3, r3
   17738:	cmp	r4, r3
   1773c:	bls	17768 <__assert_fail@plt+0x6288>
   17740:	bl	17b90 <__assert_fail@plt+0x66b0>
   17744:	cmp	r4, #0
   17748:	bne	17770 <__assert_fail@plt+0x6290>
   1774c:	mov	r1, r2
   17750:	mov	r0, #64	; 0x40
   17754:	bl	1883c <__assert_fail@plt+0x735c>
   17758:	cmp	r0, #0
   1775c:	movne	r4, r0
   17760:	addeq	r4, r0, #1
   17764:	b	17770 <__assert_fail@plt+0x6290>
   17768:	add	r4, r4, #1
   1776c:	add	r4, r4, r2
   17770:	mov	r2, r6
   17774:	mov	r1, r4
   17778:	mov	r0, r7
   1777c:	bl	17670 <__assert_fail@plt+0x6190>
   17780:	str	r4, [r5]
   17784:	pop	{r4, r5, r6, r7, r8, pc}
   17788:	push	{r4, lr}
   1778c:	mov	r2, #1
   17790:	bl	17714 <__assert_fail@plt+0x6234>
   17794:	pop	{r4, pc}
   17798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1779c:	sub	sp, sp, #12
   177a0:	mov	fp, r0
   177a4:	mov	sl, r1
   177a8:	mov	r9, r2
   177ac:	mov	r7, r3
   177b0:	ldr	r6, [sp, #48]	; 0x30
   177b4:	ldr	r5, [r1]
   177b8:	asrs	r4, r5, #1
   177bc:	bmi	17918 <__assert_fail@plt+0x6438>
   177c0:	cmp	r5, #0
   177c4:	blt	1792c <__assert_fail@plt+0x644c>
   177c8:	mvn	r3, #-2147483648	; 0x80000000
   177cc:	sub	r3, r3, r4
   177d0:	cmp	r5, r3
   177d4:	movle	r3, #0
   177d8:	movgt	r3, #1
   177dc:	cmp	r3, #0
   177e0:	addeq	r4, r4, r5
   177e4:	mvnne	r4, #-2147483648	; 0x80000000
   177e8:	mvn	r8, r7
   177ec:	lsr	r8, r8, #31
   177f0:	cmp	r7, r4
   177f4:	movge	r3, #0
   177f8:	andlt	r3, r8, #1
   177fc:	cmp	r3, #0
   17800:	movne	r4, r7
   17804:	cmp	r6, #0
   17808:	blt	17940 <__assert_fail@plt+0x6460>
   1780c:	cmp	r6, #0
   17810:	beq	179ec <__assert_fail@plt+0x650c>
   17814:	cmp	r4, #0
   17818:	blt	1799c <__assert_fail@plt+0x64bc>
   1781c:	mov	r1, r6
   17820:	mvn	r0, #-2147483648	; 0x80000000
   17824:	bl	18a48 <__assert_fail@plt+0x7568>
   17828:	cmp	r0, r4
   1782c:	movge	r0, #0
   17830:	movlt	r0, #1
   17834:	cmp	r0, #0
   17838:	mvnne	r3, #-2147483648	; 0x80000000
   1783c:	strne	r3, [sp, #4]
   17840:	beq	179d4 <__assert_fail@plt+0x64f4>
   17844:	mov	r1, r6
   17848:	ldr	r0, [sp, #4]
   1784c:	bl	18a48 <__assert_fail@plt+0x7568>
   17850:	mov	r4, r0
   17854:	mov	r1, r6
   17858:	ldr	r0, [sp, #4]
   1785c:	bl	18c68 <__assert_fail@plt+0x7788>
   17860:	ldr	r3, [sp, #4]
   17864:	sub	r1, r3, r1
   17868:	cmp	fp, #0
   1786c:	moveq	r3, #0
   17870:	streq	r3, [sl]
   17874:	sub	r3, r4, r5
   17878:	cmp	r3, r9
   1787c:	bge	17904 <__assert_fail@plt+0x6424>
   17880:	cmp	r9, #0
   17884:	blt	179f8 <__assert_fail@plt+0x6518>
   17888:	cmp	r5, #0
   1788c:	blt	17a0c <__assert_fail@plt+0x652c>
   17890:	mvn	r3, #-2147483648	; 0x80000000
   17894:	sub	r3, r3, r9
   17898:	cmp	r5, r3
   1789c:	movle	r3, #0
   178a0:	movgt	r3, #1
   178a4:	cmp	r3, #0
   178a8:	bne	17ab4 <__assert_fail@plt+0x65d4>
   178ac:	add	r5, r5, r9
   178b0:	mov	r4, r5
   178b4:	cmp	r7, r5
   178b8:	movge	r7, #0
   178bc:	andlt	r7, r8, #1
   178c0:	cmp	r7, #0
   178c4:	bne	17ab4 <__assert_fail@plt+0x65d4>
   178c8:	cmp	r6, #0
   178cc:	blt	17a20 <__assert_fail@plt+0x6540>
   178d0:	cmp	r6, #0
   178d4:	beq	17900 <__assert_fail@plt+0x6420>
   178d8:	cmp	r5, #0
   178dc:	blt	17a7c <__assert_fail@plt+0x659c>
   178e0:	mov	r1, r6
   178e4:	mvn	r0, #-2147483648	; 0x80000000
   178e8:	bl	18a48 <__assert_fail@plt+0x7568>
   178ec:	cmp	r5, r0
   178f0:	movle	r0, #0
   178f4:	movgt	r0, #1
   178f8:	cmp	r0, #0
   178fc:	bne	17ab4 <__assert_fail@plt+0x65d4>
   17900:	mul	r1, r5, r6
   17904:	mov	r0, fp
   17908:	bl	17620 <__assert_fail@plt+0x6140>
   1790c:	str	r4, [sl]
   17910:	add	sp, sp, #12
   17914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17918:	rsb	r3, r4, #-2147483648	; 0x80000000
   1791c:	cmp	r5, r3
   17920:	movge	r3, #0
   17924:	movlt	r3, #1
   17928:	b	177dc <__assert_fail@plt+0x62fc>
   1792c:	rsb	r3, r5, #-2147483648	; 0x80000000
   17930:	cmp	r4, r3
   17934:	movge	r3, #0
   17938:	movlt	r3, #1
   1793c:	b	177dc <__assert_fail@plt+0x62fc>
   17940:	cmp	r4, #0
   17944:	blt	1796c <__assert_fail@plt+0x648c>
   17948:	cmn	r6, #1
   1794c:	beq	17988 <__assert_fail@plt+0x64a8>
   17950:	mov	r1, r6
   17954:	mov	r0, #-2147483648	; 0x80000000
   17958:	bl	18a48 <__assert_fail@plt+0x7568>
   1795c:	cmp	r0, r4
   17960:	movge	r0, #0
   17964:	movlt	r0, #1
   17968:	b	17834 <__assert_fail@plt+0x6354>
   1796c:	mov	r1, r6
   17970:	mvn	r0, #-2147483648	; 0x80000000
   17974:	bl	18a48 <__assert_fail@plt+0x7568>
   17978:	cmp	r0, r4
   1797c:	movle	r0, #0
   17980:	movgt	r0, #1
   17984:	b	17834 <__assert_fail@plt+0x6354>
   17988:	add	r0, r4, #-2147483648	; 0x80000000
   1798c:	cmp	r0, #0
   17990:	movle	r0, #0
   17994:	movgt	r0, #1
   17998:	b	17834 <__assert_fail@plt+0x6354>
   1799c:	cmn	r4, #1
   179a0:	beq	179c0 <__assert_fail@plt+0x64e0>
   179a4:	mov	r1, r4
   179a8:	mov	r0, #-2147483648	; 0x80000000
   179ac:	bl	18a48 <__assert_fail@plt+0x7568>
   179b0:	cmp	r6, r0
   179b4:	movle	r0, #0
   179b8:	movgt	r0, #1
   179bc:	b	17834 <__assert_fail@plt+0x6354>
   179c0:	add	r0, r6, #-2147483648	; 0x80000000
   179c4:	cmp	r0, #0
   179c8:	movle	r0, #0
   179cc:	movgt	r0, #1
   179d0:	b	17834 <__assert_fail@plt+0x6354>
   179d4:	mul	r1, r6, r4
   179d8:	cmp	r1, #63	; 0x3f
   179dc:	movle	r3, #64	; 0x40
   179e0:	strle	r3, [sp, #4]
   179e4:	bgt	17868 <__assert_fail@plt+0x6388>
   179e8:	b	17844 <__assert_fail@plt+0x6364>
   179ec:	mov	r3, #64	; 0x40
   179f0:	str	r3, [sp, #4]
   179f4:	b	17844 <__assert_fail@plt+0x6364>
   179f8:	rsb	r3, r9, #-2147483648	; 0x80000000
   179fc:	cmp	r5, r3
   17a00:	movge	r3, #0
   17a04:	movlt	r3, #1
   17a08:	b	178a4 <__assert_fail@plt+0x63c4>
   17a0c:	rsb	r3, r5, #-2147483648	; 0x80000000
   17a10:	cmp	r9, r3
   17a14:	movge	r3, #0
   17a18:	movlt	r3, #1
   17a1c:	b	178a4 <__assert_fail@plt+0x63c4>
   17a20:	cmp	r5, #0
   17a24:	blt	17a4c <__assert_fail@plt+0x656c>
   17a28:	cmn	r6, #1
   17a2c:	beq	17a68 <__assert_fail@plt+0x6588>
   17a30:	mov	r1, r6
   17a34:	mov	r0, #-2147483648	; 0x80000000
   17a38:	bl	18a48 <__assert_fail@plt+0x7568>
   17a3c:	cmp	r5, r0
   17a40:	movle	r0, #0
   17a44:	movgt	r0, #1
   17a48:	b	178f8 <__assert_fail@plt+0x6418>
   17a4c:	mov	r1, r6
   17a50:	mvn	r0, #-2147483648	; 0x80000000
   17a54:	bl	18a48 <__assert_fail@plt+0x7568>
   17a58:	cmp	r5, r0
   17a5c:	movge	r0, #0
   17a60:	movlt	r0, #1
   17a64:	b	178f8 <__assert_fail@plt+0x6418>
   17a68:	add	r0, r5, #-2147483648	; 0x80000000
   17a6c:	cmp	r0, #0
   17a70:	movle	r0, #0
   17a74:	movgt	r0, #1
   17a78:	b	178f8 <__assert_fail@plt+0x6418>
   17a7c:	cmn	r5, #1
   17a80:	beq	17aa0 <__assert_fail@plt+0x65c0>
   17a84:	mov	r1, r5
   17a88:	mov	r0, #-2147483648	; 0x80000000
   17a8c:	bl	18a48 <__assert_fail@plt+0x7568>
   17a90:	cmp	r6, r0
   17a94:	movle	r0, #0
   17a98:	movgt	r0, #1
   17a9c:	b	178f8 <__assert_fail@plt+0x6418>
   17aa0:	add	r0, r6, #-2147483648	; 0x80000000
   17aa4:	cmp	r0, #0
   17aa8:	movle	r0, #0
   17aac:	movgt	r0, #1
   17ab0:	b	178f8 <__assert_fail@plt+0x6418>
   17ab4:	bl	17b90 <__assert_fail@plt+0x66b0>
   17ab8:	push	{r4, lr}
   17abc:	bl	182a8 <__assert_fail@plt+0x6dc8>
   17ac0:	cmp	r0, #0
   17ac4:	popne	{r4, pc}
   17ac8:	bl	17b90 <__assert_fail@plt+0x66b0>
   17acc:	push	{r4, lr}
   17ad0:	mov	r1, #1
   17ad4:	bl	17ab8 <__assert_fail@plt+0x65d8>
   17ad8:	pop	{r4, pc}
   17adc:	push	{r4, lr}
   17ae0:	bl	182a8 <__assert_fail@plt+0x6dc8>
   17ae4:	cmp	r0, #0
   17ae8:	popne	{r4, pc}
   17aec:	bl	17b90 <__assert_fail@plt+0x66b0>
   17af0:	push	{r4, lr}
   17af4:	mov	r1, #1
   17af8:	bl	17adc <__assert_fail@plt+0x65fc>
   17afc:	pop	{r4, pc}
   17b00:	push	{r4, r5, r6, lr}
   17b04:	mov	r5, r0
   17b08:	mov	r4, r1
   17b0c:	mov	r0, r1
   17b10:	bl	175ec <__assert_fail@plt+0x610c>
   17b14:	mov	r2, r4
   17b18:	mov	r1, r5
   17b1c:	bl	111c8 <memcpy@plt>
   17b20:	pop	{r4, r5, r6, pc}
   17b24:	push	{r4, r5, r6, lr}
   17b28:	mov	r5, r0
   17b2c:	mov	r4, r1
   17b30:	mov	r0, r1
   17b34:	bl	17600 <__assert_fail@plt+0x6120>
   17b38:	mov	r2, r4
   17b3c:	mov	r1, r5
   17b40:	bl	111c8 <memcpy@plt>
   17b44:	pop	{r4, r5, r6, pc}
   17b48:	push	{r4, r5, r6, lr}
   17b4c:	mov	r5, r0
   17b50:	mov	r4, r1
   17b54:	add	r0, r1, #1
   17b58:	bl	17600 <__assert_fail@plt+0x6120>
   17b5c:	mov	r2, #0
   17b60:	strb	r2, [r0, r4]
   17b64:	mov	r2, r4
   17b68:	mov	r1, r5
   17b6c:	bl	111c8 <memcpy@plt>
   17b70:	pop	{r4, r5, r6, pc}
   17b74:	push	{r4, lr}
   17b78:	mov	r4, r0
   17b7c:	bl	11354 <strlen@plt>
   17b80:	add	r1, r0, #1
   17b84:	mov	r0, r4
   17b88:	bl	17b00 <__assert_fail@plt+0x6620>
   17b8c:	pop	{r4, pc}
   17b90:	push	{r4, lr}
   17b94:	ldr	r3, [pc, #40]	; 17bc4 <__assert_fail@plt+0x66e4>
   17b98:	ldr	r4, [r3]
   17b9c:	mov	r2, #5
   17ba0:	ldr	r1, [pc, #32]	; 17bc8 <__assert_fail@plt+0x66e8>
   17ba4:	mov	r0, #0
   17ba8:	bl	1121c <dcgettext@plt>
   17bac:	mov	r3, r0
   17bb0:	ldr	r2, [pc, #20]	; 17bcc <__assert_fail@plt+0x66ec>
   17bb4:	mov	r1, #0
   17bb8:	mov	r0, r4
   17bbc:	bl	112d0 <error@plt>
   17bc0:	bl	114bc <abort@plt>
   17bc4:	andeq	fp, r2, r8, ror #2
   17bc8:	andeq	sl, r1, ip, lsr #10
   17bcc:	andeq	r9, r1, ip, lsr r2
   17bd0:	push	{r4, r5, r6, r7, lr}
   17bd4:	sub	sp, sp, #20
   17bd8:	mov	r7, r0
   17bdc:	mov	r4, r2
   17be0:	mov	r5, r3
   17be4:	ldr	r6, [sp, #56]	; 0x38
   17be8:	ldr	r3, [sp, #48]	; 0x30
   17bec:	str	r3, [sp]
   17bf0:	add	r3, sp, #8
   17bf4:	mov	r2, r1
   17bf8:	mov	r1, #0
   17bfc:	bl	17e28 <__assert_fail@plt+0x6948>
   17c00:	cmp	r0, #0
   17c04:	bne	17c84 <__assert_fail@plt+0x67a4>
   17c08:	ldrd	r0, [sp, #8]
   17c0c:	ldrd	r2, [sp, #40]	; 0x28
   17c10:	cmp	r1, r3
   17c14:	cmpeq	r0, r2
   17c18:	movhi	r3, #1
   17c1c:	movls	r3, #0
   17c20:	cmp	r1, r5
   17c24:	cmpeq	r0, r4
   17c28:	orrcc	r3, r3, #1
   17c2c:	cmp	r3, #0
   17c30:	beq	17cfc <__assert_fail@plt+0x681c>
   17c34:	mvn	r2, #-1073741824	; 0xc0000000
   17c38:	mov	r3, #0
   17c3c:	cmp	r1, r3
   17c40:	cmpeq	r0, r2
   17c44:	bls	17c74 <__assert_fail@plt+0x6794>
   17c48:	bl	1139c <__errno_location@plt>
   17c4c:	mov	r3, #75	; 0x4b
   17c50:	str	r3, [r0]
   17c54:	cmp	r6, #0
   17c58:	bne	17cd4 <__assert_fail@plt+0x67f4>
   17c5c:	mov	r6, #1
   17c60:	bl	1139c <__errno_location@plt>
   17c64:	ldr	r4, [r0]
   17c68:	cmp	r4, #22
   17c6c:	moveq	r4, #0
   17c70:	b	17cdc <__assert_fail@plt+0x67fc>
   17c74:	bl	1139c <__errno_location@plt>
   17c78:	mov	r3, #34	; 0x22
   17c7c:	str	r3, [r0]
   17c80:	b	17c54 <__assert_fail@plt+0x6774>
   17c84:	cmp	r0, #1
   17c88:	beq	17ca0 <__assert_fail@plt+0x67c0>
   17c8c:	cmp	r0, #3
   17c90:	beq	17cc4 <__assert_fail@plt+0x67e4>
   17c94:	cmp	r6, #0
   17c98:	moveq	r6, #1
   17c9c:	b	17c60 <__assert_fail@plt+0x6780>
   17ca0:	bl	1139c <__errno_location@plt>
   17ca4:	mov	r3, #75	; 0x4b
   17ca8:	str	r3, [r0]
   17cac:	cmp	r6, #0
   17cb0:	bne	17c60 <__assert_fail@plt+0x6780>
   17cb4:	bl	1139c <__errno_location@plt>
   17cb8:	ldr	r4, [r0]
   17cbc:	mov	r6, #1
   17cc0:	b	17cdc <__assert_fail@plt+0x67fc>
   17cc4:	bl	1139c <__errno_location@plt>
   17cc8:	mov	r3, #0
   17ccc:	str	r3, [r0]
   17cd0:	b	17cac <__assert_fail@plt+0x67cc>
   17cd4:	bl	1139c <__errno_location@plt>
   17cd8:	ldr	r4, [r0]
   17cdc:	mov	r0, r7
   17ce0:	bl	16c80 <__assert_fail@plt+0x57a0>
   17ce4:	str	r0, [sp]
   17ce8:	ldr	r3, [sp, #52]	; 0x34
   17cec:	ldr	r2, [pc, #16]	; 17d04 <__assert_fail@plt+0x6824>
   17cf0:	mov	r1, r4
   17cf4:	mov	r0, r6
   17cf8:	bl	112d0 <error@plt>
   17cfc:	add	sp, sp, #20
   17d00:	pop	{r4, r5, r6, r7, pc}
   17d04:	andeq	r9, r1, r0, asr lr
   17d08:	push	{r4, r5, lr}
   17d0c:	sub	sp, sp, #28
   17d10:	ldr	r1, [sp, #56]	; 0x38
   17d14:	str	r1, [sp, #16]
   17d18:	ldr	r1, [sp, #52]	; 0x34
   17d1c:	str	r1, [sp, #12]
   17d20:	ldr	r1, [sp, #48]	; 0x30
   17d24:	str	r1, [sp, #8]
   17d28:	ldrd	r4, [sp, #40]	; 0x28
   17d2c:	strd	r4, [sp]
   17d30:	mov	r1, #10
   17d34:	bl	17bd0 <__assert_fail@plt+0x66f0>
   17d38:	add	sp, sp, #28
   17d3c:	pop	{r4, r5, pc}
   17d40:	push	{r4, r5, r6, lr}
   17d44:	mov	r5, r0
   17d48:	subs	r4, r1, #0
   17d4c:	blt	17da0 <__assert_fail@plt+0x68c0>
   17d50:	cmp	r4, #0
   17d54:	moveq	r3, #0
   17d58:	beq	17d84 <__assert_fail@plt+0x68a4>
   17d5c:	mov	r2, r4
   17d60:	asr	r3, r4, #31
   17d64:	mvn	r0, #0
   17d68:	mvn	r1, #0
   17d6c:	bl	18c88 <__assert_fail@plt+0x77a8>
   17d70:	ldrd	r2, [r5]
   17d74:	cmp	r1, r3
   17d78:	cmpeq	r0, r2
   17d7c:	movcc	r3, #1
   17d80:	movcs	r3, #0
   17d84:	cmp	r3, #0
   17d88:	beq	17dc0 <__assert_fail@plt+0x68e0>
   17d8c:	mvn	r2, #0
   17d90:	mvn	r3, #0
   17d94:	strd	r2, [r5]
   17d98:	mov	r0, #1
   17d9c:	pop	{r4, r5, r6, pc}
   17da0:	mov	r1, r4
   17da4:	mov	r0, #0
   17da8:	bl	18a48 <__assert_fail@plt+0x7568>
   17dac:	ldrd	r2, [r5]
   17db0:	orrs	r3, r2, r3
   17db4:	movne	r3, #1
   17db8:	moveq	r3, #0
   17dbc:	b	17d84 <__assert_fail@plt+0x68a4>
   17dc0:	asr	r3, r4, #31
   17dc4:	ldr	r1, [r5, #4]
   17dc8:	ldr	r2, [r5]
   17dcc:	mul	r3, r3, r2
   17dd0:	mla	r1, r4, r1, r3
   17dd4:	umull	r2, r3, r2, r4
   17dd8:	add	r3, r1, r3
   17ddc:	strd	r2, [r5]
   17de0:	mov	r0, #0
   17de4:	pop	{r4, r5, r6, pc}
   17de8:	push	{r4, r5, r6, r7, r8, lr}
   17dec:	subs	r4, r2, #0
   17df0:	beq	17e20 <__assert_fail@plt+0x6940>
   17df4:	mov	r7, r1
   17df8:	mov	r6, r0
   17dfc:	mov	r5, #0
   17e00:	mov	r1, r7
   17e04:	mov	r0, r6
   17e08:	bl	17d40 <__assert_fail@plt+0x6860>
   17e0c:	orr	r5, r5, r0
   17e10:	subs	r4, r4, #1
   17e14:	bne	17e00 <__assert_fail@plt+0x6920>
   17e18:	mov	r0, r5
   17e1c:	pop	{r4, r5, r6, r7, r8, pc}
   17e20:	mov	r5, #0
   17e24:	b	17e18 <__assert_fail@plt+0x6938>
   17e28:	push	{r4, r5, r6, r7, r8, r9, lr}
   17e2c:	sub	sp, sp, #20
   17e30:	cmp	r2, #36	; 0x24
   17e34:	bhi	17e74 <__assert_fail@plt+0x6994>
   17e38:	mov	r5, r0
   17e3c:	mov	r6, r1
   17e40:	mov	r7, r2
   17e44:	mov	r9, r3
   17e48:	cmp	r1, #0
   17e4c:	addeq	r6, sp, #12
   17e50:	bl	1139c <__errno_location@plt>
   17e54:	mov	r8, r0
   17e58:	mov	r3, #0
   17e5c:	str	r3, [r0]
   17e60:	ldrb	r4, [r5]
   17e64:	bl	1133c <__ctype_b_loc@plt>
   17e68:	ldr	r1, [r0]
   17e6c:	mov	r2, r5
   17e70:	b	17e8c <__assert_fail@plt+0x69ac>
   17e74:	ldr	r3, [pc, #1056]	; 1829c <__assert_fail@plt+0x6dbc>
   17e78:	mov	r2, #85	; 0x55
   17e7c:	ldr	r1, [pc, #1052]	; 182a0 <__assert_fail@plt+0x6dc0>
   17e80:	ldr	r0, [pc, #1052]	; 182a4 <__assert_fail@plt+0x6dc4>
   17e84:	bl	114e0 <__assert_fail@plt>
   17e88:	ldrb	r4, [r2, #1]!
   17e8c:	lsl	r3, r4, #1
   17e90:	ldrh	r3, [r1, r3]
   17e94:	tst	r3, #8192	; 0x2000
   17e98:	bne	17e88 <__assert_fail@plt+0x69a8>
   17e9c:	cmp	r4, #45	; 0x2d
   17ea0:	moveq	r4, #4
   17ea4:	bne	17eb4 <__assert_fail@plt+0x69d4>
   17ea8:	mov	r0, r4
   17eac:	add	sp, sp, #20
   17eb0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17eb4:	mov	r3, #0
   17eb8:	mov	r2, r7
   17ebc:	mov	r1, r6
   17ec0:	mov	r0, r5
   17ec4:	bl	111d4 <__strtoull_internal@plt>
   17ec8:	strd	r0, [sp]
   17ecc:	ldr	r7, [r6]
   17ed0:	cmp	r5, r7
   17ed4:	beq	17ef8 <__assert_fail@plt+0x6a18>
   17ed8:	ldr	r3, [r8]
   17edc:	cmp	r3, #0
   17ee0:	beq	17f40 <__assert_fail@plt+0x6a60>
   17ee4:	cmp	r3, #34	; 0x22
   17ee8:	moveq	r4, #1
   17eec:	beq	17f44 <__assert_fail@plt+0x6a64>
   17ef0:	mov	r4, #4
   17ef4:	b	17ea8 <__assert_fail@plt+0x69c8>
   17ef8:	ldr	r3, [sp, #48]	; 0x30
   17efc:	cmp	r3, #0
   17f00:	moveq	r4, #4
   17f04:	beq	17ea8 <__assert_fail@plt+0x69c8>
   17f08:	ldrb	r1, [r7]
   17f0c:	cmp	r1, #0
   17f10:	moveq	r4, #4
   17f14:	beq	17ea8 <__assert_fail@plt+0x69c8>
   17f18:	mov	r0, r3
   17f1c:	bl	1136c <strchr@plt>
   17f20:	cmp	r0, #0
   17f24:	moveq	r4, #4
   17f28:	beq	17ea8 <__assert_fail@plt+0x69c8>
   17f2c:	mov	r2, #1
   17f30:	mov	r3, #0
   17f34:	strd	r2, [sp]
   17f38:	mov	r4, #0
   17f3c:	b	17f50 <__assert_fail@plt+0x6a70>
   17f40:	mov	r4, #0
   17f44:	ldr	r3, [sp, #48]	; 0x30
   17f48:	cmp	r3, #0
   17f4c:	beq	18040 <__assert_fail@plt+0x6b60>
   17f50:	ldrb	r5, [r7]
   17f54:	cmp	r5, #0
   17f58:	beq	181d8 <__assert_fail@plt+0x6cf8>
   17f5c:	mov	r1, r5
   17f60:	ldr	r0, [sp, #48]	; 0x30
   17f64:	bl	1136c <strchr@plt>
   17f68:	cmp	r0, #0
   17f6c:	beq	18048 <__assert_fail@plt+0x6b68>
   17f70:	sub	r3, r5, #69	; 0x45
   17f74:	cmp	r3, #47	; 0x2f
   17f78:	ldrls	pc, [pc, r3, lsl #2]
   17f7c:	b	180b4 <__assert_fail@plt+0x6bd4>
   17f80:	andeq	r8, r1, r8, asr r0
   17f84:	strheq	r8, [r1], -r4
   17f88:	andeq	r8, r1, r8, asr r0
   17f8c:	strheq	r8, [r1], -r4
   17f90:	strheq	r8, [r1], -r4
   17f94:	strheq	r8, [r1], -r4
   17f98:	andeq	r8, r1, r8, asr r0
   17f9c:	strheq	r8, [r1], -r4
   17fa0:	andeq	r8, r1, r8, asr r0
   17fa4:	strheq	r8, [r1], -r4
   17fa8:	strheq	r8, [r1], -r4
   17fac:	andeq	r8, r1, r8, asr r0
   17fb0:	strheq	r8, [r1], -r4
   17fb4:	strheq	r8, [r1], -r4
   17fb8:	strheq	r8, [r1], -r4
   17fbc:	andeq	r8, r1, r8, asr r0
   17fc0:	strheq	r8, [r1], -r4
   17fc4:	strheq	r8, [r1], -r4
   17fc8:	strheq	r8, [r1], -r4
   17fcc:	strheq	r8, [r1], -r4
   17fd0:	andeq	r8, r1, r8, asr r0
   17fd4:	andeq	r8, r1, r8, asr r0
   17fd8:	strheq	r8, [r1], -r4
   17fdc:	strheq	r8, [r1], -r4
   17fe0:	strheq	r8, [r1], -r4
   17fe4:	strheq	r8, [r1], -r4
   17fe8:	strheq	r8, [r1], -r4
   17fec:	strheq	r8, [r1], -r4
   17ff0:	strheq	r8, [r1], -r4
   17ff4:	strheq	r8, [r1], -r4
   17ff8:	strheq	r8, [r1], -r4
   17ffc:	strheq	r8, [r1], -r4
   18000:	strheq	r8, [r1], -r4
   18004:	strheq	r8, [r1], -r4
   18008:	andeq	r8, r1, r8, asr r0
   1800c:	strheq	r8, [r1], -r4
   18010:	strheq	r8, [r1], -r4
   18014:	strheq	r8, [r1], -r4
   18018:	andeq	r8, r1, r8, asr r0
   1801c:	strheq	r8, [r1], -r4
   18020:	andeq	r8, r1, r8, asr r0
   18024:	strheq	r8, [r1], -r4
   18028:	strheq	r8, [r1], -r4
   1802c:	strheq	r8, [r1], -r4
   18030:	strheq	r8, [r1], -r4
   18034:	strheq	r8, [r1], -r4
   18038:	strheq	r8, [r1], -r4
   1803c:	andeq	r8, r1, r8, asr r0
   18040:	strd	r0, [r9]
   18044:	b	17ea8 <__assert_fail@plt+0x69c8>
   18048:	ldrd	r2, [sp]
   1804c:	strd	r2, [r9]
   18050:	orr	r4, r4, #2
   18054:	b	17ea8 <__assert_fail@plt+0x69c8>
   18058:	mov	r1, #48	; 0x30
   1805c:	ldr	r0, [sp, #48]	; 0x30
   18060:	bl	1136c <strchr@plt>
   18064:	cmp	r0, #0
   18068:	beq	181a4 <__assert_fail@plt+0x6cc4>
   1806c:	ldrb	r3, [r7, #1]
   18070:	cmp	r3, #68	; 0x44
   18074:	beq	18090 <__assert_fail@plt+0x6bb0>
   18078:	cmp	r3, #105	; 0x69
   1807c:	beq	1809c <__assert_fail@plt+0x6bbc>
   18080:	cmp	r3, #66	; 0x42
   18084:	movne	r7, #1
   18088:	movne	r1, #1024	; 0x400
   1808c:	bne	180bc <__assert_fail@plt+0x6bdc>
   18090:	mov	r7, #2
   18094:	mov	r1, #1000	; 0x3e8
   18098:	b	180bc <__assert_fail@plt+0x6bdc>
   1809c:	ldrb	r7, [r7, #2]
   180a0:	cmp	r7, #66	; 0x42
   180a4:	movne	r7, #1
   180a8:	moveq	r7, #3
   180ac:	mov	r1, #1024	; 0x400
   180b0:	b	180bc <__assert_fail@plt+0x6bdc>
   180b4:	mov	r7, #1
   180b8:	mov	r1, #1024	; 0x400
   180bc:	sub	r5, r5, #66	; 0x42
   180c0:	cmp	r5, #53	; 0x35
   180c4:	ldrls	pc, [pc, r5, lsl #2]
   180c8:	b	18284 <__assert_fail@plt+0x6da4>
   180cc:	andeq	r8, r1, r4, ror #3
   180d0:	andeq	r8, r1, r4, lsl #5
   180d4:	andeq	r8, r1, r4, lsl #5
   180d8:	strdeq	r8, [r1], -r4
   180dc:	andeq	r8, r1, r4, lsl #5
   180e0:	andeq	r8, r1, r4, lsl #4
   180e4:	andeq	r8, r1, r4, lsl #5
   180e8:	andeq	r8, r1, r4, lsl #5
   180ec:	andeq	r8, r1, r4, lsl #5
   180f0:	andeq	r8, r1, r4, lsl r2
   180f4:	andeq	r8, r1, r4, lsl #5
   180f8:	andeq	r8, r1, r4, lsr #4
   180fc:	andeq	r8, r1, r4, lsl #5
   18100:	andeq	r8, r1, r4, lsl #5
   18104:	andeq	r8, r1, r4, lsr r2
   18108:	andeq	r8, r1, r4, lsl #5
   1810c:	andeq	r8, r1, r4, lsl #5
   18110:	andeq	r8, r1, r4, lsl #5
   18114:	andeq	r8, r1, r4, asr #4
   18118:	andeq	r8, r1, r4, lsl #5
   1811c:	andeq	r8, r1, r4, lsl #5
   18120:	andeq	r8, r1, r4, lsl #5
   18124:	andeq	r8, r1, r4, lsl #5
   18128:	andeq	r8, r1, r4, ror #4
   1812c:	andeq	r8, r1, r4, ror r2
   18130:	andeq	r8, r1, r4, lsl #5
   18134:	andeq	r8, r1, r4, lsl #5
   18138:	andeq	r8, r1, r4, lsl #5
   1813c:	andeq	r8, r1, r4, lsl #5
   18140:	andeq	r8, r1, r4, lsl #5
   18144:	andeq	r8, r1, r4, lsl #5
   18148:	andeq	r8, r1, r4, lsl #5
   1814c:			; <UNDEFINED> instruction: 0x000181b0
   18150:	muleq	r1, r4, r2
   18154:	andeq	r8, r1, r4, lsl #5
   18158:	andeq	r8, r1, r4, lsl #5
   1815c:	andeq	r8, r1, r4, lsl #5
   18160:	andeq	r8, r1, r4, lsl #4
   18164:	andeq	r8, r1, r4, lsl #5
   18168:	andeq	r8, r1, r4, lsl #5
   1816c:	andeq	r8, r1, r4, lsl #5
   18170:	andeq	r8, r1, r4, lsl r2
   18174:	andeq	r8, r1, r4, lsl #5
   18178:	andeq	r8, r1, r4, lsr #4
   1817c:	andeq	r8, r1, r4, lsl #5
   18180:	andeq	r8, r1, r4, lsl #5
   18184:	andeq	r8, r1, r4, lsl #5
   18188:	andeq	r8, r1, r4, lsl #5
   1818c:	andeq	r8, r1, r4, lsl #5
   18190:	andeq	r8, r1, r4, lsl #5
   18194:	andeq	r8, r1, r4, asr #4
   18198:	andeq	r8, r1, r4, lsl #5
   1819c:	andeq	r8, r1, r4, lsl #5
   181a0:	andeq	r8, r1, r4, asr r2
   181a4:	mov	r7, #1
   181a8:	mov	r1, #1024	; 0x400
   181ac:	b	180bc <__assert_fail@plt+0x6bdc>
   181b0:	mov	r1, #512	; 0x200
   181b4:	mov	r0, sp
   181b8:	bl	17d40 <__assert_fail@plt+0x6860>
   181bc:	orr	r4, r4, r0
   181c0:	ldr	r3, [r6]
   181c4:	add	r2, r3, r7
   181c8:	str	r2, [r6]
   181cc:	ldrb	r3, [r3, r7]
   181d0:	cmp	r3, #0
   181d4:	orrne	r4, r4, #2
   181d8:	ldrd	r2, [sp]
   181dc:	strd	r2, [r9]
   181e0:	b	17ea8 <__assert_fail@plt+0x69c8>
   181e4:	mov	r1, #1024	; 0x400
   181e8:	mov	r0, sp
   181ec:	bl	17d40 <__assert_fail@plt+0x6860>
   181f0:	b	181bc <__assert_fail@plt+0x6cdc>
   181f4:	mov	r2, #6
   181f8:	mov	r0, sp
   181fc:	bl	17de8 <__assert_fail@plt+0x6908>
   18200:	b	181bc <__assert_fail@plt+0x6cdc>
   18204:	mov	r2, #3
   18208:	mov	r0, sp
   1820c:	bl	17de8 <__assert_fail@plt+0x6908>
   18210:	b	181bc <__assert_fail@plt+0x6cdc>
   18214:	mov	r2, #1
   18218:	mov	r0, sp
   1821c:	bl	17de8 <__assert_fail@plt+0x6908>
   18220:	b	181bc <__assert_fail@plt+0x6cdc>
   18224:	mov	r2, #2
   18228:	mov	r0, sp
   1822c:	bl	17de8 <__assert_fail@plt+0x6908>
   18230:	b	181bc <__assert_fail@plt+0x6cdc>
   18234:	mov	r2, #5
   18238:	mov	r0, sp
   1823c:	bl	17de8 <__assert_fail@plt+0x6908>
   18240:	b	181bc <__assert_fail@plt+0x6cdc>
   18244:	mov	r2, #4
   18248:	mov	r0, sp
   1824c:	bl	17de8 <__assert_fail@plt+0x6908>
   18250:	b	181bc <__assert_fail@plt+0x6cdc>
   18254:	mov	r1, #2
   18258:	mov	r0, sp
   1825c:	bl	17d40 <__assert_fail@plt+0x6860>
   18260:	b	181bc <__assert_fail@plt+0x6cdc>
   18264:	mov	r2, #8
   18268:	mov	r0, sp
   1826c:	bl	17de8 <__assert_fail@plt+0x6908>
   18270:	b	181bc <__assert_fail@plt+0x6cdc>
   18274:	mov	r2, #7
   18278:	mov	r0, sp
   1827c:	bl	17de8 <__assert_fail@plt+0x6908>
   18280:	b	181bc <__assert_fail@plt+0x6cdc>
   18284:	ldrd	r2, [sp]
   18288:	strd	r2, [r9]
   1828c:	orr	r4, r4, #2
   18290:	b	17ea8 <__assert_fail@plt+0x69c8>
   18294:	mov	r0, #0
   18298:	b	181bc <__assert_fail@plt+0x6cdc>
   1829c:	andeq	sl, r1, r0, asr #10
   182a0:	andeq	sl, r1, ip, asr #10
   182a4:	andeq	sl, r1, ip, asr r5
   182a8:	push	{r4, lr}
   182ac:	mov	r2, r0
   182b0:	mov	r3, r1
   182b4:	cmp	r1, #0
   182b8:	cmpne	r0, #0
   182bc:	moveq	r3, #1
   182c0:	moveq	r2, r3
   182c4:	umull	r0, r1, r2, r3
   182c8:	cmp	r0, #0
   182cc:	cmpge	r1, #0
   182d0:	bne	182e4 <__assert_fail@plt+0x6e04>
   182d4:	mov	r1, r3
   182d8:	mov	r0, r2
   182dc:	bl	11144 <calloc@plt>
   182e0:	pop	{r4, pc}
   182e4:	bl	1139c <__errno_location@plt>
   182e8:	mov	r3, #12
   182ec:	str	r3, [r0]
   182f0:	mov	r0, #0
   182f4:	pop	{r4, pc}
   182f8:	push	{r4, lr}
   182fc:	cmp	r0, #0
   18300:	moveq	r0, #1
   18304:	cmp	r0, #0
   18308:	blt	18314 <__assert_fail@plt+0x6e34>
   1830c:	bl	112f4 <malloc@plt>
   18310:	pop	{r4, pc}
   18314:	bl	1139c <__errno_location@plt>
   18318:	mov	r3, #12
   1831c:	str	r3, [r0]
   18320:	mov	r0, #0
   18324:	pop	{r4, pc}
   18328:	push	{r4, lr}
   1832c:	cmp	r0, #0
   18330:	beq	1834c <__assert_fail@plt+0x6e6c>
   18334:	cmp	r1, #0
   18338:	beq	18358 <__assert_fail@plt+0x6e78>
   1833c:	cmp	r1, #0
   18340:	blt	18364 <__assert_fail@plt+0x6e84>
   18344:	bl	11234 <realloc@plt>
   18348:	pop	{r4, pc}
   1834c:	mov	r0, r1
   18350:	bl	182f8 <__assert_fail@plt+0x6e18>
   18354:	pop	{r4, pc}
   18358:	bl	14f60 <__assert_fail@plt+0x3a80>
   1835c:	mov	r0, #0
   18360:	pop	{r4, pc}
   18364:	bl	1139c <__errno_location@plt>
   18368:	mov	r3, #12
   1836c:	str	r3, [r0]
   18370:	mov	r0, #0
   18374:	pop	{r4, pc}
   18378:	push	{r4, r5, r6, lr}
   1837c:	mov	r5, r0
   18380:	bl	112b8 <__fpending@plt>
   18384:	mov	r6, r0
   18388:	ldr	r4, [r5]
   1838c:	and	r4, r4, #32
   18390:	mov	r0, r5
   18394:	bl	14db4 <__assert_fail@plt+0x38d4>
   18398:	cmp	r4, #0
   1839c:	bne	183c4 <__assert_fail@plt+0x6ee4>
   183a0:	cmp	r0, #0
   183a4:	popeq	{r4, r5, r6, pc}
   183a8:	cmp	r6, #0
   183ac:	bne	183e0 <__assert_fail@plt+0x6f00>
   183b0:	bl	1139c <__errno_location@plt>
   183b4:	ldr	r0, [r0]
   183b8:	subs	r0, r0, #9
   183bc:	mvnne	r0, #0
   183c0:	pop	{r4, r5, r6, pc}
   183c4:	cmp	r0, #0
   183c8:	bne	183e8 <__assert_fail@plt+0x6f08>
   183cc:	bl	1139c <__errno_location@plt>
   183d0:	mov	r3, #0
   183d4:	str	r3, [r0]
   183d8:	mvn	r0, #0
   183dc:	pop	{r4, r5, r6, pc}
   183e0:	mvn	r0, #0
   183e4:	pop	{r4, r5, r6, pc}
   183e8:	mvn	r0, #0
   183ec:	pop	{r4, r5, r6, pc}
   183f0:	push	{r4, lr}
   183f4:	mov	r0, #14
   183f8:	bl	11474 <nl_langinfo@plt>
   183fc:	cmp	r0, #0
   18400:	beq	18418 <__assert_fail@plt+0x6f38>
   18404:	ldrb	r2, [r0]
   18408:	ldr	r3, [pc, #16]	; 18420 <__assert_fail@plt+0x6f40>
   1840c:	cmp	r2, #0
   18410:	moveq	r0, r3
   18414:	pop	{r4, pc}
   18418:	ldr	r0, [pc]	; 18420 <__assert_fail@plt+0x6f40>
   1841c:	pop	{r4, pc}
   18420:	andeq	sl, r1, r4, lsl #11
   18424:	push	{r4, r5, r6, r7, lr}
   18428:	sub	sp, sp, #12
   1842c:	mov	r7, r1
   18430:	mov	r5, r2
   18434:	subs	r6, r0, #0
   18438:	addeq	r6, sp, #4
   1843c:	mov	r0, r6
   18440:	bl	112c4 <mbrtowc@plt>
   18444:	mov	r4, r0
   18448:	cmp	r5, #0
   1844c:	cmnne	r0, #3
   18450:	bhi	18460 <__assert_fail@plt+0x6f80>
   18454:	mov	r0, r4
   18458:	add	sp, sp, #12
   1845c:	pop	{r4, r5, r6, r7, pc}
   18460:	mov	r0, #0
   18464:	bl	18734 <__assert_fail@plt+0x7254>
   18468:	cmp	r0, #0
   1846c:	ldrbeq	r3, [r7]
   18470:	streq	r3, [r6]
   18474:	moveq	r4, #1
   18478:	b	18454 <__assert_fail@plt+0x6f74>
   1847c:	push	{r4, r5, r6, lr}
   18480:	mov	r6, r0
   18484:	mov	r5, r1
   18488:	subs	r4, r2, #0
   1848c:	beq	184b8 <__assert_fail@plt+0x6fd8>
   18490:	mov	r1, r4
   18494:	mvn	r0, #0
   18498:	bl	1883c <__assert_fail@plt+0x735c>
   1849c:	cmp	r0, r5
   184a0:	bcs	184b8 <__assert_fail@plt+0x6fd8>
   184a4:	bl	1139c <__errno_location@plt>
   184a8:	mov	r3, #12
   184ac:	str	r3, [r0]
   184b0:	mov	r0, #0
   184b4:	pop	{r4, r5, r6, pc}
   184b8:	mul	r1, r5, r4
   184bc:	mov	r0, r6
   184c0:	bl	18328 <__assert_fail@plt+0x6e48>
   184c4:	pop	{r4, r5, r6, pc}
   184c8:	push	{r4, lr}
   184cc:	mov	r2, #3
   184d0:	mov	r1, #0
   184d4:	bl	184dc <__assert_fail@plt+0x6ffc>
   184d8:	pop	{r4, pc}
   184dc:	push	{r1, r2, r3}
   184e0:	push	{r4, r5, r6, lr}
   184e4:	sub	sp, sp, #12
   184e8:	mov	r5, r0
   184ec:	ldr	r1, [sp, #28]
   184f0:	add	r3, sp, #32
   184f4:	str	r3, [sp, #4]
   184f8:	cmp	r1, #0
   184fc:	beq	18544 <__assert_fail@plt+0x7064>
   18500:	ldr	r3, [pc, #540]	; 18724 <__assert_fail@plt+0x7244>
   18504:	cmp	r1, r3
   18508:	beq	18574 <__assert_fail@plt+0x7094>
   1850c:	cmp	r1, #11
   18510:	beq	18714 <__assert_fail@plt+0x7234>
   18514:	bgt	186a0 <__assert_fail@plt+0x71c0>
   18518:	cmp	r1, #3
   1851c:	beq	18714 <__assert_fail@plt+0x7234>
   18520:	ble	18660 <__assert_fail@plt+0x7180>
   18524:	cmp	r1, #8
   18528:	beq	18680 <__assert_fail@plt+0x71a0>
   1852c:	ble	18678 <__assert_fail@plt+0x7198>
   18530:	cmp	r1, #9
   18534:	beq	18714 <__assert_fail@plt+0x7234>
   18538:	cmp	r1, #10
   1853c:	bne	186d8 <__assert_fail@plt+0x71f8>
   18540:	b	18680 <__assert_fail@plt+0x71a0>
   18544:	ldr	r3, [sp, #4]
   18548:	add	r2, r3, #4
   1854c:	str	r2, [sp, #4]
   18550:	ldr	r2, [r3]
   18554:	mov	r1, #0
   18558:	bl	1142c <fcntl64@plt>
   1855c:	mov	r4, r0
   18560:	mov	r0, r4
   18564:	add	sp, sp, #12
   18568:	pop	{r4, r5, r6, lr}
   1856c:	add	sp, sp, #12
   18570:	bx	lr
   18574:	ldr	r3, [sp, #4]
   18578:	add	r2, r3, #4
   1857c:	str	r2, [sp, #4]
   18580:	ldr	r6, [r3]
   18584:	ldr	r3, [pc, #412]	; 18728 <__assert_fail@plt+0x7248>
   18588:	ldr	r3, [r3]
   1858c:	cmp	r3, #0
   18590:	blt	185f0 <__assert_fail@plt+0x7110>
   18594:	mov	r2, r6
   18598:	ldr	r1, [pc, #388]	; 18724 <__assert_fail@plt+0x7244>
   1859c:	bl	1142c <fcntl64@plt>
   185a0:	subs	r4, r0, #0
   185a4:	blt	185b8 <__assert_fail@plt+0x70d8>
   185a8:	mov	r2, #1
   185ac:	ldr	r3, [pc, #372]	; 18728 <__assert_fail@plt+0x7248>
   185b0:	str	r2, [r3]
   185b4:	b	18560 <__assert_fail@plt+0x7080>
   185b8:	bl	1139c <__errno_location@plt>
   185bc:	ldr	r3, [r0]
   185c0:	cmp	r3, #22
   185c4:	bne	185a8 <__assert_fail@plt+0x70c8>
   185c8:	mov	r2, r6
   185cc:	mov	r1, #0
   185d0:	mov	r0, r5
   185d4:	bl	1142c <fcntl64@plt>
   185d8:	subs	r4, r0, #0
   185dc:	blt	18560 <__assert_fail@plt+0x7080>
   185e0:	mvn	r2, #0
   185e4:	ldr	r3, [pc, #316]	; 18728 <__assert_fail@plt+0x7248>
   185e8:	str	r2, [r3]
   185ec:	b	18614 <__assert_fail@plt+0x7134>
   185f0:	mov	r2, r6
   185f4:	mov	r1, #0
   185f8:	bl	1142c <fcntl64@plt>
   185fc:	subs	r4, r0, #0
   18600:	blt	18560 <__assert_fail@plt+0x7080>
   18604:	ldr	r3, [pc, #284]	; 18728 <__assert_fail@plt+0x7248>
   18608:	ldr	r3, [r3]
   1860c:	cmn	r3, #1
   18610:	bne	18560 <__assert_fail@plt+0x7080>
   18614:	mov	r1, #1
   18618:	mov	r0, r4
   1861c:	bl	1142c <fcntl64@plt>
   18620:	subs	r2, r0, #0
   18624:	blt	18640 <__assert_fail@plt+0x7160>
   18628:	orr	r2, r2, #1
   1862c:	mov	r1, #2
   18630:	mov	r0, r4
   18634:	bl	1142c <fcntl64@plt>
   18638:	cmn	r0, #1
   1863c:	bne	18560 <__assert_fail@plt+0x7080>
   18640:	bl	1139c <__errno_location@plt>
   18644:	mov	r5, r0
   18648:	ldr	r6, [r0]
   1864c:	mov	r0, r4
   18650:	bl	114c8 <close@plt>
   18654:	str	r6, [r5]
   18658:	mvn	r4, #0
   1865c:	b	18560 <__assert_fail@plt+0x7080>
   18660:	cmp	r1, #1
   18664:	beq	18714 <__assert_fail@plt+0x7234>
   18668:	bgt	18680 <__assert_fail@plt+0x71a0>
   1866c:	cmp	r1, #0
   18670:	bne	186d8 <__assert_fail@plt+0x71f8>
   18674:	b	18680 <__assert_fail@plt+0x71a0>
   18678:	cmp	r1, #4
   1867c:	bne	186d8 <__assert_fail@plt+0x71f8>
   18680:	ldr	r3, [sp, #4]
   18684:	add	r2, r3, #4
   18688:	str	r2, [sp, #4]
   1868c:	ldr	r2, [r3]
   18690:	mov	r0, r5
   18694:	bl	1142c <fcntl64@plt>
   18698:	mov	r4, r0
   1869c:	b	18560 <__assert_fail@plt+0x7080>
   186a0:	ldr	r3, [pc, #132]	; 1872c <__assert_fail@plt+0x724c>
   186a4:	cmp	r1, r3
   186a8:	bgt	186f8 <__assert_fail@plt+0x7218>
   186ac:	sub	r3, r3, #1
   186b0:	cmp	r1, r3
   186b4:	bge	18680 <__assert_fail@plt+0x71a0>
   186b8:	sub	r3, r3, #5
   186bc:	cmp	r1, r3
   186c0:	beq	18714 <__assert_fail@plt+0x7234>
   186c4:	add	r3, r3, #1
   186c8:	cmp	r1, r3
   186cc:	beq	18680 <__assert_fail@plt+0x71a0>
   186d0:	cmp	r1, #1024	; 0x400
   186d4:	beq	18680 <__assert_fail@plt+0x71a0>
   186d8:	ldr	r3, [sp, #4]
   186dc:	add	r2, r3, #4
   186e0:	str	r2, [sp, #4]
   186e4:	ldr	r2, [r3]
   186e8:	mov	r0, r5
   186ec:	bl	1142c <fcntl64@plt>
   186f0:	mov	r4, r0
   186f4:	b	18560 <__assert_fail@plt+0x7080>
   186f8:	ldr	r3, [pc, #48]	; 18730 <__assert_fail@plt+0x7250>
   186fc:	cmp	r1, r3
   18700:	beq	18680 <__assert_fail@plt+0x71a0>
   18704:	blt	18714 <__assert_fail@plt+0x7234>
   18708:	add	r3, r3, #1
   1870c:	cmp	r1, r3
   18710:	bne	186d8 <__assert_fail@plt+0x71f8>
   18714:	mov	r0, r5
   18718:	bl	1142c <fcntl64@plt>
   1871c:	mov	r4, r0
   18720:	b	18560 <__assert_fail@plt+0x7080>
   18724:	andeq	r0, r0, r6, lsl #8
   18728:	andeq	fp, r2, r0, ror #12
   1872c:	andeq	r0, r0, r7, lsl #8
   18730:	andeq	r0, r0, r9, lsl #8
   18734:	push	{lr}		; (str lr, [sp, #-4]!)
   18738:	sub	sp, sp, #268	; 0x10c
   1873c:	ldr	r2, [pc, #68]	; 18788 <__assert_fail@plt+0x72a8>
   18740:	add	r1, sp, #4
   18744:	bl	18794 <__assert_fail@plt+0x72b4>
   18748:	cmp	r0, #0
   1874c:	movne	r0, #0
   18750:	bne	18780 <__assert_fail@plt+0x72a0>
   18754:	ldr	r1, [pc, #48]	; 1878c <__assert_fail@plt+0x72ac>
   18758:	add	r0, sp, #4
   1875c:	bl	11168 <strcmp@plt>
   18760:	cmp	r0, #0
   18764:	moveq	r0, #0
   18768:	beq	18780 <__assert_fail@plt+0x72a0>
   1876c:	ldr	r1, [pc, #28]	; 18790 <__assert_fail@plt+0x72b0>
   18770:	add	r0, sp, #4
   18774:	bl	11168 <strcmp@plt>
   18778:	adds	r0, r0, #0
   1877c:	movne	r0, #1
   18780:	add	sp, sp, #268	; 0x10c
   18784:	pop	{pc}		; (ldr pc, [sp], #4)
   18788:	andeq	r0, r0, r1, lsl #2
   1878c:	andeq	sl, r1, ip, lsl #11
   18790:	muleq	r1, r0, r5
   18794:	push	{r4, r5, r6, lr}
   18798:	mov	r6, r1
   1879c:	mov	r4, r2
   187a0:	mov	r1, #0
   187a4:	bl	11438 <setlocale@plt>
   187a8:	subs	r5, r0, #0
   187ac:	beq	187d0 <__assert_fail@plt+0x72f0>
   187b0:	mov	r0, r5
   187b4:	bl	11354 <strlen@plt>
   187b8:	cmp	r4, r0
   187bc:	bhi	187e8 <__assert_fail@plt+0x7308>
   187c0:	cmp	r4, #0
   187c4:	bne	18800 <__assert_fail@plt+0x7320>
   187c8:	mov	r0, #34	; 0x22
   187cc:	pop	{r4, r5, r6, pc}
   187d0:	cmp	r4, #0
   187d4:	beq	18824 <__assert_fail@plt+0x7344>
   187d8:	mov	r3, #0
   187dc:	strb	r3, [r6]
   187e0:	mov	r0, #22
   187e4:	pop	{r4, r5, r6, pc}
   187e8:	add	r2, r0, #1
   187ec:	mov	r1, r5
   187f0:	mov	r0, r6
   187f4:	bl	111c8 <memcpy@plt>
   187f8:	mov	r0, #0
   187fc:	pop	{r4, r5, r6, pc}
   18800:	sub	r4, r4, #1
   18804:	mov	r2, r4
   18808:	mov	r1, r5
   1880c:	mov	r0, r6
   18810:	bl	111c8 <memcpy@plt>
   18814:	mov	r3, #0
   18818:	strb	r3, [r6, r4]
   1881c:	mov	r0, #34	; 0x22
   18820:	pop	{r4, r5, r6, pc}
   18824:	mov	r0, #22
   18828:	pop	{r4, r5, r6, pc}
   1882c:	push	{r4, lr}
   18830:	mov	r1, #0
   18834:	bl	11438 <setlocale@plt>
   18838:	pop	{r4, pc}
   1883c:	subs	r2, r1, #1
   18840:	bxeq	lr
   18844:	bcc	18a1c <__assert_fail@plt+0x753c>
   18848:	cmp	r0, r1
   1884c:	bls	18a00 <__assert_fail@plt+0x7520>
   18850:	tst	r1, r2
   18854:	beq	18a0c <__assert_fail@plt+0x752c>
   18858:	clz	r3, r0
   1885c:	clz	r2, r1
   18860:	sub	r3, r2, r3
   18864:	rsbs	r3, r3, #31
   18868:	addne	r3, r3, r3, lsl #1
   1886c:	mov	r2, #0
   18870:	addne	pc, pc, r3, lsl #2
   18874:	nop			; (mov r0, r0)
   18878:	cmp	r0, r1, lsl #31
   1887c:	adc	r2, r2, r2
   18880:	subcs	r0, r0, r1, lsl #31
   18884:	cmp	r0, r1, lsl #30
   18888:	adc	r2, r2, r2
   1888c:	subcs	r0, r0, r1, lsl #30
   18890:	cmp	r0, r1, lsl #29
   18894:	adc	r2, r2, r2
   18898:	subcs	r0, r0, r1, lsl #29
   1889c:	cmp	r0, r1, lsl #28
   188a0:	adc	r2, r2, r2
   188a4:	subcs	r0, r0, r1, lsl #28
   188a8:	cmp	r0, r1, lsl #27
   188ac:	adc	r2, r2, r2
   188b0:	subcs	r0, r0, r1, lsl #27
   188b4:	cmp	r0, r1, lsl #26
   188b8:	adc	r2, r2, r2
   188bc:	subcs	r0, r0, r1, lsl #26
   188c0:	cmp	r0, r1, lsl #25
   188c4:	adc	r2, r2, r2
   188c8:	subcs	r0, r0, r1, lsl #25
   188cc:	cmp	r0, r1, lsl #24
   188d0:	adc	r2, r2, r2
   188d4:	subcs	r0, r0, r1, lsl #24
   188d8:	cmp	r0, r1, lsl #23
   188dc:	adc	r2, r2, r2
   188e0:	subcs	r0, r0, r1, lsl #23
   188e4:	cmp	r0, r1, lsl #22
   188e8:	adc	r2, r2, r2
   188ec:	subcs	r0, r0, r1, lsl #22
   188f0:	cmp	r0, r1, lsl #21
   188f4:	adc	r2, r2, r2
   188f8:	subcs	r0, r0, r1, lsl #21
   188fc:	cmp	r0, r1, lsl #20
   18900:	adc	r2, r2, r2
   18904:	subcs	r0, r0, r1, lsl #20
   18908:	cmp	r0, r1, lsl #19
   1890c:	adc	r2, r2, r2
   18910:	subcs	r0, r0, r1, lsl #19
   18914:	cmp	r0, r1, lsl #18
   18918:	adc	r2, r2, r2
   1891c:	subcs	r0, r0, r1, lsl #18
   18920:	cmp	r0, r1, lsl #17
   18924:	adc	r2, r2, r2
   18928:	subcs	r0, r0, r1, lsl #17
   1892c:	cmp	r0, r1, lsl #16
   18930:	adc	r2, r2, r2
   18934:	subcs	r0, r0, r1, lsl #16
   18938:	cmp	r0, r1, lsl #15
   1893c:	adc	r2, r2, r2
   18940:	subcs	r0, r0, r1, lsl #15
   18944:	cmp	r0, r1, lsl #14
   18948:	adc	r2, r2, r2
   1894c:	subcs	r0, r0, r1, lsl #14
   18950:	cmp	r0, r1, lsl #13
   18954:	adc	r2, r2, r2
   18958:	subcs	r0, r0, r1, lsl #13
   1895c:	cmp	r0, r1, lsl #12
   18960:	adc	r2, r2, r2
   18964:	subcs	r0, r0, r1, lsl #12
   18968:	cmp	r0, r1, lsl #11
   1896c:	adc	r2, r2, r2
   18970:	subcs	r0, r0, r1, lsl #11
   18974:	cmp	r0, r1, lsl #10
   18978:	adc	r2, r2, r2
   1897c:	subcs	r0, r0, r1, lsl #10
   18980:	cmp	r0, r1, lsl #9
   18984:	adc	r2, r2, r2
   18988:	subcs	r0, r0, r1, lsl #9
   1898c:	cmp	r0, r1, lsl #8
   18990:	adc	r2, r2, r2
   18994:	subcs	r0, r0, r1, lsl #8
   18998:	cmp	r0, r1, lsl #7
   1899c:	adc	r2, r2, r2
   189a0:	subcs	r0, r0, r1, lsl #7
   189a4:	cmp	r0, r1, lsl #6
   189a8:	adc	r2, r2, r2
   189ac:	subcs	r0, r0, r1, lsl #6
   189b0:	cmp	r0, r1, lsl #5
   189b4:	adc	r2, r2, r2
   189b8:	subcs	r0, r0, r1, lsl #5
   189bc:	cmp	r0, r1, lsl #4
   189c0:	adc	r2, r2, r2
   189c4:	subcs	r0, r0, r1, lsl #4
   189c8:	cmp	r0, r1, lsl #3
   189cc:	adc	r2, r2, r2
   189d0:	subcs	r0, r0, r1, lsl #3
   189d4:	cmp	r0, r1, lsl #2
   189d8:	adc	r2, r2, r2
   189dc:	subcs	r0, r0, r1, lsl #2
   189e0:	cmp	r0, r1, lsl #1
   189e4:	adc	r2, r2, r2
   189e8:	subcs	r0, r0, r1, lsl #1
   189ec:	cmp	r0, r1
   189f0:	adc	r2, r2, r2
   189f4:	subcs	r0, r0, r1
   189f8:	mov	r0, r2
   189fc:	bx	lr
   18a00:	moveq	r0, #1
   18a04:	movne	r0, #0
   18a08:	bx	lr
   18a0c:	clz	r2, r1
   18a10:	rsb	r2, r2, #31
   18a14:	lsr	r0, r0, r2
   18a18:	bx	lr
   18a1c:	cmp	r0, #0
   18a20:	mvnne	r0, #0
   18a24:	b	18cc4 <__assert_fail@plt+0x77e4>
   18a28:	cmp	r1, #0
   18a2c:	beq	18a1c <__assert_fail@plt+0x753c>
   18a30:	push	{r0, r1, lr}
   18a34:	bl	1883c <__assert_fail@plt+0x735c>
   18a38:	pop	{r1, r2, lr}
   18a3c:	mul	r3, r2, r0
   18a40:	sub	r1, r1, r3
   18a44:	bx	lr
   18a48:	cmp	r1, #0
   18a4c:	beq	18c58 <__assert_fail@plt+0x7778>
   18a50:	eor	ip, r0, r1
   18a54:	rsbmi	r1, r1, #0
   18a58:	subs	r2, r1, #1
   18a5c:	beq	18c24 <__assert_fail@plt+0x7744>
   18a60:	movs	r3, r0
   18a64:	rsbmi	r3, r0, #0
   18a68:	cmp	r3, r1
   18a6c:	bls	18c30 <__assert_fail@plt+0x7750>
   18a70:	tst	r1, r2
   18a74:	beq	18c40 <__assert_fail@plt+0x7760>
   18a78:	clz	r2, r3
   18a7c:	clz	r0, r1
   18a80:	sub	r2, r0, r2
   18a84:	rsbs	r2, r2, #31
   18a88:	addne	r2, r2, r2, lsl #1
   18a8c:	mov	r0, #0
   18a90:	addne	pc, pc, r2, lsl #2
   18a94:	nop			; (mov r0, r0)
   18a98:	cmp	r3, r1, lsl #31
   18a9c:	adc	r0, r0, r0
   18aa0:	subcs	r3, r3, r1, lsl #31
   18aa4:	cmp	r3, r1, lsl #30
   18aa8:	adc	r0, r0, r0
   18aac:	subcs	r3, r3, r1, lsl #30
   18ab0:	cmp	r3, r1, lsl #29
   18ab4:	adc	r0, r0, r0
   18ab8:	subcs	r3, r3, r1, lsl #29
   18abc:	cmp	r3, r1, lsl #28
   18ac0:	adc	r0, r0, r0
   18ac4:	subcs	r3, r3, r1, lsl #28
   18ac8:	cmp	r3, r1, lsl #27
   18acc:	adc	r0, r0, r0
   18ad0:	subcs	r3, r3, r1, lsl #27
   18ad4:	cmp	r3, r1, lsl #26
   18ad8:	adc	r0, r0, r0
   18adc:	subcs	r3, r3, r1, lsl #26
   18ae0:	cmp	r3, r1, lsl #25
   18ae4:	adc	r0, r0, r0
   18ae8:	subcs	r3, r3, r1, lsl #25
   18aec:	cmp	r3, r1, lsl #24
   18af0:	adc	r0, r0, r0
   18af4:	subcs	r3, r3, r1, lsl #24
   18af8:	cmp	r3, r1, lsl #23
   18afc:	adc	r0, r0, r0
   18b00:	subcs	r3, r3, r1, lsl #23
   18b04:	cmp	r3, r1, lsl #22
   18b08:	adc	r0, r0, r0
   18b0c:	subcs	r3, r3, r1, lsl #22
   18b10:	cmp	r3, r1, lsl #21
   18b14:	adc	r0, r0, r0
   18b18:	subcs	r3, r3, r1, lsl #21
   18b1c:	cmp	r3, r1, lsl #20
   18b20:	adc	r0, r0, r0
   18b24:	subcs	r3, r3, r1, lsl #20
   18b28:	cmp	r3, r1, lsl #19
   18b2c:	adc	r0, r0, r0
   18b30:	subcs	r3, r3, r1, lsl #19
   18b34:	cmp	r3, r1, lsl #18
   18b38:	adc	r0, r0, r0
   18b3c:	subcs	r3, r3, r1, lsl #18
   18b40:	cmp	r3, r1, lsl #17
   18b44:	adc	r0, r0, r0
   18b48:	subcs	r3, r3, r1, lsl #17
   18b4c:	cmp	r3, r1, lsl #16
   18b50:	adc	r0, r0, r0
   18b54:	subcs	r3, r3, r1, lsl #16
   18b58:	cmp	r3, r1, lsl #15
   18b5c:	adc	r0, r0, r0
   18b60:	subcs	r3, r3, r1, lsl #15
   18b64:	cmp	r3, r1, lsl #14
   18b68:	adc	r0, r0, r0
   18b6c:	subcs	r3, r3, r1, lsl #14
   18b70:	cmp	r3, r1, lsl #13
   18b74:	adc	r0, r0, r0
   18b78:	subcs	r3, r3, r1, lsl #13
   18b7c:	cmp	r3, r1, lsl #12
   18b80:	adc	r0, r0, r0
   18b84:	subcs	r3, r3, r1, lsl #12
   18b88:	cmp	r3, r1, lsl #11
   18b8c:	adc	r0, r0, r0
   18b90:	subcs	r3, r3, r1, lsl #11
   18b94:	cmp	r3, r1, lsl #10
   18b98:	adc	r0, r0, r0
   18b9c:	subcs	r3, r3, r1, lsl #10
   18ba0:	cmp	r3, r1, lsl #9
   18ba4:	adc	r0, r0, r0
   18ba8:	subcs	r3, r3, r1, lsl #9
   18bac:	cmp	r3, r1, lsl #8
   18bb0:	adc	r0, r0, r0
   18bb4:	subcs	r3, r3, r1, lsl #8
   18bb8:	cmp	r3, r1, lsl #7
   18bbc:	adc	r0, r0, r0
   18bc0:	subcs	r3, r3, r1, lsl #7
   18bc4:	cmp	r3, r1, lsl #6
   18bc8:	adc	r0, r0, r0
   18bcc:	subcs	r3, r3, r1, lsl #6
   18bd0:	cmp	r3, r1, lsl #5
   18bd4:	adc	r0, r0, r0
   18bd8:	subcs	r3, r3, r1, lsl #5
   18bdc:	cmp	r3, r1, lsl #4
   18be0:	adc	r0, r0, r0
   18be4:	subcs	r3, r3, r1, lsl #4
   18be8:	cmp	r3, r1, lsl #3
   18bec:	adc	r0, r0, r0
   18bf0:	subcs	r3, r3, r1, lsl #3
   18bf4:	cmp	r3, r1, lsl #2
   18bf8:	adc	r0, r0, r0
   18bfc:	subcs	r3, r3, r1, lsl #2
   18c00:	cmp	r3, r1, lsl #1
   18c04:	adc	r0, r0, r0
   18c08:	subcs	r3, r3, r1, lsl #1
   18c0c:	cmp	r3, r1
   18c10:	adc	r0, r0, r0
   18c14:	subcs	r3, r3, r1
   18c18:	cmp	ip, #0
   18c1c:	rsbmi	r0, r0, #0
   18c20:	bx	lr
   18c24:	teq	ip, r0
   18c28:	rsbmi	r0, r0, #0
   18c2c:	bx	lr
   18c30:	movcc	r0, #0
   18c34:	asreq	r0, ip, #31
   18c38:	orreq	r0, r0, #1
   18c3c:	bx	lr
   18c40:	clz	r2, r1
   18c44:	rsb	r2, r2, #31
   18c48:	cmp	ip, #0
   18c4c:	lsr	r0, r3, r2
   18c50:	rsbmi	r0, r0, #0
   18c54:	bx	lr
   18c58:	cmp	r0, #0
   18c5c:	mvngt	r0, #-2147483648	; 0x80000000
   18c60:	movlt	r0, #-2147483648	; 0x80000000
   18c64:	b	18cc4 <__assert_fail@plt+0x77e4>
   18c68:	cmp	r1, #0
   18c6c:	beq	18c58 <__assert_fail@plt+0x7778>
   18c70:	push	{r0, r1, lr}
   18c74:	bl	18a50 <__assert_fail@plt+0x7570>
   18c78:	pop	{r1, r2, lr}
   18c7c:	mul	r3, r2, r0
   18c80:	sub	r1, r1, r3
   18c84:	bx	lr
   18c88:	cmp	r3, #0
   18c8c:	cmpeq	r2, #0
   18c90:	bne	18ca8 <__assert_fail@plt+0x77c8>
   18c94:	cmp	r1, #0
   18c98:	cmpeq	r0, #0
   18c9c:	mvnne	r1, #0
   18ca0:	mvnne	r0, #0
   18ca4:	b	18cc4 <__assert_fail@plt+0x77e4>
   18ca8:	sub	sp, sp, #8
   18cac:	push	{sp, lr}
   18cb0:	bl	18cd4 <__assert_fail@plt+0x77f4>
   18cb4:	ldr	lr, [sp, #4]
   18cb8:	add	sp, sp, #8
   18cbc:	pop	{r2, r3}
   18cc0:	bx	lr
   18cc4:	push	{r1, lr}
   18cc8:	mov	r0, #8
   18ccc:	bl	1115c <raise@plt>
   18cd0:	pop	{r1, pc}
   18cd4:	cmp	r1, r3
   18cd8:	push	{r4, r5, r6, r7, r8, r9, lr}
   18cdc:	cmpeq	r0, r2
   18ce0:	mov	r4, r0
   18ce4:	mov	r5, r1
   18ce8:	ldr	r9, [sp, #28]
   18cec:	movcc	r0, #0
   18cf0:	movcc	r1, #0
   18cf4:	bcc	18dec <__assert_fail@plt+0x790c>
   18cf8:	cmp	r3, #0
   18cfc:	clzeq	ip, r2
   18d00:	clzne	ip, r3
   18d04:	addeq	ip, ip, #32
   18d08:	cmp	r5, #0
   18d0c:	clzeq	r1, r4
   18d10:	addeq	r1, r1, #32
   18d14:	clzne	r1, r5
   18d18:	sub	ip, ip, r1
   18d1c:	sub	lr, ip, #32
   18d20:	lsl	r7, r3, ip
   18d24:	rsb	r8, ip, #32
   18d28:	orr	r7, r7, r2, lsl lr
   18d2c:	orr	r7, r7, r2, lsr r8
   18d30:	lsl	r6, r2, ip
   18d34:	cmp	r5, r7
   18d38:	cmpeq	r4, r6
   18d3c:	movcc	r0, #0
   18d40:	movcc	r1, #0
   18d44:	bcc	18d60 <__assert_fail@plt+0x7880>
   18d48:	mov	r3, #1
   18d4c:	subs	r4, r4, r6
   18d50:	lsl	r1, r3, lr
   18d54:	lsl	r0, r3, ip
   18d58:	orr	r1, r1, r3, lsr r8
   18d5c:	sbc	r5, r5, r7
   18d60:	cmp	ip, #0
   18d64:	beq	18dec <__assert_fail@plt+0x790c>
   18d68:	lsrs	r3, r7, #1
   18d6c:	rrx	r2, r6
   18d70:	mov	r6, ip
   18d74:	b	18d98 <__assert_fail@plt+0x78b8>
   18d78:	subs	r4, r4, r2
   18d7c:	sbc	r5, r5, r3
   18d80:	adds	r4, r4, r4
   18d84:	adc	r5, r5, r5
   18d88:	adds	r4, r4, #1
   18d8c:	adc	r5, r5, #0
   18d90:	subs	r6, r6, #1
   18d94:	beq	18db4 <__assert_fail@plt+0x78d4>
   18d98:	cmp	r5, r3
   18d9c:	cmpeq	r4, r2
   18da0:	bcs	18d78 <__assert_fail@plt+0x7898>
   18da4:	adds	r4, r4, r4
   18da8:	adc	r5, r5, r5
   18dac:	subs	r6, r6, #1
   18db0:	bne	18d98 <__assert_fail@plt+0x78b8>
   18db4:	lsr	r6, r4, ip
   18db8:	lsr	r7, r5, ip
   18dbc:	orr	r6, r6, r5, lsl r8
   18dc0:	adds	r2, r0, r4
   18dc4:	orr	r6, r6, r5, lsr lr
   18dc8:	adc	r3, r1, r5
   18dcc:	lsl	r1, r7, ip
   18dd0:	orr	r1, r1, r6, lsl lr
   18dd4:	lsl	r0, r6, ip
   18dd8:	orr	r1, r1, r6, lsr r8
   18ddc:	subs	r0, r2, r0
   18de0:	mov	r4, r6
   18de4:	mov	r5, r7
   18de8:	sbc	r1, r3, r1
   18dec:	cmp	r9, #0
   18df0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18df4:	strd	r4, [r9]
   18df8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18dfc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18e00:	mov	r7, r0
   18e04:	ldr	r6, [pc, #72]	; 18e54 <__assert_fail@plt+0x7974>
   18e08:	ldr	r5, [pc, #72]	; 18e58 <__assert_fail@plt+0x7978>
   18e0c:	add	r6, pc, r6
   18e10:	add	r5, pc, r5
   18e14:	sub	r6, r6, r5
   18e18:	mov	r8, r1
   18e1c:	mov	r9, r2
   18e20:	bl	11118 <fdopen@plt-0x20>
   18e24:	asrs	r6, r6, #2
   18e28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e2c:	mov	r4, #0
   18e30:	add	r4, r4, #1
   18e34:	ldr	r3, [r5], #4
   18e38:	mov	r2, r9
   18e3c:	mov	r1, r8
   18e40:	mov	r0, r7
   18e44:	blx	r3
   18e48:	cmp	r6, r4
   18e4c:	bne	18e30 <__assert_fail@plt+0x7950>
   18e50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e54:	strdeq	r2, [r1], -ip
   18e58:	strdeq	r2, [r1], -r4
   18e5c:	bx	lr
   18e60:	ldr	r3, [pc, #12]	; 18e74 <__assert_fail@plt+0x7994>
   18e64:	mov	r1, #0
   18e68:	add	r3, pc, r3
   18e6c:	ldr	r2, [r3]
   18e70:	b	113b4 <__cxa_atexit@plt>
   18e74:	andeq	r2, r1, r0, ror #5

Disassembly of section .fini:

00018e78 <.fini>:
   18e78:	push	{r3, lr}
   18e7c:	pop	{r3, pc}
