
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r8, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <memcmp@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <dcgettext@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <realloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <textdomain@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <iswprint@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <fwrite@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <lseek64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__ctype_get_mb_cur_max@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <__fpending@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <mbrtowc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <error@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <malloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__libc_start_main@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__freading@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <__gmon_start__@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <getopt_long@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <__ctype_b_loc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <exit@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f44 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r7, r1, r4, ror #9
   110c8:	andeq	r1, r1, ip, asr #8
   110cc:	andeq	r7, r1, r4, lsl #9
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f5c <__gmon_start__@plt>
   110ec:	andeq	r7, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r9, r2, r0, lsr r1
   11118:	andeq	r9, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r9, r2, r0, lsr r1
   11150:	andeq	r9, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	r9, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	11408 <__assert_fail@plt+0x380>
   1119c:	movw	r1, #30003	; 0x7533
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10ec0 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #37216	; 0x9160
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #30033	; 0x7551
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10ec0 <dcgettext@plt>
   111dc:	mov	r1, r0
   111e0:	mov	r0, #1
   111e4:	mov	r2, #32
   111e8:	bl	10fc8 <__printf_chk@plt>
   111ec:	movw	r1, #30823	; 0x7867
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10ec0 <dcgettext@plt>
   11200:	movw	r7, #37196	; 0x914c
   11204:	movt	r7, #2
   11208:	ldr	r1, [r7]
   1120c:	bl	10e30 <fputs_unlocked@plt>
   11210:	movw	r1, #30879	; 0x789f
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10ec0 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e30 <fputs_unlocked@plt>
   1122c:	movw	r1, #30103	; 0x7597
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10ec0 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e30 <fputs_unlocked@plt>
   11248:	movw	r1, #30345	; 0x7689
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10ec0 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e30 <fputs_unlocked@plt>
   11264:	movw	r1, #30390	; 0x76b6
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10ec0 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e30 <fputs_unlocked@plt>
   11280:	movw	r1, #30444	; 0x76ec
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10ec0 <dcgettext@plt>
   11294:	movw	r5, #30712	; 0x77f8
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r5, #1
   112a4:	mov	r2, r5
   112a8:	mov	r3, r5
   112ac:	bl	10fc8 <__printf_chk@plt>
   112b0:	movw	r0, #31464	; 0x7ae8
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movt	r0, #1
   112c0:	add	r1, r0, #32
   112c4:	add	r3, r0, #16
   112c8:	vld1.64	{d18-d19}, [r0], r2
   112cc:	vld1.64	{d16-d17}, [r1]
   112d0:	vld1.64	{d20-d21}, [r3]
   112d4:	add	r1, r6, #32
   112d8:	vldr	d22, [r0]
   112dc:	add	r0, r6, #16
   112e0:	vst1.64	{d16-d17}, [r1]
   112e4:	movw	r1, #30954	; 0x78ea
   112e8:	vst1.64	{d20-d21}, [r0]
   112ec:	mov	r0, r6
   112f0:	vst1.64	{d18-d19}, [r0], r2
   112f4:	movt	r1, #1
   112f8:	vstr	d22, [r0]
   112fc:	mov	r0, r5
   11300:	bl	10e48 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	ldrne	r1, [r6, #8]!
   1130c:	cmpne	r1, #0
   11310:	bne	112fc <__assert_fail@plt+0x274>
   11314:	ldr	r6, [r6, #4]
   11318:	movw	r1, #31049	; 0x7949
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	movt	r1, #1
   11328:	bl	10ec0 <dcgettext@plt>
   1132c:	movw	r2, #30773	; 0x7835
   11330:	movw	r3, #31072	; 0x7960
   11334:	mov	r1, r0
   11338:	mov	r0, #1
   1133c:	movt	r2, #1
   11340:	movt	r3, #1
   11344:	bl	10fc8 <__printf_chk@plt>
   11348:	cmp	r6, #0
   1134c:	mov	r0, #5
   11350:	mov	r1, #0
   11354:	moveq	r6, r5
   11358:	bl	1101c <setlocale@plt>
   1135c:	cmp	r0, #0
   11360:	beq	11398 <__assert_fail@plt+0x310>
   11364:	movw	r1, #31112	; 0x7988
   11368:	mov	r2, #3
   1136c:	movt	r1, #1
   11370:	bl	11070 <strncmp@plt>
   11374:	cmp	r0, #0
   11378:	beq	11398 <__assert_fail@plt+0x310>
   1137c:	movw	r1, #31116	; 0x798c
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10ec0 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10e30 <fputs_unlocked@plt>
   11398:	movw	r1, #31187	; 0x79d3
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10ec0 <dcgettext@plt>
   113ac:	movw	r2, #31072	; 0x7960
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	mov	r3, r5
   113bc:	movt	r2, #1
   113c0:	bl	10fc8 <__printf_chk@plt>
   113c4:	movw	r1, #31214	; 0x79ee
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	movt	r1, #1
   113d4:	bl	10ec0 <dcgettext@plt>
   113d8:	movw	r3, #31264	; 0x7a20
   113dc:	mov	r1, r0
   113e0:	movw	r0, #30982	; 0x7906
   113e4:	cmp	r6, r5
   113e8:	mov	r2, r6
   113ec:	movt	r0, #1
   113f0:	movt	r3, #1
   113f4:	moveq	r3, r0
   113f8:	mov	r0, #1
   113fc:	bl	10fc8 <__printf_chk@plt>
   11400:	mov	r0, r4
   11404:	bl	10f80 <exit@plt>
   11408:	movw	r0, #37184	; 0x9140
   1140c:	movw	r1, #29964	; 0x750c
   11410:	mov	r2, #5
   11414:	movt	r0, #2
   11418:	movt	r1, #1
   1141c:	ldr	r5, [r0]
   11420:	mov	r0, #0
   11424:	bl	10ec0 <dcgettext@plt>
   11428:	mov	r2, r0
   1142c:	movw	r0, #37216	; 0x9160
   11430:	mov	r1, #1
   11434:	movt	r0, #2
   11438:	ldr	r3, [r0]
   1143c:	mov	r0, r5
   11440:	bl	10fe0 <__fprintf_chk@plt>
   11444:	mov	r0, r4
   11448:	bl	10f80 <exit@plt>
   1144c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11450:	add	fp, sp, #28
   11454:	sub	sp, sp, #28
   11458:	mov	r5, r0
   1145c:	ldr	r0, [r1]
   11460:	mov	r4, r1
   11464:	bl	129ac <__assert_fail@plt+0x1924>
   11468:	movw	r1, #31264	; 0x7a20
   1146c:	mov	r0, #6
   11470:	movt	r1, #1
   11474:	bl	1101c <setlocale@plt>
   11478:	movw	r6, #30777	; 0x7839
   1147c:	movw	r1, #30719	; 0x77ff
   11480:	movt	r6, #1
   11484:	movt	r1, #1
   11488:	mov	r0, r6
   1148c:	bl	11058 <bindtextdomain@plt>
   11490:	mov	r0, r6
   11494:	bl	10ed8 <textdomain@plt>
   11498:	movw	r0, #9904	; 0x26b0
   1149c:	movt	r0, #1
   114a0:	bl	174e8 <__assert_fail@plt+0x6460>
   114a4:	movw	r9, #30743	; 0x7817
   114a8:	movw	r7, #31368	; 0x7a88
   114ac:	mov	r6, #76	; 0x4c
   114b0:	mov	r8, #0
   114b4:	mov	sl, #0
   114b8:	mov	r0, #0
   114bc:	movt	r9, #1
   114c0:	movt	r7, #1
   114c4:	b	114cc <__assert_fail@plt+0x444>
   114c8:	mov	r0, #1
   114cc:	str	r0, [sp, #12]
   114d0:	b	114d8 <__assert_fail@plt+0x450>
   114d4:	mov	sl, #1
   114d8:	mov	r0, r5
   114dc:	mov	r1, r4
   114e0:	mov	r2, r9
   114e4:	mov	r3, r7
   114e8:	str	r8, [sp]
   114ec:	bl	10f68 <getopt_long@plt>
   114f0:	cmp	r0, #99	; 0x63
   114f4:	ble	1156c <__assert_fail@plt+0x4e4>
   114f8:	cmp	r0, #100	; 0x64
   114fc:	beq	114d4 <__assert_fail@plt+0x44c>
   11500:	cmp	r0, #105	; 0x69
   11504:	beq	114c8 <__assert_fail@plt+0x440>
   11508:	cmp	r0, #119	; 0x77
   1150c:	bne	1173c <__assert_fail@plt+0x6b4>
   11510:	movw	r0, #37200	; 0x9150
   11514:	movw	r1, #31264	; 0x7a20
   11518:	mov	r2, #10
   1151c:	add	r3, sp, #16
   11520:	movt	r0, #2
   11524:	movt	r1, #1
   11528:	ldr	r0, [r0]
   1152c:	str	r1, [sp]
   11530:	mov	r1, #0
   11534:	bl	155a4 <__assert_fail@plt+0x451c>
   11538:	cmp	r0, #1
   1153c:	bhi	116f8 <__assert_fail@plt+0x670>
   11540:	ldr	r1, [sp, #20]
   11544:	cmn	r1, #1
   11548:	ble	116f8 <__assert_fail@plt+0x670>
   1154c:	ldr	r2, [sp, #16]
   11550:	mvn	r3, #-2147483648	; 0x80000000
   11554:	subs	r3, r3, r2
   11558:	rscs	r1, r1, #0
   1155c:	movwlt	r2, #0
   11560:	subs	r6, r0, #1
   11564:	movne	r6, r2
   11568:	b	114d8 <__assert_fail@plt+0x450>
   1156c:	cmn	r0, #3
   11570:	beq	11584 <__assert_fail@plt+0x4fc>
   11574:	cmn	r0, #2
   11578:	bne	115cc <__assert_fail@plt+0x544>
   1157c:	mov	r0, #0
   11580:	bl	11184 <__assert_fail@plt+0xfc>
   11584:	movw	r0, #37096	; 0x90e8
   11588:	movw	r2, #30787	; 0x7843
   1158c:	mov	r1, #0
   11590:	movt	r0, #2
   11594:	movt	r2, #1
   11598:	str	r1, [sp, #4]
   1159c:	movw	r1, #30712	; 0x77f8
   115a0:	ldr	r3, [r0]
   115a4:	movw	r0, #37196	; 0x914c
   115a8:	str	r2, [sp]
   115ac:	movw	r2, #30773	; 0x7835
   115b0:	movt	r1, #1
   115b4:	movt	r0, #2
   115b8:	movt	r2, #1
   115bc:	ldr	r0, [r0]
   115c0:	bl	14dcc <__assert_fail@plt+0x3d44>
   115c4:	mov	r0, #0
   115c8:	bl	10f80 <exit@plt>
   115cc:	cmn	r0, #1
   115d0:	bne	1173c <__assert_fail@plt+0x6b4>
   115d4:	movw	r7, #37176	; 0x9138
   115d8:	movt	r7, #2
   115dc:	ldr	r0, [r7]
   115e0:	sub	r1, r5, r0
   115e4:	cmp	r1, #2
   115e8:	blt	11630 <__assert_fail@plt+0x5a8>
   115ec:	movw	r1, #30803	; 0x7853
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #1
   115fc:	bl	10ec0 <dcgettext@plt>
   11600:	mov	r5, r0
   11604:	ldr	r0, [r7]
   11608:	add	r0, r4, r0, lsl #2
   1160c:	ldr	r0, [r0, #4]
   11610:	bl	14928 <__assert_fail@plt+0x38a0>
   11614:	mov	r3, r0
   11618:	mov	r0, #0
   1161c:	mov	r1, #0
   11620:	mov	r2, r5
   11624:	bl	10f2c <error@plt>
   11628:	mov	r0, #1
   1162c:	bl	11184 <__assert_fail@plt+0xfc>
   11630:	cmp	r0, r5
   11634:	movw	r1, #31889	; 0x7c91
   11638:	ldrlt	r4, [r4, r0, lsl #2]
   1163c:	movt	r1, #1
   11640:	movwge	r4, #31889	; 0x7c91
   11644:	movtge	r4, #1
   11648:	mov	r0, r4
   1164c:	bl	10e48 <strcmp@plt>
   11650:	cmp	r0, #0
   11654:	bne	11668 <__assert_fail@plt+0x5e0>
   11658:	movw	r0, #37192	; 0x9148
   1165c:	movt	r0, #2
   11660:	ldr	r5, [r0]
   11664:	b	116b4 <__assert_fail@plt+0x62c>
   11668:	movw	r1, #30820	; 0x7864
   1166c:	mov	r0, r4
   11670:	movt	r1, #1
   11674:	bl	1104c <fopen64@plt>
   11678:	mov	r5, r0
   1167c:	cmp	r0, #0
   11680:	bne	116b4 <__assert_fail@plt+0x62c>
   11684:	bl	10fa4 <__errno_location@plt>
   11688:	ldr	r5, [r0]
   1168c:	mov	r0, #0
   11690:	mov	r1, #3
   11694:	mov	r2, r4
   11698:	bl	1467c <__assert_fail@plt+0x35f4>
   1169c:	movw	r2, #30752	; 0x7820
   116a0:	mov	r3, r0
   116a4:	mov	r0, #1
   116a8:	mov	r1, r5
   116ac:	movt	r2, #1
   116b0:	bl	10f2c <error@plt>
   116b4:	mov	r0, r5
   116b8:	mov	r1, #2
   116bc:	bl	127a0 <__assert_fail@plt+0x1718>
   116c0:	movw	r0, #37196	; 0x914c
   116c4:	tst	sl, #1
   116c8:	movt	r0, #2
   116cc:	ldr	r2, [r0]
   116d0:	beq	116e8 <__assert_fail@plt+0x660>
   116d4:	ldr	r0, [sp, #12]
   116d8:	mov	r1, r4
   116dc:	and	r3, r0, #1
   116e0:	mov	r0, r5
   116e4:	bl	11744 <__assert_fail@plt+0x6bc>
   116e8:	mov	r0, r5
   116ec:	mov	r1, r4
   116f0:	mov	r3, r6
   116f4:	bl	11978 <__assert_fail@plt+0x8f0>
   116f8:	movw	r1, #30755	; 0x7823
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	10ec0 <dcgettext@plt>
   1170c:	mov	r4, r0
   11710:	movw	r0, #37200	; 0x9150
   11714:	movt	r0, #2
   11718:	ldr	r0, [r0]
   1171c:	bl	14928 <__assert_fail@plt+0x38a0>
   11720:	movw	r2, #30748	; 0x781c
   11724:	str	r0, [sp]
   11728:	mov	r0, #1
   1172c:	mov	r1, #0
   11730:	mov	r3, r4
   11734:	movt	r2, #1
   11738:	bl	10f2c <error@plt>
   1173c:	mov	r0, #1
   11740:	bl	11184 <__assert_fail@plt+0xfc>
   11744:	push	{fp, lr}
   11748:	mov	fp, sp
   1174c:	sub	sp, sp, #40	; 0x28
   11750:	mov	r6, r0
   11754:	mov	r0, #8192	; 0x2000
   11758:	str	r3, [sp, #12]
   1175c:	str	r2, [sp, #20]
   11760:	str	r1, [sp, #8]
   11764:	bl	15000 <__assert_fail@plt+0x3f78>
   11768:	mov	r4, r0
   1176c:	mov	r0, #5120	; 0x1400
   11770:	bl	15000 <__assert_fail@plt+0x3f78>
   11774:	str	r0, [sp, #16]
   11778:	sub	r0, fp, #12
   1177c:	bl	11fd8 <__assert_fail@plt+0xf50>
   11780:	ldr	r0, [sp, #12]
   11784:	mov	sl, #0
   11788:	cmp	r0, #0
   1178c:	beq	11830 <__assert_fail@plt+0x7a8>
   11790:	add	r9, r4, sl
   11794:	rsb	r2, sl, #8192	; 0x2000
   11798:	mov	r1, #1
   1179c:	mov	r3, r6
   117a0:	mov	r0, r9
   117a4:	bl	11064 <fread_unlocked@plt>
   117a8:	mov	r8, r0
   117ac:	cmp	r0, #1
   117b0:	blt	1180c <__assert_fail@plt+0x784>
   117b4:	mov	r5, #0
   117b8:	add	r0, r5, sl
   117bc:	ldrb	r7, [r4, r0]
   117c0:	mov	r0, r7
   117c4:	bl	11fb8 <__assert_fail@plt+0xf30>
   117c8:	cmp	r0, #0
   117cc:	bne	11800 <__assert_fail@plt+0x778>
   117d0:	cmp	r7, #61	; 0x3d
   117d4:	beq	11800 <__assert_fail@plt+0x778>
   117d8:	sub	r8, r8, #1
   117dc:	add	r0, r9, r5
   117e0:	sub	r2, r8, r5
   117e4:	add	r1, r0, #1
   117e8:	bl	10e6c <memmove@plt>
   117ec:	cmp	r8, #1
   117f0:	blt	1180c <__assert_fail@plt+0x784>
   117f4:	cmp	r5, r8
   117f8:	blt	117b8 <__assert_fail@plt+0x730>
   117fc:	b	1180c <__assert_fail@plt+0x784>
   11800:	add	r5, r5, #1
   11804:	cmp	r8, #1
   11808:	bge	117f4 <__assert_fail@plt+0x76c>
   1180c:	ldr	r0, [r6]
   11810:	tst	r0, #32
   11814:	bne	11914 <__assert_fail@plt+0x88c>
   11818:	add	sl, r8, sl
   1181c:	cmp	sl, #8192	; 0x2000
   11820:	bge	11864 <__assert_fail@plt+0x7dc>
   11824:	ands	r0, r0, #16
   11828:	beq	11790 <__assert_fail@plt+0x708>
   1182c:	b	11864 <__assert_fail@plt+0x7dc>
   11830:	add	r0, r4, sl
   11834:	rsb	r2, sl, #8192	; 0x2000
   11838:	mov	r1, #1
   1183c:	mov	r3, r6
   11840:	bl	11064 <fread_unlocked@plt>
   11844:	ldr	r1, [r6]
   11848:	tst	r1, #32
   1184c:	bne	11914 <__assert_fail@plt+0x88c>
   11850:	add	sl, r0, sl
   11854:	cmp	sl, #8192	; 0x2000
   11858:	bge	11864 <__assert_fail@plt+0x7dc>
   1185c:	ands	r0, r1, #16
   11860:	beq	11830 <__assert_fail@plt+0x7a8>
   11864:	mov	r8, r6
   11868:	mov	r5, #0
   1186c:	mov	r9, #0
   11870:	ldr	r6, [sp, #16]
   11874:	mov	r0, #5120	; 0x1400
   11878:	cmp	r5, #0
   1187c:	mov	r2, sl
   11880:	mov	r1, r4
   11884:	str	r0, [fp, #-16]
   11888:	sub	r0, fp, #16
   1188c:	movne	r2, #0
   11890:	str	r0, [sp]
   11894:	sub	r0, fp, #12
   11898:	mov	r3, r6
   1189c:	bl	11fe4 <__assert_fail@plt+0xf5c>
   118a0:	ldr	r2, [fp, #-16]
   118a4:	ldr	r3, [sp, #20]
   118a8:	mov	r7, r0
   118ac:	mov	r0, r6
   118b0:	mov	r1, #1
   118b4:	bl	10ea8 <fwrite_unlocked@plt>
   118b8:	ldr	r1, [fp, #-16]
   118bc:	cmp	r0, r1
   118c0:	bcc	11928 <__assert_fail@plt+0x8a0>
   118c4:	cmp	r7, #0
   118c8:	beq	11954 <__assert_fail@plt+0x8cc>
   118cc:	ldr	r0, [r8]
   118d0:	mov	r2, #2
   118d4:	add	r1, r9, #1
   118d8:	ands	r0, r0, #16
   118dc:	movweq	r2, #1
   118e0:	cmp	r1, r2
   118e4:	bcs	118fc <__assert_fail@plt+0x874>
   118e8:	ldr	r2, [fp, #-12]
   118ec:	sub	r5, r5, #1
   118f0:	orrs	r2, r9, r2
   118f4:	mov	r9, r1
   118f8:	bne	11870 <__assert_fail@plt+0x7e8>
   118fc:	cmp	r0, #0
   11900:	mov	r6, r8
   11904:	beq	11780 <__assert_fail@plt+0x6f8>
   11908:	ldr	r1, [sp, #8]
   1190c:	mov	r0, r6
   11910:	bl	11c50 <__assert_fail@plt+0xbc8>
   11914:	bl	10fa4 <__errno_location@plt>
   11918:	ldr	r4, [r0]
   1191c:	movw	r1, #31305	; 0x7a49
   11920:	movt	r1, #1
   11924:	b	11938 <__assert_fail@plt+0x8b0>
   11928:	bl	10fa4 <__errno_location@plt>
   1192c:	ldr	r4, [r0]
   11930:	movw	r1, #31316	; 0x7a54
   11934:	movt	r1, #1
   11938:	mov	r0, #0
   1193c:	mov	r2, #5
   11940:	bl	10ec0 <dcgettext@plt>
   11944:	mov	r2, r0
   11948:	mov	r0, #1
   1194c:	mov	r1, r4
   11950:	bl	10f2c <error@plt>
   11954:	movw	r1, #31328	; 0x7a60
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	movt	r1, #1
   11964:	bl	10ec0 <dcgettext@plt>
   11968:	mov	r2, r0
   1196c:	mov	r0, #1
   11970:	mov	r1, #0
   11974:	bl	10f2c <error@plt>
   11978:	push	{fp, lr}
   1197c:	mov	fp, sp
   11980:	sub	sp, sp, #16
   11984:	mov	r5, r0
   11988:	mov	r0, #30720	; 0x7800
   1198c:	mov	r6, r3
   11990:	mov	r8, r2
   11994:	str	r1, [sp]
   11998:	bl	15000 <__assert_fail@plt+0x3f78>
   1199c:	mov	r7, r0
   119a0:	mov	r0, #49152	; 0xc000
   119a4:	bl	15000 <__assert_fail@plt+0x3f78>
   119a8:	cmp	r6, #0
   119ac:	str	r0, [fp, #-4]
   119b0:	str	r7, [sp, #4]
   119b4:	beq	11b2c <__assert_fail@plt+0xaa4>
   119b8:	mov	r4, r6
   119bc:	mov	sl, #0
   119c0:	str	r8, [sp, #8]
   119c4:	mov	r6, #0
   119c8:	add	r0, r7, r6
   119cc:	rsb	r2, r6, #30720	; 0x7800
   119d0:	mov	r1, #1
   119d4:	mov	r3, r5
   119d8:	bl	11064 <fread_unlocked@plt>
   119dc:	add	r6, r0, r6
   119e0:	ldr	r0, [r5]
   119e4:	tst	r0, #16
   119e8:	bne	119fc <__assert_fail@plt+0x974>
   119ec:	cmp	r6, #30720	; 0x7800
   119f0:	bge	119fc <__assert_fail@plt+0x974>
   119f4:	ands	r1, r0, #32
   119f8:	beq	119c8 <__assert_fail@plt+0x940>
   119fc:	cmp	r6, #1
   11a00:	blt	11ae0 <__assert_fail@plt+0xa58>
   11a04:	movw	r1, #26215	; 0x6667
   11a08:	add	r0, r6, #4
   11a0c:	ldr	r2, [fp, #-4]
   11a10:	movt	r1, #26214	; 0x6666
   11a14:	smmul	r0, r0, r1
   11a18:	lsr	r1, r0, #1
   11a1c:	add	r0, r1, r0, lsr #31
   11a20:	mov	r1, r6
   11a24:	lsl	r8, r0, #3
   11a28:	mov	r0, r7
   11a2c:	mov	r3, r8
   11a30:	bl	11ce0 <__assert_fail@plt+0xc58>
   11a34:	mov	r7, #0
   11a38:	sub	r0, r4, sl
   11a3c:	sub	r9, r8, r7
   11a40:	cmp	r0, r9
   11a44:	movlt	r9, r0
   11a48:	cmp	r9, #0
   11a4c:	beq	11a8c <__assert_fail@plt+0xa04>
   11a50:	movw	r1, #37196	; 0x914c
   11a54:	ldr	r0, [fp, #-4]
   11a58:	mov	r2, r9
   11a5c:	movt	r1, #2
   11a60:	ldr	r3, [r1]
   11a64:	mov	r1, #1
   11a68:	add	r0, r0, r7
   11a6c:	bl	10ea8 <fwrite_unlocked@plt>
   11a70:	cmp	r0, r9
   11a74:	bcc	11bf8 <__assert_fail@plt+0xb70>
   11a78:	add	r7, r9, r7
   11a7c:	add	sl, r9, sl
   11a80:	cmp	r7, r8
   11a84:	blt	11a38 <__assert_fail@plt+0x9b0>
   11a88:	b	11ad8 <__assert_fail@plt+0xa50>
   11a8c:	ldr	r0, [sp, #8]
   11a90:	ldr	r2, [r0, #20]
   11a94:	ldr	r1, [r0, #24]
   11a98:	cmp	r2, r1
   11a9c:	bcs	11ac0 <__assert_fail@plt+0xa38>
   11aa0:	add	r1, r2, #1
   11aa4:	mov	sl, #0
   11aa8:	str	r1, [r0, #20]
   11aac:	mov	r0, #10
   11ab0:	strb	r0, [r2]
   11ab4:	cmp	r7, r8
   11ab8:	blt	11a38 <__assert_fail@plt+0x9b0>
   11abc:	b	11ad8 <__assert_fail@plt+0xa50>
   11ac0:	mov	r1, #10
   11ac4:	bl	11010 <__overflow@plt>
   11ac8:	mov	sl, #0
   11acc:	cmn	r0, #1
   11ad0:	bne	11ab4 <__assert_fail@plt+0xa2c>
   11ad4:	b	11bf8 <__assert_fail@plt+0xb70>
   11ad8:	ldr	r0, [r5]
   11adc:	ldr	r7, [sp, #4]
   11ae0:	tst	r0, #16
   11ae4:	cmpeq	r6, #30720	; 0x7800
   11ae8:	bne	11af4 <__assert_fail@plt+0xa6c>
   11aec:	ands	r0, r0, #32
   11af0:	beq	119c4 <__assert_fail@plt+0x93c>
   11af4:	cmp	r4, #0
   11af8:	beq	11c0c <__assert_fail@plt+0xb84>
   11afc:	cmp	sl, #1
   11b00:	blt	11c0c <__assert_fail@plt+0xb84>
   11b04:	ldr	r0, [sp, #8]
   11b08:	ldr	r2, [r0, #20]
   11b0c:	ldr	r1, [r0, #24]
   11b10:	cmp	r2, r1
   11b14:	bcs	11be8 <__assert_fail@plt+0xb60>
   11b18:	add	r1, r2, #1
   11b1c:	str	r1, [r0, #20]
   11b20:	mov	r1, #10
   11b24:	strb	r1, [r2]
   11b28:	b	11c0c <__assert_fail@plt+0xb84>
   11b2c:	movw	r8, #26215	; 0x6667
   11b30:	movw	r9, #37196	; 0x914c
   11b34:	mov	r4, #0
   11b38:	movt	r8, #26214	; 0x6666
   11b3c:	movt	r9, #2
   11b40:	add	r0, r7, r4
   11b44:	rsb	r2, r4, #30720	; 0x7800
   11b48:	mov	r1, #1
   11b4c:	mov	r3, r5
   11b50:	bl	11064 <fread_unlocked@plt>
   11b54:	add	r4, r0, r4
   11b58:	ldr	r0, [r5]
   11b5c:	tst	r0, #16
   11b60:	bne	11b74 <__assert_fail@plt+0xaec>
   11b64:	cmp	r4, #30720	; 0x7800
   11b68:	bge	11b74 <__assert_fail@plt+0xaec>
   11b6c:	ands	r1, r0, #32
   11b70:	beq	11b40 <__assert_fail@plt+0xab8>
   11b74:	cmp	r4, #1
   11b78:	blt	11bcc <__assert_fail@plt+0xb44>
   11b7c:	add	r0, r4, #4
   11b80:	smmul	r2, r0, r8
   11b84:	mov	r0, r7
   11b88:	ldr	r7, [fp, #-4]
   11b8c:	lsr	r1, r2, #1
   11b90:	add	sl, r1, r2, lsr #31
   11b94:	mov	r1, r4
   11b98:	lsl	r6, sl, #3
   11b9c:	mov	r2, r7
   11ba0:	mov	r3, r6
   11ba4:	bl	11ce0 <__assert_fail@plt+0xc58>
   11ba8:	ldr	r3, [r9]
   11bac:	mov	r0, r7
   11bb0:	mov	r1, #1
   11bb4:	mov	r2, r6
   11bb8:	bl	10ea8 <fwrite_unlocked@plt>
   11bbc:	cmp	r0, sl, lsl #3
   11bc0:	bcc	11bf8 <__assert_fail@plt+0xb70>
   11bc4:	ldr	r0, [r5]
   11bc8:	ldr	r7, [sp, #4]
   11bcc:	tst	r0, #16
   11bd0:	cmpeq	r4, #30720	; 0x7800
   11bd4:	bne	11c0c <__assert_fail@plt+0xb84>
   11bd8:	ands	r0, r0, #32
   11bdc:	mov	r4, #0
   11be0:	beq	11b40 <__assert_fail@plt+0xab8>
   11be4:	b	11c0c <__assert_fail@plt+0xb84>
   11be8:	mov	r1, #10
   11bec:	bl	11010 <__overflow@plt>
   11bf0:	cmn	r0, #1
   11bf4:	bne	11c0c <__assert_fail@plt+0xb84>
   11bf8:	bl	10fa4 <__errno_location@plt>
   11bfc:	ldr	r4, [r0]
   11c00:	movw	r1, #31316	; 0x7a54
   11c04:	movt	r1, #1
   11c08:	b	11c34 <__assert_fail@plt+0xbac>
   11c0c:	ldrb	r0, [r5]
   11c10:	tst	r0, #32
   11c14:	bne	11c24 <__assert_fail@plt+0xb9c>
   11c18:	ldr	r1, [sp]
   11c1c:	mov	r0, r5
   11c20:	bl	11c50 <__assert_fail@plt+0xbc8>
   11c24:	bl	10fa4 <__errno_location@plt>
   11c28:	ldr	r4, [r0]
   11c2c:	movw	r1, #31305	; 0x7a49
   11c30:	movt	r1, #1
   11c34:	mov	r0, #0
   11c38:	mov	r2, #5
   11c3c:	bl	10ec0 <dcgettext@plt>
   11c40:	mov	r2, r0
   11c44:	mov	r0, #1
   11c48:	mov	r1, r4
   11c4c:	bl	10f2c <error@plt>
   11c50:	push	{fp, lr}
   11c54:	mov	fp, sp
   11c58:	mov	r5, r1
   11c5c:	bl	127dc <__assert_fail@plt+0x1754>
   11c60:	cmp	r0, #0
   11c64:	bne	11c70 <__assert_fail@plt+0xbe8>
   11c68:	mov	r0, #0
   11c6c:	bl	10f80 <exit@plt>
   11c70:	movw	r1, #31889	; 0x7c91
   11c74:	mov	r0, r5
   11c78:	movt	r1, #1
   11c7c:	bl	10e48 <strcmp@plt>
   11c80:	mov	r6, r0
   11c84:	bl	10fa4 <__errno_location@plt>
   11c88:	ldr	r4, [r0]
   11c8c:	cmp	r6, #0
   11c90:	bne	11cb8 <__assert_fail@plt+0xc30>
   11c94:	movw	r1, #31342	; 0x7a6e
   11c98:	mov	r0, #0
   11c9c:	mov	r2, #5
   11ca0:	movt	r1, #1
   11ca4:	bl	10ec0 <dcgettext@plt>
   11ca8:	mov	r2, r0
   11cac:	mov	r0, #1
   11cb0:	mov	r1, r4
   11cb4:	bl	10f2c <error@plt>
   11cb8:	mov	r0, #0
   11cbc:	mov	r1, #3
   11cc0:	mov	r2, r5
   11cc4:	bl	1467c <__assert_fail@plt+0x35f4>
   11cc8:	movw	r2, #30752	; 0x7820
   11ccc:	mov	r3, r0
   11cd0:	mov	r0, #1
   11cd4:	mov	r1, r4
   11cd8:	movt	r2, #1
   11cdc:	bl	10f2c <error@plt>
   11ce0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11ce4:	add	fp, sp, #24
   11ce8:	cmp	r1, #0
   11cec:	cmpne	r3, #0
   11cf0:	bne	11d08 <__assert_fail@plt+0xc80>
   11cf4:	cmp	r3, #0
   11cf8:	beq	11d04 <__assert_fail@plt+0xc7c>
   11cfc:	mov	r0, #0
   11d00:	strb	r0, [r2]
   11d04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11d08:	movw	lr, #31535	; 0x7b2f
   11d0c:	add	r0, r0, #2
   11d10:	rsb	ip, r3, #0
   11d14:	mov	r8, #0
   11d18:	movt	lr, #1
   11d1c:	ldrb	r3, [r0, #-2]
   11d20:	add	r5, ip, r8
   11d24:	mov	r4, r2
   11d28:	cmn	r5, #1
   11d2c:	ldrb	r3, [lr, r3, lsr #3]
   11d30:	strb	r3, [r4, r8]!
   11d34:	beq	11d04 <__assert_fail@plt+0xc7c>
   11d38:	ldrb	r3, [r0, #-2]
   11d3c:	cmp	r1, #1
   11d40:	add	r6, r5, #2
   11d44:	lsl	r7, r3, #2
   11d48:	mov	r3, #0
   11d4c:	ldrbne	r3, [r0, #-1]
   11d50:	lsrne	r3, r3, #6
   11d54:	cmp	r6, #0
   11d58:	add	r3, r3, r7
   11d5c:	and	r3, r3, #31
   11d60:	ldrb	r3, [lr, r3]
   11d64:	strb	r3, [r4, #1]
   11d68:	beq	11d04 <__assert_fail@plt+0xc7c>
   11d6c:	cmp	r1, #1
   11d70:	mov	r7, #61	; 0x3d
   11d74:	add	r6, r5, #3
   11d78:	ldrbne	r3, [r0, #-1]
   11d7c:	ubfxne	r3, r3, #1, #5
   11d80:	ldrbne	r7, [lr, r3]
   11d84:	cmp	r6, #0
   11d88:	strb	r7, [r4, #2]
   11d8c:	beq	11d04 <__assert_fail@plt+0xc7c>
   11d90:	add	r6, r5, #4
   11d94:	cmp	r1, #1
   11d98:	beq	11e60 <__assert_fail@plt+0xdd8>
   11d9c:	ldrb	r3, [r0, #-1]
   11da0:	subs	r1, r1, #2
   11da4:	lsl	r7, r3, #4
   11da8:	ldrbne	r3, [r0]
   11dac:	lsrne	r3, r3, #4
   11db0:	moveq	r3, #0
   11db4:	add	r3, r3, r7
   11db8:	and	r3, r3, #31
   11dbc:	ldrb	r7, [lr, r3]
   11dc0:	cmp	r6, #0
   11dc4:	strb	r7, [r4, #3]
   11dc8:	beq	11d04 <__assert_fail@plt+0xc7c>
   11dcc:	add	r6, r5, #5
   11dd0:	cmp	r1, #0
   11dd4:	beq	11e78 <__assert_fail@plt+0xdf0>
   11dd8:	ldrb	r3, [r0]
   11ddc:	subs	r1, r1, #1
   11de0:	lsl	r7, r3, #1
   11de4:	ldrbne	r3, [r0, #1]
   11de8:	lsrne	r3, r3, #7
   11dec:	moveq	r3, #0
   11df0:	add	r3, r3, r7
   11df4:	and	r3, r3, #31
   11df8:	ldrb	r7, [lr, r3]
   11dfc:	cmp	r6, #0
   11e00:	strb	r7, [r4, #4]
   11e04:	beq	11d04 <__assert_fail@plt+0xc7c>
   11e08:	add	r6, r5, #6
   11e0c:	cmp	r1, #0
   11e10:	beq	11e90 <__assert_fail@plt+0xe08>
   11e14:	ldrb	r3, [r0, #1]
   11e18:	ubfx	r3, r3, #2, #5
   11e1c:	ldrb	r3, [lr, r3]
   11e20:	cmp	r6, #0
   11e24:	strb	r3, [r4, #5]
   11e28:	beq	11d04 <__assert_fail@plt+0xc7c>
   11e2c:	add	r7, r5, #7
   11e30:	cmp	r1, #0
   11e34:	beq	11ea4 <__assert_fail@plt+0xe1c>
   11e38:	subs	r6, r1, #1
   11e3c:	ldrb	r1, [r0, #1]
   11e40:	ldrbne	r3, [r0, #2]
   11e44:	lsl	r1, r1, #3
   11e48:	lsrne	r3, r3, #5
   11e4c:	moveq	r3, #0
   11e50:	add	r1, r3, r1
   11e54:	and	r1, r1, #31
   11e58:	ldrb	r1, [lr, r1]
   11e5c:	b	11eac <__assert_fail@plt+0xe24>
   11e60:	mov	r7, #61	; 0x3d
   11e64:	mov	r1, #0
   11e68:	cmp	r6, #0
   11e6c:	strb	r7, [r4, #3]
   11e70:	bne	11dcc <__assert_fail@plt+0xd44>
   11e74:	b	11d04 <__assert_fail@plt+0xc7c>
   11e78:	mov	r7, #61	; 0x3d
   11e7c:	mov	r1, #0
   11e80:	cmp	r6, #0
   11e84:	strb	r7, [r4, #4]
   11e88:	bne	11e08 <__assert_fail@plt+0xd80>
   11e8c:	b	11d04 <__assert_fail@plt+0xc7c>
   11e90:	mov	r3, #61	; 0x3d
   11e94:	cmp	r6, #0
   11e98:	strb	r3, [r4, #5]
   11e9c:	bne	11e2c <__assert_fail@plt+0xda4>
   11ea0:	b	11d04 <__assert_fail@plt+0xc7c>
   11ea4:	mov	r1, #61	; 0x3d
   11ea8:	mov	r6, #0
   11eac:	cmp	r7, #0
   11eb0:	strb	r1, [r4, #6]
   11eb4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   11eb8:	cmp	r6, #0
   11ebc:	beq	11edc <__assert_fail@plt+0xe54>
   11ec0:	ldrb	r1, [r0, #2]
   11ec4:	and	r1, r1, #31
   11ec8:	ldrb	r1, [lr, r1]
   11ecc:	cmn	r5, #8
   11ed0:	strb	r1, [r4, #7]
   11ed4:	bne	11eec <__assert_fail@plt+0xe64>
   11ed8:	b	11d04 <__assert_fail@plt+0xc7c>
   11edc:	mov	r1, #61	; 0x3d
   11ee0:	cmn	r5, #8
   11ee4:	strb	r1, [r4, #7]
   11ee8:	beq	11d04 <__assert_fail@plt+0xc7c>
   11eec:	subs	r1, r6, #1
   11ef0:	add	r8, r8, #8
   11ef4:	addne	r0, r0, #5
   11ef8:	cmpne	r6, #0
   11efc:	bne	11d1c <__assert_fail@plt+0xc94>
   11f00:	add	r2, r2, r8
   11f04:	b	11cfc <__assert_fail@plt+0xc74>
   11f08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11f0c:	add	fp, sp, #24
   11f10:	mov	r8, r0
   11f14:	movw	r0, #26215	; 0x6667
   11f18:	mov	r4, r1
   11f1c:	mov	r6, r2
   11f20:	movt	r0, #26214	; 0x6666
   11f24:	smmul	r0, r1, r0
   11f28:	asr	r1, r0, #1
   11f2c:	add	r0, r1, r0, lsr #31
   11f30:	add	r1, r0, r0, lsl #2
   11f34:	subs	r1, r4, r1
   11f38:	addne	r0, r0, #1
   11f3c:	cmn	r0, #1
   11f40:	ble	11f50 <__assert_fail@plt+0xec8>
   11f44:	cmn	r0, #-268435455	; 0xf0000001
   11f48:	ble	11f64 <__assert_fail@plt+0xedc>
   11f4c:	b	11fa8 <__assert_fail@plt+0xf20>
   11f50:	beq	11f64 <__assert_fail@plt+0xedc>
   11f54:	mov	r1, #-2147483648	; 0x80000000
   11f58:	sdiv	r1, r1, r0
   11f5c:	cmp	r1, #8
   11f60:	blt	11fa8 <__assert_fail@plt+0xf20>
   11f64:	cmn	r4, #1
   11f68:	ble	11fa8 <__assert_fail@plt+0xf20>
   11f6c:	lsl	r7, r0, #3
   11f70:	orr	r5, r7, #1
   11f74:	mov	r0, r5
   11f78:	bl	16f58 <__assert_fail@plt+0x5ed0>
   11f7c:	cmp	r0, #0
   11f80:	str	r0, [r6]
   11f84:	moveq	r0, r5
   11f88:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f8c:	mov	r2, r0
   11f90:	mov	r0, r8
   11f94:	mov	r1, r4
   11f98:	mov	r3, r5
   11f9c:	bl	11ce0 <__assert_fail@plt+0xc58>
   11fa0:	mov	r0, r7
   11fa4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11fa8:	mov	r7, #0
   11fac:	mov	r0, r7
   11fb0:	str	r7, [r6]
   11fb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11fb8:	movw	r1, #31567	; 0x7b4f
   11fbc:	movt	r1, #1
   11fc0:	add	r0, r1, r0
   11fc4:	ldrsb	r1, [r0]
   11fc8:	mov	r0, #0
   11fcc:	cmn	r1, #1
   11fd0:	movwgt	r0, #1
   11fd4:	bx	lr
   11fd8:	mov	r1, #0
   11fdc:	str	r1, [r0]
   11fe0:	bx	lr
   11fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fe8:	add	fp, sp, #28
   11fec:	sub	sp, sp, #20
   11ff0:	mov	r5, r1
   11ff4:	ldr	r1, [fp, #8]
   11ff8:	str	r3, [sp, #16]
   11ffc:	mov	r6, r2
   12000:	cmp	r0, #0
   12004:	ldr	sl, [r1]
   12008:	str	sl, [sp, #12]
   1200c:	beq	12028 <__assert_fail@plt+0xfa0>
   12010:	ldr	r2, [r0]
   12014:	clz	r1, r6
   12018:	lsr	r9, r1, #5
   1201c:	cmp	r2, #0
   12020:	movwne	r2, #1
   12024:	b	12030 <__assert_fail@plt+0xfa8>
   12028:	mov	r2, #0
   1202c:	mov	r9, #0
   12030:	add	r1, r0, #4
   12034:	cmp	r2, #0
   12038:	str	r0, [sp, #4]
   1203c:	str	r1, [sp]
   12040:	clz	r1, r0
   12044:	cmpeq	r9, #0
   12048:	lsr	r0, r1, #5
   1204c:	str	r0, [sp, #8]
   12050:	beq	12080 <__assert_fail@plt+0xff8>
   12054:	cmp	r6, #0
   12058:	mov	r0, r6
   1205c:	movwne	r0, #1
   12060:	orr	r0, r9, r0
   12064:	cmp	r0, #1
   12068:	bne	12218 <__assert_fail@plt+0x1190>
   1206c:	ldr	r4, [sp, #4]
   12070:	clz	r0, r6
   12074:	mov	r8, r6
   12078:	lsr	r0, r0, #5
   1207c:	b	12234 <__assert_fail@plt+0x11ac>
   12080:	add	r9, sp, #16
   12084:	add	r4, sp, #12
   12088:	b	12098 <__assert_fail@plt+0x1010>
   1208c:	ldr	sl, [sp, #12]
   12090:	add	r5, r5, #8
   12094:	sub	r6, r6, #8
   12098:	mov	r0, r5
   1209c:	mov	r1, r6
   120a0:	mov	r2, r9
   120a4:	mov	r3, r4
   120a8:	bl	123bc <__assert_fail@plt+0x1334>
   120ac:	cmp	r0, #0
   120b0:	bne	1208c <__assert_fail@plt+0x1004>
   120b4:	cmp	r6, #0
   120b8:	beq	12390 <__assert_fail@plt+0x1308>
   120bc:	ldrb	r0, [r5]
   120c0:	ldr	r1, [sp, #8]
   120c4:	subs	r0, r0, #10
   120c8:	movwne	r0, #1
   120cc:	orrs	r0, r0, r1
   120d0:	beq	12198 <__assert_fail@plt+0x1110>
   120d4:	ldr	r0, [sp, #12]
   120d8:	str	sl, [sp, #12]
   120dc:	ldr	r1, [sp, #16]
   120e0:	add	r7, r5, r6
   120e4:	sub	r0, r0, sl
   120e8:	ldr	sl, [sp, #4]
   120ec:	add	r0, r1, r0
   120f0:	str	r0, [sp, #16]
   120f4:	cmp	sl, #0
   120f8:	beq	121a8 <__assert_fail@plt+0x1120>
   120fc:	ldr	r8, [sl]
   12100:	cmp	r8, #0
   12104:	beq	12118 <__assert_fail@plt+0x1090>
   12108:	cmp	r8, #8
   1210c:	bne	12140 <__assert_fail@plt+0x10b8>
   12110:	mov	r0, #0
   12114:	str	r0, [sl]
   12118:	sub	r0, r7, r5
   1211c:	mov	r8, #0
   12120:	cmp	r0, #8
   12124:	blt	12140 <__assert_fail@plt+0x10b8>
   12128:	mov	r0, r5
   1212c:	mov	r1, #10
   12130:	mov	r2, #8
   12134:	bl	10fec <memchr@plt>
   12138:	cmp	r0, #0
   1213c:	beq	12204 <__assert_fail@plt+0x117c>
   12140:	cmp	r6, #1
   12144:	blt	121b0 <__assert_fail@plt+0x1128>
   12148:	mov	r6, r8
   1214c:	mov	r0, r5
   12150:	ldrb	r1, [r5], #1
   12154:	cmp	r1, #10
   12158:	bne	12168 <__assert_fail@plt+0x10e0>
   1215c:	cmp	r5, r7
   12160:	bcc	1214c <__assert_fail@plt+0x10c4>
   12164:	b	12190 <__assert_fail@plt+0x1108>
   12168:	add	r2, r6, #1
   1216c:	mov	r3, sl
   12170:	add	r5, r0, #1
   12174:	str	r2, [r3], r6
   12178:	cmp	r5, r7
   1217c:	strb	r1, [r3, #4]
   12180:	ldr	r6, [sl]
   12184:	bcs	12190 <__assert_fail@plt+0x1108>
   12188:	cmp	r6, #8
   1218c:	bne	1214c <__assert_fail@plt+0x10c4>
   12190:	add	r5, r0, #1
   12194:	b	121b4 <__assert_fail@plt+0x112c>
   12198:	ldr	sl, [sp, #12]
   1219c:	sub	r6, r6, #1
   121a0:	add	r5, r5, #1
   121a4:	b	12098 <__assert_fail@plt+0x1010>
   121a8:	mov	r0, r5
   121ac:	b	121dc <__assert_fail@plt+0x1154>
   121b0:	mov	r6, r8
   121b4:	cmp	r6, #7
   121b8:	mov	r0, #0
   121bc:	mov	r8, #0
   121c0:	movwgt	r0, #1
   121c4:	cmp	r6, #0
   121c8:	beq	12394 <__assert_fail@plt+0x130c>
   121cc:	ldr	r1, [sp, #8]
   121d0:	orrs	r0, r0, r1
   121d4:	ldr	r0, [sp]
   121d8:	beq	12394 <__assert_fail@plt+0x130c>
   121dc:	mov	r1, r6
   121e0:	mov	r2, r9
   121e4:	mov	r3, r4
   121e8:	bl	123bc <__assert_fail@plt+0x1334>
   121ec:	cmp	r0, #0
   121f0:	mov	r8, r6
   121f4:	beq	12394 <__assert_fail@plt+0x130c>
   121f8:	ldr	sl, [sp, #12]
   121fc:	sub	r6, r7, r5
   12200:	b	12098 <__assert_fail@plt+0x1010>
   12204:	add	r1, r5, #8
   12208:	mov	r0, r5
   1220c:	mov	r6, #8
   12210:	mov	r5, r1
   12214:	b	121dc <__assert_fail@plt+0x1154>
   12218:	mov	r8, r6
   1221c:	b	12394 <__assert_fail@plt+0x130c>
   12220:	add	r1, r5, #8
   12224:	mov	r0, r5
   12228:	mov	r6, #8
   1222c:	mov	r5, r1
   12230:	b	12340 <__assert_fail@plt+0x12b8>
   12234:	tst	r0, #1
   12238:	bne	12254 <__assert_fail@plt+0x11cc>
   1223c:	ldrb	r0, [r5]
   12240:	ldr	r1, [sp, #8]
   12244:	subs	r0, r0, #10
   12248:	movwne	r0, #1
   1224c:	orrs	r0, r0, r1
   12250:	beq	12364 <__assert_fail@plt+0x12dc>
   12254:	add	r7, r5, r8
   12258:	cmp	r4, #0
   1225c:	str	sl, [sp, #12]
   12260:	beq	1230c <__assert_fail@plt+0x1284>
   12264:	ldr	r6, [r4]
   12268:	cmp	r6, #0
   1226c:	beq	12280 <__assert_fail@plt+0x11f8>
   12270:	cmp	r6, #8
   12274:	bne	122a8 <__assert_fail@plt+0x1220>
   12278:	mov	r0, #0
   1227c:	str	r0, [r4]
   12280:	sub	r0, r7, r5
   12284:	mov	r6, #0
   12288:	cmp	r0, #8
   1228c:	blt	122a8 <__assert_fail@plt+0x1220>
   12290:	mov	r0, r5
   12294:	mov	r1, #10
   12298:	mov	r2, #8
   1229c:	bl	10fec <memchr@plt>
   122a0:	cmp	r0, #0
   122a4:	beq	12220 <__assert_fail@plt+0x1198>
   122a8:	cmp	r8, #1
   122ac:	blt	122f8 <__assert_fail@plt+0x1270>
   122b0:	mov	r0, r5
   122b4:	ldrb	r1, [r5], #1
   122b8:	cmp	r1, #10
   122bc:	bne	122cc <__assert_fail@plt+0x1244>
   122c0:	cmp	r5, r7
   122c4:	bcc	122b0 <__assert_fail@plt+0x1228>
   122c8:	b	122f4 <__assert_fail@plt+0x126c>
   122cc:	add	r2, r6, #1
   122d0:	mov	r3, r4
   122d4:	add	r5, r0, #1
   122d8:	str	r2, [r3], r6
   122dc:	cmp	r5, r7
   122e0:	strb	r1, [r3, #4]
   122e4:	ldr	r6, [r4]
   122e8:	bcs	122f4 <__assert_fail@plt+0x126c>
   122ec:	cmp	r6, #8
   122f0:	bne	122b0 <__assert_fail@plt+0x1228>
   122f4:	add	r5, r0, #1
   122f8:	ldr	r0, [sp]
   122fc:	mov	r8, #0
   12300:	cmp	r6, #0
   12304:	bne	12320 <__assert_fail@plt+0x1298>
   12308:	b	12394 <__assert_fail@plt+0x130c>
   1230c:	mov	r6, r8
   12310:	mov	r0, r5
   12314:	mov	r8, #0
   12318:	cmp	r6, #0
   1231c:	beq	12394 <__assert_fail@plt+0x130c>
   12320:	ldr	r2, [sp, #8]
   12324:	cmp	r6, #7
   12328:	mov	r1, #0
   1232c:	movwgt	r1, #1
   12330:	orr	r1, r9, r1
   12334:	orr	r1, r1, r2
   12338:	cmp	r1, #1
   1233c:	bne	12394 <__assert_fail@plt+0x130c>
   12340:	mov	r1, r6
   12344:	add	r2, sp, #16
   12348:	add	r3, sp, #12
   1234c:	bl	123bc <__assert_fail@plt+0x1334>
   12350:	cmp	r0, #0
   12354:	mov	r8, r6
   12358:	beq	12394 <__assert_fail@plt+0x130c>
   1235c:	sub	r8, r7, r5
   12360:	b	1236c <__assert_fail@plt+0x12e4>
   12364:	sub	r8, r8, #1
   12368:	add	r5, r5, #1
   1236c:	cmp	r8, #0
   12370:	mov	r0, r8
   12374:	ldr	sl, [sp, #12]
   12378:	movwne	r0, #1
   1237c:	orrs	r0, r9, r0
   12380:	clz	r0, r8
   12384:	lsr	r0, r0, #5
   12388:	bne	12234 <__assert_fail@plt+0x11ac>
   1238c:	b	12394 <__assert_fail@plt+0x130c>
   12390:	mov	r8, #0
   12394:	ldr	r0, [fp, #8]
   12398:	ldr	r1, [sp, #12]
   1239c:	mov	r2, r0
   123a0:	ldr	r0, [r0]
   123a4:	sub	r0, r0, r1
   123a8:	str	r0, [r2]
   123ac:	clz	r0, r8
   123b0:	lsr	r0, r0, #5
   123b4:	sub	sp, fp, #28
   123b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123bc:	push	{r4, r5, r6, sl, fp, lr}
   123c0:	add	fp, sp, #16
   123c4:	mov	ip, #0
   123c8:	cmp	r1, #8
   123cc:	blt	125ec <__assert_fail@plt+0x1564>
   123d0:	ldrb	r1, [r0]
   123d4:	movw	lr, #31567	; 0x7b4f
   123d8:	movt	lr, #1
   123dc:	add	r1, lr, r1
   123e0:	ldrsb	r4, [r1]
   123e4:	cmp	r4, #0
   123e8:	blt	125ec <__assert_fail@plt+0x1564>
   123ec:	ldrb	r1, [r0, #1]
   123f0:	add	r1, lr, r1
   123f4:	ldrsb	r1, [r1]
   123f8:	cmp	r1, #0
   123fc:	blt	125ec <__assert_fail@plt+0x1564>
   12400:	ldr	r5, [r3]
   12404:	ldr	ip, [r2]
   12408:	cmp	r5, #0
   1240c:	beq	1244c <__assert_fail@plt+0x13c4>
   12410:	ubfx	r5, r1, #2, #6
   12414:	orr	r4, r5, r4, lsl #3
   12418:	strb	r4, [ip], #1
   1241c:	ldr	r4, [r3]
   12420:	sub	r5, r4, #1
   12424:	str	r5, [r3]
   12428:	ldrb	r4, [r0, #2]
   1242c:	cmp	r4, #61	; 0x3d
   12430:	bne	1245c <__assert_fail@plt+0x13d4>
   12434:	ldrb	r1, [r0, #3]
   12438:	cmp	r1, #61	; 0x3d
   1243c:	ldrbeq	r1, [r0, #4]
   12440:	cmpeq	r1, #61	; 0x3d
   12444:	bne	12538 <__assert_fail@plt+0x14b0>
   12448:	b	124b4 <__assert_fail@plt+0x142c>
   1244c:	mov	r5, #0
   12450:	ldrb	r4, [r0, #2]
   12454:	cmp	r4, #61	; 0x3d
   12458:	beq	12434 <__assert_fail@plt+0x13ac>
   1245c:	add	r4, lr, r4
   12460:	ldrsb	r6, [r4]
   12464:	cmp	r6, #0
   12468:	blt	12538 <__assert_fail@plt+0x14b0>
   1246c:	ldrb	r4, [r0, #3]
   12470:	add	r4, lr, r4
   12474:	ldrsb	r4, [r4]
   12478:	cmn	r4, #1
   1247c:	ble	12538 <__assert_fail@plt+0x14b0>
   12480:	cmp	r5, #0
   12484:	beq	124c4 <__assert_fail@plt+0x143c>
   12488:	lsl	r5, r6, #1
   1248c:	orr	r1, r5, r1, lsl #6
   12490:	and	r5, r4, #240	; 0xf0
   12494:	orr	r1, r1, r5, lsr #4
   12498:	strb	r1, [ip], #1
   1249c:	ldr	r1, [r3]
   124a0:	sub	r5, r1, #1
   124a4:	str	r5, [r3]
   124a8:	ldrb	r1, [r0, #4]
   124ac:	cmp	r1, #61	; 0x3d
   124b0:	bne	124d4 <__assert_fail@plt+0x144c>
   124b4:	ldrb	r1, [r0, #5]
   124b8:	cmp	r1, #61	; 0x3d
   124bc:	beq	12524 <__assert_fail@plt+0x149c>
   124c0:	b	12538 <__assert_fail@plt+0x14b0>
   124c4:	mov	r5, #0
   124c8:	ldrb	r1, [r0, #4]
   124cc:	cmp	r1, #61	; 0x3d
   124d0:	beq	124b4 <__assert_fail@plt+0x142c>
   124d4:	add	r1, lr, r1
   124d8:	ldrsb	r1, [r1]
   124dc:	cmn	r1, #1
   124e0:	ble	12538 <__assert_fail@plt+0x14b0>
   124e4:	cmp	r5, #0
   124e8:	beq	12514 <__assert_fail@plt+0x148c>
   124ec:	ubfx	r5, r1, #1, #7
   124f0:	orr	r4, r5, r4, lsl #4
   124f4:	strb	r4, [ip], #1
   124f8:	ldr	r4, [r3]
   124fc:	sub	r4, r4, #1
   12500:	str	r4, [r3]
   12504:	ldrb	r5, [r0, #5]
   12508:	cmp	r5, #61	; 0x3d
   1250c:	beq	12524 <__assert_fail@plt+0x149c>
   12510:	b	12548 <__assert_fail@plt+0x14c0>
   12514:	mov	r4, #0
   12518:	ldrb	r5, [r0, #5]
   1251c:	cmp	r5, #61	; 0x3d
   12520:	bne	12548 <__assert_fail@plt+0x14c0>
   12524:	ldrb	r1, [r0, #6]
   12528:	cmp	r1, #61	; 0x3d
   1252c:	ldrbeq	r0, [r0, #7]
   12530:	cmpeq	r0, #61	; 0x3d
   12534:	beq	125e4 <__assert_fail@plt+0x155c>
   12538:	str	ip, [r2]
   1253c:	mov	ip, #0
   12540:	mov	r0, ip
   12544:	pop	{r4, r5, r6, sl, fp, pc}
   12548:	add	r5, lr, r5
   1254c:	ldrsb	r5, [r5]
   12550:	cmp	r5, #0
   12554:	blt	12538 <__assert_fail@plt+0x14b0>
   12558:	ldrb	r6, [r0, #6]
   1255c:	add	r6, lr, r6
   12560:	ldrsb	r6, [r6]
   12564:	cmn	r6, #1
   12568:	ble	12538 <__assert_fail@plt+0x14b0>
   1256c:	cmp	r4, #0
   12570:	beq	125a0 <__assert_fail@plt+0x1518>
   12574:	ubfx	r4, r6, #3, #5
   12578:	orr	r4, r4, r5, lsl #2
   1257c:	orr	r1, r4, r1, lsl #7
   12580:	strb	r1, [ip], #1
   12584:	ldr	r1, [r3]
   12588:	sub	r1, r1, #1
   1258c:	str	r1, [r3]
   12590:	ldrb	r4, [r0, #7]
   12594:	cmp	r4, #61	; 0x3d
   12598:	bne	125b0 <__assert_fail@plt+0x1528>
   1259c:	b	125e4 <__assert_fail@plt+0x155c>
   125a0:	mov	r1, #0
   125a4:	ldrb	r4, [r0, #7]
   125a8:	cmp	r4, #61	; 0x3d
   125ac:	beq	125e4 <__assert_fail@plt+0x155c>
   125b0:	add	r4, lr, r4
   125b4:	ldrsb	r4, [r4]
   125b8:	cmn	r4, #1
   125bc:	ble	12538 <__assert_fail@plt+0x14b0>
   125c0:	cmp	r1, #0
   125c4:	beq	125e4 <__assert_fail@plt+0x155c>
   125c8:	ldrb	r0, [r0, #6]
   125cc:	ldrb	r0, [lr, r0]
   125d0:	orr	r0, r4, r0, lsl #5
   125d4:	strb	r0, [ip], #1
   125d8:	ldr	r0, [r3]
   125dc:	sub	r0, r0, #1
   125e0:	str	r0, [r3]
   125e4:	str	ip, [r2]
   125e8:	mov	ip, #1
   125ec:	mov	r0, ip
   125f0:	pop	{r4, r5, r6, sl, fp, pc}
   125f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   125f8:	add	fp, sp, #24
   125fc:	sub	sp, sp, #8
   12600:	mov	r7, r0
   12604:	asr	r0, r2, #3
   12608:	mov	r4, r3
   1260c:	mov	r6, r2
   12610:	mov	r8, r1
   12614:	add	r0, r0, r0, lsl #2
   12618:	add	r0, r0, #5
   1261c:	str	r0, [sp, #4]
   12620:	bl	16f58 <__assert_fail@plt+0x5ed0>
   12624:	mov	r5, #1
   12628:	cmp	r0, #0
   1262c:	str	r0, [r4]
   12630:	beq	12668 <__assert_fail@plt+0x15e0>
   12634:	mov	r3, r0
   12638:	add	r0, sp, #4
   1263c:	mov	r1, r8
   12640:	mov	r2, r6
   12644:	str	r0, [sp]
   12648:	mov	r0, r7
   1264c:	bl	11fe4 <__assert_fail@plt+0xf5c>
   12650:	cmp	r0, #0
   12654:	beq	12674 <__assert_fail@plt+0x15ec>
   12658:	ldr	r0, [fp, #8]
   1265c:	cmp	r0, #0
   12660:	ldrne	r1, [sp, #4]
   12664:	strne	r1, [r0]
   12668:	mov	r0, r5
   1266c:	sub	sp, fp, #24
   12670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12674:	ldr	r0, [r4]
   12678:	bl	128e0 <__assert_fail@plt+0x1858>
   1267c:	mov	r5, #0
   12680:	str	r5, [r4]
   12684:	mov	r0, r5
   12688:	sub	sp, fp, #24
   1268c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12690:	movw	r1, #37208	; 0x9158
   12694:	movt	r1, #2
   12698:	str	r0, [r1, #4]
   1269c:	bx	lr
   126a0:	movw	r1, #37208	; 0x9158
   126a4:	movt	r1, #2
   126a8:	strb	r0, [r1]
   126ac:	bx	lr
   126b0:	push	{r4, r5, r6, sl, fp, lr}
   126b4:	add	fp, sp, #16
   126b8:	sub	sp, sp, #8
   126bc:	movw	r0, #37196	; 0x914c
   126c0:	movt	r0, #2
   126c4:	ldr	r0, [r0]
   126c8:	bl	16fdc <__assert_fail@plt+0x5f54>
   126cc:	cmp	r0, #0
   126d0:	beq	126f8 <__assert_fail@plt+0x1670>
   126d4:	movw	r5, #37208	; 0x9158
   126d8:	movt	r5, #2
   126dc:	ldrb	r0, [r5]
   126e0:	cmp	r0, #0
   126e4:	beq	12724 <__assert_fail@plt+0x169c>
   126e8:	bl	10fa4 <__errno_location@plt>
   126ec:	ldr	r0, [r0]
   126f0:	cmp	r0, #32
   126f4:	bne	12724 <__assert_fail@plt+0x169c>
   126f8:	movw	r0, #37184	; 0x9140
   126fc:	movt	r0, #2
   12700:	ldr	r0, [r0]
   12704:	bl	16fdc <__assert_fail@plt+0x5f54>
   12708:	cmp	r0, #0
   1270c:	subeq	sp, fp, #16
   12710:	popeq	{r4, r5, r6, sl, fp, pc}
   12714:	movw	r0, #37100	; 0x90ec
   12718:	movt	r0, #2
   1271c:	ldr	r0, [r0]
   12720:	bl	10e84 <_exit@plt>
   12724:	movw	r1, #31316	; 0x7a54
   12728:	mov	r0, #0
   1272c:	mov	r2, #5
   12730:	movt	r1, #1
   12734:	bl	10ec0 <dcgettext@plt>
   12738:	ldr	r6, [r5, #4]
   1273c:	mov	r4, r0
   12740:	bl	10fa4 <__errno_location@plt>
   12744:	ldr	r5, [r0]
   12748:	cmp	r6, #0
   1274c:	bne	12768 <__assert_fail@plt+0x16e0>
   12750:	movw	r2, #30752	; 0x7820
   12754:	mov	r0, #0
   12758:	mov	r1, r5
   1275c:	mov	r3, r4
   12760:	movt	r2, #1
   12764:	b	12788 <__assert_fail@plt+0x1700>
   12768:	mov	r0, r6
   1276c:	bl	145a0 <__assert_fail@plt+0x3518>
   12770:	movw	r2, #30748	; 0x781c
   12774:	mov	r3, r0
   12778:	str	r4, [sp]
   1277c:	mov	r0, #0
   12780:	mov	r1, r5
   12784:	movt	r2, #1
   12788:	bl	10f2c <error@plt>
   1278c:	movw	r0, #37100	; 0x90ec
   12790:	movt	r0, #2
   12794:	ldr	r0, [r0]
   12798:	bl	10e84 <_exit@plt>
   1279c:	b	10e54 <posix_fadvise64@plt>
   127a0:	cmp	r0, #0
   127a4:	bxeq	lr
   127a8:	push	{r4, sl, fp, lr}
   127ac:	add	fp, sp, #8
   127b0:	sub	sp, sp, #16
   127b4:	mov	r4, r1
   127b8:	bl	10fd4 <fileno@plt>
   127bc:	mov	r1, #0
   127c0:	mov	r2, #0
   127c4:	mov	r3, #0
   127c8:	str	r1, [sp]
   127cc:	stmib	sp, {r1, r4}
   127d0:	bl	10e54 <posix_fadvise64@plt>
   127d4:	sub	sp, fp, #8
   127d8:	pop	{r4, sl, fp, pc}
   127dc:	push	{r4, r5, r6, sl, fp, lr}
   127e0:	add	fp, sp, #16
   127e4:	sub	sp, sp, #8
   127e8:	mov	r4, r0
   127ec:	bl	10fd4 <fileno@plt>
   127f0:	cmn	r0, #1
   127f4:	ble	12868 <__assert_fail@plt+0x17e0>
   127f8:	mov	r0, r4
   127fc:	bl	10f50 <__freading@plt>
   12800:	cmp	r0, #0
   12804:	beq	12830 <__assert_fail@plt+0x17a8>
   12808:	mov	r0, r4
   1280c:	bl	10fd4 <fileno@plt>
   12810:	mov	r1, #1
   12814:	mov	r2, #0
   12818:	mov	r3, #0
   1281c:	str	r1, [sp]
   12820:	bl	10efc <lseek64@plt>
   12824:	and	r0, r0, r1
   12828:	cmn	r0, #1
   1282c:	beq	12868 <__assert_fail@plt+0x17e0>
   12830:	mov	r0, r4
   12834:	bl	12878 <__assert_fail@plt+0x17f0>
   12838:	cmp	r0, #0
   1283c:	beq	12868 <__assert_fail@plt+0x17e0>
   12840:	bl	10fa4 <__errno_location@plt>
   12844:	ldr	r6, [r0]
   12848:	mov	r5, r0
   1284c:	mov	r0, r4
   12850:	bl	10ff8 <fclose@plt>
   12854:	cmp	r6, #0
   12858:	strne	r6, [r5]
   1285c:	mvnne	r0, #0
   12860:	sub	sp, fp, #16
   12864:	pop	{r4, r5, r6, sl, fp, pc}
   12868:	mov	r0, r4
   1286c:	sub	sp, fp, #16
   12870:	pop	{r4, r5, r6, sl, fp, lr}
   12874:	b	10ff8 <fclose@plt>
   12878:	push	{r4, sl, fp, lr}
   1287c:	add	fp, sp, #8
   12880:	sub	sp, sp, #8
   12884:	mov	r4, r0
   12888:	cmp	r0, #0
   1288c:	beq	128a8 <__assert_fail@plt+0x1820>
   12890:	mov	r0, r4
   12894:	bl	10f50 <__freading@plt>
   12898:	cmp	r0, #0
   1289c:	ldrbne	r0, [r4, #1]
   128a0:	tstne	r0, #1
   128a4:	bne	128b8 <__assert_fail@plt+0x1830>
   128a8:	mov	r0, r4
   128ac:	sub	sp, fp, #8
   128b0:	pop	{r4, sl, fp, lr}
   128b4:	b	10e60 <fflush@plt>
   128b8:	mov	r0, #1
   128bc:	mov	r2, #0
   128c0:	mov	r3, #0
   128c4:	str	r0, [sp]
   128c8:	mov	r0, r4
   128cc:	bl	12908 <__assert_fail@plt+0x1880>
   128d0:	mov	r0, r4
   128d4:	sub	sp, fp, #8
   128d8:	pop	{r4, sl, fp, lr}
   128dc:	b	10e60 <fflush@plt>
   128e0:	push	{r4, r5, r6, sl, fp, lr}
   128e4:	add	fp, sp, #16
   128e8:	mov	r4, r0
   128ec:	bl	10fa4 <__errno_location@plt>
   128f0:	ldr	r6, [r0]
   128f4:	mov	r5, r0
   128f8:	mov	r0, r4
   128fc:	bl	10e78 <free@plt>
   12900:	str	r6, [r5]
   12904:	pop	{r4, r5, r6, sl, fp, pc}
   12908:	push	{r4, r5, r6, r7, fp, lr}
   1290c:	add	fp, sp, #16
   12910:	sub	sp, sp, #8
   12914:	mov	r4, r0
   12918:	ldr	r0, [r0, #4]
   1291c:	mov	r5, r3
   12920:	mov	r6, r2
   12924:	ldr	r1, [r4, #8]
   12928:	cmp	r1, r0
   1292c:	bne	12948 <__assert_fail@plt+0x18c0>
   12930:	ldrd	r0, [r4, #16]
   12934:	cmp	r1, r0
   12938:	bne	12948 <__assert_fail@plt+0x18c0>
   1293c:	ldr	r0, [r4, #36]	; 0x24
   12940:	cmp	r0, #0
   12944:	beq	12960 <__assert_fail@plt+0x18d8>
   12948:	mov	r0, r4
   1294c:	mov	r2, r6
   12950:	mov	r3, r5
   12954:	sub	sp, fp, #16
   12958:	pop	{r4, r5, r6, r7, fp, lr}
   1295c:	b	11004 <fseeko64@plt>
   12960:	ldr	r7, [fp, #8]
   12964:	mov	r0, r4
   12968:	bl	10fd4 <fileno@plt>
   1296c:	mov	r2, r6
   12970:	mov	r3, r5
   12974:	str	r7, [sp]
   12978:	bl	10efc <lseek64@plt>
   1297c:	and	r2, r0, r1
   12980:	cmn	r2, #1
   12984:	mvneq	r0, #0
   12988:	subeq	sp, fp, #16
   1298c:	popeq	{r4, r5, r6, r7, fp, pc}
   12990:	strd	r0, [r4, #80]	; 0x50
   12994:	ldr	r0, [r4]
   12998:	bic	r0, r0, #16
   1299c:	str	r0, [r4]
   129a0:	mov	r0, #0
   129a4:	sub	sp, fp, #16
   129a8:	pop	{r4, r5, r6, r7, fp, pc}
   129ac:	push	{r4, r5, fp, lr}
   129b0:	add	fp, sp, #8
   129b4:	cmp	r0, #0
   129b8:	beq	12a4c <__assert_fail@plt+0x19c4>
   129bc:	mov	r1, #47	; 0x2f
   129c0:	mov	r4, r0
   129c4:	bl	11028 <strrchr@plt>
   129c8:	cmp	r0, #0
   129cc:	mov	r5, r4
   129d0:	addne	r5, r0, #1
   129d4:	sub	r0, r5, r4
   129d8:	cmp	r0, #7
   129dc:	blt	12a30 <__assert_fail@plt+0x19a8>
   129e0:	movw	r1, #31879	; 0x7c87
   129e4:	sub	r0, r5, #7
   129e8:	mov	r2, #7
   129ec:	movt	r1, #1
   129f0:	bl	11070 <strncmp@plt>
   129f4:	cmp	r0, #0
   129f8:	bne	12a30 <__assert_fail@plt+0x19a8>
   129fc:	movw	r1, #31887	; 0x7c8f
   12a00:	mov	r0, r5
   12a04:	mov	r2, #3
   12a08:	movt	r1, #1
   12a0c:	bl	11070 <strncmp@plt>
   12a10:	cmp	r0, #0
   12a14:	beq	12a20 <__assert_fail@plt+0x1998>
   12a18:	mov	r4, r5
   12a1c:	b	12a30 <__assert_fail@plt+0x19a8>
   12a20:	movw	r0, #37168	; 0x9130
   12a24:	add	r4, r5, #3
   12a28:	movt	r0, #2
   12a2c:	str	r4, [r0]
   12a30:	movw	r0, #37172	; 0x9134
   12a34:	movt	r0, #2
   12a38:	str	r4, [r0]
   12a3c:	movw	r0, #37216	; 0x9160
   12a40:	movt	r0, #2
   12a44:	str	r4, [r0]
   12a48:	pop	{r4, r5, fp, pc}
   12a4c:	movw	r0, #37184	; 0x9140
   12a50:	mov	r1, #55	; 0x37
   12a54:	mov	r2, #1
   12a58:	movt	r0, #2
   12a5c:	ldr	r3, [r0]
   12a60:	movw	r0, #31823	; 0x7c4f
   12a64:	movt	r0, #1
   12a68:	bl	10ef0 <fwrite@plt>
   12a6c:	bl	1107c <abort@plt>
   12a70:	push	{r4, r5, r6, sl, fp, lr}
   12a74:	add	fp, sp, #16
   12a78:	mov	r4, r0
   12a7c:	movw	r0, #37224	; 0x9168
   12a80:	movt	r0, #2
   12a84:	cmp	r4, #0
   12a88:	moveq	r4, r0
   12a8c:	bl	10fa4 <__errno_location@plt>
   12a90:	ldr	r6, [r0]
   12a94:	mov	r5, r0
   12a98:	mov	r0, r4
   12a9c:	mov	r1, #48	; 0x30
   12aa0:	bl	15460 <__assert_fail@plt+0x43d8>
   12aa4:	str	r6, [r5]
   12aa8:	pop	{r4, r5, r6, sl, fp, pc}
   12aac:	movw	r1, #37224	; 0x9168
   12ab0:	cmp	r0, #0
   12ab4:	movt	r1, #2
   12ab8:	movne	r1, r0
   12abc:	ldr	r0, [r1]
   12ac0:	bx	lr
   12ac4:	movw	r2, #37224	; 0x9168
   12ac8:	cmp	r0, #0
   12acc:	movt	r2, #2
   12ad0:	movne	r2, r0
   12ad4:	str	r1, [r2]
   12ad8:	bx	lr
   12adc:	movw	r3, #37224	; 0x9168
   12ae0:	cmp	r0, #0
   12ae4:	movt	r3, #2
   12ae8:	movne	r3, r0
   12aec:	ubfx	r0, r1, #5, #3
   12af0:	and	r1, r1, #31
   12af4:	add	r0, r3, r0, lsl #2
   12af8:	ldr	r3, [r0, #8]
   12afc:	eor	r2, r2, r3, lsr r1
   12b00:	and	r2, r2, #1
   12b04:	eor	r2, r3, r2, lsl r1
   12b08:	str	r2, [r0, #8]
   12b0c:	mov	r0, #1
   12b10:	and	r0, r0, r3, lsr r1
   12b14:	bx	lr
   12b18:	movw	r2, #37224	; 0x9168
   12b1c:	cmp	r0, #0
   12b20:	movt	r2, #2
   12b24:	movne	r2, r0
   12b28:	ldr	r0, [r2, #4]
   12b2c:	str	r1, [r2, #4]
   12b30:	bx	lr
   12b34:	movw	r3, #37224	; 0x9168
   12b38:	cmp	r0, #0
   12b3c:	movt	r3, #2
   12b40:	movne	r3, r0
   12b44:	cmp	r1, #0
   12b48:	mov	r0, #10
   12b4c:	cmpne	r2, #0
   12b50:	str	r0, [r3]
   12b54:	bne	12b64 <__assert_fail@plt+0x1adc>
   12b58:	push	{fp, lr}
   12b5c:	mov	fp, sp
   12b60:	bl	1107c <abort@plt>
   12b64:	str	r1, [r3, #40]	; 0x28
   12b68:	str	r2, [r3, #44]	; 0x2c
   12b6c:	bx	lr
   12b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b74:	add	fp, sp, #28
   12b78:	sub	sp, sp, #20
   12b7c:	mov	r7, r0
   12b80:	ldr	r0, [fp, #8]
   12b84:	movw	r5, #37224	; 0x9168
   12b88:	mov	r8, r3
   12b8c:	mov	r9, r2
   12b90:	mov	sl, r1
   12b94:	movt	r5, #2
   12b98:	cmp	r0, #0
   12b9c:	movne	r5, r0
   12ba0:	bl	10fa4 <__errno_location@plt>
   12ba4:	mov	r4, r0
   12ba8:	ldm	r5, {r0, r1}
   12bac:	ldr	r2, [r5, #40]	; 0x28
   12bb0:	ldr	r3, [r5, #44]	; 0x2c
   12bb4:	add	r5, r5, #8
   12bb8:	ldr	r6, [r4]
   12bbc:	stm	sp, {r0, r1, r5}
   12bc0:	str	r2, [sp, #12]
   12bc4:	str	r3, [sp, #16]
   12bc8:	mov	r0, r7
   12bcc:	mov	r1, sl
   12bd0:	mov	r2, r9
   12bd4:	mov	r3, r8
   12bd8:	bl	12be8 <__assert_fail@plt+0x1b60>
   12bdc:	str	r6, [r4]
   12be0:	sub	sp, fp, #28
   12be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bec:	add	fp, sp, #28
   12bf0:	sub	sp, sp, #156	; 0x9c
   12bf4:	str	r0, [sp, #76]	; 0x4c
   12bf8:	ldr	r0, [fp, #12]
   12bfc:	mov	r6, r1
   12c00:	str	r3, [sp, #84]	; 0x54
   12c04:	str	r2, [fp, #-84]	; 0xffffffac
   12c08:	and	r1, r0, #4
   12c0c:	str	r1, [sp, #24]
   12c10:	and	r1, r0, #1
   12c14:	str	r1, [sp, #28]
   12c18:	ubfx	r8, r0, #1, #1
   12c1c:	bl	10f08 <__ctype_get_mb_cur_max@plt>
   12c20:	str	r0, [sp, #32]
   12c24:	ldr	r0, [fp, #24]
   12c28:	ldr	r7, [fp, #8]
   12c2c:	mov	r1, #0
   12c30:	mov	r2, #0
   12c34:	mov	r4, #1
   12c38:	str	r1, [sp, #52]	; 0x34
   12c3c:	str	r0, [sp, #72]	; 0x48
   12c40:	ldr	r0, [fp, #20]
   12c44:	str	r0, [sp, #68]	; 0x44
   12c48:	mov	r0, #0
   12c4c:	str	r0, [sp, #48]	; 0x30
   12c50:	mov	r0, #0
   12c54:	str	r0, [sp, #92]	; 0x5c
   12c58:	mov	r0, #0
   12c5c:	str	r0, [fp, #-76]	; 0xffffffb4
   12c60:	mov	r0, #0
   12c64:	cmp	r7, #10
   12c68:	bhi	13f50 <__assert_fail@plt+0x2ec8>
   12c6c:	add	r1, pc, #28
   12c70:	mov	sl, r6
   12c74:	ldr	r6, [sp, #76]	; 0x4c
   12c78:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c7c:	ldr	lr, [sp, #84]	; 0x54
   12c80:	mov	r9, #0
   12c84:	mov	r3, #1
   12c88:	mov	r5, #0
   12c8c:	ldr	pc, [r1, r7, lsl #2]
   12c90:	andeq	r2, r1, r0, ror #26
   12c94:	muleq	r1, ip, sp
   12c98:	andeq	r2, r1, r0, ror sp
   12c9c:	andeq	r2, r1, r8, asr sp
   12ca0:	muleq	r1, r0, sp
   12ca4:	andeq	r2, r1, r4, asr #27
   12ca8:	andeq	r2, r1, r0, lsl #27
   12cac:	ldrdeq	r2, [r1], -r0
   12cb0:			; <UNDEFINED> instruction: 0x00012cbc
   12cb4:			; <UNDEFINED> instruction: 0x00012cbc
   12cb8:	andeq	r2, r1, r4, ror #30
   12cbc:	mov	r9, r4
   12cc0:	movw	r4, #31969	; 0x7ce1
   12cc4:	mov	r5, r8
   12cc8:	mov	r8, r2
   12ccc:	mov	r0, #0
   12cd0:	mov	r2, #5
   12cd4:	movt	r4, #1
   12cd8:	mov	r1, r4
   12cdc:	bl	10ec0 <dcgettext@plt>
   12ce0:	cmp	r0, r4
   12ce4:	str	r0, [sp, #68]	; 0x44
   12ce8:	bne	12e78 <__assert_fail@plt+0x1df0>
   12cec:	bl	17060 <__assert_fail@plt+0x5fd8>
   12cf0:	ldrb	r1, [r0]
   12cf4:	and	r1, r1, #223	; 0xdf
   12cf8:	cmp	r1, #71	; 0x47
   12cfc:	beq	12e44 <__assert_fail@plt+0x1dbc>
   12d00:	cmp	r1, #85	; 0x55
   12d04:	bne	12e5c <__assert_fail@plt+0x1dd4>
   12d08:	ldrb	r1, [r0, #1]
   12d0c:	and	r1, r1, #223	; 0xdf
   12d10:	cmp	r1, #84	; 0x54
   12d14:	bne	12e5c <__assert_fail@plt+0x1dd4>
   12d18:	ldrb	r1, [r0, #2]
   12d1c:	and	r1, r1, #223	; 0xdf
   12d20:	cmp	r1, #70	; 0x46
   12d24:	bne	12e5c <__assert_fail@plt+0x1dd4>
   12d28:	ldrb	r1, [r0, #3]
   12d2c:	cmp	r1, #45	; 0x2d
   12d30:	ldrbeq	r1, [r0, #4]
   12d34:	cmpeq	r1, #56	; 0x38
   12d38:	bne	12e5c <__assert_fail@plt+0x1dd4>
   12d3c:	ldrb	r0, [r0, #5]
   12d40:	cmp	r0, #0
   12d44:	movw	r0, #31973	; 0x7ce5
   12d48:	movt	r0, #1
   12d4c:	str	r0, [sp, #68]	; 0x44
   12d50:	bne	12e5c <__assert_fail@plt+0x1dd4>
   12d54:	b	12e78 <__assert_fail@plt+0x1df0>
   12d58:	mov	r0, #1
   12d5c:	b	12d9c <__assert_fail@plt+0x1d14>
   12d60:	mov	r7, #0
   12d64:	mov	r9, #0
   12d68:	mov	r3, r0
   12d6c:	b	12e3c <__assert_fail@plt+0x1db4>
   12d70:	tst	r8, #1
   12d74:	bne	12d9c <__assert_fail@plt+0x1d14>
   12d78:	mov	r3, r0
   12d7c:	b	12df4 <__assert_fail@plt+0x1d6c>
   12d80:	mov	r0, #1
   12d84:	mov	r9, #0
   12d88:	mov	r7, #5
   12d8c:	b	12dd8 <__assert_fail@plt+0x1d50>
   12d90:	mov	r3, #1
   12d94:	tst	r8, #1
   12d98:	beq	12df4 <__assert_fail@plt+0x1d6c>
   12d9c:	mov	r1, #1
   12da0:	mov	r9, #0
   12da4:	mov	r7, #2
   12da8:	mov	r3, r0
   12dac:	mov	r5, #1
   12db0:	str	r1, [fp, #-76]	; 0xffffffb4
   12db4:	movw	r1, #31971	; 0x7ce3
   12db8:	movt	r1, #1
   12dbc:	str	r1, [sp, #92]	; 0x5c
   12dc0:	b	12fd0 <__assert_fail@plt+0x1f48>
   12dc4:	mov	r7, #5
   12dc8:	tst	r8, #1
   12dcc:	beq	12e14 <__assert_fail@plt+0x1d8c>
   12dd0:	mov	r0, #1
   12dd4:	mov	r9, #0
   12dd8:	str	r0, [fp, #-76]	; 0xffffffb4
   12ddc:	movw	r0, #31967	; 0x7cdf
   12de0:	mov	r3, #1
   12de4:	mov	r5, #1
   12de8:	movt	r0, #1
   12dec:	str	r0, [sp, #92]	; 0x5c
   12df0:	b	12fd0 <__assert_fail@plt+0x1f48>
   12df4:	cmp	sl, #0
   12df8:	mov	r9, #1
   12dfc:	mov	r7, #2
   12e00:	movne	r0, #39	; 0x27
   12e04:	strbne	r0, [r6]
   12e08:	movw	r0, #31971	; 0x7ce3
   12e0c:	movt	r0, #1
   12e10:	b	12e30 <__assert_fail@plt+0x1da8>
   12e14:	cmp	sl, #0
   12e18:	mov	r9, #1
   12e1c:	mov	r3, #1
   12e20:	movne	r0, #34	; 0x22
   12e24:	strbne	r0, [r6]
   12e28:	movw	r0, #31967	; 0x7cdf
   12e2c:	movt	r0, #1
   12e30:	str	r0, [sp, #92]	; 0x5c
   12e34:	mov	r0, #1
   12e38:	str	r0, [fp, #-76]	; 0xffffffb4
   12e3c:	mov	r5, #0
   12e40:	b	12fd0 <__assert_fail@plt+0x1f48>
   12e44:	ldrb	r1, [r0, #1]
   12e48:	and	r1, r1, #223	; 0xdf
   12e4c:	cmp	r1, #66	; 0x42
   12e50:	ldrbeq	r1, [r0, #2]
   12e54:	cmpeq	r1, #49	; 0x31
   12e58:	beq	13d78 <__assert_fail@plt+0x2cf0>
   12e5c:	movw	r0, #31971	; 0x7ce3
   12e60:	movw	r1, #31967	; 0x7cdf
   12e64:	cmp	r7, #9
   12e68:	movt	r0, #1
   12e6c:	movt	r1, #1
   12e70:	moveq	r0, r1
   12e74:	str	r0, [sp, #68]	; 0x44
   12e78:	movw	r4, #31971	; 0x7ce3
   12e7c:	mov	r0, #0
   12e80:	mov	r2, #5
   12e84:	movt	r4, #1
   12e88:	mov	r1, r4
   12e8c:	bl	10ec0 <dcgettext@plt>
   12e90:	cmp	r0, r4
   12e94:	str	r0, [sp, #72]	; 0x48
   12e98:	beq	12ea8 <__assert_fail@plt+0x1e20>
   12e9c:	mov	r4, r9
   12ea0:	mov	r2, r8
   12ea4:	b	12f60 <__assert_fail@plt+0x1ed8>
   12ea8:	bl	17060 <__assert_fail@plt+0x5fd8>
   12eac:	ldrb	r1, [r0]
   12eb0:	mov	r4, r9
   12eb4:	and	r1, r1, #223	; 0xdf
   12eb8:	cmp	r1, #71	; 0x47
   12ebc:	beq	12f18 <__assert_fail@plt+0x1e90>
   12ec0:	cmp	r1, #85	; 0x55
   12ec4:	mov	r2, r8
   12ec8:	bne	12f40 <__assert_fail@plt+0x1eb8>
   12ecc:	ldrb	r1, [r0, #1]
   12ed0:	and	r1, r1, #223	; 0xdf
   12ed4:	cmp	r1, #84	; 0x54
   12ed8:	bne	12f40 <__assert_fail@plt+0x1eb8>
   12edc:	ldrb	r1, [r0, #2]
   12ee0:	and	r1, r1, #223	; 0xdf
   12ee4:	cmp	r1, #70	; 0x46
   12ee8:	ldrbeq	r1, [r0, #3]
   12eec:	cmpeq	r1, #45	; 0x2d
   12ef0:	bne	12f40 <__assert_fail@plt+0x1eb8>
   12ef4:	ldrb	r1, [r0, #4]
   12ef8:	cmp	r1, #56	; 0x38
   12efc:	ldrbeq	r0, [r0, #5]
   12f00:	cmpeq	r0, #0
   12f04:	bne	12f40 <__assert_fail@plt+0x1eb8>
   12f08:	movw	r0, #31977	; 0x7ce9
   12f0c:	movt	r0, #1
   12f10:	str	r0, [sp, #72]	; 0x48
   12f14:	b	12f60 <__assert_fail@plt+0x1ed8>
   12f18:	ldrb	r1, [r0, #1]
   12f1c:	mov	r2, r8
   12f20:	and	r1, r1, #223	; 0xdf
   12f24:	cmp	r1, #66	; 0x42
   12f28:	bne	12f40 <__assert_fail@plt+0x1eb8>
   12f2c:	ldrb	r1, [r0, #2]
   12f30:	cmp	r1, #49	; 0x31
   12f34:	ldrbeq	r1, [r0, #3]
   12f38:	cmpeq	r1, #56	; 0x38
   12f3c:	beq	13dbc <__assert_fail@plt+0x2d34>
   12f40:	movw	r0, #31971	; 0x7ce3
   12f44:	cmp	r7, #9
   12f48:	movt	r0, #1
   12f4c:	mov	r1, r0
   12f50:	movw	r0, #31967	; 0x7cdf
   12f54:	movt	r0, #1
   12f58:	moveq	r1, r0
   12f5c:	str	r1, [sp, #72]	; 0x48
   12f60:	mov	r8, r5
   12f64:	mov	r9, #0
   12f68:	tst	r8, #1
   12f6c:	mov	r5, r8
   12f70:	str	r2, [fp, #-48]	; 0xffffffd0
   12f74:	bne	12fac <__assert_fail@plt+0x1f24>
   12f78:	ldr	r0, [sp, #68]	; 0x44
   12f7c:	ldrb	r0, [r0]
   12f80:	cmp	r0, #0
   12f84:	beq	12fac <__assert_fail@plt+0x1f24>
   12f88:	ldr	r1, [sp, #68]	; 0x44
   12f8c:	mov	r9, #0
   12f90:	add	r1, r1, #1
   12f94:	cmp	r9, sl
   12f98:	strbcc	r0, [r6, r9]
   12f9c:	ldrb	r0, [r1, r9]
   12fa0:	add	r9, r9, #1
   12fa4:	cmp	r0, #0
   12fa8:	bne	12f94 <__assert_fail@plt+0x1f0c>
   12fac:	ldr	r8, [sp, #72]	; 0x48
   12fb0:	mov	r0, r8
   12fb4:	bl	10f8c <strlen@plt>
   12fb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fbc:	ldr	lr, [sp, #84]	; 0x54
   12fc0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12fc4:	str	r0, [fp, #-76]	; 0xffffffb4
   12fc8:	str	r8, [sp, #92]	; 0x5c
   12fcc:	mov	r3, #1
   12fd0:	ldr	r0, [fp, #16]
   12fd4:	str	r7, [fp, #-64]	; 0xffffffc0
   12fd8:	str	r5, [fp, #-72]	; 0xffffffb8
   12fdc:	str	r3, [sp, #80]	; 0x50
   12fe0:	cmp	r0, #0
   12fe4:	movwne	r0, #1
   12fe8:	and	r0, r0, r5
   12fec:	str	r0, [fp, #-88]	; 0xffffffa8
   12ff0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ff4:	cmp	r0, #0
   12ff8:	movwne	r0, #1
   12ffc:	subs	r7, r7, #2
   13000:	and	r1, r0, r5
   13004:	str	r7, [fp, #-80]	; 0xffffffb0
   13008:	and	r1, r3, r1
   1300c:	str	r1, [sp, #40]	; 0x28
   13010:	clz	r1, r7
   13014:	lsr	r1, r1, #5
   13018:	and	r1, r1, r5
   1301c:	eor	r5, r5, #1
   13020:	str	r1, [sp, #36]	; 0x24
   13024:	mov	r1, r7
   13028:	str	r5, [sp, #88]	; 0x58
   1302c:	mov	r7, #0
   13030:	movwne	r1, #1
   13034:	orr	r5, r1, r5
   13038:	and	r1, r1, r3
   1303c:	and	r0, r0, r1
   13040:	str	r5, [sp, #60]	; 0x3c
   13044:	str	r1, [fp, #-68]	; 0xffffffbc
   13048:	str	r0, [fp, #-60]	; 0xffffffc4
   1304c:	eor	r0, r3, #1
   13050:	str	r0, [sp, #44]	; 0x2c
   13054:	cmn	lr, #1
   13058:	beq	13068 <__assert_fail@plt+0x1fe0>
   1305c:	cmp	r7, lr
   13060:	bne	13074 <__assert_fail@plt+0x1fec>
   13064:	b	13cec <__assert_fail@plt+0x2c64>
   13068:	ldrb	r0, [ip, r7]
   1306c:	cmp	r0, #0
   13070:	beq	13cf4 <__assert_fail@plt+0x2c6c>
   13074:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13078:	mov	r8, #0
   1307c:	str	r4, [fp, #-52]	; 0xffffffcc
   13080:	str	r2, [fp, #-48]	; 0xffffffd0
   13084:	cmp	r0, #0
   13088:	beq	130bc <__assert_fail@plt+0x2034>
   1308c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13090:	add	r4, r7, r0
   13094:	cmp	r0, #2
   13098:	bcc	130b4 <__assert_fail@plt+0x202c>
   1309c:	cmn	lr, #1
   130a0:	bne	130b4 <__assert_fail@plt+0x202c>
   130a4:	mov	r0, ip
   130a8:	bl	10f8c <strlen@plt>
   130ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   130b0:	mov	lr, r0
   130b4:	cmp	r4, lr
   130b8:	bls	130d4 <__assert_fail@plt+0x204c>
   130bc:	mov	r0, #0
   130c0:	str	r0, [fp, #-56]	; 0xffffffc8
   130c4:	ldrb	r5, [ip, r7]
   130c8:	cmp	r5, #126	; 0x7e
   130cc:	bls	13124 <__assert_fail@plt+0x209c>
   130d0:	b	1352c <__assert_fail@plt+0x24a4>
   130d4:	ldr	r1, [sp, #92]	; 0x5c
   130d8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   130dc:	add	r0, ip, r7
   130e0:	mov	r4, lr
   130e4:	bl	10eb4 <memcmp@plt>
   130e8:	ldr	r2, [sp, #88]	; 0x58
   130ec:	cmp	r0, #0
   130f0:	mov	r1, r0
   130f4:	movwne	r1, #1
   130f8:	orr	r1, r1, r2
   130fc:	tst	r1, #1
   13100:	beq	13e00 <__assert_fail@plt+0x2d78>
   13104:	ldr	ip, [fp, #-84]	; 0xffffffac
   13108:	clz	r0, r0
   1310c:	mov	lr, r4
   13110:	lsr	r0, r0, #5
   13114:	str	r0, [fp, #-56]	; 0xffffffc8
   13118:	ldrb	r5, [ip, r7]
   1311c:	cmp	r5, #126	; 0x7e
   13120:	bhi	1352c <__assert_fail@plt+0x24a4>
   13124:	add	r3, pc, #16
   13128:	mov	r4, #1
   1312c:	mov	r2, #110	; 0x6e
   13130:	mov	r0, #97	; 0x61
   13134:	mov	r1, #0
   13138:	ldr	pc, [r3, r5, lsl #2]
   1313c:	andeq	r3, r1, ip, lsl #8
   13140:	andeq	r3, r1, ip, lsr #10
   13144:	andeq	r3, r1, ip, lsr #10
   13148:	andeq	r3, r1, ip, lsr #10
   1314c:	andeq	r3, r1, ip, lsr #10
   13150:	andeq	r3, r1, ip, lsr #10
   13154:	andeq	r3, r1, ip, lsr #10
   13158:	andeq	r3, r1, r8, lsl #12
   1315c:	andeq	r3, r1, ip, ror #7
   13160:	ldrdeq	r3, [r1], -r4
   13164:	strdeq	r3, [r1], -r8
   13168:	andeq	r3, r1, r8, lsl #9
   1316c:	andeq	r3, r1, ip, asr #7
   13170:	strdeq	r3, [r1], -r4
   13174:	andeq	r3, r1, ip, lsr #10
   13178:	andeq	r3, r1, ip, lsr #10
   1317c:	andeq	r3, r1, ip, lsr #10
   13180:	andeq	r3, r1, ip, lsr #10
   13184:	andeq	r3, r1, ip, lsr #10
   13188:	andeq	r3, r1, ip, lsr #10
   1318c:	andeq	r3, r1, ip, lsr #10
   13190:	andeq	r3, r1, ip, lsr #10
   13194:	andeq	r3, r1, ip, lsr #10
   13198:	andeq	r3, r1, ip, lsr #10
   1319c:	andeq	r3, r1, ip, lsr #10
   131a0:	andeq	r3, r1, ip, lsr #10
   131a4:	andeq	r3, r1, ip, lsr #10
   131a8:	andeq	r3, r1, ip, lsr #10
   131ac:	andeq	r3, r1, ip, lsr #10
   131b0:	andeq	r3, r1, ip, lsr #10
   131b4:	andeq	r3, r1, ip, lsr #10
   131b8:	andeq	r3, r1, ip, lsr #10
   131bc:	andeq	r3, r1, r4, lsl #11
   131c0:	andeq	r3, r1, r8, lsl #11
   131c4:	andeq	r3, r1, r8, lsl #11
   131c8:	andeq	r3, r1, r8, asr r3
   131cc:	andeq	r3, r1, r8, lsl #11
   131d0:	andeq	r3, r1, r8, lsr r3
   131d4:	andeq	r3, r1, r8, lsl #11
   131d8:	muleq	r1, r0, r4
   131dc:	andeq	r3, r1, r8, lsl #11
   131e0:	andeq	r3, r1, r8, lsl #11
   131e4:	andeq	r3, r1, r8, lsl #11
   131e8:	andeq	r3, r1, r8, lsr r3
   131ec:	andeq	r3, r1, r8, lsr r3
   131f0:	andeq	r3, r1, r8, lsr r3
   131f4:	andeq	r3, r1, r8, lsr r3
   131f8:	andeq	r3, r1, r8, lsr r3
   131fc:	andeq	r3, r1, r8, lsr r3
   13200:	andeq	r3, r1, r8, lsr r3
   13204:	andeq	r3, r1, r8, lsr r3
   13208:	andeq	r3, r1, r8, lsr r3
   1320c:	andeq	r3, r1, r8, lsr r3
   13210:	andeq	r3, r1, r8, lsr r3
   13214:	andeq	r3, r1, r8, lsr r3
   13218:	andeq	r3, r1, r8, lsr r3
   1321c:	andeq	r3, r1, r8, lsr r3
   13220:	andeq	r3, r1, r8, lsr r3
   13224:	andeq	r3, r1, r8, lsr r3
   13228:	andeq	r3, r1, r8, lsl #11
   1322c:	andeq	r3, r1, r8, lsl #11
   13230:	andeq	r3, r1, r8, lsl #11
   13234:	andeq	r3, r1, r8, lsl #11
   13238:	andeq	r3, r1, ip, asr #8
   1323c:	andeq	r3, r1, ip, lsr #10
   13240:	andeq	r3, r1, r8, lsr r3
   13244:	andeq	r3, r1, r8, lsr r3
   13248:	andeq	r3, r1, r8, lsr r3
   1324c:	andeq	r3, r1, r8, lsr r3
   13250:	andeq	r3, r1, r8, lsr r3
   13254:	andeq	r3, r1, r8, lsr r3
   13258:	andeq	r3, r1, r8, lsr r3
   1325c:	andeq	r3, r1, r8, lsr r3
   13260:	andeq	r3, r1, r8, lsr r3
   13264:	andeq	r3, r1, r8, lsr r3
   13268:	andeq	r3, r1, r8, lsr r3
   1326c:	andeq	r3, r1, r8, lsr r3
   13270:	andeq	r3, r1, r8, lsr r3
   13274:	andeq	r3, r1, r8, lsr r3
   13278:	andeq	r3, r1, r8, lsr r3
   1327c:	andeq	r3, r1, r8, lsr r3
   13280:	andeq	r3, r1, r8, lsr r3
   13284:	andeq	r3, r1, r8, lsr r3
   13288:	andeq	r3, r1, r8, lsr r3
   1328c:	andeq	r3, r1, r8, lsr r3
   13290:	andeq	r3, r1, r8, lsr r3
   13294:	andeq	r3, r1, r8, lsr r3
   13298:	andeq	r3, r1, r8, lsr r3
   1329c:	andeq	r3, r1, r8, lsr r3
   132a0:	andeq	r3, r1, r8, lsr r3
   132a4:	andeq	r3, r1, r8, lsr r3
   132a8:	andeq	r3, r1, r8, lsl #11
   132ac:	muleq	r1, r8, r3
   132b0:	andeq	r3, r1, r8, lsr r3
   132b4:	andeq	r3, r1, r8, lsl #11
   132b8:	andeq	r3, r1, r8, lsr r3
   132bc:	andeq	r3, r1, r8, lsl #11
   132c0:	andeq	r3, r1, r8, lsr r3
   132c4:	andeq	r3, r1, r8, lsr r3
   132c8:	andeq	r3, r1, r8, lsr r3
   132cc:	andeq	r3, r1, r8, lsr r3
   132d0:	andeq	r3, r1, r8, lsr r3
   132d4:	andeq	r3, r1, r8, lsr r3
   132d8:	andeq	r3, r1, r8, lsr r3
   132dc:	andeq	r3, r1, r8, lsr r3
   132e0:	andeq	r3, r1, r8, lsr r3
   132e4:	andeq	r3, r1, r8, lsr r3
   132e8:	andeq	r3, r1, r8, lsr r3
   132ec:	andeq	r3, r1, r8, lsr r3
   132f0:	andeq	r3, r1, r8, lsr r3
   132f4:	andeq	r3, r1, r8, lsr r3
   132f8:	andeq	r3, r1, r8, lsr r3
   132fc:	andeq	r3, r1, r8, lsr r3
   13300:	andeq	r3, r1, r8, lsr r3
   13304:	andeq	r3, r1, r8, lsr r3
   13308:	andeq	r3, r1, r8, lsr r3
   1330c:	andeq	r3, r1, r8, lsr r3
   13310:	andeq	r3, r1, r8, lsr r3
   13314:	andeq	r3, r1, r8, lsr r3
   13318:	andeq	r3, r1, r8, lsr r3
   1331c:	andeq	r3, r1, r8, lsr r3
   13320:	andeq	r3, r1, r8, lsr r3
   13324:	andeq	r3, r1, r8, lsr r3
   13328:	andeq	r3, r1, r8, ror r3
   1332c:	andeq	r3, r1, r8, lsl #11
   13330:	andeq	r3, r1, r8, ror r3
   13334:	andeq	r3, r1, r8, asr r3
   13338:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1333c:	cmp	r0, #0
   13340:	beq	1361c <__assert_fail@plt+0x2594>
   13344:	ldr	r0, [fp, #16]
   13348:	cmp	r0, #0
   1334c:	mov	r0, r5
   13350:	bne	1362c <__assert_fail@plt+0x25a4>
   13354:	b	1364c <__assert_fail@plt+0x25c4>
   13358:	mov	r4, #0
   1335c:	cmp	r7, #0
   13360:	beq	13584 <__assert_fail@plt+0x24fc>
   13364:	mov	r8, #0
   13368:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1336c:	cmp	r0, #0
   13370:	bne	13344 <__assert_fail@plt+0x22bc>
   13374:	b	1361c <__assert_fail@plt+0x2594>
   13378:	mov	r4, #0
   1337c:	cmn	lr, #1
   13380:	beq	1355c <__assert_fail@plt+0x24d4>
   13384:	cmp	r7, #0
   13388:	bne	13364 <__assert_fail@plt+0x22dc>
   1338c:	cmp	lr, #1
   13390:	beq	13584 <__assert_fail@plt+0x24fc>
   13394:	b	13364 <__assert_fail@plt+0x22dc>
   13398:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1339c:	cmp	r0, #2
   133a0:	bne	135b4 <__assert_fail@plt+0x252c>
   133a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   133a8:	tst	r0, #1
   133ac:	bne	13e14 <__assert_fail@plt+0x2d8c>
   133b0:	mov	r8, #0
   133b4:	mov	r0, #92	; 0x5c
   133b8:	mov	r4, #0
   133bc:	cmp	r8, #0
   133c0:	beq	135d4 <__assert_fail@plt+0x254c>
   133c4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   133c8:	b	136c8 <__assert_fail@plt+0x2640>
   133cc:	mov	r0, #102	; 0x66
   133d0:	b	13608 <__assert_fail@plt+0x2580>
   133d4:	mov	r2, #116	; 0x74
   133d8:	ldr	r0, [sp, #60]	; 0x3c
   133dc:	tst	r0, #1
   133e0:	mov	r0, r2
   133e4:	bne	13608 <__assert_fail@plt+0x2580>
   133e8:	b	13e14 <__assert_fail@plt+0x2d8c>
   133ec:	mov	r0, #98	; 0x62
   133f0:	b	13608 <__assert_fail@plt+0x2580>
   133f4:	mov	r2, #114	; 0x72
   133f8:	ldr	r0, [sp, #60]	; 0x3c
   133fc:	tst	r0, #1
   13400:	mov	r0, r2
   13404:	bne	13608 <__assert_fail@plt+0x2580>
   13408:	b	13e14 <__assert_fail@plt+0x2d8c>
   1340c:	ldr	r0, [sp, #80]	; 0x50
   13410:	tst	r0, #1
   13414:	beq	136f0 <__assert_fail@plt+0x2668>
   13418:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1341c:	tst	r0, #1
   13420:	bne	13f3c <__assert_fail@plt+0x2eb4>
   13424:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13428:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1342c:	cmp	r0, #2
   13430:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13434:	movwne	r0, #1
   13438:	orr	r0, r0, r2
   1343c:	tst	r0, #1
   13440:	beq	139e8 <__assert_fail@plt+0x2960>
   13444:	mov	r0, r9
   13448:	b	13a1c <__assert_fail@plt+0x2994>
   1344c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13450:	mov	r8, #0
   13454:	mov	r5, #63	; 0x3f
   13458:	cmp	r0, #5
   1345c:	beq	138a4 <__assert_fail@plt+0x281c>
   13460:	cmp	r0, #2
   13464:	bne	13954 <__assert_fail@plt+0x28cc>
   13468:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1346c:	tst	r0, #1
   13470:	bne	13e14 <__assert_fail@plt+0x2d8c>
   13474:	mov	r4, #0
   13478:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1347c:	cmp	r0, #0
   13480:	bne	13344 <__assert_fail@plt+0x22bc>
   13484:	b	1361c <__assert_fail@plt+0x2594>
   13488:	mov	r0, #118	; 0x76
   1348c:	b	13608 <__assert_fail@plt+0x2580>
   13490:	mov	r0, #1
   13494:	mov	r5, #39	; 0x27
   13498:	str	r0, [sp, #52]	; 0x34
   1349c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134a0:	cmp	r0, #2
   134a4:	bne	13518 <__assert_fail@plt+0x2490>
   134a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   134ac:	tst	r0, #1
   134b0:	bne	13e14 <__assert_fail@plt+0x2d8c>
   134b4:	ldr	r2, [sp, #48]	; 0x30
   134b8:	clz	r1, sl
   134bc:	mov	r8, #0
   134c0:	lsr	r1, r1, #5
   134c4:	cmp	r2, #0
   134c8:	mov	r0, r2
   134cc:	movwne	r0, #1
   134d0:	orrs	r0, r0, r1
   134d4:	moveq	r2, sl
   134d8:	moveq	sl, r0
   134dc:	cmp	r9, sl
   134e0:	str	r2, [sp, #48]	; 0x30
   134e4:	movcc	r0, #39	; 0x27
   134e8:	strbcc	r0, [r6, r9]
   134ec:	add	r0, r9, #1
   134f0:	cmp	r0, sl
   134f4:	movcc	r1, #92	; 0x5c
   134f8:	strbcc	r1, [r6, r0]
   134fc:	add	r0, r9, #2
   13500:	add	r9, r9, #3
   13504:	cmp	r0, sl
   13508:	movcc	r1, #39	; 0x27
   1350c:	strbcc	r1, [r6, r0]
   13510:	mov	r0, #0
   13514:	str	r0, [fp, #-48]	; 0xffffffd0
   13518:	mov	r4, #1
   1351c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13520:	cmp	r0, #0
   13524:	bne	13344 <__assert_fail@plt+0x22bc>
   13528:	b	1361c <__assert_fail@plt+0x2594>
   1352c:	ldr	r0, [sp, #32]
   13530:	cmp	r0, #1
   13534:	bne	13720 <__assert_fail@plt+0x2698>
   13538:	str	lr, [sp, #84]	; 0x54
   1353c:	bl	10f74 <__ctype_b_loc@plt>
   13540:	ldr	r0, [r0]
   13544:	ldr	ip, [fp, #-84]	; 0xffffffac
   13548:	mov	r1, #1
   1354c:	add	r0, r0, r5, lsl #1
   13550:	ldrb	r0, [r0, #1]
   13554:	ubfx	r4, r0, #6, #1
   13558:	b	13b18 <__assert_fail@plt+0x2a90>
   1355c:	cmp	r7, #0
   13560:	ldrbeq	r0, [ip, #1]
   13564:	cmpeq	r0, #0
   13568:	beq	13584 <__assert_fail@plt+0x24fc>
   1356c:	mvn	lr, #0
   13570:	mov	r8, #0
   13574:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13578:	cmp	r0, #0
   1357c:	bne	13344 <__assert_fail@plt+0x22bc>
   13580:	b	1361c <__assert_fail@plt+0x2594>
   13584:	mov	r1, #1
   13588:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1358c:	cmp	r0, #2
   13590:	bne	135a0 <__assert_fail@plt+0x2518>
   13594:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13598:	tst	r0, #1
   1359c:	bne	13e14 <__assert_fail@plt+0x2d8c>
   135a0:	mov	r4, r1
   135a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   135a8:	cmp	r0, #0
   135ac:	bne	13344 <__assert_fail@plt+0x22bc>
   135b0:	b	1361c <__assert_fail@plt+0x2594>
   135b4:	ldr	r1, [sp, #40]	; 0x28
   135b8:	mov	r8, #0
   135bc:	mov	r0, #92	; 0x5c
   135c0:	cmp	r1, #0
   135c4:	beq	13608 <__assert_fail@plt+0x2580>
   135c8:	mov	r4, #0
   135cc:	cmp	r8, #0
   135d0:	bne	133c4 <__assert_fail@plt+0x233c>
   135d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   135d8:	tst	r2, #1
   135dc:	beq	136c8 <__assert_fail@plt+0x2640>
   135e0:	cmp	r9, sl
   135e4:	movcc	r1, #39	; 0x27
   135e8:	strbcc	r1, [r6, r9]
   135ec:	add	r1, r9, #1
   135f0:	add	r9, r9, #2
   135f4:	cmp	r1, sl
   135f8:	movcc	r2, #39	; 0x27
   135fc:	strbcc	r2, [r6, r1]
   13600:	mov	r2, #0
   13604:	b	136c8 <__assert_fail@plt+0x2640>
   13608:	ldr	r1, [sp, #80]	; 0x50
   1360c:	mov	r4, #0
   13610:	mov	r8, #0
   13614:	tst	r1, #1
   13618:	bne	13658 <__assert_fail@plt+0x25d0>
   1361c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13620:	cmp	r0, #0
   13624:	mov	r0, r5
   13628:	beq	1364c <__assert_fail@plt+0x25c4>
   1362c:	ldr	r1, [fp, #16]
   13630:	ubfx	r0, r5, #5, #3
   13634:	mov	r2, #1
   13638:	ldr	r0, [r1, r0, lsl #2]
   1363c:	and	r1, r5, #31
   13640:	tst	r0, r2, lsl r1
   13644:	mov	r0, r5
   13648:	bne	13658 <__assert_fail@plt+0x25d0>
   1364c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13650:	cmp	r1, #0
   13654:	beq	13ab0 <__assert_fail@plt+0x2a28>
   13658:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1365c:	tst	r1, #1
   13660:	bne	13df4 <__assert_fail@plt+0x2d6c>
   13664:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13668:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1366c:	cmp	r1, #2
   13670:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13674:	movwne	r1, #1
   13678:	orr	r1, r1, r2
   1367c:	tst	r1, #1
   13680:	bne	136b8 <__assert_fail@plt+0x2630>
   13684:	cmp	r9, sl
   13688:	movcc	r1, #39	; 0x27
   1368c:	strbcc	r1, [r6, r9]
   13690:	add	r1, r9, #1
   13694:	cmp	r1, sl
   13698:	movcc	r2, #36	; 0x24
   1369c:	strbcc	r2, [r6, r1]
   136a0:	add	r1, r9, #2
   136a4:	add	r9, r9, #3
   136a8:	cmp	r1, sl
   136ac:	movcc	r2, #39	; 0x27
   136b0:	strbcc	r2, [r6, r1]
   136b4:	mov	r2, #1
   136b8:	cmp	r9, sl
   136bc:	movcc	r1, #92	; 0x5c
   136c0:	strbcc	r1, [r6, r9]
   136c4:	add	r9, r9, #1
   136c8:	cmp	r9, sl
   136cc:	add	r7, r7, #1
   136d0:	strbcc	r0, [r6, r9]
   136d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   136d8:	add	r9, r9, #1
   136dc:	and	r0, r0, r4
   136e0:	mov	r4, r0
   136e4:	cmn	lr, #1
   136e8:	bne	1305c <__assert_fail@plt+0x1fd4>
   136ec:	b	13068 <__assert_fail@plt+0x1fe0>
   136f0:	ldr	r0, [sp, #28]
   136f4:	mov	r4, #0
   136f8:	mov	r8, #0
   136fc:	mov	r5, #0
   13700:	cmp	r0, #0
   13704:	beq	1361c <__assert_fail@plt+0x2594>
   13708:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1370c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13710:	add	r7, r7, #1
   13714:	cmn	lr, #1
   13718:	bne	1305c <__assert_fail@plt+0x1fd4>
   1371c:	b	13068 <__assert_fail@plt+0x1fe0>
   13720:	mov	r0, #0
   13724:	cmn	lr, #1
   13728:	str	r0, [fp, #-36]	; 0xffffffdc
   1372c:	str	r0, [fp, #-40]	; 0xffffffd8
   13730:	bne	13744 <__assert_fail@plt+0x26bc>
   13734:	mov	r0, ip
   13738:	bl	10f8c <strlen@plt>
   1373c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13740:	mov	lr, r0
   13744:	ldr	r0, [sp, #36]	; 0x24
   13748:	str	sl, [sp, #56]	; 0x38
   1374c:	str	lr, [sp, #84]	; 0x54
   13750:	cmp	r0, #0
   13754:	beq	1396c <__assert_fail@plt+0x28e4>
   13758:	add	r0, ip, r7
   1375c:	mov	r4, #1
   13760:	mov	r6, #0
   13764:	sub	sl, fp, #40	; 0x28
   13768:	str	r0, [sp, #20]
   1376c:	str	r6, [sp, #64]	; 0x40
   13770:	add	r6, r6, r7
   13774:	sub	r0, fp, #44	; 0x2c
   13778:	mov	r3, sl
   1377c:	add	r1, ip, r6
   13780:	sub	r2, lr, r6
   13784:	bl	17098 <__assert_fail@plt+0x6010>
   13788:	cmn	r0, #2
   1378c:	beq	13ac8 <__assert_fail@plt+0x2a40>
   13790:	ldr	sl, [sp, #56]	; 0x38
   13794:	cmn	r0, #1
   13798:	beq	13abc <__assert_fail@plt+0x2a34>
   1379c:	cmp	r0, #0
   137a0:	beq	13ac0 <__assert_fail@plt+0x2a38>
   137a4:	cmp	r0, #2
   137a8:	bcc	13868 <__assert_fail@plt+0x27e0>
   137ac:	ldr	r1, [sp, #64]	; 0x40
   137b0:	ldr	r2, [sp, #20]
   137b4:	add	r1, r2, r1
   137b8:	mov	r2, #1
   137bc:	ldrb	r3, [r1, r2]
   137c0:	sub	r3, r3, #91	; 0x5b
   137c4:	cmp	r3, #33	; 0x21
   137c8:	bhi	1385c <__assert_fail@plt+0x27d4>
   137cc:	add	r6, pc, #0
   137d0:	ldr	pc, [r6, r3, lsl #2]
   137d4:	andeq	r3, r1, r0, lsr #28
   137d8:	andeq	r3, r1, r0, lsr #28
   137dc:	andeq	r3, r1, ip, asr r8
   137e0:	andeq	r3, r1, r0, lsr #28
   137e4:	andeq	r3, r1, ip, asr r8
   137e8:	andeq	r3, r1, r0, lsr #28
   137ec:	andeq	r3, r1, ip, asr r8
   137f0:	andeq	r3, r1, ip, asr r8
   137f4:	andeq	r3, r1, ip, asr r8
   137f8:	andeq	r3, r1, ip, asr r8
   137fc:	andeq	r3, r1, ip, asr r8
   13800:	andeq	r3, r1, ip, asr r8
   13804:	andeq	r3, r1, ip, asr r8
   13808:	andeq	r3, r1, ip, asr r8
   1380c:	andeq	r3, r1, ip, asr r8
   13810:	andeq	r3, r1, ip, asr r8
   13814:	andeq	r3, r1, ip, asr r8
   13818:	andeq	r3, r1, ip, asr r8
   1381c:	andeq	r3, r1, ip, asr r8
   13820:	andeq	r3, r1, ip, asr r8
   13824:	andeq	r3, r1, ip, asr r8
   13828:	andeq	r3, r1, ip, asr r8
   1382c:	andeq	r3, r1, ip, asr r8
   13830:	andeq	r3, r1, ip, asr r8
   13834:	andeq	r3, r1, ip, asr r8
   13838:	andeq	r3, r1, ip, asr r8
   1383c:	andeq	r3, r1, ip, asr r8
   13840:	andeq	r3, r1, ip, asr r8
   13844:	andeq	r3, r1, ip, asr r8
   13848:	andeq	r3, r1, ip, asr r8
   1384c:	andeq	r3, r1, ip, asr r8
   13850:	andeq	r3, r1, ip, asr r8
   13854:	andeq	r3, r1, ip, asr r8
   13858:	andeq	r3, r1, r0, lsr #28
   1385c:	add	r2, r2, #1
   13860:	cmp	r2, r0
   13864:	bcc	137bc <__assert_fail@plt+0x2734>
   13868:	ldr	r6, [sp, #64]	; 0x40
   1386c:	add	r6, r0, r6
   13870:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13874:	bl	10ee4 <iswprint@plt>
   13878:	cmp	r0, #0
   1387c:	sub	sl, fp, #40	; 0x28
   13880:	movwne	r0, #1
   13884:	and	r4, r4, r0
   13888:	mov	r0, sl
   1388c:	bl	10e9c <mbsinit@plt>
   13890:	ldr	ip, [fp, #-84]	; 0xffffffac
   13894:	ldr	lr, [sp, #84]	; 0x54
   13898:	cmp	r0, #0
   1389c:	beq	1376c <__assert_fail@plt+0x26e4>
   138a0:	b	13b0c <__assert_fail@plt+0x2a84>
   138a4:	ldr	r0, [sp, #24]
   138a8:	cmp	r0, #0
   138ac:	beq	13954 <__assert_fail@plt+0x28cc>
   138b0:	add	r0, r7, #2
   138b4:	cmp	r0, lr
   138b8:	bcs	13954 <__assert_fail@plt+0x28cc>
   138bc:	add	r1, ip, r7
   138c0:	ldrb	r1, [r1, #1]
   138c4:	cmp	r1, #63	; 0x3f
   138c8:	bne	13954 <__assert_fail@plt+0x28cc>
   138cc:	ldrb	r5, [ip, r0]
   138d0:	sub	r1, r5, #33	; 0x21
   138d4:	cmp	r1, #29
   138d8:	bhi	13954 <__assert_fail@plt+0x28cc>
   138dc:	movw	r3, #20929	; 0x51c1
   138e0:	mov	r2, #1
   138e4:	movt	r3, #14336	; 0x3800
   138e8:	tst	r3, r2, lsl r1
   138ec:	beq	13954 <__assert_fail@plt+0x28cc>
   138f0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   138f4:	tst	r1, #1
   138f8:	bne	13f44 <__assert_fail@plt+0x2ebc>
   138fc:	cmp	r9, sl
   13900:	mov	r7, r0
   13904:	mov	r4, #0
   13908:	movcc	r1, #63	; 0x3f
   1390c:	strbcc	r1, [r6, r9]
   13910:	add	r1, r9, #1
   13914:	cmp	r1, sl
   13918:	movcc	r2, #34	; 0x22
   1391c:	strbcc	r2, [r6, r1]
   13920:	add	r1, r9, #2
   13924:	cmp	r1, sl
   13928:	movcc	r2, #34	; 0x22
   1392c:	strbcc	r2, [r6, r1]
   13930:	add	r1, r9, #3
   13934:	add	r9, r9, #4
   13938:	cmp	r1, sl
   1393c:	movcc	r2, #63	; 0x3f
   13940:	strbcc	r2, [r6, r1]
   13944:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13948:	cmp	r0, #0
   1394c:	bne	13344 <__assert_fail@plt+0x22bc>
   13950:	b	1361c <__assert_fail@plt+0x2594>
   13954:	mov	r5, #63	; 0x3f
   13958:	mov	r4, #0
   1395c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13960:	cmp	r0, #0
   13964:	bne	13344 <__assert_fail@plt+0x22bc>
   13968:	b	1361c <__assert_fail@plt+0x2594>
   1396c:	mov	r4, #1
   13970:	mov	r6, #0
   13974:	sub	sl, fp, #40	; 0x28
   13978:	str	r6, [sp, #64]	; 0x40
   1397c:	add	r6, r6, r7
   13980:	sub	r0, fp, #44	; 0x2c
   13984:	mov	r3, sl
   13988:	add	r1, ip, r6
   1398c:	sub	r2, lr, r6
   13990:	bl	17098 <__assert_fail@plt+0x6010>
   13994:	cmn	r0, #2
   13998:	beq	13ac8 <__assert_fail@plt+0x2a40>
   1399c:	cmn	r0, #1
   139a0:	beq	13abc <__assert_fail@plt+0x2a34>
   139a4:	ldr	r6, [sp, #64]	; 0x40
   139a8:	cmp	r0, #0
   139ac:	beq	13b08 <__assert_fail@plt+0x2a80>
   139b0:	add	r6, r0, r6
   139b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   139b8:	bl	10ee4 <iswprint@plt>
   139bc:	cmp	r0, #0
   139c0:	sub	sl, fp, #40	; 0x28
   139c4:	movwne	r0, #1
   139c8:	and	r4, r4, r0
   139cc:	mov	r0, sl
   139d0:	bl	10e9c <mbsinit@plt>
   139d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   139d8:	ldr	lr, [sp, #84]	; 0x54
   139dc:	cmp	r0, #0
   139e0:	beq	13978 <__assert_fail@plt+0x28f0>
   139e4:	b	13b0c <__assert_fail@plt+0x2a84>
   139e8:	cmp	r9, sl
   139ec:	mov	r2, #1
   139f0:	movcc	r0, #39	; 0x27
   139f4:	strbcc	r0, [r6, r9]
   139f8:	add	r0, r9, #1
   139fc:	cmp	r0, sl
   13a00:	movcc	r1, #36	; 0x24
   13a04:	strbcc	r1, [r6, r0]
   13a08:	add	r0, r9, #2
   13a0c:	cmp	r0, sl
   13a10:	movcc	r1, #39	; 0x27
   13a14:	strbcc	r1, [r6, r0]
   13a18:	add	r0, r9, #3
   13a1c:	cmp	r0, sl
   13a20:	add	r9, r0, #1
   13a24:	str	r2, [fp, #-48]	; 0xffffffd0
   13a28:	movcc	r1, #92	; 0x5c
   13a2c:	strbcc	r1, [r6, r0]
   13a30:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13a34:	cmp	r1, #2
   13a38:	beq	13a98 <__assert_fail@plt+0x2a10>
   13a3c:	add	r1, r7, #1
   13a40:	mov	r4, #0
   13a44:	mov	r8, #1
   13a48:	mov	r5, #48	; 0x30
   13a4c:	cmp	r1, lr
   13a50:	bcs	13338 <__assert_fail@plt+0x22b0>
   13a54:	ldrb	r1, [ip, r1]
   13a58:	sub	r1, r1, #48	; 0x30
   13a5c:	uxtb	r1, r1
   13a60:	cmp	r1, #9
   13a64:	bhi	13338 <__assert_fail@plt+0x22b0>
   13a68:	cmp	r9, sl
   13a6c:	movcc	r1, #48	; 0x30
   13a70:	strbcc	r1, [r6, r9]
   13a74:	add	r1, r0, #2
   13a78:	add	r9, r0, #3
   13a7c:	cmp	r1, sl
   13a80:	movcc	r2, #48	; 0x30
   13a84:	strbcc	r2, [r6, r1]
   13a88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a8c:	cmp	r0, #0
   13a90:	bne	13344 <__assert_fail@plt+0x22bc>
   13a94:	b	1361c <__assert_fail@plt+0x2594>
   13a98:	mov	r0, #48	; 0x30
   13a9c:	mov	r8, #1
   13aa0:	mov	r4, #0
   13aa4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13aa8:	cmp	r1, #0
   13aac:	bne	13658 <__assert_fail@plt+0x25d0>
   13ab0:	cmp	r8, #0
   13ab4:	beq	135d4 <__assert_fail@plt+0x254c>
   13ab8:	b	133c4 <__assert_fail@plt+0x233c>
   13abc:	mov	r4, #0
   13ac0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ac4:	b	13b00 <__assert_fail@plt+0x2a78>
   13ac8:	ldr	r1, [sp, #84]	; 0x54
   13acc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ad0:	mov	r4, #0
   13ad4:	cmp	r6, r1
   13ad8:	bcs	13b00 <__assert_fail@plt+0x2a78>
   13adc:	ldrb	r0, [ip, r6]
   13ae0:	cmp	r0, #0
   13ae4:	beq	13b00 <__assert_fail@plt+0x2a78>
   13ae8:	ldr	r0, [sp, #64]	; 0x40
   13aec:	add	r0, r0, #1
   13af0:	add	r6, r0, r7
   13af4:	str	r0, [sp, #64]	; 0x40
   13af8:	cmp	r6, r1
   13afc:	bcc	13adc <__assert_fail@plt+0x2a54>
   13b00:	ldr	r6, [sp, #64]	; 0x40
   13b04:	b	13b0c <__assert_fail@plt+0x2a84>
   13b08:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b0c:	mov	r1, r6
   13b10:	ldr	r6, [sp, #76]	; 0x4c
   13b14:	ldr	sl, [sp, #56]	; 0x38
   13b18:	ldr	r0, [sp, #44]	; 0x2c
   13b1c:	cmp	r1, #1
   13b20:	orr	r2, r4, r0
   13b24:	mov	r0, r1
   13b28:	bhi	13b48 <__assert_fail@plt+0x2ac0>
   13b2c:	tst	r2, #1
   13b30:	beq	13b48 <__assert_fail@plt+0x2ac0>
   13b34:	ldr	lr, [sp, #84]	; 0x54
   13b38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b3c:	cmp	r0, #0
   13b40:	bne	13344 <__assert_fail@plt+0x22bc>
   13b44:	b	1361c <__assert_fail@plt+0x2594>
   13b48:	str	r2, [sp, #64]	; 0x40
   13b4c:	add	r0, r0, r7
   13b50:	add	r1, r7, #1
   13b54:	ldr	lr, [sp, #84]	; 0x54
   13b58:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13b5c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13b60:	mov	r3, #0
   13b64:	str	r0, [sp, #56]	; 0x38
   13b68:	ldr	r0, [sp, #64]	; 0x40
   13b6c:	tst	r0, #1
   13b70:	bne	13c58 <__assert_fail@plt+0x2bd0>
   13b74:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b78:	tst	r0, #1
   13b7c:	bne	13df8 <__assert_fail@plt+0x2d70>
   13b80:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13b84:	cmp	r7, #2
   13b88:	movwne	r3, #1
   13b8c:	orr	r3, r3, r2
   13b90:	tst	r3, #1
   13b94:	bne	13bcc <__assert_fail@plt+0x2b44>
   13b98:	cmp	r9, sl
   13b9c:	add	r3, r9, #1
   13ba0:	movcc	r2, #39	; 0x27
   13ba4:	strbcc	r2, [r6, r9]
   13ba8:	cmp	r3, sl
   13bac:	movcc	r2, #36	; 0x24
   13bb0:	strbcc	r2, [r6, r3]
   13bb4:	add	r3, r9, #2
   13bb8:	add	r9, r9, #3
   13bbc:	cmp	r3, sl
   13bc0:	movcc	r2, #39	; 0x27
   13bc4:	strbcc	r2, [r6, r3]
   13bc8:	mov	r2, #1
   13bcc:	cmp	r9, sl
   13bd0:	mov	r0, r2
   13bd4:	movcc	r3, #92	; 0x5c
   13bd8:	strbcc	r3, [r6, r9]
   13bdc:	add	r3, r9, #1
   13be0:	cmp	r3, sl
   13be4:	andcc	r7, r5, #192	; 0xc0
   13be8:	movcc	r2, #48	; 0x30
   13bec:	orrcc	r7, r2, r7, lsr #6
   13bf0:	strbcc	r7, [r6, r3]
   13bf4:	add	r3, r9, #2
   13bf8:	add	r9, r9, #3
   13bfc:	cmp	r3, sl
   13c00:	lsrcc	r7, r5, #3
   13c04:	movcc	r2, #6
   13c08:	bficc	r7, r2, #3, #29
   13c0c:	mov	r2, #6
   13c10:	strbcc	r7, [r6, r3]
   13c14:	bfi	r5, r2, #3, #29
   13c18:	mov	r3, #1
   13c1c:	mov	r2, r0
   13c20:	ldr	r0, [sp, #56]	; 0x38
   13c24:	and	r8, r3, #1
   13c28:	cmp	r0, r1
   13c2c:	bhi	13c8c <__assert_fail@plt+0x2c04>
   13c30:	b	13ccc <__assert_fail@plt+0x2c44>
   13c34:	cmp	r9, sl
   13c38:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13c3c:	strbcc	r5, [r6, r9]
   13c40:	add	r9, r9, #1
   13c44:	ldrb	r5, [ip, r1]
   13c48:	add	r1, r1, #1
   13c4c:	ldr	r0, [sp, #64]	; 0x40
   13c50:	tst	r0, #1
   13c54:	beq	13b74 <__assert_fail@plt+0x2aec>
   13c58:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13c5c:	tst	r7, #1
   13c60:	beq	13c74 <__assert_fail@plt+0x2bec>
   13c64:	cmp	r9, sl
   13c68:	movcc	r7, #92	; 0x5c
   13c6c:	strbcc	r7, [r6, r9]
   13c70:	add	r9, r9, #1
   13c74:	mov	r7, #0
   13c78:	str	r7, [fp, #-56]	; 0xffffffc8
   13c7c:	ldr	r0, [sp, #56]	; 0x38
   13c80:	and	r8, r3, #1
   13c84:	cmp	r0, r1
   13c88:	bls	13ccc <__assert_fail@plt+0x2c44>
   13c8c:	cmp	r8, #0
   13c90:	mvn	r7, r2
   13c94:	movwne	r8, #1
   13c98:	orr	r7, r7, r8
   13c9c:	tst	r7, #1
   13ca0:	bne	13c34 <__assert_fail@plt+0x2bac>
   13ca4:	cmp	r9, sl
   13ca8:	movcc	r7, #39	; 0x27
   13cac:	strbcc	r7, [r6, r9]
   13cb0:	add	r7, r9, #1
   13cb4:	add	r9, r9, #2
   13cb8:	cmp	r7, sl
   13cbc:	movcc	r2, #39	; 0x27
   13cc0:	strbcc	r2, [r6, r7]
   13cc4:	mov	r2, #0
   13cc8:	b	13c34 <__assert_fail@plt+0x2bac>
   13ccc:	cmp	r8, #0
   13cd0:	sub	r7, r1, #1
   13cd4:	mov	r0, r5
   13cd8:	str	r2, [fp, #-48]	; 0xffffffd0
   13cdc:	movwne	r8, #1
   13ce0:	cmp	r8, #0
   13ce4:	beq	135d4 <__assert_fail@plt+0x254c>
   13ce8:	b	133c4 <__assert_fail@plt+0x233c>
   13cec:	mov	lr, r7
   13cf0:	b	13cf8 <__assert_fail@plt+0x2c70>
   13cf4:	mvn	lr, #0
   13cf8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13cfc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13d00:	eor	r0, r7, #2
   13d04:	orr	r0, r0, r9
   13d08:	clz	r0, r0
   13d0c:	lsr	r0, r0, #5
   13d10:	tst	r1, r0
   13d14:	bne	13e14 <__assert_fail@plt+0x2d8c>
   13d18:	mov	r0, r1
   13d1c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13d20:	cmp	r7, #2
   13d24:	movwne	r1, #1
   13d28:	orr	r0, r0, r1
   13d2c:	tst	r0, #1
   13d30:	ldreq	r0, [sp, #52]	; 0x34
   13d34:	streq	lr, [sp, #84]	; 0x54
   13d38:	eoreq	r0, r0, #1
   13d3c:	tsteq	r0, #1
   13d40:	bne	13ed8 <__assert_fail@plt+0x2e50>
   13d44:	tst	r4, #1
   13d48:	bne	13e94 <__assert_fail@plt+0x2e0c>
   13d4c:	ldr	r6, [sp, #48]	; 0x30
   13d50:	mov	r8, #0
   13d54:	cmp	r6, #0
   13d58:	beq	13ed0 <__assert_fail@plt+0x2e48>
   13d5c:	ldr	r0, [sp, #80]	; 0x50
   13d60:	mov	r1, #0
   13d64:	cmp	sl, #0
   13d68:	mov	r4, #0
   13d6c:	str	r1, [fp, #-72]	; 0xffffffb8
   13d70:	beq	12c64 <__assert_fail@plt+0x1bdc>
   13d74:	b	13ed8 <__assert_fail@plt+0x2e50>
   13d78:	ldrb	r1, [r0, #3]
   13d7c:	cmp	r1, #56	; 0x38
   13d80:	ldrbeq	r1, [r0, #4]
   13d84:	cmpeq	r1, #48	; 0x30
   13d88:	bne	12e5c <__assert_fail@plt+0x1dd4>
   13d8c:	ldrb	r1, [r0, #5]
   13d90:	cmp	r1, #51	; 0x33
   13d94:	ldrbeq	r1, [r0, #6]
   13d98:	cmpeq	r1, #48	; 0x30
   13d9c:	bne	12e5c <__assert_fail@plt+0x1dd4>
   13da0:	ldrb	r0, [r0, #7]
   13da4:	cmp	r0, #0
   13da8:	movw	r0, #31981	; 0x7ced
   13dac:	movt	r0, #1
   13db0:	str	r0, [sp, #68]	; 0x44
   13db4:	bne	12e5c <__assert_fail@plt+0x1dd4>
   13db8:	b	12e78 <__assert_fail@plt+0x1df0>
   13dbc:	ldrb	r1, [r0, #4]
   13dc0:	cmp	r1, #48	; 0x30
   13dc4:	ldrbeq	r1, [r0, #5]
   13dc8:	cmpeq	r1, #51	; 0x33
   13dcc:	bne	12f40 <__assert_fail@plt+0x1eb8>
   13dd0:	ldrb	r1, [r0, #6]
   13dd4:	cmp	r1, #48	; 0x30
   13dd8:	ldrbeq	r0, [r0, #7]
   13ddc:	cmpeq	r0, #0
   13de0:	bne	12f40 <__assert_fail@plt+0x1eb8>
   13de4:	movw	r0, #31985	; 0x7cf1
   13de8:	movt	r0, #1
   13dec:	str	r0, [sp, #72]	; 0x48
   13df0:	b	12f60 <__assert_fail@plt+0x1ed8>
   13df4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13df8:	ldr	r2, [sp, #80]	; 0x50
   13dfc:	b	13e34 <__assert_fail@plt+0x2dac>
   13e00:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e04:	mov	r2, #1
   13e08:	mov	lr, r4
   13e0c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13e10:	b	13e34 <__assert_fail@plt+0x2dac>
   13e14:	ldr	r2, [sp, #80]	; 0x50
   13e18:	mov	r7, #2
   13e1c:	b	13e34 <__assert_fail@plt+0x2dac>
   13e20:	ldr	r6, [sp, #76]	; 0x4c
   13e24:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e28:	ldr	lr, [sp, #84]	; 0x54
   13e2c:	ldr	r2, [sp, #80]	; 0x50
   13e30:	mov	r7, #2
   13e34:	mov	r0, #0
   13e38:	ldr	r1, [fp, #12]
   13e3c:	tst	r2, #1
   13e40:	mov	r2, r7
   13e44:	mov	r3, lr
   13e48:	str	r0, [sp, #8]
   13e4c:	ldr	r0, [sp, #68]	; 0x44
   13e50:	movwne	r2, #4
   13e54:	cmp	r7, #2
   13e58:	movne	r2, r7
   13e5c:	str	r2, [sp]
   13e60:	mov	r2, ip
   13e64:	bic	r1, r1, #2
   13e68:	str	r0, [sp, #12]
   13e6c:	ldr	r0, [sp, #72]	; 0x48
   13e70:	str	r1, [sp, #4]
   13e74:	mov	r1, sl
   13e78:	str	r0, [sp, #16]
   13e7c:	mov	r0, r6
   13e80:	bl	12be8 <__assert_fail@plt+0x1b60>
   13e84:	mov	r9, r0
   13e88:	mov	r0, r9
   13e8c:	sub	sp, fp, #28
   13e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e94:	mov	r0, #5
   13e98:	ldr	r1, [sp, #48]	; 0x30
   13e9c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13ea0:	ldr	r3, [sp, #84]	; 0x54
   13ea4:	str	r0, [sp]
   13ea8:	ldr	r0, [fp, #12]
   13eac:	str	r0, [sp, #4]
   13eb0:	ldr	r0, [fp, #16]
   13eb4:	str	r0, [sp, #8]
   13eb8:	ldr	r0, [sp, #68]	; 0x44
   13ebc:	str	r0, [sp, #12]
   13ec0:	ldr	r0, [sp, #72]	; 0x48
   13ec4:	str	r0, [sp, #16]
   13ec8:	ldr	r0, [sp, #76]	; 0x4c
   13ecc:	b	13e80 <__assert_fail@plt+0x2df8>
   13ed0:	mov	r0, #0
   13ed4:	str	r0, [fp, #-72]	; 0xffffffb8
   13ed8:	ldr	r1, [sp, #92]	; 0x5c
   13edc:	cmp	r1, #0
   13ee0:	beq	13f20 <__assert_fail@plt+0x2e98>
   13ee4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ee8:	ldr	r2, [sp, #76]	; 0x4c
   13eec:	tst	r0, #1
   13ef0:	bne	13f24 <__assert_fail@plt+0x2e9c>
   13ef4:	ldrb	r0, [r1]
   13ef8:	cmp	r0, #0
   13efc:	beq	13f24 <__assert_fail@plt+0x2e9c>
   13f00:	add	r1, r1, #1
   13f04:	cmp	r9, sl
   13f08:	strbcc	r0, [r2, r9]
   13f0c:	add	r9, r9, #1
   13f10:	ldrb	r0, [r1], #1
   13f14:	cmp	r0, #0
   13f18:	bne	13f04 <__assert_fail@plt+0x2e7c>
   13f1c:	b	13f24 <__assert_fail@plt+0x2e9c>
   13f20:	ldr	r2, [sp, #76]	; 0x4c
   13f24:	cmp	r9, sl
   13f28:	movcc	r0, #0
   13f2c:	strbcc	r0, [r2, r9]
   13f30:	mov	r0, r9
   13f34:	sub	sp, fp, #28
   13f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f3c:	mov	r2, #1
   13f40:	b	13e0c <__assert_fail@plt+0x2d84>
   13f44:	ldr	r2, [sp, #80]	; 0x50
   13f48:	mov	r7, #5
   13f4c:	b	13e34 <__assert_fail@plt+0x2dac>
   13f50:	bl	1107c <abort@plt>
   13f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f58:	add	fp, sp, #28
   13f5c:	sub	sp, sp, #28
   13f60:	movw	r5, #37224	; 0x9168
   13f64:	cmp	r2, #0
   13f68:	mov	r4, r1
   13f6c:	mov	r7, r0
   13f70:	str	r0, [sp, #20]
   13f74:	movt	r5, #2
   13f78:	movne	r5, r2
   13f7c:	bl	10fa4 <__errno_location@plt>
   13f80:	mov	sl, r0
   13f84:	ldm	r5, {r0, r1}
   13f88:	ldr	r2, [r5, #40]	; 0x28
   13f8c:	ldr	r3, [r5, #44]	; 0x2c
   13f90:	add	r9, r5, #8
   13f94:	ldr	r6, [sl]
   13f98:	orr	r8, r1, #1
   13f9c:	mov	r1, #0
   13fa0:	str	r6, [sp, #24]
   13fa4:	stm	sp, {r0, r8, r9}
   13fa8:	str	r2, [sp, #12]
   13fac:	str	r3, [sp, #16]
   13fb0:	mov	r0, #0
   13fb4:	mov	r2, r7
   13fb8:	mov	r3, r4
   13fbc:	mov	r6, r4
   13fc0:	bl	12be8 <__assert_fail@plt+0x1b60>
   13fc4:	add	r7, r0, #1
   13fc8:	mov	r0, r7
   13fcc:	bl	15030 <__assert_fail@plt+0x3fa8>
   13fd0:	mov	r4, r0
   13fd4:	ldr	r0, [r5]
   13fd8:	ldr	r2, [r5, #44]	; 0x2c
   13fdc:	ldr	r1, [r5, #40]	; 0x28
   13fe0:	mov	r3, r6
   13fe4:	stm	sp, {r0, r8, r9}
   13fe8:	str	r2, [sp, #16]
   13fec:	str	r1, [sp, #12]
   13ff0:	mov	r0, r4
   13ff4:	mov	r1, r7
   13ff8:	ldr	r2, [sp, #20]
   13ffc:	bl	12be8 <__assert_fail@plt+0x1b60>
   14000:	ldr	r0, [sp, #24]
   14004:	str	r0, [sl]
   14008:	mov	r0, r4
   1400c:	sub	sp, fp, #28
   14010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14018:	add	fp, sp, #28
   1401c:	sub	sp, sp, #36	; 0x24
   14020:	movw	r8, #37224	; 0x9168
   14024:	cmp	r3, #0
   14028:	mov	r4, r2
   1402c:	str	r2, [sp, #24]
   14030:	mov	r5, r1
   14034:	mov	r6, r0
   14038:	str	r0, [sp, #20]
   1403c:	movt	r8, #2
   14040:	movne	r8, r3
   14044:	bl	10fa4 <__errno_location@plt>
   14048:	str	r0, [sp, #28]
   1404c:	cmp	r4, #0
   14050:	add	sl, r8, #8
   14054:	ldm	r8, {r3, r9}
   14058:	ldr	r7, [r0]
   1405c:	ldr	r1, [r8, #40]	; 0x28
   14060:	ldr	r2, [r8, #44]	; 0x2c
   14064:	mov	r0, #0
   14068:	orreq	r9, r9, #1
   1406c:	str	r7, [sp, #32]
   14070:	mov	r7, r5
   14074:	stm	sp, {r3, r9, sl}
   14078:	str	r1, [sp, #12]
   1407c:	str	r2, [sp, #16]
   14080:	mov	r1, #0
   14084:	mov	r2, r6
   14088:	mov	r3, r5
   1408c:	bl	12be8 <__assert_fail@plt+0x1b60>
   14090:	add	r4, r0, #1
   14094:	mov	r5, r0
   14098:	mov	r0, r4
   1409c:	bl	15030 <__assert_fail@plt+0x3fa8>
   140a0:	mov	r6, r0
   140a4:	ldr	r0, [r8]
   140a8:	ldr	r2, [r8, #44]	; 0x2c
   140ac:	ldr	r1, [r8, #40]	; 0x28
   140b0:	mov	r3, r7
   140b4:	stm	sp, {r0, r9, sl}
   140b8:	str	r2, [sp, #16]
   140bc:	str	r1, [sp, #12]
   140c0:	mov	r0, r6
   140c4:	mov	r1, r4
   140c8:	ldr	r2, [sp, #20]
   140cc:	bl	12be8 <__assert_fail@plt+0x1b60>
   140d0:	ldr	r0, [sp, #24]
   140d4:	ldr	r1, [sp, #32]
   140d8:	ldr	r2, [sp, #28]
   140dc:	cmp	r0, #0
   140e0:	str	r1, [r2]
   140e4:	strne	r5, [r0]
   140e8:	mov	r0, r6
   140ec:	sub	sp, fp, #28
   140f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140f4:	push	{r4, r5, r6, r7, fp, lr}
   140f8:	add	fp, sp, #16
   140fc:	movw	r4, #37152	; 0x9120
   14100:	movt	r4, #2
   14104:	ldrd	r6, [r4]
   14108:	cmp	r7, #2
   1410c:	blt	14138 <__assert_fail@plt+0x30b0>
   14110:	add	r5, r6, #12
   14114:	mov	r7, #0
   14118:	ldr	r0, [r5, r7, lsl #3]
   1411c:	bl	128e0 <__assert_fail@plt+0x1858>
   14120:	ldr	r1, [r4, #4]
   14124:	add	r2, r7, #2
   14128:	add	r0, r7, #1
   1412c:	mov	r7, r0
   14130:	cmp	r2, r1
   14134:	blt	14118 <__assert_fail@plt+0x3090>
   14138:	ldr	r0, [r6, #4]
   1413c:	movw	r5, #37272	; 0x9198
   14140:	movt	r5, #2
   14144:	cmp	r0, r5
   14148:	beq	1415c <__assert_fail@plt+0x30d4>
   1414c:	bl	128e0 <__assert_fail@plt+0x1858>
   14150:	mov	r0, #256	; 0x100
   14154:	str	r0, [r4, #8]
   14158:	str	r5, [r4, #12]
   1415c:	add	r5, r4, #8
   14160:	cmp	r6, r5
   14164:	beq	14174 <__assert_fail@plt+0x30ec>
   14168:	mov	r0, r6
   1416c:	bl	128e0 <__assert_fail@plt+0x1858>
   14170:	str	r5, [r4]
   14174:	mov	r0, #1
   14178:	str	r0, [r4, #4]
   1417c:	pop	{r4, r5, r6, r7, fp, pc}
   14180:	movw	r3, #37224	; 0x9168
   14184:	mvn	r2, #0
   14188:	movt	r3, #2
   1418c:	b	14190 <__assert_fail@plt+0x3108>
   14190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14194:	add	fp, sp, #28
   14198:	sub	sp, sp, #44	; 0x2c
   1419c:	mov	r7, r3
   141a0:	str	r2, [sp, #36]	; 0x24
   141a4:	str	r1, [sp, #32]
   141a8:	mov	r5, r0
   141ac:	bl	10fa4 <__errno_location@plt>
   141b0:	cmp	r5, #0
   141b4:	blt	14318 <__assert_fail@plt+0x3290>
   141b8:	cmn	r5, #-2147483647	; 0x80000001
   141bc:	beq	14318 <__assert_fail@plt+0x3290>
   141c0:	movw	r8, #37152	; 0x9120
   141c4:	mov	r4, r0
   141c8:	movt	r8, #2
   141cc:	ldr	r6, [r8]
   141d0:	ldr	r1, [r8, #4]
   141d4:	ldr	r0, [r0]
   141d8:	str	r4, [sp, #28]
   141dc:	cmp	r1, r5
   141e0:	str	r0, [sp, #24]
   141e4:	ble	141f0 <__assert_fail@plt+0x3168>
   141e8:	mov	sl, r6
   141ec:	b	14254 <__assert_fail@plt+0x31cc>
   141f0:	mov	r0, #8
   141f4:	add	r9, r8, #8
   141f8:	add	r2, r5, #1
   141fc:	str	r1, [fp, #-32]	; 0xffffffe0
   14200:	mvn	r3, #-2147483648	; 0x80000000
   14204:	str	r0, [sp]
   14208:	subs	r0, r6, r9
   1420c:	sub	r2, r2, r1
   14210:	sub	r1, fp, #32
   14214:	movne	r0, r6
   14218:	bl	15230 <__assert_fail@plt+0x41a8>
   1421c:	str	r0, [r8]
   14220:	cmp	r6, r9
   14224:	mov	sl, r0
   14228:	ldrdeq	r0, [r8, #8]
   1422c:	stmeq	sl, {r0, r1}
   14230:	ldr	r1, [r8, #4]
   14234:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14238:	add	r0, sl, r1, lsl #3
   1423c:	sub	r1, r2, r1
   14240:	lsl	r2, r1, #3
   14244:	mov	r1, #0
   14248:	bl	10fbc <memset@plt>
   1424c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14250:	str	r0, [r8, #4]
   14254:	mov	r9, sl
   14258:	ldr	r6, [r9, r5, lsl #3]!
   1425c:	ldr	r4, [r9, #4]!
   14260:	ldm	r7, {r0, r1}
   14264:	ldr	r2, [r7, #40]	; 0x28
   14268:	ldr	r3, [r7, #44]	; 0x2c
   1426c:	orr	r8, r1, #1
   14270:	add	r1, r7, #8
   14274:	stm	sp, {r0, r8}
   14278:	add	r0, sp, #8
   1427c:	str	r1, [sp, #20]
   14280:	stm	r0, {r1, r2, r3}
   14284:	mov	r0, r4
   14288:	mov	r1, r6
   1428c:	ldr	r2, [sp, #32]
   14290:	ldr	r3, [sp, #36]	; 0x24
   14294:	bl	12be8 <__assert_fail@plt+0x1b60>
   14298:	cmp	r6, r0
   1429c:	bhi	14300 <__assert_fail@plt+0x3278>
   142a0:	add	r6, r0, #1
   142a4:	movw	r0, #37272	; 0x9198
   142a8:	movt	r0, #2
   142ac:	str	r6, [sl, r5, lsl #3]
   142b0:	cmp	r4, r0
   142b4:	beq	142c0 <__assert_fail@plt+0x3238>
   142b8:	mov	r0, r4
   142bc:	bl	128e0 <__assert_fail@plt+0x1858>
   142c0:	mov	r0, r6
   142c4:	bl	15030 <__assert_fail@plt+0x3fa8>
   142c8:	str	r0, [r9]
   142cc:	mov	r4, r0
   142d0:	add	r3, sp, #8
   142d4:	ldr	r0, [r7]
   142d8:	ldr	r1, [r7, #40]	; 0x28
   142dc:	ldr	r2, [r7, #44]	; 0x2c
   142e0:	stm	sp, {r0, r8}
   142e4:	ldr	r0, [sp, #20]
   142e8:	stm	r3, {r0, r1, r2}
   142ec:	mov	r0, r4
   142f0:	mov	r1, r6
   142f4:	ldr	r2, [sp, #32]
   142f8:	ldr	r3, [sp, #36]	; 0x24
   142fc:	bl	12be8 <__assert_fail@plt+0x1b60>
   14300:	ldr	r1, [sp, #24]
   14304:	ldr	r0, [sp, #28]
   14308:	str	r1, [r0]
   1430c:	mov	r0, r4
   14310:	sub	sp, fp, #28
   14314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14318:	bl	1107c <abort@plt>
   1431c:	movw	r3, #37224	; 0x9168
   14320:	movt	r3, #2
   14324:	b	14190 <__assert_fail@plt+0x3108>
   14328:	movw	r3, #37224	; 0x9168
   1432c:	mov	r1, r0
   14330:	mov	r0, #0
   14334:	mvn	r2, #0
   14338:	movt	r3, #2
   1433c:	b	14190 <__assert_fail@plt+0x3108>
   14340:	movw	r3, #37224	; 0x9168
   14344:	mov	r2, r1
   14348:	mov	r1, r0
   1434c:	mov	r0, #0
   14350:	movt	r3, #2
   14354:	b	14190 <__assert_fail@plt+0x3108>
   14358:	push	{fp, lr}
   1435c:	mov	fp, sp
   14360:	sub	sp, sp, #48	; 0x30
   14364:	vmov.i32	q8, #0	; 0x00000000
   14368:	mov	ip, #32
   1436c:	mov	r3, sp
   14370:	mov	lr, r2
   14374:	cmp	r1, #10
   14378:	add	r2, r3, #16
   1437c:	vst1.64	{d16-d17}, [r3], ip
   14380:	vst1.64	{d16-d17}, [r3]
   14384:	vst1.64	{d16-d17}, [r2]
   14388:	beq	143a8 <__assert_fail@plt+0x3320>
   1438c:	str	r1, [sp]
   14390:	mov	r3, sp
   14394:	mov	r1, lr
   14398:	mvn	r2, #0
   1439c:	bl	14190 <__assert_fail@plt+0x3108>
   143a0:	mov	sp, fp
   143a4:	pop	{fp, pc}
   143a8:	bl	1107c <abort@plt>
   143ac:	push	{r4, sl, fp, lr}
   143b0:	add	fp, sp, #8
   143b4:	sub	sp, sp, #48	; 0x30
   143b8:	mov	ip, r3
   143bc:	mov	r3, sp
   143c0:	vmov.i32	q8, #0	; 0x00000000
   143c4:	mov	lr, #32
   143c8:	cmp	r1, #10
   143cc:	add	r4, r3, #16
   143d0:	vst1.64	{d16-d17}, [r3], lr
   143d4:	vst1.64	{d16-d17}, [r3]
   143d8:	vst1.64	{d16-d17}, [r4]
   143dc:	beq	143fc <__assert_fail@plt+0x3374>
   143e0:	str	r1, [sp]
   143e4:	mov	r1, r2
   143e8:	mov	r3, sp
   143ec:	mov	r2, ip
   143f0:	bl	14190 <__assert_fail@plt+0x3108>
   143f4:	sub	sp, fp, #8
   143f8:	pop	{r4, sl, fp, pc}
   143fc:	bl	1107c <abort@plt>
   14400:	push	{fp, lr}
   14404:	mov	fp, sp
   14408:	sub	sp, sp, #48	; 0x30
   1440c:	mov	r3, sp
   14410:	vmov.i32	q8, #0	; 0x00000000
   14414:	mov	ip, #32
   14418:	cmp	r0, #10
   1441c:	add	r2, r3, #16
   14420:	vst1.64	{d16-d17}, [r3], ip
   14424:	vst1.64	{d16-d17}, [r3]
   14428:	vst1.64	{d16-d17}, [r2]
   1442c:	beq	1444c <__assert_fail@plt+0x33c4>
   14430:	str	r0, [sp]
   14434:	mov	r3, sp
   14438:	mov	r0, #0
   1443c:	mvn	r2, #0
   14440:	bl	14190 <__assert_fail@plt+0x3108>
   14444:	mov	sp, fp
   14448:	pop	{fp, pc}
   1444c:	bl	1107c <abort@plt>
   14450:	push	{fp, lr}
   14454:	mov	fp, sp
   14458:	sub	sp, sp, #48	; 0x30
   1445c:	mov	r3, sp
   14460:	vmov.i32	q8, #0	; 0x00000000
   14464:	mov	ip, #32
   14468:	cmp	r0, #10
   1446c:	add	lr, r3, #16
   14470:	vst1.64	{d16-d17}, [r3], ip
   14474:	vst1.64	{d16-d17}, [r3]
   14478:	vst1.64	{d16-d17}, [lr]
   1447c:	beq	14498 <__assert_fail@plt+0x3410>
   14480:	str	r0, [sp]
   14484:	mov	r3, sp
   14488:	mov	r0, #0
   1448c:	bl	14190 <__assert_fail@plt+0x3108>
   14490:	mov	sp, fp
   14494:	pop	{fp, pc}
   14498:	bl	1107c <abort@plt>
   1449c:	push	{r4, sl, fp, lr}
   144a0:	add	fp, sp, #8
   144a4:	sub	sp, sp, #48	; 0x30
   144a8:	mov	lr, r0
   144ac:	movw	r0, #37224	; 0x9168
   144b0:	mov	r3, #32
   144b4:	mov	ip, r1
   144b8:	mov	r4, #1
   144bc:	movt	r0, #2
   144c0:	add	r1, r0, #16
   144c4:	vld1.64	{d16-d17}, [r0], r3
   144c8:	mov	r3, sp
   144cc:	vld1.64	{d18-d19}, [r1]
   144d0:	add	r1, r3, #16
   144d4:	vld1.64	{d20-d21}, [r0]
   144d8:	add	r0, r3, #32
   144dc:	vst1.64	{d18-d19}, [r1]
   144e0:	mov	r1, r3
   144e4:	vst1.64	{d20-d21}, [r0]
   144e8:	mov	r0, #28
   144ec:	and	r0, r0, r2, lsr #3
   144f0:	and	r2, r2, #31
   144f4:	vst1.64	{d16-d17}, [r1], r0
   144f8:	ldr	r0, [r1, #8]
   144fc:	bic	r4, r4, r0, lsr r2
   14500:	eor	r0, r0, r4, lsl r2
   14504:	mov	r2, ip
   14508:	str	r0, [r1, #8]
   1450c:	mov	r0, #0
   14510:	mov	r1, lr
   14514:	bl	14190 <__assert_fail@plt+0x3108>
   14518:	sub	sp, fp, #8
   1451c:	pop	{r4, sl, fp, pc}
   14520:	push	{fp, lr}
   14524:	mov	fp, sp
   14528:	sub	sp, sp, #48	; 0x30
   1452c:	mov	ip, r0
   14530:	movw	r0, #37224	; 0x9168
   14534:	mov	r3, #32
   14538:	movt	r0, #2
   1453c:	add	r2, r0, #16
   14540:	vld1.64	{d16-d17}, [r0], r3
   14544:	mov	r3, sp
   14548:	vld1.64	{d18-d19}, [r2]
   1454c:	add	r2, r3, #16
   14550:	vld1.64	{d20-d21}, [r0]
   14554:	add	r0, r3, #32
   14558:	vst1.64	{d18-d19}, [r2]
   1455c:	mov	r2, r3
   14560:	vst1.64	{d20-d21}, [r0]
   14564:	mov	r0, #28
   14568:	and	r0, r0, r1, lsr #3
   1456c:	and	r1, r1, #31
   14570:	vst1.64	{d16-d17}, [r2], r0
   14574:	mov	r0, #1
   14578:	ldr	lr, [r2, #8]
   1457c:	bic	r0, r0, lr, lsr r1
   14580:	eor	r0, lr, r0, lsl r1
   14584:	mov	r1, ip
   14588:	str	r0, [r2, #8]
   1458c:	mov	r0, #0
   14590:	mvn	r2, #0
   14594:	bl	14190 <__assert_fail@plt+0x3108>
   14598:	mov	sp, fp
   1459c:	pop	{fp, pc}
   145a0:	push	{fp, lr}
   145a4:	mov	fp, sp
   145a8:	sub	sp, sp, #48	; 0x30
   145ac:	movw	r2, #37224	; 0x9168
   145b0:	mov	r3, #32
   145b4:	mov	r1, r0
   145b8:	movt	r2, #2
   145bc:	add	r0, r2, #16
   145c0:	vld1.64	{d16-d17}, [r2], r3
   145c4:	mov	r3, sp
   145c8:	vld1.64	{d18-d19}, [r0]
   145cc:	add	r0, r3, #16
   145d0:	vld1.64	{d20-d21}, [r2]
   145d4:	mov	r2, r3
   145d8:	vst1.64	{d18-d19}, [r0]
   145dc:	add	r0, r3, #32
   145e0:	vst1.64	{d20-d21}, [r0]
   145e4:	mov	r0, #12
   145e8:	vst1.64	{d16-d17}, [r2], r0
   145ec:	ldr	r0, [r2]
   145f0:	orr	r0, r0, #67108864	; 0x4000000
   145f4:	str	r0, [r2]
   145f8:	mov	r0, #0
   145fc:	mvn	r2, #0
   14600:	bl	14190 <__assert_fail@plt+0x3108>
   14604:	mov	sp, fp
   14608:	pop	{fp, pc}
   1460c:	push	{fp, lr}
   14610:	mov	fp, sp
   14614:	sub	sp, sp, #48	; 0x30
   14618:	mov	ip, r1
   1461c:	mov	r1, r0
   14620:	movw	r0, #37224	; 0x9168
   14624:	mov	r3, #32
   14628:	movt	r0, #2
   1462c:	add	r2, r0, #16
   14630:	vld1.64	{d16-d17}, [r0], r3
   14634:	mov	r3, sp
   14638:	vld1.64	{d18-d19}, [r2]
   1463c:	add	r2, r3, #16
   14640:	vld1.64	{d20-d21}, [r0]
   14644:	add	r0, r3, #32
   14648:	vst1.64	{d18-d19}, [r2]
   1464c:	mov	r2, r3
   14650:	vst1.64	{d20-d21}, [r0]
   14654:	mov	r0, #12
   14658:	vst1.64	{d16-d17}, [r2], r0
   1465c:	ldr	r0, [r2]
   14660:	orr	r0, r0, #67108864	; 0x4000000
   14664:	str	r0, [r2]
   14668:	mov	r0, #0
   1466c:	mov	r2, ip
   14670:	bl	14190 <__assert_fail@plt+0x3108>
   14674:	mov	sp, fp
   14678:	pop	{fp, pc}
   1467c:	push	{r4, sl, fp, lr}
   14680:	add	fp, sp, #8
   14684:	sub	sp, sp, #96	; 0x60
   14688:	mov	ip, r2
   1468c:	mov	r2, sp
   14690:	vmov.i32	q8, #0	; 0x00000000
   14694:	mov	r4, #28
   14698:	cmp	r1, #10
   1469c:	mov	r3, r2
   146a0:	add	lr, r2, #16
   146a4:	vst1.64	{d16-d17}, [r3], r4
   146a8:	vst1.64	{d16-d17}, [lr]
   146ac:	vst1.32	{d16-d17}, [r3]
   146b0:	beq	14700 <__assert_fail@plt+0x3678>
   146b4:	vld1.64	{d16-d17}, [r2], r4
   146b8:	vld1.64	{d18-d19}, [lr]
   146bc:	add	r3, sp, #48	; 0x30
   146c0:	add	r4, r3, #4
   146c4:	vld1.32	{d20-d21}, [r2]
   146c8:	add	r2, r3, #20
   146cc:	vst1.32	{d16-d17}, [r4]
   146d0:	vst1.32	{d18-d19}, [r2]
   146d4:	add	r2, r3, #32
   146d8:	vst1.32	{d20-d21}, [r2]
   146dc:	str	r1, [sp, #48]	; 0x30
   146e0:	mvn	r2, #0
   146e4:	ldr	r1, [sp, #60]	; 0x3c
   146e8:	orr	r1, r1, #67108864	; 0x4000000
   146ec:	str	r1, [sp, #60]	; 0x3c
   146f0:	mov	r1, ip
   146f4:	bl	14190 <__assert_fail@plt+0x3108>
   146f8:	sub	sp, fp, #8
   146fc:	pop	{r4, sl, fp, pc}
   14700:	bl	1107c <abort@plt>
   14704:	push	{r4, r5, fp, lr}
   14708:	add	fp, sp, #8
   1470c:	sub	sp, sp, #48	; 0x30
   14710:	mov	ip, r3
   14714:	movw	r3, #37224	; 0x9168
   14718:	mov	lr, #32
   1471c:	cmp	r1, #0
   14720:	mov	r5, sp
   14724:	movt	r3, #2
   14728:	cmpne	r2, #0
   1472c:	add	r4, r3, #16
   14730:	vld1.64	{d16-d17}, [r3], lr
   14734:	vld1.64	{d18-d19}, [r4]
   14738:	add	r4, r5, #16
   1473c:	vld1.64	{d20-d21}, [r3]
   14740:	vst1.64	{d16-d17}, [r5], lr
   14744:	mov	r3, #10
   14748:	vst1.64	{d18-d19}, [r4]
   1474c:	vst1.64	{d20-d21}, [r5]
   14750:	str	r3, [sp]
   14754:	bne	1475c <__assert_fail@plt+0x36d4>
   14758:	bl	1107c <abort@plt>
   1475c:	str	r2, [sp, #44]	; 0x2c
   14760:	str	r1, [sp, #40]	; 0x28
   14764:	mov	r3, sp
   14768:	mov	r1, ip
   1476c:	mvn	r2, #0
   14770:	bl	14190 <__assert_fail@plt+0x3108>
   14774:	sub	sp, fp, #8
   14778:	pop	{r4, r5, fp, pc}
   1477c:	push	{r4, r5, fp, lr}
   14780:	add	fp, sp, #8
   14784:	sub	sp, sp, #48	; 0x30
   14788:	mov	lr, r3
   1478c:	movw	r3, #37224	; 0x9168
   14790:	mov	ip, #32
   14794:	cmp	r1, #0
   14798:	mov	r5, sp
   1479c:	movt	r3, #2
   147a0:	cmpne	r2, #0
   147a4:	add	r4, r3, #16
   147a8:	vld1.64	{d16-d17}, [r3], ip
   147ac:	vld1.64	{d18-d19}, [r4]
   147b0:	add	r4, r5, #16
   147b4:	vld1.64	{d20-d21}, [r3]
   147b8:	vst1.64	{d16-d17}, [r5], ip
   147bc:	mov	r3, #10
   147c0:	vst1.64	{d18-d19}, [r4]
   147c4:	vst1.64	{d20-d21}, [r5]
   147c8:	str	r3, [sp]
   147cc:	bne	147d4 <__assert_fail@plt+0x374c>
   147d0:	bl	1107c <abort@plt>
   147d4:	ldr	ip, [fp, #8]
   147d8:	str	r2, [sp, #44]	; 0x2c
   147dc:	str	r1, [sp, #40]	; 0x28
   147e0:	mov	r3, sp
   147e4:	mov	r1, lr
   147e8:	mov	r2, ip
   147ec:	bl	14190 <__assert_fail@plt+0x3108>
   147f0:	sub	sp, fp, #8
   147f4:	pop	{r4, r5, fp, pc}
   147f8:	push	{r4, sl, fp, lr}
   147fc:	add	fp, sp, #8
   14800:	sub	sp, sp, #48	; 0x30
   14804:	mov	ip, r2
   14808:	movw	r2, #37224	; 0x9168
   1480c:	mov	lr, #32
   14810:	cmp	r0, #0
   14814:	mov	r4, sp
   14818:	movt	r2, #2
   1481c:	cmpne	r1, #0
   14820:	add	r3, r2, #16
   14824:	vld1.64	{d16-d17}, [r2], lr
   14828:	vld1.64	{d18-d19}, [r3]
   1482c:	add	r3, r4, #16
   14830:	vld1.64	{d20-d21}, [r2]
   14834:	vst1.64	{d16-d17}, [r4], lr
   14838:	mov	r2, #10
   1483c:	vst1.64	{d18-d19}, [r3]
   14840:	vst1.64	{d20-d21}, [r4]
   14844:	str	r2, [sp]
   14848:	bne	14850 <__assert_fail@plt+0x37c8>
   1484c:	bl	1107c <abort@plt>
   14850:	str	r1, [sp, #44]	; 0x2c
   14854:	str	r0, [sp, #40]	; 0x28
   14858:	mov	r3, sp
   1485c:	mov	r0, #0
   14860:	mov	r1, ip
   14864:	mvn	r2, #0
   14868:	bl	14190 <__assert_fail@plt+0x3108>
   1486c:	sub	sp, fp, #8
   14870:	pop	{r4, sl, fp, pc}
   14874:	push	{r4, r5, fp, lr}
   14878:	add	fp, sp, #8
   1487c:	sub	sp, sp, #48	; 0x30
   14880:	mov	lr, r2
   14884:	movw	r2, #37224	; 0x9168
   14888:	mov	ip, r3
   1488c:	mov	r3, #32
   14890:	cmp	r0, #0
   14894:	mov	r5, sp
   14898:	movt	r2, #2
   1489c:	cmpne	r1, #0
   148a0:	add	r4, r2, #16
   148a4:	vld1.64	{d16-d17}, [r2], r3
   148a8:	vld1.64	{d18-d19}, [r4]
   148ac:	add	r4, r5, #16
   148b0:	vld1.64	{d20-d21}, [r2]
   148b4:	vst1.64	{d16-d17}, [r5], r3
   148b8:	mov	r2, #10
   148bc:	vst1.64	{d18-d19}, [r4]
   148c0:	vst1.64	{d20-d21}, [r5]
   148c4:	str	r2, [sp]
   148c8:	bne	148d0 <__assert_fail@plt+0x3848>
   148cc:	bl	1107c <abort@plt>
   148d0:	str	r1, [sp, #44]	; 0x2c
   148d4:	str	r0, [sp, #40]	; 0x28
   148d8:	mov	r3, sp
   148dc:	mov	r0, #0
   148e0:	mov	r1, lr
   148e4:	mov	r2, ip
   148e8:	bl	14190 <__assert_fail@plt+0x3108>
   148ec:	sub	sp, fp, #8
   148f0:	pop	{r4, r5, fp, pc}
   148f4:	movw	r3, #37104	; 0x90f0
   148f8:	movt	r3, #2
   148fc:	b	14190 <__assert_fail@plt+0x3108>
   14900:	movw	r3, #37104	; 0x90f0
   14904:	mov	r2, r1
   14908:	mov	r1, r0
   1490c:	mov	r0, #0
   14910:	movt	r3, #2
   14914:	b	14190 <__assert_fail@plt+0x3108>
   14918:	movw	r3, #37104	; 0x90f0
   1491c:	mvn	r2, #0
   14920:	movt	r3, #2
   14924:	b	14190 <__assert_fail@plt+0x3108>
   14928:	movw	r3, #37104	; 0x90f0
   1492c:	mov	r1, r0
   14930:	mov	r0, #0
   14934:	mvn	r2, #0
   14938:	movt	r3, #2
   1493c:	b	14190 <__assert_fail@plt+0x3108>
   14940:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14944:	add	fp, sp, #24
   14948:	sub	sp, sp, #32
   1494c:	ldr	r6, [fp, #12]
   14950:	ldr	r7, [fp, #8]
   14954:	mov	r4, r2
   14958:	mov	r8, r0
   1495c:	cmp	r1, #0
   14960:	beq	14988 <__assert_fail@plt+0x3900>
   14964:	movw	r2, #32072	; 0x7d48
   14968:	mov	r5, r1
   1496c:	str	r3, [sp, #4]
   14970:	str	r4, [sp]
   14974:	mov	r0, r8
   14978:	mov	r1, #1
   1497c:	movt	r2, #1
   14980:	mov	r3, r5
   14984:	b	149a0 <__assert_fail@plt+0x3918>
   14988:	movw	r2, #32084	; 0x7d54
   1498c:	str	r3, [sp]
   14990:	mov	r0, r8
   14994:	mov	r1, #1
   14998:	mov	r3, r4
   1499c:	movt	r2, #1
   149a0:	bl	10fe0 <__fprintf_chk@plt>
   149a4:	movw	r1, #32091	; 0x7d5b
   149a8:	mov	r0, #0
   149ac:	mov	r2, #5
   149b0:	movt	r1, #1
   149b4:	bl	10ec0 <dcgettext@plt>
   149b8:	movw	r2, #32809	; 0x8029
   149bc:	mov	r3, r0
   149c0:	movw	r0, #2022	; 0x7e6
   149c4:	mov	r1, #1
   149c8:	str	r0, [sp]
   149cc:	movt	r2, #1
   149d0:	mov	r0, r8
   149d4:	bl	10fe0 <__fprintf_chk@plt>
   149d8:	movw	r4, #31263	; 0x7a1f
   149dc:	mov	r1, r8
   149e0:	movt	r4, #1
   149e4:	mov	r0, r4
   149e8:	bl	10e30 <fputs_unlocked@plt>
   149ec:	movw	r1, #32095	; 0x7d5f
   149f0:	mov	r0, #0
   149f4:	mov	r2, #5
   149f8:	movt	r1, #1
   149fc:	bl	10ec0 <dcgettext@plt>
   14a00:	movw	r3, #32266	; 0x7e0a
   14a04:	mov	r2, r0
   14a08:	mov	r0, r8
   14a0c:	mov	r1, #1
   14a10:	movt	r3, #1
   14a14:	bl	10fe0 <__fprintf_chk@plt>
   14a18:	mov	r0, r4
   14a1c:	mov	r1, r8
   14a20:	bl	10e30 <fputs_unlocked@plt>
   14a24:	cmp	r6, #9
   14a28:	bhi	14a64 <__assert_fail@plt+0x39dc>
   14a2c:	add	r0, pc, #0
   14a30:	ldr	pc, [r0, r6, lsl #2]
   14a34:	andeq	r4, r1, ip, asr sl
   14a38:	andeq	r4, r1, r0, ror sl
   14a3c:	andeq	r4, r1, r0, lsr #21
   14a40:	andeq	r4, r1, r8, asr #21
   14a44:	strdeq	r4, [r1], -r0
   14a48:	andeq	r4, r1, r8, lsl fp
   14a4c:	andeq	r4, r1, r0, asr #22
   14a50:	andeq	r4, r1, r8, ror fp
   14a54:	andeq	r4, r1, r0, lsr #24
   14a58:	andeq	r4, r1, r8, asr #23
   14a5c:	sub	sp, fp, #24
   14a60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a64:	movw	r1, #32619	; 0x7f6b
   14a68:	movt	r1, #1
   14a6c:	b	14bd0 <__assert_fail@plt+0x3b48>
   14a70:	movw	r1, #32300	; 0x7e2c
   14a74:	mov	r0, #0
   14a78:	mov	r2, #5
   14a7c:	movt	r1, #1
   14a80:	bl	10ec0 <dcgettext@plt>
   14a84:	ldr	r3, [r7]
   14a88:	mov	r2, r0
   14a8c:	mov	r0, r8
   14a90:	mov	r1, #1
   14a94:	sub	sp, fp, #24
   14a98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a9c:	b	10fe0 <__fprintf_chk@plt>
   14aa0:	movw	r1, #32316	; 0x7e3c
   14aa4:	mov	r0, #0
   14aa8:	mov	r2, #5
   14aac:	movt	r1, #1
   14ab0:	bl	10ec0 <dcgettext@plt>
   14ab4:	mov	r2, r0
   14ab8:	ldr	r3, [r7]
   14abc:	ldr	r0, [r7, #4]
   14ac0:	str	r0, [sp]
   14ac4:	b	14bb4 <__assert_fail@plt+0x3b2c>
   14ac8:	movw	r1, #32339	; 0x7e53
   14acc:	mov	r0, #0
   14ad0:	mov	r2, #5
   14ad4:	movt	r1, #1
   14ad8:	bl	10ec0 <dcgettext@plt>
   14adc:	ldr	r3, [r7]
   14ae0:	mov	r2, r0
   14ae4:	ldmib	r7, {r0, r1}
   14ae8:	stm	sp, {r0, r1}
   14aec:	b	14bb4 <__assert_fail@plt+0x3b2c>
   14af0:	movw	r1, #32367	; 0x7e6f
   14af4:	mov	r0, #0
   14af8:	mov	r2, #5
   14afc:	movt	r1, #1
   14b00:	bl	10ec0 <dcgettext@plt>
   14b04:	ldr	r3, [r7]
   14b08:	mov	r2, r0
   14b0c:	ldmib	r7, {r0, r1, r7}
   14b10:	stm	sp, {r0, r1, r7}
   14b14:	b	14bb4 <__assert_fail@plt+0x3b2c>
   14b18:	movw	r1, #32399	; 0x7e8f
   14b1c:	mov	r0, #0
   14b20:	mov	r2, #5
   14b24:	movt	r1, #1
   14b28:	bl	10ec0 <dcgettext@plt>
   14b2c:	ldr	r3, [r7]
   14b30:	mov	r2, r0
   14b34:	ldmib	r7, {r0, r1, r6, r7}
   14b38:	stm	sp, {r0, r1, r6, r7}
   14b3c:	b	14bb4 <__assert_fail@plt+0x3b2c>
   14b40:	movw	r1, #32435	; 0x7eb3
   14b44:	mov	r0, #0
   14b48:	mov	r2, #5
   14b4c:	movt	r1, #1
   14b50:	bl	10ec0 <dcgettext@plt>
   14b54:	ldr	r3, [r7]
   14b58:	mov	r2, r0
   14b5c:	ldmib	r7, {r0, r1, r6}
   14b60:	ldr	r5, [r7, #16]
   14b64:	ldr	r7, [r7, #20]
   14b68:	stm	sp, {r0, r1, r6}
   14b6c:	str	r5, [sp, #12]
   14b70:	str	r7, [sp, #16]
   14b74:	b	14bb4 <__assert_fail@plt+0x3b2c>
   14b78:	movw	r1, #32475	; 0x7edb
   14b7c:	mov	r0, #0
   14b80:	mov	r2, #5
   14b84:	movt	r1, #1
   14b88:	bl	10ec0 <dcgettext@plt>
   14b8c:	ldr	r3, [r7]
   14b90:	mov	r2, r0
   14b94:	ldmib	r7, {r0, r1, r6}
   14b98:	ldr	r5, [r7, #16]
   14b9c:	ldr	r4, [r7, #20]
   14ba0:	ldr	r7, [r7, #24]
   14ba4:	stm	sp, {r0, r1, r6}
   14ba8:	str	r5, [sp, #12]
   14bac:	str	r4, [sp, #16]
   14bb0:	str	r7, [sp, #20]
   14bb4:	mov	r0, r8
   14bb8:	mov	r1, #1
   14bbc:	bl	10fe0 <__fprintf_chk@plt>
   14bc0:	sub	sp, fp, #24
   14bc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bc8:	movw	r1, #32567	; 0x7f37
   14bcc:	movt	r1, #1
   14bd0:	mov	r0, #0
   14bd4:	mov	r2, #5
   14bd8:	bl	10ec0 <dcgettext@plt>
   14bdc:	mov	ip, r0
   14be0:	ldr	r3, [r7]
   14be4:	ldr	r0, [r7, #4]
   14be8:	ldr	r1, [r7, #8]
   14bec:	ldr	r6, [r7, #12]
   14bf0:	ldr	r5, [r7, #16]
   14bf4:	ldr	r4, [r7, #20]
   14bf8:	ldr	r2, [r7, #24]
   14bfc:	ldr	lr, [r7, #28]
   14c00:	ldr	r7, [r7, #32]
   14c04:	stm	sp, {r0, r1, r6}
   14c08:	str	r5, [sp, #12]
   14c0c:	str	r4, [sp, #16]
   14c10:	str	r2, [sp, #20]
   14c14:	str	lr, [sp, #24]
   14c18:	str	r7, [sp, #28]
   14c1c:	b	14c64 <__assert_fail@plt+0x3bdc>
   14c20:	movw	r1, #32519	; 0x7f07
   14c24:	mov	r0, #0
   14c28:	mov	r2, #5
   14c2c:	movt	r1, #1
   14c30:	bl	10ec0 <dcgettext@plt>
   14c34:	mov	ip, r0
   14c38:	ldr	r3, [r7]
   14c3c:	ldmib	r7, {r0, r1, r6}
   14c40:	ldr	r5, [r7, #16]
   14c44:	ldr	r4, [r7, #20]
   14c48:	ldr	r2, [r7, #24]
   14c4c:	ldr	r7, [r7, #28]
   14c50:	stm	sp, {r0, r1, r6}
   14c54:	str	r5, [sp, #12]
   14c58:	str	r4, [sp, #16]
   14c5c:	str	r2, [sp, #20]
   14c60:	str	r7, [sp, #24]
   14c64:	mov	r0, r8
   14c68:	mov	r1, #1
   14c6c:	mov	r2, ip
   14c70:	bl	10fe0 <__fprintf_chk@plt>
   14c74:	sub	sp, fp, #24
   14c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c7c:	push	{r4, sl, fp, lr}
   14c80:	add	fp, sp, #8
   14c84:	sub	sp, sp, #8
   14c88:	ldr	ip, [fp, #8]
   14c8c:	mov	lr, #0
   14c90:	ldr	r4, [ip, lr, lsl #2]
   14c94:	add	lr, lr, #1
   14c98:	cmp	r4, #0
   14c9c:	bne	14c90 <__assert_fail@plt+0x3c08>
   14ca0:	sub	r4, lr, #1
   14ca4:	str	ip, [sp]
   14ca8:	str	r4, [sp, #4]
   14cac:	bl	14940 <__assert_fail@plt+0x38b8>
   14cb0:	sub	sp, fp, #8
   14cb4:	pop	{r4, sl, fp, pc}
   14cb8:	push	{fp, lr}
   14cbc:	mov	fp, sp
   14cc0:	sub	sp, sp, #48	; 0x30
   14cc4:	ldr	ip, [fp, #8]
   14cc8:	ldr	lr, [ip]
   14ccc:	cmp	lr, #0
   14cd0:	str	lr, [sp, #8]
   14cd4:	beq	14d70 <__assert_fail@plt+0x3ce8>
   14cd8:	ldr	lr, [ip, #4]
   14cdc:	cmp	lr, #0
   14ce0:	str	lr, [sp, #12]
   14ce4:	beq	14d78 <__assert_fail@plt+0x3cf0>
   14ce8:	ldr	lr, [ip, #8]
   14cec:	cmp	lr, #0
   14cf0:	str	lr, [sp, #16]
   14cf4:	beq	14d80 <__assert_fail@plt+0x3cf8>
   14cf8:	ldr	lr, [ip, #12]
   14cfc:	cmp	lr, #0
   14d00:	str	lr, [sp, #20]
   14d04:	beq	14d88 <__assert_fail@plt+0x3d00>
   14d08:	ldr	lr, [ip, #16]
   14d0c:	cmp	lr, #0
   14d10:	str	lr, [sp, #24]
   14d14:	beq	14d90 <__assert_fail@plt+0x3d08>
   14d18:	ldr	lr, [ip, #20]
   14d1c:	cmp	lr, #0
   14d20:	str	lr, [sp, #28]
   14d24:	beq	14d98 <__assert_fail@plt+0x3d10>
   14d28:	ldr	lr, [ip, #24]
   14d2c:	cmp	lr, #0
   14d30:	str	lr, [sp, #32]
   14d34:	beq	14da0 <__assert_fail@plt+0x3d18>
   14d38:	ldr	lr, [ip, #28]
   14d3c:	cmp	lr, #0
   14d40:	str	lr, [sp, #36]	; 0x24
   14d44:	beq	14da8 <__assert_fail@plt+0x3d20>
   14d48:	ldr	lr, [ip, #32]
   14d4c:	cmp	lr, #0
   14d50:	str	lr, [sp, #40]	; 0x28
   14d54:	beq	14db0 <__assert_fail@plt+0x3d28>
   14d58:	ldr	lr, [ip, #36]	; 0x24
   14d5c:	mov	ip, #10
   14d60:	cmp	lr, #0
   14d64:	str	lr, [sp, #44]	; 0x2c
   14d68:	movweq	ip, #9
   14d6c:	b	14db4 <__assert_fail@plt+0x3d2c>
   14d70:	mov	ip, #0
   14d74:	b	14db4 <__assert_fail@plt+0x3d2c>
   14d78:	mov	ip, #1
   14d7c:	b	14db4 <__assert_fail@plt+0x3d2c>
   14d80:	mov	ip, #2
   14d84:	b	14db4 <__assert_fail@plt+0x3d2c>
   14d88:	mov	ip, #3
   14d8c:	b	14db4 <__assert_fail@plt+0x3d2c>
   14d90:	mov	ip, #4
   14d94:	b	14db4 <__assert_fail@plt+0x3d2c>
   14d98:	mov	ip, #5
   14d9c:	b	14db4 <__assert_fail@plt+0x3d2c>
   14da0:	mov	ip, #6
   14da4:	b	14db4 <__assert_fail@plt+0x3d2c>
   14da8:	mov	ip, #7
   14dac:	b	14db4 <__assert_fail@plt+0x3d2c>
   14db0:	mov	ip, #8
   14db4:	add	lr, sp, #8
   14db8:	str	ip, [sp, #4]
   14dbc:	str	lr, [sp]
   14dc0:	bl	14940 <__assert_fail@plt+0x38b8>
   14dc4:	mov	sp, fp
   14dc8:	pop	{fp, pc}
   14dcc:	push	{fp, lr}
   14dd0:	mov	fp, sp
   14dd4:	sub	sp, sp, #56	; 0x38
   14dd8:	add	ip, fp, #8
   14ddc:	str	ip, [sp, #12]
   14de0:	ldr	lr, [fp, #8]
   14de4:	cmp	lr, #0
   14de8:	str	lr, [sp, #16]
   14dec:	beq	14e88 <__assert_fail@plt+0x3e00>
   14df0:	ldr	lr, [ip, #4]
   14df4:	cmp	lr, #0
   14df8:	str	lr, [sp, #20]
   14dfc:	beq	14e90 <__assert_fail@plt+0x3e08>
   14e00:	ldr	lr, [ip, #8]
   14e04:	cmp	lr, #0
   14e08:	str	lr, [sp, #24]
   14e0c:	beq	14e98 <__assert_fail@plt+0x3e10>
   14e10:	ldr	lr, [ip, #12]
   14e14:	cmp	lr, #0
   14e18:	str	lr, [sp, #28]
   14e1c:	beq	14ea0 <__assert_fail@plt+0x3e18>
   14e20:	ldr	lr, [ip, #16]
   14e24:	cmp	lr, #0
   14e28:	str	lr, [sp, #32]
   14e2c:	beq	14ea8 <__assert_fail@plt+0x3e20>
   14e30:	ldr	lr, [ip, #20]
   14e34:	cmp	lr, #0
   14e38:	str	lr, [sp, #36]	; 0x24
   14e3c:	beq	14eb0 <__assert_fail@plt+0x3e28>
   14e40:	ldr	lr, [ip, #24]
   14e44:	cmp	lr, #0
   14e48:	str	lr, [sp, #40]	; 0x28
   14e4c:	beq	14eb8 <__assert_fail@plt+0x3e30>
   14e50:	ldr	lr, [ip, #28]
   14e54:	cmp	lr, #0
   14e58:	str	lr, [sp, #44]	; 0x2c
   14e5c:	beq	14ec0 <__assert_fail@plt+0x3e38>
   14e60:	ldr	lr, [ip, #32]
   14e64:	cmp	lr, #0
   14e68:	str	lr, [sp, #48]	; 0x30
   14e6c:	beq	14ec8 <__assert_fail@plt+0x3e40>
   14e70:	ldr	lr, [ip, #36]	; 0x24
   14e74:	mov	ip, #10
   14e78:	cmp	lr, #0
   14e7c:	str	lr, [sp, #52]	; 0x34
   14e80:	movweq	ip, #9
   14e84:	b	14ecc <__assert_fail@plt+0x3e44>
   14e88:	mov	ip, #0
   14e8c:	b	14ecc <__assert_fail@plt+0x3e44>
   14e90:	mov	ip, #1
   14e94:	b	14ecc <__assert_fail@plt+0x3e44>
   14e98:	mov	ip, #2
   14e9c:	b	14ecc <__assert_fail@plt+0x3e44>
   14ea0:	mov	ip, #3
   14ea4:	b	14ecc <__assert_fail@plt+0x3e44>
   14ea8:	mov	ip, #4
   14eac:	b	14ecc <__assert_fail@plt+0x3e44>
   14eb0:	mov	ip, #5
   14eb4:	b	14ecc <__assert_fail@plt+0x3e44>
   14eb8:	mov	ip, #6
   14ebc:	b	14ecc <__assert_fail@plt+0x3e44>
   14ec0:	mov	ip, #7
   14ec4:	b	14ecc <__assert_fail@plt+0x3e44>
   14ec8:	mov	ip, #8
   14ecc:	add	lr, sp, #16
   14ed0:	str	ip, [sp, #4]
   14ed4:	str	lr, [sp]
   14ed8:	bl	14940 <__assert_fail@plt+0x38b8>
   14edc:	mov	sp, fp
   14ee0:	pop	{fp, pc}
   14ee4:	push	{fp, lr}
   14ee8:	mov	fp, sp
   14eec:	movw	r0, #37196	; 0x914c
   14ef0:	movt	r0, #2
   14ef4:	ldr	r1, [r0]
   14ef8:	movw	r0, #31263	; 0x7a1f
   14efc:	movt	r0, #1
   14f00:	bl	10e30 <fputs_unlocked@plt>
   14f04:	movw	r1, #32679	; 0x7fa7
   14f08:	mov	r0, #0
   14f0c:	mov	r2, #5
   14f10:	movt	r1, #1
   14f14:	bl	10ec0 <dcgettext@plt>
   14f18:	movw	r2, #32699	; 0x7fbb
   14f1c:	mov	r1, r0
   14f20:	mov	r0, #1
   14f24:	movt	r2, #1
   14f28:	bl	10fc8 <__printf_chk@plt>
   14f2c:	movw	r1, #32721	; 0x7fd1
   14f30:	mov	r0, #0
   14f34:	mov	r2, #5
   14f38:	movt	r1, #1
   14f3c:	bl	10ec0 <dcgettext@plt>
   14f40:	movw	r2, #30773	; 0x7835
   14f44:	movw	r3, #31072	; 0x7960
   14f48:	mov	r1, r0
   14f4c:	mov	r0, #1
   14f50:	movt	r2, #1
   14f54:	movt	r3, #1
   14f58:	bl	10fc8 <__printf_chk@plt>
   14f5c:	movw	r1, #32741	; 0x7fe5
   14f60:	mov	r0, #0
   14f64:	mov	r2, #5
   14f68:	movt	r1, #1
   14f6c:	bl	10ec0 <dcgettext@plt>
   14f70:	movw	r2, #32780	; 0x800c
   14f74:	mov	r1, r0
   14f78:	mov	r0, #1
   14f7c:	movt	r2, #1
   14f80:	pop	{fp, lr}
   14f84:	b	10fc8 <__printf_chk@plt>
   14f88:	push	{r4, r5, r6, sl, fp, lr}
   14f8c:	add	fp, sp, #16
   14f90:	mov	r4, r2
   14f94:	mov	r5, r1
   14f98:	mov	r6, r0
   14f9c:	bl	170f8 <__assert_fail@plt+0x6070>
   14fa0:	cmp	r0, #0
   14fa4:	popne	{r4, r5, r6, sl, fp, pc}
   14fa8:	cmp	r6, #0
   14fac:	beq	14fc0 <__assert_fail@plt+0x3f38>
   14fb0:	cmp	r5, #0
   14fb4:	cmpne	r4, #0
   14fb8:	bne	14fc0 <__assert_fail@plt+0x3f38>
   14fbc:	pop	{r4, r5, r6, sl, fp, pc}
   14fc0:	bl	15560 <__assert_fail@plt+0x44d8>
   14fc4:	push	{r4, r5, r6, sl, fp, lr}
   14fc8:	add	fp, sp, #16
   14fcc:	mov	r4, r2
   14fd0:	mov	r5, r1
   14fd4:	mov	r6, r0
   14fd8:	bl	170f8 <__assert_fail@plt+0x6070>
   14fdc:	cmp	r0, #0
   14fe0:	popne	{r4, r5, r6, sl, fp, pc}
   14fe4:	cmp	r6, #0
   14fe8:	beq	14ffc <__assert_fail@plt+0x3f74>
   14fec:	cmp	r5, #0
   14ff0:	cmpne	r4, #0
   14ff4:	bne	14ffc <__assert_fail@plt+0x3f74>
   14ff8:	pop	{r4, r5, r6, sl, fp, pc}
   14ffc:	bl	15560 <__assert_fail@plt+0x44d8>
   15000:	push	{fp, lr}
   15004:	mov	fp, sp
   15008:	bl	16f58 <__assert_fail@plt+0x5ed0>
   1500c:	cmp	r0, #0
   15010:	popne	{fp, pc}
   15014:	bl	15560 <__assert_fail@plt+0x44d8>
   15018:	push	{fp, lr}
   1501c:	mov	fp, sp
   15020:	bl	16f58 <__assert_fail@plt+0x5ed0>
   15024:	cmp	r0, #0
   15028:	popne	{fp, pc}
   1502c:	bl	15560 <__assert_fail@plt+0x44d8>
   15030:	push	{fp, lr}
   15034:	mov	fp, sp
   15038:	bl	16f58 <__assert_fail@plt+0x5ed0>
   1503c:	cmp	r0, #0
   15040:	popne	{fp, pc}
   15044:	bl	15560 <__assert_fail@plt+0x44d8>
   15048:	push	{r4, r5, fp, lr}
   1504c:	add	fp, sp, #8
   15050:	mov	r4, r1
   15054:	mov	r5, r0
   15058:	bl	16f88 <__assert_fail@plt+0x5f00>
   1505c:	cmp	r0, #0
   15060:	popne	{r4, r5, fp, pc}
   15064:	cmp	r5, #0
   15068:	beq	15078 <__assert_fail@plt+0x3ff0>
   1506c:	cmp	r4, #0
   15070:	bne	15078 <__assert_fail@plt+0x3ff0>
   15074:	pop	{r4, r5, fp, pc}
   15078:	bl	15560 <__assert_fail@plt+0x44d8>
   1507c:	push	{fp, lr}
   15080:	mov	fp, sp
   15084:	cmp	r1, #0
   15088:	orreq	r1, r1, #1
   1508c:	bl	16f88 <__assert_fail@plt+0x5f00>
   15090:	cmp	r0, #0
   15094:	popne	{fp, pc}
   15098:	bl	15560 <__assert_fail@plt+0x44d8>
   1509c:	push	{fp, lr}
   150a0:	mov	fp, sp
   150a4:	clz	r3, r2
   150a8:	lsr	ip, r3, #5
   150ac:	clz	r3, r1
   150b0:	lsr	r3, r3, #5
   150b4:	orrs	r3, r3, ip
   150b8:	movwne	r1, #1
   150bc:	movwne	r2, #1
   150c0:	bl	170f8 <__assert_fail@plt+0x6070>
   150c4:	cmp	r0, #0
   150c8:	popne	{fp, pc}
   150cc:	bl	15560 <__assert_fail@plt+0x44d8>
   150d0:	push	{fp, lr}
   150d4:	mov	fp, sp
   150d8:	mov	r2, r1
   150dc:	mov	r1, r0
   150e0:	mov	r0, #0
   150e4:	bl	170f8 <__assert_fail@plt+0x6070>
   150e8:	cmp	r0, #0
   150ec:	popne	{fp, pc}
   150f0:	bl	15560 <__assert_fail@plt+0x44d8>
   150f4:	push	{fp, lr}
   150f8:	mov	fp, sp
   150fc:	mov	r2, r1
   15100:	mov	r1, r0
   15104:	clz	r0, r2
   15108:	clz	r3, r1
   1510c:	lsr	r0, r0, #5
   15110:	lsr	r3, r3, #5
   15114:	orrs	r0, r3, r0
   15118:	movwne	r1, #1
   1511c:	movwne	r2, #1
   15120:	mov	r0, #0
   15124:	bl	170f8 <__assert_fail@plt+0x6070>
   15128:	cmp	r0, #0
   1512c:	popne	{fp, pc}
   15130:	bl	15560 <__assert_fail@plt+0x44d8>
   15134:	push	{r4, r5, r6, sl, fp, lr}
   15138:	add	fp, sp, #16
   1513c:	ldr	r5, [r1]
   15140:	mov	r4, r1
   15144:	mov	r6, r0
   15148:	cmp	r0, #0
   1514c:	beq	15164 <__assert_fail@plt+0x40dc>
   15150:	mov	r0, #1
   15154:	add	r0, r0, r5, lsr #1
   15158:	adds	r5, r5, r0
   1515c:	bcc	1516c <__assert_fail@plt+0x40e4>
   15160:	b	151a8 <__assert_fail@plt+0x4120>
   15164:	cmp	r5, #0
   15168:	movweq	r5, #64	; 0x40
   1516c:	mov	r0, r6
   15170:	mov	r1, r5
   15174:	mov	r2, #1
   15178:	bl	170f8 <__assert_fail@plt+0x6070>
   1517c:	cmp	r5, #0
   15180:	mov	r1, r5
   15184:	movwne	r1, #1
   15188:	cmp	r0, #0
   1518c:	bne	151a0 <__assert_fail@plt+0x4118>
   15190:	clz	r2, r6
   15194:	lsr	r2, r2, #5
   15198:	orrs	r1, r2, r1
   1519c:	bne	151a8 <__assert_fail@plt+0x4120>
   151a0:	str	r5, [r4]
   151a4:	pop	{r4, r5, r6, sl, fp, pc}
   151a8:	bl	15560 <__assert_fail@plt+0x44d8>
   151ac:	push	{r4, r5, r6, r7, fp, lr}
   151b0:	add	fp, sp, #16
   151b4:	ldr	r5, [r1]
   151b8:	mov	r6, r2
   151bc:	mov	r4, r1
   151c0:	mov	r7, r0
   151c4:	cmp	r0, #0
   151c8:	beq	151e0 <__assert_fail@plt+0x4158>
   151cc:	mov	r0, #1
   151d0:	add	r0, r0, r5, lsr #1
   151d4:	adds	r5, r5, r0
   151d8:	bcc	151f8 <__assert_fail@plt+0x4170>
   151dc:	b	1522c <__assert_fail@plt+0x41a4>
   151e0:	cmp	r5, #0
   151e4:	bne	151f8 <__assert_fail@plt+0x4170>
   151e8:	mov	r0, #64	; 0x40
   151ec:	cmp	r6, #64	; 0x40
   151f0:	udiv	r5, r0, r6
   151f4:	addhi	r5, r5, #1
   151f8:	mov	r0, r7
   151fc:	mov	r1, r5
   15200:	mov	r2, r6
   15204:	bl	170f8 <__assert_fail@plt+0x6070>
   15208:	cmp	r0, #0
   1520c:	bne	15224 <__assert_fail@plt+0x419c>
   15210:	cmp	r7, #0
   15214:	beq	1522c <__assert_fail@plt+0x41a4>
   15218:	cmp	r6, #0
   1521c:	cmpne	r5, #0
   15220:	bne	1522c <__assert_fail@plt+0x41a4>
   15224:	str	r5, [r4]
   15228:	pop	{r4, r5, r6, r7, fp, pc}
   1522c:	bl	15560 <__assert_fail@plt+0x44d8>
   15230:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15234:	add	fp, sp, #24
   15238:	mov	r8, r1
   1523c:	ldr	r1, [r1]
   15240:	mov	r5, r0
   15244:	add	r0, r1, r1, asr #1
   15248:	cmp	r0, r1
   1524c:	mvnvs	r0, #-2147483648	; 0x80000000
   15250:	cmp	r0, r3
   15254:	mov	r7, r0
   15258:	movgt	r7, r3
   1525c:	cmn	r3, #1
   15260:	movle	r7, r0
   15264:	ldr	r0, [fp, #8]
   15268:	cmn	r0, #1
   1526c:	ble	15294 <__assert_fail@plt+0x420c>
   15270:	cmp	r0, #0
   15274:	beq	152e8 <__assert_fail@plt+0x4260>
   15278:	cmn	r7, #1
   1527c:	ble	152bc <__assert_fail@plt+0x4234>
   15280:	mvn	r4, #-2147483648	; 0x80000000
   15284:	udiv	r6, r4, r0
   15288:	cmp	r6, r7
   1528c:	bge	152e8 <__assert_fail@plt+0x4260>
   15290:	b	152f8 <__assert_fail@plt+0x4270>
   15294:	cmn	r7, #1
   15298:	ble	152d8 <__assert_fail@plt+0x4250>
   1529c:	cmn	r0, #1
   152a0:	beq	152e8 <__assert_fail@plt+0x4260>
   152a4:	mov	r6, #-2147483648	; 0x80000000
   152a8:	mvn	r4, #-2147483648	; 0x80000000
   152ac:	sdiv	r6, r6, r0
   152b0:	cmp	r6, r7
   152b4:	bge	152e8 <__assert_fail@plt+0x4260>
   152b8:	b	152f8 <__assert_fail@plt+0x4270>
   152bc:	beq	152e8 <__assert_fail@plt+0x4260>
   152c0:	mov	r6, #-2147483648	; 0x80000000
   152c4:	mvn	r4, #-2147483648	; 0x80000000
   152c8:	sdiv	r6, r6, r7
   152cc:	cmp	r6, r0
   152d0:	bge	152e8 <__assert_fail@plt+0x4260>
   152d4:	b	152f8 <__assert_fail@plt+0x4270>
   152d8:	mvn	r4, #-2147483648	; 0x80000000
   152dc:	sdiv	r6, r4, r0
   152e0:	cmp	r7, r6
   152e4:	blt	152f8 <__assert_fail@plt+0x4270>
   152e8:	mul	r6, r7, r0
   152ec:	mov	r4, #64	; 0x40
   152f0:	cmp	r6, #63	; 0x3f
   152f4:	bgt	15300 <__assert_fail@plt+0x4278>
   152f8:	sdiv	r7, r4, r0
   152fc:	mul	r6, r7, r0
   15300:	cmp	r5, #0
   15304:	moveq	r4, #0
   15308:	streq	r4, [r8]
   1530c:	sub	r4, r7, r1
   15310:	cmp	r4, r2
   15314:	bge	153c0 <__assert_fail@plt+0x4338>
   15318:	add	r7, r1, r2
   1531c:	mov	r6, #0
   15320:	mov	r2, #0
   15324:	cmp	r7, r3
   15328:	movwgt	r6, #1
   1532c:	cmn	r3, #1
   15330:	movwgt	r2, #1
   15334:	cmp	r7, r1
   15338:	bvs	153f4 <__assert_fail@plt+0x436c>
   1533c:	ands	r1, r2, r6
   15340:	bne	153f4 <__assert_fail@plt+0x436c>
   15344:	cmn	r0, #1
   15348:	ble	15370 <__assert_fail@plt+0x42e8>
   1534c:	cmp	r0, #0
   15350:	beq	153bc <__assert_fail@plt+0x4334>
   15354:	cmn	r7, #1
   15358:	ble	15394 <__assert_fail@plt+0x430c>
   1535c:	mvn	r1, #-2147483648	; 0x80000000
   15360:	udiv	r1, r1, r0
   15364:	cmp	r1, r7
   15368:	bge	153bc <__assert_fail@plt+0x4334>
   1536c:	b	153f4 <__assert_fail@plt+0x436c>
   15370:	cmn	r7, #1
   15374:	ble	153ac <__assert_fail@plt+0x4324>
   15378:	cmn	r0, #1
   1537c:	beq	153bc <__assert_fail@plt+0x4334>
   15380:	mov	r1, #-2147483648	; 0x80000000
   15384:	sdiv	r1, r1, r0
   15388:	cmp	r1, r7
   1538c:	bge	153bc <__assert_fail@plt+0x4334>
   15390:	b	153f4 <__assert_fail@plt+0x436c>
   15394:	beq	153bc <__assert_fail@plt+0x4334>
   15398:	mov	r1, #-2147483648	; 0x80000000
   1539c:	sdiv	r1, r1, r7
   153a0:	cmp	r1, r0
   153a4:	bge	153bc <__assert_fail@plt+0x4334>
   153a8:	b	153f4 <__assert_fail@plt+0x436c>
   153ac:	mvn	r1, #-2147483648	; 0x80000000
   153b0:	sdiv	r1, r1, r0
   153b4:	cmp	r7, r1
   153b8:	blt	153f4 <__assert_fail@plt+0x436c>
   153bc:	mul	r6, r7, r0
   153c0:	mov	r0, r5
   153c4:	mov	r1, r6
   153c8:	bl	16f88 <__assert_fail@plt+0x5f00>
   153cc:	cmp	r6, #0
   153d0:	movwne	r6, #1
   153d4:	cmp	r0, #0
   153d8:	bne	153ec <__assert_fail@plt+0x4364>
   153dc:	clz	r1, r5
   153e0:	lsr	r1, r1, #5
   153e4:	orrs	r1, r1, r6
   153e8:	bne	153f4 <__assert_fail@plt+0x436c>
   153ec:	str	r7, [r8]
   153f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153f4:	bl	15560 <__assert_fail@plt+0x44d8>
   153f8:	push	{fp, lr}
   153fc:	mov	fp, sp
   15400:	mov	r1, #1
   15404:	bl	16f04 <__assert_fail@plt+0x5e7c>
   15408:	cmp	r0, #0
   1540c:	popne	{fp, pc}
   15410:	bl	15560 <__assert_fail@plt+0x44d8>
   15414:	push	{fp, lr}
   15418:	mov	fp, sp
   1541c:	bl	16f04 <__assert_fail@plt+0x5e7c>
   15420:	cmp	r0, #0
   15424:	popne	{fp, pc}
   15428:	bl	15560 <__assert_fail@plt+0x44d8>
   1542c:	push	{fp, lr}
   15430:	mov	fp, sp
   15434:	mov	r1, #1
   15438:	bl	16f04 <__assert_fail@plt+0x5e7c>
   1543c:	cmp	r0, #0
   15440:	popne	{fp, pc}
   15444:	bl	15560 <__assert_fail@plt+0x44d8>
   15448:	push	{fp, lr}
   1544c:	mov	fp, sp
   15450:	bl	16f04 <__assert_fail@plt+0x5e7c>
   15454:	cmp	r0, #0
   15458:	popne	{fp, pc}
   1545c:	bl	15560 <__assert_fail@plt+0x44d8>
   15460:	push	{r4, r5, r6, sl, fp, lr}
   15464:	add	fp, sp, #16
   15468:	mov	r5, r0
   1546c:	mov	r0, r1
   15470:	mov	r4, r1
   15474:	bl	16f58 <__assert_fail@plt+0x5ed0>
   15478:	cmp	r0, #0
   1547c:	beq	15498 <__assert_fail@plt+0x4410>
   15480:	mov	r1, r5
   15484:	mov	r2, r4
   15488:	mov	r6, r0
   1548c:	bl	10e90 <memcpy@plt>
   15490:	mov	r0, r6
   15494:	pop	{r4, r5, r6, sl, fp, pc}
   15498:	bl	15560 <__assert_fail@plt+0x44d8>
   1549c:	push	{r4, r5, r6, sl, fp, lr}
   154a0:	add	fp, sp, #16
   154a4:	mov	r5, r0
   154a8:	mov	r0, r1
   154ac:	mov	r4, r1
   154b0:	bl	16f58 <__assert_fail@plt+0x5ed0>
   154b4:	cmp	r0, #0
   154b8:	beq	154d4 <__assert_fail@plt+0x444c>
   154bc:	mov	r1, r5
   154c0:	mov	r2, r4
   154c4:	mov	r6, r0
   154c8:	bl	10e90 <memcpy@plt>
   154cc:	mov	r0, r6
   154d0:	pop	{r4, r5, r6, sl, fp, pc}
   154d4:	bl	15560 <__assert_fail@plt+0x44d8>
   154d8:	push	{r4, r5, r6, sl, fp, lr}
   154dc:	add	fp, sp, #16
   154e0:	mov	r5, r0
   154e4:	add	r0, r1, #1
   154e8:	mov	r4, r1
   154ec:	bl	16f58 <__assert_fail@plt+0x5ed0>
   154f0:	cmp	r0, #0
   154f4:	beq	1551c <__assert_fail@plt+0x4494>
   154f8:	mov	r6, r0
   154fc:	mov	r0, #0
   15500:	mov	r1, r5
   15504:	mov	r2, r4
   15508:	strb	r0, [r6, r4]
   1550c:	mov	r0, r6
   15510:	bl	10e90 <memcpy@plt>
   15514:	mov	r0, r6
   15518:	pop	{r4, r5, r6, sl, fp, pc}
   1551c:	bl	15560 <__assert_fail@plt+0x44d8>
   15520:	push	{r4, r5, r6, sl, fp, lr}
   15524:	add	fp, sp, #16
   15528:	mov	r4, r0
   1552c:	bl	10f8c <strlen@plt>
   15530:	add	r5, r0, #1
   15534:	mov	r0, r5
   15538:	bl	16f58 <__assert_fail@plt+0x5ed0>
   1553c:	cmp	r0, #0
   15540:	beq	1555c <__assert_fail@plt+0x44d4>
   15544:	mov	r1, r4
   15548:	mov	r2, r5
   1554c:	mov	r6, r0
   15550:	bl	10e90 <memcpy@plt>
   15554:	mov	r0, r6
   15558:	pop	{r4, r5, r6, sl, fp, pc}
   1555c:	bl	15560 <__assert_fail@plt+0x44d8>
   15560:	push	{fp, lr}
   15564:	mov	fp, sp
   15568:	movw	r0, #37100	; 0x90ec
   1556c:	movw	r1, #32856	; 0x8058
   15570:	mov	r2, #5
   15574:	movt	r0, #2
   15578:	movt	r1, #1
   1557c:	ldr	r4, [r0]
   15580:	mov	r0, #0
   15584:	bl	10ec0 <dcgettext@plt>
   15588:	movw	r2, #30752	; 0x7820
   1558c:	mov	r3, r0
   15590:	mov	r0, r4
   15594:	mov	r1, #0
   15598:	movt	r2, #1
   1559c:	bl	10f2c <error@plt>
   155a0:	bl	1107c <abort@plt>
   155a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155a8:	add	fp, sp, #28
   155ac:	sub	sp, sp, #36	; 0x24
   155b0:	cmp	r2, #37	; 0x25
   155b4:	bcs	16ee4 <__assert_fail@plt+0x5e5c>
   155b8:	ldr	r8, [fp, #8]
   155bc:	mov	r9, r3
   155c0:	mov	r6, r2
   155c4:	mov	r7, r1
   155c8:	mov	r4, r0
   155cc:	bl	10fa4 <__errno_location@plt>
   155d0:	add	sl, sp, #32
   155d4:	cmp	r7, #0
   155d8:	mov	r5, r0
   155dc:	mov	r0, #0
   155e0:	mov	r2, r6
   155e4:	mov	r3, #0
   155e8:	movne	sl, r7
   155ec:	str	r0, [r5]
   155f0:	mov	r0, r4
   155f4:	mov	r1, sl
   155f8:	bl	11040 <__strtoll_internal@plt>
   155fc:	mov	r7, r1
   15600:	ldr	r1, [sl]
   15604:	cmp	r1, r4
   15608:	beq	15644 <__assert_fail@plt+0x45bc>
   1560c:	mov	r6, r0
   15610:	ldr	r0, [r5]
   15614:	cmp	r0, #0
   15618:	beq	157d0 <__assert_fail@plt+0x4748>
   1561c:	mov	r5, #4
   15620:	cmp	r0, #34	; 0x22
   15624:	bne	15a28 <__assert_fail@plt+0x49a0>
   15628:	mov	r5, #1
   1562c:	cmp	r8, #0
   15630:	beq	157dc <__assert_fail@plt+0x4754>
   15634:	ldrb	r4, [r1]
   15638:	cmp	r4, #0
   1563c:	bne	1568c <__assert_fail@plt+0x4604>
   15640:	b	157dc <__assert_fail@plt+0x4754>
   15644:	mov	r5, #4
   15648:	cmp	r8, #0
   1564c:	beq	15a28 <__assert_fail@plt+0x49a0>
   15650:	mov	r6, r1
   15654:	ldrb	r1, [r4]
   15658:	cmp	r1, #0
   1565c:	beq	15a28 <__assert_fail@plt+0x49a0>
   15660:	mov	r0, r8
   15664:	bl	10f98 <strchr@plt>
   15668:	cmp	r0, #0
   1566c:	beq	15a28 <__assert_fail@plt+0x49a0>
   15670:	mov	r1, r6
   15674:	mov	r5, #0
   15678:	mov	r6, #1
   1567c:	mov	r7, #0
   15680:	ldrb	r4, [r1]
   15684:	cmp	r4, #0
   15688:	beq	157dc <__assert_fail@plt+0x4754>
   1568c:	str	r1, [sp, #20]
   15690:	mov	r0, r8
   15694:	mov	r1, r4
   15698:	bl	10f98 <strchr@plt>
   1569c:	cmp	r0, #0
   156a0:	beq	15a20 <__assert_fail@plt+0x4998>
   156a4:	sub	r0, r4, #69	; 0x45
   156a8:	mov	r1, #1
   156ac:	mov	r3, #0
   156b0:	mov	r2, #1024	; 0x400
   156b4:	cmp	r0, #47	; 0x2f
   156b8:	str	r1, [sp, #16]
   156bc:	bhi	157f4 <__assert_fail@plt+0x476c>
   156c0:	add	r1, pc, #0
   156c4:	ldr	pc, [r1, r0, lsl #2]
   156c8:	andeq	r5, r1, r8, lsl #15
   156cc:	strdeq	r5, [r1], -r4
   156d0:	andeq	r5, r1, r8, lsl #15
   156d4:	strdeq	r5, [r1], -r4
   156d8:	strdeq	r5, [r1], -r4
   156dc:	strdeq	r5, [r1], -r4
   156e0:	andeq	r5, r1, r8, lsl #15
   156e4:	strdeq	r5, [r1], -r4
   156e8:	andeq	r5, r1, r8, lsl #15
   156ec:	strdeq	r5, [r1], -r4
   156f0:	strdeq	r5, [r1], -r4
   156f4:	andeq	r5, r1, r8, lsl #15
   156f8:	strdeq	r5, [r1], -r4
   156fc:	strdeq	r5, [r1], -r4
   15700:	strdeq	r5, [r1], -r4
   15704:	andeq	r5, r1, r8, lsl #15
   15708:	strdeq	r5, [r1], -r4
   1570c:	strdeq	r5, [r1], -r4
   15710:	strdeq	r5, [r1], -r4
   15714:	strdeq	r5, [r1], -r4
   15718:	andeq	r5, r1, r8, lsl #15
   1571c:	andeq	r5, r1, r8, lsl #15
   15720:	strdeq	r5, [r1], -r4
   15724:	strdeq	r5, [r1], -r4
   15728:	strdeq	r5, [r1], -r4
   1572c:	strdeq	r5, [r1], -r4
   15730:	strdeq	r5, [r1], -r4
   15734:	strdeq	r5, [r1], -r4
   15738:	strdeq	r5, [r1], -r4
   1573c:	strdeq	r5, [r1], -r4
   15740:	strdeq	r5, [r1], -r4
   15744:	strdeq	r5, [r1], -r4
   15748:	strdeq	r5, [r1], -r4
   1574c:	strdeq	r5, [r1], -r4
   15750:	andeq	r5, r1, r8, lsl #15
   15754:	strdeq	r5, [r1], -r4
   15758:	strdeq	r5, [r1], -r4
   1575c:	strdeq	r5, [r1], -r4
   15760:	andeq	r5, r1, r8, lsl #15
   15764:	strdeq	r5, [r1], -r4
   15768:	andeq	r5, r1, r8, lsl #15
   1576c:	strdeq	r5, [r1], -r4
   15770:	strdeq	r5, [r1], -r4
   15774:	strdeq	r5, [r1], -r4
   15778:	strdeq	r5, [r1], -r4
   1577c:	strdeq	r5, [r1], -r4
   15780:	strdeq	r5, [r1], -r4
   15784:	andeq	r5, r1, r8, lsl #15
   15788:	mov	r0, r8
   1578c:	mov	r1, #48	; 0x30
   15790:	bl	10f98 <strchr@plt>
   15794:	cmp	r0, #0
   15798:	beq	157ec <__assert_fail@plt+0x4764>
   1579c:	ldr	r1, [sp, #20]
   157a0:	ldrb	r0, [r1, #1]
   157a4:	cmp	r0, #66	; 0x42
   157a8:	cmpne	r0, #68	; 0x44
   157ac:	bne	15928 <__assert_fail@plt+0x48a0>
   157b0:	mov	r0, #2
   157b4:	mov	r2, #1000	; 0x3e8
   157b8:	mov	r3, #0
   157bc:	str	r0, [sp, #16]
   157c0:	sub	r0, r4, #66	; 0x42
   157c4:	cmp	r0, #53	; 0x35
   157c8:	bls	15800 <__assert_fail@plt+0x4778>
   157cc:	b	15a20 <__assert_fail@plt+0x4998>
   157d0:	mov	r5, r0
   157d4:	cmp	r8, #0
   157d8:	bne	15634 <__assert_fail@plt+0x45ac>
   157dc:	strd	r6, [r9]
   157e0:	mov	r0, r5
   157e4:	sub	sp, fp, #28
   157e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157ec:	mov	r3, #0
   157f0:	mov	r2, #1024	; 0x400
   157f4:	sub	r0, r4, #66	; 0x42
   157f8:	cmp	r0, #53	; 0x35
   157fc:	bhi	15a20 <__assert_fail@plt+0x4998>
   15800:	add	r1, pc, #8
   15804:	str	r3, [sp, #28]
   15808:	str	r2, [sp, #24]
   1580c:	ldr	pc, [r1, r0, lsl #2]
   15810:	andeq	r5, r1, r8, ror sl
   15814:	andeq	r5, r1, r0, lsr #20
   15818:	andeq	r5, r1, r0, lsr #20
   1581c:	andeq	r5, r1, ip, lsl #21
   15820:	andeq	r5, r1, r0, lsr #20
   15824:	andeq	r5, r1, r8, ror #17
   15828:	andeq	r5, r1, r0, lsr #20
   1582c:	andeq	r5, r1, r0, lsr #20
   15830:	andeq	r5, r1, r0, lsr #20
   15834:	andeq	r5, r1, ip, asr r9
   15838:	andeq	r5, r1, r0, lsr #20
   1583c:	andeq	r5, r1, ip, lsl #19
   15840:	andeq	r5, r1, r0, lsr #20
   15844:	andeq	r5, r1, r0, lsr #20
   15848:	ldrdeq	r5, [r1], -r0
   1584c:	andeq	r5, r1, r0, lsr #20
   15850:	andeq	r5, r1, r0, lsr #20
   15854:	andeq	r5, r1, r0, lsr #20
   15858:	andeq	r5, r1, ip, asr #19
   1585c:	andeq	r5, r1, r0, lsr #20
   15860:	andeq	r5, r1, r0, lsr #20
   15864:	andeq	r5, r1, r0, lsr #20
   15868:	andeq	r5, r1, r0, lsr #20
   1586c:	andeq	r5, r1, r4, lsl fp
   15870:	andeq	r5, r1, r4, lsr sl
   15874:	andeq	r5, r1, r0, lsr #20
   15878:	andeq	r5, r1, r0, lsr #20
   1587c:	andeq	r5, r1, r0, lsr #20
   15880:	andeq	r5, r1, r0, lsr #20
   15884:	andeq	r5, r1, r0, lsr #20
   15888:	andeq	r5, r1, r0, lsr #20
   1588c:	andeq	r5, r1, r0, lsr #20
   15890:	andeq	r5, r1, r8, asr fp
   15894:	ldrdeq	r6, [r1], -r0
   15898:	andeq	r5, r1, r0, lsr #20
   1589c:	andeq	r5, r1, r0, lsr #20
   158a0:	andeq	r5, r1, r0, lsr #20
   158a4:	andeq	r5, r1, r8, ror #17
   158a8:	andeq	r5, r1, r0, lsr #20
   158ac:	andeq	r5, r1, r0, lsr #20
   158b0:	andeq	r5, r1, r0, lsr #20
   158b4:	andeq	r5, r1, ip, asr r9
   158b8:	andeq	r5, r1, r0, lsr #20
   158bc:	andeq	r5, r1, ip, lsl #19
   158c0:	andeq	r5, r1, r0, lsr #20
   158c4:	andeq	r5, r1, r0, lsr #20
   158c8:	andeq	r5, r1, r0, lsr #20
   158cc:	andeq	r5, r1, r0, lsr #20
   158d0:	andeq	r5, r1, r0, lsr #20
   158d4:	andeq	r5, r1, r0, lsr #20
   158d8:	andeq	r5, r1, ip, asr #19
   158dc:	andeq	r5, r1, r0, lsr #20
   158e0:	andeq	r5, r1, r0, lsr #20
   158e4:	andeq	r5, r1, ip, ror #22
   158e8:	cmn	r7, #1
   158ec:	str	r9, [sp, #12]
   158f0:	ble	15b80 <__assert_fail@plt+0x4af8>
   158f4:	ldr	r3, [sp, #28]
   158f8:	mvn	r0, #0
   158fc:	mvn	r1, #-2147483648	; 0x80000000
   15900:	mvn	r8, #0
   15904:	mvn	r9, #-2147483648	; 0x80000000
   15908:	bl	17310 <__assert_fail@plt+0x6288>
   1590c:	ldr	r2, [sp, #24]
   15910:	ldr	r3, [sp, #28]
   15914:	subs	r0, r0, r6
   15918:	mov	r4, #1
   1591c:	sbcs	r0, r1, r7
   15920:	bge	15bc0 <__assert_fail@plt+0x4b38>
   15924:	b	15bd8 <__assert_fail@plt+0x4b50>
   15928:	cmp	r0, #105	; 0x69
   1592c:	mov	r3, #0
   15930:	bne	15a10 <__assert_fail@plt+0x4988>
   15934:	ldrb	r0, [r1, #2]
   15938:	mov	r1, #1
   1593c:	mov	r2, #1024	; 0x400
   15940:	cmp	r0, #66	; 0x42
   15944:	movweq	r1, #3
   15948:	str	r1, [sp, #16]
   1594c:	sub	r0, r4, #66	; 0x42
   15950:	cmp	r0, #53	; 0x35
   15954:	bls	15800 <__assert_fail@plt+0x4778>
   15958:	b	15a20 <__assert_fail@plt+0x4998>
   1595c:	cmn	r7, #1
   15960:	ble	15c14 <__assert_fail@plt+0x4b8c>
   15964:	ldr	r3, [sp, #28]
   15968:	mvn	r0, #0
   1596c:	mvn	r1, #-2147483648	; 0x80000000
   15970:	bl	17310 <__assert_fail@plt+0x6288>
   15974:	ldr	r2, [sp, #24]
   15978:	ldr	r3, [sp, #28]
   1597c:	subs	r0, r0, r6
   15980:	sbcs	r0, r1, r7
   15984:	bge	15c48 <__assert_fail@plt+0x4bc0>
   15988:	b	16358 <__assert_fail@plt+0x52d0>
   1598c:	cmn	r7, #1
   15990:	str	r9, [sp, #12]
   15994:	ble	15c5c <__assert_fail@plt+0x4bd4>
   15998:	ldr	r3, [sp, #28]
   1599c:	mvn	r0, #0
   159a0:	mvn	r1, #-2147483648	; 0x80000000
   159a4:	mvn	r8, #0
   159a8:	mvn	r9, #-2147483648	; 0x80000000
   159ac:	bl	17310 <__assert_fail@plt+0x6288>
   159b0:	ldr	r2, [sp, #24]
   159b4:	ldr	r3, [sp, #28]
   159b8:	subs	r0, r0, r6
   159bc:	mov	r4, #1
   159c0:	sbcs	r0, r1, r7
   159c4:	bge	15c9c <__assert_fail@plt+0x4c14>
   159c8:	b	15cb4 <__assert_fail@plt+0x4c2c>
   159cc:	cmn	r7, #1
   159d0:	str	r9, [sp, #12]
   159d4:	ble	15cec <__assert_fail@plt+0x4c64>
   159d8:	ldr	r3, [sp, #28]
   159dc:	mvn	r0, #0
   159e0:	mvn	r1, #-2147483648	; 0x80000000
   159e4:	mvn	r9, #-2147483648	; 0x80000000
   159e8:	str	r0, [sp, #8]
   159ec:	mvn	r0, #0
   159f0:	bl	17310 <__assert_fail@plt+0x6288>
   159f4:	ldr	r2, [sp, #24]
   159f8:	ldr	r3, [sp, #28]
   159fc:	subs	r0, r0, r6
   15a00:	mov	r4, #1
   15a04:	sbcs	r0, r1, r7
   15a08:	bge	15d30 <__assert_fail@plt+0x4ca8>
   15a0c:	b	15d4c <__assert_fail@plt+0x4cc4>
   15a10:	mov	r2, #1024	; 0x400
   15a14:	sub	r0, r4, #66	; 0x42
   15a18:	cmp	r0, #53	; 0x35
   15a1c:	bls	15800 <__assert_fail@plt+0x4778>
   15a20:	orr	r5, r5, #2
   15a24:	strd	r6, [r9]
   15a28:	mov	r0, r5
   15a2c:	sub	sp, fp, #28
   15a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a34:	cmp	r7, #0
   15a38:	str	r9, [sp, #12]
   15a3c:	blt	16034 <__assert_fail@plt+0x4fac>
   15a40:	ldr	r3, [sp, #28]
   15a44:	mvn	r0, #0
   15a48:	mvn	r1, #-2147483648	; 0x80000000
   15a4c:	mvn	r9, #-2147483648	; 0x80000000
   15a50:	str	r0, [sp, #8]
   15a54:	mvn	r0, #0
   15a58:	bl	17310 <__assert_fail@plt+0x6288>
   15a5c:	ldr	r2, [sp, #24]
   15a60:	ldr	r3, [sp, #28]
   15a64:	subs	r0, r0, r6
   15a68:	mov	r4, #1
   15a6c:	sbcs	r0, r1, r7
   15a70:	bge	16078 <__assert_fail@plt+0x4ff0>
   15a74:	b	16094 <__assert_fail@plt+0x500c>
   15a78:	cmn	r7, #1
   15a7c:	ble	160d0 <__assert_fail@plt+0x5048>
   15a80:	cmp	r7, #2097152	; 0x200000
   15a84:	blt	16100 <__assert_fail@plt+0x5078>
   15a88:	b	16358 <__assert_fail@plt+0x52d0>
   15a8c:	cmp	r7, #0
   15a90:	str	r9, [sp, #12]
   15a94:	blt	16110 <__assert_fail@plt+0x5088>
   15a98:	ldr	r3, [sp, #28]
   15a9c:	mvn	r0, #0
   15aa0:	mvn	r1, #-2147483648	; 0x80000000
   15aa4:	mvn	r9, #-2147483648	; 0x80000000
   15aa8:	str	r0, [sp, #8]
   15aac:	mvn	r0, #0
   15ab0:	bl	17310 <__assert_fail@plt+0x6288>
   15ab4:	ldr	r2, [sp, #24]
   15ab8:	ldr	r3, [sp, #28]
   15abc:	subs	r0, r0, r6
   15ac0:	mov	r4, #1
   15ac4:	sbcs	r0, r1, r7
   15ac8:	bge	16154 <__assert_fail@plt+0x50cc>
   15acc:	b	16170 <__assert_fail@plt+0x50e8>
   15ad0:	cmp	r7, #0
   15ad4:	str	r9, [sp, #12]
   15ad8:	blt	161ac <__assert_fail@plt+0x5124>
   15adc:	ldr	r3, [sp, #28]
   15ae0:	mvn	r0, #0
   15ae4:	mvn	r1, #-2147483648	; 0x80000000
   15ae8:	mvn	r8, #-2147483648	; 0x80000000
   15aec:	str	r0, [sp, #8]
   15af0:	mvn	r0, #0
   15af4:	bl	17310 <__assert_fail@plt+0x6288>
   15af8:	ldr	r2, [sp, #24]
   15afc:	ldr	r3, [sp, #28]
   15b00:	subs	r0, r0, r6
   15b04:	mov	r4, #1
   15b08:	sbcs	r0, r1, r7
   15b0c:	bge	161f0 <__assert_fail@plt+0x5168>
   15b10:	b	1620c <__assert_fail@plt+0x5184>
   15b14:	cmp	r7, #0
   15b18:	str	r9, [sp, #12]
   15b1c:	blt	16248 <__assert_fail@plt+0x51c0>
   15b20:	ldr	r3, [sp, #28]
   15b24:	mvn	r0, #0
   15b28:	mvn	r1, #-2147483648	; 0x80000000
   15b2c:	mvn	r9, #-2147483648	; 0x80000000
   15b30:	str	r0, [sp, #8]
   15b34:	mvn	r0, #0
   15b38:	bl	17310 <__assert_fail@plt+0x6288>
   15b3c:	ldr	r2, [sp, #24]
   15b40:	ldr	r3, [sp, #28]
   15b44:	subs	r0, r0, r6
   15b48:	mov	r4, #1
   15b4c:	sbcs	r0, r1, r7
   15b50:	bge	1628c <__assert_fail@plt+0x5204>
   15b54:	b	162a8 <__assert_fail@plt+0x5220>
   15b58:	cmn	r7, #1
   15b5c:	ble	162e8 <__assert_fail@plt+0x5260>
   15b60:	cmp	r7, #4194304	; 0x400000
   15b64:	blt	16318 <__assert_fail@plt+0x5290>
   15b68:	b	16358 <__assert_fail@plt+0x52d0>
   15b6c:	cmn	r7, #1
   15b70:	ble	16328 <__assert_fail@plt+0x52a0>
   15b74:	cmp	r7, #1073741824	; 0x40000000
   15b78:	bge	16358 <__assert_fail@plt+0x52d0>
   15b7c:	b	16378 <__assert_fail@plt+0x52f0>
   15b80:	and	r0, r6, r7
   15b84:	cmn	r0, #1
   15b88:	beq	15bc0 <__assert_fail@plt+0x4b38>
   15b8c:	mov	r0, #0
   15b90:	mov	r1, #-2147483648	; 0x80000000
   15b94:	mov	r2, r6
   15b98:	mov	r3, r7
   15b9c:	mov	r8, #0
   15ba0:	mov	r9, #-2147483648	; 0x80000000
   15ba4:	bl	1723c <__assert_fail@plt+0x61b4>
   15ba8:	ldr	r2, [sp, #24]
   15bac:	ldr	r3, [sp, #28]
   15bb0:	mov	r4, #1
   15bb4:	subs	r0, r0, r2
   15bb8:	sbcs	r0, r1, r3
   15bbc:	blt	15d88 <__assert_fail@plt+0x4d00>
   15bc0:	umull	r8, r0, r6, r2
   15bc4:	mov	r4, #0
   15bc8:	mla	r0, r6, r3, r0
   15bcc:	mla	r9, r7, r2, r0
   15bd0:	cmp	r9, #0
   15bd4:	blt	15d88 <__assert_fail@plt+0x4d00>
   15bd8:	ldr	r3, [sp, #28]
   15bdc:	mvn	r0, #-2147483648	; 0x80000000
   15be0:	mvn	r1, #-2147483648	; 0x80000000
   15be4:	mov	r6, r4
   15be8:	mvn	r4, #0
   15bec:	str	r0, [sp, #8]
   15bf0:	mvn	r0, #0
   15bf4:	bl	17310 <__assert_fail@plt+0x6288>
   15bf8:	ldr	r2, [sp, #24]
   15bfc:	ldr	r3, [sp, #28]
   15c00:	subs	r0, r0, r8
   15c04:	mov	r7, #1
   15c08:	sbcs	r0, r1, r9
   15c0c:	bge	15dc4 <__assert_fail@plt+0x4d3c>
   15c10:	b	15de0 <__assert_fail@plt+0x4d58>
   15c14:	and	r0, r6, r7
   15c18:	cmn	r0, #1
   15c1c:	beq	15c48 <__assert_fail@plt+0x4bc0>
   15c20:	mov	r0, #0
   15c24:	mov	r1, #-2147483648	; 0x80000000
   15c28:	mov	r2, r6
   15c2c:	mov	r3, r7
   15c30:	bl	1723c <__assert_fail@plt+0x61b4>
   15c34:	ldr	r2, [sp, #24]
   15c38:	ldr	r3, [sp, #28]
   15c3c:	subs	r0, r0, r2
   15c40:	sbcs	r0, r1, r3
   15c44:	blt	16358 <__assert_fail@plt+0x52d0>
   15c48:	umull	r0, r1, r6, r2
   15c4c:	mla	r1, r6, r3, r1
   15c50:	mov	r6, r0
   15c54:	mla	r7, r7, r2, r1
   15c58:	b	16ad0 <__assert_fail@plt+0x5a48>
   15c5c:	and	r0, r6, r7
   15c60:	cmn	r0, #1
   15c64:	beq	15c9c <__assert_fail@plt+0x4c14>
   15c68:	mov	r0, #0
   15c6c:	mov	r1, #-2147483648	; 0x80000000
   15c70:	mov	r2, r6
   15c74:	mov	r3, r7
   15c78:	mov	r8, #0
   15c7c:	mov	r9, #-2147483648	; 0x80000000
   15c80:	bl	1723c <__assert_fail@plt+0x61b4>
   15c84:	ldr	r2, [sp, #24]
   15c88:	ldr	r3, [sp, #28]
   15c8c:	mov	r4, #1
   15c90:	subs	r0, r0, r2
   15c94:	sbcs	r0, r1, r3
   15c98:	blt	15e74 <__assert_fail@plt+0x4dec>
   15c9c:	umull	r8, r0, r6, r2
   15ca0:	mov	r4, #0
   15ca4:	mla	r0, r6, r3, r0
   15ca8:	mla	r9, r7, r2, r0
   15cac:	cmp	r9, #0
   15cb0:	blt	15e74 <__assert_fail@plt+0x4dec>
   15cb4:	ldr	r3, [sp, #28]
   15cb8:	mvn	r0, #0
   15cbc:	mvn	r1, #-2147483648	; 0x80000000
   15cc0:	str	r4, [sp, #8]
   15cc4:	mvn	r6, #0
   15cc8:	mvn	r7, #-2147483648	; 0x80000000
   15ccc:	bl	17310 <__assert_fail@plt+0x6288>
   15cd0:	ldr	r4, [sp, #24]
   15cd4:	ldr	r3, [sp, #28]
   15cd8:	subs	r0, r0, r8
   15cdc:	mov	r2, #1
   15ce0:	sbcs	r0, r1, r9
   15ce4:	bge	15eac <__assert_fail@plt+0x4e24>
   15ce8:	b	15fe4 <__assert_fail@plt+0x4f5c>
   15cec:	and	r0, r6, r7
   15cf0:	cmn	r0, #1
   15cf4:	beq	15d30 <__assert_fail@plt+0x4ca8>
   15cf8:	mov	r0, #0
   15cfc:	mov	r1, #-2147483648	; 0x80000000
   15d00:	mov	r2, r6
   15d04:	mov	r3, r7
   15d08:	bl	1723c <__assert_fail@plt+0x61b4>
   15d0c:	ldr	r2, [sp, #24]
   15d10:	ldr	r3, [sp, #28]
   15d14:	mov	r4, #1
   15d18:	mov	r9, #-2147483648	; 0x80000000
   15d1c:	subs	r0, r0, r2
   15d20:	sbcs	r0, r1, r3
   15d24:	mov	r0, #0
   15d28:	str	r0, [sp, #8]
   15d2c:	blt	15ec0 <__assert_fail@plt+0x4e38>
   15d30:	umull	r1, r0, r6, r2
   15d34:	mov	r4, #0
   15d38:	mla	r0, r6, r3, r0
   15d3c:	str	r1, [sp, #8]
   15d40:	mla	r9, r7, r2, r0
   15d44:	cmp	r9, #0
   15d48:	blt	15ec0 <__assert_fail@plt+0x4e38>
   15d4c:	ldr	r3, [sp, #28]
   15d50:	mvn	r0, #0
   15d54:	mvn	r1, #-2147483648	; 0x80000000
   15d58:	str	r4, [sp, #4]
   15d5c:	mvn	r6, #0
   15d60:	mvn	r8, #-2147483648	; 0x80000000
   15d64:	bl	17310 <__assert_fail@plt+0x6288>
   15d68:	ldr	r4, [sp, #8]
   15d6c:	ldr	r2, [sp, #24]
   15d70:	ldr	r3, [sp, #28]
   15d74:	mov	r7, #1
   15d78:	subs	r0, r0, r4
   15d7c:	sbcs	r0, r1, r9
   15d80:	bge	15efc <__assert_fail@plt+0x4e74>
   15d84:	b	15f14 <__assert_fail@plt+0x4e8c>
   15d88:	mov	r0, #-2147483648	; 0x80000000
   15d8c:	mov	r1, #-2147483648	; 0x80000000
   15d90:	mov	r2, r8
   15d94:	mov	r3, r9
   15d98:	mov	r6, r4
   15d9c:	mov	r4, #0
   15da0:	str	r0, [sp, #8]
   15da4:	mov	r0, #0
   15da8:	bl	1723c <__assert_fail@plt+0x61b4>
   15dac:	ldr	r2, [sp, #24]
   15db0:	ldr	r3, [sp, #28]
   15db4:	mov	r7, #1
   15db8:	subs	r0, r0, r2
   15dbc:	sbcs	r0, r1, r3
   15dc0:	blt	15e34 <__assert_fail@plt+0x4dac>
   15dc4:	umull	r4, r0, r8, r2
   15dc8:	mov	r7, r6
   15dcc:	mla	r0, r8, r3, r0
   15dd0:	mla	r0, r9, r2, r0
   15dd4:	cmp	r0, #0
   15dd8:	str	r0, [sp, #8]
   15ddc:	blt	15e34 <__assert_fail@plt+0x4dac>
   15de0:	ldr	r3, [sp, #28]
   15de4:	mvn	r0, #0
   15de8:	mvn	r1, #-2147483648	; 0x80000000
   15dec:	mov	r9, r7
   15df0:	mvn	r6, #0
   15df4:	mvn	r7, #-2147483648	; 0x80000000
   15df8:	bl	17310 <__assert_fail@plt+0x6288>
   15dfc:	ldr	r8, [sp, #8]
   15e00:	ldr	r3, [sp, #24]
   15e04:	ldr	ip, [sp, #28]
   15e08:	subs	r0, r0, r4
   15e0c:	mov	r2, #1
   15e10:	sbcs	r0, r1, r8
   15e14:	blt	15e28 <__assert_fail@plt+0x4da0>
   15e18:	umull	r6, r0, r4, r3
   15e1c:	mov	r2, #0
   15e20:	mla	r0, r4, ip, r0
   15e24:	mla	r7, r8, r3, r0
   15e28:	orr	r3, r2, r9
   15e2c:	ldr	r9, [sp, #12]
   15e30:	b	16ad0 <__assert_fail@plt+0x5a48>
   15e34:	ldr	r8, [sp, #8]
   15e38:	mov	r0, #0
   15e3c:	mov	r1, #-2147483648	; 0x80000000
   15e40:	mov	r2, r4
   15e44:	mov	r9, r7
   15e48:	mov	r6, #0
   15e4c:	mov	r7, #-2147483648	; 0x80000000
   15e50:	mov	r3, r8
   15e54:	bl	1723c <__assert_fail@plt+0x61b4>
   15e58:	ldr	r3, [sp, #24]
   15e5c:	ldr	ip, [sp, #28]
   15e60:	mov	r2, #1
   15e64:	subs	r0, r0, r3
   15e68:	sbcs	r0, r1, ip
   15e6c:	bge	15e18 <__assert_fail@plt+0x4d90>
   15e70:	b	15e28 <__assert_fail@plt+0x4da0>
   15e74:	mov	r0, #0
   15e78:	mov	r1, #-2147483648	; 0x80000000
   15e7c:	mov	r2, r8
   15e80:	mov	r3, r9
   15e84:	str	r4, [sp, #8]
   15e88:	mov	r6, #0
   15e8c:	mov	r7, #-2147483648	; 0x80000000
   15e90:	bl	1723c <__assert_fail@plt+0x61b4>
   15e94:	ldr	r4, [sp, #24]
   15e98:	ldr	r3, [sp, #28]
   15e9c:	mov	r2, #1
   15ea0:	subs	r0, r0, r4
   15ea4:	sbcs	r0, r1, r3
   15ea8:	blt	15fe4 <__assert_fail@plt+0x4f5c>
   15eac:	umull	r6, r0, r8, r4
   15eb0:	mov	r2, #0
   15eb4:	mla	r0, r8, r3, r0
   15eb8:	mla	r7, r9, r4, r0
   15ebc:	b	15fe4 <__assert_fail@plt+0x4f5c>
   15ec0:	str	r4, [sp, #4]
   15ec4:	ldr	r4, [sp, #8]
   15ec8:	mov	r0, #0
   15ecc:	mov	r1, #-2147483648	; 0x80000000
   15ed0:	mov	r3, r9
   15ed4:	mov	r2, r4
   15ed8:	bl	1723c <__assert_fail@plt+0x61b4>
   15edc:	ldr	r2, [sp, #24]
   15ee0:	ldr	r3, [sp, #28]
   15ee4:	mov	r7, #1
   15ee8:	mov	r6, #0
   15eec:	mov	r8, #-2147483648	; 0x80000000
   15ef0:	subs	r0, r0, r2
   15ef4:	sbcs	r0, r1, r3
   15ef8:	blt	15f4c <__assert_fail@plt+0x4ec4>
   15efc:	umull	r6, r0, r4, r2
   15f00:	ldr	r7, [sp, #4]
   15f04:	mla	r0, r4, r3, r0
   15f08:	mla	r8, r9, r2, r0
   15f0c:	cmp	r8, #0
   15f10:	blt	15f4c <__assert_fail@plt+0x4ec4>
   15f14:	ldr	r3, [sp, #28]
   15f18:	mvn	r0, #0
   15f1c:	mvn	r1, #-2147483648	; 0x80000000
   15f20:	str	r7, [sp, #8]
   15f24:	mvn	r4, #0
   15f28:	mvn	r9, #-2147483648	; 0x80000000
   15f2c:	bl	17310 <__assert_fail@plt+0x6288>
   15f30:	ldr	r2, [sp, #24]
   15f34:	ldr	r3, [sp, #28]
   15f38:	subs	r0, r0, r6
   15f3c:	mov	r7, #1
   15f40:	sbcs	r0, r1, r8
   15f44:	bge	15f84 <__assert_fail@plt+0x4efc>
   15f48:	b	15f9c <__assert_fail@plt+0x4f14>
   15f4c:	mov	r0, #0
   15f50:	mov	r1, #-2147483648	; 0x80000000
   15f54:	mov	r2, r6
   15f58:	mov	r3, r8
   15f5c:	str	r7, [sp, #8]
   15f60:	bl	1723c <__assert_fail@plt+0x61b4>
   15f64:	ldr	r2, [sp, #24]
   15f68:	ldr	r3, [sp, #28]
   15f6c:	mov	r7, #1
   15f70:	mov	r4, #0
   15f74:	mov	r9, #-2147483648	; 0x80000000
   15f78:	subs	r0, r0, r2
   15f7c:	sbcs	r0, r1, r3
   15f80:	blt	15ff4 <__assert_fail@plt+0x4f6c>
   15f84:	umull	r4, r0, r6, r2
   15f88:	ldr	r7, [sp, #8]
   15f8c:	mla	r0, r6, r3, r0
   15f90:	mla	r9, r8, r2, r0
   15f94:	cmp	r9, #0
   15f98:	blt	15ff4 <__assert_fail@plt+0x4f6c>
   15f9c:	ldr	r3, [sp, #28]
   15fa0:	mvn	r0, #0
   15fa4:	mvn	r1, #-2147483648	; 0x80000000
   15fa8:	str	r7, [sp, #8]
   15fac:	mvn	r6, #0
   15fb0:	mvn	r7, #-2147483648	; 0x80000000
   15fb4:	bl	17310 <__assert_fail@plt+0x6288>
   15fb8:	ldr	r3, [sp, #24]
   15fbc:	ldr	ip, [sp, #28]
   15fc0:	subs	r0, r0, r4
   15fc4:	mov	r2, #1
   15fc8:	mov	r8, r4
   15fcc:	sbcs	r0, r1, r9
   15fd0:	blt	15fe4 <__assert_fail@plt+0x4f5c>
   15fd4:	umull	r6, r0, r8, r3
   15fd8:	mov	r2, #0
   15fdc:	mla	r0, r8, ip, r0
   15fe0:	mla	r7, r9, r3, r0
   15fe4:	ldr	r0, [sp, #8]
   15fe8:	ldr	r9, [sp, #12]
   15fec:	orr	r3, r2, r0
   15ff0:	b	16ad0 <__assert_fail@plt+0x5a48>
   15ff4:	mov	r0, #0
   15ff8:	mov	r1, #-2147483648	; 0x80000000
   15ffc:	mov	r2, r4
   16000:	mov	r3, r9
   16004:	str	r7, [sp, #8]
   16008:	mov	r8, r4
   1600c:	bl	1723c <__assert_fail@plt+0x61b4>
   16010:	ldr	r3, [sp, #24]
   16014:	ldr	ip, [sp, #28]
   16018:	mov	r2, #1
   1601c:	mov	r6, #0
   16020:	mov	r7, #-2147483648	; 0x80000000
   16024:	subs	r0, r0, r3
   16028:	sbcs	r0, r1, ip
   1602c:	bge	15fd4 <__assert_fail@plt+0x4f4c>
   16030:	b	15fe4 <__assert_fail@plt+0x4f5c>
   16034:	and	r0, r6, r7
   16038:	cmn	r0, #1
   1603c:	beq	16078 <__assert_fail@plt+0x4ff0>
   16040:	mov	r0, #0
   16044:	mov	r1, #-2147483648	; 0x80000000
   16048:	mov	r2, r6
   1604c:	mov	r3, r7
   16050:	bl	1723c <__assert_fail@plt+0x61b4>
   16054:	ldr	r2, [sp, #24]
   16058:	ldr	r3, [sp, #28]
   1605c:	mov	r4, #1
   16060:	mov	r9, #-2147483648	; 0x80000000
   16064:	subs	r0, r0, r2
   16068:	sbcs	r0, r1, r3
   1606c:	mov	r0, #0
   16070:	str	r0, [sp, #8]
   16074:	blt	16388 <__assert_fail@plt+0x5300>
   16078:	umull	r1, r0, r6, r2
   1607c:	mov	r4, #0
   16080:	mla	r0, r6, r3, r0
   16084:	str	r1, [sp, #8]
   16088:	mla	r9, r7, r2, r0
   1608c:	cmp	r9, #0
   16090:	blt	16388 <__assert_fail@plt+0x5300>
   16094:	ldr	r3, [sp, #28]
   16098:	mvn	r0, #0
   1609c:	mvn	r1, #-2147483648	; 0x80000000
   160a0:	str	r4, [sp, #4]
   160a4:	mvn	r8, #0
   160a8:	mvn	r4, #-2147483648	; 0x80000000
   160ac:	bl	17310 <__assert_fail@plt+0x6288>
   160b0:	ldr	r6, [sp, #8]
   160b4:	ldr	r2, [sp, #24]
   160b8:	ldr	r3, [sp, #28]
   160bc:	mov	r7, #1
   160c0:	subs	r0, r0, r6
   160c4:	sbcs	r0, r1, r9
   160c8:	bge	163c4 <__assert_fail@plt+0x533c>
   160cc:	b	163dc <__assert_fail@plt+0x5354>
   160d0:	and	r0, r6, r7
   160d4:	cmn	r0, #1
   160d8:	beq	16100 <__assert_fail@plt+0x5078>
   160dc:	mov	r0, #0
   160e0:	mov	r1, #-2147483648	; 0x80000000
   160e4:	mov	r2, r6
   160e8:	mov	r3, r7
   160ec:	bl	1723c <__assert_fail@plt+0x61b4>
   160f0:	ldr	r3, [sp, #28]
   160f4:	subs	r0, r0, #1024	; 0x400
   160f8:	sbcs	r0, r1, #0
   160fc:	blt	16358 <__assert_fail@plt+0x52d0>
   16100:	lsl	r0, r7, #10
   16104:	orr	r7, r0, r6, lsr #22
   16108:	lsl	r6, r6, #10
   1610c:	b	16ad0 <__assert_fail@plt+0x5a48>
   16110:	and	r0, r6, r7
   16114:	cmn	r0, #1
   16118:	beq	16154 <__assert_fail@plt+0x50cc>
   1611c:	mov	r0, #0
   16120:	mov	r1, #-2147483648	; 0x80000000
   16124:	mov	r2, r6
   16128:	mov	r3, r7
   1612c:	bl	1723c <__assert_fail@plt+0x61b4>
   16130:	ldr	r2, [sp, #24]
   16134:	ldr	r3, [sp, #28]
   16138:	mov	r4, #1
   1613c:	mov	r9, #-2147483648	; 0x80000000
   16140:	subs	r0, r0, r2
   16144:	sbcs	r0, r1, r3
   16148:	mov	r0, #0
   1614c:	str	r0, [sp, #8]
   16150:	blt	166a0 <__assert_fail@plt+0x5618>
   16154:	umull	r1, r0, r6, r2
   16158:	mov	r4, #0
   1615c:	mla	r0, r6, r3, r0
   16160:	str	r1, [sp, #8]
   16164:	mla	r9, r7, r2, r0
   16168:	cmp	r9, #0
   1616c:	blt	166a0 <__assert_fail@plt+0x5618>
   16170:	ldr	r3, [sp, #28]
   16174:	mvn	r0, #0
   16178:	mvn	r1, #-2147483648	; 0x80000000
   1617c:	str	r4, [sp, #4]
   16180:	mvn	r8, #0
   16184:	mvn	r4, #-2147483648	; 0x80000000
   16188:	bl	17310 <__assert_fail@plt+0x6288>
   1618c:	ldr	r6, [sp, #8]
   16190:	ldr	r2, [sp, #24]
   16194:	ldr	r3, [sp, #28]
   16198:	mov	r7, #1
   1619c:	subs	r0, r0, r6
   161a0:	sbcs	r0, r1, r9
   161a4:	bge	166dc <__assert_fail@plt+0x5654>
   161a8:	b	166f4 <__assert_fail@plt+0x566c>
   161ac:	and	r0, r6, r7
   161b0:	cmn	r0, #1
   161b4:	beq	161f0 <__assert_fail@plt+0x5168>
   161b8:	mov	r0, #0
   161bc:	mov	r1, #-2147483648	; 0x80000000
   161c0:	mov	r2, r6
   161c4:	mov	r3, r7
   161c8:	bl	1723c <__assert_fail@plt+0x61b4>
   161cc:	ldr	r2, [sp, #24]
   161d0:	ldr	r3, [sp, #28]
   161d4:	mov	r4, #1
   161d8:	mov	r8, #-2147483648	; 0x80000000
   161dc:	subs	r0, r0, r2
   161e0:	sbcs	r0, r1, r3
   161e4:	mov	r0, #0
   161e8:	str	r0, [sp, #8]
   161ec:	blt	1691c <__assert_fail@plt+0x5894>
   161f0:	umull	r1, r0, r6, r2
   161f4:	mov	r4, #0
   161f8:	mla	r0, r6, r3, r0
   161fc:	str	r1, [sp, #8]
   16200:	mla	r8, r7, r2, r0
   16204:	cmp	r8, #0
   16208:	blt	1691c <__assert_fail@plt+0x5894>
   1620c:	ldr	r3, [sp, #28]
   16210:	mvn	r0, #0
   16214:	mvn	r1, #-2147483648	; 0x80000000
   16218:	str	r4, [sp, #4]
   1621c:	mvn	r9, #0
   16220:	mvn	r4, #-2147483648	; 0x80000000
   16224:	bl	17310 <__assert_fail@plt+0x6288>
   16228:	ldr	r6, [sp, #8]
   1622c:	ldr	r2, [sp, #24]
   16230:	ldr	r3, [sp, #28]
   16234:	mov	r7, #1
   16238:	subs	r0, r0, r6
   1623c:	sbcs	r0, r1, r8
   16240:	bge	16958 <__assert_fail@plt+0x58d0>
   16244:	b	16970 <__assert_fail@plt+0x58e8>
   16248:	and	r0, r6, r7
   1624c:	cmn	r0, #1
   16250:	beq	1628c <__assert_fail@plt+0x5204>
   16254:	mov	r0, #0
   16258:	mov	r1, #-2147483648	; 0x80000000
   1625c:	mov	r2, r6
   16260:	mov	r3, r7
   16264:	bl	1723c <__assert_fail@plt+0x61b4>
   16268:	ldr	r2, [sp, #24]
   1626c:	ldr	r3, [sp, #28]
   16270:	mov	r4, #1
   16274:	mov	r9, #-2147483648	; 0x80000000
   16278:	subs	r0, r0, r2
   1627c:	sbcs	r0, r1, r3
   16280:	mov	r0, #0
   16284:	str	r0, [sp, #8]
   16288:	blt	16b38 <__assert_fail@plt+0x5ab0>
   1628c:	umull	r1, r0, r6, r2
   16290:	mov	r4, #0
   16294:	mla	r0, r6, r3, r0
   16298:	str	r1, [sp, #8]
   1629c:	mla	r9, r7, r2, r0
   162a0:	cmp	r9, #0
   162a4:	blt	16b38 <__assert_fail@plt+0x5ab0>
   162a8:	ldr	r3, [sp, #28]
   162ac:	mvn	r0, #0
   162b0:	mvn	r1, #-2147483648	; 0x80000000
   162b4:	str	r4, [sp]
   162b8:	mvn	r8, #-2147483648	; 0x80000000
   162bc:	str	r0, [sp, #4]
   162c0:	mvn	r0, #0
   162c4:	bl	17310 <__assert_fail@plt+0x6288>
   162c8:	ldr	r6, [sp, #8]
   162cc:	ldr	r2, [sp, #24]
   162d0:	ldr	r3, [sp, #28]
   162d4:	mov	r7, #1
   162d8:	subs	r0, r0, r6
   162dc:	sbcs	r0, r1, r9
   162e0:	bge	16b78 <__assert_fail@plt+0x5af0>
   162e4:	b	16b94 <__assert_fail@plt+0x5b0c>
   162e8:	and	r0, r6, r7
   162ec:	cmn	r0, #1
   162f0:	beq	16318 <__assert_fail@plt+0x5290>
   162f4:	mov	r0, #0
   162f8:	mov	r1, #-2147483648	; 0x80000000
   162fc:	mov	r2, r6
   16300:	mov	r3, r7
   16304:	bl	1723c <__assert_fail@plt+0x61b4>
   16308:	ldr	r3, [sp, #28]
   1630c:	subs	r0, r0, #512	; 0x200
   16310:	sbcs	r0, r1, #0
   16314:	blt	16358 <__assert_fail@plt+0x52d0>
   16318:	lsl	r0, r7, #9
   1631c:	orr	r7, r0, r6, lsr #23
   16320:	lsl	r6, r6, #9
   16324:	b	16ad0 <__assert_fail@plt+0x5a48>
   16328:	and	r0, r6, r7
   1632c:	cmn	r0, #1
   16330:	beq	16378 <__assert_fail@plt+0x52f0>
   16334:	mov	r0, #0
   16338:	mov	r1, #-2147483648	; 0x80000000
   1633c:	mov	r2, r6
   16340:	mov	r3, r7
   16344:	bl	1723c <__assert_fail@plt+0x61b4>
   16348:	ldr	r3, [sp, #28]
   1634c:	subs	r0, r0, #2
   16350:	sbcs	r0, r1, #0
   16354:	bge	16378 <__assert_fail@plt+0x52f0>
   16358:	mvn	r0, #-2147483648	; 0x80000000
   1635c:	cmp	r7, #0
   16360:	mvn	r6, #0
   16364:	mov	r3, #1
   16368:	movlt	r0, #-2147483648	; 0x80000000
   1636c:	movwlt	r6, #0
   16370:	mov	r7, r0
   16374:	b	16ad0 <__assert_fail@plt+0x5a48>
   16378:	lsl	r0, r7, #1
   1637c:	orr	r7, r0, r6, lsr #31
   16380:	lsl	r6, r6, #1
   16384:	b	16ad0 <__assert_fail@plt+0x5a48>
   16388:	ldr	r6, [sp, #8]
   1638c:	mov	r0, #0
   16390:	mov	r1, #-2147483648	; 0x80000000
   16394:	mov	r3, r9
   16398:	str	r4, [sp, #4]
   1639c:	mov	r2, r6
   163a0:	bl	1723c <__assert_fail@plt+0x61b4>
   163a4:	ldr	r2, [sp, #24]
   163a8:	ldr	r3, [sp, #28]
   163ac:	mov	r7, #1
   163b0:	mov	r8, #0
   163b4:	mov	r4, #-2147483648	; 0x80000000
   163b8:	subs	r0, r0, r2
   163bc:	sbcs	r0, r1, r3
   163c0:	blt	16414 <__assert_fail@plt+0x538c>
   163c4:	umull	r8, r0, r6, r2
   163c8:	ldr	r7, [sp, #4]
   163cc:	mla	r0, r6, r3, r0
   163d0:	mla	r4, r9, r2, r0
   163d4:	cmp	r4, #0
   163d8:	blt	16414 <__assert_fail@plt+0x538c>
   163dc:	ldr	r3, [sp, #28]
   163e0:	mvn	r0, #0
   163e4:	mvn	r1, #-2147483648	; 0x80000000
   163e8:	str	r7, [sp, #8]
   163ec:	mvn	r7, #0
   163f0:	mvn	r9, #-2147483648	; 0x80000000
   163f4:	bl	17310 <__assert_fail@plt+0x6288>
   163f8:	ldr	r2, [sp, #24]
   163fc:	ldr	r3, [sp, #28]
   16400:	subs	r0, r0, r8
   16404:	mov	r6, #1
   16408:	sbcs	r0, r1, r4
   1640c:	bge	1644c <__assert_fail@plt+0x53c4>
   16410:	b	16464 <__assert_fail@plt+0x53dc>
   16414:	mov	r0, #0
   16418:	mov	r1, #-2147483648	; 0x80000000
   1641c:	mov	r2, r8
   16420:	mov	r3, r4
   16424:	str	r7, [sp, #8]
   16428:	bl	1723c <__assert_fail@plt+0x61b4>
   1642c:	ldr	r2, [sp, #24]
   16430:	ldr	r3, [sp, #28]
   16434:	mov	r6, #1
   16438:	mov	r7, #0
   1643c:	mov	r9, #-2147483648	; 0x80000000
   16440:	subs	r0, r0, r2
   16444:	sbcs	r0, r1, r3
   16448:	blt	164a4 <__assert_fail@plt+0x541c>
   1644c:	umull	r7, r0, r8, r2
   16450:	ldr	r6, [sp, #8]
   16454:	mla	r0, r8, r3, r0
   16458:	mla	r9, r4, r2, r0
   1645c:	cmp	r9, #0
   16460:	blt	164a4 <__assert_fail@plt+0x541c>
   16464:	ldr	r3, [sp, #28]
   16468:	mvn	r0, #0
   1646c:	mvn	r1, #-2147483648	; 0x80000000
   16470:	str	r6, [sp, #8]
   16474:	mvn	r8, #0
   16478:	mvn	r4, #-2147483648	; 0x80000000
   1647c:	bl	17310 <__assert_fail@plt+0x6288>
   16480:	ldr	r2, [sp, #24]
   16484:	ldr	r3, [sp, #28]
   16488:	subs	r0, r0, r7
   1648c:	sbcs	r0, r1, r9
   16490:	bge	164e8 <__assert_fail@plt+0x5460>
   16494:	mov	r0, #1
   16498:	mov	r6, #0
   1649c:	str	r0, [sp, #8]
   164a0:	b	16500 <__assert_fail@plt+0x5478>
   164a4:	mov	r0, #0
   164a8:	mov	r1, #-2147483648	; 0x80000000
   164ac:	mov	r2, r7
   164b0:	mov	r3, r9
   164b4:	str	r6, [sp, #8]
   164b8:	bl	1723c <__assert_fail@plt+0x61b4>
   164bc:	ldr	r2, [sp, #24]
   164c0:	ldr	r3, [sp, #28]
   164c4:	subs	r0, r0, r2
   164c8:	sbcs	r0, r1, r3
   164cc:	bge	164e8 <__assert_fail@plt+0x5460>
   164d0:	mov	r0, #1
   164d4:	mov	r8, #0
   164d8:	mov	r4, #-2147483648	; 0x80000000
   164dc:	mov	r6, #0
   164e0:	str	r0, [sp, #8]
   164e4:	b	16538 <__assert_fail@plt+0x54b0>
   164e8:	umull	r8, r0, r7, r2
   164ec:	mov	r6, #0
   164f0:	mla	r0, r7, r3, r0
   164f4:	mla	r4, r9, r2, r0
   164f8:	cmp	r4, #0
   164fc:	blt	16538 <__assert_fail@plt+0x54b0>
   16500:	ldr	r3, [sp, #28]
   16504:	mvn	r0, #0
   16508:	mvn	r1, #-2147483648	; 0x80000000
   1650c:	mvn	r9, #0
   16510:	mvn	r7, #-2147483648	; 0x80000000
   16514:	bl	17310 <__assert_fail@plt+0x6288>
   16518:	ldr	r2, [sp, #24]
   1651c:	ldr	r3, [sp, #28]
   16520:	subs	r0, r0, r8
   16524:	sbcs	r0, r1, r4
   16528:	bge	16574 <__assert_fail@plt+0x54ec>
   1652c:	mov	r0, #1
   16530:	str	r0, [sp, #8]
   16534:	b	16588 <__assert_fail@plt+0x5500>
   16538:	mov	r0, #0
   1653c:	mov	r1, #-2147483648	; 0x80000000
   16540:	mov	r2, r8
   16544:	mov	r3, r4
   16548:	bl	1723c <__assert_fail@plt+0x61b4>
   1654c:	ldr	r2, [sp, #24]
   16550:	ldr	r3, [sp, #28]
   16554:	subs	r0, r0, r2
   16558:	sbcs	r0, r1, r3
   1655c:	bge	16574 <__assert_fail@plt+0x54ec>
   16560:	mov	r0, #1
   16564:	mov	r9, #0
   16568:	mov	r7, #-2147483648	; 0x80000000
   1656c:	str	r0, [sp, #8]
   16570:	b	165c4 <__assert_fail@plt+0x553c>
   16574:	umull	r9, r0, r8, r2
   16578:	mla	r0, r8, r3, r0
   1657c:	mla	r7, r4, r2, r0
   16580:	cmp	r7, #0
   16584:	blt	165c4 <__assert_fail@plt+0x553c>
   16588:	ldr	r3, [sp, #28]
   1658c:	mvn	r0, #0
   16590:	mvn	r1, #-2147483648	; 0x80000000
   16594:	mvn	r8, #0
   16598:	mvn	r4, #-2147483648	; 0x80000000
   1659c:	bl	17310 <__assert_fail@plt+0x6288>
   165a0:	ldr	r2, [sp, #24]
   165a4:	ldr	r3, [sp, #28]
   165a8:	subs	r0, r0, r9
   165ac:	sbcs	r0, r1, r7
   165b0:	bge	16604 <__assert_fail@plt+0x557c>
   165b4:	ldr	r9, [sp, #12]
   165b8:	mov	r0, #1
   165bc:	str	r0, [sp, #8]
   165c0:	b	1661c <__assert_fail@plt+0x5594>
   165c4:	mov	r0, #0
   165c8:	mov	r1, #-2147483648	; 0x80000000
   165cc:	mov	r2, r9
   165d0:	mov	r3, r7
   165d4:	bl	1723c <__assert_fail@plt+0x61b4>
   165d8:	ldr	r2, [sp, #24]
   165dc:	ldr	r3, [sp, #28]
   165e0:	subs	r0, r0, r2
   165e4:	sbcs	r0, r1, r3
   165e8:	bge	16604 <__assert_fail@plt+0x557c>
   165ec:	ldr	r9, [sp, #12]
   165f0:	mov	r0, #1
   165f4:	mov	r8, #0
   165f8:	mov	r4, #-2147483648	; 0x80000000
   165fc:	str	r0, [sp, #8]
   16600:	b	1666c <__assert_fail@plt+0x55e4>
   16604:	umull	r8, r0, r9, r2
   16608:	mla	r0, r9, r3, r0
   1660c:	ldr	r9, [sp, #12]
   16610:	mla	r4, r7, r2, r0
   16614:	cmp	r4, #0
   16618:	blt	1666c <__assert_fail@plt+0x55e4>
   1661c:	ldr	r3, [sp, #28]
   16620:	mvn	r0, #0
   16624:	mvn	r1, #-2147483648	; 0x80000000
   16628:	mvn	r6, #0
   1662c:	bl	17310 <__assert_fail@plt+0x6288>
   16630:	ldr	r7, [sp, #24]
   16634:	ldr	r3, [sp, #28]
   16638:	subs	r0, r0, r8
   1663c:	mov	r2, #1
   16640:	sbcs	r0, r1, r4
   16644:	mvn	r0, #-2147483648	; 0x80000000
   16648:	blt	1665c <__assert_fail@plt+0x55d4>
   1664c:	umull	r6, r0, r8, r7
   16650:	mov	r2, #0
   16654:	mla	r0, r8, r3, r0
   16658:	mla	r0, r4, r7, r0
   1665c:	ldr	r1, [sp, #8]
   16660:	mov	r7, r0
   16664:	orr	r3, r2, r1
   16668:	b	16ad0 <__assert_fail@plt+0x5a48>
   1666c:	mov	r0, #0
   16670:	mov	r1, #-2147483648	; 0x80000000
   16674:	mov	r2, r8
   16678:	mov	r3, r4
   1667c:	bl	1723c <__assert_fail@plt+0x61b4>
   16680:	ldr	r7, [sp, #24]
   16684:	ldr	r3, [sp, #28]
   16688:	mov	r2, #1
   1668c:	subs	r0, r0, r7
   16690:	sbcs	r0, r1, r3
   16694:	mov	r0, #-2147483648	; 0x80000000
   16698:	bge	1664c <__assert_fail@plt+0x55c4>
   1669c:	b	1665c <__assert_fail@plt+0x55d4>
   166a0:	ldr	r6, [sp, #8]
   166a4:	mov	r0, #0
   166a8:	mov	r1, #-2147483648	; 0x80000000
   166ac:	mov	r3, r9
   166b0:	str	r4, [sp, #4]
   166b4:	mov	r2, r6
   166b8:	bl	1723c <__assert_fail@plt+0x61b4>
   166bc:	ldr	r2, [sp, #24]
   166c0:	ldr	r3, [sp, #28]
   166c4:	mov	r7, #1
   166c8:	mov	r8, #0
   166cc:	mov	r4, #-2147483648	; 0x80000000
   166d0:	subs	r0, r0, r2
   166d4:	sbcs	r0, r1, r3
   166d8:	blt	16730 <__assert_fail@plt+0x56a8>
   166dc:	umull	r8, r0, r6, r2
   166e0:	ldr	r7, [sp, #4]
   166e4:	mla	r0, r6, r3, r0
   166e8:	mla	r4, r9, r2, r0
   166ec:	cmp	r4, #0
   166f0:	blt	16730 <__assert_fail@plt+0x56a8>
   166f4:	ldr	r3, [sp, #28]
   166f8:	mvn	r0, #0
   166fc:	mvn	r1, #-2147483648	; 0x80000000
   16700:	str	r7, [sp, #4]
   16704:	mvn	r7, #0
   16708:	mvn	r9, #-2147483648	; 0x80000000
   1670c:	bl	17310 <__assert_fail@plt+0x6288>
   16710:	ldr	r2, [sp, #24]
   16714:	ldr	r3, [sp, #28]
   16718:	subs	r0, r0, r8
   1671c:	mov	r6, #1
   16720:	sbcs	r0, r1, r4
   16724:	str	r6, [sp, #8]
   16728:	bge	1676c <__assert_fail@plt+0x56e4>
   1672c:	b	16788 <__assert_fail@plt+0x5700>
   16730:	mov	r0, #0
   16734:	mov	r1, #-2147483648	; 0x80000000
   16738:	mov	r2, r8
   1673c:	mov	r3, r4
   16740:	str	r7, [sp, #4]
   16744:	bl	1723c <__assert_fail@plt+0x61b4>
   16748:	ldr	r2, [sp, #24]
   1674c:	ldr	r3, [sp, #28]
   16750:	mov	r7, #1
   16754:	mov	r9, #-2147483648	; 0x80000000
   16758:	str	r7, [sp, #8]
   1675c:	mov	r7, #0
   16760:	subs	r0, r0, r2
   16764:	sbcs	r0, r1, r3
   16768:	blt	167c0 <__assert_fail@plt+0x5738>
   1676c:	umull	r7, r0, r8, r2
   16770:	mla	r0, r8, r3, r0
   16774:	mla	r9, r4, r2, r0
   16778:	ldr	r0, [sp, #4]
   1677c:	cmp	r9, #0
   16780:	str	r0, [sp, #8]
   16784:	blt	167c0 <__assert_fail@plt+0x5738>
   16788:	ldr	r3, [sp, #28]
   1678c:	mvn	r0, #0
   16790:	mvn	r1, #-2147483648	; 0x80000000
   16794:	mvn	r4, #0
   16798:	mvn	r8, #-2147483648	; 0x80000000
   1679c:	bl	17310 <__assert_fail@plt+0x6288>
   167a0:	ldr	r2, [sp, #24]
   167a4:	ldr	r3, [sp, #28]
   167a8:	subs	r0, r0, r7
   167ac:	sbcs	r0, r1, r9
   167b0:	bge	167fc <__assert_fail@plt+0x5774>
   167b4:	mov	r0, #1
   167b8:	str	r0, [sp, #8]
   167bc:	b	16810 <__assert_fail@plt+0x5788>
   167c0:	mov	r0, #0
   167c4:	mov	r1, #-2147483648	; 0x80000000
   167c8:	mov	r2, r7
   167cc:	mov	r3, r9
   167d0:	bl	1723c <__assert_fail@plt+0x61b4>
   167d4:	ldr	r2, [sp, #24]
   167d8:	ldr	r3, [sp, #28]
   167dc:	subs	r0, r0, r2
   167e0:	sbcs	r0, r1, r3
   167e4:	bge	167fc <__assert_fail@plt+0x5774>
   167e8:	mov	r0, #1
   167ec:	mov	r4, #0
   167f0:	mov	r8, #-2147483648	; 0x80000000
   167f4:	str	r0, [sp, #8]
   167f8:	b	16844 <__assert_fail@plt+0x57bc>
   167fc:	umull	r4, r0, r7, r2
   16800:	mla	r0, r7, r3, r0
   16804:	mla	r8, r9, r2, r0
   16808:	cmp	r8, #0
   1680c:	blt	16844 <__assert_fail@plt+0x57bc>
   16810:	ldr	r3, [sp, #28]
   16814:	mvn	r0, #0
   16818:	mvn	r1, #-2147483648	; 0x80000000
   1681c:	mvn	r6, #0
   16820:	mvn	r9, #-2147483648	; 0x80000000
   16824:	bl	17310 <__assert_fail@plt+0x6288>
   16828:	ldr	r2, [sp, #24]
   1682c:	ldr	r3, [sp, #28]
   16830:	subs	r0, r0, r4
   16834:	sbcs	r0, r1, r8
   16838:	bge	1687c <__assert_fail@plt+0x57f4>
   1683c:	mov	r8, #1
   16840:	b	16894 <__assert_fail@plt+0x580c>
   16844:	mov	r0, #0
   16848:	mov	r1, #-2147483648	; 0x80000000
   1684c:	mov	r2, r4
   16850:	mov	r3, r8
   16854:	bl	1723c <__assert_fail@plt+0x61b4>
   16858:	ldr	r2, [sp, #24]
   1685c:	ldr	r3, [sp, #28]
   16860:	subs	r0, r0, r2
   16864:	sbcs	r0, r1, r3
   16868:	bge	1687c <__assert_fail@plt+0x57f4>
   1686c:	mov	r8, #1
   16870:	mov	r6, #0
   16874:	mov	r9, #-2147483648	; 0x80000000
   16878:	b	168e4 <__assert_fail@plt+0x585c>
   1687c:	umull	r6, r0, r4, r2
   16880:	mla	r0, r4, r3, r0
   16884:	mla	r9, r8, r2, r0
   16888:	ldr	r8, [sp, #8]
   1688c:	cmp	r9, #0
   16890:	blt	168e4 <__assert_fail@plt+0x585c>
   16894:	ldr	r3, [sp, #28]
   16898:	mvn	r0, #0
   1689c:	mvn	r1, #-2147483648	; 0x80000000
   168a0:	mvn	r4, #0
   168a4:	mvn	r7, #-2147483648	; 0x80000000
   168a8:	bl	17310 <__assert_fail@plt+0x6288>
   168ac:	ldr	r3, [sp, #24]
   168b0:	ldr	ip, [sp, #28]
   168b4:	subs	r0, r0, r6
   168b8:	mov	r2, #1
   168bc:	sbcs	r0, r1, r9
   168c0:	blt	168d4 <__assert_fail@plt+0x584c>
   168c4:	umull	r4, r0, r6, r3
   168c8:	mov	r2, #0
   168cc:	mla	r0, r6, ip, r0
   168d0:	mla	r7, r9, r3, r0
   168d4:	ldr	r9, [sp, #12]
   168d8:	orr	r3, r2, r8
   168dc:	mov	r6, r4
   168e0:	b	16ad0 <__assert_fail@plt+0x5a48>
   168e4:	mov	r0, #0
   168e8:	mov	r1, #-2147483648	; 0x80000000
   168ec:	mov	r2, r6
   168f0:	mov	r3, r9
   168f4:	bl	1723c <__assert_fail@plt+0x61b4>
   168f8:	ldr	r3, [sp, #24]
   168fc:	ldr	ip, [sp, #28]
   16900:	mov	r2, #1
   16904:	mov	r4, #0
   16908:	mov	r7, #-2147483648	; 0x80000000
   1690c:	subs	r0, r0, r3
   16910:	sbcs	r0, r1, ip
   16914:	bge	168c4 <__assert_fail@plt+0x583c>
   16918:	b	168d4 <__assert_fail@plt+0x584c>
   1691c:	ldr	r6, [sp, #8]
   16920:	mov	r0, #0
   16924:	mov	r1, #-2147483648	; 0x80000000
   16928:	mov	r3, r8
   1692c:	str	r4, [sp, #4]
   16930:	mov	r2, r6
   16934:	bl	1723c <__assert_fail@plt+0x61b4>
   16938:	ldr	r2, [sp, #24]
   1693c:	ldr	r3, [sp, #28]
   16940:	mov	r7, #1
   16944:	mov	r9, #0
   16948:	mov	r4, #-2147483648	; 0x80000000
   1694c:	subs	r0, r0, r2
   16950:	sbcs	r0, r1, r3
   16954:	blt	169ac <__assert_fail@plt+0x5924>
   16958:	umull	r9, r0, r6, r2
   1695c:	ldr	r7, [sp, #4]
   16960:	mla	r0, r6, r3, r0
   16964:	mla	r4, r8, r2, r0
   16968:	cmp	r4, #0
   1696c:	blt	169ac <__assert_fail@plt+0x5924>
   16970:	ldr	r3, [sp, #28]
   16974:	mvn	r0, #0
   16978:	mvn	r1, #-2147483648	; 0x80000000
   1697c:	str	r7, [sp, #4]
   16980:	mvn	r8, #0
   16984:	mvn	r7, #-2147483648	; 0x80000000
   16988:	bl	17310 <__assert_fail@plt+0x6288>
   1698c:	ldr	r2, [sp, #24]
   16990:	ldr	r3, [sp, #28]
   16994:	subs	r0, r0, r9
   16998:	mov	r6, #1
   1699c:	sbcs	r0, r1, r4
   169a0:	str	r6, [sp, #8]
   169a4:	bge	169e8 <__assert_fail@plt+0x5960>
   169a8:	b	16a04 <__assert_fail@plt+0x597c>
   169ac:	mov	r0, #0
   169b0:	mov	r1, #-2147483648	; 0x80000000
   169b4:	mov	r2, r9
   169b8:	mov	r3, r4
   169bc:	str	r7, [sp, #4]
   169c0:	bl	1723c <__assert_fail@plt+0x61b4>
   169c4:	ldr	r2, [sp, #24]
   169c8:	ldr	r3, [sp, #28]
   169cc:	mov	r7, #1
   169d0:	mov	r8, #0
   169d4:	str	r7, [sp, #8]
   169d8:	mov	r7, #-2147483648	; 0x80000000
   169dc:	subs	r0, r0, r2
   169e0:	sbcs	r0, r1, r3
   169e4:	blt	16a38 <__assert_fail@plt+0x59b0>
   169e8:	umull	r8, r0, r9, r2
   169ec:	mla	r0, r9, r3, r0
   169f0:	mla	r7, r4, r2, r0
   169f4:	ldr	r0, [sp, #4]
   169f8:	cmp	r7, #0
   169fc:	str	r0, [sp, #8]
   16a00:	blt	16a38 <__assert_fail@plt+0x59b0>
   16a04:	ldr	r3, [sp, #28]
   16a08:	mvn	r0, #0
   16a0c:	mvn	r1, #-2147483648	; 0x80000000
   16a10:	mvn	r4, #0
   16a14:	mvn	r9, #-2147483648	; 0x80000000
   16a18:	bl	17310 <__assert_fail@plt+0x6288>
   16a1c:	ldr	r2, [sp, #24]
   16a20:	ldr	r3, [sp, #28]
   16a24:	subs	r0, r0, r8
   16a28:	sbcs	r0, r1, r7
   16a2c:	bge	16a70 <__assert_fail@plt+0x59e8>
   16a30:	mov	r8, #1
   16a34:	b	16a88 <__assert_fail@plt+0x5a00>
   16a38:	mov	r0, #0
   16a3c:	mov	r1, #-2147483648	; 0x80000000
   16a40:	mov	r2, r8
   16a44:	mov	r3, r7
   16a48:	bl	1723c <__assert_fail@plt+0x61b4>
   16a4c:	ldr	r2, [sp, #24]
   16a50:	ldr	r3, [sp, #28]
   16a54:	subs	r0, r0, r2
   16a58:	sbcs	r0, r1, r3
   16a5c:	bge	16a70 <__assert_fail@plt+0x59e8>
   16a60:	mov	r8, #1
   16a64:	mov	r4, #0
   16a68:	mov	r9, #-2147483648	; 0x80000000
   16a6c:	b	16b00 <__assert_fail@plt+0x5a78>
   16a70:	umull	r4, r0, r8, r2
   16a74:	mla	r0, r8, r3, r0
   16a78:	ldr	r8, [sp, #8]
   16a7c:	mla	r9, r7, r2, r0
   16a80:	cmp	r9, #0
   16a84:	blt	16b00 <__assert_fail@plt+0x5a78>
   16a88:	ldr	r3, [sp, #28]
   16a8c:	mvn	r0, #0
   16a90:	mvn	r1, #-2147483648	; 0x80000000
   16a94:	mvn	r6, #0
   16a98:	mvn	r7, #-2147483648	; 0x80000000
   16a9c:	bl	17310 <__assert_fail@plt+0x6288>
   16aa0:	ldr	r3, [sp, #24]
   16aa4:	ldr	ip, [sp, #28]
   16aa8:	subs	r0, r0, r4
   16aac:	mov	r2, #1
   16ab0:	sbcs	r0, r1, r9
   16ab4:	blt	16ac8 <__assert_fail@plt+0x5a40>
   16ab8:	umull	r6, r0, r4, r3
   16abc:	mov	r2, #0
   16ac0:	mla	r0, r4, ip, r0
   16ac4:	mla	r7, r9, r3, r0
   16ac8:	ldr	r9, [sp, #12]
   16acc:	orr	r3, r2, r8
   16ad0:	ldr	r1, [sp, #20]
   16ad4:	ldr	r2, [sp, #16]
   16ad8:	orr	r5, r3, r5
   16adc:	add	r0, r1, r2
   16ae0:	str	r0, [sl]
   16ae4:	ldrb	r0, [r1, r2]
   16ae8:	cmp	r0, #0
   16aec:	orrne	r5, r5, #2
   16af0:	strd	r6, [r9]
   16af4:	mov	r0, r5
   16af8:	sub	sp, fp, #28
   16afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b00:	mov	r0, #0
   16b04:	mov	r1, #-2147483648	; 0x80000000
   16b08:	mov	r2, r4
   16b0c:	mov	r3, r9
   16b10:	bl	1723c <__assert_fail@plt+0x61b4>
   16b14:	ldr	r3, [sp, #24]
   16b18:	ldr	ip, [sp, #28]
   16b1c:	mov	r2, #1
   16b20:	mov	r6, #0
   16b24:	mov	r7, #-2147483648	; 0x80000000
   16b28:	subs	r0, r0, r3
   16b2c:	sbcs	r0, r1, ip
   16b30:	bge	16ab8 <__assert_fail@plt+0x5a30>
   16b34:	b	16ac8 <__assert_fail@plt+0x5a40>
   16b38:	ldr	r6, [sp, #8]
   16b3c:	mov	r0, #0
   16b40:	mov	r1, #-2147483648	; 0x80000000
   16b44:	mov	r3, r9
   16b48:	str	r4, [sp]
   16b4c:	mov	r2, r6
   16b50:	bl	1723c <__assert_fail@plt+0x61b4>
   16b54:	ldr	r2, [sp, #24]
   16b58:	ldr	r3, [sp, #28]
   16b5c:	mov	r7, #1
   16b60:	mov	r8, #-2147483648	; 0x80000000
   16b64:	subs	r0, r0, r2
   16b68:	sbcs	r0, r1, r3
   16b6c:	mov	r0, #0
   16b70:	str	r0, [sp, #4]
   16b74:	blt	16bd4 <__assert_fail@plt+0x5b4c>
   16b78:	umull	r1, r0, r6, r2
   16b7c:	ldr	r7, [sp]
   16b80:	mla	r0, r6, r3, r0
   16b84:	str	r1, [sp, #4]
   16b88:	mla	r8, r9, r2, r0
   16b8c:	cmp	r8, #0
   16b90:	blt	16bd4 <__assert_fail@plt+0x5b4c>
   16b94:	ldr	r3, [sp, #28]
   16b98:	mvn	r0, #0
   16b9c:	mvn	r1, #-2147483648	; 0x80000000
   16ba0:	str	r7, [sp]
   16ba4:	mvn	r7, #0
   16ba8:	mvn	r4, #-2147483648	; 0x80000000
   16bac:	bl	17310 <__assert_fail@plt+0x6288>
   16bb0:	mov	r6, #1
   16bb4:	ldr	r2, [sp, #24]
   16bb8:	ldr	r3, [sp, #28]
   16bbc:	str	r6, [sp, #8]
   16bc0:	ldr	r6, [sp, #4]
   16bc4:	subs	r0, r0, r6
   16bc8:	sbcs	r0, r1, r8
   16bcc:	bge	16c14 <__assert_fail@plt+0x5b8c>
   16bd0:	b	16c30 <__assert_fail@plt+0x5ba8>
   16bd4:	ldr	r6, [sp, #4]
   16bd8:	mov	r0, #0
   16bdc:	mov	r1, #-2147483648	; 0x80000000
   16be0:	mov	r3, r8
   16be4:	str	r7, [sp]
   16be8:	mov	r2, r6
   16bec:	bl	1723c <__assert_fail@plt+0x61b4>
   16bf0:	ldr	r2, [sp, #24]
   16bf4:	ldr	r3, [sp, #28]
   16bf8:	mov	r7, #1
   16bfc:	mov	r4, #-2147483648	; 0x80000000
   16c00:	str	r7, [sp, #8]
   16c04:	mov	r7, #0
   16c08:	subs	r0, r0, r2
   16c0c:	sbcs	r0, r1, r3
   16c10:	blt	16c68 <__assert_fail@plt+0x5be0>
   16c14:	umull	r7, r0, r6, r2
   16c18:	mla	r0, r6, r3, r0
   16c1c:	mla	r4, r8, r2, r0
   16c20:	ldr	r0, [sp]
   16c24:	cmp	r4, #0
   16c28:	str	r0, [sp, #8]
   16c2c:	blt	16c68 <__assert_fail@plt+0x5be0>
   16c30:	ldr	r3, [sp, #28]
   16c34:	mvn	r0, #0
   16c38:	mvn	r1, #-2147483648	; 0x80000000
   16c3c:	mvn	r9, #0
   16c40:	mvn	r8, #-2147483648	; 0x80000000
   16c44:	bl	17310 <__assert_fail@plt+0x6288>
   16c48:	ldr	r2, [sp, #24]
   16c4c:	ldr	r3, [sp, #28]
   16c50:	subs	r0, r0, r7
   16c54:	sbcs	r0, r1, r4
   16c58:	bge	16ca4 <__assert_fail@plt+0x5c1c>
   16c5c:	mov	r0, #1
   16c60:	str	r0, [sp, #8]
   16c64:	b	16cb8 <__assert_fail@plt+0x5c30>
   16c68:	mov	r0, #0
   16c6c:	mov	r1, #-2147483648	; 0x80000000
   16c70:	mov	r2, r7
   16c74:	mov	r3, r4
   16c78:	bl	1723c <__assert_fail@plt+0x61b4>
   16c7c:	ldr	r2, [sp, #24]
   16c80:	ldr	r3, [sp, #28]
   16c84:	subs	r0, r0, r2
   16c88:	sbcs	r0, r1, r3
   16c8c:	bge	16ca4 <__assert_fail@plt+0x5c1c>
   16c90:	mov	r0, #1
   16c94:	mov	r9, #0
   16c98:	mov	r8, #-2147483648	; 0x80000000
   16c9c:	str	r0, [sp, #8]
   16ca0:	b	16cf0 <__assert_fail@plt+0x5c68>
   16ca4:	umull	r9, r0, r7, r2
   16ca8:	mla	r0, r7, r3, r0
   16cac:	mla	r8, r4, r2, r0
   16cb0:	cmp	r8, #0
   16cb4:	blt	16cf0 <__assert_fail@plt+0x5c68>
   16cb8:	ldr	r3, [sp, #28]
   16cbc:	mvn	r0, #0
   16cc0:	mvn	r1, #-2147483648	; 0x80000000
   16cc4:	mvn	r4, #0
   16cc8:	mvn	r7, #-2147483648	; 0x80000000
   16ccc:	bl	17310 <__assert_fail@plt+0x6288>
   16cd0:	ldr	r2, [sp, #24]
   16cd4:	ldr	r3, [sp, #28]
   16cd8:	subs	r0, r0, r9
   16cdc:	sbcs	r0, r1, r8
   16ce0:	bge	16d2c <__assert_fail@plt+0x5ca4>
   16ce4:	mov	r0, #1
   16ce8:	str	r0, [sp, #8]
   16cec:	b	16d40 <__assert_fail@plt+0x5cb8>
   16cf0:	mov	r0, #0
   16cf4:	mov	r1, #-2147483648	; 0x80000000
   16cf8:	mov	r2, r9
   16cfc:	mov	r3, r8
   16d00:	bl	1723c <__assert_fail@plt+0x61b4>
   16d04:	ldr	r2, [sp, #24]
   16d08:	ldr	r3, [sp, #28]
   16d0c:	subs	r0, r0, r2
   16d10:	sbcs	r0, r1, r3
   16d14:	bge	16d2c <__assert_fail@plt+0x5ca4>
   16d18:	mov	r0, #1
   16d1c:	mov	r4, #0
   16d20:	mov	r7, #-2147483648	; 0x80000000
   16d24:	str	r0, [sp, #8]
   16d28:	b	16d78 <__assert_fail@plt+0x5cf0>
   16d2c:	umull	r4, r0, r9, r2
   16d30:	mla	r0, r9, r3, r0
   16d34:	mla	r7, r8, r2, r0
   16d38:	cmp	r7, #0
   16d3c:	blt	16d78 <__assert_fail@plt+0x5cf0>
   16d40:	ldr	r3, [sp, #28]
   16d44:	mvn	r0, #0
   16d48:	mvn	r1, #-2147483648	; 0x80000000
   16d4c:	mvn	r8, #0
   16d50:	mvn	r9, #-2147483648	; 0x80000000
   16d54:	bl	17310 <__assert_fail@plt+0x6288>
   16d58:	ldr	r2, [sp, #24]
   16d5c:	ldr	r3, [sp, #28]
   16d60:	subs	r0, r0, r4
   16d64:	sbcs	r0, r1, r7
   16d68:	bge	16db4 <__assert_fail@plt+0x5d2c>
   16d6c:	mov	r0, #1
   16d70:	str	r0, [sp, #8]
   16d74:	b	16dc8 <__assert_fail@plt+0x5d40>
   16d78:	mov	r0, #0
   16d7c:	mov	r1, #-2147483648	; 0x80000000
   16d80:	mov	r2, r4
   16d84:	mov	r3, r7
   16d88:	bl	1723c <__assert_fail@plt+0x61b4>
   16d8c:	ldr	r2, [sp, #24]
   16d90:	ldr	r3, [sp, #28]
   16d94:	subs	r0, r0, r2
   16d98:	sbcs	r0, r1, r3
   16d9c:	bge	16db4 <__assert_fail@plt+0x5d2c>
   16da0:	mov	r0, #1
   16da4:	mov	r8, #0
   16da8:	mov	r9, #-2147483648	; 0x80000000
   16dac:	str	r0, [sp, #8]
   16db0:	b	16e04 <__assert_fail@plt+0x5d7c>
   16db4:	umull	r8, r0, r4, r2
   16db8:	mla	r0, r4, r3, r0
   16dbc:	mla	r9, r7, r2, r0
   16dc0:	cmp	r9, #0
   16dc4:	blt	16e04 <__assert_fail@plt+0x5d7c>
   16dc8:	ldr	r3, [sp, #28]
   16dcc:	mvn	r0, #0
   16dd0:	mvn	r1, #-2147483648	; 0x80000000
   16dd4:	mvn	r4, #0
   16dd8:	mvn	r6, #-2147483648	; 0x80000000
   16ddc:	bl	17310 <__assert_fail@plt+0x6288>
   16de0:	ldr	r2, [sp, #24]
   16de4:	ldr	r3, [sp, #28]
   16de8:	subs	r0, r0, r8
   16dec:	sbcs	r0, r1, r9
   16df0:	bge	16e44 <__assert_fail@plt+0x5dbc>
   16df4:	ldr	r9, [sp, #12]
   16df8:	mov	r0, #1
   16dfc:	str	r0, [sp, #8]
   16e00:	b	16e5c <__assert_fail@plt+0x5dd4>
   16e04:	mov	r0, #0
   16e08:	mov	r1, #-2147483648	; 0x80000000
   16e0c:	mov	r2, r8
   16e10:	mov	r3, r9
   16e14:	bl	1723c <__assert_fail@plt+0x61b4>
   16e18:	ldr	r2, [sp, #24]
   16e1c:	ldr	r3, [sp, #28]
   16e20:	subs	r0, r0, r2
   16e24:	sbcs	r0, r1, r3
   16e28:	bge	16e44 <__assert_fail@plt+0x5dbc>
   16e2c:	ldr	r9, [sp, #12]
   16e30:	mov	r0, #1
   16e34:	mov	r4, #0
   16e38:	mov	r6, #-2147483648	; 0x80000000
   16e3c:	str	r0, [sp, #8]
   16e40:	b	16ea8 <__assert_fail@plt+0x5e20>
   16e44:	umull	r4, r0, r8, r2
   16e48:	mla	r0, r8, r3, r0
   16e4c:	mla	r6, r9, r2, r0
   16e50:	ldr	r9, [sp, #12]
   16e54:	cmp	r6, #0
   16e58:	blt	16ea8 <__assert_fail@plt+0x5e20>
   16e5c:	ldr	r3, [sp, #28]
   16e60:	mvn	r0, #0
   16e64:	mvn	r1, #-2147483648	; 0x80000000
   16e68:	mov	r8, r6
   16e6c:	mvn	r6, #0
   16e70:	mvn	r7, #-2147483648	; 0x80000000
   16e74:	bl	17310 <__assert_fail@plt+0x6288>
   16e78:	ldr	r3, [sp, #24]
   16e7c:	ldr	ip, [sp, #28]
   16e80:	subs	r0, r0, r4
   16e84:	mov	r2, #1
   16e88:	sbcs	r0, r1, r8
   16e8c:	blt	16ea0 <__assert_fail@plt+0x5e18>
   16e90:	umull	r6, r0, r4, r3
   16e94:	mov	r2, #0
   16e98:	mla	r0, r4, ip, r0
   16e9c:	mla	r7, r8, r3, r0
   16ea0:	ldr	r0, [sp, #8]
   16ea4:	b	15fec <__assert_fail@plt+0x4f64>
   16ea8:	mov	r0, #0
   16eac:	mov	r1, #-2147483648	; 0x80000000
   16eb0:	mov	r2, r4
   16eb4:	mov	r3, r6
   16eb8:	bl	1723c <__assert_fail@plt+0x61b4>
   16ebc:	ldr	r3, [sp, #24]
   16ec0:	ldr	ip, [sp, #28]
   16ec4:	mov	r8, r6
   16ec8:	mov	r2, #1
   16ecc:	mov	r6, #0
   16ed0:	mov	r7, #-2147483648	; 0x80000000
   16ed4:	subs	r0, r0, r3
   16ed8:	sbcs	r0, r1, ip
   16edc:	bge	16e90 <__assert_fail@plt+0x5e08>
   16ee0:	b	16ea0 <__assert_fail@plt+0x5e18>
   16ee4:	movw	r0, #32873	; 0x8069
   16ee8:	movw	r1, #32911	; 0x808f
   16eec:	movw	r3, #32927	; 0x809f
   16ef0:	mov	r2, #85	; 0x55
   16ef4:	movt	r0, #1
   16ef8:	movt	r1, #1
   16efc:	movt	r3, #1
   16f00:	bl	11088 <__assert_fail@plt>
   16f04:	clz	r2, r1
   16f08:	clz	r3, r0
   16f0c:	lsr	r2, r2, #5
   16f10:	lsr	r3, r3, #5
   16f14:	orrs	r2, r3, r2
   16f18:	movwne	r1, #1
   16f1c:	movwne	r0, #1
   16f20:	cmp	r1, #0
   16f24:	beq	16f54 <__assert_fail@plt+0x5ecc>
   16f28:	mvn	r2, #-2147483648	; 0x80000000
   16f2c:	udiv	r2, r2, r1
   16f30:	cmp	r2, r0
   16f34:	bcs	16f54 <__assert_fail@plt+0x5ecc>
   16f38:	push	{fp, lr}
   16f3c:	mov	fp, sp
   16f40:	bl	10fa4 <__errno_location@plt>
   16f44:	mov	r1, #12
   16f48:	str	r1, [r0]
   16f4c:	mov	r0, #0
   16f50:	pop	{fp, pc}
   16f54:	b	10e24 <calloc@plt>
   16f58:	cmp	r0, #0
   16f5c:	movweq	r0, #1
   16f60:	cmn	r0, #1
   16f64:	ble	16f6c <__assert_fail@plt+0x5ee4>
   16f68:	b	10f38 <malloc@plt>
   16f6c:	push	{fp, lr}
   16f70:	mov	fp, sp
   16f74:	bl	10fa4 <__errno_location@plt>
   16f78:	mov	r1, #12
   16f7c:	str	r1, [r0]
   16f80:	mov	r0, #0
   16f84:	pop	{fp, pc}
   16f88:	push	{fp, lr}
   16f8c:	mov	fp, sp
   16f90:	cmp	r0, #0
   16f94:	beq	16fb0 <__assert_fail@plt+0x5f28>
   16f98:	cmp	r1, #0
   16f9c:	beq	16fbc <__assert_fail@plt+0x5f34>
   16fa0:	cmn	r1, #1
   16fa4:	ble	16fc8 <__assert_fail@plt+0x5f40>
   16fa8:	pop	{fp, lr}
   16fac:	b	10ecc <realloc@plt>
   16fb0:	mov	r0, r1
   16fb4:	pop	{fp, lr}
   16fb8:	b	16f58 <__assert_fail@plt+0x5ed0>
   16fbc:	bl	128e0 <__assert_fail@plt+0x1858>
   16fc0:	mov	r0, #0
   16fc4:	pop	{fp, pc}
   16fc8:	bl	10fa4 <__errno_location@plt>
   16fcc:	mov	r1, #12
   16fd0:	str	r1, [r0]
   16fd4:	mov	r0, #0
   16fd8:	pop	{fp, pc}
   16fdc:	push	{r4, r5, r6, sl, fp, lr}
   16fe0:	add	fp, sp, #16
   16fe4:	mov	r4, r0
   16fe8:	bl	10f14 <__fpending@plt>
   16fec:	ldr	r6, [r4]
   16ff0:	mov	r5, r0
   16ff4:	mov	r0, r4
   16ff8:	bl	127dc <__assert_fail@plt+0x1754>
   16ffc:	tst	r6, #32
   17000:	bne	17038 <__assert_fail@plt+0x5fb0>
   17004:	cmp	r0, #0
   17008:	mov	r4, r0
   1700c:	mvnne	r4, #0
   17010:	cmp	r5, #0
   17014:	bne	17044 <__assert_fail@plt+0x5fbc>
   17018:	cmp	r0, #0
   1701c:	beq	17044 <__assert_fail@plt+0x5fbc>
   17020:	bl	10fa4 <__errno_location@plt>
   17024:	ldr	r0, [r0]
   17028:	subs	r4, r0, #9
   1702c:	mvnne	r4, #0
   17030:	mov	r0, r4
   17034:	pop	{r4, r5, r6, sl, fp, pc}
   17038:	mvn	r4, #0
   1703c:	cmp	r0, #0
   17040:	beq	1704c <__assert_fail@plt+0x5fc4>
   17044:	mov	r0, r4
   17048:	pop	{r4, r5, r6, sl, fp, pc}
   1704c:	bl	10fa4 <__errno_location@plt>
   17050:	mov	r1, #0
   17054:	str	r1, [r0]
   17058:	mov	r0, r4
   1705c:	pop	{r4, r5, r6, sl, fp, pc}
   17060:	push	{fp, lr}
   17064:	mov	fp, sp
   17068:	mov	r0, #14
   1706c:	bl	11034 <nl_langinfo@plt>
   17070:	movw	r1, #31264	; 0x7a20
   17074:	cmp	r0, #0
   17078:	movt	r1, #1
   1707c:	movne	r1, r0
   17080:	movw	r0, #33005	; 0x80ed
   17084:	ldrb	r2, [r1]
   17088:	movt	r0, #1
   1708c:	cmp	r2, #0
   17090:	movne	r0, r1
   17094:	pop	{fp, pc}
   17098:	push	{r4, r5, r6, r7, fp, lr}
   1709c:	add	fp, sp, #16
   170a0:	sub	sp, sp, #8
   170a4:	add	r5, sp, #4
   170a8:	cmp	r0, #0
   170ac:	mov	r7, r2
   170b0:	mov	r4, r1
   170b4:	movne	r5, r0
   170b8:	mov	r0, r5
   170bc:	bl	10f20 <mbrtowc@plt>
   170c0:	mov	r6, r0
   170c4:	cmp	r7, #0
   170c8:	beq	170ec <__assert_fail@plt+0x6064>
   170cc:	cmn	r6, #2
   170d0:	bcc	170ec <__assert_fail@plt+0x6064>
   170d4:	mov	r0, #0
   170d8:	bl	17134 <__assert_fail@plt+0x60ac>
   170dc:	cmp	r0, #0
   170e0:	ldrbeq	r0, [r4]
   170e4:	moveq	r6, #1
   170e8:	streq	r0, [r5]
   170ec:	mov	r0, r6
   170f0:	sub	sp, fp, #16
   170f4:	pop	{r4, r5, r6, r7, fp, pc}
   170f8:	cmp	r2, #0
   170fc:	beq	1712c <__assert_fail@plt+0x60a4>
   17100:	mvn	r3, #0
   17104:	udiv	r3, r3, r2
   17108:	cmp	r3, r1
   1710c:	bcs	1712c <__assert_fail@plt+0x60a4>
   17110:	push	{fp, lr}
   17114:	mov	fp, sp
   17118:	bl	10fa4 <__errno_location@plt>
   1711c:	mov	r1, #12
   17120:	str	r1, [r0]
   17124:	mov	r0, #0
   17128:	pop	{fp, pc}
   1712c:	mul	r1, r2, r1
   17130:	b	16f88 <__assert_fail@plt+0x5f00>
   17134:	push	{r4, sl, fp, lr}
   17138:	add	fp, sp, #8
   1713c:	sub	sp, sp, #264	; 0x108
   17140:	add	r1, sp, #7
   17144:	movw	r2, #257	; 0x101
   17148:	bl	17198 <__assert_fail@plt+0x6110>
   1714c:	mov	r4, #0
   17150:	cmp	r0, #0
   17154:	bne	1718c <__assert_fail@plt+0x6104>
   17158:	movw	r1, #33011	; 0x80f3
   1715c:	add	r0, sp, #7
   17160:	movt	r1, #1
   17164:	bl	10e48 <strcmp@plt>
   17168:	cmp	r0, #0
   1716c:	beq	1718c <__assert_fail@plt+0x6104>
   17170:	movw	r1, #33013	; 0x80f5
   17174:	add	r0, sp, #7
   17178:	movt	r1, #1
   1717c:	bl	10e48 <strcmp@plt>
   17180:	mov	r4, r0
   17184:	cmp	r0, #0
   17188:	movwne	r4, #1
   1718c:	mov	r0, r4
   17190:	sub	sp, fp, #8
   17194:	pop	{r4, sl, fp, pc}
   17198:	push	{r4, r5, r6, r7, fp, lr}
   1719c:	add	fp, sp, #16
   171a0:	mov	r4, r1
   171a4:	mov	r1, #0
   171a8:	mov	r6, r2
   171ac:	bl	1101c <setlocale@plt>
   171b0:	cmp	r0, #0
   171b4:	beq	171e4 <__assert_fail@plt+0x615c>
   171b8:	mov	r7, r0
   171bc:	bl	10f8c <strlen@plt>
   171c0:	cmp	r0, r6
   171c4:	bcs	17204 <__assert_fail@plt+0x617c>
   171c8:	add	r2, r0, #1
   171cc:	mov	r0, r4
   171d0:	mov	r1, r7
   171d4:	bl	10e90 <memcpy@plt>
   171d8:	mov	r5, #0
   171dc:	mov	r0, r5
   171e0:	pop	{r4, r5, r6, r7, fp, pc}
   171e4:	cmp	r6, #0
   171e8:	mov	r5, #22
   171ec:	movne	r0, #0
   171f0:	strbne	r0, [r4]
   171f4:	movne	r0, r5
   171f8:	popne	{r4, r5, r6, r7, fp, pc}
   171fc:	mov	r0, r5
   17200:	pop	{r4, r5, r6, r7, fp, pc}
   17204:	mov	r5, #34	; 0x22
   17208:	cmp	r6, #0
   1720c:	beq	1722c <__assert_fail@plt+0x61a4>
   17210:	sub	r6, r6, #1
   17214:	mov	r0, r4
   17218:	mov	r1, r7
   1721c:	mov	r2, r6
   17220:	bl	10e90 <memcpy@plt>
   17224:	mov	r0, #0
   17228:	strb	r0, [r4, r6]
   1722c:	mov	r0, r5
   17230:	pop	{r4, r5, r6, r7, fp, pc}
   17234:	mov	r1, #0
   17238:	b	1101c <setlocale@plt>
   1723c:	cmp	r3, #0
   17240:	cmpeq	r2, #0
   17244:	bne	17268 <__assert_fail@plt+0x61e0>
   17248:	cmp	r1, #0
   1724c:	movlt	r1, #-2147483648	; 0x80000000
   17250:	movlt	r0, #0
   17254:	blt	17264 <__assert_fail@plt+0x61dc>
   17258:	cmpeq	r0, #0
   1725c:	mvnne	r1, #-2147483648	; 0x80000000
   17260:	mvnne	r0, #0
   17264:	b	1734c <__assert_fail@plt+0x62c4>
   17268:	sub	sp, sp, #8
   1726c:	push	{sp, lr}
   17270:	cmp	r1, #0
   17274:	blt	17294 <__assert_fail@plt+0x620c>
   17278:	cmp	r3, #0
   1727c:	blt	172c8 <__assert_fail@plt+0x6240>
   17280:	bl	1735c <__assert_fail@plt+0x62d4>
   17284:	ldr	lr, [sp, #4]
   17288:	add	sp, sp, #8
   1728c:	pop	{r2, r3}
   17290:	bx	lr
   17294:	rsbs	r0, r0, #0
   17298:	sbc	r1, r1, r1, lsl #1
   1729c:	cmp	r3, #0
   172a0:	blt	172ec <__assert_fail@plt+0x6264>
   172a4:	bl	1735c <__assert_fail@plt+0x62d4>
   172a8:	ldr	lr, [sp, #4]
   172ac:	add	sp, sp, #8
   172b0:	pop	{r2, r3}
   172b4:	rsbs	r0, r0, #0
   172b8:	sbc	r1, r1, r1, lsl #1
   172bc:	rsbs	r2, r2, #0
   172c0:	sbc	r3, r3, r3, lsl #1
   172c4:	bx	lr
   172c8:	rsbs	r2, r2, #0
   172cc:	sbc	r3, r3, r3, lsl #1
   172d0:	bl	1735c <__assert_fail@plt+0x62d4>
   172d4:	ldr	lr, [sp, #4]
   172d8:	add	sp, sp, #8
   172dc:	pop	{r2, r3}
   172e0:	rsbs	r0, r0, #0
   172e4:	sbc	r1, r1, r1, lsl #1
   172e8:	bx	lr
   172ec:	rsbs	r2, r2, #0
   172f0:	sbc	r3, r3, r3, lsl #1
   172f4:	bl	1735c <__assert_fail@plt+0x62d4>
   172f8:	ldr	lr, [sp, #4]
   172fc:	add	sp, sp, #8
   17300:	pop	{r2, r3}
   17304:	rsbs	r2, r2, #0
   17308:	sbc	r3, r3, r3, lsl #1
   1730c:	bx	lr
   17310:	cmp	r3, #0
   17314:	cmpeq	r2, #0
   17318:	bne	17330 <__assert_fail@plt+0x62a8>
   1731c:	cmp	r1, #0
   17320:	cmpeq	r0, #0
   17324:	mvnne	r1, #0
   17328:	mvnne	r0, #0
   1732c:	b	1734c <__assert_fail@plt+0x62c4>
   17330:	sub	sp, sp, #8
   17334:	push	{sp, lr}
   17338:	bl	1735c <__assert_fail@plt+0x62d4>
   1733c:	ldr	lr, [sp, #4]
   17340:	add	sp, sp, #8
   17344:	pop	{r2, r3}
   17348:	bx	lr
   1734c:	push	{r1, lr}
   17350:	mov	r0, #8
   17354:	bl	10e3c <raise@plt>
   17358:	pop	{r1, pc}
   1735c:	cmp	r1, r3
   17360:	cmpeq	r0, r2
   17364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17368:	mov	r4, r0
   1736c:	movcc	r0, #0
   17370:	mov	r5, r1
   17374:	ldr	lr, [sp, #36]	; 0x24
   17378:	movcc	r1, r0
   1737c:	bcc	17478 <__assert_fail@plt+0x63f0>
   17380:	cmp	r3, #0
   17384:	clzeq	ip, r2
   17388:	clzne	ip, r3
   1738c:	addeq	ip, ip, #32
   17390:	cmp	r5, #0
   17394:	clzeq	r1, r4
   17398:	addeq	r1, r1, #32
   1739c:	clzne	r1, r5
   173a0:	sub	ip, ip, r1
   173a4:	sub	sl, ip, #32
   173a8:	lsl	r9, r3, ip
   173ac:	rsb	fp, ip, #32
   173b0:	orr	r9, r9, r2, lsl sl
   173b4:	orr	r9, r9, r2, lsr fp
   173b8:	lsl	r8, r2, ip
   173bc:	cmp	r5, r9
   173c0:	cmpeq	r4, r8
   173c4:	movcc	r0, #0
   173c8:	movcc	r1, r0
   173cc:	bcc	173e8 <__assert_fail@plt+0x6360>
   173d0:	mov	r0, #1
   173d4:	subs	r4, r4, r8
   173d8:	lsl	r1, r0, sl
   173dc:	orr	r1, r1, r0, lsr fp
   173e0:	lsl	r0, r0, ip
   173e4:	sbc	r5, r5, r9
   173e8:	cmp	ip, #0
   173ec:	beq	17478 <__assert_fail@plt+0x63f0>
   173f0:	lsr	r6, r8, #1
   173f4:	orr	r6, r6, r9, lsl #31
   173f8:	lsr	r7, r9, #1
   173fc:	mov	r2, ip
   17400:	b	17424 <__assert_fail@plt+0x639c>
   17404:	subs	r3, r4, r6
   17408:	sbc	r8, r5, r7
   1740c:	adds	r3, r3, r3
   17410:	adc	r8, r8, r8
   17414:	adds	r4, r3, #1
   17418:	adc	r5, r8, #0
   1741c:	subs	r2, r2, #1
   17420:	beq	17440 <__assert_fail@plt+0x63b8>
   17424:	cmp	r5, r7
   17428:	cmpeq	r4, r6
   1742c:	bcs	17404 <__assert_fail@plt+0x637c>
   17430:	adds	r4, r4, r4
   17434:	adc	r5, r5, r5
   17438:	subs	r2, r2, #1
   1743c:	bne	17424 <__assert_fail@plt+0x639c>
   17440:	lsr	r3, r4, ip
   17444:	orr	r3, r3, r5, lsl fp
   17448:	lsr	r2, r5, ip
   1744c:	orr	r3, r3, r5, lsr sl
   17450:	adds	r0, r0, r4
   17454:	mov	r4, r3
   17458:	lsl	r3, r2, ip
   1745c:	orr	r3, r3, r4, lsl sl
   17460:	lsl	ip, r4, ip
   17464:	orr	r3, r3, r4, lsr fp
   17468:	adc	r1, r1, r5
   1746c:	subs	r0, r0, ip
   17470:	mov	r5, r2
   17474:	sbc	r1, r1, r3
   17478:	cmp	lr, #0
   1747c:	strdne	r4, [lr]
   17480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17484:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17488:	mov	r7, r0
   1748c:	ldr	r6, [pc, #72]	; 174dc <__assert_fail@plt+0x6454>
   17490:	ldr	r5, [pc, #72]	; 174e0 <__assert_fail@plt+0x6458>
   17494:	add	r6, pc, r6
   17498:	add	r5, pc, r5
   1749c:	sub	r6, r6, r5
   174a0:	mov	r8, r1
   174a4:	mov	r9, r2
   174a8:	bl	10e04 <calloc@plt-0x20>
   174ac:	asrs	r6, r6, #2
   174b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   174b4:	mov	r4, #0
   174b8:	add	r4, r4, #1
   174bc:	ldr	r3, [r5], #4
   174c0:	mov	r2, r9
   174c4:	mov	r1, r8
   174c8:	mov	r0, r7
   174cc:	blx	r3
   174d0:	cmp	r6, r4
   174d4:	bne	174b8 <__assert_fail@plt+0x6430>
   174d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   174dc:	andeq	r1, r1, r0, ror sl
   174e0:	andeq	r1, r1, r8, ror #20
   174e4:	bx	lr
   174e8:	ldr	r3, [pc, #12]	; 174fc <__assert_fail@plt+0x6474>
   174ec:	mov	r1, #0
   174f0:	add	r3, pc, r3
   174f4:	ldr	r2, [r3]
   174f8:	b	10fb0 <__cxa_atexit@plt>
   174fc:	andeq	r1, r1, ip, ror #23

Disassembly of section .fini:

00017500 <.fini>:
   17500:	push	{r3, lr}
   17504:	pop	{r3, pc}
