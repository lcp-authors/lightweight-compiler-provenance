
../repos/charybdis/modules/.libs/m_encap.so:     file format elf32-littlearm


Disassembly of section .init:

000004dc <_init>:
 4dc:	push	{r3, lr}
 4e0:	bl	550 <call_weak_fn>
 4e4:	pop	{r3, pc}

Disassembly of section .plt:

000004e8 <.plt>:
 4e8:	push	{lr}		; (str lr, [sp, #-4]!)
 4ec:	ldr	lr, [pc, #4]	; 4f8 <.plt+0x10>
 4f0:	add	lr, pc, lr
 4f4:	ldr	pc, [lr, #8]!
 4f8:	.word	0x00010b08

000004fc <sendto_match_servs@plt>:
 4fc:	add	ip, pc, #0, 12
 500:	add	ip, ip, #16, 20	; 0x10000
 504:	ldr	pc, [ip, #2824]!	; 0xb08

00000508 <__cxa_finalize@plt>:
 508:	add	ip, pc, #0, 12
 50c:	add	ip, ip, #16, 20	; 0x10000
 510:	ldr	pc, [ip, #2816]!	; 0xb00

00000514 <__gmon_start__@plt>:
 514:	add	ip, pc, #0, 12
 518:	add	ip, ip, #16, 20	; 0x10000
 51c:	ldr	pc, [ip, #2808]!	; 0xaf8

00000520 <strlen@plt>:
 520:	add	ip, pc, #0, 12
 524:	add	ip, ip, #16, 20	; 0x10000
 528:	ldr	pc, [ip, #2800]!	; 0xaf0

0000052c <snprintf@plt>:
 52c:	add	ip, pc, #0, 12
 530:	add	ip, ip, #16, 20	; 0x10000
 534:	ldr	pc, [ip, #2792]!	; 0xae8

00000538 <handle_encap@plt>:
 538:	add	ip, pc, #0, 12
 53c:	add	ip, ip, #16, 20	; 0x10000
 540:	ldr	pc, [ip, #2784]!	; 0xae0

00000544 <match@plt>:
 544:	add	ip, pc, #0, 12
 548:	add	ip, ip, #16, 20	; 0x10000
 54c:	ldr	pc, [ip, #2776]!	; 0xad8

Disassembly of section .text:

00000550 <call_weak_fn>:
 550:	ldr	r3, [pc, #20]	; 56c <call_weak_fn+0x1c>
 554:	ldr	r2, [pc, #20]	; 570 <call_weak_fn+0x20>
 558:	add	r3, pc, r3
 55c:	ldr	r2, [r3, r2]
 560:	cmp	r2, #0
 564:	bxeq	lr
 568:	b	514 <__gmon_start__@plt>
 56c:	.word	0x00010aa0
 570:	.word	0x00000030

00000574 <deregister_tm_clones>:
 574:	ldr	r0, [pc, #44]	; 5a8 <deregister_tm_clones+0x34>
 578:	ldr	r3, [pc, #44]	; 5ac <deregister_tm_clones+0x38>
 57c:	add	r0, pc, r0
 580:	add	r3, pc, r3
 584:	cmp	r3, r0
 588:	ldr	r3, [pc, #32]	; 5b0 <deregister_tm_clones+0x3c>
 58c:	add	r3, pc, r3
 590:	bxeq	lr
 594:	ldr	r2, [pc, #24]	; 5b4 <deregister_tm_clones+0x40>
 598:	ldr	r3, [r3, r2]
 59c:	cmp	r3, #0
 5a0:	bxeq	lr
 5a4:	bx	r3
 5a8:	.word	0x00010b34
 5ac:	.word	0x00010b30
 5b0:	.word	0x00010a6c
 5b4:	.word	0x0000002c

000005b8 <register_tm_clones>:
 5b8:	ldr	r0, [pc, #56]	; 5f8 <register_tm_clones+0x40>
 5bc:	ldr	r3, [pc, #56]	; 5fc <register_tm_clones+0x44>
 5c0:	add	r0, pc, r0
 5c4:	add	r3, pc, r3
 5c8:	sub	r1, r3, r0
 5cc:	ldr	r3, [pc, #44]	; 600 <register_tm_clones+0x48>
 5d0:	asr	r1, r1, #2
 5d4:	add	r3, pc, r3
 5d8:	add	r1, r1, r1, lsr #31
 5dc:	asrs	r1, r1, #1
 5e0:	bxeq	lr
 5e4:	ldr	r2, [pc, #24]	; 604 <register_tm_clones+0x4c>
 5e8:	ldr	r3, [r3, r2]
 5ec:	cmp	r3, #0
 5f0:	bxeq	lr
 5f4:	bx	r3
 5f8:	.word	0x00010af0
 5fc:	.word	0x00010aec
 600:	.word	0x00010a24
 604:	.word	0x00000034

00000608 <__do_global_dtors_aux>:
 608:	ldr	r3, [pc, #76]	; 65c <__do_global_dtors_aux+0x54>
 60c:	ldr	r2, [pc, #76]	; 660 <__do_global_dtors_aux+0x58>
 610:	add	r3, pc, r3
 614:	add	r2, pc, r2
 618:	ldrb	r3, [r3]
 61c:	cmp	r3, #0
 620:	bxne	lr
 624:	ldr	r3, [pc, #56]	; 664 <__do_global_dtors_aux+0x5c>
 628:	push	{r4, lr}
 62c:	ldr	r3, [r2, r3]
 630:	cmp	r3, #0
 634:	beq	644 <__do_global_dtors_aux+0x3c>
 638:	ldr	r3, [pc, #40]	; 668 <__do_global_dtors_aux+0x60>
 63c:	ldr	r0, [pc, r3]
 640:	bl	508 <__cxa_finalize@plt>
 644:	bl	574 <deregister_tm_clones>
 648:	ldr	r3, [pc, #28]	; 66c <__do_global_dtors_aux+0x64>
 64c:	mov	r2, #1
 650:	add	r3, pc, r3
 654:	strb	r2, [r3]
 658:	pop	{r4, pc}
 65c:	.word	0x00010aa0
 660:	.word	0x000109e4
 664:	.word	0x00000028
 668:	.word	0x000109fc
 66c:	.word	0x00010a60

00000670 <frame_dummy>:
 670:	b	5b8 <register_tm_clones>

00000674 <ms_encap>:
 674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 678:	add	fp, sp, #28
 67c:	sub	sp, sp, #540	; 0x21c
 680:	ldr	r9, [fp, #8]
 684:	mov	r6, r0
 688:	mov	r8, r3
 68c:	str	r2, [sp, #20]
 690:	mov	sl, r1
 694:	sub	r7, r3, #1
 698:	ldr	r4, [r9, #4]
 69c:	mov	r0, r4
 6a0:	bl	520 <strlen@plt>
 6a4:	mov	r5, r0
 6a8:	cmp	r8, #3
 6ac:	str	r8, [sp, #16]
 6b0:	str	sl, [sp, #12]
 6b4:	str	r6, [sp, #8]
 6b8:	blt	748 <ms_encap+0xd4>
 6bc:	mov	r8, #2
 6c0:	add	r6, sp, #24
 6c4:	mov	r0, #0
 6c8:	add	r5, r5, #1
 6cc:	mov	r1, #0
 6d0:	add	sl, r5, r0
 6d4:	cmp	r1, sl, lsr #9
 6d8:	bne	7ec <ms_encap+0x178>
 6dc:	ldr	r2, [pc, #272]	; 7f4 <ms_encap+0x180>
 6e0:	rsb	r1, r0, #512	; 0x200
 6e4:	mov	r0, r6
 6e8:	mov	r3, r4
 6ec:	add	r2, pc, r2
 6f0:	bl	52c <snprintf@plt>
 6f4:	ldr	r4, [r9, r8, lsl #2]
 6f8:	add	r6, r6, r5
 6fc:	mov	r0, r4
 700:	bl	520 <strlen@plt>
 704:	mov	r5, r0
 708:	add	r0, r8, #1
 70c:	cmp	r8, r7
 710:	mov	r8, r0
 714:	mov	r0, sl
 718:	blt	6c8 <ms_encap+0x54>
 71c:	ldr	r0, [sp, #16]
 720:	rsb	r1, sl, #512	; 0x200
 724:	cmp	r0, #3
 728:	bne	754 <ms_encap+0xe0>
 72c:	ldr	r3, [r9, #8]
 730:	ldr	r2, [pc, #208]	; 808 <ms_encap+0x194>
 734:	mov	r0, r6
 738:	add	r2, pc, r2
 73c:	bl	52c <snprintf@plt>
 740:	ldr	r4, [sp, #20]
 744:	b	76c <ms_encap+0xf8>
 748:	mov	sl, #0
 74c:	mov	r1, #512	; 0x200
 750:	add	r6, sp, #24
 754:	ldr	r4, [sp, #20]
 758:	ldr	r3, [r9, r7, lsl #2]
 75c:	ldr	r2, [pc, #148]	; 7f8 <ms_encap+0x184>
 760:	mov	r0, r6
 764:	add	r2, pc, r2
 768:	bl	52c <snprintf@plt>
 76c:	add	r0, r5, sl
 770:	mov	r5, r4
 774:	cmp	r0, #512	; 0x200
 778:	movge	r0, #0
 77c:	strbge	r0, [sp, #535]	; 0x217
 780:	ldr	r1, [r9, #4]
 784:	ldr	r0, [pc, #112]	; 7fc <ms_encap+0x188>
 788:	ldr	r0, [pc, r0]
 78c:	ldr	r2, [r0]
 790:	ldr	r3, [pc, #104]	; 800 <ms_encap+0x18c>
 794:	add	r0, sp, #24
 798:	str	r0, [sp, #4]
 79c:	mov	r0, r4
 7a0:	add	r3, pc, r3
 7a4:	str	r3, [sp]
 7a8:	mov	r3, #0
 7ac:	bl	4fc <sendto_match_servs@plt>
 7b0:	ldr	r0, [r9, #4]
 7b4:	ldr	r1, [pc, #72]	; 804 <ms_encap+0x190>
 7b8:	ldr	r1, [pc, r1]
 7bc:	add	r1, r1, #88	; 0x58
 7c0:	bl	544 <match@plt>
 7c4:	cmp	r0, #0
 7c8:	beq	7ec <ms_encap+0x178>
 7cc:	ldr	r0, [sp, #16]
 7d0:	ldr	r3, [r9, #8]!
 7d4:	mov	r2, r5
 7d8:	sub	r0, r0, #2
 7dc:	stm	sp, {r0, r9}
 7e0:	ldr	r0, [sp, #8]
 7e4:	ldr	r1, [sp, #12]
 7e8:	bl	538 <handle_encap@plt>
 7ec:	sub	sp, fp, #28
 7f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 7f4:	.word	0x00000126
 7f8:	.word	0x000000b2
 7fc:	.word	0x000108ac
 800:	.word	0x0000007a
 804:	.word	0x00010878
 808:	.word	0x000000e8

Disassembly of section .fini:

0000080c <_fini>:
 80c:	push	{r3, lr}
 810:	pop	{r3, pc}
