
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010d78 <.init>:
   10d78:	push	{r3, lr}
   10d7c:	bl	1108c <__assert_fail@plt+0x48>
   10d80:	pop	{r3, pc}

Disassembly of section .plt:

00010d84 <fdopen@plt-0x14>:
   10d84:	push	{lr}		; (str lr, [sp, #-4]!)
   10d88:	ldr	lr, [pc, #4]	; 10d94 <fdopen@plt-0x4>
   10d8c:	add	lr, pc, lr
   10d90:	ldr	pc, [lr, #8]!
   10d94:	andeq	r9, r1, ip, ror #4

00010d98 <fdopen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #102400	; 0x19000
   10da0:	ldr	pc, [ip, #620]!	; 0x26c

00010da4 <calloc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #102400	; 0x19000
   10dac:	ldr	pc, [ip, #612]!	; 0x264

00010db0 <fputs_unlocked@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #102400	; 0x19000
   10db8:	ldr	pc, [ip, #604]!	; 0x25c

00010dbc <strcmp@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #102400	; 0x19000
   10dc4:	ldr	pc, [ip, #596]!	; 0x254

00010dc8 <posix_fadvise64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #102400	; 0x19000
   10dd0:	ldr	pc, [ip, #588]!	; 0x24c

00010dd4 <fflush@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #102400	; 0x19000
   10ddc:	ldr	pc, [ip, #580]!	; 0x244

00010de0 <free@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #102400	; 0x19000
   10de8:	ldr	pc, [ip, #572]!	; 0x23c

00010dec <_exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #102400	; 0x19000
   10df4:	ldr	pc, [ip, #564]!	; 0x234

00010df8 <memcpy@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #102400	; 0x19000
   10e00:	ldr	pc, [ip, #556]!	; 0x22c

00010e04 <__strtoull_internal@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #102400	; 0x19000
   10e0c:	ldr	pc, [ip, #548]!	; 0x224

00010e10 <mbsinit@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #102400	; 0x19000
   10e18:	ldr	pc, [ip, #540]!	; 0x21c

00010e1c <fwrite_unlocked@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #102400	; 0x19000
   10e24:	ldr	pc, [ip, #532]!	; 0x214

00010e28 <memcmp@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #102400	; 0x19000
   10e30:	ldr	pc, [ip, #524]!	; 0x20c

00010e34 <fputc_unlocked@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #102400	; 0x19000
   10e3c:	ldr	pc, [ip, #516]!	; 0x204

00010e40 <dcgettext@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #102400	; 0x19000
   10e48:	ldr	pc, [ip, #508]!	; 0x1fc

00010e4c <realloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #102400	; 0x19000
   10e54:	ldr	pc, [ip, #500]!	; 0x1f4

00010e58 <textdomain@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #102400	; 0x19000
   10e60:	ldr	pc, [ip, #492]!	; 0x1ec

00010e64 <iswprint@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #102400	; 0x19000
   10e6c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e70 <fwrite@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #102400	; 0x19000
   10e78:	ldr	pc, [ip, #476]!	; 0x1dc

00010e7c <lseek64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #102400	; 0x19000
   10e84:	ldr	pc, [ip, #468]!	; 0x1d4

00010e88 <__ctype_get_mb_cur_max@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #102400	; 0x19000
   10e90:	ldr	pc, [ip, #460]!	; 0x1cc

00010e94 <__fpending@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #102400	; 0x19000
   10e9c:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea0 <mbrtowc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #444]!	; 0x1bc

00010eac <error@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #436]!	; 0x1b4

00010eb8 <strcoll@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec4 <malloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed0 <__libc_start_main@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #412]!	; 0x19c

00010edc <__freading@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #404]!	; 0x194

00010ee8 <__ctype_toupper_loc@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #396]!	; 0x18c

00010ef4 <__gmon_start__@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #388]!	; 0x184

00010f00 <getopt_long@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #380]!	; 0x17c

00010f0c <__ctype_b_loc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #102400	; 0x19000
   10f14:	ldr	pc, [ip, #372]!	; 0x174

00010f18 <exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #102400	; 0x19000
   10f20:	ldr	pc, [ip, #364]!	; 0x16c

00010f24 <strtoul@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #102400	; 0x19000
   10f2c:	ldr	pc, [ip, #356]!	; 0x164

00010f30 <strlen@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #102400	; 0x19000
   10f38:	ldr	pc, [ip, #348]!	; 0x15c

00010f3c <strchr@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #102400	; 0x19000
   10f44:	ldr	pc, [ip, #340]!	; 0x154

00010f48 <__errno_location@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #102400	; 0x19000
   10f50:	ldr	pc, [ip, #332]!	; 0x14c

00010f54 <__cxa_atexit@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #102400	; 0x19000
   10f5c:	ldr	pc, [ip, #324]!	; 0x144

00010f60 <memset@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #102400	; 0x19000
   10f68:	ldr	pc, [ip, #316]!	; 0x13c

00010f6c <__printf_chk@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #102400	; 0x19000
   10f74:	ldr	pc, [ip, #308]!	; 0x134

00010f78 <fileno@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #102400	; 0x19000
   10f80:	ldr	pc, [ip, #300]!	; 0x12c

00010f84 <__fprintf_chk@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #102400	; 0x19000
   10f8c:	ldr	pc, [ip, #292]!	; 0x124

00010f90 <memchr@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #102400	; 0x19000
   10f98:	ldr	pc, [ip, #284]!	; 0x11c

00010f9c <fclose@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #102400	; 0x19000
   10fa4:	ldr	pc, [ip, #276]!	; 0x114

00010fa8 <fseeko64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #102400	; 0x19000
   10fb0:	ldr	pc, [ip, #268]!	; 0x10c

00010fb4 <fcntl64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #102400	; 0x19000
   10fbc:	ldr	pc, [ip, #260]!	; 0x104

00010fc0 <__uflow@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #102400	; 0x19000
   10fc8:	ldr	pc, [ip, #252]!	; 0xfc

00010fcc <__overflow@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #102400	; 0x19000
   10fd4:	ldr	pc, [ip, #244]!	; 0xf4

00010fd8 <setlocale@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #102400	; 0x19000
   10fe0:	ldr	pc, [ip, #236]!	; 0xec

00010fe4 <strrchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #102400	; 0x19000
   10fec:	ldr	pc, [ip, #228]!	; 0xe4

00010ff0 <nl_langinfo@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #102400	; 0x19000
   10ff8:	ldr	pc, [ip, #220]!	; 0xdc

00010ffc <fopen64@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #102400	; 0x19000
   11004:	ldr	pc, [ip, #212]!	; 0xd4

00011008 <strpbrk@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #102400	; 0x19000
   11010:	ldr	pc, [ip, #204]!	; 0xcc

00011014 <bindtextdomain@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #102400	; 0x19000
   1101c:	ldr	pc, [ip, #196]!	; 0xc4

00011020 <strncmp@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #102400	; 0x19000
   11028:	ldr	pc, [ip, #188]!	; 0xbc

0001102c <abort@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #102400	; 0x19000
   11034:	ldr	pc, [ip, #180]!	; 0xb4

00011038 <close@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #102400	; 0x19000
   11040:	ldr	pc, [ip, #172]!	; 0xac

00011044 <__assert_fail@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #102400	; 0x19000
   1104c:	ldr	pc, [ip, #164]!	; 0xa4

Disassembly of section .text:

00011050 <.text>:
   11050:	mov	fp, #0
   11054:	mov	lr, #0
   11058:	pop	{r1}		; (ldr r1, [sp], #4)
   1105c:	mov	r2, sp
   11060:	push	{r2}		; (str r2, [sp, #-4]!)
   11064:	push	{r0}		; (str r0, [sp, #-4]!)
   11068:	ldr	ip, [pc, #16]	; 11080 <__assert_fail@plt+0x3c>
   1106c:	push	{ip}		; (str ip, [sp, #-4]!)
   11070:	ldr	r0, [pc, #12]	; 11084 <__assert_fail@plt+0x40>
   11074:	ldr	r3, [pc, #12]	; 11088 <__assert_fail@plt+0x44>
   11078:	bl	10ed0 <__libc_start_main@plt>
   1107c:	bl	1102c <abort@plt>
   11080:	strdeq	r7, [r1], -ip
   11084:	andeq	r2, r1, r8, ror #8
   11088:	muleq	r1, ip, sp
   1108c:	ldr	r3, [pc, #20]	; 110a8 <__assert_fail@plt+0x64>
   11090:	ldr	r2, [pc, #20]	; 110ac <__assert_fail@plt+0x68>
   11094:	add	r3, pc, r3
   11098:	ldr	r2, [r3, r2]
   1109c:	cmp	r2, #0
   110a0:	bxeq	lr
   110a4:	b	10ef4 <__gmon_start__@plt>
   110a8:	andeq	r8, r1, r4, ror #30
   110ac:	strdeq	r0, [r0], -r4
   110b0:	ldr	r0, [pc, #24]	; 110d0 <__assert_fail@plt+0x8c>
   110b4:	ldr	r3, [pc, #24]	; 110d4 <__assert_fail@plt+0x90>
   110b8:	cmp	r3, r0
   110bc:	bxeq	lr
   110c0:	ldr	r3, [pc, #16]	; 110d8 <__assert_fail@plt+0x94>
   110c4:	cmp	r3, #0
   110c8:	bxeq	lr
   110cc:	bx	r3
   110d0:	andeq	sl, r2, ip, asr r1
   110d4:	andeq	sl, r2, ip, asr r1
   110d8:	andeq	r0, r0, r0
   110dc:	ldr	r0, [pc, #36]	; 11108 <__assert_fail@plt+0xc4>
   110e0:	ldr	r1, [pc, #36]	; 1110c <__assert_fail@plt+0xc8>
   110e4:	sub	r1, r1, r0
   110e8:	asr	r1, r1, #2
   110ec:	add	r1, r1, r1, lsr #31
   110f0:	asrs	r1, r1, #1
   110f4:	bxeq	lr
   110f8:	ldr	r3, [pc, #16]	; 11110 <__assert_fail@plt+0xcc>
   110fc:	cmp	r3, #0
   11100:	bxeq	lr
   11104:	bx	r3
   11108:	andeq	sl, r2, ip, asr r1
   1110c:	andeq	sl, r2, ip, asr r1
   11110:	andeq	r0, r0, r0
   11114:	push	{r4, lr}
   11118:	ldr	r4, [pc, #24]	; 11138 <__assert_fail@plt+0xf4>
   1111c:	ldrb	r3, [r4]
   11120:	cmp	r3, #0
   11124:	popne	{r4, pc}
   11128:	bl	110b0 <__assert_fail@plt+0x6c>
   1112c:	mov	r3, #1
   11130:	strb	r3, [r4]
   11134:	pop	{r4, pc}
   11138:	andeq	sl, r2, r4, lsl #3
   1113c:	b	110dc <__assert_fail@plt+0x98>
   11140:	strd	r4, [sp, #-12]!
   11144:	str	lr, [sp, #8]
   11148:	sub	sp, sp, #12
   1114c:	ldr	r5, [r0]
   11150:	cmp	r5, r1
   11154:	cmnne	r5, #1
   11158:	bne	11170 <__assert_fail@plt+0x12c>
   1115c:	str	r1, [r0]
   11160:	add	sp, sp, #12
   11164:	ldrd	r4, [sp]
   11168:	add	sp, sp, #8
   1116c:	pop	{pc}		; (ldr pc, [sp], #4)
   11170:	mov	r4, r1
   11174:	mov	r2, #5
   11178:	movw	r1, #32488	; 0x7ee8
   1117c:	movt	r1, #1
   11180:	mov	r0, #0
   11184:	bl	10e40 <dcgettext@plt>
   11188:	add	r1, r4, #1
   1118c:	str	r1, [sp]
   11190:	add	r3, r5, #1
   11194:	mov	r2, r0
   11198:	mov	r1, #0
   1119c:	mov	r0, #1
   111a0:	bl	10eac <error@plt>
   111a4:	strd	r4, [sp, #-16]!
   111a8:	str	r6, [sp, #8]
   111ac:	str	lr, [sp, #12]
   111b0:	subs	r4, r0, #0
   111b4:	beq	111d4 <__assert_fail@plt+0x190>
   111b8:	ldr	r0, [r4, #20]
   111bc:	bl	1374c <__assert_fail@plt+0x2708>
   111c0:	mov	r5, #0
   111c4:	str	r5, [r4, #20]
   111c8:	ldr	r0, [r4, #8]
   111cc:	bl	1374c <__assert_fail@plt+0x2708>
   111d0:	str	r5, [r4, #8]
   111d4:	ldrd	r4, [sp]
   111d8:	ldr	r6, [sp, #8]
   111dc:	add	sp, sp, #12
   111e0:	pop	{pc}		; (ldr pc, [sp], #4)
   111e4:	str	r4, [sp, #-8]!
   111e8:	str	lr, [sp, #4]
   111ec:	movw	r3, #41352	; 0xa188
   111f0:	movt	r3, #2
   111f4:	ldr	r0, [r3]
   111f8:	cmp	r0, #0
   111fc:	beq	11214 <__assert_fail@plt+0x1d0>
   11200:	bl	111a4 <__assert_fail@plt+0x160>
   11204:	movw	r3, #41352	; 0xa188
   11208:	movt	r3, #2
   1120c:	ldr	r0, [r3]
   11210:	bl	1374c <__assert_fail@plt+0x2708>
   11214:	movw	r3, #41352	; 0xa188
   11218:	movt	r3, #2
   1121c:	ldr	r0, [r3, #4]
   11220:	cmp	r0, #0
   11224:	beq	1123c <__assert_fail@plt+0x1f8>
   11228:	bl	111a4 <__assert_fail@plt+0x160>
   1122c:	movw	r3, #41352	; 0xa188
   11230:	movt	r3, #2
   11234:	ldr	r0, [r3, #4]
   11238:	bl	1374c <__assert_fail@plt+0x2708>
   1123c:	ldr	r4, [sp]
   11240:	add	sp, sp, #4
   11244:	pop	{pc}		; (ldr pc, [sp], #4)
   11248:	strd	r4, [sp, #-16]!
   1124c:	str	r6, [sp, #8]
   11250:	str	lr, [sp, #12]
   11254:	mov	r5, r0
   11258:	ldr	r3, [r0, #4]
   1125c:	cmp	r3, #0
   11260:	beq	11290 <__assert_fail@plt+0x24c>
   11264:	mov	r4, #0
   11268:	ldr	r3, [r5, #8]
   1126c:	ldr	r0, [r3, r4, lsl #2]
   11270:	bl	111a4 <__assert_fail@plt+0x160>
   11274:	ldr	r3, [r5, #8]
   11278:	ldr	r0, [r3, r4, lsl #2]
   1127c:	bl	1374c <__assert_fail@plt+0x2708>
   11280:	add	r4, r4, #1
   11284:	ldr	r3, [r5, #4]
   11288:	cmp	r3, r4
   1128c:	bhi	11268 <__assert_fail@plt+0x224>
   11290:	ldr	r0, [r5, #8]
   11294:	bl	1374c <__assert_fail@plt+0x2708>
   11298:	ldrd	r4, [sp]
   1129c:	ldr	r6, [sp, #8]
   112a0:	add	sp, sp, #12
   112a4:	pop	{pc}		; (ldr pc, [sp], #4)
   112a8:	strd	r4, [sp, #-12]!
   112ac:	str	lr, [sp, #8]
   112b0:	sub	sp, sp, #20
   112b4:	mov	r4, r0
   112b8:	movw	r3, #34124	; 0x854c
   112bc:	movt	r3, #1
   112c0:	str	r3, [sp]
   112c4:	add	r3, sp, #8
   112c8:	mov	r2, #10
   112cc:	mov	r1, #0
   112d0:	bl	17194 <__assert_fail@plt+0x6150>
   112d4:	cmp	r0, #1
   112d8:	beq	112fc <__assert_fail@plt+0x2b8>
   112dc:	cmp	r0, #0
   112e0:	bne	11328 <__assert_fail@plt+0x2e4>
   112e4:	ldrd	r2, [sp, #8]
   112e8:	mvn	r0, #0
   112ec:	mov	r1, #0
   112f0:	cmp	r3, r1
   112f4:	cmpeq	r2, r0
   112f8:	bls	11320 <__assert_fail@plt+0x2dc>
   112fc:	mvn	r2, #0
   11300:	mov	r3, #0
   11304:	strd	r2, [sp, #8]
   11308:	ldr	r0, [sp, #8]
   1130c:	sub	r0, r0, #1
   11310:	add	sp, sp, #20
   11314:	ldrd	r4, [sp]
   11318:	add	sp, sp, #8
   1131c:	pop	{pc}		; (ldr pc, [sp], #4)
   11320:	orrs	r3, r2, r3
   11324:	bne	11308 <__assert_fail@plt+0x2c4>
   11328:	mov	r2, #5
   1132c:	movw	r1, #32524	; 0x7f0c
   11330:	movt	r1, #1
   11334:	mov	r0, #0
   11338:	bl	10e40 <dcgettext@plt>
   1133c:	mov	r5, r0
   11340:	mov	r0, r4
   11344:	bl	15da8 <__assert_fail@plt+0x4d64>
   11348:	mov	r3, r0
   1134c:	mov	r2, r5
   11350:	mov	r1, #0
   11354:	mov	r0, #1
   11358:	bl	10eac <error@plt>
   1135c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11360:	strd	r6, [sp, #8]
   11364:	strd	r8, [sp, #16]
   11368:	str	sl, [sp, #24]
   1136c:	str	lr, [sp, #28]
   11370:	mov	r4, r0
   11374:	movw	r7, #32552	; 0x7f28
   11378:	movt	r7, #1
   1137c:	mov	r6, #0
   11380:	mov	r8, r6
   11384:	b	113d0 <__assert_fail@plt+0x38c>
   11388:	ldrb	r3, [r4, #1]
   1138c:	cmp	r3, #0
   11390:	bne	11458 <__assert_fail@plt+0x414>
   11394:	mov	r4, r6
   11398:	mov	r9, r8
   1139c:	mov	r0, #12
   113a0:	bl	1645c <__assert_fail@plt+0x5418>
   113a4:	str	r9, [r0]
   113a8:	str	r4, [r0, #4]
   113ac:	str	r6, [r0, #8]
   113b0:	movw	r3, #41216	; 0xa100
   113b4:	movt	r3, #2
   113b8:	ldr	r2, [r3]
   113bc:	str	r0, [r2, #8]
   113c0:	str	r0, [r3]
   113c4:	cmp	r5, #0
   113c8:	beq	11514 <__assert_fail@plt+0x4d0>
   113cc:	mov	r4, r5
   113d0:	mov	r1, r7
   113d4:	mov	r0, r4
   113d8:	bl	11008 <strpbrk@plt>
   113dc:	subs	r5, r0, #0
   113e0:	strbne	r6, [r5], #1
   113e4:	ldrb	r3, [r4]
   113e8:	cmp	r3, #48	; 0x30
   113ec:	beq	11388 <__assert_fail@plt+0x344>
   113f0:	bcc	114c0 <__assert_fail@plt+0x47c>
   113f4:	cmp	r3, #50	; 0x32
   113f8:	bhi	114c0 <__assert_fail@plt+0x47c>
   113fc:	ldrb	r2, [r4, #1]
   11400:	cmp	r2, #46	; 0x2e
   11404:	bne	1148c <__assert_fail@plt+0x448>
   11408:	sub	r9, r3, #48	; 0x30
   1140c:	add	r0, r4, #2
   11410:	bl	112a8 <__assert_fail@plt+0x264>
   11414:	mov	r4, r0
   11418:	cmp	r9, #2
   1141c:	bhi	114f4 <__assert_fail@plt+0x4b0>
   11420:	clz	r3, r0
   11424:	lsr	r3, r3, #5
   11428:	cmp	r9, #0
   1142c:	movne	r3, #1
   11430:	cmp	r3, #0
   11434:	bne	1139c <__assert_fail@plt+0x358>
   11438:	movw	r3, #32292	; 0x7e24
   1143c:	movt	r3, #1
   11440:	mov	r2, #820	; 0x334
   11444:	movw	r1, #32624	; 0x7f70
   11448:	movt	r1, #1
   1144c:	movw	r0, #32672	; 0x7fa0
   11450:	movt	r0, #1
   11454:	bl	11044 <__assert_fail@plt>
   11458:	mov	r2, #5
   1145c:	movw	r1, #32556	; 0x7f2c
   11460:	movt	r1, #1
   11464:	mov	r0, #0
   11468:	bl	10e40 <dcgettext@plt>
   1146c:	mov	r5, r0
   11470:	mov	r0, r4
   11474:	bl	15da8 <__assert_fail@plt+0x4d64>
   11478:	mov	r3, r0
   1147c:	mov	r2, r5
   11480:	mov	r1, #0
   11484:	mov	r0, #1
   11488:	bl	10eac <error@plt>
   1148c:	mov	r2, #5
   11490:	movw	r1, #32556	; 0x7f2c
   11494:	movt	r1, #1
   11498:	mov	r0, #0
   1149c:	bl	10e40 <dcgettext@plt>
   114a0:	mov	r5, r0
   114a4:	mov	r0, r4
   114a8:	bl	15da8 <__assert_fail@plt+0x4d64>
   114ac:	mov	r3, r0
   114b0:	mov	r2, r5
   114b4:	mov	r1, #0
   114b8:	mov	r0, #1
   114bc:	bl	10eac <error@plt>
   114c0:	mov	r2, #5
   114c4:	movw	r1, #32584	; 0x7f48
   114c8:	movt	r1, #1
   114cc:	mov	r0, #0
   114d0:	bl	10e40 <dcgettext@plt>
   114d4:	mov	r5, r0
   114d8:	mov	r0, r4
   114dc:	bl	15da8 <__assert_fail@plt+0x4d64>
   114e0:	mov	r3, r0
   114e4:	mov	r2, r5
   114e8:	mov	r1, #0
   114ec:	mov	r0, #1
   114f0:	bl	10eac <error@plt>
   114f4:	movw	r3, #32292	; 0x7e24
   114f8:	movt	r3, #1
   114fc:	movw	r2, #819	; 0x333
   11500:	movw	r1, #32624	; 0x7f70
   11504:	movt	r1, #1
   11508:	movw	r0, #32636	; 0x7f7c
   1150c:	movt	r0, #1
   11510:	bl	11044 <__assert_fail@plt>
   11514:	ldrd	r4, [sp]
   11518:	ldrd	r6, [sp, #8]
   1151c:	ldrd	r8, [sp, #16]
   11520:	ldr	sl, [sp, #24]
   11524:	add	sp, sp, #28
   11528:	pop	{pc}		; (ldr pc, [sp], #4)
   1152c:	strd	r4, [sp, #-16]!
   11530:	str	r6, [sp, #8]
   11534:	str	lr, [sp, #12]
   11538:	mov	r4, r0
   1153c:	mov	r6, r1
   11540:	mov	r5, r2
   11544:	ldr	r2, [r0, #12]
   11548:	ldr	r3, [r0, #16]
   1154c:	cmp	r2, r3
   11550:	bcs	1158c <__assert_fail@plt+0x548>
   11554:	ldr	r2, [r4, #12]
   11558:	ldr	r3, [r4, #20]
   1155c:	str	r6, [r3, r2, lsl #3]
   11560:	ldr	r2, [r4, #12]
   11564:	ldr	r3, [r4, #20]
   11568:	add	r3, r3, r2, lsl #3
   1156c:	str	r5, [r3, #4]
   11570:	ldr	r3, [r4, #12]
   11574:	add	r3, r3, #1
   11578:	str	r3, [r4, #12]
   1157c:	ldrd	r4, [sp]
   11580:	ldr	r6, [sp, #8]
   11584:	add	sp, sp, #12
   11588:	pop	{pc}		; (ldr pc, [sp], #4)
   1158c:	mov	r2, #8
   11590:	add	r1, r0, #16
   11594:	ldr	r0, [r0, #20]
   11598:	bl	16624 <__assert_fail@plt+0x55e0>
   1159c:	str	r0, [r4, #20]
   115a0:	b	11554 <__assert_fail@plt+0x510>
   115a4:	strd	r4, [sp, #-16]!
   115a8:	str	r6, [sp, #8]
   115ac:	str	lr, [sp, #12]
   115b0:	ldr	ip, [r0, #12]
   115b4:	cmp	ip, r2
   115b8:	bls	1169c <__assert_fail@plt+0x658>
   115bc:	ldr	r0, [r0, #20]
   115c0:	add	ip, r0, r2, lsl #3
   115c4:	ldr	r0, [r0, r2, lsl #3]
   115c8:	ldr	r4, [ip, #4]
   115cc:	ldr	r2, [r1, #12]
   115d0:	cmp	r2, r3
   115d4:	bls	116ac <__assert_fail@plt+0x668>
   115d8:	ldr	r2, [r1, #20]
   115dc:	add	ip, r2, r3, lsl #3
   115e0:	ldr	r1, [r2, r3, lsl #3]
   115e4:	ldr	r5, [ip, #4]
   115e8:	cmp	r4, #0
   115ec:	beq	11638 <__assert_fail@plt+0x5f4>
   115f0:	cmp	r5, #0
   115f4:	beq	1167c <__assert_fail@plt+0x638>
   115f8:	movw	r3, #41352	; 0xa188
   115fc:	movt	r3, #2
   11600:	ldrb	r3, [r3, #8]
   11604:	cmp	r3, #0
   11608:	beq	11640 <__assert_fail@plt+0x5fc>
   1160c:	cmp	r4, r5
   11610:	movcc	r2, r4
   11614:	movcs	r2, r5
   11618:	bl	13a44 <__assert_fail@plt+0x2a00>
   1161c:	cmp	r0, #0
   11620:	bne	116c4 <__assert_fail@plt+0x680>
   11624:	cmp	r4, r5
   11628:	bcc	11684 <__assert_fail@plt+0x640>
   1162c:	subs	r0, r4, r5
   11630:	movne	r0, #1
   11634:	b	116c4 <__assert_fail@plt+0x680>
   11638:	mov	r4, r5
   1163c:	b	116b8 <__assert_fail@plt+0x674>
   11640:	movw	r3, #41352	; 0xa188
   11644:	movt	r3, #2
   11648:	ldrb	r3, [r3, #9]
   1164c:	cmp	r3, #0
   11650:	bne	11668 <__assert_fail@plt+0x624>
   11654:	cmp	r4, r5
   11658:	movcc	r2, r4
   1165c:	movcs	r2, r5
   11660:	bl	10e28 <memcmp@plt>
   11664:	b	1161c <__assert_fail@plt+0x5d8>
   11668:	mov	r3, r5
   1166c:	mov	r2, r1
   11670:	mov	r1, r4
   11674:	bl	16a20 <__assert_fail@plt+0x59dc>
   11678:	b	116c4 <__assert_fail@plt+0x680>
   1167c:	mov	r0, #1
   11680:	b	116c4 <__assert_fail@plt+0x680>
   11684:	mvn	r0, #0
   11688:	b	116c4 <__assert_fail@plt+0x680>
   1168c:	ldr	r2, [r1, #20]
   11690:	add	r3, r2, r3, lsl #3
   11694:	ldr	r4, [r3, #4]
   11698:	b	116b8 <__assert_fail@plt+0x674>
   1169c:	ldr	r2, [r1, #12]
   116a0:	cmp	r3, r2
   116a4:	movcs	r4, #0
   116a8:	bcc	1168c <__assert_fail@plt+0x648>
   116ac:	cmp	r4, #0
   116b0:	movne	r0, #1
   116b4:	bne	116c4 <__assert_fail@plt+0x680>
   116b8:	adds	r0, r4, #0
   116bc:	movne	r0, #1
   116c0:	rsb	r0, r0, #0
   116c4:	ldrd	r4, [sp]
   116c8:	ldr	r6, [sp, #8]
   116cc:	add	sp, sp, #12
   116d0:	pop	{pc}		; (ldr pc, [sp], #4)
   116d4:	str	r4, [sp, #-8]!
   116d8:	str	lr, [sp, #4]
   116dc:	ldr	r3, [r1, #12]
   116e0:	cmp	r3, r0
   116e4:	bls	11740 <__assert_fail@plt+0x6fc>
   116e8:	ldr	ip, [r1, #20]
   116ec:	add	r3, ip, r0, lsl #3
   116f0:	ldr	r2, [r3, #4]
   116f4:	cmp	r2, #0
   116f8:	beq	11718 <__assert_fail@plt+0x6d4>
   116fc:	movw	r3, #41340	; 0xa17c
   11700:	movt	r3, #2
   11704:	ldr	r3, [r3]
   11708:	mov	r1, #1
   1170c:	ldr	r0, [ip, r0, lsl #3]
   11710:	bl	10e1c <fwrite_unlocked@plt>
   11714:	b	11764 <__assert_fail@plt+0x720>
   11718:	movw	r3, #41352	; 0xa188
   1171c:	movt	r3, #2
   11720:	ldr	r0, [r3, #12]
   11724:	cmp	r0, #0
   11728:	beq	11764 <__assert_fail@plt+0x720>
   1172c:	movw	r3, #41340	; 0xa17c
   11730:	movt	r3, #2
   11734:	ldr	r1, [r3]
   11738:	bl	10db0 <fputs_unlocked@plt>
   1173c:	b	11764 <__assert_fail@plt+0x720>
   11740:	movw	r3, #41352	; 0xa188
   11744:	movt	r3, #2
   11748:	ldr	r0, [r3, #12]
   1174c:	cmp	r0, #0
   11750:	beq	11764 <__assert_fail@plt+0x720>
   11754:	movw	r3, #41340	; 0xa17c
   11758:	movt	r3, #2
   1175c:	ldr	r1, [r3]
   11760:	bl	10db0 <fputs_unlocked@plt>
   11764:	ldr	r4, [sp]
   11768:	add	sp, sp, #4
   1176c:	pop	{pc}		; (ldr pc, [sp], #4)
   11770:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11774:	strd	r6, [sp, #8]
   11778:	strd	r8, [sp, #16]
   1177c:	strd	sl, [sp, #24]
   11780:	str	lr, [sp, #32]
   11784:	sub	sp, sp, #12
   11788:	mov	r6, r0
   1178c:	mov	r4, r1
   11790:	mov	r8, r2
   11794:	movw	r3, #41352	; 0xa188
   11798:	movt	r3, #2
   1179c:	ldrb	r3, [r3, #16]
   117a0:	cmp	r3, #0
   117a4:	ldreq	r8, [r0, #12]
   117a8:	movw	r3, #41216	; 0xa100
   117ac:	movt	r3, #2
   117b0:	ldr	fp, [r3, #4]
   117b4:	cmp	fp, #0
   117b8:	movlt	fp, #32
   117bc:	uxtb	r7, fp
   117c0:	cmp	r8, r1
   117c4:	movcc	sl, r8
   117c8:	movcs	sl, r1
   117cc:	cmp	sl, #0
   117d0:	beq	1181c <__assert_fail@plt+0x7d8>
   117d4:	mov	r5, #0
   117d8:	movw	r9, #41340	; 0xa17c
   117dc:	movt	r9, #2
   117e0:	str	r7, [sp, #4]
   117e4:	ldr	r0, [r9]
   117e8:	ldr	r3, [r0, #20]
   117ec:	ldr	r2, [r0, #24]
   117f0:	cmp	r3, r2
   117f4:	addcc	r2, r3, #1
   117f8:	strcc	r2, [r0, #20]
   117fc:	strbcc	r7, [r3]
   11800:	bcs	11888 <__assert_fail@plt+0x844>
   11804:	mov	r1, r6
   11808:	mov	r0, r5
   1180c:	bl	116d4 <__assert_fail@plt+0x690>
   11810:	add	r5, r5, #1
   11814:	cmp	r5, sl
   11818:	bne	117e4 <__assert_fail@plt+0x7a0>
   1181c:	add	r4, r4, #1
   11820:	cmp	r8, r4
   11824:	bls	1186c <__assert_fail@plt+0x828>
   11828:	movw	r5, #41340	; 0xa17c
   1182c:	movt	r5, #2
   11830:	uxtb	fp, fp
   11834:	ldr	r0, [r5]
   11838:	ldr	r3, [r0, #20]
   1183c:	ldr	r2, [r0, #24]
   11840:	cmp	r3, r2
   11844:	addcc	r2, r3, #1
   11848:	strcc	r2, [r0, #20]
   1184c:	strbcc	r7, [r3]
   11850:	bcs	11894 <__assert_fail@plt+0x850>
   11854:	mov	r1, r6
   11858:	mov	r0, r4
   1185c:	bl	116d4 <__assert_fail@plt+0x690>
   11860:	add	r4, r4, #1
   11864:	cmp	r8, r4
   11868:	bne	11834 <__assert_fail@plt+0x7f0>
   1186c:	add	sp, sp, #12
   11870:	ldrd	r4, [sp]
   11874:	ldrd	r6, [sp, #8]
   11878:	ldrd	r8, [sp, #16]
   1187c:	ldrd	sl, [sp, #24]
   11880:	add	sp, sp, #32
   11884:	pop	{pc}		; (ldr pc, [sp], #4)
   11888:	ldr	r1, [sp, #4]
   1188c:	bl	10fcc <__overflow@plt>
   11890:	b	11804 <__assert_fail@plt+0x7c0>
   11894:	mov	r1, fp
   11898:	bl	10fcc <__overflow@plt>
   1189c:	b	11854 <__assert_fail@plt+0x810>
   118a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   118a4:	strd	r6, [sp, #8]
   118a8:	strd	r8, [sp, #16]
   118ac:	str	sl, [sp, #24]
   118b0:	str	lr, [sp, #28]
   118b4:	mov	r5, r0
   118b8:	mov	r7, r1
   118bc:	movw	r3, #41216	; 0xa100
   118c0:	movt	r3, #2
   118c4:	ldr	r6, [r3, #4]
   118c8:	cmp	r6, #0
   118cc:	movlt	r6, #32
   118d0:	movw	r3, #41352	; 0xa188
   118d4:	movt	r3, #2
   118d8:	ldr	r4, [r3, #28]
   118dc:	cmp	r4, #0
   118e0:	beq	119c0 <__assert_fail@plt+0x97c>
   118e4:	add	r9, r3, #32
   118e8:	movw	r8, #41216	; 0xa100
   118ec:	movt	r8, #2
   118f0:	b	1193c <__assert_fail@plt+0x8f8>
   118f4:	cmp	r1, #1
   118f8:	moveq	r1, r5
   118fc:	movne	r1, r7
   11900:	ldr	r0, [r4, #4]
   11904:	bl	116d4 <__assert_fail@plt+0x690>
   11908:	ldr	r4, [r4, #8]
   1190c:	cmp	r4, #0
   11910:	beq	1196c <__assert_fail@plt+0x928>
   11914:	movw	r3, #41340	; 0xa17c
   11918:	movt	r3, #2
   1191c:	ldr	r0, [r3]
   11920:	ldr	r3, [r0, #20]
   11924:	ldr	r2, [r0, #24]
   11928:	cmp	r3, r2
   1192c:	addcc	r2, r3, #1
   11930:	strcc	r2, [r0, #20]
   11934:	strbcc	r6, [r3]
   11938:	bcs	11960 <__assert_fail@plt+0x91c>
   1193c:	ldr	r1, [r4]
   11940:	cmp	r1, #0
   11944:	bne	118f4 <__assert_fail@plt+0x8b0>
   11948:	cmp	r5, r9
   1194c:	ldreq	r0, [r8, #8]
   11950:	moveq	r1, r7
   11954:	ldrne	r0, [r8, #12]
   11958:	movne	r1, r5
   1195c:	b	11904 <__assert_fail@plt+0x8c0>
   11960:	uxtb	r1, r6
   11964:	bl	10fcc <__overflow@plt>
   11968:	b	1193c <__assert_fail@plt+0x8f8>
   1196c:	movw	r3, #41216	; 0xa100
   11970:	movt	r3, #2
   11974:	ldrb	r1, [r3, #16]
   11978:	movw	r3, #41340	; 0xa17c
   1197c:	movt	r3, #2
   11980:	ldr	r0, [r3]
   11984:	ldr	r3, [r0, #20]
   11988:	ldr	r2, [r0, #24]
   1198c:	cmp	r3, r2
   11990:	addcc	r2, r3, #1
   11994:	strcc	r2, [r0, #20]
   11998:	strbcc	r1, [r3]
   1199c:	bcs	119b8 <__assert_fail@plt+0x974>
   119a0:	ldrd	r4, [sp]
   119a4:	ldrd	r6, [sp, #8]
   119a8:	ldrd	r8, [sp, #16]
   119ac:	ldr	sl, [sp, #24]
   119b0:	add	sp, sp, #28
   119b4:	pop	{pc}		; (ldr pc, [sp], #4)
   119b8:	bl	10fcc <__overflow@plt>
   119bc:	b	119a0 <__assert_fail@plt+0x95c>
   119c0:	ldr	r3, [pc, #124]	; 11a44 <__assert_fail@plt+0xa00>
   119c4:	cmp	r0, r3
   119c8:	movw	r3, #41216	; 0xa100
   119cc:	movt	r3, #2
   119d0:	ldreq	r0, [r3, #8]
   119d4:	ldrne	r0, [r3, #12]
   119d8:	movne	r1, r5
   119dc:	bl	116d4 <__assert_fail@plt+0x690>
   119e0:	movw	r6, #41352	; 0xa188
   119e4:	movt	r6, #2
   119e8:	movw	r4, #41216	; 0xa100
   119ec:	movt	r4, #2
   119f0:	ldr	r2, [r6, #56]	; 0x38
   119f4:	ldr	r1, [r4, #12]
   119f8:	mov	r0, r5
   119fc:	bl	11770 <__assert_fail@plt+0x72c>
   11a00:	ldr	r2, [r6, #60]	; 0x3c
   11a04:	ldr	r1, [r4, #8]
   11a08:	mov	r0, r7
   11a0c:	bl	11770 <__assert_fail@plt+0x72c>
   11a10:	ldrb	r1, [r4, #16]
   11a14:	movw	r3, #41340	; 0xa17c
   11a18:	movt	r3, #2
   11a1c:	ldr	r0, [r3]
   11a20:	ldr	r3, [r0, #20]
   11a24:	ldr	r2, [r0, #24]
   11a28:	cmp	r3, r2
   11a2c:	addcc	r2, r3, #1
   11a30:	strcc	r2, [r0, #20]
   11a34:	strbcc	r1, [r3]
   11a38:	bcc	119a0 <__assert_fail@plt+0x95c>
   11a3c:	bl	10fcc <__overflow@plt>
   11a40:	b	119a0 <__assert_fail@plt+0x95c>
   11a44:	andeq	sl, r2, r8, lsr #3
   11a48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a4c:	strd	r6, [sp, #8]
   11a50:	strd	r8, [sp, #16]
   11a54:	strd	sl, [sp, #24]
   11a58:	str	lr, [sp, #32]
   11a5c:	sub	sp, sp, #20
   11a60:	mov	r6, r0
   11a64:	mov	r4, r1
   11a68:	mov	r8, r2
   11a6c:	ldr	r5, [r1]
   11a70:	sub	r7, r2, #1
   11a74:	movw	r3, #41352	; 0xa188
   11a78:	movt	r3, #2
   11a7c:	add	r3, r3, r7, lsl #2
   11a80:	ldr	r3, [r3, #64]	; 0x40
   11a84:	cmp	r3, r5
   11a88:	beq	11c84 <__assert_fail@plt+0xc40>
   11a8c:	cmp	r5, #0
   11a90:	beq	11ca0 <__assert_fail@plt+0xc5c>
   11a94:	mov	r3, #0
   11a98:	str	r3, [r5, #12]
   11a9c:	movw	r3, #41216	; 0xa100
   11aa0:	movt	r3, #2
   11aa4:	ldrb	r2, [r3, #16]
   11aa8:	mov	r1, r6
   11aac:	mov	r0, r5
   11ab0:	bl	138dc <__assert_fail@plt+0x2898>
   11ab4:	cmp	r0, #0
   11ab8:	beq	11cb8 <__assert_fail@plt+0xc74>
   11abc:	movw	r3, #41352	; 0xa188
   11ac0:	movt	r3, #2
   11ac4:	add	r3, r3, r7, lsl #3
   11ac8:	ldr	r2, [r3, #72]	; 0x48
   11acc:	ldr	r1, [r3, #76]	; 0x4c
   11ad0:	adds	r2, r2, #1
   11ad4:	adc	r1, r1, #0
   11ad8:	str	r2, [r3, #72]	; 0x48
   11adc:	str	r1, [r3, #76]	; 0x4c
   11ae0:	ldr	r4, [r5, #8]
   11ae4:	ldr	r6, [r5, #4]
   11ae8:	sub	r6, r6, #1
   11aec:	add	r6, r4, r6
   11af0:	cmp	r4, r6
   11af4:	beq	11b3c <__assert_fail@plt+0xaf8>
   11af8:	movw	r3, #41216	; 0xa100
   11afc:	movt	r3, #2
   11b00:	ldr	r3, [r3, #4]
   11b04:	mvn	r2, r3
   11b08:	lsr	r2, r2, #31
   11b0c:	cmp	r3, #10
   11b10:	moveq	r2, #0
   11b14:	cmp	r2, #0
   11b18:	movwne	sl, #41216	; 0xa100
   11b1c:	movtne	sl, #2
   11b20:	bne	11d00 <__assert_fail@plt+0xcbc>
   11b24:	cmp	r3, #0
   11b28:	blt	11d30 <__assert_fail@plt+0xcec>
   11b2c:	sub	r2, r6, r4
   11b30:	mov	r1, r4
   11b34:	mov	r0, r5
   11b38:	bl	1152c <__assert_fail@plt+0x4e8>
   11b3c:	movw	r3, #41352	; 0xa188
   11b40:	movt	r3, #2
   11b44:	add	r3, r3, r7, lsl #2
   11b48:	ldr	r0, [r3, #64]	; 0x40
   11b4c:	cmp	r0, #0
   11b50:	beq	11c54 <__assert_fail@plt+0xc10>
   11b54:	movw	r3, #41352	; 0xa188
   11b58:	movt	r3, #2
   11b5c:	ldr	r3, [r3, #88]	; 0x58
   11b60:	cmp	r3, #2
   11b64:	beq	11c54 <__assert_fail@plt+0xc10>
   11b68:	cmp	r3, #1
   11b6c:	beq	11b84 <__assert_fail@plt+0xb40>
   11b70:	movw	r3, #41352	; 0xa188
   11b74:	movt	r3, #2
   11b78:	ldrb	r3, [r3, #92]	; 0x5c
   11b7c:	cmp	r3, #0
   11b80:	beq	11c54 <__assert_fail@plt+0xc10>
   11b84:	movw	r3, #41352	; 0xa188
   11b88:	movt	r3, #2
   11b8c:	add	r3, r3, r7
   11b90:	ldrb	r3, [r3, #96]	; 0x60
   11b94:	cmp	r3, #0
   11b98:	bne	11c54 <__assert_fail@plt+0xc10>
   11b9c:	cmp	r8, #1
   11ba0:	movw	r3, #41216	; 0xa100
   11ba4:	movt	r3, #2
   11ba8:	ldreq	r2, [r3, #12]
   11bac:	ldrne	r2, [r3, #8]
   11bb0:	mov	r3, r2
   11bb4:	mov	r1, r5
   11bb8:	bl	115a4 <__assert_fail@plt+0x560>
   11bbc:	cmp	r0, #0
   11bc0:	ble	11c54 <__assert_fail@plt+0xc10>
   11bc4:	ldr	r6, [r5, #4]
   11bc8:	cmp	r6, #0
   11bcc:	beq	11bec <__assert_fail@plt+0xba8>
   11bd0:	sub	r3, r6, #1
   11bd4:	ldr	r2, [r5, #8]
   11bd8:	ldrb	r2, [r2, r3]
   11bdc:	cmp	r2, #10
   11be0:	moveq	r6, r3
   11be4:	cmp	r6, #0
   11be8:	mvnlt	r6, #-2147483648	; 0x80000000
   11bec:	movw	r4, #41352	; 0xa188
   11bf0:	movt	r4, #2
   11bf4:	ldr	r8, [r4, #88]	; 0x58
   11bf8:	cmp	r8, #1
   11bfc:	movne	r8, #0
   11c00:	moveq	r8, #1
   11c04:	mov	r2, #5
   11c08:	movw	r1, #32708	; 0x7fc4
   11c0c:	movt	r1, #1
   11c10:	mov	r0, #0
   11c14:	bl	10e40 <dcgettext@plt>
   11c18:	add	r1, r4, r7, lsl #2
   11c1c:	ldr	r3, [r5, #8]
   11c20:	str	r3, [sp, #12]
   11c24:	str	r6, [sp, #8]
   11c28:	add	r3, r4, r7, lsl #3
   11c2c:	ldrd	r2, [r3, #72]	; 0x48
   11c30:	strd	r2, [sp]
   11c34:	ldr	r3, [r1, #100]	; 0x64
   11c38:	mov	r2, r0
   11c3c:	mov	r1, #0
   11c40:	mov	r0, r8
   11c44:	bl	10eac <error@plt>
   11c48:	add	r4, r4, r7
   11c4c:	mov	r3, #1
   11c50:	strb	r3, [r4, #96]	; 0x60
   11c54:	movw	r3, #41352	; 0xa188
   11c58:	movt	r3, #2
   11c5c:	add	r7, r3, r7, lsl #2
   11c60:	str	r5, [r7, #64]	; 0x40
   11c64:	mov	r0, #1
   11c68:	add	sp, sp, #20
   11c6c:	ldrd	r4, [sp]
   11c70:	ldrd	r6, [sp, #8]
   11c74:	ldrd	r8, [sp, #16]
   11c78:	ldrd	sl, [sp, #24]
   11c7c:	add	sp, sp, #32
   11c80:	pop	{pc}		; (ldr pc, [sp], #4)
   11c84:	movw	r3, #41352	; 0xa188
   11c88:	movt	r3, #2
   11c8c:	ldr	r2, [r3, r7, lsl #2]
   11c90:	str	r5, [r3, r7, lsl #2]
   11c94:	str	r2, [r1]
   11c98:	mov	r5, r2
   11c9c:	b	11a8c <__assert_fail@plt+0xa48>
   11ca0:	mov	r1, #24
   11ca4:	mov	r0, #1
   11ca8:	bl	16798 <__assert_fail@plt+0x5754>
   11cac:	mov	r5, r0
   11cb0:	str	r0, [r4]
   11cb4:	b	11a9c <__assert_fail@plt+0xa58>
   11cb8:	ldr	r3, [r6]
   11cbc:	tst	r3, #32
   11cc0:	bne	11cd4 <__assert_fail@plt+0xc90>
   11cc4:	mov	r0, r5
   11cc8:	bl	111a4 <__assert_fail@plt+0x160>
   11ccc:	mov	r0, #0
   11cd0:	b	11c68 <__assert_fail@plt+0xc24>
   11cd4:	bl	10f48 <__errno_location@plt>
   11cd8:	ldr	r4, [r0]
   11cdc:	mov	r2, #5
   11ce0:	movw	r1, #32696	; 0x7fb8
   11ce4:	movt	r1, #1
   11ce8:	mov	r0, #0
   11cec:	bl	10e40 <dcgettext@plt>
   11cf0:	mov	r2, r0
   11cf4:	mov	r1, r4
   11cf8:	mov	r0, #1
   11cfc:	bl	10eac <error@plt>
   11d00:	sub	r2, r6, r4
   11d04:	ldr	r1, [sl, #4]
   11d08:	mov	r0, r4
   11d0c:	bl	10f90 <memchr@plt>
   11d10:	subs	r9, r0, #0
   11d14:	beq	11b2c <__assert_fail@plt+0xae8>
   11d18:	sub	r2, r9, r4
   11d1c:	mov	r1, r4
   11d20:	mov	r0, r5
   11d24:	bl	1152c <__assert_fail@plt+0x4e8>
   11d28:	add	r4, r9, #1
   11d2c:	b	11d00 <__assert_fail@plt+0xcbc>
   11d30:	bl	10f0c <__ctype_b_loc@plt>
   11d34:	mov	r9, r0
   11d38:	ldr	r0, [r0]
   11d3c:	mov	r3, r4
   11d40:	mov	r4, r3
   11d44:	ldrb	r1, [r3], #1
   11d48:	lsl	r2, r1, #1
   11d4c:	ldrh	r2, [r0, r2]
   11d50:	cmp	r1, #10
   11d54:	orreq	r2, r2, #1
   11d58:	tst	r2, #1
   11d5c:	beq	11d6c <__assert_fail@plt+0xd28>
   11d60:	cmp	r6, r3
   11d64:	bne	11d40 <__assert_fail@plt+0xcfc>
   11d68:	b	11b3c <__assert_fail@plt+0xaf8>
   11d6c:	mov	fp, r6
   11d70:	add	sl, r4, #1
   11d74:	cmp	r6, sl
   11d78:	beq	11e38 <__assert_fail@plt+0xdf4>
   11d7c:	ldrb	r2, [r4, #1]
   11d80:	ldr	r1, [r9]
   11d84:	lsl	r3, r2, #1
   11d88:	ldrh	r3, [r1, r3]
   11d8c:	cmp	r2, #10
   11d90:	orreq	r3, r3, #1
   11d94:	tst	r3, #1
   11d98:	beq	11e08 <__assert_fail@plt+0xdc4>
   11d9c:	sub	r2, sl, r4
   11da0:	mov	r1, r4
   11da4:	mov	r0, r5
   11da8:	bl	1152c <__assert_fail@plt+0x4e8>
   11dac:	add	r4, sl, #1
   11db0:	cmp	r6, r4
   11db4:	beq	11b2c <__assert_fail@plt+0xae8>
   11db8:	ldrb	r2, [sl, #1]
   11dbc:	ldr	r1, [r9]
   11dc0:	lsl	r3, r2, #1
   11dc4:	ldrh	r3, [r1, r3]
   11dc8:	cmp	r2, #10
   11dcc:	orreq	r3, r3, #1
   11dd0:	tst	r3, #1
   11dd4:	beq	11d70 <__assert_fail@plt+0xd2c>
   11dd8:	add	sl, sl, #2
   11ddc:	mov	r4, sl
   11de0:	cmp	sl, fp
   11de4:	beq	11b2c <__assert_fail@plt+0xae8>
   11de8:	ldrb	r2, [sl], #1
   11dec:	lsl	r3, r2, #1
   11df0:	ldrh	r3, [r1, r3]
   11df4:	cmp	r2, #10
   11df8:	orreq	r3, r3, #1
   11dfc:	tst	r3, #1
   11e00:	beq	11d70 <__assert_fail@plt+0xd2c>
   11e04:	b	11ddc <__assert_fail@plt+0xd98>
   11e08:	add	r3, r4, #2
   11e0c:	mov	sl, r3
   11e10:	cmp	r3, fp
   11e14:	beq	11e38 <__assert_fail@plt+0xdf4>
   11e18:	ldrb	r0, [r3], #1
   11e1c:	lsl	r2, r0, #1
   11e20:	ldrh	r2, [r1, r2]
   11e24:	cmp	r0, #10
   11e28:	orreq	r2, r2, #1
   11e2c:	tst	r2, #1
   11e30:	bne	11d9c <__assert_fail@plt+0xd58>
   11e34:	b	11e0c <__assert_fail@plt+0xdc8>
   11e38:	sub	r2, sl, r4
   11e3c:	mov	r1, r4
   11e40:	mov	r0, r5
   11e44:	bl	1152c <__assert_fail@plt+0x4e8>
   11e48:	b	11b3c <__assert_fail@plt+0xaf8>
   11e4c:	strd	r4, [sp, #-16]!
   11e50:	str	r6, [sp, #8]
   11e54:	str	lr, [sp, #12]
   11e58:	mov	r5, r0
   11e5c:	mov	r4, r1
   11e60:	mov	r6, r2
   11e64:	ldr	r2, [r1]
   11e68:	ldr	r3, [r1, #4]
   11e6c:	cmp	r2, r3
   11e70:	beq	11ea4 <__assert_fail@plt+0xe60>
   11e74:	ldr	r1, [r4]
   11e78:	ldr	r3, [r4, #8]
   11e7c:	mov	r2, r6
   11e80:	add	r1, r3, r1, lsl #2
   11e84:	mov	r0, r5
   11e88:	bl	11a48 <__assert_fail@plt+0xa04>
   11e8c:	cmp	r0, #0
   11e90:	bne	11ee8 <__assert_fail@plt+0xea4>
   11e94:	ldrd	r4, [sp]
   11e98:	ldr	r6, [sp, #8]
   11e9c:	add	sp, sp, #12
   11ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ea4:	mov	r2, #4
   11ea8:	add	r1, r1, r2
   11eac:	ldr	r0, [r4, #8]
   11eb0:	bl	16624 <__assert_fail@plt+0x55e0>
   11eb4:	str	r0, [r4, #8]
   11eb8:	ldr	r3, [r4]
   11ebc:	ldr	r2, [r4, #4]
   11ec0:	cmp	r3, r2
   11ec4:	bcs	11e74 <__assert_fail@plt+0xe30>
   11ec8:	mov	r1, #0
   11ecc:	ldr	r2, [r4, #8]
   11ed0:	str	r1, [r2, r3, lsl #2]
   11ed4:	add	r3, r3, #1
   11ed8:	ldr	r2, [r4, #4]
   11edc:	cmp	r2, r3
   11ee0:	bhi	11ecc <__assert_fail@plt+0xe88>
   11ee4:	b	11e74 <__assert_fail@plt+0xe30>
   11ee8:	ldr	r3, [r4]
   11eec:	add	r3, r3, #1
   11ef0:	str	r3, [r4]
   11ef4:	b	11e94 <__assert_fail@plt+0xe50>
   11ef8:	push	{lr}		; (str lr, [sp, #-4]!)
   11efc:	sub	sp, sp, #60	; 0x3c
   11f00:	subs	r5, r0, #0
   11f04:	beq	11f4c <__assert_fail@plt+0xf08>
   11f08:	movw	r3, #41328	; 0xa170
   11f0c:	movt	r3, #2
   11f10:	ldr	r4, [r3]
   11f14:	mov	r2, #5
   11f18:	movw	r1, #32748	; 0x7fec
   11f1c:	movt	r1, #1
   11f20:	mov	r0, #0
   11f24:	bl	10e40 <dcgettext@plt>
   11f28:	movw	r3, #41472	; 0xa200
   11f2c:	movt	r3, #2
   11f30:	ldr	r3, [r3]
   11f34:	mov	r2, r0
   11f38:	mov	r1, #1
   11f3c:	mov	r0, r4
   11f40:	bl	10f84 <__fprintf_chk@plt>
   11f44:	mov	r0, r5
   11f48:	bl	10f18 <exit@plt>
   11f4c:	mov	r2, #5
   11f50:	movw	r1, #32788	; 0x8014
   11f54:	movt	r1, #1
   11f58:	mov	r0, #0
   11f5c:	bl	10e40 <dcgettext@plt>
   11f60:	movw	r3, #41472	; 0xa200
   11f64:	movt	r3, #2
   11f68:	ldr	r2, [r3]
   11f6c:	mov	r1, r0
   11f70:	mov	r0, #1
   11f74:	bl	10f6c <__printf_chk@plt>
   11f78:	mov	r2, #5
   11f7c:	movw	r1, #32824	; 0x8038
   11f80:	movt	r1, #1
   11f84:	mov	r0, #0
   11f88:	bl	10e40 <dcgettext@plt>
   11f8c:	movw	r4, #41340	; 0xa17c
   11f90:	movt	r4, #2
   11f94:	ldr	r1, [r4]
   11f98:	bl	10db0 <fputs_unlocked@plt>
   11f9c:	mov	r2, #5
   11fa0:	movw	r1, #32976	; 0x80d0
   11fa4:	movt	r1, #1
   11fa8:	mov	r0, #0
   11fac:	bl	10e40 <dcgettext@plt>
   11fb0:	ldr	r1, [r4]
   11fb4:	bl	10db0 <fputs_unlocked@plt>
   11fb8:	mov	r2, #5
   11fbc:	movw	r1, #33036	; 0x810c
   11fc0:	movt	r1, #1
   11fc4:	mov	r0, #0
   11fc8:	bl	10e40 <dcgettext@plt>
   11fcc:	ldr	r1, [r4]
   11fd0:	bl	10db0 <fputs_unlocked@plt>
   11fd4:	mov	r2, #5
   11fd8:	movw	r1, #33260	; 0x81ec
   11fdc:	movt	r1, #1
   11fe0:	mov	r0, #0
   11fe4:	bl	10e40 <dcgettext@plt>
   11fe8:	ldr	r1, [r4]
   11fec:	bl	10db0 <fputs_unlocked@plt>
   11ff0:	mov	r2, #5
   11ff4:	movw	r1, #33532	; 0x82fc
   11ff8:	movt	r1, #1
   11ffc:	mov	r0, #0
   12000:	bl	10e40 <dcgettext@plt>
   12004:	ldr	r1, [r4]
   12008:	bl	10db0 <fputs_unlocked@plt>
   1200c:	mov	r2, #5
   12010:	movw	r1, #34064	; 0x8510
   12014:	movt	r1, #1
   12018:	mov	r0, #0
   1201c:	bl	10e40 <dcgettext@plt>
   12020:	ldr	r1, [r4]
   12024:	bl	10db0 <fputs_unlocked@plt>
   12028:	mov	r2, #5
   1202c:	movw	r1, #34128	; 0x8550
   12030:	movt	r1, #1
   12034:	mov	r0, #0
   12038:	bl	10e40 <dcgettext@plt>
   1203c:	ldr	r1, [r4]
   12040:	bl	10db0 <fputs_unlocked@plt>
   12044:	mov	r2, #5
   12048:	movw	r1, #34176	; 0x8580
   1204c:	movt	r1, #1
   12050:	mov	r0, #0
   12054:	bl	10e40 <dcgettext@plt>
   12058:	ldr	r1, [r4]
   1205c:	bl	10db0 <fputs_unlocked@plt>
   12060:	mov	r2, #5
   12064:	movw	r1, #34232	; 0x85b8
   12068:	movt	r1, #1
   1206c:	mov	r0, #0
   12070:	bl	10e40 <dcgettext@plt>
   12074:	ldr	r1, [r4]
   12078:	bl	10db0 <fputs_unlocked@plt>
   1207c:	movw	r3, #32292	; 0x7e24
   12080:	movt	r3, #1
   12084:	add	r0, r3, #12
   12088:	ldr	r1, [r3, #12]
   1208c:	ldr	r3, [r3, #16]
   12090:	str	r1, [sp]
   12094:	str	r3, [sp, #4]
   12098:	ldrd	r2, [r0, #8]
   1209c:	strd	r2, [sp, #8]
   120a0:	ldrd	r2, [r0, #16]
   120a4:	strd	r2, [sp, #16]
   120a8:	ldrd	r2, [r0, #24]
   120ac:	strd	r2, [sp, #24]
   120b0:	ldrd	r2, [r0, #32]
   120b4:	strd	r2, [sp, #32]
   120b8:	ldrd	r2, [r0, #40]	; 0x28
   120bc:	strd	r2, [sp, #40]	; 0x28
   120c0:	ldrd	r2, [r0, #48]	; 0x30
   120c4:	strd	r2, [sp, #48]	; 0x30
   120c8:	cmp	r1, #0
   120cc:	moveq	r4, sp
   120d0:	beq	120fc <__assert_fail@plt+0x10b8>
   120d4:	mov	r4, sp
   120d8:	movw	r6, #32740	; 0x7fe4
   120dc:	movt	r6, #1
   120e0:	mov	r0, r6
   120e4:	bl	10dbc <strcmp@plt>
   120e8:	cmp	r0, #0
   120ec:	beq	120fc <__assert_fail@plt+0x10b8>
   120f0:	ldr	r1, [r4, #8]!
   120f4:	cmp	r1, #0
   120f8:	bne	120e0 <__assert_fail@plt+0x109c>
   120fc:	ldr	r4, [r4, #4]
   12100:	cmp	r4, #0
   12104:	beq	12260 <__assert_fail@plt+0x121c>
   12108:	mov	r2, #5
   1210c:	movw	r1, #35052	; 0x88ec
   12110:	movt	r1, #1
   12114:	mov	r0, #0
   12118:	bl	10e40 <dcgettext@plt>
   1211c:	movw	r3, #35076	; 0x8904
   12120:	movt	r3, #1
   12124:	movw	r2, #35116	; 0x892c
   12128:	movt	r2, #1
   1212c:	mov	r1, r0
   12130:	mov	r0, #1
   12134:	bl	10f6c <__printf_chk@plt>
   12138:	mov	r1, #0
   1213c:	mov	r0, #5
   12140:	bl	10fd8 <setlocale@plt>
   12144:	cmp	r0, #0
   12148:	beq	12164 <__assert_fail@plt+0x1120>
   1214c:	mov	r2, #3
   12150:	movw	r1, #35132	; 0x893c
   12154:	movt	r1, #1
   12158:	bl	11020 <strncmp@plt>
   1215c:	cmp	r0, #0
   12160:	bne	121e0 <__assert_fail@plt+0x119c>
   12164:	mov	r2, #5
   12168:	movw	r1, #35208	; 0x8988
   1216c:	movt	r1, #1
   12170:	mov	r0, #0
   12174:	bl	10e40 <dcgettext@plt>
   12178:	movw	r6, #32740	; 0x7fe4
   1217c:	movt	r6, #1
   12180:	mov	r3, r6
   12184:	movw	r2, #35076	; 0x8904
   12188:	movt	r2, #1
   1218c:	mov	r1, r0
   12190:	mov	r0, #1
   12194:	bl	10f6c <__printf_chk@plt>
   12198:	mov	r2, #5
   1219c:	movw	r1, #35236	; 0x89a4
   121a0:	movt	r1, #1
   121a4:	mov	r0, #0
   121a8:	bl	10e40 <dcgettext@plt>
   121ac:	mov	r1, r0
   121b0:	movw	r2, #35592	; 0x8b08
   121b4:	movt	r2, #1
   121b8:	movw	r3, #34124	; 0x854c
   121bc:	movt	r3, #1
   121c0:	cmp	r4, r6
   121c4:	moveq	r3, r2
   121c8:	mov	r2, r4
   121cc:	mov	r0, #1
   121d0:	bl	10f6c <__printf_chk@plt>
   121d4:	b	11f44 <__assert_fail@plt+0xf00>
   121d8:	movw	r4, #32740	; 0x7fe4
   121dc:	movt	r4, #1
   121e0:	mov	r2, #5
   121e4:	movw	r1, #35136	; 0x8940
   121e8:	movt	r1, #1
   121ec:	mov	r0, #0
   121f0:	bl	10e40 <dcgettext@plt>
   121f4:	movw	r3, #41340	; 0xa17c
   121f8:	movt	r3, #2
   121fc:	ldr	r1, [r3]
   12200:	bl	10db0 <fputs_unlocked@plt>
   12204:	b	12164 <__assert_fail@plt+0x1120>
   12208:	mov	r2, #5
   1220c:	movw	r1, #35208	; 0x8988
   12210:	movt	r1, #1
   12214:	mov	r0, #0
   12218:	bl	10e40 <dcgettext@plt>
   1221c:	movw	r4, #32740	; 0x7fe4
   12220:	movt	r4, #1
   12224:	mov	r3, r4
   12228:	movw	r2, #35076	; 0x8904
   1222c:	movt	r2, #1
   12230:	mov	r1, r0
   12234:	mov	r0, #1
   12238:	bl	10f6c <__printf_chk@plt>
   1223c:	mov	r2, #5
   12240:	movw	r1, #35236	; 0x89a4
   12244:	movt	r1, #1
   12248:	mov	r0, #0
   1224c:	bl	10e40 <dcgettext@plt>
   12250:	mov	r1, r0
   12254:	movw	r3, #35592	; 0x8b08
   12258:	movt	r3, #1
   1225c:	b	121c8 <__assert_fail@plt+0x1184>
   12260:	mov	r2, #5
   12264:	movw	r1, #35052	; 0x88ec
   12268:	movt	r1, #1
   1226c:	mov	r0, #0
   12270:	bl	10e40 <dcgettext@plt>
   12274:	movw	r3, #35076	; 0x8904
   12278:	movt	r3, #1
   1227c:	movw	r2, #35116	; 0x892c
   12280:	movt	r2, #1
   12284:	mov	r1, r0
   12288:	mov	r0, #1
   1228c:	bl	10f6c <__printf_chk@plt>
   12290:	mov	r1, #0
   12294:	mov	r0, #5
   12298:	bl	10fd8 <setlocale@plt>
   1229c:	cmp	r0, #0
   122a0:	beq	12208 <__assert_fail@plt+0x11c4>
   122a4:	mov	r2, #3
   122a8:	movw	r1, #35132	; 0x893c
   122ac:	movt	r1, #1
   122b0:	bl	11020 <strncmp@plt>
   122b4:	cmp	r0, #0
   122b8:	bne	121d8 <__assert_fail@plt+0x1194>
   122bc:	mov	r2, #5
   122c0:	movw	r1, #35208	; 0x8988
   122c4:	movt	r1, #1
   122c8:	mov	r0, #0
   122cc:	bl	10e40 <dcgettext@plt>
   122d0:	movw	r4, #32740	; 0x7fe4
   122d4:	movt	r4, #1
   122d8:	mov	r3, r4
   122dc:	movw	r2, #35076	; 0x8904
   122e0:	movt	r2, #1
   122e4:	mov	r1, r0
   122e8:	mov	r0, #1
   122ec:	bl	10f6c <__printf_chk@plt>
   122f0:	mov	r2, #5
   122f4:	movw	r1, #35236	; 0x89a4
   122f8:	movt	r1, #1
   122fc:	mov	r0, #0
   12300:	bl	10e40 <dcgettext@plt>
   12304:	mov	r1, r0
   12308:	movw	r3, #35592	; 0x8b08
   1230c:	movt	r3, #1
   12310:	b	121c8 <__assert_fail@plt+0x1184>
   12314:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12318:	strd	r6, [sp, #8]
   1231c:	strd	r8, [sp, #16]
   12320:	str	sl, [sp, #24]
   12324:	str	lr, [sp, #28]
   12328:	mov	r8, r0
   1232c:	mov	r7, r1
   12330:	mov	r4, r2
   12334:	ldr	r5, [sp, #32]
   12338:	ldr	r6, [sp, #36]	; 0x24
   1233c:	ldr	r2, [r5]
   12340:	cmp	r2, #2
   12344:	beq	12380 <__assert_fail@plt+0x133c>
   12348:	ldr	r3, [r6]
   1234c:	str	r3, [r4, r2, lsl #2]
   12350:	str	r8, [r7, r2, lsl #2]
   12354:	add	r2, r2, #1
   12358:	str	r2, [r5]
   1235c:	ldr	r3, [r6]
   12360:	cmp	r3, #3
   12364:	beq	12450 <__assert_fail@plt+0x140c>
   12368:	ldrd	r4, [sp]
   1236c:	ldrd	r6, [sp, #8]
   12370:	ldrd	r8, [sp, #16]
   12374:	ldr	sl, [sp, #24]
   12378:	add	sp, sp, #28
   1237c:	pop	{pc}		; (ldr pc, [sp], #4)
   12380:	ldr	r9, [r4]
   12384:	clz	r2, r9
   12388:	lsr	r2, r2, #5
   1238c:	ldr	r0, [r1, r2, lsl #2]
   12390:	ldr	r2, [r4, r2, lsl #2]
   12394:	cmp	r2, #3
   12398:	ldrls	pc, [pc, r2, lsl #2]
   1239c:	b	1240c <__assert_fail@plt+0x13c8>
   123a0:			; <UNDEFINED> instruction: 0x000123b0
   123a4:	strdeq	r2, [r1], -r0
   123a8:	andeq	r2, r1, r8, lsr #8
   123ac:	andeq	r2, r1, r8, asr #8
   123b0:	mov	r2, #5
   123b4:	movw	r1, #35288	; 0x89d8
   123b8:	movt	r1, #1
   123bc:	mov	r0, #0
   123c0:	bl	10e40 <dcgettext@plt>
   123c4:	mov	r4, r0
   123c8:	mov	r1, r8
   123cc:	mov	r0, #4
   123d0:	bl	15ab8 <__assert_fail@plt+0x4a74>
   123d4:	mov	r3, r0
   123d8:	mov	r2, r4
   123dc:	mov	r1, #0
   123e0:	mov	r0, r1
   123e4:	bl	10eac <error@plt>
   123e8:	mov	r0, #1
   123ec:	bl	11ef8 <__assert_fail@plt+0xeb4>
   123f0:	ldr	r2, [r3]
   123f4:	sub	r2, r2, #1
   123f8:	str	r2, [r3]
   123fc:	bl	112a8 <__assert_fail@plt+0x264>
   12400:	mov	r1, r0
   12404:	ldr	r0, [pc, #84]	; 12460 <__assert_fail@plt+0x141c>
   12408:	bl	11140 <__assert_fail@plt+0xfc>
   1240c:	cmp	r9, #0
   12410:	ldrne	r3, [r4, #4]
   12414:	strne	r3, [r4]
   12418:	ldrne	r3, [r7, #4]
   1241c:	strne	r3, [r7]
   12420:	mov	r2, #1
   12424:	b	12348 <__assert_fail@plt+0x1304>
   12428:	ldr	r2, [r3, #4]
   1242c:	sub	r2, r2, #1
   12430:	str	r2, [r3, #4]
   12434:	bl	112a8 <__assert_fail@plt+0x264>
   12438:	mov	r1, r0
   1243c:	ldr	r0, [pc, #32]	; 12464 <__assert_fail@plt+0x1420>
   12440:	bl	11140 <__assert_fail@plt+0xfc>
   12444:	b	1240c <__assert_fail@plt+0x13c8>
   12448:	bl	1135c <__assert_fail@plt+0x318>
   1244c:	b	1240c <__assert_fail@plt+0x13c8>
   12450:	ldr	r3, [sp, #40]	; 0x28
   12454:	mov	r2, #3
   12458:	str	r2, [r3]
   1245c:	b	12368 <__assert_fail@plt+0x1324>
   12460:	andeq	sl, r2, ip, lsl #2
   12464:	andeq	sl, r2, r8, lsl #2
   12468:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1246c:	strd	r6, [sp, #8]
   12470:	strd	r8, [sp, #16]
   12474:	strd	sl, [sp, #24]
   12478:	str	lr, [sp, #32]
   1247c:	sub	sp, sp, #84	; 0x54
   12480:	mov	r5, r0
   12484:	mov	r4, r1
   12488:	mov	r7, #0
   1248c:	str	r7, [sp, #72]	; 0x48
   12490:	str	r7, [sp, #56]	; 0x38
   12494:	str	r7, [sp, #60]	; 0x3c
   12498:	str	r7, [sp, #52]	; 0x34
   1249c:	ldr	r0, [r1]
   124a0:	bl	13aac <__assert_fail@plt+0x2a68>
   124a4:	movw	r1, #34124	; 0x854c
   124a8:	movt	r1, #1
   124ac:	mov	r0, #6
   124b0:	bl	10fd8 <setlocale@plt>
   124b4:	movw	r6, #35120	; 0x8930
   124b8:	movt	r6, #1
   124bc:	movw	r1, #35308	; 0x89ec
   124c0:	movt	r1, #1
   124c4:	mov	r0, r6
   124c8:	bl	11014 <bindtextdomain@plt>
   124cc:	mov	r0, r6
   124d0:	bl	10e58 <textdomain@plt>
   124d4:	mov	r0, #3
   124d8:	bl	1386c <__assert_fail@plt+0x2828>
   124dc:	movw	r6, #41352	; 0xa188
   124e0:	movt	r6, #2
   124e4:	strb	r0, [r6, #9]
   124e8:	movw	r0, #13296	; 0x33f0
   124ec:	movt	r0, #1
   124f0:	bl	17e00 <__assert_fail@plt+0x6dbc>
   124f4:	movw	r0, #4580	; 0x11e4
   124f8:	movt	r0, #1
   124fc:	bl	17e00 <__assert_fail@plt+0x6dbc>
   12500:	mov	r3, #1
   12504:	strb	r3, [r6, #108]	; 0x6c
   12508:	strb	r7, [r6, #92]	; 0x5c
   1250c:	strb	r7, [r6, #97]	; 0x61
   12510:	strb	r7, [r6, #96]	; 0x60
   12514:	str	r7, [r6, #88]	; 0x58
   12518:	ldr	r7, [pc, #3748]	; 133c4 <__assert_fail@plt+0x2380>
   1251c:	movw	r6, #35448	; 0x8a78
   12520:	movt	r6, #1
   12524:	movw	r8, #41352	; 0xa188
   12528:	movt	r8, #2
   1252c:	movw	r9, #41216	; 0xa100
   12530:	movt	r9, #2
   12534:	add	sl, r9, #12
   12538:	add	fp, r8, #100	; 0x64
   1253c:	b	1269c <__assert_fail@plt+0x1658>
   12540:	cmp	r0, #49	; 0x31
   12544:	beq	127b4 <__assert_fail@plt+0x1770>
   12548:	ble	12584 <__assert_fail@plt+0x1540>
   1254c:	cmp	r0, #97	; 0x61
   12550:	beq	12644 <__assert_fail@plt+0x1600>
   12554:	cmp	r0, #101	; 0x65
   12558:	beq	1274c <__assert_fail@plt+0x1708>
   1255c:	cmp	r0, #50	; 0x32
   12560:	bne	1259c <__assert_fail@plt+0x1558>
   12564:	movw	r3, #41344	; 0xa180
   12568:	movt	r3, #2
   1256c:	ldr	r0, [r3]
   12570:	bl	112a8 <__assert_fail@plt+0x264>
   12574:	mov	r1, r0
   12578:	add	r0, r9, #8
   1257c:	bl	11140 <__assert_fail@plt+0xfc>
   12580:	b	12694 <__assert_fail@plt+0x1650>
   12584:	cmn	r0, #2
   12588:	beq	12958 <__assert_fail@plt+0x1914>
   1258c:	cmp	r0, #1
   12590:	beq	12920 <__assert_fail@plt+0x18dc>
   12594:	cmn	r0, #3
   12598:	beq	12960 <__assert_fail@plt+0x191c>
   1259c:	mov	r0, #1
   125a0:	bl	11ef8 <__assert_fail@plt+0xeb4>
   125a4:	cmp	r0, #111	; 0x6f
   125a8:	beq	12800 <__assert_fail@plt+0x17bc>
   125ac:	cmp	r0, #116	; 0x74
   125b0:	beq	12848 <__assert_fail@plt+0x1804>
   125b4:	cmp	r0, #106	; 0x6a
   125b8:	bne	1259c <__assert_fail@plt+0x1558>
   125bc:	movw	r3, #41344	; 0xa180
   125c0:	movt	r3, #2
   125c4:	ldr	r0, [r3]
   125c8:	ldrb	r2, [r0]
   125cc:	sub	r3, r2, #49	; 0x31
   125d0:	uxtb	r3, r3
   125d4:	cmp	r3, #1
   125d8:	bhi	12608 <__assert_fail@plt+0x15c4>
   125dc:	ldrb	r3, [r0, #1]
   125e0:	cmp	r3, #0
   125e4:	bne	12608 <__assert_fail@plt+0x15c4>
   125e8:	movw	r3, #41320	; 0xa168
   125ec:	movt	r3, #2
   125f0:	ldr	r3, [r3]
   125f4:	sub	r3, r3, #-1073741823	; 0xc0000001
   125f8:	ldr	r3, [r4, r3, lsl #2]
   125fc:	add	r3, r3, #2
   12600:	cmp	r0, r3
   12604:	beq	127d4 <__assert_fail@plt+0x1790>
   12608:	bl	112a8 <__assert_fail@plt+0x264>
   1260c:	mov	r1, r0
   12610:	mov	r0, sl
   12614:	bl	11140 <__assert_fail@plt+0xfc>
   12618:	ldr	r1, [r9, #12]
   1261c:	add	r0, r9, #8
   12620:	bl	11140 <__assert_fail@plt+0xfc>
   12624:	b	12694 <__assert_fail@plt+0x1650>
   12628:	cmp	r0, #122	; 0x7a
   1262c:	bne	1259c <__assert_fail@plt+0x1558>
   12630:	mov	r3, #0
   12634:	strb	r3, [r9, #16]
   12638:	b	12694 <__assert_fail@plt+0x1650>
   1263c:	mov	r3, #0
   12640:	strb	r3, [r8, #108]	; 0x6c
   12644:	movw	r0, #41344	; 0xa180
   12648:	movt	r0, #2
   1264c:	movw	r3, #34124	; 0x854c
   12650:	movt	r3, #1
   12654:	str	r3, [sp]
   12658:	add	r3, sp, #40	; 0x28
   1265c:	mov	r2, #10
   12660:	mov	r1, #0
   12664:	ldr	r0, [r0]
   12668:	bl	16b7c <__assert_fail@plt+0x5b38>
   1266c:	cmp	r0, #0
   12670:	bne	12710 <__assert_fail@plt+0x16cc>
   12674:	ldr	r3, [sp, #40]	; 0x28
   12678:	sub	r2, r3, #1
   1267c:	cmp	r2, #1
   12680:	bhi	12710 <__assert_fail@plt+0x16cc>
   12684:	cmp	r3, #1
   12688:	strbeq	r3, [r8, #109]	; 0x6d
   1268c:	movne	r3, #1
   12690:	strbne	r3, [r8, #110]	; 0x6e
   12694:	ldr	r3, [sp, #76]	; 0x4c
   12698:	str	r3, [sp, #72]	; 0x48
   1269c:	mov	r3, #0
   126a0:	str	r3, [sp]
   126a4:	mov	r3, r7
   126a8:	mov	r2, r6
   126ac:	mov	r1, r4
   126b0:	mov	r0, r5
   126b4:	bl	10f00 <getopt_long@plt>
   126b8:	cmn	r0, #1
   126bc:	beq	129a8 <__assert_fail@plt+0x1964>
   126c0:	mov	r3, #0
   126c4:	str	r3, [sp, #76]	; 0x4c
   126c8:	cmp	r0, #105	; 0x69
   126cc:	beq	127a8 <__assert_fail@plt+0x1764>
   126d0:	ble	12540 <__assert_fail@plt+0x14fc>
   126d4:	cmp	r0, #118	; 0x76
   126d8:	beq	1263c <__assert_fail@plt+0x15f8>
   126dc:	ble	125a4 <__assert_fail@plt+0x1560>
   126e0:	cmp	r0, #256	; 0x100
   126e4:	beq	12914 <__assert_fail@plt+0x18d0>
   126e8:	ble	12628 <__assert_fail@plt+0x15e4>
   126ec:	movw	r3, #257	; 0x101
   126f0:	cmp	r0, r3
   126f4:	beq	12908 <__assert_fail@plt+0x18c4>
   126f8:	movw	r3, #258	; 0x102
   126fc:	cmp	r0, r3
   12700:	bne	1259c <__assert_fail@plt+0x1558>
   12704:	mov	r3, #1
   12708:	strb	r3, [r8, #111]	; 0x6f
   1270c:	b	12694 <__assert_fail@plt+0x1650>
   12710:	mov	r2, #5
   12714:	movw	r1, #32524	; 0x7f0c
   12718:	movt	r1, #1
   1271c:	mov	r0, #0
   12720:	bl	10e40 <dcgettext@plt>
   12724:	mov	r4, r0
   12728:	movw	r3, #41344	; 0xa180
   1272c:	movt	r3, #2
   12730:	ldr	r0, [r3]
   12734:	bl	15da8 <__assert_fail@plt+0x4d64>
   12738:	mov	r3, r0
   1273c:	mov	r2, r4
   12740:	mov	r1, #0
   12744:	mov	r0, #1
   12748:	bl	10eac <error@plt>
   1274c:	ldr	r0, [r8, #12]
   12750:	cmp	r0, #0
   12754:	beq	12770 <__assert_fail@plt+0x172c>
   12758:	movw	r3, #41344	; 0xa180
   1275c:	movt	r3, #2
   12760:	ldr	r1, [r3]
   12764:	bl	10dbc <strcmp@plt>
   12768:	cmp	r0, #0
   1276c:	bne	12784 <__assert_fail@plt+0x1740>
   12770:	movw	r3, #41344	; 0xa180
   12774:	movt	r3, #2
   12778:	ldr	r3, [r3]
   1277c:	str	r3, [r8, #12]
   12780:	b	12694 <__assert_fail@plt+0x1650>
   12784:	mov	r2, #5
   12788:	movw	r1, #35332	; 0x8a04
   1278c:	movt	r1, #1
   12790:	mov	r0, #0
   12794:	bl	10e40 <dcgettext@plt>
   12798:	mov	r2, r0
   1279c:	mov	r1, #0
   127a0:	mov	r0, #1
   127a4:	bl	10eac <error@plt>
   127a8:	mov	r3, #1
   127ac:	strb	r3, [r8, #8]
   127b0:	b	12694 <__assert_fail@plt+0x1650>
   127b4:	movw	r3, #41344	; 0xa180
   127b8:	movt	r3, #2
   127bc:	ldr	r0, [r3]
   127c0:	bl	112a8 <__assert_fail@plt+0x264>
   127c4:	mov	r1, r0
   127c8:	mov	r0, sl
   127cc:	bl	11140 <__assert_fail@plt+0xfc>
   127d0:	b	12694 <__assert_fail@plt+0x1650>
   127d4:	cmp	r2, #50	; 0x32
   127d8:	movne	r2, #0
   127dc:	moveq	r2, #1
   127e0:	add	r3, sp, #80	; 0x50
   127e4:	add	r1, r3, r2, lsl #2
   127e8:	ldr	r3, [r1, #-24]	; 0xffffffe8
   127ec:	add	r3, r3, #1
   127f0:	str	r3, [r1, #-24]	; 0xffffffe8
   127f4:	add	r2, r2, #1
   127f8:	str	r2, [sp, #76]	; 0x4c
   127fc:	b	12694 <__assert_fail@plt+0x1650>
   12800:	movw	r3, #41344	; 0xa180
   12804:	movt	r3, #2
   12808:	ldr	r3, [r3]
   1280c:	str	r3, [sp, #20]
   12810:	movw	r1, #35376	; 0x8a30
   12814:	movt	r1, #1
   12818:	mov	r0, r3
   1281c:	bl	10dbc <strcmp@plt>
   12820:	cmp	r0, #0
   12824:	bne	12834 <__assert_fail@plt+0x17f0>
   12828:	mov	r3, #1
   1282c:	strb	r3, [r8, #16]
   12830:	b	12694 <__assert_fail@plt+0x1650>
   12834:	ldr	r0, [sp, #20]
   12838:	bl	1135c <__assert_fail@plt+0x318>
   1283c:	mov	r3, #3
   12840:	str	r3, [sp, #76]	; 0x4c
   12844:	b	12694 <__assert_fail@plt+0x1650>
   12848:	movw	r3, #41344	; 0xa180
   1284c:	movt	r3, #2
   12850:	ldr	r0, [r3]
   12854:	ldrb	r3, [r0]
   12858:	cmp	r3, #0
   1285c:	beq	128c4 <__assert_fail@plt+0x1880>
   12860:	ldrb	r2, [r0, #1]
   12864:	cmp	r2, #0
   12868:	beq	128c8 <__assert_fail@plt+0x1884>
   1286c:	movw	r1, #35384	; 0x8a38
   12870:	movt	r1, #1
   12874:	bl	10dbc <strcmp@plt>
   12878:	cmp	r0, #0
   1287c:	bne	12888 <__assert_fail@plt+0x1844>
   12880:	mov	r3, #0
   12884:	b	128c8 <__assert_fail@plt+0x1884>
   12888:	mov	r2, #5
   1288c:	movw	r1, #35388	; 0x8a3c
   12890:	movt	r1, #1
   12894:	mov	r0, #0
   12898:	bl	10e40 <dcgettext@plt>
   1289c:	mov	r4, r0
   128a0:	movw	r3, #41344	; 0xa180
   128a4:	movt	r3, #2
   128a8:	ldr	r0, [r3]
   128ac:	bl	15da8 <__assert_fail@plt+0x4d64>
   128b0:	mov	r3, r0
   128b4:	mov	r2, r4
   128b8:	mov	r1, #0
   128bc:	mov	r0, #1
   128c0:	bl	10eac <error@plt>
   128c4:	mov	r3, #10
   128c8:	ldr	r2, [r9, #4]
   128cc:	cmp	r2, #0
   128d0:	blt	128dc <__assert_fail@plt+0x1898>
   128d4:	cmp	r2, r3
   128d8:	bne	128e4 <__assert_fail@plt+0x18a0>
   128dc:	str	r3, [r9, #4]
   128e0:	b	12694 <__assert_fail@plt+0x1650>
   128e4:	mov	r2, #5
   128e8:	movw	r1, #35412	; 0x8a54
   128ec:	movt	r1, #1
   128f0:	mov	r0, #0
   128f4:	bl	10e40 <dcgettext@plt>
   128f8:	mov	r2, r0
   128fc:	mov	r1, #0
   12900:	mov	r0, #1
   12904:	bl	10eac <error@plt>
   12908:	mov	r3, #2
   1290c:	str	r3, [r8, #88]	; 0x58
   12910:	b	12694 <__assert_fail@plt+0x1650>
   12914:	mov	r3, #1
   12918:	str	r3, [r8, #88]	; 0x58
   1291c:	b	12694 <__assert_fail@plt+0x1650>
   12920:	movw	r0, #41344	; 0xa180
   12924:	movt	r0, #2
   12928:	add	r3, sp, #76	; 0x4c
   1292c:	str	r3, [sp, #8]
   12930:	add	r3, sp, #72	; 0x48
   12934:	str	r3, [sp, #4]
   12938:	add	r3, sp, #52	; 0x34
   1293c:	str	r3, [sp]
   12940:	add	r3, sp, #56	; 0x38
   12944:	add	r2, sp, #64	; 0x40
   12948:	mov	r1, fp
   1294c:	ldr	r0, [r0]
   12950:	bl	12314 <__assert_fail@plt+0x12d0>
   12954:	b	12694 <__assert_fail@plt+0x1650>
   12958:	mov	r0, #0
   1295c:	bl	11ef8 <__assert_fail@plt+0xeb4>
   12960:	movw	r3, #41236	; 0xa114
   12964:	movt	r3, #2
   12968:	movw	r0, #41340	; 0xa17c
   1296c:	movt	r0, #2
   12970:	mov	r4, #0
   12974:	str	r4, [sp, #4]
   12978:	movw	r2, #35432	; 0x8a68
   1297c:	movt	r2, #1
   12980:	str	r2, [sp]
   12984:	ldr	r3, [r3]
   12988:	movw	r2, #35116	; 0x892c
   1298c:	movt	r2, #1
   12990:	movw	r1, #32740	; 0x7fe4
   12994:	movt	r1, #1
   12998:	ldr	r0, [r0]
   1299c:	bl	16384 <__assert_fail@plt+0x5340>
   129a0:	mov	r0, r4
   129a4:	bl	10f18 <exit@plt>
   129a8:	mov	r3, #0
   129ac:	str	r3, [sp, #72]	; 0x48
   129b0:	movw	r3, #41320	; 0xa168
   129b4:	movt	r3, #2
   129b8:	ldr	r0, [r3]
   129bc:	cmp	r5, r0
   129c0:	ble	12a0c <__assert_fail@plt+0x19c8>
   129c4:	mov	r6, r3
   129c8:	ldr	r7, [pc, #2552]	; 133c8 <__assert_fail@plt+0x2384>
   129cc:	add	r3, r0, #1
   129d0:	str	r3, [r6]
   129d4:	add	r3, sp, #76	; 0x4c
   129d8:	str	r3, [sp, #8]
   129dc:	add	r3, sp, #72	; 0x48
   129e0:	str	r3, [sp, #4]
   129e4:	add	r3, sp, #52	; 0x34
   129e8:	str	r3, [sp]
   129ec:	add	r3, sp, #56	; 0x38
   129f0:	add	r2, sp, #64	; 0x40
   129f4:	mov	r1, r7
   129f8:	ldr	r0, [r4, r0, lsl #2]
   129fc:	bl	12314 <__assert_fail@plt+0x12d0>
   12a00:	ldr	r0, [r6]
   12a04:	cmp	r0, r5
   12a08:	blt	129cc <__assert_fail@plt+0x1988>
   12a0c:	ldr	r3, [sp, #52]	; 0x34
   12a10:	cmp	r3, #2
   12a14:	bne	12c28 <__assert_fail@plt+0x1be4>
   12a18:	ldr	r3, [sp, #56]	; 0x38
   12a1c:	cmp	r3, #0
   12a20:	bne	12c98 <__assert_fail@plt+0x1c54>
   12a24:	ldr	r3, [sp, #60]	; 0x3c
   12a28:	cmp	r3, #0
   12a2c:	bne	12cbc <__assert_fail@plt+0x1c78>
   12a30:	movw	r3, #41216	; 0xa100
   12a34:	movt	r3, #2
   12a38:	ldr	r3, [r3, #12]
   12a3c:	cmn	r3, #1
   12a40:	beq	12ce0 <__assert_fail@plt+0x1c9c>
   12a44:	movw	r3, #41216	; 0xa100
   12a48:	movt	r3, #2
   12a4c:	ldr	r3, [r3, #8]
   12a50:	cmn	r3, #1
   12a54:	beq	12cf4 <__assert_fail@plt+0x1cb0>
   12a58:	movw	r3, #41352	; 0xa188
   12a5c:	movt	r3, #2
   12a60:	ldr	r4, [r3, #100]	; 0x64
   12a64:	movw	r1, #35512	; 0x8ab8
   12a68:	movt	r1, #1
   12a6c:	mov	r0, r4
   12a70:	bl	10dbc <strcmp@plt>
   12a74:	cmp	r0, #0
   12a78:	bne	12d08 <__assert_fail@plt+0x1cc4>
   12a7c:	movw	r3, #41336	; 0xa178
   12a80:	movt	r3, #2
   12a84:	ldr	r8, [r3]
   12a88:	cmp	r8, #0
   12a8c:	beq	12d20 <__assert_fail@plt+0x1cdc>
   12a90:	movw	r3, #41352	; 0xa188
   12a94:	movt	r3, #2
   12a98:	ldr	r4, [r3, #104]	; 0x68
   12a9c:	movw	r1, #35512	; 0x8ab8
   12aa0:	movt	r1, #1
   12aa4:	mov	r0, r4
   12aa8:	bl	10dbc <strcmp@plt>
   12aac:	cmp	r0, #0
   12ab0:	bne	12d58 <__assert_fail@plt+0x1d14>
   12ab4:	movw	r3, #41336	; 0xa178
   12ab8:	movt	r3, #2
   12abc:	ldr	r7, [r3]
   12ac0:	cmp	r7, #0
   12ac4:	beq	12d70 <__assert_fail@plt+0x1d2c>
   12ac8:	cmp	r8, r7
   12acc:	beq	12da8 <__assert_fail@plt+0x1d64>
   12ad0:	mov	r1, #2
   12ad4:	mov	r0, r8
   12ad8:	bl	13530 <__assert_fail@plt+0x24ec>
   12adc:	mov	r1, #2
   12ae0:	mov	r0, r7
   12ae4:	bl	13530 <__assert_fail@plt+0x24ec>
   12ae8:	mov	r4, #0
   12aec:	str	r4, [sp, #28]
   12af0:	str	r4, [sp, #32]
   12af4:	str	r4, [sp, #36]	; 0x24
   12af8:	mov	r2, #1
   12afc:	add	r1, sp, #28
   12b00:	mov	r0, r8
   12b04:	bl	11e4c <__assert_fail@plt+0xe08>
   12b08:	str	r4, [sp, #40]	; 0x28
   12b0c:	str	r4, [sp, #44]	; 0x2c
   12b10:	str	r4, [sp, #48]	; 0x30
   12b14:	mov	r2, #2
   12b18:	add	r1, sp, #40	; 0x28
   12b1c:	mov	r0, r7
   12b20:	bl	11e4c <__assert_fail@plt+0xe08>
   12b24:	movw	r3, #41352	; 0xa188
   12b28:	movt	r3, #2
   12b2c:	ldrb	r3, [r3, #16]
   12b30:	cmp	r3, r4
   12b34:	beq	12b80 <__assert_fail@plt+0x1b3c>
   12b38:	ldr	r2, [sp, #28]
   12b3c:	cmp	r2, r4
   12b40:	beq	12b50 <__assert_fail@plt+0x1b0c>
   12b44:	ldr	r3, [sp, #36]	; 0x24
   12b48:	ldr	r3, [r3]
   12b4c:	ldr	r2, [r3, #12]
   12b50:	movw	r3, #41352	; 0xa188
   12b54:	movt	r3, #2
   12b58:	str	r2, [r3, #56]	; 0x38
   12b5c:	ldr	r2, [sp, #40]	; 0x28
   12b60:	cmp	r2, #0
   12b64:	beq	12b74 <__assert_fail@plt+0x1b30>
   12b68:	ldr	r3, [sp, #48]	; 0x30
   12b6c:	ldr	r3, [r3]
   12b70:	ldr	r2, [r3, #12]
   12b74:	movw	r3, #41352	; 0xa188
   12b78:	movt	r3, #2
   12b7c:	str	r2, [r3, #60]	; 0x3c
   12b80:	movw	r3, #41352	; 0xa188
   12b84:	movt	r3, #2
   12b88:	ldrb	r3, [r3, #111]	; 0x6f
   12b8c:	cmp	r3, #0
   12b90:	beq	12e1c <__assert_fail@plt+0x1dd8>
   12b94:	ldr	r3, [sp, #28]
   12b98:	cmp	r3, #0
   12b9c:	bne	12dd4 <__assert_fail@plt+0x1d90>
   12ba0:	ldr	r3, [sp, #40]	; 0x28
   12ba4:	cmp	r3, #0
   12ba8:	bne	12e30 <__assert_fail@plt+0x1dec>
   12bac:	mov	r3, #0
   12bb0:	str	r3, [sp, #24]
   12bb4:	movw	r3, #41352	; 0xa188
   12bb8:	movt	r3, #2
   12bbc:	ldr	r3, [r3, #88]	; 0x58
   12bc0:	cmp	r3, #2
   12bc4:	beq	13270 <__assert_fail@plt+0x222c>
   12bc8:	movw	r3, #41352	; 0xa188
   12bcc:	movt	r3, #2
   12bd0:	ldrb	r3, [r3, #96]	; 0x60
   12bd4:	cmp	r3, #0
   12bd8:	bne	131f8 <__assert_fail@plt+0x21b4>
   12bdc:	movw	r3, #41352	; 0xa188
   12be0:	movt	r3, #2
   12be4:	ldrb	r3, [r3, #110]	; 0x6e
   12be8:	ldr	r2, [sp, #40]	; 0x28
   12bec:	cmp	r2, #0
   12bf0:	beq	13170 <__assert_fail@plt+0x212c>
   12bf4:	cmp	r3, #0
   12bf8:	bne	13278 <__assert_fail@plt+0x2234>
   12bfc:	ldr	r3, [sp, #28]
   12c00:	cmp	r3, #0
   12c04:	beq	12c18 <__assert_fail@plt+0x1bd4>
   12c08:	movw	r3, #41352	; 0xa188
   12c0c:	movt	r3, #2
   12c10:	mov	r2, #1
   12c14:	strb	r2, [r3, #92]	; 0x5c
   12c18:	movw	r4, #41352	; 0xa188
   12c1c:	movt	r4, #2
   12c20:	add	r5, r4, #32
   12c24:	b	132b0 <__assert_fail@plt+0x226c>
   12c28:	cmp	r3, #0
   12c2c:	bne	12c5c <__assert_fail@plt+0x1c18>
   12c30:	mov	r2, #5
   12c34:	movw	r1, #35468	; 0x8a8c
   12c38:	movt	r1, #1
   12c3c:	mov	r0, #0
   12c40:	bl	10e40 <dcgettext@plt>
   12c44:	mov	r2, r0
   12c48:	mov	r1, #0
   12c4c:	mov	r0, r1
   12c50:	bl	10eac <error@plt>
   12c54:	mov	r0, #1
   12c58:	bl	11ef8 <__assert_fail@plt+0xeb4>
   12c5c:	mov	r2, #5
   12c60:	movw	r1, #35484	; 0x8a9c
   12c64:	movt	r1, #1
   12c68:	mov	r0, #0
   12c6c:	bl	10e40 <dcgettext@plt>
   12c70:	mov	r6, r0
   12c74:	sub	r5, r5, #-1073741823	; 0xc0000001
   12c78:	ldr	r0, [r4, r5, lsl #2]
   12c7c:	bl	15da8 <__assert_fail@plt+0x4d64>
   12c80:	mov	r3, r0
   12c84:	mov	r2, r6
   12c88:	mov	r1, #0
   12c8c:	mov	r0, r1
   12c90:	bl	10eac <error@plt>
   12c94:	b	12c54 <__assert_fail@plt+0x1c10>
   12c98:	movw	r4, #41216	; 0xa100
   12c9c:	movt	r4, #2
   12ca0:	mov	r1, #0
   12ca4:	add	r0, r4, #12
   12ca8:	bl	11140 <__assert_fail@plt+0xfc>
   12cac:	mov	r1, #0
   12cb0:	add	r0, r4, #8
   12cb4:	bl	11140 <__assert_fail@plt+0xfc>
   12cb8:	b	12a24 <__assert_fail@plt+0x19e0>
   12cbc:	movw	r4, #41216	; 0xa100
   12cc0:	movt	r4, #2
   12cc4:	mov	r1, #1
   12cc8:	add	r0, r4, #12
   12ccc:	bl	11140 <__assert_fail@plt+0xfc>
   12cd0:	mov	r1, #1
   12cd4:	add	r0, r4, #8
   12cd8:	bl	11140 <__assert_fail@plt+0xfc>
   12cdc:	b	12a30 <__assert_fail@plt+0x19ec>
   12ce0:	movw	r3, #41216	; 0xa100
   12ce4:	movt	r3, #2
   12ce8:	mov	r2, #0
   12cec:	str	r2, [r3, #12]
   12cf0:	b	12a44 <__assert_fail@plt+0x1a00>
   12cf4:	movw	r3, #41216	; 0xa100
   12cf8:	movt	r3, #2
   12cfc:	mov	r2, #0
   12d00:	str	r2, [r3, #8]
   12d04:	b	12a58 <__assert_fail@plt+0x1a14>
   12d08:	movw	r1, #35728	; 0x8b90
   12d0c:	movt	r1, #1
   12d10:	mov	r0, r4
   12d14:	bl	1369c <__assert_fail@plt+0x2658>
   12d18:	mov	r8, r0
   12d1c:	b	12a88 <__assert_fail@plt+0x1a44>
   12d20:	bl	10f48 <__errno_location@plt>
   12d24:	ldr	r4, [r0]
   12d28:	movw	r3, #41352	; 0xa188
   12d2c:	movt	r3, #2
   12d30:	ldr	r2, [r3, #100]	; 0x64
   12d34:	mov	r1, #3
   12d38:	mov	r0, #0
   12d3c:	bl	15bdc <__assert_fail@plt+0x4b98>
   12d40:	mov	r3, r0
   12d44:	movw	r2, #35804	; 0x8bdc
   12d48:	movt	r2, #1
   12d4c:	mov	r1, r4
   12d50:	mov	r0, #1
   12d54:	bl	10eac <error@plt>
   12d58:	movw	r1, #35728	; 0x8b90
   12d5c:	movt	r1, #1
   12d60:	mov	r0, r4
   12d64:	bl	1369c <__assert_fail@plt+0x2658>
   12d68:	mov	r7, r0
   12d6c:	b	12ac0 <__assert_fail@plt+0x1a7c>
   12d70:	bl	10f48 <__errno_location@plt>
   12d74:	ldr	r4, [r0]
   12d78:	movw	r3, #41352	; 0xa188
   12d7c:	movt	r3, #2
   12d80:	ldr	r2, [r3, #104]	; 0x68
   12d84:	mov	r1, #3
   12d88:	mov	r0, #0
   12d8c:	bl	15bdc <__assert_fail@plt+0x4b98>
   12d90:	mov	r3, r0
   12d94:	movw	r2, #35804	; 0x8bdc
   12d98:	movt	r2, #1
   12d9c:	mov	r1, r4
   12da0:	mov	r0, #1
   12da4:	bl	10eac <error@plt>
   12da8:	bl	10f48 <__errno_location@plt>
   12dac:	ldr	r4, [r0]
   12db0:	mov	r2, #5
   12db4:	movw	r1, #35516	; 0x8abc
   12db8:	movt	r1, #1
   12dbc:	mov	r0, #0
   12dc0:	bl	10e40 <dcgettext@plt>
   12dc4:	mov	r2, r0
   12dc8:	mov	r1, r4
   12dcc:	mov	r0, #1
   12dd0:	bl	10eac <error@plt>
   12dd4:	ldr	r3, [sp, #36]	; 0x24
   12dd8:	ldr	r0, [r3]
   12ddc:	ldr	r3, [sp, #40]	; 0x28
   12de0:	cmp	r3, #0
   12de4:	ldreq	r1, [pc, #1504]	; 133cc <__assert_fail@plt+0x2388>
   12de8:	bne	12e34 <__assert_fail@plt+0x1df0>
   12dec:	bl	118a0 <__assert_fail@plt+0x85c>
   12df0:	movw	r3, #41352	; 0xa188
   12df4:	movt	r3, #2
   12df8:	mov	r2, #0
   12dfc:	str	r2, [r3, #64]	; 0x40
   12e00:	str	r2, [r3, #68]	; 0x44
   12e04:	ldr	r3, [sp, #28]
   12e08:	cmp	r3, r2
   12e0c:	bne	12e40 <__assert_fail@plt+0x1dfc>
   12e10:	ldr	r3, [sp, #40]	; 0x28
   12e14:	cmp	r3, #0
   12e18:	bne	12e58 <__assert_fail@plt+0x1e14>
   12e1c:	movw	r5, #41216	; 0xa100
   12e20:	movt	r5, #2
   12e24:	movw	r9, #41352	; 0xa188
   12e28:	movt	r9, #2
   12e2c:	b	12ed8 <__assert_fail@plt+0x1e94>
   12e30:	ldr	r0, [pc, #1428]	; 133cc <__assert_fail@plt+0x2388>
   12e34:	ldr	r3, [sp, #48]	; 0x30
   12e38:	ldr	r1, [r3]
   12e3c:	b	12dec <__assert_fail@plt+0x1da8>
   12e40:	str	r2, [sp, #28]
   12e44:	mov	r2, #1
   12e48:	add	r1, sp, #28
   12e4c:	mov	r0, r8
   12e50:	bl	11e4c <__assert_fail@plt+0xe08>
   12e54:	b	12e10 <__assert_fail@plt+0x1dcc>
   12e58:	mov	r3, #0
   12e5c:	str	r3, [sp, #40]	; 0x28
   12e60:	mov	r2, #2
   12e64:	add	r1, sp, #40	; 0x28
   12e68:	mov	r0, r7
   12e6c:	bl	11e4c <__assert_fail@plt+0xe08>
   12e70:	b	12e1c <__assert_fail@plt+0x1dd8>
   12e74:	ldrb	r3, [r9, #109]	; 0x6d
   12e78:	cmp	r3, #0
   12e7c:	bne	12ea4 <__assert_fail@plt+0x1e60>
   12e80:	mov	r3, #0
   12e84:	str	r3, [sp, #28]
   12e88:	mov	r2, #1
   12e8c:	add	r1, sp, #28
   12e90:	mov	r0, r8
   12e94:	bl	11e4c <__assert_fail@plt+0xe08>
   12e98:	mov	r3, #1
   12e9c:	strb	r3, [r9, #92]	; 0x5c
   12ea0:	b	12ed8 <__assert_fail@plt+0x1e94>
   12ea4:	add	r1, r9, #32
   12ea8:	ldr	r3, [sp, #36]	; 0x24
   12eac:	ldr	r0, [r3]
   12eb0:	bl	118a0 <__assert_fail@plt+0x85c>
   12eb4:	b	12e80 <__assert_fail@plt+0x1e3c>
   12eb8:	mov	r3, #0
   12ebc:	str	r3, [sp, #40]	; 0x28
   12ec0:	mov	r2, #2
   12ec4:	add	r1, sp, #40	; 0x28
   12ec8:	mov	r0, r7
   12ecc:	bl	11e4c <__assert_fail@plt+0xe08>
   12ed0:	mov	r3, #1
   12ed4:	strb	r3, [r9, #92]	; 0x5c
   12ed8:	ldr	r3, [sp, #28]
   12edc:	cmp	r3, #0
   12ee0:	beq	12bac <__assert_fail@plt+0x1b68>
   12ee4:	ldr	r2, [sp, #40]	; 0x28
   12ee8:	cmp	r2, #0
   12eec:	beq	130fc <__assert_fail@plt+0x20b8>
   12ef0:	ldr	r3, [r5, #8]
   12ef4:	ldr	r2, [r5, #12]
   12ef8:	ldr	r1, [sp, #48]	; 0x30
   12efc:	ldr	r1, [r1]
   12f00:	ldr	r0, [sp, #36]	; 0x24
   12f04:	ldr	r0, [r0]
   12f08:	bl	115a4 <__assert_fail@plt+0x560>
   12f0c:	cmp	r0, #0
   12f10:	blt	12e74 <__assert_fail@plt+0x1e30>
   12f14:	cmp	r0, #0
   12f18:	movle	r4, #1
   12f1c:	ble	12f40 <__assert_fail@plt+0x1efc>
   12f20:	ldrb	r3, [r9, #110]	; 0x6e
   12f24:	cmp	r3, #0
   12f28:	beq	12eb8 <__assert_fail@plt+0x1e74>
   12f2c:	ldr	r3, [sp, #48]	; 0x30
   12f30:	ldr	r1, [r3]
   12f34:	add	r0, r9, #32
   12f38:	bl	118a0 <__assert_fail@plt+0x85c>
   12f3c:	b	12eb8 <__assert_fail@plt+0x1e74>
   12f40:	mov	r2, r4
   12f44:	add	r1, sp, #28
   12f48:	mov	r0, r8
   12f4c:	bl	11e4c <__assert_fail@plt+0xe08>
   12f50:	cmp	r0, #0
   12f54:	beq	12f8c <__assert_fail@plt+0x1f48>
   12f58:	ldr	r0, [sp, #28]
   12f5c:	sub	r0, r0, #-1073741823	; 0xc0000001
   12f60:	ldr	r3, [r5, #8]
   12f64:	ldr	r2, [r5, #12]
   12f68:	ldr	r1, [sp, #48]	; 0x30
   12f6c:	ldr	r1, [r1]
   12f70:	ldr	ip, [sp, #36]	; 0x24
   12f74:	ldr	r0, [ip, r0, lsl #2]
   12f78:	bl	115a4 <__assert_fail@plt+0x560>
   12f7c:	cmp	r0, #0
   12f80:	beq	12f40 <__assert_fail@plt+0x1efc>
   12f84:	mov	fp, #0
   12f88:	b	12f9c <__assert_fail@plt+0x1f58>
   12f8c:	ldr	r3, [sp, #28]
   12f90:	add	r3, r3, #1
   12f94:	str	r3, [sp, #28]
   12f98:	mov	fp, #1
   12f9c:	mov	r4, #2
   12fa0:	mov	r2, r4
   12fa4:	add	r1, sp, #40	; 0x28
   12fa8:	mov	r0, r7
   12fac:	bl	11e4c <__assert_fail@plt+0xe08>
   12fb0:	cmp	r0, #0
   12fb4:	beq	12ff0 <__assert_fail@plt+0x1fac>
   12fb8:	ldr	r1, [sp, #40]	; 0x28
   12fbc:	sub	r1, r1, #-1073741823	; 0xc0000001
   12fc0:	ldr	r3, [r5, #8]
   12fc4:	ldr	r2, [r5, #12]
   12fc8:	ldr	r0, [sp, #48]	; 0x30
   12fcc:	ldr	r1, [r0, r1, lsl #2]
   12fd0:	ldr	r0, [sp, #36]	; 0x24
   12fd4:	ldr	r0, [r0]
   12fd8:	bl	115a4 <__assert_fail@plt+0x560>
   12fdc:	cmp	r0, #0
   12fe0:	beq	12fa0 <__assert_fail@plt+0x1f5c>
   12fe4:	mov	r3, #0
   12fe8:	str	r3, [sp, #20]
   12fec:	b	13004 <__assert_fail@plt+0x1fc0>
   12ff0:	ldr	r3, [sp, #40]	; 0x28
   12ff4:	add	r3, r3, #1
   12ff8:	str	r3, [sp, #40]	; 0x28
   12ffc:	mov	r3, #1
   13000:	str	r3, [sp, #20]
   13004:	ldrb	r3, [r9, #108]	; 0x6c
   13008:	cmp	r3, #0
   1300c:	bne	13098 <__assert_fail@plt+0x2054>
   13010:	cmp	fp, #0
   13014:	movne	r3, #0
   13018:	strne	r3, [sp, #28]
   1301c:	bne	13050 <__assert_fail@plt+0x200c>
   13020:	ldr	r3, [sp, #36]	; 0x24
   13024:	ldr	r1, [r3]
   13028:	ldr	r2, [sp, #28]
   1302c:	sub	r2, r2, #-1073741823	; 0xc0000001
   13030:	ldr	r2, [r3, r2, lsl #2]
   13034:	str	r2, [r3]
   13038:	ldr	r3, [sp, #28]
   1303c:	sub	r3, r3, #-1073741823	; 0xc0000001
   13040:	ldr	r2, [sp, #36]	; 0x24
   13044:	str	r1, [r2, r3, lsl #2]
   13048:	mov	r3, #1
   1304c:	str	r3, [sp, #28]
   13050:	ldr	r3, [sp, #20]
   13054:	cmp	r3, #0
   13058:	movne	r3, #0
   1305c:	strne	r3, [sp, #40]	; 0x28
   13060:	bne	12ed8 <__assert_fail@plt+0x1e94>
   13064:	ldr	r3, [sp, #48]	; 0x30
   13068:	ldr	r1, [r3]
   1306c:	ldr	r2, [sp, #40]	; 0x28
   13070:	sub	r2, r2, #-1073741823	; 0xc0000001
   13074:	ldr	r2, [r3, r2, lsl #2]
   13078:	str	r2, [r3]
   1307c:	ldr	r3, [sp, #40]	; 0x28
   13080:	sub	r3, r3, #-1073741823	; 0xc0000001
   13084:	ldr	r2, [sp, #48]	; 0x30
   13088:	str	r1, [r2, r3, lsl #2]
   1308c:	mov	r3, #1
   13090:	str	r3, [sp, #40]	; 0x28
   13094:	b	12ed8 <__assert_fail@plt+0x1e94>
   13098:	ldr	r3, [sp, #28]
   1309c:	cmp	r3, #1
   130a0:	movne	sl, #0
   130a4:	beq	13010 <__assert_fail@plt+0x1fcc>
   130a8:	ldr	r3, [sp, #40]	; 0x28
   130ac:	cmp	r3, #1
   130b0:	lslne	r6, sl, #2
   130b4:	movne	r4, #0
   130b8:	beq	130e4 <__assert_fail@plt+0x20a0>
   130bc:	ldr	r3, [sp, #48]	; 0x30
   130c0:	ldr	r1, [r3, r4, lsl #2]
   130c4:	ldr	r3, [sp, #36]	; 0x24
   130c8:	ldr	r0, [r3, r6]
   130cc:	bl	118a0 <__assert_fail@plt+0x85c>
   130d0:	add	r4, r4, #1
   130d4:	ldr	r3, [sp, #40]	; 0x28
   130d8:	sub	r3, r3, #1
   130dc:	cmp	r4, r3
   130e0:	bcc	130bc <__assert_fail@plt+0x2078>
   130e4:	add	sl, sl, #1
   130e8:	ldr	r3, [sp, #28]
   130ec:	sub	r3, r3, #1
   130f0:	cmp	sl, r3
   130f4:	bcc	130a8 <__assert_fail@plt+0x2064>
   130f8:	b	13010 <__assert_fail@plt+0x1fcc>
   130fc:	str	r2, [sp, #24]
   13100:	movw	r2, #41352	; 0xa188
   13104:	movt	r2, #2
   13108:	ldr	r2, [r2, #88]	; 0x58
   1310c:	cmp	r2, #2
   13110:	beq	1313c <__assert_fail@plt+0x20f8>
   13114:	movw	r2, #41352	; 0xa188
   13118:	movt	r2, #2
   1311c:	ldrb	r2, [r2, #96]	; 0x60
   13120:	cmp	r2, #0
   13124:	beq	13380 <__assert_fail@plt+0x233c>
   13128:	movw	r2, #41352	; 0xa188
   1312c:	movt	r2, #2
   13130:	ldrb	r2, [r2, #97]	; 0x61
   13134:	cmp	r2, #0
   13138:	beq	13378 <__assert_fail@plt+0x2334>
   1313c:	movw	r2, #41352	; 0xa188
   13140:	movt	r2, #2
   13144:	ldrb	r5, [r2, #109]	; 0x6d
   13148:	cmp	r3, #0
   1314c:	moveq	r5, #0
   13150:	andne	r5, r5, #1
   13154:	cmp	r5, #0
   13158:	bne	13200 <__assert_fail@plt+0x21bc>
   1315c:	movw	r3, #41352	; 0xa188
   13160:	movt	r3, #2
   13164:	ldrb	r3, [r3, #110]	; 0x6e
   13168:	orrs	r2, r3, r5
   1316c:	bne	12be8 <__assert_fail@plt+0x1ba4>
   13170:	ldr	r0, [sp, #24]
   13174:	bl	111a4 <__assert_fail@plt+0x160>
   13178:	ldr	r0, [sp, #24]
   1317c:	bl	1374c <__assert_fail@plt+0x2708>
   13180:	add	r0, sp, #28
   13184:	bl	11248 <__assert_fail@plt+0x204>
   13188:	add	r0, sp, #40	; 0x28
   1318c:	bl	11248 <__assert_fail@plt+0x204>
   13190:	mov	r0, r8
   13194:	bl	13570 <__assert_fail@plt+0x252c>
   13198:	cmp	r0, #0
   1319c:	bne	132e4 <__assert_fail@plt+0x22a0>
   131a0:	mov	r0, r7
   131a4:	bl	13570 <__assert_fail@plt+0x252c>
   131a8:	cmp	r0, #0
   131ac:	bne	1331c <__assert_fail@plt+0x22d8>
   131b0:	movw	r3, #41352	; 0xa188
   131b4:	movt	r3, #2
   131b8:	ldrb	r3, [r3, #96]	; 0x60
   131bc:	cmp	r3, #0
   131c0:	bne	13354 <__assert_fail@plt+0x2310>
   131c4:	movw	r3, #41352	; 0xa188
   131c8:	movt	r3, #2
   131cc:	ldrb	r3, [r3, #97]	; 0x61
   131d0:	cmp	r3, #0
   131d4:	bne	13354 <__assert_fail@plt+0x2310>
   131d8:	mov	r0, #0
   131dc:	add	sp, sp, #84	; 0x54
   131e0:	ldrd	r4, [sp]
   131e4:	ldrd	r6, [sp, #8]
   131e8:	ldrd	r8, [sp, #16]
   131ec:	ldrd	sl, [sp, #24]
   131f0:	add	sp, sp, #32
   131f4:	pop	{pc}		; (ldr pc, [sp], #4)
   131f8:	mov	r3, #0
   131fc:	b	13128 <__assert_fail@plt+0x20e4>
   13200:	mov	r5, #0
   13204:	ldr	r1, [pc, #448]	; 133cc <__assert_fail@plt+0x2388>
   13208:	ldr	r3, [sp, #36]	; 0x24
   1320c:	ldr	r0, [r3]
   13210:	bl	118a0 <__assert_fail@plt+0x85c>
   13214:	b	13398 <__assert_fail@plt+0x2354>
   13218:	mov	r1, r6
   1321c:	ldr	r0, [sp, #24]
   13220:	bl	118a0 <__assert_fail@plt+0x85c>
   13224:	ldrb	r3, [r4, #96]	; 0x60
   13228:	cmp	r3, #0
   1322c:	beq	1323c <__assert_fail@plt+0x21f8>
   13230:	ldrb	r3, [r4, #109]	; 0x6d
   13234:	cmp	r3, #0
   13238:	beq	1315c <__assert_fail@plt+0x2118>
   1323c:	mov	r2, #1
   13240:	add	r1, sp, #24
   13244:	mov	r0, r8
   13248:	bl	11a48 <__assert_fail@plt+0xa04>
   1324c:	cmp	r0, #0
   13250:	beq	1315c <__assert_fail@plt+0x2118>
   13254:	ldrb	r3, [r4, #109]	; 0x6d
   13258:	cmp	r3, #0
   1325c:	bne	13218 <__assert_fail@plt+0x21d4>
   13260:	ldrb	r3, [r4, #96]	; 0x60
   13264:	cmp	r3, #0
   13268:	beq	1323c <__assert_fail@plt+0x21f8>
   1326c:	b	1315c <__assert_fail@plt+0x2118>
   13270:	mov	r5, #0
   13274:	b	1315c <__assert_fail@plt+0x2118>
   13278:	ldr	r3, [sp, #48]	; 0x30
   1327c:	ldr	r1, [r3]
   13280:	ldr	r0, [pc, #324]	; 133cc <__assert_fail@plt+0x2388>
   13284:	bl	118a0 <__assert_fail@plt+0x85c>
   13288:	b	12bfc <__assert_fail@plt+0x1bb8>
   1328c:	ldr	r1, [sp, #24]
   13290:	mov	r0, r5
   13294:	bl	118a0 <__assert_fail@plt+0x85c>
   13298:	ldrb	r3, [r4, #97]	; 0x61
   1329c:	cmp	r3, #0
   132a0:	beq	132b0 <__assert_fail@plt+0x226c>
   132a4:	ldrb	r3, [r4, #110]	; 0x6e
   132a8:	cmp	r3, #0
   132ac:	beq	13170 <__assert_fail@plt+0x212c>
   132b0:	mov	r2, #2
   132b4:	add	r1, sp, #24
   132b8:	mov	r0, r7
   132bc:	bl	11a48 <__assert_fail@plt+0xa04>
   132c0:	cmp	r0, #0
   132c4:	beq	13170 <__assert_fail@plt+0x212c>
   132c8:	ldrb	r3, [r4, #110]	; 0x6e
   132cc:	cmp	r3, #0
   132d0:	bne	1328c <__assert_fail@plt+0x2248>
   132d4:	ldrb	r3, [r4, #97]	; 0x61
   132d8:	cmp	r3, #0
   132dc:	beq	132b0 <__assert_fail@plt+0x226c>
   132e0:	b	13170 <__assert_fail@plt+0x212c>
   132e4:	bl	10f48 <__errno_location@plt>
   132e8:	ldr	r4, [r0]
   132ec:	movw	r3, #41352	; 0xa188
   132f0:	movt	r3, #2
   132f4:	ldr	r2, [r3, #100]	; 0x64
   132f8:	mov	r1, #3
   132fc:	mov	r0, #0
   13300:	bl	15bdc <__assert_fail@plt+0x4b98>
   13304:	mov	r3, r0
   13308:	movw	r2, #35804	; 0x8bdc
   1330c:	movt	r2, #1
   13310:	mov	r1, r4
   13314:	mov	r0, #1
   13318:	bl	10eac <error@plt>
   1331c:	bl	10f48 <__errno_location@plt>
   13320:	ldr	r4, [r0]
   13324:	movw	r3, #41352	; 0xa188
   13328:	movt	r3, #2
   1332c:	ldr	r2, [r3, #104]	; 0x68
   13330:	mov	r1, #3
   13334:	mov	r0, #0
   13338:	bl	15bdc <__assert_fail@plt+0x4b98>
   1333c:	mov	r3, r0
   13340:	movw	r2, #35804	; 0x8bdc
   13344:	movt	r2, #1
   13348:	mov	r1, r4
   1334c:	mov	r0, #1
   13350:	bl	10eac <error@plt>
   13354:	mov	r2, #5
   13358:	movw	r1, #35552	; 0x8ae0
   1335c:	movt	r1, #1
   13360:	mov	r0, #0
   13364:	bl	10e40 <dcgettext@plt>
   13368:	mov	r2, r0
   1336c:	mov	r1, #0
   13370:	mov	r0, #1
   13374:	bl	10eac <error@plt>
   13378:	cmp	r3, #0
   1337c:	beq	12bdc <__assert_fail@plt+0x1b98>
   13380:	movw	r3, #41352	; 0xa188
   13384:	movt	r3, #2
   13388:	ldrb	r5, [r3, #109]	; 0x6d
   1338c:	cmp	r5, #0
   13390:	bne	13204 <__assert_fail@plt+0x21c0>
   13394:	mov	r5, #1
   13398:	ldr	r3, [sp, #40]	; 0x28
   1339c:	cmp	r3, #0
   133a0:	beq	133b4 <__assert_fail@plt+0x2370>
   133a4:	movw	r3, #41352	; 0xa188
   133a8:	movt	r3, #2
   133ac:	mov	r2, #1
   133b0:	strb	r2, [r3, #92]	; 0x5c
   133b4:	movw	r4, #41352	; 0xa188
   133b8:	movt	r4, #2
   133bc:	add	r6, r4, #32
   133c0:	b	1323c <__assert_fail@plt+0x21f8>
   133c4:	andeq	r7, r1, r8, ror #28
   133c8:	andeq	sl, r2, ip, ror #3
   133cc:	andeq	sl, r2, r8, lsr #3
   133d0:	movw	r3, #41464	; 0xa1f8
   133d4:	movt	r3, #2
   133d8:	str	r0, [r3]
   133dc:	bx	lr
   133e0:	movw	r3, #41464	; 0xa1f8
   133e4:	movt	r3, #2
   133e8:	strb	r0, [r3, #4]
   133ec:	bx	lr
   133f0:	strd	r4, [sp, #-16]!
   133f4:	str	r6, [sp, #8]
   133f8:	str	lr, [sp, #12]
   133fc:	sub	sp, sp, #8
   13400:	movw	r3, #41340	; 0xa17c
   13404:	movt	r3, #2
   13408:	ldr	r0, [r3]
   1340c:	bl	177f0 <__assert_fail@plt+0x67ac>
   13410:	cmp	r0, #0
   13414:	beq	1343c <__assert_fail@plt+0x23f8>
   13418:	movw	r3, #41464	; 0xa1f8
   1341c:	movt	r3, #2
   13420:	ldrb	r3, [r3, #4]
   13424:	cmp	r3, #0
   13428:	beq	13468 <__assert_fail@plt+0x2424>
   1342c:	bl	10f48 <__errno_location@plt>
   13430:	ldr	r3, [r0]
   13434:	cmp	r3, #32
   13438:	bne	13468 <__assert_fail@plt+0x2424>
   1343c:	movw	r3, #41328	; 0xa170
   13440:	movt	r3, #2
   13444:	ldr	r0, [r3]
   13448:	bl	177f0 <__assert_fail@plt+0x67ac>
   1344c:	cmp	r0, #0
   13450:	bne	134f0 <__assert_fail@plt+0x24ac>
   13454:	add	sp, sp, #8
   13458:	ldrd	r4, [sp]
   1345c:	ldr	r6, [sp, #8]
   13460:	add	sp, sp, #12
   13464:	pop	{pc}		; (ldr pc, [sp], #4)
   13468:	mov	r2, #5
   1346c:	movw	r1, #35788	; 0x8bcc
   13470:	movt	r1, #1
   13474:	mov	r0, #0
   13478:	bl	10e40 <dcgettext@plt>
   1347c:	mov	r4, r0
   13480:	movw	r3, #41464	; 0xa1f8
   13484:	movt	r3, #2
   13488:	ldr	r5, [r3]
   1348c:	cmp	r5, #0
   13490:	beq	134d0 <__assert_fail@plt+0x248c>
   13494:	bl	10f48 <__errno_location@plt>
   13498:	ldr	r6, [r0]
   1349c:	mov	r0, r5
   134a0:	bl	15ba4 <__assert_fail@plt+0x4b60>
   134a4:	str	r4, [sp]
   134a8:	mov	r3, r0
   134ac:	movw	r2, #35800	; 0x8bd8
   134b0:	movt	r2, #1
   134b4:	mov	r1, r6
   134b8:	mov	r0, #0
   134bc:	bl	10eac <error@plt>
   134c0:	movw	r3, #41240	; 0xa118
   134c4:	movt	r3, #2
   134c8:	ldr	r0, [r3]
   134cc:	bl	10dec <_exit@plt>
   134d0:	bl	10f48 <__errno_location@plt>
   134d4:	mov	r3, r4
   134d8:	movw	r2, #35804	; 0x8bdc
   134dc:	movt	r2, #1
   134e0:	ldr	r1, [r0]
   134e4:	mov	r0, #0
   134e8:	bl	10eac <error@plt>
   134ec:	b	134c0 <__assert_fail@plt+0x247c>
   134f0:	movw	r3, #41240	; 0xa118
   134f4:	movt	r3, #2
   134f8:	ldr	r0, [r3]
   134fc:	bl	10dec <_exit@plt>
   13500:	strd	r4, [sp, #-12]!
   13504:	str	lr, [sp, #8]
   13508:	sub	sp, sp, #20
   1350c:	ldr	r1, [sp, #40]	; 0x28
   13510:	str	r1, [sp, #8]
   13514:	ldrd	r4, [sp, #32]
   13518:	strd	r4, [sp]
   1351c:	bl	10dc8 <posix_fadvise64@plt>
   13520:	add	sp, sp, #20
   13524:	ldrd	r4, [sp]
   13528:	add	sp, sp, #8
   1352c:	pop	{pc}		; (ldr pc, [sp], #4)
   13530:	cmp	r0, #0
   13534:	bxeq	lr
   13538:	str	r4, [sp, #-8]!
   1353c:	str	lr, [sp, #4]
   13540:	sub	sp, sp, #16
   13544:	mov	r4, r1
   13548:	bl	10f78 <fileno@plt>
   1354c:	str	r4, [sp, #8]
   13550:	mov	r2, #0
   13554:	mov	r3, #0
   13558:	strd	r2, [sp]
   1355c:	bl	10dc8 <posix_fadvise64@plt>
   13560:	add	sp, sp, #16
   13564:	ldr	r4, [sp]
   13568:	add	sp, sp, #4
   1356c:	pop	{pc}		; (ldr pc, [sp], #4)
   13570:	strd	r4, [sp, #-16]!
   13574:	str	r6, [sp, #8]
   13578:	str	lr, [sp, #12]
   1357c:	sub	sp, sp, #8
   13580:	mov	r4, r0
   13584:	bl	10f78 <fileno@plt>
   13588:	cmp	r0, #0
   1358c:	blt	13604 <__assert_fail@plt+0x25c0>
   13590:	mov	r0, r4
   13594:	bl	10edc <__freading@plt>
   13598:	cmp	r0, #0
   1359c:	beq	135d0 <__assert_fail@plt+0x258c>
   135a0:	mov	r0, r4
   135a4:	bl	10f78 <fileno@plt>
   135a8:	mov	r3, #1
   135ac:	str	r3, [sp]
   135b0:	mov	r2, #0
   135b4:	mov	r3, #0
   135b8:	bl	10e7c <lseek64@plt>
   135bc:	mvn	r2, #0
   135c0:	mvn	r3, #0
   135c4:	cmp	r1, r3
   135c8:	cmpeq	r0, r2
   135cc:	beq	13610 <__assert_fail@plt+0x25cc>
   135d0:	mov	r0, r4
   135d4:	bl	1362c <__assert_fail@plt+0x25e8>
   135d8:	cmp	r0, #0
   135dc:	beq	13610 <__assert_fail@plt+0x25cc>
   135e0:	bl	10f48 <__errno_location@plt>
   135e4:	mov	r5, r0
   135e8:	ldr	r6, [r0]
   135ec:	mov	r0, r4
   135f0:	bl	10f9c <fclose@plt>
   135f4:	cmp	r6, #0
   135f8:	strne	r6, [r5]
   135fc:	mvnne	r0, #0
   13600:	b	13618 <__assert_fail@plt+0x25d4>
   13604:	mov	r0, r4
   13608:	bl	10f9c <fclose@plt>
   1360c:	b	13618 <__assert_fail@plt+0x25d4>
   13610:	mov	r0, r4
   13614:	bl	10f9c <fclose@plt>
   13618:	add	sp, sp, #8
   1361c:	ldrd	r4, [sp]
   13620:	ldr	r6, [sp, #8]
   13624:	add	sp, sp, #12
   13628:	pop	{pc}		; (ldr pc, [sp], #4)
   1362c:	str	r4, [sp, #-8]!
   13630:	str	lr, [sp, #4]
   13634:	sub	sp, sp, #8
   13638:	subs	r4, r0, #0
   1363c:	beq	13650 <__assert_fail@plt+0x260c>
   13640:	mov	r0, r4
   13644:	bl	10edc <__freading@plt>
   13648:	cmp	r0, #0
   1364c:	bne	13668 <__assert_fail@plt+0x2624>
   13650:	mov	r0, r4
   13654:	bl	10dd4 <fflush@plt>
   13658:	add	sp, sp, #8
   1365c:	ldr	r4, [sp]
   13660:	add	sp, sp, #4
   13664:	pop	{pc}		; (ldr pc, [sp], #4)
   13668:	ldr	r3, [r4]
   1366c:	tst	r3, #256	; 0x100
   13670:	bne	13680 <__assert_fail@plt+0x263c>
   13674:	mov	r0, r4
   13678:	bl	10dd4 <fflush@plt>
   1367c:	b	13658 <__assert_fail@plt+0x2614>
   13680:	mov	r3, #1
   13684:	str	r3, [sp]
   13688:	mov	r2, #0
   1368c:	mov	r3, #0
   13690:	mov	r0, r4
   13694:	bl	137ac <__assert_fail@plt+0x2768>
   13698:	b	13674 <__assert_fail@plt+0x2630>
   1369c:	strd	r4, [sp, #-16]!
   136a0:	str	r6, [sp, #8]
   136a4:	str	lr, [sp, #12]
   136a8:	mov	r5, r1
   136ac:	bl	10ffc <fopen64@plt>
   136b0:	subs	r4, r0, #0
   136b4:	beq	136c8 <__assert_fail@plt+0x2684>
   136b8:	mov	r0, r4
   136bc:	bl	10f78 <fileno@plt>
   136c0:	cmp	r0, #2
   136c4:	bls	136dc <__assert_fail@plt+0x2698>
   136c8:	mov	r0, r4
   136cc:	ldrd	r4, [sp]
   136d0:	ldr	r6, [sp, #8]
   136d4:	add	sp, sp, #12
   136d8:	pop	{pc}		; (ldr pc, [sp], #4)
   136dc:	bl	15e88 <__assert_fail@plt+0x4e44>
   136e0:	subs	r6, r0, #0
   136e4:	blt	1372c <__assert_fail@plt+0x26e8>
   136e8:	mov	r0, r4
   136ec:	bl	13570 <__assert_fail@plt+0x252c>
   136f0:	cmp	r0, #0
   136f4:	bne	1370c <__assert_fail@plt+0x26c8>
   136f8:	mov	r1, r5
   136fc:	mov	r0, r6
   13700:	bl	10d98 <fdopen@plt>
   13704:	subs	r4, r0, #0
   13708:	bne	136c8 <__assert_fail@plt+0x2684>
   1370c:	bl	10f48 <__errno_location@plt>
   13710:	mov	r4, r0
   13714:	ldr	r5, [r0]
   13718:	mov	r0, r6
   1371c:	bl	11038 <close@plt>
   13720:	str	r5, [r4]
   13724:	mov	r4, #0
   13728:	b	136c8 <__assert_fail@plt+0x2684>
   1372c:	bl	10f48 <__errno_location@plt>
   13730:	mov	r5, r0
   13734:	ldr	r6, [r0]
   13738:	mov	r0, r4
   1373c:	bl	13570 <__assert_fail@plt+0x252c>
   13740:	str	r6, [r5]
   13744:	mov	r4, #0
   13748:	b	136c8 <__assert_fail@plt+0x2684>
   1374c:	strd	r4, [sp, #-12]!
   13750:	str	lr, [sp, #8]
   13754:	sub	sp, sp, #12
   13758:	mov	r5, r0
   1375c:	bl	10f48 <__errno_location@plt>
   13760:	mov	r4, r0
   13764:	ldr	r3, [r0]
   13768:	str	r3, [sp]
   1376c:	str	r3, [sp, #4]
   13770:	mov	r3, #0
   13774:	str	r3, [r0]
   13778:	mov	r0, r5
   1377c:	bl	10de0 <free@plt>
   13780:	ldr	r3, [r4]
   13784:	clz	r3, r3
   13788:	lsr	r3, r3, #5
   1378c:	add	r2, sp, #8
   13790:	add	r3, r2, r3, lsl #2
   13794:	ldr	r3, [r3, #-8]
   13798:	str	r3, [r4]
   1379c:	add	sp, sp, #12
   137a0:	ldrd	r4, [sp]
   137a4:	add	sp, sp, #8
   137a8:	pop	{pc}		; (ldr pc, [sp], #4)
   137ac:	str	r4, [sp, #-16]!
   137b0:	strd	r6, [sp, #4]
   137b4:	str	lr, [sp, #12]
   137b8:	sub	sp, sp, #8
   137bc:	mov	r4, r0
   137c0:	mov	r6, r2
   137c4:	mov	r7, r3
   137c8:	ldr	r2, [r0, #8]
   137cc:	ldr	r3, [r0, #4]
   137d0:	cmp	r2, r3
   137d4:	beq	13804 <__assert_fail@plt+0x27c0>
   137d8:	ldr	r3, [sp, #24]
   137dc:	str	r3, [sp]
   137e0:	mov	r2, r6
   137e4:	mov	r3, r7
   137e8:	mov	r0, r4
   137ec:	bl	10fa8 <fseeko64@plt>
   137f0:	add	sp, sp, #8
   137f4:	ldr	r4, [sp]
   137f8:	ldrd	r6, [sp, #4]
   137fc:	add	sp, sp, #12
   13800:	pop	{pc}		; (ldr pc, [sp], #4)
   13804:	ldr	r2, [r0, #20]
   13808:	ldr	r3, [r0, #16]
   1380c:	cmp	r2, r3
   13810:	bne	137d8 <__assert_fail@plt+0x2794>
   13814:	ldr	r3, [r0, #36]	; 0x24
   13818:	cmp	r3, #0
   1381c:	bne	137d8 <__assert_fail@plt+0x2794>
   13820:	bl	10f78 <fileno@plt>
   13824:	ldr	r3, [sp, #24]
   13828:	str	r3, [sp]
   1382c:	mov	r2, r6
   13830:	mov	r3, r7
   13834:	bl	10e7c <lseek64@plt>
   13838:	mvn	r2, #0
   1383c:	mvn	r3, #0
   13840:	cmp	r1, r3
   13844:	cmpeq	r0, r2
   13848:	beq	13864 <__assert_fail@plt+0x2820>
   1384c:	ldr	r3, [r4]
   13850:	bic	r3, r3, #16
   13854:	str	r3, [r4]
   13858:	strd	r0, [r4, #80]	; 0x50
   1385c:	mov	r0, #0
   13860:	b	137f0 <__assert_fail@plt+0x27ac>
   13864:	mvn	r0, #0
   13868:	b	137f0 <__assert_fail@plt+0x27ac>
   1386c:	push	{lr}		; (str lr, [sp, #-4]!)
   13870:	sub	sp, sp, #268	; 0x10c
   13874:	movw	r2, #257	; 0x101
   13878:	add	r1, sp, #4
   1387c:	bl	15dc8 <__assert_fail@plt+0x4d84>
   13880:	cmp	r0, #0
   13884:	movne	r0, #0
   13888:	bne	138c0 <__assert_fail@plt+0x287c>
   1388c:	movw	r1, #35808	; 0x8be0
   13890:	movt	r1, #1
   13894:	add	r0, sp, #4
   13898:	bl	10dbc <strcmp@plt>
   1389c:	cmp	r0, #0
   138a0:	beq	138bc <__assert_fail@plt+0x2878>
   138a4:	movw	r1, #35812	; 0x8be4
   138a8:	movt	r1, #1
   138ac:	add	r0, sp, #4
   138b0:	bl	10dbc <strcmp@plt>
   138b4:	adds	r0, r0, #0
   138b8:	movne	r0, #1
   138bc:	and	r0, r0, #1
   138c0:	add	sp, sp, #268	; 0x10c
   138c4:	pop	{pc}		; (ldr pc, [sp], #4)
   138c8:	mov	r3, #0
   138cc:	str	r3, [r0]
   138d0:	str	r3, [r0, #4]
   138d4:	str	r3, [r0, #8]
   138d8:	bx	lr
   138dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138e0:	strd	r6, [sp, #8]
   138e4:	strd	r8, [sp, #16]
   138e8:	strd	sl, [sp, #24]
   138ec:	str	lr, [sp, #32]
   138f0:	sub	sp, sp, #20
   138f4:	ldr	r9, [r0, #8]
   138f8:	ldr	r7, [r0]
   138fc:	add	r7, r9, r7
   13900:	ldr	r3, [r1]
   13904:	tst	r3, #16
   13908:	movne	r0, #0
   1390c:	bne	139f0 <__assert_fail@plt+0x29ac>
   13910:	mov	r8, r2
   13914:	mov	r5, r1
   13918:	mov	sl, r0
   1391c:	mov	r4, r9
   13920:	mov	fp, #1
   13924:	str	r2, [sp, #12]
   13928:	b	139a8 <__assert_fail@plt+0x2964>
   1392c:	mov	r0, r5
   13930:	bl	10fc0 <__uflow@plt>
   13934:	mov	r6, r0
   13938:	cmn	r0, #1
   1393c:	bne	139c4 <__assert_fail@plt+0x2980>
   13940:	cmp	r9, r4
   13944:	beq	139d0 <__assert_fail@plt+0x298c>
   13948:	ldr	r3, [r5]
   1394c:	tst	r3, #32
   13950:	bne	139d8 <__assert_fail@plt+0x2994>
   13954:	ldrb	r3, [r4, #-1]
   13958:	cmp	r3, r8
   1395c:	beq	139e4 <__assert_fail@plt+0x29a0>
   13960:	ldr	r6, [sp, #12]
   13964:	cmp	r4, r7
   13968:	bne	139e0 <__assert_fail@plt+0x299c>
   1396c:	ldr	r4, [sl]
   13970:	str	fp, [sp]
   13974:	mvn	r3, #0
   13978:	mov	r2, fp
   1397c:	mov	r1, sl
   13980:	mov	r0, r9
   13984:	bl	166a8 <__assert_fail@plt+0x5664>
   13988:	mov	r9, r0
   1398c:	add	r4, r0, r4
   13990:	str	r0, [sl, #8]
   13994:	ldr	r7, [sl]
   13998:	add	r7, r0, r7
   1399c:	strb	r6, [r4], #1
   139a0:	cmp	r8, r6
   139a4:	beq	139e4 <__assert_fail@plt+0x29a0>
   139a8:	ldr	r3, [r5, #4]
   139ac:	ldr	r2, [r5, #8]
   139b0:	cmp	r3, r2
   139b4:	bcs	1392c <__assert_fail@plt+0x28e8>
   139b8:	add	r2, r3, #1
   139bc:	str	r2, [r5, #4]
   139c0:	ldrb	r6, [r3]
   139c4:	cmp	r4, r7
   139c8:	bne	1399c <__assert_fail@plt+0x2958>
   139cc:	b	1396c <__assert_fail@plt+0x2928>
   139d0:	mov	r0, #0
   139d4:	b	139f0 <__assert_fail@plt+0x29ac>
   139d8:	mov	r0, #0
   139dc:	b	139f0 <__assert_fail@plt+0x29ac>
   139e0:	strb	r8, [r4], #1
   139e4:	sub	r4, r4, r9
   139e8:	str	r4, [sl, #4]
   139ec:	mov	r0, sl
   139f0:	add	sp, sp, #20
   139f4:	ldrd	r4, [sp]
   139f8:	ldrd	r6, [sp, #8]
   139fc:	ldrd	r8, [sp, #16]
   13a00:	ldrd	sl, [sp, #24]
   13a04:	add	sp, sp, #32
   13a08:	pop	{pc}		; (ldr pc, [sp], #4)
   13a0c:	str	r4, [sp, #-8]!
   13a10:	str	lr, [sp, #4]
   13a14:	mov	r2, #10
   13a18:	bl	138dc <__assert_fail@plt+0x2898>
   13a1c:	ldr	r4, [sp]
   13a20:	add	sp, sp, #4
   13a24:	pop	{pc}		; (ldr pc, [sp], #4)
   13a28:	str	r4, [sp, #-8]!
   13a2c:	str	lr, [sp, #4]
   13a30:	ldr	r0, [r0, #8]
   13a34:	bl	1374c <__assert_fail@plt+0x2708>
   13a38:	ldr	r4, [sp]
   13a3c:	add	sp, sp, #4
   13a40:	pop	{pc}		; (ldr pc, [sp], #4)
   13a44:	strd	r4, [sp, #-16]!
   13a48:	str	r6, [sp, #8]
   13a4c:	str	lr, [sp, #12]
   13a50:	subs	r6, r2, #0
   13a54:	beq	13aa4 <__assert_fail@plt+0x2a60>
   13a58:	mov	r5, r1
   13a5c:	mov	r4, r0
   13a60:	bl	10ee8 <__ctype_toupper_loc@plt>
   13a64:	ldr	ip, [r0]
   13a68:	sub	r3, r4, #1
   13a6c:	sub	r1, r5, #1
   13a70:	add	lr, r3, r6
   13a74:	ldrb	r0, [r3, #1]!
   13a78:	ldrb	r2, [r1, #1]!
   13a7c:	ldr	r0, [ip, r0, lsl #2]
   13a80:	ldr	r2, [ip, r2, lsl #2]
   13a84:	subs	r0, r0, r2
   13a88:	bne	13a94 <__assert_fail@plt+0x2a50>
   13a8c:	cmp	r3, lr
   13a90:	bne	13a74 <__assert_fail@plt+0x2a30>
   13a94:	ldrd	r4, [sp]
   13a98:	ldr	r6, [sp, #8]
   13a9c:	add	sp, sp, #12
   13aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   13aa4:	mov	r0, #0
   13aa8:	b	13a94 <__assert_fail@plt+0x2a50>
   13aac:	strd	r4, [sp, #-16]!
   13ab0:	str	r6, [sp, #8]
   13ab4:	str	lr, [sp, #12]
   13ab8:	subs	r4, r0, #0
   13abc:	beq	13b58 <__assert_fail@plt+0x2b14>
   13ac0:	mov	r1, #47	; 0x2f
   13ac4:	mov	r0, r4
   13ac8:	bl	10fe4 <strrchr@plt>
   13acc:	subs	r5, r0, #0
   13ad0:	beq	13b30 <__assert_fail@plt+0x2aec>
   13ad4:	add	r6, r5, #1
   13ad8:	sub	r3, r6, r4
   13adc:	cmp	r3, #6
   13ae0:	ble	13b30 <__assert_fail@plt+0x2aec>
   13ae4:	mov	r2, #7
   13ae8:	movw	r1, #35876	; 0x8c24
   13aec:	movt	r1, #1
   13af0:	sub	r0, r5, #6
   13af4:	bl	11020 <strncmp@plt>
   13af8:	cmp	r0, #0
   13afc:	bne	13b30 <__assert_fail@plt+0x2aec>
   13b00:	mov	r2, #3
   13b04:	movw	r1, #35884	; 0x8c2c
   13b08:	movt	r1, #1
   13b0c:	mov	r0, r6
   13b10:	bl	11020 <strncmp@plt>
   13b14:	cmp	r0, #0
   13b18:	movne	r4, r6
   13b1c:	bne	13b30 <__assert_fail@plt+0x2aec>
   13b20:	add	r4, r5, #4
   13b24:	movw	r3, #41312	; 0xa160
   13b28:	movt	r3, #2
   13b2c:	str	r4, [r3]
   13b30:	movw	r3, #41472	; 0xa200
   13b34:	movt	r3, #2
   13b38:	str	r4, [r3]
   13b3c:	movw	r3, #41316	; 0xa164
   13b40:	movt	r3, #2
   13b44:	str	r4, [r3]
   13b48:	ldrd	r4, [sp]
   13b4c:	ldr	r6, [sp, #8]
   13b50:	add	sp, sp, #12
   13b54:	pop	{pc}		; (ldr pc, [sp], #4)
   13b58:	movw	r3, #41328	; 0xa170
   13b5c:	movt	r3, #2
   13b60:	ldr	r3, [r3]
   13b64:	mov	r2, #55	; 0x37
   13b68:	mov	r1, #1
   13b6c:	movw	r0, #35820	; 0x8bec
   13b70:	movt	r0, #1
   13b74:	bl	10e70 <fwrite@plt>
   13b78:	bl	1102c <abort@plt>
   13b7c:	mov	r2, #0
   13b80:	mov	r3, #0
   13b84:	strd	r2, [r0]
   13b88:	strd	r2, [r0, #8]
   13b8c:	strd	r2, [r0, #16]
   13b90:	strd	r2, [r0, #24]
   13b94:	strd	r2, [r0, #32]
   13b98:	strd	r2, [r0, #40]	; 0x28
   13b9c:	cmp	r1, #10
   13ba0:	beq	13bac <__assert_fail@plt+0x2b68>
   13ba4:	str	r1, [r0]
   13ba8:	bx	lr
   13bac:	str	r4, [sp, #-8]!
   13bb0:	str	lr, [sp, #4]
   13bb4:	bl	1102c <abort@plt>
   13bb8:	strd	r4, [sp, #-16]!
   13bbc:	str	r6, [sp, #8]
   13bc0:	str	lr, [sp, #12]
   13bc4:	mov	r5, r0
   13bc8:	mov	r6, r1
   13bcc:	mov	r2, #5
   13bd0:	mov	r1, r0
   13bd4:	mov	r0, #0
   13bd8:	bl	10e40 <dcgettext@plt>
   13bdc:	mov	r4, r0
   13be0:	cmp	r5, r0
   13be4:	beq	13bfc <__assert_fail@plt+0x2bb8>
   13be8:	mov	r0, r4
   13bec:	ldrd	r4, [sp]
   13bf0:	ldr	r6, [sp, #8]
   13bf4:	add	sp, sp, #12
   13bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bfc:	bl	17ae8 <__assert_fail@plt+0x6aa4>
   13c00:	ldrb	r3, [r0]
   13c04:	bic	r3, r3, #32
   13c08:	cmp	r3, #85	; 0x55
   13c0c:	bne	13c90 <__assert_fail@plt+0x2c4c>
   13c10:	ldrb	r3, [r0, #1]
   13c14:	bic	r3, r3, #32
   13c18:	cmp	r3, #84	; 0x54
   13c1c:	bne	13c54 <__assert_fail@plt+0x2c10>
   13c20:	ldrb	r3, [r0, #2]
   13c24:	bic	r3, r3, #32
   13c28:	cmp	r3, #70	; 0x46
   13c2c:	bne	13c54 <__assert_fail@plt+0x2c10>
   13c30:	ldrb	r3, [r0, #3]
   13c34:	cmp	r3, #45	; 0x2d
   13c38:	bne	13c54 <__assert_fail@plt+0x2c10>
   13c3c:	ldrb	r3, [r0, #4]
   13c40:	cmp	r3, #56	; 0x38
   13c44:	bne	13c54 <__assert_fail@plt+0x2c10>
   13c48:	ldrb	r3, [r0, #5]
   13c4c:	cmp	r3, #0
   13c50:	beq	13c70 <__assert_fail@plt+0x2c2c>
   13c54:	movw	r4, #35972	; 0x8c84
   13c58:	movt	r4, #1
   13c5c:	movw	r3, #35992	; 0x8c98
   13c60:	movt	r3, #1
   13c64:	cmp	r6, #9
   13c68:	movne	r4, r3
   13c6c:	b	13be8 <__assert_fail@plt+0x2ba4>
   13c70:	ldrb	r2, [r4]
   13c74:	movw	r4, #35988	; 0x8c94
   13c78:	movt	r4, #1
   13c7c:	movw	r3, #35976	; 0x8c88
   13c80:	movt	r3, #1
   13c84:	cmp	r2, #96	; 0x60
   13c88:	movne	r4, r3
   13c8c:	b	13be8 <__assert_fail@plt+0x2ba4>
   13c90:	cmp	r3, #71	; 0x47
   13c94:	bne	13c54 <__assert_fail@plt+0x2c10>
   13c98:	ldrb	r3, [r0, #1]
   13c9c:	bic	r3, r3, #32
   13ca0:	cmp	r3, #66	; 0x42
   13ca4:	bne	13c54 <__assert_fail@plt+0x2c10>
   13ca8:	ldrb	r3, [r0, #2]
   13cac:	cmp	r3, #49	; 0x31
   13cb0:	bne	13c54 <__assert_fail@plt+0x2c10>
   13cb4:	ldrb	r3, [r0, #3]
   13cb8:	cmp	r3, #56	; 0x38
   13cbc:	bne	13c54 <__assert_fail@plt+0x2c10>
   13cc0:	ldrb	r3, [r0, #4]
   13cc4:	cmp	r3, #48	; 0x30
   13cc8:	bne	13c54 <__assert_fail@plt+0x2c10>
   13ccc:	ldrb	r3, [r0, #5]
   13cd0:	cmp	r3, #51	; 0x33
   13cd4:	bne	13c54 <__assert_fail@plt+0x2c10>
   13cd8:	ldrb	r3, [r0, #6]
   13cdc:	cmp	r3, #48	; 0x30
   13ce0:	bne	13c54 <__assert_fail@plt+0x2c10>
   13ce4:	ldrb	r3, [r0, #7]
   13ce8:	cmp	r3, #0
   13cec:	bne	13c54 <__assert_fail@plt+0x2c10>
   13cf0:	ldrb	r2, [r4]
   13cf4:	movw	r4, #35984	; 0x8c90
   13cf8:	movt	r4, #1
   13cfc:	movw	r3, #35980	; 0x8c8c
   13d00:	movt	r3, #1
   13d04:	cmp	r2, #96	; 0x60
   13d08:	movne	r4, r3
   13d0c:	b	13be8 <__assert_fail@plt+0x2ba4>
   13d10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d14:	strd	r6, [sp, #8]
   13d18:	strd	r8, [sp, #16]
   13d1c:	strd	sl, [sp, #24]
   13d20:	str	lr, [sp, #32]
   13d24:	sub	sp, sp, #116	; 0x74
   13d28:	str	r0, [sp, #64]	; 0x40
   13d2c:	mov	r8, r1
   13d30:	str	r2, [sp, #48]	; 0x30
   13d34:	str	r3, [sp, #24]
   13d38:	ldr	r7, [sp, #152]	; 0x98
   13d3c:	bl	10e88 <__ctype_get_mb_cur_max@plt>
   13d40:	str	r0, [sp, #76]	; 0x4c
   13d44:	ldr	r3, [sp, #156]	; 0x9c
   13d48:	ubfx	r3, r3, #1, #1
   13d4c:	str	r3, [sp, #32]
   13d50:	mov	r3, #1
   13d54:	str	r3, [sp, #40]	; 0x28
   13d58:	mov	r3, #0
   13d5c:	str	r3, [sp, #68]	; 0x44
   13d60:	str	r3, [sp, #36]	; 0x24
   13d64:	str	r3, [sp, #28]
   13d68:	str	r3, [sp, #52]	; 0x34
   13d6c:	str	r3, [sp, #60]	; 0x3c
   13d70:	str	r3, [sp, #72]	; 0x48
   13d74:	movw	r3, #35996	; 0x8c9c
   13d78:	movt	r3, #1
   13d7c:	str	r3, [sp, #80]	; 0x50
   13d80:	mov	r9, r8
   13d84:	mov	sl, r7
   13d88:	cmp	sl, #10
   13d8c:	ldrls	pc, [pc, sl, lsl #2]
   13d90:	b	13f54 <__assert_fail@plt+0x2f10>
   13d94:	strdeq	r3, [r1], -r4
   13d98:	andeq	r3, r1, r8, asr #27
   13d9c:	andeq	r3, r1, ip, lsr #30
   13da0:	andeq	r3, r1, r0, asr #27
   13da4:	andeq	r3, r1, r0, ror #29
   13da8:	andeq	r3, r1, r4, lsl #28
   13dac:	ldrdeq	r5, [r1], -r0
   13db0:	andeq	r3, r1, r8, asr pc
   13db4:	andeq	r3, r1, r0, asr #28
   13db8:	andeq	r3, r1, r0, asr #28
   13dbc:	andeq	r3, r1, r0, asr #28
   13dc0:	mov	r3, #1
   13dc4:	str	r3, [sp, #28]
   13dc8:	mov	r3, #1
   13dcc:	str	r3, [sp, #32]
   13dd0:	str	r3, [sp, #52]	; 0x34
   13dd4:	movw	r3, #35992	; 0x8c98
   13dd8:	movt	r3, #1
   13ddc:	str	r3, [sp, #60]	; 0x3c
   13de0:	mov	fp, #0
   13de4:	mov	sl, #2
   13de8:	mov	r6, #0
   13dec:	ldr	r8, [sp, #64]	; 0x40
   13df0:	b	14668 <__assert_fail@plt+0x3624>
   13df4:	mov	fp, sl
   13df8:	mov	r3, #0
   13dfc:	str	r3, [sp, #32]
   13e00:	b	13de8 <__assert_fail@plt+0x2da4>
   13e04:	ldr	r3, [sp, #32]
   13e08:	cmp	r3, #0
   13e0c:	bne	13f6c <__assert_fail@plt+0x2f28>
   13e10:	cmp	r9, #0
   13e14:	beq	13f90 <__assert_fail@plt+0x2f4c>
   13e18:	mov	r3, #34	; 0x22
   13e1c:	ldr	r2, [sp, #64]	; 0x40
   13e20:	strb	r3, [r2]
   13e24:	mov	fp, #1
   13e28:	str	fp, [sp, #28]
   13e2c:	str	fp, [sp, #52]	; 0x34
   13e30:	movw	r3, #35972	; 0x8c84
   13e34:	movt	r3, #1
   13e38:	str	r3, [sp, #60]	; 0x3c
   13e3c:	b	13de8 <__assert_fail@plt+0x2da4>
   13e40:	cmp	sl, #10
   13e44:	bne	13e78 <__assert_fail@plt+0x2e34>
   13e48:	ldr	r3, [sp, #32]
   13e4c:	cmp	r3, #0
   13e50:	movne	fp, #0
   13e54:	beq	13ea0 <__assert_fail@plt+0x2e5c>
   13e58:	ldr	r0, [sp, #168]	; 0xa8
   13e5c:	bl	10f30 <strlen@plt>
   13e60:	str	r0, [sp, #52]	; 0x34
   13e64:	ldr	r3, [sp, #168]	; 0xa8
   13e68:	str	r3, [sp, #60]	; 0x3c
   13e6c:	mov	r3, #1
   13e70:	str	r3, [sp, #28]
   13e74:	b	13de8 <__assert_fail@plt+0x2da4>
   13e78:	mov	r1, sl
   13e7c:	ldr	r0, [sp, #80]	; 0x50
   13e80:	bl	13bb8 <__assert_fail@plt+0x2b74>
   13e84:	str	r0, [sp, #164]	; 0xa4
   13e88:	mov	r1, sl
   13e8c:	movw	r0, #35992	; 0x8c98
   13e90:	movt	r0, #1
   13e94:	bl	13bb8 <__assert_fail@plt+0x2b74>
   13e98:	str	r0, [sp, #168]	; 0xa8
   13e9c:	b	13e48 <__assert_fail@plt+0x2e04>
   13ea0:	ldr	r3, [sp, #164]	; 0xa4
   13ea4:	ldrb	r3, [r3]
   13ea8:	cmp	r3, #0
   13eac:	beq	13ed8 <__assert_fail@plt+0x2e94>
   13eb0:	ldr	r2, [sp, #164]	; 0xa4
   13eb4:	mov	fp, #0
   13eb8:	ldr	r1, [sp, #64]	; 0x40
   13ebc:	cmp	r9, fp
   13ec0:	strbhi	r3, [r1, fp]
   13ec4:	add	fp, fp, #1
   13ec8:	ldrb	r3, [r2, #1]!
   13ecc:	cmp	r3, #0
   13ed0:	bne	13ebc <__assert_fail@plt+0x2e78>
   13ed4:	b	13e58 <__assert_fail@plt+0x2e14>
   13ed8:	mov	fp, #0
   13edc:	b	13e58 <__assert_fail@plt+0x2e14>
   13ee0:	ldr	r3, [sp, #32]
   13ee4:	cmp	r3, #0
   13ee8:	bne	13dc8 <__assert_fail@plt+0x2d84>
   13eec:	mov	r3, #1
   13ef0:	str	r3, [sp, #28]
   13ef4:	cmp	r9, #0
   13ef8:	beq	13fac <__assert_fail@plt+0x2f68>
   13efc:	mov	r3, #39	; 0x27
   13f00:	ldr	r2, [sp, #64]	; 0x40
   13f04:	strb	r3, [r2]
   13f08:	mov	r3, #0
   13f0c:	str	r3, [sp, #32]
   13f10:	mov	fp, #1
   13f14:	str	fp, [sp, #52]	; 0x34
   13f18:	movw	r3, #35992	; 0x8c98
   13f1c:	movt	r3, #1
   13f20:	str	r3, [sp, #60]	; 0x3c
   13f24:	mov	sl, #2
   13f28:	b	13de8 <__assert_fail@plt+0x2da4>
   13f2c:	ldr	r3, [sp, #32]
   13f30:	cmp	r3, #0
   13f34:	beq	13ef4 <__assert_fail@plt+0x2eb0>
   13f38:	mov	r3, #1
   13f3c:	str	r3, [sp, #52]	; 0x34
   13f40:	movw	r3, #35992	; 0x8c98
   13f44:	movt	r3, #1
   13f48:	str	r3, [sp, #60]	; 0x3c
   13f4c:	mov	fp, #0
   13f50:	b	13de8 <__assert_fail@plt+0x2da4>
   13f54:	bl	1102c <abort@plt>
   13f58:	mov	fp, #0
   13f5c:	str	fp, [sp, #32]
   13f60:	mov	r3, #1
   13f64:	str	r3, [sp, #28]
   13f68:	b	13de8 <__assert_fail@plt+0x2da4>
   13f6c:	ldr	r3, [sp, #32]
   13f70:	str	r3, [sp, #28]
   13f74:	mov	r3, #1
   13f78:	str	r3, [sp, #52]	; 0x34
   13f7c:	movw	r3, #35972	; 0x8c84
   13f80:	movt	r3, #1
   13f84:	str	r3, [sp, #60]	; 0x3c
   13f88:	mov	fp, #0
   13f8c:	b	13de8 <__assert_fail@plt+0x2da4>
   13f90:	mov	fp, #1
   13f94:	str	fp, [sp, #28]
   13f98:	str	fp, [sp, #52]	; 0x34
   13f9c:	movw	r3, #35972	; 0x8c84
   13fa0:	movt	r3, #1
   13fa4:	str	r3, [sp, #60]	; 0x3c
   13fa8:	b	13de8 <__assert_fail@plt+0x2da4>
   13fac:	mov	r3, #0
   13fb0:	str	r3, [sp, #32]
   13fb4:	mov	fp, #1
   13fb8:	str	fp, [sp, #52]	; 0x34
   13fbc:	movw	r3, #35992	; 0x8c98
   13fc0:	movt	r3, #1
   13fc4:	str	r3, [sp, #60]	; 0x3c
   13fc8:	mov	sl, #2
   13fcc:	b	13de8 <__assert_fail@plt+0x2da4>
   13fd0:	mov	r3, r2
   13fd4:	add	r4, r6, r2
   13fd8:	ldr	r2, [sp, #24]
   13fdc:	cmp	r3, #1
   13fe0:	movls	r3, #0
   13fe4:	movhi	r3, #1
   13fe8:	cmn	r2, #1
   13fec:	movne	r3, #0
   13ff0:	cmp	r3, #0
   13ff4:	beq	14004 <__assert_fail@plt+0x2fc0>
   13ff8:	ldr	r0, [sp, #48]	; 0x30
   13ffc:	bl	10f30 <strlen@plt>
   14000:	str	r0, [sp, #24]
   14004:	ldr	r3, [sp, #24]
   14008:	cmp	r4, r3
   1400c:	bhi	151f8 <__assert_fail@plt+0x41b4>
   14010:	ldr	r3, [sp, #48]	; 0x30
   14014:	add	r4, r3, r6
   14018:	ldr	r2, [sp, #52]	; 0x34
   1401c:	ldr	r1, [sp, #60]	; 0x3c
   14020:	mov	r0, r4
   14024:	bl	10e28 <memcmp@plt>
   14028:	cmp	r0, #0
   1402c:	bne	151f8 <__assert_fail@plt+0x41b4>
   14030:	ldr	r3, [sp, #32]
   14034:	cmp	r3, #0
   14038:	bne	14248 <__assert_fail@plt+0x3204>
   1403c:	ldrb	r4, [r4]
   14040:	cmp	r4, #126	; 0x7e
   14044:	ldrls	pc, [pc, r4, lsl #2]
   14048:	b	14afc <__assert_fail@plt+0x3ab8>
   1404c:	andeq	r4, r1, ip, lsl #5
   14050:	strdeq	r4, [r1], -ip
   14054:	strdeq	r4, [r1], -ip
   14058:	strdeq	r4, [r1], -ip
   1405c:	strdeq	r4, [r1], -ip
   14060:	strdeq	r4, [r1], -ip
   14064:	strdeq	r4, [r1], -ip
   14068:	andeq	r4, r1, r4, lsr #19
   1406c:	andeq	r4, r1, r8, lsr #10
   14070:	andeq	r4, r1, ip, asr #17
   14074:	andeq	r4, r1, r8, ror r9
   14078:	andeq	r4, r1, r0, ror #17
   1407c:	andeq	r4, r1, ip, lsr r5
   14080:	andeq	r4, r1, r0, asr r5
   14084:	strdeq	r4, [r1], -ip
   14088:	strdeq	r4, [r1], -ip
   1408c:	strdeq	r4, [r1], -ip
   14090:	strdeq	r4, [r1], -ip
   14094:	strdeq	r4, [r1], -ip
   14098:	strdeq	r4, [r1], -ip
   1409c:	strdeq	r4, [r1], -ip
   140a0:	strdeq	r4, [r1], -ip
   140a4:	strdeq	r4, [r1], -ip
   140a8:	strdeq	r4, [r1], -ip
   140ac:	strdeq	r4, [r1], -ip
   140b0:	strdeq	r4, [r1], -ip
   140b4:	strdeq	r4, [r1], -ip
   140b8:	strdeq	r4, [r1], -ip
   140bc:	strdeq	r4, [r1], -ip
   140c0:	strdeq	r4, [r1], -ip
   140c4:	strdeq	r4, [r1], -ip
   140c8:	strdeq	r4, [r1], -ip
   140cc:	andeq	r4, r1, r8, lsl sl
   140d0:	andeq	r4, r1, ip, lsr sl
   140d4:	andeq	r4, r1, ip, lsr sl
   140d8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140dc:	andeq	r4, r1, ip, lsr sl
   140e0:	andeq	r4, r1, ip, asr pc
   140e4:	andeq	r4, r1, ip, lsr sl
   140e8:	andeq	r4, r1, ip, asr sl
   140ec:	andeq	r4, r1, ip, lsr sl
   140f0:	andeq	r4, r1, ip, lsr sl
   140f4:	andeq	r4, r1, ip, lsr sl
   140f8:	andeq	r4, r1, ip, asr pc
   140fc:	andeq	r4, r1, ip, asr pc
   14100:	andeq	r4, r1, ip, asr pc
   14104:	andeq	r4, r1, ip, asr pc
   14108:	andeq	r4, r1, ip, asr pc
   1410c:	andeq	r4, r1, ip, asr pc
   14110:	andeq	r4, r1, ip, asr pc
   14114:	andeq	r4, r1, ip, asr pc
   14118:	andeq	r4, r1, ip, asr pc
   1411c:	andeq	r4, r1, ip, asr pc
   14120:	andeq	r4, r1, ip, asr pc
   14124:	andeq	r4, r1, ip, asr pc
   14128:	andeq	r4, r1, ip, asr pc
   1412c:	andeq	r4, r1, ip, asr pc
   14130:	andeq	r4, r1, ip, asr pc
   14134:	andeq	r4, r1, ip, asr pc
   14138:	andeq	r4, r1, ip, lsr sl
   1413c:	andeq	r4, r1, ip, lsr sl
   14140:	andeq	r4, r1, ip, lsr sl
   14144:	andeq	r4, r1, ip, lsr sl
   14148:			; <UNDEFINED> instruction: 0x000143bc
   1414c:	strdeq	r4, [r1], -ip
   14150:	andeq	r4, r1, ip, asr pc
   14154:	andeq	r4, r1, ip, asr pc
   14158:	andeq	r4, r1, ip, asr pc
   1415c:	andeq	r4, r1, ip, asr pc
   14160:	andeq	r4, r1, ip, asr pc
   14164:	andeq	r4, r1, ip, asr pc
   14168:	andeq	r4, r1, ip, asr pc
   1416c:	andeq	r4, r1, ip, asr pc
   14170:	andeq	r4, r1, ip, asr pc
   14174:	andeq	r4, r1, ip, asr pc
   14178:	andeq	r4, r1, ip, asr pc
   1417c:	andeq	r4, r1, ip, asr pc
   14180:	andeq	r4, r1, ip, asr pc
   14184:	andeq	r4, r1, ip, asr pc
   14188:	andeq	r4, r1, ip, asr pc
   1418c:	andeq	r4, r1, ip, asr pc
   14190:	andeq	r4, r1, ip, asr pc
   14194:	andeq	r4, r1, ip, asr pc
   14198:	andeq	r4, r1, ip, asr pc
   1419c:	andeq	r4, r1, ip, asr pc
   141a0:	andeq	r4, r1, ip, asr pc
   141a4:	andeq	r4, r1, ip, asr pc
   141a8:	andeq	r4, r1, ip, asr pc
   141ac:	andeq	r4, r1, ip, asr pc
   141b0:	andeq	r4, r1, ip, asr pc
   141b4:	andeq	r4, r1, ip, asr pc
   141b8:	andeq	r4, r1, ip, lsr sl
   141bc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141c0:	andeq	r4, r1, ip, asr pc
   141c4:	andeq	r4, r1, ip, lsr sl
   141c8:	andeq	r4, r1, ip, asr pc
   141cc:	andeq	r4, r1, ip, lsr sl
   141d0:	andeq	r4, r1, ip, asr pc
   141d4:	andeq	r4, r1, ip, asr pc
   141d8:	andeq	r4, r1, ip, asr pc
   141dc:	andeq	r4, r1, ip, asr pc
   141e0:	andeq	r4, r1, ip, asr pc
   141e4:	andeq	r4, r1, ip, asr pc
   141e8:	andeq	r4, r1, ip, asr pc
   141ec:	andeq	r4, r1, ip, asr pc
   141f0:	andeq	r4, r1, ip, asr pc
   141f4:	andeq	r4, r1, ip, asr pc
   141f8:	andeq	r4, r1, ip, asr pc
   141fc:	andeq	r4, r1, ip, asr pc
   14200:	andeq	r4, r1, ip, asr pc
   14204:	andeq	r4, r1, ip, asr pc
   14208:	andeq	r4, r1, ip, asr pc
   1420c:	andeq	r4, r1, ip, asr pc
   14210:	andeq	r4, r1, ip, asr pc
   14214:	andeq	r4, r1, ip, asr pc
   14218:	andeq	r4, r1, ip, asr pc
   1421c:	andeq	r4, r1, ip, asr pc
   14220:	andeq	r4, r1, ip, asr pc
   14224:	andeq	r4, r1, ip, asr pc
   14228:	andeq	r4, r1, ip, asr pc
   1422c:	andeq	r4, r1, ip, asr pc
   14230:	andeq	r4, r1, ip, asr pc
   14234:	andeq	r4, r1, ip, asr pc
   14238:			; <UNDEFINED> instruction: 0x000149b4
   1423c:	andeq	r4, r1, ip, lsr sl
   14240:			; <UNDEFINED> instruction: 0x000149b4
   14244:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14248:	mov	r8, r9
   1424c:	mov	r7, sl
   14250:	b	15150 <__assert_fail@plt+0x410c>
   14254:	ldr	r3, [sp, #28]
   14258:	cmp	r3, #0
   1425c:	bne	1427c <__assert_fail@plt+0x3238>
   14260:	ldr	r3, [sp, #156]	; 0x9c
   14264:	tst	r3, #1
   14268:	bne	14664 <__assert_fail@plt+0x3620>
   1426c:	ldr	r3, [sp, #28]
   14270:	str	r3, [sp, #44]	; 0x2c
   14274:	mov	r5, r3
   14278:	b	14584 <__assert_fail@plt+0x3540>
   1427c:	ldr	r3, [sp, #32]
   14280:	cmp	r3, #0
   14284:	bne	15100 <__assert_fail@plt+0x40bc>
   14288:	str	r3, [sp, #44]	; 0x2c
   1428c:	ldr	r3, [sp, #36]	; 0x24
   14290:	eor	r3, r3, #1
   14294:	cmp	sl, #2
   14298:	movne	r3, #0
   1429c:	andeq	r3, r3, #1
   142a0:	cmp	r3, #0
   142a4:	beq	142fc <__assert_fail@plt+0x32b8>
   142a8:	cmp	r9, fp
   142ac:	movhi	r2, #39	; 0x27
   142b0:	strbhi	r2, [r8, fp]
   142b4:	add	r2, fp, #1
   142b8:	cmp	r9, r2
   142bc:	movhi	r1, #36	; 0x24
   142c0:	strbhi	r1, [r8, r2]
   142c4:	add	r2, fp, #2
   142c8:	cmp	r9, r2
   142cc:	movhi	r1, #39	; 0x27
   142d0:	strbhi	r1, [r8, r2]
   142d4:	add	r2, fp, #3
   142d8:	cmp	r9, r2
   142dc:	bls	151bc <__assert_fail@plt+0x4178>
   142e0:	mov	r1, #92	; 0x5c
   142e4:	strb	r1, [r8, r2]
   142e8:	add	fp, fp, #4
   142ec:	str	r3, [sp, #36]	; 0x24
   142f0:	mov	r5, #0
   142f4:	mov	r4, #48	; 0x30
   142f8:	b	145d0 <__assert_fail@plt+0x358c>
   142fc:	cmp	r9, fp
   14300:	bhi	14328 <__assert_fail@plt+0x32e4>
   14304:	add	r1, fp, #1
   14308:	ldr	r2, [sp, #56]	; 0x38
   1430c:	cmp	r2, #0
   14310:	bne	14350 <__assert_fail@plt+0x330c>
   14314:	mov	r3, r5
   14318:	ldr	r5, [sp, #56]	; 0x38
   1431c:	mov	fp, r1
   14320:	mov	r4, #48	; 0x30
   14324:	b	14584 <__assert_fail@plt+0x3540>
   14328:	mov	r2, #92	; 0x5c
   1432c:	strb	r2, [r8, fp]
   14330:	add	r1, fp, #1
   14334:	ldr	r2, [sp, #56]	; 0x38
   14338:	cmp	r2, #0
   1433c:	moveq	r3, r5
   14340:	moveq	r5, r2
   14344:	moveq	fp, r1
   14348:	moveq	r4, #48	; 0x30
   1434c:	beq	145d0 <__assert_fail@plt+0x358c>
   14350:	add	r2, r6, #1
   14354:	ldr	r0, [sp, #24]
   14358:	cmp	r2, r0
   1435c:	bcs	14378 <__assert_fail@plt+0x3334>
   14360:	ldr	r0, [sp, #48]	; 0x30
   14364:	ldrb	r2, [r0, r2]
   14368:	sub	r2, r2, #48	; 0x30
   1436c:	uxtb	r2, r2
   14370:	cmp	r2, #9
   14374:	bls	14390 <__assert_fail@plt+0x334c>
   14378:	mov	r2, r3
   1437c:	mov	r3, r5
   14380:	mov	r5, r2
   14384:	mov	fp, r1
   14388:	mov	r4, #48	; 0x30
   1438c:	b	145a8 <__assert_fail@plt+0x3564>
   14390:	cmp	r9, r1
   14394:	movhi	r2, #48	; 0x30
   14398:	strbhi	r2, [r8, r1]
   1439c:	add	r2, fp, #2
   143a0:	cmp	r9, r2
   143a4:	movhi	r1, #48	; 0x30
   143a8:	strbhi	r1, [r8, r2]
   143ac:	add	r1, fp, #3
   143b0:	b	14378 <__assert_fail@plt+0x3334>
   143b4:	mov	r3, #0
   143b8:	str	r3, [sp, #44]	; 0x2c
   143bc:	cmp	sl, #2
   143c0:	beq	143dc <__assert_fail@plt+0x3398>
   143c4:	cmp	sl, #5
   143c8:	beq	143f4 <__assert_fail@plt+0x33b0>
   143cc:	mov	r5, #0
   143d0:	mov	r3, r5
   143d4:	mov	r4, #63	; 0x3f
   143d8:	b	14584 <__assert_fail@plt+0x3540>
   143dc:	ldr	r3, [sp, #32]
   143e0:	cmp	r3, #0
   143e4:	bne	1510c <__assert_fail@plt+0x40c8>
   143e8:	mov	r5, r3
   143ec:	mov	r4, #63	; 0x3f
   143f0:	b	14aec <__assert_fail@plt+0x3aa8>
   143f4:	ldr	r3, [sp, #156]	; 0x9c
   143f8:	tst	r3, #4
   143fc:	beq	14f24 <__assert_fail@plt+0x3ee0>
   14400:	add	r2, r6, #2
   14404:	ldr	r3, [sp, #24]
   14408:	cmp	r2, r3
   1440c:	bcs	14f34 <__assert_fail@plt+0x3ef0>
   14410:	ldr	r3, [sp, #48]	; 0x30
   14414:	add	r3, r3, r6
   14418:	ldrb	r4, [r3, #1]
   1441c:	cmp	r4, #63	; 0x3f
   14420:	movne	r5, #0
   14424:	movne	r3, r5
   14428:	movne	r4, #63	; 0x3f
   1442c:	bne	14584 <__assert_fail@plt+0x3540>
   14430:	ldr	r3, [sp, #48]	; 0x30
   14434:	ldrb	r1, [r3, r2]
   14438:	sub	r3, r1, #33	; 0x21
   1443c:	cmp	r3, #29
   14440:	ldrls	pc, [pc, r3, lsl #2]
   14444:	b	14f44 <__assert_fail@plt+0x3f00>
   14448:	andeq	r4, r1, r0, asr #9
   1444c:	andeq	r4, r1, r4, asr #30
   14450:	andeq	r4, r1, r4, asr #30
   14454:	andeq	r4, r1, r4, asr #30
   14458:	andeq	r4, r1, r4, asr #30
   1445c:	andeq	r4, r1, r4, asr #30
   14460:	andeq	r4, r1, r0, asr #9
   14464:	andeq	r4, r1, r0, asr #9
   14468:	andeq	r4, r1, r0, asr #9
   1446c:	andeq	r4, r1, r4, asr #30
   14470:	andeq	r4, r1, r4, asr #30
   14474:	andeq	r4, r1, r4, asr #30
   14478:	andeq	r4, r1, r0, asr #9
   1447c:	andeq	r4, r1, r4, asr #30
   14480:	andeq	r4, r1, r0, asr #9
   14484:	andeq	r4, r1, r4, asr #30
   14488:	andeq	r4, r1, r4, asr #30
   1448c:	andeq	r4, r1, r4, asr #30
   14490:	andeq	r4, r1, r4, asr #30
   14494:	andeq	r4, r1, r4, asr #30
   14498:	andeq	r4, r1, r4, asr #30
   1449c:	andeq	r4, r1, r4, asr #30
   144a0:	andeq	r4, r1, r4, asr #30
   144a4:	andeq	r4, r1, r4, asr #30
   144a8:	andeq	r4, r1, r4, asr #30
   144ac:	andeq	r4, r1, r4, asr #30
   144b0:	andeq	r4, r1, r4, asr #30
   144b4:	andeq	r4, r1, r0, asr #9
   144b8:	andeq	r4, r1, r0, asr #9
   144bc:	andeq	r4, r1, r0, asr #9
   144c0:	ldr	r3, [sp, #32]
   144c4:	cmp	r3, #0
   144c8:	bne	151b0 <__assert_fail@plt+0x416c>
   144cc:	cmp	r9, fp
   144d0:	movhi	r3, #63	; 0x3f
   144d4:	strbhi	r3, [r8, fp]
   144d8:	add	r3, fp, #1
   144dc:	cmp	r9, r3
   144e0:	movhi	r0, #34	; 0x22
   144e4:	strbhi	r0, [r8, r3]
   144e8:	add	r3, fp, #2
   144ec:	cmp	r9, r3
   144f0:	movhi	r0, #34	; 0x22
   144f4:	strbhi	r0, [r8, r3]
   144f8:	add	r3, fp, #3
   144fc:	cmp	r9, r3
   14500:	movhi	r0, #63	; 0x3f
   14504:	strbhi	r0, [r8, r3]
   14508:	add	fp, fp, #4
   1450c:	ldr	r3, [sp, #32]
   14510:	mov	r5, r3
   14514:	mov	r4, r1
   14518:	mov	r6, r2
   1451c:	b	14584 <__assert_fail@plt+0x3540>
   14520:	mov	r3, #0
   14524:	str	r3, [sp, #44]	; 0x2c
   14528:	mov	r4, #8
   1452c:	mov	r3, #98	; 0x62
   14530:	b	14570 <__assert_fail@plt+0x352c>
   14534:	mov	r3, #0
   14538:	str	r3, [sp, #44]	; 0x2c
   1453c:	mov	r4, #12
   14540:	mov	r3, #102	; 0x66
   14544:	b	14570 <__assert_fail@plt+0x352c>
   14548:	mov	r3, #0
   1454c:	str	r3, [sp, #44]	; 0x2c
   14550:	mov	r4, #13
   14554:	mov	r3, #114	; 0x72
   14558:	ldr	r2, [sp, #32]
   1455c:	cmp	sl, #2
   14560:	movne	r2, #0
   14564:	andeq	r2, r2, #1
   14568:	cmp	r2, #0
   1456c:	bne	14990 <__assert_fail@plt+0x394c>
   14570:	ldr	r2, [sp, #28]
   14574:	cmp	r2, #0
   14578:	bne	14f78 <__assert_fail@plt+0x3f34>
   1457c:	mov	r5, r2
   14580:	mov	r3, r2
   14584:	ldr	r2, [sp, #28]
   14588:	eor	r2, r2, #1
   1458c:	cmp	sl, #2
   14590:	orreq	r2, r2, #1
   14594:	eor	r2, r2, #1
   14598:	ldr	r1, [sp, #32]
   1459c:	orr	r2, r1, r2
   145a0:	tst	r2, #255	; 0xff
   145a4:	beq	145d0 <__assert_fail@plt+0x358c>
   145a8:	ldr	r2, [sp, #160]	; 0xa0
   145ac:	cmp	r2, #0
   145b0:	beq	145d0 <__assert_fail@plt+0x358c>
   145b4:	ubfx	r1, r4, #5, #8
   145b8:	and	r2, r4, #31
   145bc:	ldr	r0, [sp, #160]	; 0xa0
   145c0:	ldr	r1, [r0, r1, lsl #2]
   145c4:	lsr	r2, r1, r2
   145c8:	tst	r2, #1
   145cc:	bne	145dc <__assert_fail@plt+0x3598>
   145d0:	ldr	r2, [sp, #44]	; 0x2c
   145d4:	cmp	r2, #0
   145d8:	beq	14930 <__assert_fail@plt+0x38ec>
   145dc:	ldr	r3, [sp, #32]
   145e0:	cmp	r3, #0
   145e4:	bne	15130 <__assert_fail@plt+0x40ec>
   145e8:	ldr	r3, [sp, #36]	; 0x24
   145ec:	eor	r3, r3, #1
   145f0:	cmp	sl, #2
   145f4:	movne	r3, #0
   145f8:	andeq	r3, r3, #1
   145fc:	cmp	r3, #0
   14600:	beq	14638 <__assert_fail@plt+0x35f4>
   14604:	cmp	r9, fp
   14608:	movhi	r2, #39	; 0x27
   1460c:	strbhi	r2, [r8, fp]
   14610:	add	r2, fp, #1
   14614:	cmp	r9, r2
   14618:	movhi	r1, #36	; 0x24
   1461c:	strbhi	r1, [r8, r2]
   14620:	add	r2, fp, #2
   14624:	cmp	r9, r2
   14628:	movhi	r1, #39	; 0x27
   1462c:	strbhi	r1, [r8, r2]
   14630:	add	fp, fp, #3
   14634:	str	r3, [sp, #36]	; 0x24
   14638:	cmp	r9, fp
   1463c:	movhi	r3, #92	; 0x5c
   14640:	strbhi	r3, [r8, fp]
   14644:	add	fp, fp, #1
   14648:	cmp	fp, r9
   1464c:	strbcc	r4, [r8, fp]
   14650:	add	fp, fp, #1
   14654:	cmp	r5, #0
   14658:	ldr	r3, [sp, #40]	; 0x28
   1465c:	moveq	r3, r5
   14660:	str	r3, [sp, #40]	; 0x28
   14664:	add	r6, r6, #1
   14668:	ldr	r3, [sp, #24]
   1466c:	cmn	r3, #1
   14670:	beq	14fa0 <__assert_fail@plt+0x3f5c>
   14674:	ldr	r3, [sp, #24]
   14678:	subs	r5, r3, r6
   1467c:	movne	r5, #1
   14680:	cmp	r5, #0
   14684:	beq	14fb4 <__assert_fail@plt+0x3f70>
   14688:	ldr	r3, [sp, #28]
   1468c:	cmp	sl, #2
   14690:	moveq	r3, #0
   14694:	andne	r3, r3, #1
   14698:	str	r3, [sp, #56]	; 0x38
   1469c:	ldr	r2, [sp, #52]	; 0x34
   146a0:	adds	r7, r2, #0
   146a4:	movne	r7, #1
   146a8:	ands	r3, r3, r7
   146ac:	str	r3, [sp, #44]	; 0x2c
   146b0:	bne	13fd0 <__assert_fail@plt+0x2f8c>
   146b4:	ldr	r3, [sp, #48]	; 0x30
   146b8:	ldrb	r4, [r3, r6]
   146bc:	cmp	r4, #126	; 0x7e
   146c0:	ldrls	pc, [pc, r4, lsl #2]
   146c4:	b	14afc <__assert_fail@plt+0x3ab8>
   146c8:	andeq	r4, r1, r4, asr r2
   146cc:	strdeq	r4, [r1], -ip
   146d0:	strdeq	r4, [r1], -ip
   146d4:	strdeq	r4, [r1], -ip
   146d8:	strdeq	r4, [r1], -ip
   146dc:	strdeq	r4, [r1], -ip
   146e0:	strdeq	r4, [r1], -ip
   146e4:	muleq	r1, ip, r9
   146e8:	andeq	r4, r1, r8, lsr #10
   146ec:	andeq	r4, r1, ip, asr #17
   146f0:	andeq	r4, r1, r0, ror r9
   146f4:	andeq	r4, r1, r0, ror #17
   146f8:	andeq	r4, r1, ip, lsr r5
   146fc:	andeq	r4, r1, r0, asr r5
   14700:	strdeq	r4, [r1], -ip
   14704:	strdeq	r4, [r1], -ip
   14708:	strdeq	r4, [r1], -ip
   1470c:	strdeq	r4, [r1], -ip
   14710:	strdeq	r4, [r1], -ip
   14714:	strdeq	r4, [r1], -ip
   14718:	strdeq	r4, [r1], -ip
   1471c:	strdeq	r4, [r1], -ip
   14720:	strdeq	r4, [r1], -ip
   14724:	strdeq	r4, [r1], -ip
   14728:	strdeq	r4, [r1], -ip
   1472c:	strdeq	r4, [r1], -ip
   14730:	strdeq	r4, [r1], -ip
   14734:	strdeq	r4, [r1], -ip
   14738:	strdeq	r4, [r1], -ip
   1473c:	strdeq	r4, [r1], -ip
   14740:	strdeq	r4, [r1], -ip
   14744:	strdeq	r4, [r1], -ip
   14748:	andeq	r4, r1, r8, lsl sl
   1474c:	andeq	r4, r1, r4, lsl sl
   14750:	andeq	r4, r1, r4, lsl sl
   14754:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14758:	andeq	r4, r1, r4, lsl sl
   1475c:	andeq	r4, r1, ip, lsl pc
   14760:	andeq	r4, r1, r4, lsl sl
   14764:	andeq	r4, r1, ip, asr sl
   14768:	andeq	r4, r1, r4, lsl sl
   1476c:	andeq	r4, r1, r4, lsl sl
   14770:	andeq	r4, r1, r4, lsl sl
   14774:	andeq	r4, r1, ip, lsl pc
   14778:	andeq	r4, r1, ip, lsl pc
   1477c:	andeq	r4, r1, ip, lsl pc
   14780:	andeq	r4, r1, ip, lsl pc
   14784:	andeq	r4, r1, ip, lsl pc
   14788:	andeq	r4, r1, ip, lsl pc
   1478c:	andeq	r4, r1, ip, lsl pc
   14790:	andeq	r4, r1, ip, lsl pc
   14794:	andeq	r4, r1, ip, lsl pc
   14798:	andeq	r4, r1, ip, lsl pc
   1479c:	andeq	r4, r1, ip, lsl pc
   147a0:	andeq	r4, r1, ip, lsl pc
   147a4:	andeq	r4, r1, ip, lsl pc
   147a8:	andeq	r4, r1, ip, lsl pc
   147ac:	andeq	r4, r1, ip, lsl pc
   147b0:	andeq	r4, r1, ip, lsl pc
   147b4:	andeq	r4, r1, r4, lsl sl
   147b8:	andeq	r4, r1, r4, lsl sl
   147bc:	andeq	r4, r1, r4, lsl sl
   147c0:	andeq	r4, r1, r4, lsl sl
   147c4:			; <UNDEFINED> instruction: 0x000143bc
   147c8:	strdeq	r4, [r1], -ip
   147cc:	andeq	r4, r1, ip, lsl pc
   147d0:	andeq	r4, r1, ip, lsl pc
   147d4:	andeq	r4, r1, ip, lsl pc
   147d8:	andeq	r4, r1, ip, lsl pc
   147dc:	andeq	r4, r1, ip, lsl pc
   147e0:	andeq	r4, r1, ip, lsl pc
   147e4:	andeq	r4, r1, ip, lsl pc
   147e8:	andeq	r4, r1, ip, lsl pc
   147ec:	andeq	r4, r1, ip, lsl pc
   147f0:	andeq	r4, r1, ip, lsl pc
   147f4:	andeq	r4, r1, ip, lsl pc
   147f8:	andeq	r4, r1, ip, lsl pc
   147fc:	andeq	r4, r1, ip, lsl pc
   14800:	andeq	r4, r1, ip, lsl pc
   14804:	andeq	r4, r1, ip, lsl pc
   14808:	andeq	r4, r1, ip, lsl pc
   1480c:	andeq	r4, r1, ip, lsl pc
   14810:	andeq	r4, r1, ip, lsl pc
   14814:	andeq	r4, r1, ip, lsl pc
   14818:	andeq	r4, r1, ip, lsl pc
   1481c:	andeq	r4, r1, ip, lsl pc
   14820:	andeq	r4, r1, ip, lsl pc
   14824:	andeq	r4, r1, ip, lsl pc
   14828:	andeq	r4, r1, ip, lsl pc
   1482c:	andeq	r4, r1, ip, lsl pc
   14830:	andeq	r4, r1, ip, lsl pc
   14834:	andeq	r4, r1, r4, lsl sl
   14838:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1483c:	andeq	r4, r1, ip, lsl pc
   14840:	andeq	r4, r1, r4, lsl sl
   14844:	andeq	r4, r1, ip, lsl pc
   14848:	andeq	r4, r1, r4, lsl sl
   1484c:	andeq	r4, r1, ip, lsl pc
   14850:	andeq	r4, r1, ip, lsl pc
   14854:	andeq	r4, r1, ip, lsl pc
   14858:	andeq	r4, r1, ip, lsl pc
   1485c:	andeq	r4, r1, ip, lsl pc
   14860:	andeq	r4, r1, ip, lsl pc
   14864:	andeq	r4, r1, ip, lsl pc
   14868:	andeq	r4, r1, ip, lsl pc
   1486c:	andeq	r4, r1, ip, lsl pc
   14870:	andeq	r4, r1, ip, lsl pc
   14874:	andeq	r4, r1, ip, lsl pc
   14878:	andeq	r4, r1, ip, lsl pc
   1487c:	andeq	r4, r1, ip, lsl pc
   14880:	andeq	r4, r1, ip, lsl pc
   14884:	andeq	r4, r1, ip, lsl pc
   14888:	andeq	r4, r1, ip, lsl pc
   1488c:	andeq	r4, r1, ip, lsl pc
   14890:	andeq	r4, r1, ip, lsl pc
   14894:	andeq	r4, r1, ip, lsl pc
   14898:	andeq	r4, r1, ip, lsl pc
   1489c:	andeq	r4, r1, ip, lsl pc
   148a0:	andeq	r4, r1, ip, lsl pc
   148a4:	andeq	r4, r1, ip, lsl pc
   148a8:	andeq	r4, r1, ip, lsl pc
   148ac:	andeq	r4, r1, ip, lsl pc
   148b0:	andeq	r4, r1, ip, lsl pc
   148b4:			; <UNDEFINED> instruction: 0x000149b4
   148b8:	andeq	r4, r1, r4, lsl sl
   148bc:			; <UNDEFINED> instruction: 0x000149b4
   148c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148c4:	mov	r3, #0
   148c8:	str	r3, [sp, #44]	; 0x2c
   148cc:	mov	r4, #9
   148d0:	mov	r3, #116	; 0x74
   148d4:	b	14558 <__assert_fail@plt+0x3514>
   148d8:	mov	r3, #0
   148dc:	str	r3, [sp, #44]	; 0x2c
   148e0:	mov	r4, #11
   148e4:	mov	r3, #118	; 0x76
   148e8:	b	14570 <__assert_fail@plt+0x352c>
   148ec:	mov	r3, #0
   148f0:	str	r3, [sp, #44]	; 0x2c
   148f4:	cmp	sl, #2
   148f8:	beq	1491c <__assert_fail@plt+0x38d8>
   148fc:	ldr	r3, [sp, #28]
   14900:	ldr	r2, [sp, #32]
   14904:	and	r3, r3, r2
   14908:	tst	r7, r3
   1490c:	bne	14f90 <__assert_fail@plt+0x3f4c>
   14910:	mov	r4, #92	; 0x5c
   14914:	mov	r3, r4
   14918:	b	14570 <__assert_fail@plt+0x352c>
   1491c:	ldr	r3, [sp, #32]
   14920:	cmp	r3, #0
   14924:	bne	15118 <__assert_fail@plt+0x40d4>
   14928:	mov	r5, r3
   1492c:	mov	r4, #92	; 0x5c
   14930:	eor	r3, r3, #1
   14934:	ldr	r2, [sp, #36]	; 0x24
   14938:	and	r3, r3, r2
   1493c:	tst	r3, #255	; 0xff
   14940:	beq	14648 <__assert_fail@plt+0x3604>
   14944:	cmp	r9, fp
   14948:	movhi	r3, #39	; 0x27
   1494c:	strbhi	r3, [r8, fp]
   14950:	add	r3, fp, #1
   14954:	cmp	r9, r3
   14958:	movhi	r2, #39	; 0x27
   1495c:	strbhi	r2, [r8, r3]
   14960:	add	fp, fp, #2
   14964:	mov	r3, #0
   14968:	str	r3, [sp, #36]	; 0x24
   1496c:	b	14648 <__assert_fail@plt+0x3604>
   14970:	mov	r3, #110	; 0x6e
   14974:	b	14558 <__assert_fail@plt+0x3514>
   14978:	mov	r3, #110	; 0x6e
   1497c:	b	14558 <__assert_fail@plt+0x3514>
   14980:	mov	r3, #0
   14984:	str	r3, [sp, #44]	; 0x2c
   14988:	mov	r3, #110	; 0x6e
   1498c:	b	14558 <__assert_fail@plt+0x3514>
   14990:	mov	r8, r9
   14994:	mov	r7, #2
   14998:	b	15138 <__assert_fail@plt+0x40f4>
   1499c:	mov	r3, #97	; 0x61
   149a0:	b	14570 <__assert_fail@plt+0x352c>
   149a4:	mov	r3, #97	; 0x61
   149a8:	b	14570 <__assert_fail@plt+0x352c>
   149ac:	mov	r3, #0
   149b0:	str	r3, [sp, #44]	; 0x2c
   149b4:	ldr	r3, [sp, #24]
   149b8:	cmn	r3, #1
   149bc:	beq	149e8 <__assert_fail@plt+0x39a4>
   149c0:	ldr	r3, [sp, #24]
   149c4:	subs	r3, r3, #1
   149c8:	movne	r3, #1
   149cc:	cmp	r3, #0
   149d0:	bne	14f50 <__assert_fail@plt+0x3f0c>
   149d4:	cmp	r6, #0
   149d8:	beq	14a18 <__assert_fail@plt+0x39d4>
   149dc:	mov	r5, #0
   149e0:	mov	r3, r5
   149e4:	b	14584 <__assert_fail@plt+0x3540>
   149e8:	ldr	r3, [sp, #48]	; 0x30
   149ec:	ldrb	r3, [r3, #1]
   149f0:	adds	r3, r3, #0
   149f4:	movne	r3, #1
   149f8:	b	149cc <__assert_fail@plt+0x3988>
   149fc:	mov	r3, #0
   14a00:	str	r3, [sp, #44]	; 0x2c
   14a04:	b	149d4 <__assert_fail@plt+0x3990>
   14a08:	mov	r3, #0
   14a0c:	str	r3, [sp, #44]	; 0x2c
   14a10:	b	14a18 <__assert_fail@plt+0x39d4>
   14a14:	ldr	r5, [sp, #44]	; 0x2c
   14a18:	ldr	r3, [sp, #32]
   14a1c:	cmp	sl, #2
   14a20:	movne	r3, #0
   14a24:	andeq	r3, r3, #1
   14a28:	cmp	r3, #0
   14a2c:	beq	14584 <__assert_fail@plt+0x3540>
   14a30:	mov	r8, r9
   14a34:	mov	r7, #2
   14a38:	b	15138 <__assert_fail@plt+0x40f4>
   14a3c:	ldr	r5, [sp, #32]
   14a40:	b	14a18 <__assert_fail@plt+0x39d4>
   14a44:	mov	r3, #0
   14a48:	str	r3, [sp, #44]	; 0x2c
   14a4c:	mov	r5, r3
   14a50:	b	14a18 <__assert_fail@plt+0x39d4>
   14a54:	mov	r3, #0
   14a58:	str	r3, [sp, #44]	; 0x2c
   14a5c:	cmp	sl, #2
   14a60:	strne	r5, [sp, #68]	; 0x44
   14a64:	movne	r3, #0
   14a68:	movne	r4, #39	; 0x27
   14a6c:	bne	14584 <__assert_fail@plt+0x3540>
   14a70:	ldr	r3, [sp, #32]
   14a74:	cmp	r3, #0
   14a78:	bne	15124 <__assert_fail@plt+0x40e0>
   14a7c:	ldr	r3, [sp, #72]	; 0x48
   14a80:	clz	r3, r3
   14a84:	lsr	r3, r3, #5
   14a88:	cmp	r9, #0
   14a8c:	moveq	r3, #0
   14a90:	cmp	r3, #0
   14a94:	movne	r3, #0
   14a98:	bne	14ac0 <__assert_fail@plt+0x3a7c>
   14a9c:	cmp	r9, fp
   14aa0:	movhi	r3, #39	; 0x27
   14aa4:	strbhi	r3, [r8, fp]
   14aa8:	add	r3, fp, #1
   14aac:	cmp	r9, r3
   14ab0:	movhi	r2, #92	; 0x5c
   14ab4:	strbhi	r2, [r8, r3]
   14ab8:	mov	r3, r9
   14abc:	ldr	r9, [sp, #72]	; 0x48
   14ac0:	add	r2, fp, #2
   14ac4:	cmp	r2, r3
   14ac8:	movcc	r1, #39	; 0x27
   14acc:	strbcc	r1, [r8, r2]
   14ad0:	add	fp, fp, #3
   14ad4:	str	r5, [sp, #68]	; 0x44
   14ad8:	ldr	r2, [sp, #32]
   14adc:	str	r2, [sp, #36]	; 0x24
   14ae0:	str	r9, [sp, #72]	; 0x48
   14ae4:	mov	r9, r3
   14ae8:	mov	r4, #39	; 0x27
   14aec:	mov	r3, #0
   14af0:	b	145d0 <__assert_fail@plt+0x358c>
   14af4:	mov	r3, #0
   14af8:	str	r3, [sp, #44]	; 0x2c
   14afc:	ldr	r7, [sp, #76]	; 0x4c
   14b00:	cmp	r7, #1
   14b04:	bne	14b3c <__assert_fail@plt+0x3af8>
   14b08:	bl	10f0c <__ctype_b_loc@plt>
   14b0c:	ldr	r2, [r0]
   14b10:	lsl	r3, r4, #1
   14b14:	ldrh	r5, [r2, r3]
   14b18:	ubfx	r5, r5, #14, #1
   14b1c:	mov	ip, r7
   14b20:	eor	r3, r5, #1
   14b24:	ldr	r2, [sp, #28]
   14b28:	and	r3, r3, r2
   14b2c:	ands	r3, r3, #255	; 0xff
   14b30:	beq	14584 <__assert_fail@plt+0x3540>
   14b34:	mov	r5, #0
   14b38:	b	14d98 <__assert_fail@plt+0x3d54>
   14b3c:	mov	r2, #0
   14b40:	mov	r3, #0
   14b44:	strd	r2, [sp, #104]	; 0x68
   14b48:	ldr	r3, [sp, #24]
   14b4c:	cmn	r3, #1
   14b50:	beq	14b74 <__assert_fail@plt+0x3b30>
   14b54:	mov	r3, #0
   14b58:	str	r4, [sp, #88]	; 0x58
   14b5c:	str	fp, [sp, #92]	; 0x5c
   14b60:	str	r8, [sp, #56]	; 0x38
   14b64:	mov	r8, r3
   14b68:	str	r9, [sp, #84]	; 0x54
   14b6c:	ldr	r9, [sp, #48]	; 0x30
   14b70:	b	14cc0 <__assert_fail@plt+0x3c7c>
   14b74:	ldr	r0, [sp, #48]	; 0x30
   14b78:	bl	10f30 <strlen@plt>
   14b7c:	str	r0, [sp, #24]
   14b80:	b	14b54 <__assert_fail@plt+0x3b10>
   14b84:	mov	r1, fp
   14b88:	ldr	r4, [sp, #88]	; 0x58
   14b8c:	mov	r2, r8
   14b90:	mov	ip, r8
   14b94:	ldr	fp, [sp, #92]	; 0x5c
   14b98:	ldr	r8, [sp, #56]	; 0x38
   14b9c:	ldr	r9, [sp, #84]	; 0x54
   14ba0:	ldr	r0, [sp, #24]
   14ba4:	cmp	r7, r0
   14ba8:	bcs	14d60 <__assert_fail@plt+0x3d1c>
   14bac:	ldrb	r3, [r1]
   14bb0:	cmp	r3, #0
   14bb4:	beq	14d68 <__assert_fail@plt+0x3d24>
   14bb8:	mov	r3, r1
   14bbc:	add	r2, r2, #1
   14bc0:	add	r1, r6, r2
   14bc4:	cmp	r0, r1
   14bc8:	bls	14d70 <__assert_fail@plt+0x3d2c>
   14bcc:	ldrb	r1, [r3, #1]!
   14bd0:	cmp	r1, #0
   14bd4:	bne	14bbc <__assert_fail@plt+0x3b78>
   14bd8:	mov	ip, r2
   14bdc:	mov	r5, #0
   14be0:	b	14d90 <__assert_fail@plt+0x3d4c>
   14be4:	ldr	r3, [sp, #56]	; 0x38
   14be8:	str	r3, [sp, #64]	; 0x40
   14bec:	ldr	r8, [sp, #84]	; 0x54
   14bf0:	mov	r7, #2
   14bf4:	b	15138 <__assert_fail@plt+0x40f4>
   14bf8:	cmp	r2, r7
   14bfc:	beq	14c9c <__assert_fail@plt+0x3c58>
   14c00:	ldrb	r3, [r2], #1
   14c04:	sub	r3, r3, #91	; 0x5b
   14c08:	cmp	r3, #33	; 0x21
   14c0c:	ldrls	pc, [pc, r3, lsl #2]
   14c10:	b	14bf8 <__assert_fail@plt+0x3bb4>
   14c14:	andeq	r4, r1, r4, ror #23
   14c18:	andeq	r4, r1, r4, ror #23
   14c1c:	strdeq	r4, [r1], -r8
   14c20:	andeq	r4, r1, r4, ror #23
   14c24:	strdeq	r4, [r1], -r8
   14c28:	andeq	r4, r1, r4, ror #23
   14c2c:	strdeq	r4, [r1], -r8
   14c30:	strdeq	r4, [r1], -r8
   14c34:	strdeq	r4, [r1], -r8
   14c38:	strdeq	r4, [r1], -r8
   14c3c:	strdeq	r4, [r1], -r8
   14c40:	strdeq	r4, [r1], -r8
   14c44:	strdeq	r4, [r1], -r8
   14c48:	strdeq	r4, [r1], -r8
   14c4c:	strdeq	r4, [r1], -r8
   14c50:	strdeq	r4, [r1], -r8
   14c54:	strdeq	r4, [r1], -r8
   14c58:	strdeq	r4, [r1], -r8
   14c5c:	strdeq	r4, [r1], -r8
   14c60:	strdeq	r4, [r1], -r8
   14c64:	strdeq	r4, [r1], -r8
   14c68:	strdeq	r4, [r1], -r8
   14c6c:	strdeq	r4, [r1], -r8
   14c70:	strdeq	r4, [r1], -r8
   14c74:	strdeq	r4, [r1], -r8
   14c78:	strdeq	r4, [r1], -r8
   14c7c:	strdeq	r4, [r1], -r8
   14c80:	strdeq	r4, [r1], -r8
   14c84:	strdeq	r4, [r1], -r8
   14c88:	strdeq	r4, [r1], -r8
   14c8c:	strdeq	r4, [r1], -r8
   14c90:	strdeq	r4, [r1], -r8
   14c94:	strdeq	r4, [r1], -r8
   14c98:	andeq	r4, r1, r4, ror #23
   14c9c:	ldr	r0, [sp, #100]	; 0x64
   14ca0:	bl	10e64 <iswprint@plt>
   14ca4:	cmp	r0, #0
   14ca8:	moveq	r5, #0
   14cac:	add	r8, r8, r4
   14cb0:	add	r0, sp, #104	; 0x68
   14cb4:	bl	10e10 <mbsinit@plt>
   14cb8:	cmp	r0, #0
   14cbc:	bne	14d2c <__assert_fail@plt+0x3ce8>
   14cc0:	add	r7, r6, r8
   14cc4:	add	fp, r9, r7
   14cc8:	add	r3, sp, #104	; 0x68
   14ccc:	ldr	r2, [sp, #24]
   14cd0:	sub	r2, r2, r7
   14cd4:	mov	r1, fp
   14cd8:	add	r0, sp, #100	; 0x64
   14cdc:	bl	17b2c <__assert_fail@plt+0x6ae8>
   14ce0:	subs	r4, r0, #0
   14ce4:	beq	14d7c <__assert_fail@plt+0x3d38>
   14ce8:	cmn	r4, #1
   14cec:	beq	14d44 <__assert_fail@plt+0x3d00>
   14cf0:	cmn	r4, #2
   14cf4:	beq	14b84 <__assert_fail@plt+0x3b40>
   14cf8:	ldr	r3, [sp, #32]
   14cfc:	cmp	sl, #2
   14d00:	movne	r3, #0
   14d04:	andeq	r3, r3, #1
   14d08:	cmp	r3, #0
   14d0c:	beq	14c9c <__assert_fail@plt+0x3c58>
   14d10:	cmp	r4, #1
   14d14:	bls	14c9c <__assert_fail@plt+0x3c58>
   14d18:	add	r2, r7, #1
   14d1c:	add	r2, r9, r2
   14d20:	add	r3, r9, r4
   14d24:	add	r7, r3, r7
   14d28:	b	14c00 <__assert_fail@plt+0x3bbc>
   14d2c:	ldr	r4, [sp, #88]	; 0x58
   14d30:	mov	ip, r8
   14d34:	ldr	fp, [sp, #92]	; 0x5c
   14d38:	ldr	r8, [sp, #56]	; 0x38
   14d3c:	ldr	r9, [sp, #84]	; 0x54
   14d40:	b	14d90 <__assert_fail@plt+0x3d4c>
   14d44:	ldr	r4, [sp, #88]	; 0x58
   14d48:	mov	ip, r8
   14d4c:	ldr	fp, [sp, #92]	; 0x5c
   14d50:	ldr	r8, [sp, #56]	; 0x38
   14d54:	ldr	r9, [sp, #84]	; 0x54
   14d58:	mov	r5, #0
   14d5c:	b	14d90 <__assert_fail@plt+0x3d4c>
   14d60:	mov	r5, #0
   14d64:	b	14d90 <__assert_fail@plt+0x3d4c>
   14d68:	mov	r5, #0
   14d6c:	b	14d90 <__assert_fail@plt+0x3d4c>
   14d70:	mov	ip, r2
   14d74:	mov	r5, #0
   14d78:	b	14d90 <__assert_fail@plt+0x3d4c>
   14d7c:	ldr	r4, [sp, #88]	; 0x58
   14d80:	mov	ip, r8
   14d84:	ldr	fp, [sp, #92]	; 0x5c
   14d88:	ldr	r8, [sp, #56]	; 0x38
   14d8c:	ldr	r9, [sp, #84]	; 0x54
   14d90:	cmp	ip, #1
   14d94:	bls	14b20 <__assert_fail@plt+0x3adc>
   14d98:	add	lr, r6, ip
   14d9c:	ldr	r3, [sp, #48]	; 0x30
   14da0:	add	r1, r3, r6
   14da4:	mov	r3, #0
   14da8:	eor	r0, r5, #1
   14dac:	ldr	r2, [sp, #28]
   14db0:	and	r0, r0, r2
   14db4:	uxtb	r0, r0
   14db8:	str	r0, [sp, #56]	; 0x38
   14dbc:	mov	r7, #92	; 0x5c
   14dc0:	ldr	ip, [sp, #36]	; 0x24
   14dc4:	str	r5, [sp, #84]	; 0x54
   14dc8:	ldr	r2, [sp, #44]	; 0x2c
   14dcc:	b	14e3c <__assert_fail@plt+0x3df8>
   14dd0:	cmp	r2, #0
   14dd4:	beq	14de4 <__assert_fail@plt+0x3da0>
   14dd8:	cmp	r9, fp
   14ddc:	strbhi	r7, [r8, fp]
   14de0:	add	fp, fp, #1
   14de4:	add	r5, r6, #1
   14de8:	cmp	r5, lr
   14dec:	bcs	14ef8 <__assert_fail@plt+0x3eb4>
   14df0:	eor	r2, r3, #1
   14df4:	and	r2, r2, ip
   14df8:	ands	r2, r2, #255	; 0xff
   14dfc:	beq	14f14 <__assert_fail@plt+0x3ed0>
   14e00:	cmp	r9, fp
   14e04:	movhi	r2, #39	; 0x27
   14e08:	strbhi	r2, [r8, fp]
   14e0c:	add	r2, fp, #1
   14e10:	cmp	r9, r2
   14e14:	movhi	ip, #39	; 0x27
   14e18:	strbhi	ip, [r8, r2]
   14e1c:	add	fp, fp, #2
   14e20:	ldr	ip, [sp, #56]	; 0x38
   14e24:	mov	r2, ip
   14e28:	mov	r6, r5
   14e2c:	cmp	r9, fp
   14e30:	strbhi	r4, [r8, fp]
   14e34:	add	fp, fp, #1
   14e38:	ldrb	r4, [r1, #1]!
   14e3c:	cmp	r0, #0
   14e40:	beq	14dd0 <__assert_fail@plt+0x3d8c>
   14e44:	ldr	r3, [sp, #32]
   14e48:	cmp	r3, #0
   14e4c:	bne	150e0 <__assert_fail@plt+0x409c>
   14e50:	eor	r3, ip, #1
   14e54:	cmp	sl, #2
   14e58:	movne	r3, #0
   14e5c:	andeq	r3, r3, #1
   14e60:	cmp	r3, #0
   14e64:	beq	14e9c <__assert_fail@plt+0x3e58>
   14e68:	cmp	r9, fp
   14e6c:	movhi	ip, #39	; 0x27
   14e70:	strbhi	ip, [r8, fp]
   14e74:	add	ip, fp, #1
   14e78:	cmp	r9, ip
   14e7c:	movhi	r5, #36	; 0x24
   14e80:	strbhi	r5, [r8, ip]
   14e84:	add	ip, fp, #2
   14e88:	cmp	r9, ip
   14e8c:	movhi	r5, #39	; 0x27
   14e90:	strbhi	r5, [r8, ip]
   14e94:	add	fp, fp, #3
   14e98:	mov	ip, r3
   14e9c:	cmp	r9, fp
   14ea0:	strbhi	r7, [r8, fp]
   14ea4:	add	r3, fp, #1
   14ea8:	cmp	r9, r3
   14eac:	bls	14ebc <__assert_fail@plt+0x3e78>
   14eb0:	lsr	r5, r4, #6
   14eb4:	add	r5, r5, #48	; 0x30
   14eb8:	strb	r5, [r8, r3]
   14ebc:	add	r3, fp, #2
   14ec0:	cmp	r9, r3
   14ec4:	bls	14ed4 <__assert_fail@plt+0x3e90>
   14ec8:	ubfx	r5, r4, #3, #3
   14ecc:	add	r5, r5, #48	; 0x30
   14ed0:	strb	r5, [r8, r3]
   14ed4:	add	fp, fp, #3
   14ed8:	and	r4, r4, #7
   14edc:	add	r4, r4, #48	; 0x30
   14ee0:	add	r5, r6, #1
   14ee4:	cmp	r5, lr
   14ee8:	bcs	14f04 <__assert_fail@plt+0x3ec0>
   14eec:	ldr	r3, [sp, #56]	; 0x38
   14ef0:	mov	r6, r5
   14ef4:	b	14e2c <__assert_fail@plt+0x3de8>
   14ef8:	str	ip, [sp, #36]	; 0x24
   14efc:	ldr	r5, [sp, #84]	; 0x54
   14f00:	b	14930 <__assert_fail@plt+0x38ec>
   14f04:	str	ip, [sp, #36]	; 0x24
   14f08:	ldr	r5, [sp, #84]	; 0x54
   14f0c:	mov	r3, r0
   14f10:	b	14930 <__assert_fail@plt+0x38ec>
   14f14:	mov	r6, r5
   14f18:	b	14e2c <__assert_fail@plt+0x3de8>
   14f1c:	ldr	r3, [sp, #44]	; 0x2c
   14f20:	b	14584 <__assert_fail@plt+0x3540>
   14f24:	mov	r5, #0
   14f28:	mov	r3, r5
   14f2c:	mov	r4, #63	; 0x3f
   14f30:	b	14584 <__assert_fail@plt+0x3540>
   14f34:	mov	r5, #0
   14f38:	mov	r3, r5
   14f3c:	mov	r4, #63	; 0x3f
   14f40:	b	14584 <__assert_fail@plt+0x3540>
   14f44:	mov	r5, #0
   14f48:	mov	r3, r5
   14f4c:	b	14584 <__assert_fail@plt+0x3540>
   14f50:	mov	r5, #0
   14f54:	mov	r3, r5
   14f58:	b	14584 <__assert_fail@plt+0x3540>
   14f5c:	ldr	r5, [sp, #44]	; 0x2c
   14f60:	ldr	r3, [sp, #32]
   14f64:	b	14584 <__assert_fail@plt+0x3540>
   14f68:	ldr	r5, [sp, #44]	; 0x2c
   14f6c:	mov	r3, #0
   14f70:	str	r3, [sp, #44]	; 0x2c
   14f74:	b	14584 <__assert_fail@plt+0x3540>
   14f78:	mov	r4, r3
   14f7c:	mov	r5, #0
   14f80:	b	145dc <__assert_fail@plt+0x3598>
   14f84:	mov	r5, #0
   14f88:	mov	r4, #97	; 0x61
   14f8c:	b	145dc <__assert_fail@plt+0x3598>
   14f90:	mov	r5, #0
   14f94:	mov	r3, r5
   14f98:	mov	r4, #92	; 0x5c
   14f9c:	b	14930 <__assert_fail@plt+0x38ec>
   14fa0:	ldr	r3, [sp, #48]	; 0x30
   14fa4:	ldrb	r5, [r3, r6]
   14fa8:	adds	r5, r5, #0
   14fac:	movne	r5, #1
   14fb0:	b	14680 <__assert_fail@plt+0x363c>
   14fb4:	cmp	sl, #2
   14fb8:	movne	r3, #0
   14fbc:	moveq	r3, #1
   14fc0:	ldr	r1, [sp, #32]
   14fc4:	cmp	fp, #0
   14fc8:	andeq	r2, r3, r1
   14fcc:	movne	r2, #0
   14fd0:	cmp	r2, #0
   14fd4:	bne	150f4 <__assert_fail@plt+0x40b0>
   14fd8:	eor	r2, r1, #1
   14fdc:	uxtb	r2, r2
   14fe0:	and	r3, r3, r2
   14fe4:	ldr	r1, [sp, #68]	; 0x44
   14fe8:	ands	r3, r1, r3
   14fec:	beq	15080 <__assert_fail@plt+0x403c>
   14ff0:	ldr	r2, [sp, #40]	; 0x28
   14ff4:	cmp	r2, #0
   14ff8:	bne	15030 <__assert_fail@plt+0x3fec>
   14ffc:	ldr	r2, [sp, #72]	; 0x48
   15000:	adds	r2, r2, #0
   15004:	movne	r2, #1
   15008:	cmp	r9, #0
   1500c:	movne	r2, #0
   15010:	str	r2, [sp, #68]	; 0x44
   15014:	mov	sl, #2
   15018:	ldr	r1, [sp, #40]	; 0x28
   1501c:	str	r1, [sp, #32]
   15020:	cmp	r2, #0
   15024:	beq	15074 <__assert_fail@plt+0x4030>
   15028:	ldr	r9, [sp, #72]	; 0x48
   1502c:	b	13d88 <__assert_fail@plt+0x2d44>
   15030:	ldr	r3, [sp, #168]	; 0xa8
   15034:	str	r3, [sp, #16]
   15038:	ldr	r3, [sp, #164]	; 0xa4
   1503c:	str	r3, [sp, #12]
   15040:	ldr	r3, [sp, #160]	; 0xa0
   15044:	str	r3, [sp, #8]
   15048:	ldr	r3, [sp, #156]	; 0x9c
   1504c:	str	r3, [sp, #4]
   15050:	mov	r3, #5
   15054:	str	r3, [sp]
   15058:	ldr	r3, [sp, #24]
   1505c:	ldr	r2, [sp, #48]	; 0x30
   15060:	ldr	r1, [sp, #72]	; 0x48
   15064:	ldr	r0, [sp, #64]	; 0x40
   15068:	bl	13d10 <__assert_fail@plt+0x2ccc>
   1506c:	mov	fp, r0
   15070:	b	15190 <__assert_fail@plt+0x414c>
   15074:	mov	r8, r9
   15078:	mov	r2, r3
   1507c:	b	15084 <__assert_fail@plt+0x4040>
   15080:	mov	r8, r9
   15084:	ldr	r3, [sp, #60]	; 0x3c
   15088:	cmp	r3, #0
   1508c:	moveq	r2, #0
   15090:	andne	r2, r2, #1
   15094:	cmp	r2, #0
   15098:	beq	150c8 <__assert_fail@plt+0x4084>
   1509c:	mov	r2, r3
   150a0:	ldrb	r3, [r3]
   150a4:	cmp	r3, #0
   150a8:	beq	150c8 <__assert_fail@plt+0x4084>
   150ac:	ldr	r1, [sp, #64]	; 0x40
   150b0:	cmp	r8, fp
   150b4:	strbhi	r3, [r1, fp]
   150b8:	add	fp, fp, #1
   150bc:	ldrb	r3, [r2, #1]!
   150c0:	cmp	r3, #0
   150c4:	bne	150b0 <__assert_fail@plt+0x406c>
   150c8:	cmp	r8, fp
   150cc:	bls	15190 <__assert_fail@plt+0x414c>
   150d0:	mov	r3, #0
   150d4:	ldr	r2, [sp, #64]	; 0x40
   150d8:	strb	r3, [r2, fp]
   150dc:	b	15190 <__assert_fail@plt+0x414c>
   150e0:	mov	r8, r9
   150e4:	mov	r7, sl
   150e8:	ldr	r3, [sp, #32]
   150ec:	str	r3, [sp, #28]
   150f0:	b	15138 <__assert_fail@plt+0x40f4>
   150f4:	mov	r8, r9
   150f8:	mov	r7, #2
   150fc:	b	15138 <__assert_fail@plt+0x40f4>
   15100:	mov	r8, r9
   15104:	mov	r7, sl
   15108:	b	15138 <__assert_fail@plt+0x40f4>
   1510c:	mov	r8, r9
   15110:	mov	r7, sl
   15114:	b	15138 <__assert_fail@plt+0x40f4>
   15118:	mov	r8, r9
   1511c:	mov	r7, sl
   15120:	b	15138 <__assert_fail@plt+0x40f4>
   15124:	mov	r8, r9
   15128:	mov	r7, sl
   1512c:	b	15138 <__assert_fail@plt+0x40f4>
   15130:	mov	r8, r9
   15134:	mov	r7, sl
   15138:	ldr	r3, [sp, #28]
   1513c:	cmp	r7, #2
   15140:	movne	r3, #0
   15144:	andeq	r3, r3, #1
   15148:	cmp	r3, #0
   1514c:	movne	r7, #4
   15150:	ldr	r3, [sp, #168]	; 0xa8
   15154:	str	r3, [sp, #16]
   15158:	ldr	r3, [sp, #164]	; 0xa4
   1515c:	str	r3, [sp, #12]
   15160:	mov	r3, #0
   15164:	str	r3, [sp, #8]
   15168:	ldr	r3, [sp, #156]	; 0x9c
   1516c:	bic	r3, r3, #2
   15170:	str	r3, [sp, #4]
   15174:	str	r7, [sp]
   15178:	ldr	r3, [sp, #24]
   1517c:	ldr	r2, [sp, #48]	; 0x30
   15180:	mov	r1, r8
   15184:	ldr	r0, [sp, #64]	; 0x40
   15188:	bl	13d10 <__assert_fail@plt+0x2ccc>
   1518c:	mov	fp, r0
   15190:	mov	r0, fp
   15194:	add	sp, sp, #116	; 0x74
   15198:	ldrd	r4, [sp]
   1519c:	ldrd	r6, [sp, #8]
   151a0:	ldrd	r8, [sp, #16]
   151a4:	ldrd	sl, [sp, #24]
   151a8:	add	sp, sp, #32
   151ac:	pop	{pc}		; (ldr pc, [sp], #4)
   151b0:	mov	r8, r9
   151b4:	mov	r7, sl
   151b8:	b	15150 <__assert_fail@plt+0x410c>
   151bc:	add	fp, fp, #4
   151c0:	str	r3, [sp, #36]	; 0x24
   151c4:	mov	r5, #0
   151c8:	mov	r4, #48	; 0x30
   151cc:	b	14584 <__assert_fail@plt+0x3540>
   151d0:	mov	r3, #1
   151d4:	str	r3, [sp, #32]
   151d8:	str	r3, [sp, #28]
   151dc:	str	r3, [sp, #52]	; 0x34
   151e0:	movw	r3, #35972	; 0x8c84
   151e4:	movt	r3, #1
   151e8:	str	r3, [sp, #60]	; 0x3c
   151ec:	mov	fp, #0
   151f0:	mov	sl, #5
   151f4:	b	13de8 <__assert_fail@plt+0x2da4>
   151f8:	ldr	r3, [sp, #48]	; 0x30
   151fc:	ldrb	r4, [r3, r6]
   15200:	cmp	r4, #126	; 0x7e
   15204:	ldrls	pc, [pc, r4, lsl #2]
   15208:	b	14af4 <__assert_fail@plt+0x3ab0>
   1520c:	andeq	r4, r1, ip, ror r2
   15210:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15214:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15218:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1521c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15220:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15224:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15228:	andeq	r4, r1, r4, lsl #31
   1522c:	andeq	r4, r1, r0, lsr #10
   15230:	andeq	r4, r1, r4, asr #17
   15234:	andeq	r4, r1, r0, lsl #19
   15238:	ldrdeq	r4, [r1], -r8
   1523c:	andeq	r4, r1, r4, lsr r5
   15240:	andeq	r4, r1, r8, asr #10
   15244:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15248:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1524c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15250:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15254:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15258:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1525c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15260:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15264:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15268:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1526c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15270:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15274:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15278:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1527c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15280:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15284:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15288:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1528c:	andeq	r4, r1, r8, lsl #20
   15290:	andeq	r4, r1, r4, asr #20
   15294:	andeq	r4, r1, r4, asr #20
   15298:	strdeq	r4, [r1], -ip
   1529c:	andeq	r4, r1, r4, asr #20
   152a0:	andeq	r4, r1, r8, ror #30
   152a4:	andeq	r4, r1, r4, asr #20
   152a8:	andeq	r4, r1, r4, asr sl
   152ac:	andeq	r4, r1, r4, asr #20
   152b0:	andeq	r4, r1, r4, asr #20
   152b4:	andeq	r4, r1, r4, asr #20
   152b8:	andeq	r4, r1, r8, ror #30
   152bc:	andeq	r4, r1, r8, ror #30
   152c0:	andeq	r4, r1, r8, ror #30
   152c4:	andeq	r4, r1, r8, ror #30
   152c8:	andeq	r4, r1, r8, ror #30
   152cc:	andeq	r4, r1, r8, ror #30
   152d0:	andeq	r4, r1, r8, ror #30
   152d4:	andeq	r4, r1, r8, ror #30
   152d8:	andeq	r4, r1, r8, ror #30
   152dc:	andeq	r4, r1, r8, ror #30
   152e0:	andeq	r4, r1, r8, ror #30
   152e4:	andeq	r4, r1, r8, ror #30
   152e8:	andeq	r4, r1, r8, ror #30
   152ec:	andeq	r4, r1, r8, ror #30
   152f0:	andeq	r4, r1, r8, ror #30
   152f4:	andeq	r4, r1, r8, ror #30
   152f8:	andeq	r4, r1, r4, asr #20
   152fc:	andeq	r4, r1, r4, asr #20
   15300:	andeq	r4, r1, r4, asr #20
   15304:	andeq	r4, r1, r4, asr #20
   15308:			; <UNDEFINED> instruction: 0x000143b4
   1530c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15310:	andeq	r4, r1, r8, ror #30
   15314:	andeq	r4, r1, r8, ror #30
   15318:	andeq	r4, r1, r8, ror #30
   1531c:	andeq	r4, r1, r8, ror #30
   15320:	andeq	r4, r1, r8, ror #30
   15324:	andeq	r4, r1, r8, ror #30
   15328:	andeq	r4, r1, r8, ror #30
   1532c:	andeq	r4, r1, r8, ror #30
   15330:	andeq	r4, r1, r8, ror #30
   15334:	andeq	r4, r1, r8, ror #30
   15338:	andeq	r4, r1, r8, ror #30
   1533c:	andeq	r4, r1, r8, ror #30
   15340:	andeq	r4, r1, r8, ror #30
   15344:	andeq	r4, r1, r8, ror #30
   15348:	andeq	r4, r1, r8, ror #30
   1534c:	andeq	r4, r1, r8, ror #30
   15350:	andeq	r4, r1, r8, ror #30
   15354:	andeq	r4, r1, r8, ror #30
   15358:	andeq	r4, r1, r8, ror #30
   1535c:	andeq	r4, r1, r8, ror #30
   15360:	andeq	r4, r1, r8, ror #30
   15364:	andeq	r4, r1, r8, ror #30
   15368:	andeq	r4, r1, r8, ror #30
   1536c:	andeq	r4, r1, r8, ror #30
   15370:	andeq	r4, r1, r8, ror #30
   15374:	andeq	r4, r1, r8, ror #30
   15378:	andeq	r4, r1, r4, asr #20
   1537c:	andeq	r4, r1, ip, ror #17
   15380:	andeq	r4, r1, r8, ror #30
   15384:	andeq	r4, r1, r4, asr #20
   15388:	andeq	r4, r1, r8, ror #30
   1538c:	andeq	r4, r1, r4, asr #20
   15390:	andeq	r4, r1, r8, ror #30
   15394:	andeq	r4, r1, r8, ror #30
   15398:	andeq	r4, r1, r8, ror #30
   1539c:	andeq	r4, r1, r8, ror #30
   153a0:	andeq	r4, r1, r8, ror #30
   153a4:	andeq	r4, r1, r8, ror #30
   153a8:	andeq	r4, r1, r8, ror #30
   153ac:	andeq	r4, r1, r8, ror #30
   153b0:	andeq	r4, r1, r8, ror #30
   153b4:	andeq	r4, r1, r8, ror #30
   153b8:	andeq	r4, r1, r8, ror #30
   153bc:	andeq	r4, r1, r8, ror #30
   153c0:	andeq	r4, r1, r8, ror #30
   153c4:	andeq	r4, r1, r8, ror #30
   153c8:	andeq	r4, r1, r8, ror #30
   153cc:	andeq	r4, r1, r8, ror #30
   153d0:	andeq	r4, r1, r8, ror #30
   153d4:	andeq	r4, r1, r8, ror #30
   153d8:	andeq	r4, r1, r8, ror #30
   153dc:	andeq	r4, r1, r8, ror #30
   153e0:	andeq	r4, r1, r8, ror #30
   153e4:	andeq	r4, r1, r8, ror #30
   153e8:	andeq	r4, r1, r8, ror #30
   153ec:	andeq	r4, r1, r8, ror #30
   153f0:	andeq	r4, r1, r8, ror #30
   153f4:	andeq	r4, r1, r8, ror #30
   153f8:	andeq	r4, r1, ip, lsr #19
   153fc:	andeq	r4, r1, r4, asr #20
   15400:	andeq	r4, r1, ip, lsr #19
   15404:	strdeq	r4, [r1], -ip
   15408:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1540c:	strd	r6, [sp, #8]
   15410:	strd	r8, [sp, #16]
   15414:	strd	sl, [sp, #24]
   15418:	str	lr, [sp, #32]
   1541c:	sub	sp, sp, #52	; 0x34
   15420:	mov	r5, r0
   15424:	str	r1, [sp, #24]
   15428:	str	r2, [sp, #28]
   1542c:	mov	r4, r3
   15430:	bl	10f48 <__errno_location@plt>
   15434:	str	r0, [sp, #32]
   15438:	ldr	r3, [r0]
   1543c:	str	r3, [sp, #36]	; 0x24
   15440:	movw	r3, #41244	; 0xa11c
   15444:	movt	r3, #2
   15448:	ldr	r6, [r3]
   1544c:	cmn	r5, #-2147483647	; 0x80000001
   15450:	movne	r3, #0
   15454:	moveq	r3, #1
   15458:	orrs	r3, r3, r5, lsr #31
   1545c:	bne	155c0 <__assert_fail@plt+0x457c>
   15460:	movw	r3, #41244	; 0xa11c
   15464:	movt	r3, #2
   15468:	ldr	r2, [r3, #4]
   1546c:	cmp	r2, r5
   15470:	bgt	154e0 <__assert_fail@plt+0x449c>
   15474:	str	r2, [sp, #44]	; 0x2c
   15478:	add	r3, r3, #8
   1547c:	cmp	r6, r3
   15480:	beq	155c4 <__assert_fail@plt+0x4580>
   15484:	sub	r2, r5, r2
   15488:	mov	r3, #8
   1548c:	str	r3, [sp]
   15490:	mvn	r3, #-2147483648	; 0x80000000
   15494:	add	r2, r2, #1
   15498:	add	r1, sp, #44	; 0x2c
   1549c:	mov	r0, r6
   154a0:	bl	166a8 <__assert_fail@plt+0x5664>
   154a4:	mov	r6, r0
   154a8:	movw	r3, #41244	; 0xa11c
   154ac:	movt	r3, #2
   154b0:	str	r0, [r3]
   154b4:	movw	r7, #41244	; 0xa11c
   154b8:	movt	r7, #2
   154bc:	ldr	r0, [r7, #4]
   154c0:	ldr	r2, [sp, #44]	; 0x2c
   154c4:	sub	r2, r2, r0
   154c8:	lsl	r2, r2, #3
   154cc:	mov	r1, #0
   154d0:	add	r0, r6, r0, lsl #3
   154d4:	bl	10f60 <memset@plt>
   154d8:	ldr	r3, [sp, #44]	; 0x2c
   154dc:	str	r3, [r7, #4]
   154e0:	add	fp, r6, r5, lsl #3
   154e4:	ldr	r8, [r6, r5, lsl #3]
   154e8:	ldr	r7, [fp, #4]
   154ec:	ldr	r3, [r4, #4]
   154f0:	orr	r9, r3, #1
   154f4:	add	sl, r4, #8
   154f8:	ldr	r3, [r4, #44]	; 0x2c
   154fc:	str	r3, [sp, #16]
   15500:	ldr	r3, [r4, #40]	; 0x28
   15504:	str	r3, [sp, #12]
   15508:	str	sl, [sp, #8]
   1550c:	str	r9, [sp, #4]
   15510:	ldr	r3, [r4]
   15514:	str	r3, [sp]
   15518:	ldr	r3, [sp, #28]
   1551c:	ldr	r2, [sp, #24]
   15520:	mov	r1, r8
   15524:	mov	r0, r7
   15528:	bl	13d10 <__assert_fail@plt+0x2ccc>
   1552c:	cmp	r8, r0
   15530:	bhi	15594 <__assert_fail@plt+0x4550>
   15534:	add	r8, r0, #1
   15538:	str	r8, [r6, r5, lsl #3]
   1553c:	movw	r3, #41476	; 0xa204
   15540:	movt	r3, #2
   15544:	cmp	r7, r3
   15548:	beq	15554 <__assert_fail@plt+0x4510>
   1554c:	mov	r0, r7
   15550:	bl	1374c <__assert_fail@plt+0x2708>
   15554:	mov	r0, r8
   15558:	bl	164a4 <__assert_fail@plt+0x5460>
   1555c:	mov	r7, r0
   15560:	str	r0, [fp, #4]
   15564:	ldr	r3, [r4, #44]	; 0x2c
   15568:	str	r3, [sp, #16]
   1556c:	ldr	r3, [r4, #40]	; 0x28
   15570:	str	r3, [sp, #12]
   15574:	str	sl, [sp, #8]
   15578:	str	r9, [sp, #4]
   1557c:	ldr	r3, [r4]
   15580:	str	r3, [sp]
   15584:	ldr	r3, [sp, #28]
   15588:	ldr	r2, [sp, #24]
   1558c:	mov	r1, r8
   15590:	bl	13d10 <__assert_fail@plt+0x2ccc>
   15594:	ldr	r3, [sp, #32]
   15598:	ldr	r2, [sp, #36]	; 0x24
   1559c:	str	r2, [r3]
   155a0:	mov	r0, r7
   155a4:	add	sp, sp, #52	; 0x34
   155a8:	ldrd	r4, [sp]
   155ac:	ldrd	r6, [sp, #8]
   155b0:	ldrd	r8, [sp, #16]
   155b4:	ldrd	sl, [sp, #24]
   155b8:	add	sp, sp, #32
   155bc:	pop	{pc}		; (ldr pc, [sp], #4)
   155c0:	bl	1102c <abort@plt>
   155c4:	sub	r2, r5, r2
   155c8:	mov	r3, #8
   155cc:	str	r3, [sp]
   155d0:	mvn	r3, #-2147483648	; 0x80000000
   155d4:	add	r2, r2, #1
   155d8:	add	r1, sp, #44	; 0x2c
   155dc:	mov	r0, #0
   155e0:	bl	166a8 <__assert_fail@plt+0x5664>
   155e4:	mov	r6, r0
   155e8:	movw	r3, #41244	; 0xa11c
   155ec:	movt	r3, #2
   155f0:	str	r0, [r3]
   155f4:	ldrd	r2, [r3, #8]
   155f8:	strd	r2, [r0]
   155fc:	b	154b4 <__assert_fail@plt+0x4470>
   15600:	strd	r4, [sp, #-16]!
   15604:	str	r6, [sp, #8]
   15608:	str	lr, [sp, #12]
   1560c:	mov	r4, r0
   15610:	bl	10f48 <__errno_location@plt>
   15614:	mov	r5, r0
   15618:	ldr	r6, [r0]
   1561c:	cmp	r4, #0
   15620:	ldr	r3, [pc, #32]	; 15648 <__assert_fail@plt+0x4604>
   15624:	moveq	r4, r3
   15628:	mov	r1, #48	; 0x30
   1562c:	mov	r0, r4
   15630:	bl	16818 <__assert_fail@plt+0x57d4>
   15634:	str	r6, [r5]
   15638:	ldrd	r4, [sp]
   1563c:	ldr	r6, [sp, #8]
   15640:	add	sp, sp, #12
   15644:	pop	{pc}		; (ldr pc, [sp], #4)
   15648:	andeq	sl, r2, r4, lsl #6
   1564c:	subs	r3, r0, #0
   15650:	ldr	r2, [pc, #8]	; 15660 <__assert_fail@plt+0x461c>
   15654:	moveq	r3, r2
   15658:	ldr	r0, [r3]
   1565c:	bx	lr
   15660:	andeq	sl, r2, r4, lsl #6
   15664:	subs	r3, r0, #0
   15668:	ldr	r2, [pc, #8]	; 15678 <__assert_fail@plt+0x4634>
   1566c:	moveq	r3, r2
   15670:	str	r1, [r3]
   15674:	bx	lr
   15678:	andeq	sl, r2, r4, lsl #6
   1567c:	push	{lr}		; (str lr, [sp, #-4]!)
   15680:	subs	r3, r0, #0
   15684:	ldr	r0, [pc, #44]	; 156b8 <__assert_fail@plt+0x4674>
   15688:	moveq	r3, r0
   1568c:	add	r3, r3, #8
   15690:	lsr	lr, r1, #5
   15694:	and	r1, r1, #31
   15698:	ldr	ip, [r3, lr, lsl #2]
   1569c:	lsr	r0, ip, r1
   156a0:	eor	r2, r2, r0
   156a4:	and	r2, r2, #1
   156a8:	eor	r1, ip, r2, lsl r1
   156ac:	str	r1, [r3, lr, lsl #2]
   156b0:	and	r0, r0, #1
   156b4:	pop	{pc}		; (ldr pc, [sp], #4)
   156b8:	andeq	sl, r2, r4, lsl #6
   156bc:	subs	r3, r0, #0
   156c0:	ldr	r2, [pc, #12]	; 156d4 <__assert_fail@plt+0x4690>
   156c4:	moveq	r3, r2
   156c8:	ldr	r0, [r3, #4]
   156cc:	str	r1, [r3, #4]
   156d0:	bx	lr
   156d4:	andeq	sl, r2, r4, lsl #6
   156d8:	subs	r3, r0, #0
   156dc:	ldr	r0, [pc, #44]	; 15710 <__assert_fail@plt+0x46cc>
   156e0:	moveq	r3, r0
   156e4:	mov	r0, #10
   156e8:	str	r0, [r3]
   156ec:	cmp	r2, #0
   156f0:	cmpne	r1, #0
   156f4:	beq	15704 <__assert_fail@plt+0x46c0>
   156f8:	str	r1, [r3, #40]	; 0x28
   156fc:	str	r2, [r3, #44]	; 0x2c
   15700:	bx	lr
   15704:	str	r4, [sp, #-8]!
   15708:	str	lr, [sp, #4]
   1570c:	bl	1102c <abort@plt>
   15710:	andeq	sl, r2, r4, lsl #6
   15714:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15718:	strd	r6, [sp, #8]
   1571c:	strd	r8, [sp, #16]
   15720:	str	sl, [sp, #24]
   15724:	str	lr, [sp, #28]
   15728:	sub	sp, sp, #24
   1572c:	mov	r7, r0
   15730:	mov	r8, r1
   15734:	mov	r9, r2
   15738:	mov	sl, r3
   1573c:	ldr	r4, [sp, #56]	; 0x38
   15740:	cmp	r4, #0
   15744:	ldr	r3, [pc, #104]	; 157b4 <__assert_fail@plt+0x4770>
   15748:	moveq	r4, r3
   1574c:	bl	10f48 <__errno_location@plt>
   15750:	mov	r5, r0
   15754:	ldr	r6, [r0]
   15758:	ldr	r3, [r4, #44]	; 0x2c
   1575c:	str	r3, [sp, #16]
   15760:	ldr	r3, [r4, #40]	; 0x28
   15764:	str	r3, [sp, #12]
   15768:	add	r3, r4, #8
   1576c:	str	r3, [sp, #8]
   15770:	ldr	r3, [r4, #4]
   15774:	str	r3, [sp, #4]
   15778:	ldr	r3, [r4]
   1577c:	str	r3, [sp]
   15780:	mov	r3, sl
   15784:	mov	r2, r9
   15788:	mov	r1, r8
   1578c:	mov	r0, r7
   15790:	bl	13d10 <__assert_fail@plt+0x2ccc>
   15794:	str	r6, [r5]
   15798:	add	sp, sp, #24
   1579c:	ldrd	r4, [sp]
   157a0:	ldrd	r6, [sp, #8]
   157a4:	ldrd	r8, [sp, #16]
   157a8:	ldr	sl, [sp, #24]
   157ac:	add	sp, sp, #28
   157b0:	pop	{pc}		; (ldr pc, [sp], #4)
   157b4:	andeq	sl, r2, r4, lsl #6
   157b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157bc:	strd	r6, [sp, #8]
   157c0:	strd	r8, [sp, #16]
   157c4:	strd	sl, [sp, #24]
   157c8:	str	lr, [sp, #32]
   157cc:	sub	sp, sp, #44	; 0x2c
   157d0:	mov	r8, r0
   157d4:	mov	sl, r1
   157d8:	mov	r6, r2
   157dc:	subs	r4, r3, #0
   157e0:	ldr	r3, [pc, #200]	; 158b0 <__assert_fail@plt+0x486c>
   157e4:	moveq	r4, r3
   157e8:	bl	10f48 <__errno_location@plt>
   157ec:	mov	r7, r0
   157f0:	ldr	fp, [r0]
   157f4:	ldr	r5, [r4, #4]
   157f8:	cmp	r6, #0
   157fc:	orreq	r5, r5, #1
   15800:	add	r9, r4, #8
   15804:	ldr	r3, [r4, #44]	; 0x2c
   15808:	str	r3, [sp, #16]
   1580c:	ldr	r3, [r4, #40]	; 0x28
   15810:	str	r3, [sp, #12]
   15814:	str	r9, [sp, #8]
   15818:	str	r5, [sp, #4]
   1581c:	ldr	r3, [r4]
   15820:	str	r3, [sp]
   15824:	str	sl, [sp, #36]	; 0x24
   15828:	mov	r3, sl
   1582c:	str	r8, [sp, #32]
   15830:	mov	r2, r8
   15834:	mov	r1, #0
   15838:	mov	r0, r1
   1583c:	bl	13d10 <__assert_fail@plt+0x2ccc>
   15840:	mov	sl, r0
   15844:	add	r8, r0, #1
   15848:	mov	r0, r8
   1584c:	bl	164a4 <__assert_fail@plt+0x5460>
   15850:	str	r0, [sp, #28]
   15854:	ldr	r3, [r4, #44]	; 0x2c
   15858:	str	r3, [sp, #16]
   1585c:	ldr	r3, [r4, #40]	; 0x28
   15860:	str	r3, [sp, #12]
   15864:	str	r9, [sp, #8]
   15868:	str	r5, [sp, #4]
   1586c:	ldr	r3, [r4]
   15870:	str	r3, [sp]
   15874:	ldr	r3, [sp, #36]	; 0x24
   15878:	ldr	r2, [sp, #32]
   1587c:	mov	r1, r8
   15880:	bl	13d10 <__assert_fail@plt+0x2ccc>
   15884:	str	fp, [r7]
   15888:	cmp	r6, #0
   1588c:	strne	sl, [r6]
   15890:	ldr	r0, [sp, #28]
   15894:	add	sp, sp, #44	; 0x2c
   15898:	ldrd	r4, [sp]
   1589c:	ldrd	r6, [sp, #8]
   158a0:	ldrd	r8, [sp, #16]
   158a4:	ldrd	sl, [sp, #24]
   158a8:	add	sp, sp, #32
   158ac:	pop	{pc}		; (ldr pc, [sp], #4)
   158b0:	andeq	sl, r2, r4, lsl #6
   158b4:	str	r4, [sp, #-8]!
   158b8:	str	lr, [sp, #4]
   158bc:	mov	r3, r2
   158c0:	mov	r2, #0
   158c4:	bl	157b8 <__assert_fail@plt+0x4774>
   158c8:	ldr	r4, [sp]
   158cc:	add	sp, sp, #4
   158d0:	pop	{pc}		; (ldr pc, [sp], #4)
   158d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   158d8:	strd	r6, [sp, #8]
   158dc:	str	r8, [sp, #16]
   158e0:	str	lr, [sp, #20]
   158e4:	movw	r3, #41244	; 0xa11c
   158e8:	movt	r3, #2
   158ec:	ldr	r7, [r3]
   158f0:	ldr	r3, [r3, #4]
   158f4:	cmp	r3, #1
   158f8:	ble	15924 <__assert_fail@plt+0x48e0>
   158fc:	mov	r4, #1
   15900:	add	r6, r7, #4
   15904:	movw	r5, #41244	; 0xa11c
   15908:	movt	r5, #2
   1590c:	ldr	r0, [r6, r4, lsl #3]
   15910:	bl	1374c <__assert_fail@plt+0x2708>
   15914:	add	r4, r4, #1
   15918:	ldr	r3, [r5, #4]
   1591c:	cmp	r3, r4
   15920:	bgt	1590c <__assert_fail@plt+0x48c8>
   15924:	ldr	r0, [r7, #4]
   15928:	movw	r3, #41476	; 0xa204
   1592c:	movt	r3, #2
   15930:	cmp	r0, r3
   15934:	beq	15958 <__assert_fail@plt+0x4914>
   15938:	bl	1374c <__assert_fail@plt+0x2708>
   1593c:	movw	r3, #41244	; 0xa11c
   15940:	movt	r3, #2
   15944:	mov	r2, #256	; 0x100
   15948:	str	r2, [r3, #8]
   1594c:	movw	r2, #41476	; 0xa204
   15950:	movt	r2, #2
   15954:	str	r2, [r3, #12]
   15958:	ldr	r3, [pc, #64]	; 159a0 <__assert_fail@plt+0x495c>
   1595c:	cmp	r7, r3
   15960:	beq	1597c <__assert_fail@plt+0x4938>
   15964:	mov	r0, r7
   15968:	bl	1374c <__assert_fail@plt+0x2708>
   1596c:	movw	r3, #41244	; 0xa11c
   15970:	movt	r3, #2
   15974:	add	r2, r3, #8
   15978:	str	r2, [r3]
   1597c:	movw	r3, #41244	; 0xa11c
   15980:	movt	r3, #2
   15984:	mov	r2, #1
   15988:	str	r2, [r3, #4]
   1598c:	ldrd	r4, [sp]
   15990:	ldrd	r6, [sp, #8]
   15994:	ldr	r8, [sp, #16]
   15998:	add	sp, sp, #20
   1599c:	pop	{pc}		; (ldr pc, [sp], #4)
   159a0:	andeq	sl, r2, r4, lsr #2
   159a4:	str	r4, [sp, #-8]!
   159a8:	str	lr, [sp, #4]
   159ac:	ldr	r3, [pc, #16]	; 159c4 <__assert_fail@plt+0x4980>
   159b0:	mvn	r2, #0
   159b4:	bl	15408 <__assert_fail@plt+0x43c4>
   159b8:	ldr	r4, [sp]
   159bc:	add	sp, sp, #4
   159c0:	pop	{pc}		; (ldr pc, [sp], #4)
   159c4:	andeq	sl, r2, r4, lsl #6
   159c8:	str	r4, [sp, #-8]!
   159cc:	str	lr, [sp, #4]
   159d0:	ldr	r3, [pc, #12]	; 159e4 <__assert_fail@plt+0x49a0>
   159d4:	bl	15408 <__assert_fail@plt+0x43c4>
   159d8:	ldr	r4, [sp]
   159dc:	add	sp, sp, #4
   159e0:	pop	{pc}		; (ldr pc, [sp], #4)
   159e4:	andeq	sl, r2, r4, lsl #6
   159e8:	str	r4, [sp, #-8]!
   159ec:	str	lr, [sp, #4]
   159f0:	mov	r1, r0
   159f4:	mov	r0, #0
   159f8:	bl	159a4 <__assert_fail@plt+0x4960>
   159fc:	ldr	r4, [sp]
   15a00:	add	sp, sp, #4
   15a04:	pop	{pc}		; (ldr pc, [sp], #4)
   15a08:	str	r4, [sp, #-8]!
   15a0c:	str	lr, [sp, #4]
   15a10:	mov	r2, r1
   15a14:	mov	r1, r0
   15a18:	mov	r0, #0
   15a1c:	bl	159c8 <__assert_fail@plt+0x4984>
   15a20:	ldr	r4, [sp]
   15a24:	add	sp, sp, #4
   15a28:	pop	{pc}		; (ldr pc, [sp], #4)
   15a2c:	strd	r4, [sp, #-12]!
   15a30:	str	lr, [sp, #8]
   15a34:	sub	sp, sp, #52	; 0x34
   15a38:	mov	r4, r0
   15a3c:	mov	r5, r2
   15a40:	mov	r0, sp
   15a44:	bl	13b7c <__assert_fail@plt+0x2b38>
   15a48:	mov	r3, sp
   15a4c:	mvn	r2, #0
   15a50:	mov	r1, r5
   15a54:	mov	r0, r4
   15a58:	bl	15408 <__assert_fail@plt+0x43c4>
   15a5c:	add	sp, sp, #52	; 0x34
   15a60:	ldrd	r4, [sp]
   15a64:	add	sp, sp, #8
   15a68:	pop	{pc}		; (ldr pc, [sp], #4)
   15a6c:	strd	r4, [sp, #-16]!
   15a70:	str	r6, [sp, #8]
   15a74:	str	lr, [sp, #12]
   15a78:	sub	sp, sp, #48	; 0x30
   15a7c:	mov	r4, r0
   15a80:	mov	r5, r2
   15a84:	mov	r6, r3
   15a88:	mov	r0, sp
   15a8c:	bl	13b7c <__assert_fail@plt+0x2b38>
   15a90:	mov	r3, sp
   15a94:	mov	r2, r6
   15a98:	mov	r1, r5
   15a9c:	mov	r0, r4
   15aa0:	bl	15408 <__assert_fail@plt+0x43c4>
   15aa4:	add	sp, sp, #48	; 0x30
   15aa8:	ldrd	r4, [sp]
   15aac:	ldr	r6, [sp, #8]
   15ab0:	add	sp, sp, #12
   15ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab8:	str	r4, [sp, #-8]!
   15abc:	str	lr, [sp, #4]
   15ac0:	mov	r2, r1
   15ac4:	mov	r1, r0
   15ac8:	mov	r0, #0
   15acc:	bl	15a2c <__assert_fail@plt+0x49e8>
   15ad0:	ldr	r4, [sp]
   15ad4:	add	sp, sp, #4
   15ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   15adc:	str	r4, [sp, #-8]!
   15ae0:	str	lr, [sp, #4]
   15ae4:	mov	r3, r2
   15ae8:	mov	r2, r1
   15aec:	mov	r1, r0
   15af0:	mov	r0, #0
   15af4:	bl	15a6c <__assert_fail@plt+0x4a28>
   15af8:	ldr	r4, [sp]
   15afc:	add	sp, sp, #4
   15b00:	pop	{pc}		; (ldr pc, [sp], #4)
   15b04:	strd	r4, [sp, #-12]!
   15b08:	str	lr, [sp, #8]
   15b0c:	sub	sp, sp, #52	; 0x34
   15b10:	mov	r4, r0
   15b14:	mov	r5, r1
   15b18:	mov	r1, r2
   15b1c:	ldr	r0, [pc, #92]	; 15b80 <__assert_fail@plt+0x4b3c>
   15b20:	ldrd	r2, [r0]
   15b24:	strd	r2, [sp]
   15b28:	ldrd	r2, [r0, #8]
   15b2c:	strd	r2, [sp, #8]
   15b30:	ldrd	r2, [r0, #16]
   15b34:	strd	r2, [sp, #16]
   15b38:	ldrd	r2, [r0, #24]
   15b3c:	strd	r2, [sp, #24]
   15b40:	ldrd	r2, [r0, #32]
   15b44:	strd	r2, [sp, #32]
   15b48:	ldrd	r2, [r0, #40]	; 0x28
   15b4c:	strd	r2, [sp, #40]	; 0x28
   15b50:	mov	r2, #1
   15b54:	mov	r0, sp
   15b58:	bl	1567c <__assert_fail@plt+0x4638>
   15b5c:	mov	r3, sp
   15b60:	mov	r2, r5
   15b64:	mov	r1, r4
   15b68:	mov	r0, #0
   15b6c:	bl	15408 <__assert_fail@plt+0x43c4>
   15b70:	add	sp, sp, #52	; 0x34
   15b74:	ldrd	r4, [sp]
   15b78:	add	sp, sp, #8
   15b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b80:	andeq	sl, r2, r4, lsl #6
   15b84:	str	r4, [sp, #-8]!
   15b88:	str	lr, [sp, #4]
   15b8c:	mov	r2, r1
   15b90:	mvn	r1, #0
   15b94:	bl	15b04 <__assert_fail@plt+0x4ac0>
   15b98:	ldr	r4, [sp]
   15b9c:	add	sp, sp, #4
   15ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ba4:	str	r4, [sp, #-8]!
   15ba8:	str	lr, [sp, #4]
   15bac:	mov	r1, #58	; 0x3a
   15bb0:	bl	15b84 <__assert_fail@plt+0x4b40>
   15bb4:	ldr	r4, [sp]
   15bb8:	add	sp, sp, #4
   15bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc0:	str	r4, [sp, #-8]!
   15bc4:	str	lr, [sp, #4]
   15bc8:	mov	r2, #58	; 0x3a
   15bcc:	bl	15b04 <__assert_fail@plt+0x4ac0>
   15bd0:	ldr	r4, [sp]
   15bd4:	add	sp, sp, #4
   15bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bdc:	strd	r4, [sp, #-12]!
   15be0:	str	lr, [sp, #8]
   15be4:	sub	sp, sp, #100	; 0x64
   15be8:	mov	r4, r0
   15bec:	mov	r5, r2
   15bf0:	mov	r0, sp
   15bf4:	bl	13b7c <__assert_fail@plt+0x2b38>
   15bf8:	ldrd	r2, [sp]
   15bfc:	strd	r2, [sp, #48]	; 0x30
   15c00:	ldrd	r2, [sp, #8]
   15c04:	strd	r2, [sp, #56]	; 0x38
   15c08:	ldrd	r2, [sp, #16]
   15c0c:	strd	r2, [sp, #64]	; 0x40
   15c10:	ldrd	r2, [sp, #24]
   15c14:	strd	r2, [sp, #72]	; 0x48
   15c18:	ldrd	r2, [sp, #32]
   15c1c:	strd	r2, [sp, #80]	; 0x50
   15c20:	ldrd	r2, [sp, #40]	; 0x28
   15c24:	strd	r2, [sp, #88]	; 0x58
   15c28:	mov	r2, #1
   15c2c:	mov	r1, #58	; 0x3a
   15c30:	add	r0, sp, #48	; 0x30
   15c34:	bl	1567c <__assert_fail@plt+0x4638>
   15c38:	add	r3, sp, #48	; 0x30
   15c3c:	mvn	r2, #0
   15c40:	mov	r1, r5
   15c44:	mov	r0, r4
   15c48:	bl	15408 <__assert_fail@plt+0x43c4>
   15c4c:	add	sp, sp, #100	; 0x64
   15c50:	ldrd	r4, [sp]
   15c54:	add	sp, sp, #8
   15c58:	pop	{pc}		; (ldr pc, [sp], #4)
   15c5c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15c60:	strd	r6, [sp, #8]
   15c64:	str	lr, [sp, #16]
   15c68:	sub	sp, sp, #52	; 0x34
   15c6c:	mov	r4, r0
   15c70:	mov	r5, r3
   15c74:	ldr	r3, [pc, #92]	; 15cd8 <__assert_fail@plt+0x4c94>
   15c78:	ldrd	r6, [r3]
   15c7c:	strd	r6, [sp]
   15c80:	ldrd	r6, [r3, #8]
   15c84:	strd	r6, [sp, #8]
   15c88:	ldrd	r6, [r3, #16]
   15c8c:	strd	r6, [sp, #16]
   15c90:	ldrd	r6, [r3, #24]
   15c94:	strd	r6, [sp, #24]
   15c98:	ldrd	r6, [r3, #32]
   15c9c:	strd	r6, [sp, #32]
   15ca0:	ldrd	r6, [r3, #40]	; 0x28
   15ca4:	strd	r6, [sp, #40]	; 0x28
   15ca8:	mov	r0, sp
   15cac:	bl	156d8 <__assert_fail@plt+0x4694>
   15cb0:	mov	r3, sp
   15cb4:	ldr	r2, [sp, #72]	; 0x48
   15cb8:	mov	r1, r5
   15cbc:	mov	r0, r4
   15cc0:	bl	15408 <__assert_fail@plt+0x43c4>
   15cc4:	add	sp, sp, #52	; 0x34
   15cc8:	ldrd	r4, [sp]
   15ccc:	ldrd	r6, [sp, #8]
   15cd0:	add	sp, sp, #16
   15cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd8:	andeq	sl, r2, r4, lsl #6
   15cdc:	push	{lr}		; (str lr, [sp, #-4]!)
   15ce0:	sub	sp, sp, #12
   15ce4:	mvn	ip, #0
   15ce8:	str	ip, [sp]
   15cec:	bl	15c5c <__assert_fail@plt+0x4c18>
   15cf0:	add	sp, sp, #12
   15cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cf8:	str	r4, [sp, #-8]!
   15cfc:	str	lr, [sp, #4]
   15d00:	mov	r3, r2
   15d04:	mov	r2, r1
   15d08:	mov	r1, r0
   15d0c:	mov	r0, #0
   15d10:	bl	15cdc <__assert_fail@plt+0x4c98>
   15d14:	ldr	r4, [sp]
   15d18:	add	sp, sp, #4
   15d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d20:	push	{lr}		; (str lr, [sp, #-4]!)
   15d24:	sub	sp, sp, #12
   15d28:	str	r3, [sp]
   15d2c:	mov	r3, r2
   15d30:	mov	r2, r1
   15d34:	mov	r1, r0
   15d38:	mov	r0, #0
   15d3c:	bl	15c5c <__assert_fail@plt+0x4c18>
   15d40:	add	sp, sp, #12
   15d44:	pop	{pc}		; (ldr pc, [sp], #4)
   15d48:	str	r4, [sp, #-8]!
   15d4c:	str	lr, [sp, #4]
   15d50:	ldr	r3, [pc, #12]	; 15d64 <__assert_fail@plt+0x4d20>
   15d54:	bl	15408 <__assert_fail@plt+0x43c4>
   15d58:	ldr	r4, [sp]
   15d5c:	add	sp, sp, #4
   15d60:	pop	{pc}		; (ldr pc, [sp], #4)
   15d64:	andeq	sl, r2, ip, lsr #2
   15d68:	str	r4, [sp, #-8]!
   15d6c:	str	lr, [sp, #4]
   15d70:	mov	r2, r1
   15d74:	mov	r1, r0
   15d78:	mov	r0, #0
   15d7c:	bl	15d48 <__assert_fail@plt+0x4d04>
   15d80:	ldr	r4, [sp]
   15d84:	add	sp, sp, #4
   15d88:	pop	{pc}		; (ldr pc, [sp], #4)
   15d8c:	str	r4, [sp, #-8]!
   15d90:	str	lr, [sp, #4]
   15d94:	mvn	r2, #0
   15d98:	bl	15d48 <__assert_fail@plt+0x4d04>
   15d9c:	ldr	r4, [sp]
   15da0:	add	sp, sp, #4
   15da4:	pop	{pc}		; (ldr pc, [sp], #4)
   15da8:	str	r4, [sp, #-8]!
   15dac:	str	lr, [sp, #4]
   15db0:	mov	r1, r0
   15db4:	mov	r0, #0
   15db8:	bl	15d8c <__assert_fail@plt+0x4d48>
   15dbc:	ldr	r4, [sp]
   15dc0:	add	sp, sp, #4
   15dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc8:	strd	r4, [sp, #-16]!
   15dcc:	str	r6, [sp, #8]
   15dd0:	str	lr, [sp, #12]
   15dd4:	mov	r6, r1
   15dd8:	mov	r4, r2
   15ddc:	mov	r1, #0
   15de0:	bl	10fd8 <setlocale@plt>
   15de4:	subs	r5, r0, #0
   15de8:	beq	15e2c <__assert_fail@plt+0x4de8>
   15dec:	mov	r0, r5
   15df0:	bl	10f30 <strlen@plt>
   15df4:	cmp	r4, r0
   15df8:	bhi	15e48 <__assert_fail@plt+0x4e04>
   15dfc:	cmp	r4, #0
   15e00:	moveq	r0, #34	; 0x22
   15e04:	beq	15e5c <__assert_fail@plt+0x4e18>
   15e08:	sub	r4, r4, #1
   15e0c:	mov	r2, r4
   15e10:	mov	r1, r5
   15e14:	mov	r0, r6
   15e18:	bl	10df8 <memcpy@plt>
   15e1c:	mov	r3, #0
   15e20:	strb	r3, [r6, r4]
   15e24:	mov	r0, #34	; 0x22
   15e28:	b	15e5c <__assert_fail@plt+0x4e18>
   15e2c:	cmp	r4, #0
   15e30:	moveq	r0, #22
   15e34:	beq	15e5c <__assert_fail@plt+0x4e18>
   15e38:	mov	r3, #0
   15e3c:	strb	r3, [r6]
   15e40:	mov	r0, #22
   15e44:	b	15e5c <__assert_fail@plt+0x4e18>
   15e48:	add	r2, r0, #1
   15e4c:	mov	r1, r5
   15e50:	mov	r0, r6
   15e54:	bl	10df8 <memcpy@plt>
   15e58:	mov	r0, #0
   15e5c:	ldrd	r4, [sp]
   15e60:	ldr	r6, [sp, #8]
   15e64:	add	sp, sp, #12
   15e68:	pop	{pc}		; (ldr pc, [sp], #4)
   15e6c:	str	r4, [sp, #-8]!
   15e70:	str	lr, [sp, #4]
   15e74:	mov	r1, #0
   15e78:	bl	10fd8 <setlocale@plt>
   15e7c:	ldr	r4, [sp]
   15e80:	add	sp, sp, #4
   15e84:	pop	{pc}		; (ldr pc, [sp], #4)
   15e88:	str	r4, [sp, #-8]!
   15e8c:	str	lr, [sp, #4]
   15e90:	mov	r2, #3
   15e94:	mov	r1, #0
   15e98:	bl	1787c <__assert_fail@plt+0x6838>
   15e9c:	ldr	r4, [sp]
   15ea0:	add	sp, sp, #4
   15ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea8:	strd	r4, [sp, #-16]!
   15eac:	str	r6, [sp, #8]
   15eb0:	str	lr, [sp, #12]
   15eb4:	sub	sp, sp, #32
   15eb8:	mov	r4, r0
   15ebc:	ldr	r5, [sp, #48]	; 0x30
   15ec0:	ldr	r6, [sp, #52]	; 0x34
   15ec4:	cmp	r1, #0
   15ec8:	beq	15f94 <__assert_fail@plt+0x4f50>
   15ecc:	str	r3, [sp, #4]
   15ed0:	str	r2, [sp]
   15ed4:	mov	r3, r1
   15ed8:	movw	r2, #36100	; 0x8d04
   15edc:	movt	r2, #1
   15ee0:	mov	r1, #1
   15ee4:	bl	10f84 <__fprintf_chk@plt>
   15ee8:	mov	r2, #5
   15eec:	movw	r1, #36120	; 0x8d18
   15ef0:	movt	r1, #1
   15ef4:	mov	r0, #0
   15ef8:	bl	10e40 <dcgettext@plt>
   15efc:	movw	r3, #2022	; 0x7e6
   15f00:	str	r3, [sp]
   15f04:	mov	r3, r0
   15f08:	movw	r2, #36848	; 0x8ff0
   15f0c:	movt	r2, #1
   15f10:	mov	r1, #1
   15f14:	mov	r0, r4
   15f18:	bl	10f84 <__fprintf_chk@plt>
   15f1c:	mov	r1, r4
   15f20:	mov	r0, #10
   15f24:	bl	10e34 <fputc_unlocked@plt>
   15f28:	mov	r2, #5
   15f2c:	movw	r1, #36124	; 0x8d1c
   15f30:	movt	r1, #1
   15f34:	mov	r0, #0
   15f38:	bl	10e40 <dcgettext@plt>
   15f3c:	movw	r3, #36296	; 0x8dc8
   15f40:	movt	r3, #1
   15f44:	mov	r2, r0
   15f48:	mov	r1, #1
   15f4c:	mov	r0, r4
   15f50:	bl	10f84 <__fprintf_chk@plt>
   15f54:	mov	r1, r4
   15f58:	mov	r0, #10
   15f5c:	bl	10e34 <fputc_unlocked@plt>
   15f60:	cmp	r6, #9
   15f64:	ldrls	pc, [pc, r6, lsl #2]
   15f68:	b	1626c <__assert_fail@plt+0x5228>
   15f6c:	ldrdeq	r5, [r1], -r8
   15f70:			; <UNDEFINED> instruction: 0x00015fb0
   15f74:	andeq	r5, r1, ip, ror #31
   15f78:	andeq	r6, r1, r0, lsr #32
   15f7c:	andeq	r6, r1, ip, asr r0
   15f80:	andeq	r6, r1, r0, lsr #1
   15f84:	andeq	r6, r1, ip, ror #1
   15f88:	andeq	r6, r1, r0, asr #2
   15f8c:	muleq	r1, ip, r1
   15f90:	andeq	r6, r1, r0, lsl #4
   15f94:	str	r3, [sp]
   15f98:	mov	r3, r2
   15f9c:	movw	r2, #36112	; 0x8d10
   15fa0:	movt	r2, #1
   15fa4:	mov	r1, #1
   15fa8:	bl	10f84 <__fprintf_chk@plt>
   15fac:	b	15ee8 <__assert_fail@plt+0x4ea4>
   15fb0:	mov	r2, #5
   15fb4:	movw	r1, #36332	; 0x8dec
   15fb8:	movt	r1, #1
   15fbc:	mov	r0, #0
   15fc0:	bl	10e40 <dcgettext@plt>
   15fc4:	ldr	r3, [r5]
   15fc8:	mov	r2, r0
   15fcc:	mov	r1, #1
   15fd0:	mov	r0, r4
   15fd4:	bl	10f84 <__fprintf_chk@plt>
   15fd8:	add	sp, sp, #32
   15fdc:	ldrd	r4, [sp]
   15fe0:	ldr	r6, [sp, #8]
   15fe4:	add	sp, sp, #12
   15fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fec:	mov	r2, #5
   15ff0:	movw	r1, #36348	; 0x8dfc
   15ff4:	movt	r1, #1
   15ff8:	mov	r0, #0
   15ffc:	bl	10e40 <dcgettext@plt>
   16000:	ldr	r3, [r5, #4]
   16004:	str	r3, [sp]
   16008:	ldr	r3, [r5]
   1600c:	mov	r2, r0
   16010:	mov	r1, #1
   16014:	mov	r0, r4
   16018:	bl	10f84 <__fprintf_chk@plt>
   1601c:	b	15fd8 <__assert_fail@plt+0x4f94>
   16020:	mov	r2, #5
   16024:	movw	r1, #36372	; 0x8e14
   16028:	movt	r1, #1
   1602c:	mov	r0, #0
   16030:	bl	10e40 <dcgettext@plt>
   16034:	ldr	r3, [r5, #8]
   16038:	str	r3, [sp, #4]
   1603c:	ldr	r3, [r5, #4]
   16040:	str	r3, [sp]
   16044:	ldr	r3, [r5]
   16048:	mov	r2, r0
   1604c:	mov	r1, #1
   16050:	mov	r0, r4
   16054:	bl	10f84 <__fprintf_chk@plt>
   16058:	b	15fd8 <__assert_fail@plt+0x4f94>
   1605c:	mov	r2, #5
   16060:	movw	r1, #36400	; 0x8e30
   16064:	movt	r1, #1
   16068:	mov	r0, #0
   1606c:	bl	10e40 <dcgettext@plt>
   16070:	ldr	r3, [r5, #12]
   16074:	str	r3, [sp, #8]
   16078:	ldr	r3, [r5, #8]
   1607c:	str	r3, [sp, #4]
   16080:	ldr	r3, [r5, #4]
   16084:	str	r3, [sp]
   16088:	ldr	r3, [r5]
   1608c:	mov	r2, r0
   16090:	mov	r1, #1
   16094:	mov	r0, r4
   16098:	bl	10f84 <__fprintf_chk@plt>
   1609c:	b	15fd8 <__assert_fail@plt+0x4f94>
   160a0:	mov	r2, #5
   160a4:	movw	r1, #36432	; 0x8e50
   160a8:	movt	r1, #1
   160ac:	mov	r0, #0
   160b0:	bl	10e40 <dcgettext@plt>
   160b4:	ldr	r3, [r5, #16]
   160b8:	str	r3, [sp, #12]
   160bc:	ldr	r3, [r5, #12]
   160c0:	str	r3, [sp, #8]
   160c4:	ldr	r3, [r5, #8]
   160c8:	str	r3, [sp, #4]
   160cc:	ldr	r3, [r5, #4]
   160d0:	str	r3, [sp]
   160d4:	ldr	r3, [r5]
   160d8:	mov	r2, r0
   160dc:	mov	r1, #1
   160e0:	mov	r0, r4
   160e4:	bl	10f84 <__fprintf_chk@plt>
   160e8:	b	15fd8 <__assert_fail@plt+0x4f94>
   160ec:	mov	r2, #5
   160f0:	movw	r1, #36468	; 0x8e74
   160f4:	movt	r1, #1
   160f8:	mov	r0, #0
   160fc:	bl	10e40 <dcgettext@plt>
   16100:	ldr	r3, [r5, #20]
   16104:	str	r3, [sp, #16]
   16108:	ldr	r3, [r5, #16]
   1610c:	str	r3, [sp, #12]
   16110:	ldr	r3, [r5, #12]
   16114:	str	r3, [sp, #8]
   16118:	ldr	r3, [r5, #8]
   1611c:	str	r3, [sp, #4]
   16120:	ldr	r3, [r5, #4]
   16124:	str	r3, [sp]
   16128:	ldr	r3, [r5]
   1612c:	mov	r2, r0
   16130:	mov	r1, #1
   16134:	mov	r0, r4
   16138:	bl	10f84 <__fprintf_chk@plt>
   1613c:	b	15fd8 <__assert_fail@plt+0x4f94>
   16140:	mov	r2, #5
   16144:	movw	r1, #36508	; 0x8e9c
   16148:	movt	r1, #1
   1614c:	mov	r0, #0
   16150:	bl	10e40 <dcgettext@plt>
   16154:	ldr	r3, [r5, #24]
   16158:	str	r3, [sp, #20]
   1615c:	ldr	r3, [r5, #20]
   16160:	str	r3, [sp, #16]
   16164:	ldr	r3, [r5, #16]
   16168:	str	r3, [sp, #12]
   1616c:	ldr	r3, [r5, #12]
   16170:	str	r3, [sp, #8]
   16174:	ldr	r3, [r5, #8]
   16178:	str	r3, [sp, #4]
   1617c:	ldr	r3, [r5, #4]
   16180:	str	r3, [sp]
   16184:	ldr	r3, [r5]
   16188:	mov	r2, r0
   1618c:	mov	r1, #1
   16190:	mov	r0, r4
   16194:	bl	10f84 <__fprintf_chk@plt>
   16198:	b	15fd8 <__assert_fail@plt+0x4f94>
   1619c:	mov	r2, #5
   161a0:	movw	r1, #36552	; 0x8ec8
   161a4:	movt	r1, #1
   161a8:	mov	r0, #0
   161ac:	bl	10e40 <dcgettext@plt>
   161b0:	ldr	r3, [r5, #28]
   161b4:	str	r3, [sp, #24]
   161b8:	ldr	r3, [r5, #24]
   161bc:	str	r3, [sp, #20]
   161c0:	ldr	r3, [r5, #20]
   161c4:	str	r3, [sp, #16]
   161c8:	ldr	r3, [r5, #16]
   161cc:	str	r3, [sp, #12]
   161d0:	ldr	r3, [r5, #12]
   161d4:	str	r3, [sp, #8]
   161d8:	ldr	r3, [r5, #8]
   161dc:	str	r3, [sp, #4]
   161e0:	ldr	r3, [r5, #4]
   161e4:	str	r3, [sp]
   161e8:	ldr	r3, [r5]
   161ec:	mov	r2, r0
   161f0:	mov	r1, #1
   161f4:	mov	r0, r4
   161f8:	bl	10f84 <__fprintf_chk@plt>
   161fc:	b	15fd8 <__assert_fail@plt+0x4f94>
   16200:	mov	r2, #5
   16204:	movw	r1, #36600	; 0x8ef8
   16208:	movt	r1, #1
   1620c:	mov	r0, #0
   16210:	bl	10e40 <dcgettext@plt>
   16214:	ldr	r3, [r5, #32]
   16218:	str	r3, [sp, #28]
   1621c:	ldr	r3, [r5, #28]
   16220:	str	r3, [sp, #24]
   16224:	ldr	r3, [r5, #24]
   16228:	str	r3, [sp, #20]
   1622c:	ldr	r3, [r5, #20]
   16230:	str	r3, [sp, #16]
   16234:	ldr	r3, [r5, #16]
   16238:	str	r3, [sp, #12]
   1623c:	ldr	r3, [r5, #12]
   16240:	str	r3, [sp, #8]
   16244:	ldr	r3, [r5, #8]
   16248:	str	r3, [sp, #4]
   1624c:	ldr	r3, [r5, #4]
   16250:	str	r3, [sp]
   16254:	ldr	r3, [r5]
   16258:	mov	r2, r0
   1625c:	mov	r1, #1
   16260:	mov	r0, r4
   16264:	bl	10f84 <__fprintf_chk@plt>
   16268:	b	15fd8 <__assert_fail@plt+0x4f94>
   1626c:	mov	r2, #5
   16270:	movw	r1, #36652	; 0x8f2c
   16274:	movt	r1, #1
   16278:	mov	r0, #0
   1627c:	bl	10e40 <dcgettext@plt>
   16280:	ldr	r3, [r5, #32]
   16284:	str	r3, [sp, #28]
   16288:	ldr	r3, [r5, #28]
   1628c:	str	r3, [sp, #24]
   16290:	ldr	r3, [r5, #24]
   16294:	str	r3, [sp, #20]
   16298:	ldr	r3, [r5, #20]
   1629c:	str	r3, [sp, #16]
   162a0:	ldr	r3, [r5, #16]
   162a4:	str	r3, [sp, #12]
   162a8:	ldr	r3, [r5, #12]
   162ac:	str	r3, [sp, #8]
   162b0:	ldr	r3, [r5, #8]
   162b4:	str	r3, [sp, #4]
   162b8:	ldr	r3, [r5, #4]
   162bc:	str	r3, [sp]
   162c0:	ldr	r3, [r5]
   162c4:	mov	r2, r0
   162c8:	mov	r1, #1
   162cc:	mov	r0, r4
   162d0:	bl	10f84 <__fprintf_chk@plt>
   162d4:	b	15fd8 <__assert_fail@plt+0x4f94>
   162d8:	strd	r4, [sp, #-12]!
   162dc:	str	lr, [sp, #8]
   162e0:	sub	sp, sp, #12
   162e4:	ldr	r5, [sp, #24]
   162e8:	ldr	ip, [r5]
   162ec:	cmp	ip, #0
   162f0:	beq	16328 <__assert_fail@plt+0x52e4>
   162f4:	mov	lr, r5
   162f8:	mov	ip, #0
   162fc:	add	ip, ip, #1
   16300:	ldr	r4, [lr, #4]!
   16304:	cmp	r4, #0
   16308:	bne	162fc <__assert_fail@plt+0x52b8>
   1630c:	str	ip, [sp, #4]
   16310:	str	r5, [sp]
   16314:	bl	15ea8 <__assert_fail@plt+0x4e64>
   16318:	add	sp, sp, #12
   1631c:	ldrd	r4, [sp]
   16320:	add	sp, sp, #8
   16324:	pop	{pc}		; (ldr pc, [sp], #4)
   16328:	mov	ip, #0
   1632c:	b	1630c <__assert_fail@plt+0x52c8>
   16330:	strd	r4, [sp, #-12]!
   16334:	str	lr, [sp, #8]
   16338:	sub	sp, sp, #52	; 0x34
   1633c:	ldr	r5, [sp, #64]	; 0x40
   16340:	add	r4, sp, #8
   16344:	mov	ip, #0
   16348:	ldr	lr, [r5], #4
   1634c:	str	lr, [r4], #4
   16350:	cmp	lr, #0
   16354:	beq	16364 <__assert_fail@plt+0x5320>
   16358:	add	ip, ip, #1
   1635c:	cmp	ip, #10
   16360:	bne	16348 <__assert_fail@plt+0x5304>
   16364:	str	ip, [sp, #4]
   16368:	add	ip, sp, #8
   1636c:	str	ip, [sp]
   16370:	bl	15ea8 <__assert_fail@plt+0x4e64>
   16374:	add	sp, sp, #52	; 0x34
   16378:	ldrd	r4, [sp]
   1637c:	add	sp, sp, #8
   16380:	pop	{pc}		; (ldr pc, [sp], #4)
   16384:	push	{r3}		; (str r3, [sp, #-4]!)
   16388:	push	{lr}		; (str lr, [sp, #-4]!)
   1638c:	sub	sp, sp, #16
   16390:	add	r3, sp, #24
   16394:	str	r3, [sp, #12]
   16398:	str	r3, [sp]
   1639c:	ldr	r3, [sp, #20]
   163a0:	bl	16330 <__assert_fail@plt+0x52ec>
   163a4:	add	sp, sp, #16
   163a8:	pop	{lr}		; (ldr lr, [sp], #4)
   163ac:	add	sp, sp, #4
   163b0:	bx	lr
   163b4:	str	r4, [sp, #-8]!
   163b8:	str	lr, [sp, #4]
   163bc:	movw	r3, #41340	; 0xa17c
   163c0:	movt	r3, #2
   163c4:	ldr	r1, [r3]
   163c8:	mov	r0, #10
   163cc:	bl	10e34 <fputc_unlocked@plt>
   163d0:	mov	r2, #5
   163d4:	movw	r1, #36712	; 0x8f68
   163d8:	movt	r1, #1
   163dc:	mov	r0, #0
   163e0:	bl	10e40 <dcgettext@plt>
   163e4:	movw	r2, #36732	; 0x8f7c
   163e8:	movt	r2, #1
   163ec:	mov	r1, r0
   163f0:	mov	r0, #1
   163f4:	bl	10f6c <__printf_chk@plt>
   163f8:	mov	r2, #5
   163fc:	movw	r1, #36756	; 0x8f94
   16400:	movt	r1, #1
   16404:	mov	r0, #0
   16408:	bl	10e40 <dcgettext@plt>
   1640c:	movw	r3, #35076	; 0x8904
   16410:	movt	r3, #1
   16414:	movw	r2, #35116	; 0x892c
   16418:	movt	r2, #1
   1641c:	mov	r1, r0
   16420:	mov	r0, #1
   16424:	bl	10f6c <__printf_chk@plt>
   16428:	mov	r2, #5
   1642c:	movw	r1, #36776	; 0x8fa8
   16430:	movt	r1, #1
   16434:	mov	r0, #0
   16438:	bl	10e40 <dcgettext@plt>
   1643c:	movw	r2, #36816	; 0x8fd0
   16440:	movt	r2, #1
   16444:	mov	r1, r0
   16448:	mov	r0, #1
   1644c:	bl	10f6c <__printf_chk@plt>
   16450:	ldr	r4, [sp]
   16454:	add	sp, sp, #4
   16458:	pop	{pc}		; (ldr pc, [sp], #4)
   1645c:	str	r4, [sp, #-8]!
   16460:	str	lr, [sp, #4]
   16464:	bl	17758 <__assert_fail@plt+0x6714>
   16468:	cmp	r0, #0
   1646c:	beq	1647c <__assert_fail@plt+0x5438>
   16470:	ldr	r4, [sp]
   16474:	add	sp, sp, #4
   16478:	pop	{pc}		; (ldr pc, [sp], #4)
   1647c:	bl	168f0 <__assert_fail@plt+0x58ac>
   16480:	str	r4, [sp, #-8]!
   16484:	str	lr, [sp, #4]
   16488:	bl	17758 <__assert_fail@plt+0x6714>
   1648c:	cmp	r0, #0
   16490:	beq	164a0 <__assert_fail@plt+0x545c>
   16494:	ldr	r4, [sp]
   16498:	add	sp, sp, #4
   1649c:	pop	{pc}		; (ldr pc, [sp], #4)
   164a0:	bl	168f0 <__assert_fail@plt+0x58ac>
   164a4:	str	r4, [sp, #-8]!
   164a8:	str	lr, [sp, #4]
   164ac:	bl	1645c <__assert_fail@plt+0x5418>
   164b0:	ldr	r4, [sp]
   164b4:	add	sp, sp, #4
   164b8:	pop	{pc}		; (ldr pc, [sp], #4)
   164bc:	strd	r4, [sp, #-16]!
   164c0:	str	r6, [sp, #8]
   164c4:	str	lr, [sp, #12]
   164c8:	mov	r5, r0
   164cc:	mov	r4, r1
   164d0:	bl	17794 <__assert_fail@plt+0x6750>
   164d4:	cmp	r0, #0
   164d8:	beq	164ec <__assert_fail@plt+0x54a8>
   164dc:	ldrd	r4, [sp]
   164e0:	ldr	r6, [sp, #8]
   164e4:	add	sp, sp, #12
   164e8:	pop	{pc}		; (ldr pc, [sp], #4)
   164ec:	adds	r4, r4, #0
   164f0:	movne	r4, #1
   164f4:	cmp	r5, #0
   164f8:	moveq	r4, #1
   164fc:	cmp	r4, #0
   16500:	beq	164dc <__assert_fail@plt+0x5498>
   16504:	bl	168f0 <__assert_fail@plt+0x58ac>
   16508:	str	r4, [sp, #-8]!
   1650c:	str	lr, [sp, #4]
   16510:	cmp	r1, #0
   16514:	orreq	r1, r1, #1
   16518:	bl	17794 <__assert_fail@plt+0x6750>
   1651c:	cmp	r0, #0
   16520:	beq	16530 <__assert_fail@plt+0x54ec>
   16524:	ldr	r4, [sp]
   16528:	add	sp, sp, #4
   1652c:	pop	{pc}		; (ldr pc, [sp], #4)
   16530:	bl	168f0 <__assert_fail@plt+0x58ac>
   16534:	strd	r4, [sp, #-16]!
   16538:	str	r6, [sp, #8]
   1653c:	str	lr, [sp, #12]
   16540:	mov	r4, r0
   16544:	mov	r6, r1
   16548:	mov	r5, r2
   1654c:	bl	17d60 <__assert_fail@plt+0x6d1c>
   16550:	cmp	r0, #0
   16554:	beq	16568 <__assert_fail@plt+0x5524>
   16558:	ldrd	r4, [sp]
   1655c:	ldr	r6, [sp, #8]
   16560:	add	sp, sp, #12
   16564:	pop	{pc}		; (ldr pc, [sp], #4)
   16568:	cmp	r4, #0
   1656c:	beq	1657c <__assert_fail@plt+0x5538>
   16570:	cmp	r6, #0
   16574:	cmpne	r5, #0
   16578:	beq	16558 <__assert_fail@plt+0x5514>
   1657c:	bl	168f0 <__assert_fail@plt+0x58ac>
   16580:	str	r4, [sp, #-8]!
   16584:	str	lr, [sp, #4]
   16588:	bl	16534 <__assert_fail@plt+0x54f0>
   1658c:	ldr	r4, [sp]
   16590:	add	sp, sp, #4
   16594:	pop	{pc}		; (ldr pc, [sp], #4)
   16598:	str	r4, [sp, #-8]!
   1659c:	str	lr, [sp, #4]
   165a0:	mov	ip, r1
   165a4:	mov	r3, r2
   165a8:	cmp	r2, #0
   165ac:	cmpne	r1, #0
   165b0:	moveq	r3, #1
   165b4:	moveq	ip, r3
   165b8:	mov	r2, r3
   165bc:	mov	r1, ip
   165c0:	bl	17d60 <__assert_fail@plt+0x6d1c>
   165c4:	cmp	r0, #0
   165c8:	beq	165d8 <__assert_fail@plt+0x5594>
   165cc:	ldr	r4, [sp]
   165d0:	add	sp, sp, #4
   165d4:	pop	{pc}		; (ldr pc, [sp], #4)
   165d8:	bl	168f0 <__assert_fail@plt+0x58ac>
   165dc:	str	r4, [sp, #-8]!
   165e0:	str	lr, [sp, #4]
   165e4:	mov	r2, r1
   165e8:	mov	r1, r0
   165ec:	mov	r0, #0
   165f0:	bl	16534 <__assert_fail@plt+0x54f0>
   165f4:	ldr	r4, [sp]
   165f8:	add	sp, sp, #4
   165fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16600:	str	r4, [sp, #-8]!
   16604:	str	lr, [sp, #4]
   16608:	mov	r2, r1
   1660c:	mov	r1, r0
   16610:	mov	r0, #0
   16614:	bl	16598 <__assert_fail@plt+0x5554>
   16618:	ldr	r4, [sp]
   1661c:	add	sp, sp, #4
   16620:	pop	{pc}		; (ldr pc, [sp], #4)
   16624:	strd	r4, [sp, #-16]!
   16628:	str	r6, [sp, #8]
   1662c:	str	lr, [sp, #12]
   16630:	mov	r5, r1
   16634:	ldr	r4, [r1]
   16638:	cmp	r0, #0
   1663c:	beq	1666c <__assert_fail@plt+0x5628>
   16640:	lsr	r3, r4, #1
   16644:	add	r3, r3, #1
   16648:	adds	r4, r4, r3
   1664c:	bcs	16688 <__assert_fail@plt+0x5644>
   16650:	mov	r1, r4
   16654:	bl	16534 <__assert_fail@plt+0x54f0>
   16658:	str	r4, [r5]
   1665c:	ldrd	r4, [sp]
   16660:	ldr	r6, [sp, #8]
   16664:	add	sp, sp, #12
   16668:	pop	{pc}		; (ldr pc, [sp], #4)
   1666c:	cmp	r4, #0
   16670:	bne	16650 <__assert_fail@plt+0x560c>
   16674:	mov	r4, #64	; 0x40
   16678:	udiv	r4, r4, r2
   1667c:	cmp	r2, #64	; 0x40
   16680:	addhi	r4, r4, #1
   16684:	b	16650 <__assert_fail@plt+0x560c>
   16688:	bl	168f0 <__assert_fail@plt+0x58ac>
   1668c:	str	r4, [sp, #-8]!
   16690:	str	lr, [sp, #4]
   16694:	mov	r2, #1
   16698:	bl	16624 <__assert_fail@plt+0x55e0>
   1669c:	ldr	r4, [sp]
   166a0:	add	sp, sp, #4
   166a4:	pop	{pc}		; (ldr pc, [sp], #4)
   166a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   166ac:	strd	r6, [sp, #8]
   166b0:	str	r8, [sp, #16]
   166b4:	str	lr, [sp, #20]
   166b8:	mov	r5, r1
   166bc:	ldr	lr, [sp, #24]
   166c0:	ldr	ip, [r1]
   166c4:	asr	r4, ip, #1
   166c8:	adds	r4, ip, r4
   166cc:	movvs	r1, #1
   166d0:	movvc	r1, #0
   166d4:	cmp	r1, #0
   166d8:	mvnne	r4, #-2147483648	; 0x80000000
   166dc:	mvn	r8, r3
   166e0:	lsr	r8, r8, #31
   166e4:	cmp	r3, r4
   166e8:	movge	r1, #0
   166ec:	andlt	r1, r8, #1
   166f0:	cmp	r1, #0
   166f4:	movne	r4, r3
   166f8:	smull	r6, r7, r4, lr
   166fc:	asr	r1, r6, #31
   16700:	cmp	r1, r7
   16704:	bne	1671c <__assert_fail@plt+0x56d8>
   16708:	mov	r1, r6
   1670c:	cmp	r6, #63	; 0x3f
   16710:	movle	r1, #64	; 0x40
   16714:	ble	16720 <__assert_fail@plt+0x56dc>
   16718:	b	1672c <__assert_fail@plt+0x56e8>
   1671c:	mvn	r1, #-2147483648	; 0x80000000
   16720:	sdiv	r4, r1, lr
   16724:	mls	r6, lr, r4, r1
   16728:	sub	r1, r1, r6
   1672c:	cmp	r0, #0
   16730:	moveq	r6, #0
   16734:	streq	r6, [r5]
   16738:	sub	r6, r4, ip
   1673c:	cmp	r6, r2
   16740:	bge	16778 <__assert_fail@plt+0x5734>
   16744:	adds	r2, ip, r2
   16748:	mov	r4, r2
   1674c:	bvs	16794 <__assert_fail@plt+0x5750>
   16750:	cmp	r2, r3
   16754:	movle	r3, #0
   16758:	andgt	r3, r8, #1
   1675c:	cmp	r3, #0
   16760:	bne	16794 <__assert_fail@plt+0x5750>
   16764:	smull	r2, r3, r2, lr
   16768:	asr	ip, r2, #31
   1676c:	mov	r1, r2
   16770:	cmp	ip, r3
   16774:	bne	16794 <__assert_fail@plt+0x5750>
   16778:	bl	164bc <__assert_fail@plt+0x5478>
   1677c:	str	r4, [r5]
   16780:	ldrd	r4, [sp]
   16784:	ldrd	r6, [sp, #8]
   16788:	ldr	r8, [sp, #16]
   1678c:	add	sp, sp, #20
   16790:	pop	{pc}		; (ldr pc, [sp], #4)
   16794:	bl	168f0 <__assert_fail@plt+0x58ac>
   16798:	str	r4, [sp, #-8]!
   1679c:	str	lr, [sp, #4]
   167a0:	bl	176e4 <__assert_fail@plt+0x66a0>
   167a4:	cmp	r0, #0
   167a8:	beq	167b8 <__assert_fail@plt+0x5774>
   167ac:	ldr	r4, [sp]
   167b0:	add	sp, sp, #4
   167b4:	pop	{pc}		; (ldr pc, [sp], #4)
   167b8:	bl	168f0 <__assert_fail@plt+0x58ac>
   167bc:	str	r4, [sp, #-8]!
   167c0:	str	lr, [sp, #4]
   167c4:	mov	r1, #1
   167c8:	bl	16798 <__assert_fail@plt+0x5754>
   167cc:	ldr	r4, [sp]
   167d0:	add	sp, sp, #4
   167d4:	pop	{pc}		; (ldr pc, [sp], #4)
   167d8:	str	r4, [sp, #-8]!
   167dc:	str	lr, [sp, #4]
   167e0:	bl	176e4 <__assert_fail@plt+0x66a0>
   167e4:	cmp	r0, #0
   167e8:	beq	167f8 <__assert_fail@plt+0x57b4>
   167ec:	ldr	r4, [sp]
   167f0:	add	sp, sp, #4
   167f4:	pop	{pc}		; (ldr pc, [sp], #4)
   167f8:	bl	168f0 <__assert_fail@plt+0x58ac>
   167fc:	str	r4, [sp, #-8]!
   16800:	str	lr, [sp, #4]
   16804:	mov	r1, #1
   16808:	bl	167d8 <__assert_fail@plt+0x5794>
   1680c:	ldr	r4, [sp]
   16810:	add	sp, sp, #4
   16814:	pop	{pc}		; (ldr pc, [sp], #4)
   16818:	strd	r4, [sp, #-16]!
   1681c:	str	r6, [sp, #8]
   16820:	str	lr, [sp, #12]
   16824:	mov	r5, r0
   16828:	mov	r4, r1
   1682c:	mov	r0, r1
   16830:	bl	1645c <__assert_fail@plt+0x5418>
   16834:	mov	r2, r4
   16838:	mov	r1, r5
   1683c:	bl	10df8 <memcpy@plt>
   16840:	ldrd	r4, [sp]
   16844:	ldr	r6, [sp, #8]
   16848:	add	sp, sp, #12
   1684c:	pop	{pc}		; (ldr pc, [sp], #4)
   16850:	strd	r4, [sp, #-16]!
   16854:	str	r6, [sp, #8]
   16858:	str	lr, [sp, #12]
   1685c:	mov	r5, r0
   16860:	mov	r4, r1
   16864:	mov	r0, r1
   16868:	bl	16480 <__assert_fail@plt+0x543c>
   1686c:	mov	r2, r4
   16870:	mov	r1, r5
   16874:	bl	10df8 <memcpy@plt>
   16878:	ldrd	r4, [sp]
   1687c:	ldr	r6, [sp, #8]
   16880:	add	sp, sp, #12
   16884:	pop	{pc}		; (ldr pc, [sp], #4)
   16888:	strd	r4, [sp, #-16]!
   1688c:	str	r6, [sp, #8]
   16890:	str	lr, [sp, #12]
   16894:	mov	r5, r0
   16898:	mov	r4, r1
   1689c:	add	r0, r1, #1
   168a0:	bl	16480 <__assert_fail@plt+0x543c>
   168a4:	mov	r2, #0
   168a8:	strb	r2, [r0, r4]
   168ac:	mov	r2, r4
   168b0:	mov	r1, r5
   168b4:	bl	10df8 <memcpy@plt>
   168b8:	ldrd	r4, [sp]
   168bc:	ldr	r6, [sp, #8]
   168c0:	add	sp, sp, #12
   168c4:	pop	{pc}		; (ldr pc, [sp], #4)
   168c8:	str	r4, [sp, #-8]!
   168cc:	str	lr, [sp, #4]
   168d0:	mov	r4, r0
   168d4:	bl	10f30 <strlen@plt>
   168d8:	add	r1, r0, #1
   168dc:	mov	r0, r4
   168e0:	bl	16818 <__assert_fail@plt+0x57d4>
   168e4:	ldr	r4, [sp]
   168e8:	add	sp, sp, #4
   168ec:	pop	{pc}		; (ldr pc, [sp], #4)
   168f0:	str	r4, [sp, #-8]!
   168f4:	str	lr, [sp, #4]
   168f8:	movw	r3, #41240	; 0xa118
   168fc:	movt	r3, #2
   16900:	ldr	r4, [r3]
   16904:	mov	r2, #5
   16908:	movw	r1, #36896	; 0x9020
   1690c:	movt	r1, #1
   16910:	mov	r0, #0
   16914:	bl	10e40 <dcgettext@plt>
   16918:	mov	r3, r0
   1691c:	movw	r2, #35804	; 0x8bdc
   16920:	movt	r2, #1
   16924:	mov	r1, #0
   16928:	mov	r0, r4
   1692c:	bl	10eac <error@plt>
   16930:	bl	1102c <abort@plt>
   16934:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16938:	strd	r6, [sp, #8]
   1693c:	str	r8, [sp, #16]
   16940:	str	lr, [sp, #20]
   16944:	sub	sp, sp, #8
   16948:	mov	r4, r0
   1694c:	mov	r6, r1
   16950:	mov	r8, r2
   16954:	mov	r7, r3
   16958:	mov	r2, #5
   1695c:	movw	r1, #36916	; 0x9034
   16960:	movt	r1, #1
   16964:	mov	r0, #0
   16968:	bl	10e40 <dcgettext@plt>
   1696c:	mov	r2, r0
   16970:	mov	r1, r4
   16974:	mov	r0, #0
   16978:	bl	10eac <error@plt>
   1697c:	mov	r2, #5
   16980:	movw	r1, #36944	; 0x9050
   16984:	movt	r1, #1
   16988:	mov	r0, #0
   1698c:	bl	10e40 <dcgettext@plt>
   16990:	mov	r2, r0
   16994:	mov	r1, #0
   16998:	mov	r0, r1
   1699c:	bl	10eac <error@plt>
   169a0:	movw	r3, #41240	; 0xa118
   169a4:	movt	r3, #2
   169a8:	ldr	r4, [r3]
   169ac:	mov	r2, #5
   169b0:	movw	r1, #36988	; 0x907c
   169b4:	movt	r1, #1
   169b8:	mov	r0, #0
   169bc:	bl	10e40 <dcgettext@plt>
   169c0:	mov	r5, r0
   169c4:	mov	r3, r8
   169c8:	mov	r2, r6
   169cc:	mov	r1, #8
   169d0:	mov	r0, #0
   169d4:	bl	15a6c <__assert_fail@plt+0x4a28>
   169d8:	mov	r6, r0
   169dc:	ldr	r3, [sp, #32]
   169e0:	mov	r2, r7
   169e4:	mov	r1, #8
   169e8:	mov	r0, #1
   169ec:	bl	15a6c <__assert_fail@plt+0x4a28>
   169f0:	str	r0, [sp]
   169f4:	mov	r3, r6
   169f8:	mov	r2, r5
   169fc:	mov	r1, #0
   16a00:	mov	r0, r4
   16a04:	bl	10eac <error@plt>
   16a08:	add	sp, sp, #8
   16a0c:	ldrd	r4, [sp]
   16a10:	ldrd	r6, [sp, #8]
   16a14:	ldr	r8, [sp, #16]
   16a18:	add	sp, sp, #20
   16a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16a24:	strd	r6, [sp, #8]
   16a28:	str	r8, [sp, #16]
   16a2c:	str	lr, [sp, #20]
   16a30:	sub	sp, sp, #8
   16a34:	mov	r5, r0
   16a38:	mov	r6, r1
   16a3c:	mov	r7, r2
   16a40:	mov	r8, r3
   16a44:	bl	17c44 <__assert_fail@plt+0x6c00>
   16a48:	mov	r4, r0
   16a4c:	bl	10f48 <__errno_location@plt>
   16a50:	ldr	r0, [r0]
   16a54:	cmp	r0, #0
   16a58:	bne	16a78 <__assert_fail@plt+0x5a34>
   16a5c:	mov	r0, r4
   16a60:	add	sp, sp, #8
   16a64:	ldrd	r4, [sp]
   16a68:	ldrd	r6, [sp, #8]
   16a6c:	ldr	r8, [sp, #16]
   16a70:	add	sp, sp, #20
   16a74:	pop	{pc}		; (ldr pc, [sp], #4)
   16a78:	str	r8, [sp]
   16a7c:	mov	r3, r7
   16a80:	mov	r2, r6
   16a84:	mov	r1, r5
   16a88:	bl	16934 <__assert_fail@plt+0x58f0>
   16a8c:	b	16a5c <__assert_fail@plt+0x5a18>
   16a90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16a94:	strd	r6, [sp, #8]
   16a98:	str	r8, [sp, #16]
   16a9c:	str	lr, [sp, #20]
   16aa0:	sub	sp, sp, #8
   16aa4:	mov	r6, r0
   16aa8:	mov	r7, r1
   16aac:	mov	r8, r2
   16ab0:	mov	r5, r3
   16ab4:	bl	17ce4 <__assert_fail@plt+0x6ca0>
   16ab8:	mov	r4, r0
   16abc:	bl	10f48 <__errno_location@plt>
   16ac0:	ldr	r0, [r0]
   16ac4:	cmp	r0, #0
   16ac8:	bne	16ae8 <__assert_fail@plt+0x5aa4>
   16acc:	mov	r0, r4
   16ad0:	add	sp, sp, #8
   16ad4:	ldrd	r4, [sp]
   16ad8:	ldrd	r6, [sp, #8]
   16adc:	ldr	r8, [sp, #16]
   16ae0:	add	sp, sp, #20
   16ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ae8:	sub	r5, r5, #1
   16aec:	str	r5, [sp]
   16af0:	mov	r3, r8
   16af4:	sub	r2, r7, #1
   16af8:	mov	r1, r6
   16afc:	bl	16934 <__assert_fail@plt+0x58f0>
   16b00:	b	16acc <__assert_fail@plt+0x5a88>
   16b04:	cmp	r2, #0
   16b08:	beq	16b70 <__assert_fail@plt+0x5b2c>
   16b0c:	strd	r4, [sp, #-8]!
   16b10:	sub	ip, r2, #1
   16b14:	ldr	r4, [r0]
   16b18:	mov	r2, #0
   16b1c:	mov	r3, #0
   16b20:	cmp	r1, r3
   16b24:	blt	16b64 <__assert_fail@plt+0x5b20>
   16b28:	umull	r4, r5, r1, r4
   16b2c:	cmp	r5, #0
   16b30:	movne	r3, #1
   16b34:	and	r3, r3, #1
   16b38:	cmp	r3, #0
   16b3c:	mvnne	r4, #0
   16b40:	orr	r2, r2, r3
   16b44:	sub	ip, ip, #1
   16b48:	cmn	ip, #1
   16b4c:	bne	16b1c <__assert_fail@plt+0x5ad8>
   16b50:	str	r4, [r0]
   16b54:	mov	r0, r2
   16b58:	ldrd	r4, [sp]
   16b5c:	add	sp, sp, #8
   16b60:	bx	lr
   16b64:	subs	r3, r4, r3
   16b68:	movne	r3, #1
   16b6c:	b	16b28 <__assert_fail@plt+0x5ae4>
   16b70:	mov	r2, #0
   16b74:	mov	r0, r2
   16b78:	bx	lr
   16b7c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16b80:	strd	r6, [sp, #8]
   16b84:	strd	r8, [sp, #16]
   16b88:	str	lr, [sp, #24]
   16b8c:	sub	sp, sp, #12
   16b90:	cmp	r2, #36	; 0x24
   16b94:	bhi	16be8 <__assert_fail@plt+0x5ba4>
   16b98:	mov	r5, r0
   16b9c:	mov	r6, r1
   16ba0:	mov	r7, r2
   16ba4:	mov	r9, r3
   16ba8:	cmp	r1, #0
   16bac:	addeq	r6, sp, #4
   16bb0:	bl	10f48 <__errno_location@plt>
   16bb4:	mov	r8, r0
   16bb8:	mov	r3, #0
   16bbc:	str	r3, [r0]
   16bc0:	ldrb	r4, [r5]
   16bc4:	bl	10f0c <__ctype_b_loc@plt>
   16bc8:	ldr	r1, [r0]
   16bcc:	mov	r2, r5
   16bd0:	lsl	r3, r4, #1
   16bd4:	ldrh	r3, [r1, r3]
   16bd8:	tst	r3, #8192	; 0x2000
   16bdc:	beq	16c08 <__assert_fail@plt+0x5bc4>
   16be0:	ldrb	r4, [r2, #1]!
   16be4:	b	16bd0 <__assert_fail@plt+0x5b8c>
   16be8:	movw	r3, #37028	; 0x90a4
   16bec:	movt	r3, #1
   16bf0:	mov	r2, #85	; 0x55
   16bf4:	movw	r1, #37040	; 0x90b0
   16bf8:	movt	r1, #1
   16bfc:	movw	r0, #37056	; 0x90c0
   16c00:	movt	r0, #1
   16c04:	bl	11044 <__assert_fail@plt>
   16c08:	cmp	r4, #45	; 0x2d
   16c0c:	moveq	r4, #4
   16c10:	beq	16d9c <__assert_fail@plt+0x5d58>
   16c14:	mov	r2, r7
   16c18:	mov	r1, r6
   16c1c:	mov	r0, r5
   16c20:	bl	10f24 <strtoul@plt>
   16c24:	str	r0, [sp]
   16c28:	ldr	r7, [r6]
   16c2c:	cmp	r7, r5
   16c30:	beq	16c54 <__assert_fail@plt+0x5c10>
   16c34:	ldr	r3, [r8]
   16c38:	cmp	r3, #0
   16c3c:	beq	16d74 <__assert_fail@plt+0x5d30>
   16c40:	cmp	r3, #34	; 0x22
   16c44:	moveq	r4, #1
   16c48:	beq	16d78 <__assert_fail@plt+0x5d34>
   16c4c:	mov	r4, #4
   16c50:	b	16d9c <__assert_fail@plt+0x5d58>
   16c54:	ldr	r3, [sp, #40]	; 0x28
   16c58:	cmp	r3, #0
   16c5c:	beq	17060 <__assert_fail@plt+0x601c>
   16c60:	ldrb	r1, [r5]
   16c64:	cmp	r1, #0
   16c68:	moveq	r4, #4
   16c6c:	beq	16d9c <__assert_fail@plt+0x5d58>
   16c70:	mov	r0, r3
   16c74:	bl	10f3c <strchr@plt>
   16c78:	cmp	r0, #0
   16c7c:	beq	17068 <__assert_fail@plt+0x6024>
   16c80:	mov	r3, #1
   16c84:	str	r3, [sp]
   16c88:	ldrb	r5, [r7]
   16c8c:	mov	r4, #0
   16c90:	mov	r1, r5
   16c94:	ldr	r0, [sp, #40]	; 0x28
   16c98:	bl	10f3c <strchr@plt>
   16c9c:	cmp	r0, #0
   16ca0:	beq	16db8 <__assert_fail@plt+0x5d74>
   16ca4:	sub	r3, r5, #69	; 0x45
   16ca8:	cmp	r3, #47	; 0x2f
   16cac:	ldrls	pc, [pc, r3, lsl #2]
   16cb0:	b	16f04 <__assert_fail@plt+0x5ec0>
   16cb4:	andeq	r6, r1, r8, asr #27
   16cb8:	andeq	r6, r1, r4, lsl #30
   16cbc:	andeq	r6, r1, r8, asr #27
   16cc0:	andeq	r6, r1, r4, lsl #30
   16cc4:	andeq	r6, r1, r4, lsl #30
   16cc8:	andeq	r6, r1, r4, lsl #30
   16ccc:	andeq	r6, r1, r8, asr #27
   16cd0:	andeq	r6, r1, r4, lsl #30
   16cd4:	andeq	r6, r1, r8, asr #27
   16cd8:	andeq	r6, r1, r4, lsl #30
   16cdc:	andeq	r6, r1, r4, lsl #30
   16ce0:	andeq	r6, r1, r8, asr #27
   16ce4:	andeq	r6, r1, r4, lsl #30
   16ce8:	andeq	r6, r1, r4, lsl #30
   16cec:	andeq	r6, r1, r4, lsl #30
   16cf0:	andeq	r6, r1, r8, asr #27
   16cf4:	andeq	r6, r1, r4, lsl #30
   16cf8:	andeq	r6, r1, r4, lsl #30
   16cfc:	andeq	r6, r1, r4, lsl #30
   16d00:	andeq	r6, r1, r4, lsl #30
   16d04:	andeq	r6, r1, r8, asr #27
   16d08:	andeq	r6, r1, r8, asr #27
   16d0c:	andeq	r6, r1, r4, lsl #30
   16d10:	andeq	r6, r1, r4, lsl #30
   16d14:	andeq	r6, r1, r4, lsl #30
   16d18:	andeq	r6, r1, r4, lsl #30
   16d1c:	andeq	r6, r1, r4, lsl #30
   16d20:	andeq	r6, r1, r4, lsl #30
   16d24:	andeq	r6, r1, r4, lsl #30
   16d28:	andeq	r6, r1, r4, lsl #30
   16d2c:	andeq	r6, r1, r4, lsl #30
   16d30:	andeq	r6, r1, r4, lsl #30
   16d34:	andeq	r6, r1, r4, lsl #30
   16d38:	andeq	r6, r1, r4, lsl #30
   16d3c:	andeq	r6, r1, r8, asr #27
   16d40:	andeq	r6, r1, r4, lsl #30
   16d44:	andeq	r6, r1, r4, lsl #30
   16d48:	andeq	r6, r1, r4, lsl #30
   16d4c:	andeq	r6, r1, r8, asr #27
   16d50:	andeq	r6, r1, r4, lsl #30
   16d54:	andeq	r6, r1, r8, asr #27
   16d58:	andeq	r6, r1, r4, lsl #30
   16d5c:	andeq	r6, r1, r4, lsl #30
   16d60:	andeq	r6, r1, r4, lsl #30
   16d64:	andeq	r6, r1, r4, lsl #30
   16d68:	andeq	r6, r1, r4, lsl #30
   16d6c:	andeq	r6, r1, r4, lsl #30
   16d70:	andeq	r6, r1, r8, asr #27
   16d74:	mov	r4, #0
   16d78:	ldr	r3, [sp, #40]	; 0x28
   16d7c:	cmp	r3, #0
   16d80:	streq	r0, [r9]
   16d84:	beq	16d9c <__assert_fail@plt+0x5d58>
   16d88:	ldrb	r5, [r7]
   16d8c:	cmp	r5, #0
   16d90:	bne	16c90 <__assert_fail@plt+0x5c4c>
   16d94:	ldr	r3, [sp]
   16d98:	str	r3, [r9]
   16d9c:	mov	r0, r4
   16da0:	add	sp, sp, #12
   16da4:	ldrd	r4, [sp]
   16da8:	ldrd	r6, [sp, #8]
   16dac:	ldrd	r8, [sp, #16]
   16db0:	add	sp, sp, #24
   16db4:	pop	{pc}		; (ldr pc, [sp], #4)
   16db8:	ldr	r3, [sp]
   16dbc:	str	r3, [r9]
   16dc0:	orr	r4, r4, #2
   16dc4:	b	16d9c <__assert_fail@plt+0x5d58>
   16dc8:	mov	r1, #48	; 0x30
   16dcc:	ldr	r0, [sp, #40]	; 0x28
   16dd0:	bl	10f3c <strchr@plt>
   16dd4:	cmp	r0, #0
   16dd8:	beq	16f10 <__assert_fail@plt+0x5ecc>
   16ddc:	ldrb	r3, [r7, #1]
   16de0:	cmp	r3, #68	; 0x44
   16de4:	beq	16f1c <__assert_fail@plt+0x5ed8>
   16de8:	cmp	r3, #105	; 0x69
   16dec:	beq	16eec <__assert_fail@plt+0x5ea8>
   16df0:	cmp	r3, #66	; 0x42
   16df4:	moveq	r7, #2
   16df8:	movne	r7, #1
   16dfc:	moveq	r1, #1000	; 0x3e8
   16e00:	movne	r1, #1024	; 0x400
   16e04:	sub	r5, r5, #66	; 0x42
   16e08:	cmp	r5, #53	; 0x35
   16e0c:	ldrls	pc, [pc, r5, lsl #2]
   16e10:	b	1702c <__assert_fail@plt+0x5fe8>
   16e14:	andeq	r6, r1, r4, asr pc
   16e18:	andeq	r7, r1, ip, lsr #32
   16e1c:	andeq	r7, r1, ip, lsr #32
   16e20:	andeq	r6, r1, r0, lsl #31
   16e24:	andeq	r7, r1, ip, lsr #32
   16e28:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   16e2c:	andeq	r7, r1, ip, lsr #32
   16e30:	andeq	r7, r1, ip, lsr #32
   16e34:	andeq	r7, r1, ip, lsr #32
   16e38:	andeq	r6, r1, r0, lsr #31
   16e3c:	andeq	r7, r1, ip, lsr #32
   16e40:			; <UNDEFINED> instruction: 0x00016fb0
   16e44:	andeq	r7, r1, ip, lsr #32
   16e48:	andeq	r7, r1, ip, lsr #32
   16e4c:	andeq	r6, r1, r0, asr #31
   16e50:	andeq	r7, r1, ip, lsr #32
   16e54:	andeq	r7, r1, ip, lsr #32
   16e58:	andeq	r7, r1, ip, lsr #32
   16e5c:	ldrdeq	r6, [r1], -r0
   16e60:	andeq	r7, r1, ip, lsr #32
   16e64:	andeq	r7, r1, ip, lsr #32
   16e68:	andeq	r7, r1, ip, lsr #32
   16e6c:	andeq	r7, r1, ip, lsr #32
   16e70:	andeq	r7, r1, ip
   16e74:	andeq	r7, r1, ip, lsl r0
   16e78:	andeq	r7, r1, ip, lsr #32
   16e7c:	andeq	r7, r1, ip, lsr #32
   16e80:	andeq	r7, r1, ip, lsr #32
   16e84:	andeq	r7, r1, ip, lsr #32
   16e88:	andeq	r7, r1, ip, lsr #32
   16e8c:	andeq	r7, r1, ip, lsr #32
   16e90:	andeq	r7, r1, ip, lsr #32
   16e94:	andeq	r6, r1, r8, lsr #30
   16e98:	andeq	r7, r1, ip, lsr r0
   16e9c:	andeq	r7, r1, ip, lsr #32
   16ea0:	andeq	r7, r1, ip, lsr #32
   16ea4:	andeq	r7, r1, ip, lsr #32
   16ea8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   16eac:	andeq	r7, r1, ip, lsr #32
   16eb0:	andeq	r7, r1, ip, lsr #32
   16eb4:	andeq	r7, r1, ip, lsr #32
   16eb8:	andeq	r6, r1, r0, lsr #31
   16ebc:	andeq	r7, r1, ip, lsr #32
   16ec0:			; <UNDEFINED> instruction: 0x00016fb0
   16ec4:	andeq	r7, r1, ip, lsr #32
   16ec8:	andeq	r7, r1, ip, lsr #32
   16ecc:	andeq	r7, r1, ip, lsr #32
   16ed0:	andeq	r7, r1, ip, lsr #32
   16ed4:	andeq	r7, r1, ip, lsr #32
   16ed8:	andeq	r7, r1, ip, lsr #32
   16edc:	ldrdeq	r6, [r1], -r0
   16ee0:	andeq	r7, r1, ip, lsr #32
   16ee4:	andeq	r7, r1, ip, lsr #32
   16ee8:	andeq	r6, r1, r0, ror #31
   16eec:	ldrb	r3, [r7, #2]
   16ef0:	cmp	r3, #66	; 0x42
   16ef4:	movne	r7, #1
   16ef8:	moveq	r7, #3
   16efc:	mov	r1, #1024	; 0x400
   16f00:	b	16e04 <__assert_fail@plt+0x5dc0>
   16f04:	mov	r7, #1
   16f08:	mov	r1, #1024	; 0x400
   16f0c:	b	16e04 <__assert_fail@plt+0x5dc0>
   16f10:	mov	r7, #1
   16f14:	mov	r1, #1024	; 0x400
   16f18:	b	16e04 <__assert_fail@plt+0x5dc0>
   16f1c:	mov	r7, #2
   16f20:	mov	r1, #1000	; 0x3e8
   16f24:	b	16e04 <__assert_fail@plt+0x5dc0>
   16f28:	ldr	r3, [sp]
   16f2c:	lsl	r2, r3, #9
   16f30:	lsr	r3, r3, #23
   16f34:	cmp	r3, #0
   16f38:	mvnne	r3, #0
   16f3c:	strne	r3, [sp]
   16f40:	movne	r0, #1
   16f44:	bne	17040 <__assert_fail@plt+0x5ffc>
   16f48:	str	r2, [sp]
   16f4c:	mov	r0, #0
   16f50:	b	17040 <__assert_fail@plt+0x5ffc>
   16f54:	ldr	r3, [sp]
   16f58:	lsl	r2, r3, #10
   16f5c:	lsr	r3, r3, #22
   16f60:	cmp	r3, #0
   16f64:	mvnne	r3, #0
   16f68:	strne	r3, [sp]
   16f6c:	movne	r0, #1
   16f70:	bne	17040 <__assert_fail@plt+0x5ffc>
   16f74:	str	r2, [sp]
   16f78:	mov	r0, #0
   16f7c:	b	17040 <__assert_fail@plt+0x5ffc>
   16f80:	mov	r2, #6
   16f84:	mov	r0, sp
   16f88:	bl	16b04 <__assert_fail@plt+0x5ac0>
   16f8c:	b	17040 <__assert_fail@plt+0x5ffc>
   16f90:	mov	r2, #3
   16f94:	mov	r0, sp
   16f98:	bl	16b04 <__assert_fail@plt+0x5ac0>
   16f9c:	b	17040 <__assert_fail@plt+0x5ffc>
   16fa0:	mov	r2, #1
   16fa4:	mov	r0, sp
   16fa8:	bl	16b04 <__assert_fail@plt+0x5ac0>
   16fac:	b	17040 <__assert_fail@plt+0x5ffc>
   16fb0:	mov	r2, #2
   16fb4:	mov	r0, sp
   16fb8:	bl	16b04 <__assert_fail@plt+0x5ac0>
   16fbc:	b	17040 <__assert_fail@plt+0x5ffc>
   16fc0:	mov	r2, #5
   16fc4:	mov	r0, sp
   16fc8:	bl	16b04 <__assert_fail@plt+0x5ac0>
   16fcc:	b	17040 <__assert_fail@plt+0x5ffc>
   16fd0:	mov	r2, #4
   16fd4:	mov	r0, sp
   16fd8:	bl	16b04 <__assert_fail@plt+0x5ac0>
   16fdc:	b	17040 <__assert_fail@plt+0x5ffc>
   16fe0:	ldr	r3, [sp]
   16fe4:	lsl	r2, r3, #1
   16fe8:	lsr	r3, r3, #31
   16fec:	cmp	r3, #0
   16ff0:	mvnne	r3, #0
   16ff4:	strne	r3, [sp]
   16ff8:	movne	r0, #1
   16ffc:	bne	17040 <__assert_fail@plt+0x5ffc>
   17000:	str	r2, [sp]
   17004:	mov	r0, #0
   17008:	b	17040 <__assert_fail@plt+0x5ffc>
   1700c:	mov	r2, #8
   17010:	mov	r0, sp
   17014:	bl	16b04 <__assert_fail@plt+0x5ac0>
   17018:	b	17040 <__assert_fail@plt+0x5ffc>
   1701c:	mov	r2, #7
   17020:	mov	r0, sp
   17024:	bl	16b04 <__assert_fail@plt+0x5ac0>
   17028:	b	17040 <__assert_fail@plt+0x5ffc>
   1702c:	ldr	r3, [sp]
   17030:	str	r3, [r9]
   17034:	orr	r4, r4, #2
   17038:	b	16d9c <__assert_fail@plt+0x5d58>
   1703c:	mov	r0, #0
   17040:	orr	r4, r4, r0
   17044:	ldr	r3, [r6]
   17048:	add	r2, r3, r7
   1704c:	str	r2, [r6]
   17050:	ldrb	r3, [r3, r7]
   17054:	cmp	r3, #0
   17058:	orrne	r4, r4, #2
   1705c:	b	16d94 <__assert_fail@plt+0x5d50>
   17060:	mov	r4, #4
   17064:	b	16d9c <__assert_fail@plt+0x5d58>
   17068:	mov	r4, #4
   1706c:	b	16d9c <__assert_fail@plt+0x5d58>
   17070:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17074:	strd	r6, [sp, #8]
   17078:	strd	r8, [sp, #16]
   1707c:	strd	sl, [sp, #24]
   17080:	str	lr, [sp, #32]
   17084:	sub	sp, sp, #12
   17088:	str	r0, [sp, #4]
   1708c:	cmp	r2, #0
   17090:	beq	1718c <__assert_fail@plt+0x6148>
   17094:	sub	ip, r2, #1
   17098:	ldrd	r2, [r0]
   1709c:	mov	r0, #0
   170a0:	mov	r8, r1
   170a4:	asr	r9, r1, #31
   170a8:	str	r1, [sp]
   170ac:	b	170fc <__assert_fail@plt+0x60b8>
   170b0:	orrs	r4, r2, r3
   170b4:	movne	lr, #1
   170b8:	b	1710c <__assert_fail@plt+0x60c8>
   170bc:	mov	sl, r3
   170c0:	ldr	fp, [sp]
   170c4:	umull	r6, r7, r1, r2
   170c8:	mov	r4, r7
   170cc:	mov	r5, #0
   170d0:	umlal	r4, r5, sl, fp
   170d4:	cmp	r5, #0
   170d8:	bne	17140 <__assert_fail@plt+0x60fc>
   170dc:	cmp	lr, #0
   170e0:	bne	17158 <__assert_fail@plt+0x6114>
   170e4:	mov	r2, r6
   170e8:	mov	r3, r4
   170ec:	orr	r0, r0, lr
   170f0:	sub	ip, ip, #1
   170f4:	cmn	ip, #1
   170f8:	beq	17168 <__assert_fail@plt+0x6124>
   170fc:	mov	lr, #0
   17100:	cmp	r8, #0
   17104:	sbcs	r4, r9, #0
   17108:	blt	170b0 <__assert_fail@plt+0x606c>
   1710c:	cmp	r9, #0
   17110:	bne	1712c <__assert_fail@plt+0x60e8>
   17114:	cmp	r3, #0
   17118:	bne	170bc <__assert_fail@plt+0x6078>
   1711c:	umull	r2, r3, r1, r2
   17120:	mov	r6, r2
   17124:	mov	r4, r3
   17128:	b	170dc <__assert_fail@plt+0x6098>
   1712c:	cmp	r3, #0
   17130:	bne	17140 <__assert_fail@plt+0x60fc>
   17134:	mov	sl, r9
   17138:	mov	fp, r2
   1713c:	b	170c4 <__assert_fail@plt+0x6080>
   17140:	mul	r4, r1, r3
   17144:	mla	r4, r2, r9, r4
   17148:	umull	r6, r7, r1, r2
   1714c:	add	r4, r4, r7
   17150:	mov	lr, #1
   17154:	b	170dc <__assert_fail@plt+0x6098>
   17158:	mvn	r2, #0
   1715c:	mvn	r3, #0
   17160:	mov	lr, #1
   17164:	b	170ec <__assert_fail@plt+0x60a8>
   17168:	ldr	r1, [sp, #4]
   1716c:	strd	r2, [r1]
   17170:	add	sp, sp, #12
   17174:	ldrd	r4, [sp]
   17178:	ldrd	r6, [sp, #8]
   1717c:	ldrd	r8, [sp, #16]
   17180:	ldrd	sl, [sp, #24]
   17184:	add	sp, sp, #32
   17188:	pop	{pc}		; (ldr pc, [sp], #4)
   1718c:	mov	r0, #0
   17190:	b	17170 <__assert_fail@plt+0x612c>
   17194:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17198:	strd	r6, [sp, #8]
   1719c:	strd	r8, [sp, #16]
   171a0:	str	lr, [sp, #24]
   171a4:	sub	sp, sp, #20
   171a8:	cmp	r2, #36	; 0x24
   171ac:	bhi	17200 <__assert_fail@plt+0x61bc>
   171b0:	mov	r5, r0
   171b4:	mov	r6, r1
   171b8:	mov	r7, r2
   171bc:	mov	r9, r3
   171c0:	cmp	r1, #0
   171c4:	addeq	r6, sp, #12
   171c8:	bl	10f48 <__errno_location@plt>
   171cc:	mov	r8, r0
   171d0:	mov	r3, #0
   171d4:	str	r3, [r0]
   171d8:	ldrb	r4, [r5]
   171dc:	bl	10f0c <__ctype_b_loc@plt>
   171e0:	ldr	r1, [r0]
   171e4:	mov	r2, r5
   171e8:	lsl	r3, r4, #1
   171ec:	ldrh	r3, [r1, r3]
   171f0:	tst	r3, #8192	; 0x2000
   171f4:	beq	17220 <__assert_fail@plt+0x61dc>
   171f8:	ldrb	r4, [r2, #1]!
   171fc:	b	171e8 <__assert_fail@plt+0x61a4>
   17200:	movw	r3, #37096	; 0x90e8
   17204:	movt	r3, #1
   17208:	mov	r2, #85	; 0x55
   1720c:	movw	r1, #37040	; 0x90b0
   17210:	movt	r1, #1
   17214:	movw	r0, #37056	; 0x90c0
   17218:	movt	r0, #1
   1721c:	bl	11044 <__assert_fail@plt>
   17220:	cmp	r4, #45	; 0x2d
   17224:	moveq	r4, #4
   17228:	beq	173bc <__assert_fail@plt+0x6378>
   1722c:	mov	r3, #0
   17230:	mov	r2, r7
   17234:	mov	r1, r6
   17238:	mov	r0, r5
   1723c:	bl	10e04 <__strtoull_internal@plt>
   17240:	strd	r0, [sp]
   17244:	ldr	r7, [r6]
   17248:	cmp	r7, r5
   1724c:	beq	17270 <__assert_fail@plt+0x622c>
   17250:	ldr	r3, [r8]
   17254:	cmp	r3, #0
   17258:	beq	17394 <__assert_fail@plt+0x6350>
   1725c:	cmp	r3, #34	; 0x22
   17260:	moveq	r4, #1
   17264:	beq	17398 <__assert_fail@plt+0x6354>
   17268:	mov	r4, #4
   1726c:	b	173bc <__assert_fail@plt+0x6378>
   17270:	ldr	r3, [sp, #48]	; 0x30
   17274:	cmp	r3, #0
   17278:	beq	176d4 <__assert_fail@plt+0x6690>
   1727c:	ldrb	r1, [r5]
   17280:	cmp	r1, #0
   17284:	moveq	r4, #4
   17288:	beq	173bc <__assert_fail@plt+0x6378>
   1728c:	mov	r0, r3
   17290:	bl	10f3c <strchr@plt>
   17294:	cmp	r0, #0
   17298:	beq	176dc <__assert_fail@plt+0x6698>
   1729c:	mov	r2, #1
   172a0:	mov	r3, #0
   172a4:	strd	r2, [sp]
   172a8:	ldrb	r5, [r7]
   172ac:	mov	r4, #0
   172b0:	mov	r1, r5
   172b4:	ldr	r0, [sp, #48]	; 0x30
   172b8:	bl	10f3c <strchr@plt>
   172bc:	cmp	r0, #0
   172c0:	beq	173d8 <__assert_fail@plt+0x6394>
   172c4:	sub	r3, r5, #69	; 0x45
   172c8:	cmp	r3, #47	; 0x2f
   172cc:	ldrls	pc, [pc, r3, lsl #2]
   172d0:	b	17524 <__assert_fail@plt+0x64e0>
   172d4:	andeq	r7, r1, r8, ror #7
   172d8:	andeq	r7, r1, r4, lsr #10
   172dc:	andeq	r7, r1, r8, ror #7
   172e0:	andeq	r7, r1, r4, lsr #10
   172e4:	andeq	r7, r1, r4, lsr #10
   172e8:	andeq	r7, r1, r4, lsr #10
   172ec:	andeq	r7, r1, r8, ror #7
   172f0:	andeq	r7, r1, r4, lsr #10
   172f4:	andeq	r7, r1, r8, ror #7
   172f8:	andeq	r7, r1, r4, lsr #10
   172fc:	andeq	r7, r1, r4, lsr #10
   17300:	andeq	r7, r1, r8, ror #7
   17304:	andeq	r7, r1, r4, lsr #10
   17308:	andeq	r7, r1, r4, lsr #10
   1730c:	andeq	r7, r1, r4, lsr #10
   17310:	andeq	r7, r1, r8, ror #7
   17314:	andeq	r7, r1, r4, lsr #10
   17318:	andeq	r7, r1, r4, lsr #10
   1731c:	andeq	r7, r1, r4, lsr #10
   17320:	andeq	r7, r1, r4, lsr #10
   17324:	andeq	r7, r1, r8, ror #7
   17328:	andeq	r7, r1, r8, ror #7
   1732c:	andeq	r7, r1, r4, lsr #10
   17330:	andeq	r7, r1, r4, lsr #10
   17334:	andeq	r7, r1, r4, lsr #10
   17338:	andeq	r7, r1, r4, lsr #10
   1733c:	andeq	r7, r1, r4, lsr #10
   17340:	andeq	r7, r1, r4, lsr #10
   17344:	andeq	r7, r1, r4, lsr #10
   17348:	andeq	r7, r1, r4, lsr #10
   1734c:	andeq	r7, r1, r4, lsr #10
   17350:	andeq	r7, r1, r4, lsr #10
   17354:	andeq	r7, r1, r4, lsr #10
   17358:	andeq	r7, r1, r4, lsr #10
   1735c:	andeq	r7, r1, r8, ror #7
   17360:	andeq	r7, r1, r4, lsr #10
   17364:	andeq	r7, r1, r4, lsr #10
   17368:	andeq	r7, r1, r4, lsr #10
   1736c:	andeq	r7, r1, r8, ror #7
   17370:	andeq	r7, r1, r4, lsr #10
   17374:	andeq	r7, r1, r8, ror #7
   17378:	andeq	r7, r1, r4, lsr #10
   1737c:	andeq	r7, r1, r4, lsr #10
   17380:	andeq	r7, r1, r4, lsr #10
   17384:	andeq	r7, r1, r4, lsr #10
   17388:	andeq	r7, r1, r4, lsr #10
   1738c:	andeq	r7, r1, r4, lsr #10
   17390:	andeq	r7, r1, r8, ror #7
   17394:	mov	r4, #0
   17398:	ldr	r3, [sp, #48]	; 0x30
   1739c:	cmp	r3, #0
   173a0:	strdeq	r0, [r9]
   173a4:	beq	173bc <__assert_fail@plt+0x6378>
   173a8:	ldrb	r5, [r7]
   173ac:	cmp	r5, #0
   173b0:	bne	172b0 <__assert_fail@plt+0x626c>
   173b4:	ldrd	r2, [sp]
   173b8:	strd	r2, [r9]
   173bc:	mov	r0, r4
   173c0:	add	sp, sp, #20
   173c4:	ldrd	r4, [sp]
   173c8:	ldrd	r6, [sp, #8]
   173cc:	ldrd	r8, [sp, #16]
   173d0:	add	sp, sp, #24
   173d4:	pop	{pc}		; (ldr pc, [sp], #4)
   173d8:	ldrd	r2, [sp]
   173dc:	strd	r2, [r9]
   173e0:	orr	r4, r4, #2
   173e4:	b	173bc <__assert_fail@plt+0x6378>
   173e8:	mov	r1, #48	; 0x30
   173ec:	ldr	r0, [sp, #48]	; 0x30
   173f0:	bl	10f3c <strchr@plt>
   173f4:	cmp	r0, #0
   173f8:	beq	17530 <__assert_fail@plt+0x64ec>
   173fc:	ldrb	r3, [r7, #1]
   17400:	cmp	r3, #68	; 0x44
   17404:	beq	1753c <__assert_fail@plt+0x64f8>
   17408:	cmp	r3, #105	; 0x69
   1740c:	beq	1750c <__assert_fail@plt+0x64c8>
   17410:	cmp	r3, #66	; 0x42
   17414:	moveq	r7, #2
   17418:	movne	r7, #1
   1741c:	moveq	r1, #1000	; 0x3e8
   17420:	movne	r1, #1024	; 0x400
   17424:	sub	r5, r5, #66	; 0x42
   17428:	cmp	r5, #53	; 0x35
   1742c:	ldrls	pc, [pc, r5, lsl #2]
   17430:	b	176a0 <__assert_fail@plt+0x665c>
   17434:	muleq	r1, r0, r5
   17438:	andeq	r7, r1, r0, lsr #13
   1743c:	andeq	r7, r1, r0, lsr #13
   17440:	ldrdeq	r7, [r1], -r8
   17444:	andeq	r7, r1, r0, lsr #13
   17448:	andeq	r7, r1, r8, ror #11
   1744c:	andeq	r7, r1, r0, lsr #13
   17450:	andeq	r7, r1, r0, lsr #13
   17454:	andeq	r7, r1, r0, lsr #13
   17458:	strdeq	r7, [r1], -r8
   1745c:	andeq	r7, r1, r0, lsr #13
   17460:	andeq	r7, r1, r8, lsl #12
   17464:	andeq	r7, r1, r0, lsr #13
   17468:	andeq	r7, r1, r0, lsr #13
   1746c:	andeq	r7, r1, r8, lsl r6
   17470:	andeq	r7, r1, r0, lsr #13
   17474:	andeq	r7, r1, r0, lsr #13
   17478:	andeq	r7, r1, r0, lsr #13
   1747c:	andeq	r7, r1, r8, lsr #12
   17480:	andeq	r7, r1, r0, lsr #13
   17484:	andeq	r7, r1, r0, lsr #13
   17488:	andeq	r7, r1, r0, lsr #13
   1748c:	andeq	r7, r1, r0, lsr #13
   17490:	andeq	r7, r1, r0, lsl #13
   17494:	muleq	r1, r0, r6
   17498:	andeq	r7, r1, r0, lsr #13
   1749c:	andeq	r7, r1, r0, lsr #13
   174a0:	andeq	r7, r1, r0, lsr #13
   174a4:	andeq	r7, r1, r0, lsr #13
   174a8:	andeq	r7, r1, r0, lsr #13
   174ac:	andeq	r7, r1, r0, lsr #13
   174b0:	andeq	r7, r1, r0, lsr #13
   174b4:	andeq	r7, r1, r8, asr #10
   174b8:			; <UNDEFINED> instruction: 0x000176b0
   174bc:	andeq	r7, r1, r0, lsr #13
   174c0:	andeq	r7, r1, r0, lsr #13
   174c4:	andeq	r7, r1, r0, lsr #13
   174c8:	andeq	r7, r1, r8, ror #11
   174cc:	andeq	r7, r1, r0, lsr #13
   174d0:	andeq	r7, r1, r0, lsr #13
   174d4:	andeq	r7, r1, r0, lsr #13
   174d8:	strdeq	r7, [r1], -r8
   174dc:	andeq	r7, r1, r0, lsr #13
   174e0:	andeq	r7, r1, r8, lsl #12
   174e4:	andeq	r7, r1, r0, lsr #13
   174e8:	andeq	r7, r1, r0, lsr #13
   174ec:	andeq	r7, r1, r0, lsr #13
   174f0:	andeq	r7, r1, r0, lsr #13
   174f4:	andeq	r7, r1, r0, lsr #13
   174f8:	andeq	r7, r1, r0, lsr #13
   174fc:	andeq	r7, r1, r8, lsr #12
   17500:	andeq	r7, r1, r0, lsr #13
   17504:	andeq	r7, r1, r0, lsr #13
   17508:	andeq	r7, r1, r8, lsr r6
   1750c:	ldrb	r3, [r7, #2]
   17510:	cmp	r3, #66	; 0x42
   17514:	movne	r7, #1
   17518:	moveq	r7, #3
   1751c:	mov	r1, #1024	; 0x400
   17520:	b	17424 <__assert_fail@plt+0x63e0>
   17524:	mov	r7, #1
   17528:	mov	r1, #1024	; 0x400
   1752c:	b	17424 <__assert_fail@plt+0x63e0>
   17530:	mov	r7, #1
   17534:	mov	r1, #1024	; 0x400
   17538:	b	17424 <__assert_fail@plt+0x63e0>
   1753c:	mov	r7, #2
   17540:	mov	r1, #1000	; 0x3e8
   17544:	b	17424 <__assert_fail@plt+0x63e0>
   17548:	ldr	r3, [sp]
   1754c:	ldr	ip, [sp, #4]
   17550:	lsl	r2, ip, #9
   17554:	orr	r2, r2, r3, lsr #23
   17558:	lsl	r3, r3, #9
   1755c:	mov	r0, #0
   17560:	mov	r1, r0
   17564:	lsr	r0, ip, #23
   17568:	orrs	r1, r0, r1
   1756c:	streq	r3, [sp]
   17570:	streq	r2, [sp, #4]
   17574:	moveq	r0, #0
   17578:	beq	176b4 <__assert_fail@plt+0x6670>
   1757c:	mvn	r2, #0
   17580:	mvn	r3, #0
   17584:	strd	r2, [sp]
   17588:	mov	r0, #1
   1758c:	b	176b4 <__assert_fail@plt+0x6670>
   17590:	ldr	r3, [sp]
   17594:	ldr	ip, [sp, #4]
   17598:	lsl	r2, ip, #10
   1759c:	orr	r2, r2, r3, lsr #22
   175a0:	lsl	r3, r3, #10
   175a4:	mov	r0, #0
   175a8:	mov	r1, r0
   175ac:	lsr	r0, ip, #22
   175b0:	orrs	r1, r0, r1
   175b4:	streq	r3, [sp]
   175b8:	streq	r2, [sp, #4]
   175bc:	moveq	r0, #0
   175c0:	beq	176b4 <__assert_fail@plt+0x6670>
   175c4:	mvn	r2, #0
   175c8:	mvn	r3, #0
   175cc:	strd	r2, [sp]
   175d0:	mov	r0, #1
   175d4:	b	176b4 <__assert_fail@plt+0x6670>
   175d8:	mov	r2, #6
   175dc:	mov	r0, sp
   175e0:	bl	17070 <__assert_fail@plt+0x602c>
   175e4:	b	176b4 <__assert_fail@plt+0x6670>
   175e8:	mov	r2, #3
   175ec:	mov	r0, sp
   175f0:	bl	17070 <__assert_fail@plt+0x602c>
   175f4:	b	176b4 <__assert_fail@plt+0x6670>
   175f8:	mov	r2, #1
   175fc:	mov	r0, sp
   17600:	bl	17070 <__assert_fail@plt+0x602c>
   17604:	b	176b4 <__assert_fail@plt+0x6670>
   17608:	mov	r2, #2
   1760c:	mov	r0, sp
   17610:	bl	17070 <__assert_fail@plt+0x602c>
   17614:	b	176b4 <__assert_fail@plt+0x6670>
   17618:	mov	r2, #5
   1761c:	mov	r0, sp
   17620:	bl	17070 <__assert_fail@plt+0x602c>
   17624:	b	176b4 <__assert_fail@plt+0x6670>
   17628:	mov	r2, #4
   1762c:	mov	r0, sp
   17630:	bl	17070 <__assert_fail@plt+0x602c>
   17634:	b	176b4 <__assert_fail@plt+0x6670>
   17638:	ldr	r3, [sp]
   1763c:	ldr	r2, [sp, #4]
   17640:	adds	r3, r3, r3
   17644:	adc	r2, r2, r2
   17648:	mov	r1, #0
   1764c:	mov	r0, r1
   17650:	ldr	r1, [sp, #4]
   17654:	lsr	r1, r1, #31
   17658:	orrs	r1, r1, r0
   1765c:	streq	r3, [sp]
   17660:	streq	r2, [sp, #4]
   17664:	moveq	r0, #0
   17668:	beq	176b4 <__assert_fail@plt+0x6670>
   1766c:	mvn	r2, #0
   17670:	mvn	r3, #0
   17674:	strd	r2, [sp]
   17678:	mov	r0, #1
   1767c:	b	176b4 <__assert_fail@plt+0x6670>
   17680:	mov	r2, #8
   17684:	mov	r0, sp
   17688:	bl	17070 <__assert_fail@plt+0x602c>
   1768c:	b	176b4 <__assert_fail@plt+0x6670>
   17690:	mov	r2, #7
   17694:	mov	r0, sp
   17698:	bl	17070 <__assert_fail@plt+0x602c>
   1769c:	b	176b4 <__assert_fail@plt+0x6670>
   176a0:	ldrd	r2, [sp]
   176a4:	strd	r2, [r9]
   176a8:	orr	r4, r4, #2
   176ac:	b	173bc <__assert_fail@plt+0x6378>
   176b0:	mov	r0, #0
   176b4:	orr	r4, r4, r0
   176b8:	ldr	r3, [r6]
   176bc:	add	r2, r3, r7
   176c0:	str	r2, [r6]
   176c4:	ldrb	r3, [r3, r7]
   176c8:	cmp	r3, #0
   176cc:	orrne	r4, r4, #2
   176d0:	b	173b4 <__assert_fail@plt+0x6370>
   176d4:	mov	r4, #4
   176d8:	b	173bc <__assert_fail@plt+0x6378>
   176dc:	mov	r4, #4
   176e0:	b	173bc <__assert_fail@plt+0x6378>
   176e4:	strd	r4, [sp, #-16]!
   176e8:	str	r6, [sp, #8]
   176ec:	str	lr, [sp, #12]
   176f0:	cmp	r1, #0
   176f4:	cmpne	r0, #0
   176f8:	beq	17734 <__assert_fail@plt+0x66f0>
   176fc:	mov	r2, r0
   17700:	mov	r3, r1
   17704:	umull	r4, r5, r0, r1
   17708:	adds	r1, r5, #0
   1770c:	movne	r1, #1
   17710:	cmp	r4, #0
   17714:	movlt	r1, #1
   17718:	cmp	r1, #0
   1771c:	beq	1773c <__assert_fail@plt+0x66f8>
   17720:	bl	10f48 <__errno_location@plt>
   17724:	mov	r3, #12
   17728:	str	r3, [r0]
   1772c:	mov	r0, #0
   17730:	b	17748 <__assert_fail@plt+0x6704>
   17734:	mov	r3, #1
   17738:	mov	r2, r3
   1773c:	mov	r1, r3
   17740:	mov	r0, r2
   17744:	bl	10da4 <calloc@plt>
   17748:	ldrd	r4, [sp]
   1774c:	ldr	r6, [sp, #8]
   17750:	add	sp, sp, #12
   17754:	pop	{pc}		; (ldr pc, [sp], #4)
   17758:	str	r4, [sp, #-8]!
   1775c:	str	lr, [sp, #4]
   17760:	cmp	r0, #0
   17764:	beq	17780 <__assert_fail@plt+0x673c>
   17768:	bge	17784 <__assert_fail@plt+0x6740>
   1776c:	bl	10f48 <__errno_location@plt>
   17770:	mov	r3, #12
   17774:	str	r3, [r0]
   17778:	mov	r0, #0
   1777c:	b	17788 <__assert_fail@plt+0x6744>
   17780:	mov	r0, #1
   17784:	bl	10ec4 <malloc@plt>
   17788:	ldr	r4, [sp]
   1778c:	add	sp, sp, #4
   17790:	pop	{pc}		; (ldr pc, [sp], #4)
   17794:	str	r4, [sp, #-8]!
   17798:	str	lr, [sp, #4]
   1779c:	cmp	r0, #0
   177a0:	beq	177c4 <__assert_fail@plt+0x6780>
   177a4:	cmp	r1, #0
   177a8:	beq	177d0 <__assert_fail@plt+0x678c>
   177ac:	cmp	r1, #0
   177b0:	blt	177dc <__assert_fail@plt+0x6798>
   177b4:	bl	10e4c <realloc@plt>
   177b8:	ldr	r4, [sp]
   177bc:	add	sp, sp, #4
   177c0:	pop	{pc}		; (ldr pc, [sp], #4)
   177c4:	mov	r0, r1
   177c8:	bl	17758 <__assert_fail@plt+0x6714>
   177cc:	b	177b8 <__assert_fail@plt+0x6774>
   177d0:	bl	1374c <__assert_fail@plt+0x2708>
   177d4:	mov	r0, #0
   177d8:	b	177b8 <__assert_fail@plt+0x6774>
   177dc:	bl	10f48 <__errno_location@plt>
   177e0:	mov	r3, #12
   177e4:	str	r3, [r0]
   177e8:	mov	r0, #0
   177ec:	b	177b8 <__assert_fail@plt+0x6774>
   177f0:	strd	r4, [sp, #-16]!
   177f4:	str	r6, [sp, #8]
   177f8:	str	lr, [sp, #12]
   177fc:	mov	r5, r0
   17800:	bl	10e94 <__fpending@plt>
   17804:	mov	r6, r0
   17808:	ldr	r4, [r5]
   1780c:	and	r4, r4, #32
   17810:	mov	r0, r5
   17814:	bl	13570 <__assert_fail@plt+0x252c>
   17818:	cmp	r4, #0
   1781c:	bne	17850 <__assert_fail@plt+0x680c>
   17820:	cmp	r0, #0
   17824:	beq	17840 <__assert_fail@plt+0x67fc>
   17828:	cmp	r6, #0
   1782c:	bne	1786c <__assert_fail@plt+0x6828>
   17830:	bl	10f48 <__errno_location@plt>
   17834:	ldr	r0, [r0]
   17838:	subs	r0, r0, #9
   1783c:	mvnne	r0, #0
   17840:	ldrd	r4, [sp]
   17844:	ldr	r6, [sp, #8]
   17848:	add	sp, sp, #12
   1784c:	pop	{pc}		; (ldr pc, [sp], #4)
   17850:	cmp	r0, #0
   17854:	bne	17874 <__assert_fail@plt+0x6830>
   17858:	bl	10f48 <__errno_location@plt>
   1785c:	mov	r3, #0
   17860:	str	r3, [r0]
   17864:	mvn	r0, #0
   17868:	b	17840 <__assert_fail@plt+0x67fc>
   1786c:	mvn	r0, #0
   17870:	b	17840 <__assert_fail@plt+0x67fc>
   17874:	mvn	r0, #0
   17878:	b	17840 <__assert_fail@plt+0x67fc>
   1787c:	push	{r1, r2, r3}
   17880:	strd	r4, [sp, #-16]!
   17884:	str	r6, [sp, #8]
   17888:	str	lr, [sp, #12]
   1788c:	sub	sp, sp, #12
   17890:	mov	r5, r0
   17894:	ldr	r1, [sp, #28]
   17898:	add	r3, sp, #32
   1789c:	str	r3, [sp, #4]
   178a0:	cmp	r1, #0
   178a4:	beq	178ec <__assert_fail@plt+0x68a8>
   178a8:	movw	r3, #1030	; 0x406
   178ac:	cmp	r1, r3
   178b0:	beq	17928 <__assert_fail@plt+0x68e4>
   178b4:	cmp	r1, #11
   178b8:	beq	17ad8 <__assert_fail@plt+0x6a94>
   178bc:	bgt	17a64 <__assert_fail@plt+0x6a20>
   178c0:	cmp	r1, #3
   178c4:	beq	17ad8 <__assert_fail@plt+0x6a94>
   178c8:	ble	17a24 <__assert_fail@plt+0x69e0>
   178cc:	cmp	r1, #8
   178d0:	beq	17a44 <__assert_fail@plt+0x6a00>
   178d4:	ble	17a3c <__assert_fail@plt+0x69f8>
   178d8:	cmp	r1, #9
   178dc:	beq	17ad8 <__assert_fail@plt+0x6a94>
   178e0:	cmp	r1, #10
   178e4:	bne	17a9c <__assert_fail@plt+0x6a58>
   178e8:	b	17a44 <__assert_fail@plt+0x6a00>
   178ec:	ldr	r3, [sp, #4]
   178f0:	add	r2, r3, #4
   178f4:	str	r2, [sp, #4]
   178f8:	ldr	r2, [r3]
   178fc:	mov	r1, #0
   17900:	bl	10fb4 <fcntl64@plt>
   17904:	mov	r4, r0
   17908:	mov	r0, r4
   1790c:	add	sp, sp, #12
   17910:	ldrd	r4, [sp]
   17914:	ldr	r6, [sp, #8]
   17918:	ldr	lr, [sp, #12]
   1791c:	add	sp, sp, #16
   17920:	add	sp, sp, #12
   17924:	bx	lr
   17928:	ldr	r3, [sp, #4]
   1792c:	add	r2, r3, #4
   17930:	str	r2, [sp, #4]
   17934:	ldr	r6, [r3]
   17938:	movw	r3, #41780	; 0xa334
   1793c:	movt	r3, #2
   17940:	ldr	r3, [r3]
   17944:	cmp	r3, #0
   17948:	blt	179b0 <__assert_fail@plt+0x696c>
   1794c:	mov	r2, r6
   17950:	movw	r1, #1030	; 0x406
   17954:	bl	10fb4 <fcntl64@plt>
   17958:	subs	r4, r0, #0
   1795c:	blt	17974 <__assert_fail@plt+0x6930>
   17960:	movw	r3, #41780	; 0xa334
   17964:	movt	r3, #2
   17968:	mov	r2, #1
   1796c:	str	r2, [r3]
   17970:	b	17908 <__assert_fail@plt+0x68c4>
   17974:	bl	10f48 <__errno_location@plt>
   17978:	ldr	r3, [r0]
   1797c:	cmp	r3, #22
   17980:	bne	17960 <__assert_fail@plt+0x691c>
   17984:	mov	r2, r6
   17988:	mov	r1, #0
   1798c:	mov	r0, r5
   17990:	bl	10fb4 <fcntl64@plt>
   17994:	subs	r4, r0, #0
   17998:	blt	17908 <__assert_fail@plt+0x68c4>
   1799c:	movw	r3, #41780	; 0xa334
   179a0:	movt	r3, #2
   179a4:	mvn	r2, #0
   179a8:	str	r2, [r3]
   179ac:	b	179d8 <__assert_fail@plt+0x6994>
   179b0:	mov	r2, r6
   179b4:	mov	r1, #0
   179b8:	bl	10fb4 <fcntl64@plt>
   179bc:	subs	r4, r0, #0
   179c0:	blt	17908 <__assert_fail@plt+0x68c4>
   179c4:	movw	r3, #41780	; 0xa334
   179c8:	movt	r3, #2
   179cc:	ldr	r3, [r3]
   179d0:	cmn	r3, #1
   179d4:	bne	17908 <__assert_fail@plt+0x68c4>
   179d8:	mov	r1, #1
   179dc:	mov	r0, r4
   179e0:	bl	10fb4 <fcntl64@plt>
   179e4:	subs	r2, r0, #0
   179e8:	blt	17a04 <__assert_fail@plt+0x69c0>
   179ec:	orr	r2, r2, #1
   179f0:	mov	r1, #2
   179f4:	mov	r0, r4
   179f8:	bl	10fb4 <fcntl64@plt>
   179fc:	cmn	r0, #1
   17a00:	bne	17908 <__assert_fail@plt+0x68c4>
   17a04:	bl	10f48 <__errno_location@plt>
   17a08:	mov	r5, r0
   17a0c:	ldr	r6, [r0]
   17a10:	mov	r0, r4
   17a14:	bl	11038 <close@plt>
   17a18:	str	r6, [r5]
   17a1c:	mvn	r4, #0
   17a20:	b	17908 <__assert_fail@plt+0x68c4>
   17a24:	cmp	r1, #1
   17a28:	beq	17ad8 <__assert_fail@plt+0x6a94>
   17a2c:	bgt	17a44 <__assert_fail@plt+0x6a00>
   17a30:	cmp	r1, #0
   17a34:	bne	17a9c <__assert_fail@plt+0x6a58>
   17a38:	b	17a44 <__assert_fail@plt+0x6a00>
   17a3c:	cmp	r1, #4
   17a40:	bne	17a9c <__assert_fail@plt+0x6a58>
   17a44:	ldr	r3, [sp, #4]
   17a48:	add	r2, r3, #4
   17a4c:	str	r2, [sp, #4]
   17a50:	ldr	r2, [r3]
   17a54:	mov	r0, r5
   17a58:	bl	10fb4 <fcntl64@plt>
   17a5c:	mov	r4, r0
   17a60:	b	17908 <__assert_fail@plt+0x68c4>
   17a64:	movw	r3, #1031	; 0x407
   17a68:	cmp	r1, r3
   17a6c:	bgt	17abc <__assert_fail@plt+0x6a78>
   17a70:	movw	r3, #1030	; 0x406
   17a74:	cmp	r1, r3
   17a78:	bge	17a44 <__assert_fail@plt+0x6a00>
   17a7c:	movw	r3, #1025	; 0x401
   17a80:	cmp	r1, r3
   17a84:	beq	17ad8 <__assert_fail@plt+0x6a94>
   17a88:	movw	r3, #1026	; 0x402
   17a8c:	cmp	r1, r3
   17a90:	beq	17a44 <__assert_fail@plt+0x6a00>
   17a94:	cmp	r1, #1024	; 0x400
   17a98:	beq	17a44 <__assert_fail@plt+0x6a00>
   17a9c:	ldr	r3, [sp, #4]
   17aa0:	add	r2, r3, #4
   17aa4:	str	r2, [sp, #4]
   17aa8:	ldr	r2, [r3]
   17aac:	mov	r0, r5
   17ab0:	bl	10fb4 <fcntl64@plt>
   17ab4:	mov	r4, r0
   17ab8:	b	17908 <__assert_fail@plt+0x68c4>
   17abc:	movw	r3, #1033	; 0x409
   17ac0:	cmp	r1, r3
   17ac4:	beq	17a44 <__assert_fail@plt+0x6a00>
   17ac8:	blt	17ad8 <__assert_fail@plt+0x6a94>
   17acc:	movw	r3, #1034	; 0x40a
   17ad0:	cmp	r1, r3
   17ad4:	bne	17a9c <__assert_fail@plt+0x6a58>
   17ad8:	mov	r0, r5
   17adc:	bl	10fb4 <fcntl64@plt>
   17ae0:	mov	r4, r0
   17ae4:	b	17908 <__assert_fail@plt+0x68c4>
   17ae8:	str	r4, [sp, #-8]!
   17aec:	str	lr, [sp, #4]
   17af0:	mov	r0, #14
   17af4:	bl	10ff0 <nl_langinfo@plt>
   17af8:	cmp	r0, #0
   17afc:	beq	17b20 <__assert_fail@plt+0x6adc>
   17b00:	ldrb	r2, [r0]
   17b04:	movw	r3, #37108	; 0x90f4
   17b08:	movt	r3, #1
   17b0c:	cmp	r2, #0
   17b10:	moveq	r0, r3
   17b14:	ldr	r4, [sp]
   17b18:	add	sp, sp, #4
   17b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b20:	movw	r0, #37108	; 0x90f4
   17b24:	movt	r0, #1
   17b28:	b	17b14 <__assert_fail@plt+0x6ad0>
   17b2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17b30:	strd	r6, [sp, #8]
   17b34:	str	lr, [sp, #16]
   17b38:	sub	sp, sp, #12
   17b3c:	mov	r7, r1
   17b40:	mov	r5, r2
   17b44:	subs	r6, r0, #0
   17b48:	addeq	r6, sp, #4
   17b4c:	mov	r0, r6
   17b50:	bl	10ea0 <mbrtowc@plt>
   17b54:	mov	r4, r0
   17b58:	cmp	r5, #0
   17b5c:	cmnne	r0, #3
   17b60:	bhi	17b7c <__assert_fail@plt+0x6b38>
   17b64:	mov	r0, r4
   17b68:	add	sp, sp, #12
   17b6c:	ldrd	r4, [sp]
   17b70:	ldrd	r6, [sp, #8]
   17b74:	add	sp, sp, #16
   17b78:	pop	{pc}		; (ldr pc, [sp], #4)
   17b7c:	mov	r0, #0
   17b80:	bl	1386c <__assert_fail@plt+0x2828>
   17b84:	cmp	r0, #0
   17b88:	bne	17b64 <__assert_fail@plt+0x6b20>
   17b8c:	ldrb	r3, [r7]
   17b90:	str	r3, [r6]
   17b94:	mov	r4, #1
   17b98:	b	17b64 <__assert_fail@plt+0x6b20>
   17b9c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17ba0:	strd	r6, [sp, #8]
   17ba4:	strd	r8, [sp, #16]
   17ba8:	str	sl, [sp, #24]
   17bac:	str	lr, [sp, #28]
   17bb0:	mov	r5, r0
   17bb4:	mov	r8, r1
   17bb8:	mov	r4, r2
   17bbc:	mov	r7, r3
   17bc0:	bl	10f48 <__errno_location@plt>
   17bc4:	mov	sl, r0
   17bc8:	mov	r9, #0
   17bcc:	str	r9, [sl]
   17bd0:	mov	r1, r4
   17bd4:	mov	r0, r5
   17bd8:	bl	10eb8 <strcoll@plt>
   17bdc:	cmp	r0, #0
   17be0:	bne	17c2c <__assert_fail@plt+0x6be8>
   17be4:	mov	r0, r5
   17be8:	bl	10f30 <strlen@plt>
   17bec:	add	r6, r0, #1
   17bf0:	mov	r0, r4
   17bf4:	bl	10f30 <strlen@plt>
   17bf8:	add	r0, r0, #1
   17bfc:	add	r5, r5, r6
   17c00:	add	r4, r4, r0
   17c04:	sub	r7, r7, r0
   17c08:	subs	r8, r8, r6
   17c0c:	beq	17c20 <__assert_fail@plt+0x6bdc>
   17c10:	cmp	r7, #0
   17c14:	bne	17bcc <__assert_fail@plt+0x6b88>
   17c18:	mov	r0, #1
   17c1c:	b	17c2c <__assert_fail@plt+0x6be8>
   17c20:	adds	r0, r7, #0
   17c24:	movne	r0, #1
   17c28:	rsb	r0, r0, #0
   17c2c:	ldrd	r4, [sp]
   17c30:	ldrd	r6, [sp, #8]
   17c34:	ldrd	r8, [sp, #16]
   17c38:	ldr	sl, [sp, #24]
   17c3c:	add	sp, sp, #28
   17c40:	pop	{pc}		; (ldr pc, [sp], #4)
   17c44:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17c48:	strd	r6, [sp, #8]
   17c4c:	strd	r8, [sp, #16]
   17c50:	str	sl, [sp, #24]
   17c54:	str	lr, [sp, #28]
   17c58:	mov	r7, r0
   17c5c:	mov	r4, r1
   17c60:	mov	r6, r2
   17c64:	mov	r5, r3
   17c68:	cmp	r1, r3
   17c6c:	bne	17c94 <__assert_fail@plt+0x6c50>
   17c70:	mov	r2, r1
   17c74:	mov	r1, r6
   17c78:	bl	10e28 <memcmp@plt>
   17c7c:	subs	r8, r0, #0
   17c80:	bne	17c94 <__assert_fail@plt+0x6c50>
   17c84:	bl	10f48 <__errno_location@plt>
   17c88:	mov	r3, #0
   17c8c:	str	r3, [r0]
   17c90:	b	17cc8 <__assert_fail@plt+0x6c84>
   17c94:	ldrb	sl, [r7, r4]
   17c98:	ldrb	r9, [r6, r5]
   17c9c:	mov	r3, #0
   17ca0:	strb	r3, [r7, r4]
   17ca4:	strb	r3, [r6, r5]
   17ca8:	add	r3, r5, #1
   17cac:	mov	r2, r6
   17cb0:	add	r1, r4, #1
   17cb4:	mov	r0, r7
   17cb8:	bl	17b9c <__assert_fail@plt+0x6b58>
   17cbc:	mov	r8, r0
   17cc0:	strb	sl, [r7, r4]
   17cc4:	strb	r9, [r6, r5]
   17cc8:	mov	r0, r8
   17ccc:	ldrd	r4, [sp]
   17cd0:	ldrd	r6, [sp, #8]
   17cd4:	ldrd	r8, [sp, #16]
   17cd8:	ldr	sl, [sp, #24]
   17cdc:	add	sp, sp, #28
   17ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ce4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17ce8:	strd	r6, [sp, #8]
   17cec:	str	r8, [sp, #16]
   17cf0:	str	lr, [sp, #20]
   17cf4:	mov	r7, r0
   17cf8:	mov	r4, r1
   17cfc:	mov	r8, r2
   17d00:	mov	r5, r3
   17d04:	cmp	r1, r3
   17d08:	bne	17d30 <__assert_fail@plt+0x6cec>
   17d0c:	mov	r2, r1
   17d10:	mov	r1, r8
   17d14:	bl	10e28 <memcmp@plt>
   17d18:	subs	r6, r0, #0
   17d1c:	bne	17d30 <__assert_fail@plt+0x6cec>
   17d20:	bl	10f48 <__errno_location@plt>
   17d24:	mov	r3, #0
   17d28:	str	r3, [r0]
   17d2c:	b	17d48 <__assert_fail@plt+0x6d04>
   17d30:	mov	r3, r5
   17d34:	mov	r2, r8
   17d38:	mov	r1, r4
   17d3c:	mov	r0, r7
   17d40:	bl	17b9c <__assert_fail@plt+0x6b58>
   17d44:	mov	r6, r0
   17d48:	mov	r0, r6
   17d4c:	ldrd	r4, [sp]
   17d50:	ldrd	r6, [sp, #8]
   17d54:	ldr	r8, [sp, #16]
   17d58:	add	sp, sp, #20
   17d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d60:	str	r4, [sp, #-8]!
   17d64:	str	lr, [sp, #4]
   17d68:	umull	r2, r3, r1, r2
   17d6c:	cmp	r3, #0
   17d70:	bne	17d88 <__assert_fail@plt+0x6d44>
   17d74:	mov	r1, r2
   17d78:	bl	17794 <__assert_fail@plt+0x6750>
   17d7c:	ldr	r4, [sp]
   17d80:	add	sp, sp, #4
   17d84:	pop	{pc}		; (ldr pc, [sp], #4)
   17d88:	bl	10f48 <__errno_location@plt>
   17d8c:	mov	r3, #12
   17d90:	str	r3, [r0]
   17d94:	mov	r0, #0
   17d98:	b	17d7c <__assert_fail@plt+0x6d38>
   17d9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17da0:	mov	r7, r0
   17da4:	ldr	r6, [pc, #72]	; 17df4 <__assert_fail@plt+0x6db0>
   17da8:	ldr	r5, [pc, #72]	; 17df8 <__assert_fail@plt+0x6db4>
   17dac:	add	r6, pc, r6
   17db0:	add	r5, pc, r5
   17db4:	sub	r6, r6, r5
   17db8:	mov	r8, r1
   17dbc:	mov	r9, r2
   17dc0:	bl	10d78 <fdopen@plt-0x20>
   17dc4:	asrs	r6, r6, #2
   17dc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17dcc:	mov	r4, #0
   17dd0:	add	r4, r4, #1
   17dd4:	ldr	r3, [r5], #4
   17dd8:	mov	r2, r9
   17ddc:	mov	r1, r8
   17de0:	mov	r0, r7
   17de4:	blx	r3
   17de8:	cmp	r6, r4
   17dec:	bne	17dd0 <__assert_fail@plt+0x6d8c>
   17df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17df4:	andeq	r2, r1, r0, ror #2
   17df8:	andeq	r2, r1, r8, asr r1
   17dfc:	bx	lr
   17e00:	ldr	r3, [pc, #12]	; 17e14 <__assert_fail@plt+0x6dd0>
   17e04:	mov	r1, #0
   17e08:	add	r3, pc, r3
   17e0c:	ldr	r2, [r3]
   17e10:	b	10f54 <__cxa_atexit@plt>
   17e14:	andeq	r2, r1, ip, ror #5

Disassembly of section .fini:

00017e18 <.fini>:
   17e18:	push	{r3, lr}
   17e1c:	pop	{r3, pc}
