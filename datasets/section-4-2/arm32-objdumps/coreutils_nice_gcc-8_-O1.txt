
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010ba0 <.init>:
   10ba0:	push	{r3, lr}
   10ba4:	bl	10e3c <__assert_fail@plt+0x48>
   10ba8:	pop	{r3, pc}

Disassembly of section .plt:

00010bac <calloc@plt-0x14>:
   10bac:	push	{lr}		; (str lr, [sp, #-4]!)
   10bb0:	ldr	lr, [pc, #4]	; 10bbc <calloc@plt-0x4>
   10bb4:	add	lr, pc, lr
   10bb8:	ldr	pc, [lr, #8]!
   10bbc:	andeq	r5, r1, r4, asr #8

00010bc0 <calloc@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #86016	; 0x15000
   10bc8:	ldr	pc, [ip, #1092]!	; 0x444

00010bcc <fputs_unlocked@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #86016	; 0x15000
   10bd4:	ldr	pc, [ip, #1084]!	; 0x43c

00010bd8 <strcmp@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #86016	; 0x15000
   10be0:	ldr	pc, [ip, #1076]!	; 0x434

00010be4 <strtol@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #86016	; 0x15000
   10bec:	ldr	pc, [ip, #1068]!	; 0x42c

00010bf0 <fflush@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #86016	; 0x15000
   10bf8:	ldr	pc, [ip, #1060]!	; 0x424

00010bfc <free@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #86016	; 0x15000
   10c04:	ldr	pc, [ip, #1052]!	; 0x41c

00010c08 <_exit@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #86016	; 0x15000
   10c10:	ldr	pc, [ip, #1044]!	; 0x414

00010c14 <memcpy@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #86016	; 0x15000
   10c1c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c20 <execvp@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #86016	; 0x15000
   10c28:	ldr	pc, [ip, #1028]!	; 0x404

00010c2c <mbsinit@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #86016	; 0x15000
   10c34:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c38 <memcmp@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #86016	; 0x15000
   10c40:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c44 <fputc_unlocked@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #86016	; 0x15000
   10c4c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c50 <dcgettext@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #86016	; 0x15000
   10c58:	ldr	pc, [ip, #996]!	; 0x3e4

00010c5c <realloc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #86016	; 0x15000
   10c64:	ldr	pc, [ip, #988]!	; 0x3dc

00010c68 <getpriority@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #86016	; 0x15000
   10c70:	ldr	pc, [ip, #980]!	; 0x3d4

00010c74 <textdomain@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #86016	; 0x15000
   10c7c:	ldr	pc, [ip, #972]!	; 0x3cc

00010c80 <iswprint@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #86016	; 0x15000
   10c88:	ldr	pc, [ip, #964]!	; 0x3c4

00010c8c <fwrite@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #86016	; 0x15000
   10c94:	ldr	pc, [ip, #956]!	; 0x3bc

00010c98 <lseek64@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #86016	; 0x15000
   10ca0:	ldr	pc, [ip, #948]!	; 0x3b4

00010ca4 <__ctype_get_mb_cur_max@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #940]!	; 0x3ac

00010cb0 <__fpending@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #932]!	; 0x3a4

00010cbc <mbrtowc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #924]!	; 0x39c

00010cc8 <error@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #916]!	; 0x394

00010cd4 <setpriority@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #908]!	; 0x38c

00010ce0 <malloc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #900]!	; 0x384

00010cec <__libc_start_main@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #892]!	; 0x37c

00010cf8 <__freading@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #884]!	; 0x374

00010d04 <__gmon_start__@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #876]!	; 0x36c

00010d10 <getopt_long@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #868]!	; 0x364

00010d1c <__ctype_b_loc@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #860]!	; 0x35c

00010d28 <exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #852]!	; 0x354

00010d34 <strlen@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #844]!	; 0x34c

00010d40 <strchr@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #836]!	; 0x344

00010d4c <__errno_location@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #828]!	; 0x33c

00010d58 <__cxa_atexit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #820]!	; 0x334

00010d64 <memset@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #812]!	; 0x32c

00010d70 <__printf_chk@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #804]!	; 0x324

00010d7c <fileno@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #796]!	; 0x31c

00010d88 <__fprintf_chk@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #788]!	; 0x314

00010d94 <fclose@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #780]!	; 0x30c

00010da0 <fseeko64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #772]!	; 0x304

00010dac <setlocale@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #764]!	; 0x2fc

00010db8 <strrchr@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #756]!	; 0x2f4

00010dc4 <nl_langinfo@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #748]!	; 0x2ec

00010dd0 <bindtextdomain@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #740]!	; 0x2e4

00010ddc <strncmp@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #732]!	; 0x2dc

00010de8 <abort@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #724]!	; 0x2d4

00010df4 <__assert_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #716]!	; 0x2cc

Disassembly of section .text:

00010e00 <.text>:
   10e00:	mov	fp, #0
   10e04:	mov	lr, #0
   10e08:	pop	{r1}		; (ldr r1, [sp], #4)
   10e0c:	mov	r2, sp
   10e10:	push	{r2}		; (str r2, [sp, #-4]!)
   10e14:	push	{r0}		; (str r0, [sp, #-4]!)
   10e18:	ldr	ip, [pc, #16]	; 10e30 <__assert_fail@plt+0x3c>
   10e1c:	push	{ip}		; (str ip, [sp, #-4]!)
   10e20:	ldr	r0, [pc, #12]	; 10e34 <__assert_fail@plt+0x40>
   10e24:	ldr	r3, [pc, #12]	; 10e38 <__assert_fail@plt+0x44>
   10e28:	bl	10cec <__libc_start_main@plt>
   10e2c:	bl	10de8 <abort@plt>
   10e30:	andeq	r5, r1, r8, ror r1
   10e34:	andeq	r1, r1, ip, asr #5
   10e38:	andeq	r5, r1, r8, lsl r1
   10e3c:	ldr	r3, [pc, #20]	; 10e58 <__assert_fail@plt+0x64>
   10e40:	ldr	r2, [pc, #20]	; 10e5c <__assert_fail@plt+0x68>
   10e44:	add	r3, pc, r3
   10e48:	ldr	r2, [r3, r2]
   10e4c:	cmp	r2, #0
   10e50:	bxeq	lr
   10e54:	b	10d04 <__gmon_start__@plt>
   10e58:			; <UNDEFINED> instruction: 0x000151b4
   10e5c:	andeq	r0, r0, ip, asr #1
   10e60:	ldr	r0, [pc, #24]	; 10e80 <__assert_fail@plt+0x8c>
   10e64:	ldr	r3, [pc, #24]	; 10e84 <__assert_fail@plt+0x90>
   10e68:	cmp	r3, r0
   10e6c:	bxeq	lr
   10e70:	ldr	r3, [pc, #16]	; 10e88 <__assert_fail@plt+0x94>
   10e74:	cmp	r3, #0
   10e78:	bxeq	lr
   10e7c:	bx	r3
   10e80:	andeq	r6, r2, r0, lsr #2
   10e84:	andeq	r6, r2, r0, lsr #2
   10e88:	andeq	r0, r0, r0
   10e8c:	ldr	r0, [pc, #36]	; 10eb8 <__assert_fail@plt+0xc4>
   10e90:	ldr	r1, [pc, #36]	; 10ebc <__assert_fail@plt+0xc8>
   10e94:	sub	r1, r1, r0
   10e98:	asr	r1, r1, #2
   10e9c:	add	r1, r1, r1, lsr #31
   10ea0:	asrs	r1, r1, #1
   10ea4:	bxeq	lr
   10ea8:	ldr	r3, [pc, #16]	; 10ec0 <__assert_fail@plt+0xcc>
   10eac:	cmp	r3, #0
   10eb0:	bxeq	lr
   10eb4:	bx	r3
   10eb8:	andeq	r6, r2, r0, lsr #2
   10ebc:	andeq	r6, r2, r0, lsr #2
   10ec0:	andeq	r0, r0, r0
   10ec4:	push	{r4, lr}
   10ec8:	ldr	r4, [pc, #24]	; 10ee8 <__assert_fail@plt+0xf4>
   10ecc:	ldrb	r3, [r4]
   10ed0:	cmp	r3, #0
   10ed4:	popne	{r4, pc}
   10ed8:	bl	10e60 <__assert_fail@plt+0x6c>
   10edc:	mov	r3, #1
   10ee0:	strb	r3, [r4]
   10ee4:	pop	{r4, pc}
   10ee8:	andeq	r6, r2, ip, lsr r1
   10eec:	b	10e8c <__assert_fail@plt+0x98>
   10ef0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ef4:	sub	sp, sp, #60	; 0x3c
   10ef8:	subs	r4, r0, #0
   10efc:	beq	10f44 <__assert_fail@plt+0x150>
   10f00:	movw	r3, #24880	; 0x6130
   10f04:	movt	r3, #2
   10f08:	ldr	r5, [r3]
   10f0c:	mov	r2, #5
   10f10:	movw	r1, #21024	; 0x5220
   10f14:	movt	r1, #1
   10f18:	mov	r0, #0
   10f1c:	bl	10c50 <dcgettext@plt>
   10f20:	movw	r3, #24904	; 0x6148
   10f24:	movt	r3, #2
   10f28:	ldr	r3, [r3]
   10f2c:	mov	r2, r0
   10f30:	mov	r1, #1
   10f34:	mov	r0, r5
   10f38:	bl	10d88 <__fprintf_chk@plt>
   10f3c:	mov	r0, r4
   10f40:	bl	10d28 <exit@plt>
   10f44:	mov	r2, #5
   10f48:	movw	r1, #21064	; 0x5248
   10f4c:	movt	r1, #1
   10f50:	mov	r0, #0
   10f54:	bl	10c50 <dcgettext@plt>
   10f58:	movw	r3, #24904	; 0x6148
   10f5c:	movt	r3, #2
   10f60:	ldr	r2, [r3]
   10f64:	mov	r1, r0
   10f68:	mov	r0, #1
   10f6c:	bl	10d70 <__printf_chk@plt>
   10f70:	mov	r2, #5
   10f74:	movw	r1, #21104	; 0x5270
   10f78:	movt	r1, #1
   10f7c:	mov	r0, #0
   10f80:	bl	10c50 <dcgettext@plt>
   10f84:	mov	r3, #19
   10f88:	mvn	r2, #19
   10f8c:	mov	r1, r0
   10f90:	mov	r0, #1
   10f94:	bl	10d70 <__printf_chk@plt>
   10f98:	mov	r2, #5
   10f9c:	movw	r1, #21328	; 0x5350
   10fa0:	movt	r1, #1
   10fa4:	mov	r0, #0
   10fa8:	bl	10c50 <dcgettext@plt>
   10fac:	movw	r5, #24884	; 0x6134
   10fb0:	movt	r5, #2
   10fb4:	ldr	r1, [r5]
   10fb8:	bl	10bcc <fputs_unlocked@plt>
   10fbc:	mov	r2, #5
   10fc0:	movw	r1, #21404	; 0x539c
   10fc4:	movt	r1, #1
   10fc8:	mov	r0, #0
   10fcc:	bl	10c50 <dcgettext@plt>
   10fd0:	ldr	r1, [r5]
   10fd4:	bl	10bcc <fputs_unlocked@plt>
   10fd8:	mov	r2, #5
   10fdc:	movw	r1, #21472	; 0x53e0
   10fe0:	movt	r1, #1
   10fe4:	mov	r0, #0
   10fe8:	bl	10c50 <dcgettext@plt>
   10fec:	ldr	r1, [r5]
   10ff0:	bl	10bcc <fputs_unlocked@plt>
   10ff4:	mov	r2, #5
   10ff8:	movw	r1, #21520	; 0x5410
   10ffc:	movt	r1, #1
   11000:	mov	r0, #0
   11004:	bl	10c50 <dcgettext@plt>
   11008:	ldr	r1, [r5]
   1100c:	bl	10bcc <fputs_unlocked@plt>
   11010:	mov	r2, #5
   11014:	movw	r1, #21576	; 0x5448
   11018:	movt	r1, #1
   1101c:	mov	r0, #0
   11020:	bl	10c50 <dcgettext@plt>
   11024:	movw	r2, #21016	; 0x5218
   11028:	movt	r2, #1
   1102c:	mov	r1, r0
   11030:	mov	r0, #1
   11034:	bl	10d70 <__printf_chk@plt>
   11038:	movw	r0, #20896	; 0x51a0
   1103c:	movt	r0, #1
   11040:	ldr	r1, [r0]
   11044:	ldr	r3, [r0, #4]
   11048:	str	r1, [sp]
   1104c:	str	r3, [sp, #4]
   11050:	ldrd	r2, [r0, #8]
   11054:	strd	r2, [sp, #8]
   11058:	ldrd	r2, [r0, #16]
   1105c:	strd	r2, [sp, #16]
   11060:	ldrd	r2, [r0, #24]
   11064:	strd	r2, [sp, #24]
   11068:	ldrd	r2, [r0, #32]
   1106c:	strd	r2, [sp, #32]
   11070:	ldrd	r2, [r0, #40]	; 0x28
   11074:	strd	r2, [sp, #40]	; 0x28
   11078:	ldrd	r2, [r0, #48]	; 0x30
   1107c:	strd	r2, [sp, #48]	; 0x30
   11080:	cmp	r1, #0
   11084:	moveq	r5, sp
   11088:	beq	110b4 <__assert_fail@plt+0x2c0>
   1108c:	mov	r5, sp
   11090:	movw	r6, #21016	; 0x5218
   11094:	movt	r6, #1
   11098:	mov	r0, r6
   1109c:	bl	10bd8 <strcmp@plt>
   110a0:	cmp	r0, #0
   110a4:	beq	110b4 <__assert_fail@plt+0x2c0>
   110a8:	ldr	r1, [r5, #8]!
   110ac:	cmp	r1, #0
   110b0:	bne	11098 <__assert_fail@plt+0x2a4>
   110b4:	ldr	r5, [r5, #4]
   110b8:	cmp	r5, #0
   110bc:	beq	11218 <__assert_fail@plt+0x424>
   110c0:	mov	r2, #5
   110c4:	movw	r1, #21768	; 0x5508
   110c8:	movt	r1, #1
   110cc:	mov	r0, #0
   110d0:	bl	10c50 <dcgettext@plt>
   110d4:	movw	r3, #21792	; 0x5520
   110d8:	movt	r3, #1
   110dc:	movw	r2, #21832	; 0x5548
   110e0:	movt	r2, #1
   110e4:	mov	r1, r0
   110e8:	mov	r0, #1
   110ec:	bl	10d70 <__printf_chk@plt>
   110f0:	mov	r1, #0
   110f4:	mov	r0, #5
   110f8:	bl	10dac <setlocale@plt>
   110fc:	cmp	r0, #0
   11100:	beq	1111c <__assert_fail@plt+0x328>
   11104:	mov	r2, #3
   11108:	movw	r1, #21848	; 0x5558
   1110c:	movt	r1, #1
   11110:	bl	10ddc <strncmp@plt>
   11114:	cmp	r0, #0
   11118:	bne	11198 <__assert_fail@plt+0x3a4>
   1111c:	mov	r2, #5
   11120:	movw	r1, #21924	; 0x55a4
   11124:	movt	r1, #1
   11128:	mov	r0, #0
   1112c:	bl	10c50 <dcgettext@plt>
   11130:	movw	r6, #21016	; 0x5218
   11134:	movt	r6, #1
   11138:	mov	r3, r6
   1113c:	movw	r2, #21792	; 0x5520
   11140:	movt	r2, #1
   11144:	mov	r1, r0
   11148:	mov	r0, #1
   1114c:	bl	10d70 <__printf_chk@plt>
   11150:	mov	r2, #5
   11154:	movw	r1, #21952	; 0x55c0
   11158:	movt	r1, #1
   1115c:	mov	r0, #0
   11160:	bl	10c50 <dcgettext@plt>
   11164:	mov	r1, r0
   11168:	movw	r2, #22168	; 0x5698
   1116c:	movt	r2, #1
   11170:	movw	r3, #21516	; 0x540c
   11174:	movt	r3, #1
   11178:	cmp	r5, r6
   1117c:	moveq	r3, r2
   11180:	mov	r2, r5
   11184:	mov	r0, #1
   11188:	bl	10d70 <__printf_chk@plt>
   1118c:	b	10f3c <__assert_fail@plt+0x148>
   11190:	movw	r5, #21016	; 0x5218
   11194:	movt	r5, #1
   11198:	mov	r2, #5
   1119c:	movw	r1, #21852	; 0x555c
   111a0:	movt	r1, #1
   111a4:	mov	r0, #0
   111a8:	bl	10c50 <dcgettext@plt>
   111ac:	movw	r3, #24884	; 0x6134
   111b0:	movt	r3, #2
   111b4:	ldr	r1, [r3]
   111b8:	bl	10bcc <fputs_unlocked@plt>
   111bc:	b	1111c <__assert_fail@plt+0x328>
   111c0:	mov	r2, #5
   111c4:	movw	r1, #21924	; 0x55a4
   111c8:	movt	r1, #1
   111cc:	mov	r0, #0
   111d0:	bl	10c50 <dcgettext@plt>
   111d4:	movw	r5, #21016	; 0x5218
   111d8:	movt	r5, #1
   111dc:	mov	r3, r5
   111e0:	movw	r2, #21792	; 0x5520
   111e4:	movt	r2, #1
   111e8:	mov	r1, r0
   111ec:	mov	r0, #1
   111f0:	bl	10d70 <__printf_chk@plt>
   111f4:	mov	r2, #5
   111f8:	movw	r1, #21952	; 0x55c0
   111fc:	movt	r1, #1
   11200:	mov	r0, #0
   11204:	bl	10c50 <dcgettext@plt>
   11208:	mov	r1, r0
   1120c:	movw	r3, #22168	; 0x5698
   11210:	movt	r3, #1
   11214:	b	11180 <__assert_fail@plt+0x38c>
   11218:	mov	r2, #5
   1121c:	movw	r1, #21768	; 0x5508
   11220:	movt	r1, #1
   11224:	mov	r0, #0
   11228:	bl	10c50 <dcgettext@plt>
   1122c:	movw	r3, #21792	; 0x5520
   11230:	movt	r3, #1
   11234:	movw	r2, #21832	; 0x5548
   11238:	movt	r2, #1
   1123c:	mov	r1, r0
   11240:	mov	r0, #1
   11244:	bl	10d70 <__printf_chk@plt>
   11248:	mov	r1, #0
   1124c:	mov	r0, #5
   11250:	bl	10dac <setlocale@plt>
   11254:	cmp	r0, #0
   11258:	beq	111c0 <__assert_fail@plt+0x3cc>
   1125c:	mov	r2, #3
   11260:	movw	r1, #21848	; 0x5558
   11264:	movt	r1, #1
   11268:	bl	10ddc <strncmp@plt>
   1126c:	cmp	r0, #0
   11270:	bne	11190 <__assert_fail@plt+0x39c>
   11274:	mov	r2, #5
   11278:	movw	r1, #21924	; 0x55a4
   1127c:	movt	r1, #1
   11280:	mov	r0, #0
   11284:	bl	10c50 <dcgettext@plt>
   11288:	movw	r5, #21016	; 0x5218
   1128c:	movt	r5, #1
   11290:	mov	r3, r5
   11294:	movw	r2, #21792	; 0x5520
   11298:	movt	r2, #1
   1129c:	mov	r1, r0
   112a0:	mov	r0, #1
   112a4:	bl	10d70 <__printf_chk@plt>
   112a8:	mov	r2, #5
   112ac:	movw	r1, #21952	; 0x55c0
   112b0:	movt	r1, #1
   112b4:	mov	r0, #0
   112b8:	bl	10c50 <dcgettext@plt>
   112bc:	mov	r1, r0
   112c0:	movw	r3, #22168	; 0x5698
   112c4:	movt	r3, #1
   112c8:	b	11180 <__assert_fail@plt+0x38c>
   112cc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   112d0:	strd	r6, [sp, #8]
   112d4:	strd	r8, [sp, #16]
   112d8:	str	lr, [sp, #24]
   112dc:	sub	sp, sp, #20
   112e0:	mov	r7, r0
   112e4:	mov	r5, r1
   112e8:	ldr	r0, [r1]
   112ec:	bl	117f8 <__assert_fail@plt+0xa04>
   112f0:	movw	r1, #21516	; 0x540c
   112f4:	movt	r1, #1
   112f8:	mov	r0, #6
   112fc:	bl	10dac <setlocale@plt>
   11300:	movw	r4, #21836	; 0x554c
   11304:	movt	r4, #1
   11308:	movw	r1, #22004	; 0x55f4
   1130c:	movt	r1, #1
   11310:	mov	r0, r4
   11314:	bl	10dd0 <bindtextdomain@plt>
   11318:	mov	r0, r4
   1131c:	bl	10c74 <textdomain@plt>
   11320:	movw	r3, #24796	; 0x60dc
   11324:	movt	r3, #2
   11328:	mov	r2, #125	; 0x7d
   1132c:	str	r2, [r3]
   11330:	movw	r0, #5864	; 0x16e8
   11334:	movt	r0, #1
   11338:	bl	1517c <__assert_fail@plt+0x4388>
   1133c:	cmp	r7, #1
   11340:	ble	11654 <__assert_fail@plt+0x860>
   11344:	mov	r4, #1
   11348:	mov	r9, #0
   1134c:	movw	r6, #24872	; 0x6128
   11350:	movt	r6, #2
   11354:	ldr	r8, [pc, #872]	; 116c4 <__assert_fail@plt+0x8d0>
   11358:	b	113c4 <__assert_fail@plt+0x5d0>
   1135c:	cmn	r0, #3
   11360:	bne	113b4 <__assert_fail@plt+0x5c0>
   11364:	movw	r3, #24792	; 0x60d8
   11368:	movt	r3, #2
   1136c:	movw	r0, #24884	; 0x6134
   11370:	movt	r0, #2
   11374:	mov	r4, #0
   11378:	str	r4, [sp, #4]
   1137c:	movw	r2, #22032	; 0x5610
   11380:	movt	r2, #1
   11384:	str	r2, [sp]
   11388:	ldr	r3, [r3]
   1138c:	movw	r2, #21832	; 0x5548
   11390:	movt	r2, #1
   11394:	movw	r1, #21016	; 0x5218
   11398:	movt	r1, #1
   1139c:	ldr	r0, [r0]
   113a0:	bl	13ff0 <__assert_fail@plt+0x31fc>
   113a4:	mov	r0, r4
   113a8:	bl	10d28 <exit@plt>
   113ac:	mov	r0, #0
   113b0:	bl	10ef0 <__assert_fail@plt+0xfc>
   113b4:	mov	r0, #125	; 0x7d
   113b8:	bl	10ef0 <__assert_fail@plt+0xfc>
   113bc:	cmp	r7, r4
   113c0:	ble	11474 <__assert_fail@plt+0x680>
   113c4:	lsl	r1, r4, #2
   113c8:	ldr	r2, [r5, r4, lsl #2]
   113cc:	ldrb	r3, [r2]
   113d0:	cmp	r3, #45	; 0x2d
   113d4:	bne	11408 <__assert_fail@plt+0x614>
   113d8:	ldrb	r3, [r2, #1]
   113dc:	sub	r3, r3, #43	; 0x2b
   113e0:	and	r3, r3, #253	; 0xfd
   113e4:	cmp	r3, #0
   113e8:	movne	r3, r2
   113ec:	addeq	r3, r2, #1
   113f0:	ldrb	r3, [r3, #1]
   113f4:	sub	r3, r3, #48	; 0x30
   113f8:	cmp	r3, #9
   113fc:	addls	r9, r2, #1
   11400:	addls	r4, r4, #1
   11404:	bls	113bc <__assert_fail@plt+0x5c8>
   11408:	sub	r1, r1, #4
   1140c:	ldr	r3, [r5]
   11410:	str	r3, [r5, r1]
   11414:	mov	r3, #0
   11418:	str	r3, [r6]
   1141c:	sub	r0, r4, #1
   11420:	str	r3, [sp]
   11424:	mov	r3, r8
   11428:	movw	r2, #22028	; 0x560c
   1142c:	movt	r2, #1
   11430:	add	r1, r5, r1
   11434:	sub	r0, r7, r0
   11438:	bl	10d10 <getopt_long@plt>
   1143c:	ldr	r3, [r6]
   11440:	sub	r3, r3, #1
   11444:	add	r4, r4, r3
   11448:	cmn	r0, #2
   1144c:	beq	113ac <__assert_fail@plt+0x5b8>
   11450:	ble	1135c <__assert_fail@plt+0x568>
   11454:	cmn	r0, #1
   11458:	beq	11474 <__assert_fail@plt+0x680>
   1145c:	cmp	r0, #110	; 0x6e
   11460:	bne	113b4 <__assert_fail@plt+0x5c0>
   11464:	movw	r3, #24888	; 0x6138
   11468:	movt	r3, #2
   1146c:	ldr	r9, [r3]
   11470:	b	113bc <__assert_fail@plt+0x5c8>
   11474:	cmp	r9, #0
   11478:	beq	11658 <__assert_fail@plt+0x864>
   1147c:	movw	r3, #21516	; 0x540c
   11480:	movt	r3, #1
   11484:	str	r3, [sp]
   11488:	add	r3, sp, #12
   1148c:	mov	r2, #10
   11490:	mov	r1, #0
   11494:	mov	r0, r9
   11498:	bl	14628 <__assert_fail@plt+0x3834>
   1149c:	cmp	r0, #1
   114a0:	bhi	115ac <__assert_fail@plt+0x7b8>
   114a4:	ldr	r6, [sp, #12]
   114a8:	cmp	r6, #39	; 0x27
   114ac:	movge	r6, #39	; 0x27
   114b0:	mvn	r3, #38	; 0x26
   114b4:	cmp	r6, r3
   114b8:	movlt	r6, r3
   114bc:	cmp	r4, r7
   114c0:	beq	115e0 <__assert_fail@plt+0x7ec>
   114c4:	bl	10d4c <__errno_location@plt>
   114c8:	mov	r7, r0
   114cc:	mov	r0, #0
   114d0:	str	r0, [r7]
   114d4:	mov	r1, r0
   114d8:	bl	10c68 <getpriority@plt>
   114dc:	cmn	r0, #1
   114e0:	bne	114f0 <__assert_fail@plt+0x6fc>
   114e4:	ldr	r8, [r7]
   114e8:	cmp	r8, #0
   114ec:	bne	11630 <__assert_fail@plt+0x83c>
   114f0:	add	r2, r0, r6
   114f4:	mov	r1, #0
   114f8:	mov	r0, r1
   114fc:	bl	10cd4 <setpriority@plt>
   11500:	cmp	r0, #0
   11504:	beq	11568 <__assert_fail@plt+0x774>
   11508:	ldr	r6, [r7]
   1150c:	cmp	r6, #1
   11510:	cmpne	r6, #13
   11514:	moveq	r3, #1
   11518:	movne	r3, #0
   1151c:	cmp	r3, #0
   11520:	movne	r8, #0
   11524:	moveq	r8, #125	; 0x7d
   11528:	mov	r2, #5
   1152c:	movw	r1, #22140	; 0x567c
   11530:	movt	r1, #1
   11534:	mov	r0, #0
   11538:	bl	10c50 <dcgettext@plt>
   1153c:	mov	r2, r0
   11540:	mov	r1, r6
   11544:	mov	r0, r8
   11548:	bl	10cc8 <error@plt>
   1154c:	movw	r3, #24880	; 0x6130
   11550:	movt	r3, #2
   11554:	ldr	r3, [r3]
   11558:	ldr	r3, [r3]
   1155c:	tst	r3, #32
   11560:	movne	r4, #125	; 0x7d
   11564:	bne	116a8 <__assert_fail@plt+0x8b4>
   11568:	lsl	r8, r4, #2
   1156c:	add	r1, r5, r8
   11570:	ldr	r0, [r5, r4, lsl #2]
   11574:	bl	10c20 <execvp@plt>
   11578:	ldr	r6, [r7]
   1157c:	cmp	r6, #2
   11580:	moveq	r4, #127	; 0x7f
   11584:	movne	r4, #126	; 0x7e
   11588:	ldr	r0, [r5, r8]
   1158c:	bl	13af4 <__assert_fail@plt+0x2d00>
   11590:	mov	r3, r0
   11594:	movw	r2, #22316	; 0x572c
   11598:	movt	r2, #1
   1159c:	mov	r1, r6
   115a0:	mov	r0, #0
   115a4:	bl	10cc8 <error@plt>
   115a8:	b	116a8 <__assert_fail@plt+0x8b4>
   115ac:	mov	r2, #5
   115b0:	movw	r1, #22048	; 0x5620
   115b4:	movt	r1, #1
   115b8:	mov	r0, #0
   115bc:	bl	10c50 <dcgettext@plt>
   115c0:	mov	r4, r0
   115c4:	mov	r0, r9
   115c8:	bl	13af4 <__assert_fail@plt+0x2d00>
   115cc:	mov	r3, r0
   115d0:	mov	r2, r4
   115d4:	mov	r1, #0
   115d8:	mov	r0, #125	; 0x7d
   115dc:	bl	10cc8 <error@plt>
   115e0:	mov	r2, #5
   115e4:	movw	r1, #22072	; 0x5638
   115e8:	movt	r1, #1
   115ec:	mov	r0, #0
   115f0:	bl	10c50 <dcgettext@plt>
   115f4:	mov	r2, r0
   115f8:	mov	r1, #0
   115fc:	mov	r0, r1
   11600:	bl	10cc8 <error@plt>
   11604:	mov	r0, #125	; 0x7d
   11608:	bl	10ef0 <__assert_fail@plt+0xfc>
   1160c:	mov	r2, #5
   11610:	movw	r1, #22116	; 0x5664
   11614:	movt	r1, #1
   11618:	mov	r0, #0
   1161c:	bl	10c50 <dcgettext@plt>
   11620:	mov	r2, r0
   11624:	mov	r1, r4
   11628:	mov	r0, #125	; 0x7d
   1162c:	bl	10cc8 <error@plt>
   11630:	mov	r2, #5
   11634:	movw	r1, #22116	; 0x5664
   11638:	movt	r1, #1
   1163c:	mov	r0, #0
   11640:	bl	10c50 <dcgettext@plt>
   11644:	mov	r2, r0
   11648:	mov	r1, r8
   1164c:	mov	r0, #125	; 0x7d
   11650:	bl	10cc8 <error@plt>
   11654:	mov	r4, #1
   11658:	cmp	r7, r4
   1165c:	movne	r6, #10
   11660:	bne	114c4 <__assert_fail@plt+0x6d0>
   11664:	bl	10d4c <__errno_location@plt>
   11668:	mov	r4, r0
   1166c:	mov	r0, #0
   11670:	str	r0, [r4]
   11674:	mov	r1, r0
   11678:	bl	10c68 <getpriority@plt>
   1167c:	mov	r2, r0
   11680:	cmn	r0, #1
   11684:	bne	11694 <__assert_fail@plt+0x8a0>
   11688:	ldr	r4, [r4]
   1168c:	cmp	r4, #0
   11690:	bne	1160c <__assert_fail@plt+0x818>
   11694:	movw	r1, #22136	; 0x5678
   11698:	movt	r1, #1
   1169c:	mov	r0, #1
   116a0:	bl	10d70 <__printf_chk@plt>
   116a4:	mov	r4, #0
   116a8:	mov	r0, r4
   116ac:	add	sp, sp, #20
   116b0:	ldrd	r4, [sp]
   116b4:	ldrd	r6, [sp, #8]
   116b8:	ldrd	r8, [sp, #16]
   116bc:	add	sp, sp, #24
   116c0:	pop	{pc}		; (ldr pc, [sp], #4)
   116c4:	ldrdeq	r5, [r1], -r8
   116c8:	movw	r3, #24896	; 0x6140
   116cc:	movt	r3, #2
   116d0:	str	r0, [r3]
   116d4:	bx	lr
   116d8:	movw	r3, #24896	; 0x6140
   116dc:	movt	r3, #2
   116e0:	strb	r0, [r3, #4]
   116e4:	bx	lr
   116e8:	strd	r4, [sp, #-16]!
   116ec:	str	r6, [sp, #8]
   116f0:	str	lr, [sp, #12]
   116f4:	sub	sp, sp, #8
   116f8:	movw	r3, #24884	; 0x6134
   116fc:	movt	r3, #2
   11700:	ldr	r0, [r3]
   11704:	bl	14c34 <__assert_fail@plt+0x3e40>
   11708:	cmp	r0, #0
   1170c:	beq	11734 <__assert_fail@plt+0x940>
   11710:	movw	r3, #24896	; 0x6140
   11714:	movt	r3, #2
   11718:	ldrb	r3, [r3, #4]
   1171c:	cmp	r3, #0
   11720:	beq	11760 <__assert_fail@plt+0x96c>
   11724:	bl	10d4c <__errno_location@plt>
   11728:	ldr	r3, [r0]
   1172c:	cmp	r3, #32
   11730:	bne	11760 <__assert_fail@plt+0x96c>
   11734:	movw	r3, #24880	; 0x6130
   11738:	movt	r3, #2
   1173c:	ldr	r0, [r3]
   11740:	bl	14c34 <__assert_fail@plt+0x3e40>
   11744:	cmp	r0, #0
   11748:	bne	117e8 <__assert_fail@plt+0x9f4>
   1174c:	add	sp, sp, #8
   11750:	ldrd	r4, [sp]
   11754:	ldr	r6, [sp, #8]
   11758:	add	sp, sp, #12
   1175c:	pop	{pc}		; (ldr pc, [sp], #4)
   11760:	mov	r2, #5
   11764:	movw	r1, #22300	; 0x571c
   11768:	movt	r1, #1
   1176c:	mov	r0, #0
   11770:	bl	10c50 <dcgettext@plt>
   11774:	mov	r4, r0
   11778:	movw	r3, #24896	; 0x6140
   1177c:	movt	r3, #2
   11780:	ldr	r5, [r3]
   11784:	cmp	r5, #0
   11788:	beq	117c8 <__assert_fail@plt+0x9d4>
   1178c:	bl	10d4c <__errno_location@plt>
   11790:	ldr	r6, [r0]
   11794:	mov	r0, r5
   11798:	bl	138f0 <__assert_fail@plt+0x2afc>
   1179c:	str	r4, [sp]
   117a0:	mov	r3, r0
   117a4:	movw	r2, #22312	; 0x5728
   117a8:	movt	r2, #1
   117ac:	mov	r1, r6
   117b0:	mov	r0, #0
   117b4:	bl	10cc8 <error@plt>
   117b8:	movw	r3, #24796	; 0x60dc
   117bc:	movt	r3, #2
   117c0:	ldr	r0, [r3]
   117c4:	bl	10c08 <_exit@plt>
   117c8:	bl	10d4c <__errno_location@plt>
   117cc:	mov	r3, r4
   117d0:	movw	r2, #22316	; 0x572c
   117d4:	movt	r2, #1
   117d8:	ldr	r1, [r0]
   117dc:	mov	r0, #0
   117e0:	bl	10cc8 <error@plt>
   117e4:	b	117b8 <__assert_fail@plt+0x9c4>
   117e8:	movw	r3, #24796	; 0x60dc
   117ec:	movt	r3, #2
   117f0:	ldr	r0, [r3]
   117f4:	bl	10c08 <_exit@plt>
   117f8:	strd	r4, [sp, #-16]!
   117fc:	str	r6, [sp, #8]
   11800:	str	lr, [sp, #12]
   11804:	subs	r4, r0, #0
   11808:	beq	118a4 <__assert_fail@plt+0xab0>
   1180c:	mov	r1, #47	; 0x2f
   11810:	mov	r0, r4
   11814:	bl	10db8 <strrchr@plt>
   11818:	subs	r5, r0, #0
   1181c:	beq	1187c <__assert_fail@plt+0xa88>
   11820:	add	r6, r5, #1
   11824:	sub	r3, r6, r4
   11828:	cmp	r3, #6
   1182c:	ble	1187c <__assert_fail@plt+0xa88>
   11830:	mov	r2, #7
   11834:	movw	r1, #22376	; 0x5768
   11838:	movt	r1, #1
   1183c:	sub	r0, r5, #6
   11840:	bl	10ddc <strncmp@plt>
   11844:	cmp	r0, #0
   11848:	bne	1187c <__assert_fail@plt+0xa88>
   1184c:	mov	r2, #3
   11850:	movw	r1, #22384	; 0x5770
   11854:	movt	r1, #1
   11858:	mov	r0, r6
   1185c:	bl	10ddc <strncmp@plt>
   11860:	cmp	r0, #0
   11864:	movne	r4, r6
   11868:	bne	1187c <__assert_fail@plt+0xa88>
   1186c:	add	r4, r5, #4
   11870:	movw	r3, #24864	; 0x6120
   11874:	movt	r3, #2
   11878:	str	r4, [r3]
   1187c:	movw	r3, #24904	; 0x6148
   11880:	movt	r3, #2
   11884:	str	r4, [r3]
   11888:	movw	r3, #24868	; 0x6124
   1188c:	movt	r3, #2
   11890:	str	r4, [r3]
   11894:	ldrd	r4, [sp]
   11898:	ldr	r6, [sp, #8]
   1189c:	add	sp, sp, #12
   118a0:	pop	{pc}		; (ldr pc, [sp], #4)
   118a4:	movw	r3, #24880	; 0x6130
   118a8:	movt	r3, #2
   118ac:	ldr	r3, [r3]
   118b0:	mov	r2, #55	; 0x37
   118b4:	mov	r1, #1
   118b8:	movw	r0, #22320	; 0x5730
   118bc:	movt	r0, #1
   118c0:	bl	10c8c <fwrite@plt>
   118c4:	bl	10de8 <abort@plt>
   118c8:	mov	r2, #0
   118cc:	mov	r3, #0
   118d0:	strd	r2, [r0]
   118d4:	strd	r2, [r0, #8]
   118d8:	strd	r2, [r0, #16]
   118dc:	strd	r2, [r0, #24]
   118e0:	strd	r2, [r0, #32]
   118e4:	strd	r2, [r0, #40]	; 0x28
   118e8:	cmp	r1, #10
   118ec:	beq	118f8 <__assert_fail@plt+0xb04>
   118f0:	str	r1, [r0]
   118f4:	bx	lr
   118f8:	str	r4, [sp, #-8]!
   118fc:	str	lr, [sp, #4]
   11900:	bl	10de8 <abort@plt>
   11904:	strd	r4, [sp, #-16]!
   11908:	str	r6, [sp, #8]
   1190c:	str	lr, [sp, #12]
   11910:	mov	r5, r0
   11914:	mov	r6, r1
   11918:	mov	r2, #5
   1191c:	mov	r1, r0
   11920:	mov	r0, #0
   11924:	bl	10c50 <dcgettext@plt>
   11928:	mov	r4, r0
   1192c:	cmp	r5, r0
   11930:	beq	11948 <__assert_fail@plt+0xb54>
   11934:	mov	r0, r4
   11938:	ldrd	r4, [sp]
   1193c:	ldr	r6, [sp, #8]
   11940:	add	sp, sp, #12
   11944:	pop	{pc}		; (ldr pc, [sp], #4)
   11948:	bl	14f0c <__assert_fail@plt+0x4118>
   1194c:	ldrb	r3, [r0]
   11950:	bic	r3, r3, #32
   11954:	cmp	r3, #85	; 0x55
   11958:	bne	119dc <__assert_fail@plt+0xbe8>
   1195c:	ldrb	r3, [r0, #1]
   11960:	bic	r3, r3, #32
   11964:	cmp	r3, #84	; 0x54
   11968:	bne	119a0 <__assert_fail@plt+0xbac>
   1196c:	ldrb	r3, [r0, #2]
   11970:	bic	r3, r3, #32
   11974:	cmp	r3, #70	; 0x46
   11978:	bne	119a0 <__assert_fail@plt+0xbac>
   1197c:	ldrb	r3, [r0, #3]
   11980:	cmp	r3, #45	; 0x2d
   11984:	bne	119a0 <__assert_fail@plt+0xbac>
   11988:	ldrb	r3, [r0, #4]
   1198c:	cmp	r3, #56	; 0x38
   11990:	bne	119a0 <__assert_fail@plt+0xbac>
   11994:	ldrb	r3, [r0, #5]
   11998:	cmp	r3, #0
   1199c:	beq	119bc <__assert_fail@plt+0xbc8>
   119a0:	movw	r4, #22472	; 0x57c8
   119a4:	movt	r4, #1
   119a8:	movw	r3, #22492	; 0x57dc
   119ac:	movt	r3, #1
   119b0:	cmp	r6, #9
   119b4:	movne	r4, r3
   119b8:	b	11934 <__assert_fail@plt+0xb40>
   119bc:	ldrb	r2, [r4]
   119c0:	movw	r4, #22488	; 0x57d8
   119c4:	movt	r4, #1
   119c8:	movw	r3, #22476	; 0x57cc
   119cc:	movt	r3, #1
   119d0:	cmp	r2, #96	; 0x60
   119d4:	movne	r4, r3
   119d8:	b	11934 <__assert_fail@plt+0xb40>
   119dc:	cmp	r3, #71	; 0x47
   119e0:	bne	119a0 <__assert_fail@plt+0xbac>
   119e4:	ldrb	r3, [r0, #1]
   119e8:	bic	r3, r3, #32
   119ec:	cmp	r3, #66	; 0x42
   119f0:	bne	119a0 <__assert_fail@plt+0xbac>
   119f4:	ldrb	r3, [r0, #2]
   119f8:	cmp	r3, #49	; 0x31
   119fc:	bne	119a0 <__assert_fail@plt+0xbac>
   11a00:	ldrb	r3, [r0, #3]
   11a04:	cmp	r3, #56	; 0x38
   11a08:	bne	119a0 <__assert_fail@plt+0xbac>
   11a0c:	ldrb	r3, [r0, #4]
   11a10:	cmp	r3, #48	; 0x30
   11a14:	bne	119a0 <__assert_fail@plt+0xbac>
   11a18:	ldrb	r3, [r0, #5]
   11a1c:	cmp	r3, #51	; 0x33
   11a20:	bne	119a0 <__assert_fail@plt+0xbac>
   11a24:	ldrb	r3, [r0, #6]
   11a28:	cmp	r3, #48	; 0x30
   11a2c:	bne	119a0 <__assert_fail@plt+0xbac>
   11a30:	ldrb	r3, [r0, #7]
   11a34:	cmp	r3, #0
   11a38:	bne	119a0 <__assert_fail@plt+0xbac>
   11a3c:	ldrb	r2, [r4]
   11a40:	movw	r4, #22484	; 0x57d4
   11a44:	movt	r4, #1
   11a48:	movw	r3, #22480	; 0x57d0
   11a4c:	movt	r3, #1
   11a50:	cmp	r2, #96	; 0x60
   11a54:	movne	r4, r3
   11a58:	b	11934 <__assert_fail@plt+0xb40>
   11a5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a60:	strd	r6, [sp, #8]
   11a64:	strd	r8, [sp, #16]
   11a68:	strd	sl, [sp, #24]
   11a6c:	str	lr, [sp, #32]
   11a70:	sub	sp, sp, #116	; 0x74
   11a74:	str	r0, [sp, #64]	; 0x40
   11a78:	mov	r8, r1
   11a7c:	str	r2, [sp, #48]	; 0x30
   11a80:	str	r3, [sp, #24]
   11a84:	ldr	r7, [sp, #152]	; 0x98
   11a88:	bl	10ca4 <__ctype_get_mb_cur_max@plt>
   11a8c:	str	r0, [sp, #76]	; 0x4c
   11a90:	ldr	r3, [sp, #156]	; 0x9c
   11a94:	ubfx	r3, r3, #1, #1
   11a98:	str	r3, [sp, #32]
   11a9c:	mov	r3, #1
   11aa0:	str	r3, [sp, #40]	; 0x28
   11aa4:	mov	r3, #0
   11aa8:	str	r3, [sp, #68]	; 0x44
   11aac:	str	r3, [sp, #36]	; 0x24
   11ab0:	str	r3, [sp, #28]
   11ab4:	str	r3, [sp, #52]	; 0x34
   11ab8:	str	r3, [sp, #60]	; 0x3c
   11abc:	str	r3, [sp, #72]	; 0x48
   11ac0:	movw	r3, #22496	; 0x57e0
   11ac4:	movt	r3, #1
   11ac8:	str	r3, [sp, #80]	; 0x50
   11acc:	mov	r9, r8
   11ad0:	mov	sl, r7
   11ad4:	cmp	sl, #10
   11ad8:	ldrls	pc, [pc, sl, lsl #2]
   11adc:	b	11ca0 <__assert_fail@plt+0xeac>
   11ae0:	andeq	r1, r1, r0, asr #22
   11ae4:	andeq	r1, r1, r4, lsl fp
   11ae8:	andeq	r1, r1, r8, ror ip
   11aec:	andeq	r1, r1, ip, lsl #22
   11af0:	andeq	r1, r1, ip, lsr #24
   11af4:	andeq	r1, r1, r0, asr fp
   11af8:	andeq	r2, r1, ip, lsl pc
   11afc:	andeq	r1, r1, r4, lsr #25
   11b00:	andeq	r1, r1, ip, lsl #23
   11b04:	andeq	r1, r1, ip, lsl #23
   11b08:	andeq	r1, r1, ip, lsl #23
   11b0c:	mov	r3, #1
   11b10:	str	r3, [sp, #28]
   11b14:	mov	r3, #1
   11b18:	str	r3, [sp, #32]
   11b1c:	str	r3, [sp, #52]	; 0x34
   11b20:	movw	r3, #22492	; 0x57dc
   11b24:	movt	r3, #1
   11b28:	str	r3, [sp, #60]	; 0x3c
   11b2c:	mov	fp, #0
   11b30:	mov	sl, #2
   11b34:	mov	r6, #0
   11b38:	ldr	r8, [sp, #64]	; 0x40
   11b3c:	b	123b4 <__assert_fail@plt+0x15c0>
   11b40:	mov	fp, sl
   11b44:	mov	r3, #0
   11b48:	str	r3, [sp, #32]
   11b4c:	b	11b34 <__assert_fail@plt+0xd40>
   11b50:	ldr	r3, [sp, #32]
   11b54:	cmp	r3, #0
   11b58:	bne	11cb8 <__assert_fail@plt+0xec4>
   11b5c:	cmp	r9, #0
   11b60:	beq	11cdc <__assert_fail@plt+0xee8>
   11b64:	mov	r3, #34	; 0x22
   11b68:	ldr	r2, [sp, #64]	; 0x40
   11b6c:	strb	r3, [r2]
   11b70:	mov	fp, #1
   11b74:	str	fp, [sp, #28]
   11b78:	str	fp, [sp, #52]	; 0x34
   11b7c:	movw	r3, #22472	; 0x57c8
   11b80:	movt	r3, #1
   11b84:	str	r3, [sp, #60]	; 0x3c
   11b88:	b	11b34 <__assert_fail@plt+0xd40>
   11b8c:	cmp	sl, #10
   11b90:	bne	11bc4 <__assert_fail@plt+0xdd0>
   11b94:	ldr	r3, [sp, #32]
   11b98:	cmp	r3, #0
   11b9c:	movne	fp, #0
   11ba0:	beq	11bec <__assert_fail@plt+0xdf8>
   11ba4:	ldr	r0, [sp, #168]	; 0xa8
   11ba8:	bl	10d34 <strlen@plt>
   11bac:	str	r0, [sp, #52]	; 0x34
   11bb0:	ldr	r3, [sp, #168]	; 0xa8
   11bb4:	str	r3, [sp, #60]	; 0x3c
   11bb8:	mov	r3, #1
   11bbc:	str	r3, [sp, #28]
   11bc0:	b	11b34 <__assert_fail@plt+0xd40>
   11bc4:	mov	r1, sl
   11bc8:	ldr	r0, [sp, #80]	; 0x50
   11bcc:	bl	11904 <__assert_fail@plt+0xb10>
   11bd0:	str	r0, [sp, #164]	; 0xa4
   11bd4:	mov	r1, sl
   11bd8:	movw	r0, #22492	; 0x57dc
   11bdc:	movt	r0, #1
   11be0:	bl	11904 <__assert_fail@plt+0xb10>
   11be4:	str	r0, [sp, #168]	; 0xa8
   11be8:	b	11b94 <__assert_fail@plt+0xda0>
   11bec:	ldr	r3, [sp, #164]	; 0xa4
   11bf0:	ldrb	r3, [r3]
   11bf4:	cmp	r3, #0
   11bf8:	beq	11c24 <__assert_fail@plt+0xe30>
   11bfc:	ldr	r2, [sp, #164]	; 0xa4
   11c00:	mov	fp, #0
   11c04:	ldr	r1, [sp, #64]	; 0x40
   11c08:	cmp	r9, fp
   11c0c:	strbhi	r3, [r1, fp]
   11c10:	add	fp, fp, #1
   11c14:	ldrb	r3, [r2, #1]!
   11c18:	cmp	r3, #0
   11c1c:	bne	11c08 <__assert_fail@plt+0xe14>
   11c20:	b	11ba4 <__assert_fail@plt+0xdb0>
   11c24:	mov	fp, #0
   11c28:	b	11ba4 <__assert_fail@plt+0xdb0>
   11c2c:	ldr	r3, [sp, #32]
   11c30:	cmp	r3, #0
   11c34:	bne	11b14 <__assert_fail@plt+0xd20>
   11c38:	mov	r3, #1
   11c3c:	str	r3, [sp, #28]
   11c40:	cmp	r9, #0
   11c44:	beq	11cf8 <__assert_fail@plt+0xf04>
   11c48:	mov	r3, #39	; 0x27
   11c4c:	ldr	r2, [sp, #64]	; 0x40
   11c50:	strb	r3, [r2]
   11c54:	mov	r3, #0
   11c58:	str	r3, [sp, #32]
   11c5c:	mov	fp, #1
   11c60:	str	fp, [sp, #52]	; 0x34
   11c64:	movw	r3, #22492	; 0x57dc
   11c68:	movt	r3, #1
   11c6c:	str	r3, [sp, #60]	; 0x3c
   11c70:	mov	sl, #2
   11c74:	b	11b34 <__assert_fail@plt+0xd40>
   11c78:	ldr	r3, [sp, #32]
   11c7c:	cmp	r3, #0
   11c80:	beq	11c40 <__assert_fail@plt+0xe4c>
   11c84:	mov	r3, #1
   11c88:	str	r3, [sp, #52]	; 0x34
   11c8c:	movw	r3, #22492	; 0x57dc
   11c90:	movt	r3, #1
   11c94:	str	r3, [sp, #60]	; 0x3c
   11c98:	mov	fp, #0
   11c9c:	b	11b34 <__assert_fail@plt+0xd40>
   11ca0:	bl	10de8 <abort@plt>
   11ca4:	mov	fp, #0
   11ca8:	str	fp, [sp, #32]
   11cac:	mov	r3, #1
   11cb0:	str	r3, [sp, #28]
   11cb4:	b	11b34 <__assert_fail@plt+0xd40>
   11cb8:	ldr	r3, [sp, #32]
   11cbc:	str	r3, [sp, #28]
   11cc0:	mov	r3, #1
   11cc4:	str	r3, [sp, #52]	; 0x34
   11cc8:	movw	r3, #22472	; 0x57c8
   11ccc:	movt	r3, #1
   11cd0:	str	r3, [sp, #60]	; 0x3c
   11cd4:	mov	fp, #0
   11cd8:	b	11b34 <__assert_fail@plt+0xd40>
   11cdc:	mov	fp, #1
   11ce0:	str	fp, [sp, #28]
   11ce4:	str	fp, [sp, #52]	; 0x34
   11ce8:	movw	r3, #22472	; 0x57c8
   11cec:	movt	r3, #1
   11cf0:	str	r3, [sp, #60]	; 0x3c
   11cf4:	b	11b34 <__assert_fail@plt+0xd40>
   11cf8:	mov	r3, #0
   11cfc:	str	r3, [sp, #32]
   11d00:	mov	fp, #1
   11d04:	str	fp, [sp, #52]	; 0x34
   11d08:	movw	r3, #22492	; 0x57dc
   11d0c:	movt	r3, #1
   11d10:	str	r3, [sp, #60]	; 0x3c
   11d14:	mov	sl, #2
   11d18:	b	11b34 <__assert_fail@plt+0xd40>
   11d1c:	mov	r3, r2
   11d20:	add	r4, r6, r2
   11d24:	ldr	r2, [sp, #24]
   11d28:	cmp	r3, #1
   11d2c:	movls	r3, #0
   11d30:	movhi	r3, #1
   11d34:	cmn	r2, #1
   11d38:	movne	r3, #0
   11d3c:	cmp	r3, #0
   11d40:	beq	11d50 <__assert_fail@plt+0xf5c>
   11d44:	ldr	r0, [sp, #48]	; 0x30
   11d48:	bl	10d34 <strlen@plt>
   11d4c:	str	r0, [sp, #24]
   11d50:	ldr	r3, [sp, #24]
   11d54:	cmp	r4, r3
   11d58:	bhi	12f44 <__assert_fail@plt+0x2150>
   11d5c:	ldr	r3, [sp, #48]	; 0x30
   11d60:	add	r4, r3, r6
   11d64:	ldr	r2, [sp, #52]	; 0x34
   11d68:	ldr	r1, [sp, #60]	; 0x3c
   11d6c:	mov	r0, r4
   11d70:	bl	10c38 <memcmp@plt>
   11d74:	cmp	r0, #0
   11d78:	bne	12f44 <__assert_fail@plt+0x2150>
   11d7c:	ldr	r3, [sp, #32]
   11d80:	cmp	r3, #0
   11d84:	bne	11f94 <__assert_fail@plt+0x11a0>
   11d88:	ldrb	r4, [r4]
   11d8c:	cmp	r4, #126	; 0x7e
   11d90:	ldrls	pc, [pc, r4, lsl #2]
   11d94:	b	12848 <__assert_fail@plt+0x1a54>
   11d98:	ldrdeq	r1, [r1], -r8
   11d9c:	andeq	r2, r1, r8, asr #16
   11da0:	andeq	r2, r1, r8, asr #16
   11da4:	andeq	r2, r1, r8, asr #16
   11da8:	andeq	r2, r1, r8, asr #16
   11dac:	andeq	r2, r1, r8, asr #16
   11db0:	andeq	r2, r1, r8, asr #16
   11db4:	strdeq	r2, [r1], -r0
   11db8:	andeq	r2, r1, r4, ror r2
   11dbc:	andeq	r2, r1, r8, lsl r6
   11dc0:	andeq	r2, r1, r4, asr #13
   11dc4:	andeq	r2, r1, ip, lsr #12
   11dc8:	andeq	r2, r1, r8, lsl #5
   11dcc:	muleq	r1, ip, r2
   11dd0:	andeq	r2, r1, r8, asr #16
   11dd4:	andeq	r2, r1, r8, asr #16
   11dd8:	andeq	r2, r1, r8, asr #16
   11ddc:	andeq	r2, r1, r8, asr #16
   11de0:	andeq	r2, r1, r8, asr #16
   11de4:	andeq	r2, r1, r8, asr #16
   11de8:	andeq	r2, r1, r8, asr #16
   11dec:	andeq	r2, r1, r8, asr #16
   11df0:	andeq	r2, r1, r8, asr #16
   11df4:	andeq	r2, r1, r8, asr #16
   11df8:	andeq	r2, r1, r8, asr #16
   11dfc:	andeq	r2, r1, r8, asr #16
   11e00:	andeq	r2, r1, r8, asr #16
   11e04:	andeq	r2, r1, r8, asr #16
   11e08:	andeq	r2, r1, r8, asr #16
   11e0c:	andeq	r2, r1, r8, asr #16
   11e10:	andeq	r2, r1, r8, asr #16
   11e14:	andeq	r2, r1, r8, asr #16
   11e18:	andeq	r2, r1, r4, ror #14
   11e1c:	andeq	r2, r1, r8, lsl #15
   11e20:	andeq	r2, r1, r8, lsl #15
   11e24:	andeq	r2, r1, r0, lsr #14
   11e28:	andeq	r2, r1, r8, lsl #15
   11e2c:	andeq	r2, r1, r8, lsr #25
   11e30:	andeq	r2, r1, r8, lsl #15
   11e34:	andeq	r2, r1, r8, lsr #15
   11e38:	andeq	r2, r1, r8, lsl #15
   11e3c:	andeq	r2, r1, r8, lsl #15
   11e40:	andeq	r2, r1, r8, lsl #15
   11e44:	andeq	r2, r1, r8, lsr #25
   11e48:	andeq	r2, r1, r8, lsr #25
   11e4c:	andeq	r2, r1, r8, lsr #25
   11e50:	andeq	r2, r1, r8, lsr #25
   11e54:	andeq	r2, r1, r8, lsr #25
   11e58:	andeq	r2, r1, r8, lsr #25
   11e5c:	andeq	r2, r1, r8, lsr #25
   11e60:	andeq	r2, r1, r8, lsr #25
   11e64:	andeq	r2, r1, r8, lsr #25
   11e68:	andeq	r2, r1, r8, lsr #25
   11e6c:	andeq	r2, r1, r8, lsr #25
   11e70:	andeq	r2, r1, r8, lsr #25
   11e74:	andeq	r2, r1, r8, lsr #25
   11e78:	andeq	r2, r1, r8, lsr #25
   11e7c:	andeq	r2, r1, r8, lsr #25
   11e80:	andeq	r2, r1, r8, lsr #25
   11e84:	andeq	r2, r1, r8, lsl #15
   11e88:	andeq	r2, r1, r8, lsl #15
   11e8c:	andeq	r2, r1, r8, lsl #15
   11e90:	andeq	r2, r1, r8, lsl #15
   11e94:	andeq	r2, r1, r8, lsl #2
   11e98:	andeq	r2, r1, r8, asr #16
   11e9c:	andeq	r2, r1, r8, lsr #25
   11ea0:	andeq	r2, r1, r8, lsr #25
   11ea4:	andeq	r2, r1, r8, lsr #25
   11ea8:	andeq	r2, r1, r8, lsr #25
   11eac:	andeq	r2, r1, r8, lsr #25
   11eb0:	andeq	r2, r1, r8, lsr #25
   11eb4:	andeq	r2, r1, r8, lsr #25
   11eb8:	andeq	r2, r1, r8, lsr #25
   11ebc:	andeq	r2, r1, r8, lsr #25
   11ec0:	andeq	r2, r1, r8, lsr #25
   11ec4:	andeq	r2, r1, r8, lsr #25
   11ec8:	andeq	r2, r1, r8, lsr #25
   11ecc:	andeq	r2, r1, r8, lsr #25
   11ed0:	andeq	r2, r1, r8, lsr #25
   11ed4:	andeq	r2, r1, r8, lsr #25
   11ed8:	andeq	r2, r1, r8, lsr #25
   11edc:	andeq	r2, r1, r8, lsr #25
   11ee0:	andeq	r2, r1, r8, lsr #25
   11ee4:	andeq	r2, r1, r8, lsr #25
   11ee8:	andeq	r2, r1, r8, lsr #25
   11eec:	andeq	r2, r1, r8, lsr #25
   11ef0:	andeq	r2, r1, r8, lsr #25
   11ef4:	andeq	r2, r1, r8, lsr #25
   11ef8:	andeq	r2, r1, r8, lsr #25
   11efc:	andeq	r2, r1, r8, lsr #25
   11f00:	andeq	r2, r1, r8, lsr #25
   11f04:	andeq	r2, r1, r8, lsl #15
   11f08:	andeq	r2, r1, r0, asr #12
   11f0c:	andeq	r2, r1, r8, lsr #25
   11f10:	andeq	r2, r1, r8, lsl #15
   11f14:	andeq	r2, r1, r8, lsr #25
   11f18:	andeq	r2, r1, r8, lsl #15
   11f1c:	andeq	r2, r1, r8, lsr #25
   11f20:	andeq	r2, r1, r8, lsr #25
   11f24:	andeq	r2, r1, r8, lsr #25
   11f28:	andeq	r2, r1, r8, lsr #25
   11f2c:	andeq	r2, r1, r8, lsr #25
   11f30:	andeq	r2, r1, r8, lsr #25
   11f34:	andeq	r2, r1, r8, lsr #25
   11f38:	andeq	r2, r1, r8, lsr #25
   11f3c:	andeq	r2, r1, r8, lsr #25
   11f40:	andeq	r2, r1, r8, lsr #25
   11f44:	andeq	r2, r1, r8, lsr #25
   11f48:	andeq	r2, r1, r8, lsr #25
   11f4c:	andeq	r2, r1, r8, lsr #25
   11f50:	andeq	r2, r1, r8, lsr #25
   11f54:	andeq	r2, r1, r8, lsr #25
   11f58:	andeq	r2, r1, r8, lsr #25
   11f5c:	andeq	r2, r1, r8, lsr #25
   11f60:	andeq	r2, r1, r8, lsr #25
   11f64:	andeq	r2, r1, r8, lsr #25
   11f68:	andeq	r2, r1, r8, lsr #25
   11f6c:	andeq	r2, r1, r8, lsr #25
   11f70:	andeq	r2, r1, r8, lsr #25
   11f74:	andeq	r2, r1, r8, lsr #25
   11f78:	andeq	r2, r1, r8, lsr #25
   11f7c:	andeq	r2, r1, r8, lsr #25
   11f80:	andeq	r2, r1, r8, lsr #25
   11f84:	andeq	r2, r1, r0, lsl #14
   11f88:	andeq	r2, r1, r8, lsl #15
   11f8c:	andeq	r2, r1, r0, lsl #14
   11f90:	andeq	r2, r1, r0, lsr #14
   11f94:	mov	r8, r9
   11f98:	mov	r7, sl
   11f9c:	b	12e9c <__assert_fail@plt+0x20a8>
   11fa0:	ldr	r3, [sp, #28]
   11fa4:	cmp	r3, #0
   11fa8:	bne	11fc8 <__assert_fail@plt+0x11d4>
   11fac:	ldr	r3, [sp, #156]	; 0x9c
   11fb0:	tst	r3, #1
   11fb4:	bne	123b0 <__assert_fail@plt+0x15bc>
   11fb8:	ldr	r3, [sp, #28]
   11fbc:	str	r3, [sp, #44]	; 0x2c
   11fc0:	mov	r5, r3
   11fc4:	b	122d0 <__assert_fail@plt+0x14dc>
   11fc8:	ldr	r3, [sp, #32]
   11fcc:	cmp	r3, #0
   11fd0:	bne	12e4c <__assert_fail@plt+0x2058>
   11fd4:	str	r3, [sp, #44]	; 0x2c
   11fd8:	ldr	r3, [sp, #36]	; 0x24
   11fdc:	eor	r3, r3, #1
   11fe0:	cmp	sl, #2
   11fe4:	movne	r3, #0
   11fe8:	andeq	r3, r3, #1
   11fec:	cmp	r3, #0
   11ff0:	beq	12048 <__assert_fail@plt+0x1254>
   11ff4:	cmp	r9, fp
   11ff8:	movhi	r2, #39	; 0x27
   11ffc:	strbhi	r2, [r8, fp]
   12000:	add	r2, fp, #1
   12004:	cmp	r9, r2
   12008:	movhi	r1, #36	; 0x24
   1200c:	strbhi	r1, [r8, r2]
   12010:	add	r2, fp, #2
   12014:	cmp	r9, r2
   12018:	movhi	r1, #39	; 0x27
   1201c:	strbhi	r1, [r8, r2]
   12020:	add	r2, fp, #3
   12024:	cmp	r9, r2
   12028:	bls	12f08 <__assert_fail@plt+0x2114>
   1202c:	mov	r1, #92	; 0x5c
   12030:	strb	r1, [r8, r2]
   12034:	add	fp, fp, #4
   12038:	str	r3, [sp, #36]	; 0x24
   1203c:	mov	r5, #0
   12040:	mov	r4, #48	; 0x30
   12044:	b	1231c <__assert_fail@plt+0x1528>
   12048:	cmp	r9, fp
   1204c:	bhi	12074 <__assert_fail@plt+0x1280>
   12050:	add	r1, fp, #1
   12054:	ldr	r2, [sp, #56]	; 0x38
   12058:	cmp	r2, #0
   1205c:	bne	1209c <__assert_fail@plt+0x12a8>
   12060:	mov	r3, r5
   12064:	ldr	r5, [sp, #56]	; 0x38
   12068:	mov	fp, r1
   1206c:	mov	r4, #48	; 0x30
   12070:	b	122d0 <__assert_fail@plt+0x14dc>
   12074:	mov	r2, #92	; 0x5c
   12078:	strb	r2, [r8, fp]
   1207c:	add	r1, fp, #1
   12080:	ldr	r2, [sp, #56]	; 0x38
   12084:	cmp	r2, #0
   12088:	moveq	r3, r5
   1208c:	moveq	r5, r2
   12090:	moveq	fp, r1
   12094:	moveq	r4, #48	; 0x30
   12098:	beq	1231c <__assert_fail@plt+0x1528>
   1209c:	add	r2, r6, #1
   120a0:	ldr	r0, [sp, #24]
   120a4:	cmp	r2, r0
   120a8:	bcs	120c4 <__assert_fail@plt+0x12d0>
   120ac:	ldr	r0, [sp, #48]	; 0x30
   120b0:	ldrb	r2, [r0, r2]
   120b4:	sub	r2, r2, #48	; 0x30
   120b8:	uxtb	r2, r2
   120bc:	cmp	r2, #9
   120c0:	bls	120dc <__assert_fail@plt+0x12e8>
   120c4:	mov	r2, r3
   120c8:	mov	r3, r5
   120cc:	mov	r5, r2
   120d0:	mov	fp, r1
   120d4:	mov	r4, #48	; 0x30
   120d8:	b	122f4 <__assert_fail@plt+0x1500>
   120dc:	cmp	r9, r1
   120e0:	movhi	r2, #48	; 0x30
   120e4:	strbhi	r2, [r8, r1]
   120e8:	add	r2, fp, #2
   120ec:	cmp	r9, r2
   120f0:	movhi	r1, #48	; 0x30
   120f4:	strbhi	r1, [r8, r2]
   120f8:	add	r1, fp, #3
   120fc:	b	120c4 <__assert_fail@plt+0x12d0>
   12100:	mov	r3, #0
   12104:	str	r3, [sp, #44]	; 0x2c
   12108:	cmp	sl, #2
   1210c:	beq	12128 <__assert_fail@plt+0x1334>
   12110:	cmp	sl, #5
   12114:	beq	12140 <__assert_fail@plt+0x134c>
   12118:	mov	r5, #0
   1211c:	mov	r3, r5
   12120:	mov	r4, #63	; 0x3f
   12124:	b	122d0 <__assert_fail@plt+0x14dc>
   12128:	ldr	r3, [sp, #32]
   1212c:	cmp	r3, #0
   12130:	bne	12e58 <__assert_fail@plt+0x2064>
   12134:	mov	r5, r3
   12138:	mov	r4, #63	; 0x3f
   1213c:	b	12838 <__assert_fail@plt+0x1a44>
   12140:	ldr	r3, [sp, #156]	; 0x9c
   12144:	tst	r3, #4
   12148:	beq	12c70 <__assert_fail@plt+0x1e7c>
   1214c:	add	r2, r6, #2
   12150:	ldr	r3, [sp, #24]
   12154:	cmp	r2, r3
   12158:	bcs	12c80 <__assert_fail@plt+0x1e8c>
   1215c:	ldr	r3, [sp, #48]	; 0x30
   12160:	add	r3, r3, r6
   12164:	ldrb	r4, [r3, #1]
   12168:	cmp	r4, #63	; 0x3f
   1216c:	movne	r5, #0
   12170:	movne	r3, r5
   12174:	movne	r4, #63	; 0x3f
   12178:	bne	122d0 <__assert_fail@plt+0x14dc>
   1217c:	ldr	r3, [sp, #48]	; 0x30
   12180:	ldrb	r1, [r3, r2]
   12184:	sub	r3, r1, #33	; 0x21
   12188:	cmp	r3, #29
   1218c:	ldrls	pc, [pc, r3, lsl #2]
   12190:	b	12c90 <__assert_fail@plt+0x1e9c>
   12194:	andeq	r2, r1, ip, lsl #4
   12198:	muleq	r1, r0, ip
   1219c:	muleq	r1, r0, ip
   121a0:	muleq	r1, r0, ip
   121a4:	muleq	r1, r0, ip
   121a8:	muleq	r1, r0, ip
   121ac:	andeq	r2, r1, ip, lsl #4
   121b0:	andeq	r2, r1, ip, lsl #4
   121b4:	andeq	r2, r1, ip, lsl #4
   121b8:	muleq	r1, r0, ip
   121bc:	muleq	r1, r0, ip
   121c0:	muleq	r1, r0, ip
   121c4:	andeq	r2, r1, ip, lsl #4
   121c8:	muleq	r1, r0, ip
   121cc:	andeq	r2, r1, ip, lsl #4
   121d0:	muleq	r1, r0, ip
   121d4:	muleq	r1, r0, ip
   121d8:	muleq	r1, r0, ip
   121dc:	muleq	r1, r0, ip
   121e0:	muleq	r1, r0, ip
   121e4:	muleq	r1, r0, ip
   121e8:	muleq	r1, r0, ip
   121ec:	muleq	r1, r0, ip
   121f0:	muleq	r1, r0, ip
   121f4:	muleq	r1, r0, ip
   121f8:	muleq	r1, r0, ip
   121fc:	muleq	r1, r0, ip
   12200:	andeq	r2, r1, ip, lsl #4
   12204:	andeq	r2, r1, ip, lsl #4
   12208:	andeq	r2, r1, ip, lsl #4
   1220c:	ldr	r3, [sp, #32]
   12210:	cmp	r3, #0
   12214:	bne	12efc <__assert_fail@plt+0x2108>
   12218:	cmp	r9, fp
   1221c:	movhi	r3, #63	; 0x3f
   12220:	strbhi	r3, [r8, fp]
   12224:	add	r3, fp, #1
   12228:	cmp	r9, r3
   1222c:	movhi	r0, #34	; 0x22
   12230:	strbhi	r0, [r8, r3]
   12234:	add	r3, fp, #2
   12238:	cmp	r9, r3
   1223c:	movhi	r0, #34	; 0x22
   12240:	strbhi	r0, [r8, r3]
   12244:	add	r3, fp, #3
   12248:	cmp	r9, r3
   1224c:	movhi	r0, #63	; 0x3f
   12250:	strbhi	r0, [r8, r3]
   12254:	add	fp, fp, #4
   12258:	ldr	r3, [sp, #32]
   1225c:	mov	r5, r3
   12260:	mov	r4, r1
   12264:	mov	r6, r2
   12268:	b	122d0 <__assert_fail@plt+0x14dc>
   1226c:	mov	r3, #0
   12270:	str	r3, [sp, #44]	; 0x2c
   12274:	mov	r4, #8
   12278:	mov	r3, #98	; 0x62
   1227c:	b	122bc <__assert_fail@plt+0x14c8>
   12280:	mov	r3, #0
   12284:	str	r3, [sp, #44]	; 0x2c
   12288:	mov	r4, #12
   1228c:	mov	r3, #102	; 0x66
   12290:	b	122bc <__assert_fail@plt+0x14c8>
   12294:	mov	r3, #0
   12298:	str	r3, [sp, #44]	; 0x2c
   1229c:	mov	r4, #13
   122a0:	mov	r3, #114	; 0x72
   122a4:	ldr	r2, [sp, #32]
   122a8:	cmp	sl, #2
   122ac:	movne	r2, #0
   122b0:	andeq	r2, r2, #1
   122b4:	cmp	r2, #0
   122b8:	bne	126dc <__assert_fail@plt+0x18e8>
   122bc:	ldr	r2, [sp, #28]
   122c0:	cmp	r2, #0
   122c4:	bne	12cc4 <__assert_fail@plt+0x1ed0>
   122c8:	mov	r5, r2
   122cc:	mov	r3, r2
   122d0:	ldr	r2, [sp, #28]
   122d4:	eor	r2, r2, #1
   122d8:	cmp	sl, #2
   122dc:	orreq	r2, r2, #1
   122e0:	eor	r2, r2, #1
   122e4:	ldr	r1, [sp, #32]
   122e8:	orr	r2, r1, r2
   122ec:	tst	r2, #255	; 0xff
   122f0:	beq	1231c <__assert_fail@plt+0x1528>
   122f4:	ldr	r2, [sp, #160]	; 0xa0
   122f8:	cmp	r2, #0
   122fc:	beq	1231c <__assert_fail@plt+0x1528>
   12300:	ubfx	r1, r4, #5, #8
   12304:	and	r2, r4, #31
   12308:	ldr	r0, [sp, #160]	; 0xa0
   1230c:	ldr	r1, [r0, r1, lsl #2]
   12310:	lsr	r2, r1, r2
   12314:	tst	r2, #1
   12318:	bne	12328 <__assert_fail@plt+0x1534>
   1231c:	ldr	r2, [sp, #44]	; 0x2c
   12320:	cmp	r2, #0
   12324:	beq	1267c <__assert_fail@plt+0x1888>
   12328:	ldr	r3, [sp, #32]
   1232c:	cmp	r3, #0
   12330:	bne	12e7c <__assert_fail@plt+0x2088>
   12334:	ldr	r3, [sp, #36]	; 0x24
   12338:	eor	r3, r3, #1
   1233c:	cmp	sl, #2
   12340:	movne	r3, #0
   12344:	andeq	r3, r3, #1
   12348:	cmp	r3, #0
   1234c:	beq	12384 <__assert_fail@plt+0x1590>
   12350:	cmp	r9, fp
   12354:	movhi	r2, #39	; 0x27
   12358:	strbhi	r2, [r8, fp]
   1235c:	add	r2, fp, #1
   12360:	cmp	r9, r2
   12364:	movhi	r1, #36	; 0x24
   12368:	strbhi	r1, [r8, r2]
   1236c:	add	r2, fp, #2
   12370:	cmp	r9, r2
   12374:	movhi	r1, #39	; 0x27
   12378:	strbhi	r1, [r8, r2]
   1237c:	add	fp, fp, #3
   12380:	str	r3, [sp, #36]	; 0x24
   12384:	cmp	r9, fp
   12388:	movhi	r3, #92	; 0x5c
   1238c:	strbhi	r3, [r8, fp]
   12390:	add	fp, fp, #1
   12394:	cmp	fp, r9
   12398:	strbcc	r4, [r8, fp]
   1239c:	add	fp, fp, #1
   123a0:	cmp	r5, #0
   123a4:	ldr	r3, [sp, #40]	; 0x28
   123a8:	moveq	r3, r5
   123ac:	str	r3, [sp, #40]	; 0x28
   123b0:	add	r6, r6, #1
   123b4:	ldr	r3, [sp, #24]
   123b8:	cmn	r3, #1
   123bc:	beq	12cec <__assert_fail@plt+0x1ef8>
   123c0:	ldr	r3, [sp, #24]
   123c4:	subs	r5, r3, r6
   123c8:	movne	r5, #1
   123cc:	cmp	r5, #0
   123d0:	beq	12d00 <__assert_fail@plt+0x1f0c>
   123d4:	ldr	r3, [sp, #28]
   123d8:	cmp	sl, #2
   123dc:	moveq	r3, #0
   123e0:	andne	r3, r3, #1
   123e4:	str	r3, [sp, #56]	; 0x38
   123e8:	ldr	r2, [sp, #52]	; 0x34
   123ec:	adds	r7, r2, #0
   123f0:	movne	r7, #1
   123f4:	ands	r3, r3, r7
   123f8:	str	r3, [sp, #44]	; 0x2c
   123fc:	bne	11d1c <__assert_fail@plt+0xf28>
   12400:	ldr	r3, [sp, #48]	; 0x30
   12404:	ldrb	r4, [r3, r6]
   12408:	cmp	r4, #126	; 0x7e
   1240c:	ldrls	pc, [pc, r4, lsl #2]
   12410:	b	12848 <__assert_fail@plt+0x1a54>
   12414:	andeq	r1, r1, r0, lsr #31
   12418:	andeq	r2, r1, r8, asr #16
   1241c:	andeq	r2, r1, r8, asr #16
   12420:	andeq	r2, r1, r8, asr #16
   12424:	andeq	r2, r1, r8, asr #16
   12428:	andeq	r2, r1, r8, asr #16
   1242c:	andeq	r2, r1, r8, asr #16
   12430:	andeq	r2, r1, r8, ror #13
   12434:	andeq	r2, r1, r4, ror r2
   12438:	andeq	r2, r1, r8, lsl r6
   1243c:			; <UNDEFINED> instruction: 0x000126bc
   12440:	andeq	r2, r1, ip, lsr #12
   12444:	andeq	r2, r1, r8, lsl #5
   12448:	muleq	r1, ip, r2
   1244c:	andeq	r2, r1, r8, asr #16
   12450:	andeq	r2, r1, r8, asr #16
   12454:	andeq	r2, r1, r8, asr #16
   12458:	andeq	r2, r1, r8, asr #16
   1245c:	andeq	r2, r1, r8, asr #16
   12460:	andeq	r2, r1, r8, asr #16
   12464:	andeq	r2, r1, r8, asr #16
   12468:	andeq	r2, r1, r8, asr #16
   1246c:	andeq	r2, r1, r8, asr #16
   12470:	andeq	r2, r1, r8, asr #16
   12474:	andeq	r2, r1, r8, asr #16
   12478:	andeq	r2, r1, r8, asr #16
   1247c:	andeq	r2, r1, r8, asr #16
   12480:	andeq	r2, r1, r8, asr #16
   12484:	andeq	r2, r1, r8, asr #16
   12488:	andeq	r2, r1, r8, asr #16
   1248c:	andeq	r2, r1, r8, asr #16
   12490:	andeq	r2, r1, r8, asr #16
   12494:	andeq	r2, r1, r4, ror #14
   12498:	andeq	r2, r1, r0, ror #14
   1249c:	andeq	r2, r1, r0, ror #14
   124a0:	andeq	r2, r1, r0, lsr #14
   124a4:	andeq	r2, r1, r0, ror #14
   124a8:	andeq	r2, r1, r8, ror #24
   124ac:	andeq	r2, r1, r0, ror #14
   124b0:	andeq	r2, r1, r8, lsr #15
   124b4:	andeq	r2, r1, r0, ror #14
   124b8:	andeq	r2, r1, r0, ror #14
   124bc:	andeq	r2, r1, r0, ror #14
   124c0:	andeq	r2, r1, r8, ror #24
   124c4:	andeq	r2, r1, r8, ror #24
   124c8:	andeq	r2, r1, r8, ror #24
   124cc:	andeq	r2, r1, r8, ror #24
   124d0:	andeq	r2, r1, r8, ror #24
   124d4:	andeq	r2, r1, r8, ror #24
   124d8:	andeq	r2, r1, r8, ror #24
   124dc:	andeq	r2, r1, r8, ror #24
   124e0:	andeq	r2, r1, r8, ror #24
   124e4:	andeq	r2, r1, r8, ror #24
   124e8:	andeq	r2, r1, r8, ror #24
   124ec:	andeq	r2, r1, r8, ror #24
   124f0:	andeq	r2, r1, r8, ror #24
   124f4:	andeq	r2, r1, r8, ror #24
   124f8:	andeq	r2, r1, r8, ror #24
   124fc:	andeq	r2, r1, r8, ror #24
   12500:	andeq	r2, r1, r0, ror #14
   12504:	andeq	r2, r1, r0, ror #14
   12508:	andeq	r2, r1, r0, ror #14
   1250c:	andeq	r2, r1, r0, ror #14
   12510:	andeq	r2, r1, r8, lsl #2
   12514:	andeq	r2, r1, r8, asr #16
   12518:	andeq	r2, r1, r8, ror #24
   1251c:	andeq	r2, r1, r8, ror #24
   12520:	andeq	r2, r1, r8, ror #24
   12524:	andeq	r2, r1, r8, ror #24
   12528:	andeq	r2, r1, r8, ror #24
   1252c:	andeq	r2, r1, r8, ror #24
   12530:	andeq	r2, r1, r8, ror #24
   12534:	andeq	r2, r1, r8, ror #24
   12538:	andeq	r2, r1, r8, ror #24
   1253c:	andeq	r2, r1, r8, ror #24
   12540:	andeq	r2, r1, r8, ror #24
   12544:	andeq	r2, r1, r8, ror #24
   12548:	andeq	r2, r1, r8, ror #24
   1254c:	andeq	r2, r1, r8, ror #24
   12550:	andeq	r2, r1, r8, ror #24
   12554:	andeq	r2, r1, r8, ror #24
   12558:	andeq	r2, r1, r8, ror #24
   1255c:	andeq	r2, r1, r8, ror #24
   12560:	andeq	r2, r1, r8, ror #24
   12564:	andeq	r2, r1, r8, ror #24
   12568:	andeq	r2, r1, r8, ror #24
   1256c:	andeq	r2, r1, r8, ror #24
   12570:	andeq	r2, r1, r8, ror #24
   12574:	andeq	r2, r1, r8, ror #24
   12578:	andeq	r2, r1, r8, ror #24
   1257c:	andeq	r2, r1, r8, ror #24
   12580:	andeq	r2, r1, r0, ror #14
   12584:	andeq	r2, r1, r0, asr #12
   12588:	andeq	r2, r1, r8, ror #24
   1258c:	andeq	r2, r1, r0, ror #14
   12590:	andeq	r2, r1, r8, ror #24
   12594:	andeq	r2, r1, r0, ror #14
   12598:	andeq	r2, r1, r8, ror #24
   1259c:	andeq	r2, r1, r8, ror #24
   125a0:	andeq	r2, r1, r8, ror #24
   125a4:	andeq	r2, r1, r8, ror #24
   125a8:	andeq	r2, r1, r8, ror #24
   125ac:	andeq	r2, r1, r8, ror #24
   125b0:	andeq	r2, r1, r8, ror #24
   125b4:	andeq	r2, r1, r8, ror #24
   125b8:	andeq	r2, r1, r8, ror #24
   125bc:	andeq	r2, r1, r8, ror #24
   125c0:	andeq	r2, r1, r8, ror #24
   125c4:	andeq	r2, r1, r8, ror #24
   125c8:	andeq	r2, r1, r8, ror #24
   125cc:	andeq	r2, r1, r8, ror #24
   125d0:	andeq	r2, r1, r8, ror #24
   125d4:	andeq	r2, r1, r8, ror #24
   125d8:	andeq	r2, r1, r8, ror #24
   125dc:	andeq	r2, r1, r8, ror #24
   125e0:	andeq	r2, r1, r8, ror #24
   125e4:	andeq	r2, r1, r8, ror #24
   125e8:	andeq	r2, r1, r8, ror #24
   125ec:	andeq	r2, r1, r8, ror #24
   125f0:	andeq	r2, r1, r8, ror #24
   125f4:	andeq	r2, r1, r8, ror #24
   125f8:	andeq	r2, r1, r8, ror #24
   125fc:	andeq	r2, r1, r8, ror #24
   12600:	andeq	r2, r1, r0, lsl #14
   12604:	andeq	r2, r1, r0, ror #14
   12608:	andeq	r2, r1, r0, lsl #14
   1260c:	andeq	r2, r1, r0, lsr #14
   12610:	mov	r3, #0
   12614:	str	r3, [sp, #44]	; 0x2c
   12618:	mov	r4, #9
   1261c:	mov	r3, #116	; 0x74
   12620:	b	122a4 <__assert_fail@plt+0x14b0>
   12624:	mov	r3, #0
   12628:	str	r3, [sp, #44]	; 0x2c
   1262c:	mov	r4, #11
   12630:	mov	r3, #118	; 0x76
   12634:	b	122bc <__assert_fail@plt+0x14c8>
   12638:	mov	r3, #0
   1263c:	str	r3, [sp, #44]	; 0x2c
   12640:	cmp	sl, #2
   12644:	beq	12668 <__assert_fail@plt+0x1874>
   12648:	ldr	r3, [sp, #28]
   1264c:	ldr	r2, [sp, #32]
   12650:	and	r3, r3, r2
   12654:	tst	r7, r3
   12658:	bne	12cdc <__assert_fail@plt+0x1ee8>
   1265c:	mov	r4, #92	; 0x5c
   12660:	mov	r3, r4
   12664:	b	122bc <__assert_fail@plt+0x14c8>
   12668:	ldr	r3, [sp, #32]
   1266c:	cmp	r3, #0
   12670:	bne	12e64 <__assert_fail@plt+0x2070>
   12674:	mov	r5, r3
   12678:	mov	r4, #92	; 0x5c
   1267c:	eor	r3, r3, #1
   12680:	ldr	r2, [sp, #36]	; 0x24
   12684:	and	r3, r3, r2
   12688:	tst	r3, #255	; 0xff
   1268c:	beq	12394 <__assert_fail@plt+0x15a0>
   12690:	cmp	r9, fp
   12694:	movhi	r3, #39	; 0x27
   12698:	strbhi	r3, [r8, fp]
   1269c:	add	r3, fp, #1
   126a0:	cmp	r9, r3
   126a4:	movhi	r2, #39	; 0x27
   126a8:	strbhi	r2, [r8, r3]
   126ac:	add	fp, fp, #2
   126b0:	mov	r3, #0
   126b4:	str	r3, [sp, #36]	; 0x24
   126b8:	b	12394 <__assert_fail@plt+0x15a0>
   126bc:	mov	r3, #110	; 0x6e
   126c0:	b	122a4 <__assert_fail@plt+0x14b0>
   126c4:	mov	r3, #110	; 0x6e
   126c8:	b	122a4 <__assert_fail@plt+0x14b0>
   126cc:	mov	r3, #0
   126d0:	str	r3, [sp, #44]	; 0x2c
   126d4:	mov	r3, #110	; 0x6e
   126d8:	b	122a4 <__assert_fail@plt+0x14b0>
   126dc:	mov	r8, r9
   126e0:	mov	r7, #2
   126e4:	b	12e84 <__assert_fail@plt+0x2090>
   126e8:	mov	r3, #97	; 0x61
   126ec:	b	122bc <__assert_fail@plt+0x14c8>
   126f0:	mov	r3, #97	; 0x61
   126f4:	b	122bc <__assert_fail@plt+0x14c8>
   126f8:	mov	r3, #0
   126fc:	str	r3, [sp, #44]	; 0x2c
   12700:	ldr	r3, [sp, #24]
   12704:	cmn	r3, #1
   12708:	beq	12734 <__assert_fail@plt+0x1940>
   1270c:	ldr	r3, [sp, #24]
   12710:	subs	r3, r3, #1
   12714:	movne	r3, #1
   12718:	cmp	r3, #0
   1271c:	bne	12c9c <__assert_fail@plt+0x1ea8>
   12720:	cmp	r6, #0
   12724:	beq	12764 <__assert_fail@plt+0x1970>
   12728:	mov	r5, #0
   1272c:	mov	r3, r5
   12730:	b	122d0 <__assert_fail@plt+0x14dc>
   12734:	ldr	r3, [sp, #48]	; 0x30
   12738:	ldrb	r3, [r3, #1]
   1273c:	adds	r3, r3, #0
   12740:	movne	r3, #1
   12744:	b	12718 <__assert_fail@plt+0x1924>
   12748:	mov	r3, #0
   1274c:	str	r3, [sp, #44]	; 0x2c
   12750:	b	12720 <__assert_fail@plt+0x192c>
   12754:	mov	r3, #0
   12758:	str	r3, [sp, #44]	; 0x2c
   1275c:	b	12764 <__assert_fail@plt+0x1970>
   12760:	ldr	r5, [sp, #44]	; 0x2c
   12764:	ldr	r3, [sp, #32]
   12768:	cmp	sl, #2
   1276c:	movne	r3, #0
   12770:	andeq	r3, r3, #1
   12774:	cmp	r3, #0
   12778:	beq	122d0 <__assert_fail@plt+0x14dc>
   1277c:	mov	r8, r9
   12780:	mov	r7, #2
   12784:	b	12e84 <__assert_fail@plt+0x2090>
   12788:	ldr	r5, [sp, #32]
   1278c:	b	12764 <__assert_fail@plt+0x1970>
   12790:	mov	r3, #0
   12794:	str	r3, [sp, #44]	; 0x2c
   12798:	mov	r5, r3
   1279c:	b	12764 <__assert_fail@plt+0x1970>
   127a0:	mov	r3, #0
   127a4:	str	r3, [sp, #44]	; 0x2c
   127a8:	cmp	sl, #2
   127ac:	strne	r5, [sp, #68]	; 0x44
   127b0:	movne	r3, #0
   127b4:	movne	r4, #39	; 0x27
   127b8:	bne	122d0 <__assert_fail@plt+0x14dc>
   127bc:	ldr	r3, [sp, #32]
   127c0:	cmp	r3, #0
   127c4:	bne	12e70 <__assert_fail@plt+0x207c>
   127c8:	ldr	r3, [sp, #72]	; 0x48
   127cc:	clz	r3, r3
   127d0:	lsr	r3, r3, #5
   127d4:	cmp	r9, #0
   127d8:	moveq	r3, #0
   127dc:	cmp	r3, #0
   127e0:	movne	r3, #0
   127e4:	bne	1280c <__assert_fail@plt+0x1a18>
   127e8:	cmp	r9, fp
   127ec:	movhi	r3, #39	; 0x27
   127f0:	strbhi	r3, [r8, fp]
   127f4:	add	r3, fp, #1
   127f8:	cmp	r9, r3
   127fc:	movhi	r2, #92	; 0x5c
   12800:	strbhi	r2, [r8, r3]
   12804:	mov	r3, r9
   12808:	ldr	r9, [sp, #72]	; 0x48
   1280c:	add	r2, fp, #2
   12810:	cmp	r2, r3
   12814:	movcc	r1, #39	; 0x27
   12818:	strbcc	r1, [r8, r2]
   1281c:	add	fp, fp, #3
   12820:	str	r5, [sp, #68]	; 0x44
   12824:	ldr	r2, [sp, #32]
   12828:	str	r2, [sp, #36]	; 0x24
   1282c:	str	r9, [sp, #72]	; 0x48
   12830:	mov	r9, r3
   12834:	mov	r4, #39	; 0x27
   12838:	mov	r3, #0
   1283c:	b	1231c <__assert_fail@plt+0x1528>
   12840:	mov	r3, #0
   12844:	str	r3, [sp, #44]	; 0x2c
   12848:	ldr	r7, [sp, #76]	; 0x4c
   1284c:	cmp	r7, #1
   12850:	bne	12888 <__assert_fail@plt+0x1a94>
   12854:	bl	10d1c <__ctype_b_loc@plt>
   12858:	ldr	r2, [r0]
   1285c:	lsl	r3, r4, #1
   12860:	ldrh	r5, [r2, r3]
   12864:	ubfx	r5, r5, #14, #1
   12868:	mov	ip, r7
   1286c:	eor	r3, r5, #1
   12870:	ldr	r2, [sp, #28]
   12874:	and	r3, r3, r2
   12878:	ands	r3, r3, #255	; 0xff
   1287c:	beq	122d0 <__assert_fail@plt+0x14dc>
   12880:	mov	r5, #0
   12884:	b	12ae4 <__assert_fail@plt+0x1cf0>
   12888:	mov	r2, #0
   1288c:	mov	r3, #0
   12890:	strd	r2, [sp, #104]	; 0x68
   12894:	ldr	r3, [sp, #24]
   12898:	cmn	r3, #1
   1289c:	beq	128c0 <__assert_fail@plt+0x1acc>
   128a0:	mov	r3, #0
   128a4:	str	r4, [sp, #88]	; 0x58
   128a8:	str	fp, [sp, #92]	; 0x5c
   128ac:	str	r8, [sp, #56]	; 0x38
   128b0:	mov	r8, r3
   128b4:	str	r9, [sp, #84]	; 0x54
   128b8:	ldr	r9, [sp, #48]	; 0x30
   128bc:	b	12a0c <__assert_fail@plt+0x1c18>
   128c0:	ldr	r0, [sp, #48]	; 0x30
   128c4:	bl	10d34 <strlen@plt>
   128c8:	str	r0, [sp, #24]
   128cc:	b	128a0 <__assert_fail@plt+0x1aac>
   128d0:	mov	r1, fp
   128d4:	ldr	r4, [sp, #88]	; 0x58
   128d8:	mov	r2, r8
   128dc:	mov	ip, r8
   128e0:	ldr	fp, [sp, #92]	; 0x5c
   128e4:	ldr	r8, [sp, #56]	; 0x38
   128e8:	ldr	r9, [sp, #84]	; 0x54
   128ec:	ldr	r0, [sp, #24]
   128f0:	cmp	r7, r0
   128f4:	bcs	12aac <__assert_fail@plt+0x1cb8>
   128f8:	ldrb	r3, [r1]
   128fc:	cmp	r3, #0
   12900:	beq	12ab4 <__assert_fail@plt+0x1cc0>
   12904:	mov	r3, r1
   12908:	add	r2, r2, #1
   1290c:	add	r1, r6, r2
   12910:	cmp	r0, r1
   12914:	bls	12abc <__assert_fail@plt+0x1cc8>
   12918:	ldrb	r1, [r3, #1]!
   1291c:	cmp	r1, #0
   12920:	bne	12908 <__assert_fail@plt+0x1b14>
   12924:	mov	ip, r2
   12928:	mov	r5, #0
   1292c:	b	12adc <__assert_fail@plt+0x1ce8>
   12930:	ldr	r3, [sp, #56]	; 0x38
   12934:	str	r3, [sp, #64]	; 0x40
   12938:	ldr	r8, [sp, #84]	; 0x54
   1293c:	mov	r7, #2
   12940:	b	12e84 <__assert_fail@plt+0x2090>
   12944:	cmp	r2, r7
   12948:	beq	129e8 <__assert_fail@plt+0x1bf4>
   1294c:	ldrb	r3, [r2], #1
   12950:	sub	r3, r3, #91	; 0x5b
   12954:	cmp	r3, #33	; 0x21
   12958:	ldrls	pc, [pc, r3, lsl #2]
   1295c:	b	12944 <__assert_fail@plt+0x1b50>
   12960:	andeq	r2, r1, r0, lsr r9
   12964:	andeq	r2, r1, r0, lsr r9
   12968:	andeq	r2, r1, r4, asr #18
   1296c:	andeq	r2, r1, r0, lsr r9
   12970:	andeq	r2, r1, r4, asr #18
   12974:	andeq	r2, r1, r0, lsr r9
   12978:	andeq	r2, r1, r4, asr #18
   1297c:	andeq	r2, r1, r4, asr #18
   12980:	andeq	r2, r1, r4, asr #18
   12984:	andeq	r2, r1, r4, asr #18
   12988:	andeq	r2, r1, r4, asr #18
   1298c:	andeq	r2, r1, r4, asr #18
   12990:	andeq	r2, r1, r4, asr #18
   12994:	andeq	r2, r1, r4, asr #18
   12998:	andeq	r2, r1, r4, asr #18
   1299c:	andeq	r2, r1, r4, asr #18
   129a0:	andeq	r2, r1, r4, asr #18
   129a4:	andeq	r2, r1, r4, asr #18
   129a8:	andeq	r2, r1, r4, asr #18
   129ac:	andeq	r2, r1, r4, asr #18
   129b0:	andeq	r2, r1, r4, asr #18
   129b4:	andeq	r2, r1, r4, asr #18
   129b8:	andeq	r2, r1, r4, asr #18
   129bc:	andeq	r2, r1, r4, asr #18
   129c0:	andeq	r2, r1, r4, asr #18
   129c4:	andeq	r2, r1, r4, asr #18
   129c8:	andeq	r2, r1, r4, asr #18
   129cc:	andeq	r2, r1, r4, asr #18
   129d0:	andeq	r2, r1, r4, asr #18
   129d4:	andeq	r2, r1, r4, asr #18
   129d8:	andeq	r2, r1, r4, asr #18
   129dc:	andeq	r2, r1, r4, asr #18
   129e0:	andeq	r2, r1, r4, asr #18
   129e4:	andeq	r2, r1, r0, lsr r9
   129e8:	ldr	r0, [sp, #100]	; 0x64
   129ec:	bl	10c80 <iswprint@plt>
   129f0:	cmp	r0, #0
   129f4:	moveq	r5, #0
   129f8:	add	r8, r8, r4
   129fc:	add	r0, sp, #104	; 0x68
   12a00:	bl	10c2c <mbsinit@plt>
   12a04:	cmp	r0, #0
   12a08:	bne	12a78 <__assert_fail@plt+0x1c84>
   12a0c:	add	r7, r6, r8
   12a10:	add	fp, r9, r7
   12a14:	add	r3, sp, #104	; 0x68
   12a18:	ldr	r2, [sp, #24]
   12a1c:	sub	r2, r2, r7
   12a20:	mov	r1, fp
   12a24:	add	r0, sp, #100	; 0x64
   12a28:	bl	14f50 <__assert_fail@plt+0x415c>
   12a2c:	subs	r4, r0, #0
   12a30:	beq	12ac8 <__assert_fail@plt+0x1cd4>
   12a34:	cmn	r4, #1
   12a38:	beq	12a90 <__assert_fail@plt+0x1c9c>
   12a3c:	cmn	r4, #2
   12a40:	beq	128d0 <__assert_fail@plt+0x1adc>
   12a44:	ldr	r3, [sp, #32]
   12a48:	cmp	sl, #2
   12a4c:	movne	r3, #0
   12a50:	andeq	r3, r3, #1
   12a54:	cmp	r3, #0
   12a58:	beq	129e8 <__assert_fail@plt+0x1bf4>
   12a5c:	cmp	r4, #1
   12a60:	bls	129e8 <__assert_fail@plt+0x1bf4>
   12a64:	add	r2, r7, #1
   12a68:	add	r2, r9, r2
   12a6c:	add	r3, r9, r4
   12a70:	add	r7, r3, r7
   12a74:	b	1294c <__assert_fail@plt+0x1b58>
   12a78:	ldr	r4, [sp, #88]	; 0x58
   12a7c:	mov	ip, r8
   12a80:	ldr	fp, [sp, #92]	; 0x5c
   12a84:	ldr	r8, [sp, #56]	; 0x38
   12a88:	ldr	r9, [sp, #84]	; 0x54
   12a8c:	b	12adc <__assert_fail@plt+0x1ce8>
   12a90:	ldr	r4, [sp, #88]	; 0x58
   12a94:	mov	ip, r8
   12a98:	ldr	fp, [sp, #92]	; 0x5c
   12a9c:	ldr	r8, [sp, #56]	; 0x38
   12aa0:	ldr	r9, [sp, #84]	; 0x54
   12aa4:	mov	r5, #0
   12aa8:	b	12adc <__assert_fail@plt+0x1ce8>
   12aac:	mov	r5, #0
   12ab0:	b	12adc <__assert_fail@plt+0x1ce8>
   12ab4:	mov	r5, #0
   12ab8:	b	12adc <__assert_fail@plt+0x1ce8>
   12abc:	mov	ip, r2
   12ac0:	mov	r5, #0
   12ac4:	b	12adc <__assert_fail@plt+0x1ce8>
   12ac8:	ldr	r4, [sp, #88]	; 0x58
   12acc:	mov	ip, r8
   12ad0:	ldr	fp, [sp, #92]	; 0x5c
   12ad4:	ldr	r8, [sp, #56]	; 0x38
   12ad8:	ldr	r9, [sp, #84]	; 0x54
   12adc:	cmp	ip, #1
   12ae0:	bls	1286c <__assert_fail@plt+0x1a78>
   12ae4:	add	lr, r6, ip
   12ae8:	ldr	r3, [sp, #48]	; 0x30
   12aec:	add	r1, r3, r6
   12af0:	mov	r3, #0
   12af4:	eor	r0, r5, #1
   12af8:	ldr	r2, [sp, #28]
   12afc:	and	r0, r0, r2
   12b00:	uxtb	r0, r0
   12b04:	str	r0, [sp, #56]	; 0x38
   12b08:	mov	r7, #92	; 0x5c
   12b0c:	ldr	ip, [sp, #36]	; 0x24
   12b10:	str	r5, [sp, #84]	; 0x54
   12b14:	ldr	r2, [sp, #44]	; 0x2c
   12b18:	b	12b88 <__assert_fail@plt+0x1d94>
   12b1c:	cmp	r2, #0
   12b20:	beq	12b30 <__assert_fail@plt+0x1d3c>
   12b24:	cmp	r9, fp
   12b28:	strbhi	r7, [r8, fp]
   12b2c:	add	fp, fp, #1
   12b30:	add	r5, r6, #1
   12b34:	cmp	r5, lr
   12b38:	bcs	12c44 <__assert_fail@plt+0x1e50>
   12b3c:	eor	r2, r3, #1
   12b40:	and	r2, r2, ip
   12b44:	ands	r2, r2, #255	; 0xff
   12b48:	beq	12c60 <__assert_fail@plt+0x1e6c>
   12b4c:	cmp	r9, fp
   12b50:	movhi	r2, #39	; 0x27
   12b54:	strbhi	r2, [r8, fp]
   12b58:	add	r2, fp, #1
   12b5c:	cmp	r9, r2
   12b60:	movhi	ip, #39	; 0x27
   12b64:	strbhi	ip, [r8, r2]
   12b68:	add	fp, fp, #2
   12b6c:	ldr	ip, [sp, #56]	; 0x38
   12b70:	mov	r2, ip
   12b74:	mov	r6, r5
   12b78:	cmp	r9, fp
   12b7c:	strbhi	r4, [r8, fp]
   12b80:	add	fp, fp, #1
   12b84:	ldrb	r4, [r1, #1]!
   12b88:	cmp	r0, #0
   12b8c:	beq	12b1c <__assert_fail@plt+0x1d28>
   12b90:	ldr	r3, [sp, #32]
   12b94:	cmp	r3, #0
   12b98:	bne	12e2c <__assert_fail@plt+0x2038>
   12b9c:	eor	r3, ip, #1
   12ba0:	cmp	sl, #2
   12ba4:	movne	r3, #0
   12ba8:	andeq	r3, r3, #1
   12bac:	cmp	r3, #0
   12bb0:	beq	12be8 <__assert_fail@plt+0x1df4>
   12bb4:	cmp	r9, fp
   12bb8:	movhi	ip, #39	; 0x27
   12bbc:	strbhi	ip, [r8, fp]
   12bc0:	add	ip, fp, #1
   12bc4:	cmp	r9, ip
   12bc8:	movhi	r5, #36	; 0x24
   12bcc:	strbhi	r5, [r8, ip]
   12bd0:	add	ip, fp, #2
   12bd4:	cmp	r9, ip
   12bd8:	movhi	r5, #39	; 0x27
   12bdc:	strbhi	r5, [r8, ip]
   12be0:	add	fp, fp, #3
   12be4:	mov	ip, r3
   12be8:	cmp	r9, fp
   12bec:	strbhi	r7, [r8, fp]
   12bf0:	add	r3, fp, #1
   12bf4:	cmp	r9, r3
   12bf8:	bls	12c08 <__assert_fail@plt+0x1e14>
   12bfc:	lsr	r5, r4, #6
   12c00:	add	r5, r5, #48	; 0x30
   12c04:	strb	r5, [r8, r3]
   12c08:	add	r3, fp, #2
   12c0c:	cmp	r9, r3
   12c10:	bls	12c20 <__assert_fail@plt+0x1e2c>
   12c14:	ubfx	r5, r4, #3, #3
   12c18:	add	r5, r5, #48	; 0x30
   12c1c:	strb	r5, [r8, r3]
   12c20:	add	fp, fp, #3
   12c24:	and	r4, r4, #7
   12c28:	add	r4, r4, #48	; 0x30
   12c2c:	add	r5, r6, #1
   12c30:	cmp	r5, lr
   12c34:	bcs	12c50 <__assert_fail@plt+0x1e5c>
   12c38:	ldr	r3, [sp, #56]	; 0x38
   12c3c:	mov	r6, r5
   12c40:	b	12b78 <__assert_fail@plt+0x1d84>
   12c44:	str	ip, [sp, #36]	; 0x24
   12c48:	ldr	r5, [sp, #84]	; 0x54
   12c4c:	b	1267c <__assert_fail@plt+0x1888>
   12c50:	str	ip, [sp, #36]	; 0x24
   12c54:	ldr	r5, [sp, #84]	; 0x54
   12c58:	mov	r3, r0
   12c5c:	b	1267c <__assert_fail@plt+0x1888>
   12c60:	mov	r6, r5
   12c64:	b	12b78 <__assert_fail@plt+0x1d84>
   12c68:	ldr	r3, [sp, #44]	; 0x2c
   12c6c:	b	122d0 <__assert_fail@plt+0x14dc>
   12c70:	mov	r5, #0
   12c74:	mov	r3, r5
   12c78:	mov	r4, #63	; 0x3f
   12c7c:	b	122d0 <__assert_fail@plt+0x14dc>
   12c80:	mov	r5, #0
   12c84:	mov	r3, r5
   12c88:	mov	r4, #63	; 0x3f
   12c8c:	b	122d0 <__assert_fail@plt+0x14dc>
   12c90:	mov	r5, #0
   12c94:	mov	r3, r5
   12c98:	b	122d0 <__assert_fail@plt+0x14dc>
   12c9c:	mov	r5, #0
   12ca0:	mov	r3, r5
   12ca4:	b	122d0 <__assert_fail@plt+0x14dc>
   12ca8:	ldr	r5, [sp, #44]	; 0x2c
   12cac:	ldr	r3, [sp, #32]
   12cb0:	b	122d0 <__assert_fail@plt+0x14dc>
   12cb4:	ldr	r5, [sp, #44]	; 0x2c
   12cb8:	mov	r3, #0
   12cbc:	str	r3, [sp, #44]	; 0x2c
   12cc0:	b	122d0 <__assert_fail@plt+0x14dc>
   12cc4:	mov	r4, r3
   12cc8:	mov	r5, #0
   12ccc:	b	12328 <__assert_fail@plt+0x1534>
   12cd0:	mov	r5, #0
   12cd4:	mov	r4, #97	; 0x61
   12cd8:	b	12328 <__assert_fail@plt+0x1534>
   12cdc:	mov	r5, #0
   12ce0:	mov	r3, r5
   12ce4:	mov	r4, #92	; 0x5c
   12ce8:	b	1267c <__assert_fail@plt+0x1888>
   12cec:	ldr	r3, [sp, #48]	; 0x30
   12cf0:	ldrb	r5, [r3, r6]
   12cf4:	adds	r5, r5, #0
   12cf8:	movne	r5, #1
   12cfc:	b	123cc <__assert_fail@plt+0x15d8>
   12d00:	cmp	sl, #2
   12d04:	movne	r3, #0
   12d08:	moveq	r3, #1
   12d0c:	ldr	r1, [sp, #32]
   12d10:	cmp	fp, #0
   12d14:	andeq	r2, r3, r1
   12d18:	movne	r2, #0
   12d1c:	cmp	r2, #0
   12d20:	bne	12e40 <__assert_fail@plt+0x204c>
   12d24:	eor	r2, r1, #1
   12d28:	uxtb	r2, r2
   12d2c:	and	r3, r3, r2
   12d30:	ldr	r1, [sp, #68]	; 0x44
   12d34:	ands	r3, r1, r3
   12d38:	beq	12dcc <__assert_fail@plt+0x1fd8>
   12d3c:	ldr	r2, [sp, #40]	; 0x28
   12d40:	cmp	r2, #0
   12d44:	bne	12d7c <__assert_fail@plt+0x1f88>
   12d48:	ldr	r2, [sp, #72]	; 0x48
   12d4c:	adds	r2, r2, #0
   12d50:	movne	r2, #1
   12d54:	cmp	r9, #0
   12d58:	movne	r2, #0
   12d5c:	str	r2, [sp, #68]	; 0x44
   12d60:	mov	sl, #2
   12d64:	ldr	r1, [sp, #40]	; 0x28
   12d68:	str	r1, [sp, #32]
   12d6c:	cmp	r2, #0
   12d70:	beq	12dc0 <__assert_fail@plt+0x1fcc>
   12d74:	ldr	r9, [sp, #72]	; 0x48
   12d78:	b	11ad4 <__assert_fail@plt+0xce0>
   12d7c:	ldr	r3, [sp, #168]	; 0xa8
   12d80:	str	r3, [sp, #16]
   12d84:	ldr	r3, [sp, #164]	; 0xa4
   12d88:	str	r3, [sp, #12]
   12d8c:	ldr	r3, [sp, #160]	; 0xa0
   12d90:	str	r3, [sp, #8]
   12d94:	ldr	r3, [sp, #156]	; 0x9c
   12d98:	str	r3, [sp, #4]
   12d9c:	mov	r3, #5
   12da0:	str	r3, [sp]
   12da4:	ldr	r3, [sp, #24]
   12da8:	ldr	r2, [sp, #48]	; 0x30
   12dac:	ldr	r1, [sp, #72]	; 0x48
   12db0:	ldr	r0, [sp, #64]	; 0x40
   12db4:	bl	11a5c <__assert_fail@plt+0xc68>
   12db8:	mov	fp, r0
   12dbc:	b	12edc <__assert_fail@plt+0x20e8>
   12dc0:	mov	r8, r9
   12dc4:	mov	r2, r3
   12dc8:	b	12dd0 <__assert_fail@plt+0x1fdc>
   12dcc:	mov	r8, r9
   12dd0:	ldr	r3, [sp, #60]	; 0x3c
   12dd4:	cmp	r3, #0
   12dd8:	moveq	r2, #0
   12ddc:	andne	r2, r2, #1
   12de0:	cmp	r2, #0
   12de4:	beq	12e14 <__assert_fail@plt+0x2020>
   12de8:	mov	r2, r3
   12dec:	ldrb	r3, [r3]
   12df0:	cmp	r3, #0
   12df4:	beq	12e14 <__assert_fail@plt+0x2020>
   12df8:	ldr	r1, [sp, #64]	; 0x40
   12dfc:	cmp	r8, fp
   12e00:	strbhi	r3, [r1, fp]
   12e04:	add	fp, fp, #1
   12e08:	ldrb	r3, [r2, #1]!
   12e0c:	cmp	r3, #0
   12e10:	bne	12dfc <__assert_fail@plt+0x2008>
   12e14:	cmp	r8, fp
   12e18:	bls	12edc <__assert_fail@plt+0x20e8>
   12e1c:	mov	r3, #0
   12e20:	ldr	r2, [sp, #64]	; 0x40
   12e24:	strb	r3, [r2, fp]
   12e28:	b	12edc <__assert_fail@plt+0x20e8>
   12e2c:	mov	r8, r9
   12e30:	mov	r7, sl
   12e34:	ldr	r3, [sp, #32]
   12e38:	str	r3, [sp, #28]
   12e3c:	b	12e84 <__assert_fail@plt+0x2090>
   12e40:	mov	r8, r9
   12e44:	mov	r7, #2
   12e48:	b	12e84 <__assert_fail@plt+0x2090>
   12e4c:	mov	r8, r9
   12e50:	mov	r7, sl
   12e54:	b	12e84 <__assert_fail@plt+0x2090>
   12e58:	mov	r8, r9
   12e5c:	mov	r7, sl
   12e60:	b	12e84 <__assert_fail@plt+0x2090>
   12e64:	mov	r8, r9
   12e68:	mov	r7, sl
   12e6c:	b	12e84 <__assert_fail@plt+0x2090>
   12e70:	mov	r8, r9
   12e74:	mov	r7, sl
   12e78:	b	12e84 <__assert_fail@plt+0x2090>
   12e7c:	mov	r8, r9
   12e80:	mov	r7, sl
   12e84:	ldr	r3, [sp, #28]
   12e88:	cmp	r7, #2
   12e8c:	movne	r3, #0
   12e90:	andeq	r3, r3, #1
   12e94:	cmp	r3, #0
   12e98:	movne	r7, #4
   12e9c:	ldr	r3, [sp, #168]	; 0xa8
   12ea0:	str	r3, [sp, #16]
   12ea4:	ldr	r3, [sp, #164]	; 0xa4
   12ea8:	str	r3, [sp, #12]
   12eac:	mov	r3, #0
   12eb0:	str	r3, [sp, #8]
   12eb4:	ldr	r3, [sp, #156]	; 0x9c
   12eb8:	bic	r3, r3, #2
   12ebc:	str	r3, [sp, #4]
   12ec0:	str	r7, [sp]
   12ec4:	ldr	r3, [sp, #24]
   12ec8:	ldr	r2, [sp, #48]	; 0x30
   12ecc:	mov	r1, r8
   12ed0:	ldr	r0, [sp, #64]	; 0x40
   12ed4:	bl	11a5c <__assert_fail@plt+0xc68>
   12ed8:	mov	fp, r0
   12edc:	mov	r0, fp
   12ee0:	add	sp, sp, #116	; 0x74
   12ee4:	ldrd	r4, [sp]
   12ee8:	ldrd	r6, [sp, #8]
   12eec:	ldrd	r8, [sp, #16]
   12ef0:	ldrd	sl, [sp, #24]
   12ef4:	add	sp, sp, #32
   12ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   12efc:	mov	r8, r9
   12f00:	mov	r7, sl
   12f04:	b	12e9c <__assert_fail@plt+0x20a8>
   12f08:	add	fp, fp, #4
   12f0c:	str	r3, [sp, #36]	; 0x24
   12f10:	mov	r5, #0
   12f14:	mov	r4, #48	; 0x30
   12f18:	b	122d0 <__assert_fail@plt+0x14dc>
   12f1c:	mov	r3, #1
   12f20:	str	r3, [sp, #32]
   12f24:	str	r3, [sp, #28]
   12f28:	str	r3, [sp, #52]	; 0x34
   12f2c:	movw	r3, #22472	; 0x57c8
   12f30:	movt	r3, #1
   12f34:	str	r3, [sp, #60]	; 0x3c
   12f38:	mov	fp, #0
   12f3c:	mov	sl, #5
   12f40:	b	11b34 <__assert_fail@plt+0xd40>
   12f44:	ldr	r3, [sp, #48]	; 0x30
   12f48:	ldrb	r4, [r3, r6]
   12f4c:	cmp	r4, #126	; 0x7e
   12f50:	ldrls	pc, [pc, r4, lsl #2]
   12f54:	b	12840 <__assert_fail@plt+0x1a4c>
   12f58:	andeq	r1, r1, r8, asr #31
   12f5c:	andeq	r2, r1, r0, asr #16
   12f60:	andeq	r2, r1, r0, asr #16
   12f64:	andeq	r2, r1, r0, asr #16
   12f68:	andeq	r2, r1, r0, asr #16
   12f6c:	andeq	r2, r1, r0, asr #16
   12f70:	andeq	r2, r1, r0, asr #16
   12f74:	ldrdeq	r2, [r1], -r0
   12f78:	andeq	r2, r1, ip, ror #4
   12f7c:	andeq	r2, r1, r0, lsl r6
   12f80:	andeq	r2, r1, ip, asr #13
   12f84:	andeq	r2, r1, r4, lsr #12
   12f88:	andeq	r2, r1, r0, lsl #5
   12f8c:	muleq	r1, r4, r2
   12f90:	andeq	r2, r1, r0, asr #16
   12f94:	andeq	r2, r1, r0, asr #16
   12f98:	andeq	r2, r1, r0, asr #16
   12f9c:	andeq	r2, r1, r0, asr #16
   12fa0:	andeq	r2, r1, r0, asr #16
   12fa4:	andeq	r2, r1, r0, asr #16
   12fa8:	andeq	r2, r1, r0, asr #16
   12fac:	andeq	r2, r1, r0, asr #16
   12fb0:	andeq	r2, r1, r0, asr #16
   12fb4:	andeq	r2, r1, r0, asr #16
   12fb8:	andeq	r2, r1, r0, asr #16
   12fbc:	andeq	r2, r1, r0, asr #16
   12fc0:	andeq	r2, r1, r0, asr #16
   12fc4:	andeq	r2, r1, r0, asr #16
   12fc8:	andeq	r2, r1, r0, asr #16
   12fcc:	andeq	r2, r1, r0, asr #16
   12fd0:	andeq	r2, r1, r0, asr #16
   12fd4:	andeq	r2, r1, r0, asr #16
   12fd8:	andeq	r2, r1, r4, asr r7
   12fdc:	muleq	r1, r0, r7
   12fe0:	muleq	r1, r0, r7
   12fe4:	andeq	r2, r1, r8, asr #14
   12fe8:	muleq	r1, r0, r7
   12fec:			; <UNDEFINED> instruction: 0x00012cb4
   12ff0:	muleq	r1, r0, r7
   12ff4:	andeq	r2, r1, r0, lsr #15
   12ff8:	muleq	r1, r0, r7
   12ffc:	muleq	r1, r0, r7
   13000:	muleq	r1, r0, r7
   13004:			; <UNDEFINED> instruction: 0x00012cb4
   13008:			; <UNDEFINED> instruction: 0x00012cb4
   1300c:			; <UNDEFINED> instruction: 0x00012cb4
   13010:			; <UNDEFINED> instruction: 0x00012cb4
   13014:			; <UNDEFINED> instruction: 0x00012cb4
   13018:			; <UNDEFINED> instruction: 0x00012cb4
   1301c:			; <UNDEFINED> instruction: 0x00012cb4
   13020:			; <UNDEFINED> instruction: 0x00012cb4
   13024:			; <UNDEFINED> instruction: 0x00012cb4
   13028:			; <UNDEFINED> instruction: 0x00012cb4
   1302c:			; <UNDEFINED> instruction: 0x00012cb4
   13030:			; <UNDEFINED> instruction: 0x00012cb4
   13034:			; <UNDEFINED> instruction: 0x00012cb4
   13038:			; <UNDEFINED> instruction: 0x00012cb4
   1303c:			; <UNDEFINED> instruction: 0x00012cb4
   13040:			; <UNDEFINED> instruction: 0x00012cb4
   13044:	muleq	r1, r0, r7
   13048:	muleq	r1, r0, r7
   1304c:	muleq	r1, r0, r7
   13050:	muleq	r1, r0, r7
   13054:	andeq	r2, r1, r0, lsl #2
   13058:	andeq	r2, r1, r0, asr #16
   1305c:			; <UNDEFINED> instruction: 0x00012cb4
   13060:			; <UNDEFINED> instruction: 0x00012cb4
   13064:			; <UNDEFINED> instruction: 0x00012cb4
   13068:			; <UNDEFINED> instruction: 0x00012cb4
   1306c:			; <UNDEFINED> instruction: 0x00012cb4
   13070:			; <UNDEFINED> instruction: 0x00012cb4
   13074:			; <UNDEFINED> instruction: 0x00012cb4
   13078:			; <UNDEFINED> instruction: 0x00012cb4
   1307c:			; <UNDEFINED> instruction: 0x00012cb4
   13080:			; <UNDEFINED> instruction: 0x00012cb4
   13084:			; <UNDEFINED> instruction: 0x00012cb4
   13088:			; <UNDEFINED> instruction: 0x00012cb4
   1308c:			; <UNDEFINED> instruction: 0x00012cb4
   13090:			; <UNDEFINED> instruction: 0x00012cb4
   13094:			; <UNDEFINED> instruction: 0x00012cb4
   13098:			; <UNDEFINED> instruction: 0x00012cb4
   1309c:			; <UNDEFINED> instruction: 0x00012cb4
   130a0:			; <UNDEFINED> instruction: 0x00012cb4
   130a4:			; <UNDEFINED> instruction: 0x00012cb4
   130a8:			; <UNDEFINED> instruction: 0x00012cb4
   130ac:			; <UNDEFINED> instruction: 0x00012cb4
   130b0:			; <UNDEFINED> instruction: 0x00012cb4
   130b4:			; <UNDEFINED> instruction: 0x00012cb4
   130b8:			; <UNDEFINED> instruction: 0x00012cb4
   130bc:			; <UNDEFINED> instruction: 0x00012cb4
   130c0:			; <UNDEFINED> instruction: 0x00012cb4
   130c4:	muleq	r1, r0, r7
   130c8:	andeq	r2, r1, r8, lsr r6
   130cc:			; <UNDEFINED> instruction: 0x00012cb4
   130d0:	muleq	r1, r0, r7
   130d4:			; <UNDEFINED> instruction: 0x00012cb4
   130d8:	muleq	r1, r0, r7
   130dc:			; <UNDEFINED> instruction: 0x00012cb4
   130e0:			; <UNDEFINED> instruction: 0x00012cb4
   130e4:			; <UNDEFINED> instruction: 0x00012cb4
   130e8:			; <UNDEFINED> instruction: 0x00012cb4
   130ec:			; <UNDEFINED> instruction: 0x00012cb4
   130f0:			; <UNDEFINED> instruction: 0x00012cb4
   130f4:			; <UNDEFINED> instruction: 0x00012cb4
   130f8:			; <UNDEFINED> instruction: 0x00012cb4
   130fc:			; <UNDEFINED> instruction: 0x00012cb4
   13100:			; <UNDEFINED> instruction: 0x00012cb4
   13104:			; <UNDEFINED> instruction: 0x00012cb4
   13108:			; <UNDEFINED> instruction: 0x00012cb4
   1310c:			; <UNDEFINED> instruction: 0x00012cb4
   13110:			; <UNDEFINED> instruction: 0x00012cb4
   13114:			; <UNDEFINED> instruction: 0x00012cb4
   13118:			; <UNDEFINED> instruction: 0x00012cb4
   1311c:			; <UNDEFINED> instruction: 0x00012cb4
   13120:			; <UNDEFINED> instruction: 0x00012cb4
   13124:			; <UNDEFINED> instruction: 0x00012cb4
   13128:			; <UNDEFINED> instruction: 0x00012cb4
   1312c:			; <UNDEFINED> instruction: 0x00012cb4
   13130:			; <UNDEFINED> instruction: 0x00012cb4
   13134:			; <UNDEFINED> instruction: 0x00012cb4
   13138:			; <UNDEFINED> instruction: 0x00012cb4
   1313c:			; <UNDEFINED> instruction: 0x00012cb4
   13140:			; <UNDEFINED> instruction: 0x00012cb4
   13144:	strdeq	r2, [r1], -r8
   13148:	muleq	r1, r0, r7
   1314c:	strdeq	r2, [r1], -r8
   13150:	andeq	r2, r1, r8, asr #14
   13154:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13158:	strd	r6, [sp, #8]
   1315c:	strd	r8, [sp, #16]
   13160:	strd	sl, [sp, #24]
   13164:	str	lr, [sp, #32]
   13168:	sub	sp, sp, #52	; 0x34
   1316c:	mov	r5, r0
   13170:	str	r1, [sp, #24]
   13174:	str	r2, [sp, #28]
   13178:	mov	r4, r3
   1317c:	bl	10d4c <__errno_location@plt>
   13180:	str	r0, [sp, #32]
   13184:	ldr	r3, [r0]
   13188:	str	r3, [sp, #36]	; 0x24
   1318c:	movw	r3, #24800	; 0x60e0
   13190:	movt	r3, #2
   13194:	ldr	r6, [r3]
   13198:	cmn	r5, #-2147483647	; 0x80000001
   1319c:	movne	r3, #0
   131a0:	moveq	r3, #1
   131a4:	orrs	r3, r3, r5, lsr #31
   131a8:	bne	1330c <__assert_fail@plt+0x2518>
   131ac:	movw	r3, #24800	; 0x60e0
   131b0:	movt	r3, #2
   131b4:	ldr	r2, [r3, #4]
   131b8:	cmp	r2, r5
   131bc:	bgt	1322c <__assert_fail@plt+0x2438>
   131c0:	str	r2, [sp, #44]	; 0x2c
   131c4:	add	r3, r3, #8
   131c8:	cmp	r6, r3
   131cc:	beq	13310 <__assert_fail@plt+0x251c>
   131d0:	sub	r2, r5, r2
   131d4:	mov	r3, #8
   131d8:	str	r3, [sp]
   131dc:	mvn	r3, #-2147483648	; 0x80000000
   131e0:	add	r2, r2, #1
   131e4:	add	r1, sp, #44	; 0x2c
   131e8:	mov	r0, r6
   131ec:	bl	14314 <__assert_fail@plt+0x3520>
   131f0:	mov	r6, r0
   131f4:	movw	r3, #24800	; 0x60e0
   131f8:	movt	r3, #2
   131fc:	str	r0, [r3]
   13200:	movw	r7, #24800	; 0x60e0
   13204:	movt	r7, #2
   13208:	ldr	r0, [r7, #4]
   1320c:	ldr	r2, [sp, #44]	; 0x2c
   13210:	sub	r2, r2, r0
   13214:	lsl	r2, r2, #3
   13218:	mov	r1, #0
   1321c:	add	r0, r6, r0, lsl #3
   13220:	bl	10d64 <memset@plt>
   13224:	ldr	r3, [sp, #44]	; 0x2c
   13228:	str	r3, [r7, #4]
   1322c:	add	fp, r6, r5, lsl #3
   13230:	ldr	r8, [r6, r5, lsl #3]
   13234:	ldr	r7, [fp, #4]
   13238:	ldr	r3, [r4, #4]
   1323c:	orr	r9, r3, #1
   13240:	add	sl, r4, #8
   13244:	ldr	r3, [r4, #44]	; 0x2c
   13248:	str	r3, [sp, #16]
   1324c:	ldr	r3, [r4, #40]	; 0x28
   13250:	str	r3, [sp, #12]
   13254:	str	sl, [sp, #8]
   13258:	str	r9, [sp, #4]
   1325c:	ldr	r3, [r4]
   13260:	str	r3, [sp]
   13264:	ldr	r3, [sp, #28]
   13268:	ldr	r2, [sp, #24]
   1326c:	mov	r1, r8
   13270:	mov	r0, r7
   13274:	bl	11a5c <__assert_fail@plt+0xc68>
   13278:	cmp	r8, r0
   1327c:	bhi	132e0 <__assert_fail@plt+0x24ec>
   13280:	add	r8, r0, #1
   13284:	str	r8, [r6, r5, lsl #3]
   13288:	movw	r3, #24908	; 0x614c
   1328c:	movt	r3, #2
   13290:	cmp	r7, r3
   13294:	beq	132a0 <__assert_fail@plt+0x24ac>
   13298:	mov	r0, r7
   1329c:	bl	14dec <__assert_fail@plt+0x3ff8>
   132a0:	mov	r0, r8
   132a4:	bl	14110 <__assert_fail@plt+0x331c>
   132a8:	mov	r7, r0
   132ac:	str	r0, [fp, #4]
   132b0:	ldr	r3, [r4, #44]	; 0x2c
   132b4:	str	r3, [sp, #16]
   132b8:	ldr	r3, [r4, #40]	; 0x28
   132bc:	str	r3, [sp, #12]
   132c0:	str	sl, [sp, #8]
   132c4:	str	r9, [sp, #4]
   132c8:	ldr	r3, [r4]
   132cc:	str	r3, [sp]
   132d0:	ldr	r3, [sp, #28]
   132d4:	ldr	r2, [sp, #24]
   132d8:	mov	r1, r8
   132dc:	bl	11a5c <__assert_fail@plt+0xc68>
   132e0:	ldr	r3, [sp, #32]
   132e4:	ldr	r2, [sp, #36]	; 0x24
   132e8:	str	r2, [r3]
   132ec:	mov	r0, r7
   132f0:	add	sp, sp, #52	; 0x34
   132f4:	ldrd	r4, [sp]
   132f8:	ldrd	r6, [sp, #8]
   132fc:	ldrd	r8, [sp, #16]
   13300:	ldrd	sl, [sp, #24]
   13304:	add	sp, sp, #32
   13308:	pop	{pc}		; (ldr pc, [sp], #4)
   1330c:	bl	10de8 <abort@plt>
   13310:	sub	r2, r5, r2
   13314:	mov	r3, #8
   13318:	str	r3, [sp]
   1331c:	mvn	r3, #-2147483648	; 0x80000000
   13320:	add	r2, r2, #1
   13324:	add	r1, sp, #44	; 0x2c
   13328:	mov	r0, #0
   1332c:	bl	14314 <__assert_fail@plt+0x3520>
   13330:	mov	r6, r0
   13334:	movw	r3, #24800	; 0x60e0
   13338:	movt	r3, #2
   1333c:	str	r0, [r3]
   13340:	ldrd	r2, [r3, #8]
   13344:	strd	r2, [r0]
   13348:	b	13200 <__assert_fail@plt+0x240c>
   1334c:	strd	r4, [sp, #-16]!
   13350:	str	r6, [sp, #8]
   13354:	str	lr, [sp, #12]
   13358:	mov	r4, r0
   1335c:	bl	10d4c <__errno_location@plt>
   13360:	mov	r5, r0
   13364:	ldr	r6, [r0]
   13368:	cmp	r4, #0
   1336c:	ldr	r3, [pc, #32]	; 13394 <__assert_fail@plt+0x25a0>
   13370:	moveq	r4, r3
   13374:	mov	r1, #48	; 0x30
   13378:	mov	r0, r4
   1337c:	bl	14484 <__assert_fail@plt+0x3690>
   13380:	str	r6, [r5]
   13384:	ldrd	r4, [sp]
   13388:	ldr	r6, [sp, #8]
   1338c:	add	sp, sp, #12
   13390:	pop	{pc}		; (ldr pc, [sp], #4)
   13394:	andeq	r6, r2, ip, asr #4
   13398:	subs	r3, r0, #0
   1339c:	ldr	r2, [pc, #8]	; 133ac <__assert_fail@plt+0x25b8>
   133a0:	moveq	r3, r2
   133a4:	ldr	r0, [r3]
   133a8:	bx	lr
   133ac:	andeq	r6, r2, ip, asr #4
   133b0:	subs	r3, r0, #0
   133b4:	ldr	r2, [pc, #8]	; 133c4 <__assert_fail@plt+0x25d0>
   133b8:	moveq	r3, r2
   133bc:	str	r1, [r3]
   133c0:	bx	lr
   133c4:	andeq	r6, r2, ip, asr #4
   133c8:	push	{lr}		; (str lr, [sp, #-4]!)
   133cc:	subs	r3, r0, #0
   133d0:	ldr	r0, [pc, #44]	; 13404 <__assert_fail@plt+0x2610>
   133d4:	moveq	r3, r0
   133d8:	add	r3, r3, #8
   133dc:	lsr	lr, r1, #5
   133e0:	and	r1, r1, #31
   133e4:	ldr	ip, [r3, lr, lsl #2]
   133e8:	lsr	r0, ip, r1
   133ec:	eor	r2, r2, r0
   133f0:	and	r2, r2, #1
   133f4:	eor	r1, ip, r2, lsl r1
   133f8:	str	r1, [r3, lr, lsl #2]
   133fc:	and	r0, r0, #1
   13400:	pop	{pc}		; (ldr pc, [sp], #4)
   13404:	andeq	r6, r2, ip, asr #4
   13408:	subs	r3, r0, #0
   1340c:	ldr	r2, [pc, #12]	; 13420 <__assert_fail@plt+0x262c>
   13410:	moveq	r3, r2
   13414:	ldr	r0, [r3, #4]
   13418:	str	r1, [r3, #4]
   1341c:	bx	lr
   13420:	andeq	r6, r2, ip, asr #4
   13424:	subs	r3, r0, #0
   13428:	ldr	r0, [pc, #44]	; 1345c <__assert_fail@plt+0x2668>
   1342c:	moveq	r3, r0
   13430:	mov	r0, #10
   13434:	str	r0, [r3]
   13438:	cmp	r2, #0
   1343c:	cmpne	r1, #0
   13440:	beq	13450 <__assert_fail@plt+0x265c>
   13444:	str	r1, [r3, #40]	; 0x28
   13448:	str	r2, [r3, #44]	; 0x2c
   1344c:	bx	lr
   13450:	str	r4, [sp, #-8]!
   13454:	str	lr, [sp, #4]
   13458:	bl	10de8 <abort@plt>
   1345c:	andeq	r6, r2, ip, asr #4
   13460:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13464:	strd	r6, [sp, #8]
   13468:	strd	r8, [sp, #16]
   1346c:	str	sl, [sp, #24]
   13470:	str	lr, [sp, #28]
   13474:	sub	sp, sp, #24
   13478:	mov	r7, r0
   1347c:	mov	r8, r1
   13480:	mov	r9, r2
   13484:	mov	sl, r3
   13488:	ldr	r4, [sp, #56]	; 0x38
   1348c:	cmp	r4, #0
   13490:	ldr	r3, [pc, #104]	; 13500 <__assert_fail@plt+0x270c>
   13494:	moveq	r4, r3
   13498:	bl	10d4c <__errno_location@plt>
   1349c:	mov	r5, r0
   134a0:	ldr	r6, [r0]
   134a4:	ldr	r3, [r4, #44]	; 0x2c
   134a8:	str	r3, [sp, #16]
   134ac:	ldr	r3, [r4, #40]	; 0x28
   134b0:	str	r3, [sp, #12]
   134b4:	add	r3, r4, #8
   134b8:	str	r3, [sp, #8]
   134bc:	ldr	r3, [r4, #4]
   134c0:	str	r3, [sp, #4]
   134c4:	ldr	r3, [r4]
   134c8:	str	r3, [sp]
   134cc:	mov	r3, sl
   134d0:	mov	r2, r9
   134d4:	mov	r1, r8
   134d8:	mov	r0, r7
   134dc:	bl	11a5c <__assert_fail@plt+0xc68>
   134e0:	str	r6, [r5]
   134e4:	add	sp, sp, #24
   134e8:	ldrd	r4, [sp]
   134ec:	ldrd	r6, [sp, #8]
   134f0:	ldrd	r8, [sp, #16]
   134f4:	ldr	sl, [sp, #24]
   134f8:	add	sp, sp, #28
   134fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13500:	andeq	r6, r2, ip, asr #4
   13504:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13508:	strd	r6, [sp, #8]
   1350c:	strd	r8, [sp, #16]
   13510:	strd	sl, [sp, #24]
   13514:	str	lr, [sp, #32]
   13518:	sub	sp, sp, #44	; 0x2c
   1351c:	mov	r8, r0
   13520:	mov	sl, r1
   13524:	mov	r6, r2
   13528:	subs	r4, r3, #0
   1352c:	ldr	r3, [pc, #200]	; 135fc <__assert_fail@plt+0x2808>
   13530:	moveq	r4, r3
   13534:	bl	10d4c <__errno_location@plt>
   13538:	mov	r7, r0
   1353c:	ldr	fp, [r0]
   13540:	ldr	r5, [r4, #4]
   13544:	cmp	r6, #0
   13548:	orreq	r5, r5, #1
   1354c:	add	r9, r4, #8
   13550:	ldr	r3, [r4, #44]	; 0x2c
   13554:	str	r3, [sp, #16]
   13558:	ldr	r3, [r4, #40]	; 0x28
   1355c:	str	r3, [sp, #12]
   13560:	str	r9, [sp, #8]
   13564:	str	r5, [sp, #4]
   13568:	ldr	r3, [r4]
   1356c:	str	r3, [sp]
   13570:	str	sl, [sp, #36]	; 0x24
   13574:	mov	r3, sl
   13578:	str	r8, [sp, #32]
   1357c:	mov	r2, r8
   13580:	mov	r1, #0
   13584:	mov	r0, r1
   13588:	bl	11a5c <__assert_fail@plt+0xc68>
   1358c:	mov	sl, r0
   13590:	add	r8, r0, #1
   13594:	mov	r0, r8
   13598:	bl	14110 <__assert_fail@plt+0x331c>
   1359c:	str	r0, [sp, #28]
   135a0:	ldr	r3, [r4, #44]	; 0x2c
   135a4:	str	r3, [sp, #16]
   135a8:	ldr	r3, [r4, #40]	; 0x28
   135ac:	str	r3, [sp, #12]
   135b0:	str	r9, [sp, #8]
   135b4:	str	r5, [sp, #4]
   135b8:	ldr	r3, [r4]
   135bc:	str	r3, [sp]
   135c0:	ldr	r3, [sp, #36]	; 0x24
   135c4:	ldr	r2, [sp, #32]
   135c8:	mov	r1, r8
   135cc:	bl	11a5c <__assert_fail@plt+0xc68>
   135d0:	str	fp, [r7]
   135d4:	cmp	r6, #0
   135d8:	strne	sl, [r6]
   135dc:	ldr	r0, [sp, #28]
   135e0:	add	sp, sp, #44	; 0x2c
   135e4:	ldrd	r4, [sp]
   135e8:	ldrd	r6, [sp, #8]
   135ec:	ldrd	r8, [sp, #16]
   135f0:	ldrd	sl, [sp, #24]
   135f4:	add	sp, sp, #32
   135f8:	pop	{pc}		; (ldr pc, [sp], #4)
   135fc:	andeq	r6, r2, ip, asr #4
   13600:	str	r4, [sp, #-8]!
   13604:	str	lr, [sp, #4]
   13608:	mov	r3, r2
   1360c:	mov	r2, #0
   13610:	bl	13504 <__assert_fail@plt+0x2710>
   13614:	ldr	r4, [sp]
   13618:	add	sp, sp, #4
   1361c:	pop	{pc}		; (ldr pc, [sp], #4)
   13620:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13624:	strd	r6, [sp, #8]
   13628:	str	r8, [sp, #16]
   1362c:	str	lr, [sp, #20]
   13630:	movw	r3, #24800	; 0x60e0
   13634:	movt	r3, #2
   13638:	ldr	r7, [r3]
   1363c:	ldr	r3, [r3, #4]
   13640:	cmp	r3, #1
   13644:	ble	13670 <__assert_fail@plt+0x287c>
   13648:	mov	r4, #1
   1364c:	add	r6, r7, #4
   13650:	movw	r5, #24800	; 0x60e0
   13654:	movt	r5, #2
   13658:	ldr	r0, [r6, r4, lsl #3]
   1365c:	bl	14dec <__assert_fail@plt+0x3ff8>
   13660:	add	r4, r4, #1
   13664:	ldr	r3, [r5, #4]
   13668:	cmp	r3, r4
   1366c:	bgt	13658 <__assert_fail@plt+0x2864>
   13670:	ldr	r0, [r7, #4]
   13674:	movw	r3, #24908	; 0x614c
   13678:	movt	r3, #2
   1367c:	cmp	r0, r3
   13680:	beq	136a4 <__assert_fail@plt+0x28b0>
   13684:	bl	14dec <__assert_fail@plt+0x3ff8>
   13688:	movw	r3, #24800	; 0x60e0
   1368c:	movt	r3, #2
   13690:	mov	r2, #256	; 0x100
   13694:	str	r2, [r3, #8]
   13698:	movw	r2, #24908	; 0x614c
   1369c:	movt	r2, #2
   136a0:	str	r2, [r3, #12]
   136a4:	ldr	r3, [pc, #64]	; 136ec <__assert_fail@plt+0x28f8>
   136a8:	cmp	r7, r3
   136ac:	beq	136c8 <__assert_fail@plt+0x28d4>
   136b0:	mov	r0, r7
   136b4:	bl	14dec <__assert_fail@plt+0x3ff8>
   136b8:	movw	r3, #24800	; 0x60e0
   136bc:	movt	r3, #2
   136c0:	add	r2, r3, #8
   136c4:	str	r2, [r3]
   136c8:	movw	r3, #24800	; 0x60e0
   136cc:	movt	r3, #2
   136d0:	mov	r2, #1
   136d4:	str	r2, [r3, #4]
   136d8:	ldrd	r4, [sp]
   136dc:	ldrd	r6, [sp, #8]
   136e0:	ldr	r8, [sp, #16]
   136e4:	add	sp, sp, #20
   136e8:	pop	{pc}		; (ldr pc, [sp], #4)
   136ec:	andeq	r6, r2, r8, ror #1
   136f0:	str	r4, [sp, #-8]!
   136f4:	str	lr, [sp, #4]
   136f8:	ldr	r3, [pc, #16]	; 13710 <__assert_fail@plt+0x291c>
   136fc:	mvn	r2, #0
   13700:	bl	13154 <__assert_fail@plt+0x2360>
   13704:	ldr	r4, [sp]
   13708:	add	sp, sp, #4
   1370c:	pop	{pc}		; (ldr pc, [sp], #4)
   13710:	andeq	r6, r2, ip, asr #4
   13714:	str	r4, [sp, #-8]!
   13718:	str	lr, [sp, #4]
   1371c:	ldr	r3, [pc, #12]	; 13730 <__assert_fail@plt+0x293c>
   13720:	bl	13154 <__assert_fail@plt+0x2360>
   13724:	ldr	r4, [sp]
   13728:	add	sp, sp, #4
   1372c:	pop	{pc}		; (ldr pc, [sp], #4)
   13730:	andeq	r6, r2, ip, asr #4
   13734:	str	r4, [sp, #-8]!
   13738:	str	lr, [sp, #4]
   1373c:	mov	r1, r0
   13740:	mov	r0, #0
   13744:	bl	136f0 <__assert_fail@plt+0x28fc>
   13748:	ldr	r4, [sp]
   1374c:	add	sp, sp, #4
   13750:	pop	{pc}		; (ldr pc, [sp], #4)
   13754:	str	r4, [sp, #-8]!
   13758:	str	lr, [sp, #4]
   1375c:	mov	r2, r1
   13760:	mov	r1, r0
   13764:	mov	r0, #0
   13768:	bl	13714 <__assert_fail@plt+0x2920>
   1376c:	ldr	r4, [sp]
   13770:	add	sp, sp, #4
   13774:	pop	{pc}		; (ldr pc, [sp], #4)
   13778:	strd	r4, [sp, #-12]!
   1377c:	str	lr, [sp, #8]
   13780:	sub	sp, sp, #52	; 0x34
   13784:	mov	r4, r0
   13788:	mov	r5, r2
   1378c:	mov	r0, sp
   13790:	bl	118c8 <__assert_fail@plt+0xad4>
   13794:	mov	r3, sp
   13798:	mvn	r2, #0
   1379c:	mov	r1, r5
   137a0:	mov	r0, r4
   137a4:	bl	13154 <__assert_fail@plt+0x2360>
   137a8:	add	sp, sp, #52	; 0x34
   137ac:	ldrd	r4, [sp]
   137b0:	add	sp, sp, #8
   137b4:	pop	{pc}		; (ldr pc, [sp], #4)
   137b8:	strd	r4, [sp, #-16]!
   137bc:	str	r6, [sp, #8]
   137c0:	str	lr, [sp, #12]
   137c4:	sub	sp, sp, #48	; 0x30
   137c8:	mov	r4, r0
   137cc:	mov	r5, r2
   137d0:	mov	r6, r3
   137d4:	mov	r0, sp
   137d8:	bl	118c8 <__assert_fail@plt+0xad4>
   137dc:	mov	r3, sp
   137e0:	mov	r2, r6
   137e4:	mov	r1, r5
   137e8:	mov	r0, r4
   137ec:	bl	13154 <__assert_fail@plt+0x2360>
   137f0:	add	sp, sp, #48	; 0x30
   137f4:	ldrd	r4, [sp]
   137f8:	ldr	r6, [sp, #8]
   137fc:	add	sp, sp, #12
   13800:	pop	{pc}		; (ldr pc, [sp], #4)
   13804:	str	r4, [sp, #-8]!
   13808:	str	lr, [sp, #4]
   1380c:	mov	r2, r1
   13810:	mov	r1, r0
   13814:	mov	r0, #0
   13818:	bl	13778 <__assert_fail@plt+0x2984>
   1381c:	ldr	r4, [sp]
   13820:	add	sp, sp, #4
   13824:	pop	{pc}		; (ldr pc, [sp], #4)
   13828:	str	r4, [sp, #-8]!
   1382c:	str	lr, [sp, #4]
   13830:	mov	r3, r2
   13834:	mov	r2, r1
   13838:	mov	r1, r0
   1383c:	mov	r0, #0
   13840:	bl	137b8 <__assert_fail@plt+0x29c4>
   13844:	ldr	r4, [sp]
   13848:	add	sp, sp, #4
   1384c:	pop	{pc}		; (ldr pc, [sp], #4)
   13850:	strd	r4, [sp, #-12]!
   13854:	str	lr, [sp, #8]
   13858:	sub	sp, sp, #52	; 0x34
   1385c:	mov	r4, r0
   13860:	mov	r5, r1
   13864:	mov	r1, r2
   13868:	ldr	r0, [pc, #92]	; 138cc <__assert_fail@plt+0x2ad8>
   1386c:	ldrd	r2, [r0]
   13870:	strd	r2, [sp]
   13874:	ldrd	r2, [r0, #8]
   13878:	strd	r2, [sp, #8]
   1387c:	ldrd	r2, [r0, #16]
   13880:	strd	r2, [sp, #16]
   13884:	ldrd	r2, [r0, #24]
   13888:	strd	r2, [sp, #24]
   1388c:	ldrd	r2, [r0, #32]
   13890:	strd	r2, [sp, #32]
   13894:	ldrd	r2, [r0, #40]	; 0x28
   13898:	strd	r2, [sp, #40]	; 0x28
   1389c:	mov	r2, #1
   138a0:	mov	r0, sp
   138a4:	bl	133c8 <__assert_fail@plt+0x25d4>
   138a8:	mov	r3, sp
   138ac:	mov	r2, r5
   138b0:	mov	r1, r4
   138b4:	mov	r0, #0
   138b8:	bl	13154 <__assert_fail@plt+0x2360>
   138bc:	add	sp, sp, #52	; 0x34
   138c0:	ldrd	r4, [sp]
   138c4:	add	sp, sp, #8
   138c8:	pop	{pc}		; (ldr pc, [sp], #4)
   138cc:	andeq	r6, r2, ip, asr #4
   138d0:	str	r4, [sp, #-8]!
   138d4:	str	lr, [sp, #4]
   138d8:	mov	r2, r1
   138dc:	mvn	r1, #0
   138e0:	bl	13850 <__assert_fail@plt+0x2a5c>
   138e4:	ldr	r4, [sp]
   138e8:	add	sp, sp, #4
   138ec:	pop	{pc}		; (ldr pc, [sp], #4)
   138f0:	str	r4, [sp, #-8]!
   138f4:	str	lr, [sp, #4]
   138f8:	mov	r1, #58	; 0x3a
   138fc:	bl	138d0 <__assert_fail@plt+0x2adc>
   13900:	ldr	r4, [sp]
   13904:	add	sp, sp, #4
   13908:	pop	{pc}		; (ldr pc, [sp], #4)
   1390c:	str	r4, [sp, #-8]!
   13910:	str	lr, [sp, #4]
   13914:	mov	r2, #58	; 0x3a
   13918:	bl	13850 <__assert_fail@plt+0x2a5c>
   1391c:	ldr	r4, [sp]
   13920:	add	sp, sp, #4
   13924:	pop	{pc}		; (ldr pc, [sp], #4)
   13928:	strd	r4, [sp, #-12]!
   1392c:	str	lr, [sp, #8]
   13930:	sub	sp, sp, #100	; 0x64
   13934:	mov	r4, r0
   13938:	mov	r5, r2
   1393c:	mov	r0, sp
   13940:	bl	118c8 <__assert_fail@plt+0xad4>
   13944:	ldrd	r2, [sp]
   13948:	strd	r2, [sp, #48]	; 0x30
   1394c:	ldrd	r2, [sp, #8]
   13950:	strd	r2, [sp, #56]	; 0x38
   13954:	ldrd	r2, [sp, #16]
   13958:	strd	r2, [sp, #64]	; 0x40
   1395c:	ldrd	r2, [sp, #24]
   13960:	strd	r2, [sp, #72]	; 0x48
   13964:	ldrd	r2, [sp, #32]
   13968:	strd	r2, [sp, #80]	; 0x50
   1396c:	ldrd	r2, [sp, #40]	; 0x28
   13970:	strd	r2, [sp, #88]	; 0x58
   13974:	mov	r2, #1
   13978:	mov	r1, #58	; 0x3a
   1397c:	add	r0, sp, #48	; 0x30
   13980:	bl	133c8 <__assert_fail@plt+0x25d4>
   13984:	add	r3, sp, #48	; 0x30
   13988:	mvn	r2, #0
   1398c:	mov	r1, r5
   13990:	mov	r0, r4
   13994:	bl	13154 <__assert_fail@plt+0x2360>
   13998:	add	sp, sp, #100	; 0x64
   1399c:	ldrd	r4, [sp]
   139a0:	add	sp, sp, #8
   139a4:	pop	{pc}		; (ldr pc, [sp], #4)
   139a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   139ac:	strd	r6, [sp, #8]
   139b0:	str	lr, [sp, #16]
   139b4:	sub	sp, sp, #52	; 0x34
   139b8:	mov	r4, r0
   139bc:	mov	r5, r3
   139c0:	ldr	r3, [pc, #92]	; 13a24 <__assert_fail@plt+0x2c30>
   139c4:	ldrd	r6, [r3]
   139c8:	strd	r6, [sp]
   139cc:	ldrd	r6, [r3, #8]
   139d0:	strd	r6, [sp, #8]
   139d4:	ldrd	r6, [r3, #16]
   139d8:	strd	r6, [sp, #16]
   139dc:	ldrd	r6, [r3, #24]
   139e0:	strd	r6, [sp, #24]
   139e4:	ldrd	r6, [r3, #32]
   139e8:	strd	r6, [sp, #32]
   139ec:	ldrd	r6, [r3, #40]	; 0x28
   139f0:	strd	r6, [sp, #40]	; 0x28
   139f4:	mov	r0, sp
   139f8:	bl	13424 <__assert_fail@plt+0x2630>
   139fc:	mov	r3, sp
   13a00:	ldr	r2, [sp, #72]	; 0x48
   13a04:	mov	r1, r5
   13a08:	mov	r0, r4
   13a0c:	bl	13154 <__assert_fail@plt+0x2360>
   13a10:	add	sp, sp, #52	; 0x34
   13a14:	ldrd	r4, [sp]
   13a18:	ldrd	r6, [sp, #8]
   13a1c:	add	sp, sp, #16
   13a20:	pop	{pc}		; (ldr pc, [sp], #4)
   13a24:	andeq	r6, r2, ip, asr #4
   13a28:	push	{lr}		; (str lr, [sp, #-4]!)
   13a2c:	sub	sp, sp, #12
   13a30:	mvn	ip, #0
   13a34:	str	ip, [sp]
   13a38:	bl	139a8 <__assert_fail@plt+0x2bb4>
   13a3c:	add	sp, sp, #12
   13a40:	pop	{pc}		; (ldr pc, [sp], #4)
   13a44:	str	r4, [sp, #-8]!
   13a48:	str	lr, [sp, #4]
   13a4c:	mov	r3, r2
   13a50:	mov	r2, r1
   13a54:	mov	r1, r0
   13a58:	mov	r0, #0
   13a5c:	bl	13a28 <__assert_fail@plt+0x2c34>
   13a60:	ldr	r4, [sp]
   13a64:	add	sp, sp, #4
   13a68:	pop	{pc}		; (ldr pc, [sp], #4)
   13a6c:	push	{lr}		; (str lr, [sp, #-4]!)
   13a70:	sub	sp, sp, #12
   13a74:	str	r3, [sp]
   13a78:	mov	r3, r2
   13a7c:	mov	r2, r1
   13a80:	mov	r1, r0
   13a84:	mov	r0, #0
   13a88:	bl	139a8 <__assert_fail@plt+0x2bb4>
   13a8c:	add	sp, sp, #12
   13a90:	pop	{pc}		; (ldr pc, [sp], #4)
   13a94:	str	r4, [sp, #-8]!
   13a98:	str	lr, [sp, #4]
   13a9c:	ldr	r3, [pc, #12]	; 13ab0 <__assert_fail@plt+0x2cbc>
   13aa0:	bl	13154 <__assert_fail@plt+0x2360>
   13aa4:	ldr	r4, [sp]
   13aa8:	add	sp, sp, #4
   13aac:	pop	{pc}		; (ldr pc, [sp], #4)
   13ab0:	strdeq	r6, [r2], -r0
   13ab4:	str	r4, [sp, #-8]!
   13ab8:	str	lr, [sp, #4]
   13abc:	mov	r2, r1
   13ac0:	mov	r1, r0
   13ac4:	mov	r0, #0
   13ac8:	bl	13a94 <__assert_fail@plt+0x2ca0>
   13acc:	ldr	r4, [sp]
   13ad0:	add	sp, sp, #4
   13ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad8:	str	r4, [sp, #-8]!
   13adc:	str	lr, [sp, #4]
   13ae0:	mvn	r2, #0
   13ae4:	bl	13a94 <__assert_fail@plt+0x2ca0>
   13ae8:	ldr	r4, [sp]
   13aec:	add	sp, sp, #4
   13af0:	pop	{pc}		; (ldr pc, [sp], #4)
   13af4:	str	r4, [sp, #-8]!
   13af8:	str	lr, [sp, #4]
   13afc:	mov	r1, r0
   13b00:	mov	r0, #0
   13b04:	bl	13ad8 <__assert_fail@plt+0x2ce4>
   13b08:	ldr	r4, [sp]
   13b0c:	add	sp, sp, #4
   13b10:	pop	{pc}		; (ldr pc, [sp], #4)
   13b14:	strd	r4, [sp, #-16]!
   13b18:	str	r6, [sp, #8]
   13b1c:	str	lr, [sp, #12]
   13b20:	sub	sp, sp, #32
   13b24:	mov	r4, r0
   13b28:	ldr	r5, [sp, #48]	; 0x30
   13b2c:	ldr	r6, [sp, #52]	; 0x34
   13b30:	cmp	r1, #0
   13b34:	beq	13c00 <__assert_fail@plt+0x2e0c>
   13b38:	str	r3, [sp, #4]
   13b3c:	str	r2, [sp]
   13b40:	mov	r3, r1
   13b44:	movw	r2, #22600	; 0x5848
   13b48:	movt	r2, #1
   13b4c:	mov	r1, #1
   13b50:	bl	10d88 <__fprintf_chk@plt>
   13b54:	mov	r2, #5
   13b58:	movw	r1, #22620	; 0x585c
   13b5c:	movt	r1, #1
   13b60:	mov	r0, #0
   13b64:	bl	10c50 <dcgettext@plt>
   13b68:	movw	r3, #2022	; 0x7e6
   13b6c:	str	r3, [sp]
   13b70:	mov	r3, r0
   13b74:	movw	r2, #23348	; 0x5b34
   13b78:	movt	r2, #1
   13b7c:	mov	r1, #1
   13b80:	mov	r0, r4
   13b84:	bl	10d88 <__fprintf_chk@plt>
   13b88:	mov	r1, r4
   13b8c:	mov	r0, #10
   13b90:	bl	10c44 <fputc_unlocked@plt>
   13b94:	mov	r2, #5
   13b98:	movw	r1, #22624	; 0x5860
   13b9c:	movt	r1, #1
   13ba0:	mov	r0, #0
   13ba4:	bl	10c50 <dcgettext@plt>
   13ba8:	movw	r3, #22796	; 0x590c
   13bac:	movt	r3, #1
   13bb0:	mov	r2, r0
   13bb4:	mov	r1, #1
   13bb8:	mov	r0, r4
   13bbc:	bl	10d88 <__fprintf_chk@plt>
   13bc0:	mov	r1, r4
   13bc4:	mov	r0, #10
   13bc8:	bl	10c44 <fputc_unlocked@plt>
   13bcc:	cmp	r6, #9
   13bd0:	ldrls	pc, [pc, r6, lsl #2]
   13bd4:	b	13ed8 <__assert_fail@plt+0x30e4>
   13bd8:	andeq	r3, r1, r4, asr #24
   13bdc:	andeq	r3, r1, ip, lsl ip
   13be0:	andeq	r3, r1, r8, asr ip
   13be4:	andeq	r3, r1, ip, lsl #25
   13be8:	andeq	r3, r1, r8, asr #25
   13bec:	andeq	r3, r1, ip, lsl #26
   13bf0:	andeq	r3, r1, r8, asr sp
   13bf4:	andeq	r3, r1, ip, lsr #27
   13bf8:	andeq	r3, r1, r8, lsl #28
   13bfc:	andeq	r3, r1, ip, ror #28
   13c00:	str	r3, [sp]
   13c04:	mov	r3, r2
   13c08:	movw	r2, #22612	; 0x5854
   13c0c:	movt	r2, #1
   13c10:	mov	r1, #1
   13c14:	bl	10d88 <__fprintf_chk@plt>
   13c18:	b	13b54 <__assert_fail@plt+0x2d60>
   13c1c:	mov	r2, #5
   13c20:	movw	r1, #22832	; 0x5930
   13c24:	movt	r1, #1
   13c28:	mov	r0, #0
   13c2c:	bl	10c50 <dcgettext@plt>
   13c30:	ldr	r3, [r5]
   13c34:	mov	r2, r0
   13c38:	mov	r1, #1
   13c3c:	mov	r0, r4
   13c40:	bl	10d88 <__fprintf_chk@plt>
   13c44:	add	sp, sp, #32
   13c48:	ldrd	r4, [sp]
   13c4c:	ldr	r6, [sp, #8]
   13c50:	add	sp, sp, #12
   13c54:	pop	{pc}		; (ldr pc, [sp], #4)
   13c58:	mov	r2, #5
   13c5c:	movw	r1, #22848	; 0x5940
   13c60:	movt	r1, #1
   13c64:	mov	r0, #0
   13c68:	bl	10c50 <dcgettext@plt>
   13c6c:	ldr	r3, [r5, #4]
   13c70:	str	r3, [sp]
   13c74:	ldr	r3, [r5]
   13c78:	mov	r2, r0
   13c7c:	mov	r1, #1
   13c80:	mov	r0, r4
   13c84:	bl	10d88 <__fprintf_chk@plt>
   13c88:	b	13c44 <__assert_fail@plt+0x2e50>
   13c8c:	mov	r2, #5
   13c90:	movw	r1, #22872	; 0x5958
   13c94:	movt	r1, #1
   13c98:	mov	r0, #0
   13c9c:	bl	10c50 <dcgettext@plt>
   13ca0:	ldr	r3, [r5, #8]
   13ca4:	str	r3, [sp, #4]
   13ca8:	ldr	r3, [r5, #4]
   13cac:	str	r3, [sp]
   13cb0:	ldr	r3, [r5]
   13cb4:	mov	r2, r0
   13cb8:	mov	r1, #1
   13cbc:	mov	r0, r4
   13cc0:	bl	10d88 <__fprintf_chk@plt>
   13cc4:	b	13c44 <__assert_fail@plt+0x2e50>
   13cc8:	mov	r2, #5
   13ccc:	movw	r1, #22900	; 0x5974
   13cd0:	movt	r1, #1
   13cd4:	mov	r0, #0
   13cd8:	bl	10c50 <dcgettext@plt>
   13cdc:	ldr	r3, [r5, #12]
   13ce0:	str	r3, [sp, #8]
   13ce4:	ldr	r3, [r5, #8]
   13ce8:	str	r3, [sp, #4]
   13cec:	ldr	r3, [r5, #4]
   13cf0:	str	r3, [sp]
   13cf4:	ldr	r3, [r5]
   13cf8:	mov	r2, r0
   13cfc:	mov	r1, #1
   13d00:	mov	r0, r4
   13d04:	bl	10d88 <__fprintf_chk@plt>
   13d08:	b	13c44 <__assert_fail@plt+0x2e50>
   13d0c:	mov	r2, #5
   13d10:	movw	r1, #22932	; 0x5994
   13d14:	movt	r1, #1
   13d18:	mov	r0, #0
   13d1c:	bl	10c50 <dcgettext@plt>
   13d20:	ldr	r3, [r5, #16]
   13d24:	str	r3, [sp, #12]
   13d28:	ldr	r3, [r5, #12]
   13d2c:	str	r3, [sp, #8]
   13d30:	ldr	r3, [r5, #8]
   13d34:	str	r3, [sp, #4]
   13d38:	ldr	r3, [r5, #4]
   13d3c:	str	r3, [sp]
   13d40:	ldr	r3, [r5]
   13d44:	mov	r2, r0
   13d48:	mov	r1, #1
   13d4c:	mov	r0, r4
   13d50:	bl	10d88 <__fprintf_chk@plt>
   13d54:	b	13c44 <__assert_fail@plt+0x2e50>
   13d58:	mov	r2, #5
   13d5c:	movw	r1, #22968	; 0x59b8
   13d60:	movt	r1, #1
   13d64:	mov	r0, #0
   13d68:	bl	10c50 <dcgettext@plt>
   13d6c:	ldr	r3, [r5, #20]
   13d70:	str	r3, [sp, #16]
   13d74:	ldr	r3, [r5, #16]
   13d78:	str	r3, [sp, #12]
   13d7c:	ldr	r3, [r5, #12]
   13d80:	str	r3, [sp, #8]
   13d84:	ldr	r3, [r5, #8]
   13d88:	str	r3, [sp, #4]
   13d8c:	ldr	r3, [r5, #4]
   13d90:	str	r3, [sp]
   13d94:	ldr	r3, [r5]
   13d98:	mov	r2, r0
   13d9c:	mov	r1, #1
   13da0:	mov	r0, r4
   13da4:	bl	10d88 <__fprintf_chk@plt>
   13da8:	b	13c44 <__assert_fail@plt+0x2e50>
   13dac:	mov	r2, #5
   13db0:	movw	r1, #23008	; 0x59e0
   13db4:	movt	r1, #1
   13db8:	mov	r0, #0
   13dbc:	bl	10c50 <dcgettext@plt>
   13dc0:	ldr	r3, [r5, #24]
   13dc4:	str	r3, [sp, #20]
   13dc8:	ldr	r3, [r5, #20]
   13dcc:	str	r3, [sp, #16]
   13dd0:	ldr	r3, [r5, #16]
   13dd4:	str	r3, [sp, #12]
   13dd8:	ldr	r3, [r5, #12]
   13ddc:	str	r3, [sp, #8]
   13de0:	ldr	r3, [r5, #8]
   13de4:	str	r3, [sp, #4]
   13de8:	ldr	r3, [r5, #4]
   13dec:	str	r3, [sp]
   13df0:	ldr	r3, [r5]
   13df4:	mov	r2, r0
   13df8:	mov	r1, #1
   13dfc:	mov	r0, r4
   13e00:	bl	10d88 <__fprintf_chk@plt>
   13e04:	b	13c44 <__assert_fail@plt+0x2e50>
   13e08:	mov	r2, #5
   13e0c:	movw	r1, #23052	; 0x5a0c
   13e10:	movt	r1, #1
   13e14:	mov	r0, #0
   13e18:	bl	10c50 <dcgettext@plt>
   13e1c:	ldr	r3, [r5, #28]
   13e20:	str	r3, [sp, #24]
   13e24:	ldr	r3, [r5, #24]
   13e28:	str	r3, [sp, #20]
   13e2c:	ldr	r3, [r5, #20]
   13e30:	str	r3, [sp, #16]
   13e34:	ldr	r3, [r5, #16]
   13e38:	str	r3, [sp, #12]
   13e3c:	ldr	r3, [r5, #12]
   13e40:	str	r3, [sp, #8]
   13e44:	ldr	r3, [r5, #8]
   13e48:	str	r3, [sp, #4]
   13e4c:	ldr	r3, [r5, #4]
   13e50:	str	r3, [sp]
   13e54:	ldr	r3, [r5]
   13e58:	mov	r2, r0
   13e5c:	mov	r1, #1
   13e60:	mov	r0, r4
   13e64:	bl	10d88 <__fprintf_chk@plt>
   13e68:	b	13c44 <__assert_fail@plt+0x2e50>
   13e6c:	mov	r2, #5
   13e70:	movw	r1, #23100	; 0x5a3c
   13e74:	movt	r1, #1
   13e78:	mov	r0, #0
   13e7c:	bl	10c50 <dcgettext@plt>
   13e80:	ldr	r3, [r5, #32]
   13e84:	str	r3, [sp, #28]
   13e88:	ldr	r3, [r5, #28]
   13e8c:	str	r3, [sp, #24]
   13e90:	ldr	r3, [r5, #24]
   13e94:	str	r3, [sp, #20]
   13e98:	ldr	r3, [r5, #20]
   13e9c:	str	r3, [sp, #16]
   13ea0:	ldr	r3, [r5, #16]
   13ea4:	str	r3, [sp, #12]
   13ea8:	ldr	r3, [r5, #12]
   13eac:	str	r3, [sp, #8]
   13eb0:	ldr	r3, [r5, #8]
   13eb4:	str	r3, [sp, #4]
   13eb8:	ldr	r3, [r5, #4]
   13ebc:	str	r3, [sp]
   13ec0:	ldr	r3, [r5]
   13ec4:	mov	r2, r0
   13ec8:	mov	r1, #1
   13ecc:	mov	r0, r4
   13ed0:	bl	10d88 <__fprintf_chk@plt>
   13ed4:	b	13c44 <__assert_fail@plt+0x2e50>
   13ed8:	mov	r2, #5
   13edc:	movw	r1, #23152	; 0x5a70
   13ee0:	movt	r1, #1
   13ee4:	mov	r0, #0
   13ee8:	bl	10c50 <dcgettext@plt>
   13eec:	ldr	r3, [r5, #32]
   13ef0:	str	r3, [sp, #28]
   13ef4:	ldr	r3, [r5, #28]
   13ef8:	str	r3, [sp, #24]
   13efc:	ldr	r3, [r5, #24]
   13f00:	str	r3, [sp, #20]
   13f04:	ldr	r3, [r5, #20]
   13f08:	str	r3, [sp, #16]
   13f0c:	ldr	r3, [r5, #16]
   13f10:	str	r3, [sp, #12]
   13f14:	ldr	r3, [r5, #12]
   13f18:	str	r3, [sp, #8]
   13f1c:	ldr	r3, [r5, #8]
   13f20:	str	r3, [sp, #4]
   13f24:	ldr	r3, [r5, #4]
   13f28:	str	r3, [sp]
   13f2c:	ldr	r3, [r5]
   13f30:	mov	r2, r0
   13f34:	mov	r1, #1
   13f38:	mov	r0, r4
   13f3c:	bl	10d88 <__fprintf_chk@plt>
   13f40:	b	13c44 <__assert_fail@plt+0x2e50>
   13f44:	strd	r4, [sp, #-12]!
   13f48:	str	lr, [sp, #8]
   13f4c:	sub	sp, sp, #12
   13f50:	ldr	r5, [sp, #24]
   13f54:	ldr	ip, [r5]
   13f58:	cmp	ip, #0
   13f5c:	beq	13f94 <__assert_fail@plt+0x31a0>
   13f60:	mov	lr, r5
   13f64:	mov	ip, #0
   13f68:	add	ip, ip, #1
   13f6c:	ldr	r4, [lr, #4]!
   13f70:	cmp	r4, #0
   13f74:	bne	13f68 <__assert_fail@plt+0x3174>
   13f78:	str	ip, [sp, #4]
   13f7c:	str	r5, [sp]
   13f80:	bl	13b14 <__assert_fail@plt+0x2d20>
   13f84:	add	sp, sp, #12
   13f88:	ldrd	r4, [sp]
   13f8c:	add	sp, sp, #8
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	mov	ip, #0
   13f98:	b	13f78 <__assert_fail@plt+0x3184>
   13f9c:	strd	r4, [sp, #-12]!
   13fa0:	str	lr, [sp, #8]
   13fa4:	sub	sp, sp, #52	; 0x34
   13fa8:	ldr	r5, [sp, #64]	; 0x40
   13fac:	add	r4, sp, #8
   13fb0:	mov	ip, #0
   13fb4:	ldr	lr, [r5], #4
   13fb8:	str	lr, [r4], #4
   13fbc:	cmp	lr, #0
   13fc0:	beq	13fd0 <__assert_fail@plt+0x31dc>
   13fc4:	add	ip, ip, #1
   13fc8:	cmp	ip, #10
   13fcc:	bne	13fb4 <__assert_fail@plt+0x31c0>
   13fd0:	str	ip, [sp, #4]
   13fd4:	add	ip, sp, #8
   13fd8:	str	ip, [sp]
   13fdc:	bl	13b14 <__assert_fail@plt+0x2d20>
   13fe0:	add	sp, sp, #52	; 0x34
   13fe4:	ldrd	r4, [sp]
   13fe8:	add	sp, sp, #8
   13fec:	pop	{pc}		; (ldr pc, [sp], #4)
   13ff0:	push	{r3}		; (str r3, [sp, #-4]!)
   13ff4:	push	{lr}		; (str lr, [sp, #-4]!)
   13ff8:	sub	sp, sp, #16
   13ffc:	add	r3, sp, #24
   14000:	str	r3, [sp, #12]
   14004:	str	r3, [sp]
   14008:	ldr	r3, [sp, #20]
   1400c:	bl	13f9c <__assert_fail@plt+0x31a8>
   14010:	add	sp, sp, #16
   14014:	pop	{lr}		; (ldr lr, [sp], #4)
   14018:	add	sp, sp, #4
   1401c:	bx	lr
   14020:	str	r4, [sp, #-8]!
   14024:	str	lr, [sp, #4]
   14028:	movw	r3, #24884	; 0x6134
   1402c:	movt	r3, #2
   14030:	ldr	r1, [r3]
   14034:	mov	r0, #10
   14038:	bl	10c44 <fputc_unlocked@plt>
   1403c:	mov	r2, #5
   14040:	movw	r1, #23212	; 0x5aac
   14044:	movt	r1, #1
   14048:	mov	r0, #0
   1404c:	bl	10c50 <dcgettext@plt>
   14050:	movw	r2, #23232	; 0x5ac0
   14054:	movt	r2, #1
   14058:	mov	r1, r0
   1405c:	mov	r0, #1
   14060:	bl	10d70 <__printf_chk@plt>
   14064:	mov	r2, #5
   14068:	movw	r1, #23256	; 0x5ad8
   1406c:	movt	r1, #1
   14070:	mov	r0, #0
   14074:	bl	10c50 <dcgettext@plt>
   14078:	movw	r3, #21792	; 0x5520
   1407c:	movt	r3, #1
   14080:	movw	r2, #21832	; 0x5548
   14084:	movt	r2, #1
   14088:	mov	r1, r0
   1408c:	mov	r0, #1
   14090:	bl	10d70 <__printf_chk@plt>
   14094:	mov	r2, #5
   14098:	movw	r1, #23276	; 0x5aec
   1409c:	movt	r1, #1
   140a0:	mov	r0, #0
   140a4:	bl	10c50 <dcgettext@plt>
   140a8:	movw	r2, #23316	; 0x5b14
   140ac:	movt	r2, #1
   140b0:	mov	r1, r0
   140b4:	mov	r0, #1
   140b8:	bl	10d70 <__printf_chk@plt>
   140bc:	ldr	r4, [sp]
   140c0:	add	sp, sp, #4
   140c4:	pop	{pc}		; (ldr pc, [sp], #4)
   140c8:	str	r4, [sp, #-8]!
   140cc:	str	lr, [sp, #4]
   140d0:	bl	14b9c <__assert_fail@plt+0x3da8>
   140d4:	cmp	r0, #0
   140d8:	beq	140e8 <__assert_fail@plt+0x32f4>
   140dc:	ldr	r4, [sp]
   140e0:	add	sp, sp, #4
   140e4:	pop	{pc}		; (ldr pc, [sp], #4)
   140e8:	bl	1455c <__assert_fail@plt+0x3768>
   140ec:	str	r4, [sp, #-8]!
   140f0:	str	lr, [sp, #4]
   140f4:	bl	14b9c <__assert_fail@plt+0x3da8>
   140f8:	cmp	r0, #0
   140fc:	beq	1410c <__assert_fail@plt+0x3318>
   14100:	ldr	r4, [sp]
   14104:	add	sp, sp, #4
   14108:	pop	{pc}		; (ldr pc, [sp], #4)
   1410c:	bl	1455c <__assert_fail@plt+0x3768>
   14110:	str	r4, [sp, #-8]!
   14114:	str	lr, [sp, #4]
   14118:	bl	140c8 <__assert_fail@plt+0x32d4>
   1411c:	ldr	r4, [sp]
   14120:	add	sp, sp, #4
   14124:	pop	{pc}		; (ldr pc, [sp], #4)
   14128:	strd	r4, [sp, #-16]!
   1412c:	str	r6, [sp, #8]
   14130:	str	lr, [sp, #12]
   14134:	mov	r5, r0
   14138:	mov	r4, r1
   1413c:	bl	14bd8 <__assert_fail@plt+0x3de4>
   14140:	cmp	r0, #0
   14144:	beq	14158 <__assert_fail@plt+0x3364>
   14148:	ldrd	r4, [sp]
   1414c:	ldr	r6, [sp, #8]
   14150:	add	sp, sp, #12
   14154:	pop	{pc}		; (ldr pc, [sp], #4)
   14158:	adds	r4, r4, #0
   1415c:	movne	r4, #1
   14160:	cmp	r5, #0
   14164:	moveq	r4, #1
   14168:	cmp	r4, #0
   1416c:	beq	14148 <__assert_fail@plt+0x3354>
   14170:	bl	1455c <__assert_fail@plt+0x3768>
   14174:	str	r4, [sp, #-8]!
   14178:	str	lr, [sp, #4]
   1417c:	cmp	r1, #0
   14180:	orreq	r1, r1, #1
   14184:	bl	14bd8 <__assert_fail@plt+0x3de4>
   14188:	cmp	r0, #0
   1418c:	beq	1419c <__assert_fail@plt+0x33a8>
   14190:	ldr	r4, [sp]
   14194:	add	sp, sp, #4
   14198:	pop	{pc}		; (ldr pc, [sp], #4)
   1419c:	bl	1455c <__assert_fail@plt+0x3768>
   141a0:	strd	r4, [sp, #-16]!
   141a4:	str	r6, [sp, #8]
   141a8:	str	lr, [sp, #12]
   141ac:	mov	r4, r0
   141b0:	mov	r6, r1
   141b4:	mov	r5, r2
   141b8:	bl	14fc0 <__assert_fail@plt+0x41cc>
   141bc:	cmp	r0, #0
   141c0:	beq	141d4 <__assert_fail@plt+0x33e0>
   141c4:	ldrd	r4, [sp]
   141c8:	ldr	r6, [sp, #8]
   141cc:	add	sp, sp, #12
   141d0:	pop	{pc}		; (ldr pc, [sp], #4)
   141d4:	cmp	r4, #0
   141d8:	beq	141e8 <__assert_fail@plt+0x33f4>
   141dc:	cmp	r6, #0
   141e0:	cmpne	r5, #0
   141e4:	beq	141c4 <__assert_fail@plt+0x33d0>
   141e8:	bl	1455c <__assert_fail@plt+0x3768>
   141ec:	str	r4, [sp, #-8]!
   141f0:	str	lr, [sp, #4]
   141f4:	bl	141a0 <__assert_fail@plt+0x33ac>
   141f8:	ldr	r4, [sp]
   141fc:	add	sp, sp, #4
   14200:	pop	{pc}		; (ldr pc, [sp], #4)
   14204:	str	r4, [sp, #-8]!
   14208:	str	lr, [sp, #4]
   1420c:	mov	ip, r1
   14210:	mov	r3, r2
   14214:	cmp	r2, #0
   14218:	cmpne	r1, #0
   1421c:	moveq	r3, #1
   14220:	moveq	ip, r3
   14224:	mov	r2, r3
   14228:	mov	r1, ip
   1422c:	bl	14fc0 <__assert_fail@plt+0x41cc>
   14230:	cmp	r0, #0
   14234:	beq	14244 <__assert_fail@plt+0x3450>
   14238:	ldr	r4, [sp]
   1423c:	add	sp, sp, #4
   14240:	pop	{pc}		; (ldr pc, [sp], #4)
   14244:	bl	1455c <__assert_fail@plt+0x3768>
   14248:	str	r4, [sp, #-8]!
   1424c:	str	lr, [sp, #4]
   14250:	mov	r2, r1
   14254:	mov	r1, r0
   14258:	mov	r0, #0
   1425c:	bl	141a0 <__assert_fail@plt+0x33ac>
   14260:	ldr	r4, [sp]
   14264:	add	sp, sp, #4
   14268:	pop	{pc}		; (ldr pc, [sp], #4)
   1426c:	str	r4, [sp, #-8]!
   14270:	str	lr, [sp, #4]
   14274:	mov	r2, r1
   14278:	mov	r1, r0
   1427c:	mov	r0, #0
   14280:	bl	14204 <__assert_fail@plt+0x3410>
   14284:	ldr	r4, [sp]
   14288:	add	sp, sp, #4
   1428c:	pop	{pc}		; (ldr pc, [sp], #4)
   14290:	strd	r4, [sp, #-16]!
   14294:	str	r6, [sp, #8]
   14298:	str	lr, [sp, #12]
   1429c:	mov	r5, r1
   142a0:	ldr	r4, [r1]
   142a4:	cmp	r0, #0
   142a8:	beq	142d8 <__assert_fail@plt+0x34e4>
   142ac:	lsr	r3, r4, #1
   142b0:	add	r3, r3, #1
   142b4:	adds	r4, r4, r3
   142b8:	bcs	142f4 <__assert_fail@plt+0x3500>
   142bc:	mov	r1, r4
   142c0:	bl	141a0 <__assert_fail@plt+0x33ac>
   142c4:	str	r4, [r5]
   142c8:	ldrd	r4, [sp]
   142cc:	ldr	r6, [sp, #8]
   142d0:	add	sp, sp, #12
   142d4:	pop	{pc}		; (ldr pc, [sp], #4)
   142d8:	cmp	r4, #0
   142dc:	bne	142bc <__assert_fail@plt+0x34c8>
   142e0:	mov	r4, #64	; 0x40
   142e4:	udiv	r4, r4, r2
   142e8:	cmp	r2, #64	; 0x40
   142ec:	addhi	r4, r4, #1
   142f0:	b	142bc <__assert_fail@plt+0x34c8>
   142f4:	bl	1455c <__assert_fail@plt+0x3768>
   142f8:	str	r4, [sp, #-8]!
   142fc:	str	lr, [sp, #4]
   14300:	mov	r2, #1
   14304:	bl	14290 <__assert_fail@plt+0x349c>
   14308:	ldr	r4, [sp]
   1430c:	add	sp, sp, #4
   14310:	pop	{pc}		; (ldr pc, [sp], #4)
   14314:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14318:	strd	r6, [sp, #8]
   1431c:	str	r8, [sp, #16]
   14320:	str	lr, [sp, #20]
   14324:	mov	r5, r1
   14328:	ldr	lr, [sp, #24]
   1432c:	ldr	ip, [r1]
   14330:	asr	r4, ip, #1
   14334:	adds	r4, ip, r4
   14338:	movvs	r1, #1
   1433c:	movvc	r1, #0
   14340:	cmp	r1, #0
   14344:	mvnne	r4, #-2147483648	; 0x80000000
   14348:	mvn	r8, r3
   1434c:	lsr	r8, r8, #31
   14350:	cmp	r3, r4
   14354:	movge	r1, #0
   14358:	andlt	r1, r8, #1
   1435c:	cmp	r1, #0
   14360:	movne	r4, r3
   14364:	smull	r6, r7, r4, lr
   14368:	asr	r1, r6, #31
   1436c:	cmp	r1, r7
   14370:	bne	14388 <__assert_fail@plt+0x3594>
   14374:	mov	r1, r6
   14378:	cmp	r6, #63	; 0x3f
   1437c:	movle	r1, #64	; 0x40
   14380:	ble	1438c <__assert_fail@plt+0x3598>
   14384:	b	14398 <__assert_fail@plt+0x35a4>
   14388:	mvn	r1, #-2147483648	; 0x80000000
   1438c:	sdiv	r4, r1, lr
   14390:	mls	r6, lr, r4, r1
   14394:	sub	r1, r1, r6
   14398:	cmp	r0, #0
   1439c:	moveq	r6, #0
   143a0:	streq	r6, [r5]
   143a4:	sub	r6, r4, ip
   143a8:	cmp	r6, r2
   143ac:	bge	143e4 <__assert_fail@plt+0x35f0>
   143b0:	adds	r2, ip, r2
   143b4:	mov	r4, r2
   143b8:	bvs	14400 <__assert_fail@plt+0x360c>
   143bc:	cmp	r2, r3
   143c0:	movle	r3, #0
   143c4:	andgt	r3, r8, #1
   143c8:	cmp	r3, #0
   143cc:	bne	14400 <__assert_fail@plt+0x360c>
   143d0:	smull	r2, r3, r2, lr
   143d4:	asr	ip, r2, #31
   143d8:	mov	r1, r2
   143dc:	cmp	ip, r3
   143e0:	bne	14400 <__assert_fail@plt+0x360c>
   143e4:	bl	14128 <__assert_fail@plt+0x3334>
   143e8:	str	r4, [r5]
   143ec:	ldrd	r4, [sp]
   143f0:	ldrd	r6, [sp, #8]
   143f4:	ldr	r8, [sp, #16]
   143f8:	add	sp, sp, #20
   143fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14400:	bl	1455c <__assert_fail@plt+0x3768>
   14404:	str	r4, [sp, #-8]!
   14408:	str	lr, [sp, #4]
   1440c:	bl	14b28 <__assert_fail@plt+0x3d34>
   14410:	cmp	r0, #0
   14414:	beq	14424 <__assert_fail@plt+0x3630>
   14418:	ldr	r4, [sp]
   1441c:	add	sp, sp, #4
   14420:	pop	{pc}		; (ldr pc, [sp], #4)
   14424:	bl	1455c <__assert_fail@plt+0x3768>
   14428:	str	r4, [sp, #-8]!
   1442c:	str	lr, [sp, #4]
   14430:	mov	r1, #1
   14434:	bl	14404 <__assert_fail@plt+0x3610>
   14438:	ldr	r4, [sp]
   1443c:	add	sp, sp, #4
   14440:	pop	{pc}		; (ldr pc, [sp], #4)
   14444:	str	r4, [sp, #-8]!
   14448:	str	lr, [sp, #4]
   1444c:	bl	14b28 <__assert_fail@plt+0x3d34>
   14450:	cmp	r0, #0
   14454:	beq	14464 <__assert_fail@plt+0x3670>
   14458:	ldr	r4, [sp]
   1445c:	add	sp, sp, #4
   14460:	pop	{pc}		; (ldr pc, [sp], #4)
   14464:	bl	1455c <__assert_fail@plt+0x3768>
   14468:	str	r4, [sp, #-8]!
   1446c:	str	lr, [sp, #4]
   14470:	mov	r1, #1
   14474:	bl	14444 <__assert_fail@plt+0x3650>
   14478:	ldr	r4, [sp]
   1447c:	add	sp, sp, #4
   14480:	pop	{pc}		; (ldr pc, [sp], #4)
   14484:	strd	r4, [sp, #-16]!
   14488:	str	r6, [sp, #8]
   1448c:	str	lr, [sp, #12]
   14490:	mov	r5, r0
   14494:	mov	r4, r1
   14498:	mov	r0, r1
   1449c:	bl	140c8 <__assert_fail@plt+0x32d4>
   144a0:	mov	r2, r4
   144a4:	mov	r1, r5
   144a8:	bl	10c14 <memcpy@plt>
   144ac:	ldrd	r4, [sp]
   144b0:	ldr	r6, [sp, #8]
   144b4:	add	sp, sp, #12
   144b8:	pop	{pc}		; (ldr pc, [sp], #4)
   144bc:	strd	r4, [sp, #-16]!
   144c0:	str	r6, [sp, #8]
   144c4:	str	lr, [sp, #12]
   144c8:	mov	r5, r0
   144cc:	mov	r4, r1
   144d0:	mov	r0, r1
   144d4:	bl	140ec <__assert_fail@plt+0x32f8>
   144d8:	mov	r2, r4
   144dc:	mov	r1, r5
   144e0:	bl	10c14 <memcpy@plt>
   144e4:	ldrd	r4, [sp]
   144e8:	ldr	r6, [sp, #8]
   144ec:	add	sp, sp, #12
   144f0:	pop	{pc}		; (ldr pc, [sp], #4)
   144f4:	strd	r4, [sp, #-16]!
   144f8:	str	r6, [sp, #8]
   144fc:	str	lr, [sp, #12]
   14500:	mov	r5, r0
   14504:	mov	r4, r1
   14508:	add	r0, r1, #1
   1450c:	bl	140ec <__assert_fail@plt+0x32f8>
   14510:	mov	r2, #0
   14514:	strb	r2, [r0, r4]
   14518:	mov	r2, r4
   1451c:	mov	r1, r5
   14520:	bl	10c14 <memcpy@plt>
   14524:	ldrd	r4, [sp]
   14528:	ldr	r6, [sp, #8]
   1452c:	add	sp, sp, #12
   14530:	pop	{pc}		; (ldr pc, [sp], #4)
   14534:	str	r4, [sp, #-8]!
   14538:	str	lr, [sp, #4]
   1453c:	mov	r4, r0
   14540:	bl	10d34 <strlen@plt>
   14544:	add	r1, r0, #1
   14548:	mov	r0, r4
   1454c:	bl	14484 <__assert_fail@plt+0x3690>
   14550:	ldr	r4, [sp]
   14554:	add	sp, sp, #4
   14558:	pop	{pc}		; (ldr pc, [sp], #4)
   1455c:	str	r4, [sp, #-8]!
   14560:	str	lr, [sp, #4]
   14564:	movw	r3, #24796	; 0x60dc
   14568:	movt	r3, #2
   1456c:	ldr	r4, [r3]
   14570:	mov	r2, #5
   14574:	movw	r1, #23396	; 0x5b64
   14578:	movt	r1, #1
   1457c:	mov	r0, #0
   14580:	bl	10c50 <dcgettext@plt>
   14584:	mov	r3, r0
   14588:	movw	r2, #22316	; 0x572c
   1458c:	movt	r2, #1
   14590:	mov	r1, #0
   14594:	mov	r0, r4
   14598:	bl	10cc8 <error@plt>
   1459c:	bl	10de8 <abort@plt>
   145a0:	cmp	r2, #0
   145a4:	beq	14610 <__assert_fail@plt+0x381c>
   145a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   145ac:	strd	r6, [sp, #8]
   145b0:	str	lr, [sp, #16]
   145b4:	mov	r4, r0
   145b8:	sub	ip, r2, #1
   145bc:	mov	r0, #0
   145c0:	mov	r6, r0
   145c4:	mov	r7, #1
   145c8:	b	145dc <__assert_fail@plt+0x37e8>
   145cc:	orr	r0, r0, r3
   145d0:	sub	ip, ip, #1
   145d4:	cmn	ip, #1
   145d8:	beq	14618 <__assert_fail@plt+0x3824>
   145dc:	ldr	lr, [r4]
   145e0:	smull	r2, r3, lr, r1
   145e4:	asr	r5, r2, #31
   145e8:	cmp	r5, r3
   145ec:	streq	r2, [r4]
   145f0:	moveq	r3, r6
   145f4:	beq	145cc <__assert_fail@plt+0x37d8>
   145f8:	cmp	lr, #0
   145fc:	movlt	r3, #-2147483648	; 0x80000000
   14600:	mvnge	r3, #-2147483648	; 0x80000000
   14604:	str	r3, [r4]
   14608:	mov	r3, r7
   1460c:	b	145cc <__assert_fail@plt+0x37d8>
   14610:	mov	r0, #0
   14614:	bx	lr
   14618:	ldrd	r4, [sp]
   1461c:	ldrd	r6, [sp, #8]
   14620:	add	sp, sp, #16
   14624:	pop	{pc}		; (ldr pc, [sp], #4)
   14628:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1462c:	strd	r6, [sp, #8]
   14630:	str	r8, [sp, #16]
   14634:	strd	sl, [sp, #20]
   14638:	str	lr, [sp, #28]
   1463c:	sub	sp, sp, #8
   14640:	cmp	r2, #36	; 0x24
   14644:	bhi	146b0 <__assert_fail@plt+0x38bc>
   14648:	mov	r5, r0
   1464c:	mov	r4, r1
   14650:	mov	r6, r2
   14654:	mov	r8, r3
   14658:	cmp	r1, #0
   1465c:	addeq	r4, sp, #4
   14660:	bl	10d4c <__errno_location@plt>
   14664:	mov	r7, r0
   14668:	mov	r3, #0
   1466c:	str	r3, [r0]
   14670:	mov	r2, r6
   14674:	mov	r1, r4
   14678:	mov	r0, r5
   1467c:	bl	10be4 <strtol@plt>
   14680:	str	r0, [sp]
   14684:	ldr	r6, [r4]
   14688:	cmp	r6, r5
   1468c:	beq	146d0 <__assert_fail@plt+0x38dc>
   14690:	ldr	r3, [r7]
   14694:	cmp	r3, #0
   14698:	beq	147f0 <__assert_fail@plt+0x39fc>
   1469c:	cmp	r3, #34	; 0x22
   146a0:	moveq	r5, #1
   146a4:	beq	147f4 <__assert_fail@plt+0x3a00>
   146a8:	mov	r5, #4
   146ac:	b	14818 <__assert_fail@plt+0x3a24>
   146b0:	movw	r3, #23416	; 0x5b78
   146b4:	movt	r3, #1
   146b8:	mov	r2, #85	; 0x55
   146bc:	movw	r1, #23424	; 0x5b80
   146c0:	movt	r1, #1
   146c4:	movw	r0, #23440	; 0x5b90
   146c8:	movt	r0, #1
   146cc:	bl	10df4 <__assert_fail@plt>
   146d0:	ldr	r3, [sp, #40]	; 0x28
   146d4:	cmp	r3, #0
   146d8:	beq	14b18 <__assert_fail@plt+0x3d24>
   146dc:	ldrb	r1, [r5]
   146e0:	cmp	r1, #0
   146e4:	moveq	r5, #4
   146e8:	beq	14818 <__assert_fail@plt+0x3a24>
   146ec:	mov	r0, r3
   146f0:	bl	10d40 <strchr@plt>
   146f4:	cmp	r0, #0
   146f8:	beq	14b20 <__assert_fail@plt+0x3d2c>
   146fc:	mov	r3, #1
   14700:	str	r3, [sp]
   14704:	ldrb	r7, [r6]
   14708:	mov	r5, #0
   1470c:	mov	r1, r7
   14710:	ldr	r0, [sp, #40]	; 0x28
   14714:	bl	10d40 <strchr@plt>
   14718:	cmp	r0, #0
   1471c:	beq	14838 <__assert_fail@plt+0x3a44>
   14720:	sub	r3, r7, #69	; 0x45
   14724:	cmp	r3, #47	; 0x2f
   14728:	ldrls	pc, [pc, r3, lsl #2]
   1472c:	b	14984 <__assert_fail@plt+0x3b90>
   14730:	andeq	r4, r1, r8, asr #16
   14734:	andeq	r4, r1, r4, lsl #19
   14738:	andeq	r4, r1, r8, asr #16
   1473c:	andeq	r4, r1, r4, lsl #19
   14740:	andeq	r4, r1, r4, lsl #19
   14744:	andeq	r4, r1, r4, lsl #19
   14748:	andeq	r4, r1, r8, asr #16
   1474c:	andeq	r4, r1, r4, lsl #19
   14750:	andeq	r4, r1, r8, asr #16
   14754:	andeq	r4, r1, r4, lsl #19
   14758:	andeq	r4, r1, r4, lsl #19
   1475c:	andeq	r4, r1, r8, asr #16
   14760:	andeq	r4, r1, r4, lsl #19
   14764:	andeq	r4, r1, r4, lsl #19
   14768:	andeq	r4, r1, r4, lsl #19
   1476c:	andeq	r4, r1, r8, asr #16
   14770:	andeq	r4, r1, r4, lsl #19
   14774:	andeq	r4, r1, r4, lsl #19
   14778:	andeq	r4, r1, r4, lsl #19
   1477c:	andeq	r4, r1, r4, lsl #19
   14780:	andeq	r4, r1, r8, asr #16
   14784:	andeq	r4, r1, r8, asr #16
   14788:	andeq	r4, r1, r4, lsl #19
   1478c:	andeq	r4, r1, r4, lsl #19
   14790:	andeq	r4, r1, r4, lsl #19
   14794:	andeq	r4, r1, r4, lsl #19
   14798:	andeq	r4, r1, r4, lsl #19
   1479c:	andeq	r4, r1, r4, lsl #19
   147a0:	andeq	r4, r1, r4, lsl #19
   147a4:	andeq	r4, r1, r4, lsl #19
   147a8:	andeq	r4, r1, r4, lsl #19
   147ac:	andeq	r4, r1, r4, lsl #19
   147b0:	andeq	r4, r1, r4, lsl #19
   147b4:	andeq	r4, r1, r4, lsl #19
   147b8:	andeq	r4, r1, r8, asr #16
   147bc:	andeq	r4, r1, r4, lsl #19
   147c0:	andeq	r4, r1, r4, lsl #19
   147c4:	andeq	r4, r1, r4, lsl #19
   147c8:	andeq	r4, r1, r8, asr #16
   147cc:	andeq	r4, r1, r4, lsl #19
   147d0:	andeq	r4, r1, r8, asr #16
   147d4:	andeq	r4, r1, r4, lsl #19
   147d8:	andeq	r4, r1, r4, lsl #19
   147dc:	andeq	r4, r1, r4, lsl #19
   147e0:	andeq	r4, r1, r4, lsl #19
   147e4:	andeq	r4, r1, r4, lsl #19
   147e8:	andeq	r4, r1, r4, lsl #19
   147ec:	andeq	r4, r1, r8, asr #16
   147f0:	mov	r5, #0
   147f4:	ldr	r3, [sp, #40]	; 0x28
   147f8:	cmp	r3, #0
   147fc:	streq	r0, [r8]
   14800:	beq	14818 <__assert_fail@plt+0x3a24>
   14804:	ldrb	r7, [r6]
   14808:	cmp	r7, #0
   1480c:	bne	1470c <__assert_fail@plt+0x3918>
   14810:	ldr	r3, [sp]
   14814:	str	r3, [r8]
   14818:	mov	r0, r5
   1481c:	add	sp, sp, #8
   14820:	ldrd	r4, [sp]
   14824:	ldrd	r6, [sp, #8]
   14828:	ldr	r8, [sp, #16]
   1482c:	ldrd	sl, [sp, #20]
   14830:	add	sp, sp, #28
   14834:	pop	{pc}		; (ldr pc, [sp], #4)
   14838:	ldr	r3, [sp]
   1483c:	str	r3, [r8]
   14840:	orr	r5, r5, #2
   14844:	b	14818 <__assert_fail@plt+0x3a24>
   14848:	mov	r1, #48	; 0x30
   1484c:	ldr	r0, [sp, #40]	; 0x28
   14850:	bl	10d40 <strchr@plt>
   14854:	cmp	r0, #0
   14858:	beq	14990 <__assert_fail@plt+0x3b9c>
   1485c:	ldrb	r3, [r6, #1]
   14860:	cmp	r3, #68	; 0x44
   14864:	beq	1499c <__assert_fail@plt+0x3ba8>
   14868:	cmp	r3, #105	; 0x69
   1486c:	beq	1496c <__assert_fail@plt+0x3b78>
   14870:	cmp	r3, #66	; 0x42
   14874:	moveq	r6, #2
   14878:	movne	r6, #1
   1487c:	moveq	r1, #1000	; 0x3e8
   14880:	movne	r1, #1024	; 0x400
   14884:	sub	r7, r7, #66	; 0x42
   14888:	cmp	r7, #53	; 0x35
   1488c:	ldrls	pc, [pc, r7, lsl #2]
   14890:	b	14ae4 <__assert_fail@plt+0x3cf0>
   14894:	andeq	r4, r1, r8, ror #19
   14898:	andeq	r4, r1, r4, ror #21
   1489c:	andeq	r4, r1, r4, ror #21
   148a0:	andeq	r4, r1, r8, lsr #20
   148a4:	andeq	r4, r1, r4, ror #21
   148a8:	andeq	r4, r1, r8, lsr sl
   148ac:	andeq	r4, r1, r4, ror #21
   148b0:	andeq	r4, r1, r4, ror #21
   148b4:	andeq	r4, r1, r4, ror #21
   148b8:	andeq	r4, r1, r8, asr #20
   148bc:	andeq	r4, r1, r4, ror #21
   148c0:	andeq	r4, r1, r8, asr sl
   148c4:	andeq	r4, r1, r4, ror #21
   148c8:	andeq	r4, r1, r4, ror #21
   148cc:	andeq	r4, r1, r8, ror #20
   148d0:	andeq	r4, r1, r4, ror #21
   148d4:	andeq	r4, r1, r4, ror #21
   148d8:	andeq	r4, r1, r4, ror #21
   148dc:	andeq	r4, r1, r8, ror sl
   148e0:	andeq	r4, r1, r4, ror #21
   148e4:	andeq	r4, r1, r4, ror #21
   148e8:	andeq	r4, r1, r4, ror #21
   148ec:	andeq	r4, r1, r4, ror #21
   148f0:	andeq	r4, r1, r4, asr #21
   148f4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148f8:	andeq	r4, r1, r4, ror #21
   148fc:	andeq	r4, r1, r4, ror #21
   14900:	andeq	r4, r1, r4, ror #21
   14904:	andeq	r4, r1, r4, ror #21
   14908:	andeq	r4, r1, r4, ror #21
   1490c:	andeq	r4, r1, r4, ror #21
   14910:	andeq	r4, r1, r4, ror #21
   14914:	andeq	r4, r1, r8, lsr #19
   14918:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1491c:	andeq	r4, r1, r4, ror #21
   14920:	andeq	r4, r1, r4, ror #21
   14924:	andeq	r4, r1, r4, ror #21
   14928:	andeq	r4, r1, r8, lsr sl
   1492c:	andeq	r4, r1, r4, ror #21
   14930:	andeq	r4, r1, r4, ror #21
   14934:	andeq	r4, r1, r4, ror #21
   14938:	andeq	r4, r1, r8, asr #20
   1493c:	andeq	r4, r1, r4, ror #21
   14940:	andeq	r4, r1, r8, asr sl
   14944:	andeq	r4, r1, r4, ror #21
   14948:	andeq	r4, r1, r4, ror #21
   1494c:	andeq	r4, r1, r4, ror #21
   14950:	andeq	r4, r1, r4, ror #21
   14954:	andeq	r4, r1, r4, ror #21
   14958:	andeq	r4, r1, r4, ror #21
   1495c:	andeq	r4, r1, r8, ror sl
   14960:	andeq	r4, r1, r4, ror #21
   14964:	andeq	r4, r1, r4, ror #21
   14968:	andeq	r4, r1, r8, lsl #21
   1496c:	ldrb	r3, [r6, #2]
   14970:	cmp	r3, #66	; 0x42
   14974:	movne	r6, #1
   14978:	moveq	r6, #3
   1497c:	mov	r1, #1024	; 0x400
   14980:	b	14884 <__assert_fail@plt+0x3a90>
   14984:	mov	r6, #1
   14988:	mov	r1, #1024	; 0x400
   1498c:	b	14884 <__assert_fail@plt+0x3a90>
   14990:	mov	r6, #1
   14994:	mov	r1, #1024	; 0x400
   14998:	b	14884 <__assert_fail@plt+0x3a90>
   1499c:	mov	r6, #2
   149a0:	mov	r1, #1000	; 0x3e8
   149a4:	b	14884 <__assert_fail@plt+0x3a90>
   149a8:	ldr	r3, [sp]
   149ac:	asr	r1, r3, #31
   149b0:	lsl	r2, r1, #9
   149b4:	orr	r2, r2, r3, lsr #23
   149b8:	lsl	r1, r3, #9
   149bc:	asr	r0, r1, #31
   149c0:	cmp	r0, r2
   149c4:	streq	r1, [sp]
   149c8:	moveq	r0, #0
   149cc:	beq	14af8 <__assert_fail@plt+0x3d04>
   149d0:	cmp	r3, #0
   149d4:	movlt	r3, #-2147483648	; 0x80000000
   149d8:	mvnge	r3, #-2147483648	; 0x80000000
   149dc:	str	r3, [sp]
   149e0:	mov	r0, #1
   149e4:	b	14af8 <__assert_fail@plt+0x3d04>
   149e8:	ldr	r3, [sp]
   149ec:	asr	r1, r3, #31
   149f0:	lsl	r2, r1, #10
   149f4:	orr	r2, r2, r3, lsr #22
   149f8:	lsl	r1, r3, #10
   149fc:	asr	r0, r1, #31
   14a00:	cmp	r0, r2
   14a04:	streq	r1, [sp]
   14a08:	moveq	r0, #0
   14a0c:	beq	14af8 <__assert_fail@plt+0x3d04>
   14a10:	cmp	r3, #0
   14a14:	movlt	r3, #-2147483648	; 0x80000000
   14a18:	mvnge	r3, #-2147483648	; 0x80000000
   14a1c:	str	r3, [sp]
   14a20:	mov	r0, #1
   14a24:	b	14af8 <__assert_fail@plt+0x3d04>
   14a28:	mov	r2, #6
   14a2c:	mov	r0, sp
   14a30:	bl	145a0 <__assert_fail@plt+0x37ac>
   14a34:	b	14af8 <__assert_fail@plt+0x3d04>
   14a38:	mov	r2, #3
   14a3c:	mov	r0, sp
   14a40:	bl	145a0 <__assert_fail@plt+0x37ac>
   14a44:	b	14af8 <__assert_fail@plt+0x3d04>
   14a48:	mov	r2, #1
   14a4c:	mov	r0, sp
   14a50:	bl	145a0 <__assert_fail@plt+0x37ac>
   14a54:	b	14af8 <__assert_fail@plt+0x3d04>
   14a58:	mov	r2, #2
   14a5c:	mov	r0, sp
   14a60:	bl	145a0 <__assert_fail@plt+0x37ac>
   14a64:	b	14af8 <__assert_fail@plt+0x3d04>
   14a68:	mov	r2, #5
   14a6c:	mov	r0, sp
   14a70:	bl	145a0 <__assert_fail@plt+0x37ac>
   14a74:	b	14af8 <__assert_fail@plt+0x3d04>
   14a78:	mov	r2, #4
   14a7c:	mov	r0, sp
   14a80:	bl	145a0 <__assert_fail@plt+0x37ac>
   14a84:	b	14af8 <__assert_fail@plt+0x3d04>
   14a88:	ldr	r1, [sp]
   14a8c:	asr	fp, r1, #31
   14a90:	adds	r2, r1, r1
   14a94:	adc	r3, fp, fp
   14a98:	asr	r0, r2, #31
   14a9c:	cmp	r0, r3
   14aa0:	streq	r2, [sp]
   14aa4:	moveq	r0, #0
   14aa8:	beq	14af8 <__assert_fail@plt+0x3d04>
   14aac:	cmp	r1, #0
   14ab0:	movlt	r3, #-2147483648	; 0x80000000
   14ab4:	mvnge	r3, #-2147483648	; 0x80000000
   14ab8:	str	r3, [sp]
   14abc:	mov	r0, #1
   14ac0:	b	14af8 <__assert_fail@plt+0x3d04>
   14ac4:	mov	r2, #8
   14ac8:	mov	r0, sp
   14acc:	bl	145a0 <__assert_fail@plt+0x37ac>
   14ad0:	b	14af8 <__assert_fail@plt+0x3d04>
   14ad4:	mov	r2, #7
   14ad8:	mov	r0, sp
   14adc:	bl	145a0 <__assert_fail@plt+0x37ac>
   14ae0:	b	14af8 <__assert_fail@plt+0x3d04>
   14ae4:	ldr	r3, [sp]
   14ae8:	str	r3, [r8]
   14aec:	orr	r5, r5, #2
   14af0:	b	14818 <__assert_fail@plt+0x3a24>
   14af4:	mov	r0, #0
   14af8:	orr	r5, r5, r0
   14afc:	ldr	r3, [r4]
   14b00:	add	r2, r3, r6
   14b04:	str	r2, [r4]
   14b08:	ldrb	r3, [r3, r6]
   14b0c:	cmp	r3, #0
   14b10:	orrne	r5, r5, #2
   14b14:	b	14810 <__assert_fail@plt+0x3a1c>
   14b18:	mov	r5, #4
   14b1c:	b	14818 <__assert_fail@plt+0x3a24>
   14b20:	mov	r5, #4
   14b24:	b	14818 <__assert_fail@plt+0x3a24>
   14b28:	strd	r4, [sp, #-16]!
   14b2c:	str	r6, [sp, #8]
   14b30:	str	lr, [sp, #12]
   14b34:	cmp	r1, #0
   14b38:	cmpne	r0, #0
   14b3c:	beq	14b78 <__assert_fail@plt+0x3d84>
   14b40:	mov	r2, r0
   14b44:	mov	r3, r1
   14b48:	umull	r4, r5, r0, r1
   14b4c:	adds	r1, r5, #0
   14b50:	movne	r1, #1
   14b54:	cmp	r4, #0
   14b58:	movlt	r1, #1
   14b5c:	cmp	r1, #0
   14b60:	beq	14b80 <__assert_fail@plt+0x3d8c>
   14b64:	bl	10d4c <__errno_location@plt>
   14b68:	mov	r3, #12
   14b6c:	str	r3, [r0]
   14b70:	mov	r0, #0
   14b74:	b	14b8c <__assert_fail@plt+0x3d98>
   14b78:	mov	r3, #1
   14b7c:	mov	r2, r3
   14b80:	mov	r1, r3
   14b84:	mov	r0, r2
   14b88:	bl	10bc0 <calloc@plt>
   14b8c:	ldrd	r4, [sp]
   14b90:	ldr	r6, [sp, #8]
   14b94:	add	sp, sp, #12
   14b98:	pop	{pc}		; (ldr pc, [sp], #4)
   14b9c:	str	r4, [sp, #-8]!
   14ba0:	str	lr, [sp, #4]
   14ba4:	cmp	r0, #0
   14ba8:	beq	14bc4 <__assert_fail@plt+0x3dd0>
   14bac:	bge	14bc8 <__assert_fail@plt+0x3dd4>
   14bb0:	bl	10d4c <__errno_location@plt>
   14bb4:	mov	r3, #12
   14bb8:	str	r3, [r0]
   14bbc:	mov	r0, #0
   14bc0:	b	14bcc <__assert_fail@plt+0x3dd8>
   14bc4:	mov	r0, #1
   14bc8:	bl	10ce0 <malloc@plt>
   14bcc:	ldr	r4, [sp]
   14bd0:	add	sp, sp, #4
   14bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd8:	str	r4, [sp, #-8]!
   14bdc:	str	lr, [sp, #4]
   14be0:	cmp	r0, #0
   14be4:	beq	14c08 <__assert_fail@plt+0x3e14>
   14be8:	cmp	r1, #0
   14bec:	beq	14c14 <__assert_fail@plt+0x3e20>
   14bf0:	cmp	r1, #0
   14bf4:	blt	14c20 <__assert_fail@plt+0x3e2c>
   14bf8:	bl	10c5c <realloc@plt>
   14bfc:	ldr	r4, [sp]
   14c00:	add	sp, sp, #4
   14c04:	pop	{pc}		; (ldr pc, [sp], #4)
   14c08:	mov	r0, r1
   14c0c:	bl	14b9c <__assert_fail@plt+0x3da8>
   14c10:	b	14bfc <__assert_fail@plt+0x3e08>
   14c14:	bl	14dec <__assert_fail@plt+0x3ff8>
   14c18:	mov	r0, #0
   14c1c:	b	14bfc <__assert_fail@plt+0x3e08>
   14c20:	bl	10d4c <__errno_location@plt>
   14c24:	mov	r3, #12
   14c28:	str	r3, [r0]
   14c2c:	mov	r0, #0
   14c30:	b	14bfc <__assert_fail@plt+0x3e08>
   14c34:	strd	r4, [sp, #-16]!
   14c38:	str	r6, [sp, #8]
   14c3c:	str	lr, [sp, #12]
   14c40:	mov	r5, r0
   14c44:	bl	10cb0 <__fpending@plt>
   14c48:	mov	r6, r0
   14c4c:	ldr	r4, [r5]
   14c50:	and	r4, r4, #32
   14c54:	mov	r0, r5
   14c58:	bl	14cc0 <__assert_fail@plt+0x3ecc>
   14c5c:	cmp	r4, #0
   14c60:	bne	14c94 <__assert_fail@plt+0x3ea0>
   14c64:	cmp	r0, #0
   14c68:	beq	14c84 <__assert_fail@plt+0x3e90>
   14c6c:	cmp	r6, #0
   14c70:	bne	14cb0 <__assert_fail@plt+0x3ebc>
   14c74:	bl	10d4c <__errno_location@plt>
   14c78:	ldr	r0, [r0]
   14c7c:	subs	r0, r0, #9
   14c80:	mvnne	r0, #0
   14c84:	ldrd	r4, [sp]
   14c88:	ldr	r6, [sp, #8]
   14c8c:	add	sp, sp, #12
   14c90:	pop	{pc}		; (ldr pc, [sp], #4)
   14c94:	cmp	r0, #0
   14c98:	bne	14cb8 <__assert_fail@plt+0x3ec4>
   14c9c:	bl	10d4c <__errno_location@plt>
   14ca0:	mov	r3, #0
   14ca4:	str	r3, [r0]
   14ca8:	mvn	r0, #0
   14cac:	b	14c84 <__assert_fail@plt+0x3e90>
   14cb0:	mvn	r0, #0
   14cb4:	b	14c84 <__assert_fail@plt+0x3e90>
   14cb8:	mvn	r0, #0
   14cbc:	b	14c84 <__assert_fail@plt+0x3e90>
   14cc0:	strd	r4, [sp, #-16]!
   14cc4:	str	r6, [sp, #8]
   14cc8:	str	lr, [sp, #12]
   14ccc:	sub	sp, sp, #8
   14cd0:	mov	r4, r0
   14cd4:	bl	10d7c <fileno@plt>
   14cd8:	cmp	r0, #0
   14cdc:	blt	14d54 <__assert_fail@plt+0x3f60>
   14ce0:	mov	r0, r4
   14ce4:	bl	10cf8 <__freading@plt>
   14ce8:	cmp	r0, #0
   14cec:	beq	14d20 <__assert_fail@plt+0x3f2c>
   14cf0:	mov	r0, r4
   14cf4:	bl	10d7c <fileno@plt>
   14cf8:	mov	r3, #1
   14cfc:	str	r3, [sp]
   14d00:	mov	r2, #0
   14d04:	mov	r3, #0
   14d08:	bl	10c98 <lseek64@plt>
   14d0c:	mvn	r2, #0
   14d10:	mvn	r3, #0
   14d14:	cmp	r1, r3
   14d18:	cmpeq	r0, r2
   14d1c:	beq	14d60 <__assert_fail@plt+0x3f6c>
   14d20:	mov	r0, r4
   14d24:	bl	14d7c <__assert_fail@plt+0x3f88>
   14d28:	cmp	r0, #0
   14d2c:	beq	14d60 <__assert_fail@plt+0x3f6c>
   14d30:	bl	10d4c <__errno_location@plt>
   14d34:	mov	r5, r0
   14d38:	ldr	r6, [r0]
   14d3c:	mov	r0, r4
   14d40:	bl	10d94 <fclose@plt>
   14d44:	cmp	r6, #0
   14d48:	strne	r6, [r5]
   14d4c:	mvnne	r0, #0
   14d50:	b	14d68 <__assert_fail@plt+0x3f74>
   14d54:	mov	r0, r4
   14d58:	bl	10d94 <fclose@plt>
   14d5c:	b	14d68 <__assert_fail@plt+0x3f74>
   14d60:	mov	r0, r4
   14d64:	bl	10d94 <fclose@plt>
   14d68:	add	sp, sp, #8
   14d6c:	ldrd	r4, [sp]
   14d70:	ldr	r6, [sp, #8]
   14d74:	add	sp, sp, #12
   14d78:	pop	{pc}		; (ldr pc, [sp], #4)
   14d7c:	str	r4, [sp, #-8]!
   14d80:	str	lr, [sp, #4]
   14d84:	sub	sp, sp, #8
   14d88:	subs	r4, r0, #0
   14d8c:	beq	14da0 <__assert_fail@plt+0x3fac>
   14d90:	mov	r0, r4
   14d94:	bl	10cf8 <__freading@plt>
   14d98:	cmp	r0, #0
   14d9c:	bne	14db8 <__assert_fail@plt+0x3fc4>
   14da0:	mov	r0, r4
   14da4:	bl	10bf0 <fflush@plt>
   14da8:	add	sp, sp, #8
   14dac:	ldr	r4, [sp]
   14db0:	add	sp, sp, #4
   14db4:	pop	{pc}		; (ldr pc, [sp], #4)
   14db8:	ldr	r3, [r4]
   14dbc:	tst	r3, #256	; 0x100
   14dc0:	bne	14dd0 <__assert_fail@plt+0x3fdc>
   14dc4:	mov	r0, r4
   14dc8:	bl	10bf0 <fflush@plt>
   14dcc:	b	14da8 <__assert_fail@plt+0x3fb4>
   14dd0:	mov	r3, #1
   14dd4:	str	r3, [sp]
   14dd8:	mov	r2, #0
   14ddc:	mov	r3, #0
   14de0:	mov	r0, r4
   14de4:	bl	14e4c <__assert_fail@plt+0x4058>
   14de8:	b	14dc4 <__assert_fail@plt+0x3fd0>
   14dec:	strd	r4, [sp, #-12]!
   14df0:	str	lr, [sp, #8]
   14df4:	sub	sp, sp, #12
   14df8:	mov	r5, r0
   14dfc:	bl	10d4c <__errno_location@plt>
   14e00:	mov	r4, r0
   14e04:	ldr	r3, [r0]
   14e08:	str	r3, [sp]
   14e0c:	str	r3, [sp, #4]
   14e10:	mov	r3, #0
   14e14:	str	r3, [r0]
   14e18:	mov	r0, r5
   14e1c:	bl	10bfc <free@plt>
   14e20:	ldr	r3, [r4]
   14e24:	clz	r3, r3
   14e28:	lsr	r3, r3, #5
   14e2c:	add	r2, sp, #8
   14e30:	add	r3, r2, r3, lsl #2
   14e34:	ldr	r3, [r3, #-8]
   14e38:	str	r3, [r4]
   14e3c:	add	sp, sp, #12
   14e40:	ldrd	r4, [sp]
   14e44:	add	sp, sp, #8
   14e48:	pop	{pc}		; (ldr pc, [sp], #4)
   14e4c:	str	r4, [sp, #-16]!
   14e50:	strd	r6, [sp, #4]
   14e54:	str	lr, [sp, #12]
   14e58:	sub	sp, sp, #8
   14e5c:	mov	r4, r0
   14e60:	mov	r6, r2
   14e64:	mov	r7, r3
   14e68:	ldr	r2, [r0, #8]
   14e6c:	ldr	r3, [r0, #4]
   14e70:	cmp	r2, r3
   14e74:	beq	14ea4 <__assert_fail@plt+0x40b0>
   14e78:	ldr	r3, [sp, #24]
   14e7c:	str	r3, [sp]
   14e80:	mov	r2, r6
   14e84:	mov	r3, r7
   14e88:	mov	r0, r4
   14e8c:	bl	10da0 <fseeko64@plt>
   14e90:	add	sp, sp, #8
   14e94:	ldr	r4, [sp]
   14e98:	ldrd	r6, [sp, #4]
   14e9c:	add	sp, sp, #12
   14ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea4:	ldr	r2, [r0, #20]
   14ea8:	ldr	r3, [r0, #16]
   14eac:	cmp	r2, r3
   14eb0:	bne	14e78 <__assert_fail@plt+0x4084>
   14eb4:	ldr	r3, [r0, #36]	; 0x24
   14eb8:	cmp	r3, #0
   14ebc:	bne	14e78 <__assert_fail@plt+0x4084>
   14ec0:	bl	10d7c <fileno@plt>
   14ec4:	ldr	r3, [sp, #24]
   14ec8:	str	r3, [sp]
   14ecc:	mov	r2, r6
   14ed0:	mov	r3, r7
   14ed4:	bl	10c98 <lseek64@plt>
   14ed8:	mvn	r2, #0
   14edc:	mvn	r3, #0
   14ee0:	cmp	r1, r3
   14ee4:	cmpeq	r0, r2
   14ee8:	beq	14f04 <__assert_fail@plt+0x4110>
   14eec:	ldr	r3, [r4]
   14ef0:	bic	r3, r3, #16
   14ef4:	str	r3, [r4]
   14ef8:	strd	r0, [r4, #80]	; 0x50
   14efc:	mov	r0, #0
   14f00:	b	14e90 <__assert_fail@plt+0x409c>
   14f04:	mvn	r0, #0
   14f08:	b	14e90 <__assert_fail@plt+0x409c>
   14f0c:	str	r4, [sp, #-8]!
   14f10:	str	lr, [sp, #4]
   14f14:	mov	r0, #14
   14f18:	bl	10dc4 <nl_langinfo@plt>
   14f1c:	cmp	r0, #0
   14f20:	beq	14f44 <__assert_fail@plt+0x4150>
   14f24:	ldrb	r2, [r0]
   14f28:	movw	r3, #23480	; 0x5bb8
   14f2c:	movt	r3, #1
   14f30:	cmp	r2, #0
   14f34:	moveq	r0, r3
   14f38:	ldr	r4, [sp]
   14f3c:	add	sp, sp, #4
   14f40:	pop	{pc}		; (ldr pc, [sp], #4)
   14f44:	movw	r0, #23480	; 0x5bb8
   14f48:	movt	r0, #1
   14f4c:	b	14f38 <__assert_fail@plt+0x4144>
   14f50:	strd	r4, [sp, #-20]!	; 0xffffffec
   14f54:	strd	r6, [sp, #8]
   14f58:	str	lr, [sp, #16]
   14f5c:	sub	sp, sp, #12
   14f60:	mov	r7, r1
   14f64:	mov	r5, r2
   14f68:	subs	r6, r0, #0
   14f6c:	addeq	r6, sp, #4
   14f70:	mov	r0, r6
   14f74:	bl	10cbc <mbrtowc@plt>
   14f78:	mov	r4, r0
   14f7c:	cmp	r5, #0
   14f80:	cmnne	r0, #3
   14f84:	bhi	14fa0 <__assert_fail@plt+0x41ac>
   14f88:	mov	r0, r4
   14f8c:	add	sp, sp, #12
   14f90:	ldrd	r4, [sp]
   14f94:	ldrd	r6, [sp, #8]
   14f98:	add	sp, sp, #16
   14f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa0:	mov	r0, #0
   14fa4:	bl	14ffc <__assert_fail@plt+0x4208>
   14fa8:	cmp	r0, #0
   14fac:	bne	14f88 <__assert_fail@plt+0x4194>
   14fb0:	ldrb	r3, [r7]
   14fb4:	str	r3, [r6]
   14fb8:	mov	r4, #1
   14fbc:	b	14f88 <__assert_fail@plt+0x4194>
   14fc0:	str	r4, [sp, #-8]!
   14fc4:	str	lr, [sp, #4]
   14fc8:	umull	r2, r3, r1, r2
   14fcc:	cmp	r3, #0
   14fd0:	bne	14fe8 <__assert_fail@plt+0x41f4>
   14fd4:	mov	r1, r2
   14fd8:	bl	14bd8 <__assert_fail@plt+0x3de4>
   14fdc:	ldr	r4, [sp]
   14fe0:	add	sp, sp, #4
   14fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fe8:	bl	10d4c <__errno_location@plt>
   14fec:	mov	r3, #12
   14ff0:	str	r3, [r0]
   14ff4:	mov	r0, #0
   14ff8:	b	14fdc <__assert_fail@plt+0x41e8>
   14ffc:	push	{lr}		; (str lr, [sp, #-4]!)
   15000:	sub	sp, sp, #268	; 0x10c
   15004:	movw	r2, #257	; 0x101
   15008:	add	r1, sp, #4
   1500c:	bl	15058 <__assert_fail@plt+0x4264>
   15010:	cmp	r0, #0
   15014:	movne	r0, #0
   15018:	bne	15050 <__assert_fail@plt+0x425c>
   1501c:	movw	r1, #23488	; 0x5bc0
   15020:	movt	r1, #1
   15024:	add	r0, sp, #4
   15028:	bl	10bd8 <strcmp@plt>
   1502c:	cmp	r0, #0
   15030:	beq	1504c <__assert_fail@plt+0x4258>
   15034:	movw	r1, #23492	; 0x5bc4
   15038:	movt	r1, #1
   1503c:	add	r0, sp, #4
   15040:	bl	10bd8 <strcmp@plt>
   15044:	adds	r0, r0, #0
   15048:	movne	r0, #1
   1504c:	and	r0, r0, #1
   15050:	add	sp, sp, #268	; 0x10c
   15054:	pop	{pc}		; (ldr pc, [sp], #4)
   15058:	strd	r4, [sp, #-16]!
   1505c:	str	r6, [sp, #8]
   15060:	str	lr, [sp, #12]
   15064:	mov	r6, r1
   15068:	mov	r4, r2
   1506c:	mov	r1, #0
   15070:	bl	10dac <setlocale@plt>
   15074:	subs	r5, r0, #0
   15078:	beq	150bc <__assert_fail@plt+0x42c8>
   1507c:	mov	r0, r5
   15080:	bl	10d34 <strlen@plt>
   15084:	cmp	r4, r0
   15088:	bhi	150d8 <__assert_fail@plt+0x42e4>
   1508c:	cmp	r4, #0
   15090:	moveq	r0, #34	; 0x22
   15094:	beq	150ec <__assert_fail@plt+0x42f8>
   15098:	sub	r4, r4, #1
   1509c:	mov	r2, r4
   150a0:	mov	r1, r5
   150a4:	mov	r0, r6
   150a8:	bl	10c14 <memcpy@plt>
   150ac:	mov	r3, #0
   150b0:	strb	r3, [r6, r4]
   150b4:	mov	r0, #34	; 0x22
   150b8:	b	150ec <__assert_fail@plt+0x42f8>
   150bc:	cmp	r4, #0
   150c0:	moveq	r0, #22
   150c4:	beq	150ec <__assert_fail@plt+0x42f8>
   150c8:	mov	r3, #0
   150cc:	strb	r3, [r6]
   150d0:	mov	r0, #22
   150d4:	b	150ec <__assert_fail@plt+0x42f8>
   150d8:	add	r2, r0, #1
   150dc:	mov	r1, r5
   150e0:	mov	r0, r6
   150e4:	bl	10c14 <memcpy@plt>
   150e8:	mov	r0, #0
   150ec:	ldrd	r4, [sp]
   150f0:	ldr	r6, [sp, #8]
   150f4:	add	sp, sp, #12
   150f8:	pop	{pc}		; (ldr pc, [sp], #4)
   150fc:	str	r4, [sp, #-8]!
   15100:	str	lr, [sp, #4]
   15104:	mov	r1, #0
   15108:	bl	10dac <setlocale@plt>
   1510c:	ldr	r4, [sp]
   15110:	add	sp, sp, #4
   15114:	pop	{pc}		; (ldr pc, [sp], #4)
   15118:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1511c:	mov	r7, r0
   15120:	ldr	r6, [pc, #72]	; 15170 <__assert_fail@plt+0x437c>
   15124:	ldr	r5, [pc, #72]	; 15174 <__assert_fail@plt+0x4380>
   15128:	add	r6, pc, r6
   1512c:	add	r5, pc, r5
   15130:	sub	r6, r6, r5
   15134:	mov	r8, r1
   15138:	mov	r9, r2
   1513c:	bl	10ba0 <calloc@plt-0x20>
   15140:	asrs	r6, r6, #2
   15144:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15148:	mov	r4, #0
   1514c:	add	r4, r4, #1
   15150:	ldr	r3, [r5], #4
   15154:	mov	r2, r9
   15158:	mov	r1, r8
   1515c:	mov	r0, r7
   15160:	blx	r3
   15164:	cmp	r6, r4
   15168:	bne	1514c <__assert_fail@plt+0x4358>
   1516c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15170:	andeq	r0, r1, r4, ror #27
   15174:	ldrdeq	r0, [r1], -ip
   15178:	bx	lr
   1517c:	ldr	r3, [pc, #12]	; 15190 <__assert_fail@plt+0x439c>
   15180:	mov	r1, #0
   15184:	add	r3, pc, r3
   15188:	ldr	r2, [r3]
   1518c:	b	10d58 <__cxa_atexit@plt>
   15190:	andeq	r0, r1, r8, asr #30

Disassembly of section .fini:

00015194 <.fini>:
   15194:	push	{r3, lr}
   15198:	pop	{r3, pc}
