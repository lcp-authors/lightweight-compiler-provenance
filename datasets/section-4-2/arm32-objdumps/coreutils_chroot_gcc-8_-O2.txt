
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010e94 <.init>:
   10e94:	push	{r3, lr}
   10e98:	bl	118d0 <__assert_fail@plt+0x728>
   10e9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ea0 <calloc@plt-0x14>:
   10ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea4:	ldr	lr, [pc, #4]	; 10eb0 <calloc@plt-0x4>
   10ea8:	add	lr, pc, lr
   10eac:	ldr	pc, [lr, #8]!
   10eb0:	andeq	r7, r1, r0, asr r1

00010eb4 <calloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #336]!	; 0x150

00010ec0 <endgrent@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #328]!	; 0x148

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #320]!	; 0x140

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #312]!	; 0x138

00010ee4 <getpwnam@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #304]!	; 0x130

00010ef0 <strcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #296]!	; 0x128

00010efc <getpwuid@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #288]!	; 0x120

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #280]!	; 0x118

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #272]!	; 0x110

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #264]!	; 0x108

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #256]!	; 0x100

00010f38 <execvp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #248]!	; 0xf8

00010f44 <__strtoull_internal@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #240]!	; 0xf0

00010f50 <mbsinit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #232]!	; 0xe8

00010f5c <memcmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #224]!	; 0xe0

00010f68 <fputc_unlocked@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #216]!	; 0xd8

00010f74 <dcgettext@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #208]!	; 0xd0

00010f80 <realloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #200]!	; 0xc8

00010f8c <textdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #192]!	; 0xc0

00010f98 <chdir@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #184]!	; 0xb8

00010fa4 <iswprint@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #176]!	; 0xb0

00010fb0 <setgroups@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #168]!	; 0xa8

00010fbc <fwrite@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #160]!	; 0xa0

00010fc8 <lseek64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #152]!	; 0x98

00010fd4 <__ctype_get_mb_cur_max@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #144]!	; 0x90

00010fe0 <chroot@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #136]!	; 0x88

00010fec <__fpending@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #128]!	; 0x80

00010ff8 <mbrtowc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #120]!	; 0x78

00011004 <error@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #112]!	; 0x70

00011010 <getenv@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #104]!	; 0x68

0001101c <setgid@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #96]!	; 0x60

00011028 <malloc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #88]!	; 0x58

00011034 <__libc_start_main@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #80]!	; 0x50

00011040 <__freading@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #72]!	; 0x48

0001104c <__gmon_start__@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #64]!	; 0x40

00011058 <getopt_long@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #56]!	; 0x38

00011064 <__ctype_b_loc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #48]!	; 0x30

00011070 <exit@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #40]!	; 0x28

0001107c <strtoul@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #32]!

00011088 <strlen@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #24]!

00011094 <strchr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #16]!

000110a0 <__errno_location@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #8]!

000110ac <__cxa_atexit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #0]!

000110b8 <getgrouplist@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #4088]!	; 0xff8

000110c4 <memset@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #4080]!	; 0xff0

000110d0 <__printf_chk@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110dc <fileno@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110e8 <__fprintf_chk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f4 <fclose@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #4048]!	; 0xfd0

00011100 <fseeko64@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #4040]!	; 0xfc8

0001110c <strtok@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #4032]!	; 0xfc0

00011118 <setlocale@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #4024]!	; 0xfb8

00011124 <endpwent@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011130 <strrchr@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #4008]!	; 0xfa8

0001113c <nl_langinfo@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #4000]!	; 0xfa0

00011148 <setuid@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3992]!	; 0xf98

00011154 <getgroups@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3984]!	; 0xf90

00011160 <canonicalize_file_name@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3976]!	; 0xf88

0001116c <bindtextdomain@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3968]!	; 0xf80

00011178 <strncmp@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3960]!	; 0xf78

00011184 <abort@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3952]!	; 0xf70

00011190 <getgrgid@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3944]!	; 0xf68

0001119c <getgrnam@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3936]!	; 0xf60

000111a8 <__assert_fail@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3928]!	; 0xf58

Disassembly of section .text:

000111b4 <.text>:
   111b4:	mov	r3, #0
   111b8:	mvn	r2, #0
   111bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   111c0:	strd	r6, [sp, #8]
   111c4:	mov	r5, r3
   111c8:	mov	r7, r1
   111cc:	strd	r8, [sp, #16]
   111d0:	mov	r8, r0
   111d4:	movw	r6, #28512	; 0x6f60
   111d8:	movt	r6, #1
   111dc:	strd	sl, [sp, #24]
   111e0:	mov	fp, r3
   111e4:	str	lr, [sp, #32]
   111e8:	sub	sp, sp, #44	; 0x2c
   111ec:	movw	r9, #33144	; 0x8178
   111f0:	movt	r9, #2
   111f4:	ldr	r0, [r1]
   111f8:	str	r3, [sp, #12]
   111fc:	str	r2, [sp, #20]
   11200:	strd	r2, [sp, #24]
   11204:	str	r3, [sp, #32]
   11208:	bl	120e4 <__assert_fail@plt+0xf3c>
   1120c:	movw	r1, #28224	; 0x6e40
   11210:	movt	r1, #1
   11214:	ldr	sl, [pc, #1652]	; 11890 <__assert_fail@plt+0x6e8>
   11218:	mov	r0, #6
   1121c:	bl	11118 <setlocale@plt>
   11220:	movw	r1, #28472	; 0x6f38
   11224:	movt	r1, #1
   11228:	movw	r0, #28296	; 0x6e88
   1122c:	movt	r0, #1
   11230:	bl	1116c <bindtextdomain@plt>
   11234:	movw	r0, #28296	; 0x6e88
   11238:	movt	r0, #1
   1123c:	bl	10f8c <textdomain@plt>
   11240:	movw	r3, #33052	; 0x811c
   11244:	movt	r3, #2
   11248:	mov	r2, #125	; 0x7d
   1124c:	movw	r0, #8088	; 0x1f98
   11250:	movt	r0, #1
   11254:	str	r2, [r3]
   11258:	bl	16b24 <__assert_fail@plt+0x597c>
   1125c:	mov	r4, #0
   11260:	mov	r3, sl
   11264:	mov	r2, r6
   11268:	mov	r1, r7
   1126c:	mov	r0, r8
   11270:	str	r4, [sp]
   11274:	bl	11058 <getopt_long@plt>
   11278:	cmn	r0, #1
   1127c:	beq	11338 <__assert_fail@plt+0x190>
   11280:	cmp	r0, #256	; 0x100
   11284:	beq	1132c <__assert_fail@plt+0x184>
   11288:	ble	112c0 <__assert_fail@plt+0x118>
   1128c:	movw	r3, #257	; 0x101
   11290:	cmp	r0, r3
   11294:	bne	11308 <__assert_fail@plt+0x160>
   11298:	ldr	fp, [r9]
   1129c:	mov	r0, fp
   112a0:	bl	11088 <strlen@plt>
   112a4:	cmp	r0, #0
   112a8:	beq	1125c <__assert_fail@plt+0xb4>
   112ac:	sub	r0, r0, #1
   112b0:	ldrb	r3, [fp, r0]
   112b4:	cmp	r3, #58	; 0x3a
   112b8:	strbeq	r4, [fp, r0]
   112bc:	b	1125c <__assert_fail@plt+0xb4>
   112c0:	cmn	r0, #3
   112c4:	bne	1131c <__assert_fail@plt+0x174>
   112c8:	movw	r2, #28496	; 0x6f50
   112cc:	movt	r2, #1
   112d0:	movw	r3, #33048	; 0x8118
   112d4:	movt	r3, #2
   112d8:	movw	r0, #33140	; 0x8174
   112dc:	movt	r0, #2
   112e0:	stm	sp, {r2, r4}
   112e4:	movw	r1, #27664	; 0x6c10
   112e8:	movt	r1, #1
   112ec:	ldr	r0, [r0]
   112f0:	movw	r2, #28292	; 0x6e84
   112f4:	movt	r2, #1
   112f8:	ldr	r3, [r3]
   112fc:	bl	14c70 <__assert_fail@plt+0x3ac8>
   11300:	mov	r0, r4
   11304:	bl	11070 <exit@plt>
   11308:	movw	r3, #258	; 0x102
   1130c:	cmp	r0, r3
   11310:	bne	11824 <__assert_fail@plt+0x67c>
   11314:	mov	r5, #1
   11318:	b	1125c <__assert_fail@plt+0xb4>
   1131c:	cmn	r0, #2
   11320:	bne	11824 <__assert_fail@plt+0x67c>
   11324:	mov	r0, r4
   11328:	bl	11bd0 <__assert_fail@plt+0xa28>
   1132c:	ldr	r3, [r9]
   11330:	str	r3, [sp, #12]
   11334:	b	1125c <__assert_fail@plt+0xb4>
   11338:	movw	r6, #33128	; 0x8168
   1133c:	movt	r6, #2
   11340:	ldr	r3, [r6]
   11344:	cmp	r3, r8
   11348:	bge	11800 <__assert_fail@plt+0x658>
   1134c:	ldr	r4, [r7, r3, lsl #2]
   11350:	mov	r0, r4
   11354:	bl	11160 <canonicalize_file_name@plt>
   11358:	subs	r9, r0, #0
   1135c:	beq	11410 <__assert_fail@plt+0x268>
   11360:	movw	r0, #28048	; 0x6d90
   11364:	movt	r0, #1
   11368:	mov	r1, r9
   1136c:	bl	10ef0 <strcmp@plt>
   11370:	cmp	r0, #0
   11374:	bne	11410 <__assert_fail@plt+0x268>
   11378:	mov	r0, r9
   1137c:	bl	12084 <__assert_fail@plt+0xedc>
   11380:	mov	r0, r4
   11384:	bl	10fe0 <chroot@plt>
   11388:	cmp	r0, #0
   1138c:	bne	116e8 <__assert_fail@plt+0x540>
   11390:	cmp	r5, #0
   11394:	movne	r5, r0
   11398:	beq	11488 <__assert_fail@plt+0x2e0>
   1139c:	ldr	r3, [r6]
   113a0:	add	r3, r3, #1
   113a4:	cmp	r3, r8
   113a8:	addne	r7, r7, r3, lsl #2
   113ac:	beq	116b4 <__assert_fail@plt+0x50c>
   113b0:	cmp	fp, #0
   113b4:	beq	114c8 <__assert_fail@plt+0x320>
   113b8:	mov	r1, #0
   113bc:	mov	r0, fp
   113c0:	mov	r3, r1
   113c4:	add	r2, sp, #24
   113c8:	str	r1, [sp]
   113cc:	add	r1, sp, #20
   113d0:	bl	14704 <__assert_fail@plt+0x355c>
   113d4:	subs	r4, r0, #0
   113d8:	beq	114c8 <__assert_fail@plt+0x320>
   113dc:	ldr	r0, [sp, #20]
   113e0:	cmn	r0, #1
   113e4:	bne	114d4 <__assert_fail@plt+0x32c>
   113e8:	ldr	r3, [sp, #24]
   113ec:	cmn	r3, #1
   113f0:	bne	115e8 <__assert_fail@plt+0x440>
   113f4:	bl	110a0 <__errno_location@plt>
   113f8:	movw	r2, #29044	; 0x7174
   113fc:	movt	r2, #1
   11400:	ldr	r1, [r0]
   11404:	mov	r3, r4
   11408:	mov	r0, #125	; 0x7d
   1140c:	bl	11004 <error@plt>
   11410:	mov	r0, r9
   11414:	bl	12084 <__assert_fail@plt+0xedc>
   11418:	cmp	r5, #0
   1141c:	bne	11840 <__assert_fail@plt+0x698>
   11420:	cmp	fp, #0
   11424:	beq	11440 <__assert_fail@plt+0x298>
   11428:	mov	r3, r5
   1142c:	add	r2, sp, #24
   11430:	str	r5, [sp]
   11434:	add	r1, sp, #20
   11438:	mov	r0, fp
   1143c:	bl	14704 <__assert_fail@plt+0x355c>
   11440:	ldr	r0, [sp, #20]
   11444:	cmn	r0, #1
   11448:	beq	11658 <__assert_fail@plt+0x4b0>
   1144c:	ldr	r3, [sp, #12]
   11450:	cmp	r3, #0
   11454:	beq	117e0 <__assert_fail@plt+0x638>
   11458:	ldr	r3, [sp, #24]
   1145c:	cmn	r3, #1
   11460:	beq	11780 <__assert_fail@plt+0x5d8>
   11464:	mov	r5, #0
   11468:	ldr	r3, [sp, #12]
   1146c:	ldrb	r3, [r3]
   11470:	cmp	r3, #0
   11474:	bne	11730 <__assert_fail@plt+0x588>
   11478:	mov	r0, r4
   1147c:	bl	10fe0 <chroot@plt>
   11480:	cmp	r0, #0
   11484:	bne	116e8 <__assert_fail@plt+0x540>
   11488:	movw	r0, #28048	; 0x6d90
   1148c:	movt	r0, #1
   11490:	bl	10f98 <chdir@plt>
   11494:	cmp	r0, #0
   11498:	beq	1139c <__assert_fail@plt+0x1f4>
   1149c:	bl	110a0 <__errno_location@plt>
   114a0:	ldr	r4, [r0]
   114a4:	movw	r1, #28624	; 0x6fd0
   114a8:	movt	r1, #1
   114ac:	mov	r2, #5
   114b0:	mov	r0, #0
   114b4:	bl	10f74 <dcgettext@plt>
   114b8:	mov	r2, r0
   114bc:	mov	r1, r4
   114c0:	mov	r0, #125	; 0x7d
   114c4:	bl	11004 <error@plt>
   114c8:	ldr	r0, [sp, #20]
   114cc:	cmn	r0, #1
   114d0:	beq	115e8 <__assert_fail@plt+0x440>
   114d4:	ldr	r3, [sp, #12]
   114d8:	cmp	r3, #0
   114dc:	beq	115c8 <__assert_fail@plt+0x420>
   114e0:	ldr	r3, [sp, #24]
   114e4:	cmn	r3, #1
   114e8:	movne	r3, #0
   114ec:	ldrne	r4, [sp, #28]
   114f0:	strne	r3, [sp, #36]	; 0x24
   114f4:	beq	115c8 <__assert_fail@plt+0x420>
   114f8:	ldr	r3, [sp, #12]
   114fc:	ldrb	r3, [r3]
   11500:	cmp	r3, #0
   11504:	bne	11620 <__assert_fail@plt+0x478>
   11508:	mov	r1, r4
   1150c:	ldr	r0, [sp, #32]
   11510:	bl	10fb0 <setgroups@plt>
   11514:	cmp	r0, #0
   11518:	bne	1182c <__assert_fail@plt+0x684>
   1151c:	ldr	r0, [sp, #36]	; 0x24
   11520:	bl	12084 <__assert_fail@plt+0xedc>
   11524:	ldr	r0, [sp, #28]
   11528:	bl	12084 <__assert_fail@plt+0xedc>
   1152c:	bl	110a0 <__errno_location@plt>
   11530:	ldr	r4, [sp, #24]
   11534:	mov	r5, r0
   11538:	cmn	r4, #1
   1153c:	bne	11694 <__assert_fail@plt+0x4ec>
   11540:	ldr	r0, [sp, #20]
   11544:	cmn	r0, #1
   11548:	beq	11558 <__assert_fail@plt+0x3b0>
   1154c:	bl	11148 <setuid@plt>
   11550:	cmp	r0, #0
   11554:	bne	11884 <__assert_fail@plt+0x6dc>
   11558:	mov	r1, r7
   1155c:	ldr	r0, [r7]
   11560:	bl	10f38 <execvp@plt>
   11564:	ldr	r4, [r5]
   11568:	mov	r2, #5
   1156c:	movw	r1, #28828	; 0x709c
   11570:	movt	r1, #1
   11574:	mov	r0, #0
   11578:	cmp	r4, #2
   1157c:	moveq	r5, #127	; 0x7f
   11580:	movne	r5, #126	; 0x7e
   11584:	bl	10f74 <dcgettext@plt>
   11588:	mov	r6, r0
   1158c:	ldr	r0, [r7]
   11590:	bl	143d4 <__assert_fail@plt+0x322c>
   11594:	mov	r3, r0
   11598:	mov	r2, r6
   1159c:	mov	r1, r4
   115a0:	mov	r0, #0
   115a4:	bl	11004 <error@plt>
   115a8:	mov	r0, r5
   115ac:	add	sp, sp, #44	; 0x2c
   115b0:	ldrd	r4, [sp]
   115b4:	ldrd	r6, [sp, #8]
   115b8:	ldrd	r8, [sp, #16]
   115bc:	ldrd	sl, [sp, #24]
   115c0:	add	sp, sp, #32
   115c4:	pop	{pc}		; (ldr pc, [sp], #4)
   115c8:	bl	10efc <getpwuid@plt>
   115cc:	subs	r4, r0, #0
   115d0:	ldr	r3, [sp, #24]
   115d4:	beq	11748 <__assert_fail@plt+0x5a0>
   115d8:	cmn	r3, #1
   115dc:	ldr	r5, [r4]
   115e0:	ldreq	r3, [r4, #12]
   115e4:	streq	r3, [sp, #24]
   115e8:	ldr	r2, [sp, #12]
   115ec:	mov	r3, #0
   115f0:	str	r3, [sp, #36]	; 0x24
   115f4:	ldr	r4, [sp, #28]
   115f8:	cmp	r2, r3
   115fc:	bne	114f8 <__assert_fail@plt+0x350>
   11600:	ldr	r1, [sp, #24]
   11604:	cmp	r5, #0
   11608:	cmnne	r1, #1
   1160c:	bne	117a4 <__assert_fail@plt+0x5fc>
   11610:	ldr	r3, [sp, #20]
   11614:	cmn	r3, #1
   11618:	beq	1151c <__assert_fail@plt+0x374>
   1161c:	b	11508 <__assert_fail@plt+0x360>
   11620:	add	r2, sp, #32
   11624:	add	r1, sp, #36	; 0x24
   11628:	ldr	r0, [sp, #12]
   1162c:	ldr	r3, [sp, #32]
   11630:	clz	r3, r3
   11634:	lsr	r3, r3, #5
   11638:	bl	11984 <__assert_fail@plt+0x7dc>
   1163c:	cmp	r0, #0
   11640:	beq	11728 <__assert_fail@plt+0x580>
   11644:	ldr	r3, [sp, #32]
   11648:	cmp	r3, #0
   1164c:	bne	11508 <__assert_fail@plt+0x360>
   11650:	mov	r5, #125	; 0x7d
   11654:	b	115a8 <__assert_fail@plt+0x400>
   11658:	mov	r5, #0
   1165c:	ldr	r3, [sp, #12]
   11660:	cmp	r3, #0
   11664:	bne	11468 <__assert_fail@plt+0x2c0>
   11668:	ldr	r1, [sp, #24]
   1166c:	cmn	r1, #1
   11670:	beq	11478 <__assert_fail@plt+0x2d0>
   11674:	cmp	r5, #0
   11678:	beq	117f8 <__assert_fail@plt+0x650>
   1167c:	add	r2, sp, #28
   11680:	mov	r0, r5
   11684:	bl	1523c <__assert_fail@plt+0x4094>
   11688:	cmp	r0, #0
   1168c:	strgt	r0, [sp, #32]
   11690:	b	11478 <__assert_fail@plt+0x2d0>
   11694:	mov	r0, r4
   11698:	bl	1101c <setgid@plt>
   1169c:	cmp	r0, #0
   116a0:	movwne	r1, #28780	; 0x706c
   116a4:	movtne	r1, #1
   116a8:	beq	11540 <__assert_fail@plt+0x398>
   116ac:	ldr	r4, [r5]
   116b0:	b	114ac <__assert_fail@plt+0x304>
   116b4:	movw	r0, #28656	; 0x6ff0
   116b8:	movt	r0, #1
   116bc:	bl	11010 <getenv@plt>
   116c0:	cmp	r0, #0
   116c4:	movw	r3, #28464	; 0x6f30
   116c8:	movt	r3, #1
   116cc:	mov	r2, #0
   116d0:	moveq	r0, r3
   116d4:	movw	r3, #28664	; 0x6ff8
   116d8:	movt	r3, #1
   116dc:	stm	r7, {r0, r3}
   116e0:	str	r2, [r7, #8]
   116e4:	b	113b0 <__assert_fail@plt+0x208>
   116e8:	bl	110a0 <__errno_location@plt>
   116ec:	ldr	r5, [r0]
   116f0:	mov	r2, #5
   116f4:	movw	r1, #28588	; 0x6fac
   116f8:	movt	r1, #1
   116fc:	mov	r0, #0
   11700:	bl	10f74 <dcgettext@plt>
   11704:	mov	r6, r0
   11708:	mov	r1, r4
   1170c:	mov	r0, #4
   11710:	bl	14120 <__assert_fail@plt+0x2f78>
   11714:	mov	r3, r0
   11718:	mov	r2, r6
   1171c:	mov	r1, r5
   11720:	mov	r0, #125	; 0x7d
   11724:	bl	11004 <error@plt>
   11728:	ldr	r4, [sp, #36]	; 0x24
   1172c:	b	11508 <__assert_fail@plt+0x360>
   11730:	mov	r3, #0
   11734:	add	r2, sp, #32
   11738:	ldr	r0, [sp, #12]
   1173c:	add	r1, sp, #28
   11740:	bl	11984 <__assert_fail@plt+0x7dc>
   11744:	b	11478 <__assert_fail@plt+0x2d0>
   11748:	cmn	r3, #1
   1174c:	bne	115e8 <__assert_fail@plt+0x440>
   11750:	bl	110a0 <__errno_location@plt>
   11754:	ldr	r5, [r0]
   11758:	mov	r2, #5
   1175c:	movw	r1, #28668	; 0x6ffc
   11760:	movt	r1, #1
   11764:	mov	r0, r4
   11768:	bl	10f74 <dcgettext@plt>
   1176c:	mov	r2, r0
   11770:	mov	r0, #125	; 0x7d
   11774:	ldr	r3, [sp, #20]
   11778:	mov	r1, r5
   1177c:	bl	11004 <error@plt>
   11780:	bl	10efc <getpwuid@plt>
   11784:	subs	r5, r0, #0
   11788:	beq	11464 <__assert_fail@plt+0x2bc>
   1178c:	ldr	r3, [sp, #24]
   11790:	cmn	r3, #1
   11794:	ldreq	r3, [r5, #12]
   11798:	ldr	r5, [r5]
   1179c:	streq	r3, [sp, #24]
   117a0:	b	1165c <__assert_fail@plt+0x4b4>
   117a4:	mov	r0, r5
   117a8:	add	r2, sp, #36	; 0x24
   117ac:	bl	1523c <__assert_fail@plt+0x4094>
   117b0:	cmp	r0, #0
   117b4:	ldrgt	r4, [sp, #36]	; 0x24
   117b8:	strgt	r0, [sp, #32]
   117bc:	bgt	11610 <__assert_fail@plt+0x468>
   117c0:	ldr	r3, [sp, #32]
   117c4:	cmp	r3, #0
   117c8:	bne	11610 <__assert_fail@plt+0x468>
   117cc:	bl	110a0 <__errno_location@plt>
   117d0:	movw	r1, #28708	; 0x7024
   117d4:	movt	r1, #1
   117d8:	ldr	r4, [r0]
   117dc:	b	114ac <__assert_fail@plt+0x304>
   117e0:	bl	10efc <getpwuid@plt>
   117e4:	subs	r5, r0, #0
   117e8:	bne	1178c <__assert_fail@plt+0x5e4>
   117ec:	ldr	r3, [sp, #24]
   117f0:	cmn	r3, #1
   117f4:	beq	11478 <__assert_fail@plt+0x2d0>
   117f8:	mov	r5, #0
   117fc:	b	11478 <__assert_fail@plt+0x2d0>
   11800:	mov	r2, #5
   11804:	movw	r1, #28516	; 0x6f64
   11808:	movt	r1, #1
   1180c:	mov	r0, r4
   11810:	bl	10f74 <dcgettext@plt>
   11814:	mov	r2, r0
   11818:	mov	r1, r4
   1181c:	mov	r0, r4
   11820:	bl	11004 <error@plt>
   11824:	mov	r0, #125	; 0x7d
   11828:	bl	11bd0 <__assert_fail@plt+0xa28>
   1182c:	bl	110a0 <__errno_location@plt>
   11830:	movw	r1, #28744	; 0x7048
   11834:	movt	r1, #1
   11838:	ldr	r4, [r0]
   1183c:	b	114ac <__assert_fail@plt+0x304>
   11840:	mov	r2, #5
   11844:	movw	r1, #28532	; 0x6f74
   11848:	movt	r1, #1
   1184c:	mov	r0, #0
   11850:	bl	10f74 <dcgettext@plt>
   11854:	mov	r4, r0
   11858:	movw	r1, #28048	; 0x6d90
   1185c:	movt	r1, #1
   11860:	mov	r0, #4
   11864:	bl	14120 <__assert_fail@plt+0x2f78>
   11868:	mov	r1, #0
   1186c:	mov	r3, r0
   11870:	mov	r2, r4
   11874:	mov	r0, r1
   11878:	bl	11004 <error@plt>
   1187c:	mov	r0, #125	; 0x7d
   11880:	bl	11bd0 <__assert_fail@plt+0xa28>
   11884:	movw	r1, #28804	; 0x7084
   11888:	movt	r1, #1
   1188c:	b	116ac <__assert_fail@plt+0x504>
   11890:	andeq	r6, r1, r0, lsl #23
   11894:	mov	fp, #0
   11898:	mov	lr, #0
   1189c:	pop	{r1}		; (ldr r1, [sp], #4)
   118a0:	mov	r2, sp
   118a4:	push	{r2}		; (str r2, [sp, #-4]!)
   118a8:	push	{r0}		; (str r0, [sp, #-4]!)
   118ac:	ldr	ip, [pc, #16]	; 118c4 <__assert_fail@plt+0x71c>
   118b0:	push	{ip}		; (str ip, [sp, #-4]!)
   118b4:	ldr	r0, [pc, #12]	; 118c8 <__assert_fail@plt+0x720>
   118b8:	ldr	r3, [pc, #12]	; 118cc <__assert_fail@plt+0x724>
   118bc:	bl	11034 <__libc_start_main@plt>
   118c0:	bl	11184 <abort@plt>
   118c4:	andeq	r6, r1, r0, lsr #22
   118c8:			; <UNDEFINED> instruction: 0x000111b4
   118cc:	andeq	r6, r1, r0, asr #21
   118d0:	ldr	r3, [pc, #20]	; 118ec <__assert_fail@plt+0x744>
   118d4:	ldr	r2, [pc, #20]	; 118f0 <__assert_fail@plt+0x748>
   118d8:	add	r3, pc, r3
   118dc:	ldr	r2, [r3, r2]
   118e0:	cmp	r2, #0
   118e4:	bxeq	lr
   118e8:	b	1104c <__gmon_start__@plt>
   118ec:	andeq	r6, r1, r0, lsr #14
   118f0:	andeq	r0, r0, ip, lsl #2
   118f4:	ldr	r0, [pc, #24]	; 11914 <__assert_fail@plt+0x76c>
   118f8:	ldr	r3, [pc, #24]	; 11918 <__assert_fail@plt+0x770>
   118fc:	cmp	r3, r0
   11900:	bxeq	lr
   11904:	ldr	r3, [pc, #16]	; 1191c <__assert_fail@plt+0x774>
   11908:	cmp	r3, #0
   1190c:	bxeq	lr
   11910:	bx	r3
   11914:	andeq	r8, r2, r0, ror #2
   11918:	andeq	r8, r2, r0, ror #2
   1191c:	andeq	r0, r0, r0
   11920:	ldr	r0, [pc, #36]	; 1194c <__assert_fail@plt+0x7a4>
   11924:	ldr	r1, [pc, #36]	; 11950 <__assert_fail@plt+0x7a8>
   11928:	sub	r1, r1, r0
   1192c:	asr	r1, r1, #2
   11930:	add	r1, r1, r1, lsr #31
   11934:	asrs	r1, r1, #1
   11938:	bxeq	lr
   1193c:	ldr	r3, [pc, #16]	; 11954 <__assert_fail@plt+0x7ac>
   11940:	cmp	r3, #0
   11944:	bxeq	lr
   11948:	bx	r3
   1194c:	andeq	r8, r2, r0, ror #2
   11950:	andeq	r8, r2, r0, ror #2
   11954:	andeq	r0, r0, r0
   11958:	push	{r4, lr}
   1195c:	ldr	r4, [pc, #24]	; 1197c <__assert_fail@plt+0x7d4>
   11960:	ldrb	r3, [r4]
   11964:	cmp	r3, #0
   11968:	popne	{r4, pc}
   1196c:	bl	118f4 <__assert_fail@plt+0x74c>
   11970:	mov	r3, #1
   11974:	strb	r3, [r4]
   11978:	pop	{r4, pc}
   1197c:	andeq	r8, r2, ip, ror r1
   11980:	b	11920 <__assert_fail@plt+0x778>
   11984:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11988:	strd	r6, [sp, #8]
   1198c:	mov	r6, #0
   11990:	strd	r8, [sp, #16]
   11994:	strd	sl, [sp, #24]
   11998:	str	lr, [sp, #32]
   1199c:	sub	sp, sp, #60	; 0x3c
   119a0:	str	r1, [sp, #12]
   119a4:	str	r3, [sp, #20]
   119a8:	str	r2, [sp, #24]
   119ac:	str	r0, [sp, #28]
   119b0:	str	r6, [sp, #44]	; 0x2c
   119b4:	bl	151d0 <__assert_fail@plt+0x4028>
   119b8:	movw	r1, #27616	; 0x6be0
   119bc:	movt	r1, #1
   119c0:	str	r0, [sp, #16]
   119c4:	bl	1110c <strtok@plt>
   119c8:	subs	r4, r0, #0
   119cc:	beq	11b80 <__assert_fail@plt+0x9d8>
   119d0:	movw	r7, #28224	; 0x6e40
   119d4:	movt	r7, #1
   119d8:	movw	fp, #27620	; 0x6be4
   119dc:	movt	fp, #1
   119e0:	movw	r9, #27616	; 0x6be0
   119e4:	movt	r9, #1
   119e8:	mov	r5, r6
   119ec:	mov	r8, r6
   119f0:	add	r3, sp, #48	; 0x30
   119f4:	mov	r2, #10
   119f8:	str	r7, [sp]
   119fc:	mov	r1, #0
   11a00:	mov	r0, r4
   11a04:	bl	15778 <__assert_fail@plt+0x45d0>
   11a08:	cmp	r0, #0
   11a0c:	bne	11a28 <__assert_fail@plt+0x880>
   11a10:	ldrd	r2, [sp, #48]	; 0x30
   11a14:	mov	r1, #0
   11a18:	mvn	r0, #0
   11a1c:	cmp	r3, r1
   11a20:	cmpeq	r2, r0
   11a24:	bls	11ad8 <__assert_fail@plt+0x930>
   11a28:	mov	r0, r4
   11a2c:	bl	1119c <getgrnam@plt>
   11a30:	subs	sl, r0, #0
   11a34:	beq	11a98 <__assert_fail@plt+0x8f0>
   11a38:	ldr	r3, [sl, #8]
   11a3c:	mov	r2, #0
   11a40:	str	r3, [sp, #48]	; 0x30
   11a44:	str	r2, [sp, #52]	; 0x34
   11a48:	ldr	r3, [sp, #44]	; 0x2c
   11a4c:	cmp	r3, r5
   11a50:	beq	11b1c <__assert_fail@plt+0x974>
   11a54:	ldr	r3, [sp, #48]	; 0x30
   11a58:	str	r3, [r8, r5, lsl #2]
   11a5c:	add	r5, r5, #1
   11a60:	mov	r1, r9
   11a64:	mov	r0, #0
   11a68:	bl	1110c <strtok@plt>
   11a6c:	subs	r4, r0, #0
   11a70:	bne	119f0 <__assert_fail@plt+0x848>
   11a74:	orrs	r3, r5, r6
   11a78:	beq	11b7c <__assert_fail@plt+0x9d4>
   11a7c:	ldr	r3, [sp, #12]
   11a80:	cmp	r6, #0
   11a84:	mvnne	r6, #0
   11a88:	str	r8, [r3]
   11a8c:	ldreq	r3, [sp, #24]
   11a90:	streq	r5, [r3]
   11a94:	b	11ab0 <__assert_fail@plt+0x908>
   11a98:	ldr	r3, [sp, #20]
   11a9c:	cmp	r3, #0
   11aa0:	bne	11b34 <__assert_fail@plt+0x98c>
   11aa4:	ldr	r3, [sp, #12]
   11aa8:	mvn	r6, #0
   11aac:	str	r8, [r3]
   11ab0:	ldr	r0, [sp, #16]
   11ab4:	bl	12084 <__assert_fail@plt+0xedc>
   11ab8:	mov	r0, r6
   11abc:	add	sp, sp, #60	; 0x3c
   11ac0:	ldrd	r4, [sp]
   11ac4:	ldrd	r6, [sp, #8]
   11ac8:	ldrd	r8, [sp, #16]
   11acc:	ldrd	sl, [sp, #24]
   11ad0:	add	sp, sp, #32
   11ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ad8:	bl	11064 <__ctype_b_loc@plt>
   11adc:	ldr	r1, [r0]
   11ae0:	mov	r0, r4
   11ae4:	ldrb	r2, [r4], #1
   11ae8:	lsl	r3, r2, #1
   11aec:	ldrh	sl, [r1, r3]
   11af0:	ands	sl, sl, #8192	; 0x2000
   11af4:	bne	11ae0 <__assert_fail@plt+0x938>
   11af8:	cmp	r2, #43	; 0x2b
   11afc:	beq	11a48 <__assert_fail@plt+0x8a0>
   11b00:	bl	1119c <getgrnam@plt>
   11b04:	cmp	r0, #0
   11b08:	beq	11a48 <__assert_fail@plt+0x8a0>
   11b0c:	ldr	r3, [r0, #8]
   11b10:	str	r3, [sp, #48]	; 0x30
   11b14:	str	sl, [sp, #52]	; 0x34
   11b18:	b	11a48 <__assert_fail@plt+0x8a0>
   11b1c:	mov	r0, r8
   11b20:	mov	r2, #4
   11b24:	add	r1, sp, #44	; 0x2c
   11b28:	bl	14f08 <__assert_fail@plt+0x3d60>
   11b2c:	mov	r8, r0
   11b30:	b	11a54 <__assert_fail@plt+0x8ac>
   11b34:	bl	110a0 <__errno_location@plt>
   11b38:	ldr	r3, [r0]
   11b3c:	mov	r1, fp
   11b40:	mov	r2, #5
   11b44:	mov	r0, sl
   11b48:	mvn	r6, #0
   11b4c:	str	r3, [sp, #32]
   11b50:	bl	10f74 <dcgettext@plt>
   11b54:	mov	r2, r0
   11b58:	mov	r0, r4
   11b5c:	str	r2, [sp, #36]	; 0x24
   11b60:	bl	143d4 <__assert_fail@plt+0x322c>
   11b64:	mov	r3, r0
   11b68:	mov	r0, sl
   11b6c:	ldr	r1, [sp, #32]
   11b70:	ldr	r2, [sp, #36]	; 0x24
   11b74:	bl	11004 <error@plt>
   11b78:	b	11a60 <__assert_fail@plt+0x8b8>
   11b7c:	mov	r4, r8
   11b80:	ldr	r3, [sp, #20]
   11b84:	cmp	r3, #0
   11b88:	beq	11bc0 <__assert_fail@plt+0xa18>
   11b8c:	mov	r2, #5
   11b90:	movw	r1, #27640	; 0x6bf8
   11b94:	movt	r1, #1
   11b98:	mov	r0, #0
   11b9c:	bl	10f74 <dcgettext@plt>
   11ba0:	mov	r5, r0
   11ba4:	ldr	r0, [sp, #28]
   11ba8:	bl	143d4 <__assert_fail@plt+0x322c>
   11bac:	mov	r1, #0
   11bb0:	mov	r3, r0
   11bb4:	mov	r2, r5
   11bb8:	mov	r0, r1
   11bbc:	bl	11004 <error@plt>
   11bc0:	ldr	r3, [sp, #12]
   11bc4:	mvn	r6, #0
   11bc8:	str	r4, [r3]
   11bcc:	b	11ab0 <__assert_fail@plt+0x908>
   11bd0:	subs	r6, r0, #0
   11bd4:	str	r7, [sp, #-8]!
   11bd8:	str	lr, [sp, #4]
   11bdc:	sub	sp, sp, #56	; 0x38
   11be0:	beq	11c28 <__assert_fail@plt+0xa80>
   11be4:	movw	r3, #33136	; 0x8170
   11be8:	movt	r3, #2
   11bec:	ldr	r4, [r3]
   11bf0:	mov	r2, #5
   11bf4:	movw	r1, #27672	; 0x6c18
   11bf8:	movt	r1, #1
   11bfc:	mov	r0, #0
   11c00:	bl	10f74 <dcgettext@plt>
   11c04:	movw	r3, #33160	; 0x8188
   11c08:	movt	r3, #2
   11c0c:	mov	r2, r0
   11c10:	mov	r1, #1
   11c14:	ldr	r3, [r3]
   11c18:	mov	r0, r4
   11c1c:	bl	110e8 <__fprintf_chk@plt>
   11c20:	mov	r0, r6
   11c24:	bl	11070 <exit@plt>
   11c28:	mov	r2, #5
   11c2c:	movw	r1, #27712	; 0x6c40
   11c30:	movt	r1, #1
   11c34:	movw	r7, #33140	; 0x8174
   11c38:	movt	r7, #2
   11c3c:	bl	10f74 <dcgettext@plt>
   11c40:	movw	r3, #33160	; 0x8188
   11c44:	movt	r3, #2
   11c48:	ldr	r3, [r3]
   11c4c:	mov	r1, r0
   11c50:	mov	r0, #1
   11c54:	mov	r2, r3
   11c58:	bl	110d0 <__printf_chk@plt>
   11c5c:	mov	r2, #5
   11c60:	movw	r1, #27776	; 0x6c80
   11c64:	movt	r1, #1
   11c68:	mov	r0, r6
   11c6c:	bl	10f74 <dcgettext@plt>
   11c70:	ldr	r1, [r7]
   11c74:	bl	10ecc <fputs_unlocked@plt>
   11c78:	mov	r2, #5
   11c7c:	movw	r1, #27828	; 0x6cb4
   11c80:	movt	r1, #1
   11c84:	mov	r0, r6
   11c88:	bl	10f74 <dcgettext@plt>
   11c8c:	ldr	r1, [r7]
   11c90:	bl	10ecc <fputs_unlocked@plt>
   11c94:	mov	r2, #5
   11c98:	movw	r1, #27904	; 0x6d00
   11c9c:	movt	r1, #1
   11ca0:	mov	r0, r6
   11ca4:	bl	10f74 <dcgettext@plt>
   11ca8:	ldr	r1, [r7]
   11cac:	bl	10ecc <fputs_unlocked@plt>
   11cb0:	mov	r2, #5
   11cb4:	movw	r1, #27980	; 0x6d4c
   11cb8:	movt	r1, #1
   11cbc:	mov	r0, r6
   11cc0:	bl	10f74 <dcgettext@plt>
   11cc4:	mov	r4, r0
   11cc8:	movw	r1, #28048	; 0x6d90
   11ccc:	movt	r1, #1
   11cd0:	mov	r0, #4
   11cd4:	bl	14120 <__assert_fail@plt+0x2f78>
   11cd8:	mov	r2, r0
   11cdc:	mov	r1, r4
   11ce0:	mov	r0, #1
   11ce4:	bl	110d0 <__printf_chk@plt>
   11ce8:	mov	r2, #5
   11cec:	movw	r1, #28052	; 0x6d94
   11cf0:	movt	r1, #1
   11cf4:	mov	r0, r6
   11cf8:	bl	10f74 <dcgettext@plt>
   11cfc:	ldr	r1, [r7]
   11d00:	bl	10ecc <fputs_unlocked@plt>
   11d04:	mov	r2, #5
   11d08:	movw	r1, #28100	; 0x6dc4
   11d0c:	movt	r1, #1
   11d10:	mov	r0, r6
   11d14:	bl	10f74 <dcgettext@plt>
   11d18:	ldr	r1, [r7]
   11d1c:	bl	10ecc <fputs_unlocked@plt>
   11d20:	mov	r2, #5
   11d24:	movw	r1, #28156	; 0x6dfc
   11d28:	movt	r1, #1
   11d2c:	mov	r0, r6
   11d30:	bl	10f74 <dcgettext@plt>
   11d34:	ldr	r1, [r7]
   11d38:	bl	10ecc <fputs_unlocked@plt>
   11d3c:	movw	lr, #27464	; 0x6b48
   11d40:	movt	lr, #1
   11d44:	ldr	ip, [lr]
   11d48:	ldr	r4, [lr, #4]
   11d4c:	ldrd	r8, [lr, #8]
   11d50:	subs	r1, ip, #0
   11d54:	str	ip, [sp]
   11d58:	ldrd	r2, [lr, #16]
   11d5c:	str	r4, [sp, #4]
   11d60:	ldrd	r4, [lr, #24]
   11d64:	strd	r8, [sp, #8]
   11d68:	ldrd	r8, [lr, #32]
   11d6c:	strd	r2, [sp, #16]
   11d70:	ldrd	r2, [lr, #40]	; 0x28
   11d74:	strd	r4, [sp, #24]
   11d78:	ldrd	r4, [lr, #48]	; 0x30
   11d7c:	strd	r8, [sp, #32]
   11d80:	strd	r2, [sp, #40]	; 0x28
   11d84:	strd	r4, [sp, #48]	; 0x30
   11d88:	movwne	r5, #27664	; 0x6c10
   11d8c:	mov	r4, sp
   11d90:	movtne	r5, #1
   11d94:	bne	11e8c <__assert_fail@plt+0xce4>
   11d98:	ldr	r4, [r4, #4]
   11d9c:	movw	r1, #28228	; 0x6e44
   11da0:	movt	r1, #1
   11da4:	mov	r2, #5
   11da8:	cmp	r4, #0
   11dac:	beq	11ea0 <__assert_fail@plt+0xcf8>
   11db0:	mov	r0, #0
   11db4:	bl	10f74 <dcgettext@plt>
   11db8:	mov	r1, r0
   11dbc:	movw	r3, #28252	; 0x6e5c
   11dc0:	movt	r3, #1
   11dc4:	movw	r2, #28292	; 0x6e84
   11dc8:	movt	r2, #1
   11dcc:	mov	r0, #1
   11dd0:	bl	110d0 <__printf_chk@plt>
   11dd4:	mov	r1, #0
   11dd8:	mov	r0, #5
   11ddc:	bl	11118 <setlocale@plt>
   11de0:	cmp	r0, #0
   11de4:	movweq	r5, #27664	; 0x6c10
   11de8:	movteq	r5, #1
   11dec:	beq	11e10 <__assert_fail@plt+0xc68>
   11df0:	movw	r1, #28308	; 0x6e94
   11df4:	movt	r1, #1
   11df8:	mov	r2, #3
   11dfc:	movw	r5, #27664	; 0x6c10
   11e00:	movt	r5, #1
   11e04:	bl	11178 <strncmp@plt>
   11e08:	cmp	r0, #0
   11e0c:	bne	11f58 <__assert_fail@plt+0xdb0>
   11e10:	mov	r2, #5
   11e14:	movw	r1, #28384	; 0x6ee0
   11e18:	movt	r1, #1
   11e1c:	mov	r0, #0
   11e20:	bl	10f74 <dcgettext@plt>
   11e24:	mov	r1, r0
   11e28:	movw	r3, #27664	; 0x6c10
   11e2c:	movt	r3, #1
   11e30:	movw	r2, #28252	; 0x6e5c
   11e34:	movt	r2, #1
   11e38:	mov	r0, #1
   11e3c:	bl	110d0 <__printf_chk@plt>
   11e40:	mov	r2, #5
   11e44:	movw	r1, #28412	; 0x6efc
   11e48:	movt	r1, #1
   11e4c:	mov	r0, #0
   11e50:	bl	10f74 <dcgettext@plt>
   11e54:	movw	r2, #28864	; 0x70c0
   11e58:	movt	r2, #1
   11e5c:	cmp	r4, r5
   11e60:	movw	r3, #28224	; 0x6e40
   11e64:	movt	r3, #1
   11e68:	mov	r1, r0
   11e6c:	moveq	r3, r2
   11e70:	mov	r2, r4
   11e74:	mov	r0, #1
   11e78:	bl	110d0 <__printf_chk@plt>
   11e7c:	b	11c20 <__assert_fail@plt+0xa78>
   11e80:	ldr	r1, [r4, #8]!
   11e84:	cmp	r1, #0
   11e88:	beq	11d98 <__assert_fail@plt+0xbf0>
   11e8c:	mov	r0, r5
   11e90:	bl	10ef0 <strcmp@plt>
   11e94:	cmp	r0, #0
   11e98:	bne	11e80 <__assert_fail@plt+0xcd8>
   11e9c:	b	11d98 <__assert_fail@plt+0xbf0>
   11ea0:	mov	r0, r4
   11ea4:	bl	10f74 <dcgettext@plt>
   11ea8:	mov	r1, r0
   11eac:	movw	r3, #28252	; 0x6e5c
   11eb0:	movt	r3, #1
   11eb4:	movw	r2, #28292	; 0x6e84
   11eb8:	movt	r2, #1
   11ebc:	mov	r0, #1
   11ec0:	bl	110d0 <__printf_chk@plt>
   11ec4:	mov	r1, r4
   11ec8:	mov	r0, #5
   11ecc:	bl	11118 <setlocale@plt>
   11ed0:	cmp	r0, #0
   11ed4:	beq	11ef0 <__assert_fail@plt+0xd48>
   11ed8:	movw	r1, #28308	; 0x6e94
   11edc:	movt	r1, #1
   11ee0:	mov	r2, #3
   11ee4:	bl	11178 <strncmp@plt>
   11ee8:	cmp	r0, #0
   11eec:	bne	11f4c <__assert_fail@plt+0xda4>
   11ef0:	mov	r2, #5
   11ef4:	movw	r1, #28384	; 0x6ee0
   11ef8:	movt	r1, #1
   11efc:	mov	r0, #0
   11f00:	bl	10f74 <dcgettext@plt>
   11f04:	mov	r1, r0
   11f08:	movw	r3, #27664	; 0x6c10
   11f0c:	movt	r3, #1
   11f10:	movw	r2, #28252	; 0x6e5c
   11f14:	movt	r2, #1
   11f18:	mov	r0, #1
   11f1c:	bl	110d0 <__printf_chk@plt>
   11f20:	movw	r1, #28412	; 0x6efc
   11f24:	movt	r1, #1
   11f28:	mov	r2, #5
   11f2c:	mov	r0, #0
   11f30:	bl	10f74 <dcgettext@plt>
   11f34:	movw	r4, #27664	; 0x6c10
   11f38:	movt	r4, #1
   11f3c:	movw	r3, #28864	; 0x70c0
   11f40:	movt	r3, #1
   11f44:	mov	r1, r0
   11f48:	b	11e70 <__assert_fail@plt+0xcc8>
   11f4c:	movw	r5, #27664	; 0x6c10
   11f50:	movt	r5, #1
   11f54:	mov	r4, r5
   11f58:	mov	r2, #5
   11f5c:	movw	r1, #28312	; 0x6e98
   11f60:	movt	r1, #1
   11f64:	mov	r0, #0
   11f68:	bl	10f74 <dcgettext@plt>
   11f6c:	ldr	r1, [r7]
   11f70:	bl	10ecc <fputs_unlocked@plt>
   11f74:	b	11e10 <__assert_fail@plt+0xc68>
   11f78:	movw	r3, #33152	; 0x8180
   11f7c:	movt	r3, #2
   11f80:	str	r0, [r3]
   11f84:	bx	lr
   11f88:	movw	r3, #33152	; 0x8180
   11f8c:	movt	r3, #2
   11f90:	strb	r0, [r3, #4]
   11f94:	bx	lr
   11f98:	movw	r3, #33140	; 0x8174
   11f9c:	movt	r3, #2
   11fa0:	strd	r4, [sp, #-16]!
   11fa4:	ldr	r0, [r3]
   11fa8:	str	r6, [sp, #8]
   11fac:	str	lr, [sp, #12]
   11fb0:	sub	sp, sp, #8
   11fb4:	bl	16228 <__assert_fail@plt+0x5080>
   11fb8:	cmp	r0, #0
   11fbc:	beq	11fe8 <__assert_fail@plt+0xe40>
   11fc0:	movw	r4, #33152	; 0x8180
   11fc4:	movt	r4, #2
   11fc8:	ldrb	r6, [r4, #4]
   11fcc:	bl	110a0 <__errno_location@plt>
   11fd0:	mov	r5, r0
   11fd4:	cmp	r6, #0
   11fd8:	beq	12014 <__assert_fail@plt+0xe6c>
   11fdc:	ldr	r3, [r0]
   11fe0:	cmp	r3, #32
   11fe4:	bne	12014 <__assert_fail@plt+0xe6c>
   11fe8:	movw	r3, #33136	; 0x8170
   11fec:	movt	r3, #2
   11ff0:	ldr	r0, [r3]
   11ff4:	bl	16228 <__assert_fail@plt+0x5080>
   11ff8:	cmp	r0, #0
   11ffc:	bne	1205c <__assert_fail@plt+0xeb4>
   12000:	add	sp, sp, #8
   12004:	ldrd	r4, [sp]
   12008:	ldr	r6, [sp, #8]
   1200c:	add	sp, sp, #12
   12010:	pop	{pc}		; (ldr pc, [sp], #4)
   12014:	movw	r1, #29028	; 0x7164
   12018:	movt	r1, #1
   1201c:	mov	r2, #5
   12020:	mov	r0, #0
   12024:	bl	10f74 <dcgettext@plt>
   12028:	mov	r6, r0
   1202c:	ldr	r0, [r4]
   12030:	cmp	r0, #0
   12034:	beq	1206c <__assert_fail@plt+0xec4>
   12038:	ldr	r4, [r5]
   1203c:	bl	141e8 <__assert_fail@plt+0x3040>
   12040:	mov	r3, r0
   12044:	movw	r2, #29040	; 0x7170
   12048:	movt	r2, #1
   1204c:	mov	r0, #0
   12050:	str	r6, [sp]
   12054:	mov	r1, r4
   12058:	bl	11004 <error@plt>
   1205c:	movw	r3, #33052	; 0x811c
   12060:	movt	r3, #2
   12064:	ldr	r0, [r3]
   12068:	bl	10f20 <_exit@plt>
   1206c:	mov	r3, r6
   12070:	movw	r2, #29044	; 0x7174
   12074:	movt	r2, #1
   12078:	ldr	r1, [r5]
   1207c:	bl	11004 <error@plt>
   12080:	b	1205c <__assert_fail@plt+0xeb4>
   12084:	strd	r4, [sp, #-12]!
   12088:	mov	r5, r0
   1208c:	str	lr, [sp, #8]
   12090:	sub	sp, sp, #12
   12094:	bl	110a0 <__errno_location@plt>
   12098:	mov	r4, r0
   1209c:	mov	r2, #0
   120a0:	ldr	r3, [r4]
   120a4:	mov	r0, r5
   120a8:	str	r2, [r4]
   120ac:	str	r3, [sp]
   120b0:	str	r3, [sp, #4]
   120b4:	bl	10f14 <free@plt>
   120b8:	ldr	r3, [r4]
   120bc:	add	r2, sp, #8
   120c0:	clz	r3, r3
   120c4:	lsr	r3, r3, #5
   120c8:	add	r3, r2, r3, lsl #2
   120cc:	ldr	r3, [r3, #-8]
   120d0:	str	r3, [r4]
   120d4:	add	sp, sp, #12
   120d8:	ldrd	r4, [sp]
   120dc:	add	sp, sp, #8
   120e0:	pop	{pc}		; (ldr pc, [sp], #4)
   120e4:	strd	r4, [sp, #-16]!
   120e8:	subs	r4, r0, #0
   120ec:	str	r6, [sp, #8]
   120f0:	str	lr, [sp, #12]
   120f4:	beq	1218c <__assert_fail@plt+0xfe4>
   120f8:	mov	r1, #47	; 0x2f
   120fc:	bl	11130 <strrchr@plt>
   12100:	subs	r5, r0, #0
   12104:	beq	12164 <__assert_fail@plt+0xfbc>
   12108:	add	r6, r5, #1
   1210c:	sub	r3, r6, r4
   12110:	cmp	r3, #6
   12114:	ble	12164 <__assert_fail@plt+0xfbc>
   12118:	movw	r1, #29104	; 0x71b0
   1211c:	movt	r1, #1
   12120:	mov	r2, #7
   12124:	sub	r0, r5, #6
   12128:	bl	11178 <strncmp@plt>
   1212c:	cmp	r0, #0
   12130:	bne	12164 <__assert_fail@plt+0xfbc>
   12134:	movw	r1, #29112	; 0x71b8
   12138:	movt	r1, #1
   1213c:	mov	r2, #3
   12140:	mov	r0, r6
   12144:	bl	11178 <strncmp@plt>
   12148:	cmp	r0, #0
   1214c:	movne	r4, r6
   12150:	bne	12164 <__assert_fail@plt+0xfbc>
   12154:	add	r4, r5, #4
   12158:	movw	r3, #33120	; 0x8160
   1215c:	movt	r3, #2
   12160:	str	r4, [r3]
   12164:	movw	r2, #33160	; 0x8188
   12168:	movt	r2, #2
   1216c:	ldr	r6, [sp, #8]
   12170:	movw	r3, #33124	; 0x8164
   12174:	movt	r3, #2
   12178:	str	r4, [r2]
   1217c:	str	r4, [r3]
   12180:	ldrd	r4, [sp]
   12184:	add	sp, sp, #12
   12188:	pop	{pc}		; (ldr pc, [sp], #4)
   1218c:	movw	r3, #33136	; 0x8170
   12190:	movt	r3, #2
   12194:	movw	r0, #29048	; 0x7178
   12198:	movt	r0, #1
   1219c:	ldr	r3, [r3]
   121a0:	mov	r2, #55	; 0x37
   121a4:	mov	r1, #1
   121a8:	bl	10fbc <fwrite@plt>
   121ac:	bl	11184 <abort@plt>
   121b0:	strd	r4, [sp, #-16]!
   121b4:	mov	r4, #0
   121b8:	mov	r5, #0
   121bc:	cmp	r1, #10
   121c0:	str	r6, [sp, #8]
   121c4:	strd	r4, [r0]
   121c8:	strd	r4, [r0, #8]
   121cc:	str	lr, [sp, #12]
   121d0:	strd	r4, [r0, #16]
   121d4:	strd	r4, [r0, #24]
   121d8:	strd	r4, [r0, #32]
   121dc:	strd	r4, [r0, #40]	; 0x28
   121e0:	beq	121f8 <__assert_fail@plt+0x1050>
   121e4:	ldrd	r4, [sp]
   121e8:	str	r1, [r0]
   121ec:	ldr	r6, [sp, #8]
   121f0:	add	sp, sp, #12
   121f4:	pop	{pc}		; (ldr pc, [sp], #4)
   121f8:	bl	11184 <abort@plt>
   121fc:	mov	r2, #5
   12200:	strd	r4, [sp, #-16]!
   12204:	mov	r5, r0
   12208:	str	r6, [sp, #8]
   1220c:	mov	r6, r1
   12210:	mov	r1, r0
   12214:	mov	r0, #0
   12218:	str	lr, [sp, #12]
   1221c:	bl	10f74 <dcgettext@plt>
   12220:	cmp	r5, r0
   12224:	mov	r4, r0
   12228:	beq	12240 <__assert_fail@plt+0x1098>
   1222c:	mov	r0, r4
   12230:	ldrd	r4, [sp]
   12234:	ldr	r6, [sp, #8]
   12238:	add	sp, sp, #12
   1223c:	pop	{pc}		; (ldr pc, [sp], #4)
   12240:	bl	1650c <__assert_fail@plt+0x5364>
   12244:	ldrb	r3, [r0]
   12248:	bic	r3, r3, #32
   1224c:	cmp	r3, #85	; 0x55
   12250:	bne	122b8 <__assert_fail@plt+0x1110>
   12254:	ldrb	r3, [r0, #1]
   12258:	bic	r3, r3, #32
   1225c:	cmp	r3, #84	; 0x54
   12260:	bne	12338 <__assert_fail@plt+0x1190>
   12264:	ldrb	r3, [r0, #2]
   12268:	bic	r3, r3, #32
   1226c:	cmp	r3, #70	; 0x46
   12270:	bne	12338 <__assert_fail@plt+0x1190>
   12274:	ldrb	r3, [r0, #3]
   12278:	cmp	r3, #45	; 0x2d
   1227c:	bne	12338 <__assert_fail@plt+0x1190>
   12280:	ldrb	r3, [r0, #4]
   12284:	cmp	r3, #56	; 0x38
   12288:	bne	12338 <__assert_fail@plt+0x1190>
   1228c:	ldrb	r3, [r0, #5]
   12290:	cmp	r3, #0
   12294:	bne	12338 <__assert_fail@plt+0x1190>
   12298:	ldrb	r2, [r4]
   1229c:	movw	r3, #29204	; 0x7214
   122a0:	movt	r3, #1
   122a4:	movw	r4, #29216	; 0x7220
   122a8:	movt	r4, #1
   122ac:	cmp	r2, #96	; 0x60
   122b0:	movne	r4, r3
   122b4:	b	1222c <__assert_fail@plt+0x1084>
   122b8:	cmp	r3, #71	; 0x47
   122bc:	bne	12338 <__assert_fail@plt+0x1190>
   122c0:	ldrb	r3, [r0, #1]
   122c4:	bic	r3, r3, #32
   122c8:	cmp	r3, #66	; 0x42
   122cc:	bne	12338 <__assert_fail@plt+0x1190>
   122d0:	ldrb	r3, [r0, #2]
   122d4:	cmp	r3, #49	; 0x31
   122d8:	bne	12338 <__assert_fail@plt+0x1190>
   122dc:	ldrb	r3, [r0, #3]
   122e0:	cmp	r3, #56	; 0x38
   122e4:	bne	12338 <__assert_fail@plt+0x1190>
   122e8:	ldrb	r3, [r0, #4]
   122ec:	cmp	r3, #48	; 0x30
   122f0:	bne	12338 <__assert_fail@plt+0x1190>
   122f4:	ldrb	r3, [r0, #5]
   122f8:	cmp	r3, #51	; 0x33
   122fc:	bne	12338 <__assert_fail@plt+0x1190>
   12300:	ldrb	r3, [r0, #6]
   12304:	cmp	r3, #48	; 0x30
   12308:	bne	12338 <__assert_fail@plt+0x1190>
   1230c:	ldrb	r3, [r0, #7]
   12310:	cmp	r3, #0
   12314:	bne	12338 <__assert_fail@plt+0x1190>
   12318:	ldrb	r2, [r4]
   1231c:	movw	r3, #29208	; 0x7218
   12320:	movt	r3, #1
   12324:	movw	r4, #29212	; 0x721c
   12328:	movt	r4, #1
   1232c:	cmp	r2, #96	; 0x60
   12330:	movne	r4, r3
   12334:	b	1222c <__assert_fail@plt+0x1084>
   12338:	movw	r3, #29220	; 0x7224
   1233c:	movt	r3, #1
   12340:	cmp	r6, #9
   12344:	movw	r4, #29200	; 0x7210
   12348:	movt	r4, #1
   1234c:	movne	r4, r3
   12350:	b	1222c <__assert_fail@plt+0x1084>
   12354:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12358:	strd	r6, [sp, #8]
   1235c:	strd	r8, [sp, #16]
   12360:	strd	sl, [sp, #24]
   12364:	mov	fp, r0
   12368:	mov	sl, r1
   1236c:	str	lr, [sp, #32]
   12370:	sub	sp, sp, #116	; 0x74
   12374:	ldr	r8, [sp, #152]	; 0x98
   12378:	str	r3, [sp, #28]
   1237c:	ldr	r3, [sp, #156]	; 0x9c
   12380:	str	r2, [sp, #32]
   12384:	and	r4, r3, #2
   12388:	ubfx	r3, r3, #1, #1
   1238c:	str	r3, [sp, #44]	; 0x2c
   12390:	bl	10fd4 <__ctype_get_mb_cur_max@plt>
   12394:	str	r0, [sp, #64]	; 0x40
   12398:	cmp	r8, #10
   1239c:	ldrls	pc, [pc, r8, lsl #2]
   123a0:	b	13b10 <__assert_fail@plt+0x2968>
   123a4:	andeq	r2, r1, r8, lsr #15
   123a8:	andeq	r2, r1, r4, asr #16
   123ac:	andeq	r2, r1, r0, lsr #28
   123b0:	andeq	r2, r1, r4, ror #16
   123b4:	andeq	r2, r1, ip, lsl #14
   123b8:	andeq	r2, r1, r8, asr r7
   123bc:	ldrdeq	r2, [r1], -r8
   123c0:	andeq	r2, r1, r4, lsl r8
   123c4:	ldrdeq	r2, [r1], -r0
   123c8:	ldrdeq	r2, [r1], -r0
   123cc:	ldrdeq	r2, [r1], -r0
   123d0:	cmp	r8, #10
   123d4:	beq	12400 <__assert_fail@plt+0x1258>
   123d8:	mov	r1, r8
   123dc:	movw	r0, #29224	; 0x7228
   123e0:	movt	r0, #1
   123e4:	bl	121fc <__assert_fail@plt+0x1054>
   123e8:	mov	r1, r8
   123ec:	str	r0, [sp, #164]	; 0xa4
   123f0:	movw	r0, #29220	; 0x7224
   123f4:	movt	r0, #1
   123f8:	bl	121fc <__assert_fail@plt+0x1054>
   123fc:	str	r0, [sp, #168]	; 0xa8
   12400:	cmp	r4, #0
   12404:	movne	r4, #0
   12408:	beq	137ec <__assert_fail@plt+0x2644>
   1240c:	mov	r3, #1
   12410:	mov	r5, #0
   12414:	ldr	r0, [sp, #168]	; 0xa8
   12418:	str	r3, [sp, #36]	; 0x24
   1241c:	str	r3, [sp, #40]	; 0x28
   12420:	str	r5, [sp, #68]	; 0x44
   12424:	bl	11088 <strlen@plt>
   12428:	ldr	r3, [sp, #168]	; 0xa8
   1242c:	str	r5, [sp, #48]	; 0x30
   12430:	str	r0, [sp, #56]	; 0x38
   12434:	str	r3, [sp, #60]	; 0x3c
   12438:	str	r5, [sp, #72]	; 0x48
   1243c:	str	r8, [sp, #152]	; 0x98
   12440:	mov	r8, fp
   12444:	mov	r9, #0
   12448:	ldr	fp, [sp, #152]	; 0x98
   1244c:	ldr	r3, [sp, #28]
   12450:	cmn	r3, #1
   12454:	beq	129b4 <__assert_fail@plt+0x180c>
   12458:	ldr	r3, [sp, #28]
   1245c:	subs	r6, r3, r9
   12460:	movne	r6, #1
   12464:	cmp	r6, #0
   12468:	beq	129cc <__assert_fail@plt+0x1824>
   1246c:	ldr	r0, [sp, #32]
   12470:	ldr	r7, [sp, #40]	; 0x28
   12474:	add	r3, r0, r9
   12478:	cmp	fp, #2
   1247c:	moveq	r7, #0
   12480:	andne	r7, r7, #1
   12484:	str	r3, [sp, #52]	; 0x34
   12488:	cmp	r7, #0
   1248c:	beq	12e68 <__assert_fail@plt+0x1cc0>
   12490:	ldr	r2, [sp, #56]	; 0x38
   12494:	cmp	r2, #0
   12498:	beq	13104 <__assert_fail@plt+0x1f5c>
   1249c:	ldr	r1, [sp, #28]
   124a0:	cmp	r2, #1
   124a4:	mov	r3, r2
   124a8:	movls	r3, #0
   124ac:	movhi	r3, #1
   124b0:	add	r5, r9, r2
   124b4:	cmn	r1, #1
   124b8:	movne	r3, #0
   124bc:	cmp	r3, #0
   124c0:	beq	124cc <__assert_fail@plt+0x1324>
   124c4:	bl	11088 <strlen@plt>
   124c8:	str	r0, [sp, #28]
   124cc:	ldr	r3, [sp, #28]
   124d0:	cmp	r5, r3
   124d4:	bhi	13104 <__assert_fail@plt+0x1f5c>
   124d8:	ldr	r0, [sp, #52]	; 0x34
   124dc:	ldr	r2, [sp, #56]	; 0x38
   124e0:	ldr	r1, [sp, #60]	; 0x3c
   124e4:	bl	10f5c <memcmp@plt>
   124e8:	cmp	r0, #0
   124ec:	bne	13104 <__assert_fail@plt+0x1f5c>
   124f0:	ldr	r3, [sp, #44]	; 0x2c
   124f4:	cmp	r3, #0
   124f8:	bne	13a34 <__assert_fail@plt+0x288c>
   124fc:	ldr	r3, [sp, #52]	; 0x34
   12500:	ldrb	r5, [r3]
   12504:	cmp	r5, #126	; 0x7e
   12508:	ldrls	pc, [pc, r5, lsl #2]
   1250c:	b	12dc4 <__assert_fail@plt+0x1c1c>
   12510:	andeq	r2, r1, r8, asr #25
   12514:	andeq	r2, r1, r4, asr #27
   12518:	andeq	r2, r1, r4, asr #27
   1251c:	andeq	r2, r1, r4, asr #27
   12520:	andeq	r2, r1, r4, asr #27
   12524:	andeq	r2, r1, r4, asr #27
   12528:	andeq	r2, r1, r4, asr #27
   1252c:	muleq	r1, ip, ip
   12530:	muleq	r1, r4, ip
   12534:	ldrdeq	r2, [r1], -ip
   12538:	andeq	r2, r1, r8, lsl #25
   1253c:	ldrdeq	r2, [r1], -r4
   12540:	andeq	r2, r1, r4, ror #24
   12544:			; <UNDEFINED> instruction: 0x00012cb0
   12548:	andeq	r2, r1, r4, asr #27
   1254c:	andeq	r2, r1, r4, asr #27
   12550:	andeq	r2, r1, r4, asr #27
   12554:	andeq	r2, r1, r4, asr #27
   12558:	andeq	r2, r1, r4, asr #27
   1255c:	andeq	r2, r1, r4, asr #27
   12560:	andeq	r2, r1, r4, asr #27
   12564:	andeq	r2, r1, r4, asr #27
   12568:	andeq	r2, r1, r4, asr #27
   1256c:	andeq	r2, r1, r4, asr #27
   12570:	andeq	r2, r1, r4, asr #27
   12574:	andeq	r2, r1, r4, asr #27
   12578:	andeq	r2, r1, r4, asr #27
   1257c:	andeq	r2, r1, r4, asr #27
   12580:	andeq	r2, r1, r4, asr #27
   12584:	andeq	r2, r1, r4, asr #27
   12588:	andeq	r2, r1, r4, asr #27
   1258c:	andeq	r2, r1, r4, asr #27
   12590:	andeq	r2, r1, r0, lsr #27
   12594:	andeq	r2, r1, r8, lsr #25
   12598:	andeq	r2, r1, r8, lsr #25
   1259c:	andeq	r2, r1, r4, lsl #27
   125a0:	andeq	r2, r1, r8, lsr #25
   125a4:			; <UNDEFINED> instruction: 0x00012db8
   125a8:	andeq	r2, r1, r8, lsr #25
   125ac:	andeq	r2, r1, r4, lsl #22
   125b0:	andeq	r2, r1, r8, lsr #25
   125b4:	andeq	r2, r1, r8, lsr #25
   125b8:	andeq	r2, r1, r8, lsr #25
   125bc:			; <UNDEFINED> instruction: 0x00012db8
   125c0:			; <UNDEFINED> instruction: 0x00012db8
   125c4:			; <UNDEFINED> instruction: 0x00012db8
   125c8:			; <UNDEFINED> instruction: 0x00012db8
   125cc:			; <UNDEFINED> instruction: 0x00012db8
   125d0:			; <UNDEFINED> instruction: 0x00012db8
   125d4:			; <UNDEFINED> instruction: 0x00012db8
   125d8:			; <UNDEFINED> instruction: 0x00012db8
   125dc:			; <UNDEFINED> instruction: 0x00012db8
   125e0:			; <UNDEFINED> instruction: 0x00012db8
   125e4:			; <UNDEFINED> instruction: 0x00012db8
   125e8:			; <UNDEFINED> instruction: 0x00012db8
   125ec:			; <UNDEFINED> instruction: 0x00012db8
   125f0:			; <UNDEFINED> instruction: 0x00012db8
   125f4:			; <UNDEFINED> instruction: 0x00012db8
   125f8:			; <UNDEFINED> instruction: 0x00012db8
   125fc:	andeq	r2, r1, r8, lsr #25
   12600:	andeq	r2, r1, r8, lsr #25
   12604:	andeq	r2, r1, r8, lsr #25
   12608:	andeq	r2, r1, r8, lsr #25
   1260c:	ldrdeq	r2, [r1], -r8
   12610:	andeq	r2, r1, r4, asr #27
   12614:			; <UNDEFINED> instruction: 0x00012db8
   12618:			; <UNDEFINED> instruction: 0x00012db8
   1261c:			; <UNDEFINED> instruction: 0x00012db8
   12620:			; <UNDEFINED> instruction: 0x00012db8
   12624:			; <UNDEFINED> instruction: 0x00012db8
   12628:			; <UNDEFINED> instruction: 0x00012db8
   1262c:			; <UNDEFINED> instruction: 0x00012db8
   12630:			; <UNDEFINED> instruction: 0x00012db8
   12634:			; <UNDEFINED> instruction: 0x00012db8
   12638:			; <UNDEFINED> instruction: 0x00012db8
   1263c:			; <UNDEFINED> instruction: 0x00012db8
   12640:			; <UNDEFINED> instruction: 0x00012db8
   12644:			; <UNDEFINED> instruction: 0x00012db8
   12648:			; <UNDEFINED> instruction: 0x00012db8
   1264c:			; <UNDEFINED> instruction: 0x00012db8
   12650:			; <UNDEFINED> instruction: 0x00012db8
   12654:			; <UNDEFINED> instruction: 0x00012db8
   12658:			; <UNDEFINED> instruction: 0x00012db8
   1265c:			; <UNDEFINED> instruction: 0x00012db8
   12660:			; <UNDEFINED> instruction: 0x00012db8
   12664:			; <UNDEFINED> instruction: 0x00012db8
   12668:			; <UNDEFINED> instruction: 0x00012db8
   1266c:			; <UNDEFINED> instruction: 0x00012db8
   12670:			; <UNDEFINED> instruction: 0x00012db8
   12674:			; <UNDEFINED> instruction: 0x00012db8
   12678:			; <UNDEFINED> instruction: 0x00012db8
   1267c:	andeq	r2, r1, r8, lsr #25
   12680:	andeq	r2, r1, r0, lsl #21
   12684:			; <UNDEFINED> instruction: 0x00012db8
   12688:	andeq	r2, r1, r8, lsr #25
   1268c:			; <UNDEFINED> instruction: 0x00012db8
   12690:	andeq	r2, r1, r8, lsr #25
   12694:			; <UNDEFINED> instruction: 0x00012db8
   12698:			; <UNDEFINED> instruction: 0x00012db8
   1269c:			; <UNDEFINED> instruction: 0x00012db8
   126a0:			; <UNDEFINED> instruction: 0x00012db8
   126a4:			; <UNDEFINED> instruction: 0x00012db8
   126a8:			; <UNDEFINED> instruction: 0x00012db8
   126ac:			; <UNDEFINED> instruction: 0x00012db8
   126b0:			; <UNDEFINED> instruction: 0x00012db8
   126b4:			; <UNDEFINED> instruction: 0x00012db8
   126b8:			; <UNDEFINED> instruction: 0x00012db8
   126bc:			; <UNDEFINED> instruction: 0x00012db8
   126c0:			; <UNDEFINED> instruction: 0x00012db8
   126c4:			; <UNDEFINED> instruction: 0x00012db8
   126c8:			; <UNDEFINED> instruction: 0x00012db8
   126cc:			; <UNDEFINED> instruction: 0x00012db8
   126d0:			; <UNDEFINED> instruction: 0x00012db8
   126d4:			; <UNDEFINED> instruction: 0x00012db8
   126d8:			; <UNDEFINED> instruction: 0x00012db8
   126dc:			; <UNDEFINED> instruction: 0x00012db8
   126e0:			; <UNDEFINED> instruction: 0x00012db8
   126e4:			; <UNDEFINED> instruction: 0x00012db8
   126e8:			; <UNDEFINED> instruction: 0x00012db8
   126ec:			; <UNDEFINED> instruction: 0x00012db8
   126f0:			; <UNDEFINED> instruction: 0x00012db8
   126f4:			; <UNDEFINED> instruction: 0x00012db8
   126f8:			; <UNDEFINED> instruction: 0x00012db8
   126fc:	andeq	r2, r1, r4, lsr #17
   12700:	andeq	r2, r1, r8, lsr #25
   12704:	andeq	r2, r1, r4, lsr #17
   12708:	andeq	r2, r1, r4, lsl #27
   1270c:	cmp	r4, #0
   12710:	moveq	r3, #1
   12714:	streq	r3, [sp, #40]	; 0x28
   12718:	beq	12e2c <__assert_fail@plt+0x1c84>
   1271c:	mov	r3, #0
   12720:	mov	r2, #1
   12724:	mov	r4, r3
   12728:	str	r2, [sp, #36]	; 0x24
   1272c:	str	r2, [sp, #44]	; 0x2c
   12730:	str	r2, [sp, #56]	; 0x38
   12734:	str	r3, [sp, #68]	; 0x44
   12738:	movw	r3, #29220	; 0x7224
   1273c:	movt	r3, #1
   12740:	str	r4, [sp, #40]	; 0x28
   12744:	mov	r8, #2
   12748:	str	r4, [sp, #48]	; 0x30
   1274c:	str	r3, [sp, #60]	; 0x3c
   12750:	str	r4, [sp, #72]	; 0x48
   12754:	b	1243c <__assert_fail@plt+0x1294>
   12758:	cmp	r4, #0
   1275c:	bne	139a8 <__assert_fail@plt+0x2800>
   12760:	cmp	sl, #0
   12764:	beq	13768 <__assert_fail@plt+0x25c0>
   12768:	mov	r3, #34	; 0x22
   1276c:	mov	r1, r4
   12770:	mov	r2, #1
   12774:	strb	r3, [fp]
   12778:	movw	r3, #29200	; 0x7210
   1277c:	movt	r3, #1
   12780:	mov	r4, r2
   12784:	str	r2, [sp, #36]	; 0x24
   12788:	str	r2, [sp, #40]	; 0x28
   1278c:	str	r1, [sp, #44]	; 0x2c
   12790:	str	r1, [sp, #48]	; 0x30
   12794:	str	r2, [sp, #56]	; 0x38
   12798:	str	r3, [sp, #60]	; 0x3c
   1279c:	str	r1, [sp, #68]	; 0x44
   127a0:	str	r1, [sp, #72]	; 0x48
   127a4:	b	1243c <__assert_fail@plt+0x1294>
   127a8:	mov	r3, #0
   127ac:	mov	r4, r8
   127b0:	str	r3, [sp, #40]	; 0x28
   127b4:	str	r3, [sp, #44]	; 0x2c
   127b8:	str	r3, [sp, #48]	; 0x30
   127bc:	str	r8, [sp, #56]	; 0x38
   127c0:	str	r3, [sp, #60]	; 0x3c
   127c4:	str	r3, [sp, #68]	; 0x44
   127c8:	mov	r3, #1
   127cc:	str	r3, [sp, #36]	; 0x24
   127d0:	str	r8, [sp, #72]	; 0x48
   127d4:	b	1243c <__assert_fail@plt+0x1294>
   127d8:	mov	r3, #1
   127dc:	mov	r2, #0
   127e0:	mov	r4, r2
   127e4:	mov	r8, #5
   127e8:	str	r3, [sp, #36]	; 0x24
   127ec:	str	r3, [sp, #40]	; 0x28
   127f0:	str	r3, [sp, #44]	; 0x2c
   127f4:	str	r2, [sp, #48]	; 0x30
   127f8:	str	r3, [sp, #56]	; 0x38
   127fc:	movw	r3, #29200	; 0x7210
   12800:	movt	r3, #1
   12804:	str	r3, [sp, #60]	; 0x3c
   12808:	str	r2, [sp, #68]	; 0x44
   1280c:	str	r2, [sp, #72]	; 0x48
   12810:	b	1243c <__assert_fail@plt+0x1294>
   12814:	mov	r3, #0
   12818:	mov	r2, #1
   1281c:	mov	r4, r3
   12820:	str	r2, [sp, #36]	; 0x24
   12824:	str	r2, [sp, #40]	; 0x28
   12828:	str	r3, [sp, #44]	; 0x2c
   1282c:	str	r3, [sp, #48]	; 0x30
   12830:	str	r3, [sp, #56]	; 0x38
   12834:	str	r3, [sp, #60]	; 0x3c
   12838:	str	r3, [sp, #68]	; 0x44
   1283c:	str	r3, [sp, #72]	; 0x48
   12840:	b	1243c <__assert_fail@plt+0x1294>
   12844:	mov	r2, #1
   12848:	mov	r3, #0
   1284c:	mov	r4, r3
   12850:	str	r2, [sp, #36]	; 0x24
   12854:	str	r2, [sp, #44]	; 0x2c
   12858:	str	r8, [sp, #56]	; 0x38
   1285c:	str	r3, [sp, #68]	; 0x44
   12860:	b	12738 <__assert_fail@plt+0x1590>
   12864:	mov	r3, #1
   12868:	mov	r2, #0
   1286c:	mov	r4, r2
   12870:	mov	r8, #2
   12874:	str	r3, [sp, #36]	; 0x24
   12878:	str	r3, [sp, #40]	; 0x28
   1287c:	str	r3, [sp, #44]	; 0x2c
   12880:	str	r2, [sp, #48]	; 0x30
   12884:	str	r3, [sp, #56]	; 0x38
   12888:	movw	r3, #29220	; 0x7224
   1288c:	movt	r3, #1
   12890:	str	r3, [sp, #60]	; 0x3c
   12894:	str	r2, [sp, #68]	; 0x44
   12898:	str	r2, [sp, #72]	; 0x48
   1289c:	b	1243c <__assert_fail@plt+0x1294>
   128a0:	mov	r7, #0
   128a4:	ldr	r3, [sp, #28]
   128a8:	cmn	r3, #1
   128ac:	beq	13384 <__assert_fail@plt+0x21dc>
   128b0:	ldr	r3, [sp, #28]
   128b4:	subs	r2, r3, #1
   128b8:	movne	r2, #1
   128bc:	sub	r3, fp, #2
   128c0:	cmp	r2, #0
   128c4:	clz	r3, r3
   128c8:	lsr	r3, r3, #5
   128cc:	bne	128d8 <__assert_fail@plt+0x1730>
   128d0:	cmp	r9, #0
   128d4:	beq	130e4 <__assert_fail@plt+0x1f3c>
   128d8:	mov	r6, #0
   128dc:	ldr	r2, [sp, #40]	; 0x28
   128e0:	eor	r2, r2, #1
   128e4:	orrs	r3, r3, r2
   128e8:	bne	12ac0 <__assert_fail@plt+0x1918>
   128ec:	ldr	r2, [sp, #160]	; 0xa0
   128f0:	cmp	r2, #0
   128f4:	beq	12914 <__assert_fail@plt+0x176c>
   128f8:	ldr	r0, [sp, #160]	; 0xa0
   128fc:	ubfx	r1, r5, #5, #8
   12900:	and	r2, r5, #31
   12904:	ldr	r1, [r0, r1, lsl #2]
   12908:	lsr	r2, r1, r2
   1290c:	tst	r2, #1
   12910:	bne	1291c <__assert_fail@plt+0x1774>
   12914:	cmp	r7, #0
   12918:	beq	12b8c <__assert_fail@plt+0x19e4>
   1291c:	ldr	r2, [sp, #44]	; 0x2c
   12920:	sub	r3, fp, #2
   12924:	clz	r3, r3
   12928:	lsr	r3, r3, #5
   1292c:	cmp	r2, #0
   12930:	bne	136d8 <__assert_fail@plt+0x2530>
   12934:	ldr	r2, [sp, #48]	; 0x30
   12938:	eor	r2, r2, #1
   1293c:	ands	r3, r3, r2
   12940:	beq	12978 <__assert_fail@plt+0x17d0>
   12944:	cmp	sl, r4
   12948:	str	r3, [sp, #48]	; 0x30
   1294c:	movhi	r2, #39	; 0x27
   12950:	strbhi	r2, [r8, r4]
   12954:	add	r2, r4, #1
   12958:	cmp	sl, r2
   1295c:	movhi	r1, #36	; 0x24
   12960:	strbhi	r1, [r8, r2]
   12964:	add	r2, r4, #2
   12968:	add	r4, r4, #3
   1296c:	cmp	sl, r2
   12970:	movhi	r1, #39	; 0x27
   12974:	strbhi	r1, [r8, r2]
   12978:	cmp	r4, sl
   1297c:	add	r9, r9, #1
   12980:	movcc	r3, #92	; 0x5c
   12984:	strbcc	r3, [r8, r4]
   12988:	add	r4, r4, #1
   1298c:	cmp	r4, sl
   12990:	ldr	r3, [sp, #36]	; 0x24
   12994:	strbcc	r5, [r8, r4]
   12998:	cmp	r6, #0
   1299c:	add	r4, r4, #1
   129a0:	moveq	r3, #0
   129a4:	str	r3, [sp, #36]	; 0x24
   129a8:	ldr	r3, [sp, #28]
   129ac:	cmn	r3, #1
   129b0:	bne	12458 <__assert_fail@plt+0x12b0>
   129b4:	ldr	r3, [sp, #32]
   129b8:	ldrb	r6, [r3, r9]
   129bc:	adds	r6, r6, #0
   129c0:	movne	r6, #1
   129c4:	cmp	r6, #0
   129c8:	bne	1246c <__assert_fail@plt+0x12c4>
   129cc:	str	fp, [sp, #152]	; 0x98
   129d0:	mov	fp, r8
   129d4:	cmp	r4, #0
   129d8:	ldr	r1, [sp, #44]	; 0x2c
   129dc:	movne	r3, #0
   129e0:	ldr	r8, [sp, #152]	; 0x98
   129e4:	sub	r2, r8, #2
   129e8:	clz	r2, r2
   129ec:	lsr	r2, r2, #5
   129f0:	andeq	r3, r2, r1
   129f4:	cmp	r3, #0
   129f8:	bne	13ab4 <__assert_fail@plt+0x290c>
   129fc:	eor	r3, r1, #1
   12a00:	ands	r2, r2, r3
   12a04:	beq	139e0 <__assert_fail@plt+0x2838>
   12a08:	ldr	r3, [sp, #68]	; 0x44
   12a0c:	cmp	r3, #0
   12a10:	beq	139e4 <__assert_fail@plt+0x283c>
   12a14:	ldr	r3, [sp, #36]	; 0x24
   12a18:	cmp	r3, #0
   12a1c:	bne	13a70 <__assert_fail@plt+0x28c8>
   12a20:	ldr	r3, [sp, #72]	; 0x48
   12a24:	adds	r3, r3, #0
   12a28:	movne	r3, #1
   12a2c:	cmp	sl, #0
   12a30:	movne	r3, #0
   12a34:	cmp	r3, #0
   12a38:	ldreq	r2, [sp, #68]	; 0x44
   12a3c:	beq	139e4 <__assert_fail@plt+0x283c>
   12a40:	ldr	r2, [sp, #72]	; 0x48
   12a44:	str	r3, [sp, #68]	; 0x44
   12a48:	movw	r3, #29220	; 0x7224
   12a4c:	movt	r3, #1
   12a50:	mov	r1, #39	; 0x27
   12a54:	mov	r4, #1
   12a58:	ldr	sl, [sp, #72]	; 0x48
   12a5c:	mov	r8, #2
   12a60:	str	r3, [sp, #60]	; 0x3c
   12a64:	mov	r3, #0
   12a68:	strb	r1, [fp]
   12a6c:	str	r3, [sp, #44]	; 0x2c
   12a70:	str	r4, [sp, #56]	; 0x38
   12a74:	str	r2, [sp, #72]	; 0x48
   12a78:	b	1243c <__assert_fail@plt+0x1294>
   12a7c:	mov	r7, #0
   12a80:	cmp	fp, #2
   12a84:	beq	13364 <__assert_fail@plt+0x21bc>
   12a88:	ldr	r2, [sp, #40]	; 0x28
   12a8c:	ldr	r3, [sp, #56]	; 0x38
   12a90:	ldr	r1, [sp, #44]	; 0x2c
   12a94:	cmp	r3, #0
   12a98:	moveq	r3, #0
   12a9c:	andne	r3, r2, r1
   12aa0:	cmp	r3, #0
   12aa4:	moveq	r5, #92	; 0x5c
   12aa8:	moveq	r3, r5
   12aac:	bne	13370 <__assert_fail@plt+0x21c8>
   12ab0:	ldr	r2, [sp, #40]	; 0x28
   12ab4:	cmp	r2, #0
   12ab8:	bne	137ac <__assert_fail@plt+0x2604>
   12abc:	mov	r6, #0
   12ac0:	ldr	r3, [sp, #44]	; 0x2c
   12ac4:	cmp	r3, #0
   12ac8:	beq	1335c <__assert_fail@plt+0x21b4>
   12acc:	mov	r3, #0
   12ad0:	b	128ec <__assert_fail@plt+0x1744>
   12ad4:	mov	r7, #0
   12ad8:	cmp	fp, #2
   12adc:	beq	133d4 <__assert_fail@plt+0x222c>
   12ae0:	cmp	fp, #5
   12ae4:	beq	13398 <__assert_fail@plt+0x21f0>
   12ae8:	sub	r3, fp, #2
   12aec:	mov	r6, #0
   12af0:	clz	r3, r3
   12af4:	mov	r5, #63	; 0x3f
   12af8:	lsr	r3, r3, #5
   12afc:	b	128dc <__assert_fail@plt+0x1734>
   12b00:	mov	r7, #0
   12b04:	cmp	fp, #2
   12b08:	movne	r3, #0
   12b0c:	movne	r5, #39	; 0x27
   12b10:	strne	r6, [sp, #68]	; 0x44
   12b14:	bne	128dc <__assert_fail@plt+0x1734>
   12b18:	ldr	r3, [sp, #44]	; 0x2c
   12b1c:	cmp	r3, #0
   12b20:	bne	137dc <__assert_fail@plt+0x2634>
   12b24:	ldr	r3, [sp, #72]	; 0x48
   12b28:	cmp	sl, #0
   12b2c:	clz	r3, r3
   12b30:	lsr	r3, r3, #5
   12b34:	moveq	r3, #0
   12b38:	cmp	r3, #0
   12b3c:	bne	13708 <__assert_fail@plt+0x2560>
   12b40:	cmp	sl, r4
   12b44:	movhi	r3, #39	; 0x27
   12b48:	strbhi	r3, [r8, r4]
   12b4c:	add	r3, r4, #1
   12b50:	cmp	sl, r3
   12b54:	movhi	r2, #92	; 0x5c
   12b58:	strbhi	r2, [r8, r3]
   12b5c:	add	r3, r4, #2
   12b60:	cmp	sl, r3
   12b64:	bls	12b70 <__assert_fail@plt+0x19c8>
   12b68:	mov	r2, #39	; 0x27
   12b6c:	strb	r2, [r8, r3]
   12b70:	mov	r3, #0
   12b74:	cmp	r7, #0
   12b78:	add	r4, r4, #3
   12b7c:	mov	r5, #39	; 0x27
   12b80:	str	r3, [sp, #48]	; 0x30
   12b84:	str	r6, [sp, #68]	; 0x44
   12b88:	bne	1291c <__assert_fail@plt+0x1774>
   12b8c:	ldr	r2, [sp, #48]	; 0x30
   12b90:	eor	r3, r3, #1
   12b94:	add	r9, r9, #1
   12b98:	and	r3, r3, r2
   12b9c:	uxtb	r3, r3
   12ba0:	cmp	r3, #0
   12ba4:	beq	1298c <__assert_fail@plt+0x17e4>
   12ba8:	cmp	sl, r4
   12bac:	movhi	r3, #39	; 0x27
   12bb0:	strbhi	r3, [r8, r4]
   12bb4:	add	r3, r4, #1
   12bb8:	add	r4, r4, #2
   12bbc:	cmp	sl, r3
   12bc0:	movhi	r2, #39	; 0x27
   12bc4:	strbhi	r2, [r8, r3]
   12bc8:	mov	r3, #0
   12bcc:	str	r3, [sp, #48]	; 0x30
   12bd0:	b	1298c <__assert_fail@plt+0x17e4>
   12bd4:	mov	r3, #118	; 0x76
   12bd8:	b	12ab0 <__assert_fail@plt+0x1908>
   12bdc:	mov	r3, #116	; 0x74
   12be0:	ldr	r2, [sp, #44]	; 0x2c
   12be4:	cmp	fp, #2
   12be8:	movne	r2, #0
   12bec:	andeq	r2, r2, #1
   12bf0:	cmp	r2, #0
   12bf4:	beq	12ab0 <__assert_fail@plt+0x1908>
   12bf8:	mov	fp, r8
   12bfc:	mov	r8, #2
   12c00:	ldr	r3, [sp, #40]	; 0x28
   12c04:	cmp	r3, #0
   12c08:	movne	r8, #4
   12c0c:	mov	lr, #0
   12c10:	mov	r0, fp
   12c14:	ldr	r2, [sp, #32]
   12c18:	ldr	r3, [sp, #156]	; 0x9c
   12c1c:	ldr	r1, [sp, #164]	; 0xa4
   12c20:	bic	ip, r3, #2
   12c24:	ldr	r3, [sp, #28]
   12c28:	stm	sp, {r8, ip, lr}
   12c2c:	ldr	ip, [sp, #168]	; 0xa8
   12c30:	str	r1, [sp, #12]
   12c34:	mov	r1, sl
   12c38:	str	ip, [sp, #16]
   12c3c:	bl	12354 <__assert_fail@plt+0x11ac>
   12c40:	mov	r4, r0
   12c44:	mov	r0, r4
   12c48:	add	sp, sp, #116	; 0x74
   12c4c:	ldrd	r4, [sp]
   12c50:	ldrd	r6, [sp, #8]
   12c54:	ldrd	r8, [sp, #16]
   12c58:	ldrd	sl, [sp, #24]
   12c5c:	add	sp, sp, #32
   12c60:	pop	{pc}		; (ldr pc, [sp], #4)
   12c64:	mov	r5, #102	; 0x66
   12c68:	ldr	r2, [sp, #44]	; 0x2c
   12c6c:	sub	r3, fp, #2
   12c70:	clz	r3, r3
   12c74:	lsr	r3, r3, #5
   12c78:	cmp	r2, #0
   12c7c:	bne	136d8 <__assert_fail@plt+0x2530>
   12c80:	mov	r6, r2
   12c84:	b	12978 <__assert_fail@plt+0x17d0>
   12c88:	mov	r5, #110	; 0x6e
   12c8c:	mov	r6, #0
   12c90:	b	1291c <__assert_fail@plt+0x1774>
   12c94:	mov	r5, #98	; 0x62
   12c98:	b	12c68 <__assert_fail@plt+0x1ac0>
   12c9c:	mov	r5, #97	; 0x61
   12ca0:	b	12c68 <__assert_fail@plt+0x1ac0>
   12ca4:	mov	r7, #0
   12ca8:	mov	r6, #0
   12cac:	b	12acc <__assert_fail@plt+0x1924>
   12cb0:	mov	r5, #114	; 0x72
   12cb4:	b	12c8c <__assert_fail@plt+0x1ae4>
   12cb8:	ldr	r3, [sp, #44]	; 0x2c
   12cbc:	cmp	r3, #0
   12cc0:	bne	13a50 <__assert_fail@plt+0x28a8>
   12cc4:	mov	r7, r3
   12cc8:	ldr	r3, [sp, #48]	; 0x30
   12ccc:	sub	r2, fp, #2
   12cd0:	clz	r2, r2
   12cd4:	lsr	r2, r2, #5
   12cd8:	eor	r3, r3, #1
   12cdc:	ands	r3, r2, r3
   12ce0:	beq	136f4 <__assert_fail@plt+0x254c>
   12ce4:	cmp	sl, r4
   12ce8:	movhi	r1, #39	; 0x27
   12cec:	strbhi	r1, [r8, r4]
   12cf0:	add	r1, r4, #1
   12cf4:	cmp	sl, r1
   12cf8:	movhi	r0, #36	; 0x24
   12cfc:	strbhi	r0, [r8, r1]
   12d00:	add	r1, r4, #2
   12d04:	cmp	sl, r1
   12d08:	movhi	r0, #39	; 0x27
   12d0c:	strbhi	r0, [r8, r1]
   12d10:	add	r1, r4, #3
   12d14:	cmp	sl, r1
   12d18:	bls	1374c <__assert_fail@plt+0x25a4>
   12d1c:	mov	r4, r1
   12d20:	mov	r1, #92	; 0x5c
   12d24:	mov	r0, r4
   12d28:	str	r3, [sp, #48]	; 0x30
   12d2c:	strb	r1, [r8, r4]
   12d30:	cmp	fp, #2
   12d34:	add	r4, r4, #1
   12d38:	beq	1379c <__assert_fail@plt+0x25f4>
   12d3c:	ldr	r1, [sp, #28]
   12d40:	add	r3, r9, #1
   12d44:	cmp	r3, r1
   12d48:	bcs	12d60 <__assert_fail@plt+0x1bb8>
   12d4c:	ldr	r1, [sp, #32]
   12d50:	ldrb	r3, [r1, r3]
   12d54:	sub	r3, r3, #48	; 0x30
   12d58:	cmp	r3, #9
   12d5c:	bls	137b4 <__assert_fail@plt+0x260c>
   12d60:	mov	r5, #48	; 0x30
   12d64:	ldr	r3, [sp, #40]	; 0x28
   12d68:	eor	r3, r3, #1
   12d6c:	orrs	r2, r2, r3
   12d70:	mov	r3, r6
   12d74:	moveq	r6, r2
   12d78:	beq	128ec <__assert_fail@plt+0x1744>
   12d7c:	mov	r6, #0
   12d80:	b	12914 <__assert_fail@plt+0x176c>
   12d84:	cmp	r9, #0
   12d88:	mov	r2, r7
   12d8c:	bne	1332c <__assert_fail@plt+0x2184>
   12d90:	mov	r6, r7
   12d94:	mov	r3, r9
   12d98:	mov	r7, r2
   12d9c:	b	128dc <__assert_fail@plt+0x1734>
   12da0:	mov	r2, r7
   12da4:	mov	r6, r7
   12da8:	mov	r3, #0
   12dac:	mov	r7, r2
   12db0:	mov	r5, #32
   12db4:	b	128dc <__assert_fail@plt+0x1734>
   12db8:	mov	r6, r7
   12dbc:	b	12acc <__assert_fail@plt+0x1924>
   12dc0:	mov	r7, #0
   12dc4:	ldr	r3, [sp, #64]	; 0x40
   12dc8:	cmp	r3, #1
   12dcc:	bne	133ec <__assert_fail@plt+0x2244>
   12dd0:	bl	11064 <__ctype_b_loc@plt>
   12dd4:	ldr	r2, [r0]
   12dd8:	sxth	r3, r5
   12ddc:	lsl	r3, r3, #1
   12de0:	ldr	r1, [sp, #64]	; 0x40
   12de4:	ldrh	r3, [r2, r3]
   12de8:	mov	ip, r1
   12dec:	and	r3, r3, #16384	; 0x4000
   12df0:	cmp	r3, #0
   12df4:	ldr	r3, [sp, #40]	; 0x28
   12df8:	movne	r6, #1
   12dfc:	moveq	r6, #0
   12e00:	movne	r2, #0
   12e04:	andeq	r2, r3, #1
   12e08:	cmp	r2, #0
   12e0c:	bne	13734 <__assert_fail@plt+0x258c>
   12e10:	sub	r3, fp, #2
   12e14:	clz	r3, r3
   12e18:	lsr	r3, r3, #5
   12e1c:	b	128dc <__assert_fail@plt+0x1734>
   12e20:	cmp	r4, #0
   12e24:	bne	13ac4 <__assert_fail@plt+0x291c>
   12e28:	str	r4, [sp, #40]	; 0x28
   12e2c:	cmp	sl, #0
   12e30:	bne	13af4 <__assert_fail@plt+0x294c>
   12e34:	mov	r3, #1
   12e38:	movw	r2, #29220	; 0x7224
   12e3c:	movt	r2, #1
   12e40:	mov	r4, r3
   12e44:	mov	r8, #2
   12e48:	str	r3, [sp, #36]	; 0x24
   12e4c:	str	sl, [sp, #44]	; 0x2c
   12e50:	str	sl, [sp, #48]	; 0x30
   12e54:	str	r3, [sp, #56]	; 0x38
   12e58:	str	r2, [sp, #60]	; 0x3c
   12e5c:	str	sl, [sp, #68]	; 0x44
   12e60:	str	sl, [sp, #72]	; 0x48
   12e64:	b	1243c <__assert_fail@plt+0x1294>
   12e68:	ldr	r3, [sp, #32]
   12e6c:	ldrb	r5, [r3, r9]
   12e70:	cmp	r5, #126	; 0x7e
   12e74:	ldrls	pc, [pc, r5, lsl #2]
   12e78:	b	12dc4 <__assert_fail@plt+0x1c1c>
   12e7c:	andeq	r3, r1, r0, lsr #1
   12e80:	andeq	r2, r1, r4, asr #27
   12e84:	andeq	r2, r1, r4, asr #27
   12e88:	andeq	r2, r1, r4, asr #27
   12e8c:	andeq	r2, r1, r4, asr #27
   12e90:	andeq	r2, r1, r4, asr #27
   12e94:	andeq	r2, r1, r4, asr #27
   12e98:	muleq	r1, r8, r0
   12e9c:	muleq	r1, r0, r0
   12ea0:	ldrdeq	r2, [r1], -ip
   12ea4:	andeq	r3, r1, r8, lsl #1
   12ea8:	ldrdeq	r2, [r1], -r4
   12eac:	andeq	r3, r1, r0, lsl #1
   12eb0:	andeq	r3, r1, r8, ror r0
   12eb4:	andeq	r2, r1, r4, asr #27
   12eb8:	andeq	r2, r1, r4, asr #27
   12ebc:	andeq	r2, r1, r4, asr #27
   12ec0:	andeq	r2, r1, r4, asr #27
   12ec4:	andeq	r2, r1, r4, asr #27
   12ec8:	andeq	r2, r1, r4, asr #27
   12ecc:	andeq	r2, r1, r4, asr #27
   12ed0:	andeq	r2, r1, r4, asr #27
   12ed4:	andeq	r2, r1, r4, asr #27
   12ed8:	andeq	r2, r1, r4, asr #27
   12edc:	andeq	r2, r1, r4, asr #27
   12ee0:	andeq	r2, r1, r4, asr #27
   12ee4:	andeq	r2, r1, r4, asr #27
   12ee8:	andeq	r2, r1, r4, asr #27
   12eec:	andeq	r2, r1, r4, asr #27
   12ef0:	andeq	r2, r1, r4, asr #27
   12ef4:	andeq	r2, r1, r4, asr #27
   12ef8:	andeq	r2, r1, r4, asr #27
   12efc:	strdeq	r3, [r1], -r4
   12f00:	ldrdeq	r3, [r1], -r4
   12f04:	ldrdeq	r3, [r1], -r4
   12f08:	andeq	r3, r1, r4, asr #1
   12f0c:	ldrdeq	r3, [r1], -r4
   12f10:	andeq	r2, r1, r0, lsl lr
   12f14:	ldrdeq	r3, [r1], -r4
   12f18:	andeq	r2, r1, r4, lsl #22
   12f1c:	ldrdeq	r3, [r1], -r4
   12f20:	ldrdeq	r3, [r1], -r4
   12f24:	ldrdeq	r3, [r1], -r4
   12f28:	andeq	r2, r1, r0, lsl lr
   12f2c:	andeq	r2, r1, r0, lsl lr
   12f30:	andeq	r2, r1, r0, lsl lr
   12f34:	andeq	r2, r1, r0, lsl lr
   12f38:	andeq	r2, r1, r0, lsl lr
   12f3c:	andeq	r2, r1, r0, lsl lr
   12f40:	andeq	r2, r1, r0, lsl lr
   12f44:	andeq	r2, r1, r0, lsl lr
   12f48:	andeq	r2, r1, r0, lsl lr
   12f4c:	andeq	r2, r1, r0, lsl lr
   12f50:	andeq	r2, r1, r0, lsl lr
   12f54:	andeq	r2, r1, r0, lsl lr
   12f58:	andeq	r2, r1, r0, lsl lr
   12f5c:	andeq	r2, r1, r0, lsl lr
   12f60:	andeq	r2, r1, r0, lsl lr
   12f64:	andeq	r2, r1, r0, lsl lr
   12f68:	ldrdeq	r3, [r1], -r4
   12f6c:	ldrdeq	r3, [r1], -r4
   12f70:	ldrdeq	r3, [r1], -r4
   12f74:	ldrdeq	r3, [r1], -r4
   12f78:	ldrdeq	r2, [r1], -r8
   12f7c:	andeq	r2, r1, r4, asr #27
   12f80:	andeq	r2, r1, r0, lsl lr
   12f84:	andeq	r2, r1, r0, lsl lr
   12f88:	andeq	r2, r1, r0, lsl lr
   12f8c:	andeq	r2, r1, r0, lsl lr
   12f90:	andeq	r2, r1, r0, lsl lr
   12f94:	andeq	r2, r1, r0, lsl lr
   12f98:	andeq	r2, r1, r0, lsl lr
   12f9c:	andeq	r2, r1, r0, lsl lr
   12fa0:	andeq	r2, r1, r0, lsl lr
   12fa4:	andeq	r2, r1, r0, lsl lr
   12fa8:	andeq	r2, r1, r0, lsl lr
   12fac:	andeq	r2, r1, r0, lsl lr
   12fb0:	andeq	r2, r1, r0, lsl lr
   12fb4:	andeq	r2, r1, r0, lsl lr
   12fb8:	andeq	r2, r1, r0, lsl lr
   12fbc:	andeq	r2, r1, r0, lsl lr
   12fc0:	andeq	r2, r1, r0, lsl lr
   12fc4:	andeq	r2, r1, r0, lsl lr
   12fc8:	andeq	r2, r1, r0, lsl lr
   12fcc:	andeq	r2, r1, r0, lsl lr
   12fd0:	andeq	r2, r1, r0, lsl lr
   12fd4:	andeq	r2, r1, r0, lsl lr
   12fd8:	andeq	r2, r1, r0, lsl lr
   12fdc:	andeq	r2, r1, r0, lsl lr
   12fe0:	andeq	r2, r1, r0, lsl lr
   12fe4:	andeq	r2, r1, r0, lsl lr
   12fe8:	ldrdeq	r3, [r1], -r4
   12fec:	andeq	r2, r1, r0, lsl #21
   12ff0:	andeq	r2, r1, r0, lsl lr
   12ff4:	ldrdeq	r3, [r1], -r4
   12ff8:	andeq	r2, r1, r0, lsl lr
   12ffc:	ldrdeq	r3, [r1], -r4
   13000:	andeq	r2, r1, r0, lsl lr
   13004:	andeq	r2, r1, r0, lsl lr
   13008:	andeq	r2, r1, r0, lsl lr
   1300c:	andeq	r2, r1, r0, lsl lr
   13010:	andeq	r2, r1, r0, lsl lr
   13014:	andeq	r2, r1, r0, lsl lr
   13018:	andeq	r2, r1, r0, lsl lr
   1301c:	andeq	r2, r1, r0, lsl lr
   13020:	andeq	r2, r1, r0, lsl lr
   13024:	andeq	r2, r1, r0, lsl lr
   13028:	andeq	r2, r1, r0, lsl lr
   1302c:	andeq	r2, r1, r0, lsl lr
   13030:	andeq	r2, r1, r0, lsl lr
   13034:	andeq	r2, r1, r0, lsl lr
   13038:	andeq	r2, r1, r0, lsl lr
   1303c:	andeq	r2, r1, r0, lsl lr
   13040:	andeq	r2, r1, r0, lsl lr
   13044:	andeq	r2, r1, r0, lsl lr
   13048:	andeq	r2, r1, r0, lsl lr
   1304c:	andeq	r2, r1, r0, lsl lr
   13050:	andeq	r2, r1, r0, lsl lr
   13054:	andeq	r2, r1, r0, lsl lr
   13058:	andeq	r2, r1, r0, lsl lr
   1305c:	andeq	r2, r1, r0, lsl lr
   13060:	andeq	r2, r1, r0, lsl lr
   13064:	andeq	r2, r1, r0, lsl lr
   13068:	andeq	r2, r1, r4, lsr #17
   1306c:	ldrdeq	r3, [r1], -r4
   13070:	andeq	r2, r1, r4, lsr #17
   13074:	andeq	r3, r1, r4, asr #1
   13078:	mov	r3, #114	; 0x72
   1307c:	b	12be0 <__assert_fail@plt+0x1a38>
   13080:	mov	r3, #102	; 0x66
   13084:	b	12ab0 <__assert_fail@plt+0x1908>
   13088:	mov	r3, #110	; 0x6e
   1308c:	b	12be0 <__assert_fail@plt+0x1a38>
   13090:	mov	r3, #98	; 0x62
   13094:	b	12ab0 <__assert_fail@plt+0x1908>
   13098:	mov	r3, #97	; 0x61
   1309c:	b	12ab0 <__assert_fail@plt+0x1908>
   130a0:	ldr	r3, [sp, #40]	; 0x28
   130a4:	cmp	r3, #0
   130a8:	bne	12cb8 <__assert_fail@plt+0x1b10>
   130ac:	ldr	r3, [sp, #156]	; 0x9c
   130b0:	tst	r3, #1
   130b4:	addne	r9, r9, #1
   130b8:	bne	1244c <__assert_fail@plt+0x12a4>
   130bc:	ldr	r7, [sp, #40]	; 0x28
   130c0:	b	12abc <__assert_fail@plt+0x1914>
   130c4:	sub	r3, fp, #2
   130c8:	clz	r3, r3
   130cc:	lsr	r3, r3, #5
   130d0:	b	128d0 <__assert_fail@plt+0x1728>
   130d4:	sub	r3, fp, #2
   130d8:	mov	r6, #0
   130dc:	clz	r3, r3
   130e0:	lsr	r3, r3, #5
   130e4:	ldr	r2, [sp, #44]	; 0x2c
   130e8:	tst	r2, r3
   130ec:	beq	128dc <__assert_fail@plt+0x1734>
   130f0:	b	12bf8 <__assert_fail@plt+0x1a50>
   130f4:	sub	r3, fp, #2
   130f8:	clz	r3, r3
   130fc:	lsr	r3, r3, #5
   13100:	b	130e4 <__assert_fail@plt+0x1f3c>
   13104:	ldr	r3, [sp, #52]	; 0x34
   13108:	ldrb	r5, [r3]
   1310c:	cmp	r5, #126	; 0x7e
   13110:	ldrls	pc, [pc, r5, lsl #2]
   13114:	b	12dc0 <__assert_fail@plt+0x1c18>
   13118:			; <UNDEFINED> instruction: 0x00012cb8
   1311c:	andeq	r2, r1, r0, asr #27
   13120:	andeq	r2, r1, r0, asr #27
   13124:	andeq	r2, r1, r0, asr #27
   13128:	andeq	r2, r1, r0, asr #27
   1312c:	andeq	r2, r1, r0, asr #27
   13130:	andeq	r2, r1, r0, asr #27
   13134:	muleq	r1, ip, ip
   13138:	muleq	r1, r4, ip
   1313c:	andeq	r3, r1, r0, asr r3
   13140:	andeq	r2, r1, r8, lsl #25
   13144:	andeq	r3, r1, r4, asr #6
   13148:	andeq	r2, r1, r4, ror #24
   1314c:			; <UNDEFINED> instruction: 0x00012cb0
   13150:	andeq	r2, r1, r0, asr #27
   13154:	andeq	r2, r1, r0, asr #27
   13158:	andeq	r2, r1, r0, asr #27
   1315c:	andeq	r2, r1, r0, asr #27
   13160:	andeq	r2, r1, r0, asr #27
   13164:	andeq	r2, r1, r0, asr #27
   13168:	andeq	r2, r1, r0, asr #27
   1316c:	andeq	r2, r1, r0, asr #27
   13170:	andeq	r2, r1, r0, asr #27
   13174:	andeq	r2, r1, r0, asr #27
   13178:	andeq	r2, r1, r0, asr #27
   1317c:	andeq	r2, r1, r0, asr #27
   13180:	andeq	r2, r1, r0, asr #27
   13184:	andeq	r2, r1, r0, asr #27
   13188:	andeq	r2, r1, r0, asr #27
   1318c:	andeq	r2, r1, r0, asr #27
   13190:	andeq	r2, r1, r0, asr #27
   13194:	andeq	r2, r1, r0, asr #27
   13198:	andeq	r3, r1, ip, lsr r3
   1319c:	andeq	r2, r1, r4, lsr #25
   131a0:	andeq	r2, r1, r4, lsr #25
   131a4:	andeq	r3, r1, r0, lsr #6
   131a8:	andeq	r2, r1, r4, lsr #25
   131ac:	andeq	r3, r1, r4, lsl r3
   131b0:	andeq	r2, r1, r4, lsr #25
   131b4:	andeq	r2, r1, r0, lsl #22
   131b8:	andeq	r2, r1, r4, lsr #25
   131bc:	andeq	r2, r1, r4, lsr #25
   131c0:	andeq	r2, r1, r4, lsr #25
   131c4:	andeq	r3, r1, r4, lsl r3
   131c8:	andeq	r3, r1, r4, lsl r3
   131cc:	andeq	r3, r1, r4, lsl r3
   131d0:	andeq	r3, r1, r4, lsl r3
   131d4:	andeq	r3, r1, r4, lsl r3
   131d8:	andeq	r3, r1, r4, lsl r3
   131dc:	andeq	r3, r1, r4, lsl r3
   131e0:	andeq	r3, r1, r4, lsl r3
   131e4:	andeq	r3, r1, r4, lsl r3
   131e8:	andeq	r3, r1, r4, lsl r3
   131ec:	andeq	r3, r1, r4, lsl r3
   131f0:	andeq	r3, r1, r4, lsl r3
   131f4:	andeq	r3, r1, r4, lsl r3
   131f8:	andeq	r3, r1, r4, lsl r3
   131fc:	andeq	r3, r1, r4, lsl r3
   13200:	andeq	r3, r1, r4, lsl r3
   13204:	andeq	r2, r1, r4, lsr #25
   13208:	andeq	r2, r1, r4, lsr #25
   1320c:	andeq	r2, r1, r4, lsr #25
   13210:	andeq	r2, r1, r4, lsr #25
   13214:	ldrdeq	r2, [r1], -r4
   13218:	andeq	r2, r1, r0, asr #27
   1321c:	andeq	r3, r1, r4, lsl r3
   13220:	andeq	r3, r1, r4, lsl r3
   13224:	andeq	r3, r1, r4, lsl r3
   13228:	andeq	r3, r1, r4, lsl r3
   1322c:	andeq	r3, r1, r4, lsl r3
   13230:	andeq	r3, r1, r4, lsl r3
   13234:	andeq	r3, r1, r4, lsl r3
   13238:	andeq	r3, r1, r4, lsl r3
   1323c:	andeq	r3, r1, r4, lsl r3
   13240:	andeq	r3, r1, r4, lsl r3
   13244:	andeq	r3, r1, r4, lsl r3
   13248:	andeq	r3, r1, r4, lsl r3
   1324c:	andeq	r3, r1, r4, lsl r3
   13250:	andeq	r3, r1, r4, lsl r3
   13254:	andeq	r3, r1, r4, lsl r3
   13258:	andeq	r3, r1, r4, lsl r3
   1325c:	andeq	r3, r1, r4, lsl r3
   13260:	andeq	r3, r1, r4, lsl r3
   13264:	andeq	r3, r1, r4, lsl r3
   13268:	andeq	r3, r1, r4, lsl r3
   1326c:	andeq	r3, r1, r4, lsl r3
   13270:	andeq	r3, r1, r4, lsl r3
   13274:	andeq	r3, r1, r4, lsl r3
   13278:	andeq	r3, r1, r4, lsl r3
   1327c:	andeq	r3, r1, r4, lsl r3
   13280:	andeq	r3, r1, r4, lsl r3
   13284:	andeq	r2, r1, r4, lsr #25
   13288:	andeq	r2, r1, ip, ror sl
   1328c:	andeq	r3, r1, r4, lsl r3
   13290:	andeq	r2, r1, r4, lsr #25
   13294:	andeq	r3, r1, r4, lsl r3
   13298:	andeq	r2, r1, r4, lsr #25
   1329c:	andeq	r3, r1, r4, lsl r3
   132a0:	andeq	r3, r1, r4, lsl r3
   132a4:	andeq	r3, r1, r4, lsl r3
   132a8:	andeq	r3, r1, r4, lsl r3
   132ac:	andeq	r3, r1, r4, lsl r3
   132b0:	andeq	r3, r1, r4, lsl r3
   132b4:	andeq	r3, r1, r4, lsl r3
   132b8:	andeq	r3, r1, r4, lsl r3
   132bc:	andeq	r3, r1, r4, lsl r3
   132c0:	andeq	r3, r1, r4, lsl r3
   132c4:	andeq	r3, r1, r4, lsl r3
   132c8:	andeq	r3, r1, r4, lsl r3
   132cc:	andeq	r3, r1, r4, lsl r3
   132d0:	andeq	r3, r1, r4, lsl r3
   132d4:	andeq	r3, r1, r4, lsl r3
   132d8:	andeq	r3, r1, r4, lsl r3
   132dc:	andeq	r3, r1, r4, lsl r3
   132e0:	andeq	r3, r1, r4, lsl r3
   132e4:	andeq	r3, r1, r4, lsl r3
   132e8:	andeq	r3, r1, r4, lsl r3
   132ec:	andeq	r3, r1, r4, lsl r3
   132f0:	andeq	r3, r1, r4, lsl r3
   132f4:	andeq	r3, r1, r4, lsl r3
   132f8:	andeq	r3, r1, r4, lsl r3
   132fc:	andeq	r3, r1, r4, lsl r3
   13300:	andeq	r3, r1, r4, lsl r3
   13304:	andeq	r2, r1, r0, lsr #17
   13308:	andeq	r2, r1, r4, lsr #25
   1330c:	andeq	r2, r1, r0, lsr #17
   13310:	andeq	r3, r1, r0, lsr #6
   13314:	mov	r6, r7
   13318:	mov	r7, #0
   1331c:	b	12acc <__assert_fail@plt+0x1924>
   13320:	cmp	r9, #0
   13324:	mov	r2, #0
   13328:	beq	12d90 <__assert_fail@plt+0x1be8>
   1332c:	mov	r6, #0
   13330:	mov	r7, r2
   13334:	mov	r3, r6
   13338:	b	128ec <__assert_fail@plt+0x1744>
   1333c:	mov	r2, #0
   13340:	b	12da4 <__assert_fail@plt+0x1bfc>
   13344:	mov	r7, #0
   13348:	mov	r3, #118	; 0x76
   1334c:	b	12ab0 <__assert_fail@plt+0x1908>
   13350:	mov	r7, #0
   13354:	mov	r3, #116	; 0x74
   13358:	b	12be0 <__assert_fail@plt+0x1a38>
   1335c:	ldr	r3, [sp, #44]	; 0x2c
   13360:	b	12914 <__assert_fail@plt+0x176c>
   13364:	ldr	r3, [sp, #44]	; 0x2c
   13368:	cmp	r3, #0
   1336c:	bne	137dc <__assert_fail@plt+0x2634>
   13370:	add	r9, r9, #1
   13374:	mov	r6, #0
   13378:	ldr	r3, [sp, #48]	; 0x30
   1337c:	mov	r5, #92	; 0x5c
   13380:	b	12ba0 <__assert_fail@plt+0x19f8>
   13384:	ldr	r3, [sp, #32]
   13388:	ldrb	r2, [r3, #1]
   1338c:	adds	r2, r2, #0
   13390:	movne	r2, #1
   13394:	b	128bc <__assert_fail@plt+0x1714>
   13398:	ldr	r3, [sp, #156]	; 0x9c
   1339c:	ands	r3, r3, #4
   133a0:	beq	133c8 <__assert_fail@plt+0x2220>
   133a4:	ldr	r2, [sp, #28]
   133a8:	add	r3, r9, #2
   133ac:	cmp	r3, r2
   133b0:	bcs	133c4 <__assert_fail@plt+0x221c>
   133b4:	ldr	r2, [sp, #52]	; 0x34
   133b8:	ldrb	r5, [r2, #1]
   133bc:	cmp	r5, #63	; 0x3f
   133c0:	beq	13840 <__assert_fail@plt+0x2698>
   133c4:	mov	r3, #0
   133c8:	mov	r5, #63	; 0x3f
   133cc:	mov	r6, r3
   133d0:	b	128dc <__assert_fail@plt+0x1734>
   133d4:	ldr	r3, [sp, #44]	; 0x2c
   133d8:	cmp	r3, #0
   133dc:	bne	137dc <__assert_fail@plt+0x2634>
   133e0:	mov	r6, r3
   133e4:	mov	r5, #63	; 0x3f
   133e8:	b	12914 <__assert_fail@plt+0x176c>
   133ec:	ldr	r1, [sp, #28]
   133f0:	mov	r2, #0
   133f4:	mov	r3, #0
   133f8:	strd	r2, [sp, #104]	; 0x68
   133fc:	cmn	r1, #1
   13400:	bne	13410 <__assert_fail@plt+0x2268>
   13404:	ldr	r0, [sp, #32]
   13408:	bl	11088 <strlen@plt>
   1340c:	str	r0, [sp, #28]
   13410:	str	r8, [sp, #76]	; 0x4c
   13414:	mov	r3, #0
   13418:	str	sl, [sp, #80]	; 0x50
   1341c:	ldr	sl, [sp, #32]
   13420:	str	r5, [sp, #84]	; 0x54
   13424:	mov	r5, r3
   13428:	ldr	r8, [sp, #44]	; 0x2c
   1342c:	str	r7, [sp, #88]	; 0x58
   13430:	str	r4, [sp, #92]	; 0x5c
   13434:	ldr	r2, [sp, #28]
   13438:	add	r4, r9, r5
   1343c:	add	r3, sp, #104	; 0x68
   13440:	add	r7, sl, r4
   13444:	add	r0, sp, #100	; 0x64
   13448:	mov	r1, r7
   1344c:	sub	r2, r2, r4
   13450:	bl	16558 <__assert_fail@plt+0x53b0>
   13454:	subs	r1, r0, #0
   13458:	beq	134a4 <__assert_fail@plt+0x22fc>
   1345c:	cmn	r1, #1
   13460:	beq	1381c <__assert_fail@plt+0x2674>
   13464:	cmn	r1, #2
   13468:	beq	1393c <__assert_fail@plt+0x2794>
   1346c:	cmp	fp, #2
   13470:	movne	r3, #0
   13474:	andeq	r3, r8, #1
   13478:	cmp	r3, #0
   1347c:	bne	13608 <__assert_fail@plt+0x2460>
   13480:	ldr	r0, [sp, #100]	; 0x64
   13484:	add	r5, r5, r1
   13488:	bl	10fa4 <iswprint@plt>
   1348c:	cmp	r0, #0
   13490:	add	r0, sp, #104	; 0x68
   13494:	moveq	r6, #0
   13498:	bl	10f50 <mbsinit@plt>
   1349c:	cmp	r0, #0
   134a0:	beq	13434 <__assert_fail@plt+0x228c>
   134a4:	ldr	r3, [sp, #40]	; 0x28
   134a8:	mov	ip, r5
   134ac:	eor	r2, r6, #1
   134b0:	ldr	r8, [sp, #76]	; 0x4c
   134b4:	ldr	sl, [sp, #80]	; 0x50
   134b8:	and	r2, r2, r3
   134bc:	ldr	r5, [sp, #84]	; 0x54
   134c0:	ldr	r7, [sp, #88]	; 0x58
   134c4:	ldr	r4, [sp, #92]	; 0x5c
   134c8:	cmp	ip, #1
   134cc:	bls	12e08 <__assert_fail@plt+0x1c60>
   134d0:	add	r1, ip, r9
   134d4:	mov	r0, #39	; 0x27
   134d8:	ldr	lr, [sp, #52]	; 0x34
   134dc:	mov	ip, #0
   134e0:	str	r6, [sp, #52]	; 0x34
   134e4:	ldr	r6, [sp, #48]	; 0x30
   134e8:	b	135a4 <__assert_fail@plt+0x23fc>
   134ec:	ldr	ip, [sp, #44]	; 0x2c
   134f0:	sub	r3, fp, #2
   134f4:	clz	r3, r3
   134f8:	lsr	r3, r3, #5
   134fc:	cmp	ip, #0
   13500:	bne	13714 <__assert_fail@plt+0x256c>
   13504:	eor	ip, r6, #1
   13508:	ands	r3, r3, ip
   1350c:	beq	1353c <__assert_fail@plt+0x2394>
   13510:	cmp	sl, r4
   13514:	add	ip, r4, #1
   13518:	strbhi	r0, [r8, r4]
   1351c:	cmp	sl, ip
   13520:	movhi	r6, #36	; 0x24
   13524:	strbhi	r6, [r8, ip]
   13528:	add	ip, r4, #2
   1352c:	mov	r6, r3
   13530:	cmp	sl, ip
   13534:	add	r4, r4, #3
   13538:	strbhi	r0, [r8, ip]
   1353c:	cmp	sl, r4
   13540:	movhi	r3, #92	; 0x5c
   13544:	strbhi	r3, [r8, r4]
   13548:	add	r3, r4, #1
   1354c:	cmp	sl, r3
   13550:	bls	13560 <__assert_fail@plt+0x23b8>
   13554:	lsr	ip, r5, #6
   13558:	add	ip, ip, #48	; 0x30
   1355c:	strb	ip, [r8, r3]
   13560:	add	r3, r4, #2
   13564:	cmp	sl, r3
   13568:	bls	13578 <__assert_fail@plt+0x23d0>
   1356c:	ubfx	ip, r5, #3, #3
   13570:	add	ip, ip, #48	; 0x30
   13574:	strb	ip, [r8, r3]
   13578:	add	r9, r9, #1
   1357c:	and	r5, r5, #7
   13580:	cmp	r9, r1
   13584:	add	r5, r5, #48	; 0x30
   13588:	add	r4, r4, #3
   1358c:	bcs	13740 <__assert_fail@plt+0x2598>
   13590:	mov	ip, r2
   13594:	cmp	sl, r4
   13598:	strbhi	r5, [r8, r4]
   1359c:	add	r4, r4, #1
   135a0:	ldrb	r5, [lr, #1]!
   135a4:	cmp	r2, #0
   135a8:	bne	134ec <__assert_fail@plt+0x2344>
   135ac:	eor	r3, ip, #1
   135b0:	cmp	r7, #0
   135b4:	and	r3, r3, r6
   135b8:	uxtb	r3, r3
   135bc:	beq	135d0 <__assert_fail@plt+0x2428>
   135c0:	cmp	sl, r4
   135c4:	movhi	r7, #92	; 0x5c
   135c8:	strbhi	r7, [r8, r4]
   135cc:	add	r4, r4, #1
   135d0:	add	r9, r9, #1
   135d4:	cmp	r9, r1
   135d8:	bcs	13728 <__assert_fail@plt+0x2580>
   135dc:	cmp	r3, #0
   135e0:	beq	13760 <__assert_fail@plt+0x25b8>
   135e4:	cmp	sl, r4
   135e8:	add	r3, r4, #1
   135ec:	mov	r7, #0
   135f0:	strbhi	r0, [r8, r4]
   135f4:	cmp	sl, r3
   135f8:	add	r4, r4, #2
   135fc:	mov	r6, r7
   13600:	strbhi	r0, [r8, r3]
   13604:	b	13594 <__assert_fail@plt+0x23ec>
   13608:	cmp	r1, #1
   1360c:	beq	13480 <__assert_fail@plt+0x22d8>
   13610:	add	r2, r4, #1
   13614:	add	r3, sl, r1
   13618:	add	r2, sl, r2
   1361c:	add	r4, r3, r4
   13620:	ldrb	r3, [r2], #1
   13624:	sub	r3, r3, #91	; 0x5b
   13628:	cmp	r3, #33	; 0x21
   1362c:	ldrls	pc, [pc, r3, lsl #2]
   13630:	b	136bc <__assert_fail@plt+0x2514>
   13634:	andeq	r3, r1, r8, asr #13
   13638:	andeq	r3, r1, r8, asr #13
   1363c:			; <UNDEFINED> instruction: 0x000136bc
   13640:	andeq	r3, r1, r8, asr #13
   13644:			; <UNDEFINED> instruction: 0x000136bc
   13648:	andeq	r3, r1, r8, asr #13
   1364c:			; <UNDEFINED> instruction: 0x000136bc
   13650:			; <UNDEFINED> instruction: 0x000136bc
   13654:			; <UNDEFINED> instruction: 0x000136bc
   13658:			; <UNDEFINED> instruction: 0x000136bc
   1365c:			; <UNDEFINED> instruction: 0x000136bc
   13660:			; <UNDEFINED> instruction: 0x000136bc
   13664:			; <UNDEFINED> instruction: 0x000136bc
   13668:			; <UNDEFINED> instruction: 0x000136bc
   1366c:			; <UNDEFINED> instruction: 0x000136bc
   13670:			; <UNDEFINED> instruction: 0x000136bc
   13674:			; <UNDEFINED> instruction: 0x000136bc
   13678:			; <UNDEFINED> instruction: 0x000136bc
   1367c:			; <UNDEFINED> instruction: 0x000136bc
   13680:			; <UNDEFINED> instruction: 0x000136bc
   13684:			; <UNDEFINED> instruction: 0x000136bc
   13688:			; <UNDEFINED> instruction: 0x000136bc
   1368c:			; <UNDEFINED> instruction: 0x000136bc
   13690:			; <UNDEFINED> instruction: 0x000136bc
   13694:			; <UNDEFINED> instruction: 0x000136bc
   13698:			; <UNDEFINED> instruction: 0x000136bc
   1369c:			; <UNDEFINED> instruction: 0x000136bc
   136a0:			; <UNDEFINED> instruction: 0x000136bc
   136a4:			; <UNDEFINED> instruction: 0x000136bc
   136a8:			; <UNDEFINED> instruction: 0x000136bc
   136ac:			; <UNDEFINED> instruction: 0x000136bc
   136b0:			; <UNDEFINED> instruction: 0x000136bc
   136b4:			; <UNDEFINED> instruction: 0x000136bc
   136b8:	andeq	r3, r1, r8, asr #13
   136bc:	cmp	r4, r2
   136c0:	bne	13620 <__assert_fail@plt+0x2478>
   136c4:	b	13480 <__assert_fail@plt+0x22d8>
   136c8:	mov	r8, #2
   136cc:	ldr	fp, [sp, #76]	; 0x4c
   136d0:	ldr	sl, [sp, #80]	; 0x50
   136d4:	b	12c00 <__assert_fail@plt+0x1a58>
   136d8:	ldr	r2, [sp, #40]	; 0x28
   136dc:	str	fp, [sp, #152]	; 0x98
   136e0:	mov	fp, r8
   136e4:	ldr	r8, [sp, #152]	; 0x98
   136e8:	and	r2, r2, r3
   136ec:	str	r2, [sp, #40]	; 0x28
   136f0:	b	12c00 <__assert_fail@plt+0x1a58>
   136f4:	cmp	sl, r4
   136f8:	movls	r0, r4
   136fc:	bls	12d30 <__assert_fail@plt+0x1b88>
   13700:	ldr	r3, [sp, #48]	; 0x30
   13704:	b	12d20 <__assert_fail@plt+0x1b78>
   13708:	str	sl, [sp, #72]	; 0x48
   1370c:	ldr	sl, [sp, #44]	; 0x2c
   13710:	b	12b70 <__assert_fail@plt+0x19c8>
   13714:	str	r3, [sp, #40]	; 0x28
   13718:	str	fp, [sp, #152]	; 0x98
   1371c:	mov	fp, r8
   13720:	ldr	r8, [sp, #152]	; 0x98
   13724:	b	12c00 <__assert_fail@plt+0x1a58>
   13728:	str	r6, [sp, #48]	; 0x30
   1372c:	ldr	r6, [sp, #52]	; 0x34
   13730:	b	12ba0 <__assert_fail@plt+0x19f8>
   13734:	mov	r6, #0
   13738:	ldr	r2, [sp, #40]	; 0x28
   1373c:	b	134d0 <__assert_fail@plt+0x2328>
   13740:	str	r6, [sp, #48]	; 0x30
   13744:	ldr	r6, [sp, #52]	; 0x34
   13748:	b	1298c <__assert_fail@plt+0x17e4>
   1374c:	add	r4, r4, #4
   13750:	mov	r6, #0
   13754:	str	r3, [sp, #48]	; 0x30
   13758:	mov	r5, #48	; 0x30
   1375c:	b	12914 <__assert_fail@plt+0x176c>
   13760:	mov	r7, r3
   13764:	b	13594 <__assert_fail@plt+0x23ec>
   13768:	mov	r3, #1
   1376c:	movw	r2, #29200	; 0x7210
   13770:	movt	r2, #1
   13774:	mov	r4, r3
   13778:	str	r3, [sp, #36]	; 0x24
   1377c:	str	r3, [sp, #40]	; 0x28
   13780:	str	sl, [sp, #44]	; 0x2c
   13784:	str	sl, [sp, #48]	; 0x30
   13788:	str	r3, [sp, #56]	; 0x38
   1378c:	str	r2, [sp, #60]	; 0x3c
   13790:	str	sl, [sp, #68]	; 0x44
   13794:	str	sl, [sp, #72]	; 0x48
   13798:	b	1243c <__assert_fail@plt+0x1294>
   1379c:	mov	r3, r6
   137a0:	mov	r5, #48	; 0x30
   137a4:	mov	r6, #0
   137a8:	b	12914 <__assert_fail@plt+0x176c>
   137ac:	mov	r5, r3
   137b0:	b	12c8c <__assert_fail@plt+0x1ae4>
   137b4:	cmp	sl, r4
   137b8:	mov	r5, #48	; 0x30
   137bc:	movhi	r3, #48	; 0x30
   137c0:	strbhi	r3, [r8, r4]
   137c4:	add	r3, r0, #2
   137c8:	add	r4, r0, #3
   137cc:	cmp	sl, r3
   137d0:	movhi	r1, #48	; 0x30
   137d4:	strbhi	r1, [r8, r3]
   137d8:	b	12d64 <__assert_fail@plt+0x1bbc>
   137dc:	str	fp, [sp, #152]	; 0x98
   137e0:	mov	fp, r8
   137e4:	ldr	r8, [sp, #152]	; 0x98
   137e8:	b	12c00 <__assert_fail@plt+0x1a58>
   137ec:	ldr	r3, [sp, #164]	; 0xa4
   137f0:	ldrb	r3, [r3]
   137f4:	cmp	r3, #0
   137f8:	beq	1240c <__assert_fail@plt+0x1264>
   137fc:	ldr	r2, [sp, #164]	; 0xa4
   13800:	cmp	sl, r4
   13804:	strbhi	r3, [fp, r4]
   13808:	add	r4, r4, #1
   1380c:	ldrb	r3, [r2, #1]!
   13810:	cmp	r3, #0
   13814:	bne	13800 <__assert_fail@plt+0x2658>
   13818:	b	1240c <__assert_fail@plt+0x1264>
   1381c:	mov	ip, r5
   13820:	mov	r6, #0
   13824:	ldr	r2, [sp, #40]	; 0x28
   13828:	ldr	r8, [sp, #76]	; 0x4c
   1382c:	ldr	sl, [sp, #80]	; 0x50
   13830:	ldr	r5, [sp, #84]	; 0x54
   13834:	ldr	r7, [sp, #88]	; 0x58
   13838:	ldr	r4, [sp, #92]	; 0x5c
   1383c:	b	134c8 <__assert_fail@plt+0x2320>
   13840:	ldr	r2, [sp, #32]
   13844:	ldrb	r1, [r2, r3]
   13848:	sub	r2, r1, #33	; 0x21
   1384c:	cmp	r2, #29
   13850:	ldrls	pc, [pc, r2, lsl #2]
   13854:	b	13930 <__assert_fail@plt+0x2788>
   13858:	ldrdeq	r3, [r1], -r0
   1385c:	andeq	r3, r1, r0, lsr r9
   13860:	andeq	r3, r1, r0, lsr r9
   13864:	andeq	r3, r1, r0, lsr r9
   13868:	andeq	r3, r1, r0, lsr r9
   1386c:	andeq	r3, r1, r0, lsr r9
   13870:	ldrdeq	r3, [r1], -r0
   13874:	ldrdeq	r3, [r1], -r0
   13878:	ldrdeq	r3, [r1], -r0
   1387c:	andeq	r3, r1, r0, lsr r9
   13880:	andeq	r3, r1, r0, lsr r9
   13884:	andeq	r3, r1, r0, lsr r9
   13888:	ldrdeq	r3, [r1], -r0
   1388c:	andeq	r3, r1, r0, lsr r9
   13890:	ldrdeq	r3, [r1], -r0
   13894:	andeq	r3, r1, r0, lsr r9
   13898:	andeq	r3, r1, r0, lsr r9
   1389c:	andeq	r3, r1, r0, lsr r9
   138a0:	andeq	r3, r1, r0, lsr r9
   138a4:	andeq	r3, r1, r0, lsr r9
   138a8:	andeq	r3, r1, r0, lsr r9
   138ac:	andeq	r3, r1, r0, lsr r9
   138b0:	andeq	r3, r1, r0, lsr r9
   138b4:	andeq	r3, r1, r0, lsr r9
   138b8:	andeq	r3, r1, r0, lsr r9
   138bc:	andeq	r3, r1, r0, lsr r9
   138c0:	andeq	r3, r1, r0, lsr r9
   138c4:	ldrdeq	r3, [r1], -r0
   138c8:	ldrdeq	r3, [r1], -r0
   138cc:	ldrdeq	r3, [r1], -r0
   138d0:	ldr	r2, [sp, #44]	; 0x2c
   138d4:	cmp	r2, #0
   138d8:	bne	13a34 <__assert_fail@plt+0x288c>
   138dc:	cmp	sl, r4
   138e0:	mov	r5, r1
   138e4:	movhi	r2, #63	; 0x3f
   138e8:	mov	r9, r3
   138ec:	strbhi	r2, [r8, r4]
   138f0:	add	r2, r4, #1
   138f4:	cmp	sl, r2
   138f8:	movhi	r0, #34	; 0x22
   138fc:	strbhi	r0, [r8, r2]
   13900:	add	r2, r4, #2
   13904:	cmp	sl, r2
   13908:	movhi	r0, #34	; 0x22
   1390c:	strbhi	r0, [r8, r2]
   13910:	add	r2, r4, #3
   13914:	add	r4, r4, #4
   13918:	cmp	sl, r2
   1391c:	movhi	r0, #63	; 0x3f
   13920:	strbhi	r0, [r8, r2]
   13924:	mov	r2, #0
   13928:	mov	r6, r2
   1392c:	b	12d64 <__assert_fail@plt+0x1bbc>
   13930:	mov	r3, #0
   13934:	mov	r6, r3
   13938:	b	128dc <__assert_fail@plt+0x1734>
   1393c:	ldr	r0, [sp, #28]
   13940:	mov	r1, r4
   13944:	mov	r2, r7
   13948:	mov	r3, r5
   1394c:	mov	ip, r5
   13950:	ldr	r8, [sp, #76]	; 0x4c
   13954:	ldr	sl, [sp, #80]	; 0x50
   13958:	cmp	r1, r0
   1395c:	ldr	r5, [sp, #84]	; 0x54
   13960:	ldr	r7, [sp, #88]	; 0x58
   13964:	ldr	r4, [sp, #92]	; 0x5c
   13968:	bcs	1399c <__assert_fail@plt+0x27f4>
   1396c:	ldrb	r6, [r2]
   13970:	cmp	r6, #0
   13974:	bne	13988 <__assert_fail@plt+0x27e0>
   13978:	b	13abc <__assert_fail@plt+0x2914>
   1397c:	ldrb	r6, [r2, #1]!
   13980:	cmp	r6, #0
   13984:	beq	13a44 <__assert_fail@plt+0x289c>
   13988:	add	r3, r3, #1
   1398c:	add	r1, r9, r3
   13990:	cmp	r1, r0
   13994:	bcc	1397c <__assert_fail@plt+0x27d4>
   13998:	mov	ip, r3
   1399c:	mov	r6, #0
   139a0:	ldr	r2, [sp, #40]	; 0x28
   139a4:	b	134c8 <__assert_fail@plt+0x2320>
   139a8:	mov	r3, #1
   139ac:	mov	r2, #0
   139b0:	mov	r4, r2
   139b4:	str	r3, [sp, #36]	; 0x24
   139b8:	str	r3, [sp, #40]	; 0x28
   139bc:	str	r3, [sp, #44]	; 0x2c
   139c0:	str	r2, [sp, #48]	; 0x30
   139c4:	str	r3, [sp, #56]	; 0x38
   139c8:	movw	r3, #29200	; 0x7210
   139cc:	movt	r3, #1
   139d0:	str	r3, [sp, #60]	; 0x3c
   139d4:	str	r2, [sp, #68]	; 0x44
   139d8:	str	r2, [sp, #72]	; 0x48
   139dc:	b	1243c <__assert_fail@plt+0x1294>
   139e0:	mov	r2, r3
   139e4:	ldr	r3, [sp, #60]	; 0x3c
   139e8:	cmp	r3, #0
   139ec:	moveq	r2, #0
   139f0:	andne	r2, r2, #1
   139f4:	cmp	r2, #0
   139f8:	beq	13a24 <__assert_fail@plt+0x287c>
   139fc:	mov	r2, r3
   13a00:	ldrb	r3, [r3]
   13a04:	cmp	r3, #0
   13a08:	beq	13a24 <__assert_fail@plt+0x287c>
   13a0c:	cmp	sl, r4
   13a10:	strbhi	r3, [fp, r4]
   13a14:	add	r4, r4, #1
   13a18:	ldrb	r3, [r2, #1]!
   13a1c:	cmp	r3, #0
   13a20:	bne	13a0c <__assert_fail@plt+0x2864>
   13a24:	cmp	sl, r4
   13a28:	movhi	r3, #0
   13a2c:	strbhi	r3, [fp, r4]
   13a30:	b	12c44 <__assert_fail@plt+0x1a9c>
   13a34:	str	fp, [sp, #152]	; 0x98
   13a38:	mov	fp, r8
   13a3c:	ldr	r8, [sp, #152]	; 0x98
   13a40:	b	12c0c <__assert_fail@plt+0x1a64>
   13a44:	mov	ip, r3
   13a48:	ldr	r2, [sp, #40]	; 0x28
   13a4c:	b	134c8 <__assert_fail@plt+0x2320>
   13a50:	str	fp, [sp, #152]	; 0x98
   13a54:	mov	fp, r8
   13a58:	ldr	r8, [sp, #152]	; 0x98
   13a5c:	sub	r3, r8, #2
   13a60:	clz	r3, r3
   13a64:	lsr	r3, r3, #5
   13a68:	str	r3, [sp, #40]	; 0x28
   13a6c:	b	12c00 <__assert_fail@plt+0x1a58>
   13a70:	mov	ip, #5
   13a74:	ldr	r3, [sp, #28]
   13a78:	str	ip, [sp]
   13a7c:	ldr	r2, [sp, #156]	; 0x9c
   13a80:	ldr	ip, [sp, #164]	; 0xa4
   13a84:	ldr	r0, [sp, #160]	; 0xa0
   13a88:	str	r2, [sp, #4]
   13a8c:	ldr	r2, [sp, #32]
   13a90:	ldr	r1, [sp, #72]	; 0x48
   13a94:	str	ip, [sp, #12]
   13a98:	ldr	ip, [sp, #168]	; 0xa8
   13a9c:	str	r0, [sp, #8]
   13aa0:	mov	r0, fp
   13aa4:	str	ip, [sp, #16]
   13aa8:	bl	12354 <__assert_fail@plt+0x11ac>
   13aac:	mov	r4, r0
   13ab0:	b	12c44 <__assert_fail@plt+0x1a9c>
   13ab4:	mov	r8, #2
   13ab8:	b	12c00 <__assert_fail@plt+0x1a58>
   13abc:	ldr	r2, [sp, #40]	; 0x28
   13ac0:	b	134c8 <__assert_fail@plt+0x2320>
   13ac4:	mov	r3, #0
   13ac8:	mov	r2, #1
   13acc:	mov	r4, r3
   13ad0:	strd	r2, [sp, #36]	; 0x24
   13ad4:	strd	r2, [sp, #44]	; 0x2c
   13ad8:	str	r2, [sp, #56]	; 0x38
   13adc:	str	r3, [sp, #68]	; 0x44
   13ae0:	str	r3, [sp, #72]	; 0x48
   13ae4:	movw	r3, #29220	; 0x7224
   13ae8:	movt	r3, #1
   13aec:	str	r3, [sp, #60]	; 0x3c
   13af0:	b	1243c <__assert_fail@plt+0x1294>
   13af4:	mov	r3, #0
   13af8:	mov	r1, #1
   13afc:	mov	r2, r3
   13b00:	str	r1, [sp, #36]	; 0x24
   13b04:	str	r3, [sp, #48]	; 0x30
   13b08:	str	sl, [sp, #72]	; 0x48
   13b0c:	b	12a44 <__assert_fail@plt+0x189c>
   13b10:	bl	11184 <abort@plt>
   13b14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13b18:	mov	r4, r0
   13b1c:	mov	r5, r3
   13b20:	strd	r6, [sp, #8]
   13b24:	movw	r7, #33056	; 0x8120
   13b28:	movt	r7, #2
   13b2c:	strd	r8, [sp, #16]
   13b30:	strd	sl, [sp, #24]
   13b34:	mov	sl, r1
   13b38:	mov	fp, r2
   13b3c:	str	lr, [sp, #32]
   13b40:	sub	sp, sp, #60	; 0x3c
   13b44:	bl	110a0 <__errno_location@plt>
   13b48:	mov	r8, r0
   13b4c:	cmn	r4, #-2147483647	; 0x80000001
   13b50:	ldr	r6, [r7]
   13b54:	movne	r0, #0
   13b58:	moveq	r0, #1
   13b5c:	ldr	r3, [r8]
   13b60:	orrs	r0, r0, r4, lsr #31
   13b64:	str	r3, [sp, #28]
   13b68:	bne	13cf8 <__assert_fail@plt+0x2b50>
   13b6c:	ldr	r3, [r7, #4]
   13b70:	cmp	r3, r4
   13b74:	bgt	13bd4 <__assert_fail@plt+0x2a2c>
   13b78:	add	r1, r7, #8
   13b7c:	sub	r2, r4, r3
   13b80:	str	r3, [sp, #52]	; 0x34
   13b84:	cmp	r6, r1
   13b88:	add	r2, r2, #1
   13b8c:	beq	13cd0 <__assert_fail@plt+0x2b28>
   13b90:	mov	r1, #8
   13b94:	mov	r0, r6
   13b98:	mvn	r3, #-2147483648	; 0x80000000
   13b9c:	str	r1, [sp]
   13ba0:	add	r1, sp, #52	; 0x34
   13ba4:	bl	14f78 <__assert_fail@plt+0x3dd0>
   13ba8:	mov	r6, r0
   13bac:	str	r0, [r7]
   13bb0:	ldr	r0, [r7, #4]
   13bb4:	mov	r1, #0
   13bb8:	ldr	r2, [sp, #52]	; 0x34
   13bbc:	sub	r2, r2, r0
   13bc0:	add	r0, r6, r0, lsl #3
   13bc4:	lsl	r2, r2, #3
   13bc8:	bl	110c4 <memset@plt>
   13bcc:	ldr	r3, [sp, #52]	; 0x34
   13bd0:	str	r3, [r7, #4]
   13bd4:	ldr	r1, [r5, #4]
   13bd8:	add	r0, r6, r4, lsl #3
   13bdc:	add	ip, r5, #8
   13be0:	mov	r3, fp
   13be4:	mov	r2, sl
   13be8:	ldr	r7, [r0, #4]
   13bec:	str	r0, [sp, #36]	; 0x24
   13bf0:	str	ip, [sp, #40]	; 0x28
   13bf4:	orr	r0, r1, #1
   13bf8:	ldr	r9, [r6, r4, lsl #3]
   13bfc:	str	ip, [sp, #8]
   13c00:	ldr	lr, [r5, #44]	; 0x2c
   13c04:	str	r0, [sp, #4]
   13c08:	ldr	ip, [r5]
   13c0c:	mov	r1, r9
   13c10:	str	ip, [sp, #32]
   13c14:	ldr	ip, [r5, #40]	; 0x28
   13c18:	str	ip, [sp, #12]
   13c1c:	ldr	ip, [sp, #32]
   13c20:	str	lr, [sp, #16]
   13c24:	str	r0, [sp, #44]	; 0x2c
   13c28:	mov	r0, r7
   13c2c:	str	ip, [sp]
   13c30:	bl	12354 <__assert_fail@plt+0x11ac>
   13c34:	cmp	r9, r0
   13c38:	bhi	13ca8 <__assert_fail@plt+0x2b00>
   13c3c:	add	r9, r0, #1
   13c40:	movw	r3, #33164	; 0x818c
   13c44:	movt	r3, #2
   13c48:	cmp	r7, r3
   13c4c:	str	r9, [r6, r4, lsl #3]
   13c50:	beq	13c5c <__assert_fail@plt+0x2ab4>
   13c54:	mov	r0, r7
   13c58:	bl	12084 <__assert_fail@plt+0xedc>
   13c5c:	mov	r0, r9
   13c60:	bl	14dc8 <__assert_fail@plt+0x3c20>
   13c64:	ldr	ip, [r5]
   13c68:	mov	r3, fp
   13c6c:	mov	r2, sl
   13c70:	mov	r1, r9
   13c74:	mov	r7, r0
   13c78:	ldr	lr, [sp, #36]	; 0x24
   13c7c:	ldr	r4, [r5, #40]	; 0x28
   13c80:	str	r0, [lr, #4]
   13c84:	ldr	lr, [r5, #44]	; 0x2c
   13c88:	str	ip, [sp]
   13c8c:	ldr	ip, [sp, #44]	; 0x2c
   13c90:	str	ip, [sp, #4]
   13c94:	ldr	ip, [sp, #40]	; 0x28
   13c98:	str	r4, [sp, #12]
   13c9c:	str	lr, [sp, #16]
   13ca0:	str	ip, [sp, #8]
   13ca4:	bl	12354 <__assert_fail@plt+0x11ac>
   13ca8:	ldr	r3, [sp, #28]
   13cac:	mov	r0, r7
   13cb0:	str	r3, [r8]
   13cb4:	add	sp, sp, #60	; 0x3c
   13cb8:	ldrd	r4, [sp]
   13cbc:	ldrd	r6, [sp, #8]
   13cc0:	ldrd	r8, [sp, #16]
   13cc4:	ldrd	sl, [sp, #24]
   13cc8:	add	sp, sp, #32
   13ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   13cd0:	mov	r1, #8
   13cd4:	mvn	r3, #-2147483648	; 0x80000000
   13cd8:	str	r1, [sp]
   13cdc:	add	r1, sp, #52	; 0x34
   13ce0:	bl	14f78 <__assert_fail@plt+0x3dd0>
   13ce4:	ldrd	r2, [r7, #8]
   13ce8:	mov	r6, r0
   13cec:	str	r0, [r7]
   13cf0:	strd	r2, [r0]
   13cf4:	b	13bb0 <__assert_fail@plt+0x2a08>
   13cf8:	bl	11184 <abort@plt>
   13cfc:	strd	r4, [sp, #-16]!
   13d00:	mov	r5, r0
   13d04:	str	r6, [sp, #8]
   13d08:	str	lr, [sp, #12]
   13d0c:	bl	110a0 <__errno_location@plt>
   13d10:	mov	r4, r0
   13d14:	cmp	r5, #0
   13d18:	ldr	r0, [pc, #32]	; 13d40 <__assert_fail@plt+0x2b98>
   13d1c:	mov	r1, #48	; 0x30
   13d20:	movne	r0, r5
   13d24:	ldr	r6, [r4]
   13d28:	bl	150f0 <__assert_fail@plt+0x3f48>
   13d2c:	str	r6, [r4]
   13d30:	ldrd	r4, [sp]
   13d34:	ldr	r6, [sp, #8]
   13d38:	add	sp, sp, #12
   13d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d40:	andeq	r8, r2, ip, lsl #5
   13d44:	ldr	r3, [pc, #12]	; 13d58 <__assert_fail@plt+0x2bb0>
   13d48:	cmp	r0, #0
   13d4c:	moveq	r0, r3
   13d50:	ldr	r0, [r0]
   13d54:	bx	lr
   13d58:	andeq	r8, r2, ip, lsl #5
   13d5c:	ldr	r3, [pc, #12]	; 13d70 <__assert_fail@plt+0x2bc8>
   13d60:	cmp	r0, #0
   13d64:	moveq	r0, r3
   13d68:	str	r1, [r0]
   13d6c:	bx	lr
   13d70:	andeq	r8, r2, ip, lsl #5
   13d74:	ldr	r3, [pc, #52]	; 13db0 <__assert_fail@plt+0x2c08>
   13d78:	cmp	r0, #0
   13d7c:	push	{lr}		; (str lr, [sp, #-4]!)
   13d80:	lsr	lr, r1, #5
   13d84:	and	r1, r1, #31
   13d88:	moveq	r0, r3
   13d8c:	add	r3, r0, #8
   13d90:	ldr	ip, [r3, lr, lsl #2]
   13d94:	lsr	r0, ip, r1
   13d98:	eor	r2, r2, r0
   13d9c:	and	r0, r0, #1
   13da0:	and	r2, r2, #1
   13da4:	eor	r1, ip, r2, lsl r1
   13da8:	str	r1, [r3, lr, lsl #2]
   13dac:	pop	{pc}		; (ldr pc, [sp], #4)
   13db0:	andeq	r8, r2, ip, lsl #5
   13db4:	ldr	r3, [pc, #16]	; 13dcc <__assert_fail@plt+0x2c24>
   13db8:	cmp	r0, #0
   13dbc:	movne	r3, r0
   13dc0:	ldr	r0, [r3, #4]
   13dc4:	str	r1, [r3, #4]
   13dc8:	bx	lr
   13dcc:	andeq	r8, r2, ip, lsl #5
   13dd0:	ldr	r3, [pc, #48]	; 13e08 <__assert_fail@plt+0x2c60>
   13dd4:	cmp	r0, #0
   13dd8:	mov	ip, #10
   13ddc:	moveq	r0, r3
   13de0:	cmp	r2, #0
   13de4:	cmpne	r1, #0
   13de8:	str	ip, [r0]
   13dec:	beq	13dfc <__assert_fail@plt+0x2c54>
   13df0:	str	r1, [r0, #40]	; 0x28
   13df4:	str	r2, [r0, #44]	; 0x2c
   13df8:	bx	lr
   13dfc:	str	r4, [sp, #-8]!
   13e00:	str	lr, [sp, #4]
   13e04:	bl	11184 <abort@plt>
   13e08:	andeq	r8, r2, ip, lsl #5
   13e0c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13e10:	strd	r6, [sp, #8]
   13e14:	mov	r7, r0
   13e18:	mov	r6, r1
   13e1c:	strd	r8, [sp, #16]
   13e20:	mov	r8, r2
   13e24:	mov	r9, r3
   13e28:	str	lr, [sp, #24]
   13e2c:	sub	sp, sp, #28
   13e30:	ldr	r4, [sp, #56]	; 0x38
   13e34:	ldr	ip, [pc, #104]	; 13ea4 <__assert_fail@plt+0x2cfc>
   13e38:	cmp	r4, #0
   13e3c:	moveq	r4, ip
   13e40:	bl	110a0 <__errno_location@plt>
   13e44:	ldr	ip, [r4, #44]	; 0x2c
   13e48:	mov	r5, r0
   13e4c:	mov	r1, r6
   13e50:	add	lr, r4, #8
   13e54:	mov	r3, r9
   13e58:	ldr	r6, [r5]
   13e5c:	mov	r2, r8
   13e60:	mov	r0, r7
   13e64:	str	ip, [sp, #16]
   13e68:	ldr	ip, [r4, #40]	; 0x28
   13e6c:	str	lr, [sp, #8]
   13e70:	str	ip, [sp, #12]
   13e74:	ldr	ip, [r4, #4]
   13e78:	str	ip, [sp, #4]
   13e7c:	ldr	ip, [r4]
   13e80:	str	ip, [sp]
   13e84:	bl	12354 <__assert_fail@plt+0x11ac>
   13e88:	str	r6, [r5]
   13e8c:	add	sp, sp, #28
   13e90:	ldrd	r4, [sp]
   13e94:	ldrd	r6, [sp, #8]
   13e98:	ldrd	r8, [sp, #16]
   13e9c:	add	sp, sp, #24
   13ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ea4:	andeq	r8, r2, ip, lsl #5
   13ea8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13eac:	cmp	r3, #0
   13eb0:	ldr	r4, [pc, #220]	; 13f94 <__assert_fail@plt+0x2dec>
   13eb4:	movne	r4, r3
   13eb8:	strd	r6, [sp, #8]
   13ebc:	mov	r6, r2
   13ec0:	strd	r8, [sp, #16]
   13ec4:	mov	r9, r0
   13ec8:	strd	sl, [sp, #24]
   13ecc:	mov	sl, r1
   13ed0:	str	lr, [sp, #32]
   13ed4:	sub	sp, sp, #44	; 0x2c
   13ed8:	bl	110a0 <__errno_location@plt>
   13edc:	ldr	r5, [r4, #4]
   13ee0:	mov	r7, r0
   13ee4:	mov	r1, #0
   13ee8:	add	r8, r4, #8
   13eec:	mov	r3, sl
   13ef0:	ldr	ip, [r4, #44]	; 0x2c
   13ef4:	mov	r2, r9
   13ef8:	mov	r0, r1
   13efc:	ldr	lr, [r7]
   13f00:	cmp	r6, r1
   13f04:	orreq	r5, r5, #1
   13f08:	str	ip, [sp, #16]
   13f0c:	ldr	ip, [r4, #40]	; 0x28
   13f10:	stmib	sp, {r5, r8, ip}
   13f14:	ldr	ip, [r4]
   13f18:	str	lr, [sp, #28]
   13f1c:	str	ip, [sp]
   13f20:	bl	12354 <__assert_fail@plt+0x11ac>
   13f24:	add	r1, r0, #1
   13f28:	mov	fp, r0
   13f2c:	mov	r0, r1
   13f30:	str	r1, [sp, #36]	; 0x24
   13f34:	bl	14dc8 <__assert_fail@plt+0x3c20>
   13f38:	ldr	ip, [r4, #44]	; 0x2c
   13f3c:	mov	r3, sl
   13f40:	mov	r2, r9
   13f44:	ldr	r1, [sp, #36]	; 0x24
   13f48:	str	ip, [sp, #16]
   13f4c:	ldr	ip, [r4, #40]	; 0x28
   13f50:	str	r0, [sp, #32]
   13f54:	stmib	sp, {r5, r8, ip}
   13f58:	ldr	ip, [r4]
   13f5c:	str	ip, [sp]
   13f60:	bl	12354 <__assert_fail@plt+0x11ac>
   13f64:	ldr	lr, [sp, #28]
   13f68:	cmp	r6, #0
   13f6c:	ldr	r0, [sp, #32]
   13f70:	str	lr, [r7]
   13f74:	strne	fp, [r6]
   13f78:	add	sp, sp, #44	; 0x2c
   13f7c:	ldrd	r4, [sp]
   13f80:	ldrd	r6, [sp, #8]
   13f84:	ldrd	r8, [sp, #16]
   13f88:	ldrd	sl, [sp, #24]
   13f8c:	add	sp, sp, #32
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	andeq	r8, r2, ip, lsl #5
   13f98:	mov	r3, r2
   13f9c:	mov	r2, #0
   13fa0:	b	13ea8 <__assert_fail@plt+0x2d00>
   13fa4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13fa8:	movw	r5, #33056	; 0x8120
   13fac:	movt	r5, #2
   13fb0:	ldr	r3, [r5, #4]
   13fb4:	strd	r6, [sp, #8]
   13fb8:	str	r8, [sp, #16]
   13fbc:	str	lr, [sp, #20]
   13fc0:	ldr	r7, [r5]
   13fc4:	cmp	r3, #1
   13fc8:	ble	13fec <__assert_fail@plt+0x2e44>
   13fcc:	mov	r4, #1
   13fd0:	add	r6, r7, #4
   13fd4:	ldr	r0, [r6, r4, lsl #3]
   13fd8:	add	r4, r4, #1
   13fdc:	bl	12084 <__assert_fail@plt+0xedc>
   13fe0:	ldr	r3, [r5, #4]
   13fe4:	cmp	r3, r4
   13fe8:	bgt	13fd4 <__assert_fail@plt+0x2e2c>
   13fec:	ldr	r0, [r7, #4]
   13ff0:	movw	r4, #33164	; 0x818c
   13ff4:	movt	r4, #2
   13ff8:	cmp	r0, r4
   13ffc:	beq	14010 <__assert_fail@plt+0x2e68>
   14000:	bl	12084 <__assert_fail@plt+0xedc>
   14004:	mov	r3, #256	; 0x100
   14008:	str	r3, [r5, #8]
   1400c:	str	r4, [r5, #12]
   14010:	ldr	r4, [pc, #44]	; 14044 <__assert_fail@plt+0x2e9c>
   14014:	cmp	r7, r4
   14018:	beq	14028 <__assert_fail@plt+0x2e80>
   1401c:	mov	r0, r7
   14020:	bl	12084 <__assert_fail@plt+0xedc>
   14024:	str	r4, [r5]
   14028:	mov	r3, #1
   1402c:	ldrd	r6, [sp, #8]
   14030:	str	r3, [r5, #4]
   14034:	ldrd	r4, [sp]
   14038:	ldr	r8, [sp, #16]
   1403c:	add	sp, sp, #20
   14040:	pop	{pc}		; (ldr pc, [sp], #4)
   14044:	andeq	r8, r2, r8, lsr #2
   14048:	ldr	r3, [pc, #4]	; 14054 <__assert_fail@plt+0x2eac>
   1404c:	mvn	r2, #0
   14050:	b	13b14 <__assert_fail@plt+0x296c>
   14054:	andeq	r8, r2, ip, lsl #5
   14058:	ldr	r3, [pc]	; 14060 <__assert_fail@plt+0x2eb8>
   1405c:	b	13b14 <__assert_fail@plt+0x296c>
   14060:	andeq	r8, r2, ip, lsl #5
   14064:	mov	r1, r0
   14068:	ldr	r3, [pc, #8]	; 14078 <__assert_fail@plt+0x2ed0>
   1406c:	mvn	r2, #0
   14070:	mov	r0, #0
   14074:	b	13b14 <__assert_fail@plt+0x296c>
   14078:	andeq	r8, r2, ip, lsl #5
   1407c:	mov	r2, r1
   14080:	ldr	r3, [pc, #8]	; 14090 <__assert_fail@plt+0x2ee8>
   14084:	mov	r1, r0
   14088:	mov	r0, #0
   1408c:	b	13b14 <__assert_fail@plt+0x296c>
   14090:	andeq	r8, r2, ip, lsl #5
   14094:	strd	r4, [sp, #-12]!
   14098:	mov	r5, r2
   1409c:	mov	r4, r0
   140a0:	str	lr, [sp, #8]
   140a4:	sub	sp, sp, #52	; 0x34
   140a8:	mov	r0, sp
   140ac:	bl	121b0 <__assert_fail@plt+0x1008>
   140b0:	mov	r3, sp
   140b4:	mov	r1, r5
   140b8:	mov	r0, r4
   140bc:	mvn	r2, #0
   140c0:	bl	13b14 <__assert_fail@plt+0x296c>
   140c4:	add	sp, sp, #52	; 0x34
   140c8:	ldrd	r4, [sp]
   140cc:	add	sp, sp, #8
   140d0:	pop	{pc}		; (ldr pc, [sp], #4)
   140d4:	strd	r4, [sp, #-16]!
   140d8:	mov	r5, r2
   140dc:	mov	r4, r0
   140e0:	str	r6, [sp, #8]
   140e4:	mov	r6, r3
   140e8:	str	lr, [sp, #12]
   140ec:	sub	sp, sp, #48	; 0x30
   140f0:	mov	r0, sp
   140f4:	bl	121b0 <__assert_fail@plt+0x1008>
   140f8:	mov	r3, sp
   140fc:	mov	r2, r6
   14100:	mov	r1, r5
   14104:	mov	r0, r4
   14108:	bl	13b14 <__assert_fail@plt+0x296c>
   1410c:	add	sp, sp, #48	; 0x30
   14110:	ldrd	r4, [sp]
   14114:	ldr	r6, [sp, #8]
   14118:	add	sp, sp, #12
   1411c:	pop	{pc}		; (ldr pc, [sp], #4)
   14120:	mov	r2, r1
   14124:	mov	r1, r0
   14128:	mov	r0, #0
   1412c:	b	14094 <__assert_fail@plt+0x2eec>
   14130:	mov	r3, r2
   14134:	mov	r2, r1
   14138:	mov	r1, r0
   1413c:	mov	r0, #0
   14140:	b	140d4 <__assert_fail@plt+0x2f2c>
   14144:	ldr	ip, [pc, #140]	; 141d8 <__assert_fail@plt+0x3030>
   14148:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1414c:	ldrd	r4, [ip]
   14150:	strd	r6, [sp, #8]
   14154:	ldrd	r6, [ip, #8]
   14158:	strd	r8, [sp, #16]
   1415c:	lsr	r9, r2, #5
   14160:	str	lr, [sp, #24]
   14164:	sub	sp, sp, #52	; 0x34
   14168:	and	lr, r2, #31
   1416c:	add	r8, sp, #8
   14170:	mov	r2, r1
   14174:	strd	r4, [sp]
   14178:	mov	r1, r0
   1417c:	mov	r3, sp
   14180:	strd	r6, [sp, #8]
   14184:	mov	r0, #0
   14188:	ldrd	r4, [ip, #16]
   1418c:	ldrd	r6, [ip, #24]
   14190:	strd	r4, [sp, #16]
   14194:	ldrd	r4, [ip, #32]
   14198:	strd	r6, [sp, #24]
   1419c:	ldrd	r6, [ip, #40]	; 0x28
   141a0:	strd	r4, [sp, #32]
   141a4:	strd	r6, [sp, #40]	; 0x28
   141a8:	ldr	ip, [r8, r9, lsl #2]
   141ac:	mvn	r4, ip, lsr lr
   141b0:	and	r4, r4, #1
   141b4:	eor	lr, ip, r4, lsl lr
   141b8:	str	lr, [r8, r9, lsl #2]
   141bc:	bl	13b14 <__assert_fail@plt+0x296c>
   141c0:	add	sp, sp, #52	; 0x34
   141c4:	ldrd	r4, [sp]
   141c8:	ldrd	r6, [sp, #8]
   141cc:	ldrd	r8, [sp, #16]
   141d0:	add	sp, sp, #24
   141d4:	pop	{pc}		; (ldr pc, [sp], #4)
   141d8:	andeq	r8, r2, ip, lsl #5
   141dc:	mov	r2, r1
   141e0:	mvn	r1, #0
   141e4:	b	14144 <__assert_fail@plt+0x2f9c>
   141e8:	mov	r2, #58	; 0x3a
   141ec:	mvn	r1, #0
   141f0:	b	14144 <__assert_fail@plt+0x2f9c>
   141f4:	mov	r2, #58	; 0x3a
   141f8:	b	14144 <__assert_fail@plt+0x2f9c>
   141fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   14200:	strd	r6, [sp, #8]
   14204:	mov	r6, r0
   14208:	mov	r7, r2
   1420c:	str	lr, [sp, #16]
   14210:	sub	sp, sp, #100	; 0x64
   14214:	mov	r0, sp
   14218:	bl	121b0 <__assert_fail@plt+0x1008>
   1421c:	ldrd	r4, [sp, #8]
   14220:	mov	r1, r7
   14224:	mov	r0, r6
   14228:	add	r3, sp, #48	; 0x30
   1422c:	mvn	r2, #0
   14230:	ldrd	r6, [sp]
   14234:	strd	r4, [sp, #56]	; 0x38
   14238:	ldrd	r4, [sp, #16]
   1423c:	strd	r6, [sp, #48]	; 0x30
   14240:	ldrd	r6, [sp, #32]
   14244:	ldr	lr, [sp, #60]	; 0x3c
   14248:	strd	r4, [sp, #64]	; 0x40
   1424c:	ldrd	r4, [sp, #24]
   14250:	mvn	ip, lr
   14254:	and	ip, ip, #67108864	; 0x4000000
   14258:	strd	r4, [sp, #72]	; 0x48
   1425c:	eor	ip, ip, lr
   14260:	ldrd	r4, [sp, #40]	; 0x28
   14264:	str	ip, [sp, #60]	; 0x3c
   14268:	strd	r6, [sp, #80]	; 0x50
   1426c:	strd	r4, [sp, #88]	; 0x58
   14270:	bl	13b14 <__assert_fail@plt+0x296c>
   14274:	add	sp, sp, #100	; 0x64
   14278:	ldrd	r4, [sp]
   1427c:	ldrd	r6, [sp, #8]
   14280:	add	sp, sp, #16
   14284:	pop	{pc}		; (ldr pc, [sp], #4)
   14288:	ldr	ip, [pc, #156]	; 1432c <__assert_fail@plt+0x3184>
   1428c:	cmp	r2, #0
   14290:	cmpne	r1, #0
   14294:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14298:	strd	r6, [sp, #8]
   1429c:	mov	r6, r2
   142a0:	str	r8, [sp, #16]
   142a4:	mov	r8, r3
   142a8:	strd	sl, [sp, #20]
   142ac:	ldrd	r4, [ip]
   142b0:	str	lr, [sp, #28]
   142b4:	sub	sp, sp, #48	; 0x30
   142b8:	mov	lr, #10
   142bc:	ldrd	r2, [ip, #8]
   142c0:	ldrd	sl, [ip, #16]
   142c4:	strd	r4, [sp]
   142c8:	ldrd	r4, [ip, #32]
   142cc:	str	lr, [sp]
   142d0:	strd	r2, [sp, #8]
   142d4:	strd	sl, [sp, #16]
   142d8:	ldrd	r2, [ip, #24]
   142dc:	ldrd	sl, [ip, #40]	; 0x28
   142e0:	strd	r2, [sp, #24]
   142e4:	strd	r4, [sp, #32]
   142e8:	strd	sl, [sp, #40]	; 0x28
   142ec:	beq	14328 <__assert_fail@plt+0x3180>
   142f0:	ldr	r2, [sp, #80]	; 0x50
   142f4:	mov	r7, r1
   142f8:	mov	r3, sp
   142fc:	mov	r1, r8
   14300:	str	r7, [sp, #40]	; 0x28
   14304:	str	r6, [sp, #44]	; 0x2c
   14308:	bl	13b14 <__assert_fail@plt+0x296c>
   1430c:	add	sp, sp, #48	; 0x30
   14310:	ldrd	r4, [sp]
   14314:	ldrd	r6, [sp, #8]
   14318:	ldr	r8, [sp, #16]
   1431c:	ldrd	sl, [sp, #20]
   14320:	add	sp, sp, #28
   14324:	pop	{pc}		; (ldr pc, [sp], #4)
   14328:	bl	11184 <abort@plt>
   1432c:	andeq	r8, r2, ip, lsl #5
   14330:	mvn	ip, #0
   14334:	push	{lr}		; (str lr, [sp, #-4]!)
   14338:	sub	sp, sp, #12
   1433c:	str	ip, [sp]
   14340:	bl	14288 <__assert_fail@plt+0x30e0>
   14344:	add	sp, sp, #12
   14348:	pop	{pc}		; (ldr pc, [sp], #4)
   1434c:	mvn	ip, #0
   14350:	push	{lr}		; (str lr, [sp, #-4]!)
   14354:	sub	sp, sp, #12
   14358:	mov	r3, r2
   1435c:	mov	r2, r1
   14360:	mov	r1, r0
   14364:	mov	r0, #0
   14368:	str	ip, [sp]
   1436c:	bl	14288 <__assert_fail@plt+0x30e0>
   14370:	add	sp, sp, #12
   14374:	pop	{pc}		; (ldr pc, [sp], #4)
   14378:	push	{lr}		; (str lr, [sp, #-4]!)
   1437c:	sub	sp, sp, #12
   14380:	str	r3, [sp]
   14384:	mov	r3, r2
   14388:	mov	r2, r1
   1438c:	mov	r1, r0
   14390:	mov	r0, #0
   14394:	bl	14288 <__assert_fail@plt+0x30e0>
   14398:	add	sp, sp, #12
   1439c:	pop	{pc}		; (ldr pc, [sp], #4)
   143a0:	ldr	r3, [pc]	; 143a8 <__assert_fail@plt+0x3200>
   143a4:	b	13b14 <__assert_fail@plt+0x296c>
   143a8:	andeq	r8, r2, r0, lsr r1
   143ac:	mov	r2, r1
   143b0:	ldr	r3, [pc, #8]	; 143c0 <__assert_fail@plt+0x3218>
   143b4:	mov	r1, r0
   143b8:	mov	r0, #0
   143bc:	b	13b14 <__assert_fail@plt+0x296c>
   143c0:	andeq	r8, r2, r0, lsr r1
   143c4:	ldr	r3, [pc, #4]	; 143d0 <__assert_fail@plt+0x3228>
   143c8:	mvn	r2, #0
   143cc:	b	13b14 <__assert_fail@plt+0x296c>
   143d0:	andeq	r8, r2, r0, lsr r1
   143d4:	mov	r1, r0
   143d8:	ldr	r3, [pc, #8]	; 143e8 <__assert_fail@plt+0x3240>
   143dc:	mvn	r2, #0
   143e0:	mov	r0, #0
   143e4:	b	13b14 <__assert_fail@plt+0x296c>
   143e8:	andeq	r8, r2, r0, lsr r1
   143ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143f0:	mov	r4, r1
   143f4:	strd	r6, [sp, #8]
   143f8:	strd	r8, [sp, #16]
   143fc:	subs	r9, r3, #0
   14400:	mov	r8, r2
   14404:	strd	sl, [sp, #24]
   14408:	mvneq	sl, #0
   1440c:	str	lr, [sp, #32]
   14410:	sub	sp, sp, #44	; 0x2c
   14414:	ldr	r3, [sp, #80]	; 0x50
   14418:	ldrne	sl, [r9]
   1441c:	ldr	fp, [r2]
   14420:	cmp	r3, #0
   14424:	ldr	r6, [sp, #84]	; 0x54
   14428:	beq	14438 <__assert_fail@plt+0x3290>
   1442c:	mov	r3, #0
   14430:	ldr	r2, [sp, #80]	; 0x50
   14434:	str	r3, [r2]
   14438:	cmp	r6, #0
   1443c:	movne	r3, #0
   14440:	strne	r3, [r6]
   14444:	cmp	r4, #0
   14448:	beq	145fc <__assert_fail@plt+0x3454>
   1444c:	subs	r3, r4, r0
   14450:	bne	144f8 <__assert_fail@plt+0x3350>
   14454:	ldrb	r2, [r4, #1]
   14458:	cmp	r2, #0
   1445c:	beq	14610 <__assert_fail@plt+0x3468>
   14460:	adds	r5, r4, #1
   14464:	moveq	r4, r5
   14468:	beq	144a0 <__assert_fail@plt+0x32f8>
   1446c:	mov	r4, r3
   14470:	ldrb	r3, [r5]
   14474:	cmp	r3, #43	; 0x2b
   14478:	beq	1456c <__assert_fail@plt+0x33c4>
   1447c:	mov	r0, r5
   14480:	bl	1119c <getgrnam@plt>
   14484:	cmp	r0, #0
   14488:	beq	1456c <__assert_fail@plt+0x33c4>
   1448c:	ldr	sl, [r0, #8]
   14490:	bl	10ec0 <endgrent@plt>
   14494:	mov	r0, r5
   14498:	bl	151d0 <__assert_fail@plt+0x4028>
   1449c:	mov	r5, r0
   144a0:	ldr	r3, [sp, #80]	; 0x50
   144a4:	cmp	r9, #0
   144a8:	str	fp, [r8]
   144ac:	strne	sl, [r9]
   144b0:	cmp	r3, #0
   144b4:	strne	r4, [r3]
   144b8:	movne	r4, #0
   144bc:	cmp	r6, #0
   144c0:	mov	r0, r4
   144c4:	strne	r5, [r6]
   144c8:	movne	r5, #0
   144cc:	bl	12084 <__assert_fail@plt+0xedc>
   144d0:	mov	r0, r5
   144d4:	bl	12084 <__assert_fail@plt+0xedc>
   144d8:	mov	r0, #0
   144dc:	add	sp, sp, #44	; 0x2c
   144e0:	ldrd	r4, [sp]
   144e4:	ldrd	r6, [sp, #8]
   144e8:	ldrd	r8, [sp, #16]
   144ec:	ldrd	sl, [sp, #24]
   144f0:	add	sp, sp, #32
   144f4:	pop	{pc}		; (ldr pc, [sp], #4)
   144f8:	add	r1, r3, #1
   144fc:	str	r3, [sp, #12]
   14500:	bl	15138 <__assert_fail@plt+0x3f90>
   14504:	ldrb	r5, [r4, #1]
   14508:	mov	r2, #0
   1450c:	mov	r7, r0
   14510:	ldr	r3, [sp, #12]
   14514:	cmp	r5, r2
   14518:	strb	r2, [r0, r3]
   1451c:	ldrb	r3, [r0]
   14520:	beq	14618 <__assert_fail@plt+0x3470>
   14524:	adds	r5, r4, #1
   14528:	moveq	r4, #1
   1452c:	movne	r4, r2
   14530:	cmp	r3, #43	; 0x2b
   14534:	beq	145c0 <__assert_fail@plt+0x3418>
   14538:	bl	10ee4 <getpwnam@plt>
   1453c:	cmp	r0, #0
   14540:	beq	145c0 <__assert_fail@plt+0x3418>
   14544:	cmp	r4, #0
   14548:	ldr	fp, [r0, #8]
   1454c:	moveq	r4, r7
   14550:	bne	14634 <__assert_fail@plt+0x348c>
   14554:	bl	11124 <endpwent@plt>
   14558:	cmp	r5, #0
   1455c:	beq	144a0 <__assert_fail@plt+0x32f8>
   14560:	ldrb	r3, [r5]
   14564:	cmp	r3, #43	; 0x2b
   14568:	bne	1447c <__assert_fail@plt+0x32d4>
   1456c:	movw	r0, #28224	; 0x6e40
   14570:	movt	r0, #1
   14574:	add	r3, sp, #16
   14578:	mov	r2, #10
   1457c:	mov	r1, #0
   14580:	str	r0, [sp]
   14584:	mov	r0, r5
   14588:	bl	15278 <__assert_fail@plt+0x40d0>
   1458c:	cmp	r0, #0
   14590:	bne	145a0 <__assert_fail@plt+0x33f8>
   14594:	ldr	sl, [sp, #16]
   14598:	cmn	sl, #1
   1459c:	bne	14490 <__assert_fail@plt+0x32e8>
   145a0:	bl	10ec0 <endgrent@plt>
   145a4:	mov	r0, r5
   145a8:	mov	r7, r4
   145ac:	bl	151d0 <__assert_fail@plt+0x4028>
   145b0:	movw	r4, #29344	; 0x72a0
   145b4:	movt	r4, #1
   145b8:	mov	r5, r0
   145bc:	b	145d8 <__assert_fail@plt+0x3430>
   145c0:	cmp	r4, #0
   145c4:	beq	14688 <__assert_fail@plt+0x34e0>
   145c8:	movw	r4, #29328	; 0x7290
   145cc:	movt	r4, #1
   145d0:	mov	r5, #0
   145d4:	bl	11124 <endpwent@plt>
   145d8:	mov	r0, r7
   145dc:	bl	12084 <__assert_fail@plt+0xedc>
   145e0:	mov	r0, r5
   145e4:	bl	12084 <__assert_fail@plt+0xedc>
   145e8:	mov	r1, r4
   145ec:	mov	r2, #5
   145f0:	mov	r0, #0
   145f4:	bl	10f74 <dcgettext@plt>
   145f8:	b	144dc <__assert_fail@plt+0x3334>
   145fc:	ldrb	r3, [r0]
   14600:	cmp	r3, #0
   14604:	bne	14664 <__assert_fail@plt+0x34bc>
   14608:	mov	r5, r4
   1460c:	b	144a0 <__assert_fail@plt+0x32f8>
   14610:	mov	r4, r2
   14614:	b	14608 <__assert_fail@plt+0x3460>
   14618:	cmp	r3, #43	; 0x2b
   1461c:	beq	145c8 <__assert_fail@plt+0x3420>
   14620:	bl	10ee4 <getpwnam@plt>
   14624:	cmp	r0, #0
   14628:	movne	r4, #1
   1462c:	bne	14544 <__assert_fail@plt+0x339c>
   14630:	b	145c8 <__assert_fail@plt+0x3420>
   14634:	ldr	sl, [r0, #12]
   14638:	mov	r0, sl
   1463c:	bl	11190 <getgrgid@plt>
   14640:	subs	r1, r0, #0
   14644:	beq	146f4 <__assert_fail@plt+0x354c>
   14648:	ldr	r0, [r1]
   1464c:	bl	151d0 <__assert_fail@plt+0x4028>
   14650:	mov	r5, r0
   14654:	mov	r4, r7
   14658:	bl	10ec0 <endgrent@plt>
   1465c:	bl	11124 <endpwent@plt>
   14660:	b	144a0 <__assert_fail@plt+0x32f8>
   14664:	bl	151d0 <__assert_fail@plt+0x4028>
   14668:	ldrb	r3, [r0]
   1466c:	mov	r7, r0
   14670:	cmp	r3, #43	; 0x2b
   14674:	moveq	r5, r4
   14678:	beq	14688 <__assert_fail@plt+0x34e0>
   1467c:	bl	10ee4 <getpwnam@plt>
   14680:	subs	r5, r0, #0
   14684:	bne	146e4 <__assert_fail@plt+0x353c>
   14688:	movw	r0, #28224	; 0x6e40
   1468c:	movt	r0, #1
   14690:	add	r3, sp, #16
   14694:	mov	r2, #10
   14698:	mov	r1, #0
   1469c:	str	r0, [sp]
   146a0:	mov	r0, r7
   146a4:	bl	15278 <__assert_fail@plt+0x40d0>
   146a8:	cmp	r0, #0
   146ac:	bne	146d0 <__assert_fail@plt+0x3528>
   146b0:	ldr	fp, [sp, #16]
   146b4:	cmn	fp, #1
   146b8:	beq	146d0 <__assert_fail@plt+0x3528>
   146bc:	bl	11124 <endpwent@plt>
   146c0:	cmp	r5, #0
   146c4:	mov	r4, r7
   146c8:	beq	144a0 <__assert_fail@plt+0x32f8>
   146cc:	b	14470 <__assert_fail@plt+0x32c8>
   146d0:	movw	r4, #29360	; 0x72b0
   146d4:	movt	r4, #1
   146d8:	bl	11124 <endpwent@plt>
   146dc:	mov	r5, #0
   146e0:	b	145d8 <__assert_fail@plt+0x3430>
   146e4:	ldr	fp, [r5, #8]
   146e8:	mov	r5, r4
   146ec:	mov	r4, r7
   146f0:	b	14554 <__assert_fail@plt+0x33ac>
   146f4:	add	r2, sp, #16
   146f8:	mov	r0, sl
   146fc:	bl	16494 <__assert_fail@plt+0x52ec>
   14700:	b	1464c <__assert_fail@plt+0x34a4>
   14704:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14708:	strd	r6, [sp, #8]
   1470c:	subs	r7, r2, #0
   14710:	strd	r8, [sp, #16]
   14714:	mov	r9, r1
   14718:	mov	r8, r3
   1471c:	str	sl, [sp, #24]
   14720:	str	lr, [sp, #28]
   14724:	sub	sp, sp, #8
   14728:	ldr	r6, [sp, #40]	; 0x28
   1472c:	beq	147c4 <__assert_fail@plt+0x361c>
   14730:	mov	r1, #58	; 0x3a
   14734:	mov	r5, r0
   14738:	bl	11094 <strchr@plt>
   1473c:	mov	sl, r0
   14740:	mov	r1, r0
   14744:	str	r8, [sp]
   14748:	mov	r3, r7
   1474c:	mov	r2, r9
   14750:	str	r6, [sp, #4]
   14754:	mov	r0, r5
   14758:	bl	143ec <__assert_fail@plt+0x3244>
   1475c:	cmp	sl, #0
   14760:	mov	r4, r0
   14764:	bne	147a4 <__assert_fail@plt+0x35fc>
   14768:	cmp	r0, #0
   1476c:	beq	147e4 <__assert_fail@plt+0x363c>
   14770:	mov	r1, #46	; 0x2e
   14774:	mov	r0, r5
   14778:	bl	11094 <strchr@plt>
   1477c:	subs	r1, r0, #0
   14780:	beq	147a4 <__assert_fail@plt+0x35fc>
   14784:	mov	r3, r7
   14788:	mov	r2, r9
   1478c:	str	r8, [sp]
   14790:	mov	r0, r5
   14794:	str	r6, [sp, #4]
   14798:	bl	143ec <__assert_fail@plt+0x3244>
   1479c:	cmp	r0, #0
   147a0:	beq	147e4 <__assert_fail@plt+0x363c>
   147a4:	mov	r0, r4
   147a8:	add	sp, sp, #8
   147ac:	ldrd	r4, [sp]
   147b0:	ldrd	r6, [sp, #8]
   147b4:	ldrd	r8, [sp, #16]
   147b8:	ldr	sl, [sp, #24]
   147bc:	add	sp, sp, #28
   147c0:	pop	{pc}		; (ldr pc, [sp], #4)
   147c4:	mov	r2, r1
   147c8:	mov	r3, r7
   147cc:	str	r8, [sp]
   147d0:	mov	r1, r7
   147d4:	str	r6, [sp, #4]
   147d8:	bl	143ec <__assert_fail@plt+0x3244>
   147dc:	mov	r4, r0
   147e0:	b	147a4 <__assert_fail@plt+0x35fc>
   147e4:	mov	r4, #0
   147e8:	b	147a4 <__assert_fail@plt+0x35fc>
   147ec:	cmp	r1, #0
   147f0:	strd	r4, [sp, #-16]!
   147f4:	mov	ip, r3
   147f8:	str	r6, [sp, #8]
   147fc:	mov	r4, r0
   14800:	str	lr, [sp, #12]
   14804:	sub	sp, sp, #32
   14808:	ldr	r5, [sp, #48]	; 0x30
   1480c:	ldr	r6, [sp, #52]	; 0x34
   14810:	beq	14954 <__assert_fail@plt+0x37ac>
   14814:	mov	r3, r1
   14818:	mov	r1, #1
   1481c:	stm	sp, {r2, ip}
   14820:	movw	r2, #29376	; 0x72c0
   14824:	movt	r2, #1
   14828:	bl	110e8 <__fprintf_chk@plt>
   1482c:	mov	r2, #5
   14830:	movw	r1, #29396	; 0x72d4
   14834:	movt	r1, #1
   14838:	mov	r0, #0
   1483c:	bl	10f74 <dcgettext@plt>
   14840:	movw	ip, #2022	; 0x7e6
   14844:	mov	r3, r0
   14848:	mov	r1, #1
   1484c:	movw	r2, #30124	; 0x75ac
   14850:	movt	r2, #1
   14854:	mov	r0, r4
   14858:	str	ip, [sp]
   1485c:	bl	110e8 <__fprintf_chk@plt>
   14860:	mov	r1, r4
   14864:	mov	r0, #10
   14868:	bl	10f68 <fputc_unlocked@plt>
   1486c:	mov	r2, #5
   14870:	movw	r1, #29400	; 0x72d8
   14874:	movt	r1, #1
   14878:	mov	r0, #0
   1487c:	bl	10f74 <dcgettext@plt>
   14880:	mov	r2, r0
   14884:	mov	r1, #1
   14888:	movw	r3, #29572	; 0x7384
   1488c:	movt	r3, #1
   14890:	mov	r0, r4
   14894:	bl	110e8 <__fprintf_chk@plt>
   14898:	mov	r1, r4
   1489c:	mov	r0, #10
   148a0:	bl	10f68 <fputc_unlocked@plt>
   148a4:	cmp	r6, #9
   148a8:	ldrls	pc, [pc, r6, lsl #2]
   148ac:	b	14bc0 <__assert_fail@plt+0x3a18>
   148b0:	andeq	r4, r1, r0, asr #18
   148b4:	andeq	r4, r1, r0, ror r9
   148b8:	andeq	r4, r1, ip, lsr #19
   148bc:	andeq	r4, r1, ip, ror #19
   148c0:	andeq	r4, r1, r4, lsr sl
   148c4:	andeq	r4, r1, ip, ror #20
   148c8:			; <UNDEFINED> instruction: 0x00014ab4
   148cc:	andeq	r4, r1, r8, lsl #22
   148d0:	andeq	r4, r1, r0, ror #22
   148d4:	ldrdeq	r4, [r1], -r8
   148d8:	movw	r1, #29876	; 0x74b4
   148dc:	movt	r1, #1
   148e0:	mov	r2, #5
   148e4:	mov	r0, #0
   148e8:	bl	10f74 <dcgettext@plt>
   148ec:	ldr	lr, [r5, #4]
   148f0:	mov	r2, r0
   148f4:	mov	r1, #1
   148f8:	mov	r0, r4
   148fc:	ldr	r3, [r5, #8]
   14900:	ldr	ip, [r5, #32]
   14904:	str	lr, [sp]
   14908:	ldr	lr, [r5, #12]
   1490c:	str	ip, [sp, #28]
   14910:	ldr	ip, [r5, #28]
   14914:	str	r3, [sp, #4]
   14918:	ldr	r3, [r5, #16]
   1491c:	str	lr, [sp, #8]
   14920:	ldr	lr, [r5, #20]
   14924:	str	ip, [sp, #24]
   14928:	ldr	ip, [r5, #24]
   1492c:	str	r3, [sp, #12]
   14930:	ldr	r3, [r5]
   14934:	str	lr, [sp, #16]
   14938:	str	ip, [sp, #20]
   1493c:	bl	110e8 <__fprintf_chk@plt>
   14940:	add	sp, sp, #32
   14944:	ldrd	r4, [sp]
   14948:	ldr	r6, [sp, #8]
   1494c:	add	sp, sp, #12
   14950:	pop	{pc}		; (ldr pc, [sp], #4)
   14954:	mov	r3, r2
   14958:	mov	r1, #1
   1495c:	str	ip, [sp]
   14960:	movw	r2, #29388	; 0x72cc
   14964:	movt	r2, #1
   14968:	bl	110e8 <__fprintf_chk@plt>
   1496c:	b	1482c <__assert_fail@plt+0x3684>
   14970:	mov	r2, #5
   14974:	movw	r1, #29608	; 0x73a8
   14978:	movt	r1, #1
   1497c:	mov	r0, #0
   14980:	bl	10f74 <dcgettext@plt>
   14984:	ldr	r3, [r5]
   14988:	mov	r2, r0
   1498c:	mov	r1, #1
   14990:	mov	r0, r4
   14994:	add	sp, sp, #32
   14998:	ldrd	r4, [sp]
   1499c:	ldr	r6, [sp, #8]
   149a0:	ldr	lr, [sp, #12]
   149a4:	add	sp, sp, #16
   149a8:	b	110e8 <__fprintf_chk@plt>
   149ac:	mov	r2, #5
   149b0:	movw	r1, #29624	; 0x73b8
   149b4:	movt	r1, #1
   149b8:	mov	r0, #0
   149bc:	bl	10f74 <dcgettext@plt>
   149c0:	ldm	r5, {r3, ip}
   149c4:	mov	r2, r0
   149c8:	mov	r1, #1
   149cc:	mov	r0, r4
   149d0:	str	ip, [sp, #48]	; 0x30
   149d4:	add	sp, sp, #32
   149d8:	ldrd	r4, [sp]
   149dc:	ldr	r6, [sp, #8]
   149e0:	ldr	lr, [sp, #12]
   149e4:	add	sp, sp, #16
   149e8:	b	110e8 <__fprintf_chk@plt>
   149ec:	mov	r2, #5
   149f0:	movw	r1, #29648	; 0x73d0
   149f4:	movt	r1, #1
   149f8:	mov	r0, #0
   149fc:	bl	10f74 <dcgettext@plt>
   14a00:	ldm	r5, {r3, lr}
   14a04:	mov	r2, r0
   14a08:	mov	r1, #1
   14a0c:	mov	r0, r4
   14a10:	ldr	ip, [r5, #8]
   14a14:	str	lr, [sp, #48]	; 0x30
   14a18:	str	ip, [sp, #52]	; 0x34
   14a1c:	add	sp, sp, #32
   14a20:	ldrd	r4, [sp]
   14a24:	ldr	r6, [sp, #8]
   14a28:	ldr	lr, [sp, #12]
   14a2c:	add	sp, sp, #16
   14a30:	b	110e8 <__fprintf_chk@plt>
   14a34:	mov	r2, #5
   14a38:	movw	r1, #29676	; 0x73ec
   14a3c:	movt	r1, #1
   14a40:	mov	r0, #0
   14a44:	bl	10f74 <dcgettext@plt>
   14a48:	ldmib	r5, {r3, ip, lr}
   14a4c:	mov	r2, r0
   14a50:	mov	r1, #1
   14a54:	mov	r0, r4
   14a58:	str	r3, [sp]
   14a5c:	ldr	r3, [r5]
   14a60:	stmib	sp, {ip, lr}
   14a64:	bl	110e8 <__fprintf_chk@plt>
   14a68:	b	14940 <__assert_fail@plt+0x3798>
   14a6c:	mov	r2, #5
   14a70:	movw	r1, #29708	; 0x740c
   14a74:	movt	r1, #1
   14a78:	mov	r0, #0
   14a7c:	bl	10f74 <dcgettext@plt>
   14a80:	ldmib	r5, {ip, lr}
   14a84:	mov	r2, r0
   14a88:	mov	r1, #1
   14a8c:	mov	r0, r4
   14a90:	ldr	r3, [r5, #16]
   14a94:	str	ip, [sp]
   14a98:	ldr	ip, [r5, #12]
   14a9c:	str	r3, [sp, #12]
   14aa0:	ldr	r3, [r5]
   14aa4:	str	lr, [sp, #4]
   14aa8:	str	ip, [sp, #8]
   14aac:	bl	110e8 <__fprintf_chk@plt>
   14ab0:	b	14940 <__assert_fail@plt+0x3798>
   14ab4:	mov	r2, #5
   14ab8:	movw	r1, #29744	; 0x7430
   14abc:	movt	r1, #1
   14ac0:	mov	r0, #0
   14ac4:	bl	10f74 <dcgettext@plt>
   14ac8:	ldr	lr, [r5, #4]
   14acc:	mov	r2, r0
   14ad0:	mov	r1, #1
   14ad4:	mov	r0, r4
   14ad8:	ldr	r3, [r5, #8]
   14adc:	ldr	ip, [r5, #20]
   14ae0:	str	lr, [sp]
   14ae4:	ldr	lr, [r5, #12]
   14ae8:	str	ip, [sp, #16]
   14aec:	ldr	ip, [r5, #16]
   14af0:	str	r3, [sp, #4]
   14af4:	ldr	r3, [r5]
   14af8:	str	lr, [sp, #8]
   14afc:	str	ip, [sp, #12]
   14b00:	bl	110e8 <__fprintf_chk@plt>
   14b04:	b	14940 <__assert_fail@plt+0x3798>
   14b08:	mov	r2, #5
   14b0c:	movw	r1, #29784	; 0x7458
   14b10:	movt	r1, #1
   14b14:	mov	r0, #0
   14b18:	bl	10f74 <dcgettext@plt>
   14b1c:	ldmib	r5, {r3, ip}
   14b20:	mov	r2, r0
   14b24:	mov	r1, #1
   14b28:	mov	r0, r4
   14b2c:	ldr	lr, [r5, #24]
   14b30:	str	r3, [sp]
   14b34:	ldr	r3, [r5, #12]
   14b38:	str	lr, [sp, #20]
   14b3c:	ldr	lr, [r5, #20]
   14b40:	str	ip, [sp, #4]
   14b44:	ldr	ip, [r5, #16]
   14b48:	str	r3, [sp, #8]
   14b4c:	ldr	r3, [r5]
   14b50:	str	ip, [sp, #12]
   14b54:	str	lr, [sp, #16]
   14b58:	bl	110e8 <__fprintf_chk@plt>
   14b5c:	b	14940 <__assert_fail@plt+0x3798>
   14b60:	mov	r2, #5
   14b64:	movw	r1, #29828	; 0x7484
   14b68:	movt	r1, #1
   14b6c:	mov	r0, #0
   14b70:	bl	10f74 <dcgettext@plt>
   14b74:	ldmib	r5, {ip, lr}
   14b78:	mov	r2, r0
   14b7c:	mov	r1, #1
   14b80:	mov	r0, r4
   14b84:	ldr	r3, [r5, #28]
   14b88:	str	ip, [sp]
   14b8c:	ldr	ip, [r5, #12]
   14b90:	str	r3, [sp, #24]
   14b94:	ldr	r3, [r5, #24]
   14b98:	str	lr, [sp, #4]
   14b9c:	ldr	lr, [r5, #16]
   14ba0:	str	ip, [sp, #8]
   14ba4:	ldr	ip, [r5, #20]
   14ba8:	str	r3, [sp, #20]
   14bac:	ldr	r3, [r5]
   14bb0:	str	lr, [sp, #12]
   14bb4:	str	ip, [sp, #16]
   14bb8:	bl	110e8 <__fprintf_chk@plt>
   14bbc:	b	14940 <__assert_fail@plt+0x3798>
   14bc0:	movw	r1, #29928	; 0x74e8
   14bc4:	movt	r1, #1
   14bc8:	b	148e0 <__assert_fail@plt+0x3738>
   14bcc:	strd	r4, [sp, #-12]!
   14bd0:	str	lr, [sp, #8]
   14bd4:	sub	sp, sp, #12
   14bd8:	ldr	r5, [sp, #24]
   14bdc:	ldr	ip, [r5]
   14be0:	cmp	ip, #0
   14be4:	beq	14c00 <__assert_fail@plt+0x3a58>
   14be8:	mov	lr, r5
   14bec:	mov	ip, #0
   14bf0:	ldr	r4, [lr, #4]!
   14bf4:	add	ip, ip, #1
   14bf8:	cmp	r4, #0
   14bfc:	bne	14bf0 <__assert_fail@plt+0x3a48>
   14c00:	stm	sp, {r5, ip}
   14c04:	bl	147ec <__assert_fail@plt+0x3644>
   14c08:	add	sp, sp, #12
   14c0c:	ldrd	r4, [sp]
   14c10:	add	sp, sp, #8
   14c14:	pop	{pc}		; (ldr pc, [sp], #4)
   14c18:	strd	r4, [sp, #-16]!
   14c1c:	mov	ip, #0
   14c20:	str	r6, [sp, #8]
   14c24:	str	lr, [sp, #12]
   14c28:	sub	sp, sp, #48	; 0x30
   14c2c:	ldr	r5, [sp, #64]	; 0x40
   14c30:	add	r6, sp, #8
   14c34:	mov	r4, r6
   14c38:	ldr	lr, [r5], #4
   14c3c:	cmp	lr, #0
   14c40:	str	lr, [r4], #4
   14c44:	beq	14c54 <__assert_fail@plt+0x3aac>
   14c48:	add	ip, ip, #1
   14c4c:	cmp	ip, #10
   14c50:	bne	14c38 <__assert_fail@plt+0x3a90>
   14c54:	stm	sp, {r6, ip}
   14c58:	bl	147ec <__assert_fail@plt+0x3644>
   14c5c:	add	sp, sp, #48	; 0x30
   14c60:	ldrd	r4, [sp]
   14c64:	ldr	r6, [sp, #8]
   14c68:	add	sp, sp, #12
   14c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c70:	push	{r3}		; (str r3, [sp, #-4]!)
   14c74:	mov	ip, #0
   14c78:	strd	r4, [sp, #-12]!
   14c7c:	str	lr, [sp, #8]
   14c80:	sub	sp, sp, #56	; 0x38
   14c84:	add	r3, sp, #72	; 0x48
   14c88:	add	r5, sp, #16
   14c8c:	mov	r4, r3
   14c90:	mov	lr, r5
   14c94:	str	r3, [sp, #12]
   14c98:	ldr	r3, [r4], #4
   14c9c:	cmp	r3, #0
   14ca0:	str	r3, [lr], #4
   14ca4:	beq	14cb4 <__assert_fail@plt+0x3b0c>
   14ca8:	add	ip, ip, #1
   14cac:	cmp	ip, #10
   14cb0:	bne	14c98 <__assert_fail@plt+0x3af0>
   14cb4:	ldr	r3, [sp, #68]	; 0x44
   14cb8:	stm	sp, {r5, ip}
   14cbc:	bl	147ec <__assert_fail@plt+0x3644>
   14cc0:	add	sp, sp, #56	; 0x38
   14cc4:	ldrd	r4, [sp]
   14cc8:	ldr	lr, [sp, #8]
   14ccc:	add	sp, sp, #12
   14cd0:	add	sp, sp, #4
   14cd4:	bx	lr
   14cd8:	movw	r3, #33140	; 0x8174
   14cdc:	movt	r3, #2
   14ce0:	str	r4, [sp, #-8]!
   14ce4:	mov	r0, #10
   14ce8:	ldr	r1, [r3]
   14cec:	str	lr, [sp, #4]
   14cf0:	bl	10f68 <fputc_unlocked@plt>
   14cf4:	mov	r2, #5
   14cf8:	movw	r1, #29988	; 0x7524
   14cfc:	movt	r1, #1
   14d00:	mov	r0, #0
   14d04:	bl	10f74 <dcgettext@plt>
   14d08:	mov	r1, r0
   14d0c:	movw	r2, #30008	; 0x7538
   14d10:	movt	r2, #1
   14d14:	mov	r0, #1
   14d18:	bl	110d0 <__printf_chk@plt>
   14d1c:	mov	r2, #5
   14d20:	movw	r1, #30032	; 0x7550
   14d24:	movt	r1, #1
   14d28:	mov	r0, #0
   14d2c:	bl	10f74 <dcgettext@plt>
   14d30:	mov	r1, r0
   14d34:	movw	r3, #28252	; 0x6e5c
   14d38:	movt	r3, #1
   14d3c:	movw	r2, #28292	; 0x6e84
   14d40:	movt	r2, #1
   14d44:	mov	r0, #1
   14d48:	bl	110d0 <__printf_chk@plt>
   14d4c:	mov	r2, #5
   14d50:	movw	r1, #30052	; 0x7564
   14d54:	movt	r1, #1
   14d58:	mov	r0, #0
   14d5c:	bl	10f74 <dcgettext@plt>
   14d60:	mov	r1, r0
   14d64:	movw	r2, #30092	; 0x758c
   14d68:	movt	r2, #1
   14d6c:	mov	r0, #1
   14d70:	ldr	r4, [sp]
   14d74:	ldr	lr, [sp, #4]
   14d78:	add	sp, sp, #8
   14d7c:	b	110d0 <__printf_chk@plt>
   14d80:	str	r4, [sp, #-8]!
   14d84:	str	lr, [sp, #4]
   14d88:	bl	16194 <__assert_fail@plt+0x4fec>
   14d8c:	cmp	r0, #0
   14d90:	beq	14da0 <__assert_fail@plt+0x3bf8>
   14d94:	ldr	r4, [sp]
   14d98:	add	sp, sp, #4
   14d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14da0:	bl	151f8 <__assert_fail@plt+0x4050>
   14da4:	str	r4, [sp, #-8]!
   14da8:	str	lr, [sp, #4]
   14dac:	bl	16194 <__assert_fail@plt+0x4fec>
   14db0:	cmp	r0, #0
   14db4:	beq	14dc4 <__assert_fail@plt+0x3c1c>
   14db8:	ldr	r4, [sp]
   14dbc:	add	sp, sp, #4
   14dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc4:	bl	151f8 <__assert_fail@plt+0x4050>
   14dc8:	str	r4, [sp, #-8]!
   14dcc:	str	lr, [sp, #4]
   14dd0:	bl	16194 <__assert_fail@plt+0x4fec>
   14dd4:	cmp	r0, #0
   14dd8:	beq	14de8 <__assert_fail@plt+0x3c40>
   14ddc:	ldr	r4, [sp]
   14de0:	add	sp, sp, #4
   14de4:	pop	{pc}		; (ldr pc, [sp], #4)
   14de8:	bl	151f8 <__assert_fail@plt+0x4050>
   14dec:	strd	r4, [sp, #-16]!
   14df0:	mov	r5, r0
   14df4:	mov	r4, r1
   14df8:	str	r6, [sp, #8]
   14dfc:	str	lr, [sp, #12]
   14e00:	bl	161d0 <__assert_fail@plt+0x5028>
   14e04:	cmp	r0, #0
   14e08:	beq	14e1c <__assert_fail@plt+0x3c74>
   14e0c:	ldrd	r4, [sp]
   14e10:	ldr	r6, [sp, #8]
   14e14:	add	sp, sp, #12
   14e18:	pop	{pc}		; (ldr pc, [sp], #4)
   14e1c:	adds	r4, r4, #0
   14e20:	movne	r4, #1
   14e24:	cmp	r5, #0
   14e28:	moveq	r4, #1
   14e2c:	cmp	r4, #0
   14e30:	beq	14e0c <__assert_fail@plt+0x3c64>
   14e34:	bl	151f8 <__assert_fail@plt+0x4050>
   14e38:	cmp	r1, #0
   14e3c:	orreq	r1, r1, #1
   14e40:	str	r4, [sp, #-8]!
   14e44:	str	lr, [sp, #4]
   14e48:	bl	161d0 <__assert_fail@plt+0x5028>
   14e4c:	cmp	r0, #0
   14e50:	beq	14e60 <__assert_fail@plt+0x3cb8>
   14e54:	ldr	r4, [sp]
   14e58:	add	sp, sp, #4
   14e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e60:	bl	151f8 <__assert_fail@plt+0x4050>
   14e64:	strd	r4, [sp, #-16]!
   14e68:	mov	r4, r0
   14e6c:	mov	r5, r2
   14e70:	str	r6, [sp, #8]
   14e74:	mov	r6, r1
   14e78:	str	lr, [sp, #12]
   14e7c:	bl	167f8 <__assert_fail@plt+0x5650>
   14e80:	cmp	r0, #0
   14e84:	beq	14e98 <__assert_fail@plt+0x3cf0>
   14e88:	ldrd	r4, [sp]
   14e8c:	ldr	r6, [sp, #8]
   14e90:	add	sp, sp, #12
   14e94:	pop	{pc}		; (ldr pc, [sp], #4)
   14e98:	cmp	r4, #0
   14e9c:	beq	14eac <__assert_fail@plt+0x3d04>
   14ea0:	cmp	r6, #0
   14ea4:	cmpne	r5, #0
   14ea8:	beq	14e88 <__assert_fail@plt+0x3ce0>
   14eac:	bl	151f8 <__assert_fail@plt+0x4050>
   14eb0:	b	14e64 <__assert_fail@plt+0x3cbc>
   14eb4:	cmp	r2, #0
   14eb8:	cmpne	r1, #0
   14ebc:	str	r4, [sp, #-8]!
   14ec0:	moveq	r2, #1
   14ec4:	str	lr, [sp, #4]
   14ec8:	moveq	r1, r2
   14ecc:	bl	167f8 <__assert_fail@plt+0x5650>
   14ed0:	cmp	r0, #0
   14ed4:	beq	14ee4 <__assert_fail@plt+0x3d3c>
   14ed8:	ldr	r4, [sp]
   14edc:	add	sp, sp, #4
   14ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ee4:	bl	151f8 <__assert_fail@plt+0x4050>
   14ee8:	mov	r2, r1
   14eec:	mov	r1, r0
   14ef0:	mov	r0, #0
   14ef4:	b	14e64 <__assert_fail@plt+0x3cbc>
   14ef8:	mov	r2, r1
   14efc:	mov	r1, r0
   14f00:	mov	r0, #0
   14f04:	b	14eb4 <__assert_fail@plt+0x3d0c>
   14f08:	cmp	r0, #0
   14f0c:	strd	r4, [sp, #-16]!
   14f10:	mov	r5, r1
   14f14:	ldr	r4, [r1]
   14f18:	str	r6, [sp, #8]
   14f1c:	str	lr, [sp, #12]
   14f20:	beq	14f50 <__assert_fail@plt+0x3da8>
   14f24:	lsr	r3, r4, #1
   14f28:	add	r3, r3, #1
   14f2c:	adds	r4, r4, r3
   14f30:	bcs	14f6c <__assert_fail@plt+0x3dc4>
   14f34:	mov	r1, r4
   14f38:	bl	14e64 <__assert_fail@plt+0x3cbc>
   14f3c:	ldr	r6, [sp, #8]
   14f40:	str	r4, [r5]
   14f44:	ldrd	r4, [sp]
   14f48:	add	sp, sp, #12
   14f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f50:	cmp	r4, #0
   14f54:	bne	14f34 <__assert_fail@plt+0x3d8c>
   14f58:	mov	r4, #64	; 0x40
   14f5c:	udiv	r4, r4, r2
   14f60:	cmp	r2, #64	; 0x40
   14f64:	addhi	r4, r4, #1
   14f68:	b	14f34 <__assert_fail@plt+0x3d8c>
   14f6c:	bl	151f8 <__assert_fail@plt+0x4050>
   14f70:	mov	r2, #1
   14f74:	b	14f08 <__assert_fail@plt+0x3d60>
   14f78:	ldr	ip, [r1]
   14f7c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14f80:	mov	r5, r1
   14f84:	strd	r6, [sp, #8]
   14f88:	str	lr, [sp, #28]
   14f8c:	strd	r8, [sp, #16]
   14f90:	asr	lr, ip, #1
   14f94:	ldr	r8, [sp, #32]
   14f98:	str	sl, [sp, #24]
   14f9c:	adds	r4, ip, lr
   14fa0:	mvn	lr, r3
   14fa4:	lsr	lr, lr, #31
   14fa8:	mvnvs	r4, #-2147483648	; 0x80000000
   14fac:	cmp	r3, r4
   14fb0:	movge	r1, #0
   14fb4:	andlt	r1, lr, #1
   14fb8:	cmp	r1, #0
   14fbc:	movne	r4, r3
   14fc0:	smull	r6, r7, r4, r8
   14fc4:	cmp	r7, r6, asr #31
   14fc8:	bne	15050 <__assert_fail@plt+0x3ea8>
   14fcc:	cmp	r6, #63	; 0x3f
   14fd0:	mov	r1, r6
   14fd4:	ble	15038 <__assert_fail@plt+0x3e90>
   14fd8:	cmp	r0, #0
   14fdc:	sub	r6, r4, ip
   14fe0:	streq	r0, [r5]
   14fe4:	cmp	r6, r2
   14fe8:	bge	15018 <__assert_fail@plt+0x3e70>
   14fec:	adds	r4, ip, r2
   14ff0:	bvs	1504c <__assert_fail@plt+0x3ea4>
   14ff4:	cmp	r4, r3
   14ff8:	movle	r3, #0
   14ffc:	andgt	r3, lr, #1
   15000:	cmp	r3, #0
   15004:	bne	1504c <__assert_fail@plt+0x3ea4>
   15008:	smull	r8, r9, r4, r8
   1500c:	cmp	r9, r8, asr #31
   15010:	mov	r1, r8
   15014:	bne	1504c <__assert_fail@plt+0x3ea4>
   15018:	bl	14dec <__assert_fail@plt+0x3c44>
   1501c:	ldrd	r6, [sp, #8]
   15020:	ldrd	r8, [sp, #16]
   15024:	ldr	sl, [sp, #24]
   15028:	str	r4, [r5]
   1502c:	ldrd	r4, [sp]
   15030:	add	sp, sp, #28
   15034:	pop	{pc}		; (ldr pc, [sp], #4)
   15038:	mov	r6, #64	; 0x40
   1503c:	sdiv	r4, r6, r8
   15040:	mls	r1, r8, r4, r6
   15044:	sub	r1, r6, r1
   15048:	b	14fd8 <__assert_fail@plt+0x3e30>
   1504c:	bl	151f8 <__assert_fail@plt+0x4050>
   15050:	mvn	r6, #-2147483648	; 0x80000000
   15054:	b	1503c <__assert_fail@plt+0x3e94>
   15058:	mov	r1, #1
   1505c:	str	r4, [sp, #-8]!
   15060:	str	lr, [sp, #4]
   15064:	bl	16120 <__assert_fail@plt+0x4f78>
   15068:	cmp	r0, #0
   1506c:	beq	1507c <__assert_fail@plt+0x3ed4>
   15070:	ldr	r4, [sp]
   15074:	add	sp, sp, #4
   15078:	pop	{pc}		; (ldr pc, [sp], #4)
   1507c:	bl	151f8 <__assert_fail@plt+0x4050>
   15080:	mov	r1, #1
   15084:	str	r4, [sp, #-8]!
   15088:	str	lr, [sp, #4]
   1508c:	bl	16120 <__assert_fail@plt+0x4f78>
   15090:	cmp	r0, #0
   15094:	beq	150a4 <__assert_fail@plt+0x3efc>
   15098:	ldr	r4, [sp]
   1509c:	add	sp, sp, #4
   150a0:	pop	{pc}		; (ldr pc, [sp], #4)
   150a4:	bl	151f8 <__assert_fail@plt+0x4050>
   150a8:	str	r4, [sp, #-8]!
   150ac:	str	lr, [sp, #4]
   150b0:	bl	16120 <__assert_fail@plt+0x4f78>
   150b4:	cmp	r0, #0
   150b8:	beq	150c8 <__assert_fail@plt+0x3f20>
   150bc:	ldr	r4, [sp]
   150c0:	add	sp, sp, #4
   150c4:	pop	{pc}		; (ldr pc, [sp], #4)
   150c8:	bl	151f8 <__assert_fail@plt+0x4050>
   150cc:	str	r4, [sp, #-8]!
   150d0:	str	lr, [sp, #4]
   150d4:	bl	16120 <__assert_fail@plt+0x4f78>
   150d8:	cmp	r0, #0
   150dc:	beq	150ec <__assert_fail@plt+0x3f44>
   150e0:	ldr	r4, [sp]
   150e4:	add	sp, sp, #4
   150e8:	pop	{pc}		; (ldr pc, [sp], #4)
   150ec:	bl	151f8 <__assert_fail@plt+0x4050>
   150f0:	strd	r4, [sp, #-16]!
   150f4:	mov	r4, r1
   150f8:	str	r6, [sp, #8]
   150fc:	mov	r6, r0
   15100:	mov	r0, r1
   15104:	str	lr, [sp, #12]
   15108:	bl	16194 <__assert_fail@plt+0x4fec>
   1510c:	subs	r5, r0, #0
   15110:	beq	15134 <__assert_fail@plt+0x3f8c>
   15114:	mov	r2, r4
   15118:	mov	r1, r6
   1511c:	bl	10f2c <memcpy@plt>
   15120:	mov	r0, r5
   15124:	ldrd	r4, [sp]
   15128:	ldr	r6, [sp, #8]
   1512c:	add	sp, sp, #12
   15130:	pop	{pc}		; (ldr pc, [sp], #4)
   15134:	bl	151f8 <__assert_fail@plt+0x4050>
   15138:	strd	r4, [sp, #-16]!
   1513c:	mov	r4, r1
   15140:	str	r6, [sp, #8]
   15144:	mov	r6, r0
   15148:	mov	r0, r1
   1514c:	str	lr, [sp, #12]
   15150:	bl	16194 <__assert_fail@plt+0x4fec>
   15154:	subs	r5, r0, #0
   15158:	beq	1517c <__assert_fail@plt+0x3fd4>
   1515c:	mov	r2, r4
   15160:	mov	r1, r6
   15164:	bl	10f2c <memcpy@plt>
   15168:	mov	r0, r5
   1516c:	ldrd	r4, [sp]
   15170:	ldr	r6, [sp, #8]
   15174:	add	sp, sp, #12
   15178:	pop	{pc}		; (ldr pc, [sp], #4)
   1517c:	bl	151f8 <__assert_fail@plt+0x4050>
   15180:	strd	r4, [sp, #-16]!
   15184:	mov	r4, r1
   15188:	str	r6, [sp, #8]
   1518c:	mov	r6, r0
   15190:	add	r0, r1, #1
   15194:	str	lr, [sp, #12]
   15198:	bl	16194 <__assert_fail@plt+0x4fec>
   1519c:	subs	r5, r0, #0
   151a0:	beq	151cc <__assert_fail@plt+0x4024>
   151a4:	mov	r3, #0
   151a8:	mov	r1, r6
   151ac:	mov	r2, r4
   151b0:	strb	r3, [r5, r4]
   151b4:	bl	10f2c <memcpy@plt>
   151b8:	mov	r0, r5
   151bc:	ldrd	r4, [sp]
   151c0:	ldr	r6, [sp, #8]
   151c4:	add	sp, sp, #12
   151c8:	pop	{pc}		; (ldr pc, [sp], #4)
   151cc:	bl	151f8 <__assert_fail@plt+0x4050>
   151d0:	str	r4, [sp, #-8]!
   151d4:	mov	r4, r0
   151d8:	str	lr, [sp, #4]
   151dc:	bl	11088 <strlen@plt>
   151e0:	add	r1, r0, #1
   151e4:	mov	r0, r4
   151e8:	ldr	r4, [sp]
   151ec:	ldr	lr, [sp, #4]
   151f0:	add	sp, sp, #8
   151f4:	b	150f0 <__assert_fail@plt+0x3f48>
   151f8:	movw	r3, #33052	; 0x811c
   151fc:	movt	r3, #2
   15200:	str	r4, [sp, #-8]!
   15204:	ldr	r4, [r3]
   15208:	mov	r2, #5
   1520c:	movw	r1, #30172	; 0x75dc
   15210:	movt	r1, #1
   15214:	mov	r0, #0
   15218:	str	lr, [sp, #4]
   1521c:	bl	10f74 <dcgettext@plt>
   15220:	mov	r3, r0
   15224:	movw	r2, #29044	; 0x7174
   15228:	movt	r2, #1
   1522c:	mov	r1, #0
   15230:	mov	r0, r4
   15234:	bl	11004 <error@plt>
   15238:	bl	11184 <abort@plt>
   1523c:	str	r4, [sp, #-8]!
   15240:	str	lr, [sp, #4]
   15244:	bl	1660c <__assert_fail@plt+0x5464>
   15248:	cmn	r0, #1
   1524c:	mov	r4, r0
   15250:	beq	15264 <__assert_fail@plt+0x40bc>
   15254:	mov	r0, r4
   15258:	ldr	r4, [sp]
   1525c:	add	sp, sp, #4
   15260:	pop	{pc}		; (ldr pc, [sp], #4)
   15264:	bl	110a0 <__errno_location@plt>
   15268:	ldr	r3, [r0]
   1526c:	cmp	r3, #12
   15270:	bne	15254 <__assert_fail@plt+0x40ac>
   15274:	bl	151f8 <__assert_fail@plt+0x4050>
   15278:	cmp	r2, #36	; 0x24
   1527c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15280:	strd	r6, [sp, #8]
   15284:	strd	r8, [sp, #16]
   15288:	strd	sl, [sp, #24]
   1528c:	str	lr, [sp, #32]
   15290:	sub	sp, sp, #12
   15294:	bhi	15758 <__assert_fail@plt+0x45b0>
   15298:	cmp	r1, #0
   1529c:	mov	r7, r2
   152a0:	mov	r8, r0
   152a4:	mov	r5, r1
   152a8:	mov	r6, r3
   152ac:	addeq	r5, sp, #4
   152b0:	bl	110a0 <__errno_location@plt>
   152b4:	mov	r3, #0
   152b8:	mov	r9, r0
   152bc:	str	r3, [r0]
   152c0:	bl	11064 <__ctype_b_loc@plt>
   152c4:	ldrb	r3, [r8]
   152c8:	mov	r2, r8
   152cc:	ldr	r0, [r0]
   152d0:	b	152d8 <__assert_fail@plt+0x4130>
   152d4:	ldrb	r3, [r2, #1]!
   152d8:	lsl	r1, r3, #1
   152dc:	ldrh	r4, [r0, r1]
   152e0:	ands	r4, r4, #8192	; 0x2000
   152e4:	bne	152d4 <__assert_fail@plt+0x412c>
   152e8:	cmp	r3, #45	; 0x2d
   152ec:	beq	15380 <__assert_fail@plt+0x41d8>
   152f0:	mov	r2, r7
   152f4:	mov	r1, r5
   152f8:	mov	r0, r8
   152fc:	bl	1107c <strtoul@plt>
   15300:	ldr	r7, [r5]
   15304:	mov	sl, r0
   15308:	cmp	r7, r8
   1530c:	beq	15368 <__assert_fail@plt+0x41c0>
   15310:	ldr	r4, [r9]
   15314:	cmp	r4, #0
   15318:	bne	15358 <__assert_fail@plt+0x41b0>
   1531c:	ldr	r3, [sp, #48]	; 0x30
   15320:	cmp	r3, #0
   15324:	beq	15334 <__assert_fail@plt+0x418c>
   15328:	ldrb	r8, [r7]
   1532c:	cmp	r8, #0
   15330:	bne	155f0 <__assert_fail@plt+0x4448>
   15334:	str	sl, [r6]
   15338:	mov	r0, r4
   1533c:	add	sp, sp, #12
   15340:	ldrd	r4, [sp]
   15344:	ldrd	r6, [sp, #8]
   15348:	ldrd	r8, [sp, #16]
   1534c:	ldrd	sl, [sp, #24]
   15350:	add	sp, sp, #32
   15354:	pop	{pc}		; (ldr pc, [sp], #4)
   15358:	cmp	r4, #34	; 0x22
   1535c:	bne	15380 <__assert_fail@plt+0x41d8>
   15360:	mov	r4, #1
   15364:	b	1531c <__assert_fail@plt+0x4174>
   15368:	ldr	r3, [sp, #48]	; 0x30
   1536c:	cmp	r3, #0
   15370:	beq	15380 <__assert_fail@plt+0x41d8>
   15374:	ldrb	r8, [r8]
   15378:	cmp	r8, #0
   1537c:	bne	15388 <__assert_fail@plt+0x41e0>
   15380:	mov	r4, #4
   15384:	b	15338 <__assert_fail@plt+0x4190>
   15388:	mov	r1, r8
   1538c:	mov	r0, r3
   15390:	bl	11094 <strchr@plt>
   15394:	cmp	r0, #0
   15398:	movne	sl, #1
   1539c:	beq	15380 <__assert_fail@plt+0x41d8>
   153a0:	sub	r3, r8, #69	; 0x45
   153a4:	cmp	r3, #47	; 0x2f
   153a8:	ldrls	pc, [pc, r3, lsl #2]
   153ac:	b	154b0 <__assert_fail@plt+0x4308>
   153b0:	andeq	r5, r1, r0, ror r4
   153b4:			; <UNDEFINED> instruction: 0x000154b0
   153b8:	andeq	r5, r1, r0, ror r4
   153bc:			; <UNDEFINED> instruction: 0x000154b0
   153c0:			; <UNDEFINED> instruction: 0x000154b0
   153c4:			; <UNDEFINED> instruction: 0x000154b0
   153c8:	andeq	r5, r1, r0, ror r4
   153cc:			; <UNDEFINED> instruction: 0x000154b0
   153d0:	andeq	r5, r1, r0, ror r4
   153d4:			; <UNDEFINED> instruction: 0x000154b0
   153d8:			; <UNDEFINED> instruction: 0x000154b0
   153dc:	andeq	r5, r1, r0, ror r4
   153e0:			; <UNDEFINED> instruction: 0x000154b0
   153e4:			; <UNDEFINED> instruction: 0x000154b0
   153e8:			; <UNDEFINED> instruction: 0x000154b0
   153ec:	andeq	r5, r1, r0, ror r4
   153f0:			; <UNDEFINED> instruction: 0x000154b0
   153f4:			; <UNDEFINED> instruction: 0x000154b0
   153f8:			; <UNDEFINED> instruction: 0x000154b0
   153fc:			; <UNDEFINED> instruction: 0x000154b0
   15400:	andeq	r5, r1, r0, ror r4
   15404:	andeq	r5, r1, r0, ror r4
   15408:			; <UNDEFINED> instruction: 0x000154b0
   1540c:			; <UNDEFINED> instruction: 0x000154b0
   15410:			; <UNDEFINED> instruction: 0x000154b0
   15414:			; <UNDEFINED> instruction: 0x000154b0
   15418:			; <UNDEFINED> instruction: 0x000154b0
   1541c:			; <UNDEFINED> instruction: 0x000154b0
   15420:			; <UNDEFINED> instruction: 0x000154b0
   15424:			; <UNDEFINED> instruction: 0x000154b0
   15428:			; <UNDEFINED> instruction: 0x000154b0
   1542c:			; <UNDEFINED> instruction: 0x000154b0
   15430:			; <UNDEFINED> instruction: 0x000154b0
   15434:			; <UNDEFINED> instruction: 0x000154b0
   15438:	andeq	r5, r1, r0, ror r4
   1543c:			; <UNDEFINED> instruction: 0x000154b0
   15440:			; <UNDEFINED> instruction: 0x000154b0
   15444:			; <UNDEFINED> instruction: 0x000154b0
   15448:	andeq	r5, r1, r0, ror r4
   1544c:			; <UNDEFINED> instruction: 0x000154b0
   15450:	andeq	r5, r1, r0, ror r4
   15454:			; <UNDEFINED> instruction: 0x000154b0
   15458:			; <UNDEFINED> instruction: 0x000154b0
   1545c:			; <UNDEFINED> instruction: 0x000154b0
   15460:			; <UNDEFINED> instruction: 0x000154b0
   15464:			; <UNDEFINED> instruction: 0x000154b0
   15468:			; <UNDEFINED> instruction: 0x000154b0
   1546c:	andeq	r5, r1, r0, ror r4
   15470:	mov	r1, #48	; 0x30
   15474:	ldr	r0, [sp, #48]	; 0x30
   15478:	bl	11094 <strchr@plt>
   1547c:	cmp	r0, #0
   15480:	beq	154b0 <__assert_fail@plt+0x4308>
   15484:	ldrb	r3, [r7, #1]
   15488:	cmp	r3, #68	; 0x44
   1548c:	beq	1574c <__assert_fail@plt+0x45a4>
   15490:	cmp	r3, #105	; 0x69
   15494:	beq	15608 <__assert_fail@plt+0x4460>
   15498:	cmp	r3, #66	; 0x42
   1549c:	moveq	r0, #2
   154a0:	movne	r0, #1
   154a4:	moveq	r1, #1000	; 0x3e8
   154a8:	movne	r1, #1024	; 0x400
   154ac:	b	154b8 <__assert_fail@plt+0x4310>
   154b0:	mov	r0, #1
   154b4:	mov	r1, #1024	; 0x400
   154b8:	sub	r8, r8, #66	; 0x42
   154bc:	cmp	r8, #53	; 0x35
   154c0:	ldrls	pc, [pc, r8, lsl #2]
   154c4:	b	155d4 <__assert_fail@plt+0x442c>
   154c8:	ldrdeq	r5, [r1], -r8
   154cc:	ldrdeq	r5, [r1], -r4
   154d0:	ldrdeq	r5, [r1], -r4
   154d4:			; <UNDEFINED> instruction: 0x000156b4
   154d8:	ldrdeq	r5, [r1], -r4
   154dc:	andeq	r5, r1, r0, lsr #11
   154e0:	ldrdeq	r5, [r1], -r4
   154e4:	ldrdeq	r5, [r1], -r4
   154e8:	ldrdeq	r5, [r1], -r4
   154ec:	ldrdeq	r5, [r1], -ip
   154f0:	ldrdeq	r5, [r1], -r4
   154f4:	strdeq	r5, [r1], -r0
   154f8:	ldrdeq	r5, [r1], -r4
   154fc:	ldrdeq	r5, [r1], -r4
   15500:	muleq	r1, r0, r6
   15504:	ldrdeq	r5, [r1], -r4
   15508:	ldrdeq	r5, [r1], -r4
   1550c:	ldrdeq	r5, [r1], -r4
   15510:	andeq	r5, r1, ip, ror #12
   15514:	ldrdeq	r5, [r1], -r4
   15518:	ldrdeq	r5, [r1], -r4
   1551c:	ldrdeq	r5, [r1], -r4
   15520:	ldrdeq	r5, [r1], -r4
   15524:	andeq	r5, r1, r8, asr #12
   15528:	andeq	r5, r1, r0, lsr #12
   1552c:	ldrdeq	r5, [r1], -r4
   15530:	ldrdeq	r5, [r1], -r4
   15534:	ldrdeq	r5, [r1], -r4
   15538:	ldrdeq	r5, [r1], -r4
   1553c:	ldrdeq	r5, [r1], -r4
   15540:	ldrdeq	r5, [r1], -r4
   15544:	ldrdeq	r5, [r1], -r4
   15548:	andeq	r5, r1, r4, lsr r7
   1554c:	andeq	r5, r1, r0, asr #11
   15550:	ldrdeq	r5, [r1], -r4
   15554:	ldrdeq	r5, [r1], -r4
   15558:	ldrdeq	r5, [r1], -r4
   1555c:	andeq	r5, r1, r0, lsr #11
   15560:	ldrdeq	r5, [r1], -r4
   15564:	ldrdeq	r5, [r1], -r4
   15568:	ldrdeq	r5, [r1], -r4
   1556c:	ldrdeq	r5, [r1], -ip
   15570:	ldrdeq	r5, [r1], -r4
   15574:	strdeq	r5, [r1], -r0
   15578:	ldrdeq	r5, [r1], -r4
   1557c:	ldrdeq	r5, [r1], -r4
   15580:	ldrdeq	r5, [r1], -r4
   15584:	ldrdeq	r5, [r1], -r4
   15588:	ldrdeq	r5, [r1], -r4
   1558c:	ldrdeq	r5, [r1], -r4
   15590:	andeq	r5, r1, ip, ror #12
   15594:	ldrdeq	r5, [r1], -r4
   15598:	ldrdeq	r5, [r1], -r4
   1559c:	andeq	r5, r1, ip, lsl r7
   155a0:	umull	r2, r3, sl, r1
   155a4:	cmp	r3, #0
   155a8:	bne	155b8 <__assert_fail@plt+0x4410>
   155ac:	umull	r2, r3, r2, r1
   155b0:	cmp	r3, #0
   155b4:	beq	156fc <__assert_fail@plt+0x4554>
   155b8:	mov	r4, #1
   155bc:	mvn	sl, #0
   155c0:	add	r3, r7, r0
   155c4:	str	r3, [r5]
   155c8:	ldrb	r3, [r7, r0]
   155cc:	cmp	r3, #0
   155d0:	beq	15334 <__assert_fail@plt+0x418c>
   155d4:	orr	r4, r4, #2
   155d8:	b	15334 <__assert_fail@plt+0x418c>
   155dc:	umull	sl, fp, sl, r1
   155e0:	cmp	fp, #0
   155e4:	movne	r4, #1
   155e8:	mvnne	sl, #0
   155ec:	b	155c0 <__assert_fail@plt+0x4418>
   155f0:	mov	r1, r8
   155f4:	ldr	r0, [sp, #48]	; 0x30
   155f8:	bl	11094 <strchr@plt>
   155fc:	cmp	r0, #0
   15600:	bne	153a0 <__assert_fail@plt+0x41f8>
   15604:	b	155d4 <__assert_fail@plt+0x442c>
   15608:	ldrb	r3, [r7, #2]
   1560c:	mov	r1, #1024	; 0x400
   15610:	cmp	r3, #66	; 0x42
   15614:	movne	r0, #1
   15618:	moveq	r0, #3
   1561c:	b	154b8 <__assert_fail@plt+0x4310>
   15620:	mov	ip, #7
   15624:	mov	lr, #0
   15628:	umull	sl, fp, sl, r1
   1562c:	cmp	fp, #0
   15630:	movne	lr, #1
   15634:	mvnne	sl, #0
   15638:	subs	ip, ip, #1
   1563c:	bne	15628 <__assert_fail@plt+0x4480>
   15640:	orr	r4, r4, lr
   15644:	b	155c0 <__assert_fail@plt+0x4418>
   15648:	mov	ip, #8
   1564c:	mov	lr, #0
   15650:	umull	sl, fp, sl, r1
   15654:	cmp	fp, #0
   15658:	movne	lr, #1
   1565c:	mvnne	sl, #0
   15660:	subs	ip, ip, #1
   15664:	bne	15650 <__assert_fail@plt+0x44a8>
   15668:	b	15640 <__assert_fail@plt+0x4498>
   1566c:	mov	ip, #4
   15670:	mov	lr, #0
   15674:	umull	sl, fp, sl, r1
   15678:	cmp	fp, #0
   1567c:	movne	lr, #1
   15680:	mvnne	sl, #0
   15684:	subs	ip, ip, #1
   15688:	bne	15674 <__assert_fail@plt+0x44cc>
   1568c:	b	15640 <__assert_fail@plt+0x4498>
   15690:	mov	ip, #5
   15694:	mov	lr, #0
   15698:	umull	sl, fp, sl, r1
   1569c:	cmp	fp, #0
   156a0:	movne	lr, #1
   156a4:	mvnne	sl, #0
   156a8:	subs	ip, ip, #1
   156ac:	bne	15698 <__assert_fail@plt+0x44f0>
   156b0:	b	15640 <__assert_fail@plt+0x4498>
   156b4:	mov	ip, #6
   156b8:	mov	lr, #0
   156bc:	umull	sl, fp, sl, r1
   156c0:	cmp	fp, #0
   156c4:	movne	lr, #1
   156c8:	mvnne	sl, #0
   156cc:	subs	ip, ip, #1
   156d0:	bne	156bc <__assert_fail@plt+0x4514>
   156d4:	b	15640 <__assert_fail@plt+0x4498>
   156d8:	lsr	r3, sl, #22
   156dc:	cmp	r3, #0
   156e0:	movne	r4, #1
   156e4:	mvnne	sl, #0
   156e8:	lsleq	sl, sl, #10
   156ec:	b	155c0 <__assert_fail@plt+0x4418>
   156f0:	umull	r2, r3, sl, r1
   156f4:	cmp	r3, #0
   156f8:	bne	155b8 <__assert_fail@plt+0x4410>
   156fc:	umull	r8, r9, r2, r1
   15700:	adds	r3, r9, #0
   15704:	movne	r3, #1
   15708:	cmp	r3, #0
   1570c:	movne	r4, r3
   15710:	moveq	sl, r8
   15714:	mvnne	sl, #0
   15718:	b	155c0 <__assert_fail@plt+0x4418>
   1571c:	lsr	r3, sl, #31
   15720:	cmp	r3, #0
   15724:	movne	r4, #1
   15728:	mvnne	sl, #0
   1572c:	lsleq	sl, sl, #1
   15730:	b	155c0 <__assert_fail@plt+0x4418>
   15734:	lsr	r3, sl, #23
   15738:	cmp	r3, #0
   1573c:	movne	r4, #1
   15740:	mvnne	sl, #0
   15744:	lsleq	sl, sl, #9
   15748:	b	155c0 <__assert_fail@plt+0x4418>
   1574c:	mov	r0, #2
   15750:	mov	r1, #1000	; 0x3e8
   15754:	b	154b8 <__assert_fail@plt+0x4310>
   15758:	movw	r3, #30192	; 0x75f0
   1575c:	movt	r3, #1
   15760:	movw	r1, #30204	; 0x75fc
   15764:	movt	r1, #1
   15768:	movw	r0, #30220	; 0x760c
   1576c:	movt	r0, #1
   15770:	mov	r2, #85	; 0x55
   15774:	bl	111a8 <__assert_fail@plt>
   15778:	cmp	r2, #36	; 0x24
   1577c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15780:	strd	r6, [sp, #8]
   15784:	strd	r8, [sp, #16]
   15788:	strd	sl, [sp, #24]
   1578c:	str	lr, [sp, #32]
   15790:	sub	sp, sp, #36	; 0x24
   15794:	bhi	16024 <__assert_fail@plt+0x4e7c>
   15798:	cmp	r1, #0
   1579c:	mov	r8, r2
   157a0:	mov	r6, r0
   157a4:	mov	r5, r1
   157a8:	mov	sl, r3
   157ac:	addeq	r5, sp, #28
   157b0:	bl	110a0 <__errno_location@plt>
   157b4:	mov	r3, #0
   157b8:	mov	r7, r0
   157bc:	str	r3, [r0]
   157c0:	bl	11064 <__ctype_b_loc@plt>
   157c4:	ldrb	r3, [r6]
   157c8:	mov	r2, r6
   157cc:	ldr	r0, [r0]
   157d0:	b	157d8 <__assert_fail@plt+0x4630>
   157d4:	ldrb	r3, [r2, #1]!
   157d8:	lsl	r1, r3, #1
   157dc:	ldrh	r4, [r0, r1]
   157e0:	ands	r4, r4, #8192	; 0x2000
   157e4:	bne	157d4 <__assert_fail@plt+0x462c>
   157e8:	cmp	r3, #45	; 0x2d
   157ec:	beq	1588c <__assert_fail@plt+0x46e4>
   157f0:	mov	r2, r8
   157f4:	mov	r3, r4
   157f8:	mov	r1, r5
   157fc:	mov	r0, r6
   15800:	bl	10f44 <__strtoull_internal@plt>
   15804:	ldr	fp, [r5]
   15808:	mov	r9, r0
   1580c:	mov	r8, r1
   15810:	cmp	fp, r6
   15814:	beq	15874 <__assert_fail@plt+0x46cc>
   15818:	ldr	r4, [r7]
   1581c:	cmp	r4, #0
   15820:	bne	15864 <__assert_fail@plt+0x46bc>
   15824:	ldr	r3, [sp, #72]	; 0x48
   15828:	cmp	r3, #0
   1582c:	beq	1583c <__assert_fail@plt+0x4694>
   15830:	ldrb	r6, [fp]
   15834:	cmp	r6, #0
   15838:	bne	15b7c <__assert_fail@plt+0x49d4>
   1583c:	str	r9, [sl]
   15840:	str	r8, [sl, #4]
   15844:	mov	r0, r4
   15848:	add	sp, sp, #36	; 0x24
   1584c:	ldrd	r4, [sp]
   15850:	ldrd	r6, [sp, #8]
   15854:	ldrd	r8, [sp, #16]
   15858:	ldrd	sl, [sp, #24]
   1585c:	add	sp, sp, #32
   15860:	pop	{pc}		; (ldr pc, [sp], #4)
   15864:	cmp	r4, #34	; 0x22
   15868:	bne	1588c <__assert_fail@plt+0x46e4>
   1586c:	mov	r4, #1
   15870:	b	15824 <__assert_fail@plt+0x467c>
   15874:	ldr	r3, [sp, #72]	; 0x48
   15878:	cmp	r3, #0
   1587c:	beq	1588c <__assert_fail@plt+0x46e4>
   15880:	ldrb	r6, [r6]
   15884:	cmp	r6, #0
   15888:	bne	15894 <__assert_fail@plt+0x46ec>
   1588c:	mov	r4, #4
   15890:	b	15844 <__assert_fail@plt+0x469c>
   15894:	mov	r1, r6
   15898:	mov	r0, r3
   1589c:	bl	11094 <strchr@plt>
   158a0:	cmp	r0, #0
   158a4:	movne	r9, #1
   158a8:	movne	r8, #0
   158ac:	beq	1588c <__assert_fail@plt+0x46e4>
   158b0:	sub	r3, r6, #69	; 0x45
   158b4:	cmp	r3, #47	; 0x2f
   158b8:	ldrls	pc, [pc, r3, lsl #2]
   158bc:	b	159c4 <__assert_fail@plt+0x481c>
   158c0:	andeq	r5, r1, r0, lsl #19
   158c4:	andeq	r5, r1, r4, asr #19
   158c8:	andeq	r5, r1, r0, lsl #19
   158cc:	andeq	r5, r1, r4, asr #19
   158d0:	andeq	r5, r1, r4, asr #19
   158d4:	andeq	r5, r1, r4, asr #19
   158d8:	andeq	r5, r1, r0, lsl #19
   158dc:	andeq	r5, r1, r4, asr #19
   158e0:	andeq	r5, r1, r0, lsl #19
   158e4:	andeq	r5, r1, r4, asr #19
   158e8:	andeq	r5, r1, r4, asr #19
   158ec:	andeq	r5, r1, r0, lsl #19
   158f0:	andeq	r5, r1, r4, asr #19
   158f4:	andeq	r5, r1, r4, asr #19
   158f8:	andeq	r5, r1, r4, asr #19
   158fc:	andeq	r5, r1, r0, lsl #19
   15900:	andeq	r5, r1, r4, asr #19
   15904:	andeq	r5, r1, r4, asr #19
   15908:	andeq	r5, r1, r4, asr #19
   1590c:	andeq	r5, r1, r4, asr #19
   15910:	andeq	r5, r1, r0, lsl #19
   15914:	andeq	r5, r1, r0, lsl #19
   15918:	andeq	r5, r1, r4, asr #19
   1591c:	andeq	r5, r1, r4, asr #19
   15920:	andeq	r5, r1, r4, asr #19
   15924:	andeq	r5, r1, r4, asr #19
   15928:	andeq	r5, r1, r4, asr #19
   1592c:	andeq	r5, r1, r4, asr #19
   15930:	andeq	r5, r1, r4, asr #19
   15934:	andeq	r5, r1, r4, asr #19
   15938:	andeq	r5, r1, r4, asr #19
   1593c:	andeq	r5, r1, r4, asr #19
   15940:	andeq	r5, r1, r4, asr #19
   15944:	andeq	r5, r1, r4, asr #19
   15948:	andeq	r5, r1, r0, lsl #19
   1594c:	andeq	r5, r1, r4, asr #19
   15950:	andeq	r5, r1, r4, asr #19
   15954:	andeq	r5, r1, r4, asr #19
   15958:	andeq	r5, r1, r0, lsl #19
   1595c:	andeq	r5, r1, r4, asr #19
   15960:	andeq	r5, r1, r0, lsl #19
   15964:	andeq	r5, r1, r4, asr #19
   15968:	andeq	r5, r1, r4, asr #19
   1596c:	andeq	r5, r1, r4, asr #19
   15970:	andeq	r5, r1, r4, asr #19
   15974:	andeq	r5, r1, r4, asr #19
   15978:	andeq	r5, r1, r4, asr #19
   1597c:	andeq	r5, r1, r0, lsl #19
   15980:	mov	r1, #48	; 0x30
   15984:	ldr	r0, [sp, #72]	; 0x48
   15988:	bl	11094 <strchr@plt>
   1598c:	cmp	r0, #0
   15990:	beq	159c4 <__assert_fail@plt+0x481c>
   15994:	ldrb	r3, [fp, #1]
   15998:	cmp	r3, #68	; 0x44
   1599c:	beq	15ef0 <__assert_fail@plt+0x4d48>
   159a0:	cmp	r3, #105	; 0x69
   159a4:	beq	15b94 <__assert_fail@plt+0x49ec>
   159a8:	cmp	r3, #66	; 0x42
   159ac:	moveq	r3, #2
   159b0:	movne	r3, #1
   159b4:	moveq	r7, #1000	; 0x3e8
   159b8:	movne	r7, #1024	; 0x400
   159bc:	str	r3, [sp, #4]
   159c0:	b	159d0 <__assert_fail@plt+0x4828>
   159c4:	mov	r3, #1
   159c8:	mov	r7, #1024	; 0x400
   159cc:	str	r3, [sp, #4]
   159d0:	sub	r6, r6, #66	; 0x42
   159d4:	cmp	r6, #53	; 0x35
   159d8:	ldrls	pc, [pc, r6, lsl #2]
   159dc:	b	15b40 <__assert_fail@plt+0x4998>
   159e0:	muleq	r1, r8, lr
   159e4:	andeq	r5, r1, r0, asr #22
   159e8:	andeq	r5, r1, r0, asr #22
   159ec:	andeq	r5, r1, r4, lsr #25
   159f0:	andeq	r5, r1, r0, asr #22
   159f4:			; <UNDEFINED> instruction: 0x00015ab8
   159f8:	andeq	r5, r1, r0, asr #22
   159fc:	andeq	r5, r1, r0, asr #22
   15a00:	andeq	r5, r1, r0, asr #22
   15a04:	andeq	r5, r1, r8, asr #22
   15a08:	andeq	r5, r1, r0, asr #22
   15a0c:	andeq	r5, r1, r4, asr #28
   15a10:	andeq	r5, r1, r0, asr #22
   15a14:	andeq	r5, r1, r0, asr #22
   15a18:	muleq	r1, r4, sp
   15a1c:	andeq	r5, r1, r0, asr #22
   15a20:	andeq	r5, r1, r0, asr #22
   15a24:	andeq	r5, r1, r0, asr #22
   15a28:	andeq	r5, r1, ip, lsl sp
   15a2c:	andeq	r5, r1, r0, asr #22
   15a30:	andeq	r5, r1, r0, asr #22
   15a34:	andeq	r5, r1, r0, asr #22
   15a38:	andeq	r5, r1, r0, asr #22
   15a3c:	andeq	r5, r1, ip, lsr #24
   15a40:			; <UNDEFINED> instruction: 0x00015bb0
   15a44:	andeq	r5, r1, r0, asr #22
   15a48:	andeq	r5, r1, r0, asr #22
   15a4c:	andeq	r5, r1, r0, asr #22
   15a50:	andeq	r5, r1, r0, asr #22
   15a54:	andeq	r5, r1, r0, asr #22
   15a58:	andeq	r5, r1, r0, asr #22
   15a5c:	andeq	r5, r1, r0, asr #22
   15a60:	andeq	r5, r1, r4, lsr #28
   15a64:	andeq	r5, r1, r8, lsr #22
   15a68:	andeq	r5, r1, r0, asr #22
   15a6c:	andeq	r5, r1, r0, asr #22
   15a70:	andeq	r5, r1, r0, asr #22
   15a74:			; <UNDEFINED> instruction: 0x00015ab8
   15a78:	andeq	r5, r1, r0, asr #22
   15a7c:	andeq	r5, r1, r0, asr #22
   15a80:	andeq	r5, r1, r0, asr #22
   15a84:	andeq	r5, r1, r8, asr #22
   15a88:	andeq	r5, r1, r0, asr #22
   15a8c:	andeq	r5, r1, r4, asr #28
   15a90:	andeq	r5, r1, r0, asr #22
   15a94:	andeq	r5, r1, r0, asr #22
   15a98:	andeq	r5, r1, r0, asr #22
   15a9c:	andeq	r5, r1, r0, asr #22
   15aa0:	andeq	r5, r1, r0, asr #22
   15aa4:	andeq	r5, r1, r0, asr #22
   15aa8:	andeq	r5, r1, ip, lsl sp
   15aac:	andeq	r5, r1, r0, asr #22
   15ab0:	andeq	r5, r1, r0, asr #22
   15ab4:	andeq	r5, r1, ip, lsl #28
   15ab8:	asr	r3, r7, #31
   15abc:	mov	r2, r7
   15ac0:	cmp	r8, #0
   15ac4:	umull	r0, r1, r9, r7
   15ac8:	mov	ip, #0
   15acc:	strd	r2, [sp, #8]
   15ad0:	bne	15f24 <__assert_fail@plt+0x4d7c>
   15ad4:	mov	r2, r0
   15ad8:	mov	r3, r1
   15adc:	cmp	ip, #0
   15ae0:	bne	15b6c <__assert_fail@plt+0x49c4>
   15ae4:	cmp	r3, #0
   15ae8:	mov	lr, ip
   15aec:	bne	15f88 <__assert_fail@plt+0x4de0>
   15af0:	umull	r2, r3, r2, r7
   15af4:	mov	ip, r2
   15af8:	mov	r1, r3
   15afc:	subs	r0, lr, #0
   15b00:	bne	15b6c <__assert_fail@plt+0x49c4>
   15b04:	cmp	r1, #0
   15b08:	bne	15f68 <__assert_fail@plt+0x4dc0>
   15b0c:	umull	r2, r3, ip, r7
   15b10:	mov	r6, r2
   15b14:	mov	r2, r3
   15b18:	cmp	r0, #0
   15b1c:	mov	r9, r6
   15b20:	mov	r8, r2
   15b24:	bne	15b6c <__assert_fail@plt+0x49c4>
   15b28:	ldr	r2, [sp, #4]
   15b2c:	add	r3, fp, r2
   15b30:	str	r3, [r5]
   15b34:	ldrb	r3, [fp, r2]
   15b38:	cmp	r3, #0
   15b3c:	beq	1583c <__assert_fail@plt+0x4694>
   15b40:	orr	r4, r4, #2
   15b44:	b	1583c <__assert_fail@plt+0x4694>
   15b48:	cmp	r8, #0
   15b4c:	umull	r2, r3, r9, r7
   15b50:	mov	ip, #0
   15b54:	asr	r1, r7, #31
   15b58:	bne	15ec0 <__assert_fail@plt+0x4d18>
   15b5c:	mov	r9, r2
   15b60:	mov	r8, r3
   15b64:	cmp	ip, #0
   15b68:	beq	15b28 <__assert_fail@plt+0x4980>
   15b6c:	mvn	r9, #0
   15b70:	mov	r4, #1
   15b74:	mov	r8, r9
   15b78:	b	15b28 <__assert_fail@plt+0x4980>
   15b7c:	mov	r1, r6
   15b80:	ldr	r0, [sp, #72]	; 0x48
   15b84:	bl	11094 <strchr@plt>
   15b88:	cmp	r0, #0
   15b8c:	bne	158b0 <__assert_fail@plt+0x4708>
   15b90:	b	15b40 <__assert_fail@plt+0x4998>
   15b94:	ldrb	r3, [fp, #2]
   15b98:	mov	r7, #1024	; 0x400
   15b9c:	cmp	r3, #66	; 0x42
   15ba0:	movne	r3, #1
   15ba4:	moveq	r3, #3
   15ba8:	str	r3, [sp, #4]
   15bac:	b	159d0 <__assert_fail@plt+0x4828>
   15bb0:	asr	r3, r7, #31
   15bb4:	mov	r2, r7
   15bb8:	mov	ip, #0
   15bbc:	mov	r0, #7
   15bc0:	mov	lr, ip
   15bc4:	mov	r6, r4
   15bc8:	strd	r2, [sp, #8]
   15bcc:	str	r5, [sp, #16]
   15bd0:	b	15bfc <__assert_fail@plt+0x4a54>
   15bd4:	umull	r2, r3, r9, r7
   15bd8:	mov	r9, r2
   15bdc:	mov	r8, r3
   15be0:	cmp	r1, #0
   15be4:	beq	15bf4 <__assert_fail@plt+0x4a4c>
   15be8:	mvn	r9, #0
   15bec:	mov	ip, #1
   15bf0:	mov	r8, r9
   15bf4:	subs	r0, r0, #1
   15bf8:	beq	15ee4 <__assert_fail@plt+0x4d3c>
   15bfc:	cmp	r8, #0
   15c00:	mov	r1, #0
   15c04:	beq	15bd4 <__assert_fail@plt+0x4a2c>
   15c08:	umull	r4, r5, r9, r7
   15c0c:	mov	r3, lr
   15c10:	mov	r2, r5
   15c14:	umlal	r2, r3, r8, r7
   15c18:	cmp	r3, #0
   15c1c:	bne	16044 <__assert_fail@plt+0x4e9c>
   15c20:	mov	r9, r4
   15c24:	mov	r8, r2
   15c28:	b	15be0 <__assert_fail@plt+0x4a38>
   15c2c:	asr	r3, r7, #31
   15c30:	mov	r2, r7
   15c34:	mov	r6, #0
   15c38:	mov	lr, #8
   15c3c:	mov	r0, r4
   15c40:	mov	ip, r5
   15c44:	strd	r2, [sp, #8]
   15c48:	b	15c74 <__assert_fail@plt+0x4acc>
   15c4c:	umull	r2, r3, r9, r7
   15c50:	mov	r9, r2
   15c54:	mov	r8, r3
   15c58:	cmp	r1, #0
   15c5c:	beq	15c6c <__assert_fail@plt+0x4ac4>
   15c60:	mvn	r9, #0
   15c64:	mov	r6, #1
   15c68:	mov	r8, r9
   15c6c:	subs	lr, lr, #1
   15c70:	beq	15eb4 <__assert_fail@plt+0x4d0c>
   15c74:	cmp	r8, #0
   15c78:	mov	r1, #0
   15c7c:	beq	15c4c <__assert_fail@plt+0x4aa4>
   15c80:	umull	r4, r5, r9, r7
   15c84:	mov	r3, #0
   15c88:	mov	r2, r5
   15c8c:	umlal	r2, r3, r8, r7
   15c90:	cmp	r3, #0
   15c94:	bne	1609c <__assert_fail@plt+0x4ef4>
   15c98:	mov	r9, r4
   15c9c:	mov	r8, r2
   15ca0:	b	15c58 <__assert_fail@plt+0x4ab0>
   15ca4:	asr	r3, r7, #31
   15ca8:	mov	r2, r7
   15cac:	mov	r6, #0
   15cb0:	mov	lr, #6
   15cb4:	mov	r0, r4
   15cb8:	mov	ip, r5
   15cbc:	strd	r2, [sp, #8]
   15cc0:	b	15cec <__assert_fail@plt+0x4b44>
   15cc4:	umull	r2, r3, r9, r7
   15cc8:	mov	r9, r2
   15ccc:	mov	r8, r3
   15cd0:	cmp	r1, #0
   15cd4:	beq	15ce4 <__assert_fail@plt+0x4b3c>
   15cd8:	mvn	r9, #0
   15cdc:	mov	r6, #1
   15ce0:	mov	r8, r9
   15ce4:	subs	lr, lr, #1
   15ce8:	beq	15eb4 <__assert_fail@plt+0x4d0c>
   15cec:	cmp	r8, #0
   15cf0:	mov	r1, #0
   15cf4:	beq	15cc4 <__assert_fail@plt+0x4b1c>
   15cf8:	umull	r4, r5, r9, r7
   15cfc:	mov	r3, #0
   15d00:	mov	r2, r5
   15d04:	umlal	r2, r3, r8, r7
   15d08:	cmp	r3, #0
   15d0c:	bne	16064 <__assert_fail@plt+0x4ebc>
   15d10:	mov	r9, r4
   15d14:	mov	r8, r2
   15d18:	b	15cd0 <__assert_fail@plt+0x4b28>
   15d1c:	asr	r3, r7, #31
   15d20:	mov	r2, r7
   15d24:	mov	r6, #0
   15d28:	mov	lr, #4
   15d2c:	mov	r0, r4
   15d30:	mov	ip, r5
   15d34:	strd	r2, [sp, #8]
   15d38:	b	15d64 <__assert_fail@plt+0x4bbc>
   15d3c:	umull	r2, r3, r9, r7
   15d40:	mov	r9, r2
   15d44:	mov	r8, r3
   15d48:	cmp	r1, #0
   15d4c:	beq	15d5c <__assert_fail@plt+0x4bb4>
   15d50:	mvn	r9, #0
   15d54:	mov	r6, #1
   15d58:	mov	r8, r9
   15d5c:	subs	lr, lr, #1
   15d60:	beq	15eb4 <__assert_fail@plt+0x4d0c>
   15d64:	cmp	r8, #0
   15d68:	mov	r1, #0
   15d6c:	beq	15d3c <__assert_fail@plt+0x4b94>
   15d70:	umull	r4, r5, r9, r7
   15d74:	mov	r3, #0
   15d78:	mov	r2, r5
   15d7c:	umlal	r2, r3, r8, r7
   15d80:	cmp	r3, #0
   15d84:	bne	16080 <__assert_fail@plt+0x4ed8>
   15d88:	mov	r9, r4
   15d8c:	mov	r8, r2
   15d90:	b	15d48 <__assert_fail@plt+0x4ba0>
   15d94:	asr	r3, r7, #31
   15d98:	mov	r2, r7
   15d9c:	mov	r6, #0
   15da0:	mov	lr, #5
   15da4:	mov	r0, r4
   15da8:	mov	ip, r5
   15dac:	strd	r2, [sp, #8]
   15db0:	b	15ddc <__assert_fail@plt+0x4c34>
   15db4:	umull	r2, r3, r9, r7
   15db8:	mov	r9, r2
   15dbc:	mov	r8, r3
   15dc0:	cmp	r1, #0
   15dc4:	beq	15dd4 <__assert_fail@plt+0x4c2c>
   15dc8:	mvn	r9, #0
   15dcc:	mov	r6, #1
   15dd0:	mov	r8, r9
   15dd4:	subs	lr, lr, #1
   15dd8:	beq	15eb4 <__assert_fail@plt+0x4d0c>
   15ddc:	cmp	r8, #0
   15de0:	mov	r1, #0
   15de4:	beq	15db4 <__assert_fail@plt+0x4c0c>
   15de8:	umull	r4, r5, r9, r7
   15dec:	mov	r3, #0
   15df0:	mov	r2, r5
   15df4:	umlal	r2, r3, r8, r7
   15df8:	cmp	r3, #0
   15dfc:	bne	15fec <__assert_fail@plt+0x4e44>
   15e00:	mov	r9, r4
   15e04:	mov	r8, r2
   15e08:	b	15dc0 <__assert_fail@plt+0x4c18>
   15e0c:	lsr	r3, r8, #31
   15e10:	adds	r9, r9, r9
   15e14:	adc	r8, r8, r8
   15e18:	cmp	r3, #0
   15e1c:	beq	15b28 <__assert_fail@plt+0x4980>
   15e20:	b	15b6c <__assert_fail@plt+0x49c4>
   15e24:	lsr	r3, r8, #23
   15e28:	lsl	r8, r8, #9
   15e2c:	cmp	r3, #0
   15e30:	lsl	r3, r9, #9
   15e34:	orr	r8, r8, r9, lsr #23
   15e38:	bne	15b6c <__assert_fail@plt+0x49c4>
   15e3c:	mov	r9, r3
   15e40:	b	15b28 <__assert_fail@plt+0x4980>
   15e44:	asr	r3, r7, #31
   15e48:	mov	r2, r7
   15e4c:	cmp	r8, #0
   15e50:	mov	r1, #0
   15e54:	strd	r2, [sp, #8]
   15e58:	umull	r2, r3, r9, r7
   15e5c:	bne	15f00 <__assert_fail@plt+0x4d58>
   15e60:	mov	r0, r2
   15e64:	mov	ip, r3
   15e68:	cmp	r1, #0
   15e6c:	bne	15b6c <__assert_fail@plt+0x49c4>
   15e70:	cmp	ip, #0
   15e74:	bne	15f48 <__assert_fail@plt+0x4da0>
   15e78:	umull	r2, r3, r0, r7
   15e7c:	mov	r6, r2
   15e80:	mov	r2, r3
   15e84:	cmp	r1, #0
   15e88:	mov	r9, r6
   15e8c:	mov	r8, r2
   15e90:	beq	15b28 <__assert_fail@plt+0x4980>
   15e94:	b	15b6c <__assert_fail@plt+0x49c4>
   15e98:	lsr	r3, r8, #22
   15e9c:	lsl	r8, r8, #10
   15ea0:	cmp	r3, #0
   15ea4:	lsl	r3, r9, #10
   15ea8:	orr	r8, r8, r9, lsr #22
   15eac:	beq	15e3c <__assert_fail@plt+0x4c94>
   15eb0:	b	15b6c <__assert_fail@plt+0x49c4>
   15eb4:	mov	r5, ip
   15eb8:	orr	r4, r0, r6
   15ebc:	b	15b28 <__assert_fail@plt+0x4980>
   15ec0:	strd	r2, [sp, #8]
   15ec4:	mov	r3, ip
   15ec8:	ldr	r2, [sp, #12]
   15ecc:	umlal	r2, r3, r8, r7
   15ed0:	cmp	r3, #0
   15ed4:	bne	16008 <__assert_fail@plt+0x4e60>
   15ed8:	mov	r8, r2
   15edc:	ldr	r9, [sp, #8]
   15ee0:	b	15b64 <__assert_fail@plt+0x49bc>
   15ee4:	orr	r4, r6, ip
   15ee8:	ldr	r5, [sp, #16]
   15eec:	b	15b28 <__assert_fail@plt+0x4980>
   15ef0:	mov	r3, #2
   15ef4:	mov	r7, #1000	; 0x3e8
   15ef8:	str	r3, [sp, #4]
   15efc:	b	159d0 <__assert_fail@plt+0x4828>
   15f00:	strd	r2, [sp, #16]
   15f04:	mov	r3, r1
   15f08:	ldr	r2, [sp, #20]
   15f0c:	umlal	r2, r3, r8, r7
   15f10:	cmp	r3, #0
   15f14:	bne	160d8 <__assert_fail@plt+0x4f30>
   15f18:	mov	ip, r2
   15f1c:	ldr	r0, [sp, #16]
   15f20:	b	15e68 <__assert_fail@plt+0x4cc0>
   15f24:	mov	r2, r1
   15f28:	mov	r3, ip
   15f2c:	umlal	r2, r3, r8, r7
   15f30:	cmp	r3, #0
   15f34:	strd	r2, [sp, #16]
   15f38:	bne	15fac <__assert_fail@plt+0x4e04>
   15f3c:	mov	r2, r0
   15f40:	ldr	r3, [sp, #16]
   15f44:	b	15adc <__assert_fail@plt+0x4934>
   15f48:	umull	r8, r9, r0, r7
   15f4c:	mov	r3, r1
   15f50:	mov	r2, r9
   15f54:	umlal	r2, r3, ip, r7
   15f58:	cmp	r3, #0
   15f5c:	bne	160b8 <__assert_fail@plt+0x4f10>
   15f60:	mov	r6, r8
   15f64:	b	15e84 <__assert_fail@plt+0x4cdc>
   15f68:	umull	r8, r9, ip, r7
   15f6c:	mov	r3, r0
   15f70:	mov	r2, r9
   15f74:	umlal	r2, r3, r1, r7
   15f78:	cmp	r3, #0
   15f7c:	bne	16100 <__assert_fail@plt+0x4f58>
   15f80:	mov	r6, r8
   15f84:	b	15b18 <__assert_fail@plt+0x4970>
   15f88:	umull	r8, r9, r2, r7
   15f8c:	mov	r1, ip
   15f90:	mov	r0, r9
   15f94:	umlal	r0, r1, r3, r7
   15f98:	cmp	r1, #0
   15f9c:	bne	15fcc <__assert_fail@plt+0x4e24>
   15fa0:	mov	ip, r8
   15fa4:	mov	r1, r0
   15fa8:	b	15afc <__assert_fail@plt+0x4954>
   15fac:	ldr	lr, [sp, #8]
   15fb0:	mov	r2, r0
   15fb4:	mov	ip, #1
   15fb8:	ldr	r3, [sp, #12]
   15fbc:	mul	r3, r9, r3
   15fc0:	mla	r3, lr, r8, r3
   15fc4:	add	r3, r3, r1
   15fc8:	b	15adc <__assert_fail@plt+0x4934>
   15fcc:	ldr	r1, [sp, #12]
   15fd0:	mov	lr, #1
   15fd4:	mov	ip, r8
   15fd8:	mul	r1, r2, r1
   15fdc:	ldr	r2, [sp, #8]
   15fe0:	mla	r1, r3, r2, r1
   15fe4:	add	r1, r1, r9
   15fe8:	b	15afc <__assert_fail@plt+0x4954>
   15fec:	ldrd	r2, [sp, #8]
   15ff0:	mov	r1, #1
   15ff4:	mul	r3, r9, r3
   15ff8:	mov	r9, r4
   15ffc:	mla	r8, r2, r8, r3
   16000:	add	r8, r8, r5
   16004:	b	15dc0 <__assert_fail@plt+0x4c18>
   16008:	mul	r3, r9, r1
   1600c:	mov	ip, #1
   16010:	mla	r8, r7, r8, r3
   16014:	ldrd	r6, [sp, #8]
   16018:	mov	r9, r6
   1601c:	add	r8, r8, r7
   16020:	b	15b64 <__assert_fail@plt+0x49bc>
   16024:	movw	r3, #30260	; 0x7634
   16028:	movt	r3, #1
   1602c:	movw	r1, #30204	; 0x75fc
   16030:	movt	r1, #1
   16034:	movw	r0, #30220	; 0x760c
   16038:	movt	r0, #1
   1603c:	mov	r2, #85	; 0x55
   16040:	bl	111a8 <__assert_fail@plt>
   16044:	ldr	r3, [sp, #12]
   16048:	mov	r1, #1
   1604c:	mul	r2, r9, r3
   16050:	ldr	r3, [sp, #8]
   16054:	mov	r9, r4
   16058:	mla	r8, r3, r8, r2
   1605c:	add	r8, r8, r5
   16060:	b	15be0 <__assert_fail@plt+0x4a38>
   16064:	ldrd	r2, [sp, #8]
   16068:	mov	r1, #1
   1606c:	mul	r3, r9, r3
   16070:	mov	r9, r4
   16074:	mla	r8, r2, r8, r3
   16078:	add	r8, r8, r5
   1607c:	b	15cd0 <__assert_fail@plt+0x4b28>
   16080:	ldrd	r2, [sp, #8]
   16084:	mov	r1, #1
   16088:	mul	r3, r9, r3
   1608c:	mov	r9, r4
   16090:	mla	r8, r2, r8, r3
   16094:	add	r8, r8, r5
   16098:	b	15d48 <__assert_fail@plt+0x4ba0>
   1609c:	ldrd	r2, [sp, #8]
   160a0:	mov	r1, #1
   160a4:	mul	r3, r9, r3
   160a8:	mov	r9, r4
   160ac:	mla	r8, r2, r8, r3
   160b0:	add	r8, r8, r5
   160b4:	b	15c58 <__assert_fail@plt+0x4ab0>
   160b8:	ldr	r3, [sp, #12]
   160bc:	mov	r6, r8
   160c0:	mov	r1, #1
   160c4:	mul	r2, r0, r3
   160c8:	ldr	r3, [sp, #8]
   160cc:	mla	r2, ip, r3, r2
   160d0:	add	r2, r2, r9
   160d4:	b	15e84 <__assert_fail@plt+0x4cdc>
   160d8:	ldr	r3, [sp, #12]
   160dc:	mov	r1, #1
   160e0:	ldr	r2, [sp, #16]
   160e4:	mul	ip, r9, r3
   160e8:	ldr	r3, [sp, #8]
   160ec:	mov	r0, r2
   160f0:	mla	ip, r3, r8, ip
   160f4:	ldr	r3, [sp, #20]
   160f8:	add	ip, ip, r3
   160fc:	b	15e68 <__assert_fail@plt+0x4cc0>
   16100:	ldr	r3, [sp, #12]
   16104:	mov	r6, r8
   16108:	mov	r0, #1
   1610c:	mul	r2, ip, r3
   16110:	ldr	r3, [sp, #8]
   16114:	mla	r2, r1, r3, r2
   16118:	add	r2, r2, r9
   1611c:	b	15b18 <__assert_fail@plt+0x4970>
   16120:	cmp	r1, #0
   16124:	cmpne	r0, #0
   16128:	beq	16174 <__assert_fail@plt+0x4fcc>
   1612c:	strd	r4, [sp, #-16]!
   16130:	umull	r4, r5, r0, r1
   16134:	str	r6, [sp, #8]
   16138:	str	lr, [sp, #12]
   1613c:	adds	r3, r5, #0
   16140:	movne	r3, #1
   16144:	cmp	r4, #0
   16148:	blt	16154 <__assert_fail@plt+0x4fac>
   1614c:	cmp	r3, #0
   16150:	beq	16180 <__assert_fail@plt+0x4fd8>
   16154:	bl	110a0 <__errno_location@plt>
   16158:	mov	r3, #12
   1615c:	ldrd	r4, [sp]
   16160:	ldr	r6, [sp, #8]
   16164:	add	sp, sp, #12
   16168:	str	r3, [r0]
   1616c:	mov	r0, #0
   16170:	pop	{pc}		; (ldr pc, [sp], #4)
   16174:	mov	r1, #1
   16178:	mov	r0, r1
   1617c:	b	10eb4 <calloc@plt>
   16180:	ldrd	r4, [sp]
   16184:	ldr	r6, [sp, #8]
   16188:	ldr	lr, [sp, #12]
   1618c:	add	sp, sp, #16
   16190:	b	10eb4 <calloc@plt>
   16194:	cmp	r0, #0
   16198:	beq	161a4 <__assert_fail@plt+0x4ffc>
   1619c:	blt	161ac <__assert_fail@plt+0x5004>
   161a0:	b	11028 <malloc@plt>
   161a4:	mov	r0, #1
   161a8:	b	11028 <malloc@plt>
   161ac:	str	r4, [sp, #-8]!
   161b0:	str	lr, [sp, #4]
   161b4:	bl	110a0 <__errno_location@plt>
   161b8:	mov	r3, #12
   161bc:	ldr	r4, [sp]
   161c0:	add	sp, sp, #4
   161c4:	str	r3, [r0]
   161c8:	mov	r0, #0
   161cc:	pop	{pc}		; (ldr pc, [sp], #4)
   161d0:	cmp	r0, #0
   161d4:	beq	161fc <__assert_fail@plt+0x5054>
   161d8:	cmp	r1, #0
   161dc:	str	r4, [sp, #-8]!
   161e0:	str	lr, [sp, #4]
   161e4:	beq	16204 <__assert_fail@plt+0x505c>
   161e8:	blt	16218 <__assert_fail@plt+0x5070>
   161ec:	ldr	r4, [sp]
   161f0:	ldr	lr, [sp, #4]
   161f4:	add	sp, sp, #8
   161f8:	b	10f80 <realloc@plt>
   161fc:	mov	r0, r1
   16200:	b	16194 <__assert_fail@plt+0x4fec>
   16204:	bl	12084 <__assert_fail@plt+0xedc>
   16208:	ldr	r4, [sp]
   1620c:	add	sp, sp, #4
   16210:	mov	r0, #0
   16214:	pop	{pc}		; (ldr pc, [sp], #4)
   16218:	bl	110a0 <__errno_location@plt>
   1621c:	mov	r3, #12
   16220:	str	r3, [r0]
   16224:	b	16208 <__assert_fail@plt+0x5060>
   16228:	strd	r4, [sp, #-16]!
   1622c:	mov	r4, r0
   16230:	str	r6, [sp, #8]
   16234:	str	lr, [sp, #12]
   16238:	bl	10fec <__fpending@plt>
   1623c:	ldr	r5, [r4]
   16240:	mov	r6, r0
   16244:	mov	r0, r4
   16248:	bl	162b0 <__assert_fail@plt+0x5108>
   1624c:	mov	r4, r0
   16250:	and	r5, r5, #32
   16254:	cmp	r5, #0
   16258:	bne	16290 <__assert_fail@plt+0x50e8>
   1625c:	cmp	r0, #0
   16260:	beq	1627c <__assert_fail@plt+0x50d4>
   16264:	cmp	r6, #0
   16268:	bne	162a8 <__assert_fail@plt+0x5100>
   1626c:	bl	110a0 <__errno_location@plt>
   16270:	ldr	r4, [r0]
   16274:	subs	r4, r4, #9
   16278:	mvnne	r4, #0
   1627c:	mov	r0, r4
   16280:	ldrd	r4, [sp]
   16284:	ldr	r6, [sp, #8]
   16288:	add	sp, sp, #12
   1628c:	pop	{pc}		; (ldr pc, [sp], #4)
   16290:	cmp	r0, #0
   16294:	bne	162a8 <__assert_fail@plt+0x5100>
   16298:	bl	110a0 <__errno_location@plt>
   1629c:	str	r4, [r0]
   162a0:	mvn	r4, #0
   162a4:	b	1627c <__assert_fail@plt+0x50d4>
   162a8:	mvn	r4, #0
   162ac:	b	1627c <__assert_fail@plt+0x50d4>
   162b0:	strd	r4, [sp, #-12]!
   162b4:	mov	r4, r0
   162b8:	str	lr, [sp, #8]
   162bc:	sub	sp, sp, #12
   162c0:	bl	110dc <fileno@plt>
   162c4:	cmp	r0, #0
   162c8:	mov	r0, r4
   162cc:	blt	16350 <__assert_fail@plt+0x51a8>
   162d0:	bl	11040 <__freading@plt>
   162d4:	cmp	r0, #0
   162d8:	bne	1631c <__assert_fail@plt+0x5174>
   162dc:	mov	r0, r4
   162e0:	bl	16364 <__assert_fail@plt+0x51bc>
   162e4:	cmp	r0, #0
   162e8:	beq	1634c <__assert_fail@plt+0x51a4>
   162ec:	bl	110a0 <__errno_location@plt>
   162f0:	mov	r5, r0
   162f4:	mov	r0, r4
   162f8:	ldr	r4, [r5]
   162fc:	bl	110f4 <fclose@plt>
   16300:	cmp	r4, #0
   16304:	mvnne	r0, #0
   16308:	strne	r4, [r5]
   1630c:	add	sp, sp, #12
   16310:	ldrd	r4, [sp]
   16314:	add	sp, sp, #8
   16318:	pop	{pc}		; (ldr pc, [sp], #4)
   1631c:	mov	r0, r4
   16320:	bl	110dc <fileno@plt>
   16324:	mov	r1, #1
   16328:	mov	r2, #0
   1632c:	mov	r3, #0
   16330:	str	r1, [sp]
   16334:	bl	10fc8 <lseek64@plt>
   16338:	mvn	r3, #0
   1633c:	mvn	r2, #0
   16340:	cmp	r1, r3
   16344:	cmpeq	r0, r2
   16348:	bne	162dc <__assert_fail@plt+0x5134>
   1634c:	mov	r0, r4
   16350:	add	sp, sp, #12
   16354:	ldrd	r4, [sp]
   16358:	ldr	lr, [sp, #8]
   1635c:	add	sp, sp, #12
   16360:	b	110f4 <fclose@plt>
   16364:	str	r4, [sp, #-8]!
   16368:	subs	r4, r0, #0
   1636c:	str	lr, [sp, #4]
   16370:	sub	sp, sp, #8
   16374:	beq	16390 <__assert_fail@plt+0x51e8>
   16378:	bl	11040 <__freading@plt>
   1637c:	cmp	r0, #0
   16380:	beq	16390 <__assert_fail@plt+0x51e8>
   16384:	ldr	r3, [r4]
   16388:	tst	r3, #256	; 0x100
   1638c:	bne	163a8 <__assert_fail@plt+0x5200>
   16390:	mov	r0, r4
   16394:	add	sp, sp, #8
   16398:	ldr	r4, [sp]
   1639c:	ldr	lr, [sp, #4]
   163a0:	add	sp, sp, #8
   163a4:	b	10f08 <fflush@plt>
   163a8:	mov	r1, #1
   163ac:	mov	r2, #0
   163b0:	mov	r3, #0
   163b4:	mov	r0, r4
   163b8:	str	r1, [sp]
   163bc:	bl	163c4 <__assert_fail@plt+0x521c>
   163c0:	b	16390 <__assert_fail@plt+0x51e8>
   163c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   163c8:	mov	r4, r0
   163cc:	ldr	ip, [r0, #4]
   163d0:	strd	r6, [sp, #8]
   163d4:	str	lr, [sp, #20]
   163d8:	ldr	lr, [r0, #8]
   163dc:	str	r8, [sp, #16]
   163e0:	sub	sp, sp, #8
   163e4:	ldr	r5, [sp, #32]
   163e8:	cmp	lr, ip
   163ec:	beq	16414 <__assert_fail@plt+0x526c>
   163f0:	mov	r0, r4
   163f4:	str	r5, [sp, #32]
   163f8:	add	sp, sp, #8
   163fc:	ldrd	r4, [sp]
   16400:	ldrd	r6, [sp, #8]
   16404:	ldr	r8, [sp, #16]
   16408:	ldr	lr, [sp, #20]
   1640c:	add	sp, sp, #24
   16410:	b	11100 <fseeko64@plt>
   16414:	ldr	ip, [r0, #16]
   16418:	ldr	lr, [r0, #20]
   1641c:	cmp	lr, ip
   16420:	bne	163f0 <__assert_fail@plt+0x5248>
   16424:	ldr	r8, [r0, #36]	; 0x24
   16428:	cmp	r8, #0
   1642c:	bne	163f0 <__assert_fail@plt+0x5248>
   16430:	mov	r6, r2
   16434:	mov	r7, r3
   16438:	bl	110dc <fileno@plt>
   1643c:	mov	r2, r6
   16440:	mov	r3, r7
   16444:	str	r5, [sp]
   16448:	bl	10fc8 <lseek64@plt>
   1644c:	mvn	r3, #0
   16450:	mvn	r2, #0
   16454:	cmp	r1, r3
   16458:	cmpeq	r0, r2
   1645c:	beq	1648c <__assert_fail@plt+0x52e4>
   16460:	ldr	r3, [r4]
   16464:	strd	r0, [r4, #80]	; 0x50
   16468:	bic	r3, r3, #16
   1646c:	str	r3, [r4]
   16470:	mov	r0, r8
   16474:	add	sp, sp, #8
   16478:	ldrd	r4, [sp]
   1647c:	ldrd	r6, [sp, #8]
   16480:	ldr	r8, [sp, #16]
   16484:	add	sp, sp, #20
   16488:	pop	{pc}		; (ldr pc, [sp], #4)
   1648c:	mvn	r8, #0
   16490:	b	16470 <__assert_fail@plt+0x52c8>
   16494:	mov	r3, #0
   16498:	strd	r4, [sp, #-16]!
   1649c:	mov	r4, r0
   164a0:	mov	r5, r1
   164a4:	str	r6, [sp, #8]
   164a8:	add	r6, r2, #20
   164ac:	str	lr, [sp, #12]
   164b0:	strb	r3, [r2, #20]
   164b4:	mov	r0, r4
   164b8:	mov	r1, r5
   164bc:	mov	r2, #10
   164c0:	mov	r3, #0
   164c4:	bl	1694c <__assert_fail@plt+0x57a4>
   164c8:	add	ip, r2, #48	; 0x30
   164cc:	mov	r0, r4
   164d0:	mov	r1, r5
   164d4:	mov	r2, #10
   164d8:	mov	r3, #0
   164dc:	strb	ip, [r6, #-1]!
   164e0:	bl	1694c <__assert_fail@plt+0x57a4>
   164e4:	cmp	r5, #0
   164e8:	mov	r5, r1
   164ec:	cmpeq	r4, #9
   164f0:	mov	r4, r0
   164f4:	bhi	164b4 <__assert_fail@plt+0x530c>
   164f8:	mov	r0, r6
   164fc:	ldrd	r4, [sp]
   16500:	ldr	r6, [sp, #8]
   16504:	add	sp, sp, #12
   16508:	pop	{pc}		; (ldr pc, [sp], #4)
   1650c:	mov	r0, #14
   16510:	str	r4, [sp, #-8]!
   16514:	str	lr, [sp, #4]
   16518:	bl	1113c <nl_langinfo@plt>
   1651c:	cmp	r0, #0
   16520:	beq	16544 <__assert_fail@plt+0x539c>
   16524:	ldrb	r2, [r0]
   16528:	movw	r3, #30272	; 0x7640
   1652c:	movt	r3, #1
   16530:	ldr	r4, [sp]
   16534:	add	sp, sp, #4
   16538:	cmp	r2, #0
   1653c:	moveq	r0, r3
   16540:	pop	{pc}		; (ldr pc, [sp], #4)
   16544:	ldr	r4, [sp]
   16548:	add	sp, sp, #4
   1654c:	movw	r0, #30272	; 0x7640
   16550:	movt	r0, #1
   16554:	pop	{pc}		; (ldr pc, [sp], #4)
   16558:	strd	r4, [sp, #-20]!	; 0xffffffec
   1655c:	mov	r5, r2
   16560:	strd	r6, [sp, #8]
   16564:	subs	r6, r0, #0
   16568:	mov	r7, r1
   1656c:	str	lr, [sp, #16]
   16570:	sub	sp, sp, #12
   16574:	addeq	r6, sp, #4
   16578:	mov	r0, r6
   1657c:	bl	10ff8 <mbrtowc@plt>
   16580:	cmp	r5, #0
   16584:	cmnne	r0, #3
   16588:	mov	r4, r0
   1658c:	bhi	165a8 <__assert_fail@plt+0x5400>
   16590:	mov	r0, r4
   16594:	add	sp, sp, #12
   16598:	ldrd	r4, [sp]
   1659c:	ldrd	r6, [sp, #8]
   165a0:	add	sp, sp, #16
   165a4:	pop	{pc}		; (ldr pc, [sp], #4)
   165a8:	mov	r0, #0
   165ac:	bl	16830 <__assert_fail@plt+0x5688>
   165b0:	cmp	r0, #0
   165b4:	bne	16590 <__assert_fail@plt+0x53e8>
   165b8:	ldrb	r3, [r7]
   165bc:	mov	r4, #1
   165c0:	str	r3, [r6]
   165c4:	b	16590 <__assert_fail@plt+0x53e8>
   165c8:	lsrs	r3, r1, #30
   165cc:	movne	r3, #1
   165d0:	moveq	r3, #0
   165d4:	lsls	r1, r1, #2
   165d8:	bmi	165e8 <__assert_fail@plt+0x5440>
   165dc:	cmp	r3, #0
   165e0:	bne	165e8 <__assert_fail@plt+0x5440>
   165e4:	b	161d0 <__assert_fail@plt+0x5028>
   165e8:	str	r4, [sp, #-8]!
   165ec:	str	lr, [sp, #4]
   165f0:	bl	110a0 <__errno_location@plt>
   165f4:	mov	r3, #12
   165f8:	ldr	r4, [sp]
   165fc:	add	sp, sp, #4
   16600:	str	r3, [r0]
   16604:	mov	r0, #0
   16608:	pop	{pc}		; (ldr pc, [sp], #4)
   1660c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16610:	strd	r6, [sp, #8]
   16614:	subs	r7, r0, #0
   16618:	mov	r6, r1
   1661c:	str	r8, [sp, #16]
   16620:	mov	r8, r2
   16624:	str	lr, [sp, #20]
   16628:	sub	sp, sp, #8
   1662c:	beq	166d8 <__assert_fail@plt+0x5530>
   16630:	mov	r3, #10
   16634:	mov	r0, #0
   16638:	mov	r1, r3
   1663c:	str	r3, [sp, #4]
   16640:	bl	165c8 <__assert_fail@plt+0x5420>
   16644:	subs	r4, r0, #0
   16648:	beq	16688 <__assert_fail@plt+0x54e0>
   1664c:	add	r3, sp, #4
   16650:	mov	r2, r4
   16654:	ldr	r5, [sp, #4]
   16658:	mov	r1, r6
   1665c:	mov	r0, r7
   16660:	bl	110b8 <getgrouplist@plt>
   16664:	cmp	r0, #0
   16668:	blt	166a4 <__assert_fail@plt+0x54fc>
   1666c:	mov	r0, r4
   16670:	ldr	r1, [sp, #4]
   16674:	bl	165c8 <__assert_fail@plt+0x5420>
   16678:	cmp	r0, #0
   1667c:	bne	166cc <__assert_fail@plt+0x5524>
   16680:	mov	r0, r4
   16684:	bl	12084 <__assert_fail@plt+0xedc>
   16688:	mvn	r0, #0
   1668c:	add	sp, sp, #8
   16690:	ldrd	r4, [sp]
   16694:	ldrd	r6, [sp, #8]
   16698:	ldr	r8, [sp, #16]
   1669c:	add	sp, sp, #20
   166a0:	pop	{pc}		; (ldr pc, [sp], #4)
   166a4:	ldr	r1, [sp, #4]
   166a8:	mov	r0, r4
   166ac:	cmp	r1, r5
   166b0:	lsleq	r1, r1, #1
   166b4:	streq	r1, [sp, #4]
   166b8:	bl	165c8 <__assert_fail@plt+0x5420>
   166bc:	cmp	r0, #0
   166c0:	beq	16680 <__assert_fail@plt+0x54d8>
   166c4:	mov	r4, r0
   166c8:	b	1664c <__assert_fail@plt+0x54a4>
   166cc:	str	r0, [r8]
   166d0:	ldr	r0, [sp, #4]
   166d4:	b	1668c <__assert_fail@plt+0x54e4>
   166d8:	mov	r1, r7
   166dc:	bl	11154 <getgroups@plt>
   166e0:	cmp	r0, #0
   166e4:	str	r0, [sp, #4]
   166e8:	blt	16794 <__assert_fail@plt+0x55ec>
   166ec:	adds	r5, r6, #1
   166f0:	movne	r5, #1
   166f4:	cmp	r0, #0
   166f8:	movne	r3, r5
   166fc:	moveq	r3, #1
   16700:	cmp	r3, #0
   16704:	beq	167cc <__assert_fail@plt+0x5624>
   16708:	add	r3, r0, #1
   1670c:	mov	r0, r7
   16710:	mov	r1, r3
   16714:	str	r3, [sp, #4]
   16718:	bl	165c8 <__assert_fail@plt+0x5420>
   1671c:	subs	r4, r0, #0
   16720:	beq	16688 <__assert_fail@plt+0x54e0>
   16724:	ldr	r0, [sp, #4]
   16728:	cmn	r6, #1
   1672c:	sub	r0, r0, r5
   16730:	beq	167e4 <__assert_fail@plt+0x563c>
   16734:	add	r1, r4, #4
   16738:	bl	11154 <getgroups@plt>
   1673c:	cmp	r0, #0
   16740:	addge	r0, r0, #1
   16744:	strge	r6, [r4]
   16748:	blt	16680 <__assert_fail@plt+0x54d8>
   1674c:	cmp	r0, #1
   16750:	str	r4, [r8]
   16754:	ble	1668c <__assert_fail@plt+0x54e4>
   16758:	ldr	lr, [r4]
   1675c:	add	ip, r4, r0, lsl #2
   16760:	add	r3, r4, #4
   16764:	cmp	ip, r3
   16768:	bls	1668c <__assert_fail@plt+0x54e4>
   1676c:	ldr	r2, [r3], #4
   16770:	cmp	r2, lr
   16774:	beq	1678c <__assert_fail@plt+0x55e4>
   16778:	ldr	r1, [r4]
   1677c:	cmp	r2, r1
   16780:	strne	r2, [r4, #4]
   16784:	addne	r4, r4, #4
   16788:	bne	16764 <__assert_fail@plt+0x55bc>
   1678c:	sub	r0, r0, #1
   16790:	b	16764 <__assert_fail@plt+0x55bc>
   16794:	bl	110a0 <__errno_location@plt>
   16798:	ldr	r3, [r0]
   1679c:	cmp	r3, #38	; 0x26
   167a0:	bne	16688 <__assert_fail@plt+0x54e0>
   167a4:	mov	r0, r7
   167a8:	mov	r1, #4
   167ac:	bl	161d0 <__assert_fail@plt+0x5028>
   167b0:	subs	r3, r0, #0
   167b4:	beq	16688 <__assert_fail@plt+0x54e0>
   167b8:	adds	r0, r6, #1
   167bc:	str	r3, [r8]
   167c0:	movne	r0, #1
   167c4:	str	r6, [r3]
   167c8:	b	1668c <__assert_fail@plt+0x54e4>
   167cc:	mov	r1, r0
   167d0:	mov	r0, r3
   167d4:	bl	165c8 <__assert_fail@plt+0x5420>
   167d8:	subs	r4, r0, #0
   167dc:	ldrne	r0, [sp, #4]
   167e0:	beq	16688 <__assert_fail@plt+0x54e0>
   167e4:	mov	r1, r4
   167e8:	bl	11154 <getgroups@plt>
   167ec:	cmp	r0, #0
   167f0:	bge	1674c <__assert_fail@plt+0x55a4>
   167f4:	b	16680 <__assert_fail@plt+0x54d8>
   167f8:	umull	r2, r3, r1, r2
   167fc:	cmp	r3, #0
   16800:	bne	1680c <__assert_fail@plt+0x5664>
   16804:	mov	r1, r2
   16808:	b	161d0 <__assert_fail@plt+0x5028>
   1680c:	str	r4, [sp, #-8]!
   16810:	str	lr, [sp, #4]
   16814:	bl	110a0 <__errno_location@plt>
   16818:	mov	r3, #12
   1681c:	ldr	r4, [sp]
   16820:	add	sp, sp, #4
   16824:	str	r3, [r0]
   16828:	mov	r0, #0
   1682c:	pop	{pc}		; (ldr pc, [sp], #4)
   16830:	push	{lr}		; (str lr, [sp, #-4]!)
   16834:	sub	sp, sp, #268	; 0x10c
   16838:	movw	r2, #257	; 0x101
   1683c:	add	r1, sp, #4
   16840:	bl	16888 <__assert_fail@plt+0x56e0>
   16844:	cmp	r0, #0
   16848:	movne	r0, #0
   1684c:	bne	16880 <__assert_fail@plt+0x56d8>
   16850:	movw	r1, #30280	; 0x7648
   16854:	movt	r1, #1
   16858:	add	r0, sp, #4
   1685c:	bl	10ef0 <strcmp@plt>
   16860:	cmp	r0, #0
   16864:	beq	16880 <__assert_fail@plt+0x56d8>
   16868:	add	r0, sp, #4
   1686c:	movw	r1, #30284	; 0x764c
   16870:	movt	r1, #1
   16874:	bl	10ef0 <strcmp@plt>
   16878:	adds	r0, r0, #0
   1687c:	movne	r0, #1
   16880:	add	sp, sp, #268	; 0x10c
   16884:	pop	{pc}		; (ldr pc, [sp], #4)
   16888:	strd	r4, [sp, #-16]!
   1688c:	mov	r5, r1
   16890:	mov	r1, #0
   16894:	mov	r4, r2
   16898:	str	r6, [sp, #8]
   1689c:	str	lr, [sp, #12]
   168a0:	bl	11118 <setlocale@plt>
   168a4:	subs	r6, r0, #0
   168a8:	beq	16928 <__assert_fail@plt+0x5780>
   168ac:	bl	11088 <strlen@plt>
   168b0:	cmp	r4, r0
   168b4:	bhi	168d4 <__assert_fail@plt+0x572c>
   168b8:	cmp	r4, #0
   168bc:	moveq	r0, #34	; 0x22
   168c0:	bne	168f8 <__assert_fail@plt+0x5750>
   168c4:	ldrd	r4, [sp]
   168c8:	ldr	r6, [sp, #8]
   168cc:	add	sp, sp, #12
   168d0:	pop	{pc}		; (ldr pc, [sp], #4)
   168d4:	add	r2, r0, #1
   168d8:	mov	r1, r6
   168dc:	mov	r0, r5
   168e0:	bl	10f2c <memcpy@plt>
   168e4:	ldrd	r4, [sp]
   168e8:	mov	r0, #0
   168ec:	ldr	r6, [sp, #8]
   168f0:	add	sp, sp, #12
   168f4:	pop	{pc}		; (ldr pc, [sp], #4)
   168f8:	sub	r4, r4, #1
   168fc:	mov	r1, r6
   16900:	mov	r2, r4
   16904:	mov	r0, r5
   16908:	bl	10f2c <memcpy@plt>
   1690c:	mov	r3, #0
   16910:	mov	r0, #34	; 0x22
   16914:	strb	r3, [r5, r4]
   16918:	ldrd	r4, [sp]
   1691c:	ldr	r6, [sp, #8]
   16920:	add	sp, sp, #12
   16924:	pop	{pc}		; (ldr pc, [sp], #4)
   16928:	cmp	r4, #0
   1692c:	mov	r0, #22
   16930:	strbne	r6, [r5]
   16934:	ldrd	r4, [sp]
   16938:	ldr	r6, [sp, #8]
   1693c:	add	sp, sp, #12
   16940:	pop	{pc}		; (ldr pc, [sp], #4)
   16944:	mov	r1, #0
   16948:	b	11118 <setlocale@plt>
   1694c:	cmp	r3, #0
   16950:	cmpeq	r2, #0
   16954:	bne	1696c <__assert_fail@plt+0x57c4>
   16958:	cmp	r1, #0
   1695c:	cmpeq	r0, #0
   16960:	mvnne	r1, #0
   16964:	mvnne	r0, #0
   16968:	b	16988 <__assert_fail@plt+0x57e0>
   1696c:	sub	sp, sp, #8
   16970:	push	{sp, lr}
   16974:	bl	16998 <__assert_fail@plt+0x57f0>
   16978:	ldr	lr, [sp, #4]
   1697c:	add	sp, sp, #8
   16980:	pop	{r2, r3}
   16984:	bx	lr
   16988:	push	{r1, lr}
   1698c:	mov	r0, #8
   16990:	bl	10ed8 <raise@plt>
   16994:	pop	{r1, pc}
   16998:	cmp	r1, r3
   1699c:	cmpeq	r0, r2
   169a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169a4:	mov	r4, r0
   169a8:	movcc	r0, #0
   169ac:	mov	r5, r1
   169b0:	ldr	lr, [sp, #36]	; 0x24
   169b4:	movcc	r1, r0
   169b8:	bcc	16ab4 <__assert_fail@plt+0x590c>
   169bc:	cmp	r3, #0
   169c0:	clzeq	ip, r2
   169c4:	clzne	ip, r3
   169c8:	addeq	ip, ip, #32
   169cc:	cmp	r5, #0
   169d0:	clzeq	r1, r4
   169d4:	addeq	r1, r1, #32
   169d8:	clzne	r1, r5
   169dc:	sub	ip, ip, r1
   169e0:	sub	sl, ip, #32
   169e4:	lsl	r9, r3, ip
   169e8:	rsb	fp, ip, #32
   169ec:	orr	r9, r9, r2, lsl sl
   169f0:	orr	r9, r9, r2, lsr fp
   169f4:	lsl	r8, r2, ip
   169f8:	cmp	r5, r9
   169fc:	cmpeq	r4, r8
   16a00:	movcc	r0, #0
   16a04:	movcc	r1, r0
   16a08:	bcc	16a24 <__assert_fail@plt+0x587c>
   16a0c:	mov	r0, #1
   16a10:	subs	r4, r4, r8
   16a14:	lsl	r1, r0, sl
   16a18:	orr	r1, r1, r0, lsr fp
   16a1c:	lsl	r0, r0, ip
   16a20:	sbc	r5, r5, r9
   16a24:	cmp	ip, #0
   16a28:	beq	16ab4 <__assert_fail@plt+0x590c>
   16a2c:	lsr	r6, r8, #1
   16a30:	orr	r6, r6, r9, lsl #31
   16a34:	lsr	r7, r9, #1
   16a38:	mov	r2, ip
   16a3c:	b	16a60 <__assert_fail@plt+0x58b8>
   16a40:	subs	r3, r4, r6
   16a44:	sbc	r8, r5, r7
   16a48:	adds	r3, r3, r3
   16a4c:	adc	r8, r8, r8
   16a50:	adds	r4, r3, #1
   16a54:	adc	r5, r8, #0
   16a58:	subs	r2, r2, #1
   16a5c:	beq	16a7c <__assert_fail@plt+0x58d4>
   16a60:	cmp	r5, r7
   16a64:	cmpeq	r4, r6
   16a68:	bcs	16a40 <__assert_fail@plt+0x5898>
   16a6c:	adds	r4, r4, r4
   16a70:	adc	r5, r5, r5
   16a74:	subs	r2, r2, #1
   16a78:	bne	16a60 <__assert_fail@plt+0x58b8>
   16a7c:	lsr	r3, r4, ip
   16a80:	orr	r3, r3, r5, lsl fp
   16a84:	lsr	r2, r5, ip
   16a88:	orr	r3, r3, r5, lsr sl
   16a8c:	adds	r0, r0, r4
   16a90:	mov	r4, r3
   16a94:	lsl	r3, r2, ip
   16a98:	orr	r3, r3, r4, lsl sl
   16a9c:	lsl	ip, r4, ip
   16aa0:	orr	r3, r3, r4, lsr fp
   16aa4:	adc	r1, r1, r5
   16aa8:	subs	r0, r0, ip
   16aac:	mov	r5, r2
   16ab0:	sbc	r1, r1, r3
   16ab4:	cmp	lr, #0
   16ab8:	strdne	r4, [lr]
   16abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ac0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ac4:	mov	r7, r0
   16ac8:	ldr	r6, [pc, #72]	; 16b18 <__assert_fail@plt+0x5970>
   16acc:	ldr	r5, [pc, #72]	; 16b1c <__assert_fail@plt+0x5974>
   16ad0:	add	r6, pc, r6
   16ad4:	add	r5, pc, r5
   16ad8:	sub	r6, r6, r5
   16adc:	mov	r8, r1
   16ae0:	mov	r9, r2
   16ae4:	bl	10e94 <calloc@plt-0x20>
   16ae8:	asrs	r6, r6, #2
   16aec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16af0:	mov	r4, #0
   16af4:	add	r4, r4, #1
   16af8:	ldr	r3, [r5], #4
   16afc:	mov	r2, r9
   16b00:	mov	r1, r8
   16b04:	mov	r0, r7
   16b08:	blx	r3
   16b0c:	cmp	r6, r4
   16b10:	bne	16af4 <__assert_fail@plt+0x594c>
   16b14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b18:	andeq	r1, r1, ip, lsr r4
   16b1c:	andeq	r1, r1, r4, lsr r4
   16b20:	bx	lr
   16b24:	ldr	r3, [pc, #12]	; 16b38 <__assert_fail@plt+0x5990>
   16b28:	mov	r1, #0
   16b2c:	add	r3, pc, r3
   16b30:	ldr	r2, [r3]
   16b34:	b	110ac <__cxa_atexit@plt>
   16b38:	andeq	r1, r1, r0, ror #11

Disassembly of section .fini:

00016b3c <.fini>:
   16b3c:	push	{r3, lr}
   16b40:	pop	{r3, pc}
