
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

000111d0 <.init>:
   111d0:	push	{r3, lr}
   111d4:	bl	1155c <__assert_fail@plt+0x48>
   111d8:	pop	{r3, pc}

Disassembly of section .plt:

000111dc <pthread_mutex_unlock@plt-0x14>:
   111dc:	push	{lr}		; (str lr, [sp, #-4]!)
   111e0:	ldr	lr, [pc, #4]	; 111ec <pthread_mutex_unlock@plt-0x4>
   111e4:	add	lr, pc, lr
   111e8:	ldr	pc, [lr, #8]!
   111ec:	andeq	r2, r2, r4, lsl lr

000111f0 <pthread_mutex_unlock@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #139264	; 0x22000
   111f8:	ldr	pc, [ip, #3604]!	; 0xe14

000111fc <calloc@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #139264	; 0x22000
   11204:	ldr	pc, [ip, #3596]!	; 0xe0c

00011208 <fputs_unlocked@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #139264	; 0x22000
   11210:	ldr	pc, [ip, #3588]!	; 0xe04

00011214 <wctype@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #139264	; 0x22000
   1121c:	ldr	pc, [ip, #3580]!	; 0xdfc

00011220 <raise@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #139264	; 0x22000
   11228:	ldr	pc, [ip, #3572]!	; 0xdf4

0001122c <wcrtomb@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #139264	; 0x22000
   11234:	ldr	pc, [ip, #3564]!	; 0xdec

00011238 <iswctype@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #139264	; 0x22000
   11240:	ldr	pc, [ip, #3556]!	; 0xde4

00011244 <strcmp@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #139264	; 0x22000
   1124c:	ldr	pc, [ip, #3548]!	; 0xddc

00011250 <posix_fadvise64@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #139264	; 0x22000
   11258:	ldr	pc, [ip, #3540]!	; 0xdd4

0001125c <pthread_mutex_destroy@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #139264	; 0x22000
   11264:	ldr	pc, [ip, #3532]!	; 0xdcc

00011268 <fflush@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #139264	; 0x22000
   11270:	ldr	pc, [ip, #3524]!	; 0xdc4

00011274 <memmove@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #139264	; 0x22000
   1127c:	ldr	pc, [ip, #3516]!	; 0xdbc

00011280 <free@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #139264	; 0x22000
   11288:	ldr	pc, [ip, #3508]!	; 0xdb4

0001128c <pthread_mutex_lock@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #139264	; 0x22000
   11294:	ldr	pc, [ip, #3500]!	; 0xdac

00011298 <_exit@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #139264	; 0x22000
   112a0:	ldr	pc, [ip, #3492]!	; 0xda4

000112a4 <memcpy@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #139264	; 0x22000
   112ac:	ldr	pc, [ip, #3484]!	; 0xd9c

000112b0 <tolower@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #139264	; 0x22000
   112b8:	ldr	pc, [ip, #3476]!	; 0xd94

000112bc <pthread_mutex_init@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #139264	; 0x22000
   112c4:	ldr	pc, [ip, #3468]!	; 0xd8c

000112c8 <towlower@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #139264	; 0x22000
   112d0:	ldr	pc, [ip, #3460]!	; 0xd84

000112d4 <mbsinit@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #139264	; 0x22000
   112dc:	ldr	pc, [ip, #3452]!	; 0xd7c

000112e0 <fwrite_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #139264	; 0x22000
   112e8:	ldr	pc, [ip, #3444]!	; 0xd74

000112ec <stpcpy@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #139264	; 0x22000
   112f4:	ldr	pc, [ip, #3436]!	; 0xd6c

000112f8 <getc_unlocked@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #139264	; 0x22000
   11300:	ldr	pc, [ip, #3428]!	; 0xd64

00011304 <dcgettext@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #139264	; 0x22000
   1130c:	ldr	pc, [ip, #3420]!	; 0xd5c

00011310 <realloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #139264	; 0x22000
   11318:	ldr	pc, [ip, #3412]!	; 0xd54

0001131c <textdomain@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #139264	; 0x22000
   11324:	ldr	pc, [ip, #3404]!	; 0xd4c

00011328 <iswprint@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #139264	; 0x22000
   11330:	ldr	pc, [ip, #3396]!	; 0xd44

00011334 <lseek64@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #139264	; 0x22000
   1133c:	ldr	pc, [ip, #3388]!	; 0xd3c

00011340 <__ctype_get_mb_cur_max@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #139264	; 0x22000
   11348:	ldr	pc, [ip, #3380]!	; 0xd34

0001134c <__fpending@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #139264	; 0x22000
   11354:	ldr	pc, [ip, #3372]!	; 0xd2c

00011358 <ferror_unlocked@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #139264	; 0x22000
   11360:	ldr	pc, [ip, #3364]!	; 0xd24

00011364 <mbrtowc@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #139264	; 0x22000
   1136c:	ldr	pc, [ip, #3356]!	; 0xd1c

00011370 <error@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #139264	; 0x22000
   11378:	ldr	pc, [ip, #3348]!	; 0xd14

0001137c <malloc@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #139264	; 0x22000
   11384:	ldr	pc, [ip, #3340]!	; 0xd0c

00011388 <__libc_start_main@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #139264	; 0x22000
   11390:	ldr	pc, [ip, #3332]!	; 0xd04

00011394 <__freading@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #139264	; 0x22000
   1139c:	ldr	pc, [ip, #3324]!	; 0xcfc

000113a0 <__gmon_start__@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #139264	; 0x22000
   113a8:	ldr	pc, [ip, #3316]!	; 0xcf4

000113ac <getopt_long@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #139264	; 0x22000
   113b4:	ldr	pc, [ip, #3308]!	; 0xcec

000113b8 <__ctype_b_loc@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #139264	; 0x22000
   113c0:	ldr	pc, [ip, #3300]!	; 0xce4

000113c4 <exit@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #139264	; 0x22000
   113cc:	ldr	pc, [ip, #3292]!	; 0xcdc

000113d0 <bcmp@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #139264	; 0x22000
   113d8:	ldr	pc, [ip, #3284]!	; 0xcd4

000113dc <strlen@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #139264	; 0x22000
   113e4:	ldr	pc, [ip, #3276]!	; 0xccc

000113e8 <strchr@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #139264	; 0x22000
   113f0:	ldr	pc, [ip, #3268]!	; 0xcc4

000113f4 <__errno_location@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #139264	; 0x22000
   113fc:	ldr	pc, [ip, #3260]!	; 0xcbc

00011400 <iswalnum@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #139264	; 0x22000
   11408:	ldr	pc, [ip, #3252]!	; 0xcb4

0001140c <__cxa_atexit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #139264	; 0x22000
   11414:	ldr	pc, [ip, #3244]!	; 0xcac

00011418 <memset@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #139264	; 0x22000
   11420:	ldr	pc, [ip, #3236]!	; 0xca4

00011424 <btowc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #139264	; 0x22000
   1142c:	ldr	pc, [ip, #3228]!	; 0xc9c

00011430 <__printf_chk@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #139264	; 0x22000
   11438:	ldr	pc, [ip, #3220]!	; 0xc94

0001143c <fileno@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #139264	; 0x22000
   11444:	ldr	pc, [ip, #3212]!	; 0xc8c

00011448 <__fprintf_chk@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #139264	; 0x22000
   11450:	ldr	pc, [ip, #3204]!	; 0xc84

00011454 <strtoimax@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #139264	; 0x22000
   1145c:	ldr	pc, [ip, #3196]!	; 0xc7c

00011460 <fclose@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #139264	; 0x22000
   11468:	ldr	pc, [ip, #3188]!	; 0xc74

0001146c <fseeko64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #139264	; 0x22000
   11474:	ldr	pc, [ip, #3180]!	; 0xc6c

00011478 <setlocale@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #139264	; 0x22000
   11480:	ldr	pc, [ip, #3172]!	; 0xc64

00011484 <toupper@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #139264	; 0x22000
   1148c:	ldr	pc, [ip, #3164]!	; 0xc5c

00011490 <strrchr@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #139264	; 0x22000
   11498:	ldr	pc, [ip, #3156]!	; 0xc54

0001149c <nl_langinfo@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #139264	; 0x22000
   114a4:	ldr	pc, [ip, #3148]!	; 0xc4c

000114a8 <clearerr_unlocked@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #139264	; 0x22000
   114b0:	ldr	pc, [ip, #3140]!	; 0xc44

000114b4 <fopen64@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #139264	; 0x22000
   114bc:	ldr	pc, [ip, #3132]!	; 0xc3c

000114c0 <bindtextdomain@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #139264	; 0x22000
   114c8:	ldr	pc, [ip, #3124]!	; 0xc34

000114cc <towupper@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #139264	; 0x22000
   114d4:	ldr	pc, [ip, #3116]!	; 0xc2c

000114d8 <fputs@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #139264	; 0x22000
   114e0:	ldr	pc, [ip, #3108]!	; 0xc24

000114e4 <strncmp@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #139264	; 0x22000
   114ec:	ldr	pc, [ip, #3100]!	; 0xc1c

000114f0 <abort@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #139264	; 0x22000
   114f8:	ldr	pc, [ip, #3092]!	; 0xc14

000114fc <feof_unlocked@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #139264	; 0x22000
   11504:	ldr	pc, [ip, #3084]!	; 0xc0c

00011508 <putchar_unlocked@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #139264	; 0x22000
   11510:	ldr	pc, [ip, #3076]!	; 0xc04

00011514 <__assert_fail@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #139264	; 0x22000
   1151c:	ldr	pc, [ip, #3068]!	; 0xbfc

Disassembly of section .text:

00011520 <.text>:
   11520:	mov	fp, #0
   11524:	mov	lr, #0
   11528:	pop	{r1}		; (ldr r1, [sp], #4)
   1152c:	mov	r2, sp
   11530:	push	{r2}		; (str r2, [sp, #-4]!)
   11534:	push	{r0}		; (str r0, [sp, #-4]!)
   11538:	ldr	ip, [pc, #16]	; 11550 <__assert_fail@plt+0x3c>
   1153c:	push	{ip}		; (str ip, [sp, #-4]!)
   11540:	ldr	r0, [pc, #12]	; 11554 <__assert_fail@plt+0x40>
   11544:	ldr	r3, [pc, #12]	; 11558 <__assert_fail@plt+0x44>
   11548:	bl	11388 <__libc_start_main@plt>
   1154c:	bl	114f0 <abort@plt>
   11550:	strdeq	r2, [r2], -ip
   11554:	andeq	r1, r1, r4, lsl r9
   11558:	muleq	r2, ip, r5
   1155c:	ldr	r3, [pc, #20]	; 11578 <__assert_fail@plt+0x64>
   11560:	ldr	r2, [pc, #20]	; 1157c <__assert_fail@plt+0x68>
   11564:	add	r3, pc, r3
   11568:	ldr	r2, [r3, r2]
   1156c:	cmp	r2, #0
   11570:	bxeq	lr
   11574:	b	113a0 <__gmon_start__@plt>
   11578:	muleq	r2, r4, sl
   1157c:	andeq	r0, r0, ip, lsl r1
   11580:	ldr	r0, [pc, #24]	; 115a0 <__assert_fail@plt+0x8c>
   11584:	ldr	r3, [pc, #24]	; 115a4 <__assert_fail@plt+0x90>
   11588:	cmp	r3, r0
   1158c:	bxeq	lr
   11590:	ldr	r3, [pc, #16]	; 115a8 <__assert_fail@plt+0x94>
   11594:	cmp	r3, #0
   11598:	bxeq	lr
   1159c:	bx	r3
   115a0:			; <UNDEFINED> instruction: 0x000341b0
   115a4:			; <UNDEFINED> instruction: 0x000341b0
   115a8:	andeq	r0, r0, r0
   115ac:	ldr	r0, [pc, #36]	; 115d8 <__assert_fail@plt+0xc4>
   115b0:	ldr	r1, [pc, #36]	; 115dc <__assert_fail@plt+0xc8>
   115b4:	sub	r1, r1, r0
   115b8:	asr	r1, r1, #2
   115bc:	add	r1, r1, r1, lsr #31
   115c0:	asrs	r1, r1, #1
   115c4:	bxeq	lr
   115c8:	ldr	r3, [pc, #16]	; 115e0 <__assert_fail@plt+0xcc>
   115cc:	cmp	r3, #0
   115d0:	bxeq	lr
   115d4:	bx	r3
   115d8:			; <UNDEFINED> instruction: 0x000341b0
   115dc:			; <UNDEFINED> instruction: 0x000341b0
   115e0:	andeq	r0, r0, r0
   115e4:	push	{r4, lr}
   115e8:	ldr	r4, [pc, #24]	; 11608 <__assert_fail@plt+0xf4>
   115ec:	ldrb	r3, [r4]
   115f0:	cmp	r3, #0
   115f4:	popne	{r4, pc}
   115f8:	bl	11580 <__assert_fail@plt+0x6c>
   115fc:	mov	r3, #1
   11600:	strb	r3, [r4]
   11604:	pop	{r4, pc}
   11608:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1160c:	b	115ac <__assert_fail@plt+0x98>
   11610:	push	{fp, lr}
   11614:	mov	fp, sp
   11618:	sub	sp, sp, #56	; 0x38
   1161c:	mov	r8, r0
   11620:	cmp	r0, #0
   11624:	bne	118d4 <__assert_fail@plt+0x3c0>
   11628:	movw	r1, #9803	; 0x264b
   1162c:	mov	r0, #0
   11630:	mov	r2, #5
   11634:	movt	r1, #2
   11638:	bl	11304 <dcgettext@plt>
   1163c:	mov	r1, r0
   11640:	movw	r0, #17808	; 0x4590
   11644:	movt	r0, #3
   11648:	ldr	r2, [r0]
   1164c:	mov	r0, #1
   11650:	bl	11430 <__printf_chk@plt>
   11654:	movw	r1, #9836	; 0x266c
   11658:	mov	r0, #0
   1165c:	mov	r2, #5
   11660:	movt	r1, #2
   11664:	bl	11304 <dcgettext@plt>
   11668:	movw	r9, #16844	; 0x41cc
   1166c:	movt	r9, #3
   11670:	ldr	r1, [r9]
   11674:	bl	11208 <fputs_unlocked@plt>
   11678:	movw	r1, #11830	; 0x2e36
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	movt	r1, #2
   11688:	bl	11304 <dcgettext@plt>
   1168c:	ldr	r1, [r9]
   11690:	bl	11208 <fputs_unlocked@plt>
   11694:	movw	r1, #11886	; 0x2e6e
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	movt	r1, #2
   116a4:	bl	11304 <dcgettext@plt>
   116a8:	ldr	r1, [r9]
   116ac:	bl	11208 <fputs_unlocked@plt>
   116b0:	movw	r1, #9898	; 0x26aa
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #2
   116c0:	bl	11304 <dcgettext@plt>
   116c4:	ldr	r1, [r9]
   116c8:	bl	11208 <fputs_unlocked@plt>
   116cc:	movw	r1, #10108	; 0x277c
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #2
   116dc:	bl	11304 <dcgettext@plt>
   116e0:	ldr	r1, [r9]
   116e4:	bl	11208 <fputs_unlocked@plt>
   116e8:	movw	r1, #10551	; 0x2937
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #2
   116f8:	bl	11304 <dcgettext@plt>
   116fc:	ldr	r1, [r9]
   11700:	bl	11208 <fputs_unlocked@plt>
   11704:	movw	r1, #10694	; 0x29c6
   11708:	mov	r0, #0
   1170c:	mov	r2, #5
   11710:	movt	r1, #2
   11714:	bl	11304 <dcgettext@plt>
   11718:	ldr	r1, [r9]
   1171c:	bl	11208 <fputs_unlocked@plt>
   11720:	movw	r1, #10739	; 0x29f3
   11724:	mov	r0, #0
   11728:	mov	r2, #5
   1172c:	movt	r1, #2
   11730:	bl	11304 <dcgettext@plt>
   11734:	ldr	r1, [r9]
   11738:	bl	11208 <fputs_unlocked@plt>
   1173c:	movw	r1, #10793	; 0x2a29
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #2
   1174c:	bl	11304 <dcgettext@plt>
   11750:	ldr	r1, [r9]
   11754:	bl	11208 <fputs_unlocked@plt>
   11758:	movw	r1, #11116	; 0x2b6c
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	movt	r1, #2
   11768:	bl	11304 <dcgettext@plt>
   1176c:	ldr	r1, [r9]
   11770:	bl	11208 <fputs_unlocked@plt>
   11774:	movw	r1, #11318	; 0x2c36
   11778:	mov	r0, #0
   1177c:	mov	r2, #5
   11780:	movt	r1, #2
   11784:	bl	11304 <dcgettext@plt>
   11788:	ldr	r1, [r9]
   1178c:	bl	11208 <fputs_unlocked@plt>
   11790:	movw	r0, #12776	; 0x31e8
   11794:	mov	r6, sp
   11798:	movt	r0, #2
   1179c:	mov	r1, r6
   117a0:	ldm	r0!, {r2, r3, r4, r5}
   117a4:	stmia	r1!, {r2, r3, r4, r5}
   117a8:	ldm	r0!, {r2, r3, r4, r5, r7}
   117ac:	stmia	r1!, {r2, r3, r4, r5, r7}
   117b0:	ldm	r0, {r2, r3, r4, r5, r7}
   117b4:	stm	r1, {r2, r3, r4, r5, r7}
   117b8:	movw	r1, #11961	; 0x2eb9
   117bc:	movw	r5, #11465	; 0x2cc9
   117c0:	movt	r1, #2
   117c4:	movt	r5, #2
   117c8:	mov	r0, r5
   117cc:	bl	11244 <strcmp@plt>
   117d0:	cmp	r0, #0
   117d4:	ldrne	r1, [r6, #8]!
   117d8:	cmpne	r1, #0
   117dc:	bne	117c8 <__assert_fail@plt+0x2b4>
   117e0:	movw	r1, #12056	; 0x2f18
   117e4:	ldr	r6, [r6, #4]
   117e8:	mov	r0, #0
   117ec:	mov	r2, #5
   117f0:	movt	r1, #2
   117f4:	bl	11304 <dcgettext@plt>
   117f8:	movw	r2, #11786	; 0x2e0a
   117fc:	movw	r3, #12079	; 0x2f2f
   11800:	mov	r1, r0
   11804:	mov	r0, #1
   11808:	movt	r2, #2
   1180c:	movt	r3, #2
   11810:	bl	11430 <__printf_chk@plt>
   11814:	cmp	r6, #0
   11818:	mov	r0, #5
   1181c:	mov	r1, #0
   11820:	moveq	r6, r5
   11824:	bl	11478 <setlocale@plt>
   11828:	cmp	r0, #0
   1182c:	beq	11864 <__assert_fail@plt+0x350>
   11830:	movw	r1, #12119	; 0x2f57
   11834:	mov	r2, #3
   11838:	movt	r1, #2
   1183c:	bl	114e4 <strncmp@plt>
   11840:	cmp	r0, #0
   11844:	beq	11864 <__assert_fail@plt+0x350>
   11848:	movw	r1, #12123	; 0x2f5b
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	movt	r1, #2
   11858:	bl	11304 <dcgettext@plt>
   1185c:	ldr	r1, [r9]
   11860:	bl	11208 <fputs_unlocked@plt>
   11864:	movw	r1, #12194	; 0x2fa2
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #2
   11874:	bl	11304 <dcgettext@plt>
   11878:	movw	r2, #12079	; 0x2f2f
   1187c:	mov	r1, r0
   11880:	mov	r0, #1
   11884:	mov	r3, r5
   11888:	movt	r2, #2
   1188c:	bl	11430 <__printf_chk@plt>
   11890:	movw	r1, #12221	; 0x2fbd
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #2
   118a0:	bl	11304 <dcgettext@plt>
   118a4:	mov	r1, r0
   118a8:	movw	r0, #11989	; 0x2ed5
   118ac:	movw	r3, #12462	; 0x30ae
   118b0:	cmp	r6, r5
   118b4:	mov	r2, r6
   118b8:	movt	r0, #2
   118bc:	movt	r3, #2
   118c0:	moveq	r3, r0
   118c4:	mov	r0, #1
   118c8:	bl	11430 <__printf_chk@plt>
   118cc:	mov	r0, r8
   118d0:	bl	113c4 <exit@plt>
   118d4:	movw	r0, #16832	; 0x41c0
   118d8:	movw	r1, #9764	; 0x2624
   118dc:	mov	r2, #5
   118e0:	movt	r0, #3
   118e4:	movt	r1, #2
   118e8:	ldr	r5, [r0]
   118ec:	mov	r0, #0
   118f0:	bl	11304 <dcgettext@plt>
   118f4:	mov	r2, r0
   118f8:	movw	r0, #17808	; 0x4590
   118fc:	mov	r1, #1
   11900:	movt	r0, #3
   11904:	ldr	r3, [r0]
   11908:	mov	r0, r5
   1190c:	bl	11448 <__fprintf_chk@plt>
   11910:	b	118cc <__assert_fail@plt+0x3b8>
   11914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11918:	add	fp, sp, #28
   1191c:	sub	sp, sp, #20
   11920:	mov	r5, r0
   11924:	ldr	r0, [r1]
   11928:	mov	r9, r1
   1192c:	bl	12a80 <__assert_fail@plt+0x156c>
   11930:	movw	r1, #12462	; 0x30ae
   11934:	mov	r0, #6
   11938:	movt	r1, #2
   1193c:	bl	11478 <setlocale@plt>
   11940:	movw	r6, #11790	; 0x2e0e
   11944:	movw	r1, #11468	; 0x2ccc
   11948:	movt	r6, #2
   1194c:	movt	r1, #2
   11950:	mov	r0, r6
   11954:	bl	114c0 <bindtextdomain@plt>
   11958:	mov	r0, r6
   1195c:	bl	1131c <textdomain@plt>
   11960:	movw	r0, #9920	; 0x26c0
   11964:	movt	r0, #1
   11968:	bl	22600 <__assert_fail@plt+0x110ec>
   1196c:	movw	r0, #16856	; 0x41d8
   11970:	movw	r7, #11492	; 0x2ce4
   11974:	mov	r1, #0
   11978:	mov	r4, #0
   1197c:	mov	r6, #1
   11980:	movt	r0, #3
   11984:	movt	r7, #2
   11988:	strb	r1, [r0]
   1198c:	movw	r3, #12520	; 0x30e8
   11990:	mov	r0, r5
   11994:	mov	r1, r9
   11998:	mov	r2, r7
   1199c:	mov	sl, r6
   119a0:	str	r4, [sp]
   119a4:	movt	r3, #2
   119a8:	bl	113ac <getopt_long@plt>
   119ac:	cmp	r0, #97	; 0x61
   119b0:	ble	11a64 <__assert_fail@plt+0x550>
   119b4:	sub	r0, r0, #98	; 0x62
   119b8:	mov	r6, #0
   119bc:	cmp	r0, #21
   119c0:	bhi	1198c <__assert_fail@plt+0x478>
   119c4:	add	r1, pc, #4
   119c8:	mov	r6, #0
   119cc:	ldr	pc, [r1, r0, lsl #2]
   119d0:	andeq	r1, r1, r8, lsr #20
   119d4:	andeq	r1, r1, ip, lsl #19
   119d8:	andeq	r1, r1, r8, lsl ip
   119dc:	andeq	r1, r1, ip, lsl #19
   119e0:	andeq	r1, r1, r4, asr fp
   119e4:	andeq	r1, r1, ip, lsl #19
   119e8:	muleq	r1, r0, fp
   119ec:	andeq	r1, r1, r4, lsl #21
   119f0:	andeq	r1, r1, ip, lsl #19
   119f4:	andeq	r1, r1, ip, lsl #19
   119f8:	andeq	r1, r1, r0, lsl #25
   119fc:	andeq	r1, r1, ip, lsl #19
   11a00:	andeq	r1, r1, ip, ror #25
   11a04:	andeq	r1, r1, ip, lsl #19
   11a08:	andeq	r1, r1, r4, lsl #24
   11a0c:	andeq	r1, r1, ip, lsl #19
   11a10:	andeq	r1, r1, ip, lsl #19
   11a14:	andeq	r1, r1, r4, lsl #27
   11a18:	andeq	r1, r1, ip, lsl #19
   11a1c:	andeq	r1, r1, ip, lsl #19
   11a20:	andeq	r1, r1, ip, ror #21
   11a24:	muleq	r1, ip, sp
   11a28:	movw	r0, #16684	; 0x412c
   11a2c:	movw	r1, #17148	; 0x42fc
   11a30:	movw	r2, #17180	; 0x431c
   11a34:	movt	r0, #3
   11a38:	movt	r1, #3
   11a3c:	movt	r2, #3
   11a40:	bl	120c0 <__assert_fail@plt+0xbac>
   11a44:	cmp	r0, #0
   11a48:	mov	r6, sl
   11a4c:	bne	1198c <__assert_fail@plt+0x478>
   11a50:	movw	r1, #11549	; 0x2d1d
   11a54:	mov	r6, #0
   11a58:	mov	r0, #0
   11a5c:	movt	r1, #2
   11a60:	b	11bc8 <__assert_fail@plt+0x6b4>
   11a64:	cmn	r0, #1
   11a68:	beq	11e6c <__assert_fail@plt+0x958>
   11a6c:	cmn	r0, #3
   11a70:	beq	12044 <__assert_fail@plt+0xb30>
   11a74:	cmn	r0, #2
   11a78:	mov	r6, #0
   11a7c:	bne	1198c <__assert_fail@plt+0x478>
   11a80:	b	12098 <__assert_fail@plt+0xb84>
   11a84:	movw	r0, #16848	; 0x41d0
   11a88:	movw	r1, #11646	; 0x2d7e
   11a8c:	mov	r2, #5
   11a90:	movt	r0, #3
   11a94:	movt	r1, #2
   11a98:	ldr	r7, [r0]
   11a9c:	mov	r0, #0
   11aa0:	bl	11304 <dcgettext@plt>
   11aa4:	mvn	r1, #0
   11aa8:	str	r0, [sp, #12]
   11aac:	mov	r0, r7
   11ab0:	movw	r7, #11492	; 0x2ce4
   11ab4:	mov	r2, #0
   11ab8:	mov	r3, #-2147483648	; 0x80000000
   11abc:	str	r4, [sp, #16]
   11ac0:	str	r1, [sp]
   11ac4:	mvn	r1, #-2147483648	; 0x80000000
   11ac8:	movt	r7, #2
   11acc:	str	r1, [sp, #4]
   11ad0:	movw	r1, #12462	; 0x30ae
   11ad4:	movt	r1, #2
   11ad8:	str	r1, [sp, #8]
   11adc:	bl	21928 <__assert_fail@plt+0x10414>
   11ae0:	movw	r2, #16704	; 0x4140
   11ae4:	movt	r2, #3
   11ae8:	b	11ce4 <__assert_fail@plt+0x7d0>
   11aec:	movw	r0, #16848	; 0x41d0
   11af0:	movw	r1, #11617	; 0x2d61
   11af4:	mov	r2, #5
   11af8:	movt	r0, #3
   11afc:	movt	r1, #2
   11b00:	ldr	r7, [r0]
   11b04:	mov	r0, #0
   11b08:	bl	11304 <dcgettext@plt>
   11b0c:	mvn	r1, #0
   11b10:	str	r0, [sp, #12]
   11b14:	mov	r0, r7
   11b18:	movw	r7, #11492	; 0x2ce4
   11b1c:	mov	r2, #0
   11b20:	mov	r3, #-2147483648	; 0x80000000
   11b24:	str	r4, [sp, #16]
   11b28:	str	r1, [sp]
   11b2c:	mvn	r1, #-2147483648	; 0x80000000
   11b30:	movt	r7, #2
   11b34:	str	r1, [sp, #4]
   11b38:	movw	r1, #12462	; 0x30ae
   11b3c:	movt	r1, #2
   11b40:	str	r1, [sp, #8]
   11b44:	bl	21928 <__assert_fail@plt+0x10414>
   11b48:	movw	r2, #16696	; 0x4138
   11b4c:	movt	r2, #3
   11b50:	b	11ce4 <__assert_fail@plt+0x7d0>
   11b54:	movw	r0, #16688	; 0x4130
   11b58:	movw	r1, #17436	; 0x441c
   11b5c:	movw	r2, #17468	; 0x443c
   11b60:	movt	r0, #3
   11b64:	movt	r1, #3
   11b68:	movt	r2, #3
   11b6c:	bl	120c0 <__assert_fail@plt+0xbac>
   11b70:	cmp	r0, #0
   11b74:	mov	r6, sl
   11b78:	bne	1198c <__assert_fail@plt+0x478>
   11b7c:	movw	r1, #11582	; 0x2d3e
   11b80:	mov	r6, #0
   11b84:	mov	r0, #0
   11b88:	movt	r1, #2
   11b8c:	b	11bc8 <__assert_fail@plt+0x6b4>
   11b90:	movw	r0, #16680	; 0x4128
   11b94:	movw	r1, #16860	; 0x41dc
   11b98:	movw	r2, #16892	; 0x41fc
   11b9c:	movt	r0, #3
   11ba0:	movt	r1, #3
   11ba4:	movt	r2, #3
   11ba8:	bl	120c0 <__assert_fail@plt+0xbac>
   11bac:	cmp	r0, #0
   11bb0:	mov	r6, sl
   11bb4:	bne	1198c <__assert_fail@plt+0x478>
   11bb8:	movw	r1, #11514	; 0x2cfa
   11bbc:	mov	r6, #0
   11bc0:	mov	r0, #0
   11bc4:	movt	r1, #2
   11bc8:	mov	r2, #5
   11bcc:	bl	11304 <dcgettext@plt>
   11bd0:	mov	r7, r0
   11bd4:	movw	r0, #16848	; 0x41d0
   11bd8:	movt	r0, #3
   11bdc:	ldr	r0, [r0]
   11be0:	bl	1446c <__assert_fail@plt+0x2f58>
   11be4:	mov	r3, r0
   11be8:	mov	r2, r7
   11bec:	movw	r7, #11492	; 0x2ce4
   11bf0:	mov	r0, #0
   11bf4:	mov	r1, #0
   11bf8:	movt	r7, #2
   11bfc:	bl	11370 <error@plt>
   11c00:	b	1198c <__assert_fail@plt+0x478>
   11c04:	movw	r1, #17724	; 0x453c
   11c08:	mov	r0, #1
   11c0c:	movt	r1, #3
   11c10:	strb	r0, [r1]
   11c14:	b	11e08 <__assert_fail@plt+0x8f4>
   11c18:	movw	r0, #16848	; 0x41d0
   11c1c:	movt	r0, #3
   11c20:	ldr	r8, [r0]
   11c24:	mov	r0, r8
   11c28:	bl	113dc <strlen@plt>
   11c2c:	sub	r0, r0, #1
   11c30:	cmp	r0, #1
   11c34:	bhi	11e10 <__assert_fail@plt+0x8fc>
   11c38:	ldrb	r0, [r8]
   11c3c:	mov	r6, sl
   11c40:	cmp	r0, #0
   11c44:	beq	1198c <__assert_fail@plt+0x478>
   11c48:	movw	r0, #16732	; 0x415c
   11c4c:	movw	r2, #16848	; 0x41d0
   11c50:	movt	r0, #3
   11c54:	movt	r2, #3
   11c58:	ldr	r0, [r0]
   11c5c:	add	r1, r8, #1
   11c60:	str	r1, [r2]
   11c64:	ldrb	r1, [r8]
   11c68:	strb	r1, [r0], #1
   11c6c:	ldr	r8, [r2]
   11c70:	ldrb	r1, [r8]
   11c74:	cmp	r1, #0
   11c78:	bne	11c5c <__assert_fail@plt+0x748>
   11c7c:	b	11e08 <__assert_fail@plt+0x8f4>
   11c80:	movw	r0, #16848	; 0x41d0
   11c84:	movw	r1, #11676	; 0x2d9c
   11c88:	mov	r2, #5
   11c8c:	movt	r0, #3
   11c90:	movt	r1, #2
   11c94:	ldr	r7, [r0]
   11c98:	mov	r0, #0
   11c9c:	bl	11304 <dcgettext@plt>
   11ca0:	mvn	r1, #0
   11ca4:	str	r0, [sp, #12]
   11ca8:	mov	r0, r7
   11cac:	movw	r7, #11492	; 0x2ce4
   11cb0:	mov	r2, #1
   11cb4:	mov	r3, #0
   11cb8:	str	r4, [sp, #16]
   11cbc:	str	r1, [sp]
   11cc0:	mvn	r1, #-2147483648	; 0x80000000
   11cc4:	movt	r7, #2
   11cc8:	str	r1, [sp, #4]
   11ccc:	movw	r1, #12462	; 0x30ae
   11cd0:	movt	r1, #2
   11cd4:	str	r1, [sp, #8]
   11cd8:	bl	21928 <__assert_fail@plt+0x10414>
   11cdc:	movw	r2, #16712	; 0x4148
   11ce0:	movt	r2, #3
   11ce4:	strd	r0, [r2]
   11ce8:	b	11e08 <__assert_fail@plt+0x8f4>
   11cec:	movw	r0, #16848	; 0x41d0
   11cf0:	movw	r1, #11743	; 0x2ddf
   11cf4:	movt	r0, #3
   11cf8:	movt	r1, #2
   11cfc:	ldr	r7, [r0]
   11d00:	mov	r0, r7
   11d04:	bl	11244 <strcmp@plt>
   11d08:	cmp	r0, #0
   11d0c:	beq	11e20 <__assert_fail@plt+0x90c>
   11d10:	movw	r1, #11746	; 0x2de2
   11d14:	mov	r0, r7
   11d18:	movt	r1, #2
   11d1c:	bl	11244 <strcmp@plt>
   11d20:	cmp	r0, #0
   11d24:	beq	11e34 <__assert_fail@plt+0x920>
   11d28:	movw	r1, #11749	; 0x2de5
   11d2c:	mov	r0, r7
   11d30:	movt	r1, #2
   11d34:	bl	11244 <strcmp@plt>
   11d38:	cmp	r0, #0
   11d3c:	beq	11e48 <__assert_fail@plt+0x934>
   11d40:	movw	r1, #11752	; 0x2de8
   11d44:	mov	r0, #0
   11d48:	mov	r2, #5
   11d4c:	mov	r6, #0
   11d50:	movt	r1, #2
   11d54:	bl	11304 <dcgettext@plt>
   11d58:	mov	r7, r0
   11d5c:	movw	r0, #16848	; 0x41d0
   11d60:	movt	r0, #3
   11d64:	ldr	r0, [r0]
   11d68:	bl	1446c <__assert_fail@plt+0x2f58>
   11d6c:	mov	r3, r0
   11d70:	mov	r0, #0
   11d74:	mov	r1, #0
   11d78:	mov	r2, r7
   11d7c:	bl	11370 <error@plt>
   11d80:	b	11e60 <__assert_fail@plt+0x94c>
   11d84:	movw	r0, #16848	; 0x41d0
   11d88:	movw	r1, #16720	; 0x4150
   11d8c:	movt	r0, #3
   11d90:	movt	r1, #3
   11d94:	ldr	r0, [r0]
   11d98:	b	11e04 <__assert_fail@plt+0x8f0>
   11d9c:	movw	r0, #16848	; 0x41d0
   11da0:	movw	r1, #11711	; 0x2dbf
   11da4:	mov	r2, #5
   11da8:	movt	r0, #3
   11dac:	movt	r1, #2
   11db0:	ldr	r7, [r0]
   11db4:	mov	r0, #0
   11db8:	bl	11304 <dcgettext@plt>
   11dbc:	mvn	r1, #-2147483648	; 0x80000000
   11dc0:	mov	r2, #0
   11dc4:	str	r0, [sp, #12]
   11dc8:	mov	r0, r7
   11dcc:	movw	r7, #11492	; 0x2ce4
   11dd0:	mov	r3, #0
   11dd4:	mov	r4, #0
   11dd8:	str	r1, [sp]
   11ddc:	movw	r1, #12462	; 0x30ae
   11de0:	str	r2, [sp, #4]
   11de4:	str	r2, [sp, #16]
   11de8:	mov	r2, #1
   11dec:	movt	r7, #2
   11df0:	movt	r1, #2
   11df4:	str	r1, [sp, #8]
   11df8:	bl	21928 <__assert_fail@plt+0x10414>
   11dfc:	movw	r1, #16724	; 0x4154
   11e00:	movt	r1, #3
   11e04:	str	r0, [r1]
   11e08:	mov	r6, sl
   11e0c:	b	1198c <__assert_fail@plt+0x478>
   11e10:	movw	r0, #16732	; 0x415c
   11e14:	movt	r0, #3
   11e18:	str	r8, [r0]
   11e1c:	b	11e08 <__assert_fail@plt+0x8f4>
   11e20:	movw	r0, #16728	; 0x4158
   11e24:	movw	r1, #12744	; 0x31c8
   11e28:	movt	r0, #3
   11e2c:	movt	r1, #2
   11e30:	b	11e58 <__assert_fail@plt+0x944>
   11e34:	movw	r0, #16728	; 0x4158
   11e38:	movw	r1, #12753	; 0x31d1
   11e3c:	movt	r0, #3
   11e40:	movt	r1, #2
   11e44:	b	11e58 <__assert_fail@plt+0x944>
   11e48:	movw	r0, #16728	; 0x4158
   11e4c:	movw	r1, #12761	; 0x31d9
   11e50:	movt	r0, #3
   11e54:	movt	r1, #2
   11e58:	mov	r6, sl
   11e5c:	str	r1, [r0]
   11e60:	movw	r7, #11492	; 0x2ce4
   11e64:	movt	r7, #2
   11e68:	b	1198c <__assert_fail@plt+0x478>
   11e6c:	tst	sl, #1
   11e70:	beq	120a0 <__assert_fail@plt+0xb8c>
   11e74:	movw	r0, #16732	; 0x415c
   11e78:	movt	r0, #3
   11e7c:	mov	r4, r0
   11e80:	ldr	r0, [r0]
   11e84:	bl	113dc <strlen@plt>
   11e88:	movw	r1, #17728	; 0x4540
   11e8c:	mov	r6, r0
   11e90:	add	r0, r0, r0, lsl #1
   11e94:	movt	r1, #3
   11e98:	str	r0, [r1]
   11e9c:	add	r0, r0, #1
   11ea0:	bl	213ac <__assert_fail@plt+0xfe98>
   11ea4:	ldr	r1, [r4]
   11ea8:	movw	r7, #17732	; 0x4544
   11eac:	movt	r7, #3
   11eb0:	str	r0, [r7]
   11eb4:	bl	112ec <stpcpy@plt>
   11eb8:	ldr	r1, [r4]
   11ebc:	bl	112ec <stpcpy@plt>
   11ec0:	ldr	r1, [r4]
   11ec4:	bl	112ec <stpcpy@plt>
   11ec8:	movw	r1, #17736	; 0x4548
   11ecc:	lsl	r0, r6, #1
   11ed0:	movt	r1, #3
   11ed4:	str	r0, [r1]
   11ed8:	movw	r0, #17744	; 0x4550
   11edc:	movw	r1, #17740	; 0x454c
   11ee0:	movt	r0, #3
   11ee4:	movt	r1, #3
   11ee8:	str	r6, [r0]
   11eec:	ldr	r0, [r7]
   11ef0:	add	r0, r0, r6
   11ef4:	str	r0, [r1]
   11ef8:	movw	r1, #17748	; 0x4554
   11efc:	add	r0, r0, r6
   11f00:	movt	r1, #3
   11f04:	str	r0, [r1]
   11f08:	movw	r0, #17752	; 0x4558
   11f0c:	movt	r0, #3
   11f10:	bl	12984 <__assert_fail@plt+0x1470>
   11f14:	movw	r0, #16720	; 0x4150
   11f18:	movt	r0, #3
   11f1c:	ldr	r0, [r0]
   11f20:	bl	113dc <strlen@plt>
   11f24:	mov	r6, r0
   11f28:	movw	r0, #16724	; 0x4154
   11f2c:	movt	r0, #3
   11f30:	mov	r4, r0
   11f34:	ldr	r0, [r0]
   11f38:	add	r0, r6, r0
   11f3c:	add	r0, r0, #1
   11f40:	bl	213ac <__assert_fail@plt+0xfe98>
   11f44:	mov	r7, r0
   11f48:	movw	r0, #17764	; 0x4564
   11f4c:	mov	r1, #32
   11f50:	movt	r0, #3
   11f54:	str	r7, [r0]
   11f58:	ldr	r0, [r4]
   11f5c:	add	r6, r0, r6
   11f60:	mov	r0, r7
   11f64:	mov	r2, r6
   11f68:	bl	11418 <memset@plt>
   11f6c:	mov	r0, #0
   11f70:	movw	r1, #17148	; 0x42fc
   11f74:	movw	r2, #17768	; 0x4568
   11f78:	strb	r0, [r7, r6]
   11f7c:	movw	r0, #17780	; 0x4574
   11f80:	movt	r1, #3
   11f84:	movw	r7, #16824	; 0x41b8
   11f88:	movt	r2, #3
   11f8c:	movt	r0, #3
   11f90:	movt	r7, #3
   11f94:	str	r1, [r0]
   11f98:	movw	r0, #16684	; 0x412c
   11f9c:	movw	r1, #17776	; 0x4570
   11fa0:	movt	r0, #3
   11fa4:	movt	r1, #3
   11fa8:	ldr	r0, [r0]
   11fac:	str	r0, [r1]
   11fb0:	movw	r0, #16696	; 0x4138
   11fb4:	movt	r0, #3
   11fb8:	ldrd	r0, [r0]
   11fbc:	strd	r0, [r2]
   11fc0:	ldr	r1, [r7]
   11fc4:	cmp	r1, r5
   11fc8:	bne	11fe0 <__assert_fail@plt+0xacc>
   11fcc:	movw	r0, #12932	; 0x3284
   11fd0:	movt	r0, #2
   11fd4:	bl	1218c <__assert_fail@plt+0xc78>
   11fd8:	mov	r6, r0
   11fdc:	b	1200c <__assert_fail@plt+0xaf8>
   11fe0:	mov	r6, #1
   11fe4:	bge	1200c <__assert_fail@plt+0xaf8>
   11fe8:	mov	r6, #1
   11fec:	ldr	r0, [r9, r1, lsl #2]
   11ff0:	bl	1218c <__assert_fail@plt+0xc78>
   11ff4:	ldr	r1, [r7]
   11ff8:	and	r6, r6, r0
   11ffc:	add	r1, r1, #1
   12000:	cmp	r1, r5
   12004:	str	r1, [r7]
   12008:	blt	11fec <__assert_fail@plt+0xad8>
   1200c:	movw	r0, #16856	; 0x41d8
   12010:	movt	r0, #3
   12014:	ldrb	r0, [r0]
   12018:	cmp	r0, #1
   1201c:	bne	12038 <__assert_fail@plt+0xb24>
   12020:	movw	r0, #16840	; 0x41c8
   12024:	movt	r0, #3
   12028:	ldr	r0, [r0]
   1202c:	bl	127e8 <__assert_fail@plt+0x12d4>
   12030:	cmn	r0, #1
   12034:	beq	120a8 <__assert_fail@plt+0xb94>
   12038:	eor	r0, r6, #1
   1203c:	sub	sp, fp, #28
   12040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12044:	movw	r0, #16740	; 0x4164
   12048:	movw	r2, #11814	; 0x2e26
   1204c:	mov	r1, #0
   12050:	movw	r7, #11800	; 0x2e18
   12054:	movt	r0, #3
   12058:	movt	r2, #2
   1205c:	str	r1, [sp, #8]
   12060:	movw	r1, #11465	; 0x2cc9
   12064:	movt	r7, #2
   12068:	movt	r1, #2
   1206c:	ldr	r3, [r0]
   12070:	movw	r0, #16844	; 0x41cc
   12074:	str	r2, [sp, #4]
   12078:	movw	r2, #11786	; 0x2e0a
   1207c:	str	r7, [sp]
   12080:	movt	r0, #3
   12084:	movt	r2, #2
   12088:	ldr	r0, [r0]
   1208c:	bl	212a4 <__assert_fail@plt+0xfd90>
   12090:	mov	r0, #0
   12094:	bl	113c4 <exit@plt>
   12098:	mov	r0, #0
   1209c:	bl	11610 <__assert_fail@plt+0xfc>
   120a0:	mov	r0, #1
   120a4:	bl	11610 <__assert_fail@plt+0xfc>
   120a8:	bl	113f4 <__errno_location@plt>
   120ac:	ldr	r1, [r0]
   120b0:	movw	r2, #12932	; 0x3284
   120b4:	mov	r0, #1
   120b8:	movt	r2, #2
   120bc:	bl	11370 <error@plt>
   120c0:	push	{r4, r5, fp, lr}
   120c4:	add	fp, sp, #8
   120c8:	movw	ip, #16848	; 0x41d0
   120cc:	mov	r4, r1
   120d0:	mov	r1, r0
   120d4:	mov	r0, #0
   120d8:	movt	ip, #3
   120dc:	ldr	r3, [ip]
   120e0:	ldrb	r5, [r3]
   120e4:	cmp	r5, #111	; 0x6f
   120e8:	bgt	12100 <__assert_fail@plt+0xbec>
   120ec:	cmp	r5, #97	; 0x61
   120f0:	beq	12110 <__assert_fail@plt+0xbfc>
   120f4:	cmp	r5, #110	; 0x6e
   120f8:	beq	12110 <__assert_fail@plt+0xbfc>
   120fc:	pop	{r4, r5, fp, pc}
   12100:	cmp	r5, #112	; 0x70
   12104:	beq	1211c <__assert_fail@plt+0xc08>
   12108:	cmp	r5, #116	; 0x74
   1210c:	bne	120fc <__assert_fail@plt+0xbe8>
   12110:	mov	r0, #1
   12114:	str	r3, [r1]
   12118:	pop	{r4, r5, fp, pc}
   1211c:	add	r0, r3, #1
   12120:	str	r0, [ip]
   12124:	mov	r0, #0
   12128:	str	r3, [r1]
   1212c:	str	r2, [r4, #16]
   12130:	movw	r1, #710	; 0x2c6
   12134:	str	r0, [r4, #20]
   12138:	str	r0, [r4]
   1213c:	str	r0, [r4, #4]
   12140:	movw	r0, #18120	; 0x46c8
   12144:	ldr	r5, [ip]
   12148:	movt	r0, #3
   1214c:	str	r1, [r0]
   12150:	mov	r0, r5
   12154:	bl	113dc <strlen@plt>
   12158:	mov	r1, r0
   1215c:	mov	r0, r5
   12160:	mov	r2, r4
   12164:	bl	145b8 <__assert_fail@plt+0x30a4>
   12168:	mov	r3, r0
   1216c:	mov	r0, #1
   12170:	cmp	r3, #0
   12174:	popeq	{r4, r5, fp, pc}
   12178:	movw	r2, #11546	; 0x2d1a
   1217c:	mov	r0, #1
   12180:	mov	r1, #0
   12184:	movt	r2, #2
   12188:	bl	11370 <error@plt>
   1218c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12190:	add	fp, sp, #28
   12194:	sub	sp, sp, #12
   12198:	movw	r1, #12932	; 0x3284
   1219c:	mov	r7, r0
   121a0:	movt	r1, #2
   121a4:	bl	11244 <strcmp@plt>
   121a8:	cmp	r0, #0
   121ac:	beq	121d8 <__assert_fail@plt+0xcc4>
   121b0:	movw	r1, #11644	; 0x2d7c
   121b4:	mov	r0, r7
   121b8:	movt	r1, #2
   121bc:	bl	114b4 <fopen64@plt>
   121c0:	mov	r5, r0
   121c4:	cmp	r0, #0
   121c8:	bne	121f4 <__assert_fail@plt+0xce0>
   121cc:	bl	113f4 <__errno_location@plt>
   121d0:	ldr	r6, [r0]
   121d4:	b	12548 <__assert_fail@plt+0x1034>
   121d8:	movw	r0, #16856	; 0x41d8
   121dc:	mov	r1, #1
   121e0:	movt	r0, #3
   121e4:	strb	r1, [r0]
   121e8:	movw	r0, #16840	; 0x41c8
   121ec:	movt	r0, #3
   121f0:	ldr	r5, [r0]
   121f4:	mov	r0, r5
   121f8:	mov	r1, #2
   121fc:	str	r7, [sp, #8]
   12200:	bl	127ac <__assert_fail@plt+0x1298>
   12204:	movw	r6, #17752	; 0x4558
   12208:	mov	r1, r5
   1220c:	movt	r6, #3
   12210:	mov	r0, r6
   12214:	bl	12998 <__assert_fail@plt+0x1484>
   12218:	cmp	r0, #0
   1221c:	beq	124e4 <__assert_fail@plt+0xfd0>
   12220:	movw	r8, #16844	; 0x41cc
   12224:	movt	r8, #3
   12228:	ldr	r9, [r6, #4]
   1222c:	sub	r7, r9, #1
   12230:	cmp	r7, #2
   12234:	bcc	12270 <__assert_fail@plt+0xd5c>
   12238:	movw	r0, #17744	; 0x4550
   1223c:	movt	r0, #3
   12240:	ldr	sl, [r0]
   12244:	cmp	sl, #2
   12248:	bcc	12270 <__assert_fail@plt+0xd5c>
   1224c:	movw	r0, #16732	; 0x415c
   12250:	ldr	r4, [r6, #8]
   12254:	mov	r2, #2
   12258:	movt	r0, #3
   1225c:	ldr	r1, [r0]
   12260:	mov	r0, r4
   12264:	bl	113d0 <bcmp@plt>
   12268:	cmp	r0, #0
   1226c:	beq	122b8 <__assert_fail@plt+0xda4>
   12270:	movw	r0, #17776	; 0x4570
   12274:	movt	r0, #3
   12278:	ldr	r0, [r0]
   1227c:	ldrb	r0, [r0]
   12280:	cmp	r0, #111	; 0x6f
   12284:	bgt	1229c <__assert_fail@plt+0xd88>
   12288:	cmp	r0, #97	; 0x61
   1228c:	beq	12368 <__assert_fail@plt+0xe54>
   12290:	cmp	r0, #110	; 0x6e
   12294:	beq	12410 <__assert_fail@plt+0xefc>
   12298:	b	12424 <__assert_fail@plt+0xf10>
   1229c:	cmp	r0, #112	; 0x70
   122a0:	beq	123d0 <__assert_fail@plt+0xebc>
   122a4:	cmp	r0, #116	; 0x74
   122a8:	bne	12424 <__assert_fail@plt+0xf10>
   122ac:	cmp	r9, #2
   122b0:	bge	12408 <__assert_fail@plt+0xef4>
   122b4:	b	12410 <__assert_fail@plt+0xefc>
   122b8:	movw	r0, #17728	; 0x4540
   122bc:	movt	r0, #3
   122c0:	ldr	r0, [r0]
   122c4:	cmp	r7, r0
   122c8:	bne	122ec <__assert_fail@plt+0xdd8>
   122cc:	movw	r0, #17732	; 0x4544
   122d0:	mov	r2, r7
   122d4:	movt	r0, #3
   122d8:	ldr	r1, [r0]
   122dc:	mov	r0, r4
   122e0:	bl	113d0 <bcmp@plt>
   122e4:	cmp	r0, #0
   122e8:	beq	12450 <__assert_fail@plt+0xf3c>
   122ec:	movw	r0, #17736	; 0x4548
   122f0:	movt	r0, #3
   122f4:	ldr	r0, [r0]
   122f8:	cmp	r7, r0
   122fc:	bne	12320 <__assert_fail@plt+0xe0c>
   12300:	movw	r0, #17740	; 0x454c
   12304:	mov	r2, r7
   12308:	movt	r0, #3
   1230c:	ldr	r1, [r0]
   12310:	mov	r0, r4
   12314:	bl	113d0 <bcmp@plt>
   12318:	cmp	r0, #0
   1231c:	beq	12470 <__assert_fail@plt+0xf5c>
   12320:	cmp	r7, sl
   12324:	bne	12270 <__assert_fail@plt+0xd5c>
   12328:	movw	r0, #17748	; 0x4554
   1232c:	mov	r2, r7
   12330:	movt	r0, #3
   12334:	ldr	r1, [r0]
   12338:	mov	r0, r4
   1233c:	bl	113d0 <bcmp@plt>
   12340:	cmp	r0, #0
   12344:	bne	12270 <__assert_fail@plt+0xd5c>
   12348:	movw	r0, #17780	; 0x4574
   1234c:	movw	r1, #17436	; 0x441c
   12350:	movt	r0, #3
   12354:	movt	r1, #3
   12358:	str	r1, [r0]
   1235c:	movw	r0, #16688	; 0x4130
   12360:	movt	r0, #3
   12364:	b	1248c <__assert_fail@plt+0xf78>
   12368:	movw	r0, #16712	; 0x4148
   1236c:	movt	r0, #3
   12370:	ldrd	r0, [r0]
   12374:	subs	r2, r0, #2
   12378:	sbcs	r2, r1, #0
   1237c:	blt	12408 <__assert_fail@plt+0xef4>
   12380:	cmp	r9, #1
   12384:	bgt	123b4 <__assert_fail@plt+0xea0>
   12388:	movw	r2, #17792	; 0x4580
   1238c:	movt	r2, #3
   12390:	mov	r7, r2
   12394:	ldrd	r2, [r2]
   12398:	adds	r2, r2, #1
   1239c:	adc	r3, r3, #0
   123a0:	eor	r0, r2, r0
   123a4:	eor	r1, r3, r1
   123a8:	strd	r2, [r7]
   123ac:	orrs	r0, r0, r1
   123b0:	bne	12410 <__assert_fail@plt+0xefc>
   123b4:	bl	125b4 <__assert_fail@plt+0x10a0>
   123b8:	movw	r0, #17792	; 0x4580
   123bc:	mov	r1, #0
   123c0:	movt	r0, #3
   123c4:	str	r1, [r0]
   123c8:	str	r1, [r0, #4]
   123cc:	b	12424 <__assert_fail@plt+0xf10>
   123d0:	movw	r0, #17780	; 0x4574
   123d4:	ldr	r1, [r6, #8]
   123d8:	mov	r2, #0
   123dc:	mov	r3, #0
   123e0:	str	r7, [sp]
   123e4:	movt	r0, #3
   123e8:	str	r2, [sp, #4]
   123ec:	mov	r2, r7
   123f0:	ldr	r0, [r0]
   123f4:	bl	176ac <__assert_fail@plt+0x6198>
   123f8:	cmn	r0, #1
   123fc:	beq	12410 <__assert_fail@plt+0xefc>
   12400:	cmn	r0, #2
   12404:	beq	12588 <__assert_fail@plt+0x1074>
   12408:	bl	125b4 <__assert_fail@plt+0x10a0>
   1240c:	b	12424 <__assert_fail@plt+0xf10>
   12410:	movw	r0, #17764	; 0x4564
   12414:	ldr	r1, [r8]
   12418:	movt	r0, #3
   1241c:	ldr	r0, [r0]
   12420:	bl	11208 <fputs_unlocked@plt>
   12424:	ldr	r3, [r8]
   12428:	ldr	r2, [r6, #4]
   1242c:	ldr	r0, [r6, #8]
   12430:	mov	r1, #1
   12434:	bl	112e0 <fwrite_unlocked@plt>
   12438:	mov	r0, r6
   1243c:	mov	r1, r5
   12440:	bl	12998 <__assert_fail@plt+0x1484>
   12444:	cmp	r0, #0
   12448:	bne	12228 <__assert_fail@plt+0xd14>
   1244c:	b	124e4 <__assert_fail@plt+0xfd0>
   12450:	movw	r0, #17780	; 0x4574
   12454:	movw	r1, #16860	; 0x41dc
   12458:	movt	r0, #3
   1245c:	movt	r1, #3
   12460:	str	r1, [r0]
   12464:	movw	r0, #16680	; 0x4128
   12468:	movt	r0, #3
   1246c:	b	1248c <__assert_fail@plt+0xf78>
   12470:	movw	r0, #17780	; 0x4574
   12474:	movw	r1, #17148	; 0x42fc
   12478:	movt	r0, #3
   1247c:	movt	r1, #3
   12480:	str	r1, [r0]
   12484:	movw	r0, #16684	; 0x412c
   12488:	movt	r0, #3
   1248c:	ldr	r0, [r0]
   12490:	movw	r1, #17776	; 0x4570
   12494:	movt	r1, #3
   12498:	str	r0, [r1]
   1249c:	movw	r0, #17724	; 0x453c
   124a0:	movt	r0, #3
   124a4:	ldrb	r0, [r0]
   124a8:	cmp	r0, #0
   124ac:	bne	124d8 <__assert_fail@plt+0xfc4>
   124b0:	movw	r1, #17784	; 0x4578
   124b4:	mov	r0, #0
   124b8:	movw	r2, #17768	; 0x4568
   124bc:	movt	r1, #3
   124c0:	movt	r2, #3
   124c4:	strb	r0, [r1]
   124c8:	movw	r0, #16696	; 0x4138
   124cc:	movt	r0, #3
   124d0:	ldrd	r0, [r0]
   124d4:	strd	r0, [r2]
   124d8:	mov	r0, #10
   124dc:	bl	11508 <putchar_unlocked@plt>
   124e0:	b	12438 <__assert_fail@plt+0xf24>
   124e4:	bl	113f4 <__errno_location@plt>
   124e8:	ldr	r6, [r0]
   124ec:	mov	r4, r0
   124f0:	mov	r0, r5
   124f4:	bl	11358 <ferror_unlocked@plt>
   124f8:	ldr	r7, [sp, #8]
   124fc:	movw	r1, #12932	; 0x3284
   12500:	cmp	r0, #0
   12504:	movt	r1, #2
   12508:	moveq	r6, r0
   1250c:	mov	r0, r7
   12510:	bl	11244 <strcmp@plt>
   12514:	cmp	r0, #0
   12518:	beq	12538 <__assert_fail@plt+0x1024>
   1251c:	mov	r0, r5
   12520:	bl	127e8 <__assert_fail@plt+0x12d4>
   12524:	cmp	r6, #0
   12528:	bne	12540 <__assert_fail@plt+0x102c>
   1252c:	cmp	r0, #0
   12530:	ldrne	r6, [r4]
   12534:	b	12540 <__assert_fail@plt+0x102c>
   12538:	mov	r0, r5
   1253c:	bl	114a8 <clearerr_unlocked@plt>
   12540:	cmp	r6, #0
   12544:	beq	12578 <__assert_fail@plt+0x1064>
   12548:	mov	r0, #0
   1254c:	mov	r1, #3
   12550:	mov	r2, r7
   12554:	mov	r4, #0
   12558:	bl	142d8 <__assert_fail@plt+0x2dc4>
   1255c:	movw	r2, #11546	; 0x2d1a
   12560:	mov	r3, r0
   12564:	mov	r0, #0
   12568:	mov	r1, r6
   1256c:	movt	r2, #2
   12570:	bl	11370 <error@plt>
   12574:	b	1257c <__assert_fail@plt+0x1068>
   12578:	mov	r4, #1
   1257c:	mov	r0, r4
   12580:	sub	sp, fp, #28
   12584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12588:	bl	113f4 <__errno_location@plt>
   1258c:	movw	r1, #12463	; 0x30af
   12590:	ldr	r4, [r0]
   12594:	mov	r0, #0
   12598:	mov	r2, #5
   1259c:	movt	r1, #2
   125a0:	bl	11304 <dcgettext@plt>
   125a4:	mov	r2, r0
   125a8:	mov	r0, #1
   125ac:	mov	r1, r4
   125b0:	bl	11370 <error@plt>
   125b4:	push	{r4, r5, r6, r7, fp, lr}
   125b8:	add	fp, sp, #16
   125bc:	sub	sp, sp, #16
   125c0:	movw	r4, #17784	; 0x4578
   125c4:	movt	r4, #3
   125c8:	ldrb	r0, [r4]
   125cc:	cmp	r0, #1
   125d0:	beq	1267c <__assert_fail@plt+0x1168>
   125d4:	movw	r0, #16724	; 0x4154
   125d8:	movw	r6, #17768	; 0x4568
   125dc:	movw	r5, #16720	; 0x4150
   125e0:	movt	r0, #3
   125e4:	movt	r6, #3
   125e8:	movt	r5, #3
   125ec:	ldr	r2, [r0]
   125f0:	movw	r0, #16728	; 0x4158
   125f4:	ldr	r5, [r5]
   125f8:	movt	r0, #3
   125fc:	ldr	r1, [r0]
   12600:	ldm	r6, {r0, r3}
   12604:	stm	sp, {r0, r3, r5}
   12608:	mov	r0, #1
   1260c:	mov	r5, #1
   12610:	bl	11430 <__printf_chk@plt>
   12614:	movw	r0, #16704	; 0x4140
   12618:	ldrd	r2, [r6]
   1261c:	movt	r0, #3
   12620:	ldrd	r0, [r0]
   12624:	adds	r0, r2, r0
   12628:	mov	r2, #0
   1262c:	adc	r7, r3, r1
   12630:	cmn	r3, #1
   12634:	mov	r3, #0
   12638:	stm	r6, {r0, r7}
   1263c:	mov	r0, #0
   12640:	movwgt	r2, #1
   12644:	cmn	r7, #1
   12648:	movwgt	r3, #1
   1264c:	subs	r3, r2, r3
   12650:	movwne	r3, #1
   12654:	cmn	r1, #1
   12658:	movwgt	r0, #1
   1265c:	sub	r0, r2, r0
   12660:	clz	r0, r0
   12664:	lsr	r0, r0, #5
   12668:	and	r0, r0, r3
   1266c:	cmp	r0, #1
   12670:	strbeq	r5, [r4]
   12674:	sub	sp, fp, #16
   12678:	pop	{r4, r5, r6, r7, fp, pc}
   1267c:	movw	r1, #12498	; 0x30d2
   12680:	mov	r0, #0
   12684:	mov	r2, #5
   12688:	movt	r1, #2
   1268c:	bl	11304 <dcgettext@plt>
   12690:	mov	r2, r0
   12694:	mov	r0, #1
   12698:	mov	r1, #0
   1269c:	bl	11370 <error@plt>
   126a0:	movw	r1, #17800	; 0x4588
   126a4:	movt	r1, #3
   126a8:	str	r0, [r1]
   126ac:	bx	lr
   126b0:	movw	r1, #17804	; 0x458c
   126b4:	movt	r1, #3
   126b8:	strb	r0, [r1]
   126bc:	bx	lr
   126c0:	push	{r4, r5, r6, sl, fp, lr}
   126c4:	add	fp, sp, #16
   126c8:	sub	sp, sp, #8
   126cc:	movw	r0, #16844	; 0x41cc
   126d0:	movt	r0, #3
   126d4:	ldr	r0, [r0]
   126d8:	bl	22054 <__assert_fail@plt+0x10b40>
   126dc:	cmp	r0, #0
   126e0:	beq	12708 <__assert_fail@plt+0x11f4>
   126e4:	movw	r0, #17804	; 0x458c
   126e8:	movt	r0, #3
   126ec:	ldrb	r0, [r0]
   126f0:	cmp	r0, #0
   126f4:	beq	12728 <__assert_fail@plt+0x1214>
   126f8:	bl	113f4 <__errno_location@plt>
   126fc:	ldr	r0, [r0]
   12700:	cmp	r0, #32
   12704:	bne	12728 <__assert_fail@plt+0x1214>
   12708:	movw	r0, #16832	; 0x41c0
   1270c:	movt	r0, #3
   12710:	ldr	r0, [r0]
   12714:	bl	22054 <__assert_fail@plt+0x10b40>
   12718:	cmp	r0, #0
   1271c:	subeq	sp, fp, #16
   12720:	popeq	{r4, r5, r6, sl, fp, pc}
   12724:	b	12798 <__assert_fail@plt+0x1284>
   12728:	movw	r1, #12847	; 0x322f
   1272c:	mov	r0, #0
   12730:	mov	r2, #5
   12734:	movt	r1, #2
   12738:	bl	11304 <dcgettext@plt>
   1273c:	mov	r4, r0
   12740:	movw	r0, #17800	; 0x4588
   12744:	movt	r0, #3
   12748:	ldr	r6, [r0]
   1274c:	bl	113f4 <__errno_location@plt>
   12750:	ldr	r5, [r0]
   12754:	cmp	r6, #0
   12758:	bne	12774 <__assert_fail@plt+0x1260>
   1275c:	movw	r2, #11546	; 0x2d1a
   12760:	mov	r0, #0
   12764:	mov	r1, r5
   12768:	mov	r3, r4
   1276c:	movt	r2, #2
   12770:	b	12794 <__assert_fail@plt+0x1280>
   12774:	mov	r0, r6
   12778:	bl	1422c <__assert_fail@plt+0x2d18>
   1277c:	movw	r2, #12859	; 0x323b
   12780:	mov	r3, r0
   12784:	str	r4, [sp]
   12788:	mov	r0, #0
   1278c:	mov	r1, r5
   12790:	movt	r2, #2
   12794:	bl	11370 <error@plt>
   12798:	movw	r0, #16744	; 0x4168
   1279c:	movt	r0, #3
   127a0:	ldr	r0, [r0]
   127a4:	bl	11298 <_exit@plt>
   127a8:	b	11250 <posix_fadvise64@plt>
   127ac:	cmp	r0, #0
   127b0:	bxeq	lr
   127b4:	push	{r4, sl, fp, lr}
   127b8:	add	fp, sp, #8
   127bc:	sub	sp, sp, #16
   127c0:	mov	r4, r1
   127c4:	bl	1143c <fileno@plt>
   127c8:	mov	r1, #0
   127cc:	mov	r2, #0
   127d0:	mov	r3, #0
   127d4:	str	r1, [sp]
   127d8:	stmib	sp, {r1, r4}
   127dc:	bl	11250 <posix_fadvise64@plt>
   127e0:	sub	sp, fp, #8
   127e4:	pop	{r4, sl, fp, pc}
   127e8:	push	{r4, r5, r6, sl, fp, lr}
   127ec:	add	fp, sp, #16
   127f0:	sub	sp, sp, #8
   127f4:	mov	r4, r0
   127f8:	bl	1143c <fileno@plt>
   127fc:	cmn	r0, #1
   12800:	ble	12874 <__assert_fail@plt+0x1360>
   12804:	mov	r0, r4
   12808:	bl	11394 <__freading@plt>
   1280c:	cmp	r0, #0
   12810:	beq	1283c <__assert_fail@plt+0x1328>
   12814:	mov	r0, r4
   12818:	bl	1143c <fileno@plt>
   1281c:	mov	r1, #1
   12820:	mov	r2, #0
   12824:	mov	r3, #0
   12828:	str	r1, [sp]
   1282c:	bl	11334 <lseek64@plt>
   12830:	and	r0, r0, r1
   12834:	cmn	r0, #1
   12838:	beq	12874 <__assert_fail@plt+0x1360>
   1283c:	mov	r0, r4
   12840:	bl	12884 <__assert_fail@plt+0x1370>
   12844:	cmp	r0, #0
   12848:	beq	12874 <__assert_fail@plt+0x1360>
   1284c:	bl	113f4 <__errno_location@plt>
   12850:	ldr	r6, [r0]
   12854:	mov	r5, r0
   12858:	mov	r0, r4
   1285c:	bl	11460 <fclose@plt>
   12860:	cmp	r6, #0
   12864:	strne	r6, [r5]
   12868:	mvnne	r0, #0
   1286c:	sub	sp, fp, #16
   12870:	pop	{r4, r5, r6, sl, fp, pc}
   12874:	mov	r0, r4
   12878:	sub	sp, fp, #16
   1287c:	pop	{r4, r5, r6, sl, fp, lr}
   12880:	b	11460 <fclose@plt>
   12884:	push	{r4, sl, fp, lr}
   12888:	add	fp, sp, #8
   1288c:	sub	sp, sp, #8
   12890:	mov	r4, r0
   12894:	cmp	r0, #0
   12898:	beq	128d0 <__assert_fail@plt+0x13bc>
   1289c:	mov	r0, r4
   128a0:	bl	11394 <__freading@plt>
   128a4:	cmp	r0, #0
   128a8:	beq	128d0 <__assert_fail@plt+0x13bc>
   128ac:	ldrb	r0, [r4, #1]
   128b0:	tst	r0, #1
   128b4:	beq	128d0 <__assert_fail@plt+0x13bc>
   128b8:	mov	r0, #1
   128bc:	mov	r2, #0
   128c0:	mov	r3, #0
   128c4:	str	r0, [sp]
   128c8:	mov	r0, r4
   128cc:	bl	128e0 <__assert_fail@plt+0x13cc>
   128d0:	mov	r0, r4
   128d4:	sub	sp, fp, #8
   128d8:	pop	{r4, sl, fp, lr}
   128dc:	b	11268 <fflush@plt>
   128e0:	push	{r4, r5, r6, r7, fp, lr}
   128e4:	add	fp, sp, #16
   128e8:	sub	sp, sp, #8
   128ec:	mov	r4, r0
   128f0:	ldr	r0, [r0, #4]
   128f4:	mov	r5, r3
   128f8:	mov	r6, r2
   128fc:	ldr	r1, [r4, #8]
   12900:	cmp	r1, r0
   12904:	bne	12920 <__assert_fail@plt+0x140c>
   12908:	ldrd	r0, [r4, #16]
   1290c:	cmp	r1, r0
   12910:	bne	12920 <__assert_fail@plt+0x140c>
   12914:	ldr	r0, [r4, #36]	; 0x24
   12918:	cmp	r0, #0
   1291c:	beq	12938 <__assert_fail@plt+0x1424>
   12920:	mov	r0, r4
   12924:	mov	r2, r6
   12928:	mov	r3, r5
   1292c:	sub	sp, fp, #16
   12930:	pop	{r4, r5, r6, r7, fp, lr}
   12934:	b	1146c <fseeko64@plt>
   12938:	ldr	r7, [fp, #8]
   1293c:	mov	r0, r4
   12940:	bl	1143c <fileno@plt>
   12944:	mov	r2, r6
   12948:	mov	r3, r5
   1294c:	str	r7, [sp]
   12950:	bl	11334 <lseek64@plt>
   12954:	and	r2, r0, r1
   12958:	cmn	r2, #1
   1295c:	beq	12978 <__assert_fail@plt+0x1464>
   12960:	strd	r0, [r4, #80]	; 0x50
   12964:	ldr	r0, [r4]
   12968:	bic	r0, r0, #16
   1296c:	str	r0, [r4]
   12970:	mov	r0, #0
   12974:	b	1297c <__assert_fail@plt+0x1468>
   12978:	mvn	r0, #0
   1297c:	sub	sp, fp, #16
   12980:	pop	{r4, r5, r6, r7, fp, pc}
   12984:	mov	r1, #0
   12988:	str	r1, [r0]
   1298c:	str	r1, [r0, #4]
   12990:	str	r1, [r0, #8]
   12994:	bx	lr
   12998:	mov	r2, #10
   1299c:	b	129a0 <__assert_fail@plt+0x148c>
   129a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129a4:	add	fp, sp, #28
   129a8:	sub	sp, sp, #4
   129ac:	ldr	r5, [r0]
   129b0:	ldr	r6, [r0, #8]
   129b4:	mov	r4, r0
   129b8:	mov	r0, r1
   129bc:	mov	sl, r2
   129c0:	mov	r8, r1
   129c4:	bl	114fc <feof_unlocked@plt>
   129c8:	cmp	r0, #0
   129cc:	beq	129d8 <__assert_fail@plt+0x14c4>
   129d0:	mov	r4, #0
   129d4:	b	12a6c <__assert_fail@plt+0x1558>
   129d8:	add	r9, r6, r5
   129dc:	mov	r7, r6
   129e0:	mov	r0, r8
   129e4:	bl	112f8 <getc_unlocked@plt>
   129e8:	mov	r5, r0
   129ec:	cmn	r0, #1
   129f0:	bne	12a1c <__assert_fail@plt+0x1508>
   129f4:	cmp	r7, r6
   129f8:	beq	129d0 <__assert_fail@plt+0x14bc>
   129fc:	mov	r0, r8
   12a00:	bl	11358 <ferror_unlocked@plt>
   12a04:	cmp	r0, #0
   12a08:	bne	129d0 <__assert_fail@plt+0x14bc>
   12a0c:	ldrb	r0, [r7, #-1]
   12a10:	mov	r5, sl
   12a14:	cmp	r0, sl
   12a18:	beq	12a64 <__assert_fail@plt+0x1550>
   12a1c:	cmp	r7, r9
   12a20:	bne	12a58 <__assert_fail@plt+0x1544>
   12a24:	ldr	r7, [r4]
   12a28:	mov	r0, #1
   12a2c:	mov	r1, r4
   12a30:	mov	r2, #1
   12a34:	mvn	r3, #0
   12a38:	str	r0, [sp]
   12a3c:	mov	r0, r6
   12a40:	bl	2150c <__assert_fail@plt+0xfff8>
   12a44:	str	r0, [r4, #8]
   12a48:	mov	r6, r0
   12a4c:	add	r7, r0, r7
   12a50:	ldr	r0, [r4]
   12a54:	add	r9, r6, r0
   12a58:	strb	r5, [r7], #1
   12a5c:	cmp	r5, sl
   12a60:	bne	129e0 <__assert_fail@plt+0x14cc>
   12a64:	sub	r0, r7, r6
   12a68:	str	r0, [r4, #4]
   12a6c:	mov	r0, r4
   12a70:	sub	sp, fp, #28
   12a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a78:	ldr	r0, [r0, #8]
   12a7c:	b	22190 <__assert_fail@plt+0x10c7c>
   12a80:	push	{r4, r5, fp, lr}
   12a84:	add	fp, sp, #8
   12a88:	cmp	r0, #0
   12a8c:	beq	12b20 <__assert_fail@plt+0x160c>
   12a90:	mov	r1, #47	; 0x2f
   12a94:	mov	r4, r0
   12a98:	bl	11490 <strrchr@plt>
   12a9c:	cmp	r0, #0
   12aa0:	mov	r5, r4
   12aa4:	addne	r5, r0, #1
   12aa8:	sub	r0, r5, r4
   12aac:	cmp	r0, #7
   12ab0:	blt	12b04 <__assert_fail@plt+0x15f0>
   12ab4:	movw	r1, #12922	; 0x327a
   12ab8:	sub	r0, r5, #7
   12abc:	mov	r2, #7
   12ac0:	movt	r1, #2
   12ac4:	bl	114e4 <strncmp@plt>
   12ac8:	cmp	r0, #0
   12acc:	bne	12b04 <__assert_fail@plt+0x15f0>
   12ad0:	movw	r1, #12930	; 0x3282
   12ad4:	mov	r0, r5
   12ad8:	mov	r2, #3
   12adc:	movt	r1, #2
   12ae0:	bl	114e4 <strncmp@plt>
   12ae4:	cmp	r0, #0
   12ae8:	beq	12af4 <__assert_fail@plt+0x15e0>
   12aec:	mov	r4, r5
   12af0:	b	12b04 <__assert_fail@plt+0x15f0>
   12af4:	movw	r0, #16816	; 0x41b0
   12af8:	add	r4, r5, #3
   12afc:	movt	r0, #3
   12b00:	str	r4, [r0]
   12b04:	movw	r0, #16820	; 0x41b4
   12b08:	movt	r0, #3
   12b0c:	str	r4, [r0]
   12b10:	movw	r0, #17808	; 0x4590
   12b14:	movt	r0, #3
   12b18:	str	r4, [r0]
   12b1c:	pop	{r4, r5, fp, pc}
   12b20:	movw	r0, #16832	; 0x41c0
   12b24:	movt	r0, #3
   12b28:	ldr	r1, [r0]
   12b2c:	movw	r0, #12866	; 0x3242
   12b30:	movt	r0, #2
   12b34:	bl	114d8 <fputs@plt>
   12b38:	bl	114f0 <abort@plt>
   12b3c:	push	{r4, r5, r6, sl, fp, lr}
   12b40:	add	fp, sp, #16
   12b44:	mov	r4, r0
   12b48:	movw	r0, #17816	; 0x4598
   12b4c:	movt	r0, #3
   12b50:	cmp	r4, #0
   12b54:	moveq	r4, r0
   12b58:	bl	113f4 <__errno_location@plt>
   12b5c:	ldr	r6, [r0]
   12b60:	mov	r5, r0
   12b64:	mov	r0, r4
   12b68:	mov	r1, #48	; 0x30
   12b6c:	bl	216fc <__assert_fail@plt+0x101e8>
   12b70:	str	r6, [r5]
   12b74:	pop	{r4, r5, r6, sl, fp, pc}
   12b78:	movw	r1, #17816	; 0x4598
   12b7c:	cmp	r0, #0
   12b80:	movt	r1, #3
   12b84:	movne	r1, r0
   12b88:	ldr	r0, [r1]
   12b8c:	bx	lr
   12b90:	movw	r2, #17816	; 0x4598
   12b94:	cmp	r0, #0
   12b98:	movt	r2, #3
   12b9c:	movne	r2, r0
   12ba0:	str	r1, [r2]
   12ba4:	bx	lr
   12ba8:	movw	r3, #17816	; 0x4598
   12bac:	cmp	r0, #0
   12bb0:	and	r2, r2, #1
   12bb4:	movt	r3, #3
   12bb8:	movne	r3, r0
   12bbc:	ubfx	r0, r1, #5, #3
   12bc0:	and	r1, r1, #31
   12bc4:	add	ip, r3, r0, lsl #2
   12bc8:	mov	r0, #1
   12bcc:	ldr	r3, [ip, #8]
   12bd0:	and	r0, r0, r3, lsr r1
   12bd4:	eor	r2, r0, r2
   12bd8:	eor	r1, r3, r2, lsl r1
   12bdc:	str	r1, [ip, #8]
   12be0:	bx	lr
   12be4:	movw	r2, #17816	; 0x4598
   12be8:	cmp	r0, #0
   12bec:	movt	r2, #3
   12bf0:	movne	r2, r0
   12bf4:	ldr	r0, [r2, #4]
   12bf8:	str	r1, [r2, #4]
   12bfc:	bx	lr
   12c00:	push	{fp, lr}
   12c04:	mov	fp, sp
   12c08:	movw	r3, #17816	; 0x4598
   12c0c:	cmp	r0, #0
   12c10:	movt	r3, #3
   12c14:	movne	r3, r0
   12c18:	cmp	r1, #0
   12c1c:	mov	r0, #10
   12c20:	cmpne	r2, #0
   12c24:	str	r0, [r3]
   12c28:	bne	12c30 <__assert_fail@plt+0x171c>
   12c2c:	bl	114f0 <abort@plt>
   12c30:	str	r1, [r3, #40]	; 0x28
   12c34:	str	r2, [r3, #44]	; 0x2c
   12c38:	pop	{fp, pc}
   12c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c40:	add	fp, sp, #28
   12c44:	sub	sp, sp, #20
   12c48:	mov	r7, r0
   12c4c:	ldr	r0, [fp, #8]
   12c50:	movw	r5, #17816	; 0x4598
   12c54:	mov	r8, r3
   12c58:	mov	r9, r2
   12c5c:	mov	sl, r1
   12c60:	movt	r5, #3
   12c64:	cmp	r0, #0
   12c68:	movne	r5, r0
   12c6c:	bl	113f4 <__errno_location@plt>
   12c70:	ldr	r2, [r5, #40]	; 0x28
   12c74:	ldr	r3, [r5, #44]	; 0x2c
   12c78:	mov	r4, r0
   12c7c:	ldm	r5, {r0, r1}
   12c80:	add	r5, r5, #8
   12c84:	ldr	r6, [r4]
   12c88:	stm	sp, {r0, r1, r5}
   12c8c:	mov	r0, r7
   12c90:	mov	r1, sl
   12c94:	str	r2, [sp, #12]
   12c98:	str	r3, [sp, #16]
   12c9c:	mov	r2, r9
   12ca0:	mov	r3, r8
   12ca4:	bl	12cb4 <__assert_fail@plt+0x17a0>
   12ca8:	str	r6, [r4]
   12cac:	sub	sp, fp, #28
   12cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cb8:	add	fp, sp, #28
   12cbc:	sub	sp, sp, #156	; 0x9c
   12cc0:	mov	r5, r0
   12cc4:	add	r0, r2, #1
   12cc8:	mov	r6, r1
   12ccc:	mov	sl, r3
   12cd0:	str	r2, [fp, #-80]	; 0xffffffb0
   12cd4:	str	r0, [sp, #72]	; 0x48
   12cd8:	ldr	r0, [fp, #12]
   12cdc:	and	r1, r0, #1
   12ce0:	str	r1, [sp, #32]
   12ce4:	and	r1, r0, #4
   12ce8:	str	r1, [sp, #28]
   12cec:	ubfx	r9, r0, #1, #1
   12cf0:	bl	11340 <__ctype_get_mb_cur_max@plt>
   12cf4:	str	r0, [sp, #40]	; 0x28
   12cf8:	ldr	r0, [fp, #24]
   12cfc:	ldr	r7, [fp, #8]
   12d00:	mov	r1, #0
   12d04:	mov	lr, #0
   12d08:	str	r5, [fp, #-84]	; 0xffffffac
   12d0c:	str	r1, [sp, #60]	; 0x3c
   12d10:	mov	r1, #1
   12d14:	str	r1, [fp, #-48]	; 0xffffffd0
   12d18:	str	r0, [sp, #80]	; 0x50
   12d1c:	ldr	r0, [fp, #20]
   12d20:	str	r0, [sp, #76]	; 0x4c
   12d24:	mov	r0, #0
   12d28:	str	r0, [sp, #56]	; 0x38
   12d2c:	mov	r0, #0
   12d30:	str	r0, [fp, #-88]	; 0xffffffa8
   12d34:	mov	r0, #0
   12d38:	str	r0, [fp, #-72]	; 0xffffffb8
   12d3c:	mov	r0, #0
   12d40:	cmp	r7, #10
   12d44:	bhi	13d20 <__assert_fail@plt+0x280c>
   12d48:	add	r1, pc, #24
   12d4c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12d50:	mov	ip, r6
   12d54:	mov	r8, #0
   12d58:	mov	r2, #1
   12d5c:	mov	r6, #0
   12d60:	mov	r3, sl
   12d64:	ldr	pc, [r1, r7, lsl #2]
   12d68:	andeq	r2, r1, r4, asr lr
   12d6c:	andeq	r2, r1, r8, lsr #29
   12d70:	andeq	r2, r1, r8, ror #28
   12d74:	andeq	r2, r1, ip, asr #28
   12d78:	muleq	r1, ip, lr
   12d7c:	ldrdeq	r2, [r1], -r0
   12d80:	andeq	r2, r1, r8, ror lr
   12d84:	andeq	r2, r1, r4, asr pc
   12d88:	muleq	r1, r4, sp
   12d8c:	muleq	r1, r4, sp
   12d90:	ldrdeq	r2, [r1], -r4
   12d94:	movw	r0, #13012	; 0x32d4
   12d98:	mov	r1, r7
   12d9c:	mov	r6, r5
   12da0:	mov	r4, ip
   12da4:	mov	r5, lr
   12da8:	movt	r0, #2
   12dac:	bl	14484 <__assert_fail@plt+0x2f70>
   12db0:	str	r0, [sp, #76]	; 0x4c
   12db4:	movw	r0, #13014	; 0x32d6
   12db8:	mov	r1, r7
   12dbc:	movt	r0, #2
   12dc0:	bl	14484 <__assert_fail@plt+0x2f70>
   12dc4:	mov	lr, r5
   12dc8:	mov	r5, r6
   12dcc:	mov	ip, r4
   12dd0:	str	r0, [sp, #80]	; 0x50
   12dd4:	mov	r8, #0
   12dd8:	tst	r9, #1
   12ddc:	str	lr, [sp, #44]	; 0x2c
   12de0:	bne	12e18 <__assert_fail@plt+0x1904>
   12de4:	ldr	r0, [sp, #76]	; 0x4c
   12de8:	ldrb	r0, [r0]
   12dec:	cmp	r0, #0
   12df0:	beq	12e18 <__assert_fail@plt+0x1904>
   12df4:	ldr	r1, [sp, #76]	; 0x4c
   12df8:	mov	r8, #0
   12dfc:	add	r1, r1, #1
   12e00:	cmp	r8, ip
   12e04:	strbcc	r0, [r5, r8]
   12e08:	ldrb	r0, [r1, r8]
   12e0c:	add	r8, r8, #1
   12e10:	cmp	r0, #0
   12e14:	bne	12e00 <__assert_fail@plt+0x18ec>
   12e18:	ldr	r6, [sp, #80]	; 0x50
   12e1c:	mov	r4, ip
   12e20:	mov	r0, r6
   12e24:	bl	113dc <strlen@plt>
   12e28:	mov	ip, r4
   12e2c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12e30:	ldr	lr, [sp, #44]	; 0x2c
   12e34:	str	r6, [fp, #-88]	; 0xffffffa8
   12e38:	str	r0, [fp, #-72]	; 0xffffffb8
   12e3c:	mov	r2, #1
   12e40:	mov	r6, r9
   12e44:	mov	r3, sl
   12e48:	b	12f54 <__assert_fail@plt+0x1a40>
   12e4c:	mov	r0, #1
   12e50:	b	12ea8 <__assert_fail@plt+0x1994>
   12e54:	mov	r7, #0
   12e58:	mov	r8, #0
   12e5c:	mov	r2, r0
   12e60:	mov	r6, #0
   12e64:	b	12f54 <__assert_fail@plt+0x1a40>
   12e68:	tst	r9, #1
   12e6c:	bne	12ea8 <__assert_fail@plt+0x1994>
   12e70:	mov	r2, r0
   12e74:	b	12f00 <__assert_fail@plt+0x19ec>
   12e78:	mov	r0, #1
   12e7c:	mov	r8, #0
   12e80:	mov	r7, #5
   12e84:	mov	r2, #1
   12e88:	str	r0, [fp, #-72]	; 0xffffffb8
   12e8c:	movw	r0, #13010	; 0x32d2
   12e90:	movt	r0, #2
   12e94:	str	r0, [fp, #-88]	; 0xffffffa8
   12e98:	b	12ec8 <__assert_fail@plt+0x19b4>
   12e9c:	mov	r2, #1
   12ea0:	tst	r9, #1
   12ea4:	beq	12f00 <__assert_fail@plt+0x19ec>
   12ea8:	mov	r1, #1
   12eac:	mov	r8, #0
   12eb0:	mov	r7, #2
   12eb4:	mov	r2, r0
   12eb8:	str	r1, [fp, #-72]	; 0xffffffb8
   12ebc:	movw	r1, #13014	; 0x32d6
   12ec0:	movt	r1, #2
   12ec4:	str	r1, [fp, #-88]	; 0xffffffa8
   12ec8:	mov	r6, #1
   12ecc:	b	12f54 <__assert_fail@plt+0x1a40>
   12ed0:	tst	r9, #1
   12ed4:	beq	12f24 <__assert_fail@plt+0x1a10>
   12ed8:	mov	r0, #1
   12edc:	mov	r8, #0
   12ee0:	mov	r2, #1
   12ee4:	mov	r6, #1
   12ee8:	mov	r7, #5
   12eec:	str	r0, [fp, #-72]	; 0xffffffb8
   12ef0:	movw	r0, #13010	; 0x32d2
   12ef4:	movt	r0, #2
   12ef8:	str	r0, [fp, #-88]	; 0xffffffa8
   12efc:	b	12f54 <__assert_fail@plt+0x1a40>
   12f00:	cmp	ip, #0
   12f04:	mov	r8, #1
   12f08:	mov	r6, #0
   12f0c:	mov	r7, #2
   12f10:	movne	r0, #39	; 0x27
   12f14:	strbne	r0, [r5]
   12f18:	movw	r0, #13014	; 0x32d6
   12f1c:	movt	r0, #2
   12f20:	b	12f48 <__assert_fail@plt+0x1a34>
   12f24:	cmp	ip, #0
   12f28:	mov	r8, #1
   12f2c:	mov	r2, #1
   12f30:	mov	r7, #5
   12f34:	mov	r6, #0
   12f38:	movne	r0, #34	; 0x22
   12f3c:	strbne	r0, [r5]
   12f40:	movw	r0, #13010	; 0x32d2
   12f44:	movt	r0, #2
   12f48:	str	r0, [fp, #-88]	; 0xffffffa8
   12f4c:	mov	r0, #1
   12f50:	str	r0, [fp, #-72]	; 0xffffffb8
   12f54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f58:	str	r7, [fp, #-68]	; 0xffffffbc
   12f5c:	str	r6, [fp, #-76]	; 0xffffffb4
   12f60:	str	r2, [sp, #84]	; 0x54
   12f64:	cmp	r0, #0
   12f68:	movwne	r0, #1
   12f6c:	and	r1, r0, r6
   12f70:	and	r1, r2, r1
   12f74:	str	r1, [sp, #48]	; 0x30
   12f78:	sub	r1, r7, #2
   12f7c:	clz	r1, r1
   12f80:	lsr	r1, r1, #5
   12f84:	and	r1, r1, r6
   12f88:	str	r1, [sp, #64]	; 0x40
   12f8c:	subs	r1, r7, #2
   12f90:	eor	r7, r6, #1
   12f94:	movwne	r1, #1
   12f98:	str	r7, [sp, #92]	; 0x5c
   12f9c:	orr	r7, r1, r7
   12fa0:	and	r1, r1, r2
   12fa4:	and	r0, r0, r1
   12fa8:	str	r7, [sp, #68]	; 0x44
   12fac:	mov	r7, #0
   12fb0:	str	r0, [fp, #-60]	; 0xffffffc4
   12fb4:	orr	r0, r1, r6
   12fb8:	ldr	r1, [fp, #16]
   12fbc:	eor	r0, r0, #1
   12fc0:	clz	r1, r1
   12fc4:	lsr	r1, r1, #5
   12fc8:	orr	r0, r1, r0
   12fcc:	str	r0, [fp, #-64]	; 0xffffffc0
   12fd0:	eor	r0, r2, #1
   12fd4:	str	r0, [sp, #52]	; 0x34
   12fd8:	cmn	r3, #1
   12fdc:	beq	12fec <__assert_fail@plt+0x1ad8>
   12fe0:	cmp	r7, r3
   12fe4:	bne	12ff8 <__assert_fail@plt+0x1ae4>
   12fe8:	b	13b54 <__assert_fail@plt+0x2640>
   12fec:	ldrb	r0, [r4, r7]
   12ff0:	cmp	r0, #0
   12ff4:	beq	13b5c <__assert_fail@plt+0x2648>
   12ff8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12ffc:	cmp	r0, #0
   13000:	beq	13048 <__assert_fail@plt+0x1b34>
   13004:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13008:	add	r5, r7, r0
   1300c:	cmp	r0, #2
   13010:	bcc	1305c <__assert_fail@plt+0x1b48>
   13014:	mov	r0, #0
   13018:	cmn	r3, #1
   1301c:	str	r0, [fp, #-56]	; 0xffffffc8
   13020:	bne	13064 <__assert_fail@plt+0x1b50>
   13024:	mov	r0, r4
   13028:	mov	r4, ip
   1302c:	mov	r6, lr
   13030:	bl	113dc <strlen@plt>
   13034:	mov	ip, r4
   13038:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1303c:	mov	lr, r6
   13040:	mov	r3, r0
   13044:	b	13064 <__assert_fail@plt+0x1b50>
   13048:	mov	r0, #0
   1304c:	mov	sl, r3
   13050:	str	r0, [fp, #-56]	; 0xffffffc8
   13054:	mov	r0, #0
   13058:	b	130d0 <__assert_fail@plt+0x1bbc>
   1305c:	mov	r0, #0
   13060:	str	r0, [fp, #-56]	; 0xffffffc8
   13064:	cmp	r5, r3
   13068:	bls	1307c <__assert_fail@plt+0x1b68>
   1306c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13070:	mov	r0, #0
   13074:	mov	sl, r3
   13078:	b	130d0 <__assert_fail@plt+0x1bbc>
   1307c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13080:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13084:	add	r0, r4, r7
   13088:	mov	r5, lr
   1308c:	mov	r6, ip
   13090:	mov	sl, r3
   13094:	bl	113d0 <bcmp@plt>
   13098:	ldr	r2, [sp, #92]	; 0x5c
   1309c:	cmp	r0, #0
   130a0:	ldr	r3, [fp, #-84]	; 0xffffffac
   130a4:	mov	r1, r0
   130a8:	movwne	r1, #1
   130ac:	orr	r1, r1, r2
   130b0:	tst	r1, #1
   130b4:	beq	13be0 <__assert_fail@plt+0x26cc>
   130b8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   130bc:	clz	r0, r0
   130c0:	mov	lr, r5
   130c4:	mov	ip, r6
   130c8:	mov	r5, r3
   130cc:	lsr	r0, r0, #5
   130d0:	str	r0, [fp, #-52]	; 0xffffffcc
   130d4:	ldrb	r6, [r4, r7]
   130d8:	cmp	r6, #126	; 0x7e
   130dc:	bhi	13604 <__assert_fail@plt+0x20f0>
   130e0:	add	r3, pc, #16
   130e4:	mov	r9, #1
   130e8:	mov	r2, #110	; 0x6e
   130ec:	mov	r0, #97	; 0x61
   130f0:	mov	r1, #0
   130f4:	ldr	pc, [r3, r6, lsl #2]
   130f8:	andeq	r3, r1, r8, ror #8
   130fc:	andeq	r3, r1, r4, lsl #12
   13100:	andeq	r3, r1, r4, lsl #12
   13104:	andeq	r3, r1, r4, lsl #12
   13108:	andeq	r3, r1, r4, lsl #12
   1310c:	andeq	r3, r1, r4, lsl #12
   13110:	andeq	r3, r1, r4, lsl #12
   13114:	andeq	r3, r1, r4, lsl #13
   13118:	andeq	r3, r1, r8, asr #8
   1311c:	andeq	r3, r1, r0, asr #8
   13120:	andeq	r3, r1, r4, asr r4
   13124:	andeq	r3, r1, ip, ror #10
   13128:	andeq	r3, r1, r8, lsr r4
   1312c:	andeq	r3, r1, r0, asr r4
   13130:	andeq	r3, r1, r4, lsl #12
   13134:	andeq	r3, r1, r4, lsl #12
   13138:	andeq	r3, r1, r4, lsl #12
   1313c:	andeq	r3, r1, r4, lsl #12
   13140:	andeq	r3, r1, r4, lsl #12
   13144:	andeq	r3, r1, r4, lsl #12
   13148:	andeq	r3, r1, r4, lsl #12
   1314c:	andeq	r3, r1, r4, lsl #12
   13150:	andeq	r3, r1, r4, lsl #12
   13154:	andeq	r3, r1, r4, lsl #12
   13158:	andeq	r3, r1, r4, lsl #12
   1315c:	andeq	r3, r1, r4, lsl #12
   13160:	andeq	r3, r1, r4, lsl #12
   13164:	andeq	r3, r1, r4, lsl #12
   13168:	andeq	r3, r1, r4, lsl #12
   1316c:	andeq	r3, r1, r4, lsl #12
   13170:	andeq	r3, r1, r4, lsl #12
   13174:	andeq	r3, r1, r4, lsl #12
   13178:	andeq	r3, r1, r8, ror #7
   1317c:	andeq	r3, r1, ip, ror #7
   13180:	andeq	r3, r1, ip, ror #7
   13184:	ldrdeq	r3, [r1], -r0
   13188:	andeq	r3, r1, ip, ror #7
   1318c:	strdeq	r3, [r1], -r4
   13190:	andeq	r3, r1, ip, ror #7
   13194:	andeq	r3, r1, r4, ror r5
   13198:	andeq	r3, r1, ip, ror #7
   1319c:	andeq	r3, r1, ip, ror #7
   131a0:	andeq	r3, r1, ip, ror #7
   131a4:	strdeq	r3, [r1], -r4
   131a8:	strdeq	r3, [r1], -r4
   131ac:	strdeq	r3, [r1], -r4
   131b0:	strdeq	r3, [r1], -r4
   131b4:	strdeq	r3, [r1], -r4
   131b8:	strdeq	r3, [r1], -r4
   131bc:	strdeq	r3, [r1], -r4
   131c0:	strdeq	r3, [r1], -r4
   131c4:	strdeq	r3, [r1], -r4
   131c8:	strdeq	r3, [r1], -r4
   131cc:	strdeq	r3, [r1], -r4
   131d0:	strdeq	r3, [r1], -r4
   131d4:	strdeq	r3, [r1], -r4
   131d8:	strdeq	r3, [r1], -r4
   131dc:	strdeq	r3, [r1], -r4
   131e0:	strdeq	r3, [r1], -r4
   131e4:	andeq	r3, r1, ip, ror #7
   131e8:	andeq	r3, r1, ip, ror #7
   131ec:	andeq	r3, r1, ip, ror #7
   131f0:	andeq	r3, r1, ip, ror #7
   131f4:	andeq	r3, r1, r0, asr #10
   131f8:	andeq	r3, r1, r4, lsl #12
   131fc:	strdeq	r3, [r1], -r4
   13200:	strdeq	r3, [r1], -r4
   13204:	strdeq	r3, [r1], -r4
   13208:	strdeq	r3, [r1], -r4
   1320c:	strdeq	r3, [r1], -r4
   13210:	strdeq	r3, [r1], -r4
   13214:	strdeq	r3, [r1], -r4
   13218:	strdeq	r3, [r1], -r4
   1321c:	strdeq	r3, [r1], -r4
   13220:	strdeq	r3, [r1], -r4
   13224:	strdeq	r3, [r1], -r4
   13228:	strdeq	r3, [r1], -r4
   1322c:	strdeq	r3, [r1], -r4
   13230:	strdeq	r3, [r1], -r4
   13234:	strdeq	r3, [r1], -r4
   13238:	strdeq	r3, [r1], -r4
   1323c:	strdeq	r3, [r1], -r4
   13240:	strdeq	r3, [r1], -r4
   13244:	strdeq	r3, [r1], -r4
   13248:	strdeq	r3, [r1], -r4
   1324c:	strdeq	r3, [r1], -r4
   13250:	strdeq	r3, [r1], -r4
   13254:	strdeq	r3, [r1], -r4
   13258:	strdeq	r3, [r1], -r4
   1325c:	strdeq	r3, [r1], -r4
   13260:	strdeq	r3, [r1], -r4
   13264:	andeq	r3, r1, ip, ror #7
   13268:	andeq	r3, r1, r4, lsl r4
   1326c:	strdeq	r3, [r1], -r4
   13270:	andeq	r3, r1, ip, ror #7
   13274:	strdeq	r3, [r1], -r4
   13278:	andeq	r3, r1, ip, ror #7
   1327c:	strdeq	r3, [r1], -r4
   13280:	strdeq	r3, [r1], -r4
   13284:	strdeq	r3, [r1], -r4
   13288:	strdeq	r3, [r1], -r4
   1328c:	strdeq	r3, [r1], -r4
   13290:	strdeq	r3, [r1], -r4
   13294:	strdeq	r3, [r1], -r4
   13298:	strdeq	r3, [r1], -r4
   1329c:	strdeq	r3, [r1], -r4
   132a0:	strdeq	r3, [r1], -r4
   132a4:	strdeq	r3, [r1], -r4
   132a8:	strdeq	r3, [r1], -r4
   132ac:	strdeq	r3, [r1], -r4
   132b0:	strdeq	r3, [r1], -r4
   132b4:	strdeq	r3, [r1], -r4
   132b8:	strdeq	r3, [r1], -r4
   132bc:	strdeq	r3, [r1], -r4
   132c0:	strdeq	r3, [r1], -r4
   132c4:	strdeq	r3, [r1], -r4
   132c8:	strdeq	r3, [r1], -r4
   132cc:	strdeq	r3, [r1], -r4
   132d0:	strdeq	r3, [r1], -r4
   132d4:	strdeq	r3, [r1], -r4
   132d8:	strdeq	r3, [r1], -r4
   132dc:	strdeq	r3, [r1], -r4
   132e0:	strdeq	r3, [r1], -r4
   132e4:	andeq	r3, r1, r8, lsr #7
   132e8:	andeq	r3, r1, ip, ror #7
   132ec:	andeq	r3, r1, r8, lsr #7
   132f0:	ldrdeq	r3, [r1], -r0
   132f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132f8:	tst	r0, #1
   132fc:	bne	13328 <__assert_fail@plt+0x1e14>
   13300:	ldr	r1, [fp, #16]
   13304:	ubfx	r0, r6, #5, #3
   13308:	mov	r2, #1
   1330c:	ldr	r0, [r1, r0, lsl #2]
   13310:	and	r1, r6, #31
   13314:	tst	r0, r2, lsl r1
   13318:	beq	13328 <__assert_fail@plt+0x1e14>
   1331c:	mov	r0, r6
   13320:	mov	r1, r9
   13324:	b	1333c <__assert_fail@plt+0x1e28>
   13328:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1332c:	mov	r1, r9
   13330:	cmp	r0, #0
   13334:	mov	r0, r6
   13338:	beq	13a88 <__assert_fail@plt+0x2574>
   1333c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13340:	tst	r2, #1
   13344:	bne	13c24 <__assert_fail@plt+0x2710>
   13348:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1334c:	subs	r2, r2, #2
   13350:	movwne	r2, #1
   13354:	orr	r2, r2, lr
   13358:	tst	r2, #1
   1335c:	bne	13394 <__assert_fail@plt+0x1e80>
   13360:	cmp	r8, ip
   13364:	mov	lr, #1
   13368:	movcc	r2, #39	; 0x27
   1336c:	strbcc	r2, [r5, r8]
   13370:	add	r2, r8, #1
   13374:	cmp	r2, ip
   13378:	movcc	r3, #36	; 0x24
   1337c:	strbcc	r3, [r5, r2]
   13380:	add	r2, r8, #2
   13384:	add	r8, r8, #3
   13388:	cmp	r2, ip
   1338c:	movcc	r3, #39	; 0x27
   13390:	strbcc	r3, [r5, r2]
   13394:	cmp	r8, ip
   13398:	movcc	r2, #92	; 0x5c
   1339c:	strbcc	r2, [r5, r8]
   133a0:	add	r8, r8, #1
   133a4:	b	13ac8 <__assert_fail@plt+0x25b4>
   133a8:	cmp	sl, #1
   133ac:	beq	133d0 <__assert_fail@plt+0x1ebc>
   133b0:	mov	r9, #0
   133b4:	cmn	sl, #1
   133b8:	bne	133dc <__assert_fail@plt+0x1ec8>
   133bc:	ldrb	r0, [r4, #1]
   133c0:	cmp	r0, #0
   133c4:	beq	133d0 <__assert_fail@plt+0x1ebc>
   133c8:	mvn	sl, #0
   133cc:	b	133dc <__assert_fail@plt+0x1ec8>
   133d0:	mov	r9, #0
   133d4:	cmp	r7, #0
   133d8:	beq	133e8 <__assert_fail@plt+0x1ed4>
   133dc:	mov	r0, #0
   133e0:	str	r0, [fp, #-56]	; 0xffffffc8
   133e4:	b	132f4 <__assert_fail@plt+0x1de0>
   133e8:	mov	r1, #1
   133ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   133f0:	cmp	r0, #2
   133f4:	bne	1340c <__assert_fail@plt+0x1ef8>
   133f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133fc:	mov	r9, r1
   13400:	tst	r0, #1
   13404:	beq	132f4 <__assert_fail@plt+0x1de0>
   13408:	b	13c24 <__assert_fail@plt+0x2710>
   1340c:	mov	r9, r1
   13410:	b	132f4 <__assert_fail@plt+0x1de0>
   13414:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13418:	cmp	r0, #2
   1341c:	bne	13660 <__assert_fail@plt+0x214c>
   13420:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13424:	tst	r0, #1
   13428:	bne	13c24 <__assert_fail@plt+0x2710>
   1342c:	mov	r0, #0
   13430:	str	r0, [fp, #-56]	; 0xffffffc8
   13434:	b	13678 <__assert_fail@plt+0x2164>
   13438:	mov	r0, #102	; 0x66
   1343c:	b	13684 <__assert_fail@plt+0x2170>
   13440:	mov	r2, #116	; 0x74
   13444:	b	13454 <__assert_fail@plt+0x1f40>
   13448:	mov	r0, #98	; 0x62
   1344c:	b	13684 <__assert_fail@plt+0x2170>
   13450:	mov	r2, #114	; 0x72
   13454:	ldr	r0, [sp, #68]	; 0x44
   13458:	tst	r0, #1
   1345c:	mov	r0, r2
   13460:	bne	13684 <__assert_fail@plt+0x2170>
   13464:	b	13c24 <__assert_fail@plt+0x2710>
   13468:	ldr	r0, [sp, #84]	; 0x54
   1346c:	tst	r0, #1
   13470:	beq	136a4 <__assert_fail@plt+0x2190>
   13474:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13478:	tst	r0, #1
   1347c:	bne	13d10 <__assert_fail@plt+0x27fc>
   13480:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13484:	mov	r2, sl
   13488:	subs	r0, r0, #2
   1348c:	movwne	r0, #1
   13490:	orr	r0, r0, lr
   13494:	tst	r0, #1
   13498:	bne	134d0 <__assert_fail@plt+0x1fbc>
   1349c:	cmp	r8, ip
   134a0:	mov	lr, #1
   134a4:	movcc	r0, #39	; 0x27
   134a8:	strbcc	r0, [r5, r8]
   134ac:	add	r0, r8, #1
   134b0:	cmp	r0, ip
   134b4:	movcc	r1, #36	; 0x24
   134b8:	strbcc	r1, [r5, r0]
   134bc:	add	r0, r8, #2
   134c0:	add	r8, r8, #3
   134c4:	cmp	r0, ip
   134c8:	movcc	r1, #39	; 0x27
   134cc:	strbcc	r1, [r5, r0]
   134d0:	mov	r1, #1
   134d4:	cmp	r8, ip
   134d8:	mov	r9, #0
   134dc:	mov	r6, #48	; 0x30
   134e0:	str	r1, [fp, #-56]	; 0xffffffc8
   134e4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   134e8:	movcc	r0, #92	; 0x5c
   134ec:	strbcc	r0, [r5, r8]
   134f0:	add	r0, r8, #1
   134f4:	cmp	r1, #2
   134f8:	beq	13800 <__assert_fail@plt+0x22ec>
   134fc:	add	r1, r7, #1
   13500:	cmp	r1, r2
   13504:	bcs	13800 <__assert_fail@plt+0x22ec>
   13508:	ldrb	r1, [r4, r1]
   1350c:	sub	r1, r1, #48	; 0x30
   13510:	uxtb	r1, r1
   13514:	cmp	r1, #9
   13518:	bhi	13800 <__assert_fail@plt+0x22ec>
   1351c:	cmp	r0, ip
   13520:	movcc	r1, #48	; 0x30
   13524:	strbcc	r1, [r5, r0]
   13528:	add	r0, r8, #2
   1352c:	add	r8, r8, #3
   13530:	cmp	r0, ip
   13534:	movcc	r1, #48	; 0x30
   13538:	strbcc	r1, [r5, r0]
   1353c:	b	132f4 <__assert_fail@plt+0x1de0>
   13540:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13544:	mov	r6, #63	; 0x3f
   13548:	cmp	r0, #5
   1354c:	beq	13808 <__assert_fail@plt+0x22f4>
   13550:	mov	r1, #0
   13554:	cmp	r0, #2
   13558:	str	r1, [fp, #-56]	; 0xffffffc8
   1355c:	bne	138bc <__assert_fail@plt+0x23a8>
   13560:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13564:	mov	r9, #0
   13568:	b	13400 <__assert_fail@plt+0x1eec>
   1356c:	mov	r0, #118	; 0x76
   13570:	b	13684 <__assert_fail@plt+0x2170>
   13574:	mov	r0, #1
   13578:	mov	r6, #39	; 0x27
   1357c:	str	r0, [sp, #60]	; 0x3c
   13580:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13584:	cmp	r0, #2
   13588:	bne	135fc <__assert_fail@plt+0x20e8>
   1358c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13590:	tst	r0, #1
   13594:	bne	13c24 <__assert_fail@plt+0x2710>
   13598:	ldr	r2, [sp, #56]	; 0x38
   1359c:	clz	r1, ip
   135a0:	mov	lr, #0
   135a4:	lsr	r1, r1, #5
   135a8:	cmp	r2, #0
   135ac:	mov	r0, r2
   135b0:	movwne	r0, #1
   135b4:	orrs	r0, r0, r1
   135b8:	moveq	r2, ip
   135bc:	moveq	ip, r0
   135c0:	cmp	r8, ip
   135c4:	str	r2, [sp, #56]	; 0x38
   135c8:	movcc	r0, #39	; 0x27
   135cc:	strbcc	r0, [r5, r8]
   135d0:	add	r0, r8, #1
   135d4:	cmp	r0, ip
   135d8:	movcc	r1, #92	; 0x5c
   135dc:	strbcc	r1, [r5, r0]
   135e0:	add	r0, r8, #2
   135e4:	add	r8, r8, #3
   135e8:	cmp	r0, ip
   135ec:	movcc	r1, #39	; 0x27
   135f0:	strbcc	r1, [r5, r0]
   135f4:	mov	r0, #0
   135f8:	str	r0, [fp, #-56]	; 0xffffffc8
   135fc:	mov	r9, #1
   13600:	b	132f4 <__assert_fail@plt+0x1de0>
   13604:	ldr	r0, [sp, #40]	; 0x28
   13608:	str	lr, [sp, #44]	; 0x2c
   1360c:	str	ip, [sp, #88]	; 0x58
   13610:	cmp	r0, #1
   13614:	bne	136c4 <__assert_fail@plt+0x21b0>
   13618:	str	sl, [sp, #36]	; 0x24
   1361c:	bl	113b8 <__ctype_b_loc@plt>
   13620:	ldr	r0, [r0]
   13624:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13628:	mov	r1, #1
   1362c:	add	r0, r0, r6, lsl #1
   13630:	ldrb	r0, [r0, #1]
   13634:	ubfx	r9, r0, #6, #1
   13638:	ldr	r0, [sp, #52]	; 0x34
   1363c:	ldr	lr, [sp, #44]	; 0x2c
   13640:	cmp	r1, #1
   13644:	orr	r3, r9, r0
   13648:	bhi	138c4 <__assert_fail@plt+0x23b0>
   1364c:	tst	r3, #1
   13650:	beq	138c4 <__assert_fail@plt+0x23b0>
   13654:	ldr	sl, [sp, #36]	; 0x24
   13658:	ldr	ip, [sp, #88]	; 0x58
   1365c:	b	132f4 <__assert_fail@plt+0x1de0>
   13660:	ldr	r1, [sp, #48]	; 0x30
   13664:	mov	r0, #0
   13668:	str	r0, [fp, #-56]	; 0xffffffc8
   1366c:	mov	r0, #92	; 0x5c
   13670:	cmp	r1, #0
   13674:	beq	13684 <__assert_fail@plt+0x2170>
   13678:	mov	r6, #92	; 0x5c
   1367c:	mov	r9, #0
   13680:	b	13a88 <__assert_fail@plt+0x2574>
   13684:	mov	r1, #0
   13688:	mov	r9, #0
   1368c:	str	r1, [fp, #-56]	; 0xffffffc8
   13690:	ldr	r1, [sp, #84]	; 0x54
   13694:	tst	r1, #1
   13698:	mov	r1, #0
   1369c:	beq	132f4 <__assert_fail@plt+0x1de0>
   136a0:	b	1333c <__assert_fail@plt+0x1e28>
   136a4:	ldr	r0, [sp, #32]
   136a8:	mov	r6, #0
   136ac:	mov	r9, #0
   136b0:	cmp	r0, #0
   136b4:	mov	r0, #0
   136b8:	str	r0, [fp, #-56]	; 0xffffffc8
   136bc:	beq	132f4 <__assert_fail@plt+0x1de0>
   136c0:	b	13ae0 <__assert_fail@plt+0x25cc>
   136c4:	mov	r0, #0
   136c8:	cmn	sl, #1
   136cc:	sub	r3, fp, #40	; 0x28
   136d0:	str	r0, [fp, #-36]	; 0xffffffdc
   136d4:	str	r0, [fp, #-40]	; 0xffffffd8
   136d8:	bne	136f0 <__assert_fail@plt+0x21dc>
   136dc:	mov	r0, r4
   136e0:	bl	113dc <strlen@plt>
   136e4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   136e8:	sub	r3, fp, #40	; 0x28
   136ec:	mov	sl, r0
   136f0:	ldr	r0, [sp, #72]	; 0x48
   136f4:	mov	r9, #1
   136f8:	mov	r1, #0
   136fc:	str	sl, [sp, #36]	; 0x24
   13700:	add	r0, r0, r7
   13704:	str	r0, [sp, #20]
   13708:	add	r0, r1, r7
   1370c:	str	r1, [sp, #24]
   13710:	add	r1, r4, r0
   13714:	mov	r4, r0
   13718:	sub	r2, sl, r0
   1371c:	sub	r0, fp, #44	; 0x2c
   13720:	bl	221f0 <__assert_fail@plt+0x10cdc>
   13724:	cmp	r0, #0
   13728:	beq	13b34 <__assert_fail@plt+0x2620>
   1372c:	cmn	r0, #1
   13730:	beq	13aec <__assert_fail@plt+0x25d8>
   13734:	ldr	r2, [sp, #36]	; 0x24
   13738:	cmn	r0, #2
   1373c:	beq	13af4 <__assert_fail@plt+0x25e0>
   13740:	ldr	r2, [sp, #64]	; 0x40
   13744:	ldr	ip, [sp, #88]	; 0x58
   13748:	ldr	r4, [sp, #84]	; 0x54
   1374c:	ldr	lr, [fp, #-48]	; 0xffffffd0
   13750:	cmp	r0, #2
   13754:	mov	r1, #0
   13758:	movwcc	r1, #1
   1375c:	eor	r2, r2, #1
   13760:	orrs	r1, r2, r1
   13764:	bne	137b4 <__assert_fail@plt+0x22a0>
   13768:	ldr	r1, [sp, #24]
   1376c:	ldr	r2, [sp, #20]
   13770:	add	r1, r2, r1
   13774:	sub	r2, r0, #1
   13778:	ldrb	r3, [r1]
   1377c:	sub	r5, r3, #94	; 0x5e
   13780:	cmp	r5, #30
   13784:	bhi	1379c <__assert_fail@plt+0x2288>
   13788:	mov	r4, #1
   1378c:	mov	sl, #1073741829	; 0x40000005
   13790:	tst	sl, r4, lsl r5
   13794:	ldr	r4, [sp, #84]	; 0x54
   13798:	bne	13bfc <__assert_fail@plt+0x26e8>
   1379c:	sub	r3, r3, #91	; 0x5b
   137a0:	cmp	r3, #2
   137a4:	bcc	13bfc <__assert_fail@plt+0x26e8>
   137a8:	add	r1, r1, #1
   137ac:	subs	r2, r2, #1
   137b0:	bne	13778 <__assert_fail@plt+0x2264>
   137b4:	ldr	r5, [sp, #24]
   137b8:	str	lr, [fp, #-48]	; 0xffffffd0
   137bc:	add	r5, r0, r5
   137c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   137c4:	bl	11328 <iswprint@plt>
   137c8:	cmp	r0, #0
   137cc:	sub	r4, fp, #40	; 0x28
   137d0:	movwne	r0, #1
   137d4:	and	r9, r9, r0
   137d8:	mov	r0, r4
   137dc:	bl	112d4 <mbsinit@plt>
   137e0:	mov	r1, r5
   137e4:	mov	r3, r4
   137e8:	ldr	sl, [sp, #36]	; 0x24
   137ec:	ldr	r5, [fp, #-84]	; 0xffffffac
   137f0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   137f4:	cmp	r0, #0
   137f8:	beq	13708 <__assert_fail@plt+0x21f4>
   137fc:	b	13638 <__assert_fail@plt+0x2124>
   13800:	mov	r8, r0
   13804:	b	132f4 <__assert_fail@plt+0x1de0>
   13808:	mov	r0, #0
   1380c:	str	r0, [fp, #-56]	; 0xffffffc8
   13810:	ldr	r0, [sp, #28]
   13814:	cmp	r0, #0
   13818:	beq	138bc <__assert_fail@plt+0x23a8>
   1381c:	add	r0, r7, #2
   13820:	mov	r1, sl
   13824:	cmp	r0, sl
   13828:	bcs	138bc <__assert_fail@plt+0x23a8>
   1382c:	add	r1, r7, r4
   13830:	ldrb	r1, [r1, #1]
   13834:	cmp	r1, #63	; 0x3f
   13838:	bne	138bc <__assert_fail@plt+0x23a8>
   1383c:	ldrb	r9, [r4, r0]
   13840:	sub	r2, r9, #33	; 0x21
   13844:	cmp	r2, #29
   13848:	bhi	138bc <__assert_fail@plt+0x23a8>
   1384c:	mov	r1, r4
   13850:	movw	r4, #20929	; 0x51c1
   13854:	mov	r3, #1
   13858:	movt	r4, #14336	; 0x3800
   1385c:	tst	r4, r3, lsl r2
   13860:	beq	13b48 <__assert_fail@plt+0x2634>
   13864:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13868:	tst	r2, #1
   1386c:	bne	13d18 <__assert_fail@plt+0x2804>
   13870:	cmp	r8, ip
   13874:	mov	r4, r1
   13878:	mov	r7, r0
   1387c:	mov	r6, r9
   13880:	movcc	r2, #63	; 0x3f
   13884:	strbcc	r2, [r5, r8]
   13888:	add	r2, r8, #1
   1388c:	cmp	r2, ip
   13890:	movcc	r3, #34	; 0x22
   13894:	strbcc	r3, [r5, r2]
   13898:	add	r2, r8, #2
   1389c:	cmp	r2, ip
   138a0:	movcc	r3, #34	; 0x22
   138a4:	strbcc	r3, [r5, r2]
   138a8:	add	r2, r8, #3
   138ac:	add	r8, r8, #4
   138b0:	cmp	r2, ip
   138b4:	movcc	r3, #63	; 0x3f
   138b8:	strbcc	r3, [r5, r2]
   138bc:	mov	r9, #0
   138c0:	b	132f4 <__assert_fail@plt+0x1de0>
   138c4:	ldr	sl, [sp, #36]	; 0x24
   138c8:	add	r0, r1, r7
   138cc:	mov	r2, #0
   138d0:	str	r3, [sp, #24]
   138d4:	str	r0, [fp, #-56]	; 0xffffffc8
   138d8:	tst	r3, #1
   138dc:	beq	13908 <__assert_fail@plt+0x23f4>
   138e0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   138e4:	tst	r0, #1
   138e8:	beq	139d0 <__assert_fail@plt+0x24bc>
   138ec:	ldr	r1, [sp, #88]	; 0x58
   138f0:	mov	r0, r3
   138f4:	cmp	r8, r1
   138f8:	movcc	r1, #92	; 0x5c
   138fc:	strbcc	r1, [r5, r8]
   13900:	add	r8, r8, #1
   13904:	b	139d4 <__assert_fail@plt+0x24c0>
   13908:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1390c:	tst	r1, #1
   13910:	bne	13c20 <__assert_fail@plt+0x270c>
   13914:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13918:	subs	r2, r1, #2
   1391c:	movwne	r2, #1
   13920:	orr	r2, r2, lr
   13924:	tst	r2, #1
   13928:	bne	1396c <__assert_fail@plt+0x2458>
   1392c:	ldr	r1, [sp, #88]	; 0x58
   13930:	add	r2, r8, #1
   13934:	mov	lr, #1
   13938:	cmp	r8, r1
   1393c:	movcc	r1, #39	; 0x27
   13940:	strbcc	r1, [r5, r8]
   13944:	ldr	r1, [sp, #88]	; 0x58
   13948:	cmp	r2, r1
   1394c:	movcc	r1, #36	; 0x24
   13950:	strbcc	r1, [r5, r2]
   13954:	ldr	r1, [sp, #88]	; 0x58
   13958:	add	r2, r8, #2
   1395c:	add	r8, r8, #3
   13960:	cmp	r2, r1
   13964:	movcc	r1, #39	; 0x27
   13968:	strbcc	r1, [r5, r2]
   1396c:	ldr	r1, [sp, #88]	; 0x58
   13970:	add	r2, r8, #1
   13974:	mov	r0, r3
   13978:	cmp	r8, r1
   1397c:	movcc	r1, #92	; 0x5c
   13980:	strbcc	r1, [r5, r8]
   13984:	ldr	r1, [sp, #88]	; 0x58
   13988:	cmp	r2, r1
   1398c:	bcs	139a0 <__assert_fail@plt+0x248c>
   13990:	uxtb	r3, r6
   13994:	mov	r1, #48	; 0x30
   13998:	orr	r3, r1, r3, lsr #6
   1399c:	strb	r3, [r5, r2]
   139a0:	ldr	r1, [sp, #88]	; 0x58
   139a4:	add	r2, r8, #2
   139a8:	add	r8, r8, #3
   139ac:	cmp	r2, r1
   139b0:	lsrcc	r3, r6, #3
   139b4:	movcc	r1, #6
   139b8:	bficc	r3, r1, #3, #29
   139bc:	mov	r1, #6
   139c0:	bfi	r6, r1, #3, #29
   139c4:	strbcc	r3, [r5, r2]
   139c8:	mov	r2, #1
   139cc:	b	139dc <__assert_fail@plt+0x24c8>
   139d0:	mov	r0, r3
   139d4:	mov	r1, #0
   139d8:	str	r1, [fp, #-52]	; 0xffffffcc
   139dc:	mov	ip, r2
   139e0:	and	r1, r2, #1
   139e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   139e8:	add	r3, r7, #1
   139ec:	cmp	r2, r3
   139f0:	bls	13a78 <__assert_fail@plt+0x2564>
   139f4:	cmp	r1, #0
   139f8:	mvn	r5, lr
   139fc:	movwne	r1, #1
   13a00:	orr	r5, r5, r1
   13a04:	tst	r5, #1
   13a08:	bne	13a4c <__assert_fail@plt+0x2538>
   13a0c:	ldr	r1, [sp, #88]	; 0x58
   13a10:	ldr	r5, [fp, #-84]	; 0xffffffac
   13a14:	mov	r2, r4
   13a18:	ldr	r4, [sp, #88]	; 0x58
   13a1c:	ldr	r0, [sp, #24]
   13a20:	mov	lr, #0
   13a24:	cmp	r8, r1
   13a28:	movcc	r1, #39	; 0x27
   13a2c:	strbcc	r1, [r5, r8]
   13a30:	add	r1, r8, #1
   13a34:	add	r8, r8, #2
   13a38:	cmp	r1, r4
   13a3c:	movcc	r4, #39	; 0x27
   13a40:	strbcc	r4, [r5, r1]
   13a44:	mov	r4, r2
   13a48:	b	13a50 <__assert_fail@plt+0x253c>
   13a4c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13a50:	ldr	r1, [sp, #88]	; 0x58
   13a54:	mov	r2, ip
   13a58:	cmp	r8, r1
   13a5c:	ldr	r1, [sp, #72]	; 0x48
   13a60:	strbcc	r6, [r5, r8]
   13a64:	add	r8, r8, #1
   13a68:	ldrb	r6, [r1, r7]
   13a6c:	mov	r7, r3
   13a70:	mov	r3, r0
   13a74:	b	138d8 <__assert_fail@plt+0x23c4>
   13a78:	ldr	ip, [sp, #88]	; 0x58
   13a7c:	cmp	r1, #0
   13a80:	movwne	r1, #1
   13a84:	str	r1, [fp, #-56]	; 0xffffffc8
   13a88:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13a8c:	cmp	r0, #0
   13a90:	bne	13ac0 <__assert_fail@plt+0x25ac>
   13a94:	tst	lr, #1
   13a98:	beq	13ac0 <__assert_fail@plt+0x25ac>
   13a9c:	cmp	r8, ip
   13aa0:	mov	lr, #0
   13aa4:	movcc	r0, #39	; 0x27
   13aa8:	strbcc	r0, [r5, r8]
   13aac:	add	r0, r8, #1
   13ab0:	add	r8, r8, #2
   13ab4:	cmp	r0, ip
   13ab8:	movcc	r1, #39	; 0x27
   13abc:	strbcc	r1, [r5, r0]
   13ac0:	mov	r1, r9
   13ac4:	mov	r0, r6
   13ac8:	cmp	r8, ip
   13acc:	strbcc	r0, [r5, r8]
   13ad0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ad4:	add	r8, r8, #1
   13ad8:	and	r0, r0, r1
   13adc:	str	r0, [fp, #-48]	; 0xffffffd0
   13ae0:	mov	r3, sl
   13ae4:	add	r7, r7, #1
   13ae8:	b	12fd8 <__assert_fail@plt+0x1ac4>
   13aec:	mov	r9, #0
   13af0:	b	13b34 <__assert_fail@plt+0x2620>
   13af4:	mov	r9, #0
   13af8:	cmp	r2, r4
   13afc:	bls	13b34 <__assert_fail@plt+0x2620>
   13b00:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13b04:	ldr	r1, [sp, #24]
   13b08:	add	r0, r4, r7
   13b0c:	mov	r3, r1
   13b10:	ldrb	r1, [r0, r1]
   13b14:	cmp	r1, #0
   13b18:	beq	13b40 <__assert_fail@plt+0x262c>
   13b1c:	add	r3, r3, #1
   13b20:	add	r1, r7, r3
   13b24:	cmp	r1, r2
   13b28:	mov	r1, r3
   13b2c:	bcc	13b0c <__assert_fail@plt+0x25f8>
   13b30:	b	13638 <__assert_fail@plt+0x2124>
   13b34:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13b38:	ldr	r1, [sp, #24]
   13b3c:	b	13638 <__assert_fail@plt+0x2124>
   13b40:	mov	r1, r3
   13b44:	b	13638 <__assert_fail@plt+0x2124>
   13b48:	mov	r9, #0
   13b4c:	mov	r4, r1
   13b50:	b	132f4 <__assert_fail@plt+0x1de0>
   13b54:	mov	sl, r7
   13b58:	b	13b60 <__assert_fail@plt+0x264c>
   13b5c:	mvn	sl, #0
   13b60:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13b64:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b68:	eor	r0, r1, #2
   13b6c:	orr	r0, r0, r8
   13b70:	clz	r0, r0
   13b74:	lsr	r0, r0, #5
   13b78:	tst	r2, r0
   13b7c:	bne	13c24 <__assert_fail@plt+0x2710>
   13b80:	subs	r0, r1, #2
   13b84:	movwne	r0, #1
   13b88:	orr	r0, r2, r0
   13b8c:	tst	r0, #1
   13b90:	ldreq	r0, [sp, #60]	; 0x3c
   13b94:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   13b98:	eoreq	r0, r0, #1
   13b9c:	tsteq	r0, #1
   13ba0:	bne	13cb8 <__assert_fail@plt+0x27a4>
   13ba4:	tst	r1, #1
   13ba8:	bne	13c84 <__assert_fail@plt+0x2770>
   13bac:	ldr	r6, [sp, #56]	; 0x38
   13bb0:	mov	r9, #0
   13bb4:	cmp	r6, #0
   13bb8:	beq	13cb0 <__assert_fail@plt+0x279c>
   13bbc:	ldr	r0, [sp, #84]	; 0x54
   13bc0:	mov	r1, #0
   13bc4:	mov	r7, #2
   13bc8:	cmp	ip, #0
   13bcc:	str	r1, [fp, #-48]	; 0xffffffd0
   13bd0:	mov	r1, #0
   13bd4:	str	r1, [fp, #-76]	; 0xffffffb4
   13bd8:	beq	12d40 <__assert_fail@plt+0x182c>
   13bdc:	b	13cb8 <__assert_fail@plt+0x27a4>
   13be0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13be4:	ldr	r1, [fp, #12]
   13be8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13bec:	mov	r5, r3
   13bf0:	mov	ip, r6
   13bf4:	mov	r3, sl
   13bf8:	b	13c48 <__assert_fail@plt+0x2734>
   13bfc:	tst	r4, #1
   13c00:	ldr	r5, [fp, #-84]	; 0xffffffac
   13c04:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13c08:	ldr	r1, [fp, #12]
   13c0c:	ldr	r3, [sp, #36]	; 0x24
   13c10:	mov	r0, #2
   13c14:	movwne	r0, #4
   13c18:	mov	r2, r0
   13c1c:	b	13c48 <__assert_fail@plt+0x2734>
   13c20:	ldr	ip, [sp, #88]	; 0x58
   13c24:	ldr	r1, [sp, #84]	; 0x54
   13c28:	mov	r0, #2
   13c2c:	tst	r1, #1
   13c30:	movwne	r0, #4
   13c34:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13c38:	ldr	r1, [fp, #12]
   13c3c:	mov	r3, sl
   13c40:	cmp	r2, #2
   13c44:	moveq	r2, r0
   13c48:	mov	r0, #0
   13c4c:	bic	r1, r1, #2
   13c50:	str	r2, [sp]
   13c54:	mov	r2, r4
   13c58:	str	r0, [sp, #8]
   13c5c:	ldr	r0, [sp, #76]	; 0x4c
   13c60:	str	r1, [sp, #4]
   13c64:	mov	r1, ip
   13c68:	str	r0, [sp, #12]
   13c6c:	ldr	r0, [sp, #80]	; 0x50
   13c70:	str	r0, [sp, #16]
   13c74:	mov	r0, r5
   13c78:	bl	12cb4 <__assert_fail@plt+0x17a0>
   13c7c:	mov	r8, r0
   13c80:	b	13d04 <__assert_fail@plt+0x27f0>
   13c84:	mov	r0, #5
   13c88:	ldr	r1, [sp, #56]	; 0x38
   13c8c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13c90:	mov	r3, sl
   13c94:	str	r0, [sp]
   13c98:	ldr	r0, [fp, #12]
   13c9c:	str	r0, [sp, #4]
   13ca0:	ldr	r0, [fp, #16]
   13ca4:	str	r0, [sp, #8]
   13ca8:	ldr	r0, [sp, #76]	; 0x4c
   13cac:	b	13c68 <__assert_fail@plt+0x2754>
   13cb0:	mov	r0, #0
   13cb4:	str	r0, [fp, #-76]	; 0xffffffb4
   13cb8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13cbc:	cmp	r1, #0
   13cc0:	beq	13cf8 <__assert_fail@plt+0x27e4>
   13cc4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13cc8:	tst	r0, #1
   13ccc:	bne	13cf8 <__assert_fail@plt+0x27e4>
   13cd0:	ldrb	r0, [r1]
   13cd4:	cmp	r0, #0
   13cd8:	beq	13cf8 <__assert_fail@plt+0x27e4>
   13cdc:	add	r1, r1, #1
   13ce0:	cmp	r8, ip
   13ce4:	strbcc	r0, [r5, r8]
   13ce8:	add	r8, r8, #1
   13cec:	ldrb	r0, [r1], #1
   13cf0:	cmp	r0, #0
   13cf4:	bne	13ce0 <__assert_fail@plt+0x27cc>
   13cf8:	cmp	r8, ip
   13cfc:	movcc	r0, #0
   13d00:	strbcc	r0, [r5, r8]
   13d04:	mov	r0, r8
   13d08:	sub	sp, fp, #28
   13d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d10:	mov	r0, #4
   13d14:	b	13c34 <__assert_fail@plt+0x2720>
   13d18:	mov	r4, r1
   13d1c:	b	13c24 <__assert_fail@plt+0x2710>
   13d20:	bl	114f0 <abort@plt>
   13d24:	mov	r3, r2
   13d28:	mov	r2, #0
   13d2c:	b	13d30 <__assert_fail@plt+0x281c>
   13d30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d34:	add	fp, sp, #28
   13d38:	sub	sp, sp, #36	; 0x24
   13d3c:	movw	r8, #17816	; 0x4598
   13d40:	cmp	r3, #0
   13d44:	mov	r4, r2
   13d48:	str	r2, [sp, #24]
   13d4c:	mov	r5, r1
   13d50:	mov	r6, r0
   13d54:	str	r0, [sp, #20]
   13d58:	movt	r8, #3
   13d5c:	movne	r8, r3
   13d60:	bl	113f4 <__errno_location@plt>
   13d64:	str	r0, [sp, #28]
   13d68:	ldr	r1, [r8, #40]	; 0x28
   13d6c:	ldr	r2, [r8, #44]	; 0x2c
   13d70:	ldr	r7, [r0]
   13d74:	cmp	r4, #0
   13d78:	add	sl, r8, #8
   13d7c:	mov	r0, #0
   13d80:	ldm	r8, {r3, r9}
   13d84:	orreq	r9, r9, #1
   13d88:	stm	sp, {r3, r9, sl}
   13d8c:	str	r1, [sp, #12]
   13d90:	str	r2, [sp, #16]
   13d94:	mov	r1, #0
   13d98:	mov	r2, r6
   13d9c:	mov	r3, r5
   13da0:	str	r7, [sp, #32]
   13da4:	mov	r7, r5
   13da8:	bl	12cb4 <__assert_fail@plt+0x17a0>
   13dac:	add	r4, r0, #1
   13db0:	mov	r5, r0
   13db4:	mov	r0, r4
   13db8:	bl	213dc <__assert_fail@plt+0xfec8>
   13dbc:	mov	r6, r0
   13dc0:	ldr	r0, [r8]
   13dc4:	ldr	r2, [r8, #44]	; 0x2c
   13dc8:	ldr	r1, [r8, #40]	; 0x28
   13dcc:	mov	r3, r7
   13dd0:	stm	sp, {r0, r9, sl}
   13dd4:	str	r2, [sp, #16]
   13dd8:	ldr	r2, [sp, #20]
   13ddc:	str	r1, [sp, #12]
   13de0:	mov	r0, r6
   13de4:	mov	r1, r4
   13de8:	bl	12cb4 <__assert_fail@plt+0x17a0>
   13dec:	ldr	r0, [sp, #24]
   13df0:	ldr	r1, [sp, #32]
   13df4:	ldr	r2, [sp, #28]
   13df8:	cmp	r0, #0
   13dfc:	str	r1, [r2]
   13e00:	strne	r5, [r0]
   13e04:	mov	r0, r6
   13e08:	sub	sp, fp, #28
   13e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13e14:	add	fp, sp, #24
   13e18:	movw	r5, #16756	; 0x4174
   13e1c:	movw	r8, #16752	; 0x4170
   13e20:	movt	r5, #3
   13e24:	movt	r8, #3
   13e28:	ldr	r0, [r5]
   13e2c:	ldr	r4, [r8]
   13e30:	cmp	r0, #2
   13e34:	blt	13e60 <__assert_fail@plt+0x294c>
   13e38:	add	r7, r4, #12
   13e3c:	mov	r6, #0
   13e40:	ldr	r0, [r7, r6, lsl #3]
   13e44:	bl	22190 <__assert_fail@plt+0x10c7c>
   13e48:	ldr	r1, [r5]
   13e4c:	add	r2, r6, #2
   13e50:	add	r0, r6, #1
   13e54:	mov	r6, r0
   13e58:	cmp	r2, r1
   13e5c:	blt	13e40 <__assert_fail@plt+0x292c>
   13e60:	ldr	r0, [r4, #4]
   13e64:	movw	r9, #17864	; 0x45c8
   13e68:	movw	r7, #16760	; 0x4178
   13e6c:	movt	r9, #3
   13e70:	movt	r7, #3
   13e74:	cmp	r0, r9
   13e78:	beq	13e88 <__assert_fail@plt+0x2974>
   13e7c:	bl	22190 <__assert_fail@plt+0x10c7c>
   13e80:	mov	r0, #256	; 0x100
   13e84:	stm	r7, {r0, r9}
   13e88:	cmp	r4, r7
   13e8c:	beq	13e9c <__assert_fail@plt+0x2988>
   13e90:	mov	r0, r4
   13e94:	bl	22190 <__assert_fail@plt+0x10c7c>
   13e98:	str	r7, [r8]
   13e9c:	mov	r0, #1
   13ea0:	str	r0, [r5]
   13ea4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ea8:	movw	r3, #17816	; 0x4598
   13eac:	mvn	r2, #0
   13eb0:	movt	r3, #3
   13eb4:	b	13eb8 <__assert_fail@plt+0x29a4>
   13eb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ebc:	add	fp, sp, #28
   13ec0:	sub	sp, sp, #44	; 0x2c
   13ec4:	mov	r7, r3
   13ec8:	str	r2, [sp, #36]	; 0x24
   13ecc:	str	r1, [sp, #32]
   13ed0:	mov	r5, r0
   13ed4:	bl	113f4 <__errno_location@plt>
   13ed8:	cmp	r5, #0
   13edc:	bmi	1404c <__assert_fail@plt+0x2b38>
   13ee0:	cmn	r5, #-2147483647	; 0x80000001
   13ee4:	beq	1404c <__assert_fail@plt+0x2b38>
   13ee8:	movw	r8, #16756	; 0x4174
   13eec:	movw	r4, #16752	; 0x4170
   13ef0:	str	r0, [sp, #28]
   13ef4:	ldr	r0, [r0]
   13ef8:	movt	r8, #3
   13efc:	movt	r4, #3
   13f00:	ldr	r1, [r8]
   13f04:	ldr	r6, [r4]
   13f08:	str	r0, [sp, #24]
   13f0c:	cmp	r1, r5
   13f10:	ble	13f1c <__assert_fail@plt+0x2a08>
   13f14:	mov	sl, r6
   13f18:	b	13f88 <__assert_fail@plt+0x2a74>
   13f1c:	movw	r9, #16760	; 0x4178
   13f20:	mov	r0, #8
   13f24:	str	r1, [fp, #-32]	; 0xffffffe0
   13f28:	sub	r1, r5, r1
   13f2c:	mvn	r3, #-2147483648	; 0x80000000
   13f30:	movt	r9, #3
   13f34:	str	r0, [sp]
   13f38:	add	r2, r1, #1
   13f3c:	sub	r1, fp, #32
   13f40:	subs	r0, r6, r9
   13f44:	movne	r0, r6
   13f48:	bl	2150c <__assert_fail@plt+0xfff8>
   13f4c:	mov	sl, r0
   13f50:	cmp	r6, r9
   13f54:	str	r0, [r4]
   13f58:	bne	13f64 <__assert_fail@plt+0x2a50>
   13f5c:	ldrd	r0, [r9]
   13f60:	stm	sl, {r0, r1}
   13f64:	ldr	r1, [r8]
   13f68:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f6c:	add	r0, sl, r1, lsl #3
   13f70:	sub	r1, r2, r1
   13f74:	lsl	r2, r1, #3
   13f78:	mov	r1, #0
   13f7c:	bl	11418 <memset@plt>
   13f80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13f84:	str	r0, [r8]
   13f88:	mov	r9, sl
   13f8c:	ldm	r7, {r0, r1}
   13f90:	orr	r8, r1, #1
   13f94:	add	r1, r7, #8
   13f98:	ldr	r2, [r7, #40]	; 0x28
   13f9c:	ldr	r3, [r7, #44]	; 0x2c
   13fa0:	ldr	r6, [r9, r5, lsl #3]!
   13fa4:	str	r1, [sp, #20]
   13fa8:	ldr	r4, [r9, #4]!
   13fac:	stm	sp, {r0, r8}
   13fb0:	add	r0, sp, #8
   13fb4:	stm	r0, {r1, r2, r3}
   13fb8:	ldr	r2, [sp, #32]
   13fbc:	ldr	r3, [sp, #36]	; 0x24
   13fc0:	mov	r1, r6
   13fc4:	mov	r0, r4
   13fc8:	bl	12cb4 <__assert_fail@plt+0x17a0>
   13fcc:	cmp	r6, r0
   13fd0:	bhi	14034 <__assert_fail@plt+0x2b20>
   13fd4:	add	r6, r0, #1
   13fd8:	movw	r0, #17864	; 0x45c8
   13fdc:	movt	r0, #3
   13fe0:	str	r6, [sl, r5, lsl #3]
   13fe4:	cmp	r4, r0
   13fe8:	beq	13ff4 <__assert_fail@plt+0x2ae0>
   13fec:	mov	r0, r4
   13ff0:	bl	22190 <__assert_fail@plt+0x10c7c>
   13ff4:	mov	r0, r6
   13ff8:	bl	213dc <__assert_fail@plt+0xfec8>
   13ffc:	str	r0, [r9]
   14000:	mov	r4, r0
   14004:	add	r3, sp, #8
   14008:	ldr	r0, [r7]
   1400c:	ldr	r1, [r7, #40]	; 0x28
   14010:	ldr	r2, [r7, #44]	; 0x2c
   14014:	stm	sp, {r0, r8}
   14018:	ldr	r0, [sp, #20]
   1401c:	stm	r3, {r0, r1, r2}
   14020:	ldr	r2, [sp, #32]
   14024:	ldr	r3, [sp, #36]	; 0x24
   14028:	mov	r0, r4
   1402c:	mov	r1, r6
   14030:	bl	12cb4 <__assert_fail@plt+0x17a0>
   14034:	ldr	r0, [sp, #28]
   14038:	ldr	r1, [sp, #24]
   1403c:	str	r1, [r0]
   14040:	mov	r0, r4
   14044:	sub	sp, fp, #28
   14048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1404c:	bl	114f0 <abort@plt>
   14050:	movw	r3, #17816	; 0x4598
   14054:	movt	r3, #3
   14058:	b	13eb8 <__assert_fail@plt+0x29a4>
   1405c:	movw	r3, #17816	; 0x4598
   14060:	mov	r1, r0
   14064:	mov	r0, #0
   14068:	mvn	r2, #0
   1406c:	movt	r3, #3
   14070:	b	13eb8 <__assert_fail@plt+0x29a4>
   14074:	movw	r3, #17816	; 0x4598
   14078:	mov	r2, r1
   1407c:	mov	r1, r0
   14080:	mov	r0, #0
   14084:	movt	r3, #3
   14088:	b	13eb8 <__assert_fail@plt+0x29a4>
   1408c:	push	{fp, lr}
   14090:	mov	fp, sp
   14094:	sub	sp, sp, #48	; 0x30
   14098:	vmov.i32	q8, #0	; 0x00000000
   1409c:	mov	ip, #32
   140a0:	mov	r3, sp
   140a4:	mov	lr, r2
   140a8:	cmp	r1, #10
   140ac:	add	r2, r3, #16
   140b0:	vst1.64	{d16-d17}, [r3], ip
   140b4:	vst1.64	{d16-d17}, [r2]
   140b8:	vst1.64	{d16-d17}, [r3]
   140bc:	beq	140dc <__assert_fail@plt+0x2bc8>
   140c0:	str	r1, [sp]
   140c4:	mov	r3, sp
   140c8:	mov	r1, lr
   140cc:	mvn	r2, #0
   140d0:	bl	13eb8 <__assert_fail@plt+0x29a4>
   140d4:	mov	sp, fp
   140d8:	pop	{fp, pc}
   140dc:	bl	114f0 <abort@plt>
   140e0:	push	{r4, sl, fp, lr}
   140e4:	add	fp, sp, #8
   140e8:	sub	sp, sp, #48	; 0x30
   140ec:	vmov.i32	q8, #0	; 0x00000000
   140f0:	mov	ip, r3
   140f4:	mov	r3, sp
   140f8:	mov	lr, #32
   140fc:	cmp	r1, #10
   14100:	add	r4, r3, #16
   14104:	vst1.64	{d16-d17}, [r3], lr
   14108:	vst1.64	{d16-d17}, [r4]
   1410c:	vst1.64	{d16-d17}, [r3]
   14110:	beq	14130 <__assert_fail@plt+0x2c1c>
   14114:	str	r1, [sp]
   14118:	mov	r1, r2
   1411c:	mov	r3, sp
   14120:	mov	r2, ip
   14124:	bl	13eb8 <__assert_fail@plt+0x29a4>
   14128:	sub	sp, fp, #8
   1412c:	pop	{r4, sl, fp, pc}
   14130:	bl	114f0 <abort@plt>
   14134:	mov	r2, r1
   14138:	mov	r1, r0
   1413c:	mov	r0, #0
   14140:	b	1408c <__assert_fail@plt+0x2b78>
   14144:	mov	r3, r2
   14148:	mov	r2, r1
   1414c:	mov	r1, r0
   14150:	mov	r0, #0
   14154:	b	140e0 <__assert_fail@plt+0x2bcc>
   14158:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1415c:	add	fp, sp, #24
   14160:	sub	sp, sp, #48	; 0x30
   14164:	movw	r8, #17816	; 0x4598
   14168:	mov	lr, r0
   1416c:	mov	r3, sp
   14170:	mov	ip, r1
   14174:	movt	r8, #3
   14178:	mov	r1, r3
   1417c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   14180:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14184:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14188:	stm	r1, {r0, r4, r5, r6, r7, r9}
   1418c:	ubfx	r0, r2, #5, #3
   14190:	and	r2, r2, #31
   14194:	mov	r4, #1
   14198:	add	r0, r3, r0, lsl #2
   1419c:	ldr	r1, [r0, #8]
   141a0:	bic	r4, r4, r1, lsr r2
   141a4:	eor	r1, r1, r4, lsl r2
   141a8:	mov	r2, ip
   141ac:	str	r1, [r0, #8]
   141b0:	mov	r0, #0
   141b4:	mov	r1, lr
   141b8:	bl	13eb8 <__assert_fail@plt+0x29a4>
   141bc:	sub	sp, fp, #24
   141c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   141c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   141c8:	add	fp, sp, #24
   141cc:	sub	sp, sp, #48	; 0x30
   141d0:	movw	lr, #17816	; 0x4598
   141d4:	mov	ip, r0
   141d8:	mov	r3, sp
   141dc:	movt	lr, #3
   141e0:	mov	r2, r3
   141e4:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   141e8:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   141ec:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   141f0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   141f4:	ubfx	r0, r1, #5, #3
   141f8:	and	r1, r1, #31
   141fc:	mov	r7, #1
   14200:	add	r0, r3, r0, lsl #2
   14204:	ldr	r2, [r0, #8]
   14208:	bic	r7, r7, r2, lsr r1
   1420c:	eor	r1, r2, r7, lsl r1
   14210:	mvn	r2, #0
   14214:	str	r1, [r0, #8]
   14218:	mov	r0, #0
   1421c:	mov	r1, ip
   14220:	bl	13eb8 <__assert_fail@plt+0x29a4>
   14224:	sub	sp, fp, #24
   14228:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1422c:	push	{r4, r5, r6, r7, fp, lr}
   14230:	add	fp, sp, #16
   14234:	sub	sp, sp, #48	; 0x30
   14238:	movw	lr, #17816	; 0x4598
   1423c:	mov	ip, r0
   14240:	mov	r3, sp
   14244:	movt	lr, #3
   14248:	mov	r2, r3
   1424c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14250:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14254:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14258:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1425c:	mov	r1, ip
   14260:	mvn	r2, #0
   14264:	ldr	r0, [sp, #12]
   14268:	orr	r0, r0, #67108864	; 0x4000000
   1426c:	str	r0, [sp, #12]
   14270:	mov	r0, #0
   14274:	bl	13eb8 <__assert_fail@plt+0x29a4>
   14278:	sub	sp, fp, #16
   1427c:	pop	{r4, r5, r6, r7, fp, pc}
   14280:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14284:	add	fp, sp, #24
   14288:	sub	sp, sp, #48	; 0x30
   1428c:	movw	r8, #17816	; 0x4598
   14290:	mov	ip, r1
   14294:	mov	lr, r0
   14298:	mov	r3, sp
   1429c:	movt	r8, #3
   142a0:	mov	r2, r3
   142a4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   142a8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   142ac:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   142b0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   142b4:	mov	r1, lr
   142b8:	mov	r2, ip
   142bc:	ldr	r0, [sp, #12]
   142c0:	orr	r0, r0, #67108864	; 0x4000000
   142c4:	str	r0, [sp, #12]
   142c8:	mov	r0, #0
   142cc:	bl	13eb8 <__assert_fail@plt+0x29a4>
   142d0:	sub	sp, fp, #24
   142d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142dc:	add	fp, sp, #24
   142e0:	sub	sp, sp, #96	; 0x60
   142e4:	vmov.i32	q8, #0	; 0x00000000
   142e8:	mov	lr, sp
   142ec:	mov	ip, r2
   142f0:	cmp	r1, #10
   142f4:	add	r3, lr, #16
   142f8:	mov	r2, lr
   142fc:	vst1.64	{d16-d17}, [r3]
   14300:	mov	r3, #28
   14304:	vst1.64	{d16-d17}, [r2], r3
   14308:	vst1.32	{d16-d17}, [r2]
   1430c:	beq	1434c <__assert_fail@plt+0x2e38>
   14310:	str	r1, [sp, #48]	; 0x30
   14314:	add	r3, sp, #48	; 0x30
   14318:	ldm	lr!, {r2, r4, r5, r6, r7}
   1431c:	add	r1, r3, #4
   14320:	stmia	r1!, {r2, r4, r5, r6, r7}
   14324:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   14328:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1432c:	mvn	r2, #0
   14330:	ldr	r1, [sp, #60]	; 0x3c
   14334:	orr	r1, r1, #67108864	; 0x4000000
   14338:	str	r1, [sp, #60]	; 0x3c
   1433c:	mov	r1, ip
   14340:	bl	13eb8 <__assert_fail@plt+0x29a4>
   14344:	sub	sp, fp, #24
   14348:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1434c:	bl	114f0 <abort@plt>
   14350:	push	{fp, lr}
   14354:	mov	fp, sp
   14358:	sub	sp, sp, #8
   1435c:	mvn	ip, #0
   14360:	str	ip, [sp]
   14364:	bl	14370 <__assert_fail@plt+0x2e5c>
   14368:	mov	sp, fp
   1436c:	pop	{fp, pc}
   14370:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14374:	add	fp, sp, #24
   14378:	sub	sp, sp, #48	; 0x30
   1437c:	movw	ip, #17816	; 0x4598
   14380:	mov	lr, r3
   14384:	mov	r3, sp
   14388:	cmp	r1, #0
   1438c:	movt	ip, #3
   14390:	cmpne	r2, #0
   14394:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14398:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1439c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   143a0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   143a4:	mov	r3, #10
   143a8:	str	r3, [sp]
   143ac:	bne	143b4 <__assert_fail@plt+0x2ea0>
   143b0:	bl	114f0 <abort@plt>
   143b4:	ldr	ip, [fp, #8]
   143b8:	str	r2, [sp, #44]	; 0x2c
   143bc:	str	r1, [sp, #40]	; 0x28
   143c0:	mov	r3, sp
   143c4:	mov	r1, lr
   143c8:	mov	r2, ip
   143cc:	bl	13eb8 <__assert_fail@plt+0x29a4>
   143d0:	sub	sp, fp, #24
   143d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   143d8:	push	{fp, lr}
   143dc:	mov	fp, sp
   143e0:	sub	sp, sp, #8
   143e4:	mov	r3, r2
   143e8:	mov	r2, r1
   143ec:	mov	r1, r0
   143f0:	mvn	r0, #0
   143f4:	str	r0, [sp]
   143f8:	mov	r0, #0
   143fc:	bl	14370 <__assert_fail@plt+0x2e5c>
   14400:	mov	sp, fp
   14404:	pop	{fp, pc}
   14408:	push	{fp, lr}
   1440c:	mov	fp, sp
   14410:	sub	sp, sp, #8
   14414:	mov	ip, r2
   14418:	mov	r2, r1
   1441c:	mov	r1, r0
   14420:	str	r3, [sp]
   14424:	mov	r0, #0
   14428:	mov	r3, ip
   1442c:	bl	14370 <__assert_fail@plt+0x2e5c>
   14430:	mov	sp, fp
   14434:	pop	{fp, pc}
   14438:	movw	r3, #16768	; 0x4180
   1443c:	movt	r3, #3
   14440:	b	13eb8 <__assert_fail@plt+0x29a4>
   14444:	movw	r3, #16768	; 0x4180
   14448:	mov	r2, r1
   1444c:	mov	r1, r0
   14450:	mov	r0, #0
   14454:	movt	r3, #3
   14458:	b	13eb8 <__assert_fail@plt+0x29a4>
   1445c:	movw	r3, #16768	; 0x4180
   14460:	mvn	r2, #0
   14464:	movt	r3, #3
   14468:	b	13eb8 <__assert_fail@plt+0x29a4>
   1446c:	movw	r3, #16768	; 0x4180
   14470:	mov	r1, r0
   14474:	mov	r0, #0
   14478:	mvn	r2, #0
   1447c:	movt	r3, #3
   14480:	b	13eb8 <__assert_fail@plt+0x29a4>
   14484:	push	{r4, r5, fp, lr}
   14488:	add	fp, sp, #8
   1448c:	mov	r5, r0
   14490:	mov	r4, r1
   14494:	mov	r0, #0
   14498:	mov	r2, #5
   1449c:	mov	r1, r5
   144a0:	bl	11304 <dcgettext@plt>
   144a4:	cmp	r0, r5
   144a8:	popne	{r4, r5, fp, pc}
   144ac:	bl	221b8 <__assert_fail@plt+0x10ca4>
   144b0:	ldrb	r1, [r0]
   144b4:	and	r1, r1, #223	; 0xdf
   144b8:	cmp	r1, #71	; 0x47
   144bc:	beq	14524 <__assert_fail@plt+0x3010>
   144c0:	cmp	r1, #85	; 0x55
   144c4:	bne	1457c <__assert_fail@plt+0x3068>
   144c8:	ldrb	r1, [r0, #1]
   144cc:	and	r1, r1, #223	; 0xdf
   144d0:	cmp	r1, #84	; 0x54
   144d4:	bne	1457c <__assert_fail@plt+0x3068>
   144d8:	ldrb	r1, [r0, #2]
   144dc:	and	r1, r1, #223	; 0xdf
   144e0:	cmp	r1, #70	; 0x46
   144e4:	bne	1457c <__assert_fail@plt+0x3068>
   144e8:	ldrb	r1, [r0, #3]
   144ec:	cmp	r1, #45	; 0x2d
   144f0:	bne	1457c <__assert_fail@plt+0x3068>
   144f4:	ldrb	r1, [r0, #4]
   144f8:	cmp	r1, #56	; 0x38
   144fc:	bne	1457c <__assert_fail@plt+0x3068>
   14500:	ldrb	r0, [r0, #5]
   14504:	cmp	r0, #0
   14508:	bne	1457c <__assert_fail@plt+0x3068>
   1450c:	ldrb	r1, [r5]
   14510:	movw	r2, #13016	; 0x32d8
   14514:	movw	r0, #13020	; 0x32dc
   14518:	movt	r2, #2
   1451c:	movt	r0, #2
   14520:	b	145ac <__assert_fail@plt+0x3098>
   14524:	ldrb	r1, [r0, #1]
   14528:	and	r1, r1, #223	; 0xdf
   1452c:	cmp	r1, #66	; 0x42
   14530:	bne	1457c <__assert_fail@plt+0x3068>
   14534:	ldrb	r1, [r0, #2]
   14538:	cmp	r1, #49	; 0x31
   1453c:	bne	1457c <__assert_fail@plt+0x3068>
   14540:	ldrb	r1, [r0, #3]
   14544:	cmp	r1, #56	; 0x38
   14548:	bne	1457c <__assert_fail@plt+0x3068>
   1454c:	ldrb	r1, [r0, #4]
   14550:	cmp	r1, #48	; 0x30
   14554:	bne	1457c <__assert_fail@plt+0x3068>
   14558:	ldrb	r1, [r0, #5]
   1455c:	cmp	r1, #51	; 0x33
   14560:	bne	1457c <__assert_fail@plt+0x3068>
   14564:	ldrb	r1, [r0, #6]
   14568:	cmp	r1, #48	; 0x30
   1456c:	bne	1457c <__assert_fail@plt+0x3068>
   14570:	ldrb	r0, [r0, #7]
   14574:	cmp	r0, #0
   14578:	beq	14598 <__assert_fail@plt+0x3084>
   1457c:	movw	r1, #13010	; 0x32d2
   14580:	movw	r0, #13014	; 0x32d6
   14584:	cmp	r4, #9
   14588:	movt	r1, #2
   1458c:	movt	r0, #2
   14590:	moveq	r0, r1
   14594:	pop	{r4, r5, fp, pc}
   14598:	ldrb	r1, [r5]
   1459c:	movw	r2, #13024	; 0x32e0
   145a0:	movw	r0, #13028	; 0x32e4
   145a4:	movt	r2, #2
   145a8:	movt	r0, #2
   145ac:	cmp	r1, #96	; 0x60
   145b0:	moveq	r0, r2
   145b4:	pop	{r4, r5, fp, pc}
   145b8:	push	{fp, lr}
   145bc:	mov	fp, sp
   145c0:	mov	lr, r0
   145c4:	movw	r0, #18120	; 0x46c8
   145c8:	mov	ip, r1
   145cc:	ldrb	r1, [r2, #28]
   145d0:	movt	r0, #3
   145d4:	ldr	r3, [r0]
   145d8:	mov	r0, #16
   145dc:	and	r1, r1, #111	; 0x6f
   145e0:	and	r0, r0, r3, lsr #21
   145e4:	orr	r0, r1, r0
   145e8:	mov	r1, lr
   145ec:	orr	r0, r0, #128	; 0x80
   145f0:	strb	r0, [r2, #28]
   145f4:	mov	r0, r2
   145f8:	mov	r2, ip
   145fc:	bl	14638 <__assert_fail@plt+0x3124>
   14600:	cmp	r0, #0
   14604:	beq	14630 <__assert_fail@plt+0x311c>
   14608:	movw	r1, #13504	; 0x34c0
   1460c:	mov	r2, #5
   14610:	movt	r1, #2
   14614:	ldr	r0, [r1, r0, lsl #2]
   14618:	movw	r1, #13120	; 0x3340
   1461c:	movt	r1, #2
   14620:	add	r1, r1, r0
   14624:	mov	r0, #0
   14628:	pop	{fp, lr}
   1462c:	b	11304 <dcgettext@plt>
   14630:	mov	r0, #0
   14634:	pop	{fp, pc}
   14638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1463c:	add	fp, sp, #28
   14640:	sub	sp, sp, #140	; 0x8c
   14644:	str	r1, [sp, #24]
   14648:	mov	r1, #0
   1464c:	str	r0, [sp, #28]
   14650:	mov	sl, r2
   14654:	str	r3, [sp, #20]
   14658:	str	r1, [fp, #-52]	; 0xffffffcc
   1465c:	str	r1, [r0, #24]
   14660:	str	r1, [r0, #8]
   14664:	str	r3, [r0, #12]
   14668:	ldrb	r1, [r0, #28]
   1466c:	and	r1, r1, #144	; 0x90
   14670:	strb	r1, [r0, #28]
   14674:	ldr	r9, [r0]
   14678:	ldr	r0, [r0, #4]
   1467c:	cmp	r0, #159	; 0x9f
   14680:	bls	15228 <__assert_fail@plt+0x3d14>
   14684:	ldr	r1, [sp, #28]
   14688:	mov	r0, #160	; 0xa0
   1468c:	mov	r2, #160	; 0xa0
   14690:	str	r0, [r1, #8]
   14694:	mov	r0, r9
   14698:	mov	r1, #0
   1469c:	bl	11418 <memset@plt>
   146a0:	mov	r0, #31
   146a4:	str	r0, [r9, #64]	; 0x40
   146a8:	movw	r0, #43689	; 0xaaa9
   146ac:	movt	r0, #2730	; 0xaaa
   146b0:	cmp	sl, r0
   146b4:	bhi	1482c <__assert_fail@plt+0x3318>
   146b8:	add	r0, sl, #1
   146bc:	str	r0, [r9, #4]
   146c0:	str	r0, [sp, #12]
   146c4:	lsl	r0, r0, #3
   146c8:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   146cc:	str	r0, [r9]
   146d0:	mov	r0, #1
   146d4:	mov	r4, r0
   146d8:	lsl	r0, r0, #1
   146dc:	cmp	r4, sl
   146e0:	bls	146d4 <__assert_fail@plt+0x31c0>
   146e4:	mov	r0, #12
   146e8:	mov	r1, r4
   146ec:	bl	21f80 <__assert_fail@plt+0x10a6c>
   146f0:	sub	r1, r4, #1
   146f4:	str	r1, [r9, #68]	; 0x44
   146f8:	str	r0, [r9, #32]
   146fc:	bl	11340 <__ctype_get_mb_cur_max@plt>
   14700:	str	r0, [r9, #92]	; 0x5c
   14704:	mov	r0, #14
   14708:	bl	1149c <nl_langinfo@plt>
   1470c:	ldrb	r1, [r0]
   14710:	orr	r1, r1, #32
   14714:	cmp	r1, #117	; 0x75
   14718:	bne	14768 <__assert_fail@plt+0x3254>
   1471c:	ldrb	r1, [r0, #1]
   14720:	orr	r1, r1, #32
   14724:	cmp	r1, #116	; 0x74
   14728:	bne	14768 <__assert_fail@plt+0x3254>
   1472c:	ldrb	r1, [r0, #2]
   14730:	orr	r1, r1, #32
   14734:	cmp	r1, #102	; 0x66
   14738:	bne	14768 <__assert_fail@plt+0x3254>
   1473c:	ldrb	r1, [r0, #3]!
   14740:	cmp	r1, #45	; 0x2d
   14744:	movw	r1, #13620	; 0x3534
   14748:	movt	r1, #2
   1474c:	addeq	r0, r0, #1
   14750:	bl	11244 <strcmp@plt>
   14754:	cmp	r0, #0
   14758:	bne	14768 <__assert_fail@plt+0x3254>
   1475c:	ldrb	r0, [r9, #88]	; 0x58
   14760:	orr	r0, r0, #4
   14764:	strb	r0, [r9, #88]	; 0x58
   14768:	ldrb	r0, [r9, #88]	; 0x58
   1476c:	and	r1, r0, #247	; 0xf7
   14770:	strb	r1, [r9, #88]	; 0x58
   14774:	ldr	r1, [r9, #92]	; 0x5c
   14778:	cmp	r1, #2
   1477c:	blt	14818 <__assert_fail@plt+0x3304>
   14780:	tst	r0, #4
   14784:	bne	1480c <__assert_fail@plt+0x32f8>
   14788:	mov	r0, #32
   1478c:	mov	r1, #1
   14790:	mov	r8, #1
   14794:	bl	21f80 <__assert_fail@plt+0x10a6c>
   14798:	cmp	r0, #0
   1479c:	str	r0, [r9, #60]	; 0x3c
   147a0:	beq	1482c <__assert_fail@plt+0x3318>
   147a4:	mov	r7, #0
   147a8:	mov	r5, #0
   147ac:	mov	r6, #0
   147b0:	add	r4, r7, r6
   147b4:	mov	r0, r4
   147b8:	bl	11424 <btowc@plt>
   147bc:	cmn	r0, #1
   147c0:	beq	147d4 <__assert_fail@plt+0x32c0>
   147c4:	ldr	r1, [r9, #60]	; 0x3c
   147c8:	ldr	r2, [r1, r5, lsl #2]
   147cc:	orr	r2, r2, r8, lsl r6
   147d0:	str	r2, [r1, r5, lsl #2]
   147d4:	cmp	r4, #127	; 0x7f
   147d8:	bhi	147ec <__assert_fail@plt+0x32d8>
   147dc:	cmp	r4, r0
   147e0:	ldrbne	r0, [r9, #88]	; 0x58
   147e4:	orrne	r0, r0, #8
   147e8:	strbne	r0, [r9, #88]	; 0x58
   147ec:	add	r6, r6, #1
   147f0:	cmp	r6, #32
   147f4:	bne	147b0 <__assert_fail@plt+0x329c>
   147f8:	add	r5, r5, #1
   147fc:	add	r7, r7, r6
   14800:	cmp	r5, #8
   14804:	bne	147ac <__assert_fail@plt+0x3298>
   14808:	b	14818 <__assert_fail@plt+0x3304>
   1480c:	movw	r0, #13572	; 0x3504
   14810:	movt	r0, #2
   14814:	str	r0, [r9, #60]	; 0x3c
   14818:	ldr	r0, [r9]
   1481c:	cmp	r0, #0
   14820:	ldrne	r0, [r9, #32]
   14824:	cmpne	r0, #0
   14828:	bne	14850 <__assert_fail@plt+0x333c>
   1482c:	mov	r4, #12
   14830:	mov	r0, r9
   14834:	str	r4, [fp, #-52]	; 0xffffffcc
   14838:	bl	15898 <__assert_fail@plt+0x4384>
   1483c:	ldr	r0, [sp, #28]
   14840:	mov	r1, #0
   14844:	str	r1, [r0]
   14848:	str	r1, [r0, #4]
   1484c:	b	151b0 <__assert_fail@plt+0x3c9c>
   14850:	movw	r0, #0
   14854:	movw	r1, #0
   14858:	mov	r4, #0
   1485c:	movt	r0, #0
   14860:	movt	r1, #0
   14864:	str	r4, [fp, #-52]	; 0xffffffcc
   14868:	orrs	r0, r1, r0
   1486c:	str	r0, [sp, #8]
   14870:	beq	14888 <__assert_fail@plt+0x3374>
   14874:	add	r0, r9, #136	; 0x88
   14878:	mov	r1, #0
   1487c:	bl	112bc <pthread_mutex_init@plt>
   14880:	cmp	r0, #0
   14884:	bne	1482c <__assert_fail@plt+0x3318>
   14888:	ldr	r0, [sp, #28]
   1488c:	add	r5, sp, #32
   14890:	mov	r1, #0
   14894:	mov	r2, #76	; 0x4c
   14898:	ldr	r8, [r0, #20]
   1489c:	add	r0, r5, #4
   148a0:	bl	11418 <memset@plt>
   148a4:	ldr	r1, [sp, #20]
   148a8:	vdup.32	q8, sl
   148ac:	add	r3, r5, #44	; 0x2c
   148b0:	ubfx	r0, r1, #22, #1
   148b4:	strb	r0, [sp, #104]	; 0x68
   148b8:	ldr	r0, [sp, #24]
   148bc:	str	r8, [sp, #96]	; 0x60
   148c0:	str	r0, [sp, #32]
   148c4:	and	r0, r1, #4194304	; 0x400000
   148c8:	orrs	r1, r0, r8
   148cc:	str	r0, [sp, #16]
   148d0:	movwne	r1, #1
   148d4:	cmp	sl, #1
   148d8:	strb	r1, [sp, #107]	; 0x6b
   148dc:	ldr	r0, [r9, #92]	; 0x5c
   148e0:	str	r0, [sp, #112]	; 0x70
   148e4:	ldrb	r2, [r9, #88]	; 0x58
   148e8:	vst1.32	{d16-d17}, [r3]
   148ec:	ubfx	r3, r2, #2, #1
   148f0:	strb	r3, [sp, #105]	; 0x69
   148f4:	ubfx	r2, r2, #3, #1
   148f8:	strb	r2, [sp, #106]	; 0x6a
   148fc:	blt	14920 <__assert_fail@plt+0x340c>
   14900:	ldr	r1, [sp, #12]
   14904:	add	r0, sp, #32
   14908:	bl	179d0 <__assert_fail@plt+0x64bc>
   1490c:	cmp	r0, #0
   14910:	bne	14990 <__assert_fail@plt+0x347c>
   14914:	ldr	r0, [r9, #92]	; 0x5c
   14918:	ldr	r4, [sp, #36]	; 0x24
   1491c:	ldrb	r1, [sp, #107]	; 0x6b
   14920:	cmp	r1, #0
   14924:	ldr	r1, [sp, #24]
   14928:	moveq	r4, r1
   1492c:	ldr	r1, [sp, #16]
   14930:	str	r4, [sp, #36]	; 0x24
   14934:	cmp	r1, #0
   14938:	beq	14998 <__assert_fail@plt+0x3484>
   1493c:	cmp	r0, #2
   14940:	blt	149ac <__assert_fail@plt+0x3498>
   14944:	add	r4, sp, #32
   14948:	mov	r0, r4
   1494c:	bl	17a70 <__assert_fail@plt+0x655c>
   14950:	cmp	r0, #0
   14954:	bne	14990 <__assert_fail@plt+0x347c>
   14958:	ldr	r0, [sp, #64]	; 0x40
   1495c:	cmp	r0, sl
   14960:	bge	14a3c <__assert_fail@plt+0x3528>
   14964:	ldr	r1, [r9, #92]	; 0x5c
   14968:	ldr	r2, [sp, #60]	; 0x3c
   1496c:	ldr	r0, [sp, #68]	; 0x44
   14970:	add	r1, r1, r2
   14974:	cmp	r0, r1
   14978:	bgt	14a3c <__assert_fail@plt+0x3528>
   1497c:	lsl	r1, r0, #1
   14980:	mov	r0, r4
   14984:	bl	179d0 <__assert_fail@plt+0x64bc>
   14988:	cmp	r0, #0
   1498c:	beq	14948 <__assert_fail@plt+0x3434>
   14990:	ldr	sl, [sp, #28]
   14994:	b	14b90 <__assert_fail@plt+0x367c>
   14998:	cmp	r0, #2
   1499c:	blt	149b8 <__assert_fail@plt+0x34a4>
   149a0:	add	r0, sp, #32
   149a4:	bl	180ac <__assert_fail@plt+0x6b98>
   149a8:	b	14a3c <__assert_fail@plt+0x3528>
   149ac:	add	r0, sp, #32
   149b0:	bl	18040 <__assert_fail@plt+0x6b2c>
   149b4:	b	14a3c <__assert_fail@plt+0x3528>
   149b8:	ldr	r1, [sp, #68]	; 0x44
   149bc:	cmp	r8, #0
   149c0:	beq	14a34 <__assert_fail@plt+0x3520>
   149c4:	ldr	r2, [sp, #80]	; 0x50
   149c8:	ldr	r0, [sp, #60]	; 0x3c
   149cc:	cmp	r1, r2
   149d0:	movgt	r1, r2
   149d4:	cmp	r0, r1
   149d8:	bge	14a28 <__assert_fail@plt+0x3514>
   149dc:	ldr	r3, [sp, #56]	; 0x38
   149e0:	ldr	r2, [sp, #32]
   149e4:	ldr	r7, [sp, #96]	; 0x60
   149e8:	add	r3, r3, r0
   149ec:	ldrb	r2, [r2, r3]
   149f0:	ldrb	r2, [r7, r2]
   149f4:	strb	r2, [r4, r0]
   149f8:	add	r0, r0, #1
   149fc:	cmp	r0, r1
   14a00:	bge	14a28 <__assert_fail@plt+0x3514>
   14a04:	ldr	r2, [sp, #32]
   14a08:	ldr	r7, [sp, #56]	; 0x38
   14a0c:	ldr	r6, [sp, #96]	; 0x60
   14a10:	ldr	r3, [sp, #36]	; 0x24
   14a14:	add	r2, r2, r7
   14a18:	ldrb	r2, [r2, r0]
   14a1c:	ldrb	r2, [r6, r2]
   14a20:	strb	r2, [r3, r0]
   14a24:	b	149f8 <__assert_fail@plt+0x34e4>
   14a28:	str	r0, [sp, #64]	; 0x40
   14a2c:	str	r0, [sp, #60]	; 0x3c
   14a30:	b	14a3c <__assert_fail@plt+0x3528>
   14a34:	str	r1, [sp, #64]	; 0x40
   14a38:	str	r1, [sp, #60]	; 0x3c
   14a3c:	ldr	sl, [sp, #28]
   14a40:	mov	r5, #0
   14a44:	ldr	r6, [sp, #20]
   14a48:	sub	r8, fp, #48	; 0x30
   14a4c:	add	r7, sp, #32
   14a50:	str	r5, [fp, #-52]	; 0xffffffcc
   14a54:	mov	r0, r8
   14a58:	mov	r1, r7
   14a5c:	str	r5, [sl, #24]
   14a60:	orr	r2, r6, #8388608	; 0x800000
   14a64:	ldr	r4, [sl]
   14a68:	str	r6, [r4, #128]	; 0x80
   14a6c:	bl	1849c <__assert_fail@plt+0x6f88>
   14a70:	ldr	r1, [sp, #72]	; 0x48
   14a74:	mov	r2, r8
   14a78:	mov	r3, r6
   14a7c:	str	r5, [sp]
   14a80:	add	r0, r1, r0
   14a84:	mov	r1, sl
   14a88:	str	r0, [sp, #72]	; 0x48
   14a8c:	sub	r0, fp, #52	; 0x34
   14a90:	str	r0, [sp, #4]
   14a94:	mov	r0, r7
   14a98:	bl	182ec <__assert_fail@plt+0x6dd8>
   14a9c:	mov	r6, r0
   14aa0:	cmp	r0, #0
   14aa4:	bne	14ab4 <__assert_fail@plt+0x35a0>
   14aa8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14aac:	cmp	r0, #0
   14ab0:	bne	1525c <__assert_fail@plt+0x3d48>
   14ab4:	mov	r0, #2
   14ab8:	sub	r3, fp, #40	; 0x28
   14abc:	mov	r1, #0
   14ac0:	mov	r2, #0
   14ac4:	str	r0, [fp, #-36]	; 0xffffffdc
   14ac8:	mov	r0, r4
   14acc:	str	r5, [fp, #-40]	; 0xffffffd8
   14ad0:	bl	1a2bc <__assert_fail@plt+0x8da8>
   14ad4:	mov	r7, r0
   14ad8:	cmp	r6, #0
   14adc:	beq	14b08 <__assert_fail@plt+0x35f4>
   14ae0:	mov	r0, #16
   14ae4:	sub	r3, fp, #40	; 0x28
   14ae8:	mov	r1, r6
   14aec:	mov	r2, r7
   14af0:	str	r0, [fp, #-36]	; 0xffffffdc
   14af4:	mov	r0, #0
   14af8:	str	r0, [fp, #-40]	; 0xffffffd8
   14afc:	mov	r0, r4
   14b00:	bl	1a2bc <__assert_fail@plt+0x8da8>
   14b04:	b	14b0c <__assert_fail@plt+0x35f8>
   14b08:	mov	r0, r7
   14b0c:	cmp	r7, #0
   14b10:	cmpne	r0, #0
   14b14:	beq	15254 <__assert_fail@plt+0x3d40>
   14b18:	str	r0, [r9, #52]	; 0x34
   14b1c:	ldr	r8, [sl]
   14b20:	ldr	r0, [r8, #4]
   14b24:	lsl	r0, r0, #2
   14b28:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   14b2c:	str	r0, [r8, #12]
   14b30:	ldr	r0, [r8, #4]
   14b34:	lsl	r0, r0, #2
   14b38:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   14b3c:	str	r0, [r8, #16]
   14b40:	ldr	r0, [r8, #4]
   14b44:	add	r0, r0, r0, lsl #1
   14b48:	lsl	r0, r0, #2
   14b4c:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   14b50:	str	r0, [r8, #20]
   14b54:	ldr	r0, [r8, #4]
   14b58:	add	r0, r0, r0, lsl #1
   14b5c:	lsl	r0, r0, #2
   14b60:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   14b64:	str	r0, [r8, #24]
   14b68:	ldr	r1, [r8, #12]
   14b6c:	cmp	r1, #0
   14b70:	ldrne	r1, [r8, #16]
   14b74:	cmpne	r1, #0
   14b78:	beq	14b8c <__assert_fail@plt+0x3678>
   14b7c:	cmp	r0, #0
   14b80:	ldrne	r0, [r8, #20]
   14b84:	cmpne	r0, #0
   14b88:	bne	14bd4 <__assert_fail@plt+0x36c0>
   14b8c:	mov	r0, #12
   14b90:	str	r0, [fp, #-52]	; 0xffffffcc
   14b94:	mov	r0, sl
   14b98:	bl	1794c <__assert_fail@plt+0x6438>
   14b9c:	add	r0, sp, #32
   14ba0:	bl	1799c <__assert_fail@plt+0x6488>
   14ba4:	ldr	r0, [sp, #8]
   14ba8:	cmp	r0, #0
   14bac:	beq	14bb8 <__assert_fail@plt+0x36a4>
   14bb0:	add	r0, r9, #136	; 0x88
   14bb4:	bl	1125c <pthread_mutex_destroy@plt>
   14bb8:	mov	r0, r9
   14bbc:	bl	15898 <__assert_fail@plt+0x4384>
   14bc0:	mov	r0, #0
   14bc4:	str	r0, [sl]
   14bc8:	str	r0, [sl, #4]
   14bcc:	ldr	r4, [fp, #-52]	; 0xffffffcc
   14bd0:	b	151b0 <__assert_fail@plt+0x3c9c>
   14bd4:	ldr	r0, [sl, #24]
   14bd8:	lsl	r0, r0, #2
   14bdc:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   14be0:	cmp	r0, #0
   14be4:	str	r0, [r8, #132]	; 0x84
   14be8:	beq	14c6c <__assert_fail@plt+0x3758>
   14bec:	ldr	r1, [sl, #24]
   14bf0:	cmp	r1, #0
   14bf4:	beq	14c0c <__assert_fail@plt+0x36f8>
   14bf8:	mov	r2, #0
   14bfc:	str	r2, [r0, r2, lsl #2]
   14c00:	add	r2, r2, #1
   14c04:	cmp	r1, r2
   14c08:	bne	14bfc <__assert_fail@plt+0x36e8>
   14c0c:	ldr	r0, [r8, #52]	; 0x34
   14c10:	movw	r1, #46172	; 0xb45c
   14c14:	mov	r2, r8
   14c18:	movt	r1, #1
   14c1c:	bl	1b3d8 <__assert_fail@plt+0x9ec4>
   14c20:	ldr	r1, [sl, #24]
   14c24:	cmp	r1, #0
   14c28:	beq	14c50 <__assert_fail@plt+0x373c>
   14c2c:	ldr	r0, [r8, #132]	; 0x84
   14c30:	mov	r2, #0
   14c34:	ldr	r3, [r0, r2, lsl #2]
   14c38:	cmp	r2, r3
   14c3c:	bne	14c58 <__assert_fail@plt+0x3744>
   14c40:	add	r2, r2, #1
   14c44:	cmp	r1, r2
   14c48:	bne	14c34 <__assert_fail@plt+0x3720>
   14c4c:	b	14c60 <__assert_fail@plt+0x374c>
   14c50:	ldr	r0, [r8, #132]	; 0x84
   14c54:	b	14c60 <__assert_fail@plt+0x374c>
   14c58:	cmp	r1, r2
   14c5c:	bne	14c6c <__assert_fail@plt+0x3758>
   14c60:	bl	22190 <__assert_fail@plt+0x10c7c>
   14c64:	mov	r0, #0
   14c68:	str	r0, [r8, #132]	; 0x84
   14c6c:	ldr	r0, [r8, #52]	; 0x34
   14c70:	movw	r1, #46324	; 0xb4f4
   14c74:	mov	r2, sl
   14c78:	movt	r1, #1
   14c7c:	bl	18d48 <__assert_fail@plt+0x7834>
   14c80:	cmp	r0, #0
   14c84:	bne	14b90 <__assert_fail@plt+0x367c>
   14c88:	ldr	r0, [r8, #52]	; 0x34
   14c8c:	movw	r1, #46460	; 0xb57c
   14c90:	mov	r2, r8
   14c94:	movt	r1, #1
   14c98:	bl	18d48 <__assert_fail@plt+0x7834>
   14c9c:	cmp	r0, #0
   14ca0:	bne	14b90 <__assert_fail@plt+0x367c>
   14ca4:	ldr	r0, [r8, #52]	; 0x34
   14ca8:	movw	r1, #46604	; 0xb60c
   14cac:	mov	r2, r8
   14cb0:	movt	r1, #1
   14cb4:	bl	1b3d8 <__assert_fail@plt+0x9ec4>
   14cb8:	ldr	r0, [r8, #52]	; 0x34
   14cbc:	movw	r1, #46700	; 0xb66c
   14cc0:	mov	r2, r8
   14cc4:	movt	r1, #1
   14cc8:	bl	1b3d8 <__assert_fail@plt+0x9ec4>
   14ccc:	cmp	r0, #0
   14cd0:	bne	14b90 <__assert_fail@plt+0x367c>
   14cd4:	mov	r5, #0
   14cd8:	sub	r7, fp, #40	; 0x28
   14cdc:	mov	r4, #0
   14ce0:	ldr	r0, [r8, #24]
   14ce4:	add	r6, r4, r4, lsl #1
   14ce8:	add	r0, r0, r6, lsl #2
   14cec:	ldr	r0, [r0, #4]
   14cf0:	cmp	r0, #0
   14cf4:	beq	14d00 <__assert_fail@plt+0x37ec>
   14cf8:	mov	r1, r5
   14cfc:	b	14d40 <__assert_fail@plt+0x382c>
   14d00:	mov	r0, r7
   14d04:	mov	r1, r8
   14d08:	mov	r2, r4
   14d0c:	mov	r3, #1
   14d10:	bl	1bb1c <__assert_fail@plt+0xa608>
   14d14:	cmp	r0, #0
   14d18:	bne	14b90 <__assert_fail@plt+0x367c>
   14d1c:	ldr	r0, [r8, #24]
   14d20:	mov	r1, r5
   14d24:	add	r0, r0, r6, lsl #2
   14d28:	ldr	r0, [r0, #4]
   14d2c:	cmp	r0, #0
   14d30:	bne	14d40 <__assert_fail@plt+0x382c>
   14d34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14d38:	bl	22190 <__assert_fail@plt+0x10c7c>
   14d3c:	mov	r1, #1
   14d40:	ldr	r2, [r8, #8]
   14d44:	add	r0, r4, #1
   14d48:	subs	r3, r0, r2
   14d4c:	mov	r4, r3
   14d50:	movwne	r3, #1
   14d54:	movne	r4, r0
   14d58:	tst	r1, #1
   14d5c:	and	r5, r1, r3
   14d60:	cmpeq	r0, r2
   14d64:	bne	14ce0 <__assert_fail@plt+0x37cc>
   14d68:	ldrb	r1, [sl, #28]
   14d6c:	tst	r1, #16
   14d70:	bne	14d8c <__assert_fail@plt+0x3878>
   14d74:	ldr	r1, [sl, #24]
   14d78:	cmp	r1, #0
   14d7c:	beq	14d8c <__assert_fail@plt+0x3878>
   14d80:	ldrb	r1, [r8, #88]	; 0x58
   14d84:	tst	r1, #1
   14d88:	bne	14d98 <__assert_fail@plt+0x3884>
   14d8c:	ldr	r1, [r8, #76]	; 0x4c
   14d90:	cmp	r1, #0
   14d94:	beq	14e78 <__assert_fail@plt+0x3964>
   14d98:	add	r0, r0, r0, lsl #1
   14d9c:	lsl	r0, r0, #2
   14da0:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   14da4:	cmp	r0, #0
   14da8:	str	r0, [r8, #28]
   14dac:	beq	14b8c <__assert_fail@plt+0x3678>
   14db0:	ldr	r1, [r8, #8]
   14db4:	cmp	r1, #0
   14db8:	beq	14e78 <__assert_fail@plt+0x3964>
   14dbc:	mov	r1, #0
   14dc0:	str	r1, [r0]
   14dc4:	str	r1, [r0, #4]
   14dc8:	str	r1, [r0, #8]
   14dcc:	ldr	r0, [r8, #8]
   14dd0:	cmp	r0, #2
   14dd4:	bcc	14e04 <__assert_fail@plt+0x38f0>
   14dd8:	mov	r2, #1
   14ddc:	mov	r3, #12
   14de0:	ldr	r0, [r8, #28]
   14de4:	add	r2, r2, #1
   14de8:	str	r1, [r0, r3]!
   14dec:	add	r3, r3, #12
   14df0:	str	r1, [r0, #4]
   14df4:	str	r1, [r0, #8]
   14df8:	ldr	r0, [r8, #8]
   14dfc:	cmp	r2, r0
   14e00:	bcc	14de0 <__assert_fail@plt+0x38cc>
   14e04:	cmp	r0, #0
   14e08:	beq	14e78 <__assert_fail@plt+0x3964>
   14e0c:	ldr	r1, [r8, #24]
   14e10:	mov	r4, #0
   14e14:	add	r5, r4, r4, lsl #1
   14e18:	add	r2, r1, r5, lsl #2
   14e1c:	ldr	r3, [r2, #4]
   14e20:	cmp	r3, #1
   14e24:	blt	14e6c <__assert_fail@plt+0x3958>
   14e28:	ldr	r7, [r2, #8]
   14e2c:	mov	r6, #0
   14e30:	ldr	r0, [r7, r6, lsl #2]
   14e34:	ldr	r1, [r8, #28]
   14e38:	add	r0, r0, r0, lsl #1
   14e3c:	add	r0, r1, r0, lsl #2
   14e40:	mov	r1, r4
   14e44:	bl	1c334 <__assert_fail@plt+0xae20>
   14e48:	cmp	r0, #0
   14e4c:	beq	14b8c <__assert_fail@plt+0x3678>
   14e50:	ldr	r1, [r8, #24]
   14e54:	add	r6, r6, #1
   14e58:	add	r0, r1, r5, lsl #2
   14e5c:	ldr	r0, [r0, #4]
   14e60:	cmp	r6, r0
   14e64:	blt	14e30 <__assert_fail@plt+0x391c>
   14e68:	ldr	r0, [r8, #8]
   14e6c:	add	r4, r4, #1
   14e70:	cmp	r4, r0
   14e74:	bcc	14e14 <__assert_fail@plt+0x3900>
   14e78:	mov	r0, #0
   14e7c:	str	r0, [fp, #-52]	; 0xffffffcc
   14e80:	ldr	r0, [sp, #16]
   14e84:	cmp	r0, #0
   14e88:	bne	14fc0 <__assert_fail@plt+0x3aac>
   14e8c:	ldrb	r2, [r9, #88]	; 0x58
   14e90:	ands	r0, r2, #4
   14e94:	beq	14fc0 <__assert_fail@plt+0x3aac>
   14e98:	ldr	r0, [sp, #28]
   14e9c:	ldr	r0, [r0, #20]
   14ea0:	cmp	r0, #0
   14ea4:	bne	14fc0 <__assert_fail@plt+0x3aac>
   14ea8:	ldr	r7, [r9, #8]
   14eac:	mov	sl, #0
   14eb0:	cmp	r7, #0
   14eb4:	beq	14f94 <__assert_fail@plt+0x3a80>
   14eb8:	ldr	r3, [r9]
   14ebc:	mov	r8, #0
   14ec0:	mov	ip, #1
   14ec4:	mov	lr, #139	; 0x8b
   14ec8:	mov	r6, #0
   14ecc:	mov	r4, #0
   14ed0:	add	r1, r3, r4, lsl #3
   14ed4:	ldrb	r5, [r1, #4]
   14ed8:	sub	r5, r5, #1
   14edc:	cmp	r5, #11
   14ee0:	bhi	15278 <__assert_fail@plt+0x3d64>
   14ee4:	add	r0, pc, #0
   14ee8:	ldr	pc, [r0, r5, lsl #2]
   14eec:	andeq	r4, r1, r4, ror pc
   14ef0:	andeq	r4, r1, ip, lsl pc
   14ef4:	andeq	r4, r1, ip, lsr #30
   14ef8:	andeq	r4, r1, ip, lsl pc
   14efc:	andeq	r4, r1, ip, lsl #31
   14f00:	andeq	r4, r1, r0, asr #31
   14f04:	andeq	r5, r1, r8, ror r2
   14f08:	andeq	r4, r1, ip, lsl pc
   14f0c:	andeq	r4, r1, ip, lsl pc
   14f10:	andeq	r4, r1, ip, lsl pc
   14f14:	andeq	r4, r1, ip, lsl pc
   14f18:	andeq	r4, r1, r4, asr pc
   14f1c:	add	r4, r4, #1
   14f20:	cmp	r4, r7
   14f24:	bne	14ed0 <__assert_fail@plt+0x39bc>
   14f28:	b	151bc <__assert_fail@plt+0x3ca8>
   14f2c:	ldr	r0, [r3, r4, lsl #3]
   14f30:	mov	r1, #0
   14f34:	add	r5, r0, #16
   14f38:	ldr	r0, [r5, r1, lsl #2]
   14f3c:	cmp	r0, #0
   14f40:	bne	14fc0 <__assert_fail@plt+0x3aac>
   14f44:	add	r1, r1, #1
   14f48:	cmp	r1, #4
   14f4c:	bne	14f38 <__assert_fail@plt+0x3a24>
   14f50:	b	14f1c <__assert_fail@plt+0x3a08>
   14f54:	ldr	r0, [r3, r4, lsl #3]
   14f58:	sub	r0, r0, #16
   14f5c:	ror	r1, r0, #4
   14f60:	cmp	r1, #7
   14f64:	bhi	14fc0 <__assert_fail@plt+0x3aac>
   14f68:	tst	lr, ip, lsl r1
   14f6c:	bne	14f1c <__assert_fail@plt+0x3a08>
   14f70:	b	14fc0 <__assert_fail@plt+0x3aac>
   14f74:	ldrsb	r0, [r1]
   14f78:	cmp	r0, #0
   14f7c:	mov	r0, #0
   14f80:	movwmi	r0, #1
   14f84:	orr	r6, r6, r0
   14f88:	b	14f1c <__assert_fail@plt+0x3a08>
   14f8c:	mov	r8, #1
   14f90:	b	14f1c <__assert_fail@plt+0x3a08>
   14f94:	mov	r8, #0
   14f98:	mov	r0, #1
   14f9c:	and	r1, r2, #249	; 0xf9
   14fa0:	str	r0, [r9, #92]	; 0x5c
   14fa4:	ldr	r0, [r9, #76]	; 0x4c
   14fa8:	cmp	r0, #0
   14fac:	movwgt	sl, #1
   14fb0:	orr	r0, r8, sl
   14fb4:	and	r0, r0, #1
   14fb8:	orr	r0, r1, r0, lsl #1
   14fbc:	strb	r0, [r9, #88]	; 0x58
   14fc0:	ldr	r1, [r9, #52]	; 0x34
   14fc4:	ldr	r0, [r9, #24]
   14fc8:	ldr	r1, [r1, #12]
   14fcc:	ldr	r1, [r1, #28]
   14fd0:	str	r1, [r9, #72]	; 0x48
   14fd4:	add	r1, r1, r1, lsl #1
   14fd8:	add	r1, r0, r1, lsl #2
   14fdc:	sub	r0, fp, #40	; 0x28
   14fe0:	bl	1c3a0 <__assert_fail@plt+0xae8c>
   14fe4:	cmp	r0, #0
   14fe8:	str	r0, [fp, #-48]	; 0xffffffd0
   14fec:	bne	15270 <__assert_fail@plt+0x3d5c>
   14ff0:	ldr	r0, [r9, #76]	; 0x4c
   14ff4:	ldr	sl, [sp, #28]
   14ff8:	cmp	r0, #1
   14ffc:	blt	150d0 <__assert_fail@plt+0x3bbc>
   15000:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15004:	cmp	r7, #1
   15008:	blt	150d0 <__assert_fail@plt+0x3bbc>
   1500c:	mov	r6, #0
   15010:	sub	r8, fp, #40	; 0x28
   15014:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15018:	ldr	r2, [r9]
   1501c:	ldr	r0, [r1, r6, lsl #2]
   15020:	add	r3, r2, r0, lsl #3
   15024:	ldrb	r3, [r3, #4]
   15028:	cmp	r3, #4
   1502c:	bne	150c4 <__assert_fail@plt+0x3bb0>
   15030:	mov	r3, #0
   15034:	cmp	r7, #1
   15038:	blt	15070 <__assert_fail@plt+0x3b5c>
   1503c:	ldr	r5, [r1, r3, lsl #2]
   15040:	add	r4, r2, r5, lsl #3
   15044:	ldrb	r4, [r4, #4]
   15048:	cmp	r4, #9
   1504c:	bne	15060 <__assert_fail@plt+0x3b4c>
   15050:	ldr	r4, [r2, r0, lsl #3]
   15054:	ldr	r5, [r2, r5, lsl #3]
   15058:	cmp	r5, r4
   1505c:	beq	15070 <__assert_fail@plt+0x3b5c>
   15060:	add	r3, r3, #1
   15064:	cmp	r7, r3
   15068:	bne	1503c <__assert_fail@plt+0x3b28>
   1506c:	b	150c4 <__assert_fail@plt+0x3bb0>
   15070:	cmp	r3, r7
   15074:	beq	150c4 <__assert_fail@plt+0x3bb0>
   15078:	ldr	r1, [r9, #20]
   1507c:	add	r0, r0, r0, lsl #1
   15080:	add	r0, r1, r0, lsl #2
   15084:	ldr	r0, [r0, #8]
   15088:	ldr	r4, [r0]
   1508c:	mov	r0, r8
   15090:	mov	r1, r4
   15094:	bl	1c41c <__assert_fail@plt+0xaf08>
   15098:	cmp	r0, #0
   1509c:	bne	150c4 <__assert_fail@plt+0x3bb0>
   150a0:	ldr	r0, [r9, #24]
   150a4:	add	r1, r4, r4, lsl #1
   150a8:	add	r1, r0, r1, lsl #2
   150ac:	mov	r0, r8
   150b0:	bl	1bff8 <__assert_fail@plt+0xaae4>
   150b4:	cmp	r0, #0
   150b8:	bne	1518c <__assert_fail@plt+0x3c78>
   150bc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   150c0:	mov	r6, #0
   150c4:	add	r6, r6, #1
   150c8:	cmp	r6, r7
   150cc:	blt	15014 <__assert_fail@plt+0x3b00>
   150d0:	sub	r0, fp, #48	; 0x30
   150d4:	sub	r2, fp, #40	; 0x28
   150d8:	mov	r1, r9
   150dc:	mov	r3, #0
   150e0:	bl	1c484 <__assert_fail@plt+0xaf70>
   150e4:	cmp	r0, #0
   150e8:	str	r0, [r9, #36]	; 0x24
   150ec:	beq	1516c <__assert_fail@plt+0x3c58>
   150f0:	ldrsb	r1, [r0, #52]	; 0x34
   150f4:	cmn	r1, #1
   150f8:	ble	1510c <__assert_fail@plt+0x3bf8>
   150fc:	str	r0, [r9, #40]	; 0x28
   15100:	str	r0, [r9, #44]	; 0x2c
   15104:	str	r0, [r9, #48]	; 0x30
   15108:	b	15180 <__assert_fail@plt+0x3c6c>
   1510c:	sub	r4, fp, #48	; 0x30
   15110:	sub	r6, fp, #40	; 0x28
   15114:	mov	r1, r9
   15118:	mov	r3, #1
   1511c:	mov	r0, r4
   15120:	mov	r2, r6
   15124:	bl	1c484 <__assert_fail@plt+0xaf70>
   15128:	str	r0, [r9, #40]	; 0x28
   1512c:	mov	r0, r4
   15130:	mov	r1, r9
   15134:	mov	r2, r6
   15138:	mov	r3, #2
   1513c:	bl	1c484 <__assert_fail@plt+0xaf70>
   15140:	str	r0, [r9, #44]	; 0x2c
   15144:	mov	r0, r4
   15148:	mov	r1, r9
   1514c:	mov	r2, r6
   15150:	mov	r3, #6
   15154:	bl	1c484 <__assert_fail@plt+0xaf70>
   15158:	str	r0, [r9, #48]	; 0x30
   1515c:	ldr	r1, [r9, #40]	; 0x28
   15160:	cmp	r1, #0
   15164:	cmpne	r0, #0
   15168:	bne	15174 <__assert_fail@plt+0x3c60>
   1516c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15170:	b	1518c <__assert_fail@plt+0x3c78>
   15174:	ldr	r0, [r9, #44]	; 0x2c
   15178:	cmp	r0, #0
   1517c:	beq	1516c <__assert_fail@plt+0x3c58>
   15180:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15184:	bl	22190 <__assert_fail@plt+0x10c7c>
   15188:	mov	r0, #0
   1518c:	str	r0, [fp, #-52]	; 0xffffffcc
   15190:	mov	r0, sl
   15194:	bl	1794c <__assert_fail@plt+0x6438>
   15198:	add	r0, sp, #32
   1519c:	bl	1799c <__assert_fail@plt+0x6488>
   151a0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   151a4:	mov	r4, #0
   151a8:	cmp	r0, #0
   151ac:	bne	14ba4 <__assert_fail@plt+0x3690>
   151b0:	mov	r0, r4
   151b4:	sub	sp, fp, #28
   151b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151bc:	orr	r0, r6, r8
   151c0:	tst	r0, #1
   151c4:	beq	14f98 <__assert_fail@plt+0x3a84>
   151c8:	mov	r2, #0
   151cc:	mov	r7, #7
   151d0:	add	r3, r3, r2, lsl #3
   151d4:	ldr	r6, [r3, #4]
   151d8:	uxtb	r1, r6
   151dc:	cmp	r1, #5
   151e0:	beq	15200 <__assert_fail@plt+0x3cec>
   151e4:	cmp	r1, #1
   151e8:	bne	15208 <__assert_fail@plt+0x3cf4>
   151ec:	ldrsb	r0, [r3]
   151f0:	cmn	r0, #1
   151f4:	bicle	r0, r6, #2097152	; 0x200000
   151f8:	strle	r0, [r3, #4]
   151fc:	b	15208 <__assert_fail@plt+0x3cf4>
   15200:	bfi	r6, r7, #0, #8
   15204:	str	r6, [r3, #4]
   15208:	ldr	r0, [r9, #8]
   1520c:	add	r2, r2, #1
   15210:	cmp	r2, r0
   15214:	bcs	15220 <__assert_fail@plt+0x3d0c>
   15218:	ldr	r3, [r9]
   1521c:	b	151d0 <__assert_fail@plt+0x3cbc>
   15220:	ldrb	r2, [r9, #88]	; 0x58
   15224:	b	14f98 <__assert_fail@plt+0x3a84>
   15228:	mov	r0, r9
   1522c:	mov	r1, #160	; 0xa0
   15230:	mov	r4, #160	; 0xa0
   15234:	bl	22004 <__assert_fail@plt+0x10af0>
   15238:	cmp	r0, #0
   1523c:	beq	15268 <__assert_fail@plt+0x3d54>
   15240:	mov	r9, r0
   15244:	ldr	r0, [sp, #28]
   15248:	str	r9, [r0]
   1524c:	str	r4, [r0, #4]
   15250:	b	14684 <__assert_fail@plt+0x3170>
   15254:	mov	r0, #12
   15258:	str	r0, [fp, #-52]	; 0xffffffcc
   1525c:	mov	r0, #0
   15260:	str	r0, [r9, #52]	; 0x34
   15264:	b	14b94 <__assert_fail@plt+0x3680>
   15268:	mov	r4, #12
   1526c:	b	151b0 <__assert_fail@plt+0x3c9c>
   15270:	ldr	sl, [sp, #28]
   15274:	b	1518c <__assert_fail@plt+0x3c78>
   15278:	bl	114f0 <abort@plt>
   1527c:	movw	r2, #18120	; 0x46c8
   15280:	movt	r2, #3
   15284:	ldr	r1, [r2]
   15288:	str	r0, [r2]
   1528c:	mov	r0, r1
   15290:	bx	lr
   15294:	push	{r4, r5, r6, sl, fp, lr}
   15298:	add	fp, sp, #16
   1529c:	ldr	r5, [r0, #16]
   152a0:	ldr	r6, [r0]
   152a4:	mov	r4, r0
   152a8:	mov	r1, #0
   152ac:	mov	r2, #256	; 0x100
   152b0:	mov	r0, r5
   152b4:	bl	11418 <memset@plt>
   152b8:	ldr	r1, [r6, #36]	; 0x24
   152bc:	mov	r0, r4
   152c0:	mov	r2, r5
   152c4:	bl	1532c <__assert_fail@plt+0x3e18>
   152c8:	ldr	r0, [r6, #36]	; 0x24
   152cc:	ldr	r1, [r6, #40]	; 0x28
   152d0:	cmp	r0, r1
   152d4:	beq	152e8 <__assert_fail@plt+0x3dd4>
   152d8:	mov	r0, r4
   152dc:	mov	r2, r5
   152e0:	bl	1532c <__assert_fail@plt+0x3e18>
   152e4:	ldr	r0, [r6, #36]	; 0x24
   152e8:	ldr	r1, [r6, #44]	; 0x2c
   152ec:	cmp	r0, r1
   152f0:	beq	15304 <__assert_fail@plt+0x3df0>
   152f4:	mov	r0, r4
   152f8:	mov	r2, r5
   152fc:	bl	1532c <__assert_fail@plt+0x3e18>
   15300:	ldr	r0, [r6, #36]	; 0x24
   15304:	ldr	r1, [r6, #48]	; 0x30
   15308:	cmp	r0, r1
   1530c:	movne	r0, r4
   15310:	movne	r2, r5
   15314:	blne	1532c <__assert_fail@plt+0x3e18>
   15318:	ldrb	r0, [r4, #28]
   1531c:	orr	r0, r0, #8
   15320:	strb	r0, [r4, #28]
   15324:	mov	r0, #0
   15328:	pop	{r4, r5, r6, sl, fp, pc}
   1532c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15330:	add	fp, sp, #28
   15334:	sub	sp, sp, #308	; 0x134
   15338:	ldr	r8, [r0]
   1533c:	str	r0, [sp, #20]
   15340:	mov	r5, r2
   15344:	mov	r9, #0
   15348:	ldr	r0, [r8, #92]	; 0x5c
   1534c:	cmp	r0, #1
   15350:	bne	15360 <__assert_fail@plt+0x3e4c>
   15354:	ldr	r0, [sp, #20]
   15358:	ldrb	r0, [r0, #14]
   1535c:	ubfx	r9, r0, #6, #1
   15360:	ldr	r0, [r1, #8]
   15364:	cmp	r0, #1
   15368:	blt	156a4 <__assert_fail@plt+0x4190>
   1536c:	add	r0, sp, #32
   15370:	mov	r7, #1
   15374:	mov	r2, #0
   15378:	str	r1, [sp, #12]
   1537c:	str	r8, [sp, #24]
   15380:	add	r0, r0, #1
   15384:	str	r0, [sp, #4]
   15388:	movw	r0, #1
   1538c:	movt	r0, #32
   15390:	add	r0, r0, #254	; 0xfe
   15394:	str	r0, [sp, #8]
   15398:	ldr	r0, [r1, #12]
   1539c:	str	r2, [sp, #16]
   153a0:	ldr	sl, [r0, r2, lsl #2]
   153a4:	ldr	r0, [r8]
   153a8:	add	r1, r0, sl, lsl #3
   153ac:	ldrb	r4, [r1, #4]
   153b0:	sub	r1, r4, #1
   153b4:	cmp	r1, #6
   153b8:	bhi	15660 <__assert_fail@plt+0x414c>
   153bc:	add	r2, pc, #0
   153c0:	ldr	pc, [r2, r1, lsl #2]
   153c4:	andeq	r5, r1, r0, ror #7
   153c8:	andeq	r5, r1, ip, ror r6
   153cc:	ldrdeq	r5, [r1], -r4
   153d0:	andeq	r5, r1, r0, ror #12
   153d4:	andeq	r5, r1, ip, ror r6
   153d8:	andeq	r5, r1, ip, lsr r5
   153dc:	andeq	r5, r1, ip, ror r6
   153e0:	ldrb	r0, [r0, sl, lsl #3]
   153e4:	cmp	r9, #0
   153e8:	strb	r7, [r5, r0]
   153ec:	beq	153f8 <__assert_fail@plt+0x3ee4>
   153f0:	bl	112b0 <tolower@plt>
   153f4:	strb	r7, [r5, r0]
   153f8:	ldr	r0, [sp, #20]
   153fc:	ldrb	r0, [r0, #14]
   15400:	tst	r0, #64	; 0x40
   15404:	beq	15660 <__assert_fail@plt+0x414c>
   15408:	ldr	r0, [r8, #92]	; 0x5c
   1540c:	cmp	r0, #2
   15410:	blt	15660 <__assert_fail@plt+0x414c>
   15414:	ldr	r0, [r8]
   15418:	add	r1, sl, #1
   1541c:	movw	r4, #1
   15420:	add	r6, sp, #32
   15424:	movt	r4, #32
   15428:	ldrb	r0, [r0, sl, lsl #3]
   1542c:	strb	r0, [sp, #32]
   15430:	ldr	r0, [r8, #8]
   15434:	cmp	r1, r0
   15438:	ldr	r0, [sp, #4]
   1543c:	bcs	15480 <__assert_fail@plt+0x3f6c>
   15440:	ldr	r0, [sp, #4]
   15444:	ldr	r1, [r8]
   15448:	ldr	r3, [sp, #8]
   1544c:	add	r1, r1, sl, lsl #3
   15450:	ldr	r2, [r1, #12]
   15454:	and	r2, r2, r3
   15458:	cmp	r2, r4
   1545c:	bne	15480 <__assert_fail@plt+0x3f6c>
   15460:	ldrb	r1, [r1, #8]
   15464:	add	r3, sl, #2
   15468:	strb	r1, [r0], #1
   1546c:	add	r1, sl, #1
   15470:	ldr	r2, [r8, #8]
   15474:	mov	sl, r1
   15478:	cmp	r3, r2
   1547c:	bcc	15444 <__assert_fail@plt+0x3f30>
   15480:	mov	r1, #0
   15484:	sub	r4, r0, r6
   15488:	sub	r0, fp, #36	; 0x24
   1548c:	sub	r3, fp, #48	; 0x30
   15490:	str	r1, [fp, #-44]	; 0xffffffd4
   15494:	str	r1, [fp, #-48]	; 0xffffffd0
   15498:	mov	r1, r6
   1549c:	mov	r2, r4
   154a0:	bl	221f0 <__assert_fail@plt+0x10cdc>
   154a4:	cmp	r0, r4
   154a8:	bne	15660 <__assert_fail@plt+0x414c>
   154ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   154b0:	bl	112c8 <towlower@plt>
   154b4:	mov	r1, r0
   154b8:	mov	r0, r6
   154bc:	sub	r2, fp, #48	; 0x30
   154c0:	bl	1122c <wcrtomb@plt>
   154c4:	cmn	r0, #1
   154c8:	ldrbne	r0, [sp, #32]
   154cc:	strbne	r7, [r5, r0]
   154d0:	b	15660 <__assert_fail@plt+0x414c>
   154d4:	mov	r4, #0
   154d8:	mov	r6, #0
   154dc:	str	sl, [sp, #28]
   154e0:	ldr	r0, [r0, sl, lsl #3]
   154e4:	mov	sl, #0
   154e8:	ldr	r8, [r0, r6, lsl #2]
   154ec:	tst	r8, r7, lsl sl
   154f0:	strbne	r7, [r5, r4]
   154f4:	cmpne	r9, #0
   154f8:	bne	15510 <__assert_fail@plt+0x3ffc>
   154fc:	add	sl, sl, #1
   15500:	add	r4, r4, #1
   15504:	cmp	sl, #32
   15508:	bne	154ec <__assert_fail@plt+0x3fd8>
   1550c:	b	15520 <__assert_fail@plt+0x400c>
   15510:	mov	r0, r4
   15514:	bl	112b0 <tolower@plt>
   15518:	strb	r7, [r5, r0]
   1551c:	b	154fc <__assert_fail@plt+0x3fe8>
   15520:	ldr	r8, [sp, #24]
   15524:	ldr	sl, [sp, #28]
   15528:	add	r6, r6, #1
   1552c:	cmp	r6, #8
   15530:	beq	15660 <__assert_fail@plt+0x414c>
   15534:	ldr	r0, [r8]
   15538:	b	154e0 <__assert_fail@plt+0x3fcc>
   1553c:	ldr	r4, [r0, sl, lsl #3]
   15540:	ldr	r0, [r8, #92]	; 0x5c
   15544:	cmp	r0, #2
   15548:	blt	155bc <__assert_fail@plt+0x40a8>
   1554c:	ldr	r0, [r4, #36]	; 0x24
   15550:	cmp	r0, #0
   15554:	bne	15570 <__assert_fail@plt+0x405c>
   15558:	ldrb	r0, [r4, #16]
   1555c:	tst	r0, #1
   15560:	bne	15570 <__assert_fail@plt+0x405c>
   15564:	ldr	r0, [r4, #32]
   15568:	cmp	r0, #0
   1556c:	beq	155bc <__assert_fail@plt+0x40a8>
   15570:	mov	r6, #0
   15574:	add	r4, sp, #32
   15578:	strb	r6, [fp, #-48]	; 0xffffffd0
   1557c:	mov	r0, #0
   15580:	sub	r1, fp, #48	; 0x30
   15584:	mov	r2, #1
   15588:	mov	r3, r4
   1558c:	str	r6, [sp, #36]	; 0x24
   15590:	str	r6, [sp, #32]
   15594:	bl	221f0 <__assert_fail@plt+0x10cdc>
   15598:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1559c:	cmn	r0, #2
   155a0:	add	r0, r1, #1
   155a4:	strbeq	r7, [r5, r1]
   155a8:	uxtb	r1, r0
   155ac:	strb	r0, [fp, #-48]	; 0xffffffd0
   155b0:	cmp	r1, r0
   155b4:	beq	1557c <__assert_fail@plt+0x4068>
   155b8:	b	15660 <__assert_fail@plt+0x414c>
   155bc:	ldr	r0, [r4, #20]
   155c0:	cmp	r0, #1
   155c4:	blt	15660 <__assert_fail@plt+0x414c>
   155c8:	mov	r6, #0
   155cc:	mov	r0, #0
   155d0:	sub	r2, fp, #48	; 0x30
   155d4:	str	r0, [fp, #-44]	; 0xffffffd4
   155d8:	str	r0, [fp, #-48]	; 0xffffffd0
   155dc:	ldr	r0, [r4]
   155e0:	ldr	r1, [r0, r6, lsl #2]
   155e4:	add	r0, sp, #32
   155e8:	bl	1122c <wcrtomb@plt>
   155ec:	cmn	r0, #1
   155f0:	beq	1560c <__assert_fail@plt+0x40f8>
   155f4:	ldrb	r0, [sp, #32]
   155f8:	cmp	r9, #0
   155fc:	strb	r7, [r5, r0]
   15600:	beq	1560c <__assert_fail@plt+0x40f8>
   15604:	bl	112b0 <tolower@plt>
   15608:	strb	r7, [r5, r0]
   1560c:	ldr	r0, [sp, #20]
   15610:	ldrb	r0, [r0, #14]
   15614:	tst	r0, #64	; 0x40
   15618:	beq	15650 <__assert_fail@plt+0x413c>
   1561c:	ldr	r0, [r8, #92]	; 0x5c
   15620:	cmp	r0, #2
   15624:	blt	15650 <__assert_fail@plt+0x413c>
   15628:	ldr	r0, [r4]
   1562c:	ldr	r0, [r0, r6, lsl #2]
   15630:	bl	112c8 <towlower@plt>
   15634:	mov	r1, r0
   15638:	add	r0, sp, #32
   1563c:	sub	r2, fp, #48	; 0x30
   15640:	bl	1122c <wcrtomb@plt>
   15644:	cmn	r0, #1
   15648:	ldrbne	r0, [sp, #32]
   1564c:	strbne	r7, [r5, r0]
   15650:	ldr	r0, [r4, #20]
   15654:	add	r6, r6, #1
   15658:	cmp	r6, r0
   1565c:	blt	155cc <__assert_fail@plt+0x40b8>
   15660:	ldr	r1, [sp, #12]
   15664:	ldr	r2, [sp, #16]
   15668:	ldr	r0, [r1, #8]
   1566c:	add	r2, r2, #1
   15670:	cmp	r2, r0
   15674:	blt	15398 <__assert_fail@plt+0x3e84>
   15678:	b	156a4 <__assert_fail@plt+0x4190>
   1567c:	mov	r0, r5
   15680:	mov	r1, #1
   15684:	mov	r2, #256	; 0x100
   15688:	bl	11418 <memset@plt>
   1568c:	cmp	r4, #2
   15690:	bne	156a4 <__assert_fail@plt+0x4190>
   15694:	ldr	r1, [sp, #20]
   15698:	ldrb	r0, [r1, #28]
   1569c:	orr	r0, r0, #1
   156a0:	strb	r0, [r1, #28]
   156a4:	sub	sp, fp, #28
   156a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156b0:	add	fp, sp, #24
   156b4:	mov	r4, r0
   156b8:	mov	r0, #0
   156bc:	mov	r6, r2
   156c0:	mov	r8, r1
   156c4:	str	r0, [r4]
   156c8:	str	r0, [r4, #4]
   156cc:	str	r0, [r4, #8]
   156d0:	mov	r0, #256	; 0x100
   156d4:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   156d8:	cmp	r0, #0
   156dc:	str	r0, [r4, #16]
   156e0:	beq	15790 <__assert_fail@plt+0x427c>
   156e4:	movw	r0, #45820	; 0xb2fc
   156e8:	tst	r6, #1
   156ec:	and	r1, r6, #2
   156f0:	movt	r0, #3
   156f4:	movweq	r0, #710	; 0x2c6
   156f8:	movteq	r0, #257	; 0x101
   156fc:	tst	r6, #4
   15700:	orr	r5, r0, r1, lsl #21
   15704:	bne	15718 <__assert_fail@plt+0x4204>
   15708:	ldrb	r0, [r4, #28]
   1570c:	and	r0, r0, #127	; 0x7f
   15710:	strb	r0, [r4, #28]
   15714:	b	15738 <__assert_fail@plt+0x4224>
   15718:	ldrb	r0, [r4, #28]
   1571c:	mvn	r1, #127	; 0x7f
   15720:	orr	r0, r0, r1
   15724:	movw	r1, #45758	; 0xb2be
   15728:	movt	r1, #323	; 0x143
   1572c:	strb	r0, [r4, #28]
   15730:	and	r1, r5, r1
   15734:	orr	r5, r1, #256	; 0x100
   15738:	and	r1, r6, #8
   1573c:	and	r0, r0, #239	; 0xef
   15740:	mov	r7, #0
   15744:	orr	r0, r0, r1, lsl #1
   15748:	str	r7, [r4, #20]
   1574c:	strb	r0, [r4, #28]
   15750:	mov	r0, r8
   15754:	bl	113dc <strlen@plt>
   15758:	mov	r2, r0
   1575c:	mov	r0, r4
   15760:	mov	r1, r8
   15764:	mov	r3, r5
   15768:	bl	14638 <__assert_fail@plt+0x3124>
   1576c:	cmp	r0, #16
   15770:	mov	r5, r0
   15774:	movweq	r5, #8
   15778:	cmp	r5, #0
   1577c:	bne	15798 <__assert_fail@plt+0x4284>
   15780:	mov	r0, r4
   15784:	bl	15294 <__assert_fail@plt+0x3d80>
   15788:	mov	r0, r7
   1578c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15790:	mov	r7, #12
   15794:	b	15788 <__assert_fail@plt+0x4274>
   15798:	ldr	r0, [r4, #16]
   1579c:	bl	22190 <__assert_fail@plt+0x10c7c>
   157a0:	str	r7, [r4, #16]
   157a4:	mov	r7, r5
   157a8:	b	15788 <__assert_fail@plt+0x4274>
   157ac:	push	{r4, r5, r6, r7, fp, lr}
   157b0:	add	fp, sp, #16
   157b4:	cmp	r0, #17
   157b8:	bcs	1582c <__assert_fail@plt+0x4318>
   157bc:	movw	r1, #13504	; 0x34c0
   157c0:	mov	r4, r2
   157c4:	mov	r2, #5
   157c8:	mov	r5, r3
   157cc:	movt	r1, #2
   157d0:	ldr	r0, [r1, r0, lsl #2]
   157d4:	movw	r1, #13120	; 0x3340
   157d8:	movt	r1, #2
   157dc:	add	r1, r1, r0
   157e0:	mov	r0, #0
   157e4:	bl	11304 <dcgettext@plt>
   157e8:	mov	r6, r0
   157ec:	bl	113dc <strlen@plt>
   157f0:	add	r7, r0, #1
   157f4:	cmp	r5, #0
   157f8:	beq	15814 <__assert_fail@plt+0x4300>
   157fc:	cmp	r7, r5
   15800:	mov	r2, r7
   15804:	bhi	1581c <__assert_fail@plt+0x4308>
   15808:	mov	r0, r4
   1580c:	mov	r1, r6
   15810:	bl	112a4 <memcpy@plt>
   15814:	mov	r0, r7
   15818:	pop	{r4, r5, r6, r7, fp, pc}
   1581c:	sub	r2, r5, #1
   15820:	mov	r0, #0
   15824:	strb	r0, [r4, r2]
   15828:	b	15808 <__assert_fail@plt+0x42f4>
   1582c:	bl	114f0 <abort@plt>
   15830:	push	{r4, r5, fp, lr}
   15834:	add	fp, sp, #8
   15838:	ldr	r5, [r0]
   1583c:	mov	r4, r0
   15840:	cmp	r5, #0
   15844:	beq	15870 <__assert_fail@plt+0x435c>
   15848:	movw	r0, #0
   1584c:	movw	r1, #0
   15850:	movt	r0, #0
   15854:	movt	r1, #0
   15858:	orrs	r0, r1, r0
   1585c:	beq	15868 <__assert_fail@plt+0x4354>
   15860:	add	r0, r5, #136	; 0x88
   15864:	bl	1125c <pthread_mutex_destroy@plt>
   15868:	mov	r0, r5
   1586c:	bl	15898 <__assert_fail@plt+0x4384>
   15870:	mov	r5, #0
   15874:	str	r5, [r4]
   15878:	str	r5, [r4, #4]
   1587c:	ldr	r0, [r4, #16]
   15880:	bl	22190 <__assert_fail@plt+0x10c7c>
   15884:	str	r5, [r4, #16]
   15888:	ldr	r0, [r4, #20]
   1588c:	bl	22190 <__assert_fail@plt+0x10c7c>
   15890:	str	r5, [r4, #20]
   15894:	pop	{r4, r5, fp, pc}
   15898:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1589c:	add	fp, sp, #24
   158a0:	mov	r8, r0
   158a4:	ldr	r0, [r0]
   158a8:	cmp	r0, #0
   158ac:	beq	158f4 <__assert_fail@plt+0x43e0>
   158b0:	ldr	r1, [r8, #8]
   158b4:	cmp	r1, #0
   158b8:	beq	158f4 <__assert_fail@plt+0x43e0>
   158bc:	bl	17884 <__assert_fail@plt+0x6370>
   158c0:	ldr	r0, [r8, #8]
   158c4:	cmp	r0, #2
   158c8:	bcc	158f4 <__assert_fail@plt+0x43e0>
   158cc:	mov	r5, #1
   158d0:	mov	r6, #8
   158d4:	ldr	r0, [r8]
   158d8:	add	r0, r0, r6
   158dc:	bl	17884 <__assert_fail@plt+0x6370>
   158e0:	ldr	r0, [r8, #8]
   158e4:	add	r5, r5, #1
   158e8:	add	r6, r6, #8
   158ec:	cmp	r5, r0
   158f0:	bcc	158d4 <__assert_fail@plt+0x43c0>
   158f4:	ldr	r0, [r8, #12]
   158f8:	bl	22190 <__assert_fail@plt+0x10c7c>
   158fc:	ldr	r0, [r8, #8]
   15900:	cmp	r0, #0
   15904:	beq	15960 <__assert_fail@plt+0x444c>
   15908:	mov	r5, #0
   1590c:	mov	r6, #8
   15910:	ldr	r0, [r8, #24]
   15914:	cmp	r0, #0
   15918:	beq	15924 <__assert_fail@plt+0x4410>
   1591c:	ldr	r0, [r0, r6]
   15920:	bl	22190 <__assert_fail@plt+0x10c7c>
   15924:	ldr	r0, [r8, #28]
   15928:	cmp	r0, #0
   1592c:	beq	15938 <__assert_fail@plt+0x4424>
   15930:	ldr	r0, [r0, r6]
   15934:	bl	22190 <__assert_fail@plt+0x10c7c>
   15938:	ldr	r0, [r8, #20]
   1593c:	cmp	r0, #0
   15940:	beq	1594c <__assert_fail@plt+0x4438>
   15944:	ldr	r0, [r0, r6]
   15948:	bl	22190 <__assert_fail@plt+0x10c7c>
   1594c:	ldr	r0, [r8, #8]
   15950:	add	r5, r5, #1
   15954:	add	r6, r6, #12
   15958:	cmp	r5, r0
   1595c:	bcc	15910 <__assert_fail@plt+0x43fc>
   15960:	ldr	r0, [r8, #20]
   15964:	bl	22190 <__assert_fail@plt+0x10c7c>
   15968:	ldr	r0, [r8, #24]
   1596c:	bl	22190 <__assert_fail@plt+0x10c7c>
   15970:	ldr	r0, [r8, #28]
   15974:	bl	22190 <__assert_fail@plt+0x10c7c>
   15978:	ldr	r0, [r8]
   1597c:	bl	22190 <__assert_fail@plt+0x10c7c>
   15980:	ldr	r5, [r8, #32]
   15984:	cmp	r5, #0
   15988:	beq	159e8 <__assert_fail@plt+0x44d4>
   1598c:	mov	r6, #0
   15990:	add	r0, r6, r6, lsl #1
   15994:	ldr	r0, [r5, r0, lsl #2]!
   15998:	add	r7, r5, #8
   1599c:	cmp	r0, #1
   159a0:	blt	159c4 <__assert_fail@plt+0x44b0>
   159a4:	mov	r4, #0
   159a8:	ldr	r0, [r7]
   159ac:	ldr	r0, [r0, r4, lsl #2]
   159b0:	bl	178b4 <__assert_fail@plt+0x63a0>
   159b4:	ldr	r0, [r5]
   159b8:	add	r4, r4, #1
   159bc:	cmp	r4, r0
   159c0:	blt	159a8 <__assert_fail@plt+0x4494>
   159c4:	ldr	r0, [r7]
   159c8:	bl	22190 <__assert_fail@plt+0x10c7c>
   159cc:	ldr	r0, [r8, #68]	; 0x44
   159d0:	cmp	r6, r0
   159d4:	bcs	159e4 <__assert_fail@plt+0x44d0>
   159d8:	ldr	r5, [r8, #32]
   159dc:	add	r6, r6, #1
   159e0:	b	15990 <__assert_fail@plt+0x447c>
   159e4:	ldr	r5, [r8, #32]
   159e8:	mov	r0, r5
   159ec:	bl	22190 <__assert_fail@plt+0x10c7c>
   159f0:	ldr	r0, [r8, #60]	; 0x3c
   159f4:	movw	r1, #13572	; 0x3504
   159f8:	movt	r1, #2
   159fc:	cmp	r0, r1
   15a00:	beq	15a08 <__assert_fail@plt+0x44f4>
   15a04:	bl	22190 <__assert_fail@plt+0x10c7c>
   15a08:	ldr	r0, [r8, #132]	; 0x84
   15a0c:	bl	22190 <__assert_fail@plt+0x10c7c>
   15a10:	mov	r0, r8
   15a14:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a18:	b	22190 <__assert_fail@plt+0x10c7c>
   15a1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a20:	add	fp, sp, #28
   15a24:	sub	sp, sp, #28
   15a28:	ldr	sl, [fp, #8]
   15a2c:	mov	r7, #2
   15a30:	cmp	sl, #7
   15a34:	bhi	15b08 <__assert_fail@plt+0x45f4>
   15a38:	mov	r5, r0
   15a3c:	ldr	r0, [r0]
   15a40:	mov	r6, r3
   15a44:	mov	r9, r2
   15a48:	mov	r4, r1
   15a4c:	tst	sl, #4
   15a50:	str	r0, [sp, #24]
   15a54:	bne	15a6c <__assert_fail@plt+0x4558>
   15a58:	mov	r0, r4
   15a5c:	bl	113dc <strlen@plt>
   15a60:	mov	r7, r0
   15a64:	mov	r8, #0
   15a68:	b	15a74 <__assert_fail@plt+0x4560>
   15a6c:	ldr	r8, [r6]
   15a70:	ldr	r7, [r6, #4]
   15a74:	movw	r0, #0
   15a78:	movw	r1, #0
   15a7c:	movt	r0, #0
   15a80:	movt	r1, #0
   15a84:	orrs	r0, r1, r0
   15a88:	str	r0, [sp, #20]
   15a8c:	beq	15a9c <__assert_fail@plt+0x4588>
   15a90:	ldr	r0, [sp, #24]
   15a94:	add	r0, r0, #136	; 0x88
   15a98:	bl	1128c <pthread_mutex_lock@plt>
   15a9c:	ldrb	r0, [r5, #28]
   15aa0:	tst	r0, #16
   15aa4:	bne	15ab8 <__assert_fail@plt+0x45a4>
   15aa8:	str	r7, [sp]
   15aac:	stmib	sp, {r7, r9}
   15ab0:	str	r6, [sp, #12]
   15ab4:	b	15acc <__assert_fail@plt+0x45b8>
   15ab8:	mov	r0, #0
   15abc:	str	r7, [sp]
   15ac0:	str	r7, [sp, #4]
   15ac4:	str	r0, [sp, #8]
   15ac8:	str	r0, [sp, #12]
   15acc:	mov	r0, r5
   15ad0:	mov	r1, r4
   15ad4:	mov	r2, r7
   15ad8:	mov	r3, r8
   15adc:	str	sl, [sp, #16]
   15ae0:	bl	15b14 <__assert_fail@plt+0x4600>
   15ae4:	mov	r7, r0
   15ae8:	ldr	r0, [sp, #20]
   15aec:	cmp	r0, #0
   15af0:	beq	15b00 <__assert_fail@plt+0x45ec>
   15af4:	ldr	r0, [sp, #24]
   15af8:	add	r0, r0, #136	; 0x88
   15afc:	bl	111f0 <pthread_mutex_unlock@plt>
   15b00:	cmp	r7, #0
   15b04:	movwne	r7, #1
   15b08:	mov	r0, r7
   15b0c:	sub	sp, fp, #28
   15b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b18:	add	fp, sp, #28
   15b1c:	sub	sp, sp, #436	; 0x1b4
   15b20:	ldr	r5, [r0]
   15b24:	str	r2, [sp, #80]	; 0x50
   15b28:	mov	r7, r1
   15b2c:	mov	r6, r0
   15b30:	add	r0, sp, #112	; 0x70
   15b34:	mov	r1, #0
   15b38:	mov	r2, #136	; 0x88
   15b3c:	mov	r4, r3
   15b40:	mov	r8, #0
   15b44:	bl	11418 <memset@plt>
   15b48:	str	r5, [sp, #196]	; 0xc4
   15b4c:	ldr	r9, [fp, #16]
   15b50:	ldr	ip, [fp, #8]
   15b54:	mov	r0, #0
   15b58:	ldr	r1, [r6, #16]
   15b5c:	cmp	r1, #0
   15b60:	beq	15b7c <__assert_fail@plt+0x4668>
   15b64:	ldrb	r2, [r6, #28]
   15b68:	and	r2, r2, #9
   15b6c:	cmp	r2, #8
   15b70:	movne	r1, #0
   15b74:	subs	r0, r4, ip
   15b78:	movne	r0, r1
   15b7c:	ldr	r2, [r6, #24]
   15b80:	ldr	r1, [r6, #8]
   15b84:	mov	sl, #1
   15b88:	mvn	r3, r2
   15b8c:	cmp	r2, r9
   15b90:	addcc	r8, r3, r9
   15b94:	cmp	r1, #0
   15b98:	beq	172e4 <__assert_fail@plt+0x5dd0>
   15b9c:	ldr	r1, [r5, #36]	; 0x24
   15ba0:	cmp	r1, #0
   15ba4:	ldrne	r2, [r5, #40]	; 0x28
   15ba8:	cmpne	r2, #0
   15bac:	beq	172e4 <__assert_fail@plt+0x5dd0>
   15bb0:	ldr	r3, [r5, #44]	; 0x2c
   15bb4:	cmp	r3, #0
   15bb8:	strne	r7, [sp, #104]	; 0x68
   15bbc:	ldrne	r7, [r5, #48]	; 0x30
   15bc0:	cmpne	r7, #0
   15bc4:	beq	172e4 <__assert_fail@plt+0x5dd0>
   15bc8:	ldr	r1, [r1, #8]
   15bcc:	ldr	r7, [r6, #20]
   15bd0:	str	r0, [sp, #100]	; 0x64
   15bd4:	cmp	r1, #0
   15bd8:	str	r7, [sp, #108]	; 0x6c
   15bdc:	beq	15be8 <__assert_fail@plt+0x46d4>
   15be0:	ldr	lr, [sp, #104]	; 0x68
   15be4:	b	15bf8 <__assert_fail@plt+0x46e4>
   15be8:	ldr	r1, [r2, #8]
   15bec:	ldr	lr, [sp, #104]	; 0x68
   15bf0:	cmp	r1, #0
   15bf4:	beq	16b4c <__assert_fail@plt+0x5638>
   15bf8:	mov	r0, ip
   15bfc:	str	r0, [sp, #92]	; 0x5c
   15c00:	subs	r9, r9, r8
   15c04:	mov	r0, #1
   15c08:	str	r0, [sp, #60]	; 0x3c
   15c0c:	bne	15c20 <__assert_fail@plt+0x470c>
   15c10:	ldr	r0, [r5, #76]	; 0x4c
   15c14:	cmp	r0, #0
   15c18:	movwne	r0, #1
   15c1c:	str	r0, [sp, #60]	; 0x3c
   15c20:	ldr	r0, [r6, #12]
   15c24:	ldr	r2, [r5, #92]	; 0x5c
   15c28:	ldr	r7, [sp, #108]	; 0x6c
   15c2c:	ldr	ip, [r5, #8]
   15c30:	str	r7, [sp, #176]	; 0xb0
   15c34:	str	lr, [sp, #112]	; 0x70
   15c38:	str	r2, [sp, #192]	; 0xc0
   15c3c:	ubfx	r3, r0, #22, #1
   15c40:	and	r0, r0, #4194304	; 0x400000
   15c44:	orrs	r0, r7, r0
   15c48:	ldr	r7, [sp, #80]	; 0x50
   15c4c:	strb	r3, [sp, #184]	; 0xb8
   15c50:	movwne	r0, #1
   15c54:	strb	r0, [sp, #187]	; 0xbb
   15c58:	add	r0, sp, #112	; 0x70
   15c5c:	ldrb	r1, [r5, #88]	; 0x58
   15c60:	add	r3, r0, #44	; 0x2c
   15c64:	vdup.32	q8, r7
   15c68:	vst1.32	{d16-d17}, [r3]
   15c6c:	ubfx	r3, r1, #3, #1
   15c70:	strb	r3, [sp, #186]	; 0xba
   15c74:	ubfx	r1, r1, #2, #1
   15c78:	strb	r1, [sp, #185]	; 0xb9
   15c7c:	add	r1, ip, #1
   15c80:	cmp	r2, r1
   15c84:	movgt	r1, r2
   15c88:	add	r2, r7, #1
   15c8c:	cmp	r2, r1
   15c90:	movlt	r1, r2
   15c94:	bl	179d0 <__assert_fail@plt+0x64bc>
   15c98:	cmp	r0, #0
   15c9c:	str	r5, [sp, #96]	; 0x60
   15ca0:	bne	17308 <__assert_fail@plt+0x5df4>
   15ca4:	add	r1, r5, #96	; 0x60
   15ca8:	str	r9, [sp, #84]	; 0x54
   15cac:	str	r8, [sp, #32]
   15cb0:	ldr	r3, [fp, #24]
   15cb4:	ldr	r0, [fp, #12]
   15cb8:	str	r1, [sp, #180]	; 0xb4
   15cbc:	ldrb	r1, [r5, #88]	; 0x58
   15cc0:	ubfx	r1, r1, #4, #1
   15cc4:	ldr	r9, [sp, #104]	; 0x68
   15cc8:	strb	r1, [sp, #190]	; 0xbe
   15ccc:	mov	r1, #0
   15cd0:	ldrb	r2, [sp, #187]	; 0xbb
   15cd4:	cmp	r2, #0
   15cd8:	bne	15cf0 <__assert_fail@plt+0x47dc>
   15cdc:	str	r9, [sp, #116]	; 0x74
   15ce0:	ldr	r1, [r5, #92]	; 0x5c
   15ce4:	cmp	r1, #1
   15ce8:	ldr	r1, [sp, #80]	; 0x50
   15cec:	movwgt	r1, #0
   15cf0:	str	r0, [sp, #168]	; 0xa8
   15cf4:	str	r1, [sp, #144]	; 0x90
   15cf8:	str	r1, [sp, #140]	; 0x8c
   15cfc:	str	r0, [sp, #164]	; 0xa4
   15d00:	str	r6, [sp, #68]	; 0x44
   15d04:	ldr	sl, [sp, #108]	; 0x6c
   15d08:	ldrb	r0, [r6, #28]
   15d0c:	ldr	r6, [sp, #100]	; 0x64
   15d10:	lsr	r0, r0, #7
   15d14:	strb	r0, [sp, #189]	; 0xbd
   15d18:	mvn	r0, #0
   15d1c:	ldr	r8, [r5, #76]	; 0x4c
   15d20:	str	r0, [sp, #204]	; 0xcc
   15d24:	str	r3, [sp, #200]	; 0xc8
   15d28:	lsl	r5, r8, #1
   15d2c:	cmp	r8, #1
   15d30:	blt	15d84 <__assert_fail@plt+0x4870>
   15d34:	movw	r0, #43690	; 0xaaaa
   15d38:	mov	r2, #12
   15d3c:	movt	r0, #2730	; 0xaaa
   15d40:	cmp	r5, r0
   15d44:	bhi	172a8 <__assert_fail@plt+0x5d94>
   15d48:	add	r0, r8, r8, lsl #1
   15d4c:	lsl	r0, r0, #4
   15d50:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   15d54:	mov	r6, r0
   15d58:	str	r0, [sp, #228]	; 0xe4
   15d5c:	lsl	r0, r8, #3
   15d60:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   15d64:	cmp	r0, #0
   15d68:	str	r0, [sp, #244]	; 0xf4
   15d6c:	beq	17330 <__assert_fail@plt+0x5e1c>
   15d70:	cmp	r6, #0
   15d74:	ldr	sl, [sp, #108]	; 0x6c
   15d78:	ldr	r6, [sp, #100]	; 0x64
   15d7c:	mov	r2, #12
   15d80:	beq	172a8 <__assert_fail@plt+0x5d94>
   15d84:	mov	r0, #1
   15d88:	str	r5, [sp, #240]	; 0xf0
   15d8c:	str	r0, [sp, #232]	; 0xe8
   15d90:	ldr	r0, [sp, #84]	; 0x54
   15d94:	str	r5, [sp, #224]	; 0xe0
   15d98:	cmp	r0, #1
   15d9c:	bhi	15db0 <__assert_fail@plt+0x489c>
   15da0:	ldr	r0, [sp, #96]	; 0x60
   15da4:	ldrb	r0, [r0, #88]	; 0x58
   15da8:	tst	r0, #2
   15dac:	beq	15de0 <__assert_fail@plt+0x48cc>
   15db0:	ldr	r0, [sp, #148]	; 0x94
   15db4:	mov	r2, #12
   15db8:	cmn	r0, #-1073741822	; 0xc0000002
   15dbc:	bhi	172a8 <__assert_fail@plt+0x5d94>
   15dc0:	mov	r1, #4
   15dc4:	add	r0, r1, r0, lsl #2
   15dc8:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   15dcc:	ldr	r6, [sp, #100]	; 0x64
   15dd0:	mov	r2, #12
   15dd4:	cmp	r0, #0
   15dd8:	str	r0, [sp, #212]	; 0xd4
   15ddc:	beq	172a8 <__assert_fail@plt+0x5d94>
   15de0:	ldr	r1, [fp, #24]
   15de4:	ldr	r2, [sp, #92]	; 0x5c
   15de8:	str	r4, [fp, #-212]	; 0xffffff2c
   15dec:	mov	r0, #4
   15df0:	mov	r8, #1
   15df4:	mov	r7, r4
   15df8:	tst	r1, #1
   15dfc:	mov	r1, #4
   15e00:	mov	r5, r2
   15e04:	movweq	r1, #6
   15e08:	cmp	r2, r4
   15e0c:	str	r1, [sp, #172]	; 0xac
   15e10:	ldr	r1, [sp, #96]	; 0x60
   15e14:	mvnlt	r8, #0
   15e18:	movlt	r5, r4
   15e1c:	movlt	r7, r2
   15e20:	cmp	r6, #0
   15e24:	ldr	r1, [r1, #92]	; 0x5c
   15e28:	str	r1, [sp, #64]	; 0x40
   15e2c:	beq	15e70 <__assert_fail@plt+0x495c>
   15e30:	cmp	r1, #1
   15e34:	beq	15e54 <__assert_fail@plt+0x4940>
   15e38:	ldr	r0, [sp, #68]	; 0x44
   15e3c:	ldr	r0, [r0, #12]
   15e40:	and	r0, r0, #4194304	; 0x400000
   15e44:	orr	r0, sl, r0
   15e48:	clz	r0, r0
   15e4c:	lsr	r0, r0, #5
   15e50:	lsl	r0, r0, #2
   15e54:	cmp	sl, #0
   15e58:	mov	r1, sl
   15e5c:	movwne	r1, #1
   15e60:	cmp	r2, r4
   15e64:	orrge	r1, r1, #2
   15e68:	orr	r0, r1, r0
   15e6c:	b	15e74 <__assert_fail@plt+0x4960>
   15e70:	mov	r0, #8
   15e74:	add	r1, sp, #112	; 0x70
   15e78:	cmp	r2, r4
   15e7c:	str	r7, [sp, #56]	; 0x38
   15e80:	str	r8, [sp, #76]	; 0x4c
   15e84:	str	r5, [sp, #72]	; 0x48
   15e88:	add	r1, r1, #32
   15e8c:	str	r1, [sp, #28]
   15e90:	sub	r1, fp, #212	; 0xd4
   15e94:	movwlt	r1, #0
   15e98:	cmp	r1, #0
   15e9c:	str	r1, [sp, #48]	; 0x30
   15ea0:	movwne	r1, #1
   15ea4:	str	r1, [sp, #52]	; 0x34
   15ea8:	sub	r1, fp, #208	; 0xd0
   15eac:	add	r1, r1, #16
   15eb0:	str	r1, [sp, #36]	; 0x24
   15eb4:	sub	r1, r0, #4
   15eb8:	str	r1, [sp, #44]	; 0x2c
   15ebc:	cmp	r1, #4
   15ec0:	bhi	15fa8 <__assert_fail@plt+0x4a94>
   15ec4:	ldr	r2, [fp, #24]
   15ec8:	add	r0, pc, #0
   15ecc:	ldr	pc, [r0, r1, lsl #2]
   15ed0:	andeq	r5, r1, r4, ror #29
   15ed4:	andeq	r5, r1, r4, ror #29
   15ed8:	andeq	r5, r1, ip, asr pc
   15edc:	andeq	r5, r1, r4, lsr pc
   15ee0:	andeq	r6, r1, r4, lsr r0
   15ee4:	mov	r2, #1
   15ee8:	cmp	r4, r7
   15eec:	blt	172a8 <__assert_fail@plt+0x5d94>
   15ef0:	ldr	r1, [sp, #80]	; 0x50
   15ef4:	cmp	r4, r1
   15ef8:	mov	r0, #0
   15efc:	ldrblt	r0, [r9, r4]
   15f00:	cmp	sl, #0
   15f04:	ldrbne	r0, [sl, r0]
   15f08:	ldrb	r0, [r6, r0]
   15f0c:	cmp	r0, #0
   15f10:	bne	16030 <__assert_fail@plt+0x4b1c>
   15f14:	sub	r0, r4, #1
   15f18:	cmp	r4, r7
   15f1c:	mov	r4, r0
   15f20:	str	r0, [fp, #-212]	; 0xffffff2c
   15f24:	bgt	15ef4 <__assert_fail@plt+0x49e0>
   15f28:	b	172a8 <__assert_fail@plt+0x5d94>
   15f2c:	add	r4, r4, #1
   15f30:	str	r4, [fp, #-212]	; 0xffffff2c
   15f34:	cmp	r4, r5
   15f38:	bge	15f74 <__assert_fail@plt+0x4a60>
   15f3c:	ldrb	r0, [r9, r4]
   15f40:	ldrb	r0, [sl, r0]
   15f44:	ldrb	r0, [r6, r0]
   15f48:	cmp	r0, #0
   15f4c:	beq	15f2c <__assert_fail@plt+0x4a18>
   15f50:	b	15f74 <__assert_fail@plt+0x4a60>
   15f54:	add	r4, r4, #1
   15f58:	str	r4, [fp, #-212]	; 0xffffff2c
   15f5c:	cmp	r4, r5
   15f60:	bge	15f74 <__assert_fail@plt+0x4a60>
   15f64:	ldrb	r0, [r9, r4]
   15f68:	ldrb	r0, [r6, r0]
   15f6c:	cmp	r0, #0
   15f70:	beq	15f54 <__assert_fail@plt+0x4a40>
   15f74:	cmp	r4, r5
   15f78:	bne	16034 <__assert_fail@plt+0x4b20>
   15f7c:	ldr	r1, [sp, #80]	; 0x50
   15f80:	mov	r0, #0
   15f84:	mov	r4, r5
   15f88:	cmp	r5, r1
   15f8c:	ldrblt	r0, [r9, r5]
   15f90:	cmp	sl, #0
   15f94:	ldrbne	r0, [sl, r0]
   15f98:	ldrb	r0, [r6, r0]
   15f9c:	cmp	r0, #0
   15fa0:	bne	16034 <__assert_fail@plt+0x4b20>
   15fa4:	b	17338 <__assert_fail@plt+0x5e24>
   15fa8:	ldr	r0, [sp, #136]	; 0x88
   15fac:	ldr	r2, [sp, #144]	; 0x90
   15fb0:	sub	r1, r4, r0
   15fb4:	cmp	r1, r2
   15fb8:	bcs	16000 <__assert_fail@plt+0x4aec>
   15fbc:	ldr	r3, [sp, #140]	; 0x8c
   15fc0:	mov	r2, #0
   15fc4:	cmp	r1, r3
   15fc8:	bcs	15fd4 <__assert_fail@plt+0x4ac0>
   15fcc:	ldr	r2, [sp, #116]	; 0x74
   15fd0:	ldrb	r2, [r2, r1]
   15fd4:	ldrb	r1, [r6, r2]
   15fd8:	cmp	r1, #0
   15fdc:	bne	16030 <__assert_fail@plt+0x4b1c>
   15fe0:	add	r4, r4, r8
   15fe4:	mov	r2, #1
   15fe8:	cmp	r4, r7
   15fec:	str	r4, [fp, #-212]	; 0xffffff2c
   15ff0:	blt	172a8 <__assert_fail@plt+0x5d94>
   15ff4:	cmp	r4, r5
   15ff8:	ble	15fac <__assert_fail@plt+0x4a98>
   15ffc:	b	172a8 <__assert_fail@plt+0x5d94>
   16000:	ldr	r2, [fp, #24]
   16004:	add	r0, sp, #112	; 0x70
   16008:	mov	r1, r4
   1600c:	bl	1c8c4 <__assert_fail@plt+0xb3b0>
   16010:	cmp	r0, #0
   16014:	bne	17308 <__assert_fail@plt+0x5df4>
   16018:	ldr	r0, [sp, #136]	; 0x88
   1601c:	ldr	r4, [fp, #-212]	; 0xffffff2c
   16020:	ldr	r7, [sp, #56]	; 0x38
   16024:	ldr	r6, [sp, #100]	; 0x64
   16028:	sub	r1, r4, r0
   1602c:	b	15fbc <__assert_fail@plt+0x4aa8>
   16030:	ldr	r2, [fp, #24]
   16034:	add	r0, sp, #112	; 0x70
   16038:	mov	r1, r4
   1603c:	bl	1c8c4 <__assert_fail@plt+0xb3b0>
   16040:	cmp	r0, #0
   16044:	bne	17308 <__assert_fail@plt+0x5df4>
   16048:	ldr	r0, [sp, #64]	; 0x40
   1604c:	cmp	r0, #1
   16050:	ldrne	r0, [sp, #140]	; 0x8c
   16054:	cmpne	r0, #0
   16058:	bne	16090 <__assert_fail@plt+0x4b7c>
   1605c:	mov	r0, #0
   16060:	str	r0, [sp, #220]	; 0xdc
   16064:	str	r0, [sp, #232]	; 0xe8
   16068:	str	r0, [sp, #216]	; 0xd8
   1606c:	str	r0, [fp, #-64]	; 0xffffffc0
   16070:	ldr	r4, [sp, #196]	; 0xc4
   16074:	ldr	r7, [sp, #152]	; 0x98
   16078:	ldr	r8, [r4, #36]	; 0x24
   1607c:	ldrsb	r0, [r8, #52]	; 0x34
   16080:	cmn	r0, #1
   16084:	ble	160a4 <__assert_fail@plt+0x4b90>
   16088:	ldr	r5, [sp, #52]	; 0x34
   1608c:	b	16108 <__assert_fail@plt+0x4bf4>
   16090:	ldr	r0, [sp, #120]	; 0x78
   16094:	ldr	r0, [r0]
   16098:	cmn	r0, #1
   1609c:	bne	1605c <__assert_fail@plt+0x4b48>
   160a0:	b	16890 <__assert_fail@plt+0x537c>
   160a4:	ldr	r2, [sp, #200]	; 0xc8
   160a8:	sub	r1, r7, #1
   160ac:	add	r0, sp, #112	; 0x70
   160b0:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   160b4:	ldr	r5, [sp, #52]	; 0x34
   160b8:	tst	r0, #1
   160bc:	bne	16104 <__assert_fail@plt+0x4bf0>
   160c0:	mov	r3, r0
   160c4:	cmp	r0, #0
   160c8:	beq	16108 <__assert_fail@plt+0x4bf4>
   160cc:	ands	r1, r3, #2
   160d0:	and	r0, r3, #4
   160d4:	cmpne	r0, #0
   160d8:	bne	168c0 <__assert_fail@plt+0x53ac>
   160dc:	cmp	r1, #0
   160e0:	bne	168c8 <__assert_fail@plt+0x53b4>
   160e4:	cmp	r0, #0
   160e8:	beq	16108 <__assert_fail@plt+0x4bf4>
   160ec:	ldr	r2, [r8, #40]	; 0x28
   160f0:	sub	r0, fp, #64	; 0x40
   160f4:	mov	r1, r4
   160f8:	bl	1c484 <__assert_fail@plt+0xaf70>
   160fc:	mov	r8, r0
   16100:	b	16108 <__assert_fail@plt+0x4bf4>
   16104:	ldr	r8, [r4, #40]	; 0x28
   16108:	cmp	r8, #0
   1610c:	beq	17330 <__assert_fail@plt+0x5e1c>
   16110:	ldr	r0, [sp, #212]	; 0xd4
   16114:	mov	r6, r5
   16118:	cmp	r0, #0
   1611c:	beq	16134 <__assert_fail@plt+0x4c20>
   16120:	str	r8, [r0, r7, lsl #2]
   16124:	mov	r6, r5
   16128:	ldr	r0, [r4, #76]	; 0x4c
   1612c:	cmp	r0, #0
   16130:	bne	168ec <__assert_fail@plt+0x53d8>
   16134:	ldrb	r0, [r8, #52]	; 0x34
   16138:	tst	r0, #16
   1613c:	bne	168d0 <__assert_fail@plt+0x53bc>
   16140:	mvn	r0, #0
   16144:	mov	r2, #0
   16148:	str	r0, [sp, #88]	; 0x58
   1614c:	ldr	r0, [sp, #152]	; 0x98
   16150:	ldr	r1, [sp, #168]	; 0xa8
   16154:	cmp	r1, r0
   16158:	ble	16570 <__assert_fail@plt+0x505c>
   1615c:	ldr	r5, [sp, #48]	; 0x30
   16160:	str	r2, [sp, #40]	; 0x28
   16164:	ldr	r2, [sp, #148]	; 0x94
   16168:	ldr	r1, [sp, #160]	; 0xa0
   1616c:	str	r7, [sp, #92]	; 0x5c
   16170:	add	r7, r0, #1
   16174:	mov	r9, r6
   16178:	mov	r6, r8
   1617c:	cmp	r7, r2
   16180:	blt	1618c <__assert_fail@plt+0x4c78>
   16184:	cmp	r2, r1
   16188:	blt	16528 <__assert_fail@plt+0x5014>
   1618c:	ldr	r2, [sp, #140]	; 0x8c
   16190:	cmp	r7, r2
   16194:	blt	161a0 <__assert_fail@plt+0x4c8c>
   16198:	cmp	r2, r1
   1619c:	blt	16528 <__assert_fail@plt+0x5014>
   161a0:	ldrb	r0, [r6, #52]	; 0x34
   161a4:	tst	r0, #32
   161a8:	bne	16350 <__assert_fail@plt+0x4e3c>
   161ac:	ldr	r1, [sp, #152]	; 0x98
   161b0:	ldr	r0, [sp, #116]	; 0x74
   161b4:	add	r2, r1, #1
   161b8:	str	r2, [sp, #152]	; 0x98
   161bc:	ldrb	r4, [r0, r1]
   161c0:	ldr	r0, [r6, #44]	; 0x2c
   161c4:	cmp	r0, #0
   161c8:	bne	161f4 <__assert_fail@plt+0x4ce0>
   161cc:	ldr	r8, [r6, #48]	; 0x30
   161d0:	cmp	r8, #0
   161d4:	bne	16544 <__assert_fail@plt+0x5030>
   161d8:	ldr	r0, [sp, #196]	; 0xc4
   161dc:	mov	r1, r6
   161e0:	bl	1f148 <__assert_fail@plt+0xdc34>
   161e4:	cmp	r0, #0
   161e8:	bne	161c0 <__assert_fail@plt+0x4cac>
   161ec:	mov	r0, #12
   161f0:	b	16564 <__assert_fail@plt+0x5050>
   161f4:	ldr	r8, [r0, r4, lsl #2]
   161f8:	ldr	r0, [sp, #212]	; 0xd4
   161fc:	cmp	r0, #0
   16200:	beq	16218 <__assert_fail@plt+0x4d04>
   16204:	sub	r0, fp, #64	; 0x40
   16208:	add	r1, sp, #112	; 0x70
   1620c:	mov	r2, r8
   16210:	bl	1dab4 <__assert_fail@plt+0xc5a0>
   16214:	mov	r8, r0
   16218:	cmp	r8, #0
   1621c:	beq	16258 <__assert_fail@plt+0x4d44>
   16220:	sub	r0, r6, r8
   16224:	mov	r6, r9
   16228:	clz	r0, r0
   1622c:	lsr	r0, r0, #5
   16230:	ands	r6, r9, r0
   16234:	ldr	r0, [sp, #92]	; 0x5c
   16238:	movne	r0, r7
   1623c:	mov	r7, r0
   16240:	ldrb	r0, [r8, #52]	; 0x34
   16244:	tst	r0, #16
   16248:	bne	162e4 <__assert_fail@plt+0x4dd0>
   1624c:	ldr	r9, [sp, #104]	; 0x68
   16250:	ldr	sl, [sp, #108]	; 0x6c
   16254:	b	16330 <__assert_fail@plt+0x4e1c>
   16258:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1625c:	cmp	r0, #0
   16260:	bne	17330 <__assert_fail@plt+0x5e1c>
   16264:	ldr	r0, [sp, #40]	; 0x28
   16268:	ldr	r1, [sp, #60]	; 0x3c
   1626c:	cmp	r0, #0
   16270:	mvn	r1, r1
   16274:	movwne	r0, #1
   16278:	tst	r1, r0
   1627c:	bne	16578 <__assert_fail@plt+0x5064>
   16280:	ldr	r0, [sp, #212]	; 0xd4
   16284:	cmp	r0, #0
   16288:	beq	16578 <__assert_fail@plt+0x5064>
   1628c:	ldr	r2, [sp, #152]	; 0x98
   16290:	ldr	r1, [sp, #216]	; 0xd8
   16294:	add	r0, r0, #4
   16298:	cmp	r2, r1
   1629c:	bge	16578 <__assert_fail@plt+0x5064>
   162a0:	add	r3, r2, #1
   162a4:	str	r3, [sp, #152]	; 0x98
   162a8:	ldr	r2, [r0, r2, lsl #2]
   162ac:	cmp	r2, #0
   162b0:	mov	r2, r3
   162b4:	beq	16298 <__assert_fail@plt+0x4d84>
   162b8:	sub	r0, fp, #64	; 0x40
   162bc:	add	r1, sp, #112	; 0x70
   162c0:	mov	r2, #0
   162c4:	bl	1dab4 <__assert_fail@plt+0xc5a0>
   162c8:	cmp	r0, #0
   162cc:	mov	r8, r0
   162d0:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   162d4:	cmpeq	r0, #0
   162d8:	bne	16344 <__assert_fail@plt+0x4e30>
   162dc:	ldr	r0, [sp, #212]	; 0xd4
   162e0:	b	1628c <__assert_fail@plt+0x4d78>
   162e4:	ldr	r9, [sp, #104]	; 0x68
   162e8:	ldr	sl, [sp, #108]	; 0x6c
   162ec:	sxtb	r0, r0
   162f0:	cmn	r0, #1
   162f4:	bgt	16310 <__assert_fail@plt+0x4dfc>
   162f8:	ldr	r2, [sp, #152]	; 0x98
   162fc:	add	r0, sp, #112	; 0x70
   16300:	mov	r1, r8
   16304:	bl	1cf94 <__assert_fail@plt+0xba80>
   16308:	cmp	r0, #0
   1630c:	beq	16330 <__assert_fail@plt+0x4e1c>
   16310:	ldr	r0, [sp, #152]	; 0x98
   16314:	str	r0, [sp, #88]	; 0x58
   16318:	ldr	r0, [sp, #60]	; 0x3c
   1631c:	cmp	r0, #0
   16320:	beq	16598 <__assert_fail@plt+0x5084>
   16324:	mov	r5, #0
   16328:	mov	r0, #1
   1632c:	str	r0, [sp, #40]	; 0x28
   16330:	ldr	r0, [sp, #152]	; 0x98
   16334:	ldr	r1, [sp, #168]	; 0xa8
   16338:	cmp	r1, r0
   1633c:	bgt	16164 <__assert_fail@plt+0x4c50>
   16340:	b	16584 <__assert_fail@plt+0x5070>
   16344:	cmp	r8, #0
   16348:	bne	16220 <__assert_fail@plt+0x4d0c>
   1634c:	b	16578 <__assert_fail@plt+0x5064>
   16350:	ldr	r0, [r6, #8]
   16354:	cmp	r0, #1
   16358:	blt	1651c <__assert_fail@plt+0x5008>
   1635c:	ldr	sl, [sp, #196]	; 0xc4
   16360:	mov	r4, #0
   16364:	str	sl, [sp, #20]
   16368:	ldr	r0, [r6, #12]
   1636c:	ldr	r1, [r0, r4, lsl #2]
   16370:	ldr	r0, [sl]
   16374:	add	r0, r0, r1, lsl #3
   16378:	ldr	r8, [r0, #4]
   1637c:	tst	r8, #1048576	; 0x100000
   16380:	beq	1650c <__assert_fail@plt+0x4ff8>
   16384:	movw	r0, #65280	; 0xff00
   16388:	ldr	r3, [sp, #152]	; 0x98
   1638c:	str	r1, [sp, #24]
   16390:	movt	r0, #3
   16394:	tst	r8, r0
   16398:	beq	163fc <__assert_fail@plt+0x4ee8>
   1639c:	ldr	r2, [sp, #200]	; 0xc8
   163a0:	add	r0, sp, #112	; 0x70
   163a4:	mov	r1, r3
   163a8:	mov	sl, r3
   163ac:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   163b0:	mov	r3, sl
   163b4:	ldr	r1, [sp, #24]
   163b8:	ldr	sl, [sp, #20]
   163bc:	and	r2, r0, #1
   163c0:	tst	r8, #1024	; 0x400
   163c4:	beq	163d0 <__assert_fail@plt+0x4ebc>
   163c8:	cmp	r2, #0
   163cc:	beq	1650c <__assert_fail@plt+0x4ff8>
   163d0:	tst	r8, #2048	; 0x800
   163d4:	cmpne	r2, #0
   163d8:	bne	1650c <__assert_fail@plt+0x4ff8>
   163dc:	tst	r8, #8192	; 0x2000
   163e0:	beq	163ec <__assert_fail@plt+0x4ed8>
   163e4:	ands	r2, r0, #2
   163e8:	beq	1650c <__assert_fail@plt+0x4ff8>
   163ec:	tst	r8, #32768	; 0x8000
   163f0:	beq	163fc <__assert_fail@plt+0x4ee8>
   163f4:	ands	r0, r0, #8
   163f8:	beq	1650c <__assert_fail@plt+0x4ff8>
   163fc:	mov	r0, sl
   16400:	add	r2, sp, #112	; 0x70
   16404:	bl	1ed1c <__assert_fail@plt+0xd808>
   16408:	cmp	r0, #0
   1640c:	beq	1650c <__assert_fail@plt+0x4ff8>
   16410:	ldr	r1, [sp, #152]	; 0x98
   16414:	ldr	r2, [sp, #232]	; 0xe8
   16418:	cmp	r2, r0
   1641c:	add	r8, r1, r0
   16420:	movlt	r2, r0
   16424:	add	r0, sp, #112	; 0x70
   16428:	mov	r1, r8
   1642c:	str	r2, [sp, #232]	; 0xe8
   16430:	bl	1de98 <__assert_fail@plt+0xc984>
   16434:	cmp	r0, #0
   16438:	str	r0, [fp, #-48]	; 0xffffffd0
   1643c:	bne	16564 <__assert_fail@plt+0x5050>
   16440:	ldr	r0, [sp, #212]	; 0xd4
   16444:	ldr	r2, [sp, #24]
   16448:	ldr	r1, [sl, #24]
   1644c:	str	r4, [sp, #16]
   16450:	str	r8, [sp, #12]
   16454:	ldr	r3, [r0, r8, lsl #2]
   16458:	ldr	r0, [sl, #12]
   1645c:	ldr	r0, [r0, r2, lsl #2]
   16460:	cmp	r3, #0
   16464:	str	r3, [sp, #8]
   16468:	add	r0, r0, r0, lsl #1
   1646c:	add	r2, r1, r0, lsl #2
   16470:	beq	16494 <__assert_fail@plt+0x4f80>
   16474:	ldr	r1, [r3, #40]	; 0x28
   16478:	sub	r4, fp, #208	; 0xd0
   1647c:	mov	r0, r4
   16480:	bl	1dc08 <__assert_fail@plt+0xc6f4>
   16484:	cmp	r0, #0
   16488:	str	r0, [fp, #-48]	; 0xffffffd0
   1648c:	beq	164a8 <__assert_fail@plt+0x4f94>
   16490:	b	16564 <__assert_fail@plt+0x5050>
   16494:	vldr	d16, [r2]
   16498:	ldr	r0, [r2, #8]
   1649c:	sub	r4, fp, #208	; 0xd0
   164a0:	str	r0, [fp, #-200]	; 0xffffff38
   164a4:	vstr	d16, [fp, #-208]	; 0xffffff30
   164a8:	ldr	r8, [sp, #12]
   164ac:	ldr	r2, [sp, #200]	; 0xc8
   164b0:	add	r0, sp, #112	; 0x70
   164b4:	sub	r1, r8, #1
   164b8:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   164bc:	mov	r3, r0
   164c0:	sub	r0, fp, #48	; 0x30
   164c4:	mov	r1, sl
   164c8:	mov	r2, r4
   164cc:	bl	1c484 <__assert_fail@plt+0xaf70>
   164d0:	ldr	r1, [sp, #212]	; 0xd4
   164d4:	str	r0, [r1, r8, lsl #2]
   164d8:	ldr	r0, [sp, #8]
   164dc:	cmp	r0, #0
   164e0:	beq	164ec <__assert_fail@plt+0x4fd8>
   164e4:	ldr	r0, [fp, #-200]	; 0xffffff38
   164e8:	bl	22190 <__assert_fail@plt+0x10c7c>
   164ec:	ldr	r0, [sp, #212]	; 0xd4
   164f0:	ldr	r4, [sp, #16]
   164f4:	ldr	r0, [r0, r8, lsl #2]
   164f8:	cmp	r0, #0
   164fc:	bne	1650c <__assert_fail@plt+0x4ff8>
   16500:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16504:	cmp	r0, #0
   16508:	bne	16564 <__assert_fail@plt+0x5050>
   1650c:	ldr	r0, [r6, #8]
   16510:	add	r4, r4, #1
   16514:	cmp	r4, r0
   16518:	blt	16368 <__assert_fail@plt+0x4e54>
   1651c:	mov	r0, #0
   16520:	str	r0, [fp, #-64]	; 0xffffffc0
   16524:	b	161ac <__assert_fail@plt+0x4c98>
   16528:	add	r1, r0, #2
   1652c:	add	r0, sp, #112	; 0x70
   16530:	bl	1d9dc <__assert_fail@plt+0xc4c8>
   16534:	cmp	r0, #0
   16538:	str	r0, [fp, #-64]	; 0xffffffc0
   1653c:	beq	161a0 <__assert_fail@plt+0x4c8c>
   16540:	b	17330 <__assert_fail@plt+0x5e1c>
   16544:	ldr	r0, [sp, #152]	; 0x98
   16548:	ldr	r2, [sp, #200]	; 0xc8
   1654c:	sub	r1, r0, #1
   16550:	add	r0, sp, #112	; 0x70
   16554:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   16558:	bfi	r4, r0, #8, #1
   1655c:	ldr	r8, [r8, r4, lsl #2]
   16560:	b	161f8 <__assert_fail@plt+0x4ce4>
   16564:	mov	r8, #0
   16568:	str	r0, [fp, #-64]	; 0xffffffc0
   1656c:	b	161f8 <__assert_fail@plt+0x4ce4>
   16570:	ldr	r5, [sp, #48]	; 0x30
   16574:	b	16584 <__assert_fail@plt+0x5070>
   16578:	ldr	r9, [sp, #104]	; 0x68
   1657c:	ldr	sl, [sp, #108]	; 0x6c
   16580:	ldr	r7, [sp, #92]	; 0x5c
   16584:	cmp	r5, #0
   16588:	beq	16598 <__assert_fail@plt+0x5084>
   1658c:	ldr	r0, [r5]
   16590:	add	r0, r0, r7
   16594:	str	r0, [r5]
   16598:	ldr	r8, [sp, #76]	; 0x4c
   1659c:	ldr	r5, [sp, #72]	; 0x48
   165a0:	ldr	r7, [sp, #88]	; 0x58
   165a4:	cmn	r7, #1
   165a8:	beq	16888 <__assert_fail@plt+0x5374>
   165ac:	mov	r2, #12
   165b0:	cmn	r7, #2
   165b4:	beq	172a8 <__assert_fail@plt+0x5d94>
   165b8:	ldr	r0, [sp, #68]	; 0x44
   165bc:	str	r7, [sp, #204]	; 0xcc
   165c0:	ldr	r8, [sp, #84]	; 0x54
   165c4:	ldr	r4, [sp, #96]	; 0x60
   165c8:	ldrb	r0, [r0, #28]
   165cc:	cmp	r8, #2
   165d0:	bcc	165dc <__assert_fail@plt+0x50c8>
   165d4:	ands	r1, r0, #16
   165d8:	beq	165e8 <__assert_fail@plt+0x50d4>
   165dc:	ldr	r1, [r4, #76]	; 0x4c
   165e0:	cmp	r1, #0
   165e4:	beq	1660c <__assert_fail@plt+0x50f8>
   165e8:	ldr	r0, [sp, #212]	; 0xd4
   165ec:	mov	r2, r7
   165f0:	ldr	r1, [r0, r7, lsl #2]
   165f4:	add	r0, sp, #112	; 0x70
   165f8:	bl	1cf94 <__assert_fail@plt+0xba80>
   165fc:	str	r0, [sp, #208]	; 0xd0
   16600:	ldr	r0, [sp, #68]	; 0x44
   16604:	mov	r2, #12
   16608:	ldrb	r0, [r0, #28]
   1660c:	cmp	r8, #2
   16610:	bcc	16628 <__assert_fail@plt+0x5114>
   16614:	ands	r0, r0, #16
   16618:	bne	16628 <__assert_fail@plt+0x5114>
   1661c:	ldrb	r0, [r4, #88]	; 0x58
   16620:	tst	r0, #1
   16624:	bne	16634 <__assert_fail@plt+0x5120>
   16628:	ldr	r0, [r4, #76]	; 0x4c
   1662c:	cmp	r0, #0
   16630:	beq	16a0c <__assert_fail@plt+0x54f8>
   16634:	ldr	r6, [sp, #204]	; 0xcc
   16638:	cmn	r6, #-1073741823	; 0xc0000001
   1663c:	bcs	172a8 <__assert_fail@plt+0x5d94>
   16640:	mov	r0, #4
   16644:	ldr	r7, [sp, #196]	; 0xc4
   16648:	ldr	r5, [sp, #208]	; 0xd0
   1664c:	add	r4, r0, r6, lsl #2
   16650:	mov	r0, r4
   16654:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   16658:	mov	sl, r0
   1665c:	cmp	r0, #0
   16660:	beq	17320 <__assert_fail@plt+0x5e0c>
   16664:	ldr	r0, [r7, #76]	; 0x4c
   16668:	cmp	r0, #0
   1666c:	beq	1671c <__assert_fail@plt+0x5208>
   16670:	mov	r0, r4
   16674:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   16678:	cmp	r0, #0
   1667c:	beq	17320 <__assert_fail@plt+0x5e0c>
   16680:	mov	r9, r0
   16684:	add	r0, r6, #1
   16688:	mov	r1, #0
   1668c:	str	r0, [sp, #92]	; 0x5c
   16690:	lsl	r2, r0, #2
   16694:	mov	r0, r9
   16698:	bl	11418 <memset@plt>
   1669c:	ldr	r0, [sp, #36]	; 0x24
   166a0:	mov	r1, #0
   166a4:	str	r6, [fp, #-196]	; 0xffffff3c
   166a8:	str	r5, [fp, #-200]	; 0xffffff38
   166ac:	str	r9, [fp, #-204]	; 0xffffff34
   166b0:	str	sl, [fp, #-208]	; 0xffffff30
   166b4:	str	r1, [r0]
   166b8:	str	r1, [r0, #4]
   166bc:	str	r1, [r0, #8]
   166c0:	add	r0, sp, #112	; 0x70
   166c4:	sub	r1, fp, #208	; 0xd0
   166c8:	bl	1fc44 <__assert_fail@plt+0xe730>
   166cc:	mov	r4, r0
   166d0:	mov	r0, #0
   166d4:	bl	22190 <__assert_fail@plt+0x10c7c>
   166d8:	cmp	r4, #0
   166dc:	bne	16998 <__assert_fail@plt+0x5484>
   166e0:	ldr	r0, [sl]
   166e4:	cmp	r0, #0
   166e8:	beq	16774 <__assert_fail@plt+0x5260>
   166ec:	ldr	r3, [sp, #92]	; 0x5c
   166f0:	mov	r0, r7
   166f4:	mov	r1, sl
   166f8:	mov	r2, r9
   166fc:	bl	1fedc <__assert_fail@plt+0xe9c8>
   16700:	mov	r4, r0
   16704:	mov	r0, r9
   16708:	bl	22190 <__assert_fail@plt+0x10c7c>
   1670c:	cmp	r4, #0
   16710:	beq	169e4 <__assert_fail@plt+0x54d0>
   16714:	mov	r9, #0
   16718:	b	16994 <__assert_fail@plt+0x5480>
   1671c:	ldr	r0, [sp, #36]	; 0x24
   16720:	mov	r9, #0
   16724:	str	r6, [fp, #-196]	; 0xffffff3c
   16728:	str	r5, [fp, #-200]	; 0xffffff38
   1672c:	sub	r1, fp, #208	; 0xd0
   16730:	str	r9, [fp, #-204]	; 0xffffff34
   16734:	str	sl, [fp, #-208]	; 0xffffff30
   16738:	str	r9, [r0]
   1673c:	str	r9, [r0, #4]
   16740:	str	r9, [r0, #8]
   16744:	add	r0, sp, #112	; 0x70
   16748:	bl	1fc44 <__assert_fail@plt+0xe730>
   1674c:	mov	r4, r0
   16750:	mov	r0, #0
   16754:	bl	22190 <__assert_fail@plt+0x10c7c>
   16758:	cmp	r4, #0
   1675c:	bne	16998 <__assert_fail@plt+0x5484>
   16760:	ldr	r0, [sl]
   16764:	mov	r9, #0
   16768:	cmp	r0, #0
   1676c:	beq	16868 <__assert_fail@plt+0x5354>
   16770:	b	169e4 <__assert_fail@plt+0x54d0>
   16774:	ldr	r0, [r9]
   16778:	cmp	r0, #0
   1677c:	bne	166ec <__assert_fail@plt+0x51d8>
   16780:	cmp	r6, #1
   16784:	blt	16868 <__assert_fail@plt+0x5354>
   16788:	ldr	r0, [sp, #212]	; 0xd4
   1678c:	str	r7, [sp, #88]	; 0x58
   16790:	lsl	r4, r6, #2
   16794:	add	r8, r6, #1
   16798:	mov	r7, sl
   1679c:	sub	r0, r0, #4
   167a0:	ldr	r1, [r0, r4]
   167a4:	cmp	r1, #0
   167a8:	beq	167b8 <__assert_fail@plt+0x52a4>
   167ac:	ldrb	r2, [r1, #52]	; 0x34
   167b0:	tst	r2, #16
   167b4:	bne	167cc <__assert_fail@plt+0x52b8>
   167b8:	sub	r8, r8, #1
   167bc:	sub	r4, r4, #4
   167c0:	cmp	r8, #2
   167c4:	bge	167a0 <__assert_fail@plt+0x528c>
   167c8:	b	16868 <__assert_fail@plt+0x5354>
   167cc:	sub	r6, r8, #2
   167d0:	add	r5, sp, #112	; 0x70
   167d4:	mov	r0, r5
   167d8:	mov	r2, r6
   167dc:	bl	1cf94 <__assert_fail@plt+0xba80>
   167e0:	mov	sl, r0
   167e4:	mov	r0, r9
   167e8:	mov	r1, #0
   167ec:	mov	r2, r4
   167f0:	bl	11418 <memset@plt>
   167f4:	ldr	r0, [sp, #36]	; 0x24
   167f8:	mov	r1, #0
   167fc:	str	r6, [fp, #-196]	; 0xffffff3c
   16800:	str	sl, [fp, #-200]	; 0xffffff38
   16804:	str	r9, [fp, #-204]	; 0xffffff34
   16808:	str	r7, [fp, #-208]	; 0xffffff30
   1680c:	mov	r5, sl
   16810:	mov	sl, r7
   16814:	str	r1, [r0]
   16818:	str	r1, [r0, #4]
   1681c:	str	r1, [r0, #8]
   16820:	add	r0, sp, #112	; 0x70
   16824:	sub	r1, fp, #208	; 0xd0
   16828:	bl	1fc44 <__assert_fail@plt+0xe730>
   1682c:	mov	r4, r0
   16830:	mov	r0, #0
   16834:	bl	22190 <__assert_fail@plt+0x10c7c>
   16838:	cmp	r4, #0
   1683c:	bne	16994 <__assert_fail@plt+0x5480>
   16840:	sub	r0, r8, #1
   16844:	ldr	r7, [sp, #88]	; 0x58
   16848:	str	r0, [sp, #92]	; 0x5c
   1684c:	ldr	r0, [sl]
   16850:	cmp	r0, #0
   16854:	beq	16774 <__assert_fail@plt+0x5260>
   16858:	sub	r6, r8, #2
   1685c:	sub	r0, r8, #1
   16860:	str	r0, [sp, #92]	; 0x5c
   16864:	b	166ec <__assert_fail@plt+0x51d8>
   16868:	mov	r0, sl
   1686c:	bl	22190 <__assert_fail@plt+0x10c7c>
   16870:	mov	r0, r9
   16874:	bl	22190 <__assert_fail@plt+0x10c7c>
   16878:	ldr	r9, [sp, #104]	; 0x68
   1687c:	ldr	sl, [sp, #108]	; 0x6c
   16880:	ldr	r8, [sp, #76]	; 0x4c
   16884:	ldr	r5, [sp, #72]	; 0x48
   16888:	add	r0, sp, #112	; 0x70
   1688c:	bl	1d054 <__assert_fail@plt+0xbb40>
   16890:	ldr	r0, [fp, #-212]	; 0xffffff2c
   16894:	ldr	r7, [sp, #56]	; 0x38
   16898:	mov	r2, #1
   1689c:	add	r4, r0, r8
   168a0:	cmp	r4, r7
   168a4:	str	r4, [fp, #-212]	; 0xffffff2c
   168a8:	blt	172a8 <__assert_fail@plt+0x5d94>
   168ac:	ldr	r6, [sp, #100]	; 0x64
   168b0:	ldr	r1, [sp, #44]	; 0x2c
   168b4:	cmp	r5, r4
   168b8:	bge	15ebc <__assert_fail@plt+0x49a8>
   168bc:	b	172a8 <__assert_fail@plt+0x5d94>
   168c0:	ldr	r8, [r4, #48]	; 0x30
   168c4:	b	16108 <__assert_fail@plt+0x4bf4>
   168c8:	ldr	r8, [r4, #44]	; 0x2c
   168cc:	b	16108 <__assert_fail@plt+0x4bf4>
   168d0:	sxtb	r0, r0
   168d4:	cmn	r0, #1
   168d8:	ble	16924 <__assert_fail@plt+0x5410>
   168dc:	ldr	r0, [sp, #60]	; 0x3c
   168e0:	mov	r2, #1
   168e4:	str	r7, [sp, #88]	; 0x58
   168e8:	b	1695c <__assert_fail@plt+0x5448>
   168ec:	add	r6, r8, #4
   168f0:	add	r0, sp, #112	; 0x70
   168f4:	mov	r2, #0
   168f8:	mov	r1, r6
   168fc:	bl	1d1d8 <__assert_fail@plt+0xbcc4>
   16900:	cmp	r0, #0
   16904:	str	r0, [fp, #-64]	; 0xffffffc0
   16908:	bne	169d0 <__assert_fail@plt+0x54bc>
   1690c:	ldrb	r0, [r8, #52]	; 0x34
   16910:	tst	r0, #64	; 0x40
   16914:	bne	16970 <__assert_fail@plt+0x545c>
   16918:	ldr	sl, [sp, #108]	; 0x6c
   1691c:	mov	r6, #0
   16920:	b	16134 <__assert_fail@plt+0x4c20>
   16924:	add	r0, sp, #112	; 0x70
   16928:	mov	r1, r8
   1692c:	mov	r2, r7
   16930:	bl	1cf94 <__assert_fail@plt+0xba80>
   16934:	cmp	r0, #0
   16938:	ldr	r1, [sp, #60]	; 0x3c
   1693c:	mov	r2, r0
   16940:	mov	r0, r7
   16944:	mvneq	r0, #0
   16948:	str	r0, [sp, #88]	; 0x58
   1694c:	clz	r0, r2
   16950:	movwne	r2, #1
   16954:	lsr	r0, r0, #5
   16958:	orr	r0, r1, r0
   1695c:	cmp	r0, #0
   16960:	bne	1614c <__assert_fail@plt+0x4c38>
   16964:	ldr	r8, [sp, #76]	; 0x4c
   16968:	ldr	r5, [sp, #72]	; 0x48
   1696c:	b	165a4 <__assert_fail@plt+0x5090>
   16970:	add	r0, sp, #112	; 0x70
   16974:	mov	r1, r6
   16978:	bl	1d2d0 <__assert_fail@plt+0xbdbc>
   1697c:	ldr	sl, [sp, #108]	; 0x6c
   16980:	cmp	r0, #0
   16984:	mov	r6, #0
   16988:	str	r0, [fp, #-64]	; 0xffffffc0
   1698c:	beq	16134 <__assert_fail@plt+0x4c20>
   16990:	b	169d4 <__assert_fail@plt+0x54c0>
   16994:	ldr	r8, [sp, #84]	; 0x54
   16998:	mov	r0, sl
   1699c:	bl	22190 <__assert_fail@plt+0x10c7c>
   169a0:	mov	r0, r9
   169a4:	bl	22190 <__assert_fail@plt+0x10c7c>
   169a8:	ldr	r9, [sp, #104]	; 0x68
   169ac:	cmp	r4, #0
   169b0:	beq	16a0c <__assert_fail@plt+0x54f8>
   169b4:	ldr	sl, [sp, #108]	; 0x6c
   169b8:	ldr	r8, [sp, #76]	; 0x4c
   169bc:	ldr	r5, [sp, #72]	; 0x48
   169c0:	mov	r2, r4
   169c4:	cmp	r4, #1
   169c8:	beq	16888 <__assert_fail@plt+0x5374>
   169cc:	b	172a8 <__assert_fail@plt+0x5d94>
   169d0:	ldr	sl, [sp, #108]	; 0x6c
   169d4:	ldr	r8, [sp, #76]	; 0x4c
   169d8:	ldr	r5, [sp, #72]	; 0x48
   169dc:	mov	r7, r0
   169e0:	b	165a4 <__assert_fail@plt+0x5090>
   169e4:	ldr	r0, [sp, #212]	; 0xd4
   169e8:	bl	22190 <__assert_fail@plt+0x10c7c>
   169ec:	mov	r0, #0
   169f0:	str	r5, [sp, #208]	; 0xd0
   169f4:	str	sl, [sp, #212]	; 0xd4
   169f8:	str	r6, [sp, #204]	; 0xcc
   169fc:	bl	22190 <__assert_fail@plt+0x10c7c>
   16a00:	mov	r0, #0
   16a04:	bl	22190 <__assert_fail@plt+0x10c7c>
   16a08:	ldr	r8, [sp, #84]	; 0x54
   16a0c:	cmp	r8, #0
   16a10:	beq	172a4 <__assert_fail@plt+0x5d90>
   16a14:	ldr	r4, [fp, #20]
   16a18:	cmp	r8, #1
   16a1c:	beq	16a40 <__assert_fail@plt+0x552c>
   16a20:	ldr	r0, [sp, #32]
   16a24:	ldr	r1, [fp, #16]
   16a28:	mvn	r0, r0
   16a2c:	add	r0, r0, r1
   16a30:	mov	r1, #255	; 0xff
   16a34:	lsl	r2, r0, #3
   16a38:	add	r0, r4, #8
   16a3c:	bl	11418 <memset@plt>
   16a40:	cmp	r8, #2
   16a44:	mov	r0, #0
   16a48:	ldr	r1, [sp, #204]	; 0xcc
   16a4c:	stm	r4, {r0, r1}
   16a50:	bcc	1718c <__assert_fail@plt+0x5c78>
   16a54:	ldr	r0, [sp, #68]	; 0x44
   16a58:	ldrb	r0, [r0, #28]
   16a5c:	ands	r0, r0, #16
   16a60:	bne	1718c <__assert_fail@plt+0x5c78>
   16a64:	ldr	r2, [sp, #96]	; 0x60
   16a68:	mov	r0, #0
   16a6c:	ldrb	r1, [r2, #88]	; 0x58
   16a70:	tst	r1, #1
   16a74:	mov	r1, #0
   16a78:	beq	16a8c <__assert_fail@plt+0x5578>
   16a7c:	ldr	r2, [r2, #76]	; 0x4c
   16a80:	mov	r1, #0
   16a84:	cmp	r2, #0
   16a88:	movwgt	r1, #1
   16a8c:	ldr	r2, [sp, #68]	; 0x44
   16a90:	ldr	r5, [sp, #84]	; 0x54
   16a94:	ldr	r4, [fp, #20]
   16a98:	cmp	r1, #0
   16a9c:	mov	r6, #0
   16aa0:	ldr	r8, [r2]
   16aa4:	movw	r2, #13608	; 0x3528
   16aa8:	movt	r2, #2
   16aac:	vldr	d16, [r2]
   16ab0:	ldr	r2, [r2, #8]
   16ab4:	str	r2, [fp, #-56]	; 0xffffffc8
   16ab8:	sub	r2, fp, #208	; 0xd0
   16abc:	add	sl, r2, #12
   16ac0:	mov	r2, #16
   16ac4:	vstr	d16, [fp, #-64]	; 0xffffffc0
   16ac8:	str	sl, [fp, #-200]	; 0xffffff38
   16acc:	str	r2, [fp, #-204]	; 0xffffff34
   16ad0:	str	r0, [fp, #-208]	; 0xffffff30
   16ad4:	beq	16af4 <__assert_fail@plt+0x55e0>
   16ad8:	mov	r0, #48	; 0x30
   16adc:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   16ae0:	cmp	r0, #0
   16ae4:	str	r0, [fp, #-56]	; 0xffffffc8
   16ae8:	beq	172f8 <__assert_fail@plt+0x5de4>
   16aec:	ldr	r0, [fp, #-208]	; 0xffffff30
   16af0:	sub	r6, fp, #64	; 0x40
   16af4:	ldr	r9, [r8, #72]	; 0x48
   16af8:	mov	r1, #0
   16afc:	cmp	r0, r5
   16b00:	str	r1, [fp, #-44]	; 0xffffffd4
   16b04:	str	r1, [fp, #-48]	; 0xffffffd0
   16b08:	str	r1, [fp, #-40]	; 0xffffffd8
   16b0c:	bcs	16b80 <__assert_fail@plt+0x566c>
   16b10:	sub	r0, fp, #208	; 0xd0
   16b14:	mov	r1, r5
   16b18:	mov	r2, sl
   16b1c:	mov	r3, #8
   16b20:	bl	220d4 <__assert_fail@plt+0x10bc0>
   16b24:	cmp	r0, #0
   16b28:	bne	16b84 <__assert_fail@plt+0x5670>
   16b2c:	ldr	r0, [fp, #-200]	; 0xffffff38
   16b30:	mov	r4, #12
   16b34:	mov	r5, sl
   16b38:	cmp	r0, sl
   16b3c:	beq	16b44 <__assert_fail@plt+0x5630>
   16b40:	bl	22190 <__assert_fail@plt+0x10c7c>
   16b44:	mov	sl, r5
   16b48:	b	17164 <__assert_fail@plt+0x5c50>
   16b4c:	ldr	r1, [r3, #8]
   16b50:	cmp	r1, #0
   16b54:	beq	16b64 <__assert_fail@plt+0x5650>
   16b58:	ldrsb	r1, [r6, #28]
   16b5c:	cmp	r1, #0
   16b60:	bmi	15bf8 <__assert_fail@plt+0x46e4>
   16b64:	mov	r0, #0
   16b68:	cmp	r4, #0
   16b6c:	beq	172f0 <__assert_fail@plt+0x5ddc>
   16b70:	cmp	ip, #0
   16b74:	mov	r4, #0
   16b78:	bne	172e4 <__assert_fail@plt+0x5dd0>
   16b7c:	b	15bfc <__assert_fail@plt+0x46e8>
   16b80:	str	r5, [fp, #-208]	; 0xffffff30
   16b84:	ldr	r7, [fp, #-200]	; 0xffffff38
   16b88:	lsl	r2, r5, #3
   16b8c:	mov	r1, r4
   16b90:	str	r2, [sp, #104]	; 0x68
   16b94:	mov	r0, r7
   16b98:	bl	112a4 <memcpy@plt>
   16b9c:	ldr	r3, [r4]
   16ba0:	ldr	r0, [r4, #4]
   16ba4:	cmp	r3, r0
   16ba8:	mov	r0, #0
   16bac:	str	r3, [fp, #-36]	; 0xffffffdc
   16bb0:	ble	16bc0 <__assert_fail@plt+0x56ac>
   16bb4:	mov	r4, #0
   16bb8:	bl	22190 <__assert_fail@plt+0x10c7c>
   16bbc:	b	17154 <__assert_fail@plt+0x5c40>
   16bc0:	lsl	r0, r5, #4
   16bc4:	str	r6, [sp, #108]	; 0x6c
   16bc8:	str	r8, [sp, #92]	; 0x5c
   16bcc:	str	r7, [sp, #100]	; 0x64
   16bd0:	str	r0, [sp, #88]	; 0x58
   16bd4:	ldr	r0, [r8]
   16bd8:	add	r1, r0, r9, lsl #3
   16bdc:	ldr	r1, [r1, #4]
   16be0:	uxtb	r2, r1
   16be4:	cmp	r2, #9
   16be8:	beq	16c18 <__assert_fail@plt+0x5704>
   16bec:	cmp	r2, #8
   16bf0:	bne	16c88 <__assert_fail@plt+0x5774>
   16bf4:	ldr	r0, [r0, r9, lsl #3]
   16bf8:	add	r0, r0, #1
   16bfc:	cmp	r0, r5
   16c00:	bge	16c88 <__assert_fail@plt+0x5774>
   16c04:	mov	r1, r4
   16c08:	str	r3, [r1, r0, lsl #3]!
   16c0c:	mvn	r0, #0
   16c10:	str	r0, [r1, #4]
   16c14:	b	16c88 <__assert_fail@plt+0x5774>
   16c18:	ldr	r0, [r0, r9, lsl #3]
   16c1c:	add	r0, r0, #1
   16c20:	cmp	r0, r5
   16c24:	bge	16c88 <__assert_fail@plt+0x5774>
   16c28:	ldr	r2, [r4, r0, lsl #3]
   16c2c:	cmp	r2, r3
   16c30:	bge	16c48 <__assert_fail@plt+0x5734>
   16c34:	add	r0, r4, r0, lsl #3
   16c38:	mov	r1, r4
   16c3c:	str	r3, [r0, #4]
   16c40:	mov	r0, r7
   16c44:	b	16c64 <__assert_fail@plt+0x5750>
   16c48:	tst	r1, #524288	; 0x80000
   16c4c:	beq	16c80 <__assert_fail@plt+0x576c>
   16c50:	ldr	r1, [r7, r0, lsl #3]
   16c54:	cmn	r1, #1
   16c58:	beq	16c80 <__assert_fail@plt+0x576c>
   16c5c:	mov	r0, r4
   16c60:	mov	r1, r7
   16c64:	ldr	r2, [sp, #104]	; 0x68
   16c68:	str	sl, [sp, #80]	; 0x50
   16c6c:	mov	sl, r3
   16c70:	bl	112a4 <memcpy@plt>
   16c74:	mov	r3, sl
   16c78:	ldr	sl, [sp, #80]	; 0x50
   16c7c:	b	16c88 <__assert_fail@plt+0x5774>
   16c80:	add	r0, r4, r0, lsl #3
   16c84:	str	r3, [r0, #4]
   16c88:	ldr	r0, [r4, #4]
   16c8c:	cmp	r3, r0
   16c90:	ldreq	r0, [sp, #208]	; 0xd0
   16c94:	cmpeq	r9, r0
   16c98:	beq	16cbc <__assert_fail@plt+0x57a8>
   16c9c:	cmp	r6, #0
   16ca0:	beq	16d20 <__assert_fail@plt+0x580c>
   16ca4:	sub	r0, fp, #48	; 0x30
   16ca8:	mov	r1, r9
   16cac:	bl	1c41c <__assert_fail@plt+0xaf08>
   16cb0:	cmp	r0, #0
   16cb4:	bne	16cc4 <__assert_fail@plt+0x57b0>
   16cb8:	b	16d20 <__assert_fail@plt+0x580c>
   16cbc:	cmp	r6, #0
   16cc0:	beq	17148 <__assert_fail@plt+0x5c34>
   16cc4:	mov	r0, #0
   16cc8:	ldr	r1, [r4, r0, lsl #3]
   16ccc:	cmp	r1, #0
   16cd0:	bmi	16ce4 <__assert_fail@plt+0x57d0>
   16cd4:	add	r1, r4, r0, lsl #3
   16cd8:	ldr	r1, [r1, #4]
   16cdc:	cmn	r1, #1
   16ce0:	beq	16cf4 <__assert_fail@plt+0x57e0>
   16ce4:	add	r0, r0, #1
   16ce8:	cmp	r5, r0
   16cec:	bne	16cc8 <__assert_fail@plt+0x57b4>
   16cf0:	b	17148 <__assert_fail@plt+0x5c34>
   16cf4:	sub	r0, fp, #48	; 0x30
   16cf8:	sub	r1, fp, #36	; 0x24
   16cfc:	mov	r2, r5
   16d00:	mov	r3, r4
   16d04:	str	r7, [sp]
   16d08:	str	r0, [sp, #4]
   16d0c:	mov	r0, r6
   16d10:	bl	20e34 <__assert_fail@plt+0xf920>
   16d14:	mov	r9, r0
   16d18:	cmn	r0, #1
   16d1c:	ble	17148 <__assert_fail@plt+0x5c34>
   16d20:	ldr	r4, [sp, #196]	; 0xc4
   16d24:	ldr	r0, [r4]
   16d28:	add	r1, r0, r9, lsl #3
   16d2c:	ldr	r1, [r1, #4]
   16d30:	tst	r1, #8
   16d34:	bne	16df0 <__assert_fail@plt+0x58dc>
   16d38:	tst	r1, #1048576	; 0x100000
   16d3c:	bne	16e84 <__assert_fail@plt+0x5970>
   16d40:	uxtb	r1, r1
   16d44:	cmp	r1, #4
   16d48:	bne	16eac <__assert_fail@plt+0x5998>
   16d4c:	ldr	r0, [r0, r9, lsl #3]
   16d50:	mov	r7, #0
   16d54:	add	r0, r0, #1
   16d58:	cmp	r0, r5
   16d5c:	bge	16d70 <__assert_fail@plt+0x585c>
   16d60:	ldr	r1, [fp, #20]
   16d64:	ldr	r2, [r1, r0, lsl #3]!
   16d68:	ldr	r1, [r1, #4]
   16d6c:	sub	r7, r1, r2
   16d70:	cmp	r6, #0
   16d74:	beq	16f94 <__assert_fail@plt+0x5a80>
   16d78:	cmp	r0, r5
   16d7c:	bge	16f30 <__assert_fail@plt+0x5a1c>
   16d80:	ldr	r1, [fp, #20]
   16d84:	ldr	r1, [r1, r0, lsl #3]
   16d88:	cmn	r1, #1
   16d8c:	beq	16f30 <__assert_fail@plt+0x5a1c>
   16d90:	ldr	r2, [fp, #20]
   16d94:	add	r0, r2, r0, lsl #3
   16d98:	ldr	r0, [r0, #4]
   16d9c:	cmn	r0, #1
   16da0:	beq	16f30 <__assert_fail@plt+0x5a1c>
   16da4:	cmp	r7, #0
   16da8:	beq	17040 <__assert_fail@plt+0x5b2c>
   16dac:	ldr	r5, [fp, #-36]	; 0xffffffdc
   16db0:	ldr	r0, [sp, #140]	; 0x8c
   16db4:	sub	r0, r0, r5
   16db8:	cmp	r0, r7
   16dbc:	blt	16f30 <__assert_fail@plt+0x5a1c>
   16dc0:	ldr	r2, [sp, #116]	; 0x74
   16dc4:	add	r0, r2, r1
   16dc8:	add	r1, r2, r5
   16dcc:	mov	r2, r7
   16dd0:	bl	113d0 <bcmp@plt>
   16dd4:	cmp	r0, #0
   16dd8:	bne	16f30 <__assert_fail@plt+0x5a1c>
   16ddc:	ldr	r0, [r4, #12]
   16de0:	add	r3, r5, r7
   16de4:	ldr	r8, [r0, r9, lsl #2]
   16de8:	str	r3, [fp, #-36]	; 0xffffffdc
   16dec:	b	16ef8 <__assert_fail@plt+0x59e4>
   16df0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16df4:	ldr	r0, [sp, #212]	; 0xd4
   16df8:	ldr	r4, [r4, #20]
   16dfc:	ldr	r6, [r0, r1, lsl #2]
   16e00:	str	r1, [sp, #80]	; 0x50
   16e04:	sub	r0, fp, #48	; 0x30
   16e08:	mov	r1, r9
   16e0c:	bl	1c41c <__assert_fail@plt+0xaf08>
   16e10:	cmp	r0, #0
   16e14:	bne	16e2c <__assert_fail@plt+0x5918>
   16e18:	sub	r0, fp, #48	; 0x30
   16e1c:	mov	r1, r9
   16e20:	bl	1c204 <__assert_fail@plt+0xacf0>
   16e24:	cmp	r0, #0
   16e28:	beq	17124 <__assert_fail@plt+0x5c10>
   16e2c:	add	r0, r9, r9, lsl #1
   16e30:	add	r0, r4, r0, lsl #2
   16e34:	ldr	r5, [r0, #4]
   16e38:	cmp	r5, #1
   16e3c:	blt	16f30 <__assert_fail@plt+0x5a1c>
   16e40:	ldr	r7, [r0, #8]
   16e44:	add	r6, r6, #4
   16e48:	mvn	r4, #0
   16e4c:	ldr	r8, [r7]
   16e50:	mov	r0, r6
   16e54:	mov	r1, r8
   16e58:	bl	1c41c <__assert_fail@plt+0xaf08>
   16e5c:	cmp	r0, #0
   16e60:	beq	16e70 <__assert_fail@plt+0x595c>
   16e64:	cmn	r4, #1
   16e68:	bne	16f78 <__assert_fail@plt+0x5a64>
   16e6c:	mov	r4, r8
   16e70:	add	r7, r7, #4
   16e74:	subs	r5, r5, #1
   16e78:	bne	16e4c <__assert_fail@plt+0x5938>
   16e7c:	mov	r8, r4
   16e80:	b	16f8c <__assert_fail@plt+0x5a78>
   16e84:	ldr	r5, [fp, #-36]	; 0xffffffdc
   16e88:	mov	r0, r4
   16e8c:	mov	r1, r9
   16e90:	add	r2, sp, #112	; 0x70
   16e94:	mov	r3, r5
   16e98:	bl	1ed1c <__assert_fail@plt+0xd808>
   16e9c:	mov	r3, r5
   16ea0:	cmp	r0, #0
   16ea4:	bne	16edc <__assert_fail@plt+0x59c8>
   16ea8:	b	16eb0 <__assert_fail@plt+0x599c>
   16eac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16eb0:	ldr	r0, [r4]
   16eb4:	mov	r2, r3
   16eb8:	mov	r5, r3
   16ebc:	add	r1, r0, r9, lsl #3
   16ec0:	add	r0, sp, #112	; 0x70
   16ec4:	bl	1f014 <__assert_fail@plt+0xdb00>
   16ec8:	mov	r1, r0
   16ecc:	mov	r3, r5
   16ed0:	mov	r0, #1
   16ed4:	cmp	r1, #0
   16ed8:	beq	16f30 <__assert_fail@plt+0x5a1c>
   16edc:	ldr	r1, [r4, #12]
   16ee0:	add	r3, r0, r3
   16ee4:	ldr	r0, [sp, #108]	; 0x6c
   16ee8:	ldr	r8, [r1, r9, lsl #2]
   16eec:	cmp	r0, #0
   16ef0:	str	r3, [fp, #-36]	; 0xffffffdc
   16ef4:	beq	16fb0 <__assert_fail@plt+0x5a9c>
   16ef8:	ldr	r0, [sp, #204]	; 0xcc
   16efc:	cmp	r3, r0
   16f00:	bgt	16f30 <__assert_fail@plt+0x5a1c>
   16f04:	ldr	r0, [sp, #212]	; 0xd4
   16f08:	ldr	r0, [r0, r3, lsl #2]
   16f0c:	cmp	r0, #0
   16f10:	beq	16f30 <__assert_fail@plt+0x5a1c>
   16f14:	add	r0, r0, #4
   16f18:	mov	r1, r8
   16f1c:	mov	r4, r3
   16f20:	bl	1c41c <__assert_fail@plt+0xaf08>
   16f24:	mov	r3, r4
   16f28:	cmp	r0, #0
   16f2c:	bne	16fb0 <__assert_fail@plt+0x5a9c>
   16f30:	ldr	r5, [sp, #84]	; 0x54
   16f34:	ldr	r4, [fp, #20]
   16f38:	ldr	r6, [sp, #108]	; 0x6c
   16f3c:	ldr	r7, [sp, #100]	; 0x64
   16f40:	sub	r0, fp, #48	; 0x30
   16f44:	sub	r1, fp, #36	; 0x24
   16f48:	str	r0, [sp, #4]
   16f4c:	mov	r0, r6
   16f50:	mov	r2, r5
   16f54:	mov	r3, r4
   16f58:	str	r7, [sp]
   16f5c:	bl	20e34 <__assert_fail@plt+0xf920>
   16f60:	cmp	r0, #0
   16f64:	bmi	17310 <__assert_fail@plt+0x5dfc>
   16f68:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16f6c:	ldr	r8, [sp, #92]	; 0x5c
   16f70:	mov	r9, r0
   16f74:	b	16fd8 <__assert_fail@plt+0x5ac4>
   16f78:	sub	r0, fp, #48	; 0x30
   16f7c:	mov	r1, r4
   16f80:	bl	1c41c <__assert_fail@plt+0xaf08>
   16f84:	cmp	r0, #0
   16f88:	beq	16fe8 <__assert_fail@plt+0x5ad4>
   16f8c:	ldr	r3, [sp, #80]	; 0x50
   16f90:	b	16fb8 <__assert_fail@plt+0x5aa4>
   16f94:	cmp	r7, #0
   16f98:	beq	17040 <__assert_fail@plt+0x5b2c>
   16f9c:	ldr	r0, [r4, #12]
   16fa0:	ldr	r8, [r0, r9, lsl #2]
   16fa4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16fa8:	add	r3, r0, r7
   16fac:	str	r3, [fp, #-36]	; 0xffffffdc
   16fb0:	mov	r0, #0
   16fb4:	str	r0, [fp, #-44]	; 0xffffffd4
   16fb8:	cmn	r8, #1
   16fbc:	ble	1711c <__assert_fail@plt+0x5c08>
   16fc0:	mov	r9, r8
   16fc4:	ldr	r5, [sp, #84]	; 0x54
   16fc8:	ldr	r4, [fp, #20]
   16fcc:	ldr	r6, [sp, #108]	; 0x6c
   16fd0:	ldr	r8, [sp, #92]	; 0x5c
   16fd4:	ldr	r7, [sp, #100]	; 0x64
   16fd8:	ldr	r0, [r4, #4]
   16fdc:	cmp	r3, r0
   16fe0:	ble	16bd4 <__assert_fail@plt+0x56c0>
   16fe4:	b	17300 <__assert_fail@plt+0x5dec>
   16fe8:	ldr	r7, [sp, #108]	; 0x6c
   16fec:	ldr	r3, [sp, #80]	; 0x50
   16ff0:	cmp	r7, #0
   16ff4:	beq	17090 <__assert_fail@plt+0x5b7c>
   16ff8:	ldr	r5, [r7]
   16ffc:	ldr	r0, [r7, #4]
   17000:	add	r1, r5, #1
   17004:	cmp	r1, r0
   17008:	str	r1, [r7]
   1700c:	bne	17098 <__assert_fail@plt+0x5b84>
   17010:	ldr	r0, [r7, #8]
   17014:	add	r1, r1, r1, lsl #1
   17018:	lsl	r1, r1, #4
   1701c:	bl	22004 <__assert_fail@plt+0x10af0>
   17020:	cmp	r0, #0
   17024:	beq	17114 <__assert_fail@plt+0x5c00>
   17028:	str	r0, [r7, #8]
   1702c:	ldr	r3, [sp, #80]	; 0x50
   17030:	ldr	r1, [r7, #4]
   17034:	lsl	r1, r1, #1
   17038:	str	r1, [r7, #4]
   1703c:	b	1709c <__assert_fail@plt+0x5b88>
   17040:	sub	r0, fp, #48	; 0x30
   17044:	mov	r1, r9
   17048:	bl	1c204 <__assert_fail@plt+0xacf0>
   1704c:	cmp	r0, #0
   17050:	beq	17124 <__assert_fail@plt+0x5c10>
   17054:	ldr	r0, [r4, #20]
   17058:	add	r1, r9, r9, lsl #1
   1705c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   17060:	add	r0, r0, r1, lsl #2
   17064:	ldr	r0, [r0, #8]
   17068:	ldr	r8, [r0]
   1706c:	ldr	r0, [sp, #212]	; 0xd4
   17070:	ldr	r0, [r0, r5, lsl #2]
   17074:	mov	r1, r8
   17078:	add	r0, r0, #4
   1707c:	bl	1c41c <__assert_fail@plt+0xaf08>
   17080:	mov	r3, r5
   17084:	cmp	r0, #0
   17088:	bne	16fb8 <__assert_fail@plt+0x5aa4>
   1708c:	b	16eb0 <__assert_fail@plt+0x599c>
   17090:	mov	r8, r4
   17094:	b	16fb8 <__assert_fail@plt+0x5aa4>
   17098:	ldr	r0, [r7, #8]
   1709c:	add	r5, r5, r5, lsl #1
   170a0:	str	r3, [r0, r5, lsl #3]!
   170a4:	str	r8, [r0, #4]
   170a8:	ldr	r0, [sp, #88]	; 0x58
   170ac:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   170b0:	ldr	r1, [r7, #8]
   170b4:	mvn	r8, #1
   170b8:	cmp	r0, #0
   170bc:	add	r6, r1, r5, lsl #3
   170c0:	str	r0, [r6, #8]!
   170c4:	beq	16f8c <__assert_fail@plt+0x5a78>
   170c8:	ldr	r9, [sp, #104]	; 0x68
   170cc:	ldr	r1, [fp, #20]
   170d0:	mov	r2, r9
   170d4:	bl	112a4 <memcpy@plt>
   170d8:	ldr	r0, [r6]
   170dc:	ldr	r1, [sp, #84]	; 0x54
   170e0:	mov	r2, r9
   170e4:	add	r0, r0, r1, lsl #3
   170e8:	ldr	r1, [sp, #100]	; 0x64
   170ec:	bl	112a4 <memcpy@plt>
   170f0:	ldr	r0, [r7, #8]
   170f4:	sub	r1, fp, #48	; 0x30
   170f8:	add	r0, r0, r5, lsl #3
   170fc:	add	r0, r0, #12
   17100:	bl	1c3a0 <__assert_fail@plt+0xae8c>
   17104:	ldr	r3, [sp, #80]	; 0x50
   17108:	cmp	r0, #0
   1710c:	moveq	r8, r4
   17110:	b	16fb8 <__assert_fail@plt+0x5aa4>
   17114:	mvn	r8, #1
   17118:	b	16f8c <__assert_fail@plt+0x5a78>
   1711c:	cmn	r8, #2
   17120:	bne	16f30 <__assert_fail@plt+0x5a1c>
   17124:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17128:	bl	22190 <__assert_fail@plt+0x10c7c>
   1712c:	ldr	r0, [fp, #-200]	; 0xffffff38
   17130:	mov	r4, #12
   17134:	cmp	r0, sl
   17138:	beq	17140 <__assert_fail@plt+0x5c2c>
   1713c:	bl	22190 <__assert_fail@plt+0x10c7c>
   17140:	ldr	r6, [sp, #108]	; 0x6c
   17144:	b	17164 <__assert_fail@plt+0x5c50>
   17148:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1714c:	bl	22190 <__assert_fail@plt+0x10c7c>
   17150:	mov	r4, #0
   17154:	ldr	r0, [fp, #-200]	; 0xffffff38
   17158:	cmp	r0, sl
   1715c:	beq	17164 <__assert_fail@plt+0x5c50>
   17160:	bl	22190 <__assert_fail@plt+0x10c7c>
   17164:	mov	r0, #16
   17168:	str	sl, [fp, #-200]	; 0xffffff38
   1716c:	str	r0, [fp, #-204]	; 0xffffff34
   17170:	mov	r0, #0
   17174:	str	r0, [fp, #-208]	; 0xffffff30
   17178:	mov	r0, r6
   1717c:	bl	20dcc <__assert_fail@plt+0xf8b8>
   17180:	mov	r2, r4
   17184:	cmp	r2, #0
   17188:	bne	172a8 <__assert_fail@plt+0x5d94>
   1718c:	ldr	r0, [fp, #20]
   17190:	ldrb	r1, [sp, #188]	; 0xbc
   17194:	ldr	r2, [fp, #16]
   17198:	ldr	r8, [sp, #96]	; 0x60
   1719c:	ldr	r4, [sp, #32]
   171a0:	add	r0, r0, #4
   171a4:	ldr	r3, [r0, #-4]
   171a8:	cmn	r3, #1
   171ac:	beq	171cc <__assert_fail@plt+0x5cb8>
   171b0:	cmp	r1, #0
   171b4:	bne	171e0 <__assert_fail@plt+0x5ccc>
   171b8:	ldr	r7, [r0]
   171bc:	ldr	r6, [fp, #-212]	; 0xffffff2c
   171c0:	add	r3, r3, r6
   171c4:	add	r7, r7, r6
   171c8:	stmda	r0, {r3, r7}
   171cc:	sub	r2, r2, #1
   171d0:	add	r0, r0, #8
   171d4:	cmp	r4, r2
   171d8:	bne	171a4 <__assert_fail@plt+0x5c90>
   171dc:	b	17218 <__assert_fail@plt+0x5d04>
   171e0:	ldr	r7, [sp, #140]	; 0x8c
   171e4:	ldr	r6, [sp, #28]
   171e8:	ldr	ip, [sp, #124]	; 0x7c
   171ec:	cmp	r3, r7
   171f0:	mov	r5, r6
   171f4:	addne	r5, ip, r3, lsl #2
   171f8:	ldr	r3, [r5]
   171fc:	str	r3, [r0, #-4]
   17200:	ldr	r5, [r0]
   17204:	cmp	r5, r7
   17208:	addne	r6, ip, r5, lsl #2
   1720c:	ldr	r7, [r6]
   17210:	str	r7, [r0]
   17214:	b	171bc <__assert_fail@plt+0x5ca8>
   17218:	cmp	r4, #1
   1721c:	blt	17238 <__assert_fail@plt+0x5d24>
   17220:	ldr	r0, [sp, #84]	; 0x54
   17224:	ldr	r1, [fp, #20]
   17228:	lsl	r2, r4, #3
   1722c:	add	r0, r1, r0, lsl #3
   17230:	mov	r1, #255	; 0xff
   17234:	bl	11418 <memset@plt>
   17238:	ldr	r0, [r8, #132]	; 0x84
   1723c:	mov	r2, #0
   17240:	cmp	r0, #0
   17244:	beq	172a8 <__assert_fail@plt+0x5d94>
   17248:	ldr	r1, [sp, #84]	; 0x54
   1724c:	cmp	r1, #2
   17250:	bcc	172a8 <__assert_fail@plt+0x5d94>
   17254:	ldr	r1, [sp, #32]
   17258:	ldr	r2, [fp, #16]
   1725c:	ldr	r6, [fp, #20]
   17260:	mvn	r1, r1
   17264:	add	r1, r1, r2
   17268:	mov	r2, #0
   1726c:	ldr	r3, [r0, r2, lsl #2]
   17270:	cmp	r2, r3
   17274:	beq	17298 <__assert_fail@plt+0x5d84>
   17278:	add	r3, r6, r3, lsl #3
   1727c:	add	r7, r6, r2, lsl #3
   17280:	ldr	r3, [r3, #8]
   17284:	str	r3, [r7, #8]
   17288:	ldr	r3, [r0, r2, lsl #2]
   1728c:	add	r3, r6, r3, lsl #3
   17290:	ldr	r3, [r3, #12]
   17294:	str	r3, [r7, #12]
   17298:	add	r2, r2, #1
   1729c:	cmp	r1, r2
   172a0:	bne	1726c <__assert_fail@plt+0x5d58>
   172a4:	mov	r2, #0
   172a8:	ldr	r0, [sp, #212]	; 0xd4
   172ac:	mov	sl, r2
   172b0:	bl	22190 <__assert_fail@plt+0x10c7c>
   172b4:	ldr	r0, [sp, #96]	; 0x60
   172b8:	ldr	r0, [r0, #76]	; 0x4c
   172bc:	cmp	r0, #0
   172c0:	beq	172dc <__assert_fail@plt+0x5dc8>
   172c4:	add	r0, sp, #112	; 0x70
   172c8:	bl	1d054 <__assert_fail@plt+0xbb40>
   172cc:	ldr	r0, [sp, #244]	; 0xf4
   172d0:	bl	22190 <__assert_fail@plt+0x10c7c>
   172d4:	ldr	r0, [sp, #228]	; 0xe4
   172d8:	bl	22190 <__assert_fail@plt+0x10c7c>
   172dc:	add	r0, sp, #112	; 0x70
   172e0:	bl	1799c <__assert_fail@plt+0x6488>
   172e4:	mov	r0, sl
   172e8:	sub	sp, fp, #28
   172ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f0:	mov	r4, #0
   172f4:	b	15bfc <__assert_fail@plt+0x46e8>
   172f8:	mov	r2, #12
   172fc:	b	17184 <__assert_fail@plt+0x5c70>
   17300:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17304:	b	16bb4 <__assert_fail@plt+0x56a0>
   17308:	mov	r2, r0
   1730c:	b	172a8 <__assert_fail@plt+0x5d94>
   17310:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17314:	bl	22190 <__assert_fail@plt+0x10c7c>
   17318:	mov	r4, #1
   1731c:	b	17154 <__assert_fail@plt+0x5c40>
   17320:	mov	r0, sl
   17324:	bl	22190 <__assert_fail@plt+0x10c7c>
   17328:	mov	r0, #0
   1732c:	bl	22190 <__assert_fail@plt+0x10c7c>
   17330:	mov	r2, #12
   17334:	b	172a8 <__assert_fail@plt+0x5d94>
   17338:	mov	r2, #1
   1733c:	b	172a8 <__assert_fail@plt+0x5d94>
   17340:	push	{fp, lr}
   17344:	mov	fp, sp
   17348:	sub	sp, sp, #16
   1734c:	mov	ip, #1
   17350:	str	r2, [sp, #4]
   17354:	str	ip, [sp, #12]
   17358:	mov	ip, #0
   1735c:	str	ip, [sp]
   17360:	ldr	ip, [fp, #8]
   17364:	str	ip, [sp, #8]
   17368:	bl	17374 <__assert_fail@plt+0x5e60>
   1736c:	mov	sp, fp
   17370:	pop	{fp, pc}
   17374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17378:	add	fp, sp, #28
   1737c:	sub	sp, sp, #44	; 0x2c
   17380:	mvn	r6, #0
   17384:	cmp	r3, #0
   17388:	bmi	17638 <__assert_fail@plt+0x6124>
   1738c:	mov	r5, r3
   17390:	mov	r9, r2
   17394:	cmp	r3, r2
   17398:	bgt	17638 <__assert_fail@plt+0x6124>
   1739c:	mov	r7, r0
   173a0:	ldr	r0, [fp, #8]
   173a4:	mov	sl, r1
   173a8:	movw	r1, #0
   173ac:	mov	r8, r9
   173b0:	ldr	r6, [r7]
   173b4:	movt	r1, #0
   173b8:	add	r0, r0, r5
   173bc:	cmp	r0, r9
   173c0:	bicle	r8, r0, r0, asr #31
   173c4:	movw	r0, #0
   173c8:	movt	r0, #0
   173cc:	orrs	r4, r1, r0
   173d0:	beq	173dc <__assert_fail@plt+0x5ec8>
   173d4:	add	r0, r6, #136	; 0x88
   173d8:	bl	1128c <pthread_mutex_lock@plt>
   173dc:	ldrb	r0, [r7, #28]
   173e0:	str	r6, [sp, #24]
   173e4:	ldr	r6, [fp, #16]
   173e8:	cmp	r8, r5
   173ec:	ubfx	r1, r0, #5, #2
   173f0:	str	r4, [sp, #36]	; 0x24
   173f4:	str	sl, [sp, #32]
   173f8:	str	r1, [sp, #28]
   173fc:	ble	17420 <__assert_fail@plt+0x5f0c>
   17400:	tst	r0, #8
   17404:	bne	17420 <__assert_fail@plt+0x5f0c>
   17408:	ldr	r1, [r7, #16]
   1740c:	cmp	r1, #0
   17410:	beq	17420 <__assert_fail@plt+0x5f0c>
   17414:	mov	r0, r7
   17418:	bl	15294 <__assert_fail@plt+0x3d80>
   1741c:	ldrb	r0, [r7, #28]
   17420:	str	r7, [fp, #-32]	; 0xffffffe0
   17424:	mov	sl, #1
   17428:	mov	r7, #0
   1742c:	cmp	r6, #0
   17430:	beq	1747c <__assert_fail@plt+0x5f68>
   17434:	ands	r1, r0, #16
   17438:	bne	1747c <__assert_fail@plt+0x5f68>
   1743c:	and	r0, r0, #6
   17440:	cmp	r0, #4
   17444:	bne	1746c <__assert_fail@plt+0x5f58>
   17448:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1744c:	ldr	sl, [r6]
   17450:	ldr	r0, [r0, #24]
   17454:	cmp	sl, r0
   17458:	bhi	17474 <__assert_fail@plt+0x5f60>
   1745c:	cmp	sl, #1
   17460:	movwlt	r6, #0
   17464:	movwlt	sl, #1
   17468:	b	17478 <__assert_fail@plt+0x5f64>
   1746c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17470:	ldr	r0, [r0, #24]
   17474:	add	sl, r0, #1
   17478:	mov	r7, r6
   1747c:	lsl	r0, sl, #3
   17480:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   17484:	cmp	r0, #0
   17488:	beq	17644 <__assert_fail@plt+0x6130>
   1748c:	ldr	r1, [fp, #12]
   17490:	str	r8, [sp]
   17494:	mov	r8, r0
   17498:	mov	r2, r9
   1749c:	mov	r3, r5
   174a0:	stmib	sp, {r1, sl}
   174a4:	str	r0, [sp, #12]
   174a8:	ldr	r0, [sp, #28]
   174ac:	ldr	r1, [sp, #32]
   174b0:	str	r0, [sp, #16]
   174b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   174b8:	bl	15b14 <__assert_fail@plt+0x4600>
   174bc:	cmp	r0, #0
   174c0:	beq	174dc <__assert_fail@plt+0x5fc8>
   174c4:	ldr	r4, [sp, #36]	; 0x24
   174c8:	cmp	r0, #1
   174cc:	mvn	r6, #1
   174d0:	mov	r5, r8
   174d4:	mvneq	r6, #0
   174d8:	b	1761c <__assert_fail@plt+0x6108>
   174dc:	str	r5, [sp, #32]
   174e0:	cmp	r7, #0
   174e4:	mov	r5, r8
   174e8:	beq	175f0 <__assert_fail@plt+0x60dc>
   174ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   174f0:	add	r9, sl, #1
   174f4:	ldrb	r0, [r0, #28]
   174f8:	ubfx	r0, r0, #1, #2
   174fc:	cmp	r0, #1
   17500:	beq	1754c <__assert_fail@plt+0x6038>
   17504:	cmp	r0, #0
   17508:	bne	17564 <__assert_fail@plt+0x6050>
   1750c:	lsl	r5, r9, #2
   17510:	mov	r0, r5
   17514:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   17518:	mov	r6, #0
   1751c:	cmp	r0, #0
   17520:	str	r0, [r7, #4]
   17524:	beq	1769c <__assert_fail@plt+0x6188>
   17528:	mov	r0, r5
   1752c:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   17530:	cmp	r0, #0
   17534:	str	r0, [r7, #8]
   17538:	beq	17694 <__assert_fail@plt+0x6180>
   1753c:	str	r9, [r7]
   17540:	mov	r4, #1
   17544:	mov	r5, r8
   17548:	b	1756c <__assert_fail@plt+0x6058>
   1754c:	ldr	r0, [r7]
   17550:	mov	r4, #1
   17554:	cmp	r9, r0
   17558:	bhi	17650 <__assert_fail@plt+0x613c>
   1755c:	mov	r9, r0
   17560:	b	1756c <__assert_fail@plt+0x6058>
   17564:	ldr	r9, [r7]
   17568:	mov	r4, #2
   1756c:	cmp	sl, #1
   17570:	blt	175a4 <__assert_fail@plt+0x6090>
   17574:	ldmib	r7, {r1, r2}
   17578:	add	r0, r5, #4
   1757c:	mov	r3, sl
   17580:	ldr	r6, [r0, #-4]
   17584:	subs	r3, r3, #1
   17588:	str	r6, [r1], #4
   1758c:	ldr	r6, [r0]
   17590:	add	r0, r0, #8
   17594:	str	r6, [r2], #4
   17598:	bne	17580 <__assert_fail@plt+0x606c>
   1759c:	ldr	r9, [r7]
   175a0:	b	175a8 <__assert_fail@plt+0x6094>
   175a4:	mov	sl, #0
   175a8:	cmp	sl, r9
   175ac:	bcs	175d0 <__assert_fail@plt+0x60bc>
   175b0:	ldmib	r7, {r0, r1}
   175b4:	mvn	r2, #0
   175b8:	str	r2, [r1, sl, lsl #2]
   175bc:	str	r2, [r0, sl, lsl #2]
   175c0:	add	sl, sl, #1
   175c4:	ldr	r3, [r7]
   175c8:	cmp	sl, r3
   175cc:	bcc	175b8 <__assert_fail@plt+0x60a4>
   175d0:	mov	r6, r4
   175d4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   175d8:	cmp	r6, #0
   175dc:	ldrb	r0, [r1, #28]
   175e0:	and	r0, r0, #249	; 0xf9
   175e4:	orr	r0, r0, r6, lsl #1
   175e8:	strb	r0, [r1, #28]
   175ec:	beq	17614 <__assert_fail@plt+0x6100>
   175f0:	ldr	r0, [fp, #20]
   175f4:	cmp	r0, #0
   175f8:	beq	1760c <__assert_fail@plt+0x60f8>
   175fc:	ldr	r0, [r5, #4]
   17600:	ldr	r1, [sp, #32]
   17604:	sub	r6, r0, r1
   17608:	b	17618 <__assert_fail@plt+0x6104>
   1760c:	ldr	r6, [r5]
   17610:	b	17618 <__assert_fail@plt+0x6104>
   17614:	mvn	r6, #1
   17618:	ldr	r4, [sp, #36]	; 0x24
   1761c:	mov	r0, r5
   17620:	bl	22190 <__assert_fail@plt+0x10c7c>
   17624:	cmp	r4, #0
   17628:	beq	17638 <__assert_fail@plt+0x6124>
   1762c:	ldr	r0, [sp, #24]
   17630:	add	r0, r0, #136	; 0x88
   17634:	bl	111f0 <pthread_mutex_unlock@plt>
   17638:	mov	r0, r6
   1763c:	sub	sp, fp, #28
   17640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17644:	ldr	r4, [sp, #36]	; 0x24
   17648:	mvn	r6, #1
   1764c:	b	17624 <__assert_fail@plt+0x6110>
   17650:	ldr	r0, [r7, #4]
   17654:	lsl	r1, r9, #2
   17658:	str	r1, [sp, #28]
   1765c:	bl	22004 <__assert_fail@plt+0x10af0>
   17660:	mov	r6, #0
   17664:	cmp	r0, #0
   17668:	beq	1769c <__assert_fail@plt+0x6188>
   1766c:	mov	r5, r0
   17670:	ldr	r0, [r7, #8]
   17674:	ldr	r1, [sp, #28]
   17678:	bl	22004 <__assert_fail@plt+0x10af0>
   1767c:	cmp	r0, #0
   17680:	beq	176a4 <__assert_fail@plt+0x6190>
   17684:	str	r9, [r7]
   17688:	str	r5, [r7, #4]
   1768c:	str	r0, [r7, #8]
   17690:	b	17544 <__assert_fail@plt+0x6030>
   17694:	ldr	r0, [r7, #4]
   17698:	bl	22190 <__assert_fail@plt+0x10c7c>
   1769c:	mov	r5, r8
   176a0:	b	175d4 <__assert_fail@plt+0x60c0>
   176a4:	mov	r0, r5
   176a8:	b	17698 <__assert_fail@plt+0x6184>
   176ac:	push	{fp, lr}
   176b0:	mov	fp, sp
   176b4:	sub	sp, sp, #16
   176b8:	mov	ip, #0
   176bc:	str	r2, [sp, #4]
   176c0:	str	ip, [sp, #12]
   176c4:	ldr	ip, [fp, #12]
   176c8:	str	ip, [sp, #8]
   176cc:	ldr	ip, [fp, #8]
   176d0:	str	ip, [sp]
   176d4:	bl	17374 <__assert_fail@plt+0x5e60>
   176d8:	mov	sp, fp
   176dc:	pop	{fp, pc}
   176e0:	push	{fp, lr}
   176e4:	mov	fp, sp
   176e8:	sub	sp, sp, #24
   176ec:	mov	ip, #1
   176f0:	str	ip, [sp, #20]
   176f4:	mov	ip, #0
   176f8:	str	ip, [sp, #8]
   176fc:	ldr	ip, [fp, #20]
   17700:	str	ip, [sp, #16]
   17704:	ldr	ip, [fp, #16]
   17708:	str	ip, [sp, #12]
   1770c:	ldr	ip, [fp, #12]
   17710:	str	ip, [sp, #4]
   17714:	ldr	ip, [fp, #8]
   17718:	str	ip, [sp]
   1771c:	bl	17728 <__assert_fail@plt+0x6214>
   17720:	mov	sp, fp
   17724:	pop	{fp, pc}
   17728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1772c:	add	fp, sp, #28
   17730:	sub	sp, sp, #20
   17734:	ldr	r4, [fp, #8]
   17738:	mov	r8, r1
   1773c:	mov	r1, r0
   17740:	mov	r6, r2
   17744:	orr	r0, r4, r2
   17748:	ldr	r2, [fp, #24]
   1774c:	orrs	r0, r0, r2
   17750:	bmi	17804 <__assert_fail@plt+0x62f0>
   17754:	adds	sl, r6, r4
   17758:	bvs	17804 <__assert_fail@plt+0x62f0>
   1775c:	mov	r5, #0
   17760:	cmp	r4, #1
   17764:	blt	177b8 <__assert_fail@plt+0x62a4>
   17768:	mov	r9, r3
   1776c:	cmp	r6, #1
   17770:	blt	177c0 <__assert_fail@plt+0x62ac>
   17774:	mov	r0, sl
   17778:	mov	r5, r1
   1777c:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   17780:	cmp	r0, #0
   17784:	beq	17804 <__assert_fail@plt+0x62f0>
   17788:	mov	r1, r8
   1778c:	mov	r2, r6
   17790:	mov	r7, r0
   17794:	bl	112a4 <memcpy@plt>
   17798:	add	r0, r7, r6
   1779c:	mov	r1, r9
   177a0:	mov	r2, r4
   177a4:	bl	112a4 <memcpy@plt>
   177a8:	ldr	r2, [fp, #24]
   177ac:	mov	r1, r5
   177b0:	mov	r5, r7
   177b4:	b	177c4 <__assert_fail@plt+0x62b0>
   177b8:	mov	r7, r8
   177bc:	b	177c4 <__assert_fail@plt+0x62b0>
   177c0:	mov	r7, r9
   177c4:	add	r6, fp, #12
   177c8:	ldr	r0, [fp, #28]
   177cc:	ldm	r6, {r3, r4, r6}
   177d0:	str	r4, [sp]
   177d4:	stmib	sp, {r2, r6}
   177d8:	mov	r2, sl
   177dc:	str	r0, [sp, #12]
   177e0:	mov	r0, r1
   177e4:	mov	r1, r7
   177e8:	bl	17374 <__assert_fail@plt+0x5e60>
   177ec:	mov	r4, r0
   177f0:	mov	r0, r5
   177f4:	bl	22190 <__assert_fail@plt+0x10c7c>
   177f8:	mov	r0, r4
   177fc:	sub	sp, fp, #28
   17800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17804:	mvn	r0, #1
   17808:	b	177fc <__assert_fail@plt+0x62e8>
   1780c:	push	{fp, lr}
   17810:	mov	fp, sp
   17814:	sub	sp, sp, #24
   17818:	mov	ip, #0
   1781c:	str	ip, [sp, #20]
   17820:	ldr	ip, [fp, #24]
   17824:	str	ip, [sp, #16]
   17828:	ldr	ip, [fp, #20]
   1782c:	str	ip, [sp, #12]
   17830:	ldr	ip, [fp, #16]
   17834:	str	ip, [sp, #8]
   17838:	ldr	ip, [fp, #12]
   1783c:	str	ip, [sp, #4]
   17840:	ldr	ip, [fp, #8]
   17844:	str	ip, [sp]
   17848:	bl	17728 <__assert_fail@plt+0x6214>
   1784c:	mov	sp, fp
   17850:	pop	{fp, pc}
   17854:	ldrb	ip, [r0, #28]
   17858:	cmp	r2, #0
   1785c:	bic	ip, ip, #6
   17860:	orrne	ip, ip, #2
   17864:	strb	ip, [r0, #28]
   17868:	ldr	r0, [sp]
   1786c:	moveq	r0, r2
   17870:	cmp	r2, #0
   17874:	moveq	r3, r2
   17878:	stm	r1, {r2, r3}
   1787c:	str	r0, [r1, #8]
   17880:	bx	lr
   17884:	ldr	r1, [r0, #4]
   17888:	movw	r2, #255	; 0xff
   1788c:	movt	r2, #4
   17890:	and	r1, r1, r2
   17894:	cmp	r1, #3
   17898:	beq	178ac <__assert_fail@plt+0x6398>
   1789c:	cmp	r1, #6
   178a0:	bxne	lr
   178a4:	ldr	r0, [r0]
   178a8:	b	17914 <__assert_fail@plt+0x6400>
   178ac:	ldr	r0, [r0]
   178b0:	b	22190 <__assert_fail@plt+0x10c7c>
   178b4:	push	{r4, sl, fp, lr}
   178b8:	add	fp, sp, #8
   178bc:	mov	r4, r0
   178c0:	ldr	r0, [r0, #24]
   178c4:	bl	22190 <__assert_fail@plt+0x10c7c>
   178c8:	ldr	r0, [r4, #36]	; 0x24
   178cc:	bl	22190 <__assert_fail@plt+0x10c7c>
   178d0:	ldr	r0, [r4, #40]	; 0x28
   178d4:	add	r1, r4, #4
   178d8:	cmp	r0, r1
   178dc:	beq	178f0 <__assert_fail@plt+0x63dc>
   178e0:	ldr	r0, [r0, #8]
   178e4:	bl	22190 <__assert_fail@plt+0x10c7c>
   178e8:	ldr	r0, [r4, #40]	; 0x28
   178ec:	bl	22190 <__assert_fail@plt+0x10c7c>
   178f0:	ldr	r0, [r4, #12]
   178f4:	bl	22190 <__assert_fail@plt+0x10c7c>
   178f8:	ldr	r0, [r4, #48]	; 0x30
   178fc:	bl	22190 <__assert_fail@plt+0x10c7c>
   17900:	ldr	r0, [r4, #44]	; 0x2c
   17904:	bl	22190 <__assert_fail@plt+0x10c7c>
   17908:	mov	r0, r4
   1790c:	pop	{r4, sl, fp, lr}
   17910:	b	22190 <__assert_fail@plt+0x10c7c>
   17914:	push	{r4, sl, fp, lr}
   17918:	add	fp, sp, #8
   1791c:	mov	r4, r0
   17920:	ldr	r0, [r0]
   17924:	bl	22190 <__assert_fail@plt+0x10c7c>
   17928:	ldr	r0, [r4, #4]
   1792c:	bl	22190 <__assert_fail@plt+0x10c7c>
   17930:	ldr	r0, [r4, #8]
   17934:	bl	22190 <__assert_fail@plt+0x10c7c>
   17938:	ldr	r0, [r4, #12]
   1793c:	bl	22190 <__assert_fail@plt+0x10c7c>
   17940:	mov	r0, r4
   17944:	pop	{r4, sl, fp, lr}
   17948:	b	22190 <__assert_fail@plt+0x10c7c>
   1794c:	push	{r4, r5, fp, lr}
   17950:	add	fp, sp, #8
   17954:	ldr	r4, [r0]
   17958:	ldr	r0, [r4, #56]	; 0x38
   1795c:	cmp	r0, #0
   17960:	beq	17978 <__assert_fail@plt+0x6464>
   17964:	ldr	r5, [r0]
   17968:	bl	22190 <__assert_fail@plt+0x10c7c>
   1796c:	cmp	r5, #0
   17970:	mov	r0, r5
   17974:	bne	17964 <__assert_fail@plt+0x6450>
   17978:	mov	r0, #31
   1797c:	mov	r5, #0
   17980:	str	r0, [r4, #64]	; 0x40
   17984:	str	r5, [r4, #52]	; 0x34
   17988:	str	r5, [r4, #56]	; 0x38
   1798c:	ldr	r0, [r4, #16]
   17990:	bl	22190 <__assert_fail@plt+0x10c7c>
   17994:	str	r5, [r4, #16]
   17998:	pop	{r4, r5, fp, pc}
   1799c:	push	{r4, sl, fp, lr}
   179a0:	add	fp, sp, #8
   179a4:	mov	r4, r0
   179a8:	ldr	r0, [r0, #8]
   179ac:	bl	22190 <__assert_fail@plt+0x10c7c>
   179b0:	ldr	r0, [r4, #12]
   179b4:	bl	22190 <__assert_fail@plt+0x10c7c>
   179b8:	ldrb	r0, [r4, #75]	; 0x4b
   179bc:	cmp	r0, #0
   179c0:	popeq	{r4, sl, fp, pc}
   179c4:	ldr	r0, [r4, #4]
   179c8:	pop	{r4, sl, fp, lr}
   179cc:	b	22190 <__assert_fail@plt+0x10c7c>
   179d0:	push	{r4, r5, r6, r7, fp, lr}
   179d4:	add	fp, sp, #16
   179d8:	mov	r5, r0
   179dc:	ldr	r0, [r0, #80]	; 0x50
   179e0:	mov	r4, r1
   179e4:	cmp	r0, #2
   179e8:	blt	17a34 <__assert_fail@plt+0x6520>
   179ec:	mov	r6, #12
   179f0:	cmn	r4, #-1073741823	; 0xc0000001
   179f4:	bhi	17a60 <__assert_fail@plt+0x654c>
   179f8:	ldr	r0, [r5, #8]
   179fc:	lsl	r7, r4, #2
   17a00:	mov	r1, r7
   17a04:	bl	22004 <__assert_fail@plt+0x10af0>
   17a08:	cmp	r0, #0
   17a0c:	beq	17a60 <__assert_fail@plt+0x654c>
   17a10:	str	r0, [r5, #8]
   17a14:	ldr	r0, [r5, #12]
   17a18:	cmp	r0, #0
   17a1c:	beq	17a34 <__assert_fail@plt+0x6520>
   17a20:	mov	r1, r7
   17a24:	bl	22004 <__assert_fail@plt+0x10af0>
   17a28:	cmp	r0, #0
   17a2c:	beq	17a60 <__assert_fail@plt+0x654c>
   17a30:	str	r0, [r5, #12]
   17a34:	ldrb	r0, [r5, #75]	; 0x4b
   17a38:	cmp	r0, #0
   17a3c:	beq	17a58 <__assert_fail@plt+0x6544>
   17a40:	ldr	r0, [r5, #4]
   17a44:	mov	r1, r4
   17a48:	bl	22004 <__assert_fail@plt+0x10af0>
   17a4c:	cmp	r0, #0
   17a50:	beq	17a68 <__assert_fail@plt+0x6554>
   17a54:	str	r0, [r5, #4]
   17a58:	mov	r6, #0
   17a5c:	str	r4, [r5, #36]	; 0x24
   17a60:	mov	r0, r6
   17a64:	pop	{r4, r5, r6, r7, fp, pc}
   17a68:	mov	r6, #12
   17a6c:	b	17a60 <__assert_fail@plt+0x654c>
   17a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a74:	add	fp, sp, #28
   17a78:	sub	sp, sp, #92	; 0x5c
   17a7c:	mov	r6, r0
   17a80:	ldrb	r0, [r0, #74]	; 0x4a
   17a84:	ldr	r8, [r6, #36]	; 0x24
   17a88:	ldr	r1, [r6, #48]	; 0x30
   17a8c:	ldr	sl, [r6, #28]
   17a90:	str	r6, [sp]
   17a94:	cmp	r8, r1
   17a98:	movgt	r8, r1
   17a9c:	cmp	r0, #0
   17aa0:	bne	17abc <__assert_fail@plt+0x65a8>
   17aa4:	ldr	r0, [r6, #64]	; 0x40
   17aa8:	cmp	r0, #0
   17aac:	bne	17abc <__assert_fail@plt+0x65a8>
   17ab0:	ldrb	r0, [r6, #76]	; 0x4c
   17ab4:	cmp	r0, #0
   17ab8:	beq	17ac4 <__assert_fail@plt+0x65b0>
   17abc:	ldr	r7, [r6, #32]
   17ac0:	b	17cb4 <__assert_fail@plt+0x67a0>
   17ac4:	cmp	r8, sl
   17ac8:	ble	17c88 <__assert_fail@plt+0x6774>
   17acc:	add	r9, r6, #16
   17ad0:	str	r8, [sp, #4]
   17ad4:	ldr	r7, [r6, #24]
   17ad8:	ldr	r4, [r6]
   17adc:	mov	r5, sl
   17ae0:	add	r0, r7, sl
   17ae4:	ldrb	r6, [r4, r0]
   17ae8:	tst	r6, #128	; 0x80
   17aec:	bne	17b30 <__assert_fail@plt+0x661c>
   17af0:	mov	r0, r9
   17af4:	bl	112d4 <mbsinit@plt>
   17af8:	cmp	r0, #0
   17afc:	add	sl, sp, #16
   17b00:	beq	17b44 <__assert_fail@plt+0x6630>
   17b04:	mov	r0, r6
   17b08:	bl	114cc <towupper@plt>
   17b0c:	cmp	r0, #128	; 0x80
   17b10:	bcs	17b38 <__assert_fail@plt+0x6624>
   17b14:	ldr	r2, [sp]
   17b18:	add	sl, r5, #1
   17b1c:	ldr	r1, [r2, #4]
   17b20:	strb	r0, [r1, r5]
   17b24:	ldr	r1, [r2, #8]
   17b28:	str	r0, [r1, r5, lsl #2]
   17b2c:	b	17c20 <__assert_fail@plt+0x670c>
   17b30:	add	sl, sp, #16
   17b34:	b	17b44 <__assert_fail@plt+0x6630>
   17b38:	ldr	r0, [sp]
   17b3c:	ldr	r4, [r0]
   17b40:	ldr	r7, [r0, #24]
   17b44:	ldm	r9, {r0, r1}
   17b48:	str	r1, [fp, #-36]	; 0xffffffdc
   17b4c:	sub	r2, r8, r5
   17b50:	mov	r3, r9
   17b54:	str	r0, [fp, #-40]	; 0xffffffd8
   17b58:	add	r0, r4, r7
   17b5c:	mov	r7, r5
   17b60:	add	r1, r0, r5
   17b64:	add	r0, sp, #12
   17b68:	bl	221f0 <__assert_fail@plt+0x10cdc>
   17b6c:	sub	r8, r0, #1
   17b70:	mov	r4, r0
   17b74:	cmn	r8, #4
   17b78:	bhi	17c38 <__assert_fail@plt+0x6724>
   17b7c:	ldr	r0, [sp, #12]
   17b80:	bl	114cc <towupper@plt>
   17b84:	mov	r6, r0
   17b88:	ldr	r0, [sp, #12]
   17b8c:	cmp	r6, r0
   17b90:	bne	17bb4 <__assert_fail@plt+0x66a0>
   17b94:	ldr	r5, [sp]
   17b98:	ldr	r1, [r5]
   17b9c:	ldr	r2, [r5, #24]
   17ba0:	ldr	r0, [r5, #4]
   17ba4:	add	r1, r1, r2
   17ba8:	add	r0, r0, r7
   17bac:	add	r1, r1, r7
   17bb0:	b	17bdc <__assert_fail@plt+0x66c8>
   17bb4:	mov	r0, sl
   17bb8:	mov	r1, r6
   17bbc:	sub	r2, fp, #40	; 0x28
   17bc0:	bl	1122c <wcrtomb@plt>
   17bc4:	cmp	r4, r0
   17bc8:	bne	17c90 <__assert_fail@plt+0x677c>
   17bcc:	ldr	r5, [sp]
   17bd0:	mov	r1, sl
   17bd4:	ldr	r0, [r5, #4]
   17bd8:	add	r0, r0, r7
   17bdc:	mov	r2, r4
   17be0:	bl	112a4 <memcpy@plt>
   17be4:	ldr	r0, [r5, #8]
   17be8:	add	sl, r7, #1
   17bec:	str	r6, [r0, r7, lsl #2]
   17bf0:	add	r6, r4, r7
   17bf4:	cmp	sl, r6
   17bf8:	bge	17c20 <__assert_fail@plt+0x670c>
   17bfc:	add	r0, r0, r7, lsl #2
   17c00:	mvn	r1, #3
   17c04:	add	r2, r1, r4, lsl #2
   17c08:	mov	r1, #255	; 0xff
   17c0c:	add	r0, r0, #4
   17c10:	bl	11418 <memset@plt>
   17c14:	subs	r8, r8, #1
   17c18:	bne	17c14 <__assert_fail@plt+0x6700>
   17c1c:	mov	sl, r6
   17c20:	ldr	r8, [sp, #4]
   17c24:	ldr	r6, [sp]
   17c28:	mov	r7, sl
   17c2c:	cmp	r8, sl
   17c30:	bgt	17ad4 <__assert_fail@plt+0x65c0>
   17c34:	b	18000 <__assert_fail@plt+0x6aec>
   17c38:	add	r0, r4, #1
   17c3c:	cmp	r0, #2
   17c40:	bcc	17c58 <__assert_fail@plt+0x6744>
   17c44:	ldr	r1, [sp]
   17c48:	ldr	r0, [r1, #36]	; 0x24
   17c4c:	ldr	r1, [r1, #48]	; 0x30
   17c50:	cmp	r0, r1
   17c54:	blt	17c9c <__assert_fail@plt+0x6788>
   17c58:	ldr	r1, [sp]
   17c5c:	add	sl, r7, #1
   17c60:	cmn	r4, #1
   17c64:	ldr	r0, [r1, #4]
   17c68:	strb	r6, [r0, r7]
   17c6c:	ldr	r0, [r1, #8]
   17c70:	str	r6, [r0, r7, lsl #2]
   17c74:	bne	17c20 <__assert_fail@plt+0x670c>
   17c78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17c7c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17c80:	stm	r9, {r0, r1}
   17c84:	b	17c20 <__assert_fail@plt+0x670c>
   17c88:	mov	r7, sl
   17c8c:	b	18000 <__assert_fail@plt+0x6aec>
   17c90:	ldm	sp, {r6, r8}
   17c94:	mov	sl, r7
   17c98:	b	17cbc <__assert_fail@plt+0x67a8>
   17c9c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17ca0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17ca4:	mov	sl, r7
   17ca8:	stm	r9, {r0, r1}
   17cac:	ldr	r6, [sp]
   17cb0:	b	18000 <__assert_fail@plt+0x6aec>
   17cb4:	cmp	sl, r8
   17cb8:	bge	18000 <__assert_fail@plt+0x6aec>
   17cbc:	mov	r3, r6
   17cc0:	ldr	r0, [r6, #16]!
   17cc4:	sub	r2, r8, sl
   17cc8:	str	r7, [sp, #4]
   17ccc:	ldr	r1, [r6, #4]
   17cd0:	str	r0, [fp, #-40]	; 0xffffffd8
   17cd4:	str	r1, [fp, #-36]	; 0xffffffdc
   17cd8:	ldr	r0, [r6, #48]	; 0x30
   17cdc:	cmp	r0, #0
   17ce0:	bne	17dc0 <__assert_fail@plt+0x68ac>
   17ce4:	ldr	r0, [r3]
   17ce8:	ldr	r1, [r3, #24]
   17cec:	add	r0, r0, r1
   17cf0:	add	r4, r0, r7
   17cf4:	add	r0, sp, #8
   17cf8:	mov	r1, r4
   17cfc:	mov	r3, r6
   17d00:	mov	r9, r8
   17d04:	bl	221f0 <__assert_fail@plt+0x10cdc>
   17d08:	sub	r8, r0, #1
   17d0c:	mov	r5, r0
   17d10:	cmn	r8, #4
   17d14:	bhi	17e20 <__assert_fail@plt+0x690c>
   17d18:	ldr	r0, [sp, #8]
   17d1c:	bl	114cc <towupper@plt>
   17d20:	mov	r7, r0
   17d24:	ldr	r0, [sp, #8]
   17d28:	cmp	r7, r0
   17d2c:	bne	17d3c <__assert_fail@plt+0x6828>
   17d30:	ldr	r6, [sp]
   17d34:	mov	r1, r4
   17d38:	b	17d5c <__assert_fail@plt+0x6848>
   17d3c:	add	r0, sp, #16
   17d40:	sub	r2, fp, #40	; 0x28
   17d44:	mov	r1, r7
   17d48:	bl	1122c <wcrtomb@plt>
   17d4c:	cmp	r0, r5
   17d50:	bne	17e9c <__assert_fail@plt+0x6988>
   17d54:	ldr	r6, [sp]
   17d58:	add	r1, sp, #16
   17d5c:	ldr	r0, [r6, #4]
   17d60:	add	r0, r0, sl
   17d64:	mov	r2, r5
   17d68:	bl	112a4 <memcpy@plt>
   17d6c:	ldrb	r0, [r6, #76]	; 0x4c
   17d70:	cmp	r0, #0
   17d74:	bne	17fc8 <__assert_fail@plt+0x6ab4>
   17d78:	ldr	r0, [r6, #8]
   17d7c:	add	r4, r5, sl
   17d80:	str	r7, [r0, sl, lsl #2]
   17d84:	ldr	r7, [sp, #4]
   17d88:	add	sl, sl, #1
   17d8c:	cmp	sl, r4
   17d90:	add	r7, r5, r7
   17d94:	bge	17db8 <__assert_fail@plt+0x68a4>
   17d98:	mvn	r1, #3
   17d9c:	add	r0, r0, sl, lsl #2
   17da0:	add	r2, r1, r5, lsl #2
   17da4:	mov	r1, #255	; 0xff
   17da8:	bl	11418 <memset@plt>
   17dac:	subs	r8, r8, #1
   17db0:	bne	17dac <__assert_fail@plt+0x6898>
   17db4:	mov	sl, r4
   17db8:	mov	r8, r9
   17dbc:	b	17cb4 <__assert_fail@plt+0x67a0>
   17dc0:	add	r4, sp, #16
   17dc4:	cmp	r2, #1
   17dc8:	blt	17cf4 <__assert_fail@plt+0x67e0>
   17dcc:	ldr	r1, [sp]
   17dd0:	ldr	r1, [r1, #80]	; 0x50
   17dd4:	cmp	r1, #1
   17dd8:	blt	17cf4 <__assert_fail@plt+0x67e0>
   17ddc:	ldr	r4, [sp]
   17de0:	mov	r5, r7
   17de4:	ldr	r7, [r4, #24]
   17de8:	ldr	r3, [r4]
   17dec:	add	r4, sp, #16
   17df0:	add	r7, r5, r7
   17df4:	add	r3, r3, r7
   17df8:	mov	r7, #0
   17dfc:	ldrb	r5, [r3, r7]
   17e00:	ldrb	r5, [r0, r5]
   17e04:	strb	r5, [r4, r7]
   17e08:	add	r7, r7, #1
   17e0c:	cmp	r7, r2
   17e10:	bge	17cf4 <__assert_fail@plt+0x67e0>
   17e14:	cmp	r7, r1
   17e18:	blt	17dfc <__assert_fail@plt+0x68e8>
   17e1c:	b	17cf4 <__assert_fail@plt+0x67e0>
   17e20:	ldr	r3, [sp]
   17e24:	add	r0, r5, #1
   17e28:	cmp	r0, #2
   17e2c:	bcc	17e40 <__assert_fail@plt+0x692c>
   17e30:	ldr	r0, [r3, #36]	; 0x24
   17e34:	ldr	r1, [r3, #48]	; 0x30
   17e38:	cmp	r0, r1
   17e3c:	blt	17fec <__assert_fail@plt+0x6ad8>
   17e40:	ldr	r2, [r3, #24]
   17e44:	ldr	r7, [sp, #4]
   17e48:	ldr	r0, [r3]
   17e4c:	ldr	r1, [r3, #64]	; 0x40
   17e50:	add	r2, r2, r7
   17e54:	cmp	r1, #0
   17e58:	ldrb	r0, [r0, r2]
   17e5c:	bne	1801c <__assert_fail@plt+0x6b08>
   17e60:	ldr	r2, [sp]
   17e64:	mov	r8, r9
   17e68:	ldr	r1, [r2, #4]
   17e6c:	strb	r0, [r1, sl]
   17e70:	ldrb	r1, [r2, #76]	; 0x4c
   17e74:	cmp	r1, #0
   17e78:	bne	18024 <__assert_fail@plt+0x6b10>
   17e7c:	ldr	r1, [r2, #8]
   17e80:	add	r7, r7, #1
   17e84:	cmn	r5, #1
   17e88:	str	r0, [r1, sl, lsl #2]
   17e8c:	add	sl, sl, #1
   17e90:	beq	18030 <__assert_fail@plt+0x6b1c>
   17e94:	ldr	r6, [sp]
   17e98:	b	17cb4 <__assert_fail@plt+0x67a0>
   17e9c:	mov	r2, r0
   17ea0:	cmn	r0, #1
   17ea4:	beq	17d30 <__assert_fail@plt+0x681c>
   17ea8:	ldr	r3, [sp]
   17eac:	add	r9, r2, sl
   17eb0:	ldr	r1, [r3, #36]	; 0x24
   17eb4:	cmp	r9, r1
   17eb8:	bhi	17fec <__assert_fail@plt+0x6ad8>
   17ebc:	ldr	r0, [r3, #12]
   17ec0:	mov	r6, r3
   17ec4:	cmp	r0, #0
   17ec8:	bne	17ee8 <__assert_fail@plt+0x69d4>
   17ecc:	lsl	r0, r1, #2
   17ed0:	mov	r4, r2
   17ed4:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   17ed8:	mov	r2, r4
   17edc:	cmp	r0, #0
   17ee0:	str	r0, [r6, #12]
   17ee4:	beq	18014 <__assert_fail@plt+0x6b00>
   17ee8:	ldrb	r1, [r6, #76]	; 0x4c
   17eec:	cmp	r1, #0
   17ef0:	bne	17f18 <__assert_fail@plt+0x6a04>
   17ef4:	cmp	sl, #0
   17ef8:	beq	17f10 <__assert_fail@plt+0x69fc>
   17efc:	mov	r1, #0
   17f00:	str	r1, [r0, r1, lsl #2]
   17f04:	add	r1, r1, #1
   17f08:	cmp	sl, r1
   17f0c:	bne	17f00 <__assert_fail@plt+0x69ec>
   17f10:	mov	r0, #1
   17f14:	strb	r0, [r6, #76]	; 0x4c
   17f18:	ldr	r0, [r6, #4]
   17f1c:	add	r1, sp, #16
   17f20:	mov	r4, r2
   17f24:	add	r0, r0, sl
   17f28:	bl	112a4 <memcpy@plt>
   17f2c:	ldr	r1, [r6, #8]
   17f30:	cmp	r4, #2
   17f34:	str	r7, [r1, sl, lsl #2]
   17f38:	ldr	r0, [r6, #12]
   17f3c:	ldr	r6, [sp, #4]
   17f40:	str	r6, [r0, sl, lsl #2]
   17f44:	bcc	17f7c <__assert_fail@plt+0x6a68>
   17f48:	add	r0, r0, sl, lsl #2
   17f4c:	add	r1, r1, sl, lsl #2
   17f50:	mov	r2, #1
   17f54:	mvn	r3, #0
   17f58:	cmp	r2, r5
   17f5c:	mov	r7, r8
   17f60:	movcc	r7, r2
   17f64:	add	r7, r7, r6
   17f68:	str	r7, [r0, r2, lsl #2]
   17f6c:	str	r3, [r1, r2, lsl #2]
   17f70:	add	r2, r2, #1
   17f74:	cmp	r4, r2
   17f78:	bne	17f58 <__assert_fail@plt+0x6a44>
   17f7c:	ldr	r3, [sp]
   17f80:	sub	r1, r4, r5
   17f84:	mov	r7, r6
   17f88:	ldr	r0, [r3, #48]	; 0x30
   17f8c:	ldr	r2, [r3, #52]	; 0x34
   17f90:	add	r0, r0, r1
   17f94:	cmp	r2, r6
   17f98:	mov	r6, r3
   17f9c:	str	r0, [r3, #48]	; 0x30
   17fa0:	ble	17fb0 <__assert_fail@plt+0x6a9c>
   17fa4:	ldr	r2, [r6, #56]	; 0x38
   17fa8:	add	r1, r2, r1
   17fac:	str	r1, [r6, #56]	; 0x38
   17fb0:	ldr	r8, [r6, #36]	; 0x24
   17fb4:	add	r7, r5, r7
   17fb8:	mov	sl, r9
   17fbc:	cmp	r8, r0
   17fc0:	movgt	r8, r0
   17fc4:	b	17cb4 <__assert_fail@plt+0x67a0>
   17fc8:	ldr	r0, [r6, #12]
   17fcc:	ldr	r1, [sp, #4]
   17fd0:	mov	r2, r5
   17fd4:	add	r0, r0, sl, lsl #2
   17fd8:	str	r1, [r0], #4
   17fdc:	add	r1, r1, #1
   17fe0:	subs	r2, r2, #1
   17fe4:	bne	17fd8 <__assert_fail@plt+0x6ac4>
   17fe8:	b	17d78 <__assert_fail@plt+0x6864>
   17fec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17ff0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17ff4:	stm	r6, {r0, r1}
   17ff8:	mov	r6, r3
   17ffc:	ldr	r7, [sp, #4]
   18000:	mov	r0, #0
   18004:	str	sl, [r6, #28]
   18008:	str	r7, [r6, #32]
   1800c:	sub	sp, fp, #28
   18010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18014:	mov	r0, #12
   18018:	b	1800c <__assert_fail@plt+0x6af8>
   1801c:	ldrb	r0, [r1, r0]
   18020:	b	17e60 <__assert_fail@plt+0x694c>
   18024:	ldr	r1, [r2, #12]
   18028:	str	r7, [r1, sl, lsl #2]
   1802c:	b	17e7c <__assert_fail@plt+0x6968>
   18030:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18034:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18038:	stm	r6, {r0, r1}
   1803c:	b	17e94 <__assert_fail@plt+0x6980>
   18040:	push	{r4, r5, r6, sl, fp, lr}
   18044:	add	fp, sp, #16
   18048:	mov	r4, r0
   1804c:	ldr	r5, [r0, #28]
   18050:	ldr	r6, [r0, #36]	; 0x24
   18054:	ldr	r0, [r0, #48]	; 0x30
   18058:	cmp	r6, r0
   1805c:	movgt	r6, r0
   18060:	cmp	r5, r6
   18064:	bge	180a0 <__assert_fail@plt+0x6b8c>
   18068:	ldr	r0, [r4]
   1806c:	ldr	r2, [r4, #24]
   18070:	ldr	r1, [r4, #64]	; 0x40
   18074:	add	r0, r0, r2
   18078:	cmp	r1, #0
   1807c:	ldrb	r0, [r0, r5]
   18080:	bne	18098 <__assert_fail@plt+0x6b84>
   18084:	bl	11484 <toupper@plt>
   18088:	ldr	r1, [r4, #4]
   1808c:	strb	r0, [r1, r5]
   18090:	add	r5, r5, #1
   18094:	b	18060 <__assert_fail@plt+0x6b4c>
   18098:	ldrb	r0, [r1, r0]
   1809c:	b	18084 <__assert_fail@plt+0x6b70>
   180a0:	str	r5, [r4, #28]
   180a4:	str	r5, [r4, #32]
   180a8:	pop	{r4, r5, r6, sl, fp, pc}
   180ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180b0:	add	fp, sp, #28
   180b4:	sub	sp, sp, #76	; 0x4c
   180b8:	mov	r4, r0
   180bc:	ldr	sl, [r0, #28]
   180c0:	ldr	r6, [r0, #36]	; 0x24
   180c4:	ldr	r0, [r0, #48]	; 0x30
   180c8:	cmp	r6, r0
   180cc:	movgt	r6, r0
   180d0:	cmp	r6, sl
   180d4:	ble	18284 <__assert_fail@plt+0x6d70>
   180d8:	add	r9, r4, #16
   180dc:	add	r0, sp, #8
   180e0:	ldr	r3, [r4, #64]	; 0x40
   180e4:	ldm	r9, {r1, r5}
   180e8:	sub	r2, r6, sl
   180ec:	str	r1, [sp, #4]
   180f0:	cmp	r3, #0
   180f4:	bne	181c4 <__assert_fail@plt+0x6cb0>
   180f8:	ldr	r3, [r4]
   180fc:	ldr	r1, [r4, #24]
   18100:	add	r1, r3, r1
   18104:	add	r1, r1, sl
   18108:	mov	r3, r9
   1810c:	mov	r8, r0
   18110:	bl	221f0 <__assert_fail@plt+0x10cdc>
   18114:	mov	r7, r0
   18118:	add	r0, r0, #1
   1811c:	cmp	r0, #2
   18120:	bcc	1813c <__assert_fail@plt+0x6c28>
   18124:	cmn	r7, #2
   18128:	bne	1816c <__assert_fail@plt+0x6c58>
   1812c:	ldr	r0, [r4, #36]	; 0x24
   18130:	ldr	r1, [r4, #48]	; 0x30
   18134:	cmp	r0, r1
   18138:	blt	1827c <__assert_fail@plt+0x6d68>
   1813c:	ldr	r1, [r4, #24]
   18140:	ldr	r0, [r4]
   18144:	add	r1, r1, sl
   18148:	ldrb	r0, [r0, r1]
   1814c:	str	r0, [sp, #8]
   18150:	ldr	r1, [r4, #64]	; 0x40
   18154:	cmp	r1, #0
   18158:	bne	18270 <__assert_fail@plt+0x6d5c>
   1815c:	ldr	r1, [sp, #4]
   18160:	mov	r7, #1
   18164:	stm	r9, {r1, r5}
   18168:	b	18170 <__assert_fail@plt+0x6c5c>
   1816c:	ldr	r0, [sp, #8]
   18170:	ldr	r1, [r4, #8]
   18174:	add	r5, r7, sl
   18178:	add	r2, sl, #1
   1817c:	cmp	r2, r5
   18180:	str	r0, [r1, sl, lsl #2]
   18184:	bge	181b0 <__assert_fail@plt+0x6c9c>
   18188:	mvn	r0, #3
   1818c:	add	r2, r0, r7, lsl #2
   18190:	add	r0, r1, sl, lsl #2
   18194:	mov	r1, #255	; 0xff
   18198:	add	r0, r0, #4
   1819c:	bl	11418 <memset@plt>
   181a0:	sub	r0, r7, #1
   181a4:	subs	r0, r0, #1
   181a8:	bne	181a4 <__assert_fail@plt+0x6c90>
   181ac:	mov	r2, r5
   181b0:	cmp	r6, r2
   181b4:	mov	sl, r2
   181b8:	mov	r0, r8
   181bc:	bgt	180e0 <__assert_fail@plt+0x6bcc>
   181c0:	b	18288 <__assert_fail@plt+0x6d74>
   181c4:	cmp	r2, #1
   181c8:	add	r1, sp, #12
   181cc:	blt	18108 <__assert_fail@plt+0x6bf4>
   181d0:	ldr	r1, [r4, #80]	; 0x50
   181d4:	cmp	r1, #1
   181d8:	add	r1, sp, #12
   181dc:	blt	18108 <__assert_fail@plt+0x6bf4>
   181e0:	ldr	r7, [r4, #24]
   181e4:	ldm	r4, {r1, ip}
   181e8:	cmp	r2, #2
   181ec:	add	r7, sl, r7
   181f0:	ldrb	r1, [r1, r7]
   181f4:	ldrb	r1, [r3, r1]
   181f8:	strb	r1, [ip, sl]
   181fc:	strb	r1, [sp, #12]
   18200:	add	r1, sp, #12
   18204:	blt	18108 <__assert_fail@plt+0x6bf4>
   18208:	ldr	r1, [r4, #80]	; 0x50
   1820c:	cmp	r1, #2
   18210:	add	r1, sp, #12
   18214:	blt	18108 <__assert_fail@plt+0x6bf4>
   18218:	mov	lr, r0
   1821c:	mov	r0, #1
   18220:	ldr	r7, [r4, #24]
   18224:	ldm	r4, {r1, ip}
   18228:	ldr	r3, [r4, #64]	; 0x40
   1822c:	add	r1, r1, r7
   18230:	add	r1, r1, sl
   18234:	ldrb	r1, [r1, r0]
   18238:	ldrb	r1, [r3, r1]
   1823c:	add	r3, ip, sl
   18240:	strb	r1, [r3, r0]
   18244:	add	r3, sp, #12
   18248:	strb	r1, [r3, r0]
   1824c:	add	r0, r0, #1
   18250:	cmp	r0, r2
   18254:	bge	18264 <__assert_fail@plt+0x6d50>
   18258:	ldr	r1, [r4, #80]	; 0x50
   1825c:	cmp	r0, r1
   18260:	blt	18220 <__assert_fail@plt+0x6d0c>
   18264:	add	r1, sp, #12
   18268:	mov	r0, lr
   1826c:	b	18108 <__assert_fail@plt+0x6bf4>
   18270:	ldrb	r0, [r1, r0]
   18274:	str	r0, [sp, #8]
   18278:	b	1815c <__assert_fail@plt+0x6c48>
   1827c:	ldr	r0, [sp, #4]
   18280:	stm	r9, {r0, r5}
   18284:	mov	r2, sl
   18288:	str	r2, [r4, #28]
   1828c:	str	r2, [r4, #32]
   18290:	sub	sp, fp, #28
   18294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18298:	push	{r4, sl, fp, lr}
   1829c:	add	fp, sp, #8
   182a0:	ldr	ip, [r0, #36]	; 0x24
   182a4:	ldr	r3, [r0, #48]	; 0x30
   182a8:	ldr	r1, [r0, #28]
   182ac:	cmp	ip, r3
   182b0:	movgt	ip, r3
   182b4:	cmp	r1, ip
   182b8:	bge	182e0 <__assert_fail@plt+0x6dcc>
   182bc:	ldr	r2, [r0, #24]
   182c0:	ldm	r0, {r3, lr}
   182c4:	ldr	r4, [r0, #64]	; 0x40
   182c8:	add	r2, r3, r2
   182cc:	ldrb	r2, [r2, r1]
   182d0:	ldrb	r2, [r4, r2]
   182d4:	strb	r2, [lr, r1]
   182d8:	add	r1, r1, #1
   182dc:	b	182b4 <__assert_fail@plt+0x6da0>
   182e0:	str	r1, [r0, #28]
   182e4:	str	r1, [r0, #32]
   182e8:	pop	{r4, sl, fp, pc}
   182ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182f0:	add	fp, sp, #28
   182f4:	sub	sp, sp, #28
   182f8:	ldr	r9, [r1]
   182fc:	mov	r5, r0
   18300:	ldr	r8, [fp, #12]
   18304:	mov	r6, r2
   18308:	str	r1, [sp, #12]
   1830c:	str	r3, [sp, #16]
   18310:	ldr	r0, [r9, #84]	; 0x54
   18314:	str	r8, [sp, #4]
   18318:	str	r0, [sp, #8]
   1831c:	ldr	r0, [fp, #8]
   18320:	str	r0, [sp]
   18324:	mov	r0, r5
   18328:	bl	18b2c <__assert_fail@plt+0x7618>
   1832c:	mov	r4, r0
   18330:	cmp	r0, #0
   18334:	bne	18344 <__assert_fail@plt+0x6e30>
   18338:	ldr	r0, [r8]
   1833c:	cmp	r0, #0
   18340:	bne	18434 <__assert_fail@plt+0x6f20>
   18344:	ldr	r0, [sp, #16]
   18348:	ldr	r8, [fp, #8]
   1834c:	mov	r7, #10
   18350:	orr	sl, r0, #8388608	; 0x800000
   18354:	ldrb	r0, [r6, #4]
   18358:	cmp	r0, #10
   1835c:	bne	18438 <__assert_fail@plt+0x6f24>
   18360:	mov	r0, r6
   18364:	mov	r1, r5
   18368:	mov	r2, sl
   1836c:	bl	1849c <__assert_fail@plt+0x6f88>
   18370:	ldr	r1, [r5, #40]	; 0x28
   18374:	mov	r2, #0
   18378:	add	r0, r1, r0
   1837c:	str	r0, [r5, #40]	; 0x28
   18380:	ldrb	r0, [r6, #4]
   18384:	orr	r1, r0, #8
   18388:	cmp	r1, #10
   1838c:	bne	183bc <__assert_fail@plt+0x6ea8>
   18390:	mov	r0, #0
   18394:	str	r7, [sp, #24]
   18398:	mov	r1, r4
   1839c:	add	r3, sp, #20
   183a0:	str	r0, [sp, #20]
   183a4:	mov	r0, r9
   183a8:	bl	1a2bc <__assert_fail@plt+0x8da8>
   183ac:	mov	r4, r0
   183b0:	cmp	r0, #0
   183b4:	bne	18354 <__assert_fail@plt+0x6e40>
   183b8:	b	18428 <__assert_fail@plt+0x6f14>
   183bc:	cmp	r8, #0
   183c0:	beq	183cc <__assert_fail@plt+0x6eb8>
   183c4:	cmp	r0, #9
   183c8:	beq	18390 <__assert_fail@plt+0x6e7c>
   183cc:	ldr	r0, [sp, #8]
   183d0:	ldr	r7, [r9, #84]	; 0x54
   183d4:	ldr	r1, [sp, #12]
   183d8:	ldr	r3, [sp, #16]
   183dc:	mov	r2, r6
   183e0:	str	r0, [r9, #84]	; 0x54
   183e4:	str	r8, [sp]
   183e8:	ldr	r8, [fp, #12]
   183ec:	mov	r0, r5
   183f0:	str	r8, [sp, #4]
   183f4:	bl	18b2c <__assert_fail@plt+0x7618>
   183f8:	mov	r2, r0
   183fc:	cmp	r0, #0
   18400:	bne	18410 <__assert_fail@plt+0x6efc>
   18404:	ldr	r0, [r8]
   18408:	cmp	r0, #0
   1840c:	bne	18444 <__assert_fail@plt+0x6f30>
   18410:	ldr	r0, [r9, #84]	; 0x54
   18414:	ldr	r8, [fp, #8]
   18418:	orr	r0, r0, r7
   1841c:	mov	r7, #10
   18420:	str	r0, [r9, #84]	; 0x54
   18424:	b	18390 <__assert_fail@plt+0x6e7c>
   18428:	ldr	r1, [fp, #12]
   1842c:	mov	r0, #12
   18430:	str	r0, [r1]
   18434:	mov	r4, #0
   18438:	mov	r0, r4
   1843c:	sub	sp, fp, #28
   18440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18444:	cmp	r4, #0
   18448:	beq	18434 <__assert_fail@plt+0x6f20>
   1844c:	mov	r5, r4
   18450:	ldr	r4, [r4, #4]
   18454:	cmp	r4, #0
   18458:	bne	1844c <__assert_fail@plt+0x6f38>
   1845c:	ldr	r4, [r5, #8]
   18460:	cmp	r4, #0
   18464:	bne	1844c <__assert_fail@plt+0x6f38>
   18468:	add	r0, r5, #20
   1846c:	bl	17884 <__assert_fail@plt+0x6370>
   18470:	ldr	r0, [r5]
   18474:	cmp	r0, #0
   18478:	beq	18434 <__assert_fail@plt+0x6f20>
   1847c:	ldr	r4, [r0, #8]
   18480:	cmp	r4, r5
   18484:	mov	r5, r0
   18488:	beq	18468 <__assert_fail@plt+0x6f54>
   1848c:	cmp	r4, #0
   18490:	mov	r5, r0
   18494:	beq	18468 <__assert_fail@plt+0x6f54>
   18498:	b	1844c <__assert_fail@plt+0x6f38>
   1849c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   184a0:	add	fp, sp, #24
   184a4:	sub	sp, sp, #8
   184a8:	mov	r9, r0
   184ac:	mov	r7, r1
   184b0:	ldr	r0, [r1, #40]	; 0x28
   184b4:	ldr	r1, [r1, #56]	; 0x38
   184b8:	cmp	r1, r0
   184bc:	ble	185a4 <__assert_fail@plt+0x7090>
   184c0:	ldr	r1, [r7, #4]
   184c4:	mov	r5, r9
   184c8:	mov	r8, r2
   184cc:	ldrb	r6, [r1, r0]
   184d0:	strb	r6, [r5], #4
   184d4:	ldr	r0, [r5]
   184d8:	bic	r1, r0, #6291456	; 0x600000
   184dc:	str	r1, [r5]
   184e0:	ldr	r3, [r7, #80]	; 0x50
   184e4:	cmp	r3, #2
   184e8:	blt	1850c <__assert_fail@plt+0x6ff8>
   184ec:	ldr	r2, [r7, #28]
   184f0:	ldr	r1, [r7, #40]	; 0x28
   184f4:	cmp	r1, r2
   184f8:	beq	1850c <__assert_fail@plt+0x6ff8>
   184fc:	ldr	r2, [r7, #8]
   18500:	ldr	r1, [r2, r1, lsl #2]
   18504:	cmn	r1, #1
   18508:	beq	18860 <__assert_fail@plt+0x734c>
   1850c:	movw	r1, #65280	; 0xff00
   18510:	cmp	r6, #92	; 0x5c
   18514:	movt	r1, #65439	; 0xff9f
   18518:	bne	185b4 <__assert_fail@plt+0x70a0>
   1851c:	ldr	r6, [r7, #40]	; 0x28
   18520:	ldr	r4, [r7, #48]	; 0x30
   18524:	add	r2, r6, #1
   18528:	cmp	r2, r4
   1852c:	bge	18608 <__assert_fail@plt+0x70f4>
   18530:	ldrb	r4, [r7, #75]	; 0x4b
   18534:	cmp	r4, #0
   18538:	bne	18ab8 <__assert_fail@plt+0x75a4>
   1853c:	ldr	r3, [r7, #4]
   18540:	ldrb	r6, [r3, r2]
   18544:	and	r0, r0, r1
   18548:	strb	r6, [r9]
   1854c:	orr	r4, r0, #1
   18550:	str	r4, [r9, #4]
   18554:	ldr	r0, [r7, #80]	; 0x50
   18558:	cmp	r0, #2
   1855c:	blt	18718 <__assert_fail@plt+0x7204>
   18560:	ldr	r0, [r7, #8]
   18564:	ldr	r1, [r7, #40]	; 0x28
   18568:	add	r0, r0, r1, lsl #2
   1856c:	ldr	r4, [r0, #4]
   18570:	mov	r0, r4
   18574:	bl	11400 <iswalnum@plt>
   18578:	sub	r1, r4, #95	; 0x5f
   1857c:	cmp	r0, #0
   18580:	clz	r1, r1
   18584:	movwne	r0, #1
   18588:	lsr	r1, r1, #5
   1858c:	orr	r0, r1, r0
   18590:	ldr	r1, [r5]
   18594:	bic	r1, r1, #4194304	; 0x400000
   18598:	orr	r0, r1, r0, lsl #22
   1859c:	uxtb	r1, r6
   185a0:	b	1873c <__assert_fail@plt+0x7228>
   185a4:	mov	r0, #2
   185a8:	mov	r4, #0
   185ac:	strb	r0, [r9, #4]
   185b0:	b	18a8c <__assert_fail@plt+0x7578>
   185b4:	and	r0, r0, r1
   185b8:	orr	r4, r0, #1
   185bc:	str	r4, [r5]
   185c0:	ldr	r0, [r7, #80]	; 0x50
   185c4:	cmp	r0, #2
   185c8:	blt	18614 <__assert_fail@plt+0x7100>
   185cc:	ldr	r0, [r7, #8]
   185d0:	ldr	r1, [r7, #40]	; 0x28
   185d4:	ldr	r4, [r0, r1, lsl #2]
   185d8:	mov	r0, r4
   185dc:	bl	11400 <iswalnum@plt>
   185e0:	sub	r1, r4, #95	; 0x5f
   185e4:	cmp	r0, #0
   185e8:	clz	r1, r1
   185ec:	movwne	r0, #1
   185f0:	lsr	r1, r1, #5
   185f4:	orr	r0, r1, r0
   185f8:	ldr	r1, [r5]
   185fc:	bic	r1, r1, #4194304	; 0x400000
   18600:	orr	r0, r1, r0, lsl #22
   18604:	b	18634 <__assert_fail@plt+0x7120>
   18608:	and	r0, r0, r1
   1860c:	orr	r0, r0, #36	; 0x24
   18610:	b	18874 <__assert_fail@plt+0x7360>
   18614:	bl	113b8 <__ctype_b_loc@plt>
   18618:	ldr	r0, [r0]
   1861c:	cmp	r6, #95	; 0x5f
   18620:	add	r0, r0, r6, lsl #1
   18624:	ldrh	r0, [r0]
   18628:	ubfx	r0, r0, #3, #1
   1862c:	movweq	r0, #1
   18630:	orr	r0, r4, r0, lsl #22
   18634:	mov	r4, #1
   18638:	cmp	r6, #62	; 0x3e
   1863c:	str	r0, [r5]
   18640:	bgt	186dc <__assert_fail@plt+0x71c8>
   18644:	sub	r1, r6, #36	; 0x24
   18648:	cmp	r1, #10
   1864c:	bhi	188d0 <__assert_fail@plt+0x73bc>
   18650:	add	r2, pc, #0
   18654:	ldr	pc, [r2, r1, lsl #2]
   18658:	andeq	r8, r1, r4, lsl #13
   1865c:	andeq	r8, r1, ip, lsl #21
   18660:	andeq	r8, r1, ip, lsl #21
   18664:	andeq	r8, r1, ip, lsl #21
   18668:	andeq	r8, r1, r4, ror #17
   1866c:	strdeq	r8, [r1], -r4
   18670:	andeq	r8, r1, r4, lsl #18
   18674:	andeq	r8, r1, ip, lsl #18
   18678:	andeq	r8, r1, ip, lsl #21
   1867c:	andeq	r8, r1, ip, lsl #21
   18680:	andeq	r8, r1, ip, lsl r9
   18684:	tst	r8, #8
   18688:	bne	186d4 <__assert_fail@plt+0x71c0>
   1868c:	ldr	r1, [r7, #40]	; 0x28
   18690:	ldr	r2, [r7, #48]	; 0x30
   18694:	add	r1, r1, #1
   18698:	cmp	r1, r2
   1869c:	beq	186d4 <__assert_fail@plt+0x71c0>
   186a0:	str	r1, [r7, #40]	; 0x28
   186a4:	mov	r0, sp
   186a8:	mov	r1, r7
   186ac:	mov	r2, r8
   186b0:	bl	1849c <__assert_fail@plt+0x6f88>
   186b4:	ldr	r0, [r7, #40]	; 0x28
   186b8:	sub	r0, r0, #1
   186bc:	str	r0, [r7, #40]	; 0x28
   186c0:	ldrb	r0, [sp, #4]
   186c4:	sub	r0, r0, #9
   186c8:	cmp	r0, #1
   186cc:	bhi	18a8c <__assert_fail@plt+0x7578>
   186d0:	ldr	r0, [r5]
   186d4:	mov	r1, #32
   186d8:	b	18710 <__assert_fail@plt+0x71fc>
   186dc:	cmp	r6, #122	; 0x7a
   186e0:	bgt	18838 <__assert_fail@plt+0x7324>
   186e4:	cmp	r6, #63	; 0x3f
   186e8:	beq	18924 <__assert_fail@plt+0x7410>
   186ec:	cmp	r6, #91	; 0x5b
   186f0:	beq	18934 <__assert_fail@plt+0x7420>
   186f4:	cmp	r6, #94	; 0x5e
   186f8:	bne	18a8c <__assert_fail@plt+0x7578>
   186fc:	movw	r1, #8
   18700:	movt	r1, #128	; 0x80
   18704:	tst	r8, r1
   18708:	beq	1897c <__assert_fail@plt+0x7468>
   1870c:	mov	r1, #16
   18710:	mov	r2, #12
   18714:	b	18828 <__assert_fail@plt+0x7314>
   18718:	bl	113b8 <__ctype_b_loc@plt>
   1871c:	ldr	r0, [r0]
   18720:	uxtb	r1, r6
   18724:	cmp	r1, #95	; 0x5f
   18728:	add	r0, r0, r1, lsl #1
   1872c:	ldrh	r0, [r0]
   18730:	ubfx	r0, r0, #3, #1
   18734:	movweq	r0, #1
   18738:	orr	r0, r4, r0, lsl #22
   1873c:	uxtb	r2, r6
   18740:	mov	r4, #2
   18744:	str	r0, [r5]
   18748:	cmp	r2, #95	; 0x5f
   1874c:	bgt	18880 <__assert_fail@plt+0x736c>
   18750:	sub	r3, r2, #39	; 0x27
   18754:	cmp	r3, #44	; 0x2c
   18758:	bhi	189a8 <__assert_fail@plt+0x7494>
   1875c:	add	r2, pc, #0
   18760:	ldr	pc, [r2, r3, lsl #2]
   18764:	andeq	r8, r1, r0, lsl sl
   18768:	andeq	r8, r1, r0, lsr #20
   1876c:	andeq	r8, r1, ip, lsr #20
   18770:	andeq	r8, r1, ip, lsl #21
   18774:	andeq	r8, r1, r8, lsr sl
   18778:	andeq	r8, r1, ip, lsl #21
   1877c:	andeq	r8, r1, ip, lsl #21
   18780:	andeq	r8, r1, ip, lsl #21
   18784:	andeq	r8, r1, ip, lsl #21
   18788:	andeq	r8, r1, ip, lsl #21
   1878c:	andeq	r8, r1, r8, lsl r8
   18790:	andeq	r8, r1, r8, lsl r8
   18794:	andeq	r8, r1, r8, lsl r8
   18798:	andeq	r8, r1, r8, lsl r8
   1879c:	andeq	r8, r1, r8, lsl r8
   187a0:	andeq	r8, r1, r8, lsl r8
   187a4:	andeq	r8, r1, r8, lsl r8
   187a8:	andeq	r8, r1, r8, lsl r8
   187ac:	andeq	r8, r1, r8, lsl r8
   187b0:	andeq	r8, r1, ip, lsl #21
   187b4:	andeq	r8, r1, ip, lsl #21
   187b8:	andeq	r8, r1, r0, asr sl
   187bc:	andeq	r8, r1, ip, lsl #21
   187c0:	andeq	r8, r1, r0, ror #20
   187c4:	andeq	r8, r1, r0, ror sl
   187c8:	andeq	r8, r1, ip, lsl #21
   187cc:	andeq	r8, r1, ip, lsl #21
   187d0:	muleq	r1, r8, sl
   187d4:	andeq	r8, r1, ip, lsl #21
   187d8:	andeq	r8, r1, ip, lsl #21
   187dc:	andeq	r8, r1, ip, lsl #21
   187e0:	andeq	r8, r1, ip, lsl #21
   187e4:	andeq	r8, r1, ip, lsl #21
   187e8:	andeq	r8, r1, ip, lsl #21
   187ec:	andeq	r8, r1, ip, lsl #21
   187f0:	andeq	r8, r1, ip, lsl #21
   187f4:	andeq	r8, r1, ip, lsl #21
   187f8:	andeq	r8, r1, ip, lsl #21
   187fc:	andeq	r8, r1, ip, lsl #21
   18800:	andeq	r8, r1, ip, lsl #21
   18804:	andeq	r8, r1, ip, lsl #21
   18808:	andeq	r8, r1, ip, lsl #21
   1880c:	andeq	r8, r1, ip, lsl #21
   18810:	andeq	r8, r1, ip, lsl #21
   18814:	andeq	r8, r1, r8, lsr #21
   18818:	tst	r8, #16384	; 0x4000
   1881c:	bne	18a8c <__assert_fail@plt+0x7578>
   18820:	sub	r1, r1, #49	; 0x31
   18824:	mov	r2, #4
   18828:	bfi	r0, r2, #0, #8
   1882c:	str	r1, [r9]
   18830:	str	r0, [r9, #4]
   18834:	b	18a8c <__assert_fail@plt+0x7578>
   18838:	cmp	r6, #123	; 0x7b
   1883c:	beq	1893c <__assert_fail@plt+0x7428>
   18840:	cmp	r6, #124	; 0x7c
   18844:	beq	1894c <__assert_fail@plt+0x7438>
   18848:	cmp	r6, #125	; 0x7d
   1884c:	bne	18a8c <__assert_fail@plt+0x7578>
   18850:	and	r1, r8, #4608	; 0x1200
   18854:	cmp	r1, #4608	; 0x1200
   18858:	beq	189f8 <__assert_fail@plt+0x74e4>
   1885c:	b	18a8c <__assert_fail@plt+0x7578>
   18860:	movw	r1, #65280	; 0xff00
   18864:	movt	r1, #65439	; 0xff9f
   18868:	and	r0, r0, r1
   1886c:	orr	r0, r0, #1
   18870:	orr	r0, r0, #2097152	; 0x200000
   18874:	str	r0, [r5]
   18878:	mov	r4, #1
   1887c:	b	18a8c <__assert_fail@plt+0x7578>
   18880:	sub	r1, r2, #115	; 0x73
   18884:	cmp	r1, #10
   18888:	bhi	18960 <__assert_fail@plt+0x744c>
   1888c:	add	r2, pc, #0
   18890:	ldr	pc, [r2, r1, lsl #2]
   18894:	andeq	r8, r1, r0, asr #17
   18898:	andeq	r8, r1, ip, lsl #21
   1889c:	andeq	r8, r1, ip, lsl #21
   188a0:	andeq	r8, r1, ip, lsl #21
   188a4:			; <UNDEFINED> instruction: 0x000189bc
   188a8:	andeq	r8, r1, ip, lsl #21
   188ac:	andeq	r8, r1, ip, lsl #21
   188b0:	andeq	r8, r1, ip, lsl #21
   188b4:	andeq	r8, r1, ip, asr #19
   188b8:	andeq	r8, r1, r0, ror #19
   188bc:	andeq	r8, r1, ip, ror #19
   188c0:	tst	r8, #524288	; 0x80000
   188c4:	bne	18a8c <__assert_fail@plt+0x7578>
   188c8:	mov	r1, #34	; 0x22
   188cc:	b	18a84 <__assert_fail@plt+0x7570>
   188d0:	cmp	r6, #10
   188d4:	bne	18a8c <__assert_fail@plt+0x7578>
   188d8:	tst	r8, #2048	; 0x800
   188dc:	bne	18958 <__assert_fail@plt+0x7444>
   188e0:	b	18a8c <__assert_fail@plt+0x7578>
   188e4:	tst	r8, #8192	; 0x2000
   188e8:	beq	18a8c <__assert_fail@plt+0x7578>
   188ec:	mov	r1, #8
   188f0:	b	18a84 <__assert_fail@plt+0x7570>
   188f4:	tst	r8, #8192	; 0x2000
   188f8:	beq	18a8c <__assert_fail@plt+0x7578>
   188fc:	mov	r1, #9
   18900:	b	18a84 <__assert_fail@plt+0x7570>
   18904:	mov	r1, #11
   18908:	b	18a84 <__assert_fail@plt+0x7570>
   1890c:	movw	r1, #1026	; 0x402
   18910:	tst	r8, r1
   18914:	bne	18a8c <__assert_fail@plt+0x7578>
   18918:	b	18a48 <__assert_fail@plt+0x7534>
   1891c:	mov	r1, #5
   18920:	b	18a84 <__assert_fail@plt+0x7570>
   18924:	movw	r1, #1026	; 0x402
   18928:	tst	r8, r1
   1892c:	bne	18a8c <__assert_fail@plt+0x7578>
   18930:	b	18a80 <__assert_fail@plt+0x756c>
   18934:	mov	r1, #20
   18938:	b	18a84 <__assert_fail@plt+0x7570>
   1893c:	and	r1, r8, #4608	; 0x1200
   18940:	cmp	r1, #4608	; 0x1200
   18944:	beq	189d8 <__assert_fail@plt+0x74c4>
   18948:	b	18a8c <__assert_fail@plt+0x7578>
   1894c:	and	r1, r8, #33792	; 0x8400
   18950:	cmp	r1, #32768	; 0x8000
   18954:	bne	18a8c <__assert_fail@plt+0x7578>
   18958:	mov	r1, #10
   1895c:	b	18a84 <__assert_fail@plt+0x7570>
   18960:	cmp	r2, #96	; 0x60
   18964:	beq	18a00 <__assert_fail@plt+0x74ec>
   18968:	cmp	r2, #98	; 0x62
   1896c:	tsteq	r8, #524288	; 0x80000
   18970:	bne	18a8c <__assert_fail@plt+0x7578>
   18974:	mov	r1, #256	; 0x100
   18978:	b	18710 <__assert_fail@plt+0x71fc>
   1897c:	ldr	r1, [r7, #40]	; 0x28
   18980:	cmp	r1, #0
   18984:	beq	1870c <__assert_fail@plt+0x71f8>
   18988:	tst	r8, #2048	; 0x800
   1898c:	beq	18a8c <__assert_fail@plt+0x7578>
   18990:	ldr	r2, [r7, #4]
   18994:	add	r1, r1, r2
   18998:	ldrb	r1, [r1, #-1]
   1899c:	cmp	r1, #10
   189a0:	beq	1870c <__assert_fail@plt+0x71f8>
   189a4:	b	18a8c <__assert_fail@plt+0x7578>
   189a8:	cmp	r2, #87	; 0x57
   189ac:	tsteq	r8, #524288	; 0x80000
   189b0:	bne	18a8c <__assert_fail@plt+0x7578>
   189b4:	mov	r1, #33	; 0x21
   189b8:	b	18a84 <__assert_fail@plt+0x7570>
   189bc:	tst	r8, #524288	; 0x80000
   189c0:	bne	18a8c <__assert_fail@plt+0x7578>
   189c4:	mov	r1, #32
   189c8:	b	18a84 <__assert_fail@plt+0x7570>
   189cc:	and	r1, r8, #4608	; 0x1200
   189d0:	cmp	r1, #512	; 0x200
   189d4:	bne	18a8c <__assert_fail@plt+0x7578>
   189d8:	mov	r1, #23
   189dc:	b	18a84 <__assert_fail@plt+0x7570>
   189e0:	tst	r8, #33792	; 0x8400
   189e4:	bne	18a8c <__assert_fail@plt+0x7578>
   189e8:	b	18958 <__assert_fail@plt+0x7444>
   189ec:	and	r1, r8, #4608	; 0x1200
   189f0:	cmp	r1, #512	; 0x200
   189f4:	bne	18a8c <__assert_fail@plt+0x7578>
   189f8:	mov	r1, #24
   189fc:	b	18a84 <__assert_fail@plt+0x7570>
   18a00:	tst	r8, #524288	; 0x80000
   18a04:	bne	18a8c <__assert_fail@plt+0x7578>
   18a08:	mov	r1, #64	; 0x40
   18a0c:	b	18710 <__assert_fail@plt+0x71fc>
   18a10:	tst	r8, #524288	; 0x80000
   18a14:	bne	18a8c <__assert_fail@plt+0x7578>
   18a18:	mov	r1, #128	; 0x80
   18a1c:	b	18710 <__assert_fail@plt+0x71fc>
   18a20:	tst	r8, #8192	; 0x2000
   18a24:	beq	188ec <__assert_fail@plt+0x73d8>
   18a28:	b	18a8c <__assert_fail@plt+0x7578>
   18a2c:	tst	r8, #8192	; 0x2000
   18a30:	beq	188fc <__assert_fail@plt+0x73e8>
   18a34:	b	18a8c <__assert_fail@plt+0x7578>
   18a38:	movw	r1, #1026	; 0x402
   18a3c:	and	r1, r8, r1
   18a40:	cmp	r1, #2
   18a44:	bne	18a8c <__assert_fail@plt+0x7578>
   18a48:	mov	r1, #18
   18a4c:	b	18a84 <__assert_fail@plt+0x7570>
   18a50:	tst	r8, #524288	; 0x80000
   18a54:	bne	18a8c <__assert_fail@plt+0x7578>
   18a58:	mov	r1, #6
   18a5c:	b	18710 <__assert_fail@plt+0x71fc>
   18a60:	tst	r8, #524288	; 0x80000
   18a64:	bne	18a8c <__assert_fail@plt+0x7578>
   18a68:	mov	r1, #9
   18a6c:	b	18710 <__assert_fail@plt+0x71fc>
   18a70:	movw	r1, #1026	; 0x402
   18a74:	and	r1, r8, r1
   18a78:	cmp	r1, #2
   18a7c:	bne	18a8c <__assert_fail@plt+0x7578>
   18a80:	mov	r1, #19
   18a84:	bfi	r0, r1, #0, #8
   18a88:	str	r0, [r5]
   18a8c:	mov	r0, r4
   18a90:	sub	sp, fp, #24
   18a94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18a98:	tst	r8, #524288	; 0x80000
   18a9c:	bne	18a8c <__assert_fail@plt+0x7578>
   18aa0:	mov	r1, #512	; 0x200
   18aa4:	b	18710 <__assert_fail@plt+0x71fc>
   18aa8:	tst	r8, #524288	; 0x80000
   18aac:	bne	18a8c <__assert_fail@plt+0x7578>
   18ab0:	mov	r1, #35	; 0x23
   18ab4:	b	18a84 <__assert_fail@plt+0x7570>
   18ab8:	cmp	r3, #2
   18abc:	blt	18aec <__assert_fail@plt+0x75d8>
   18ac0:	ldr	r3, [r7, #8]
   18ac4:	ldr	r4, [r3, r2, lsl #2]
   18ac8:	cmn	r4, #1
   18acc:	beq	1853c <__assert_fail@plt+0x7028>
   18ad0:	ldr	r4, [r7, #28]
   18ad4:	add	r6, r6, #2
   18ad8:	cmp	r4, r6
   18adc:	beq	18aec <__assert_fail@plt+0x75d8>
   18ae0:	ldr	r3, [r3, r6, lsl #2]
   18ae4:	cmn	r3, #1
   18ae8:	beq	1853c <__assert_fail@plt+0x7028>
   18aec:	ldrb	r3, [r7, #76]	; 0x4c
   18af0:	mov	r6, r2
   18af4:	cmp	r3, #0
   18af8:	beq	18b04 <__assert_fail@plt+0x75f0>
   18afc:	ldr	r6, [r7, #12]
   18b00:	ldr	r6, [r6, r2, lsl #2]
   18b04:	ldr	r4, [r7, #24]
   18b08:	ldr	ip, [r7]
   18b0c:	cmp	r3, #0
   18b10:	add	r6, r4, r6
   18b14:	add	r6, ip, r6
   18b18:	ldrsb	r6, [r6]
   18b1c:	beq	18544 <__assert_fail@plt+0x7030>
   18b20:	cmn	r6, #1
   18b24:	ble	1853c <__assert_fail@plt+0x7028>
   18b28:	b	18544 <__assert_fail@plt+0x7030>
   18b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b30:	add	fp, sp, #28
   18b34:	sub	sp, sp, #28
   18b38:	mov	r7, r1
   18b3c:	mov	r1, r0
   18b40:	ldr	r4, [fp, #12]
   18b44:	ldr	r5, [fp, #8]
   18b48:	mov	r6, r2
   18b4c:	str	r3, [sp, #16]
   18b50:	ldr	r0, [r7]
   18b54:	str	r1, [sp, #12]
   18b58:	str	r4, [sp, #4]
   18b5c:	str	r5, [sp]
   18b60:	str	r0, [sp, #8]
   18b64:	mov	r0, r1
   18b68:	mov	r1, r7
   18b6c:	bl	18db8 <__assert_fail@plt+0x78a4>
   18b70:	cmp	r0, #0
   18b74:	bne	18b84 <__assert_fail@plt+0x7670>
   18b78:	ldr	r1, [r4]
   18b7c:	cmp	r1, #0
   18b80:	bne	18ce0 <__assert_fail@plt+0x77cc>
   18b84:	mov	r4, r0
   18b88:	ldrb	r0, [r6, #4]
   18b8c:	orr	r1, r0, #8
   18b90:	cmp	r1, #10
   18b94:	beq	18ce4 <__assert_fail@plt+0x77d0>
   18b98:	cmp	r5, #0
   18b9c:	beq	18ba8 <__assert_fail@plt+0x7694>
   18ba0:	cmp	r0, #9
   18ba4:	beq	18ce4 <__assert_fail@plt+0x77d0>
   18ba8:	ldr	r8, [fp, #12]
   18bac:	ldr	r0, [sp, #12]
   18bb0:	ldr	r3, [sp, #16]
   18bb4:	mov	r1, r7
   18bb8:	mov	r2, r6
   18bbc:	mov	r9, r5
   18bc0:	str	r5, [sp]
   18bc4:	str	r8, [sp, #4]
   18bc8:	bl	18db8 <__assert_fail@plt+0x78a4>
   18bcc:	mov	sl, r0
   18bd0:	cmp	r0, #0
   18bd4:	bne	18be4 <__assert_fail@plt+0x76d0>
   18bd8:	ldr	r0, [r8]
   18bdc:	cmp	r0, #0
   18be0:	bne	18cf0 <__assert_fail@plt+0x77dc>
   18be4:	cmp	r4, #0
   18be8:	cmpne	sl, #0
   18bec:	bne	18c04 <__assert_fail@plt+0x76f0>
   18bf0:	cmp	r4, #0
   18bf4:	mov	r5, r9
   18bf8:	movne	sl, r4
   18bfc:	mov	r0, sl
   18c00:	b	18b84 <__assert_fail@plt+0x7670>
   18c04:	mov	r0, #16
   18c08:	mov	r1, r4
   18c0c:	mov	r2, sl
   18c10:	add	r3, sp, #20
   18c14:	str	r0, [sp, #24]
   18c18:	mov	r0, #0
   18c1c:	str	r0, [sp, #20]
   18c20:	ldr	r0, [sp, #8]
   18c24:	bl	1a2bc <__assert_fail@plt+0x8da8>
   18c28:	cmp	r0, #0
   18c2c:	mov	r5, r9
   18c30:	bne	18b84 <__assert_fail@plt+0x7670>
   18c34:	mov	r5, sl
   18c38:	ldr	sl, [sl, #4]
   18c3c:	cmp	sl, #0
   18c40:	bne	18c34 <__assert_fail@plt+0x7720>
   18c44:	ldr	sl, [r5, #8]
   18c48:	cmp	sl, #0
   18c4c:	bne	18c34 <__assert_fail@plt+0x7720>
   18c50:	add	r0, r5, #20
   18c54:	bl	17884 <__assert_fail@plt+0x6370>
   18c58:	ldr	r0, [r5]
   18c5c:	cmp	r0, #0
   18c60:	beq	18c84 <__assert_fail@plt+0x7770>
   18c64:	ldr	sl, [r0, #8]
   18c68:	cmp	sl, r5
   18c6c:	mov	r5, r0
   18c70:	beq	18c50 <__assert_fail@plt+0x773c>
   18c74:	cmp	sl, #0
   18c78:	mov	r5, r0
   18c7c:	beq	18c50 <__assert_fail@plt+0x773c>
   18c80:	b	18c34 <__assert_fail@plt+0x7720>
   18c84:	mov	r5, r4
   18c88:	ldr	r4, [r4, #4]
   18c8c:	cmp	r4, #0
   18c90:	bne	18c84 <__assert_fail@plt+0x7770>
   18c94:	ldr	r4, [r5, #8]
   18c98:	cmp	r4, #0
   18c9c:	bne	18c84 <__assert_fail@plt+0x7770>
   18ca0:	add	r0, r5, #20
   18ca4:	bl	17884 <__assert_fail@plt+0x6370>
   18ca8:	ldr	r0, [r5]
   18cac:	cmp	r0, #0
   18cb0:	beq	18cd4 <__assert_fail@plt+0x77c0>
   18cb4:	ldr	r4, [r0, #8]
   18cb8:	cmp	r4, r5
   18cbc:	mov	r5, r0
   18cc0:	beq	18ca0 <__assert_fail@plt+0x778c>
   18cc4:	cmp	r4, #0
   18cc8:	mov	r5, r0
   18ccc:	beq	18ca0 <__assert_fail@plt+0x778c>
   18cd0:	b	18c84 <__assert_fail@plt+0x7770>
   18cd4:	ldr	r1, [fp, #12]
   18cd8:	mov	r0, #12
   18cdc:	str	r0, [r1]
   18ce0:	mov	r4, #0
   18ce4:	mov	r0, r4
   18ce8:	sub	sp, fp, #28
   18cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cf0:	cmp	r4, #0
   18cf4:	beq	18ce0 <__assert_fail@plt+0x77cc>
   18cf8:	mov	r5, r4
   18cfc:	ldr	r4, [r4, #4]
   18d00:	cmp	r4, #0
   18d04:	bne	18cf8 <__assert_fail@plt+0x77e4>
   18d08:	ldr	r4, [r5, #8]
   18d0c:	cmp	r4, #0
   18d10:	bne	18cf8 <__assert_fail@plt+0x77e4>
   18d14:	add	r0, r5, #20
   18d18:	bl	17884 <__assert_fail@plt+0x6370>
   18d1c:	ldr	r0, [r5]
   18d20:	cmp	r0, #0
   18d24:	beq	18ce0 <__assert_fail@plt+0x77cc>
   18d28:	ldr	r4, [r0, #8]
   18d2c:	cmp	r4, r5
   18d30:	mov	r5, r0
   18d34:	beq	18d14 <__assert_fail@plt+0x7800>
   18d38:	cmp	r4, #0
   18d3c:	mov	r5, r0
   18d40:	beq	18d14 <__assert_fail@plt+0x7800>
   18d44:	b	18cf8 <__assert_fail@plt+0x77e4>
   18d48:	push	{r4, r5, r6, sl, fp, lr}
   18d4c:	add	fp, sp, #16
   18d50:	mov	r4, r2
   18d54:	mov	r5, r1
   18d58:	mov	r6, r0
   18d5c:	ldr	r0, [r0, #4]
   18d60:	cmp	r0, #0
   18d64:	bne	18d58 <__assert_fail@plt+0x7844>
   18d68:	ldr	r0, [r6, #8]
   18d6c:	cmp	r0, #0
   18d70:	bne	18d58 <__assert_fail@plt+0x7844>
   18d74:	mov	r0, r4
   18d78:	mov	r1, r6
   18d7c:	blx	r5
   18d80:	cmp	r0, #0
   18d84:	bne	18db4 <__assert_fail@plt+0x78a0>
   18d88:	ldr	r1, [r6]
   18d8c:	cmp	r1, #0
   18d90:	beq	18db4 <__assert_fail@plt+0x78a0>
   18d94:	ldr	r0, [r1, #8]
   18d98:	cmp	r0, r6
   18d9c:	mov	r6, r1
   18da0:	beq	18d74 <__assert_fail@plt+0x7860>
   18da4:	cmp	r0, #0
   18da8:	mov	r6, r1
   18dac:	beq	18d74 <__assert_fail@plt+0x7860>
   18db0:	b	18d58 <__assert_fail@plt+0x7844>
   18db4:	pop	{r4, r5, r6, sl, fp, pc}
   18db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dbc:	add	fp, sp, #28
   18dc0:	sub	sp, sp, #140	; 0x8c
   18dc4:	mov	r5, r1
   18dc8:	mov	sl, r0
   18dcc:	mov	r4, r2
   18dd0:	ldr	r0, [r2, #4]
   18dd4:	mvn	r1, #0
   18dd8:	mov	r8, #0
   18ddc:	ldr	r2, [r5]
   18de0:	uxtab	r1, r1, r0
   18de4:	str	r2, [sp, #44]	; 0x2c
   18de8:	ldr	r6, [fp, #12]
   18dec:	ldr	r7, [fp, #8]
   18df0:	add	r2, pc, #12
   18df4:	str	sl, [sp, #40]	; 0x28
   18df8:	str	r3, [sp, #36]	; 0x24
   18dfc:	str	r4, [sp, #20]
   18e00:	ldr	pc, [r2, r1, lsl #2]
   18e04:	andeq	r9, r1, ip, asr r0
   18e08:	andeq	r9, r1, ip, lsl #31
   18e0c:			; <UNDEFINED> instruction: 0x0001a2bc
   18e10:	andeq	r9, r1, r4, asr #2
   18e14:	andeq	r9, r1, r0, lsr #3
   18e18:			; <UNDEFINED> instruction: 0x0001a2bc
   18e1c:			; <UNDEFINED> instruction: 0x0001a2bc
   18e20:	andeq	r9, r1, ip, ror #3
   18e24:	andeq	r8, r1, r4, lsr #29
   18e28:	andeq	r9, r1, ip, lsl #31
   18e2c:	muleq	r1, r4, lr
   18e30:	andeq	r8, r1, r4, ror #30
   18e34:			; <UNDEFINED> instruction: 0x0001a2bc
   18e38:			; <UNDEFINED> instruction: 0x0001a2bc
   18e3c:			; <UNDEFINED> instruction: 0x0001a2bc
   18e40:			; <UNDEFINED> instruction: 0x0001a2bc
   18e44:			; <UNDEFINED> instruction: 0x0001a2bc
   18e48:	muleq	r1, r4, lr
   18e4c:	muleq	r1, r4, lr
   18e50:	andeq	r8, r1, r4, ror #31
   18e54:			; <UNDEFINED> instruction: 0x0001a2bc
   18e58:			; <UNDEFINED> instruction: 0x0001a2bc
   18e5c:			; <UNDEFINED> instruction: 0x000192bc
   18e60:			; <UNDEFINED> instruction: 0x00018eb4
   18e64:			; <UNDEFINED> instruction: 0x0001a2bc
   18e68:			; <UNDEFINED> instruction: 0x0001a2bc
   18e6c:			; <UNDEFINED> instruction: 0x0001a2bc
   18e70:			; <UNDEFINED> instruction: 0x0001a2bc
   18e74:			; <UNDEFINED> instruction: 0x0001a2bc
   18e78:			; <UNDEFINED> instruction: 0x0001a2bc
   18e7c:			; <UNDEFINED> instruction: 0x0001a2bc
   18e80:	strdeq	r8, [r1], -r0
   18e84:	strdeq	r8, [r1], -r0
   18e88:	andeq	r8, r1, r0, lsl pc
   18e8c:	andeq	r8, r1, r0, lsl pc
   18e90:	andeq	r9, r1, ip, asr #5
   18e94:	tst	r3, #32
   18e98:	bne	192c4 <__assert_fail@plt+0x7db0>
   18e9c:	tst	r3, #16
   18ea0:	bne	192d4 <__assert_fail@plt+0x7dc0>
   18ea4:	tst	r3, #131072	; 0x20000
   18ea8:	uxtbeq	r1, r0
   18eac:	cmpeq	r1, #9
   18eb0:	beq	19310 <__assert_fail@plt+0x7dfc>
   18eb4:	mov	r1, #1
   18eb8:	mov	r2, #0
   18ebc:	mov	r3, r4
   18ec0:	mov	r8, #0
   18ec4:	bfi	r0, r1, #0, #8
   18ec8:	mov	r1, #0
   18ecc:	str	r0, [r4, #4]
   18ed0:	ldr	r0, [sp, #44]	; 0x2c
   18ed4:	bl	1a2bc <__assert_fail@plt+0x8da8>
   18ed8:	ldr	r5, [sp, #20]
   18edc:	ldr	r2, [sp, #36]	; 0x24
   18ee0:	mov	r9, r0
   18ee4:	cmp	r0, #0
   18ee8:	bne	199e4 <__assert_fail@plt+0x84d0>
   18eec:	b	1a100 <__assert_fail@plt+0x8bec>
   18ef0:	mvn	r2, #32
   18ef4:	ldr	r1, [sl, #64]	; 0x40
   18ef8:	movw	r3, #12121	; 0x2f59
   18efc:	uxtab	r0, r2, r0
   18f00:	movw	r2, #13622	; 0x3536
   18f04:	movt	r3, #2
   18f08:	movt	r2, #2
   18f0c:	b	18f2c <__assert_fail@plt+0x7a18>
   18f10:	mvn	r2, #34	; 0x22
   18f14:	ldr	r1, [sl, #64]	; 0x40
   18f18:	movw	r3, #12462	; 0x30ae
   18f1c:	uxtab	r0, r2, r0
   18f20:	movw	r2, #13628	; 0x353c
   18f24:	movt	r3, #2
   18f28:	movt	r2, #2
   18f2c:	clz	r0, r0
   18f30:	lsr	r0, r0, #5
   18f34:	stm	sp, {r0, r6}
   18f38:	ldr	r0, [sp, #44]	; 0x2c
   18f3c:	bl	1a364 <__assert_fail@plt+0x8e50>
   18f40:	mov	r9, r0
   18f44:	cmp	r0, #0
   18f48:	bne	191e0 <__assert_fail@plt+0x7ccc>
   18f4c:	ldr	r0, [r6]
   18f50:	ldr	r2, [sp, #36]	; 0x24
   18f54:	ldr	r5, [sp, #20]
   18f58:	cmp	r0, #0
   18f5c:	beq	199e4 <__assert_fail@plt+0x84d0>
   18f60:	b	19f8c <__assert_fail@plt+0x8a78>
   18f64:	ldr	r0, [r4]
   18f68:	movw	r1, #783	; 0x30f
   18f6c:	tst	r0, r1
   18f70:	beq	18fc0 <__assert_fail@plt+0x7aac>
   18f74:	ldr	r0, [sp, #44]	; 0x2c
   18f78:	ldrb	r0, [r0, #88]	; 0x58
   18f7c:	tst	r0, #16
   18f80:	bne	18fbc <__assert_fail@plt+0x7aa8>
   18f84:	ldr	r2, [sp, #44]	; 0x2c
   18f88:	orr	r1, r0, #16
   18f8c:	tst	r0, #8
   18f90:	strb	r1, [r2, #88]	; 0x58
   18f94:	bne	1a160 <__assert_fail@plt+0x8c4c>
   18f98:	add	r1, pc, #896	; 0x380
   18f9c:	tst	r0, #4
   18fa0:	vld1.64	{d16-d17}, [r1]
   18fa4:	add	r1, r2, #96	; 0x60
   18fa8:	vst1.32	{d16-d17}, [r1]
   18fac:	beq	1a170 <__assert_fail@plt+0x8c5c>
   18fb0:	vmov.i32	q8, #0	; 0x00000000
   18fb4:	add	r0, r2, #112	; 0x70
   18fb8:	vst1.32	{d16-d17}, [r0]
   18fbc:	ldr	r0, [r4]
   18fc0:	mov	r9, r6
   18fc4:	ldr	r6, [sp, #44]	; 0x2c
   18fc8:	cmp	r0, #256	; 0x100
   18fcc:	beq	19f98 <__assert_fail@plt+0x8a84>
   18fd0:	cmp	r0, #512	; 0x200
   18fd4:	bne	1a014 <__assert_fail@plt+0x8b00>
   18fd8:	mov	r5, #10
   18fdc:	mov	r0, #5
   18fe0:	b	19fa0 <__assert_fail@plt+0x8a8c>
   18fe4:	mov	r0, #0
   18fe8:	mov	r1, #1
   18fec:	str	r6, [sp, #16]
   18ff0:	mov	r9, #0
   18ff4:	str	r0, [fp, #-32]	; 0xffffffe0
   18ff8:	mov	r0, #32
   18ffc:	bl	21f80 <__assert_fail@plt+0x10a6c>
   19000:	mov	r4, r0
   19004:	mov	r0, #40	; 0x28
   19008:	mov	r1, #1
   1900c:	bl	21f80 <__assert_fail@plt+0x10a6c>
   19010:	mov	r8, r0
   19014:	cmp	r4, #0
   19018:	cmpne	r8, #0
   1901c:	beq	1a120 <__assert_fail@plt+0x8c0c>
   19020:	ldr	r6, [sp, #20]
   19024:	ldr	r5, [sp, #36]	; 0x24
   19028:	mov	r1, sl
   1902c:	mov	r0, r6
   19030:	mov	r2, r5
   19034:	bl	1a590 <__assert_fail@plt+0x907c>
   19038:	mov	r3, r0
   1903c:	ldr	r0, [r6, #4]
   19040:	uxtb	r1, r0
   19044:	cmp	r1, #25
   19048:	beq	19330 <__assert_fail@plt+0x7e1c>
   1904c:	cmp	r1, #2
   19050:	beq	1a118 <__assert_fail@plt+0x8c04>
   19054:	mov	r9, #0
   19058:	b	19388 <__assert_fail@plt+0x7e74>
   1905c:	ldr	r5, [sp, #44]	; 0x2c
   19060:	mov	r1, #0
   19064:	mov	r2, #0
   19068:	mov	r3, r4
   1906c:	mov	r8, #0
   19070:	mov	r0, r5
   19074:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19078:	cmp	r0, #0
   1907c:	beq	1a100 <__assert_fail@plt+0x8bec>
   19080:	mov	r9, r0
   19084:	ldr	r0, [r5, #92]	; 0x5c
   19088:	cmp	r0, #2
   1908c:	blt	191e0 <__assert_fail@plt+0x7ccc>
   19090:	mov	r7, #16
   19094:	sub	r4, fp, #80	; 0x50
   19098:	ldr	r0, [sl, #40]	; 0x28
   1909c:	ldr	r1, [sl, #56]	; 0x38
   190a0:	cmp	r1, r0
   190a4:	ble	191e0 <__assert_fail@plt+0x7ccc>
   190a8:	ldr	r1, [sl, #28]
   190ac:	ldr	r2, [sp, #36]	; 0x24
   190b0:	ldr	r5, [sp, #20]
   190b4:	cmp	r0, r1
   190b8:	beq	199e4 <__assert_fail@plt+0x84d0>
   190bc:	ldr	r1, [sl, #8]
   190c0:	ldr	r0, [r1, r0, lsl #2]
   190c4:	cmn	r0, #1
   190c8:	bne	199e4 <__assert_fail@plt+0x84d0>
   190cc:	mov	r0, r5
   190d0:	mov	r1, sl
   190d4:	bl	1849c <__assert_fail@plt+0x6f88>
   190d8:	ldr	r1, [sl, #40]	; 0x28
   190dc:	mov	r8, r6
   190e0:	ldr	r6, [sp, #44]	; 0x2c
   190e4:	mov	r2, #0
   190e8:	mov	r3, r5
   190ec:	add	r0, r1, r0
   190f0:	mov	r1, #0
   190f4:	str	r0, [sl, #40]	; 0x28
   190f8:	mov	r0, r6
   190fc:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19100:	mov	r5, r0
   19104:	mov	r0, #0
   19108:	str	r7, [fp, #-76]	; 0xffffffb4
   1910c:	mov	r1, r9
   19110:	mov	r3, r4
   19114:	str	r0, [fp, #-80]	; 0xffffffb0
   19118:	mov	r0, r6
   1911c:	mov	r2, r5
   19120:	mov	r6, r8
   19124:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19128:	cmp	r5, #0
   1912c:	movne	r9, r0
   19130:	cmpne	r0, #0
   19134:	bne	19098 <__assert_fail@plt+0x7b84>
   19138:	mov	r0, #12
   1913c:	str	r0, [r6]
   19140:	b	19f88 <__assert_fail@plt+0x8a74>
   19144:	ldr	r5, [sp, #44]	; 0x2c
   19148:	ldr	r0, [r4]
   1914c:	mov	r1, #1
   19150:	ldr	r2, [r5, #84]	; 0x54
   19154:	tst	r2, r1, lsl r0
   19158:	beq	1a140 <__assert_fail@plt+0x8c2c>
   1915c:	lsl	r0, r1, r0
   19160:	ldr	r1, [r5, #80]	; 0x50
   19164:	mov	r2, #0
   19168:	mov	r3, r4
   1916c:	mov	r8, #0
   19170:	orr	r0, r1, r0
   19174:	mov	r1, #0
   19178:	str	r0, [r5, #80]	; 0x50
   1917c:	mov	r0, r5
   19180:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19184:	cmp	r0, #0
   19188:	beq	1a100 <__assert_fail@plt+0x8bec>
   1918c:	mov	r9, r0
   19190:	ldr	r0, [r5, #76]	; 0x4c
   19194:	add	r0, r0, #1
   19198:	str	r0, [r5, #76]	; 0x4c
   1919c:	b	191d4 <__assert_fail@plt+0x7cc0>
   191a0:	ldr	r5, [sp, #44]	; 0x2c
   191a4:	mov	r1, #0
   191a8:	mov	r2, #0
   191ac:	mov	r3, r4
   191b0:	mov	r8, #0
   191b4:	mov	r0, r5
   191b8:	bl	1a2bc <__assert_fail@plt+0x8da8>
   191bc:	cmp	r0, #0
   191c0:	beq	1a100 <__assert_fail@plt+0x8bec>
   191c4:	mov	r9, r0
   191c8:	ldr	r0, [r5, #92]	; 0x5c
   191cc:	cmp	r0, #2
   191d0:	blt	191e0 <__assert_fail@plt+0x7ccc>
   191d4:	ldrb	r0, [r5, #88]	; 0x58
   191d8:	orr	r0, r0, #2
   191dc:	strb	r0, [r5, #88]	; 0x58
   191e0:	ldr	r2, [sp, #36]	; 0x24
   191e4:	ldr	r5, [sp, #20]
   191e8:	b	199e4 <__assert_fail@plt+0x84d0>
   191ec:	str	r6, [sp, #16]
   191f0:	ldr	r6, [r5, #24]
   191f4:	orr	r2, r3, #8388608	; 0x800000
   191f8:	mov	r1, sl
   191fc:	add	r0, r6, #1
   19200:	str	r0, [r5, #24]
   19204:	mov	r0, r4
   19208:	bl	1849c <__assert_fail@plt+0x6f88>
   1920c:	ldr	r1, [sl, #40]	; 0x28
   19210:	ldr	r2, [sp, #20]
   19214:	add	r0, r1, r0
   19218:	mov	r1, #0
   1921c:	str	r0, [sl, #40]	; 0x28
   19220:	ldrb	r0, [r2, #4]
   19224:	cmp	r0, #9
   19228:	beq	19270 <__assert_fail@plt+0x7d5c>
   1922c:	add	r0, r7, #1
   19230:	mov	r1, r5
   19234:	mov	r4, r2
   19238:	str	r0, [sp]
   1923c:	mov	r0, sl
   19240:	ldr	r7, [sp, #16]
   19244:	str	r7, [sp, #4]
   19248:	ldr	r3, [sp, #36]	; 0x24
   1924c:	bl	182ec <__assert_fail@plt+0x6dd8>
   19250:	mov	r1, r0
   19254:	ldr	r0, [r7]
   19258:	mov	r8, #0
   1925c:	cmp	r0, #0
   19260:	bne	19f8c <__assert_fail@plt+0x8a78>
   19264:	ldrb	r0, [r4, #4]
   19268:	cmp	r0, #9
   1926c:	bne	1a200 <__assert_fail@plt+0x8cec>
   19270:	ldr	r0, [sp, #44]	; 0x2c
   19274:	cmp	r6, #8
   19278:	bhi	1928c <__assert_fail@plt+0x7d78>
   1927c:	ldr	r3, [r0, #84]	; 0x54
   19280:	mov	r2, #1
   19284:	orr	r2, r3, r2, lsl r6
   19288:	str	r2, [r0, #84]	; 0x54
   1928c:	mov	r2, #17
   19290:	mov	r8, #0
   19294:	sub	r3, fp, #80	; 0x50
   19298:	str	r2, [fp, #-76]	; 0xffffffb4
   1929c:	mov	r2, #0
   192a0:	str	r8, [fp, #-80]	; 0xffffffb0
   192a4:	bl	1a2bc <__assert_fail@plt+0x8da8>
   192a8:	cmp	r0, #0
   192ac:	beq	1a150 <__assert_fail@plt+0x8c3c>
   192b0:	mov	r9, r0
   192b4:	str	r6, [r0, #20]
   192b8:	b	199d8 <__assert_fail@plt+0x84c4>
   192bc:	tst	r3, #16777216	; 0x1000000
   192c0:	beq	18e94 <__assert_fail@plt+0x7980>
   192c4:	mov	r0, #13
   192c8:	b	19314 <__assert_fail@plt+0x7e00>
   192cc:	mov	r0, #5
   192d0:	b	19314 <__assert_fail@plt+0x7e00>
   192d4:	mov	r0, r4
   192d8:	mov	r1, sl
   192dc:	mov	r2, r3
   192e0:	mov	r6, r3
   192e4:	bl	1849c <__assert_fail@plt+0x6f88>
   192e8:	ldr	r1, [sl, #40]	; 0x28
   192ec:	mov	r2, r4
   192f0:	mov	r3, r6
   192f4:	add	r0, r1, r0
   192f8:	mov	r1, r5
   192fc:	str	r0, [sl, #40]	; 0x28
   19300:	mov	r0, sl
   19304:	sub	sp, fp, #28
   19308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1930c:	b	18db8 <__assert_fail@plt+0x78a4>
   19310:	mov	r0, #16
   19314:	str	r0, [r6]
   19318:	b	19f8c <__assert_fail@plt+0x8a78>
   1931c:	nop	{0}
   19320:	andeq	r0, r0, r0
   19324:	mvnseq	r0, #0
   19328:			; <UNDEFINED> instruction: 0x87fffffe
   1932c:			; <UNDEFINED> instruction: 0x07fffffe
   19330:	ldrb	r0, [r8, #16]
   19334:	tst	r5, #256	; 0x100
   19338:	orr	r0, r0, #1
   1933c:	strb	r0, [r8, #16]
   19340:	beq	19350 <__assert_fail@plt+0x7e3c>
   19344:	ldr	r0, [r4]
   19348:	orr	r0, r0, #1024	; 0x400
   1934c:	str	r0, [r4]
   19350:	ldr	r0, [sl, #40]	; 0x28
   19354:	ldr	r2, [sp, #36]	; 0x24
   19358:	mov	r1, sl
   1935c:	add	r0, r0, r3
   19360:	str	r0, [sl, #40]	; 0x28
   19364:	mov	r0, r6
   19368:	bl	1a590 <__assert_fail@plt+0x907c>
   1936c:	ldr	r6, [sp, #20]
   19370:	mov	r3, r0
   19374:	ldr	r0, [r6, #4]
   19378:	uxtb	r1, r0
   1937c:	cmp	r1, #2
   19380:	beq	1a118 <__assert_fail@plt+0x8c04>
   19384:	mov	r9, #1
   19388:	uxtb	r1, r0
   1938c:	str	r8, [sp, #32]
   19390:	mov	r2, r6
   19394:	ldr	r5, [sp, #36]	; 0x24
   19398:	cmp	r1, #21
   1939c:	moveq	r1, #1
   193a0:	bfieq	r0, r1, #0, #8
   193a4:	mov	r1, sl
   193a8:	streq	r0, [r6, #4]
   193ac:	sub	r0, fp, #80	; 0x50
   193b0:	str	r0, [fp, #-36]	; 0xffffffdc
   193b4:	mov	r0, #3
   193b8:	str	r0, [fp, #-40]	; 0xffffffd8
   193bc:	mov	r0, #1
   193c0:	str	r5, [sp]
   193c4:	str	r0, [sp, #4]
   193c8:	sub	r0, fp, #40	; 0x28
   193cc:	bl	1a6f8 <__assert_fail@plt+0x91e4>
   193d0:	cmp	r0, #0
   193d4:	bne	1a108 <__assert_fail@plt+0x8bf4>
   193d8:	and	r0, r5, #65536	; 0x10000
   193dc:	mov	r2, r5
   193e0:	str	r0, [sp, #24]
   193e4:	mov	r0, #0
   193e8:	str	r0, [sp, #12]
   193ec:	mov	r0, #0
   193f0:	str	r0, [sp, #8]
   193f4:	ldr	r5, [sp, #20]
   193f8:	mov	r0, r5
   193fc:	mov	r1, sl
   19400:	bl	1a590 <__assert_fail@plt+0x907c>
   19404:	ldr	r7, [fp, #-40]	; 0xffffffd8
   19408:	ldr	r6, [sp, #16]
   1940c:	mov	r8, r0
   19410:	cmp	r7, #2
   19414:	beq	19594 <__assert_fail@plt+0x8080>
   19418:	cmp	r7, #4
   1941c:	bne	19458 <__assert_fail@plt+0x7f44>
   19420:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19424:	ldr	r0, [sl, #64]	; 0x40
   19428:	sub	r3, fp, #32
   1942c:	str	r1, [sp]
   19430:	ldr	r1, [sp, #36]	; 0x24
   19434:	str	r1, [sp, #4]
   19438:	mov	r1, r4
   1943c:	ldr	r2, [sp, #32]
   19440:	bl	1a9bc <__assert_fail@plt+0x94a8>
   19444:	ldr	r2, [sp, #20]
   19448:	cmp	r0, #0
   1944c:	str	r0, [r6]
   19450:	beq	195d0 <__assert_fail@plt+0x80bc>
   19454:	b	1a274 <__assert_fail@plt+0x8d60>
   19458:	ldr	r0, [sp, #20]
   1945c:	mov	r6, #7
   19460:	str	r9, [sp, #28]
   19464:	ldrb	r0, [r0, #4]
   19468:	cmp	r0, #22
   1946c:	beq	1947c <__assert_fail@plt+0x7f68>
   19470:	cmp	r0, #2
   19474:	bne	19574 <__assert_fail@plt+0x8060>
   19478:	b	1a26c <__assert_fail@plt+0x8d58>
   1947c:	ldr	r0, [sl, #40]	; 0x28
   19480:	ldr	r2, [sp, #36]	; 0x24
   19484:	mov	r1, sl
   19488:	add	r0, r0, r8
   1948c:	str	r0, [sl, #40]	; 0x28
   19490:	add	r0, sp, #48	; 0x30
   19494:	bl	1a590 <__assert_fail@plt+0x907c>
   19498:	mov	r3, r0
   1949c:	ldrb	r0, [sp, #52]	; 0x34
   194a0:	cmp	r0, #21
   194a4:	beq	1955c <__assert_fail@plt+0x8048>
   194a8:	cmp	r0, #2
   194ac:	beq	1a26c <__assert_fail@plt+0x8d58>
   194b0:	mov	r0, #3
   194b4:	ldr	r5, [sp, #36]	; 0x24
   194b8:	mov	r1, sl
   194bc:	add	r2, sp, #48	; 0x30
   194c0:	str	r0, [fp, #-48]	; 0xffffffd0
   194c4:	add	r0, sp, #56	; 0x38
   194c8:	str	r0, [fp, #-44]	; 0xffffffd4
   194cc:	mov	r0, #1
   194d0:	str	r0, [sp, #4]
   194d4:	sub	r0, fp, #48	; 0x30
   194d8:	str	r5, [sp]
   194dc:	bl	1a6f8 <__assert_fail@plt+0x91e4>
   194e0:	cmp	r0, #0
   194e4:	bne	1a108 <__assert_fail@plt+0x8bf4>
   194e8:	ldr	r0, [sp, #20]
   194ec:	mov	r1, sl
   194f0:	mov	r2, r5
   194f4:	bl	1a590 <__assert_fail@plt+0x907c>
   194f8:	ldr	sl, [fp, #-48]	; 0xffffffd0
   194fc:	mov	r6, #11
   19500:	cmp	sl, #2
   19504:	cmpne	sl, #4
   19508:	beq	1a268 <__assert_fail@plt+0x8d54>
   1950c:	mov	r8, r0
   19510:	cmp	r7, #3
   19514:	bne	19528 <__assert_fail@plt+0x8014>
   19518:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1951c:	bl	113dc <strlen@plt>
   19520:	cmp	r0, #1
   19524:	bhi	1a264 <__assert_fail@plt+0x8d50>
   19528:	cmp	sl, #3
   1952c:	bne	19540 <__assert_fail@plt+0x802c>
   19530:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19534:	bl	113dc <strlen@plt>
   19538:	cmp	r0, #1
   1953c:	bhi	1a264 <__assert_fail@plt+0x8d50>
   19540:	ldr	r2, [sp, #20]
   19544:	cmp	r7, #3
   19548:	beq	19684 <__assert_fail@plt+0x8170>
   1954c:	cmp	r7, #0
   19550:	mov	r5, #0
   19554:	ldrbeq	r5, [fp, #-36]	; 0xffffffdc
   19558:	b	1968c <__assert_fail@plt+0x8178>
   1955c:	ldr	r0, [sl, #40]	; 0x28
   19560:	mov	r1, #1
   19564:	sub	r0, r0, r8
   19568:	str	r0, [sl, #40]	; 0x28
   1956c:	ldr	r0, [sp, #20]
   19570:	strb	r1, [r0, #4]
   19574:	add	r0, pc, #8
   19578:	ldr	r6, [sp, #16]
   1957c:	ldr	r9, [sp, #28]
   19580:	ldr	pc, [r0, r7, lsl #2]
   19584:	andeq	r9, r1, r8, lsr #12
   19588:	andeq	r9, r1, ip, asr #12
   1958c:	muleq	r1, r4, r5
   19590:	muleq	r1, r4, r5
   19594:	ldr	r5, [fp, #-36]	; 0xffffffdc
   19598:	mov	r0, r5
   1959c:	bl	113dc <strlen@plt>
   195a0:	cmp	r0, #1
   195a4:	bne	1a148 <__assert_fail@plt+0x8c34>
   195a8:	ldrb	r0, [r5]
   195ac:	mov	r3, #1
   195b0:	ubfx	r1, r0, #5, #3
   195b4:	and	r0, r0, #31
   195b8:	ldr	r2, [r4, r1, lsl #2]
   195bc:	orr	r0, r2, r3, lsl r0
   195c0:	str	r0, [r4, r1, lsl #2]
   195c4:	mov	r0, #0
   195c8:	ldr	r2, [sp, #20]
   195cc:	str	r0, [r6]
   195d0:	ldrb	r0, [r2, #4]
   195d4:	cmp	r0, #21
   195d8:	beq	19858 <__assert_fail@plt+0x8344>
   195dc:	cmp	r0, #2
   195e0:	ldr	r0, [sp, #36]	; 0x24
   195e4:	beq	1a110 <__assert_fail@plt+0x8bfc>
   195e8:	sub	r1, fp, #80	; 0x50
   195ec:	mov	r3, r8
   195f0:	mov	r5, r2
   195f4:	str	r1, [fp, #-36]	; 0xffffffdc
   195f8:	mov	r1, #3
   195fc:	str	r1, [fp, #-40]	; 0xffffffd8
   19600:	str	r0, [sp]
   19604:	mov	r0, #0
   19608:	mov	r1, sl
   1960c:	str	r0, [sp, #4]
   19610:	sub	r0, fp, #40	; 0x28
   19614:	bl	1a6f8 <__assert_fail@plt+0x91e4>
   19618:	ldr	r2, [sp, #36]	; 0x24
   1961c:	cmp	r0, #0
   19620:	beq	193f8 <__assert_fail@plt+0x7ee4>
   19624:	b	1a108 <__assert_fail@plt+0x8bf4>
   19628:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1962c:	mov	r3, #1
   19630:	ubfx	r1, r0, #5, #3
   19634:	and	r0, r0, #31
   19638:	ldr	r2, [r4, r1, lsl #2]
   1963c:	orr	r0, r2, r3, lsl r0
   19640:	ldr	r2, [sp, #20]
   19644:	str	r0, [r4, r1, lsl #2]
   19648:	b	195d0 <__assert_fail@plt+0x80bc>
   1964c:	ldr	r6, [sp, #32]
   19650:	ldr	r0, [sp, #12]
   19654:	mov	r5, r9
   19658:	ldr	r1, [r6, #20]
   1965c:	cmp	r0, r1
   19660:	beq	197c0 <__assert_fail@plt+0x82ac>
   19664:	ldr	r0, [r6]
   19668:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1966c:	ldr	r2, [sp, #20]
   19670:	add	r7, r1, #1
   19674:	mov	r9, r5
   19678:	str	r7, [r6, #20]
   1967c:	str	r3, [r0, r1, lsl #2]
   19680:	b	195d0 <__assert_fail@plt+0x80bc>
   19684:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19688:	ldrb	r5, [r0]
   1968c:	cmp	sl, #3
   19690:	beq	196a4 <__assert_fail@plt+0x8190>
   19694:	cmp	sl, #0
   19698:	mov	r9, #0
   1969c:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   196a0:	b	196ac <__assert_fail@plt+0x8198>
   196a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   196a8:	ldrb	r9, [r0]
   196ac:	cmp	r7, #3
   196b0:	cmpne	r7, #0
   196b4:	bne	196dc <__assert_fail@plt+0x81c8>
   196b8:	ldr	r6, [sp, #44]	; 0x2c
   196bc:	ldr	r0, [r6, #92]	; 0x5c
   196c0:	cmp	r0, #2
   196c4:	blt	196e4 <__assert_fail@plt+0x81d0>
   196c8:	mov	r0, r5
   196cc:	bl	11424 <btowc@plt>
   196d0:	ldr	r2, [sp, #20]
   196d4:	mov	r5, r0
   196d8:	b	196e4 <__assert_fail@plt+0x81d0>
   196dc:	ldr	r5, [fp, #-36]	; 0xffffffdc
   196e0:	ldr	r6, [sp, #44]	; 0x2c
   196e4:	cmp	sl, #3
   196e8:	cmpne	sl, #0
   196ec:	bne	19710 <__assert_fail@plt+0x81fc>
   196f0:	ldr	r0, [r6, #92]	; 0x5c
   196f4:	cmp	r0, #2
   196f8:	blt	19714 <__assert_fail@plt+0x8200>
   196fc:	mov	r0, r9
   19700:	bl	11424 <btowc@plt>
   19704:	ldr	r2, [sp, #20]
   19708:	mov	r9, r0
   1970c:	b	19714 <__assert_fail@plt+0x8200>
   19710:	ldr	r9, [fp, #-44]	; 0xffffffd4
   19714:	ldr	sl, [sp, #40]	; 0x28
   19718:	cmn	r5, #1
   1971c:	mov	r6, #3
   19720:	cmnne	r9, #1
   19724:	beq	1a26c <__assert_fail@plt+0x8d58>
   19728:	ldr	r0, [sp, #24]
   1972c:	cmp	r0, #0
   19730:	beq	19740 <__assert_fail@plt+0x822c>
   19734:	cmp	r5, r9
   19738:	mov	r6, #11
   1973c:	bhi	1a26c <__assert_fail@plt+0x8d58>
   19740:	ldr	r0, [sp, #44]	; 0x2c
   19744:	ldr	r0, [r0, #92]	; 0x5c
   19748:	cmp	r0, #2
   1974c:	blt	1977c <__assert_fail@plt+0x8268>
   19750:	ldr	r7, [sp, #32]
   19754:	ldr	r1, [sp, #8]
   19758:	ldr	r0, [r7, #32]
   1975c:	cmp	r1, r0
   19760:	beq	197f8 <__assert_fail@plt+0x82e4>
   19764:	ldmib	r7, {r1, r6}
   19768:	str	r5, [r1, r0, lsl #2]
   1976c:	ldr	r0, [r7, #32]
   19770:	add	r1, r0, #1
   19774:	str	r1, [r7, #32]
   19778:	str	r9, [r6, r0, lsl #2]
   1977c:	mov	r0, #0
   19780:	mov	r6, #1
   19784:	cmp	r5, r0
   19788:	cmpls	r0, r9
   1978c:	bhi	197a4 <__assert_fail@plt+0x8290>
   19790:	ubfx	r1, r0, #5, #3
   19794:	and	r3, r0, #31
   19798:	ldr	r7, [r4, r1, lsl #2]
   1979c:	orr	r3, r7, r6, lsl r3
   197a0:	str	r3, [r4, r1, lsl #2]
   197a4:	add	r0, r0, #1
   197a8:	cmp	r0, #256	; 0x100
   197ac:	bne	19784 <__assert_fail@plt+0x8270>
   197b0:	ldr	r6, [sp, #16]
   197b4:	ldr	r9, [sp, #28]
   197b8:	mov	r0, #0
   197bc:	b	195cc <__assert_fail@plt+0x80b8>
   197c0:	ldr	r1, [sp, #12]
   197c4:	mov	r0, #1
   197c8:	orr	r1, r0, r1, lsl #1
   197cc:	ldr	r0, [r6]
   197d0:	str	r1, [sp, #12]
   197d4:	lsl	r1, r1, #2
   197d8:	bl	22004 <__assert_fail@plt+0x10af0>
   197dc:	cmp	r0, #0
   197e0:	beq	1a290 <__assert_fail@plt+0x8d7c>
   197e4:	ldr	r6, [sp, #32]
   197e8:	ldr	sl, [sp, #40]	; 0x28
   197ec:	str	r0, [r6]
   197f0:	ldr	r1, [r6, #20]
   197f4:	b	19668 <__assert_fail@plt+0x8154>
   197f8:	ldr	r1, [sp, #8]
   197fc:	mov	r0, #1
   19800:	orr	r1, r0, r1, lsl #1
   19804:	ldr	r0, [r7, #4]
   19808:	lsl	r6, r1, #2
   1980c:	str	r1, [sp, #8]
   19810:	mov	r1, r6
   19814:	bl	22004 <__assert_fail@plt+0x10af0>
   19818:	mov	sl, r0
   1981c:	ldr	r0, [r7, #8]
   19820:	mov	r1, r6
   19824:	bl	22004 <__assert_fail@plt+0x10af0>
   19828:	mov	r6, r0
   1982c:	cmp	sl, #0
   19830:	mov	r0, sl
   19834:	cmpne	r6, #0
   19838:	beq	1a2a8 <__assert_fail@plt+0x8d94>
   1983c:	ldr	r7, [sp, #32]
   19840:	mov	r1, r0
   19844:	stmib	r7, {r0, r6}
   19848:	ldr	r0, [r7, #32]
   1984c:	ldr	sl, [sp, #40]	; 0x28
   19850:	ldr	r2, [sp, #20]
   19854:	b	19768 <__assert_fail@plt+0x8254>
   19858:	ldr	r0, [sl, #40]	; 0x28
   1985c:	ldr	r2, [sp, #44]	; 0x2c
   19860:	cmp	r9, #0
   19864:	add	r0, r0, r8
   19868:	str	r0, [sl, #40]	; 0x28
   1986c:	beq	19890 <__assert_fail@plt+0x837c>
   19870:	mov	r0, #0
   19874:	add	r1, r4, r0
   19878:	add	r0, r0, #16
   1987c:	vld1.32	{d16-d17}, [r1]
   19880:	cmp	r0, #32
   19884:	vmvn	q8, q8
   19888:	vst1.32	{d16-d17}, [r1]
   1988c:	bne	19874 <__assert_fail@plt+0x8360>
   19890:	ldr	r0, [r2, #92]	; 0x5c
   19894:	ldr	r8, [sp, #32]
   19898:	cmp	r0, #2
   1989c:	blt	198c8 <__assert_fail@plt+0x83b4>
   198a0:	ldr	r1, [sp, #44]	; 0x2c
   198a4:	mov	r2, #0
   198a8:	ldr	r1, [r1, #60]	; 0x3c
   198ac:	ldr	r3, [r1, r2, lsl #2]
   198b0:	ldr	r7, [r4, r2, lsl #2]
   198b4:	and	r3, r7, r3
   198b8:	str	r3, [r4, r2, lsl #2]
   198bc:	add	r2, r2, #1
   198c0:	cmp	r2, #8
   198c4:	bne	198ac <__assert_fail@plt+0x8398>
   198c8:	ldr	r1, [r8, #20]
   198cc:	cmp	r1, #0
   198d0:	bne	198f8 <__assert_fail@plt+0x83e4>
   198d4:	ldr	r1, [r8, #24]
   198d8:	cmp	r1, #0
   198dc:	bne	198f8 <__assert_fail@plt+0x83e4>
   198e0:	ldr	r1, [r8, #28]
   198e4:	cmp	r1, #0
   198e8:	bne	198f8 <__assert_fail@plt+0x83e4>
   198ec:	ldr	r1, [r8, #32]
   198f0:	cmp	r1, #0
   198f4:	beq	1a0b8 <__assert_fail@plt+0x8ba4>
   198f8:	ldr	r6, [sp, #44]	; 0x2c
   198fc:	add	r3, sp, #56	; 0x38
   19900:	mov	r1, #0
   19904:	mov	r2, #0
   19908:	mov	r5, #0
   1990c:	ldrb	r0, [r6, #88]	; 0x58
   19910:	orr	r0, r0, #2
   19914:	strb	r0, [r6, #88]	; 0x58
   19918:	mov	r0, #6
   1991c:	str	r8, [sp, #56]	; 0x38
   19920:	str	r0, [sp, #60]	; 0x3c
   19924:	mov	r0, r6
   19928:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1992c:	cmp	r0, #0
   19930:	beq	1a298 <__assert_fail@plt+0x8d84>
   19934:	mov	r9, r0
   19938:	ldr	r0, [r4, r5, lsl #2]
   1993c:	cmp	r0, #0
   19940:	bne	1995c <__assert_fail@plt+0x8448>
   19944:	add	r5, r5, #1
   19948:	cmp	r5, #8
   1994c:	bne	19938 <__assert_fail@plt+0x8424>
   19950:	mov	r0, r4
   19954:	bl	22190 <__assert_fail@plt+0x10c7c>
   19958:	b	199b4 <__assert_fail@plt+0x84a0>
   1995c:	mov	r0, #3
   19960:	str	r4, [sp, #56]	; 0x38
   19964:	add	r3, sp, #56	; 0x38
   19968:	mov	r1, #0
   1996c:	mov	r2, #0
   19970:	mov	r5, #0
   19974:	str	r0, [sp, #60]	; 0x3c
   19978:	mov	r0, r6
   1997c:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19980:	cmp	r0, #0
   19984:	beq	1a298 <__assert_fail@plt+0x8d84>
   19988:	mov	r1, r0
   1998c:	mov	r0, #10
   19990:	sub	r3, fp, #80	; 0x50
   19994:	mov	r2, r9
   19998:	str	r0, [fp, #-76]	; 0xffffffb4
   1999c:	str	r5, [fp, #-80]	; 0xffffffb0
   199a0:	mov	r0, r6
   199a4:	bl	1a2bc <__assert_fail@plt+0x8da8>
   199a8:	mov	r9, r0
   199ac:	cmp	r0, #0
   199b0:	beq	1a298 <__assert_fail@plt+0x8d84>
   199b4:	cmp	r9, #0
   199b8:	bne	199d8 <__assert_fail@plt+0x84c4>
   199bc:	ldr	r6, [sp, #16]
   199c0:	ldr	r2, [sp, #36]	; 0x24
   199c4:	ldr	r5, [sp, #20]
   199c8:	ldr	r0, [r6]
   199cc:	cmp	r0, #0
   199d0:	beq	199e4 <__assert_fail@plt+0x84d0>
   199d4:	b	19f88 <__assert_fail@plt+0x8a74>
   199d8:	ldr	r2, [sp, #36]	; 0x24
   199dc:	ldr	r5, [sp, #20]
   199e0:	ldr	r6, [sp, #16]
   199e4:	mov	r0, r5
   199e8:	mov	r1, sl
   199ec:	str	r6, [sp, #16]
   199f0:	bl	1849c <__assert_fail@plt+0x6f88>
   199f4:	ldr	r1, [sl, #40]	; 0x28
   199f8:	ldr	r2, [sp, #36]	; 0x24
   199fc:	ldr	r3, [sp, #20]
   19a00:	mov	r7, #0
   19a04:	sub	r4, fp, #80	; 0x50
   19a08:	add	r0, r1, r0
   19a0c:	str	r0, [sl, #40]	; 0x28
   19a10:	and	r0, r2, #16777216	; 0x1000000
   19a14:	str	r0, [sp, #24]
   19a18:	and	r0, r2, #2097152	; 0x200000
   19a1c:	str	r0, [sp, #12]
   19a20:	ldrb	r0, [r3, #4]
   19a24:	cmp	r0, #23
   19a28:	bhi	19f1c <__assert_fail@plt+0x8a08>
   19a2c:	movw	r6, #2048	; 0x800
   19a30:	mov	r1, #1
   19a34:	movt	r6, #140	; 0x8c
   19a38:	tst	r6, r1, lsl r0
   19a3c:	beq	19f1c <__assert_fail@plt+0x8a08>
   19a40:	cmp	r0, #23
   19a44:	bne	19aa0 <__assert_fail@plt+0x858c>
   19a48:	ldr	r0, [r3]
   19a4c:	ldr	r5, [r3, #4]
   19a50:	mov	r1, r3
   19a54:	mov	r8, sl
   19a58:	str	r0, [sp, #32]
   19a5c:	ldr	r0, [sl, #40]	; 0x28
   19a60:	str	r0, [sp, #28]
   19a64:	mov	r0, sl
   19a68:	mov	sl, r3
   19a6c:	bl	1b24c <__assert_fail@plt+0x9d38>
   19a70:	cmn	r0, #1
   19a74:	bne	19abc <__assert_fail@plt+0x85a8>
   19a78:	ldrb	r0, [sl, #4]
   19a7c:	mov	r3, sl
   19a80:	cmp	r0, #1
   19a84:	bne	19d00 <__assert_fail@plt+0x87ec>
   19a88:	ldrb	r1, [r3]
   19a8c:	cmp	r1, #44	; 0x2c
   19a90:	bne	19d00 <__assert_fail@plt+0x87ec>
   19a94:	ldr	r2, [sp, #36]	; 0x24
   19a98:	mov	r6, #0
   19a9c:	b	19ad4 <__assert_fail@plt+0x85c0>
   19aa0:	cmp	r0, #19
   19aa4:	sub	r0, r0, #18
   19aa8:	mvn	sl, #0
   19aac:	clz	r0, r0
   19ab0:	movweq	sl, #1
   19ab4:	lsr	r6, r0, #5
   19ab8:	b	19b48 <__assert_fail@plt+0x8634>
   19abc:	ldr	r2, [sp, #36]	; 0x24
   19ac0:	mov	r6, r0
   19ac4:	cmn	r0, #2
   19ac8:	mov	r3, sl
   19acc:	beq	19d1c <__assert_fail@plt+0x8808>
   19ad0:	ldr	r0, [r3, #4]
   19ad4:	uxtb	r0, r0
   19ad8:	mov	sl, r6
   19adc:	cmp	r0, #24
   19ae0:	beq	19b18 <__assert_fail@plt+0x8604>
   19ae4:	cmp	r0, #1
   19ae8:	bne	19d1c <__assert_fail@plt+0x8808>
   19aec:	ldrb	r0, [r3]
   19af0:	cmp	r0, #44	; 0x2c
   19af4:	bne	19d1c <__assert_fail@plt+0x8808>
   19af8:	ldr	r0, [sp, #40]	; 0x28
   19afc:	mov	r1, r3
   19b00:	bl	1b24c <__assert_fail@plt+0x9d38>
   19b04:	ldr	r3, [sp, #20]
   19b08:	ldr	r2, [sp, #36]	; 0x24
   19b0c:	mov	sl, r0
   19b10:	cmn	r0, #2
   19b14:	beq	19d1c <__assert_fail@plt+0x8808>
   19b18:	cmn	sl, #1
   19b1c:	beq	19b28 <__assert_fail@plt+0x8614>
   19b20:	cmp	r6, sl
   19b24:	bgt	19edc <__assert_fail@plt+0x89c8>
   19b28:	ldrb	r0, [r3, #4]
   19b2c:	cmp	r0, #24
   19b30:	bne	19edc <__assert_fail@plt+0x89c8>
   19b34:	cmn	sl, #1
   19b38:	mov	r0, sl
   19b3c:	moveq	r0, r6
   19b40:	cmp	r0, #32768	; 0x8000
   19b44:	bge	19f04 <__assert_fail@plt+0x89f0>
   19b48:	ldr	r5, [sp, #40]	; 0x28
   19b4c:	mov	r0, r3
   19b50:	mov	r1, r5
   19b54:	bl	1849c <__assert_fail@plt+0x6f88>
   19b58:	ldr	r1, [r5, #40]	; 0x28
   19b5c:	cmp	r9, #0
   19b60:	add	r0, r1, r0
   19b64:	str	r0, [r5, #40]	; 0x28
   19b68:	mov	r5, #0
   19b6c:	beq	19d60 <__assert_fail@plt+0x884c>
   19b70:	orrs	r0, sl, r6
   19b74:	beq	19d70 <__assert_fail@plt+0x885c>
   19b78:	mov	r0, #0
   19b7c:	cmp	r6, #1
   19b80:	mov	r8, r9
   19b84:	str	r0, [sp, #32]
   19b88:	str	r9, [sp, #28]
   19b8c:	bge	19dd4 <__assert_fail@plt+0x88c0>
   19b90:	ldrb	r0, [r8, #24]
   19b94:	cmp	r0, #17
   19b98:	bne	19c0c <__assert_fail@plt+0x86f8>
   19b9c:	ldr	r0, [r8, #20]
   19ba0:	mov	r2, r8
   19ba4:	mov	r1, r2
   19ba8:	ldr	r2, [r2, #4]
   19bac:	cmp	r2, #0
   19bb0:	bne	19ba4 <__assert_fail@plt+0x8690>
   19bb4:	ldr	r2, [r1, #8]
   19bb8:	cmp	r2, #0
   19bbc:	bne	19ba4 <__assert_fail@plt+0x8690>
   19bc0:	ldr	r2, [r1, #24]
   19bc4:	uxtb	r3, r2
   19bc8:	cmp	r3, #17
   19bcc:	bne	19be0 <__assert_fail@plt+0x86cc>
   19bd0:	ldr	r3, [r1, #20]
   19bd4:	cmp	r3, r0
   19bd8:	orreq	r2, r2, #524288	; 0x80000
   19bdc:	streq	r2, [r1, #24]
   19be0:	ldr	r3, [r1]
   19be4:	cmp	r3, #0
   19be8:	beq	19c0c <__assert_fail@plt+0x86f8>
   19bec:	ldr	r2, [r3, #8]
   19bf0:	cmp	r2, r1
   19bf4:	mov	r1, r3
   19bf8:	beq	19bc0 <__assert_fail@plt+0x86ac>
   19bfc:	cmp	r2, #0
   19c00:	mov	r1, r3
   19c04:	beq	19bc0 <__assert_fail@plt+0x86ac>
   19c08:	b	19ba4 <__assert_fail@plt+0x8690>
   19c0c:	cmn	sl, #1
   19c10:	mov	r0, #10
   19c14:	str	r7, [fp, #-80]	; 0xffffffb0
   19c18:	mov	r1, r8
   19c1c:	mov	r2, #0
   19c20:	mov	r3, r4
   19c24:	movweq	r0, #11
   19c28:	str	r0, [fp, #-76]	; 0xffffffb4
   19c2c:	ldr	r0, [sp, #44]	; 0x2c
   19c30:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19c34:	cmp	r0, #0
   19c38:	beq	19e70 <__assert_fail@plt+0x895c>
   19c3c:	mov	r5, r0
   19c40:	add	r0, r6, #2
   19c44:	cmp	r0, sl
   19c48:	ble	19c80 <__assert_fail@plt+0x876c>
   19c4c:	ldr	r1, [sp, #32]
   19c50:	ldr	sl, [sp, #40]	; 0x28
   19c54:	cmp	r1, #0
   19c58:	beq	19d4c <__assert_fail@plt+0x8838>
   19c5c:	mov	r0, #16
   19c60:	mov	r2, r5
   19c64:	mov	r3, r4
   19c68:	str	r0, [fp, #-76]	; 0xffffffb4
   19c6c:	ldr	r0, [sp, #44]	; 0x2c
   19c70:	str	r7, [fp, #-80]	; 0xffffffb0
   19c74:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19c78:	mov	r5, r0
   19c7c:	b	19e84 <__assert_fail@plt+0x8970>
   19c80:	add	r6, r6, #1
   19c84:	ldr	r9, [sp, #44]	; 0x2c
   19c88:	mov	r0, r8
   19c8c:	mov	r1, r9
   19c90:	bl	1b2f8 <__assert_fail@plt+0x9de4>
   19c94:	mov	r8, r0
   19c98:	mov	r0, #16
   19c9c:	mov	r1, r5
   19ca0:	mov	r3, r4
   19ca4:	str	r0, [fp, #-76]	; 0xffffffb4
   19ca8:	mov	r0, r9
   19cac:	mov	r2, r8
   19cb0:	str	r7, [fp, #-80]	; 0xffffffb0
   19cb4:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19cb8:	cmp	r8, #0
   19cbc:	movne	r1, r0
   19cc0:	cmpne	r0, #0
   19cc4:	beq	19e70 <__assert_fail@plt+0x895c>
   19cc8:	mov	r0, #10
   19ccc:	mov	r2, #0
   19cd0:	mov	r3, r4
   19cd4:	str	r0, [fp, #-76]	; 0xffffffb4
   19cd8:	ldr	r0, [sp, #44]	; 0x2c
   19cdc:	str	r7, [fp, #-80]	; 0xffffffb0
   19ce0:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19ce4:	cmp	r0, #0
   19ce8:	beq	19e70 <__assert_fail@plt+0x895c>
   19cec:	add	r6, r6, #1
   19cf0:	mov	r5, r0
   19cf4:	cmp	r6, sl
   19cf8:	blt	19c84 <__assert_fail@plt+0x8770>
   19cfc:	b	19c4c <__assert_fail@plt+0x8738>
   19d00:	ldr	r0, [sp, #16]
   19d04:	ldr	r2, [sp, #36]	; 0x24
   19d08:	mov	r1, #10
   19d0c:	mov	r5, #0
   19d10:	mov	sl, r8
   19d14:	str	r1, [r0]
   19d18:	b	19e90 <__assert_fail@plt+0x897c>
   19d1c:	ldr	r0, [sp, #12]
   19d20:	cmp	r0, #0
   19d24:	beq	19ee8 <__assert_fail@plt+0x89d4>
   19d28:	ldr	sl, [sp, #40]	; 0x28
   19d2c:	ldr	r0, [sp, #28]
   19d30:	str	r0, [sl, #40]	; 0x28
   19d34:	mov	r0, #1
   19d38:	bfi	r5, r0, #0, #8
   19d3c:	ldr	r0, [sp, #32]
   19d40:	stm	r3, {r0, r5}
   19d44:	mov	r5, r9
   19d48:	b	19e90 <__assert_fail@plt+0x897c>
   19d4c:	ldr	r2, [sp, #36]	; 0x24
   19d50:	ldr	r3, [sp, #20]
   19d54:	clz	r0, r5
   19d58:	lsr	r0, r0, #5
   19d5c:	b	19eb0 <__assert_fail@plt+0x899c>
   19d60:	ldr	sl, [sp, #40]	; 0x28
   19d64:	ldr	r2, [sp, #36]	; 0x24
   19d68:	ldr	r3, [sp, #20]
   19d6c:	b	19e90 <__assert_fail@plt+0x897c>
   19d70:	ldr	sl, [sp, #40]	; 0x28
   19d74:	mov	r0, r9
   19d78:	mov	r5, r0
   19d7c:	ldr	r0, [r0, #4]
   19d80:	cmp	r0, #0
   19d84:	bne	19d78 <__assert_fail@plt+0x8864>
   19d88:	ldr	r0, [r5, #8]
   19d8c:	cmp	r0, #0
   19d90:	bne	19d78 <__assert_fail@plt+0x8864>
   19d94:	add	r0, r5, #20
   19d98:	bl	17884 <__assert_fail@plt+0x6370>
   19d9c:	ldr	r1, [r5]
   19da0:	cmp	r1, #0
   19da4:	beq	19dc8 <__assert_fail@plt+0x88b4>
   19da8:	ldr	r0, [r1, #8]
   19dac:	cmp	r0, r5
   19db0:	mov	r5, r1
   19db4:	beq	19d94 <__assert_fail@plt+0x8880>
   19db8:	cmp	r0, #0
   19dbc:	mov	r5, r1
   19dc0:	beq	19d94 <__assert_fail@plt+0x8880>
   19dc4:	b	19d78 <__assert_fail@plt+0x8864>
   19dc8:	ldr	r2, [sp, #36]	; 0x24
   19dcc:	ldr	r3, [sp, #20]
   19dd0:	b	19f14 <__assert_fail@plt+0x8a00>
   19dd4:	ldr	r9, [sp, #28]
   19dd8:	str	r9, [sp, #32]
   19ddc:	beq	19e40 <__assert_fail@plt+0x892c>
   19de0:	ldr	r0, [sp, #28]
   19de4:	sub	r5, r6, #1
   19de8:	mov	r9, r0
   19dec:	str	r0, [sp, #32]
   19df0:	ldr	r8, [sp, #44]	; 0x2c
   19df4:	mov	r0, r9
   19df8:	mov	r1, r8
   19dfc:	bl	1b2f8 <__assert_fail@plt+0x9de4>
   19e00:	ldr	r1, [sp, #32]
   19e04:	mov	r9, r0
   19e08:	mov	r0, #16
   19e0c:	mov	r3, r4
   19e10:	str	r0, [fp, #-76]	; 0xffffffb4
   19e14:	mov	r0, r8
   19e18:	mov	r2, r9
   19e1c:	str	r7, [fp, #-80]	; 0xffffffb0
   19e20:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19e24:	str	r0, [sp, #32]
   19e28:	cmp	r9, #0
   19e2c:	ldrne	r0, [sp, #32]
   19e30:	cmpne	r0, #0
   19e34:	beq	19e70 <__assert_fail@plt+0x895c>
   19e38:	subs	r5, r5, #1
   19e3c:	bne	19df0 <__assert_fail@plt+0x88dc>
   19e40:	cmp	r6, sl
   19e44:	bne	19e58 <__assert_fail@plt+0x8944>
   19e48:	ldr	sl, [sp, #40]	; 0x28
   19e4c:	ldr	r2, [sp, #36]	; 0x24
   19e50:	ldr	r5, [sp, #32]
   19e54:	b	19d50 <__assert_fail@plt+0x883c>
   19e58:	ldr	r1, [sp, #44]	; 0x2c
   19e5c:	mov	r0, r9
   19e60:	bl	1b2f8 <__assert_fail@plt+0x9de4>
   19e64:	mov	r8, r0
   19e68:	cmp	r0, #0
   19e6c:	bne	19b90 <__assert_fail@plt+0x867c>
   19e70:	ldr	r0, [sp, #16]
   19e74:	ldr	sl, [sp, #40]	; 0x28
   19e78:	mov	r1, #12
   19e7c:	mov	r5, #0
   19e80:	str	r1, [r0]
   19e84:	ldr	r2, [sp, #36]	; 0x24
   19e88:	ldr	r3, [sp, #20]
   19e8c:	ldr	r9, [sp, #28]
   19e90:	clz	r0, r5
   19e94:	cmp	r5, #0
   19e98:	lsr	r0, r0, #5
   19e9c:	bne	19eb0 <__assert_fail@plt+0x899c>
   19ea0:	ldr	r1, [sp, #16]
   19ea4:	ldr	r1, [r1]
   19ea8:	cmp	r1, #0
   19eac:	bne	1a05c <__assert_fail@plt+0x8b48>
   19eb0:	ldr	r1, [sp, #24]
   19eb4:	mov	r9, r5
   19eb8:	cmp	r1, #0
   19ebc:	beq	19a20 <__assert_fail@plt+0x850c>
   19ec0:	ldrb	r1, [r3, #4]
   19ec4:	cmp	r1, #23
   19ec8:	beq	19f24 <__assert_fail@plt+0x8a10>
   19ecc:	cmp	r1, #11
   19ed0:	mov	r9, r5
   19ed4:	bne	19a20 <__assert_fail@plt+0x850c>
   19ed8:	b	19f24 <__assert_fail@plt+0x8a10>
   19edc:	ldr	r0, [sp, #16]
   19ee0:	mov	r1, #10
   19ee4:	b	19f0c <__assert_fail@plt+0x89f8>
   19ee8:	ldrb	r0, [r3, #4]
   19eec:	ldr	r1, [sp, #16]
   19ef0:	cmp	r0, #2
   19ef4:	mov	r0, #10
   19ef8:	movweq	r0, #9
   19efc:	str	r0, [r1]
   19f00:	b	19f10 <__assert_fail@plt+0x89fc>
   19f04:	ldr	r0, [sp, #16]
   19f08:	mov	r1, #15
   19f0c:	str	r1, [r0]
   19f10:	ldr	sl, [sp, #40]	; 0x28
   19f14:	mov	r5, #0
   19f18:	b	19e90 <__assert_fail@plt+0x897c>
   19f1c:	mov	r8, r9
   19f20:	b	19f8c <__assert_fail@plt+0x8a78>
   19f24:	cmp	r0, #0
   19f28:	bne	19f7c <__assert_fail@plt+0x8a68>
   19f2c:	mov	r4, r5
   19f30:	ldr	r5, [r5, #4]
   19f34:	cmp	r5, #0
   19f38:	bne	19f2c <__assert_fail@plt+0x8a18>
   19f3c:	ldr	r5, [r4, #8]
   19f40:	cmp	r5, #0
   19f44:	bne	19f2c <__assert_fail@plt+0x8a18>
   19f48:	add	r0, r4, #20
   19f4c:	bl	17884 <__assert_fail@plt+0x6370>
   19f50:	ldr	r0, [r4]
   19f54:	cmp	r0, #0
   19f58:	beq	19f7c <__assert_fail@plt+0x8a68>
   19f5c:	ldr	r5, [r0, #8]
   19f60:	cmp	r5, r4
   19f64:	mov	r4, r0
   19f68:	beq	19f48 <__assert_fail@plt+0x8a34>
   19f6c:	cmp	r5, #0
   19f70:	mov	r4, r0
   19f74:	beq	19f48 <__assert_fail@plt+0x8a34>
   19f78:	b	19f2c <__assert_fail@plt+0x8a18>
   19f7c:	ldr	r1, [sp, #16]
   19f80:	mov	r0, #13
   19f84:	str	r0, [r1]
   19f88:	mov	r8, #0
   19f8c:	mov	r0, r8
   19f90:	sub	sp, fp, #28
   19f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f98:	mov	r5, #9
   19f9c:	mov	r0, #6
   19fa0:	str	r0, [r4]
   19fa4:	mov	r0, r6
   19fa8:	mov	r1, #0
   19fac:	mov	r2, #0
   19fb0:	mov	r3, r4
   19fb4:	mov	r8, #0
   19fb8:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19fbc:	mov	r7, r0
   19fc0:	mov	r0, r6
   19fc4:	mov	r1, #0
   19fc8:	mov	r2, #0
   19fcc:	mov	r3, r4
   19fd0:	str	r5, [r4]
   19fd4:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19fd8:	mov	r4, r0
   19fdc:	mov	r0, #10
   19fe0:	sub	r3, fp, #80	; 0x50
   19fe4:	mov	r1, r7
   19fe8:	str	r0, [fp, #-76]	; 0xffffffb4
   19fec:	mov	r0, r6
   19ff0:	mov	r2, r4
   19ff4:	str	r8, [fp, #-80]	; 0xffffffb0
   19ff8:	bl	1a2bc <__assert_fail@plt+0x8da8>
   19ffc:	cmp	r7, #0
   1a000:	cmpne	r4, #0
   1a004:	bne	1a02c <__assert_fail@plt+0x8b18>
   1a008:	mov	r0, #12
   1a00c:	str	r0, [r9]
   1a010:	b	19f8c <__assert_fail@plt+0x8a78>
   1a014:	mov	r0, r6
   1a018:	mov	r1, #0
   1a01c:	mov	r2, #0
   1a020:	mov	r3, r4
   1a024:	mov	r8, #0
   1a028:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1a02c:	mov	r5, r0
   1a030:	cmp	r0, #0
   1a034:	beq	1a008 <__assert_fail@plt+0x8af4>
   1a038:	ldr	r0, [sp, #20]
   1a03c:	ldr	r2, [sp, #36]	; 0x24
   1a040:	mov	r1, sl
   1a044:	bl	1849c <__assert_fail@plt+0x6f88>
   1a048:	ldr	r1, [sl, #40]	; 0x28
   1a04c:	mov	r8, r5
   1a050:	add	r0, r1, r0
   1a054:	str	r0, [sl, #40]	; 0x28
   1a058:	b	19f8c <__assert_fail@plt+0x8a78>
   1a05c:	mov	r8, #0
   1a060:	cmp	r9, #0
   1a064:	beq	19f8c <__assert_fail@plt+0x8a78>
   1a068:	mov	r5, r9
   1a06c:	ldr	r9, [r9, #4]
   1a070:	cmp	r9, #0
   1a074:	bne	1a068 <__assert_fail@plt+0x8b54>
   1a078:	ldr	r9, [r5, #8]
   1a07c:	cmp	r9, #0
   1a080:	bne	1a068 <__assert_fail@plt+0x8b54>
   1a084:	add	r0, r5, #20
   1a088:	bl	17884 <__assert_fail@plt+0x6370>
   1a08c:	ldr	r0, [r5]
   1a090:	cmp	r0, #0
   1a094:	beq	19f8c <__assert_fail@plt+0x8a78>
   1a098:	ldr	r9, [r0, #8]
   1a09c:	cmp	r9, r5
   1a0a0:	mov	r5, r0
   1a0a4:	beq	1a084 <__assert_fail@plt+0x8b70>
   1a0a8:	cmp	r9, #0
   1a0ac:	mov	r5, r0
   1a0b0:	beq	1a084 <__assert_fail@plt+0x8b70>
   1a0b4:	b	1a068 <__assert_fail@plt+0x8b54>
   1a0b8:	cmp	r0, #2
   1a0bc:	blt	1a0d8 <__assert_fail@plt+0x8bc4>
   1a0c0:	ldr	r0, [r8, #36]	; 0x24
   1a0c4:	cmp	r0, #0
   1a0c8:	bne	198f8 <__assert_fail@plt+0x83e4>
   1a0cc:	ldrb	r0, [r8, #16]
   1a0d0:	tst	r0, #1
   1a0d4:	bne	198f8 <__assert_fail@plt+0x83e4>
   1a0d8:	mov	r0, r8
   1a0dc:	bl	17914 <__assert_fail@plt+0x6400>
   1a0e0:	mov	r0, #3
   1a0e4:	str	r4, [sp, #56]	; 0x38
   1a0e8:	add	r3, sp, #56	; 0x38
   1a0ec:	mov	r1, #0
   1a0f0:	mov	r2, #0
   1a0f4:	str	r0, [sp, #60]	; 0x3c
   1a0f8:	ldr	r0, [sp, #44]	; 0x2c
   1a0fc:	b	199a4 <__assert_fail@plt+0x8490>
   1a100:	mov	r0, #12
   1a104:	b	19314 <__assert_fail@plt+0x7e00>
   1a108:	mov	r6, r0
   1a10c:	b	1a26c <__assert_fail@plt+0x8d58>
   1a110:	mov	r6, #7
   1a114:	b	1a26c <__assert_fail@plt+0x8d58>
   1a118:	mov	r0, #2
   1a11c:	b	1a29c <__assert_fail@plt+0x8d88>
   1a120:	mov	r0, r4
   1a124:	bl	22190 <__assert_fail@plt+0x10c7c>
   1a128:	mov	r0, r8
   1a12c:	bl	22190 <__assert_fail@plt+0x10c7c>
   1a130:	ldr	r1, [sp, #16]
   1a134:	mov	r0, #12
   1a138:	str	r0, [r1]
   1a13c:	b	199b4 <__assert_fail@plt+0x84a0>
   1a140:	mov	r0, #6
   1a144:	b	19314 <__assert_fail@plt+0x7e00>
   1a148:	mov	r6, #3
   1a14c:	b	1a26c <__assert_fail@plt+0x8d58>
   1a150:	ldr	r1, [sp, #16]
   1a154:	mov	r0, #12
   1a158:	str	r0, [r1]
   1a15c:	b	19f8c <__assert_fail@plt+0x8a78>
   1a160:	mov	r9, r6
   1a164:	mov	r5, #0
   1a168:	mov	r8, #0
   1a16c:	b	1a17c <__assert_fail@plt+0x8c68>
   1a170:	mov	r9, r6
   1a174:	mov	r8, #4
   1a178:	mov	r5, #128	; 0x80
   1a17c:	bl	113b8 <__ctype_b_loc@plt>
   1a180:	ldr	r0, [r0]
   1a184:	ldr	sl, [sp, #40]	; 0x28
   1a188:	ldr	r4, [sp, #20]
   1a18c:	mov	r1, #1
   1a190:	mov	r6, r9
   1a194:	add	r7, r0, r5, lsl #1
   1a198:	ldr	r0, [sp, #44]	; 0x2c
   1a19c:	mov	ip, r6
   1a1a0:	mov	r3, #0
   1a1a4:	add	r0, r0, r8, lsl #2
   1a1a8:	add	r2, r0, #96	; 0x60
   1a1ac:	mov	r0, r7
   1a1b0:	add	r6, r5, r3
   1a1b4:	cmp	r6, #95	; 0x5f
   1a1b8:	beq	1a1c8 <__assert_fail@plt+0x8cb4>
   1a1bc:	ldrh	r6, [r0]
   1a1c0:	ands	r6, r6, #8
   1a1c4:	beq	1a1d4 <__assert_fail@plt+0x8cc0>
   1a1c8:	ldr	r6, [r2]
   1a1cc:	orr	r6, r6, r1, lsl r3
   1a1d0:	str	r6, [r2]
   1a1d4:	add	r3, r3, #1
   1a1d8:	add	r0, r0, #2
   1a1dc:	cmp	r3, #32
   1a1e0:	bne	1a1b0 <__assert_fail@plt+0x8c9c>
   1a1e4:	add	r8, r8, #1
   1a1e8:	add	r7, r7, #64	; 0x40
   1a1ec:	add	r5, r5, #32
   1a1f0:	mov	r6, ip
   1a1f4:	cmp	r8, #8
   1a1f8:	bne	1a198 <__assert_fail@plt+0x8c84>
   1a1fc:	b	18fbc <__assert_fail@plt+0x7aa8>
   1a200:	ldr	r9, [sp, #16]
   1a204:	cmp	r1, #0
   1a208:	beq	1a25c <__assert_fail@plt+0x8d48>
   1a20c:	mov	r5, r1
   1a210:	ldr	r1, [r1, #4]
   1a214:	cmp	r1, #0
   1a218:	bne	1a20c <__assert_fail@plt+0x8cf8>
   1a21c:	ldr	r1, [r5, #8]
   1a220:	cmp	r1, #0
   1a224:	bne	1a20c <__assert_fail@plt+0x8cf8>
   1a228:	add	r0, r5, #20
   1a22c:	bl	17884 <__assert_fail@plt+0x6370>
   1a230:	ldr	r0, [r5]
   1a234:	cmp	r0, #0
   1a238:	beq	1a25c <__assert_fail@plt+0x8d48>
   1a23c:	ldr	r1, [r0, #8]
   1a240:	cmp	r1, r5
   1a244:	mov	r5, r0
   1a248:	beq	1a228 <__assert_fail@plt+0x8d14>
   1a24c:	cmp	r1, #0
   1a250:	mov	r5, r0
   1a254:	beq	1a228 <__assert_fail@plt+0x8d14>
   1a258:	b	1a20c <__assert_fail@plt+0x8cf8>
   1a25c:	mov	r0, #8
   1a260:	b	1a00c <__assert_fail@plt+0x8af8>
   1a264:	mov	r6, #3
   1a268:	ldr	sl, [sp, #40]	; 0x28
   1a26c:	ldr	r0, [sp, #16]
   1a270:	str	r6, [r0]
   1a274:	ldr	r8, [sp, #32]
   1a278:	mov	r0, r4
   1a27c:	bl	22190 <__assert_fail@plt+0x10c7c>
   1a280:	mov	r0, r8
   1a284:	bl	17914 <__assert_fail@plt+0x6400>
   1a288:	mov	r9, #0
   1a28c:	b	199b4 <__assert_fail@plt+0x84a0>
   1a290:	ldr	sl, [sp, #40]	; 0x28
   1a294:	ldr	r8, [sp, #32]
   1a298:	mov	r0, #12
   1a29c:	ldr	r1, [sp, #16]
   1a2a0:	str	r0, [r1]
   1a2a4:	b	1a278 <__assert_fail@plt+0x8d64>
   1a2a8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1a2ac:	mov	r0, r6
   1a2b0:	bl	22190 <__assert_fail@plt+0x10c7c>
   1a2b4:	mov	r6, #12
   1a2b8:	b	1a268 <__assert_fail@plt+0x8d54>
   1a2bc:	push	{r4, r5, r6, r7, fp, lr}
   1a2c0:	add	fp, sp, #16
   1a2c4:	mov	r5, r1
   1a2c8:	ldr	r1, [r0, #64]	; 0x40
   1a2cc:	mov	r6, r3
   1a2d0:	mov	r4, r2
   1a2d4:	mov	r7, r0
   1a2d8:	cmp	r1, #31
   1a2dc:	beq	1a334 <__assert_fail@plt+0x8e20>
   1a2e0:	ldr	r0, [r7, #56]	; 0x38
   1a2e4:	add	r0, r0, r1, lsl #5
   1a2e8:	add	r2, r1, #1
   1a2ec:	mov	r1, #0
   1a2f0:	cmp	r5, #0
   1a2f4:	str	r2, [r7, #64]	; 0x40
   1a2f8:	mvn	r7, #0
   1a2fc:	str	r1, [r0, #4]!
   1a300:	str	r4, [r0, #8]
   1a304:	str	r5, [r0, #4]
   1a308:	ldm	r6, {r2, r3}
   1a30c:	str	r7, [r0, #28]
   1a310:	str	r1, [r0, #16]
   1a314:	str	r1, [r0, #12]
   1a318:	bic	r1, r3, #786432	; 0xc0000
   1a31c:	str	r2, [r0, #20]
   1a320:	str	r1, [r0, #24]
   1a324:	strne	r0, [r5]
   1a328:	cmp	r4, #0
   1a32c:	strne	r0, [r4]
   1a330:	pop	{r4, r5, r6, r7, fp, pc}
   1a334:	mov	r0, #996	; 0x3e4
   1a338:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1a33c:	cmp	r0, #0
   1a340:	beq	1a35c <__assert_fail@plt+0x8e48>
   1a344:	ldr	r1, [r7, #56]	; 0x38
   1a348:	str	r1, [r0]
   1a34c:	mov	r1, #0
   1a350:	str	r1, [r7, #64]	; 0x40
   1a354:	str	r0, [r7, #56]	; 0x38
   1a358:	b	1a2e4 <__assert_fail@plt+0x8dd0>
   1a35c:	mov	r0, #0
   1a360:	pop	{r4, r5, r6, r7, fp, pc}
   1a364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a368:	add	fp, sp, #28
   1a36c:	sub	sp, sp, #28
   1a370:	mov	sl, r1
   1a374:	mov	r9, r0
   1a378:	mov	r7, #0
   1a37c:	mov	r0, #32
   1a380:	mov	r1, #1
   1a384:	mov	r8, r3
   1a388:	mov	r4, r2
   1a38c:	str	r7, [sp, #16]
   1a390:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1a394:	ldr	r1, [fp, #12]
   1a398:	cmp	r0, #0
   1a39c:	beq	1a54c <__assert_fail@plt+0x9038>
   1a3a0:	mov	r5, r0
   1a3a4:	mov	r0, #40	; 0x28
   1a3a8:	mov	r1, #1
   1a3ac:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1a3b0:	cmp	r0, #0
   1a3b4:	beq	1a554 <__assert_fail@plt+0x9040>
   1a3b8:	mov	r6, r0
   1a3bc:	ldrb	r0, [r0, #16]
   1a3c0:	ldr	r1, [fp, #8]
   1a3c4:	add	r3, sp, #16
   1a3c8:	mov	r7, #0
   1a3cc:	stm	sp, {r4, r7}
   1a3d0:	mov	r2, r6
   1a3d4:	and	r0, r0, #254	; 0xfe
   1a3d8:	orr	r0, r0, r1
   1a3dc:	mov	r1, r5
   1a3e0:	strb	r0, [r6, #16]
   1a3e4:	mov	r0, sl
   1a3e8:	bl	1a9bc <__assert_fail@plt+0x94a8>
   1a3ec:	cmp	r0, #0
   1a3f0:	bne	1a570 <__assert_fail@plt+0x905c>
   1a3f4:	ldrb	r0, [r8]
   1a3f8:	cmp	r0, #0
   1a3fc:	beq	1a428 <__assert_fail@plt+0x8f14>
   1a400:	add	r1, r8, #1
   1a404:	mov	r2, #1
   1a408:	ubfx	r3, r0, #5, #3
   1a40c:	and	r0, r0, #31
   1a410:	ldr	r7, [r5, r3, lsl #2]
   1a414:	orr	r0, r7, r2, lsl r0
   1a418:	str	r0, [r5, r3, lsl #2]
   1a41c:	ldrb	r0, [r1], #1
   1a420:	cmp	r0, #0
   1a424:	bne	1a408 <__assert_fail@plt+0x8ef4>
   1a428:	ldr	r0, [fp, #8]
   1a42c:	cmp	r0, #0
   1a430:	beq	1a454 <__assert_fail@plt+0x8f40>
   1a434:	mov	r0, #0
   1a438:	add	r1, r5, r0
   1a43c:	add	r0, r0, #16
   1a440:	vld1.32	{d16-d17}, [r1]
   1a444:	cmp	r0, #32
   1a448:	vmvn	q8, q8
   1a44c:	vst1.32	{d16-d17}, [r1]
   1a450:	bne	1a438 <__assert_fail@plt+0x8f24>
   1a454:	ldr	r0, [r9, #92]	; 0x5c
   1a458:	cmp	r0, #2
   1a45c:	blt	1a484 <__assert_fail@plt+0x8f70>
   1a460:	ldr	r0, [r9, #60]	; 0x3c
   1a464:	mov	r1, #0
   1a468:	ldr	r2, [r0, r1, lsl #2]
   1a46c:	ldr	r3, [r5, r1, lsl #2]
   1a470:	and	r2, r3, r2
   1a474:	str	r2, [r5, r1, lsl #2]
   1a478:	add	r1, r1, #1
   1a47c:	cmp	r1, #8
   1a480:	bne	1a468 <__assert_fail@plt+0x8f54>
   1a484:	mov	r0, #3
   1a488:	add	r3, sp, #8
   1a48c:	mov	r1, #0
   1a490:	mov	r2, #0
   1a494:	mov	r7, #0
   1a498:	str	r0, [sp, #12]
   1a49c:	mov	r0, r9
   1a4a0:	str	r5, [sp, #8]
   1a4a4:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1a4a8:	cmp	r0, #0
   1a4ac:	beq	1a538 <__assert_fail@plt+0x9024>
   1a4b0:	mov	r4, r0
   1a4b4:	ldr	r0, [r9, #92]	; 0x5c
   1a4b8:	cmp	r0, #2
   1a4bc:	blt	1a520 <__assert_fail@plt+0x900c>
   1a4c0:	mov	r0, #6
   1a4c4:	str	r6, [sp, #8]
   1a4c8:	add	r3, sp, #8
   1a4cc:	mov	r1, #0
   1a4d0:	mov	r2, #0
   1a4d4:	mov	r8, #0
   1a4d8:	str	r0, [sp, #12]
   1a4dc:	ldrb	r0, [r9, #88]	; 0x58
   1a4e0:	orr	r0, r0, #2
   1a4e4:	strb	r0, [r9, #88]	; 0x58
   1a4e8:	mov	r0, r9
   1a4ec:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1a4f0:	cmp	r0, #0
   1a4f4:	beq	1a538 <__assert_fail@plt+0x9024>
   1a4f8:	mov	r2, r0
   1a4fc:	mov	r0, #10
   1a500:	add	r3, sp, #20
   1a504:	mov	r1, r4
   1a508:	str	r0, [sp, #24]
   1a50c:	mov	r0, r9
   1a510:	str	r8, [sp, #20]
   1a514:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1a518:	mov	r7, r0
   1a51c:	b	1a52c <__assert_fail@plt+0x9018>
   1a520:	mov	r0, r6
   1a524:	bl	17914 <__assert_fail@plt+0x6400>
   1a528:	mov	r7, r4
   1a52c:	mov	r0, r7
   1a530:	sub	sp, fp, #28
   1a534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a538:	mov	r0, r5
   1a53c:	bl	22190 <__assert_fail@plt+0x10c7c>
   1a540:	mov	r0, r6
   1a544:	bl	17914 <__assert_fail@plt+0x6400>
   1a548:	ldr	r1, [fp, #12]
   1a54c:	mov	r0, #12
   1a550:	b	1a568 <__assert_fail@plt+0x9054>
   1a554:	mov	r0, r5
   1a558:	bl	22190 <__assert_fail@plt+0x10c7c>
   1a55c:	ldr	r1, [fp, #12]
   1a560:	mov	r0, #12
   1a564:	mov	r7, #0
   1a568:	str	r0, [r1]
   1a56c:	b	1a52c <__assert_fail@plt+0x9018>
   1a570:	mov	r4, r0
   1a574:	mov	r0, r5
   1a578:	bl	22190 <__assert_fail@plt+0x10c7c>
   1a57c:	mov	r0, r6
   1a580:	bl	17914 <__assert_fail@plt+0x6400>
   1a584:	ldr	r0, [fp, #12]
   1a588:	str	r4, [r0]
   1a58c:	b	1a52c <__assert_fail@plt+0x9018>
   1a590:	push	{fp, lr}
   1a594:	mov	fp, sp
   1a598:	ldr	ip, [r1, #40]	; 0x28
   1a59c:	ldr	r3, [r1, #56]	; 0x38
   1a5a0:	cmp	r3, ip
   1a5a4:	ble	1a620 <__assert_fail@plt+0x910c>
   1a5a8:	ldr	r3, [r1, #4]
   1a5ac:	ldrb	lr, [r3, ip]
   1a5b0:	strb	lr, [r0]
   1a5b4:	ldr	r3, [r1, #80]	; 0x50
   1a5b8:	cmp	r3, #2
   1a5bc:	blt	1a5e0 <__assert_fail@plt+0x90cc>
   1a5c0:	ldr	r3, [r1, #28]
   1a5c4:	ldr	ip, [r1, #40]	; 0x28
   1a5c8:	cmp	ip, r3
   1a5cc:	beq	1a5e0 <__assert_fail@plt+0x90cc>
   1a5d0:	ldr	r3, [r1, #8]
   1a5d4:	ldr	r3, [r3, ip, lsl #2]
   1a5d8:	cmn	r3, #1
   1a5dc:	beq	1a6c8 <__assert_fail@plt+0x91b4>
   1a5e0:	tst	r2, #1
   1a5e4:	beq	1a630 <__assert_fail@plt+0x911c>
   1a5e8:	cmp	lr, #92	; 0x5c
   1a5ec:	bne	1a630 <__assert_fail@plt+0x911c>
   1a5f0:	ldr	r2, [r1, #40]	; 0x28
   1a5f4:	ldr	r3, [r1, #48]	; 0x30
   1a5f8:	add	r2, r2, #1
   1a5fc:	cmp	r2, r3
   1a600:	bge	1a6c8 <__assert_fail@plt+0x91b4>
   1a604:	str	r2, [r1, #40]	; 0x28
   1a608:	ldr	r1, [r1, #4]
   1a60c:	ldrb	r2, [r1, r2]
   1a610:	mov	r1, #1
   1a614:	strb	r1, [r0, #4]
   1a618:	strb	r2, [r0]
   1a61c:	b	1a6d0 <__assert_fail@plt+0x91bc>
   1a620:	mov	r1, #2
   1a624:	strb	r1, [r0, #4]
   1a628:	mov	r1, #0
   1a62c:	b	1a6d0 <__assert_fail@plt+0x91bc>
   1a630:	cmp	lr, #92	; 0x5c
   1a634:	bgt	1a688 <__assert_fail@plt+0x9174>
   1a638:	cmp	lr, #45	; 0x2d
   1a63c:	beq	1a6a0 <__assert_fail@plt+0x918c>
   1a640:	cmp	lr, #91	; 0x5b
   1a644:	bne	1a6c8 <__assert_fail@plt+0x91b4>
   1a648:	ldr	r3, [r1, #40]	; 0x28
   1a64c:	ldr	ip, [r1, #48]	; 0x30
   1a650:	add	r3, r3, #1
   1a654:	cmp	r3, ip
   1a658:	bge	1a6b8 <__assert_fail@plt+0x91a4>
   1a65c:	ldr	r1, [r1, #4]
   1a660:	ldrb	r1, [r1, r3]
   1a664:	cmp	r1, #61	; 0x3d
   1a668:	strb	r1, [r0]
   1a66c:	beq	1a6d8 <__assert_fail@plt+0x91c4>
   1a670:	cmp	r1, #58	; 0x3a
   1a674:	beq	1a6e0 <__assert_fail@plt+0x91cc>
   1a678:	cmp	r1, #46	; 0x2e
   1a67c:	bne	1a6c0 <__assert_fail@plt+0x91ac>
   1a680:	mov	r1, #26
   1a684:	b	1a6ec <__assert_fail@plt+0x91d8>
   1a688:	cmp	lr, #93	; 0x5d
   1a68c:	beq	1a6a8 <__assert_fail@plt+0x9194>
   1a690:	cmp	lr, #94	; 0x5e
   1a694:	bne	1a6c8 <__assert_fail@plt+0x91b4>
   1a698:	mov	r1, #25
   1a69c:	b	1a6ac <__assert_fail@plt+0x9198>
   1a6a0:	mov	r1, #22
   1a6a4:	b	1a6ac <__assert_fail@plt+0x9198>
   1a6a8:	mov	r1, #21
   1a6ac:	strb	r1, [r0, #4]
   1a6b0:	mov	r1, #1
   1a6b4:	b	1a6d0 <__assert_fail@plt+0x91bc>
   1a6b8:	mov	r1, #0
   1a6bc:	strb	r1, [r0]
   1a6c0:	mov	r1, #91	; 0x5b
   1a6c4:	strb	r1, [r0]
   1a6c8:	mov	r1, #1
   1a6cc:	strb	r1, [r0, #4]
   1a6d0:	mov	r0, r1
   1a6d4:	pop	{fp, pc}
   1a6d8:	mov	r1, #28
   1a6dc:	b	1a6ec <__assert_fail@plt+0x91d8>
   1a6e0:	tst	r2, #4
   1a6e4:	beq	1a6c0 <__assert_fail@plt+0x91ac>
   1a6e8:	mov	r1, #30
   1a6ec:	strb	r1, [r0, #4]
   1a6f0:	mov	r1, #2
   1a6f4:	b	1a6d0 <__assert_fail@plt+0x91bc>
   1a6f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a6fc:	add	fp, sp, #24
   1a700:	sub	sp, sp, #8
   1a704:	mov	r5, r2
   1a708:	ldr	r2, [r1, #80]	; 0x50
   1a70c:	mov	r9, r0
   1a710:	ldr	r0, [r1, #40]	; 0x28
   1a714:	cmp	r2, #1
   1a718:	beq	1a78c <__assert_fail@plt+0x9278>
   1a71c:	ldr	r2, [r1, #28]
   1a720:	add	r6, r0, #1
   1a724:	cmp	r6, r2
   1a728:	bge	1a78c <__assert_fail@plt+0x9278>
   1a72c:	ldr	lr, [r1, #8]
   1a730:	sub	r4, r0, r2
   1a734:	sub	ip, r2, r0
   1a738:	mvn	r2, #0
   1a73c:	add	r6, lr, r0, lsl #2
   1a740:	ldr	r7, [r6, -r2, lsl #2]
   1a744:	cmn	r7, #1
   1a748:	bne	1a75c <__assert_fail@plt+0x9248>
   1a74c:	sub	r2, r2, #1
   1a750:	cmp	r4, r2
   1a754:	bne	1a740 <__assert_fail@plt+0x922c>
   1a758:	b	1a768 <__assert_fail@plt+0x9254>
   1a75c:	rsb	ip, r2, #0
   1a760:	cmp	ip, #2
   1a764:	bcc	1a78c <__assert_fail@plt+0x9278>
   1a768:	mov	r2, #1
   1a76c:	str	r2, [r9]
   1a770:	ldr	r0, [lr, r0, lsl #2]
   1a774:	str	r0, [r9, #4]
   1a778:	ldr	r0, [r1, #40]	; 0x28
   1a77c:	add	r0, r0, ip
   1a780:	str	r0, [r1, #40]	; 0x28
   1a784:	mov	r0, #0
   1a788:	b	1a9b4 <__assert_fail@plt+0x94a0>
   1a78c:	add	r2, r0, r3
   1a790:	str	r2, [r1, #40]	; 0x28
   1a794:	ldrb	r6, [r5, #4]
   1a798:	sub	r0, r6, #22
   1a79c:	cmp	r0, #8
   1a7a0:	bhi	1a9a4 <__assert_fail@plt+0x9490>
   1a7a4:	add	r3, pc, #0
   1a7a8:	ldr	pc, [r3, r0, lsl #2]
   1a7ac:	andeq	sl, r1, ip, ror r9
   1a7b0:	andeq	sl, r1, r4, lsr #19
   1a7b4:	andeq	sl, r1, r4, lsr #19
   1a7b8:	andeq	sl, r1, r4, lsr #19
   1a7bc:	ldrdeq	sl, [r1], -r0
   1a7c0:	andeq	sl, r1, r4, lsr #19
   1a7c4:	ldrdeq	sl, [r1], -r0
   1a7c8:	andeq	sl, r1, r4, lsr #19
   1a7cc:	ldrdeq	sl, [r1], -r0
   1a7d0:	ldr	r3, [r1, #56]	; 0x38
   1a7d4:	mov	r0, #7
   1a7d8:	cmp	r3, r2
   1a7dc:	ble	1a9b4 <__assert_fail@plt+0x94a0>
   1a7e0:	ldrb	r3, [r5]
   1a7e4:	mov	r2, #0
   1a7e8:	uxtb	r7, r6
   1a7ec:	cmp	r7, #30
   1a7f0:	bne	1a800 <__assert_fail@plt+0x92ec>
   1a7f4:	ldrb	r7, [r1, #75]	; 0x4b
   1a7f8:	cmp	r7, #0
   1a7fc:	bne	1a858 <__assert_fail@plt+0x9344>
   1a800:	ldr	r4, [r1, #40]	; 0x28
   1a804:	ldr	r7, [r1, #4]
   1a808:	add	r6, r4, #1
   1a80c:	str	r6, [r1, #40]	; 0x28
   1a810:	ldrb	r4, [r7, r4]
   1a814:	ldr	r7, [r1, #56]	; 0x38
   1a818:	cmp	r7, r6
   1a81c:	ble	1a9b4 <__assert_fail@plt+0x94a0>
   1a820:	uxtb	r7, r4
   1a824:	cmp	r7, r3
   1a828:	bne	1a83c <__assert_fail@plt+0x9328>
   1a82c:	ldr	r7, [r1, #4]
   1a830:	ldrb	r7, [r7, r6]
   1a834:	cmp	r7, #93	; 0x5d
   1a838:	beq	1a930 <__assert_fail@plt+0x941c>
   1a83c:	ldr	r7, [r9, #4]
   1a840:	strb	r4, [r7, r2]
   1a844:	add	r2, r2, #1
   1a848:	cmp	r2, #32
   1a84c:	beq	1a9b4 <__assert_fail@plt+0x94a0>
   1a850:	ldrb	r6, [r5, #4]
   1a854:	b	1a7e8 <__assert_fail@plt+0x92d4>
   1a858:	ldrb	r7, [r1, #76]	; 0x4c
   1a85c:	cmp	r7, #0
   1a860:	beq	1a8fc <__assert_fail@plt+0x93e8>
   1a864:	ldr	lr, [r1, #28]
   1a868:	ldr	ip, [r1, #40]	; 0x28
   1a86c:	cmp	lr, ip
   1a870:	beq	1a884 <__assert_fail@plt+0x9370>
   1a874:	ldr	r4, [r1, #8]
   1a878:	ldr	r4, [r4, ip, lsl #2]
   1a87c:	cmn	r4, #1
   1a880:	beq	1a91c <__assert_fail@plt+0x9408>
   1a884:	ldr	r6, [r1, #12]
   1a888:	ldr	r7, [r1, #24]
   1a88c:	ldr	r4, [r1]
   1a890:	ldr	r6, [r6, ip, lsl #2]
   1a894:	add	r6, r7, r6
   1a898:	add	r4, r4, r6
   1a89c:	ldrsb	r4, [r4]
   1a8a0:	cmn	r4, #1
   1a8a4:	ble	1a91c <__assert_fail@plt+0x9408>
   1a8a8:	ldr	r7, [r1, #80]	; 0x50
   1a8ac:	mov	r6, #1
   1a8b0:	cmp	r7, #1
   1a8b4:	beq	1a8f0 <__assert_fail@plt+0x93dc>
   1a8b8:	add	r7, ip, #1
   1a8bc:	cmp	r7, lr
   1a8c0:	bge	1a8f0 <__assert_fail@plt+0x93dc>
   1a8c4:	ldr	r6, [r1, #8]
   1a8c8:	sub	lr, lr, ip
   1a8cc:	add	r8, r6, ip, lsl #2
   1a8d0:	mov	r6, #1
   1a8d4:	ldr	r7, [r8, r6, lsl #2]
   1a8d8:	cmn	r7, #1
   1a8dc:	bne	1a8f0 <__assert_fail@plt+0x93dc>
   1a8e0:	add	r6, r6, #1
   1a8e4:	cmp	lr, r6
   1a8e8:	bne	1a8d4 <__assert_fail@plt+0x93c0>
   1a8ec:	mov	r6, lr
   1a8f0:	add	r6, r6, ip
   1a8f4:	str	r6, [r1, #40]	; 0x28
   1a8f8:	b	1a814 <__assert_fail@plt+0x9300>
   1a8fc:	ldr	r7, [r1, #40]	; 0x28
   1a900:	ldr	r4, [r1, #24]
   1a904:	ldr	ip, [r1]
   1a908:	add	r6, r7, #1
   1a90c:	add	r7, r7, r4
   1a910:	str	r6, [r1, #40]	; 0x28
   1a914:	ldrb	r4, [ip, r7]
   1a918:	b	1a814 <__assert_fail@plt+0x9300>
   1a91c:	add	r6, ip, #1
   1a920:	str	r6, [r1, #40]	; 0x28
   1a924:	ldr	r7, [r1, #4]
   1a928:	ldrb	r4, [r7, ip]
   1a92c:	b	1a814 <__assert_fail@plt+0x9300>
   1a930:	add	r0, r6, #1
   1a934:	str	r0, [r1, #40]	; 0x28
   1a938:	mov	r0, #0
   1a93c:	ldr	r1, [r9, #4]
   1a940:	strb	r0, [r1, r2]
   1a944:	ldrb	r1, [r5, #4]
   1a948:	cmp	r1, #30
   1a94c:	beq	1a968 <__assert_fail@plt+0x9454>
   1a950:	cmp	r1, #28
   1a954:	beq	1a970 <__assert_fail@plt+0x945c>
   1a958:	cmp	r1, #26
   1a95c:	moveq	r1, #3
   1a960:	streq	r1, [r9]
   1a964:	b	1a9b4 <__assert_fail@plt+0x94a0>
   1a968:	mov	r1, #4
   1a96c:	b	1a974 <__assert_fail@plt+0x9460>
   1a970:	mov	r1, #2
   1a974:	str	r1, [r9]
   1a978:	b	1a9b4 <__assert_fail@plt+0x94a0>
   1a97c:	ldr	r0, [fp, #12]
   1a980:	cmp	r0, #0
   1a984:	bne	1a9a4 <__assert_fail@plt+0x9490>
   1a988:	ldr	r2, [fp, #8]
   1a98c:	mov	r0, sp
   1a990:	bl	1a590 <__assert_fail@plt+0x907c>
   1a994:	ldrb	r1, [sp, #4]
   1a998:	mov	r0, #11
   1a99c:	cmp	r1, #21
   1a9a0:	bne	1a9b4 <__assert_fail@plt+0x94a0>
   1a9a4:	mov	r0, #0
   1a9a8:	str	r0, [r9]
   1a9ac:	ldrb	r1, [r5]
   1a9b0:	strb	r1, [r9, #4]
   1a9b4:	sub	sp, fp, #24
   1a9b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a9bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a9c0:	add	fp, sp, #24
   1a9c4:	mov	r8, r0
   1a9c8:	ldrb	r0, [fp, #14]
   1a9cc:	ldr	r6, [fp, #8]
   1a9d0:	mov	r5, r3
   1a9d4:	mov	r7, r2
   1a9d8:	mov	r4, r1
   1a9dc:	tst	r0, #64	; 0x40
   1a9e0:	beq	1aa1c <__assert_fail@plt+0x9508>
   1a9e4:	movw	r1, #13634	; 0x3542
   1a9e8:	mov	r0, r6
   1a9ec:	movt	r1, #2
   1a9f0:	bl	11244 <strcmp@plt>
   1a9f4:	cmp	r0, #0
   1a9f8:	beq	1aa14 <__assert_fail@plt+0x9500>
   1a9fc:	movw	r1, #13640	; 0x3548
   1aa00:	mov	r0, r6
   1aa04:	movt	r1, #2
   1aa08:	bl	11244 <strcmp@plt>
   1aa0c:	cmp	r0, #0
   1aa10:	bne	1aa1c <__assert_fail@plt+0x9508>
   1aa14:	movw	r6, #13646	; 0x354e
   1aa18:	movt	r6, #2
   1aa1c:	ldr	r0, [r5]
   1aa20:	ldr	r1, [r7, #36]	; 0x24
   1aa24:	cmp	r0, r1
   1aa28:	beq	1af1c <__assert_fail@plt+0x9a08>
   1aa2c:	mov	r0, r6
   1aa30:	bl	11214 <wctype@plt>
   1aa34:	ldr	r2, [r7, #36]	; 0x24
   1aa38:	ldr	r1, [r7, #12]
   1aa3c:	add	r3, r2, #1
   1aa40:	str	r3, [r7, #36]	; 0x24
   1aa44:	str	r0, [r1, r2, lsl #2]
   1aa48:	movw	r1, #13622	; 0x3536
   1aa4c:	mov	r0, r6
   1aa50:	movt	r1, #2
   1aa54:	bl	11244 <strcmp@plt>
   1aa58:	cmp	r0, #0
   1aa5c:	beq	1abc0 <__assert_fail@plt+0x96ac>
   1aa60:	movw	r1, #13652	; 0x3554
   1aa64:	mov	r0, r6
   1aa68:	movt	r1, #2
   1aa6c:	bl	11244 <strcmp@plt>
   1aa70:	cmp	r0, #0
   1aa74:	beq	1ac0c <__assert_fail@plt+0x96f8>
   1aa78:	movw	r1, #13640	; 0x3548
   1aa7c:	mov	r0, r6
   1aa80:	movt	r1, #2
   1aa84:	bl	11244 <strcmp@plt>
   1aa88:	cmp	r0, #0
   1aa8c:	beq	1ac58 <__assert_fail@plt+0x9744>
   1aa90:	movw	r1, #13628	; 0x353c
   1aa94:	mov	r0, r6
   1aa98:	movt	r1, #2
   1aa9c:	bl	11244 <strcmp@plt>
   1aaa0:	cmp	r0, #0
   1aaa4:	beq	1aca4 <__assert_fail@plt+0x9790>
   1aaa8:	movw	r1, #13646	; 0x354e
   1aaac:	mov	r0, r6
   1aab0:	movt	r1, #2
   1aab4:	bl	11244 <strcmp@plt>
   1aab8:	cmp	r0, #0
   1aabc:	beq	1acf0 <__assert_fail@plt+0x97dc>
   1aac0:	movw	r1, #13683	; 0x3573
   1aac4:	mov	r0, r6
   1aac8:	movt	r1, #2
   1aacc:	bl	11244 <strcmp@plt>
   1aad0:	cmp	r0, #0
   1aad4:	beq	1ad3c <__assert_fail@plt+0x9828>
   1aad8:	movw	r1, #13658	; 0x355a
   1aadc:	mov	r0, r6
   1aae0:	movt	r1, #2
   1aae4:	bl	11244 <strcmp@plt>
   1aae8:	cmp	r0, #0
   1aaec:	beq	1ad8c <__assert_fail@plt+0x9878>
   1aaf0:	movw	r1, #13634	; 0x3542
   1aaf4:	mov	r0, r6
   1aaf8:	movt	r1, #2
   1aafc:	bl	11244 <strcmp@plt>
   1ab00:	cmp	r0, #0
   1ab04:	beq	1addc <__assert_fail@plt+0x98c8>
   1ab08:	movw	r1, #13664	; 0x3560
   1ab0c:	mov	r0, r6
   1ab10:	movt	r1, #2
   1ab14:	bl	11244 <strcmp@plt>
   1ab18:	cmp	r0, #0
   1ab1c:	beq	1ae2c <__assert_fail@plt+0x9918>
   1ab20:	movw	r1, #13670	; 0x3566
   1ab24:	mov	r0, r6
   1ab28:	movt	r1, #2
   1ab2c:	bl	11244 <strcmp@plt>
   1ab30:	cmp	r0, #0
   1ab34:	beq	1ae7c <__assert_fail@plt+0x9968>
   1ab38:	movw	r1, #13676	; 0x356c
   1ab3c:	mov	r0, r6
   1ab40:	movt	r1, #2
   1ab44:	bl	11244 <strcmp@plt>
   1ab48:	cmp	r0, #0
   1ab4c:	beq	1aecc <__assert_fail@plt+0x99b8>
   1ab50:	movw	r1, #13682	; 0x3572
   1ab54:	mov	r0, r6
   1ab58:	movt	r1, #2
   1ab5c:	bl	11244 <strcmp@plt>
   1ab60:	mov	r1, r0
   1ab64:	mov	r0, #4
   1ab68:	cmp	r1, #0
   1ab6c:	bne	1af18 <__assert_fail@plt+0x9a04>
   1ab70:	bl	113b8 <__ctype_b_loc@plt>
   1ab74:	ldr	r1, [r0]
   1ab78:	mov	r2, #0
   1ab7c:	mov	r3, #1
   1ab80:	cmp	r8, #0
   1ab84:	bne	1b180 <__assert_fail@plt+0x9c6c>
   1ab88:	ldrb	r0, [r1, #1]
   1ab8c:	tst	r0, #16
   1ab90:	beq	1aba8 <__assert_fail@plt+0x9694>
   1ab94:	ubfx	r0, r2, #5, #3
   1ab98:	and	r6, r2, #31
   1ab9c:	ldr	r7, [r4, r0, lsl #2]
   1aba0:	orr	r7, r7, r3, lsl r6
   1aba4:	str	r7, [r4, r0, lsl #2]
   1aba8:	add	r2, r2, #1
   1abac:	add	r1, r1, #2
   1abb0:	mov	r0, #0
   1abb4:	cmp	r2, #256	; 0x100
   1abb8:	bne	1ab88 <__assert_fail@plt+0x9674>
   1abbc:	b	1af18 <__assert_fail@plt+0x9a04>
   1abc0:	bl	113b8 <__ctype_b_loc@plt>
   1abc4:	ldr	r1, [r0]
   1abc8:	cmp	r8, #0
   1abcc:	bne	1afbc <__assert_fail@plt+0x9aa8>
   1abd0:	mov	r0, #0
   1abd4:	mov	r2, #1
   1abd8:	ldrb	r3, [r1]
   1abdc:	tst	r3, #8
   1abe0:	beq	1abf8 <__assert_fail@plt+0x96e4>
   1abe4:	ubfx	r3, r0, #5, #3
   1abe8:	and	r6, r0, #31
   1abec:	ldr	r7, [r4, r3, lsl #2]
   1abf0:	orr	r7, r7, r2, lsl r6
   1abf4:	str	r7, [r4, r3, lsl #2]
   1abf8:	add	r0, r0, #1
   1abfc:	add	r1, r1, #2
   1ac00:	cmp	r0, #256	; 0x100
   1ac04:	bne	1abd8 <__assert_fail@plt+0x96c4>
   1ac08:	b	1ad84 <__assert_fail@plt+0x9870>
   1ac0c:	bl	113b8 <__ctype_b_loc@plt>
   1ac10:	ldr	r1, [r0]
   1ac14:	cmp	r8, #0
   1ac18:	bne	1b03c <__assert_fail@plt+0x9b28>
   1ac1c:	mov	r0, #0
   1ac20:	mov	r2, #1
   1ac24:	ldrb	r3, [r1]
   1ac28:	tst	r3, #2
   1ac2c:	beq	1ac44 <__assert_fail@plt+0x9730>
   1ac30:	ubfx	r3, r0, #5, #3
   1ac34:	and	r6, r0, #31
   1ac38:	ldr	r7, [r4, r3, lsl #2]
   1ac3c:	orr	r7, r7, r2, lsl r6
   1ac40:	str	r7, [r4, r3, lsl #2]
   1ac44:	add	r0, r0, #1
   1ac48:	add	r1, r1, #2
   1ac4c:	cmp	r0, #256	; 0x100
   1ac50:	bne	1ac24 <__assert_fail@plt+0x9710>
   1ac54:	b	1ad84 <__assert_fail@plt+0x9870>
   1ac58:	bl	113b8 <__ctype_b_loc@plt>
   1ac5c:	ldr	r1, [r0]
   1ac60:	cmp	r8, #0
   1ac64:	bne	1b0bc <__assert_fail@plt+0x9ba8>
   1ac68:	mov	r0, #0
   1ac6c:	mov	r2, #1
   1ac70:	ldrb	r3, [r1, #1]
   1ac74:	tst	r3, #2
   1ac78:	beq	1ac90 <__assert_fail@plt+0x977c>
   1ac7c:	ubfx	r3, r0, #5, #3
   1ac80:	and	r6, r0, #31
   1ac84:	ldr	r7, [r4, r3, lsl #2]
   1ac88:	orr	r7, r7, r2, lsl r6
   1ac8c:	str	r7, [r4, r3, lsl #2]
   1ac90:	add	r0, r0, #1
   1ac94:	add	r1, r1, #2
   1ac98:	cmp	r0, #256	; 0x100
   1ac9c:	bne	1ac70 <__assert_fail@plt+0x975c>
   1aca0:	b	1ad84 <__assert_fail@plt+0x9870>
   1aca4:	bl	113b8 <__ctype_b_loc@plt>
   1aca8:	ldr	r1, [r0]
   1acac:	cmp	r8, #0
   1acb0:	bne	1b13c <__assert_fail@plt+0x9c28>
   1acb4:	mov	r0, #0
   1acb8:	mov	r2, #1
   1acbc:	ldrb	r3, [r1, #1]
   1acc0:	tst	r3, #32
   1acc4:	beq	1acdc <__assert_fail@plt+0x97c8>
   1acc8:	ubfx	r3, r0, #5, #3
   1accc:	and	r6, r0, #31
   1acd0:	ldr	r7, [r4, r3, lsl #2]
   1acd4:	orr	r7, r7, r2, lsl r6
   1acd8:	str	r7, [r4, r3, lsl #2]
   1acdc:	add	r0, r0, #1
   1ace0:	add	r1, r1, #2
   1ace4:	cmp	r0, #256	; 0x100
   1ace8:	bne	1acbc <__assert_fail@plt+0x97a8>
   1acec:	b	1ad84 <__assert_fail@plt+0x9870>
   1acf0:	bl	113b8 <__ctype_b_loc@plt>
   1acf4:	ldr	r1, [r0]
   1acf8:	cmp	r8, #0
   1acfc:	bne	1b1bc <__assert_fail@plt+0x9ca8>
   1ad00:	mov	r0, #0
   1ad04:	mov	r2, #1
   1ad08:	ldrb	r3, [r1, #1]
   1ad0c:	tst	r3, #4
   1ad10:	beq	1ad28 <__assert_fail@plt+0x9814>
   1ad14:	ubfx	r3, r0, #5, #3
   1ad18:	and	r6, r0, #31
   1ad1c:	ldr	r7, [r4, r3, lsl #2]
   1ad20:	orr	r7, r7, r2, lsl r6
   1ad24:	str	r7, [r4, r3, lsl #2]
   1ad28:	add	r0, r0, #1
   1ad2c:	add	r1, r1, #2
   1ad30:	cmp	r0, #256	; 0x100
   1ad34:	bne	1ad08 <__assert_fail@plt+0x97f4>
   1ad38:	b	1ad84 <__assert_fail@plt+0x9870>
   1ad3c:	bl	113b8 <__ctype_b_loc@plt>
   1ad40:	ldr	r1, [r0]
   1ad44:	cmp	r8, #0
   1ad48:	bne	1b200 <__assert_fail@plt+0x9cec>
   1ad4c:	mov	r0, #0
   1ad50:	mov	r2, #1
   1ad54:	ldrb	r3, [r1, #1]
   1ad58:	tst	r3, #8
   1ad5c:	beq	1ad74 <__assert_fail@plt+0x9860>
   1ad60:	ubfx	r3, r0, #5, #3
   1ad64:	and	r6, r0, #31
   1ad68:	ldr	r7, [r4, r3, lsl #2]
   1ad6c:	orr	r7, r7, r2, lsl r6
   1ad70:	str	r7, [r4, r3, lsl #2]
   1ad74:	add	r0, r0, #1
   1ad78:	add	r1, r1, #2
   1ad7c:	cmp	r0, #256	; 0x100
   1ad80:	bne	1ad54 <__assert_fail@plt+0x9840>
   1ad84:	mov	r0, #0
   1ad88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ad8c:	bl	113b8 <__ctype_b_loc@plt>
   1ad90:	ldr	r1, [r0]
   1ad94:	mov	r2, #0
   1ad98:	mov	r3, #1
   1ad9c:	cmp	r8, #0
   1ada0:	bne	1af44 <__assert_fail@plt+0x9a30>
   1ada4:	ldrb	r0, [r1, #1]
   1ada8:	tst	r0, #64	; 0x40
   1adac:	beq	1adc4 <__assert_fail@plt+0x98b0>
   1adb0:	ubfx	r0, r2, #5, #3
   1adb4:	and	r6, r2, #31
   1adb8:	ldr	r7, [r4, r0, lsl #2]
   1adbc:	orr	r7, r7, r3, lsl r6
   1adc0:	str	r7, [r4, r0, lsl #2]
   1adc4:	add	r2, r2, #1
   1adc8:	add	r1, r1, #2
   1adcc:	mov	r0, #0
   1add0:	cmp	r2, #256	; 0x100
   1add4:	bne	1ada4 <__assert_fail@plt+0x9890>
   1add8:	b	1af18 <__assert_fail@plt+0x9a04>
   1addc:	bl	113b8 <__ctype_b_loc@plt>
   1ade0:	ldr	r1, [r0]
   1ade4:	mov	r2, #0
   1ade8:	mov	r3, #1
   1adec:	cmp	r8, #0
   1adf0:	bne	1af80 <__assert_fail@plt+0x9a6c>
   1adf4:	ldrb	r0, [r1, #1]
   1adf8:	tst	r0, #1
   1adfc:	beq	1ae14 <__assert_fail@plt+0x9900>
   1ae00:	ubfx	r0, r2, #5, #3
   1ae04:	and	r6, r2, #31
   1ae08:	ldr	r7, [r4, r0, lsl #2]
   1ae0c:	orr	r7, r7, r3, lsl r6
   1ae10:	str	r7, [r4, r0, lsl #2]
   1ae14:	add	r2, r2, #1
   1ae18:	add	r1, r1, #2
   1ae1c:	mov	r0, #0
   1ae20:	cmp	r2, #256	; 0x100
   1ae24:	bne	1adf4 <__assert_fail@plt+0x98e0>
   1ae28:	b	1af18 <__assert_fail@plt+0x9a04>
   1ae2c:	bl	113b8 <__ctype_b_loc@plt>
   1ae30:	ldr	r1, [r0]
   1ae34:	mov	r2, #0
   1ae38:	mov	r3, #1
   1ae3c:	cmp	r8, #0
   1ae40:	bne	1b000 <__assert_fail@plt+0x9aec>
   1ae44:	ldrb	r0, [r1]
   1ae48:	tst	r0, #1
   1ae4c:	beq	1ae64 <__assert_fail@plt+0x9950>
   1ae50:	ubfx	r0, r2, #5, #3
   1ae54:	and	r6, r2, #31
   1ae58:	ldr	r7, [r4, r0, lsl #2]
   1ae5c:	orr	r7, r7, r3, lsl r6
   1ae60:	str	r7, [r4, r0, lsl #2]
   1ae64:	add	r2, r2, #1
   1ae68:	add	r1, r1, #2
   1ae6c:	mov	r0, #0
   1ae70:	cmp	r2, #256	; 0x100
   1ae74:	bne	1ae44 <__assert_fail@plt+0x9930>
   1ae78:	b	1af18 <__assert_fail@plt+0x9a04>
   1ae7c:	bl	113b8 <__ctype_b_loc@plt>
   1ae80:	ldr	r1, [r0]
   1ae84:	mov	r2, #0
   1ae88:	mov	r3, #1
   1ae8c:	cmp	r8, #0
   1ae90:	bne	1b080 <__assert_fail@plt+0x9b6c>
   1ae94:	ldrsh	r0, [r1]
   1ae98:	cmn	r0, #1
   1ae9c:	bgt	1aeb4 <__assert_fail@plt+0x99a0>
   1aea0:	ubfx	r0, r2, #5, #3
   1aea4:	and	r6, r2, #31
   1aea8:	ldr	r7, [r4, r0, lsl #2]
   1aeac:	orr	r7, r7, r3, lsl r6
   1aeb0:	str	r7, [r4, r0, lsl #2]
   1aeb4:	add	r2, r2, #1
   1aeb8:	add	r1, r1, #2
   1aebc:	mov	r0, #0
   1aec0:	cmp	r2, #256	; 0x100
   1aec4:	bne	1ae94 <__assert_fail@plt+0x9980>
   1aec8:	b	1af18 <__assert_fail@plt+0x9a04>
   1aecc:	bl	113b8 <__ctype_b_loc@plt>
   1aed0:	ldr	r1, [r0]
   1aed4:	mov	r2, #0
   1aed8:	mov	r3, #1
   1aedc:	cmp	r8, #0
   1aee0:	bne	1b100 <__assert_fail@plt+0x9bec>
   1aee4:	ldrb	r0, [r1]
   1aee8:	tst	r0, #4
   1aeec:	beq	1af04 <__assert_fail@plt+0x99f0>
   1aef0:	ubfx	r0, r2, #5, #3
   1aef4:	and	r6, r2, #31
   1aef8:	ldr	r7, [r4, r0, lsl #2]
   1aefc:	orr	r7, r7, r3, lsl r6
   1af00:	str	r7, [r4, r0, lsl #2]
   1af04:	add	r2, r2, #1
   1af08:	add	r1, r1, #2
   1af0c:	mov	r0, #0
   1af10:	cmp	r2, #256	; 0x100
   1af14:	bne	1aee4 <__assert_fail@plt+0x99d0>
   1af18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1af1c:	mov	r1, #1
   1af20:	orr	r9, r1, r0, lsl #1
   1af24:	ldr	r0, [r7, #12]
   1af28:	lsl	r1, r9, #2
   1af2c:	bl	22004 <__assert_fail@plt+0x10af0>
   1af30:	cmp	r0, #0
   1af34:	beq	1b244 <__assert_fail@plt+0x9d30>
   1af38:	str	r0, [r7, #12]
   1af3c:	str	r9, [r5]
   1af40:	b	1aa2c <__assert_fail@plt+0x9518>
   1af44:	ldrb	r0, [r1, #1]
   1af48:	tst	r0, #64	; 0x40
   1af4c:	beq	1af68 <__assert_fail@plt+0x9a54>
   1af50:	ldrb	r0, [r8, r2]
   1af54:	ubfx	r7, r0, #5, #3
   1af58:	and	r0, r0, #31
   1af5c:	ldr	r6, [r4, r7, lsl #2]
   1af60:	orr	r0, r6, r3, lsl r0
   1af64:	str	r0, [r4, r7, lsl #2]
   1af68:	add	r2, r2, #1
   1af6c:	add	r1, r1, #2
   1af70:	mov	r0, #0
   1af74:	cmp	r2, #256	; 0x100
   1af78:	bne	1af44 <__assert_fail@plt+0x9a30>
   1af7c:	b	1af18 <__assert_fail@plt+0x9a04>
   1af80:	ldrb	r0, [r1, #1]
   1af84:	tst	r0, #1
   1af88:	beq	1afa4 <__assert_fail@plt+0x9a90>
   1af8c:	ldrb	r0, [r8, r2]
   1af90:	ubfx	r7, r0, #5, #3
   1af94:	and	r0, r0, #31
   1af98:	ldr	r6, [r4, r7, lsl #2]
   1af9c:	orr	r0, r6, r3, lsl r0
   1afa0:	str	r0, [r4, r7, lsl #2]
   1afa4:	add	r2, r2, #1
   1afa8:	add	r1, r1, #2
   1afac:	mov	r0, #0
   1afb0:	cmp	r2, #256	; 0x100
   1afb4:	bne	1af80 <__assert_fail@plt+0x9a6c>
   1afb8:	b	1af18 <__assert_fail@plt+0x9a04>
   1afbc:	mov	r2, #0
   1afc0:	mov	r3, #1
   1afc4:	ldrb	r0, [r1]
   1afc8:	tst	r0, #8
   1afcc:	beq	1afe8 <__assert_fail@plt+0x9ad4>
   1afd0:	ldrb	r0, [r8, r2]
   1afd4:	ubfx	r7, r0, #5, #3
   1afd8:	and	r0, r0, #31
   1afdc:	ldr	r6, [r4, r7, lsl #2]
   1afe0:	orr	r0, r6, r3, lsl r0
   1afe4:	str	r0, [r4, r7, lsl #2]
   1afe8:	add	r2, r2, #1
   1afec:	add	r1, r1, #2
   1aff0:	mov	r0, #0
   1aff4:	cmp	r2, #256	; 0x100
   1aff8:	bne	1afc4 <__assert_fail@plt+0x9ab0>
   1affc:	b	1af18 <__assert_fail@plt+0x9a04>
   1b000:	ldrb	r0, [r1]
   1b004:	tst	r0, #1
   1b008:	beq	1b024 <__assert_fail@plt+0x9b10>
   1b00c:	ldrb	r0, [r8, r2]
   1b010:	ubfx	r7, r0, #5, #3
   1b014:	and	r0, r0, #31
   1b018:	ldr	r6, [r4, r7, lsl #2]
   1b01c:	orr	r0, r6, r3, lsl r0
   1b020:	str	r0, [r4, r7, lsl #2]
   1b024:	add	r2, r2, #1
   1b028:	add	r1, r1, #2
   1b02c:	mov	r0, #0
   1b030:	cmp	r2, #256	; 0x100
   1b034:	bne	1b000 <__assert_fail@plt+0x9aec>
   1b038:	b	1af18 <__assert_fail@plt+0x9a04>
   1b03c:	mov	r2, #0
   1b040:	mov	r3, #1
   1b044:	ldrb	r0, [r1]
   1b048:	tst	r0, #2
   1b04c:	beq	1b068 <__assert_fail@plt+0x9b54>
   1b050:	ldrb	r0, [r8, r2]
   1b054:	ubfx	r7, r0, #5, #3
   1b058:	and	r0, r0, #31
   1b05c:	ldr	r6, [r4, r7, lsl #2]
   1b060:	orr	r0, r6, r3, lsl r0
   1b064:	str	r0, [r4, r7, lsl #2]
   1b068:	add	r2, r2, #1
   1b06c:	add	r1, r1, #2
   1b070:	mov	r0, #0
   1b074:	cmp	r2, #256	; 0x100
   1b078:	bne	1b044 <__assert_fail@plt+0x9b30>
   1b07c:	b	1af18 <__assert_fail@plt+0x9a04>
   1b080:	ldrsh	r0, [r1]
   1b084:	cmn	r0, #1
   1b088:	bgt	1b0a4 <__assert_fail@plt+0x9b90>
   1b08c:	ldrb	r0, [r8, r2]
   1b090:	ubfx	r7, r0, #5, #3
   1b094:	and	r0, r0, #31
   1b098:	ldr	r6, [r4, r7, lsl #2]
   1b09c:	orr	r0, r6, r3, lsl r0
   1b0a0:	str	r0, [r4, r7, lsl #2]
   1b0a4:	add	r2, r2, #1
   1b0a8:	add	r1, r1, #2
   1b0ac:	mov	r0, #0
   1b0b0:	cmp	r2, #256	; 0x100
   1b0b4:	bne	1b080 <__assert_fail@plt+0x9b6c>
   1b0b8:	b	1af18 <__assert_fail@plt+0x9a04>
   1b0bc:	mov	r2, #0
   1b0c0:	mov	r3, #1
   1b0c4:	ldrb	r0, [r1, #1]
   1b0c8:	tst	r0, #2
   1b0cc:	beq	1b0e8 <__assert_fail@plt+0x9bd4>
   1b0d0:	ldrb	r0, [r8, r2]
   1b0d4:	ubfx	r7, r0, #5, #3
   1b0d8:	and	r0, r0, #31
   1b0dc:	ldr	r6, [r4, r7, lsl #2]
   1b0e0:	orr	r0, r6, r3, lsl r0
   1b0e4:	str	r0, [r4, r7, lsl #2]
   1b0e8:	add	r2, r2, #1
   1b0ec:	add	r1, r1, #2
   1b0f0:	mov	r0, #0
   1b0f4:	cmp	r2, #256	; 0x100
   1b0f8:	bne	1b0c4 <__assert_fail@plt+0x9bb0>
   1b0fc:	b	1af18 <__assert_fail@plt+0x9a04>
   1b100:	ldrb	r0, [r1]
   1b104:	tst	r0, #4
   1b108:	beq	1b124 <__assert_fail@plt+0x9c10>
   1b10c:	ldrb	r0, [r8, r2]
   1b110:	ubfx	r7, r0, #5, #3
   1b114:	and	r0, r0, #31
   1b118:	ldr	r6, [r4, r7, lsl #2]
   1b11c:	orr	r0, r6, r3, lsl r0
   1b120:	str	r0, [r4, r7, lsl #2]
   1b124:	add	r2, r2, #1
   1b128:	add	r1, r1, #2
   1b12c:	mov	r0, #0
   1b130:	cmp	r2, #256	; 0x100
   1b134:	bne	1b100 <__assert_fail@plt+0x9bec>
   1b138:	b	1af18 <__assert_fail@plt+0x9a04>
   1b13c:	mov	r2, #0
   1b140:	mov	r3, #1
   1b144:	ldrb	r0, [r1, #1]
   1b148:	tst	r0, #32
   1b14c:	beq	1b168 <__assert_fail@plt+0x9c54>
   1b150:	ldrb	r0, [r8, r2]
   1b154:	ubfx	r7, r0, #5, #3
   1b158:	and	r0, r0, #31
   1b15c:	ldr	r6, [r4, r7, lsl #2]
   1b160:	orr	r0, r6, r3, lsl r0
   1b164:	str	r0, [r4, r7, lsl #2]
   1b168:	add	r2, r2, #1
   1b16c:	add	r1, r1, #2
   1b170:	mov	r0, #0
   1b174:	cmp	r2, #256	; 0x100
   1b178:	bne	1b144 <__assert_fail@plt+0x9c30>
   1b17c:	b	1af18 <__assert_fail@plt+0x9a04>
   1b180:	ldrb	r0, [r1, #1]
   1b184:	tst	r0, #16
   1b188:	beq	1b1a4 <__assert_fail@plt+0x9c90>
   1b18c:	ldrb	r0, [r8, r2]
   1b190:	ubfx	r7, r0, #5, #3
   1b194:	and	r0, r0, #31
   1b198:	ldr	r6, [r4, r7, lsl #2]
   1b19c:	orr	r0, r6, r3, lsl r0
   1b1a0:	str	r0, [r4, r7, lsl #2]
   1b1a4:	add	r2, r2, #1
   1b1a8:	add	r1, r1, #2
   1b1ac:	mov	r0, #0
   1b1b0:	cmp	r2, #256	; 0x100
   1b1b4:	bne	1b180 <__assert_fail@plt+0x9c6c>
   1b1b8:	b	1af18 <__assert_fail@plt+0x9a04>
   1b1bc:	mov	r2, #0
   1b1c0:	mov	r3, #1
   1b1c4:	ldrb	r0, [r1, #1]
   1b1c8:	tst	r0, #4
   1b1cc:	beq	1b1e8 <__assert_fail@plt+0x9cd4>
   1b1d0:	ldrb	r0, [r8, r2]
   1b1d4:	ubfx	r7, r0, #5, #3
   1b1d8:	and	r0, r0, #31
   1b1dc:	ldr	r6, [r4, r7, lsl #2]
   1b1e0:	orr	r0, r6, r3, lsl r0
   1b1e4:	str	r0, [r4, r7, lsl #2]
   1b1e8:	add	r2, r2, #1
   1b1ec:	add	r1, r1, #2
   1b1f0:	mov	r0, #0
   1b1f4:	cmp	r2, #256	; 0x100
   1b1f8:	bne	1b1c4 <__assert_fail@plt+0x9cb0>
   1b1fc:	b	1af18 <__assert_fail@plt+0x9a04>
   1b200:	mov	r2, #0
   1b204:	mov	r3, #1
   1b208:	ldrb	r0, [r1, #1]
   1b20c:	tst	r0, #8
   1b210:	beq	1b22c <__assert_fail@plt+0x9d18>
   1b214:	ldrb	r0, [r8, r2]
   1b218:	ubfx	r7, r0, #5, #3
   1b21c:	and	r0, r0, #31
   1b220:	ldr	r6, [r4, r7, lsl #2]
   1b224:	orr	r0, r6, r3, lsl r0
   1b228:	str	r0, [r4, r7, lsl #2]
   1b22c:	add	r2, r2, #1
   1b230:	add	r1, r1, #2
   1b234:	mov	r0, #0
   1b238:	cmp	r2, #256	; 0x100
   1b23c:	bne	1b208 <__assert_fail@plt+0x9cf4>
   1b240:	b	1af18 <__assert_fail@plt+0x9a04>
   1b244:	mov	r0, #12
   1b248:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b24c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b250:	add	fp, sp, #24
   1b254:	mov	r5, r1
   1b258:	mov	r4, r2
   1b25c:	mov	r6, r0
   1b260:	mvn	r1, #0
   1b264:	movw	r8, #32816	; 0x8030
   1b268:	mov	r7, r1
   1b26c:	mov	r0, r5
   1b270:	mov	r1, r6
   1b274:	mov	r2, r4
   1b278:	bl	1849c <__assert_fail@plt+0x6f88>
   1b27c:	ldr	r1, [r6, #40]	; 0x28
   1b280:	add	r0, r1, r0
   1b284:	str	r0, [r6, #40]	; 0x28
   1b288:	ldrb	r2, [r5, #4]
   1b28c:	cmp	r2, #24
   1b290:	beq	1b2f0 <__assert_fail@plt+0x9ddc>
   1b294:	cmp	r2, #2
   1b298:	beq	1b2ec <__assert_fail@plt+0x9dd8>
   1b29c:	ldrb	r0, [r5]
   1b2a0:	cmp	r0, #44	; 0x2c
   1b2a4:	beq	1b2f0 <__assert_fail@plt+0x9ddc>
   1b2a8:	mvn	r1, #1
   1b2ac:	cmp	r0, #48	; 0x30
   1b2b0:	bcc	1b268 <__assert_fail@plt+0x9d54>
   1b2b4:	cmp	r2, #1
   1b2b8:	bne	1b268 <__assert_fail@plt+0x9d54>
   1b2bc:	cmn	r7, #2
   1b2c0:	beq	1b268 <__assert_fail@plt+0x9d54>
   1b2c4:	cmp	r0, #57	; 0x39
   1b2c8:	bhi	1b268 <__assert_fail@plt+0x9d54>
   1b2cc:	cmn	r7, #1
   1b2d0:	beq	1b2e4 <__assert_fail@plt+0x9dd0>
   1b2d4:	add	r1, r7, r7, lsl #2
   1b2d8:	add	r0, r0, r1, lsl #1
   1b2dc:	cmp	r0, r8
   1b2e0:	movge	r0, r8
   1b2e4:	sub	r1, r0, #48	; 0x30
   1b2e8:	b	1b268 <__assert_fail@plt+0x9d54>
   1b2ec:	mvn	r7, #1
   1b2f0:	mov	r0, r7
   1b2f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b2f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b2fc:	add	fp, sp, #24
   1b300:	sub	sp, sp, #8
   1b304:	mov	r3, r0
   1b308:	mov	r5, r0
   1b30c:	mov	r8, r1
   1b310:	mov	r0, r1
   1b314:	mov	r1, #0
   1b318:	mov	r2, #0
   1b31c:	mov	r7, #0
   1b320:	ldr	r4, [r3], #20
   1b324:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1b328:	cmp	r0, #0
   1b32c:	str	r0, [sp, #4]
   1b330:	beq	1b3cc <__assert_fail@plt+0x9eb8>
   1b334:	mov	r9, r0
   1b338:	add	r6, sp, #4
   1b33c:	mov	r7, #0
   1b340:	str	r4, [r0]
   1b344:	ldr	r0, [r6]
   1b348:	ldr	r1, [r0, #24]
   1b34c:	orr	r1, r1, #262144	; 0x40000
   1b350:	str	r1, [r0, #24]
   1b354:	ldr	r0, [r5, #4]
   1b358:	ldr	r4, [r6]
   1b35c:	cmp	r0, #0
   1b360:	beq	1b370 <__assert_fail@plt+0x9e5c>
   1b364:	add	r6, r4, #4
   1b368:	mov	r5, r0
   1b36c:	b	1b3a4 <__assert_fail@plt+0x9e90>
   1b370:	mov	r1, #0
   1b374:	mov	r0, r5
   1b378:	ldr	r5, [r5, #8]
   1b37c:	cmp	r5, r1
   1b380:	cmpne	r5, #0
   1b384:	bne	1b3a0 <__assert_fail@plt+0x9e8c>
   1b388:	ldr	r5, [r0]
   1b38c:	ldr	r4, [r4]
   1b390:	mov	r1, r0
   1b394:	cmp	r5, #0
   1b398:	bne	1b374 <__assert_fail@plt+0x9e60>
   1b39c:	b	1b3c8 <__assert_fail@plt+0x9eb4>
   1b3a0:	add	r6, r4, #8
   1b3a4:	add	r3, r5, #20
   1b3a8:	mov	r0, r8
   1b3ac:	mov	r1, #0
   1b3b0:	mov	r2, #0
   1b3b4:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1b3b8:	cmp	r0, #0
   1b3bc:	str	r0, [r6]
   1b3c0:	bne	1b340 <__assert_fail@plt+0x9e2c>
   1b3c4:	b	1b3cc <__assert_fail@plt+0x9eb8>
   1b3c8:	mov	r7, r9
   1b3cc:	mov	r0, r7
   1b3d0:	sub	sp, fp, #24
   1b3d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b3d8:	push	{r4, r5, r6, r7, fp, lr}
   1b3dc:	add	fp, sp, #16
   1b3e0:	mov	r6, r0
   1b3e4:	mov	r5, r1
   1b3e8:	mov	r0, r2
   1b3ec:	mov	r4, r2
   1b3f0:	mov	r1, r6
   1b3f4:	blx	r5
   1b3f8:	cmp	r0, #0
   1b3fc:	bne	1b450 <__assert_fail@plt+0x9f3c>
   1b400:	ldr	r7, [r6, #4]
   1b404:	cmp	r7, #0
   1b408:	bne	1b438 <__assert_fail@plt+0x9f24>
   1b40c:	mov	r1, #0
   1b410:	ldr	r7, [r6, #8]
   1b414:	mov	r0, r6
   1b418:	cmp	r7, r1
   1b41c:	cmpne	r7, #0
   1b420:	bne	1b438 <__assert_fail@plt+0x9f24>
   1b424:	ldr	r6, [r0]
   1b428:	mov	r1, r0
   1b42c:	cmp	r6, #0
   1b430:	bne	1b410 <__assert_fail@plt+0x9efc>
   1b434:	b	1b454 <__assert_fail@plt+0x9f40>
   1b438:	mov	r0, r4
   1b43c:	mov	r1, r7
   1b440:	blx	r5
   1b444:	cmp	r0, #0
   1b448:	mov	r6, r7
   1b44c:	beq	1b400 <__assert_fail@plt+0x9eec>
   1b450:	pop	{r4, r5, r6, r7, fp, pc}
   1b454:	mov	r0, #0
   1b458:	pop	{r4, r5, r6, r7, fp, pc}
   1b45c:	ldrb	r2, [r1, #24]
   1b460:	cmp	r2, #17
   1b464:	beq	1b498 <__assert_fail@plt+0x9f84>
   1b468:	cmp	r2, #4
   1b46c:	bne	1b4ec <__assert_fail@plt+0x9fd8>
   1b470:	ldr	r2, [r0, #132]	; 0x84
   1b474:	cmp	r2, #0
   1b478:	beq	1b4ec <__assert_fail@plt+0x9fd8>
   1b47c:	ldr	r3, [r1, #20]
   1b480:	ldr	r2, [r2, r3, lsl #2]
   1b484:	mov	r3, #1
   1b488:	str	r2, [r1, #20]
   1b48c:	ldr	r1, [r0, #80]	; 0x50
   1b490:	orr	r1, r1, r3, lsl r2
   1b494:	b	1b4e8 <__assert_fail@plt+0x9fd4>
   1b498:	ldr	r2, [r1, #4]
   1b49c:	cmp	r2, #0
   1b4a0:	beq	1b4ec <__assert_fail@plt+0x9fd8>
   1b4a4:	ldrb	r3, [r2, #24]
   1b4a8:	cmp	r3, #17
   1b4ac:	bne	1b4ec <__assert_fail@plt+0x9fd8>
   1b4b0:	ldr	r3, [r2, #4]
   1b4b4:	ldr	r2, [r2, #20]
   1b4b8:	cmp	r3, #0
   1b4bc:	str	r3, [r1, #4]
   1b4c0:	strne	r1, [r3]
   1b4c4:	cmp	r2, #31
   1b4c8:	ldr	r1, [r1, #20]
   1b4cc:	ldr	r3, [r0, #132]	; 0x84
   1b4d0:	ldr	r1, [r3, r1, lsl #2]
   1b4d4:	str	r1, [r3, r2, lsl #2]
   1b4d8:	bgt	1b4ec <__assert_fail@plt+0x9fd8>
   1b4dc:	ldr	r1, [r0, #80]	; 0x50
   1b4e0:	mov	r3, #1
   1b4e4:	bic	r1, r1, r3, lsl r2
   1b4e8:	str	r1, [r0, #80]	; 0x50
   1b4ec:	mov	r0, #0
   1b4f0:	bx	lr
   1b4f4:	push	{r4, r5, fp, lr}
   1b4f8:	add	fp, sp, #8
   1b4fc:	sub	sp, sp, #8
   1b500:	mov	r5, r0
   1b504:	mov	r0, #0
   1b508:	mov	r4, r1
   1b50c:	str	r0, [sp, #4]
   1b510:	ldr	r2, [r1, #4]
   1b514:	cmp	r2, #0
   1b518:	beq	1b540 <__assert_fail@plt+0xa02c>
   1b51c:	ldrb	r0, [r2, #24]
   1b520:	cmp	r0, #17
   1b524:	bne	1b540 <__assert_fail@plt+0xa02c>
   1b528:	add	r0, sp, #4
   1b52c:	mov	r1, r5
   1b530:	bl	1b7f8 <__assert_fail@plt+0xa2e4>
   1b534:	cmp	r0, #0
   1b538:	str	r0, [r4, #4]
   1b53c:	strne	r4, [r0]
   1b540:	ldr	r2, [r4, #8]
   1b544:	cmp	r2, #0
   1b548:	beq	1b570 <__assert_fail@plt+0xa05c>
   1b54c:	ldrb	r0, [r2, #24]
   1b550:	cmp	r0, #17
   1b554:	bne	1b570 <__assert_fail@plt+0xa05c>
   1b558:	add	r0, sp, #4
   1b55c:	mov	r1, r5
   1b560:	bl	1b7f8 <__assert_fail@plt+0xa2e4>
   1b564:	cmp	r0, #0
   1b568:	str	r0, [r4, #8]
   1b56c:	strne	r4, [r0]
   1b570:	ldr	r0, [sp, #4]
   1b574:	sub	sp, fp, #8
   1b578:	pop	{r4, r5, fp, pc}
   1b57c:	push	{r4, r5, fp, lr}
   1b580:	add	fp, sp, #8
   1b584:	ldr	r2, [r1, #24]
   1b588:	mov	r5, r0
   1b58c:	mov	r4, r1
   1b590:	uxtb	r0, r2
   1b594:	cmp	r0, #16
   1b598:	bne	1b5b8 <__assert_fail@plt+0xa0a4>
   1b59c:	ldr	r0, [r4, #4]
   1b5a0:	ldr	r1, [r0, #12]
   1b5a4:	str	r1, [r4, #12]
   1b5a8:	ldr	r0, [r0, #28]
   1b5ac:	str	r0, [r4, #28]
   1b5b0:	mov	r0, #0
   1b5b4:	pop	{r4, r5, fp, pc}
   1b5b8:	str	r4, [r4, #12]
   1b5bc:	mov	r0, r5
   1b5c0:	ldr	r1, [r4, #20]
   1b5c4:	bl	1b94c <__assert_fail@plt+0xa438>
   1b5c8:	cmn	r0, #1
   1b5cc:	str	r0, [r4, #28]
   1b5d0:	beq	1b604 <__assert_fail@plt+0xa0f0>
   1b5d4:	ldrb	r2, [r4, #24]
   1b5d8:	mov	r1, r0
   1b5dc:	mov	r0, #0
   1b5e0:	cmp	r2, #12
   1b5e4:	popne	{r4, r5, fp, pc}
   1b5e8:	ldr	r2, [r5]
   1b5ec:	ldr	r3, [r4, #20]
   1b5f0:	add	r1, r2, r1, lsl #3
   1b5f4:	ldr	r2, [r1, #4]
   1b5f8:	bfi	r2, r3, #8, #10
   1b5fc:	str	r2, [r1, #4]
   1b600:	pop	{r4, r5, fp, pc}
   1b604:	mov	r0, #12
   1b608:	pop	{r4, r5, fp, pc}
   1b60c:	ldrb	r0, [r1, #24]
   1b610:	cmp	r0, #16
   1b614:	beq	1b628 <__assert_fail@plt+0xa114>
   1b618:	cmp	r0, #11
   1b61c:	bne	1b640 <__assert_fail@plt+0xa12c>
   1b620:	ldr	r0, [r1, #4]
   1b624:	b	1b660 <__assert_fail@plt+0xa14c>
   1b628:	ldmib	r1, {r0, r2}
   1b62c:	ldr	r3, [r2, #12]
   1b630:	str	r3, [r0, #16]
   1b634:	ldr	r0, [r1, #16]
   1b638:	str	r0, [r2, #16]
   1b63c:	b	1b664 <__assert_fail@plt+0xa150>
   1b640:	ldr	r0, [r1, #4]
   1b644:	cmp	r0, #0
   1b648:	ldrne	r2, [r1, #16]
   1b64c:	strne	r2, [r0, #16]
   1b650:	ldr	r0, [r1, #8]
   1b654:	cmp	r0, #0
   1b658:	beq	1b664 <__assert_fail@plt+0xa150>
   1b65c:	ldr	r1, [r1, #16]
   1b660:	str	r1, [r0, #16]
   1b664:	mov	r0, #0
   1b668:	bx	lr
   1b66c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b670:	add	fp, sp, #24
   1b674:	ldr	r3, [r1, #24]
   1b678:	mvn	r7, #1
   1b67c:	ldr	r2, [r1, #28]
   1b680:	mov	r4, #0
   1b684:	uxtab	r3, r7, r3
   1b688:	cmp	r3, #14
   1b68c:	bhi	1b794 <__assert_fail@plt+0xa280>
   1b690:	add	r7, pc, #0
   1b694:	ldr	pc, [r7, r3, lsl #2]
   1b698:	ldrdeq	fp, [r1], -ip
   1b69c:	muleq	r1, r4, r7
   1b6a0:	andeq	fp, r1, r8, lsr #15
   1b6a4:	muleq	r1, r4, r7
   1b6a8:	muleq	r1, r4, r7
   1b6ac:	muleq	r1, r4, r7
   1b6b0:	ldrdeq	fp, [r1], -r4
   1b6b4:	ldrdeq	fp, [r1], -r4
   1b6b8:	andeq	fp, r1, r0, lsl r7
   1b6bc:	andeq	fp, r1, r0, lsl r7
   1b6c0:	ldrdeq	fp, [r1], -r4
   1b6c4:	muleq	r1, r4, r7
   1b6c8:	muleq	r1, r4, r7
   1b6cc:	muleq	r1, r4, r7
   1b6d0:	ldrdeq	fp, [r1], -ip
   1b6d4:	ldr	r1, [r1, #16]
   1b6d8:	ldr	r5, [r1, #28]
   1b6dc:	ldr	r6, [r0, #20]
   1b6e0:	add	r0, r2, r2, lsl #1
   1b6e4:	mov	r1, #1
   1b6e8:	str	r1, [r6, r0, lsl #2]!
   1b6ec:	mov	r0, #4
   1b6f0:	mov	r7, r6
   1b6f4:	str	r1, [r7, #4]!
   1b6f8:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1b6fc:	cmp	r0, #0
   1b700:	str	r0, [r6, #8]
   1b704:	beq	1b7e4 <__assert_fail@plt+0xa2d0>
   1b708:	str	r5, [r0]
   1b70c:	b	1b7dc <__assert_fail@plt+0xa2c8>
   1b710:	ldrb	r3, [r0, #88]	; 0x58
   1b714:	add	r6, r1, #16
   1b718:	add	r5, r2, r2, lsl #1
   1b71c:	orr	r3, r3, #1
   1b720:	strb	r3, [r0, #88]	; 0x58
   1b724:	mov	r3, r6
   1b728:	ldr	r7, [r1, #4]
   1b72c:	ldr	r1, [r1, #8]
   1b730:	cmp	r1, #0
   1b734:	addne	r3, r1, #12
   1b738:	cmp	r7, #0
   1b73c:	ldr	r1, [r3]
   1b740:	addne	r6, r7, #12
   1b744:	ldr	r8, [r1, #28]
   1b748:	ldr	r1, [r6]
   1b74c:	ldr	r6, [r0, #20]
   1b750:	mov	r0, #2
   1b754:	ldr	r9, [r1, #28]
   1b758:	mov	r7, r6
   1b75c:	str	r0, [r7, r5, lsl #2]!
   1b760:	mov	r0, #8
   1b764:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1b768:	cmp	r0, #0
   1b76c:	str	r0, [r7, #8]
   1b770:	beq	1b7f0 <__assert_fail@plt+0xa2dc>
   1b774:	add	r1, r6, r5, lsl #2
   1b778:	cmp	r9, r8
   1b77c:	add	r1, r1, #4
   1b780:	bne	1b7c8 <__assert_fail@plt+0xa2b4>
   1b784:	mov	r2, #1
   1b788:	str	r2, [r1]
   1b78c:	str	r9, [r0]
   1b790:	b	1b7dc <__assert_fail@plt+0xa2c8>
   1b794:	ldr	r1, [r1, #16]
   1b798:	ldr	r0, [r0, #12]
   1b79c:	ldr	r1, [r1, #28]
   1b7a0:	str	r1, [r0, r2, lsl #2]
   1b7a4:	b	1b7dc <__assert_fail@plt+0xa2c8>
   1b7a8:	ldr	r7, [r1, #16]
   1b7ac:	ldr	r3, [r0, #12]
   1b7b0:	ldr	r5, [r7, #28]
   1b7b4:	str	r5, [r3, r2, lsl #2]
   1b7b8:	ldrb	r1, [r1, #24]
   1b7bc:	cmp	r1, #4
   1b7c0:	beq	1b6dc <__assert_fail@plt+0xa1c8>
   1b7c4:	b	1b7dc <__assert_fail@plt+0xa2c8>
   1b7c8:	mov	r2, #2
   1b7cc:	str	r2, [r1]
   1b7d0:	stmcs	r0, {r8, r9}
   1b7d4:	strcc	r9, [r0]
   1b7d8:	strcc	r8, [r0, #4]
   1b7dc:	mov	r0, r4
   1b7e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b7e4:	mov	r0, #0
   1b7e8:	str	r0, [r7]
   1b7ec:	str	r0, [r6]
   1b7f0:	mov	r4, #12
   1b7f4:	b	1b7dc <__assert_fail@plt+0xa2c8>
   1b7f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7fc:	add	fp, sp, #28
   1b800:	sub	sp, sp, #12
   1b804:	ldr	r5, [r2, #4]
   1b808:	ldr	sl, [r1]
   1b80c:	mov	r9, r2
   1b810:	cmp	r5, #0
   1b814:	ldrbne	r1, [r1, #28]
   1b818:	andsne	r1, r1, #16
   1b81c:	bne	1b924 <__assert_fail@plt+0xa410>
   1b820:	str	r0, [sp]
   1b824:	mov	r0, #8
   1b828:	mov	r8, #0
   1b82c:	add	r3, sp, #4
   1b830:	mov	r1, #0
   1b834:	mov	r2, #0
   1b838:	str	r0, [sp, #8]
   1b83c:	mov	r0, sl
   1b840:	str	r8, [sp, #4]
   1b844:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1b848:	mov	r7, r0
   1b84c:	mov	r0, #9
   1b850:	add	r3, sp, #4
   1b854:	mov	r1, #0
   1b858:	mov	r2, #0
   1b85c:	str	r0, [sp, #8]
   1b860:	mov	r0, sl
   1b864:	str	r8, [sp, #4]
   1b868:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1b86c:	mov	r4, r0
   1b870:	cmp	r5, #0
   1b874:	mov	r6, r0
   1b878:	beq	1b8a0 <__assert_fail@plt+0xa38c>
   1b87c:	mov	r0, #16
   1b880:	add	r3, sp, #4
   1b884:	mov	r1, r5
   1b888:	mov	r2, r4
   1b88c:	str	r0, [sp, #8]
   1b890:	mov	r0, sl
   1b894:	str	r8, [sp, #4]
   1b898:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1b89c:	mov	r6, r0
   1b8a0:	mov	r0, #16
   1b8a4:	add	r3, sp, #4
   1b8a8:	mov	r1, r7
   1b8ac:	mov	r2, r6
   1b8b0:	str	r0, [sp, #8]
   1b8b4:	mov	r0, sl
   1b8b8:	str	r8, [sp, #4]
   1b8bc:	bl	1a2bc <__assert_fail@plt+0x8da8>
   1b8c0:	cmp	r4, #0
   1b8c4:	beq	1b8d4 <__assert_fail@plt+0xa3c0>
   1b8c8:	cmp	r7, #0
   1b8cc:	cmpne	r6, #0
   1b8d0:	bne	1b8e8 <__assert_fail@plt+0xa3d4>
   1b8d4:	ldr	r1, [sp]
   1b8d8:	mov	r0, #12
   1b8dc:	mov	r5, #0
   1b8e0:	str	r0, [r1]
   1b8e4:	b	1b940 <__assert_fail@plt+0xa42c>
   1b8e8:	mov	r5, r0
   1b8ec:	cmp	r0, #0
   1b8f0:	beq	1b8d4 <__assert_fail@plt+0xa3c0>
   1b8f4:	ldr	r0, [r9, #20]
   1b8f8:	str	r0, [r4, #20]
   1b8fc:	str	r0, [r7, #20]
   1b900:	ldr	r1, [r9, #24]
   1b904:	ldr	r0, [r4, #24]
   1b908:	lsr	r1, r1, #19
   1b90c:	bfi	r0, r1, #19, #1
   1b910:	str	r0, [r4, #24]
   1b914:	ldr	r0, [r7, #24]
   1b918:	bfi	r0, r1, #19, #1
   1b91c:	str	r0, [r7, #24]
   1b920:	b	1b940 <__assert_fail@plt+0xa42c>
   1b924:	ldr	r3, [r9, #20]
   1b928:	cmp	r3, #31
   1b92c:	bgt	1b940 <__assert_fail@plt+0xa42c>
   1b930:	ldr	r1, [sl, #80]	; 0x50
   1b934:	mov	r2, #1
   1b938:	tst	r1, r2, lsl r3
   1b93c:	bne	1b820 <__assert_fail@plt+0xa30c>
   1b940:	mov	r0, r5
   1b944:	sub	sp, fp, #28
   1b948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b94c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b950:	add	fp, sp, #28
   1b954:	sub	sp, sp, #12
   1b958:	mov	r4, r0
   1b95c:	ldr	r7, [r0, #4]
   1b960:	ldr	r0, [r0, #8]
   1b964:	mov	r5, r2
   1b968:	mov	r9, r1
   1b96c:	cmp	r0, r7
   1b970:	bcs	1ba3c <__assert_fail@plt+0xa528>
   1b974:	ldr	r1, [r4]
   1b978:	str	r9, [r1, r0, lsl #3]!
   1b97c:	str	r5, [r1, #4]
   1b980:	ldr	r0, [r4]
   1b984:	ldr	r1, [r4, #8]
   1b988:	add	r0, r0, r1, lsl #3
   1b98c:	ldr	r1, [r0, #4]
   1b990:	bfc	r1, #8, #10
   1b994:	str	r1, [r0, #4]
   1b998:	uxtb	r1, r5
   1b99c:	cmp	r1, #5
   1b9a0:	bne	1b9b4 <__assert_fail@plt+0xa4a0>
   1b9a4:	ldr	r2, [r4, #92]	; 0x5c
   1b9a8:	mov	r0, #1048576	; 0x100000
   1b9ac:	cmp	r2, #1
   1b9b0:	bgt	1b9c4 <__assert_fail@plt+0xa4b0>
   1b9b4:	sub	r0, r1, #6
   1b9b8:	clz	r0, r0
   1b9bc:	lsr	r0, r0, #5
   1b9c0:	lsl	r0, r0, #20
   1b9c4:	ldr	r1, [r4]
   1b9c8:	ldr	r2, [r4, #8]
   1b9cc:	add	r1, r1, r2, lsl #3
   1b9d0:	ldr	r2, [r1, #4]
   1b9d4:	bic	r2, r2, #1048576	; 0x100000
   1b9d8:	orr	r0, r2, r0
   1b9dc:	mvn	r2, #0
   1b9e0:	str	r0, [r1, #4]
   1b9e4:	ldr	r0, [r4, #8]
   1b9e8:	ldr	r1, [r4, #12]
   1b9ec:	str	r2, [r1, r0, lsl #2]
   1b9f0:	mov	r2, #0
   1b9f4:	ldr	r0, [r4, #8]
   1b9f8:	ldr	r1, [r4, #20]
   1b9fc:	add	r0, r0, r0, lsl #1
   1ba00:	str	r2, [r1, r0, lsl #2]!
   1ba04:	str	r2, [r1, #4]
   1ba08:	str	r2, [r1, #8]
   1ba0c:	ldr	r0, [r4, #8]
   1ba10:	ldr	r1, [r4, #24]
   1ba14:	add	r0, r0, r0, lsl #1
   1ba18:	str	r2, [r1, r0, lsl #2]!
   1ba1c:	str	r2, [r1, #4]
   1ba20:	str	r2, [r1, #8]
   1ba24:	ldr	r6, [r4, #8]
   1ba28:	add	r0, r6, #1
   1ba2c:	str	r0, [r4, #8]
   1ba30:	mov	r0, r6
   1ba34:	sub	sp, fp, #28
   1ba38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba3c:	movw	r0, #21845	; 0x5555
   1ba40:	lsl	r1, r7, #1
   1ba44:	mvn	r6, #0
   1ba48:	movt	r0, #5461	; 0x1555
   1ba4c:	cmp	r1, r0
   1ba50:	bhi	1ba30 <__assert_fail@plt+0xa51c>
   1ba54:	ldr	r0, [r4]
   1ba58:	str	r1, [sp, #8]
   1ba5c:	lsl	r1, r7, #4
   1ba60:	bl	22004 <__assert_fail@plt+0x10af0>
   1ba64:	cmp	r0, #0
   1ba68:	beq	1ba30 <__assert_fail@plt+0xa51c>
   1ba6c:	str	r0, [r4]
   1ba70:	lsl	r8, r7, #3
   1ba74:	ldr	r0, [r4, #12]
   1ba78:	mov	r1, r8
   1ba7c:	bl	22004 <__assert_fail@plt+0x10af0>
   1ba80:	str	r0, [sp, #4]
   1ba84:	ldr	r0, [r4, #16]
   1ba88:	mov	r1, r8
   1ba8c:	bl	22004 <__assert_fail@plt+0x10af0>
   1ba90:	mov	r2, r0
   1ba94:	add	r1, r7, r7, lsl #1
   1ba98:	ldr	r0, [r4, #20]
   1ba9c:	mov	r7, r2
   1baa0:	lsl	r8, r1, #3
   1baa4:	mov	r1, r8
   1baa8:	bl	22004 <__assert_fail@plt+0x10af0>
   1baac:	mov	sl, r0
   1bab0:	ldr	r0, [r4, #24]
   1bab4:	mov	r1, r8
   1bab8:	bl	22004 <__assert_fail@plt+0x10af0>
   1babc:	mov	r8, r0
   1bac0:	ldr	r0, [sp, #4]
   1bac4:	cmp	r0, #0
   1bac8:	beq	1bad8 <__assert_fail@plt+0xa5c4>
   1bacc:	cmp	r7, #0
   1bad0:	cmpne	sl, #0
   1bad4:	bne	1baf8 <__assert_fail@plt+0xa5e4>
   1bad8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1badc:	mov	r0, r7
   1bae0:	bl	22190 <__assert_fail@plt+0x10c7c>
   1bae4:	mov	r0, sl
   1bae8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1baec:	mov	r0, r8
   1baf0:	bl	22190 <__assert_fail@plt+0x10c7c>
   1baf4:	b	1ba30 <__assert_fail@plt+0xa51c>
   1baf8:	cmp	r8, #0
   1bafc:	beq	1bad8 <__assert_fail@plt+0xa5c4>
   1bb00:	add	r1, r4, #12
   1bb04:	stm	r1, {r0, r7, sl}
   1bb08:	str	r8, [r4, #24]
   1bb0c:	ldr	r0, [sp, #8]
   1bb10:	str	r0, [r4, #4]
   1bb14:	ldr	r0, [r4, #8]
   1bb18:	b	1b974 <__assert_fail@plt+0xa460>
   1bb1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb20:	add	fp, sp, #28
   1bb24:	sub	sp, sp, #44	; 0x2c
   1bb28:	mov	r8, r0
   1bb2c:	ldr	r0, [r1, #20]
   1bb30:	add	r4, r2, r2, lsl #1
   1bb34:	mov	r5, r1
   1bb38:	mov	r1, #0
   1bb3c:	mov	r9, r3
   1bb40:	mov	r6, r2
   1bb44:	add	r0, r0, r4, lsl #2
   1bb48:	ldr	r0, [r0, #4]
   1bb4c:	str	r1, [sp, #36]	; 0x24
   1bb50:	add	r0, r0, #1
   1bb54:	str	r0, [sp, #32]
   1bb58:	lsl	r0, r0, #2
   1bb5c:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1bb60:	cmp	r0, #0
   1bb64:	str	r0, [sp, #40]	; 0x28
   1bb68:	beq	1bd30 <__assert_fail@plt+0xa81c>
   1bb6c:	mov	r1, #1
   1bb70:	str	r6, [r0]
   1bb74:	str	r1, [sp, #36]	; 0x24
   1bb78:	mvn	r1, #0
   1bb7c:	ldr	r0, [r5, #24]
   1bb80:	add	r0, r0, r4, lsl #2
   1bb84:	str	r1, [r0, #4]
   1bb88:	ldr	r2, [r5]
   1bb8c:	add	r0, r2, r6, lsl #3
   1bb90:	ldr	r0, [r0, #4]
   1bb94:	ubfx	r1, r0, #8, #10
   1bb98:	cmp	r1, #0
   1bb9c:	beq	1bbf8 <__assert_fail@plt+0xa6e4>
   1bba0:	ldr	r3, [r5, #20]
   1bba4:	add	r3, r3, r4, lsl #2
   1bba8:	ldr	r7, [r3, #4]
   1bbac:	cmp	r7, #0
   1bbb0:	beq	1bbf8 <__assert_fail@plt+0xa6e4>
   1bbb4:	ldr	r3, [r3, #8]
   1bbb8:	ldr	r3, [r3]
   1bbbc:	add	r2, r2, r3, lsl #3
   1bbc0:	ldrb	r2, [r2, #6]
   1bbc4:	tst	r2, #4
   1bbc8:	bne	1bbf8 <__assert_fail@plt+0xa6e4>
   1bbcc:	str	r1, [sp]
   1bbd0:	mov	r0, r5
   1bbd4:	mov	r1, r6
   1bbd8:	mov	r2, r6
   1bbdc:	mov	r3, r6
   1bbe0:	bl	1bd38 <__assert_fail@plt+0xa824>
   1bbe4:	cmp	r0, #0
   1bbe8:	bne	1bd28 <__assert_fail@plt+0xa814>
   1bbec:	ldr	r0, [r5]
   1bbf0:	add	r0, r0, r6, lsl #3
   1bbf4:	ldr	r0, [r0, #4]
   1bbf8:	tst	r0, #8
   1bbfc:	beq	1bcfc <__assert_fail@plt+0xa7e8>
   1bc00:	ldr	r0, [r5, #20]
   1bc04:	add	r1, r0, r4, lsl #2
   1bc08:	ldr	r1, [r1, #4]
   1bc0c:	cmp	r1, #1
   1bc10:	blt	1bcfc <__assert_fail@plt+0xa7e8>
   1bc14:	str	r8, [sp, #12]
   1bc18:	mov	r8, #0
   1bc1c:	add	r7, sp, #16
   1bc20:	add	sl, sp, #32
   1bc24:	mov	r6, #0
   1bc28:	str	r9, [sp, #8]
   1bc2c:	add	r0, r0, r4, lsl #2
   1bc30:	ldr	r0, [r0, #8]
   1bc34:	ldr	r2, [r0, r6, lsl #2]
   1bc38:	ldr	r0, [r5, #24]
   1bc3c:	add	r9, r2, r2, lsl #1
   1bc40:	add	r0, r0, r9, lsl #2
   1bc44:	ldr	r1, [r0, #4]
   1bc48:	cmn	r1, #1
   1bc4c:	beq	1bcb4 <__assert_fail@plt+0xa7a0>
   1bc50:	cmp	r1, #0
   1bc54:	bne	1bc74 <__assert_fail@plt+0xa760>
   1bc58:	mov	r0, r7
   1bc5c:	mov	r1, r5
   1bc60:	mov	r3, #0
   1bc64:	bl	1bb1c <__assert_fail@plt+0xa608>
   1bc68:	cmp	r0, #0
   1bc6c:	beq	1bc84 <__assert_fail@plt+0xa770>
   1bc70:	b	1bd28 <__assert_fail@plt+0xa814>
   1bc74:	vldr	d16, [r0]
   1bc78:	ldr	r0, [r0, #8]
   1bc7c:	str	r0, [sp, #24]
   1bc80:	vstr	d16, [sp, #16]
   1bc84:	mov	r0, sl
   1bc88:	mov	r1, r7
   1bc8c:	bl	1bff8 <__assert_fail@plt+0xaae4>
   1bc90:	cmp	r0, #0
   1bc94:	bne	1bd28 <__assert_fail@plt+0xa814>
   1bc98:	ldr	r0, [r5, #24]
   1bc9c:	add	r0, r0, r9, lsl #2
   1bca0:	ldr	r0, [r0, #4]
   1bca4:	cmp	r0, #0
   1bca8:	bne	1bcb8 <__assert_fail@plt+0xa7a4>
   1bcac:	ldr	r0, [sp, #24]
   1bcb0:	bl	22190 <__assert_fail@plt+0x10c7c>
   1bcb4:	mov	r8, #1
   1bcb8:	ldr	r0, [r5, #20]
   1bcbc:	add	r6, r6, #1
   1bcc0:	add	r1, r0, r4, lsl #2
   1bcc4:	ldr	r1, [r1, #4]
   1bcc8:	cmp	r6, r1
   1bccc:	blt	1bc2c <__assert_fail@plt+0xa718>
   1bcd0:	tst	r8, #1
   1bcd4:	ldr	r8, [sp, #12]
   1bcd8:	ldr	r0, [sp, #8]
   1bcdc:	beq	1bcfc <__assert_fail@plt+0xa7e8>
   1bce0:	cmp	r0, #0
   1bce4:	bne	1bcfc <__assert_fail@plt+0xa7e8>
   1bce8:	ldr	r0, [r5, #24]
   1bcec:	mov	r1, #0
   1bcf0:	add	r0, r0, r4, lsl #2
   1bcf4:	str	r1, [r0, #4]
   1bcf8:	b	1bd14 <__assert_fail@plt+0xa800>
   1bcfc:	ldr	r0, [r5, #24]
   1bd00:	vldr	d16, [sp, #32]
   1bd04:	ldr	r1, [sp, #40]	; 0x28
   1bd08:	add	r0, r0, r4, lsl #2
   1bd0c:	str	r1, [r0, #8]
   1bd10:	vstr	d16, [r0]
   1bd14:	ldr	r0, [sp, #40]	; 0x28
   1bd18:	vldr	d16, [sp, #32]
   1bd1c:	str	r0, [r8, #8]
   1bd20:	mov	r0, #0
   1bd24:	vstr	d16, [r8]
   1bd28:	sub	sp, fp, #28
   1bd2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd30:	mov	r0, #12
   1bd34:	b	1bd28 <__assert_fail@plt+0xa814>
   1bd38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd3c:	add	fp, sp, #28
   1bd40:	sub	sp, sp, #20
   1bd44:	mov	sl, r0
   1bd48:	ldr	r0, [fp, #8]
   1bd4c:	mov	r8, r2
   1bd50:	mov	r5, r1
   1bd54:	str	r3, [sp, #8]
   1bd58:	str	r0, [sp, #16]
   1bd5c:	ldr	r2, [sl]
   1bd60:	add	r1, r2, r5, lsl #3
   1bd64:	ldrb	r0, [r1, #4]!
   1bd68:	cmp	r0, #4
   1bd6c:	bne	1bddc <__assert_fail@plt+0xa8c8>
   1bd70:	ldr	r0, [sl, #12]
   1bd74:	ldr	r1, [sl, #20]
   1bd78:	add	r6, r8, r8, lsl #1
   1bd7c:	ldr	r2, [sp, #16]
   1bd80:	ldr	r7, [r0, r5, lsl #2]
   1bd84:	add	r0, r1, r6, lsl #2
   1bd88:	mov	r1, #0
   1bd8c:	str	r1, [r0, #4]
   1bd90:	mov	r0, sl
   1bd94:	mov	r1, r7
   1bd98:	bl	1c17c <__assert_fail@plt+0xac68>
   1bd9c:	mov	r9, #12
   1bda0:	cmn	r0, #1
   1bda4:	beq	1bfc4 <__assert_fail@plt+0xaab0>
   1bda8:	mov	r4, r0
   1bdac:	ldr	r0, [sl, #12]
   1bdb0:	ldr	r1, [r0, r5, lsl #2]
   1bdb4:	str	r1, [r0, r8, lsl #2]
   1bdb8:	mov	r1, r4
   1bdbc:	ldr	r0, [sl, #20]
   1bdc0:	add	r0, r0, r6, lsl #2
   1bdc4:	bl	1c204 <__assert_fail@plt+0xacf0>
   1bdc8:	cmp	r0, #0
   1bdcc:	mov	r5, r7
   1bdd0:	mov	r8, r4
   1bdd4:	bne	1bd5c <__assert_fail@plt+0xa848>
   1bdd8:	b	1bfc4 <__assert_fail@plt+0xaab0>
   1bddc:	ldr	r0, [sl, #20]
   1bde0:	add	ip, r5, r5, lsl #1
   1bde4:	add	r7, r0, ip, lsl #2
   1bde8:	ldr	r3, [r7, #4]
   1bdec:	cmp	r3, #0
   1bdf0:	beq	1bfac <__assert_fail@plt+0xaa98>
   1bdf4:	ldr	r7, [r7, #8]
   1bdf8:	add	r6, r8, r8, lsl #1
   1bdfc:	cmp	r3, #1
   1be00:	add	r0, r0, r6, lsl #2
   1be04:	str	r6, [sp, #12]
   1be08:	mov	r6, #0
   1be0c:	ldr	r7, [r7]
   1be10:	str	r6, [r0, #4]
   1be14:	beq	1bf44 <__assert_fail@plt+0xaa30>
   1be18:	ldr	r1, [sl, #8]
   1be1c:	ldr	r4, [sp, #16]
   1be20:	sub	r3, r1, #1
   1be24:	cmp	r3, #1
   1be28:	blt	1be78 <__assert_fail@plt+0xa964>
   1be2c:	add	r3, r2, r3, lsl #3
   1be30:	ldr	r6, [r3, #4]
   1be34:	ands	r3, r6, #262144	; 0x40000
   1be38:	beq	1be78 <__assert_fail@plt+0xa964>
   1be3c:	ldr	r3, [sl, #16]
   1be40:	sub	r2, r2, #12
   1be44:	sub	r3, r3, #4
   1be48:	ldr	r5, [r3, r1, lsl #2]
   1be4c:	cmp	r5, r7
   1be50:	ubfxeq	r6, r6, #8, #10
   1be54:	cmpeq	r6, r4
   1be58:	beq	1bf28 <__assert_fail@plt+0xaa14>
   1be5c:	sub	r6, r1, #2
   1be60:	cmp	r6, #1
   1be64:	blt	1be78 <__assert_fail@plt+0xa964>
   1be68:	ldr	r6, [r2, r1, lsl #3]
   1be6c:	sub	r1, r1, #1
   1be70:	ands	r5, r6, #262144	; 0x40000
   1be74:	bne	1be48 <__assert_fail@plt+0xa934>
   1be78:	mov	r0, sl
   1be7c:	mov	r1, r7
   1be80:	mov	r2, r4
   1be84:	mov	r8, ip
   1be88:	bl	1c17c <__assert_fail@plt+0xac68>
   1be8c:	mov	r9, #12
   1be90:	cmn	r0, #1
   1be94:	beq	1bfc4 <__assert_fail@plt+0xaab0>
   1be98:	mov	r5, r0
   1be9c:	ldr	r0, [sl, #20]
   1bea0:	ldr	r6, [sp, #12]
   1bea4:	mov	r1, r5
   1bea8:	add	r0, r0, r6, lsl #2
   1beac:	bl	1c204 <__assert_fail@plt+0xacf0>
   1beb0:	cmp	r0, #0
   1beb4:	beq	1bfc4 <__assert_fail@plt+0xaab0>
   1beb8:	ldr	r4, [sp, #16]
   1bebc:	ldr	r3, [sp, #8]
   1bec0:	mov	r0, sl
   1bec4:	mov	r1, r7
   1bec8:	mov	r2, r5
   1becc:	str	r4, [sp]
   1bed0:	bl	1bd38 <__assert_fail@plt+0xa824>
   1bed4:	cmp	r0, #0
   1bed8:	bne	1bfc0 <__assert_fail@plt+0xaaac>
   1bedc:	ldr	r0, [sl, #20]
   1bee0:	mov	r2, r4
   1bee4:	add	r0, r0, r8, lsl #2
   1bee8:	ldr	r0, [r0, #8]
   1beec:	ldr	r5, [r0, #4]
   1bef0:	mov	r0, sl
   1bef4:	mov	r1, r5
   1bef8:	bl	1c17c <__assert_fail@plt+0xac68>
   1befc:	mov	r9, #12
   1bf00:	cmn	r0, #1
   1bf04:	beq	1bfc4 <__assert_fail@plt+0xaab0>
   1bf08:	mov	r8, r0
   1bf0c:	ldr	r0, [sl, #20]
   1bf10:	mov	r1, r8
   1bf14:	add	r0, r0, r6, lsl #2
   1bf18:	bl	1c204 <__assert_fail@plt+0xacf0>
   1bf1c:	cmp	r0, #0
   1bf20:	bne	1bd5c <__assert_fail@plt+0xa848>
   1bf24:	b	1bfc4 <__assert_fail@plt+0xaab0>
   1bf28:	sub	r1, r1, #1
   1bf2c:	mov	r8, ip
   1bf30:	bl	1c204 <__assert_fail@plt+0xacf0>
   1bf34:	ldr	r6, [sp, #12]
   1bf38:	cmp	r0, #0
   1bf3c:	bne	1bedc <__assert_fail@plt+0xa9c8>
   1bf40:	b	1bff0 <__assert_fail@plt+0xaadc>
   1bf44:	ldr	r2, [sp, #8]
   1bf48:	cmp	r5, r2
   1bf4c:	bne	1bf58 <__assert_fail@plt+0xaa44>
   1bf50:	cmp	r8, r5
   1bf54:	bne	1bfd0 <__assert_fail@plt+0xaabc>
   1bf58:	ldr	r0, [r1]
   1bf5c:	mov	r1, r7
   1bf60:	ubfx	r0, r0, #8, #10
   1bf64:	ldr	r2, [sp, #16]
   1bf68:	orr	r2, r0, r2
   1bf6c:	mov	r0, sl
   1bf70:	str	r2, [sp, #16]
   1bf74:	bl	1c17c <__assert_fail@plt+0xac68>
   1bf78:	mov	r9, #12
   1bf7c:	cmn	r0, #1
   1bf80:	beq	1bfc4 <__assert_fail@plt+0xaab0>
   1bf84:	mov	r8, r0
   1bf88:	ldr	r0, [sl, #20]
   1bf8c:	ldr	r1, [sp, #12]
   1bf90:	add	r0, r0, r1, lsl #2
   1bf94:	mov	r1, r8
   1bf98:	bl	1c204 <__assert_fail@plt+0xacf0>
   1bf9c:	cmp	r0, #0
   1bfa0:	mov	r5, r7
   1bfa4:	bne	1bd5c <__assert_fail@plt+0xa848>
   1bfa8:	b	1bfc4 <__assert_fail@plt+0xaab0>
   1bfac:	ldr	r0, [sl, #12]
   1bfb0:	ldr	r1, [r0, r5, lsl #2]
   1bfb4:	str	r1, [r0, r8, lsl #2]
   1bfb8:	mov	r0, #0
   1bfbc:	b	1bfc8 <__assert_fail@plt+0xaab4>
   1bfc0:	mov	r9, r0
   1bfc4:	mov	r0, r9
   1bfc8:	sub	sp, fp, #28
   1bfcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfd0:	mov	r1, r7
   1bfd4:	bl	1c204 <__assert_fail@plt+0xacf0>
   1bfd8:	mov	r1, r0
   1bfdc:	mov	r9, #12
   1bfe0:	mov	r0, #0
   1bfe4:	cmp	r1, #0
   1bfe8:	moveq	r0, r9
   1bfec:	b	1bfc8 <__assert_fail@plt+0xaab4>
   1bff0:	mov	r9, #12
   1bff4:	b	1bfc4 <__assert_fail@plt+0xaab0>
   1bff8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bffc:	add	fp, sp, #24
   1c000:	mov	r8, #0
   1c004:	cmp	r1, #0
   1c008:	beq	1c154 <__assert_fail@plt+0xac40>
   1c00c:	mov	r6, r1
   1c010:	ldr	r1, [r1, #4]
   1c014:	cmp	r1, #0
   1c018:	beq	1c154 <__assert_fail@plt+0xac40>
   1c01c:	mov	r9, r0
   1c020:	ldr	r2, [r0]
   1c024:	ldr	r0, [r0, #4]
   1c028:	add	r3, r0, r1, lsl #1
   1c02c:	cmp	r2, r3
   1c030:	bge	1c05c <__assert_fail@plt+0xab48>
   1c034:	ldr	r0, [r9, #8]
   1c038:	add	r7, r2, r1
   1c03c:	lsl	r1, r7, #3
   1c040:	bl	22004 <__assert_fail@plt+0x10af0>
   1c044:	cmp	r0, #0
   1c048:	beq	1c174 <__assert_fail@plt+0xac60>
   1c04c:	str	r0, [r9, #8]
   1c050:	lsl	r0, r7, #1
   1c054:	str	r0, [r9]
   1c058:	ldr	r0, [r9, #4]
   1c05c:	cmp	r0, #0
   1c060:	beq	1c15c <__assert_fail@plt+0xac48>
   1c064:	ldr	r2, [r6, #4]
   1c068:	sub	r1, r0, #1
   1c06c:	add	r7, r0, r2, lsl #1
   1c070:	sub	r0, r2, #1
   1c074:	orrs	r2, r0, r1
   1c078:	bmi	1c0bc <__assert_fail@plt+0xaba8>
   1c07c:	ldr	r2, [r6, #8]
   1c080:	ldr	r3, [r9, #8]
   1c084:	ldr	r4, [r2, r0, lsl #2]
   1c088:	ldr	r5, [r3, r1, lsl #2]
   1c08c:	cmp	r5, r4
   1c090:	bne	1c0a0 <__assert_fail@plt+0xab8c>
   1c094:	sub	r1, r1, #1
   1c098:	sub	r0, r0, #1
   1c09c:	b	1c0b0 <__assert_fail@plt+0xab9c>
   1c0a0:	sublt	r7, r7, #1
   1c0a4:	subge	r1, r1, #1
   1c0a8:	sublt	r0, r0, #1
   1c0ac:	strlt	r4, [r3, r7, lsl #2]
   1c0b0:	orr	r5, r0, r1
   1c0b4:	cmn	r5, #1
   1c0b8:	bgt	1c084 <__assert_fail@plt+0xab70>
   1c0bc:	cmp	r0, #0
   1c0c0:	bmi	1c0e0 <__assert_fail@plt+0xabcc>
   1c0c4:	add	r2, r0, #1
   1c0c8:	ldr	r0, [r9, #8]
   1c0cc:	ldr	r1, [r6, #8]
   1c0d0:	sub	r7, r7, r2
   1c0d4:	lsl	r2, r2, #2
   1c0d8:	add	r0, r0, r7, lsl #2
   1c0dc:	bl	112a4 <memcpy@plt>
   1c0e0:	ldr	r0, [r9, #4]
   1c0e4:	ldr	r2, [r6, #4]
   1c0e8:	sub	r1, r0, #1
   1c0ec:	add	r3, r1, r2, lsl #1
   1c0f0:	sub	r2, r3, r7
   1c0f4:	adds	r2, r2, #1
   1c0f8:	bcs	1c154 <__assert_fail@plt+0xac40>
   1c0fc:	add	r0, r2, r0
   1c100:	str	r0, [r9, #4]
   1c104:	ldr	r0, [r9, #8]
   1c108:	ldr	r6, [r0, r1, lsl #2]
   1c10c:	ldr	r5, [r0, r3, lsl #2]
   1c110:	cmp	r5, r6
   1c114:	ble	1c130 <__assert_fail@plt+0xac1c>
   1c118:	add	r6, r2, r1
   1c11c:	subs	r2, r2, #1
   1c120:	sub	r3, r3, #1
   1c124:	str	r5, [r0, r6, lsl #2]
   1c128:	bne	1c108 <__assert_fail@plt+0xabf4>
   1c12c:	b	1c154 <__assert_fail@plt+0xac40>
   1c130:	add	r5, r2, r1
   1c134:	cmp	r1, #0
   1c138:	str	r6, [r0, r5, lsl #2]
   1c13c:	sub	r6, r1, #1
   1c140:	mov	r1, r6
   1c144:	bgt	1c108 <__assert_fail@plt+0xabf4>
   1c148:	add	r1, r0, r7, lsl #2
   1c14c:	lsl	r2, r2, #2
   1c150:	bl	112a4 <memcpy@plt>
   1c154:	mov	r0, r8
   1c158:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c15c:	ldr	r0, [r6, #4]
   1c160:	str	r0, [r9, #4]
   1c164:	ldr	r0, [r9, #8]
   1c168:	ldr	r2, [r6, #4]
   1c16c:	ldr	r1, [r6, #8]
   1c170:	b	1c14c <__assert_fail@plt+0xac38>
   1c174:	mov	r8, #12
   1c178:	b	1c154 <__assert_fail@plt+0xac40>
   1c17c:	push	{r4, r5, r6, sl, fp, lr}
   1c180:	add	fp, sp, #16
   1c184:	mov	r5, r0
   1c188:	ldr	r0, [r0]
   1c18c:	mov	r4, r1
   1c190:	mov	r6, r2
   1c194:	ldr	r1, [r0, r1, lsl #3]!
   1c198:	ldr	r2, [r0, #4]
   1c19c:	mov	r0, r5
   1c1a0:	bl	1b94c <__assert_fail@plt+0xa438>
   1c1a4:	cmn	r0, #1
   1c1a8:	ldrne	r1, [r5]
   1c1ac:	movwne	r3, #65280	; 0xff00
   1c1b0:	movtne	r3, #3
   1c1b4:	addne	r1, r1, r0, lsl #3
   1c1b8:	ldrne	r2, [r1, #4]
   1c1bc:	bfine	r2, r6, #8, #10
   1c1c0:	strne	r2, [r1, #4]
   1c1c4:	ldrne	r1, [r5]
   1c1c8:	addne	r2, r1, r4, lsl #3
   1c1cc:	addne	r1, r1, r0, lsl #3
   1c1d0:	ldrne	r2, [r2, #4]
   1c1d4:	andne	r2, r2, r3
   1c1d8:	ldrne	r3, [r1, #4]
   1c1dc:	orrne	r2, r2, r3
   1c1e0:	strne	r2, [r1, #4]
   1c1e4:	ldrne	r1, [r5]
   1c1e8:	addne	r1, r1, r0, lsl #3
   1c1ec:	ldrne	r2, [r1, #4]
   1c1f0:	orrne	r2, r2, #262144	; 0x40000
   1c1f4:	strne	r2, [r1, #4]
   1c1f8:	ldrne	r1, [r5, #16]
   1c1fc:	strne	r4, [r1, r0, lsl #2]
   1c200:	pop	{r4, r5, r6, sl, fp, pc}
   1c204:	push	{r4, r5, r6, sl, fp, lr}
   1c208:	add	fp, sp, #16
   1c20c:	ldr	r2, [r0]
   1c210:	mov	r5, r1
   1c214:	mov	r4, r0
   1c218:	cmp	r2, #0
   1c21c:	beq	1c248 <__assert_fail@plt+0xad34>
   1c220:	ldr	r1, [r4, #4]
   1c224:	cmp	r1, #0
   1c228:	bne	1c274 <__assert_fail@plt+0xad60>
   1c22c:	ldr	r0, [r4, #8]
   1c230:	str	r5, [r0]
   1c234:	ldr	r0, [r4, #4]
   1c238:	mov	r6, #1
   1c23c:	add	r0, r0, #1
   1c240:	str	r0, [r4, #4]
   1c244:	b	1c26c <__assert_fail@plt+0xad58>
   1c248:	mov	r6, #1
   1c24c:	mov	r0, #4
   1c250:	str	r6, [r4]
   1c254:	str	r6, [r4, #4]
   1c258:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1c25c:	cmp	r0, #0
   1c260:	str	r0, [r4, #8]
   1c264:	beq	1c2a4 <__assert_fail@plt+0xad90>
   1c268:	str	r5, [r0]
   1c26c:	mov	r0, r6
   1c270:	pop	{r4, r5, r6, sl, fp, pc}
   1c274:	cmp	r2, r1
   1c278:	bne	1c2b4 <__assert_fail@plt+0xada0>
   1c27c:	lsl	r0, r2, #1
   1c280:	lsl	r1, r2, #3
   1c284:	str	r0, [r4]
   1c288:	ldr	r0, [r4, #8]
   1c28c:	bl	22004 <__assert_fail@plt+0x10af0>
   1c290:	cmp	r0, #0
   1c294:	beq	1c32c <__assert_fail@plt+0xae18>
   1c298:	str	r0, [r4, #8]
   1c29c:	ldr	r1, [r4, #4]
   1c2a0:	b	1c2b8 <__assert_fail@plt+0xada4>
   1c2a4:	mov	r6, #0
   1c2a8:	str	r6, [r4]
   1c2ac:	str	r6, [r4, #4]
   1c2b0:	b	1c26c <__assert_fail@plt+0xad58>
   1c2b4:	ldr	r0, [r4, #8]
   1c2b8:	ldr	r2, [r0]
   1c2bc:	cmp	r2, r5
   1c2c0:	ble	1c2f4 <__assert_fail@plt+0xade0>
   1c2c4:	cmp	r1, #1
   1c2c8:	blt	1c324 <__assert_fail@plt+0xae10>
   1c2cc:	add	r3, r0, r1, lsl #2
   1c2d0:	mov	r2, r3
   1c2d4:	ldr	r6, [r2, #-4]!
   1c2d8:	sub	r1, r1, #1
   1c2dc:	cmp	r1, #0
   1c2e0:	str	r6, [r3]
   1c2e4:	mov	r3, r2
   1c2e8:	bgt	1c2d4 <__assert_fail@plt+0xadc0>
   1c2ec:	mov	r1, #0
   1c2f0:	b	1c324 <__assert_fail@plt+0xae10>
   1c2f4:	add	r2, r0, r1, lsl #2
   1c2f8:	ldr	r3, [r2, #-4]
   1c2fc:	cmp	r3, r5
   1c300:	ble	1c324 <__assert_fail@plt+0xae10>
   1c304:	sub	r1, r1, #2
   1c308:	str	r3, [r2]
   1c30c:	sub	r1, r1, #1
   1c310:	ldr	r3, [r2, #-8]
   1c314:	sub	r2, r2, #4
   1c318:	cmp	r3, r5
   1c31c:	bgt	1c308 <__assert_fail@plt+0xadf4>
   1c320:	add	r1, r1, #2
   1c324:	str	r5, [r0, r1, lsl #2]
   1c328:	b	1c234 <__assert_fail@plt+0xad20>
   1c32c:	mov	r6, #0
   1c330:	b	1c26c <__assert_fail@plt+0xad58>
   1c334:	push	{r4, r5, fp, lr}
   1c338:	add	fp, sp, #8
   1c33c:	mov	r5, r0
   1c340:	mov	r4, r1
   1c344:	ldr	r0, [r0]
   1c348:	ldr	r1, [r5, #4]
   1c34c:	cmp	r0, r1
   1c350:	bne	1c380 <__assert_fail@plt+0xae6c>
   1c354:	mov	r1, #2
   1c358:	add	r0, r1, r0, lsl #1
   1c35c:	str	r0, [r5]
   1c360:	lsl	r1, r0, #2
   1c364:	ldr	r0, [r5, #8]
   1c368:	bl	22004 <__assert_fail@plt+0x10af0>
   1c36c:	cmp	r0, #0
   1c370:	beq	1c398 <__assert_fail@plt+0xae84>
   1c374:	str	r0, [r5, #8]
   1c378:	ldr	r1, [r5, #4]
   1c37c:	b	1c384 <__assert_fail@plt+0xae70>
   1c380:	ldr	r0, [r5, #8]
   1c384:	add	r2, r1, #1
   1c388:	str	r2, [r5, #4]
   1c38c:	str	r4, [r0, r1, lsl #2]
   1c390:	mov	r0, #1
   1c394:	pop	{r4, r5, fp, pc}
   1c398:	mov	r0, #0
   1c39c:	pop	{r4, r5, fp, pc}
   1c3a0:	push	{r4, r5, fp, lr}
   1c3a4:	add	fp, sp, #8
   1c3a8:	mov	r4, r0
   1c3ac:	ldr	r0, [r1, #4]
   1c3b0:	mov	r5, r1
   1c3b4:	str	r0, [r4, #4]
   1c3b8:	ldr	r1, [r1, #4]
   1c3bc:	cmp	r1, #1
   1c3c0:	blt	1c3f4 <__assert_fail@plt+0xaee0>
   1c3c4:	str	r0, [r4]
   1c3c8:	lsl	r0, r0, #2
   1c3cc:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1c3d0:	cmp	r0, #0
   1c3d4:	str	r0, [r4, #8]
   1c3d8:	beq	1c408 <__assert_fail@plt+0xaef4>
   1c3dc:	ldr	r2, [r5, #4]
   1c3e0:	ldr	r1, [r5, #8]
   1c3e4:	lsl	r2, r2, #2
   1c3e8:	bl	112a4 <memcpy@plt>
   1c3ec:	mov	r0, #0
   1c3f0:	pop	{r4, r5, fp, pc}
   1c3f4:	mov	r0, #0
   1c3f8:	str	r0, [r4]
   1c3fc:	str	r0, [r4, #4]
   1c400:	str	r0, [r4, #8]
   1c404:	pop	{r4, r5, fp, pc}
   1c408:	mov	r0, #0
   1c40c:	str	r0, [r4]
   1c410:	str	r0, [r4, #4]
   1c414:	mov	r0, #12
   1c418:	pop	{r4, r5, fp, pc}
   1c41c:	push	{r4, r5, r6, sl, fp, lr}
   1c420:	add	fp, sp, #16
   1c424:	ldr	r2, [r0, #4]
   1c428:	cmp	r2, #1
   1c42c:	blt	1c47c <__assert_fail@plt+0xaf68>
   1c430:	ldr	ip, [r0, #8]
   1c434:	subs	r2, r2, #1
   1c438:	mov	r0, #0
   1c43c:	mov	r3, #0
   1c440:	beq	1c46c <__assert_fail@plt+0xaf58>
   1c444:	mov	r3, #0
   1c448:	mov	lr, #1
   1c44c:	add	r4, r2, r3
   1c450:	lsr	r5, r4, #1
   1c454:	ldr	r6, [ip, r5, lsl #2]
   1c458:	cmp	r6, r1
   1c45c:	addlt	r3, lr, r4, lsr #1
   1c460:	movge	r2, r5
   1c464:	cmp	r3, r2
   1c468:	bcc	1c44c <__assert_fail@plt+0xaf38>
   1c46c:	ldr	r2, [ip, r3, lsl #2]
   1c470:	cmp	r2, r1
   1c474:	addeq	r0, r3, #1
   1c478:	pop	{r4, r5, r6, sl, fp, pc}
   1c47c:	mov	r0, #0
   1c480:	pop	{r4, r5, r6, sl, fp, pc}
   1c484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c488:	add	fp, sp, #28
   1c48c:	sub	sp, sp, #20
   1c490:	ldr	lr, [r2, #4]
   1c494:	cmp	lr, #0
   1c498:	beq	1c79c <__assert_fail@plt+0xb288>
   1c49c:	mov	r8, r3
   1c4a0:	mov	sl, r2
   1c4a4:	add	r7, lr, r3
   1c4a8:	cmp	lr, #1
   1c4ac:	str	r0, [sp, #4]
   1c4b0:	blt	1c4cc <__assert_fail@plt+0xafb8>
   1c4b4:	ldr	r3, [sl, #8]
   1c4b8:	mov	r2, lr
   1c4bc:	ldr	r0, [r3], #4
   1c4c0:	subs	r2, r2, #1
   1c4c4:	add	r7, r0, r7
   1c4c8:	bne	1c4bc <__assert_fail@plt+0xafa8>
   1c4cc:	ldr	r0, [r1, #32]
   1c4d0:	str	r1, [sp, #12]
   1c4d4:	ldr	r1, [r1, #68]	; 0x44
   1c4d8:	and	r1, r1, r7
   1c4dc:	add	r2, r1, r1, lsl #1
   1c4e0:	ldr	r1, [r0, r2, lsl #2]
   1c4e4:	cmp	r1, #1
   1c4e8:	blt	1c578 <__assert_fail@plt+0xb064>
   1c4ec:	add	r0, r0, r2, lsl #2
   1c4f0:	sub	ip, lr, #1
   1c4f4:	mov	r3, #0
   1c4f8:	ldr	r9, [r0, #8]
   1c4fc:	ldr	r4, [r9, r3, lsl #2]
   1c500:	ldr	r0, [r4]
   1c504:	cmp	r0, r7
   1c508:	bne	1c52c <__assert_fail@plt+0xb018>
   1c50c:	ldrb	r0, [r4, #52]	; 0x34
   1c510:	and	r0, r0, #15
   1c514:	cmp	r0, r8
   1c518:	bne	1c52c <__assert_fail@plt+0xb018>
   1c51c:	cmp	sl, #0
   1c520:	ldrne	r5, [r4, #40]	; 0x28
   1c524:	cmpne	r5, #0
   1c528:	bne	1c53c <__assert_fail@plt+0xb028>
   1c52c:	add	r3, r3, #1
   1c530:	cmp	r3, r1
   1c534:	blt	1c4fc <__assert_fail@plt+0xafe8>
   1c538:	b	1c578 <__assert_fail@plt+0xb064>
   1c53c:	ldr	r0, [r5, #4]
   1c540:	cmp	r0, lr
   1c544:	bne	1c52c <__assert_fail@plt+0xb018>
   1c548:	mov	r0, ip
   1c54c:	add	r6, r0, #1
   1c550:	cmp	r6, #1
   1c554:	blt	1c7a4 <__assert_fail@plt+0xb290>
   1c558:	ldr	r6, [sl, #8]
   1c55c:	ldr	r2, [r5, #8]
   1c560:	ldr	r6, [r6, r0, lsl #2]
   1c564:	ldr	r2, [r2, r0, lsl #2]
   1c568:	sub	r0, r0, #1
   1c56c:	cmp	r2, r6
   1c570:	beq	1c54c <__assert_fail@plt+0xb038>
   1c574:	b	1c52c <__assert_fail@plt+0xb018>
   1c578:	mov	r0, #56	; 0x38
   1c57c:	mov	r1, #1
   1c580:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1c584:	cmp	r0, #0
   1c588:	beq	1c788 <__assert_fail@plt+0xb274>
   1c58c:	add	r5, r0, #4
   1c590:	mov	r4, r0
   1c594:	mov	r1, sl
   1c598:	mov	r0, r5
   1c59c:	bl	1c3a0 <__assert_fail@plt+0xae8c>
   1c5a0:	cmp	r0, #0
   1c5a4:	bne	1c7b0 <__assert_fail@plt+0xb29c>
   1c5a8:	str	r5, [r4, #40]	; 0x28
   1c5ac:	and	r0, r8, #15
   1c5b0:	ldr	r6, [sp, #12]
   1c5b4:	ldrb	r1, [r4, #52]	; 0x34
   1c5b8:	and	r1, r1, #240	; 0xf0
   1c5bc:	orr	r0, r1, r0
   1c5c0:	strb	r0, [r4, #52]	; 0x34
   1c5c4:	ldr	r0, [sl, #4]
   1c5c8:	cmp	r0, #1
   1c5cc:	blt	1c768 <__assert_fail@plt+0xb254>
   1c5d0:	movw	r9, #65280	; 0xff00
   1c5d4:	and	r0, r8, #4
   1c5d8:	mov	ip, r5
   1c5dc:	and	lr, r8, #1
   1c5e0:	movt	r9, #3
   1c5e4:	str	r0, [sp]
   1c5e8:	and	r0, r8, #2
   1c5ec:	mov	r8, #0
   1c5f0:	str	r0, [sp, #8]
   1c5f4:	mov	r0, #0
   1c5f8:	add	r3, r9, #255	; 0xff
   1c5fc:	str	r3, [sp, #16]
   1c600:	ldr	r1, [sl, #8]
   1c604:	ldr	r2, [r6]
   1c608:	ldr	r1, [r1, r8, lsl #2]
   1c60c:	add	r1, r2, r1, lsl #3
   1c610:	ldr	r5, [r1, #4]
   1c614:	and	r1, r5, r3
   1c618:	cmp	r1, #1
   1c61c:	beq	1c730 <__assert_fail@plt+0xb21c>
   1c620:	ldrb	r3, [r4, #52]	; 0x34
   1c624:	mov	r2, #32
   1c628:	and	r1, r5, r9
   1c62c:	and	r2, r2, r5, lsr #15
   1c630:	orr	r2, r3, r2
   1c634:	uxtb	r3, r5
   1c638:	strb	r2, [r4, #52]	; 0x34
   1c63c:	cmp	r3, #2
   1c640:	beq	1c654 <__assert_fail@plt+0xb140>
   1c644:	cmp	r3, #4
   1c648:	bne	1c660 <__assert_fail@plt+0xb14c>
   1c64c:	mov	r3, #64	; 0x40
   1c650:	b	1c658 <__assert_fail@plt+0xb144>
   1c654:	mov	r3, #16
   1c658:	orr	r2, r2, r3
   1c65c:	strb	r2, [r4, #52]	; 0x34
   1c660:	cmp	r1, #0
   1c664:	beq	1c72c <__assert_fail@plt+0xb218>
   1c668:	ldr	r1, [r4, #40]	; 0x28
   1c66c:	cmp	r1, ip
   1c670:	bne	1c6c4 <__assert_fail@plt+0xb1b0>
   1c674:	mov	r0, #12
   1c678:	mov	r6, lr
   1c67c:	mov	r9, ip
   1c680:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1c684:	cmp	r0, #0
   1c688:	beq	1c780 <__assert_fail@plt+0xb26c>
   1c68c:	mov	r1, sl
   1c690:	str	r0, [r4, #40]	; 0x28
   1c694:	bl	1c3a0 <__assert_fail@plt+0xae8c>
   1c698:	cmp	r0, #0
   1c69c:	bne	1c780 <__assert_fail@plt+0xb26c>
   1c6a0:	ldrb	r0, [r4, #52]	; 0x34
   1c6a4:	mov	lr, r6
   1c6a8:	ldr	r6, [sp, #12]
   1c6ac:	mov	ip, r9
   1c6b0:	movw	r9, #65280	; 0xff00
   1c6b4:	movt	r9, #3
   1c6b8:	orr	r0, r0, #128	; 0x80
   1c6bc:	strb	r0, [r4, #52]	; 0x34
   1c6c0:	mov	r0, #0
   1c6c4:	cmp	lr, #0
   1c6c8:	bne	1c6d4 <__assert_fail@plt+0xb1c0>
   1c6cc:	ands	r1, r5, #256	; 0x100
   1c6d0:	bne	1c708 <__assert_fail@plt+0xb1f4>
   1c6d4:	cmp	lr, #0
   1c6d8:	andsne	r1, r5, #512	; 0x200
   1c6dc:	bne	1c708 <__assert_fail@plt+0xb1f4>
   1c6e0:	ldr	r1, [sp, #8]
   1c6e4:	cmp	r1, #0
   1c6e8:	bne	1c6f4 <__assert_fail@plt+0xb1e0>
   1c6ec:	ands	r1, r5, #4096	; 0x1000
   1c6f0:	bne	1c708 <__assert_fail@plt+0xb1f4>
   1c6f4:	ldr	r1, [sp]
   1c6f8:	cmp	r1, #0
   1c6fc:	bne	1c72c <__assert_fail@plt+0xb218>
   1c700:	ands	r1, r5, #16384	; 0x4000
   1c704:	beq	1c72c <__assert_fail@plt+0xb218>
   1c708:	subs	r1, r8, r0
   1c70c:	bmi	1c728 <__assert_fail@plt+0xb214>
   1c710:	ldr	r2, [r4, #8]
   1c714:	cmp	r2, r1
   1c718:	subgt	r2, r2, #1
   1c71c:	strgt	r2, [r4, #8]
   1c720:	cmpgt	r2, r1
   1c724:	bgt	1c744 <__assert_fail@plt+0xb230>
   1c728:	add	r0, r0, #1
   1c72c:	ldr	r3, [sp, #16]
   1c730:	ldr	r1, [sl, #4]
   1c734:	add	r8, r8, #1
   1c738:	cmp	r8, r1
   1c73c:	blt	1c600 <__assert_fail@plt+0xb0ec>
   1c740:	b	1c768 <__assert_fail@plt+0xb254>
   1c744:	ldr	r2, [r4, #12]
   1c748:	add	r3, r2, r1, lsl #2
   1c74c:	ldr	r3, [r3, #4]
   1c750:	str	r3, [r2, r1, lsl #2]
   1c754:	add	r1, r1, #1
   1c758:	ldr	r3, [r4, #8]
   1c75c:	cmp	r1, r3
   1c760:	blt	1c748 <__assert_fail@plt+0xb234>
   1c764:	b	1c728 <__assert_fail@plt+0xb214>
   1c768:	mov	r0, r6
   1c76c:	mov	r1, r4
   1c770:	mov	r2, r7
   1c774:	bl	1c7bc <__assert_fail@plt+0xb2a8>
   1c778:	cmp	r0, #0
   1c77c:	beq	1c7a4 <__assert_fail@plt+0xb290>
   1c780:	mov	r0, r4
   1c784:	bl	178b4 <__assert_fail@plt+0x63a0>
   1c788:	ldr	r1, [sp, #4]
   1c78c:	mov	r0, #12
   1c790:	mov	r4, #0
   1c794:	str	r0, [r1]
   1c798:	b	1c7a4 <__assert_fail@plt+0xb290>
   1c79c:	mov	r4, #0
   1c7a0:	str	r4, [r0]
   1c7a4:	mov	r0, r4
   1c7a8:	sub	sp, fp, #28
   1c7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7b0:	mov	r0, r4
   1c7b4:	bl	22190 <__assert_fail@plt+0x10c7c>
   1c7b8:	b	1c788 <__assert_fail@plt+0xb274>
   1c7bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c7c0:	add	fp, sp, #24
   1c7c4:	mov	r7, r0
   1c7c8:	mov	r0, #0
   1c7cc:	str	r2, [r1]
   1c7d0:	mov	r5, r1
   1c7d4:	mov	r9, r2
   1c7d8:	mov	r4, r1
   1c7dc:	str	r0, [r1, #20]
   1c7e0:	ldr	r0, [r1, #8]
   1c7e4:	str	r0, [r5, #16]!
   1c7e8:	lsl	r0, r0, #2
   1c7ec:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1c7f0:	mov	r8, #12
   1c7f4:	cmp	r0, #0
   1c7f8:	str	r0, [r4, #24]
   1c7fc:	beq	1c88c <__assert_fail@plt+0xb378>
   1c800:	ldr	r0, [r4, #8]
   1c804:	cmp	r0, #1
   1c808:	blt	1c84c <__assert_fail@plt+0xb338>
   1c80c:	mov	r6, #0
   1c810:	ldr	r1, [r4, #12]
   1c814:	ldr	r2, [r7]
   1c818:	ldr	r1, [r1, r6, lsl #2]
   1c81c:	add	r2, r2, r1, lsl #3
   1c820:	ldrb	r2, [r2, #4]
   1c824:	tst	r2, #8
   1c828:	bne	1c840 <__assert_fail@plt+0xb32c>
   1c82c:	mov	r0, r5
   1c830:	bl	1c334 <__assert_fail@plt+0xae20>
   1c834:	cmp	r0, #0
   1c838:	beq	1c88c <__assert_fail@plt+0xb378>
   1c83c:	ldr	r0, [r4, #8]
   1c840:	add	r6, r6, #1
   1c844:	cmp	r6, r0
   1c848:	blt	1c810 <__assert_fail@plt+0xb2fc>
   1c84c:	ldr	r1, [r7, #68]	; 0x44
   1c850:	ldr	r0, [r7, #32]
   1c854:	and	r1, r1, r9
   1c858:	mov	r5, r0
   1c85c:	add	r2, r1, r1, lsl #1
   1c860:	ldr	r1, [r5, r2, lsl #2]!
   1c864:	mov	r6, r5
   1c868:	ldr	r3, [r6, #4]!
   1c86c:	cmp	r3, r1
   1c870:	ble	1c894 <__assert_fail@plt+0xb380>
   1c874:	add	r0, r0, r2, lsl #2
   1c878:	ldr	r0, [r0, #8]
   1c87c:	add	r2, r1, #1
   1c880:	mov	r8, #0
   1c884:	str	r2, [r5]
   1c888:	str	r4, [r0, r1, lsl #2]
   1c88c:	mov	r0, r8
   1c890:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c894:	add	r7, r0, r2, lsl #2
   1c898:	mov	r2, #2
   1c89c:	add	r9, r2, r1, lsl #1
   1c8a0:	ldr	r0, [r7, #8]!
   1c8a4:	lsl	r1, r9, #2
   1c8a8:	bl	22004 <__assert_fail@plt+0x10af0>
   1c8ac:	cmp	r0, #0
   1c8b0:	beq	1c88c <__assert_fail@plt+0xb378>
   1c8b4:	str	r0, [r7]
   1c8b8:	str	r9, [r6]
   1c8bc:	ldr	r1, [r5]
   1c8c0:	b	1c87c <__assert_fail@plt+0xb368>
   1c8c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8c8:	add	fp, sp, #28
   1c8cc:	sub	sp, sp, #36	; 0x24
   1c8d0:	mov	r4, r0
   1c8d4:	ldr	r0, [r0, #24]
   1c8d8:	mov	r6, r2
   1c8dc:	mov	r9, r1
   1c8e0:	cmp	r0, r1
   1c8e4:	ble	1ca4c <__assert_fail@plt+0xb538>
   1c8e8:	ldr	r0, [r4, #80]	; 0x50
   1c8ec:	mov	r1, #4
   1c8f0:	cmp	r0, #2
   1c8f4:	movge	r0, #0
   1c8f8:	strge	r0, [r4, #16]
   1c8fc:	strge	r0, [r4, #20]
   1c900:	mov	r0, #0
   1c904:	tst	r6, #1
   1c908:	strb	r0, [r4, #76]	; 0x4c
   1c90c:	str	r0, [r4, #24]
   1c910:	str	r0, [r4, #28]
   1c914:	str	r0, [r4, #32]
   1c918:	movweq	r1, #6
   1c91c:	ldr	r2, [r4, #44]	; 0x2c
   1c920:	ldr	r3, [r4, #52]	; 0x34
   1c924:	str	r2, [r4, #48]	; 0x30
   1c928:	str	r3, [r4, #56]	; 0x38
   1c92c:	str	r1, [r4, #60]	; 0x3c
   1c930:	ldrb	r1, [r4, #75]	; 0x4b
   1c934:	cmp	r1, #0
   1c938:	bne	1c944 <__assert_fail@plt+0xb430>
   1c93c:	ldr	r1, [r4]
   1c940:	str	r1, [r4, #4]
   1c944:	mov	r5, r9
   1c948:	cmp	r5, #0
   1c94c:	beq	1c9d8 <__assert_fail@plt+0xb4c4>
   1c950:	ldr	r1, [r4, #32]
   1c954:	cmp	r5, r1
   1c958:	bge	1ca54 <__assert_fail@plt+0xb540>
   1c95c:	ldrb	r0, [r4, #76]	; 0x4c
   1c960:	cmp	r0, #0
   1c964:	bne	1cbcc <__assert_fail@plt+0xb6b8>
   1c968:	sub	r1, r5, #1
   1c96c:	mov	r0, r4
   1c970:	mov	r2, r6
   1c974:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1c978:	str	r0, [r4, #60]	; 0x3c
   1c97c:	ldr	r0, [r4, #80]	; 0x50
   1c980:	cmp	r0, #2
   1c984:	blt	1c9a0 <__assert_fail@plt+0xb48c>
   1c988:	ldr	r2, [r4, #28]
   1c98c:	ldr	r0, [r4, #8]
   1c990:	sub	r2, r2, r5
   1c994:	add	r1, r0, r5, lsl #2
   1c998:	lsl	r2, r2, #2
   1c99c:	bl	11274 <memmove@plt>
   1c9a0:	ldrb	r0, [r4, #75]	; 0x4b
   1c9a4:	cmp	r0, #0
   1c9a8:	bne	1ccbc <__assert_fail@plt+0xb7a8>
   1c9ac:	ldr	r0, [r4, #28]
   1c9b0:	ldr	r1, [r4, #32]
   1c9b4:	sub	r0, r0, r5
   1c9b8:	sub	r1, r1, r5
   1c9bc:	str	r0, [r4, #28]
   1c9c0:	str	r1, [r4, #32]
   1c9c4:	ldrb	r0, [r4, #75]	; 0x4b
   1c9c8:	cmp	r0, #0
   1c9cc:	ldreq	r0, [r4, #4]
   1c9d0:	addeq	r0, r0, r5
   1c9d4:	streq	r0, [r4, #4]
   1c9d8:	str	r9, [r4, #24]
   1c9dc:	ldr	r0, [r4, #48]	; 0x30
   1c9e0:	ldr	r1, [r4, #56]	; 0x38
   1c9e4:	ldr	r2, [r4, #80]	; 0x50
   1c9e8:	sub	r0, r0, r5
   1c9ec:	cmp	r2, #2
   1c9f0:	sub	r1, r1, r5
   1c9f4:	str	r0, [r4, #48]	; 0x30
   1c9f8:	str	r1, [r4, #56]	; 0x38
   1c9fc:	blt	1ca20 <__assert_fail@plt+0xb50c>
   1ca00:	ldrb	r0, [r4, #72]	; 0x48
   1ca04:	cmp	r0, #0
   1ca08:	beq	1ca34 <__assert_fail@plt+0xb520>
   1ca0c:	mov	r0, r4
   1ca10:	bl	17a70 <__assert_fail@plt+0x655c>
   1ca14:	cmp	r0, #0
   1ca18:	bne	1ca44 <__assert_fail@plt+0xb530>
   1ca1c:	b	1ca3c <__assert_fail@plt+0xb528>
   1ca20:	ldrb	r1, [r4, #75]	; 0x4b
   1ca24:	cmp	r1, #0
   1ca28:	bne	1cd54 <__assert_fail@plt+0xb840>
   1ca2c:	str	r0, [r4, #28]
   1ca30:	b	1ca3c <__assert_fail@plt+0xb528>
   1ca34:	mov	r0, r4
   1ca38:	bl	180ac <__assert_fail@plt+0x6b98>
   1ca3c:	mov	r0, #0
   1ca40:	str	r0, [r4, #40]	; 0x28
   1ca44:	sub	sp, fp, #28
   1ca48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca4c:	sub	r5, r9, r0
   1ca50:	b	1c948 <__assert_fail@plt+0xb434>
   1ca54:	ldrb	r2, [r4, #76]	; 0x4c
   1ca58:	ldr	lr, [r4, #28]
   1ca5c:	cmp	r2, #0
   1ca60:	bne	1ceb4 <__assert_fail@plt+0xb9a0>
   1ca64:	mov	r2, #0
   1ca68:	str	r2, [r4, #28]
   1ca6c:	ldr	r3, [r4, #80]	; 0x50
   1ca70:	cmp	r3, #2
   1ca74:	blt	1cd6c <__assert_fail@plt+0xb858>
   1ca78:	ldrb	r2, [r4, #73]	; 0x49
   1ca7c:	cmp	r2, #0
   1ca80:	beq	1cb3c <__assert_fail@plt+0xb628>
   1ca84:	ldr	r7, [r4]
   1ca88:	sub	r3, r5, r3
   1ca8c:	add	ip, r7, r0
   1ca90:	add	r3, ip, r3
   1ca94:	add	r8, ip, r5
   1ca98:	cmp	r3, r7
   1ca9c:	movcc	r3, r7
   1caa0:	mov	r7, r8
   1caa4:	sub	r7, r7, #1
   1caa8:	cmp	r7, r3
   1caac:	bcc	1cb3c <__assert_fail@plt+0xb628>
   1cab0:	ldrb	r2, [r7]
   1cab4:	and	r2, r2, #192	; 0xc0
   1cab8:	cmp	r2, #128	; 0x80
   1cabc:	beq	1caa4 <__assert_fail@plt+0xb590>
   1cac0:	ldr	r0, [r4, #48]	; 0x30
   1cac4:	mov	sl, lr
   1cac8:	mov	r1, r7
   1cacc:	add	r0, ip, r0
   1cad0:	sub	r2, r0, r7
   1cad4:	ldr	r0, [r4, #64]	; 0x40
   1cad8:	cmp	r0, #0
   1cadc:	bne	1cf50 <__assert_fail@plt+0xba3c>
   1cae0:	mov	r0, #0
   1cae4:	add	r3, sp, #24
   1cae8:	str	r0, [sp, #28]
   1caec:	str	r0, [sp, #24]
   1caf0:	add	r0, sp, #20
   1caf4:	bl	221f0 <__assert_fail@plt+0x10cdc>
   1caf8:	sub	r1, r8, r7
   1cafc:	mvn	r2, #0
   1cb00:	cmp	r0, r1
   1cb04:	bcc	1cb28 <__assert_fail@plt+0xb614>
   1cb08:	cmn	r0, #3
   1cb0c:	bhi	1cb28 <__assert_fail@plt+0xb614>
   1cb10:	mov	r2, #0
   1cb14:	sub	r0, r0, r1
   1cb18:	str	r2, [r4, #16]
   1cb1c:	str	r2, [r4, #20]
   1cb20:	str	r0, [r4, #28]
   1cb24:	ldr	r2, [sp, #20]
   1cb28:	cmn	r2, #1
   1cb2c:	bne	1ce24 <__assert_fail@plt+0xb910>
   1cb30:	ldr	r0, [r4, #24]
   1cb34:	ldr	r1, [r4, #32]
   1cb38:	mov	lr, sl
   1cb3c:	add	r8, r1, r0
   1cb40:	cmp	r8, r9
   1cb44:	bge	1ce04 <__assert_fail@plt+0xb8f0>
   1cb48:	add	sl, r4, #16
   1cb4c:	str	lr, [sp]
   1cb50:	ldr	r0, [r4]
   1cb54:	ldr	r2, [r4, #44]	; 0x2c
   1cb58:	mov	r3, sl
   1cb5c:	add	r1, r0, r8
   1cb60:	ldr	r0, [sl]
   1cb64:	sub	r7, r2, r8
   1cb68:	mov	r2, r7
   1cb6c:	str	r0, [sp, #8]
   1cb70:	ldr	r0, [sl, #4]
   1cb74:	str	r0, [sp, #4]
   1cb78:	add	r0, sp, #24
   1cb7c:	bl	221f0 <__assert_fail@plt+0x10cdc>
   1cb80:	sub	r1, r0, #1
   1cb84:	cmn	r1, #3
   1cb88:	bcs	1cba0 <__assert_fail@plt+0xb68c>
   1cb8c:	ldr	r2, [sp, #24]
   1cb90:	add	r8, r0, r8
   1cb94:	cmp	r8, r9
   1cb98:	blt	1cb50 <__assert_fail@plt+0xb63c>
   1cb9c:	b	1ce10 <__assert_fail@plt+0xb8fc>
   1cba0:	ldr	r3, [sp, #4]
   1cba4:	ldr	r1, [sp, #8]
   1cba8:	cmp	r7, #0
   1cbac:	mov	r2, #0
   1cbb0:	cmpne	r0, #0
   1cbb4:	beq	1cbc0 <__assert_fail@plt+0xb6ac>
   1cbb8:	ldr	r0, [r4]
   1cbbc:	ldrb	r2, [r0, r8]
   1cbc0:	stm	sl, {r1, r3}
   1cbc4:	mov	r0, #1
   1cbc8:	b	1cb90 <__assert_fail@plt+0xb67c>
   1cbcc:	ldr	r8, [r4, #28]
   1cbd0:	ldr	sl, [r4, #12]
   1cbd4:	mov	r0, #0
   1cbd8:	mov	r1, r8
   1cbdc:	add	r2, r0, r1
   1cbe0:	add	r2, r2, r2, lsr #31
   1cbe4:	asr	r7, r2, #1
   1cbe8:	ldr	r2, [sl, r7, lsl #2]
   1cbec:	mov	r3, r7
   1cbf0:	cmp	r2, r5
   1cbf4:	bgt	1cc04 <__assert_fail@plt+0xb6f0>
   1cbf8:	bge	1cc10 <__assert_fail@plt+0xb6fc>
   1cbfc:	add	r0, r7, #1
   1cc00:	mov	r3, r1
   1cc04:	cmp	r0, r3
   1cc08:	mov	r1, r3
   1cc0c:	blt	1cbdc <__assert_fail@plt+0xb6c8>
   1cc10:	cmp	r2, r5
   1cc14:	mov	r0, r4
   1cc18:	mov	r2, r6
   1cc1c:	addlt	r7, r7, #1
   1cc20:	sub	r1, r7, #1
   1cc24:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1cc28:	cmp	r8, r5
   1cc2c:	str	r0, [r4, #60]	; 0x3c
   1cc30:	ble	1ccd4 <__assert_fail@plt+0xb7c0>
   1cc34:	cmp	r7, r5
   1cc38:	bne	1ccd4 <__assert_fail@plt+0xb7c0>
   1cc3c:	ldr	r0, [sl, r5, lsl #2]
   1cc40:	cmp	r0, r5
   1cc44:	bne	1ccd4 <__assert_fail@plt+0xb7c0>
   1cc48:	ldr	r0, [r4, #8]
   1cc4c:	sub	r2, r8, r5
   1cc50:	lsl	r2, r2, #2
   1cc54:	add	r1, r0, r5, lsl #2
   1cc58:	bl	11274 <memmove@plt>
   1cc5c:	ldr	r2, [r4, #28]
   1cc60:	ldr	r0, [r4, #4]
   1cc64:	add	r1, r0, r5
   1cc68:	sub	r2, r2, r5
   1cc6c:	bl	11274 <memmove@plt>
   1cc70:	ldr	r0, [r4, #28]
   1cc74:	ldr	r1, [r4, #32]
   1cc78:	sub	r0, r0, r5
   1cc7c:	sub	r1, r1, r5
   1cc80:	cmp	r0, #1
   1cc84:	str	r0, [r4, #28]
   1cc88:	str	r1, [r4, #32]
   1cc8c:	blt	1c9c4 <__assert_fail@plt+0xb4b0>
   1cc90:	ldr	r0, [r4, #12]
   1cc94:	mov	r2, #0
   1cc98:	add	r1, r0, r5, lsl #2
   1cc9c:	ldr	r3, [r1, r2, lsl #2]
   1cca0:	sub	r3, r3, r5
   1cca4:	str	r3, [r0, r2, lsl #2]
   1cca8:	add	r2, r2, #1
   1ccac:	ldr	r3, [r4, #28]
   1ccb0:	cmp	r2, r3
   1ccb4:	blt	1cc9c <__assert_fail@plt+0xb788>
   1ccb8:	b	1c9c4 <__assert_fail@plt+0xb4b0>
   1ccbc:	ldr	r2, [r4, #28]
   1ccc0:	ldr	r0, [r4, #4]
   1ccc4:	add	r1, r0, r5
   1ccc8:	sub	r2, r2, r5
   1cccc:	bl	11274 <memmove@plt>
   1ccd0:	b	1c9ac <__assert_fail@plt+0xb498>
   1ccd4:	mov	r0, #0
   1ccd8:	strb	r0, [r4, #76]	; 0x4c
   1ccdc:	sub	r0, r5, r9
   1cce0:	ldr	r1, [r4, #44]	; 0x2c
   1cce4:	ldr	r2, [r4, #52]	; 0x34
   1cce8:	add	r1, r0, r1
   1ccec:	add	r0, r0, r2
   1ccf0:	str	r1, [r4, #48]	; 0x30
   1ccf4:	sub	r1, sl, #4
   1ccf8:	str	r0, [r4, #56]	; 0x38
   1ccfc:	mov	r0, r7
   1cd00:	cmp	r7, #1
   1cd04:	blt	1cd18 <__assert_fail@plt+0xb804>
   1cd08:	ldr	r2, [r1, r0, lsl #2]
   1cd0c:	sub	r7, r0, #1
   1cd10:	cmp	r2, r5
   1cd14:	beq	1ccfc <__assert_fail@plt+0xb7e8>
   1cd18:	cmp	r0, r8
   1cd1c:	bge	1cd40 <__assert_fail@plt+0xb82c>
   1cd20:	ldr	r1, [r4, #8]
   1cd24:	ldr	r2, [r1, r0, lsl #2]
   1cd28:	cmn	r2, #1
   1cd2c:	bne	1cd40 <__assert_fail@plt+0xb82c>
   1cd30:	add	r0, r0, #1
   1cd34:	cmp	r8, r0
   1cd38:	bne	1cd24 <__assert_fail@plt+0xb810>
   1cd3c:	b	1cd48 <__assert_fail@plt+0xb834>
   1cd40:	cmp	r0, r8
   1cd44:	bne	1cdb8 <__assert_fail@plt+0xb8a4>
   1cd48:	mov	r0, #0
   1cd4c:	str	r0, [r4, #28]
   1cd50:	b	1ce78 <__assert_fail@plt+0xb964>
   1cd54:	ldrb	r0, [r4, #72]	; 0x48
   1cd58:	cmp	r0, #0
   1cd5c:	beq	1ce80 <__assert_fail@plt+0xb96c>
   1cd60:	mov	r0, r4
   1cd64:	bl	18040 <__assert_fail@plt+0x6b2c>
   1cd68:	b	1ca3c <__assert_fail@plt+0xb528>
   1cd6c:	ldr	r3, [r4]
   1cd70:	add	r0, r5, r0
   1cd74:	ldr	r1, [r4, #64]	; 0x40
   1cd78:	add	r0, r0, r3
   1cd7c:	cmp	r1, #0
   1cd80:	ldrb	r0, [r0, #-1]
   1cd84:	str	r2, [r4, #32]
   1cd88:	ldrbne	r0, [r1, r0]
   1cd8c:	ldr	r1, [r4, #68]	; 0x44
   1cd90:	ubfx	r2, r0, #5, #3
   1cd94:	and	r3, r0, #31
   1cd98:	ldr	r2, [r1, r2, lsl #2]
   1cd9c:	mov	r1, #1
   1cda0:	tst	r2, r1, lsl r3
   1cda4:	moveq	r1, #0
   1cda8:	cmpeq	r0, #10
   1cdac:	beq	1cea0 <__assert_fail@plt+0xb98c>
   1cdb0:	str	r1, [r4, #60]	; 0x3c
   1cdb4:	b	1c9c4 <__assert_fail@plt+0xb4b0>
   1cdb8:	ldr	r0, [sl, r0, lsl #2]
   1cdbc:	subs	r2, r0, r5
   1cdc0:	str	r2, [r4, #28]
   1cdc4:	beq	1ce98 <__assert_fail@plt+0xb984>
   1cdc8:	cmp	r2, #1
   1cdcc:	blt	1cdf0 <__assert_fail@plt+0xb8dc>
   1cdd0:	ldr	r0, [r4, #8]
   1cdd4:	mov	r1, #0
   1cdd8:	mvn	r3, #0
   1cddc:	str	r3, [r0, r1, lsl #2]
   1cde0:	add	r1, r1, #1
   1cde4:	ldr	r2, [r4, #28]
   1cde8:	cmp	r1, r2
   1cdec:	blt	1cddc <__assert_fail@plt+0xb8c8>
   1cdf0:	ldr	r0, [r4, #4]
   1cdf4:	mov	r1, #255	; 0xff
   1cdf8:	bl	11418 <memset@plt>
   1cdfc:	ldr	r0, [r4, #28]
   1ce00:	b	1ce78 <__assert_fail@plt+0xb964>
   1ce04:	sub	r7, r8, r9
   1ce08:	str	r7, [r4, #28]
   1ce0c:	b	1ce58 <__assert_fail@plt+0xb944>
   1ce10:	ldr	lr, [sp]
   1ce14:	sub	r7, r8, r9
   1ce18:	cmn	r2, #1
   1ce1c:	str	r7, [r4, #28]
   1ce20:	beq	1ce58 <__assert_fail@plt+0xb944>
   1ce24:	ldrb	r0, [r4, #78]	; 0x4e
   1ce28:	cmp	r0, #0
   1ce2c:	bne	1cf20 <__assert_fail@plt+0xba0c>
   1ce30:	mov	r1, #0
   1ce34:	cmp	r2, #10
   1ce38:	bne	1ce4c <__assert_fail@plt+0xb938>
   1ce3c:	ldrb	r0, [r4, #77]	; 0x4d
   1ce40:	cmp	r0, #0
   1ce44:	movwne	r0, #1
   1ce48:	lsl	r1, r0, #1
   1ce4c:	str	r1, [r4, #60]	; 0x3c
   1ce50:	ldr	r7, [r4, #28]
   1ce54:	b	1ce6c <__assert_fail@plt+0xb958>
   1ce58:	sub	r1, lr, #1
   1ce5c:	mov	r0, r4
   1ce60:	mov	r2, r6
   1ce64:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1ce68:	str	r0, [r4, #60]	; 0x3c
   1ce6c:	mov	r0, #0
   1ce70:	cmp	r7, #0
   1ce74:	bne	1cedc <__assert_fail@plt+0xb9c8>
   1ce78:	str	r0, [r4, #32]
   1ce7c:	b	1c9c4 <__assert_fail@plt+0xb4b0>
   1ce80:	ldr	r0, [r4, #64]	; 0x40
   1ce84:	cmp	r0, #0
   1ce88:	beq	1ca3c <__assert_fail@plt+0xb528>
   1ce8c:	mov	r0, r4
   1ce90:	bl	18298 <__assert_fail@plt+0x6d84>
   1ce94:	b	1ca3c <__assert_fail@plt+0xb528>
   1ce98:	mov	r0, #0
   1ce9c:	b	1ce78 <__assert_fail@plt+0xb964>
   1cea0:	ldrb	r0, [r4, #77]	; 0x4d
   1cea4:	cmp	r0, #0
   1cea8:	movwne	r0, #1
   1ceac:	lsl	r1, r0, #1
   1ceb0:	b	1cdb0 <__assert_fail@plt+0xb89c>
   1ceb4:	mov	r2, #0
   1ceb8:	strb	r2, [r4, #76]	; 0x4c
   1cebc:	sub	r2, r5, r9
   1cec0:	ldr	r3, [r4, #44]	; 0x2c
   1cec4:	ldr	r7, [r4, #52]	; 0x34
   1cec8:	add	r3, r2, r3
   1cecc:	add	r2, r2, r7
   1ced0:	str	r3, [r4, #48]	; 0x30
   1ced4:	str	r2, [r4, #56]	; 0x38
   1ced8:	b	1ca64 <__assert_fail@plt+0xb550>
   1cedc:	cmp	r7, #1
   1cee0:	blt	1cf04 <__assert_fail@plt+0xb9f0>
   1cee4:	ldr	r0, [r4, #8]
   1cee8:	mov	r1, #0
   1ceec:	mvn	r2, #0
   1cef0:	str	r2, [r0, r1, lsl #2]
   1cef4:	add	r1, r1, #1
   1cef8:	ldr	r7, [r4, #28]
   1cefc:	cmp	r1, r7
   1cf00:	blt	1cef0 <__assert_fail@plt+0xb9dc>
   1cf04:	ldrb	r0, [r4, #75]	; 0x4b
   1cf08:	cmp	r0, #0
   1cf0c:	beq	1cf48 <__assert_fail@plt+0xba34>
   1cf10:	ldr	r0, [r4, #4]
   1cf14:	mov	r1, #255	; 0xff
   1cf18:	mov	r2, r7
   1cf1c:	b	1cdf8 <__assert_fail@plt+0xb8e4>
   1cf20:	mov	r0, r2
   1cf24:	mov	r6, r2
   1cf28:	bl	11400 <iswalnum@plt>
   1cf2c:	mov	r1, #1
   1cf30:	cmp	r6, #95	; 0x5f
   1cf34:	beq	1ce4c <__assert_fail@plt+0xb938>
   1cf38:	mov	r2, r6
   1cf3c:	cmp	r0, #0
   1cf40:	beq	1ce30 <__assert_fail@plt+0xb91c>
   1cf44:	b	1ce4c <__assert_fail@plt+0xb938>
   1cf48:	mov	r0, r7
   1cf4c:	b	1ce78 <__assert_fail@plt+0xb964>
   1cf50:	cmp	r2, #1
   1cf54:	blt	1cf8c <__assert_fail@plt+0xba78>
   1cf58:	cmp	r2, #6
   1cf5c:	mov	r1, r2
   1cf60:	movge	r1, #6
   1cf64:	sub	ip, r1, #1
   1cf68:	add	r1, sp, #14
   1cf6c:	ldrb	r3, [r7, ip]
   1cf70:	cmp	ip, #0
   1cf74:	ldrb	r3, [r0, r3]
   1cf78:	strb	r3, [r1, ip]
   1cf7c:	sub	r3, ip, #1
   1cf80:	mov	ip, r3
   1cf84:	bgt	1cf6c <__assert_fail@plt+0xba58>
   1cf88:	b	1cae0 <__assert_fail@plt+0xb5cc>
   1cf8c:	add	r1, sp, #14
   1cf90:	b	1cae0 <__assert_fail@plt+0xb5cc>
   1cf94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cf98:	add	fp, sp, #24
   1cf9c:	mov	r3, r2
   1cfa0:	ldr	r2, [r0, #88]	; 0x58
   1cfa4:	mov	r5, r1
   1cfa8:	mov	r4, r0
   1cfac:	mov	r1, r3
   1cfb0:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1cfb4:	ldr	r1, [r5, #8]
   1cfb8:	cmp	r1, #1
   1cfbc:	blt	1d04c <__assert_fail@plt+0xbb38>
   1cfc0:	and	ip, r0, #8
   1cfc4:	and	lr, r0, #2
   1cfc8:	and	r2, r0, #1
   1cfcc:	ldr	r0, [r4, #84]	; 0x54
   1cfd0:	ldr	r5, [r5, #12]
   1cfd4:	movw	r8, #65280	; 0xff00
   1cfd8:	mov	r3, #0
   1cfdc:	movt	r8, #3
   1cfe0:	ldr	r4, [r0]
   1cfe4:	ldr	r0, [r5, r3, lsl #2]
   1cfe8:	add	r7, r4, r0, lsl #3
   1cfec:	ldr	r7, [r7, #4]
   1cff0:	uxtb	r6, r7
   1cff4:	cmp	r6, #2
   1cff8:	bne	1d040 <__assert_fail@plt+0xbb2c>
   1cffc:	tst	r7, r8
   1d000:	beq	1d050 <__assert_fail@plt+0xbb3c>
   1d004:	cmp	r2, #0
   1d008:	bne	1d014 <__assert_fail@plt+0xbb00>
   1d00c:	ands	r6, r7, #1024	; 0x400
   1d010:	bne	1d040 <__assert_fail@plt+0xbb2c>
   1d014:	cmp	r2, #0
   1d018:	andsne	r6, r7, #2048	; 0x800
   1d01c:	bne	1d040 <__assert_fail@plt+0xbb2c>
   1d020:	cmp	lr, #0
   1d024:	bne	1d030 <__assert_fail@plt+0xbb1c>
   1d028:	ands	r6, r7, #8192	; 0x2000
   1d02c:	bne	1d040 <__assert_fail@plt+0xbb2c>
   1d030:	cmp	ip, #0
   1d034:	bne	1d050 <__assert_fail@plt+0xbb3c>
   1d038:	ands	r6, r7, #32768	; 0x8000
   1d03c:	beq	1d050 <__assert_fail@plt+0xbb3c>
   1d040:	add	r3, r3, #1
   1d044:	cmp	r3, r1
   1d048:	blt	1cfe4 <__assert_fail@plt+0xbad0>
   1d04c:	mov	r0, #0
   1d050:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d054:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d058:	add	fp, sp, #24
   1d05c:	mov	r8, r0
   1d060:	ldr	r0, [r0, #124]	; 0x7c
   1d064:	cmp	r0, #1
   1d068:	blt	1d0ec <__assert_fail@plt+0xbbd8>
   1d06c:	mov	r7, #0
   1d070:	ldr	r0, [r8, #132]	; 0x84
   1d074:	ldr	r5, [r0, r7, lsl #2]
   1d078:	ldr	r0, [r5, #16]
   1d07c:	cmp	r0, #1
   1d080:	blt	1d0b0 <__assert_fail@plt+0xbb9c>
   1d084:	mov	r4, #0
   1d088:	ldr	r0, [r5, #20]
   1d08c:	ldr	r6, [r0, r4, lsl #2]
   1d090:	ldr	r0, [r6, #16]
   1d094:	bl	22190 <__assert_fail@plt+0x10c7c>
   1d098:	mov	r0, r6
   1d09c:	bl	22190 <__assert_fail@plt+0x10c7c>
   1d0a0:	ldr	r0, [r5, #16]
   1d0a4:	add	r4, r4, #1
   1d0a8:	cmp	r4, r0
   1d0ac:	blt	1d088 <__assert_fail@plt+0xbb74>
   1d0b0:	ldr	r0, [r5, #20]
   1d0b4:	bl	22190 <__assert_fail@plt+0x10c7c>
   1d0b8:	ldr	r0, [r5, #8]
   1d0bc:	cmp	r0, #0
   1d0c0:	beq	1d0d4 <__assert_fail@plt+0xbbc0>
   1d0c4:	ldr	r0, [r0, #8]
   1d0c8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1d0cc:	ldr	r0, [r5, #8]
   1d0d0:	bl	22190 <__assert_fail@plt+0x10c7c>
   1d0d4:	mov	r0, r5
   1d0d8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1d0dc:	ldr	r0, [r8, #124]	; 0x7c
   1d0e0:	add	r7, r7, #1
   1d0e4:	cmp	r7, r0
   1d0e8:	blt	1d070 <__assert_fail@plt+0xbb5c>
   1d0ec:	mov	r0, #0
   1d0f0:	str	r0, [r8, #108]	; 0x6c
   1d0f4:	str	r0, [r8, #124]	; 0x7c
   1d0f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d0fc:	push	{r4, r5, fp, lr}
   1d100:	add	fp, sp, #8
   1d104:	mov	r4, r0
   1d108:	cmn	r1, #1
   1d10c:	ble	1d144 <__assert_fail@plt+0xbc30>
   1d110:	ldr	r0, [r4, #48]	; 0x30
   1d114:	cmp	r0, r1
   1d118:	beq	1d1a8 <__assert_fail@plt+0xbc94>
   1d11c:	ldr	r0, [r4, #80]	; 0x50
   1d120:	cmp	r0, #2
   1d124:	blt	1d14c <__assert_fail@plt+0xbc38>
   1d128:	ldr	r0, [r4, #8]
   1d12c:	ldr	r5, [r0, r1, lsl #2]
   1d130:	cmn	r5, #1
   1d134:	bne	1d17c <__assert_fail@plt+0xbc68>
   1d138:	sub	r1, r1, #1
   1d13c:	cmn	r1, #1
   1d140:	bne	1d12c <__assert_fail@plt+0xbc18>
   1d144:	ldr	r0, [r4, #60]	; 0x3c
   1d148:	pop	{r4, r5, fp, pc}
   1d14c:	ldr	r0, [r4, #4]
   1d150:	ldr	r2, [r4, #68]	; 0x44
   1d154:	ldrb	r1, [r0, r1]
   1d158:	ubfx	r0, r1, #5, #3
   1d15c:	and	r3, r1, #31
   1d160:	ldr	r2, [r2, r0, lsl #2]
   1d164:	mov	r0, #1
   1d168:	tst	r2, r0, lsl r3
   1d16c:	moveq	r0, #0
   1d170:	cmpeq	r1, #10
   1d174:	bne	1d1a4 <__assert_fail@plt+0xbc90>
   1d178:	b	1d194 <__assert_fail@plt+0xbc80>
   1d17c:	ldrb	r0, [r4, #78]	; 0x4e
   1d180:	cmp	r0, #0
   1d184:	bne	1d1b4 <__assert_fail@plt+0xbca0>
   1d188:	mov	r0, #0
   1d18c:	cmp	r5, #10
   1d190:	popne	{r4, r5, fp, pc}
   1d194:	ldrb	r0, [r4, #77]	; 0x4d
   1d198:	cmp	r0, #0
   1d19c:	movwne	r0, #1
   1d1a0:	lsl	r0, r0, #1
   1d1a4:	pop	{r4, r5, fp, pc}
   1d1a8:	and	r0, r2, #2
   1d1ac:	eor	r0, r0, #10
   1d1b0:	pop	{r4, r5, fp, pc}
   1d1b4:	mov	r0, r5
   1d1b8:	bl	11400 <iswalnum@plt>
   1d1bc:	mov	r1, r0
   1d1c0:	mov	r0, #1
   1d1c4:	cmp	r5, #95	; 0x5f
   1d1c8:	beq	1d1a4 <__assert_fail@plt+0xbc90>
   1d1cc:	cmp	r1, #0
   1d1d0:	beq	1d188 <__assert_fail@plt+0xbc74>
   1d1d4:	b	1d1a4 <__assert_fail@plt+0xbc90>
   1d1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1dc:	add	fp, sp, #28
   1d1e0:	sub	sp, sp, #4
   1d1e4:	mov	sl, r0
   1d1e8:	ldr	r0, [r1, #4]
   1d1ec:	cmp	r0, #1
   1d1f0:	blt	1d2bc <__assert_fail@plt+0xbda8>
   1d1f4:	ldr	r7, [sl, #84]	; 0x54
   1d1f8:	mov	r8, r2
   1d1fc:	mov	r5, r1
   1d200:	mov	r4, #0
   1d204:	ldr	r1, [r5, #8]
   1d208:	ldr	r6, [r1, r4, lsl #2]
   1d20c:	ldr	r1, [r7]
   1d210:	add	r2, r1, r6, lsl #3
   1d214:	ldrb	r2, [r2, #4]
   1d218:	cmp	r2, #8
   1d21c:	bne	1d288 <__assert_fail@plt+0xbd74>
   1d220:	ldr	r1, [r1, r6, lsl #3]
   1d224:	cmp	r1, #31
   1d228:	bgt	1d288 <__assert_fail@plt+0xbd74>
   1d22c:	ldr	r2, [r7, #80]	; 0x50
   1d230:	mov	r3, #1
   1d234:	tst	r2, r3, lsl r1
   1d238:	beq	1d288 <__assert_fail@plt+0xbd74>
   1d23c:	ldr	r0, [sl, #124]	; 0x7c
   1d240:	ldr	r9, [sl, #128]	; 0x80
   1d244:	cmp	r0, r9
   1d248:	beq	1d298 <__assert_fail@plt+0xbd84>
   1d24c:	mov	r0, #1
   1d250:	mov	r1, #24
   1d254:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1d258:	ldr	r1, [sl, #124]	; 0x7c
   1d25c:	ldr	r2, [sl, #132]	; 0x84
   1d260:	str	r0, [r2, r1, lsl #2]
   1d264:	ldr	r0, [sl, #132]	; 0x84
   1d268:	ldr	r0, [r0, r1, lsl #2]
   1d26c:	cmp	r0, #0
   1d270:	beq	1d2c8 <__assert_fail@plt+0xbdb4>
   1d274:	add	r1, r1, #1
   1d278:	str	r6, [r0, #4]
   1d27c:	str	r1, [sl, #124]	; 0x7c
   1d280:	str	r8, [r0]
   1d284:	ldr	r0, [r5, #4]
   1d288:	add	r4, r4, #1
   1d28c:	cmp	r4, r0
   1d290:	blt	1d204 <__assert_fail@plt+0xbcf0>
   1d294:	b	1d2bc <__assert_fail@plt+0xbda8>
   1d298:	ldr	r0, [sl, #132]	; 0x84
   1d29c:	lsl	r1, r9, #3
   1d2a0:	bl	22004 <__assert_fail@plt+0x10af0>
   1d2a4:	cmp	r0, #0
   1d2a8:	beq	1d2c8 <__assert_fail@plt+0xbdb4>
   1d2ac:	lsl	r1, r9, #1
   1d2b0:	str	r1, [sl, #128]	; 0x80
   1d2b4:	str	r0, [sl, #132]	; 0x84
   1d2b8:	b	1d24c <__assert_fail@plt+0xbd38>
   1d2bc:	mov	r0, #0
   1d2c0:	sub	sp, fp, #28
   1d2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2c8:	mov	r0, #12
   1d2cc:	b	1d2c0 <__assert_fail@plt+0xbdac>
   1d2d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2d4:	add	fp, sp, #28
   1d2d8:	sub	sp, sp, #76	; 0x4c
   1d2dc:	mov	r7, r0
   1d2e0:	ldr	r0, [r1, #4]
   1d2e4:	cmp	r0, #1
   1d2e8:	blt	1d99c <__assert_fail@plt+0xc488>
   1d2ec:	ldr	r2, [r7, #84]	; 0x54
   1d2f0:	ldr	r0, [r7, #40]	; 0x28
   1d2f4:	mov	r3, #0
   1d2f8:	str	r7, [sp, #40]	; 0x28
   1d2fc:	str	r1, [sp, #12]
   1d300:	str	r0, [sp, #52]	; 0x34
   1d304:	str	r2, [sp, #24]
   1d308:	ldr	r0, [r1, #8]
   1d30c:	str	r3, [sp, #20]
   1d310:	ldr	r3, [r0, r3, lsl #2]
   1d314:	ldr	r0, [r2]
   1d318:	add	r0, r0, r3, lsl #3
   1d31c:	mov	r1, r3
   1d320:	str	r3, [sp, #48]	; 0x30
   1d324:	ldr	r4, [r0, #4]
   1d328:	uxtb	r0, r4
   1d32c:	cmp	r0, #4
   1d330:	bne	1d980 <__assert_fail@plt+0xc46c>
   1d334:	movw	r0, #65280	; 0xff00
   1d338:	movt	r0, #3
   1d33c:	tst	r4, r0
   1d340:	beq	1d394 <__assert_fail@plt+0xbe80>
   1d344:	ldr	r2, [r7, #88]	; 0x58
   1d348:	ldr	r1, [sp, #52]	; 0x34
   1d34c:	mov	r0, r7
   1d350:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1d354:	and	r1, r0, #1
   1d358:	tst	r4, #1024	; 0x400
   1d35c:	beq	1d368 <__assert_fail@plt+0xbe54>
   1d360:	cmp	r1, #0
   1d364:	beq	1d980 <__assert_fail@plt+0xc46c>
   1d368:	tst	r4, #2048	; 0x800
   1d36c:	cmpne	r1, #0
   1d370:	bne	1d980 <__assert_fail@plt+0xc46c>
   1d374:	tst	r4, #8192	; 0x2000
   1d378:	beq	1d384 <__assert_fail@plt+0xbe70>
   1d37c:	ands	r1, r0, #2
   1d380:	beq	1d980 <__assert_fail@plt+0xc46c>
   1d384:	tst	r4, #32768	; 0x8000
   1d388:	beq	1d394 <__assert_fail@plt+0xbe80>
   1d38c:	ands	r0, r0, #8
   1d390:	beq	1d980 <__assert_fail@plt+0xc46c>
   1d394:	ldr	r0, [r7, #84]	; 0x54
   1d398:	ldr	r1, [sp, #52]	; 0x34
   1d39c:	ldr	r4, [r7, #4]
   1d3a0:	ldr	r8, [r7, #108]	; 0x6c
   1d3a4:	str	r0, [sp, #36]	; 0x24
   1d3a8:	mov	r0, r7
   1d3ac:	bl	1de10 <__assert_fail@plt+0xc8fc>
   1d3b0:	cmn	r0, #1
   1d3b4:	beq	1d3e4 <__assert_fail@plt+0xbed0>
   1d3b8:	ldr	r1, [r7, #116]	; 0x74
   1d3bc:	add	r0, r0, r0, lsl #1
   1d3c0:	add	r0, r1, r0, lsl #3
   1d3c4:	ldr	r1, [r0]
   1d3c8:	ldr	r2, [sp, #48]	; 0x30
   1d3cc:	cmp	r1, r2
   1d3d0:	beq	1d770 <__assert_fail@plt+0xc25c>
   1d3d4:	ldrb	r1, [r0, #20]
   1d3d8:	add	r0, r0, #24
   1d3dc:	cmp	r1, #0
   1d3e0:	bne	1d3c4 <__assert_fail@plt+0xbeb0>
   1d3e4:	ldr	r0, [r7, #124]	; 0x7c
   1d3e8:	cmp	r0, #1
   1d3ec:	mov	r0, r8
   1d3f0:	blt	1d774 <__assert_fail@plt+0xc260>
   1d3f4:	ldr	r0, [sp, #36]	; 0x24
   1d3f8:	ldr	r1, [sp, #48]	; 0x30
   1d3fc:	mov	r3, #0
   1d400:	mov	ip, r4
   1d404:	str	r8, [sp, #16]
   1d408:	ldr	r0, [r0]
   1d40c:	ldr	r2, [r0, r1, lsl #3]
   1d410:	str	r2, [sp, #32]
   1d414:	ldr	r1, [r7, #132]	; 0x84
   1d418:	str	r3, [sp, #28]
   1d41c:	ldr	r4, [r1, r3, lsl #2]
   1d420:	ldr	r1, [r4, #4]
   1d424:	ldr	r0, [r0, r1, lsl #3]
   1d428:	cmp	r0, r2
   1d42c:	bne	1d53c <__assert_fail@plt+0xc028>
   1d430:	ldr	r0, [r4, #16]
   1d434:	ldr	r2, [r4]
   1d438:	mov	r8, #0
   1d43c:	str	r4, [sp, #44]	; 0x2c
   1d440:	cmp	r0, #1
   1d444:	blt	1d50c <__assert_fail@plt+0xbff8>
   1d448:	ldr	r6, [sp, #52]	; 0x34
   1d44c:	mov	r5, r2
   1d450:	ldr	r1, [r4, #20]
   1d454:	ldr	sl, [r1, r8, lsl #2]
   1d458:	ldr	r1, [sl, #4]
   1d45c:	sub	r9, r1, r5
   1d460:	str	r1, [fp, #-48]	; 0xffffffd0
   1d464:	cmp	r9, #1
   1d468:	blt	1d4a0 <__assert_fail@plt+0xbf8c>
   1d46c:	ldr	r2, [r7, #28]
   1d470:	add	r1, r9, r6
   1d474:	cmp	r1, r2
   1d478:	bgt	1d4e8 <__assert_fail@plt+0xbfd4>
   1d47c:	add	r0, ip, r6
   1d480:	add	r1, ip, r5
   1d484:	mov	r2, r9
   1d488:	mov	r4, ip
   1d48c:	bl	113d0 <bcmp@plt>
   1d490:	mov	ip, r4
   1d494:	ldr	r4, [sp, #44]	; 0x2c
   1d498:	cmp	r0, #0
   1d49c:	bne	1d514 <__assert_fail@plt+0xc000>
   1d4a0:	ldr	r0, [sp, #52]	; 0x34
   1d4a4:	ldr	r3, [sp, #48]	; 0x30
   1d4a8:	mov	r1, r4
   1d4ac:	mov	r2, sl
   1d4b0:	str	r0, [sp]
   1d4b4:	mov	r0, r7
   1d4b8:	bl	1df2c <__assert_fail@plt+0xca18>
   1d4bc:	cmp	r0, #1
   1d4c0:	bhi	1d9ac <__assert_fail@plt+0xc498>
   1d4c4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1d4c8:	ldr	r0, [r4, #16]
   1d4cc:	ldr	ip, [r7, #4]
   1d4d0:	add	r8, r8, #1
   1d4d4:	add	r6, r9, r6
   1d4d8:	cmp	r8, r0
   1d4dc:	mov	r5, r2
   1d4e0:	blt	1d450 <__assert_fail@plt+0xbf3c>
   1d4e4:	b	1d51c <__assert_fail@plt+0xc008>
   1d4e8:	ldr	r2, [r7, #48]	; 0x30
   1d4ec:	cmp	r1, r2
   1d4f0:	bgt	1d518 <__assert_fail@plt+0xc004>
   1d4f4:	mov	r0, r7
   1d4f8:	bl	1de98 <__assert_fail@plt+0xc984>
   1d4fc:	cmp	r0, #0
   1d500:	bne	1d9ac <__assert_fail@plt+0xc498>
   1d504:	ldr	ip, [r7, #4]
   1d508:	b	1d47c <__assert_fail@plt+0xbf68>
   1d50c:	ldr	r6, [sp, #52]	; 0x34
   1d510:	b	1d51c <__assert_fail@plt+0xc008>
   1d514:	ldr	r0, [r4, #16]
   1d518:	mov	r2, r5
   1d51c:	cmp	r8, r0
   1d520:	blt	1d538 <__assert_fail@plt+0xc024>
   1d524:	ldr	r0, [sp, #52]	; 0x34
   1d528:	cmp	r8, #0
   1d52c:	addne	r2, r2, #1
   1d530:	cmp	r2, r0
   1d534:	ble	1d560 <__assert_fail@plt+0xc04c>
   1d538:	ldr	r8, [sp, #16]
   1d53c:	ldr	r3, [sp, #28]
   1d540:	ldr	r0, [r7, #124]	; 0x7c
   1d544:	add	r3, r3, #1
   1d548:	cmp	r3, r0
   1d54c:	bge	1d768 <__assert_fail@plt+0xc254>
   1d550:	ldr	r0, [sp, #36]	; 0x24
   1d554:	ldr	r2, [sp, #32]
   1d558:	ldr	r0, [r0]
   1d55c:	b	1d414 <__assert_fail@plt+0xbf00>
   1d560:	ldr	r8, [sp, #16]
   1d564:	ldr	r0, [r4]
   1d568:	mov	sl, r2
   1d56c:	cmp	r2, r0
   1d570:	ble	1d59c <__assert_fail@plt+0xc088>
   1d574:	ldr	r0, [r7, #28]
   1d578:	cmp	r6, r0
   1d57c:	bge	1d708 <__assert_fail@plt+0xc1f4>
   1d580:	add	r5, r6, #1
   1d584:	add	r1, sl, ip
   1d588:	ldrb	r0, [ip, r6]
   1d58c:	ldrb	r1, [r1, #-1]
   1d590:	cmp	r0, r1
   1d594:	beq	1d5a0 <__assert_fail@plt+0xc08c>
   1d598:	b	1d53c <__assert_fail@plt+0xc028>
   1d59c:	mov	r5, r6
   1d5a0:	ldr	r0, [r7, #100]	; 0x64
   1d5a4:	mov	r6, r5
   1d5a8:	ldr	r2, [r0, sl, lsl #2]
   1d5ac:	cmp	r2, #0
   1d5b0:	beq	1d5fc <__assert_fail@plt+0xc0e8>
   1d5b4:	ldr	r0, [r2, #8]
   1d5b8:	cmp	r0, #1
   1d5bc:	blt	1d5fc <__assert_fail@plt+0xc0e8>
   1d5c0:	ldr	r1, [sp, #36]	; 0x24
   1d5c4:	ldr	r2, [r2, #12]
   1d5c8:	ldr	r7, [sp, #32]
   1d5cc:	ldr	r1, [r1]
   1d5d0:	ldr	r5, [r2]
   1d5d4:	add	r3, r1, r5, lsl #3
   1d5d8:	ldrb	r3, [r3, #4]
   1d5dc:	cmp	r3, #9
   1d5e0:	bne	1d5f0 <__assert_fail@plt+0xc0dc>
   1d5e4:	ldr	r3, [r1, r5, lsl #3]
   1d5e8:	cmp	r3, r7
   1d5ec:	beq	1d614 <__assert_fail@plt+0xc100>
   1d5f0:	add	r2, r2, #4
   1d5f4:	subs	r0, r0, #1
   1d5f8:	bne	1d5d0 <__assert_fail@plt+0xc0bc>
   1d5fc:	ldr	r0, [sp, #52]	; 0x34
   1d600:	ldr	r7, [sp, #40]	; 0x28
   1d604:	add	r2, sl, #1
   1d608:	cmp	sl, r0
   1d60c:	blt	1d564 <__assert_fail@plt+0xc050>
   1d610:	b	1d53c <__assert_fail@plt+0xc028>
   1d614:	cmn	r5, #1
   1d618:	beq	1d5fc <__assert_fail@plt+0xc0e8>
   1d61c:	ldr	r1, [r4, #8]
   1d620:	mov	r9, r6
   1d624:	mov	r6, ip
   1d628:	cmp	r1, #0
   1d62c:	bne	1d65c <__assert_fail@plt+0xc148>
   1d630:	ldr	r0, [r4]
   1d634:	mov	r7, #12
   1d638:	sub	r0, sl, r0
   1d63c:	add	r1, r0, #1
   1d640:	mov	r0, #12
   1d644:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1d648:	ldr	r4, [sp, #44]	; 0x2c
   1d64c:	mov	r1, r0
   1d650:	cmp	r0, #0
   1d654:	str	r0, [r4, #8]
   1d658:	beq	1d9b0 <__assert_fail@plt+0xc49c>
   1d65c:	mov	r0, #9
   1d660:	ldr	r3, [r4]
   1d664:	ldr	r2, [r4, #4]
   1d668:	stm	sp, {r5, sl}
   1d66c:	str	r0, [sp, #8]
   1d670:	ldr	r0, [sp, #40]	; 0x28
   1d674:	bl	1e07c <__assert_fail@plt+0xcb68>
   1d678:	ldr	r4, [sp, #44]	; 0x2c
   1d67c:	mov	ip, r6
   1d680:	cmp	r0, #1
   1d684:	mov	r6, r9
   1d688:	beq	1d5fc <__assert_fail@plt+0xc0e8>
   1d68c:	cmp	r0, #0
   1d690:	bne	1d9ac <__assert_fail@plt+0xc498>
   1d694:	ldr	r1, [r4, #12]
   1d698:	ldr	r0, [r4, #16]
   1d69c:	ldr	r7, [sp, #40]	; 0x28
   1d6a0:	cmp	r0, r1
   1d6a4:	beq	1d740 <__assert_fail@plt+0xc22c>
   1d6a8:	mov	r0, #1
   1d6ac:	mov	r1, #20
   1d6b0:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1d6b4:	cmp	r0, #0
   1d6b8:	beq	1d9d4 <__assert_fail@plt+0xc4c0>
   1d6bc:	ldr	r1, [sp, #44]	; 0x2c
   1d6c0:	mov	r2, r0
   1d6c4:	ldr	r0, [r1, #16]
   1d6c8:	ldr	r3, [r1, #20]
   1d6cc:	str	r2, [r3, r0, lsl #2]
   1d6d0:	add	r0, r0, #1
   1d6d4:	stm	r2, {r5, sl}
   1d6d8:	ldr	r3, [sp, #48]	; 0x30
   1d6dc:	str	r0, [r1, #16]
   1d6e0:	ldr	r0, [sp, #52]	; 0x34
   1d6e4:	str	r0, [sp]
   1d6e8:	mov	r0, r7
   1d6ec:	bl	1df2c <__assert_fail@plt+0xca18>
   1d6f0:	cmp	r0, #1
   1d6f4:	bhi	1d9ac <__assert_fail@plt+0xc498>
   1d6f8:	ldr	ip, [r7, #4]
   1d6fc:	ldr	r4, [sp, #44]	; 0x2c
   1d700:	mov	r6, r9
   1d704:	b	1d5fc <__assert_fail@plt+0xc0e8>
   1d708:	ldr	r0, [r7, #48]	; 0x30
   1d70c:	cmp	r6, r0
   1d710:	bge	1d53c <__assert_fail@plt+0xc028>
   1d714:	add	r5, r6, #1
   1d718:	mov	r0, r7
   1d71c:	mov	r9, r6
   1d720:	mov	r1, r5
   1d724:	bl	1d9dc <__assert_fail@plt+0xc4c8>
   1d728:	cmp	r0, #0
   1d72c:	bne	1d9ac <__assert_fail@plt+0xc498>
   1d730:	ldr	ip, [r7, #4]
   1d734:	ldr	r4, [sp, #44]	; 0x2c
   1d738:	mov	r6, r9
   1d73c:	b	1d584 <__assert_fail@plt+0xc070>
   1d740:	mov	r1, #1
   1d744:	orr	r6, r1, r0, lsl #1
   1d748:	ldr	r0, [r4, #20]
   1d74c:	lsl	r1, r6, #2
   1d750:	bl	22004 <__assert_fail@plt+0x10af0>
   1d754:	cmp	r0, #0
   1d758:	beq	1d9d4 <__assert_fail@plt+0xc4c0>
   1d75c:	str	r6, [r4, #12]
   1d760:	str	r0, [r4, #20]
   1d764:	b	1d6a8 <__assert_fail@plt+0xc194>
   1d768:	ldr	r0, [r7, #108]	; 0x6c
   1d76c:	b	1d774 <__assert_fail@plt+0xc260>
   1d770:	mov	r0, r8
   1d774:	mov	r1, #0
   1d778:	cmp	r8, r0
   1d77c:	str	r1, [fp, #-32]	; 0xffffffe0
   1d780:	bge	1d980 <__assert_fail@plt+0xc46c>
   1d784:	add	r0, r8, r8, lsl #1
   1d788:	lsl	r4, r0, #3
   1d78c:	ldr	r0, [r7, #116]	; 0x74
   1d790:	ldr	r2, [sp, #48]	; 0x30
   1d794:	ldr	r1, [r0, r4]
   1d798:	cmp	r1, r2
   1d79c:	bne	1d968 <__assert_fail@plt+0xc454>
   1d7a0:	add	r0, r0, r4
   1d7a4:	ldr	r2, [sp, #52]	; 0x34
   1d7a8:	ldr	r1, [r0, #4]
   1d7ac:	cmp	r1, r2
   1d7b0:	bne	1d968 <__assert_fail@plt+0xc454>
   1d7b4:	ldr	r2, [r0, #8]
   1d7b8:	ldr	r3, [r0, #12]
   1d7bc:	ldr	r0, [sp, #24]
   1d7c0:	mov	r9, r8
   1d7c4:	ldr	r6, [r0, #24]
   1d7c8:	cmp	r3, r2
   1d7cc:	bne	1d7e8 <__assert_fail@plt+0xc2d4>
   1d7d0:	ldr	r1, [sp, #48]	; 0x30
   1d7d4:	ldr	r0, [r0, #20]
   1d7d8:	add	r1, r1, r1, lsl #1
   1d7dc:	add	r0, r0, r1, lsl #2
   1d7e0:	ldr	r0, [r0, #8]
   1d7e4:	b	1d7f4 <__assert_fail@plt+0xc2e0>
   1d7e8:	ldr	r0, [r0, #12]
   1d7ec:	ldr	r1, [sp, #48]	; 0x30
   1d7f0:	add	r0, r0, r1, lsl #2
   1d7f4:	ldr	r0, [r0]
   1d7f8:	ldr	r8, [sp, #52]	; 0x34
   1d7fc:	ldr	r5, [sp, #40]	; 0x28
   1d800:	str	r2, [fp, #-48]	; 0xffffffd0
   1d804:	str	r3, [sp, #44]	; 0x2c
   1d808:	add	r7, r0, r0, lsl #1
   1d80c:	add	r0, r3, r8
   1d810:	sub	sl, r0, r2
   1d814:	ldr	r2, [r5, #88]	; 0x58
   1d818:	mov	r0, r5
   1d81c:	sub	r1, sl, #1
   1d820:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1d824:	mov	r3, r0
   1d828:	ldr	r0, [r5, #100]	; 0x64
   1d82c:	ldr	r1, [r0, r8, lsl #2]
   1d830:	ldr	r2, [r0, sl, lsl #2]
   1d834:	cmp	r1, #0
   1d838:	beq	1d844 <__assert_fail@plt+0xc330>
   1d83c:	ldr	r0, [r1, #8]
   1d840:	b	1d848 <__assert_fail@plt+0xc334>
   1d844:	mov	r0, #0
   1d848:	add	r7, r6, r7, lsl #2
   1d84c:	str	r0, [sp, #36]	; 0x24
   1d850:	sub	r0, fp, #44	; 0x2c
   1d854:	cmp	r2, #0
   1d858:	mov	r8, r9
   1d85c:	beq	1d8c8 <__assert_fail@plt+0xc3b4>
   1d860:	ldr	r1, [r2, #40]	; 0x28
   1d864:	mov	r2, r7
   1d868:	mov	r6, r3
   1d86c:	mov	r5, r0
   1d870:	bl	1dc08 <__assert_fail@plt+0xc6f4>
   1d874:	cmp	r0, #0
   1d878:	str	r0, [fp, #-32]	; 0xffffffe0
   1d87c:	bne	1d9bc <__assert_fail@plt+0xc4a8>
   1d880:	ldr	r1, [sp, #24]
   1d884:	sub	r0, fp, #32
   1d888:	mov	r2, r5
   1d88c:	mov	r3, r6
   1d890:	bl	1c484 <__assert_fail@plt+0xaf70>
   1d894:	ldr	r5, [sp, #40]	; 0x28
   1d898:	ldr	r1, [r5, #100]	; 0x64
   1d89c:	str	r0, [r1, sl, lsl #2]
   1d8a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d8a4:	bl	22190 <__assert_fail@plt+0x10c7c>
   1d8a8:	ldr	r3, [r5, #100]	; 0x64
   1d8ac:	ldr	r1, [r3, sl, lsl #2]
   1d8b0:	cmp	r1, #0
   1d8b4:	bne	1d908 <__assert_fail@plt+0xc3f4>
   1d8b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d8bc:	cmp	r0, #0
   1d8c0:	beq	1d908 <__assert_fail@plt+0xc3f4>
   1d8c4:	b	1d9a4 <__assert_fail@plt+0xc490>
   1d8c8:	ldr	r1, [sp, #24]
   1d8cc:	sub	r0, fp, #32
   1d8d0:	mov	r2, r7
   1d8d4:	bl	1c484 <__assert_fail@plt+0xaf70>
   1d8d8:	ldr	r1, [r5, #100]	; 0x64
   1d8dc:	str	r0, [r1, sl, lsl #2]
   1d8e0:	ldr	r3, [r5, #100]	; 0x64
   1d8e4:	ldr	r1, [r3, sl, lsl #2]
   1d8e8:	cmp	r1, #0
   1d8ec:	bne	1d908 <__assert_fail@plt+0xc3f4>
   1d8f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d8f4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1d8f8:	ldr	r2, [sp, #44]	; 0x2c
   1d8fc:	cmp	r0, #0
   1d900:	beq	1d910 <__assert_fail@plt+0xc3fc>
   1d904:	b	1d9a4 <__assert_fail@plt+0xc490>
   1d908:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1d90c:	ldr	r2, [sp, #44]	; 0x2c
   1d910:	cmp	r2, r1
   1d914:	bne	1d968 <__assert_fail@plt+0xc454>
   1d918:	ldr	r1, [sp, #52]	; 0x34
   1d91c:	ldr	r0, [r3, r1, lsl #2]
   1d920:	ldr	r1, [sp, #36]	; 0x24
   1d924:	ldr	r0, [r0, #8]
   1d928:	cmp	r0, r1
   1d92c:	ble	1d968 <__assert_fail@plt+0xc454>
   1d930:	ldr	r5, [sp, #40]	; 0x28
   1d934:	ldr	r2, [sp, #52]	; 0x34
   1d938:	mov	r1, r7
   1d93c:	mov	r0, r5
   1d940:	bl	1d1d8 <__assert_fail@plt+0xbcc4>
   1d944:	cmp	r0, #0
   1d948:	str	r0, [fp, #-32]	; 0xffffffe0
   1d94c:	bne	1d9a4 <__assert_fail@plt+0xc490>
   1d950:	mov	r0, r5
   1d954:	mov	r1, r7
   1d958:	bl	1d2d0 <__assert_fail@plt+0xbdbc>
   1d95c:	cmp	r0, #0
   1d960:	str	r0, [fp, #-32]	; 0xffffffe0
   1d964:	bne	1d9a4 <__assert_fail@plt+0xc490>
   1d968:	ldr	r7, [sp, #40]	; 0x28
   1d96c:	add	r8, r8, #1
   1d970:	add	r4, r4, #24
   1d974:	ldr	r0, [r7, #108]	; 0x6c
   1d978:	cmp	r8, r0
   1d97c:	blt	1d78c <__assert_fail@plt+0xc278>
   1d980:	ldr	r1, [sp, #12]
   1d984:	ldr	r3, [sp, #20]
   1d988:	ldr	r2, [sp, #24]
   1d98c:	ldr	r0, [r1, #4]
   1d990:	add	r3, r3, #1
   1d994:	cmp	r3, r0
   1d998:	blt	1d308 <__assert_fail@plt+0xbdf4>
   1d99c:	mov	r0, #0
   1d9a0:	str	r0, [fp, #-32]	; 0xffffffe0
   1d9a4:	sub	sp, fp, #28
   1d9a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9ac:	mov	r7, r0
   1d9b0:	str	r7, [fp, #-32]	; 0xffffffe0
   1d9b4:	mov	r0, r7
   1d9b8:	b	1d9a4 <__assert_fail@plt+0xc490>
   1d9bc:	mov	r1, r0
   1d9c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d9c4:	mov	r4, r1
   1d9c8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1d9cc:	mov	r0, r4
   1d9d0:	b	1d9a4 <__assert_fail@plt+0xc490>
   1d9d4:	mov	r7, #12
   1d9d8:	b	1d9b0 <__assert_fail@plt+0xc49c>
   1d9dc:	push	{r4, r5, fp, lr}
   1d9e0:	add	fp, sp, #8
   1d9e4:	mov	r4, r0
   1d9e8:	ldr	r0, [r0, #36]	; 0x24
   1d9ec:	mov	r5, #12
   1d9f0:	cmn	r0, #-536870910	; 0xe0000002
   1d9f4:	bhi	1daac <__assert_fail@plt+0xc598>
   1d9f8:	ldr	r2, [r4, #48]	; 0x30
   1d9fc:	cmp	r2, r0, lsl #1
   1da00:	lslge	r2, r0, #1
   1da04:	mov	r0, r4
   1da08:	cmp	r2, r1
   1da0c:	movle	r2, r1
   1da10:	mov	r1, r2
   1da14:	bl	179d0 <__assert_fail@plt+0x64bc>
   1da18:	cmp	r0, #0
   1da1c:	bne	1da70 <__assert_fail@plt+0xc55c>
   1da20:	ldr	r0, [r4, #100]	; 0x64
   1da24:	cmp	r0, #0
   1da28:	beq	1da48 <__assert_fail@plt+0xc534>
   1da2c:	ldr	r1, [r4, #36]	; 0x24
   1da30:	mov	r2, #4
   1da34:	add	r1, r2, r1, lsl #2
   1da38:	bl	22004 <__assert_fail@plt+0x10af0>
   1da3c:	cmp	r0, #0
   1da40:	beq	1daac <__assert_fail@plt+0xc598>
   1da44:	str	r0, [r4, #100]	; 0x64
   1da48:	ldrb	r1, [r4, #72]	; 0x48
   1da4c:	ldr	r0, [r4, #80]	; 0x50
   1da50:	cmp	r1, #0
   1da54:	beq	1da78 <__assert_fail@plt+0xc564>
   1da58:	cmp	r0, #2
   1da5c:	blt	1da8c <__assert_fail@plt+0xc578>
   1da60:	mov	r0, r4
   1da64:	bl	17a70 <__assert_fail@plt+0x655c>
   1da68:	cmp	r0, #0
   1da6c:	beq	1daa8 <__assert_fail@plt+0xc594>
   1da70:	mov	r5, r0
   1da74:	b	1daac <__assert_fail@plt+0xc598>
   1da78:	cmp	r0, #2
   1da7c:	blt	1da98 <__assert_fail@plt+0xc584>
   1da80:	mov	r0, r4
   1da84:	bl	180ac <__assert_fail@plt+0x6b98>
   1da88:	b	1daa8 <__assert_fail@plt+0xc594>
   1da8c:	mov	r0, r4
   1da90:	bl	18040 <__assert_fail@plt+0x6b2c>
   1da94:	b	1daa8 <__assert_fail@plt+0xc594>
   1da98:	ldr	r0, [r4, #64]	; 0x40
   1da9c:	cmp	r0, #0
   1daa0:	movne	r0, r4
   1daa4:	blne	18298 <__assert_fail@plt+0x6d84>
   1daa8:	mov	r5, #0
   1daac:	mov	r0, r5
   1dab0:	pop	{r4, r5, fp, pc}
   1dab4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dab8:	add	fp, sp, #24
   1dabc:	sub	sp, sp, #16
   1dac0:	mov	r8, r0
   1dac4:	mov	r4, r1
   1dac8:	ldr	r5, [r1, #40]	; 0x28
   1dacc:	ldr	r7, [r1, #84]	; 0x54
   1dad0:	ldr	r0, [r1, #100]	; 0x64
   1dad4:	ldr	r1, [r1, #104]	; 0x68
   1dad8:	mov	r6, r2
   1dadc:	cmp	r5, r1
   1dae0:	ble	1daf0 <__assert_fail@plt+0xc5dc>
   1dae4:	str	r6, [r0, r5, lsl #2]
   1dae8:	str	r5, [r4, #104]	; 0x68
   1daec:	b	1db94 <__assert_fail@plt+0xc680>
   1daf0:	ldr	r1, [r0, r5, lsl #2]
   1daf4:	cmp	r1, #0
   1daf8:	beq	1db34 <__assert_fail@plt+0xc620>
   1dafc:	ldr	r2, [r1, #40]	; 0x28
   1db00:	cmp	r6, #0
   1db04:	beq	1db3c <__assert_fail@plt+0xc628>
   1db08:	ldr	r6, [r6, #40]	; 0x28
   1db0c:	mov	r0, sp
   1db10:	mov	r1, r6
   1db14:	bl	1dc08 <__assert_fail@plt+0xc6f4>
   1db18:	cmp	r0, #0
   1db1c:	str	r0, [r8]
   1db20:	bne	1dc00 <__assert_fail@plt+0xc6ec>
   1db24:	ldr	r0, [r4, #40]	; 0x28
   1db28:	clz	r1, r6
   1db2c:	lsr	r9, r1, #5
   1db30:	b	1db54 <__assert_fail@plt+0xc640>
   1db34:	str	r6, [r0, r5, lsl #2]
   1db38:	b	1db94 <__assert_fail@plt+0xc680>
   1db3c:	vldr	d16, [r2]
   1db40:	ldr	r0, [r2, #8]
   1db44:	mov	r9, #1
   1db48:	str	r0, [sp, #8]
   1db4c:	mov	r0, r5
   1db50:	vstr	d16, [sp]
   1db54:	ldr	r2, [r4, #88]	; 0x58
   1db58:	sub	r1, r0, #1
   1db5c:	mov	r0, r4
   1db60:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1db64:	mov	r3, r0
   1db68:	mov	r2, sp
   1db6c:	mov	r0, r8
   1db70:	mov	r1, r7
   1db74:	bl	1c484 <__assert_fail@plt+0xaf70>
   1db78:	mov	r6, r0
   1db7c:	ldr	r0, [r4, #100]	; 0x64
   1db80:	cmp	r9, #0
   1db84:	str	r6, [r0, r5, lsl #2]
   1db88:	bne	1db94 <__assert_fail@plt+0xc680>
   1db8c:	ldr	r0, [sp, #8]
   1db90:	bl	22190 <__assert_fail@plt+0x10c7c>
   1db94:	cmp	r6, #0
   1db98:	ldrne	r0, [r7, #76]	; 0x4c
   1db9c:	cmpne	r0, #0
   1dba0:	bne	1dbb0 <__assert_fail@plt+0xc69c>
   1dba4:	mov	r0, r6
   1dba8:	sub	sp, fp, #24
   1dbac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dbb0:	add	r7, r6, #4
   1dbb4:	mov	r0, r4
   1dbb8:	mov	r2, r5
   1dbbc:	mov	r1, r7
   1dbc0:	bl	1d1d8 <__assert_fail@plt+0xbcc4>
   1dbc4:	cmp	r0, #0
   1dbc8:	str	r0, [r8]
   1dbcc:	bne	1dc00 <__assert_fail@plt+0xc6ec>
   1dbd0:	ldrb	r0, [r6, #52]	; 0x34
   1dbd4:	tst	r0, #64	; 0x40
   1dbd8:	beq	1dba4 <__assert_fail@plt+0xc690>
   1dbdc:	mov	r0, r4
   1dbe0:	mov	r1, r7
   1dbe4:	bl	1d2d0 <__assert_fail@plt+0xbdbc>
   1dbe8:	str	r0, [r8]
   1dbec:	cmp	r0, #0
   1dbf0:	mov	r6, #0
   1dbf4:	ldreq	r0, [r4, #100]	; 0x64
   1dbf8:	ldreq	r6, [r0, r5, lsl #2]
   1dbfc:	b	1dba4 <__assert_fail@plt+0xc690>
   1dc00:	mov	r6, #0
   1dc04:	b	1dba4 <__assert_fail@plt+0xc690>
   1dc08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc0c:	add	fp, sp, #28
   1dc10:	sub	sp, sp, #20
   1dc14:	mov	r8, r2
   1dc18:	cmp	r1, #0
   1dc1c:	str	r0, [sp, #16]
   1dc20:	beq	1dd5c <__assert_fail@plt+0xc848>
   1dc24:	ldr	r0, [r1, #4]
   1dc28:	mov	r6, r1
   1dc2c:	cmp	r8, #0
   1dc30:	beq	1dd48 <__assert_fail@plt+0xc834>
   1dc34:	cmp	r0, #1
   1dc38:	blt	1dd48 <__assert_fail@plt+0xc834>
   1dc3c:	ldr	r1, [r8, #4]
   1dc40:	cmp	r1, #1
   1dc44:	blt	1dd48 <__assert_fail@plt+0xc834>
   1dc48:	ldr	r4, [sp, #16]
   1dc4c:	add	r0, r1, r0
   1dc50:	str	r0, [r4]
   1dc54:	lsl	r0, r0, #2
   1dc58:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1dc5c:	cmp	r0, #0
   1dc60:	str	r0, [r4, #8]
   1dc64:	beq	1de08 <__assert_fail@plt+0xc8f4>
   1dc68:	ldr	r9, [r8, #4]
   1dc6c:	ldr	lr, [r6, #4]
   1dc70:	mov	r7, #0
   1dc74:	mov	r1, #0
   1dc78:	cmp	r9, #0
   1dc7c:	movwgt	r1, #1
   1dc80:	cmp	lr, #1
   1dc84:	blt	1dd9c <__assert_fail@plt+0xc888>
   1dc88:	mov	r2, #0
   1dc8c:	mov	ip, #0
   1dc90:	str	r2, [sp, #8]
   1dc94:	mov	r2, #0
   1dc98:	str	r2, [sp, #12]
   1dc9c:	mov	r2, #0
   1dca0:	ldr	r4, [sp, #12]
   1dca4:	mov	r7, ip
   1dca8:	tst	r1, #1
   1dcac:	beq	1ddcc <__assert_fail@plt+0xc8b8>
   1dcb0:	ldr	r1, [r8, #8]
   1dcb4:	ldr	r3, [r1, r7, lsl #2]
   1dcb8:	ldr	r1, [r6, #8]
   1dcbc:	ldr	sl, [r1, r2, lsl #2]
   1dcc0:	cmp	sl, r3
   1dcc4:	ble	1dcec <__assert_fail@plt+0xc7d8>
   1dcc8:	add	r7, r7, #1
   1dccc:	str	r3, [r0, r4, lsl #2]
   1dcd0:	mov	r1, #0
   1dcd4:	add	r4, r4, #1
   1dcd8:	cmp	r9, r7
   1dcdc:	movwgt	r1, #1
   1dce0:	cmp	lr, r2
   1dce4:	bgt	1dca8 <__assert_fail@plt+0xc794>
   1dce8:	b	1dda0 <__assert_fail@plt+0xc88c>
   1dcec:	add	r1, r7, #1
   1dcf0:	str	sl, [r0, r4, lsl #2]
   1dcf4:	mov	ip, r7
   1dcf8:	add	r2, r2, #1
   1dcfc:	str	r1, [sp, #4]
   1dd00:	ldr	r9, [r8, #4]
   1dd04:	ldr	lr, [r6, #4]
   1dd08:	moveq	ip, r1
   1dd0c:	mov	r1, #0
   1dd10:	ldr	r5, [sp, #8]
   1dd14:	cmp	r9, ip
   1dd18:	sub	r5, r5, #1
   1dd1c:	movwgt	r1, #1
   1dd20:	cmp	lr, r2
   1dd24:	str	r5, [sp, #8]
   1dd28:	add	r5, r4, #1
   1dd2c:	str	r5, [sp, #12]
   1dd30:	bgt	1dca0 <__assert_fail@plt+0xc78c>
   1dd34:	ldr	r2, [sp, #4]
   1dd38:	cmp	sl, r3
   1dd3c:	add	r4, r4, #1
   1dd40:	moveq	r7, r2
   1dd44:	b	1dda0 <__assert_fail@plt+0xc88c>
   1dd48:	cmp	r0, #1
   1dd4c:	blt	1dd5c <__assert_fail@plt+0xc848>
   1dd50:	ldr	r0, [sp, #16]
   1dd54:	mov	r1, r6
   1dd58:	b	1dd78 <__assert_fail@plt+0xc864>
   1dd5c:	cmp	r8, #0
   1dd60:	beq	1dd84 <__assert_fail@plt+0xc870>
   1dd64:	ldr	r0, [r8, #4]
   1dd68:	cmp	r0, #1
   1dd6c:	blt	1dd84 <__assert_fail@plt+0xc870>
   1dd70:	ldr	r0, [sp, #16]
   1dd74:	mov	r1, r8
   1dd78:	sub	sp, fp, #28
   1dd7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd80:	b	1c3a0 <__assert_fail@plt+0xae8c>
   1dd84:	ldr	r1, [sp, #16]
   1dd88:	mov	r0, #0
   1dd8c:	str	r0, [r1]
   1dd90:	str	r0, [r1, #4]
   1dd94:	str	r0, [r1, #8]
   1dd98:	b	1de00 <__assert_fail@plt+0xc8ec>
   1dd9c:	mov	r4, #0
   1dda0:	cmp	r1, #0
   1dda4:	beq	1ddf4 <__assert_fail@plt+0xc8e0>
   1dda8:	ldr	r1, [r8, #8]
   1ddac:	sub	r2, r9, r7
   1ddb0:	add	r0, r0, r4, lsl #2
   1ddb4:	lsl	r2, r2, #2
   1ddb8:	add	r1, r1, r7, lsl #2
   1ddbc:	bl	112a4 <memcpy@plt>
   1ddc0:	sub	r0, r4, r7
   1ddc4:	add	r4, r0, r9
   1ddc8:	b	1ddf4 <__assert_fail@plt+0xc8e0>
   1ddcc:	ldr	r1, [r6, #8]
   1ddd0:	add	r0, r0, r4, lsl #2
   1ddd4:	add	r1, r1, r2, lsl #2
   1ddd8:	sub	r2, lr, r2
   1dddc:	lsl	r2, r2, #2
   1dde0:	bl	112a4 <memcpy@plt>
   1dde4:	ldr	r0, [r6, #4]
   1dde8:	ldr	r1, [sp, #8]
   1ddec:	add	r0, r0, r1
   1ddf0:	add	r4, r0, r4
   1ddf4:	ldr	r0, [sp, #16]
   1ddf8:	str	r4, [r0, #4]
   1ddfc:	mov	r0, #0
   1de00:	sub	sp, fp, #28
   1de04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de08:	mov	r0, #12
   1de0c:	b	1de00 <__assert_fail@plt+0xc8ec>
   1de10:	push	{r4, r5, r6, r7, fp, lr}
   1de14:	add	fp, sp, #16
   1de18:	ldr	lr, [r0, #108]	; 0x6c
   1de1c:	mov	ip, r0
   1de20:	cmp	lr, #1
   1de24:	blt	1de68 <__assert_fail@plt+0xc954>
   1de28:	ldr	r2, [ip, #116]	; 0x74
   1de2c:	mov	r0, #0
   1de30:	mov	r3, #1
   1de34:	mov	r4, lr
   1de38:	add	r5, r0, r4
   1de3c:	add	r5, r5, r5, lsr #31
   1de40:	asr	r6, r5, #1
   1de44:	add	r7, r6, r6, lsl #1
   1de48:	add	r7, r2, r7, lsl #3
   1de4c:	ldr	r7, [r7, #4]
   1de50:	cmp	r7, r1
   1de54:	addlt	r0, r3, r5, asr #1
   1de58:	movge	r4, r6
   1de5c:	cmp	r0, r4
   1de60:	blt	1de38 <__assert_fail@plt+0xc924>
   1de64:	b	1de6c <__assert_fail@plt+0xc958>
   1de68:	mov	r0, #0
   1de6c:	cmp	r0, lr
   1de70:	bge	1de90 <__assert_fail@plt+0xc97c>
   1de74:	ldr	r2, [ip, #116]	; 0x74
   1de78:	add	r3, r0, r0, lsl #1
   1de7c:	add	r2, r2, r3, lsl #3
   1de80:	ldr	r2, [r2, #4]
   1de84:	cmp	r2, r1
   1de88:	mvnne	r0, #0
   1de8c:	pop	{r4, r5, r6, r7, fp, pc}
   1de90:	mvn	r0, #0
   1de94:	pop	{r4, r5, r6, r7, fp, pc}
   1de98:	push	{r4, r5, r6, r7, fp, lr}
   1de9c:	add	fp, sp, #16
   1dea0:	mov	r5, r0
   1dea4:	ldr	r0, [r0, #36]	; 0x24
   1dea8:	mov	r4, r1
   1deac:	ldr	r7, [r5, #104]	; 0x68
   1deb0:	cmp	r0, r1
   1deb4:	bgt	1dec4 <__assert_fail@plt+0xc9b0>
   1deb8:	ldr	r1, [r5, #48]	; 0x30
   1debc:	cmp	r0, r1
   1dec0:	blt	1dedc <__assert_fail@plt+0xc9c8>
   1dec4:	ldr	r0, [r5, #28]
   1dec8:	cmp	r0, r4
   1decc:	bgt	1def4 <__assert_fail@plt+0xc9e0>
   1ded0:	ldr	r1, [r5, #48]	; 0x30
   1ded4:	cmp	r0, r1
   1ded8:	bge	1def4 <__assert_fail@plt+0xc9e0>
   1dedc:	add	r1, r4, #1
   1dee0:	mov	r0, r5
   1dee4:	bl	1d9dc <__assert_fail@plt+0xc4c8>
   1dee8:	mov	r6, r0
   1deec:	cmp	r0, #0
   1def0:	bne	1df24 <__assert_fail@plt+0xca10>
   1def4:	mov	r6, #0
   1def8:	cmp	r7, r4
   1defc:	bge	1df24 <__assert_fail@plt+0xca10>
   1df00:	sub	r0, r4, r7
   1df04:	mov	r1, #0
   1df08:	mov	r6, #0
   1df0c:	lsl	r2, r0, #2
   1df10:	ldr	r0, [r5, #100]	; 0x64
   1df14:	add	r0, r0, r7, lsl #2
   1df18:	add	r0, r0, #4
   1df1c:	bl	11418 <memset@plt>
   1df20:	str	r4, [r5, #104]	; 0x68
   1df24:	mov	r0, r6
   1df28:	pop	{r4, r5, r6, r7, fp, pc}
   1df2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df30:	add	fp, sp, #28
   1df34:	sub	sp, sp, #12
   1df38:	mov	r6, r2
   1df3c:	mov	r4, r0
   1df40:	mov	r0, #8
   1df44:	mov	r7, r3
   1df48:	ldr	r2, [r2]
   1df4c:	mov	r8, r1
   1df50:	ldr	r3, [r6, #4]
   1df54:	str	r0, [sp, #8]
   1df58:	add	r1, r6, #8
   1df5c:	mov	r0, r4
   1df60:	ldr	r5, [fp, #8]
   1df64:	str	r7, [sp]
   1df68:	str	r5, [sp, #4]
   1df6c:	bl	1e07c <__assert_fail@plt+0xcb68>
   1df70:	cmp	r0, #0
   1df74:	beq	1df80 <__assert_fail@plt+0xca6c>
   1df78:	sub	sp, fp, #28
   1df7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df80:	ldr	r0, [r4, #108]	; 0x6c
   1df84:	ldr	r1, [r4, #112]	; 0x70
   1df88:	ldr	r9, [r6, #4]
   1df8c:	ldr	sl, [r8]
   1df90:	cmp	r0, r1
   1df94:	blt	1dfe4 <__assert_fail@plt+0xcad0>
   1df98:	ldr	r0, [r4, #116]	; 0x74
   1df9c:	add	r1, r1, r1, lsl #1
   1dfa0:	lsl	r1, r1, #4
   1dfa4:	bl	22004 <__assert_fail@plt+0x10af0>
   1dfa8:	cmp	r0, #0
   1dfac:	beq	1e06c <__assert_fail@plt+0xcb58>
   1dfb0:	str	r0, [r4, #116]	; 0x74
   1dfb4:	ldr	r1, [r4, #108]	; 0x6c
   1dfb8:	ldr	r2, [r4, #112]	; 0x70
   1dfbc:	add	r1, r1, r1, lsl #1
   1dfc0:	add	r0, r0, r1, lsl #3
   1dfc4:	add	r1, r2, r2, lsl #1
   1dfc8:	lsl	r2, r1, #3
   1dfcc:	mov	r1, #0
   1dfd0:	bl	11418 <memset@plt>
   1dfd4:	ldr	r1, [r4, #112]	; 0x70
   1dfd8:	ldr	r0, [r4, #108]	; 0x6c
   1dfdc:	lsl	r1, r1, #1
   1dfe0:	str	r1, [r4, #112]	; 0x70
   1dfe4:	ldr	r1, [r4, #116]	; 0x74
   1dfe8:	cmp	r0, #1
   1dfec:	blt	1e00c <__assert_fail@plt+0xcaf8>
   1dff0:	sub	r2, r0, #1
   1dff4:	add	r2, r2, r2, lsl #1
   1dff8:	add	r2, r1, r2, lsl #3
   1dffc:	ldr	r3, [r2, #4]
   1e000:	cmp	r3, r5
   1e004:	moveq	r3, #1
   1e008:	strbeq	r3, [r2, #20]
   1e00c:	add	r2, r0, r0, lsl #1
   1e010:	cmp	r9, sl
   1e014:	mov	r3, #0
   1e018:	mov	ip, #0
   1e01c:	add	r0, r0, #1
   1e020:	mvneq	r3, #0
   1e024:	str	r7, [r1, r2, lsl #3]!
   1e028:	stmib	r1, {r5, sl}
   1e02c:	str	r9, [r1, #12]
   1e030:	str	r3, [r1, #16]
   1e034:	str	r0, [r4, #108]	; 0x6c
   1e038:	strb	ip, [r1, #20]
   1e03c:	sub	r0, r9, sl
   1e040:	ldr	r1, [r4, #120]	; 0x78
   1e044:	cmp	r1, r0
   1e048:	strlt	r0, [r4, #120]	; 0x78
   1e04c:	ldr	r0, [r6, #4]
   1e050:	ldr	r1, [r8]
   1e054:	add	r0, r0, r5
   1e058:	sub	r1, r0, r1
   1e05c:	mov	r0, r4
   1e060:	sub	sp, fp, #28
   1e064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e068:	b	1de98 <__assert_fail@plt+0xc984>
   1e06c:	ldr	r0, [r4, #116]	; 0x74
   1e070:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e074:	mov	r0, #12
   1e078:	b	1df78 <__assert_fail@plt+0xca64>
   1e07c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e080:	add	fp, sp, #28
   1e084:	sub	sp, sp, #84	; 0x54
   1e088:	ldr	sl, [r0, #84]	; 0x54
   1e08c:	mov	r6, r3
   1e090:	mov	r3, r1
   1e094:	mov	r1, #0
   1e098:	ldr	r5, [fp, #12]
   1e09c:	mov	r8, r2
   1e0a0:	str	r0, [sp, #36]	; 0x24
   1e0a4:	str	r1, [fp, #-52]	; 0xffffffcc
   1e0a8:	ldr	r4, [r3, #4]
   1e0ac:	ldr	r1, [sl]
   1e0b0:	str	sl, [sp, #20]
   1e0b4:	ldr	r7, [r1, r2, lsl #3]
   1e0b8:	ldr	r1, [r0, #120]	; 0x78
   1e0bc:	add	r2, r1, r5
   1e0c0:	cmp	r4, r2
   1e0c4:	str	r7, [sp, #24]
   1e0c8:	ble	1e584 <__assert_fail@plt+0xd070>
   1e0cc:	ldr	r1, [r0, #40]	; 0x28
   1e0d0:	ldr	r4, [r3]
   1e0d4:	ldr	r2, [r0, #88]	; 0x58
   1e0d8:	ldr	r9, [r3, #8]
   1e0dc:	str	r3, [sp, #16]
   1e0e0:	str	r1, [sp, #12]
   1e0e4:	ldr	r1, [r0, #100]	; 0x64
   1e0e8:	cmp	r4, #0
   1e0ec:	str	r9, [r0, #100]	; 0x64
   1e0f0:	moveq	r4, r6
   1e0f4:	str	r4, [r0, #40]	; 0x28
   1e0f8:	str	r1, [sp, #8]
   1e0fc:	sub	r1, r4, #1
   1e100:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1e104:	cmp	r4, r6
   1e108:	bne	1e1d0 <__assert_fail@plt+0xccbc>
   1e10c:	str	r0, [sp, #44]	; 0x2c
   1e110:	mov	r0, #1
   1e114:	str	r0, [sp, #52]	; 0x34
   1e118:	str	r0, [sp, #48]	; 0x30
   1e11c:	mov	r0, #4
   1e120:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1e124:	cmp	r0, #0
   1e128:	str	r0, [sp, #56]	; 0x38
   1e12c:	beq	1e600 <__assert_fail@plt+0xd0ec>
   1e130:	ldr	r3, [fp, #16]
   1e134:	str	r8, [r0]
   1e138:	mov	r0, #0
   1e13c:	add	r1, sp, #48	; 0x30
   1e140:	mov	r2, r7
   1e144:	str	r0, [fp, #-52]	; 0xffffffcc
   1e148:	mov	r0, sl
   1e14c:	bl	1e620 <__assert_fail@plt+0xd10c>
   1e150:	ldr	r8, [sp, #36]	; 0x24
   1e154:	cmp	r0, #0
   1e158:	mov	r9, r5
   1e15c:	str	r0, [fp, #-52]	; 0xffffffcc
   1e160:	bne	1e5f0 <__assert_fail@plt+0xd0dc>
   1e164:	ldr	r0, [sp, #52]	; 0x34
   1e168:	cmp	r0, #0
   1e16c:	beq	1e198 <__assert_fail@plt+0xcc84>
   1e170:	ldr	r0, [fp, #16]
   1e174:	ldr	r3, [sp, #24]
   1e178:	add	r1, sp, #48	; 0x30
   1e17c:	mov	r2, r4
   1e180:	str	r0, [sp]
   1e184:	mov	r0, r8
   1e188:	bl	1e750 <__assert_fail@plt+0xd23c>
   1e18c:	cmp	r0, #0
   1e190:	str	r0, [fp, #-52]	; 0xffffffcc
   1e194:	bne	1e5f0 <__assert_fail@plt+0xd0dc>
   1e198:	ldr	r3, [sp, #44]	; 0x2c
   1e19c:	sub	r0, fp, #52	; 0x34
   1e1a0:	add	r2, sp, #48	; 0x30
   1e1a4:	mov	r1, sl
   1e1a8:	bl	1c484 <__assert_fail@plt+0xaf70>
   1e1ac:	mov	r6, r0
   1e1b0:	cmp	r0, #0
   1e1b4:	bne	1e1c4 <__assert_fail@plt+0xccb0>
   1e1b8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1e1bc:	cmp	r0, #0
   1e1c0:	bne	1e56c <__assert_fail@plt+0xd058>
   1e1c4:	ldr	r0, [r8, #100]	; 0x64
   1e1c8:	str	r6, [r0, r4, lsl #2]
   1e1cc:	b	1e248 <__assert_fail@plt+0xcd34>
   1e1d0:	ldr	r6, [r9, r4, lsl #2]
   1e1d4:	cmp	r6, #0
   1e1d8:	beq	1e204 <__assert_fail@plt+0xccf0>
   1e1dc:	ldrb	r1, [r6, #52]	; 0x34
   1e1e0:	ldr	r8, [sp, #36]	; 0x24
   1e1e4:	mov	r9, r5
   1e1e8:	tst	r1, #64	; 0x40
   1e1ec:	bne	1e220 <__assert_fail@plt+0xcd0c>
   1e1f0:	mov	r0, #0
   1e1f4:	str	r0, [sp, #52]	; 0x34
   1e1f8:	str	r0, [sp, #48]	; 0x30
   1e1fc:	str	r0, [sp, #56]	; 0x38
   1e200:	b	1e248 <__assert_fail@plt+0xcd34>
   1e204:	ldr	r8, [sp, #36]	; 0x24
   1e208:	mov	r6, #0
   1e20c:	mov	r9, r5
   1e210:	str	r6, [sp, #52]	; 0x34
   1e214:	str	r6, [sp, #48]	; 0x30
   1e218:	str	r6, [sp, #56]	; 0x38
   1e21c:	b	1e248 <__assert_fail@plt+0xcd34>
   1e220:	str	r0, [sp, #44]	; 0x2c
   1e224:	add	r1, r6, #4
   1e228:	add	r0, sp, #48	; 0x30
   1e22c:	bl	1c3a0 <__assert_fail@plt+0xae8c>
   1e230:	cmp	r0, #0
   1e234:	str	r0, [fp, #-52]	; 0xffffffcc
   1e238:	bne	1e618 <__assert_fail@plt+0xd104>
   1e23c:	ldrb	r0, [r6, #52]	; 0x34
   1e240:	tst	r0, #64	; 0x40
   1e244:	bne	1e164 <__assert_fail@plt+0xcc50>
   1e248:	cmp	r4, r9
   1e24c:	bge	1e500 <__assert_fail@plt+0xcfec>
   1e250:	str	r4, [sp, #44]	; 0x2c
   1e254:	ldr	r4, [sp, #24]
   1e258:	add	r5, sp, #48	; 0x30
   1e25c:	mov	r1, #0
   1e260:	ldr	r0, [r8, #120]	; 0x78
   1e264:	cmp	r1, r0
   1e268:	bgt	1e4fc <__assert_fail@plt+0xcfe8>
   1e26c:	mov	r0, #0
   1e270:	str	r1, [sp, #32]
   1e274:	ldr	r1, [sp, #44]	; 0x2c
   1e278:	str	r0, [sp, #52]	; 0x34
   1e27c:	ldr	r0, [r8, #100]	; 0x64
   1e280:	add	r7, r1, #1
   1e284:	ldr	r0, [r0, r7, lsl #2]
   1e288:	cmp	r0, #0
   1e28c:	beq	1e2a8 <__assert_fail@plt+0xcd94>
   1e290:	add	r1, r0, #4
   1e294:	mov	r0, r5
   1e298:	bl	1bff8 <__assert_fail@plt+0xaae4>
   1e29c:	cmp	r0, #0
   1e2a0:	str	r0, [fp, #-52]	; 0xffffffcc
   1e2a4:	bne	1e56c <__assert_fail@plt+0xd058>
   1e2a8:	cmp	r6, #0
   1e2ac:	beq	1e434 <__assert_fail@plt+0xcf20>
   1e2b0:	mov	r0, #0
   1e2b4:	str	r7, [sp, #28]
   1e2b8:	ldr	r7, [r8, #84]	; 0x54
   1e2bc:	str	r0, [fp, #-32]	; 0xffffffe0
   1e2c0:	str	r0, [fp, #-44]	; 0xffffffd4
   1e2c4:	str	r0, [fp, #-48]	; 0xffffffd0
   1e2c8:	str	r0, [fp, #-40]	; 0xffffffd8
   1e2cc:	ldr	r1, [r6, #20]
   1e2d0:	cmp	r1, #1
   1e2d4:	blt	1e420 <__assert_fail@plt+0xcf0c>
   1e2d8:	ldr	r4, [sp, #44]	; 0x2c
   1e2dc:	mov	r5, #0
   1e2e0:	str	r6, [sp, #40]	; 0x28
   1e2e4:	ldr	r0, [r6, #24]
   1e2e8:	ldr	sl, [r0, r5, lsl #2]
   1e2ec:	ldr	r0, [r7]
   1e2f0:	add	r1, r0, sl, lsl #3
   1e2f4:	ldrb	r1, [r1, #6]
   1e2f8:	tst	r1, #16
   1e2fc:	bne	1e31c <__assert_fail@plt+0xce08>
   1e300:	add	r1, r0, sl, lsl #3
   1e304:	mov	r0, r8
   1e308:	mov	r2, r4
   1e30c:	bl	1f014 <__assert_fail@plt+0xdb00>
   1e310:	cmp	r0, #0
   1e314:	bne	1e3d8 <__assert_fail@plt+0xcec4>
   1e318:	b	1e3f0 <__assert_fail@plt+0xcedc>
   1e31c:	mov	r0, r7
   1e320:	mov	r1, sl
   1e324:	mov	r2, r8
   1e328:	mov	r3, r4
   1e32c:	bl	1ed1c <__assert_fail@plt+0xd808>
   1e330:	cmp	r0, #2
   1e334:	blt	1e3d0 <__assert_fail@plt+0xcebc>
   1e338:	add	r4, r0, r4
   1e33c:	ldr	r0, [r8, #100]	; 0x64
   1e340:	ldr	r1, [r7, #12]
   1e344:	sub	r8, fp, #48	; 0x30
   1e348:	ldr	r0, [r0, r4, lsl #2]
   1e34c:	ldr	r6, [r1, sl, lsl #2]
   1e350:	mov	r1, #0
   1e354:	str	r1, [fp, #-44]	; 0xffffffd4
   1e358:	cmp	r0, #0
   1e35c:	beq	1e378 <__assert_fail@plt+0xce64>
   1e360:	add	r1, r0, #4
   1e364:	mov	r0, r8
   1e368:	bl	1bff8 <__assert_fail@plt+0xaae4>
   1e36c:	cmp	r0, #0
   1e370:	str	r0, [fp, #-32]	; 0xffffffe0
   1e374:	bne	1e57c <__assert_fail@plt+0xd068>
   1e378:	mov	r0, r8
   1e37c:	mov	r1, r6
   1e380:	bl	1c204 <__assert_fail@plt+0xacf0>
   1e384:	cmp	r0, #0
   1e388:	beq	1e55c <__assert_fail@plt+0xd048>
   1e38c:	sub	r0, fp, #32
   1e390:	mov	r1, r7
   1e394:	mov	r2, r8
   1e398:	bl	1eb24 <__assert_fail@plt+0xd610>
   1e39c:	ldr	r8, [sp, #36]	; 0x24
   1e3a0:	ldr	r6, [sp, #40]	; 0x28
   1e3a4:	ldr	r1, [r8, #100]	; 0x64
   1e3a8:	str	r0, [r1, r4, lsl #2]
   1e3ac:	ldr	r0, [r8, #100]	; 0x64
   1e3b0:	ldr	r0, [r0, r4, lsl #2]
   1e3b4:	ldr	r4, [sp, #44]	; 0x2c
   1e3b8:	cmp	r0, #0
   1e3bc:	bne	1e3d8 <__assert_fail@plt+0xcec4>
   1e3c0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1e3c4:	cmp	r9, #0
   1e3c8:	beq	1e3d8 <__assert_fail@plt+0xcec4>
   1e3cc:	b	1e560 <__assert_fail@plt+0xd04c>
   1e3d0:	cmp	r0, #0
   1e3d4:	beq	1e404 <__assert_fail@plt+0xcef0>
   1e3d8:	ldr	r0, [r7, #12]
   1e3dc:	ldr	r1, [r0, sl, lsl #2]
   1e3e0:	add	r0, sp, #48	; 0x30
   1e3e4:	bl	1c204 <__assert_fail@plt+0xacf0>
   1e3e8:	cmp	r0, #0
   1e3ec:	beq	1e55c <__assert_fail@plt+0xd048>
   1e3f0:	ldr	r0, [r6, #20]
   1e3f4:	add	r5, r5, #1
   1e3f8:	cmp	r5, r0
   1e3fc:	blt	1e2e4 <__assert_fail@plt+0xcdd0>
   1e400:	b	1e40c <__assert_fail@plt+0xcef8>
   1e404:	ldr	r0, [r7]
   1e408:	b	1e300 <__assert_fail@plt+0xcdec>
   1e40c:	ldr	r5, [fp, #12]
   1e410:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e414:	ldr	sl, [sp, #20]
   1e418:	mov	r9, r5
   1e41c:	add	r5, sp, #48	; 0x30
   1e420:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e424:	ldr	r4, [sp, #24]
   1e428:	ldr	r7, [sp, #28]
   1e42c:	mov	r0, #0
   1e430:	str	r0, [fp, #-52]	; 0xffffffcc
   1e434:	ldr	r0, [sp, #52]	; 0x34
   1e438:	cmp	r0, #0
   1e43c:	beq	1e490 <__assert_fail@plt+0xcf7c>
   1e440:	mov	r6, r7
   1e444:	ldr	r7, [fp, #16]
   1e448:	mov	r0, sl
   1e44c:	mov	r1, r5
   1e450:	mov	r2, r4
   1e454:	mov	r3, r7
   1e458:	bl	1e620 <__assert_fail@plt+0xd10c>
   1e45c:	cmp	r0, #0
   1e460:	str	r0, [fp, #-52]	; 0xffffffcc
   1e464:	bne	1e56c <__assert_fail@plt+0xd058>
   1e468:	mov	r0, r8
   1e46c:	mov	r1, r5
   1e470:	mov	r2, r6
   1e474:	mov	r3, r4
   1e478:	str	r7, [sp]
   1e47c:	mov	r7, r6
   1e480:	bl	1e750 <__assert_fail@plt+0xd23c>
   1e484:	cmp	r0, #0
   1e488:	str	r0, [fp, #-52]	; 0xffffffcc
   1e48c:	bne	1e56c <__assert_fail@plt+0xd058>
   1e490:	ldr	r2, [r8, #88]	; 0x58
   1e494:	ldr	r1, [sp, #44]	; 0x2c
   1e498:	mov	r0, r8
   1e49c:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1e4a0:	mov	r3, r0
   1e4a4:	sub	r0, fp, #52	; 0x34
   1e4a8:	mov	r1, sl
   1e4ac:	mov	r2, r5
   1e4b0:	bl	1c484 <__assert_fail@plt+0xaf70>
   1e4b4:	mov	r6, r0
   1e4b8:	cmp	r0, #0
   1e4bc:	bne	1e4cc <__assert_fail@plt+0xcfb8>
   1e4c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1e4c4:	cmp	r0, #0
   1e4c8:	bne	1e56c <__assert_fail@plt+0xd058>
   1e4cc:	ldr	r0, [r8, #100]	; 0x64
   1e4d0:	ldr	r1, [sp, #32]
   1e4d4:	cmp	r6, #0
   1e4d8:	str	r7, [sp, #44]	; 0x2c
   1e4dc:	str	r6, [r0, r7, lsl #2]
   1e4e0:	mov	r0, #0
   1e4e4:	addeq	r0, r1, #1
   1e4e8:	cmp	r7, r9
   1e4ec:	mov	r1, r0
   1e4f0:	bne	1e260 <__assert_fail@plt+0xcd4c>
   1e4f4:	mov	r4, r9
   1e4f8:	b	1e500 <__assert_fail@plt+0xcfec>
   1e4fc:	ldr	r4, [sp, #44]	; 0x2c
   1e500:	ldr	r0, [sp, #56]	; 0x38
   1e504:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e508:	ldr	r0, [r8, #100]	; 0x64
   1e50c:	ldr	r1, [sp, #16]
   1e510:	ldr	r0, [r0, r9, lsl #2]
   1e514:	str	r4, [r1]
   1e518:	ldr	r1, [sp, #12]
   1e51c:	str	r1, [r8, #40]	; 0x28
   1e520:	ldr	r1, [sp, #8]
   1e524:	cmp	r0, #0
   1e528:	str	r1, [r8, #100]	; 0x64
   1e52c:	beq	1e54c <__assert_fail@plt+0xd038>
   1e530:	ldr	r1, [fp, #8]
   1e534:	add	r0, r0, #4
   1e538:	bl	1c41c <__assert_fail@plt+0xaf08>
   1e53c:	cmp	r0, #0
   1e540:	mov	r7, #0
   1e544:	moveq	r7, #1
   1e548:	b	1e550 <__assert_fail@plt+0xd03c>
   1e54c:	mov	r7, #1
   1e550:	mov	r0, r7
   1e554:	sub	sp, fp, #28
   1e558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e55c:	mov	r9, #12
   1e560:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e564:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e568:	str	r9, [fp, #-52]	; 0xffffffcc
   1e56c:	ldr	r0, [sp, #56]	; 0x38
   1e570:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e574:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1e578:	b	1e550 <__assert_fail@plt+0xd03c>
   1e57c:	mov	r9, r0
   1e580:	b	1e560 <__assert_fail@plt+0xd04c>
   1e584:	mvn	r1, #-2147483648	; 0x80000000
   1e588:	mov	r7, #12
   1e58c:	sub	r1, r1, r4
   1e590:	cmp	r1, r2
   1e594:	ble	1e550 <__assert_fail@plt+0xd03c>
   1e598:	add	r9, r2, #1
   1e59c:	add	r5, r9, r4
   1e5a0:	cmn	r5, #-1073741823	; 0xc0000001
   1e5a4:	bhi	1e550 <__assert_fail@plt+0xd03c>
   1e5a8:	ldr	r0, [r3, #8]
   1e5ac:	lsl	r1, r5, #2
   1e5b0:	mov	sl, r3
   1e5b4:	bl	22004 <__assert_fail@plt+0x10af0>
   1e5b8:	cmp	r0, #0
   1e5bc:	beq	1e550 <__assert_fail@plt+0xd03c>
   1e5c0:	str	r5, [sl, #4]
   1e5c4:	str	r0, [sl, #8]
   1e5c8:	add	r0, r0, r4, lsl #2
   1e5cc:	lsl	r2, r9, #2
   1e5d0:	mov	r1, #0
   1e5d4:	bl	11418 <memset@plt>
   1e5d8:	mov	r3, sl
   1e5dc:	ldr	r0, [sp, #36]	; 0x24
   1e5e0:	ldr	r5, [fp, #12]
   1e5e4:	ldr	sl, [sp, #20]
   1e5e8:	ldr	r7, [sp, #24]
   1e5ec:	b	1e0cc <__assert_fail@plt+0xcbb8>
   1e5f0:	mov	r7, r0
   1e5f4:	ldr	r0, [sp, #56]	; 0x38
   1e5f8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e5fc:	b	1e550 <__assert_fail@plt+0xd03c>
   1e600:	mov	r0, #0
   1e604:	mov	r7, #12
   1e608:	str	r0, [sp, #48]	; 0x30
   1e60c:	str	r0, [sp, #52]	; 0x34
   1e610:	str	r7, [fp, #-52]	; 0xffffffcc
   1e614:	b	1e550 <__assert_fail@plt+0xd03c>
   1e618:	mov	r7, r0
   1e61c:	b	1e550 <__assert_fail@plt+0xd03c>
   1e620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e624:	add	fp, sp, #28
   1e628:	sub	sp, sp, #20
   1e62c:	str	r0, [sp, #4]
   1e630:	ldr	r0, [r1, #4]
   1e634:	mov	sl, r1
   1e638:	mov	r1, #0
   1e63c:	mov	r5, r3
   1e640:	mov	r8, r2
   1e644:	str	r1, [sp, #12]
   1e648:	str	r0, [sp, #8]
   1e64c:	lsl	r0, r0, #2
   1e650:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1e654:	cmp	r0, #0
   1e658:	str	r0, [sp, #16]
   1e65c:	beq	1e748 <__assert_fail@plt+0xd234>
   1e660:	ldr	r0, [sl, #4]
   1e664:	cmp	r0, #1
   1e668:	blt	1e710 <__assert_fail@plt+0xd1fc>
   1e66c:	mov	r9, #0
   1e670:	ldr	r0, [sl, #8]
   1e674:	ldr	r1, [sp, #4]
   1e678:	ldr	r2, [r0, r9, lsl #2]
   1e67c:	ldr	r1, [r1, #24]
   1e680:	add	r0, r2, r2, lsl #1
   1e684:	add	r1, r1, r0, lsl #2
   1e688:	ldr	r0, [r1, #4]
   1e68c:	cmp	r0, #1
   1e690:	blt	1e6cc <__assert_fail@plt+0xd1b8>
   1e694:	ldr	r7, [sp, #4]
   1e698:	ldr	r3, [r1, #8]
   1e69c:	ldr	r7, [r7]
   1e6a0:	ldr	r6, [r3]
   1e6a4:	add	r4, r7, r6, lsl #3
   1e6a8:	ldrb	r4, [r4, #4]
   1e6ac:	cmp	r4, r5
   1e6b0:	bne	1e6c0 <__assert_fail@plt+0xd1ac>
   1e6b4:	ldr	r4, [r7, r6, lsl #3]
   1e6b8:	cmp	r4, r8
   1e6bc:	beq	1e6f0 <__assert_fail@plt+0xd1dc>
   1e6c0:	add	r3, r3, #4
   1e6c4:	subs	r0, r0, #1
   1e6c8:	bne	1e6a0 <__assert_fail@plt+0xd18c>
   1e6cc:	add	r0, sp, #8
   1e6d0:	bl	1bff8 <__assert_fail@plt+0xaae4>
   1e6d4:	cmp	r0, #0
   1e6d8:	bne	1e738 <__assert_fail@plt+0xd224>
   1e6dc:	ldr	r0, [sl, #4]
   1e6e0:	add	r9, r9, #1
   1e6e4:	cmp	r9, r0
   1e6e8:	blt	1e670 <__assert_fail@plt+0xd15c>
   1e6ec:	b	1e710 <__assert_fail@plt+0xd1fc>
   1e6f0:	cmn	r6, #1
   1e6f4:	beq	1e6cc <__assert_fail@plt+0xd1b8>
   1e6f8:	ldr	r0, [sp, #4]
   1e6fc:	add	r1, sp, #8
   1e700:	mov	r3, r8
   1e704:	str	r5, [sp]
   1e708:	bl	1ea1c <__assert_fail@plt+0xd508>
   1e70c:	b	1e6d4 <__assert_fail@plt+0xd1c0>
   1e710:	ldr	r0, [sl, #8]
   1e714:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e718:	vldr	d16, [sp, #8]
   1e71c:	ldr	r0, [sp, #16]
   1e720:	mov	r7, #0
   1e724:	str	r0, [sl, #8]
   1e728:	vstr	d16, [sl]
   1e72c:	mov	r0, r7
   1e730:	sub	sp, fp, #28
   1e734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e738:	mov	r7, r0
   1e73c:	ldr	r0, [sp, #16]
   1e740:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e744:	b	1e72c <__assert_fail@plt+0xd218>
   1e748:	mov	r7, #12
   1e74c:	b	1e72c <__assert_fail@plt+0xd218>
   1e750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e754:	add	fp, sp, #28
   1e758:	sub	sp, sp, #36	; 0x24
   1e75c:	mov	r6, r1
   1e760:	ldr	r1, [r0, #84]	; 0x54
   1e764:	str	r3, [sp, #4]
   1e768:	mov	r4, r2
   1e76c:	str	r0, [sp, #12]
   1e770:	str	r1, [sp, #16]
   1e774:	mov	r1, r2
   1e778:	bl	1de10 <__assert_fail@plt+0xc8fc>
   1e77c:	cmn	r0, #1
   1e780:	beq	1ea08 <__assert_fail@plt+0xd4f4>
   1e784:	add	r1, r0, r0, lsl #1
   1e788:	str	r1, [sp]
   1e78c:	ldr	r0, [sp, #12]
   1e790:	ldr	r0, [r0, #116]	; 0x74
   1e794:	add	r0, r0, r1, lsl #3
   1e798:	add	r0, r0, #8
   1e79c:	ldr	r7, [r0, #-8]
   1e7a0:	mov	sl, r0
   1e7a4:	mov	r0, r6
   1e7a8:	mov	r1, r7
   1e7ac:	bl	1c41c <__assert_fail@plt+0xaf08>
   1e7b0:	cmp	r0, #0
   1e7b4:	beq	1e9b0 <__assert_fail@plt+0xd49c>
   1e7b8:	ldm	sl, {r0, r1}
   1e7bc:	add	r1, r1, r4
   1e7c0:	sub	r9, r1, r0
   1e7c4:	cmp	r9, r4
   1e7c8:	bne	1e88c <__assert_fail@plt+0xd378>
   1e7cc:	ldr	r0, [sp, #16]
   1e7d0:	add	r1, r7, r7, lsl #1
   1e7d4:	ldr	r0, [r0, #20]
   1e7d8:	add	r0, r0, r1, lsl #2
   1e7dc:	ldr	r0, [r0, #8]
   1e7e0:	ldr	r7, [r0]
   1e7e4:	mov	r0, r6
   1e7e8:	mov	r1, r7
   1e7ec:	bl	1c41c <__assert_fail@plt+0xaf08>
   1e7f0:	mov	r1, #4
   1e7f4:	cmp	r0, #0
   1e7f8:	bne	1e9a4 <__assert_fail@plt+0xd490>
   1e7fc:	mov	r0, #1
   1e800:	str	r0, [sp, #24]
   1e804:	str	r0, [sp, #20]
   1e808:	mov	r0, #4
   1e80c:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1e810:	cmp	r0, #0
   1e814:	str	r0, [sp, #28]
   1e818:	beq	1e9c4 <__assert_fail@plt+0xd4b0>
   1e81c:	mov	r5, #0
   1e820:	str	r7, [r0]
   1e824:	ldr	r0, [sp, #16]
   1e828:	ldr	r2, [sp, #4]
   1e82c:	ldr	r3, [fp, #8]
   1e830:	add	r7, sp, #20
   1e834:	str	r5, [sp, #32]
   1e838:	mov	r1, r7
   1e83c:	bl	1e620 <__assert_fail@plt+0xd10c>
   1e840:	mov	r9, r0
   1e844:	mov	r0, r6
   1e848:	mov	r1, r7
   1e84c:	bl	1bff8 <__assert_fail@plt+0xaae4>
   1e850:	mov	r8, r0
   1e854:	ldr	r0, [sp, #28]
   1e858:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e85c:	orr	r0, r9, r5
   1e860:	mov	r1, #2
   1e864:	orrs	r0, r0, r8
   1e868:	beq	1e9a4 <__assert_fail@plt+0xd490>
   1e86c:	cmp	r9, #0
   1e870:	mov	r1, #1
   1e874:	movne	r8, r9
   1e878:	cmp	r5, #0
   1e87c:	movne	r8, r5
   1e880:	str	r8, [sp, #32]
   1e884:	str	r8, [sp, #8]
   1e888:	b	1e9a4 <__assert_fail@plt+0xd490>
   1e88c:	ldr	r0, [sp, #12]
   1e890:	ldr	r1, [sp, #16]
   1e894:	mov	r5, r4
   1e898:	ldr	r0, [r0, #100]	; 0x64
   1e89c:	ldr	r1, [r1, #12]
   1e8a0:	ldr	r0, [r0, r9, lsl #2]
   1e8a4:	ldr	r8, [r1, r7, lsl #2]
   1e8a8:	cmp	r0, #0
   1e8ac:	beq	1e920 <__assert_fail@plt+0xd40c>
   1e8b0:	add	r4, r0, #4
   1e8b4:	mov	r1, r8
   1e8b8:	mov	r0, r4
   1e8bc:	bl	1c41c <__assert_fail@plt+0xaf08>
   1e8c0:	mov	r1, #4
   1e8c4:	cmp	r0, #0
   1e8c8:	bne	1e9a0 <__assert_fail@plt+0xd48c>
   1e8cc:	add	r7, sp, #20
   1e8d0:	mov	r1, r4
   1e8d4:	mov	r0, r7
   1e8d8:	bl	1c3a0 <__assert_fail@plt+0xae8c>
   1e8dc:	mov	r4, r0
   1e8e0:	str	r0, [sp, #32]
   1e8e4:	mov	r0, r7
   1e8e8:	mov	r1, r8
   1e8ec:	bl	1c204 <__assert_fail@plt+0xacf0>
   1e8f0:	cmp	r4, #0
   1e8f4:	bne	1e900 <__assert_fail@plt+0xd3ec>
   1e8f8:	cmp	r0, #0
   1e8fc:	bne	1e94c <__assert_fail@plt+0xd438>
   1e900:	ldr	r0, [sp, #28]
   1e904:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e908:	cmp	r4, #0
   1e90c:	mov	r1, #1
   1e910:	movweq	r4, #12
   1e914:	str	r4, [sp, #32]
   1e918:	str	r4, [sp, #8]
   1e91c:	b	1e9a0 <__assert_fail@plt+0xd48c>
   1e920:	mov	r0, #1
   1e924:	str	r0, [sp, #24]
   1e928:	str	r0, [sp, #20]
   1e92c:	mov	r0, #4
   1e930:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1e934:	cmp	r0, #0
   1e938:	str	r0, [sp, #28]
   1e93c:	beq	1e9d8 <__assert_fail@plt+0xd4c4>
   1e940:	str	r8, [r0]
   1e944:	mov	r0, #0
   1e948:	str	r0, [sp, #32]
   1e94c:	ldr	r1, [sp, #16]
   1e950:	add	r0, sp, #32
   1e954:	add	r2, sp, #20
   1e958:	bl	1eb24 <__assert_fail@plt+0xd610>
   1e95c:	ldr	r4, [sp, #12]
   1e960:	ldr	r1, [r4, #100]	; 0x64
   1e964:	str	r0, [r1, r9, lsl #2]
   1e968:	ldr	r0, [sp, #28]
   1e96c:	bl	22190 <__assert_fail@plt+0x10c7c>
   1e970:	ldr	r0, [r4, #100]	; 0x64
   1e974:	ldr	r2, [sp, #32]
   1e978:	ldr	r0, [r0, r9, lsl #2]
   1e97c:	cmp	r2, #0
   1e980:	mov	r1, r2
   1e984:	movwne	r1, #1
   1e988:	clz	r0, r0
   1e98c:	lsr	r0, r0, #5
   1e990:	ands	r1, r0, r1
   1e994:	ldr	r0, [sp, #8]
   1e998:	movne	r0, r2
   1e99c:	str	r0, [sp, #8]
   1e9a0:	mov	r4, r5
   1e9a4:	cmp	r1, #0
   1e9a8:	cmpne	r1, #4
   1e9ac:	bne	1e9f8 <__assert_fail@plt+0xd4e4>
   1e9b0:	ldrb	r1, [sl, #12]
   1e9b4:	add	r0, sl, #24
   1e9b8:	cmp	r1, #0
   1e9bc:	bne	1e79c <__assert_fail@plt+0xd288>
   1e9c0:	b	1ea08 <__assert_fail@plt+0xd4f4>
   1e9c4:	mov	r0, #0
   1e9c8:	mov	r5, #12
   1e9cc:	str	r0, [sp, #20]
   1e9d0:	str	r0, [sp, #24]
   1e9d4:	b	1e824 <__assert_fail@plt+0xd310>
   1e9d8:	mov	r0, #0
   1e9dc:	mov	r1, #12
   1e9e0:	str	r0, [sp, #20]
   1e9e4:	str	r0, [sp, #24]
   1e9e8:	mov	r0, #12
   1e9ec:	str	r1, [sp, #32]
   1e9f0:	mov	r1, #1
   1e9f4:	b	1e99c <__assert_fail@plt+0xd488>
   1e9f8:	cmp	r1, #2
   1e9fc:	bne	1ea14 <__assert_fail@plt+0xd500>
   1ea00:	ldr	r1, [sp]
   1ea04:	b	1e78c <__assert_fail@plt+0xd278>
   1ea08:	mov	r0, #0
   1ea0c:	sub	sp, fp, #28
   1ea10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea14:	ldr	r0, [sp, #8]
   1ea18:	b	1ea0c <__assert_fail@plt+0xd4f8>
   1ea1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ea20:	add	fp, sp, #24
   1ea24:	sub	sp, sp, #8
   1ea28:	mov	r6, r0
   1ea2c:	mov	r4, r1
   1ea30:	mov	r0, r1
   1ea34:	mov	r1, r2
   1ea38:	mov	r5, r3
   1ea3c:	mov	r7, r2
   1ea40:	bl	1c41c <__assert_fail@plt+0xaf08>
   1ea44:	cmp	r0, #0
   1ea48:	beq	1ea58 <__assert_fail@plt+0xd544>
   1ea4c:	mov	r0, #0
   1ea50:	sub	sp, fp, #24
   1ea54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ea58:	ldr	r8, [fp, #8]
   1ea5c:	ldr	r0, [r6]
   1ea60:	add	r1, r0, r7, lsl #3
   1ea64:	ldrb	r1, [r1, #4]
   1ea68:	cmp	r1, r8
   1ea6c:	bne	1ea7c <__assert_fail@plt+0xd568>
   1ea70:	ldr	r0, [r0, r7, lsl #3]
   1ea74:	cmp	r0, r5
   1ea78:	beq	1eb00 <__assert_fail@plt+0xd5ec>
   1ea7c:	mov	r0, r4
   1ea80:	mov	r1, r7
   1ea84:	bl	1c204 <__assert_fail@plt+0xacf0>
   1ea88:	cmp	r0, #0
   1ea8c:	beq	1eb1c <__assert_fail@plt+0xd608>
   1ea90:	ldr	r0, [r6, #20]
   1ea94:	add	r7, r7, r7, lsl #1
   1ea98:	add	r1, r0, r7, lsl #2
   1ea9c:	ldr	r2, [r1, #4]
   1eaa0:	cmp	r2, #2
   1eaa4:	beq	1eab4 <__assert_fail@plt+0xd5a0>
   1eaa8:	cmp	r2, #0
   1eaac:	bne	1eadc <__assert_fail@plt+0xd5c8>
   1eab0:	b	1ea4c <__assert_fail@plt+0xd538>
   1eab4:	ldr	r0, [r1, #8]
   1eab8:	mov	r1, r4
   1eabc:	mov	r3, r5
   1eac0:	ldr	r2, [r0, #4]
   1eac4:	mov	r0, r6
   1eac8:	str	r8, [sp]
   1eacc:	bl	1ea1c <__assert_fail@plt+0xd508>
   1ead0:	cmp	r0, #0
   1ead4:	bne	1ea50 <__assert_fail@plt+0xd53c>
   1ead8:	ldr	r0, [r6, #20]
   1eadc:	add	r0, r0, r7, lsl #2
   1eae0:	ldr	r0, [r0, #8]
   1eae4:	ldr	r7, [r0]
   1eae8:	mov	r0, r4
   1eaec:	mov	r1, r7
   1eaf0:	bl	1c41c <__assert_fail@plt+0xaf08>
   1eaf4:	cmp	r0, #0
   1eaf8:	beq	1ea5c <__assert_fail@plt+0xd548>
   1eafc:	b	1ea4c <__assert_fail@plt+0xd538>
   1eb00:	cmp	r8, #9
   1eb04:	bne	1ea4c <__assert_fail@plt+0xd538>
   1eb08:	mov	r0, r4
   1eb0c:	mov	r1, r7
   1eb10:	bl	1c204 <__assert_fail@plt+0xacf0>
   1eb14:	cmp	r0, #0
   1eb18:	bne	1ea4c <__assert_fail@plt+0xd538>
   1eb1c:	mov	r0, #12
   1eb20:	b	1ea50 <__assert_fail@plt+0xd53c>
   1eb24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb28:	add	fp, sp, #28
   1eb2c:	sub	sp, sp, #4
   1eb30:	ldr	sl, [r2, #4]
   1eb34:	cmp	sl, #0
   1eb38:	beq	1ece8 <__assert_fail@plt+0xd7d4>
   1eb3c:	mov	r4, r2
   1eb40:	mov	r9, r1
   1eb44:	cmp	sl, #1
   1eb48:	mov	r6, sl
   1eb4c:	str	r0, [sp]
   1eb50:	blt	1eb70 <__assert_fail@plt+0xd65c>
   1eb54:	ldr	r1, [r4, #8]
   1eb58:	mov	r2, sl
   1eb5c:	mov	r6, sl
   1eb60:	ldr	r3, [r1], #4
   1eb64:	subs	r2, r2, #1
   1eb68:	add	r6, r3, r6
   1eb6c:	bne	1eb60 <__assert_fail@plt+0xd64c>
   1eb70:	ldr	r1, [r9, #68]	; 0x44
   1eb74:	ldr	r2, [r9, #32]
   1eb78:	and	r1, r1, r6
   1eb7c:	add	r3, r1, r1, lsl #1
   1eb80:	ldr	r1, [r2, r3, lsl #2]
   1eb84:	cmp	r1, #1
   1eb88:	blt	1ebf8 <__assert_fail@plt+0xd6e4>
   1eb8c:	add	r2, r2, r3, lsl #2
   1eb90:	sub	ip, sl, #1
   1eb94:	mov	r5, #0
   1eb98:	ldr	lr, [r2, #8]
   1eb9c:	cmp	r4, #0
   1eba0:	beq	1ebec <__assert_fail@plt+0xd6d8>
   1eba4:	ldr	r7, [lr, r5, lsl #2]
   1eba8:	ldr	r3, [r7]
   1ebac:	cmp	r6, r3
   1ebb0:	bne	1ebec <__assert_fail@plt+0xd6d8>
   1ebb4:	ldr	r3, [r7, #8]
   1ebb8:	cmp	r3, sl
   1ebbc:	bne	1ebec <__assert_fail@plt+0xd6d8>
   1ebc0:	mov	r3, ip
   1ebc4:	add	r2, r3, #1
   1ebc8:	cmp	r2, #1
   1ebcc:	blt	1ecdc <__assert_fail@plt+0xd7c8>
   1ebd0:	ldr	r2, [r4, #8]
   1ebd4:	ldr	r0, [r7, #12]
   1ebd8:	ldr	r2, [r2, r3, lsl #2]
   1ebdc:	ldr	r0, [r0, r3, lsl #2]
   1ebe0:	sub	r3, r3, #1
   1ebe4:	cmp	r0, r2
   1ebe8:	beq	1ebc4 <__assert_fail@plt+0xd6b0>
   1ebec:	add	r5, r5, #1
   1ebf0:	cmp	r5, r1
   1ebf4:	blt	1eb9c <__assert_fail@plt+0xd688>
   1ebf8:	mov	r0, #56	; 0x38
   1ebfc:	mov	r1, #1
   1ec00:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1ec04:	cmp	r0, #0
   1ec08:	beq	1ed08 <__assert_fail@plt+0xd7f4>
   1ec0c:	add	r5, r0, #4
   1ec10:	mov	r7, r0
   1ec14:	mov	r1, r4
   1ec18:	mov	r0, r5
   1ec1c:	bl	1c3a0 <__assert_fail@plt+0xae8c>
   1ec20:	cmp	r0, #0
   1ec24:	bne	1ecf4 <__assert_fail@plt+0xd7e0>
   1ec28:	str	r5, [r7, #40]	; 0x28
   1ec2c:	ldr	r0, [r4, #4]
   1ec30:	cmp	r0, #1
   1ec34:	blt	1ecc4 <__assert_fail@plt+0xd7b0>
   1ec38:	movw	ip, #65280	; 0xff00
   1ec3c:	ldr	r1, [r4, #8]
   1ec40:	ldr	sl, [r9]
   1ec44:	mov	lr, #32
   1ec48:	movt	ip, #3
   1ec4c:	add	r5, ip, #255	; 0xff
   1ec50:	ldr	r2, [r1]
   1ec54:	add	r3, sl, r2, lsl #3
   1ec58:	ldr	r2, [r3, #4]!
   1ec5c:	and	r4, r2, r5
   1ec60:	cmp	r4, #1
   1ec64:	beq	1ecb8 <__assert_fail@plt+0xd7a4>
   1ec68:	ldrb	r8, [r7, #52]	; 0x34
   1ec6c:	and	r4, lr, r2, lsr #15
   1ec70:	uxtb	r2, r2
   1ec74:	cmp	r2, #12
   1ec78:	orr	r4, r8, r4
   1ec7c:	strb	r4, [r7, #52]	; 0x34
   1ec80:	beq	1ecb0 <__assert_fail@plt+0xd79c>
   1ec84:	cmp	r2, #4
   1ec88:	beq	1ec9c <__assert_fail@plt+0xd788>
   1ec8c:	cmp	r2, #2
   1ec90:	bne	1eca4 <__assert_fail@plt+0xd790>
   1ec94:	orr	r2, r4, #16
   1ec98:	b	1ecb4 <__assert_fail@plt+0xd7a0>
   1ec9c:	orr	r2, r4, #64	; 0x40
   1eca0:	b	1ecb4 <__assert_fail@plt+0xd7a0>
   1eca4:	ldr	r2, [r3]
   1eca8:	tst	r2, ip
   1ecac:	beq	1ecb8 <__assert_fail@plt+0xd7a4>
   1ecb0:	orr	r2, r4, #128	; 0x80
   1ecb4:	strb	r2, [r7, #52]	; 0x34
   1ecb8:	add	r1, r1, #4
   1ecbc:	subs	r0, r0, #1
   1ecc0:	bne	1ec50 <__assert_fail@plt+0xd73c>
   1ecc4:	mov	r0, r9
   1ecc8:	mov	r1, r7
   1eccc:	mov	r2, r6
   1ecd0:	bl	1c7bc <__assert_fail@plt+0xb2a8>
   1ecd4:	cmp	r0, #0
   1ecd8:	bne	1ed00 <__assert_fail@plt+0xd7ec>
   1ecdc:	mov	r0, r7
   1ece0:	sub	sp, fp, #28
   1ece4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ece8:	mov	r7, #0
   1ecec:	str	r7, [r0]
   1ecf0:	b	1ecdc <__assert_fail@plt+0xd7c8>
   1ecf4:	mov	r0, r7
   1ecf8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1ecfc:	b	1ed08 <__assert_fail@plt+0xd7f4>
   1ed00:	mov	r0, r7
   1ed04:	bl	178b4 <__assert_fail@plt+0x63a0>
   1ed08:	ldr	r1, [sp]
   1ed0c:	mov	r0, #12
   1ed10:	mov	r7, #0
   1ed14:	str	r0, [r1]
   1ed18:	b	1ecdc <__assert_fail@plt+0xd7c8>
   1ed1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ed20:	add	fp, sp, #24
   1ed24:	ldr	lr, [r0]
   1ed28:	add	r7, lr, r1, lsl #3
   1ed2c:	ldrb	r9, [r7, #4]
   1ed30:	cmp	r9, #7
   1ed34:	beq	1ef08 <__assert_fail@plt+0xd9f4>
   1ed38:	ldr	ip, [r2, #80]	; 0x50
   1ed3c:	mov	r6, #1
   1ed40:	cmp	ip, #1
   1ed44:	beq	1ed84 <__assert_fail@plt+0xd870>
   1ed48:	ldr	r5, [r2, #28]
   1ed4c:	add	r7, r3, #1
   1ed50:	cmp	r7, r5
   1ed54:	bge	1ed84 <__assert_fail@plt+0xd870>
   1ed58:	ldr	r6, [r2, #8]
   1ed5c:	sub	r5, r5, r3
   1ed60:	add	r7, r6, r3, lsl #2
   1ed64:	mov	r6, #1
   1ed68:	ldr	r4, [r7, r6, lsl #2]
   1ed6c:	cmn	r4, #1
   1ed70:	bne	1ed84 <__assert_fail@plt+0xd870>
   1ed74:	add	r6, r6, #1
   1ed78:	cmp	r5, r6
   1ed7c:	bne	1ed68 <__assert_fail@plt+0xd854>
   1ed80:	mov	r6, r5
   1ed84:	mov	r8, #0
   1ed88:	cmp	r9, #5
   1ed8c:	bne	1edd0 <__assert_fail@plt+0xd8bc>
   1ed90:	cmp	r6, #2
   1ed94:	blt	1eef8 <__assert_fail@plt+0xd9e4>
   1ed98:	ldr	r0, [r0, #128]	; 0x80
   1ed9c:	tst	r0, #64	; 0x40
   1eda0:	bne	1edb4 <__assert_fail@plt+0xd8a0>
   1eda4:	ldr	r1, [r2, #4]
   1eda8:	ldrb	r1, [r1, r3]
   1edac:	cmp	r1, #10
   1edb0:	beq	1eef8 <__assert_fail@plt+0xd9e4>
   1edb4:	tst	r0, #128	; 0x80
   1edb8:	beq	1eef4 <__assert_fail@plt+0xd9e0>
   1edbc:	ldr	r0, [r2, #4]
   1edc0:	ldrb	r0, [r0, r3]
   1edc4:	cmp	r0, #0
   1edc8:	movne	r8, r6
   1edcc:	b	1eef8 <__assert_fail@plt+0xd9e4>
   1edd0:	cmp	r9, #6
   1edd4:	bne	1eef8 <__assert_fail@plt+0xd9e4>
   1edd8:	cmp	r6, #2
   1eddc:	blt	1eef8 <__assert_fail@plt+0xd9e4>
   1ede0:	ldr	r7, [lr, r1, lsl #3]
   1ede4:	ldr	r0, [r7, #32]
   1ede8:	cmp	r0, #0
   1edec:	bne	1ee08 <__assert_fail@plt+0xd8f4>
   1edf0:	ldr	r1, [r7, #36]	; 0x24
   1edf4:	cmp	r1, #0
   1edf8:	bne	1ee08 <__assert_fail@plt+0xd8f4>
   1edfc:	ldr	r1, [r7, #20]
   1ee00:	cmp	r1, #0
   1ee04:	beq	1ef00 <__assert_fail@plt+0xd9ec>
   1ee08:	cmp	ip, #1
   1ee0c:	bne	1ee1c <__assert_fail@plt+0xd908>
   1ee10:	ldr	r1, [r2, #4]
   1ee14:	ldrb	r5, [r1, r3]
   1ee18:	b	1ee24 <__assert_fail@plt+0xd910>
   1ee1c:	ldr	r1, [r2, #8]
   1ee20:	ldr	r5, [r1, r3, lsl #2]
   1ee24:	ldr	r1, [r7, #20]
   1ee28:	cmp	r1, #1
   1ee2c:	blt	1ee50 <__assert_fail@plt+0xd93c>
   1ee30:	ldr	r2, [r7]
   1ee34:	mov	r3, #0
   1ee38:	ldr	r4, [r2, r3, lsl #2]
   1ee3c:	cmp	r5, r4
   1ee40:	beq	1eecc <__assert_fail@plt+0xd9b8>
   1ee44:	add	r3, r3, #1
   1ee48:	cmp	r3, r1
   1ee4c:	blt	1ee38 <__assert_fail@plt+0xd924>
   1ee50:	ldr	r1, [r7, #36]	; 0x24
   1ee54:	cmp	r1, #1
   1ee58:	blt	1ee8c <__assert_fail@plt+0xd978>
   1ee5c:	mov	r4, #0
   1ee60:	ldr	r0, [r7, #12]
   1ee64:	ldr	r1, [r0, r4, lsl #2]
   1ee68:	mov	r0, r5
   1ee6c:	bl	11238 <iswctype@plt>
   1ee70:	cmp	r0, #0
   1ee74:	bne	1eecc <__assert_fail@plt+0xd9b8>
   1ee78:	ldr	r0, [r7, #36]	; 0x24
   1ee7c:	add	r4, r4, #1
   1ee80:	cmp	r4, r0
   1ee84:	blt	1ee60 <__assert_fail@plt+0xd94c>
   1ee88:	ldr	r0, [r7, #32]
   1ee8c:	cmp	r0, #1
   1ee90:	blt	1eec4 <__assert_fail@plt+0xd9b0>
   1ee94:	ldr	r1, [r7, #4]
   1ee98:	mov	r2, #0
   1ee9c:	ldr	r3, [r1, r2, lsl #2]
   1eea0:	cmp	r3, r5
   1eea4:	bhi	1eeb8 <__assert_fail@plt+0xd9a4>
   1eea8:	ldr	r3, [r7, #8]
   1eeac:	ldr	r3, [r3, r2, lsl #2]
   1eeb0:	cmp	r5, r3
   1eeb4:	bls	1eecc <__assert_fail@plt+0xd9b8>
   1eeb8:	add	r2, r2, #1
   1eebc:	cmp	r2, r0
   1eec0:	blt	1ee9c <__assert_fail@plt+0xd988>
   1eec4:	mov	r0, #0
   1eec8:	b	1eed0 <__assert_fail@plt+0xd9bc>
   1eecc:	mov	r0, r6
   1eed0:	ldrb	r1, [r7, #16]
   1eed4:	tst	r1, #1
   1eed8:	bne	1eee4 <__assert_fail@plt+0xd9d0>
   1eedc:	mov	r8, r0
   1eee0:	b	1eef8 <__assert_fail@plt+0xd9e4>
   1eee4:	cmp	r0, #0
   1eee8:	bgt	1eef8 <__assert_fail@plt+0xd9e4>
   1eeec:	cmp	r6, #1
   1eef0:	movle	r6, #1
   1eef4:	mov	r8, r6
   1eef8:	mov	r0, r8
   1eefc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ef00:	mov	r5, #0
   1ef04:	b	1ee24 <__assert_fail@plt+0xd910>
   1ef08:	ldr	r0, [r2, #4]
   1ef0c:	mov	r8, #0
   1ef10:	ldrb	r6, [r0, r3]
   1ef14:	cmp	r6, #194	; 0xc2
   1ef18:	bcc	1eef8 <__assert_fail@plt+0xd9e4>
   1ef1c:	ldr	r1, [r2, #48]	; 0x30
   1ef20:	add	r2, r3, #2
   1ef24:	cmp	r2, r1
   1ef28:	bgt	1eef8 <__assert_fail@plt+0xd9e4>
   1ef2c:	add	r0, r3, r0
   1ef30:	cmp	r6, #223	; 0xdf
   1ef34:	ldrb	r7, [r0, #1]
   1ef38:	bhi	1ef5c <__assert_fail@plt+0xda48>
   1ef3c:	cmp	r7, #192	; 0xc0
   1ef40:	mov	r0, #0
   1ef44:	movwcc	r0, #1
   1ef48:	lsl	r8, r0, #1
   1ef4c:	sxtb	r0, r7
   1ef50:	cmn	r0, #1
   1ef54:	movwgt	r8, #0
   1ef58:	b	1eef8 <__assert_fail@plt+0xd9e4>
   1ef5c:	cmp	r6, #239	; 0xef
   1ef60:	bhi	1ef7c <__assert_fail@plt+0xda68>
   1ef64:	mov	r2, #3
   1ef68:	cmp	r6, #224	; 0xe0
   1ef6c:	bne	1efd8 <__assert_fail@plt+0xdac4>
   1ef70:	cmp	r7, #160	; 0xa0
   1ef74:	bcc	1eef8 <__assert_fail@plt+0xd9e4>
   1ef78:	b	1efd8 <__assert_fail@plt+0xdac4>
   1ef7c:	cmp	r6, #247	; 0xf7
   1ef80:	bhi	1ef9c <__assert_fail@plt+0xda88>
   1ef84:	mov	r2, #4
   1ef88:	cmp	r6, #240	; 0xf0
   1ef8c:	bne	1efd8 <__assert_fail@plt+0xdac4>
   1ef90:	cmp	r7, #144	; 0x90
   1ef94:	bcc	1eef8 <__assert_fail@plt+0xd9e4>
   1ef98:	b	1efd8 <__assert_fail@plt+0xdac4>
   1ef9c:	cmp	r6, #251	; 0xfb
   1efa0:	bhi	1efbc <__assert_fail@plt+0xdaa8>
   1efa4:	mov	r2, #5
   1efa8:	cmp	r6, #248	; 0xf8
   1efac:	bne	1efd8 <__assert_fail@plt+0xdac4>
   1efb0:	cmp	r7, #136	; 0x88
   1efb4:	bcc	1eef8 <__assert_fail@plt+0xd9e4>
   1efb8:	b	1efd8 <__assert_fail@plt+0xdac4>
   1efbc:	cmp	r6, #253	; 0xfd
   1efc0:	bhi	1eef8 <__assert_fail@plt+0xd9e4>
   1efc4:	mov	r2, #6
   1efc8:	cmp	r6, #252	; 0xfc
   1efcc:	bne	1efd8 <__assert_fail@plt+0xdac4>
   1efd0:	cmp	r7, #132	; 0x84
   1efd4:	bcc	1eef8 <__assert_fail@plt+0xd9e4>
   1efd8:	add	r3, r2, r3
   1efdc:	cmp	r3, r1
   1efe0:	bgt	1eef8 <__assert_fail@plt+0xd9e4>
   1efe4:	mov	r1, #1
   1efe8:	ldrb	r3, [r0, r1]
   1efec:	sxtb	r7, r3
   1eff0:	cmn	r7, #1
   1eff4:	bgt	1eef8 <__assert_fail@plt+0xd9e4>
   1eff8:	cmp	r3, #191	; 0xbf
   1effc:	bhi	1eef8 <__assert_fail@plt+0xd9e4>
   1f000:	add	r1, r1, #1
   1f004:	cmp	r2, r1
   1f008:	bne	1efe8 <__assert_fail@plt+0xdad4>
   1f00c:	mov	r8, r2
   1f010:	b	1eef8 <__assert_fail@plt+0xd9e4>
   1f014:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f018:	add	fp, sp, #24
   1f01c:	ldr	r5, [r1, #4]
   1f020:	mvn	r3, #0
   1f024:	mov	r8, #0
   1f028:	uxtab	r4, r3, r5
   1f02c:	cmp	r4, #6
   1f030:	bhi	1f140 <__assert_fail@plt+0xdc2c>
   1f034:	ldr	r3, [r0, #4]
   1f038:	ldrb	r3, [r3, r2]
   1f03c:	add	r7, pc, #4
   1f040:	sxtb	r6, r3
   1f044:	ldr	pc, [r7, r4, lsl #2]
   1f048:	andeq	pc, r1, r4, rrx
   1f04c:	andeq	pc, r1, r0, asr #2
   1f050:	andeq	pc, r1, r8, ror r0	; <UNPREDICTABLE>
   1f054:	andeq	pc, r1, r0, asr #2
   1f058:	andeq	pc, r1, r0, lsr #1
   1f05c:	andeq	pc, r1, r0, asr #2
   1f060:	muleq	r1, r8, r0
   1f064:	ldrb	r1, [r1]
   1f068:	uxtb	r3, r6
   1f06c:	cmp	r1, r3
   1f070:	beq	1f0d4 <__assert_fail@plt+0xdbc0>
   1f074:	b	1f140 <__assert_fail@plt+0xdc2c>
   1f078:	ldr	r1, [r1]
   1f07c:	ubfx	r7, r3, #5, #3
   1f080:	and	r3, r3, #31
   1f084:	ldr	r1, [r1, r7, lsl #2]
   1f088:	mov	r7, #1
   1f08c:	tst	r1, r7, lsl r3
   1f090:	bne	1f0d4 <__assert_fail@plt+0xdbc0>
   1f094:	b	1f140 <__assert_fail@plt+0xdc2c>
   1f098:	cmp	r6, #0
   1f09c:	bmi	1f140 <__assert_fail@plt+0xdc2c>
   1f0a0:	cmp	r3, #0
   1f0a4:	beq	1f0c4 <__assert_fail@plt+0xdbb0>
   1f0a8:	cmp	r3, #10
   1f0ac:	bne	1f0d4 <__assert_fail@plt+0xdbc0>
   1f0b0:	ldr	r1, [r0, #84]	; 0x54
   1f0b4:	ldrb	r1, [r1, #128]	; 0x80
   1f0b8:	tst	r1, #64	; 0x40
   1f0bc:	bne	1f0d4 <__assert_fail@plt+0xdbc0>
   1f0c0:	b	1f140 <__assert_fail@plt+0xdc2c>
   1f0c4:	ldr	r1, [r0, #84]	; 0x54
   1f0c8:	ldrb	r1, [r1, #128]	; 0x80
   1f0cc:	tst	r1, #128	; 0x80
   1f0d0:	bne	1f140 <__assert_fail@plt+0xdc2c>
   1f0d4:	movw	r1, #65280	; 0xff00
   1f0d8:	movt	r1, #3
   1f0dc:	tst	r5, r1
   1f0e0:	beq	1f13c <__assert_fail@plt+0xdc28>
   1f0e4:	ldr	r3, [r0, #88]	; 0x58
   1f0e8:	mov	r1, r2
   1f0ec:	mov	r2, r3
   1f0f0:	bl	1d0fc <__assert_fail@plt+0xbbe8>
   1f0f4:	and	r1, r0, #1
   1f0f8:	tst	r5, #1024	; 0x400
   1f0fc:	beq	1f108 <__assert_fail@plt+0xdbf4>
   1f100:	cmp	r1, #0
   1f104:	beq	1f140 <__assert_fail@plt+0xdc2c>
   1f108:	tst	r5, #2048	; 0x800
   1f10c:	cmpne	r1, #0
   1f110:	bne	1f140 <__assert_fail@plt+0xdc2c>
   1f114:	tst	r5, #8192	; 0x2000
   1f118:	beq	1f124 <__assert_fail@plt+0xdc10>
   1f11c:	ands	r1, r0, #2
   1f120:	beq	1f140 <__assert_fail@plt+0xdc2c>
   1f124:	uxth	r1, r5
   1f128:	mov	r2, #1
   1f12c:	and	r0, r0, #8
   1f130:	eor	r1, r2, r1, lsr #15
   1f134:	orr	r0, r1, r0, lsr #3
   1f138:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f13c:	mov	r8, #1
   1f140:	mov	r0, r8
   1f144:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f14c:	add	fp, sp, #28
   1f150:	sub	sp, sp, #4
   1f154:	vpush	{d8-d11}
   1f158:	sub	sp, sp, #88	; 0x58
   1f15c:	sub	sp, sp, #14336	; 0x3800
   1f160:	sub	lr, fp, #1024	; 0x400
   1f164:	vmov.i32	q4, #0	; 0x00000000
   1f168:	mov	sl, r1
   1f16c:	mov	r1, #0
   1f170:	mov	ip, r0
   1f174:	sub	r9, lr, #72	; 0x48
   1f178:	str	r1, [sl, #44]	; 0x2c
   1f17c:	str	r1, [sl, #48]	; 0x30
   1f180:	mov	r0, r9
   1f184:	vst1.64	{d8-d9}, [r0]!
   1f188:	vst1.64	{d8-d9}, [r0]
   1f18c:	ldr	r0, [sl, #8]
   1f190:	cmp	r0, #0
   1f194:	ble	1fb40 <__assert_fail@plt+0xe62c>
   1f198:	sub	lr, fp, #2048	; 0x800
   1f19c:	add	r0, ip, #96	; 0x60
   1f1a0:	mov	r6, #0
   1f1a4:	str	ip, [sp, #28]
   1f1a8:	str	sl, [sp, #16]
   1f1ac:	sub	r4, lr, #72	; 0x48
   1f1b0:	sub	lr, fp, #3072	; 0xc00
   1f1b4:	str	r0, [sp, #4]
   1f1b8:	sub	r8, lr, #72	; 0x48
   1f1bc:	sub	lr, fp, #6144	; 0x1800
   1f1c0:	sub	r5, lr, #120	; 0x78
   1f1c4:	ldr	r0, [sl, #12]
   1f1c8:	str	r1, [sp, #24]
   1f1cc:	ldr	lr, [r0, r1, lsl #2]
   1f1d0:	ldr	r1, [ip]
   1f1d4:	add	r0, r1, lr, lsl #3
   1f1d8:	str	lr, [sp, #12]
   1f1dc:	ldr	r7, [r0, #4]
   1f1e0:	uxtb	r0, r7
   1f1e4:	cmp	r0, #1
   1f1e8:	str	r0, [sp, #20]
   1f1ec:	bne	1f2c8 <__assert_fail@plt+0xddb4>
   1f1f0:	ldrb	r0, [r1, lr, lsl #3]
   1f1f4:	str	r1, [sp, #8]
   1f1f8:	mov	r3, #1
   1f1fc:	ubfx	r1, r0, #5, #3
   1f200:	and	r0, r0, #31
   1f204:	ldr	r2, [r9, r1, lsl #2]
   1f208:	orr	r0, r2, r3, lsl r0
   1f20c:	str	r0, [r9, r1, lsl #2]
   1f210:	movw	r0, #65280	; 0xff00
   1f214:	ldr	r3, [sp, #20]
   1f218:	movt	r0, #3
   1f21c:	ands	r0, r7, r0
   1f220:	beq	1f508 <__assert_fail@plt+0xdff4>
   1f224:	tst	r7, #8192	; 0x2000
   1f228:	beq	1f24c <__assert_fail@plt+0xdd38>
   1f22c:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   1f230:	mov	r1, r9
   1f234:	vst1.64	{d8-d9}, [r1]!
   1f238:	vst1.64	{d8-d9}, [r1]
   1f23c:	tst	r0, #1024	; 0x400
   1f240:	beq	1f738 <__assert_fail@plt+0xe224>
   1f244:	mov	r0, #1024	; 0x400
   1f248:	str	r0, [fp, #-1096]	; 0xfffffbb8
   1f24c:	tst	r7, #32768	; 0x8000
   1f250:	bne	1f45c <__assert_fail@plt+0xdf48>
   1f254:	tst	r7, #1024	; 0x400
   1f258:	beq	1f444 <__assert_fail@plt+0xdf30>
   1f25c:	movw	r0, #255	; 0xff
   1f260:	movt	r0, #64	; 0x40
   1f264:	and	r0, r7, r0
   1f268:	cmp	r0, #1
   1f26c:	beq	1f45c <__assert_fail@plt+0xdf48>
   1f270:	ldr	r0, [ip, #92]	; 0x5c
   1f274:	vmov.i32	q8, #0	; 0x00000000
   1f278:	mov	lr, r5
   1f27c:	cmp	r0, #1
   1f280:	ble	1f3ec <__assert_fail@plt+0xded8>
   1f284:	ldr	r0, [ip, #60]	; 0x3c
   1f288:	ldr	r5, [sp, #4]
   1f28c:	mov	r1, #0
   1f290:	add	r2, r5, r1
   1f294:	add	r3, r0, r1
   1f298:	vld1.32	{d20-d21}, [r2]
   1f29c:	vld1.32	{d18-d19}, [r3]
   1f2a0:	add	r2, r9, r1
   1f2a4:	add	r1, r1, #16
   1f2a8:	vld1.32	{d22-d23}, [r2]
   1f2ac:	cmp	r1, #32
   1f2b0:	vorn	q9, q10, q9
   1f2b4:	vand	q9, q11, q9
   1f2b8:	vorr	q8, q9, q8
   1f2bc:	vst1.32	{d18-d19}, [r2]
   1f2c0:	bne	1f290 <__assert_fail@plt+0xdd7c>
   1f2c4:	b	1f41c <__assert_fail@plt+0xdf08>
   1f2c8:	cmp	r0, #7
   1f2cc:	beq	1f314 <__assert_fail@plt+0xde00>
   1f2d0:	cmp	r0, #5
   1f2d4:	beq	1f364 <__assert_fail@plt+0xde50>
   1f2d8:	cmp	r0, #3
   1f2dc:	bne	1f738 <__assert_fail@plt+0xe224>
   1f2e0:	ldr	r0, [r1, lr, lsl #3]
   1f2e4:	str	r1, [sp, #8]
   1f2e8:	mov	r1, #0
   1f2ec:	add	r2, r9, r1
   1f2f0:	add	r3, r0, r1
   1f2f4:	add	r1, r1, #16
   1f2f8:	vld1.32	{d16-d17}, [r3]
   1f2fc:	vld1.32	{d18-d19}, [r2]
   1f300:	cmp	r1, #32
   1f304:	vorr	q8, q9, q8
   1f308:	vst1.32	{d16-d17}, [r2]
   1f30c:	bne	1f2ec <__assert_fail@plt+0xddd8>
   1f310:	b	1f210 <__assert_fail@plt+0xdcfc>
   1f314:	mvn	r0, #0
   1f318:	str	r1, [sp, #8]
   1f31c:	str	r0, [fp, #-1084]	; 0xfffffbc4
   1f320:	str	r0, [fp, #-1088]	; 0xfffffbc0
   1f324:	str	r0, [fp, #-1092]	; 0xfffffbbc
   1f328:	str	r0, [fp, #-1096]	; 0xfffffbb8
   1f32c:	ldr	r1, [ip, #128]	; 0x80
   1f330:	and	r0, r1, #128	; 0x80
   1f334:	ands	r1, r1, #64	; 0x40
   1f338:	beq	1f344 <__assert_fail@plt+0xde30>
   1f33c:	cmp	r0, #0
   1f340:	beq	1f210 <__assert_fail@plt+0xdcfc>
   1f344:	cmp	r1, #0
   1f348:	mvn	r1, #1
   1f34c:	movweq	r1, #64510	; 0xfbfe
   1f350:	movteq	r1, #65535	; 0xffff
   1f354:	cmp	r0, #0
   1f358:	mvneq	r1, #1024	; 0x400
   1f35c:	str	r1, [fp, #-1096]	; 0xfffffbb8
   1f360:	b	1f210 <__assert_fail@plt+0xdcfc>
   1f364:	ldr	r0, [ip, #92]	; 0x5c
   1f368:	str	r1, [sp, #8]
   1f36c:	cmp	r0, #2
   1f370:	blt	1f3a4 <__assert_fail@plt+0xde90>
   1f374:	ldr	r0, [ip, #60]	; 0x3c
   1f378:	mov	r1, #0
   1f37c:	add	r2, r9, r1
   1f380:	add	r3, r0, r1
   1f384:	add	r1, r1, #16
   1f388:	vld1.32	{d16-d17}, [r3]
   1f38c:	vld1.32	{d18-d19}, [r2]
   1f390:	cmp	r1, #32
   1f394:	vorr	q8, q9, q8
   1f398:	vst1.32	{d16-d17}, [r2]
   1f39c:	bne	1f37c <__assert_fail@plt+0xde68>
   1f3a0:	b	1f3bc <__assert_fail@plt+0xdea8>
   1f3a4:	mov	r0, r9
   1f3a8:	mov	r1, #255	; 0xff
   1f3ac:	mov	r2, #32
   1f3b0:	bl	11418 <memset@plt>
   1f3b4:	ldr	lr, [sp, #12]
   1f3b8:	ldr	ip, [sp, #28]
   1f3bc:	ldr	r0, [ip, #128]	; 0x80
   1f3c0:	tst	r0, #64	; 0x40
   1f3c4:	bne	1f3d4 <__assert_fail@plt+0xdec0>
   1f3c8:	ldr	r1, [fp, #-1096]	; 0xfffffbb8
   1f3cc:	bic	r1, r1, #1024	; 0x400
   1f3d0:	str	r1, [fp, #-1096]	; 0xfffffbb8
   1f3d4:	tst	r0, #128	; 0x80
   1f3d8:	beq	1f210 <__assert_fail@plt+0xdcfc>
   1f3dc:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   1f3e0:	bic	r0, r0, #1
   1f3e4:	str	r0, [fp, #-1096]	; 0xfffffbb8
   1f3e8:	b	1f210 <__assert_fail@plt+0xdcfc>
   1f3ec:	ldr	r3, [sp, #4]
   1f3f0:	mov	r0, #0
   1f3f4:	add	r1, r9, r0
   1f3f8:	add	r2, r3, r0
   1f3fc:	add	r0, r0, #16
   1f400:	vld1.32	{d18-d19}, [r2]
   1f404:	vld1.32	{d20-d21}, [r1]
   1f408:	cmp	r0, #32
   1f40c:	vand	q9, q10, q9
   1f410:	vorr	q8, q9, q8
   1f414:	vst1.32	{d18-d19}, [r1]
   1f418:	bne	1f3f4 <__assert_fail@plt+0xdee0>
   1f41c:	vext.8	q9, q8, q8, #8
   1f420:	mov	r5, lr
   1f424:	ldr	lr, [sp, #12]
   1f428:	ldr	r3, [sp, #20]
   1f42c:	vorr	q8, q8, q9
   1f430:	vdup.32	q9, d16[1]
   1f434:	vorr	q8, q8, q9
   1f438:	vmov.32	r0, d16[0]
   1f43c:	cmp	r0, #0
   1f440:	beq	1f738 <__assert_fail@plt+0xe224>
   1f444:	tst	r7, #2048	; 0x800
   1f448:	beq	1f508 <__assert_fail@plt+0xdff4>
   1f44c:	tst	r7, #4194304	; 0x400000
   1f450:	beq	1f468 <__assert_fail@plt+0xdf54>
   1f454:	cmp	r3, #1
   1f458:	bne	1f468 <__assert_fail@plt+0xdf54>
   1f45c:	mov	r0, r9
   1f460:	vst1.64	{d8-d9}, [r0]!
   1f464:	b	1f734 <__assert_fail@plt+0xe220>
   1f468:	ldr	r0, [ip, #92]	; 0x5c
   1f46c:	ldr	r7, [sp, #4]
   1f470:	vmov.i32	q8, #0	; 0x00000000
   1f474:	cmp	r0, #1
   1f478:	ble	1f4bc <__assert_fail@plt+0xdfa8>
   1f47c:	ldr	r0, [ip, #60]	; 0x3c
   1f480:	mov	r1, #0
   1f484:	add	r2, r0, r1
   1f488:	add	r3, r7, r1
   1f48c:	vld1.32	{d20-d21}, [r2]
   1f490:	vld1.32	{d18-d19}, [r3]
   1f494:	add	r2, r9, r1
   1f498:	add	r1, r1, #16
   1f49c:	vld1.32	{d22-d23}, [r2]
   1f4a0:	cmp	r1, #32
   1f4a4:	vand	q9, q10, q9
   1f4a8:	vbic	q9, q11, q9
   1f4ac:	vorr	q8, q9, q8
   1f4b0:	vst1.32	{d18-d19}, [r2]
   1f4b4:	bne	1f484 <__assert_fail@plt+0xdf70>
   1f4b8:	b	1f4e8 <__assert_fail@plt+0xdfd4>
   1f4bc:	mov	r0, #0
   1f4c0:	add	r1, r9, r0
   1f4c4:	add	r2, r7, r0
   1f4c8:	add	r0, r0, #16
   1f4cc:	vld1.32	{d18-d19}, [r2]
   1f4d0:	vld1.32	{d20-d21}, [r1]
   1f4d4:	cmp	r0, #32
   1f4d8:	vbic	q9, q10, q9
   1f4dc:	vorr	q8, q9, q8
   1f4e0:	vst1.32	{d18-d19}, [r1]
   1f4e4:	bne	1f4c0 <__assert_fail@plt+0xdfac>
   1f4e8:	vext.8	q9, q8, q8, #8
   1f4ec:	ldr	r3, [sp, #20]
   1f4f0:	vorr	q8, q8, q9
   1f4f4:	vdup.32	q9, d16[1]
   1f4f8:	vorr	q8, q8, q9
   1f4fc:	vmov.32	r0, d16[0]
   1f500:	cmp	r0, #0
   1f504:	beq	1f738 <__assert_fail@plt+0xe224>
   1f508:	mov	r7, #0
   1f50c:	cmp	r6, #1
   1f510:	blt	1f6b4 <__assert_fail@plt+0xe1a0>
   1f514:	add	sl, sp, #32
   1f518:	cmp	r3, #1
   1f51c:	bne	1f548 <__assert_fail@plt+0xe034>
   1f520:	ldr	r1, [sp, #8]
   1f524:	add	r0, sp, #32
   1f528:	add	r0, r0, r7, lsl #5
   1f52c:	ldrb	r1, [r1, lr, lsl #3]
   1f530:	ubfx	r2, r1, #5, #3
   1f534:	and	r1, r1, #31
   1f538:	ldr	r0, [r0, r2, lsl #2]
   1f53c:	mov	r2, #1
   1f540:	tst	r0, r2, lsl r1
   1f544:	beq	1f69c <__assert_fail@plt+0xe188>
   1f548:	vmov.i32	q8, #0	; 0x00000000
   1f54c:	mov	r0, #0
   1f550:	add	r1, sl, r0
   1f554:	add	r2, r9, r0
   1f558:	vld1.32	{d20-d21}, [r1]
   1f55c:	vld1.32	{d18-d19}, [r2]
   1f560:	add	r1, r4, r0
   1f564:	add	r0, r0, #16
   1f568:	cmp	r0, #32
   1f56c:	vand	q9, q10, q9
   1f570:	vorr	q8, q9, q8
   1f574:	vst1.32	{d18-d19}, [r1]
   1f578:	bne	1f550 <__assert_fail@plt+0xe03c>
   1f57c:	vext.8	q9, q8, q8, #8
   1f580:	vorr	q8, q8, q9
   1f584:	vdup.32	q9, d16[1]
   1f588:	vorr	q8, q8, q9
   1f58c:	vmov.32	r0, d16[0]
   1f590:	cmp	r0, #0
   1f594:	beq	1f69c <__assert_fail@plt+0xe188>
   1f598:	vmov.i32	q5, #0	; 0x00000000
   1f59c:	vmov.i32	q8, #0	; 0x00000000
   1f5a0:	mov	r0, #0
   1f5a4:	add	r1, r9, r0
   1f5a8:	add	r2, sl, r0
   1f5ac:	vld1.32	{d18-d19}, [r2]
   1f5b0:	vld1.32	{d20-d21}, [r1]
   1f5b4:	add	r2, r8, r0
   1f5b8:	add	r0, r0, #16
   1f5bc:	cmp	r0, #32
   1f5c0:	vbic	q11, q10, q9
   1f5c4:	vbic	q9, q9, q10
   1f5c8:	vorr	q5, q11, q5
   1f5cc:	vorr	q8, q9, q8
   1f5d0:	vst1.32	{d18-d19}, [r2]
   1f5d4:	vst1.32	{d22-d23}, [r1]
   1f5d8:	bne	1f5a4 <__assert_fail@plt+0xe090>
   1f5dc:	vext.8	q9, q8, q8, #8
   1f5e0:	vorr	q8, q8, q9
   1f5e4:	vdup.32	q9, d16[1]
   1f5e8:	vorr	q8, q8, q9
   1f5ec:	vmov.32	r0, d16[0]
   1f5f0:	cmp	r0, #0
   1f5f4:	beq	1f650 <__assert_fail@plt+0xe13c>
   1f5f8:	mov	r0, r8
   1f5fc:	add	r2, sp, #32
   1f600:	mov	r1, r4
   1f604:	vld1.32	{d16-d17}, [r0]!
   1f608:	mov	r3, r2
   1f60c:	add	r2, r2, r6, lsl #5
   1f610:	vld1.32	{d18-d19}, [r1]!
   1f614:	vld1.64	{d20-d21}, [r0]
   1f618:	add	r0, r3, r7, lsl #5
   1f61c:	vst1.32	{d16-d17}, [r2]!
   1f620:	vld1.64	{d16-d17}, [r1]
   1f624:	add	r1, r7, r7, lsl #1
   1f628:	vst1.32	{d20-d21}, [r2]
   1f62c:	vst1.32	{d18-d19}, [r0]!
   1f630:	add	r1, r5, r1, lsl #2
   1f634:	vst1.32	{d16-d17}, [r0]
   1f638:	add	r0, r6, r6, lsl #1
   1f63c:	add	r0, r5, r0, lsl #2
   1f640:	bl	1c3a0 <__assert_fail@plt+0xae8c>
   1f644:	cmp	r0, #0
   1f648:	bne	1fafc <__assert_fail@plt+0xe5e8>
   1f64c:	add	r6, r6, #1
   1f650:	ldr	r0, [sp, #16]
   1f654:	ldr	r1, [sp, #24]
   1f658:	ldr	r0, [r0, #12]
   1f65c:	ldr	r1, [r0, r1, lsl #2]
   1f660:	add	r0, r7, r7, lsl #1
   1f664:	add	r0, r5, r0, lsl #2
   1f668:	bl	1c204 <__assert_fail@plt+0xacf0>
   1f66c:	cmp	r0, #0
   1f670:	beq	1fafc <__assert_fail@plt+0xe5e8>
   1f674:	vext.8	q8, q5, q8, #8
   1f678:	vorr	q8, q5, q8
   1f67c:	vdup.32	q9, d16[1]
   1f680:	vorr	q8, q8, q9
   1f684:	vmov.32	r0, d16[0]
   1f688:	cmp	r0, #0
   1f68c:	beq	1f6b0 <__assert_fail@plt+0xe19c>
   1f690:	ldr	ip, [sp, #28]
   1f694:	ldr	lr, [sp, #12]
   1f698:	ldr	r3, [sp, #20]
   1f69c:	add	r7, r7, #1
   1f6a0:	add	sl, sl, #32
   1f6a4:	cmp	r7, r6
   1f6a8:	blt	1f518 <__assert_fail@plt+0xe004>
   1f6ac:	b	1f6b4 <__assert_fail@plt+0xe1a0>
   1f6b0:	ldr	ip, [sp, #28]
   1f6b4:	ldr	sl, [sp, #16]
   1f6b8:	cmp	r7, r6
   1f6bc:	bne	1f738 <__assert_fail@plt+0xe224>
   1f6c0:	mov	r0, r9
   1f6c4:	ldr	r1, [sp, #24]
   1f6c8:	vld1.32	{d16-d17}, [r0]!
   1f6cc:	vld1.64	{d18-d19}, [r0]
   1f6d0:	add	r0, sp, #32
   1f6d4:	add	r0, r0, r7, lsl #5
   1f6d8:	vst1.32	{d16-d17}, [r0]!
   1f6dc:	vst1.32	{d18-d19}, [r0]
   1f6e0:	ldr	r0, [sl, #12]
   1f6e4:	ldr	sl, [r0, r1, lsl #2]
   1f6e8:	add	r0, r7, r7, lsl #1
   1f6ec:	mov	r1, #1
   1f6f0:	str	r1, [r5, r0, lsl #2]
   1f6f4:	add	r5, r5, r0, lsl #2
   1f6f8:	mov	r0, #4
   1f6fc:	mov	r6, r5
   1f700:	str	r1, [r6, #4]!
   1f704:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1f708:	cmp	r0, #0
   1f70c:	str	r0, [r5, #8]
   1f710:	beq	1fb24 <__assert_fail@plt+0xe610>
   1f714:	str	sl, [r0]
   1f718:	ldr	ip, [sp, #28]
   1f71c:	ldr	sl, [sp, #16]
   1f720:	mov	r0, r9
   1f724:	sub	lr, fp, #6144	; 0x1800
   1f728:	add	r6, r7, #1
   1f72c:	vst1.64	{d8-d9}, [r0]!
   1f730:	sub	r5, lr, #120	; 0x78
   1f734:	vst1.64	{d8-d9}, [r0]
   1f738:	ldr	r1, [sp, #24]
   1f73c:	ldr	r0, [sl, #8]
   1f740:	add	r1, r1, #1
   1f744:	cmp	r1, r0
   1f748:	blt	1f1c4 <__assert_fail@plt+0xdcb0>
   1f74c:	mov	r0, #0
   1f750:	cmp	r6, #0
   1f754:	ble	1fb3c <__assert_fail@plt+0xe628>
   1f758:	str	r0, [fp, #-3152]	; 0xfffff3b0
   1f75c:	add	r0, r6, #1
   1f760:	str	r6, [sp, #20]
   1f764:	str	r0, [fp, #-3156]	; 0xfffff3ac
   1f768:	lsl	r0, r0, #2
   1f76c:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1f770:	cmp	r0, #0
   1f774:	str	r0, [fp, #-3148]	; 0xfffff3b4
   1f778:	mov	r0, #0
   1f77c:	movweq	r0, #12
   1f780:	str	r0, [fp, #-72]	; 0xffffffb8
   1f784:	beq	1fb68 <__assert_fail@plt+0xe654>
   1f788:	vmov.i32	q8, #0	; 0x00000000
   1f78c:	sub	lr, fp, #3072	; 0xc00
   1f790:	ldr	r1, [sp, #28]
   1f794:	add	r7, sp, #32
   1f798:	mov	r4, #0
   1f79c:	mov	r2, #0
   1f7a0:	sub	r0, lr, #120	; 0x78
   1f7a4:	vst1.64	{d16-d17}, [r0]!
   1f7a8:	vst1.64	{d16-d17}, [r0]
   1f7ac:	mov	r0, #0
   1f7b0:	str	r0, [sp, #12]
   1f7b4:	mov	r0, #0
   1f7b8:	str	r2, [sp, #24]
   1f7bc:	str	r0, [fp, #-3152]	; 0xfffff3b0
   1f7c0:	add	r0, r2, r2, lsl #1
   1f7c4:	add	r0, r5, r0, lsl #2
   1f7c8:	ldr	r6, [r0, #4]
   1f7cc:	cmp	r6, #1
   1f7d0:	blt	1f834 <__assert_fail@plt+0xe320>
   1f7d4:	ldr	sl, [r0, #8]
   1f7d8:	mov	r5, #0
   1f7dc:	ldr	r0, [sl, r5, lsl #2]
   1f7e0:	ldr	r2, [r1, #12]
   1f7e4:	ldr	r0, [r2, r0, lsl #2]
   1f7e8:	cmn	r0, #1
   1f7ec:	beq	1f818 <__assert_fail@plt+0xe304>
   1f7f0:	ldr	r1, [r1, #24]
   1f7f4:	add	r0, r0, r0, lsl #1
   1f7f8:	sub	lr, fp, #3072	; 0xc00
   1f7fc:	add	r1, r1, r0, lsl #2
   1f800:	sub	r0, lr, #84	; 0x54
   1f804:	bl	1bff8 <__assert_fail@plt+0xaae4>
   1f808:	ldr	r1, [sp, #28]
   1f80c:	mov	r4, #0
   1f810:	cmp	r0, #0
   1f814:	bne	1fabc <__assert_fail@plt+0xe5a8>
   1f818:	add	r5, r5, #1
   1f81c:	cmp	r5, r6
   1f820:	blt	1f7dc <__assert_fail@plt+0xe2c8>
   1f824:	ldr	sl, [sp, #16]
   1f828:	sub	lr, fp, #6144	; 0x1800
   1f82c:	str	r4, [fp, #-72]	; 0xffffffb8
   1f830:	sub	r5, lr, #120	; 0x78
   1f834:	sub	lr, fp, #3072	; 0xc00
   1f838:	sub	r0, fp, #72	; 0x48
   1f83c:	mov	r3, #0
   1f840:	sub	r2, lr, #84	; 0x54
   1f844:	bl	1c484 <__assert_fail@plt+0xaf70>
   1f848:	ldr	r1, [sp, #24]
   1f84c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   1f850:	mov	r6, r0
   1f854:	cmp	r0, #0
   1f858:	str	r0, [r9, r1, lsl #2]
   1f85c:	bne	1f868 <__assert_fail@plt+0xe354>
   1f860:	cmp	r4, #0
   1f864:	bne	1fac8 <__assert_fail@plt+0xe5b4>
   1f868:	ldrsb	r0, [r6, #52]	; 0x34
   1f86c:	cmn	r0, #1
   1f870:	ble	1f888 <__assert_fail@plt+0xe374>
   1f874:	sub	lr, fp, #2048	; 0x800
   1f878:	str	r6, [r8, r1, lsl #2]
   1f87c:	sub	r0, lr, #72	; 0x48
   1f880:	str	r6, [r0, r1, lsl #2]
   1f884:	b	1f924 <__assert_fail@plt+0xe410>
   1f888:	ldr	r1, [sp, #28]
   1f88c:	sub	lr, fp, #3072	; 0xc00
   1f890:	sub	r0, fp, #72	; 0x48
   1f894:	mov	r3, #1
   1f898:	sub	r2, lr, #84	; 0x54
   1f89c:	bl	1c484 <__assert_fail@plt+0xaf70>
   1f8a0:	ldr	r2, [sp, #24]
   1f8a4:	sub	lr, fp, #2048	; 0x800
   1f8a8:	cmp	r0, #0
   1f8ac:	sub	r1, lr, #72	; 0x48
   1f8b0:	str	r0, [r1, r2, lsl #2]
   1f8b4:	bne	1f8c4 <__assert_fail@plt+0xe3b0>
   1f8b8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f8bc:	cmp	r1, #0
   1f8c0:	bne	1fac8 <__assert_fail@plt+0xe5b4>
   1f8c4:	cmp	r6, r0
   1f8c8:	beq	1f8f0 <__assert_fail@plt+0xe3dc>
   1f8cc:	ldr	r1, [sp, #28]
   1f8d0:	ldr	r2, [sp, #12]
   1f8d4:	ldr	r0, [r1, #92]	; 0x5c
   1f8d8:	cmp	r0, #1
   1f8dc:	mov	r0, #0
   1f8e0:	movwgt	r0, #1
   1f8e4:	orr	r2, r2, r0
   1f8e8:	str	r2, [sp, #12]
   1f8ec:	b	1f8f4 <__assert_fail@plt+0xe3e0>
   1f8f0:	ldr	r1, [sp, #28]
   1f8f4:	sub	lr, fp, #3072	; 0xc00
   1f8f8:	sub	r0, fp, #72	; 0x48
   1f8fc:	mov	r3, #2
   1f900:	sub	r2, lr, #84	; 0x54
   1f904:	bl	1c484 <__assert_fail@plt+0xaf70>
   1f908:	ldr	r1, [sp, #24]
   1f90c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   1f910:	cmp	r0, #0
   1f914:	str	r0, [r8, r1, lsl #2]
   1f918:	bne	1f924 <__assert_fail@plt+0xe410>
   1f91c:	cmp	r4, #0
   1f920:	bne	1fac8 <__assert_fail@plt+0xe5b4>
   1f924:	sub	lr, fp, #3072	; 0xc00
   1f928:	mov	r0, #0
   1f92c:	sub	r1, lr, #120	; 0x78
   1f930:	add	r2, r1, r0
   1f934:	add	r3, r7, r0
   1f938:	add	r0, r0, #16
   1f93c:	vld1.32	{d16-d17}, [r3]
   1f940:	vld1.32	{d18-d19}, [r2]
   1f944:	cmp	r0, #32
   1f948:	vorr	q8, q9, q8
   1f94c:	vst1.32	{d16-d17}, [r2]
   1f950:	bne	1f930 <__assert_fail@plt+0xe41c>
   1f954:	ldr	r2, [sp, #24]
   1f958:	ldr	r0, [sp, #20]
   1f95c:	ldr	r1, [sp, #28]
   1f960:	add	r7, r7, #32
   1f964:	add	r2, r2, #1
   1f968:	cmp	r2, r0
   1f96c:	bne	1f7b4 <__assert_fail@plt+0xe2a0>
   1f970:	ldr	r0, [sp, #12]
   1f974:	tst	r0, #1
   1f978:	bne	1fb78 <__assert_fail@plt+0xe664>
   1f97c:	mov	r0, #4
   1f980:	mov	r1, #256	; 0x100
   1f984:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1f988:	cmp	r0, #0
   1f98c:	str	r0, [sl, #44]	; 0x2c
   1f990:	beq	1fac8 <__assert_fail@plt+0xe5b4>
   1f994:	ldr	r4, [sp, #28]
   1f998:	mov	sl, r0
   1f99c:	mov	r1, #0
   1f9a0:	add	ip, sp, #32
   1f9a4:	mov	r3, #0
   1f9a8:	sub	lr, fp, #3072	; 0xc00
   1f9ac:	sub	r0, lr, #120	; 0x78
   1f9b0:	ldr	r7, [r0, r3, lsl #2]
   1f9b4:	cmp	r7, #0
   1f9b8:	beq	1fa34 <__assert_fail@plt+0xe520>
   1f9bc:	add	r6, r4, r3, lsl #2
   1f9c0:	lsl	r5, r3, #5
   1f9c4:	add	r0, r6, #96	; 0x60
   1f9c8:	mov	r6, #1
   1f9cc:	tst	r7, #1
   1f9d0:	bne	1f9f0 <__assert_fail@plt+0xe4dc>
   1f9d4:	lsr	r2, r7, #1
   1f9d8:	cmp	r1, r7, lsr #1
   1f9dc:	add	r5, r5, #1
   1f9e0:	lsl	r6, r6, #1
   1f9e4:	mov	r7, r2
   1f9e8:	bne	1f9cc <__assert_fail@plt+0xe4b8>
   1f9ec:	b	1fa34 <__assert_fail@plt+0xe520>
   1f9f0:	mov	r4, sl
   1f9f4:	mov	lr, #0
   1f9f8:	ldr	sl, [ip, lr, lsl #3]
   1f9fc:	add	lr, lr, #4
   1fa00:	tst	sl, r6
   1fa04:	beq	1f9f8 <__assert_fail@plt+0xe4e4>
   1fa08:	ldr	r2, [r0]
   1fa0c:	mov	sl, r4
   1fa10:	tst	r2, r6
   1fa14:	sub	r2, fp, #2048	; 0x800
   1fa18:	sub	r2, r2, #72	; 0x48
   1fa1c:	moveq	r2, r9
   1fa20:	add	r2, r2, lr
   1fa24:	ldr	r2, [r2, #-4]
   1fa28:	str	r2, [r4, r5, lsl #2]
   1fa2c:	ldr	r4, [sp, #28]
   1fa30:	b	1f9d4 <__assert_fail@plt+0xe4c0>
   1fa34:	add	r3, r3, #1
   1fa38:	add	ip, ip, #4
   1fa3c:	cmp	r3, #8
   1fa40:	bne	1f9a8 <__assert_fail@plt+0xe494>
   1fa44:	ldrb	r0, [fp, #-3191]	; 0xfffff389
   1fa48:	ldr	r5, [sp, #20]
   1fa4c:	sub	lr, fp, #6144	; 0x1800
   1fa50:	sub	r4, lr, #120	; 0x78
   1fa54:	tst	r0, #4
   1fa58:	beq	1fa98 <__assert_fail@plt+0xe584>
   1fa5c:	add	r1, sp, #32
   1fa60:	mov	r2, r5
   1fa64:	ldrb	r0, [r1, #1]
   1fa68:	tst	r0, #4
   1fa6c:	bne	1fa84 <__assert_fail@plt+0xe570>
   1fa70:	add	r1, r1, #32
   1fa74:	subs	r2, r2, #1
   1fa78:	add	r8, r8, #4
   1fa7c:	bne	1fa64 <__assert_fail@plt+0xe550>
   1fa80:	b	1fa98 <__assert_fail@plt+0xe584>
   1fa84:	ldr	r0, [sp, #12]
   1fa88:	ldr	r1, [r8]
   1fa8c:	tst	r0, #1
   1fa90:	str	r1, [sl, #40]	; 0x28
   1fa94:	strne	r1, [sl, #1064]	; 0x428
   1fa98:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   1fa9c:	bl	22190 <__assert_fail@plt+0x10c7c>
   1faa0:	add	r4, r4, #8
   1faa4:	ldr	r0, [r4], #12
   1faa8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1faac:	subs	r5, r5, #1
   1fab0:	bne	1faa4 <__assert_fail@plt+0xe590>
   1fab4:	mov	r0, #1
   1fab8:	b	1fb58 <__assert_fail@plt+0xe644>
   1fabc:	sub	lr, fp, #6144	; 0x1800
   1fac0:	str	r0, [fp, #-72]	; 0xffffffb8
   1fac4:	sub	r5, lr, #120	; 0x78
   1fac8:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   1facc:	bl	22190 <__assert_fail@plt+0x10c7c>
   1fad0:	ldr	r1, [sp, #20]
   1fad4:	cmp	r1, #1
   1fad8:	blt	1fb1c <__assert_fail@plt+0xe608>
   1fadc:	add	r4, r5, #8
   1fae0:	ldr	r0, [r4], #12
   1fae4:	mov	r5, r1
   1fae8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1faec:	mov	r1, r5
   1faf0:	subs	r1, r5, #1
   1faf4:	bne	1fae0 <__assert_fail@plt+0xe5cc>
   1faf8:	b	1fb1c <__assert_fail@plt+0xe608>
   1fafc:	mov	r7, r6
   1fb00:	cmp	r7, #1
   1fb04:	blt	1fb1c <__assert_fail@plt+0xe608>
   1fb08:	add	r4, r5, #8
   1fb0c:	ldr	r0, [r4], #12
   1fb10:	bl	22190 <__assert_fail@plt+0x10c7c>
   1fb14:	subs	r7, r7, #1
   1fb18:	bne	1fb0c <__assert_fail@plt+0xe5f8>
   1fb1c:	mov	r0, #0
   1fb20:	b	1fb58 <__assert_fail@plt+0xe644>
   1fb24:	mov	r0, #0
   1fb28:	sub	lr, fp, #6144	; 0x1800
   1fb2c:	str	r0, [r6]
   1fb30:	str	r0, [r5]
   1fb34:	sub	r5, lr, #120	; 0x78
   1fb38:	b	1fb00 <__assert_fail@plt+0xe5ec>
   1fb3c:	bne	1fb58 <__assert_fail@plt+0xe644>
   1fb40:	mov	r0, #4
   1fb44:	mov	r1, #256	; 0x100
   1fb48:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1fb4c:	cmp	r0, #0
   1fb50:	str	r0, [sl, #44]	; 0x2c
   1fb54:	movwne	r0, #1
   1fb58:	sub	sp, fp, #64	; 0x40
   1fb5c:	vpop	{d8-d11}
   1fb60:	add	sp, sp, #4
   1fb64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb68:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   1fb6c:	bl	22190 <__assert_fail@plt+0x10c7c>
   1fb70:	ldr	r1, [sp, #20]
   1fb74:	b	1fadc <__assert_fail@plt+0xe5c8>
   1fb78:	mov	r0, #4
   1fb7c:	mov	r1, #512	; 0x200
   1fb80:	bl	21f80 <__assert_fail@plt+0x10a6c>
   1fb84:	cmp	r0, #0
   1fb88:	str	r0, [sl, #48]	; 0x30
   1fb8c:	beq	1fac8 <__assert_fail@plt+0xe5b4>
   1fb90:	sub	lr, fp, #2048	; 0x800
   1fb94:	mov	sl, r0
   1fb98:	sub	ip, r9, #4
   1fb9c:	mov	r3, #0
   1fba0:	add	r7, sp, #32
   1fba4:	mov	r6, #0
   1fba8:	sub	r0, lr, #72	; 0x48
   1fbac:	sub	lr, r0, #4
   1fbb0:	sub	r0, fp, #3072	; 0xc00
   1fbb4:	sub	r0, r0, #120	; 0x78
   1fbb8:	ldr	r5, [r0, r6, lsl #2]
   1fbbc:	cmp	r5, #0
   1fbc0:	beq	1fc30 <__assert_fail@plt+0xe71c>
   1fbc4:	lsl	r4, r6, #5
   1fbc8:	mov	r1, #1
   1fbcc:	tst	r5, #1
   1fbd0:	bne	1fbf0 <__assert_fail@plt+0xe6dc>
   1fbd4:	lsr	r0, r5, #1
   1fbd8:	cmp	r3, r5, lsr #1
   1fbdc:	add	r4, r4, #1
   1fbe0:	lsl	r1, r1, #1
   1fbe4:	mov	r5, r0
   1fbe8:	bne	1fbcc <__assert_fail@plt+0xe6b8>
   1fbec:	b	1fc30 <__assert_fail@plt+0xe71c>
   1fbf0:	str	sl, [sp, #28]
   1fbf4:	mov	r2, r7
   1fbf8:	mov	sl, ip
   1fbfc:	mov	r9, lr
   1fc00:	ldr	r0, [r2], #32
   1fc04:	add	sl, sl, #4
   1fc08:	add	r9, r9, #4
   1fc0c:	tst	r0, r1
   1fc10:	beq	1fc00 <__assert_fail@plt+0xe6ec>
   1fc14:	ldr	r0, [sl]
   1fc18:	ldr	sl, [sp, #28]
   1fc1c:	mov	r2, sl
   1fc20:	str	r0, [r2, r4, lsl #2]!
   1fc24:	ldr	r0, [r9]
   1fc28:	str	r0, [r2, #1024]	; 0x400
   1fc2c:	b	1fbd4 <__assert_fail@plt+0xe6c0>
   1fc30:	add	r6, r6, #1
   1fc34:	add	r7, r7, #4
   1fc38:	cmp	r6, #8
   1fc3c:	bne	1fbb0 <__assert_fail@plt+0xe69c>
   1fc40:	b	1fa44 <__assert_fail@plt+0xe530>
   1fc44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc48:	add	fp, sp, #28
   1fc4c:	sub	sp, sp, #44	; 0x2c
   1fc50:	ldr	r4, [r1, #8]
   1fc54:	ldr	r6, [r1, #12]
   1fc58:	mov	r9, r0
   1fc5c:	mov	r0, #1
   1fc60:	mov	sl, r1
   1fc64:	str	r0, [sp, #36]	; 0x24
   1fc68:	str	r0, [sp, #32]
   1fc6c:	mov	r0, #4
   1fc70:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   1fc74:	cmp	r0, #0
   1fc78:	str	r0, [sp, #40]	; 0x28
   1fc7c:	beq	1fec8 <__assert_fail@plt+0xe9b4>
   1fc80:	str	r4, [r0]
   1fc84:	add	r3, sp, #32
   1fc88:	mov	r0, r9
   1fc8c:	mov	r1, sl
   1fc90:	mov	r2, r6
   1fc94:	bl	1ff88 <__assert_fail@plt+0xea74>
   1fc98:	cmp	r0, #0
   1fc9c:	bne	1fe8c <__assert_fail@plt+0xe978>
   1fca0:	add	r0, sl, #16
   1fca4:	mov	r1, #0
   1fca8:	str	r0, [sp, #12]
   1fcac:	cmp	r6, #1
   1fcb0:	blt	1fe9c <__assert_fail@plt+0xe988>
   1fcb4:	ldr	r0, [sl]
   1fcb8:	ldr	r2, [r0, r6, lsl #2]
   1fcbc:	cmp	r2, #0
   1fcc0:	mov	r2, #0
   1fcc4:	addeq	r2, r1, #1
   1fcc8:	ldr	r1, [r9, #120]	; 0x78
   1fccc:	cmp	r2, r1
   1fcd0:	bgt	1fea4 <__assert_fail@plt+0xe990>
   1fcd4:	mov	r0, #0
   1fcd8:	str	r6, [sp, #16]
   1fcdc:	sub	r6, r6, #1
   1fce0:	str	r2, [sp, #8]
   1fce4:	str	r0, [sp, #36]	; 0x24
   1fce8:	ldr	r0, [r9, #100]	; 0x64
   1fcec:	ldr	r1, [r0, r6, lsl #2]
   1fcf0:	cmp	r1, #0
   1fcf4:	beq	1fe6c <__assert_fail@plt+0xe958>
   1fcf8:	ldr	r0, [r1, #20]
   1fcfc:	cmp	r0, #1
   1fd00:	blt	1fe6c <__assert_fail@plt+0xe958>
   1fd04:	ldr	r0, [r9, #84]	; 0x54
   1fd08:	mov	r5, #0
   1fd0c:	str	r1, [sp, #24]
   1fd10:	str	r0, [sp, #28]
   1fd14:	ldr	r0, [r1, #24]
   1fd18:	ldr	r7, [r0, r5, lsl #2]
   1fd1c:	ldr	r0, [sp, #28]
   1fd20:	ldr	r0, [r0]
   1fd24:	add	r0, r0, r7, lsl #3
   1fd28:	ldrb	r0, [r0, #6]
   1fd2c:	tst	r0, #16
   1fd30:	bne	1fd8c <__assert_fail@plt+0xe878>
   1fd34:	ldr	r0, [sp, #28]
   1fd38:	mov	r2, r6
   1fd3c:	ldr	r0, [r0]
   1fd40:	add	r1, r0, r7, lsl #3
   1fd44:	mov	r0, r9
   1fd48:	bl	1f014 <__assert_fail@plt+0xdb00>
   1fd4c:	cmp	r0, #0
   1fd50:	beq	1fe58 <__assert_fail@plt+0xe944>
   1fd54:	ldr	r0, [sl]
   1fd58:	ldr	r1, [sp, #16]
   1fd5c:	ldr	r0, [r0, r1, lsl #2]
   1fd60:	cmp	r0, #0
   1fd64:	beq	1fe58 <__assert_fail@plt+0xe944>
   1fd68:	ldr	r1, [sp, #28]
   1fd6c:	add	r0, r0, #4
   1fd70:	ldr	r1, [r1, #12]
   1fd74:	ldr	r1, [r1, r7, lsl #2]
   1fd78:	bl	1c41c <__assert_fail@plt+0xaf08>
   1fd7c:	mov	r4, #1
   1fd80:	cmp	r0, #0
   1fd84:	bne	1fe0c <__assert_fail@plt+0xe8f8>
   1fd88:	b	1fe58 <__assert_fail@plt+0xe944>
   1fd8c:	ldr	r0, [sl, #12]
   1fd90:	ldr	r8, [r9, #84]	; 0x54
   1fd94:	mov	r2, r9
   1fd98:	mov	r1, r7
   1fd9c:	mov	r3, r6
   1fda0:	str	r0, [sp, #20]
   1fda4:	mov	r0, r8
   1fda8:	bl	1ed1c <__assert_fail@plt+0xd808>
   1fdac:	mov	r4, r0
   1fdb0:	cmp	r0, #1
   1fdb4:	blt	1fdd4 <__assert_fail@plt+0xe8c0>
   1fdb8:	ldr	r1, [sp, #20]
   1fdbc:	add	r0, r4, r6
   1fdc0:	mov	r2, r6
   1fdc4:	cmp	r0, r1
   1fdc8:	ble	1fde0 <__assert_fail@plt+0xe8cc>
   1fdcc:	mov	r6, r2
   1fdd0:	b	1fe0c <__assert_fail@plt+0xe8f8>
   1fdd4:	cmp	r4, #0
   1fdd8:	bne	1fe0c <__assert_fail@plt+0xe8f8>
   1fddc:	b	1fd34 <__assert_fail@plt+0xe820>
   1fde0:	ldr	r1, [sl]
   1fde4:	mov	r6, r2
   1fde8:	ldr	r0, [r1, r0, lsl #2]
   1fdec:	cmp	r0, #0
   1fdf0:	beq	1fd34 <__assert_fail@plt+0xe820>
   1fdf4:	ldr	r1, [r8, #12]
   1fdf8:	add	r0, r0, #4
   1fdfc:	ldr	r1, [r1, r7, lsl #2]
   1fe00:	bl	1c41c <__assert_fail@plt+0xaf08>
   1fe04:	cmp	r0, #0
   1fe08:	beq	1fd34 <__assert_fail@plt+0xe820>
   1fe0c:	ldr	r0, [sl, #20]
   1fe10:	cmp	r0, #0
   1fe14:	beq	1fe44 <__assert_fail@plt+0xe930>
   1fe18:	ldr	r0, [sp, #28]
   1fe1c:	ldr	r1, [sp, #12]
   1fe20:	add	r3, r4, r6
   1fe24:	ldr	r0, [r0, #12]
   1fe28:	ldr	r2, [r0, r7, lsl #2]
   1fe2c:	mov	r0, r9
   1fe30:	str	r7, [sp]
   1fe34:	str	r6, [sp, #4]
   1fe38:	bl	20a7c <__assert_fail@plt+0xf568>
   1fe3c:	cmp	r0, #0
   1fe40:	bne	1fe58 <__assert_fail@plt+0xe944>
   1fe44:	add	r0, sp, #32
   1fe48:	mov	r1, r7
   1fe4c:	bl	1c204 <__assert_fail@plt+0xacf0>
   1fe50:	cmp	r0, #0
   1fe54:	beq	1fe94 <__assert_fail@plt+0xe980>
   1fe58:	ldr	r1, [sp, #24]
   1fe5c:	add	r5, r5, #1
   1fe60:	ldr	r0, [r1, #20]
   1fe64:	cmp	r5, r0
   1fe68:	blt	1fd14 <__assert_fail@plt+0xe800>
   1fe6c:	mov	r0, r9
   1fe70:	mov	r1, sl
   1fe74:	mov	r2, r6
   1fe78:	add	r3, sp, #32
   1fe7c:	bl	1ff88 <__assert_fail@plt+0xea74>
   1fe80:	ldr	r1, [sp, #8]
   1fe84:	cmp	r0, #0
   1fe88:	beq	1fcac <__assert_fail@plt+0xe798>
   1fe8c:	mov	r4, r0
   1fe90:	b	1feb4 <__assert_fail@plt+0xe9a0>
   1fe94:	mov	r4, #12
   1fe98:	b	1feb4 <__assert_fail@plt+0xe9a0>
   1fe9c:	mov	r4, #0
   1fea0:	b	1feb4 <__assert_fail@plt+0xe9a0>
   1fea4:	lsl	r2, r6, #2
   1fea8:	mov	r1, #0
   1feac:	mov	r4, #0
   1feb0:	bl	11418 <memset@plt>
   1feb4:	ldr	r0, [sp, #40]	; 0x28
   1feb8:	bl	22190 <__assert_fail@plt+0x10c7c>
   1febc:	mov	r0, r4
   1fec0:	sub	sp, fp, #28
   1fec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fec8:	mov	r0, #0
   1fecc:	mov	r4, #12
   1fed0:	str	r0, [sp, #32]
   1fed4:	str	r0, [sp, #36]	; 0x24
   1fed8:	b	1febc <__assert_fail@plt+0xe9a8>
   1fedc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fee0:	add	fp, sp, #24
   1fee4:	sub	sp, sp, #16
   1fee8:	cmp	r3, #1
   1feec:	blt	1ff7c <__assert_fail@plt+0xea68>
   1fef0:	mov	r4, r3
   1fef4:	mov	r5, r2
   1fef8:	mov	r6, r1
   1fefc:	mov	r7, r0
   1ff00:	mov	r8, sp
   1ff04:	add	r9, sp, #12
   1ff08:	ldr	r1, [r6]
   1ff0c:	ldr	r0, [r5]
   1ff10:	cmp	r1, #0
   1ff14:	beq	1ff68 <__assert_fail@plt+0xea54>
   1ff18:	cmp	r0, #0
   1ff1c:	beq	1ff6c <__assert_fail@plt+0xea58>
   1ff20:	add	r2, r0, #4
   1ff24:	add	r1, r1, #4
   1ff28:	mov	r0, r8
   1ff2c:	bl	1dc08 <__assert_fail@plt+0xc6f4>
   1ff30:	cmp	r0, #0
   1ff34:	str	r0, [sp, #12]
   1ff38:	bne	1ff80 <__assert_fail@plt+0xea6c>
   1ff3c:	mov	r0, r9
   1ff40:	mov	r1, r7
   1ff44:	mov	r2, r8
   1ff48:	bl	1eb24 <__assert_fail@plt+0xd610>
   1ff4c:	str	r0, [r6]
   1ff50:	ldr	r0, [sp, #8]
   1ff54:	bl	22190 <__assert_fail@plt+0x10c7c>
   1ff58:	ldr	r0, [sp, #12]
   1ff5c:	cmp	r0, #0
   1ff60:	beq	1ff6c <__assert_fail@plt+0xea58>
   1ff64:	b	1ff80 <__assert_fail@plt+0xea6c>
   1ff68:	str	r0, [r6]
   1ff6c:	add	r6, r6, #4
   1ff70:	add	r5, r5, #4
   1ff74:	subs	r4, r4, #1
   1ff78:	bne	1ff08 <__assert_fail@plt+0xe9f4>
   1ff7c:	mov	r0, #0
   1ff80:	sub	sp, fp, #24
   1ff84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff8c:	add	fp, sp, #28
   1ff90:	sub	sp, sp, #84	; 0x54
   1ff94:	mov	r6, r3
   1ff98:	mov	r3, #0
   1ff9c:	ldr	r7, [r0, #84]	; 0x54
   1ffa0:	mov	r4, r2
   1ffa4:	str	r0, [sp, #44]	; 0x2c
   1ffa8:	str	r1, [sp, #48]	; 0x30
   1ffac:	str	r3, [sp, #52]	; 0x34
   1ffb0:	str	r4, [sp, #40]	; 0x28
   1ffb4:	ldr	r2, [r0, #100]	; 0x64
   1ffb8:	ldr	r8, [r2, r4, lsl #2]
   1ffbc:	ldr	r2, [r6, #4]
   1ffc0:	cmp	r8, #0
   1ffc4:	mov	r0, r8
   1ffc8:	addne	r0, r0, #4
   1ffcc:	cmp	r2, #0
   1ffd0:	str	r0, [sp, #36]	; 0x24
   1ffd4:	beq	20350 <__assert_fail@plt+0xee3c>
   1ffd8:	cmp	r8, #0
   1ffdc:	beq	20324 <__assert_fail@plt+0xee10>
   1ffe0:	mov	r0, #0
   1ffe4:	mov	r1, r7
   1ffe8:	mov	r2, r6
   1ffec:	str	r7, [sp, #28]
   1fff0:	str	r6, [sp, #20]
   1fff4:	str	r0, [sp, #56]	; 0x38
   1fff8:	add	r0, sp, #56	; 0x38
   1fffc:	bl	1eb24 <__assert_fail@plt+0xd610>
   20000:	ldr	r9, [sp, #56]	; 0x38
   20004:	cmp	r9, #0
   20008:	bne	2066c <__assert_fail@plt+0xf158>
   2000c:	mov	r6, r0
   20010:	mov	r5, r0
   20014:	ldr	r2, [sp, #20]
   20018:	ldr	r0, [r6, #28]!
   2001c:	cmp	r0, #0
   20020:	bne	200b4 <__assert_fail@plt+0xeba0>
   20024:	ldr	r0, [r2, #4]
   20028:	mov	r4, #0
   2002c:	mov	r7, r2
   20030:	str	r0, [r5, #28]
   20034:	lsl	r0, r0, #2
   20038:	str	r4, [r5, #32]
   2003c:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   20040:	cmp	r0, #0
   20044:	mov	r9, #12
   20048:	str	r0, [r5, #36]	; 0x24
   2004c:	movweq	r4, #12
   20050:	str	r4, [sp, #56]	; 0x38
   20054:	beq	2066c <__assert_fail@plt+0xf158>
   20058:	ldr	r0, [r7, #4]
   2005c:	mov	r2, r7
   20060:	cmp	r0, #1
   20064:	blt	200b4 <__assert_fail@plt+0xeba0>
   20068:	mov	r5, #0
   2006c:	ldr	r0, [r2, #8]
   20070:	ldr	r1, [sp, #28]
   20074:	mov	r4, r2
   20078:	ldr	r0, [r0, r5, lsl #2]
   2007c:	ldr	r1, [r1, #28]
   20080:	add	r0, r0, r0, lsl #1
   20084:	add	r1, r1, r0, lsl #2
   20088:	mov	r0, r6
   2008c:	bl	1bff8 <__assert_fail@plt+0xaae4>
   20090:	cmp	r0, #0
   20094:	bne	2067c <__assert_fail@plt+0xf168>
   20098:	ldr	r0, [r4, #4]
   2009c:	add	r5, r5, #1
   200a0:	mov	r2, r4
   200a4:	cmp	r5, r0
   200a8:	blt	2006c <__assert_fail@plt+0xeb58>
   200ac:	mov	r0, #0
   200b0:	str	r0, [sp, #56]	; 0x38
   200b4:	ldr	r1, [sp, #36]	; 0x24
   200b8:	mov	r0, r2
   200bc:	mov	r2, r6
   200c0:	bl	20698 <__assert_fail@plt+0xf184>
   200c4:	cmp	r0, #0
   200c8:	str	r0, [sp, #52]	; 0x34
   200cc:	bne	20690 <__assert_fail@plt+0xf17c>
   200d0:	ldr	ip, [sp, #48]	; 0x30
   200d4:	ldr	r4, [sp, #40]	; 0x28
   200d8:	ldr	r7, [sp, #28]
   200dc:	ldr	r6, [sp, #20]
   200e0:	ldr	r0, [ip, #20]
   200e4:	cmp	r0, #0
   200e8:	beq	20324 <__assert_fail@plt+0xee10>
   200ec:	cmp	r0, #1
   200f0:	str	r8, [sp, #12]
   200f4:	blt	20318 <__assert_fail@plt+0xee04>
   200f8:	ldr	r0, [sp, #44]	; 0x2c
   200fc:	mov	r8, #0
   20100:	ldr	r0, [r0, #116]	; 0x74
   20104:	str	r0, [sp, #24]
   20108:	ldr	r0, [ip, #24]
   2010c:	ldr	r1, [sp, #24]
   20110:	ldr	r0, [r0, r8, lsl #2]
   20114:	add	r0, r0, r0, lsl #1
   20118:	add	r1, r1, r0, lsl #3
   2011c:	ldr	r2, [r1, #8]
   20120:	cmp	r2, r4
   20124:	bge	20308 <__assert_fail@plt+0xedf4>
   20128:	ldr	r1, [r1, #4]
   2012c:	cmp	r1, r4
   20130:	blt	20308 <__assert_fail@plt+0xedf4>
   20134:	ldr	r1, [sp, #24]
   20138:	ldr	r2, [r7]
   2013c:	ldr	r0, [r1, r0, lsl #3]!
   20140:	ldr	r1, [r1, #12]
   20144:	ldr	sl, [r2, r0, lsl #3]
   20148:	ldr	r0, [r6, #4]
   2014c:	cmp	r1, r4
   20150:	bne	20298 <__assert_fail@plt+0xed84>
   20154:	cmp	r0, #1
   20158:	blt	20308 <__assert_fail@plt+0xedf4>
   2015c:	ldr	r3, [r6, #8]
   20160:	mvn	r1, #0
   20164:	str	r1, [sp, #32]
   20168:	mvn	r1, #0
   2016c:	ldr	r5, [r3]
   20170:	add	r4, r2, r5, lsl #3
   20174:	ldrb	r4, [r4, #4]
   20178:	cmp	r4, #9
   2017c:	beq	20198 <__assert_fail@plt+0xec84>
   20180:	cmp	r4, #8
   20184:	bne	201ac <__assert_fail@plt+0xec98>
   20188:	ldr	r4, [r2, r5, lsl #3]
   2018c:	cmp	sl, r4
   20190:	moveq	r1, r5
   20194:	b	201ac <__assert_fail@plt+0xec98>
   20198:	ldr	r4, [r2, r5, lsl #3]
   2019c:	cmp	sl, r4
   201a0:	ldr	r4, [sp, #32]
   201a4:	moveq	r4, r5
   201a8:	str	r4, [sp, #32]
   201ac:	add	r3, r3, #4
   201b0:	subs	r0, r0, #1
   201b4:	bne	2016c <__assert_fail@plt+0xec58>
   201b8:	cmp	r1, #0
   201bc:	bmi	201e4 <__assert_fail@plt+0xecd0>
   201c0:	ldr	r3, [sp, #36]	; 0x24
   201c4:	mov	r0, r7
   201c8:	mov	r2, r6
   201cc:	bl	20878 <__assert_fail@plt+0xf364>
   201d0:	ldr	r6, [sp, #20]
   201d4:	ldr	r7, [sp, #28]
   201d8:	ldr	ip, [sp, #48]	; 0x30
   201dc:	cmp	r0, #0
   201e0:	bne	20668 <__assert_fail@plt+0xf154>
   201e4:	ldr	sl, [sp, #32]
   201e8:	ldr	r4, [sp, #40]	; 0x28
   201ec:	cmp	sl, #0
   201f0:	bmi	20308 <__assert_fail@plt+0xedf4>
   201f4:	ldr	r0, [r6, #4]
   201f8:	cmp	r0, #1
   201fc:	str	r0, [sp, #16]
   20200:	blt	20308 <__assert_fail@plt+0xedf4>
   20204:	mov	r5, #0
   20208:	ldr	r0, [r6, #8]
   2020c:	mov	r1, sl
   20210:	ldr	r6, [r0, r5, lsl #2]
   20214:	ldr	r0, [r7, #28]
   20218:	add	r9, r6, r6, lsl #1
   2021c:	add	r0, r0, r9, lsl #2
   20220:	bl	1c41c <__assert_fail@plt+0xaf08>
   20224:	cmp	r0, #0
   20228:	bne	20244 <__assert_fail@plt+0xed30>
   2022c:	ldr	r0, [r7, #24]
   20230:	mov	r1, sl
   20234:	add	r0, r0, r9, lsl #2
   20238:	bl	1c41c <__assert_fail@plt+0xaf08>
   2023c:	cmp	r0, #0
   20240:	beq	20264 <__assert_fail@plt+0xed50>
   20244:	ldr	r6, [sp, #20]
   20248:	ldr	r0, [sp, #16]
   2024c:	ldr	r4, [sp, #40]	; 0x28
   20250:	ldr	ip, [sp, #48]	; 0x30
   20254:	add	r5, r5, #1
   20258:	cmp	r5, r0
   2025c:	blt	20208 <__assert_fail@plt+0xecf4>
   20260:	b	20308 <__assert_fail@plt+0xedf4>
   20264:	mov	r1, r6
   20268:	ldr	r6, [sp, #20]
   2026c:	ldr	r3, [sp, #36]	; 0x24
   20270:	mov	r0, r7
   20274:	mov	r2, r6
   20278:	bl	20878 <__assert_fail@plt+0xf364>
   2027c:	cmp	r0, #0
   20280:	bne	20668 <__assert_fail@plt+0xf154>
   20284:	ldr	r0, [r6, #4]
   20288:	ldr	r7, [sp, #28]
   2028c:	sub	r5, r5, #1
   20290:	str	r0, [sp, #16]
   20294:	b	20248 <__assert_fail@plt+0xed34>
   20298:	cmp	r0, #1
   2029c:	blt	20308 <__assert_fail@plt+0xedf4>
   202a0:	mov	r5, #0
   202a4:	ldr	r1, [r6, #8]
   202a8:	ldr	r1, [r1, r5, lsl #2]
   202ac:	add	r3, r2, r1, lsl #3
   202b0:	ldrb	r3, [r3, #4]
   202b4:	orr	r3, r3, #1
   202b8:	cmp	r3, #9
   202bc:	bne	202f4 <__assert_fail@plt+0xede0>
   202c0:	ldr	r2, [r2, r1, lsl #3]
   202c4:	cmp	sl, r2
   202c8:	bne	202f4 <__assert_fail@plt+0xede0>
   202cc:	ldr	r3, [sp, #36]	; 0x24
   202d0:	mov	r0, r7
   202d4:	mov	r2, r6
   202d8:	bl	20878 <__assert_fail@plt+0xf364>
   202dc:	cmp	r0, #0
   202e0:	bne	20668 <__assert_fail@plt+0xf154>
   202e4:	ldr	r0, [r6, #4]
   202e8:	ldr	r4, [sp, #40]	; 0x28
   202ec:	ldr	ip, [sp, #48]	; 0x30
   202f0:	ldr	r7, [sp, #28]
   202f4:	add	r5, r5, #1
   202f8:	cmp	r5, r0
   202fc:	bge	20308 <__assert_fail@plt+0xedf4>
   20300:	ldr	r2, [r7]
   20304:	b	202a4 <__assert_fail@plt+0xed90>
   20308:	ldr	r0, [ip, #20]
   2030c:	add	r8, r8, #1
   20310:	cmp	r8, r0
   20314:	blt	20108 <__assert_fail@plt+0xebf4>
   20318:	ldr	r8, [sp, #12]
   2031c:	mov	r0, #0
   20320:	str	r0, [sp, #52]	; 0x34
   20324:	add	r0, sp, #52	; 0x34
   20328:	mov	r1, r7
   2032c:	mov	r2, r6
   20330:	bl	1eb24 <__assert_fail@plt+0xd610>
   20334:	ldr	r1, [sp, #48]	; 0x30
   20338:	ldr	r1, [r1]
   2033c:	str	r0, [r1, r4, lsl #2]
   20340:	ldr	r9, [sp, #52]	; 0x34
   20344:	cmp	r9, #0
   20348:	beq	20358 <__assert_fail@plt+0xee44>
   2034c:	b	2065c <__assert_fail@plt+0xf148>
   20350:	ldr	r1, [r1]
   20354:	str	r3, [r1, r4, lsl #2]
   20358:	cmp	r8, #0
   2035c:	beq	20658 <__assert_fail@plt+0xf144>
   20360:	ldr	r0, [sp, #44]	; 0x2c
   20364:	ldr	r1, [sp, #40]	; 0x28
   20368:	ldr	r0, [r0, #100]	; 0x64
   2036c:	ldr	r0, [r0, r1, lsl #2]
   20370:	ldrb	r0, [r0, #52]	; 0x34
   20374:	tst	r0, #64	; 0x40
   20378:	beq	20658 <__assert_fail@plt+0xf144>
   2037c:	ldr	r0, [sp, #44]	; 0x2c
   20380:	ldr	r9, [sp, #40]	; 0x28
   20384:	ldr	r8, [r0, #84]	; 0x54
   20388:	mov	r1, r9
   2038c:	bl	1de10 <__assert_fail@plt+0xc8fc>
   20390:	cmn	r0, #1
   20394:	str	r0, [sp, #16]
   20398:	beq	20648 <__assert_fail@plt+0xf134>
   2039c:	ldr	r0, [sp, #36]	; 0x24
   203a0:	mov	r6, #0
   203a4:	str	r6, [sp, #56]	; 0x38
   203a8:	ldr	r0, [r0, #4]
   203ac:	cmp	r0, #0
   203b0:	ble	20654 <__assert_fail@plt+0xf140>
   203b4:	ldr	r3, [sp, #48]	; 0x30
   203b8:	add	r1, r9, #1
   203bc:	mov	r7, #0
   203c0:	str	r1, [sp, #8]
   203c4:	add	r1, sp, #56	; 0x38
   203c8:	add	r1, r1, #16
   203cc:	str	r1, [sp, #24]
   203d0:	add	r1, r3, #16
   203d4:	str	r1, [sp, #28]
   203d8:	ldr	r1, [sp, #16]
   203dc:	add	r1, r1, r1, lsl #1
   203e0:	str	r1, [sp, #12]
   203e4:	ldr	r1, [sp, #36]	; 0x24
   203e8:	ldr	r2, [r3, #8]
   203ec:	ldr	r1, [r1, #8]
   203f0:	ldr	sl, [r1, r7, lsl #2]
   203f4:	ldr	r1, [r8]
   203f8:	add	r1, r1, sl, lsl #3
   203fc:	cmp	sl, r2
   20400:	ldrb	r1, [r1, #4]
   20404:	bne	20420 <__assert_fail@plt+0xef0c>
   20408:	cmp	r1, #4
   2040c:	bne	20618 <__assert_fail@plt+0xf104>
   20410:	ldr	r1, [r3, #12]
   20414:	cmp	r1, r9
   20418:	bne	20428 <__assert_fail@plt+0xef14>
   2041c:	b	20618 <__assert_fail@plt+0xf104>
   20420:	cmp	r1, #4
   20424:	bne	20618 <__assert_fail@plt+0xf104>
   20428:	ldr	r0, [sp, #44]	; 0x2c
   2042c:	ldr	r1, [sp, #12]
   20430:	str	r7, [sp, #20]
   20434:	ldr	r7, [sp, #16]
   20438:	str	r6, [sp, #32]
   2043c:	ldr	r0, [r0, #116]	; 0x74
   20440:	add	r5, r0, r1, lsl #3
   20444:	ldr	r0, [r5]
   20448:	cmp	r0, sl
   2044c:	bne	204dc <__assert_fail@plt+0xefc8>
   20450:	ldr	r0, [r5, #8]
   20454:	ldr	r1, [r5, #12]
   20458:	subs	r0, r1, r0
   2045c:	add	r6, r0, r9
   20460:	beq	20470 <__assert_fail@plt+0xef5c>
   20464:	ldr	r0, [r8, #12]
   20468:	add	r0, r0, sl, lsl #2
   2046c:	b	20480 <__assert_fail@plt+0xef6c>
   20470:	ldr	r0, [r8, #20]
   20474:	add	r1, sl, sl, lsl #1
   20478:	add	r0, r0, r1, lsl #2
   2047c:	ldr	r0, [r0, #8]
   20480:	ldr	r1, [r3, #12]
   20484:	cmp	r6, r1
   20488:	bgt	204dc <__assert_fail@plt+0xefc8>
   2048c:	ldr	r1, [r3]
   20490:	ldr	r1, [r1, r6, lsl #2]
   20494:	cmp	r1, #0
   20498:	beq	204dc <__assert_fail@plt+0xefc8>
   2049c:	ldr	r4, [r0]
   204a0:	add	r0, r1, #4
   204a4:	mov	r1, r4
   204a8:	bl	1c41c <__assert_fail@plt+0xaf08>
   204ac:	cmp	r0, #0
   204b0:	beq	204d4 <__assert_fail@plt+0xefc0>
   204b4:	ldr	r0, [sp, #44]	; 0x2c
   204b8:	ldr	r1, [sp, #28]
   204bc:	mov	r2, sl
   204c0:	mov	r3, r9
   204c4:	stm	sp, {r4, r6}
   204c8:	bl	20a7c <__assert_fail@plt+0xf568>
   204cc:	cmp	r0, #0
   204d0:	beq	204f8 <__assert_fail@plt+0xefe4>
   204d4:	mov	r0, r5
   204d8:	b	205dc <__assert_fail@plt+0xf0c8>
   204dc:	mov	r0, r5
   204e0:	add	r5, r0, #24
   204e4:	ldrb	r0, [r0, #20]
   204e8:	add	r7, r7, #1
   204ec:	cmp	r0, #0
   204f0:	bne	20444 <__assert_fail@plt+0xef30>
   204f4:	b	20608 <__assert_fail@plt+0xf0f4>
   204f8:	ldr	r0, [sp, #32]
   204fc:	cmp	r0, #0
   20500:	bne	20534 <__assert_fail@plt+0xf020>
   20504:	ldr	r0, [sp, #48]	; 0x30
   20508:	mov	r1, #12
   2050c:	vld1.32	{d16-d17}, [r0], r1
   20510:	vld1.32	{d18-d19}, [r0]
   20514:	add	r0, sp, #56	; 0x38
   20518:	vst1.64	{d16-d17}, [r0], r1
   2051c:	ldr	r1, [sp, #28]
   20520:	vst1.32	{d18-d19}, [r0]
   20524:	ldr	r0, [sp, #24]
   20528:	bl	1c3a0 <__assert_fail@plt+0xae8c>
   2052c:	cmp	r0, #0
   20530:	bne	20674 <__assert_fail@plt+0xf160>
   20534:	ldr	r4, [sp, #40]	; 0x28
   20538:	ldr	r0, [sp, #24]
   2053c:	mov	r1, r7
   20540:	str	r4, [sp, #68]	; 0x44
   20544:	str	sl, [sp, #64]	; 0x40
   20548:	bl	1c204 <__assert_fail@plt+0xacf0>
   2054c:	cmp	r0, #0
   20550:	beq	20684 <__assert_fail@plt+0xf170>
   20554:	ldr	r5, [sp, #56]	; 0x38
   20558:	ldr	r0, [sp, #44]	; 0x2c
   2055c:	add	r1, sp, #56	; 0x38
   20560:	ldr	r4, [r5, r4, lsl #2]
   20564:	bl	1fc44 <__assert_fail@plt+0xe730>
   20568:	cmp	r0, #0
   2056c:	bne	20674 <__assert_fail@plt+0xf160>
   20570:	ldr	r0, [sp, #48]	; 0x30
   20574:	ldr	r1, [r0, #4]
   20578:	cmp	r1, #0
   2057c:	beq	20598 <__assert_fail@plt+0xf084>
   20580:	ldr	r3, [sp, #8]
   20584:	mov	r0, r8
   20588:	mov	r2, r5
   2058c:	bl	1fedc <__assert_fail@plt+0xe9c8>
   20590:	cmp	r0, #0
   20594:	bne	20674 <__assert_fail@plt+0xf160>
   20598:	ldr	r9, [sp, #40]	; 0x28
   2059c:	ldr	r0, [sp, #24]
   205a0:	mov	r1, r7
   205a4:	str	r5, [sp, #32]
   205a8:	str	r4, [r5, r9, lsl #2]
   205ac:	bl	1c41c <__assert_fail@plt+0xaf08>
   205b0:	subs	r1, r0, #1
   205b4:	blt	205cc <__assert_fail@plt+0xf0b8>
   205b8:	ldr	r2, [sp, #76]	; 0x4c
   205bc:	cmp	r2, r0
   205c0:	subge	r2, r2, #1
   205c4:	strge	r2, [sp, #76]	; 0x4c
   205c8:	bgt	205e4 <__assert_fail@plt+0xf0d0>
   205cc:	ldr	r0, [sp, #44]	; 0x2c
   205d0:	add	r1, r7, r7, lsl #1
   205d4:	ldr	r0, [r0, #116]	; 0x74
   205d8:	add	r0, r0, r1, lsl #3
   205dc:	ldr	r3, [sp, #48]	; 0x30
   205e0:	b	204e0 <__assert_fail@plt+0xefcc>
   205e4:	ldr	r3, [sp, #80]	; 0x50
   205e8:	add	r0, r3, r0, lsl #2
   205ec:	ldr	r3, [r0]
   205f0:	add	r1, r1, #1
   205f4:	cmp	r1, r2
   205f8:	str	r3, [r0, #-4]
   205fc:	add	r0, r0, #4
   20600:	blt	205ec <__assert_fail@plt+0xf0d8>
   20604:	b	205cc <__assert_fail@plt+0xf0b8>
   20608:	ldr	r0, [sp, #36]	; 0x24
   2060c:	ldr	r7, [sp, #20]
   20610:	ldr	r6, [sp, #32]
   20614:	ldr	r0, [r0, #4]
   20618:	add	r7, r7, #1
   2061c:	cmp	r7, r0
   20620:	blt	203e4 <__assert_fail@plt+0xeed0>
   20624:	mov	r9, #0
   20628:	cmp	r6, #0
   2062c:	beq	20638 <__assert_fail@plt+0xf124>
   20630:	ldr	r0, [sp, #80]	; 0x50
   20634:	bl	22190 <__assert_fail@plt+0x10c7c>
   20638:	cmp	r9, #0
   2063c:	str	r9, [sp, #52]	; 0x34
   20640:	moveq	r9, #0
   20644:	b	2065c <__assert_fail@plt+0xf148>
   20648:	mov	r0, #0
   2064c:	str	r0, [sp, #52]	; 0x34
   20650:	b	20658 <__assert_fail@plt+0xf144>
   20654:	str	r6, [sp, #52]	; 0x34
   20658:	mov	r9, #0
   2065c:	mov	r0, r9
   20660:	sub	sp, fp, #28
   20664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20668:	mov	r9, r0
   2066c:	str	r9, [sp, #52]	; 0x34
   20670:	b	2065c <__assert_fail@plt+0xf148>
   20674:	mov	r9, r0
   20678:	b	20688 <__assert_fail@plt+0xf174>
   2067c:	str	r0, [sp, #56]	; 0x38
   20680:	b	2066c <__assert_fail@plt+0xf158>
   20684:	mov	r9, #12
   20688:	ldr	r6, [sp, #56]	; 0x38
   2068c:	b	20628 <__assert_fail@plt+0xf114>
   20690:	mov	r9, r0
   20694:	b	2065c <__assert_fail@plt+0xf148>
   20698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2069c:	add	fp, sp, #28
   206a0:	sub	sp, sp, #4
   206a4:	mov	r9, r0
   206a8:	ldr	r0, [r1, #4]
   206ac:	mov	r8, #0
   206b0:	cmp	r0, #0
   206b4:	beq	20864 <__assert_fail@plt+0xf350>
   206b8:	mov	r5, r2
   206bc:	ldr	r2, [r2, #4]
   206c0:	cmp	r2, #0
   206c4:	beq	20864 <__assert_fail@plt+0xf350>
   206c8:	mov	sl, r1
   206cc:	ldr	r1, [r9, #4]
   206d0:	ldr	r7, [r9]
   206d4:	add	r3, r2, r0
   206d8:	add	r6, r1, r3
   206dc:	cmp	r6, r7
   206e0:	ble	20710 <__assert_fail@plt+0xf1fc>
   206e4:	ldr	r0, [r9, #8]
   206e8:	add	r4, r7, r3
   206ec:	lsl	r1, r4, #2
   206f0:	bl	22004 <__assert_fail@plt+0x10af0>
   206f4:	cmp	r0, #0
   206f8:	beq	20870 <__assert_fail@plt+0xf35c>
   206fc:	str	r4, [r9]
   20700:	str	r0, [r9, #8]
   20704:	ldr	r1, [r9, #4]
   20708:	ldr	r2, [r5, #4]
   2070c:	ldr	r0, [sl, #4]
   20710:	ldr	lr, [r5, #8]
   20714:	ldr	r4, [sl, #8]
   20718:	add	r3, r0, r1
   2071c:	sub	r7, r1, #1
   20720:	add	ip, r3, r2
   20724:	sub	r0, r0, #1
   20728:	sub	r3, r2, #1
   2072c:	ldr	r1, [lr, r3, lsl #2]
   20730:	ldr	r6, [r4, r0, lsl #2]
   20734:	cmp	r6, r1
   20738:	beq	20764 <__assert_fail@plt+0xf250>
   2073c:	blt	20754 <__assert_fail@plt+0xf240>
   20740:	sub	r6, r0, #1
   20744:	cmp	r0, #0
   20748:	mov	r0, r6
   2074c:	bgt	20730 <__assert_fail@plt+0xf21c>
   20750:	b	207c8 <__assert_fail@plt+0xf2b4>
   20754:	cmp	r2, #2
   20758:	mov	r2, r3
   2075c:	bge	20728 <__assert_fail@plt+0xf214>
   20760:	b	207c8 <__assert_fail@plt+0xf2b4>
   20764:	cmp	r7, #0
   20768:	bmi	207a4 <__assert_fail@plt+0xf290>
   2076c:	ldr	r8, [r9, #8]
   20770:	mov	r1, r7
   20774:	ldr	r7, [r8, r1, lsl #2]
   20778:	cmp	r7, r6
   2077c:	ble	20794 <__assert_fail@plt+0xf280>
   20780:	sub	r7, r1, #1
   20784:	cmp	r1, #0
   20788:	mov	r1, r7
   2078c:	bgt	20774 <__assert_fail@plt+0xf260>
   20790:	b	207a4 <__assert_fail@plt+0xf290>
   20794:	mov	r7, r1
   20798:	bne	207a4 <__assert_fail@plt+0xf290>
   2079c:	mov	r7, r1
   207a0:	b	207b0 <__assert_fail@plt+0xf29c>
   207a4:	ldr	r1, [r9, #8]
   207a8:	sub	ip, ip, #1
   207ac:	str	r6, [r1, ip, lsl #2]
   207b0:	cmp	r0, #1
   207b4:	mov	r8, #0
   207b8:	blt	207c8 <__assert_fail@plt+0xf2b4>
   207bc:	cmp	r2, #2
   207c0:	mov	r2, r3
   207c4:	bge	20724 <__assert_fail@plt+0xf210>
   207c8:	ldr	r2, [r9, #4]
   207cc:	ldr	lr, [sl, #4]
   207d0:	ldr	r4, [r5, #4]
   207d4:	ldr	r0, [r9, #8]
   207d8:	subs	r1, r2, #1
   207dc:	add	r3, r1, lr
   207e0:	add	r3, r3, r4
   207e4:	sub	r7, r3, ip
   207e8:	add	r6, r7, #1
   207ec:	add	r5, r6, r2
   207f0:	str	r5, [r9, #4]
   207f4:	blt	20854 <__assert_fail@plt+0xf340>
   207f8:	cmp	r7, #0
   207fc:	bmi	20854 <__assert_fail@plt+0xf340>
   20800:	add	r2, r2, r4
   20804:	add	r2, r2, lr
   20808:	sub	r2, r2, ip
   2080c:	add	r7, r0, r2, lsl #2
   20810:	ldr	r2, [r0, r1, lsl #2]
   20814:	ldr	r5, [r0, r3, lsl #2]
   20818:	cmp	r5, r2
   2081c:	bgt	20838 <__assert_fail@plt+0xf324>
   20820:	str	r2, [r7, r1, lsl #2]
   20824:	sub	r2, r1, #1
   20828:	cmp	r1, #0
   2082c:	mov	r1, r2
   20830:	bgt	20810 <__assert_fail@plt+0xf2fc>
   20834:	b	20854 <__assert_fail@plt+0xf340>
   20838:	str	r5, [r7, r1, lsl #2]
   2083c:	sub	r7, r7, #4
   20840:	subs	r6, r6, #1
   20844:	sub	r3, r3, #1
   20848:	mov	r2, #0
   2084c:	bne	20810 <__assert_fail@plt+0xf2fc>
   20850:	b	20858 <__assert_fail@plt+0xf344>
   20854:	mov	r2, r6
   20858:	add	r1, r0, ip, lsl #2
   2085c:	lsl	r2, r2, #2
   20860:	bl	112a4 <memcpy@plt>
   20864:	mov	r0, r8
   20868:	sub	sp, fp, #28
   2086c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20870:	mov	r8, #12
   20874:	b	20864 <__assert_fail@plt+0xf350>
   20878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2087c:	add	fp, sp, #28
   20880:	sub	sp, sp, #36	; 0x24
   20884:	mov	r4, r2
   20888:	mov	r2, r0
   2088c:	ldr	r0, [r0, #28]
   20890:	str	r1, [sp, #20]
   20894:	add	r1, r1, r1, lsl #1
   20898:	mov	r5, #0
   2089c:	str	r3, [sp, #4]
   208a0:	str	r5, [sp, #28]
   208a4:	str	r5, [sp, #24]
   208a8:	str	r5, [sp, #32]
   208ac:	add	r1, r0, r1, lsl #2
   208b0:	mov	r0, r1
   208b4:	ldr	r7, [r0, #4]!
   208b8:	cmp	r7, #1
   208bc:	blt	20a60 <__assert_fail@plt+0xf54c>
   208c0:	add	r8, r1, #8
   208c4:	mov	sl, #0
   208c8:	str	r0, [sp, #8]
   208cc:	str	r1, [sp, #16]
   208d0:	ldr	r0, [r8]
   208d4:	ldr	r1, [sp, #20]
   208d8:	ldr	r0, [r0, sl, lsl #2]
   208dc:	cmp	r0, r1
   208e0:	beq	209b8 <__assert_fail@plt+0xf4a4>
   208e4:	ldr	r1, [r2]
   208e8:	add	r1, r1, r0, lsl #3
   208ec:	ldrb	r1, [r1, #4]
   208f0:	tst	r1, #8
   208f4:	beq	209b8 <__assert_fail@plt+0xf4a4>
   208f8:	ldr	r1, [r2, #20]
   208fc:	add	r0, r0, r0, lsl #1
   20900:	mvn	r5, #0
   20904:	mov	r6, r2
   20908:	str	r0, [sp, #12]
   2090c:	add	r0, r1, r0, lsl #2
   20910:	ldr	r1, [r0, #4]
   20914:	ldr	r0, [r0, #8]
   20918:	cmp	r1, #2
   2091c:	ldr	r9, [r0]
   20920:	ldrge	r5, [r0, #4]
   20924:	ldr	r0, [sp, #16]
   20928:	mov	r1, r9
   2092c:	bl	1c41c <__assert_fail@plt+0xaf08>
   20930:	cmp	r0, #0
   20934:	mov	r2, r6
   20938:	beq	20974 <__assert_fail@plt+0xf460>
   2093c:	cmp	r5, #1
   20940:	blt	209b8 <__assert_fail@plt+0xf4a4>
   20944:	ldr	r0, [sp, #16]
   20948:	mov	r1, r5
   2094c:	bl	1c41c <__assert_fail@plt+0xaf08>
   20950:	cmp	r0, #0
   20954:	bne	209b4 <__assert_fail@plt+0xf4a0>
   20958:	mov	r0, r4
   2095c:	mov	r1, r5
   20960:	bl	1c41c <__assert_fail@plt+0xaf08>
   20964:	cmp	r0, #0
   20968:	mov	r2, r6
   2096c:	bne	2098c <__assert_fail@plt+0xf478>
   20970:	b	209b8 <__assert_fail@plt+0xf4a4>
   20974:	mov	r0, r4
   20978:	mov	r1, r9
   2097c:	bl	1c41c <__assert_fail@plt+0xaf08>
   20980:	mov	r2, r6
   20984:	cmp	r0, #0
   20988:	beq	2093c <__assert_fail@plt+0xf428>
   2098c:	ldr	r0, [r2, #28]
   20990:	ldr	r1, [sp, #12]
   20994:	add	r2, r0, r1, lsl #2
   20998:	ldr	r1, [sp, #4]
   2099c:	add	r0, sp, #24
   209a0:	bl	20698 <__assert_fail@plt+0xf184>
   209a4:	cmp	r0, #0
   209a8:	bne	20a74 <__assert_fail@plt+0xf560>
   209ac:	ldr	r0, [sp, #8]
   209b0:	ldr	r7, [r0]
   209b4:	mov	r2, r6
   209b8:	add	sl, sl, #1
   209bc:	cmp	sl, r7
   209c0:	blt	208d0 <__assert_fail@plt+0xf3bc>
   209c4:	cmp	r7, #1
   209c8:	blt	20a5c <__assert_fail@plt+0xf548>
   209cc:	ldr	r0, [sp, #16]
   209d0:	ldr	r7, [sp, #8]
   209d4:	mov	r5, #0
   209d8:	add	r8, sp, #24
   209dc:	ldr	r9, [r0, #8]
   209e0:	ldr	r6, [r9, r5, lsl #2]
   209e4:	mov	r0, r8
   209e8:	mov	r1, r6
   209ec:	bl	1c41c <__assert_fail@plt+0xaf08>
   209f0:	cmp	r0, #0
   209f4:	bne	20a20 <__assert_fail@plt+0xf50c>
   209f8:	mov	r0, r4
   209fc:	mov	r1, r6
   20a00:	bl	1c41c <__assert_fail@plt+0xaf08>
   20a04:	subs	r1, r0, #1
   20a08:	blt	20a20 <__assert_fail@plt+0xf50c>
   20a0c:	ldr	r2, [r4, #4]
   20a10:	cmp	r2, r0
   20a14:	subge	r2, r2, #1
   20a18:	strge	r2, [r4, #4]
   20a1c:	bgt	20a34 <__assert_fail@plt+0xf520>
   20a20:	ldr	r0, [r7]
   20a24:	add	r5, r5, #1
   20a28:	cmp	r5, r0
   20a2c:	blt	209e0 <__assert_fail@plt+0xf4cc>
   20a30:	b	20a5c <__assert_fail@plt+0xf548>
   20a34:	ldr	r2, [r4, #8]
   20a38:	add	r0, r2, r0, lsl #2
   20a3c:	ldr	r2, [r0]
   20a40:	add	r1, r1, #1
   20a44:	str	r2, [r0, #-4]
   20a48:	add	r0, r0, #4
   20a4c:	ldr	r2, [r4, #4]
   20a50:	cmp	r1, r2
   20a54:	blt	20a3c <__assert_fail@plt+0xf528>
   20a58:	b	20a20 <__assert_fail@plt+0xf50c>
   20a5c:	mov	r5, #0
   20a60:	ldr	r0, [sp, #32]
   20a64:	bl	22190 <__assert_fail@plt+0x10c7c>
   20a68:	mov	r0, r5
   20a6c:	sub	sp, fp, #28
   20a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a74:	mov	r5, r0
   20a78:	b	20a60 <__assert_fail@plt+0xf54c>
   20a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a80:	add	fp, sp, #28
   20a84:	sub	sp, sp, #20
   20a88:	mov	r6, r1
   20a8c:	mov	r1, r3
   20a90:	str	r2, [sp, #12]
   20a94:	mov	r7, r0
   20a98:	str	r3, [sp, #16]
   20a9c:	bl	1de10 <__assert_fail@plt+0xc8fc>
   20aa0:	ldr	r1, [fp, #12]
   20aa4:	str	r0, [sp, #8]
   20aa8:	mov	r0, r7
   20aac:	bl	1de10 <__assert_fail@plt+0xc8fc>
   20ab0:	mov	r4, r0
   20ab4:	ldr	r0, [r6, #4]
   20ab8:	cmp	r0, #1
   20abc:	blt	20b40 <__assert_fail@plt+0xf62c>
   20ac0:	ldr	sl, [r7, #84]	; 0x54
   20ac4:	mov	r5, #0
   20ac8:	ldr	r0, [r6, #8]
   20acc:	ldr	r2, [r7, #116]	; 0x74
   20ad0:	ldr	r3, [sp, #12]
   20ad4:	ldr	r1, [r0, r5, lsl #2]
   20ad8:	add	r0, r1, r1, lsl #1
   20adc:	ldr	r0, [r2, r0, lsl #3]
   20ae0:	ldr	r2, [sl]
   20ae4:	ldr	r9, [r2, r0, lsl #3]
   20ae8:	ldr	r0, [sp, #16]
   20aec:	str	r0, [sp]
   20af0:	ldr	r0, [sp, #8]
   20af4:	mov	r2, r9
   20af8:	str	r0, [sp, #4]
   20afc:	mov	r0, r7
   20b00:	bl	20b54 <__assert_fail@plt+0xf640>
   20b04:	mov	r8, r0
   20b08:	ldr	r0, [r6, #8]
   20b0c:	ldr	r3, [fp, #8]
   20b10:	mov	r2, r9
   20b14:	ldr	r1, [r0, r5, lsl #2]
   20b18:	ldr	r0, [fp, #12]
   20b1c:	stm	sp, {r0, r4}
   20b20:	mov	r0, r7
   20b24:	bl	20b54 <__assert_fail@plt+0xf640>
   20b28:	cmp	r0, r8
   20b2c:	bne	20b48 <__assert_fail@plt+0xf634>
   20b30:	ldr	r0, [r6, #4]
   20b34:	add	r5, r5, #1
   20b38:	cmp	r5, r0
   20b3c:	blt	20ac8 <__assert_fail@plt+0xf5b4>
   20b40:	mov	r0, #0
   20b44:	b	20b4c <__assert_fail@plt+0xf638>
   20b48:	mov	r0, #1
   20b4c:	sub	sp, fp, #28
   20b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b54:	push	{r4, r5, fp, lr}
   20b58:	add	fp, sp, #8
   20b5c:	sub	sp, sp, #8
   20b60:	ldr	r4, [r0, #116]	; 0x74
   20b64:	add	r1, r1, r1, lsl #1
   20b68:	ldr	lr, [fp, #8]
   20b6c:	add	r4, r4, r1, lsl #3
   20b70:	mvn	r1, #0
   20b74:	ldr	ip, [r4, #8]
   20b78:	cmp	ip, lr
   20b7c:	bgt	20bc8 <__assert_fail@plt+0xf6b4>
   20b80:	ldr	r4, [r4, #12]
   20b84:	mov	r1, #1
   20b88:	cmp	r4, lr
   20b8c:	blt	20bc8 <__assert_fail@plt+0xf6b4>
   20b90:	sub	r1, r4, lr
   20b94:	mov	r5, #1
   20b98:	cmp	ip, lr
   20b9c:	clz	r1, r1
   20ba0:	lsr	r4, r1, #5
   20ba4:	lsl	r1, r4, #1
   20ba8:	orreq	r1, r5, r4, lsl #1
   20bac:	cmp	r1, #0
   20bb0:	beq	20bc4 <__assert_fail@plt+0xf6b0>
   20bb4:	ldr	r5, [fp, #12]
   20bb8:	str	r5, [sp]
   20bbc:	bl	20bd4 <__assert_fail@plt+0xf6c0>
   20bc0:	b	20bcc <__assert_fail@plt+0xf6b8>
   20bc4:	mov	r1, #0
   20bc8:	mov	r0, r1
   20bcc:	sub	sp, fp, #8
   20bd0:	pop	{r4, r5, fp, pc}
   20bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bd8:	add	fp, sp, #28
   20bdc:	sub	sp, sp, #36	; 0x24
   20be0:	ldr	r4, [r0, #84]	; 0x54
   20be4:	mov	r7, r0
   20be8:	mov	r5, r1
   20bec:	add	r1, r3, r3, lsl #1
   20bf0:	str	r3, [sp, #32]
   20bf4:	ldr	r0, [r4, #24]
   20bf8:	add	r1, r0, r1, lsl #2
   20bfc:	mov	lr, r1
   20c00:	ldr	r0, [lr, #4]!
   20c04:	cmp	r0, #1
   20c08:	blt	20da4 <__assert_fail@plt+0xf890>
   20c0c:	mov	ip, #1
   20c10:	mov	r6, r2
   20c14:	and	r3, r5, #2
   20c18:	mov	sl, #0
   20c1c:	mvn	r2, ip, lsl r2
   20c20:	cmp	r6, #31
   20c24:	str	r3, [sp, #16]
   20c28:	str	r2, [sp, #24]
   20c2c:	lsl	r2, ip, r6
   20c30:	and	ip, r5, #1
   20c34:	str	r2, [sp, #28]
   20c38:	mov	r2, #0
   20c3c:	movwgt	r2, #1
   20c40:	str	ip, [sp, #12]
   20c44:	orr	r2, r2, r3, lsr #1
   20c48:	add	r3, r1, #8
   20c4c:	stmib	sp, {r3, lr}
   20c50:	str	r2, [sp, #20]
   20c54:	ldr	r1, [r3]
   20c58:	ldr	r9, [r1, sl, lsl #2]
   20c5c:	ldr	r1, [r4]
   20c60:	add	r2, r1, r9, lsl #3
   20c64:	ldrb	r2, [r2, #4]
   20c68:	cmp	r2, #9
   20c6c:	beq	20d68 <__assert_fail@plt+0xf854>
   20c70:	cmp	r2, #8
   20c74:	beq	20d84 <__assert_fail@plt+0xf870>
   20c78:	cmp	r2, #4
   20c7c:	bne	20d98 <__assert_fail@plt+0xf884>
   20c80:	ldr	r1, [fp, #8]
   20c84:	cmn	r1, #1
   20c88:	beq	20d98 <__assert_fail@plt+0xf884>
   20c8c:	ldr	r1, [fp, #8]
   20c90:	ldr	r0, [r7, #116]	; 0x74
   20c94:	add	r1, r1, r1, lsl #1
   20c98:	add	r0, r0, r1, lsl #3
   20c9c:	add	r8, r0, #16
   20ca0:	ldr	r0, [r8, #-16]
   20ca4:	cmp	r0, r9
   20ca8:	bne	20d44 <__assert_fail@plt+0xf830>
   20cac:	cmp	r6, #31
   20cb0:	bgt	20cc4 <__assert_fail@plt+0xf7b0>
   20cb4:	ldr	r0, [r8]
   20cb8:	ldr	r1, [sp, #28]
   20cbc:	tst	r0, r1
   20cc0:	beq	20d44 <__assert_fail@plt+0xf830>
   20cc4:	ldr	r0, [r4, #20]
   20cc8:	add	r1, r9, r9, lsl #1
   20ccc:	add	r0, r0, r1, lsl #2
   20cd0:	ldr	r0, [r0, #8]
   20cd4:	ldr	r3, [r0]
   20cd8:	ldr	r0, [sp, #32]
   20cdc:	cmp	r3, r0
   20ce0:	beq	20dac <__assert_fail@plt+0xf898>
   20ce4:	ldr	r0, [fp, #8]
   20ce8:	mov	r1, r5
   20cec:	mov	r2, r6
   20cf0:	str	r0, [sp]
   20cf4:	mov	r0, r7
   20cf8:	bl	20bd4 <__assert_fail@plt+0xf6c0>
   20cfc:	cmp	r0, #0
   20d00:	beq	20d18 <__assert_fail@plt+0xf804>
   20d04:	cmn	r0, #1
   20d08:	beq	20dc4 <__assert_fail@plt+0xf8b0>
   20d0c:	cmp	r6, #31
   20d10:	ble	20d34 <__assert_fail@plt+0xf820>
   20d14:	b	20d44 <__assert_fail@plt+0xf830>
   20d18:	ldr	r0, [sp, #20]
   20d1c:	cmp	r0, #0
   20d20:	beq	20d34 <__assert_fail@plt+0xf820>
   20d24:	ldr	r0, [sp, #16]
   20d28:	cmp	r0, #0
   20d2c:	beq	20d44 <__assert_fail@plt+0xf830>
   20d30:	b	20db8 <__assert_fail@plt+0xf8a4>
   20d34:	ldr	r0, [r8]
   20d38:	ldr	r1, [sp, #24]
   20d3c:	and	r0, r0, r1
   20d40:	str	r0, [r8]
   20d44:	ldrb	r0, [r8, #4]
   20d48:	add	r8, r8, #24
   20d4c:	cmp	r0, #0
   20d50:	bne	20ca0 <__assert_fail@plt+0xf78c>
   20d54:	ldr	lr, [sp, #8]
   20d58:	ldr	ip, [sp, #12]
   20d5c:	ldr	r3, [sp, #4]
   20d60:	ldr	r0, [lr]
   20d64:	b	20d98 <__assert_fail@plt+0xf884>
   20d68:	ldr	r2, [sp, #16]
   20d6c:	cmp	r2, #0
   20d70:	beq	20d98 <__assert_fail@plt+0xf884>
   20d74:	ldr	r1, [r1, r9, lsl #3]
   20d78:	cmp	r1, r6
   20d7c:	bne	20d98 <__assert_fail@plt+0xf884>
   20d80:	b	20db8 <__assert_fail@plt+0xf8a4>
   20d84:	cmp	ip, #0
   20d88:	beq	20d98 <__assert_fail@plt+0xf884>
   20d8c:	ldr	r1, [r1, r9, lsl #3]
   20d90:	cmp	r1, r6
   20d94:	beq	20dc0 <__assert_fail@plt+0xf8ac>
   20d98:	add	sl, sl, #1
   20d9c:	cmp	sl, r0
   20da0:	blt	20c54 <__assert_fail@plt+0xf740>
   20da4:	ubfx	r0, r5, #1, #1
   20da8:	b	20dc4 <__assert_fail@plt+0xf8b0>
   20dac:	ldr	r0, [sp, #12]
   20db0:	rsb	r0, r0, #0
   20db4:	b	20dc4 <__assert_fail@plt+0xf8b0>
   20db8:	mov	r0, #0
   20dbc:	b	20dc4 <__assert_fail@plt+0xf8b0>
   20dc0:	mvn	r0, #0
   20dc4:	sub	sp, fp, #28
   20dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20dcc:	cmp	r0, #0
   20dd0:	bxeq	lr
   20dd4:	push	{r4, r5, r6, sl, fp, lr}
   20dd8:	add	fp, sp, #16
   20ddc:	ldr	r1, [r0]
   20de0:	mov	r4, r0
   20de4:	ldr	r0, [r0, #8]
   20de8:	cmp	r1, #1
   20dec:	blt	20e2c <__assert_fail@plt+0xf918>
   20df0:	mov	r5, #0
   20df4:	mov	r6, #0
   20df8:	add	r0, r0, r5
   20dfc:	ldr	r0, [r0, #20]
   20e00:	bl	22190 <__assert_fail@plt+0x10c7c>
   20e04:	ldr	r0, [r4, #8]
   20e08:	add	r0, r0, r5
   20e0c:	ldr	r0, [r0, #8]
   20e10:	bl	22190 <__assert_fail@plt+0x10c7c>
   20e14:	ldr	r1, [r4]
   20e18:	ldr	r0, [r4, #8]
   20e1c:	add	r6, r6, #1
   20e20:	add	r5, r5, #24
   20e24:	cmp	r6, r1
   20e28:	blt	20df8 <__assert_fail@plt+0xf8e4>
   20e2c:	pop	{r4, r5, r6, sl, fp, lr}
   20e30:	b	22190 <__assert_fail@plt+0x10c7c>
   20e34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20e38:	add	fp, sp, #24
   20e3c:	mov	r4, r0
   20e40:	mvn	r0, #0
   20e44:	cmp	r4, #0
   20e48:	beq	20ee8 <__assert_fail@plt+0xf9d4>
   20e4c:	mov	r5, r2
   20e50:	ldr	r2, [r4]
   20e54:	cmp	r2, #0
   20e58:	beq	20ee8 <__assert_fail@plt+0xf9d4>
   20e5c:	sub	r0, r2, #1
   20e60:	ldr	r9, [fp, #12]
   20e64:	ldr	r8, [fp, #8]
   20e68:	lsl	r7, r5, #3
   20e6c:	str	r0, [r4]
   20e70:	add	r6, r0, r0, lsl #1
   20e74:	ldr	r2, [r4, #8]
   20e78:	ldr	r0, [r2, r6, lsl #3]!
   20e7c:	str	r0, [r1]
   20e80:	mov	r0, r3
   20e84:	ldr	r1, [r2, #8]
   20e88:	mov	r2, r7
   20e8c:	bl	112a4 <memcpy@plt>
   20e90:	ldr	r0, [r4, #8]
   20e94:	mov	r2, r7
   20e98:	add	r0, r0, r6, lsl #3
   20e9c:	ldr	r0, [r0, #8]
   20ea0:	add	r1, r0, r5, lsl #3
   20ea4:	mov	r0, r8
   20ea8:	bl	112a4 <memcpy@plt>
   20eac:	ldr	r0, [r9, #8]
   20eb0:	bl	22190 <__assert_fail@plt+0x10c7c>
   20eb4:	ldr	r0, [r4, #8]
   20eb8:	add	r0, r0, r6, lsl #3
   20ebc:	ldr	r0, [r0, #8]
   20ec0:	bl	22190 <__assert_fail@plt+0x10c7c>
   20ec4:	ldr	r0, [r4, #8]
   20ec8:	add	r0, r0, r6, lsl #3
   20ecc:	vldr	d16, [r0, #12]
   20ed0:	ldr	r0, [r0, #20]
   20ed4:	str	r0, [r9, #8]
   20ed8:	vstr	d16, [r9]
   20edc:	ldr	r0, [r4, #8]
   20ee0:	add	r0, r0, r6, lsl #3
   20ee4:	ldr	r0, [r0, #4]
   20ee8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20eec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20ef0:	add	fp, sp, #24
   20ef4:	sub	sp, sp, #32
   20ef8:	ldr	r6, [fp, #12]
   20efc:	ldr	r7, [fp, #8]
   20f00:	mov	r4, r2
   20f04:	mov	r8, r0
   20f08:	cmp	r1, #0
   20f0c:	beq	20f34 <__assert_fail@plt+0xfa20>
   20f10:	movw	r2, #13689	; 0x3579
   20f14:	mov	r5, r1
   20f18:	str	r3, [sp, #4]
   20f1c:	str	r4, [sp]
   20f20:	mov	r0, r8
   20f24:	mov	r1, #1
   20f28:	movt	r2, #2
   20f2c:	mov	r3, r5
   20f30:	b	20f4c <__assert_fail@plt+0xfa38>
   20f34:	movw	r2, #13701	; 0x3585
   20f38:	str	r3, [sp]
   20f3c:	mov	r0, r8
   20f40:	mov	r1, #1
   20f44:	mov	r3, r4
   20f48:	movt	r2, #2
   20f4c:	bl	11448 <__fprintf_chk@plt>
   20f50:	movw	r1, #13708	; 0x358c
   20f54:	mov	r0, #0
   20f58:	mov	r2, #5
   20f5c:	movt	r1, #2
   20f60:	bl	11304 <dcgettext@plt>
   20f64:	movw	r2, #14426	; 0x385a
   20f68:	mov	r3, r0
   20f6c:	movw	r0, #2022	; 0x7e6
   20f70:	mov	r1, #1
   20f74:	movt	r2, #2
   20f78:	str	r0, [sp]
   20f7c:	mov	r0, r8
   20f80:	bl	11448 <__fprintf_chk@plt>
   20f84:	movw	r4, #11463	; 0x2cc7
   20f88:	mov	r1, r8
   20f8c:	movt	r4, #2
   20f90:	mov	r0, r4
   20f94:	bl	11208 <fputs_unlocked@plt>
   20f98:	movw	r1, #13712	; 0x3590
   20f9c:	mov	r0, #0
   20fa0:	mov	r2, #5
   20fa4:	movt	r1, #2
   20fa8:	bl	11304 <dcgettext@plt>
   20fac:	movw	r3, #13883	; 0x363b
   20fb0:	mov	r2, r0
   20fb4:	mov	r0, r8
   20fb8:	mov	r1, #1
   20fbc:	movt	r3, #2
   20fc0:	bl	11448 <__fprintf_chk@plt>
   20fc4:	mov	r0, r4
   20fc8:	mov	r1, r8
   20fcc:	bl	11208 <fputs_unlocked@plt>
   20fd0:	cmp	r6, #9
   20fd4:	bhi	21038 <__assert_fail@plt+0xfb24>
   20fd8:	add	r0, pc, #0
   20fdc:	ldr	pc, [r0, r6, lsl #2]
   20fe0:	andeq	r1, r2, r0, lsl r2
   20fe4:	andeq	r1, r2, r8
   20fe8:	andeq	r1, r2, r4, asr #32
   20fec:	andeq	r1, r2, ip, rrx
   20ff0:	muleq	r2, r4, r0
   20ff4:	strheq	r1, [r2], -ip
   20ff8:	andeq	r1, r2, r4, ror #1
   20ffc:	andeq	r1, r2, ip, lsl r1
   21000:			; <UNDEFINED> instruction: 0x000211bc
   21004:	andeq	r1, r2, r4, ror #2
   21008:	movw	r1, #13917	; 0x365d
   2100c:	mov	r0, #0
   21010:	mov	r2, #5
   21014:	movt	r1, #2
   21018:	bl	11304 <dcgettext@plt>
   2101c:	ldr	r3, [r7]
   21020:	mov	r2, r0
   21024:	mov	r0, r8
   21028:	mov	r1, #1
   2102c:	sub	sp, fp, #24
   21030:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   21034:	b	11448 <__fprintf_chk@plt>
   21038:	movw	r1, #14236	; 0x379c
   2103c:	movt	r1, #2
   21040:	b	2116c <__assert_fail@plt+0xfc58>
   21044:	movw	r1, #13933	; 0x366d
   21048:	mov	r0, #0
   2104c:	mov	r2, #5
   21050:	movt	r1, #2
   21054:	bl	11304 <dcgettext@plt>
   21058:	mov	r2, r0
   2105c:	ldr	r3, [r7]
   21060:	ldr	r0, [r7, #4]
   21064:	str	r0, [sp]
   21068:	b	21158 <__assert_fail@plt+0xfc44>
   2106c:	movw	r1, #13956	; 0x3684
   21070:	mov	r0, #0
   21074:	mov	r2, #5
   21078:	movt	r1, #2
   2107c:	bl	11304 <dcgettext@plt>
   21080:	mov	r2, r0
   21084:	ldr	r3, [r7]
   21088:	ldmib	r7, {r0, r1}
   2108c:	stm	sp, {r0, r1}
   21090:	b	21158 <__assert_fail@plt+0xfc44>
   21094:	movw	r1, #13984	; 0x36a0
   21098:	mov	r0, #0
   2109c:	mov	r2, #5
   210a0:	movt	r1, #2
   210a4:	bl	11304 <dcgettext@plt>
   210a8:	ldr	r3, [r7]
   210ac:	mov	r2, r0
   210b0:	ldmib	r7, {r0, r1, r7}
   210b4:	stm	sp, {r0, r1, r7}
   210b8:	b	21158 <__assert_fail@plt+0xfc44>
   210bc:	movw	r1, #14016	; 0x36c0
   210c0:	mov	r0, #0
   210c4:	mov	r2, #5
   210c8:	movt	r1, #2
   210cc:	bl	11304 <dcgettext@plt>
   210d0:	ldr	r3, [r7]
   210d4:	mov	r2, r0
   210d8:	ldmib	r7, {r0, r1, r6, r7}
   210dc:	stm	sp, {r0, r1, r6, r7}
   210e0:	b	21158 <__assert_fail@plt+0xfc44>
   210e4:	movw	r1, #14052	; 0x36e4
   210e8:	mov	r0, #0
   210ec:	mov	r2, #5
   210f0:	movt	r1, #2
   210f4:	bl	11304 <dcgettext@plt>
   210f8:	mov	r2, r0
   210fc:	ldr	r3, [r7]
   21100:	ldmib	r7, {r0, r1, r6}
   21104:	ldr	r5, [r7, #16]
   21108:	ldr	r7, [r7, #20]
   2110c:	stm	sp, {r0, r1, r6}
   21110:	str	r5, [sp, #12]
   21114:	str	r7, [sp, #16]
   21118:	b	21158 <__assert_fail@plt+0xfc44>
   2111c:	movw	r1, #14092	; 0x370c
   21120:	mov	r0, #0
   21124:	mov	r2, #5
   21128:	movt	r1, #2
   2112c:	bl	11304 <dcgettext@plt>
   21130:	mov	r2, r0
   21134:	ldr	r3, [r7]
   21138:	ldmib	r7, {r0, r1, r6}
   2113c:	ldr	r5, [r7, #16]
   21140:	ldr	r4, [r7, #20]
   21144:	ldr	r7, [r7, #24]
   21148:	stm	sp, {r0, r1, r6}
   2114c:	str	r5, [sp, #12]
   21150:	str	r4, [sp, #16]
   21154:	str	r7, [sp, #20]
   21158:	mov	r0, r8
   2115c:	mov	r1, #1
   21160:	b	2120c <__assert_fail@plt+0xfcf8>
   21164:	movw	r1, #14184	; 0x3768
   21168:	movt	r1, #2
   2116c:	mov	r0, #0
   21170:	mov	r2, #5
   21174:	bl	11304 <dcgettext@plt>
   21178:	mov	ip, r0
   2117c:	ldr	r3, [r7]
   21180:	ldr	r0, [r7, #4]
   21184:	ldr	r1, [r7, #8]
   21188:	ldr	r6, [r7, #12]
   2118c:	ldr	r5, [r7, #16]
   21190:	ldr	r4, [r7, #20]
   21194:	ldr	r2, [r7, #24]
   21198:	ldr	lr, [r7, #28]
   2119c:	ldr	r7, [r7, #32]
   211a0:	stm	sp, {r0, r1, r6}
   211a4:	str	r5, [sp, #12]
   211a8:	str	r4, [sp, #16]
   211ac:	str	r2, [sp, #20]
   211b0:	str	lr, [sp, #24]
   211b4:	str	r7, [sp, #28]
   211b8:	b	21200 <__assert_fail@plt+0xfcec>
   211bc:	movw	r1, #14136	; 0x3738
   211c0:	mov	r0, #0
   211c4:	mov	r2, #5
   211c8:	movt	r1, #2
   211cc:	bl	11304 <dcgettext@plt>
   211d0:	mov	ip, r0
   211d4:	ldr	r3, [r7]
   211d8:	ldmib	r7, {r0, r1, r6}
   211dc:	ldr	r5, [r7, #16]
   211e0:	ldr	r4, [r7, #20]
   211e4:	ldr	r2, [r7, #24]
   211e8:	ldr	r7, [r7, #28]
   211ec:	stm	sp, {r0, r1, r6}
   211f0:	str	r5, [sp, #12]
   211f4:	str	r4, [sp, #16]
   211f8:	str	r2, [sp, #20]
   211fc:	str	r7, [sp, #24]
   21200:	mov	r0, r8
   21204:	mov	r1, #1
   21208:	mov	r2, ip
   2120c:	bl	11448 <__fprintf_chk@plt>
   21210:	sub	sp, fp, #24
   21214:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21218:	push	{r4, sl, fp, lr}
   2121c:	add	fp, sp, #8
   21220:	sub	sp, sp, #8
   21224:	ldr	ip, [fp, #8]
   21228:	mov	lr, #0
   2122c:	ldr	r4, [ip, lr, lsl #2]
   21230:	add	lr, lr, #1
   21234:	cmp	r4, #0
   21238:	bne	2122c <__assert_fail@plt+0xfd18>
   2123c:	sub	r4, lr, #1
   21240:	str	ip, [sp]
   21244:	str	r4, [sp, #4]
   21248:	bl	20eec <__assert_fail@plt+0xf9d8>
   2124c:	sub	sp, fp, #8
   21250:	pop	{r4, sl, fp, pc}
   21254:	push	{r4, r5, fp, lr}
   21258:	add	fp, sp, #8
   2125c:	sub	sp, sp, #48	; 0x30
   21260:	ldr	r4, [fp, #8]
   21264:	mov	ip, #0
   21268:	add	lr, sp, #8
   2126c:	ldr	r5, [r4]
   21270:	cmp	r5, #0
   21274:	str	r5, [lr, ip, lsl #2]
   21278:	beq	21290 <__assert_fail@plt+0xfd7c>
   2127c:	add	ip, ip, #1
   21280:	add	r4, r4, #4
   21284:	cmp	ip, #10
   21288:	bne	2126c <__assert_fail@plt+0xfd58>
   2128c:	mov	ip, #10
   21290:	str	lr, [sp]
   21294:	str	ip, [sp, #4]
   21298:	bl	20eec <__assert_fail@plt+0xf9d8>
   2129c:	sub	sp, fp, #8
   212a0:	pop	{r4, r5, fp, pc}
   212a4:	push	{fp, lr}
   212a8:	mov	fp, sp
   212ac:	sub	sp, sp, #8
   212b0:	add	ip, fp, #8
   212b4:	str	ip, [sp, #4]
   212b8:	str	ip, [sp]
   212bc:	bl	21254 <__assert_fail@plt+0xfd40>
   212c0:	mov	sp, fp
   212c4:	pop	{fp, pc}
   212c8:	push	{fp, lr}
   212cc:	mov	fp, sp
   212d0:	movw	r0, #16844	; 0x41cc
   212d4:	movt	r0, #3
   212d8:	ldr	r1, [r0]
   212dc:	movw	r0, #11463	; 0x2cc7
   212e0:	movt	r0, #2
   212e4:	bl	11208 <fputs_unlocked@plt>
   212e8:	movw	r1, #14296	; 0x37d8
   212ec:	mov	r0, #0
   212f0:	mov	r2, #5
   212f4:	movt	r1, #2
   212f8:	bl	11304 <dcgettext@plt>
   212fc:	movw	r2, #14316	; 0x37ec
   21300:	mov	r1, r0
   21304:	mov	r0, #1
   21308:	movt	r2, #2
   2130c:	bl	11430 <__printf_chk@plt>
   21310:	movw	r1, #14338	; 0x3802
   21314:	mov	r0, #0
   21318:	mov	r2, #5
   2131c:	movt	r1, #2
   21320:	bl	11304 <dcgettext@plt>
   21324:	movw	r2, #11786	; 0x2e0a
   21328:	movw	r3, #12079	; 0x2f2f
   2132c:	mov	r1, r0
   21330:	mov	r0, #1
   21334:	movt	r2, #2
   21338:	movt	r3, #2
   2133c:	bl	11430 <__printf_chk@plt>
   21340:	movw	r1, #14358	; 0x3816
   21344:	mov	r0, #0
   21348:	mov	r2, #5
   2134c:	movt	r1, #2
   21350:	bl	11304 <dcgettext@plt>
   21354:	movw	r2, #14397	; 0x383d
   21358:	mov	r1, r0
   2135c:	mov	r0, #1
   21360:	movt	r2, #2
   21364:	pop	{fp, lr}
   21368:	b	11430 <__printf_chk@plt>
   2136c:	b	21370 <__assert_fail@plt+0xfe5c>
   21370:	push	{r4, r5, r6, sl, fp, lr}
   21374:	add	fp, sp, #16
   21378:	mov	r4, r2
   2137c:	mov	r5, r1
   21380:	mov	r6, r0
   21384:	bl	22254 <__assert_fail@plt+0x10d40>
   21388:	cmp	r0, #0
   2138c:	popne	{r4, r5, r6, sl, fp, pc}
   21390:	cmp	r6, #0
   21394:	beq	213a8 <__assert_fail@plt+0xfe94>
   21398:	cmp	r5, #0
   2139c:	cmpne	r4, #0
   213a0:	bne	213a8 <__assert_fail@plt+0xfe94>
   213a4:	pop	{r4, r5, r6, sl, fp, pc}
   213a8:	bl	217d8 <__assert_fail@plt+0x102c4>
   213ac:	push	{fp, lr}
   213b0:	mov	fp, sp
   213b4:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   213b8:	cmp	r0, #0
   213bc:	popne	{fp, pc}
   213c0:	bl	217d8 <__assert_fail@plt+0x102c4>
   213c4:	push	{fp, lr}
   213c8:	mov	fp, sp
   213cc:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   213d0:	cmp	r0, #0
   213d4:	popne	{fp, pc}
   213d8:	bl	217d8 <__assert_fail@plt+0x102c4>
   213dc:	push	{fp, lr}
   213e0:	mov	fp, sp
   213e4:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   213e8:	cmp	r0, #0
   213ec:	popne	{fp, pc}
   213f0:	bl	217d8 <__assert_fail@plt+0x102c4>
   213f4:	push	{r4, r5, fp, lr}
   213f8:	add	fp, sp, #8
   213fc:	mov	r4, r1
   21400:	mov	r5, r0
   21404:	bl	22004 <__assert_fail@plt+0x10af0>
   21408:	cmp	r0, #0
   2140c:	popne	{r4, r5, fp, pc}
   21410:	cmp	r5, #0
   21414:	beq	21424 <__assert_fail@plt+0xff10>
   21418:	cmp	r4, #0
   2141c:	bne	21424 <__assert_fail@plt+0xff10>
   21420:	pop	{r4, r5, fp, pc}
   21424:	bl	217d8 <__assert_fail@plt+0x102c4>
   21428:	push	{fp, lr}
   2142c:	mov	fp, sp
   21430:	cmp	r1, #0
   21434:	orreq	r1, r1, #1
   21438:	bl	22004 <__assert_fail@plt+0x10af0>
   2143c:	cmp	r0, #0
   21440:	popne	{fp, pc}
   21444:	bl	217d8 <__assert_fail@plt+0x102c4>
   21448:	push	{fp, lr}
   2144c:	mov	fp, sp
   21450:	clz	r3, r2
   21454:	lsr	ip, r3, #5
   21458:	clz	r3, r1
   2145c:	lsr	r3, r3, #5
   21460:	orrs	r3, r3, ip
   21464:	movwne	r1, #1
   21468:	movwne	r2, #1
   2146c:	bl	22254 <__assert_fail@plt+0x10d40>
   21470:	cmp	r0, #0
   21474:	popne	{fp, pc}
   21478:	bl	217d8 <__assert_fail@plt+0x102c4>
   2147c:	push	{fp, lr}
   21480:	mov	fp, sp
   21484:	mov	r2, r1
   21488:	mov	r1, r0
   2148c:	mov	r0, #0
   21490:	bl	22254 <__assert_fail@plt+0x10d40>
   21494:	cmp	r0, #0
   21498:	popne	{fp, pc}
   2149c:	bl	217d8 <__assert_fail@plt+0x102c4>
   214a0:	mov	r2, r1
   214a4:	mov	r1, r0
   214a8:	mov	r0, #0
   214ac:	b	21448 <__assert_fail@plt+0xff34>
   214b0:	mov	r2, #1
   214b4:	b	214b8 <__assert_fail@plt+0xffa4>
   214b8:	push	{r4, r5, fp, lr}
   214bc:	add	fp, sp, #8
   214c0:	ldr	r5, [r1]
   214c4:	mov	r4, r1
   214c8:	cmp	r0, #0
   214cc:	beq	214e4 <__assert_fail@plt+0xffd0>
   214d0:	mov	r1, #1
   214d4:	add	r1, r1, r5, lsr #1
   214d8:	adds	r5, r5, r1
   214dc:	bcc	214fc <__assert_fail@plt+0xffe8>
   214e0:	bl	217d8 <__assert_fail@plt+0x102c4>
   214e4:	cmp	r5, #0
   214e8:	bne	214fc <__assert_fail@plt+0xffe8>
   214ec:	mov	r1, #64	; 0x40
   214f0:	cmp	r2, #64	; 0x40
   214f4:	udiv	r5, r1, r2
   214f8:	addhi	r5, r5, #1
   214fc:	mov	r1, r5
   21500:	bl	21370 <__assert_fail@plt+0xfe5c>
   21504:	str	r5, [r4]
   21508:	pop	{r4, r5, fp, pc}
   2150c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21510:	add	fp, sp, #24
   21514:	ldr	r6, [r1]
   21518:	mov	r8, r1
   2151c:	ldr	r4, [fp, #8]
   21520:	add	r1, r6, r6, asr #1
   21524:	cmp	r1, r6
   21528:	mvnvs	r1, #-2147483648	; 0x80000000
   2152c:	cmp	r1, r3
   21530:	mov	r5, r1
   21534:	movgt	r5, r3
   21538:	cmn	r3, #1
   2153c:	movle	r5, r1
   21540:	cmn	r4, #1
   21544:	ble	21564 <__assert_fail@plt+0x10050>
   21548:	cmp	r4, #0
   2154c:	beq	215b8 <__assert_fail@plt+0x100a4>
   21550:	cmn	r5, #1
   21554:	ble	2158c <__assert_fail@plt+0x10078>
   21558:	mvn	r7, #-2147483648	; 0x80000000
   2155c:	udiv	r1, r7, r4
   21560:	b	21580 <__assert_fail@plt+0x1006c>
   21564:	cmn	r5, #1
   21568:	ble	215a8 <__assert_fail@plt+0x10094>
   2156c:	cmn	r4, #1
   21570:	beq	215b8 <__assert_fail@plt+0x100a4>
   21574:	mov	r1, #-2147483648	; 0x80000000
   21578:	mvn	r7, #-2147483648	; 0x80000000
   2157c:	sdiv	r1, r1, r4
   21580:	cmp	r1, r5
   21584:	bge	215b8 <__assert_fail@plt+0x100a4>
   21588:	b	215c8 <__assert_fail@plt+0x100b4>
   2158c:	beq	215b8 <__assert_fail@plt+0x100a4>
   21590:	mov	r1, #-2147483648	; 0x80000000
   21594:	mvn	r7, #-2147483648	; 0x80000000
   21598:	sdiv	r1, r1, r5
   2159c:	cmp	r1, r4
   215a0:	bge	215b8 <__assert_fail@plt+0x100a4>
   215a4:	b	215c8 <__assert_fail@plt+0x100b4>
   215a8:	mvn	r7, #-2147483648	; 0x80000000
   215ac:	sdiv	r1, r7, r4
   215b0:	cmp	r5, r1
   215b4:	blt	215c8 <__assert_fail@plt+0x100b4>
   215b8:	mul	r1, r5, r4
   215bc:	mov	r7, #64	; 0x40
   215c0:	cmp	r1, #63	; 0x3f
   215c4:	bgt	215d0 <__assert_fail@plt+0x100bc>
   215c8:	sdiv	r5, r7, r4
   215cc:	mul	r1, r5, r4
   215d0:	cmp	r0, #0
   215d4:	moveq	r7, #0
   215d8:	streq	r7, [r8]
   215dc:	sub	r7, r5, r6
   215e0:	cmp	r7, r2
   215e4:	bge	21688 <__assert_fail@plt+0x10174>
   215e8:	add	r5, r6, r2
   215ec:	mov	r2, #0
   215f0:	mov	r1, #0
   215f4:	cmp	r5, r3
   215f8:	movwgt	r2, #1
   215fc:	cmn	r3, #1
   21600:	movwgt	r1, #1
   21604:	cmp	r5, r6
   21608:	bvs	21670 <__assert_fail@plt+0x1015c>
   2160c:	ands	r1, r1, r2
   21610:	bne	21670 <__assert_fail@plt+0x1015c>
   21614:	cmn	r4, #1
   21618:	ble	21638 <__assert_fail@plt+0x10124>
   2161c:	cmp	r4, #0
   21620:	beq	21684 <__assert_fail@plt+0x10170>
   21624:	cmn	r5, #1
   21628:	ble	2165c <__assert_fail@plt+0x10148>
   2162c:	mvn	r1, #-2147483648	; 0x80000000
   21630:	udiv	r1, r1, r4
   21634:	b	21650 <__assert_fail@plt+0x1013c>
   21638:	cmn	r5, #1
   2163c:	ble	21674 <__assert_fail@plt+0x10160>
   21640:	cmn	r4, #1
   21644:	beq	21684 <__assert_fail@plt+0x10170>
   21648:	mov	r1, #-2147483648	; 0x80000000
   2164c:	sdiv	r1, r1, r4
   21650:	cmp	r1, r5
   21654:	bge	21684 <__assert_fail@plt+0x10170>
   21658:	b	21670 <__assert_fail@plt+0x1015c>
   2165c:	beq	21684 <__assert_fail@plt+0x10170>
   21660:	mov	r1, #-2147483648	; 0x80000000
   21664:	sdiv	r1, r1, r5
   21668:	cmp	r1, r4
   2166c:	bge	21684 <__assert_fail@plt+0x10170>
   21670:	bl	217d8 <__assert_fail@plt+0x102c4>
   21674:	mvn	r1, #-2147483648	; 0x80000000
   21678:	sdiv	r1, r1, r4
   2167c:	cmp	r5, r1
   21680:	blt	21670 <__assert_fail@plt+0x1015c>
   21684:	mul	r1, r5, r4
   21688:	bl	213f4 <__assert_fail@plt+0xfee0>
   2168c:	str	r5, [r8]
   21690:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21694:	push	{fp, lr}
   21698:	mov	fp, sp
   2169c:	mov	r1, #1
   216a0:	bl	21f80 <__assert_fail@plt+0x10a6c>
   216a4:	cmp	r0, #0
   216a8:	popne	{fp, pc}
   216ac:	bl	217d8 <__assert_fail@plt+0x102c4>
   216b0:	push	{fp, lr}
   216b4:	mov	fp, sp
   216b8:	bl	21f80 <__assert_fail@plt+0x10a6c>
   216bc:	cmp	r0, #0
   216c0:	popne	{fp, pc}
   216c4:	bl	217d8 <__assert_fail@plt+0x102c4>
   216c8:	push	{fp, lr}
   216cc:	mov	fp, sp
   216d0:	mov	r1, #1
   216d4:	bl	21f80 <__assert_fail@plt+0x10a6c>
   216d8:	cmp	r0, #0
   216dc:	popne	{fp, pc}
   216e0:	bl	217d8 <__assert_fail@plt+0x102c4>
   216e4:	push	{fp, lr}
   216e8:	mov	fp, sp
   216ec:	bl	21f80 <__assert_fail@plt+0x10a6c>
   216f0:	cmp	r0, #0
   216f4:	popne	{fp, pc}
   216f8:	bl	217d8 <__assert_fail@plt+0x102c4>
   216fc:	push	{r4, r5, fp, lr}
   21700:	add	fp, sp, #8
   21704:	mov	r5, r0
   21708:	mov	r0, r1
   2170c:	mov	r4, r1
   21710:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   21714:	cmp	r0, #0
   21718:	beq	2172c <__assert_fail@plt+0x10218>
   2171c:	mov	r1, r5
   21720:	mov	r2, r4
   21724:	pop	{r4, r5, fp, lr}
   21728:	b	112a4 <memcpy@plt>
   2172c:	bl	217d8 <__assert_fail@plt+0x102c4>
   21730:	push	{r4, r5, fp, lr}
   21734:	add	fp, sp, #8
   21738:	mov	r5, r0
   2173c:	mov	r0, r1
   21740:	mov	r4, r1
   21744:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   21748:	cmp	r0, #0
   2174c:	beq	21760 <__assert_fail@plt+0x1024c>
   21750:	mov	r1, r5
   21754:	mov	r2, r4
   21758:	pop	{r4, r5, fp, lr}
   2175c:	b	112a4 <memcpy@plt>
   21760:	bl	217d8 <__assert_fail@plt+0x102c4>
   21764:	push	{r4, r5, fp, lr}
   21768:	add	fp, sp, #8
   2176c:	mov	r5, r0
   21770:	add	r0, r1, #1
   21774:	mov	r4, r1
   21778:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   2177c:	cmp	r0, #0
   21780:	beq	2179c <__assert_fail@plt+0x10288>
   21784:	mov	r1, #0
   21788:	mov	r2, r4
   2178c:	strb	r1, [r0, r4]
   21790:	mov	r1, r5
   21794:	pop	{r4, r5, fp, lr}
   21798:	b	112a4 <memcpy@plt>
   2179c:	bl	217d8 <__assert_fail@plt+0x102c4>
   217a0:	push	{r4, r5, fp, lr}
   217a4:	add	fp, sp, #8
   217a8:	mov	r4, r0
   217ac:	bl	113dc <strlen@plt>
   217b0:	add	r5, r0, #1
   217b4:	mov	r0, r5
   217b8:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   217bc:	cmp	r0, #0
   217c0:	beq	217d4 <__assert_fail@plt+0x102c0>
   217c4:	mov	r1, r4
   217c8:	mov	r2, r5
   217cc:	pop	{r4, r5, fp, lr}
   217d0:	b	112a4 <memcpy@plt>
   217d4:	bl	217d8 <__assert_fail@plt+0x102c4>
   217d8:	push	{fp, lr}
   217dc:	mov	fp, sp
   217e0:	movw	r0, #16744	; 0x4168
   217e4:	movw	r1, #14473	; 0x3889
   217e8:	mov	r2, #5
   217ec:	movt	r0, #3
   217f0:	movt	r1, #2
   217f4:	ldr	r4, [r0]
   217f8:	mov	r0, #0
   217fc:	bl	11304 <dcgettext@plt>
   21800:	movw	r2, #11546	; 0x2d1a
   21804:	mov	r3, r0
   21808:	mov	r0, r4
   2180c:	mov	r1, #0
   21810:	movt	r2, #2
   21814:	bl	11370 <error@plt>
   21818:	bl	114f0 <abort@plt>
   2181c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21820:	add	fp, sp, #24
   21824:	sub	sp, sp, #16
   21828:	mov	r8, r0
   2182c:	ldr	r0, [fp, #16]
   21830:	mov	r7, r3
   21834:	mov	r4, r2
   21838:	mov	r2, r1
   2183c:	add	r3, sp, #8
   21840:	mov	r1, #0
   21844:	str	r0, [sp]
   21848:	mov	r0, r8
   2184c:	bl	21930 <__assert_fail@plt+0x1041c>
   21850:	cmp	r0, #0
   21854:	bne	21904 <__assert_fail@plt+0x103f0>
   21858:	ldr	r6, [sp, #8]
   2185c:	ldr	r5, [sp, #12]
   21860:	subs	r0, r6, r4
   21864:	sbcs	r0, r5, r7
   21868:	blt	2188c <__assert_fail@plt+0x10378>
   2186c:	ldr	r1, [fp, #8]
   21870:	ldr	r0, [fp, #12]
   21874:	subs	r1, r1, r6
   21878:	sbcs	r0, r0, r5
   2187c:	movge	r0, r6
   21880:	movge	r1, r5
   21884:	subge	sp, fp, #24
   21888:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   2188c:	subs	r0, r6, #1073741824	; 0x40000000
   21890:	sbcs	r0, r5, #0
   21894:	blt	218a0 <__assert_fail@plt+0x1038c>
   21898:	bl	113f4 <__errno_location@plt>
   2189c:	b	218b8 <__assert_fail@plt+0x103a4>
   218a0:	bl	113f4 <__errno_location@plt>
   218a4:	mvn	r2, #1073741824	; 0x40000000
   218a8:	mvn	r1, #0
   218ac:	subs	r2, r2, r6
   218b0:	sbcs	r1, r1, r5
   218b4:	blt	218c0 <__assert_fail@plt+0x103ac>
   218b8:	mov	r1, #75	; 0x4b
   218bc:	b	218c4 <__assert_fail@plt+0x103b0>
   218c0:	mov	r1, #34	; 0x22
   218c4:	str	r1, [r0]
   218c8:	ldr	r6, [r0]
   218cc:	ldr	r4, [fp, #24]
   218d0:	ldr	r5, [fp, #20]
   218d4:	mov	r0, r8
   218d8:	bl	1446c <__assert_fail@plt+0x2f58>
   218dc:	subs	r1, r6, #22
   218e0:	movw	r2, #12859	; 0x323b
   218e4:	str	r0, [sp]
   218e8:	mov	r3, r5
   218ec:	movne	r1, r6
   218f0:	cmp	r4, #0
   218f4:	movt	r2, #2
   218f8:	movweq	r4, #1
   218fc:	mov	r0, r4
   21900:	bl	11370 <error@plt>
   21904:	cmp	r0, #1
   21908:	beq	21898 <__assert_fail@plt+0x10384>
   2190c:	cmp	r0, #3
   21910:	bne	21920 <__assert_fail@plt+0x1040c>
   21914:	bl	113f4 <__errno_location@plt>
   21918:	mov	r1, #0
   2191c:	b	218c4 <__assert_fail@plt+0x103b0>
   21920:	bl	113f4 <__errno_location@plt>
   21924:	b	218c8 <__assert_fail@plt+0x103b4>
   21928:	mov	r1, #10
   2192c:	b	2181c <__assert_fail@plt+0x10308>
   21930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21934:	add	fp, sp, #28
   21938:	sub	sp, sp, #28
   2193c:	cmp	r2, #37	; 0x25
   21940:	str	r3, [sp, #12]
   21944:	bcs	21e58 <__assert_fail@plt+0x10944>
   21948:	ldr	sl, [fp, #8]
   2194c:	mov	r4, r2
   21950:	mov	r6, r1
   21954:	mov	r5, r0
   21958:	bl	113f4 <__errno_location@plt>
   2195c:	cmp	r6, #0
   21960:	add	r8, sp, #24
   21964:	mov	r7, r0
   21968:	mov	r0, #0
   2196c:	mov	r2, r4
   21970:	movne	r8, r6
   21974:	str	r0, [r7]
   21978:	mov	r0, r5
   2197c:	mov	r1, r8
   21980:	bl	11454 <strtoimax@plt>
   21984:	str	r1, [sp, #20]
   21988:	str	r0, [sp, #16]
   2198c:	ldr	r4, [r8]
   21990:	cmp	r4, r5
   21994:	beq	219c0 <__assert_fail@plt+0x104ac>
   21998:	mov	r6, r0
   2199c:	ldr	r0, [r7]
   219a0:	mov	r9, r1
   219a4:	cmp	r0, #0
   219a8:	beq	21a00 <__assert_fail@plt+0x104ec>
   219ac:	mov	r7, #4
   219b0:	cmp	r0, #34	; 0x22
   219b4:	bne	21e4c <__assert_fail@plt+0x10938>
   219b8:	mov	r7, #1
   219bc:	b	21a04 <__assert_fail@plt+0x104f0>
   219c0:	mov	r7, #4
   219c4:	cmp	sl, #0
   219c8:	beq	21e4c <__assert_fail@plt+0x10938>
   219cc:	ldrb	r1, [r5]
   219d0:	cmp	r1, #0
   219d4:	beq	21e4c <__assert_fail@plt+0x10938>
   219d8:	mov	r0, sl
   219dc:	bl	113e8 <strchr@plt>
   219e0:	cmp	r0, #0
   219e4:	beq	21e4c <__assert_fail@plt+0x10938>
   219e8:	mov	r9, #0
   219ec:	mov	r6, #1
   219f0:	mov	r7, #0
   219f4:	str	r9, [sp, #20]
   219f8:	str	r6, [sp, #16]
   219fc:	b	21a0c <__assert_fail@plt+0x104f8>
   21a00:	mov	r7, r0
   21a04:	cmp	sl, #0
   21a08:	beq	21ab0 <__assert_fail@plt+0x1059c>
   21a0c:	ldrb	r5, [r4]
   21a10:	cmp	r5, #0
   21a14:	beq	21ab8 <__assert_fail@plt+0x105a4>
   21a18:	mov	r0, sl
   21a1c:	mov	r1, r5
   21a20:	bl	113e8 <strchr@plt>
   21a24:	cmp	r0, #0
   21a28:	beq	21ac0 <__assert_fail@plt+0x105ac>
   21a2c:	sub	r0, r5, #69	; 0x45
   21a30:	str	r7, [sp, #4]
   21a34:	mov	r1, #1
   21a38:	mov	r7, #1024	; 0x400
   21a3c:	cmp	r0, #21
   21a40:	str	r1, [sp, #8]
   21a44:	bhi	21a5c <__assert_fail@plt+0x10548>
   21a48:	movw	r2, #35141	; 0x8945
   21a4c:	mov	r1, #1
   21a50:	movt	r2, #48	; 0x30
   21a54:	tst	r2, r1, lsl r0
   21a58:	bne	21a78 <__assert_fail@plt+0x10564>
   21a5c:	sub	r0, r5, #103	; 0x67
   21a60:	cmp	r0, #13
   21a64:	bhi	21ad0 <__assert_fail@plt+0x105bc>
   21a68:	mov	r1, #1
   21a6c:	movw	r2, #8273	; 0x2051
   21a70:	tst	r2, r1, lsl r0
   21a74:	beq	21ad0 <__assert_fail@plt+0x105bc>
   21a78:	ldr	r0, [fp, #8]
   21a7c:	mov	r1, #48	; 0x30
   21a80:	bl	113e8 <strchr@plt>
   21a84:	cmp	r0, #0
   21a88:	beq	21ad0 <__assert_fail@plt+0x105bc>
   21a8c:	ldrb	r0, [r4, #1]
   21a90:	ldr	sl, [sp, #12]
   21a94:	cmp	r0, #66	; 0x42
   21a98:	cmpne	r0, #68	; 0x44
   21a9c:	bne	21ba4 <__assert_fail@plt+0x10690>
   21aa0:	mov	r0, #2
   21aa4:	mov	r7, #1000	; 0x3e8
   21aa8:	str	r0, [sp, #8]
   21aac:	b	21ad4 <__assert_fail@plt+0x105c0>
   21ab0:	ldr	r0, [sp, #12]
   21ab4:	b	21ac8 <__assert_fail@plt+0x105b4>
   21ab8:	ldr	sl, [sp, #12]
   21abc:	b	21e48 <__assert_fail@plt+0x10934>
   21ac0:	ldr	r0, [sp, #12]
   21ac4:	orr	r7, r7, #2
   21ac8:	stm	r0, {r6, r9}
   21acc:	b	21e4c <__assert_fail@plt+0x10938>
   21ad0:	ldr	sl, [sp, #12]
   21ad4:	cmp	r5, #89	; 0x59
   21ad8:	bgt	21b40 <__assert_fail@plt+0x1062c>
   21adc:	sub	r0, r5, #66	; 0x42
   21ae0:	cmp	r0, #14
   21ae4:	bhi	21bc4 <__assert_fail@plt+0x106b0>
   21ae8:	add	r1, pc, #0
   21aec:	ldr	pc, [r1, r0, lsl #2]
   21af0:	andeq	r1, r2, ip, lsr #22
   21af4:	ldrdeq	r1, [r2], -ip
   21af8:	ldrdeq	r1, [r2], -ip
   21afc:	andeq	r1, r2, ip, ror #25
   21b00:	ldrdeq	r1, [r2], -ip
   21b04:	andeq	r1, r2, r0, lsr #24
   21b08:	ldrdeq	r1, [r2], -ip
   21b0c:	ldrdeq	r1, [r2], -ip
   21b10:	ldrdeq	r1, [r2], -ip
   21b14:	andeq	r1, r2, r8, asr #24
   21b18:	ldrdeq	r1, [r2], -ip
   21b1c:	andeq	r1, r2, ip, asr ip
   21b20:	ldrdeq	r1, [r2], -ip
   21b24:	ldrdeq	r1, [r2], -ip
   21b28:	andeq	r1, r2, r4, lsl sp
   21b2c:	cmn	r9, #1
   21b30:	ble	21d3c <__assert_fail@plt+0x10828>
   21b34:	cmp	r9, #2097152	; 0x200000
   21b38:	blt	21d68 <__assert_fail@plt+0x10854>
   21b3c:	b	21de8 <__assert_fail@plt+0x108d4>
   21b40:	cmp	r5, #115	; 0x73
   21b44:	bgt	21bfc <__assert_fail@plt+0x106e8>
   21b48:	sub	r0, r5, #98	; 0x62
   21b4c:	cmp	r0, #11
   21b50:	bhi	21cac <__assert_fail@plt+0x10798>
   21b54:	add	r1, pc, #4
   21b58:	mov	r4, #0
   21b5c:	ldr	pc, [r1, r0, lsl #2]
   21b60:	muleq	r2, r0, fp
   21b64:	andeq	r1, r2, ip, lsl lr
   21b68:	ldrdeq	r1, [r2], -ip
   21b6c:	ldrdeq	r1, [r2], -ip
   21b70:	ldrdeq	r1, [r2], -ip
   21b74:	andeq	r1, r2, r0, lsr #24
   21b78:	ldrdeq	r1, [r2], -ip
   21b7c:	ldrdeq	r1, [r2], -ip
   21b80:	ldrdeq	r1, [r2], -ip
   21b84:	andeq	r1, r2, r8, asr #24
   21b88:	ldrdeq	r1, [r2], -ip
   21b8c:	andeq	r1, r2, ip, asr ip
   21b90:	cmn	r9, #1
   21b94:	ble	21d7c <__assert_fail@plt+0x10868>
   21b98:	cmp	r9, #4194304	; 0x400000
   21b9c:	blt	21da8 <__assert_fail@plt+0x10894>
   21ba0:	b	21de8 <__assert_fail@plt+0x108d4>
   21ba4:	cmp	r0, #105	; 0x69
   21ba8:	bne	21ad4 <__assert_fail@plt+0x105c0>
   21bac:	ldrb	r0, [r4, #2]
   21bb0:	mov	r1, #1
   21bb4:	cmp	r0, #66	; 0x42
   21bb8:	movweq	r1, #3
   21bbc:	str	r1, [sp, #8]
   21bc0:	b	21ad4 <__assert_fail@plt+0x105c0>
   21bc4:	cmp	r5, #84	; 0x54
   21bc8:	beq	21c84 <__assert_fail@plt+0x10770>
   21bcc:	cmp	r5, #89	; 0x59
   21bd0:	bne	21cdc <__assert_fail@plt+0x107c8>
   21bd4:	mov	r4, #0
   21bd8:	mvn	r6, #7
   21bdc:	add	r5, sp, #16
   21be0:	mov	r0, r5
   21be4:	mov	r1, r7
   21be8:	bl	21e78 <__assert_fail@plt+0x10964>
   21bec:	orr	r4, r0, r4
   21bf0:	adds	r6, r6, #1
   21bf4:	bcc	21be0 <__assert_fail@plt+0x106cc>
   21bf8:	b	21e1c <__assert_fail@plt+0x10908>
   21bfc:	cmp	r5, #116	; 0x74
   21c00:	beq	21c84 <__assert_fail@plt+0x10770>
   21c04:	cmp	r5, #119	; 0x77
   21c08:	bne	21cdc <__assert_fail@plt+0x107c8>
   21c0c:	cmn	r9, #1
   21c10:	ble	21dbc <__assert_fail@plt+0x108a8>
   21c14:	cmp	r9, #1073741824	; 0x40000000
   21c18:	bge	21de8 <__assert_fail@plt+0x108d4>
   21c1c:	b	21e04 <__assert_fail@plt+0x108f0>
   21c20:	mov	r4, #0
   21c24:	mvn	r6, #2
   21c28:	add	r5, sp, #16
   21c2c:	mov	r0, r5
   21c30:	mov	r1, r7
   21c34:	bl	21e78 <__assert_fail@plt+0x10964>
   21c38:	orr	r4, r0, r4
   21c3c:	adds	r6, r6, #1
   21c40:	bcc	21c2c <__assert_fail@plt+0x10718>
   21c44:	b	21e1c <__assert_fail@plt+0x10908>
   21c48:	add	r0, sp, #16
   21c4c:	mov	r1, r7
   21c50:	bl	21e78 <__assert_fail@plt+0x10964>
   21c54:	mov	r4, r0
   21c58:	b	21e1c <__assert_fail@plt+0x10908>
   21c5c:	mov	r4, #0
   21c60:	mvn	r6, #1
   21c64:	add	r5, sp, #16
   21c68:	mov	r0, r5
   21c6c:	mov	r1, r7
   21c70:	bl	21e78 <__assert_fail@plt+0x10964>
   21c74:	orr	r4, r0, r4
   21c78:	adds	r6, r6, #1
   21c7c:	bcc	21c68 <__assert_fail@plt+0x10754>
   21c80:	b	21e1c <__assert_fail@plt+0x10908>
   21c84:	mov	r4, #0
   21c88:	mvn	r6, #3
   21c8c:	add	r5, sp, #16
   21c90:	mov	r0, r5
   21c94:	mov	r1, r7
   21c98:	bl	21e78 <__assert_fail@plt+0x10964>
   21c9c:	orr	r4, r0, r4
   21ca0:	adds	r6, r6, #1
   21ca4:	bcc	21c90 <__assert_fail@plt+0x1077c>
   21ca8:	b	21e1c <__assert_fail@plt+0x10908>
   21cac:	cmp	r5, #90	; 0x5a
   21cb0:	bne	21cdc <__assert_fail@plt+0x107c8>
   21cb4:	mov	r4, #0
   21cb8:	mvn	r6, #6
   21cbc:	add	r5, sp, #16
   21cc0:	mov	r0, r5
   21cc4:	mov	r1, r7
   21cc8:	bl	21e78 <__assert_fail@plt+0x10964>
   21ccc:	orr	r4, r0, r4
   21cd0:	adds	r6, r6, #1
   21cd4:	bcc	21cc0 <__assert_fail@plt+0x107ac>
   21cd8:	b	21e1c <__assert_fail@plt+0x10908>
   21cdc:	stm	sl, {r6, r9}
   21ce0:	ldr	r7, [sp, #4]
   21ce4:	orr	r7, r7, #2
   21ce8:	b	21e4c <__assert_fail@plt+0x10938>
   21cec:	mov	r4, #0
   21cf0:	mvn	r6, #5
   21cf4:	add	r5, sp, #16
   21cf8:	mov	r0, r5
   21cfc:	mov	r1, r7
   21d00:	bl	21e78 <__assert_fail@plt+0x10964>
   21d04:	orr	r4, r0, r4
   21d08:	adds	r6, r6, #1
   21d0c:	bcc	21cf8 <__assert_fail@plt+0x107e4>
   21d10:	b	21e1c <__assert_fail@plt+0x10908>
   21d14:	mov	r4, #0
   21d18:	mvn	r6, #4
   21d1c:	add	r5, sp, #16
   21d20:	mov	r0, r5
   21d24:	mov	r1, r7
   21d28:	bl	21e78 <__assert_fail@plt+0x10964>
   21d2c:	orr	r4, r0, r4
   21d30:	adds	r6, r6, #1
   21d34:	bcc	21d20 <__assert_fail@plt+0x1080c>
   21d38:	b	21e1c <__assert_fail@plt+0x10908>
   21d3c:	and	r0, r6, r9
   21d40:	cmn	r0, #1
   21d44:	beq	21d68 <__assert_fail@plt+0x10854>
   21d48:	mov	r0, #0
   21d4c:	mov	r1, #-2147483648	; 0x80000000
   21d50:	mov	r2, r6
   21d54:	mov	r3, r9
   21d58:	bl	22390 <__assert_fail@plt+0x10e7c>
   21d5c:	subs	r0, r0, #1024	; 0x400
   21d60:	sbcs	r0, r1, #0
   21d64:	blt	21de8 <__assert_fail@plt+0x108d4>
   21d68:	lsl	r0, r9, #10
   21d6c:	lsl	r1, r6, #10
   21d70:	mov	r4, #0
   21d74:	orr	r0, r0, r6, lsr #22
   21d78:	b	21e14 <__assert_fail@plt+0x10900>
   21d7c:	and	r0, r6, r9
   21d80:	cmn	r0, #1
   21d84:	beq	21da8 <__assert_fail@plt+0x10894>
   21d88:	mov	r0, #0
   21d8c:	mov	r1, #-2147483648	; 0x80000000
   21d90:	mov	r2, r6
   21d94:	mov	r3, r9
   21d98:	bl	22390 <__assert_fail@plt+0x10e7c>
   21d9c:	subs	r0, r0, #512	; 0x200
   21da0:	sbcs	r0, r1, #0
   21da4:	blt	21de8 <__assert_fail@plt+0x108d4>
   21da8:	lsl	r0, r9, #9
   21dac:	lsl	r1, r6, #9
   21db0:	mov	r4, #0
   21db4:	orr	r0, r0, r6, lsr #23
   21db8:	b	21e14 <__assert_fail@plt+0x10900>
   21dbc:	and	r0, r6, r9
   21dc0:	cmn	r0, #1
   21dc4:	beq	21e04 <__assert_fail@plt+0x108f0>
   21dc8:	mov	r0, #0
   21dcc:	mov	r1, #-2147483648	; 0x80000000
   21dd0:	mov	r2, r6
   21dd4:	mov	r3, r9
   21dd8:	bl	22390 <__assert_fail@plt+0x10e7c>
   21ddc:	subs	r0, r0, #2
   21de0:	sbcs	r0, r1, #0
   21de4:	bge	21e04 <__assert_fail@plt+0x108f0>
   21de8:	cmp	r9, #0
   21dec:	mvn	r0, #-2147483648	; 0x80000000
   21df0:	mvn	r1, #0
   21df4:	mov	r4, #1
   21df8:	movmi	r0, #-2147483648	; 0x80000000
   21dfc:	movwmi	r1, #0
   21e00:	b	21e14 <__assert_fail@plt+0x10900>
   21e04:	lsl	r0, r9, #1
   21e08:	lsl	r1, r6, #1
   21e0c:	mov	r4, #0
   21e10:	orr	r0, r0, r6, lsr #31
   21e14:	str	r1, [sp, #16]
   21e18:	str	r0, [sp, #20]
   21e1c:	ldr	r0, [r8]
   21e20:	ldr	r2, [sp, #8]
   21e24:	ldr	r7, [sp, #4]
   21e28:	add	r1, r0, r2
   21e2c:	orr	r7, r4, r7
   21e30:	str	r1, [r8]
   21e34:	ldrb	r0, [r0, r2]
   21e38:	ldr	r6, [sp, #16]
   21e3c:	ldr	r9, [sp, #20]
   21e40:	cmp	r0, #0
   21e44:	orrne	r7, r7, #2
   21e48:	stm	sl, {r6, r9}
   21e4c:	mov	r0, r7
   21e50:	sub	sp, fp, #28
   21e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e58:	movw	r0, #14490	; 0x389a
   21e5c:	movw	r1, #14528	; 0x38c0
   21e60:	movw	r3, #14544	; 0x38d0
   21e64:	mov	r2, #85	; 0x55
   21e68:	movt	r0, #2
   21e6c:	movt	r1, #2
   21e70:	movt	r3, #2
   21e74:	bl	11514 <__assert_fail@plt>
   21e78:	push	{r4, r5, r6, r7, fp, lr}
   21e7c:	add	fp, sp, #16
   21e80:	mov	r5, r1
   21e84:	mov	r4, r0
   21e88:	cmn	r1, #1
   21e8c:	ble	21eb4 <__assert_fail@plt+0x109a0>
   21e90:	ldrd	r6, [r4]
   21e94:	cmp	r5, #0
   21e98:	beq	21f60 <__assert_fail@plt+0x10a4c>
   21e9c:	cmn	r7, #1
   21ea0:	ble	21eec <__assert_fail@plt+0x109d8>
   21ea4:	asr	r3, r5, #31
   21ea8:	mvn	r0, #0
   21eac:	mvn	r1, #-2147483648	; 0x80000000
   21eb0:	b	21ed4 <__assert_fail@plt+0x109c0>
   21eb4:	ldrd	r6, [r4]
   21eb8:	cmn	r7, #1
   21ebc:	ble	21f1c <__assert_fail@plt+0x10a08>
   21ec0:	cmn	r5, #1
   21ec4:	beq	21f60 <__assert_fail@plt+0x10a4c>
   21ec8:	asr	r3, r5, #31
   21ecc:	mov	r0, #0
   21ed0:	mov	r1, #-2147483648	; 0x80000000
   21ed4:	mov	r2, r5
   21ed8:	bl	22390 <__assert_fail@plt+0x10e7c>
   21edc:	subs	r0, r0, r6
   21ee0:	sbcs	r0, r1, r7
   21ee4:	blt	21f3c <__assert_fail@plt+0x10a28>
   21ee8:	b	21f60 <__assert_fail@plt+0x10a4c>
   21eec:	and	r0, r6, r7
   21ef0:	cmn	r0, #1
   21ef4:	beq	21f58 <__assert_fail@plt+0x10a44>
   21ef8:	mov	r0, #0
   21efc:	mov	r1, #-2147483648	; 0x80000000
   21f00:	mov	r2, r6
   21f04:	mov	r3, r7
   21f08:	bl	22390 <__assert_fail@plt+0x10e7c>
   21f0c:	subs	r0, r0, r5
   21f10:	sbcs	r0, r1, r5, asr #31
   21f14:	blt	21f3c <__assert_fail@plt+0x10a28>
   21f18:	b	21f60 <__assert_fail@plt+0x10a4c>
   21f1c:	asr	r3, r5, #31
   21f20:	mvn	r0, #0
   21f24:	mvn	r1, #-2147483648	; 0x80000000
   21f28:	mov	r2, r5
   21f2c:	bl	22390 <__assert_fail@plt+0x10e7c>
   21f30:	subs	r0, r6, r0
   21f34:	sbcs	r0, r7, r1
   21f38:	bge	21f60 <__assert_fail@plt+0x10a4c>
   21f3c:	cmp	r7, #0
   21f40:	mvn	r1, #-2147483648	; 0x80000000
   21f44:	mvn	r2, #0
   21f48:	mov	r0, #1
   21f4c:	movmi	r1, #-2147483648	; 0x80000000
   21f50:	movwmi	r2, #0
   21f54:	b	21f74 <__assert_fail@plt+0x10a60>
   21f58:	mvn	r6, #0
   21f5c:	mvn	r7, #0
   21f60:	umull	r2, r0, r6, r5
   21f64:	asr	r1, r5, #31
   21f68:	mla	r0, r6, r1, r0
   21f6c:	mla	r1, r7, r5, r0
   21f70:	mov	r0, #0
   21f74:	str	r2, [r4]
   21f78:	str	r1, [r4, #4]
   21f7c:	pop	{r4, r5, r6, r7, fp, pc}
   21f80:	clz	r2, r1
   21f84:	clz	r3, r0
   21f88:	lsr	r2, r2, #5
   21f8c:	lsr	r3, r3, #5
   21f90:	orrs	r2, r3, r2
   21f94:	movwne	r1, #1
   21f98:	movwne	r0, #1
   21f9c:	cmp	r1, #0
   21fa0:	beq	21fd0 <__assert_fail@plt+0x10abc>
   21fa4:	mvn	r2, #-2147483648	; 0x80000000
   21fa8:	udiv	r2, r2, r1
   21fac:	cmp	r2, r0
   21fb0:	bcs	21fd0 <__assert_fail@plt+0x10abc>
   21fb4:	push	{fp, lr}
   21fb8:	mov	fp, sp
   21fbc:	bl	113f4 <__errno_location@plt>
   21fc0:	mov	r1, #12
   21fc4:	str	r1, [r0]
   21fc8:	mov	r0, #0
   21fcc:	pop	{fp, pc}
   21fd0:	b	111fc <calloc@plt>
   21fd4:	cmp	r0, #0
   21fd8:	movweq	r0, #1
   21fdc:	cmn	r0, #1
   21fe0:	ble	21fe8 <__assert_fail@plt+0x10ad4>
   21fe4:	b	1137c <malloc@plt>
   21fe8:	push	{fp, lr}
   21fec:	mov	fp, sp
   21ff0:	bl	113f4 <__errno_location@plt>
   21ff4:	mov	r1, #12
   21ff8:	str	r1, [r0]
   21ffc:	mov	r0, #0
   22000:	pop	{fp, pc}
   22004:	push	{fp, lr}
   22008:	mov	fp, sp
   2200c:	cmp	r0, #0
   22010:	beq	2202c <__assert_fail@plt+0x10b18>
   22014:	cmp	r1, #0
   22018:	beq	22038 <__assert_fail@plt+0x10b24>
   2201c:	cmn	r1, #1
   22020:	ble	22040 <__assert_fail@plt+0x10b2c>
   22024:	pop	{fp, lr}
   22028:	b	11310 <realloc@plt>
   2202c:	mov	r0, r1
   22030:	pop	{fp, lr}
   22034:	b	21fd4 <__assert_fail@plt+0x10ac0>
   22038:	bl	22190 <__assert_fail@plt+0x10c7c>
   2203c:	b	2204c <__assert_fail@plt+0x10b38>
   22040:	bl	113f4 <__errno_location@plt>
   22044:	mov	r1, #12
   22048:	str	r1, [r0]
   2204c:	mov	r0, #0
   22050:	pop	{fp, pc}
   22054:	push	{r4, r5, r6, sl, fp, lr}
   22058:	add	fp, sp, #16
   2205c:	mov	r4, r0
   22060:	bl	1134c <__fpending@plt>
   22064:	mov	r5, r0
   22068:	mov	r0, r4
   2206c:	bl	11358 <ferror_unlocked@plt>
   22070:	mov	r6, r0
   22074:	mov	r0, r4
   22078:	bl	127e8 <__assert_fail@plt+0x12d4>
   2207c:	cmp	r6, #0
   22080:	beq	220a0 <__assert_fail@plt+0x10b8c>
   22084:	mvn	r4, #0
   22088:	cmp	r0, #0
   2208c:	bne	220cc <__assert_fail@plt+0x10bb8>
   22090:	bl	113f4 <__errno_location@plt>
   22094:	mov	r1, #0
   22098:	str	r1, [r0]
   2209c:	b	220cc <__assert_fail@plt+0x10bb8>
   220a0:	cmp	r0, #0
   220a4:	mov	r4, r0
   220a8:	mvnne	r4, #0
   220ac:	cmp	r5, #0
   220b0:	bne	220cc <__assert_fail@plt+0x10bb8>
   220b4:	cmp	r0, #0
   220b8:	beq	220cc <__assert_fail@plt+0x10bb8>
   220bc:	bl	113f4 <__errno_location@plt>
   220c0:	ldr	r0, [r0]
   220c4:	subs	r4, r0, #9
   220c8:	mvnne	r4, #0
   220cc:	mov	r0, r4
   220d0:	pop	{r4, r5, r6, sl, fp, pc}
   220d4:	push	{r4, r5, r6, r7, fp, lr}
   220d8:	add	fp, sp, #16
   220dc:	mov	r4, r0
   220e0:	ldr	r0, [r0, #4]
   220e4:	mov	r5, r1
   220e8:	cmp	r0, r1
   220ec:	bcs	2211c <__assert_fail@plt+0x10c08>
   220f0:	mov	r6, r3
   220f4:	cmp	r3, #0
   220f8:	beq	22124 <__assert_fail@plt+0x10c10>
   220fc:	mvn	r0, #0
   22100:	udiv	r0, r0, r6
   22104:	cmp	r0, r5
   22108:	bcs	22124 <__assert_fail@plt+0x10c10>
   2210c:	bl	113f4 <__errno_location@plt>
   22110:	mov	r1, #12
   22114:	str	r1, [r0]
   22118:	b	22188 <__assert_fail@plt+0x10c74>
   2211c:	str	r5, [r4]
   22120:	b	22180 <__assert_fail@plt+0x10c6c>
   22124:	ldr	r0, [r4, #8]
   22128:	mul	r1, r6, r5
   2212c:	cmp	r0, r2
   22130:	beq	22148 <__assert_fail@plt+0x10c34>
   22134:	bl	22004 <__assert_fail@plt+0x10af0>
   22138:	mov	r7, r0
   2213c:	cmp	r0, #0
   22140:	bne	22178 <__assert_fail@plt+0x10c64>
   22144:	b	22188 <__assert_fail@plt+0x10c74>
   22148:	mov	r0, r1
   2214c:	bl	21fd4 <__assert_fail@plt+0x10ac0>
   22150:	cmp	r0, #0
   22154:	beq	22188 <__assert_fail@plt+0x10c74>
   22158:	ldr	r1, [r4, #8]
   2215c:	mov	r7, r0
   22160:	cmp	r1, #0
   22164:	beq	22178 <__assert_fail@plt+0x10c64>
   22168:	ldr	r0, [r4]
   2216c:	mul	r2, r0, r6
   22170:	mov	r0, r7
   22174:	bl	112a4 <memcpy@plt>
   22178:	str	r5, [r4]
   2217c:	stmib	r4, {r5, r7}
   22180:	mov	r0, #1
   22184:	pop	{r4, r5, r6, r7, fp, pc}
   22188:	mov	r0, #0
   2218c:	pop	{r4, r5, r6, r7, fp, pc}
   22190:	push	{r4, r5, r6, sl, fp, lr}
   22194:	add	fp, sp, #16
   22198:	mov	r4, r0
   2219c:	bl	113f4 <__errno_location@plt>
   221a0:	ldr	r6, [r0]
   221a4:	mov	r5, r0
   221a8:	mov	r0, r4
   221ac:	bl	11280 <free@plt>
   221b0:	str	r6, [r5]
   221b4:	pop	{r4, r5, r6, sl, fp, pc}
   221b8:	push	{fp, lr}
   221bc:	mov	fp, sp
   221c0:	mov	r0, #14
   221c4:	bl	1149c <nl_langinfo@plt>
   221c8:	movw	r1, #12462	; 0x30ae
   221cc:	cmp	r0, #0
   221d0:	movt	r1, #2
   221d4:	movne	r1, r0
   221d8:	movw	r0, #14622	; 0x391e
   221dc:	ldrb	r2, [r1]
   221e0:	movt	r0, #2
   221e4:	cmp	r2, #0
   221e8:	movne	r0, r1
   221ec:	pop	{fp, pc}
   221f0:	push	{r4, r5, r6, r7, fp, lr}
   221f4:	add	fp, sp, #16
   221f8:	sub	sp, sp, #8
   221fc:	cmp	r0, #0
   22200:	add	r5, sp, #4
   22204:	mov	r7, r2
   22208:	mov	r4, r1
   2220c:	movne	r5, r0
   22210:	mov	r0, r5
   22214:	bl	11364 <mbrtowc@plt>
   22218:	mov	r6, r0
   2221c:	cmp	r7, #0
   22220:	beq	22248 <__assert_fail@plt+0x10d34>
   22224:	cmn	r6, #2
   22228:	bcc	22248 <__assert_fail@plt+0x10d34>
   2222c:	mov	r0, #0
   22230:	bl	22290 <__assert_fail@plt+0x10d7c>
   22234:	cmp	r0, #0
   22238:	bne	22248 <__assert_fail@plt+0x10d34>
   2223c:	ldrb	r0, [r4]
   22240:	mov	r6, #1
   22244:	str	r0, [r5]
   22248:	mov	r0, r6
   2224c:	sub	sp, fp, #16
   22250:	pop	{r4, r5, r6, r7, fp, pc}
   22254:	cmp	r2, #0
   22258:	beq	22288 <__assert_fail@plt+0x10d74>
   2225c:	mvn	r3, #0
   22260:	udiv	r3, r3, r2
   22264:	cmp	r3, r1
   22268:	bcs	22288 <__assert_fail@plt+0x10d74>
   2226c:	push	{fp, lr}
   22270:	mov	fp, sp
   22274:	bl	113f4 <__errno_location@plt>
   22278:	mov	r1, #12
   2227c:	str	r1, [r0]
   22280:	mov	r0, #0
   22284:	pop	{fp, pc}
   22288:	mul	r1, r2, r1
   2228c:	b	22004 <__assert_fail@plt+0x10af0>
   22290:	push	{r4, sl, fp, lr}
   22294:	add	fp, sp, #8
   22298:	sub	sp, sp, #264	; 0x108
   2229c:	add	r1, sp, #7
   222a0:	movw	r2, #257	; 0x101
   222a4:	bl	222fc <__assert_fail@plt+0x10de8>
   222a8:	mov	r4, #0
   222ac:	cmp	r0, #0
   222b0:	bne	222f0 <__assert_fail@plt+0x10ddc>
   222b4:	movw	r1, #14628	; 0x3924
   222b8:	add	r0, sp, #7
   222bc:	mov	r2, #2
   222c0:	movt	r1, #2
   222c4:	bl	113d0 <bcmp@plt>
   222c8:	cmp	r0, #0
   222cc:	beq	222f0 <__assert_fail@plt+0x10ddc>
   222d0:	movw	r1, #14630	; 0x3926
   222d4:	add	r0, sp, #7
   222d8:	mov	r2, #6
   222dc:	movt	r1, #2
   222e0:	bl	113d0 <bcmp@plt>
   222e4:	cmp	r0, #0
   222e8:	mov	r4, r0
   222ec:	movwne	r4, #1
   222f0:	mov	r0, r4
   222f4:	sub	sp, fp, #8
   222f8:	pop	{r4, sl, fp, pc}
   222fc:	push	{r4, r5, r6, r7, fp, lr}
   22300:	add	fp, sp, #16
   22304:	mov	r4, r1
   22308:	mov	r1, #0
   2230c:	mov	r6, r2
   22310:	bl	11478 <setlocale@plt>
   22314:	cmp	r0, #0
   22318:	beq	22344 <__assert_fail@plt+0x10e30>
   2231c:	mov	r7, r0
   22320:	bl	113dc <strlen@plt>
   22324:	cmp	r0, r6
   22328:	bcs	22358 <__assert_fail@plt+0x10e44>
   2232c:	add	r2, r0, #1
   22330:	mov	r0, r4
   22334:	mov	r1, r7
   22338:	bl	112a4 <memcpy@plt>
   2233c:	mov	r5, #0
   22340:	b	22380 <__assert_fail@plt+0x10e6c>
   22344:	cmp	r6, #0
   22348:	mov	r5, #22
   2234c:	movne	r0, #0
   22350:	strbne	r0, [r4]
   22354:	b	22380 <__assert_fail@plt+0x10e6c>
   22358:	mov	r5, #34	; 0x22
   2235c:	cmp	r6, #0
   22360:	beq	22380 <__assert_fail@plt+0x10e6c>
   22364:	sub	r6, r6, #1
   22368:	mov	r0, r4
   2236c:	mov	r1, r7
   22370:	mov	r2, r6
   22374:	bl	112a4 <memcpy@plt>
   22378:	mov	r0, #0
   2237c:	strb	r0, [r4, r6]
   22380:	mov	r0, r5
   22384:	pop	{r4, r5, r6, r7, fp, pc}
   22388:	mov	r1, #0
   2238c:	b	11478 <setlocale@plt>
   22390:	cmp	r3, #0
   22394:	cmpeq	r2, #0
   22398:	bne	223bc <__assert_fail@plt+0x10ea8>
   2239c:	cmp	r1, #0
   223a0:	movlt	r1, #-2147483648	; 0x80000000
   223a4:	movlt	r0, #0
   223a8:	blt	223b8 <__assert_fail@plt+0x10ea4>
   223ac:	cmpeq	r0, #0
   223b0:	mvnne	r1, #-2147483648	; 0x80000000
   223b4:	mvnne	r0, #0
   223b8:	b	22464 <__assert_fail@plt+0x10f50>
   223bc:	sub	sp, sp, #8
   223c0:	push	{sp, lr}
   223c4:	cmp	r1, #0
   223c8:	blt	223e8 <__assert_fail@plt+0x10ed4>
   223cc:	cmp	r3, #0
   223d0:	blt	2241c <__assert_fail@plt+0x10f08>
   223d4:	bl	22474 <__assert_fail@plt+0x10f60>
   223d8:	ldr	lr, [sp, #4]
   223dc:	add	sp, sp, #8
   223e0:	pop	{r2, r3}
   223e4:	bx	lr
   223e8:	rsbs	r0, r0, #0
   223ec:	sbc	r1, r1, r1, lsl #1
   223f0:	cmp	r3, #0
   223f4:	blt	22440 <__assert_fail@plt+0x10f2c>
   223f8:	bl	22474 <__assert_fail@plt+0x10f60>
   223fc:	ldr	lr, [sp, #4]
   22400:	add	sp, sp, #8
   22404:	pop	{r2, r3}
   22408:	rsbs	r0, r0, #0
   2240c:	sbc	r1, r1, r1, lsl #1
   22410:	rsbs	r2, r2, #0
   22414:	sbc	r3, r3, r3, lsl #1
   22418:	bx	lr
   2241c:	rsbs	r2, r2, #0
   22420:	sbc	r3, r3, r3, lsl #1
   22424:	bl	22474 <__assert_fail@plt+0x10f60>
   22428:	ldr	lr, [sp, #4]
   2242c:	add	sp, sp, #8
   22430:	pop	{r2, r3}
   22434:	rsbs	r0, r0, #0
   22438:	sbc	r1, r1, r1, lsl #1
   2243c:	bx	lr
   22440:	rsbs	r2, r2, #0
   22444:	sbc	r3, r3, r3, lsl #1
   22448:	bl	22474 <__assert_fail@plt+0x10f60>
   2244c:	ldr	lr, [sp, #4]
   22450:	add	sp, sp, #8
   22454:	pop	{r2, r3}
   22458:	rsbs	r2, r2, #0
   2245c:	sbc	r3, r3, r3, lsl #1
   22460:	bx	lr
   22464:	push	{r1, lr}
   22468:	mov	r0, #8
   2246c:	bl	11220 <raise@plt>
   22470:	pop	{r1, pc}
   22474:	cmp	r1, r3
   22478:	cmpeq	r0, r2
   2247c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22480:	mov	r4, r0
   22484:	movcc	r0, #0
   22488:	mov	r5, r1
   2248c:	ldr	lr, [sp, #36]	; 0x24
   22490:	movcc	r1, r0
   22494:	bcc	22590 <__assert_fail@plt+0x1107c>
   22498:	cmp	r3, #0
   2249c:	clzeq	ip, r2
   224a0:	clzne	ip, r3
   224a4:	addeq	ip, ip, #32
   224a8:	cmp	r5, #0
   224ac:	clzeq	r1, r4
   224b0:	addeq	r1, r1, #32
   224b4:	clzne	r1, r5
   224b8:	sub	ip, ip, r1
   224bc:	sub	sl, ip, #32
   224c0:	lsl	r9, r3, ip
   224c4:	rsb	fp, ip, #32
   224c8:	orr	r9, r9, r2, lsl sl
   224cc:	orr	r9, r9, r2, lsr fp
   224d0:	lsl	r8, r2, ip
   224d4:	cmp	r5, r9
   224d8:	cmpeq	r4, r8
   224dc:	movcc	r0, #0
   224e0:	movcc	r1, r0
   224e4:	bcc	22500 <__assert_fail@plt+0x10fec>
   224e8:	mov	r0, #1
   224ec:	subs	r4, r4, r8
   224f0:	lsl	r1, r0, sl
   224f4:	orr	r1, r1, r0, lsr fp
   224f8:	lsl	r0, r0, ip
   224fc:	sbc	r5, r5, r9
   22500:	cmp	ip, #0
   22504:	beq	22590 <__assert_fail@plt+0x1107c>
   22508:	lsr	r6, r8, #1
   2250c:	orr	r6, r6, r9, lsl #31
   22510:	lsr	r7, r9, #1
   22514:	mov	r2, ip
   22518:	b	2253c <__assert_fail@plt+0x11028>
   2251c:	subs	r3, r4, r6
   22520:	sbc	r8, r5, r7
   22524:	adds	r3, r3, r3
   22528:	adc	r8, r8, r8
   2252c:	adds	r4, r3, #1
   22530:	adc	r5, r8, #0
   22534:	subs	r2, r2, #1
   22538:	beq	22558 <__assert_fail@plt+0x11044>
   2253c:	cmp	r5, r7
   22540:	cmpeq	r4, r6
   22544:	bcs	2251c <__assert_fail@plt+0x11008>
   22548:	adds	r4, r4, r4
   2254c:	adc	r5, r5, r5
   22550:	subs	r2, r2, #1
   22554:	bne	2253c <__assert_fail@plt+0x11028>
   22558:	lsr	r3, r4, ip
   2255c:	orr	r3, r3, r5, lsl fp
   22560:	lsr	r2, r5, ip
   22564:	orr	r3, r3, r5, lsr sl
   22568:	adds	r0, r0, r4
   2256c:	mov	r4, r3
   22570:	lsl	r3, r2, ip
   22574:	orr	r3, r3, r4, lsl sl
   22578:	lsl	ip, r4, ip
   2257c:	orr	r3, r3, r4, lsr fp
   22580:	adc	r1, r1, r5
   22584:	subs	r0, r0, ip
   22588:	mov	r5, r2
   2258c:	sbc	r1, r1, r3
   22590:	cmp	lr, #0
   22594:	strdne	r4, [lr]
   22598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2259c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   225a0:	mov	r7, r0
   225a4:	ldr	r6, [pc, #72]	; 225f4 <__assert_fail@plt+0x110e0>
   225a8:	ldr	r5, [pc, #72]	; 225f8 <__assert_fail@plt+0x110e4>
   225ac:	add	r6, pc, r6
   225b0:	add	r5, pc, r5
   225b4:	sub	r6, r6, r5
   225b8:	mov	r8, r1
   225bc:	mov	r9, r2
   225c0:	bl	111d0 <pthread_mutex_unlock@plt-0x20>
   225c4:	asrs	r6, r6, #2
   225c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   225cc:	mov	r4, #0
   225d0:	add	r4, r4, #1
   225d4:	ldr	r3, [r5], #4
   225d8:	mov	r2, r9
   225dc:	mov	r1, r8
   225e0:	mov	r0, r7
   225e4:	blx	r3
   225e8:	cmp	r6, r4
   225ec:	bne	225d0 <__assert_fail@plt+0x110bc>
   225f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   225f4:	andeq	r1, r1, r8, asr r9
   225f8:	andeq	r1, r1, r0, asr r9
   225fc:	bx	lr
   22600:	ldr	r3, [pc, #12]	; 22614 <__assert_fail@plt+0x11100>
   22604:	mov	r1, #0
   22608:	add	r3, pc, r3
   2260c:	ldr	r2, [r3]
   22610:	b	1140c <__cxa_atexit@plt>
   22614:	andeq	r1, r1, r4, lsl fp

Disassembly of section .fini:

00022618 <.fini>:
   22618:	push	{r3, lr}
   2261c:	pop	{r3, pc}
