
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	10f94 <__assert_fail@plt+0x48>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	ip, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #28, 20	; 0x1c000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #28, 20	; 0x1c000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #28, 20	; 0x1c000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #28, 20	; 0x1c000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <posix_fadvise64@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #28, 20	; 0x1c000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <printf@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #28, 20	; 0x1c000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <fflush@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #28, 20	; 0x1c000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <memmove@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #28, 20	; 0x1c000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <free@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #28, 20	; 0x1c000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <_exit@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #28, 20	; 0x1c000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <memcpy@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #28, 20	; 0x1c000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <mbsinit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #28, 20	; 0x1c000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <fwrite_unlocked@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #28, 20	; 0x1c000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <memcmp@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #28, 20	; 0x1c000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <fputc_unlocked@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #28, 20	; 0x1c000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #28, 20	; 0x1c000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #28, 20	; 0x1c000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <iswprint@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #28, 20	; 0x1c000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <fwrite@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #28, 20	; 0x1c000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <lseek64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #28, 20	; 0x1c000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <__ctype_get_mb_cur_max@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #28, 20	; 0x1c000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <__fpending@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #28, 20	; 0x1c000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <ferror_unlocked@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #28, 20	; 0x1c000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <mbrtowc@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #28, 20	; 0x1c000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <error@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #28, 20	; 0x1c000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <malloc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #28, 20	; 0x1c000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <__libc_start_main@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #28, 20	; 0x1c000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <__freading@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #28, 20	; 0x1c000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__gmon_start__@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #28, 20	; 0x1c000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <getopt_long@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #28, 20	; 0x1c000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__ctype_b_loc@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #28, 20	; 0x1c000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <exit@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #28, 20	; 0x1c000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <gettext@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #28, 20	; 0x1c000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <strlen@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #28, 20	; 0x1c000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strchr@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #28, 20	; 0x1c000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <fprintf@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #28, 20	; 0x1c000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <__errno_location@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #28, 20	; 0x1c000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__cxa_atexit@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #28, 20	; 0x1c000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <memset@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #28, 20	; 0x1c000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <fileno@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #28, 20	; 0x1c000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <memchr@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #28, 20	; 0x1c000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <strtoimax@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #28, 20	; 0x1c000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <fclose@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #28, 20	; 0x1c000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <fseeko64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #28, 20	; 0x1c000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <setlocale@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #28, 20	; 0x1c000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <strrchr@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #28, 20	; 0x1c000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <nl_langinfo@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #28, 20	; 0x1c000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <fopen64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #28, 20	; 0x1c000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <bindtextdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #28, 20	; 0x1c000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <fread_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #28, 20	; 0x1c000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <strncmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #28, 20	; 0x1c000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <abort@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #28, 20	; 0x1c000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <feof_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #28, 20	; 0x1c000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <__assert_fail@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #28, 20	; 0x1c000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

Disassembly of section .text:

00010f58 <.text>:
   10f58:	mov	fp, #0
   10f5c:	mov	lr, #0
   10f60:	pop	{r1}		; (ldr r1, [sp], #4)
   10f64:	mov	r2, sp
   10f68:	push	{r2}		; (str r2, [sp, #-4]!)
   10f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f70:	ldr	ip, [pc, #16]	; 10f88 <__assert_fail@plt+0x3c>
   10f74:	push	{ip}		; (str ip, [sp, #-4]!)
   10f78:	ldr	r0, [pc, #12]	; 10f8c <__assert_fail@plt+0x40>
   10f7c:	ldr	r3, [pc, #12]	; 10f90 <__assert_fail@plt+0x44>
   10f80:	bl	10e08 <__libc_start_main@plt>
   10f84:	bl	10f34 <abort@plt>
   10f88:	andeq	fp, r1, r8, asr r9
   10f8c:			; <UNDEFINED> instruction: 0x000134b4
   10f90:	strdeq	fp, [r1], -r8
   10f94:	ldr	r3, [pc, #20]	; 10fb0 <__assert_fail@plt+0x64>
   10f98:	ldr	r2, [pc, #20]	; 10fb4 <__assert_fail@plt+0x68>
   10f9c:	add	r3, pc, r3
   10fa0:	ldr	r2, [r3, r2]
   10fa4:	cmp	r2, #0
   10fa8:	bxeq	lr
   10fac:	b	10e20 <__gmon_start__@plt>
   10fb0:	andeq	ip, r1, ip, asr r0
   10fb4:	andeq	r0, r0, r4, ror #1
   10fb8:	ldr	r0, [pc, #24]	; 10fd8 <__assert_fail@plt+0x8c>
   10fbc:	ldr	r3, [pc, #24]	; 10fdc <__assert_fail@plt+0x90>
   10fc0:	cmp	r3, r0
   10fc4:	bxeq	lr
   10fc8:	ldr	r3, [pc, #16]	; 10fe0 <__assert_fail@plt+0x94>
   10fcc:	cmp	r3, #0
   10fd0:	bxeq	lr
   10fd4:	bx	r3
   10fd8:	andeq	sp, r2, r8, lsr r1
   10fdc:	andeq	sp, r2, r8, lsr r1
   10fe0:	andeq	r0, r0, r0
   10fe4:	ldr	r0, [pc, #36]	; 11010 <__assert_fail@plt+0xc4>
   10fe8:	ldr	r1, [pc, #36]	; 11014 <__assert_fail@plt+0xc8>
   10fec:	sub	r1, r1, r0
   10ff0:	asr	r1, r1, #2
   10ff4:	add	r1, r1, r1, lsr #31
   10ff8:	asrs	r1, r1, #1
   10ffc:	bxeq	lr
   11000:	ldr	r3, [pc, #16]	; 11018 <__assert_fail@plt+0xcc>
   11004:	cmp	r3, #0
   11008:	bxeq	lr
   1100c:	bx	r3
   11010:	andeq	sp, r2, r8, lsr r1
   11014:	andeq	sp, r2, r8, lsr r1
   11018:	andeq	r0, r0, r0
   1101c:	push	{r4, lr}
   11020:	ldr	r4, [pc, #24]	; 11040 <__assert_fail@plt+0xf4>
   11024:	ldrb	r3, [r4]
   11028:	cmp	r3, #0
   1102c:	popne	{r4, pc}
   11030:	bl	10fb8 <__assert_fail@plt+0x6c>
   11034:	mov	r3, #1
   11038:	strb	r3, [r4]
   1103c:	pop	{r4, pc}
   11040:	andeq	sp, r2, ip, asr r1
   11044:	b	10fe4 <__assert_fail@plt+0x98>
   11048:	str	fp, [sp, #-8]!
   1104c:	str	lr, [sp, #4]
   11050:	add	fp, sp, #4
   11054:	movw	r0, #47488	; 0xb980
   11058:	movt	r0, #1
   1105c:	bl	10e50 <gettext@plt>
   11060:	mov	r2, r0
   11064:	movw	r3, #53588	; 0xd154
   11068:	movt	r3, #2
   1106c:	ldr	r3, [r3]
   11070:	mov	r1, r3
   11074:	mov	r0, r2
   11078:	bl	10cdc <fputs_unlocked@plt>
   1107c:	nop	{0}
   11080:	sub	sp, fp, #4
   11084:	ldr	fp, [sp]
   11088:	add	sp, sp, #4
   1108c:	pop	{pc}		; (ldr pc, [sp], #4)
   11090:	str	fp, [sp, #-8]!
   11094:	str	lr, [sp, #4]
   11098:	add	fp, sp, #4
   1109c:	movw	r0, #47544	; 0xb9b8
   110a0:	movt	r0, #1
   110a4:	bl	10e50 <gettext@plt>
   110a8:	mov	r2, r0
   110ac:	movw	r3, #53588	; 0xd154
   110b0:	movt	r3, #2
   110b4:	ldr	r3, [r3]
   110b8:	mov	r1, r3
   110bc:	mov	r0, r2
   110c0:	bl	10cdc <fputs_unlocked@plt>
   110c4:	nop	{0}
   110c8:	sub	sp, fp, #4
   110cc:	ldr	fp, [sp]
   110d0:	add	sp, sp, #4
   110d4:	pop	{pc}		; (ldr pc, [sp], #4)
   110d8:	str	fp, [sp, #-8]!
   110dc:	str	lr, [sp, #4]
   110e0:	add	fp, sp, #4
   110e4:	sub	sp, sp, #80	; 0x50
   110e8:	str	r0, [fp, #-80]	; 0xffffffb0
   110ec:	movw	r2, #47992	; 0xbb78
   110f0:	movt	r2, #1
   110f4:	sub	r3, fp, #72	; 0x48
   110f8:	ldrd	r0, [r2]
   110fc:	strd	r0, [r3]
   11100:	ldrd	r0, [r2, #8]
   11104:	strd	r0, [r3, #8]
   11108:	ldrd	r0, [r2, #16]
   1110c:	strd	r0, [r3, #16]
   11110:	ldrd	r0, [r2, #24]
   11114:	strd	r0, [r3, #24]
   11118:	ldrd	r0, [r2, #32]
   1111c:	strd	r0, [r3, #32]
   11120:	ldrd	r0, [r2, #40]	; 0x28
   11124:	strd	r0, [r3, #40]	; 0x28
   11128:	ldrd	r0, [r2, #48]	; 0x30
   1112c:	strd	r0, [r3, #48]	; 0x30
   11130:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11134:	str	r3, [fp, #-8]
   11138:	sub	r3, fp, #72	; 0x48
   1113c:	str	r3, [fp, #-12]
   11140:	b	11150 <__assert_fail@plt+0x204>
   11144:	ldr	r3, [fp, #-12]
   11148:	add	r3, r3, #8
   1114c:	str	r3, [fp, #-12]
   11150:	ldr	r3, [fp, #-12]
   11154:	ldr	r3, [r3]
   11158:	cmp	r3, #0
   1115c:	beq	11180 <__assert_fail@plt+0x234>
   11160:	ldr	r3, [fp, #-12]
   11164:	ldr	r3, [r3]
   11168:	mov	r1, r3
   1116c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11170:	bl	10cf4 <strcmp@plt>
   11174:	mov	r3, r0
   11178:	cmp	r3, #0
   1117c:	bne	11144 <__assert_fail@plt+0x1f8>
   11180:	ldr	r3, [fp, #-12]
   11184:	ldr	r3, [r3, #4]
   11188:	cmp	r3, #0
   1118c:	beq	1119c <__assert_fail@plt+0x250>
   11190:	ldr	r3, [fp, #-12]
   11194:	ldr	r3, [r3, #4]
   11198:	str	r3, [fp, #-8]
   1119c:	movw	r0, #47620	; 0xba04
   111a0:	movt	r0, #1
   111a4:	bl	10e50 <gettext@plt>
   111a8:	mov	r3, r0
   111ac:	movw	r2, #47644	; 0xba1c
   111b0:	movt	r2, #1
   111b4:	movw	r1, #47684	; 0xba44
   111b8:	movt	r1, #1
   111bc:	mov	r0, r3
   111c0:	bl	10d0c <printf@plt>
   111c4:	mov	r1, #0
   111c8:	mov	r0, #5
   111cc:	bl	10ee0 <setlocale@plt>
   111d0:	str	r0, [fp, #-16]
   111d4:	ldr	r3, [fp, #-16]
   111d8:	cmp	r3, #0
   111dc:	beq	11228 <__assert_fail@plt+0x2dc>
   111e0:	mov	r2, #3
   111e4:	movw	r1, #47700	; 0xba54
   111e8:	movt	r1, #1
   111ec:	ldr	r0, [fp, #-16]
   111f0:	bl	10f28 <strncmp@plt>
   111f4:	mov	r3, r0
   111f8:	cmp	r3, #0
   111fc:	beq	11228 <__assert_fail@plt+0x2dc>
   11200:	movw	r0, #47704	; 0xba58
   11204:	movt	r0, #1
   11208:	bl	10e50 <gettext@plt>
   1120c:	mov	r2, r0
   11210:	movw	r3, #53588	; 0xd154
   11214:	movt	r3, #2
   11218:	ldr	r3, [r3]
   1121c:	mov	r1, r3
   11220:	mov	r0, r2
   11224:	bl	10cdc <fputs_unlocked@plt>
   11228:	movw	r0, #47776	; 0xbaa0
   1122c:	movt	r0, #1
   11230:	bl	10e50 <gettext@plt>
   11234:	mov	r3, r0
   11238:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1123c:	movw	r1, #47644	; 0xba1c
   11240:	movt	r1, #1
   11244:	mov	r0, r3
   11248:	bl	10d0c <printf@plt>
   1124c:	movw	r0, #47804	; 0xbabc
   11250:	movt	r0, #1
   11254:	bl	10e50 <gettext@plt>
   11258:	ldr	r2, [fp, #-8]
   1125c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11260:	cmp	r2, r3
   11264:	bne	11274 <__assert_fail@plt+0x328>
   11268:	movw	r3, #47856	; 0xbaf0
   1126c:	movt	r3, #1
   11270:	b	1127c <__assert_fail@plt+0x330>
   11274:	movw	r3, #47868	; 0xbafc
   11278:	movt	r3, #1
   1127c:	mov	r2, r3
   11280:	ldr	r1, [fp, #-8]
   11284:	bl	10d0c <printf@plt>
   11288:	nop	{0}
   1128c:	sub	sp, fp, #4
   11290:	ldr	fp, [sp]
   11294:	add	sp, sp, #4
   11298:	pop	{pc}		; (ldr pc, [sp], #4)
   1129c:	str	r4, [sp, #-12]!
   112a0:	str	fp, [sp, #4]
   112a4:	str	lr, [sp, #8]
   112a8:	add	fp, sp, #8
   112ac:	sub	sp, sp, #12
   112b0:	str	r0, [fp, #-16]
   112b4:	ldr	r3, [fp, #-16]
   112b8:	cmp	r3, #0
   112bc:	beq	112f8 <__assert_fail@plt+0x3ac>
   112c0:	movw	r3, #53576	; 0xd148
   112c4:	movt	r3, #2
   112c8:	ldr	r4, [r3]
   112cc:	movw	r0, #48396	; 0xbd0c
   112d0:	movt	r0, #1
   112d4:	bl	10e50 <gettext@plt>
   112d8:	mov	r1, r0
   112dc:	movw	r3, #53628	; 0xd17c
   112e0:	movt	r3, #2
   112e4:	ldr	r3, [r3]
   112e8:	mov	r2, r3
   112ec:	mov	r0, r4
   112f0:	bl	10e74 <fprintf@plt>
   112f4:	b	1153c <__assert_fail@plt+0x5f0>
   112f8:	movw	r0, #48436	; 0xbd34
   112fc:	movt	r0, #1
   11300:	bl	10e50 <gettext@plt>
   11304:	mov	r2, r0
   11308:	movw	r3, #53628	; 0xd17c
   1130c:	movt	r3, #2
   11310:	ldr	r3, [r3]
   11314:	mov	r1, r3
   11318:	mov	r0, r2
   1131c:	bl	10d0c <printf@plt>
   11320:	movw	r0, #48468	; 0xbd54
   11324:	movt	r0, #1
   11328:	bl	10e50 <gettext@plt>
   1132c:	mov	r2, r0
   11330:	movw	r3, #53588	; 0xd154
   11334:	movt	r3, #2
   11338:	ldr	r3, [r3]
   1133c:	mov	r1, r3
   11340:	mov	r0, r2
   11344:	bl	10cdc <fputs_unlocked@plt>
   11348:	bl	11048 <__assert_fail@plt+0xfc>
   1134c:	bl	11090 <__assert_fail@plt+0x144>
   11350:	movw	r0, #48540	; 0xbd9c
   11354:	movt	r0, #1
   11358:	bl	10e50 <gettext@plt>
   1135c:	mov	r2, r0
   11360:	movw	r3, #53588	; 0xd154
   11364:	movt	r3, #2
   11368:	ldr	r3, [r3]
   1136c:	mov	r1, r3
   11370:	mov	r0, r2
   11374:	bl	10cdc <fputs_unlocked@plt>
   11378:	movw	r0, #48612	; 0xbde4
   1137c:	movt	r0, #1
   11380:	bl	10e50 <gettext@plt>
   11384:	mov	r2, r0
   11388:	movw	r3, #53588	; 0xd154
   1138c:	movt	r3, #2
   11390:	ldr	r3, [r3]
   11394:	mov	r1, r3
   11398:	mov	r0, r2
   1139c:	bl	10cdc <fputs_unlocked@plt>
   113a0:	movw	r0, #48684	; 0xbe2c
   113a4:	movt	r0, #1
   113a8:	bl	10e50 <gettext@plt>
   113ac:	mov	r2, r0
   113b0:	movw	r3, #53588	; 0xd154
   113b4:	movt	r3, #2
   113b8:	ldr	r3, [r3]
   113bc:	mov	r1, r3
   113c0:	mov	r0, r2
   113c4:	bl	10cdc <fputs_unlocked@plt>
   113c8:	movw	r0, #48756	; 0xbe74
   113cc:	movt	r0, #1
   113d0:	bl	10e50 <gettext@plt>
   113d4:	mov	r2, r0
   113d8:	movw	r3, #53588	; 0xd154
   113dc:	movt	r3, #2
   113e0:	ldr	r3, [r3]
   113e4:	mov	r1, r3
   113e8:	mov	r0, r2
   113ec:	bl	10cdc <fputs_unlocked@plt>
   113f0:	movw	r0, #48832	; 0xbec0
   113f4:	movt	r0, #1
   113f8:	bl	10e50 <gettext@plt>
   113fc:	mov	r2, r0
   11400:	movw	r3, #53588	; 0xd154
   11404:	movt	r3, #2
   11408:	ldr	r3, [r3]
   1140c:	mov	r1, r3
   11410:	mov	r0, r2
   11414:	bl	10cdc <fputs_unlocked@plt>
   11418:	movw	r0, #48892	; 0xbefc
   1141c:	movt	r0, #1
   11420:	bl	10e50 <gettext@plt>
   11424:	mov	r2, r0
   11428:	movw	r3, #53588	; 0xd154
   1142c:	movt	r3, #2
   11430:	ldr	r3, [r3]
   11434:	mov	r1, r3
   11438:	mov	r0, r2
   1143c:	bl	10cdc <fputs_unlocked@plt>
   11440:	movw	r0, #48968	; 0xbf48
   11444:	movt	r0, #1
   11448:	bl	10e50 <gettext@plt>
   1144c:	mov	r2, r0
   11450:	movw	r3, #53588	; 0xd154
   11454:	movt	r3, #2
   11458:	ldr	r3, [r3]
   1145c:	mov	r1, r3
   11460:	mov	r0, r2
   11464:	bl	10cdc <fputs_unlocked@plt>
   11468:	movw	r0, #49044	; 0xbf94
   1146c:	movt	r0, #1
   11470:	bl	10e50 <gettext@plt>
   11474:	mov	r2, r0
   11478:	movw	r3, #53588	; 0xd154
   1147c:	movt	r3, #2
   11480:	ldr	r3, [r3]
   11484:	mov	r1, r3
   11488:	mov	r0, r2
   1148c:	bl	10cdc <fputs_unlocked@plt>
   11490:	movw	r0, #49288	; 0xc088
   11494:	movt	r0, #1
   11498:	bl	10e50 <gettext@plt>
   1149c:	mov	r2, r0
   114a0:	movw	r3, #53588	; 0xd154
   114a4:	movt	r3, #2
   114a8:	ldr	r3, [r3]
   114ac:	mov	r1, r3
   114b0:	mov	r0, r2
   114b4:	bl	10cdc <fputs_unlocked@plt>
   114b8:	movw	r0, #49512	; 0xc168
   114bc:	movt	r0, #1
   114c0:	bl	10e50 <gettext@plt>
   114c4:	mov	r2, r0
   114c8:	movw	r3, #53588	; 0xd154
   114cc:	movt	r3, #2
   114d0:	ldr	r3, [r3]
   114d4:	mov	r1, r3
   114d8:	mov	r0, r2
   114dc:	bl	10cdc <fputs_unlocked@plt>
   114e0:	movw	r0, #49560	; 0xc198
   114e4:	movt	r0, #1
   114e8:	bl	10e50 <gettext@plt>
   114ec:	mov	r2, r0
   114f0:	movw	r3, #53588	; 0xd154
   114f4:	movt	r3, #2
   114f8:	ldr	r3, [r3]
   114fc:	mov	r1, r3
   11500:	mov	r0, r2
   11504:	bl	10cdc <fputs_unlocked@plt>
   11508:	movw	r0, #49616	; 0xc1d0
   1150c:	movt	r0, #1
   11510:	bl	10e50 <gettext@plt>
   11514:	mov	r2, r0
   11518:	movw	r3, #53588	; 0xd154
   1151c:	movt	r3, #2
   11520:	ldr	r3, [r3]
   11524:	mov	r1, r3
   11528:	mov	r0, r2
   1152c:	bl	10cdc <fputs_unlocked@plt>
   11530:	movw	r0, #49816	; 0xc298
   11534:	movt	r0, #1
   11538:	bl	110d8 <__assert_fail@plt+0x18c>
   1153c:	ldr	r0, [fp, #-16]
   11540:	bl	10e44 <exit@plt>
   11544:	push	{fp}		; (str fp, [sp, #-4]!)
   11548:	add	fp, sp, #0
   1154c:	sub	sp, sp, #12
   11550:	str	r0, [fp, #-8]
   11554:	ldr	r3, [fp, #-8]
   11558:	add	r2, r3, #2
   1155c:	movw	r3, #21846	; 0x5556
   11560:	movt	r3, #21845	; 0x5555
   11564:	smull	r3, r1, r3, r2
   11568:	asr	r3, r2, #31
   1156c:	sub	r3, r1, r3
   11570:	lsl	r3, r3, #2
   11574:	mov	r0, r3
   11578:	add	sp, fp, #0
   1157c:	pop	{fp}		; (ldr fp, [sp], #4)
   11580:	bx	lr
   11584:	str	fp, [sp, #-8]!
   11588:	str	lr, [sp, #4]
   1158c:	add	fp, sp, #4
   11590:	sub	sp, sp, #8
   11594:	str	r0, [fp, #-8]
   11598:	ldr	r3, [fp, #-8]
   1159c:	add	r3, r3, #4
   115a0:	mov	r0, r3
   115a4:	bl	15608 <__assert_fail@plt+0x46bc>
   115a8:	nop	{0}
   115ac:	sub	sp, fp, #4
   115b0:	ldr	fp, [sp]
   115b4:	add	sp, sp, #4
   115b8:	pop	{pc}		; (ldr pc, [sp], #4)
   115bc:	str	fp, [sp, #-8]!
   115c0:	str	lr, [sp, #4]
   115c4:	add	fp, sp, #4
   115c8:	sub	sp, sp, #32
   115cc:	str	r0, [fp, #-16]
   115d0:	str	r1, [fp, #-20]	; 0xffffffec
   115d4:	str	r2, [fp, #-24]	; 0xffffffe8
   115d8:	str	r3, [fp, #-28]	; 0xffffffe4
   115dc:	ldr	r3, [fp, #-16]
   115e0:	add	r0, r3, #4
   115e4:	ldr	r3, [fp, #4]
   115e8:	str	r3, [sp]
   115ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   115f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   115f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   115f8:	bl	15b88 <__assert_fail@plt+0x4c3c>
   115fc:	mov	r3, r0
   11600:	strb	r3, [fp, #-5]
   11604:	ldr	r3, [fp, #-16]
   11608:	ldr	r2, [r3, #4]
   1160c:	ldr	r3, [fp, #-16]
   11610:	str	r2, [r3]
   11614:	ldrb	r3, [fp, #-5]
   11618:	mov	r0, r3
   1161c:	sub	sp, fp, #4
   11620:	ldr	fp, [sp]
   11624:	add	sp, sp, #4
   11628:	pop	{pc}		; (ldr pc, [sp], #4)
   1162c:	str	fp, [sp, #-8]!
   11630:	str	lr, [sp, #4]
   11634:	add	fp, sp, #4
   11638:	sub	sp, sp, #8
   1163c:	str	r0, [fp, #-8]
   11640:	ldr	r3, [fp, #-8]
   11644:	movw	r2, #4200	; 0x1068
   11648:	str	r2, [r3, #20]
   1164c:	ldr	r3, [fp, #-8]
   11650:	ldr	r3, [r3, #20]
   11654:	mov	r0, r3
   11658:	bl	19e7c <__assert_fail@plt+0x8f30>
   1165c:	mov	r3, r0
   11660:	mov	r2, r3
   11664:	ldr	r3, [fp, #-8]
   11668:	str	r2, [r3, #16]
   1166c:	nop	{0}
   11670:	sub	sp, fp, #4
   11674:	ldr	fp, [sp]
   11678:	add	sp, sp, #4
   1167c:	pop	{pc}		; (ldr pc, [sp], #4)
   11680:	str	fp, [sp, #-8]!
   11684:	str	lr, [sp, #4]
   11688:	add	fp, sp, #4
   1168c:	sub	sp, sp, #8
   11690:	str	r0, [fp, #-8]
   11694:	str	r1, [fp, #-12]
   11698:	ldr	r3, [fp, #-8]
   1169c:	ldr	r3, [r3, #20]
   116a0:	ldr	r2, [fp, #-12]
   116a4:	cmp	r2, r3
   116a8:	ble	116e4 <__assert_fail@plt+0x798>
   116ac:	ldr	r3, [fp, #-12]
   116b0:	lsl	r2, r3, #1
   116b4:	ldr	r3, [fp, #-8]
   116b8:	str	r2, [r3, #20]
   116bc:	ldr	r3, [fp, #-8]
   116c0:	ldr	r0, [r3, #16]
   116c4:	ldr	r3, [fp, #-8]
   116c8:	ldr	r3, [r3, #20]
   116cc:	mov	r2, #1
   116d0:	mov	r1, r3
   116d4:	bl	19d7c <__assert_fail@plt+0x8e30>
   116d8:	mov	r2, r0
   116dc:	ldr	r3, [fp, #-8]
   116e0:	str	r2, [r3, #16]
   116e4:	nop	{0}
   116e8:	sub	sp, fp, #4
   116ec:	ldr	fp, [sp]
   116f0:	add	sp, sp, #4
   116f4:	pop	{pc}		; (ldr pc, [sp], #4)
   116f8:	str	fp, [sp, #-8]!
   116fc:	str	lr, [sp, #4]
   11700:	add	fp, sp, #4
   11704:	sub	sp, sp, #24
   11708:	str	r0, [fp, #-16]
   1170c:	str	r1, [fp, #-20]	; 0xffffffec
   11710:	str	r2, [fp, #-24]	; 0xffffffe8
   11714:	str	r3, [fp, #-28]	; 0xffffffe4
   11718:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1171c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11720:	ldr	r1, [fp, #-20]	; 0xffffffec
   11724:	ldr	r0, [fp, #-16]
   11728:	bl	15148 <__assert_fail@plt+0x41fc>
   1172c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11730:	str	r3, [fp, #-8]
   11734:	b	11780 <__assert_fail@plt+0x834>
   11738:	ldr	r3, [fp, #-8]
   1173c:	ldrb	r3, [r3]
   11740:	cmp	r3, #43	; 0x2b
   11744:	bne	11758 <__assert_fail@plt+0x80c>
   11748:	ldr	r3, [fp, #-8]
   1174c:	mov	r2, #45	; 0x2d
   11750:	strb	r2, [r3]
   11754:	b	11774 <__assert_fail@plt+0x828>
   11758:	ldr	r3, [fp, #-8]
   1175c:	ldrb	r3, [r3]
   11760:	cmp	r3, #47	; 0x2f
   11764:	bne	11774 <__assert_fail@plt+0x828>
   11768:	ldr	r3, [fp, #-8]
   1176c:	mov	r2, #95	; 0x5f
   11770:	strb	r2, [r3]
   11774:	ldr	r3, [fp, #-8]
   11778:	add	r3, r3, #1
   1177c:	str	r3, [fp, #-8]
   11780:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11784:	sub	r2, r3, #1
   11788:	str	r2, [fp, #-28]	; 0xffffffe4
   1178c:	cmp	r3, #0
   11790:	bne	11738 <__assert_fail@plt+0x7ec>
   11794:	nop	{0}
   11798:	sub	sp, fp, #4
   1179c:	ldr	fp, [sp]
   117a0:	add	sp, sp, #4
   117a4:	pop	{pc}		; (ldr pc, [sp], #4)
   117a8:	str	fp, [sp, #-8]!
   117ac:	str	lr, [sp, #4]
   117b0:	add	fp, sp, #4
   117b4:	sub	sp, sp, #8
   117b8:	mov	r3, r0
   117bc:	strb	r3, [fp, #-5]
   117c0:	ldrb	r3, [fp, #-5]
   117c4:	cmp	r3, #45	; 0x2d
   117c8:	beq	11808 <__assert_fail@plt+0x8bc>
   117cc:	ldrb	r3, [fp, #-5]
   117d0:	cmp	r3, #95	; 0x5f
   117d4:	beq	11808 <__assert_fail@plt+0x8bc>
   117d8:	ldrb	r3, [fp, #-5]
   117dc:	cmp	r3, #43	; 0x2b
   117e0:	beq	11810 <__assert_fail@plt+0x8c4>
   117e4:	ldrb	r3, [fp, #-5]
   117e8:	cmp	r3, #47	; 0x2f
   117ec:	beq	11810 <__assert_fail@plt+0x8c4>
   117f0:	ldrb	r3, [fp, #-5]
   117f4:	mov	r0, r3
   117f8:	bl	155ac <__assert_fail@plt+0x4660>
   117fc:	mov	r3, r0
   11800:	cmp	r3, #0
   11804:	beq	11810 <__assert_fail@plt+0x8c4>
   11808:	mov	r3, #1
   1180c:	b	11814 <__assert_fail@plt+0x8c8>
   11810:	mov	r3, #0
   11814:	and	r3, r3, #1
   11818:	uxtb	r3, r3
   1181c:	mov	r0, r3
   11820:	sub	sp, fp, #4
   11824:	ldr	fp, [sp]
   11828:	add	sp, sp, #4
   1182c:	pop	{pc}		; (ldr pc, [sp], #4)
   11830:	str	fp, [sp, #-8]!
   11834:	str	lr, [sp, #4]
   11838:	add	fp, sp, #4
   1183c:	sub	sp, sp, #8
   11840:	str	r0, [fp, #-8]
   11844:	ldr	r3, [fp, #-8]
   11848:	add	r3, r3, #4
   1184c:	mov	r0, r3
   11850:	bl	15608 <__assert_fail@plt+0x46bc>
   11854:	ldr	r0, [fp, #-8]
   11858:	bl	1162c <__assert_fail@plt+0x6e0>
   1185c:	nop	{0}
   11860:	sub	sp, fp, #4
   11864:	ldr	fp, [sp]
   11868:	add	sp, sp, #4
   1186c:	pop	{pc}		; (ldr pc, [sp], #4)
   11870:	str	fp, [sp, #-8]!
   11874:	str	lr, [sp, #4]
   11878:	add	fp, sp, #4
   1187c:	sub	sp, sp, #40	; 0x28
   11880:	str	r0, [fp, #-24]	; 0xffffffe8
   11884:	str	r1, [fp, #-28]	; 0xffffffe4
   11888:	str	r2, [fp, #-32]	; 0xffffffe0
   1188c:	str	r3, [fp, #-36]	; 0xffffffdc
   11890:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11894:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11898:	bl	11680 <__assert_fail@plt+0x734>
   1189c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118a0:	ldr	r3, [r3, #16]
   118a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   118a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   118ac:	mov	r0, r3
   118b0:	bl	10d48 <memcpy@plt>
   118b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   118b8:	str	r3, [fp, #-8]
   118bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118c0:	ldr	r3, [r3, #16]
   118c4:	str	r3, [fp, #-12]
   118c8:	b	11948 <__assert_fail@plt+0x9fc>
   118cc:	ldr	r3, [fp, #-12]
   118d0:	ldrb	r3, [r3]
   118d4:	cmp	r3, #43	; 0x2b
   118d8:	beq	118ec <__assert_fail@plt+0x9a0>
   118dc:	ldr	r3, [fp, #-12]
   118e0:	ldrb	r3, [r3]
   118e4:	cmp	r3, #47	; 0x2f
   118e8:	bne	11900 <__assert_fail@plt+0x9b4>
   118ec:	ldr	r3, [fp, #4]
   118f0:	mov	r2, #0
   118f4:	str	r2, [r3]
   118f8:	mov	r3, #0
   118fc:	b	1199c <__assert_fail@plt+0xa50>
   11900:	ldr	r3, [fp, #-12]
   11904:	ldrb	r3, [r3]
   11908:	cmp	r3, #45	; 0x2d
   1190c:	bne	11920 <__assert_fail@plt+0x9d4>
   11910:	ldr	r3, [fp, #-12]
   11914:	mov	r2, #43	; 0x2b
   11918:	strb	r2, [r3]
   1191c:	b	1193c <__assert_fail@plt+0x9f0>
   11920:	ldr	r3, [fp, #-12]
   11924:	ldrb	r3, [r3]
   11928:	cmp	r3, #95	; 0x5f
   1192c:	bne	1193c <__assert_fail@plt+0x9f0>
   11930:	ldr	r3, [fp, #-12]
   11934:	mov	r2, #47	; 0x2f
   11938:	strb	r2, [r3]
   1193c:	ldr	r3, [fp, #-12]
   11940:	add	r3, r3, #1
   11944:	str	r3, [fp, #-12]
   11948:	ldr	r3, [fp, #-8]
   1194c:	sub	r2, r3, #1
   11950:	str	r2, [fp, #-8]
   11954:	cmp	r3, #0
   11958:	bne	118cc <__assert_fail@plt+0x980>
   1195c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11960:	add	r0, r3, #4
   11964:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11968:	ldr	r1, [r3, #16]
   1196c:	ldr	r3, [fp, #4]
   11970:	str	r3, [sp]
   11974:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11978:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1197c:	bl	15b88 <__assert_fail@plt+0x4c3c>
   11980:	mov	r3, r0
   11984:	strb	r3, [fp, #-13]
   11988:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1198c:	ldr	r2, [r3, #4]
   11990:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11994:	str	r2, [r3]
   11998:	ldrb	r3, [fp, #-13]
   1199c:	mov	r0, r3
   119a0:	sub	sp, fp, #4
   119a4:	ldr	fp, [sp]
   119a8:	add	sp, sp, #4
   119ac:	pop	{pc}		; (ldr pc, [sp], #4)
   119b0:	push	{fp}		; (str fp, [sp, #-4]!)
   119b4:	add	fp, sp, #0
   119b8:	sub	sp, sp, #12
   119bc:	str	r0, [fp, #-8]
   119c0:	ldr	r3, [fp, #-8]
   119c4:	add	r2, r3, #4
   119c8:	movw	r3, #26215	; 0x6667
   119cc:	movt	r3, #26214	; 0x6666
   119d0:	smull	r1, r3, r3, r2
   119d4:	asr	r1, r3, #1
   119d8:	asr	r3, r2, #31
   119dc:	sub	r3, r1, r3
   119e0:	lsl	r3, r3, #3
   119e4:	mov	r0, r3
   119e8:	add	sp, fp, #0
   119ec:	pop	{fp}		; (ldr fp, [sp], #4)
   119f0:	bx	lr
   119f4:	str	fp, [sp, #-8]!
   119f8:	str	lr, [sp, #4]
   119fc:	add	fp, sp, #4
   11a00:	sub	sp, sp, #8
   11a04:	str	r0, [fp, #-8]
   11a08:	ldr	r3, [fp, #-8]
   11a0c:	add	r3, r3, #4
   11a10:	mov	r0, r3
   11a14:	bl	143a0 <__assert_fail@plt+0x3454>
   11a18:	nop	{0}
   11a1c:	sub	sp, fp, #4
   11a20:	ldr	fp, [sp]
   11a24:	add	sp, sp, #4
   11a28:	pop	{pc}		; (ldr pc, [sp], #4)
   11a2c:	str	fp, [sp, #-8]!
   11a30:	str	lr, [sp, #4]
   11a34:	add	fp, sp, #4
   11a38:	sub	sp, sp, #32
   11a3c:	str	r0, [fp, #-16]
   11a40:	str	r1, [fp, #-20]	; 0xffffffec
   11a44:	str	r2, [fp, #-24]	; 0xffffffe8
   11a48:	str	r3, [fp, #-28]	; 0xffffffe4
   11a4c:	ldr	r3, [fp, #-16]
   11a50:	add	r0, r3, #4
   11a54:	ldr	r3, [fp, #4]
   11a58:	str	r3, [sp]
   11a5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a60:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11a64:	ldr	r1, [fp, #-20]	; 0xffffffec
   11a68:	bl	14c0c <__assert_fail@plt+0x3cc0>
   11a6c:	mov	r3, r0
   11a70:	strb	r3, [fp, #-5]
   11a74:	ldr	r3, [fp, #-16]
   11a78:	ldr	r2, [r3, #4]
   11a7c:	ldr	r3, [fp, #-16]
   11a80:	str	r2, [r3]
   11a84:	ldrb	r3, [fp, #-5]
   11a88:	mov	r0, r3
   11a8c:	sub	sp, fp, #4
   11a90:	ldr	fp, [sp]
   11a94:	add	sp, sp, #4
   11a98:	pop	{pc}		; (ldr pc, [sp], #4)
   11a9c:	push	{fp}		; (str fp, [sp, #-4]!)
   11aa0:	add	fp, sp, #0
   11aa4:	sub	sp, sp, #12
   11aa8:	mov	r3, r0
   11aac:	strb	r3, [fp, #-5]
   11ab0:	ldrb	r3, [fp, #-5]
   11ab4:	cmp	r3, #47	; 0x2f
   11ab8:	bls	11ac8 <__assert_fail@plt+0xb7c>
   11abc:	ldrb	r3, [fp, #-5]
   11ac0:	cmp	r3, #57	; 0x39
   11ac4:	bls	11ae0 <__assert_fail@plt+0xb94>
   11ac8:	ldrb	r3, [fp, #-5]
   11acc:	cmp	r3, #64	; 0x40
   11ad0:	bls	11ae8 <__assert_fail@plt+0xb9c>
   11ad4:	ldrb	r3, [fp, #-5]
   11ad8:	cmp	r3, #86	; 0x56
   11adc:	bhi	11ae8 <__assert_fail@plt+0xb9c>
   11ae0:	mov	r3, #1
   11ae4:	b	11aec <__assert_fail@plt+0xba0>
   11ae8:	mov	r3, #0
   11aec:	and	r3, r3, #1
   11af0:	uxtb	r3, r3
   11af4:	mov	r0, r3
   11af8:	add	sp, fp, #0
   11afc:	pop	{fp}		; (ldr fp, [sp], #4)
   11b00:	bx	lr
   11b04:	str	fp, [sp, #-8]!
   11b08:	str	lr, [sp, #4]
   11b0c:	add	fp, sp, #4
   11b10:	sub	sp, sp, #24
   11b14:	str	r0, [fp, #-16]
   11b18:	str	r1, [fp, #-20]	; 0xffffffec
   11b1c:	str	r2, [fp, #-24]	; 0xffffffe8
   11b20:	str	r3, [fp, #-28]	; 0xffffffe4
   11b24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b28:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11b2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   11b30:	ldr	r0, [fp, #-16]
   11b34:	bl	13cb4 <__assert_fail@plt+0x2d68>
   11b38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b3c:	str	r3, [fp, #-8]
   11b40:	b	11bb0 <__assert_fail@plt+0xc64>
   11b44:	ldr	r3, [fp, #-8]
   11b48:	ldrb	r3, [r3]
   11b4c:	cmp	r3, #49	; 0x31
   11b50:	bls	11b64 <__assert_fail@plt+0xc18>
   11b54:	ldr	r3, [fp, #-8]
   11b58:	ldrb	r3, [r3]
   11b5c:	cmp	r3, #90	; 0x5a
   11b60:	bls	11b84 <__assert_fail@plt+0xc38>
   11b64:	movw	r3, #50448	; 0xc510
   11b68:	movt	r3, #1
   11b6c:	mov	r2, #452	; 0x1c4
   11b70:	movw	r1, #49912	; 0xc2f8
   11b74:	movt	r1, #1
   11b78:	movw	r0, #49928	; 0xc308
   11b7c:	movt	r0, #1
   11b80:	bl	10f4c <__assert_fail@plt>
   11b84:	ldr	r3, [fp, #-8]
   11b88:	ldrb	r3, [r3]
   11b8c:	sub	r2, r3, #50	; 0x32
   11b90:	movw	r3, #49824	; 0xc2a0
   11b94:	movt	r3, #1
   11b98:	ldrb	r2, [r3, r2]
   11b9c:	ldr	r3, [fp, #-8]
   11ba0:	strb	r2, [r3]
   11ba4:	ldr	r3, [fp, #-8]
   11ba8:	add	r3, r3, #1
   11bac:	str	r3, [fp, #-8]
   11bb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11bb4:	sub	r2, r3, #1
   11bb8:	str	r2, [fp, #-28]	; 0xffffffe4
   11bbc:	cmp	r3, #0
   11bc0:	bne	11b44 <__assert_fail@plt+0xbf8>
   11bc4:	nop	{0}
   11bc8:	sub	sp, fp, #4
   11bcc:	ldr	fp, [sp]
   11bd0:	add	sp, sp, #4
   11bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bd8:	str	fp, [sp, #-8]!
   11bdc:	str	lr, [sp, #4]
   11be0:	add	fp, sp, #4
   11be4:	sub	sp, sp, #8
   11be8:	str	r0, [fp, #-8]
   11bec:	ldr	r3, [fp, #-8]
   11bf0:	add	r3, r3, #4
   11bf4:	mov	r0, r3
   11bf8:	bl	143a0 <__assert_fail@plt+0x3454>
   11bfc:	ldr	r0, [fp, #-8]
   11c00:	bl	1162c <__assert_fail@plt+0x6e0>
   11c04:	nop	{0}
   11c08:	sub	sp, fp, #4
   11c0c:	ldr	fp, [sp]
   11c10:	add	sp, sp, #4
   11c14:	pop	{pc}		; (ldr pc, [sp], #4)
   11c18:	str	fp, [sp, #-8]!
   11c1c:	str	lr, [sp, #4]
   11c20:	add	fp, sp, #4
   11c24:	sub	sp, sp, #40	; 0x28
   11c28:	str	r0, [fp, #-24]	; 0xffffffe8
   11c2c:	str	r1, [fp, #-28]	; 0xffffffe4
   11c30:	str	r2, [fp, #-32]	; 0xffffffe0
   11c34:	str	r3, [fp, #-36]	; 0xffffffdc
   11c38:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11c3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11c40:	bl	11680 <__assert_fail@plt+0x734>
   11c44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c48:	str	r3, [fp, #-8]
   11c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c50:	ldr	r3, [r3, #16]
   11c54:	str	r3, [fp, #-12]
   11c58:	b	11cc4 <__assert_fail@plt+0xd78>
   11c5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11c60:	ldrb	r3, [r3]
   11c64:	mov	r0, r3
   11c68:	bl	11a9c <__assert_fail@plt+0xb50>
   11c6c:	mov	r3, r0
   11c70:	cmp	r3, #0
   11c74:	beq	11c9c <__assert_fail@plt+0xd50>
   11c78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11c7c:	ldrb	r3, [r3]
   11c80:	sub	r2, r3, #48	; 0x30
   11c84:	movw	r3, #49868	; 0xc2cc
   11c88:	movt	r3, #1
   11c8c:	ldrb	r2, [r3, r2]
   11c90:	ldr	r3, [fp, #-12]
   11c94:	strb	r2, [r3]
   11c98:	b	11cac <__assert_fail@plt+0xd60>
   11c9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ca0:	ldrb	r2, [r3]
   11ca4:	ldr	r3, [fp, #-12]
   11ca8:	strb	r2, [r3]
   11cac:	ldr	r3, [fp, #-12]
   11cb0:	add	r3, r3, #1
   11cb4:	str	r3, [fp, #-12]
   11cb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11cbc:	add	r3, r3, #1
   11cc0:	str	r3, [fp, #-28]	; 0xffffffe4
   11cc4:	ldr	r3, [fp, #-8]
   11cc8:	sub	r2, r3, #1
   11ccc:	str	r2, [fp, #-8]
   11cd0:	cmp	r3, #0
   11cd4:	bne	11c5c <__assert_fail@plt+0xd10>
   11cd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11cdc:	add	r0, r3, #4
   11ce0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ce4:	ldr	r1, [r3, #16]
   11ce8:	ldr	r3, [fp, #4]
   11cec:	str	r3, [sp]
   11cf0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11cf4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11cf8:	bl	14c0c <__assert_fail@plt+0x3cc0>
   11cfc:	mov	r3, r0
   11d00:	strb	r3, [fp, #-13]
   11d04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11d08:	ldr	r2, [r3, #4]
   11d0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11d10:	str	r2, [r3]
   11d14:	ldrb	r3, [fp, #-13]
   11d18:	mov	r0, r3
   11d1c:	sub	sp, fp, #4
   11d20:	ldr	fp, [sp]
   11d24:	add	sp, sp, #4
   11d28:	pop	{pc}		; (ldr pc, [sp], #4)
   11d2c:	push	{fp}		; (str fp, [sp, #-4]!)
   11d30:	add	fp, sp, #0
   11d34:	sub	sp, sp, #12
   11d38:	mov	r3, r0
   11d3c:	strb	r3, [fp, #-5]
   11d40:	ldrb	r3, [fp, #-5]
   11d44:	cmp	r3, #47	; 0x2f
   11d48:	bls	11d58 <__assert_fail@plt+0xe0c>
   11d4c:	ldrb	r3, [fp, #-5]
   11d50:	cmp	r3, #57	; 0x39
   11d54:	bls	11d70 <__assert_fail@plt+0xe24>
   11d58:	ldrb	r3, [fp, #-5]
   11d5c:	cmp	r3, #64	; 0x40
   11d60:	bls	11d78 <__assert_fail@plt+0xe2c>
   11d64:	ldrb	r3, [fp, #-5]
   11d68:	cmp	r3, #70	; 0x46
   11d6c:	bhi	11d78 <__assert_fail@plt+0xe2c>
   11d70:	mov	r3, #1
   11d74:	b	11d7c <__assert_fail@plt+0xe30>
   11d78:	mov	r3, #0
   11d7c:	and	r3, r3, #1
   11d80:	uxtb	r3, r3
   11d84:	mov	r0, r3
   11d88:	add	sp, fp, #0
   11d8c:	pop	{fp}		; (ldr fp, [sp], #4)
   11d90:	bx	lr
   11d94:	push	{fp}		; (str fp, [sp, #-4]!)
   11d98:	add	fp, sp, #0
   11d9c:	sub	sp, sp, #12
   11da0:	str	r0, [fp, #-8]
   11da4:	ldr	r3, [fp, #-8]
   11da8:	lsl	r3, r3, #1
   11dac:	mov	r0, r3
   11db0:	add	sp, fp, #0
   11db4:	pop	{fp}		; (ldr fp, [sp], #4)
   11db8:	bx	lr
   11dbc:	push	{fp}		; (str fp, [sp, #-4]!)
   11dc0:	add	fp, sp, #0
   11dc4:	sub	sp, sp, #28
   11dc8:	str	r0, [fp, #-16]
   11dcc:	str	r1, [fp, #-20]	; 0xffffffec
   11dd0:	str	r2, [fp, #-24]	; 0xffffffe8
   11dd4:	str	r3, [fp, #-28]	; 0xffffffe4
   11dd8:	b	11e44 <__assert_fail@plt+0xef8>
   11ddc:	ldr	r3, [fp, #-16]
   11de0:	ldrb	r3, [r3]
   11de4:	strb	r3, [fp, #-5]
   11de8:	ldrb	r3, [fp, #-5]
   11dec:	lsr	r3, r3, #4
   11df0:	uxtb	r3, r3
   11df4:	mov	r1, r3
   11df8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11dfc:	add	r3, r2, #1
   11e00:	str	r3, [fp, #-24]	; 0xffffffe8
   11e04:	movw	r3, #49956	; 0xc324
   11e08:	movt	r3, #1
   11e0c:	ldrb	r3, [r3, r1]
   11e10:	strb	r3, [r2]
   11e14:	ldrb	r3, [fp, #-5]
   11e18:	and	r1, r3, #15
   11e1c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11e20:	add	r3, r2, #1
   11e24:	str	r3, [fp, #-24]	; 0xffffffe8
   11e28:	movw	r3, #49956	; 0xc324
   11e2c:	movt	r3, #1
   11e30:	ldrb	r3, [r3, r1]
   11e34:	strb	r3, [r2]
   11e38:	ldr	r3, [fp, #-16]
   11e3c:	add	r3, r3, #1
   11e40:	str	r3, [fp, #-16]
   11e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e48:	sub	r2, r3, #1
   11e4c:	str	r2, [fp, #-20]	; 0xffffffec
   11e50:	cmp	r3, #0
   11e54:	bne	11ddc <__assert_fail@plt+0xe90>
   11e58:	nop	{0}
   11e5c:	add	sp, fp, #0
   11e60:	pop	{fp}		; (ldr fp, [sp], #4)
   11e64:	bx	lr
   11e68:	str	fp, [sp, #-8]!
   11e6c:	str	lr, [sp, #4]
   11e70:	add	fp, sp, #4
   11e74:	sub	sp, sp, #8
   11e78:	str	r0, [fp, #-8]
   11e7c:	ldr	r0, [fp, #-8]
   11e80:	bl	1162c <__assert_fail@plt+0x6e0>
   11e84:	ldr	r3, [fp, #-8]
   11e88:	mov	r2, #0
   11e8c:	strb	r2, [r3, #5]
   11e90:	ldr	r3, [fp, #-8]
   11e94:	mov	r2, #1
   11e98:	str	r2, [r3]
   11e9c:	nop	{0}
   11ea0:	sub	sp, fp, #4
   11ea4:	ldr	fp, [sp]
   11ea8:	add	sp, sp, #4
   11eac:	pop	{pc}		; (ldr pc, [sp], #4)
   11eb0:	push	{fp}		; (str fp, [sp, #-4]!)
   11eb4:	add	fp, sp, #0
   11eb8:	sub	sp, sp, #28
   11ebc:	str	r0, [fp, #-16]
   11ec0:	str	r1, [fp, #-20]	; 0xffffffec
   11ec4:	str	r2, [fp, #-24]	; 0xffffffe8
   11ec8:	str	r3, [fp, #-28]	; 0xffffffe4
   11ecc:	mov	r3, #1
   11ed0:	strb	r3, [fp, #-9]
   11ed4:	ldr	r3, [fp, #4]
   11ed8:	mov	r2, #0
   11edc:	str	r2, [r3]
   11ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ee4:	cmp	r3, #0
   11ee8:	bne	12048 <__assert_fail@plt+0x10fc>
   11eec:	ldr	r3, [fp, #-16]
   11ef0:	ldrb	r3, [r3, #5]
   11ef4:	cmp	r3, #0
   11ef8:	movne	r3, #1
   11efc:	moveq	r3, #0
   11f00:	uxtb	r3, r3
   11f04:	eor	r3, r3, #1
   11f08:	uxtb	r3, r3
   11f0c:	and	r3, r3, #1
   11f10:	uxtb	r3, r3
   11f14:	b	12060 <__assert_fail@plt+0x1114>
   11f18:	ldrb	r3, [fp, #-9]
   11f1c:	cmp	r3, #0
   11f20:	beq	11f44 <__assert_fail@plt+0xff8>
   11f24:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f28:	ldrb	r3, [r3]
   11f2c:	cmp	r3, #10
   11f30:	bne	11f44 <__assert_fail@plt+0xff8>
   11f34:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f38:	add	r3, r3, #1
   11f3c:	str	r3, [fp, #-20]	; 0xffffffec
   11f40:	b	12048 <__assert_fail@plt+0x10fc>
   11f44:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f48:	add	r2, r3, #1
   11f4c:	str	r2, [fp, #-20]	; 0xffffffec
   11f50:	ldrb	r3, [r3]
   11f54:	str	r3, [fp, #-8]
   11f58:	ldr	r3, [fp, #-8]
   11f5c:	cmp	r3, #47	; 0x2f
   11f60:	ble	11f80 <__assert_fail@plt+0x1034>
   11f64:	ldr	r3, [fp, #-8]
   11f68:	cmp	r3, #57	; 0x39
   11f6c:	bgt	11f80 <__assert_fail@plt+0x1034>
   11f70:	ldr	r3, [fp, #-8]
   11f74:	sub	r3, r3, #48	; 0x30
   11f78:	str	r3, [fp, #-8]
   11f7c:	b	11fb0 <__assert_fail@plt+0x1064>
   11f80:	ldr	r3, [fp, #-8]
   11f84:	cmp	r3, #64	; 0x40
   11f88:	ble	11fa8 <__assert_fail@plt+0x105c>
   11f8c:	ldr	r3, [fp, #-8]
   11f90:	cmp	r3, #70	; 0x46
   11f94:	bgt	11fa8 <__assert_fail@plt+0x105c>
   11f98:	ldr	r3, [fp, #-8]
   11f9c:	sub	r3, r3, #55	; 0x37
   11fa0:	str	r3, [fp, #-8]
   11fa4:	b	11fb0 <__assert_fail@plt+0x1064>
   11fa8:	mov	r3, #0
   11fac:	b	12060 <__assert_fail@plt+0x1114>
   11fb0:	ldr	r3, [fp, #-16]
   11fb4:	ldrb	r3, [r3, #5]
   11fb8:	cmp	r3, #0
   11fbc:	beq	12008 <__assert_fail@plt+0x10bc>
   11fc0:	ldr	r3, [fp, #-16]
   11fc4:	ldrb	r3, [r3, #4]
   11fc8:	lsl	r3, r3, #4
   11fcc:	uxtb	r1, r3
   11fd0:	ldr	r3, [fp, #-8]
   11fd4:	uxtb	r2, r3
   11fd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11fdc:	add	r0, r3, #1
   11fe0:	str	r0, [fp, #-28]	; 0xffffffe4
   11fe4:	add	r2, r1, r2
   11fe8:	uxtb	r2, r2
   11fec:	strb	r2, [r3]
   11ff0:	ldr	r3, [fp, #4]
   11ff4:	ldr	r3, [r3]
   11ff8:	add	r2, r3, #1
   11ffc:	ldr	r3, [fp, #4]
   12000:	str	r2, [r3]
   12004:	b	12018 <__assert_fail@plt+0x10cc>
   12008:	ldr	r3, [fp, #-8]
   1200c:	uxtb	r2, r3
   12010:	ldr	r3, [fp, #-16]
   12014:	strb	r2, [r3, #4]
   12018:	ldr	r3, [fp, #-16]
   1201c:	ldrb	r3, [r3, #5]
   12020:	cmp	r3, #0
   12024:	movne	r3, #1
   12028:	moveq	r3, #0
   1202c:	uxtb	r3, r3
   12030:	eor	r3, r3, #1
   12034:	uxtb	r3, r3
   12038:	and	r3, r3, #1
   1203c:	uxtb	r2, r3
   12040:	ldr	r3, [fp, #-16]
   12044:	strb	r2, [r3, #5]
   12048:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1204c:	sub	r2, r3, #1
   12050:	str	r2, [fp, #-24]	; 0xffffffe8
   12054:	cmp	r3, #0
   12058:	bne	11f18 <__assert_fail@plt+0xfcc>
   1205c:	mov	r3, #1
   12060:	mov	r0, r3
   12064:	add	sp, fp, #0
   12068:	pop	{fp}		; (ldr fp, [sp], #4)
   1206c:	bx	lr
   12070:	push	{fp}		; (str fp, [sp, #-4]!)
   12074:	add	fp, sp, #0
   12078:	sub	sp, sp, #20
   1207c:	str	r0, [fp, #-16]
   12080:	ldr	r2, [fp, #-16]
   12084:	mov	r3, r2
   12088:	lsl	r3, r3, #2
   1208c:	add	r3, r3, r2
   12090:	add	r2, r3, #3
   12094:	cmp	r3, #0
   12098:	movlt	r3, r2
   1209c:	movge	r3, r3
   120a0:	asr	r3, r3, #2
   120a4:	str	r3, [fp, #-8]
   120a8:	ldr	r3, [fp, #-8]
   120ac:	mov	r0, r3
   120b0:	add	sp, fp, #0
   120b4:	pop	{fp}		; (ldr fp, [sp], #4)
   120b8:	bx	lr
   120bc:	str	fp, [sp, #-8]!
   120c0:	str	lr, [sp, #4]
   120c4:	add	fp, sp, #4
   120c8:	sub	sp, sp, #8
   120cc:	mov	r3, r0
   120d0:	strb	r3, [fp, #-5]
   120d4:	ldrb	r3, [fp, #-5]
   120d8:	mov	r0, r3
   120dc:	bl	15f0c <__assert_fail@plt+0x4fc0>
   120e0:	mov	r3, r0
   120e4:	cmp	r3, #0
   120e8:	bne	1210c <__assert_fail@plt+0x11c0>
   120ec:	ldrb	r3, [fp, #-5]
   120f0:	mov	r1, r3
   120f4:	movw	r0, #49972	; 0xc334
   120f8:	movt	r0, #1
   120fc:	bl	10e68 <strchr@plt>
   12100:	mov	r3, r0
   12104:	cmp	r3, #0
   12108:	beq	12114 <__assert_fail@plt+0x11c8>
   1210c:	mov	r3, #1
   12110:	b	12118 <__assert_fail@plt+0x11cc>
   12114:	mov	r3, #0
   12118:	and	r3, r3, #1
   1211c:	uxtb	r3, r3
   12120:	mov	r0, r3
   12124:	sub	sp, fp, #4
   12128:	ldr	fp, [sp]
   1212c:	add	sp, sp, #4
   12130:	pop	{pc}		; (ldr pc, [sp], #4)
   12134:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12138:	strd	r6, [sp, #8]
   1213c:	strd	r8, [sp, #16]
   12140:	str	fp, [sp, #24]
   12144:	str	lr, [sp, #28]
   12148:	add	fp, sp, #28
   1214c:	sub	sp, sp, #48	; 0x30
   12150:	str	r0, [fp, #-64]	; 0xffffffc0
   12154:	str	r1, [fp, #-68]	; 0xffffffbc
   12158:	str	r2, [fp, #-72]	; 0xffffffb8
   1215c:	str	r3, [fp, #-76]	; 0xffffffb4
   12160:	mov	r3, #0
   12164:	str	r3, [fp, #-32]	; 0xffffffe0
   12168:	mov	r3, #0
   1216c:	str	r3, [fp, #-36]	; 0xffffffdc
   12170:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12174:	cmp	r3, #0
   12178:	bne	121a8 <__assert_fail@plt+0x125c>
   1217c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12180:	cmp	r3, #0
   12184:	beq	12310 <__assert_fail@plt+0x13c4>
   12188:	movw	r0, #50084	; 0xc3a4
   1218c:	movt	r0, #1
   12190:	bl	10e50 <gettext@plt>
   12194:	mov	r3, r0
   12198:	mov	r2, r3
   1219c:	mov	r1, #0
   121a0:	mov	r0, #1
   121a4:	bl	10df0 <error@plt>
   121a8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   121ac:	add	r3, r2, #1
   121b0:	str	r3, [fp, #-64]	; 0xffffffc0
   121b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121b8:	add	r1, r3, #1
   121bc:	str	r1, [fp, #-32]	; 0xffffffe0
   121c0:	ldrb	r2, [r2]
   121c4:	sub	r1, fp, #28
   121c8:	add	r3, r1, r3
   121cc:	strb	r2, [r3, #-28]	; 0xffffffe4
   121d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   121d4:	sub	r3, r3, #1
   121d8:	str	r3, [fp, #-68]	; 0xffffffbc
   121dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121e0:	cmp	r3, #4
   121e4:	bne	12170 <__assert_fail@plt+0x1224>
   121e8:	ldrb	r3, [fp, #-56]	; 0xffffffc8
   121ec:	uxtb	r2, r3
   121f0:	mov	r3, #0
   121f4:	strd	r2, [fp, #-44]	; 0xffffffd4
   121f8:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   121fc:	mov	r2, #0
   12200:	mov	r3, #0
   12204:	lsl	r3, r1, #24
   12208:	orr	r3, r3, r0, lsr #8
   1220c:	lsl	r2, r0, #24
   12210:	ldrb	r1, [fp, #-55]	; 0xffffffc9
   12214:	lsl	r1, r1, #16
   12218:	mov	r0, r1
   1221c:	asr	r1, r0, #31
   12220:	adds	r4, r2, r0
   12224:	adc	r5, r3, r1
   12228:	ldrb	r3, [fp, #-54]	; 0xffffffca
   1222c:	lsl	r3, r3, #8
   12230:	mov	r2, r3
   12234:	asr	r3, r2, #31
   12238:	adds	r6, r4, r2
   1223c:	adc	r7, r5, r3
   12240:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   12244:	uxtb	r2, r3
   12248:	mov	r3, #0
   1224c:	adds	r8, r6, r2
   12250:	adc	r9, r7, r3
   12254:	strd	r8, [fp, #-44]	; 0xffffffd4
   12258:	mov	r3, #4
   1225c:	str	r3, [fp, #-48]	; 0xffffffd0
   12260:	b	122e0 <__assert_fail@plt+0x1394>
   12264:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   12268:	mov	r2, #85	; 0x55
   1226c:	mov	r3, #0
   12270:	bl	1b6ec <__assert_fail@plt+0xa7a0>
   12274:	mov	r3, r2
   12278:	str	r3, [fp, #-52]	; 0xffffffcc
   1227c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   12280:	mov	r2, #85	; 0x55
   12284:	mov	r3, #0
   12288:	bl	1b6ec <__assert_fail@plt+0xa7a0>
   1228c:	mov	r2, r0
   12290:	mov	r3, r1
   12294:	strd	r2, [fp, #-44]	; 0xffffffd4
   12298:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1229c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   122a0:	add	r3, r2, r3
   122a4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   122a8:	cmp	r2, r3
   122ac:	ble	122d4 <__assert_fail@plt+0x1388>
   122b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   122b4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   122b8:	add	r2, r2, r3
   122bc:	movw	r3, #49996	; 0xc34c
   122c0:	movt	r3, #1
   122c4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   122c8:	add	r3, r3, r1
   122cc:	ldrb	r3, [r3]
   122d0:	strb	r3, [r2]
   122d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   122d8:	sub	r3, r3, #1
   122dc:	str	r3, [fp, #-48]	; 0xffffffd0
   122e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   122e4:	cmp	r3, #0
   122e8:	bge	12264 <__assert_fail@plt+0x1318>
   122ec:	ldr	r3, [fp, #-72]	; 0xffffffb8
   122f0:	add	r3, r3, #5
   122f4:	str	r3, [fp, #-72]	; 0xffffffb8
   122f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   122fc:	add	r3, r3, #5
   12300:	str	r3, [fp, #-36]	; 0xffffffdc
   12304:	mov	r3, #0
   12308:	str	r3, [fp, #-32]	; 0xffffffe0
   1230c:	b	12170 <__assert_fail@plt+0x1224>
   12310:	nop	{0}
   12314:	sub	sp, fp, #28
   12318:	ldrd	r4, [sp]
   1231c:	ldrd	r6, [sp, #8]
   12320:	ldrd	r8, [sp, #16]
   12324:	ldr	fp, [sp, #24]
   12328:	add	sp, sp, #28
   1232c:	pop	{pc}		; (ldr pc, [sp], #4)
   12330:	str	fp, [sp, #-8]!
   12334:	str	lr, [sp, #4]
   12338:	add	fp, sp, #4
   1233c:	sub	sp, sp, #8
   12340:	str	r0, [fp, #-8]
   12344:	ldr	r0, [fp, #-8]
   12348:	bl	1162c <__assert_fail@plt+0x6e0>
   1234c:	ldr	r3, [fp, #-8]
   12350:	mov	r2, #0
   12354:	str	r2, [r3, #4]
   12358:	ldr	r3, [fp, #-8]
   1235c:	mov	r2, #1
   12360:	str	r2, [r3]
   12364:	nop	{0}
   12368:	sub	sp, fp, #4
   1236c:	ldr	fp, [sp]
   12370:	add	sp, sp, #4
   12374:	pop	{pc}		; (ldr pc, [sp], #4)
   12378:	strd	r4, [sp, #-20]!	; 0xffffffec
   1237c:	strd	r6, [sp, #8]
   12380:	str	fp, [sp, #16]
   12384:	add	fp, sp, #16
   12388:	sub	sp, sp, #36	; 0x24
   1238c:	str	r0, [fp, #-40]	; 0xffffffd8
   12390:	str	r1, [fp, #-44]	; 0xffffffd4
   12394:	str	r2, [fp, #-48]	; 0xffffffd0
   12398:	str	r3, [fp, #-52]	; 0xffffffcc
   1239c:	mov	r3, #1
   123a0:	strb	r3, [fp, #-21]	; 0xffffffeb
   123a4:	ldr	r3, [fp, #4]
   123a8:	mov	r2, #0
   123ac:	str	r2, [r3]
   123b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   123b4:	cmp	r3, #0
   123b8:	bne	1264c <__assert_fail@plt+0x1700>
   123bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   123c0:	ldr	r3, [r3, #4]
   123c4:	cmp	r3, #0
   123c8:	ble	123d4 <__assert_fail@plt+0x1488>
   123cc:	mov	r3, #0
   123d0:	b	12674 <__assert_fail@plt+0x1728>
   123d4:	mov	r3, #1
   123d8:	b	12674 <__assert_fail@plt+0x1728>
   123dc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   123e0:	cmp	r3, #0
   123e4:	beq	12408 <__assert_fail@plt+0x14bc>
   123e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   123ec:	ldrb	r3, [r3]
   123f0:	cmp	r3, #10
   123f4:	bne	12408 <__assert_fail@plt+0x14bc>
   123f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   123fc:	add	r3, r3, #1
   12400:	str	r3, [fp, #-44]	; 0xffffffd4
   12404:	b	1264c <__assert_fail@plt+0x1700>
   12408:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1240c:	ldrb	r3, [r3]
   12410:	strb	r3, [fp, #-22]	; 0xffffffea
   12414:	ldrb	r3, [fp, #-22]	; 0xffffffea
   12418:	cmp	r3, #32
   1241c:	bls	124a8 <__assert_fail@plt+0x155c>
   12420:	ldrb	r3, [fp, #-22]	; 0xffffffea
   12424:	cmp	r3, #125	; 0x7d
   12428:	bhi	124a8 <__assert_fail@plt+0x155c>
   1242c:	ldrb	r3, [fp, #-22]	; 0xffffffea
   12430:	sub	r2, r3, #33	; 0x21
   12434:	movw	r3, #50140	; 0xc3dc
   12438:	movt	r3, #1
   1243c:	ldrb	r3, [r3, r2]
   12440:	strb	r3, [fp, #-23]	; 0xffffffe9
   12444:	ldrsb	r3, [fp, #-23]	; 0xffffffe9
   12448:	cmp	r3, #0
   1244c:	bge	12458 <__assert_fail@plt+0x150c>
   12450:	mov	r3, #0
   12454:	b	12674 <__assert_fail@plt+0x1728>
   12458:	ldrb	r3, [fp, #-23]	; 0xffffffe9
   1245c:	strb	r3, [fp, #-22]	; 0xffffffea
   12460:	nop	{0}
   12464:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12468:	add	r3, r3, #1
   1246c:	str	r3, [fp, #-44]	; 0xffffffd4
   12470:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12474:	ldr	r3, [r3, #4]
   12478:	add	r1, r3, #1
   1247c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12480:	str	r1, [r2, #4]
   12484:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12488:	add	r3, r2, r3
   1248c:	ldrb	r2, [fp, #-22]	; 0xffffffea
   12490:	strb	r2, [r3, #8]
   12494:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12498:	ldr	r3, [r3, #4]
   1249c:	cmp	r3, #5
   124a0:	bne	1264c <__assert_fail@plt+0x1700>
   124a4:	b	124b0 <__assert_fail@plt+0x1564>
   124a8:	mov	r3, #0
   124ac:	b	12674 <__assert_fail@plt+0x1728>
   124b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   124b4:	ldrb	r3, [r3, #9]
   124b8:	mov	r2, r3
   124bc:	movw	r3, #24301	; 0x5eed
   124c0:	movt	r3, #9
   124c4:	mul	r2, r3, r2
   124c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   124cc:	ldrb	r3, [r3, #10]
   124d0:	mov	r1, r3
   124d4:	movw	r3, #7225	; 0x1c39
   124d8:	mul	r3, r3, r1
   124dc:	add	r2, r2, r3
   124e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   124e4:	ldrb	r3, [r3, #11]
   124e8:	mov	r1, r3
   124ec:	mov	r3, #85	; 0x55
   124f0:	mul	r3, r3, r1
   124f4:	add	r3, r2, r3
   124f8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   124fc:	ldrb	r2, [r2, #12]
   12500:	add	r3, r3, r2
   12504:	mov	r2, r3
   12508:	asr	r3, r2, #31
   1250c:	strd	r2, [fp, #-36]	; 0xffffffdc
   12510:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12514:	ldrb	r3, [r3, #8]
   12518:	uxtb	r2, r3
   1251c:	mov	r3, #0
   12520:	movw	r1, #33969	; 0x84b1
   12524:	movt	r1, #796	; 0x31c
   12528:	mul	r0, r1, r3
   1252c:	mov	r1, #0
   12530:	mul	r1, r1, r2
   12534:	add	r0, r0, r1
   12538:	movw	r1, #33969	; 0x84b1
   1253c:	movt	r1, #796	; 0x31c
   12540:	umull	r2, r3, r2, r1
   12544:	add	r1, r0, r3
   12548:	mov	r3, r1
   1254c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   12550:	adds	r6, r0, r2
   12554:	adc	r7, r1, r3
   12558:	strd	r6, [fp, #-36]	; 0xffffffdc
   1255c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   12560:	mov	r2, #0
   12564:	mov	r3, #0
   12568:	lsr	r2, r0, #24
   1256c:	orr	r2, r2, r1, lsl #8
   12570:	asr	r3, r1, #24
   12574:	mvn	r0, #255	; 0xff
   12578:	mvn	r1, #0
   1257c:	and	r4, r2, r0
   12580:	and	r5, r3, r1
   12584:	orrs	r3, r4, r5
   12588:	beq	12594 <__assert_fail@plt+0x1648>
   1258c:	mov	r3, #0
   12590:	b	12674 <__assert_fail@plt+0x1728>
   12594:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   12598:	mov	r2, #0
   1259c:	mov	r3, #0
   125a0:	lsr	r2, r0, #24
   125a4:	orr	r2, r2, r1, lsl #8
   125a8:	asr	r3, r1, #24
   125ac:	ldr	r1, [fp, #-52]	; 0xffffffcc
   125b0:	add	r0, r1, #1
   125b4:	str	r0, [fp, #-52]	; 0xffffffcc
   125b8:	uxtb	r3, r2
   125bc:	strb	r3, [r1]
   125c0:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   125c4:	mov	r2, #0
   125c8:	mov	r3, #0
   125cc:	lsr	r2, r0, #16
   125d0:	orr	r2, r2, r1, lsl #16
   125d4:	asr	r3, r1, #16
   125d8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   125dc:	add	r0, r1, #1
   125e0:	str	r0, [fp, #-52]	; 0xffffffcc
   125e4:	uxtb	r3, r2
   125e8:	strb	r3, [r1]
   125ec:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   125f0:	mov	r2, #0
   125f4:	mov	r3, #0
   125f8:	lsr	r2, r0, #8
   125fc:	orr	r2, r2, r1, lsl #24
   12600:	asr	r3, r1, #8
   12604:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12608:	add	r0, r1, #1
   1260c:	str	r0, [fp, #-52]	; 0xffffffcc
   12610:	uxtb	r3, r2
   12614:	strb	r3, [r1]
   12618:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1261c:	add	r2, r3, #1
   12620:	str	r2, [fp, #-52]	; 0xffffffcc
   12624:	ldrb	r2, [fp, #-36]	; 0xffffffdc
   12628:	strb	r2, [r3]
   1262c:	ldr	r3, [fp, #4]
   12630:	ldr	r3, [r3]
   12634:	add	r2, r3, #4
   12638:	ldr	r3, [fp, #4]
   1263c:	str	r2, [r3]
   12640:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12644:	mov	r2, #0
   12648:	str	r2, [r3, #4]
   1264c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12650:	sub	r2, r3, #1
   12654:	str	r2, [fp, #-48]	; 0xffffffd0
   12658:	cmp	r3, #0
   1265c:	bne	123dc <__assert_fail@plt+0x1490>
   12660:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12664:	ldr	r2, [r3, #4]
   12668:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1266c:	str	r2, [r3]
   12670:	mov	r3, #1
   12674:	mov	r0, r3
   12678:	sub	sp, fp, #16
   1267c:	ldrd	r4, [sp]
   12680:	ldrd	r6, [sp, #8]
   12684:	ldr	fp, [sp, #16]
   12688:	add	sp, sp, #20
   1268c:	bx	lr
   12690:	push	{fp}		; (str fp, [sp, #-4]!)
   12694:	add	fp, sp, #0
   12698:	sub	sp, sp, #12
   1269c:	mov	r3, r0
   126a0:	strb	r3, [fp, #-5]
   126a4:	ldrb	r3, [fp, #-5]
   126a8:	cmp	r3, #48	; 0x30
   126ac:	beq	126bc <__assert_fail@plt+0x1770>
   126b0:	ldrb	r3, [fp, #-5]
   126b4:	cmp	r3, #49	; 0x31
   126b8:	bne	126c4 <__assert_fail@plt+0x1778>
   126bc:	mov	r3, #1
   126c0:	b	126c8 <__assert_fail@plt+0x177c>
   126c4:	mov	r3, #0
   126c8:	and	r3, r3, #1
   126cc:	uxtb	r3, r3
   126d0:	mov	r0, r3
   126d4:	add	sp, fp, #0
   126d8:	pop	{fp}		; (ldr fp, [sp], #4)
   126dc:	bx	lr
   126e0:	push	{fp}		; (str fp, [sp, #-4]!)
   126e4:	add	fp, sp, #0
   126e8:	sub	sp, sp, #12
   126ec:	str	r0, [fp, #-8]
   126f0:	ldr	r3, [fp, #-8]
   126f4:	lsl	r3, r3, #3
   126f8:	mov	r0, r3
   126fc:	add	sp, fp, #0
   12700:	pop	{fp}		; (ldr fp, [sp], #4)
   12704:	bx	lr
   12708:	push	{fp}		; (str fp, [sp, #-4]!)
   1270c:	add	fp, sp, #0
   12710:	sub	sp, sp, #28
   12714:	str	r0, [fp, #-16]
   12718:	str	r1, [fp, #-20]	; 0xffffffec
   1271c:	str	r2, [fp, #-24]	; 0xffffffe8
   12720:	str	r3, [fp, #-28]	; 0xffffffe4
   12724:	b	127a8 <__assert_fail@plt+0x185c>
   12728:	ldr	r3, [fp, #-16]
   1272c:	ldrb	r3, [r3]
   12730:	strb	r3, [fp, #-5]
   12734:	mov	r3, #0
   12738:	str	r3, [fp, #-12]
   1273c:	b	12784 <__assert_fail@plt+0x1838>
   12740:	ldrsb	r3, [fp, #-5]
   12744:	cmp	r3, #0
   12748:	bge	12754 <__assert_fail@plt+0x1808>
   1274c:	mov	r1, #49	; 0x31
   12750:	b	12758 <__assert_fail@plt+0x180c>
   12754:	mov	r1, #48	; 0x30
   12758:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1275c:	add	r2, r3, #1
   12760:	str	r2, [fp, #-24]	; 0xffffffe8
   12764:	mov	r2, r1
   12768:	strb	r2, [r3]
   1276c:	ldrb	r3, [fp, #-5]
   12770:	lsl	r3, r3, #1
   12774:	strb	r3, [fp, #-5]
   12778:	ldr	r3, [fp, #-12]
   1277c:	add	r3, r3, #1
   12780:	str	r3, [fp, #-12]
   12784:	ldr	r3, [fp, #-12]
   12788:	cmp	r3, #7
   1278c:	ble	12740 <__assert_fail@plt+0x17f4>
   12790:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12794:	sub	r3, r3, #8
   12798:	str	r3, [fp, #-28]	; 0xffffffe4
   1279c:	ldr	r3, [fp, #-16]
   127a0:	add	r3, r3, #1
   127a4:	str	r3, [fp, #-16]
   127a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   127ac:	sub	r2, r3, #1
   127b0:	str	r2, [fp, #-20]	; 0xffffffec
   127b4:	cmp	r3, #0
   127b8:	bne	12728 <__assert_fail@plt+0x17dc>
   127bc:	nop	{0}
   127c0:	add	sp, fp, #0
   127c4:	pop	{fp}		; (ldr fp, [sp], #4)
   127c8:	bx	lr
   127cc:	push	{fp}		; (str fp, [sp, #-4]!)
   127d0:	add	fp, sp, #0
   127d4:	sub	sp, sp, #28
   127d8:	str	r0, [fp, #-16]
   127dc:	str	r1, [fp, #-20]	; 0xffffffec
   127e0:	str	r2, [fp, #-24]	; 0xffffffe8
   127e4:	str	r3, [fp, #-28]	; 0xffffffe4
   127e8:	b	12870 <__assert_fail@plt+0x1924>
   127ec:	ldr	r3, [fp, #-16]
   127f0:	ldrb	r3, [r3]
   127f4:	strb	r3, [fp, #-5]
   127f8:	mov	r3, #0
   127fc:	str	r3, [fp, #-12]
   12800:	b	1284c <__assert_fail@plt+0x1900>
   12804:	ldrb	r3, [fp, #-5]
   12808:	and	r3, r3, #1
   1280c:	cmp	r3, #0
   12810:	beq	1281c <__assert_fail@plt+0x18d0>
   12814:	mov	r1, #49	; 0x31
   12818:	b	12820 <__assert_fail@plt+0x18d4>
   1281c:	mov	r1, #48	; 0x30
   12820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12824:	add	r2, r3, #1
   12828:	str	r2, [fp, #-24]	; 0xffffffe8
   1282c:	mov	r2, r1
   12830:	strb	r2, [r3]
   12834:	ldrb	r3, [fp, #-5]
   12838:	lsr	r3, r3, #1
   1283c:	strb	r3, [fp, #-5]
   12840:	ldr	r3, [fp, #-12]
   12844:	add	r3, r3, #1
   12848:	str	r3, [fp, #-12]
   1284c:	ldr	r3, [fp, #-12]
   12850:	cmp	r3, #7
   12854:	ble	12804 <__assert_fail@plt+0x18b8>
   12858:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1285c:	sub	r3, r3, #8
   12860:	str	r3, [fp, #-28]	; 0xffffffe4
   12864:	ldr	r3, [fp, #-16]
   12868:	add	r3, r3, #1
   1286c:	str	r3, [fp, #-16]
   12870:	ldr	r3, [fp, #-20]	; 0xffffffec
   12874:	sub	r2, r3, #1
   12878:	str	r2, [fp, #-20]	; 0xffffffec
   1287c:	cmp	r3, #0
   12880:	bne	127ec <__assert_fail@plt+0x18a0>
   12884:	nop	{0}
   12888:	add	sp, fp, #0
   1288c:	pop	{fp}		; (ldr fp, [sp], #4)
   12890:	bx	lr
   12894:	str	fp, [sp, #-8]!
   12898:	str	lr, [sp, #4]
   1289c:	add	fp, sp, #4
   128a0:	sub	sp, sp, #8
   128a4:	str	r0, [fp, #-8]
   128a8:	ldr	r0, [fp, #-8]
   128ac:	bl	1162c <__assert_fail@plt+0x6e0>
   128b0:	ldr	r3, [fp, #-8]
   128b4:	mov	r2, #0
   128b8:	strb	r2, [r3, #4]
   128bc:	ldr	r3, [fp, #-8]
   128c0:	mov	r2, #0
   128c4:	str	r2, [r3]
   128c8:	nop	{0}
   128cc:	sub	sp, fp, #4
   128d0:	ldr	fp, [sp]
   128d4:	add	sp, sp, #4
   128d8:	pop	{pc}		; (ldr pc, [sp], #4)
   128dc:	str	fp, [sp, #-8]!
   128e0:	str	lr, [sp, #4]
   128e4:	add	fp, sp, #4
   128e8:	sub	sp, sp, #24
   128ec:	str	r0, [fp, #-16]
   128f0:	str	r1, [fp, #-20]	; 0xffffffec
   128f4:	str	r2, [fp, #-24]	; 0xffffffe8
   128f8:	str	r3, [fp, #-28]	; 0xffffffe4
   128fc:	mov	r3, #1
   12900:	strb	r3, [fp, #-5]
   12904:	ldr	r3, [fp, #4]
   12908:	mov	r2, #0
   1290c:	str	r2, [r3]
   12910:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12914:	cmp	r3, #0
   12918:	bne	12a50 <__assert_fail@plt+0x1b04>
   1291c:	ldr	r3, [fp, #-16]
   12920:	ldr	r3, [r3]
   12924:	cmp	r3, #0
   12928:	moveq	r3, #1
   1292c:	movne	r3, #0
   12930:	uxtb	r3, r3
   12934:	b	12a68 <__assert_fail@plt+0x1b1c>
   12938:	ldrb	r3, [fp, #-5]
   1293c:	cmp	r3, #0
   12940:	beq	12964 <__assert_fail@plt+0x1a18>
   12944:	ldr	r3, [fp, #-20]	; 0xffffffec
   12948:	ldrb	r3, [r3]
   1294c:	cmp	r3, #10
   12950:	bne	12964 <__assert_fail@plt+0x1a18>
   12954:	ldr	r3, [fp, #-20]	; 0xffffffec
   12958:	add	r3, r3, #1
   1295c:	str	r3, [fp, #-20]	; 0xffffffec
   12960:	b	12a50 <__assert_fail@plt+0x1b04>
   12964:	ldr	r3, [fp, #-20]	; 0xffffffec
   12968:	ldrb	r3, [r3]
   1296c:	mov	r0, r3
   12970:	bl	12690 <__assert_fail@plt+0x1744>
   12974:	mov	r3, r0
   12978:	eor	r3, r3, #1
   1297c:	uxtb	r3, r3
   12980:	cmp	r3, #0
   12984:	beq	12990 <__assert_fail@plt+0x1a44>
   12988:	mov	r3, #0
   1298c:	b	12a68 <__assert_fail@plt+0x1b1c>
   12990:	ldr	r3, [fp, #-20]	; 0xffffffec
   12994:	ldrb	r3, [r3]
   12998:	cmp	r3, #49	; 0x31
   1299c:	moveq	r3, #1
   129a0:	movne	r3, #0
   129a4:	strb	r3, [fp, #-6]
   129a8:	ldr	r3, [fp, #-16]
   129ac:	ldrb	r3, [r3, #4]
   129b0:	sxtb	r2, r3
   129b4:	ldrb	r1, [fp, #-6]
   129b8:	ldr	r3, [fp, #-16]
   129bc:	ldr	r3, [r3]
   129c0:	lsl	r3, r1, r3
   129c4:	sxtb	r3, r3
   129c8:	orr	r3, r2, r3
   129cc:	sxtb	r3, r3
   129d0:	uxtb	r2, r3
   129d4:	ldr	r3, [fp, #-16]
   129d8:	strb	r2, [r3, #4]
   129dc:	ldr	r3, [fp, #-16]
   129e0:	ldr	r3, [r3]
   129e4:	add	r2, r3, #1
   129e8:	ldr	r3, [fp, #-16]
   129ec:	str	r2, [r3]
   129f0:	ldr	r3, [fp, #-16]
   129f4:	ldr	r3, [r3]
   129f8:	cmp	r3, #8
   129fc:	bne	12a44 <__assert_fail@plt+0x1af8>
   12a00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a04:	add	r2, r3, #1
   12a08:	str	r2, [fp, #-28]	; 0xffffffe4
   12a0c:	ldr	r2, [fp, #-16]
   12a10:	ldrb	r2, [r2, #4]
   12a14:	strb	r2, [r3]
   12a18:	ldr	r3, [fp, #-16]
   12a1c:	mov	r2, #0
   12a20:	strb	r2, [r3, #4]
   12a24:	ldr	r3, [fp, #4]
   12a28:	ldr	r3, [r3]
   12a2c:	add	r2, r3, #1
   12a30:	ldr	r3, [fp, #4]
   12a34:	str	r2, [r3]
   12a38:	ldr	r3, [fp, #-16]
   12a3c:	mov	r2, #0
   12a40:	str	r2, [r3]
   12a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a48:	add	r3, r3, #1
   12a4c:	str	r3, [fp, #-20]	; 0xffffffec
   12a50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a54:	sub	r2, r3, #1
   12a58:	str	r2, [fp, #-24]	; 0xffffffe8
   12a5c:	cmp	r3, #0
   12a60:	bne	12938 <__assert_fail@plt+0x19ec>
   12a64:	mov	r3, #1
   12a68:	mov	r0, r3
   12a6c:	sub	sp, fp, #4
   12a70:	ldr	fp, [sp]
   12a74:	add	sp, sp, #4
   12a78:	pop	{pc}		; (ldr pc, [sp], #4)
   12a7c:	str	fp, [sp, #-8]!
   12a80:	str	lr, [sp, #4]
   12a84:	add	fp, sp, #4
   12a88:	sub	sp, sp, #24
   12a8c:	str	r0, [fp, #-16]
   12a90:	str	r1, [fp, #-20]	; 0xffffffec
   12a94:	str	r2, [fp, #-24]	; 0xffffffe8
   12a98:	str	r3, [fp, #-28]	; 0xffffffe4
   12a9c:	mov	r3, #1
   12aa0:	strb	r3, [fp, #-5]
   12aa4:	ldr	r3, [fp, #4]
   12aa8:	mov	r2, #0
   12aac:	str	r2, [r3]
   12ab0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ab4:	cmp	r3, #0
   12ab8:	bne	12c0c <__assert_fail@plt+0x1cc0>
   12abc:	ldr	r3, [fp, #-16]
   12ac0:	ldr	r3, [r3]
   12ac4:	cmp	r3, #0
   12ac8:	moveq	r3, #1
   12acc:	movne	r3, #0
   12ad0:	uxtb	r3, r3
   12ad4:	b	12c24 <__assert_fail@plt+0x1cd8>
   12ad8:	ldrb	r3, [fp, #-5]
   12adc:	cmp	r3, #0
   12ae0:	beq	12b04 <__assert_fail@plt+0x1bb8>
   12ae4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ae8:	ldrb	r3, [r3]
   12aec:	cmp	r3, #10
   12af0:	bne	12b04 <__assert_fail@plt+0x1bb8>
   12af4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12af8:	add	r3, r3, #1
   12afc:	str	r3, [fp, #-20]	; 0xffffffec
   12b00:	b	12c0c <__assert_fail@plt+0x1cc0>
   12b04:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b08:	ldrb	r3, [r3]
   12b0c:	mov	r0, r3
   12b10:	bl	12690 <__assert_fail@plt+0x1744>
   12b14:	mov	r3, r0
   12b18:	eor	r3, r3, #1
   12b1c:	uxtb	r3, r3
   12b20:	cmp	r3, #0
   12b24:	beq	12b30 <__assert_fail@plt+0x1be4>
   12b28:	mov	r3, #0
   12b2c:	b	12c24 <__assert_fail@plt+0x1cd8>
   12b30:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b34:	ldrb	r3, [r3]
   12b38:	cmp	r3, #49	; 0x31
   12b3c:	moveq	r3, #1
   12b40:	movne	r3, #0
   12b44:	strb	r3, [fp, #-6]
   12b48:	ldr	r3, [fp, #-16]
   12b4c:	ldr	r3, [r3]
   12b50:	cmp	r3, #0
   12b54:	bne	12b64 <__assert_fail@plt+0x1c18>
   12b58:	ldr	r3, [fp, #-16]
   12b5c:	mov	r2, #8
   12b60:	str	r2, [r3]
   12b64:	ldr	r3, [fp, #-16]
   12b68:	ldr	r3, [r3]
   12b6c:	sub	r2, r3, #1
   12b70:	ldr	r3, [fp, #-16]
   12b74:	str	r2, [r3]
   12b78:	ldr	r3, [fp, #-16]
   12b7c:	ldrb	r3, [r3, #4]
   12b80:	sxtb	r2, r3
   12b84:	ldrb	r1, [fp, #-6]
   12b88:	ldr	r3, [fp, #-16]
   12b8c:	ldr	r3, [r3]
   12b90:	lsl	r3, r1, r3
   12b94:	sxtb	r3, r3
   12b98:	orr	r3, r2, r3
   12b9c:	sxtb	r3, r3
   12ba0:	uxtb	r2, r3
   12ba4:	ldr	r3, [fp, #-16]
   12ba8:	strb	r2, [r3, #4]
   12bac:	ldr	r3, [fp, #-16]
   12bb0:	ldr	r3, [r3]
   12bb4:	cmp	r3, #0
   12bb8:	bne	12c00 <__assert_fail@plt+0x1cb4>
   12bbc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12bc0:	add	r2, r3, #1
   12bc4:	str	r2, [fp, #-28]	; 0xffffffe4
   12bc8:	ldr	r2, [fp, #-16]
   12bcc:	ldrb	r2, [r2, #4]
   12bd0:	strb	r2, [r3]
   12bd4:	ldr	r3, [fp, #-16]
   12bd8:	mov	r2, #0
   12bdc:	strb	r2, [r3, #4]
   12be0:	ldr	r3, [fp, #4]
   12be4:	ldr	r3, [r3]
   12be8:	add	r2, r3, #1
   12bec:	ldr	r3, [fp, #4]
   12bf0:	str	r2, [r3]
   12bf4:	ldr	r3, [fp, #-16]
   12bf8:	mov	r2, #0
   12bfc:	str	r2, [r3]
   12c00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c04:	add	r3, r3, #1
   12c08:	str	r3, [fp, #-20]	; 0xffffffec
   12c0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c10:	sub	r2, r3, #1
   12c14:	str	r2, [fp, #-24]	; 0xffffffe8
   12c18:	cmp	r3, #0
   12c1c:	bne	12ad8 <__assert_fail@plt+0x1b8c>
   12c20:	mov	r3, #1
   12c24:	mov	r0, r3
   12c28:	sub	sp, fp, #4
   12c2c:	ldr	fp, [sp]
   12c30:	add	sp, sp, #4
   12c34:	pop	{pc}		; (ldr pc, [sp], #4)
   12c38:	str	r4, [sp, #-12]!
   12c3c:	str	fp, [sp, #4]
   12c40:	str	lr, [sp, #8]
   12c44:	add	fp, sp, #8
   12c48:	sub	sp, sp, #28
   12c4c:	str	r0, [fp, #-24]	; 0xffffffe8
   12c50:	str	r1, [fp, #-28]	; 0xffffffe4
   12c54:	str	r2, [fp, #-32]	; 0xffffffe0
   12c58:	str	r3, [fp, #-36]	; 0xffffffdc
   12c5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12c60:	cmp	r3, #0
   12c64:	bne	12cc0 <__assert_fail@plt+0x1d74>
   12c68:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12c6c:	movw	r3, #53588	; 0xd154
   12c70:	movt	r3, #2
   12c74:	ldr	r3, [r3]
   12c78:	mov	r1, #1
   12c7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c80:	bl	10d60 <fwrite_unlocked@plt>
   12c84:	mov	r2, r0
   12c88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12c8c:	cmp	r2, r3
   12c90:	bcs	12df0 <__assert_fail@plt+0x1ea4>
   12c94:	bl	10e80 <__errno_location@plt>
   12c98:	mov	r3, r0
   12c9c:	ldr	r4, [r3]
   12ca0:	movw	r0, #50236	; 0xc43c
   12ca4:	movt	r0, #1
   12ca8:	bl	10e50 <gettext@plt>
   12cac:	mov	r3, r0
   12cb0:	mov	r2, r3
   12cb4:	mov	r1, r4
   12cb8:	mov	r0, #1
   12cbc:	bl	10df0 <error@plt>
   12cc0:	mov	r3, #0
   12cc4:	str	r3, [fp, #-16]
   12cc8:	b	12de0 <__assert_fail@plt+0x1e94>
   12ccc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12cd0:	ldr	r3, [fp, #-16]
   12cd4:	sub	r2, r2, r3
   12cd8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12cdc:	ldr	r3, [r3]
   12ce0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12ce4:	sub	r3, r1, r3
   12ce8:	cmp	r2, r3
   12cec:	movlt	r3, r2
   12cf0:	movge	r3, r3
   12cf4:	str	r3, [fp, #-20]	; 0xffffffec
   12cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cfc:	cmp	r3, #0
   12d00:	bne	12d58 <__assert_fail@plt+0x1e0c>
   12d04:	ldr	r1, [fp, #4]
   12d08:	mov	r0, #10
   12d0c:	bl	10d78 <fputc_unlocked@plt>
   12d10:	mov	r3, r0
   12d14:	cmn	r3, #1
   12d18:	bne	12d48 <__assert_fail@plt+0x1dfc>
   12d1c:	bl	10e80 <__errno_location@plt>
   12d20:	mov	r3, r0
   12d24:	ldr	r4, [r3]
   12d28:	movw	r0, #50236	; 0xc43c
   12d2c:	movt	r0, #1
   12d30:	bl	10e50 <gettext@plt>
   12d34:	mov	r3, r0
   12d38:	mov	r2, r3
   12d3c:	mov	r1, r4
   12d40:	mov	r0, #1
   12d44:	bl	10df0 <error@plt>
   12d48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d4c:	mov	r2, #0
   12d50:	str	r2, [r3]
   12d54:	b	12de0 <__assert_fail@plt+0x1e94>
   12d58:	ldr	r3, [fp, #-16]
   12d5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12d60:	add	r0, r2, r3
   12d64:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d68:	movw	r3, #53588	; 0xd154
   12d6c:	movt	r3, #2
   12d70:	ldr	r3, [r3]
   12d74:	mov	r1, #1
   12d78:	bl	10d60 <fwrite_unlocked@plt>
   12d7c:	mov	r2, r0
   12d80:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d84:	cmp	r2, r3
   12d88:	bcs	12db8 <__assert_fail@plt+0x1e6c>
   12d8c:	bl	10e80 <__errno_location@plt>
   12d90:	mov	r3, r0
   12d94:	ldr	r4, [r3]
   12d98:	movw	r0, #50236	; 0xc43c
   12d9c:	movt	r0, #1
   12da0:	bl	10e50 <gettext@plt>
   12da4:	mov	r3, r0
   12da8:	mov	r2, r3
   12dac:	mov	r1, r4
   12db0:	mov	r0, #1
   12db4:	bl	10df0 <error@plt>
   12db8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12dbc:	ldr	r2, [r3]
   12dc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dc4:	add	r2, r2, r3
   12dc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12dcc:	str	r2, [r3]
   12dd0:	ldr	r2, [fp, #-16]
   12dd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dd8:	add	r3, r2, r3
   12ddc:	str	r3, [fp, #-16]
   12de0:	ldr	r2, [fp, #-16]
   12de4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12de8:	cmp	r2, r3
   12dec:	blt	12ccc <__assert_fail@plt+0x1d80>
   12df0:	nop	{0}
   12df4:	sub	sp, fp, #8
   12df8:	ldr	r4, [sp]
   12dfc:	ldr	fp, [sp, #4]
   12e00:	add	sp, sp, #8
   12e04:	pop	{pc}		; (ldr pc, [sp], #4)
   12e08:	str	r4, [sp, #-12]!
   12e0c:	str	fp, [sp, #4]
   12e10:	str	lr, [sp, #8]
   12e14:	add	fp, sp, #8
   12e18:	sub	sp, sp, #12
   12e1c:	str	r0, [fp, #-16]
   12e20:	str	r1, [fp, #-20]	; 0xffffffec
   12e24:	ldr	r0, [fp, #-16]
   12e28:	bl	1669c <__assert_fail@plt+0x5750>
   12e2c:	mov	r3, r0
   12e30:	cmp	r3, #0
   12e34:	beq	12eb4 <__assert_fail@plt+0x1f68>
   12e38:	movw	r1, #50248	; 0xc448
   12e3c:	movt	r1, #1
   12e40:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e44:	bl	10cf4 <strcmp@plt>
   12e48:	mov	r3, r0
   12e4c:	cmp	r3, #0
   12e50:	bne	12e80 <__assert_fail@plt+0x1f34>
   12e54:	bl	10e80 <__errno_location@plt>
   12e58:	mov	r3, r0
   12e5c:	ldr	r4, [r3]
   12e60:	movw	r0, #50252	; 0xc44c
   12e64:	movt	r0, #1
   12e68:	bl	10e50 <gettext@plt>
   12e6c:	mov	r3, r0
   12e70:	mov	r2, r3
   12e74:	mov	r1, r4
   12e78:	mov	r0, #1
   12e7c:	bl	10df0 <error@plt>
   12e80:	bl	10e80 <__errno_location@plt>
   12e84:	mov	r3, r0
   12e88:	ldr	r4, [r3]
   12e8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e90:	mov	r1, #3
   12e94:	mov	r0, #0
   12e98:	bl	191d4 <__assert_fail@plt+0x8288>
   12e9c:	mov	r3, r0
   12ea0:	movw	r2, #50276	; 0xc464
   12ea4:	movt	r2, #1
   12ea8:	mov	r1, r4
   12eac:	mov	r0, #1
   12eb0:	bl	10df0 <error@plt>
   12eb4:	mov	r0, #0
   12eb8:	bl	10e44 <exit@plt>
   12ebc:	str	r4, [sp, #-12]!
   12ec0:	str	fp, [sp, #4]
   12ec4:	str	lr, [sp, #8]
   12ec8:	add	fp, sp, #8
   12ecc:	sub	sp, sp, #52	; 0x34
   12ed0:	str	r0, [fp, #-40]	; 0xffffffd8
   12ed4:	str	r1, [fp, #-44]	; 0xffffffd4
   12ed8:	str	r2, [fp, #-48]	; 0xffffffd0
   12edc:	str	r3, [fp, #-52]	; 0xffffffcc
   12ee0:	mov	r3, #0
   12ee4:	str	r3, [fp, #-32]	; 0xffffffe0
   12ee8:	mov	r0, #30720	; 0x7800
   12eec:	bl	19dfc <__assert_fail@plt+0x8eb0>
   12ef0:	mov	r3, r0
   12ef4:	str	r3, [fp, #-20]	; 0xffffffec
   12ef8:	movw	r3, #53600	; 0xd160
   12efc:	movt	r3, #2
   12f00:	ldr	r3, [r3]
   12f04:	mov	r0, #30720	; 0x7800
   12f08:	blx	r3
   12f0c:	mov	r3, r0
   12f10:	mov	r0, r3
   12f14:	bl	19dfc <__assert_fail@plt+0x8eb0>
   12f18:	mov	r3, r0
   12f1c:	str	r3, [fp, #-24]	; 0xffffffe8
   12f20:	mov	r3, #0
   12f24:	str	r3, [fp, #-16]
   12f28:	ldr	r3, [fp, #-16]
   12f2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f30:	add	r0, r2, r3
   12f34:	ldr	r3, [fp, #-16]
   12f38:	rsb	r3, r3, #30720	; 0x7800
   12f3c:	mov	r2, r3
   12f40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12f44:	mov	r1, #1
   12f48:	bl	10f1c <fread_unlocked@plt>
   12f4c:	mov	r3, r0
   12f50:	str	r3, [fp, #-28]	; 0xffffffe4
   12f54:	ldr	r2, [fp, #-16]
   12f58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12f5c:	add	r3, r2, r3
   12f60:	str	r3, [fp, #-16]
   12f64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12f68:	bl	10f40 <feof_unlocked@plt>
   12f6c:	mov	r3, r0
   12f70:	cmp	r3, #0
   12f74:	bne	12f98 <__assert_fail@plt+0x204c>
   12f78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12f7c:	bl	10dd8 <ferror_unlocked@plt>
   12f80:	mov	r3, r0
   12f84:	cmp	r3, #0
   12f88:	bne	12f98 <__assert_fail@plt+0x204c>
   12f8c:	ldr	r3, [fp, #-16]
   12f90:	cmp	r3, #30720	; 0x7800
   12f94:	blt	12f28 <__assert_fail@plt+0x1fdc>
   12f98:	ldr	r3, [fp, #-16]
   12f9c:	cmp	r3, #0
   12fa0:	ble	1300c <__assert_fail@plt+0x20c0>
   12fa4:	movw	r3, #53608	; 0xd168
   12fa8:	movt	r3, #2
   12fac:	ldr	r4, [r3]
   12fb0:	movw	r3, #53600	; 0xd160
   12fb4:	movt	r3, #2
   12fb8:	ldr	r3, [r3]
   12fbc:	ldr	r0, [fp, #-16]
   12fc0:	blx	r3
   12fc4:	mov	r3, r0
   12fc8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12fcc:	ldr	r1, [fp, #-16]
   12fd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   12fd4:	blx	r4
   12fd8:	movw	r3, #53600	; 0xd160
   12fdc:	movt	r3, #2
   12fe0:	ldr	r3, [r3]
   12fe4:	ldr	r0, [fp, #-16]
   12fe8:	blx	r3
   12fec:	mov	r1, r0
   12ff0:	sub	r2, fp, #32
   12ff4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ff8:	str	r3, [sp]
   12ffc:	mov	r3, r2
   13000:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13004:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13008:	bl	12c38 <__assert_fail@plt+0x1cec>
   1300c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13010:	bl	10f40 <feof_unlocked@plt>
   13014:	mov	r3, r0
   13018:	cmp	r3, #0
   1301c:	bne	13040 <__assert_fail@plt+0x20f4>
   13020:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13024:	bl	10dd8 <ferror_unlocked@plt>
   13028:	mov	r3, r0
   1302c:	cmp	r3, #0
   13030:	bne	13040 <__assert_fail@plt+0x20f4>
   13034:	ldr	r3, [fp, #-16]
   13038:	cmp	r3, #30720	; 0x7800
   1303c:	beq	12f20 <__assert_fail@plt+0x1fd4>
   13040:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13044:	cmp	r3, #0
   13048:	beq	1309c <__assert_fail@plt+0x2150>
   1304c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13050:	cmp	r3, #0
   13054:	ble	1309c <__assert_fail@plt+0x2150>
   13058:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1305c:	mov	r0, #10
   13060:	bl	10d78 <fputc_unlocked@plt>
   13064:	mov	r3, r0
   13068:	cmn	r3, #1
   1306c:	bne	1309c <__assert_fail@plt+0x2150>
   13070:	bl	10e80 <__errno_location@plt>
   13074:	mov	r3, r0
   13078:	ldr	r4, [r3]
   1307c:	movw	r0, #50236	; 0xc43c
   13080:	movt	r0, #1
   13084:	bl	10e50 <gettext@plt>
   13088:	mov	r3, r0
   1308c:	mov	r2, r3
   13090:	mov	r1, r4
   13094:	mov	r0, #1
   13098:	bl	10df0 <error@plt>
   1309c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   130a0:	bl	10dd8 <ferror_unlocked@plt>
   130a4:	mov	r3, r0
   130a8:	cmp	r3, #0
   130ac:	beq	130dc <__assert_fail@plt+0x2190>
   130b0:	bl	10e80 <__errno_location@plt>
   130b4:	mov	r3, r0
   130b8:	ldr	r4, [r3]
   130bc:	movw	r0, #50280	; 0xc468
   130c0:	movt	r0, #1
   130c4:	bl	10e50 <gettext@plt>
   130c8:	mov	r3, r0
   130cc:	mov	r2, r3
   130d0:	mov	r1, r4
   130d4:	mov	r0, #1
   130d8:	bl	10df0 <error@plt>
   130dc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   130e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   130e4:	bl	12e08 <__assert_fail@plt+0x1ebc>
   130e8:	nop	{0}
   130ec:	sub	sp, fp, #8
   130f0:	ldr	r4, [sp]
   130f4:	ldr	fp, [sp, #4]
   130f8:	add	sp, sp, #8
   130fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13100:	str	r4, [sp, #-12]!
   13104:	str	fp, [sp, #4]
   13108:	str	lr, [sp, #8]
   1310c:	add	fp, sp, #8
   13110:	sub	sp, sp, #84	; 0x54
   13114:	str	r0, [fp, #-72]	; 0xffffffb8
   13118:	str	r1, [fp, #-76]	; 0xffffffb4
   1311c:	str	r2, [fp, #-80]	; 0xffffffb0
   13120:	strb	r3, [fp, #-81]	; 0xffffffaf
   13124:	movw	r3, #53600	; 0xd160
   13128:	movt	r3, #2
   1312c:	ldr	r3, [r3]
   13130:	movw	r0, #4200	; 0x1068
   13134:	blx	r3
   13138:	mov	r3, r0
   1313c:	mov	r0, r3
   13140:	bl	19dfc <__assert_fail@plt+0x8eb0>
   13144:	mov	r3, r0
   13148:	str	r3, [fp, #-32]	; 0xffffffe0
   1314c:	movw	r0, #4200	; 0x1068
   13150:	bl	19dfc <__assert_fail@plt+0x8eb0>
   13154:	mov	r3, r0
   13158:	str	r3, [fp, #-36]	; 0xffffffdc
   1315c:	mov	r3, #0
   13160:	str	r3, [fp, #-48]	; 0xffffffd0
   13164:	movw	r3, #53612	; 0xd16c
   13168:	movt	r3, #2
   1316c:	ldr	r3, [r3]
   13170:	sub	r2, fp, #64	; 0x40
   13174:	mov	r0, r2
   13178:	blx	r3
   1317c:	mov	r3, #0
   13180:	str	r3, [fp, #-16]
   13184:	ldr	r3, [fp, #-16]
   13188:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1318c:	add	r4, r2, r3
   13190:	movw	r3, #53600	; 0xd160
   13194:	movt	r3, #2
   13198:	ldr	r3, [r3]
   1319c:	movw	r0, #4200	; 0x1068
   131a0:	blx	r3
   131a4:	mov	r2, r0
   131a8:	ldr	r3, [fp, #-16]
   131ac:	sub	r3, r2, r3
   131b0:	mov	r2, r3
   131b4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   131b8:	mov	r1, #1
   131bc:	mov	r0, r4
   131c0:	bl	10f1c <fread_unlocked@plt>
   131c4:	mov	r3, r0
   131c8:	str	r3, [fp, #-20]	; 0xffffffec
   131cc:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   131d0:	cmp	r3, #0
   131d4:	beq	132bc <__assert_fail@plt+0x2370>
   131d8:	mov	r3, #0
   131dc:	str	r3, [fp, #-24]	; 0xffffffe8
   131e0:	b	132a0 <__assert_fail@plt+0x2354>
   131e4:	movw	r3, #53604	; 0xd164
   131e8:	movt	r3, #2
   131ec:	ldr	r3, [r3]
   131f0:	ldr	r1, [fp, #-16]
   131f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   131f8:	add	r2, r1, r2
   131fc:	mov	r1, r2
   13200:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13204:	add	r2, r2, r1
   13208:	ldrb	r2, [r2]
   1320c:	mov	r0, r2
   13210:	blx	r3
   13214:	mov	r3, r0
   13218:	cmp	r3, #0
   1321c:	bne	13244 <__assert_fail@plt+0x22f8>
   13220:	ldr	r2, [fp, #-16]
   13224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13228:	add	r3, r2, r3
   1322c:	mov	r2, r3
   13230:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13234:	add	r3, r3, r2
   13238:	ldrb	r3, [r3]
   1323c:	cmp	r3, #61	; 0x3d
   13240:	bne	13254 <__assert_fail@plt+0x2308>
   13244:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13248:	add	r3, r3, #1
   1324c:	str	r3, [fp, #-24]	; 0xffffffe8
   13250:	b	132a0 <__assert_fail@plt+0x2354>
   13254:	ldr	r2, [fp, #-16]
   13258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1325c:	add	r3, r2, r3
   13260:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13264:	add	r0, r2, r3
   13268:	ldr	r2, [fp, #-16]
   1326c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13270:	add	r3, r2, r3
   13274:	add	r3, r3, #1
   13278:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1327c:	add	r1, r2, r3
   13280:	ldr	r3, [fp, #-20]	; 0xffffffec
   13284:	sub	r3, r3, #1
   13288:	str	r3, [fp, #-20]	; 0xffffffec
   1328c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13290:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13294:	sub	r3, r2, r3
   13298:	mov	r2, r3
   1329c:	bl	10d24 <memmove@plt>
   132a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132a4:	cmp	r3, #0
   132a8:	ble	132bc <__assert_fail@plt+0x2370>
   132ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   132b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132b4:	cmp	r2, r3
   132b8:	blt	131e4 <__assert_fail@plt+0x2298>
   132bc:	ldr	r2, [fp, #-16]
   132c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132c4:	add	r3, r2, r3
   132c8:	str	r3, [fp, #-16]
   132cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132d0:	bl	10dd8 <ferror_unlocked@plt>
   132d4:	mov	r3, r0
   132d8:	cmp	r3, #0
   132dc:	beq	1330c <__assert_fail@plt+0x23c0>
   132e0:	bl	10e80 <__errno_location@plt>
   132e4:	mov	r3, r0
   132e8:	ldr	r4, [r3]
   132ec:	movw	r0, #50280	; 0xc468
   132f0:	movt	r0, #1
   132f4:	bl	10e50 <gettext@plt>
   132f8:	mov	r3, r0
   132fc:	mov	r2, r3
   13300:	mov	r1, r4
   13304:	mov	r0, #1
   13308:	bl	10df0 <error@plt>
   1330c:	movw	r3, #53600	; 0xd160
   13310:	movt	r3, #2
   13314:	ldr	r3, [r3]
   13318:	movw	r0, #4200	; 0x1068
   1331c:	blx	r3
   13320:	mov	r2, r0
   13324:	ldr	r3, [fp, #-16]
   13328:	cmp	r3, r2
   1332c:	bge	13344 <__assert_fail@plt+0x23f8>
   13330:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13334:	bl	10f40 <feof_unlocked@plt>
   13338:	mov	r3, r0
   1333c:	cmp	r3, #0
   13340:	beq	13184 <__assert_fail@plt+0x2238>
   13344:	mov	r3, #0
   13348:	str	r3, [fp, #-28]	; 0xffffffe4
   1334c:	b	13448 <__assert_fail@plt+0x24fc>
   13350:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13354:	cmp	r3, #1
   13358:	bne	13368 <__assert_fail@plt+0x241c>
   1335c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13360:	cmp	r3, #0
   13364:	beq	13478 <__assert_fail@plt+0x252c>
   13368:	movw	r3, #4200	; 0x1068
   1336c:	str	r3, [fp, #-68]	; 0xffffffbc
   13370:	movw	r3, #53616	; 0xd170
   13374:	movt	r3, #2
   13378:	ldr	r4, [r3]
   1337c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13380:	cmp	r3, #0
   13384:	bne	13390 <__assert_fail@plt+0x2444>
   13388:	ldr	r2, [fp, #-16]
   1338c:	b	13394 <__assert_fail@plt+0x2448>
   13390:	mov	r2, #0
   13394:	sub	r0, fp, #64	; 0x40
   13398:	sub	r3, fp, #68	; 0x44
   1339c:	str	r3, [sp]
   133a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   133a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   133a8:	blx	r4
   133ac:	mov	r3, r0
   133b0:	strb	r3, [fp, #-37]	; 0xffffffdb
   133b4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   133b8:	mov	r2, r3
   133bc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   133c0:	mov	r1, #1
   133c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   133c8:	bl	10d60 <fwrite_unlocked@plt>
   133cc:	mov	r2, r0
   133d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   133d4:	cmp	r2, r3
   133d8:	bcs	13408 <__assert_fail@plt+0x24bc>
   133dc:	bl	10e80 <__errno_location@plt>
   133e0:	mov	r3, r0
   133e4:	ldr	r4, [r3]
   133e8:	movw	r0, #50236	; 0xc43c
   133ec:	movt	r0, #1
   133f0:	bl	10e50 <gettext@plt>
   133f4:	mov	r3, r0
   133f8:	mov	r2, r3
   133fc:	mov	r1, r4
   13400:	mov	r0, #1
   13404:	bl	10df0 <error@plt>
   13408:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1340c:	eor	r3, r3, #1
   13410:	uxtb	r3, r3
   13414:	cmp	r3, #0
   13418:	beq	1343c <__assert_fail@plt+0x24f0>
   1341c:	movw	r0, #50292	; 0xc474
   13420:	movt	r0, #1
   13424:	bl	10e50 <gettext@plt>
   13428:	mov	r3, r0
   1342c:	mov	r2, r3
   13430:	mov	r1, #0
   13434:	mov	r0, #1
   13438:	bl	10df0 <error@plt>
   1343c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13440:	add	r3, r3, #1
   13444:	str	r3, [fp, #-28]	; 0xffffffe4
   13448:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1344c:	bl	10f40 <feof_unlocked@plt>
   13450:	mov	r3, r0
   13454:	cmp	r3, #0
   13458:	beq	13464 <__assert_fail@plt+0x2518>
   1345c:	mov	r2, #2
   13460:	b	13468 <__assert_fail@plt+0x251c>
   13464:	mov	r2, #1
   13468:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1346c:	cmp	r2, r3
   13470:	bgt	13350 <__assert_fail@plt+0x2404>
   13474:	b	1347c <__assert_fail@plt+0x2530>
   13478:	nop	{0}
   1347c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13480:	bl	10f40 <feof_unlocked@plt>
   13484:	mov	r3, r0
   13488:	cmp	r3, #0
   1348c:	beq	1317c <__assert_fail@plt+0x2230>
   13490:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13494:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13498:	bl	12e08 <__assert_fail@plt+0x1ebc>
   1349c:	nop	{0}
   134a0:	sub	sp, fp, #8
   134a4:	ldr	r4, [sp]
   134a8:	ldr	fp, [sp, #4]
   134ac:	add	sp, sp, #8
   134b0:	pop	{pc}		; (ldr pc, [sp], #4)
   134b4:	str	r4, [sp, #-12]!
   134b8:	str	fp, [sp, #4]
   134bc:	str	lr, [sp, #8]
   134c0:	add	fp, sp, #8
   134c4:	sub	sp, sp, #68	; 0x44
   134c8:	str	r0, [fp, #-56]	; 0xffffffc8
   134cc:	str	r1, [fp, #-60]	; 0xffffffc4
   134d0:	mov	r3, #0
   134d4:	strb	r3, [fp, #-21]	; 0xffffffeb
   134d8:	mov	r3, #0
   134dc:	strb	r3, [fp, #-22]	; 0xffffffea
   134e0:	mov	r3, #76	; 0x4c
   134e4:	str	r3, [fp, #-28]	; 0xffffffe4
   134e8:	mov	r3, #0
   134ec:	str	r3, [fp, #-32]	; 0xffffffe0
   134f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   134f4:	ldr	r3, [r3]
   134f8:	mov	r0, r3
   134fc:	bl	16b70 <__assert_fail@plt+0x5c24>
   13500:	movw	r1, #47868	; 0xbafc
   13504:	movt	r1, #1
   13508:	mov	r0, #6
   1350c:	bl	10ee0 <setlocale@plt>
   13510:	movw	r1, #50308	; 0xc484
   13514:	movt	r1, #1
   13518:	movw	r0, #47892	; 0xbb14
   1351c:	movt	r0, #1
   13520:	bl	10f10 <bindtextdomain@plt>
   13524:	movw	r0, #47892	; 0xbb14
   13528:	movt	r0, #1
   1352c:	bl	10d90 <textdomain@plt>
   13530:	movw	r0, #25752	; 0x6498
   13534:	movt	r0, #1
   13538:	bl	1b95c <__assert_fail@plt+0xaa10>
   1353c:	b	13704 <__assert_fail@plt+0x27b8>
   13540:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13544:	cmp	r3, #105	; 0x69
   13548:	beq	13684 <__assert_fail@plt+0x2738>
   1354c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13550:	cmp	r3, #105	; 0x69
   13554:	bgt	13580 <__assert_fail@plt+0x2634>
   13558:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1355c:	cmn	r3, #2
   13560:	beq	1369c <__assert_fail@plt+0x2750>
   13564:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13568:	cmp	r3, #100	; 0x64
   1356c:	beq	135ac <__assert_fail@plt+0x2660>
   13570:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13574:	cmn	r3, #3
   13578:	beq	136a4 <__assert_fail@plt+0x2758>
   1357c:	b	136fc <__assert_fail@plt+0x27b0>
   13580:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13584:	cmp	r3, #119	; 0x77
   13588:	beq	135b8 <__assert_fail@plt+0x266c>
   1358c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13590:	cmp	r3, #119	; 0x77
   13594:	blt	136fc <__assert_fail@plt+0x27b0>
   13598:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1359c:	sub	r3, r3, #256	; 0x100
   135a0:	cmp	r3, #7
   135a4:	bhi	136fc <__assert_fail@plt+0x27b0>
   135a8:	b	13690 <__assert_fail@plt+0x2744>
   135ac:	mov	r3, #1
   135b0:	strb	r3, [fp, #-21]	; 0xffffffeb
   135b4:	b	13704 <__assert_fail@plt+0x27b8>
   135b8:	movw	r3, #53592	; 0xd158
   135bc:	movt	r3, #2
   135c0:	ldr	r0, [r3]
   135c4:	sub	r2, fp, #52	; 0x34
   135c8:	movw	r3, #47868	; 0xbafc
   135cc:	movt	r3, #1
   135d0:	str	r3, [sp]
   135d4:	mov	r3, r2
   135d8:	mov	r2, #10
   135dc:	mov	r1, #0
   135e0:	bl	1a99c <__assert_fail@plt+0x9a50>
   135e4:	str	r0, [fp, #-40]	; 0xffffffd8
   135e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   135ec:	cmp	r3, #1
   135f0:	bhi	13604 <__assert_fail@plt+0x26b8>
   135f4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   135f8:	cmp	r2, #0
   135fc:	sbcs	r3, r3, #0
   13600:	bge	13648 <__assert_fail@plt+0x26fc>
   13604:	movw	r0, #50332	; 0xc49c
   13608:	movt	r0, #1
   1360c:	bl	10e50 <gettext@plt>
   13610:	mov	r4, r0
   13614:	movw	r3, #53592	; 0xd158
   13618:	movt	r3, #2
   1361c:	ldr	r3, [r3]
   13620:	mov	r0, r3
   13624:	bl	194d0 <__assert_fail@plt+0x8584>
   13628:	mov	r3, r0
   1362c:	str	r3, [sp]
   13630:	mov	r3, r4
   13634:	movw	r2, #50352	; 0xc4b0
   13638:	movt	r2, #1
   1363c:	mov	r1, #0
   13640:	mov	r0, #1
   13644:	bl	10df0 <error@plt>
   13648:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1364c:	cmp	r3, #1
   13650:	beq	13678 <__assert_fail@plt+0x272c>
   13654:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   13658:	mvn	r0, #-2147483648	; 0x80000000
   1365c:	mov	r1, #0
   13660:	cmp	r0, r2
   13664:	sbcs	r3, r1, r3
   13668:	blt	13678 <__assert_fail@plt+0x272c>
   1366c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   13670:	mov	r3, r2
   13674:	b	1367c <__assert_fail@plt+0x2730>
   13678:	mov	r3, #0
   1367c:	str	r3, [fp, #-28]	; 0xffffffe4
   13680:	b	13704 <__assert_fail@plt+0x27b8>
   13684:	mov	r3, #1
   13688:	strb	r3, [fp, #-22]	; 0xffffffea
   1368c:	b	13704 <__assert_fail@plt+0x27b8>
   13690:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13694:	str	r3, [fp, #-32]	; 0xffffffe0
   13698:	b	13704 <__assert_fail@plt+0x27b8>
   1369c:	mov	r0, #0
   136a0:	bl	1129c <__assert_fail@plt+0x350>
   136a4:	movw	r3, #53588	; 0xd154
   136a8:	movt	r3, #2
   136ac:	ldr	r0, [r3]
   136b0:	movw	r3, #53488	; 0xd0f0
   136b4:	movt	r3, #2
   136b8:	ldr	r2, [r3]
   136bc:	mov	r3, #0
   136c0:	str	r3, [sp, #8]
   136c4:	movw	r3, #50360	; 0xc4b8
   136c8:	movt	r3, #1
   136cc:	str	r3, [sp, #4]
   136d0:	movw	r3, #50376	; 0xc4c8
   136d4:	movt	r3, #1
   136d8:	str	r3, [sp]
   136dc:	mov	r3, r2
   136e0:	movw	r2, #47684	; 0xba44
   136e4:	movt	r2, #1
   136e8:	movw	r1, #49816	; 0xc298
   136ec:	movt	r1, #1
   136f0:	bl	19c7c <__assert_fail@plt+0x8d30>
   136f4:	mov	r0, #0
   136f8:	bl	10e44 <exit@plt>
   136fc:	mov	r0, #1
   13700:	bl	1129c <__assert_fail@plt+0x350>
   13704:	mov	r3, #0
   13708:	str	r3, [sp]
   1370c:	movw	r3, #48172	; 0xbc2c
   13710:	movt	r3, #1
   13714:	movw	r2, #50392	; 0xc4d8
   13718:	movt	r2, #1
   1371c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13720:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13724:	bl	10e2c <getopt_long@plt>
   13728:	str	r0, [fp, #-36]	; 0xffffffdc
   1372c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13730:	cmn	r3, #1
   13734:	bne	13540 <__assert_fail@plt+0x25f4>
   13738:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1373c:	sub	r3, r3, #256	; 0x100
   13740:	cmp	r3, #7
   13744:	ldrls	pc, [pc, r3, lsl #2]
   13748:	b	13aac <__assert_fail@plt+0x2b60>
   1374c:	andeq	r3, r1, ip, ror #14
   13750:	ldrdeq	r3, [r1], -r4
   13754:	andeq	r3, r1, ip, lsr r8
   13758:	andeq	r3, r1, r4, lsr #17
   1375c:	andeq	r3, r1, ip, lsl #18
   13760:	andeq	r3, r1, r4, ror r9
   13764:	ldrdeq	r3, [r1], -ip
   13768:	andeq	r3, r1, r4, asr #20
   1376c:	movw	r3, #53600	; 0xd160
   13770:	movt	r3, #2
   13774:	movw	r2, #5444	; 0x1544
   13778:	movt	r2, #1
   1377c:	str	r2, [r3]
   13780:	movw	r3, #53604	; 0xd164
   13784:	movt	r3, #2
   13788:	movw	r2, #21932	; 0x55ac
   1378c:	movt	r2, #1
   13790:	str	r2, [r3]
   13794:	movw	r3, #53608	; 0xd168
   13798:	movt	r3, #2
   1379c:	movw	r2, #20808	; 0x5148
   137a0:	movt	r2, #1
   137a4:	str	r2, [r3]
   137a8:	movw	r3, #53612	; 0xd16c
   137ac:	movt	r3, #2
   137b0:	movw	r2, #5508	; 0x1584
   137b4:	movt	r2, #1
   137b8:	str	r2, [r3]
   137bc:	movw	r3, #53616	; 0xd170
   137c0:	movt	r3, #2
   137c4:	movw	r2, #5564	; 0x15bc
   137c8:	movt	r2, #1
   137cc:	str	r2, [r3]
   137d0:	b	13ad4 <__assert_fail@plt+0x2b88>
   137d4:	movw	r3, #53600	; 0xd160
   137d8:	movt	r3, #2
   137dc:	movw	r2, #5444	; 0x1544
   137e0:	movt	r2, #1
   137e4:	str	r2, [r3]
   137e8:	movw	r3, #53604	; 0xd164
   137ec:	movt	r3, #2
   137f0:	movw	r2, #6056	; 0x17a8
   137f4:	movt	r2, #1
   137f8:	str	r2, [r3]
   137fc:	movw	r3, #53608	; 0xd168
   13800:	movt	r3, #2
   13804:	movw	r2, #5880	; 0x16f8
   13808:	movt	r2, #1
   1380c:	str	r2, [r3]
   13810:	movw	r3, #53612	; 0xd16c
   13814:	movt	r3, #2
   13818:	movw	r2, #6192	; 0x1830
   1381c:	movt	r2, #1
   13820:	str	r2, [r3]
   13824:	movw	r3, #53616	; 0xd170
   13828:	movt	r3, #2
   1382c:	movw	r2, #6256	; 0x1870
   13830:	movt	r2, #1
   13834:	str	r2, [r3]
   13838:	b	13ad4 <__assert_fail@plt+0x2b88>
   1383c:	movw	r3, #53600	; 0xd160
   13840:	movt	r3, #2
   13844:	movw	r2, #6576	; 0x19b0
   13848:	movt	r2, #1
   1384c:	str	r2, [r3]
   13850:	movw	r3, #53604	; 0xd164
   13854:	movt	r3, #2
   13858:	movw	r2, #17220	; 0x4344
   1385c:	movt	r2, #1
   13860:	str	r2, [r3]
   13864:	movw	r3, #53608	; 0xd168
   13868:	movt	r3, #2
   1386c:	movw	r2, #15540	; 0x3cb4
   13870:	movt	r2, #1
   13874:	str	r2, [r3]
   13878:	movw	r3, #53612	; 0xd16c
   1387c:	movt	r3, #2
   13880:	movw	r2, #6644	; 0x19f4
   13884:	movt	r2, #1
   13888:	str	r2, [r3]
   1388c:	movw	r3, #53616	; 0xd170
   13890:	movt	r3, #2
   13894:	movw	r2, #6700	; 0x1a2c
   13898:	movt	r2, #1
   1389c:	str	r2, [r3]
   138a0:	b	13ad4 <__assert_fail@plt+0x2b88>
   138a4:	movw	r3, #53600	; 0xd160
   138a8:	movt	r3, #2
   138ac:	movw	r2, #6576	; 0x19b0
   138b0:	movt	r2, #1
   138b4:	str	r2, [r3]
   138b8:	movw	r3, #53604	; 0xd164
   138bc:	movt	r3, #2
   138c0:	movw	r2, #6812	; 0x1a9c
   138c4:	movt	r2, #1
   138c8:	str	r2, [r3]
   138cc:	movw	r3, #53608	; 0xd168
   138d0:	movt	r3, #2
   138d4:	movw	r2, #6916	; 0x1b04
   138d8:	movt	r2, #1
   138dc:	str	r2, [r3]
   138e0:	movw	r3, #53612	; 0xd16c
   138e4:	movt	r3, #2
   138e8:	movw	r2, #7128	; 0x1bd8
   138ec:	movt	r2, #1
   138f0:	str	r2, [r3]
   138f4:	movw	r3, #53616	; 0xd170
   138f8:	movt	r3, #2
   138fc:	movw	r2, #7192	; 0x1c18
   13900:	movt	r2, #1
   13904:	str	r2, [r3]
   13908:	b	13ad4 <__assert_fail@plt+0x2b88>
   1390c:	movw	r3, #53600	; 0xd160
   13910:	movt	r3, #2
   13914:	movw	r2, #7572	; 0x1d94
   13918:	movt	r2, #1
   1391c:	str	r2, [r3]
   13920:	movw	r3, #53604	; 0xd164
   13924:	movt	r3, #2
   13928:	movw	r2, #7468	; 0x1d2c
   1392c:	movt	r2, #1
   13930:	str	r2, [r3]
   13934:	movw	r3, #53608	; 0xd168
   13938:	movt	r3, #2
   1393c:	movw	r2, #7612	; 0x1dbc
   13940:	movt	r2, #1
   13944:	str	r2, [r3]
   13948:	movw	r3, #53612	; 0xd16c
   1394c:	movt	r3, #2
   13950:	movw	r2, #7784	; 0x1e68
   13954:	movt	r2, #1
   13958:	str	r2, [r3]
   1395c:	movw	r3, #53616	; 0xd170
   13960:	movt	r3, #2
   13964:	movw	r2, #7856	; 0x1eb0
   13968:	movt	r2, #1
   1396c:	str	r2, [r3]
   13970:	b	13ad4 <__assert_fail@plt+0x2b88>
   13974:	movw	r3, #53600	; 0xd160
   13978:	movt	r3, #2
   1397c:	movw	r2, #9952	; 0x26e0
   13980:	movt	r2, #1
   13984:	str	r2, [r3]
   13988:	movw	r3, #53604	; 0xd164
   1398c:	movt	r3, #2
   13990:	movw	r2, #9872	; 0x2690
   13994:	movt	r2, #1
   13998:	str	r2, [r3]
   1399c:	movw	r3, #53608	; 0xd168
   139a0:	movt	r3, #2
   139a4:	movw	r2, #9992	; 0x2708
   139a8:	movt	r2, #1
   139ac:	str	r2, [r3]
   139b0:	movw	r3, #53612	; 0xd16c
   139b4:	movt	r3, #2
   139b8:	movw	r2, #10388	; 0x2894
   139bc:	movt	r2, #1
   139c0:	str	r2, [r3]
   139c4:	movw	r3, #53616	; 0xd170
   139c8:	movt	r3, #2
   139cc:	movw	r2, #10876	; 0x2a7c
   139d0:	movt	r2, #1
   139d4:	str	r2, [r3]
   139d8:	b	13ad4 <__assert_fail@plt+0x2b88>
   139dc:	movw	r3, #53600	; 0xd160
   139e0:	movt	r3, #2
   139e4:	movw	r2, #9952	; 0x26e0
   139e8:	movt	r2, #1
   139ec:	str	r2, [r3]
   139f0:	movw	r3, #53604	; 0xd164
   139f4:	movt	r3, #2
   139f8:	movw	r2, #9872	; 0x2690
   139fc:	movt	r2, #1
   13a00:	str	r2, [r3]
   13a04:	movw	r3, #53608	; 0xd168
   13a08:	movt	r3, #2
   13a0c:	movw	r2, #10188	; 0x27cc
   13a10:	movt	r2, #1
   13a14:	str	r2, [r3]
   13a18:	movw	r3, #53612	; 0xd16c
   13a1c:	movt	r3, #2
   13a20:	movw	r2, #10388	; 0x2894
   13a24:	movt	r2, #1
   13a28:	str	r2, [r3]
   13a2c:	movw	r3, #53616	; 0xd170
   13a30:	movt	r3, #2
   13a34:	movw	r2, #10460	; 0x28dc
   13a38:	movt	r2, #1
   13a3c:	str	r2, [r3]
   13a40:	b	13ad4 <__assert_fail@plt+0x2b88>
   13a44:	movw	r3, #53600	; 0xd160
   13a48:	movt	r3, #2
   13a4c:	movw	r2, #8304	; 0x2070
   13a50:	movt	r2, #1
   13a54:	str	r2, [r3]
   13a58:	movw	r3, #53604	; 0xd164
   13a5c:	movt	r3, #2
   13a60:	movw	r2, #8380	; 0x20bc
   13a64:	movt	r2, #1
   13a68:	str	r2, [r3]
   13a6c:	movw	r3, #53608	; 0xd168
   13a70:	movt	r3, #2
   13a74:	movw	r2, #8500	; 0x2134
   13a78:	movt	r2, #1
   13a7c:	str	r2, [r3]
   13a80:	movw	r3, #53612	; 0xd16c
   13a84:	movt	r3, #2
   13a88:	movw	r2, #9008	; 0x2330
   13a8c:	movt	r2, #1
   13a90:	str	r2, [r3]
   13a94:	movw	r3, #53616	; 0xd170
   13a98:	movt	r3, #2
   13a9c:	movw	r2, #9080	; 0x2378
   13aa0:	movt	r2, #1
   13aa4:	str	r2, [r3]
   13aa8:	b	13ad4 <__assert_fail@plt+0x2b88>
   13aac:	movw	r0, #50400	; 0xc4e0
   13ab0:	movt	r0, #1
   13ab4:	bl	10e50 <gettext@plt>
   13ab8:	mov	r3, r0
   13abc:	mov	r2, r3
   13ac0:	mov	r1, #0
   13ac4:	mov	r0, #0
   13ac8:	bl	10df0 <error@plt>
   13acc:	mov	r0, #1
   13ad0:	bl	1129c <__assert_fail@plt+0x350>
   13ad4:	movw	r3, #53568	; 0xd140
   13ad8:	movt	r3, #2
   13adc:	ldr	r3, [r3]
   13ae0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13ae4:	sub	r3, r2, r3
   13ae8:	cmp	r3, #1
   13aec:	ble	13b44 <__assert_fail@plt+0x2bf8>
   13af0:	movw	r0, #50424	; 0xc4f8
   13af4:	movt	r0, #1
   13af8:	bl	10e50 <gettext@plt>
   13afc:	mov	r4, r0
   13b00:	movw	r3, #53568	; 0xd140
   13b04:	movt	r3, #2
   13b08:	ldr	r3, [r3]
   13b0c:	add	r3, r3, #1
   13b10:	lsl	r3, r3, #2
   13b14:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13b18:	add	r3, r2, r3
   13b1c:	ldr	r3, [r3]
   13b20:	mov	r0, r3
   13b24:	bl	194d0 <__assert_fail@plt+0x8584>
   13b28:	mov	r3, r0
   13b2c:	mov	r2, r4
   13b30:	mov	r1, #0
   13b34:	mov	r0, #0
   13b38:	bl	10df0 <error@plt>
   13b3c:	mov	r0, #1
   13b40:	bl	1129c <__assert_fail@plt+0x350>
   13b44:	movw	r3, #53568	; 0xd140
   13b48:	movt	r3, #2
   13b4c:	ldr	r3, [r3]
   13b50:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b54:	cmp	r2, r3
   13b58:	ble	13b80 <__assert_fail@plt+0x2c34>
   13b5c:	movw	r3, #53568	; 0xd140
   13b60:	movt	r3, #2
   13b64:	ldr	r3, [r3]
   13b68:	lsl	r3, r3, #2
   13b6c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13b70:	add	r3, r2, r3
   13b74:	ldr	r3, [r3]
   13b78:	str	r3, [fp, #-20]	; 0xffffffec
   13b7c:	b	13b8c <__assert_fail@plt+0x2c40>
   13b80:	movw	r3, #50248	; 0xc448
   13b84:	movt	r3, #1
   13b88:	str	r3, [fp, #-20]	; 0xffffffec
   13b8c:	movw	r1, #50248	; 0xc448
   13b90:	movt	r1, #1
   13b94:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b98:	bl	10cf4 <strcmp@plt>
   13b9c:	mov	r3, r0
   13ba0:	cmp	r3, #0
   13ba4:	bne	13bc8 <__assert_fail@plt+0x2c7c>
   13ba8:	mov	r1, #0
   13bac:	mov	r0, #0
   13bb0:	bl	1a6cc <__assert_fail@plt+0x9780>
   13bb4:	movw	r3, #53584	; 0xd150
   13bb8:	movt	r3, #2
   13bbc:	ldr	r3, [r3]
   13bc0:	str	r3, [fp, #-16]
   13bc4:	b	13c1c <__assert_fail@plt+0x2cd0>
   13bc8:	movw	r1, #50444	; 0xc50c
   13bcc:	movt	r1, #1
   13bd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   13bd4:	bl	10f04 <fopen64@plt>
   13bd8:	str	r0, [fp, #-16]
   13bdc:	ldr	r3, [fp, #-16]
   13be0:	cmp	r3, #0
   13be4:	bne	13c1c <__assert_fail@plt+0x2cd0>
   13be8:	bl	10e80 <__errno_location@plt>
   13bec:	mov	r3, r0
   13bf0:	ldr	r4, [r3]
   13bf4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bf8:	mov	r1, #3
   13bfc:	mov	r0, #0
   13c00:	bl	191d4 <__assert_fail@plt+0x8288>
   13c04:	mov	r3, r0
   13c08:	movw	r2, #50276	; 0xc464
   13c0c:	movt	r2, #1
   13c10:	mov	r1, r4
   13c14:	mov	r0, #1
   13c18:	bl	10df0 <error@plt>
   13c1c:	mov	r1, #2
   13c20:	ldr	r0, [fp, #-16]
   13c24:	bl	16634 <__assert_fail@plt+0x56e8>
   13c28:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13c2c:	cmp	r3, #0
   13c30:	beq	13c54 <__assert_fail@plt+0x2d08>
   13c34:	movw	r3, #53588	; 0xd154
   13c38:	movt	r3, #2
   13c3c:	ldr	r2, [r3]
   13c40:	ldrb	r3, [fp, #-22]	; 0xffffffea
   13c44:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c48:	ldr	r0, [fp, #-16]
   13c4c:	bl	13100 <__assert_fail@plt+0x21b4>
   13c50:	b	13c70 <__assert_fail@plt+0x2d24>
   13c54:	movw	r3, #53588	; 0xd154
   13c58:	movt	r3, #2
   13c5c:	ldr	r2, [r3]
   13c60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13c64:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c68:	ldr	r0, [fp, #-16]
   13c6c:	bl	12ebc <__assert_fail@plt+0x1f70>
   13c70:	mov	r3, #0
   13c74:	mov	r0, r3
   13c78:	sub	sp, fp, #8
   13c7c:	ldr	r4, [sp]
   13c80:	ldr	fp, [sp, #4]
   13c84:	add	sp, sp, #8
   13c88:	pop	{pc}		; (ldr pc, [sp], #4)
   13c8c:	push	{fp}		; (str fp, [sp, #-4]!)
   13c90:	add	fp, sp, #0
   13c94:	sub	sp, sp, #12
   13c98:	mov	r3, r0
   13c9c:	strb	r3, [fp, #-5]
   13ca0:	ldrb	r3, [fp, #-5]
   13ca4:	mov	r0, r3
   13ca8:	add	sp, fp, #0
   13cac:	pop	{fp}		; (ldr fp, [sp], #4)
   13cb0:	bx	lr
   13cb4:	str	r4, [sp, #-12]!
   13cb8:	str	fp, [sp, #4]
   13cbc:	str	lr, [sp, #8]
   13cc0:	add	fp, sp, #8
   13cc4:	sub	sp, sp, #20
   13cc8:	str	r0, [fp, #-16]
   13ccc:	str	r1, [fp, #-20]	; 0xffffffec
   13cd0:	str	r2, [fp, #-24]	; 0xffffffe8
   13cd4:	str	r3, [fp, #-28]	; 0xffffffe4
   13cd8:	b	1414c <__assert_fail@plt+0x3200>
   13cdc:	ldr	r3, [fp, #-16]
   13ce0:	ldrb	r3, [r3]
   13ce4:	mov	r0, r3
   13ce8:	bl	13c8c <__assert_fail@plt+0x2d40>
   13cec:	mov	r3, r0
   13cf0:	lsr	r3, r3, #3
   13cf4:	uxtb	r3, r3
   13cf8:	and	r1, r3, #31
   13cfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13d00:	add	r3, r2, #1
   13d04:	str	r3, [fp, #-24]	; 0xffffffe8
   13d08:	movw	r3, #50740	; 0xc634
   13d0c:	movt	r3, #1
   13d10:	ldrb	r3, [r3, r1]
   13d14:	strb	r3, [r2]
   13d18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13d1c:	sub	r3, r3, #1
   13d20:	str	r3, [fp, #-28]	; 0xffffffe4
   13d24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13d28:	cmp	r3, #0
   13d2c:	beq	14168 <__assert_fail@plt+0x321c>
   13d30:	ldr	r3, [fp, #-16]
   13d34:	ldrb	r3, [r3]
   13d38:	mov	r0, r3
   13d3c:	bl	13c8c <__assert_fail@plt+0x2d40>
   13d40:	mov	r3, r0
   13d44:	lsl	r4, r3, #2
   13d48:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d4c:	sub	r3, r3, #1
   13d50:	str	r3, [fp, #-20]	; 0xffffffec
   13d54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d58:	cmp	r3, #0
   13d5c:	beq	13d84 <__assert_fail@plt+0x2e38>
   13d60:	ldr	r3, [fp, #-16]
   13d64:	add	r3, r3, #1
   13d68:	ldrb	r3, [r3]
   13d6c:	mov	r0, r3
   13d70:	bl	13c8c <__assert_fail@plt+0x2d40>
   13d74:	mov	r3, r0
   13d78:	lsr	r3, r3, #6
   13d7c:	uxtb	r3, r3
   13d80:	b	13d88 <__assert_fail@plt+0x2e3c>
   13d84:	mov	r3, #0
   13d88:	add	r3, r3, r4
   13d8c:	and	r1, r3, #31
   13d90:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13d94:	add	r3, r2, #1
   13d98:	str	r3, [fp, #-24]	; 0xffffffe8
   13d9c:	movw	r3, #50740	; 0xc634
   13da0:	movt	r3, #1
   13da4:	ldrb	r3, [r3, r1]
   13da8:	strb	r3, [r2]
   13dac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13db0:	sub	r3, r3, #1
   13db4:	str	r3, [fp, #-28]	; 0xffffffe4
   13db8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13dbc:	cmp	r3, #0
   13dc0:	beq	14170 <__assert_fail@plt+0x3224>
   13dc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dc8:	cmp	r3, #0
   13dcc:	beq	13e04 <__assert_fail@plt+0x2eb8>
   13dd0:	ldr	r3, [fp, #-16]
   13dd4:	add	r3, r3, #1
   13dd8:	ldrb	r3, [r3]
   13ddc:	mov	r0, r3
   13de0:	bl	13c8c <__assert_fail@plt+0x2d40>
   13de4:	mov	r3, r0
   13de8:	lsr	r3, r3, #1
   13dec:	uxtb	r3, r3
   13df0:	and	r2, r3, #31
   13df4:	movw	r3, #50740	; 0xc634
   13df8:	movt	r3, #1
   13dfc:	ldrb	r1, [r3, r2]
   13e00:	b	13e08 <__assert_fail@plt+0x2ebc>
   13e04:	mov	r1, #61	; 0x3d
   13e08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e0c:	add	r2, r3, #1
   13e10:	str	r2, [fp, #-24]	; 0xffffffe8
   13e14:	mov	r2, r1
   13e18:	strb	r2, [r3]
   13e1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e20:	sub	r3, r3, #1
   13e24:	str	r3, [fp, #-28]	; 0xffffffe4
   13e28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e2c:	cmp	r3, #0
   13e30:	beq	14178 <__assert_fail@plt+0x322c>
   13e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e38:	cmp	r3, #0
   13e3c:	beq	13eb4 <__assert_fail@plt+0x2f68>
   13e40:	ldr	r3, [fp, #-16]
   13e44:	add	r3, r3, #1
   13e48:	ldrb	r3, [r3]
   13e4c:	mov	r0, r3
   13e50:	bl	13c8c <__assert_fail@plt+0x2d40>
   13e54:	mov	r3, r0
   13e58:	lsl	r4, r3, #4
   13e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e60:	sub	r3, r3, #1
   13e64:	str	r3, [fp, #-20]	; 0xffffffec
   13e68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e6c:	cmp	r3, #0
   13e70:	beq	13e98 <__assert_fail@plt+0x2f4c>
   13e74:	ldr	r3, [fp, #-16]
   13e78:	add	r3, r3, #2
   13e7c:	ldrb	r3, [r3]
   13e80:	mov	r0, r3
   13e84:	bl	13c8c <__assert_fail@plt+0x2d40>
   13e88:	mov	r3, r0
   13e8c:	lsr	r3, r3, #4
   13e90:	uxtb	r3, r3
   13e94:	b	13e9c <__assert_fail@plt+0x2f50>
   13e98:	mov	r3, #0
   13e9c:	add	r3, r3, r4
   13ea0:	and	r2, r3, #31
   13ea4:	movw	r3, #50740	; 0xc634
   13ea8:	movt	r3, #1
   13eac:	ldrb	r1, [r3, r2]
   13eb0:	b	13eb8 <__assert_fail@plt+0x2f6c>
   13eb4:	mov	r1, #61	; 0x3d
   13eb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ebc:	add	r2, r3, #1
   13ec0:	str	r2, [fp, #-24]	; 0xffffffe8
   13ec4:	mov	r2, r1
   13ec8:	strb	r2, [r3]
   13ecc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ed0:	sub	r3, r3, #1
   13ed4:	str	r3, [fp, #-28]	; 0xffffffe4
   13ed8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13edc:	cmp	r3, #0
   13ee0:	beq	14180 <__assert_fail@plt+0x3234>
   13ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ee8:	cmp	r3, #0
   13eec:	beq	13f64 <__assert_fail@plt+0x3018>
   13ef0:	ldr	r3, [fp, #-16]
   13ef4:	add	r3, r3, #2
   13ef8:	ldrb	r3, [r3]
   13efc:	mov	r0, r3
   13f00:	bl	13c8c <__assert_fail@plt+0x2d40>
   13f04:	mov	r3, r0
   13f08:	lsl	r4, r3, #1
   13f0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f10:	sub	r3, r3, #1
   13f14:	str	r3, [fp, #-20]	; 0xffffffec
   13f18:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f1c:	cmp	r3, #0
   13f20:	beq	13f48 <__assert_fail@plt+0x2ffc>
   13f24:	ldr	r3, [fp, #-16]
   13f28:	add	r3, r3, #3
   13f2c:	ldrb	r3, [r3]
   13f30:	mov	r0, r3
   13f34:	bl	13c8c <__assert_fail@plt+0x2d40>
   13f38:	mov	r3, r0
   13f3c:	lsr	r3, r3, #7
   13f40:	uxtb	r3, r3
   13f44:	b	13f4c <__assert_fail@plt+0x3000>
   13f48:	mov	r3, #0
   13f4c:	add	r3, r3, r4
   13f50:	and	r2, r3, #31
   13f54:	movw	r3, #50740	; 0xc634
   13f58:	movt	r3, #1
   13f5c:	ldrb	r1, [r3, r2]
   13f60:	b	13f68 <__assert_fail@plt+0x301c>
   13f64:	mov	r1, #61	; 0x3d
   13f68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f6c:	add	r2, r3, #1
   13f70:	str	r2, [fp, #-24]	; 0xffffffe8
   13f74:	mov	r2, r1
   13f78:	strb	r2, [r3]
   13f7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f80:	sub	r3, r3, #1
   13f84:	str	r3, [fp, #-28]	; 0xffffffe4
   13f88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f8c:	cmp	r3, #0
   13f90:	beq	14188 <__assert_fail@plt+0x323c>
   13f94:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f98:	cmp	r3, #0
   13f9c:	beq	13fd4 <__assert_fail@plt+0x3088>
   13fa0:	ldr	r3, [fp, #-16]
   13fa4:	add	r3, r3, #3
   13fa8:	ldrb	r3, [r3]
   13fac:	mov	r0, r3
   13fb0:	bl	13c8c <__assert_fail@plt+0x2d40>
   13fb4:	mov	r3, r0
   13fb8:	lsr	r3, r3, #2
   13fbc:	uxtb	r3, r3
   13fc0:	and	r2, r3, #31
   13fc4:	movw	r3, #50740	; 0xc634
   13fc8:	movt	r3, #1
   13fcc:	ldrb	r1, [r3, r2]
   13fd0:	b	13fd8 <__assert_fail@plt+0x308c>
   13fd4:	mov	r1, #61	; 0x3d
   13fd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fdc:	add	r2, r3, #1
   13fe0:	str	r2, [fp, #-24]	; 0xffffffe8
   13fe4:	mov	r2, r1
   13fe8:	strb	r2, [r3]
   13fec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ff0:	sub	r3, r3, #1
   13ff4:	str	r3, [fp, #-28]	; 0xffffffe4
   13ff8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ffc:	cmp	r3, #0
   14000:	beq	14190 <__assert_fail@plt+0x3244>
   14004:	ldr	r3, [fp, #-20]	; 0xffffffec
   14008:	cmp	r3, #0
   1400c:	beq	14084 <__assert_fail@plt+0x3138>
   14010:	ldr	r3, [fp, #-16]
   14014:	add	r3, r3, #3
   14018:	ldrb	r3, [r3]
   1401c:	mov	r0, r3
   14020:	bl	13c8c <__assert_fail@plt+0x2d40>
   14024:	mov	r3, r0
   14028:	lsl	r4, r3, #3
   1402c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14030:	sub	r3, r3, #1
   14034:	str	r3, [fp, #-20]	; 0xffffffec
   14038:	ldr	r3, [fp, #-20]	; 0xffffffec
   1403c:	cmp	r3, #0
   14040:	beq	14068 <__assert_fail@plt+0x311c>
   14044:	ldr	r3, [fp, #-16]
   14048:	add	r3, r3, #4
   1404c:	ldrb	r3, [r3]
   14050:	mov	r0, r3
   14054:	bl	13c8c <__assert_fail@plt+0x2d40>
   14058:	mov	r3, r0
   1405c:	lsr	r3, r3, #5
   14060:	uxtb	r3, r3
   14064:	b	1406c <__assert_fail@plt+0x3120>
   14068:	mov	r3, #0
   1406c:	add	r3, r3, r4
   14070:	and	r2, r3, #31
   14074:	movw	r3, #50740	; 0xc634
   14078:	movt	r3, #1
   1407c:	ldrb	r1, [r3, r2]
   14080:	b	14088 <__assert_fail@plt+0x313c>
   14084:	mov	r1, #61	; 0x3d
   14088:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1408c:	add	r2, r3, #1
   14090:	str	r2, [fp, #-24]	; 0xffffffe8
   14094:	mov	r2, r1
   14098:	strb	r2, [r3]
   1409c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140a0:	sub	r3, r3, #1
   140a4:	str	r3, [fp, #-28]	; 0xffffffe4
   140a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140ac:	cmp	r3, #0
   140b0:	beq	14198 <__assert_fail@plt+0x324c>
   140b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140b8:	cmp	r3, #0
   140bc:	beq	140ec <__assert_fail@plt+0x31a0>
   140c0:	ldr	r3, [fp, #-16]
   140c4:	add	r3, r3, #4
   140c8:	ldrb	r3, [r3]
   140cc:	mov	r0, r3
   140d0:	bl	13c8c <__assert_fail@plt+0x2d40>
   140d4:	mov	r3, r0
   140d8:	and	r2, r3, #31
   140dc:	movw	r3, #50740	; 0xc634
   140e0:	movt	r3, #1
   140e4:	ldrb	r1, [r3, r2]
   140e8:	b	140f0 <__assert_fail@plt+0x31a4>
   140ec:	mov	r1, #61	; 0x3d
   140f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140f4:	add	r2, r3, #1
   140f8:	str	r2, [fp, #-24]	; 0xffffffe8
   140fc:	mov	r2, r1
   14100:	strb	r2, [r3]
   14104:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14108:	sub	r3, r3, #1
   1410c:	str	r3, [fp, #-28]	; 0xffffffe4
   14110:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14114:	cmp	r3, #0
   14118:	beq	141a0 <__assert_fail@plt+0x3254>
   1411c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14120:	cmp	r3, #0
   14124:	beq	14134 <__assert_fail@plt+0x31e8>
   14128:	ldr	r3, [fp, #-20]	; 0xffffffec
   1412c:	sub	r3, r3, #1
   14130:	str	r3, [fp, #-20]	; 0xffffffec
   14134:	ldr	r3, [fp, #-20]	; 0xffffffec
   14138:	cmp	r3, #0
   1413c:	beq	1414c <__assert_fail@plt+0x3200>
   14140:	ldr	r3, [fp, #-16]
   14144:	add	r3, r3, #5
   14148:	str	r3, [fp, #-16]
   1414c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14150:	cmp	r3, #0
   14154:	beq	141a4 <__assert_fail@plt+0x3258>
   14158:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1415c:	cmp	r3, #0
   14160:	bne	13cdc <__assert_fail@plt+0x2d90>
   14164:	b	141a4 <__assert_fail@plt+0x3258>
   14168:	nop	{0}
   1416c:	b	141a4 <__assert_fail@plt+0x3258>
   14170:	nop	{0}
   14174:	b	141a4 <__assert_fail@plt+0x3258>
   14178:	nop	{0}
   1417c:	b	141a4 <__assert_fail@plt+0x3258>
   14180:	nop	{0}
   14184:	b	141a4 <__assert_fail@plt+0x3258>
   14188:	nop	{0}
   1418c:	b	141a4 <__assert_fail@plt+0x3258>
   14190:	nop	{0}
   14194:	b	141a4 <__assert_fail@plt+0x3258>
   14198:	nop	{0}
   1419c:	b	141a4 <__assert_fail@plt+0x3258>
   141a0:	nop	{0}
   141a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   141a8:	cmp	r3, #0
   141ac:	beq	141bc <__assert_fail@plt+0x3270>
   141b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141b4:	mov	r2, #0
   141b8:	strb	r2, [r3]
   141bc:	nop	{0}
   141c0:	sub	sp, fp, #8
   141c4:	ldr	r4, [sp]
   141c8:	ldr	fp, [sp, #4]
   141cc:	add	sp, sp, #8
   141d0:	pop	{pc}		; (ldr pc, [sp], #4)
   141d4:	str	fp, [sp, #-8]!
   141d8:	str	lr, [sp, #4]
   141dc:	add	fp, sp, #4
   141e0:	sub	sp, sp, #24
   141e4:	str	r0, [fp, #-16]
   141e8:	str	r1, [fp, #-20]	; 0xffffffec
   141ec:	str	r2, [fp, #-24]	; 0xffffffe8
   141f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   141f4:	movw	r3, #26215	; 0x6667
   141f8:	movt	r3, #26214	; 0x6666
   141fc:	smull	r1, r3, r3, r2
   14200:	asr	r1, r3, #1
   14204:	asr	r3, r2, #31
   14208:	sub	r0, r1, r3
   1420c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14210:	movw	r3, #26215	; 0x6667
   14214:	movt	r3, #26214	; 0x6666
   14218:	smull	r2, r3, r3, r1
   1421c:	asr	r2, r3, #1
   14220:	asr	r3, r1, #31
   14224:	sub	r2, r2, r3
   14228:	mov	r3, r2
   1422c:	lsl	r3, r3, #2
   14230:	add	r3, r3, r2
   14234:	sub	r2, r1, r3
   14238:	cmp	r2, #0
   1423c:	movne	r3, #1
   14240:	moveq	r3, #0
   14244:	uxtb	r3, r3
   14248:	add	r3, r0, r3
   1424c:	str	r3, [fp, #-8]
   14250:	mov	lr, #0
   14254:	ldr	r3, [fp, #-8]
   14258:	mov	r0, r3
   1425c:	asr	r1, r0, #31
   14260:	mov	r2, #0
   14264:	mov	r3, #0
   14268:	lsl	r3, r1, #3
   1426c:	orr	r3, r3, r0, lsr #29
   14270:	lsl	r2, r0, #3
   14274:	mov	r0, #0
   14278:	mov	r1, #0
   1427c:	mov	r0, r3
   14280:	asr	r1, r3, #31
   14284:	asr	ip, r2, #31
   14288:	cmp	ip, r0
   1428c:	beq	14294 <__assert_fail@plt+0x3348>
   14290:	mov	lr, #1
   14294:	mov	r3, r2
   14298:	str	r3, [fp, #-12]
   1429c:	mov	r3, lr
   142a0:	and	r3, r3, #1
   142a4:	uxtb	r3, r3
   142a8:	cmp	r3, #0
   142ac:	bne	142bc <__assert_fail@plt+0x3370>
   142b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   142b4:	cmp	r3, #0
   142b8:	bge	142d0 <__assert_fail@plt+0x3384>
   142bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142c0:	mov	r2, #0
   142c4:	str	r2, [r3]
   142c8:	mov	r3, #0
   142cc:	b	14330 <__assert_fail@plt+0x33e4>
   142d0:	ldr	r3, [fp, #-12]
   142d4:	add	r3, r3, #1
   142d8:	str	r3, [fp, #-12]
   142dc:	ldr	r3, [fp, #-12]
   142e0:	mov	r0, r3
   142e4:	bl	16a28 <__assert_fail@plt+0x5adc>
   142e8:	mov	r3, r0
   142ec:	mov	r2, r3
   142f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142f4:	str	r2, [r3]
   142f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142fc:	ldr	r3, [r3]
   14300:	cmp	r3, #0
   14304:	bne	14310 <__assert_fail@plt+0x33c4>
   14308:	ldr	r3, [fp, #-12]
   1430c:	b	14330 <__assert_fail@plt+0x33e4>
   14310:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14314:	ldr	r2, [r3]
   14318:	ldr	r3, [fp, #-12]
   1431c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14320:	ldr	r0, [fp, #-16]
   14324:	bl	13cb4 <__assert_fail@plt+0x2d68>
   14328:	ldr	r3, [fp, #-12]
   1432c:	sub	r3, r3, #1
   14330:	mov	r0, r3
   14334:	sub	sp, fp, #4
   14338:	ldr	fp, [sp]
   1433c:	add	sp, sp, #4
   14340:	pop	{pc}		; (ldr pc, [sp], #4)
   14344:	str	fp, [sp, #-8]!
   14348:	str	lr, [sp, #4]
   1434c:	add	fp, sp, #4
   14350:	sub	sp, sp, #8
   14354:	mov	r3, r0
   14358:	strb	r3, [fp, #-5]
   1435c:	ldrb	r3, [fp, #-5]
   14360:	mov	r0, r3
   14364:	bl	13c8c <__assert_fail@plt+0x2d40>
   14368:	mov	r3, r0
   1436c:	mov	r2, r3
   14370:	movw	r3, #50484	; 0xc534
   14374:	movt	r3, #1
   14378:	ldrsb	r3, [r3, r2]
   1437c:	mvn	r3, r3
   14380:	uxtb	r3, r3
   14384:	lsr	r3, r3, #7
   14388:	uxtb	r3, r3
   1438c:	mov	r0, r3
   14390:	sub	sp, fp, #4
   14394:	ldr	fp, [sp]
   14398:	add	sp, sp, #4
   1439c:	pop	{pc}		; (ldr pc, [sp], #4)
   143a0:	push	{fp}		; (str fp, [sp, #-4]!)
   143a4:	add	fp, sp, #0
   143a8:	sub	sp, sp, #12
   143ac:	str	r0, [fp, #-8]
   143b0:	ldr	r3, [fp, #-8]
   143b4:	mov	r2, #0
   143b8:	str	r2, [r3]
   143bc:	nop	{0}
   143c0:	add	sp, fp, #0
   143c4:	pop	{fp}		; (ldr fp, [sp], #4)
   143c8:	bx	lr
   143cc:	str	fp, [sp, #-8]!
   143d0:	str	lr, [sp, #4]
   143d4:	add	fp, sp, #4
   143d8:	sub	sp, sp, #32
   143dc:	str	r0, [fp, #-24]	; 0xffffffe8
   143e0:	str	r1, [fp, #-28]	; 0xffffffe4
   143e4:	str	r2, [fp, #-32]	; 0xffffffe0
   143e8:	str	r3, [fp, #-36]	; 0xffffffdc
   143ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143f0:	ldr	r3, [r3]
   143f4:	cmp	r3, #8
   143f8:	bne	14408 <__assert_fail@plt+0x34bc>
   143fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14400:	mov	r2, #0
   14404:	str	r2, [r3]
   14408:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1440c:	ldr	r3, [r3]
   14410:	cmp	r3, #0
   14414:	bne	14480 <__assert_fail@plt+0x3534>
   14418:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1441c:	ldr	r3, [r3]
   14420:	str	r3, [fp, #-12]
   14424:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14428:	ldr	r3, [r3]
   1442c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14430:	sub	r3, r2, r3
   14434:	cmp	r3, #7
   14438:	ble	14480 <__assert_fail@plt+0x3534>
   1443c:	mov	r2, #8
   14440:	mov	r1, #10
   14444:	ldr	r0, [fp, #-12]
   14448:	bl	10eb0 <memchr@plt>
   1444c:	mov	r3, r0
   14450:	cmp	r3, #0
   14454:	bne	14480 <__assert_fail@plt+0x3534>
   14458:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1445c:	ldr	r3, [r3]
   14460:	add	r2, r3, #8
   14464:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14468:	str	r2, [r3]
   1446c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14470:	mov	r2, #8
   14474:	str	r2, [r3]
   14478:	ldr	r3, [fp, #-12]
   1447c:	b	14520 <__assert_fail@plt+0x35d4>
   14480:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14484:	ldr	r3, [r3]
   14488:	str	r3, [fp, #-8]
   1448c:	b	144e4 <__assert_fail@plt+0x3598>
   14490:	ldr	r3, [fp, #-8]
   14494:	add	r2, r3, #1
   14498:	str	r2, [fp, #-8]
   1449c:	ldrb	r3, [r3]
   144a0:	strb	r3, [fp, #-13]
   144a4:	ldrb	r3, [fp, #-13]
   144a8:	cmp	r3, #10
   144ac:	beq	144e4 <__assert_fail@plt+0x3598>
   144b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144b4:	ldr	r3, [r3]
   144b8:	add	r1, r3, #1
   144bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   144c0:	str	r1, [r2]
   144c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   144c8:	add	r3, r2, r3
   144cc:	ldrb	r2, [fp, #-13]
   144d0:	strb	r2, [r3, #4]
   144d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144d8:	ldr	r3, [r3]
   144dc:	cmp	r3, #8
   144e0:	beq	144f8 <__assert_fail@plt+0x35ac>
   144e4:	ldr	r2, [fp, #-8]
   144e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   144ec:	cmp	r2, r3
   144f0:	bcc	14490 <__assert_fail@plt+0x3544>
   144f4:	b	144fc <__assert_fail@plt+0x35b0>
   144f8:	nop	{0}
   144fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14500:	ldr	r2, [fp, #-8]
   14504:	str	r2, [r3]
   14508:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1450c:	ldr	r2, [r3]
   14510:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14514:	str	r2, [r3]
   14518:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1451c:	add	r3, r3, #4
   14520:	mov	r0, r3
   14524:	sub	sp, fp, #4
   14528:	ldr	fp, [sp]
   1452c:	add	sp, sp, #4
   14530:	pop	{pc}		; (ldr pc, [sp], #4)
   14534:	str	r4, [sp, #-12]!
   14538:	str	fp, [sp, #4]
   1453c:	str	lr, [sp, #8]
   14540:	add	fp, sp, #8
   14544:	sub	sp, sp, #28
   14548:	str	r0, [fp, #-24]	; 0xffffffe8
   1454c:	str	r1, [fp, #-28]	; 0xffffffe4
   14550:	str	r2, [fp, #-32]	; 0xffffffe0
   14554:	str	r3, [fp, #-36]	; 0xffffffdc
   14558:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1455c:	ldr	r3, [r3]
   14560:	str	r3, [fp, #-16]
   14564:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14568:	cmp	r3, #7
   1456c:	bgt	14578 <__assert_fail@plt+0x362c>
   14570:	mov	r3, #0
   14574:	b	14bf4 <__assert_fail@plt+0x3ca8>
   14578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1457c:	ldrb	r3, [r3]
   14580:	mov	r0, r3
   14584:	bl	14344 <__assert_fail@plt+0x33f8>
   14588:	mov	r3, r0
   1458c:	eor	r3, r3, #1
   14590:	uxtb	r3, r3
   14594:	cmp	r3, #0
   14598:	bne	145c4 <__assert_fail@plt+0x3678>
   1459c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145a0:	add	r3, r3, #1
   145a4:	ldrb	r3, [r3]
   145a8:	mov	r0, r3
   145ac:	bl	14344 <__assert_fail@plt+0x33f8>
   145b0:	mov	r3, r0
   145b4:	eor	r3, r3, #1
   145b8:	uxtb	r3, r3
   145bc:	cmp	r3, #0
   145c0:	beq	145cc <__assert_fail@plt+0x3680>
   145c4:	mov	r3, #0
   145c8:	b	14bf4 <__assert_fail@plt+0x3ca8>
   145cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   145d0:	ldr	r3, [r3]
   145d4:	cmp	r3, #0
   145d8:	beq	14668 <__assert_fail@plt+0x371c>
   145dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145e0:	ldrb	r3, [r3]
   145e4:	mov	r0, r3
   145e8:	bl	13c8c <__assert_fail@plt+0x2d40>
   145ec:	mov	r3, r0
   145f0:	mov	r2, r3
   145f4:	movw	r3, #50484	; 0xc534
   145f8:	movt	r3, #1
   145fc:	ldrsb	r3, [r3, r2]
   14600:	lsl	r3, r3, #3
   14604:	sxtb	r4, r3
   14608:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1460c:	add	r3, r3, #1
   14610:	ldrb	r3, [r3]
   14614:	mov	r0, r3
   14618:	bl	13c8c <__assert_fail@plt+0x2d40>
   1461c:	mov	r3, r0
   14620:	mov	r2, r3
   14624:	movw	r3, #50484	; 0xc534
   14628:	movt	r3, #1
   1462c:	ldrsb	r3, [r3, r2]
   14630:	asr	r3, r3, #2
   14634:	sxtb	r3, r3
   14638:	orr	r3, r4, r3
   1463c:	sxtb	r1, r3
   14640:	ldr	r3, [fp, #-16]
   14644:	add	r2, r3, #1
   14648:	str	r2, [fp, #-16]
   1464c:	uxtb	r2, r1
   14650:	strb	r2, [r3]
   14654:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14658:	ldr	r3, [r3]
   1465c:	sub	r2, r3, #1
   14660:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14664:	str	r2, [r3]
   14668:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1466c:	add	r3, r3, #2
   14670:	ldrb	r3, [r3]
   14674:	cmp	r3, #61	; 0x3d
   14678:	bne	146f4 <__assert_fail@plt+0x37a8>
   1467c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14680:	add	r3, r3, #3
   14684:	ldrb	r3, [r3]
   14688:	cmp	r3, #61	; 0x3d
   1468c:	bne	146e0 <__assert_fail@plt+0x3794>
   14690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14694:	add	r3, r3, #4
   14698:	ldrb	r3, [r3]
   1469c:	cmp	r3, #61	; 0x3d
   146a0:	bne	146e0 <__assert_fail@plt+0x3794>
   146a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146a8:	add	r3, r3, #5
   146ac:	ldrb	r3, [r3]
   146b0:	cmp	r3, #61	; 0x3d
   146b4:	bne	146e0 <__assert_fail@plt+0x3794>
   146b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146bc:	add	r3, r3, #6
   146c0:	ldrb	r3, [r3]
   146c4:	cmp	r3, #61	; 0x3d
   146c8:	bne	146e0 <__assert_fail@plt+0x3794>
   146cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146d0:	add	r3, r3, #7
   146d4:	ldrb	r3, [r3]
   146d8:	cmp	r3, #61	; 0x3d
   146dc:	beq	14be4 <__assert_fail@plt+0x3c98>
   146e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146e4:	ldr	r2, [fp, #-16]
   146e8:	str	r2, [r3]
   146ec:	mov	r3, #0
   146f0:	b	14bf4 <__assert_fail@plt+0x3ca8>
   146f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146f8:	add	r3, r3, #2
   146fc:	ldrb	r3, [r3]
   14700:	mov	r0, r3
   14704:	bl	14344 <__assert_fail@plt+0x33f8>
   14708:	mov	r3, r0
   1470c:	eor	r3, r3, #1
   14710:	uxtb	r3, r3
   14714:	cmp	r3, #0
   14718:	bne	14744 <__assert_fail@plt+0x37f8>
   1471c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14720:	add	r3, r3, #3
   14724:	ldrb	r3, [r3]
   14728:	mov	r0, r3
   1472c:	bl	14344 <__assert_fail@plt+0x33f8>
   14730:	mov	r3, r0
   14734:	eor	r3, r3, #1
   14738:	uxtb	r3, r3
   1473c:	cmp	r3, #0
   14740:	beq	14758 <__assert_fail@plt+0x380c>
   14744:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14748:	ldr	r2, [fp, #-16]
   1474c:	str	r2, [r3]
   14750:	mov	r3, #0
   14754:	b	14bf4 <__assert_fail@plt+0x3ca8>
   14758:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1475c:	ldr	r3, [r3]
   14760:	cmp	r3, #0
   14764:	beq	14830 <__assert_fail@plt+0x38e4>
   14768:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1476c:	add	r3, r3, #1
   14770:	ldrb	r3, [r3]
   14774:	mov	r0, r3
   14778:	bl	13c8c <__assert_fail@plt+0x2d40>
   1477c:	mov	r3, r0
   14780:	mov	r2, r3
   14784:	movw	r3, #50484	; 0xc534
   14788:	movt	r3, #1
   1478c:	ldrsb	r3, [r3, r2]
   14790:	lsl	r3, r3, #6
   14794:	sxtb	r4, r3
   14798:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1479c:	add	r3, r3, #2
   147a0:	ldrb	r3, [r3]
   147a4:	mov	r0, r3
   147a8:	bl	13c8c <__assert_fail@plt+0x2d40>
   147ac:	mov	r3, r0
   147b0:	mov	r2, r3
   147b4:	movw	r3, #50484	; 0xc534
   147b8:	movt	r3, #1
   147bc:	ldrsb	r3, [r3, r2]
   147c0:	lsl	r3, r3, #1
   147c4:	sxtb	r3, r3
   147c8:	orr	r3, r4, r3
   147cc:	sxtb	r4, r3
   147d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147d4:	add	r3, r3, #3
   147d8:	ldrb	r3, [r3]
   147dc:	mov	r0, r3
   147e0:	bl	13c8c <__assert_fail@plt+0x2d40>
   147e4:	mov	r3, r0
   147e8:	mov	r2, r3
   147ec:	movw	r3, #50484	; 0xc534
   147f0:	movt	r3, #1
   147f4:	ldrsb	r3, [r3, r2]
   147f8:	asr	r3, r3, #4
   147fc:	sxtb	r3, r3
   14800:	orr	r3, r4, r3
   14804:	sxtb	r1, r3
   14808:	ldr	r3, [fp, #-16]
   1480c:	add	r2, r3, #1
   14810:	str	r2, [fp, #-16]
   14814:	uxtb	r2, r1
   14818:	strb	r2, [r3]
   1481c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14820:	ldr	r3, [r3]
   14824:	sub	r2, r3, #1
   14828:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1482c:	str	r2, [r3]
   14830:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14834:	add	r3, r3, #4
   14838:	ldrb	r3, [r3]
   1483c:	cmp	r3, #61	; 0x3d
   14840:	bne	14894 <__assert_fail@plt+0x3948>
   14844:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14848:	add	r3, r3, #5
   1484c:	ldrb	r3, [r3]
   14850:	cmp	r3, #61	; 0x3d
   14854:	bne	14880 <__assert_fail@plt+0x3934>
   14858:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1485c:	add	r3, r3, #6
   14860:	ldrb	r3, [r3]
   14864:	cmp	r3, #61	; 0x3d
   14868:	bne	14880 <__assert_fail@plt+0x3934>
   1486c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14870:	add	r3, r3, #7
   14874:	ldrb	r3, [r3]
   14878:	cmp	r3, #61	; 0x3d
   1487c:	beq	14be4 <__assert_fail@plt+0x3c98>
   14880:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14884:	ldr	r2, [fp, #-16]
   14888:	str	r2, [r3]
   1488c:	mov	r3, #0
   14890:	b	14bf4 <__assert_fail@plt+0x3ca8>
   14894:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14898:	add	r3, r3, #4
   1489c:	ldrb	r3, [r3]
   148a0:	mov	r0, r3
   148a4:	bl	14344 <__assert_fail@plt+0x33f8>
   148a8:	mov	r3, r0
   148ac:	eor	r3, r3, #1
   148b0:	uxtb	r3, r3
   148b4:	cmp	r3, #0
   148b8:	beq	148d0 <__assert_fail@plt+0x3984>
   148bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   148c0:	ldr	r2, [fp, #-16]
   148c4:	str	r2, [r3]
   148c8:	mov	r3, #0
   148cc:	b	14bf4 <__assert_fail@plt+0x3ca8>
   148d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   148d4:	ldr	r3, [r3]
   148d8:	cmp	r3, #0
   148dc:	beq	14970 <__assert_fail@plt+0x3a24>
   148e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   148e4:	add	r3, r3, #3
   148e8:	ldrb	r3, [r3]
   148ec:	mov	r0, r3
   148f0:	bl	13c8c <__assert_fail@plt+0x2d40>
   148f4:	mov	r3, r0
   148f8:	mov	r2, r3
   148fc:	movw	r3, #50484	; 0xc534
   14900:	movt	r3, #1
   14904:	ldrsb	r3, [r3, r2]
   14908:	lsl	r3, r3, #4
   1490c:	sxtb	r4, r3
   14910:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14914:	add	r3, r3, #4
   14918:	ldrb	r3, [r3]
   1491c:	mov	r0, r3
   14920:	bl	13c8c <__assert_fail@plt+0x2d40>
   14924:	mov	r3, r0
   14928:	mov	r2, r3
   1492c:	movw	r3, #50484	; 0xc534
   14930:	movt	r3, #1
   14934:	ldrsb	r3, [r3, r2]
   14938:	asr	r3, r3, #1
   1493c:	sxtb	r3, r3
   14940:	orr	r3, r4, r3
   14944:	sxtb	r1, r3
   14948:	ldr	r3, [fp, #-16]
   1494c:	add	r2, r3, #1
   14950:	str	r2, [fp, #-16]
   14954:	uxtb	r2, r1
   14958:	strb	r2, [r3]
   1495c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14960:	ldr	r3, [r3]
   14964:	sub	r2, r3, #1
   14968:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1496c:	str	r2, [r3]
   14970:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14974:	add	r3, r3, #5
   14978:	ldrb	r3, [r3]
   1497c:	cmp	r3, #61	; 0x3d
   14980:	bne	149c0 <__assert_fail@plt+0x3a74>
   14984:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14988:	add	r3, r3, #6
   1498c:	ldrb	r3, [r3]
   14990:	cmp	r3, #61	; 0x3d
   14994:	bne	149ac <__assert_fail@plt+0x3a60>
   14998:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1499c:	add	r3, r3, #7
   149a0:	ldrb	r3, [r3]
   149a4:	cmp	r3, #61	; 0x3d
   149a8:	beq	14be4 <__assert_fail@plt+0x3c98>
   149ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   149b0:	ldr	r2, [fp, #-16]
   149b4:	str	r2, [r3]
   149b8:	mov	r3, #0
   149bc:	b	14bf4 <__assert_fail@plt+0x3ca8>
   149c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149c4:	add	r3, r3, #5
   149c8:	ldrb	r3, [r3]
   149cc:	mov	r0, r3
   149d0:	bl	14344 <__assert_fail@plt+0x33f8>
   149d4:	mov	r3, r0
   149d8:	eor	r3, r3, #1
   149dc:	uxtb	r3, r3
   149e0:	cmp	r3, #0
   149e4:	bne	14a10 <__assert_fail@plt+0x3ac4>
   149e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149ec:	add	r3, r3, #6
   149f0:	ldrb	r3, [r3]
   149f4:	mov	r0, r3
   149f8:	bl	14344 <__assert_fail@plt+0x33f8>
   149fc:	mov	r3, r0
   14a00:	eor	r3, r3, #1
   14a04:	uxtb	r3, r3
   14a08:	cmp	r3, #0
   14a0c:	beq	14a24 <__assert_fail@plt+0x3ad8>
   14a10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14a14:	ldr	r2, [fp, #-16]
   14a18:	str	r2, [r3]
   14a1c:	mov	r3, #0
   14a20:	b	14bf4 <__assert_fail@plt+0x3ca8>
   14a24:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14a28:	ldr	r3, [r3]
   14a2c:	cmp	r3, #0
   14a30:	beq	14afc <__assert_fail@plt+0x3bb0>
   14a34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a38:	add	r3, r3, #4
   14a3c:	ldrb	r3, [r3]
   14a40:	mov	r0, r3
   14a44:	bl	13c8c <__assert_fail@plt+0x2d40>
   14a48:	mov	r3, r0
   14a4c:	mov	r2, r3
   14a50:	movw	r3, #50484	; 0xc534
   14a54:	movt	r3, #1
   14a58:	ldrsb	r3, [r3, r2]
   14a5c:	lsl	r3, r3, #7
   14a60:	sxtb	r4, r3
   14a64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a68:	add	r3, r3, #5
   14a6c:	ldrb	r3, [r3]
   14a70:	mov	r0, r3
   14a74:	bl	13c8c <__assert_fail@plt+0x2d40>
   14a78:	mov	r3, r0
   14a7c:	mov	r2, r3
   14a80:	movw	r3, #50484	; 0xc534
   14a84:	movt	r3, #1
   14a88:	ldrsb	r3, [r3, r2]
   14a8c:	lsl	r3, r3, #2
   14a90:	sxtb	r3, r3
   14a94:	orr	r3, r4, r3
   14a98:	sxtb	r4, r3
   14a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14aa0:	add	r3, r3, #6
   14aa4:	ldrb	r3, [r3]
   14aa8:	mov	r0, r3
   14aac:	bl	13c8c <__assert_fail@plt+0x2d40>
   14ab0:	mov	r3, r0
   14ab4:	mov	r2, r3
   14ab8:	movw	r3, #50484	; 0xc534
   14abc:	movt	r3, #1
   14ac0:	ldrsb	r3, [r3, r2]
   14ac4:	asr	r3, r3, #3
   14ac8:	sxtb	r3, r3
   14acc:	orr	r3, r4, r3
   14ad0:	sxtb	r1, r3
   14ad4:	ldr	r3, [fp, #-16]
   14ad8:	add	r2, r3, #1
   14adc:	str	r2, [fp, #-16]
   14ae0:	uxtb	r2, r1
   14ae4:	strb	r2, [r3]
   14ae8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14aec:	ldr	r3, [r3]
   14af0:	sub	r2, r3, #1
   14af4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14af8:	str	r2, [r3]
   14afc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b00:	add	r3, r3, #7
   14b04:	ldrb	r3, [r3]
   14b08:	cmp	r3, #61	; 0x3d
   14b0c:	beq	14be4 <__assert_fail@plt+0x3c98>
   14b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b14:	add	r3, r3, #7
   14b18:	ldrb	r3, [r3]
   14b1c:	mov	r0, r3
   14b20:	bl	14344 <__assert_fail@plt+0x33f8>
   14b24:	mov	r3, r0
   14b28:	eor	r3, r3, #1
   14b2c:	uxtb	r3, r3
   14b30:	cmp	r3, #0
   14b34:	beq	14b4c <__assert_fail@plt+0x3c00>
   14b38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14b3c:	ldr	r2, [fp, #-16]
   14b40:	str	r2, [r3]
   14b44:	mov	r3, #0
   14b48:	b	14bf4 <__assert_fail@plt+0x3ca8>
   14b4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14b50:	ldr	r3, [r3]
   14b54:	cmp	r3, #0
   14b58:	beq	14be4 <__assert_fail@plt+0x3c98>
   14b5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b60:	add	r3, r3, #6
   14b64:	ldrb	r3, [r3]
   14b68:	mov	r0, r3
   14b6c:	bl	13c8c <__assert_fail@plt+0x2d40>
   14b70:	mov	r3, r0
   14b74:	mov	r2, r3
   14b78:	movw	r3, #50484	; 0xc534
   14b7c:	movt	r3, #1
   14b80:	ldrsb	r3, [r3, r2]
   14b84:	lsl	r3, r3, #5
   14b88:	sxtb	r4, r3
   14b8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b90:	add	r3, r3, #7
   14b94:	ldrb	r3, [r3]
   14b98:	mov	r0, r3
   14b9c:	bl	13c8c <__assert_fail@plt+0x2d40>
   14ba0:	mov	r3, r0
   14ba4:	mov	r2, r3
   14ba8:	movw	r3, #50484	; 0xc534
   14bac:	movt	r3, #1
   14bb0:	ldrsb	r3, [r3, r2]
   14bb4:	orr	r3, r4, r3
   14bb8:	sxtb	r1, r3
   14bbc:	ldr	r3, [fp, #-16]
   14bc0:	add	r2, r3, #1
   14bc4:	str	r2, [fp, #-16]
   14bc8:	uxtb	r2, r1
   14bcc:	strb	r2, [r3]
   14bd0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14bd4:	ldr	r3, [r3]
   14bd8:	sub	r2, r3, #1
   14bdc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14be0:	str	r2, [r3]
   14be4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14be8:	ldr	r2, [fp, #-16]
   14bec:	str	r2, [r3]
   14bf0:	mov	r3, #1
   14bf4:	mov	r0, r3
   14bf8:	sub	sp, fp, #8
   14bfc:	ldr	r4, [sp]
   14c00:	ldr	fp, [sp, #4]
   14c04:	add	sp, sp, #8
   14c08:	pop	{pc}		; (ldr pc, [sp], #4)
   14c0c:	str	fp, [sp, #-8]!
   14c10:	str	lr, [sp, #4]
   14c14:	add	fp, sp, #4
   14c18:	sub	sp, sp, #48	; 0x30
   14c1c:	str	r0, [fp, #-40]	; 0xffffffd8
   14c20:	str	r1, [fp, #-44]	; 0xffffffd4
   14c24:	str	r2, [fp, #-48]	; 0xffffffd0
   14c28:	str	r3, [fp, #-52]	; 0xffffffcc
   14c2c:	ldr	r3, [fp, #4]
   14c30:	ldr	r3, [r3]
   14c34:	str	r3, [fp, #-32]	; 0xffffffe0
   14c38:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14c3c:	cmp	r3, #0
   14c40:	movne	r3, #1
   14c44:	moveq	r3, #0
   14c48:	strb	r3, [fp, #-21]	; 0xffffffeb
   14c4c:	mov	r3, #0
   14c50:	strb	r3, [fp, #-5]
   14c54:	mov	r3, #0
   14c58:	str	r3, [fp, #-12]
   14c5c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14c60:	cmp	r3, #0
   14c64:	beq	14c88 <__assert_fail@plt+0x3d3c>
   14c68:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14c6c:	ldr	r3, [r3]
   14c70:	str	r3, [fp, #-12]
   14c74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14c78:	cmp	r3, #0
   14c7c:	moveq	r3, #1
   14c80:	movne	r3, #0
   14c84:	strb	r3, [fp, #-5]
   14c88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14c8c:	str	r3, [fp, #-16]
   14c90:	ldr	r3, [fp, #-12]
   14c94:	cmp	r3, #0
   14c98:	bne	14d00 <__assert_fail@plt+0x3db4>
   14c9c:	ldrb	r3, [fp, #-5]
   14ca0:	eor	r3, r3, #1
   14ca4:	uxtb	r3, r3
   14ca8:	cmp	r3, #0
   14cac:	beq	14d00 <__assert_fail@plt+0x3db4>
   14cb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14cb4:	str	r3, [fp, #-16]
   14cb8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14cbc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14cc0:	sub	r3, fp, #32
   14cc4:	sub	r2, fp, #52	; 0x34
   14cc8:	bl	14534 <__assert_fail@plt+0x35e8>
   14ccc:	mov	r3, r0
   14cd0:	eor	r3, r3, #1
   14cd4:	uxtb	r3, r3
   14cd8:	cmp	r3, #0
   14cdc:	bne	14cfc <__assert_fail@plt+0x3db0>
   14ce0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ce4:	add	r3, r3, #8
   14ce8:	str	r3, [fp, #-44]	; 0xffffffd4
   14cec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14cf0:	sub	r3, r3, #8
   14cf4:	str	r3, [fp, #-48]	; 0xffffffd0
   14cf8:	b	14cb0 <__assert_fail@plt+0x3d64>
   14cfc:	nop	{0}
   14d00:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d04:	cmp	r3, #0
   14d08:	bne	14d20 <__assert_fail@plt+0x3dd4>
   14d0c:	ldrb	r3, [fp, #-5]
   14d10:	eor	r3, r3, #1
   14d14:	uxtb	r3, r3
   14d18:	cmp	r3, #0
   14d1c:	bne	14e48 <__assert_fail@plt+0x3efc>
   14d20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d24:	cmp	r3, #0
   14d28:	beq	14d64 <__assert_fail@plt+0x3e18>
   14d2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d30:	ldrb	r3, [r3]
   14d34:	cmp	r3, #10
   14d38:	bne	14d64 <__assert_fail@plt+0x3e18>
   14d3c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14d40:	cmp	r3, #0
   14d44:	beq	14d64 <__assert_fail@plt+0x3e18>
   14d48:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d4c:	add	r3, r3, #1
   14d50:	str	r3, [fp, #-44]	; 0xffffffd4
   14d54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d58:	sub	r3, r3, #1
   14d5c:	str	r3, [fp, #-48]	; 0xffffffd0
   14d60:	b	14e44 <__assert_fail@plt+0x3ef8>
   14d64:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14d68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14d6c:	ldr	r1, [fp, #-16]
   14d70:	sub	r3, r1, r3
   14d74:	rsb	r3, r3, #0
   14d78:	add	r3, r2, r3
   14d7c:	str	r3, [fp, #-52]	; 0xffffffcc
   14d80:	ldr	r3, [fp, #-16]
   14d84:	str	r3, [fp, #-32]	; 0xffffffe0
   14d88:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d8c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14d90:	add	r3, r3, r2
   14d94:	str	r3, [fp, #-28]	; 0xffffffe4
   14d98:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14d9c:	cmp	r3, #0
   14da0:	beq	14dc0 <__assert_fail@plt+0x3e74>
   14da4:	sub	r3, fp, #48	; 0x30
   14da8:	sub	r1, fp, #44	; 0x2c
   14dac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14db0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14db4:	bl	143cc <__assert_fail@plt+0x3480>
   14db8:	str	r0, [fp, #-20]	; 0xffffffec
   14dbc:	b	14dc8 <__assert_fail@plt+0x3e7c>
   14dc0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14dc4:	str	r3, [fp, #-20]	; 0xffffffec
   14dc8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14dcc:	cmp	r3, #0
   14dd0:	beq	14e00 <__assert_fail@plt+0x3eb4>
   14dd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14dd8:	cmp	r3, #7
   14ddc:	bgt	14e0c <__assert_fail@plt+0x3ec0>
   14de0:	ldrb	r3, [fp, #-5]
   14de4:	eor	r3, r3, #1
   14de8:	uxtb	r3, r3
   14dec:	cmp	r3, #0
   14df0:	beq	14e0c <__assert_fail@plt+0x3ec0>
   14df4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14df8:	cmp	r3, #0
   14dfc:	beq	14e0c <__assert_fail@plt+0x3ec0>
   14e00:	mov	r3, #0
   14e04:	str	r3, [fp, #-48]	; 0xffffffd0
   14e08:	b	14e54 <__assert_fail@plt+0x3f08>
   14e0c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14e10:	sub	r3, fp, #32
   14e14:	sub	r2, fp, #52	; 0x34
   14e18:	ldr	r0, [fp, #-20]	; 0xffffffec
   14e1c:	bl	14534 <__assert_fail@plt+0x35e8>
   14e20:	mov	r3, r0
   14e24:	eor	r3, r3, #1
   14e28:	uxtb	r3, r3
   14e2c:	cmp	r3, #0
   14e30:	bne	14e50 <__assert_fail@plt+0x3f04>
   14e34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e38:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14e3c:	sub	r3, r2, r3
   14e40:	str	r3, [fp, #-48]	; 0xffffffd0
   14e44:	b	14c88 <__assert_fail@plt+0x3d3c>
   14e48:	nop	{0}
   14e4c:	b	14e54 <__assert_fail@plt+0x3f08>
   14e50:	nop	{0}
   14e54:	ldr	r3, [fp, #4]
   14e58:	ldr	r2, [r3]
   14e5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14e60:	sub	r2, r2, r3
   14e64:	ldr	r3, [fp, #4]
   14e68:	str	r2, [r3]
   14e6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14e70:	cmp	r3, #0
   14e74:	moveq	r3, #1
   14e78:	movne	r3, #0
   14e7c:	uxtb	r3, r3
   14e80:	mov	r0, r3
   14e84:	sub	sp, fp, #4
   14e88:	ldr	fp, [sp]
   14e8c:	add	sp, sp, #4
   14e90:	pop	{pc}		; (ldr pc, [sp], #4)
   14e94:	str	fp, [sp, #-8]!
   14e98:	str	lr, [sp, #4]
   14e9c:	add	fp, sp, #4
   14ea0:	sub	sp, sp, #32
   14ea4:	str	r0, [fp, #-16]
   14ea8:	str	r1, [fp, #-20]	; 0xffffffec
   14eac:	str	r2, [fp, #-24]	; 0xffffffe8
   14eb0:	str	r3, [fp, #-28]	; 0xffffffe4
   14eb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14eb8:	asr	r3, r3, #3
   14ebc:	add	r2, r3, #1
   14ec0:	mov	r3, r2
   14ec4:	lsl	r3, r3, #2
   14ec8:	add	r3, r3, r2
   14ecc:	str	r3, [fp, #-8]
   14ed0:	ldr	r3, [fp, #-8]
   14ed4:	mov	r0, r3
   14ed8:	bl	16a28 <__assert_fail@plt+0x5adc>
   14edc:	mov	r3, r0
   14ee0:	mov	r2, r3
   14ee4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ee8:	str	r2, [r3]
   14eec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ef0:	ldr	r3, [r3]
   14ef4:	cmp	r3, #0
   14ef8:	bne	14f04 <__assert_fail@plt+0x3fb8>
   14efc:	mov	r3, #1
   14f00:	b	14f7c <__assert_fail@plt+0x4030>
   14f04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f08:	ldr	r2, [r3]
   14f0c:	sub	r3, fp, #8
   14f10:	str	r3, [sp]
   14f14:	mov	r3, r2
   14f18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14f1c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14f20:	ldr	r0, [fp, #-16]
   14f24:	bl	14c0c <__assert_fail@plt+0x3cc0>
   14f28:	mov	r3, r0
   14f2c:	eor	r3, r3, #1
   14f30:	uxtb	r3, r3
   14f34:	cmp	r3, #0
   14f38:	beq	14f60 <__assert_fail@plt+0x4014>
   14f3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f40:	ldr	r3, [r3]
   14f44:	mov	r0, r3
   14f48:	bl	16860 <__assert_fail@plt+0x5914>
   14f4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f50:	mov	r2, #0
   14f54:	str	r2, [r3]
   14f58:	mov	r3, #0
   14f5c:	b	14f7c <__assert_fail@plt+0x4030>
   14f60:	ldr	r3, [fp, #4]
   14f64:	cmp	r3, #0
   14f68:	beq	14f78 <__assert_fail@plt+0x402c>
   14f6c:	ldr	r2, [fp, #-8]
   14f70:	ldr	r3, [fp, #4]
   14f74:	str	r2, [r3]
   14f78:	mov	r3, #1
   14f7c:	mov	r0, r3
   14f80:	sub	sp, fp, #4
   14f84:	ldr	fp, [sp]
   14f88:	add	sp, sp, #4
   14f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f90:	push	{fp}		; (str fp, [sp, #-4]!)
   14f94:	add	fp, sp, #0
   14f98:	sub	sp, sp, #12
   14f9c:	mov	r3, r0
   14fa0:	strb	r3, [fp, #-5]
   14fa4:	ldrb	r3, [fp, #-5]
   14fa8:	mov	r0, r3
   14fac:	add	sp, fp, #0
   14fb0:	pop	{fp}		; (ldr fp, [sp], #4)
   14fb4:	bx	lr
   14fb8:	str	r4, [sp, #-12]!
   14fbc:	str	fp, [sp, #4]
   14fc0:	str	lr, [sp, #8]
   14fc4:	add	fp, sp, #8
   14fc8:	sub	sp, sp, #20
   14fcc:	str	r0, [fp, #-16]
   14fd0:	str	r1, [fp, #-20]	; 0xffffffec
   14fd4:	str	r2, [fp, #-24]	; 0xffffffe8
   14fd8:	b	15124 <__assert_fail@plt+0x41d8>
   14fdc:	ldr	r3, [fp, #-16]
   14fe0:	ldrb	r3, [r3]
   14fe4:	mov	r0, r3
   14fe8:	bl	14f90 <__assert_fail@plt+0x4044>
   14fec:	mov	r3, r0
   14ff0:	lsr	r3, r3, #2
   14ff4:	uxtb	r3, r3
   14ff8:	and	r1, r3, #63	; 0x3f
   14ffc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15000:	add	r3, r2, #1
   15004:	str	r3, [fp, #-24]	; 0xffffffe8
   15008:	movw	r3, #50772	; 0xc654
   1500c:	movt	r3, #1
   15010:	ldrb	r3, [r3, r1]
   15014:	strb	r3, [r2]
   15018:	ldr	r3, [fp, #-16]
   1501c:	ldrb	r3, [r3]
   15020:	mov	r0, r3
   15024:	bl	14f90 <__assert_fail@plt+0x4044>
   15028:	mov	r3, r0
   1502c:	lsl	r4, r3, #4
   15030:	ldr	r3, [fp, #-16]
   15034:	add	r3, r3, #1
   15038:	ldrb	r3, [r3]
   1503c:	mov	r0, r3
   15040:	bl	14f90 <__assert_fail@plt+0x4044>
   15044:	mov	r3, r0
   15048:	lsr	r3, r3, #4
   1504c:	uxtb	r3, r3
   15050:	add	r3, r4, r3
   15054:	and	r1, r3, #63	; 0x3f
   15058:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1505c:	add	r3, r2, #1
   15060:	str	r3, [fp, #-24]	; 0xffffffe8
   15064:	movw	r3, #50772	; 0xc654
   15068:	movt	r3, #1
   1506c:	ldrb	r3, [r3, r1]
   15070:	strb	r3, [r2]
   15074:	ldr	r3, [fp, #-16]
   15078:	add	r3, r3, #1
   1507c:	ldrb	r3, [r3]
   15080:	mov	r0, r3
   15084:	bl	14f90 <__assert_fail@plt+0x4044>
   15088:	mov	r3, r0
   1508c:	lsl	r4, r3, #2
   15090:	ldr	r3, [fp, #-16]
   15094:	add	r3, r3, #2
   15098:	ldrb	r3, [r3]
   1509c:	mov	r0, r3
   150a0:	bl	14f90 <__assert_fail@plt+0x4044>
   150a4:	mov	r3, r0
   150a8:	lsr	r3, r3, #6
   150ac:	uxtb	r3, r3
   150b0:	add	r3, r4, r3
   150b4:	and	r1, r3, #63	; 0x3f
   150b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   150bc:	add	r3, r2, #1
   150c0:	str	r3, [fp, #-24]	; 0xffffffe8
   150c4:	movw	r3, #50772	; 0xc654
   150c8:	movt	r3, #1
   150cc:	ldrb	r3, [r3, r1]
   150d0:	strb	r3, [r2]
   150d4:	ldr	r3, [fp, #-16]
   150d8:	add	r3, r3, #2
   150dc:	ldrb	r3, [r3]
   150e0:	mov	r0, r3
   150e4:	bl	14f90 <__assert_fail@plt+0x4044>
   150e8:	mov	r3, r0
   150ec:	and	r1, r3, #63	; 0x3f
   150f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   150f4:	add	r3, r2, #1
   150f8:	str	r3, [fp, #-24]	; 0xffffffe8
   150fc:	movw	r3, #50772	; 0xc654
   15100:	movt	r3, #1
   15104:	ldrb	r3, [r3, r1]
   15108:	strb	r3, [r2]
   1510c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15110:	sub	r3, r3, #3
   15114:	str	r3, [fp, #-20]	; 0xffffffec
   15118:	ldr	r3, [fp, #-16]
   1511c:	add	r3, r3, #3
   15120:	str	r3, [fp, #-16]
   15124:	ldr	r3, [fp, #-20]	; 0xffffffec
   15128:	cmp	r3, #0
   1512c:	bne	14fdc <__assert_fail@plt+0x4090>
   15130:	nop	{0}
   15134:	sub	sp, fp, #8
   15138:	ldr	r4, [sp]
   1513c:	ldr	fp, [sp, #4]
   15140:	add	sp, sp, #8
   15144:	pop	{pc}		; (ldr pc, [sp], #4)
   15148:	str	r4, [sp, #-12]!
   1514c:	str	fp, [sp, #4]
   15150:	str	lr, [sp, #8]
   15154:	add	fp, sp, #8
   15158:	sub	sp, sp, #20
   1515c:	str	r0, [fp, #-16]
   15160:	str	r1, [fp, #-20]	; 0xffffffec
   15164:	str	r2, [fp, #-24]	; 0xffffffe8
   15168:	str	r3, [fp, #-28]	; 0xffffffe4
   1516c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15170:	and	r3, r3, #3
   15174:	cmp	r3, #0
   15178:	bne	153e0 <__assert_fail@plt+0x4494>
   1517c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15180:	asr	r2, r3, #2
   15184:	mov	r3, r2
   15188:	lsl	r3, r3, #1
   1518c:	add	r3, r3, r2
   15190:	ldr	r2, [fp, #-20]	; 0xffffffec
   15194:	cmp	r2, r3
   15198:	bne	153e0 <__assert_fail@plt+0x4494>
   1519c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   151a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   151a4:	ldr	r0, [fp, #-16]
   151a8:	bl	14fb8 <__assert_fail@plt+0x406c>
   151ac:	b	15430 <__assert_fail@plt+0x44e4>
   151b0:	ldr	r3, [fp, #-16]
   151b4:	ldrb	r3, [r3]
   151b8:	mov	r0, r3
   151bc:	bl	14f90 <__assert_fail@plt+0x4044>
   151c0:	mov	r3, r0
   151c4:	lsr	r3, r3, #2
   151c8:	uxtb	r3, r3
   151cc:	and	r1, r3, #63	; 0x3f
   151d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   151d4:	add	r3, r2, #1
   151d8:	str	r3, [fp, #-24]	; 0xffffffe8
   151dc:	movw	r3, #50772	; 0xc654
   151e0:	movt	r3, #1
   151e4:	ldrb	r3, [r3, r1]
   151e8:	strb	r3, [r2]
   151ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151f0:	sub	r3, r3, #1
   151f4:	str	r3, [fp, #-28]	; 0xffffffe4
   151f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151fc:	cmp	r3, #0
   15200:	beq	153fc <__assert_fail@plt+0x44b0>
   15204:	ldr	r3, [fp, #-16]
   15208:	ldrb	r3, [r3]
   1520c:	mov	r0, r3
   15210:	bl	14f90 <__assert_fail@plt+0x4044>
   15214:	mov	r3, r0
   15218:	lsl	r4, r3, #4
   1521c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15220:	sub	r3, r3, #1
   15224:	str	r3, [fp, #-20]	; 0xffffffec
   15228:	ldr	r3, [fp, #-20]	; 0xffffffec
   1522c:	cmp	r3, #0
   15230:	beq	15258 <__assert_fail@plt+0x430c>
   15234:	ldr	r3, [fp, #-16]
   15238:	add	r3, r3, #1
   1523c:	ldrb	r3, [r3]
   15240:	mov	r0, r3
   15244:	bl	14f90 <__assert_fail@plt+0x4044>
   15248:	mov	r3, r0
   1524c:	lsr	r3, r3, #4
   15250:	uxtb	r3, r3
   15254:	b	1525c <__assert_fail@plt+0x4310>
   15258:	mov	r3, #0
   1525c:	add	r3, r3, r4
   15260:	and	r1, r3, #63	; 0x3f
   15264:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15268:	add	r3, r2, #1
   1526c:	str	r3, [fp, #-24]	; 0xffffffe8
   15270:	movw	r3, #50772	; 0xc654
   15274:	movt	r3, #1
   15278:	ldrb	r3, [r3, r1]
   1527c:	strb	r3, [r2]
   15280:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15284:	sub	r3, r3, #1
   15288:	str	r3, [fp, #-28]	; 0xffffffe4
   1528c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15290:	cmp	r3, #0
   15294:	beq	15404 <__assert_fail@plt+0x44b8>
   15298:	ldr	r3, [fp, #-20]	; 0xffffffec
   1529c:	cmp	r3, #0
   152a0:	beq	15318 <__assert_fail@plt+0x43cc>
   152a4:	ldr	r3, [fp, #-16]
   152a8:	add	r3, r3, #1
   152ac:	ldrb	r3, [r3]
   152b0:	mov	r0, r3
   152b4:	bl	14f90 <__assert_fail@plt+0x4044>
   152b8:	mov	r3, r0
   152bc:	lsl	r4, r3, #2
   152c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152c4:	sub	r3, r3, #1
   152c8:	str	r3, [fp, #-20]	; 0xffffffec
   152cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   152d0:	cmp	r3, #0
   152d4:	beq	152fc <__assert_fail@plt+0x43b0>
   152d8:	ldr	r3, [fp, #-16]
   152dc:	add	r3, r3, #2
   152e0:	ldrb	r3, [r3]
   152e4:	mov	r0, r3
   152e8:	bl	14f90 <__assert_fail@plt+0x4044>
   152ec:	mov	r3, r0
   152f0:	lsr	r3, r3, #6
   152f4:	uxtb	r3, r3
   152f8:	b	15300 <__assert_fail@plt+0x43b4>
   152fc:	mov	r3, #0
   15300:	add	r3, r3, r4
   15304:	and	r2, r3, #63	; 0x3f
   15308:	movw	r3, #50772	; 0xc654
   1530c:	movt	r3, #1
   15310:	ldrb	r1, [r3, r2]
   15314:	b	1531c <__assert_fail@plt+0x43d0>
   15318:	mov	r1, #61	; 0x3d
   1531c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15320:	add	r2, r3, #1
   15324:	str	r2, [fp, #-24]	; 0xffffffe8
   15328:	mov	r2, r1
   1532c:	strb	r2, [r3]
   15330:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15334:	sub	r3, r3, #1
   15338:	str	r3, [fp, #-28]	; 0xffffffe4
   1533c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15340:	cmp	r3, #0
   15344:	beq	1540c <__assert_fail@plt+0x44c0>
   15348:	ldr	r3, [fp, #-20]	; 0xffffffec
   1534c:	cmp	r3, #0
   15350:	beq	15380 <__assert_fail@plt+0x4434>
   15354:	ldr	r3, [fp, #-16]
   15358:	add	r3, r3, #2
   1535c:	ldrb	r3, [r3]
   15360:	mov	r0, r3
   15364:	bl	14f90 <__assert_fail@plt+0x4044>
   15368:	mov	r3, r0
   1536c:	and	r2, r3, #63	; 0x3f
   15370:	movw	r3, #50772	; 0xc654
   15374:	movt	r3, #1
   15378:	ldrb	r1, [r3, r2]
   1537c:	b	15384 <__assert_fail@plt+0x4438>
   15380:	mov	r1, #61	; 0x3d
   15384:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15388:	add	r2, r3, #1
   1538c:	str	r2, [fp, #-24]	; 0xffffffe8
   15390:	mov	r2, r1
   15394:	strb	r2, [r3]
   15398:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1539c:	sub	r3, r3, #1
   153a0:	str	r3, [fp, #-28]	; 0xffffffe4
   153a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   153a8:	cmp	r3, #0
   153ac:	beq	15414 <__assert_fail@plt+0x44c8>
   153b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   153b4:	cmp	r3, #0
   153b8:	beq	153c8 <__assert_fail@plt+0x447c>
   153bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   153c0:	sub	r3, r3, #1
   153c4:	str	r3, [fp, #-20]	; 0xffffffec
   153c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   153cc:	cmp	r3, #0
   153d0:	beq	153e0 <__assert_fail@plt+0x4494>
   153d4:	ldr	r3, [fp, #-16]
   153d8:	add	r3, r3, #3
   153dc:	str	r3, [fp, #-16]
   153e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   153e4:	cmp	r3, #0
   153e8:	beq	15418 <__assert_fail@plt+0x44cc>
   153ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   153f0:	cmp	r3, #0
   153f4:	bne	151b0 <__assert_fail@plt+0x4264>
   153f8:	b	15418 <__assert_fail@plt+0x44cc>
   153fc:	nop	{0}
   15400:	b	15418 <__assert_fail@plt+0x44cc>
   15404:	nop	{0}
   15408:	b	15418 <__assert_fail@plt+0x44cc>
   1540c:	nop	{0}
   15410:	b	15418 <__assert_fail@plt+0x44cc>
   15414:	nop	{0}
   15418:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1541c:	cmp	r3, #0
   15420:	beq	15430 <__assert_fail@plt+0x44e4>
   15424:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15428:	mov	r2, #0
   1542c:	strb	r2, [r3]
   15430:	sub	sp, fp, #8
   15434:	ldr	r4, [sp]
   15438:	ldr	fp, [sp, #4]
   1543c:	add	sp, sp, #8
   15440:	pop	{pc}		; (ldr pc, [sp], #4)
   15444:	str	fp, [sp, #-8]!
   15448:	str	lr, [sp, #4]
   1544c:	add	fp, sp, #4
   15450:	sub	sp, sp, #24
   15454:	str	r0, [fp, #-16]
   15458:	str	r1, [fp, #-20]	; 0xffffffec
   1545c:	str	r2, [fp, #-24]	; 0xffffffe8
   15460:	ldr	r2, [fp, #-20]	; 0xffffffec
   15464:	movw	r3, #21846	; 0x5556
   15468:	movt	r3, #21845	; 0x5555
   1546c:	smull	r3, r1, r3, r2
   15470:	asr	r3, r2, #31
   15474:	sub	r0, r1, r3
   15478:	ldr	r1, [fp, #-20]	; 0xffffffec
   1547c:	movw	r3, #21846	; 0x5556
   15480:	movt	r3, #21845	; 0x5555
   15484:	smull	r3, r2, r3, r1
   15488:	asr	r3, r1, #31
   1548c:	sub	r2, r2, r3
   15490:	mov	r3, r2
   15494:	lsl	r3, r3, #1
   15498:	add	r3, r3, r2
   1549c:	sub	r2, r1, r3
   154a0:	cmp	r2, #0
   154a4:	movne	r3, #1
   154a8:	moveq	r3, #0
   154ac:	uxtb	r3, r3
   154b0:	add	r3, r0, r3
   154b4:	str	r3, [fp, #-8]
   154b8:	mov	lr, #0
   154bc:	ldr	r3, [fp, #-8]
   154c0:	mov	r0, r3
   154c4:	asr	r1, r0, #31
   154c8:	mov	r2, #0
   154cc:	mov	r3, #0
   154d0:	lsl	r3, r1, #2
   154d4:	orr	r3, r3, r0, lsr #30
   154d8:	lsl	r2, r0, #2
   154dc:	mov	r0, #0
   154e0:	mov	r1, #0
   154e4:	mov	r0, r3
   154e8:	asr	r1, r3, #31
   154ec:	asr	ip, r2, #31
   154f0:	cmp	ip, r0
   154f4:	beq	154fc <__assert_fail@plt+0x45b0>
   154f8:	mov	lr, #1
   154fc:	mov	r3, r2
   15500:	str	r3, [fp, #-12]
   15504:	mov	r3, lr
   15508:	and	r3, r3, #1
   1550c:	uxtb	r3, r3
   15510:	cmp	r3, #0
   15514:	bne	15524 <__assert_fail@plt+0x45d8>
   15518:	ldr	r3, [fp, #-20]	; 0xffffffec
   1551c:	cmp	r3, #0
   15520:	bge	15538 <__assert_fail@plt+0x45ec>
   15524:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15528:	mov	r2, #0
   1552c:	str	r2, [r3]
   15530:	mov	r3, #0
   15534:	b	15598 <__assert_fail@plt+0x464c>
   15538:	ldr	r3, [fp, #-12]
   1553c:	add	r3, r3, #1
   15540:	str	r3, [fp, #-12]
   15544:	ldr	r3, [fp, #-12]
   15548:	mov	r0, r3
   1554c:	bl	16a28 <__assert_fail@plt+0x5adc>
   15550:	mov	r3, r0
   15554:	mov	r2, r3
   15558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1555c:	str	r2, [r3]
   15560:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15564:	ldr	r3, [r3]
   15568:	cmp	r3, #0
   1556c:	bne	15578 <__assert_fail@plt+0x462c>
   15570:	ldr	r3, [fp, #-12]
   15574:	b	15598 <__assert_fail@plt+0x464c>
   15578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1557c:	ldr	r2, [r3]
   15580:	ldr	r3, [fp, #-12]
   15584:	ldr	r1, [fp, #-20]	; 0xffffffec
   15588:	ldr	r0, [fp, #-16]
   1558c:	bl	15148 <__assert_fail@plt+0x41fc>
   15590:	ldr	r3, [fp, #-12]
   15594:	sub	r3, r3, #1
   15598:	mov	r0, r3
   1559c:	sub	sp, fp, #4
   155a0:	ldr	fp, [sp]
   155a4:	add	sp, sp, #4
   155a8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ac:	str	fp, [sp, #-8]!
   155b0:	str	lr, [sp, #4]
   155b4:	add	fp, sp, #4
   155b8:	sub	sp, sp, #8
   155bc:	mov	r3, r0
   155c0:	strb	r3, [fp, #-5]
   155c4:	ldrb	r3, [fp, #-5]
   155c8:	mov	r0, r3
   155cc:	bl	14f90 <__assert_fail@plt+0x4044>
   155d0:	mov	r3, r0
   155d4:	mov	r2, r3
   155d8:	movw	r3, #50836	; 0xc694
   155dc:	movt	r3, #1
   155e0:	ldrsb	r3, [r3, r2]
   155e4:	mvn	r3, r3
   155e8:	uxtb	r3, r3
   155ec:	lsr	r3, r3, #7
   155f0:	uxtb	r3, r3
   155f4:	mov	r0, r3
   155f8:	sub	sp, fp, #4
   155fc:	ldr	fp, [sp]
   15600:	add	sp, sp, #4
   15604:	pop	{pc}		; (ldr pc, [sp], #4)
   15608:	push	{fp}		; (str fp, [sp, #-4]!)
   1560c:	add	fp, sp, #0
   15610:	sub	sp, sp, #12
   15614:	str	r0, [fp, #-8]
   15618:	ldr	r3, [fp, #-8]
   1561c:	mov	r2, #0
   15620:	str	r2, [r3]
   15624:	nop	{0}
   15628:	add	sp, fp, #0
   1562c:	pop	{fp}		; (ldr fp, [sp], #4)
   15630:	bx	lr
   15634:	str	fp, [sp, #-8]!
   15638:	str	lr, [sp, #4]
   1563c:	add	fp, sp, #4
   15640:	sub	sp, sp, #32
   15644:	str	r0, [fp, #-24]	; 0xffffffe8
   15648:	str	r1, [fp, #-28]	; 0xffffffe4
   1564c:	str	r2, [fp, #-32]	; 0xffffffe0
   15650:	str	r3, [fp, #-36]	; 0xffffffdc
   15654:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15658:	ldr	r3, [r3]
   1565c:	cmp	r3, #4
   15660:	bne	15670 <__assert_fail@plt+0x4724>
   15664:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15668:	mov	r2, #0
   1566c:	str	r2, [r3]
   15670:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15674:	ldr	r3, [r3]
   15678:	cmp	r3, #0
   1567c:	bne	156e8 <__assert_fail@plt+0x479c>
   15680:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15684:	ldr	r3, [r3]
   15688:	str	r3, [fp, #-12]
   1568c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15690:	ldr	r3, [r3]
   15694:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15698:	sub	r3, r2, r3
   1569c:	cmp	r3, #3
   156a0:	ble	156e8 <__assert_fail@plt+0x479c>
   156a4:	mov	r2, #4
   156a8:	mov	r1, #10
   156ac:	ldr	r0, [fp, #-12]
   156b0:	bl	10eb0 <memchr@plt>
   156b4:	mov	r3, r0
   156b8:	cmp	r3, #0
   156bc:	bne	156e8 <__assert_fail@plt+0x479c>
   156c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156c4:	ldr	r3, [r3]
   156c8:	add	r2, r3, #4
   156cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156d0:	str	r2, [r3]
   156d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   156d8:	mov	r2, #4
   156dc:	str	r2, [r3]
   156e0:	ldr	r3, [fp, #-12]
   156e4:	b	15788 <__assert_fail@plt+0x483c>
   156e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156ec:	ldr	r3, [r3]
   156f0:	str	r3, [fp, #-8]
   156f4:	b	1574c <__assert_fail@plt+0x4800>
   156f8:	ldr	r3, [fp, #-8]
   156fc:	add	r2, r3, #1
   15700:	str	r2, [fp, #-8]
   15704:	ldrb	r3, [r3]
   15708:	strb	r3, [fp, #-13]
   1570c:	ldrb	r3, [fp, #-13]
   15710:	cmp	r3, #10
   15714:	beq	1574c <__assert_fail@plt+0x4800>
   15718:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1571c:	ldr	r3, [r3]
   15720:	add	r1, r3, #1
   15724:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15728:	str	r1, [r2]
   1572c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15730:	add	r3, r2, r3
   15734:	ldrb	r2, [fp, #-13]
   15738:	strb	r2, [r3, #4]
   1573c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15740:	ldr	r3, [r3]
   15744:	cmp	r3, #4
   15748:	beq	15760 <__assert_fail@plt+0x4814>
   1574c:	ldr	r2, [fp, #-8]
   15750:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15754:	cmp	r2, r3
   15758:	bcc	156f8 <__assert_fail@plt+0x47ac>
   1575c:	b	15764 <__assert_fail@plt+0x4818>
   15760:	nop	{0}
   15764:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15768:	ldr	r2, [fp, #-8]
   1576c:	str	r2, [r3]
   15770:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15774:	ldr	r2, [r3]
   15778:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1577c:	str	r2, [r3]
   15780:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15784:	add	r3, r3, #4
   15788:	mov	r0, r3
   1578c:	sub	sp, fp, #4
   15790:	ldr	fp, [sp]
   15794:	add	sp, sp, #4
   15798:	pop	{pc}		; (ldr pc, [sp], #4)
   1579c:	str	r4, [sp, #-12]!
   157a0:	str	fp, [sp, #4]
   157a4:	str	lr, [sp, #8]
   157a8:	add	fp, sp, #8
   157ac:	sub	sp, sp, #28
   157b0:	str	r0, [fp, #-24]	; 0xffffffe8
   157b4:	str	r1, [fp, #-28]	; 0xffffffe4
   157b8:	str	r2, [fp, #-32]	; 0xffffffe0
   157bc:	str	r3, [fp, #-36]	; 0xffffffdc
   157c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157c4:	ldr	r3, [r3]
   157c8:	str	r3, [fp, #-16]
   157cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157d0:	cmp	r3, #1
   157d4:	bgt	157e0 <__assert_fail@plt+0x4894>
   157d8:	mov	r3, #0
   157dc:	b	15b70 <__assert_fail@plt+0x4c24>
   157e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157e4:	ldrb	r3, [r3]
   157e8:	mov	r0, r3
   157ec:	bl	155ac <__assert_fail@plt+0x4660>
   157f0:	mov	r3, r0
   157f4:	eor	r3, r3, #1
   157f8:	uxtb	r3, r3
   157fc:	cmp	r3, #0
   15800:	bne	1582c <__assert_fail@plt+0x48e0>
   15804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15808:	add	r3, r3, #1
   1580c:	ldrb	r3, [r3]
   15810:	mov	r0, r3
   15814:	bl	155ac <__assert_fail@plt+0x4660>
   15818:	mov	r3, r0
   1581c:	eor	r3, r3, #1
   15820:	uxtb	r3, r3
   15824:	cmp	r3, #0
   15828:	beq	15834 <__assert_fail@plt+0x48e8>
   1582c:	mov	r3, #0
   15830:	b	15b70 <__assert_fail@plt+0x4c24>
   15834:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15838:	ldr	r3, [r3]
   1583c:	cmp	r3, #0
   15840:	beq	158d0 <__assert_fail@plt+0x4984>
   15844:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15848:	ldrb	r3, [r3]
   1584c:	mov	r0, r3
   15850:	bl	14f90 <__assert_fail@plt+0x4044>
   15854:	mov	r3, r0
   15858:	mov	r2, r3
   1585c:	movw	r3, #50836	; 0xc694
   15860:	movt	r3, #1
   15864:	ldrsb	r3, [r3, r2]
   15868:	lsl	r3, r3, #2
   1586c:	sxtb	r4, r3
   15870:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15874:	add	r3, r3, #1
   15878:	ldrb	r3, [r3]
   1587c:	mov	r0, r3
   15880:	bl	14f90 <__assert_fail@plt+0x4044>
   15884:	mov	r3, r0
   15888:	mov	r2, r3
   1588c:	movw	r3, #50836	; 0xc694
   15890:	movt	r3, #1
   15894:	ldrsb	r3, [r3, r2]
   15898:	asr	r3, r3, #4
   1589c:	sxtb	r3, r3
   158a0:	orr	r3, r4, r3
   158a4:	sxtb	r1, r3
   158a8:	ldr	r3, [fp, #-16]
   158ac:	add	r2, r3, #1
   158b0:	str	r2, [fp, #-16]
   158b4:	uxtb	r2, r1
   158b8:	strb	r2, [r3]
   158bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158c0:	ldr	r3, [r3]
   158c4:	sub	r2, r3, #1
   158c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158cc:	str	r2, [r3]
   158d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   158d4:	cmp	r3, #2
   158d8:	bne	158f0 <__assert_fail@plt+0x49a4>
   158dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   158e0:	ldr	r2, [fp, #-16]
   158e4:	str	r2, [r3]
   158e8:	mov	r3, #0
   158ec:	b	15b70 <__assert_fail@plt+0x4c24>
   158f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158f4:	add	r3, r3, #2
   158f8:	ldrb	r3, [r3]
   158fc:	cmp	r3, #61	; 0x3d
   15900:	bne	1594c <__assert_fail@plt+0x4a00>
   15904:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15908:	cmp	r3, #4
   1590c:	beq	15924 <__assert_fail@plt+0x49d8>
   15910:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15914:	ldr	r2, [fp, #-16]
   15918:	str	r2, [r3]
   1591c:	mov	r3, #0
   15920:	b	15b70 <__assert_fail@plt+0x4c24>
   15924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15928:	add	r3, r3, #3
   1592c:	ldrb	r3, [r3]
   15930:	cmp	r3, #61	; 0x3d
   15934:	beq	15b60 <__assert_fail@plt+0x4c14>
   15938:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1593c:	ldr	r2, [fp, #-16]
   15940:	str	r2, [r3]
   15944:	mov	r3, #0
   15948:	b	15b70 <__assert_fail@plt+0x4c24>
   1594c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15950:	add	r3, r3, #2
   15954:	ldrb	r3, [r3]
   15958:	mov	r0, r3
   1595c:	bl	155ac <__assert_fail@plt+0x4660>
   15960:	mov	r3, r0
   15964:	eor	r3, r3, #1
   15968:	uxtb	r3, r3
   1596c:	cmp	r3, #0
   15970:	beq	15988 <__assert_fail@plt+0x4a3c>
   15974:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15978:	ldr	r2, [fp, #-16]
   1597c:	str	r2, [r3]
   15980:	mov	r3, #0
   15984:	b	15b70 <__assert_fail@plt+0x4c24>
   15988:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1598c:	ldr	r3, [r3]
   15990:	cmp	r3, #0
   15994:	beq	15a30 <__assert_fail@plt+0x4ae4>
   15998:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1599c:	add	r3, r3, #1
   159a0:	ldrb	r3, [r3]
   159a4:	mov	r0, r3
   159a8:	bl	14f90 <__assert_fail@plt+0x4044>
   159ac:	mov	r3, r0
   159b0:	mov	r2, r3
   159b4:	movw	r3, #50836	; 0xc694
   159b8:	movt	r3, #1
   159bc:	ldrsb	r3, [r3, r2]
   159c0:	lsl	r3, r3, #4
   159c4:	sxtb	r3, r3
   159c8:	bic	r3, r3, #15
   159cc:	sxtb	r4, r3
   159d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159d4:	add	r3, r3, #2
   159d8:	ldrb	r3, [r3]
   159dc:	mov	r0, r3
   159e0:	bl	14f90 <__assert_fail@plt+0x4044>
   159e4:	mov	r3, r0
   159e8:	mov	r2, r3
   159ec:	movw	r3, #50836	; 0xc694
   159f0:	movt	r3, #1
   159f4:	ldrsb	r3, [r3, r2]
   159f8:	asr	r3, r3, #2
   159fc:	sxtb	r3, r3
   15a00:	orr	r3, r4, r3
   15a04:	sxtb	r1, r3
   15a08:	ldr	r3, [fp, #-16]
   15a0c:	add	r2, r3, #1
   15a10:	str	r2, [fp, #-16]
   15a14:	uxtb	r2, r1
   15a18:	strb	r2, [r3]
   15a1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a20:	ldr	r3, [r3]
   15a24:	sub	r2, r3, #1
   15a28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a2c:	str	r2, [r3]
   15a30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a34:	cmp	r3, #3
   15a38:	bne	15a50 <__assert_fail@plt+0x4b04>
   15a3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a40:	ldr	r2, [fp, #-16]
   15a44:	str	r2, [r3]
   15a48:	mov	r3, #0
   15a4c:	b	15b70 <__assert_fail@plt+0x4c24>
   15a50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a54:	add	r3, r3, #3
   15a58:	ldrb	r3, [r3]
   15a5c:	cmp	r3, #61	; 0x3d
   15a60:	bne	15a84 <__assert_fail@plt+0x4b38>
   15a64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a68:	cmp	r3, #4
   15a6c:	beq	15b60 <__assert_fail@plt+0x4c14>
   15a70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a74:	ldr	r2, [fp, #-16]
   15a78:	str	r2, [r3]
   15a7c:	mov	r3, #0
   15a80:	b	15b70 <__assert_fail@plt+0x4c24>
   15a84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a88:	add	r3, r3, #3
   15a8c:	ldrb	r3, [r3]
   15a90:	mov	r0, r3
   15a94:	bl	155ac <__assert_fail@plt+0x4660>
   15a98:	mov	r3, r0
   15a9c:	eor	r3, r3, #1
   15aa0:	uxtb	r3, r3
   15aa4:	cmp	r3, #0
   15aa8:	beq	15ac0 <__assert_fail@plt+0x4b74>
   15aac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ab0:	ldr	r2, [fp, #-16]
   15ab4:	str	r2, [r3]
   15ab8:	mov	r3, #0
   15abc:	b	15b70 <__assert_fail@plt+0x4c24>
   15ac0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ac4:	ldr	r3, [r3]
   15ac8:	cmp	r3, #0
   15acc:	beq	15b60 <__assert_fail@plt+0x4c14>
   15ad0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ad4:	add	r3, r3, #2
   15ad8:	ldrb	r3, [r3]
   15adc:	mov	r0, r3
   15ae0:	bl	14f90 <__assert_fail@plt+0x4044>
   15ae4:	mov	r3, r0
   15ae8:	mov	r2, r3
   15aec:	movw	r3, #50836	; 0xc694
   15af0:	movt	r3, #1
   15af4:	ldrsb	r3, [r3, r2]
   15af8:	lsl	r3, r3, #6
   15afc:	sxtb	r3, r3
   15b00:	bic	r3, r3, #63	; 0x3f
   15b04:	sxtb	r4, r3
   15b08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b0c:	add	r3, r3, #3
   15b10:	ldrb	r3, [r3]
   15b14:	mov	r0, r3
   15b18:	bl	14f90 <__assert_fail@plt+0x4044>
   15b1c:	mov	r3, r0
   15b20:	mov	r2, r3
   15b24:	movw	r3, #50836	; 0xc694
   15b28:	movt	r3, #1
   15b2c:	ldrsb	r3, [r3, r2]
   15b30:	orr	r3, r4, r3
   15b34:	sxtb	r1, r3
   15b38:	ldr	r3, [fp, #-16]
   15b3c:	add	r2, r3, #1
   15b40:	str	r2, [fp, #-16]
   15b44:	uxtb	r2, r1
   15b48:	strb	r2, [r3]
   15b4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15b50:	ldr	r3, [r3]
   15b54:	sub	r2, r3, #1
   15b58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15b5c:	str	r2, [r3]
   15b60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b64:	ldr	r2, [fp, #-16]
   15b68:	str	r2, [r3]
   15b6c:	mov	r3, #1
   15b70:	mov	r0, r3
   15b74:	sub	sp, fp, #8
   15b78:	ldr	r4, [sp]
   15b7c:	ldr	fp, [sp, #4]
   15b80:	add	sp, sp, #8
   15b84:	pop	{pc}		; (ldr pc, [sp], #4)
   15b88:	str	fp, [sp, #-8]!
   15b8c:	str	lr, [sp, #4]
   15b90:	add	fp, sp, #4
   15b94:	sub	sp, sp, #48	; 0x30
   15b98:	str	r0, [fp, #-40]	; 0xffffffd8
   15b9c:	str	r1, [fp, #-44]	; 0xffffffd4
   15ba0:	str	r2, [fp, #-48]	; 0xffffffd0
   15ba4:	str	r3, [fp, #-52]	; 0xffffffcc
   15ba8:	ldr	r3, [fp, #4]
   15bac:	ldr	r3, [r3]
   15bb0:	str	r3, [fp, #-32]	; 0xffffffe0
   15bb4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15bb8:	cmp	r3, #0
   15bbc:	movne	r3, #1
   15bc0:	moveq	r3, #0
   15bc4:	strb	r3, [fp, #-21]	; 0xffffffeb
   15bc8:	mov	r3, #0
   15bcc:	strb	r3, [fp, #-5]
   15bd0:	mov	r3, #0
   15bd4:	str	r3, [fp, #-12]
   15bd8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15bdc:	cmp	r3, #0
   15be0:	beq	15c04 <__assert_fail@plt+0x4cb8>
   15be4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15be8:	ldr	r3, [r3]
   15bec:	str	r3, [fp, #-12]
   15bf0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15bf4:	cmp	r3, #0
   15bf8:	moveq	r3, #1
   15bfc:	movne	r3, #0
   15c00:	strb	r3, [fp, #-5]
   15c04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c08:	str	r3, [fp, #-16]
   15c0c:	ldr	r3, [fp, #-12]
   15c10:	cmp	r3, #0
   15c14:	bne	15c7c <__assert_fail@plt+0x4d30>
   15c18:	ldrb	r3, [fp, #-5]
   15c1c:	eor	r3, r3, #1
   15c20:	uxtb	r3, r3
   15c24:	cmp	r3, #0
   15c28:	beq	15c7c <__assert_fail@plt+0x4d30>
   15c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c30:	str	r3, [fp, #-16]
   15c34:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15c38:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15c3c:	sub	r3, fp, #32
   15c40:	sub	r2, fp, #52	; 0x34
   15c44:	bl	1579c <__assert_fail@plt+0x4850>
   15c48:	mov	r3, r0
   15c4c:	eor	r3, r3, #1
   15c50:	uxtb	r3, r3
   15c54:	cmp	r3, #0
   15c58:	bne	15c78 <__assert_fail@plt+0x4d2c>
   15c5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15c60:	add	r3, r3, #4
   15c64:	str	r3, [fp, #-44]	; 0xffffffd4
   15c68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15c6c:	sub	r3, r3, #4
   15c70:	str	r3, [fp, #-48]	; 0xffffffd0
   15c74:	b	15c2c <__assert_fail@plt+0x4ce0>
   15c78:	nop	{0}
   15c7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15c80:	cmp	r3, #0
   15c84:	bne	15c9c <__assert_fail@plt+0x4d50>
   15c88:	ldrb	r3, [fp, #-5]
   15c8c:	eor	r3, r3, #1
   15c90:	uxtb	r3, r3
   15c94:	cmp	r3, #0
   15c98:	bne	15dc4 <__assert_fail@plt+0x4e78>
   15c9c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15ca0:	cmp	r3, #0
   15ca4:	beq	15ce0 <__assert_fail@plt+0x4d94>
   15ca8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15cac:	ldrb	r3, [r3]
   15cb0:	cmp	r3, #10
   15cb4:	bne	15ce0 <__assert_fail@plt+0x4d94>
   15cb8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15cbc:	cmp	r3, #0
   15cc0:	beq	15ce0 <__assert_fail@plt+0x4d94>
   15cc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15cc8:	add	r3, r3, #1
   15ccc:	str	r3, [fp, #-44]	; 0xffffffd4
   15cd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15cd4:	sub	r3, r3, #1
   15cd8:	str	r3, [fp, #-48]	; 0xffffffd0
   15cdc:	b	15dc0 <__assert_fail@plt+0x4e74>
   15ce0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15ce4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ce8:	ldr	r1, [fp, #-16]
   15cec:	sub	r3, r1, r3
   15cf0:	rsb	r3, r3, #0
   15cf4:	add	r3, r2, r3
   15cf8:	str	r3, [fp, #-52]	; 0xffffffcc
   15cfc:	ldr	r3, [fp, #-16]
   15d00:	str	r3, [fp, #-32]	; 0xffffffe0
   15d04:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d08:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15d0c:	add	r3, r3, r2
   15d10:	str	r3, [fp, #-28]	; 0xffffffe4
   15d14:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15d18:	cmp	r3, #0
   15d1c:	beq	15d3c <__assert_fail@plt+0x4df0>
   15d20:	sub	r3, fp, #48	; 0x30
   15d24:	sub	r1, fp, #44	; 0x2c
   15d28:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15d2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15d30:	bl	15634 <__assert_fail@plt+0x46e8>
   15d34:	str	r0, [fp, #-20]	; 0xffffffec
   15d38:	b	15d44 <__assert_fail@plt+0x4df8>
   15d3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d40:	str	r3, [fp, #-20]	; 0xffffffec
   15d44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15d48:	cmp	r3, #0
   15d4c:	beq	15d7c <__assert_fail@plt+0x4e30>
   15d50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15d54:	cmp	r3, #3
   15d58:	bgt	15d88 <__assert_fail@plt+0x4e3c>
   15d5c:	ldrb	r3, [fp, #-5]
   15d60:	eor	r3, r3, #1
   15d64:	uxtb	r3, r3
   15d68:	cmp	r3, #0
   15d6c:	beq	15d88 <__assert_fail@plt+0x4e3c>
   15d70:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15d74:	cmp	r3, #0
   15d78:	beq	15d88 <__assert_fail@plt+0x4e3c>
   15d7c:	mov	r3, #0
   15d80:	str	r3, [fp, #-48]	; 0xffffffd0
   15d84:	b	15dd0 <__assert_fail@plt+0x4e84>
   15d88:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15d8c:	sub	r3, fp, #32
   15d90:	sub	r2, fp, #52	; 0x34
   15d94:	ldr	r0, [fp, #-20]	; 0xffffffec
   15d98:	bl	1579c <__assert_fail@plt+0x4850>
   15d9c:	mov	r3, r0
   15da0:	eor	r3, r3, #1
   15da4:	uxtb	r3, r3
   15da8:	cmp	r3, #0
   15dac:	bne	15dcc <__assert_fail@plt+0x4e80>
   15db0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15db4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15db8:	sub	r3, r2, r3
   15dbc:	str	r3, [fp, #-48]	; 0xffffffd0
   15dc0:	b	15c04 <__assert_fail@plt+0x4cb8>
   15dc4:	nop	{0}
   15dc8:	b	15dd0 <__assert_fail@plt+0x4e84>
   15dcc:	nop	{0}
   15dd0:	ldr	r3, [fp, #4]
   15dd4:	ldr	r2, [r3]
   15dd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ddc:	sub	r2, r2, r3
   15de0:	ldr	r3, [fp, #4]
   15de4:	str	r2, [r3]
   15de8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15dec:	cmp	r3, #0
   15df0:	moveq	r3, #1
   15df4:	movne	r3, #0
   15df8:	uxtb	r3, r3
   15dfc:	mov	r0, r3
   15e00:	sub	sp, fp, #4
   15e04:	ldr	fp, [sp]
   15e08:	add	sp, sp, #4
   15e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e10:	str	fp, [sp, #-8]!
   15e14:	str	lr, [sp, #4]
   15e18:	add	fp, sp, #4
   15e1c:	sub	sp, sp, #32
   15e20:	str	r0, [fp, #-16]
   15e24:	str	r1, [fp, #-20]	; 0xffffffec
   15e28:	str	r2, [fp, #-24]	; 0xffffffe8
   15e2c:	str	r3, [fp, #-28]	; 0xffffffe4
   15e30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e34:	asr	r3, r3, #2
   15e38:	add	r2, r3, #1
   15e3c:	mov	r3, r2
   15e40:	lsl	r3, r3, #1
   15e44:	add	r3, r3, r2
   15e48:	str	r3, [fp, #-8]
   15e4c:	ldr	r3, [fp, #-8]
   15e50:	mov	r0, r3
   15e54:	bl	16a28 <__assert_fail@plt+0x5adc>
   15e58:	mov	r3, r0
   15e5c:	mov	r2, r3
   15e60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15e64:	str	r2, [r3]
   15e68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15e6c:	ldr	r3, [r3]
   15e70:	cmp	r3, #0
   15e74:	bne	15e80 <__assert_fail@plt+0x4f34>
   15e78:	mov	r3, #1
   15e7c:	b	15ef8 <__assert_fail@plt+0x4fac>
   15e80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15e84:	ldr	r2, [r3]
   15e88:	sub	r3, fp, #8
   15e8c:	str	r3, [sp]
   15e90:	mov	r3, r2
   15e94:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15e98:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e9c:	ldr	r0, [fp, #-16]
   15ea0:	bl	15b88 <__assert_fail@plt+0x4c3c>
   15ea4:	mov	r3, r0
   15ea8:	eor	r3, r3, #1
   15eac:	uxtb	r3, r3
   15eb0:	cmp	r3, #0
   15eb4:	beq	15edc <__assert_fail@plt+0x4f90>
   15eb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ebc:	ldr	r3, [r3]
   15ec0:	mov	r0, r3
   15ec4:	bl	16860 <__assert_fail@plt+0x5914>
   15ec8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ecc:	mov	r2, #0
   15ed0:	str	r2, [r3]
   15ed4:	mov	r3, #0
   15ed8:	b	15ef8 <__assert_fail@plt+0x4fac>
   15edc:	ldr	r3, [fp, #4]
   15ee0:	cmp	r3, #0
   15ee4:	beq	15ef4 <__assert_fail@plt+0x4fa8>
   15ee8:	ldr	r2, [fp, #-8]
   15eec:	ldr	r3, [fp, #4]
   15ef0:	str	r2, [r3]
   15ef4:	mov	r3, #1
   15ef8:	mov	r0, r3
   15efc:	sub	sp, fp, #4
   15f00:	ldr	fp, [sp]
   15f04:	add	sp, sp, #4
   15f08:	pop	{pc}		; (ldr pc, [sp], #4)
   15f0c:	push	{fp}		; (str fp, [sp, #-4]!)
   15f10:	add	fp, sp, #0
   15f14:	sub	sp, sp, #12
   15f18:	str	r0, [fp, #-8]
   15f1c:	ldr	r3, [fp, #-8]
   15f20:	cmp	r3, #90	; 0x5a
   15f24:	bgt	15f48 <__assert_fail@plt+0x4ffc>
   15f28:	ldr	r3, [fp, #-8]
   15f2c:	cmp	r3, #65	; 0x41
   15f30:	bge	15f58 <__assert_fail@plt+0x500c>
   15f34:	ldr	r3, [fp, #-8]
   15f38:	sub	r3, r3, #48	; 0x30
   15f3c:	cmp	r3, #9
   15f40:	bhi	15f60 <__assert_fail@plt+0x5014>
   15f44:	b	15f58 <__assert_fail@plt+0x500c>
   15f48:	ldr	r3, [fp, #-8]
   15f4c:	sub	r3, r3, #97	; 0x61
   15f50:	cmp	r3, #25
   15f54:	bhi	15f60 <__assert_fail@plt+0x5014>
   15f58:	mov	r3, #1
   15f5c:	b	15f64 <__assert_fail@plt+0x5018>
   15f60:	mov	r3, #0
   15f64:	mov	r0, r3
   15f68:	add	sp, fp, #0
   15f6c:	pop	{fp}		; (ldr fp, [sp], #4)
   15f70:	bx	lr
   15f74:	push	{fp}		; (str fp, [sp, #-4]!)
   15f78:	add	fp, sp, #0
   15f7c:	sub	sp, sp, #12
   15f80:	str	r0, [fp, #-8]
   15f84:	ldr	r3, [fp, #-8]
   15f88:	cmp	r3, #65	; 0x41
   15f8c:	blt	15fb4 <__assert_fail@plt+0x5068>
   15f90:	ldr	r3, [fp, #-8]
   15f94:	cmp	r3, #90	; 0x5a
   15f98:	ble	15fac <__assert_fail@plt+0x5060>
   15f9c:	ldr	r3, [fp, #-8]
   15fa0:	sub	r3, r3, #97	; 0x61
   15fa4:	cmp	r3, #25
   15fa8:	bhi	15fb4 <__assert_fail@plt+0x5068>
   15fac:	mov	r3, #1
   15fb0:	b	15fb8 <__assert_fail@plt+0x506c>
   15fb4:	mov	r3, #0
   15fb8:	mov	r0, r3
   15fbc:	add	sp, fp, #0
   15fc0:	pop	{fp}		; (ldr fp, [sp], #4)
   15fc4:	bx	lr
   15fc8:	push	{fp}		; (str fp, [sp, #-4]!)
   15fcc:	add	fp, sp, #0
   15fd0:	sub	sp, sp, #12
   15fd4:	str	r0, [fp, #-8]
   15fd8:	ldr	r3, [fp, #-8]
   15fdc:	cmp	r3, #127	; 0x7f
   15fe0:	bhi	15fec <__assert_fail@plt+0x50a0>
   15fe4:	mov	r3, #1
   15fe8:	b	15ff0 <__assert_fail@plt+0x50a4>
   15fec:	mov	r3, #0
   15ff0:	mov	r0, r3
   15ff4:	add	sp, fp, #0
   15ff8:	pop	{fp}		; (ldr fp, [sp], #4)
   15ffc:	bx	lr
   16000:	push	{fp}		; (str fp, [sp, #-4]!)
   16004:	add	fp, sp, #0
   16008:	sub	sp, sp, #12
   1600c:	str	r0, [fp, #-8]
   16010:	ldr	r3, [fp, #-8]
   16014:	cmp	r3, #32
   16018:	beq	16028 <__assert_fail@plt+0x50dc>
   1601c:	ldr	r3, [fp, #-8]
   16020:	cmp	r3, #9
   16024:	bne	16030 <__assert_fail@plt+0x50e4>
   16028:	mov	r3, #1
   1602c:	b	16034 <__assert_fail@plt+0x50e8>
   16030:	mov	r3, #0
   16034:	and	r3, r3, #1
   16038:	uxtb	r3, r3
   1603c:	mov	r0, r3
   16040:	add	sp, fp, #0
   16044:	pop	{fp}		; (ldr fp, [sp], #4)
   16048:	bx	lr
   1604c:	push	{fp}		; (str fp, [sp, #-4]!)
   16050:	add	fp, sp, #0
   16054:	sub	sp, sp, #12
   16058:	str	r0, [fp, #-8]
   1605c:	ldr	r3, [fp, #-8]
   16060:	cmp	r3, #0
   16064:	blt	16088 <__assert_fail@plt+0x513c>
   16068:	ldr	r3, [fp, #-8]
   1606c:	cmp	r3, #31
   16070:	ble	16080 <__assert_fail@plt+0x5134>
   16074:	ldr	r3, [fp, #-8]
   16078:	cmp	r3, #127	; 0x7f
   1607c:	bne	16088 <__assert_fail@plt+0x513c>
   16080:	mov	r3, #1
   16084:	b	1608c <__assert_fail@plt+0x5140>
   16088:	mov	r3, #0
   1608c:	mov	r0, r3
   16090:	add	sp, fp, #0
   16094:	pop	{fp}		; (ldr fp, [sp], #4)
   16098:	bx	lr
   1609c:	push	{fp}		; (str fp, [sp, #-4]!)
   160a0:	add	fp, sp, #0
   160a4:	sub	sp, sp, #12
   160a8:	str	r0, [fp, #-8]
   160ac:	ldr	r3, [fp, #-8]
   160b0:	sub	r3, r3, #48	; 0x30
   160b4:	cmp	r3, #9
   160b8:	bhi	160c4 <__assert_fail@plt+0x5178>
   160bc:	mov	r3, #1
   160c0:	b	160c8 <__assert_fail@plt+0x517c>
   160c4:	mov	r3, #0
   160c8:	mov	r0, r3
   160cc:	add	sp, fp, #0
   160d0:	pop	{fp}		; (ldr fp, [sp], #4)
   160d4:	bx	lr
   160d8:	push	{fp}		; (str fp, [sp, #-4]!)
   160dc:	add	fp, sp, #0
   160e0:	sub	sp, sp, #12
   160e4:	str	r0, [fp, #-8]
   160e8:	ldr	r3, [fp, #-8]
   160ec:	sub	r3, r3, #33	; 0x21
   160f0:	cmp	r3, #93	; 0x5d
   160f4:	bhi	16100 <__assert_fail@plt+0x51b4>
   160f8:	mov	r3, #1
   160fc:	b	16104 <__assert_fail@plt+0x51b8>
   16100:	mov	r3, #0
   16104:	mov	r0, r3
   16108:	add	sp, fp, #0
   1610c:	pop	{fp}		; (ldr fp, [sp], #4)
   16110:	bx	lr
   16114:	push	{fp}		; (str fp, [sp, #-4]!)
   16118:	add	fp, sp, #0
   1611c:	sub	sp, sp, #12
   16120:	str	r0, [fp, #-8]
   16124:	ldr	r3, [fp, #-8]
   16128:	sub	r3, r3, #97	; 0x61
   1612c:	cmp	r3, #25
   16130:	bhi	1613c <__assert_fail@plt+0x51f0>
   16134:	mov	r3, #1
   16138:	b	16140 <__assert_fail@plt+0x51f4>
   1613c:	mov	r3, #0
   16140:	mov	r0, r3
   16144:	add	sp, fp, #0
   16148:	pop	{fp}		; (ldr fp, [sp], #4)
   1614c:	bx	lr
   16150:	push	{fp}		; (str fp, [sp, #-4]!)
   16154:	add	fp, sp, #0
   16158:	sub	sp, sp, #12
   1615c:	str	r0, [fp, #-8]
   16160:	ldr	r3, [fp, #-8]
   16164:	sub	r3, r3, #32
   16168:	cmp	r3, #94	; 0x5e
   1616c:	bhi	16178 <__assert_fail@plt+0x522c>
   16170:	mov	r3, #1
   16174:	b	1617c <__assert_fail@plt+0x5230>
   16178:	mov	r3, #0
   1617c:	mov	r0, r3
   16180:	add	sp, fp, #0
   16184:	pop	{fp}		; (ldr fp, [sp], #4)
   16188:	bx	lr
   1618c:	push	{fp}		; (str fp, [sp, #-4]!)
   16190:	add	fp, sp, #0
   16194:	sub	sp, sp, #12
   16198:	str	r0, [fp, #-8]
   1619c:	ldr	r3, [fp, #-8]
   161a0:	cmp	r3, #64	; 0x40
   161a4:	bgt	161c8 <__assert_fail@plt+0x527c>
   161a8:	ldr	r3, [fp, #-8]
   161ac:	cmp	r3, #58	; 0x3a
   161b0:	bge	161f0 <__assert_fail@plt+0x52a4>
   161b4:	ldr	r3, [fp, #-8]
   161b8:	sub	r3, r3, #33	; 0x21
   161bc:	cmp	r3, #14
   161c0:	bhi	161f8 <__assert_fail@plt+0x52ac>
   161c4:	b	161f0 <__assert_fail@plt+0x52a4>
   161c8:	ldr	r3, [fp, #-8]
   161cc:	cmp	r3, #91	; 0x5b
   161d0:	blt	161f8 <__assert_fail@plt+0x52ac>
   161d4:	ldr	r3, [fp, #-8]
   161d8:	cmp	r3, #96	; 0x60
   161dc:	ble	161f0 <__assert_fail@plt+0x52a4>
   161e0:	ldr	r3, [fp, #-8]
   161e4:	sub	r3, r3, #123	; 0x7b
   161e8:	cmp	r3, #3
   161ec:	bhi	161f8 <__assert_fail@plt+0x52ac>
   161f0:	mov	r3, #1
   161f4:	b	161fc <__assert_fail@plt+0x52b0>
   161f8:	mov	r3, #0
   161fc:	mov	r0, r3
   16200:	add	sp, fp, #0
   16204:	pop	{fp}		; (ldr fp, [sp], #4)
   16208:	bx	lr
   1620c:	push	{fp}		; (str fp, [sp, #-4]!)
   16210:	add	fp, sp, #0
   16214:	sub	sp, sp, #12
   16218:	str	r0, [fp, #-8]
   1621c:	ldr	r3, [fp, #-8]
   16220:	cmp	r3, #9
   16224:	blt	16248 <__assert_fail@plt+0x52fc>
   16228:	ldr	r3, [fp, #-8]
   1622c:	cmp	r3, #13
   16230:	ble	16240 <__assert_fail@plt+0x52f4>
   16234:	ldr	r3, [fp, #-8]
   16238:	cmp	r3, #32
   1623c:	bne	16248 <__assert_fail@plt+0x52fc>
   16240:	mov	r3, #1
   16244:	b	1624c <__assert_fail@plt+0x5300>
   16248:	mov	r3, #0
   1624c:	mov	r0, r3
   16250:	add	sp, fp, #0
   16254:	pop	{fp}		; (ldr fp, [sp], #4)
   16258:	bx	lr
   1625c:	push	{fp}		; (str fp, [sp, #-4]!)
   16260:	add	fp, sp, #0
   16264:	sub	sp, sp, #12
   16268:	str	r0, [fp, #-8]
   1626c:	ldr	r3, [fp, #-8]
   16270:	sub	r3, r3, #65	; 0x41
   16274:	cmp	r3, #25
   16278:	bhi	16284 <__assert_fail@plt+0x5338>
   1627c:	mov	r3, #1
   16280:	b	16288 <__assert_fail@plt+0x533c>
   16284:	mov	r3, #0
   16288:	mov	r0, r3
   1628c:	add	sp, fp, #0
   16290:	pop	{fp}		; (ldr fp, [sp], #4)
   16294:	bx	lr
   16298:	push	{fp}		; (str fp, [sp, #-4]!)
   1629c:	add	fp, sp, #0
   162a0:	sub	sp, sp, #12
   162a4:	str	r0, [fp, #-8]
   162a8:	ldr	r3, [fp, #-8]
   162ac:	sub	r3, r3, #48	; 0x30
   162b0:	cmp	r3, #54	; 0x36
   162b4:	ldrls	pc, [pc, r3, lsl #2]
   162b8:	b	163a0 <__assert_fail@plt+0x5454>
   162bc:	muleq	r1, r8, r3
   162c0:	muleq	r1, r8, r3
   162c4:	muleq	r1, r8, r3
   162c8:	muleq	r1, r8, r3
   162cc:	muleq	r1, r8, r3
   162d0:	muleq	r1, r8, r3
   162d4:	muleq	r1, r8, r3
   162d8:	muleq	r1, r8, r3
   162dc:	muleq	r1, r8, r3
   162e0:	muleq	r1, r8, r3
   162e4:	andeq	r6, r1, r0, lsr #7
   162e8:	andeq	r6, r1, r0, lsr #7
   162ec:	andeq	r6, r1, r0, lsr #7
   162f0:	andeq	r6, r1, r0, lsr #7
   162f4:	andeq	r6, r1, r0, lsr #7
   162f8:	andeq	r6, r1, r0, lsr #7
   162fc:	andeq	r6, r1, r0, lsr #7
   16300:	muleq	r1, r8, r3
   16304:	muleq	r1, r8, r3
   16308:	muleq	r1, r8, r3
   1630c:	muleq	r1, r8, r3
   16310:	muleq	r1, r8, r3
   16314:	muleq	r1, r8, r3
   16318:	andeq	r6, r1, r0, lsr #7
   1631c:	andeq	r6, r1, r0, lsr #7
   16320:	andeq	r6, r1, r0, lsr #7
   16324:	andeq	r6, r1, r0, lsr #7
   16328:	andeq	r6, r1, r0, lsr #7
   1632c:	andeq	r6, r1, r0, lsr #7
   16330:	andeq	r6, r1, r0, lsr #7
   16334:	andeq	r6, r1, r0, lsr #7
   16338:	andeq	r6, r1, r0, lsr #7
   1633c:	andeq	r6, r1, r0, lsr #7
   16340:	andeq	r6, r1, r0, lsr #7
   16344:	andeq	r6, r1, r0, lsr #7
   16348:	andeq	r6, r1, r0, lsr #7
   1634c:	andeq	r6, r1, r0, lsr #7
   16350:	andeq	r6, r1, r0, lsr #7
   16354:	andeq	r6, r1, r0, lsr #7
   16358:	andeq	r6, r1, r0, lsr #7
   1635c:	andeq	r6, r1, r0, lsr #7
   16360:	andeq	r6, r1, r0, lsr #7
   16364:	andeq	r6, r1, r0, lsr #7
   16368:	andeq	r6, r1, r0, lsr #7
   1636c:	andeq	r6, r1, r0, lsr #7
   16370:	andeq	r6, r1, r0, lsr #7
   16374:	andeq	r6, r1, r0, lsr #7
   16378:	andeq	r6, r1, r0, lsr #7
   1637c:	andeq	r6, r1, r0, lsr #7
   16380:	muleq	r1, r8, r3
   16384:	muleq	r1, r8, r3
   16388:	muleq	r1, r8, r3
   1638c:	muleq	r1, r8, r3
   16390:	muleq	r1, r8, r3
   16394:	muleq	r1, r8, r3
   16398:	mov	r3, #1
   1639c:	b	163a4 <__assert_fail@plt+0x5458>
   163a0:	mov	r3, #0
   163a4:	mov	r0, r3
   163a8:	add	sp, fp, #0
   163ac:	pop	{fp}		; (ldr fp, [sp], #4)
   163b0:	bx	lr
   163b4:	push	{fp}		; (str fp, [sp, #-4]!)
   163b8:	add	fp, sp, #0
   163bc:	sub	sp, sp, #12
   163c0:	str	r0, [fp, #-8]
   163c4:	ldr	r3, [fp, #-8]
   163c8:	sub	r3, r3, #65	; 0x41
   163cc:	cmp	r3, #25
   163d0:	bhi	163e0 <__assert_fail@plt+0x5494>
   163d4:	ldr	r3, [fp, #-8]
   163d8:	add	r3, r3, #32
   163dc:	b	163e4 <__assert_fail@plt+0x5498>
   163e0:	ldr	r3, [fp, #-8]
   163e4:	mov	r0, r3
   163e8:	add	sp, fp, #0
   163ec:	pop	{fp}		; (ldr fp, [sp], #4)
   163f0:	bx	lr
   163f4:	push	{fp}		; (str fp, [sp, #-4]!)
   163f8:	add	fp, sp, #0
   163fc:	sub	sp, sp, #12
   16400:	str	r0, [fp, #-8]
   16404:	ldr	r3, [fp, #-8]
   16408:	sub	r3, r3, #97	; 0x61
   1640c:	cmp	r3, #25
   16410:	bhi	16420 <__assert_fail@plt+0x54d4>
   16414:	ldr	r3, [fp, #-8]
   16418:	sub	r3, r3, #32
   1641c:	b	16424 <__assert_fail@plt+0x54d8>
   16420:	ldr	r3, [fp, #-8]
   16424:	mov	r0, r3
   16428:	add	sp, fp, #0
   1642c:	pop	{fp}		; (ldr fp, [sp], #4)
   16430:	bx	lr
   16434:	push	{fp}		; (str fp, [sp, #-4]!)
   16438:	add	fp, sp, #0
   1643c:	sub	sp, sp, #12
   16440:	str	r0, [fp, #-8]
   16444:	movw	r3, #53620	; 0xd174
   16448:	movt	r3, #2
   1644c:	ldr	r2, [fp, #-8]
   16450:	str	r2, [r3]
   16454:	nop	{0}
   16458:	add	sp, fp, #0
   1645c:	pop	{fp}		; (ldr fp, [sp], #4)
   16460:	bx	lr
   16464:	push	{fp}		; (str fp, [sp, #-4]!)
   16468:	add	fp, sp, #0
   1646c:	sub	sp, sp, #12
   16470:	mov	r3, r0
   16474:	strb	r3, [fp, #-5]
   16478:	movw	r3, #53624	; 0xd178
   1647c:	movt	r3, #2
   16480:	ldrb	r2, [fp, #-5]
   16484:	strb	r2, [r3]
   16488:	nop	{0}
   1648c:	add	sp, fp, #0
   16490:	pop	{fp}		; (ldr fp, [sp], #4)
   16494:	bx	lr
   16498:	str	r4, [sp, #-12]!
   1649c:	str	fp, [sp, #4]
   164a0:	str	lr, [sp, #8]
   164a4:	add	fp, sp, #8
   164a8:	sub	sp, sp, #20
   164ac:	movw	r3, #53588	; 0xd154
   164b0:	movt	r3, #2
   164b4:	ldr	r3, [r3]
   164b8:	mov	r0, r3
   164bc:	bl	1b2ac <__assert_fail@plt+0xa360>
   164c0:	mov	r3, r0
   164c4:	cmp	r3, #0
   164c8:	beq	1659c <__assert_fail@plt+0x5650>
   164cc:	movw	r3, #53624	; 0xd178
   164d0:	movt	r3, #2
   164d4:	ldrb	r3, [r3]
   164d8:	eor	r3, r3, #1
   164dc:	uxtb	r3, r3
   164e0:	cmp	r3, #0
   164e4:	bne	164fc <__assert_fail@plt+0x55b0>
   164e8:	bl	10e80 <__errno_location@plt>
   164ec:	mov	r3, r0
   164f0:	ldr	r3, [r3]
   164f4:	cmp	r3, #32
   164f8:	beq	1659c <__assert_fail@plt+0x5650>
   164fc:	movw	r0, #51092	; 0xc794
   16500:	movt	r0, #1
   16504:	bl	10e50 <gettext@plt>
   16508:	str	r0, [fp, #-16]
   1650c:	movw	r3, #53620	; 0xd174
   16510:	movt	r3, #2
   16514:	ldr	r3, [r3]
   16518:	cmp	r3, #0
   1651c:	beq	16568 <__assert_fail@plt+0x561c>
   16520:	bl	10e80 <__errno_location@plt>
   16524:	mov	r3, r0
   16528:	ldr	r4, [r3]
   1652c:	movw	r3, #53620	; 0xd174
   16530:	movt	r3, #2
   16534:	ldr	r3, [r3]
   16538:	mov	r0, r3
   1653c:	bl	1915c <__assert_fail@plt+0x8210>
   16540:	mov	r2, r0
   16544:	ldr	r3, [fp, #-16]
   16548:	str	r3, [sp]
   1654c:	mov	r3, r2
   16550:	movw	r2, #51104	; 0xc7a0
   16554:	movt	r2, #1
   16558:	mov	r1, r4
   1655c:	mov	r0, #0
   16560:	bl	10df0 <error@plt>
   16564:	b	16588 <__assert_fail@plt+0x563c>
   16568:	bl	10e80 <__errno_location@plt>
   1656c:	mov	r3, r0
   16570:	ldr	r1, [r3]
   16574:	ldr	r3, [fp, #-16]
   16578:	movw	r2, #51112	; 0xc7a8
   1657c:	movt	r2, #1
   16580:	mov	r0, #0
   16584:	bl	10df0 <error@plt>
   16588:	movw	r3, #53492	; 0xd0f4
   1658c:	movt	r3, #2
   16590:	ldr	r3, [r3]
   16594:	mov	r0, r3
   16598:	bl	10d3c <_exit@plt>
   1659c:	movw	r3, #53576	; 0xd148
   165a0:	movt	r3, #2
   165a4:	ldr	r3, [r3]
   165a8:	mov	r0, r3
   165ac:	bl	1b2ac <__assert_fail@plt+0xa360>
   165b0:	mov	r3, r0
   165b4:	cmp	r3, #0
   165b8:	beq	165d0 <__assert_fail@plt+0x5684>
   165bc:	movw	r3, #53492	; 0xd0f4
   165c0:	movt	r3, #2
   165c4:	ldr	r3, [r3]
   165c8:	mov	r0, r3
   165cc:	bl	10d3c <_exit@plt>
   165d0:	nop	{0}
   165d4:	sub	sp, fp, #8
   165d8:	ldr	r4, [sp]
   165dc:	ldr	fp, [sp, #4]
   165e0:	add	sp, sp, #8
   165e4:	pop	{pc}		; (ldr pc, [sp], #4)
   165e8:	str	fp, [sp, #-8]!
   165ec:	str	lr, [sp, #4]
   165f0:	add	fp, sp, #4
   165f4:	sub	sp, sp, #40	; 0x28
   165f8:	str	r0, [fp, #-16]
   165fc:	strd	r2, [fp, #-28]	; 0xffffffe4
   16600:	ldr	r3, [fp, #12]
   16604:	str	r3, [sp, #8]
   16608:	ldrd	r2, [fp, #4]
   1660c:	strd	r2, [sp]
   16610:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16614:	ldr	r0, [fp, #-16]
   16618:	bl	10d00 <posix_fadvise64@plt>
   1661c:	str	r0, [fp, #-8]
   16620:	nop	{0}
   16624:	sub	sp, fp, #4
   16628:	ldr	fp, [sp]
   1662c:	add	sp, sp, #4
   16630:	pop	{pc}		; (ldr pc, [sp], #4)
   16634:	str	fp, [sp, #-8]!
   16638:	str	lr, [sp, #4]
   1663c:	add	fp, sp, #4
   16640:	sub	sp, sp, #24
   16644:	str	r0, [fp, #-8]
   16648:	str	r1, [fp, #-12]
   1664c:	ldr	r3, [fp, #-8]
   16650:	cmp	r3, #0
   16654:	beq	16688 <__assert_fail@plt+0x573c>
   16658:	ldr	r0, [fp, #-8]
   1665c:	bl	10ea4 <fileno@plt>
   16660:	mov	r1, r0
   16664:	ldr	r3, [fp, #-12]
   16668:	str	r3, [sp, #8]
   1666c:	mov	r2, #0
   16670:	mov	r3, #0
   16674:	strd	r2, [sp]
   16678:	mov	r2, #0
   1667c:	mov	r3, #0
   16680:	mov	r0, r1
   16684:	bl	165e8 <__assert_fail@plt+0x569c>
   16688:	nop	{0}
   1668c:	sub	sp, fp, #4
   16690:	ldr	fp, [sp]
   16694:	add	sp, sp, #4
   16698:	pop	{pc}		; (ldr pc, [sp], #4)
   1669c:	str	fp, [sp, #-8]!
   166a0:	str	lr, [sp, #4]
   166a4:	add	fp, sp, #4
   166a8:	sub	sp, sp, #32
   166ac:	str	r0, [fp, #-24]	; 0xffffffe8
   166b0:	mov	r3, #0
   166b4:	str	r3, [fp, #-8]
   166b8:	mov	r3, #0
   166bc:	str	r3, [fp, #-12]
   166c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166c4:	bl	10ea4 <fileno@plt>
   166c8:	str	r0, [fp, #-16]
   166cc:	ldr	r3, [fp, #-16]
   166d0:	cmp	r3, #0
   166d4:	bge	166e8 <__assert_fail@plt+0x579c>
   166d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166dc:	bl	10ec8 <fclose@plt>
   166e0:	mov	r3, r0
   166e4:	b	1678c <__assert_fail@plt+0x5840>
   166e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166ec:	bl	10e14 <__freading@plt>
   166f0:	mov	r3, r0
   166f4:	cmp	r3, #0
   166f8:	beq	16734 <__assert_fail@plt+0x57e8>
   166fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16700:	bl	10ea4 <fileno@plt>
   16704:	mov	r1, r0
   16708:	mov	r3, #1
   1670c:	str	r3, [sp]
   16710:	mov	r2, #0
   16714:	mov	r3, #0
   16718:	mov	r0, r1
   1671c:	bl	10db4 <lseek64@plt>
   16720:	mvn	r2, #0
   16724:	mvn	r3, #0
   16728:	cmp	r1, r3
   1672c:	cmpeq	r0, r2
   16730:	beq	16758 <__assert_fail@plt+0x580c>
   16734:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16738:	bl	167f4 <__assert_fail@plt+0x58a8>
   1673c:	mov	r3, r0
   16740:	cmp	r3, #0
   16744:	beq	16758 <__assert_fail@plt+0x580c>
   16748:	bl	10e80 <__errno_location@plt>
   1674c:	mov	r3, r0
   16750:	ldr	r3, [r3]
   16754:	str	r3, [fp, #-8]
   16758:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1675c:	bl	10ec8 <fclose@plt>
   16760:	str	r0, [fp, #-12]
   16764:	ldr	r3, [fp, #-8]
   16768:	cmp	r3, #0
   1676c:	beq	16788 <__assert_fail@plt+0x583c>
   16770:	bl	10e80 <__errno_location@plt>
   16774:	mov	r2, r0
   16778:	ldr	r3, [fp, #-8]
   1677c:	str	r3, [r2]
   16780:	mvn	r3, #0
   16784:	str	r3, [fp, #-12]
   16788:	ldr	r3, [fp, #-12]
   1678c:	mov	r0, r3
   16790:	sub	sp, fp, #4
   16794:	ldr	fp, [sp]
   16798:	add	sp, sp, #4
   1679c:	pop	{pc}		; (ldr pc, [sp], #4)
   167a0:	str	fp, [sp, #-8]!
   167a4:	str	lr, [sp, #4]
   167a8:	add	fp, sp, #4
   167ac:	sub	sp, sp, #16
   167b0:	str	r0, [fp, #-8]
   167b4:	ldr	r3, [fp, #-8]
   167b8:	ldr	r3, [r3]
   167bc:	and	r3, r3, #256	; 0x100
   167c0:	cmp	r3, #0
   167c4:	beq	167e0 <__assert_fail@plt+0x5894>
   167c8:	mov	r3, #1
   167cc:	str	r3, [sp]
   167d0:	mov	r2, #0
   167d4:	mov	r3, #0
   167d8:	ldr	r0, [fp, #-8]
   167dc:	bl	16904 <__assert_fail@plt+0x59b8>
   167e0:	nop	{0}
   167e4:	sub	sp, fp, #4
   167e8:	ldr	fp, [sp]
   167ec:	add	sp, sp, #4
   167f0:	pop	{pc}		; (ldr pc, [sp], #4)
   167f4:	str	fp, [sp, #-8]!
   167f8:	str	lr, [sp, #4]
   167fc:	add	fp, sp, #4
   16800:	sub	sp, sp, #8
   16804:	str	r0, [fp, #-8]
   16808:	ldr	r3, [fp, #-8]
   1680c:	cmp	r3, #0
   16810:	beq	16828 <__assert_fail@plt+0x58dc>
   16814:	ldr	r0, [fp, #-8]
   16818:	bl	10e14 <__freading@plt>
   1681c:	mov	r3, r0
   16820:	cmp	r3, #0
   16824:	bne	16838 <__assert_fail@plt+0x58ec>
   16828:	ldr	r0, [fp, #-8]
   1682c:	bl	10d18 <fflush@plt>
   16830:	mov	r3, r0
   16834:	b	1684c <__assert_fail@plt+0x5900>
   16838:	ldr	r0, [fp, #-8]
   1683c:	bl	167a0 <__assert_fail@plt+0x5854>
   16840:	ldr	r0, [fp, #-8]
   16844:	bl	10d18 <fflush@plt>
   16848:	mov	r3, r0
   1684c:	mov	r0, r3
   16850:	sub	sp, fp, #4
   16854:	ldr	fp, [sp]
   16858:	add	sp, sp, #4
   1685c:	pop	{pc}		; (ldr pc, [sp], #4)
   16860:	str	r4, [sp, #-12]!
   16864:	str	fp, [sp, #4]
   16868:	str	lr, [sp, #8]
   1686c:	add	fp, sp, #8
   16870:	sub	sp, sp, #20
   16874:	str	r0, [fp, #-24]	; 0xffffffe8
   16878:	bl	10e80 <__errno_location@plt>
   1687c:	mov	r3, r0
   16880:	ldr	r3, [r3]
   16884:	str	r3, [fp, #-20]	; 0xffffffec
   16888:	bl	10e80 <__errno_location@plt>
   1688c:	mov	r3, r0
   16890:	ldr	r3, [r3]
   16894:	str	r3, [fp, #-16]
   16898:	bl	10e80 <__errno_location@plt>
   1689c:	mov	r2, r0
   168a0:	mov	r3, #0
   168a4:	str	r3, [r2]
   168a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   168ac:	bl	10d30 <free@plt>
   168b0:	bl	10e80 <__errno_location@plt>
   168b4:	mov	r3, r0
   168b8:	ldr	r3, [r3]
   168bc:	cmp	r3, #0
   168c0:	moveq	r3, #1
   168c4:	movne	r3, #0
   168c8:	uxtb	r3, r3
   168cc:	mov	r4, r3
   168d0:	bl	10e80 <__errno_location@plt>
   168d4:	mov	r2, r0
   168d8:	lsl	r3, r4, #2
   168dc:	sub	r1, fp, #12
   168e0:	add	r3, r1, r3
   168e4:	ldr	r3, [r3, #-8]
   168e8:	str	r3, [r2]
   168ec:	nop	{0}
   168f0:	sub	sp, fp, #8
   168f4:	ldr	r4, [sp]
   168f8:	ldr	fp, [sp, #4]
   168fc:	add	sp, sp, #8
   16900:	pop	{pc}		; (ldr pc, [sp], #4)
   16904:	str	fp, [sp, #-8]!
   16908:	str	lr, [sp, #4]
   1690c:	add	fp, sp, #4
   16910:	sub	sp, sp, #32
   16914:	str	r0, [fp, #-16]
   16918:	strd	r2, [fp, #-28]	; 0xffffffe4
   1691c:	ldr	r3, [fp, #-16]
   16920:	ldr	r2, [r3, #8]
   16924:	ldr	r3, [fp, #-16]
   16928:	ldr	r3, [r3, #4]
   1692c:	cmp	r2, r3
   16930:	bne	169c8 <__assert_fail@plt+0x5a7c>
   16934:	ldr	r3, [fp, #-16]
   16938:	ldr	r2, [r3, #20]
   1693c:	ldr	r3, [fp, #-16]
   16940:	ldr	r3, [r3, #16]
   16944:	cmp	r2, r3
   16948:	bne	169c8 <__assert_fail@plt+0x5a7c>
   1694c:	ldr	r3, [fp, #-16]
   16950:	ldr	r3, [r3, #36]	; 0x24
   16954:	cmp	r3, #0
   16958:	bne	169c8 <__assert_fail@plt+0x5a7c>
   1695c:	ldr	r0, [fp, #-16]
   16960:	bl	10ea4 <fileno@plt>
   16964:	mov	r1, r0
   16968:	ldr	r3, [fp, #4]
   1696c:	str	r3, [sp]
   16970:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16974:	mov	r0, r1
   16978:	bl	10db4 <lseek64@plt>
   1697c:	strd	r0, [fp, #-12]
   16980:	ldrd	r2, [fp, #-12]
   16984:	mvn	r0, #0
   16988:	mvn	r1, #0
   1698c:	cmp	r3, r1
   16990:	cmpeq	r2, r0
   16994:	bne	169a0 <__assert_fail@plt+0x5a54>
   16998:	mvn	r3, #0
   1699c:	b	169e0 <__assert_fail@plt+0x5a94>
   169a0:	ldr	r3, [fp, #-16]
   169a4:	ldr	r3, [r3]
   169a8:	bic	r2, r3, #16
   169ac:	ldr	r3, [fp, #-16]
   169b0:	str	r2, [r3]
   169b4:	ldr	r1, [fp, #-16]
   169b8:	ldrd	r2, [fp, #-12]
   169bc:	strd	r2, [r1, #80]	; 0x50
   169c0:	mov	r3, #0
   169c4:	b	169e0 <__assert_fail@plt+0x5a94>
   169c8:	ldr	r3, [fp, #4]
   169cc:	str	r3, [sp]
   169d0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   169d4:	ldr	r0, [fp, #-16]
   169d8:	bl	10ed4 <fseeko64@plt>
   169dc:	mov	r3, r0
   169e0:	mov	r0, r3
   169e4:	sub	sp, fp, #4
   169e8:	ldr	fp, [sp]
   169ec:	add	sp, sp, #4
   169f0:	pop	{pc}		; (ldr pc, [sp], #4)
   169f4:	str	fp, [sp, #-8]!
   169f8:	str	lr, [sp, #4]
   169fc:	add	fp, sp, #4
   16a00:	bl	10e80 <__errno_location@plt>
   16a04:	mov	r2, r0
   16a08:	mov	r3, #12
   16a0c:	str	r3, [r2]
   16a10:	mov	r3, #0
   16a14:	mov	r0, r3
   16a18:	sub	sp, fp, #4
   16a1c:	ldr	fp, [sp]
   16a20:	add	sp, sp, #4
   16a24:	pop	{pc}		; (ldr pc, [sp], #4)
   16a28:	str	fp, [sp, #-8]!
   16a2c:	str	lr, [sp, #4]
   16a30:	add	fp, sp, #4
   16a34:	sub	sp, sp, #8
   16a38:	str	r0, [fp, #-8]
   16a3c:	ldr	r3, [fp, #-8]
   16a40:	mov	r0, r3
   16a44:	bl	1b054 <__assert_fail@plt+0xa108>
   16a48:	mov	r3, r0
   16a4c:	mov	r0, r3
   16a50:	sub	sp, fp, #4
   16a54:	ldr	fp, [sp]
   16a58:	add	sp, sp, #4
   16a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a60:	str	fp, [sp, #-8]!
   16a64:	str	lr, [sp, #4]
   16a68:	add	fp, sp, #4
   16a6c:	sub	sp, sp, #8
   16a70:	str	r0, [fp, #-8]
   16a74:	str	r1, [fp, #-12]
   16a78:	ldr	r3, [fp, #-12]
   16a7c:	cmp	r3, #0
   16a80:	moveq	r3, #1
   16a84:	movne	r3, #0
   16a88:	uxtb	r3, r3
   16a8c:	mov	r2, r3
   16a90:	ldr	r3, [fp, #-12]
   16a94:	orr	r3, r2, r3
   16a98:	mov	r1, r3
   16a9c:	ldr	r0, [fp, #-8]
   16aa0:	bl	1b0e4 <__assert_fail@plt+0xa198>
   16aa4:	mov	r3, r0
   16aa8:	mov	r0, r3
   16aac:	sub	sp, fp, #4
   16ab0:	ldr	fp, [sp]
   16ab4:	add	sp, sp, #4
   16ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   16abc:	str	fp, [sp, #-8]!
   16ac0:	str	lr, [sp, #4]
   16ac4:	add	fp, sp, #4
   16ac8:	sub	sp, sp, #8
   16acc:	str	r0, [fp, #-8]
   16ad0:	str	r1, [fp, #-12]
   16ad4:	ldr	r3, [fp, #-8]
   16ad8:	ldr	r2, [fp, #-12]
   16adc:	mov	r1, r2
   16ae0:	mov	r0, r3
   16ae4:	bl	1af84 <__assert_fail@plt+0xa038>
   16ae8:	mov	r3, r0
   16aec:	mov	r0, r3
   16af0:	sub	sp, fp, #4
   16af4:	ldr	fp, [sp]
   16af8:	add	sp, sp, #4
   16afc:	pop	{pc}		; (ldr pc, [sp], #4)
   16b00:	str	fp, [sp, #-8]!
   16b04:	str	lr, [sp, #4]
   16b08:	add	fp, sp, #4
   16b0c:	sub	sp, sp, #16
   16b10:	str	r0, [fp, #-8]
   16b14:	str	r1, [fp, #-12]
   16b18:	str	r2, [fp, #-16]
   16b1c:	ldr	r3, [fp, #-12]
   16b20:	cmp	r3, #0
   16b24:	beq	16b34 <__assert_fail@plt+0x5be8>
   16b28:	ldr	r3, [fp, #-16]
   16b2c:	cmp	r3, #0
   16b30:	bne	16b44 <__assert_fail@plt+0x5bf8>
   16b34:	mov	r3, #1
   16b38:	str	r3, [fp, #-16]
   16b3c:	ldr	r3, [fp, #-16]
   16b40:	str	r3, [fp, #-12]
   16b44:	ldr	r3, [fp, #-12]
   16b48:	ldr	r2, [fp, #-16]
   16b4c:	mov	r1, r3
   16b50:	ldr	r0, [fp, #-8]
   16b54:	bl	19508 <__assert_fail@plt+0x85bc>
   16b58:	mov	r3, r0
   16b5c:	mov	r0, r3
   16b60:	sub	sp, fp, #4
   16b64:	ldr	fp, [sp]
   16b68:	add	sp, sp, #4
   16b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b70:	str	fp, [sp, #-8]!
   16b74:	str	lr, [sp, #4]
   16b78:	add	fp, sp, #4
   16b7c:	sub	sp, sp, #16
   16b80:	str	r0, [fp, #-16]
   16b84:	ldr	r3, [fp, #-16]
   16b88:	cmp	r3, #0
   16b8c:	bne	16bb4 <__assert_fail@plt+0x5c68>
   16b90:	movw	r3, #53576	; 0xd148
   16b94:	movt	r3, #2
   16b98:	ldr	r3, [r3]
   16b9c:	mov	r2, #55	; 0x37
   16ba0:	mov	r1, #1
   16ba4:	movw	r0, #51116	; 0xc7ac
   16ba8:	movt	r0, #1
   16bac:	bl	10da8 <fwrite@plt>
   16bb0:	bl	10f34 <abort@plt>
   16bb4:	mov	r1, #47	; 0x2f
   16bb8:	ldr	r0, [fp, #-16]
   16bbc:	bl	10eec <strrchr@plt>
   16bc0:	str	r0, [fp, #-8]
   16bc4:	ldr	r3, [fp, #-8]
   16bc8:	cmp	r3, #0
   16bcc:	beq	16bdc <__assert_fail@plt+0x5c90>
   16bd0:	ldr	r3, [fp, #-8]
   16bd4:	add	r3, r3, #1
   16bd8:	b	16be0 <__assert_fail@plt+0x5c94>
   16bdc:	ldr	r3, [fp, #-16]
   16be0:	str	r3, [fp, #-12]
   16be4:	ldr	r2, [fp, #-12]
   16be8:	ldr	r3, [fp, #-16]
   16bec:	sub	r3, r2, r3
   16bf0:	cmp	r3, #6
   16bf4:	ble	16c64 <__assert_fail@plt+0x5d18>
   16bf8:	ldr	r3, [fp, #-12]
   16bfc:	sub	r3, r3, #7
   16c00:	mov	r2, #7
   16c04:	movw	r1, #51172	; 0xc7e4
   16c08:	movt	r1, #1
   16c0c:	mov	r0, r3
   16c10:	bl	10f28 <strncmp@plt>
   16c14:	mov	r3, r0
   16c18:	cmp	r3, #0
   16c1c:	bne	16c64 <__assert_fail@plt+0x5d18>
   16c20:	ldr	r3, [fp, #-12]
   16c24:	str	r3, [fp, #-16]
   16c28:	mov	r2, #3
   16c2c:	movw	r1, #51180	; 0xc7ec
   16c30:	movt	r1, #1
   16c34:	ldr	r0, [fp, #-12]
   16c38:	bl	10f28 <strncmp@plt>
   16c3c:	mov	r3, r0
   16c40:	cmp	r3, #0
   16c44:	bne	16c64 <__assert_fail@plt+0x5d18>
   16c48:	ldr	r3, [fp, #-12]
   16c4c:	add	r3, r3, #3
   16c50:	str	r3, [fp, #-16]
   16c54:	movw	r3, #53560	; 0xd138
   16c58:	movt	r3, #2
   16c5c:	ldr	r2, [fp, #-16]
   16c60:	str	r2, [r3]
   16c64:	movw	r3, #53628	; 0xd17c
   16c68:	movt	r3, #2
   16c6c:	ldr	r2, [fp, #-16]
   16c70:	str	r2, [r3]
   16c74:	movw	r3, #53564	; 0xd13c
   16c78:	movt	r3, #2
   16c7c:	ldr	r2, [fp, #-16]
   16c80:	str	r2, [r3]
   16c84:	nop	{0}
   16c88:	sub	sp, fp, #4
   16c8c:	ldr	fp, [sp]
   16c90:	add	sp, sp, #4
   16c94:	pop	{pc}		; (ldr pc, [sp], #4)
   16c98:	str	fp, [sp, #-8]!
   16c9c:	str	lr, [sp, #4]
   16ca0:	add	fp, sp, #4
   16ca4:	sub	sp, sp, #16
   16ca8:	str	r0, [fp, #-16]
   16cac:	bl	10e80 <__errno_location@plt>
   16cb0:	mov	r3, r0
   16cb4:	ldr	r3, [r3]
   16cb8:	str	r3, [fp, #-8]
   16cbc:	ldr	r3, [fp, #-16]
   16cc0:	cmp	r3, #0
   16cc4:	beq	16cd0 <__assert_fail@plt+0x5d84>
   16cc8:	ldr	r3, [fp, #-16]
   16ccc:	b	16cd8 <__assert_fail@plt+0x5d8c>
   16cd0:	movw	r3, #53632	; 0xd180
   16cd4:	movt	r3, #2
   16cd8:	mov	r1, #48	; 0x30
   16cdc:	mov	r0, r3
   16ce0:	bl	1a51c <__assert_fail@plt+0x95d0>
   16ce4:	mov	r3, r0
   16ce8:	str	r3, [fp, #-12]
   16cec:	bl	10e80 <__errno_location@plt>
   16cf0:	mov	r2, r0
   16cf4:	ldr	r3, [fp, #-8]
   16cf8:	str	r3, [r2]
   16cfc:	ldr	r3, [fp, #-12]
   16d00:	mov	r0, r3
   16d04:	sub	sp, fp, #4
   16d08:	ldr	fp, [sp]
   16d0c:	add	sp, sp, #4
   16d10:	pop	{pc}		; (ldr pc, [sp], #4)
   16d14:	push	{fp}		; (str fp, [sp, #-4]!)
   16d18:	add	fp, sp, #0
   16d1c:	sub	sp, sp, #12
   16d20:	str	r0, [fp, #-8]
   16d24:	ldr	r3, [fp, #-8]
   16d28:	cmp	r3, #0
   16d2c:	beq	16d38 <__assert_fail@plt+0x5dec>
   16d30:	ldr	r3, [fp, #-8]
   16d34:	b	16d40 <__assert_fail@plt+0x5df4>
   16d38:	movw	r3, #53632	; 0xd180
   16d3c:	movt	r3, #2
   16d40:	ldr	r3, [r3]
   16d44:	mov	r0, r3
   16d48:	add	sp, fp, #0
   16d4c:	pop	{fp}		; (ldr fp, [sp], #4)
   16d50:	bx	lr
   16d54:	push	{fp}		; (str fp, [sp, #-4]!)
   16d58:	add	fp, sp, #0
   16d5c:	sub	sp, sp, #12
   16d60:	str	r0, [fp, #-8]
   16d64:	str	r1, [fp, #-12]
   16d68:	ldr	r3, [fp, #-8]
   16d6c:	cmp	r3, #0
   16d70:	beq	16d7c <__assert_fail@plt+0x5e30>
   16d74:	ldr	r3, [fp, #-8]
   16d78:	b	16d84 <__assert_fail@plt+0x5e38>
   16d7c:	movw	r3, #53632	; 0xd180
   16d80:	movt	r3, #2
   16d84:	ldr	r2, [fp, #-12]
   16d88:	str	r2, [r3]
   16d8c:	nop	{0}
   16d90:	add	sp, fp, #0
   16d94:	pop	{fp}		; (ldr fp, [sp], #4)
   16d98:	bx	lr
   16d9c:	push	{fp}		; (str fp, [sp, #-4]!)
   16da0:	add	fp, sp, #0
   16da4:	sub	sp, sp, #36	; 0x24
   16da8:	str	r0, [fp, #-24]	; 0xffffffe8
   16dac:	mov	r3, r1
   16db0:	str	r2, [fp, #-32]	; 0xffffffe0
   16db4:	strb	r3, [fp, #-25]	; 0xffffffe7
   16db8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   16dbc:	strb	r3, [fp, #-5]
   16dc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16dc4:	cmp	r3, #0
   16dc8:	beq	16dd4 <__assert_fail@plt+0x5e88>
   16dcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16dd0:	b	16ddc <__assert_fail@plt+0x5e90>
   16dd4:	movw	r3, #53632	; 0xd180
   16dd8:	movt	r3, #2
   16ddc:	add	r2, r3, #8
   16de0:	ldrb	r3, [fp, #-5]
   16de4:	lsr	r3, r3, #5
   16de8:	uxtb	r3, r3
   16dec:	lsl	r3, r3, #2
   16df0:	add	r3, r2, r3
   16df4:	str	r3, [fp, #-12]
   16df8:	ldrb	r3, [fp, #-5]
   16dfc:	and	r3, r3, #31
   16e00:	str	r3, [fp, #-16]
   16e04:	ldr	r3, [fp, #-12]
   16e08:	ldr	r2, [r3]
   16e0c:	ldr	r3, [fp, #-16]
   16e10:	lsr	r3, r2, r3
   16e14:	and	r3, r3, #1
   16e18:	str	r3, [fp, #-20]	; 0xffffffec
   16e1c:	ldr	r3, [fp, #-12]
   16e20:	ldr	r3, [r3]
   16e24:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16e28:	and	r1, r2, #1
   16e2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16e30:	eor	r1, r1, r2
   16e34:	ldr	r2, [fp, #-16]
   16e38:	lsl	r2, r1, r2
   16e3c:	eor	r2, r2, r3
   16e40:	ldr	r3, [fp, #-12]
   16e44:	str	r2, [r3]
   16e48:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e4c:	mov	r0, r3
   16e50:	add	sp, fp, #0
   16e54:	pop	{fp}		; (ldr fp, [sp], #4)
   16e58:	bx	lr
   16e5c:	push	{fp}		; (str fp, [sp, #-4]!)
   16e60:	add	fp, sp, #0
   16e64:	sub	sp, sp, #20
   16e68:	str	r0, [fp, #-16]
   16e6c:	str	r1, [fp, #-20]	; 0xffffffec
   16e70:	ldr	r3, [fp, #-16]
   16e74:	cmp	r3, #0
   16e78:	bne	16e88 <__assert_fail@plt+0x5f3c>
   16e7c:	movw	r3, #53632	; 0xd180
   16e80:	movt	r3, #2
   16e84:	str	r3, [fp, #-16]
   16e88:	ldr	r3, [fp, #-16]
   16e8c:	ldr	r3, [r3, #4]
   16e90:	str	r3, [fp, #-8]
   16e94:	ldr	r3, [fp, #-16]
   16e98:	ldr	r2, [fp, #-20]	; 0xffffffec
   16e9c:	str	r2, [r3, #4]
   16ea0:	ldr	r3, [fp, #-8]
   16ea4:	mov	r0, r3
   16ea8:	add	sp, fp, #0
   16eac:	pop	{fp}		; (ldr fp, [sp], #4)
   16eb0:	bx	lr
   16eb4:	str	fp, [sp, #-8]!
   16eb8:	str	lr, [sp, #4]
   16ebc:	add	fp, sp, #4
   16ec0:	sub	sp, sp, #16
   16ec4:	str	r0, [fp, #-8]
   16ec8:	str	r1, [fp, #-12]
   16ecc:	str	r2, [fp, #-16]
   16ed0:	ldr	r3, [fp, #-8]
   16ed4:	cmp	r3, #0
   16ed8:	bne	16ee8 <__assert_fail@plt+0x5f9c>
   16edc:	movw	r3, #53632	; 0xd180
   16ee0:	movt	r3, #2
   16ee4:	str	r3, [fp, #-8]
   16ee8:	ldr	r3, [fp, #-8]
   16eec:	mov	r2, #10
   16ef0:	str	r2, [r3]
   16ef4:	ldr	r3, [fp, #-12]
   16ef8:	cmp	r3, #0
   16efc:	beq	16f0c <__assert_fail@plt+0x5fc0>
   16f00:	ldr	r3, [fp, #-16]
   16f04:	cmp	r3, #0
   16f08:	bne	16f10 <__assert_fail@plt+0x5fc4>
   16f0c:	bl	10f34 <abort@plt>
   16f10:	ldr	r3, [fp, #-8]
   16f14:	ldr	r2, [fp, #-12]
   16f18:	str	r2, [r3, #40]	; 0x28
   16f1c:	ldr	r3, [fp, #-8]
   16f20:	ldr	r2, [fp, #-16]
   16f24:	str	r2, [r3, #44]	; 0x2c
   16f28:	nop	{0}
   16f2c:	sub	sp, fp, #4
   16f30:	ldr	fp, [sp]
   16f34:	add	sp, sp, #4
   16f38:	pop	{pc}		; (ldr pc, [sp], #4)
   16f3c:	str	fp, [sp, #-8]!
   16f40:	str	lr, [sp, #4]
   16f44:	add	fp, sp, #4
   16f48:	sub	sp, sp, #56	; 0x38
   16f4c:	str	r0, [fp, #-56]	; 0xffffffc8
   16f50:	str	r1, [fp, #-60]	; 0xffffffc4
   16f54:	sub	r1, fp, #52	; 0x34
   16f58:	mov	r2, #0
   16f5c:	mov	r3, #0
   16f60:	strd	r2, [r1]
   16f64:	strd	r2, [r1, #8]
   16f68:	strd	r2, [r1, #16]
   16f6c:	strd	r2, [r1, #24]
   16f70:	strd	r2, [r1, #32]
   16f74:	strd	r2, [r1, #40]	; 0x28
   16f78:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16f7c:	cmp	r3, #10
   16f80:	bne	16f88 <__assert_fail@plt+0x603c>
   16f84:	bl	10f34 <abort@plt>
   16f88:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16f8c:	str	r3, [fp, #-52]	; 0xffffffcc
   16f90:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16f94:	mov	r2, r3
   16f98:	sub	r3, fp, #52	; 0x34
   16f9c:	ldrd	r0, [r3]
   16fa0:	strd	r0, [r2]
   16fa4:	ldrd	r0, [r3, #8]
   16fa8:	strd	r0, [r2, #8]
   16fac:	ldrd	r0, [r3, #16]
   16fb0:	strd	r0, [r2, #16]
   16fb4:	ldrd	r0, [r3, #24]
   16fb8:	strd	r0, [r2, #24]
   16fbc:	ldrd	r0, [r3, #32]
   16fc0:	strd	r0, [r2, #32]
   16fc4:	ldrd	r0, [r3, #40]	; 0x28
   16fc8:	strd	r0, [r2, #40]	; 0x28
   16fcc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16fd0:	sub	sp, fp, #4
   16fd4:	ldr	fp, [sp]
   16fd8:	add	sp, sp, #4
   16fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16fe0:	str	fp, [sp, #-8]!
   16fe4:	str	lr, [sp, #4]
   16fe8:	add	fp, sp, #4
   16fec:	sub	sp, sp, #16
   16ff0:	str	r0, [fp, #-16]
   16ff4:	str	r1, [fp, #-20]	; 0xffffffec
   16ff8:	ldr	r0, [fp, #-16]
   16ffc:	bl	10e50 <gettext@plt>
   17000:	str	r0, [fp, #-8]
   17004:	ldr	r2, [fp, #-8]
   17008:	ldr	r3, [fp, #-16]
   1700c:	cmp	r2, r3
   17010:	beq	1701c <__assert_fail@plt+0x60d0>
   17014:	ldr	r3, [fp, #-8]
   17018:	b	170cc <__assert_fail@plt+0x6180>
   1701c:	bl	1b390 <__assert_fail@plt+0xa444>
   17020:	str	r0, [fp, #-12]
   17024:	movw	r1, #51372	; 0xc8ac
   17028:	movt	r1, #1
   1702c:	ldr	r0, [fp, #-12]
   17030:	bl	1b200 <__assert_fail@plt+0xa2b4>
   17034:	mov	r3, r0
   17038:	cmp	r3, #0
   1703c:	bne	17068 <__assert_fail@plt+0x611c>
   17040:	ldr	r3, [fp, #-16]
   17044:	ldrb	r3, [r3]
   17048:	cmp	r3, #96	; 0x60
   1704c:	bne	1705c <__assert_fail@plt+0x6110>
   17050:	movw	r3, #51380	; 0xc8b4
   17054:	movt	r3, #1
   17058:	b	170cc <__assert_fail@plt+0x6180>
   1705c:	movw	r3, #51384	; 0xc8b8
   17060:	movt	r3, #1
   17064:	b	170cc <__assert_fail@plt+0x6180>
   17068:	movw	r1, #51388	; 0xc8bc
   1706c:	movt	r1, #1
   17070:	ldr	r0, [fp, #-12]
   17074:	bl	1b200 <__assert_fail@plt+0xa2b4>
   17078:	mov	r3, r0
   1707c:	cmp	r3, #0
   17080:	bne	170ac <__assert_fail@plt+0x6160>
   17084:	ldr	r3, [fp, #-16]
   17088:	ldrb	r3, [r3]
   1708c:	cmp	r3, #96	; 0x60
   17090:	bne	170a0 <__assert_fail@plt+0x6154>
   17094:	movw	r3, #51396	; 0xc8c4
   17098:	movt	r3, #1
   1709c:	b	170cc <__assert_fail@plt+0x6180>
   170a0:	movw	r3, #51400	; 0xc8c8
   170a4:	movt	r3, #1
   170a8:	b	170cc <__assert_fail@plt+0x6180>
   170ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   170b0:	cmp	r3, #9
   170b4:	bne	170c4 <__assert_fail@plt+0x6178>
   170b8:	movw	r3, #51404	; 0xc8cc
   170bc:	movt	r3, #1
   170c0:	b	170cc <__assert_fail@plt+0x6180>
   170c4:	movw	r3, #51408	; 0xc8d0
   170c8:	movt	r3, #1
   170cc:	mov	r0, r3
   170d0:	sub	sp, fp, #4
   170d4:	ldr	fp, [sp]
   170d8:	add	sp, sp, #4
   170dc:	pop	{pc}		; (ldr pc, [sp], #4)
   170e0:	str	r4, [sp, #-12]!
   170e4:	str	fp, [sp, #4]
   170e8:	str	lr, [sp, #8]
   170ec:	add	fp, sp, #8
   170f0:	sub	sp, sp, #116	; 0x74
   170f4:	str	r0, [fp, #-88]	; 0xffffffa8
   170f8:	str	r1, [fp, #-92]	; 0xffffffa4
   170fc:	str	r2, [fp, #-96]	; 0xffffffa0
   17100:	str	r3, [fp, #-100]	; 0xffffff9c
   17104:	mov	r3, #0
   17108:	str	r3, [fp, #-20]	; 0xffffffec
   1710c:	mov	r3, #0
   17110:	str	r3, [fp, #-24]	; 0xffffffe8
   17114:	mov	r3, #0
   17118:	str	r3, [fp, #-28]	; 0xffffffe4
   1711c:	mov	r3, #0
   17120:	str	r3, [fp, #-32]	; 0xffffffe0
   17124:	mov	r3, #0
   17128:	strb	r3, [fp, #-33]	; 0xffffffdf
   1712c:	bl	10dc0 <__ctype_get_mb_cur_max@plt>
   17130:	mov	r3, r0
   17134:	cmp	r3, #1
   17138:	moveq	r3, #1
   1713c:	movne	r3, #0
   17140:	strb	r3, [fp, #-57]	; 0xffffffc7
   17144:	ldr	r3, [fp, #8]
   17148:	and	r3, r3, #2
   1714c:	cmp	r3, #0
   17150:	movne	r3, #1
   17154:	moveq	r3, #0
   17158:	strb	r3, [fp, #-34]	; 0xffffffde
   1715c:	mov	r3, #0
   17160:	strb	r3, [fp, #-35]	; 0xffffffdd
   17164:	mov	r3, #0
   17168:	strb	r3, [fp, #-36]	; 0xffffffdc
   1716c:	mov	r3, #1
   17170:	strb	r3, [fp, #-37]	; 0xffffffdb
   17174:	ldr	r3, [fp, #4]
   17178:	cmp	r3, #10
   1717c:	ldrls	pc, [pc, r3, lsl #2]
   17180:	b	17398 <__assert_fail@plt+0x644c>
   17184:	andeq	r7, r1, ip, lsl #7
   17188:	andeq	r7, r1, r4, lsl #6
   1718c:	andeq	r7, r1, r8, lsr #6
   17190:	strdeq	r7, [r1], -ip
   17194:	andeq	r7, r1, ip, lsl #6
   17198:	andeq	r7, r1, r0, asr #3
   1719c:			; <UNDEFINED> instruction: 0x000171b0
   171a0:	andeq	r7, r1, r4, lsr #4
   171a4:	andeq	r7, r1, r8, lsr r2
   171a8:	andeq	r7, r1, r8, lsr r2
   171ac:	andeq	r7, r1, r8, lsr r2
   171b0:	mov	r3, #5
   171b4:	str	r3, [fp, #4]
   171b8:	mov	r3, #1
   171bc:	strb	r3, [fp, #-34]	; 0xffffffde
   171c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   171c4:	eor	r3, r3, #1
   171c8:	uxtb	r3, r3
   171cc:	cmp	r3, #0
   171d0:	beq	17204 <__assert_fail@plt+0x62b8>
   171d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   171d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   171dc:	cmp	r2, r3
   171e0:	bcs	171f8 <__assert_fail@plt+0x62ac>
   171e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   171e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   171ec:	add	r3, r2, r3
   171f0:	mov	r2, #34	; 0x22
   171f4:	strb	r2, [r3]
   171f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   171fc:	add	r3, r3, #1
   17200:	str	r3, [fp, #-20]	; 0xffffffec
   17204:	mov	r3, #1
   17208:	strb	r3, [fp, #-33]	; 0xffffffdf
   1720c:	movw	r3, #51404	; 0xc8cc
   17210:	movt	r3, #1
   17214:	str	r3, [fp, #-28]	; 0xffffffe4
   17218:	mov	r3, #1
   1721c:	str	r3, [fp, #-32]	; 0xffffffe0
   17220:	b	1739c <__assert_fail@plt+0x6450>
   17224:	mov	r3, #1
   17228:	strb	r3, [fp, #-33]	; 0xffffffdf
   1722c:	mov	r3, #0
   17230:	strb	r3, [fp, #-34]	; 0xffffffde
   17234:	b	1739c <__assert_fail@plt+0x6450>
   17238:	ldr	r3, [fp, #4]
   1723c:	cmp	r3, #10
   17240:	beq	1726c <__assert_fail@plt+0x6320>
   17244:	ldr	r1, [fp, #4]
   17248:	movw	r0, #51412	; 0xc8d4
   1724c:	movt	r0, #1
   17250:	bl	16fe0 <__assert_fail@plt+0x6094>
   17254:	str	r0, [fp, #16]
   17258:	ldr	r1, [fp, #4]
   1725c:	movw	r0, #51408	; 0xc8d0
   17260:	movt	r0, #1
   17264:	bl	16fe0 <__assert_fail@plt+0x6094>
   17268:	str	r0, [fp, #20]
   1726c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17270:	eor	r3, r3, #1
   17274:	uxtb	r3, r3
   17278:	cmp	r3, #0
   1727c:	beq	172dc <__assert_fail@plt+0x6390>
   17280:	ldr	r3, [fp, #16]
   17284:	str	r3, [fp, #-28]	; 0xffffffe4
   17288:	b	172cc <__assert_fail@plt+0x6380>
   1728c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17290:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17294:	cmp	r2, r3
   17298:	bcs	172b4 <__assert_fail@plt+0x6368>
   1729c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   172a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   172a4:	add	r3, r2, r3
   172a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   172ac:	ldrb	r2, [r2]
   172b0:	strb	r2, [r3]
   172b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   172b8:	add	r3, r3, #1
   172bc:	str	r3, [fp, #-20]	; 0xffffffec
   172c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   172c4:	add	r3, r3, #1
   172c8:	str	r3, [fp, #-28]	; 0xffffffe4
   172cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   172d0:	ldrb	r3, [r3]
   172d4:	cmp	r3, #0
   172d8:	bne	1728c <__assert_fail@plt+0x6340>
   172dc:	mov	r3, #1
   172e0:	strb	r3, [fp, #-33]	; 0xffffffdf
   172e4:	ldr	r3, [fp, #20]
   172e8:	str	r3, [fp, #-28]	; 0xffffffe4
   172ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   172f0:	bl	10e5c <strlen@plt>
   172f4:	str	r0, [fp, #-32]	; 0xffffffe0
   172f8:	b	1739c <__assert_fail@plt+0x6450>
   172fc:	mov	r3, #1
   17300:	strb	r3, [fp, #-33]	; 0xffffffdf
   17304:	mov	r3, #1
   17308:	strb	r3, [fp, #-34]	; 0xffffffde
   1730c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17310:	eor	r3, r3, #1
   17314:	uxtb	r3, r3
   17318:	cmp	r3, #0
   1731c:	beq	17328 <__assert_fail@plt+0x63dc>
   17320:	mov	r3, #1
   17324:	strb	r3, [fp, #-33]	; 0xffffffdf
   17328:	mov	r3, #2
   1732c:	str	r3, [fp, #4]
   17330:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17334:	eor	r3, r3, #1
   17338:	uxtb	r3, r3
   1733c:	cmp	r3, #0
   17340:	beq	17374 <__assert_fail@plt+0x6428>
   17344:	ldr	r2, [fp, #-20]	; 0xffffffec
   17348:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1734c:	cmp	r2, r3
   17350:	bcs	17368 <__assert_fail@plt+0x641c>
   17354:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17358:	ldr	r3, [fp, #-20]	; 0xffffffec
   1735c:	add	r3, r2, r3
   17360:	mov	r2, #39	; 0x27
   17364:	strb	r2, [r3]
   17368:	ldr	r3, [fp, #-20]	; 0xffffffec
   1736c:	add	r3, r3, #1
   17370:	str	r3, [fp, #-20]	; 0xffffffec
   17374:	movw	r3, #51408	; 0xc8d0
   17378:	movt	r3, #1
   1737c:	str	r3, [fp, #-28]	; 0xffffffe4
   17380:	mov	r3, #1
   17384:	str	r3, [fp, #-32]	; 0xffffffe0
   17388:	b	1739c <__assert_fail@plt+0x6450>
   1738c:	mov	r3, #0
   17390:	strb	r3, [fp, #-34]	; 0xffffffde
   17394:	b	1739c <__assert_fail@plt+0x6450>
   17398:	bl	10f34 <abort@plt>
   1739c:	mov	r3, #0
   173a0:	str	r3, [fp, #-16]
   173a4:	b	18540 <__assert_fail@plt+0x75f4>
   173a8:	mov	r3, #0
   173ac:	strb	r3, [fp, #-40]	; 0xffffffd8
   173b0:	mov	r3, #0
   173b4:	strb	r3, [fp, #-41]	; 0xffffffd7
   173b8:	mov	r3, #0
   173bc:	strb	r3, [fp, #-42]	; 0xffffffd6
   173c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   173c4:	cmp	r3, #0
   173c8:	beq	17464 <__assert_fail@plt+0x6518>
   173cc:	ldr	r3, [fp, #4]
   173d0:	cmp	r3, #2
   173d4:	beq	17464 <__assert_fail@plt+0x6518>
   173d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173dc:	cmp	r3, #0
   173e0:	beq	17464 <__assert_fail@plt+0x6518>
   173e4:	ldr	r2, [fp, #-16]
   173e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173ec:	add	r4, r2, r3
   173f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   173f4:	cmn	r3, #1
   173f8:	bne	1741c <__assert_fail@plt+0x64d0>
   173fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17400:	cmp	r3, #1
   17404:	bls	1741c <__assert_fail@plt+0x64d0>
   17408:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1740c:	bl	10e5c <strlen@plt>
   17410:	str	r0, [fp, #-100]	; 0xffffff9c
   17414:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17418:	b	17420 <__assert_fail@plt+0x64d4>
   1741c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17420:	cmp	r3, r4
   17424:	bcc	17464 <__assert_fail@plt+0x6518>
   17428:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1742c:	ldr	r3, [fp, #-16]
   17430:	add	r3, r2, r3
   17434:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17438:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1743c:	mov	r0, r3
   17440:	bl	10d6c <memcmp@plt>
   17444:	mov	r3, r0
   17448:	cmp	r3, #0
   1744c:	bne	17464 <__assert_fail@plt+0x6518>
   17450:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17454:	cmp	r3, #0
   17458:	bne	186fc <__assert_fail@plt+0x77b0>
   1745c:	mov	r3, #1
   17460:	strb	r3, [fp, #-40]	; 0xffffffd8
   17464:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17468:	ldr	r3, [fp, #-16]
   1746c:	add	r3, r2, r3
   17470:	ldrb	r3, [r3]
   17474:	strb	r3, [fp, #-38]	; 0xffffffda
   17478:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1747c:	cmp	r3, #126	; 0x7e
   17480:	ldrls	pc, [pc, r3, lsl #2]
   17484:	b	17cbc <__assert_fail@plt+0x6d70>
   17488:	andeq	r7, r1, r4, lsl #13
   1748c:			; <UNDEFINED> instruction: 0x00017cbc
   17490:			; <UNDEFINED> instruction: 0x00017cbc
   17494:			; <UNDEFINED> instruction: 0x00017cbc
   17498:			; <UNDEFINED> instruction: 0x00017cbc
   1749c:			; <UNDEFINED> instruction: 0x00017cbc
   174a0:			; <UNDEFINED> instruction: 0x00017cbc
   174a4:	andeq	r7, r1, r8, ror sl
   174a8:	andeq	r7, r1, r4, lsl #21
   174ac:			; <UNDEFINED> instruction: 0x00017ab4
   174b0:	muleq	r1, ip, sl
   174b4:	andeq	r7, r1, r0, asr #21
   174b8:	muleq	r1, r0, sl
   174bc:	andeq	r7, r1, r8, lsr #21
   174c0:			; <UNDEFINED> instruction: 0x00017cbc
   174c4:			; <UNDEFINED> instruction: 0x00017cbc
   174c8:			; <UNDEFINED> instruction: 0x00017cbc
   174cc:			; <UNDEFINED> instruction: 0x00017cbc
   174d0:			; <UNDEFINED> instruction: 0x00017cbc
   174d4:			; <UNDEFINED> instruction: 0x00017cbc
   174d8:			; <UNDEFINED> instruction: 0x00017cbc
   174dc:			; <UNDEFINED> instruction: 0x00017cbc
   174e0:			; <UNDEFINED> instruction: 0x00017cbc
   174e4:			; <UNDEFINED> instruction: 0x00017cbc
   174e8:			; <UNDEFINED> instruction: 0x00017cbc
   174ec:			; <UNDEFINED> instruction: 0x00017cbc
   174f0:			; <UNDEFINED> instruction: 0x00017cbc
   174f4:			; <UNDEFINED> instruction: 0x00017cbc
   174f8:			; <UNDEFINED> instruction: 0x00017cbc
   174fc:			; <UNDEFINED> instruction: 0x00017cbc
   17500:			; <UNDEFINED> instruction: 0x00017cbc
   17504:			; <UNDEFINED> instruction: 0x00017cbc
   17508:	andeq	r7, r1, r0, lsr #23
   1750c:	andeq	r7, r1, r8, lsr #23
   17510:	andeq	r7, r1, r8, lsr #23
   17514:	muleq	r1, r4, fp
   17518:	andeq	r7, r1, r8, lsr #23
   1751c:			; <UNDEFINED> instruction: 0x00017cb0
   17520:	andeq	r7, r1, r8, lsr #23
   17524:	andeq	r7, r1, r4, asr #23
   17528:	andeq	r7, r1, r8, lsr #23
   1752c:	andeq	r7, r1, r8, lsr #23
   17530:	andeq	r7, r1, r8, lsr #23
   17534:			; <UNDEFINED> instruction: 0x00017cb0
   17538:			; <UNDEFINED> instruction: 0x00017cb0
   1753c:			; <UNDEFINED> instruction: 0x00017cb0
   17540:			; <UNDEFINED> instruction: 0x00017cb0
   17544:			; <UNDEFINED> instruction: 0x00017cb0
   17548:			; <UNDEFINED> instruction: 0x00017cb0
   1754c:			; <UNDEFINED> instruction: 0x00017cb0
   17550:			; <UNDEFINED> instruction: 0x00017cb0
   17554:			; <UNDEFINED> instruction: 0x00017cb0
   17558:			; <UNDEFINED> instruction: 0x00017cb0
   1755c:			; <UNDEFINED> instruction: 0x00017cb0
   17560:			; <UNDEFINED> instruction: 0x00017cb0
   17564:			; <UNDEFINED> instruction: 0x00017cb0
   17568:			; <UNDEFINED> instruction: 0x00017cb0
   1756c:			; <UNDEFINED> instruction: 0x00017cb0
   17570:			; <UNDEFINED> instruction: 0x00017cb0
   17574:	andeq	r7, r1, r8, lsr #23
   17578:	andeq	r7, r1, r8, lsr #23
   1757c:	andeq	r7, r1, r8, lsr #23
   17580:	andeq	r7, r1, r8, lsr #23
   17584:	andeq	r7, r1, r4, ror #16
   17588:			; <UNDEFINED> instruction: 0x00017cbc
   1758c:			; <UNDEFINED> instruction: 0x00017cb0
   17590:			; <UNDEFINED> instruction: 0x00017cb0
   17594:			; <UNDEFINED> instruction: 0x00017cb0
   17598:			; <UNDEFINED> instruction: 0x00017cb0
   1759c:			; <UNDEFINED> instruction: 0x00017cb0
   175a0:			; <UNDEFINED> instruction: 0x00017cb0
   175a4:			; <UNDEFINED> instruction: 0x00017cb0
   175a8:			; <UNDEFINED> instruction: 0x00017cb0
   175ac:			; <UNDEFINED> instruction: 0x00017cb0
   175b0:			; <UNDEFINED> instruction: 0x00017cb0
   175b4:			; <UNDEFINED> instruction: 0x00017cb0
   175b8:			; <UNDEFINED> instruction: 0x00017cb0
   175bc:			; <UNDEFINED> instruction: 0x00017cb0
   175c0:			; <UNDEFINED> instruction: 0x00017cb0
   175c4:			; <UNDEFINED> instruction: 0x00017cb0
   175c8:			; <UNDEFINED> instruction: 0x00017cb0
   175cc:			; <UNDEFINED> instruction: 0x00017cb0
   175d0:			; <UNDEFINED> instruction: 0x00017cb0
   175d4:			; <UNDEFINED> instruction: 0x00017cb0
   175d8:			; <UNDEFINED> instruction: 0x00017cb0
   175dc:			; <UNDEFINED> instruction: 0x00017cb0
   175e0:			; <UNDEFINED> instruction: 0x00017cb0
   175e4:			; <UNDEFINED> instruction: 0x00017cb0
   175e8:			; <UNDEFINED> instruction: 0x00017cb0
   175ec:			; <UNDEFINED> instruction: 0x00017cb0
   175f0:			; <UNDEFINED> instruction: 0x00017cb0
   175f4:	andeq	r7, r1, r8, lsr #23
   175f8:	andeq	r7, r1, ip, asr #21
   175fc:			; <UNDEFINED> instruction: 0x00017cb0
   17600:	andeq	r7, r1, r8, lsr #23
   17604:			; <UNDEFINED> instruction: 0x00017cb0
   17608:	andeq	r7, r1, r8, lsr #23
   1760c:			; <UNDEFINED> instruction: 0x00017cb0
   17610:			; <UNDEFINED> instruction: 0x00017cb0
   17614:			; <UNDEFINED> instruction: 0x00017cb0
   17618:			; <UNDEFINED> instruction: 0x00017cb0
   1761c:			; <UNDEFINED> instruction: 0x00017cb0
   17620:			; <UNDEFINED> instruction: 0x00017cb0
   17624:			; <UNDEFINED> instruction: 0x00017cb0
   17628:			; <UNDEFINED> instruction: 0x00017cb0
   1762c:			; <UNDEFINED> instruction: 0x00017cb0
   17630:			; <UNDEFINED> instruction: 0x00017cb0
   17634:			; <UNDEFINED> instruction: 0x00017cb0
   17638:			; <UNDEFINED> instruction: 0x00017cb0
   1763c:			; <UNDEFINED> instruction: 0x00017cb0
   17640:			; <UNDEFINED> instruction: 0x00017cb0
   17644:			; <UNDEFINED> instruction: 0x00017cb0
   17648:			; <UNDEFINED> instruction: 0x00017cb0
   1764c:			; <UNDEFINED> instruction: 0x00017cb0
   17650:			; <UNDEFINED> instruction: 0x00017cb0
   17654:			; <UNDEFINED> instruction: 0x00017cb0
   17658:			; <UNDEFINED> instruction: 0x00017cb0
   1765c:			; <UNDEFINED> instruction: 0x00017cb0
   17660:			; <UNDEFINED> instruction: 0x00017cb0
   17664:			; <UNDEFINED> instruction: 0x00017cb0
   17668:			; <UNDEFINED> instruction: 0x00017cb0
   1766c:			; <UNDEFINED> instruction: 0x00017cb0
   17670:			; <UNDEFINED> instruction: 0x00017cb0
   17674:	andeq	r7, r1, ip, asr #22
   17678:	andeq	r7, r1, r8, lsr #23
   1767c:	andeq	r7, r1, ip, asr #22
   17680:	muleq	r1, r4, fp
   17684:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17688:	cmp	r3, #0
   1768c:	beq	17850 <__assert_fail@plt+0x6904>
   17690:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17694:	cmp	r3, #0
   17698:	bne	18704 <__assert_fail@plt+0x77b8>
   1769c:	mov	r3, #1
   176a0:	strb	r3, [fp, #-41]	; 0xffffffd7
   176a4:	ldr	r3, [fp, #4]
   176a8:	cmp	r3, #2
   176ac:	bne	1775c <__assert_fail@plt+0x6810>
   176b0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   176b4:	eor	r3, r3, #1
   176b8:	uxtb	r3, r3
   176bc:	cmp	r3, #0
   176c0:	beq	1775c <__assert_fail@plt+0x6810>
   176c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   176c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   176cc:	cmp	r2, r3
   176d0:	bcs	176e8 <__assert_fail@plt+0x679c>
   176d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   176d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   176dc:	add	r3, r2, r3
   176e0:	mov	r2, #39	; 0x27
   176e4:	strb	r2, [r3]
   176e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   176ec:	add	r3, r3, #1
   176f0:	str	r3, [fp, #-20]	; 0xffffffec
   176f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   176f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   176fc:	cmp	r2, r3
   17700:	bcs	17718 <__assert_fail@plt+0x67cc>
   17704:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17708:	ldr	r3, [fp, #-20]	; 0xffffffec
   1770c:	add	r3, r2, r3
   17710:	mov	r2, #36	; 0x24
   17714:	strb	r2, [r3]
   17718:	ldr	r3, [fp, #-20]	; 0xffffffec
   1771c:	add	r3, r3, #1
   17720:	str	r3, [fp, #-20]	; 0xffffffec
   17724:	ldr	r2, [fp, #-20]	; 0xffffffec
   17728:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1772c:	cmp	r2, r3
   17730:	bcs	17748 <__assert_fail@plt+0x67fc>
   17734:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1773c:	add	r3, r2, r3
   17740:	mov	r2, #39	; 0x27
   17744:	strb	r2, [r3]
   17748:	ldr	r3, [fp, #-20]	; 0xffffffec
   1774c:	add	r3, r3, #1
   17750:	str	r3, [fp, #-20]	; 0xffffffec
   17754:	mov	r3, #1
   17758:	strb	r3, [fp, #-35]	; 0xffffffdd
   1775c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17760:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17764:	cmp	r2, r3
   17768:	bcs	17780 <__assert_fail@plt+0x6834>
   1776c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17770:	ldr	r3, [fp, #-20]	; 0xffffffec
   17774:	add	r3, r2, r3
   17778:	mov	r2, #92	; 0x5c
   1777c:	strb	r2, [r3]
   17780:	ldr	r3, [fp, #-20]	; 0xffffffec
   17784:	add	r3, r3, #1
   17788:	str	r3, [fp, #-20]	; 0xffffffec
   1778c:	ldr	r3, [fp, #4]
   17790:	cmp	r3, #2
   17794:	beq	17844 <__assert_fail@plt+0x68f8>
   17798:	ldr	r3, [fp, #-16]
   1779c:	add	r3, r3, #1
   177a0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   177a4:	cmp	r2, r3
   177a8:	bls	17844 <__assert_fail@plt+0x68f8>
   177ac:	ldr	r3, [fp, #-16]
   177b0:	add	r3, r3, #1
   177b4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   177b8:	add	r3, r2, r3
   177bc:	ldrb	r3, [r3]
   177c0:	cmp	r3, #47	; 0x2f
   177c4:	bls	17844 <__assert_fail@plt+0x68f8>
   177c8:	ldr	r3, [fp, #-16]
   177cc:	add	r3, r3, #1
   177d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   177d4:	add	r3, r2, r3
   177d8:	ldrb	r3, [r3]
   177dc:	cmp	r3, #57	; 0x39
   177e0:	bhi	17844 <__assert_fail@plt+0x68f8>
   177e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   177e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   177ec:	cmp	r2, r3
   177f0:	bcs	17808 <__assert_fail@plt+0x68bc>
   177f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   177f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   177fc:	add	r3, r2, r3
   17800:	mov	r2, #48	; 0x30
   17804:	strb	r2, [r3]
   17808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1780c:	add	r3, r3, #1
   17810:	str	r3, [fp, #-20]	; 0xffffffec
   17814:	ldr	r2, [fp, #-20]	; 0xffffffec
   17818:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1781c:	cmp	r2, r3
   17820:	bcs	17838 <__assert_fail@plt+0x68ec>
   17824:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1782c:	add	r3, r2, r3
   17830:	mov	r2, #48	; 0x30
   17834:	strb	r2, [r3]
   17838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1783c:	add	r3, r3, #1
   17840:	str	r3, [fp, #-20]	; 0xffffffec
   17844:	mov	r3, #48	; 0x30
   17848:	strb	r3, [fp, #-38]	; 0xffffffda
   1784c:	b	1828c <__assert_fail@plt+0x7340>
   17850:	ldr	r3, [fp, #8]
   17854:	and	r3, r3, #1
   17858:	cmp	r3, #0
   1785c:	beq	1828c <__assert_fail@plt+0x7340>
   17860:	b	18534 <__assert_fail@plt+0x75e8>
   17864:	ldr	r3, [fp, #4]
   17868:	cmp	r3, #2
   1786c:	beq	17880 <__assert_fail@plt+0x6934>
   17870:	ldr	r3, [fp, #4]
   17874:	cmp	r3, #5
   17878:	beq	17890 <__assert_fail@plt+0x6944>
   1787c:	b	17a74 <__assert_fail@plt+0x6b28>
   17880:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17884:	cmp	r3, #0
   17888:	beq	17a68 <__assert_fail@plt+0x6b1c>
   1788c:	b	18738 <__assert_fail@plt+0x77ec>
   17890:	ldr	r3, [fp, #8]
   17894:	and	r3, r3, #4
   17898:	cmp	r3, #0
   1789c:	beq	17a70 <__assert_fail@plt+0x6b24>
   178a0:	ldr	r3, [fp, #-16]
   178a4:	add	r3, r3, #2
   178a8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   178ac:	cmp	r2, r3
   178b0:	bls	17a70 <__assert_fail@plt+0x6b24>
   178b4:	ldr	r3, [fp, #-16]
   178b8:	add	r3, r3, #1
   178bc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   178c0:	add	r3, r2, r3
   178c4:	ldrb	r3, [r3]
   178c8:	cmp	r3, #63	; 0x3f
   178cc:	bne	17a70 <__assert_fail@plt+0x6b24>
   178d0:	ldr	r3, [fp, #-16]
   178d4:	add	r3, r3, #2
   178d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   178dc:	add	r3, r2, r3
   178e0:	ldrb	r3, [r3]
   178e4:	sub	r3, r3, #33	; 0x21
   178e8:	cmp	r3, #29
   178ec:	ldrls	pc, [pc, r3, lsl #2]
   178f0:	b	17a60 <__assert_fail@plt+0x6b14>
   178f4:	andeq	r7, r1, ip, ror #18
   178f8:	andeq	r7, r1, r0, ror #20
   178fc:	andeq	r7, r1, r0, ror #20
   17900:	andeq	r7, r1, r0, ror #20
   17904:	andeq	r7, r1, r0, ror #20
   17908:	andeq	r7, r1, r0, ror #20
   1790c:	andeq	r7, r1, ip, ror #18
   17910:	andeq	r7, r1, ip, ror #18
   17914:	andeq	r7, r1, ip, ror #18
   17918:	andeq	r7, r1, r0, ror #20
   1791c:	andeq	r7, r1, r0, ror #20
   17920:	andeq	r7, r1, r0, ror #20
   17924:	andeq	r7, r1, ip, ror #18
   17928:	andeq	r7, r1, r0, ror #20
   1792c:	andeq	r7, r1, ip, ror #18
   17930:	andeq	r7, r1, r0, ror #20
   17934:	andeq	r7, r1, r0, ror #20
   17938:	andeq	r7, r1, r0, ror #20
   1793c:	andeq	r7, r1, r0, ror #20
   17940:	andeq	r7, r1, r0, ror #20
   17944:	andeq	r7, r1, r0, ror #20
   17948:	andeq	r7, r1, r0, ror #20
   1794c:	andeq	r7, r1, r0, ror #20
   17950:	andeq	r7, r1, r0, ror #20
   17954:	andeq	r7, r1, r0, ror #20
   17958:	andeq	r7, r1, r0, ror #20
   1795c:	andeq	r7, r1, r0, ror #20
   17960:	andeq	r7, r1, ip, ror #18
   17964:	andeq	r7, r1, ip, ror #18
   17968:	andeq	r7, r1, ip, ror #18
   1796c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17970:	cmp	r3, #0
   17974:	bne	1870c <__assert_fail@plt+0x77c0>
   17978:	ldr	r3, [fp, #-16]
   1797c:	add	r3, r3, #2
   17980:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17984:	add	r3, r2, r3
   17988:	ldrb	r3, [r3]
   1798c:	strb	r3, [fp, #-38]	; 0xffffffda
   17990:	ldr	r3, [fp, #-16]
   17994:	add	r3, r3, #2
   17998:	str	r3, [fp, #-16]
   1799c:	ldr	r2, [fp, #-20]	; 0xffffffec
   179a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   179a4:	cmp	r2, r3
   179a8:	bcs	179c0 <__assert_fail@plt+0x6a74>
   179ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   179b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   179b4:	add	r3, r2, r3
   179b8:	mov	r2, #63	; 0x3f
   179bc:	strb	r2, [r3]
   179c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   179c4:	add	r3, r3, #1
   179c8:	str	r3, [fp, #-20]	; 0xffffffec
   179cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   179d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   179d4:	cmp	r2, r3
   179d8:	bcs	179f0 <__assert_fail@plt+0x6aa4>
   179dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   179e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   179e4:	add	r3, r2, r3
   179e8:	mov	r2, #34	; 0x22
   179ec:	strb	r2, [r3]
   179f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   179f4:	add	r3, r3, #1
   179f8:	str	r3, [fp, #-20]	; 0xffffffec
   179fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   17a00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a04:	cmp	r2, r3
   17a08:	bcs	17a20 <__assert_fail@plt+0x6ad4>
   17a0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17a10:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a14:	add	r3, r2, r3
   17a18:	mov	r2, #34	; 0x22
   17a1c:	strb	r2, [r3]
   17a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a24:	add	r3, r3, #1
   17a28:	str	r3, [fp, #-20]	; 0xffffffec
   17a2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17a30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a34:	cmp	r2, r3
   17a38:	bcs	17a50 <__assert_fail@plt+0x6b04>
   17a3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17a40:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a44:	add	r3, r2, r3
   17a48:	mov	r2, #63	; 0x3f
   17a4c:	strb	r2, [r3]
   17a50:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a54:	add	r3, r3, #1
   17a58:	str	r3, [fp, #-20]	; 0xffffffec
   17a5c:	b	17a64 <__assert_fail@plt+0x6b18>
   17a60:	nop	{0}
   17a64:	b	17a70 <__assert_fail@plt+0x6b24>
   17a68:	nop	{0}
   17a6c:	b	182c0 <__assert_fail@plt+0x7374>
   17a70:	nop	{0}
   17a74:	b	182c0 <__assert_fail@plt+0x7374>
   17a78:	mov	r3, #97	; 0x61
   17a7c:	strb	r3, [fp, #-39]	; 0xffffffd9
   17a80:	b	17b34 <__assert_fail@plt+0x6be8>
   17a84:	mov	r3, #98	; 0x62
   17a88:	strb	r3, [fp, #-39]	; 0xffffffd9
   17a8c:	b	17b34 <__assert_fail@plt+0x6be8>
   17a90:	mov	r3, #102	; 0x66
   17a94:	strb	r3, [fp, #-39]	; 0xffffffd9
   17a98:	b	17b34 <__assert_fail@plt+0x6be8>
   17a9c:	mov	r3, #110	; 0x6e
   17aa0:	strb	r3, [fp, #-39]	; 0xffffffd9
   17aa4:	b	17b18 <__assert_fail@plt+0x6bcc>
   17aa8:	mov	r3, #114	; 0x72
   17aac:	strb	r3, [fp, #-39]	; 0xffffffd9
   17ab0:	b	17b18 <__assert_fail@plt+0x6bcc>
   17ab4:	mov	r3, #116	; 0x74
   17ab8:	strb	r3, [fp, #-39]	; 0xffffffd9
   17abc:	b	17b18 <__assert_fail@plt+0x6bcc>
   17ac0:	mov	r3, #118	; 0x76
   17ac4:	strb	r3, [fp, #-39]	; 0xffffffd9
   17ac8:	b	17b34 <__assert_fail@plt+0x6be8>
   17acc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17ad0:	strb	r3, [fp, #-39]	; 0xffffffd9
   17ad4:	ldr	r3, [fp, #4]
   17ad8:	cmp	r3, #2
   17adc:	bne	17af0 <__assert_fail@plt+0x6ba4>
   17ae0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17ae4:	cmp	r3, #0
   17ae8:	beq	1844c <__assert_fail@plt+0x7500>
   17aec:	b	18738 <__assert_fail@plt+0x77ec>
   17af0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17af4:	cmp	r3, #0
   17af8:	beq	17b14 <__assert_fail@plt+0x6bc8>
   17afc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17b00:	cmp	r3, #0
   17b04:	beq	17b14 <__assert_fail@plt+0x6bc8>
   17b08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b0c:	cmp	r3, #0
   17b10:	bne	18454 <__assert_fail@plt+0x7508>
   17b14:	nop	{0}
   17b18:	ldr	r3, [fp, #4]
   17b1c:	cmp	r3, #2
   17b20:	bne	17b30 <__assert_fail@plt+0x6be4>
   17b24:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17b28:	cmp	r3, #0
   17b2c:	bne	18714 <__assert_fail@plt+0x77c8>
   17b30:	nop	{0}
   17b34:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17b38:	cmp	r3, #0
   17b3c:	beq	18294 <__assert_fail@plt+0x7348>
   17b40:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   17b44:	strb	r3, [fp, #-38]	; 0xffffffda
   17b48:	b	1834c <__assert_fail@plt+0x7400>
   17b4c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17b50:	cmn	r3, #1
   17b54:	bne	17b78 <__assert_fail@plt+0x6c2c>
   17b58:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17b5c:	add	r3, r3, #1
   17b60:	ldrb	r3, [r3]
   17b64:	cmp	r3, #0
   17b68:	movne	r3, #1
   17b6c:	moveq	r3, #0
   17b70:	uxtb	r3, r3
   17b74:	b	17b8c <__assert_fail@plt+0x6c40>
   17b78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17b7c:	cmp	r3, #1
   17b80:	movne	r3, #1
   17b84:	moveq	r3, #0
   17b88:	uxtb	r3, r3
   17b8c:	cmp	r3, #0
   17b90:	bne	1829c <__assert_fail@plt+0x7350>
   17b94:	ldr	r3, [fp, #-16]
   17b98:	cmp	r3, #0
   17b9c:	bne	182a4 <__assert_fail@plt+0x7358>
   17ba0:	mov	r3, #1
   17ba4:	strb	r3, [fp, #-42]	; 0xffffffd6
   17ba8:	ldr	r3, [fp, #4]
   17bac:	cmp	r3, #2
   17bb0:	bne	182ac <__assert_fail@plt+0x7360>
   17bb4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17bb8:	cmp	r3, #0
   17bbc:	beq	182ac <__assert_fail@plt+0x7360>
   17bc0:	b	18738 <__assert_fail@plt+0x77ec>
   17bc4:	mov	r3, #1
   17bc8:	strb	r3, [fp, #-36]	; 0xffffffdc
   17bcc:	mov	r3, #1
   17bd0:	strb	r3, [fp, #-42]	; 0xffffffd6
   17bd4:	ldr	r3, [fp, #4]
   17bd8:	cmp	r3, #2
   17bdc:	bne	182b4 <__assert_fail@plt+0x7368>
   17be0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17be4:	cmp	r3, #0
   17be8:	bne	1871c <__assert_fail@plt+0x77d0>
   17bec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17bf0:	cmp	r3, #0
   17bf4:	beq	17c14 <__assert_fail@plt+0x6cc8>
   17bf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17bfc:	cmp	r3, #0
   17c00:	bne	17c14 <__assert_fail@plt+0x6cc8>
   17c04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c08:	str	r3, [fp, #-24]	; 0xffffffe8
   17c0c:	mov	r3, #0
   17c10:	str	r3, [fp, #-92]	; 0xffffffa4
   17c14:	ldr	r2, [fp, #-20]	; 0xffffffec
   17c18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c1c:	cmp	r2, r3
   17c20:	bcs	17c38 <__assert_fail@plt+0x6cec>
   17c24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17c28:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c2c:	add	r3, r2, r3
   17c30:	mov	r2, #39	; 0x27
   17c34:	strb	r2, [r3]
   17c38:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c3c:	add	r3, r3, #1
   17c40:	str	r3, [fp, #-20]	; 0xffffffec
   17c44:	ldr	r2, [fp, #-20]	; 0xffffffec
   17c48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c4c:	cmp	r2, r3
   17c50:	bcs	17c68 <__assert_fail@plt+0x6d1c>
   17c54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c5c:	add	r3, r2, r3
   17c60:	mov	r2, #92	; 0x5c
   17c64:	strb	r2, [r3]
   17c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c6c:	add	r3, r3, #1
   17c70:	str	r3, [fp, #-20]	; 0xffffffec
   17c74:	ldr	r2, [fp, #-20]	; 0xffffffec
   17c78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c7c:	cmp	r2, r3
   17c80:	bcs	17c98 <__assert_fail@plt+0x6d4c>
   17c84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c8c:	add	r3, r2, r3
   17c90:	mov	r2, #39	; 0x27
   17c94:	strb	r2, [r3]
   17c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c9c:	add	r3, r3, #1
   17ca0:	str	r3, [fp, #-20]	; 0xffffffec
   17ca4:	mov	r3, #0
   17ca8:	strb	r3, [fp, #-35]	; 0xffffffdd
   17cac:	b	182b4 <__assert_fail@plt+0x7368>
   17cb0:	mov	r3, #1
   17cb4:	strb	r3, [fp, #-42]	; 0xffffffd6
   17cb8:	b	182c0 <__assert_fail@plt+0x7374>
   17cbc:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   17cc0:	cmp	r3, #0
   17cc4:	beq	17d04 <__assert_fail@plt+0x6db8>
   17cc8:	mov	r3, #1
   17ccc:	str	r3, [fp, #-48]	; 0xffffffd0
   17cd0:	bl	10e38 <__ctype_b_loc@plt>
   17cd4:	mov	r3, r0
   17cd8:	ldr	r2, [r3]
   17cdc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17ce0:	lsl	r3, r3, #1
   17ce4:	add	r3, r2, r3
   17ce8:	ldrh	r3, [r3]
   17cec:	and	r3, r3, #16384	; 0x4000
   17cf0:	cmp	r3, #0
   17cf4:	movne	r3, #1
   17cf8:	moveq	r3, #0
   17cfc:	strb	r3, [fp, #-49]	; 0xffffffcf
   17d00:	b	17f50 <__assert_fail@plt+0x7004>
   17d04:	sub	r3, fp, #76	; 0x4c
   17d08:	mov	r2, #8
   17d0c:	mov	r1, #0
   17d10:	mov	r0, r3
   17d14:	bl	10e98 <memset@plt>
   17d18:	mov	r3, #0
   17d1c:	str	r3, [fp, #-48]	; 0xffffffd0
   17d20:	mov	r3, #1
   17d24:	strb	r3, [fp, #-49]	; 0xffffffcf
   17d28:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17d2c:	cmn	r3, #1
   17d30:	bne	17d40 <__assert_fail@plt+0x6df4>
   17d34:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17d38:	bl	10e5c <strlen@plt>
   17d3c:	str	r0, [fp, #-100]	; 0xffffff9c
   17d40:	ldr	r2, [fp, #-16]
   17d44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17d48:	add	r3, r2, r3
   17d4c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17d50:	add	r1, r2, r3
   17d54:	ldr	r2, [fp, #-16]
   17d58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17d5c:	add	r3, r2, r3
   17d60:	ldr	r2, [fp, #-100]	; 0xffffff9c
   17d64:	sub	r2, r2, r3
   17d68:	sub	r3, fp, #76	; 0x4c
   17d6c:	sub	r0, fp, #80	; 0x50
   17d70:	bl	1b3f8 <__assert_fail@plt+0xa4ac>
   17d74:	str	r0, [fp, #-64]	; 0xffffffc0
   17d78:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17d7c:	cmp	r3, #0
   17d80:	beq	17f44 <__assert_fail@plt+0x6ff8>
   17d84:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17d88:	cmn	r3, #1
   17d8c:	bne	17d9c <__assert_fail@plt+0x6e50>
   17d90:	mov	r3, #0
   17d94:	strb	r3, [fp, #-49]	; 0xffffffcf
   17d98:	b	17f50 <__assert_fail@plt+0x7004>
   17d9c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17da0:	cmn	r3, #2
   17da4:	bne	17dfc <__assert_fail@plt+0x6eb0>
   17da8:	mov	r3, #0
   17dac:	strb	r3, [fp, #-49]	; 0xffffffcf
   17db0:	b	17dc0 <__assert_fail@plt+0x6e74>
   17db4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17db8:	add	r3, r3, #1
   17dbc:	str	r3, [fp, #-48]	; 0xffffffd0
   17dc0:	ldr	r2, [fp, #-16]
   17dc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17dc8:	add	r3, r2, r3
   17dcc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   17dd0:	cmp	r2, r3
   17dd4:	bls	17f4c <__assert_fail@plt+0x7000>
   17dd8:	ldr	r2, [fp, #-16]
   17ddc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17de0:	add	r3, r2, r3
   17de4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17de8:	add	r3, r2, r3
   17dec:	ldrb	r3, [r3]
   17df0:	cmp	r3, #0
   17df4:	bne	17db4 <__assert_fail@plt+0x6e68>
   17df8:	b	17f4c <__assert_fail@plt+0x7000>
   17dfc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17e00:	cmp	r3, #0
   17e04:	beq	17ef8 <__assert_fail@plt+0x6fac>
   17e08:	ldr	r3, [fp, #4]
   17e0c:	cmp	r3, #2
   17e10:	bne	17ef8 <__assert_fail@plt+0x6fac>
   17e14:	mov	r3, #1
   17e18:	str	r3, [fp, #-56]	; 0xffffffc8
   17e1c:	b	17ee8 <__assert_fail@plt+0x6f9c>
   17e20:	ldr	r2, [fp, #-16]
   17e24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17e28:	add	r2, r2, r3
   17e2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17e30:	add	r3, r2, r3
   17e34:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17e38:	add	r3, r2, r3
   17e3c:	ldrb	r3, [r3]
   17e40:	sub	r3, r3, #91	; 0x5b
   17e44:	cmp	r3, #33	; 0x21
   17e48:	ldrls	pc, [pc, r3, lsl #2]
   17e4c:	b	17ed8 <__assert_fail@plt+0x6f8c>
   17e50:	andeq	r8, r1, r8, lsr r7
   17e54:	andeq	r8, r1, r8, lsr r7
   17e58:	ldrdeq	r7, [r1], -r8
   17e5c:	andeq	r8, r1, r8, lsr r7
   17e60:	ldrdeq	r7, [r1], -r8
   17e64:	andeq	r8, r1, r8, lsr r7
   17e68:	ldrdeq	r7, [r1], -r8
   17e6c:	ldrdeq	r7, [r1], -r8
   17e70:	ldrdeq	r7, [r1], -r8
   17e74:	ldrdeq	r7, [r1], -r8
   17e78:	ldrdeq	r7, [r1], -r8
   17e7c:	ldrdeq	r7, [r1], -r8
   17e80:	ldrdeq	r7, [r1], -r8
   17e84:	ldrdeq	r7, [r1], -r8
   17e88:	ldrdeq	r7, [r1], -r8
   17e8c:	ldrdeq	r7, [r1], -r8
   17e90:	ldrdeq	r7, [r1], -r8
   17e94:	ldrdeq	r7, [r1], -r8
   17e98:	ldrdeq	r7, [r1], -r8
   17e9c:	ldrdeq	r7, [r1], -r8
   17ea0:	ldrdeq	r7, [r1], -r8
   17ea4:	ldrdeq	r7, [r1], -r8
   17ea8:	ldrdeq	r7, [r1], -r8
   17eac:	ldrdeq	r7, [r1], -r8
   17eb0:	ldrdeq	r7, [r1], -r8
   17eb4:	ldrdeq	r7, [r1], -r8
   17eb8:	ldrdeq	r7, [r1], -r8
   17ebc:	ldrdeq	r7, [r1], -r8
   17ec0:	ldrdeq	r7, [r1], -r8
   17ec4:	ldrdeq	r7, [r1], -r8
   17ec8:	ldrdeq	r7, [r1], -r8
   17ecc:	ldrdeq	r7, [r1], -r8
   17ed0:	ldrdeq	r7, [r1], -r8
   17ed4:	andeq	r8, r1, r8, lsr r7
   17ed8:	nop	{0}
   17edc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ee0:	add	r3, r3, #1
   17ee4:	str	r3, [fp, #-56]	; 0xffffffc8
   17ee8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17eec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17ef0:	cmp	r2, r3
   17ef4:	bcc	17e20 <__assert_fail@plt+0x6ed4>
   17ef8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17efc:	mov	r0, r3
   17f00:	bl	10d9c <iswprint@plt>
   17f04:	mov	r3, r0
   17f08:	cmp	r3, #0
   17f0c:	bne	17f18 <__assert_fail@plt+0x6fcc>
   17f10:	mov	r3, #0
   17f14:	strb	r3, [fp, #-49]	; 0xffffffcf
   17f18:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17f1c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17f20:	add	r3, r2, r3
   17f24:	str	r3, [fp, #-48]	; 0xffffffd0
   17f28:	sub	r3, fp, #76	; 0x4c
   17f2c:	mov	r0, r3
   17f30:	bl	10d54 <mbsinit@plt>
   17f34:	mov	r3, r0
   17f38:	cmp	r3, #0
   17f3c:	beq	17d40 <__assert_fail@plt+0x6df4>
   17f40:	b	17f50 <__assert_fail@plt+0x7004>
   17f44:	nop	{0}
   17f48:	b	17f50 <__assert_fail@plt+0x7004>
   17f4c:	nop	{0}
   17f50:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   17f54:	strb	r3, [fp, #-42]	; 0xffffffd6
   17f58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17f5c:	cmp	r3, #1
   17f60:	bhi	17f84 <__assert_fail@plt+0x7038>
   17f64:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17f68:	cmp	r3, #0
   17f6c:	beq	182bc <__assert_fail@plt+0x7370>
   17f70:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   17f74:	eor	r3, r3, #1
   17f78:	uxtb	r3, r3
   17f7c:	cmp	r3, #0
   17f80:	beq	182bc <__assert_fail@plt+0x7370>
   17f84:	ldr	r2, [fp, #-16]
   17f88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17f8c:	add	r3, r2, r3
   17f90:	str	r3, [fp, #-68]	; 0xffffffbc
   17f94:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17f98:	cmp	r3, #0
   17f9c:	beq	18150 <__assert_fail@plt+0x7204>
   17fa0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   17fa4:	eor	r3, r3, #1
   17fa8:	uxtb	r3, r3
   17fac:	cmp	r3, #0
   17fb0:	beq	18150 <__assert_fail@plt+0x7204>
   17fb4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17fb8:	cmp	r3, #0
   17fbc:	bne	18724 <__assert_fail@plt+0x77d8>
   17fc0:	mov	r3, #1
   17fc4:	strb	r3, [fp, #-41]	; 0xffffffd7
   17fc8:	ldr	r3, [fp, #4]
   17fcc:	cmp	r3, #2
   17fd0:	bne	18080 <__assert_fail@plt+0x7134>
   17fd4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   17fd8:	eor	r3, r3, #1
   17fdc:	uxtb	r3, r3
   17fe0:	cmp	r3, #0
   17fe4:	beq	18080 <__assert_fail@plt+0x7134>
   17fe8:	ldr	r2, [fp, #-20]	; 0xffffffec
   17fec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ff0:	cmp	r2, r3
   17ff4:	bcs	1800c <__assert_fail@plt+0x70c0>
   17ff8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17ffc:	ldr	r3, [fp, #-20]	; 0xffffffec
   18000:	add	r3, r2, r3
   18004:	mov	r2, #39	; 0x27
   18008:	strb	r2, [r3]
   1800c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18010:	add	r3, r3, #1
   18014:	str	r3, [fp, #-20]	; 0xffffffec
   18018:	ldr	r2, [fp, #-20]	; 0xffffffec
   1801c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18020:	cmp	r2, r3
   18024:	bcs	1803c <__assert_fail@plt+0x70f0>
   18028:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1802c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18030:	add	r3, r2, r3
   18034:	mov	r2, #36	; 0x24
   18038:	strb	r2, [r3]
   1803c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18040:	add	r3, r3, #1
   18044:	str	r3, [fp, #-20]	; 0xffffffec
   18048:	ldr	r2, [fp, #-20]	; 0xffffffec
   1804c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18050:	cmp	r2, r3
   18054:	bcs	1806c <__assert_fail@plt+0x7120>
   18058:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1805c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18060:	add	r3, r2, r3
   18064:	mov	r2, #39	; 0x27
   18068:	strb	r2, [r3]
   1806c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18070:	add	r3, r3, #1
   18074:	str	r3, [fp, #-20]	; 0xffffffec
   18078:	mov	r3, #1
   1807c:	strb	r3, [fp, #-35]	; 0xffffffdd
   18080:	ldr	r2, [fp, #-20]	; 0xffffffec
   18084:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18088:	cmp	r2, r3
   1808c:	bcs	180a4 <__assert_fail@plt+0x7158>
   18090:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18094:	ldr	r3, [fp, #-20]	; 0xffffffec
   18098:	add	r3, r2, r3
   1809c:	mov	r2, #92	; 0x5c
   180a0:	strb	r2, [r3]
   180a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   180a8:	add	r3, r3, #1
   180ac:	str	r3, [fp, #-20]	; 0xffffffec
   180b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   180b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   180b8:	cmp	r2, r3
   180bc:	bcs	180e4 <__assert_fail@plt+0x7198>
   180c0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   180c4:	lsr	r3, r3, #6
   180c8:	uxtb	r2, r3
   180cc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   180d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   180d4:	add	r3, r1, r3
   180d8:	add	r2, r2, #48	; 0x30
   180dc:	uxtb	r2, r2
   180e0:	strb	r2, [r3]
   180e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   180e8:	add	r3, r3, #1
   180ec:	str	r3, [fp, #-20]	; 0xffffffec
   180f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   180f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   180f8:	cmp	r2, r3
   180fc:	bcs	1812c <__assert_fail@plt+0x71e0>
   18100:	ldrb	r3, [fp, #-38]	; 0xffffffda
   18104:	lsr	r3, r3, #3
   18108:	uxtb	r3, r3
   1810c:	and	r3, r3, #7
   18110:	uxtb	r2, r3
   18114:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1811c:	add	r3, r1, r3
   18120:	add	r2, r2, #48	; 0x30
   18124:	uxtb	r2, r2
   18128:	strb	r2, [r3]
   1812c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18130:	add	r3, r3, #1
   18134:	str	r3, [fp, #-20]	; 0xffffffec
   18138:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1813c:	and	r3, r3, #7
   18140:	uxtb	r3, r3
   18144:	add	r3, r3, #48	; 0x30
   18148:	strb	r3, [fp, #-38]	; 0xffffffda
   1814c:	b	18194 <__assert_fail@plt+0x7248>
   18150:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   18154:	cmp	r3, #0
   18158:	beq	18194 <__assert_fail@plt+0x7248>
   1815c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18160:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18164:	cmp	r2, r3
   18168:	bcs	18180 <__assert_fail@plt+0x7234>
   1816c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18170:	ldr	r3, [fp, #-20]	; 0xffffffec
   18174:	add	r3, r2, r3
   18178:	mov	r2, #92	; 0x5c
   1817c:	strb	r2, [r3]
   18180:	ldr	r3, [fp, #-20]	; 0xffffffec
   18184:	add	r3, r3, #1
   18188:	str	r3, [fp, #-20]	; 0xffffffec
   1818c:	mov	r3, #0
   18190:	strb	r3, [fp, #-40]	; 0xffffffd8
   18194:	ldr	r3, [fp, #-16]
   18198:	add	r3, r3, #1
   1819c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   181a0:	cmp	r2, r3
   181a4:	bls	18284 <__assert_fail@plt+0x7338>
   181a8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   181ac:	cmp	r3, #0
   181b0:	beq	18230 <__assert_fail@plt+0x72e4>
   181b4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   181b8:	eor	r3, r3, #1
   181bc:	uxtb	r3, r3
   181c0:	cmp	r3, #0
   181c4:	beq	18230 <__assert_fail@plt+0x72e4>
   181c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   181cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   181d0:	cmp	r2, r3
   181d4:	bcs	181ec <__assert_fail@plt+0x72a0>
   181d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   181dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   181e0:	add	r3, r2, r3
   181e4:	mov	r2, #39	; 0x27
   181e8:	strb	r2, [r3]
   181ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   181f0:	add	r3, r3, #1
   181f4:	str	r3, [fp, #-20]	; 0xffffffec
   181f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   181fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18200:	cmp	r2, r3
   18204:	bcs	1821c <__assert_fail@plt+0x72d0>
   18208:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1820c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18210:	add	r3, r2, r3
   18214:	mov	r2, #39	; 0x27
   18218:	strb	r2, [r3]
   1821c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18220:	add	r3, r3, #1
   18224:	str	r3, [fp, #-20]	; 0xffffffec
   18228:	mov	r3, #0
   1822c:	strb	r3, [fp, #-35]	; 0xffffffdd
   18230:	ldr	r2, [fp, #-20]	; 0xffffffec
   18234:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18238:	cmp	r2, r3
   1823c:	bcs	18254 <__assert_fail@plt+0x7308>
   18240:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18244:	ldr	r3, [fp, #-20]	; 0xffffffec
   18248:	add	r3, r2, r3
   1824c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   18250:	strb	r2, [r3]
   18254:	ldr	r3, [fp, #-20]	; 0xffffffec
   18258:	add	r3, r3, #1
   1825c:	str	r3, [fp, #-20]	; 0xffffffec
   18260:	ldr	r3, [fp, #-16]
   18264:	add	r3, r3, #1
   18268:	str	r3, [fp, #-16]
   1826c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18270:	ldr	r3, [fp, #-16]
   18274:	add	r3, r2, r3
   18278:	ldrb	r3, [r3]
   1827c:	strb	r3, [fp, #-38]	; 0xffffffda
   18280:	b	17f94 <__assert_fail@plt+0x7048>
   18284:	nop	{0}
   18288:	b	18460 <__assert_fail@plt+0x7514>
   1828c:	nop	{0}
   18290:	b	182c0 <__assert_fail@plt+0x7374>
   18294:	nop	{0}
   18298:	b	182c0 <__assert_fail@plt+0x7374>
   1829c:	nop	{0}
   182a0:	b	182c0 <__assert_fail@plt+0x7374>
   182a4:	nop	{0}
   182a8:	b	182c0 <__assert_fail@plt+0x7374>
   182ac:	nop	{0}
   182b0:	b	182c0 <__assert_fail@plt+0x7374>
   182b4:	nop	{0}
   182b8:	b	182c0 <__assert_fail@plt+0x7374>
   182bc:	nop	{0}
   182c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   182c4:	eor	r3, r3, #1
   182c8:	uxtb	r3, r3
   182cc:	cmp	r3, #0
   182d0:	bne	182e0 <__assert_fail@plt+0x7394>
   182d4:	ldr	r3, [fp, #4]
   182d8:	cmp	r3, #2
   182dc:	bne	182f4 <__assert_fail@plt+0x73a8>
   182e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   182e4:	eor	r3, r3, #1
   182e8:	uxtb	r3, r3
   182ec:	cmp	r3, #0
   182f0:	bne	18334 <__assert_fail@plt+0x73e8>
   182f4:	ldr	r3, [fp, #12]
   182f8:	cmp	r3, #0
   182fc:	beq	18334 <__assert_fail@plt+0x73e8>
   18300:	ldrb	r3, [fp, #-38]	; 0xffffffda
   18304:	lsr	r3, r3, #5
   18308:	uxtb	r3, r3
   1830c:	lsl	r3, r3, #2
   18310:	ldr	r2, [fp, #12]
   18314:	add	r3, r2, r3
   18318:	ldr	r2, [r3]
   1831c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   18320:	and	r3, r3, #31
   18324:	lsr	r3, r2, r3
   18328:	and	r3, r3, #1
   1832c:	cmp	r3, #0
   18330:	bne	18348 <__assert_fail@plt+0x73fc>
   18334:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   18338:	eor	r3, r3, #1
   1833c:	uxtb	r3, r3
   18340:	cmp	r3, #0
   18344:	bne	1845c <__assert_fail@plt+0x7510>
   18348:	nop	{0}
   1834c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18350:	cmp	r3, #0
   18354:	bne	1872c <__assert_fail@plt+0x77e0>
   18358:	mov	r3, #1
   1835c:	strb	r3, [fp, #-41]	; 0xffffffd7
   18360:	ldr	r3, [fp, #4]
   18364:	cmp	r3, #2
   18368:	bne	18418 <__assert_fail@plt+0x74cc>
   1836c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   18370:	eor	r3, r3, #1
   18374:	uxtb	r3, r3
   18378:	cmp	r3, #0
   1837c:	beq	18418 <__assert_fail@plt+0x74cc>
   18380:	ldr	r2, [fp, #-20]	; 0xffffffec
   18384:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18388:	cmp	r2, r3
   1838c:	bcs	183a4 <__assert_fail@plt+0x7458>
   18390:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18394:	ldr	r3, [fp, #-20]	; 0xffffffec
   18398:	add	r3, r2, r3
   1839c:	mov	r2, #39	; 0x27
   183a0:	strb	r2, [r3]
   183a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   183a8:	add	r3, r3, #1
   183ac:	str	r3, [fp, #-20]	; 0xffffffec
   183b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   183b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   183b8:	cmp	r2, r3
   183bc:	bcs	183d4 <__assert_fail@plt+0x7488>
   183c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   183c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   183c8:	add	r3, r2, r3
   183cc:	mov	r2, #36	; 0x24
   183d0:	strb	r2, [r3]
   183d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   183d8:	add	r3, r3, #1
   183dc:	str	r3, [fp, #-20]	; 0xffffffec
   183e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   183e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   183e8:	cmp	r2, r3
   183ec:	bcs	18404 <__assert_fail@plt+0x74b8>
   183f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   183f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   183f8:	add	r3, r2, r3
   183fc:	mov	r2, #39	; 0x27
   18400:	strb	r2, [r3]
   18404:	ldr	r3, [fp, #-20]	; 0xffffffec
   18408:	add	r3, r3, #1
   1840c:	str	r3, [fp, #-20]	; 0xffffffec
   18410:	mov	r3, #1
   18414:	strb	r3, [fp, #-35]	; 0xffffffdd
   18418:	ldr	r2, [fp, #-20]	; 0xffffffec
   1841c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18420:	cmp	r2, r3
   18424:	bcs	1843c <__assert_fail@plt+0x74f0>
   18428:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1842c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18430:	add	r3, r2, r3
   18434:	mov	r2, #92	; 0x5c
   18438:	strb	r2, [r3]
   1843c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18440:	add	r3, r3, #1
   18444:	str	r3, [fp, #-20]	; 0xffffffec
   18448:	b	18460 <__assert_fail@plt+0x7514>
   1844c:	nop	{0}
   18450:	b	18460 <__assert_fail@plt+0x7514>
   18454:	nop	{0}
   18458:	b	18460 <__assert_fail@plt+0x7514>
   1845c:	nop	{0}
   18460:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   18464:	cmp	r3, #0
   18468:	beq	184e8 <__assert_fail@plt+0x759c>
   1846c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   18470:	eor	r3, r3, #1
   18474:	uxtb	r3, r3
   18478:	cmp	r3, #0
   1847c:	beq	184e8 <__assert_fail@plt+0x759c>
   18480:	ldr	r2, [fp, #-20]	; 0xffffffec
   18484:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18488:	cmp	r2, r3
   1848c:	bcs	184a4 <__assert_fail@plt+0x7558>
   18490:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18494:	ldr	r3, [fp, #-20]	; 0xffffffec
   18498:	add	r3, r2, r3
   1849c:	mov	r2, #39	; 0x27
   184a0:	strb	r2, [r3]
   184a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   184a8:	add	r3, r3, #1
   184ac:	str	r3, [fp, #-20]	; 0xffffffec
   184b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   184b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   184b8:	cmp	r2, r3
   184bc:	bcs	184d4 <__assert_fail@plt+0x7588>
   184c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   184c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   184c8:	add	r3, r2, r3
   184cc:	mov	r2, #39	; 0x27
   184d0:	strb	r2, [r3]
   184d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   184d8:	add	r3, r3, #1
   184dc:	str	r3, [fp, #-20]	; 0xffffffec
   184e0:	mov	r3, #0
   184e4:	strb	r3, [fp, #-35]	; 0xffffffdd
   184e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   184ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   184f0:	cmp	r2, r3
   184f4:	bcs	1850c <__assert_fail@plt+0x75c0>
   184f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   184fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   18500:	add	r3, r2, r3
   18504:	ldrb	r2, [fp, #-38]	; 0xffffffda
   18508:	strb	r2, [r3]
   1850c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18510:	add	r3, r3, #1
   18514:	str	r3, [fp, #-20]	; 0xffffffec
   18518:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1851c:	eor	r3, r3, #1
   18520:	uxtb	r3, r3
   18524:	cmp	r3, #0
   18528:	beq	18534 <__assert_fail@plt+0x75e8>
   1852c:	mov	r3, #0
   18530:	strb	r3, [fp, #-37]	; 0xffffffdb
   18534:	ldr	r3, [fp, #-16]
   18538:	add	r3, r3, #1
   1853c:	str	r3, [fp, #-16]
   18540:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18544:	cmn	r3, #1
   18548:	bne	18570 <__assert_fail@plt+0x7624>
   1854c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18550:	ldr	r3, [fp, #-16]
   18554:	add	r3, r2, r3
   18558:	ldrb	r3, [r3]
   1855c:	cmp	r3, #0
   18560:	movne	r3, #1
   18564:	moveq	r3, #0
   18568:	uxtb	r3, r3
   1856c:	b	18588 <__assert_fail@plt+0x763c>
   18570:	ldr	r2, [fp, #-16]
   18574:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18578:	cmp	r2, r3
   1857c:	movne	r3, #1
   18580:	moveq	r3, #0
   18584:	uxtb	r3, r3
   18588:	cmp	r3, #0
   1858c:	bne	173a8 <__assert_fail@plt+0x645c>
   18590:	ldr	r3, [fp, #-20]	; 0xffffffec
   18594:	cmp	r3, #0
   18598:	bne	185b4 <__assert_fail@plt+0x7668>
   1859c:	ldr	r3, [fp, #4]
   185a0:	cmp	r3, #2
   185a4:	bne	185b4 <__assert_fail@plt+0x7668>
   185a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   185ac:	cmp	r3, #0
   185b0:	bne	18734 <__assert_fail@plt+0x77e8>
   185b4:	ldr	r3, [fp, #4]
   185b8:	cmp	r3, #2
   185bc:	bne	1865c <__assert_fail@plt+0x7710>
   185c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   185c4:	eor	r3, r3, #1
   185c8:	uxtb	r3, r3
   185cc:	cmp	r3, #0
   185d0:	beq	1865c <__assert_fail@plt+0x7710>
   185d4:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   185d8:	cmp	r3, #0
   185dc:	beq	1865c <__assert_fail@plt+0x7710>
   185e0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   185e4:	cmp	r3, #0
   185e8:	beq	18630 <__assert_fail@plt+0x76e4>
   185ec:	ldr	r3, [fp, #20]
   185f0:	str	r3, [sp, #16]
   185f4:	ldr	r3, [fp, #16]
   185f8:	str	r3, [sp, #12]
   185fc:	ldr	r3, [fp, #12]
   18600:	str	r3, [sp, #8]
   18604:	ldr	r3, [fp, #8]
   18608:	str	r3, [sp, #4]
   1860c:	mov	r3, #5
   18610:	str	r3, [sp]
   18614:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18618:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1861c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18620:	ldr	r0, [fp, #-88]	; 0xffffffa8
   18624:	bl	170e0 <__assert_fail@plt+0x6194>
   18628:	mov	r3, r0
   1862c:	b	1879c <__assert_fail@plt+0x7850>
   18630:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18634:	cmp	r3, #0
   18638:	bne	1865c <__assert_fail@plt+0x7710>
   1863c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18640:	cmp	r3, #0
   18644:	beq	1865c <__assert_fail@plt+0x7710>
   18648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1864c:	str	r3, [fp, #-92]	; 0xffffffa4
   18650:	mov	r3, #0
   18654:	str	r3, [fp, #-20]	; 0xffffffec
   18658:	b	17174 <__assert_fail@plt+0x6228>
   1865c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18660:	cmp	r3, #0
   18664:	beq	186d0 <__assert_fail@plt+0x7784>
   18668:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1866c:	eor	r3, r3, #1
   18670:	uxtb	r3, r3
   18674:	cmp	r3, #0
   18678:	beq	186d0 <__assert_fail@plt+0x7784>
   1867c:	b	186c0 <__assert_fail@plt+0x7774>
   18680:	ldr	r2, [fp, #-20]	; 0xffffffec
   18684:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18688:	cmp	r2, r3
   1868c:	bcs	186a8 <__assert_fail@plt+0x775c>
   18690:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18694:	ldr	r3, [fp, #-20]	; 0xffffffec
   18698:	add	r3, r2, r3
   1869c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   186a0:	ldrb	r2, [r2]
   186a4:	strb	r2, [r3]
   186a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   186ac:	add	r3, r3, #1
   186b0:	str	r3, [fp, #-20]	; 0xffffffec
   186b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186b8:	add	r3, r3, #1
   186bc:	str	r3, [fp, #-28]	; 0xffffffe4
   186c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186c4:	ldrb	r3, [r3]
   186c8:	cmp	r3, #0
   186cc:	bne	18680 <__assert_fail@plt+0x7734>
   186d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   186d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   186d8:	cmp	r2, r3
   186dc:	bcs	186f4 <__assert_fail@plt+0x77a8>
   186e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   186e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   186e8:	add	r3, r2, r3
   186ec:	mov	r2, #0
   186f0:	strb	r2, [r3]
   186f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   186f8:	b	1879c <__assert_fail@plt+0x7850>
   186fc:	nop	{0}
   18700:	b	18738 <__assert_fail@plt+0x77ec>
   18704:	nop	{0}
   18708:	b	18738 <__assert_fail@plt+0x77ec>
   1870c:	nop	{0}
   18710:	b	18738 <__assert_fail@plt+0x77ec>
   18714:	nop	{0}
   18718:	b	18738 <__assert_fail@plt+0x77ec>
   1871c:	nop	{0}
   18720:	b	18738 <__assert_fail@plt+0x77ec>
   18724:	nop	{0}
   18728:	b	18738 <__assert_fail@plt+0x77ec>
   1872c:	nop	{0}
   18730:	b	18738 <__assert_fail@plt+0x77ec>
   18734:	nop	{0}
   18738:	ldr	r3, [fp, #4]
   1873c:	cmp	r3, #2
   18740:	bne	18758 <__assert_fail@plt+0x780c>
   18744:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18748:	cmp	r3, #0
   1874c:	beq	18758 <__assert_fail@plt+0x780c>
   18750:	mov	r3, #4
   18754:	str	r3, [fp, #4]
   18758:	ldr	r3, [fp, #8]
   1875c:	bic	r3, r3, #2
   18760:	ldr	r2, [fp, #20]
   18764:	str	r2, [sp, #16]
   18768:	ldr	r2, [fp, #16]
   1876c:	str	r2, [sp, #12]
   18770:	mov	r2, #0
   18774:	str	r2, [sp, #8]
   18778:	str	r3, [sp, #4]
   1877c:	ldr	r3, [fp, #4]
   18780:	str	r3, [sp]
   18784:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18788:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1878c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   18790:	ldr	r0, [fp, #-88]	; 0xffffffa8
   18794:	bl	170e0 <__assert_fail@plt+0x6194>
   18798:	mov	r3, r0
   1879c:	mov	r0, r3
   187a0:	sub	sp, fp, #8
   187a4:	ldr	r4, [sp]
   187a8:	ldr	fp, [sp, #4]
   187ac:	add	sp, sp, #8
   187b0:	pop	{pc}		; (ldr pc, [sp], #4)
   187b4:	str	fp, [sp, #-8]!
   187b8:	str	lr, [sp, #4]
   187bc:	add	fp, sp, #4
   187c0:	sub	sp, sp, #56	; 0x38
   187c4:	str	r0, [fp, #-24]	; 0xffffffe8
   187c8:	str	r1, [fp, #-28]	; 0xffffffe4
   187cc:	str	r2, [fp, #-32]	; 0xffffffe0
   187d0:	str	r3, [fp, #-36]	; 0xffffffdc
   187d4:	ldr	r3, [fp, #4]
   187d8:	cmp	r3, #0
   187dc:	beq	187e8 <__assert_fail@plt+0x789c>
   187e0:	ldr	r3, [fp, #4]
   187e4:	b	187f0 <__assert_fail@plt+0x78a4>
   187e8:	movw	r3, #53632	; 0xd180
   187ec:	movt	r3, #2
   187f0:	str	r3, [fp, #-8]
   187f4:	bl	10e80 <__errno_location@plt>
   187f8:	mov	r3, r0
   187fc:	ldr	r3, [r3]
   18800:	str	r3, [fp, #-12]
   18804:	ldr	r3, [fp, #-8]
   18808:	ldr	r3, [r3]
   1880c:	ldr	r2, [fp, #-8]
   18810:	ldr	r2, [r2, #4]
   18814:	ldr	r1, [fp, #-8]
   18818:	add	r1, r1, #8
   1881c:	ldr	r0, [fp, #-8]
   18820:	ldr	r0, [r0, #40]	; 0x28
   18824:	ldr	ip, [fp, #-8]
   18828:	ldr	ip, [ip, #44]	; 0x2c
   1882c:	str	ip, [sp, #16]
   18830:	str	r0, [sp, #12]
   18834:	str	r1, [sp, #8]
   18838:	str	r2, [sp, #4]
   1883c:	str	r3, [sp]
   18840:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18844:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18848:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1884c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18850:	bl	170e0 <__assert_fail@plt+0x6194>
   18854:	str	r0, [fp, #-16]
   18858:	bl	10e80 <__errno_location@plt>
   1885c:	mov	r2, r0
   18860:	ldr	r3, [fp, #-12]
   18864:	str	r3, [r2]
   18868:	ldr	r3, [fp, #-16]
   1886c:	mov	r0, r3
   18870:	sub	sp, fp, #4
   18874:	ldr	fp, [sp]
   18878:	add	sp, sp, #4
   1887c:	pop	{pc}		; (ldr pc, [sp], #4)
   18880:	str	fp, [sp, #-8]!
   18884:	str	lr, [sp, #4]
   18888:	add	fp, sp, #4
   1888c:	sub	sp, sp, #16
   18890:	str	r0, [fp, #-8]
   18894:	str	r1, [fp, #-12]
   18898:	str	r2, [fp, #-16]
   1889c:	ldr	r3, [fp, #-16]
   188a0:	mov	r2, #0
   188a4:	ldr	r1, [fp, #-12]
   188a8:	ldr	r0, [fp, #-8]
   188ac:	bl	188c8 <__assert_fail@plt+0x797c>
   188b0:	mov	r3, r0
   188b4:	mov	r0, r3
   188b8:	sub	sp, fp, #4
   188bc:	ldr	fp, [sp]
   188c0:	add	sp, sp, #4
   188c4:	pop	{pc}		; (ldr pc, [sp], #4)
   188c8:	str	fp, [sp, #-8]!
   188cc:	str	lr, [sp, #4]
   188d0:	add	fp, sp, #4
   188d4:	sub	sp, sp, #64	; 0x40
   188d8:	str	r0, [fp, #-32]	; 0xffffffe0
   188dc:	str	r1, [fp, #-36]	; 0xffffffdc
   188e0:	str	r2, [fp, #-40]	; 0xffffffd8
   188e4:	str	r3, [fp, #-44]	; 0xffffffd4
   188e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   188ec:	cmp	r3, #0
   188f0:	beq	188fc <__assert_fail@plt+0x79b0>
   188f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   188f8:	b	18904 <__assert_fail@plt+0x79b8>
   188fc:	movw	r3, #53632	; 0xd180
   18900:	movt	r3, #2
   18904:	str	r3, [fp, #-8]
   18908:	bl	10e80 <__errno_location@plt>
   1890c:	mov	r3, r0
   18910:	ldr	r3, [r3]
   18914:	str	r3, [fp, #-12]
   18918:	ldr	r3, [fp, #-8]
   1891c:	ldr	r3, [r3, #4]
   18920:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18924:	cmp	r2, #0
   18928:	moveq	r2, #1
   1892c:	movne	r2, #0
   18930:	uxtb	r2, r2
   18934:	orr	r3, r3, r2
   18938:	str	r3, [fp, #-16]
   1893c:	ldr	r3, [fp, #-8]
   18940:	ldr	r3, [r3]
   18944:	ldr	r2, [fp, #-8]
   18948:	add	r2, r2, #8
   1894c:	ldr	r1, [fp, #-8]
   18950:	ldr	r1, [r1, #40]	; 0x28
   18954:	ldr	r0, [fp, #-8]
   18958:	ldr	r0, [r0, #44]	; 0x2c
   1895c:	str	r0, [sp, #16]
   18960:	str	r1, [sp, #12]
   18964:	str	r2, [sp, #8]
   18968:	ldr	r2, [fp, #-16]
   1896c:	str	r2, [sp, #4]
   18970:	str	r3, [sp]
   18974:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18978:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1897c:	mov	r1, #0
   18980:	mov	r0, #0
   18984:	bl	170e0 <__assert_fail@plt+0x6194>
   18988:	mov	r3, r0
   1898c:	add	r3, r3, #1
   18990:	str	r3, [fp, #-20]	; 0xffffffec
   18994:	ldr	r0, [fp, #-20]	; 0xffffffec
   18998:	bl	19e7c <__assert_fail@plt+0x8f30>
   1899c:	mov	r3, r0
   189a0:	str	r3, [fp, #-24]	; 0xffffffe8
   189a4:	ldr	r3, [fp, #-8]
   189a8:	ldr	r3, [r3]
   189ac:	ldr	r2, [fp, #-8]
   189b0:	add	r2, r2, #8
   189b4:	ldr	r1, [fp, #-8]
   189b8:	ldr	r1, [r1, #40]	; 0x28
   189bc:	ldr	r0, [fp, #-8]
   189c0:	ldr	r0, [r0, #44]	; 0x2c
   189c4:	str	r0, [sp, #16]
   189c8:	str	r1, [sp, #12]
   189cc:	str	r2, [sp, #8]
   189d0:	ldr	r2, [fp, #-16]
   189d4:	str	r2, [sp, #4]
   189d8:	str	r3, [sp]
   189dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   189e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   189e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   189e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   189ec:	bl	170e0 <__assert_fail@plt+0x6194>
   189f0:	bl	10e80 <__errno_location@plt>
   189f4:	mov	r2, r0
   189f8:	ldr	r3, [fp, #-12]
   189fc:	str	r3, [r2]
   18a00:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18a04:	cmp	r3, #0
   18a08:	beq	18a1c <__assert_fail@plt+0x7ad0>
   18a0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18a10:	sub	r2, r3, #1
   18a14:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18a18:	str	r2, [r3]
   18a1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18a20:	mov	r0, r3
   18a24:	sub	sp, fp, #4
   18a28:	ldr	fp, [sp]
   18a2c:	add	sp, sp, #4
   18a30:	pop	{pc}		; (ldr pc, [sp], #4)
   18a34:	str	fp, [sp, #-8]!
   18a38:	str	lr, [sp, #4]
   18a3c:	add	fp, sp, #4
   18a40:	sub	sp, sp, #8
   18a44:	movw	r3, #53508	; 0xd104
   18a48:	movt	r3, #2
   18a4c:	ldr	r3, [r3]
   18a50:	str	r3, [fp, #-12]
   18a54:	mov	r3, #1
   18a58:	str	r3, [fp, #-8]
   18a5c:	b	18a88 <__assert_fail@plt+0x7b3c>
   18a60:	ldr	r3, [fp, #-8]
   18a64:	lsl	r3, r3, #3
   18a68:	ldr	r2, [fp, #-12]
   18a6c:	add	r3, r2, r3
   18a70:	ldr	r3, [r3, #4]
   18a74:	mov	r0, r3
   18a78:	bl	16860 <__assert_fail@plt+0x5914>
   18a7c:	ldr	r3, [fp, #-8]
   18a80:	add	r3, r3, #1
   18a84:	str	r3, [fp, #-8]
   18a88:	movw	r3, #53496	; 0xd0f8
   18a8c:	movt	r3, #2
   18a90:	ldr	r3, [r3]
   18a94:	ldr	r2, [fp, #-8]
   18a98:	cmp	r2, r3
   18a9c:	blt	18a60 <__assert_fail@plt+0x7b14>
   18aa0:	ldr	r3, [fp, #-12]
   18aa4:	ldr	r2, [r3, #4]
   18aa8:	movw	r3, #53680	; 0xd1b0
   18aac:	movt	r3, #2
   18ab0:	cmp	r2, r3
   18ab4:	beq	18aec <__assert_fail@plt+0x7ba0>
   18ab8:	ldr	r3, [fp, #-12]
   18abc:	ldr	r3, [r3, #4]
   18ac0:	mov	r0, r3
   18ac4:	bl	16860 <__assert_fail@plt+0x5914>
   18ac8:	movw	r3, #53500	; 0xd0fc
   18acc:	movt	r3, #2
   18ad0:	mov	r2, #256	; 0x100
   18ad4:	str	r2, [r3]
   18ad8:	movw	r3, #53500	; 0xd0fc
   18adc:	movt	r3, #2
   18ae0:	movw	r2, #53680	; 0xd1b0
   18ae4:	movt	r2, #2
   18ae8:	str	r2, [r3, #4]
   18aec:	ldr	r2, [fp, #-12]
   18af0:	movw	r3, #53500	; 0xd0fc
   18af4:	movt	r3, #2
   18af8:	cmp	r2, r3
   18afc:	beq	18b1c <__assert_fail@plt+0x7bd0>
   18b00:	ldr	r0, [fp, #-12]
   18b04:	bl	16860 <__assert_fail@plt+0x5914>
   18b08:	movw	r3, #53508	; 0xd104
   18b0c:	movt	r3, #2
   18b10:	movw	r2, #53500	; 0xd0fc
   18b14:	movt	r2, #2
   18b18:	str	r2, [r3]
   18b1c:	movw	r3, #53496	; 0xd0f8
   18b20:	movt	r3, #2
   18b24:	mov	r2, #1
   18b28:	str	r2, [r3]
   18b2c:	nop	{0}
   18b30:	sub	sp, fp, #4
   18b34:	ldr	fp, [sp]
   18b38:	add	sp, sp, #4
   18b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18b40:	str	fp, [sp, #-8]!
   18b44:	str	lr, [sp, #4]
   18b48:	add	fp, sp, #4
   18b4c:	sub	sp, sp, #80	; 0x50
   18b50:	str	r0, [fp, #-48]	; 0xffffffd0
   18b54:	str	r1, [fp, #-52]	; 0xffffffcc
   18b58:	str	r2, [fp, #-56]	; 0xffffffc8
   18b5c:	str	r3, [fp, #-60]	; 0xffffffc4
   18b60:	bl	10e80 <__errno_location@plt>
   18b64:	mov	r3, r0
   18b68:	ldr	r3, [r3]
   18b6c:	str	r3, [fp, #-16]
   18b70:	movw	r3, #53508	; 0xd104
   18b74:	movt	r3, #2
   18b78:	ldr	r3, [r3]
   18b7c:	str	r3, [fp, #-8]
   18b80:	mvn	r3, #-2147483648	; 0x80000000
   18b84:	str	r3, [fp, #-20]	; 0xffffffec
   18b88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18b8c:	cmp	r3, #0
   18b90:	blt	18ba4 <__assert_fail@plt+0x7c58>
   18b94:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18b98:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b9c:	cmp	r2, r3
   18ba0:	blt	18ba8 <__assert_fail@plt+0x7c5c>
   18ba4:	bl	10f34 <abort@plt>
   18ba8:	movw	r3, #53496	; 0xd0f8
   18bac:	movt	r3, #2
   18bb0:	ldr	r3, [r3]
   18bb4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18bb8:	cmp	r2, r3
   18bbc:	blt	18cb4 <__assert_fail@plt+0x7d68>
   18bc0:	ldr	r2, [fp, #-8]
   18bc4:	movw	r3, #53500	; 0xd0fc
   18bc8:	movt	r3, #2
   18bcc:	cmp	r2, r3
   18bd0:	moveq	r3, #1
   18bd4:	movne	r3, #0
   18bd8:	strb	r3, [fp, #-21]	; 0xffffffeb
   18bdc:	movw	r3, #53496	; 0xd0f8
   18be0:	movt	r3, #2
   18be4:	ldr	r3, [r3]
   18be8:	str	r3, [fp, #-40]	; 0xffffffd8
   18bec:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   18bf0:	cmp	r3, #0
   18bf4:	beq	18c00 <__assert_fail@plt+0x7cb4>
   18bf8:	mov	r0, #0
   18bfc:	b	18c04 <__assert_fail@plt+0x7cb8>
   18c00:	ldr	r0, [fp, #-8]
   18c04:	movw	r3, #53496	; 0xd0f8
   18c08:	movt	r3, #2
   18c0c:	ldr	r3, [r3]
   18c10:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18c14:	sub	r3, r2, r3
   18c18:	add	r2, r3, #1
   18c1c:	sub	r1, fp, #40	; 0x28
   18c20:	mov	r3, #8
   18c24:	str	r3, [sp]
   18c28:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c2c:	bl	1a1dc <__assert_fail@plt+0x9290>
   18c30:	str	r0, [fp, #-8]
   18c34:	movw	r3, #53508	; 0xd104
   18c38:	movt	r3, #2
   18c3c:	ldr	r2, [fp, #-8]
   18c40:	str	r2, [r3]
   18c44:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   18c48:	cmp	r3, #0
   18c4c:	beq	18c68 <__assert_fail@plt+0x7d1c>
   18c50:	ldr	r2, [fp, #-8]
   18c54:	movw	r3, #53500	; 0xd0fc
   18c58:	movt	r3, #2
   18c5c:	mov	r1, r2
   18c60:	ldrd	r2, [r3]
   18c64:	strd	r2, [r1]
   18c68:	movw	r3, #53496	; 0xd0f8
   18c6c:	movt	r3, #2
   18c70:	ldr	r3, [r3]
   18c74:	lsl	r3, r3, #3
   18c78:	ldr	r2, [fp, #-8]
   18c7c:	add	r0, r2, r3
   18c80:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18c84:	movw	r3, #53496	; 0xd0f8
   18c88:	movt	r3, #2
   18c8c:	ldr	r3, [r3]
   18c90:	sub	r3, r2, r3
   18c94:	lsl	r3, r3, #3
   18c98:	mov	r2, r3
   18c9c:	mov	r1, #0
   18ca0:	bl	10e98 <memset@plt>
   18ca4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18ca8:	movw	r3, #53496	; 0xd0f8
   18cac:	movt	r3, #2
   18cb0:	str	r2, [r3]
   18cb4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18cb8:	lsl	r3, r3, #3
   18cbc:	ldr	r2, [fp, #-8]
   18cc0:	add	r3, r2, r3
   18cc4:	ldr	r3, [r3]
   18cc8:	str	r3, [fp, #-28]	; 0xffffffe4
   18ccc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18cd0:	lsl	r3, r3, #3
   18cd4:	ldr	r2, [fp, #-8]
   18cd8:	add	r3, r2, r3
   18cdc:	ldr	r3, [r3, #4]
   18ce0:	str	r3, [fp, #-12]
   18ce4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18ce8:	ldr	r3, [r3, #4]
   18cec:	orr	r3, r3, #1
   18cf0:	str	r3, [fp, #-32]	; 0xffffffe0
   18cf4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18cf8:	ldr	r3, [r3]
   18cfc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   18d00:	add	r2, r2, #8
   18d04:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18d08:	ldr	r1, [r1, #40]	; 0x28
   18d0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18d10:	ldr	r0, [r0, #44]	; 0x2c
   18d14:	str	r0, [sp, #16]
   18d18:	str	r1, [sp, #12]
   18d1c:	str	r2, [sp, #8]
   18d20:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18d24:	str	r2, [sp, #4]
   18d28:	str	r3, [sp]
   18d2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18d30:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18d34:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18d38:	ldr	r0, [fp, #-12]
   18d3c:	bl	170e0 <__assert_fail@plt+0x6194>
   18d40:	str	r0, [fp, #-36]	; 0xffffffdc
   18d44:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18d48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18d4c:	cmp	r2, r3
   18d50:	bhi	18e08 <__assert_fail@plt+0x7ebc>
   18d54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18d58:	add	r3, r3, #1
   18d5c:	str	r3, [fp, #-28]	; 0xffffffe4
   18d60:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18d64:	lsl	r3, r3, #3
   18d68:	ldr	r2, [fp, #-8]
   18d6c:	add	r3, r2, r3
   18d70:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18d74:	str	r2, [r3]
   18d78:	ldr	r2, [fp, #-12]
   18d7c:	movw	r3, #53680	; 0xd1b0
   18d80:	movt	r3, #2
   18d84:	cmp	r2, r3
   18d88:	beq	18d94 <__assert_fail@plt+0x7e48>
   18d8c:	ldr	r0, [fp, #-12]
   18d90:	bl	16860 <__assert_fail@plt+0x5914>
   18d94:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18d98:	bl	19e7c <__assert_fail@plt+0x8f30>
   18d9c:	mov	r3, r0
   18da0:	str	r3, [fp, #-12]
   18da4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18da8:	lsl	r3, r3, #3
   18dac:	ldr	r2, [fp, #-8]
   18db0:	add	r3, r2, r3
   18db4:	ldr	r2, [fp, #-12]
   18db8:	str	r2, [r3, #4]
   18dbc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18dc0:	ldr	r3, [r3]
   18dc4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   18dc8:	add	r2, r2, #8
   18dcc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18dd0:	ldr	r1, [r1, #40]	; 0x28
   18dd4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18dd8:	ldr	r0, [r0, #44]	; 0x2c
   18ddc:	str	r0, [sp, #16]
   18de0:	str	r1, [sp, #12]
   18de4:	str	r2, [sp, #8]
   18de8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18dec:	str	r2, [sp, #4]
   18df0:	str	r3, [sp]
   18df4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18df8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18dfc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18e00:	ldr	r0, [fp, #-12]
   18e04:	bl	170e0 <__assert_fail@plt+0x6194>
   18e08:	bl	10e80 <__errno_location@plt>
   18e0c:	mov	r2, r0
   18e10:	ldr	r3, [fp, #-16]
   18e14:	str	r3, [r2]
   18e18:	ldr	r3, [fp, #-12]
   18e1c:	mov	r0, r3
   18e20:	sub	sp, fp, #4
   18e24:	ldr	fp, [sp]
   18e28:	add	sp, sp, #4
   18e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e30:	str	fp, [sp, #-8]!
   18e34:	str	lr, [sp, #4]
   18e38:	add	fp, sp, #4
   18e3c:	sub	sp, sp, #8
   18e40:	str	r0, [fp, #-8]
   18e44:	str	r1, [fp, #-12]
   18e48:	movw	r3, #53632	; 0xd180
   18e4c:	movt	r3, #2
   18e50:	mvn	r2, #0
   18e54:	ldr	r1, [fp, #-12]
   18e58:	ldr	r0, [fp, #-8]
   18e5c:	bl	18b40 <__assert_fail@plt+0x7bf4>
   18e60:	mov	r3, r0
   18e64:	mov	r0, r3
   18e68:	sub	sp, fp, #4
   18e6c:	ldr	fp, [sp]
   18e70:	add	sp, sp, #4
   18e74:	pop	{pc}		; (ldr pc, [sp], #4)
   18e78:	str	fp, [sp, #-8]!
   18e7c:	str	lr, [sp, #4]
   18e80:	add	fp, sp, #4
   18e84:	sub	sp, sp, #16
   18e88:	str	r0, [fp, #-8]
   18e8c:	str	r1, [fp, #-12]
   18e90:	str	r2, [fp, #-16]
   18e94:	movw	r3, #53632	; 0xd180
   18e98:	movt	r3, #2
   18e9c:	ldr	r2, [fp, #-16]
   18ea0:	ldr	r1, [fp, #-12]
   18ea4:	ldr	r0, [fp, #-8]
   18ea8:	bl	18b40 <__assert_fail@plt+0x7bf4>
   18eac:	mov	r3, r0
   18eb0:	mov	r0, r3
   18eb4:	sub	sp, fp, #4
   18eb8:	ldr	fp, [sp]
   18ebc:	add	sp, sp, #4
   18ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ec4:	str	fp, [sp, #-8]!
   18ec8:	str	lr, [sp, #4]
   18ecc:	add	fp, sp, #4
   18ed0:	sub	sp, sp, #8
   18ed4:	str	r0, [fp, #-8]
   18ed8:	ldr	r1, [fp, #-8]
   18edc:	mov	r0, #0
   18ee0:	bl	18e30 <__assert_fail@plt+0x7ee4>
   18ee4:	mov	r3, r0
   18ee8:	mov	r0, r3
   18eec:	sub	sp, fp, #4
   18ef0:	ldr	fp, [sp]
   18ef4:	add	sp, sp, #4
   18ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   18efc:	str	fp, [sp, #-8]!
   18f00:	str	lr, [sp, #4]
   18f04:	add	fp, sp, #4
   18f08:	sub	sp, sp, #8
   18f0c:	str	r0, [fp, #-8]
   18f10:	str	r1, [fp, #-12]
   18f14:	ldr	r2, [fp, #-12]
   18f18:	ldr	r1, [fp, #-8]
   18f1c:	mov	r0, #0
   18f20:	bl	18e78 <__assert_fail@plt+0x7f2c>
   18f24:	mov	r3, r0
   18f28:	mov	r0, r3
   18f2c:	sub	sp, fp, #4
   18f30:	ldr	fp, [sp]
   18f34:	add	sp, sp, #4
   18f38:	pop	{pc}		; (ldr pc, [sp], #4)
   18f3c:	str	fp, [sp, #-8]!
   18f40:	str	lr, [sp, #4]
   18f44:	add	fp, sp, #4
   18f48:	sub	sp, sp, #64	; 0x40
   18f4c:	str	r0, [fp, #-56]	; 0xffffffc8
   18f50:	str	r1, [fp, #-60]	; 0xffffffc4
   18f54:	str	r2, [fp, #-64]	; 0xffffffc0
   18f58:	sub	r3, fp, #52	; 0x34
   18f5c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18f60:	mov	r0, r3
   18f64:	bl	16f3c <__assert_fail@plt+0x5ff0>
   18f68:	sub	r3, fp, #52	; 0x34
   18f6c:	mvn	r2, #0
   18f70:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18f74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18f78:	bl	18b40 <__assert_fail@plt+0x7bf4>
   18f7c:	mov	r3, r0
   18f80:	mov	r0, r3
   18f84:	sub	sp, fp, #4
   18f88:	ldr	fp, [sp]
   18f8c:	add	sp, sp, #4
   18f90:	pop	{pc}		; (ldr pc, [sp], #4)
   18f94:	str	fp, [sp, #-8]!
   18f98:	str	lr, [sp, #4]
   18f9c:	add	fp, sp, #4
   18fa0:	sub	sp, sp, #64	; 0x40
   18fa4:	str	r0, [fp, #-56]	; 0xffffffc8
   18fa8:	str	r1, [fp, #-60]	; 0xffffffc4
   18fac:	str	r2, [fp, #-64]	; 0xffffffc0
   18fb0:	str	r3, [fp, #-68]	; 0xffffffbc
   18fb4:	sub	r3, fp, #52	; 0x34
   18fb8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18fbc:	mov	r0, r3
   18fc0:	bl	16f3c <__assert_fail@plt+0x5ff0>
   18fc4:	sub	r3, fp, #52	; 0x34
   18fc8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18fcc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18fd0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18fd4:	bl	18b40 <__assert_fail@plt+0x7bf4>
   18fd8:	mov	r3, r0
   18fdc:	mov	r0, r3
   18fe0:	sub	sp, fp, #4
   18fe4:	ldr	fp, [sp]
   18fe8:	add	sp, sp, #4
   18fec:	pop	{pc}		; (ldr pc, [sp], #4)
   18ff0:	str	fp, [sp, #-8]!
   18ff4:	str	lr, [sp, #4]
   18ff8:	add	fp, sp, #4
   18ffc:	sub	sp, sp, #8
   19000:	str	r0, [fp, #-8]
   19004:	str	r1, [fp, #-12]
   19008:	ldr	r2, [fp, #-12]
   1900c:	ldr	r1, [fp, #-8]
   19010:	mov	r0, #0
   19014:	bl	18f3c <__assert_fail@plt+0x7ff0>
   19018:	mov	r3, r0
   1901c:	mov	r0, r3
   19020:	sub	sp, fp, #4
   19024:	ldr	fp, [sp]
   19028:	add	sp, sp, #4
   1902c:	pop	{pc}		; (ldr pc, [sp], #4)
   19030:	str	fp, [sp, #-8]!
   19034:	str	lr, [sp, #4]
   19038:	add	fp, sp, #4
   1903c:	sub	sp, sp, #16
   19040:	str	r0, [fp, #-8]
   19044:	str	r1, [fp, #-12]
   19048:	str	r2, [fp, #-16]
   1904c:	ldr	r3, [fp, #-16]
   19050:	ldr	r2, [fp, #-12]
   19054:	ldr	r1, [fp, #-8]
   19058:	mov	r0, #0
   1905c:	bl	18f94 <__assert_fail@plt+0x8048>
   19060:	mov	r3, r0
   19064:	mov	r0, r3
   19068:	sub	sp, fp, #4
   1906c:	ldr	fp, [sp]
   19070:	add	sp, sp, #4
   19074:	pop	{pc}		; (ldr pc, [sp], #4)
   19078:	str	fp, [sp, #-8]!
   1907c:	str	lr, [sp, #4]
   19080:	add	fp, sp, #4
   19084:	sub	sp, sp, #64	; 0x40
   19088:	str	r0, [fp, #-56]	; 0xffffffc8
   1908c:	str	r1, [fp, #-60]	; 0xffffffc4
   19090:	mov	r3, r2
   19094:	strb	r3, [fp, #-61]	; 0xffffffc3
   19098:	movw	r2, #53632	; 0xd180
   1909c:	movt	r2, #2
   190a0:	sub	r3, fp, #52	; 0x34
   190a4:	ldrd	r0, [r2]
   190a8:	strd	r0, [r3]
   190ac:	ldrd	r0, [r2, #8]
   190b0:	strd	r0, [r3, #8]
   190b4:	ldrd	r0, [r2, #16]
   190b8:	strd	r0, [r3, #16]
   190bc:	ldrd	r0, [r2, #24]
   190c0:	strd	r0, [r3, #24]
   190c4:	ldrd	r0, [r2, #32]
   190c8:	strd	r0, [r3, #32]
   190cc:	ldrd	r0, [r2, #40]	; 0x28
   190d0:	strd	r0, [r3, #40]	; 0x28
   190d4:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   190d8:	sub	r3, fp, #52	; 0x34
   190dc:	mov	r2, #1
   190e0:	mov	r0, r3
   190e4:	bl	16d9c <__assert_fail@plt+0x5e50>
   190e8:	sub	r3, fp, #52	; 0x34
   190ec:	ldr	r2, [fp, #-60]	; 0xffffffc4
   190f0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   190f4:	mov	r0, #0
   190f8:	bl	18b40 <__assert_fail@plt+0x7bf4>
   190fc:	mov	r3, r0
   19100:	mov	r0, r3
   19104:	sub	sp, fp, #4
   19108:	ldr	fp, [sp]
   1910c:	add	sp, sp, #4
   19110:	pop	{pc}		; (ldr pc, [sp], #4)
   19114:	str	fp, [sp, #-8]!
   19118:	str	lr, [sp, #4]
   1911c:	add	fp, sp, #4
   19120:	sub	sp, sp, #8
   19124:	str	r0, [fp, #-8]
   19128:	mov	r3, r1
   1912c:	strb	r3, [fp, #-9]
   19130:	ldrb	r3, [fp, #-9]
   19134:	mov	r2, r3
   19138:	mvn	r1, #0
   1913c:	ldr	r0, [fp, #-8]
   19140:	bl	19078 <__assert_fail@plt+0x812c>
   19144:	mov	r3, r0
   19148:	mov	r0, r3
   1914c:	sub	sp, fp, #4
   19150:	ldr	fp, [sp]
   19154:	add	sp, sp, #4
   19158:	pop	{pc}		; (ldr pc, [sp], #4)
   1915c:	str	fp, [sp, #-8]!
   19160:	str	lr, [sp, #4]
   19164:	add	fp, sp, #4
   19168:	sub	sp, sp, #8
   1916c:	str	r0, [fp, #-8]
   19170:	mov	r1, #58	; 0x3a
   19174:	ldr	r0, [fp, #-8]
   19178:	bl	19114 <__assert_fail@plt+0x81c8>
   1917c:	mov	r3, r0
   19180:	mov	r0, r3
   19184:	sub	sp, fp, #4
   19188:	ldr	fp, [sp]
   1918c:	add	sp, sp, #4
   19190:	pop	{pc}		; (ldr pc, [sp], #4)
   19194:	str	fp, [sp, #-8]!
   19198:	str	lr, [sp, #4]
   1919c:	add	fp, sp, #4
   191a0:	sub	sp, sp, #8
   191a4:	str	r0, [fp, #-8]
   191a8:	str	r1, [fp, #-12]
   191ac:	mov	r2, #58	; 0x3a
   191b0:	ldr	r1, [fp, #-12]
   191b4:	ldr	r0, [fp, #-8]
   191b8:	bl	19078 <__assert_fail@plt+0x812c>
   191bc:	mov	r3, r0
   191c0:	mov	r0, r3
   191c4:	sub	sp, fp, #4
   191c8:	ldr	fp, [sp]
   191cc:	add	sp, sp, #4
   191d0:	pop	{pc}		; (ldr pc, [sp], #4)
   191d4:	str	fp, [sp, #-8]!
   191d8:	str	lr, [sp, #4]
   191dc:	add	fp, sp, #4
   191e0:	sub	sp, sp, #112	; 0x70
   191e4:	str	r0, [fp, #-56]	; 0xffffffc8
   191e8:	str	r1, [fp, #-60]	; 0xffffffc4
   191ec:	str	r2, [fp, #-64]	; 0xffffffc0
   191f0:	sub	r3, fp, #116	; 0x74
   191f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   191f8:	mov	r0, r3
   191fc:	bl	16f3c <__assert_fail@plt+0x5ff0>
   19200:	sub	r3, fp, #52	; 0x34
   19204:	sub	r2, fp, #116	; 0x74
   19208:	ldrd	r0, [r2]
   1920c:	strd	r0, [r3]
   19210:	ldrd	r0, [r2, #8]
   19214:	strd	r0, [r3, #8]
   19218:	ldrd	r0, [r2, #16]
   1921c:	strd	r0, [r3, #16]
   19220:	ldrd	r0, [r2, #24]
   19224:	strd	r0, [r3, #24]
   19228:	ldrd	r0, [r2, #32]
   1922c:	strd	r0, [r3, #32]
   19230:	ldrd	r0, [r2, #40]	; 0x28
   19234:	strd	r0, [r3, #40]	; 0x28
   19238:	sub	r3, fp, #52	; 0x34
   1923c:	mov	r2, #1
   19240:	mov	r1, #58	; 0x3a
   19244:	mov	r0, r3
   19248:	bl	16d9c <__assert_fail@plt+0x5e50>
   1924c:	sub	r3, fp, #52	; 0x34
   19250:	mvn	r2, #0
   19254:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19258:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1925c:	bl	18b40 <__assert_fail@plt+0x7bf4>
   19260:	mov	r3, r0
   19264:	mov	r0, r3
   19268:	sub	sp, fp, #4
   1926c:	ldr	fp, [sp]
   19270:	add	sp, sp, #4
   19274:	pop	{pc}		; (ldr pc, [sp], #4)
   19278:	str	fp, [sp, #-8]!
   1927c:	str	lr, [sp, #4]
   19280:	add	fp, sp, #4
   19284:	sub	sp, sp, #24
   19288:	str	r0, [fp, #-8]
   1928c:	str	r1, [fp, #-12]
   19290:	str	r2, [fp, #-16]
   19294:	str	r3, [fp, #-20]	; 0xffffffec
   19298:	mvn	r3, #0
   1929c:	str	r3, [sp]
   192a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   192a4:	ldr	r2, [fp, #-16]
   192a8:	ldr	r1, [fp, #-12]
   192ac:	ldr	r0, [fp, #-8]
   192b0:	bl	192cc <__assert_fail@plt+0x8380>
   192b4:	mov	r3, r0
   192b8:	mov	r0, r3
   192bc:	sub	sp, fp, #4
   192c0:	ldr	fp, [sp]
   192c4:	add	sp, sp, #4
   192c8:	pop	{pc}		; (ldr pc, [sp], #4)
   192cc:	str	fp, [sp, #-8]!
   192d0:	str	lr, [sp, #4]
   192d4:	add	fp, sp, #4
   192d8:	sub	sp, sp, #64	; 0x40
   192dc:	str	r0, [fp, #-56]	; 0xffffffc8
   192e0:	str	r1, [fp, #-60]	; 0xffffffc4
   192e4:	str	r2, [fp, #-64]	; 0xffffffc0
   192e8:	str	r3, [fp, #-68]	; 0xffffffbc
   192ec:	movw	r2, #53632	; 0xd180
   192f0:	movt	r2, #2
   192f4:	sub	r3, fp, #52	; 0x34
   192f8:	ldrd	r0, [r2]
   192fc:	strd	r0, [r3]
   19300:	ldrd	r0, [r2, #8]
   19304:	strd	r0, [r3, #8]
   19308:	ldrd	r0, [r2, #16]
   1930c:	strd	r0, [r3, #16]
   19310:	ldrd	r0, [r2, #24]
   19314:	strd	r0, [r3, #24]
   19318:	ldrd	r0, [r2, #32]
   1931c:	strd	r0, [r3, #32]
   19320:	ldrd	r0, [r2, #40]	; 0x28
   19324:	strd	r0, [r3, #40]	; 0x28
   19328:	sub	r3, fp, #52	; 0x34
   1932c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19330:	ldr	r1, [fp, #-60]	; 0xffffffc4
   19334:	mov	r0, r3
   19338:	bl	16eb4 <__assert_fail@plt+0x5f68>
   1933c:	sub	r3, fp, #52	; 0x34
   19340:	ldr	r2, [fp, #4]
   19344:	ldr	r1, [fp, #-68]	; 0xffffffbc
   19348:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1934c:	bl	18b40 <__assert_fail@plt+0x7bf4>
   19350:	mov	r3, r0
   19354:	mov	r0, r3
   19358:	sub	sp, fp, #4
   1935c:	ldr	fp, [sp]
   19360:	add	sp, sp, #4
   19364:	pop	{pc}		; (ldr pc, [sp], #4)
   19368:	str	fp, [sp, #-8]!
   1936c:	str	lr, [sp, #4]
   19370:	add	fp, sp, #4
   19374:	sub	sp, sp, #16
   19378:	str	r0, [fp, #-8]
   1937c:	str	r1, [fp, #-12]
   19380:	str	r2, [fp, #-16]
   19384:	ldr	r3, [fp, #-16]
   19388:	ldr	r2, [fp, #-12]
   1938c:	ldr	r1, [fp, #-8]
   19390:	mov	r0, #0
   19394:	bl	19278 <__assert_fail@plt+0x832c>
   19398:	mov	r3, r0
   1939c:	mov	r0, r3
   193a0:	sub	sp, fp, #4
   193a4:	ldr	fp, [sp]
   193a8:	add	sp, sp, #4
   193ac:	pop	{pc}		; (ldr pc, [sp], #4)
   193b0:	str	fp, [sp, #-8]!
   193b4:	str	lr, [sp, #4]
   193b8:	add	fp, sp, #4
   193bc:	sub	sp, sp, #24
   193c0:	str	r0, [fp, #-8]
   193c4:	str	r1, [fp, #-12]
   193c8:	str	r2, [fp, #-16]
   193cc:	str	r3, [fp, #-20]	; 0xffffffec
   193d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   193d4:	str	r3, [sp]
   193d8:	ldr	r3, [fp, #-16]
   193dc:	ldr	r2, [fp, #-12]
   193e0:	ldr	r1, [fp, #-8]
   193e4:	mov	r0, #0
   193e8:	bl	192cc <__assert_fail@plt+0x8380>
   193ec:	mov	r3, r0
   193f0:	mov	r0, r3
   193f4:	sub	sp, fp, #4
   193f8:	ldr	fp, [sp]
   193fc:	add	sp, sp, #4
   19400:	pop	{pc}		; (ldr pc, [sp], #4)
   19404:	str	fp, [sp, #-8]!
   19408:	str	lr, [sp, #4]
   1940c:	add	fp, sp, #4
   19410:	sub	sp, sp, #16
   19414:	str	r0, [fp, #-8]
   19418:	str	r1, [fp, #-12]
   1941c:	str	r2, [fp, #-16]
   19420:	movw	r3, #53512	; 0xd108
   19424:	movt	r3, #2
   19428:	ldr	r2, [fp, #-16]
   1942c:	ldr	r1, [fp, #-12]
   19430:	ldr	r0, [fp, #-8]
   19434:	bl	18b40 <__assert_fail@plt+0x7bf4>
   19438:	mov	r3, r0
   1943c:	mov	r0, r3
   19440:	sub	sp, fp, #4
   19444:	ldr	fp, [sp]
   19448:	add	sp, sp, #4
   1944c:	pop	{pc}		; (ldr pc, [sp], #4)
   19450:	str	fp, [sp, #-8]!
   19454:	str	lr, [sp, #4]
   19458:	add	fp, sp, #4
   1945c:	sub	sp, sp, #8
   19460:	str	r0, [fp, #-8]
   19464:	str	r1, [fp, #-12]
   19468:	ldr	r2, [fp, #-12]
   1946c:	ldr	r1, [fp, #-8]
   19470:	mov	r0, #0
   19474:	bl	19404 <__assert_fail@plt+0x84b8>
   19478:	mov	r3, r0
   1947c:	mov	r0, r3
   19480:	sub	sp, fp, #4
   19484:	ldr	fp, [sp]
   19488:	add	sp, sp, #4
   1948c:	pop	{pc}		; (ldr pc, [sp], #4)
   19490:	str	fp, [sp, #-8]!
   19494:	str	lr, [sp, #4]
   19498:	add	fp, sp, #4
   1949c:	sub	sp, sp, #8
   194a0:	str	r0, [fp, #-8]
   194a4:	str	r1, [fp, #-12]
   194a8:	mvn	r2, #0
   194ac:	ldr	r1, [fp, #-12]
   194b0:	ldr	r0, [fp, #-8]
   194b4:	bl	19404 <__assert_fail@plt+0x84b8>
   194b8:	mov	r3, r0
   194bc:	mov	r0, r3
   194c0:	sub	sp, fp, #4
   194c4:	ldr	fp, [sp]
   194c8:	add	sp, sp, #4
   194cc:	pop	{pc}		; (ldr pc, [sp], #4)
   194d0:	str	fp, [sp, #-8]!
   194d4:	str	lr, [sp, #4]
   194d8:	add	fp, sp, #4
   194dc:	sub	sp, sp, #8
   194e0:	str	r0, [fp, #-8]
   194e4:	ldr	r1, [fp, #-8]
   194e8:	mov	r0, #0
   194ec:	bl	19490 <__assert_fail@plt+0x8544>
   194f0:	mov	r3, r0
   194f4:	mov	r0, r3
   194f8:	sub	sp, fp, #4
   194fc:	ldr	fp, [sp]
   19500:	add	sp, sp, #4
   19504:	pop	{pc}		; (ldr pc, [sp], #4)
   19508:	str	fp, [sp, #-8]!
   1950c:	str	lr, [sp, #4]
   19510:	add	fp, sp, #4
   19514:	sub	sp, sp, #24
   19518:	str	r0, [fp, #-16]
   1951c:	str	r1, [fp, #-20]	; 0xffffffec
   19520:	str	r2, [fp, #-24]	; 0xffffffe8
   19524:	mov	ip, #0
   19528:	ldr	r2, [fp, #-20]	; 0xffffffec
   1952c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19530:	umull	r0, r1, r2, r3
   19534:	mov	r2, #0
   19538:	mov	r3, #0
   1953c:	mov	r2, r1
   19540:	mov	r3, #0
   19544:	cmp	r2, #0
   19548:	beq	19550 <__assert_fail@plt+0x8604>
   1954c:	mov	ip, #1
   19550:	mov	r3, r0
   19554:	str	r3, [fp, #-8]
   19558:	mov	r3, ip
   1955c:	and	r3, r3, #1
   19560:	uxtb	r3, r3
   19564:	cmp	r3, #0
   19568:	beq	19584 <__assert_fail@plt+0x8638>
   1956c:	bl	10e80 <__errno_location@plt>
   19570:	mov	r2, r0
   19574:	mov	r3, #12
   19578:	str	r3, [r2]
   1957c:	mov	r3, #0
   19580:	b	19598 <__assert_fail@plt+0x864c>
   19584:	ldr	r3, [fp, #-8]
   19588:	mov	r1, r3
   1958c:	ldr	r0, [fp, #-16]
   19590:	bl	1b0e4 <__assert_fail@plt+0xa198>
   19594:	mov	r3, r0
   19598:	mov	r0, r3
   1959c:	sub	sp, fp, #4
   195a0:	ldr	fp, [sp]
   195a4:	add	sp, sp, #4
   195a8:	pop	{pc}		; (ldr pc, [sp], #4)
   195ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   195b0:	strd	r6, [sp, #8]
   195b4:	str	fp, [sp, #16]
   195b8:	str	lr, [sp, #20]
   195bc:	add	fp, sp, #20
   195c0:	sub	sp, sp, #48	; 0x30
   195c4:	str	r0, [fp, #-24]	; 0xffffffe8
   195c8:	str	r1, [fp, #-28]	; 0xffffffe4
   195cc:	str	r2, [fp, #-32]	; 0xffffffe0
   195d0:	str	r3, [fp, #-36]	; 0xffffffdc
   195d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   195d8:	cmp	r3, #0
   195dc:	beq	19604 <__assert_fail@plt+0x86b8>
   195e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   195e4:	str	r3, [sp]
   195e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   195ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   195f0:	movw	r1, #51416	; 0xc8d8
   195f4:	movt	r1, #1
   195f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   195fc:	bl	10e74 <fprintf@plt>
   19600:	b	1961c <__assert_fail@plt+0x86d0>
   19604:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19608:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1960c:	movw	r1, #51428	; 0xc8e4
   19610:	movt	r1, #1
   19614:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19618:	bl	10e74 <fprintf@plt>
   1961c:	movw	r0, #51436	; 0xc8ec
   19620:	movt	r0, #1
   19624:	bl	10e50 <gettext@plt>
   19628:	mov	r2, r0
   1962c:	movw	r3, #2022	; 0x7e6
   19630:	movw	r1, #52220	; 0xcbfc
   19634:	movt	r1, #1
   19638:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1963c:	bl	10e74 <fprintf@plt>
   19640:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19644:	mov	r0, #10
   19648:	bl	10d78 <fputc_unlocked@plt>
   1964c:	movw	r0, #51440	; 0xc8f0
   19650:	movt	r0, #1
   19654:	bl	10e50 <gettext@plt>
   19658:	mov	r3, r0
   1965c:	movw	r2, #51612	; 0xc99c
   19660:	movt	r2, #1
   19664:	mov	r1, r3
   19668:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1966c:	bl	10e74 <fprintf@plt>
   19670:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19674:	mov	r0, #10
   19678:	bl	10d78 <fputc_unlocked@plt>
   1967c:	ldr	r3, [fp, #8]
   19680:	cmp	r3, #9
   19684:	ldrls	pc, [pc, r3, lsl #2]
   19688:	b	19a68 <__assert_fail@plt+0x8b1c>
   1968c:	andeq	r9, r1, r4, lsl fp
   19690:			; <UNDEFINED> instruction: 0x000196b4
   19694:	ldrdeq	r9, [r1], -ip
   19698:	andeq	r9, r1, ip, lsl #14
   1969c:	andeq	r9, r1, r0, asr r7
   196a0:	andeq	r9, r1, ip, lsr #15
   196a4:	andeq	r9, r1, r8, lsl r8
   196a8:	muleq	r1, r4, r8
   196ac:	andeq	r9, r1, r0, lsr #18
   196b0:			; <UNDEFINED> instruction: 0x000199bc
   196b4:	movw	r0, #51648	; 0xc9c0
   196b8:	movt	r0, #1
   196bc:	bl	10e50 <gettext@plt>
   196c0:	mov	r1, r0
   196c4:	ldr	r3, [fp, #4]
   196c8:	ldr	r3, [r3]
   196cc:	mov	r2, r3
   196d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   196d4:	bl	10e74 <fprintf@plt>
   196d8:	b	19b18 <__assert_fail@plt+0x8bcc>
   196dc:	movw	r0, #51664	; 0xc9d0
   196e0:	movt	r0, #1
   196e4:	bl	10e50 <gettext@plt>
   196e8:	mov	r1, r0
   196ec:	ldr	r3, [fp, #4]
   196f0:	ldr	r2, [r3]
   196f4:	ldr	r3, [fp, #4]
   196f8:	add	r3, r3, #4
   196fc:	ldr	r3, [r3]
   19700:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19704:	bl	10e74 <fprintf@plt>
   19708:	b	19b18 <__assert_fail@plt+0x8bcc>
   1970c:	movw	r0, #51688	; 0xc9e8
   19710:	movt	r0, #1
   19714:	bl	10e50 <gettext@plt>
   19718:	ldr	r3, [fp, #4]
   1971c:	ldr	r2, [r3]
   19720:	ldr	r3, [fp, #4]
   19724:	add	r3, r3, #4
   19728:	ldr	r1, [r3]
   1972c:	ldr	r3, [fp, #4]
   19730:	add	r3, r3, #8
   19734:	ldr	r3, [r3]
   19738:	str	r3, [sp]
   1973c:	mov	r3, r1
   19740:	mov	r1, r0
   19744:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19748:	bl	10e74 <fprintf@plt>
   1974c:	b	19b18 <__assert_fail@plt+0x8bcc>
   19750:	movw	r0, #51716	; 0xca04
   19754:	movt	r0, #1
   19758:	bl	10e50 <gettext@plt>
   1975c:	mov	ip, r0
   19760:	ldr	r3, [fp, #4]
   19764:	ldr	r1, [r3]
   19768:	ldr	r3, [fp, #4]
   1976c:	add	r3, r3, #4
   19770:	ldr	r0, [r3]
   19774:	ldr	r3, [fp, #4]
   19778:	add	r3, r3, #8
   1977c:	ldr	r3, [r3]
   19780:	ldr	r2, [fp, #4]
   19784:	add	r2, r2, #12
   19788:	ldr	r2, [r2]
   1978c:	str	r2, [sp, #4]
   19790:	str	r3, [sp]
   19794:	mov	r3, r0
   19798:	mov	r2, r1
   1979c:	mov	r1, ip
   197a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   197a4:	bl	10e74 <fprintf@plt>
   197a8:	b	19b18 <__assert_fail@plt+0x8bcc>
   197ac:	movw	r0, #51748	; 0xca24
   197b0:	movt	r0, #1
   197b4:	bl	10e50 <gettext@plt>
   197b8:	mov	lr, r0
   197bc:	ldr	r3, [fp, #4]
   197c0:	ldr	r0, [r3]
   197c4:	ldr	r3, [fp, #4]
   197c8:	add	r3, r3, #4
   197cc:	ldr	ip, [r3]
   197d0:	ldr	r3, [fp, #4]
   197d4:	add	r3, r3, #8
   197d8:	ldr	r3, [r3]
   197dc:	ldr	r2, [fp, #4]
   197e0:	add	r2, r2, #12
   197e4:	ldr	r2, [r2]
   197e8:	ldr	r1, [fp, #4]
   197ec:	add	r1, r1, #16
   197f0:	ldr	r1, [r1]
   197f4:	str	r1, [sp, #8]
   197f8:	str	r2, [sp, #4]
   197fc:	str	r3, [sp]
   19800:	mov	r3, ip
   19804:	mov	r2, r0
   19808:	mov	r1, lr
   1980c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19810:	bl	10e74 <fprintf@plt>
   19814:	b	19b18 <__assert_fail@plt+0x8bcc>
   19818:	movw	r0, #51784	; 0xca48
   1981c:	movt	r0, #1
   19820:	bl	10e50 <gettext@plt>
   19824:	mov	r4, r0
   19828:	ldr	r3, [fp, #4]
   1982c:	ldr	ip, [r3]
   19830:	ldr	r3, [fp, #4]
   19834:	add	r3, r3, #4
   19838:	ldr	lr, [r3]
   1983c:	ldr	r3, [fp, #4]
   19840:	add	r3, r3, #8
   19844:	ldr	r3, [r3]
   19848:	ldr	r2, [fp, #4]
   1984c:	add	r2, r2, #12
   19850:	ldr	r2, [r2]
   19854:	ldr	r1, [fp, #4]
   19858:	add	r1, r1, #16
   1985c:	ldr	r1, [r1]
   19860:	ldr	r0, [fp, #4]
   19864:	add	r0, r0, #20
   19868:	ldr	r0, [r0]
   1986c:	str	r0, [sp, #12]
   19870:	str	r1, [sp, #8]
   19874:	str	r2, [sp, #4]
   19878:	str	r3, [sp]
   1987c:	mov	r3, lr
   19880:	mov	r2, ip
   19884:	mov	r1, r4
   19888:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1988c:	bl	10e74 <fprintf@plt>
   19890:	b	19b18 <__assert_fail@plt+0x8bcc>
   19894:	movw	r0, #51824	; 0xca70
   19898:	movt	r0, #1
   1989c:	bl	10e50 <gettext@plt>
   198a0:	mov	r5, r0
   198a4:	ldr	r3, [fp, #4]
   198a8:	ldr	lr, [r3]
   198ac:	ldr	r3, [fp, #4]
   198b0:	add	r3, r3, #4
   198b4:	ldr	r4, [r3]
   198b8:	ldr	r3, [fp, #4]
   198bc:	add	r3, r3, #8
   198c0:	ldr	r3, [r3]
   198c4:	ldr	r2, [fp, #4]
   198c8:	add	r2, r2, #12
   198cc:	ldr	r2, [r2]
   198d0:	ldr	r1, [fp, #4]
   198d4:	add	r1, r1, #16
   198d8:	ldr	r1, [r1]
   198dc:	ldr	r0, [fp, #4]
   198e0:	add	r0, r0, #20
   198e4:	ldr	r0, [r0]
   198e8:	ldr	ip, [fp, #4]
   198ec:	add	ip, ip, #24
   198f0:	ldr	ip, [ip]
   198f4:	str	ip, [sp, #16]
   198f8:	str	r0, [sp, #12]
   198fc:	str	r1, [sp, #8]
   19900:	str	r2, [sp, #4]
   19904:	str	r3, [sp]
   19908:	mov	r3, r4
   1990c:	mov	r2, lr
   19910:	mov	r1, r5
   19914:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19918:	bl	10e74 <fprintf@plt>
   1991c:	b	19b18 <__assert_fail@plt+0x8bcc>
   19920:	movw	r0, #51868	; 0xca9c
   19924:	movt	r0, #1
   19928:	bl	10e50 <gettext@plt>
   1992c:	mov	r6, r0
   19930:	ldr	r3, [fp, #4]
   19934:	ldr	r4, [r3]
   19938:	ldr	r3, [fp, #4]
   1993c:	add	r3, r3, #4
   19940:	ldr	r5, [r3]
   19944:	ldr	r3, [fp, #4]
   19948:	add	r3, r3, #8
   1994c:	ldr	r3, [r3]
   19950:	ldr	r2, [fp, #4]
   19954:	add	r2, r2, #12
   19958:	ldr	r2, [r2]
   1995c:	ldr	r1, [fp, #4]
   19960:	add	r1, r1, #16
   19964:	ldr	r1, [r1]
   19968:	ldr	r0, [fp, #4]
   1996c:	add	r0, r0, #20
   19970:	ldr	r0, [r0]
   19974:	ldr	ip, [fp, #4]
   19978:	add	ip, ip, #24
   1997c:	ldr	ip, [ip]
   19980:	ldr	lr, [fp, #4]
   19984:	add	lr, lr, #28
   19988:	ldr	lr, [lr]
   1998c:	str	lr, [sp, #20]
   19990:	str	ip, [sp, #16]
   19994:	str	r0, [sp, #12]
   19998:	str	r1, [sp, #8]
   1999c:	str	r2, [sp, #4]
   199a0:	str	r3, [sp]
   199a4:	mov	r3, r5
   199a8:	mov	r2, r4
   199ac:	mov	r1, r6
   199b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   199b4:	bl	10e74 <fprintf@plt>
   199b8:	b	19b18 <__assert_fail@plt+0x8bcc>
   199bc:	movw	r0, #51916	; 0xcacc
   199c0:	movt	r0, #1
   199c4:	bl	10e50 <gettext@plt>
   199c8:	mov	r7, r0
   199cc:	ldr	r3, [fp, #4]
   199d0:	ldr	r5, [r3]
   199d4:	ldr	r3, [fp, #4]
   199d8:	add	r3, r3, #4
   199dc:	ldr	r6, [r3]
   199e0:	ldr	r3, [fp, #4]
   199e4:	add	r3, r3, #8
   199e8:	ldr	r3, [r3]
   199ec:	ldr	r2, [fp, #4]
   199f0:	add	r2, r2, #12
   199f4:	ldr	r2, [r2]
   199f8:	ldr	r1, [fp, #4]
   199fc:	add	r1, r1, #16
   19a00:	ldr	r1, [r1]
   19a04:	ldr	r0, [fp, #4]
   19a08:	add	r0, r0, #20
   19a0c:	ldr	r0, [r0]
   19a10:	ldr	ip, [fp, #4]
   19a14:	add	ip, ip, #24
   19a18:	ldr	ip, [ip]
   19a1c:	ldr	lr, [fp, #4]
   19a20:	add	lr, lr, #28
   19a24:	ldr	lr, [lr]
   19a28:	ldr	r4, [fp, #4]
   19a2c:	add	r4, r4, #32
   19a30:	ldr	r4, [r4]
   19a34:	str	r4, [sp, #24]
   19a38:	str	lr, [sp, #20]
   19a3c:	str	ip, [sp, #16]
   19a40:	str	r0, [sp, #12]
   19a44:	str	r1, [sp, #8]
   19a48:	str	r2, [sp, #4]
   19a4c:	str	r3, [sp]
   19a50:	mov	r3, r6
   19a54:	mov	r2, r5
   19a58:	mov	r1, r7
   19a5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19a60:	bl	10e74 <fprintf@plt>
   19a64:	b	19b18 <__assert_fail@plt+0x8bcc>
   19a68:	movw	r0, #51968	; 0xcb00
   19a6c:	movt	r0, #1
   19a70:	bl	10e50 <gettext@plt>
   19a74:	mov	r7, r0
   19a78:	ldr	r3, [fp, #4]
   19a7c:	ldr	r5, [r3]
   19a80:	ldr	r3, [fp, #4]
   19a84:	add	r3, r3, #4
   19a88:	ldr	r6, [r3]
   19a8c:	ldr	r3, [fp, #4]
   19a90:	add	r3, r3, #8
   19a94:	ldr	r3, [r3]
   19a98:	ldr	r2, [fp, #4]
   19a9c:	add	r2, r2, #12
   19aa0:	ldr	r2, [r2]
   19aa4:	ldr	r1, [fp, #4]
   19aa8:	add	r1, r1, #16
   19aac:	ldr	r1, [r1]
   19ab0:	ldr	r0, [fp, #4]
   19ab4:	add	r0, r0, #20
   19ab8:	ldr	r0, [r0]
   19abc:	ldr	ip, [fp, #4]
   19ac0:	add	ip, ip, #24
   19ac4:	ldr	ip, [ip]
   19ac8:	ldr	lr, [fp, #4]
   19acc:	add	lr, lr, #28
   19ad0:	ldr	lr, [lr]
   19ad4:	ldr	r4, [fp, #4]
   19ad8:	add	r4, r4, #32
   19adc:	ldr	r4, [r4]
   19ae0:	str	r4, [sp, #24]
   19ae4:	str	lr, [sp, #20]
   19ae8:	str	ip, [sp, #16]
   19aec:	str	r0, [sp, #12]
   19af0:	str	r1, [sp, #8]
   19af4:	str	r2, [sp, #4]
   19af8:	str	r3, [sp]
   19afc:	mov	r3, r6
   19b00:	mov	r2, r5
   19b04:	mov	r1, r7
   19b08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19b0c:	bl	10e74 <fprintf@plt>
   19b10:	b	19b18 <__assert_fail@plt+0x8bcc>
   19b14:	nop	{0}
   19b18:	nop	{0}
   19b1c:	sub	sp, fp, #20
   19b20:	ldrd	r4, [sp]
   19b24:	ldrd	r6, [sp, #8]
   19b28:	ldr	fp, [sp, #16]
   19b2c:	add	sp, sp, #20
   19b30:	pop	{pc}		; (ldr pc, [sp], #4)
   19b34:	str	fp, [sp, #-8]!
   19b38:	str	lr, [sp, #4]
   19b3c:	add	fp, sp, #4
   19b40:	sub	sp, sp, #32
   19b44:	str	r0, [fp, #-16]
   19b48:	str	r1, [fp, #-20]	; 0xffffffec
   19b4c:	str	r2, [fp, #-24]	; 0xffffffe8
   19b50:	str	r3, [fp, #-28]	; 0xffffffe4
   19b54:	mov	r3, #0
   19b58:	str	r3, [fp, #-8]
   19b5c:	b	19b6c <__assert_fail@plt+0x8c20>
   19b60:	ldr	r3, [fp, #-8]
   19b64:	add	r3, r3, #1
   19b68:	str	r3, [fp, #-8]
   19b6c:	ldr	r3, [fp, #-8]
   19b70:	lsl	r3, r3, #2
   19b74:	ldr	r2, [fp, #4]
   19b78:	add	r3, r2, r3
   19b7c:	ldr	r3, [r3]
   19b80:	cmp	r3, #0
   19b84:	bne	19b60 <__assert_fail@plt+0x8c14>
   19b88:	ldr	r3, [fp, #-8]
   19b8c:	str	r3, [sp, #4]
   19b90:	ldr	r3, [fp, #4]
   19b94:	str	r3, [sp]
   19b98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19b9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19ba0:	ldr	r1, [fp, #-20]	; 0xffffffec
   19ba4:	ldr	r0, [fp, #-16]
   19ba8:	bl	195ac <__assert_fail@plt+0x8660>
   19bac:	nop	{0}
   19bb0:	sub	sp, fp, #4
   19bb4:	ldr	fp, [sp]
   19bb8:	add	sp, sp, #4
   19bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   19bc0:	str	fp, [sp, #-8]!
   19bc4:	str	lr, [sp, #4]
   19bc8:	add	fp, sp, #4
   19bcc:	sub	sp, sp, #72	; 0x48
   19bd0:	str	r0, [fp, #-56]	; 0xffffffc8
   19bd4:	str	r1, [fp, #-60]	; 0xffffffc4
   19bd8:	str	r2, [fp, #-64]	; 0xffffffc0
   19bdc:	str	r3, [fp, #-68]	; 0xffffffbc
   19be0:	mov	r3, #0
   19be4:	str	r3, [fp, #-8]
   19be8:	b	19bf8 <__assert_fail@plt+0x8cac>
   19bec:	ldr	r3, [fp, #-8]
   19bf0:	add	r3, r3, #1
   19bf4:	str	r3, [fp, #-8]
   19bf8:	ldr	r3, [fp, #-8]
   19bfc:	cmp	r3, #9
   19c00:	bhi	19c44 <__assert_fail@plt+0x8cf8>
   19c04:	ldr	r3, [fp, #4]
   19c08:	add	r2, r3, #4
   19c0c:	str	r2, [fp, #4]
   19c10:	ldr	r2, [r3]
   19c14:	ldr	r3, [fp, #-8]
   19c18:	lsl	r3, r3, #2
   19c1c:	sub	r1, fp, #4
   19c20:	add	r3, r1, r3
   19c24:	str	r2, [r3, #-44]	; 0xffffffd4
   19c28:	ldr	r3, [fp, #-8]
   19c2c:	lsl	r3, r3, #2
   19c30:	sub	r2, fp, #4
   19c34:	add	r3, r2, r3
   19c38:	ldr	r3, [r3, #-44]	; 0xffffffd4
   19c3c:	cmp	r3, #0
   19c40:	bne	19bec <__assert_fail@plt+0x8ca0>
   19c44:	ldr	r3, [fp, #-8]
   19c48:	str	r3, [sp, #4]
   19c4c:	sub	r3, fp, #48	; 0x30
   19c50:	str	r3, [sp]
   19c54:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19c58:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19c5c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   19c60:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19c64:	bl	195ac <__assert_fail@plt+0x8660>
   19c68:	nop	{0}
   19c6c:	sub	sp, fp, #4
   19c70:	ldr	fp, [sp]
   19c74:	add	sp, sp, #4
   19c78:	pop	{pc}		; (ldr pc, [sp], #4)
   19c7c:	push	{r3}		; (str r3, [sp, #-4]!)
   19c80:	str	fp, [sp, #-8]!
   19c84:	str	lr, [sp, #4]
   19c88:	add	fp, sp, #4
   19c8c:	sub	sp, sp, #36	; 0x24
   19c90:	str	r0, [fp, #-20]	; 0xffffffec
   19c94:	str	r1, [fp, #-24]	; 0xffffffe8
   19c98:	str	r2, [fp, #-28]	; 0xffffffe4
   19c9c:	add	r3, fp, #8
   19ca0:	str	r3, [fp, #-12]
   19ca4:	ldr	r3, [fp, #-12]
   19ca8:	str	r3, [sp]
   19cac:	ldr	r3, [fp, #4]
   19cb0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19cb4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19cb8:	ldr	r0, [fp, #-20]	; 0xffffffec
   19cbc:	bl	19bc0 <__assert_fail@plt+0x8c74>
   19cc0:	nop	{0}
   19cc4:	sub	sp, fp, #4
   19cc8:	ldr	fp, [sp]
   19ccc:	ldr	lr, [sp, #4]
   19cd0:	add	sp, sp, #8
   19cd4:	add	sp, sp, #4
   19cd8:	bx	lr
   19cdc:	str	fp, [sp, #-8]!
   19ce0:	str	lr, [sp, #4]
   19ce4:	add	fp, sp, #4
   19ce8:	movw	r3, #53588	; 0xd154
   19cec:	movt	r3, #2
   19cf0:	ldr	r3, [r3]
   19cf4:	mov	r1, r3
   19cf8:	mov	r0, #10
   19cfc:	bl	10d78 <fputc_unlocked@plt>
   19d00:	movw	r0, #52028	; 0xcb3c
   19d04:	movt	r0, #1
   19d08:	bl	10e50 <gettext@plt>
   19d0c:	mov	r3, r0
   19d10:	movw	r1, #52048	; 0xcb50
   19d14:	movt	r1, #1
   19d18:	mov	r0, r3
   19d1c:	bl	10d0c <printf@plt>
   19d20:	movw	r0, #52072	; 0xcb68
   19d24:	movt	r0, #1
   19d28:	bl	10e50 <gettext@plt>
   19d2c:	mov	r3, r0
   19d30:	movw	r2, #52092	; 0xcb7c
   19d34:	movt	r2, #1
   19d38:	movw	r1, #52132	; 0xcba4
   19d3c:	movt	r1, #1
   19d40:	mov	r0, r3
   19d44:	bl	10d0c <printf@plt>
   19d48:	movw	r0, #52148	; 0xcbb4
   19d4c:	movt	r0, #1
   19d50:	bl	10e50 <gettext@plt>
   19d54:	mov	r3, r0
   19d58:	movw	r1, #52188	; 0xcbdc
   19d5c:	movt	r1, #1
   19d60:	mov	r0, r3
   19d64:	bl	10d0c <printf@plt>
   19d68:	nop	{0}
   19d6c:	sub	sp, fp, #4
   19d70:	ldr	fp, [sp]
   19d74:	add	sp, sp, #4
   19d78:	pop	{pc}		; (ldr pc, [sp], #4)
   19d7c:	str	fp, [sp, #-8]!
   19d80:	str	lr, [sp, #4]
   19d84:	add	fp, sp, #4
   19d88:	sub	sp, sp, #16
   19d8c:	str	r0, [fp, #-8]
   19d90:	str	r1, [fp, #-12]
   19d94:	str	r2, [fp, #-16]
   19d98:	ldr	r2, [fp, #-16]
   19d9c:	ldr	r1, [fp, #-12]
   19da0:	ldr	r0, [fp, #-8]
   19da4:	bl	19f60 <__assert_fail@plt+0x9014>
   19da8:	mov	r3, r0
   19dac:	mov	r0, r3
   19db0:	sub	sp, fp, #4
   19db4:	ldr	fp, [sp]
   19db8:	add	sp, sp, #4
   19dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   19dc0:	str	fp, [sp, #-8]!
   19dc4:	str	lr, [sp, #4]
   19dc8:	add	fp, sp, #4
   19dcc:	sub	sp, sp, #8
   19dd0:	str	r0, [fp, #-8]
   19dd4:	ldr	r3, [fp, #-8]
   19dd8:	cmp	r3, #0
   19ddc:	bne	19de4 <__assert_fail@plt+0x8e98>
   19de0:	bl	1a670 <__assert_fail@plt+0x9724>
   19de4:	ldr	r3, [fp, #-8]
   19de8:	mov	r0, r3
   19dec:	sub	sp, fp, #4
   19df0:	ldr	fp, [sp]
   19df4:	add	sp, sp, #4
   19df8:	pop	{pc}		; (ldr pc, [sp], #4)
   19dfc:	str	fp, [sp, #-8]!
   19e00:	str	lr, [sp, #4]
   19e04:	add	fp, sp, #4
   19e08:	sub	sp, sp, #8
   19e0c:	str	r0, [fp, #-8]
   19e10:	ldr	r0, [fp, #-8]
   19e14:	bl	1b054 <__assert_fail@plt+0xa108>
   19e18:	mov	r3, r0
   19e1c:	mov	r0, r3
   19e20:	bl	19dc0 <__assert_fail@plt+0x8e74>
   19e24:	mov	r3, r0
   19e28:	mov	r0, r3
   19e2c:	sub	sp, fp, #4
   19e30:	ldr	fp, [sp]
   19e34:	add	sp, sp, #4
   19e38:	pop	{pc}		; (ldr pc, [sp], #4)
   19e3c:	str	fp, [sp, #-8]!
   19e40:	str	lr, [sp, #4]
   19e44:	add	fp, sp, #4
   19e48:	sub	sp, sp, #8
   19e4c:	str	r0, [fp, #-8]
   19e50:	ldr	r0, [fp, #-8]
   19e54:	bl	16a28 <__assert_fail@plt+0x5adc>
   19e58:	mov	r3, r0
   19e5c:	mov	r0, r3
   19e60:	bl	19dc0 <__assert_fail@plt+0x8e74>
   19e64:	mov	r3, r0
   19e68:	mov	r0, r3
   19e6c:	sub	sp, fp, #4
   19e70:	ldr	fp, [sp]
   19e74:	add	sp, sp, #4
   19e78:	pop	{pc}		; (ldr pc, [sp], #4)
   19e7c:	str	fp, [sp, #-8]!
   19e80:	str	lr, [sp, #4]
   19e84:	add	fp, sp, #4
   19e88:	sub	sp, sp, #8
   19e8c:	str	r0, [fp, #-8]
   19e90:	ldr	r0, [fp, #-8]
   19e94:	bl	19dfc <__assert_fail@plt+0x8eb0>
   19e98:	mov	r3, r0
   19e9c:	mov	r0, r3
   19ea0:	sub	sp, fp, #4
   19ea4:	ldr	fp, [sp]
   19ea8:	add	sp, sp, #4
   19eac:	pop	{pc}		; (ldr pc, [sp], #4)
   19eb0:	str	fp, [sp, #-8]!
   19eb4:	str	lr, [sp, #4]
   19eb8:	add	fp, sp, #4
   19ebc:	sub	sp, sp, #16
   19ec0:	str	r0, [fp, #-16]
   19ec4:	str	r1, [fp, #-20]	; 0xffffffec
   19ec8:	ldr	r1, [fp, #-20]	; 0xffffffec
   19ecc:	ldr	r0, [fp, #-16]
   19ed0:	bl	1b0e4 <__assert_fail@plt+0xa198>
   19ed4:	str	r0, [fp, #-8]
   19ed8:	ldr	r3, [fp, #-8]
   19edc:	cmp	r3, #0
   19ee0:	bne	19f00 <__assert_fail@plt+0x8fb4>
   19ee4:	ldr	r3, [fp, #-16]
   19ee8:	cmp	r3, #0
   19eec:	beq	19efc <__assert_fail@plt+0x8fb0>
   19ef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ef4:	cmp	r3, #0
   19ef8:	beq	19f00 <__assert_fail@plt+0x8fb4>
   19efc:	bl	1a670 <__assert_fail@plt+0x9724>
   19f00:	ldr	r3, [fp, #-8]
   19f04:	mov	r0, r3
   19f08:	sub	sp, fp, #4
   19f0c:	ldr	fp, [sp]
   19f10:	add	sp, sp, #4
   19f14:	pop	{pc}		; (ldr pc, [sp], #4)
   19f18:	str	fp, [sp, #-8]!
   19f1c:	str	lr, [sp, #4]
   19f20:	add	fp, sp, #4
   19f24:	sub	sp, sp, #8
   19f28:	str	r0, [fp, #-8]
   19f2c:	str	r1, [fp, #-12]
   19f30:	ldr	r1, [fp, #-12]
   19f34:	ldr	r0, [fp, #-8]
   19f38:	bl	16a60 <__assert_fail@plt+0x5b14>
   19f3c:	mov	r3, r0
   19f40:	mov	r0, r3
   19f44:	bl	19dc0 <__assert_fail@plt+0x8e74>
   19f48:	mov	r3, r0
   19f4c:	mov	r0, r3
   19f50:	sub	sp, fp, #4
   19f54:	ldr	fp, [sp]
   19f58:	add	sp, sp, #4
   19f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f60:	str	fp, [sp, #-8]!
   19f64:	str	lr, [sp, #4]
   19f68:	add	fp, sp, #4
   19f6c:	sub	sp, sp, #24
   19f70:	str	r0, [fp, #-16]
   19f74:	str	r1, [fp, #-20]	; 0xffffffec
   19f78:	str	r2, [fp, #-24]	; 0xffffffe8
   19f7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19f80:	ldr	r1, [fp, #-20]	; 0xffffffec
   19f84:	ldr	r0, [fp, #-16]
   19f88:	bl	19508 <__assert_fail@plt+0x85bc>
   19f8c:	str	r0, [fp, #-8]
   19f90:	ldr	r3, [fp, #-8]
   19f94:	cmp	r3, #0
   19f98:	bne	19fc4 <__assert_fail@plt+0x9078>
   19f9c:	ldr	r3, [fp, #-16]
   19fa0:	cmp	r3, #0
   19fa4:	beq	19fc0 <__assert_fail@plt+0x9074>
   19fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19fac:	cmp	r3, #0
   19fb0:	beq	19fc4 <__assert_fail@plt+0x9078>
   19fb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19fb8:	cmp	r3, #0
   19fbc:	beq	19fc4 <__assert_fail@plt+0x9078>
   19fc0:	bl	1a670 <__assert_fail@plt+0x9724>
   19fc4:	ldr	r3, [fp, #-8]
   19fc8:	mov	r0, r3
   19fcc:	sub	sp, fp, #4
   19fd0:	ldr	fp, [sp]
   19fd4:	add	sp, sp, #4
   19fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   19fdc:	str	fp, [sp, #-8]!
   19fe0:	str	lr, [sp, #4]
   19fe4:	add	fp, sp, #4
   19fe8:	sub	sp, sp, #16
   19fec:	str	r0, [fp, #-8]
   19ff0:	str	r1, [fp, #-12]
   19ff4:	str	r2, [fp, #-16]
   19ff8:	ldr	r2, [fp, #-16]
   19ffc:	ldr	r1, [fp, #-12]
   1a000:	ldr	r0, [fp, #-8]
   1a004:	bl	16b00 <__assert_fail@plt+0x5bb4>
   1a008:	mov	r3, r0
   1a00c:	mov	r0, r3
   1a010:	bl	19dc0 <__assert_fail@plt+0x8e74>
   1a014:	mov	r3, r0
   1a018:	mov	r0, r3
   1a01c:	sub	sp, fp, #4
   1a020:	ldr	fp, [sp]
   1a024:	add	sp, sp, #4
   1a028:	pop	{pc}		; (ldr pc, [sp], #4)
   1a02c:	str	fp, [sp, #-8]!
   1a030:	str	lr, [sp, #4]
   1a034:	add	fp, sp, #4
   1a038:	sub	sp, sp, #8
   1a03c:	str	r0, [fp, #-8]
   1a040:	str	r1, [fp, #-12]
   1a044:	ldr	r2, [fp, #-12]
   1a048:	ldr	r1, [fp, #-8]
   1a04c:	mov	r0, #0
   1a050:	bl	19f60 <__assert_fail@plt+0x9014>
   1a054:	mov	r3, r0
   1a058:	mov	r0, r3
   1a05c:	sub	sp, fp, #4
   1a060:	ldr	fp, [sp]
   1a064:	add	sp, sp, #4
   1a068:	pop	{pc}		; (ldr pc, [sp], #4)
   1a06c:	str	fp, [sp, #-8]!
   1a070:	str	lr, [sp, #4]
   1a074:	add	fp, sp, #4
   1a078:	sub	sp, sp, #8
   1a07c:	str	r0, [fp, #-8]
   1a080:	str	r1, [fp, #-12]
   1a084:	ldr	r2, [fp, #-12]
   1a088:	ldr	r1, [fp, #-8]
   1a08c:	mov	r0, #0
   1a090:	bl	19fdc <__assert_fail@plt+0x9090>
   1a094:	mov	r3, r0
   1a098:	mov	r0, r3
   1a09c:	sub	sp, fp, #4
   1a0a0:	ldr	fp, [sp]
   1a0a4:	add	sp, sp, #4
   1a0a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0ac:	str	fp, [sp, #-8]!
   1a0b0:	str	lr, [sp, #4]
   1a0b4:	add	fp, sp, #4
   1a0b8:	sub	sp, sp, #8
   1a0bc:	str	r0, [fp, #-8]
   1a0c0:	str	r1, [fp, #-12]
   1a0c4:	mov	r2, #1
   1a0c8:	ldr	r1, [fp, #-12]
   1a0cc:	ldr	r0, [fp, #-8]
   1a0d0:	bl	1a0ec <__assert_fail@plt+0x91a0>
   1a0d4:	mov	r3, r0
   1a0d8:	mov	r0, r3
   1a0dc:	sub	sp, fp, #4
   1a0e0:	ldr	fp, [sp]
   1a0e4:	add	sp, sp, #4
   1a0e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0ec:	str	fp, [sp, #-8]!
   1a0f0:	str	lr, [sp, #4]
   1a0f4:	add	fp, sp, #4
   1a0f8:	sub	sp, sp, #24
   1a0fc:	str	r0, [fp, #-16]
   1a100:	str	r1, [fp, #-20]	; 0xffffffec
   1a104:	str	r2, [fp, #-24]	; 0xffffffe8
   1a108:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a10c:	ldr	r3, [r3]
   1a110:	str	r3, [fp, #-8]
   1a114:	ldr	r3, [fp, #-16]
   1a118:	cmp	r3, #0
   1a11c:	bne	1a164 <__assert_fail@plt+0x9218>
   1a120:	ldr	r3, [fp, #-8]
   1a124:	cmp	r3, #0
   1a128:	bne	1a1a0 <__assert_fail@plt+0x9254>
   1a12c:	mov	r2, #64	; 0x40
   1a130:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a134:	udiv	r3, r2, r3
   1a138:	str	r3, [fp, #-8]
   1a13c:	ldr	r3, [fp, #-8]
   1a140:	cmp	r3, #0
   1a144:	moveq	r3, #1
   1a148:	movne	r3, #0
   1a14c:	uxtb	r3, r3
   1a150:	mov	r2, r3
   1a154:	ldr	r3, [fp, #-8]
   1a158:	add	r3, r2, r3
   1a15c:	str	r3, [fp, #-8]
   1a160:	b	1a1a0 <__assert_fail@plt+0x9254>
   1a164:	ldr	r2, [fp, #-8]
   1a168:	ldr	r3, [fp, #-8]
   1a16c:	lsr	r3, r3, #1
   1a170:	add	r3, r3, #1
   1a174:	mov	r1, #0
   1a178:	adds	r3, r2, r3
   1a17c:	bcc	1a184 <__assert_fail@plt+0x9238>
   1a180:	mov	r1, #1
   1a184:	str	r3, [fp, #-8]
   1a188:	mov	r3, r1
   1a18c:	and	r3, r3, #1
   1a190:	uxtb	r3, r3
   1a194:	cmp	r3, #0
   1a198:	beq	1a1a0 <__assert_fail@plt+0x9254>
   1a19c:	bl	1a670 <__assert_fail@plt+0x9724>
   1a1a0:	ldr	r3, [fp, #-8]
   1a1a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a1a8:	mov	r1, r3
   1a1ac:	ldr	r0, [fp, #-16]
   1a1b0:	bl	19f60 <__assert_fail@plt+0x9014>
   1a1b4:	str	r0, [fp, #-16]
   1a1b8:	ldr	r2, [fp, #-8]
   1a1bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a1c0:	str	r2, [r3]
   1a1c4:	ldr	r3, [fp, #-16]
   1a1c8:	mov	r0, r3
   1a1cc:	sub	sp, fp, #4
   1a1d0:	ldr	fp, [sp]
   1a1d4:	add	sp, sp, #4
   1a1d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1dc:	str	fp, [sp, #-8]!
   1a1e0:	str	lr, [sp, #4]
   1a1e4:	add	fp, sp, #4
   1a1e8:	sub	sp, sp, #32
   1a1ec:	str	r0, [fp, #-24]	; 0xffffffe8
   1a1f0:	str	r1, [fp, #-28]	; 0xffffffe4
   1a1f4:	str	r2, [fp, #-32]	; 0xffffffe0
   1a1f8:	str	r3, [fp, #-36]	; 0xffffffdc
   1a1fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a200:	ldr	r3, [r3]
   1a204:	str	r3, [fp, #-8]
   1a208:	ldr	r3, [fp, #-8]
   1a20c:	asr	r3, r3, #1
   1a210:	mov	r1, #0
   1a214:	ldr	r2, [fp, #-8]
   1a218:	adds	r3, r2, r3
   1a21c:	bvc	1a224 <__assert_fail@plt+0x92d8>
   1a220:	mov	r1, #1
   1a224:	str	r3, [fp, #-16]
   1a228:	mov	r3, r1
   1a22c:	and	r3, r3, #1
   1a230:	uxtb	r3, r3
   1a234:	cmp	r3, #0
   1a238:	beq	1a244 <__assert_fail@plt+0x92f8>
   1a23c:	mvn	r3, #-2147483648	; 0x80000000
   1a240:	str	r3, [fp, #-16]
   1a244:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a248:	cmp	r3, #0
   1a24c:	blt	1a268 <__assert_fail@plt+0x931c>
   1a250:	ldr	r3, [fp, #-16]
   1a254:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a258:	cmp	r2, r3
   1a25c:	bge	1a268 <__assert_fail@plt+0x931c>
   1a260:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a264:	str	r3, [fp, #-16]
   1a268:	ldr	r2, [fp, #-16]
   1a26c:	mov	lr, #0
   1a270:	ldr	r3, [fp, #4]
   1a274:	smull	r2, r3, r2, r3
   1a278:	mov	r0, #0
   1a27c:	mov	r1, #0
   1a280:	mov	r0, r3
   1a284:	asr	r1, r3, #31
   1a288:	asr	ip, r2, #31
   1a28c:	cmp	ip, r0
   1a290:	beq	1a298 <__assert_fail@plt+0x934c>
   1a294:	mov	lr, #1
   1a298:	mov	r3, r2
   1a29c:	str	r3, [fp, #-20]	; 0xffffffec
   1a2a0:	mov	r3, lr
   1a2a4:	and	r3, r3, #1
   1a2a8:	uxtb	r3, r3
   1a2ac:	cmp	r3, #0
   1a2b0:	beq	1a2bc <__assert_fail@plt+0x9370>
   1a2b4:	mvn	r3, #-2147483648	; 0x80000000
   1a2b8:	b	1a2d4 <__assert_fail@plt+0x9388>
   1a2bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2c0:	cmp	r3, #63	; 0x3f
   1a2c4:	bgt	1a2d0 <__assert_fail@plt+0x9384>
   1a2c8:	mov	r3, #64	; 0x40
   1a2cc:	b	1a2d4 <__assert_fail@plt+0x9388>
   1a2d0:	mov	r3, #0
   1a2d4:	str	r3, [fp, #-12]
   1a2d8:	ldr	r3, [fp, #-12]
   1a2dc:	cmp	r3, #0
   1a2e0:	beq	1a318 <__assert_fail@plt+0x93cc>
   1a2e4:	ldr	r2, [fp, #-12]
   1a2e8:	ldr	r3, [fp, #4]
   1a2ec:	sdiv	r3, r2, r3
   1a2f0:	str	r3, [fp, #-16]
   1a2f4:	ldr	r3, [fp, #-12]
   1a2f8:	ldr	r2, [fp, #4]
   1a2fc:	sdiv	r2, r3, r2
   1a300:	ldr	r1, [fp, #4]
   1a304:	mul	r2, r1, r2
   1a308:	sub	r3, r3, r2
   1a30c:	ldr	r2, [fp, #-12]
   1a310:	sub	r3, r2, r3
   1a314:	str	r3, [fp, #-20]	; 0xffffffec
   1a318:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a31c:	cmp	r3, #0
   1a320:	bne	1a330 <__assert_fail@plt+0x93e4>
   1a324:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a328:	mov	r2, #0
   1a32c:	str	r2, [r3]
   1a330:	ldr	r2, [fp, #-16]
   1a334:	ldr	r3, [fp, #-8]
   1a338:	sub	r3, r2, r3
   1a33c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a340:	cmp	r2, r3
   1a344:	ble	1a3e4 <__assert_fail@plt+0x9498>
   1a348:	mov	r1, #0
   1a34c:	ldr	r2, [fp, #-8]
   1a350:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a354:	adds	r3, r2, r3
   1a358:	bvc	1a360 <__assert_fail@plt+0x9414>
   1a35c:	mov	r1, #1
   1a360:	str	r3, [fp, #-16]
   1a364:	mov	r3, r1
   1a368:	and	r3, r3, #1
   1a36c:	uxtb	r3, r3
   1a370:	cmp	r3, #0
   1a374:	bne	1a3e0 <__assert_fail@plt+0x9494>
   1a378:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a37c:	cmp	r3, #0
   1a380:	blt	1a394 <__assert_fail@plt+0x9448>
   1a384:	ldr	r3, [fp, #-16]
   1a388:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a38c:	cmp	r2, r3
   1a390:	blt	1a3e0 <__assert_fail@plt+0x9494>
   1a394:	ldr	r2, [fp, #-16]
   1a398:	mov	lr, #0
   1a39c:	ldr	r3, [fp, #4]
   1a3a0:	smull	r2, r3, r2, r3
   1a3a4:	mov	r0, #0
   1a3a8:	mov	r1, #0
   1a3ac:	mov	r0, r3
   1a3b0:	asr	r1, r3, #31
   1a3b4:	asr	ip, r2, #31
   1a3b8:	cmp	ip, r0
   1a3bc:	beq	1a3c4 <__assert_fail@plt+0x9478>
   1a3c0:	mov	lr, #1
   1a3c4:	mov	r3, r2
   1a3c8:	str	r3, [fp, #-20]	; 0xffffffec
   1a3cc:	mov	r3, lr
   1a3d0:	and	r3, r3, #1
   1a3d4:	uxtb	r3, r3
   1a3d8:	cmp	r3, #0
   1a3dc:	beq	1a3e4 <__assert_fail@plt+0x9498>
   1a3e0:	bl	1a670 <__assert_fail@plt+0x9724>
   1a3e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a3e8:	mov	r1, r3
   1a3ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a3f0:	bl	19eb0 <__assert_fail@plt+0x8f64>
   1a3f4:	str	r0, [fp, #-24]	; 0xffffffe8
   1a3f8:	ldr	r2, [fp, #-16]
   1a3fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a400:	str	r2, [r3]
   1a404:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a408:	mov	r0, r3
   1a40c:	sub	sp, fp, #4
   1a410:	ldr	fp, [sp]
   1a414:	add	sp, sp, #4
   1a418:	pop	{pc}		; (ldr pc, [sp], #4)
   1a41c:	str	fp, [sp, #-8]!
   1a420:	str	lr, [sp, #4]
   1a424:	add	fp, sp, #4
   1a428:	sub	sp, sp, #8
   1a42c:	str	r0, [fp, #-8]
   1a430:	mov	r1, #1
   1a434:	ldr	r0, [fp, #-8]
   1a438:	bl	1a48c <__assert_fail@plt+0x9540>
   1a43c:	mov	r3, r0
   1a440:	mov	r0, r3
   1a444:	sub	sp, fp, #4
   1a448:	ldr	fp, [sp]
   1a44c:	add	sp, sp, #4
   1a450:	pop	{pc}		; (ldr pc, [sp], #4)
   1a454:	str	fp, [sp, #-8]!
   1a458:	str	lr, [sp, #4]
   1a45c:	add	fp, sp, #4
   1a460:	sub	sp, sp, #8
   1a464:	str	r0, [fp, #-8]
   1a468:	mov	r1, #1
   1a46c:	ldr	r0, [fp, #-8]
   1a470:	bl	1a4d4 <__assert_fail@plt+0x9588>
   1a474:	mov	r3, r0
   1a478:	mov	r0, r3
   1a47c:	sub	sp, fp, #4
   1a480:	ldr	fp, [sp]
   1a484:	add	sp, sp, #4
   1a488:	pop	{pc}		; (ldr pc, [sp], #4)
   1a48c:	str	fp, [sp, #-8]!
   1a490:	str	lr, [sp, #4]
   1a494:	add	fp, sp, #4
   1a498:	sub	sp, sp, #8
   1a49c:	str	r0, [fp, #-8]
   1a4a0:	str	r1, [fp, #-12]
   1a4a4:	ldr	r1, [fp, #-12]
   1a4a8:	ldr	r0, [fp, #-8]
   1a4ac:	bl	1af84 <__assert_fail@plt+0xa038>
   1a4b0:	mov	r3, r0
   1a4b4:	mov	r0, r3
   1a4b8:	bl	19dc0 <__assert_fail@plt+0x8e74>
   1a4bc:	mov	r3, r0
   1a4c0:	mov	r0, r3
   1a4c4:	sub	sp, fp, #4
   1a4c8:	ldr	fp, [sp]
   1a4cc:	add	sp, sp, #4
   1a4d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4d4:	str	fp, [sp, #-8]!
   1a4d8:	str	lr, [sp, #4]
   1a4dc:	add	fp, sp, #4
   1a4e0:	sub	sp, sp, #8
   1a4e4:	str	r0, [fp, #-8]
   1a4e8:	str	r1, [fp, #-12]
   1a4ec:	ldr	r1, [fp, #-12]
   1a4f0:	ldr	r0, [fp, #-8]
   1a4f4:	bl	16abc <__assert_fail@plt+0x5b70>
   1a4f8:	mov	r3, r0
   1a4fc:	mov	r0, r3
   1a500:	bl	19dc0 <__assert_fail@plt+0x8e74>
   1a504:	mov	r3, r0
   1a508:	mov	r0, r3
   1a50c:	sub	sp, fp, #4
   1a510:	ldr	fp, [sp]
   1a514:	add	sp, sp, #4
   1a518:	pop	{pc}		; (ldr pc, [sp], #4)
   1a51c:	str	fp, [sp, #-8]!
   1a520:	str	lr, [sp, #4]
   1a524:	add	fp, sp, #4
   1a528:	sub	sp, sp, #8
   1a52c:	str	r0, [fp, #-8]
   1a530:	str	r1, [fp, #-12]
   1a534:	ldr	r0, [fp, #-12]
   1a538:	bl	19dfc <__assert_fail@plt+0x8eb0>
   1a53c:	mov	r3, r0
   1a540:	ldr	r2, [fp, #-12]
   1a544:	ldr	r1, [fp, #-8]
   1a548:	mov	r0, r3
   1a54c:	bl	10d48 <memcpy@plt>
   1a550:	mov	r3, r0
   1a554:	mov	r0, r3
   1a558:	sub	sp, fp, #4
   1a55c:	ldr	fp, [sp]
   1a560:	add	sp, sp, #4
   1a564:	pop	{pc}		; (ldr pc, [sp], #4)
   1a568:	str	fp, [sp, #-8]!
   1a56c:	str	lr, [sp, #4]
   1a570:	add	fp, sp, #4
   1a574:	sub	sp, sp, #8
   1a578:	str	r0, [fp, #-8]
   1a57c:	str	r1, [fp, #-12]
   1a580:	ldr	r0, [fp, #-12]
   1a584:	bl	19e3c <__assert_fail@plt+0x8ef0>
   1a588:	mov	r3, r0
   1a58c:	mov	r0, r3
   1a590:	ldr	r3, [fp, #-12]
   1a594:	mov	r2, r3
   1a598:	ldr	r1, [fp, #-8]
   1a59c:	bl	10d48 <memcpy@plt>
   1a5a0:	mov	r3, r0
   1a5a4:	mov	r0, r3
   1a5a8:	sub	sp, fp, #4
   1a5ac:	ldr	fp, [sp]
   1a5b0:	add	sp, sp, #4
   1a5b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5b8:	str	fp, [sp, #-8]!
   1a5bc:	str	lr, [sp, #4]
   1a5c0:	add	fp, sp, #4
   1a5c4:	sub	sp, sp, #16
   1a5c8:	str	r0, [fp, #-16]
   1a5cc:	str	r1, [fp, #-20]	; 0xffffffec
   1a5d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a5d4:	add	r3, r3, #1
   1a5d8:	mov	r0, r3
   1a5dc:	bl	19e3c <__assert_fail@plt+0x8ef0>
   1a5e0:	mov	r3, r0
   1a5e4:	str	r3, [fp, #-8]
   1a5e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a5ec:	ldr	r2, [fp, #-8]
   1a5f0:	add	r3, r2, r3
   1a5f4:	mov	r2, #0
   1a5f8:	strb	r2, [r3]
   1a5fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a600:	mov	r2, r3
   1a604:	ldr	r1, [fp, #-16]
   1a608:	ldr	r0, [fp, #-8]
   1a60c:	bl	10d48 <memcpy@plt>
   1a610:	mov	r3, r0
   1a614:	mov	r0, r3
   1a618:	sub	sp, fp, #4
   1a61c:	ldr	fp, [sp]
   1a620:	add	sp, sp, #4
   1a624:	pop	{pc}		; (ldr pc, [sp], #4)
   1a628:	str	fp, [sp, #-8]!
   1a62c:	str	lr, [sp, #4]
   1a630:	add	fp, sp, #4
   1a634:	sub	sp, sp, #8
   1a638:	str	r0, [fp, #-8]
   1a63c:	ldr	r0, [fp, #-8]
   1a640:	bl	10e5c <strlen@plt>
   1a644:	mov	r3, r0
   1a648:	add	r3, r3, #1
   1a64c:	mov	r1, r3
   1a650:	ldr	r0, [fp, #-8]
   1a654:	bl	1a51c <__assert_fail@plt+0x95d0>
   1a658:	mov	r3, r0
   1a65c:	mov	r0, r3
   1a660:	sub	sp, fp, #4
   1a664:	ldr	fp, [sp]
   1a668:	add	sp, sp, #4
   1a66c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a670:	strd	r4, [sp, #-16]!
   1a674:	str	fp, [sp, #8]
   1a678:	str	lr, [sp, #12]
   1a67c:	add	fp, sp, #12
   1a680:	movw	r3, #53492	; 0xd0f4
   1a684:	movt	r3, #2
   1a688:	ldr	r4, [r3]
   1a68c:	movw	r0, #52268	; 0xcc2c
   1a690:	movt	r0, #1
   1a694:	bl	10e50 <gettext@plt>
   1a698:	mov	r3, r0
   1a69c:	movw	r2, #52288	; 0xcc40
   1a6a0:	movt	r2, #1
   1a6a4:	mov	r1, #0
   1a6a8:	mov	r0, r4
   1a6ac:	bl	10df0 <error@plt>
   1a6b0:	bl	10f34 <abort@plt>
   1a6b4:	push	{fp}		; (str fp, [sp, #-4]!)
   1a6b8:	add	fp, sp, #0
   1a6bc:	nop	{0}
   1a6c0:	add	sp, fp, #0
   1a6c4:	pop	{fp}		; (ldr fp, [sp], #4)
   1a6c8:	bx	lr
   1a6cc:	str	fp, [sp, #-8]!
   1a6d0:	str	lr, [sp, #4]
   1a6d4:	add	fp, sp, #4
   1a6d8:	sub	sp, sp, #8
   1a6dc:	str	r0, [fp, #-8]
   1a6e0:	str	r1, [fp, #-12]
   1a6e4:	ldr	r1, [fp, #-12]
   1a6e8:	ldr	r0, [fp, #-8]
   1a6ec:	bl	1b1c4 <__assert_fail@plt+0xa278>
   1a6f0:	mov	r3, r0
   1a6f4:	cmp	r3, #0
   1a6f8:	bge	1a700 <__assert_fail@plt+0x97b4>
   1a6fc:	bl	1a6b4 <__assert_fail@plt+0x9768>
   1a700:	nop	{0}
   1a704:	sub	sp, fp, #4
   1a708:	ldr	fp, [sp]
   1a70c:	add	sp, sp, #4
   1a710:	pop	{pc}		; (ldr pc, [sp], #4)
   1a714:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a718:	strd	r6, [sp, #8]
   1a71c:	strd	r8, [sp, #16]
   1a720:	str	fp, [sp, #24]
   1a724:	str	lr, [sp, #28]
   1a728:	add	fp, sp, #28
   1a72c:	sub	sp, sp, #72	; 0x48
   1a730:	str	r0, [fp, #-40]	; 0xffffffd8
   1a734:	str	r1, [fp, #-44]	; 0xffffffd4
   1a738:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a73c:	ldrd	r6, [r3]
   1a740:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a744:	mov	r8, r3
   1a748:	asr	r9, r8, #31
   1a74c:	mov	r2, #0
   1a750:	mov	r3, #0
   1a754:	strd	r2, [fp, #-60]	; 0xffffffc4
   1a758:	mov	r0, #0
   1a75c:	mov	r1, #0
   1a760:	mov	r0, r7
   1a764:	asr	r1, r7, #31
   1a768:	asr	ip, r6, #31
   1a76c:	mov	r2, #0
   1a770:	mov	r3, #0
   1a774:	mov	r2, r9
   1a778:	asr	r3, r9, #31
   1a77c:	cmp	ip, r0
   1a780:	bne	1a790 <__assert_fail@plt+0x9844>
   1a784:	smull	r2, r3, r6, r8
   1a788:	strd	r2, [fp, #-52]	; 0xffffffcc
   1a78c:	b	1a8a4 <__assert_fail@plt+0x9958>
   1a790:	strd	r6, [fp, #-92]	; 0xffffffa4
   1a794:	mov	ip, r0
   1a798:	mov	lr, r8
   1a79c:	umull	r2, r3, r6, r8
   1a7a0:	strd	r2, [fp, #-100]	; 0xffffff9c
   1a7a4:	umull	r2, r3, lr, ip
   1a7a8:	mov	r0, r2
   1a7ac:	mov	r1, r3
   1a7b0:	cmp	ip, #0
   1a7b4:	bge	1a7e4 <__assert_fail@plt+0x9898>
   1a7b8:	mov	r2, lr
   1a7bc:	mov	r3, #0
   1a7c0:	mov	r4, #0
   1a7c4:	mov	r5, #0
   1a7c8:	mov	r5, r2
   1a7cc:	mov	r4, #0
   1a7d0:	subs	r3, r0, r4
   1a7d4:	str	r3, [fp, #-68]	; 0xffffffbc
   1a7d8:	sbc	r3, r1, r5
   1a7dc:	str	r3, [fp, #-64]	; 0xffffffc0
   1a7e0:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1a7e4:	cmp	lr, #0
   1a7e8:	bge	1a808 <__assert_fail@plt+0x98bc>
   1a7ec:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   1a7f0:	mov	ip, r2
   1a7f4:	subs	ip, r0, ip
   1a7f8:	str	ip, [fp, #-76]	; 0xffffffb4
   1a7fc:	sbc	r3, r1, r3
   1a800:	str	r3, [fp, #-72]	; 0xffffffb8
   1a804:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1a808:	mov	r2, #0
   1a80c:	mov	r3, #0
   1a810:	ldrd	r4, [fp, #-100]	; 0xffffff9c
   1a814:	mov	ip, r5
   1a818:	mov	r2, ip
   1a81c:	mov	r3, #0
   1a820:	adds	ip, r0, r2
   1a824:	str	ip, [fp, #-84]	; 0xffffffac
   1a828:	adc	r3, r1, r3
   1a82c:	str	r3, [fp, #-80]	; 0xffffffb0
   1a830:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1a834:	mov	r2, #0
   1a838:	mov	r3, #0
   1a83c:	mov	r2, r1
   1a840:	asr	r3, r1, #31
   1a844:	asr	ip, r0, #31
   1a848:	cmp	ip, r2
   1a84c:	bne	1a87c <__assert_fail@plt+0x9930>
   1a850:	mov	r2, #0
   1a854:	mov	r3, #0
   1a858:	mov	r3, r0
   1a85c:	mov	r2, #0
   1a860:	mov	r0, r4
   1a864:	mov	r1, #0
   1a868:	orr	ip, r2, r0
   1a86c:	str	ip, [fp, #-52]	; 0xffffffcc
   1a870:	orr	r3, r3, r1
   1a874:	str	r3, [fp, #-48]	; 0xffffffd0
   1a878:	b	1a8a4 <__assert_fail@plt+0x9958>
   1a87c:	mul	r2, r8, r7
   1a880:	mul	r3, r6, r9
   1a884:	add	r1, r2, r3
   1a888:	umull	r2, r3, r6, r8
   1a88c:	add	r1, r1, r3
   1a890:	mov	r3, r1
   1a894:	strd	r2, [fp, #-52]	; 0xffffffcc
   1a898:	mov	r2, #1
   1a89c:	mov	r3, #0
   1a8a0:	strd	r2, [fp, #-60]	; 0xffffffc4
   1a8a4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1a8a8:	strd	r2, [fp, #-36]	; 0xffffffdc
   1a8ac:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1a8b0:	mov	r3, r2
   1a8b4:	and	r3, r3, #1
   1a8b8:	uxtb	r3, r3
   1a8bc:	cmp	r3, #0
   1a8c0:	beq	1a8fc <__assert_fail@plt+0x99b0>
   1a8c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a8c8:	ldrd	r2, [r3]
   1a8cc:	cmp	r2, #0
   1a8d0:	sbcs	r3, r3, #0
   1a8d4:	bge	1a8e4 <__assert_fail@plt+0x9998>
   1a8d8:	mov	r2, #0
   1a8dc:	mov	r3, #-2147483648	; 0x80000000
   1a8e0:	b	1a8ec <__assert_fail@plt+0x99a0>
   1a8e4:	mvn	r2, #0
   1a8e8:	mvn	r3, #-2147483648	; 0x80000000
   1a8ec:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1a8f0:	strd	r2, [r1]
   1a8f4:	mov	r3, #1
   1a8f8:	b	1a90c <__assert_fail@plt+0x99c0>
   1a8fc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1a900:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1a904:	strd	r2, [r1]
   1a908:	mov	r3, #0
   1a90c:	mov	r0, r3
   1a910:	sub	sp, fp, #28
   1a914:	ldrd	r4, [sp]
   1a918:	ldrd	r6, [sp, #8]
   1a91c:	ldrd	r8, [sp, #16]
   1a920:	ldr	fp, [sp, #24]
   1a924:	add	sp, sp, #28
   1a928:	pop	{pc}		; (ldr pc, [sp], #4)
   1a92c:	str	fp, [sp, #-8]!
   1a930:	str	lr, [sp, #4]
   1a934:	add	fp, sp, #4
   1a938:	sub	sp, sp, #24
   1a93c:	str	r0, [fp, #-16]
   1a940:	str	r1, [fp, #-20]	; 0xffffffec
   1a944:	str	r2, [fp, #-24]	; 0xffffffe8
   1a948:	mov	r3, #0
   1a94c:	str	r3, [fp, #-8]
   1a950:	b	1a970 <__assert_fail@plt+0x9a24>
   1a954:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a958:	ldr	r0, [fp, #-16]
   1a95c:	bl	1a714 <__assert_fail@plt+0x97c8>
   1a960:	mov	r2, r0
   1a964:	ldr	r3, [fp, #-8]
   1a968:	orr	r3, r3, r2
   1a96c:	str	r3, [fp, #-8]
   1a970:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a974:	sub	r2, r3, #1
   1a978:	str	r2, [fp, #-24]	; 0xffffffe8
   1a97c:	cmp	r3, #0
   1a980:	bne	1a954 <__assert_fail@plt+0x9a08>
   1a984:	ldr	r3, [fp, #-8]
   1a988:	mov	r0, r3
   1a98c:	sub	sp, fp, #4
   1a990:	ldr	fp, [sp]
   1a994:	add	sp, sp, #4
   1a998:	pop	{pc}		; (ldr pc, [sp], #4)
   1a99c:	str	fp, [sp, #-8]!
   1a9a0:	str	lr, [sp, #4]
   1a9a4:	add	fp, sp, #4
   1a9a8:	sub	sp, sp, #48	; 0x30
   1a9ac:	str	r0, [fp, #-40]	; 0xffffffd8
   1a9b0:	str	r1, [fp, #-44]	; 0xffffffd4
   1a9b4:	str	r2, [fp, #-48]	; 0xffffffd0
   1a9b8:	str	r3, [fp, #-52]	; 0xffffffcc
   1a9bc:	mov	r3, #0
   1a9c0:	str	r3, [fp, #-8]
   1a9c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a9c8:	cmp	r3, #0
   1a9cc:	blt	1a9dc <__assert_fail@plt+0x9a90>
   1a9d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a9d4:	cmp	r3, #36	; 0x24
   1a9d8:	ble	1a9fc <__assert_fail@plt+0x9ab0>
   1a9dc:	movw	r3, #52348	; 0xcc7c
   1a9e0:	movt	r3, #1
   1a9e4:	mov	r2, #85	; 0x55
   1a9e8:	movw	r1, #52292	; 0xcc44
   1a9ec:	movt	r1, #1
   1a9f0:	movw	r0, #52308	; 0xcc54
   1a9f4:	movt	r0, #1
   1a9f8:	bl	10f4c <__assert_fail@plt>
   1a9fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1aa00:	cmp	r3, #0
   1aa04:	bne	1aa10 <__assert_fail@plt+0x9ac4>
   1aa08:	sub	r3, fp, #28
   1aa0c:	b	1aa14 <__assert_fail@plt+0x9ac8>
   1aa10:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1aa14:	str	r3, [fp, #-24]	; 0xffffffe8
   1aa18:	bl	10e80 <__errno_location@plt>
   1aa1c:	mov	r2, r0
   1aa20:	mov	r3, #0
   1aa24:	str	r3, [r2]
   1aa28:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1aa2c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1aa30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1aa34:	bl	10ebc <strtoimax@plt>
   1aa38:	mov	r2, r0
   1aa3c:	mov	r3, r1
   1aa40:	strd	r2, [fp, #-36]	; 0xffffffdc
   1aa44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aa48:	ldr	r3, [r3]
   1aa4c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1aa50:	cmp	r2, r3
   1aa54:	bne	1aab4 <__assert_fail@plt+0x9b68>
   1aa58:	ldr	r3, [fp, #4]
   1aa5c:	cmp	r3, #0
   1aa60:	beq	1aaac <__assert_fail@plt+0x9b60>
   1aa64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aa68:	ldr	r3, [r3]
   1aa6c:	ldrb	r3, [r3]
   1aa70:	cmp	r3, #0
   1aa74:	beq	1aaac <__assert_fail@plt+0x9b60>
   1aa78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aa7c:	ldr	r3, [r3]
   1aa80:	ldrb	r3, [r3]
   1aa84:	mov	r1, r3
   1aa88:	ldr	r0, [fp, #4]
   1aa8c:	bl	10e68 <strchr@plt>
   1aa90:	mov	r3, r0
   1aa94:	cmp	r3, #0
   1aa98:	beq	1aaac <__assert_fail@plt+0x9b60>
   1aa9c:	mov	r2, #1
   1aaa0:	mov	r3, #0
   1aaa4:	strd	r2, [fp, #-36]	; 0xffffffdc
   1aaa8:	b	1aaec <__assert_fail@plt+0x9ba0>
   1aaac:	mov	r3, #4
   1aab0:	b	1af70 <__assert_fail@plt+0xa024>
   1aab4:	bl	10e80 <__errno_location@plt>
   1aab8:	mov	r3, r0
   1aabc:	ldr	r3, [r3]
   1aac0:	cmp	r3, #0
   1aac4:	beq	1aaec <__assert_fail@plt+0x9ba0>
   1aac8:	bl	10e80 <__errno_location@plt>
   1aacc:	mov	r3, r0
   1aad0:	ldr	r3, [r3]
   1aad4:	cmp	r3, #34	; 0x22
   1aad8:	beq	1aae4 <__assert_fail@plt+0x9b98>
   1aadc:	mov	r3, #4
   1aae0:	b	1af70 <__assert_fail@plt+0xa024>
   1aae4:	mov	r3, #1
   1aae8:	str	r3, [fp, #-8]
   1aaec:	ldr	r3, [fp, #4]
   1aaf0:	cmp	r3, #0
   1aaf4:	bne	1ab0c <__assert_fail@plt+0x9bc0>
   1aaf8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1aafc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ab00:	strd	r2, [r1]
   1ab04:	ldr	r3, [fp, #-8]
   1ab08:	b	1af70 <__assert_fail@plt+0xa024>
   1ab0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ab10:	ldr	r3, [r3]
   1ab14:	ldrb	r3, [r3]
   1ab18:	cmp	r3, #0
   1ab1c:	beq	1af60 <__assert_fail@plt+0xa014>
   1ab20:	mov	r3, #1024	; 0x400
   1ab24:	str	r3, [fp, #-12]
   1ab28:	mov	r3, #1
   1ab2c:	str	r3, [fp, #-16]
   1ab30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ab34:	ldr	r3, [r3]
   1ab38:	ldrb	r3, [r3]
   1ab3c:	mov	r1, r3
   1ab40:	ldr	r0, [fp, #4]
   1ab44:	bl	10e68 <strchr@plt>
   1ab48:	mov	r3, r0
   1ab4c:	cmp	r3, #0
   1ab50:	bne	1ab6c <__assert_fail@plt+0x9c20>
   1ab54:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1ab58:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ab5c:	strd	r2, [r1]
   1ab60:	ldr	r3, [fp, #-8]
   1ab64:	orr	r3, r3, #2
   1ab68:	b	1af70 <__assert_fail@plt+0xa024>
   1ab6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ab70:	ldr	r3, [r3]
   1ab74:	ldrb	r3, [r3]
   1ab78:	sub	r3, r3, #69	; 0x45
   1ab7c:	cmp	r3, #47	; 0x2f
   1ab80:	ldrls	pc, [pc, r3, lsl #2]
   1ab84:	b	1acd8 <__assert_fail@plt+0x9d8c>
   1ab88:	andeq	sl, r1, r8, asr #24
   1ab8c:	ldrdeq	sl, [r1], -r8
   1ab90:	andeq	sl, r1, r8, asr #24
   1ab94:	ldrdeq	sl, [r1], -r8
   1ab98:	ldrdeq	sl, [r1], -r8
   1ab9c:	ldrdeq	sl, [r1], -r8
   1aba0:	andeq	sl, r1, r8, asr #24
   1aba4:	ldrdeq	sl, [r1], -r8
   1aba8:	andeq	sl, r1, r8, asr #24
   1abac:	ldrdeq	sl, [r1], -r8
   1abb0:	ldrdeq	sl, [r1], -r8
   1abb4:	andeq	sl, r1, r8, asr #24
   1abb8:	ldrdeq	sl, [r1], -r8
   1abbc:	ldrdeq	sl, [r1], -r8
   1abc0:	ldrdeq	sl, [r1], -r8
   1abc4:	andeq	sl, r1, r8, asr #24
   1abc8:	ldrdeq	sl, [r1], -r8
   1abcc:	ldrdeq	sl, [r1], -r8
   1abd0:	ldrdeq	sl, [r1], -r8
   1abd4:	ldrdeq	sl, [r1], -r8
   1abd8:	andeq	sl, r1, r8, asr #24
   1abdc:	andeq	sl, r1, r8, asr #24
   1abe0:	ldrdeq	sl, [r1], -r8
   1abe4:	ldrdeq	sl, [r1], -r8
   1abe8:	ldrdeq	sl, [r1], -r8
   1abec:	ldrdeq	sl, [r1], -r8
   1abf0:	ldrdeq	sl, [r1], -r8
   1abf4:	ldrdeq	sl, [r1], -r8
   1abf8:	ldrdeq	sl, [r1], -r8
   1abfc:	ldrdeq	sl, [r1], -r8
   1ac00:	ldrdeq	sl, [r1], -r8
   1ac04:	ldrdeq	sl, [r1], -r8
   1ac08:	ldrdeq	sl, [r1], -r8
   1ac0c:	ldrdeq	sl, [r1], -r8
   1ac10:	andeq	sl, r1, r8, asr #24
   1ac14:	ldrdeq	sl, [r1], -r8
   1ac18:	ldrdeq	sl, [r1], -r8
   1ac1c:	ldrdeq	sl, [r1], -r8
   1ac20:	andeq	sl, r1, r8, asr #24
   1ac24:	ldrdeq	sl, [r1], -r8
   1ac28:	andeq	sl, r1, r8, asr #24
   1ac2c:	ldrdeq	sl, [r1], -r8
   1ac30:	ldrdeq	sl, [r1], -r8
   1ac34:	ldrdeq	sl, [r1], -r8
   1ac38:	ldrdeq	sl, [r1], -r8
   1ac3c:	ldrdeq	sl, [r1], -r8
   1ac40:	ldrdeq	sl, [r1], -r8
   1ac44:	andeq	sl, r1, r8, asr #24
   1ac48:	mov	r1, #48	; 0x30
   1ac4c:	ldr	r0, [fp, #4]
   1ac50:	bl	10e68 <strchr@plt>
   1ac54:	mov	r3, r0
   1ac58:	cmp	r3, #0
   1ac5c:	beq	1accc <__assert_fail@plt+0x9d80>
   1ac60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ac64:	ldr	r3, [r3]
   1ac68:	add	r3, r3, #1
   1ac6c:	ldrb	r3, [r3]
   1ac70:	cmp	r3, #68	; 0x44
   1ac74:	beq	1acb4 <__assert_fail@plt+0x9d68>
   1ac78:	cmp	r3, #105	; 0x69
   1ac7c:	beq	1ac8c <__assert_fail@plt+0x9d40>
   1ac80:	cmp	r3, #66	; 0x42
   1ac84:	beq	1acb4 <__assert_fail@plt+0x9d68>
   1ac88:	b	1acd8 <__assert_fail@plt+0x9d8c>
   1ac8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ac90:	ldr	r3, [r3]
   1ac94:	add	r3, r3, #2
   1ac98:	ldrb	r3, [r3]
   1ac9c:	cmp	r3, #66	; 0x42
   1aca0:	bne	1acd4 <__assert_fail@plt+0x9d88>
   1aca4:	ldr	r3, [fp, #-16]
   1aca8:	add	r3, r3, #2
   1acac:	str	r3, [fp, #-16]
   1acb0:	b	1acd4 <__assert_fail@plt+0x9d88>
   1acb4:	mov	r3, #1000	; 0x3e8
   1acb8:	str	r3, [fp, #-12]
   1acbc:	ldr	r3, [fp, #-16]
   1acc0:	add	r3, r3, #1
   1acc4:	str	r3, [fp, #-16]
   1acc8:	b	1acd8 <__assert_fail@plt+0x9d8c>
   1accc:	nop	{0}
   1acd0:	b	1acd8 <__assert_fail@plt+0x9d8c>
   1acd4:	nop	{0}
   1acd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1acdc:	ldr	r3, [r3]
   1ace0:	ldrb	r3, [r3]
   1ace4:	sub	r3, r3, #66	; 0x42
   1ace8:	cmp	r3, #53	; 0x35
   1acec:	ldrls	pc, [pc, r3, lsl #2]
   1acf0:	b	1af00 <__assert_fail@plt+0x9fb4>
   1acf4:	andeq	sl, r1, r4, ror #27
   1acf8:	andeq	sl, r1, r0, lsl #30
   1acfc:	andeq	sl, r1, r0, lsl #30
   1ad00:	andeq	sl, r1, r8, lsl #28
   1ad04:	andeq	sl, r1, r0, lsl #30
   1ad08:	andeq	sl, r1, r4, lsr #28
   1ad0c:	andeq	sl, r1, r0, lsl #30
   1ad10:	andeq	sl, r1, r0, lsl #30
   1ad14:	andeq	sl, r1, r0, lsl #30
   1ad18:	andeq	sl, r1, r0, asr #28
   1ad1c:	andeq	sl, r1, r0, lsl #30
   1ad20:	andeq	sl, r1, ip, asr lr
   1ad24:	andeq	sl, r1, r0, lsl #30
   1ad28:	andeq	sl, r1, r0, lsl #30
   1ad2c:	andeq	sl, r1, r8, ror lr
   1ad30:	andeq	sl, r1, r0, lsl #30
   1ad34:	andeq	sl, r1, r0, lsl #30
   1ad38:	andeq	sl, r1, r0, lsl #30
   1ad3c:	muleq	r1, r4, lr
   1ad40:	andeq	sl, r1, r0, lsl #30
   1ad44:	andeq	sl, r1, r0, lsl #30
   1ad48:	andeq	sl, r1, r0, lsl #30
   1ad4c:	andeq	sl, r1, r0, lsl #30
   1ad50:	andeq	sl, r1, r8, asr #29
   1ad54:	andeq	sl, r1, r4, ror #29
   1ad58:	andeq	sl, r1, r0, lsl #30
   1ad5c:	andeq	sl, r1, r0, lsl #30
   1ad60:	andeq	sl, r1, r0, lsl #30
   1ad64:	andeq	sl, r1, r0, lsl #30
   1ad68:	andeq	sl, r1, r0, lsl #30
   1ad6c:	andeq	sl, r1, r0, lsl #30
   1ad70:	andeq	sl, r1, r0, lsl #30
   1ad74:	andeq	sl, r1, ip, asr #27
   1ad78:	strdeq	sl, [r1], -ip
   1ad7c:	andeq	sl, r1, r0, lsl #30
   1ad80:	andeq	sl, r1, r0, lsl #30
   1ad84:	andeq	sl, r1, r0, lsl #30
   1ad88:	andeq	sl, r1, r4, lsr #28
   1ad8c:	andeq	sl, r1, r0, lsl #30
   1ad90:	andeq	sl, r1, r0, lsl #30
   1ad94:	andeq	sl, r1, r0, lsl #30
   1ad98:	andeq	sl, r1, r0, asr #28
   1ad9c:	andeq	sl, r1, r0, lsl #30
   1ada0:	andeq	sl, r1, ip, asr lr
   1ada4:	andeq	sl, r1, r0, lsl #30
   1ada8:	andeq	sl, r1, r0, lsl #30
   1adac:	andeq	sl, r1, r0, lsl #30
   1adb0:	andeq	sl, r1, r0, lsl #30
   1adb4:	andeq	sl, r1, r0, lsl #30
   1adb8:	andeq	sl, r1, r0, lsl #30
   1adbc:	muleq	r1, r4, lr
   1adc0:	andeq	sl, r1, r0, lsl #30
   1adc4:	andeq	sl, r1, r0, lsl #30
   1adc8:			; <UNDEFINED> instruction: 0x0001aeb0
   1adcc:	sub	r3, fp, #36	; 0x24
   1add0:	mov	r1, #512	; 0x200
   1add4:	mov	r0, r3
   1add8:	bl	1a714 <__assert_fail@plt+0x97c8>
   1addc:	str	r0, [fp, #-20]	; 0xffffffec
   1ade0:	b	1af18 <__assert_fail@plt+0x9fcc>
   1ade4:	sub	r3, fp, #36	; 0x24
   1ade8:	mov	r1, #1024	; 0x400
   1adec:	mov	r0, r3
   1adf0:	bl	1a714 <__assert_fail@plt+0x97c8>
   1adf4:	str	r0, [fp, #-20]	; 0xffffffec
   1adf8:	b	1af18 <__assert_fail@plt+0x9fcc>
   1adfc:	mov	r3, #0
   1ae00:	str	r3, [fp, #-20]	; 0xffffffec
   1ae04:	b	1af18 <__assert_fail@plt+0x9fcc>
   1ae08:	sub	r3, fp, #36	; 0x24
   1ae0c:	mov	r2, #6
   1ae10:	ldr	r1, [fp, #-12]
   1ae14:	mov	r0, r3
   1ae18:	bl	1a92c <__assert_fail@plt+0x99e0>
   1ae1c:	str	r0, [fp, #-20]	; 0xffffffec
   1ae20:	b	1af18 <__assert_fail@plt+0x9fcc>
   1ae24:	sub	r3, fp, #36	; 0x24
   1ae28:	mov	r2, #3
   1ae2c:	ldr	r1, [fp, #-12]
   1ae30:	mov	r0, r3
   1ae34:	bl	1a92c <__assert_fail@plt+0x99e0>
   1ae38:	str	r0, [fp, #-20]	; 0xffffffec
   1ae3c:	b	1af18 <__assert_fail@plt+0x9fcc>
   1ae40:	sub	r3, fp, #36	; 0x24
   1ae44:	mov	r2, #1
   1ae48:	ldr	r1, [fp, #-12]
   1ae4c:	mov	r0, r3
   1ae50:	bl	1a92c <__assert_fail@plt+0x99e0>
   1ae54:	str	r0, [fp, #-20]	; 0xffffffec
   1ae58:	b	1af18 <__assert_fail@plt+0x9fcc>
   1ae5c:	sub	r3, fp, #36	; 0x24
   1ae60:	mov	r2, #2
   1ae64:	ldr	r1, [fp, #-12]
   1ae68:	mov	r0, r3
   1ae6c:	bl	1a92c <__assert_fail@plt+0x99e0>
   1ae70:	str	r0, [fp, #-20]	; 0xffffffec
   1ae74:	b	1af18 <__assert_fail@plt+0x9fcc>
   1ae78:	sub	r3, fp, #36	; 0x24
   1ae7c:	mov	r2, #5
   1ae80:	ldr	r1, [fp, #-12]
   1ae84:	mov	r0, r3
   1ae88:	bl	1a92c <__assert_fail@plt+0x99e0>
   1ae8c:	str	r0, [fp, #-20]	; 0xffffffec
   1ae90:	b	1af18 <__assert_fail@plt+0x9fcc>
   1ae94:	sub	r3, fp, #36	; 0x24
   1ae98:	mov	r2, #4
   1ae9c:	ldr	r1, [fp, #-12]
   1aea0:	mov	r0, r3
   1aea4:	bl	1a92c <__assert_fail@plt+0x99e0>
   1aea8:	str	r0, [fp, #-20]	; 0xffffffec
   1aeac:	b	1af18 <__assert_fail@plt+0x9fcc>
   1aeb0:	sub	r3, fp, #36	; 0x24
   1aeb4:	mov	r1, #2
   1aeb8:	mov	r0, r3
   1aebc:	bl	1a714 <__assert_fail@plt+0x97c8>
   1aec0:	str	r0, [fp, #-20]	; 0xffffffec
   1aec4:	b	1af18 <__assert_fail@plt+0x9fcc>
   1aec8:	sub	r3, fp, #36	; 0x24
   1aecc:	mov	r2, #8
   1aed0:	ldr	r1, [fp, #-12]
   1aed4:	mov	r0, r3
   1aed8:	bl	1a92c <__assert_fail@plt+0x99e0>
   1aedc:	str	r0, [fp, #-20]	; 0xffffffec
   1aee0:	b	1af18 <__assert_fail@plt+0x9fcc>
   1aee4:	sub	r3, fp, #36	; 0x24
   1aee8:	mov	r2, #7
   1aeec:	ldr	r1, [fp, #-12]
   1aef0:	mov	r0, r3
   1aef4:	bl	1a92c <__assert_fail@plt+0x99e0>
   1aef8:	str	r0, [fp, #-20]	; 0xffffffec
   1aefc:	b	1af18 <__assert_fail@plt+0x9fcc>
   1af00:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1af04:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1af08:	strd	r2, [r1]
   1af0c:	ldr	r3, [fp, #-8]
   1af10:	orr	r3, r3, #2
   1af14:	b	1af70 <__assert_fail@plt+0xa024>
   1af18:	ldr	r2, [fp, #-8]
   1af1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af20:	orr	r3, r2, r3
   1af24:	str	r3, [fp, #-8]
   1af28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1af2c:	ldr	r2, [r3]
   1af30:	ldr	r3, [fp, #-16]
   1af34:	add	r2, r2, r3
   1af38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1af3c:	str	r2, [r3]
   1af40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1af44:	ldr	r3, [r3]
   1af48:	ldrb	r3, [r3]
   1af4c:	cmp	r3, #0
   1af50:	beq	1af60 <__assert_fail@plt+0xa014>
   1af54:	ldr	r3, [fp, #-8]
   1af58:	orr	r3, r3, #2
   1af5c:	str	r3, [fp, #-8]
   1af60:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1af64:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1af68:	strd	r2, [r1]
   1af6c:	ldr	r3, [fp, #-8]
   1af70:	mov	r0, r3
   1af74:	sub	sp, fp, #4
   1af78:	ldr	fp, [sp]
   1af7c:	add	sp, sp, #4
   1af80:	pop	{pc}		; (ldr pc, [sp], #4)
   1af84:	str	fp, [sp, #-8]!
   1af88:	str	lr, [sp, #4]
   1af8c:	add	fp, sp, #4
   1af90:	sub	sp, sp, #16
   1af94:	str	r0, [fp, #-16]
   1af98:	str	r1, [fp, #-20]	; 0xffffffec
   1af9c:	ldr	r3, [fp, #-16]
   1afa0:	cmp	r3, #0
   1afa4:	beq	1afb4 <__assert_fail@plt+0xa068>
   1afa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afac:	cmp	r3, #0
   1afb0:	bne	1afc4 <__assert_fail@plt+0xa078>
   1afb4:	mov	r3, #1
   1afb8:	str	r3, [fp, #-20]	; 0xffffffec
   1afbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afc0:	str	r3, [fp, #-16]
   1afc4:	mov	ip, #0
   1afc8:	ldr	r2, [fp, #-16]
   1afcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afd0:	umull	r0, r1, r2, r3
   1afd4:	mov	r2, #0
   1afd8:	mov	r3, #0
   1afdc:	mov	r2, r1
   1afe0:	mov	r3, #0
   1afe4:	cmp	r2, #0
   1afe8:	beq	1aff0 <__assert_fail@plt+0xa0a4>
   1afec:	mov	ip, #1
   1aff0:	cmp	r0, #0
   1aff4:	bge	1affc <__assert_fail@plt+0xa0b0>
   1aff8:	mov	ip, #1
   1affc:	mov	r3, ip
   1b000:	and	r3, r3, #1
   1b004:	uxtb	r3, r3
   1b008:	cmp	r3, #0
   1b00c:	beq	1b028 <__assert_fail@plt+0xa0dc>
   1b010:	bl	10e80 <__errno_location@plt>
   1b014:	mov	r2, r0
   1b018:	mov	r3, #12
   1b01c:	str	r3, [r2]
   1b020:	mov	r3, #0
   1b024:	b	1b040 <__assert_fail@plt+0xa0f4>
   1b028:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b02c:	ldr	r0, [fp, #-16]
   1b030:	bl	10cd0 <calloc@plt>
   1b034:	mov	r3, r0
   1b038:	str	r3, [fp, #-8]
   1b03c:	ldr	r3, [fp, #-8]
   1b040:	mov	r0, r3
   1b044:	sub	sp, fp, #4
   1b048:	ldr	fp, [sp]
   1b04c:	add	sp, sp, #4
   1b050:	pop	{pc}		; (ldr pc, [sp], #4)
   1b054:	str	fp, [sp, #-8]!
   1b058:	str	lr, [sp, #4]
   1b05c:	add	fp, sp, #4
   1b060:	sub	sp, sp, #16
   1b064:	str	r0, [fp, #-16]
   1b068:	ldr	r3, [fp, #-16]
   1b06c:	cmp	r3, #0
   1b070:	bne	1b07c <__assert_fail@plt+0xa130>
   1b074:	mov	r3, #1
   1b078:	str	r3, [fp, #-16]
   1b07c:	mov	r2, #0
   1b080:	ldr	r3, [fp, #-16]
   1b084:	cmp	r3, #0
   1b088:	bge	1b090 <__assert_fail@plt+0xa144>
   1b08c:	mov	r2, #1
   1b090:	mov	r3, r2
   1b094:	and	r3, r3, #1
   1b098:	uxtb	r3, r3
   1b09c:	cmp	r3, #0
   1b0a0:	beq	1b0bc <__assert_fail@plt+0xa170>
   1b0a4:	bl	10e80 <__errno_location@plt>
   1b0a8:	mov	r2, r0
   1b0ac:	mov	r3, #12
   1b0b0:	str	r3, [r2]
   1b0b4:	mov	r3, #0
   1b0b8:	b	1b0d0 <__assert_fail@plt+0xa184>
   1b0bc:	ldr	r0, [fp, #-16]
   1b0c0:	bl	10dfc <malloc@plt>
   1b0c4:	mov	r3, r0
   1b0c8:	str	r3, [fp, #-8]
   1b0cc:	ldr	r3, [fp, #-8]
   1b0d0:	mov	r0, r3
   1b0d4:	sub	sp, fp, #4
   1b0d8:	ldr	fp, [sp]
   1b0dc:	add	sp, sp, #4
   1b0e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0e4:	str	fp, [sp, #-8]!
   1b0e8:	str	lr, [sp, #4]
   1b0ec:	add	fp, sp, #4
   1b0f0:	sub	sp, sp, #16
   1b0f4:	str	r0, [fp, #-16]
   1b0f8:	str	r1, [fp, #-20]	; 0xffffffec
   1b0fc:	ldr	r3, [fp, #-16]
   1b100:	cmp	r3, #0
   1b104:	bne	1b118 <__assert_fail@plt+0xa1cc>
   1b108:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b10c:	bl	1b054 <__assert_fail@plt+0xa108>
   1b110:	mov	r3, r0
   1b114:	b	1b188 <__assert_fail@plt+0xa23c>
   1b118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b11c:	cmp	r3, #0
   1b120:	bne	1b134 <__assert_fail@plt+0xa1e8>
   1b124:	ldr	r0, [fp, #-16]
   1b128:	bl	16860 <__assert_fail@plt+0x5914>
   1b12c:	mov	r3, #0
   1b130:	b	1b188 <__assert_fail@plt+0xa23c>
   1b134:	mov	r2, #0
   1b138:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b13c:	cmp	r3, #0
   1b140:	bge	1b148 <__assert_fail@plt+0xa1fc>
   1b144:	mov	r2, #1
   1b148:	mov	r3, r2
   1b14c:	and	r3, r3, #1
   1b150:	uxtb	r3, r3
   1b154:	cmp	r3, #0
   1b158:	beq	1b174 <__assert_fail@plt+0xa228>
   1b15c:	bl	10e80 <__errno_location@plt>
   1b160:	mov	r2, r0
   1b164:	mov	r3, #12
   1b168:	str	r3, [r2]
   1b16c:	mov	r3, #0
   1b170:	b	1b188 <__assert_fail@plt+0xa23c>
   1b174:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b178:	ldr	r0, [fp, #-16]
   1b17c:	bl	10d84 <realloc@plt>
   1b180:	str	r0, [fp, #-8]
   1b184:	ldr	r3, [fp, #-8]
   1b188:	mov	r0, r3
   1b18c:	sub	sp, fp, #4
   1b190:	ldr	fp, [sp]
   1b194:	add	sp, sp, #4
   1b198:	pop	{pc}		; (ldr pc, [sp], #4)
   1b19c:	push	{fp}		; (str fp, [sp, #-4]!)
   1b1a0:	add	fp, sp, #0
   1b1a4:	sub	sp, sp, #12
   1b1a8:	str	r0, [fp, #-8]
   1b1ac:	str	r1, [fp, #-12]
   1b1b0:	mov	r3, #0
   1b1b4:	mov	r0, r3
   1b1b8:	add	sp, fp, #0
   1b1bc:	pop	{fp}		; (ldr fp, [sp], #4)
   1b1c0:	bx	lr
   1b1c4:	str	fp, [sp, #-8]!
   1b1c8:	str	lr, [sp, #4]
   1b1cc:	add	fp, sp, #4
   1b1d0:	sub	sp, sp, #8
   1b1d4:	str	r0, [fp, #-8]
   1b1d8:	str	r1, [fp, #-12]
   1b1dc:	ldr	r1, [fp, #-12]
   1b1e0:	ldr	r0, [fp, #-8]
   1b1e4:	bl	1b19c <__assert_fail@plt+0xa250>
   1b1e8:	mov	r3, r0
   1b1ec:	mov	r0, r3
   1b1f0:	sub	sp, fp, #4
   1b1f4:	ldr	fp, [sp]
   1b1f8:	add	sp, sp, #4
   1b1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b200:	strd	r4, [sp, #-16]!
   1b204:	str	fp, [sp, #8]
   1b208:	str	lr, [sp, #12]
   1b20c:	add	fp, sp, #12
   1b210:	sub	sp, sp, #16
   1b214:	str	r0, [fp, #-24]	; 0xffffffe8
   1b218:	str	r1, [fp, #-28]	; 0xffffffe4
   1b21c:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1b220:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1b224:	cmp	r5, r4
   1b228:	bne	1b234 <__assert_fail@plt+0xa2e8>
   1b22c:	mov	r3, #0
   1b230:	b	1b294 <__assert_fail@plt+0xa348>
   1b234:	ldrb	r3, [r5]
   1b238:	mov	r0, r3
   1b23c:	bl	163b4 <__assert_fail@plt+0x5468>
   1b240:	mov	r3, r0
   1b244:	strb	r3, [fp, #-13]
   1b248:	ldrb	r3, [r4]
   1b24c:	mov	r0, r3
   1b250:	bl	163b4 <__assert_fail@plt+0x5468>
   1b254:	mov	r3, r0
   1b258:	strb	r3, [fp, #-14]
   1b25c:	ldrb	r3, [fp, #-13]
   1b260:	cmp	r3, #0
   1b264:	beq	1b284 <__assert_fail@plt+0xa338>
   1b268:	add	r5, r5, #1
   1b26c:	add	r4, r4, #1
   1b270:	ldrb	r2, [fp, #-13]
   1b274:	ldrb	r3, [fp, #-14]
   1b278:	cmp	r2, r3
   1b27c:	beq	1b234 <__assert_fail@plt+0xa2e8>
   1b280:	b	1b288 <__assert_fail@plt+0xa33c>
   1b284:	nop	{0}
   1b288:	ldrb	r2, [fp, #-13]
   1b28c:	ldrb	r3, [fp, #-14]
   1b290:	sub	r3, r2, r3
   1b294:	mov	r0, r3
   1b298:	sub	sp, fp, #12
   1b29c:	ldrd	r4, [sp]
   1b2a0:	ldr	fp, [sp, #8]
   1b2a4:	add	sp, sp, #12
   1b2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2ac:	str	fp, [sp, #-8]!
   1b2b0:	str	lr, [sp, #4]
   1b2b4:	add	fp, sp, #4
   1b2b8:	sub	sp, sp, #16
   1b2bc:	str	r0, [fp, #-16]
   1b2c0:	ldr	r0, [fp, #-16]
   1b2c4:	bl	10dcc <__fpending@plt>
   1b2c8:	mov	r3, r0
   1b2cc:	cmp	r3, #0
   1b2d0:	movne	r3, #1
   1b2d4:	moveq	r3, #0
   1b2d8:	strb	r3, [fp, #-5]
   1b2dc:	ldr	r0, [fp, #-16]
   1b2e0:	bl	10dd8 <ferror_unlocked@plt>
   1b2e4:	mov	r3, r0
   1b2e8:	cmp	r3, #0
   1b2ec:	movne	r3, #1
   1b2f0:	moveq	r3, #0
   1b2f4:	strb	r3, [fp, #-6]
   1b2f8:	ldr	r0, [fp, #-16]
   1b2fc:	bl	1669c <__assert_fail@plt+0x5750>
   1b300:	mov	r3, r0
   1b304:	cmp	r3, #0
   1b308:	movne	r3, #1
   1b30c:	moveq	r3, #0
   1b310:	strb	r3, [fp, #-7]
   1b314:	ldrb	r3, [fp, #-6]
   1b318:	cmp	r3, #0
   1b31c:	bne	1b34c <__assert_fail@plt+0xa400>
   1b320:	ldrb	r3, [fp, #-7]
   1b324:	cmp	r3, #0
   1b328:	beq	1b378 <__assert_fail@plt+0xa42c>
   1b32c:	ldrb	r3, [fp, #-5]
   1b330:	cmp	r3, #0
   1b334:	bne	1b34c <__assert_fail@plt+0xa400>
   1b338:	bl	10e80 <__errno_location@plt>
   1b33c:	mov	r3, r0
   1b340:	ldr	r3, [r3]
   1b344:	cmp	r3, #9
   1b348:	beq	1b378 <__assert_fail@plt+0xa42c>
   1b34c:	ldrb	r3, [fp, #-7]
   1b350:	eor	r3, r3, #1
   1b354:	uxtb	r3, r3
   1b358:	cmp	r3, #0
   1b35c:	beq	1b370 <__assert_fail@plt+0xa424>
   1b360:	bl	10e80 <__errno_location@plt>
   1b364:	mov	r2, r0
   1b368:	mov	r3, #0
   1b36c:	str	r3, [r2]
   1b370:	mvn	r3, #0
   1b374:	b	1b37c <__assert_fail@plt+0xa430>
   1b378:	mov	r3, #0
   1b37c:	mov	r0, r3
   1b380:	sub	sp, fp, #4
   1b384:	ldr	fp, [sp]
   1b388:	add	sp, sp, #4
   1b38c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b390:	str	fp, [sp, #-8]!
   1b394:	str	lr, [sp, #4]
   1b398:	add	fp, sp, #4
   1b39c:	sub	sp, sp, #8
   1b3a0:	mov	r0, #14
   1b3a4:	bl	10ef8 <nl_langinfo@plt>
   1b3a8:	str	r0, [fp, #-8]
   1b3ac:	ldr	r3, [fp, #-8]
   1b3b0:	cmp	r3, #0
   1b3b4:	bne	1b3c4 <__assert_fail@plt+0xa478>
   1b3b8:	movw	r3, #52360	; 0xcc88
   1b3bc:	movt	r3, #1
   1b3c0:	str	r3, [fp, #-8]
   1b3c4:	ldr	r3, [fp, #-8]
   1b3c8:	ldrb	r3, [r3]
   1b3cc:	cmp	r3, #0
   1b3d0:	bne	1b3e0 <__assert_fail@plt+0xa494>
   1b3d4:	movw	r3, #52364	; 0xcc8c
   1b3d8:	movt	r3, #1
   1b3dc:	str	r3, [fp, #-8]
   1b3e0:	ldr	r3, [fp, #-8]
   1b3e4:	mov	r0, r3
   1b3e8:	sub	sp, fp, #4
   1b3ec:	ldr	fp, [sp]
   1b3f0:	add	sp, sp, #4
   1b3f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3f8:	str	fp, [sp, #-8]!
   1b3fc:	str	lr, [sp, #4]
   1b400:	add	fp, sp, #4
   1b404:	sub	sp, sp, #32
   1b408:	str	r0, [fp, #-24]	; 0xffffffe8
   1b40c:	str	r1, [fp, #-28]	; 0xffffffe4
   1b410:	str	r2, [fp, #-32]	; 0xffffffe0
   1b414:	str	r3, [fp, #-36]	; 0xffffffdc
   1b418:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b41c:	cmp	r3, #0
   1b420:	bne	1b42c <__assert_fail@plt+0xa4e0>
   1b424:	sub	r3, fp, #16
   1b428:	str	r3, [fp, #-24]	; 0xffffffe8
   1b42c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b430:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b434:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b438:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b43c:	bl	10de4 <mbrtowc@plt>
   1b440:	str	r0, [fp, #-8]
   1b444:	ldr	r3, [fp, #-8]
   1b448:	cmn	r3, #3
   1b44c:	bls	1b498 <__assert_fail@plt+0xa54c>
   1b450:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b454:	cmp	r3, #0
   1b458:	beq	1b498 <__assert_fail@plt+0xa54c>
   1b45c:	mov	r0, #0
   1b460:	bl	1b4b0 <__assert_fail@plt+0xa564>
   1b464:	mov	r3, r0
   1b468:	eor	r3, r3, #1
   1b46c:	uxtb	r3, r3
   1b470:	cmp	r3, #0
   1b474:	beq	1b498 <__assert_fail@plt+0xa54c>
   1b478:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b47c:	ldrb	r3, [r3]
   1b480:	strb	r3, [fp, #-9]
   1b484:	ldrb	r2, [fp, #-9]
   1b488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b48c:	str	r2, [r3]
   1b490:	mov	r3, #1
   1b494:	b	1b49c <__assert_fail@plt+0xa550>
   1b498:	ldr	r3, [fp, #-8]
   1b49c:	mov	r0, r3
   1b4a0:	sub	sp, fp, #4
   1b4a4:	ldr	fp, [sp]
   1b4a8:	add	sp, sp, #4
   1b4ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4b0:	str	fp, [sp, #-8]!
   1b4b4:	str	lr, [sp, #4]
   1b4b8:	add	fp, sp, #4
   1b4bc:	sub	sp, sp, #272	; 0x110
   1b4c0:	str	r0, [fp, #-272]	; 0xfffffef0
   1b4c4:	sub	r3, fp, #264	; 0x108
   1b4c8:	movw	r2, #257	; 0x101
   1b4cc:	mov	r1, r3
   1b4d0:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1b4d4:	bl	1b674 <__assert_fail@plt+0xa728>
   1b4d8:	mov	r3, r0
   1b4dc:	cmp	r3, #0
   1b4e0:	beq	1b4ec <__assert_fail@plt+0xa5a0>
   1b4e4:	mov	r3, #0
   1b4e8:	b	1b540 <__assert_fail@plt+0xa5f4>
   1b4ec:	sub	r3, fp, #264	; 0x108
   1b4f0:	movw	r1, #52372	; 0xcc94
   1b4f4:	movt	r1, #1
   1b4f8:	mov	r0, r3
   1b4fc:	bl	10cf4 <strcmp@plt>
   1b500:	mov	r3, r0
   1b504:	cmp	r3, #0
   1b508:	beq	1b534 <__assert_fail@plt+0xa5e8>
   1b50c:	sub	r3, fp, #264	; 0x108
   1b510:	movw	r1, #52376	; 0xcc98
   1b514:	movt	r1, #1
   1b518:	mov	r0, r3
   1b51c:	bl	10cf4 <strcmp@plt>
   1b520:	mov	r3, r0
   1b524:	cmp	r3, #0
   1b528:	beq	1b534 <__assert_fail@plt+0xa5e8>
   1b52c:	mov	r3, #1
   1b530:	b	1b538 <__assert_fail@plt+0xa5ec>
   1b534:	mov	r3, #0
   1b538:	and	r3, r3, #1
   1b53c:	uxtb	r3, r3
   1b540:	mov	r0, r3
   1b544:	sub	sp, fp, #4
   1b548:	ldr	fp, [sp]
   1b54c:	add	sp, sp, #4
   1b550:	pop	{pc}		; (ldr pc, [sp], #4)
   1b554:	str	fp, [sp, #-8]!
   1b558:	str	lr, [sp, #4]
   1b55c:	add	fp, sp, #4
   1b560:	sub	sp, sp, #16
   1b564:	str	r0, [fp, #-16]
   1b568:	mov	r1, #0
   1b56c:	ldr	r0, [fp, #-16]
   1b570:	bl	10ee0 <setlocale@plt>
   1b574:	str	r0, [fp, #-8]
   1b578:	ldr	r3, [fp, #-8]
   1b57c:	mov	r0, r3
   1b580:	sub	sp, fp, #4
   1b584:	ldr	fp, [sp]
   1b588:	add	sp, sp, #4
   1b58c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b590:	str	fp, [sp, #-8]!
   1b594:	str	lr, [sp, #4]
   1b598:	add	fp, sp, #4
   1b59c:	sub	sp, sp, #24
   1b5a0:	str	r0, [fp, #-16]
   1b5a4:	str	r1, [fp, #-20]	; 0xffffffec
   1b5a8:	str	r2, [fp, #-24]	; 0xffffffe8
   1b5ac:	ldr	r0, [fp, #-16]
   1b5b0:	bl	1b554 <__assert_fail@plt+0xa608>
   1b5b4:	str	r0, [fp, #-8]
   1b5b8:	ldr	r3, [fp, #-8]
   1b5bc:	cmp	r3, #0
   1b5c0:	bne	1b5e4 <__assert_fail@plt+0xa698>
   1b5c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b5c8:	cmp	r3, #0
   1b5cc:	beq	1b5dc <__assert_fail@plt+0xa690>
   1b5d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b5d4:	mov	r2, #0
   1b5d8:	strb	r2, [r3]
   1b5dc:	mov	r3, #22
   1b5e0:	b	1b660 <__assert_fail@plt+0xa714>
   1b5e4:	ldr	r0, [fp, #-8]
   1b5e8:	bl	10e5c <strlen@plt>
   1b5ec:	str	r0, [fp, #-12]
   1b5f0:	ldr	r2, [fp, #-12]
   1b5f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b5f8:	cmp	r2, r3
   1b5fc:	bcs	1b620 <__assert_fail@plt+0xa6d4>
   1b600:	ldr	r3, [fp, #-12]
   1b604:	add	r3, r3, #1
   1b608:	mov	r2, r3
   1b60c:	ldr	r1, [fp, #-8]
   1b610:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b614:	bl	10d48 <memcpy@plt>
   1b618:	mov	r3, #0
   1b61c:	b	1b660 <__assert_fail@plt+0xa714>
   1b620:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b624:	cmp	r3, #0
   1b628:	beq	1b65c <__assert_fail@plt+0xa710>
   1b62c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b630:	sub	r3, r3, #1
   1b634:	mov	r2, r3
   1b638:	ldr	r1, [fp, #-8]
   1b63c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b640:	bl	10d48 <memcpy@plt>
   1b644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b648:	sub	r3, r3, #1
   1b64c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b650:	add	r3, r2, r3
   1b654:	mov	r2, #0
   1b658:	strb	r2, [r3]
   1b65c:	mov	r3, #34	; 0x22
   1b660:	mov	r0, r3
   1b664:	sub	sp, fp, #4
   1b668:	ldr	fp, [sp]
   1b66c:	add	sp, sp, #4
   1b670:	pop	{pc}		; (ldr pc, [sp], #4)
   1b674:	str	fp, [sp, #-8]!
   1b678:	str	lr, [sp, #4]
   1b67c:	add	fp, sp, #4
   1b680:	sub	sp, sp, #16
   1b684:	str	r0, [fp, #-8]
   1b688:	str	r1, [fp, #-12]
   1b68c:	str	r2, [fp, #-16]
   1b690:	ldr	r2, [fp, #-16]
   1b694:	ldr	r1, [fp, #-12]
   1b698:	ldr	r0, [fp, #-8]
   1b69c:	bl	1b590 <__assert_fail@plt+0xa644>
   1b6a0:	mov	r3, r0
   1b6a4:	mov	r0, r3
   1b6a8:	sub	sp, fp, #4
   1b6ac:	ldr	fp, [sp]
   1b6b0:	add	sp, sp, #4
   1b6b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6b8:	str	fp, [sp, #-8]!
   1b6bc:	str	lr, [sp, #4]
   1b6c0:	add	fp, sp, #4
   1b6c4:	sub	sp, sp, #8
   1b6c8:	str	r0, [fp, #-8]
   1b6cc:	ldr	r0, [fp, #-8]
   1b6d0:	bl	1b554 <__assert_fail@plt+0xa608>
   1b6d4:	mov	r3, r0
   1b6d8:	mov	r0, r3
   1b6dc:	sub	sp, fp, #4
   1b6e0:	ldr	fp, [sp]
   1b6e4:	add	sp, sp, #4
   1b6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6ec:	cmp	r3, #0
   1b6f0:	cmpeq	r2, #0
   1b6f4:	bne	1b718 <__assert_fail@plt+0xa7cc>
   1b6f8:	cmp	r1, #0
   1b6fc:	movlt	r1, #-2147483648	; 0x80000000
   1b700:	movlt	r0, #0
   1b704:	blt	1b714 <__assert_fail@plt+0xa7c8>
   1b708:	cmpeq	r0, #0
   1b70c:	mvnne	r1, #-2147483648	; 0x80000000
   1b710:	mvnne	r0, #0
   1b714:	b	1b7c0 <__assert_fail@plt+0xa874>
   1b718:	sub	sp, sp, #8
   1b71c:	push	{sp, lr}
   1b720:	cmp	r1, #0
   1b724:	blt	1b744 <__assert_fail@plt+0xa7f8>
   1b728:	cmp	r3, #0
   1b72c:	blt	1b778 <__assert_fail@plt+0xa82c>
   1b730:	bl	1b7d0 <__assert_fail@plt+0xa884>
   1b734:	ldr	lr, [sp, #4]
   1b738:	add	sp, sp, #8
   1b73c:	pop	{r2, r3}
   1b740:	bx	lr
   1b744:	rsbs	r0, r0, #0
   1b748:	sbc	r1, r1, r1, lsl #1
   1b74c:	cmp	r3, #0
   1b750:	blt	1b79c <__assert_fail@plt+0xa850>
   1b754:	bl	1b7d0 <__assert_fail@plt+0xa884>
   1b758:	ldr	lr, [sp, #4]
   1b75c:	add	sp, sp, #8
   1b760:	pop	{r2, r3}
   1b764:	rsbs	r0, r0, #0
   1b768:	sbc	r1, r1, r1, lsl #1
   1b76c:	rsbs	r2, r2, #0
   1b770:	sbc	r3, r3, r3, lsl #1
   1b774:	bx	lr
   1b778:	rsbs	r2, r2, #0
   1b77c:	sbc	r3, r3, r3, lsl #1
   1b780:	bl	1b7d0 <__assert_fail@plt+0xa884>
   1b784:	ldr	lr, [sp, #4]
   1b788:	add	sp, sp, #8
   1b78c:	pop	{r2, r3}
   1b790:	rsbs	r0, r0, #0
   1b794:	sbc	r1, r1, r1, lsl #1
   1b798:	bx	lr
   1b79c:	rsbs	r2, r2, #0
   1b7a0:	sbc	r3, r3, r3, lsl #1
   1b7a4:	bl	1b7d0 <__assert_fail@plt+0xa884>
   1b7a8:	ldr	lr, [sp, #4]
   1b7ac:	add	sp, sp, #8
   1b7b0:	pop	{r2, r3}
   1b7b4:	rsbs	r2, r2, #0
   1b7b8:	sbc	r3, r3, r3, lsl #1
   1b7bc:	bx	lr
   1b7c0:	push	{r1, lr}
   1b7c4:	mov	r0, #8
   1b7c8:	bl	10ce8 <raise@plt>
   1b7cc:	pop	{r1, pc}
   1b7d0:	cmp	r1, r3
   1b7d4:	cmpeq	r0, r2
   1b7d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7dc:	mov	r4, r0
   1b7e0:	movcc	r0, #0
   1b7e4:	mov	r5, r1
   1b7e8:	ldr	lr, [sp, #36]	; 0x24
   1b7ec:	movcc	r1, r0
   1b7f0:	bcc	1b8ec <__assert_fail@plt+0xa9a0>
   1b7f4:	cmp	r3, #0
   1b7f8:	clzeq	ip, r2
   1b7fc:	clzne	ip, r3
   1b800:	addeq	ip, ip, #32
   1b804:	cmp	r5, #0
   1b808:	clzeq	r1, r4
   1b80c:	addeq	r1, r1, #32
   1b810:	clzne	r1, r5
   1b814:	sub	ip, ip, r1
   1b818:	sub	sl, ip, #32
   1b81c:	lsl	r9, r3, ip
   1b820:	rsb	fp, ip, #32
   1b824:	orr	r9, r9, r2, lsl sl
   1b828:	orr	r9, r9, r2, lsr fp
   1b82c:	lsl	r8, r2, ip
   1b830:	cmp	r5, r9
   1b834:	cmpeq	r4, r8
   1b838:	movcc	r0, #0
   1b83c:	movcc	r1, r0
   1b840:	bcc	1b85c <__assert_fail@plt+0xa910>
   1b844:	mov	r0, #1
   1b848:	subs	r4, r4, r8
   1b84c:	lsl	r1, r0, sl
   1b850:	orr	r1, r1, r0, lsr fp
   1b854:	lsl	r0, r0, ip
   1b858:	sbc	r5, r5, r9
   1b85c:	cmp	ip, #0
   1b860:	beq	1b8ec <__assert_fail@plt+0xa9a0>
   1b864:	lsr	r6, r8, #1
   1b868:	orr	r6, r6, r9, lsl #31
   1b86c:	lsr	r7, r9, #1
   1b870:	mov	r2, ip
   1b874:	b	1b898 <__assert_fail@plt+0xa94c>
   1b878:	subs	r3, r4, r6
   1b87c:	sbc	r8, r5, r7
   1b880:	adds	r3, r3, r3
   1b884:	adc	r8, r8, r8
   1b888:	adds	r4, r3, #1
   1b88c:	adc	r5, r8, #0
   1b890:	subs	r2, r2, #1
   1b894:	beq	1b8b4 <__assert_fail@plt+0xa968>
   1b898:	cmp	r5, r7
   1b89c:	cmpeq	r4, r6
   1b8a0:	bcs	1b878 <__assert_fail@plt+0xa92c>
   1b8a4:	adds	r4, r4, r4
   1b8a8:	adc	r5, r5, r5
   1b8ac:	subs	r2, r2, #1
   1b8b0:	bne	1b898 <__assert_fail@plt+0xa94c>
   1b8b4:	lsr	r3, r4, ip
   1b8b8:	orr	r3, r3, r5, lsl fp
   1b8bc:	lsr	r2, r5, ip
   1b8c0:	orr	r3, r3, r5, lsr sl
   1b8c4:	adds	r0, r0, r4
   1b8c8:	mov	r4, r3
   1b8cc:	lsl	r3, r2, ip
   1b8d0:	orr	r3, r3, r4, lsl sl
   1b8d4:	lsl	ip, r4, ip
   1b8d8:	orr	r3, r3, r4, lsr fp
   1b8dc:	adc	r1, r1, r5
   1b8e0:	subs	r0, r0, ip
   1b8e4:	mov	r5, r2
   1b8e8:	sbc	r1, r1, r3
   1b8ec:	cmp	lr, #0
   1b8f0:	strdne	r4, [lr]
   1b8f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b8fc:	mov	r7, r0
   1b900:	ldr	r6, [pc, #72]	; 1b950 <__assert_fail@plt+0xaa04>
   1b904:	ldr	r5, [pc, #72]	; 1b954 <__assert_fail@plt+0xaa08>
   1b908:	add	r6, pc, r6
   1b90c:	add	r5, pc, r5
   1b910:	sub	r6, r6, r5
   1b914:	mov	r8, r1
   1b918:	mov	r9, r2
   1b91c:	bl	10cb0 <calloc@plt-0x20>
   1b920:	asrs	r6, r6, #2
   1b924:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b928:	mov	r4, #0
   1b92c:	add	r4, r4, #1
   1b930:	ldr	r3, [r5], #4
   1b934:	mov	r2, r9
   1b938:	mov	r1, r8
   1b93c:	mov	r0, r7
   1b940:	blx	r3
   1b944:	cmp	r6, r4
   1b948:	bne	1b92c <__assert_fail@plt+0xa9e0>
   1b94c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b950:	andeq	r1, r1, r4, lsl #12
   1b954:	strdeq	r1, [r1], -ip
   1b958:	bx	lr
   1b95c:	ldr	r3, [pc, #12]	; 1b970 <__assert_fail@plt+0xaa24>
   1b960:	mov	r1, #0
   1b964:	add	r3, pc, r3
   1b968:	ldr	r2, [r3]
   1b96c:	b	10e8c <__cxa_atexit@plt>
   1b970:	andeq	r1, r1, r0, lsl #15

Disassembly of section .fini:

0001b974 <.fini>:
   1b974:	push	{r3, lr}
   1b978:	pop	{r3, pc}
