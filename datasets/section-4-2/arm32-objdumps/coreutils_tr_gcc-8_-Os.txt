
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010c90 <.init>:
   10c90:	push	{r3, lr}
   10c94:	bl	11ae0 <__assert_fail@plt+0xbb4>
   10c98:	pop	{r3, pc}

Disassembly of section .plt:

00010c9c <calloc@plt-0x14>:
   10c9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca0:	ldr	lr, [pc, #4]	; 10cac <calloc@plt-0x4>
   10ca4:	add	lr, pc, lr
   10ca8:	ldr	pc, [lr, #8]!
   10cac:	andeq	r7, r1, r4, asr r3

00010cb0 <calloc@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #852]!	; 0x354

00010cbc <fputs_unlocked@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #844]!	; 0x34c

00010cc8 <strcmp@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #836]!	; 0x344

00010cd4 <posix_fadvise64@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #828]!	; 0x33c

00010ce0 <read@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #820]!	; 0x334

00010cec <fflush@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #812]!	; 0x32c

00010cf8 <free@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #804]!	; 0x324

00010d04 <_exit@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #796]!	; 0x31c

00010d10 <memcpy@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #788]!	; 0x314

00010d1c <tolower@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #780]!	; 0x30c

00010d28 <mbsinit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #772]!	; 0x304

00010d34 <fwrite_unlocked@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d40 <memcmp@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #756]!	; 0x2f4

00010d4c <stpcpy@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #748]!	; 0x2ec

00010d58 <fputc_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #740]!	; 0x2e4

00010d64 <dcgettext@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d70 <realloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #724]!	; 0x2d4

00010d7c <textdomain@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #716]!	; 0x2cc

00010d88 <iswprint@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #708]!	; 0x2c4

00010d94 <lseek64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #700]!	; 0x2bc

00010da0 <__ctype_get_mb_cur_max@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #692]!	; 0x2b4

00010dac <__fpending@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #684]!	; 0x2ac

00010db8 <ferror_unlocked@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #676]!	; 0x2a4

00010dc4 <mbrtowc@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #668]!	; 0x29c

00010dd0 <error@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #660]!	; 0x294

00010ddc <malloc@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #652]!	; 0x28c

00010de8 <__libc_start_main@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #644]!	; 0x284

00010df4 <__freading@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #636]!	; 0x27c

00010e00 <__gmon_start__@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #628]!	; 0x274

00010e0c <getopt_long@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #620]!	; 0x26c

00010e18 <__ctype_b_loc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #612]!	; 0x264

00010e24 <exit@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #604]!	; 0x25c

00010e30 <strlen@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #596]!	; 0x254

00010e3c <strchr@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #588]!	; 0x24c

00010e48 <__errno_location@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #580]!	; 0x244

00010e54 <__sprintf_chk@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #572]!	; 0x23c

00010e60 <__cxa_atexit@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #564]!	; 0x234

00010e6c <memset@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #556]!	; 0x22c

00010e78 <__printf_chk@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #548]!	; 0x224

00010e84 <fileno@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #540]!	; 0x21c

00010e90 <strtoumax@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #532]!	; 0x214

00010e9c <__fprintf_chk@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #524]!	; 0x20c

00010ea8 <fclose@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #516]!	; 0x204

00010eb4 <fseeko64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #508]!	; 0x1fc

00010ec0 <setlocale@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ecc <toupper@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed8 <strrchr@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ee4 <nl_langinfo@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #476]!	; 0x1dc

00010ef0 <bindtextdomain@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #468]!	; 0x1d4

00010efc <fputs@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #460]!	; 0x1cc

00010f08 <strncmp@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #452]!	; 0x1c4

00010f14 <abort@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f20 <close@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #436]!	; 0x1b4

00010f2c <__assert_fail@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #428]!	; 0x1ac

Disassembly of section .text:

00010f38 <.text>:
   10f38:	push	{r4, lr}
   10f3c:	bl	10e48 <__errno_location@plt>
   10f40:	mov	r3, #12
   10f44:	str	r3, [r0]
   10f48:	mov	r0, #0
   10f4c:	pop	{r4, pc}
   10f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f54:	mov	r8, r0
   10f58:	sub	sp, sp, #380	; 0x17c
   10f5c:	mov	r7, r1
   10f60:	ldr	r0, [r1]
   10f64:	bl	1311c <__assert_fail@plt+0x21f0>
   10f68:	ldr	r1, [pc, #2684]	; 119ec <__assert_fail@plt+0xac0>
   10f6c:	mov	r0, #6
   10f70:	bl	10ec0 <setlocale@plt>
   10f74:	ldr	r1, [pc, #2676]	; 119f0 <__assert_fail@plt+0xac4>
   10f78:	ldr	r0, [pc, #2676]	; 119f4 <__assert_fail@plt+0xac8>
   10f7c:	bl	10ef0 <bindtextdomain@plt>
   10f80:	ldr	r0, [pc, #2668]	; 119f4 <__assert_fail@plt+0xac8>
   10f84:	bl	10d7c <textdomain@plt>
   10f88:	ldr	r0, [pc, #2664]	; 119f8 <__assert_fail@plt+0xacc>
   10f8c:	ldr	r9, [pc, #2664]	; 119fc <__assert_fail@plt+0xad0>
   10f90:	ldr	r6, [pc, #2664]	; 11a00 <__assert_fail@plt+0xad4>
   10f94:	ldr	r5, [pc, #2664]	; 11a04 <__assert_fail@plt+0xad8>
   10f98:	bl	1589c <__assert_fail@plt+0x4970>
   10f9c:	mov	r4, #0
   10fa0:	mov	r3, r9
   10fa4:	mov	r2, r6
   10fa8:	mov	r1, r7
   10fac:	mov	r0, r8
   10fb0:	str	r4, [sp]
   10fb4:	bl	10e0c <getopt_long@plt>
   10fb8:	cmn	r0, #1
   10fbc:	bne	11034 <__assert_fail@plt+0x108>
   10fc0:	ldr	r9, [pc, #2624]	; 11a08 <__assert_fail@plt+0xadc>
   10fc4:	ldr	r6, [pc, #2616]	; 11a04 <__assert_fail@plt+0xad8>
   10fc8:	ldr	r5, [r9]
   10fcc:	ldrb	r3, [r6, #769]	; 0x301
   10fd0:	ldrb	r2, [r6, #770]	; 0x302
   10fd4:	sub	r5, r8, r5
   10fd8:	cmp	r5, #2
   10fdc:	eoreq	r4, r3, #1
   10fe0:	and	r4, r4, #1
   10fe4:	cmp	r2, r3
   10fe8:	strb	r4, [r6, #772]	; 0x304
   10fec:	beq	11100 <__assert_fail@plt+0x1d4>
   10ff0:	mov	r3, #1
   10ff4:	movcs	r4, #2
   10ff8:	bcs	11000 <__assert_fail@plt+0xd4>
   10ffc:	mov	r4, r3
   11000:	cmp	r5, r3
   11004:	bge	11178 <__assert_fail@plt+0x24c>
   11008:	cmp	r5, #0
   1100c:	mov	r2, #5
   11010:	bne	11108 <__assert_fail@plt+0x1dc>
   11014:	ldr	r1, [pc, #2544]	; 11a0c <__assert_fail@plt+0xae0>
   11018:	mov	r0, r5
   1101c:	bl	10d64 <dcgettext@plt>
   11020:	mov	r2, r0
   11024:	mov	r1, r5
   11028:	mov	r0, r5
   1102c:	bl	10dd0 <error@plt>
   11030:	b	11098 <__assert_fail@plt+0x16c>
   11034:	cmp	r0, #67	; 0x43
   11038:	beq	110d8 <__assert_fail@plt+0x1ac>
   1103c:	bgt	11084 <__assert_fail@plt+0x158>
   11040:	cmn	r0, #2
   11044:	beq	110f8 <__assert_fail@plt+0x1cc>
   11048:	cmp	r0, #65	; 0x41
   1104c:	beq	110bc <__assert_fail@plt+0x190>
   11050:	cmn	r0, #3
   11054:	bne	11098 <__assert_fail@plt+0x16c>
   11058:	ldr	r3, [pc, #2480]	; 11a10 <__assert_fail@plt+0xae4>
   1105c:	ldr	r0, [pc, #2480]	; 11a14 <__assert_fail@plt+0xae8>
   11060:	ldr	r2, [pc, #2480]	; 11a18 <__assert_fail@plt+0xaec>
   11064:	stm	sp, {r3, r4}
   11068:	ldr	r3, [pc, #2476]	; 11a1c <__assert_fail@plt+0xaf0>
   1106c:	ldr	r1, [pc, #2476]	; 11a20 <__assert_fail@plt+0xaf4>
   11070:	ldr	r0, [r0]
   11074:	ldr	r3, [r3]
   11078:	bl	14bd4 <__assert_fail@plt+0x3ca8>
   1107c:	mov	r0, r4
   11080:	bl	10e24 <exit@plt>
   11084:	cmp	r0, #100	; 0x64
   11088:	beq	110e4 <__assert_fail@plt+0x1b8>
   1108c:	bgt	110a0 <__assert_fail@plt+0x174>
   11090:	cmp	r0, #99	; 0x63
   11094:	beq	110d8 <__assert_fail@plt+0x1ac>
   11098:	mov	r0, #1
   1109c:	b	110fc <__assert_fail@plt+0x1d0>
   110a0:	cmp	r0, #115	; 0x73
   110a4:	mov	r3, #1
   110a8:	beq	110f0 <__assert_fail@plt+0x1c4>
   110ac:	cmp	r0, #116	; 0x74
   110b0:	bne	11098 <__assert_fail@plt+0x16c>
   110b4:	strb	r3, [r5, #771]	; 0x303
   110b8:	b	10f9c <__assert_fail@plt+0x70>
   110bc:	ldr	r1, [pc, #2400]	; 11a24 <__assert_fail@plt+0xaf8>
   110c0:	mov	r0, #3
   110c4:	bl	10ec0 <setlocale@plt>
   110c8:	ldr	r1, [pc, #2388]	; 11a24 <__assert_fail@plt+0xaf8>
   110cc:	mov	r0, r4
   110d0:	bl	10ec0 <setlocale@plt>
   110d4:	b	10f9c <__assert_fail@plt+0x70>
   110d8:	mov	r3, #1
   110dc:	strb	r3, [r5, #768]	; 0x300
   110e0:	b	10f9c <__assert_fail@plt+0x70>
   110e4:	mov	r3, #1
   110e8:	strb	r3, [r5, #769]	; 0x301
   110ec:	b	10f9c <__assert_fail@plt+0x70>
   110f0:	strb	r3, [r5, #770]	; 0x302
   110f4:	b	10f9c <__assert_fail@plt+0x70>
   110f8:	mov	r0, r4
   110fc:	bl	12d14 <__assert_fail@plt+0x1de8>
   11100:	mov	r3, #2
   11104:	b	10ffc <__assert_fail@plt+0xd0>
   11108:	ldr	r1, [pc, #2328]	; 11a28 <__assert_fail@plt+0xafc>
   1110c:	mov	r0, #0
   11110:	sub	r8, r8, #-1073741823	; 0xc0000001
   11114:	bl	10d64 <dcgettext@plt>
   11118:	mov	r4, r0
   1111c:	ldr	r0, [r7, r8, lsl #2]
   11120:	bl	1471c <__assert_fail@plt+0x37f0>
   11124:	mov	r1, #0
   11128:	mov	r3, r0
   1112c:	mov	r2, r4
   11130:	mov	r0, r1
   11134:	bl	10dd0 <error@plt>
   11138:	ldr	r3, [pc, #2284]	; 11a2c <__assert_fail@plt+0xb00>
   1113c:	mov	r2, #5
   11140:	ldrb	r0, [r6, #770]	; 0x302
   11144:	ldr	r1, [pc, #2276]	; 11a30 <__assert_fail@plt+0xb04>
   11148:	ldr	r4, [r3]
   1114c:	cmp	r0, #0
   11150:	ldr	r3, [pc, #2268]	; 11a34 <__assert_fail@plt+0xb08>
   11154:	moveq	r1, r3
   11158:	mov	r0, #0
   1115c:	bl	10d64 <dcgettext@plt>
   11160:	mov	r3, r0
   11164:	ldr	r2, [pc, #2252]	; 11a38 <__assert_fail@plt+0xb0c>
   11168:	mov	r1, #1
   1116c:	mov	r0, r4
   11170:	bl	10e9c <__fprintf_chk@plt>
   11174:	b	11098 <__assert_fail@plt+0x16c>
   11178:	cmp	r4, r5
   1117c:	bge	111d4 <__assert_fail@plt+0x2a8>
   11180:	mov	r2, #5
   11184:	ldr	r1, [pc, #2224]	; 11a3c <__assert_fail@plt+0xb10>
   11188:	mov	r0, #0
   1118c:	bl	10d64 <dcgettext@plt>
   11190:	ldr	r3, [r9]
   11194:	mov	r6, r0
   11198:	add	r4, r4, r3
   1119c:	ldr	r0, [r7, r4, lsl #2]
   111a0:	bl	1471c <__assert_fail@plt+0x37f0>
   111a4:	mov	r1, #0
   111a8:	mov	r3, r0
   111ac:	mov	r2, r6
   111b0:	mov	r0, r1
   111b4:	bl	10dd0 <error@plt>
   111b8:	cmp	r5, #2
   111bc:	bne	11098 <__assert_fail@plt+0x16c>
   111c0:	ldr	r3, [pc, #2148]	; 11a2c <__assert_fail@plt+0xb00>
   111c4:	mov	r2, #5
   111c8:	ldr	r1, [pc, #2160]	; 11a40 <__assert_fail@plt+0xb14>
   111cc:	ldr	r4, [r3]
   111d0:	b	11158 <__assert_fail@plt+0x22c>
   111d4:	mov	r0, #24
   111d8:	mov	r4, #0
   111dc:	bl	14c9c <__assert_fail@plt+0x3d70>
   111e0:	ldr	r3, [r9]
   111e4:	add	r1, sp, #40	; 0x28
   111e8:	str	r4, [r0, #4]
   111ec:	str	r0, [sp, #40]	; 0x28
   111f0:	str	r0, [sp, #44]	; 0x2c
   111f4:	ldr	r0, [r7, r3, lsl #2]
   111f8:	bl	12498 <__assert_fail@plt+0x156c>
   111fc:	cmp	r0, r4
   11200:	beq	119e0 <__assert_fail@plt+0xab4>
   11204:	cmp	r5, #2
   11208:	bne	11240 <__assert_fail@plt+0x314>
   1120c:	mov	r0, #24
   11210:	bl	14c9c <__assert_fail@plt+0x3d70>
   11214:	ldr	r3, [r9]
   11218:	add	r1, sp, #80	; 0x50
   1121c:	str	r4, [r0, #4]
   11220:	str	r0, [sp, #80]	; 0x50
   11224:	str	r0, [sp, #84]	; 0x54
   11228:	add	r3, r3, #1
   1122c:	ldr	r0, [r7, r3, lsl #2]
   11230:	bl	12498 <__assert_fail@plt+0x156c>
   11234:	cmp	r0, r4
   11238:	beq	119e0 <__assert_fail@plt+0xab4>
   1123c:	add	r4, sp, #80	; 0x50
   11240:	add	r0, sp, #40	; 0x28
   11244:	bl	11ea8 <__assert_fail@plt+0xf7c>
   11248:	ldrb	r3, [r6, #768]	; 0x300
   1124c:	cmp	r3, #0
   11250:	beq	11298 <__assert_fail@plt+0x36c>
   11254:	mov	r2, #256	; 0x100
   11258:	mov	r1, #0
   1125c:	add	r0, sp, #120	; 0x78
   11260:	mov	r7, #256	; 0x100
   11264:	bl	10e6c <memset@plt>
   11268:	mov	r8, #1
   1126c:	mvn	r2, #1
   11270:	mvn	r3, #0
   11274:	strd	r2, [sp, #48]	; 0x30
   11278:	mov	r1, #0
   1127c:	add	r0, sp, #40	; 0x28
   11280:	bl	12064 <__assert_fail@plt+0x1138>
   11284:	cmn	r0, #1
   11288:	bne	112c4 <__assert_fail@plt+0x398>
   1128c:	asr	r3, r7, #31
   11290:	mov	r2, r7
   11294:	strd	r2, [sp, #56]	; 0x38
   11298:	ldr	r7, [sp, #64]	; 0x40
   1129c:	cmp	r7, #0
   112a0:	beq	112e0 <__assert_fail@plt+0x3b4>
   112a4:	ldr	r1, [pc, #1944]	; 11a44 <__assert_fail@plt+0xb18>
   112a8:	mov	r2, #5
   112ac:	mov	r0, #0
   112b0:	bl	10d64 <dcgettext@plt>
   112b4:	mov	r2, r0
   112b8:	mov	r1, #0
   112bc:	mov	r0, #1
   112c0:	bl	10dd0 <error@plt>
   112c4:	add	r3, sp, #376	; 0x178
   112c8:	add	r0, r3, r0
   112cc:	ldrb	r3, [r0, #-256]	; 0xffffff00
   112d0:	strb	r8, [r0, #-256]	; 0xffffff00
   112d4:	eor	r3, r3, #1
   112d8:	sub	r7, r7, r3
   112dc:	b	11278 <__assert_fail@plt+0x34c>
   112e0:	cmp	r4, #0
   112e4:	beq	11668 <__assert_fail@plt+0x73c>
   112e8:	mov	r0, r4
   112ec:	ldrd	r8, [sp, #56]	; 0x38
   112f0:	bl	11ea8 <__assert_fail@plt+0xf7c>
   112f4:	ldrd	sl, [r4, #16]
   112f8:	ldr	r1, [r4, #24]
   112fc:	cmp	r9, fp
   11300:	cmpeq	r8, sl
   11304:	bcc	11420 <__assert_fail@plt+0x4f4>
   11308:	cmp	r1, #1
   1130c:	bne	11420 <__assert_fail@plt+0x4f4>
   11310:	ldr	r0, [r4, #28]
   11314:	subs	r2, r8, sl
   11318:	sbc	r3, r9, fp
   1131c:	strd	r2, [r0, #16]
   11320:	strd	r8, [r4, #16]
   11324:	ldrb	r8, [r6, #772]	; 0x304
   11328:	cmp	r8, #0
   1132c:	beq	116d4 <__assert_fail@plt+0x7a8>
   11330:	ldrb	r8, [r4, #32]
   11334:	cmp	r8, #0
   11338:	movne	r2, #5
   1133c:	ldrne	r1, [pc, #1796]	; 11a48 <__assert_fail@plt+0xb1c>
   11340:	bne	112ac <__assert_fail@plt+0x380>
   11344:	ldrb	r3, [r4, #34]	; 0x22
   11348:	cmp	r3, #0
   1134c:	movne	r2, #5
   11350:	ldrne	r1, [pc, #1780]	; 11a4c <__assert_fail@plt+0xb20>
   11354:	bne	112ac <__assert_fail@plt+0x380>
   11358:	ldrb	r6, [r6, #768]	; 0x300
   1135c:	cmp	r6, #0
   11360:	bne	1152c <__assert_fail@plt+0x600>
   11364:	ldrb	r8, [r4, #33]	; 0x21
   11368:	cmp	r8, #0
   1136c:	beq	1152c <__assert_fail@plt+0x600>
   11370:	bl	10e18 <__ctype_b_loc@plt>
   11374:	ldr	r2, [r0]
   11378:	sub	r1, r2, #2
   1137c:	add	r2, r2, #508	; 0x1fc
   11380:	add	r2, r2, #2
   11384:	ldrh	r0, [r1, #2]!
   11388:	tst	r0, #256	; 0x100
   1138c:	addne	r7, r7, #1
   11390:	tst	r0, #512	; 0x200
   11394:	addne	r6, r6, #1
   11398:	cmp	r1, r2
   1139c:	bne	11384 <__assert_fail@plt+0x458>
   113a0:	ldrd	r2, [sp, #56]	; 0x38
   113a4:	mvn	r0, #1
   113a8:	mvn	r1, #0
   113ac:	mov	fp, r8
   113b0:	ldr	sl, [r4, #4]
   113b4:	strd	r0, [r4, #8]
   113b8:	strd	r2, [sp, #8]
   113bc:	ldrd	r2, [r4, #16]
   113c0:	strd	r2, [sp, #16]
   113c4:	ldr	r3, [sp, #44]	; 0x2c
   113c8:	strd	r0, [sp, #48]	; 0x30
   113cc:	str	r3, [sp, #28]
   113d0:	add	r1, sp, #36	; 0x24
   113d4:	add	r0, sp, #40	; 0x28
   113d8:	bl	12064 <__assert_fail@plt+0x1138>
   113dc:	mov	r9, r0
   113e0:	add	r1, sp, #120	; 0x78
   113e4:	mov	r0, r4
   113e8:	bl	12064 <__assert_fail@plt+0x1138>
   113ec:	cmp	r8, #0
   113f0:	ldr	r1, [sp, #120]	; 0x78
   113f4:	beq	11434 <__assert_fail@plt+0x508>
   113f8:	cmp	r1, #2
   113fc:	beq	114a8 <__assert_fail@plt+0x57c>
   11400:	cmp	fp, #0
   11404:	beq	11414 <__assert_fail@plt+0x4e8>
   11408:	ldr	r3, [sp, #36]	; 0x24
   1140c:	cmp	r3, #2
   11410:	bne	11434 <__assert_fail@plt+0x508>
   11414:	mov	r2, #5
   11418:	ldr	r1, [pc, #1584]	; 11a50 <__assert_fail@plt+0xb24>
   1141c:	b	112ac <__assert_fail@plt+0x380>
   11420:	cmp	r1, #1
   11424:	movhi	r2, #5
   11428:	ldrhi	r1, [pc, #1572]	; 11a54 <__assert_fail@plt+0xb28>
   1142c:	bls	11324 <__assert_fail@plt+0x3f8>
   11430:	b	112ac <__assert_fail@plt+0x380>
   11434:	cmp	r1, #2
   11438:	beq	114a8 <__assert_fail@plt+0x57c>
   1143c:	mvn	r2, #0
   11440:	ldr	ip, [sp, #36]	; 0x24
   11444:	ldr	r3, [sp, #44]	; 0x2c
   11448:	cmp	ip, #1
   1144c:	subeq	ip, r7, #1
   11450:	subne	ip, r6, #1
   11454:	ldr	r3, [r3, #4]
   11458:	str	r3, [sp, #44]	; 0x2c
   1145c:	mvn	r3, #0
   11460:	strd	r2, [sp, #48]	; 0x30
   11464:	mvn	r2, #0
   11468:	ldr	r3, [r4, #4]
   1146c:	ldr	r3, [r3, #4]
   11470:	str	r3, [r4, #4]
   11474:	mvn	r3, #0
   11478:	strd	r2, [r4, #8]
   1147c:	ldrd	r2, [sp, #56]	; 0x38
   11480:	subs	r2, r2, ip
   11484:	sbc	r3, r3, #0
   11488:	cmp	r1, #1
   1148c:	subeq	r1, r7, #1
   11490:	subne	r1, r6, #1
   11494:	strd	r2, [sp, #56]	; 0x38
   11498:	ldrd	r2, [r4, #16]
   1149c:	subs	r2, r2, r1
   114a0:	sbc	r3, r3, #0
   114a4:	strd	r2, [r4, #16]
   114a8:	ldr	fp, [sp, #48]	; 0x30
   114ac:	ldr	r3, [sp, #52]	; 0x34
   114b0:	ldr	r2, [r4, #12]
   114b4:	and	fp, fp, r3
   114b8:	ldr	r3, [r4, #8]
   114bc:	cmn	fp, #1
   114c0:	movne	fp, #0
   114c4:	moveq	fp, #1
   114c8:	and	r3, r3, r2
   114cc:	cmn	r3, #1
   114d0:	movne	r8, #0
   114d4:	moveq	r8, #1
   114d8:	cmn	r0, #1
   114dc:	cmnne	r9, #1
   114e0:	bne	113d0 <__assert_fail@plt+0x4a4>
   114e4:	ldrd	r0, [sp, #8]
   114e8:	ldrd	r2, [sp, #56]	; 0x38
   114ec:	cmp	r1, r3
   114f0:	cmpeq	r0, r2
   114f4:	bcc	11518 <__assert_fail@plt+0x5ec>
   114f8:	ldrd	r2, [r4, #16]
   114fc:	ldrd	r0, [sp, #16]
   11500:	cmp	r1, r3
   11504:	cmpeq	r0, r2
   11508:	ldrcs	r3, [sp, #28]
   1150c:	strcs	sl, [r4, #4]
   11510:	strcs	r3, [sp, #44]	; 0x2c
   11514:	bcs	1152c <__assert_fail@plt+0x600>
   11518:	ldr	r3, [pc, #1336]	; 11a58 <__assert_fail@plt+0xb2c>
   1151c:	movw	r2, #1224	; 0x4c8
   11520:	ldr	r1, [pc, #1332]	; 11a5c <__assert_fail@plt+0xb30>
   11524:	ldr	r0, [pc, #1332]	; 11a60 <__assert_fail@plt+0xb34>
   11528:	bl	10f2c <__assert_fail@plt>
   1152c:	ldrd	r2, [r4, #16]
   11530:	ldrd	r0, [sp, #56]	; 0x38
   11534:	ldr	r7, [pc, #1224]	; 11a04 <__assert_fail@plt+0xad8>
   11538:	cmp	r1, r3
   1153c:	cmpeq	r0, r2
   11540:	bls	115f0 <__assert_fail@plt+0x6c4>
   11544:	ldrb	r6, [r7, #771]	; 0x303
   11548:	cmp	r6, #0
   1154c:	bne	115f0 <__assert_fail@plt+0x6c4>
   11550:	orrs	ip, r2, r3
   11554:	moveq	r2, #5
   11558:	ldreq	r1, [pc, #1284]	; 11a64 <__assert_fail@plt+0xb38>
   1155c:	beq	112ac <__assert_fail@plt+0x380>
   11560:	ldr	ip, [r4, #4]
   11564:	ldr	lr, [ip]
   11568:	cmp	lr, #4
   1156c:	ldrls	pc, [pc, lr, lsl #2]
   11570:	b	115dc <__assert_fail@plt+0x6b0>
   11574:	ldrdeq	r1, [r1], -r4
   11578:	andeq	r1, r1, r8, lsl #11
   1157c:	andeq	r1, r1, r8, asr #11
   11580:	ldrdeq	r1, [r1], -ip
   11584:	ldrdeq	r1, [r1], -r4
   11588:	ldrb	r6, [ip, #9]
   1158c:	subs	r9, r0, r2
   11590:	mov	r0, #24
   11594:	sbc	r8, r1, r3
   11598:	bl	14c9c <__assert_fail@plt+0x3d70>
   1159c:	mov	r3, #0
   115a0:	str	r3, [r0, #4]
   115a4:	mov	r3, #4
   115a8:	strb	r6, [r0, #8]
   115ac:	str	r3, [r0]
   115b0:	ldr	r3, [r4, #4]
   115b4:	str	r9, [r0, #16]
   115b8:	str	r8, [r0, #20]
   115bc:	cmp	r3, #0
   115c0:	bne	115e0 <__assert_fail@plt+0x6b4>
   115c4:	bl	12418 <__assert_fail@plt+0x14ec>
   115c8:	mov	r2, #5
   115cc:	ldr	r1, [pc, #1172]	; 11a68 <__assert_fail@plt+0xb3c>
   115d0:	b	112ac <__assert_fail@plt+0x380>
   115d4:	ldrb	r6, [ip, #8]
   115d8:	b	1158c <__assert_fail@plt+0x660>
   115dc:	bl	10f14 <abort@plt>
   115e0:	str	r0, [r3, #4]
   115e4:	ldrd	r2, [sp, #56]	; 0x38
   115e8:	str	r0, [r4, #4]
   115ec:	strd	r2, [r4, #16]
   115f0:	ldrb	r3, [r7, #768]	; 0x300
   115f4:	cmp	r3, #0
   115f8:	beq	11668 <__assert_fail@plt+0x73c>
   115fc:	ldrb	r3, [sp, #73]	; 0x49
   11600:	cmp	r3, #0
   11604:	beq	11668 <__assert_fail@plt+0x73c>
   11608:	ldrd	r2, [r4, #16]
   1160c:	ldrd	r0, [sp, #56]	; 0x38
   11610:	cmp	r3, r1
   11614:	cmpeq	r2, r0
   11618:	bne	11640 <__assert_fail@plt+0x714>
   1161c:	mvn	r2, #1
   11620:	mvn	r3, #0
   11624:	mov	r1, #0
   11628:	mov	r0, r4
   1162c:	strd	r2, [r4, #8]
   11630:	bl	12064 <__assert_fail@plt+0x1138>
   11634:	cmn	r0, #1
   11638:	mov	r6, r0
   1163c:	bne	11654 <__assert_fail@plt+0x728>
   11640:	mov	r2, #5
   11644:	ldr	r1, [pc, #1056]	; 11a6c <__assert_fail@plt+0xb40>
   11648:	b	112ac <__assert_fail@plt+0x380>
   1164c:	cmp	r6, r0
   11650:	bne	11640 <__assert_fail@plt+0x714>
   11654:	mov	r1, #0
   11658:	mov	r0, r4
   1165c:	bl	12064 <__assert_fail@plt+0x1138>
   11660:	cmn	r0, #1
   11664:	bne	1164c <__assert_fail@plt+0x720>
   11668:	ldr	r3, [pc, #1024]	; 11a70 <__assert_fail@plt+0xb44>
   1166c:	mov	r1, #2
   11670:	ldr	r6, [pc, #908]	; 11a04 <__assert_fail@plt+0xad8>
   11674:	ldr	r0, [r3]
   11678:	bl	1309c <__assert_fail@plt+0x2170>
   1167c:	ldrb	sl, [r6, #770]	; 0x302
   11680:	mov	r7, r6
   11684:	cmp	r5, #1
   11688:	movne	r8, #0
   1168c:	andeq	r8, sl, #1
   11690:	cmp	r8, #0
   11694:	beq	116e8 <__assert_fail@plt+0x7bc>
   11698:	add	r0, sp, #40	; 0x28
   1169c:	add	r2, r6, #512	; 0x200
   116a0:	ldrb	r1, [r6, #768]	; 0x300
   116a4:	bl	12b54 <__assert_fail@plt+0x1c28>
   116a8:	ldr	r0, [pc, #964]	; 11a74 <__assert_fail@plt+0xb48>
   116ac:	bl	12bb8 <__assert_fail@plt+0x1c8c>
   116b0:	mov	r0, #0
   116b4:	bl	10f20 <close@plt>
   116b8:	cmp	r0, #0
   116bc:	beq	11080 <__assert_fail@plt+0x154>
   116c0:	bl	10e48 <__errno_location@plt>
   116c4:	mov	r2, #5
   116c8:	ldr	r1, [pc, #936]	; 11a78 <__assert_fail@plt+0xb4c>
   116cc:	ldr	r4, [r0]
   116d0:	b	11754 <__assert_fail@plt+0x828>
   116d4:	cmp	r1, #0
   116d8:	movne	r2, #5
   116dc:	ldrne	r1, [pc, #920]	; 11a7c <__assert_fail@plt+0xb50>
   116e0:	beq	11668 <__assert_fail@plt+0x73c>
   116e4:	b	112ac <__assert_fail@plt+0x380>
   116e8:	ldrb	r3, [r6, #769]	; 0x301
   116ec:	cmp	r3, #0
   116f0:	beq	11798 <__assert_fail@plt+0x86c>
   116f4:	cmp	r5, #1
   116f8:	bne	11768 <__assert_fail@plt+0x83c>
   116fc:	mov	r2, r6
   11700:	ldrb	r1, [r6, #768]	; 0x300
   11704:	add	r0, sp, #40	; 0x28
   11708:	bl	12b54 <__assert_fail@plt+0x1c28>
   1170c:	ldr	r5, [pc, #876]	; 11a80 <__assert_fail@plt+0xb54>
   11710:	ldr	r6, [pc, #764]	; 11a14 <__assert_fail@plt+0xae8>
   11714:	mov	r1, #8192	; 0x2000
   11718:	mov	r0, r5
   1171c:	bl	1235c <__assert_fail@plt+0x1430>
   11720:	subs	r4, r0, #0
   11724:	beq	116b0 <__assert_fail@plt+0x784>
   11728:	mov	r2, r4
   1172c:	mov	r1, #1
   11730:	ldr	r3, [r6]
   11734:	mov	r0, r5
   11738:	bl	10d34 <fwrite_unlocked@plt>
   1173c:	cmp	r0, r4
   11740:	beq	11714 <__assert_fail@plt+0x7e8>
   11744:	bl	10e48 <__errno_location@plt>
   11748:	ldr	r1, [pc, #820]	; 11a84 <__assert_fail@plt+0xb58>
   1174c:	mov	r2, #5
   11750:	ldr	r4, [r0]
   11754:	mov	r0, #0
   11758:	bl	10d64 <dcgettext@plt>
   1175c:	mov	r2, r0
   11760:	mov	r1, r4
   11764:	b	112bc <__assert_fail@plt+0x390>
   11768:	cmp	sl, #0
   1176c:	beq	11798 <__assert_fail@plt+0x86c>
   11770:	mov	r2, r6
   11774:	ldrb	r1, [r6, #768]	; 0x300
   11778:	add	r0, sp, #40	; 0x28
   1177c:	bl	12b54 <__assert_fail@plt+0x1c28>
   11780:	mov	r0, r4
   11784:	add	r2, r6, #512	; 0x200
   11788:	mov	r1, r8
   1178c:	bl	12b54 <__assert_fail@plt+0x1c28>
   11790:	ldr	r0, [pc, #752]	; 11a88 <__assert_fail@plt+0xb5c>
   11794:	b	116ac <__assert_fail@plt+0x780>
   11798:	ldrb	r3, [r7, #772]	; 0x304
   1179c:	cmp	r3, #0
   117a0:	beq	116b0 <__assert_fail@plt+0x784>
   117a4:	ldrb	r3, [r7, #768]	; 0x300
   117a8:	ldr	r6, [pc, #732]	; 11a8c <__assert_fail@plt+0xb60>
   117ac:	cmp	r3, #0
   117b0:	moveq	r2, r6
   117b4:	beq	11884 <__assert_fail@plt+0x958>
   117b8:	sub	r2, r6, #256	; 0x100
   117bc:	mov	r1, #0
   117c0:	add	r0, sp, #40	; 0x28
   117c4:	bl	12b54 <__assert_fail@plt+0x1c28>
   117c8:	mvn	r2, #1
   117cc:	mvn	r3, #0
   117d0:	strd	r2, [r4, #8]
   117d4:	mov	r2, r6
   117d8:	mov	r3, #0
   117dc:	strb	r3, [r2], #1
   117e0:	add	r3, r3, #1
   117e4:	cmp	r3, #256	; 0x100
   117e8:	bne	117dc <__assert_fail@plt+0x8b0>
   117ec:	ldr	r8, [pc, #528]	; 11a04 <__assert_fail@plt+0xad8>
   117f0:	mov	r5, #0
   117f4:	ldrb	r1, [r8], #1
   117f8:	cmp	r1, #0
   117fc:	bne	11834 <__assert_fail@plt+0x908>
   11800:	mov	r0, r4
   11804:	bl	12064 <__assert_fail@plt+0x1138>
   11808:	cmn	r0, #1
   1180c:	bne	11830 <__assert_fail@plt+0x904>
   11810:	ldrb	r3, [r7, #771]	; 0x303
   11814:	cmp	r3, #0
   11818:	bne	11840 <__assert_fail@plt+0x914>
   1181c:	ldr	r3, [pc, #620]	; 11a90 <__assert_fail@plt+0xb64>
   11820:	mov	r2, #1840	; 0x730
   11824:	ldr	r1, [pc, #560]	; 11a5c <__assert_fail@plt+0xb30>
   11828:	ldr	r0, [pc, #612]	; 11a94 <__assert_fail@plt+0xb68>
   1182c:	b	11528 <__assert_fail@plt+0x5fc>
   11830:	strb	r0, [r5, r6]
   11834:	add	r5, r5, #1
   11838:	cmp	r5, #256	; 0x100
   1183c:	bne	117f4 <__assert_fail@plt+0x8c8>
   11840:	cmp	sl, #0
   11844:	bne	119c8 <__assert_fail@plt+0xa9c>
   11848:	ldr	r5, [pc, #560]	; 11a80 <__assert_fail@plt+0xb54>
   1184c:	ldr	r6, [pc, #448]	; 11a14 <__assert_fail@plt+0xae8>
   11850:	mov	r1, #8192	; 0x2000
   11854:	mov	r0, r5
   11858:	bl	123e0 <__assert_fail@plt+0x14b4>
   1185c:	subs	r4, r0, #0
   11860:	beq	116b0 <__assert_fail@plt+0x784>
   11864:	mov	r2, r4
   11868:	mov	r1, #1
   1186c:	ldr	r3, [r6]
   11870:	mov	r0, r5
   11874:	bl	10d34 <fwrite_unlocked@plt>
   11878:	cmp	r0, r4
   1187c:	beq	11850 <__assert_fail@plt+0x924>
   11880:	b	11744 <__assert_fail@plt+0x818>
   11884:	strb	r3, [r2], #1
   11888:	add	r3, r3, #1
   1188c:	cmp	r3, #256	; 0x100
   11890:	bne	11884 <__assert_fail@plt+0x958>
   11894:	mvn	r2, #1
   11898:	mvn	r3, #0
   1189c:	mvn	r8, #0
   118a0:	mvn	r9, #0
   118a4:	strd	r2, [r4, #8]
   118a8:	strd	r2, [sp, #48]	; 0x30
   118ac:	add	r1, sp, #36	; 0x24
   118b0:	add	r0, sp, #40	; 0x28
   118b4:	bl	12064 <__assert_fail@plt+0x1138>
   118b8:	mov	fp, r0
   118bc:	add	r1, sp, #120	; 0x78
   118c0:	mov	r0, r4
   118c4:	bl	12064 <__assert_fail@plt+0x1138>
   118c8:	ldr	r5, [sp, #36]	; 0x24
   118cc:	cmp	r5, #0
   118d0:	bne	11934 <__assert_fail@plt+0xa08>
   118d4:	ldr	r3, [sp, #120]	; 0x78
   118d8:	cmp	r3, #1
   118dc:	bne	1197c <__assert_fail@plt+0xa50>
   118e0:	bl	10e18 <__ctype_b_loc@plt>
   118e4:	ldr	fp, [r0]
   118e8:	sub	fp, fp, #2
   118ec:	ldrh	r3, [fp, #2]!
   118f0:	tst	r3, #512	; 0x200
   118f4:	beq	11904 <__assert_fail@plt+0x9d8>
   118f8:	mov	r0, r5
   118fc:	bl	10ecc <toupper@plt>
   11900:	strb	r0, [r6, r5]
   11904:	add	r5, r5, #1
   11908:	cmp	r5, #256	; 0x100
   1190c:	bne	118ec <__assert_fail@plt+0x9c0>
   11910:	ldr	r3, [sp, #44]	; 0x2c
   11914:	ldr	r3, [r3, #4]
   11918:	str	r3, [sp, #44]	; 0x2c
   1191c:	ldr	r3, [r4, #4]
   11920:	strd	r8, [sp, #48]	; 0x30
   11924:	ldr	r3, [r3, #4]
   11928:	str	r3, [r4, #4]
   1192c:	strd	r8, [r4, #8]
   11930:	b	118ac <__assert_fail@plt+0x980>
   11934:	cmp	r5, #1
   11938:	bne	1197c <__assert_fail@plt+0xa50>
   1193c:	ldr	r5, [sp, #120]	; 0x78
   11940:	cmp	r5, #0
   11944:	bne	1197c <__assert_fail@plt+0xa50>
   11948:	bl	10e18 <__ctype_b_loc@plt>
   1194c:	ldr	fp, [r0]
   11950:	sub	fp, fp, #2
   11954:	ldrh	r3, [fp, #2]!
   11958:	tst	r3, #256	; 0x100
   1195c:	beq	1196c <__assert_fail@plt+0xa40>
   11960:	mov	r0, r5
   11964:	bl	10d1c <tolower@plt>
   11968:	strb	r0, [r6, r5]
   1196c:	add	r5, r5, #1
   11970:	cmp	r5, #256	; 0x100
   11974:	bne	11954 <__assert_fail@plt+0xa28>
   11978:	b	11910 <__assert_fail@plt+0x9e4>
   1197c:	cmn	fp, #1
   11980:	cmnne	r0, #1
   11984:	beq	119a0 <__assert_fail@plt+0xa74>
   11988:	ldr	r3, [sp, #120]	; 0x78
   1198c:	add	fp, r7, fp
   11990:	strb	r0, [fp, #256]	; 0x100
   11994:	cmp	r3, #2
   11998:	beq	118ac <__assert_fail@plt+0x980>
   1199c:	b	11910 <__assert_fail@plt+0x9e4>
   119a0:	cmn	fp, #1
   119a4:	beq	11840 <__assert_fail@plt+0x914>
   119a8:	ldrb	r3, [r7, #771]	; 0x303
   119ac:	cmp	r3, #0
   119b0:	bne	11840 <__assert_fail@plt+0x914>
   119b4:	ldr	r3, [pc, #212]	; 11a90 <__assert_fail@plt+0xb64>
   119b8:	movw	r2, #1893	; 0x765
   119bc:	ldr	r1, [pc, #152]	; 11a5c <__assert_fail@plt+0xb30>
   119c0:	ldr	r0, [pc, #208]	; 11a98 <__assert_fail@plt+0xb6c>
   119c4:	b	11528 <__assert_fail@plt+0x5fc>
   119c8:	mov	r0, r4
   119cc:	ldr	r2, [pc, #200]	; 11a9c <__assert_fail@plt+0xb70>
   119d0:	mov	r1, #0
   119d4:	bl	12b54 <__assert_fail@plt+0x1c28>
   119d8:	ldr	r0, [pc, #192]	; 11aa0 <__assert_fail@plt+0xb74>
   119dc:	b	116ac <__assert_fail@plt+0x780>
   119e0:	mov	r0, #1
   119e4:	add	sp, sp, #380	; 0x17c
   119e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119ec:	andeq	r6, r1, r1, asr #13
   119f0:	andeq	r6, r1, r2, lsr r7
   119f4:	andeq	r6, r1, pc, lsl r6
   119f8:	andeq	r2, r1, r4, asr #31
   119fc:	muleq	r1, ip, r9
   11a00:	andeq	r6, r1, r9, asr r7
   11a04:	andeq	r8, r2, r9, asr r1
   11a08:	andeq	r8, r2, r0, asr #2
   11a0c:	andeq	r6, r1, r1, ror #14
   11a10:	andeq	r6, r1, ip, asr #14
   11a14:	andeq	r8, r2, r4, asr r1
   11a18:	andeq	r6, r1, fp, lsl r6
   11a1c:	strdeq	r8, [r2], -r0
   11a20:	andeq	r5, r1, fp, lsr #25
   11a24:	andeq	r6, r1, sl, asr #14
   11a28:	andeq	r6, r1, r1, ror r7
   11a2c:	andeq	r8, r2, r8, asr #2
   11a30:	andeq	r6, r1, r2, asr #13
   11a34:	andeq	r6, r1, r6, lsl #14
   11a38:	andeq	r6, r1, fp, asr #25
   11a3c:	andeq	r6, r1, sl, lsl #15
   11a40:	muleq	r1, fp, r7
   11a44:	andeq	r6, r1, r1, ror #15
   11a48:	andeq	r6, r1, sl, asr #16
   11a4c:	andeq	r6, r1, r7, lsl #17
   11a50:	andeq	r6, r1, r7, ror #17
   11a54:	andeq	r6, r1, r5, lsl r8
   11a58:	andeq	r5, r1, ip, lsl #20
   11a5c:	andeq	r5, r1, r4, asr #20
   11a60:	andeq	r6, r1, r7, lsl r9
   11a64:	andeq	r6, r1, ip, asr #18
   11a68:	andeq	r6, r1, r0, lsl #19
   11a6c:	andeq	r6, r1, r9, ror #19
   11a70:	andeq	r8, r2, r0, asr r1
   11a74:	andeq	r2, r1, r4, lsl r3
   11a78:	andeq	r6, r1, r7, asr #21
   11a7c:	andeq	r6, r1, r4, asr sl
   11a80:	andeq	r8, r2, lr, asr r4
   11a84:	muleq	r1, pc, ip	; <UNPREDICTABLE>
   11a88:	andeq	r2, r1, ip, asr r3
   11a8c:	andeq	r8, r2, r9, asr r2
   11a90:	andeq	r5, r1, r2, lsr #20
   11a94:	muleq	r1, r3, sl
   11a98:	andeq	r6, r1, sp, lsr #21
   11a9c:	andeq	r8, r2, r9, asr r3
   11aa0:	andeq	r2, r1, r0, ror #7
   11aa4:	mov	fp, #0
   11aa8:	mov	lr, #0
   11aac:	pop	{r1}		; (ldr r1, [sp], #4)
   11ab0:	mov	r2, sp
   11ab4:	push	{r2}		; (str r2, [sp, #-4]!)
   11ab8:	push	{r0}		; (str r0, [sp, #-4]!)
   11abc:	ldr	ip, [pc, #16]	; 11ad4 <__assert_fail@plt+0xba8>
   11ac0:	push	{ip}		; (str ip, [sp, #-4]!)
   11ac4:	ldr	r0, [pc, #12]	; 11ad8 <__assert_fail@plt+0xbac>
   11ac8:	ldr	r3, [pc, #12]	; 11adc <__assert_fail@plt+0xbb0>
   11acc:	bl	10de8 <__libc_start_main@plt>
   11ad0:	bl	10f14 <abort@plt>
   11ad4:	muleq	r1, r8, r8
   11ad8:	andeq	r0, r1, r0, asr pc
   11adc:	andeq	r5, r1, r8, lsr r8
   11ae0:	ldr	r3, [pc, #20]	; 11afc <__assert_fail@plt+0xbd0>
   11ae4:	ldr	r2, [pc, #20]	; 11b00 <__assert_fail@plt+0xbd4>
   11ae8:	add	r3, pc, r3
   11aec:	ldr	r2, [r3, r2]
   11af0:	cmp	r2, #0
   11af4:	bxeq	lr
   11af8:	b	10e00 <__gmon_start__@plt>
   11afc:	andeq	r6, r1, r0, lsl r5
   11b00:	andeq	r0, r0, r4, ror #1
   11b04:	ldr	r0, [pc, #24]	; 11b24 <__assert_fail@plt+0xbf8>
   11b08:	ldr	r3, [pc, #24]	; 11b28 <__assert_fail@plt+0xbfc>
   11b0c:	cmp	r3, r0
   11b10:	bxeq	lr
   11b14:	ldr	r3, [pc, #16]	; 11b2c <__assert_fail@plt+0xc00>
   11b18:	cmp	r3, #0
   11b1c:	bxeq	lr
   11b20:	bx	r3
   11b24:	andeq	r8, r2, r8, lsr r1
   11b28:	andeq	r8, r2, r8, lsr r1
   11b2c:	andeq	r0, r0, r0
   11b30:	ldr	r0, [pc, #36]	; 11b5c <__assert_fail@plt+0xc30>
   11b34:	ldr	r1, [pc, #36]	; 11b60 <__assert_fail@plt+0xc34>
   11b38:	sub	r1, r1, r0
   11b3c:	asr	r1, r1, #2
   11b40:	add	r1, r1, r1, lsr #31
   11b44:	asrs	r1, r1, #1
   11b48:	bxeq	lr
   11b4c:	ldr	r3, [pc, #16]	; 11b64 <__assert_fail@plt+0xc38>
   11b50:	cmp	r3, #0
   11b54:	bxeq	lr
   11b58:	bx	r3
   11b5c:	andeq	r8, r2, r8, lsr r1
   11b60:	andeq	r8, r2, r8, lsr r1
   11b64:	andeq	r0, r0, r0
   11b68:	push	{r4, lr}
   11b6c:	ldr	r4, [pc, #24]	; 11b8c <__assert_fail@plt+0xc60>
   11b70:	ldrb	r3, [r4]
   11b74:	cmp	r3, #0
   11b78:	popne	{r4, pc}
   11b7c:	bl	11b04 <__assert_fail@plt+0xbd8>
   11b80:	mov	r3, #1
   11b84:	strb	r3, [r4]
   11b88:	pop	{r4, pc}
   11b8c:	andeq	r8, r2, r8, asr r1
   11b90:	b	11b30 <__assert_fail@plt+0xc04>
   11b94:	ldr	r3, [r0]
   11b98:	ldrb	r3, [r3, r1]
   11b9c:	cmp	r3, r2
   11ba0:	ldreq	r3, [r0, #4]
   11ba4:	movne	r0, #0
   11ba8:	ldrbeq	r0, [r3, r1]
   11bac:	eoreq	r0, r0, #1
   11bb0:	and	r0, r0, #1
   11bb4:	bx	lr
   11bb8:	push	{r0, r1, r2, r4, r5, lr}
   11bbc:	mov	r5, r0
   11bc0:	mov	r0, #5
   11bc4:	bl	14c9c <__assert_fail@plt+0x3d70>
   11bc8:	mov	r4, r0
   11bcc:	bl	10e18 <__ctype_b_loc@plt>
   11bd0:	ldr	r2, [r0]
   11bd4:	lsl	r3, r5, #1
   11bd8:	ldrh	r3, [r2, r3]
   11bdc:	tst	r3, #16384	; 0x4000
   11be0:	movne	r3, #0
   11be4:	strbne	r5, [r4]
   11be8:	strbne	r3, [r4, #1]
   11bec:	bne	11c08 <__assert_fail@plt+0xcdc>
   11bf0:	ldr	r3, [pc, #28]	; 11c14 <__assert_fail@plt+0xce8>
   11bf4:	mov	r2, #5
   11bf8:	mov	r1, #1
   11bfc:	mov	r0, r4
   11c00:	str	r5, [sp]
   11c04:	bl	10e54 <__sprintf_chk@plt>
   11c08:	mov	r0, r4
   11c0c:	add	sp, sp, #12
   11c10:	pop	{r4, r5, pc}
   11c14:	andeq	r5, r1, r7, lsr #20
   11c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c1c:	mov	r5, r1
   11c20:	mov	r4, r0
   11c24:	sub	sp, sp, #20
   11c28:	add	r0, r5, #1
   11c2c:	mov	r1, #4
   11c30:	add	r5, r4, r5
   11c34:	ldr	r8, [pc, #216]	; 11d14 <__assert_fail@plt+0xde8>
   11c38:	bl	14d5c <__assert_fail@plt+0x3e30>
   11c3c:	ldr	r9, [pc, #212]	; 11d18 <__assert_fail@plt+0xdec>
   11c40:	mov	r6, r0
   11c44:	mov	r7, r0
   11c48:	ldr	sl, [pc, #204]	; 11d1c <__assert_fail@plt+0xdf0>
   11c4c:	cmp	r4, r5
   11c50:	bne	11c60 <__assert_fail@plt+0xd34>
   11c54:	mov	r0, r6
   11c58:	add	sp, sp, #20
   11c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c60:	ldrb	fp, [r4], #1
   11c64:	cmp	fp, #10
   11c68:	moveq	r1, r8
   11c6c:	beq	11d04 <__assert_fail@plt+0xdd8>
   11c70:	bhi	11cd8 <__assert_fail@plt+0xdac>
   11c74:	cmp	fp, #8
   11c78:	ldreq	r1, [pc, #160]	; 11d20 <__assert_fail@plt+0xdf4>
   11c7c:	beq	11d04 <__assert_fail@plt+0xdd8>
   11c80:	ldrhi	r1, [pc, #156]	; 11d24 <__assert_fail@plt+0xdf8>
   11c84:	bhi	11d04 <__assert_fail@plt+0xdd8>
   11c88:	cmp	fp, #7
   11c8c:	ldreq	r1, [pc, #148]	; 11d28 <__assert_fail@plt+0xdfc>
   11c90:	beq	11d04 <__assert_fail@plt+0xdd8>
   11c94:	bl	10e18 <__ctype_b_loc@plt>
   11c98:	ldr	r2, [r0]
   11c9c:	lsl	r3, fp, #1
   11ca0:	ldrh	r3, [r2, r3]
   11ca4:	tst	r3, #16384	; 0x4000
   11ca8:	movne	r3, #0
   11cac:	strbne	fp, [sp, #8]
   11cb0:	strbne	r3, [sp, #9]
   11cb4:	bne	11cd0 <__assert_fail@plt+0xda4>
   11cb8:	mov	r3, r9
   11cbc:	mov	r2, #5
   11cc0:	str	fp, [sp]
   11cc4:	mov	r1, #1
   11cc8:	add	r0, sp, #8
   11ccc:	bl	10e54 <__sprintf_chk@plt>
   11cd0:	add	r1, sp, #8
   11cd4:	b	11d04 <__assert_fail@plt+0xdd8>
   11cd8:	cmp	fp, #12
   11cdc:	moveq	r1, sl
   11ce0:	beq	11d04 <__assert_fail@plt+0xdd8>
   11ce4:	ldrcc	r1, [pc, #64]	; 11d2c <__assert_fail@plt+0xe00>
   11ce8:	bcc	11d04 <__assert_fail@plt+0xdd8>
   11cec:	cmp	fp, #13
   11cf0:	ldreq	r1, [pc, #56]	; 11d30 <__assert_fail@plt+0xe04>
   11cf4:	beq	11d04 <__assert_fail@plt+0xdd8>
   11cf8:	cmp	fp, #92	; 0x5c
   11cfc:	ldreq	r1, [pc, #48]	; 11d34 <__assert_fail@plt+0xe08>
   11d00:	bne	11c94 <__assert_fail@plt+0xd68>
   11d04:	mov	r0, r7
   11d08:	bl	10d4c <stpcpy@plt>
   11d0c:	mov	r7, r0
   11d10:	b	11c4c <__assert_fail@plt+0xd20>
   11d14:	andeq	r5, r1, r5, lsr sl
   11d18:	andeq	r5, r1, r7, lsr #20
   11d1c:	andeq	r5, r1, r2, lsr sl
   11d20:	andeq	r5, r1, pc, lsr #20
   11d24:	andeq	r5, r1, fp, lsr sl
   11d28:	andeq	r5, r1, r1, asr #20
   11d2c:	andeq	r5, r1, lr, lsr sl
   11d30:	andeq	r5, r1, r8, lsr sl
   11d34:	andeq	r5, r1, sp, lsr #20
   11d38:	push	{r4, lr}
   11d3c:	mov	r4, r1
   11d40:	cmp	r0, #11
   11d44:	ldrls	pc, [pc, r0, lsl #2]
   11d48:	b	11ea4 <__assert_fail@plt+0xf78>
   11d4c:	andeq	r1, r1, ip, ror sp
   11d50:	muleq	r1, ip, sp
   11d54:			; <UNDEFINED> instruction: 0x00011db4
   11d58:	andeq	r1, r1, ip, asr #27
   11d5c:	andeq	r1, r1, r4, ror #27
   11d60:	strdeq	r1, [r1], -ip
   11d64:	andeq	r1, r1, r4, lsl lr
   11d68:	andeq	r1, r1, ip, lsr #28
   11d6c:	andeq	r1, r1, r4, asr #28
   11d70:	andeq	r1, r1, ip, asr lr
   11d74:	andeq	r1, r1, r4, ror lr
   11d78:	andeq	r1, r1, ip, lsl #29
   11d7c:	bl	10e18 <__ctype_b_loc@plt>
   11d80:	ldr	r3, [r0]
   11d84:	lsl	r4, r4, #1
   11d88:	ldrh	r0, [r3, r4]
   11d8c:	and	r0, r0, #8
   11d90:	adds	r0, r0, #0
   11d94:	movne	r0, #1
   11d98:	pop	{r4, pc}
   11d9c:	bl	10e18 <__ctype_b_loc@plt>
   11da0:	ldr	r3, [r0]
   11da4:	lsl	r4, r4, #1
   11da8:	ldrh	r0, [r3, r4]
   11dac:	and	r0, r0, #1024	; 0x400
   11db0:	b	11d90 <__assert_fail@plt+0xe64>
   11db4:	bl	10e18 <__ctype_b_loc@plt>
   11db8:	ldr	r3, [r0]
   11dbc:	lsl	r4, r4, #1
   11dc0:	ldrh	r0, [r3, r4]
   11dc4:	and	r0, r0, #1
   11dc8:	b	11d90 <__assert_fail@plt+0xe64>
   11dcc:	bl	10e18 <__ctype_b_loc@plt>
   11dd0:	ldr	r3, [r0]
   11dd4:	lsl	r4, r4, #1
   11dd8:	ldrh	r0, [r3, r4]
   11ddc:	and	r0, r0, #2
   11de0:	b	11d90 <__assert_fail@plt+0xe64>
   11de4:	bl	10e18 <__ctype_b_loc@plt>
   11de8:	ldr	r3, [r0]
   11dec:	lsl	r4, r4, #1
   11df0:	ldrh	r0, [r3, r4]
   11df4:	and	r0, r0, #2048	; 0x800
   11df8:	b	11d90 <__assert_fail@plt+0xe64>
   11dfc:	bl	10e18 <__ctype_b_loc@plt>
   11e00:	ldr	r3, [r0]
   11e04:	lsl	r4, r4, #1
   11e08:	ldrh	r0, [r3, r4]
   11e0c:	and	r0, r0, #32768	; 0x8000
   11e10:	b	11d90 <__assert_fail@plt+0xe64>
   11e14:	bl	10e18 <__ctype_b_loc@plt>
   11e18:	ldr	r3, [r0]
   11e1c:	lsl	r4, r4, #1
   11e20:	ldrh	r0, [r3, r4]
   11e24:	and	r0, r0, #512	; 0x200
   11e28:	b	11d90 <__assert_fail@plt+0xe64>
   11e2c:	bl	10e18 <__ctype_b_loc@plt>
   11e30:	ldr	r3, [r0]
   11e34:	lsl	r4, r4, #1
   11e38:	ldrh	r0, [r3, r4]
   11e3c:	and	r0, r0, #16384	; 0x4000
   11e40:	b	11d90 <__assert_fail@plt+0xe64>
   11e44:	bl	10e18 <__ctype_b_loc@plt>
   11e48:	ldr	r3, [r0]
   11e4c:	lsl	r4, r4, #1
   11e50:	ldrh	r0, [r3, r4]
   11e54:	and	r0, r0, #4
   11e58:	b	11d90 <__assert_fail@plt+0xe64>
   11e5c:	bl	10e18 <__ctype_b_loc@plt>
   11e60:	ldr	r3, [r0]
   11e64:	lsl	r4, r4, #1
   11e68:	ldrh	r0, [r3, r4]
   11e6c:	and	r0, r0, #8192	; 0x2000
   11e70:	b	11d90 <__assert_fail@plt+0xe64>
   11e74:	bl	10e18 <__ctype_b_loc@plt>
   11e78:	ldr	r3, [r0]
   11e7c:	lsl	r4, r4, #1
   11e80:	ldrh	r0, [r3, r4]
   11e84:	and	r0, r0, #256	; 0x100
   11e88:	b	11d90 <__assert_fail@plt+0xe64>
   11e8c:	bl	10e18 <__ctype_b_loc@plt>
   11e90:	ldr	r3, [r0]
   11e94:	lsl	r4, r4, #1
   11e98:	ldrh	r0, [r3, r4]
   11e9c:	and	r0, r0, #4096	; 0x1000
   11ea0:	b	11d90 <__assert_fail@plt+0xe64>
   11ea4:	bl	10f14 <abort@plt>
   11ea8:	mov	r3, #0
   11eac:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb0:	mov	r6, r0
   11eb4:	mov	r8, #0
   11eb8:	mov	r9, #0
   11ebc:	mov	sl, #1
   11ec0:	str	r3, [r0, #24]
   11ec4:	strh	r3, [r0, #32]
   11ec8:	strb	r3, [r0, #34]	; 0x22
   11ecc:	ldr	r3, [r0]
   11ed0:	ldr	r7, [r3, #4]
   11ed4:	cmp	r7, #0
   11ed8:	bne	11ee8 <__assert_fail@plt+0xfbc>
   11edc:	strd	r8, [r6, #16]
   11ee0:	add	sp, sp, #12
   11ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ee8:	ldr	r3, [r7]
   11eec:	cmp	r3, #4
   11ef0:	ldrls	pc, [pc, r3, lsl #2]
   11ef4:	b	1203c <__assert_fail@plt+0x1110>
   11ef8:	andeq	r2, r1, r0, asr #32
   11efc:	andeq	r1, r1, ip, lsl #30
   11f00:	andeq	r1, r1, ip, lsl #31
   11f04:	andeq	r1, r1, r4, ror #31
   11f08:	andeq	r2, r1, ip, lsl r0
   11f0c:	ldrb	r4, [r7, #9]
   11f10:	ldrb	r3, [r7, #8]
   11f14:	cmp	r4, r3
   11f18:	bcs	11f30 <__assert_fail@plt+0x1004>
   11f1c:	ldr	r3, [pc, #304]	; 12054 <__assert_fail@plt+0x1128>
   11f20:	movw	r2, #1265	; 0x4f1
   11f24:	ldr	r1, [pc, #300]	; 12058 <__assert_fail@plt+0x112c>
   11f28:	ldr	r0, [pc, #300]	; 1205c <__assert_fail@plt+0x1130>
   11f2c:	bl	10f2c <__assert_fail@plt>
   11f30:	sub	r4, r4, r3
   11f34:	add	r4, r4, #1
   11f38:	asr	r5, r4, #31
   11f3c:	adds	r2, r8, r4
   11f40:	adcs	r3, r9, r5
   11f44:	mov	r8, r2
   11f48:	mov	r9, r3
   11f4c:	and	r3, r8, r3
   11f50:	movcs	r2, #1
   11f54:	movcc	r2, #0
   11f58:	cmn	r3, #1
   11f5c:	movne	r3, #0
   11f60:	moveq	r3, #1
   11f64:	orrs	r3, r2, r3
   11f68:	beq	1204c <__assert_fail@plt+0x1120>
   11f6c:	mov	r2, #5
   11f70:	ldr	r1, [pc, #232]	; 12060 <__assert_fail@plt+0x1134>
   11f74:	mov	r0, #0
   11f78:	bl	10d64 <dcgettext@plt>
   11f7c:	mov	r2, r0
   11f80:	mov	r1, #0
   11f84:	mov	r0, #1
   11f88:	bl	10dd0 <error@plt>
   11f8c:	mov	fp, #0
   11f90:	mov	r4, #0
   11f94:	ldr	r3, [r7, #8]
   11f98:	mov	r5, #0
   11f9c:	strb	sl, [r6, #33]	; 0x21
   11fa0:	mov	r0, r3
   11fa4:	uxtb	r1, fp
   11fa8:	str	r3, [sp, #4]
   11fac:	bl	11d38 <__assert_fail@plt+0xe0c>
   11fb0:	cmp	r0, #0
   11fb4:	ldr	r3, [sp, #4]
   11fb8:	beq	11fc4 <__assert_fail@plt+0x1098>
   11fbc:	adds	r4, r4, #1
   11fc0:	adc	r5, r5, #0
   11fc4:	add	fp, fp, #1
   11fc8:	cmp	fp, #256	; 0x100
   11fcc:	bne	11fa0 <__assert_fail@plt+0x1074>
   11fd0:	cmp	r3, #6
   11fd4:	beq	11f3c <__assert_fail@plt+0x1010>
   11fd8:	cmp	r3, #10
   11fdc:	strbne	sl, [r6, #34]	; 0x22
   11fe0:	b	11f3c <__assert_fail@plt+0x1010>
   11fe4:	ldrb	r2, [r7, #8]
   11fe8:	mov	r3, #0
   11fec:	mov	r4, #0
   11ff0:	mov	r5, #0
   11ff4:	uxtb	r1, r3
   11ff8:	cmp	r2, r1
   11ffc:	bne	12008 <__assert_fail@plt+0x10dc>
   12000:	adds	r4, r4, #1
   12004:	adc	r5, r5, #0
   12008:	add	r3, r3, #1
   1200c:	cmp	r3, #256	; 0x100
   12010:	bne	11ff4 <__assert_fail@plt+0x10c8>
   12014:	strb	sl, [r6, #32]
   12018:	b	11f3c <__assert_fail@plt+0x1010>
   1201c:	ldrd	r4, [r7, #16]
   12020:	orrs	r3, r4, r5
   12024:	bne	11f3c <__assert_fail@plt+0x1010>
   12028:	ldr	r3, [r6, #24]
   1202c:	str	r7, [r6, #28]
   12030:	add	r3, r3, #1
   12034:	str	r3, [r6, #24]
   12038:	b	11f3c <__assert_fail@plt+0x1010>
   1203c:	bl	10f14 <abort@plt>
   12040:	mov	r4, #1
   12044:	mov	r5, #0
   12048:	b	11f3c <__assert_fail@plt+0x1010>
   1204c:	ldr	r7, [r7, #4]
   12050:	b	11ed4 <__assert_fail@plt+0xfa8>
   12054:	andeq	r5, r1, r0, asr #17
   12058:	andeq	r5, r1, r4, asr #20
   1205c:	andeq	r5, r1, sp, asr #20
   12060:	andeq	r5, r1, fp, ror sl
   12064:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12068:	mov	ip, r1
   1206c:	mov	r4, r0
   12070:	mvn	sl, #1
   12074:	mvn	fp, #0
   12078:	mvn	r2, #0
   1207c:	mvn	r3, #0
   12080:	cmp	ip, #0
   12084:	movne	r1, #2
   12088:	strne	r1, [ip]
   1208c:	ldrd	r0, [r4, #8]
   12090:	cmp	r1, fp
   12094:	cmpeq	r0, sl
   12098:	ldreq	r1, [r4]
   1209c:	ldreq	r1, [r1, #4]
   120a0:	strdeq	r2, [r4, #8]
   120a4:	streq	r1, [r4, #4]
   120a8:	ldr	r5, [r4, #4]
   120ac:	cmp	r5, #0
   120b0:	beq	12248 <__assert_fail@plt+0x131c>
   120b4:	ldr	r1, [r5]
   120b8:	cmp	r1, #4
   120bc:	ldrls	pc, [pc, r1, lsl #2]
   120c0:	b	12244 <__assert_fail@plt+0x1318>
   120c4:	ldrdeq	r2, [r1], -r0
   120c8:	ldrdeq	r2, [r1], -r8
   120cc:	andeq	r2, r1, r8, lsl r1
   120d0:	ldrdeq	r2, [r1], -r0
   120d4:	andeq	r2, r1, ip, ror #3
   120d8:	ldrd	r0, [r4, #8]
   120dc:	cmp	r1, r3
   120e0:	cmpeq	r0, r2
   120e4:	ldrbeq	r6, [r5, #8]
   120e8:	moveq	r7, #0
   120ec:	beq	120f8 <__assert_fail@plt+0x11cc>
   120f0:	adds	r6, r0, #1
   120f4:	adc	r7, r1, #0
   120f8:	ldrb	r2, [r5, #9]
   120fc:	mov	r3, #0
   12100:	mov	sl, r6
   12104:	cmp	r3, r7
   12108:	strd	r6, [r4, #8]
   1210c:	cmpeq	r2, r6
   12110:	bne	121e0 <__assert_fail@plt+0x12b4>
   12114:	b	121b8 <__assert_fail@plt+0x128c>
   12118:	cmp	ip, #0
   1211c:	ldr	r7, [r5, #8]
   12120:	beq	12134 <__assert_fail@plt+0x1208>
   12124:	cmp	r7, #6
   12128:	beq	12184 <__assert_fail@plt+0x1258>
   1212c:	cmp	r7, #10
   12130:	beq	12190 <__assert_fail@plt+0x1264>
   12134:	ldrd	r2, [r4, #8]
   12138:	mvn	r1, #0
   1213c:	mvn	r0, #0
   12140:	cmp	r3, r1
   12144:	cmpeq	r2, r0
   12148:	bne	12268 <__assert_fail@plt+0x133c>
   1214c:	mov	r6, #0
   12150:	uxtb	r1, r6
   12154:	mov	r0, r7
   12158:	bl	11d38 <__assert_fail@plt+0xe0c>
   1215c:	cmp	r0, #0
   12160:	bne	1225c <__assert_fail@plt+0x1330>
   12164:	add	r6, r6, #1
   12168:	cmp	r6, #256	; 0x100
   1216c:	bne	12150 <__assert_fail@plt+0x1224>
   12170:	ldr	r3, [pc, #288]	; 12298 <__assert_fail@plt+0x136c>
   12174:	movw	r2, #1079	; 0x437
   12178:	ldr	r1, [pc, #284]	; 1229c <__assert_fail@plt+0x1370>
   1217c:	ldr	r0, [pc, #284]	; 122a0 <__assert_fail@plt+0x1374>
   12180:	b	12294 <__assert_fail@plt+0x1368>
   12184:	mov	r3, #0
   12188:	str	r3, [ip]
   1218c:	b	12134 <__assert_fail@plt+0x1208>
   12190:	mov	r3, #1
   12194:	b	12188 <__assert_fail@plt+0x125c>
   12198:	uxtb	r1, r6
   1219c:	mov	r0, r7
   121a0:	bl	11d38 <__assert_fail@plt+0xe0c>
   121a4:	cmp	r0, #0
   121a8:	bne	12250 <__assert_fail@plt+0x1324>
   121ac:	add	r6, r6, #1
   121b0:	cmp	r6, #255	; 0xff
   121b4:	ble	12198 <__assert_fail@plt+0x126c>
   121b8:	ldr	r3, [r5, #4]
   121bc:	mvn	r2, #0
   121c0:	str	r3, [r4, #4]
   121c4:	mvn	r3, #0
   121c8:	strd	r2, [r4, #8]
   121cc:	b	121e0 <__assert_fail@plt+0x12b4>
   121d0:	ldrb	sl, [r5, #8]
   121d4:	strd	r2, [r4, #8]
   121d8:	ldr	r3, [r5, #4]
   121dc:	str	r3, [r4, #4]
   121e0:	mov	r0, sl
   121e4:	add	sp, sp, #4
   121e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121ec:	ldrd	r0, [r5, #16]
   121f0:	orrs	lr, r0, r1
   121f4:	bne	12208 <__assert_fail@plt+0x12dc>
   121f8:	ldr	r1, [r5, #4]
   121fc:	str	r1, [r4, #4]
   12200:	strd	r2, [r4, #8]
   12204:	b	12080 <__assert_fail@plt+0x1154>
   12208:	ldrd	r6, [r4, #8]
   1220c:	ldrb	sl, [r5, #8]
   12210:	cmp	r7, r3
   12214:	cmpeq	r6, r2
   12218:	moveq	r2, #0
   1221c:	moveq	r3, #0
   12220:	strdeq	r2, [r4, #8]
   12224:	ldr	r3, [r4, #8]
   12228:	ldr	r2, [r4, #12]
   1222c:	adds	r8, r3, #1
   12230:	adc	r9, r2, #0
   12234:	cmp	r1, r9
   12238:	cmpeq	r0, r8
   1223c:	strd	r8, [r4, #8]
   12240:	b	12110 <__assert_fail@plt+0x11e4>
   12244:	bl	10f14 <abort@plt>
   12248:	mvn	sl, #0
   1224c:	b	121e0 <__assert_fail@plt+0x12b4>
   12250:	asr	r7, r6, #31
   12254:	strd	r6, [r4, #8]
   12258:	b	121e0 <__assert_fail@plt+0x12b4>
   1225c:	asr	r3, r6, #31
   12260:	mov	r2, r6
   12264:	strd	r2, [r4, #8]
   12268:	ldr	sl, [r4, #8]
   1226c:	mov	r0, r7
   12270:	uxtb	r1, sl
   12274:	bl	11d38 <__assert_fail@plt+0xe0c>
   12278:	cmp	r0, #0
   1227c:	addne	r6, sl, #1
   12280:	bne	121b0 <__assert_fail@plt+0x1284>
   12284:	ldr	r3, [pc, #12]	; 12298 <__assert_fail@plt+0x136c>
   12288:	movw	r2, #1082	; 0x43a
   1228c:	ldr	r1, [pc, #8]	; 1229c <__assert_fail@plt+0x1370>
   12290:	ldr	r0, [pc, #12]	; 122a4 <__assert_fail@plt+0x1378>
   12294:	bl	10f2c <__assert_fail@plt>
   12298:	andeq	r5, r1, pc, asr #17
   1229c:	andeq	r5, r1, r4, asr #20
   122a0:	andeq	r5, r1, r7, asr #21
   122a4:	muleq	r1, r6, sl
   122a8:	push	{r4, r5, r6, lr}
   122ac:	mov	r2, #42	; 0x2a
   122b0:	mov	r5, r0
   122b4:	bl	11b94 <__assert_fail@plt+0xc68>
   122b8:	cmp	r0, #0
   122bc:	movne	r4, r1
   122c0:	ldrne	r2, [r5, #8]
   122c4:	addne	r1, r4, #1
   122c8:	bne	122e8 <__assert_fail@plt+0x13bc>
   122cc:	mov	r0, #0
   122d0:	pop	{r4, r5, r6, pc}
   122d4:	ldr	r3, [r5, #4]
   122d8:	ldrb	r3, [r3, r1]
   122dc:	cmp	r3, #0
   122e0:	bne	12304 <__assert_fail@plt+0x13d8>
   122e4:	add	r1, r1, #1
   122e8:	cmp	r1, r2
   122ec:	bcs	122cc <__assert_fail@plt+0x13a0>
   122f0:	ldr	r3, [r5]
   122f4:	ldrb	r3, [r3, r1]
   122f8:	sub	r3, r3, #48	; 0x30
   122fc:	cmp	r3, #9
   12300:	bls	122d4 <__assert_fail@plt+0x13a8>
   12304:	mov	r0, r5
   12308:	mov	r2, #93	; 0x5d
   1230c:	pop	{r4, r5, r6, lr}
   12310:	b	11b94 <__assert_fail@plt+0xc68>
   12314:	push	{r4, lr}
   12318:	mov	r2, r1
   1231c:	mov	r1, r0
   12320:	mov	r0, #0
   12324:	bl	14728 <__assert_fail@plt+0x37fc>
   12328:	cmn	r0, #1
   1232c:	popne	{r4, pc}
   12330:	bl	10e48 <__errno_location@plt>
   12334:	ldr	r4, [r0]
   12338:	mov	r2, #5
   1233c:	mov	r0, #0
   12340:	ldr	r1, [pc, #16]	; 12358 <__assert_fail@plt+0x142c>
   12344:	bl	10d64 <dcgettext@plt>
   12348:	mov	r2, r0
   1234c:	mov	r0, #1
   12350:	mov	r1, r4
   12354:	bl	10dd0 <error@plt>
   12358:	ldrdeq	r5, [r1], -r3
   1235c:	push	{r4, r5, r6, lr}
   12360:	mov	r4, r0
   12364:	mov	r6, r1
   12368:	ldr	r5, [pc, #108]	; 123dc <__assert_fail@plt+0x14b0>
   1236c:	mov	r1, r6
   12370:	mov	r0, r4
   12374:	bl	12314 <__assert_fail@plt+0x13e8>
   12378:	subs	r2, r0, #0
   1237c:	beq	123d4 <__assert_fail@plt+0x14a8>
   12380:	mov	r0, #0
   12384:	cmp	r0, r2
   12388:	add	r3, r0, #1
   1238c:	beq	123c0 <__assert_fail@plt+0x1494>
   12390:	ldrb	r1, [r4, r0]
   12394:	ldrb	r1, [r5, r1]
   12398:	cmp	r1, #0
   1239c:	bne	123c0 <__assert_fail@plt+0x1494>
   123a0:	mov	r0, r3
   123a4:	b	12384 <__assert_fail@plt+0x1458>
   123a8:	ldrb	r1, [r4, r3]
   123ac:	add	r3, r3, #1
   123b0:	ldrb	ip, [r5, r1]
   123b4:	cmp	ip, #0
   123b8:	strbeq	r1, [r4, r0]
   123bc:	addeq	r0, r0, #1
   123c0:	cmp	r3, r2
   123c4:	bcc	123a8 <__assert_fail@plt+0x147c>
   123c8:	cmp	r0, #0
   123cc:	beq	1236c <__assert_fail@plt+0x1440>
   123d0:	pop	{r4, r5, r6, pc}
   123d4:	mov	r0, r2
   123d8:	pop	{r4, r5, r6, pc}
   123dc:	andeq	r8, r2, r9, asr r1
   123e0:	push	{r4, lr}
   123e4:	mov	r4, r0
   123e8:	bl	12314 <__assert_fail@plt+0x13e8>
   123ec:	ldr	ip, [pc, #32]	; 12414 <__assert_fail@plt+0x14e8>
   123f0:	mov	r3, r4
   123f4:	add	r1, r4, r0
   123f8:	cmp	r3, r1
   123fc:	popeq	{r4, pc}
   12400:	ldrb	r2, [r3]
   12404:	add	r2, ip, r2
   12408:	ldrb	r2, [r2, #256]	; 0x100
   1240c:	strb	r2, [r3], #1
   12410:	b	123f8 <__assert_fail@plt+0x14cc>
   12414:	andeq	r8, r2, r9, asr r1
   12418:	push	{r4, lr}
   1241c:	movw	r2, #721	; 0x2d1
   12420:	ldr	r3, [pc, #8]	; 12430 <__assert_fail@plt+0x1504>
   12424:	ldr	r1, [pc, #8]	; 12434 <__assert_fail@plt+0x1508>
   12428:	ldr	r0, [pc, #8]	; 12438 <__assert_fail@plt+0x150c>
   1242c:	bl	10f2c <__assert_fail@plt>
   12430:	ldrdeq	r5, [r1], -r8
   12434:	andeq	r5, r1, r4, asr #20
   12438:	ldrdeq	r5, [r1], -lr
   1243c:	push	{r4, r5, r6, lr}
   12440:	mov	r4, r0
   12444:	mov	r0, #24
   12448:	mov	r5, r1
   1244c:	bl	14c9c <__assert_fail@plt+0x3d70>
   12450:	mov	r3, #0
   12454:	str	r3, [r0]
   12458:	str	r3, [r0, #4]
   1245c:	ldr	r3, [r4]
   12460:	strb	r5, [r0, #8]
   12464:	cmp	r3, #0
   12468:	bne	12480 <__assert_fail@plt+0x1554>
   1246c:	ldr	r3, [pc, #24]	; 1248c <__assert_fail@plt+0x1560>
   12470:	movw	r2, #649	; 0x289
   12474:	ldr	r1, [pc, #20]	; 12490 <__assert_fail@plt+0x1564>
   12478:	ldr	r0, [pc, #20]	; 12494 <__assert_fail@plt+0x1568>
   1247c:	bl	10f2c <__assert_fail@plt>
   12480:	str	r0, [r3, #4]
   12484:	str	r0, [r4]
   12488:	pop	{r4, r5, r6, pc}
   1248c:	andeq	r5, r1, sp, ror #17
   12490:	andeq	r5, r1, r4, asr #20
   12494:	ldrdeq	r5, [r1], -lr
   12498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1249c:	sub	sp, sp, #84	; 0x54
   124a0:	mov	r9, r1
   124a4:	mov	r7, r0
   124a8:	mov	r6, #0
   124ac:	bl	10e30 <strlen@plt>
   124b0:	mov	r4, r0
   124b4:	bl	14c9c <__assert_fail@plt+0x3d70>
   124b8:	mov	r1, #1
   124bc:	str	r0, [sp, #68]	; 0x44
   124c0:	mov	r0, r4
   124c4:	bl	14e8c <__assert_fail@plt+0x3f60>
   124c8:	mov	r2, r6
   124cc:	str	r0, [sp, #72]	; 0x48
   124d0:	ldrb	r5, [r7, r6]
   124d4:	ldr	r8, [sp, #68]	; 0x44
   124d8:	cmp	r5, #0
   124dc:	bne	12510 <__assert_fail@plt+0x15e4>
   124e0:	str	r2, [sp, #76]	; 0x4c
   124e4:	ldr	r3, [sp, #76]	; 0x4c
   124e8:	add	fp, r5, #2
   124ec:	cmp	fp, r3
   124f0:	str	r3, [sp, #28]
   124f4:	bcc	12698 <__assert_fail@plt+0x176c>
   124f8:	add	r9, r9, #4
   124fc:	ldr	r3, [sp, #28]
   12500:	cmp	r3, r5
   12504:	bhi	12a40 <__assert_fail@plt+0x1b14>
   12508:	mov	r4, #1
   1250c:	b	12b00 <__assert_fail@plt+0x1bd4>
   12510:	cmp	r5, #92	; 0x5c
   12514:	add	sl, r2, #1
   12518:	add	fp, r8, r2
   1251c:	strbne	r5, [r8, r2]
   12520:	bne	1256c <__assert_fail@plt+0x1640>
   12524:	add	r8, r6, #1
   12528:	ldr	r1, [sp, #72]	; 0x48
   1252c:	mov	r0, #1
   12530:	ldrb	r4, [r7, r8]
   12534:	add	r3, r1, r2
   12538:	strb	r0, [r1, r2]
   1253c:	cmp	r4, #98	; 0x62
   12540:	moveq	r4, #8
   12544:	beq	12564 <__assert_fail@plt+0x1638>
   12548:	bhi	1258c <__assert_fail@plt+0x1660>
   1254c:	cmp	r4, #55	; 0x37
   12550:	bhi	12578 <__assert_fail@plt+0x164c>
   12554:	cmp	r4, #48	; 0x30
   12558:	bcs	125cc <__assert_fail@plt+0x16a0>
   1255c:	cmp	r4, #0
   12560:	beq	12660 <__assert_fail@plt+0x1734>
   12564:	add	r6, r6, #1
   12568:	strb	r4, [fp]
   1256c:	add	r6, r6, #1
   12570:	mov	r2, sl
   12574:	b	124d0 <__assert_fail@plt+0x15a4>
   12578:	cmp	r4, #92	; 0x5c
   1257c:	beq	12564 <__assert_fail@plt+0x1638>
   12580:	cmp	r4, #97	; 0x61
   12584:	moveq	r4, #7
   12588:	b	12564 <__assert_fail@plt+0x1638>
   1258c:	cmp	r4, #114	; 0x72
   12590:	moveq	r4, #13
   12594:	beq	12564 <__assert_fail@plt+0x1638>
   12598:	bhi	125b4 <__assert_fail@plt+0x1688>
   1259c:	cmp	r4, #102	; 0x66
   125a0:	moveq	r4, #12
   125a4:	beq	12564 <__assert_fail@plt+0x1638>
   125a8:	cmp	r4, #110	; 0x6e
   125ac:	moveq	r4, #10
   125b0:	b	12564 <__assert_fail@plt+0x1638>
   125b4:	cmp	r4, #116	; 0x74
   125b8:	moveq	r4, #9
   125bc:	beq	12564 <__assert_fail@plt+0x1638>
   125c0:	cmp	r4, #118	; 0x76
   125c4:	moveq	r4, #11
   125c8:	b	12564 <__assert_fail@plt+0x1638>
   125cc:	add	r5, r6, #2
   125d0:	sub	r4, r4, #48	; 0x30
   125d4:	ldrb	r3, [r7, r5]
   125d8:	uxtb	r4, r4
   125dc:	sub	r3, r3, #48	; 0x30
   125e0:	cmp	r3, #7
   125e4:	bhi	12564 <__assert_fail@plt+0x1638>
   125e8:	add	r6, r6, #3
   125ec:	add	r4, r3, r4, lsl #3
   125f0:	ldrb	r3, [r7, r6]
   125f4:	and	r4, r4, #255	; 0xff
   125f8:	sub	r3, r3, #48	; 0x30
   125fc:	cmp	r3, #7
   12600:	bhi	12658 <__assert_fail@plt+0x172c>
   12604:	add	r2, r3, r4, lsl #3
   12608:	cmp	r2, #255	; 0xff
   1260c:	movle	r4, r2
   12610:	movle	r6, r5
   12614:	andle	r4, r4, #255	; 0xff
   12618:	ble	12564 <__assert_fail@plt+0x1638>
   1261c:	mov	r2, #5
   12620:	ldr	r1, [pc, #1268]	; 12b1c <__assert_fail@plt+0x1bf0>
   12624:	mov	r0, #0
   12628:	bl	10d64 <dcgettext@plt>
   1262c:	ldrb	r1, [r7, r6]
   12630:	ldrb	r3, [r7, r8]
   12634:	ldrb	r2, [r7, r5]
   12638:	str	r1, [sp, #16]
   1263c:	stmib	sp, {r1, r3}
   12640:	mov	r1, #0
   12644:	str	r2, [sp]
   12648:	str	r2, [sp, #12]
   1264c:	mov	r2, r0
   12650:	mov	r0, r1
   12654:	bl	10dd0 <error@plt>
   12658:	mov	r6, r8
   1265c:	b	12564 <__assert_fail@plt+0x1638>
   12660:	mov	r2, #5
   12664:	ldr	r1, [pc, #1204]	; 12b20 <__assert_fail@plt+0x1bf4>
   12668:	mov	r0, r4
   1266c:	str	r3, [sp, #28]
   12670:	sub	r6, r6, #1
   12674:	bl	10d64 <dcgettext@plt>
   12678:	mov	r2, r0
   1267c:	mov	r1, r4
   12680:	mov	r0, r4
   12684:	bl	10dd0 <error@plt>
   12688:	ldr	r3, [sp, #28]
   1268c:	strb	r4, [r3]
   12690:	mov	r4, r5
   12694:	b	12564 <__assert_fail@plt+0x1638>
   12698:	mov	r2, #91	; 0x5b
   1269c:	mov	r1, r5
   126a0:	add	r0, sp, #68	; 0x44
   126a4:	add	r6, r5, #1
   126a8:	bl	11b94 <__assert_fail@plt+0xc68>
   126ac:	cmp	r0, #0
   126b0:	beq	12744 <__assert_fail@plt+0x1818>
   126b4:	mov	r2, #58	; 0x3a
   126b8:	mov	r1, r6
   126bc:	add	r0, sp, #68	; 0x44
   126c0:	bl	11b94 <__assert_fail@plt+0xc68>
   126c4:	cmp	r0, #0
   126c8:	bne	126e0 <__assert_fail@plt+0x17b4>
   126cc:	mov	r2, #61	; 0x3d
   126d0:	add	r0, sp, #68	; 0x44
   126d4:	bl	11b94 <__assert_fail@plt+0xc68>
   126d8:	cmp	r0, #0
   126dc:	beq	12704 <__assert_fail@plt+0x17d8>
   126e0:	ldr	r3, [sp, #28]
   126e4:	mov	sl, fp
   126e8:	ldrb	r2, [r8, r6]
   126ec:	ldr	r0, [sp, #72]	; 0x48
   126f0:	sub	ip, r3, #1
   126f4:	ldr	r1, [sp, #68]	; 0x44
   126f8:	sub	lr, r0, #1
   126fc:	cmp	sl, ip
   12700:	bcc	127b8 <__assert_fail@plt+0x188c>
   12704:	mov	r2, #42	; 0x2a
   12708:	mov	r1, fp
   1270c:	add	r0, sp, #68	; 0x44
   12710:	bl	11b94 <__assert_fail@plt+0xc68>
   12714:	cmp	r0, #0
   12718:	beq	12744 <__assert_fail@plt+0x1818>
   1271c:	ldr	r3, [sp, #68]	; 0x44
   12720:	add	r2, r5, #3
   12724:	mov	r4, r2
   12728:	ldr	r0, [sp, #72]	; 0x48
   1272c:	ldr	r1, [sp, #28]
   12730:	cmp	r1, r4
   12734:	beq	12744 <__assert_fail@plt+0x1818>
   12738:	ldrb	r1, [r0, r4]
   1273c:	cmp	r1, #0
   12740:	beq	12938 <__assert_fail@plt+0x1a0c>
   12744:	mov	r2, #45	; 0x2d
   12748:	mov	r1, r6
   1274c:	add	r0, sp, #68	; 0x44
   12750:	bl	11b94 <__assert_fail@plt+0xc68>
   12754:	cmp	r0, #0
   12758:	ldrb	r4, [r8, r5]
   1275c:	beq	12a30 <__assert_fail@plt+0x1b04>
   12760:	ldrb	r6, [r8, fp]
   12764:	cmp	r6, r4
   12768:	bcs	129ec <__assert_fail@plt+0x1ac0>
   1276c:	mov	r0, r4
   12770:	bl	11bb8 <__assert_fail@plt+0xc8c>
   12774:	mov	r5, r0
   12778:	mov	r0, r6
   1277c:	bl	11bb8 <__assert_fail@plt+0xc8c>
   12780:	mov	r4, r0
   12784:	mov	r2, #5
   12788:	ldr	r1, [pc, #916]	; 12b24 <__assert_fail@plt+0x1bf8>
   1278c:	mov	r0, #0
   12790:	bl	10d64 <dcgettext@plt>
   12794:	mov	r1, #0
   12798:	mov	r2, r0
   1279c:	str	r4, [sp]
   127a0:	mov	r0, r1
   127a4:	mov	r3, r5
   127a8:	bl	10dd0 <error@plt>
   127ac:	mov	r0, r5
   127b0:	bl	130cc <__assert_fail@plt+0x21a0>
   127b4:	b	1292c <__assert_fail@plt+0x1a00>
   127b8:	ldrb	r4, [r1, sl]
   127bc:	add	r3, sl, #1
   127c0:	cmp	r4, r2
   127c4:	bne	127ec <__assert_fail@plt+0x18c0>
   127c8:	ldrb	r4, [r1, r3]
   127cc:	cmp	r4, #93	; 0x5d
   127d0:	bne	127ec <__assert_fail@plt+0x18c0>
   127d4:	ldrb	r4, [lr, r3]
   127d8:	cmp	r4, #0
   127dc:	bne	127ec <__assert_fail@plt+0x18c0>
   127e0:	ldrb	r7, [r0, r3]
   127e4:	cmp	r7, #0
   127e8:	beq	12ac0 <__assert_fail@plt+0x1b94>
   127ec:	mov	sl, r3
   127f0:	b	126fc <__assert_fail@plt+0x17d0>
   127f4:	cmp	r2, #58	; 0x3a
   127f8:	bne	1289c <__assert_fail@plt+0x1970>
   127fc:	ldr	r3, [pc, #804]	; 12b28 <__assert_fail@plt+0x1bfc>
   12800:	str	r3, [sp, #36]	; 0x24
   12804:	ldr	r0, [sp, #32]
   12808:	ldr	r2, [sp, #36]	; 0x24
   1280c:	ldr	r3, [r2], #4
   12810:	mov	r1, r3
   12814:	str	r2, [sp, #36]	; 0x24
   12818:	mov	r2, r4
   1281c:	str	r3, [sp, #44]	; 0x2c
   12820:	bl	10f08 <strncmp@plt>
   12824:	subs	r3, r0, #0
   12828:	str	r3, [sp, #40]	; 0x28
   1282c:	bne	12844 <__assert_fail@plt+0x1918>
   12830:	ldr	r3, [sp, #44]	; 0x2c
   12834:	mov	r0, r3
   12838:	bl	10e30 <strlen@plt>
   1283c:	cmp	r4, r0
   12840:	beq	12a88 <__assert_fail@plt+0x1b5c>
   12844:	add	r7, r7, #1
   12848:	cmp	r7, #12
   1284c:	bne	12804 <__assert_fail@plt+0x18d8>
   12850:	mov	r1, fp
   12854:	add	r0, sp, #68	; 0x44
   12858:	bl	122a8 <__assert_fail@plt+0x137c>
   1285c:	subs	r7, r0, #0
   12860:	bne	12704 <__assert_fail@plt+0x17d8>
   12864:	mov	r1, r4
   12868:	ldr	r0, [sp, #32]
   1286c:	bl	11c18 <__assert_fail@plt+0xcec>
   12870:	ldr	r1, [pc, #692]	; 12b2c <__assert_fail@plt+0x1c00>
   12874:	mov	r4, r0
   12878:	mov	r2, #5
   1287c:	mov	r0, #0
   12880:	bl	10d64 <dcgettext@plt>
   12884:	mov	r5, r0
   12888:	mov	r0, r4
   1288c:	bl	1471c <__assert_fail@plt+0x37f0>
   12890:	mov	r3, r0
   12894:	mov	r2, r5
   12898:	b	12920 <__assert_fail@plt+0x19f4>
   1289c:	cmp	r4, #1
   128a0:	bne	128e4 <__assert_fail@plt+0x19b8>
   128a4:	mov	r0, #24
   128a8:	bl	14c9c <__assert_fail@plt+0x3d70>
   128ac:	mov	r3, #3
   128b0:	stm	r0, {r3, r7}
   128b4:	ldrb	r3, [r8, fp]
   128b8:	strb	r3, [r0, #8]
   128bc:	ldr	r3, [r9, #4]
   128c0:	cmp	r3, #0
   128c4:	ldreq	r3, [pc, #612]	; 12b30 <__assert_fail@plt+0x1c04>
   128c8:	movweq	r2, #743	; 0x2e7
   128cc:	beq	12ab4 <__assert_fail@plt+0x1b88>
   128d0:	add	r6, sl, #2
   128d4:	str	r0, [r3, #4]
   128d8:	str	r0, [r9, #4]
   128dc:	mov	r5, r6
   128e0:	b	124e4 <__assert_fail@plt+0x15b8>
   128e4:	mov	r1, fp
   128e8:	add	r0, sp, #68	; 0x44
   128ec:	bl	122a8 <__assert_fail@plt+0x137c>
   128f0:	subs	r7, r0, #0
   128f4:	bne	12704 <__assert_fail@plt+0x17d8>
   128f8:	mov	r1, r4
   128fc:	ldr	r0, [sp, #32]
   12900:	bl	11c18 <__assert_fail@plt+0xcec>
   12904:	mov	r4, r0
   12908:	mov	r2, #5
   1290c:	ldr	r1, [pc, #544]	; 12b34 <__assert_fail@plt+0x1c08>
   12910:	mov	r0, r7
   12914:	bl	10d64 <dcgettext@plt>
   12918:	mov	r2, r0
   1291c:	mov	r3, r4
   12920:	mov	r1, #0
   12924:	mov	r0, r1
   12928:	bl	10dd0 <error@plt>
   1292c:	mov	r0, r4
   12930:	bl	130cc <__assert_fail@plt+0x21a0>
   12934:	b	12afc <__assert_fail@plt+0x1bd0>
   12938:	ldrb	ip, [r3, r4]
   1293c:	cmp	ip, #93	; 0x5d
   12940:	bne	129d4 <__assert_fail@plt+0x1aa8>
   12944:	sub	r0, r4, r6
   12948:	ldrb	r5, [r3, r6]
   1294c:	subs	r6, r0, #2
   12950:	moveq	r2, #0
   12954:	moveq	r3, #0
   12958:	strdeq	r2, [sp, #56]	; 0x38
   1295c:	beq	12a54 <__assert_fail@plt+0x1b28>
   12960:	add	r7, r3, r2
   12964:	ldrb	r3, [r3, r2]
   12968:	mov	r0, r7
   1296c:	str	r1, [sp]
   12970:	add	r1, sp, #52	; 0x34
   12974:	cmp	r3, #48	; 0x30
   12978:	add	r3, sp, #56	; 0x38
   1297c:	moveq	r2, #8
   12980:	movne	r2, #10
   12984:	bl	15028 <__assert_fail@plt+0x40fc>
   12988:	cmp	r0, #0
   1298c:	bne	129b8 <__assert_fail@plt+0x1a8c>
   12990:	ldrd	r2, [sp, #56]	; 0x38
   12994:	mvn	r1, #0
   12998:	mvn	r0, #0
   1299c:	cmp	r3, r1
   129a0:	cmpeq	r2, r0
   129a4:	beq	129b8 <__assert_fail@plt+0x1a8c>
   129a8:	ldr	r2, [sp, #52]	; 0x34
   129ac:	add	r3, r7, r6
   129b0:	cmp	r2, r3
   129b4:	beq	12a54 <__assert_fail@plt+0x1b28>
   129b8:	mov	r1, r6
   129bc:	mov	r0, r7
   129c0:	bl	11c18 <__assert_fail@plt+0xcec>
   129c4:	mov	r4, r0
   129c8:	mov	r2, #5
   129cc:	ldr	r1, [pc, #356]	; 12b38 <__assert_fail@plt+0x1c0c>
   129d0:	b	1287c <__assert_fail@plt+0x1950>
   129d4:	add	r4, r4, #1
   129d8:	b	1272c <__assert_fail@plt+0x1800>
   129dc:	add	r6, r4, #1
   129e0:	str	r0, [r3, #4]
   129e4:	str	r0, [r9, #4]
   129e8:	b	128dc <__assert_fail@plt+0x19b0>
   129ec:	mov	r0, #24
   129f0:	bl	14c9c <__assert_fail@plt+0x3d70>
   129f4:	mov	r3, #0
   129f8:	str	r3, [r0, #4]
   129fc:	mov	r3, #1
   12a00:	strb	r4, [r0, #8]
   12a04:	str	r3, [r0]
   12a08:	ldr	r3, [r9, #4]
   12a0c:	strb	r6, [r0, #9]
   12a10:	cmp	r3, #0
   12a14:	ldreq	r3, [pc, #288]	; 12b3c <__assert_fail@plt+0x1c10>
   12a18:	movweq	r2, #679	; 0x2a7
   12a1c:	beq	12ab4 <__assert_fail@plt+0x1b88>
   12a20:	add	r6, r5, #3
   12a24:	str	r0, [r3, #4]
   12a28:	str	r0, [r9, #4]
   12a2c:	b	128dc <__assert_fail@plt+0x19b0>
   12a30:	mov	r1, r4
   12a34:	add	r0, r9, #4
   12a38:	bl	1243c <__assert_fail@plt+0x1510>
   12a3c:	b	128dc <__assert_fail@plt+0x19b0>
   12a40:	ldrb	r1, [r8, r5]
   12a44:	mov	r0, r9
   12a48:	add	r5, r5, #1
   12a4c:	bl	1243c <__assert_fail@plt+0x1510>
   12a50:	b	124fc <__assert_fail@plt+0x15d0>
   12a54:	mov	r0, #24
   12a58:	ldrd	r6, [sp, #56]	; 0x38
   12a5c:	bl	14c9c <__assert_fail@plt+0x3d70>
   12a60:	mov	r3, #0
   12a64:	str	r3, [r0, #4]
   12a68:	mov	r3, #4
   12a6c:	strb	r5, [r0, #8]
   12a70:	str	r3, [r0]
   12a74:	ldr	r3, [r9, #4]
   12a78:	strd	r6, [r0, #16]
   12a7c:	cmp	r3, #0
   12a80:	bne	129dc <__assert_fail@plt+0x1ab0>
   12a84:	bl	12418 <__assert_fail@plt+0x14ec>
   12a88:	mov	r0, #24
   12a8c:	bl	14c9c <__assert_fail@plt+0x3d70>
   12a90:	ldr	r3, [sp, #40]	; 0x28
   12a94:	stmib	r0, {r3, r7}
   12a98:	mov	r3, #2
   12a9c:	str	r3, [r0]
   12aa0:	ldr	r3, [r9, #4]
   12aa4:	cmp	r3, #0
   12aa8:	bne	128d0 <__assert_fail@plt+0x19a4>
   12aac:	ldr	r3, [pc, #140]	; 12b40 <__assert_fail@plt+0x1c14>
   12ab0:	movw	r2, #701	; 0x2bd
   12ab4:	ldr	r1, [pc, #136]	; 12b44 <__assert_fail@plt+0x1c18>
   12ab8:	ldr	r0, [pc, #136]	; 12b48 <__assert_fail@plt+0x1c1c>
   12abc:	bl	10f2c <__assert_fail@plt>
   12ac0:	sub	r4, sl, r5
   12ac4:	add	r3, r8, fp
   12ac8:	subs	r4, r4, #2
   12acc:	str	r3, [sp, #32]
   12ad0:	bne	127f4 <__assert_fail@plt+0x18c8>
   12ad4:	cmp	r2, #58	; 0x3a
   12ad8:	mov	r0, r4
   12adc:	mov	r2, #5
   12ae0:	ldreq	r1, [pc, #100]	; 12b4c <__assert_fail@plt+0x1c20>
   12ae4:	ldrne	r1, [pc, #100]	; 12b50 <__assert_fail@plt+0x1c24>
   12ae8:	bl	10d64 <dcgettext@plt>
   12aec:	mov	r2, r0
   12af0:	mov	r1, r4
   12af4:	mov	r0, r4
   12af8:	bl	10dd0 <error@plt>
   12afc:	mov	r4, #0
   12b00:	ldr	r0, [sp, #68]	; 0x44
   12b04:	bl	130cc <__assert_fail@plt+0x21a0>
   12b08:	ldr	r0, [sp, #72]	; 0x48
   12b0c:	bl	130cc <__assert_fail@plt+0x21a0>
   12b10:	mov	r0, r4
   12b14:	add	sp, sp, #84	; 0x54
   12b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b1c:	andeq	r5, r1, r9, ror #21
   12b20:	andeq	r5, r1, sp, asr #22
   12b24:	andeq	r5, r1, ip, asr ip
   12b28:	andeq	r5, r1, r0, lsl #18
   12b2c:	ldrdeq	r5, [r1], -sp
   12b30:	andeq	r5, r1, r2, asr #18
   12b34:	strdeq	r5, [r1], -r8
   12b38:	andeq	r5, r1, r1, lsr ip
   12b3c:	andeq	r5, r1, r5, asr r9
   12b40:	andeq	r5, r1, r0, lsr r9
   12b44:	andeq	r5, r1, r4, asr #20
   12b48:	ldrdeq	r5, [r1], -lr
   12b4c:	andeq	r5, r1, lr, lsl #23
   12b50:			; <UNDEFINED> instruction: 0x00015bb2
   12b54:	push	{r4, r5, r6, r7, r8, lr}
   12b58:	mvn	r3, #0
   12b5c:	mov	r4, r2
   12b60:	mov	r5, r0
   12b64:	mvn	r2, #1
   12b68:	mov	r6, r1
   12b6c:	mov	r7, #1
   12b70:	strd	r2, [r0, #8]
   12b74:	mov	r1, #0
   12b78:	mov	r0, r5
   12b7c:	bl	12064 <__assert_fail@plt+0x1138>
   12b80:	cmn	r0, #1
   12b84:	bne	12bb0 <__assert_fail@plt+0x1c84>
   12b88:	cmp	r6, #0
   12b8c:	popeq	{r4, r5, r6, r7, r8, pc}
   12b90:	sub	r3, r4, #1
   12b94:	add	r4, r4, #255	; 0xff
   12b98:	ldrb	r2, [r3, #1]!
   12b9c:	eor	r2, r2, #1
   12ba0:	cmp	r3, r4
   12ba4:	strb	r2, [r3]
   12ba8:	bne	12b98 <__assert_fail@plt+0x1c6c>
   12bac:	pop	{r4, r5, r6, r7, r8, pc}
   12bb0:	strb	r7, [r4, r0]
   12bb4:	b	12b74 <__assert_fail@plt+0x1c48>
   12bb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12bbc:	mov	r5, #0
   12bc0:	mov	sl, r0
   12bc4:	mvn	r6, #-2147483648	; 0x80000000
   12bc8:	mov	r0, r5
   12bcc:	ldr	r7, [pc, #300]	; 12d00 <__assert_fail@plt+0x1dd4>
   12bd0:	ldr	r9, [pc, #300]	; 12d04 <__assert_fail@plt+0x1dd8>
   12bd4:	cmp	r0, r5
   12bd8:	bcc	12bf4 <__assert_fail@plt+0x1cc8>
   12bdc:	mov	r1, #8192	; 0x2000
   12be0:	mov	r0, r7
   12be4:	blx	sl
   12be8:	subs	r5, r0, #0
   12bec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12bf0:	mov	r0, #0
   12bf4:	cmn	r6, #-2147483647	; 0x80000001
   12bf8:	mov	r4, r0
   12bfc:	beq	12c20 <__assert_fail@plt+0x1cf4>
   12c00:	cmp	r5, r4
   12c04:	bls	12cf0 <__assert_fail@plt+0x1dc4>
   12c08:	ldrb	r3, [r4, r7]
   12c0c:	cmp	r3, r6
   12c10:	beq	12cf8 <__assert_fail@plt+0x1dcc>
   12c14:	mvn	r6, #-2147483648	; 0x80000000
   12c18:	b	12cf0 <__assert_fail@plt+0x1dc4>
   12c1c:	add	r4, r4, #2
   12c20:	cmp	r4, r5
   12c24:	bcs	12c70 <__assert_fail@plt+0x1d44>
   12c28:	ldrb	r3, [r4, r7]
   12c2c:	add	r3, r9, r3
   12c30:	ldrb	r3, [r3, #512]	; 0x200
   12c34:	cmp	r3, #0
   12c38:	beq	12c1c <__assert_fail@plt+0x1cf0>
   12c3c:	sub	r3, r4, r0
   12c40:	cmp	r4, #0
   12c44:	ldrb	r6, [r4, r7]
   12c48:	add	r8, r3, #1
   12c4c:	beq	12c60 <__assert_fail@plt+0x1d34>
   12c50:	ldr	r2, [pc, #176]	; 12d08 <__assert_fail@plt+0x1ddc>
   12c54:	ldrb	r2, [r4, r2]
   12c58:	cmp	r2, r6
   12c5c:	moveq	r8, r3
   12c60:	cmp	r8, #0
   12c64:	add	r4, r4, #1
   12c68:	bne	12ca0 <__assert_fail@plt+0x1d74>
   12c6c:	b	12c00 <__assert_fail@plt+0x1cd4>
   12c70:	bne	12c98 <__assert_fail@plt+0x1d6c>
   12c74:	sub	r3, r4, #1
   12c78:	ldrb	r2, [r3, r7]
   12c7c:	add	r2, r9, r2
   12c80:	ldrb	r2, [r2, #512]	; 0x200
   12c84:	cmp	r2, #0
   12c88:	beq	12c98 <__assert_fail@plt+0x1d6c>
   12c8c:	cmp	r4, r3
   12c90:	mov	r4, r3
   12c94:	bhi	12c3c <__assert_fail@plt+0x1d10>
   12c98:	subs	r8, r5, r0
   12c9c:	beq	12cf0 <__assert_fail@plt+0x1dc4>
   12ca0:	ldr	r3, [pc, #100]	; 12d0c <__assert_fail@plt+0x1de0>
   12ca4:	mov	r2, r8
   12ca8:	mov	r1, #1
   12cac:	add	r0, r7, r0
   12cb0:	ldr	r3, [r3]
   12cb4:	bl	10d34 <fwrite_unlocked@plt>
   12cb8:	cmp	r0, r8
   12cbc:	beq	12ce8 <__assert_fail@plt+0x1dbc>
   12cc0:	bl	10e48 <__errno_location@plt>
   12cc4:	ldr	r4, [r0]
   12cc8:	mov	r2, #5
   12ccc:	mov	r0, #0
   12cd0:	ldr	r1, [pc, #56]	; 12d10 <__assert_fail@plt+0x1de4>
   12cd4:	bl	10d64 <dcgettext@plt>
   12cd8:	mov	r2, r0
   12cdc:	mov	r0, #1
   12ce0:	mov	r1, r4
   12ce4:	bl	10dd0 <error@plt>
   12ce8:	cmn	r6, #-2147483647	; 0x80000001
   12cec:	bne	12c00 <__assert_fail@plt+0x1cd4>
   12cf0:	mov	r0, r4
   12cf4:	b	12bd4 <__assert_fail@plt+0x1ca8>
   12cf8:	add	r4, r4, #1
   12cfc:	b	12c00 <__assert_fail@plt+0x1cd4>
   12d00:	andeq	r8, r2, lr, asr r4
   12d04:	andeq	r8, r2, r9, asr r1
   12d08:	andeq	r8, r2, sp, asr r4
   12d0c:	andeq	r8, r2, r4, asr r1
   12d10:	muleq	r1, pc, ip	; <UNPREDICTABLE>
   12d14:	subs	r5, r0, #0
   12d18:	push	{r7, lr}
   12d1c:	sub	sp, sp, #56	; 0x38
   12d20:	ldr	r4, [pc, #544]	; 12f48 <__assert_fail@plt+0x201c>
   12d24:	beq	12d5c <__assert_fail@plt+0x1e30>
   12d28:	mov	r2, #5
   12d2c:	mov	r0, #0
   12d30:	ldr	r3, [pc, #532]	; 12f4c <__assert_fail@plt+0x2020>
   12d34:	ldr	r1, [pc, #532]	; 12f50 <__assert_fail@plt+0x2024>
   12d38:	ldr	r6, [r3]
   12d3c:	bl	10d64 <dcgettext@plt>
   12d40:	mov	r2, r0
   12d44:	mov	r1, #1
   12d48:	ldr	r3, [r4]
   12d4c:	mov	r0, r6
   12d50:	bl	10e9c <__fprintf_chk@plt>
   12d54:	mov	r0, r5
   12d58:	bl	10e24 <exit@plt>
   12d5c:	mov	r2, #5
   12d60:	ldr	r1, [pc, #492]	; 12f54 <__assert_fail@plt+0x2028>
   12d64:	mov	r6, sp
   12d68:	bl	10d64 <dcgettext@plt>
   12d6c:	ldr	r2, [r4]
   12d70:	mov	r1, r0
   12d74:	mov	r0, #1
   12d78:	bl	10e78 <__printf_chk@plt>
   12d7c:	ldr	r4, [pc, #468]	; 12f58 <__assert_fail@plt+0x202c>
   12d80:	mov	r2, #5
   12d84:	mov	r0, r5
   12d88:	ldr	r1, [pc, #460]	; 12f5c <__assert_fail@plt+0x2030>
   12d8c:	bl	10d64 <dcgettext@plt>
   12d90:	ldr	r7, [pc, #456]	; 12f60 <__assert_fail@plt+0x2034>
   12d94:	ldr	r1, [r4]
   12d98:	bl	10cbc <fputs_unlocked@plt>
   12d9c:	mov	r2, #5
   12da0:	ldr	r1, [pc, #444]	; 12f64 <__assert_fail@plt+0x2038>
   12da4:	mov	r0, r5
   12da8:	bl	10d64 <dcgettext@plt>
   12dac:	ldr	r1, [r4]
   12db0:	bl	10cbc <fputs_unlocked@plt>
   12db4:	mov	r2, #5
   12db8:	ldr	r1, [pc, #424]	; 12f68 <__assert_fail@plt+0x203c>
   12dbc:	mov	r0, r5
   12dc0:	bl	10d64 <dcgettext@plt>
   12dc4:	ldr	r1, [r4]
   12dc8:	bl	10cbc <fputs_unlocked@plt>
   12dcc:	mov	r2, #5
   12dd0:	ldr	r1, [pc, #404]	; 12f6c <__assert_fail@plt+0x2040>
   12dd4:	mov	r0, r5
   12dd8:	bl	10d64 <dcgettext@plt>
   12ddc:	ldr	r1, [r4]
   12de0:	bl	10cbc <fputs_unlocked@plt>
   12de4:	mov	r2, #5
   12de8:	ldr	r1, [pc, #384]	; 12f70 <__assert_fail@plt+0x2044>
   12dec:	mov	r0, r5
   12df0:	bl	10d64 <dcgettext@plt>
   12df4:	ldr	r1, [r4]
   12df8:	bl	10cbc <fputs_unlocked@plt>
   12dfc:	mov	r2, #5
   12e00:	ldr	r1, [pc, #364]	; 12f74 <__assert_fail@plt+0x2048>
   12e04:	mov	r0, r5
   12e08:	bl	10d64 <dcgettext@plt>
   12e0c:	ldr	r1, [r4]
   12e10:	bl	10cbc <fputs_unlocked@plt>
   12e14:	mov	r2, #5
   12e18:	ldr	r1, [pc, #344]	; 12f78 <__assert_fail@plt+0x204c>
   12e1c:	mov	r0, r5
   12e20:	bl	10d64 <dcgettext@plt>
   12e24:	ldr	r1, [r4]
   12e28:	bl	10cbc <fputs_unlocked@plt>
   12e2c:	ldr	lr, [pc, #328]	; 12f7c <__assert_fail@plt+0x2050>
   12e30:	mov	ip, sp
   12e34:	ldm	lr!, {r0, r1, r2, r3}
   12e38:	stmia	ip!, {r0, r1, r2, r3}
   12e3c:	ldm	lr!, {r0, r1, r2, r3}
   12e40:	stmia	ip!, {r0, r1, r2, r3}
   12e44:	ldm	lr!, {r0, r1, r2, r3}
   12e48:	stmia	ip!, {r0, r1, r2, r3}
   12e4c:	ldm	lr, {r0, r1}
   12e50:	stm	ip, {r0, r1}
   12e54:	ldr	r1, [r6]
   12e58:	cmp	r1, #0
   12e5c:	bne	12f00 <__assert_fail@plt+0x1fd4>
   12e60:	ldr	r6, [r6, #4]
   12e64:	mov	r2, #5
   12e68:	mov	r0, #0
   12e6c:	ldr	r7, [pc, #236]	; 12f60 <__assert_fail@plt+0x2034>
   12e70:	ldr	r1, [pc, #264]	; 12f80 <__assert_fail@plt+0x2054>
   12e74:	cmp	r6, #0
   12e78:	moveq	r6, r7
   12e7c:	bl	10d64 <dcgettext@plt>
   12e80:	mov	r1, r0
   12e84:	ldr	r3, [pc, #248]	; 12f84 <__assert_fail@plt+0x2058>
   12e88:	mov	r0, #1
   12e8c:	ldr	r2, [pc, #244]	; 12f88 <__assert_fail@plt+0x205c>
   12e90:	bl	10e78 <__printf_chk@plt>
   12e94:	mov	r1, #0
   12e98:	mov	r0, #5
   12e9c:	bl	10ec0 <setlocale@plt>
   12ea0:	cmp	r0, #0
   12ea4:	bne	12f18 <__assert_fail@plt+0x1fec>
   12ea8:	mov	r2, #5
   12eac:	ldr	r1, [pc, #216]	; 12f8c <__assert_fail@plt+0x2060>
   12eb0:	mov	r0, #0
   12eb4:	bl	10d64 <dcgettext@plt>
   12eb8:	mov	r1, r0
   12ebc:	ldr	r3, [pc, #156]	; 12f60 <__assert_fail@plt+0x2034>
   12ec0:	mov	r0, #1
   12ec4:	ldr	r2, [pc, #184]	; 12f84 <__assert_fail@plt+0x2058>
   12ec8:	bl	10e78 <__printf_chk@plt>
   12ecc:	mov	r2, #5
   12ed0:	ldr	r1, [pc, #184]	; 12f90 <__assert_fail@plt+0x2064>
   12ed4:	mov	r0, #0
   12ed8:	bl	10d64 <dcgettext@plt>
   12edc:	ldr	r2, [pc, #176]	; 12f94 <__assert_fail@plt+0x2068>
   12ee0:	cmp	r6, r7
   12ee4:	mov	r1, r0
   12ee8:	mov	r0, #1
   12eec:	ldr	r3, [pc, #164]	; 12f98 <__assert_fail@plt+0x206c>
   12ef0:	moveq	r3, r2
   12ef4:	mov	r2, r6
   12ef8:	bl	10e78 <__printf_chk@plt>
   12efc:	b	12d54 <__assert_fail@plt+0x1e28>
   12f00:	mov	r0, r7
   12f04:	bl	10cc8 <strcmp@plt>
   12f08:	cmp	r0, #0
   12f0c:	beq	12e60 <__assert_fail@plt+0x1f34>
   12f10:	add	r6, r6, #8
   12f14:	b	12e54 <__assert_fail@plt+0x1f28>
   12f18:	mov	r2, #3
   12f1c:	ldr	r1, [pc, #120]	; 12f9c <__assert_fail@plt+0x2070>
   12f20:	bl	10f08 <strncmp@plt>
   12f24:	cmp	r0, #0
   12f28:	beq	12ea8 <__assert_fail@plt+0x1f7c>
   12f2c:	mov	r2, #5
   12f30:	ldr	r1, [pc, #104]	; 12fa0 <__assert_fail@plt+0x2074>
   12f34:	mov	r0, #0
   12f38:	bl	10d64 <dcgettext@plt>
   12f3c:	ldr	r1, [r4]
   12f40:	bl	10cbc <fputs_unlocked@plt>
   12f44:	b	12ea8 <__assert_fail@plt+0x1f7c>
   12f48:	andeq	sl, r2, r8, ror #8
   12f4c:	andeq	r8, r2, r8, asr #2
   12f50:	andeq	r5, r1, lr, lsr #25
   12f54:	ldrdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   12f58:	andeq	r8, r2, r4, asr r1
   12f5c:	strdeq	r5, [r1], -r8
   12f60:	andeq	r5, r1, fp, lsr #25
   12f64:	andeq	r5, r1, r8, ror #29
   12f68:	andeq	r5, r1, r5, lsl pc
   12f6c:	andeq	r5, r1, fp, asr #30
   12f70:	andeq	r6, r1, r0, asr #1
   12f74:	andeq	r6, r1, r9, ror #4
   12f78:	andeq	r6, r1, r4, lsl #8
   12f7c:	andeq	r5, r1, r4, ror #18
   12f80:	ldrdeq	r6, [r1], -ip
   12f84:	strdeq	r6, [r1], -r3
   12f88:	andeq	r6, r1, fp, lsl r6
   12f8c:	andeq	r6, r1, r4, ror r6
   12f90:	andeq	r6, r1, pc, lsl #13
   12f94:	strdeq	r6, [r1], -r2
   12f98:	andeq	r6, r1, r1, asr #13
   12f9c:	andeq	r6, r1, r9, lsr #12
   12fa0:	andeq	r6, r1, sp, lsr #12
   12fa4:	ldr	r3, [pc, #4]	; 12fb0 <__assert_fail@plt+0x2084>
   12fa8:	str	r0, [r3]
   12fac:	bx	lr
   12fb0:	andeq	sl, r2, r0, ror #8
   12fb4:	ldr	r3, [pc, #4]	; 12fc0 <__assert_fail@plt+0x2094>
   12fb8:	strb	r0, [r3, #4]
   12fbc:	bx	lr
   12fc0:	andeq	sl, r2, r0, ror #8
   12fc4:	ldr	r3, [pc, #176]	; 1307c <__assert_fail@plt+0x2150>
   12fc8:	push	{r0, r1, r4, r5, r6, lr}
   12fcc:	ldr	r0, [r3]
   12fd0:	bl	15480 <__assert_fail@plt+0x4554>
   12fd4:	cmp	r0, #0
   12fd8:	beq	13060 <__assert_fail@plt+0x2134>
   12fdc:	ldr	r4, [pc, #156]	; 13080 <__assert_fail@plt+0x2154>
   12fe0:	bl	10e48 <__errno_location@plt>
   12fe4:	mov	r5, r0
   12fe8:	ldrb	r6, [r4, #4]
   12fec:	cmp	r6, #0
   12ff0:	beq	13000 <__assert_fail@plt+0x20d4>
   12ff4:	ldr	r3, [r0]
   12ff8:	cmp	r3, #32
   12ffc:	beq	13060 <__assert_fail@plt+0x2134>
   13000:	mov	r2, #5
   13004:	ldr	r1, [pc, #120]	; 13084 <__assert_fail@plt+0x2158>
   13008:	mov	r0, #0
   1300c:	bl	10d64 <dcgettext@plt>
   13010:	mov	r6, r0
   13014:	ldr	r0, [r4]
   13018:	cmp	r0, #0
   1301c:	beq	1304c <__assert_fail@plt+0x2120>
   13020:	ldr	r4, [r5]
   13024:	bl	145cc <__assert_fail@plt+0x36a0>
   13028:	mov	r3, r0
   1302c:	ldr	r2, [pc, #84]	; 13088 <__assert_fail@plt+0x215c>
   13030:	mov	r0, #0
   13034:	str	r6, [sp]
   13038:	mov	r1, r4
   1303c:	bl	10dd0 <error@plt>
   13040:	ldr	r3, [pc, #68]	; 1308c <__assert_fail@plt+0x2160>
   13044:	ldr	r0, [r3]
   13048:	bl	10d04 <_exit@plt>
   1304c:	mov	r3, r6
   13050:	ldr	r2, [pc, #56]	; 13090 <__assert_fail@plt+0x2164>
   13054:	ldr	r1, [r5]
   13058:	bl	10dd0 <error@plt>
   1305c:	b	13040 <__assert_fail@plt+0x2114>
   13060:	ldr	r3, [pc, #44]	; 13094 <__assert_fail@plt+0x2168>
   13064:	ldr	r0, [r3]
   13068:	bl	15480 <__assert_fail@plt+0x4554>
   1306c:	cmp	r0, #0
   13070:	bne	13040 <__assert_fail@plt+0x2114>
   13074:	add	sp, sp, #8
   13078:	pop	{r4, r5, r6, pc}
   1307c:	andeq	r8, r2, r4, asr r1
   13080:	andeq	sl, r2, r0, ror #8
   13084:	muleq	r1, pc, ip	; <UNPREDICTABLE>
   13088:	andeq	r6, r1, r4, asr #23
   1308c:	strdeq	r8, [r2], -r4
   13090:	andeq	r6, r1, r8, asr #23
   13094:	andeq	r8, r2, r8, asr #2
   13098:	b	10cd4 <posix_fadvise64@plt>
   1309c:	cmp	r0, #0
   130a0:	bxeq	lr
   130a4:	push	{r0, r1, r2, r3, r4, lr}
   130a8:	mov	r4, r1
   130ac:	bl	10e84 <fileno@plt>
   130b0:	mov	r2, #0
   130b4:	mov	r3, #0
   130b8:	strd	r2, [sp]
   130bc:	str	r4, [sp, #8]
   130c0:	bl	10cd4 <posix_fadvise64@plt>
   130c4:	add	sp, sp, #16
   130c8:	pop	{r4, pc}
   130cc:	push	{r0, r1, r2, r4, r5, lr}
   130d0:	mov	r5, r0
   130d4:	bl	10e48 <__errno_location@plt>
   130d8:	mov	r4, r0
   130dc:	mov	r0, r5
   130e0:	ldr	r3, [r4]
   130e4:	str	r3, [sp]
   130e8:	str	r3, [sp, #4]
   130ec:	mov	r3, #0
   130f0:	str	r3, [r4]
   130f4:	bl	10cf8 <free@plt>
   130f8:	ldr	r3, [r4]
   130fc:	add	r2, sp, #8
   13100:	clz	r3, r3
   13104:	lsr	r3, r3, #5
   13108:	add	r3, r2, r3, lsl #2
   1310c:	ldr	r3, [r3, #-8]
   13110:	str	r3, [r4]
   13114:	add	sp, sp, #12
   13118:	pop	{r4, r5, pc}
   1311c:	push	{r4, r5, r6, lr}
   13120:	subs	r4, r0, #0
   13124:	bne	1313c <__assert_fail@plt+0x2210>
   13128:	ldr	r3, [pc, #124]	; 131ac <__assert_fail@plt+0x2280>
   1312c:	ldr	r0, [pc, #124]	; 131b0 <__assert_fail@plt+0x2284>
   13130:	ldr	r1, [r3]
   13134:	bl	10efc <fputs@plt>
   13138:	bl	10f14 <abort@plt>
   1313c:	mov	r1, #47	; 0x2f
   13140:	bl	10ed8 <strrchr@plt>
   13144:	subs	r6, r0, #0
   13148:	beq	13198 <__assert_fail@plt+0x226c>
   1314c:	add	r5, r6, #1
   13150:	sub	r3, r5, r4
   13154:	cmp	r3, #6
   13158:	ble	13198 <__assert_fail@plt+0x226c>
   1315c:	mov	r2, #7
   13160:	ldr	r1, [pc, #76]	; 131b4 <__assert_fail@plt+0x2288>
   13164:	sub	r0, r6, #6
   13168:	bl	10f08 <strncmp@plt>
   1316c:	cmp	r0, #0
   13170:	bne	13198 <__assert_fail@plt+0x226c>
   13174:	mov	r2, #3
   13178:	ldr	r1, [pc, #56]	; 131b8 <__assert_fail@plt+0x228c>
   1317c:	mov	r0, r5
   13180:	bl	10f08 <strncmp@plt>
   13184:	cmp	r0, #0
   13188:	ldreq	r3, [pc, #44]	; 131bc <__assert_fail@plt+0x2290>
   1318c:	addeq	r4, r6, #4
   13190:	movne	r4, r5
   13194:	streq	r4, [r3]
   13198:	ldr	r3, [pc, #32]	; 131c0 <__assert_fail@plt+0x2294>
   1319c:	str	r4, [r3]
   131a0:	ldr	r3, [pc, #28]	; 131c4 <__assert_fail@plt+0x2298>
   131a4:	str	r4, [r3]
   131a8:	pop	{r4, r5, r6, pc}
   131ac:	andeq	r8, r2, r8, asr #2
   131b0:	andeq	r6, r1, fp, asr #23
   131b4:	andeq	r6, r1, r3, lsl #24
   131b8:	andeq	r6, r1, fp, lsl #24
   131bc:	andeq	r8, r2, r8, lsr r1
   131c0:	andeq	sl, r2, r8, ror #8
   131c4:	andeq	r8, r2, ip, lsr r1
   131c8:	push	{r4, lr}
   131cc:	mov	r2, #48	; 0x30
   131d0:	mov	r4, r1
   131d4:	mov	r1, #0
   131d8:	bl	10e6c <memset@plt>
   131dc:	cmp	r4, #10
   131e0:	bne	131e8 <__assert_fail@plt+0x22bc>
   131e4:	bl	10f14 <abort@plt>
   131e8:	str	r4, [r0]
   131ec:	pop	{r4, pc}
   131f0:	push	{r4, r5, r6, lr}
   131f4:	mov	r2, #5
   131f8:	mov	r6, r0
   131fc:	mov	r5, r1
   13200:	mov	r1, r0
   13204:	mov	r0, #0
   13208:	bl	10d64 <dcgettext@plt>
   1320c:	cmp	r6, r0
   13210:	mov	r4, r0
   13214:	bne	13284 <__assert_fail@plt+0x2358>
   13218:	bl	156a8 <__assert_fail@plt+0x477c>
   1321c:	ldrb	r3, [r0]
   13220:	bic	r3, r3, #32
   13224:	cmp	r3, #85	; 0x55
   13228:	bne	1328c <__assert_fail@plt+0x2360>
   1322c:	ldrb	r3, [r0, #1]
   13230:	bic	r3, r3, #32
   13234:	cmp	r3, #84	; 0x54
   13238:	bne	132fc <__assert_fail@plt+0x23d0>
   1323c:	ldrb	r3, [r0, #2]
   13240:	bic	r3, r3, #32
   13244:	cmp	r3, #70	; 0x46
   13248:	bne	132fc <__assert_fail@plt+0x23d0>
   1324c:	ldrb	r3, [r0, #3]
   13250:	cmp	r3, #45	; 0x2d
   13254:	bne	132fc <__assert_fail@plt+0x23d0>
   13258:	ldrb	r3, [r0, #4]
   1325c:	cmp	r3, #56	; 0x38
   13260:	bne	132fc <__assert_fail@plt+0x23d0>
   13264:	ldrb	r3, [r0, #5]
   13268:	cmp	r3, #0
   1326c:	bne	132fc <__assert_fail@plt+0x23d0>
   13270:	ldrb	r2, [r4]
   13274:	ldr	r3, [pc, #144]	; 1330c <__assert_fail@plt+0x23e0>
   13278:	ldr	r4, [pc, #144]	; 13310 <__assert_fail@plt+0x23e4>
   1327c:	cmp	r2, #96	; 0x60
   13280:	movne	r4, r3
   13284:	mov	r0, r4
   13288:	pop	{r4, r5, r6, pc}
   1328c:	cmp	r3, #71	; 0x47
   13290:	bne	132fc <__assert_fail@plt+0x23d0>
   13294:	ldrb	r3, [r0, #1]
   13298:	bic	r3, r3, #32
   1329c:	cmp	r3, #66	; 0x42
   132a0:	bne	132fc <__assert_fail@plt+0x23d0>
   132a4:	ldrb	r3, [r0, #2]
   132a8:	cmp	r3, #49	; 0x31
   132ac:	bne	132fc <__assert_fail@plt+0x23d0>
   132b0:	ldrb	r3, [r0, #3]
   132b4:	cmp	r3, #56	; 0x38
   132b8:	bne	132fc <__assert_fail@plt+0x23d0>
   132bc:	ldrb	r3, [r0, #4]
   132c0:	cmp	r3, #48	; 0x30
   132c4:	bne	132fc <__assert_fail@plt+0x23d0>
   132c8:	ldrb	r3, [r0, #5]
   132cc:	cmp	r3, #51	; 0x33
   132d0:	bne	132fc <__assert_fail@plt+0x23d0>
   132d4:	ldrb	r3, [r0, #6]
   132d8:	cmp	r3, #48	; 0x30
   132dc:	bne	132fc <__assert_fail@plt+0x23d0>
   132e0:	ldrb	r3, [r0, #7]
   132e4:	cmp	r3, #0
   132e8:	bne	132fc <__assert_fail@plt+0x23d0>
   132ec:	ldrb	r2, [r4]
   132f0:	ldr	r3, [pc, #28]	; 13314 <__assert_fail@plt+0x23e8>
   132f4:	ldr	r4, [pc, #28]	; 13318 <__assert_fail@plt+0x23ec>
   132f8:	b	1327c <__assert_fail@plt+0x2350>
   132fc:	ldr	r4, [pc, #24]	; 1331c <__assert_fail@plt+0x23f0>
   13300:	cmp	r5, #9
   13304:	ldr	r3, [pc, #20]	; 13320 <__assert_fail@plt+0x23f4>
   13308:	b	13280 <__assert_fail@plt+0x2354>
   1330c:	andeq	r6, r1, r6, ror #24
   13310:	andeq	r6, r1, r1, ror ip
   13314:	andeq	r6, r1, sl, ror #24
   13318:	andeq	r6, r1, sp, ror #24
   1331c:	andeq	r6, r1, r4, ror #24
   13320:			; <UNDEFINED> instruction: 0x00015bb0
   13324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13328:	sub	sp, sp, #108	; 0x6c
   1332c:	mov	r8, r0
   13330:	mov	r5, r1
   13334:	mov	r6, #0
   13338:	str	r3, [sp, #40]	; 0x28
   1333c:	str	r2, [sp, #48]	; 0x30
   13340:	ldr	sl, [sp, #144]	; 0x90
   13344:	bl	10da0 <__ctype_get_mb_cur_max@plt>
   13348:	ldr	r3, [sp, #148]	; 0x94
   1334c:	str	r6, [sp, #24]
   13350:	str	r6, [sp, #32]
   13354:	str	r6, [sp, #44]	; 0x2c
   13358:	str	r6, [sp, #52]	; 0x34
   1335c:	ubfx	r7, r3, #1, #1
   13360:	mov	r3, #1
   13364:	str	r6, [sp, #60]	; 0x3c
   13368:	str	r3, [sp, #72]	; 0x48
   1336c:	str	r0, [sp, #76]	; 0x4c
   13370:	cmp	sl, #10
   13374:	ldrls	pc, [pc, sl, lsl #2]
   13378:	b	135bc <__assert_fail@plt+0x2690>
   1337c:	andeq	r3, r1, r8, lsr #7
   13380:	ldrdeq	r3, [r1], -r4
   13384:	andeq	r3, r1, r8, asr r5
   13388:	andeq	r3, r1, r0, ror r5
   1338c:	andeq	r3, r1, r0, asr #10
   13390:	muleq	r1, r8, r4
   13394:	andeq	r3, r1, r8, ror r4
   13398:	andeq	r3, r1, r0, asr #11
   1339c:	andeq	r3, r1, r8, asr #9
   133a0:	andeq	r3, r1, r8, asr #9
   133a4:	andeq	r3, r1, r8, asr #9
   133a8:	mov	r4, sl
   133ac:	mov	r7, #0
   133b0:	mov	r9, r5
   133b4:	mov	r3, #0
   133b8:	str	r6, [sp, #68]	; 0x44
   133bc:	str	r3, [sp, #28]
   133c0:	ldr	r3, [sp, #40]	; 0x28
   133c4:	cmn	r3, #1
   133c8:	bne	13f68 <__assert_fail@plt+0x303c>
   133cc:	ldr	r2, [sp, #28]
   133d0:	ldr	r3, [sp, #48]	; 0x30
   133d4:	ldrb	r3, [r3, r2]
   133d8:	adds	r3, r3, #0
   133dc:	movne	r3, #1
   133e0:	str	r3, [sp, #36]	; 0x24
   133e4:	ldr	r3, [sp, #36]	; 0x24
   133e8:	cmp	r3, #0
   133ec:	bne	135f8 <__assert_fail@plt+0x26cc>
   133f0:	sub	r3, sl, #2
   133f4:	cmp	r4, #0
   133f8:	clz	r3, r3
   133fc:	movne	r2, #0
   13400:	lsr	r3, r3, #5
   13404:	andeq	r2, r3, r7
   13408:	cmp	r2, #0
   1340c:	bne	137bc <__assert_fail@plt+0x2890>
   13410:	eor	r7, r7, #1
   13414:	ands	r3, r3, r7
   13418:	beq	13fe0 <__assert_fail@plt+0x30b4>
   1341c:	ldr	r2, [sp, #68]	; 0x44
   13420:	cmp	r2, #0
   13424:	beq	13fa8 <__assert_fail@plt+0x307c>
   13428:	ldr	r3, [sp, #72]	; 0x48
   1342c:	cmp	r3, #0
   13430:	beq	13f7c <__assert_fail@plt+0x3050>
   13434:	ldr	r2, [sp, #48]	; 0x30
   13438:	ldr	r3, [sp, #160]	; 0xa0
   1343c:	ldr	r1, [sp, #60]	; 0x3c
   13440:	str	r3, [sp, #16]
   13444:	ldr	r3, [sp, #156]	; 0x9c
   13448:	str	r3, [sp, #12]
   1344c:	ldr	r3, [sp, #152]	; 0x98
   13450:	str	r3, [sp, #8]
   13454:	ldr	r3, [sp, #148]	; 0x94
   13458:	str	r3, [sp, #4]
   1345c:	mov	r3, #5
   13460:	str	r3, [sp]
   13464:	ldr	r3, [sp, #40]	; 0x28
   13468:	mov	r0, r8
   1346c:	bl	13324 <__assert_fail@plt+0x23f8>
   13470:	mov	r4, r0
   13474:	b	13fd4 <__assert_fail@plt+0x30a8>
   13478:	ldr	r3, [pc, #2948]	; 14004 <__assert_fail@plt+0x30d8>
   1347c:	mov	r7, #1
   13480:	mov	r4, #0
   13484:	mov	sl, #5
   13488:	str	r7, [sp, #24]
   1348c:	str	r7, [sp, #32]
   13490:	str	r3, [sp, #44]	; 0x2c
   13494:	b	133b0 <__assert_fail@plt+0x2484>
   13498:	cmp	r7, #0
   1349c:	bne	135e0 <__assert_fail@plt+0x26b4>
   134a0:	cmp	r5, #0
   134a4:	mov	r4, #1
   134a8:	movne	r3, #34	; 0x22
   134ac:	strbne	r3, [r8]
   134b0:	mov	r3, #1
   134b4:	str	r3, [sp, #24]
   134b8:	str	r3, [sp, #32]
   134bc:	ldr	r3, [pc, #2880]	; 14004 <__assert_fail@plt+0x30d8>
   134c0:	str	r3, [sp, #44]	; 0x2c
   134c4:	b	133b0 <__assert_fail@plt+0x2484>
   134c8:	cmp	sl, #10
   134cc:	beq	134f0 <__assert_fail@plt+0x25c4>
   134d0:	mov	r1, sl
   134d4:	ldr	r0, [pc, #2860]	; 14008 <__assert_fail@plt+0x30dc>
   134d8:	bl	131f0 <__assert_fail@plt+0x22c4>
   134dc:	mov	r1, sl
   134e0:	str	r0, [sp, #156]	; 0x9c
   134e4:	ldr	r0, [pc, #2848]	; 1400c <__assert_fail@plt+0x30e0>
   134e8:	bl	131f0 <__assert_fail@plt+0x22c4>
   134ec:	str	r0, [sp, #160]	; 0xa0
   134f0:	cmp	r7, #0
   134f4:	moveq	r4, r7
   134f8:	beq	13510 <__assert_fail@plt+0x25e4>
   134fc:	mov	r4, #0
   13500:	b	13520 <__assert_fail@plt+0x25f4>
   13504:	cmp	r5, r4
   13508:	strbhi	r3, [r8, r4]
   1350c:	add	r4, r4, #1
   13510:	ldr	r3, [sp, #156]	; 0x9c
   13514:	ldrb	r3, [r3, r4]
   13518:	cmp	r3, #0
   1351c:	bne	13504 <__assert_fail@plt+0x25d8>
   13520:	ldr	r0, [sp, #160]	; 0xa0
   13524:	bl	10e30 <strlen@plt>
   13528:	ldr	r3, [sp, #160]	; 0xa0
   1352c:	str	r0, [sp, #32]
   13530:	str	r3, [sp, #44]	; 0x2c
   13534:	mov	r3, #1
   13538:	str	r3, [sp, #24]
   1353c:	b	133b0 <__assert_fail@plt+0x2484>
   13540:	mov	r3, #1
   13544:	cmp	r7, #0
   13548:	streq	r3, [sp, #24]
   1354c:	beq	13590 <__assert_fail@plt+0x2664>
   13550:	str	r3, [sp, #32]
   13554:	b	1357c <__assert_fail@plt+0x2650>
   13558:	cmp	r7, #0
   1355c:	beq	13590 <__assert_fail@plt+0x2664>
   13560:	mov	r3, #1
   13564:	str	r3, [sp, #32]
   13568:	ldr	r3, [pc, #2716]	; 1400c <__assert_fail@plt+0x30e0>
   1356c:	b	135f0 <__assert_fail@plt+0x26c4>
   13570:	mov	r7, #1
   13574:	str	r7, [sp, #24]
   13578:	str	r7, [sp, #32]
   1357c:	ldr	r3, [pc, #2696]	; 1400c <__assert_fail@plt+0x30e0>
   13580:	mov	r4, #0
   13584:	str	r3, [sp, #44]	; 0x2c
   13588:	mov	sl, #2
   1358c:	b	133b0 <__assert_fail@plt+0x2484>
   13590:	cmp	r5, #0
   13594:	movne	r3, #39	; 0x27
   13598:	movne	r7, #0
   1359c:	strbne	r3, [r8]
   135a0:	moveq	r7, r5
   135a4:	mov	r3, #1
   135a8:	mov	r4, #1
   135ac:	str	r3, [sp, #32]
   135b0:	ldr	r3, [pc, #2644]	; 1400c <__assert_fail@plt+0x30e0>
   135b4:	str	r3, [sp, #44]	; 0x2c
   135b8:	b	13588 <__assert_fail@plt+0x265c>
   135bc:	bl	10f14 <abort@plt>
   135c0:	mov	r3, #1
   135c4:	mov	r7, #0
   135c8:	str	r3, [sp, #24]
   135cc:	mov	r4, #0
   135d0:	b	133b0 <__assert_fail@plt+0x2484>
   135d4:	mov	r7, #1
   135d8:	str	sl, [sp, #32]
   135dc:	b	1357c <__assert_fail@plt+0x2650>
   135e0:	mov	r3, #1
   135e4:	str	r7, [sp, #24]
   135e8:	str	r3, [sp, #32]
   135ec:	ldr	r3, [pc, #2576]	; 14004 <__assert_fail@plt+0x30d8>
   135f0:	str	r3, [sp, #44]	; 0x2c
   135f4:	b	135cc <__assert_fail@plt+0x26a0>
   135f8:	ldr	fp, [sp, #24]
   135fc:	ldr	r3, [sp, #32]
   13600:	cmp	sl, #2
   13604:	moveq	fp, #0
   13608:	andne	fp, fp, #1
   1360c:	adds	r5, r3, #0
   13610:	movne	r5, #1
   13614:	ands	r3, fp, r5
   13618:	str	r3, [sp, #64]	; 0x40
   1361c:	beq	136ec <__assert_fail@plt+0x27c0>
   13620:	ldr	r3, [sp, #28]
   13624:	ldr	r2, [sp, #32]
   13628:	cmp	r2, #1
   1362c:	add	r6, r3, r2
   13630:	mov	r3, r2
   13634:	ldr	r2, [sp, #40]	; 0x28
   13638:	movls	r3, #0
   1363c:	movhi	r3, #1
   13640:	cmn	r2, #1
   13644:	movne	r3, #0
   13648:	cmp	r3, #0
   1364c:	beq	1365c <__assert_fail@plt+0x2730>
   13650:	ldr	r0, [sp, #48]	; 0x30
   13654:	bl	10e30 <strlen@plt>
   13658:	str	r0, [sp, #40]	; 0x28
   1365c:	ldr	r3, [sp, #40]	; 0x28
   13660:	cmp	r6, r3
   13664:	bhi	136e4 <__assert_fail@plt+0x27b8>
   13668:	ldr	r0, [sp, #28]
   1366c:	ldr	r2, [sp, #32]
   13670:	ldr	r3, [sp, #48]	; 0x30
   13674:	ldr	r1, [sp, #44]	; 0x2c
   13678:	add	r0, r3, r0
   1367c:	bl	10d40 <memcmp@plt>
   13680:	cmp	r0, #0
   13684:	bne	136e4 <__assert_fail@plt+0x27b8>
   13688:	cmp	r7, #0
   1368c:	beq	136ec <__assert_fail@plt+0x27c0>
   13690:	str	r7, [sp, #24]
   13694:	ldr	r3, [sp, #24]
   13698:	mov	r1, r9
   1369c:	ldr	r2, [sp, #48]	; 0x30
   136a0:	cmp	sl, #2
   136a4:	movne	r3, #0
   136a8:	andeq	r3, r3, #1
   136ac:	cmp	r3, #0
   136b0:	ldr	r3, [sp, #160]	; 0xa0
   136b4:	movne	sl, #4
   136b8:	str	sl, [sp]
   136bc:	str	r3, [sp, #16]
   136c0:	ldr	r3, [sp, #156]	; 0x9c
   136c4:	str	r3, [sp, #12]
   136c8:	mov	r3, #0
   136cc:	str	r3, [sp, #8]
   136d0:	ldr	r3, [sp, #148]	; 0x94
   136d4:	bic	r3, r3, #2
   136d8:	str	r3, [sp, #4]
   136dc:	ldr	r3, [sp, #40]	; 0x28
   136e0:	b	13468 <__assert_fail@plt+0x253c>
   136e4:	mov	r3, #0
   136e8:	str	r3, [sp, #64]	; 0x40
   136ec:	ldr	r2, [sp, #28]
   136f0:	ldr	r3, [sp, #48]	; 0x30
   136f4:	add	r3, r3, r2
   136f8:	str	r3, [sp, #80]	; 0x50
   136fc:	ldr	r3, [sp, #48]	; 0x30
   13700:	ldrb	r6, [r3, r2]
   13704:	cmp	r6, #58	; 0x3a
   13708:	bhi	1386c <__assert_fail@plt+0x2940>
   1370c:	cmp	r6, #43	; 0x2b
   13710:	bcs	13a2c <__assert_fail@plt+0x2b00>
   13714:	cmp	r6, #32
   13718:	beq	13a80 <__assert_fail@plt+0x2b54>
   1371c:	bhi	137c4 <__assert_fail@plt+0x2898>
   13720:	cmp	r6, #9
   13724:	beq	13c28 <__assert_fail@plt+0x2cfc>
   13728:	bhi	13788 <__assert_fail@plt+0x285c>
   1372c:	cmp	r6, #7
   13730:	beq	13c38 <__assert_fail@plt+0x2d0c>
   13734:	bhi	13c54 <__assert_fail@plt+0x2d28>
   13738:	cmp	r6, #0
   1373c:	beq	13a9c <__assert_fail@plt+0x2b70>
   13740:	ldr	r3, [sp, #76]	; 0x4c
   13744:	cmp	r3, #1
   13748:	bne	13ca0 <__assert_fail@plt+0x2d74>
   1374c:	bl	10e18 <__ctype_b_loc@plt>
   13750:	ldr	r2, [r0]
   13754:	sxth	r3, r6
   13758:	lsl	r3, r3, #1
   1375c:	ldrh	r5, [r2, r3]
   13760:	ldr	r3, [sp, #76]	; 0x4c
   13764:	ubfx	r5, r5, #14, #1
   13768:	str	r3, [sp, #56]	; 0x38
   1376c:	ldr	r3, [sp, #24]
   13770:	eor	fp, r5, #1
   13774:	and	fp, fp, r3
   13778:	ands	fp, fp, #255	; 0xff
   1377c:	beq	1395c <__assert_fail@plt+0x2a30>
   13780:	mov	r5, #0
   13784:	b	13d4c <__assert_fail@plt+0x2e20>
   13788:	cmp	r6, #11
   1378c:	beq	13c5c <__assert_fail@plt+0x2d30>
   13790:	bcc	13c30 <__assert_fail@plt+0x2d04>
   13794:	cmp	r6, #12
   13798:	beq	13c64 <__assert_fail@plt+0x2d38>
   1379c:	cmp	r6, #13
   137a0:	moveq	r3, #114	; 0x72
   137a4:	bne	13740 <__assert_fail@plt+0x2814>
   137a8:	cmp	sl, #2
   137ac:	movne	r2, #0
   137b0:	andeq	r2, r7, #1
   137b4:	cmp	r2, #0
   137b8:	beq	13c3c <__assert_fail@plt+0x2d10>
   137bc:	mov	sl, #2
   137c0:	b	13694 <__assert_fail@plt+0x2768>
   137c4:	cmp	r6, #37	; 0x25
   137c8:	beq	13a2c <__assert_fail@plt+0x2b00>
   137cc:	bhi	137e0 <__assert_fail@plt+0x28b4>
   137d0:	cmp	r6, #35	; 0x23
   137d4:	beq	13a74 <__assert_fail@plt+0x2b48>
   137d8:	mov	r5, #0
   137dc:	b	13a84 <__assert_fail@plt+0x2b58>
   137e0:	cmp	r6, #39	; 0x27
   137e4:	bne	137d8 <__assert_fail@plt+0x28ac>
   137e8:	cmp	sl, #2
   137ec:	ldrne	r5, [sp, #36]	; 0x24
   137f0:	movne	r3, r5
   137f4:	strne	r3, [sp, #68]	; 0x44
   137f8:	bne	13b78 <__assert_fail@plt+0x2c4c>
   137fc:	cmp	r7, #0
   13800:	bne	13694 <__assert_fail@plt+0x2768>
   13804:	ldr	r3, [sp, #60]	; 0x3c
   13808:	cmp	r9, #0
   1380c:	clz	r3, r3
   13810:	lsr	r3, r3, #5
   13814:	moveq	r3, #0
   13818:	cmp	r3, #0
   1381c:	strne	r9, [sp, #60]	; 0x3c
   13820:	movne	r9, #0
   13824:	bne	13834 <__assert_fail@plt+0x2908>
   13828:	cmp	r9, r4
   1382c:	movhi	r3, #39	; 0x27
   13830:	strbhi	r3, [r8, r4]
   13834:	add	r3, r4, #1
   13838:	ldr	r5, [sp, #36]	; 0x24
   1383c:	mov	fp, #0
   13840:	cmp	r3, r9
   13844:	movcc	r2, #92	; 0x5c
   13848:	str	fp, [sp, #52]	; 0x34
   1384c:	strbcc	r2, [r8, r3]
   13850:	add	r3, r4, #2
   13854:	add	r4, r4, #3
   13858:	cmp	r3, r9
   1385c:	str	r5, [sp, #68]	; 0x44
   13860:	movcc	r2, #39	; 0x27
   13864:	strbcc	r2, [r8, r3]
   13868:	b	1395c <__assert_fail@plt+0x2a30>
   1386c:	cmp	r6, #94	; 0x5e
   13870:	beq	137d8 <__assert_fail@plt+0x28ac>
   13874:	bhi	13a34 <__assert_fail@plt+0x2b08>
   13878:	cmp	r6, #90	; 0x5a
   1387c:	bhi	13a20 <__assert_fail@plt+0x2af4>
   13880:	cmp	r6, #65	; 0x41
   13884:	bcs	13a2c <__assert_fail@plt+0x2b00>
   13888:	cmp	r6, #62	; 0x3e
   1388c:	bls	137d8 <__assert_fail@plt+0x28ac>
   13890:	cmp	r6, #63	; 0x3f
   13894:	bne	13740 <__assert_fail@plt+0x2814>
   13898:	cmp	sl, #2
   1389c:	beq	13b80 <__assert_fail@plt+0x2c54>
   138a0:	cmp	sl, #5
   138a4:	movne	fp, #0
   138a8:	bne	13f50 <__assert_fail@plt+0x3024>
   138ac:	ldr	r3, [sp, #148]	; 0x94
   138b0:	tst	r3, #4
   138b4:	beq	13b88 <__assert_fail@plt+0x2c5c>
   138b8:	ldr	r3, [sp, #28]
   138bc:	add	r2, r3, #2
   138c0:	ldr	r3, [sp, #40]	; 0x28
   138c4:	cmp	r2, r3
   138c8:	bcs	13b88 <__assert_fail@plt+0x2c5c>
   138cc:	ldr	r1, [sp, #28]
   138d0:	ldr	r3, [sp, #48]	; 0x30
   138d4:	add	r3, r3, r1
   138d8:	ldrb	r1, [r3, #1]
   138dc:	cmp	r1, #63	; 0x3f
   138e0:	bne	13b88 <__assert_fail@plt+0x2c5c>
   138e4:	ldr	r3, [sp, #48]	; 0x30
   138e8:	ldrb	r6, [r3, r2]
   138ec:	sub	r3, r6, #33	; 0x21
   138f0:	uxtb	r3, r3
   138f4:	cmp	r3, #29
   138f8:	bhi	13f58 <__assert_fail@plt+0x302c>
   138fc:	ldr	r0, [pc, #1804]	; 14010 <__assert_fail@plt+0x30e4>
   13900:	mov	r5, #1
   13904:	ands	r5, r0, r5, lsl r3
   13908:	beq	13f60 <__assert_fail@plt+0x3034>
   1390c:	cmp	r7, #0
   13910:	bne	13694 <__assert_fail@plt+0x2768>
   13914:	cmp	r9, r4
   13918:	add	r3, r4, #1
   1391c:	str	r2, [sp, #28]
   13920:	mov	r5, #0
   13924:	strbhi	r1, [r8, r4]
   13928:	cmp	r9, r3
   1392c:	mov	fp, r5
   13930:	movhi	r1, #34	; 0x22
   13934:	strbhi	r1, [r8, r3]
   13938:	add	r3, r4, #2
   1393c:	cmp	r9, r3
   13940:	movhi	r1, #34	; 0x22
   13944:	strbhi	r1, [r8, r3]
   13948:	add	r3, r4, #3
   1394c:	add	r4, r4, #4
   13950:	cmp	r9, r3
   13954:	movhi	r1, #63	; 0x3f
   13958:	strbhi	r1, [r8, r3]
   1395c:	ldr	r3, [sp, #24]
   13960:	eor	r3, r3, #1
   13964:	cmp	sl, #2
   13968:	orreq	r3, r3, #1
   1396c:	eor	r3, r3, #1
   13970:	orr	r3, r7, r3
   13974:	tst	r3, #255	; 0xff
   13978:	beq	139a4 <__assert_fail@plt+0x2a78>
   1397c:	ldr	r3, [sp, #152]	; 0x98
   13980:	cmp	r3, #0
   13984:	beq	139a4 <__assert_fail@plt+0x2a78>
   13988:	ldr	r1, [sp, #152]	; 0x98
   1398c:	ubfx	r2, r6, #5, #8
   13990:	and	r3, r6, #31
   13994:	ldr	r2, [r1, r2, lsl #2]
   13998:	lsr	r3, r2, r3
   1399c:	tst	r3, #1
   139a0:	bne	139b0 <__assert_fail@plt+0x2a84>
   139a4:	ldr	r3, [sp, #64]	; 0x40
   139a8:	cmp	r3, #0
   139ac:	beq	13ba8 <__assert_fail@plt+0x2c7c>
   139b0:	sub	r3, sl, #2
   139b4:	cmp	r7, #0
   139b8:	clz	r3, r3
   139bc:	lsr	r3, r3, #5
   139c0:	bne	13694 <__assert_fail@plt+0x2768>
   139c4:	ldr	r2, [sp, #52]	; 0x34
   139c8:	eor	r2, r2, #1
   139cc:	ands	r3, r3, r2
   139d0:	beq	13a08 <__assert_fail@plt+0x2adc>
   139d4:	cmp	r9, r4
   139d8:	str	r3, [sp, #52]	; 0x34
   139dc:	movhi	r2, #39	; 0x27
   139e0:	strbhi	r2, [r8, r4]
   139e4:	add	r2, r4, #1
   139e8:	cmp	r9, r2
   139ec:	movhi	r1, #36	; 0x24
   139f0:	strbhi	r1, [r8, r2]
   139f4:	add	r2, r4, #2
   139f8:	add	r4, r4, #3
   139fc:	cmp	r9, r2
   13a00:	movhi	r1, #39	; 0x27
   13a04:	strbhi	r1, [r8, r2]
   13a08:	cmp	r9, r4
   13a0c:	ldr	fp, [sp, #36]	; 0x24
   13a10:	movhi	r3, #92	; 0x5c
   13a14:	strbhi	r3, [r8, r4]
   13a18:	add	r4, r4, #1
   13a1c:	b	13ba8 <__assert_fail@plt+0x2c7c>
   13a20:	cmp	r6, #92	; 0x5c
   13a24:	beq	13b90 <__assert_fail@plt+0x2c64>
   13a28:	bls	137d8 <__assert_fail@plt+0x28ac>
   13a2c:	ldr	r5, [sp, #36]	; 0x24
   13a30:	b	13b78 <__assert_fail@plt+0x2c4c>
   13a34:	cmp	r6, #122	; 0x7a
   13a38:	bhi	13a58 <__assert_fail@plt+0x2b2c>
   13a3c:	cmp	r6, #97	; 0x61
   13a40:	bcs	13a2c <__assert_fail@plt+0x2b00>
   13a44:	cmp	r6, #95	; 0x5f
   13a48:	beq	13a2c <__assert_fail@plt+0x2b00>
   13a4c:	cmp	r6, #96	; 0x60
   13a50:	bne	13740 <__assert_fail@plt+0x2814>
   13a54:	b	137d8 <__assert_fail@plt+0x28ac>
   13a58:	cmp	r6, #124	; 0x7c
   13a5c:	beq	137d8 <__assert_fail@plt+0x28ac>
   13a60:	bcc	13c6c <__assert_fail@plt+0x2d40>
   13a64:	cmp	r6, #125	; 0x7d
   13a68:	beq	13c6c <__assert_fail@plt+0x2d40>
   13a6c:	cmp	r6, #126	; 0x7e
   13a70:	bne	13740 <__assert_fail@plt+0x2814>
   13a74:	ldr	r3, [sp, #28]
   13a78:	cmp	r3, #0
   13a7c:	bne	13b88 <__assert_fail@plt+0x2c5c>
   13a80:	ldr	r5, [sp, #36]	; 0x24
   13a84:	cmp	sl, #2
   13a88:	movne	fp, #0
   13a8c:	andeq	fp, r7, #1
   13a90:	cmp	fp, #0
   13a94:	beq	1395c <__assert_fail@plt+0x2a30>
   13a98:	b	137bc <__assert_fail@plt+0x2890>
   13a9c:	ldr	r3, [sp, #24]
   13aa0:	cmp	r3, #0
   13aa4:	beq	13b6c <__assert_fail@plt+0x2c40>
   13aa8:	sub	r2, sl, #2
   13aac:	cmp	r7, #0
   13ab0:	clz	r2, r2
   13ab4:	lsr	r2, r2, #5
   13ab8:	bne	13690 <__assert_fail@plt+0x2764>
   13abc:	ldr	r3, [sp, #52]	; 0x34
   13ac0:	eor	r3, r3, #1
   13ac4:	ands	r2, r2, r3
   13ac8:	moveq	r3, r4
   13acc:	beq	13b04 <__assert_fail@plt+0x2bd8>
   13ad0:	cmp	r9, r4
   13ad4:	str	r2, [sp, #52]	; 0x34
   13ad8:	movhi	r3, #39	; 0x27
   13adc:	strbhi	r3, [r8, r4]
   13ae0:	add	r3, r4, #1
   13ae4:	cmp	r9, r3
   13ae8:	movhi	r1, #36	; 0x24
   13aec:	strbhi	r1, [r8, r3]
   13af0:	add	r3, r4, #2
   13af4:	cmp	r9, r3
   13af8:	movhi	r1, #39	; 0x27
   13afc:	strbhi	r1, [r8, r3]
   13b00:	add	r3, r4, #3
   13b04:	cmp	r9, r3
   13b08:	add	r4, r3, #1
   13b0c:	movhi	r2, #92	; 0x5c
   13b10:	strbhi	r2, [r8, r3]
   13b14:	cmp	fp, #0
   13b18:	beq	13f40 <__assert_fail@plt+0x3014>
   13b1c:	ldr	r2, [sp, #28]
   13b20:	ldr	r1, [sp, #40]	; 0x28
   13b24:	add	r2, r2, #1
   13b28:	cmp	r2, r1
   13b2c:	bcs	13b64 <__assert_fail@plt+0x2c38>
   13b30:	ldr	r1, [sp, #48]	; 0x30
   13b34:	mov	r6, #48	; 0x30
   13b38:	ldrb	r2, [r1, r2]
   13b3c:	sub	r2, r2, #48	; 0x30
   13b40:	cmp	r2, #9
   13b44:	bhi	13f50 <__assert_fail@plt+0x3024>
   13b48:	cmp	r9, r4
   13b4c:	add	r2, r3, #2
   13b50:	strbhi	r6, [r8, r4]
   13b54:	cmp	r9, r2
   13b58:	add	r4, r3, #3
   13b5c:	movhi	r1, #48	; 0x30
   13b60:	strbhi	r1, [r8, r2]
   13b64:	mov	r5, #0
   13b68:	b	13f48 <__assert_fail@plt+0x301c>
   13b6c:	ldr	r3, [sp, #148]	; 0x94
   13b70:	ands	r5, r3, #1
   13b74:	bne	13bfc <__assert_fail@plt+0x2cd0>
   13b78:	mov	fp, #0
   13b7c:	b	1395c <__assert_fail@plt+0x2a30>
   13b80:	cmp	r7, #0
   13b84:	bne	13694 <__assert_fail@plt+0x2768>
   13b88:	mov	r5, #0
   13b8c:	b	13b78 <__assert_fail@plt+0x2c4c>
   13b90:	cmp	sl, #2
   13b94:	bne	13c08 <__assert_fail@plt+0x2cdc>
   13b98:	cmp	r7, #0
   13b9c:	bne	13694 <__assert_fail@plt+0x2768>
   13ba0:	mov	r5, r7
   13ba4:	mov	fp, r7
   13ba8:	ldr	r3, [sp, #52]	; 0x34
   13bac:	eor	fp, fp, #1
   13bb0:	tst	r3, fp
   13bb4:	beq	13be0 <__assert_fail@plt+0x2cb4>
   13bb8:	cmp	r9, r4
   13bbc:	movhi	r3, #39	; 0x27
   13bc0:	strbhi	r3, [r8, r4]
   13bc4:	add	r3, r4, #1
   13bc8:	add	r4, r4, #2
   13bcc:	cmp	r9, r3
   13bd0:	movhi	r2, #39	; 0x27
   13bd4:	strbhi	r2, [r8, r3]
   13bd8:	mov	r3, #0
   13bdc:	str	r3, [sp, #52]	; 0x34
   13be0:	cmp	r9, r4
   13be4:	ldr	r3, [sp, #72]	; 0x48
   13be8:	strbhi	r6, [r8, r4]
   13bec:	cmp	r5, #0
   13bf0:	add	r4, r4, #1
   13bf4:	moveq	r3, #0
   13bf8:	str	r3, [sp, #72]	; 0x48
   13bfc:	ldr	r3, [sp, #28]
   13c00:	add	r3, r3, #1
   13c04:	b	133bc <__assert_fail@plt+0x2490>
   13c08:	ldr	r3, [sp, #24]
   13c0c:	and	r3, r3, r7
   13c10:	tst	r5, r3
   13c14:	moveq	r3, r6
   13c18:	beq	137a8 <__assert_fail@plt+0x287c>
   13c1c:	mov	fp, #0
   13c20:	mov	r5, fp
   13c24:	b	13ba8 <__assert_fail@plt+0x2c7c>
   13c28:	mov	r3, #116	; 0x74
   13c2c:	b	137a8 <__assert_fail@plt+0x287c>
   13c30:	mov	r3, #110	; 0x6e
   13c34:	b	137a8 <__assert_fail@plt+0x287c>
   13c38:	mov	r3, #97	; 0x61
   13c3c:	ldr	r2, [sp, #24]
   13c40:	cmp	r2, #0
   13c44:	beq	13b88 <__assert_fail@plt+0x2c5c>
   13c48:	mov	r6, r3
   13c4c:	mov	r5, #0
   13c50:	b	139b0 <__assert_fail@plt+0x2a84>
   13c54:	mov	r3, #98	; 0x62
   13c58:	b	13c3c <__assert_fail@plt+0x2d10>
   13c5c:	mov	r3, #118	; 0x76
   13c60:	b	13c3c <__assert_fail@plt+0x2d10>
   13c64:	mov	r3, #102	; 0x66
   13c68:	b	13c3c <__assert_fail@plt+0x2d10>
   13c6c:	ldr	r3, [sp, #40]	; 0x28
   13c70:	cmn	r3, #1
   13c74:	bne	13c94 <__assert_fail@plt+0x2d68>
   13c78:	ldr	r3, [sp, #48]	; 0x30
   13c7c:	ldrb	r3, [r3, #1]
   13c80:	adds	r3, r3, #0
   13c84:	movne	r3, #1
   13c88:	cmp	r3, #0
   13c8c:	bne	13b88 <__assert_fail@plt+0x2c5c>
   13c90:	b	13a74 <__assert_fail@plt+0x2b48>
   13c94:	ldr	r3, [sp, #40]	; 0x28
   13c98:	subs	r3, r3, #1
   13c9c:	b	13c84 <__assert_fail@plt+0x2d58>
   13ca0:	mov	r3, #0
   13ca4:	mov	r2, #0
   13ca8:	strd	r2, [sp, #96]	; 0x60
   13cac:	ldr	r3, [sp, #40]	; 0x28
   13cb0:	cmn	r3, #1
   13cb4:	bne	13cc4 <__assert_fail@plt+0x2d98>
   13cb8:	ldr	r0, [sp, #48]	; 0x30
   13cbc:	bl	10e30 <strlen@plt>
   13cc0:	str	r0, [sp, #40]	; 0x28
   13cc4:	ldr	r5, [sp, #36]	; 0x24
   13cc8:	mov	r3, #0
   13ccc:	str	r3, [sp, #56]	; 0x38
   13cd0:	ldr	r3, [sp, #28]
   13cd4:	add	r0, sp, #92	; 0x5c
   13cd8:	ldr	r1, [sp, #40]	; 0x28
   13cdc:	ldr	r2, [sp, #56]	; 0x38
   13ce0:	add	r2, r3, r2
   13ce4:	ldr	r3, [sp, #48]	; 0x30
   13ce8:	add	fp, r3, r2
   13cec:	sub	r2, r1, r2
   13cf0:	add	r3, sp, #96	; 0x60
   13cf4:	mov	r1, fp
   13cf8:	bl	156dc <__assert_fail@plt+0x47b0>
   13cfc:	subs	r2, r0, #0
   13d00:	beq	13d40 <__assert_fail@plt+0x2e14>
   13d04:	cmn	r2, #1
   13d08:	beq	13f14 <__assert_fail@plt+0x2fe8>
   13d0c:	cmn	r2, #2
   13d10:	bne	13e84 <__assert_fail@plt+0x2f58>
   13d14:	ldr	r3, [sp, #28]
   13d18:	ldr	r2, [sp, #56]	; 0x38
   13d1c:	add	r3, r3, r2
   13d20:	ldr	r2, [sp, #40]	; 0x28
   13d24:	cmp	r2, r3
   13d28:	bls	13f14 <__assert_fail@plt+0x2fe8>
   13d2c:	ldr	r2, [sp, #56]	; 0x38
   13d30:	ldr	r3, [sp, #80]	; 0x50
   13d34:	ldrb	r5, [r3, r2]
   13d38:	cmp	r5, #0
   13d3c:	bne	13e74 <__assert_fail@plt+0x2f48>
   13d40:	ldr	r3, [sp, #56]	; 0x38
   13d44:	cmp	r3, #1
   13d48:	bls	1376c <__assert_fail@plt+0x2840>
   13d4c:	ldr	r3, [sp, #28]
   13d50:	mov	fp, #0
   13d54:	mov	ip, #92	; 0x5c
   13d58:	ldr	r2, [sp, #56]	; 0x38
   13d5c:	add	r3, r3, r2
   13d60:	ldr	r2, [sp, #24]
   13d64:	str	r3, [sp, #36]	; 0x24
   13d68:	eor	r3, r5, #1
   13d6c:	and	r3, r3, r2
   13d70:	mov	r2, #39	; 0x27
   13d74:	uxtb	r3, r3
   13d78:	cmp	r3, #0
   13d7c:	beq	13f1c <__assert_fail@plt+0x2ff0>
   13d80:	sub	r0, sl, #2
   13d84:	cmp	r7, #0
   13d88:	clz	r0, r0
   13d8c:	lsr	r0, r0, #5
   13d90:	bne	13690 <__assert_fail@plt+0x2764>
   13d94:	ldr	r1, [sp, #52]	; 0x34
   13d98:	eor	r1, r1, #1
   13d9c:	ands	r1, r0, r1
   13da0:	beq	13dd0 <__assert_fail@plt+0x2ea4>
   13da4:	cmp	r9, r4
   13da8:	add	r0, r4, #1
   13dac:	str	r1, [sp, #52]	; 0x34
   13db0:	strbhi	r2, [r8, r4]
   13db4:	cmp	r9, r0
   13db8:	movhi	lr, #36	; 0x24
   13dbc:	strbhi	lr, [r8, r0]
   13dc0:	add	r0, r4, #2
   13dc4:	add	r4, r4, #3
   13dc8:	cmp	r9, r0
   13dcc:	strbhi	r2, [r8, r0]
   13dd0:	cmp	r9, r4
   13dd4:	add	r0, r4, #1
   13dd8:	mov	fp, r3
   13ddc:	strbhi	ip, [r8, r4]
   13de0:	cmp	r9, r0
   13de4:	lsrhi	r1, r6, #6
   13de8:	addhi	r1, r1, #48	; 0x30
   13dec:	strbhi	r1, [r8, r0]
   13df0:	add	r0, r4, #2
   13df4:	add	r4, r4, #3
   13df8:	cmp	r9, r0
   13dfc:	ubfxhi	r1, r6, #3, #3
   13e00:	and	r6, r6, #7
   13e04:	add	r6, r6, #48	; 0x30
   13e08:	addhi	r1, r1, #48	; 0x30
   13e0c:	strbhi	r1, [r8, r0]
   13e10:	eor	r0, fp, #1
   13e14:	ldr	r1, [sp, #28]
   13e18:	ldr	lr, [sp, #52]	; 0x34
   13e1c:	add	r1, r1, #1
   13e20:	and	r0, r0, lr
   13e24:	ldr	lr, [sp, #36]	; 0x24
   13e28:	cmp	r1, lr
   13e2c:	bcs	13ba8 <__assert_fail@plt+0x2c7c>
   13e30:	cmp	r0, #0
   13e34:	beq	13e58 <__assert_fail@plt+0x2f2c>
   13e38:	cmp	r9, r4
   13e3c:	add	r0, r4, #1
   13e40:	strbhi	r2, [r8, r4]
   13e44:	cmp	r9, r0
   13e48:	add	r4, r4, #2
   13e4c:	strbhi	r2, [r8, r0]
   13e50:	mov	r0, #0
   13e54:	str	r0, [sp, #52]	; 0x34
   13e58:	ldr	r0, [sp, #48]	; 0x30
   13e5c:	cmp	r9, r4
   13e60:	str	r1, [sp, #28]
   13e64:	strbhi	r6, [r8, r4]
   13e68:	add	r4, r4, #1
   13e6c:	ldrb	r6, [r0, r1]
   13e70:	b	13d78 <__assert_fail@plt+0x2e4c>
   13e74:	ldr	r3, [sp, #56]	; 0x38
   13e78:	add	r3, r3, #1
   13e7c:	str	r3, [sp, #56]	; 0x38
   13e80:	b	13d14 <__assert_fail@plt+0x2de8>
   13e84:	cmp	sl, #2
   13e88:	movne	r3, #0
   13e8c:	andeq	r3, r7, #1
   13e90:	cmp	r3, #0
   13e94:	movne	r1, #1
   13e98:	bne	13ef4 <__assert_fail@plt+0x2fc8>
   13e9c:	ldr	r0, [sp, #92]	; 0x5c
   13ea0:	str	r2, [sp, #84]	; 0x54
   13ea4:	bl	10d88 <iswprint@plt>
   13ea8:	ldr	r3, [sp, #56]	; 0x38
   13eac:	cmp	r0, #0
   13eb0:	add	r0, sp, #96	; 0x60
   13eb4:	moveq	r5, #0
   13eb8:	ldr	r2, [sp, #84]	; 0x54
   13ebc:	add	r3, r3, r2
   13ec0:	str	r3, [sp, #56]	; 0x38
   13ec4:	bl	10d28 <mbsinit@plt>
   13ec8:	cmp	r0, #0
   13ecc:	beq	13cd0 <__assert_fail@plt+0x2da4>
   13ed0:	b	13d40 <__assert_fail@plt+0x2e14>
   13ed4:	ldrb	r3, [fp, #1]!
   13ed8:	cmp	r3, #94	; 0x5e
   13edc:	beq	137bc <__assert_fail@plt+0x2890>
   13ee0:	bhi	13f00 <__assert_fail@plt+0x2fd4>
   13ee4:	sub	r3, r3, #91	; 0x5b
   13ee8:	cmp	r3, #1
   13eec:	bls	137bc <__assert_fail@plt+0x2890>
   13ef0:	add	r1, r1, #1
   13ef4:	cmp	r1, r2
   13ef8:	bne	13ed4 <__assert_fail@plt+0x2fa8>
   13efc:	b	13e9c <__assert_fail@plt+0x2f70>
   13f00:	cmp	r3, #96	; 0x60
   13f04:	beq	137bc <__assert_fail@plt+0x2890>
   13f08:	cmp	r3, #124	; 0x7c
   13f0c:	bne	13ef0 <__assert_fail@plt+0x2fc4>
   13f10:	b	137bc <__assert_fail@plt+0x2890>
   13f14:	mov	r5, #0
   13f18:	b	13d40 <__assert_fail@plt+0x2e14>
   13f1c:	ldr	r1, [sp, #64]	; 0x40
   13f20:	cmp	r1, #0
   13f24:	beq	13e10 <__assert_fail@plt+0x2ee4>
   13f28:	cmp	r9, r4
   13f2c:	mov	r1, #0
   13f30:	strbhi	ip, [r8, r4]
   13f34:	add	r4, r4, #1
   13f38:	str	r1, [sp, #64]	; 0x40
   13f3c:	b	13e10 <__assert_fail@plt+0x2ee4>
   13f40:	mov	r5, fp
   13f44:	ldr	fp, [sp, #24]
   13f48:	mov	r6, #48	; 0x30
   13f4c:	b	1395c <__assert_fail@plt+0x2a30>
   13f50:	mov	r5, #0
   13f54:	b	1395c <__assert_fail@plt+0x2a30>
   13f58:	mov	r6, r1
   13f5c:	b	13b88 <__assert_fail@plt+0x2c5c>
   13f60:	mov	r6, r1
   13f64:	b	13b78 <__assert_fail@plt+0x2c4c>
   13f68:	ldr	r2, [sp, #28]
   13f6c:	ldr	r3, [sp, #40]	; 0x28
   13f70:	subs	r3, r3, r2
   13f74:	movne	r3, #1
   13f78:	b	133e0 <__assert_fail@plt+0x24b4>
   13f7c:	ldr	r3, [sp, #60]	; 0x3c
   13f80:	mov	sl, #2
   13f84:	ldr	r7, [sp, #72]	; 0x48
   13f88:	adds	r6, r3, #0
   13f8c:	mov	r5, r3
   13f90:	movne	r6, #1
   13f94:	cmp	r9, #0
   13f98:	movne	r6, #0
   13f9c:	cmp	r6, #0
   13fa0:	bne	13370 <__assert_fail@plt+0x2444>
   13fa4:	ldr	r3, [sp, #68]	; 0x44
   13fa8:	ldr	r2, [sp, #44]	; 0x2c
   13fac:	cmp	r2, #0
   13fb0:	moveq	r3, #0
   13fb4:	andne	r3, r3, #1
   13fb8:	cmp	r3, #0
   13fbc:	movne	r3, r2
   13fc0:	subne	r3, r3, #1
   13fc4:	bne	13ff4 <__assert_fail@plt+0x30c8>
   13fc8:	cmp	r9, r4
   13fcc:	movhi	r3, #0
   13fd0:	strbhi	r3, [r8, r4]
   13fd4:	mov	r0, r4
   13fd8:	add	sp, sp, #108	; 0x6c
   13fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe0:	mov	r3, r7
   13fe4:	b	13fa8 <__assert_fail@plt+0x307c>
   13fe8:	cmp	r9, r4
   13fec:	strbhi	r2, [r8, r4]
   13ff0:	add	r4, r4, #1
   13ff4:	ldrb	r2, [r3, #1]!
   13ff8:	cmp	r2, #0
   13ffc:	bne	13fe8 <__assert_fail@plt+0x30bc>
   14000:	b	13fc8 <__assert_fail@plt+0x309c>
   14004:	andeq	r6, r1, r4, ror #24
   14008:	andeq	r6, r1, r5, ror ip
   1400c:			; <UNDEFINED> instruction: 0x00015bb0
   14010:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14018:	sub	sp, sp, #52	; 0x34
   1401c:	mov	r6, r0
   14020:	mov	r5, r3
   14024:	mov	r8, r1
   14028:	mov	r9, r2
   1402c:	bl	10e48 <__errno_location@plt>
   14030:	ldr	r3, [r0]
   14034:	cmn	r6, #-2147483647	; 0x80000001
   14038:	str	r0, [sp, #24]
   1403c:	ldr	r7, [pc, #368]	; 141b4 <__assert_fail@plt+0x3288>
   14040:	str	r3, [sp, #32]
   14044:	movne	r3, #0
   14048:	moveq	r3, #1
   1404c:	orrs	r3, r3, r6, lsr #31
   14050:	ldr	r4, [r7]
   14054:	beq	1405c <__assert_fail@plt+0x3130>
   14058:	bl	10f14 <abort@plt>
   1405c:	ldr	r2, [r7, #4]
   14060:	cmp	r2, r6
   14064:	bgt	140d4 <__assert_fail@plt+0x31a8>
   14068:	add	sl, r7, #8
   1406c:	mov	r3, #8
   14070:	cmp	r4, sl
   14074:	add	r1, sp, #44	; 0x2c
   14078:	str	r2, [sp, #44]	; 0x2c
   1407c:	sub	r2, r6, r2
   14080:	movne	r0, r4
   14084:	moveq	r0, #0
   14088:	add	r2, r2, #1
   1408c:	str	r3, [sp]
   14090:	mvn	r3, #-2147483648	; 0x80000000
   14094:	bl	14dd4 <__assert_fail@plt+0x3ea8>
   14098:	cmp	r4, sl
   1409c:	mov	fp, r0
   140a0:	str	r0, [r7]
   140a4:	ldmeq	r4, {r0, r1}
   140a8:	mov	r4, fp
   140ac:	ldr	r2, [sp, #44]	; 0x2c
   140b0:	stmeq	fp, {r0, r1}
   140b4:	mov	r1, #0
   140b8:	ldr	r0, [r7, #4]
   140bc:	sub	r2, r2, r0
   140c0:	add	r0, fp, r0, lsl #3
   140c4:	lsl	r2, r2, #3
   140c8:	bl	10e6c <memset@plt>
   140cc:	ldr	r3, [sp, #44]	; 0x2c
   140d0:	str	r3, [r7, #4]
   140d4:	ldr	r3, [r5, #4]
   140d8:	add	sl, r4, r6, lsl #3
   140dc:	mov	r2, r8
   140e0:	ldr	fp, [r4, r6, lsl #3]
   140e4:	ldr	r7, [sl, #4]
   140e8:	orr	r3, r3, #1
   140ec:	str	r3, [sp, #28]
   140f0:	add	r3, r5, #8
   140f4:	mov	r1, fp
   140f8:	str	r3, [sp, #36]	; 0x24
   140fc:	mov	r0, r7
   14100:	ldr	r3, [r5, #44]	; 0x2c
   14104:	str	r3, [sp, #16]
   14108:	ldr	r3, [r5, #40]	; 0x28
   1410c:	str	r3, [sp, #12]
   14110:	add	r3, r5, #8
   14114:	str	r3, [sp, #8]
   14118:	ldr	r3, [sp, #28]
   1411c:	str	r3, [sp, #4]
   14120:	ldr	r3, [r5]
   14124:	str	r3, [sp]
   14128:	mov	r3, r9
   1412c:	bl	13324 <__assert_fail@plt+0x23f8>
   14130:	cmp	fp, r0
   14134:	bhi	1419c <__assert_fail@plt+0x3270>
   14138:	ldr	r3, [pc, #120]	; 141b8 <__assert_fail@plt+0x328c>
   1413c:	add	fp, r0, #1
   14140:	str	fp, [r4, r6, lsl #3]
   14144:	cmp	r7, r3
   14148:	beq	14154 <__assert_fail@plt+0x3228>
   1414c:	mov	r0, r7
   14150:	bl	130cc <__assert_fail@plt+0x21a0>
   14154:	mov	r0, fp
   14158:	bl	14cc4 <__assert_fail@plt+0x3d98>
   1415c:	ldr	r3, [r5, #44]	; 0x2c
   14160:	mov	r2, r8
   14164:	mov	r1, fp
   14168:	str	r0, [sl, #4]
   1416c:	mov	r7, r0
   14170:	str	r3, [sp, #16]
   14174:	ldr	r3, [r5, #40]	; 0x28
   14178:	str	r3, [sp, #12]
   1417c:	add	r3, r5, #8
   14180:	str	r3, [sp, #8]
   14184:	ldr	r3, [sp, #28]
   14188:	str	r3, [sp, #4]
   1418c:	ldr	r3, [r5]
   14190:	str	r3, [sp]
   14194:	mov	r3, r9
   14198:	bl	13324 <__assert_fail@plt+0x23f8>
   1419c:	ldr	r3, [sp, #24]
   141a0:	mov	r0, r7
   141a4:	ldr	r2, [sp, #32]
   141a8:	str	r2, [r3]
   141ac:	add	sp, sp, #52	; 0x34
   141b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141b4:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   141b8:	andeq	sl, r2, ip, ror #8
   141bc:	push	{r4, r5, r6, lr}
   141c0:	mov	r5, r0
   141c4:	bl	10e48 <__errno_location@plt>
   141c8:	mov	r4, r0
   141cc:	cmp	r5, #0
   141d0:	ldr	r0, [pc, #20]	; 141ec <__assert_fail@plt+0x32c0>
   141d4:	mov	r1, #48	; 0x30
   141d8:	movne	r0, r5
   141dc:	ldr	r6, [r4]
   141e0:	bl	14ec4 <__assert_fail@plt+0x3f98>
   141e4:	str	r6, [r4]
   141e8:	pop	{r4, r5, r6, pc}
   141ec:	andeq	sl, r2, ip, ror #10
   141f0:	ldr	r3, [pc, #12]	; 14204 <__assert_fail@plt+0x32d8>
   141f4:	cmp	r0, #0
   141f8:	moveq	r0, r3
   141fc:	ldr	r0, [r0]
   14200:	bx	lr
   14204:	andeq	sl, r2, ip, ror #10
   14208:	ldr	r3, [pc, #12]	; 1421c <__assert_fail@plt+0x32f0>
   1420c:	cmp	r0, #0
   14210:	moveq	r0, r3
   14214:	str	r1, [r0]
   14218:	bx	lr
   1421c:	andeq	sl, r2, ip, ror #10
   14220:	ldr	r3, [pc, #52]	; 1425c <__assert_fail@plt+0x3330>
   14224:	cmp	r0, #0
   14228:	push	{lr}		; (str lr, [sp, #-4]!)
   1422c:	lsr	lr, r1, #5
   14230:	and	r1, r1, #31
   14234:	moveq	r0, r3
   14238:	add	r3, r0, #8
   1423c:	ldr	ip, [r3, lr, lsl #2]
   14240:	lsr	r0, ip, r1
   14244:	eor	r2, r2, r0
   14248:	and	r0, r0, #1
   1424c:	and	r2, r2, #1
   14250:	eor	r1, ip, r2, lsl r1
   14254:	str	r1, [r3, lr, lsl #2]
   14258:	pop	{pc}		; (ldr pc, [sp], #4)
   1425c:	andeq	sl, r2, ip, ror #10
   14260:	ldr	r3, [pc, #16]	; 14278 <__assert_fail@plt+0x334c>
   14264:	cmp	r0, #0
   14268:	movne	r3, r0
   1426c:	ldr	r0, [r3, #4]
   14270:	str	r1, [r3, #4]
   14274:	bx	lr
   14278:	andeq	sl, r2, ip, ror #10
   1427c:	ldr	r3, [pc, #44]	; 142b0 <__assert_fail@plt+0x3384>
   14280:	cmp	r0, #0
   14284:	moveq	r0, r3
   14288:	mov	r3, #10
   1428c:	cmp	r2, #0
   14290:	cmpne	r1, #0
   14294:	str	r3, [r0]
   14298:	bne	142a4 <__assert_fail@plt+0x3378>
   1429c:	push	{r4, lr}
   142a0:	bl	10f14 <abort@plt>
   142a4:	str	r1, [r0, #40]	; 0x28
   142a8:	str	r2, [r0, #44]	; 0x2c
   142ac:	bx	lr
   142b0:	andeq	sl, r2, ip, ror #10
   142b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   142b8:	sub	sp, sp, #24
   142bc:	mov	sl, r3
   142c0:	mov	r7, r0
   142c4:	mov	r8, r1
   142c8:	mov	r9, r2
   142cc:	ldr	r4, [sp, #56]	; 0x38
   142d0:	ldr	r3, [pc, #88]	; 14330 <__assert_fail@plt+0x3404>
   142d4:	cmp	r4, #0
   142d8:	moveq	r4, r3
   142dc:	bl	10e48 <__errno_location@plt>
   142e0:	ldr	r3, [r4, #44]	; 0x2c
   142e4:	mov	r5, r0
   142e8:	mov	r2, r9
   142ec:	mov	r1, r8
   142f0:	mov	r0, r7
   142f4:	ldr	r6, [r5]
   142f8:	str	r3, [sp, #16]
   142fc:	ldr	r3, [r4, #40]	; 0x28
   14300:	str	r3, [sp, #12]
   14304:	add	r3, r4, #8
   14308:	str	r3, [sp, #8]
   1430c:	ldr	r3, [r4, #4]
   14310:	str	r3, [sp, #4]
   14314:	ldr	r3, [r4]
   14318:	str	r3, [sp]
   1431c:	mov	r3, sl
   14320:	bl	13324 <__assert_fail@plt+0x23f8>
   14324:	str	r6, [r5]
   14328:	add	sp, sp, #24
   1432c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14330:	andeq	sl, r2, ip, ror #10
   14334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14338:	cmp	r3, #0
   1433c:	sub	sp, sp, #44	; 0x2c
   14340:	mov	r6, r2
   14344:	mov	sl, r1
   14348:	mov	r9, r0
   1434c:	ldr	r4, [pc, #176]	; 14404 <__assert_fail@plt+0x34d8>
   14350:	movne	r4, r3
   14354:	bl	10e48 <__errno_location@plt>
   14358:	ldr	r3, [r0]
   1435c:	mov	r1, #0
   14360:	mov	r2, r9
   14364:	mov	r8, r0
   14368:	mov	r0, r1
   1436c:	ldr	r5, [r4, #4]
   14370:	add	fp, r4, #8
   14374:	str	r3, [sp, #28]
   14378:	ldr	r3, [r4, #44]	; 0x2c
   1437c:	cmp	r6, #0
   14380:	orreq	r5, r5, #1
   14384:	str	r3, [sp, #16]
   14388:	ldr	r3, [r4, #40]	; 0x28
   1438c:	stmib	sp, {r5, fp}
   14390:	str	r3, [sp, #12]
   14394:	ldr	r3, [r4]
   14398:	str	r3, [sp]
   1439c:	mov	r3, sl
   143a0:	bl	13324 <__assert_fail@plt+0x23f8>
   143a4:	add	r1, r0, #1
   143a8:	mov	r7, r0
   143ac:	mov	r0, r1
   143b0:	str	r1, [sp, #36]	; 0x24
   143b4:	bl	14cc4 <__assert_fail@plt+0x3d98>
   143b8:	ldr	r3, [r4, #44]	; 0x2c
   143bc:	mov	r2, r9
   143c0:	ldr	r1, [sp, #36]	; 0x24
   143c4:	str	r3, [sp, #16]
   143c8:	ldr	r3, [r4, #40]	; 0x28
   143cc:	stmib	sp, {r5, fp}
   143d0:	str	r0, [sp, #32]
   143d4:	str	r3, [sp, #12]
   143d8:	ldr	r3, [r4]
   143dc:	str	r3, [sp]
   143e0:	mov	r3, sl
   143e4:	bl	13324 <__assert_fail@plt+0x23f8>
   143e8:	ldr	r3, [sp, #28]
   143ec:	cmp	r6, #0
   143f0:	ldr	r0, [sp, #32]
   143f4:	str	r3, [r8]
   143f8:	strne	r7, [r6]
   143fc:	add	sp, sp, #44	; 0x2c
   14400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14404:	andeq	sl, r2, ip, ror #10
   14408:	mov	r3, r2
   1440c:	mov	r2, #0
   14410:	b	14334 <__assert_fail@plt+0x3408>
   14414:	push	{r4, r5, r6, r7, r8, lr}
   14418:	mov	r6, #1
   1441c:	ldr	r4, [pc, #100]	; 14488 <__assert_fail@plt+0x355c>
   14420:	ldr	r5, [r4]
   14424:	add	r7, r5, #4
   14428:	ldr	r3, [r4, #4]
   1442c:	cmp	r3, r6
   14430:	bgt	14478 <__assert_fail@plt+0x354c>
   14434:	ldr	r6, [pc, #80]	; 1448c <__assert_fail@plt+0x3560>
   14438:	ldr	r0, [r5, #4]
   1443c:	cmp	r0, r6
   14440:	beq	14454 <__assert_fail@plt+0x3528>
   14444:	bl	130cc <__assert_fail@plt+0x21a0>
   14448:	mov	r3, #256	; 0x100
   1444c:	str	r3, [r4, #8]
   14450:	str	r6, [r4, #12]
   14454:	ldr	r6, [pc, #52]	; 14490 <__assert_fail@plt+0x3564>
   14458:	cmp	r5, r6
   1445c:	beq	1446c <__assert_fail@plt+0x3540>
   14460:	mov	r0, r5
   14464:	bl	130cc <__assert_fail@plt+0x21a0>
   14468:	str	r6, [r4]
   1446c:	mov	r3, #1
   14470:	str	r3, [r4, #4]
   14474:	pop	{r4, r5, r6, r7, r8, pc}
   14478:	ldr	r0, [r7, r6, lsl #3]
   1447c:	add	r6, r6, #1
   14480:	bl	130cc <__assert_fail@plt+0x21a0>
   14484:	b	14428 <__assert_fail@plt+0x34fc>
   14488:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1448c:	andeq	sl, r2, ip, ror #8
   14490:	andeq	r8, r2, r0, lsl #2
   14494:	ldr	r3, [pc, #4]	; 144a0 <__assert_fail@plt+0x3574>
   14498:	mvn	r2, #0
   1449c:	b	14014 <__assert_fail@plt+0x30e8>
   144a0:	andeq	sl, r2, ip, ror #10
   144a4:	ldr	r3, [pc]	; 144ac <__assert_fail@plt+0x3580>
   144a8:	b	14014 <__assert_fail@plt+0x30e8>
   144ac:	andeq	sl, r2, ip, ror #10
   144b0:	mov	r1, r0
   144b4:	mov	r0, #0
   144b8:	b	14494 <__assert_fail@plt+0x3568>
   144bc:	mov	r2, r1
   144c0:	mov	r1, r0
   144c4:	mov	r0, #0
   144c8:	b	144a4 <__assert_fail@plt+0x3578>
   144cc:	push	{r4, r5, lr}
   144d0:	sub	sp, sp, #52	; 0x34
   144d4:	mov	r5, r2
   144d8:	mov	r4, r0
   144dc:	mov	r0, sp
   144e0:	bl	131c8 <__assert_fail@plt+0x229c>
   144e4:	mov	r3, sp
   144e8:	mvn	r2, #0
   144ec:	mov	r1, r5
   144f0:	mov	r0, r4
   144f4:	bl	14014 <__assert_fail@plt+0x30e8>
   144f8:	add	sp, sp, #52	; 0x34
   144fc:	pop	{r4, r5, pc}
   14500:	push	{r4, r5, r6, lr}
   14504:	sub	sp, sp, #48	; 0x30
   14508:	mov	r5, r2
   1450c:	mov	r6, r3
   14510:	mov	r4, r0
   14514:	mov	r0, sp
   14518:	bl	131c8 <__assert_fail@plt+0x229c>
   1451c:	mov	r3, sp
   14520:	mov	r2, r6
   14524:	mov	r1, r5
   14528:	mov	r0, r4
   1452c:	bl	14014 <__assert_fail@plt+0x30e8>
   14530:	add	sp, sp, #48	; 0x30
   14534:	pop	{r4, r5, r6, pc}
   14538:	mov	r2, r1
   1453c:	mov	r1, r0
   14540:	mov	r0, #0
   14544:	b	144cc <__assert_fail@plt+0x35a0>
   14548:	mov	r3, r2
   1454c:	mov	r2, r1
   14550:	mov	r1, r0
   14554:	mov	r0, #0
   14558:	b	14500 <__assert_fail@plt+0x35d4>
   1455c:	push	{r4, r5, r6, lr}
   14560:	mov	r4, r0
   14564:	mov	r5, r1
   14568:	mov	r6, r2
   1456c:	sub	sp, sp, #48	; 0x30
   14570:	mov	ip, sp
   14574:	ldr	lr, [pc, #64]	; 145bc <__assert_fail@plt+0x3690>
   14578:	ldm	lr!, {r0, r1, r2, r3}
   1457c:	stmia	ip!, {r0, r1, r2, r3}
   14580:	ldm	lr!, {r0, r1, r2, r3}
   14584:	stmia	ip!, {r0, r1, r2, r3}
   14588:	ldm	lr, {r0, r1, r2, r3}
   1458c:	stm	ip, {r0, r1, r2, r3}
   14590:	mov	r1, r6
   14594:	mov	r2, #1
   14598:	mov	r0, sp
   1459c:	bl	14220 <__assert_fail@plt+0x32f4>
   145a0:	mov	r3, sp
   145a4:	mov	r2, r5
   145a8:	mov	r1, r4
   145ac:	mov	r0, #0
   145b0:	bl	14014 <__assert_fail@plt+0x30e8>
   145b4:	add	sp, sp, #48	; 0x30
   145b8:	pop	{r4, r5, r6, pc}
   145bc:	andeq	sl, r2, ip, ror #10
   145c0:	mov	r2, r1
   145c4:	mvn	r1, #0
   145c8:	b	1455c <__assert_fail@plt+0x3630>
   145cc:	mov	r1, #58	; 0x3a
   145d0:	b	145c0 <__assert_fail@plt+0x3694>
   145d4:	mov	r2, #58	; 0x3a
   145d8:	b	1455c <__assert_fail@plt+0x3630>
   145dc:	push	{r4, r5, lr}
   145e0:	sub	sp, sp, #100	; 0x64
   145e4:	mov	r4, r0
   145e8:	mov	r0, sp
   145ec:	mov	r5, r2
   145f0:	bl	131c8 <__assert_fail@plt+0x229c>
   145f4:	mov	ip, sp
   145f8:	add	lr, sp, #48	; 0x30
   145fc:	ldm	ip!, {r0, r1, r2, r3}
   14600:	stmia	lr!, {r0, r1, r2, r3}
   14604:	ldm	ip!, {r0, r1, r2, r3}
   14608:	stmia	lr!, {r0, r1, r2, r3}
   1460c:	ldm	ip, {r0, r1, r2, r3}
   14610:	stm	lr, {r0, r1, r2, r3}
   14614:	mov	r2, #1
   14618:	mov	r1, #58	; 0x3a
   1461c:	add	r0, sp, #48	; 0x30
   14620:	bl	14220 <__assert_fail@plt+0x32f4>
   14624:	add	r3, sp, #48	; 0x30
   14628:	mvn	r2, #0
   1462c:	mov	r1, r5
   14630:	mov	r0, r4
   14634:	bl	14014 <__assert_fail@plt+0x30e8>
   14638:	add	sp, sp, #100	; 0x64
   1463c:	pop	{r4, r5, pc}
   14640:	push	{r4, r5, r6, r7, lr}
   14644:	mov	r4, r0
   14648:	mov	r6, r1
   1464c:	mov	r7, r2
   14650:	mov	r5, r3
   14654:	sub	sp, sp, #52	; 0x34
   14658:	ldr	lr, [pc, #68]	; 146a4 <__assert_fail@plt+0x3778>
   1465c:	mov	ip, sp
   14660:	ldm	lr!, {r0, r1, r2, r3}
   14664:	stmia	ip!, {r0, r1, r2, r3}
   14668:	ldm	lr!, {r0, r1, r2, r3}
   1466c:	stmia	ip!, {r0, r1, r2, r3}
   14670:	ldm	lr, {r0, r1, r2, r3}
   14674:	stm	ip, {r0, r1, r2, r3}
   14678:	mov	r2, r7
   1467c:	mov	r1, r6
   14680:	mov	r0, sp
   14684:	bl	1427c <__assert_fail@plt+0x3350>
   14688:	ldr	r2, [sp, #72]	; 0x48
   1468c:	mov	r3, sp
   14690:	mov	r1, r5
   14694:	mov	r0, r4
   14698:	bl	14014 <__assert_fail@plt+0x30e8>
   1469c:	add	sp, sp, #52	; 0x34
   146a0:	pop	{r4, r5, r6, r7, pc}
   146a4:	andeq	sl, r2, ip, ror #10
   146a8:	mvn	ip, #0
   146ac:	push	{r0, r1, r2, lr}
   146b0:	str	ip, [sp]
   146b4:	bl	14640 <__assert_fail@plt+0x3714>
   146b8:	add	sp, sp, #12
   146bc:	pop	{pc}		; (ldr pc, [sp], #4)
   146c0:	mov	r3, r2
   146c4:	mov	r2, r1
   146c8:	mov	r1, r0
   146cc:	mov	r0, #0
   146d0:	b	146a8 <__assert_fail@plt+0x377c>
   146d4:	push	{r0, r1, r2, lr}
   146d8:	str	r3, [sp]
   146dc:	mov	r3, r2
   146e0:	mov	r2, r1
   146e4:	mov	r1, r0
   146e8:	mov	r0, #0
   146ec:	bl	14640 <__assert_fail@plt+0x3714>
   146f0:	add	sp, sp, #12
   146f4:	pop	{pc}		; (ldr pc, [sp], #4)
   146f8:	ldr	r3, [pc]	; 14700 <__assert_fail@plt+0x37d4>
   146fc:	b	14014 <__assert_fail@plt+0x30e8>
   14700:	andeq	r8, r2, r8, lsl #2
   14704:	mov	r2, r1
   14708:	mov	r1, r0
   1470c:	mov	r0, #0
   14710:	b	146f8 <__assert_fail@plt+0x37cc>
   14714:	mvn	r2, #0
   14718:	b	146f8 <__assert_fail@plt+0x37cc>
   1471c:	mov	r1, r0
   14720:	mov	r0, #0
   14724:	b	14714 <__assert_fail@plt+0x37e8>
   14728:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1472c:	mov	r7, r0
   14730:	mov	r8, r1
   14734:	mov	r9, r2
   14738:	ldr	r5, [pc, #80]	; 14790 <__assert_fail@plt+0x3864>
   1473c:	mov	r2, r9
   14740:	mov	r1, r8
   14744:	mov	r0, r7
   14748:	bl	10ce0 <read@plt>
   1474c:	subs	r6, r0, #0
   14750:	bge	14780 <__assert_fail@plt+0x3854>
   14754:	bl	10e48 <__errno_location@plt>
   14758:	ldr	r3, [r0]
   1475c:	cmp	r3, #4
   14760:	beq	1473c <__assert_fail@plt+0x3810>
   14764:	cmp	r9, r5
   14768:	movls	r4, #0
   1476c:	movhi	r4, #1
   14770:	cmp	r3, #22
   14774:	movne	r4, #0
   14778:	cmp	r4, #0
   1477c:	bne	14788 <__assert_fail@plt+0x385c>
   14780:	mov	r0, r6
   14784:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14788:	mov	r9, r5
   1478c:	b	1473c <__assert_fail@plt+0x3810>
   14790:	svcvc	0x00f00000	; IMB
   14794:	push	{r4, r5, r6, lr}
   14798:	cmp	r1, #0
   1479c:	sub	sp, sp, #32
   147a0:	mov	r5, r0
   147a4:	ldr	r4, [sp, #48]	; 0x30
   147a8:	ldr	r6, [sp, #52]	; 0x34
   147ac:	beq	14860 <__assert_fail@plt+0x3934>
   147b0:	strd	r2, [sp]
   147b4:	mov	r3, r1
   147b8:	mov	r1, #1
   147bc:	ldr	r2, [pc, #856]	; 14b1c <__assert_fail@plt+0x3bf0>
   147c0:	bl	10e9c <__fprintf_chk@plt>
   147c4:	mov	r2, #5
   147c8:	ldr	r1, [pc, #848]	; 14b20 <__assert_fail@plt+0x3bf4>
   147cc:	mov	r0, #0
   147d0:	bl	10d64 <dcgettext@plt>
   147d4:	movw	r3, #2022	; 0x7e6
   147d8:	ldr	r2, [pc, #836]	; 14b24 <__assert_fail@plt+0x3bf8>
   147dc:	mov	r1, #1
   147e0:	str	r3, [sp]
   147e4:	mov	r3, r0
   147e8:	mov	r0, r5
   147ec:	bl	10e9c <__fprintf_chk@plt>
   147f0:	mov	r1, r5
   147f4:	mov	r0, #10
   147f8:	bl	10d58 <fputc_unlocked@plt>
   147fc:	mov	r2, #5
   14800:	ldr	r1, [pc, #800]	; 14b28 <__assert_fail@plt+0x3bfc>
   14804:	mov	r0, #0
   14808:	bl	10d64 <dcgettext@plt>
   1480c:	mov	r2, r0
   14810:	mov	r1, #1
   14814:	ldr	r3, [pc, #784]	; 14b2c <__assert_fail@plt+0x3c00>
   14818:	mov	r0, r5
   1481c:	bl	10e9c <__fprintf_chk@plt>
   14820:	mov	r1, r5
   14824:	mov	r0, #10
   14828:	bl	10d58 <fputc_unlocked@plt>
   1482c:	cmp	r6, #9
   14830:	ldrls	pc, [pc, r6, lsl #2]
   14834:	b	14b10 <__assert_fail@plt+0x3be4>
   14838:	andeq	r4, r1, r0, asr r9
   1483c:	andeq	r4, r1, r8, ror r8
   14840:	andeq	r4, r1, r4, lsr #17
   14844:	ldrdeq	r4, [r1], -r8
   14848:	andeq	r4, r1, r4, lsl r9
   1484c:	andeq	r4, r1, r8, asr r9
   14850:	andeq	r4, r1, r0, lsr #19
   14854:	strdeq	r4, [r1], -r0
   14858:	andeq	r4, r1, r8, asr #20
   1485c:	andeq	r4, r1, r8, lsr #21
   14860:	mov	r1, #1
   14864:	str	r3, [sp]
   14868:	mov	r3, r2
   1486c:	ldr	r2, [pc, #700]	; 14b30 <__assert_fail@plt+0x3c04>
   14870:	bl	10e9c <__fprintf_chk@plt>
   14874:	b	147c4 <__assert_fail@plt+0x3898>
   14878:	mov	r2, #5
   1487c:	ldr	r1, [pc, #688]	; 14b34 <__assert_fail@plt+0x3c08>
   14880:	mov	r0, #0
   14884:	bl	10d64 <dcgettext@plt>
   14888:	ldr	r3, [r4]
   1488c:	mov	r2, r0
   14890:	mov	r1, #1
   14894:	mov	r0, r5
   14898:	add	sp, sp, #32
   1489c:	pop	{r4, r5, r6, lr}
   148a0:	b	10e9c <__fprintf_chk@plt>
   148a4:	mov	r2, #5
   148a8:	ldr	r1, [pc, #648]	; 14b38 <__assert_fail@plt+0x3c0c>
   148ac:	mov	r0, #0
   148b0:	bl	10d64 <dcgettext@plt>
   148b4:	ldr	r3, [r4, #4]
   148b8:	mov	r2, r0
   148bc:	mov	r1, #1
   148c0:	mov	r0, r5
   148c4:	str	r3, [sp, #48]	; 0x30
   148c8:	ldr	r3, [r4]
   148cc:	add	sp, sp, #32
   148d0:	pop	{r4, r5, r6, lr}
   148d4:	b	10e9c <__fprintf_chk@plt>
   148d8:	mov	r2, #5
   148dc:	ldr	r1, [pc, #600]	; 14b3c <__assert_fail@plt+0x3c10>
   148e0:	mov	r0, #0
   148e4:	bl	10d64 <dcgettext@plt>
   148e8:	ldr	r3, [r4, #8]
   148ec:	mov	r2, r0
   148f0:	mov	r1, #1
   148f4:	mov	r0, r5
   148f8:	str	r3, [sp, #52]	; 0x34
   148fc:	ldr	r3, [r4, #4]
   14900:	str	r3, [sp, #48]	; 0x30
   14904:	ldr	r3, [r4]
   14908:	add	sp, sp, #32
   1490c:	pop	{r4, r5, r6, lr}
   14910:	b	10e9c <__fprintf_chk@plt>
   14914:	mov	r2, #5
   14918:	ldr	r1, [pc, #544]	; 14b40 <__assert_fail@plt+0x3c14>
   1491c:	mov	r0, #0
   14920:	bl	10d64 <dcgettext@plt>
   14924:	ldr	r3, [r4, #12]
   14928:	mov	r2, r0
   1492c:	mov	r1, #1
   14930:	mov	r0, r5
   14934:	str	r3, [sp, #8]
   14938:	ldr	r3, [r4, #8]
   1493c:	str	r3, [sp, #4]
   14940:	ldr	r3, [r4, #4]
   14944:	str	r3, [sp]
   14948:	ldr	r3, [r4]
   1494c:	bl	10e9c <__fprintf_chk@plt>
   14950:	add	sp, sp, #32
   14954:	pop	{r4, r5, r6, pc}
   14958:	mov	r2, #5
   1495c:	ldr	r1, [pc, #480]	; 14b44 <__assert_fail@plt+0x3c18>
   14960:	mov	r0, #0
   14964:	bl	10d64 <dcgettext@plt>
   14968:	ldr	r3, [r4, #16]
   1496c:	mov	r2, r0
   14970:	mov	r1, #1
   14974:	mov	r0, r5
   14978:	str	r3, [sp, #12]
   1497c:	ldr	r3, [r4, #12]
   14980:	str	r3, [sp, #8]
   14984:	ldr	r3, [r4, #8]
   14988:	str	r3, [sp, #4]
   1498c:	ldr	r3, [r4, #4]
   14990:	str	r3, [sp]
   14994:	ldr	r3, [r4]
   14998:	bl	10e9c <__fprintf_chk@plt>
   1499c:	b	14950 <__assert_fail@plt+0x3a24>
   149a0:	mov	r2, #5
   149a4:	ldr	r1, [pc, #412]	; 14b48 <__assert_fail@plt+0x3c1c>
   149a8:	mov	r0, #0
   149ac:	bl	10d64 <dcgettext@plt>
   149b0:	ldr	r3, [r4, #20]
   149b4:	mov	r2, r0
   149b8:	mov	r1, #1
   149bc:	mov	r0, r5
   149c0:	str	r3, [sp, #16]
   149c4:	ldr	r3, [r4, #16]
   149c8:	str	r3, [sp, #12]
   149cc:	ldr	r3, [r4, #12]
   149d0:	str	r3, [sp, #8]
   149d4:	ldr	r3, [r4, #8]
   149d8:	str	r3, [sp, #4]
   149dc:	ldr	r3, [r4, #4]
   149e0:	str	r3, [sp]
   149e4:	ldr	r3, [r4]
   149e8:	bl	10e9c <__fprintf_chk@plt>
   149ec:	b	14950 <__assert_fail@plt+0x3a24>
   149f0:	mov	r2, #5
   149f4:	ldr	r1, [pc, #336]	; 14b4c <__assert_fail@plt+0x3c20>
   149f8:	mov	r0, #0
   149fc:	bl	10d64 <dcgettext@plt>
   14a00:	ldr	r3, [r4, #24]
   14a04:	mov	r2, r0
   14a08:	mov	r1, #1
   14a0c:	mov	r0, r5
   14a10:	str	r3, [sp, #20]
   14a14:	ldr	r3, [r4, #20]
   14a18:	str	r3, [sp, #16]
   14a1c:	ldr	r3, [r4, #16]
   14a20:	str	r3, [sp, #12]
   14a24:	ldr	r3, [r4, #12]
   14a28:	str	r3, [sp, #8]
   14a2c:	ldr	r3, [r4, #8]
   14a30:	str	r3, [sp, #4]
   14a34:	ldr	r3, [r4, #4]
   14a38:	str	r3, [sp]
   14a3c:	ldr	r3, [r4]
   14a40:	bl	10e9c <__fprintf_chk@plt>
   14a44:	b	14950 <__assert_fail@plt+0x3a24>
   14a48:	mov	r2, #5
   14a4c:	ldr	r1, [pc, #252]	; 14b50 <__assert_fail@plt+0x3c24>
   14a50:	mov	r0, #0
   14a54:	bl	10d64 <dcgettext@plt>
   14a58:	ldr	r3, [r4, #28]
   14a5c:	mov	r2, r0
   14a60:	mov	r1, #1
   14a64:	mov	r0, r5
   14a68:	str	r3, [sp, #24]
   14a6c:	ldr	r3, [r4, #24]
   14a70:	str	r3, [sp, #20]
   14a74:	ldr	r3, [r4, #20]
   14a78:	str	r3, [sp, #16]
   14a7c:	ldr	r3, [r4, #16]
   14a80:	str	r3, [sp, #12]
   14a84:	ldr	r3, [r4, #12]
   14a88:	str	r3, [sp, #8]
   14a8c:	ldr	r3, [r4, #8]
   14a90:	str	r3, [sp, #4]
   14a94:	ldr	r3, [r4, #4]
   14a98:	str	r3, [sp]
   14a9c:	ldr	r3, [r4]
   14aa0:	bl	10e9c <__fprintf_chk@plt>
   14aa4:	b	14950 <__assert_fail@plt+0x3a24>
   14aa8:	ldr	r1, [pc, #164]	; 14b54 <__assert_fail@plt+0x3c28>
   14aac:	mov	r2, #5
   14ab0:	mov	r0, #0
   14ab4:	bl	10d64 <dcgettext@plt>
   14ab8:	ldr	r3, [r4, #32]
   14abc:	mov	r2, r0
   14ac0:	mov	r1, #1
   14ac4:	mov	r0, r5
   14ac8:	str	r3, [sp, #28]
   14acc:	ldr	r3, [r4, #28]
   14ad0:	str	r3, [sp, #24]
   14ad4:	ldr	r3, [r4, #24]
   14ad8:	str	r3, [sp, #20]
   14adc:	ldr	r3, [r4, #20]
   14ae0:	str	r3, [sp, #16]
   14ae4:	ldr	r3, [r4, #16]
   14ae8:	str	r3, [sp, #12]
   14aec:	ldr	r3, [r4, #12]
   14af0:	str	r3, [sp, #8]
   14af4:	ldr	r3, [r4, #8]
   14af8:	str	r3, [sp, #4]
   14afc:	ldr	r3, [r4, #4]
   14b00:	str	r3, [sp]
   14b04:	ldr	r3, [r4]
   14b08:	bl	10e9c <__fprintf_chk@plt>
   14b0c:	b	14950 <__assert_fail@plt+0x3a24>
   14b10:	mov	r2, #5
   14b14:	ldr	r1, [pc, #60]	; 14b58 <__assert_fail@plt+0x3c2c>
   14b18:	b	14ab0 <__assert_fail@plt+0x3b84>
   14b1c:	andeq	r6, r1, r3, asr #25
   14b20:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   14b24:	andeq	r6, r1, r4, lsr #31
   14b28:	ldrdeq	r6, [r1], -sl
   14b2c:	andeq	r6, r1, r5, lsl #27
   14b30:	andeq	r6, r1, pc, asr #25
   14b34:	andeq	r6, r1, r7, lsr #27
   14b38:			; <UNDEFINED> instruction: 0x00016db7
   14b3c:	andeq	r6, r1, lr, asr #27
   14b40:	andeq	r6, r1, sl, ror #27
   14b44:	andeq	r6, r1, sl, lsl #28
   14b48:	andeq	r6, r1, lr, lsr #28
   14b4c:	andeq	r6, r1, r6, asr lr
   14b50:	andeq	r6, r1, r2, lsl #29
   14b54:			; <UNDEFINED> instruction: 0x00016eb2
   14b58:	andeq	r6, r1, r6, ror #29
   14b5c:	push	{r0, r1, r4, lr}
   14b60:	mov	ip, #0
   14b64:	ldr	lr, [sp, #16]
   14b68:	ldr	r4, [lr, ip, lsl #2]
   14b6c:	cmp	r4, #0
   14b70:	bne	14b88 <__assert_fail@plt+0x3c5c>
   14b74:	str	lr, [sp]
   14b78:	str	ip, [sp, #4]
   14b7c:	bl	14794 <__assert_fail@plt+0x3868>
   14b80:	add	sp, sp, #8
   14b84:	pop	{r4, pc}
   14b88:	add	ip, ip, #1
   14b8c:	b	14b68 <__assert_fail@plt+0x3c3c>
   14b90:	push	{r4, r5, r6, lr}
   14b94:	sub	sp, sp, #48	; 0x30
   14b98:	mov	ip, #0
   14b9c:	add	lr, sp, #8
   14ba0:	mov	r5, lr
   14ba4:	ldr	r6, [sp, #64]	; 0x40
   14ba8:	ldr	r4, [r6, ip, lsl #2]
   14bac:	cmp	r4, #0
   14bb0:	str	r4, [lr], #4
   14bb4:	beq	14bc4 <__assert_fail@plt+0x3c98>
   14bb8:	add	ip, ip, #1
   14bbc:	cmp	ip, #10
   14bc0:	bne	14ba8 <__assert_fail@plt+0x3c7c>
   14bc4:	stm	sp, {r5, ip}
   14bc8:	bl	14794 <__assert_fail@plt+0x3868>
   14bcc:	add	sp, sp, #48	; 0x30
   14bd0:	pop	{r4, r5, r6, pc}
   14bd4:	push	{r3}		; (str r3, [sp, #-4]!)
   14bd8:	push	{r0, r1, r2, r3, lr}
   14bdc:	add	r3, sp, #24
   14be0:	str	r3, [sp]
   14be4:	str	r3, [sp, #12]
   14be8:	ldr	r3, [sp, #20]
   14bec:	bl	14b90 <__assert_fail@plt+0x3c64>
   14bf0:	add	sp, sp, #16
   14bf4:	pop	{lr}		; (ldr lr, [sp], #4)
   14bf8:	add	sp, sp, #4
   14bfc:	bx	lr
   14c00:	ldr	r3, [pc, #116]	; 14c7c <__assert_fail@plt+0x3d50>
   14c04:	mov	r0, #10
   14c08:	push	{r4, lr}
   14c0c:	ldr	r1, [r3]
   14c10:	bl	10d58 <fputc_unlocked@plt>
   14c14:	mov	r2, #5
   14c18:	ldr	r1, [pc, #96]	; 14c80 <__assert_fail@plt+0x3d54>
   14c1c:	mov	r0, #0
   14c20:	bl	10d64 <dcgettext@plt>
   14c24:	mov	r1, r0
   14c28:	ldr	r2, [pc, #84]	; 14c84 <__assert_fail@plt+0x3d58>
   14c2c:	mov	r0, #1
   14c30:	bl	10e78 <__printf_chk@plt>
   14c34:	mov	r2, #5
   14c38:	ldr	r1, [pc, #72]	; 14c88 <__assert_fail@plt+0x3d5c>
   14c3c:	mov	r0, #0
   14c40:	bl	10d64 <dcgettext@plt>
   14c44:	mov	r1, r0
   14c48:	ldr	r3, [pc, #60]	; 14c8c <__assert_fail@plt+0x3d60>
   14c4c:	mov	r0, #1
   14c50:	ldr	r2, [pc, #56]	; 14c90 <__assert_fail@plt+0x3d64>
   14c54:	bl	10e78 <__printf_chk@plt>
   14c58:	mov	r2, #5
   14c5c:	ldr	r1, [pc, #48]	; 14c94 <__assert_fail@plt+0x3d68>
   14c60:	mov	r0, #0
   14c64:	bl	10d64 <dcgettext@plt>
   14c68:	mov	r1, r0
   14c6c:	ldr	r2, [pc, #36]	; 14c98 <__assert_fail@plt+0x3d6c>
   14c70:	mov	r0, #1
   14c74:	pop	{r4, lr}
   14c78:	b	10e78 <__printf_chk@plt>
   14c7c:	andeq	r8, r2, r4, asr r1
   14c80:	andeq	r6, r1, r2, lsr #30
   14c84:	andeq	r6, r1, r6, lsr pc
   14c88:	andeq	r6, r1, ip, asr #30
   14c8c:	strdeq	r6, [r1], -r3
   14c90:	andeq	r6, r1, fp, lsl r6
   14c94:	andeq	r6, r1, r0, ror #30
   14c98:	andeq	r6, r1, r7, lsl #31
   14c9c:	push	{r4, lr}
   14ca0:	bl	15410 <__assert_fail@plt+0x44e4>
   14ca4:	cmp	r0, #0
   14ca8:	popne	{r4, pc}
   14cac:	bl	14f54 <__assert_fail@plt+0x4028>
   14cb0:	push	{r4, lr}
   14cb4:	bl	15410 <__assert_fail@plt+0x44e4>
   14cb8:	cmp	r0, #0
   14cbc:	popne	{r4, pc}
   14cc0:	bl	14f54 <__assert_fail@plt+0x4028>
   14cc4:	b	14c9c <__assert_fail@plt+0x3d70>
   14cc8:	push	{r4, r5, r6, lr}
   14ccc:	mov	r5, r0
   14cd0:	mov	r4, r1
   14cd4:	bl	1543c <__assert_fail@plt+0x4510>
   14cd8:	cmp	r0, #0
   14cdc:	popne	{r4, r5, r6, pc}
   14ce0:	adds	r4, r4, #0
   14ce4:	movne	r4, #1
   14ce8:	cmp	r5, #0
   14cec:	moveq	r4, #1
   14cf0:	cmp	r4, #0
   14cf4:	popeq	{r4, r5, r6, pc}
   14cf8:	bl	14f54 <__assert_fail@plt+0x4028>
   14cfc:	push	{r4, lr}
   14d00:	bl	15684 <__assert_fail@plt+0x4758>
   14d04:	cmp	r0, #0
   14d08:	popne	{r4, pc}
   14d0c:	bl	14f54 <__assert_fail@plt+0x4028>
   14d10:	push	{r4, r5, r6, lr}
   14d14:	mov	r6, r0
   14d18:	mov	r5, r1
   14d1c:	mov	r4, r2
   14d20:	bl	1572c <__assert_fail@plt+0x4800>
   14d24:	cmp	r0, #0
   14d28:	popne	{r4, r5, r6, pc}
   14d2c:	cmp	r6, #0
   14d30:	beq	14d40 <__assert_fail@plt+0x3e14>
   14d34:	cmp	r5, #0
   14d38:	cmpne	r4, #0
   14d3c:	popeq	{r4, r5, r6, pc}
   14d40:	bl	14f54 <__assert_fail@plt+0x4028>
   14d44:	b	14d10 <__assert_fail@plt+0x3de4>
   14d48:	push	{r4, lr}
   14d4c:	bl	15694 <__assert_fail@plt+0x4768>
   14d50:	cmp	r0, #0
   14d54:	popne	{r4, pc}
   14d58:	bl	14f54 <__assert_fail@plt+0x4028>
   14d5c:	mov	r2, r1
   14d60:	mov	r1, r0
   14d64:	mov	r0, #0
   14d68:	b	14d10 <__assert_fail@plt+0x3de4>
   14d6c:	mov	r2, r1
   14d70:	mov	r1, r0
   14d74:	mov	r0, #0
   14d78:	b	14d48 <__assert_fail@plt+0x3e1c>
   14d7c:	cmp	r0, #0
   14d80:	push	{r4, r5, r6, lr}
   14d84:	mov	r5, r1
   14d88:	ldr	r4, [r1]
   14d8c:	bne	14db8 <__assert_fail@plt+0x3e8c>
   14d90:	cmp	r4, #0
   14d94:	bne	14da8 <__assert_fail@plt+0x3e7c>
   14d98:	mov	r4, #64	; 0x40
   14d9c:	udiv	r4, r4, r2
   14da0:	cmp	r2, #64	; 0x40
   14da4:	addhi	r4, r4, #1
   14da8:	mov	r1, r4
   14dac:	bl	14d10 <__assert_fail@plt+0x3de4>
   14db0:	str	r4, [r5]
   14db4:	pop	{r4, r5, r6, pc}
   14db8:	lsr	r3, r4, #1
   14dbc:	add	r3, r3, #1
   14dc0:	adds	r4, r4, r3
   14dc4:	bcc	14da8 <__assert_fail@plt+0x3e7c>
   14dc8:	bl	14f54 <__assert_fail@plt+0x4028>
   14dcc:	mov	r2, #1
   14dd0:	b	14d7c <__assert_fail@plt+0x3e50>
   14dd4:	ldr	ip, [r1]
   14dd8:	push	{r4, r5, r6, r7, r8, lr}
   14ddc:	mov	r5, r1
   14de0:	mvn	r8, r3
   14de4:	lsr	r8, r8, #31
   14de8:	ldr	lr, [sp, #24]
   14dec:	asr	r1, ip, #1
   14df0:	adds	r4, ip, r1
   14df4:	mvnvs	r4, #-2147483648	; 0x80000000
   14df8:	cmp	r3, r4
   14dfc:	movge	r1, #0
   14e00:	andlt	r1, r8, #1
   14e04:	cmp	r1, #0
   14e08:	movne	r4, r3
   14e0c:	smull	r6, r7, r4, lr
   14e10:	cmp	r7, r6, asr #31
   14e14:	bne	14e2c <__assert_fail@plt+0x3f00>
   14e18:	cmp	r6, #63	; 0x3f
   14e1c:	mov	r1, r6
   14e20:	bgt	14e3c <__assert_fail@plt+0x3f10>
   14e24:	mov	r1, #64	; 0x40
   14e28:	b	14e30 <__assert_fail@plt+0x3f04>
   14e2c:	mvn	r1, #-2147483648	; 0x80000000
   14e30:	sdiv	r4, r1, lr
   14e34:	mls	r6, lr, r4, r1
   14e38:	sub	r1, r1, r6
   14e3c:	cmp	r0, #0
   14e40:	sub	r6, r4, ip
   14e44:	streq	r0, [r5]
   14e48:	cmp	r6, r2
   14e4c:	bge	14e80 <__assert_fail@plt+0x3f54>
   14e50:	adds	r4, ip, r2
   14e54:	bvs	14e7c <__assert_fail@plt+0x3f50>
   14e58:	cmp	r4, r3
   14e5c:	movle	r3, #0
   14e60:	andgt	r3, r8, #1
   14e64:	cmp	r3, #0
   14e68:	bne	14e7c <__assert_fail@plt+0x3f50>
   14e6c:	smull	r2, r3, r4, lr
   14e70:	cmp	r3, r2, asr #31
   14e74:	mov	r1, r2
   14e78:	beq	14e80 <__assert_fail@plt+0x3f54>
   14e7c:	bl	14f54 <__assert_fail@plt+0x4028>
   14e80:	bl	14cc8 <__assert_fail@plt+0x3d9c>
   14e84:	str	r4, [r5]
   14e88:	pop	{r4, r5, r6, r7, r8, pc}
   14e8c:	push	{r4, lr}
   14e90:	bl	153bc <__assert_fail@plt+0x4490>
   14e94:	cmp	r0, #0
   14e98:	popne	{r4, pc}
   14e9c:	bl	14f54 <__assert_fail@plt+0x4028>
   14ea0:	mov	r1, #1
   14ea4:	b	14e8c <__assert_fail@plt+0x3f60>
   14ea8:	push	{r4, lr}
   14eac:	bl	153bc <__assert_fail@plt+0x4490>
   14eb0:	cmp	r0, #0
   14eb4:	popne	{r4, pc}
   14eb8:	bl	14f54 <__assert_fail@plt+0x4028>
   14ebc:	mov	r1, #1
   14ec0:	b	14ea8 <__assert_fail@plt+0x3f7c>
   14ec4:	push	{r4, r5, r6, lr}
   14ec8:	mov	r4, r1
   14ecc:	mov	r5, r0
   14ed0:	mov	r0, r1
   14ed4:	bl	14c9c <__assert_fail@plt+0x3d70>
   14ed8:	mov	r2, r4
   14edc:	mov	r1, r5
   14ee0:	pop	{r4, r5, r6, lr}
   14ee4:	b	10d10 <memcpy@plt>
   14ee8:	push	{r4, r5, r6, lr}
   14eec:	mov	r4, r1
   14ef0:	mov	r5, r0
   14ef4:	mov	r0, r1
   14ef8:	bl	14cb0 <__assert_fail@plt+0x3d84>
   14efc:	mov	r2, r4
   14f00:	mov	r1, r5
   14f04:	pop	{r4, r5, r6, lr}
   14f08:	b	10d10 <memcpy@plt>
   14f0c:	push	{r4, r5, r6, lr}
   14f10:	mov	r5, r0
   14f14:	add	r0, r1, #1
   14f18:	mov	r4, r1
   14f1c:	bl	14cb0 <__assert_fail@plt+0x3d84>
   14f20:	mov	r2, #0
   14f24:	mov	r1, r5
   14f28:	strb	r2, [r0, r4]
   14f2c:	mov	r2, r4
   14f30:	pop	{r4, r5, r6, lr}
   14f34:	b	10d10 <memcpy@plt>
   14f38:	push	{r4, lr}
   14f3c:	mov	r4, r0
   14f40:	bl	10e30 <strlen@plt>
   14f44:	add	r1, r0, #1
   14f48:	mov	r0, r4
   14f4c:	pop	{r4, lr}
   14f50:	b	14ec4 <__assert_fail@plt+0x3f98>
   14f54:	ldr	r3, [pc, #44]	; 14f88 <__assert_fail@plt+0x405c>
   14f58:	mov	r2, #5
   14f5c:	mov	r0, #0
   14f60:	push	{r4, lr}
   14f64:	ldr	r1, [pc, #32]	; 14f8c <__assert_fail@plt+0x4060>
   14f68:	ldr	r4, [r3]
   14f6c:	bl	10d64 <dcgettext@plt>
   14f70:	mov	r3, r0
   14f74:	ldr	r2, [pc, #20]	; 14f90 <__assert_fail@plt+0x4064>
   14f78:	mov	r1, #0
   14f7c:	mov	r0, r4
   14f80:	bl	10dd0 <error@plt>
   14f84:	bl	10f14 <abort@plt>
   14f88:	strdeq	r8, [r2], -r4
   14f8c:	ldrdeq	r6, [r1], -r3
   14f90:	andeq	r6, r1, r8, asr #23
   14f94:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f98:	mov	ip, r0
   14f9c:	asr	fp, r1, #31
   14fa0:	mov	r0, #0
   14fa4:	mov	lr, r0
   14fa8:	subs	r2, r2, #1
   14fac:	bcs	14fb8 <__assert_fail@plt+0x408c>
   14fb0:	add	sp, sp, #12
   14fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fb8:	ldrd	r8, [ip]
   14fbc:	mov	r3, #0
   14fc0:	cmp	r9, r3
   14fc4:	umulleq	r8, r9, r8, r1
   14fc8:	moveq	r6, r8
   14fcc:	moveq	r4, r9
   14fd0:	beq	15008 <__assert_fail@plt+0x40dc>
   14fd4:	umull	r4, r5, r8, r1
   14fd8:	strd	r4, [sp]
   14fdc:	mov	r5, lr
   14fe0:	ldr	r4, [sp, #4]
   14fe4:	umlal	r4, r5, r9, r1
   14fe8:	cmp	r5, #0
   14fec:	ldrne	r3, [sp, #4]
   14ff0:	mulne	r4, r1, r9
   14ff4:	ldreq	r6, [sp]
   14ff8:	mlane	r4, r8, fp, r4
   14ffc:	ldrne	r6, [sp]
   15000:	addne	r4, r4, r3
   15004:	movne	r3, #1
   15008:	cmp	r3, #0
   1500c:	mvnne	r6, #0
   15010:	movne	r3, #1
   15014:	movne	r4, r6
   15018:	orr	r0, r0, r3
   1501c:	str	r6, [ip]
   15020:	str	r4, [ip, #4]
   15024:	b	14fa8 <__assert_fail@plt+0x407c>
   15028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1502c:	cmp	r2, #36	; 0x24
   15030:	sub	sp, sp, #20
   15034:	ldr	r5, [sp, #56]	; 0x38
   15038:	bls	15050 <__assert_fail@plt+0x4124>
   1503c:	ldr	r3, [pc, #876]	; 153b0 <__assert_fail@plt+0x4484>
   15040:	mov	r2, #85	; 0x55
   15044:	ldr	r1, [pc, #872]	; 153b4 <__assert_fail@plt+0x4488>
   15048:	ldr	r0, [pc, #872]	; 153b8 <__assert_fail@plt+0x448c>
   1504c:	bl	10f2c <__assert_fail@plt>
   15050:	cmp	r1, #0
   15054:	mov	r6, r1
   15058:	mov	r8, r0
   1505c:	mov	fp, r2
   15060:	mov	r7, r3
   15064:	addeq	r6, sp, #4
   15068:	bl	10e48 <__errno_location@plt>
   1506c:	mov	r3, #0
   15070:	mov	sl, r0
   15074:	str	r3, [r0]
   15078:	bl	10e18 <__ctype_b_loc@plt>
   1507c:	ldrb	r9, [r8]
   15080:	mov	r3, r8
   15084:	ldr	r1, [r0]
   15088:	lsl	r2, r9, #1
   1508c:	ldrh	r4, [r1, r2]
   15090:	ands	r4, r4, #8192	; 0x2000
   15094:	bne	150b0 <__assert_fail@plt+0x4184>
   15098:	cmp	r9, #45	; 0x2d
   1509c:	bne	150b8 <__assert_fail@plt+0x418c>
   150a0:	mov	r4, #4
   150a4:	mov	r0, r4
   150a8:	add	sp, sp, #20
   150ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150b0:	ldrb	r9, [r3, #1]!
   150b4:	b	15088 <__assert_fail@plt+0x415c>
   150b8:	mov	r2, fp
   150bc:	mov	r1, r6
   150c0:	mov	r0, r8
   150c4:	bl	10e90 <strtoumax@plt>
   150c8:	ldr	r9, [r6]
   150cc:	strd	r0, [sp, #8]
   150d0:	cmp	r9, r8
   150d4:	bne	15138 <__assert_fail@plt+0x420c>
   150d8:	cmp	r5, #0
   150dc:	beq	150a0 <__assert_fail@plt+0x4174>
   150e0:	ldrb	r1, [r8]
   150e4:	cmp	r1, #0
   150e8:	beq	150a0 <__assert_fail@plt+0x4174>
   150ec:	mov	r0, r5
   150f0:	bl	10e3c <strchr@plt>
   150f4:	cmp	r0, #0
   150f8:	movne	r2, #1
   150fc:	movne	r3, #0
   15100:	strdne	r2, [sp, #8]
   15104:	beq	150a0 <__assert_fail@plt+0x4174>
   15108:	ldrb	r8, [r9]
   1510c:	cmp	r8, #0
   15110:	beq	15368 <__assert_fail@plt+0x443c>
   15114:	mov	r1, r8
   15118:	mov	r0, r5
   1511c:	bl	10e3c <strchr@plt>
   15120:	cmp	r0, #0
   15124:	bne	15160 <__assert_fail@plt+0x4234>
   15128:	ldrd	r2, [sp, #8]
   1512c:	orr	r4, r4, #2
   15130:	strd	r2, [r7]
   15134:	b	150a4 <__assert_fail@plt+0x4178>
   15138:	ldr	r4, [sl]
   1513c:	cmp	r4, #0
   15140:	beq	15150 <__assert_fail@plt+0x4224>
   15144:	cmp	r4, #34	; 0x22
   15148:	bne	150a0 <__assert_fail@plt+0x4174>
   1514c:	mov	r4, #1
   15150:	cmp	r5, #0
   15154:	strdeq	r0, [r7]
   15158:	bne	15108 <__assert_fail@plt+0x41dc>
   1515c:	b	150a4 <__assert_fail@plt+0x4178>
   15160:	cmp	r8, #84	; 0x54
   15164:	beq	151b8 <__assert_fail@plt+0x428c>
   15168:	bhi	151a0 <__assert_fail@plt+0x4274>
   1516c:	cmp	r8, #75	; 0x4b
   15170:	beq	151b8 <__assert_fail@plt+0x428c>
   15174:	bhi	15190 <__assert_fail@plt+0x4264>
   15178:	cmp	r8, #69	; 0x45
   1517c:	beq	151b8 <__assert_fail@plt+0x428c>
   15180:	cmp	r8, #71	; 0x47
   15184:	beq	151b8 <__assert_fail@plt+0x428c>
   15188:	mov	r5, #1
   1518c:	b	15270 <__assert_fail@plt+0x4344>
   15190:	cmp	r8, #77	; 0x4d
   15194:	beq	151b8 <__assert_fail@plt+0x428c>
   15198:	cmp	r8, #80	; 0x50
   1519c:	b	15184 <__assert_fail@plt+0x4258>
   151a0:	cmp	r8, #103	; 0x67
   151a4:	beq	151b8 <__assert_fail@plt+0x428c>
   151a8:	bhi	15248 <__assert_fail@plt+0x431c>
   151ac:	sub	r3, r8, #89	; 0x59
   151b0:	cmp	r3, #1
   151b4:	bhi	15188 <__assert_fail@plt+0x425c>
   151b8:	mov	r1, #48	; 0x30
   151bc:	mov	r0, r5
   151c0:	bl	10e3c <strchr@plt>
   151c4:	cmp	r0, #0
   151c8:	beq	15188 <__assert_fail@plt+0x425c>
   151cc:	ldrb	r3, [r9, #1]
   151d0:	cmp	r3, #68	; 0x44
   151d4:	moveq	r5, #2
   151d8:	moveq	r1, #1000	; 0x3e8
   151dc:	beq	151fc <__assert_fail@plt+0x42d0>
   151e0:	cmp	r3, #105	; 0x69
   151e4:	beq	15260 <__assert_fail@plt+0x4334>
   151e8:	cmp	r3, #66	; 0x42
   151ec:	moveq	r5, #2
   151f0:	movne	r5, #1
   151f4:	moveq	r1, #1000	; 0x3e8
   151f8:	movne	r1, #1024	; 0x400
   151fc:	cmp	r8, #89	; 0x59
   15200:	beq	15398 <__assert_fail@plt+0x446c>
   15204:	bhi	15298 <__assert_fail@plt+0x436c>
   15208:	cmp	r8, #75	; 0x4b
   1520c:	beq	152d8 <__assert_fail@plt+0x43ac>
   15210:	bhi	15278 <__assert_fail@plt+0x434c>
   15214:	cmp	r8, #69	; 0x45
   15218:	beq	15374 <__assert_fail@plt+0x4448>
   1521c:	cmp	r8, #71	; 0x47
   15220:	beq	15380 <__assert_fail@plt+0x4454>
   15224:	cmp	r8, #66	; 0x42
   15228:	bne	15128 <__assert_fail@plt+0x41fc>
   1522c:	ldr	r3, [sp, #8]
   15230:	ldr	r1, [sp, #12]
   15234:	lsl	r2, r1, #10
   15238:	lsr	r0, r1, #22
   1523c:	orr	r2, r2, r3, lsr #22
   15240:	lsl	r3, r3, #10
   15244:	b	15324 <__assert_fail@plt+0x43f8>
   15248:	cmp	r8, #109	; 0x6d
   1524c:	beq	151b8 <__assert_fail@plt+0x428c>
   15250:	cmp	r8, #116	; 0x74
   15254:	beq	151b8 <__assert_fail@plt+0x428c>
   15258:	cmp	r8, #107	; 0x6b
   1525c:	b	15184 <__assert_fail@plt+0x4258>
   15260:	ldrb	r3, [r9, #2]
   15264:	cmp	r3, #66	; 0x42
   15268:	movne	r5, #1
   1526c:	moveq	r5, #3
   15270:	mov	r1, #1024	; 0x400
   15274:	b	151fc <__assert_fail@plt+0x42d0>
   15278:	cmp	r8, #80	; 0x50
   1527c:	beq	15388 <__assert_fail@plt+0x445c>
   15280:	cmp	r8, #84	; 0x54
   15284:	beq	15390 <__assert_fail@plt+0x4464>
   15288:	cmp	r8, #77	; 0x4d
   1528c:	bne	15128 <__assert_fail@plt+0x41fc>
   15290:	mov	r2, #2
   15294:	b	15378 <__assert_fail@plt+0x444c>
   15298:	cmp	r8, #103	; 0x67
   1529c:	beq	15380 <__assert_fail@plt+0x4454>
   152a0:	bhi	152c4 <__assert_fail@plt+0x4398>
   152a4:	cmp	r8, #98	; 0x62
   152a8:	beq	1530c <__assert_fail@plt+0x43e0>
   152ac:	cmp	r8, #99	; 0x63
   152b0:	beq	153a8 <__assert_fail@plt+0x447c>
   152b4:	cmp	r8, #90	; 0x5a
   152b8:	bne	15128 <__assert_fail@plt+0x41fc>
   152bc:	mov	r2, #7
   152c0:	b	15378 <__assert_fail@plt+0x444c>
   152c4:	cmp	r8, #109	; 0x6d
   152c8:	beq	15290 <__assert_fail@plt+0x4364>
   152cc:	bhi	152e0 <__assert_fail@plt+0x43b4>
   152d0:	cmp	r8, #107	; 0x6b
   152d4:	bne	15128 <__assert_fail@plt+0x41fc>
   152d8:	mov	r2, #1
   152dc:	b	15378 <__assert_fail@plt+0x444c>
   152e0:	cmp	r8, #116	; 0x74
   152e4:	beq	15390 <__assert_fail@plt+0x4464>
   152e8:	cmp	r8, #119	; 0x77
   152ec:	bne	15128 <__assert_fail@plt+0x41fc>
   152f0:	ldr	r3, [sp, #8]
   152f4:	ldr	r2, [sp, #12]
   152f8:	ldr	r0, [sp, #12]
   152fc:	adds	r3, r3, r3
   15300:	adc	r2, r2, r2
   15304:	lsr	r0, r0, #31
   15308:	b	15324 <__assert_fail@plt+0x43f8>
   1530c:	ldr	r3, [sp, #8]
   15310:	ldr	r1, [sp, #12]
   15314:	lsl	r2, r1, #9
   15318:	lsr	r0, r1, #23
   1531c:	orr	r2, r2, r3, lsr #23
   15320:	lsl	r3, r3, #9
   15324:	adds	r0, r0, #0
   15328:	movne	r0, #1
   1532c:	cmp	r0, #0
   15330:	streq	r3, [sp, #8]
   15334:	streq	r2, [sp, #12]
   15338:	beq	1534c <__assert_fail@plt+0x4420>
   1533c:	mvn	r2, #0
   15340:	mvn	r3, #0
   15344:	mov	r0, #1
   15348:	strd	r2, [sp, #8]
   1534c:	ldr	r3, [r6]
   15350:	orr	r4, r4, r0
   15354:	add	r2, r3, r5
   15358:	str	r2, [r6]
   1535c:	ldrb	r3, [r3, r5]
   15360:	cmp	r3, #0
   15364:	orrne	r4, r4, #2
   15368:	ldrd	r2, [sp, #8]
   1536c:	strd	r2, [r7]
   15370:	b	150a4 <__assert_fail@plt+0x4178>
   15374:	mov	r2, #6
   15378:	add	r0, sp, #8
   1537c:	b	153a0 <__assert_fail@plt+0x4474>
   15380:	mov	r2, #3
   15384:	b	15378 <__assert_fail@plt+0x444c>
   15388:	mov	r2, #5
   1538c:	b	15378 <__assert_fail@plt+0x444c>
   15390:	mov	r2, #4
   15394:	b	15378 <__assert_fail@plt+0x444c>
   15398:	mov	r2, #8
   1539c:	add	r0, sp, r2
   153a0:	bl	14f94 <__assert_fail@plt+0x4068>
   153a4:	b	1534c <__assert_fail@plt+0x4420>
   153a8:	mov	r0, #0
   153ac:	b	1534c <__assert_fail@plt+0x4420>
   153b0:	andeq	r6, r1, r4, ror #31
   153b4:	andeq	r6, r1, pc, ror #31
   153b8:	strdeq	r6, [r1], -sp
   153bc:	cmp	r1, #0
   153c0:	cmpne	r0, #0
   153c4:	beq	153fc <__assert_fail@plt+0x44d0>
   153c8:	push	{r4, r5, r6, lr}
   153cc:	umull	r4, r5, r0, r1
   153d0:	adds	r3, r5, #0
   153d4:	movne	r3, #1
   153d8:	cmp	r4, #0
   153dc:	blt	153e8 <__assert_fail@plt+0x44bc>
   153e0:	cmp	r3, #0
   153e4:	beq	15408 <__assert_fail@plt+0x44dc>
   153e8:	bl	10e48 <__errno_location@plt>
   153ec:	mov	r3, #12
   153f0:	str	r3, [r0]
   153f4:	mov	r0, #0
   153f8:	pop	{r4, r5, r6, pc}
   153fc:	mov	r1, #1
   15400:	mov	r0, r1
   15404:	b	10cb0 <calloc@plt>
   15408:	pop	{r4, r5, r6, lr}
   1540c:	b	15404 <__assert_fail@plt+0x44d8>
   15410:	cmp	r0, #0
   15414:	beq	15434 <__assert_fail@plt+0x4508>
   15418:	bge	15438 <__assert_fail@plt+0x450c>
   1541c:	push	{r4, lr}
   15420:	bl	10e48 <__errno_location@plt>
   15424:	mov	r3, #12
   15428:	str	r3, [r0]
   1542c:	mov	r0, #0
   15430:	pop	{r4, pc}
   15434:	mov	r0, #1
   15438:	b	10ddc <malloc@plt>
   1543c:	cmp	r0, #0
   15440:	bne	1544c <__assert_fail@plt+0x4520>
   15444:	mov	r0, r1
   15448:	b	15410 <__assert_fail@plt+0x44e4>
   1544c:	cmp	r1, #0
   15450:	push	{r4, lr}
   15454:	bne	15464 <__assert_fail@plt+0x4538>
   15458:	bl	130cc <__assert_fail@plt+0x21a0>
   1545c:	mov	r0, #0
   15460:	pop	{r4, pc}
   15464:	blt	15470 <__assert_fail@plt+0x4544>
   15468:	pop	{r4, lr}
   1546c:	b	10d70 <realloc@plt>
   15470:	bl	10e48 <__errno_location@plt>
   15474:	mov	r3, #12
   15478:	str	r3, [r0]
   1547c:	b	1545c <__assert_fail@plt+0x4530>
   15480:	push	{r4, r5, r6, lr}
   15484:	mov	r4, r0
   15488:	bl	10dac <__fpending@plt>
   1548c:	mov	r5, r0
   15490:	mov	r0, r4
   15494:	bl	10db8 <ferror_unlocked@plt>
   15498:	mov	r6, r0
   1549c:	mov	r0, r4
   154a0:	bl	154f0 <__assert_fail@plt+0x45c4>
   154a4:	cmp	r6, #0
   154a8:	mov	r4, r0
   154ac:	bne	154d8 <__assert_fail@plt+0x45ac>
   154b0:	cmp	r0, #0
   154b4:	beq	154d0 <__assert_fail@plt+0x45a4>
   154b8:	cmp	r5, #0
   154bc:	bne	154e8 <__assert_fail@plt+0x45bc>
   154c0:	bl	10e48 <__errno_location@plt>
   154c4:	ldr	r4, [r0]
   154c8:	subs	r4, r4, #9
   154cc:	mvnne	r4, #0
   154d0:	mov	r0, r4
   154d4:	pop	{r4, r5, r6, pc}
   154d8:	cmp	r0, #0
   154dc:	bne	154e8 <__assert_fail@plt+0x45bc>
   154e0:	bl	10e48 <__errno_location@plt>
   154e4:	str	r4, [r0]
   154e8:	mvn	r4, #0
   154ec:	b	154d0 <__assert_fail@plt+0x45a4>
   154f0:	push	{r0, r1, r2, r4, r5, lr}
   154f4:	mov	r4, r0
   154f8:	bl	10e84 <fileno@plt>
   154fc:	cmp	r0, #0
   15500:	mov	r0, r4
   15504:	bge	15514 <__assert_fail@plt+0x45e8>
   15508:	add	sp, sp, #12
   1550c:	pop	{r4, r5, lr}
   15510:	b	10ea8 <fclose@plt>
   15514:	bl	10df4 <__freading@plt>
   15518:	cmp	r0, #0
   1551c:	bne	15558 <__assert_fail@plt+0x462c>
   15520:	mov	r0, r4
   15524:	bl	15598 <__assert_fail@plt+0x466c>
   15528:	cmp	r0, #0
   1552c:	bne	1558c <__assert_fail@plt+0x4660>
   15530:	mov	r5, #0
   15534:	mov	r0, r4
   15538:	bl	10ea8 <fclose@plt>
   1553c:	cmp	r5, #0
   15540:	beq	15550 <__assert_fail@plt+0x4624>
   15544:	bl	10e48 <__errno_location@plt>
   15548:	str	r5, [r0]
   1554c:	mvn	r0, #0
   15550:	add	sp, sp, #12
   15554:	pop	{r4, r5, pc}
   15558:	mov	r0, r4
   1555c:	bl	10e84 <fileno@plt>
   15560:	mov	r3, #1
   15564:	mov	r2, #0
   15568:	str	r3, [sp]
   1556c:	mov	r3, #0
   15570:	bl	10d94 <lseek64@plt>
   15574:	mvn	r3, #0
   15578:	mvn	r2, #0
   1557c:	cmp	r1, r3
   15580:	cmpeq	r0, r2
   15584:	bne	15520 <__assert_fail@plt+0x45f4>
   15588:	b	15530 <__assert_fail@plt+0x4604>
   1558c:	bl	10e48 <__errno_location@plt>
   15590:	ldr	r5, [r0]
   15594:	b	15534 <__assert_fail@plt+0x4608>
   15598:	push	{r0, r1, r4, lr}
   1559c:	subs	r4, r0, #0
   155a0:	bne	155b4 <__assert_fail@plt+0x4688>
   155a4:	mov	r0, r4
   155a8:	add	sp, sp, #8
   155ac:	pop	{r4, lr}
   155b0:	b	10cec <fflush@plt>
   155b4:	bl	10df4 <__freading@plt>
   155b8:	cmp	r0, #0
   155bc:	beq	155a4 <__assert_fail@plt+0x4678>
   155c0:	ldr	r3, [r4]
   155c4:	tst	r3, #256	; 0x100
   155c8:	beq	155a4 <__assert_fail@plt+0x4678>
   155cc:	mov	r3, #1
   155d0:	mov	r2, #0
   155d4:	mov	r0, r4
   155d8:	str	r3, [sp]
   155dc:	mov	r3, #0
   155e0:	bl	155e8 <__assert_fail@plt+0x46bc>
   155e4:	b	155a4 <__assert_fail@plt+0x4678>
   155e8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   155ec:	mov	r4, r0
   155f0:	ldmib	r0, {ip, lr}
   155f4:	ldr	r8, [sp, #32]
   155f8:	cmp	lr, ip
   155fc:	bne	1566c <__assert_fail@plt+0x4740>
   15600:	ldr	ip, [r0, #16]
   15604:	ldr	lr, [r0, #20]
   15608:	cmp	lr, ip
   1560c:	bne	1566c <__assert_fail@plt+0x4740>
   15610:	ldr	r5, [r0, #36]	; 0x24
   15614:	cmp	r5, #0
   15618:	bne	1566c <__assert_fail@plt+0x4740>
   1561c:	mov	r6, r2
   15620:	mov	r7, r3
   15624:	bl	10e84 <fileno@plt>
   15628:	mov	r2, r6
   1562c:	mov	r3, r7
   15630:	str	r8, [sp]
   15634:	bl	10d94 <lseek64@plt>
   15638:	mvn	r3, #0
   1563c:	mvn	r2, #0
   15640:	cmp	r1, r3
   15644:	cmpeq	r0, r2
   15648:	mvneq	r0, #0
   1564c:	beq	15664 <__assert_fail@plt+0x4738>
   15650:	ldr	r3, [r4]
   15654:	strd	r0, [r4, #80]	; 0x50
   15658:	mov	r0, r5
   1565c:	bic	r3, r3, #16
   15660:	str	r3, [r4]
   15664:	add	sp, sp, #8
   15668:	pop	{r4, r5, r6, r7, r8, pc}
   1566c:	mov	r0, r4
   15670:	str	r8, [sp, #32]
   15674:	add	sp, sp, #8
   15678:	pop	{r4, r5, r6, r7, r8, lr}
   1567c:	b	10eb4 <fseeko64@plt>
   15680:	b	15410 <__assert_fail@plt+0x44e4>
   15684:	cmp	r1, #0
   15688:	orreq	r1, r1, #1
   1568c:	b	1543c <__assert_fail@plt+0x4510>
   15690:	b	153bc <__assert_fail@plt+0x4490>
   15694:	cmp	r2, #0
   15698:	cmpne	r1, #0
   1569c:	moveq	r2, #1
   156a0:	moveq	r1, r2
   156a4:	b	1572c <__assert_fail@plt+0x4800>
   156a8:	push	{r4, lr}
   156ac:	mov	r0, #14
   156b0:	bl	10ee4 <nl_langinfo@plt>
   156b4:	cmp	r0, #0
   156b8:	beq	156d0 <__assert_fail@plt+0x47a4>
   156bc:	ldrb	r2, [r0]
   156c0:	ldr	r3, [pc, #16]	; 156d8 <__assert_fail@plt+0x47ac>
   156c4:	cmp	r2, #0
   156c8:	moveq	r0, r3
   156cc:	pop	{r4, pc}
   156d0:	ldr	r0, [pc]	; 156d8 <__assert_fail@plt+0x47ac>
   156d4:	pop	{r4, pc}
   156d8:	andeq	r7, r1, r3, lsr #32
   156dc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   156e0:	subs	r5, r0, #0
   156e4:	mov	r7, r2
   156e8:	addeq	r5, sp, #4
   156ec:	mov	r6, r1
   156f0:	mov	r0, r5
   156f4:	bl	10dc4 <mbrtowc@plt>
   156f8:	cmp	r7, #0
   156fc:	cmnne	r0, #3
   15700:	mov	r4, r0
   15704:	bls	15720 <__assert_fail@plt+0x47f4>
   15708:	mov	r0, #0
   1570c:	bl	15758 <__assert_fail@plt+0x482c>
   15710:	cmp	r0, #0
   15714:	ldrbeq	r3, [r6]
   15718:	moveq	r4, #1
   1571c:	streq	r3, [r5]
   15720:	mov	r0, r4
   15724:	add	sp, sp, #12
   15728:	pop	{r4, r5, r6, r7, pc}
   1572c:	umull	r2, r3, r1, r2
   15730:	cmp	r3, #0
   15734:	bne	15740 <__assert_fail@plt+0x4814>
   15738:	mov	r1, r2
   1573c:	b	1543c <__assert_fail@plt+0x4510>
   15740:	push	{r4, lr}
   15744:	bl	10e48 <__errno_location@plt>
   15748:	mov	r3, #12
   1574c:	str	r3, [r0]
   15750:	mov	r0, #0
   15754:	pop	{r4, pc}
   15758:	push	{lr}		; (str lr, [sp, #-4]!)
   1575c:	sub	sp, sp, #268	; 0x10c
   15760:	movw	r2, #257	; 0x101
   15764:	add	r1, sp, #4
   15768:	bl	157b4 <__assert_fail@plt+0x4888>
   1576c:	cmp	r0, #0
   15770:	movne	r0, #0
   15774:	bne	157a4 <__assert_fail@plt+0x4878>
   15778:	ldr	r1, [pc, #44]	; 157ac <__assert_fail@plt+0x4880>
   1577c:	add	r0, sp, #4
   15780:	bl	10cc8 <strcmp@plt>
   15784:	cmp	r0, #0
   15788:	beq	157a0 <__assert_fail@plt+0x4874>
   1578c:	ldr	r1, [pc, #28]	; 157b0 <__assert_fail@plt+0x4884>
   15790:	add	r0, sp, #4
   15794:	bl	10cc8 <strcmp@plt>
   15798:	adds	r0, r0, #0
   1579c:	movne	r0, #1
   157a0:	and	r0, r0, #1
   157a4:	add	sp, sp, #268	; 0x10c
   157a8:	pop	{pc}		; (ldr pc, [sp], #4)
   157ac:	andeq	r6, r1, sl, asr #14
   157b0:	andeq	r7, r1, r9, lsr #32
   157b4:	push	{r4, r5, r6, lr}
   157b8:	mov	r5, r1
   157bc:	mov	r1, #0
   157c0:	mov	r4, r2
   157c4:	bl	10ec0 <setlocale@plt>
   157c8:	subs	r6, r0, #0
   157cc:	bne	157e0 <__assert_fail@plt+0x48b4>
   157d0:	cmp	r4, #0
   157d4:	mov	r0, #22
   157d8:	strbne	r6, [r5]
   157dc:	pop	{r4, r5, r6, pc}
   157e0:	bl	10e30 <strlen@plt>
   157e4:	cmp	r4, r0
   157e8:	bls	15804 <__assert_fail@plt+0x48d8>
   157ec:	add	r2, r0, #1
   157f0:	mov	r1, r6
   157f4:	mov	r0, r5
   157f8:	bl	10d10 <memcpy@plt>
   157fc:	mov	r0, #0
   15800:	pop	{r4, r5, r6, pc}
   15804:	cmp	r4, #0
   15808:	beq	15828 <__assert_fail@plt+0x48fc>
   1580c:	sub	r4, r4, #1
   15810:	mov	r1, r6
   15814:	mov	r2, r4
   15818:	mov	r0, r5
   1581c:	bl	10d10 <memcpy@plt>
   15820:	mov	r3, #0
   15824:	strb	r3, [r5, r4]
   15828:	mov	r0, #34	; 0x22
   1582c:	pop	{r4, r5, r6, pc}
   15830:	mov	r1, #0
   15834:	b	10ec0 <setlocale@plt>
   15838:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1583c:	mov	r7, r0
   15840:	ldr	r6, [pc, #72]	; 15890 <__assert_fail@plt+0x4964>
   15844:	ldr	r5, [pc, #72]	; 15894 <__assert_fail@plt+0x4968>
   15848:	add	r6, pc, r6
   1584c:	add	r5, pc, r5
   15850:	sub	r6, r6, r5
   15854:	mov	r8, r1
   15858:	mov	r9, r2
   1585c:	bl	10c90 <calloc@plt-0x20>
   15860:	asrs	r6, r6, #2
   15864:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15868:	mov	r4, #0
   1586c:	add	r4, r4, #1
   15870:	ldr	r3, [r5], #4
   15874:	mov	r2, r9
   15878:	mov	r1, r8
   1587c:	mov	r0, r7
   15880:	blx	r3
   15884:	cmp	r6, r4
   15888:	bne	1586c <__assert_fail@plt+0x4940>
   1588c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15890:	andeq	r2, r1, r4, asr #13
   15894:			; <UNDEFINED> instruction: 0x000126bc
   15898:	bx	lr
   1589c:	ldr	r3, [pc, #12]	; 158b0 <__assert_fail@plt+0x4984>
   158a0:	mov	r1, #0
   158a4:	add	r3, pc, r3
   158a8:	ldr	r2, [r3]
   158ac:	b	10e60 <__cxa_atexit@plt>
   158b0:	andeq	r2, r1, r0, asr #16

Disassembly of section .fini:

000158b4 <.fini>:
   158b4:	push	{r3, lr}
   158b8:	pop	{r3, pc}
