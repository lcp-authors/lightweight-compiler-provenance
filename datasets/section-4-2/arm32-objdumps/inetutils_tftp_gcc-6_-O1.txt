
../repos/inetutils/src/tftp:     file format elf32-littlearm


Disassembly of section .init:

000111b8 <.init>:
   111b8:	push	{r3, lr}
   111bc:	bl	115b4 <__assert_fail@plt+0x4c>
   111c0:	pop	{r3, pc}

Disassembly of section .plt:

000111c4 <fdopen@plt-0x14>:
   111c4:	push	{lr}		; (str lr, [sp, #-4]!)
   111c8:	ldr	lr, [pc, #4]	; 111d4 <fdopen@plt-0x4>
   111cc:	add	lr, pc, lr
   111d0:	ldr	pc, [lr, #8]!
   111d4:	andeq	sl, r1, ip, lsr #28

000111d8 <fdopen@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3628]!	; 0xe2c

000111e4 <calloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3620]!	; 0xe24

000111f0 <fputs_unlocked@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3612]!	; 0xe1c

000111fc <raise@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3604]!	; 0xe14

00011208 <strcmp@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3596]!	; 0xe0c

00011214 <strtol@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3588]!	; 0xe04

00011220 <printf@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3580]!	; 0xdfc

0001122c <read@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3572]!	; 0xdf4

00011238 <longjmp@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3564]!	; 0xdec

00011244 <_setjmp@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3556]!	; 0xde4

00011250 <memmove@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3548]!	; 0xddc

0001125c <strchrnul@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3540]!	; 0xdd4

00011268 <free@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3532]!	; 0xdcc

00011274 <gai_strerror@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011280 <fgets@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3516]!	; 0xdbc

0001128c <strndup@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3508]!	; 0xdb4

00011298 <memcpy@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3500]!	; 0xdac

000112a4 <signal@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3492]!	; 0xda4

000112b0 <fwrite_unlocked@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112bc <sleep@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3476]!	; 0xd94

000112c8 <recvfrom@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112d4 <alarm@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3460]!	; 0xd84

000112e0 <realloc@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3452]!	; 0xd7c

000112ec <strcasecmp@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3444]!	; 0xd74

000112f8 <funlockfile@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3436]!	; 0xd6c

00011304 <perror@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3428]!	; 0xd64

00011310 <fwrite@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3420]!	; 0xd5c

0001131c <ioctl@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3412]!	; 0xd54

00011328 <strcpy@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3404]!	; 0xd4c

00011334 <gettimeofday@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3396]!	; 0xd44

00011340 <creat64@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3388]!	; 0xd3c

0001134c <error@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3380]!	; 0xd34

00011358 <open64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3372]!	; 0xd2c

00011364 <getenv@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3364]!	; 0xd24

00011370 <puts@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3356]!	; 0xd1c

0001137c <malloc@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3348]!	; 0xd14

00011388 <__libc_start_main@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3340]!	; 0xd0c

00011394 <strerror@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3332]!	; 0xd04

000113a0 <__ctype_tolower_loc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113ac <__gmon_start__@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113b8 <mempcpy@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3308]!	; 0xcec

000113c4 <__ctype_b_loc@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3300]!	; 0xce4

000113d0 <exit@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113dc <feof@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3284]!	; 0xcd4

000113e8 <strlen@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3276]!	; 0xccc

000113f4 <strchr@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3268]!	; 0xcc4

00011400 <fprintf@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3260]!	; 0xcbc

0001140c <__errno_location@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3252]!	; 0xcb4

00011418 <getservbyname@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3244]!	; 0xcac

00011424 <strerror_r@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3236]!	; 0xca4

00011430 <bind@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3228]!	; 0xc9c

0001143c <memset@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3220]!	; 0xc94

00011448 <strncpy@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3212]!	; 0xc8c

00011454 <write@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3204]!	; 0xc84

00011460 <fileno@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3196]!	; 0xc7c

0001146c <memchr@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3188]!	; 0xc74

00011478 <fclose@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3180]!	; 0xc6c

00011484 <fseeko64@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3172]!	; 0xc64

00011490 <sendto@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3164]!	; 0xc5c

0001149c <__overflow@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3156]!	; 0xc54

000114a8 <setlocale@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114b4 <strrchr@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3140]!	; 0xc44

000114c0 <vfprintf@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114cc <fputc@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3124]!	; 0xc34

000114d8 <putc@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3116]!	; 0xc2c

000114e4 <flockfile@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3108]!	; 0xc24

000114f0 <vsnprintf@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3100]!	; 0xc1c

000114fc <qsort@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #3092]!	; 0xc14

00011508 <freeaddrinfo@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #3084]!	; 0xc0c

00011514 <getaddrinfo@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #3076]!	; 0xc04

00011520 <socket@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #3068]!	; 0xbfc

0001152c <isatty@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #3060]!	; 0xbf4

00011538 <strncmp@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #3052]!	; 0xbec

00011544 <abort@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011550 <getc@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #3036]!	; 0xbdc

0001155c <close@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #3028]!	; 0xbd4

00011568 <__assert_fail@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #3020]!	; 0xbcc

Disassembly of section .text:

00011578 <argp_failure@@Base-0x4150>:
   11578:	mov	fp, #0
   1157c:	mov	lr, #0
   11580:	pop	{r1}		; (ldr r1, [sp], #4)
   11584:	mov	r2, sp
   11588:	push	{r2}		; (str r2, [sp, #-4]!)
   1158c:	push	{r0}		; (str r0, [sp, #-4]!)
   11590:	ldr	ip, [pc, #16]	; 115a8 <__assert_fail@plt+0x40>
   11594:	push	{ip}		; (str ip, [sp, #-4]!)
   11598:	ldr	r0, [pc, #12]	; 115ac <__assert_fail@plt+0x44>
   1159c:	ldr	r3, [pc, #12]	; 115b0 <__assert_fail@plt+0x48>
   115a0:	bl	11388 <__libc_start_main@plt>
   115a4:	bl	11544 <abort@plt>
   115a8:	andeq	sl, r1, r0, lsl #7
   115ac:	andeq	r2, r1, r0, lsl #10
   115b0:	andeq	sl, r1, r0, lsr #6
   115b4:	ldr	r3, [pc, #20]	; 115d0 <__assert_fail@plt+0x68>
   115b8:	ldr	r2, [pc, #20]	; 115d4 <__assert_fail@plt+0x6c>
   115bc:	add	r3, pc, r3
   115c0:	ldr	r2, [r3, r2]
   115c4:	cmp	r2, #0
   115c8:	bxeq	lr
   115cc:	b	113ac <__gmon_start__@plt>
   115d0:	andeq	sl, r1, ip, lsr sl
   115d4:	andeq	r0, r0, r0, asr #2
   115d8:	ldr	r3, [pc, #28]	; 115fc <__assert_fail@plt+0x94>
   115dc:	ldr	r0, [pc, #28]	; 11600 <__assert_fail@plt+0x98>
   115e0:	sub	r3, r3, r0
   115e4:	cmp	r3, #6
   115e8:	bxls	lr
   115ec:	ldr	r3, [pc, #16]	; 11604 <__assert_fail@plt+0x9c>
   115f0:	cmp	r3, #0
   115f4:	bxeq	lr
   115f8:	bx	r3
   115fc:	andeq	ip, r2, fp, asr #8
   11600:	andeq	ip, r2, r8, asr #8
   11604:	andeq	r0, r0, r0
   11608:	ldr	r1, [pc, #36]	; 11634 <__assert_fail@plt+0xcc>
   1160c:	ldr	r0, [pc, #36]	; 11638 <__assert_fail@plt+0xd0>
   11610:	sub	r1, r1, r0
   11614:	asr	r1, r1, #2
   11618:	add	r1, r1, r1, lsr #31
   1161c:	asrs	r1, r1, #1
   11620:	bxeq	lr
   11624:	ldr	r3, [pc, #16]	; 1163c <__assert_fail@plt+0xd4>
   11628:	cmp	r3, #0
   1162c:	bxeq	lr
   11630:	bx	r3
   11634:	andeq	ip, r2, r8, asr #8
   11638:	andeq	ip, r2, r8, asr #8
   1163c:	andeq	r0, r0, r0
   11640:	push	{r4, lr}
   11644:	ldr	r4, [pc, #24]	; 11664 <__assert_fail@plt+0xfc>
   11648:	ldrb	r3, [r4]
   1164c:	cmp	r3, #0
   11650:	popne	{r4, pc}
   11654:	bl	115d8 <__assert_fail@plt+0x70>
   11658:	mov	r3, #1
   1165c:	strb	r3, [r4]
   11660:	pop	{r4, pc}
   11664:	andeq	ip, r2, r0, ror #8
   11668:	ldr	r0, [pc, #40]	; 11698 <__assert_fail@plt+0x130>
   1166c:	ldr	r3, [r0]
   11670:	cmp	r3, #0
   11674:	bne	1167c <__assert_fail@plt+0x114>
   11678:	b	11608 <__assert_fail@plt+0xa0>
   1167c:	ldr	r3, [pc, #24]	; 1169c <__assert_fail@plt+0x134>
   11680:	cmp	r3, #0
   11684:	beq	11678 <__assert_fail@plt+0x110>
   11688:	push	{r4, lr}
   1168c:	blx	r3
   11690:	pop	{r4, lr}
   11694:	b	11608 <__assert_fail@plt+0xa0>
   11698:	andeq	fp, r2, ip, lsl #30
   1169c:	andeq	r0, r0, r0
   116a0:	push	{r4, lr}
   116a4:	mov	r0, #0
   116a8:	bl	113d0 <exit@plt>
   116ac:	cmp	r0, #0
   116b0:	beq	116d4 <__assert_fail@plt+0x16c>
   116b4:	cmp	r0, #118	; 0x76
   116b8:	bne	11730 <__assert_fail@plt+0x1c8>
   116bc:	ldr	r2, [pc, #116]	; 11738 <__assert_fail@plt+0x1d0>
   116c0:	ldr	r3, [r2]
   116c4:	add	r3, r3, #1
   116c8:	str	r3, [r2]
   116cc:	mov	r0, #0
   116d0:	bx	lr
   116d4:	push	{r4, lr}
   116d8:	mov	r0, r2
   116dc:	mov	r4, r1
   116e0:	ldr	r3, [r2, #20]
   116e4:	cmp	r3, #1
   116e8:	bls	1171c <__assert_fail@plt+0x1b4>
   116ec:	ldr	r2, [pc, #72]	; 1173c <__assert_fail@plt+0x1d4>
   116f0:	ldr	r3, [pc, #72]	; 11740 <__assert_fail@plt+0x1d8>
   116f4:	ldr	r1, [r3]
   116f8:	bl	16a88 <argp_state_help@@Base>
   116fc:	ldr	r3, [pc, #64]	; 11744 <__assert_fail@plt+0x1dc>
   11700:	ldr	r2, [r3]
   11704:	add	r1, r2, #1
   11708:	str	r1, [r3]
   1170c:	add	r3, r3, r2, lsl #2
   11710:	str	r4, [r3, #4]
   11714:	mov	r0, #0
   11718:	pop	{r4, pc}
   1171c:	ldr	r3, [pc, #32]	; 11744 <__assert_fail@plt+0x1dc>
   11720:	ldr	r3, [r3]
   11724:	cmp	r3, #2
   11728:	ble	116fc <__assert_fail@plt+0x194>
   1172c:	b	116ec <__assert_fail@plt+0x184>
   11730:	mov	r0, #7
   11734:	bx	lr
   11738:	andeq	ip, r2, r4, ror #8
   1173c:	andeq	r0, r0, r6, lsl #2
   11740:	andeq	ip, r2, r0, asr r4
   11744:	andeq	ip, r2, ip, asr #2
   11748:	rev16	r1, r1
   1174c:	strh	r1, [r0, #2]
   11750:	bx	lr
   11754:	push	{r4, lr}
   11758:	ldr	r1, [pc, #40]	; 11788 <__assert_fail@plt+0x220>
   1175c:	ldr	r2, [r1, #4]
   11760:	clz	r3, r2
   11764:	lsr	r3, r3, #5
   11768:	str	r3, [r1, #4]
   1176c:	ldr	r3, [pc, #24]	; 1178c <__assert_fail@plt+0x224>
   11770:	ldr	r1, [pc, #24]	; 11790 <__assert_fail@plt+0x228>
   11774:	cmp	r2, #0
   11778:	movne	r1, r3
   1177c:	ldr	r0, [pc, #16]	; 11794 <__assert_fail@plt+0x22c>
   11780:	bl	11220 <printf@plt>
   11784:	pop	{r4, pc}
   11788:	andeq	ip, r2, r4, ror #8
   1178c:	andeq	sl, r1, r0, ror #7
   11790:	andeq	sl, r1, r4, lsl #19
   11794:	andeq	sl, r1, r4, ror #7
   11798:	push	{r4, lr}
   1179c:	ldr	r1, [pc, #40]	; 117cc <__assert_fail@plt+0x264>
   117a0:	ldr	r2, [r1]
   117a4:	clz	r3, r2
   117a8:	lsr	r3, r3, #5
   117ac:	str	r3, [r1]
   117b0:	ldr	r3, [pc, #24]	; 117d0 <__assert_fail@plt+0x268>
   117b4:	ldr	r1, [pc, #24]	; 117d4 <__assert_fail@plt+0x26c>
   117b8:	cmp	r2, #0
   117bc:	movne	r1, r3
   117c0:	ldr	r0, [pc, #16]	; 117d8 <__assert_fail@plt+0x270>
   117c4:	bl	11220 <printf@plt>
   117c8:	pop	{r4, pc}
   117cc:	andeq	ip, r2, r4, ror #8
   117d0:	andeq	sl, r1, r0, ror #7
   117d4:	andeq	sl, r1, r4, lsl #19
   117d8:	strdeq	sl, [r1], -r8
   117dc:	push	{r4, lr}
   117e0:	vpush	{d8}
   117e4:	sub	sp, sp, #8
   117e8:	mov	r4, r1
   117ec:	ldr	r3, [pc, #212]	; 118c8 <__assert_fail@plt+0x360>
   117f0:	vldr	s15, [r3]
   117f4:	vcvt.f64.s32	d6, s15
   117f8:	vldr	d5, [pc, #184]	; 118b8 <__assert_fail@plt+0x350>
   117fc:	ldr	r3, [r3, #4]
   11800:	ldr	r2, [pc, #196]	; 118cc <__assert_fail@plt+0x364>
   11804:	smull	ip, r1, r2, r3
   11808:	asr	r3, r3, #31
   1180c:	rsb	r3, r3, r1, asr #13
   11810:	vmov	s15, r3
   11814:	vcvt.f64.s32	d7, s15
   11818:	vmla.f64	d7, d6, d5
   1181c:	vmov.f64	d6, d7
   11820:	ldr	r3, [pc, #168]	; 118d0 <__assert_fail@plt+0x368>
   11824:	vldr	s15, [r3]
   11828:	vcvt.f64.s32	d4, s15
   1182c:	ldr	r3, [r3, #4]
   11830:	smull	r1, r2, r2, r3
   11834:	asr	r3, r3, #31
   11838:	rsb	r3, r3, r2, asr #13
   1183c:	vmov	s14, r3
   11840:	vcvt.f64.s32	d7, s14
   11844:	vmla.f64	d7, d4, d5
   11848:	vsub.f64	d7, d6, d7
   1184c:	vdiv.f64	d8, d7, d5
   11850:	vstr	d8, [sp]
   11854:	mov	r2, r4
   11858:	mov	r1, r0
   1185c:	ldr	r0, [pc, #112]	; 118d4 <__assert_fail@plt+0x36c>
   11860:	bl	11220 <printf@plt>
   11864:	ldr	r3, [pc, #108]	; 118d8 <__assert_fail@plt+0x370>
   11868:	ldr	r3, [r3]
   1186c:	cmp	r3, #0
   11870:	bne	11890 <__assert_fail@plt+0x328>
   11874:	ldr	r3, [pc, #96]	; 118dc <__assert_fail@plt+0x374>
   11878:	ldr	r1, [r3]
   1187c:	mov	r0, #10
   11880:	bl	114d8 <putc@plt>
   11884:	add	sp, sp, #8
   11888:	vpop	{d8}
   1188c:	pop	{r4, pc}
   11890:	vmov	s15, r4
   11894:	vcvt.f64.u32	d7, s15
   11898:	vldr	d6, [pc, #32]	; 118c0 <__assert_fail@plt+0x358>
   1189c:	vmul.f64	d7, d7, d6
   118a0:	vdiv.f64	d6, d7, d8
   118a4:	vmov	r2, r3, d6
   118a8:	ldr	r0, [pc, #48]	; 118e0 <__assert_fail@plt+0x378>
   118ac:	bl	11220 <printf@plt>
   118b0:	b	11874 <__assert_fail@plt+0x30c>
   118b4:	nop			; (mov r0, r0)
   118b8:	andeq	r0, r0, r0
   118bc:	eormi	r0, r4, r0
   118c0:	andeq	r0, r0, r0
   118c4:	eormi	r0, r0, r0
   118c8:			; <UNDEFINED> instruction: 0x0002cab4
   118cc:	ldrbtne	fp, [r8], #1417	; 0x589
   118d0:	andeq	ip, r2, ip, lsr #21
   118d4:	andeq	sl, r1, ip, lsl #8
   118d8:	andeq	ip, r2, r4, ror #8
   118dc:	andeq	ip, r2, ip, asr r4
   118e0:	andeq	sl, r1, r8, lsr #8
   118e4:	push	{r4, lr}
   118e8:	ldr	r3, [pc, #116]	; 11964 <__assert_fail@plt+0x3fc>
   118ec:	ldr	r3, [r3, #8]
   118f0:	cmp	r3, #0
   118f4:	beq	11958 <__assert_fail@plt+0x3f0>
   118f8:	ldr	r3, [pc, #104]	; 11968 <__assert_fail@plt+0x400>
   118fc:	ldr	r1, [r3]
   11900:	ldr	r0, [pc, #100]	; 1196c <__assert_fail@plt+0x404>
   11904:	bl	11220 <printf@plt>
   11908:	ldr	r3, [pc, #84]	; 11964 <__assert_fail@plt+0x3fc>
   1190c:	ldr	r0, [r3]
   11910:	ldr	r1, [r3, #4]
   11914:	ldr	r2, [pc, #84]	; 11970 <__assert_fail@plt+0x408>
   11918:	ldr	r3, [pc, #84]	; 11974 <__assert_fail@plt+0x40c>
   1191c:	cmp	r1, #0
   11920:	moveq	r3, r2
   11924:	mov	r1, r2
   11928:	ldr	r2, [pc, #68]	; 11974 <__assert_fail@plt+0x40c>
   1192c:	cmp	r0, #0
   11930:	moveq	r2, r1
   11934:	ldr	r1, [pc, #60]	; 11978 <__assert_fail@plt+0x410>
   11938:	ldr	r0, [pc, #60]	; 1197c <__assert_fail@plt+0x414>
   1193c:	bl	11220 <printf@plt>
   11940:	ldr	r3, [pc, #56]	; 11980 <__assert_fail@plt+0x418>
   11944:	ldr	r2, [r3, #16]
   11948:	ldr	r1, [r3, #20]
   1194c:	ldr	r0, [pc, #48]	; 11984 <__assert_fail@plt+0x41c>
   11950:	bl	11220 <printf@plt>
   11954:	pop	{r4, pc}
   11958:	ldr	r0, [pc, #40]	; 11988 <__assert_fail@plt+0x420>
   1195c:	bl	11370 <puts@plt>
   11960:	b	11908 <__assert_fail@plt+0x3a0>
   11964:	andeq	ip, r2, r4, ror #8
   11968:	andeq	ip, r2, r0, asr #21
   1196c:	andeq	sl, r1, ip, lsr r4
   11970:	andeq	sl, r1, r0, ror #7
   11974:	andeq	sl, r1, r4, lsl #19
   11978:	andeq	ip, r2, r4, asr #21
   1197c:	andeq	sl, r1, r0, ror #8
   11980:	andeq	ip, r2, ip, asr #2
   11984:	andeq	sl, r1, r4, lsl #9
   11988:	andeq	sl, r1, r0, asr r4
   1198c:	push	{r4, r5, r6, r7, r8, lr}
   11990:	mov	r2, #0
   11994:	ldr	r3, [pc, #176]	; 11a4c <__assert_fail@plt+0x4e4>
   11998:	str	r2, [r3]
   1199c:	ldr	r3, [pc, #172]	; 11a50 <__assert_fail@plt+0x4e8>
   119a0:	ldrb	r3, [r3]
   119a4:	cmp	r3, r2
   119a8:	ldreq	r5, [pc, #164]	; 11a54 <__assert_fail@plt+0x4ec>
   119ac:	beq	119c8 <__assert_fail@plt+0x460>
   119b0:	bl	113c4 <__ctype_b_loc@plt>
   119b4:	ldr	r5, [pc, #152]	; 11a54 <__assert_fail@plt+0x4ec>
   119b8:	ldr	r3, [pc, #144]	; 11a50 <__assert_fail@plt+0x4e8>
   119bc:	ldr	r6, [pc, #136]	; 11a4c <__assert_fail@plt+0x4e4>
   119c0:	mov	r7, #0
   119c4:	b	119e8 <__assert_fail@plt+0x480>
   119c8:	mov	r3, #0
   119cc:	str	r3, [r5]
   119d0:	pop	{r4, r5, r6, r7, r8, pc}
   119d4:	add	r3, r2, #1
   119d8:	strb	r7, [r2]
   119dc:	ldrb	r2, [r2, #1]
   119e0:	cmp	r2, #0
   119e4:	beq	119c8 <__assert_fail@plt+0x460>
   119e8:	ldr	r4, [r0]
   119ec:	mov	r2, r3
   119f0:	ldrb	r1, [r3], #1
   119f4:	lsl	ip, r1, #1
   119f8:	ldrh	lr, [r4, ip]
   119fc:	tst	lr, #8192	; 0x2000
   11a00:	bne	119ec <__assert_fail@plt+0x484>
   11a04:	cmp	r1, #0
   11a08:	beq	119c8 <__assert_fail@plt+0x460>
   11a0c:	str	r2, [r5], #4
   11a10:	ldr	r3, [r6]
   11a14:	add	r3, r3, #1
   11a18:	str	r3, [r6]
   11a1c:	ldr	r1, [r0]
   11a20:	ldrh	r3, [r1, ip]
   11a24:	tst	r3, #8192	; 0x2000
   11a28:	bne	119d4 <__assert_fail@plt+0x46c>
   11a2c:	ldrb	r3, [r2, #1]!
   11a30:	cmp	r3, #0
   11a34:	beq	119c8 <__assert_fail@plt+0x460>
   11a38:	lsl	r3, r3, #1
   11a3c:	ldrh	r3, [r1, r3]
   11a40:	tst	r3, #8192	; 0x2000
   11a44:	beq	11a2c <__assert_fail@plt+0x4c4>
   11a48:	b	119d4 <__assert_fail@plt+0x46c>
   11a4c:			; <UNDEFINED> instruction: 0x0002cabc
   11a50:	andeq	ip, r2, r4, ror #21
   11a54:	ldrdeq	ip, [r2], -r0
   11a58:	push	{r4, lr}
   11a5c:	mov	r1, r0
   11a60:	ldr	r0, [pc, #32]	; 11a88 <__assert_fail@plt+0x520>
   11a64:	bl	11328 <strcpy@plt>
   11a68:	ldr	r3, [pc, #28]	; 11a8c <__assert_fail@plt+0x524>
   11a6c:	ldr	r3, [r3]
   11a70:	cmp	r3, #0
   11a74:	popeq	{r4, pc}
   11a78:	ldr	r1, [pc, #8]	; 11a88 <__assert_fail@plt+0x520>
   11a7c:	ldr	r0, [pc, #12]	; 11a90 <__assert_fail@plt+0x528>
   11a80:	bl	11220 <printf@plt>
   11a84:	pop	{r4, pc}
   11a88:	andeq	ip, r2, r4, asr #21
   11a8c:	andeq	ip, r2, r4, ror #8
   11a90:			; <UNDEFINED> instruction: 0x0001a4bc
   11a94:	push	{r4, lr}
   11a98:	ldr	r0, [pc, #4]	; 11aa4 <__assert_fail@plt+0x53c>
   11a9c:	bl	11a58 <__assert_fail@plt+0x4f0>
   11aa0:	pop	{r4, pc}
   11aa4:	andeq	sl, r1, ip, asr #9
   11aa8:	push	{r4, lr}
   11aac:	ldr	r0, [pc, #4]	; 11ab8 <__assert_fail@plt+0x550>
   11ab0:	bl	11a58 <__assert_fail@plt+0x4f0>
   11ab4:	pop	{r4, pc}
   11ab8:	ldrdeq	sl, [r1], -r4
   11abc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11ac0:	mov	r6, r0
   11ac4:	mov	r7, r1
   11ac8:	mov	r8, r2
   11acc:	mov	r9, r3
   11ad0:	bl	113e8 <strlen@plt>
   11ad4:	mov	r5, r0
   11ad8:	ldr	r4, [pc, #120]	; 11b58 <__assert_fail@plt+0x5f0>
   11adc:	mov	r1, r6
   11ae0:	mov	r0, r4
   11ae4:	bl	11328 <strcpy@plt>
   11ae8:	mov	r0, r4
   11aec:	bl	113e8 <strlen@plt>
   11af0:	ldr	r3, [pc, #100]	; 11b5c <__assert_fail@plt+0x5f4>
   11af4:	ldrh	r3, [r3]
   11af8:	strh	r3, [r4, r0]
   11afc:	mov	r1, r7
   11b00:	ldr	r0, [pc, #88]	; 11b60 <__assert_fail@plt+0x5f8>
   11b04:	bl	11220 <printf@plt>
   11b08:	add	r0, r5, #1
   11b0c:	ldr	r3, [pc, #80]	; 11b64 <__assert_fail@plt+0x5fc>
   11b10:	ldr	r2, [r3]
   11b14:	rsb	r1, r5, #199	; 0xc7
   11b18:	add	r0, r4, r0
   11b1c:	bl	11280 <fgets@plt>
   11b20:	cmp	r0, #0
   11b24:	beq	11b44 <__assert_fail@plt+0x5dc>
   11b28:	bl	1198c <__assert_fail@plt+0x424>
   11b2c:	ldr	r3, [pc, #52]	; 11b68 <__assert_fail@plt+0x600>
   11b30:	ldr	r3, [r3]
   11b34:	str	r3, [r8]
   11b38:	ldr	r3, [pc, #44]	; 11b6c <__assert_fail@plt+0x604>
   11b3c:	str	r3, [r9]
   11b40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b44:	ldr	r3, [r9]
   11b48:	str	r6, [r3]
   11b4c:	mov	r3, #1
   11b50:	str	r3, [r8]
   11b54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b58:	andeq	ip, r2, r4, ror #21
   11b5c:	andeq	sl, r1, r8, asr r5
   11b60:	andeq	sl, r1, r0, ror #9
   11b64:	andeq	ip, r2, r8, asr r4
   11b68:			; <UNDEFINED> instruction: 0x0002cabc
   11b6c:	ldrdeq	ip, [r2], -r0
   11b70:	push	{r4, r5, r6, r7, r8, r9, lr}
   11b74:	sub	sp, sp, #172	; 0xac
   11b78:	mov	r4, r0
   11b7c:	mov	r2, #32
   11b80:	mov	r1, #0
   11b84:	add	r0, sp, #8
   11b88:	bl	1143c <memset@plt>
   11b8c:	mov	r3, #2
   11b90:	str	r3, [sp, #16]
   11b94:	mov	r3, #194	; 0xc2
   11b98:	str	r3, [sp, #8]
   11b9c:	add	r3, sp, #4
   11ba0:	add	r2, sp, #8
   11ba4:	ldr	r1, [pc, #320]	; 11cec <__assert_fail@plt+0x784>
   11ba8:	mov	r0, r4
   11bac:	bl	11514 <getaddrinfo@plt>
   11bb0:	cmp	r0, #0
   11bb4:	bne	11bf8 <__assert_fail@plt+0x690>
   11bb8:	ldr	r3, [pc, #304]	; 11cf0 <__assert_fail@plt+0x788>
   11bbc:	ldr	r0, [r3, #24]
   11bc0:	cmp	r0, #0
   11bc4:	blt	11bd8 <__assert_fail@plt+0x670>
   11bc8:	bl	1155c <close@plt>
   11bcc:	mvn	r2, #0
   11bd0:	ldr	r3, [pc, #280]	; 11cf0 <__assert_fail@plt+0x788>
   11bd4:	str	r2, [r3, #24]
   11bd8:	ldr	r4, [sp, #4]
   11bdc:	cmp	r4, #0
   11be0:	beq	11c64 <__assert_fail@plt+0x6fc>
   11be4:	ldr	r6, [pc, #260]	; 11cf0 <__assert_fail@plt+0x788>
   11be8:	mov	r8, #128	; 0x80
   11bec:	mov	r7, #0
   11bf0:	mvn	r9, #0
   11bf4:	b	11c8c <__assert_fail@plt+0x724>
   11bf8:	ldr	r3, [pc, #244]	; 11cf4 <__assert_fail@plt+0x78c>
   11bfc:	ldr	r5, [r3]
   11c00:	bl	11274 <gai_strerror@plt>
   11c04:	mov	r3, r0
   11c08:	mov	r2, r4
   11c0c:	ldr	r1, [pc, #228]	; 11cf8 <__assert_fail@plt+0x790>
   11c10:	mov	r0, r5
   11c14:	bl	11400 <fprintf@plt>
   11c18:	mvn	r0, #0
   11c1c:	b	11c78 <__assert_fail@plt+0x710>
   11c20:	ldr	r2, [r4, #16]
   11c24:	ldr	r5, [pc, #208]	; 11cfc <__assert_fail@plt+0x794>
   11c28:	str	r2, [r5, #12]
   11c2c:	ldr	r1, [r4, #20]
   11c30:	add	r0, r5, #16
   11c34:	bl	11298 <memcpy@plt>
   11c38:	mov	r3, #1
   11c3c:	str	r3, [r5, #8]
   11c40:	ldr	r3, [pc, #184]	; 11d00 <__assert_fail@plt+0x798>
   11c44:	ldr	r0, [r3]
   11c48:	bl	17e64 <argp_parse@@Base+0xbf4>
   11c4c:	ldr	r0, [r4, #24]
   11c50:	cmp	r0, #0
   11c54:	ldreq	r0, [pc, #168]	; 11d04 <__assert_fail@plt+0x79c>
   11c58:	bl	18a04 <argp_parse@@Base+0x1794>
   11c5c:	ldr	r3, [pc, #156]	; 11d00 <__assert_fail@plt+0x798>
   11c60:	str	r0, [r3]
   11c64:	ldr	r0, [sp, #4]
   11c68:	bl	11508 <freeaddrinfo@plt>
   11c6c:	cmp	r4, #0
   11c70:	movne	r0, #0
   11c74:	mvneq	r0, #0
   11c78:	add	sp, sp, #172	; 0xac
   11c7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11c80:	ldr	r4, [r4, #28]
   11c84:	cmp	r4, #0
   11c88:	beq	11c64 <__assert_fail@plt+0x6fc>
   11c8c:	ldr	r2, [r4, #12]
   11c90:	ldr	r1, [r4, #8]
   11c94:	ldr	r0, [r4, #4]
   11c98:	bl	11520 <socket@plt>
   11c9c:	mov	r5, r0
   11ca0:	str	r0, [r6, #24]
   11ca4:	cmp	r0, #0
   11ca8:	blt	11c80 <__assert_fail@plt+0x718>
   11cac:	mov	r2, r8
   11cb0:	mov	r1, r7
   11cb4:	add	r0, sp, #40	; 0x28
   11cb8:	bl	1143c <memset@plt>
   11cbc:	ldr	r3, [r4, #4]
   11cc0:	strh	r3, [sp, #40]	; 0x28
   11cc4:	ldr	r2, [r4, #16]
   11cc8:	add	r1, sp, #40	; 0x28
   11ccc:	mov	r0, r5
   11cd0:	bl	11430 <bind@plt>
   11cd4:	cmp	r0, #0
   11cd8:	beq	11c20 <__assert_fail@plt+0x6b8>
   11cdc:	mov	r0, r5
   11ce0:	bl	1155c <close@plt>
   11ce4:	str	r9, [r6, #24]
   11ce8:	b	11c80 <__assert_fail@plt+0x718>
   11cec:	andeq	sl, r1, r4, ror #9
   11cf0:	andeq	ip, r2, ip, asr #2
   11cf4:	andeq	ip, r2, r0, asr r4
   11cf8:	andeq	sl, r1, ip, ror #9
   11cfc:	andeq	ip, r2, r4, ror #8
   11d00:	andeq	ip, r2, r0, asr #21
   11d04:	strdeq	sl, [r1], -ip
   11d08:	push	{lr}		; (str lr, [sp, #-4]!)
   11d0c:	sub	sp, sp, #12
   11d10:	str	r0, [sp, #4]
   11d14:	str	r1, [sp]
   11d18:	cmp	r0, #1
   11d1c:	ble	11d44 <__assert_fail@plt+0x7dc>
   11d20:	ldr	r3, [sp, #4]
   11d24:	cmp	r3, #2
   11d28:	beq	11d5c <__assert_fail@plt+0x7f4>
   11d2c:	ldr	r3, [sp]
   11d30:	ldr	r1, [r3]
   11d34:	ldr	r0, [pc, #88]	; 11d94 <__assert_fail@plt+0x82c>
   11d38:	bl	11220 <printf@plt>
   11d3c:	add	sp, sp, #12
   11d40:	pop	{pc}		; (ldr pc, [sp], #4)
   11d44:	mov	r3, sp
   11d48:	add	r2, sp, #4
   11d4c:	ldr	r1, [pc, #68]	; 11d98 <__assert_fail@plt+0x830>
   11d50:	ldr	r0, [pc, #68]	; 11d9c <__assert_fail@plt+0x834>
   11d54:	bl	11abc <__assert_fail@plt+0x554>
   11d58:	b	11d20 <__assert_fail@plt+0x7b8>
   11d5c:	mov	r2, #10
   11d60:	mov	r1, #0
   11d64:	ldr	r3, [sp]
   11d68:	ldr	r0, [r3, #4]
   11d6c:	bl	11214 <strtol@plt>
   11d70:	cmp	r0, #0
   11d74:	ldrge	r3, [pc, #36]	; 11da0 <__assert_fail@plt+0x838>
   11d78:	strge	r0, [r3, #20]
   11d7c:	bge	11d3c <__assert_fail@plt+0x7d4>
   11d80:	ldr	r3, [sp]
   11d84:	ldr	r1, [r3, #4]
   11d88:	ldr	r0, [pc, #20]	; 11da4 <__assert_fail@plt+0x83c>
   11d8c:	bl	11220 <printf@plt>
   11d90:	b	11d3c <__assert_fail@plt+0x7d4>
   11d94:	andeq	sl, r1, r0, lsr #10
   11d98:	andeq	sl, r1, r4, lsl #10
   11d9c:	andeq	sl, r1, r0, lsl r5
   11da0:	andeq	ip, r2, ip, asr #2
   11da4:	andeq	sl, r1, r4, lsr r5
   11da8:	push	{lr}		; (str lr, [sp, #-4]!)
   11dac:	sub	sp, sp, #12
   11db0:	str	r0, [sp, #4]
   11db4:	str	r1, [sp]
   11db8:	cmp	r0, #1
   11dbc:	ble	11de4 <__assert_fail@plt+0x87c>
   11dc0:	ldr	r3, [sp, #4]
   11dc4:	cmp	r3, #2
   11dc8:	beq	11dfc <__assert_fail@plt+0x894>
   11dcc:	ldr	r3, [sp]
   11dd0:	ldr	r1, [r3]
   11dd4:	ldr	r0, [pc, #88]	; 11e34 <__assert_fail@plt+0x8cc>
   11dd8:	bl	11220 <printf@plt>
   11ddc:	add	sp, sp, #12
   11de0:	pop	{pc}		; (ldr pc, [sp], #4)
   11de4:	mov	r3, sp
   11de8:	add	r2, sp, #4
   11dec:	ldr	r1, [pc, #68]	; 11e38 <__assert_fail@plt+0x8d0>
   11df0:	ldr	r0, [pc, #68]	; 11e3c <__assert_fail@plt+0x8d4>
   11df4:	bl	11abc <__assert_fail@plt+0x554>
   11df8:	b	11dc0 <__assert_fail@plt+0x858>
   11dfc:	mov	r2, #10
   11e00:	mov	r1, #0
   11e04:	ldr	r3, [sp]
   11e08:	ldr	r0, [r3, #4]
   11e0c:	bl	11214 <strtol@plt>
   11e10:	cmp	r0, #0
   11e14:	ldrge	r3, [pc, #36]	; 11e40 <__assert_fail@plt+0x8d8>
   11e18:	strge	r0, [r3, #16]
   11e1c:	bge	11ddc <__assert_fail@plt+0x874>
   11e20:	ldr	r3, [sp]
   11e24:	ldr	r1, [r3, #4]
   11e28:	ldr	r0, [pc, #20]	; 11e44 <__assert_fail@plt+0x8dc>
   11e2c:	bl	11220 <printf@plt>
   11e30:	b	11ddc <__assert_fail@plt+0x874>
   11e34:	andeq	sl, r1, r0, lsr #10
   11e38:	andeq	sl, r1, r4, lsl #10
   11e3c:	andeq	sl, r1, r4, asr #10
   11e40:	andeq	ip, r2, ip, asr #2
   11e44:	andeq	sl, r1, r4, lsr r5
   11e48:	push	{r4, lr}
   11e4c:	sub	sp, sp, #8
   11e50:	str	r0, [sp, #4]
   11e54:	str	r1, [sp]
   11e58:	cmp	r0, #1
   11e5c:	ble	11e88 <__assert_fail@plt+0x920>
   11e60:	ldr	r3, [sp, #4]
   11e64:	sub	r3, r3, #2
   11e68:	cmp	r3, #1
   11e6c:	bls	11ea0 <__assert_fail@plt+0x938>
   11e70:	ldr	r3, [sp]
   11e74:	ldr	r1, [r3]
   11e78:	ldr	r0, [pc, #208]	; 11f50 <__assert_fail@plt+0x9e8>
   11e7c:	bl	11220 <printf@plt>
   11e80:	add	sp, sp, #8
   11e84:	pop	{r4, pc}
   11e88:	mov	r3, sp
   11e8c:	add	r2, sp, #4
   11e90:	ldr	r1, [pc, #188]	; 11f54 <__assert_fail@plt+0x9ec>
   11e94:	ldr	r0, [pc, #188]	; 11f58 <__assert_fail@plt+0x9f0>
   11e98:	bl	11abc <__assert_fail@plt+0x554>
   11e9c:	b	11e60 <__assert_fail@plt+0x8f8>
   11ea0:	ldr	r3, [sp]
   11ea4:	ldr	r0, [r3, #4]
   11ea8:	bl	11b70 <__assert_fail@plt+0x608>
   11eac:	cmn	r0, #1
   11eb0:	beq	11e80 <__assert_fail@plt+0x918>
   11eb4:	ldr	r3, [sp, #4]
   11eb8:	cmp	r3, #3
   11ebc:	beq	11ef8 <__assert_fail@plt+0x990>
   11ec0:	ldr	r1, [pc, #148]	; 11f5c <__assert_fail@plt+0x9f4>
   11ec4:	ldr	r0, [pc, #148]	; 11f60 <__assert_fail@plt+0x9f8>
   11ec8:	bl	11418 <getservbyname@plt>
   11ecc:	subs	r4, r0, #0
   11ed0:	beq	11f3c <__assert_fail@plt+0x9d4>
   11ed4:	ldr	r3, [r4, #8]
   11ed8:	rev16	r3, r3
   11edc:	uxth	r3, r3
   11ee0:	ldr	r2, [pc, #124]	; 11f64 <__assert_fail@plt+0x9fc>
   11ee4:	str	r3, [r2, #144]	; 0x90
   11ee8:	mov	r2, #1
   11eec:	ldr	r3, [pc, #112]	; 11f64 <__assert_fail@plt+0x9fc>
   11ef0:	str	r2, [r3, #8]
   11ef4:	b	11e80 <__assert_fail@plt+0x918>
   11ef8:	mov	r2, #10
   11efc:	mov	r1, #0
   11f00:	ldr	r3, [sp]
   11f04:	ldr	r0, [r3, #8]
   11f08:	bl	11214 <strtol@plt>
   11f0c:	ldr	r3, [pc, #80]	; 11f64 <__assert_fail@plt+0x9fc>
   11f10:	str	r0, [r3, #144]	; 0x90
   11f14:	cmp	r0, #0
   11f18:	bgt	11ee8 <__assert_fail@plt+0x980>
   11f1c:	ldr	r3, [sp]
   11f20:	ldr	r1, [r3, #8]
   11f24:	ldr	r0, [pc, #60]	; 11f68 <__assert_fail@plt+0xa00>
   11f28:	bl	11220 <printf@plt>
   11f2c:	mov	r2, #0
   11f30:	ldr	r3, [pc, #44]	; 11f64 <__assert_fail@plt+0x9fc>
   11f34:	str	r2, [r3, #8]
   11f38:	b	11e80 <__assert_fail@plt+0x918>
   11f3c:	ldr	r2, [pc, #40]	; 11f6c <__assert_fail@plt+0xa04>
   11f40:	mov	r1, #0
   11f44:	mov	r0, #1
   11f48:	bl	1134c <error@plt>
   11f4c:	b	11ed4 <__assert_fail@plt+0x96c>
   11f50:	andeq	sl, r1, r4, ror #10
   11f54:	andeq	sl, r1, r4, asr r5
   11f58:	andeq	sl, r1, ip, asr r5
   11f5c:	muleq	r1, r8, r5
   11f60:	andeq	sl, r1, r4, ror #9
   11f64:	andeq	ip, r2, r4, ror #8
   11f68:	andeq	sl, r1, r0, lsl #11
   11f6c:	muleq	r1, ip, r5
   11f70:	push	{r4, r5, r6, r7, r8, lr}
   11f74:	cmp	r0, #1
   11f78:	ble	11fe4 <__assert_fail@plt+0xa7c>
   11f7c:	mov	r8, r1
   11f80:	cmp	r0, #2
   11f84:	beq	11ff4 <__assert_fail@plt+0xa8c>
   11f88:	ldr	r1, [r8]
   11f8c:	ldr	r0, [pc, #192]	; 12054 <__assert_fail@plt+0xaec>
   11f90:	bl	11220 <printf@plt>
   11f94:	ldr	r3, [pc, #188]	; 12058 <__assert_fail@plt+0xaf0>
   11f98:	ldr	r2, [r3, #28]
   11f9c:	cmp	r2, #0
   11fa0:	beq	11fd8 <__assert_fail@plt+0xa70>
   11fa4:	add	r5, r3, #28
   11fa8:	ldr	r4, [pc, #172]	; 1205c <__assert_fail@plt+0xaf4>
   11fac:	ldr	r7, [pc, #172]	; 12060 <__assert_fail@plt+0xaf8>
   11fb0:	ldr	r6, [pc, #172]	; 12064 <__assert_fail@plt+0xafc>
   11fb4:	mov	r1, r4
   11fb8:	mov	r0, r7
   11fbc:	bl	11220 <printf@plt>
   11fc0:	ldrb	r3, [r4]
   11fc4:	cmp	r3, #32
   11fc8:	moveq	r4, r6
   11fcc:	ldr	r2, [r5, #8]!
   11fd0:	cmp	r2, #0
   11fd4:	bne	11fb4 <__assert_fail@plt+0xa4c>
   11fd8:	ldr	r0, [pc, #136]	; 12068 <__assert_fail@plt+0xb00>
   11fdc:	bl	11370 <puts@plt>
   11fe0:	pop	{r4, r5, r6, r7, r8, pc}
   11fe4:	ldr	r1, [pc, #128]	; 1206c <__assert_fail@plt+0xb04>
   11fe8:	ldr	r0, [pc, #128]	; 12070 <__assert_fail@plt+0xb08>
   11fec:	bl	11220 <printf@plt>
   11ff0:	pop	{r4, r5, r6, r7, r8, pc}
   11ff4:	ldr	r3, [pc, #92]	; 12058 <__assert_fail@plt+0xaf0>
   11ff8:	ldr	r4, [r3, #28]
   11ffc:	cmp	r4, #0
   12000:	beq	12030 <__assert_fail@plt+0xac8>
   12004:	ldr	r6, [r1, #4]
   12008:	add	r5, r3, #28
   1200c:	mov	r7, r5
   12010:	mov	r1, r4
   12014:	mov	r0, r6
   12018:	bl	11208 <strcmp@plt>
   1201c:	cmp	r0, #0
   12020:	beq	12040 <__assert_fail@plt+0xad8>
   12024:	ldr	r4, [r5, #8]!
   12028:	cmp	r4, #0
   1202c:	bne	1200c <__assert_fail@plt+0xaa4>
   12030:	ldr	r1, [r8, #4]
   12034:	ldr	r0, [pc, #56]	; 12074 <__assert_fail@plt+0xb0c>
   12038:	bl	11220 <printf@plt>
   1203c:	b	11f88 <__assert_fail@plt+0xa20>
   12040:	cmp	r4, #0
   12044:	beq	12030 <__assert_fail@plt+0xac8>
   12048:	ldr	r0, [r5, #4]
   1204c:	bl	11a58 <__assert_fail@plt+0x4f0>
   12050:	pop	{r4, r5, r6, r7, r8, pc}
   12054:	strdeq	sl, [r1], -r4
   12058:	andeq	ip, r2, ip, asr #2
   1205c:	andeq	sl, r1, r8, asr r5
   12060:	andeq	sl, r1, r0, lsl #12
   12064:			; <UNDEFINED> instruction: 0x0001a5b8
   12068:	andeq	sl, r1, r8, lsl #12
   1206c:	andeq	ip, r2, r4, asr #21
   12070:			; <UNDEFINED> instruction: 0x0001a5bc
   12074:	andeq	sl, r1, r0, ror #11
   12078:	push	{r4, r5, r6, lr}
   1207c:	mov	r5, r1
   12080:	mov	r6, r2
   12084:	ldrb	r4, [r1]
   12088:	ldrb	r3, [r1, #1]
   1208c:	orr	r4, r4, r3, lsl #8
   12090:	rev16	r4, r4
   12094:	uxth	r4, r4
   12098:	sub	r3, r4, #1
   1209c:	uxth	r3, r3
   120a0:	cmp	r3, #4
   120a4:	movhi	r2, r4
   120a8:	movhi	r1, r0
   120ac:	ldrhi	r0, [pc, #192]	; 12174 <__assert_fail@plt+0xc0c>
   120b0:	ldrls	r3, [pc, #192]	; 12178 <__assert_fail@plt+0xc10>
   120b4:	ldrls	r2, [r3, r4, lsl #2]
   120b8:	movls	r1, r0
   120bc:	ldrls	r0, [pc, #184]	; 1217c <__assert_fail@plt+0xc14>
   120c0:	bl	11220 <printf@plt>
   120c4:	sub	r4, r4, #1
   120c8:	cmp	r4, #4
   120cc:	ldrls	pc, [pc, r4, lsl #2]
   120d0:	b	12170 <__assert_fail@plt+0xc08>
   120d4:	andeq	r2, r1, r8, ror #1
   120d8:	andeq	r2, r1, r8, ror #1
   120dc:	andeq	r2, r1, ip, lsl #2
   120e0:	andeq	r2, r1, r0, lsr r1
   120e4:	andeq	r2, r1, r0, asr r1
   120e8:	add	r5, r5, #2
   120ec:	mov	r1, #0
   120f0:	mov	r0, r5
   120f4:	bl	113f4 <strchr@plt>
   120f8:	add	r2, r0, #1
   120fc:	mov	r1, r5
   12100:	ldr	r0, [pc, #120]	; 12180 <__assert_fail@plt+0xc18>
   12104:	bl	11220 <printf@plt>
   12108:	pop	{r4, r5, r6, pc}
   1210c:	ldrb	r1, [r5, #2]
   12110:	ldrb	r3, [r5, #3]
   12114:	orr	r1, r1, r3, lsl #8
   12118:	rev16	r1, r1
   1211c:	sub	r2, r6, #4
   12120:	uxth	r1, r1
   12124:	ldr	r0, [pc, #88]	; 12184 <__assert_fail@plt+0xc1c>
   12128:	bl	11220 <printf@plt>
   1212c:	pop	{r4, r5, r6, pc}
   12130:	ldrb	r1, [r5, #2]
   12134:	ldrb	r3, [r5, #3]
   12138:	orr	r1, r1, r3, lsl #8
   1213c:	rev16	r1, r1
   12140:	uxth	r1, r1
   12144:	ldr	r0, [pc, #60]	; 12188 <__assert_fail@plt+0xc20>
   12148:	bl	11220 <printf@plt>
   1214c:	pop	{r4, r5, r6, pc}
   12150:	ldrb	r1, [r5, #2]
   12154:	ldrb	r3, [r5, #3]
   12158:	orr	r1, r1, r3, lsl #8
   1215c:	rev16	r1, r1
   12160:	add	r2, r5, #4
   12164:	uxth	r1, r1
   12168:	ldr	r0, [pc, #28]	; 1218c <__assert_fail@plt+0xc24>
   1216c:	bl	11220 <printf@plt>
   12170:	pop	{r4, r5, r6, pc}
   12174:	andeq	sl, r1, ip, lsl #12
   12178:	muleq	r1, r0, r3
   1217c:	andeq	sl, r1, ip, lsl r6
   12180:	andeq	sl, r1, r4, lsr #12
   12184:	andeq	sl, r1, r8, lsr r6
   12188:	andeq	sl, r1, r0, asr r6
   1218c:	andeq	sl, r1, ip, asr r6
   12190:	push	{r4, lr}
   12194:	mov	r1, #1
   12198:	mov	r0, #14
   1219c:	bl	112a4 <signal@plt>
   121a0:	mov	r0, #0
   121a4:	bl	112d4 <alarm@plt>
   121a8:	mvn	r1, #0
   121ac:	ldr	r0, [pc]	; 121b4 <__assert_fail@plt+0xc4c>
   121b0:	bl	11238 <longjmp@plt>
   121b4:	andeq	ip, r2, r0, lsr #18
   121b8:	push	{r4, lr}
   121bc:	ldr	r1, [pc, #60]	; 12200 <__assert_fail@plt+0xc98>
   121c0:	ldr	r2, [pc, #60]	; 12204 <__assert_fail@plt+0xc9c>
   121c4:	ldr	r3, [r1]
   121c8:	ldr	r0, [r2, #20]
   121cc:	add	r3, r3, r0
   121d0:	str	r3, [r1]
   121d4:	ldr	r2, [r2, #16]
   121d8:	cmp	r3, r2
   121dc:	blt	121f4 <__assert_fail@plt+0xc8c>
   121e0:	ldr	r0, [pc, #32]	; 12208 <__assert_fail@plt+0xca0>
   121e4:	bl	11370 <puts@plt>
   121e8:	mvn	r1, #0
   121ec:	ldr	r0, [pc, #24]	; 1220c <__assert_fail@plt+0xca4>
   121f0:	bl	11238 <longjmp@plt>
   121f4:	mov	r1, #1
   121f8:	ldr	r0, [pc, #16]	; 12210 <__assert_fail@plt+0xca8>
   121fc:	bl	11238 <longjmp@plt>
   12200:	andeq	ip, r2, r8, lsr #21
   12204:	andeq	ip, r2, ip, asr #2
   12208:	andeq	sl, r1, r0, ror r6
   1220c:	andeq	ip, r2, r0, lsr #18
   12210:	andeq	ip, r2, r8, asr #14
   12214:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12218:	mov	r8, r1
   1221c:	mov	r5, r2
   12220:	mov	r6, r3
   12224:	rev16	r0, r0
   12228:	uxth	r0, r0
   1222c:	mov	r7, #0
   12230:	strb	r0, [r2]
   12234:	lsr	r0, r0, #8
   12238:	strb	r0, [r2, #1]
   1223c:	add	r9, r2, #2
   12240:	mov	r0, r1
   12244:	bl	113e8 <strlen@plt>
   12248:	mov	r4, r0
   1224c:	ldr	sl, [pc, #76]	; 122a0 <__assert_fail@plt+0xd38>
   12250:	mov	r2, sl
   12254:	mov	r1, r8
   12258:	mov	r0, r9
   1225c:	bl	11448 <strncpy@plt>
   12260:	cmp	r4, sl
   12264:	movcc	r2, r4
   12268:	movcs	r2, sl
   1226c:	add	r4, r9, r2
   12270:	add	r4, r4, #1
   12274:	strb	r7, [r9, r2]
   12278:	mov	r1, r6
   1227c:	mov	r0, r4
   12280:	bl	11328 <strcpy@plt>
   12284:	mov	r0, r6
   12288:	bl	113e8 <strlen@plt>
   1228c:	add	r3, r4, r0
   12290:	strb	r7, [r4, r0]
   12294:	add	r0, r3, #1
   12298:	sub	r0, r0, r5
   1229c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122a0:	strdeq	r0, [r0], -r6
   122a4:	push	{r4, r5, lr}
   122a8:	sub	sp, sp, #12
   122ac:	ldr	r2, [pc, #272]	; 123c4 <__assert_fail@plt+0xe5c>
   122b0:	mov	r3, #0
   122b4:	strb	r3, [r2]
   122b8:	mov	r3, #5
   122bc:	strb	r3, [r2, #1]
   122c0:	rev16	r3, r0
   122c4:	uxth	r3, r3
   122c8:	strb	r3, [r2, #2]
   122cc:	lsr	r3, r3, #8
   122d0:	strb	r3, [r2, #3]
   122d4:	ldr	r3, [pc, #236]	; 123c8 <__assert_fail@plt+0xe60>
   122d8:	ldr	r3, [r3, #76]	; 0x4c
   122dc:	cmp	r0, r3
   122e0:	movne	r2, #0
   122e4:	moveq	r2, #1
   122e8:	orrs	r2, r2, r3, lsr #31
   122ec:	bne	12388 <__assert_fail@plt+0xe20>
   122f0:	ldr	r4, [pc, #212]	; 123cc <__assert_fail@plt+0xe64>
   122f4:	ldr	r3, [r4, #8]!
   122f8:	cmp	r0, r3
   122fc:	movne	r2, #0
   12300:	moveq	r2, #1
   12304:	orrs	r2, r2, r3, lsr #31
   12308:	beq	122f4 <__assert_fail@plt+0xd8c>
   1230c:	cmp	r3, #0
   12310:	blt	12390 <__assert_fail@plt+0xe28>
   12314:	ldr	r5, [r4, #4]
   12318:	mov	r0, r5
   1231c:	bl	113e8 <strlen@plt>
   12320:	add	r4, r0, #4
   12324:	add	r2, r0, #1
   12328:	mov	r1, r5
   1232c:	ldr	r0, [pc, #156]	; 123d0 <__assert_fail@plt+0xe68>
   12330:	bl	11298 <memcpy@plt>
   12334:	ldr	r3, [pc, #152]	; 123d4 <__assert_fail@plt+0xe6c>
   12338:	ldr	r3, [r3, #4]
   1233c:	cmp	r3, #0
   12340:	bne	123b0 <__assert_fail@plt+0xe48>
   12344:	ldr	r3, [pc, #124]	; 123c8 <__assert_fail@plt+0xe60>
   12348:	ldr	r0, [r3, #24]
   1234c:	ldr	r3, [pc, #128]	; 123d4 <__assert_fail@plt+0xe6c>
   12350:	add	r2, r3, #16
   12354:	ldr	r3, [r3, #12]
   12358:	str	r3, [sp, #4]
   1235c:	str	r2, [sp]
   12360:	mov	r3, #0
   12364:	mov	r2, r4
   12368:	ldr	r1, [pc, #84]	; 123c4 <__assert_fail@plt+0xe5c>
   1236c:	bl	11490 <sendto@plt>
   12370:	cmp	r4, r0
   12374:	beq	12380 <__assert_fail@plt+0xe18>
   12378:	ldr	r0, [pc, #88]	; 123d8 <__assert_fail@plt+0xe70>
   1237c:	bl	11304 <perror@plt>
   12380:	add	sp, sp, #12
   12384:	pop	{r4, r5, pc}
   12388:	ldr	r4, [pc, #60]	; 123cc <__assert_fail@plt+0xe64>
   1238c:	b	1230c <__assert_fail@plt+0xda4>
   12390:	sub	r0, r0, #100	; 0x64
   12394:	bl	11394 <strerror@plt>
   12398:	str	r0, [r4, #4]
   1239c:	ldr	r3, [pc, #32]	; 123c4 <__assert_fail@plt+0xe5c>
   123a0:	mov	r2, #0
   123a4:	strb	r2, [r3, #2]
   123a8:	strb	r2, [r3, #3]
   123ac:	b	12314 <__assert_fail@plt+0xdac>
   123b0:	mov	r2, r4
   123b4:	ldr	r1, [pc, #8]	; 123c4 <__assert_fail@plt+0xe5c>
   123b8:	ldr	r0, [pc, #28]	; 123dc <__assert_fail@plt+0xe74>
   123bc:	bl	12078 <__assert_fail@plt+0xb10>
   123c0:	b	12344 <__assert_fail@plt+0xddc>
   123c4:	andeq	ip, r2, r0, asr #10
   123c8:	andeq	ip, r2, ip, asr #2
   123cc:	muleq	r2, r8, r1
   123d0:	andeq	ip, r2, r4, asr #10
   123d4:	andeq	ip, r2, r4, ror #8
   123d8:	andeq	sl, r1, ip, lsl #13
   123dc:	andeq	sl, r1, r4, lsl #13
   123e0:	push	{r4, r5, r6, lr}
   123e4:	mov	r4, r0
   123e8:	ldrb	r3, [r0]
   123ec:	cmp	r3, #0
   123f0:	beq	12434 <__assert_fail@plt+0xecc>
   123f4:	mov	r5, #47	; 0x2f
   123f8:	mov	r6, #0
   123fc:	mov	r1, r5
   12400:	mov	r0, r4
   12404:	bl	114b4 <strrchr@plt>
   12408:	cmp	r0, #0
   1240c:	beq	12434 <__assert_fail@plt+0xecc>
   12410:	ldrb	r3, [r0, #1]
   12414:	cmp	r3, #0
   12418:	bne	12430 <__assert_fail@plt+0xec8>
   1241c:	strb	r6, [r0]
   12420:	ldrb	r3, [r4]
   12424:	cmp	r3, #0
   12428:	bne	123fc <__assert_fail@plt+0xe94>
   1242c:	b	12434 <__assert_fail@plt+0xecc>
   12430:	add	r4, r0, #1
   12434:	mov	r0, r4
   12438:	pop	{r4, r5, r6, pc}
   1243c:	push	{r4, r5, r6, r7, r8, lr}
   12440:	ldr	r3, [pc, #176]	; 124f8 <__assert_fail@plt+0xf90>
   12444:	ldr	r3, [r3, #148]	; 0x94
   12448:	cmp	r3, #0
   1244c:	beq	124f0 <__assert_fail@plt+0xf88>
   12450:	ldrb	r4, [r0]
   12454:	ldr	lr, [pc, #160]	; 124fc <__assert_fail@plt+0xf94>
   12458:	mov	r5, #0
   1245c:	mov	r7, r5
   12460:	mov	r8, r5
   12464:	mov	r6, lr
   12468:	add	r1, r3, #1
   1246c:	ldrb	r3, [r3]
   12470:	cmp	r3, r4
   12474:	bne	124a4 <__assert_fail@plt+0xf3c>
   12478:	cmp	r4, #0
   1247c:	beq	1249c <__assert_fail@plt+0xf34>
   12480:	mov	r2, r0
   12484:	ldrb	r3, [r2, #1]!
   12488:	ldrb	ip, [r1], #1
   1248c:	cmp	ip, r3
   12490:	bne	124ac <__assert_fail@plt+0xf44>
   12494:	cmp	r3, #0
   12498:	bne	12484 <__assert_fail@plt+0xf1c>
   1249c:	mov	r0, r6
   124a0:	pop	{r4, r5, r6, r7, r8, pc}
   124a4:	mov	r3, r4
   124a8:	mov	r2, r0
   124ac:	cmp	r3, #0
   124b0:	bne	124d4 <__assert_fail@plt+0xf6c>
   124b4:	sub	r2, r2, r0
   124b8:	cmp	r2, r5
   124bc:	bgt	124c8 <__assert_fail@plt+0xf60>
   124c0:	addeq	r7, r7, #1
   124c4:	b	124d4 <__assert_fail@plt+0xf6c>
   124c8:	mov	r5, r2
   124cc:	mov	r8, r6
   124d0:	mov	r7, #1
   124d4:	ldr	r3, [lr, #12]!
   124d8:	cmp	r3, #0
   124dc:	bne	12464 <__assert_fail@plt+0xefc>
   124e0:	cmp	r7, #1
   124e4:	movle	r6, r8
   124e8:	mvngt	r6, #0
   124ec:	b	1249c <__assert_fail@plt+0xf34>
   124f0:	mov	r6, #0
   124f4:	b	1249c <__assert_fail@plt+0xf34>
   124f8:	andeq	ip, r2, ip, asr #2
   124fc:	andeq	ip, r2, r0, ror #3
   12500:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12504:	sub	sp, sp, #8
   12508:	mov	r6, r0
   1250c:	mov	r5, r1
   12510:	ldr	r0, [r1]
   12514:	bl	17fa4 <argp_parse@@Base+0xd34>
   12518:	ldr	r1, [pc, #464]	; 126f0 <__assert_fail@plt+0x1188>
   1251c:	mov	r0, #6
   12520:	bl	114a8 <setlocale@plt>
   12524:	ldr	r2, [pc, #456]	; 126f4 <__assert_fail@plt+0x118c>
   12528:	ldr	r3, [pc, #456]	; 126f8 <__assert_fail@plt+0x1190>
   1252c:	str	r2, [r3]
   12530:	ldr	r4, [pc, #452]	; 126fc <__assert_fail@plt+0x1194>
   12534:	ldr	r1, [pc, #452]	; 12700 <__assert_fail@plt+0x1198>
   12538:	mov	r0, r4
   1253c:	bl	17d7c <argp_parse@@Base+0xb0c>
   12540:	mov	r3, #0
   12544:	str	r3, [sp, #4]
   12548:	str	r3, [sp]
   1254c:	mov	r2, r5
   12550:	mov	r1, r6
   12554:	ldr	r0, [pc, #424]	; 12704 <__assert_fail@plt+0x119c>
   12558:	bl	17270 <argp_parse@@Base>
   1255c:	ldr	r1, [pc, #420]	; 12708 <__assert_fail@plt+0x11a0>
   12560:	mov	r0, r4
   12564:	bl	11418 <getservbyname@plt>
   12568:	cmp	r0, #0
   1256c:	beq	125e4 <__assert_fail@plt+0x107c>
   12570:	ldr	r3, [r0, #8]
   12574:	rev16	r3, r3
   12578:	uxth	r3, r3
   1257c:	ldr	r2, [pc, #392]	; 1270c <__assert_fail@plt+0x11a4>
   12580:	str	r3, [r2, #144]	; 0x90
   12584:	mov	r0, #0
   12588:	bl	1152c <isatty@plt>
   1258c:	ldr	r3, [pc, #376]	; 1270c <__assert_fail@plt+0x11a4>
   12590:	str	r0, [r3, #148]	; 0x94
   12594:	ldr	r2, [pc, #372]	; 12710 <__assert_fail@plt+0x11a8>
   12598:	ldr	r3, [pc, #372]	; 12714 <__assert_fail@plt+0x11ac>
   1259c:	ldm	r3!, {r0, r1}
   125a0:	str	r0, [r2]
   125a4:	str	r1, [r2, #4]
   125a8:	ldrb	r3, [r3]
   125ac:	strb	r3, [r2, #8]
   125b0:	ldr	r1, [pc, #352]	; 12718 <__assert_fail@plt+0x11b0>
   125b4:	mov	r0, #2
   125b8:	bl	112a4 <signal@plt>
   125bc:	ldr	r3, [pc, #344]	; 1271c <__assert_fail@plt+0x11b4>
   125c0:	ldr	r3, [r3]
   125c4:	cmp	r3, #1
   125c8:	ble	12604 <__assert_fail@plt+0x109c>
   125cc:	ldr	r0, [pc, #332]	; 12720 <__assert_fail@plt+0x11b8>
   125d0:	bl	11244 <_setjmp@plt>
   125d4:	cmp	r0, #0
   125d8:	beq	125f4 <__assert_fail@plt+0x108c>
   125dc:	mov	r0, #0
   125e0:	bl	113d0 <exit@plt>
   125e4:	mov	r2, #69	; 0x45
   125e8:	ldr	r3, [pc, #284]	; 1270c <__assert_fail@plt+0x11a4>
   125ec:	str	r2, [r3, #144]	; 0x90
   125f0:	b	12584 <__assert_fail@plt+0x101c>
   125f4:	ldr	r3, [pc, #288]	; 1271c <__assert_fail@plt+0x11b4>
   125f8:	add	r1, r3, #4
   125fc:	ldr	r0, [r3]
   12600:	bl	11e48 <__assert_fail@plt+0x8e0>
   12604:	ldr	r0, [pc, #276]	; 12720 <__assert_fail@plt+0x11b8>
   12608:	bl	11244 <_setjmp@plt>
   1260c:	cmp	r0, #0
   12610:	bne	1269c <__assert_fail@plt+0x1134>
   12614:	ldr	r6, [pc, #240]	; 1270c <__assert_fail@plt+0x11a4>
   12618:	ldr	r8, [pc, #252]	; 1271c <__assert_fail@plt+0x11b4>
   1261c:	ldr	r7, [pc, #256]	; 12724 <__assert_fail@plt+0x11bc>
   12620:	ldr	r5, [pc, #256]	; 12728 <__assert_fail@plt+0x11c0>
   12624:	ldr	r4, [pc, #256]	; 1272c <__assert_fail@plt+0x11c4>
   12628:	ldr	r9, [pc, #256]	; 12730 <__assert_fail@plt+0x11c8>
   1262c:	ldr	r3, [r6, #148]	; 0x94
   12630:	cmp	r3, #0
   12634:	bne	126b0 <__assert_fail@plt+0x1148>
   12638:	ldr	r2, [r5]
   1263c:	mov	r1, #200	; 0xc8
   12640:	mov	r0, r4
   12644:	bl	11280 <fgets@plt>
   12648:	cmp	r0, #0
   1264c:	beq	126c0 <__assert_fail@plt+0x1158>
   12650:	ldrb	r3, [r4]
   12654:	cmp	r3, #0
   12658:	beq	1262c <__assert_fail@plt+0x10c4>
   1265c:	bl	1198c <__assert_fail@plt+0x424>
   12660:	ldr	sl, [r9]
   12664:	cmp	sl, #0
   12668:	beq	1262c <__assert_fail@plt+0x10c4>
   1266c:	ldr	r3, [pc, #192]	; 12734 <__assert_fail@plt+0x11cc>
   12670:	ldr	r0, [r3]
   12674:	bl	1243c <__assert_fail@plt+0xed4>
   12678:	cmn	r0, #1
   1267c:	beq	126d8 <__assert_fail@plt+0x1170>
   12680:	cmp	r0, #0
   12684:	beq	126e4 <__assert_fail@plt+0x117c>
   12688:	ldr	r3, [r0, #8]
   1268c:	ldr	r1, [pc, #160]	; 12734 <__assert_fail@plt+0x11cc>
   12690:	mov	r0, sl
   12694:	blx	r3
   12698:	b	1262c <__assert_fail@plt+0x10c4>
   1269c:	ldr	r3, [pc, #148]	; 12738 <__assert_fail@plt+0x11d0>
   126a0:	ldr	r1, [r3]
   126a4:	mov	r0, #10
   126a8:	bl	114d8 <putc@plt>
   126ac:	b	12614 <__assert_fail@plt+0x10ac>
   126b0:	ldr	r1, [r8, #344]	; 0x158
   126b4:	mov	r0, r7
   126b8:	bl	11220 <printf@plt>
   126bc:	b	12638 <__assert_fail@plt+0x10d0>
   126c0:	ldr	r0, [r5]
   126c4:	bl	113dc <feof@plt>
   126c8:	cmp	r0, #0
   126cc:	beq	1262c <__assert_fail@plt+0x10c4>
   126d0:	mov	r0, #0
   126d4:	bl	113d0 <exit@plt>
   126d8:	ldr	r0, [pc, #92]	; 1273c <__assert_fail@plt+0x11d4>
   126dc:	bl	11370 <puts@plt>
   126e0:	b	1262c <__assert_fail@plt+0x10c4>
   126e4:	ldr	r0, [pc, #84]	; 12740 <__assert_fail@plt+0x11d8>
   126e8:	bl	11370 <puts@plt>
   126ec:	b	1262c <__assert_fail@plt+0x10c4>
   126f0:	andeq	fp, r1, r8, lsl #10
   126f4:	muleq	r1, r0, r6
   126f8:			; <UNDEFINED> instruction: 0x0002cfbc
   126fc:	andeq	sl, r1, r4, ror #9
   12700:	andeq	ip, r2, r0, lsl #8
   12704:	andeq	ip, r2, r8, lsl #5
   12708:	muleq	r1, r8, r5
   1270c:	andeq	ip, r2, r4, ror #8
   12710:	andeq	ip, r2, r4, asr #21
   12714:	ldrdeq	sl, [r1], -r4
   12718:	muleq	r1, r0, r1
   1271c:	andeq	ip, r2, ip, asr #2
   12720:	andeq	ip, r2, r0, lsr #18
   12724:	andeq	sl, r1, r8, lsr #13
   12728:	andeq	ip, r2, r8, asr r4
   1272c:	andeq	ip, r2, r4, ror #21
   12730:			; <UNDEFINED> instruction: 0x0002cabc
   12734:	ldrdeq	ip, [r2], -r0
   12738:	andeq	ip, r2, ip, asr r4
   1273c:			; <UNDEFINED> instruction: 0x0001a6b0
   12740:	andeq	sl, r1, r4, asr #13
   12744:	push	{r4, r5, r6, r7, r8, lr}
   12748:	cmp	r0, #1
   1274c:	beq	12764 <__assert_fail@plt+0x11fc>
   12750:	mov	r4, r0
   12754:	mov	r6, r1
   12758:	ldr	r7, [pc, #156]	; 127fc <__assert_fail@plt+0x1294>
   1275c:	ldr	r8, [pc, #156]	; 12800 <__assert_fail@plt+0x1298>
   12760:	b	127c4 <__assert_fail@plt+0x125c>
   12764:	ldr	r0, [pc, #152]	; 12804 <__assert_fail@plt+0x129c>
   12768:	bl	11370 <puts@plt>
   1276c:	ldr	r3, [pc, #148]	; 12808 <__assert_fail@plt+0x12a0>
   12770:	ldr	r2, [r3, #148]	; 0x94
   12774:	cmp	r2, #0
   12778:	popeq	{r4, r5, r6, r7, r8, pc}
   1277c:	add	r4, r3, #148	; 0x94
   12780:	ldr	r6, [pc, #132]	; 1280c <__assert_fail@plt+0x12a4>
   12784:	mov	r5, #8
   12788:	ldr	r3, [r4, #4]
   1278c:	mov	r1, r5
   12790:	mov	r0, r6
   12794:	bl	11220 <printf@plt>
   12798:	ldr	r2, [r4, #12]!
   1279c:	cmp	r2, #0
   127a0:	bne	12788 <__assert_fail@plt+0x1220>
   127a4:	pop	{r4, r5, r6, r7, r8, pc}
   127a8:	mov	r1, r5
   127ac:	mov	r0, r8
   127b0:	bl	11220 <printf@plt>
   127b4:	b	127c4 <__assert_fail@plt+0x125c>
   127b8:	mov	r1, r5
   127bc:	mov	r0, r7
   127c0:	bl	11220 <printf@plt>
   127c4:	sub	r4, r4, #1
   127c8:	cmp	r4, #0
   127cc:	ble	127f8 <__assert_fail@plt+0x1290>
   127d0:	ldr	r5, [r6, #4]!
   127d4:	mov	r0, r5
   127d8:	bl	1243c <__assert_fail@plt+0xed4>
   127dc:	cmn	r0, #1
   127e0:	beq	127a8 <__assert_fail@plt+0x1240>
   127e4:	cmp	r0, #0
   127e8:	beq	127b8 <__assert_fail@plt+0x1250>
   127ec:	ldr	r0, [r0, #4]
   127f0:	bl	11370 <puts@plt>
   127f4:	b	127c4 <__assert_fail@plt+0x125c>
   127f8:	pop	{r4, r5, r6, r7, r8, pc}
   127fc:	andeq	sl, r1, r0, lsr r7
   12800:	andeq	sl, r1, r4, lsl r7
   12804:	ldrdeq	sl, [r1], -r8
   12808:	andeq	ip, r2, ip, asr #2
   1280c:	andeq	sl, r1, r8, lsl #14
   12810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12814:	sub	sp, sp, #188	; 0xbc
   12818:	mov	r4, r0
   1281c:	str	r1, [sp, #24]
   12820:	mov	r5, r2
   12824:	str	r2, [sp, #28]
   12828:	mov	r1, #0
   1282c:	ldr	r0, [pc, #908]	; 12bc0 <__assert_fail@plt+0x1658>
   12830:	bl	11334 <gettimeofday@plt>
   12834:	bl	13704 <__assert_fail@plt+0x219c>
   12838:	str	r0, [sp, #180]	; 0xb4
   1283c:	ldr	r1, [pc, #896]	; 12bc4 <__assert_fail@plt+0x165c>
   12840:	mov	r0, r4
   12844:	bl	111d8 <fdopen@plt>
   12848:	str	r0, [sp, #12]
   1284c:	ldr	r1, [pc, #884]	; 12bc8 <__assert_fail@plt+0x1660>
   12850:	mov	r0, r5
   12854:	bl	11208 <strcmp@plt>
   12858:	clz	r0, r0
   1285c:	lsr	r0, r0, #5
   12860:	str	r0, [sp, #168]	; 0xa8
   12864:	mov	r3, #0
   12868:	str	r3, [sp, #176]	; 0xb0
   1286c:	str	r3, [sp, #164]	; 0xa4
   12870:	ldr	r1, [pc, #852]	; 12bcc <__assert_fail@plt+0x1664>
   12874:	mov	r0, #14
   12878:	bl	112a4 <signal@plt>
   1287c:	ldr	r3, [pc, #844]	; 12bd0 <__assert_fail@plt+0x1668>
   12880:	add	r3, r3, #16
   12884:	str	r3, [sp, #20]
   12888:	ldr	r3, [sp, #176]	; 0xb0
   1288c:	cmp	r3, #0
   12890:	bne	12938 <__assert_fail@plt+0x13d0>
   12894:	ldr	r3, [sp, #28]
   12898:	ldr	r2, [sp, #180]	; 0xb4
   1289c:	ldr	r1, [sp, #24]
   128a0:	mov	r0, #2
   128a4:	bl	12214 <__assert_fail@plt+0xcac>
   128a8:	sub	r0, r0, #4
   128ac:	str	r0, [sp, #172]	; 0xac
   128b0:	mov	r3, #0
   128b4:	ldr	r2, [pc, #792]	; 12bd4 <__assert_fail@plt+0x166c>
   128b8:	str	r3, [r2]
   128bc:	ldr	r0, [pc, #788]	; 12bd8 <__assert_fail@plt+0x1670>
   128c0:	bl	11244 <_setjmp@plt>
   128c4:	ldr	r9, [pc, #784]	; 12bdc <__assert_fail@plt+0x1674>
   128c8:	ldr	sl, [pc, #784]	; 12be0 <__assert_fail@plt+0x1678>
   128cc:	ldr	fp, [sp, #20]
   128d0:	ldr	r3, [pc, #760]	; 12bd0 <__assert_fail@plt+0x1668>
   128d4:	ldr	r3, [r3, #4]
   128d8:	cmp	r3, #0
   128dc:	bne	129a0 <__assert_fail@plt+0x1438>
   128e0:	ldr	r3, [pc, #764]	; 12be4 <__assert_fail@plt+0x167c>
   128e4:	ldr	r3, [r3, #24]
   128e8:	str	r3, [sp, #16]
   128ec:	ldr	r2, [sp, #172]	; 0xac
   128f0:	ldr	r3, [pc, #728]	; 12bd0 <__assert_fail@plt+0x1668>
   128f4:	ldr	r3, [r3, #12]
   128f8:	str	r3, [sp, #4]
   128fc:	str	fp, [sp]
   12900:	mov	r3, #0
   12904:	add	r2, r2, #4
   12908:	ldr	r1, [sp, #180]	; 0xb4
   1290c:	ldr	r0, [sp, #16]
   12910:	bl	11490 <sendto@plt>
   12914:	ldr	r3, [sp, #172]	; 0xac
   12918:	add	r3, r3, #4
   1291c:	cmp	r0, r3
   12920:	bne	129b8 <__assert_fail@plt+0x1450>
   12924:	ldr	r1, [sp, #168]	; 0xa8
   12928:	ldr	r0, [sp, #12]
   1292c:	bl	13750 <__assert_fail@plt+0x21e8>
   12930:	mov	r5, #0
   12934:	b	12a60 <__assert_fail@plt+0x14f8>
   12938:	ldr	r2, [sp, #168]	; 0xa8
   1293c:	add	r1, sp, #180	; 0xb4
   12940:	ldr	r0, [sp, #12]
   12944:	bl	13858 <__assert_fail@plt+0x22f0>
   12948:	str	r0, [sp, #172]	; 0xac
   1294c:	ldr	r3, [sp, #172]	; 0xac
   12950:	cmp	r3, #0
   12954:	blt	1298c <__assert_fail@plt+0x1424>
   12958:	ldr	r3, [sp, #180]	; 0xb4
   1295c:	mov	r2, #0
   12960:	strb	r2, [r3]
   12964:	mov	r2, #3
   12968:	strb	r2, [r3, #1]
   1296c:	ldr	r2, [sp, #180]	; 0xb4
   12970:	ldr	r3, [sp, #176]	; 0xb0
   12974:	rev16	r3, r3
   12978:	uxth	r3, r3
   1297c:	strb	r3, [r2, #2]
   12980:	lsr	r3, r3, #8
   12984:	strb	r3, [r2, #3]
   12988:	b	128b0 <__assert_fail@plt+0x1348>
   1298c:	bl	1140c <__errno_location@plt>
   12990:	ldr	r0, [r0]
   12994:	add	r0, r0, #100	; 0x64
   12998:	bl	122a4 <__assert_fail@plt+0xd3c>
   1299c:	b	129cc <__assert_fail@plt+0x1464>
   129a0:	ldr	r2, [sp, #172]	; 0xac
   129a4:	add	r2, r2, #4
   129a8:	ldr	r1, [sp, #180]	; 0xb4
   129ac:	ldr	r0, [pc, #564]	; 12be8 <__assert_fail@plt+0x1680>
   129b0:	bl	12078 <__assert_fail@plt+0xb10>
   129b4:	b	128e0 <__assert_fail@plt+0x1378>
   129b8:	ldr	r0, [pc, #556]	; 12bec <__assert_fail@plt+0x1684>
   129bc:	bl	11304 <perror@plt>
   129c0:	b	129cc <__assert_fail@plt+0x1464>
   129c4:	ldr	r0, [pc, #548]	; 12bf0 <__assert_fail@plt+0x1688>
   129c8:	bl	11304 <perror@plt>
   129cc:	ldr	r0, [sp, #12]
   129d0:	bl	11478 <fclose@plt>
   129d4:	mov	r1, #0
   129d8:	ldr	r0, [pc, #532]	; 12bf4 <__assert_fail@plt+0x168c>
   129dc:	bl	11334 <gettimeofday@plt>
   129e0:	ldr	r3, [sp, #164]	; 0xa4
   129e4:	cmp	r3, #0
   129e8:	bne	12bb0 <__assert_fail@plt+0x1648>
   129ec:	add	sp, sp, #188	; 0xbc
   129f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129f4:	ldr	r3, [pc, #480]	; 12bdc <__assert_fail@plt+0x1674>
   129f8:	ldrb	r3, [r3]
   129fc:	ldr	r2, [pc, #472]	; 12bdc <__assert_fail@plt+0x1674>
   12a00:	ldrb	r2, [r2, #1]
   12a04:	orr	r3, r3, r2, lsl #8
   12a08:	rev16	r3, r3
   12a0c:	sxth	r2, r3
   12a10:	uxth	r3, r3
   12a14:	ldr	r1, [pc, #448]	; 12bdc <__assert_fail@plt+0x1674>
   12a18:	strb	r3, [r1]
   12a1c:	lsr	r3, r3, #8
   12a20:	strb	r3, [r1, #1]
   12a24:	mov	r3, r1
   12a28:	ldrb	r1, [r1, #2]
   12a2c:	ldrb	r3, [r3, #3]
   12a30:	orr	r1, r1, r3, lsl #8
   12a34:	rev16	r1, r1
   12a38:	uxth	r1, r1
   12a3c:	ldr	r3, [pc, #408]	; 12bdc <__assert_fail@plt+0x1674>
   12a40:	strb	r1, [r3, #2]
   12a44:	lsr	r3, r1, #8
   12a48:	ldr	r0, [pc, #396]	; 12bdc <__assert_fail@plt+0x1674>
   12a4c:	strb	r3, [r0, #3]
   12a50:	cmp	r2, #5
   12a54:	beq	12af8 <__assert_fail@plt+0x1590>
   12a58:	cmp	r2, #4
   12a5c:	beq	12b0c <__assert_fail@plt+0x15a4>
   12a60:	ldr	r3, [pc, #380]	; 12be4 <__assert_fail@plt+0x167c>
   12a64:	ldr	r0, [r3, #20]
   12a68:	bl	112d4 <alarm@plt>
   12a6c:	mov	r8, #128	; 0x80
   12a70:	add	r7, sp, #36	; 0x24
   12a74:	add	r6, sp, #32
   12a78:	str	r8, [sp, #32]
   12a7c:	ldr	r3, [pc, #352]	; 12be4 <__assert_fail@plt+0x167c>
   12a80:	ldr	r3, [r3, #24]
   12a84:	str	r3, [sp, #8]
   12a88:	str	r6, [sp, #4]
   12a8c:	str	r7, [sp]
   12a90:	mov	r3, r5
   12a94:	mov	r2, #516	; 0x204
   12a98:	mov	r1, r9
   12a9c:	ldr	r0, [sp, #8]
   12aa0:	bl	112c8 <recvfrom@plt>
   12aa4:	cmp	r0, #0
   12aa8:	ble	12a78 <__assert_fail@plt+0x1510>
   12aac:	mov	r4, r0
   12ab0:	mov	r0, r5
   12ab4:	bl	112d4 <alarm@plt>
   12ab8:	cmp	r4, #0
   12abc:	blt	129c4 <__assert_fail@plt+0x145c>
   12ac0:	ldrh	r1, [sp, #38]	; 0x26
   12ac4:	rev16	r1, r1
   12ac8:	uxth	r1, r1
   12acc:	mov	r0, fp
   12ad0:	bl	11748 <__assert_fail@plt+0x1e0>
   12ad4:	ldr	r3, [pc, #244]	; 12bd0 <__assert_fail@plt+0x1668>
   12ad8:	ldr	r3, [r3, #4]
   12adc:	cmp	r3, #0
   12ae0:	beq	129f4 <__assert_fail@plt+0x148c>
   12ae4:	mov	r2, r4
   12ae8:	mov	r1, r9
   12aec:	mov	r0, sl
   12af0:	bl	12078 <__assert_fail@plt+0xb10>
   12af4:	b	129f4 <__assert_fail@plt+0x148c>
   12af8:	add	r2, r0, #4
   12afc:	sxth	r1, r1
   12b00:	ldr	r0, [pc, #240]	; 12bf8 <__assert_fail@plt+0x1690>
   12b04:	bl	11220 <printf@plt>
   12b08:	b	129cc <__assert_fail@plt+0x1464>
   12b0c:	ldr	r3, [sp, #176]	; 0xb0
   12b10:	cmp	r1, r3
   12b14:	beq	12b70 <__assert_fail@plt+0x1608>
   12b18:	ldr	r3, [pc, #196]	; 12be4 <__assert_fail@plt+0x167c>
   12b1c:	ldr	r0, [r3, #24]
   12b20:	bl	13a50 <__assert_fail@plt+0x24e8>
   12b24:	subs	r1, r0, #0
   12b28:	beq	12b3c <__assert_fail@plt+0x15d4>
   12b2c:	ldr	r3, [pc, #156]	; 12bd0 <__assert_fail@plt+0x1668>
   12b30:	ldr	r3, [r3, #4]
   12b34:	cmp	r3, #0
   12b38:	bne	12b64 <__assert_fail@plt+0x15fc>
   12b3c:	ldr	r3, [sp, #176]	; 0xb0
   12b40:	ldr	r2, [pc, #148]	; 12bdc <__assert_fail@plt+0x1674>
   12b44:	ldrb	r2, [r2, #2]
   12b48:	ldr	r1, [pc, #140]	; 12bdc <__assert_fail@plt+0x1674>
   12b4c:	ldrb	r1, [r1, #3]
   12b50:	orr	r2, r2, r1, lsl #8
   12b54:	sub	r3, r3, #1
   12b58:	cmp	r2, r3
   12b5c:	bne	12930 <__assert_fail@plt+0x13c8>
   12b60:	b	128d0 <__assert_fail@plt+0x1368>
   12b64:	ldr	r0, [pc, #144]	; 12bfc <__assert_fail@plt+0x1694>
   12b68:	bl	11220 <printf@plt>
   12b6c:	b	12b3c <__assert_fail@plt+0x15d4>
   12b70:	ldr	r3, [sp, #176]	; 0xb0
   12b74:	cmp	r3, #0
   12b78:	ldrgt	r3, [sp, #172]	; 0xac
   12b7c:	ldrgt	r2, [sp, #164]	; 0xa4
   12b80:	addgt	r3, r3, r2
   12b84:	strgt	r3, [sp, #164]	; 0xa4
   12b88:	ldr	r3, [sp, #176]	; 0xb0
   12b8c:	add	r3, r3, #1
   12b90:	str	r3, [sp, #176]	; 0xb0
   12b94:	ldr	r3, [sp, #172]	; 0xac
   12b98:	cmp	r3, #512	; 0x200
   12b9c:	beq	12888 <__assert_fail@plt+0x1320>
   12ba0:	ldr	r3, [sp, #176]	; 0xb0
   12ba4:	cmp	r3, #1
   12ba8:	bne	129cc <__assert_fail@plt+0x1464>
   12bac:	b	12888 <__assert_fail@plt+0x1320>
   12bb0:	ldr	r1, [sp, #164]	; 0xa4
   12bb4:	ldr	r0, [pc, #68]	; 12c00 <__assert_fail@plt+0x1698>
   12bb8:	bl	117dc <__assert_fail@plt+0x274>
   12bbc:	b	129ec <__assert_fail@plt+0x1484>
   12bc0:	andeq	ip, r2, ip, lsr #21
   12bc4:	andeq	sl, r1, r4, ror ip
   12bc8:	ldrdeq	sl, [r1], -r4
   12bcc:			; <UNDEFINED> instruction: 0x000121b8
   12bd0:	andeq	ip, r2, r4, ror #8
   12bd4:	andeq	ip, r2, r8, lsr #21
   12bd8:	andeq	ip, r2, r8, asr #14
   12bdc:	andeq	ip, r2, r0, asr #10
   12be0:	andeq	sl, r1, ip, ror #14
   12be4:	andeq	ip, r2, ip, asr #2
   12be8:	andeq	sl, r1, r4, lsl #13
   12bec:	andeq	sl, r1, ip, asr #14
   12bf0:	andeq	sl, r1, ip, asr r7
   12bf4:			; <UNDEFINED> instruction: 0x0002cab4
   12bf8:	andeq	sl, r1, r8, ror r7
   12bfc:	andeq	sl, r1, ip, lsl #15
   12c00:	andeq	sl, r1, r4, lsr #15
   12c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c08:	sub	sp, sp, #28
   12c0c:	str	r0, [sp, #20]
   12c10:	str	r1, [sp, #16]
   12c14:	mov	r4, r0
   12c18:	cmp	r0, #1
   12c1c:	ble	12d2c <__assert_fail@plt+0x17c4>
   12c20:	ldr	sl, [sp, #16]
   12c24:	sub	r3, r4, #-1073741823	; 0xc0000001
   12c28:	ldr	r8, [sl, r3, lsl #2]
   12c2c:	mov	r1, #58	; 0x3a
   12c30:	mov	r0, r8
   12c34:	bl	113f4 <strchr@plt>
   12c38:	subs	r9, r0, #0
   12c3c:	beq	12dd8 <__assert_fail@plt+0x1870>
   12c40:	sub	r4, r4, #1
   12c44:	cmp	r4, #1
   12c48:	ble	12c7c <__assert_fail@plt+0x1714>
   12c4c:	mov	r5, sl
   12c50:	mov	r6, r4
   12c54:	mov	r4, #1
   12c58:	mov	r7, #58	; 0x3a
   12c5c:	mov	r1, r7
   12c60:	ldr	r0, [r5, #4]!
   12c64:	bl	113f4 <strchr@plt>
   12c68:	cmp	r0, #0
   12c6c:	bne	12d70 <__assert_fail@plt+0x1808>
   12c70:	add	r4, r4, #1
   12c74:	cmp	r4, r6
   12c78:	bne	12c5c <__assert_fail@plt+0x16f4>
   12c7c:	ldrb	r3, [r8]
   12c80:	cmp	r3, #91	; 0x5b
   12c84:	beq	12d94 <__assert_fail@plt+0x182c>
   12c88:	add	r7, r9, #1
   12c8c:	mov	r3, #0
   12c90:	strb	r3, [r9]
   12c94:	ldrb	r3, [r8]
   12c98:	cmp	r3, #0
   12c9c:	beq	12cb8 <__assert_fail@plt+0x1750>
   12ca0:	cmp	r8, #0
   12ca4:	beq	12cb8 <__assert_fail@plt+0x1750>
   12ca8:	mov	r0, r8
   12cac:	bl	11b70 <__assert_fail@plt+0x608>
   12cb0:	cmp	r0, #0
   12cb4:	bne	12d8c <__assert_fail@plt+0x1824>
   12cb8:	ldr	r3, [pc, #640]	; 12f40 <__assert_fail@plt+0x19d8>
   12cbc:	ldr	r3, [r3, #8]
   12cc0:	cmp	r3, #0
   12cc4:	beq	12de0 <__assert_fail@plt+0x1878>
   12cc8:	ldr	r3, [sp, #20]
   12ccc:	cmp	r3, #3
   12cd0:	bgt	12e44 <__assert_fail@plt+0x18dc>
   12cd4:	cmp	r3, #2
   12cd8:	beq	12dec <__assert_fail@plt+0x1884>
   12cdc:	ldr	r3, [sp, #16]
   12ce0:	ldr	r4, [r3, #4]
   12ce4:	mov	r1, #0
   12ce8:	mov	r0, r4
   12cec:	bl	11358 <open64@plt>
   12cf0:	subs	r5, r0, #0
   12cf4:	blt	12dfc <__assert_fail@plt+0x1894>
   12cf8:	ldr	r3, [pc, #576]	; 12f40 <__assert_fail@plt+0x19d8>
   12cfc:	ldr	r3, [r3]
   12d00:	cmp	r3, #0
   12d04:	bne	12e20 <__assert_fail@plt+0x18b8>
   12d08:	ldr	r0, [pc, #560]	; 12f40 <__assert_fail@plt+0x19d8>
   12d0c:	ldrh	r1, [r0, #144]	; 0x90
   12d10:	add	r0, r0, #16
   12d14:	bl	11748 <__assert_fail@plt+0x1e0>
   12d18:	ldr	r2, [pc, #548]	; 12f44 <__assert_fail@plt+0x19dc>
   12d1c:	mov	r1, r7
   12d20:	mov	r0, r5
   12d24:	bl	12810 <__assert_fail@plt+0x12a8>
   12d28:	b	12d8c <__assert_fail@plt+0x1824>
   12d2c:	add	r3, sp, #16
   12d30:	add	r2, sp, #20
   12d34:	ldr	r1, [pc, #524]	; 12f48 <__assert_fail@plt+0x19e0>
   12d38:	ldr	r0, [pc, #524]	; 12f4c <__assert_fail@plt+0x19e4>
   12d3c:	bl	11abc <__assert_fail@plt+0x554>
   12d40:	ldr	r4, [sp, #20]
   12d44:	cmp	r4, #1
   12d48:	bgt	12c20 <__assert_fail@plt+0x16b8>
   12d4c:	ldr	r3, [sp, #16]
   12d50:	ldr	r4, [r3]
   12d54:	mov	r1, r4
   12d58:	ldr	r0, [pc, #496]	; 12f50 <__assert_fail@plt+0x19e8>
   12d5c:	bl	11220 <printf@plt>
   12d60:	mov	r1, r4
   12d64:	ldr	r0, [pc, #488]	; 12f54 <__assert_fail@plt+0x19ec>
   12d68:	bl	11220 <printf@plt>
   12d6c:	b	12d8c <__assert_fail@plt+0x1824>
   12d70:	ldr	r4, [sl]
   12d74:	mov	r1, r4
   12d78:	ldr	r0, [pc, #464]	; 12f50 <__assert_fail@plt+0x19e8>
   12d7c:	bl	11220 <printf@plt>
   12d80:	mov	r1, r4
   12d84:	ldr	r0, [pc, #456]	; 12f54 <__assert_fail@plt+0x19ec>
   12d88:	bl	11220 <printf@plt>
   12d8c:	add	sp, sp, #28
   12d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d94:	mov	r1, #93	; 0x5d
   12d98:	mov	r0, r8
   12d9c:	bl	113f4 <strchr@plt>
   12da0:	cmp	r0, #0
   12da4:	beq	12d8c <__assert_fail@plt+0x1824>
   12da8:	mov	r3, #0
   12dac:	strb	r3, [r0]
   12db0:	ldr	r3, [sp, #20]
   12db4:	sub	r3, r3, #-1073741823	; 0xc0000001
   12db8:	ldr	r2, [sp, #16]
   12dbc:	ldr	r7, [r2, r3, lsl #2]
   12dc0:	ldrb	r3, [r0, #1]
   12dc4:	cmp	r3, #58	; 0x3a
   12dc8:	addeq	r8, r7, #1
   12dcc:	addeq	r7, r0, #2
   12dd0:	bne	12cb8 <__assert_fail@plt+0x1750>
   12dd4:	b	12ca0 <__assert_fail@plt+0x1738>
   12dd8:	mov	r7, r8
   12ddc:	b	12cb8 <__assert_fail@plt+0x1750>
   12de0:	ldr	r0, [pc, #368]	; 12f58 <__assert_fail@plt+0x19f0>
   12de4:	bl	11370 <puts@plt>
   12de8:	b	12d8c <__assert_fail@plt+0x1824>
   12dec:	mov	r0, r7
   12df0:	bl	123e0 <__assert_fail@plt+0xe78>
   12df4:	mov	r4, r0
   12df8:	b	12ce4 <__assert_fail@plt+0x177c>
   12dfc:	ldr	r3, [pc, #344]	; 12f5c <__assert_fail@plt+0x19f4>
   12e00:	ldr	r3, [r3]
   12e04:	mov	r2, #6
   12e08:	mov	r1, #1
   12e0c:	ldr	r0, [pc, #332]	; 12f60 <__assert_fail@plt+0x19f8>
   12e10:	bl	11310 <fwrite@plt>
   12e14:	mov	r0, r4
   12e18:	bl	11304 <perror@plt>
   12e1c:	b	12d8c <__assert_fail@plt+0x1824>
   12e20:	ldr	r3, [pc, #316]	; 12f64 <__assert_fail@plt+0x19fc>
   12e24:	ldr	r2, [r3]
   12e28:	ldr	r3, [pc, #276]	; 12f44 <__assert_fail@plt+0x19dc>
   12e2c:	str	r3, [sp]
   12e30:	mov	r3, r7
   12e34:	mov	r1, r4
   12e38:	ldr	r0, [pc, #296]	; 12f68 <__assert_fail@plt+0x1a00>
   12e3c:	bl	11220 <printf@plt>
   12e40:	b	12d08 <__assert_fail@plt+0x17a0>
   12e44:	mov	r1, #0
   12e48:	mov	r0, r7
   12e4c:	bl	113f4 <strchr@plt>
   12e50:	add	sl, r0, #1
   12e54:	mov	r3, #47	; 0x2f
   12e58:	strb	r3, [r0]
   12e5c:	ldr	r3, [sp, #20]
   12e60:	sub	r3, r3, #1
   12e64:	cmp	r3, #1
   12e68:	ble	12d8c <__assert_fail@plt+0x1824>
   12e6c:	mov	r4, #1
   12e70:	ldr	r5, [pc, #200]	; 12f40 <__assert_fail@plt+0x19d8>
   12e74:	add	r3, r5, #16
   12e78:	str	r3, [sp, #12]
   12e7c:	ldr	r9, [pc, #192]	; 12f44 <__assert_fail@plt+0x19dc>
   12e80:	ldr	fp, [pc, #220]	; 12f64 <__assert_fail@plt+0x19fc>
   12e84:	b	12ee0 <__assert_fail@plt+0x1978>
   12e88:	ldr	r3, [pc, #204]	; 12f5c <__assert_fail@plt+0x19f4>
   12e8c:	ldr	r3, [r3]
   12e90:	mov	r2, #6
   12e94:	mov	r1, #1
   12e98:	ldr	r0, [pc, #192]	; 12f60 <__assert_fail@plt+0x19f8>
   12e9c:	bl	11310 <fwrite@plt>
   12ea0:	ldr	r3, [sp, #16]
   12ea4:	ldr	r0, [r3, r4, lsl #2]
   12ea8:	bl	11304 <perror@plt>
   12eac:	b	12ecc <__assert_fail@plt+0x1964>
   12eb0:	ldrh	r1, [r5, #144]	; 0x90
   12eb4:	ldr	r0, [sp, #12]
   12eb8:	bl	11748 <__assert_fail@plt+0x1e0>
   12ebc:	mov	r2, r9
   12ec0:	mov	r1, r7
   12ec4:	mov	r0, r8
   12ec8:	bl	12810 <__assert_fail@plt+0x12a8>
   12ecc:	add	r4, r4, #1
   12ed0:	ldr	r3, [sp, #20]
   12ed4:	sub	r3, r3, #1
   12ed8:	cmp	r3, r4
   12edc:	ble	12d8c <__assert_fail@plt+0x1824>
   12ee0:	lsl	r6, r4, #2
   12ee4:	ldr	r3, [sp, #16]
   12ee8:	ldr	r0, [r3, r4, lsl #2]
   12eec:	bl	123e0 <__assert_fail@plt+0xe78>
   12ef0:	mov	r1, r0
   12ef4:	mov	r0, sl
   12ef8:	bl	11328 <strcpy@plt>
   12efc:	mov	r1, #0
   12f00:	ldr	r3, [sp, #16]
   12f04:	ldr	r0, [r3, r4, lsl #2]
   12f08:	bl	11358 <open64@plt>
   12f0c:	subs	r8, r0, #0
   12f10:	blt	12e88 <__assert_fail@plt+0x1920>
   12f14:	ldr	r3, [r5]
   12f18:	cmp	r3, #0
   12f1c:	beq	12eb0 <__assert_fail@plt+0x1948>
   12f20:	ldr	r3, [sp, #16]
   12f24:	ldr	r1, [r3, r6]
   12f28:	str	r9, [sp]
   12f2c:	mov	r3, r7
   12f30:	ldr	r2, [fp]
   12f34:	ldr	r0, [pc, #44]	; 12f68 <__assert_fail@plt+0x1a00>
   12f38:	bl	11220 <printf@plt>
   12f3c:	b	12eb0 <__assert_fail@plt+0x1948>
   12f40:	andeq	ip, r2, r4, ror #8
   12f44:	andeq	ip, r2, r4, asr #21
   12f48:	andeq	sl, r1, ip, lsr #15
   12f4c:			; <UNDEFINED> instruction: 0x0001a7b4
   12f50:			; <UNDEFINED> instruction: 0x0001a7bc
   12f54:	andeq	sl, r1, r0, ror #15
   12f58:	andeq	sl, r1, r4, lsl r8
   12f5c:	andeq	ip, r2, r0, asr r4
   12f60:	andeq	sl, r1, r4, lsr r8
   12f64:	andeq	ip, r2, r0, asr #21
   12f68:	andeq	sl, r1, ip, lsr r8
   12f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	sub	sp, sp, #188	; 0xbc
   12f74:	mov	r4, r0
   12f78:	str	r1, [sp, #16]
   12f7c:	mov	r5, r2
   12f80:	str	r2, [sp, #20]
   12f84:	mov	r1, #0
   12f88:	ldr	r0, [pc, #992]	; 13370 <__assert_fail@plt+0x1e08>
   12f8c:	bl	11334 <gettimeofday@plt>
   12f90:	bl	136bc <__assert_fail@plt+0x2154>
   12f94:	str	r0, [sp, #180]	; 0xb4
   12f98:	ldr	r1, [pc, #980]	; 13374 <__assert_fail@plt+0x1e0c>
   12f9c:	mov	r0, r4
   12fa0:	bl	111d8 <fdopen@plt>
   12fa4:	str	r0, [sp, #12]
   12fa8:	ldr	r1, [pc, #968]	; 13378 <__assert_fail@plt+0x1e10>
   12fac:	mov	r0, r5
   12fb0:	bl	11208 <strcmp@plt>
   12fb4:	clz	r0, r0
   12fb8:	lsr	r0, r0, #5
   12fbc:	str	r0, [sp, #28]
   12fc0:	mov	r3, #1
   12fc4:	str	r3, [sp, #176]	; 0xb0
   12fc8:	str	r3, [sp, #168]	; 0xa8
   12fcc:	mov	r3, #0
   12fd0:	str	r3, [sp, #164]	; 0xa4
   12fd4:	ldr	r1, [pc, #928]	; 1337c <__assert_fail@plt+0x1e14>
   12fd8:	mov	r0, #14
   12fdc:	bl	112a4 <signal@plt>
   12fe0:	ldr	r3, [sp, #168]	; 0xa8
   12fe4:	cmp	r3, #0
   12fe8:	bne	130a4 <__assert_fail@plt+0x1b3c>
   12fec:	mov	r3, #0
   12ff0:	ldr	r2, [pc, #904]	; 13380 <__assert_fail@plt+0x1e18>
   12ff4:	strb	r3, [r2]
   12ff8:	mov	r3, #4
   12ffc:	strb	r3, [r2, #1]
   13000:	ldr	r3, [sp, #176]	; 0xb0
   13004:	rev16	r3, r3
   13008:	uxth	r3, r3
   1300c:	strb	r3, [r2, #2]
   13010:	lsr	r3, r3, #8
   13014:	strb	r3, [r2, #3]
   13018:	mov	r3, #4
   1301c:	str	r3, [sp, #172]	; 0xac
   13020:	ldr	r3, [sp, #176]	; 0xb0
   13024:	add	r3, r3, #1
   13028:	str	r3, [sp, #176]	; 0xb0
   1302c:	mov	r3, #0
   13030:	ldr	r2, [pc, #844]	; 13384 <__assert_fail@plt+0x1e1c>
   13034:	str	r3, [r2]
   13038:	ldr	r0, [pc, #840]	; 13388 <__assert_fail@plt+0x1e20>
   1303c:	bl	11244 <_setjmp@plt>
   13040:	ldr	r5, [pc, #836]	; 1338c <__assert_fail@plt+0x1e24>
   13044:	ldr	fp, [pc, #836]	; 13390 <__assert_fail@plt+0x1e28>
   13048:	ldr	r3, [pc, #836]	; 13394 <__assert_fail@plt+0x1e2c>
   1304c:	ldr	r3, [r3, #4]
   13050:	cmp	r3, #0
   13054:	bne	130c8 <__assert_fail@plt+0x1b60>
   13058:	ldr	r2, [sp, #172]	; 0xac
   1305c:	ldr	r3, [pc, #816]	; 13394 <__assert_fail@plt+0x1e2c>
   13060:	ldr	r3, [r3, #12]
   13064:	str	r3, [sp, #4]
   13068:	ldr	r3, [pc, #808]	; 13398 <__assert_fail@plt+0x1e30>
   1306c:	str	r3, [sp]
   13070:	mov	r3, #0
   13074:	ldr	r1, [pc, #772]	; 13380 <__assert_fail@plt+0x1e18>
   13078:	ldr	r0, [r5, #24]
   1307c:	bl	11490 <sendto@plt>
   13080:	ldr	r3, [sp, #172]	; 0xac
   13084:	cmp	r0, r3
   13088:	bne	130dc <__assert_fail@plt+0x1b74>
   1308c:	ldr	r1, [sp, #28]
   13090:	ldr	r0, [sp, #12]
   13094:	bl	138d8 <__assert_fail@plt+0x2370>
   13098:	mov	sl, #128	; 0x80
   1309c:	mov	r6, #0
   130a0:	b	131f8 <__assert_fail@plt+0x1c90>
   130a4:	ldr	r3, [sp, #20]
   130a8:	ldr	r2, [pc, #720]	; 13380 <__assert_fail@plt+0x1e18>
   130ac:	ldr	r1, [sp, #16]
   130b0:	mov	r0, #1
   130b4:	bl	12214 <__assert_fail@plt+0xcac>
   130b8:	str	r0, [sp, #172]	; 0xac
   130bc:	mov	r3, #0
   130c0:	str	r3, [sp, #168]	; 0xa8
   130c4:	b	1302c <__assert_fail@plt+0x1ac4>
   130c8:	ldr	r2, [sp, #172]	; 0xac
   130cc:	ldr	r1, [pc, #684]	; 13380 <__assert_fail@plt+0x1e18>
   130d0:	ldr	r0, [pc, #708]	; 1339c <__assert_fail@plt+0x1e34>
   130d4:	bl	12078 <__assert_fail@plt+0xb10>
   130d8:	b	13058 <__assert_fail@plt+0x1af0>
   130dc:	mov	r0, #0
   130e0:	bl	112d4 <alarm@plt>
   130e4:	ldr	r0, [pc, #692]	; 133a0 <__assert_fail@plt+0x1e38>
   130e8:	bl	11304 <perror@plt>
   130ec:	b	130f8 <__assert_fail@plt+0x1b90>
   130f0:	ldr	r0, [pc, #684]	; 133a4 <__assert_fail@plt+0x1e3c>
   130f4:	bl	11304 <perror@plt>
   130f8:	mov	r4, #0
   130fc:	ldr	r3, [pc, #636]	; 13380 <__assert_fail@plt+0x1e18>
   13100:	strb	r4, [r3]
   13104:	mov	r3, #4
   13108:	ldr	r2, [pc, #624]	; 13380 <__assert_fail@plt+0x1e18>
   1310c:	strb	r3, [r2, #1]
   13110:	ldr	r3, [sp, #176]	; 0xb0
   13114:	rev16	r3, r3
   13118:	uxth	r3, r3
   1311c:	strb	r3, [r2, #2]
   13120:	lsr	r3, r3, #8
   13124:	strb	r3, [r2, #3]
   13128:	ldr	r3, [pc, #604]	; 1338c <__assert_fail@plt+0x1e24>
   1312c:	ldr	r0, [r3, #24]
   13130:	ldr	r3, [pc, #604]	; 13394 <__assert_fail@plt+0x1e2c>
   13134:	add	r2, r3, #16
   13138:	ldr	r3, [r3, #12]
   1313c:	str	r3, [sp, #4]
   13140:	str	r2, [sp]
   13144:	mov	r3, r4
   13148:	mov	r2, #4
   1314c:	ldr	r1, [pc, #556]	; 13380 <__assert_fail@plt+0x1e18>
   13150:	bl	11490 <sendto@plt>
   13154:	ldr	r1, [sp, #28]
   13158:	ldr	r5, [sp, #12]
   1315c:	mov	r0, r5
   13160:	bl	138d8 <__assert_fail@plt+0x2370>
   13164:	mov	r0, r5
   13168:	bl	11478 <fclose@plt>
   1316c:	mov	r1, r4
   13170:	ldr	r0, [pc, #560]	; 133a8 <__assert_fail@plt+0x1e40>
   13174:	bl	11334 <gettimeofday@plt>
   13178:	ldr	r3, [sp, #164]	; 0xa4
   1317c:	cmp	r3, r4
   13180:	bne	13360 <__assert_fail@plt+0x1df8>
   13184:	add	sp, sp, #188	; 0xbc
   13188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1318c:	ldr	r2, [sp, #180]	; 0xb4
   13190:	ldrb	r3, [r2]
   13194:	ldrb	r1, [r2, #1]
   13198:	orr	r3, r3, r1, lsl #8
   1319c:	rev16	r3, r3
   131a0:	uxth	r3, r3
   131a4:	strb	r3, [r2]
   131a8:	lsr	r3, r3, #8
   131ac:	strb	r3, [r2, #1]
   131b0:	ldr	r2, [sp, #180]	; 0xb4
   131b4:	ldrb	r3, [r2, #2]
   131b8:	ldrb	r1, [r2, #3]
   131bc:	orr	r3, r3, r1, lsl #8
   131c0:	rev16	r3, r3
   131c4:	uxth	r3, r3
   131c8:	strb	r3, [r2, #2]
   131cc:	lsr	r3, r3, #8
   131d0:	strb	r3, [r2, #3]
   131d4:	ldr	r2, [sp, #180]	; 0xb4
   131d8:	ldrb	r3, [r2]
   131dc:	ldrb	r1, [r2, #1]
   131e0:	orr	r3, r3, r1, lsl #8
   131e4:	sxth	r3, r3
   131e8:	cmp	r3, #5
   131ec:	beq	13280 <__assert_fail@plt+0x1d18>
   131f0:	cmp	r3, #3
   131f4:	beq	132a0 <__assert_fail@plt+0x1d38>
   131f8:	ldr	r0, [r5, #20]
   131fc:	bl	112d4 <alarm@plt>
   13200:	add	r9, sp, #36	; 0x24
   13204:	add	r8, sp, #32
   13208:	mov	r7, #516	; 0x204
   1320c:	str	sl, [sp, #32]
   13210:	str	r8, [sp, #4]
   13214:	str	r9, [sp]
   13218:	mov	r3, r6
   1321c:	mov	r2, r7
   13220:	ldr	r1, [sp, #180]	; 0xb4
   13224:	ldr	r0, [r5, #24]
   13228:	bl	112c8 <recvfrom@plt>
   1322c:	cmp	r0, #0
   13230:	ble	1320c <__assert_fail@plt+0x1ca4>
   13234:	mov	r4, r0
   13238:	mov	r0, r6
   1323c:	bl	112d4 <alarm@plt>
   13240:	cmp	r4, #0
   13244:	blt	130f0 <__assert_fail@plt+0x1b88>
   13248:	ldrh	r1, [sp, #38]	; 0x26
   1324c:	rev16	r1, r1
   13250:	uxth	r1, r1
   13254:	ldr	r0, [pc, #316]	; 13398 <__assert_fail@plt+0x1e30>
   13258:	bl	11748 <__assert_fail@plt+0x1e0>
   1325c:	ldr	r3, [pc, #304]	; 13394 <__assert_fail@plt+0x1e2c>
   13260:	ldr	r3, [r3, #4]
   13264:	cmp	r3, #0
   13268:	beq	1318c <__assert_fail@plt+0x1c24>
   1326c:	mov	r2, r4
   13270:	ldr	r1, [sp, #180]	; 0xb4
   13274:	mov	r0, fp
   13278:	bl	12078 <__assert_fail@plt+0xb10>
   1327c:	b	1318c <__assert_fail@plt+0x1c24>
   13280:	ldrb	r1, [r2, #2]
   13284:	ldrb	r3, [r2, #3]
   13288:	orr	r1, r1, r3, lsl #8
   1328c:	add	r2, r2, #4
   13290:	sxth	r1, r1
   13294:	ldr	r0, [pc, #272]	; 133ac <__assert_fail@plt+0x1e44>
   13298:	bl	11220 <printf@plt>
   1329c:	b	130f8 <__assert_fail@plt+0x1b90>
   132a0:	ldr	r1, [sp, #176]	; 0xb0
   132a4:	ldrb	r3, [r2, #2]
   132a8:	ldrb	r2, [r2, #3]
   132ac:	orr	r3, r3, r2, lsl #8
   132b0:	cmp	r3, r1
   132b4:	beq	13308 <__assert_fail@plt+0x1da0>
   132b8:	ldr	r0, [r5, #24]
   132bc:	bl	13a50 <__assert_fail@plt+0x24e8>
   132c0:	subs	r1, r0, #0
   132c4:	beq	132d8 <__assert_fail@plt+0x1d70>
   132c8:	ldr	r3, [pc, #196]	; 13394 <__assert_fail@plt+0x1e2c>
   132cc:	ldr	r3, [r3, #4]
   132d0:	cmp	r3, #0
   132d4:	bne	132fc <__assert_fail@plt+0x1d94>
   132d8:	ldr	r3, [sp, #176]	; 0xb0
   132dc:	ldr	r1, [sp, #180]	; 0xb4
   132e0:	ldrb	r2, [r1, #2]
   132e4:	ldrb	r1, [r1, #3]
   132e8:	orr	r2, r2, r1, lsl #8
   132ec:	sub	r3, r3, #1
   132f0:	cmp	r2, r3
   132f4:	bne	1309c <__assert_fail@plt+0x1b34>
   132f8:	b	13048 <__assert_fail@plt+0x1ae0>
   132fc:	ldr	r0, [pc, #172]	; 133b0 <__assert_fail@plt+0x1e48>
   13300:	bl	11220 <printf@plt>
   13304:	b	132d8 <__assert_fail@plt+0x1d70>
   13308:	ldr	r3, [sp, #28]
   1330c:	sub	r2, r4, #4
   13310:	add	r1, sp, #180	; 0xb4
   13314:	ldr	r0, [sp, #12]
   13318:	bl	139d0 <__assert_fail@plt+0x2468>
   1331c:	str	r0, [sp, #172]	; 0xac
   13320:	ldr	r3, [sp, #172]	; 0xac
   13324:	cmp	r3, #0
   13328:	bge	13340 <__assert_fail@plt+0x1dd8>
   1332c:	bl	1140c <__errno_location@plt>
   13330:	ldr	r0, [r0]
   13334:	add	r0, r0, #100	; 0x64
   13338:	bl	122a4 <__assert_fail@plt+0xd3c>
   1333c:	b	130f8 <__assert_fail@plt+0x1b90>
   13340:	ldr	r3, [sp, #172]	; 0xac
   13344:	ldr	r2, [sp, #164]	; 0xa4
   13348:	add	r3, r3, r2
   1334c:	str	r3, [sp, #164]	; 0xa4
   13350:	ldr	r3, [sp, #172]	; 0xac
   13354:	cmp	r3, #512	; 0x200
   13358:	bne	130f8 <__assert_fail@plt+0x1b90>
   1335c:	b	12fe0 <__assert_fail@plt+0x1a78>
   13360:	ldr	r1, [sp, #164]	; 0xa4
   13364:	ldr	r0, [pc, #72]	; 133b4 <__assert_fail@plt+0x1e4c>
   13368:	bl	117dc <__assert_fail@plt+0x274>
   1336c:	b	13184 <__assert_fail@plt+0x1c1c>
   13370:	andeq	ip, r2, ip, lsr #21
   13374:	andeq	sl, r1, r8, asr r8
   13378:	ldrdeq	sl, [r1], -r4
   1337c:			; <UNDEFINED> instruction: 0x000121b8
   13380:	andeq	ip, r2, r0, asr #10
   13384:	andeq	ip, r2, r8, lsr #21
   13388:	andeq	ip, r2, r8, asr #14
   1338c:	andeq	ip, r2, ip, asr #2
   13390:	andeq	sl, r1, ip, ror #14
   13394:	andeq	ip, r2, r4, ror #8
   13398:	andeq	ip, r2, r4, ror r4
   1339c:	andeq	sl, r1, r4, lsl #13
   133a0:	andeq	sl, r1, ip, asr #14
   133a4:	andeq	sl, r1, ip, asr r7
   133a8:			; <UNDEFINED> instruction: 0x0002cab4
   133ac:	andeq	sl, r1, r8, ror r7
   133b0:	andeq	sl, r1, ip, lsl #15
   133b4:	andeq	sl, r1, ip, asr r8
   133b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133bc:	sub	sp, sp, #28
   133c0:	str	r0, [sp, #20]
   133c4:	str	r1, [sp, #16]
   133c8:	mov	r6, r0
   133cc:	cmp	r0, #1
   133d0:	ble	1341c <__assert_fail@plt+0x1eb4>
   133d4:	ldr	r3, [pc, #696]	; 13694 <__assert_fail@plt+0x212c>
   133d8:	ldr	r3, [r3, #8]
   133dc:	cmp	r3, #0
   133e0:	bne	13480 <__assert_fail@plt+0x1f18>
   133e4:	ldr	r8, [sp, #16]
   133e8:	mov	r5, r8
   133ec:	mov	r4, #1
   133f0:	mov	r7, #58	; 0x3a
   133f4:	mov	r1, r7
   133f8:	ldr	r0, [r5, #4]!
   133fc:	bl	113f4 <strchr@plt>
   13400:	cmp	r0, #0
   13404:	beq	13460 <__assert_fail@plt+0x1ef8>
   13408:	add	r4, r4, #1
   1340c:	cmp	r4, r6
   13410:	blt	133f4 <__assert_fail@plt+0x1e8c>
   13414:	mov	r5, #1
   13418:	b	13484 <__assert_fail@plt+0x1f1c>
   1341c:	add	r3, sp, #16
   13420:	add	r2, sp, #20
   13424:	ldr	r1, [pc, #620]	; 13698 <__assert_fail@plt+0x2130>
   13428:	ldr	r0, [pc, #620]	; 1369c <__assert_fail@plt+0x2134>
   1342c:	bl	11abc <__assert_fail@plt+0x554>
   13430:	ldr	r6, [sp, #20]
   13434:	cmp	r6, #1
   13438:	bgt	133d4 <__assert_fail@plt+0x1e6c>
   1343c:	ldr	r3, [sp, #16]
   13440:	ldr	r4, [r3]
   13444:	mov	r1, r4
   13448:	ldr	r0, [pc, #592]	; 136a0 <__assert_fail@plt+0x2138>
   1344c:	bl	11220 <printf@plt>
   13450:	mov	r1, r4
   13454:	ldr	r0, [pc, #584]	; 136a4 <__assert_fail@plt+0x213c>
   13458:	bl	11220 <printf@plt>
   1345c:	b	135f8 <__assert_fail@plt+0x2090>
   13460:	ldr	r4, [r8]
   13464:	mov	r1, r4
   13468:	ldr	r0, [pc, #560]	; 136a0 <__assert_fail@plt+0x2138>
   1346c:	bl	11220 <printf@plt>
   13470:	mov	r1, r4
   13474:	ldr	r0, [pc, #552]	; 136a4 <__assert_fail@plt+0x213c>
   13478:	bl	11220 <printf@plt>
   1347c:	b	135f8 <__assert_fail@plt+0x2090>
   13480:	mov	r5, #1
   13484:	ldr	r8, [pc, #520]	; 13694 <__assert_fail@plt+0x212c>
   13488:	add	r3, r8, #16
   1348c:	str	r3, [sp, #12]
   13490:	ldr	sl, [pc, #528]	; 136a8 <__assert_fail@plt+0x2140>
   13494:	ldr	fp, [pc, #528]	; 136ac <__assert_fail@plt+0x2144>
   13498:	b	1353c <__assert_fail@plt+0x1fd4>
   1349c:	mov	r1, #93	; 0x5d
   134a0:	mov	r0, r4
   134a4:	bl	113f4 <strchr@plt>
   134a8:	cmp	r0, #0
   134ac:	beq	1359c <__assert_fail@plt+0x2034>
   134b0:	mov	r3, #0
   134b4:	strb	r3, [r0]
   134b8:	ldrb	r3, [r0, #1]
   134bc:	cmp	r3, #58	; 0x3a
   134c0:	addne	r6, r0, #1
   134c4:	addeq	r6, r0, #2
   134c8:	ldr	r3, [sp, #16]
   134cc:	ldr	r4, [r3, r9]
   134d0:	add	r4, r4, #1
   134d4:	b	13580 <__assert_fail@plt+0x2018>
   134d8:	mov	r6, r4
   134dc:	ldr	r3, [sp, #20]
   134e0:	cmp	r3, #3
   134e4:	ble	135a4 <__assert_fail@plt+0x203c>
   134e8:	mov	r0, r6
   134ec:	bl	123e0 <__assert_fail@plt+0xe78>
   134f0:	mov	r7, r0
   134f4:	mov	r1, #420	; 0x1a4
   134f8:	bl	11340 <creat64@plt>
   134fc:	subs	r4, r0, #0
   13500:	blt	13654 <__assert_fail@plt+0x20ec>
   13504:	ldr	r3, [r8]
   13508:	cmp	r3, #0
   1350c:	bne	13678 <__assert_fail@plt+0x2110>
   13510:	ldrh	r1, [r8, #144]	; 0x90
   13514:	ldr	r0, [sp, #12]
   13518:	bl	11748 <__assert_fail@plt+0x1e0>
   1351c:	mov	r2, sl
   13520:	mov	r1, r6
   13524:	mov	r0, r4
   13528:	bl	12f6c <__assert_fail@plt+0x1a04>
   1352c:	add	r5, r5, #1
   13530:	ldr	r3, [sp, #20]
   13534:	cmp	r3, r5
   13538:	ble	135f8 <__assert_fail@plt+0x2090>
   1353c:	lsl	r9, r5, #2
   13540:	ldr	r3, [sp, #16]
   13544:	ldr	r4, [r3, r5, lsl #2]
   13548:	mov	r1, #58	; 0x3a
   1354c:	mov	r0, r4
   13550:	bl	113f4 <strchr@plt>
   13554:	subs	r7, r0, #0
   13558:	beq	134d8 <__assert_fail@plt+0x1f70>
   1355c:	cmp	r4, r7
   13560:	addeq	r6, r7, #1
   13564:	beq	134dc <__assert_fail@plt+0x1f74>
   13568:	ldrb	r3, [r4]
   1356c:	cmp	r3, #91	; 0x5b
   13570:	addne	r6, r7, #1
   13574:	movne	r3, #0
   13578:	strbne	r3, [r7]
   1357c:	beq	1349c <__assert_fail@plt+0x1f34>
   13580:	cmp	r4, #0
   13584:	beq	134dc <__assert_fail@plt+0x1f74>
   13588:	mov	r0, r4
   1358c:	bl	11b70 <__assert_fail@plt+0x608>
   13590:	cmp	r0, #0
   13594:	bne	1352c <__assert_fail@plt+0x1fc4>
   13598:	b	134dc <__assert_fail@plt+0x1f74>
   1359c:	mov	r6, r7
   135a0:	b	134dc <__assert_fail@plt+0x1f74>
   135a4:	beq	13600 <__assert_fail@plt+0x2098>
   135a8:	mov	r0, r6
   135ac:	bl	123e0 <__assert_fail@plt+0xe78>
   135b0:	mov	r4, r0
   135b4:	mov	r1, #420	; 0x1a4
   135b8:	mov	r0, r4
   135bc:	bl	11340 <creat64@plt>
   135c0:	subs	r5, r0, #0
   135c4:	blt	1360c <__assert_fail@plt+0x20a4>
   135c8:	ldr	r3, [pc, #196]	; 13694 <__assert_fail@plt+0x212c>
   135cc:	ldr	r3, [r3]
   135d0:	cmp	r3, #0
   135d4:	bne	13630 <__assert_fail@plt+0x20c8>
   135d8:	ldr	r0, [pc, #180]	; 13694 <__assert_fail@plt+0x212c>
   135dc:	ldrh	r1, [r0, #144]	; 0x90
   135e0:	add	r0, r0, #16
   135e4:	bl	11748 <__assert_fail@plt+0x1e0>
   135e8:	ldr	r2, [pc, #184]	; 136a8 <__assert_fail@plt+0x2140>
   135ec:	mov	r1, r6
   135f0:	mov	r0, r5
   135f4:	bl	12f6c <__assert_fail@plt+0x1a04>
   135f8:	add	sp, sp, #28
   135fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13600:	ldr	r3, [sp, #16]
   13604:	ldr	r4, [r3, #8]
   13608:	b	135b4 <__assert_fail@plt+0x204c>
   1360c:	ldr	r3, [pc, #156]	; 136b0 <__assert_fail@plt+0x2148>
   13610:	ldr	r3, [r3]
   13614:	mov	r2, #6
   13618:	mov	r1, #1
   1361c:	ldr	r0, [pc, #144]	; 136b4 <__assert_fail@plt+0x214c>
   13620:	bl	11310 <fwrite@plt>
   13624:	mov	r0, r4
   13628:	bl	11304 <perror@plt>
   1362c:	b	135f8 <__assert_fail@plt+0x2090>
   13630:	ldr	r3, [pc, #116]	; 136ac <__assert_fail@plt+0x2144>
   13634:	ldr	r1, [r3]
   13638:	ldr	r3, [pc, #104]	; 136a8 <__assert_fail@plt+0x2140>
   1363c:	str	r3, [sp]
   13640:	mov	r3, r4
   13644:	mov	r2, r6
   13648:	ldr	r0, [pc, #104]	; 136b8 <__assert_fail@plt+0x2150>
   1364c:	bl	11220 <printf@plt>
   13650:	b	135d8 <__assert_fail@plt+0x2070>
   13654:	ldr	r3, [pc, #84]	; 136b0 <__assert_fail@plt+0x2148>
   13658:	ldr	r3, [r3]
   1365c:	mov	r2, #6
   13660:	mov	r1, #1
   13664:	ldr	r0, [pc, #72]	; 136b4 <__assert_fail@plt+0x214c>
   13668:	bl	11310 <fwrite@plt>
   1366c:	mov	r0, r7
   13670:	bl	11304 <perror@plt>
   13674:	b	1352c <__assert_fail@plt+0x1fc4>
   13678:	str	sl, [sp]
   1367c:	mov	r3, r7
   13680:	mov	r2, r6
   13684:	ldr	r1, [fp]
   13688:	ldr	r0, [pc, #40]	; 136b8 <__assert_fail@plt+0x2150>
   1368c:	bl	11220 <printf@plt>
   13690:	b	13510 <__assert_fail@plt+0x1fa8>
   13694:	andeq	ip, r2, r4, ror #8
   13698:	andeq	sl, r1, r8, ror #16
   1369c:	andeq	sl, r1, r4, ror r8
   136a0:	andeq	sl, r1, r8, ror r8
   136a4:	andeq	sl, r1, r4, lsr #17
   136a8:	andeq	ip, r2, r4, asr #21
   136ac:	andeq	ip, r2, r0, asr #21
   136b0:	andeq	ip, r2, r0, asr r4
   136b4:	andeq	sl, r1, r4, lsr r8
   136b8:	ldrdeq	sl, [r1], -r0
   136bc:	ldr	r3, [pc, #52]	; 136f8 <__assert_fail@plt+0x2190>
   136c0:	mov	r2, #0
   136c4:	str	r2, [r3]
   136c8:	mvn	r0, #0
   136cc:	ldr	r1, [pc, #40]	; 136fc <__assert_fail@plt+0x2194>
   136d0:	str	r0, [r1]
   136d4:	ldr	r0, [pc, #36]	; 13700 <__assert_fail@plt+0x2198>
   136d8:	mvn	r1, #2
   136dc:	str	r1, [r0]
   136e0:	str	r2, [r3, #4]
   136e4:	mvn	r1, #1
   136e8:	str	r1, [r0, #520]	; 0x208
   136ec:	str	r2, [r3, #8]
   136f0:	add	r0, r0, #4
   136f4:	bx	lr
   136f8:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   136fc:	andeq	ip, r2, r8, lsl #8
   13700:	andeq	ip, r2, ip, lsr #23
   13704:	ldr	r3, [pc, #56]	; 13744 <__assert_fail@plt+0x21dc>
   13708:	mov	r2, #0
   1370c:	str	r2, [r3]
   13710:	mvn	r0, #0
   13714:	ldr	r1, [pc, #44]	; 13748 <__assert_fail@plt+0x21e0>
   13718:	str	r0, [r1]
   1371c:	ldr	r0, [pc, #40]	; 1374c <__assert_fail@plt+0x21e4>
   13720:	mvn	r1, #2
   13724:	str	r1, [r0]
   13728:	str	r2, [r3, #4]
   1372c:	mvn	r2, #1
   13730:	str	r2, [r0, #520]	; 0x208
   13734:	mov	r2, #1
   13738:	str	r2, [r3, #8]
   1373c:	add	r0, r0, #4
   13740:	bx	lr
   13744:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13748:	andeq	ip, r2, r8, lsl #8
   1374c:	andeq	ip, r2, ip, lsr #23
   13750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13754:	sub	sp, sp, #12
   13758:	ldr	r3, [pc, #232]	; 13848 <__assert_fail@plt+0x22e0>
   1375c:	ldr	sl, [r3, #8]
   13760:	add	r2, sl, sl, lsl #6
   13764:	ldr	r3, [pc, #224]	; 1384c <__assert_fail@plt+0x22e4>
   13768:	ldr	r3, [r3, r2, lsl #3]
   1376c:	cmn	r3, #2
   13770:	beq	1377c <__assert_fail@plt+0x2214>
   13774:	add	sp, sp, #12
   13778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1377c:	str	r0, [sp, #4]
   13780:	clz	r3, sl
   13784:	lsr	r3, r3, #5
   13788:	ldr	r2, [pc, #184]	; 13848 <__assert_fail@plt+0x22e0>
   1378c:	str	r3, [r2, #8]
   13790:	add	r6, sl, sl, lsl #6
   13794:	ldr	r3, [pc, #180]	; 13850 <__assert_fail@plt+0x22e8>
   13798:	add	r6, r3, r6, lsl #3
   1379c:	cmp	r1, #0
   137a0:	beq	137c4 <__assert_fail@plt+0x225c>
   137a4:	add	r9, r6, #4
   137a8:	add	r6, r6, #516	; 0x204
   137ac:	mov	r4, r9
   137b0:	ldr	r5, [pc, #144]	; 13848 <__assert_fail@plt+0x22e0>
   137b4:	ldr	r7, [pc, #152]	; 13854 <__assert_fail@plt+0x22ec>
   137b8:	mov	fp, #1
   137bc:	mov	r8, #0
   137c0:	b	13814 <__assert_fail@plt+0x22ac>
   137c4:	bl	11460 <fileno@plt>
   137c8:	mov	r2, #512	; 0x200
   137cc:	add	r1, r6, #4
   137d0:	bl	1122c <read@plt>
   137d4:	add	sl, sl, sl, lsl #6
   137d8:	ldr	r3, [pc, #108]	; 1384c <__assert_fail@plt+0x22e4>
   137dc:	str	r0, [r3, sl, lsl #3]
   137e0:	b	13774 <__assert_fail@plt+0x220c>
   137e4:	ldr	r0, [sp, #4]
   137e8:	bl	11550 <getc@plt>
   137ec:	cmn	r0, #1
   137f0:	beq	13834 <__assert_fail@plt+0x22cc>
   137f4:	cmp	r0, #13
   137f8:	cmpne	r0, #10
   137fc:	streq	r0, [r7]
   13800:	streq	fp, [r5]
   13804:	moveq	r0, #13
   13808:	strb	r0, [r4], #1
   1380c:	cmp	r4, r6
   13810:	beq	13834 <__assert_fail@plt+0x22cc>
   13814:	ldr	r3, [r5]
   13818:	cmp	r3, #0
   1381c:	beq	137e4 <__assert_fail@plt+0x227c>
   13820:	ldr	r0, [r7]
   13824:	cmp	r0, #10
   13828:	movne	r0, #0
   1382c:	str	r8, [r5]
   13830:	b	13808 <__assert_fail@plt+0x22a0>
   13834:	add	sl, sl, sl, lsl #6
   13838:	sub	r4, r4, r9
   1383c:	ldr	r3, [pc, #8]	; 1384c <__assert_fail@plt+0x22e4>
   13840:	str	r4, [r3, sl, lsl #3]
   13844:	b	13774 <__assert_fail@plt+0x220c>
   13848:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1384c:	andeq	ip, r2, ip, lsr #23
   13850:			; <UNDEFINED> instruction: 0x0002cbb0
   13854:	andeq	ip, r2, r8, lsl #8
   13858:	push	{r4, r5, r6, lr}
   1385c:	mov	r5, r1
   13860:	ldr	r3, [pc, #104]	; 138d0 <__assert_fail@plt+0x2368>
   13864:	ldr	r4, [r3, #4]
   13868:	ldr	ip, [pc, #100]	; 138d4 <__assert_fail@plt+0x236c>
   1386c:	add	lr, r4, r4, lsl #6
   13870:	mvn	r6, #1
   13874:	str	r6, [ip, lr, lsl #3]
   13878:	clz	r4, r4
   1387c:	lsr	r4, r4, #5
   13880:	str	r4, [r3, #4]
   13884:	lsl	r3, r4, #6
   13888:	add	r3, r3, r4
   1388c:	ldr	r3, [ip, r3, lsl #3]
   13890:	cmp	r3, r6
   13894:	beq	138c4 <__assert_fail@plt+0x235c>
   13898:	lsl	r3, r4, #6
   1389c:	add	r3, r3, r4
   138a0:	lsl	r3, r3, #3
   138a4:	add	r3, r3, #4
   138a8:	ldr	r2, [pc, #36]	; 138d4 <__assert_fail@plt+0x236c>
   138ac:	add	r3, r3, r2
   138b0:	str	r3, [r5]
   138b4:	lsl	r3, r4, #6
   138b8:	add	r4, r3, r4
   138bc:	ldr	r0, [r2, r4, lsl #3]
   138c0:	pop	{r4, r5, r6, pc}
   138c4:	mov	r1, r2
   138c8:	bl	13750 <__assert_fail@plt+0x21e8>
   138cc:	b	13898 <__assert_fail@plt+0x2330>
   138d0:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   138d4:	andeq	ip, r2, ip, lsr #23
   138d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   138dc:	sub	sp, sp, #8
   138e0:	ldr	r3, [pc, #220]	; 139c4 <__assert_fail@plt+0x245c>
   138e4:	ldr	r3, [r3, #8]
   138e8:	add	ip, r3, r3, lsl #6
   138ec:	ldr	r2, [pc, #212]	; 139c8 <__assert_fail@plt+0x2460>
   138f0:	ldr	r9, [r2, ip, lsl #3]
   138f4:	cmn	r9, #1
   138f8:	movlt	r9, #0
   138fc:	blt	13960 <__assert_fail@plt+0x23f8>
   13900:	mov	r4, r2
   13904:	lsl	r2, r3, #6
   13908:	mvn	lr, #1
   1390c:	str	lr, [r4, ip, lsl #3]
   13910:	clz	ip, r3
   13914:	lsr	ip, ip, #5
   13918:	ldr	lr, [pc, #164]	; 139c4 <__assert_fail@plt+0x245c>
   1391c:	str	ip, [lr, #8]
   13920:	add	r3, r2, r3
   13924:	add	r4, r4, r3, lsl #3
   13928:	add	r4, r4, #8
   1392c:	cmp	r9, #0
   13930:	ble	139bc <__assert_fail@plt+0x2454>
   13934:	mov	r7, r0
   13938:	cmp	r1, #0
   1393c:	addne	r8, r4, r9
   13940:	ldrne	r6, [pc, #132]	; 139cc <__assert_fail@plt+0x2464>
   13944:	movne	sl, #1
   13948:	bne	13998 <__assert_fail@plt+0x2430>
   1394c:	bl	11460 <fileno@plt>
   13950:	mov	r2, r9
   13954:	mov	r1, r4
   13958:	bl	11454 <write@plt>
   1395c:	mov	r9, r0
   13960:	mov	r0, r9
   13964:	add	sp, sp, #8
   13968:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1396c:	str	sl, [sp]
   13970:	mvn	r2, #0
   13974:	mvn	r3, #0
   13978:	mov	r0, r7
   1397c:	bl	11484 <fseeko64@plt>
   13980:	mov	r1, r7
   13984:	mov	r0, r5
   13988:	bl	114d8 <putc@plt>
   1398c:	str	r5, [r6]
   13990:	cmp	r4, r8
   13994:	beq	13960 <__assert_fail@plt+0x23f8>
   13998:	ldrb	r5, [r4], #1
   1399c:	ldr	r3, [r6]
   139a0:	cmp	r3, #13
   139a4:	bne	13980 <__assert_fail@plt+0x2418>
   139a8:	cmp	r5, #10
   139ac:	beq	1396c <__assert_fail@plt+0x2404>
   139b0:	cmp	r5, #0
   139b4:	beq	1398c <__assert_fail@plt+0x2424>
   139b8:	b	13980 <__assert_fail@plt+0x2418>
   139bc:	mvn	r9, #0
   139c0:	b	13960 <__assert_fail@plt+0x23f8>
   139c4:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   139c8:	andeq	ip, r2, ip, lsr #23
   139cc:	andeq	ip, r2, r8, lsl #8
   139d0:	push	{r4, r5, r6, lr}
   139d4:	mov	r5, r1
   139d8:	mov	r4, r2
   139dc:	ldr	ip, [pc, #100]	; 13a48 <__assert_fail@plt+0x24e0>
   139e0:	ldr	r2, [ip, #4]
   139e4:	ldr	lr, [pc, #96]	; 13a4c <__assert_fail@plt+0x24e4>
   139e8:	add	r6, r2, r2, lsl #6
   139ec:	str	r4, [lr, r6, lsl #3]
   139f0:	clz	r2, r2
   139f4:	lsr	r2, r2, #5
   139f8:	str	r2, [ip, #4]
   139fc:	lsl	ip, r2, #6
   13a00:	add	r2, ip, r2
   13a04:	ldr	r2, [lr, r2, lsl #3]
   13a08:	cmn	r2, #2
   13a0c:	beq	13a18 <__assert_fail@plt+0x24b0>
   13a10:	mov	r1, r3
   13a14:	bl	138d8 <__assert_fail@plt+0x2370>
   13a18:	ldr	r3, [pc, #40]	; 13a48 <__assert_fail@plt+0x24e0>
   13a1c:	ldr	r1, [r3, #4]
   13a20:	ldr	r3, [pc, #36]	; 13a4c <__assert_fail@plt+0x24e4>
   13a24:	lsl	r2, r1, #6
   13a28:	add	r0, r2, r1
   13a2c:	mvn	ip, #2
   13a30:	str	ip, [r3, r0, lsl #3]
   13a34:	add	r3, r3, r0, lsl #3
   13a38:	add	r3, r3, #4
   13a3c:	str	r3, [r5]
   13a40:	mov	r0, r4
   13a44:	pop	{r4, r5, r6, pc}
   13a48:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13a4c:	andeq	ip, r2, ip, lsr #23
   13a50:	push	{r4, r5, r6, r7, r8, r9, lr}
   13a54:	sub	sp, sp, #668	; 0x29c
   13a58:	mov	r5, r0
   13a5c:	mov	r4, #0
   13a60:	ldr	r6, [pc, #88]	; 13ac0 <__assert_fail@plt+0x2558>
   13a64:	mov	r9, #128	; 0x80
   13a68:	add	r8, sp, #16
   13a6c:	add	r7, sp, #12
   13a70:	add	r2, sp, #660	; 0x294
   13a74:	mov	r1, r6
   13a78:	mov	r0, r5
   13a7c:	bl	17f74 <argp_parse@@Base+0xd04>
   13a80:	ldr	r3, [sp, #660]	; 0x294
   13a84:	cmp	r3, #0
   13a88:	beq	13ab4 <__assert_fail@plt+0x254c>
   13a8c:	add	r4, r4, #1
   13a90:	str	r9, [sp, #12]
   13a94:	str	r7, [sp, #4]
   13a98:	str	r8, [sp]
   13a9c:	mov	r3, #0
   13aa0:	mov	r2, #516	; 0x204
   13aa4:	add	r1, sp, #144	; 0x90
   13aa8:	mov	r0, r5
   13aac:	bl	112c8 <recvfrom@plt>
   13ab0:	b	13a70 <__assert_fail@plt+0x2508>
   13ab4:	mov	r0, r4
   13ab8:	add	sp, sp, #668	; 0x29c
   13abc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13ac0:	andeq	r5, r0, fp, lsl r4
   13ac4:	ldr	r3, [r0]
   13ac8:	ldr	r2, [r0, #4]
   13acc:	cmp	r2, #0
   13ad0:	beq	13b0c <__assert_fail@plt+0x25a4>
   13ad4:	add	r3, r3, #24
   13ad8:	b	13ae8 <__assert_fail@plt+0x2580>
   13adc:	add	r3, r3, #24
   13ae0:	subs	r2, r2, #1
   13ae4:	beq	13b04 <__assert_fail@plt+0x259c>
   13ae8:	ldr	r0, [r3, #-24]	; 0xffffffe8
   13aec:	cmp	r0, #0
   13af0:	beq	13adc <__assert_fail@plt+0x2574>
   13af4:	ldr	r1, [r3, #-12]
   13af8:	tst	r1, #2
   13afc:	bne	13adc <__assert_fail@plt+0x2574>
   13b00:	bx	lr
   13b04:	mov	r0, #0
   13b08:	bx	lr
   13b0c:	mov	r0, #0
   13b10:	bx	lr
   13b14:	ldr	r2, [r0, #8]
   13b18:	cmp	r2, #0
   13b1c:	beq	13b28 <__assert_fail@plt+0x25c0>
   13b20:	mov	r0, #0
   13b24:	bx	lr
   13b28:	ldr	r2, [r1, #8]
   13b2c:	cmp	r2, #0
   13b30:	bne	13b20 <__assert_fail@plt+0x25b8>
   13b34:	ldr	r2, [r0, #12]
   13b38:	ldr	r1, [r1, #12]
   13b3c:	orr	r2, r2, r1
   13b40:	tst	r2, #16
   13b44:	ldreq	r2, [r3]
   13b48:	addeq	r1, r2, #1
   13b4c:	streq	r1, [r3]
   13b50:	ldreq	r3, [r0, #4]
   13b54:	strbeq	r3, [r2]
   13b58:	b	13b20 <__assert_fail@plt+0x25b8>
   13b5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b60:	sub	sp, sp, #12
   13b64:	ldr	r4, [r0]
   13b68:	ldr	r9, [r0, #8]
   13b6c:	ldr	r5, [r0, #4]
   13b70:	cmp	r5, #0
   13b74:	beq	13bc8 <__assert_fail@plt+0x2660>
   13b78:	str	r3, [sp, #4]
   13b7c:	str	r2, [sp]
   13b80:	mov	fp, r1
   13b84:	mov	sl, r4
   13b88:	mov	r8, #0
   13b8c:	b	13c08 <__assert_fail@plt+0x26a0>
   13b90:	and	r3, r6, #4
   13b94:	cmp	r3, #0
   13b98:	moveq	sl, r4
   13b9c:	tst	r6, #2
   13ba0:	beq	13bac <__assert_fail@plt+0x2644>
   13ba4:	add	r9, r9, #1
   13ba8:	b	13be4 <__assert_fail@plt+0x267c>
   13bac:	ldr	r3, [sp, #4]
   13bb0:	ldr	r2, [sp]
   13bb4:	mov	r1, sl
   13bb8:	mov	r0, r4
   13bbc:	blx	fp
   13bc0:	mov	r8, r0
   13bc4:	b	13ba4 <__assert_fail@plt+0x263c>
   13bc8:	mov	r8, #0
   13bcc:	mov	r0, r8
   13bd0:	add	sp, sp, #12
   13bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bd8:	ldrb	r3, [r9]
   13bdc:	cmp	r3, r7
   13be0:	beq	13b90 <__assert_fail@plt+0x2628>
   13be4:	add	r4, r4, #24
   13be8:	subs	r5, r5, #1
   13bec:	movne	r3, #1
   13bf0:	moveq	r3, #0
   13bf4:	cmp	r8, #0
   13bf8:	movne	r3, #0
   13bfc:	andeq	r3, r3, #1
   13c00:	cmp	r3, #0
   13c04:	beq	13bcc <__assert_fail@plt+0x2664>
   13c08:	ldr	r6, [r4, #12]
   13c0c:	tst	r6, #8
   13c10:	bne	13be4 <__assert_fail@plt+0x267c>
   13c14:	ldr	r7, [r4, #4]
   13c18:	sub	r3, r7, #1
   13c1c:	cmp	r3, #254	; 0xfe
   13c20:	bhi	13be4 <__assert_fail@plt+0x267c>
   13c24:	bl	113c4 <__ctype_b_loc@plt>
   13c28:	ldr	r2, [r0]
   13c2c:	lsl	r3, r7, #1
   13c30:	ldrh	r3, [r2, r3]
   13c34:	tst	r3, #16384	; 0x4000
   13c38:	bne	13bd8 <__assert_fail@plt+0x2670>
   13c3c:	b	13be4 <__assert_fail@plt+0x267c>
   13c40:	push	{r4, r5, r6, lr}
   13c44:	ldr	r4, [r0, #12]
   13c48:	ands	r4, r4, #8
   13c4c:	movne	r4, #0
   13c50:	bne	13c80 <__assert_fail@plt+0x2718>
   13c54:	ldr	r5, [r0, #4]
   13c58:	sub	r3, r5, #1
   13c5c:	cmp	r3, #254	; 0xfe
   13c60:	bhi	13c80 <__assert_fail@plt+0x2718>
   13c64:	bl	113c4 <__ctype_b_loc@plt>
   13c68:	ldr	r2, [r0]
   13c6c:	lsl	r3, r5, #1
   13c70:	ldrh	r3, [r2, r3]
   13c74:	and	r3, r3, #16384	; 0x4000
   13c78:	cmp	r3, #0
   13c7c:	movne	r4, r5
   13c80:	mov	r0, r4
   13c84:	pop	{r4, r5, r6, pc}
   13c88:	push	{r4, lr}
   13c8c:	mov	r4, r0
   13c90:	bl	113c4 <__ctype_b_loc@plt>
   13c94:	b	13ca0 <__assert_fail@plt+0x2738>
   13c98:	add	r3, r3, #1
   13c9c:	str	r3, [r4]
   13ca0:	ldr	r3, [r4]
   13ca4:	ldrb	r2, [r3]
   13ca8:	ldr	ip, [r0]
   13cac:	lsl	r1, r2, #1
   13cb0:	ldrh	r1, [ip, r1]
   13cb4:	tst	r1, #8192	; 0x2000
   13cb8:	bne	13c98 <__assert_fail@plt+0x2730>
   13cbc:	subs	ip, r2, #45	; 0x2d
   13cc0:	movne	ip, #1
   13cc4:	cmp	r2, #0
   13cc8:	beq	13cfc <__assert_fail@plt+0x2794>
   13ccc:	tst	r1, #8
   13cd0:	bne	13cfc <__assert_fail@plt+0x2794>
   13cd4:	add	r3, r3, #1
   13cd8:	str	r3, [r4]
   13cdc:	ldrb	r2, [r3]
   13ce0:	cmp	r2, #0
   13ce4:	beq	13cfc <__assert_fail@plt+0x2794>
   13ce8:	ldr	r1, [r0]
   13cec:	lsl	r2, r2, #1
   13cf0:	ldrh	r2, [r1, r2]
   13cf4:	tst	r2, #8
   13cf8:	beq	13cd4 <__assert_fail@plt+0x276c>
   13cfc:	mov	r0, ip
   13d00:	pop	{r4, pc}
   13d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d08:	add	fp, sp, #32
   13d0c:	sub	sp, sp, #12
   13d10:	ldr	r5, [r0, #4]
   13d14:	cmp	r5, #0
   13d18:	bne	13d24 <__assert_fail@plt+0x27bc>
   13d1c:	sub	sp, fp, #32
   13d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d24:	mov	r9, r1
   13d28:	mov	r6, r0
   13d2c:	ldr	r0, [r0, #8]
   13d30:	bl	113e8 <strlen@plt>
   13d34:	add	r3, r0, #15
   13d38:	bic	r3, r3, #7
   13d3c:	sub	sp, sp, r3
   13d40:	mov	sl, sp
   13d44:	sub	r7, fp, #36	; 0x24
   13d48:	str	sp, [r7, #-4]!
   13d4c:	ldr	r4, [r6]
   13d50:	ldr	r8, [pc, #336]	; 13ea8 <__assert_fail@plt+0x2940>
   13d54:	ldr	r2, [r4, #20]
   13d58:	mov	r3, r7
   13d5c:	ldr	r2, [r2, #24]
   13d60:	mov	r1, r8
   13d64:	mov	r0, r4
   13d68:	bl	13b5c <__assert_fail@plt+0x25f4>
   13d6c:	add	r4, r4, #28
   13d70:	subs	r5, r5, #1
   13d74:	bne	13d54 <__assert_fail@plt+0x27ec>
   13d78:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13d7c:	cmp	sl, r3
   13d80:	bcc	13dd8 <__assert_fail@plt+0x2870>
   13d84:	ldr	r4, [r6]
   13d88:	ldr	r5, [r6, #4]
   13d8c:	cmp	r5, #0
   13d90:	beq	13d1c <__assert_fail@plt+0x27b4>
   13d94:	ldr	r7, [pc, #272]	; 13eac <__assert_fail@plt+0x2944>
   13d98:	ldr	r2, [r4, #20]
   13d9c:	mov	r3, r9
   13da0:	ldr	r2, [r2, #24]
   13da4:	mov	r1, r7
   13da8:	mov	r0, r4
   13dac:	bl	13b5c <__assert_fail@plt+0x25f4>
   13db0:	add	r4, r4, #28
   13db4:	subs	r5, r5, #1
   13db8:	bne	13d98 <__assert_fail@plt+0x2830>
   13dbc:	ldr	r7, [r6]
   13dc0:	ldr	r8, [r6, #4]
   13dc4:	cmp	r8, #0
   13dc8:	beq	13d1c <__assert_fail@plt+0x27b4>
   13dcc:	add	r7, r7, #28
   13dd0:	ldr	sl, [pc, #216]	; 13eb0 <__assert_fail@plt+0x2948>
   13dd4:	b	13e90 <__assert_fail@plt+0x2928>
   13dd8:	add	r2, r3, #1
   13ddc:	str	r2, [fp, #-40]	; 0xffffffd8
   13de0:	mov	r2, #0
   13de4:	strb	r2, [r3]
   13de8:	mov	r2, sl
   13dec:	ldr	r1, [pc, #192]	; 13eb4 <__assert_fail@plt+0x294c>
   13df0:	mov	r0, r9
   13df4:	bl	19228 <argp_parse@@Base+0x1fb8>
   13df8:	b	13d84 <__assert_fail@plt+0x281c>
   13dfc:	tst	r1, #16
   13e00:	bne	13e24 <__assert_fail@plt+0x28bc>
   13e04:	ldr	r3, [r6, #8]
   13e08:	cmp	r3, #0
   13e0c:	beq	13e74 <__assert_fail@plt+0x290c>
   13e10:	tst	r1, #1
   13e14:	ldrne	r1, [pc, #156]	; 13eb8 <__assert_fail@plt+0x2950>
   13e18:	moveq	r1, sl
   13e1c:	mov	r0, r9
   13e20:	bl	19228 <argp_parse@@Base+0x1fb8>
   13e24:	add	r4, r4, #24
   13e28:	subs	r5, r5, #1
   13e2c:	beq	13e84 <__assert_fail@plt+0x291c>
   13e30:	ldr	r2, [r4]
   13e34:	cmp	r2, #0
   13e38:	beq	13e24 <__assert_fail@plt+0x28bc>
   13e3c:	ldr	r1, [r4, #12]
   13e40:	and	r3, r1, #4
   13e44:	cmp	r3, #0
   13e48:	moveq	r6, r4
   13e4c:	tst	r1, #2
   13e50:	bne	13e24 <__assert_fail@plt+0x28bc>
   13e54:	ldr	r3, [r4, #8]
   13e58:	ldr	r0, [r6, #12]
   13e5c:	orr	r1, r1, r0
   13e60:	cmp	r3, #0
   13e64:	beq	13dfc <__assert_fail@plt+0x2894>
   13e68:	tst	r1, #16
   13e6c:	beq	13e10 <__assert_fail@plt+0x28a8>
   13e70:	b	13e24 <__assert_fail@plt+0x28bc>
   13e74:	ldr	r1, [pc, #64]	; 13ebc <__assert_fail@plt+0x2954>
   13e78:	mov	r0, r9
   13e7c:	bl	19228 <argp_parse@@Base+0x1fb8>
   13e80:	b	13e24 <__assert_fail@plt+0x28bc>
   13e84:	add	r7, r7, #28
   13e88:	subs	r8, r8, #1
   13e8c:	beq	13d1c <__assert_fail@plt+0x27b4>
   13e90:	ldr	r4, [r7, #-28]	; 0xffffffe4
   13e94:	ldr	r5, [r7, #-24]	; 0xffffffe8
   13e98:	cmp	r5, #0
   13e9c:	beq	13e84 <__assert_fail@plt+0x291c>
   13ea0:	mov	r6, r4
   13ea4:	b	13e30 <__assert_fail@plt+0x28c8>
   13ea8:	andeq	r3, r1, r4, lsl fp
   13eac:	andeq	r4, r1, r4, asr r1
   13eb0:	strdeq	sl, [r1], -r8
   13eb4:	andeq	sl, r1, r0, ror #21
   13eb8:	andeq	sl, r1, r8, ror #21
   13ebc:	andeq	sl, r1, r4, lsl #22
   13ec0:	push	{r4, r5, r6, lr}
   13ec4:	mov	r5, r0
   13ec8:	ldr	r0, [r0, #12]
   13ecc:	cmp	r0, #0
   13ed0:	beq	13ee8 <__assert_fail@plt+0x2980>
   13ed4:	ldr	r4, [r0, #24]
   13ed8:	bl	17e64 <argp_parse@@Base+0xbf4>
   13edc:	mov	r0, r4
   13ee0:	cmp	r4, #0
   13ee4:	bne	13ed4 <__assert_fail@plt+0x296c>
   13ee8:	ldr	r3, [r5, #4]
   13eec:	cmp	r3, #0
   13ef0:	bne	13f00 <__assert_fail@plt+0x2998>
   13ef4:	mov	r0, r5
   13ef8:	bl	17e64 <argp_parse@@Base+0xbf4>
   13efc:	pop	{r4, r5, r6, pc}
   13f00:	ldr	r0, [r5]
   13f04:	bl	17e64 <argp_parse@@Base+0xbf4>
   13f08:	ldr	r0, [r5, #8]
   13f0c:	bl	17e64 <argp_parse@@Base+0xbf4>
   13f10:	b	13ef4 <__assert_fail@plt+0x298c>
   13f14:	push	{r4, r5, r6, r7, r8, lr}
   13f18:	mov	r6, r1
   13f1c:	ldr	r7, [r0]
   13f20:	ldr	r3, [r0, #4]
   13f24:	sub	r8, r3, #1
   13f28:	cmp	r3, #0
   13f2c:	bne	13f88 <__assert_fail@plt+0x2a20>
   13f30:	mov	r7, #0
   13f34:	b	13f70 <__assert_fail@plt+0x2a08>
   13f38:	sub	r5, r5, #1
   13f3c:	add	r4, r4, #24
   13f40:	cmn	r5, #1
   13f44:	beq	13f78 <__assert_fail@plt+0x2a10>
   13f48:	ldr	r0, [r4, #-24]	; 0xffffffe8
   13f4c:	cmp	r0, #0
   13f50:	beq	13f38 <__assert_fail@plt+0x29d0>
   13f54:	ldr	r3, [r4, #-12]
   13f58:	tst	r3, #2
   13f5c:	bne	13f38 <__assert_fail@plt+0x29d0>
   13f60:	mov	r1, r6
   13f64:	bl	11208 <strcmp@plt>
   13f68:	cmp	r0, #0
   13f6c:	bne	13f38 <__assert_fail@plt+0x29d0>
   13f70:	mov	r0, r7
   13f74:	pop	{r4, r5, r6, r7, r8, pc}
   13f78:	add	r7, r7, #28
   13f7c:	sub	r8, r8, #1
   13f80:	cmn	r8, #1
   13f84:	beq	13fa4 <__assert_fail@plt+0x2a3c>
   13f88:	ldr	r4, [r7]
   13f8c:	ldr	r3, [r7, #4]
   13f90:	sub	r5, r3, #1
   13f94:	cmp	r3, #0
   13f98:	beq	13f78 <__assert_fail@plt+0x2a10>
   13f9c:	add	r4, r4, #24
   13fa0:	b	13f48 <__assert_fail@plt+0x29e0>
   13fa4:	mov	r7, #0
   13fa8:	b	13f70 <__assert_fail@plt+0x2a08>
   13fac:	push	{r4, r5, r6, lr}
   13fb0:	ldr	r4, [r0, #16]
   13fb4:	ldr	r0, [r0, #8]
   13fb8:	cmp	r0, #0
   13fbc:	moveq	r5, #0
   13fc0:	beq	13fd4 <__assert_fail@plt+0x2a6c>
   13fc4:	mov	r1, #10
   13fc8:	bl	113f4 <strchr@plt>
   13fcc:	adds	r5, r0, #0
   13fd0:	movne	r5, #1
   13fd4:	cmp	r4, #0
   13fd8:	beq	13ffc <__assert_fail@plt+0x2a94>
   13fdc:	ldr	r0, [r4]
   13fe0:	cmp	r0, #0
   13fe4:	beq	13ffc <__assert_fail@plt+0x2a94>
   13fe8:	bl	13fac <__assert_fail@plt+0x2a44>
   13fec:	add	r5, r5, r0
   13ff0:	ldr	r0, [r4, #16]!
   13ff4:	cmp	r0, #0
   13ff8:	bne	13fe8 <__assert_fail@plt+0x2a80>
   13ffc:	mov	r0, r5
   14000:	pop	{r4, r5, r6, pc}
   14004:	push	{r4, r5, r6, r7, r8, lr}
   14008:	mov	r4, r0
   1400c:	mov	r5, r1
   14010:	ldr	r3, [r0, #28]
   14014:	ldr	r2, [r0, #24]
   14018:	sub	r3, r3, r2
   1401c:	ldr	r2, [r0, #16]
   14020:	cmp	r3, r2
   14024:	bhi	14040 <__assert_fail@plt+0x2ad8>
   14028:	ldr	r3, [r4, #20]
   1402c:	cmp	r3, #0
   14030:	subge	r5, r5, r3
   14034:	mov	r6, #32
   14038:	mov	r7, #1
   1403c:	b	1405c <__assert_fail@plt+0x2af4>
   14040:	bl	18b94 <argp_parse@@Base+0x1924>
   14044:	b	14028 <__assert_fail@plt+0x2ac0>
   14048:	ldr	r3, [r4, #28]
   1404c:	add	r2, r3, #1
   14050:	str	r2, [r4, #28]
   14054:	strb	r6, [r3]
   14058:	sub	r5, r5, #1
   1405c:	cmp	r5, #0
   14060:	ble	1408c <__assert_fail@plt+0x2b24>
   14064:	ldr	r2, [r4, #28]
   14068:	ldr	r3, [r4, #32]
   1406c:	cmp	r2, r3
   14070:	bcc	14048 <__assert_fail@plt+0x2ae0>
   14074:	mov	r1, r7
   14078:	mov	r0, r4
   1407c:	bl	19138 <argp_parse@@Base+0x1ec8>
   14080:	cmp	r0, #0
   14084:	beq	14058 <__assert_fail@plt+0x2af0>
   14088:	b	14048 <__assert_fail@plt+0x2ae0>
   1408c:	pop	{r4, r5, r6, r7, r8, pc}
   14090:	push	{r4, r5, r6, lr}
   14094:	mov	r4, r0
   14098:	mov	r5, r1
   1409c:	ldr	r3, [r0, #28]
   140a0:	ldr	r2, [r0, #24]
   140a4:	sub	r3, r3, r2
   140a8:	ldr	r2, [r0, #16]
   140ac:	cmp	r3, r2
   140b0:	bhi	140f4 <__assert_fail@plt+0x2b8c>
   140b4:	ldr	r3, [r4, #20]
   140b8:	cmp	r3, #0
   140bc:	addge	r5, r5, r3
   140c0:	ldr	r3, [r4, #8]
   140c4:	cmp	r5, r3
   140c8:	bcc	14114 <__assert_fail@plt+0x2bac>
   140cc:	ldr	r2, [r4, #28]
   140d0:	ldr	r3, [r4, #32]
   140d4:	cmp	r2, r3
   140d8:	bcs	140fc <__assert_fail@plt+0x2b94>
   140dc:	ldr	r3, [r4, #28]
   140e0:	add	r2, r3, #1
   140e4:	str	r2, [r4, #28]
   140e8:	mov	r2, #10
   140ec:	strb	r2, [r3]
   140f0:	pop	{r4, r5, r6, pc}
   140f4:	bl	18b94 <argp_parse@@Base+0x1924>
   140f8:	b	140b4 <__assert_fail@plt+0x2b4c>
   140fc:	mov	r1, #1
   14100:	mov	r0, r4
   14104:	bl	19138 <argp_parse@@Base+0x1ec8>
   14108:	cmp	r0, #0
   1410c:	popeq	{r4, r5, r6, pc}
   14110:	b	140dc <__assert_fail@plt+0x2b74>
   14114:	ldr	r2, [r4, #28]
   14118:	ldr	r3, [r4, #32]
   1411c:	cmp	r2, r3
   14120:	bcs	1413c <__assert_fail@plt+0x2bd4>
   14124:	ldr	r3, [r4, #28]
   14128:	add	r2, r3, #1
   1412c:	str	r2, [r4, #28]
   14130:	mov	r2, #32
   14134:	strb	r2, [r3]
   14138:	pop	{r4, r5, r6, pc}
   1413c:	mov	r1, #1
   14140:	mov	r0, r4
   14144:	bl	19138 <argp_parse@@Base+0x1ec8>
   14148:	cmp	r0, #0
   1414c:	bne	14124 <__assert_fail@plt+0x2bbc>
   14150:	pop	{r4, r5, r6, pc}
   14154:	push	{r4, r5, r6, lr}
   14158:	ldr	r5, [r0, #8]
   1415c:	ldr	r2, [r0, #12]
   14160:	ldr	ip, [r1, #12]
   14164:	orr	r2, r2, ip
   14168:	cmp	r5, #0
   1416c:	beq	141b8 <__assert_fail@plt+0x2c50>
   14170:	tst	r2, #16
   14174:	bne	141b0 <__assert_fail@plt+0x2c48>
   14178:	mov	r6, r3
   1417c:	mov	r4, r0
   14180:	tst	r2, #1
   14184:	bne	141c8 <__assert_fail@plt+0x2c60>
   14188:	mov	r0, r5
   1418c:	bl	113e8 <strlen@plt>
   14190:	add	r1, r0, #6
   14194:	mov	r0, r6
   14198:	bl	14090 <__assert_fail@plt+0x2b28>
   1419c:	mov	r3, r5
   141a0:	ldr	r2, [r4, #4]
   141a4:	ldr	r1, [pc, #52]	; 141e0 <__assert_fail@plt+0x2c78>
   141a8:	mov	r0, r6
   141ac:	bl	19228 <argp_parse@@Base+0x1fb8>
   141b0:	mov	r0, #0
   141b4:	pop	{r4, r5, r6, pc}
   141b8:	ldr	r5, [r1, #8]
   141bc:	cmp	r5, #0
   141c0:	beq	141b0 <__assert_fail@plt+0x2c48>
   141c4:	b	14170 <__assert_fail@plt+0x2c08>
   141c8:	mov	r3, r5
   141cc:	ldr	r2, [r0, #4]
   141d0:	ldr	r1, [pc, #12]	; 141e4 <__assert_fail@plt+0x2c7c>
   141d4:	mov	r0, r6
   141d8:	bl	19228 <argp_parse@@Base+0x1fb8>
   141dc:	b	141b0 <__assert_fail@plt+0x2c48>
   141e0:	andeq	sl, r1, r8, lsl fp
   141e4:	andeq	sl, r1, ip, lsl #22
   141e8:	push	{r4, r5, r6, lr}
   141ec:	subs	r5, r2, #0
   141f0:	popeq	{r4, r5, r6, pc}
   141f4:	ldr	ip, [r5, #20]
   141f8:	cmp	ip, #0
   141fc:	popeq	{r4, r5, r6, pc}
   14200:	mov	r6, r1
   14204:	mov	r4, r0
   14208:	mov	r1, r3
   1420c:	mov	r0, r5
   14210:	bl	17ce4 <argp_parse@@Base+0xa74>
   14214:	ldr	r3, [r5, #20]
   14218:	mov	r2, r0
   1421c:	mov	r1, r4
   14220:	mov	r0, r6
   14224:	blx	r3
   14228:	pop	{r4, r5, r6, pc}
   1422c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14230:	sub	sp, sp, #28
   14234:	str	r1, [sp, #16]
   14238:	mov	r8, r2
   1423c:	mov	r4, r3
   14240:	ldr	r5, [sp, #64]	; 0x40
   14244:	ldr	r3, [r2]
   14248:	mov	r6, r3
   1424c:	str	r3, [sp, #20]
   14250:	ldr	sl, [r0, #16]
   14254:	ldr	r2, [r0, #8]
   14258:	mov	ip, r2
   1425c:	str	r2, [sp, #12]
   14260:	mov	r3, r1
   14264:	mov	r2, r0
   14268:	ldr	r1, [pc, #424]	; 14418 <__assert_fail@plt+0x2eb0>
   1426c:	mov	r0, ip
   14270:	bl	141e8 <__assert_fail@plt+0x2c80>
   14274:	subs	r3, r0, #0
   14278:	str	r3, [sp, #8]
   1427c:	beq	14404 <__assert_fail@plt+0x2e9c>
   14280:	mov	r1, #10
   14284:	mov	r0, r3
   14288:	bl	1125c <strchrnul@plt>
   1428c:	mov	r7, r0
   14290:	ldrb	r3, [r0]
   14294:	cmp	r3, #0
   14298:	beq	143d4 <__assert_fail@plt+0x2e6c>
   1429c:	ldrb	fp, [r6]
   142a0:	cmp	fp, #0
   142a4:	ble	143cc <__assert_fail@plt+0x2e64>
   142a8:	mov	r6, #0
   142ac:	add	r9, r0, #1
   142b0:	mov	r1, #10
   142b4:	mov	r0, r9
   142b8:	bl	1125c <strchrnul@plt>
   142bc:	add	r6, r6, #1
   142c0:	cmp	r6, fp
   142c4:	bne	142ac <__assert_fail@plt+0x2d44>
   142c8:	mov	r7, r0
   142cc:	ldr	r3, [r8]
   142d0:	add	r3, r3, #1
   142d4:	str	r3, [r8]
   142d8:	mov	fp, #1
   142dc:	add	r1, r7, #1
   142e0:	sub	r1, r1, r9
   142e4:	mov	r0, r5
   142e8:	bl	14090 <__assert_fail@plt+0x2b28>
   142ec:	sub	r6, r7, r9
   142f0:	ldr	r3, [r5, #28]
   142f4:	add	r3, r3, r6
   142f8:	ldr	r2, [r5, #32]
   142fc:	cmp	r2, r3
   14300:	bcs	14318 <__assert_fail@plt+0x2db0>
   14304:	mov	r1, r6
   14308:	mov	r0, r5
   1430c:	bl	19138 <argp_parse@@Base+0x1ec8>
   14310:	cmp	r0, #0
   14314:	beq	14334 <__assert_fail@plt+0x2dcc>
   14318:	mov	r2, r6
   1431c:	mov	r1, r9
   14320:	ldr	r0, [r5, #28]
   14324:	bl	11298 <memcpy@plt>
   14328:	ldr	r3, [r5, #28]
   1432c:	add	r6, r3, r6
   14330:	str	r6, [r5, #28]
   14334:	ldr	r3, [sp, #12]
   14338:	ldr	r2, [sp, #8]
   1433c:	cmp	r3, r2
   14340:	bne	143e0 <__assert_fail@plt+0x2e78>
   14344:	cmp	sl, #0
   14348:	beq	14388 <__assert_fail@plt+0x2e20>
   1434c:	ldr	r0, [sl]
   14350:	cmp	r0, #0
   14354:	beq	14388 <__assert_fail@plt+0x2e20>
   14358:	mov	r3, r4
   1435c:	ldr	r4, [sp, #16]
   14360:	str	r5, [sp]
   14364:	mov	r2, r8
   14368:	mov	r1, r4
   1436c:	bl	1422c <__assert_fail@plt+0x2cc4>
   14370:	clz	r3, r0
   14374:	lsr	r3, r3, #5
   14378:	ldr	r0, [sl, #16]!
   1437c:	cmp	r0, #0
   14380:	bne	14360 <__assert_fail@plt+0x2df8>
   14384:	mov	r4, r3
   14388:	cmp	r4, #0
   1438c:	moveq	fp, #0
   14390:	andne	fp, fp, #1
   14394:	cmp	fp, #0
   14398:	beq	143bc <__assert_fail@plt+0x2e54>
   1439c:	ldrb	r3, [r7]
   143a0:	cmp	r3, #0
   143a4:	bne	143ec <__assert_fail@plt+0x2e84>
   143a8:	ldr	r2, [sp, #20]
   143ac:	ldrb	r3, [r2]
   143b0:	cmp	r3, #0
   143b4:	movne	r3, #0
   143b8:	strbne	r3, [r2]
   143bc:	clz	r0, r4
   143c0:	lsr	r0, r0, #5
   143c4:	add	sp, sp, #28
   143c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143cc:	ldr	r9, [sp, #8]
   143d0:	b	142cc <__assert_fail@plt+0x2d64>
   143d4:	ldr	r9, [sp, #8]
   143d8:	mov	fp, #0
   143dc:	b	142dc <__assert_fail@plt+0x2d74>
   143e0:	mov	r0, r2
   143e4:	bl	17e64 <argp_parse@@Base+0xbf4>
   143e8:	b	14344 <__assert_fail@plt+0x2ddc>
   143ec:	ldr	r2, [sp, #20]
   143f0:	ldrb	r3, [r2]
   143f4:	add	r3, r3, #1
   143f8:	strb	r3, [r2]
   143fc:	mov	r4, #0
   14400:	b	143bc <__assert_fail@plt+0x2e54>
   14404:	cmp	sl, #0
   14408:	beq	143bc <__assert_fail@plt+0x2e54>
   1440c:	ldr	r7, [sp, #8]
   14410:	mov	fp, #0
   14414:	b	1434c <__assert_fail@plt+0x2de4>
   14418:	andeq	r0, r0, #6
   1441c:	push	{r4, r5, r6, r7, r8, lr}
   14420:	mov	r7, r0
   14424:	mov	r4, r2
   14428:	ldr	r3, [r2, #16]
   1442c:	mov	r2, r1
   14430:	ldr	r1, [pc, #448]	; 145f8 <__assert_fail@plt+0x3090>
   14434:	bl	141e8 <__assert_fail@plt+0x2c80>
   14438:	subs	r5, r0, #0
   1443c:	beq	14590 <__assert_fail@plt+0x3028>
   14440:	ldrb	r3, [r5]
   14444:	cmp	r3, #0
   14448:	beq	14584 <__assert_fail@plt+0x301c>
   1444c:	ldr	r3, [r4, #8]
   14450:	ldr	r3, [r3]
   14454:	cmp	r3, #0
   14458:	beq	14484 <__assert_fail@plt+0x2f1c>
   1445c:	ldr	r6, [r4, #4]
   14460:	ldr	r2, [r6, #28]
   14464:	ldr	r3, [r6, #32]
   14468:	cmp	r2, r3
   1446c:	bcs	145a4 <__assert_fail@plt+0x303c>
   14470:	ldr	r3, [r6, #28]
   14474:	add	r2, r3, #1
   14478:	str	r2, [r6, #28]
   1447c:	mov	r2, #10
   14480:	strb	r2, [r3]
   14484:	ldr	r8, [pc, #368]	; 145fc <__assert_fail@plt+0x3094>
   14488:	ldr	r1, [r8, #24]
   1448c:	ldr	r0, [r4, #4]
   14490:	bl	14004 <__assert_fail@plt+0x2a9c>
   14494:	ldr	r6, [r4, #4]
   14498:	ldr	r8, [r8, #24]
   1449c:	ldr	r3, [r6, #28]
   144a0:	ldr	r2, [r6, #24]
   144a4:	sub	r3, r3, r2
   144a8:	ldr	r2, [r6, #16]
   144ac:	cmp	r3, r2
   144b0:	bhi	145bc <__assert_fail@plt+0x3054>
   144b4:	str	r8, [r6, #4]
   144b8:	ldr	r6, [r4, #4]
   144bc:	ldr	r3, [pc, #312]	; 145fc <__assert_fail@plt+0x3094>
   144c0:	ldr	r8, [r3, #24]
   144c4:	ldr	r3, [r6, #28]
   144c8:	ldr	r2, [r6, #24]
   144cc:	sub	r3, r3, r2
   144d0:	ldr	r2, [r6, #16]
   144d4:	cmp	r3, r2
   144d8:	bhi	145c8 <__assert_fail@plt+0x3060>
   144dc:	str	r8, [r6, #12]
   144e0:	mov	r0, r5
   144e4:	bl	113e8 <strlen@plt>
   144e8:	subs	r8, r0, #0
   144ec:	beq	14538 <__assert_fail@plt+0x2fd0>
   144f0:	ldr	r6, [r4, #4]
   144f4:	ldr	r3, [r6, #28]
   144f8:	add	r3, r3, r8
   144fc:	ldr	r2, [r6, #32]
   14500:	cmp	r2, r3
   14504:	bcs	1451c <__assert_fail@plt+0x2fb4>
   14508:	mov	r1, r8
   1450c:	mov	r0, r6
   14510:	bl	19138 <argp_parse@@Base+0x1ec8>
   14514:	cmp	r0, #0
   14518:	beq	14538 <__assert_fail@plt+0x2fd0>
   1451c:	mov	r2, r8
   14520:	mov	r1, r5
   14524:	ldr	r0, [r6, #28]
   14528:	bl	11298 <memcpy@plt>
   1452c:	ldr	r3, [r6, #28]
   14530:	add	r8, r3, r8
   14534:	str	r8, [r6, #28]
   14538:	ldr	r6, [r4, #4]
   1453c:	ldr	r3, [r6, #28]
   14540:	ldr	r2, [r6, #24]
   14544:	sub	r3, r3, r2
   14548:	ldr	r2, [r6, #16]
   1454c:	cmp	r3, r2
   14550:	bhi	145d4 <__assert_fail@plt+0x306c>
   14554:	mov	r3, #0
   14558:	str	r3, [r6, #4]
   1455c:	ldr	r6, [r4, #4]
   14560:	ldr	r2, [r6, #28]
   14564:	ldr	r3, [r6, #32]
   14568:	cmp	r2, r3
   1456c:	bcs	145e0 <__assert_fail@plt+0x3078>
   14570:	ldr	r3, [r6, #28]
   14574:	add	r2, r3, #1
   14578:	str	r2, [r6, #28]
   1457c:	mov	r2, #10
   14580:	strb	r2, [r3]
   14584:	ldr	r3, [r4, #8]
   14588:	mov	r2, #1
   1458c:	str	r2, [r3, #4]
   14590:	cmp	r7, r5
   14594:	popeq	{r4, r5, r6, r7, r8, pc}
   14598:	mov	r0, r5
   1459c:	bl	17e64 <argp_parse@@Base+0xbf4>
   145a0:	pop	{r4, r5, r6, r7, r8, pc}
   145a4:	mov	r1, #1
   145a8:	mov	r0, r6
   145ac:	bl	19138 <argp_parse@@Base+0x1ec8>
   145b0:	cmp	r0, #0
   145b4:	beq	14484 <__assert_fail@plt+0x2f1c>
   145b8:	b	14470 <__assert_fail@plt+0x2f08>
   145bc:	mov	r0, r6
   145c0:	bl	18b94 <argp_parse@@Base+0x1924>
   145c4:	b	144b4 <__assert_fail@plt+0x2f4c>
   145c8:	mov	r0, r6
   145cc:	bl	18b94 <argp_parse@@Base+0x1924>
   145d0:	b	144dc <__assert_fail@plt+0x2f74>
   145d4:	mov	r0, r6
   145d8:	bl	18b94 <argp_parse@@Base+0x1924>
   145dc:	b	14554 <__assert_fail@plt+0x2fec>
   145e0:	mov	r1, #1
   145e4:	mov	r0, r6
   145e8:	bl	19138 <argp_parse@@Base+0x1ec8>
   145ec:	cmp	r0, #0
   145f0:	beq	14584 <__assert_fail@plt+0x301c>
   145f4:	b	14570 <__assert_fail@plt+0x3008>
   145f8:	andeq	r0, r0, #3
   145fc:	andeq	ip, r2, ip, lsl #8
   14600:	push	{r4, r5, r6, r7, r8, lr}
   14604:	mov	r6, r0
   14608:	mov	r4, r1
   1460c:	ldr	r3, [r1, #12]
   14610:	cmp	r3, #0
   14614:	beq	14734 <__assert_fail@plt+0x31cc>
   14618:	ldr	r3, [r1, #8]
   1461c:	ldr	r7, [r3]
   14620:	ldr	r2, [r1]
   14624:	ldr	r5, [r2, #16]
   14628:	ldr	r3, [r3, #4]
   1462c:	cmp	r3, #0
   14630:	cmpne	r7, #0
   14634:	beq	14670 <__assert_fail@plt+0x3108>
   14638:	ldr	r2, [r2, #12]
   1463c:	ldr	r3, [r7, #12]
   14640:	cmp	r2, r3
   14644:	beq	14670 <__assert_fail@plt+0x3108>
   14648:	ldr	r8, [r1, #4]
   1464c:	ldr	r2, [r8, #28]
   14650:	ldr	r3, [r8, #32]
   14654:	cmp	r2, r3
   14658:	bcs	14710 <__assert_fail@plt+0x31a8>
   1465c:	ldr	r3, [r8, #28]
   14660:	add	r2, r3, #1
   14664:	str	r2, [r8, #28]
   14668:	mov	r2, #10
   1466c:	strb	r2, [r3]
   14670:	cmp	r5, #0
   14674:	beq	146f8 <__assert_fail@plt+0x3190>
   14678:	ldr	r0, [r5]
   1467c:	cmp	r0, #0
   14680:	beq	146f8 <__assert_fail@plt+0x3190>
   14684:	ldrb	r3, [r0]
   14688:	cmp	r3, #0
   1468c:	beq	146f8 <__assert_fail@plt+0x3190>
   14690:	cmp	r7, #0
   14694:	beq	146c4 <__assert_fail@plt+0x315c>
   14698:	ldr	r3, [r7, #16]
   1469c:	cmp	r5, r3
   146a0:	beq	146f8 <__assert_fail@plt+0x3190>
   146a4:	cmp	r3, #0
   146a8:	beq	146c4 <__assert_fail@plt+0x315c>
   146ac:	ldr	r3, [r3, #12]
   146b0:	cmp	r3, #0
   146b4:	cmpne	r5, r3
   146b8:	bne	146ac <__assert_fail@plt+0x3144>
   146bc:	cmp	r5, r3
   146c0:	beq	146f8 <__assert_fail@plt+0x3190>
   146c4:	ldr	r3, [r4, #4]
   146c8:	ldr	r7, [r3, #12]
   146cc:	mov	r2, r4
   146d0:	ldr	r1, [r5, #16]
   146d4:	bl	1441c <__assert_fail@plt+0x2eb4>
   146d8:	ldr	r5, [r4, #4]
   146dc:	ldr	r3, [r5, #28]
   146e0:	ldr	r2, [r5, #24]
   146e4:	sub	r3, r3, r2
   146e8:	ldr	r2, [r5, #16]
   146ec:	cmp	r3, r2
   146f0:	bhi	14728 <__assert_fail@plt+0x31c0>
   146f4:	str	r7, [r5, #12]
   146f8:	mov	r3, #0
   146fc:	str	r3, [r4, #12]
   14700:	mov	r1, r6
   14704:	ldr	r0, [r4, #4]
   14708:	bl	14004 <__assert_fail@plt+0x2a9c>
   1470c:	pop	{r4, r5, r6, r7, r8, pc}
   14710:	mov	r1, #1
   14714:	mov	r0, r8
   14718:	bl	19138 <argp_parse@@Base+0x1ec8>
   1471c:	cmp	r0, #0
   14720:	beq	14670 <__assert_fail@plt+0x3108>
   14724:	b	1465c <__assert_fail@plt+0x30f4>
   14728:	mov	r0, r5
   1472c:	bl	18b94 <argp_parse@@Base+0x1924>
   14730:	b	146f4 <__assert_fail@plt+0x318c>
   14734:	ldr	r5, [r1, #4]
   14738:	ldr	r3, [r5, #28]
   1473c:	add	r3, r3, #2
   14740:	ldr	r2, [r5, #32]
   14744:	cmp	r2, r3
   14748:	bcs	14760 <__assert_fail@plt+0x31f8>
   1474c:	mov	r1, #2
   14750:	mov	r0, r5
   14754:	bl	19138 <argp_parse@@Base+0x1ec8>
   14758:	cmp	r0, #0
   1475c:	beq	14700 <__assert_fail@plt+0x3198>
   14760:	ldr	r3, [r5, #28]
   14764:	ldr	r2, [pc, #20]	; 14780 <__assert_fail@plt+0x3218>
   14768:	ldrh	r2, [r2]
   1476c:	strh	r2, [r3]
   14770:	ldr	r3, [r5, #28]
   14774:	add	r3, r3, #2
   14778:	str	r3, [r5, #28]
   1477c:	b	14700 <__assert_fail@plt+0x3198>
   14780:	andeq	sl, r1, r4, lsr #22
   14784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14788:	sub	sp, sp, #28
   1478c:	mov	fp, r0
   14790:	str	r1, [sp, #8]
   14794:	mov	r6, r2
   14798:	mov	r8, r3
   1479c:	ldr	r7, [sp, #64]	; 0x40
   147a0:	ldr	r5, [sp, #68]	; 0x44
   147a4:	ldr	r9, [r0, #12]
   147a8:	ldr	r3, [r0, #16]
   147ac:	str	r3, [sp, #16]
   147b0:	cmp	r9, #0
   147b4:	beq	14c10 <__assert_fail@plt+0x36a8>
   147b8:	mov	r1, #11
   147bc:	mov	r0, r9
   147c0:	bl	113f4 <strchr@plt>
   147c4:	cmp	r6, #0
   147c8:	beq	14ac0 <__assert_fail@plt+0x3558>
   147cc:	cmp	r0, #0
   147d0:	addne	r9, r0, #1
   147d4:	beq	14bf8 <__assert_fail@plt+0x3690>
   147d8:	ldr	r3, [fp, #20]
   147dc:	cmp	r3, #0
   147e0:	movne	sl, #0
   147e4:	beq	14c00 <__assert_fail@plt+0x3698>
   147e8:	ldr	r1, [sp, #8]
   147ec:	mov	r0, fp
   147f0:	bl	17ce4 <argp_parse@@Base+0xa74>
   147f4:	str	r0, [sp, #12]
   147f8:	ldr	r3, [fp, #20]
   147fc:	ldr	r2, [pc, #1140]	; 14c78 <__assert_fail@plt+0x3710>
   14800:	ldr	r0, [pc, #1140]	; 14c7c <__assert_fail@plt+0x3714>
   14804:	cmp	r6, #0
   14808:	moveq	r0, r2
   1480c:	ldr	r2, [sp, #12]
   14810:	mov	r1, r9
   14814:	blx	r3
   14818:	mov	r4, r0
   1481c:	cmp	r4, #0
   14820:	beq	14bb0 <__assert_fail@plt+0x3648>
   14824:	cmp	r8, #0
   14828:	beq	14850 <__assert_fail@plt+0x32e8>
   1482c:	ldr	r2, [r5, #28]
   14830:	ldr	r3, [r5, #32]
   14834:	cmp	r2, r3
   14838:	bcs	14b04 <__assert_fail@plt+0x359c>
   1483c:	ldr	r3, [r5, #28]
   14840:	add	r2, r3, #1
   14844:	str	r2, [r5, #28]
   14848:	mov	r2, #10
   1484c:	strb	r2, [r3]
   14850:	cmp	r4, r9
   14854:	movne	r3, #0
   14858:	moveq	r3, #1
   1485c:	cmp	sl, #0
   14860:	moveq	r3, #0
   14864:	cmp	r3, #0
   14868:	beq	14b1c <__assert_fail@plt+0x35b4>
   1486c:	ldr	r3, [r5, #28]
   14870:	add	r3, r3, sl
   14874:	ldr	r2, [r5, #32]
   14878:	cmp	r2, r3
   1487c:	bcs	14894 <__assert_fail@plt+0x332c>
   14880:	mov	r1, sl
   14884:	mov	r0, r5
   14888:	bl	19138 <argp_parse@@Base+0x1ec8>
   1488c:	cmp	r0, #0
   14890:	beq	148b0 <__assert_fail@plt+0x3348>
   14894:	mov	r2, sl
   14898:	mov	r1, r9
   1489c:	ldr	r0, [r5, #28]
   148a0:	bl	11298 <memcpy@plt>
   148a4:	ldr	r3, [r5, #28]
   148a8:	add	r3, r3, sl
   148ac:	str	r3, [r5, #28]
   148b0:	ldr	r3, [r5, #28]
   148b4:	ldr	r2, [r5, #24]
   148b8:	sub	r3, r3, r2
   148bc:	ldr	r2, [r5, #16]
   148c0:	cmp	r3, r2
   148c4:	bhi	14b7c <__assert_fail@plt+0x3614>
   148c8:	ldr	r3, [r5, #20]
   148cc:	bic	r3, r3, r3, asr #31
   148d0:	ldr	r2, [r5, #4]
   148d4:	cmp	r2, r3
   148d8:	bcs	14900 <__assert_fail@plt+0x3398>
   148dc:	ldr	r2, [r5, #28]
   148e0:	ldr	r3, [r5, #32]
   148e4:	cmp	r2, r3
   148e8:	bcs	14b88 <__assert_fail@plt+0x3620>
   148ec:	ldr	r3, [r5, #28]
   148f0:	add	r2, r3, #1
   148f4:	str	r2, [r5, #28]
   148f8:	mov	r2, #10
   148fc:	strb	r2, [r3]
   14900:	cmp	r4, r9
   14904:	moveq	r4, #1
   14908:	bne	14ba0 <__assert_fail@plt+0x3638>
   1490c:	cmp	r9, #0
   14910:	cmpne	sl, #0
   14914:	beq	1492c <__assert_fail@plt+0x33c4>
   14918:	ldr	r3, [fp, #20]
   1491c:	cmp	r3, #0
   14920:	beq	14a38 <__assert_fail@plt+0x34d0>
   14924:	mov	r0, r9
   14928:	bl	17e64 <argp_parse@@Base+0xbf4>
   1492c:	cmp	r6, #0
   14930:	beq	14a38 <__assert_fail@plt+0x34d0>
   14934:	ldr	r3, [fp, #20]
   14938:	cmp	r3, #0
   1493c:	beq	14a38 <__assert_fail@plt+0x34d0>
   14940:	ldr	r2, [sp, #12]
   14944:	mov	r1, #0
   14948:	ldr	r0, [pc, #816]	; 14c80 <__assert_fail@plt+0x3718>
   1494c:	blx	r3
   14950:	subs	r9, r0, #0
   14954:	beq	14a38 <__assert_fail@plt+0x34d0>
   14958:	orrs	r3, r8, r4
   1495c:	beq	14984 <__assert_fail@plt+0x341c>
   14960:	ldr	r2, [r5, #28]
   14964:	ldr	r3, [r5, #32]
   14968:	cmp	r2, r3
   1496c:	bcs	14bb8 <__assert_fail@plt+0x3650>
   14970:	ldr	r3, [r5, #28]
   14974:	add	r2, r3, #1
   14978:	str	r2, [r5, #28]
   1497c:	mov	r2, #10
   14980:	strb	r2, [r3]
   14984:	mov	r0, r9
   14988:	bl	113e8 <strlen@plt>
   1498c:	subs	r4, r0, #0
   14990:	beq	149d8 <__assert_fail@plt+0x3470>
   14994:	ldr	r3, [r5, #28]
   14998:	add	r3, r3, r4
   1499c:	ldr	r2, [r5, #32]
   149a0:	cmp	r2, r3
   149a4:	bcs	149bc <__assert_fail@plt+0x3454>
   149a8:	mov	r1, r4
   149ac:	mov	r0, r5
   149b0:	bl	19138 <argp_parse@@Base+0x1ec8>
   149b4:	cmp	r0, #0
   149b8:	beq	149d8 <__assert_fail@plt+0x3470>
   149bc:	mov	r2, r4
   149c0:	mov	r1, r9
   149c4:	ldr	r0, [r5, #28]
   149c8:	bl	11298 <memcpy@plt>
   149cc:	ldr	r3, [r5, #28]
   149d0:	add	r4, r3, r4
   149d4:	str	r4, [r5, #28]
   149d8:	mov	r0, r9
   149dc:	bl	17e64 <argp_parse@@Base+0xbf4>
   149e0:	ldr	r3, [r5, #28]
   149e4:	ldr	r2, [r5, #24]
   149e8:	sub	r3, r3, r2
   149ec:	ldr	r2, [r5, #16]
   149f0:	cmp	r3, r2
   149f4:	bhi	14bd0 <__assert_fail@plt+0x3668>
   149f8:	ldr	r3, [r5, #20]
   149fc:	bic	r3, r3, r3, asr #31
   14a00:	ldr	r2, [r5, #4]
   14a04:	cmp	r2, r3
   14a08:	movcs	r4, #1
   14a0c:	bcs	14a38 <__assert_fail@plt+0x34d0>
   14a10:	ldr	r2, [r5, #28]
   14a14:	ldr	r3, [r5, #32]
   14a18:	cmp	r2, r3
   14a1c:	bcs	14bdc <__assert_fail@plt+0x3674>
   14a20:	ldr	r3, [r5, #28]
   14a24:	add	r2, r3, #1
   14a28:	str	r2, [r5, #28]
   14a2c:	mov	r2, #10
   14a30:	strb	r2, [r3]
   14a34:	mov	r4, #1
   14a38:	ldr	r3, [sp, #16]
   14a3c:	cmp	r3, #0
   14a40:	beq	14ab4 <__assert_fail@plt+0x354c>
   14a44:	ldr	r0, [r3]
   14a48:	cmp	r0, #0
   14a4c:	beq	14ab4 <__assert_fail@plt+0x354c>
   14a50:	clz	r9, r7
   14a54:	lsr	r9, r9, #5
   14a58:	cmp	r7, #0
   14a5c:	cmpne	r4, #0
   14a60:	bne	14ab4 <__assert_fail@plt+0x354c>
   14a64:	mov	sl, r3
   14a68:	ldr	fp, [sp, #8]
   14a6c:	orrs	r3, r8, r4
   14a70:	str	r5, [sp, #4]
   14a74:	str	r7, [sp]
   14a78:	movne	r3, #1
   14a7c:	moveq	r3, #0
   14a80:	mov	r2, r6
   14a84:	mov	r1, fp
   14a88:	bl	14784 <__assert_fail@plt+0x321c>
   14a8c:	orr	r4, r4, r0
   14a90:	ldr	r0, [sl, #16]
   14a94:	cmp	r0, #0
   14a98:	beq	14ab4 <__assert_fail@plt+0x354c>
   14a9c:	add	sl, sl, #16
   14aa0:	cmp	r4, #0
   14aa4:	movne	r3, r9
   14aa8:	orreq	r3, r9, #1
   14aac:	cmp	r3, #0
   14ab0:	bne	14a6c <__assert_fail@plt+0x3504>
   14ab4:	mov	r0, r4
   14ab8:	add	sp, sp, #28
   14abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac0:	cmp	r0, #0
   14ac4:	beq	14c48 <__assert_fail@plt+0x36e0>
   14ac8:	sub	sl, r0, r9
   14acc:	ldr	r3, [fp, #20]
   14ad0:	cmp	r3, #0
   14ad4:	beq	14af4 <__assert_fail@plt+0x358c>
   14ad8:	cmp	sl, #0
   14adc:	beq	147e8 <__assert_fail@plt+0x3280>
   14ae0:	mov	r1, sl
   14ae4:	mov	r0, r9
   14ae8:	bl	1128c <strndup@plt>
   14aec:	mov	r9, r0
   14af0:	b	147e8 <__assert_fail@plt+0x3280>
   14af4:	mov	r4, r9
   14af8:	mov	r3, #0
   14afc:	str	r3, [sp, #12]
   14b00:	b	14824 <__assert_fail@plt+0x32bc>
   14b04:	mov	r1, #1
   14b08:	mov	r0, r5
   14b0c:	bl	19138 <argp_parse@@Base+0x1ec8>
   14b10:	cmp	r0, #0
   14b14:	beq	14850 <__assert_fail@plt+0x32e8>
   14b18:	b	1483c <__assert_fail@plt+0x32d4>
   14b1c:	mov	r0, r4
   14b20:	bl	113e8 <strlen@plt>
   14b24:	subs	r3, r0, #0
   14b28:	mov	r1, r3
   14b2c:	str	r3, [sp, #20]
   14b30:	beq	148b0 <__assert_fail@plt+0x3348>
   14b34:	ldr	r3, [r5, #28]
   14b38:	add	r3, r3, r1
   14b3c:	ldr	r2, [r5, #32]
   14b40:	cmp	r2, r3
   14b44:	bcs	14b58 <__assert_fail@plt+0x35f0>
   14b48:	mov	r0, r5
   14b4c:	bl	19138 <argp_parse@@Base+0x1ec8>
   14b50:	cmp	r0, #0
   14b54:	beq	148b0 <__assert_fail@plt+0x3348>
   14b58:	ldr	r2, [sp, #20]
   14b5c:	mov	r1, r4
   14b60:	ldr	r0, [r5, #28]
   14b64:	bl	11298 <memcpy@plt>
   14b68:	ldr	r3, [r5, #28]
   14b6c:	ldr	r2, [sp, #20]
   14b70:	add	r3, r3, r2
   14b74:	str	r3, [r5, #28]
   14b78:	b	148b0 <__assert_fail@plt+0x3348>
   14b7c:	mov	r0, r5
   14b80:	bl	18b94 <argp_parse@@Base+0x1924>
   14b84:	b	148c8 <__assert_fail@plt+0x3360>
   14b88:	mov	r1, #1
   14b8c:	mov	r0, r5
   14b90:	bl	19138 <argp_parse@@Base+0x1ec8>
   14b94:	cmp	r0, #0
   14b98:	beq	14900 <__assert_fail@plt+0x3398>
   14b9c:	b	148ec <__assert_fail@plt+0x3384>
   14ba0:	mov	r0, r4
   14ba4:	bl	17e64 <argp_parse@@Base+0xbf4>
   14ba8:	mov	r4, #1
   14bac:	b	1490c <__assert_fail@plt+0x33a4>
   14bb0:	mov	r4, #0
   14bb4:	b	1490c <__assert_fail@plt+0x33a4>
   14bb8:	mov	r1, #1
   14bbc:	mov	r0, r5
   14bc0:	bl	19138 <argp_parse@@Base+0x1ec8>
   14bc4:	cmp	r0, #0
   14bc8:	beq	14984 <__assert_fail@plt+0x341c>
   14bcc:	b	14970 <__assert_fail@plt+0x3408>
   14bd0:	mov	r0, r5
   14bd4:	bl	18b94 <argp_parse@@Base+0x1924>
   14bd8:	b	149f8 <__assert_fail@plt+0x3490>
   14bdc:	mov	r1, #1
   14be0:	mov	r0, r5
   14be4:	bl	19138 <argp_parse@@Base+0x1ec8>
   14be8:	cmp	r0, #0
   14bec:	moveq	r4, #1
   14bf0:	beq	14a38 <__assert_fail@plt+0x34d0>
   14bf4:	b	14a20 <__assert_fail@plt+0x34b8>
   14bf8:	mov	r9, #0
   14bfc:	b	147d8 <__assert_fail@plt+0x3270>
   14c00:	mov	r4, r9
   14c04:	mov	sl, #0
   14c08:	str	sl, [sp, #12]
   14c0c:	b	1481c <__assert_fail@plt+0x32b4>
   14c10:	ldr	r3, [r0, #20]
   14c14:	cmp	r3, #0
   14c18:	movne	sl, #0
   14c1c:	bne	147e8 <__assert_fail@plt+0x3280>
   14c20:	mov	r3, r9
   14c24:	cmp	r9, #0
   14c28:	moveq	r4, #0
   14c2c:	streq	r4, [sp, #12]
   14c30:	beq	1492c <__assert_fail@plt+0x33c4>
   14c34:	mov	r4, r9
   14c38:	mov	r9, r3
   14c3c:	mov	sl, #0
   14c40:	str	sl, [sp, #12]
   14c44:	b	14824 <__assert_fail@plt+0x32bc>
   14c48:	ldr	r3, [fp, #20]
   14c4c:	cmp	r3, #0
   14c50:	moveq	r3, r9
   14c54:	beq	14c24 <__assert_fail@plt+0x36bc>
   14c58:	ldr	r1, [sp, #8]
   14c5c:	mov	r0, fp
   14c60:	bl	17ce4 <argp_parse@@Base+0xa74>
   14c64:	str	r0, [sp, #12]
   14c68:	ldr	r3, [fp, #20]
   14c6c:	mov	sl, #0
   14c70:	ldr	r0, [pc]	; 14c78 <__assert_fail@plt+0x3710>
   14c74:	b	1480c <__assert_fail@plt+0x32a4>
   14c78:	andeq	r0, r0, #1
   14c7c:	andeq	r0, r0, #2
   14c80:	andeq	r0, r0, #4
   14c84:	ldr	r3, [r0, #12]
   14c88:	ldr	r2, [r1, #12]
   14c8c:	cmp	r3, r2
   14c90:	beq	14ce8 <__assert_fail@plt+0x3780>
   14c94:	push	{r4, r5, r6, lr}
   14c98:	mov	r5, r1
   14c9c:	mov	r4, r0
   14ca0:	mov	r1, r2
   14ca4:	mov	r0, r3
   14ca8:	bl	14c84 <__assert_fail@plt+0x371c>
   14cac:	subs	r3, r0, #0
   14cb0:	bne	14ce0 <__assert_fail@plt+0x3778>
   14cb4:	ldr	r0, [r4, #8]
   14cb8:	ldr	r3, [r5, #8]
   14cbc:	mvn	r2, r3
   14cc0:	lsr	r2, r2, #31
   14cc4:	cmp	r2, r0, lsr #31
   14cc8:	subne	r3, r0, r3
   14ccc:	subeq	r3, r3, r0
   14cd0:	cmp	r3, #0
   14cd4:	ldreq	r3, [r5, #4]
   14cd8:	ldreq	r0, [r4, #4]
   14cdc:	subeq	r3, r3, r0
   14ce0:	mov	r0, r3
   14ce4:	pop	{r4, r5, r6, pc}
   14ce8:	ldr	r2, [r0, #8]
   14cec:	ldr	r3, [r1, #8]
   14cf0:	mvn	ip, r3
   14cf4:	lsr	ip, ip, #31
   14cf8:	cmp	ip, r2, lsr #31
   14cfc:	subne	r3, r2, r3
   14d00:	subeq	r3, r3, r2
   14d04:	cmp	r3, #0
   14d08:	ldreq	r3, [r1, #4]
   14d0c:	ldreq	r0, [r0, #4]
   14d10:	subeq	r3, r3, r0
   14d14:	mov	r0, r3
   14d18:	bx	lr
   14d1c:	push	{r4, r5, r6, r7, r8, lr}
   14d20:	sub	sp, sp, #8
   14d24:	ldr	lr, [r0, #16]
   14d28:	cmp	lr, #0
   14d2c:	movne	r2, lr
   14d30:	bne	14d40 <__assert_fail@plt+0x37d8>
   14d34:	ldr	ip, [r0, #12]
   14d38:	b	14d50 <__assert_fail@plt+0x37e8>
   14d3c:	mov	r2, r3
   14d40:	ldr	r3, [r2, #12]
   14d44:	cmp	r3, #0
   14d48:	bne	14d3c <__assert_fail@plt+0x37d4>
   14d4c:	ldr	ip, [r2, #8]
   14d50:	ldr	r5, [r1, #16]
   14d54:	cmp	r5, #0
   14d58:	movne	r2, r5
   14d5c:	bne	14d6c <__assert_fail@plt+0x3804>
   14d60:	ldr	r4, [r1, #12]
   14d64:	b	14d7c <__assert_fail@plt+0x3814>
   14d68:	mov	r2, r3
   14d6c:	ldr	r3, [r2, #12]
   14d70:	cmp	r3, #0
   14d74:	bne	14d68 <__assert_fail@plt+0x3800>
   14d78:	ldr	r4, [r2, #8]
   14d7c:	mvn	r3, r4
   14d80:	lsr	r3, r3, #31
   14d84:	cmp	r3, ip, lsr #31
   14d88:	subne	r4, ip, r4
   14d8c:	subeq	r4, r4, ip
   14d90:	cmp	r4, #0
   14d94:	bne	14dfc <__assert_fail@plt+0x3894>
   14d98:	adds	r4, r5, #0
   14d9c:	movne	r4, #1
   14da0:	cmp	lr, #0
   14da4:	rsbeq	r4, r4, #0
   14da8:	rsbne	r4, r4, #1
   14dac:	cmp	r4, #0
   14db0:	bne	14dfc <__assert_fail@plt+0x3894>
   14db4:	mov	r6, r1
   14db8:	mov	r7, r0
   14dbc:	cmp	lr, #0
   14dc0:	beq	14e4c <__assert_fail@plt+0x38e4>
   14dc4:	ldr	ip, [lr, #20]
   14dc8:	ldr	r2, [r5, #20]
   14dcc:	cmp	ip, r2
   14dd0:	ble	14e08 <__assert_fail@plt+0x38a0>
   14dd4:	mov	r0, lr
   14dd8:	ldr	r0, [r0, #12]
   14ddc:	ldr	r3, [r0, #20]
   14de0:	cmp	r2, r3
   14de4:	blt	14dd8 <__assert_fail@plt+0x3870>
   14de8:	mov	r1, r5
   14dec:	bl	14c84 <__assert_fail@plt+0x371c>
   14df0:	subs	r4, r0, #0
   14df4:	cmp	r0, #0
   14df8:	moveq	r4, #1
   14dfc:	mov	r0, r4
   14e00:	add	sp, sp, #8
   14e04:	pop	{r4, r5, r6, r7, r8, pc}
   14e08:	cmp	ip, r2
   14e0c:	bge	14e38 <__assert_fail@plt+0x38d0>
   14e10:	mov	r1, r5
   14e14:	ldr	r1, [r1, #12]
   14e18:	ldr	r3, [r1, #20]
   14e1c:	cmp	ip, r3
   14e20:	blt	14e14 <__assert_fail@plt+0x38ac>
   14e24:	mov	r0, lr
   14e28:	bl	14c84 <__assert_fail@plt+0x371c>
   14e2c:	subs	r4, r0, #0
   14e30:	mvneq	r4, #0
   14e34:	b	14dfc <__assert_fail@plt+0x3894>
   14e38:	mov	r1, r5
   14e3c:	mov	r0, lr
   14e40:	bl	14c84 <__assert_fail@plt+0x371c>
   14e44:	subs	r4, r0, #0
   14e48:	bne	14dfc <__assert_fail@plt+0x3894>
   14e4c:	ldr	r3, [r7, #12]
   14e50:	ldr	r4, [r6, #12]
   14e54:	mvn	r2, r4
   14e58:	lsr	r2, r2, #31
   14e5c:	cmp	r2, r3, lsr #31
   14e60:	subne	r4, r3, r4
   14e64:	subeq	r4, r4, r3
   14e68:	cmp	r4, #0
   14e6c:	bne	14dfc <__assert_fail@plt+0x3894>
   14e70:	mov	r0, r7
   14e74:	bl	13ac4 <__assert_fail@plt+0x255c>
   14e78:	mov	r5, r0
   14e7c:	str	r0, [sp]
   14e80:	mov	r0, r6
   14e84:	bl	13ac4 <__assert_fail@plt+0x255c>
   14e88:	str	r0, [sp, #4]
   14e8c:	ldr	r3, [r7]
   14e90:	ldr	r3, [r3, #12]
   14e94:	adds	r5, r5, #0
   14e98:	movne	r5, #1
   14e9c:	ands	r3, r5, r3, lsr #3
   14ea0:	beq	14fe4 <__assert_fail@plt+0x3a7c>
   14ea4:	mov	r0, sp
   14ea8:	bl	13c88 <__assert_fail@plt+0x2720>
   14eac:	adds	r5, r0, #0
   14eb0:	movne	r5, #1
   14eb4:	ldr	r3, [r6]
   14eb8:	ldr	r0, [r3, #12]
   14ebc:	ands	r0, r0, #8
   14ec0:	beq	14ee0 <__assert_fail@plt+0x3978>
   14ec4:	ldr	r3, [sp, #4]
   14ec8:	cmp	r3, #0
   14ecc:	beq	14fdc <__assert_fail@plt+0x3a74>
   14ed0:	add	r0, sp, #4
   14ed4:	bl	13c88 <__assert_fail@plt+0x2720>
   14ed8:	adds	r0, r0, #0
   14edc:	movne	r0, #1
   14ee0:	subs	r4, r5, r0
   14ee4:	bne	14dfc <__assert_fail@plt+0x3894>
   14ee8:	ldr	r2, [r7, #20]
   14eec:	ldr	r4, [pc, #276]	; 15008 <__assert_fail@plt+0x3aa0>
   14ef0:	mov	r3, #0
   14ef4:	ldr	r2, [r2, #24]
   14ef8:	mov	r1, r4
   14efc:	mov	r0, r7
   14f00:	bl	13b5c <__assert_fail@plt+0x25f4>
   14f04:	mov	r5, r0
   14f08:	uxtb	r8, r0
   14f0c:	ldr	r2, [r6, #20]
   14f10:	mov	r3, #0
   14f14:	ldr	r2, [r2, #24]
   14f18:	mov	r1, r4
   14f1c:	mov	r0, r6
   14f20:	bl	13b5c <__assert_fail@plt+0x25f4>
   14f24:	uxtb	r7, r0
   14f28:	cmp	r8, #0
   14f2c:	movne	r5, r8
   14f30:	bne	14f44 <__assert_fail@plt+0x39dc>
   14f34:	ldr	r3, [sp]
   14f38:	cmp	r3, #0
   14f3c:	ldrbne	r5, [r3]
   14f40:	moveq	r5, #0
   14f44:	cmp	r7, #0
   14f48:	uxtbne	r6, r0
   14f4c:	bne	14f60 <__assert_fail@plt+0x39f8>
   14f50:	ldr	r3, [sp, #4]
   14f54:	cmp	r3, #0
   14f58:	ldrbne	r6, [r3]
   14f5c:	moveq	r6, #0
   14f60:	bl	113a0 <__ctype_tolower_loc@plt>
   14f64:	ldr	r3, [r0]
   14f68:	ldr	r4, [r3, r5, lsl #2]
   14f6c:	ldr	r3, [r3, r6, lsl #2]
   14f70:	subs	r4, r4, r3
   14f74:	bne	14dfc <__assert_fail@plt+0x3894>
   14f78:	subs	r4, r6, r5
   14f7c:	bne	14dfc <__assert_fail@plt+0x3894>
   14f80:	adds	r4, r7, #0
   14f84:	movne	r4, #1
   14f88:	cmp	r8, #0
   14f8c:	rsbeq	r4, r4, #0
   14f90:	rsbne	r4, r4, #1
   14f94:	cmp	r4, #0
   14f98:	bne	14dfc <__assert_fail@plt+0x3894>
   14f9c:	cmp	r8, #0
   14fa0:	bne	14dfc <__assert_fail@plt+0x3894>
   14fa4:	ldr	r0, [sp]
   14fa8:	ldr	r1, [sp, #4]
   14fac:	adds	r4, r1, #0
   14fb0:	movne	r4, #1
   14fb4:	cmp	r0, #0
   14fb8:	rsbeq	r4, r4, #0
   14fbc:	rsbne	r4, r4, #1
   14fc0:	cmp	r4, #0
   14fc4:	bne	14dfc <__assert_fail@plt+0x3894>
   14fc8:	cmp	r0, #0
   14fcc:	beq	14dfc <__assert_fail@plt+0x3894>
   14fd0:	bl	112ec <strcasecmp@plt>
   14fd4:	mov	r4, r0
   14fd8:	b	14dfc <__assert_fail@plt+0x3894>
   14fdc:	mov	r0, r4
   14fe0:	b	14ee0 <__assert_fail@plt+0x3978>
   14fe4:	ldr	r3, [r6]
   14fe8:	ldr	r3, [r3, #12]
   14fec:	tst	r3, #8
   14ff0:	beq	14ee8 <__assert_fail@plt+0x3980>
   14ff4:	ldr	r3, [sp, #4]
   14ff8:	cmp	r3, #0
   14ffc:	movne	r5, r4
   15000:	bne	14ed0 <__assert_fail@plt+0x3968>
   15004:	b	14ee8 <__assert_fail@plt+0x3980>
   15008:	andeq	r3, r1, r0, asr #24
   1500c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15010:	sub	sp, sp, #52	; 0x34
   15014:	str	r0, [sp, #24]
   15018:	str	r1, [sp, #28]
   1501c:	ldr	r2, [r0, #16]
   15020:	str	r2, [sp, #8]
   15024:	ldr	r5, [r0]
   15028:	mov	r0, #16
   1502c:	bl	18a9c <argp_parse@@Base+0x182c>
   15030:	subs	fp, r0, #0
   15034:	beq	15064 <__assert_fail@plt+0x3afc>
   15038:	mov	r3, #0
   1503c:	str	r3, [fp, #4]
   15040:	str	r3, [fp, #12]
   15044:	cmp	r5, r3
   15048:	beq	1523c <__assert_fail@plt+0x3cd4>
   1504c:	ldr	r4, [r5, #12]
   15050:	ands	r4, r4, #4
   15054:	bne	15078 <__assert_fail@plt+0x3b10>
   15058:	add	r6, r5, #24
   1505c:	mov	r8, r3
   15060:	b	150a0 <__assert_fail@plt+0x3b38>
   15064:	ldr	r3, [pc, #1576]	; 15694 <__assert_fail@plt+0x412c>
   15068:	ldr	r2, [pc, #1576]	; 15698 <__assert_fail@plt+0x4130>
   1506c:	ldr	r1, [pc, #1576]	; 1569c <__assert_fail@plt+0x4134>
   15070:	ldr	r0, [pc, #1576]	; 156a0 <__assert_fail@plt+0x4138>
   15074:	bl	11568 <__assert_fail@plt>
   15078:	ldr	r3, [pc, #1556]	; 15694 <__assert_fail@plt+0x412c>
   1507c:	mov	r2, #460	; 0x1cc
   15080:	ldr	r1, [pc, #1556]	; 1569c <__assert_fail@plt+0x4134>
   15084:	ldr	r0, [pc, #1560]	; 156a4 <__assert_fail@plt+0x413c>
   15088:	bl	11568 <__assert_fail@plt>
   1508c:	ldr	r2, [fp, #4]
   15090:	add	r2, r2, #1
   15094:	str	r2, [fp, #4]
   15098:	b	150c8 <__assert_fail@plt+0x3b60>
   1509c:	add	r6, r6, #24
   150a0:	mov	r3, r6
   150a4:	ldr	r2, [r6, #-20]	; 0xffffffec
   150a8:	cmp	r2, #0
   150ac:	bne	150bc <__assert_fail@plt+0x3b54>
   150b0:	ldr	r2, [r6, #-24]	; 0xffffffe8
   150b4:	cmp	r2, #0
   150b8:	beq	15100 <__assert_fail@plt+0x3b98>
   150bc:	ldr	r2, [r3, #-12]
   150c0:	tst	r2, #4
   150c4:	beq	1508c <__assert_fail@plt+0x3b24>
   150c8:	ldr	r2, [r3, #-12]
   150cc:	tst	r2, #8
   150d0:	bne	1509c <__assert_fail@plt+0x3b34>
   150d4:	ldr	r7, [r3, #-20]	; 0xffffffec
   150d8:	sub	r3, r7, #1
   150dc:	cmp	r3, #254	; 0xfe
   150e0:	bhi	1509c <__assert_fail@plt+0x3b34>
   150e4:	bl	113c4 <__ctype_b_loc@plt>
   150e8:	ldr	r3, [r0]
   150ec:	lsl	r7, r7, #1
   150f0:	ldrh	r3, [r3, r7]
   150f4:	tst	r3, #16384	; 0x4000
   150f8:	addne	r8, r8, #1
   150fc:	b	1509c <__assert_fail@plt+0x3b34>
   15100:	ldr	r2, [r6, #-8]
   15104:	cmp	r2, #0
   15108:	bne	150bc <__assert_fail@plt+0x3b54>
   1510c:	ldr	r2, [r6, #-4]
   15110:	cmp	r2, #0
   15114:	bne	150bc <__assert_fail@plt+0x3b54>
   15118:	ldr	r0, [fp, #4]
   1511c:	rsb	r0, r0, r0, lsl #3
   15120:	lsl	r0, r0, #2
   15124:	bl	18a9c <argp_parse@@Base+0x182c>
   15128:	str	r0, [fp]
   1512c:	add	r0, r8, #1
   15130:	bl	18a9c <argp_parse@@Base+0x182c>
   15134:	str	r0, [fp, #8]
   15138:	ldr	r8, [fp]
   1513c:	cmp	r0, #0
   15140:	cmpne	r8, #0
   15144:	bne	1515c <__assert_fail@plt+0x3bf4>
   15148:	ldr	r3, [pc, #1348]	; 15694 <__assert_fail@plt+0x412c>
   1514c:	ldr	r2, [pc, #1364]	; 156a8 <__assert_fail@plt+0x4140>
   15150:	ldr	r1, [pc, #1348]	; 1569c <__assert_fail@plt+0x4134>
   15154:	ldr	r0, [pc, #1360]	; 156ac <__assert_fail@plt+0x4144>
   15158:	bl	11568 <__assert_fail@plt>
   1515c:	ldr	r2, [fp, #4]
   15160:	ldr	r3, [pc, #1352]	; 156b0 <__assert_fail@plt+0x4148>
   15164:	cmp	r2, r3
   15168:	addls	r8, r8, #28
   1516c:	movls	r7, r0
   15170:	movls	sl, #0
   15174:	bls	151c0 <__assert_fail@plt+0x3c58>
   15178:	ldr	r3, [pc, #1300]	; 15694 <__assert_fail@plt+0x412c>
   1517c:	mov	r2, #476	; 0x1dc
   15180:	ldr	r1, [pc, #1300]	; 1569c <__assert_fail@plt+0x4134>
   15184:	ldr	r0, [pc, #1320]	; 156b4 <__assert_fail@plt+0x414c>
   15188:	bl	11568 <__assert_fail@plt>
   1518c:	ldr	r3, [r5, #4]
   15190:	cmp	r3, #0
   15194:	addeq	r9, r4, #1
   15198:	movne	r9, r4
   1519c:	b	15204 <__assert_fail@plt+0x3c9c>
   151a0:	ldr	r3, [r5, #16]
   151a4:	cmp	r3, #0
   151a8:	bne	155b0 <__assert_fail@plt+0x4048>
   151ac:	ldr	r3, [r5, #20]
   151b0:	cmp	r3, #0
   151b4:	bne	155b0 <__assert_fail@plt+0x4048>
   151b8:	add	r8, r8, #28
   151bc:	mov	r4, r9
   151c0:	ldr	r3, [r5, #4]
   151c4:	cmp	r3, #0
   151c8:	bne	151d8 <__assert_fail@plt+0x3c70>
   151cc:	ldr	r3, [r5]
   151d0:	cmp	r3, #0
   151d4:	beq	1521c <__assert_fail@plt+0x3cb4>
   151d8:	mov	r6, r8
   151dc:	str	r5, [r8, #-28]	; 0xffffffe4
   151e0:	str	sl, [r8, #-24]	; 0xffffffe8
   151e4:	str	r7, [r8, #-20]	; 0xffffffec
   151e8:	ldr	r9, [r5, #20]
   151ec:	cmp	r9, #0
   151f0:	bne	15204 <__assert_fail@plt+0x3c9c>
   151f4:	ldr	r3, [r5]
   151f8:	cmp	r3, #0
   151fc:	movne	r9, r4
   15200:	beq	1518c <__assert_fail@plt+0x3c24>
   15204:	str	r9, [r6, #-16]
   15208:	ldr	r3, [sp, #28]
   1520c:	str	r3, [r6, #-12]
   15210:	ldr	r3, [sp, #24]
   15214:	str	r3, [r6, #-8]
   15218:	b	155bc <__assert_fail@plt+0x4054>
   1521c:	ldr	r3, [r5, #16]
   15220:	cmp	r3, #0
   15224:	bne	151d8 <__assert_fail@plt+0x3c70>
   15228:	ldr	r3, [r5, #20]
   1522c:	cmp	r3, #0
   15230:	bne	151d8 <__assert_fail@plt+0x3c70>
   15234:	mov	r3, #0
   15238:	strb	r3, [r7]
   1523c:	ldr	r3, [sp, #8]
   15240:	cmp	r3, #0
   15244:	beq	15580 <__assert_fail@plt+0x4018>
   15248:	ldr	r3, [r3]
   1524c:	cmp	r3, #0
   15250:	beq	15580 <__assert_fail@plt+0x4018>
   15254:	add	r3, fp, #12
   15258:	str	r3, [sp, #44]	; 0x2c
   1525c:	str	fp, [sp, #20]
   15260:	b	152f0 <__assert_fail@plt+0x3d88>
   15264:	ldr	r1, [sp, #28]
   15268:	b	15370 <__assert_fail@plt+0x3e08>
   1526c:	mov	r2, r3
   15270:	ldr	r3, [r2, #24]
   15274:	cmp	r3, #0
   15278:	bne	1526c <__assert_fail@plt+0x3d04>
   1527c:	add	r2, r2, #24
   15280:	ldr	r1, [sp, #16]
   15284:	ldr	r3, [r1, #12]
   15288:	str	r3, [r2]
   1528c:	mov	r2, #0
   15290:	str	r2, [r1, #12]
   15294:	ldr	r3, [r1, #4]
   15298:	cmp	r3, r2
   1529c:	beq	152d4 <__assert_fail@plt+0x3d6c>
   152a0:	ldr	r0, [sp, #20]
   152a4:	ldr	r2, [r0, #4]
   152a8:	cmp	r2, #0
   152ac:	bne	15398 <__assert_fail@plt+0x3e30>
   152b0:	str	r3, [r0, #4]
   152b4:	mov	r2, r1
   152b8:	ldr	r3, [r1]
   152bc:	str	r3, [r0]
   152c0:	ldr	r3, [r2, #8]
   152c4:	str	r3, [r0, #8]
   152c8:	mov	r3, r2
   152cc:	mov	r2, #0
   152d0:	str	r2, [r3, #4]
   152d4:	ldr	r0, [sp, #16]
   152d8:	bl	13ec0 <__assert_fail@plt+0x2958>
   152dc:	ldr	r2, [sp, #8]
   152e0:	ldr	r3, [r2, #16]!
   152e4:	str	r2, [sp, #8]
   152e8:	cmp	r3, #0
   152ec:	beq	1557c <__assert_fail@plt+0x4014>
   152f0:	ldr	r3, [sp, #8]
   152f4:	ldr	r4, [r3, #12]
   152f8:	cmp	r4, #0
   152fc:	bne	1530c <__assert_fail@plt+0x3da4>
   15300:	ldr	r3, [r3, #8]
   15304:	cmp	r3, #0
   15308:	beq	15264 <__assert_fail@plt+0x3cfc>
   1530c:	ldr	r2, [sp, #8]
   15310:	ldr	r5, [r2, #8]
   15314:	ldr	r7, [sp, #24]
   15318:	ldr	r3, [r7, #16]
   1531c:	sub	r3, r2, r3
   15320:	asr	r6, r3, #4
   15324:	mov	r0, #28
   15328:	bl	18a9c <argp_parse@@Base+0x182c>
   1532c:	subs	r1, r0, #0
   15330:	beq	15370 <__assert_fail@plt+0x3e08>
   15334:	str	r4, [r1, #8]
   15338:	str	r5, [r1]
   1533c:	str	r6, [r1, #4]
   15340:	ldr	r3, [sp, #28]
   15344:	str	r3, [r1, #12]
   15348:	str	r7, [r1, #16]
   1534c:	cmp	r3, #0
   15350:	ldrne	r3, [r3, #20]
   15354:	addne	r3, r3, #1
   15358:	moveq	r3, #0
   1535c:	str	r3, [r1, #20]
   15360:	ldr	r2, [sp, #20]
   15364:	ldr	r3, [r2, #12]
   15368:	str	r3, [r1, #24]
   1536c:	str	r1, [r2, #12]
   15370:	ldr	r3, [sp, #8]
   15374:	ldr	r0, [r3]
   15378:	bl	1500c <__assert_fail@plt+0x3aa4>
   1537c:	str	r0, [sp, #16]
   15380:	ldr	r3, [sp, #20]
   15384:	ldr	r2, [r3, #12]
   15388:	cmp	r2, #0
   1538c:	ldreq	r2, [sp, #44]	; 0x2c
   15390:	bne	15270 <__assert_fail@plt+0x3d08>
   15394:	b	15280 <__assert_fail@plt+0x3d18>
   15398:	add	r3, r3, r2
   1539c:	str	r3, [sp, #36]	; 0x24
   153a0:	rsb	r0, r3, r3, lsl #3
   153a4:	lsl	r0, r0, #2
   153a8:	bl	18a9c <argp_parse@@Base+0x182c>
   153ac:	mov	r4, r0
   153b0:	str	r0, [sp, #32]
   153b4:	ldr	r3, [sp, #20]
   153b8:	ldr	r0, [r3, #8]
   153bc:	bl	113e8 <strlen@plt>
   153c0:	mov	r6, r0
   153c4:	ldr	r3, [sp, #16]
   153c8:	ldr	r0, [r3, #8]
   153cc:	bl	113e8 <strlen@plt>
   153d0:	add	r0, r6, r0
   153d4:	add	r0, r0, #1
   153d8:	bl	18a9c <argp_parse@@Base+0x182c>
   153dc:	mov	sl, r0
   153e0:	cmp	r4, #0
   153e4:	cmpne	r0, #0
   153e8:	beq	154b4 <__assert_fail@plt+0x3f4c>
   153ec:	ldr	r3, [sp, #36]	; 0x24
   153f0:	ldr	r2, [pc, #696]	; 156b0 <__assert_fail@plt+0x4148>
   153f4:	cmp	r3, r2
   153f8:	bhi	154c8 <__assert_fail@plt+0x3f60>
   153fc:	ldr	r5, [sp, #20]
   15400:	ldr	r2, [r5]
   15404:	mov	r1, r2
   15408:	str	r2, [sp, #40]	; 0x28
   1540c:	ldr	r4, [r5, #4]
   15410:	rsb	r7, r4, r4, lsl #3
   15414:	lsl	r7, r7, #2
   15418:	mov	r2, r7
   1541c:	ldr	r8, [sp, #32]
   15420:	mov	r0, r8
   15424:	bl	113b8 <mempcpy@plt>
   15428:	ldr	r3, [sp, #16]
   1542c:	ldr	r1, [r3, #4]
   15430:	str	r1, [sp, #4]
   15434:	rsb	r2, r1, r1, lsl #3
   15438:	lsl	r2, r2, #2
   1543c:	ldr	r1, [r3]
   15440:	bl	11298 <memcpy@plt>
   15444:	ldr	r5, [r5, #8]
   15448:	mov	r2, r6
   1544c:	mov	r1, r5
   15450:	mov	r0, sl
   15454:	bl	11298 <memcpy@plt>
   15458:	cmp	r4, #0
   1545c:	beq	154dc <__assert_fail@plt+0x3f74>
   15460:	mov	r2, r8
   15464:	ldr	r3, [r2, #8]
   15468:	sub	r3, r3, r5
   1546c:	add	r3, sl, r3
   15470:	str	r3, [r2, #8]
   15474:	add	r2, r2, #28
   15478:	subs	r4, r4, #1
   1547c:	bne	15464 <__assert_fail@plt+0x3efc>
   15480:	ldr	r3, [sp, #32]
   15484:	add	r7, r3, r7
   15488:	add	r3, sl, r6
   1548c:	str	r3, [sp, #12]
   15490:	ldr	r2, [sp, #16]
   15494:	ldr	r8, [r2, #8]
   15498:	ldr	r2, [sp, #4]
   1549c:	cmp	r2, #0
   154a0:	beq	15544 <__assert_fail@plt+0x3fdc>
   154a4:	add	r9, r7, #28
   154a8:	mov	fp, r3
   154ac:	sub	r7, r3, #1
   154b0:	b	1552c <__assert_fail@plt+0x3fc4>
   154b4:	ldr	r3, [pc, #508]	; 156b8 <__assert_fail@plt+0x4150>
   154b8:	ldr	r2, [pc, #508]	; 156bc <__assert_fail@plt+0x4154>
   154bc:	ldr	r1, [pc, #472]	; 1569c <__assert_fail@plt+0x4134>
   154c0:	ldr	r0, [pc, #504]	; 156c0 <__assert_fail@plt+0x4158>
   154c4:	bl	11568 <__assert_fail@plt>
   154c8:	ldr	r3, [pc, #488]	; 156b8 <__assert_fail@plt+0x4150>
   154cc:	mov	r2, #972	; 0x3cc
   154d0:	ldr	r1, [pc, #452]	; 1569c <__assert_fail@plt+0x4134>
   154d4:	ldr	r0, [pc, #488]	; 156c4 <__assert_fail@plt+0x415c>
   154d8:	bl	11568 <__assert_fail@plt>
   154dc:	ldr	r7, [sp, #32]
   154e0:	b	15488 <__assert_fail@plt+0x3f20>
   154e4:	ldr	r3, [sp, #12]
   154e8:	cmp	sl, r3
   154ec:	bcs	15684 <__assert_fail@plt+0x411c>
   154f0:	ldrb	r3, [sl]
   154f4:	cmp	r3, r1
   154f8:	beq	1568c <__assert_fail@plt+0x4124>
   154fc:	mov	r3, sl
   15500:	cmp	r7, r3
   15504:	beq	15684 <__assert_fail@plt+0x411c>
   15508:	ldrb	r2, [r3, #1]!
   1550c:	cmp	r2, r1
   15510:	bne	15500 <__assert_fail@plt+0x3f98>
   15514:	b	1568c <__assert_fail@plt+0x4124>
   15518:	add	r9, r9, #28
   1551c:	ldr	r3, [sp, #4]
   15520:	subs	r3, r3, #1
   15524:	str	r3, [sp, #4]
   15528:	beq	15548 <__assert_fail@plt+0x3fe0>
   1552c:	str	fp, [r9, #-20]	; 0xffffffec
   15530:	ldr	r5, [r9, #-24]	; 0xffffffe8
   15534:	ldr	r4, [r9, #-28]	; 0xffffffe4
   15538:	cmp	r5, #0
   1553c:	bne	1564c <__assert_fail@plt+0x40e4>
   15540:	b	15518 <__assert_fail@plt+0x3fb0>
   15544:	ldr	fp, [sp, #12]
   15548:	mov	r3, #0
   1554c:	strb	r3, [fp]
   15550:	ldr	r0, [sp, #40]	; 0x28
   15554:	bl	17e64 <argp_parse@@Base+0xbf4>
   15558:	ldr	r4, [sp, #20]
   1555c:	ldr	r0, [r4, #8]
   15560:	bl	17e64 <argp_parse@@Base+0xbf4>
   15564:	ldr	r2, [sp, #32]
   15568:	str	r2, [r4]
   1556c:	ldr	r2, [sp, #36]	; 0x24
   15570:	str	r2, [r4, #4]
   15574:	str	sl, [r4, #8]
   15578:	b	152d4 <__assert_fail@plt+0x3d6c>
   1557c:	ldr	fp, [sp, #20]
   15580:	mov	r0, fp
   15584:	add	sp, sp, #52	; 0x34
   15588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1558c:	strb	r4, [r7]
   15590:	add	r7, r7, #1
   15594:	add	r5, r5, #24
   15598:	ldr	r3, [r5, #4]
   1559c:	cmp	r3, #0
   155a0:	bne	155b0 <__assert_fail@plt+0x4048>
   155a4:	ldr	r3, [r5]
   155a8:	cmp	r3, #0
   155ac:	beq	151a0 <__assert_fail@plt+0x3c38>
   155b0:	ldr	r3, [r5, #12]
   155b4:	tst	r3, #4
   155b8:	beq	151b8 <__assert_fail@plt+0x3c50>
   155bc:	ldr	r3, [r6, #-24]	; 0xffffffe8
   155c0:	add	r3, r3, #1
   155c4:	str	r3, [r6, #-24]	; 0xffffffe8
   155c8:	ldr	r3, [r5, #12]
   155cc:	tst	r3, #8
   155d0:	bne	15594 <__assert_fail@plt+0x402c>
   155d4:	ldr	r4, [r5, #4]
   155d8:	sub	r3, r4, #1
   155dc:	cmp	r3, #254	; 0xfe
   155e0:	bhi	15594 <__assert_fail@plt+0x402c>
   155e4:	bl	113c4 <__ctype_b_loc@plt>
   155e8:	ldr	r2, [r0]
   155ec:	lsl	r3, r4, #1
   155f0:	ldrh	r3, [r2, r3]
   155f4:	tst	r3, #16384	; 0x4000
   155f8:	beq	15594 <__assert_fail@plt+0x402c>
   155fc:	uxtb	r4, r4
   15600:	ldr	r3, [fp, #8]
   15604:	cmp	r3, r7
   15608:	bcs	1558c <__assert_fail@plt+0x4024>
   1560c:	ldrb	r2, [r3]
   15610:	cmp	r2, r4
   15614:	beq	15594 <__assert_fail@plt+0x402c>
   15618:	sub	r1, r7, #1
   1561c:	cmp	r3, r1
   15620:	beq	1558c <__assert_fail@plt+0x4024>
   15624:	ldrb	r2, [r3, #1]!
   15628:	cmp	r2, r4
   1562c:	bne	1561c <__assert_fail@plt+0x40b4>
   15630:	b	15594 <__assert_fail@plt+0x402c>
   15634:	ldrb	r1, [r8]
   15638:	cmp	r1, r6
   1563c:	beq	154e4 <__assert_fail@plt+0x3f7c>
   15640:	add	r4, r4, #24
   15644:	subs	r5, r5, #1
   15648:	beq	15518 <__assert_fail@plt+0x3fb0>
   1564c:	ldr	r3, [r4, #12]
   15650:	tst	r3, #8
   15654:	bne	15640 <__assert_fail@plt+0x40d8>
   15658:	ldr	r6, [r4, #4]
   1565c:	sub	r3, r6, #1
   15660:	cmp	r3, #254	; 0xfe
   15664:	bhi	15640 <__assert_fail@plt+0x40d8>
   15668:	bl	113c4 <__ctype_b_loc@plt>
   1566c:	ldr	r2, [r0]
   15670:	lsl	r3, r6, #1
   15674:	ldrh	r3, [r2, r3]
   15678:	tst	r3, #16384	; 0x4000
   1567c:	bne	15634 <__assert_fail@plt+0x40cc>
   15680:	b	15640 <__assert_fail@plt+0x40d8>
   15684:	strb	r1, [fp]
   15688:	add	fp, fp, #1
   1568c:	add	r8, r8, #1
   15690:	b	15640 <__assert_fail@plt+0x40d8>
   15694:	andeq	sl, r1, r8, lsr sl
   15698:	andeq	r0, r0, r2, asr #3
   1569c:	andeq	sl, r1, r8, lsr #22
   156a0:	andeq	sl, r1, r4, lsr fp
   156a4:	andeq	sl, r1, r8, lsr fp
   156a8:	ldrdeq	r0, [r0], -sl
   156ac:	andeq	sl, r1, r8, asr #22
   156b0:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   156b4:	andeq	sl, r1, ip, ror #22
   156b8:	andeq	sl, r1, r4, asr #20
   156bc:	andeq	r0, r0, sl, asr #7
   156c0:	andeq	sl, r1, r8, lsr #23
   156c4:	andeq	sl, r1, r4, asr #23

000156c8 <argp_failure@@Base>:
   156c8:	push	{r3}		; (str r3, [sp, #-4]!)
   156cc:	push	{r4, r5, r6, r7, lr}
   156d0:	sub	sp, sp, #200	; 0xc8
   156d4:	mov	r7, r1
   156d8:	mov	r6, r2
   156dc:	subs	r5, r0, #0
   156e0:	beq	15830 <argp_failure@@Base+0x168>
   156e4:	ldr	r3, [r5, #16]
   156e8:	tst	r3, #2
   156ec:	bne	15820 <argp_failure@@Base+0x158>
   156f0:	ldr	r4, [r5, #44]	; 0x2c
   156f4:	cmp	r4, #0
   156f8:	beq	15820 <argp_failure@@Base+0x158>
   156fc:	mov	r0, r4
   15700:	bl	114e4 <flockfile@plt>
   15704:	ldr	r0, [r5, #40]	; 0x28
   15708:	mov	r1, r4
   1570c:	bl	111f0 <fputs_unlocked@plt>
   15710:	ldr	r3, [sp, #220]	; 0xdc
   15714:	cmp	r3, #0
   15718:	beq	15774 <argp_failure@@Base+0xac>
   1571c:	add	r3, sp, #224	; 0xe0
   15720:	str	r3, [sp]
   15724:	ldr	r3, [r4, #20]
   15728:	ldr	r2, [r4, #24]
   1572c:	cmp	r3, r2
   15730:	addcc	r2, r3, #1
   15734:	strcc	r2, [r4, #20]
   15738:	movcc	r2, #58	; 0x3a
   1573c:	strbcc	r2, [r3]
   15740:	bcs	15854 <argp_failure@@Base+0x18c>
   15744:	ldr	r3, [r4, #20]
   15748:	ldr	r2, [r4, #24]
   1574c:	cmp	r3, r2
   15750:	addcc	r2, r3, #1
   15754:	strcc	r2, [r4, #20]
   15758:	movcc	r2, #32
   1575c:	strbcc	r2, [r3]
   15760:	bcs	15864 <argp_failure@@Base+0x19c>
   15764:	ldr	r2, [sp]
   15768:	ldr	r1, [sp, #220]	; 0xdc
   1576c:	mov	r0, r4
   15770:	bl	114c0 <vfprintf@plt>
   15774:	cmp	r6, #0
   15778:	beq	157dc <argp_failure@@Base+0x114>
   1577c:	ldr	r3, [r4, #20]
   15780:	ldr	r2, [r4, #24]
   15784:	cmp	r3, r2
   15788:	addcc	r2, r3, #1
   1578c:	strcc	r2, [r4, #20]
   15790:	movcc	r2, #58	; 0x3a
   15794:	strbcc	r2, [r3]
   15798:	bcs	15874 <argp_failure@@Base+0x1ac>
   1579c:	ldr	r3, [r4, #20]
   157a0:	ldr	r2, [r4, #24]
   157a4:	cmp	r3, r2
   157a8:	addcc	r2, r3, #1
   157ac:	strcc	r2, [r4, #20]
   157b0:	movcc	r2, #32
   157b4:	strbcc	r2, [r3]
   157b8:	bcs	15884 <argp_failure@@Base+0x1bc>
   157bc:	mov	r2, #200	; 0xc8
   157c0:	mov	r1, sp
   157c4:	mov	r0, r6
   157c8:	bl	11424 <strerror_r@plt>
   157cc:	cmp	r0, #0
   157d0:	beq	15894 <argp_failure@@Base+0x1cc>
   157d4:	mov	r1, r4
   157d8:	bl	111f0 <fputs_unlocked@plt>
   157dc:	ldr	r3, [r4, #20]
   157e0:	ldr	r2, [r4, #24]
   157e4:	cmp	r3, r2
   157e8:	addcc	r2, r3, #1
   157ec:	strcc	r2, [r4, #20]
   157f0:	movcc	r2, #10
   157f4:	strbcc	r2, [r3]
   157f8:	bcs	158ac <argp_failure@@Base+0x1e4>
   157fc:	mov	r0, r4
   15800:	bl	112f8 <funlockfile@plt>
   15804:	cmp	r7, #0
   15808:	beq	15820 <argp_failure@@Base+0x158>
   1580c:	cmp	r5, #0
   15810:	beq	158bc <argp_failure@@Base+0x1f4>
   15814:	ldr	r3, [r5, #16]
   15818:	tst	r3, #32
   1581c:	beq	158bc <argp_failure@@Base+0x1f4>
   15820:	add	sp, sp, #200	; 0xc8
   15824:	pop	{r4, r5, r6, r7, lr}
   15828:	add	sp, sp, #4
   1582c:	bx	lr
   15830:	ldr	r3, [pc, #140]	; 158c4 <argp_failure@@Base+0x1fc>
   15834:	ldr	r4, [r3]
   15838:	cmp	r4, #0
   1583c:	beq	15820 <argp_failure@@Base+0x158>
   15840:	mov	r0, r4
   15844:	bl	114e4 <flockfile@plt>
   15848:	ldr	r3, [pc, #120]	; 158c8 <argp_failure@@Base+0x200>
   1584c:	ldr	r0, [r3]
   15850:	b	15708 <argp_failure@@Base+0x40>
   15854:	mov	r1, #58	; 0x3a
   15858:	mov	r0, r4
   1585c:	bl	1149c <__overflow@plt>
   15860:	b	15744 <argp_failure@@Base+0x7c>
   15864:	mov	r1, #32
   15868:	mov	r0, r4
   1586c:	bl	1149c <__overflow@plt>
   15870:	b	15764 <argp_failure@@Base+0x9c>
   15874:	mov	r1, #58	; 0x3a
   15878:	mov	r0, r4
   1587c:	bl	1149c <__overflow@plt>
   15880:	b	1579c <argp_failure@@Base+0xd4>
   15884:	mov	r1, #32
   15888:	mov	r0, r4
   1588c:	bl	1149c <__overflow@plt>
   15890:	b	157bc <argp_failure@@Base+0xf4>
   15894:	mov	r0, r6
   15898:	bl	11394 <strerror@plt>
   1589c:	ldr	r3, [pc, #40]	; 158cc <argp_failure@@Base+0x204>
   158a0:	cmp	r0, #0
   158a4:	moveq	r0, r3
   158a8:	b	157d4 <argp_failure@@Base+0x10c>
   158ac:	mov	r1, #10
   158b0:	mov	r0, r4
   158b4:	bl	1149c <__overflow@plt>
   158b8:	b	157fc <argp_failure@@Base+0x134>
   158bc:	mov	r0, r7
   158c0:	bl	113d0 <exit@plt>
   158c4:	andeq	ip, r2, r0, asr r4
   158c8:	andeq	ip, r2, r8, asr #8
   158cc:	strdeq	sl, [r1], -r8
   158d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158d4:	add	fp, sp, #32
   158d8:	sub	sp, sp, #108	; 0x6c
   158dc:	str	r0, [fp, #-112]	; 0xffffff90
   158e0:	str	r1, [fp, #-100]	; 0xffffff9c
   158e4:	str	r3, [fp, #-104]	; 0xffffff98
   158e8:	subs	r3, r2, #0
   158ec:	str	r3, [fp, #-132]	; 0xffffff7c
   158f0:	beq	1695c <argp_failure@@Base+0x1294>
   158f4:	mov	r0, r3
   158f8:	bl	114e4 <flockfile@plt>
   158fc:	ldr	r3, [pc, #3772]	; 167c0 <argp_failure@@Base+0x10f8>
   15900:	ldr	r3, [r3, #36]	; 0x24
   15904:	str	r3, [fp, #-108]	; 0xffffff94
   15908:	cmp	r3, #0
   1590c:	beq	159e4 <argp_failure@@Base+0x31c>
   15910:	mov	r3, #0
   15914:	ldr	r2, [pc, #3748]	; 167c0 <argp_failure@@Base+0x10f8>
   15918:	ldr	r2, [r2, #32]
   1591c:	mov	r1, r3
   15920:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15924:	bl	18b1c <argp_parse@@Base+0x18ac>
   15928:	subs	sl, r0, #0
   1592c:	beq	15d90 <argp_failure@@Base+0x6c8>
   15930:	ldr	r3, [fp, #-104]	; 0xffffff98
   15934:	tst	r3, #11
   15938:	moveq	r3, #0
   1593c:	streq	r3, [fp, #-108]	; 0xffffff94
   15940:	bne	15d9c <argp_failure@@Base+0x6d4>
   15944:	ldr	r3, [fp, #-104]	; 0xffffff98
   15948:	tst	r3, #3
   1594c:	moveq	r4, #0
   15950:	bne	15e20 <argp_failure@@Base+0x758>
   15954:	ldr	r3, [fp, #-104]	; 0xffffff98
   15958:	tst	r3, #16
   1595c:	bne	1601c <argp_failure@@Base+0x954>
   15960:	ldr	r3, [fp, #-104]	; 0xffffff98
   15964:	tst	r3, #4
   15968:	bne	16044 <argp_failure@@Base+0x97c>
   1596c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15970:	tst	r3, #8
   15974:	beq	168d0 <argp_failure@@Base+0x1208>
   15978:	ldr	r3, [fp, #-108]	; 0xffffff94
   1597c:	ldr	r3, [r3, #4]
   15980:	cmp	r3, #0
   15984:	beq	168d0 <argp_failure@@Base+0x1208>
   15988:	cmp	r4, #0
   1598c:	beq	159b4 <argp_failure@@Base+0x2ec>
   15990:	ldr	r2, [sl, #28]
   15994:	ldr	r3, [sl, #32]
   15998:	cmp	r2, r3
   1599c:	bcs	16060 <argp_failure@@Base+0x998>
   159a0:	ldr	r3, [sl, #28]
   159a4:	add	r2, r3, #1
   159a8:	str	r2, [sl, #28]
   159ac:	mov	r2, #10
   159b0:	strb	r2, [r3]
   159b4:	mov	r3, #0
   159b8:	str	r3, [fp, #-88]	; 0xffffffa8
   159bc:	str	r3, [fp, #-84]	; 0xffffffac
   159c0:	str	r3, [fp, #-80]	; 0xffffffb0
   159c4:	ldr	r3, [fp, #-108]	; 0xffffff94
   159c8:	ldr	r2, [r3]
   159cc:	str	r2, [fp, #-96]	; 0xffffffa0
   159d0:	ldr	r3, [r3, #4]
   159d4:	str	r3, [fp, #-120]	; 0xffffff88
   159d8:	cmp	r3, #0
   159dc:	bne	16448 <argp_failure@@Base+0xd80>
   159e0:	b	168cc <argp_failure@@Base+0x1204>
   159e4:	ldr	r0, [pc, #3452]	; 16768 <argp_failure@@Base+0x10a0>
   159e8:	bl	11364 <getenv@plt>
   159ec:	mov	r9, r0
   159f0:	sub	ip, fp, #76	; 0x4c
   159f4:	ldr	lr, [pc, #3524]	; 167c0 <argp_failure@@Base+0x10f8>
   159f8:	ldm	lr!, {r0, r1, r2, r3}
   159fc:	stmia	ip!, {r0, r1, r2, r3}
   15a00:	ldm	lr!, {r0, r1, r2, r3}
   15a04:	stmia	ip!, {r0, r1, r2, r3}
   15a08:	ldm	lr, {r0, r1}
   15a0c:	stm	ip, {r0, r1}
   15a10:	cmp	r9, #0
   15a14:	ldrne	sl, [pc, #3408]	; 1676c <argp_failure@@Base+0x10a4>
   15a18:	addne	r8, sl, #168	; 0xa8
   15a1c:	bne	15cc0 <argp_failure@@Base+0x5f8>
   15a20:	b	15910 <argp_failure@@Base+0x248>
   15a24:	mov	r5, r3
   15a28:	mov	r9, r5
   15a2c:	mov	r3, r5
   15a30:	ldrb	r0, [r3], #1
   15a34:	lsl	r2, r0, #1
   15a38:	ldrh	r2, [r1, r2]
   15a3c:	tst	r2, #8192	; 0x2000
   15a40:	bne	15a24 <argp_failure@@Base+0x35c>
   15a44:	tst	r2, #1024	; 0x400
   15a48:	beq	15cb8 <argp_failure@@Base+0x5f0>
   15a4c:	cmp	r0, #95	; 0x5f
   15a50:	cmpne	r0, #45	; 0x2d
   15a54:	moveq	r3, #1
   15a58:	movne	r3, #0
   15a5c:	lsl	r2, r2, #28
   15a60:	orrs	r3, r3, r2, lsr #31
   15a64:	beq	169e0 <argp_failure@@Base+0x1318>
   15a68:	mov	r4, r5
   15a6c:	ldrb	r3, [r4, #1]!
   15a70:	lsl	r2, r3, #1
   15a74:	ldrh	r2, [r1, r2]
   15a78:	lsl	r2, r2, #28
   15a7c:	cmp	r3, #95	; 0x5f
   15a80:	cmpne	r3, #45	; 0x2d
   15a84:	moveq	r3, #1
   15a88:	movne	r3, #0
   15a8c:	orrs	r3, r3, r2, lsr #31
   15a90:	bne	15a6c <argp_failure@@Base+0x3a4>
   15a94:	sub	r5, r4, r5
   15a98:	ldrb	r3, [r4]
   15a9c:	lsl	r2, r3, #1
   15aa0:	ldrh	r2, [r1, r2]
   15aa4:	tst	r2, #8192	; 0x2000
   15aa8:	beq	15ac0 <argp_failure@@Base+0x3f8>
   15aac:	ldrb	r3, [r4, #1]!
   15ab0:	lsl	r2, r3, #1
   15ab4:	ldrh	r2, [r1, r2]
   15ab8:	tst	r2, #8192	; 0x2000
   15abc:	bne	15aac <argp_failure@@Base+0x3e4>
   15ac0:	cmp	r3, #44	; 0x2c
   15ac4:	cmpne	r3, #0
   15ac8:	beq	169f8 <argp_failure@@Base+0x1330>
   15acc:	cmp	r3, #61	; 0x3d
   15ad0:	beq	15af8 <argp_failure@@Base+0x430>
   15ad4:	ldrb	r3, [r4]
   15ad8:	lsl	r3, r3, #1
   15adc:	ldrh	r3, [r1, r3]
   15ae0:	tst	r3, #2048	; 0x800
   15ae4:	bne	15b78 <argp_failure@@Base+0x4b0>
   15ae8:	ldr	r3, [fp, #-108]	; 0xffffff94
   15aec:	str	r3, [fp, #-96]	; 0xffffffa0
   15af0:	str	r3, [fp, #-116]	; 0xffffff8c
   15af4:	b	16a0c <argp_failure@@Base+0x1344>
   15af8:	add	r2, r4, #1
   15afc:	ldrb	r3, [r4, #1]
   15b00:	lsl	r3, r3, #1
   15b04:	ldrh	r3, [r1, r3]
   15b08:	tst	r3, #8192	; 0x2000
   15b0c:	beq	169f0 <argp_failure@@Base+0x1328>
   15b10:	ldrb	r3, [r2, #1]!
   15b14:	lsl	r3, r3, #1
   15b18:	ldrh	r3, [r1, r3]
   15b1c:	tst	r3, #8192	; 0x2000
   15b20:	bne	15b10 <argp_failure@@Base+0x448>
   15b24:	mov	r4, r2
   15b28:	b	15ad4 <argp_failure@@Base+0x40c>
   15b2c:	ldrb	r3, [r9, #1]
   15b30:	cmp	r3, #111	; 0x6f
   15b34:	movne	r3, #1
   15b38:	strne	r3, [fp, #-96]	; 0xffffffa0
   15b3c:	strne	r3, [fp, #-116]	; 0xffffff8c
   15b40:	bne	16a0c <argp_failure@@Base+0x1344>
   15b44:	ldrb	r3, [r9, #2]
   15b48:	cmp	r3, #45	; 0x2d
   15b4c:	movne	r3, #1
   15b50:	strne	r3, [fp, #-96]	; 0xffffffa0
   15b54:	strne	r3, [fp, #-116]	; 0xffffff8c
   15b58:	bne	16a0c <argp_failure@@Base+0x1344>
   15b5c:	add	r9, r9, #3
   15b60:	sub	r5, r5, #3
   15b64:	ldr	r3, [fp, #-108]	; 0xffffff94
   15b68:	str	r3, [fp, #-116]	; 0xffffff8c
   15b6c:	mov	r3, #1
   15b70:	str	r3, [fp, #-96]	; 0xffffffa0
   15b74:	b	16a0c <argp_failure@@Base+0x1344>
   15b78:	mov	r2, #10
   15b7c:	mov	r1, #0
   15b80:	mov	r0, r4
   15b84:	bl	11214 <strtol@plt>
   15b88:	str	r0, [fp, #-116]	; 0xffffff8c
   15b8c:	ldr	r2, [r6]
   15b90:	ldrb	r3, [r4]
   15b94:	lsl	r3, r3, #1
   15b98:	ldrh	r3, [r2, r3]
   15b9c:	tst	r3, #2048	; 0x800
   15ba0:	beq	15bb8 <argp_failure@@Base+0x4f0>
   15ba4:	ldrb	r3, [r4, #1]!
   15ba8:	lsl	r3, r3, #1
   15bac:	ldrh	r3, [r2, r3]
   15bb0:	tst	r3, #2048	; 0x800
   15bb4:	bne	15ba4 <argp_failure@@Base+0x4dc>
   15bb8:	ldrb	r3, [r4]
   15bbc:	lsl	r3, r3, #1
   15bc0:	ldrh	r3, [r2, r3]
   15bc4:	tst	r3, #8192	; 0x2000
   15bc8:	beq	15bec <argp_failure@@Base+0x524>
   15bcc:	ldrb	r3, [r4, #1]!
   15bd0:	lsl	r3, r3, #1
   15bd4:	ldrh	r3, [r2, r3]
   15bd8:	tst	r3, #8192	; 0x2000
   15bdc:	bne	15bcc <argp_failure@@Base+0x504>
   15be0:	ldr	r3, [fp, #-108]	; 0xffffff94
   15be4:	str	r3, [fp, #-96]	; 0xffffffa0
   15be8:	b	16a0c <argp_failure@@Base+0x1344>
   15bec:	ldr	r3, [fp, #-108]	; 0xffffff94
   15bf0:	str	r3, [fp, #-96]	; 0xffffffa0
   15bf4:	b	16a0c <argp_failure@@Base+0x1344>
   15bf8:	str	r9, [sp, #4]
   15bfc:	str	r7, [sp]
   15c00:	ldr	r3, [pc, #2920]	; 16770 <argp_failure@@Base+0x10a8>
   15c04:	mov	r2, #0
   15c08:	mov	r1, r2
   15c0c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15c10:	bl	156c8 <argp_failure@@Base>
   15c14:	b	15c7c <argp_failure@@Base+0x5b4>
   15c18:	add	r6, r6, #16
   15c1c:	cmp	r6, r8
   15c20:	beq	15c98 <argp_failure@@Base+0x5d0>
   15c24:	mov	r0, r6
   15c28:	bl	113e8 <strlen@plt>
   15c2c:	mov	r7, r0
   15c30:	cmp	r0, r5
   15c34:	bne	15c18 <argp_failure@@Base+0x550>
   15c38:	mov	r2, r5
   15c3c:	mov	r1, r6
   15c40:	mov	r0, r9
   15c44:	bl	11538 <strncmp@plt>
   15c48:	cmp	r0, #0
   15c4c:	bne	15c18 <argp_failure@@Base+0x550>
   15c50:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15c54:	cmp	r3, #0
   15c58:	beq	15c68 <argp_failure@@Base+0x5a0>
   15c5c:	ldrb	r3, [r6, #14]
   15c60:	cmp	r3, #0
   15c64:	beq	15bf8 <argp_failure@@Base+0x530>
   15c68:	ldrb	r3, [r6, #15]
   15c6c:	sub	r2, fp, #36	; 0x24
   15c70:	add	r3, r2, r3
   15c74:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15c78:	str	r2, [r3, #-40]	; 0xffffffd8
   15c7c:	cmp	r6, r8
   15c80:	beq	15c98 <argp_failure@@Base+0x5d0>
   15c84:	ldrb	r3, [r4]
   15c88:	cmp	r3, #44	; 0x2c
   15c8c:	addeq	r9, r4, #1
   15c90:	movne	r9, r4
   15c94:	b	15cc0 <argp_failure@@Base+0x5f8>
   15c98:	str	r9, [sp, #4]
   15c9c:	str	r5, [sp]
   15ca0:	ldr	r3, [pc, #2764]	; 16774 <argp_failure@@Base+0x10ac>
   15ca4:	mov	r2, #0
   15ca8:	mov	r1, r2
   15cac:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15cb0:	bl	156c8 <argp_failure@@Base>
   15cb4:	b	15c84 <argp_failure@@Base+0x5bc>
   15cb8:	cmp	r0, #0
   15cbc:	bne	15ce0 <argp_failure@@Base+0x618>
   15cc0:	ldrb	r3, [r9]
   15cc4:	cmp	r3, #0
   15cc8:	beq	15cf8 <argp_failure@@Base+0x630>
   15ccc:	bl	113c4 <__ctype_b_loc@plt>
   15cd0:	mov	r6, r0
   15cd4:	ldr	r1, [r0]
   15cd8:	mov	r5, r9
   15cdc:	b	15a28 <argp_failure@@Base+0x360>
   15ce0:	str	r5, [sp]
   15ce4:	ldr	r3, [pc, #2700]	; 16778 <argp_failure@@Base+0x10b0>
   15ce8:	mov	r2, #0
   15cec:	mov	r1, r2
   15cf0:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15cf4:	bl	156c8 <argp_failure@@Base>
   15cf8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15cfc:	ldr	r3, [pc, #2680]	; 1677c <argp_failure@@Base+0x10b4>
   15d00:	add	r1, r3, #144	; 0x90
   15d04:	add	r3, r3, #16
   15d08:	cmp	r3, r1
   15d0c:	beq	15d60 <argp_failure@@Base+0x698>
   15d10:	ldrb	r2, [r3, #14]
   15d14:	cmp	r2, #0
   15d18:	bne	15d04 <argp_failure@@Base+0x63c>
   15d1c:	ldrb	r2, [r3, #15]
   15d20:	cmp	r2, #32
   15d24:	beq	15d04 <argp_failure@@Base+0x63c>
   15d28:	sub	ip, fp, #36	; 0x24
   15d2c:	add	r2, ip, r2
   15d30:	ldr	r2, [r2, #-40]	; 0xffffffd8
   15d34:	cmp	r2, r0
   15d38:	blt	15d04 <argp_failure@@Base+0x63c>
   15d3c:	str	r3, [sp, #4]
   15d40:	ldr	r3, [pc, #2616]	; 16780 <argp_failure@@Base+0x10b8>
   15d44:	str	r3, [sp]
   15d48:	ldr	r3, [pc, #2612]	; 16784 <argp_failure@@Base+0x10bc>
   15d4c:	mov	r2, #0
   15d50:	mov	r1, r2
   15d54:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15d58:	bl	156c8 <argp_failure@@Base>
   15d5c:	b	15910 <argp_failure@@Base+0x248>
   15d60:	ldr	r4, [pc, #2648]	; 167c0 <argp_failure@@Base+0x10f8>
   15d64:	mov	ip, r4
   15d68:	sub	lr, fp, #76	; 0x4c
   15d6c:	ldm	lr!, {r0, r1, r2, r3}
   15d70:	stmia	ip!, {r0, r1, r2, r3}
   15d74:	ldm	lr!, {r0, r1, r2, r3}
   15d78:	stmia	ip!, {r0, r1, r2, r3}
   15d7c:	ldm	lr, {r0, r1}
   15d80:	stm	ip, {r0, r1}
   15d84:	mov	r3, #1
   15d88:	str	r3, [r4, #36]	; 0x24
   15d8c:	b	15910 <argp_failure@@Base+0x248>
   15d90:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15d94:	bl	112f8 <funlockfile@plt>
   15d98:	b	1695c <argp_failure@@Base+0x1294>
   15d9c:	mov	r1, #0
   15da0:	ldr	r0, [fp, #-112]	; 0xffffff90
   15da4:	bl	1500c <__assert_fail@plt+0x3aa4>
   15da8:	str	r0, [fp, #-108]	; 0xffffff94
   15dac:	ldr	r1, [pc, #2516]	; 16788 <argp_failure@@Base+0x10c0>
   15db0:	bl	13f14 <__assert_fail@plt+0x29ac>
   15db4:	cmp	r0, #0
   15db8:	mvnne	r3, #0
   15dbc:	strne	r3, [r0, #12]
   15dc0:	ldr	r1, [pc, #2500]	; 1678c <argp_failure@@Base+0x10c4>
   15dc4:	ldr	r0, [fp, #-108]	; 0xffffff94
   15dc8:	bl	13f14 <__assert_fail@plt+0x29ac>
   15dcc:	cmp	r0, #0
   15dd0:	mvnne	r3, #0
   15dd4:	strne	r3, [r0, #12]
   15dd8:	ldr	r0, [fp, #-108]	; 0xffffff94
   15ddc:	ldr	r3, [r0, #4]
   15de0:	cmp	r3, #0
   15de4:	beq	15944 <argp_failure@@Base+0x27c>
   15de8:	ldr	r2, [r0]
   15dec:	mov	r3, #0
   15df0:	str	r3, [r2, #24]
   15df4:	add	r3, r3, #1
   15df8:	add	r2, r2, #28
   15dfc:	ldr	r1, [r0, #4]
   15e00:	cmp	r3, r1
   15e04:	bcc	15df0 <argp_failure@@Base+0x728>
   15e08:	ldr	r3, [pc, #2432]	; 16790 <argp_failure@@Base+0x10c8>
   15e0c:	mov	r2, #28
   15e10:	ldr	r0, [fp, #-108]	; 0xffffff94
   15e14:	ldr	r0, [r0]
   15e18:	bl	114fc <qsort@plt>
   15e1c:	b	15944 <argp_failure@@Base+0x27c>
   15e20:	ldr	r0, [fp, #-112]	; 0xffffff90
   15e24:	bl	13fac <__assert_fail@plt+0x2a44>
   15e28:	mov	r2, r0
   15e2c:	add	r3, r0, #14
   15e30:	bic	r3, r3, #7
   15e34:	sub	sp, sp, r3
   15e38:	add	r8, sp, #8
   15e3c:	mov	r1, #0
   15e40:	mov	r0, r8
   15e44:	bl	1143c <memset@plt>
   15e48:	mov	r5, #1
   15e4c:	ldr	r4, [pc, #2412]	; 167c0 <argp_failure@@Base+0x10f8>
   15e50:	ldr	r9, [pc, #2364]	; 16794 <argp_failure@@Base+0x10cc>
   15e54:	str	r8, [fp, #-96]	; 0xffffffa0
   15e58:	ldr	r8, [fp, #-104]	; 0xffffff98
   15e5c:	b	15f0c <argp_failure@@Base+0x844>
   15e60:	mov	r0, sl
   15e64:	bl	18b94 <argp_parse@@Base+0x1924>
   15e68:	b	15f28 <argp_failure@@Base+0x860>
   15e6c:	mov	r0, sl
   15e70:	bl	18b94 <argp_parse@@Base+0x1924>
   15e74:	b	15f70 <argp_failure@@Base+0x8a8>
   15e78:	mov	r1, sl
   15e7c:	ldr	r0, [fp, #-108]	; 0xffffff94
   15e80:	bl	13d04 <__assert_fail@plt+0x279c>
   15e84:	orr	r8, r8, #2
   15e88:	str	sl, [sp]
   15e8c:	mov	r3, #1
   15e90:	sub	r2, fp, #76	; 0x4c
   15e94:	ldr	r1, [fp, #-100]	; 0xffffff9c
   15e98:	ldr	r0, [fp, #-112]	; 0xffffff90
   15e9c:	bl	1422c <__assert_fail@plt+0x2cc4>
   15ea0:	mov	r6, r0
   15ea4:	ldr	r3, [sl, #28]
   15ea8:	ldr	r2, [sl, #24]
   15eac:	sub	r3, r3, r2
   15eb0:	ldr	r2, [sl, #16]
   15eb4:	cmp	r3, r2
   15eb8:	bhi	15fe0 <argp_failure@@Base+0x918>
   15ebc:	str	r7, [sl, #12]
   15ec0:	ldr	r3, [sl, #28]
   15ec4:	ldr	r2, [sl, #24]
   15ec8:	sub	r3, r3, r2
   15ecc:	ldr	r2, [sl, #16]
   15ed0:	cmp	r3, r2
   15ed4:	bhi	15fec <argp_failure@@Base+0x924>
   15ed8:	str	r5, [sl, #4]
   15edc:	ldr	r2, [sl, #28]
   15ee0:	ldr	r3, [sl, #32]
   15ee4:	cmp	r2, r3
   15ee8:	bcs	15ff8 <argp_failure@@Base+0x930>
   15eec:	ldr	r3, [sl, #28]
   15ef0:	add	r2, r3, #1
   15ef4:	str	r2, [sl, #28]
   15ef8:	mov	r2, #10
   15efc:	strb	r2, [r3]
   15f00:	mov	r5, #0
   15f04:	cmp	r6, r5
   15f08:	beq	16010 <argp_failure@@Base+0x948>
   15f0c:	ldr	r6, [r4, #28]
   15f10:	ldr	r3, [sl, #28]
   15f14:	ldr	r2, [sl, #24]
   15f18:	sub	r3, r3, r2
   15f1c:	ldr	r2, [sl, #16]
   15f20:	cmp	r3, r2
   15f24:	bhi	15e60 <argp_failure@@Base+0x798>
   15f28:	ldr	r7, [sl, #12]
   15f2c:	str	r6, [sl, #12]
   15f30:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15f34:	str	r3, [fp, #-76]	; 0xffffffb4
   15f38:	cmp	r5, #0
   15f3c:	ldr	r3, [fp, #4]
   15f40:	ldrne	r2, [pc, #2128]	; 16798 <argp_failure@@Base+0x10d0>
   15f44:	ldreq	r2, [pc, #2128]	; 1679c <argp_failure@@Base+0x10d4>
   15f48:	mov	r1, r9
   15f4c:	mov	r0, sl
   15f50:	bl	19228 <argp_parse@@Base+0x1fb8>
   15f54:	ldr	r6, [r4, #28]
   15f58:	ldr	r3, [sl, #28]
   15f5c:	ldr	r2, [sl, #24]
   15f60:	sub	r3, r3, r2
   15f64:	ldr	r2, [sl, #16]
   15f68:	cmp	r3, r2
   15f6c:	bhi	15e6c <argp_failure@@Base+0x7a4>
   15f70:	ldr	r5, [sl, #4]
   15f74:	str	r6, [sl, #4]
   15f78:	tst	r8, #2
   15f7c:	beq	15e78 <argp_failure@@Base+0x7b0>
   15f80:	ldr	r3, [fp, #-108]	; 0xffffff94
   15f84:	ldr	r3, [r3, #4]
   15f88:	cmp	r3, #0
   15f8c:	beq	15e88 <argp_failure@@Base+0x7c0>
   15f90:	ldr	r3, [sl, #28]
   15f94:	add	r3, r3, #12
   15f98:	ldr	r2, [sl, #32]
   15f9c:	cmp	r2, r3
   15fa0:	bcs	15fb8 <argp_failure@@Base+0x8f0>
   15fa4:	mov	r1, #12
   15fa8:	mov	r0, sl
   15fac:	bl	19138 <argp_parse@@Base+0x1ec8>
   15fb0:	cmp	r0, #0
   15fb4:	beq	15e88 <argp_failure@@Base+0x7c0>
   15fb8:	ldr	ip, [sl, #28]
   15fbc:	ldr	r3, [pc, #2012]	; 167a0 <argp_failure@@Base+0x10d8>
   15fc0:	ldm	r3!, {r0, r1, r2}
   15fc4:	str	r0, [ip]
   15fc8:	str	r1, [ip, #4]
   15fcc:	str	r2, [ip, #8]
   15fd0:	ldr	r3, [sl, #28]
   15fd4:	add	r3, r3, #12
   15fd8:	str	r3, [sl, #28]
   15fdc:	b	15e88 <argp_failure@@Base+0x7c0>
   15fe0:	mov	r0, sl
   15fe4:	bl	18b94 <argp_parse@@Base+0x1924>
   15fe8:	b	15ebc <argp_failure@@Base+0x7f4>
   15fec:	mov	r0, sl
   15ff0:	bl	18b94 <argp_parse@@Base+0x1924>
   15ff4:	b	15ed8 <argp_failure@@Base+0x810>
   15ff8:	mov	r1, #1
   15ffc:	mov	r0, sl
   16000:	bl	19138 <argp_parse@@Base+0x1ec8>
   16004:	cmp	r0, #0
   16008:	beq	15f00 <argp_failure@@Base+0x838>
   1600c:	b	15eec <argp_failure@@Base+0x824>
   16010:	str	r8, [fp, #-104]	; 0xffffff98
   16014:	mov	r4, #1
   16018:	b	15954 <argp_failure@@Base+0x28c>
   1601c:	str	sl, [sp, #4]
   16020:	mov	r3, #1
   16024:	str	r3, [sp]
   16028:	mov	r3, #0
   1602c:	mov	r2, r3
   16030:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16034:	ldr	r0, [fp, #-112]	; 0xffffff90
   16038:	bl	14784 <__assert_fail@plt+0x321c>
   1603c:	orr	r4, r4, r0
   16040:	b	15960 <argp_failure@@Base+0x298>
   16044:	ldr	r3, [fp, #4]
   16048:	mov	r2, r3
   1604c:	ldr	r1, [pc, #1872]	; 167a4 <argp_failure@@Base+0x10dc>
   16050:	mov	r0, sl
   16054:	bl	19228 <argp_parse@@Base+0x1fb8>
   16058:	mov	r4, #1
   1605c:	b	1596c <argp_failure@@Base+0x2a4>
   16060:	mov	r1, #1
   16064:	mov	r0, sl
   16068:	bl	19138 <argp_parse@@Base+0x1ec8>
   1606c:	cmp	r0, #0
   16070:	beq	159b4 <argp_failure@@Base+0x2ec>
   16074:	b	159a0 <argp_failure@@Base+0x2d8>
   16078:	mov	r0, sl
   1607c:	bl	18b94 <argp_parse@@Base+0x1924>
   16080:	b	1646c <argp_failure@@Base+0xda4>
   16084:	add	r3, r3, #24
   16088:	subs	r2, r2, #1
   1608c:	beq	160b0 <argp_failure@@Base+0x9e8>
   16090:	ldr	r1, [r3, #-24]	; 0xffffffe8
   16094:	cmp	r1, #0
   16098:	beq	16084 <argp_failure@@Base+0x9bc>
   1609c:	ldr	r1, [r3, #-12]
   160a0:	tst	r1, #2
   160a4:	bne	16084 <argp_failure@@Base+0x9bc>
   160a8:	mov	r3, #1
   160ac:	str	r3, [fp, #-116]	; 0xffffff8c
   160b0:	ldr	r3, [pc, #1800]	; 167c0 <argp_failure@@Base+0x10f8>
   160b4:	ldr	r4, [r3, #8]
   160b8:	ldr	r3, [sl, #28]
   160bc:	ldr	r2, [sl, #24]
   160c0:	sub	r3, r3, r2
   160c4:	ldr	r2, [sl, #16]
   160c8:	cmp	r3, r2
   160cc:	bhi	160ec <argp_failure@@Base+0xa24>
   160d0:	str	r4, [sl, #12]
   160d4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   160d8:	ldr	r5, [r3, #4]
   160dc:	cmp	r5, #0
   160e0:	beq	161e8 <argp_failure@@Base+0xb20>
   160e4:	mov	r4, r8
   160e8:	b	16a2c <argp_failure@@Base+0x1364>
   160ec:	mov	r0, sl
   160f0:	bl	18b94 <argp_parse@@Base+0x1924>
   160f4:	b	160d0 <argp_failure@@Base+0xa08>
   160f8:	tst	r6, #2
   160fc:	beq	16108 <argp_failure@@Base+0xa40>
   16100:	add	r9, r9, #1
   16104:	b	16a20 <argp_failure@@Base+0x1358>
   16108:	sub	r1, fp, #76	; 0x4c
   1610c:	ldr	r3, [pc, #1708]	; 167c0 <argp_failure@@Base+0x10f8>
   16110:	ldr	r0, [r3, #8]
   16114:	bl	14600 <__assert_fail@plt+0x3098>
   16118:	ldr	r2, [sl, #28]
   1611c:	ldr	r3, [sl, #32]
   16120:	cmp	r2, r3
   16124:	bcs	161a4 <argp_failure@@Base+0xadc>
   16128:	ldr	r3, [sl, #28]
   1612c:	add	r2, r3, #1
   16130:	str	r2, [sl, #28]
   16134:	mov	r2, #45	; 0x2d
   16138:	strb	r2, [r3]
   1613c:	ldrb	r6, [r9]
   16140:	ldr	r2, [sl, #28]
   16144:	ldr	r3, [sl, #32]
   16148:	cmp	r2, r3
   1614c:	bcs	161bc <argp_failure@@Base+0xaf4>
   16150:	ldr	r3, [sl, #28]
   16154:	add	r2, r3, #1
   16158:	str	r2, [sl, #28]
   1615c:	strb	r6, [r3]
   16160:	ldr	r3, [fp, #-116]	; 0xffffff8c
   16164:	cmp	r3, #0
   16168:	beq	1617c <argp_failure@@Base+0xab4>
   1616c:	ldr	r3, [pc, #1612]	; 167c0 <argp_failure@@Base+0x10f8>
   16170:	ldr	r3, [r3]
   16174:	cmp	r3, #0
   16178:	beq	161d4 <argp_failure@@Base+0xb0c>
   1617c:	ldr	r2, [r8, #8]
   16180:	cmp	r2, #0
   16184:	beq	16100 <argp_failure@@Base+0xa38>
   16188:	ldr	r3, [r8, #12]
   1618c:	tst	r3, #1
   16190:	ldrne	r1, [pc, #1552]	; 167a8 <argp_failure@@Base+0x10e0>
   16194:	ldreq	r1, [pc, #1552]	; 167ac <argp_failure@@Base+0x10e4>
   16198:	mov	r0, sl
   1619c:	bl	19228 <argp_parse@@Base+0x1fb8>
   161a0:	b	16100 <argp_failure@@Base+0xa38>
   161a4:	mov	r1, #1
   161a8:	mov	r0, sl
   161ac:	bl	19138 <argp_parse@@Base+0x1ec8>
   161b0:	cmp	r0, #0
   161b4:	beq	1613c <argp_failure@@Base+0xa74>
   161b8:	b	16128 <argp_failure@@Base+0xa60>
   161bc:	mov	r1, #1
   161c0:	mov	r0, sl
   161c4:	bl	19138 <argp_parse@@Base+0x1ec8>
   161c8:	cmp	r0, #0
   161cc:	beq	16160 <argp_failure@@Base+0xa98>
   161d0:	b	16150 <argp_failure@@Base+0xa88>
   161d4:	ldr	r3, [r8, #8]
   161d8:	cmp	r3, #0
   161dc:	movne	r3, #1
   161e0:	strne	r3, [fp, #-80]	; 0xffffffb0
   161e4:	b	16100 <argp_failure@@Base+0xa38>
   161e8:	ldr	r3, [r8, #12]
   161ec:	tst	r3, #8
   161f0:	beq	162cc <argp_failure@@Base+0xc04>
   161f4:	ldr	r3, [pc, #1476]	; 167c0 <argp_failure@@Base+0x10f8>
   161f8:	ldr	r4, [r3, #16]
   161fc:	ldr	r3, [sl, #28]
   16200:	ldr	r2, [sl, #24]
   16204:	sub	r3, r3, r2
   16208:	ldr	r2, [sl, #16]
   1620c:	cmp	r3, r2
   16210:	bhi	16230 <argp_failure@@Base+0xb68>
   16214:	str	r4, [sl, #12]
   16218:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1621c:	ldr	r5, [r3, #4]
   16220:	cmp	r5, #0
   16224:	beq	16380 <argp_failure@@Base+0xcb8>
   16228:	add	r4, r8, #24
   1622c:	b	16264 <argp_failure@@Base+0xb9c>
   16230:	mov	r0, sl
   16234:	bl	18b94 <argp_parse@@Base+0x1924>
   16238:	b	16214 <argp_failure@@Base+0xb4c>
   1623c:	mov	r2, r6
   16240:	mov	r1, r7
   16244:	ldr	r0, [sl, #28]
   16248:	bl	11298 <memcpy@plt>
   1624c:	ldr	r3, [sl, #28]
   16250:	add	r6, r3, r6
   16254:	str	r6, [sl, #28]
   16258:	add	r4, r4, #24
   1625c:	subs	r5, r5, #1
   16260:	beq	16380 <argp_failure@@Base+0xcb8>
   16264:	ldr	r3, [r4, #-24]	; 0xffffffe8
   16268:	cmp	r3, #0
   1626c:	beq	16258 <argp_failure@@Base+0xb90>
   16270:	ldr	r3, [r4, #-12]
   16274:	tst	r3, #2
   16278:	bne	16258 <argp_failure@@Base+0xb90>
   1627c:	sub	r1, fp, #76	; 0x4c
   16280:	ldr	r3, [pc, #1336]	; 167c0 <argp_failure@@Base+0x10f8>
   16284:	ldr	r0, [r3, #16]
   16288:	bl	14600 <__assert_fail@plt+0x3098>
   1628c:	ldr	r7, [r4, #-24]	; 0xffffffe8
   16290:	mov	r0, r7
   16294:	bl	113e8 <strlen@plt>
   16298:	subs	r6, r0, #0
   1629c:	beq	16258 <argp_failure@@Base+0xb90>
   162a0:	ldr	r3, [sl, #28]
   162a4:	add	r3, r3, r6
   162a8:	ldr	r2, [sl, #32]
   162ac:	cmp	r2, r3
   162b0:	bcs	1623c <argp_failure@@Base+0xb74>
   162b4:	mov	r1, r6
   162b8:	mov	r0, sl
   162bc:	bl	19138 <argp_parse@@Base+0x1ec8>
   162c0:	cmp	r0, #0
   162c4:	beq	16258 <argp_failure@@Base+0xb90>
   162c8:	b	1623c <argp_failure@@Base+0xb74>
   162cc:	ldr	r3, [pc, #1260]	; 167c0 <argp_failure@@Base+0x10f8>
   162d0:	ldr	r4, [r3, #12]
   162d4:	ldr	r3, [sl, #28]
   162d8:	ldr	r2, [sl, #24]
   162dc:	sub	r3, r3, r2
   162e0:	ldr	r2, [sl, #16]
   162e4:	cmp	r3, r2
   162e8:	bhi	16308 <argp_failure@@Base+0xc40>
   162ec:	str	r4, [sl, #12]
   162f0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   162f4:	ldr	r5, [r3, #4]
   162f8:	cmp	r5, #0
   162fc:	beq	16380 <argp_failure@@Base+0xcb8>
   16300:	add	r4, r8, #24
   16304:	b	16320 <argp_failure@@Base+0xc58>
   16308:	mov	r0, sl
   1630c:	bl	18b94 <argp_parse@@Base+0x1924>
   16310:	b	162ec <argp_failure@@Base+0xc24>
   16314:	add	r4, r4, #24
   16318:	subs	r5, r5, #1
   1631c:	beq	16380 <argp_failure@@Base+0xcb8>
   16320:	ldr	r3, [r4, #-24]	; 0xffffffe8
   16324:	cmp	r3, #0
   16328:	beq	16314 <argp_failure@@Base+0xc4c>
   1632c:	ldr	r3, [r4, #-12]
   16330:	tst	r3, #2
   16334:	bne	16314 <argp_failure@@Base+0xc4c>
   16338:	sub	r1, fp, #76	; 0x4c
   1633c:	ldr	r3, [pc, #1148]	; 167c0 <argp_failure@@Base+0x10f8>
   16340:	ldr	r0, [r3, #12]
   16344:	bl	14600 <__assert_fail@plt+0x3098>
   16348:	ldr	r2, [r4, #-24]	; 0xffffffe8
   1634c:	ldr	r1, [pc, #1116]	; 167b0 <argp_failure@@Base+0x10e8>
   16350:	mov	r0, sl
   16354:	bl	19228 <argp_parse@@Base+0x1fb8>
   16358:	ldr	r2, [r8, #8]
   1635c:	cmp	r2, #0
   16360:	beq	16314 <argp_failure@@Base+0xc4c>
   16364:	ldr	r3, [r8, #12]
   16368:	tst	r3, #1
   1636c:	ldrne	r1, [pc, #1088]	; 167b4 <argp_failure@@Base+0x10ec>
   16370:	ldreq	r1, [pc, #1088]	; 167b8 <argp_failure@@Base+0x10f0>
   16374:	mov	r0, sl
   16378:	bl	19228 <argp_parse@@Base+0x1fb8>
   1637c:	b	16314 <argp_failure@@Base+0xc4c>
   16380:	ldr	r3, [sl, #28]
   16384:	ldr	r2, [sl, #24]
   16388:	sub	r3, r3, r2
   1638c:	ldr	r2, [sl, #16]
   16390:	cmp	r3, r2
   16394:	bhi	164d4 <argp_failure@@Base+0xe0c>
   16398:	mov	r3, #0
   1639c:	str	r3, [sl, #4]
   163a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   163a4:	cmp	r3, #0
   163a8:	beq	164f8 <argp_failure@@Base+0xe30>
   163ac:	ldr	r3, [r8, #12]
   163b0:	tst	r3, #8
   163b4:	bne	163e0 <argp_failure@@Base+0xd18>
   163b8:	ldr	r4, [r8, #4]
   163bc:	sub	r3, r4, #1
   163c0:	cmp	r3, #254	; 0xfe
   163c4:	bhi	163e0 <argp_failure@@Base+0xd18>
   163c8:	bl	113c4 <__ctype_b_loc@plt>
   163cc:	ldr	r3, [r0]
   163d0:	lsl	r4, r4, #1
   163d4:	ldrh	r3, [r3, r4]
   163d8:	tst	r3, #16384	; 0x4000
   163dc:	bne	163ec <argp_failure@@Base+0xd24>
   163e0:	ldr	r3, [r8]
   163e4:	cmp	r3, #0
   163e8:	beq	164e0 <argp_failure@@Base+0xe18>
   163ec:	ldr	r3, [sl, #28]
   163f0:	ldr	r2, [sl, #24]
   163f4:	sub	r3, r3, r2
   163f8:	ldr	r2, [sl, #16]
   163fc:	cmp	r3, r2
   16400:	bhi	16750 <argp_failure@@Base+0x1088>
   16404:	ldr	r3, [fp, #-124]	; 0xffffff84
   16408:	str	r3, [sl, #4]
   1640c:	ldr	r3, [sl, #28]
   16410:	ldr	r2, [sl, #24]
   16414:	sub	r3, r3, r2
   16418:	ldr	r2, [sl, #16]
   1641c:	cmp	r3, r2
   16420:	bhi	1675c <argp_failure@@Base+0x1094>
   16424:	ldr	r3, [fp, #-128]	; 0xffffff80
   16428:	str	r3, [sl, #12]
   1642c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16430:	add	r3, r3, #28
   16434:	str	r3, [fp, #-96]	; 0xffffffa0
   16438:	ldr	r3, [fp, #-120]	; 0xffffff88
   1643c:	subs	r3, r3, #1
   16440:	str	r3, [fp, #-120]	; 0xffffff88
   16444:	beq	167d4 <argp_failure@@Base+0x110c>
   16448:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1644c:	ldr	r8, [r3]
   16450:	ldr	r9, [r3, #8]
   16454:	ldr	r3, [sl, #28]
   16458:	ldr	r2, [sl, #24]
   1645c:	sub	r3, r3, r2
   16460:	ldr	r2, [sl, #16]
   16464:	cmp	r3, r2
   16468:	bhi	16078 <argp_failure@@Base+0x9b0>
   1646c:	ldr	r3, [sl, #4]
   16470:	str	r3, [fp, #-124]	; 0xffffff84
   16474:	mov	r3, #0
   16478:	str	r3, [sl, #4]
   1647c:	ldr	r3, [sl, #12]
   16480:	str	r3, [fp, #-128]	; 0xffffff80
   16484:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16488:	str	r2, [fp, #-76]	; 0xffffffb4
   1648c:	str	sl, [fp, #-72]	; 0xffffffb8
   16490:	sub	r3, fp, #88	; 0x58
   16494:	str	r3, [fp, #-68]	; 0xffffffbc
   16498:	mov	r3, #1
   1649c:	str	r3, [fp, #-64]	; 0xffffffc0
   164a0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   164a4:	str	r3, [fp, #-60]	; 0xffffffc4
   164a8:	ldr	r3, [r8, #12]
   164ac:	ands	r3, r3, #8
   164b0:	str	r3, [fp, #-116]	; 0xffffff8c
   164b4:	movne	r3, #0
   164b8:	strne	r3, [fp, #-116]	; 0xffffff8c
   164bc:	bne	160b0 <argp_failure@@Base+0x9e8>
   164c0:	ldr	r2, [r2, #4]
   164c4:	cmp	r2, #0
   164c8:	beq	160b0 <argp_failure@@Base+0x9e8>
   164cc:	add	r3, r8, #24
   164d0:	b	16090 <argp_failure@@Base+0x9c8>
   164d4:	mov	r0, sl
   164d8:	bl	18b94 <argp_parse@@Base+0x1924>
   164dc:	b	16398 <argp_failure@@Base+0xcd0>
   164e0:	sub	r2, fp, #76	; 0x4c
   164e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   164e8:	ldr	r1, [r3, #20]
   164ec:	ldr	r0, [r8, #16]
   164f0:	bl	1441c <__assert_fail@plt+0x2eb4>
   164f4:	b	16650 <argp_failure@@Base+0xf88>
   164f8:	ldr	r7, [r8, #16]
   164fc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16500:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16504:	ldr	r2, [r2, #20]
   16508:	ldr	r1, [r8, #4]
   1650c:	mov	r0, r7
   16510:	bl	141e8 <__assert_fail@plt+0x2c80>
   16514:	subs	r4, r0, #0
   16518:	beq	1660c <argp_failure@@Base+0xf44>
   1651c:	ldrb	r3, [r4]
   16520:	cmp	r3, #0
   16524:	beq	16604 <argp_failure@@Base+0xf3c>
   16528:	ldr	r3, [sl, #28]
   1652c:	ldr	r2, [sl, #24]
   16530:	sub	r3, r3, r2
   16534:	ldr	r2, [sl, #16]
   16538:	cmp	r3, r2
   1653c:	bhi	1665c <argp_failure@@Base+0xf94>
   16540:	ldr	r5, [sl, #20]
   16544:	bic	r5, r5, r5, asr #31
   16548:	ldr	r3, [pc, #624]	; 167c0 <argp_failure@@Base+0x10f8>
   1654c:	ldr	r6, [r3, #20]
   16550:	str	r6, [sl, #4]
   16554:	ldr	r3, [pc, #612]	; 167c0 <argp_failure@@Base+0x10f8>
   16558:	ldr	r6, [r3, #20]
   1655c:	ldr	r3, [sl, #28]
   16560:	ldr	r2, [sl, #24]
   16564:	sub	r3, r3, r2
   16568:	ldr	r2, [sl, #16]
   1656c:	cmp	r3, r2
   16570:	bhi	16698 <argp_failure@@Base+0xfd0>
   16574:	str	r6, [sl, #12]
   16578:	ldr	r3, [pc, #576]	; 167c0 <argp_failure@@Base+0x10f8>
   1657c:	ldr	r1, [r3, #20]
   16580:	add	r3, r1, #3
   16584:	cmp	r3, r5
   16588:	bcs	166bc <argp_failure@@Base+0xff4>
   1658c:	ldr	r2, [sl, #28]
   16590:	ldr	r3, [sl, #32]
   16594:	cmp	r2, r3
   16598:	bcs	166a4 <argp_failure@@Base+0xfdc>
   1659c:	ldr	r3, [sl, #28]
   165a0:	add	r2, r3, #1
   165a4:	str	r2, [sl, #28]
   165a8:	mov	r2, #10
   165ac:	strb	r2, [r3]
   165b0:	mov	r0, r4
   165b4:	bl	113e8 <strlen@plt>
   165b8:	subs	r5, r0, #0
   165bc:	beq	16604 <argp_failure@@Base+0xf3c>
   165c0:	ldr	r3, [sl, #28]
   165c4:	add	r3, r3, r5
   165c8:	ldr	r2, [sl, #32]
   165cc:	cmp	r2, r3
   165d0:	bcs	165e8 <argp_failure@@Base+0xf20>
   165d4:	mov	r1, r5
   165d8:	mov	r0, sl
   165dc:	bl	19138 <argp_parse@@Base+0x1ec8>
   165e0:	cmp	r0, #0
   165e4:	beq	16604 <argp_failure@@Base+0xf3c>
   165e8:	mov	r2, r5
   165ec:	mov	r1, r4
   165f0:	ldr	r0, [sl, #28]
   165f4:	bl	11298 <memcpy@plt>
   165f8:	ldr	r3, [sl, #28]
   165fc:	add	r5, r3, r5
   16600:	str	r5, [sl, #28]
   16604:	cmp	r7, r4
   16608:	bne	16720 <argp_failure@@Base+0x1058>
   1660c:	ldr	r3, [sl, #28]
   16610:	ldr	r2, [sl, #24]
   16614:	sub	r3, r3, r2
   16618:	ldr	r2, [sl, #16]
   1661c:	cmp	r3, r2
   16620:	bhi	1672c <argp_failure@@Base+0x1064>
   16624:	mov	r3, #0
   16628:	str	r3, [sl, #4]
   1662c:	ldr	r2, [sl, #28]
   16630:	ldr	r3, [sl, #32]
   16634:	cmp	r2, r3
   16638:	bcs	16738 <argp_failure@@Base+0x1070>
   1663c:	ldr	r3, [sl, #28]
   16640:	add	r2, r3, #1
   16644:	str	r2, [sl, #28]
   16648:	mov	r2, #10
   1664c:	strb	r2, [r3]
   16650:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16654:	str	r3, [fp, #-88]	; 0xffffffa8
   16658:	b	163ec <argp_failure@@Base+0xd24>
   1665c:	mov	r0, sl
   16660:	bl	18b94 <argp_parse@@Base+0x1924>
   16664:	ldr	r5, [sl, #20]
   16668:	bic	r5, r5, r5, asr #31
   1666c:	ldr	r3, [pc, #332]	; 167c0 <argp_failure@@Base+0x10f8>
   16670:	ldr	r6, [r3, #20]
   16674:	ldr	r3, [sl, #28]
   16678:	ldr	r2, [sl, #24]
   1667c:	sub	r3, r3, r2
   16680:	ldr	r2, [sl, #16]
   16684:	cmp	r3, r2
   16688:	bls	16550 <argp_failure@@Base+0xe88>
   1668c:	mov	r0, sl
   16690:	bl	18b94 <argp_parse@@Base+0x1924>
   16694:	b	16550 <argp_failure@@Base+0xe88>
   16698:	mov	r0, sl
   1669c:	bl	18b94 <argp_parse@@Base+0x1924>
   166a0:	b	16574 <argp_failure@@Base+0xeac>
   166a4:	mov	r1, #1
   166a8:	mov	r0, sl
   166ac:	bl	19138 <argp_parse@@Base+0x1ec8>
   166b0:	cmp	r0, #0
   166b4:	beq	165b0 <argp_failure@@Base+0xee8>
   166b8:	b	1659c <argp_failure@@Base+0xed4>
   166bc:	cmp	r1, r5
   166c0:	bhi	16714 <argp_failure@@Base+0x104c>
   166c4:	ldr	r3, [sl, #28]
   166c8:	add	r3, r3, #3
   166cc:	ldr	r2, [sl, #32]
   166d0:	cmp	r2, r3
   166d4:	bcs	166ec <argp_failure@@Base+0x1024>
   166d8:	mov	r1, #3
   166dc:	mov	r0, sl
   166e0:	bl	19138 <argp_parse@@Base+0x1ec8>
   166e4:	cmp	r0, #0
   166e8:	beq	165b0 <argp_failure@@Base+0xee8>
   166ec:	ldr	r3, [sl, #28]
   166f0:	ldr	r2, [pc, #196]	; 167bc <argp_failure@@Base+0x10f4>
   166f4:	ldrh	r1, [r2]
   166f8:	ldrb	r2, [r2, #2]
   166fc:	strh	r1, [r3]
   16700:	strb	r2, [r3, #2]
   16704:	ldr	r3, [sl, #28]
   16708:	add	r3, r3, #3
   1670c:	str	r3, [sl, #28]
   16710:	b	165b0 <argp_failure@@Base+0xee8>
   16714:	mov	r0, sl
   16718:	bl	14004 <__assert_fail@plt+0x2a9c>
   1671c:	b	165b0 <argp_failure@@Base+0xee8>
   16720:	mov	r0, r4
   16724:	bl	17e64 <argp_parse@@Base+0xbf4>
   16728:	b	1660c <argp_failure@@Base+0xf44>
   1672c:	mov	r0, sl
   16730:	bl	18b94 <argp_parse@@Base+0x1924>
   16734:	b	16624 <argp_failure@@Base+0xf5c>
   16738:	mov	r1, #1
   1673c:	mov	r0, sl
   16740:	bl	19138 <argp_parse@@Base+0x1ec8>
   16744:	cmp	r0, #0
   16748:	beq	16650 <argp_failure@@Base+0xf88>
   1674c:	b	1663c <argp_failure@@Base+0xf74>
   16750:	mov	r0, sl
   16754:	bl	18b94 <argp_parse@@Base+0x1924>
   16758:	b	16404 <argp_failure@@Base+0xd3c>
   1675c:	mov	r0, sl
   16760:	bl	18b94 <argp_parse@@Base+0x1924>
   16764:	b	16424 <argp_failure@@Base+0xd5c>
   16768:	andeq	sl, r1, r0, lsl ip
   1676c:	andeq	sl, r1, r8, lsr sl
   16770:	andeq	sl, r1, r0, lsr #24
   16774:	andeq	sl, r1, r0, asr ip
   16778:	andeq	sl, r1, r8, ror ip
   1677c:	andeq	sl, r1, r0, asr sl
   16780:	andeq	sl, r1, ip, asr #25
   16784:	muleq	r1, r8, ip
   16788:	ldrdeq	sl, [r1], -r4
   1678c:	ldrdeq	sl, [r1], -ip
   16790:	andeq	r4, r1, ip, lsl sp
   16794:	andeq	sl, r1, ip, ror #25
   16798:	andeq	sl, r1, r4, ror #25
   1679c:	strdeq	sl, [r1], -r4
   167a0:	strdeq	sl, [r1], -ip
   167a4:	andeq	sl, r1, ip, lsl #26
   167a8:	andeq	sl, r1, r4, asr #26
   167ac:	andeq	sl, r1, ip, lsr pc
   167b0:	andeq	sl, r1, ip, asr #26
   167b4:	andeq	sl, r1, r4, asr sp
   167b8:	andeq	sl, r1, ip, asr sp
   167bc:	andeq	sl, r1, r0, ror #26
   167c0:	andeq	ip, r2, ip, lsl #8
   167c4:	andeq	r0, r0, #5
   167c8:	andeq	sl, r1, r4, ror #26
   167cc:			; <UNDEFINED> instruction: 0x0002cfbc
   167d0:	ldrdeq	sl, [r1], -r8
   167d4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   167d8:	cmp	r3, #0
   167dc:	beq	168cc <argp_failure@@Base+0x1204>
   167e0:	ldr	r3, [pc, #-40]	; 167c0 <argp_failure@@Base+0x10f8>
   167e4:	ldr	r3, [r3, #4]
   167e8:	cmp	r3, #0
   167ec:	beq	168cc <argp_failure@@Base+0x1204>
   167f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   167f4:	cmp	r3, #0
   167f8:	ldrne	r2, [r3]
   167fc:	moveq	r2, #0
   16800:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16804:	ldr	r1, [pc, #-72]	; 167c4 <argp_failure@@Base+0x10fc>
   16808:	ldr	r0, [pc, #-72]	; 167c8 <argp_failure@@Base+0x1100>
   1680c:	bl	141e8 <__assert_fail@plt+0x2c80>
   16810:	subs	r4, r0, #0
   16814:	beq	168cc <argp_failure@@Base+0x1204>
   16818:	ldrb	r3, [r4]
   1681c:	cmp	r3, #0
   16820:	beq	168c0 <argp_failure@@Base+0x11f8>
   16824:	ldr	r2, [sl, #28]
   16828:	ldr	r3, [sl, #32]
   1682c:	cmp	r2, r3
   16830:	bcs	16964 <argp_failure@@Base+0x129c>
   16834:	ldr	r3, [sl, #28]
   16838:	add	r2, r3, #1
   1683c:	str	r2, [sl, #28]
   16840:	mov	r2, #10
   16844:	strb	r2, [r3]
   16848:	mov	r0, r4
   1684c:	bl	113e8 <strlen@plt>
   16850:	subs	r5, r0, #0
   16854:	beq	1689c <argp_failure@@Base+0x11d4>
   16858:	ldr	r3, [sl, #28]
   1685c:	add	r3, r3, r5
   16860:	ldr	r2, [sl, #32]
   16864:	cmp	r2, r3
   16868:	bcs	16880 <argp_failure@@Base+0x11b8>
   1686c:	mov	r1, r5
   16870:	mov	r0, sl
   16874:	bl	19138 <argp_parse@@Base+0x1ec8>
   16878:	cmp	r0, #0
   1687c:	beq	1689c <argp_failure@@Base+0x11d4>
   16880:	mov	r2, r5
   16884:	mov	r1, r4
   16888:	ldr	r0, [sl, #28]
   1688c:	bl	11298 <memcpy@plt>
   16890:	ldr	r3, [sl, #28]
   16894:	add	r5, r3, r5
   16898:	str	r5, [sl, #28]
   1689c:	ldr	r2, [sl, #28]
   168a0:	ldr	r3, [sl, #32]
   168a4:	cmp	r2, r3
   168a8:	bcs	1697c <argp_failure@@Base+0x12b4>
   168ac:	ldr	r3, [sl, #28]
   168b0:	add	r2, r3, #1
   168b4:	str	r2, [sl, #28]
   168b8:	mov	r2, #10
   168bc:	strb	r2, [r3]
   168c0:	ldr	r3, [pc, #-256]	; 167c8 <argp_failure@@Base+0x1100>
   168c4:	cmp	r4, r3
   168c8:	bne	16994 <argp_failure@@Base+0x12cc>
   168cc:	mov	r4, #1
   168d0:	ldr	r3, [fp, #-104]	; 0xffffff98
   168d4:	tst	r3, #32
   168d8:	bne	169a0 <argp_failure@@Base+0x12d8>
   168dc:	ldr	r3, [fp, #-104]	; 0xffffff98
   168e0:	tst	r3, #64	; 0x40
   168e4:	beq	16938 <argp_failure@@Base+0x1270>
   168e8:	ldr	r3, [pc, #-292]	; 167cc <argp_failure@@Base+0x1104>
   168ec:	ldr	r3, [r3]
   168f0:	cmp	r3, #0
   168f4:	beq	16938 <argp_failure@@Base+0x1270>
   168f8:	cmp	r4, #0
   168fc:	beq	16924 <argp_failure@@Base+0x125c>
   16900:	ldr	r2, [sl, #28]
   16904:	ldr	r3, [sl, #32]
   16908:	cmp	r2, r3
   1690c:	bcs	169c8 <argp_failure@@Base+0x1300>
   16910:	ldr	r3, [sl, #28]
   16914:	add	r2, r3, #1
   16918:	str	r2, [sl, #28]
   1691c:	mov	r2, #10
   16920:	strb	r2, [r3]
   16924:	ldr	r3, [pc, #-352]	; 167cc <argp_failure@@Base+0x1104>
   16928:	ldr	r2, [r3]
   1692c:	ldr	r1, [pc, #-356]	; 167d0 <argp_failure@@Base+0x1108>
   16930:	mov	r0, sl
   16934:	bl	19228 <argp_parse@@Base+0x1fb8>
   16938:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1693c:	bl	112f8 <funlockfile@plt>
   16940:	ldr	r3, [fp, #-108]	; 0xffffff94
   16944:	cmp	r3, #0
   16948:	beq	16954 <argp_failure@@Base+0x128c>
   1694c:	mov	r0, r3
   16950:	bl	13ec0 <__assert_fail@plt+0x2958>
   16954:	mov	r0, sl
   16958:	bl	190f8 <argp_parse@@Base+0x1e88>
   1695c:	sub	sp, fp, #32
   16960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16964:	mov	r1, #1
   16968:	mov	r0, sl
   1696c:	bl	19138 <argp_parse@@Base+0x1ec8>
   16970:	cmp	r0, #0
   16974:	beq	16848 <argp_failure@@Base+0x1180>
   16978:	b	16834 <argp_failure@@Base+0x116c>
   1697c:	mov	r1, #1
   16980:	mov	r0, sl
   16984:	bl	19138 <argp_parse@@Base+0x1ec8>
   16988:	cmp	r0, #0
   1698c:	beq	168c0 <argp_failure@@Base+0x11f8>
   16990:	b	168ac <argp_failure@@Base+0x11e4>
   16994:	mov	r0, r4
   16998:	bl	17e64 <argp_parse@@Base+0xbf4>
   1699c:	b	168cc <argp_failure@@Base+0x1204>
   169a0:	str	sl, [sp, #4]
   169a4:	mov	r3, #0
   169a8:	str	r3, [sp]
   169ac:	mov	r3, r4
   169b0:	mov	r2, #1
   169b4:	ldr	r1, [fp, #-100]	; 0xffffff9c
   169b8:	ldr	r0, [fp, #-112]	; 0xffffff90
   169bc:	bl	14784 <__assert_fail@plt+0x321c>
   169c0:	orr	r4, r4, r0
   169c4:	b	168dc <argp_failure@@Base+0x1214>
   169c8:	mov	r1, #1
   169cc:	mov	r0, sl
   169d0:	bl	19138 <argp_parse@@Base+0x1ec8>
   169d4:	cmp	r0, #0
   169d8:	beq	16924 <argp_failure@@Base+0x125c>
   169dc:	b	16910 <argp_failure@@Base+0x1248>
   169e0:	ldrb	r3, [r5]
   169e4:	mov	r4, r5
   169e8:	mov	r5, #0
   169ec:	b	15ac0 <argp_failure@@Base+0x3f8>
   169f0:	mov	r4, r2
   169f4:	b	15ad4 <argp_failure@@Base+0x40c>
   169f8:	cmp	r0, #110	; 0x6e
   169fc:	beq	15b2c <argp_failure@@Base+0x464>
   16a00:	mov	r3, #1
   16a04:	str	r3, [fp, #-96]	; 0xffffffa0
   16a08:	str	r3, [fp, #-116]	; 0xffffff8c
   16a0c:	add	r6, sl, #24
   16a10:	b	15c24 <argp_failure@@Base+0x55c>
   16a14:	ldrb	r3, [r9]
   16a18:	cmp	r7, r3
   16a1c:	beq	160f8 <argp_failure@@Base+0xa30>
   16a20:	add	r4, r4, #24
   16a24:	subs	r5, r5, #1
   16a28:	beq	161e8 <argp_failure@@Base+0xb20>
   16a2c:	ldr	r6, [r4, #12]
   16a30:	tst	r6, #8
   16a34:	bne	16a20 <argp_failure@@Base+0x1358>
   16a38:	ldr	r7, [r4, #4]
   16a3c:	sub	r3, r7, #1
   16a40:	cmp	r3, #254	; 0xfe
   16a44:	bhi	16a20 <argp_failure@@Base+0x1358>
   16a48:	bl	113c4 <__ctype_b_loc@plt>
   16a4c:	ldr	r2, [r0]
   16a50:	lsl	r3, r7, #1
   16a54:	ldrh	r3, [r2, r3]
   16a58:	tst	r3, #16384	; 0x4000
   16a5c:	bne	16a14 <argp_failure@@Base+0x134c>
   16a60:	b	16a20 <argp_failure@@Base+0x1358>

00016a64 <argp_help@@Base>:
   16a64:	push	{lr}		; (str lr, [sp, #-4]!)
   16a68:	sub	sp, sp, #12
   16a6c:	str	r3, [sp]
   16a70:	mov	r3, r2
   16a74:	mov	r2, r1
   16a78:	mov	r1, #0
   16a7c:	bl	158d0 <argp_failure@@Base+0x208>
   16a80:	add	sp, sp, #12
   16a84:	pop	{pc}		; (ldr pc, [sp], #4)

00016a88 <argp_state_help@@Base>:
   16a88:	push	{r4, r5, lr}
   16a8c:	sub	sp, sp, #12
   16a90:	mov	r5, r2
   16a94:	subs	r4, r0, #0
   16a98:	beq	16afc <argp_state_help@@Base+0x74>
   16a9c:	ldr	r3, [r4, #16]
   16aa0:	tst	r3, #2
   16aa4:	bne	16af4 <argp_state_help@@Base+0x6c>
   16aa8:	cmp	r1, #0
   16aac:	beq	16af4 <argp_state_help@@Base+0x6c>
   16ab0:	ldr	r3, [r4, #16]
   16ab4:	tst	r3, #64	; 0x40
   16ab8:	orrne	r5, r5, #128	; 0x80
   16abc:	ldr	r0, [r4]
   16ac0:	ldr	r3, [r4, #40]	; 0x28
   16ac4:	str	r3, [sp]
   16ac8:	mov	r3, r5
   16acc:	mov	r2, r1
   16ad0:	mov	r1, r4
   16ad4:	bl	158d0 <argp_failure@@Base+0x208>
   16ad8:	ldr	r3, [r4, #16]
   16adc:	tst	r3, #32
   16ae0:	bne	16af4 <argp_state_help@@Base+0x6c>
   16ae4:	tst	r5, #256	; 0x100
   16ae8:	bne	16b28 <argp_state_help@@Base+0xa0>
   16aec:	tst	r5, #512	; 0x200
   16af0:	bne	16b34 <argp_state_help@@Base+0xac>
   16af4:	add	sp, sp, #12
   16af8:	pop	{r4, r5, pc}
   16afc:	cmp	r1, #0
   16b00:	beq	16af4 <argp_state_help@@Base+0x6c>
   16b04:	ldr	r3, [pc, #48]	; 16b3c <argp_state_help@@Base+0xb4>
   16b08:	ldr	r3, [r3]
   16b0c:	str	r3, [sp]
   16b10:	mov	r3, r2
   16b14:	mov	r2, r1
   16b18:	mov	r1, #0
   16b1c:	mov	r0, r1
   16b20:	bl	158d0 <argp_failure@@Base+0x208>
   16b24:	b	16ae4 <argp_state_help@@Base+0x5c>
   16b28:	ldr	r3, [pc, #16]	; 16b40 <argp_state_help@@Base+0xb8>
   16b2c:	ldr	r0, [r3]
   16b30:	bl	113d0 <exit@plt>
   16b34:	mov	r0, #0
   16b38:	bl	113d0 <exit@plt>
   16b3c:	andeq	ip, r2, r8, asr #8
   16b40:	andeq	ip, r2, r4, lsr r4

00016b44 <argp_error@@Base>:
   16b44:	push	{r1, r2, r3}
   16b48:	push	{r4, r5, lr}
   16b4c:	sub	sp, sp, #8
   16b50:	subs	r5, r0, #0
   16b54:	beq	16c24 <argp_error@@Base+0xe0>
   16b58:	ldr	r3, [r5, #16]
   16b5c:	tst	r3, #2
   16b60:	bne	16c14 <argp_error@@Base+0xd0>
   16b64:	ldr	r4, [r5, #44]	; 0x2c
   16b68:	cmp	r4, #0
   16b6c:	beq	16c14 <argp_error@@Base+0xd0>
   16b70:	mov	r0, r4
   16b74:	bl	114e4 <flockfile@plt>
   16b78:	add	r3, sp, #24
   16b7c:	str	r3, [sp, #4]
   16b80:	ldr	r0, [r5, #40]	; 0x28
   16b84:	mov	r1, r4
   16b88:	bl	111f0 <fputs_unlocked@plt>
   16b8c:	ldr	r3, [r4, #20]
   16b90:	ldr	r2, [r4, #24]
   16b94:	cmp	r3, r2
   16b98:	addcc	r2, r3, #1
   16b9c:	strcc	r2, [r4, #20]
   16ba0:	movcc	r2, #58	; 0x3a
   16ba4:	strbcc	r2, [r3]
   16ba8:	bcs	16c50 <argp_error@@Base+0x10c>
   16bac:	ldr	r3, [r4, #20]
   16bb0:	ldr	r2, [r4, #24]
   16bb4:	cmp	r3, r2
   16bb8:	addcc	r2, r3, #1
   16bbc:	strcc	r2, [r4, #20]
   16bc0:	movcc	r2, #32
   16bc4:	strbcc	r2, [r3]
   16bc8:	bcs	16c60 <argp_error@@Base+0x11c>
   16bcc:	ldr	r2, [sp, #4]
   16bd0:	ldr	r1, [sp, #20]
   16bd4:	mov	r0, r4
   16bd8:	bl	114c0 <vfprintf@plt>
   16bdc:	ldr	r3, [r4, #20]
   16be0:	ldr	r2, [r4, #24]
   16be4:	cmp	r3, r2
   16be8:	addcc	r2, r3, #1
   16bec:	strcc	r2, [r4, #20]
   16bf0:	movcc	r2, #10
   16bf4:	strbcc	r2, [r3]
   16bf8:	bcs	16c70 <argp_error@@Base+0x12c>
   16bfc:	mov	r2, #260	; 0x104
   16c00:	mov	r1, r4
   16c04:	mov	r0, r5
   16c08:	bl	16a88 <argp_state_help@@Base>
   16c0c:	mov	r0, r4
   16c10:	bl	112f8 <funlockfile@plt>
   16c14:	add	sp, sp, #8
   16c18:	pop	{r4, r5, lr}
   16c1c:	add	sp, sp, #12
   16c20:	bx	lr
   16c24:	ldr	r3, [pc, #84]	; 16c80 <argp_error@@Base+0x13c>
   16c28:	ldr	r4, [r3]
   16c2c:	cmp	r4, #0
   16c30:	beq	16c14 <argp_error@@Base+0xd0>
   16c34:	mov	r0, r4
   16c38:	bl	114e4 <flockfile@plt>
   16c3c:	add	r3, sp, #24
   16c40:	str	r3, [sp, #4]
   16c44:	ldr	r3, [pc, #56]	; 16c84 <argp_error@@Base+0x140>
   16c48:	ldr	r0, [r3]
   16c4c:	b	16b84 <argp_error@@Base+0x40>
   16c50:	mov	r1, #58	; 0x3a
   16c54:	mov	r0, r4
   16c58:	bl	1149c <__overflow@plt>
   16c5c:	b	16bac <argp_error@@Base+0x68>
   16c60:	mov	r1, #32
   16c64:	mov	r0, r4
   16c68:	bl	1149c <__overflow@plt>
   16c6c:	b	16bcc <argp_error@@Base+0x88>
   16c70:	mov	r1, #10
   16c74:	mov	r0, r4
   16c78:	bl	1149c <__overflow@plt>
   16c7c:	b	16bfc <argp_error@@Base+0xb8>
   16c80:	andeq	ip, r2, r0, asr r4
   16c84:	andeq	ip, r2, r8, asr #8
   16c88:	ldr	ip, [r0]
   16c8c:	cmp	ip, #0
   16c90:	beq	16ce4 <argp_error@@Base+0x1a0>
   16c94:	push	{r4, r5, r6, lr}
   16c98:	mov	ip, r2
   16c9c:	mov	r5, r1
   16ca0:	mov	r4, r0
   16ca4:	ldr	r2, [r0, #32]
   16ca8:	str	r2, [r1, #36]	; 0x24
   16cac:	ldr	r2, [r0, #24]
   16cb0:	str	r2, [r1, #28]
   16cb4:	ldr	r2, [r0, #28]
   16cb8:	str	r2, [r1, #32]
   16cbc:	ldr	r2, [r0, #12]
   16cc0:	str	r2, [r1, #20]
   16cc4:	ldr	r6, [r0]
   16cc8:	mov	r2, r1
   16ccc:	mov	r1, r3
   16cd0:	mov	r0, ip
   16cd4:	blx	r6
   16cd8:	ldr	r3, [r5, #36]	; 0x24
   16cdc:	str	r3, [r4, #32]
   16ce0:	pop	{r4, r5, r6, pc}
   16ce4:	mov	r0, #7
   16ce8:	bx	lr
   16cec:	push	{r4, r5, r6, lr}
   16cf0:	ldr	r5, [r0, #16]
   16cf4:	ldr	r3, [r0]
   16cf8:	cmp	r3, #0
   16cfc:	beq	16d14 <argp_error@@Base+0x1d0>
   16d00:	ldr	r2, [r1, #8]
   16d04:	add	r2, r2, #1
   16d08:	str	r2, [r1, #8]
   16d0c:	mov	r2, #0
   16d10:	b	16d68 <argp_error@@Base+0x224>
   16d14:	ldr	r3, [r0, #4]
   16d18:	cmp	r3, #0
   16d1c:	ldrne	r3, [r1, #8]
   16d20:	addne	r3, r3, #1
   16d24:	strne	r3, [r1, #8]
   16d28:	cmp	r5, #0
   16d2c:	popeq	{r4, r5, r6, pc}
   16d30:	ldr	r0, [r5]
   16d34:	cmp	r0, #0
   16d38:	popeq	{r4, r5, r6, pc}
   16d3c:	mov	r4, r1
   16d40:	mov	r1, r4
   16d44:	bl	16cec <argp_error@@Base+0x1a8>
   16d48:	ldr	r3, [r4, #12]
   16d4c:	add	r3, r3, #1
   16d50:	str	r3, [r4, #12]
   16d54:	ldr	r0, [r5, #16]!
   16d58:	cmp	r0, #0
   16d5c:	bne	16d40 <argp_error@@Base+0x1fc>
   16d60:	pop	{r4, r5, r6, pc}
   16d64:	add	r2, r2, #1
   16d68:	add	r3, r3, #24
   16d6c:	ldr	r0, [r3, #-20]	; 0xffffffec
   16d70:	cmp	r0, #0
   16d74:	bne	16d64 <argp_error@@Base+0x220>
   16d78:	ldr	r0, [r3, #-24]	; 0xffffffe8
   16d7c:	cmp	r0, #0
   16d80:	bne	16d64 <argp_error@@Base+0x220>
   16d84:	ldr	r0, [r3, #-8]
   16d88:	cmp	r0, #0
   16d8c:	bne	16d64 <argp_error@@Base+0x220>
   16d90:	ldr	r0, [r3, #-4]
   16d94:	cmp	r0, #0
   16d98:	bne	16d64 <argp_error@@Base+0x220>
   16d9c:	add	r0, r2, r2, lsl #1
   16da0:	ldr	r3, [r1]
   16da4:	add	r3, r3, r0
   16da8:	str	r3, [r1]
   16dac:	ldr	r3, [r1, #4]
   16db0:	add	r2, r3, r2
   16db4:	str	r2, [r1, #4]
   16db8:	b	16d28 <argp_error@@Base+0x1e4>
   16dbc:	cmp	r0, #86	; 0x56
   16dc0:	beq	16dcc <argp_error@@Base+0x288>
   16dc4:	mov	r0, #7
   16dc8:	bx	lr
   16dcc:	push	{r4, lr}
   16dd0:	mov	r4, r2
   16dd4:	ldr	r3, [pc, #100]	; 16e40 <argp_error@@Base+0x2fc>
   16dd8:	ldr	r3, [r3]
   16ddc:	cmp	r3, #0
   16de0:	beq	16e04 <argp_error@@Base+0x2c0>
   16de4:	mov	r1, r2
   16de8:	ldr	r0, [r2, #48]	; 0x30
   16dec:	blx	r3
   16df0:	ldr	r3, [r4, #16]
   16df4:	tst	r3, #32
   16df8:	beq	16e38 <argp_error@@Base+0x2f4>
   16dfc:	mov	r0, #0
   16e00:	pop	{r4, pc}
   16e04:	ldr	r3, [pc, #56]	; 16e44 <argp_error@@Base+0x300>
   16e08:	ldr	r2, [r3]
   16e0c:	cmp	r2, #0
   16e10:	beq	16e24 <argp_error@@Base+0x2e0>
   16e14:	ldr	r1, [pc, #44]	; 16e48 <argp_error@@Base+0x304>
   16e18:	ldr	r0, [r4, #48]	; 0x30
   16e1c:	bl	11400 <fprintf@plt>
   16e20:	b	16df0 <argp_error@@Base+0x2ac>
   16e24:	ldr	r2, [pc, #32]	; 16e4c <argp_error@@Base+0x308>
   16e28:	ldr	r1, [pc, #32]	; 16e50 <argp_error@@Base+0x30c>
   16e2c:	mov	r0, r4
   16e30:	bl	16b44 <argp_error@@Base>
   16e34:	b	16df0 <argp_error@@Base+0x2ac>
   16e38:	mov	r0, #0
   16e3c:	bl	113d0 <exit@plt>
   16e40:	andeq	ip, r2, ip, lsl #10
   16e44:	andeq	ip, r2, r0, asr #31
   16e48:	muleq	r1, r0, r0
   16e4c:	andeq	sl, r1, r4, lsl #30
   16e50:	andeq	sl, r1, r0, ror #9
   16e54:	push	{r4, r5, r6, lr}
   16e58:	mov	r4, r2
   16e5c:	cmn	r0, #3
   16e60:	beq	16efc <argp_error@@Base+0x3b8>
   16e64:	mov	r5, r1
   16e68:	ble	16e94 <argp_error@@Base+0x350>
   16e6c:	cmn	r0, #2
   16e70:	beq	16f14 <argp_error@@Base+0x3d0>
   16e74:	cmp	r0, #63	; 0x3f
   16e78:	bne	16f58 <argp_error@@Base+0x414>
   16e7c:	ldr	r2, [pc, #228]	; 16f68 <argp_error@@Base+0x424>
   16e80:	ldr	r1, [r4, #48]	; 0x30
   16e84:	mov	r0, r4
   16e88:	bl	16a88 <argp_state_help@@Base>
   16e8c:	mov	r0, #0
   16e90:	pop	{r4, r5, r6, pc}
   16e94:	cmn	r0, #4
   16e98:	bne	16f58 <argp_error@@Base+0x414>
   16e9c:	mov	r2, #10
   16ea0:	mov	r1, #0
   16ea4:	ldr	r0, [pc, #192]	; 16f6c <argp_error@@Base+0x428>
   16ea8:	cmp	r5, r1
   16eac:	movne	r0, r5
   16eb0:	bl	11214 <strtol@plt>
   16eb4:	ldr	r3, [pc, #180]	; 16f70 <argp_error@@Base+0x42c>
   16eb8:	str	r0, [r3]
   16ebc:	ldr	r2, [r3]
   16ec0:	sub	r1, r2, #1
   16ec4:	str	r1, [r3]
   16ec8:	cmp	r2, #0
   16ecc:	ble	16f60 <argp_error@@Base+0x41c>
   16ed0:	mov	r5, #1
   16ed4:	mov	r4, r3
   16ed8:	mov	r0, r5
   16edc:	bl	112bc <sleep@plt>
   16ee0:	ldr	r3, [r4]
   16ee4:	sub	r2, r3, #1
   16ee8:	str	r2, [r4]
   16eec:	cmp	r3, #0
   16ef0:	bgt	16ed8 <argp_error@@Base+0x394>
   16ef4:	mov	r0, #0
   16ef8:	pop	{r4, r5, r6, pc}
   16efc:	ldr	r2, [pc, #112]	; 16f74 <argp_error@@Base+0x430>
   16f00:	ldr	r1, [r4, #48]	; 0x30
   16f04:	mov	r0, r4
   16f08:	bl	16a88 <argp_state_help@@Base>
   16f0c:	mov	r0, #0
   16f10:	pop	{r4, r5, r6, pc}
   16f14:	ldr	r3, [pc, #92]	; 16f78 <argp_error@@Base+0x434>
   16f18:	str	r1, [r3]
   16f1c:	mov	r0, r1
   16f20:	bl	17da4 <argp_parse@@Base+0xb34>
   16f24:	str	r0, [r4, #40]	; 0x28
   16f28:	ldr	r3, [pc, #76]	; 16f7c <argp_error@@Base+0x438>
   16f2c:	str	r0, [r3]
   16f30:	ldr	r3, [r4, #16]
   16f34:	and	r3, r3, #3
   16f38:	cmp	r3, #1
   16f3c:	beq	16f48 <argp_error@@Base+0x404>
   16f40:	mov	r0, #0
   16f44:	pop	{r4, r5, r6, pc}
   16f48:	ldr	r3, [r4, #8]
   16f4c:	str	r5, [r3]
   16f50:	mov	r0, #0
   16f54:	pop	{r4, r5, r6, pc}
   16f58:	mov	r0, #7
   16f5c:	pop	{r4, r5, r6, pc}
   16f60:	mov	r0, #0
   16f64:	pop	{r4, r5, r6, pc}
   16f68:	andeq	r0, r0, sl, ror r2
   16f6c:	andeq	sl, r1, r8, lsr #30
   16f70:	andeq	ip, r2, r8, lsl #10
   16f74:	andeq	r0, r0, r1, lsl #4
   16f78:	andeq	ip, r2, ip, asr #8
   16f7c:	andeq	ip, r2, r8, asr #8
   16f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f84:	sub	sp, sp, #36	; 0x24
   16f88:	str	r0, [sp, #12]
   16f8c:	str	r1, [sp, #16]
   16f90:	str	r2, [sp, #20]
   16f94:	mov	r8, r3
   16f98:	ldr	sl, [sp, #72]	; 0x48
   16f9c:	ldr	r9, [r0]
   16fa0:	ldr	r5, [r0, #16]
   16fa4:	cmp	r9, #0
   16fa8:	addne	r6, r9, #24
   16fac:	strne	r5, [sp, #28]
   16fb0:	strne	r8, [sp, #24]
   16fb4:	bne	170c0 <argp_error@@Base+0x57c>
   16fb8:	ldr	r3, [sp, #12]
   16fbc:	ldr	r3, [r3, #4]
   16fc0:	cmp	r3, #0
   16fc4:	moveq	r0, r8
   16fc8:	moveq	r8, #0
   16fcc:	beq	1704c <argp_error@@Base+0x508>
   16fd0:	ldr	r2, [sp, #12]
   16fd4:	ldr	r3, [r2, #4]
   16fd8:	str	r3, [r8]
   16fdc:	str	r2, [r8, #4]
   16fe0:	ldr	r3, [sl, #4]
   16fe4:	str	r3, [r8, #8]
   16fe8:	mov	r3, #0
   16fec:	str	r3, [r8, #12]
   16ff0:	ldr	r2, [sp, #16]
   16ff4:	str	r2, [r8, #16]
   16ff8:	ldr	r2, [sp, #20]
   16ffc:	str	r2, [r8, #20]
   17000:	str	r3, [r8, #24]
   17004:	str	r3, [r8, #32]
   17008:	str	r3, [r8, #28]
   1700c:	cmp	r5, r3
   17010:	beq	17048 <argp_error@@Base+0x504>
   17014:	ldr	r3, [r5]
   17018:	cmp	r3, #0
   1701c:	beq	17268 <argp_error@@Base+0x724>
   17020:	mov	r3, #0
   17024:	add	r3, r3, #1
   17028:	ldr	r2, [r5, r3, lsl #4]
   1702c:	cmp	r2, #0
   17030:	bne	17024 <argp_error@@Base+0x4e0>
   17034:	ldr	r2, [sl, #12]
   17038:	str	r2, [r8, #28]
   1703c:	ldr	r2, [sl, #12]
   17040:	add	r3, r2, r3, lsl #2
   17044:	str	r3, [sl, #12]
   17048:	add	r0, r8, #36	; 0x24
   1704c:	cmp	r5, #0
   17050:	beq	1708c <argp_error@@Base+0x548>
   17054:	ldr	ip, [r5]
   17058:	cmp	ip, #0
   1705c:	beq	1708c <argp_error@@Base+0x548>
   17060:	mov	r2, #0
   17064:	add	r4, r2, #1
   17068:	str	sl, [sp]
   1706c:	mov	r3, r0
   17070:	mov	r1, r8
   17074:	mov	r0, ip
   17078:	bl	16f80 <argp_error@@Base+0x43c>
   1707c:	ldr	ip, [r5, r4, lsl #4]
   17080:	mov	r2, r4
   17084:	cmp	ip, #0
   17088:	bne	17064 <argp_error@@Base+0x520>
   1708c:	add	sp, sp, #36	; 0x24
   17090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17094:	ldr	r0, [r4, #16]!
   17098:	cmp	r0, #0
   1709c:	beq	171a8 <argp_error@@Base+0x664>
   170a0:	mov	r1, r7
   170a4:	bl	11208 <strcmp@plt>
   170a8:	cmp	r0, #0
   170ac:	bne	17094 <argp_error@@Base+0x550>
   170b0:	sub	r4, r4, fp
   170b4:	cmn	r4, #15
   170b8:	blt	171a8 <argp_error@@Base+0x664>
   170bc:	add	r6, r6, #24
   170c0:	sub	r2, r6, #24
   170c4:	mov	r8, r6
   170c8:	ldr	r4, [r6, #-20]	; 0xffffffec
   170cc:	cmp	r4, #0
   170d0:	bne	170e0 <argp_error@@Base+0x59c>
   170d4:	ldr	r3, [r6, #-24]	; 0xffffffe8
   170d8:	cmp	r3, #0
   170dc:	beq	17244 <argp_error@@Base+0x700>
   170e0:	ldr	r3, [r8, #-12]
   170e4:	and	r1, r3, #4
   170e8:	cmp	r1, #0
   170ec:	moveq	r9, r2
   170f0:	ldr	r5, [r9, #12]
   170f4:	ands	r5, r5, #8
   170f8:	bne	170bc <argp_error@@Base+0x578>
   170fc:	tst	r3, #8
   17100:	bne	17184 <argp_error@@Base+0x640>
   17104:	sub	r3, r4, #1
   17108:	cmp	r3, #254	; 0xfe
   1710c:	bhi	17184 <argp_error@@Base+0x640>
   17110:	bl	113c4 <__ctype_b_loc@plt>
   17114:	ldr	r3, [r0]
   17118:	lsl	r4, r4, #1
   1711c:	ldrh	r3, [r3, r4]
   17120:	tst	r3, #16384	; 0x4000
   17124:	beq	17184 <argp_error@@Base+0x640>
   17128:	ldr	r3, [sl, #4]
   1712c:	add	r2, r3, #1
   17130:	str	r2, [sl, #4]
   17134:	ldr	r2, [r8, #-20]	; 0xffffffec
   17138:	strb	r2, [r3]
   1713c:	ldr	r3, [r9, #8]
   17140:	cmp	r3, #0
   17144:	beq	17178 <argp_error@@Base+0x634>
   17148:	ldr	r3, [sl, #4]
   1714c:	add	r2, r3, #1
   17150:	str	r2, [sl, #4]
   17154:	mov	r2, #58	; 0x3a
   17158:	strb	r2, [r3]
   1715c:	ldr	r3, [r9, #12]
   17160:	tst	r3, #1
   17164:	ldrne	r3, [sl, #4]
   17168:	addne	r2, r3, #1
   1716c:	strne	r2, [sl, #4]
   17170:	movne	r2, #58	; 0x3a
   17174:	strbne	r2, [r3]
   17178:	ldr	r3, [sl, #4]
   1717c:	mov	r2, #0
   17180:	strb	r2, [r3]
   17184:	ldr	r7, [r8, #-24]	; 0xffffffe8
   17188:	cmp	r7, #0
   1718c:	beq	170bc <argp_error@@Base+0x578>
   17190:	ldr	r3, [sl]
   17194:	ldr	fp, [r3, #8]
   17198:	ldr	r0, [fp]
   1719c:	cmp	r0, #0
   171a0:	movne	r4, fp
   171a4:	bne	170a0 <argp_error@@Base+0x55c>
   171a8:	ldr	r3, [sl, #8]
   171ac:	str	r7, [r3]
   171b0:	ldr	r3, [sl, #8]
   171b4:	ldr	r2, [r9, #8]
   171b8:	cmp	r2, #0
   171bc:	beq	171d4 <argp_error@@Base+0x690>
   171c0:	ldr	r5, [r9, #12]
   171c4:	and	r5, r5, #1
   171c8:	cmp	r5, #0
   171cc:	movne	r5, #2
   171d0:	moveq	r5, #1
   171d4:	str	r5, [r3, #4]
   171d8:	ldr	r3, [sl, #8]
   171dc:	mov	r2, #0
   171e0:	str	r2, [r3, #8]
   171e4:	ldr	r1, [sl, #8]
   171e8:	ldr	r0, [r8, #-20]	; 0xffffffec
   171ec:	cmp	r0, r2
   171f0:	ldreq	r0, [r9, #4]
   171f4:	bic	r0, r0, #-16777216	; 0xff000000
   171f8:	ldr	r3, [sl]
   171fc:	ldr	r3, [r3, #48]	; 0x30
   17200:	ldr	r2, [sp, #24]
   17204:	sub	r3, r2, r3
   17208:	asr	r3, r3, #2
   1720c:	rsb	r2, r3, r3, lsl #3
   17210:	add	r2, r2, r2, lsl #6
   17214:	add	r2, r3, r2, lsl #3
   17218:	rsb	r2, r2, r2, lsl #15
   1721c:	add	r3, r3, r2, lsl #3
   17220:	add	r3, r3, #1
   17224:	add	r3, r0, r3, lsl #24
   17228:	str	r3, [r1, #12]
   1722c:	ldr	r3, [sl, #8]
   17230:	add	r2, r3, #16
   17234:	str	r2, [sl, #8]
   17238:	mov	r2, #0
   1723c:	str	r2, [r3, #16]
   17240:	b	170bc <argp_error@@Base+0x578>
   17244:	ldr	r3, [r6, #-8]
   17248:	cmp	r3, #0
   1724c:	bne	170e0 <argp_error@@Base+0x59c>
   17250:	ldr	r3, [r6, #-4]
   17254:	cmp	r3, #0
   17258:	bne	170e0 <argp_error@@Base+0x59c>
   1725c:	ldr	r5, [sp, #28]
   17260:	ldr	r8, [sp, #24]
   17264:	b	16fd0 <argp_error@@Base+0x48c>
   17268:	mov	r3, #0
   1726c:	b	17034 <argp_error@@Base+0x4f0>

00017270 <argp_parse@@Base>:
   17270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17274:	add	fp, sp, #32
   17278:	sub	sp, sp, #220	; 0xdc
   1727c:	mov	r8, r0
   17280:	str	r1, [fp, #-236]	; 0xffffff14
   17284:	str	r2, [fp, #-232]	; 0xffffff18
   17288:	mov	r6, r3
   1728c:	tst	r3, #1
   17290:	bne	172c0 <argp_parse@@Base+0x50>
   17294:	ldr	r3, [pc, #2548]	; 17c90 <argp_parse@@Base+0xa20>
   17298:	ldr	r3, [r3]
   1729c:	cmp	r3, #0
   172a0:	moveq	r3, r2
   172a4:	ldreq	r2, [r3]
   172a8:	ldreq	r3, [pc, #2528]	; 17c90 <argp_parse@@Base+0xa20>
   172ac:	streq	r2, [r3]
   172b0:	ldr	r3, [pc, #2524]	; 17c94 <argp_parse@@Base+0xa24>
   172b4:	ldr	r3, [r3]
   172b8:	cmp	r3, #0
   172bc:	beq	174b0 <argp_parse@@Base+0x240>
   172c0:	tst	r6, #16
   172c4:	beq	174c8 <argp_parse@@Base+0x258>
   172c8:	mov	r2, #36	; 0x24
   172cc:	mov	r1, #0
   172d0:	sub	r0, fp, #196	; 0xc4
   172d4:	bl	1143c <memset@plt>
   172d8:	ands	r3, r6, #4
   172dc:	str	r3, [fp, #-240]	; 0xffffff10
   172e0:	moveq	r3, #1
   172e4:	movne	r3, #0
   172e8:	str	r3, [fp, #-228]	; 0xffffff1c
   172ec:	mov	r3, #0
   172f0:	str	r3, [fp, #-224]	; 0xffffff20
   172f4:	str	r3, [fp, #-220]	; 0xffffff24
   172f8:	str	r3, [fp, #-216]	; 0xffffff28
   172fc:	cmp	r8, r3
   17300:	beq	17310 <argp_parse@@Base+0xa0>
   17304:	sub	r1, fp, #228	; 0xe4
   17308:	mov	r0, r8
   1730c:	bl	16cec <argp_error@@Base+0x1a8>
   17310:	ldr	r4, [fp, #-220]	; 0xffffff24
   17314:	add	r4, r4, #1
   17318:	add	r4, r4, r4, lsl #3
   1731c:	lsl	r4, r4, #2
   17320:	ldr	r9, [fp, #-216]	; 0xffffff28
   17324:	lsl	r9, r9, #2
   17328:	add	sl, r9, r4
   1732c:	ldr	r5, [fp, #-224]	; 0xffffff20
   17330:	add	r5, r5, #1
   17334:	add	r5, sl, r5, lsl #4
   17338:	ldr	r0, [fp, #-228]	; 0xffffff1c
   1733c:	add	r0, r0, #1
   17340:	add	r0, r0, r5
   17344:	bl	18a9c <argp_parse@@Base+0x182c>
   17348:	mov	r7, r0
   1734c:	str	r0, [fp, #-40]	; 0xffffffd8
   17350:	cmp	r0, #0
   17354:	moveq	r4, #12
   17358:	beq	17ae0 <argp_parse@@Base+0x870>
   1735c:	str	r0, [fp, #-112]	; 0xffffff90
   17360:	add	r4, r0, r4
   17364:	str	r4, [fp, #-104]	; 0xffffff98
   17368:	add	r3, r0, sl
   1736c:	str	r3, [fp, #-244]	; 0xffffff0c
   17370:	str	r3, [fp, #-152]	; 0xffffff68
   17374:	add	sl, r0, r5
   17378:	str	sl, [fp, #-156]	; 0xffffff64
   1737c:	mov	r3, #1
   17380:	str	r3, [fp, #-196]	; 0xffffff3c
   17384:	str	r3, [fp, #-192]	; 0xffffff40
   17388:	sub	ip, fp, #148	; 0x94
   1738c:	sub	lr, fp, #196	; 0xc4
   17390:	ldm	lr!, {r0, r1, r2, r3}
   17394:	stmia	ip!, {r0, r1, r2, r3}
   17398:	ldm	lr!, {r0, r1, r2, r3}
   1739c:	stmia	ip!, {r0, r1, r2, r3}
   173a0:	ldr	r3, [lr]
   173a4:	str	r3, [ip]
   173a8:	mov	r2, r9
   173ac:	mov	r1, #0
   173b0:	mov	r0, r4
   173b4:	bl	1143c <memset@plt>
   173b8:	sub	r3, fp, #160	; 0xa0
   173bc:	str	r3, [fp, #-212]	; 0xffffff2c
   173c0:	str	sl, [fp, #-208]	; 0xffffff30
   173c4:	ldr	r3, [fp, #-244]	; 0xffffff0c
   173c8:	str	r3, [fp, #-204]	; 0xffffff34
   173cc:	str	r4, [fp, #-200]	; 0xffffff38
   173d0:	tst	r6, #8
   173d4:	beq	17560 <argp_parse@@Base+0x2f0>
   173d8:	add	sl, sl, #1
   173dc:	str	sl, [fp, #-208]	; 0xffffff30
   173e0:	mov	r3, #45	; 0x2d
   173e4:	strb	r3, [r7, r5]
   173e8:	mov	r3, #0
   173ec:	ldr	r2, [fp, #-208]	; 0xffffff30
   173f0:	strb	r3, [r2]
   173f4:	ldr	r2, [fp, #-204]	; 0xffffff34
   173f8:	str	r3, [r2]
   173fc:	str	r8, [fp, #-160]	; 0xffffff60
   17400:	cmp	r8, r3
   17404:	beq	1757c <argp_parse@@Base+0x30c>
   17408:	sub	r3, fp, #212	; 0xd4
   1740c:	str	r3, [sp]
   17410:	ldr	r3, [fp, #-112]	; 0xffffff90
   17414:	mov	r2, #0
   17418:	mov	r1, r2
   1741c:	mov	r0, r8
   17420:	bl	16f80 <argp_error@@Base+0x43c>
   17424:	str	r0, [fp, #-108]	; 0xffffff94
   17428:	mov	r2, #56	; 0x38
   1742c:	mov	r1, #0
   17430:	sub	r0, fp, #96	; 0x60
   17434:	bl	1143c <memset@plt>
   17438:	ldr	r3, [fp, #-160]	; 0xffffff60
   1743c:	str	r3, [fp, #-96]	; 0xffffffa0
   17440:	ldr	r3, [fp, #-236]	; 0xffffff14
   17444:	str	r3, [fp, #-92]	; 0xffffffa4
   17448:	ldr	r3, [fp, #-232]	; 0xffffff18
   1744c:	str	r3, [fp, #-88]	; 0xffffffa8
   17450:	str	r6, [fp, #-80]	; 0xffffffb0
   17454:	ldr	r3, [pc, #2108]	; 17c98 <argp_parse@@Base+0xa28>
   17458:	ldr	r3, [r3]
   1745c:	str	r3, [fp, #-52]	; 0xffffffcc
   17460:	ldr	r3, [pc, #2100]	; 17c9c <argp_parse@@Base+0xa2c>
   17464:	ldr	r3, [r3]
   17468:	str	r3, [fp, #-48]	; 0xffffffd0
   1746c:	sub	r3, fp, #160	; 0xa0
   17470:	str	r3, [fp, #-44]	; 0xffffffd4
   17474:	mov	r3, #1
   17478:	str	r3, [fp, #-100]	; 0xffffff9c
   1747c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17480:	ldr	r2, [fp, #-108]	; 0xffffff94
   17484:	cmp	r3, r2
   17488:	bcs	17614 <argp_parse@@Base+0x3a4>
   1748c:	ldr	r2, [fp, #8]
   17490:	str	r2, [r3, #24]
   17494:	ldr	r5, [fp, #-112]	; 0xffffff90
   17498:	ldr	r3, [fp, #-108]	; 0xffffff94
   1749c:	cmp	r5, r3
   174a0:	bcs	17620 <argp_parse@@Base+0x3b0>
   174a4:	ldr	r7, [pc, #2036]	; 17ca0 <argp_parse@@Base+0xa30>
   174a8:	mov	r6, #0
   174ac:	b	175b8 <argp_parse@@Base+0x348>
   174b0:	ldr	r3, [fp, #-232]	; 0xffffff18
   174b4:	ldr	r0, [r3]
   174b8:	bl	17da4 <argp_parse@@Base+0xb34>
   174bc:	ldr	r3, [pc, #2000]	; 17c94 <argp_parse@@Base+0xa24>
   174c0:	str	r0, [r3]
   174c4:	b	172c0 <argp_parse@@Base+0x50>
   174c8:	sub	sp, sp, #72	; 0x48
   174cc:	add	r5, sp, #8
   174d0:	sub	sp, sp, #40	; 0x28
   174d4:	add	r4, sp, #8
   174d8:	mov	r1, #0
   174dc:	str	r1, [r4]
   174e0:	str	r1, [r4, #4]
   174e4:	str	r1, [r4, #8]
   174e8:	str	r1, [r4, #12]
   174ec:	str	r1, [r4, #20]
   174f0:	str	r1, [r4, #24]
   174f4:	str	r5, [r4, #16]
   174f8:	mov	r2, #64	; 0x40
   174fc:	mov	r0, r5
   17500:	bl	1143c <memset@plt>
   17504:	cmp	r8, #0
   17508:	addne	r3, r5, #16
   1750c:	strne	r8, [r5]
   17510:	moveq	r3, r5
   17514:	ldr	r2, [pc, #1928]	; 17ca4 <argp_parse@@Base+0xa34>
   17518:	str	r2, [r3]
   1751c:	ldr	r2, [pc, #1924]	; 17ca8 <argp_parse@@Base+0xa38>
   17520:	ldr	r2, [r2]
   17524:	cmp	r2, #0
   17528:	beq	17548 <argp_parse@@Base+0x2d8>
   1752c:	add	r2, r3, #32
   17530:	ldr	r1, [pc, #1908]	; 17cac <argp_parse@@Base+0xa3c>
   17534:	str	r1, [r3, #16]
   17538:	mov	r3, #0
   1753c:	str	r3, [r2]
   17540:	mov	r8, r4
   17544:	b	172c8 <argp_parse@@Base+0x58>
   17548:	ldr	r2, [pc, #1888]	; 17cb0 <argp_parse@@Base+0xa40>
   1754c:	ldr	r2, [r2]
   17550:	cmp	r2, #0
   17554:	addeq	r2, r3, #16
   17558:	bne	1752c <argp_parse@@Base+0x2bc>
   1755c:	b	17538 <argp_parse@@Base+0x2c8>
   17560:	ldr	r3, [fp, #-240]	; 0xffffff10
   17564:	cmp	r3, #0
   17568:	addne	sl, sl, #1
   1756c:	strne	sl, [fp, #-208]	; 0xffffff30
   17570:	movne	r3, #43	; 0x2b
   17574:	strbne	r3, [r7, r5]
   17578:	b	173e8 <argp_parse@@Base+0x178>
   1757c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17580:	str	r3, [fp, #-108]	; 0xffffff94
   17584:	b	17428 <argp_parse@@Base+0x1b8>
   17588:	mov	r3, r6
   1758c:	mov	r2, r7
   17590:	sub	r1, fp, #96	; 0x60
   17594:	mov	r0, r5
   17598:	bl	16c88 <argp_error@@Base+0x144>
   1759c:	add	r5, r5, #36	; 0x24
   175a0:	ldr	r3, [fp, #-108]	; 0xffffff94
   175a4:	cmp	r5, r3
   175a8:	bcs	17604 <argp_parse@@Base+0x394>
   175ac:	cmp	r0, #7
   175b0:	cmpne	r0, #0
   175b4:	bne	17604 <argp_parse@@Base+0x394>
   175b8:	ldr	r3, [r5, #16]
   175bc:	cmp	r3, #0
   175c0:	ldrne	r2, [r5, #20]
   175c4:	ldrne	r3, [r3, #28]
   175c8:	ldrne	r3, [r3, r2, lsl #2]
   175cc:	strne	r3, [r5, #24]
   175d0:	ldr	r3, [r5]
   175d4:	cmp	r3, #0
   175d8:	bne	17588 <argp_parse@@Base+0x318>
   175dc:	ldr	r3, [r5, #4]
   175e0:	ldr	r3, [r3, #16]
   175e4:	cmp	r3, #0
   175e8:	beq	17588 <argp_parse@@Base+0x318>
   175ec:	ldr	r3, [r3]
   175f0:	cmp	r3, #0
   175f4:	ldrne	r3, [r5, #28]
   175f8:	ldrne	r2, [r5, #24]
   175fc:	strne	r2, [r3]
   17600:	b	17588 <argp_parse@@Base+0x318>
   17604:	mov	r4, r0
   17608:	cmp	r0, #7
   1760c:	beq	17620 <argp_parse@@Base+0x3b0>
   17610:	b	17618 <argp_parse@@Base+0x3a8>
   17614:	mov	r4, #0
   17618:	cmp	r4, #0
   1761c:	bne	17ae0 <argp_parse@@Base+0x870>
   17620:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17624:	tst	r3, #2
   17628:	moveq	r3, #1
   1762c:	streq	r3, [fp, #-144]	; 0xffffff70
   17630:	beq	1765c <argp_parse@@Base+0x3ec>
   17634:	mov	r2, #0
   17638:	str	r2, [fp, #-144]	; 0xffffff70
   1763c:	tst	r3, #1
   17640:	beq	1765c <argp_parse@@Base+0x3ec>
   17644:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17648:	sub	r3, r3, #4
   1764c:	str	r3, [fp, #-88]	; 0xffffffa8
   17650:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17654:	add	r3, r3, #1
   17658:	str	r3, [fp, #-92]	; 0xffffffa4
   1765c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17660:	ldr	r2, [fp, #-232]	; 0xffffff18
   17664:	cmp	r2, r3
   17668:	beq	17688 <argp_parse@@Base+0x418>
   1766c:	ldr	r3, [pc, #1568]	; 17c94 <argp_parse@@Base+0xa24>
   17670:	ldr	r3, [r3]
   17674:	str	r3, [fp, #-56]	; 0xffffffc8
   17678:	mov	r6, #0
   1767c:	mov	sl, #1
   17680:	mvn	r9, #0
   17684:	b	178f8 <argp_parse@@Base+0x688>
   17688:	ldr	r0, [r2]
   1768c:	cmp	r0, #0
   17690:	beq	1766c <argp_parse@@Base+0x3fc>
   17694:	bl	17da4 <argp_parse@@Base+0xb34>
   17698:	str	r0, [fp, #-56]	; 0xffffffc8
   1769c:	b	17678 <argp_parse@@Base+0x408>
   176a0:	ldr	r3, [fp, #-84]	; 0xffffffac
   176a4:	str	r3, [fp, #-148]	; 0xffffff6c
   176a8:	str	r9, [fp, #-140]	; 0xffffff74
   176ac:	ldr	r3, [fp, #-80]	; 0xffffffb0
   176b0:	tst	r3, #64	; 0x40
   176b4:	beq	17780 <argp_parse@@Base+0x510>
   176b8:	sub	r3, fp, #148	; 0x94
   176bc:	str	r3, [sp, #4]
   176c0:	str	r6, [sp]
   176c4:	ldr	r3, [fp, #-152]	; 0xffffff68
   176c8:	ldr	r2, [fp, #-156]	; 0xffffff64
   176cc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   176d0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   176d4:	bl	17f40 <argp_parse@@Base+0xcd0>
   176d8:	mov	r5, r0
   176dc:	ldr	r4, [fp, #-148]	; 0xffffff6c
   176e0:	str	r4, [fp, #-84]	; 0xffffffac
   176e4:	cmn	r5, #1
   176e8:	beq	177a8 <argp_parse@@Base+0x538>
   176ec:	cmp	r5, #63	; 0x3f
   176f0:	beq	177d4 <argp_parse@@Base+0x564>
   176f4:	cmp	r5, #1
   176f8:	beq	1780c <argp_parse@@Base+0x59c>
   176fc:	ldr	r4, [fp, #-136]	; 0xffffff78
   17700:	asrs	r3, r5, #24
   17704:	bne	178b8 <argp_parse@@Base+0x648>
   17708:	mov	r1, r5
   1770c:	ldr	r0, [fp, #-156]	; 0xffffff64
   17710:	bl	113f4 <strchr@plt>
   17714:	subs	r1, r0, #0
   17718:	beq	17768 <argp_parse@@Base+0x4f8>
   1771c:	ldr	r0, [fp, #-112]	; 0xffffff90
   17720:	ldr	r2, [fp, #-108]	; 0xffffff94
   17724:	cmp	r2, r0
   17728:	bls	17768 <argp_parse@@Base+0x4f8>
   1772c:	ldr	r3, [r0, #8]
   17730:	cmp	r1, r3
   17734:	bcc	17750 <argp_parse@@Base+0x4e0>
   17738:	add	r0, r0, #36	; 0x24
   1773c:	cmp	r2, r0
   17740:	bls	17768 <argp_parse@@Base+0x4f8>
   17744:	ldr	r3, [r0, #8]
   17748:	cmp	r1, r3
   1774c:	bcs	17738 <argp_parse@@Base+0x4c8>
   17750:	mov	r3, r4
   17754:	mov	r2, r5
   17758:	sub	r1, fp, #96	; 0x60
   1775c:	bl	16c88 <argp_error@@Base+0x144>
   17760:	cmp	r0, #7
   17764:	bne	178f0 <argp_parse@@Base+0x680>
   17768:	ldr	r3, [pc, #1348]	; 17cb4 <argp_parse@@Base+0xa44>
   1776c:	mov	r2, r5
   17770:	ldr	r1, [pc, #1344]	; 17cb8 <argp_parse@@Base+0xa48>
   17774:	sub	r0, fp, #96	; 0x60
   17778:	bl	16b44 <argp_error@@Base>
   1777c:	b	17998 <argp_parse@@Base+0x728>
   17780:	sub	r3, fp, #148	; 0x94
   17784:	str	r3, [sp, #4]
   17788:	str	r6, [sp]
   1778c:	ldr	r3, [fp, #-152]	; 0xffffff68
   17790:	ldr	r2, [fp, #-156]	; 0xffffff64
   17794:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17798:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1779c:	bl	17ee4 <argp_parse@@Base+0xc74>
   177a0:	mov	r5, r0
   177a4:	b	176dc <argp_parse@@Base+0x46c>
   177a8:	str	r6, [fp, #-100]	; 0xffffff9c
   177ac:	cmp	r4, #1
   177b0:	ble	17920 <argp_parse@@Base+0x6b0>
   177b4:	sub	r3, r4, #-1073741823	; 0xc0000001
   177b8:	ldr	r1, [pc, #1276]	; 17cbc <argp_parse@@Base+0xa4c>
   177bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   177c0:	ldr	r0, [r2, r3, lsl #2]
   177c4:	bl	11208 <strcmp@plt>
   177c8:	cmp	r0, #0
   177cc:	streq	r4, [fp, #-72]	; 0xffffffb8
   177d0:	b	17920 <argp_parse@@Base+0x6b0>
   177d4:	ldr	r3, [fp, #-140]	; 0xffffff74
   177d8:	cmn	r3, #1
   177dc:	beq	176fc <argp_parse@@Base+0x48c>
   177e0:	mov	r3, #0
   177e4:	b	179a8 <argp_parse@@Base+0x738>
   177e8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   177ec:	tst	r2, #4
   177f0:	movne	r3, #1
   177f4:	bne	179a8 <argp_parse@@Base+0x738>
   177f8:	add	r2, r3, #1
   177fc:	str	r2, [fp, #-84]	; 0xffffffac
   17800:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17804:	ldr	r3, [r2, r3, lsl #2]
   17808:	str	r3, [fp, #-136]	; 0xffffff78
   1780c:	ldr	r7, [fp, #-136]	; 0xffffff78
   17810:	ldr	r8, [fp, #-84]	; 0xffffffac
   17814:	sub	r8, r8, #1
   17818:	str	r8, [fp, #-84]	; 0xffffffac
   1781c:	ldr	r5, [fp, #-112]	; 0xffffff90
   17820:	ldr	r3, [fp, #-108]	; 0xffffff94
   17824:	cmp	r3, r5
   17828:	bhi	17874 <argp_parse@@Base+0x604>
   1782c:	b	178b0 <argp_parse@@Base+0x640>
   17830:	ldr	r3, [fp, #-84]	; 0xffffffac
   17834:	sub	r3, r3, #1
   17838:	str	r3, [fp, #-84]	; 0xffffffac
   1783c:	mov	r3, r6
   17840:	ldr	r2, [pc, #1144]	; 17cc0 <argp_parse@@Base+0xa50>
   17844:	sub	r1, fp, #96	; 0x60
   17848:	mov	r0, r5
   1784c:	bl	16c88 <argp_error@@Base+0x144>
   17850:	add	r5, r5, #36	; 0x24
   17854:	ldr	r3, [fp, #-108]	; 0xffffff94
   17858:	cmp	r5, r3
   1785c:	movcs	r3, #0
   17860:	movcc	r3, #1
   17864:	cmp	r0, #7
   17868:	movne	r3, #0
   1786c:	cmp	r3, #0
   17870:	beq	17c54 <argp_parse@@Base+0x9e4>
   17874:	ldr	r3, [fp, #-84]	; 0xffffffac
   17878:	add	r3, r3, #1
   1787c:	str	r3, [fp, #-84]	; 0xffffffac
   17880:	mov	r3, r7
   17884:	mov	r2, r6
   17888:	sub	r1, fp, #96	; 0x60
   1788c:	mov	r0, r5
   17890:	bl	16c88 <argp_error@@Base+0x144>
   17894:	cmp	r0, #7
   17898:	beq	17830 <argp_parse@@Base+0x5c0>
   1789c:	add	r5, r5, #36	; 0x24
   178a0:	cmp	r0, #0
   178a4:	beq	17c64 <argp_parse@@Base+0x9f4>
   178a8:	cmp	r0, #7
   178ac:	bne	178f0 <argp_parse@@Base+0x680>
   178b0:	mov	r5, #1
   178b4:	b	17998 <argp_parse@@Base+0x728>
   178b8:	ands	r1, r5, #8388608	; 0x800000
   178bc:	movne	r1, #-16777216	; 0xff000000
   178c0:	bic	r2, r5, #-16777216	; 0xff000000
   178c4:	add	r0, r3, r3, lsl #3
   178c8:	lsl	r0, r0, #2
   178cc:	sub	r0, r0, #36	; 0x24
   178d0:	mov	r3, r4
   178d4:	orr	r2, r2, r1
   178d8:	sub	r1, fp, #96	; 0x60
   178dc:	ldr	ip, [fp, #-112]	; 0xffffff90
   178e0:	add	r0, ip, r0
   178e4:	bl	16c88 <argp_error@@Base+0x144>
   178e8:	cmp	r0, #7
   178ec:	beq	17938 <argp_parse@@Base+0x6c8>
   178f0:	cmp	r0, #0
   178f4:	bne	17a48 <argp_parse@@Base+0x7d8>
   178f8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   178fc:	cmp	r3, #0
   17900:	beq	17914 <argp_parse@@Base+0x6a4>
   17904:	ldr	r2, [fp, #-84]	; 0xffffffac
   17908:	cmp	r3, r2
   1790c:	strgt	r6, [fp, #-72]	; 0xffffffb8
   17910:	ble	17920 <argp_parse@@Base+0x6b0>
   17914:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17918:	cmp	r3, #0
   1791c:	bne	176a0 <argp_parse@@Base+0x430>
   17920:	ldr	r3, [fp, #-84]	; 0xffffffac
   17924:	ldr	r2, [fp, #-92]	; 0xffffffa4
   17928:	cmp	r3, r2
   1792c:	blt	177e8 <argp_parse@@Base+0x578>
   17930:	mov	r3, #1
   17934:	b	179a8 <argp_parse@@Base+0x738>
   17938:	ldr	r3, [fp, #-152]	; 0xffffff68
   1793c:	ldr	r2, [r3, #12]
   17940:	cmp	r2, r5
   17944:	beq	17978 <argp_parse@@Base+0x708>
   17948:	ldr	r2, [r3]
   1794c:	cmp	r2, #0
   17950:	beq	17a40 <argp_parse@@Base+0x7d0>
   17954:	add	r3, r3, #16
   17958:	ldr	r2, [r3, #12]
   1795c:	cmp	r2, r5
   17960:	beq	17978 <argp_parse@@Base+0x708>
   17964:	ldr	r2, [r3]
   17968:	cmp	r2, #0
   1796c:	bne	17954 <argp_parse@@Base+0x6e4>
   17970:	ldr	r2, [pc, #844]	; 17cc4 <argp_parse@@Base+0xa54>
   17974:	b	17988 <argp_parse@@Base+0x718>
   17978:	ldr	r2, [r3]
   1797c:	ldr	r3, [pc, #832]	; 17cc4 <argp_parse@@Base+0xa54>
   17980:	cmp	r2, #0
   17984:	moveq	r2, r3
   17988:	ldr	r3, [pc, #804]	; 17cb4 <argp_parse@@Base+0xa44>
   1798c:	ldr	r1, [pc, #820]	; 17cc8 <argp_parse@@Base+0xa58>
   17990:	sub	r0, fp, #96	; 0x60
   17994:	bl	16b44 <argp_error@@Base>
   17998:	add	r5, r5, #1
   1799c:	bics	r3, r5, #2
   179a0:	moveq	r3, #1
   179a4:	movne	r3, #0
   179a8:	cmp	r3, #0
   179ac:	moveq	r4, #7
   179b0:	beq	17a4c <argp_parse@@Base+0x7dc>
   179b4:	ldr	r3, [fp, #-84]	; 0xffffffac
   179b8:	ldr	r2, [fp, #-92]	; 0xffffffa4
   179bc:	cmp	r3, r2
   179c0:	beq	17aec <argp_parse@@Base+0x87c>
   179c4:	ldr	r2, [fp, #4]
   179c8:	cmp	r2, #0
   179cc:	strne	r3, [r2]
   179d0:	beq	17be8 <argp_parse@@Base+0x978>
   179d4:	ldr	r5, [fp, #-108]	; 0xffffff94
   179d8:	sub	r5, r5, #36	; 0x24
   179dc:	ldr	r3, [fp, #-112]	; 0xffffff90
   179e0:	cmp	r5, r3
   179e4:	bcc	17c24 <argp_parse@@Base+0x9b4>
   179e8:	ldr	r7, [pc, #732]	; 17ccc <argp_parse@@Base+0xa5c>
   179ec:	mov	r6, #0
   179f0:	mov	r3, r6
   179f4:	mov	r2, r7
   179f8:	sub	r1, fp, #96	; 0x60
   179fc:	mov	r0, r5
   17a00:	bl	16c88 <argp_error@@Base+0x144>
   17a04:	sub	r5, r5, #36	; 0x24
   17a08:	ldr	r3, [fp, #-112]	; 0xffffff90
   17a0c:	cmp	r5, r3
   17a10:	bcc	17a20 <argp_parse@@Base+0x7b0>
   17a14:	cmp	r0, #7
   17a18:	cmpne	r0, #0
   17a1c:	beq	179f0 <argp_parse@@Base+0x780>
   17a20:	mov	r4, r0
   17a24:	cmp	r0, #7
   17a28:	moveq	r4, #0
   17a2c:	ldr	r5, [fp, #-108]	; 0xffffff94
   17a30:	sub	r5, r5, #36	; 0x24
   17a34:	cmp	r3, r5
   17a38:	bls	17aa4 <argp_parse@@Base+0x834>
   17a3c:	b	17ad8 <argp_parse@@Base+0x868>
   17a40:	ldr	r2, [pc, #636]	; 17cc4 <argp_parse@@Base+0xa54>
   17a44:	b	17988 <argp_parse@@Base+0x718>
   17a48:	mov	r4, r0
   17a4c:	cmp	r4, #7
   17a50:	beq	17c0c <argp_parse@@Base+0x99c>
   17a54:	ldr	r5, [fp, #-112]	; 0xffffff90
   17a58:	ldr	r3, [fp, #-108]	; 0xffffff94
   17a5c:	cmp	r3, r5
   17a60:	bls	17a90 <argp_parse@@Base+0x820>
   17a64:	ldr	r7, [pc, #612]	; 17cd0 <argp_parse@@Base+0xa60>
   17a68:	mov	r6, #0
   17a6c:	mov	r3, r6
   17a70:	mov	r2, r7
   17a74:	sub	r1, fp, #96	; 0x60
   17a78:	mov	r0, r5
   17a7c:	bl	16c88 <argp_error@@Base+0x144>
   17a80:	add	r5, r5, #36	; 0x24
   17a84:	ldr	r3, [fp, #-108]	; 0xffffff94
   17a88:	cmp	r5, r3
   17a8c:	bcc	17a6c <argp_parse@@Base+0x7fc>
   17a90:	ldr	r5, [fp, #-108]	; 0xffffff94
   17a94:	sub	r5, r5, #36	; 0x24
   17a98:	ldr	r3, [fp, #-112]	; 0xffffff90
   17a9c:	cmp	r3, r5
   17aa0:	bhi	17ad0 <argp_parse@@Base+0x860>
   17aa4:	ldr	r7, [pc, #552]	; 17cd4 <argp_parse@@Base+0xa64>
   17aa8:	mov	r6, #0
   17aac:	mov	r3, r6
   17ab0:	mov	r2, r7
   17ab4:	sub	r1, fp, #96	; 0x60
   17ab8:	mov	r0, r5
   17abc:	bl	16c88 <argp_error@@Base+0x144>
   17ac0:	sub	r5, r5, #36	; 0x24
   17ac4:	ldr	r3, [fp, #-112]	; 0xffffff90
   17ac8:	cmp	r5, r3
   17acc:	bcs	17aac <argp_parse@@Base+0x83c>
   17ad0:	cmp	r4, #7
   17ad4:	moveq	r4, #22
   17ad8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17adc:	bl	17e64 <argp_parse@@Base+0xbf4>
   17ae0:	mov	r0, r4
   17ae4:	sub	sp, fp, #32
   17ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aec:	ldr	r6, [fp, #-112]	; 0xffffff90
   17af0:	ldr	r5, [fp, #-108]	; 0xffffff94
   17af4:	cmp	r6, r5
   17af8:	bcs	17c2c <argp_parse@@Base+0x9bc>
   17afc:	mov	r4, #0
   17b00:	ldr	r8, [pc, #464]	; 17cd8 <argp_parse@@Base+0xa68>
   17b04:	mov	r7, r4
   17b08:	mov	r0, r4
   17b0c:	b	17b2c <argp_parse@@Base+0x8bc>
   17b10:	add	r6, r6, #36	; 0x24
   17b14:	ldr	r5, [fp, #-108]	; 0xffffff94
   17b18:	cmp	r6, r5
   17b1c:	bcs	17b58 <argp_parse@@Base+0x8e8>
   17b20:	cmp	r0, #7
   17b24:	cmpne	r0, #0
   17b28:	bne	17b50 <argp_parse@@Base+0x8e0>
   17b2c:	ldr	r3, [r6, #12]
   17b30:	cmp	r3, #0
   17b34:	bne	17b10 <argp_parse@@Base+0x8a0>
   17b38:	mov	r3, r7
   17b3c:	mov	r2, r8
   17b40:	sub	r1, fp, #96	; 0x60
   17b44:	mov	r0, r6
   17b48:	bl	16c88 <argp_error@@Base+0x144>
   17b4c:	b	17b10 <argp_parse@@Base+0x8a0>
   17b50:	mov	r4, r0
   17b54:	b	17bbc <argp_parse@@Base+0x94c>
   17b58:	mov	r4, r0
   17b5c:	sub	r5, r5, #36	; 0x24
   17b60:	ldr	r3, [fp, #-112]	; 0xffffff90
   17b64:	cmp	r3, r5
   17b68:	bhi	17bbc <argp_parse@@Base+0x94c>
   17b6c:	cmp	r0, #0
   17b70:	cmpne	r0, #7
   17b74:	bne	17bbc <argp_parse@@Base+0x94c>
   17b78:	ldr	r7, [pc, #348]	; 17cdc <argp_parse@@Base+0xa6c>
   17b7c:	mov	r6, #0
   17b80:	mov	r3, r6
   17b84:	mov	r2, r7
   17b88:	sub	r1, fp, #96	; 0x60
   17b8c:	mov	r0, r5
   17b90:	bl	16c88 <argp_error@@Base+0x144>
   17b94:	sub	r5, r5, #36	; 0x24
   17b98:	ldr	r3, [fp, #-112]	; 0xffffff90
   17b9c:	cmp	r5, r3
   17ba0:	bcc	17bb8 <argp_parse@@Base+0x948>
   17ba4:	cmp	r0, #7
   17ba8:	cmpne	r0, #0
   17bac:	beq	17b80 <argp_parse@@Base+0x910>
   17bb0:	mov	r4, r0
   17bb4:	b	17bbc <argp_parse@@Base+0x94c>
   17bb8:	mov	r4, r0
   17bbc:	cmp	r4, #7
   17bc0:	beq	17c40 <argp_parse@@Base+0x9d0>
   17bc4:	ldr	r3, [fp, #4]
   17bc8:	cmp	r3, #0
   17bcc:	beq	17c84 <argp_parse@@Base+0xa14>
   17bd0:	ldr	r3, [fp, #-84]	; 0xffffffac
   17bd4:	ldr	r2, [fp, #4]
   17bd8:	str	r3, [r2]
   17bdc:	cmp	r4, #0
   17be0:	beq	179d4 <argp_parse@@Base+0x764>
   17be4:	b	17a4c <argp_parse@@Base+0x7dc>
   17be8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17bec:	tst	r3, #2
   17bf0:	bne	17c0c <argp_parse@@Base+0x99c>
   17bf4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17bf8:	cmp	r0, #0
   17bfc:	beq	17c0c <argp_parse@@Base+0x99c>
   17c00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17c04:	ldr	r1, [pc, #212]	; 17ce0 <argp_parse@@Base+0xa70>
   17c08:	bl	11400 <fprintf@plt>
   17c0c:	mov	r2, #260	; 0x104
   17c10:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17c14:	sub	r0, fp, #96	; 0x60
   17c18:	bl	16a88 <argp_state_help@@Base>
   17c1c:	mov	r4, #7
   17c20:	b	17a54 <argp_parse@@Base+0x7e4>
   17c24:	mov	r4, #0
   17c28:	b	17ad0 <argp_parse@@Base+0x860>
   17c2c:	sub	r5, r5, #36	; 0x24
   17c30:	cmp	r6, r5
   17c34:	movhi	r4, #0
   17c38:	bls	17b78 <argp_parse@@Base+0x908>
   17c3c:	b	17bc4 <argp_parse@@Base+0x954>
   17c40:	ldr	r3, [fp, #4]
   17c44:	cmp	r3, #0
   17c48:	movne	r4, #0
   17c4c:	bne	17bd0 <argp_parse@@Base+0x960>
   17c50:	b	179d4 <argp_parse@@Base+0x764>
   17c54:	cmp	r0, #0
   17c58:	bne	178a8 <argp_parse@@Base+0x638>
   17c5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c60:	str	r3, [fp, #-84]	; 0xffffffac
   17c64:	ldr	r3, [fp, #-84]	; 0xffffffac
   17c68:	cmp	r8, r3
   17c6c:	sublt	r8, r3, r8
   17c70:	ldrlt	r3, [r5, #-24]	; 0xffffffe8
   17c74:	addlt	r8, r3, r8
   17c78:	strlt	r8, [r5, #-24]	; 0xffffffe8
   17c7c:	strge	sl, [fp, #-100]	; 0xffffff9c
   17c80:	b	178f8 <argp_parse@@Base+0x688>
   17c84:	cmp	r4, #0
   17c88:	beq	179d4 <argp_parse@@Base+0x764>
   17c8c:	b	17a54 <argp_parse@@Base+0x7e4>
   17c90:	andeq	ip, r2, ip, asr #8
   17c94:	andeq	ip, r2, r8, asr #8
   17c98:	andeq	ip, r2, r0, asr r4
   17c9c:	andeq	ip, r2, ip, asr r4
   17ca0:	tsteq	r0, r3
   17ca4:	andeq	sl, r1, ip, ror #27
   17ca8:	andeq	ip, r2, r0, asr #31
   17cac:	andeq	sl, r1, r8, lsl #28
   17cb0:	andeq	ip, r2, ip, lsl #10
   17cb4:	andeq	sl, r1, r4, lsr #28
   17cb8:	andeq	sl, r1, r8, lsr pc
   17cbc:	andeq	sl, r1, r4, lsr pc
   17cc0:	tsteq	r0, r6
   17cc4:	andeq	sl, r1, r0, lsr pc
   17cc8:	andeq	sl, r1, r0, asr #30
   17ccc:	tsteq	r0, r4
   17cd0:	tsteq	r0, r5
   17cd4:	tsteq	r0, r7
   17cd8:	tsteq	r0, r2
   17cdc:	tsteq	r0, r1
   17ce0:	andeq	sl, r1, ip, asr #30
   17ce4:	cmp	r1, #0
   17ce8:	beq	17d34 <argp_parse@@Base+0xac4>
   17cec:	ldr	r2, [r1, #52]	; 0x34
   17cf0:	ldr	r3, [r2, #48]	; 0x30
   17cf4:	ldr	r1, [r2, #52]	; 0x34
   17cf8:	cmp	r3, r1
   17cfc:	bcs	17d3c <argp_parse@@Base+0xacc>
   17d00:	ldr	r2, [r3, #4]
   17d04:	cmp	r0, r2
   17d08:	beq	17d24 <argp_parse@@Base+0xab4>
   17d0c:	add	r3, r3, #36	; 0x24
   17d10:	cmp	r3, r1
   17d14:	bcs	17d2c <argp_parse@@Base+0xabc>
   17d18:	ldr	r2, [r3, #4]
   17d1c:	cmp	r2, r0
   17d20:	bne	17d0c <argp_parse@@Base+0xa9c>
   17d24:	ldr	r0, [r3, #24]
   17d28:	bx	lr
   17d2c:	mov	r0, #0
   17d30:	bx	lr
   17d34:	mov	r0, #0
   17d38:	bx	lr
   17d3c:	mov	r0, #0
   17d40:	bx	lr
   17d44:	push	{lr}		; (str lr, [sp, #-4]!)
   17d48:	sub	sp, sp, #12
   17d4c:	ldr	r3, [pc, #28]	; 17d70 <argp_parse@@Base+0xb00>
   17d50:	ldr	r1, [r3]
   17d54:	ldr	r3, [r3, #4]
   17d58:	str	r3, [sp]
   17d5c:	ldr	r3, [pc, #16]	; 17d74 <argp_parse@@Base+0xb04>
   17d60:	ldr	r2, [pc, #16]	; 17d78 <argp_parse@@Base+0xb08>
   17d64:	bl	18354 <argp_parse@@Base+0x10e4>
   17d68:	add	sp, sp, #12
   17d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d70:	andeq	ip, r2, r0, lsl r5
   17d74:	andeq	fp, r1, r4, lsr #32
   17d78:	andeq	fp, r1, r4, lsr r0
   17d7c:	ldr	r2, [pc, #20]	; 17d98 <argp_parse@@Base+0xb28>
   17d80:	ldr	r3, [pc, #20]	; 17d9c <argp_parse@@Base+0xb2c>
   17d84:	str	r2, [r3]
   17d88:	ldr	r3, [pc, #16]	; 17da0 <argp_parse@@Base+0xb30>
   17d8c:	str	r0, [r3]
   17d90:	str	r1, [r3, #4]
   17d94:	bx	lr
   17d98:	andeq	r7, r1, r4, asr #26
   17d9c:	andeq	ip, r2, ip, lsl #10
   17da0:	andeq	ip, r2, r0, lsl r5
   17da4:	ldrb	r3, [r0]
   17da8:	cmp	r3, #47	; 0x2f
   17dac:	bne	17dbc <argp_parse@@Base+0xb4c>
   17db0:	ldrb	r3, [r0, #1]!
   17db4:	cmp	r3, #47	; 0x2f
   17db8:	beq	17db0 <argp_parse@@Base+0xb40>
   17dbc:	ldrb	r2, [r0]
   17dc0:	cmp	r2, #0
   17dc4:	bxeq	lr
   17dc8:	push	{lr}		; (str lr, [sp, #-4]!)
   17dcc:	mov	r1, r0
   17dd0:	mov	r3, #0
   17dd4:	mov	lr, #1
   17dd8:	mov	ip, r3
   17ddc:	b	17dec <argp_parse@@Base+0xb7c>
   17de0:	ldrb	r2, [r1, #1]!
   17de4:	cmp	r2, #0
   17de8:	beq	17e08 <argp_parse@@Base+0xb98>
   17dec:	cmp	r2, #47	; 0x2f
   17df0:	moveq	r3, lr
   17df4:	beq	17de0 <argp_parse@@Base+0xb70>
   17df8:	cmp	r3, #0
   17dfc:	movne	r0, r1
   17e00:	movne	r3, ip
   17e04:	b	17de0 <argp_parse@@Base+0xb70>
   17e08:	pop	{pc}		; (ldr pc, [sp], #4)
   17e0c:	push	{r4, lr}
   17e10:	mov	r4, r0
   17e14:	bl	113e8 <strlen@plt>
   17e18:	cmp	r0, #1
   17e1c:	popls	{r4, pc}
   17e20:	sub	r3, r0, #1
   17e24:	add	r2, r4, r3
   17e28:	ldrb	r1, [r4, r3]
   17e2c:	cmp	r1, #47	; 0x2f
   17e30:	popne	{r4, pc}
   17e34:	cmp	r3, #1
   17e38:	beq	17e5c <argp_parse@@Base+0xbec>
   17e3c:	sub	r0, r3, #1
   17e40:	ldrb	r1, [r2, #-1]!
   17e44:	cmp	r1, #47	; 0x2f
   17e48:	beq	17e54 <argp_parse@@Base+0xbe4>
   17e4c:	mov	r0, r3
   17e50:	pop	{r4, pc}
   17e54:	mov	r3, r0
   17e58:	b	17e34 <argp_parse@@Base+0xbc4>
   17e5c:	mov	r0, #1
   17e60:	pop	{r4, pc}
   17e64:	push	{r4, r5, lr}
   17e68:	sub	sp, sp, #12
   17e6c:	mov	r5, r0
   17e70:	bl	1140c <__errno_location@plt>
   17e74:	mov	r4, r0
   17e78:	ldr	r3, [r0]
   17e7c:	str	r3, [sp]
   17e80:	str	r3, [sp, #4]
   17e84:	mov	r3, #0
   17e88:	str	r3, [r0]
   17e8c:	mov	r0, r5
   17e90:	bl	11268 <free@plt>
   17e94:	ldr	r3, [r4]
   17e98:	cmp	r3, #0
   17e9c:	moveq	r3, #4
   17ea0:	movne	r3, #0
   17ea4:	add	r2, sp, #8
   17ea8:	add	r3, r2, r3
   17eac:	ldr	r3, [r3, #-8]
   17eb0:	str	r3, [r4]
   17eb4:	add	sp, sp, #12
   17eb8:	pop	{r4, r5, pc}
   17ebc:	push	{lr}		; (str lr, [sp, #-4]!)
   17ec0:	sub	sp, sp, #20
   17ec4:	mov	ip, #0
   17ec8:	str	ip, [sp, #8]
   17ecc:	str	ip, [sp, #4]
   17ed0:	ldr	ip, [sp, #24]
   17ed4:	str	ip, [sp]
   17ed8:	bl	19de0 <argp_parse@@Base+0x2b70>
   17edc:	add	sp, sp, #20
   17ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee4:	push	{lr}		; (str lr, [sp, #-4]!)
   17ee8:	sub	sp, sp, #20
   17eec:	mov	ip, #0
   17ef0:	str	ip, [sp, #12]
   17ef4:	ldr	lr, [sp, #28]
   17ef8:	str	lr, [sp, #8]
   17efc:	str	ip, [sp, #4]
   17f00:	ldr	ip, [sp, #24]
   17f04:	str	ip, [sp]
   17f08:	bl	19864 <argp_parse@@Base+0x25f4>
   17f0c:	add	sp, sp, #20
   17f10:	pop	{pc}		; (ldr pc, [sp], #4)
   17f14:	push	{lr}		; (str lr, [sp, #-4]!)
   17f18:	sub	sp, sp, #20
   17f1c:	mov	ip, #0
   17f20:	str	ip, [sp, #8]
   17f24:	mov	ip, #1
   17f28:	str	ip, [sp, #4]
   17f2c:	ldr	ip, [sp, #24]
   17f30:	str	ip, [sp]
   17f34:	bl	19de0 <argp_parse@@Base+0x2b70>
   17f38:	add	sp, sp, #20
   17f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f40:	push	{lr}		; (str lr, [sp, #-4]!)
   17f44:	sub	sp, sp, #20
   17f48:	mov	ip, #0
   17f4c:	str	ip, [sp, #12]
   17f50:	ldr	ip, [sp, #28]
   17f54:	str	ip, [sp, #8]
   17f58:	mov	ip, #1
   17f5c:	str	ip, [sp, #4]
   17f60:	ldr	ip, [sp, #24]
   17f64:	str	ip, [sp]
   17f68:	bl	19864 <argp_parse@@Base+0x25f4>
   17f6c:	add	sp, sp, #20
   17f70:	pop	{pc}		; (ldr pc, [sp], #4)
   17f74:	push	{r1, r2, r3}
   17f78:	push	{lr}		; (str lr, [sp, #-4]!)
   17f7c:	sub	sp, sp, #8
   17f80:	add	r3, sp, #20
   17f84:	str	r3, [sp, #4]
   17f88:	ldr	r2, [sp, #16]
   17f8c:	ldr	r1, [sp, #12]
   17f90:	bl	1131c <ioctl@plt>
   17f94:	add	sp, sp, #8
   17f98:	pop	{lr}		; (ldr lr, [sp], #4)
   17f9c:	add	sp, sp, #12
   17fa0:	bx	lr
   17fa4:	push	{r4, r5, r6, lr}
   17fa8:	subs	r4, r0, #0
   17fac:	beq	18024 <argp_parse@@Base+0xdb4>
   17fb0:	mov	r1, #47	; 0x2f
   17fb4:	mov	r0, r4
   17fb8:	bl	114b4 <strrchr@plt>
   17fbc:	cmp	r0, #0
   17fc0:	addne	r5, r0, #1
   17fc4:	moveq	r5, r4
   17fc8:	sub	r3, r5, r4
   17fcc:	cmp	r3, #6
   17fd0:	ble	18010 <argp_parse@@Base+0xda0>
   17fd4:	mov	r2, #7
   17fd8:	ldr	r1, [pc, #96]	; 18040 <argp_parse@@Base+0xdd0>
   17fdc:	sub	r0, r5, #7
   17fe0:	bl	11538 <strncmp@plt>
   17fe4:	cmp	r0, #0
   17fe8:	bne	18010 <argp_parse@@Base+0xda0>
   17fec:	mov	r2, #3
   17ff0:	ldr	r1, [pc, #76]	; 18044 <argp_parse@@Base+0xdd4>
   17ff4:	mov	r0, r5
   17ff8:	bl	11538 <strncmp@plt>
   17ffc:	cmp	r0, #0
   18000:	addeq	r4, r5, #3
   18004:	ldreq	r3, [pc, #60]	; 18048 <argp_parse@@Base+0xdd8>
   18008:	streq	r4, [r3]
   1800c:	movne	r4, r5
   18010:	ldr	r3, [pc, #52]	; 1804c <argp_parse@@Base+0xddc>
   18014:	str	r4, [r3]
   18018:	ldr	r3, [pc, #48]	; 18050 <argp_parse@@Base+0xde0>
   1801c:	str	r4, [r3]
   18020:	pop	{r4, r5, r6, pc}
   18024:	ldr	r3, [pc, #40]	; 18054 <argp_parse@@Base+0xde4>
   18028:	ldr	r3, [r3]
   1802c:	mov	r2, #55	; 0x37
   18030:	mov	r1, #1
   18034:	ldr	r0, [pc, #28]	; 18058 <argp_parse@@Base+0xde8>
   18038:	bl	11310 <fwrite@plt>
   1803c:	bl	11544 <abort@plt>
   18040:	andeq	fp, r1, ip, ror r0
   18044:	andeq	fp, r1, r4, lsl #1
   18048:	andeq	ip, r2, r8, asr #8
   1804c:	andeq	ip, r2, r8, lsl r5
   18050:	andeq	ip, r2, ip, asr #8
   18054:	andeq	ip, r2, r0, asr r4
   18058:	andeq	fp, r1, r4, asr #32
   1805c:	push	{r4, r5, r6, lr}
   18060:	sub	sp, sp, #32
   18064:	mov	r4, r0
   18068:	ldr	r5, [sp, #48]	; 0x30
   1806c:	ldr	r6, [sp, #52]	; 0x34
   18070:	cmp	r1, #0
   18074:	beq	180fc <argp_parse@@Base+0xe8c>
   18078:	str	r3, [sp]
   1807c:	mov	r3, r2
   18080:	mov	r2, r1
   18084:	ldr	r1, [pc, #644]	; 18310 <argp_parse@@Base+0x10a0>
   18088:	bl	11400 <fprintf@plt>
   1808c:	ldr	r3, [pc, #640]	; 18314 <argp_parse@@Base+0x10a4>
   18090:	ldr	r2, [pc, #640]	; 18318 <argp_parse@@Base+0x10a8>
   18094:	ldr	r1, [pc, #640]	; 1831c <argp_parse@@Base+0x10ac>
   18098:	mov	r0, r4
   1809c:	bl	11400 <fprintf@plt>
   180a0:	mov	r1, r4
   180a4:	mov	r0, #10
   180a8:	bl	114cc <fputc@plt>
   180ac:	ldr	r2, [pc, #620]	; 18320 <argp_parse@@Base+0x10b0>
   180b0:	ldr	r1, [pc, #620]	; 18324 <argp_parse@@Base+0x10b4>
   180b4:	mov	r0, r4
   180b8:	bl	11400 <fprintf@plt>
   180bc:	mov	r1, r4
   180c0:	mov	r0, #10
   180c4:	bl	114cc <fputc@plt>
   180c8:	cmp	r6, #9
   180cc:	ldrls	pc, [pc, r6, lsl #2]
   180d0:	b	182c0 <argp_parse@@Base+0x1050>
   180d4:	andeq	r8, r1, r8, lsl r1
   180d8:	andeq	r8, r1, r8, lsl #2
   180dc:	andeq	r8, r1, r0, lsr #2
   180e0:	andeq	r8, r1, r8, lsr r1
   180e4:	andeq	r8, r1, r8, asr r1
   180e8:	andeq	r8, r1, r0, lsl #3
   180ec:			; <UNDEFINED> instruction: 0x000181b0
   180f0:	andeq	r8, r1, r8, ror #3
   180f4:	andeq	r8, r1, r8, lsr #4
   180f8:	andeq	r8, r1, r0, ror r2
   180fc:	ldr	r1, [pc, #548]	; 18328 <argp_parse@@Base+0x10b8>
   18100:	bl	11400 <fprintf@plt>
   18104:	b	1808c <argp_parse@@Base+0xe1c>
   18108:	ldr	r2, [r5]
   1810c:	ldr	r1, [pc, #536]	; 1832c <argp_parse@@Base+0x10bc>
   18110:	mov	r0, r4
   18114:	bl	11400 <fprintf@plt>
   18118:	add	sp, sp, #32
   1811c:	pop	{r4, r5, r6, pc}
   18120:	ldr	r3, [r5, #4]
   18124:	ldr	r2, [r5]
   18128:	ldr	r1, [pc, #512]	; 18330 <argp_parse@@Base+0x10c0>
   1812c:	mov	r0, r4
   18130:	bl	11400 <fprintf@plt>
   18134:	b	18118 <argp_parse@@Base+0xea8>
   18138:	ldr	r3, [r5, #4]
   1813c:	ldr	r2, [r5]
   18140:	ldr	r1, [r5, #8]
   18144:	str	r1, [sp]
   18148:	ldr	r1, [pc, #484]	; 18334 <argp_parse@@Base+0x10c4>
   1814c:	mov	r0, r4
   18150:	bl	11400 <fprintf@plt>
   18154:	b	18118 <argp_parse@@Base+0xea8>
   18158:	ldr	r3, [r5, #4]
   1815c:	ldr	r2, [r5]
   18160:	ldr	r1, [r5, #12]
   18164:	str	r1, [sp, #4]
   18168:	ldr	r1, [r5, #8]
   1816c:	str	r1, [sp]
   18170:	ldr	r1, [pc, #448]	; 18338 <argp_parse@@Base+0x10c8>
   18174:	mov	r0, r4
   18178:	bl	11400 <fprintf@plt>
   1817c:	b	18118 <argp_parse@@Base+0xea8>
   18180:	ldr	r3, [r5, #4]
   18184:	ldr	r2, [r5]
   18188:	ldr	r1, [r5, #16]
   1818c:	str	r1, [sp, #8]
   18190:	ldr	r1, [r5, #12]
   18194:	str	r1, [sp, #4]
   18198:	ldr	r1, [r5, #8]
   1819c:	str	r1, [sp]
   181a0:	ldr	r1, [pc, #404]	; 1833c <argp_parse@@Base+0x10cc>
   181a4:	mov	r0, r4
   181a8:	bl	11400 <fprintf@plt>
   181ac:	b	18118 <argp_parse@@Base+0xea8>
   181b0:	ldr	r3, [r5, #4]
   181b4:	ldr	r2, [r5]
   181b8:	ldr	r1, [r5, #20]
   181bc:	str	r1, [sp, #12]
   181c0:	ldr	r1, [r5, #16]
   181c4:	str	r1, [sp, #8]
   181c8:	ldr	r1, [r5, #12]
   181cc:	str	r1, [sp, #4]
   181d0:	ldr	r1, [r5, #8]
   181d4:	str	r1, [sp]
   181d8:	ldr	r1, [pc, #352]	; 18340 <argp_parse@@Base+0x10d0>
   181dc:	mov	r0, r4
   181e0:	bl	11400 <fprintf@plt>
   181e4:	b	18118 <argp_parse@@Base+0xea8>
   181e8:	ldr	r3, [r5, #4]
   181ec:	ldr	r2, [r5]
   181f0:	ldr	r1, [r5, #24]
   181f4:	str	r1, [sp, #16]
   181f8:	ldr	r1, [r5, #20]
   181fc:	str	r1, [sp, #12]
   18200:	ldr	r1, [r5, #16]
   18204:	str	r1, [sp, #8]
   18208:	ldr	r1, [r5, #12]
   1820c:	str	r1, [sp, #4]
   18210:	ldr	r1, [r5, #8]
   18214:	str	r1, [sp]
   18218:	ldr	r1, [pc, #292]	; 18344 <argp_parse@@Base+0x10d4>
   1821c:	mov	r0, r4
   18220:	bl	11400 <fprintf@plt>
   18224:	b	18118 <argp_parse@@Base+0xea8>
   18228:	ldr	r3, [r5, #4]
   1822c:	ldr	r2, [r5]
   18230:	ldr	r1, [r5, #28]
   18234:	str	r1, [sp, #20]
   18238:	ldr	r1, [r5, #24]
   1823c:	str	r1, [sp, #16]
   18240:	ldr	r1, [r5, #20]
   18244:	str	r1, [sp, #12]
   18248:	ldr	r1, [r5, #16]
   1824c:	str	r1, [sp, #8]
   18250:	ldr	r1, [r5, #12]
   18254:	str	r1, [sp, #4]
   18258:	ldr	r1, [r5, #8]
   1825c:	str	r1, [sp]
   18260:	ldr	r1, [pc, #224]	; 18348 <argp_parse@@Base+0x10d8>
   18264:	mov	r0, r4
   18268:	bl	11400 <fprintf@plt>
   1826c:	b	18118 <argp_parse@@Base+0xea8>
   18270:	ldr	r3, [r5, #4]
   18274:	ldr	r2, [r5]
   18278:	ldr	r1, [r5, #32]
   1827c:	str	r1, [sp, #24]
   18280:	ldr	r1, [r5, #28]
   18284:	str	r1, [sp, #20]
   18288:	ldr	r1, [r5, #24]
   1828c:	str	r1, [sp, #16]
   18290:	ldr	r1, [r5, #20]
   18294:	str	r1, [sp, #12]
   18298:	ldr	r1, [r5, #16]
   1829c:	str	r1, [sp, #8]
   182a0:	ldr	r1, [r5, #12]
   182a4:	str	r1, [sp, #4]
   182a8:	ldr	r1, [r5, #8]
   182ac:	str	r1, [sp]
   182b0:	ldr	r1, [pc, #148]	; 1834c <argp_parse@@Base+0x10dc>
   182b4:	mov	r0, r4
   182b8:	bl	11400 <fprintf@plt>
   182bc:	b	18118 <argp_parse@@Base+0xea8>
   182c0:	ldr	r3, [r5, #4]
   182c4:	ldr	r2, [r5]
   182c8:	ldr	r1, [r5, #32]
   182cc:	str	r1, [sp, #24]
   182d0:	ldr	r1, [r5, #28]
   182d4:	str	r1, [sp, #20]
   182d8:	ldr	r1, [r5, #24]
   182dc:	str	r1, [sp, #16]
   182e0:	ldr	r1, [r5, #20]
   182e4:	str	r1, [sp, #12]
   182e8:	ldr	r1, [r5, #16]
   182ec:	str	r1, [sp, #8]
   182f0:	ldr	r1, [r5, #12]
   182f4:	str	r1, [sp, #4]
   182f8:	ldr	r1, [r5, #8]
   182fc:	str	r1, [sp]
   18300:	ldr	r1, [pc, #72]	; 18350 <argp_parse@@Base+0x10e0>
   18304:	mov	r0, r4
   18308:	bl	11400 <fprintf@plt>
   1830c:	b	18118 <argp_parse@@Base+0xea8>
   18310:	andeq	fp, r1, r8, lsl #1
   18314:	andeq	r0, r0, r6, ror #15
   18318:	muleq	r1, ip, r0
   1831c:	muleq	r1, ip, r3
   18320:	andeq	fp, r1, r0, lsr #1
   18324:	andeq	fp, r1, r4, asr #1
   18328:	muleq	r1, r4, r0
   1832c:	andeq	fp, r1, r0, ror r1
   18330:	andeq	fp, r1, r0, lsl #3
   18334:	muleq	r1, r8, r1
   18338:			; <UNDEFINED> instruction: 0x0001b1b4
   1833c:	ldrdeq	fp, [r1], -r4
   18340:	strdeq	fp, [r1], -r8
   18344:	andeq	fp, r1, r0, lsr #4
   18348:	andeq	fp, r1, ip, asr #4
   1834c:	andeq	fp, r1, ip, ror r2
   18350:			; <UNDEFINED> instruction: 0x0001b2b0
   18354:	push	{r4, r5, lr}
   18358:	sub	sp, sp, #12
   1835c:	ldr	r5, [sp, #24]
   18360:	ldr	ip, [r5]
   18364:	cmp	ip, #0
   18368:	beq	18398 <argp_parse@@Base+0x1128>
   1836c:	mov	lr, r5
   18370:	mov	ip, #0
   18374:	add	ip, ip, #1
   18378:	ldr	r4, [lr, #4]!
   1837c:	cmp	r4, #0
   18380:	bne	18374 <argp_parse@@Base+0x1104>
   18384:	str	ip, [sp, #4]
   18388:	str	r5, [sp]
   1838c:	bl	1805c <argp_parse@@Base+0xdec>
   18390:	add	sp, sp, #12
   18394:	pop	{r4, r5, pc}
   18398:	mov	ip, #0
   1839c:	b	18384 <argp_parse@@Base+0x1114>
   183a0:	push	{r4, r5, lr}
   183a4:	sub	sp, sp, #52	; 0x34
   183a8:	ldr	r4, [sp, #64]	; 0x40
   183ac:	sub	r4, r4, #4
   183b0:	add	r5, sp, #4
   183b4:	mov	ip, #0
   183b8:	ldr	lr, [r4, #4]!
   183bc:	str	lr, [r5, #4]!
   183c0:	cmp	lr, #0
   183c4:	beq	183d4 <argp_parse@@Base+0x1164>
   183c8:	add	ip, ip, #1
   183cc:	cmp	ip, #10
   183d0:	bne	183b8 <argp_parse@@Base+0x1148>
   183d4:	str	ip, [sp, #4]
   183d8:	add	ip, sp, #8
   183dc:	str	ip, [sp]
   183e0:	bl	1805c <argp_parse@@Base+0xdec>
   183e4:	add	sp, sp, #52	; 0x34
   183e8:	pop	{r4, r5, pc}
   183ec:	push	{r3}		; (str r3, [sp, #-4]!)
   183f0:	push	{lr}		; (str lr, [sp, #-4]!)
   183f4:	sub	sp, sp, #16
   183f8:	add	r3, sp, #24
   183fc:	str	r3, [sp, #12]
   18400:	str	r3, [sp]
   18404:	ldr	r3, [sp, #20]
   18408:	bl	183a0 <argp_parse@@Base+0x1130>
   1840c:	add	sp, sp, #16
   18410:	pop	{lr}		; (ldr lr, [sp], #4)
   18414:	add	sp, sp, #4
   18418:	bx	lr
   1841c:	push	{r4, lr}
   18420:	ldr	r3, [pc, #52]	; 1845c <argp_parse@@Base+0x11ec>
   18424:	ldr	r1, [r3]
   18428:	mov	r0, #10
   1842c:	bl	114cc <fputc@plt>
   18430:	ldr	r1, [pc, #40]	; 18460 <argp_parse@@Base+0x11f0>
   18434:	ldr	r0, [pc, #40]	; 18464 <argp_parse@@Base+0x11f4>
   18438:	bl	11220 <printf@plt>
   1843c:	ldr	r2, [pc, #36]	; 18468 <argp_parse@@Base+0x11f8>
   18440:	ldr	r1, [pc, #36]	; 1846c <argp_parse@@Base+0x11fc>
   18444:	ldr	r0, [pc, #36]	; 18470 <argp_parse@@Base+0x1200>
   18448:	bl	11220 <printf@plt>
   1844c:	ldr	r1, [pc, #32]	; 18474 <argp_parse@@Base+0x1204>
   18450:	ldr	r0, [pc, #32]	; 18478 <argp_parse@@Base+0x1208>
   18454:	bl	11220 <printf@plt>
   18458:	pop	{r4, pc}
   1845c:	andeq	ip, r2, ip, asr r4
   18460:	andeq	fp, r1, ip, ror #5
   18464:	andeq	fp, r1, r4, lsl #6
   18468:	andeq	fp, r1, r8, lsl r3
   1846c:	andeq	fp, r1, r4, lsr r0
   18470:	andeq	fp, r1, r0, asr #6
   18474:	andeq	fp, r1, r4, asr r3
   18478:	andeq	fp, r1, r4, ror r3
   1847c:	push	{r4, lr}
   18480:	bl	18a9c <argp_parse@@Base+0x182c>
   18484:	cmp	r0, #0
   18488:	popne	{r4, pc}
   1848c:	bl	18a20 <argp_parse@@Base+0x17b0>
   18490:	push	{r4, lr}
   18494:	bl	18a9c <argp_parse@@Base+0x182c>
   18498:	cmp	r0, #0
   1849c:	popne	{r4, pc}
   184a0:	bl	18a20 <argp_parse@@Base+0x17b0>
   184a4:	push	{r4, lr}
   184a8:	bl	1847c <argp_parse@@Base+0x120c>
   184ac:	pop	{r4, pc}
   184b0:	push	{r4, r5, r6, lr}
   184b4:	mov	r5, r0
   184b8:	mov	r4, r1
   184bc:	bl	18acc <argp_parse@@Base+0x185c>
   184c0:	cmp	r0, #0
   184c4:	popne	{r4, r5, r6, pc}
   184c8:	adds	r4, r4, #0
   184cc:	movne	r4, #1
   184d0:	cmp	r5, #0
   184d4:	orreq	r4, r4, #1
   184d8:	cmp	r4, #0
   184dc:	popeq	{r4, r5, r6, pc}
   184e0:	bl	18a20 <argp_parse@@Base+0x17b0>
   184e4:	push	{r4, lr}
   184e8:	cmp	r1, #0
   184ec:	orreq	r1, r1, #1
   184f0:	bl	18acc <argp_parse@@Base+0x185c>
   184f4:	cmp	r0, #0
   184f8:	popne	{r4, pc}
   184fc:	bl	18a20 <argp_parse@@Base+0x17b0>
   18500:	push	{r4, r5, r6, lr}
   18504:	mov	r6, r0
   18508:	mov	r5, r1
   1850c:	mov	r4, r2
   18510:	bl	19e78 <argp_parse@@Base+0x2c08>
   18514:	cmp	r0, #0
   18518:	popne	{r4, r5, r6, pc}
   1851c:	cmp	r6, #0
   18520:	beq	18530 <argp_parse@@Base+0x12c0>
   18524:	cmp	r5, #0
   18528:	cmpne	r4, #0
   1852c:	popeq	{r4, r5, r6, pc}
   18530:	bl	18a20 <argp_parse@@Base+0x17b0>
   18534:	push	{r4, lr}
   18538:	bl	18500 <argp_parse@@Base+0x1290>
   1853c:	pop	{r4, pc}
   18540:	push	{r4, lr}
   18544:	mov	ip, r1
   18548:	mov	r3, r2
   1854c:	cmp	r2, #0
   18550:	cmpne	r1, #0
   18554:	moveq	r3, #1
   18558:	moveq	ip, r3
   1855c:	mov	r2, r3
   18560:	mov	r1, ip
   18564:	bl	19e78 <argp_parse@@Base+0x2c08>
   18568:	cmp	r0, #0
   1856c:	popne	{r4, pc}
   18570:	bl	18a20 <argp_parse@@Base+0x17b0>
   18574:	push	{r4, lr}
   18578:	mov	r2, r1
   1857c:	mov	r1, r0
   18580:	mov	r0, #0
   18584:	bl	18500 <argp_parse@@Base+0x1290>
   18588:	pop	{r4, pc}
   1858c:	push	{r4, lr}
   18590:	mov	r2, r1
   18594:	mov	r1, r0
   18598:	mov	r0, #0
   1859c:	bl	18540 <argp_parse@@Base+0x12d0>
   185a0:	pop	{r4, pc}
   185a4:	push	{r4, r5, r6, r7, r8, lr}
   185a8:	mov	r5, r1
   185ac:	mov	r6, r2
   185b0:	ldr	r4, [r1]
   185b4:	subs	r7, r0, #0
   185b8:	beq	185d4 <argp_parse@@Base+0x1364>
   185bc:	lsr	r2, r4, #1
   185c0:	add	r3, r2, #1
   185c4:	mvn	r3, r3
   185c8:	cmp	r4, r3
   185cc:	bls	185f8 <argp_parse@@Base+0x1388>
   185d0:	bl	18a20 <argp_parse@@Base+0x17b0>
   185d4:	cmp	r4, #0
   185d8:	bne	18600 <argp_parse@@Base+0x1390>
   185dc:	mov	r1, r2
   185e0:	mov	r0, #64	; 0x40
   185e4:	bl	19ec4 <argp_parse@@Base+0x2c54>
   185e8:	cmp	r0, #0
   185ec:	movne	r4, r0
   185f0:	addeq	r4, r0, #1
   185f4:	b	18600 <argp_parse@@Base+0x1390>
   185f8:	add	r4, r4, #1
   185fc:	add	r4, r4, r2
   18600:	mov	r2, r6
   18604:	mov	r1, r4
   18608:	mov	r0, r7
   1860c:	bl	18500 <argp_parse@@Base+0x1290>
   18610:	str	r4, [r5]
   18614:	pop	{r4, r5, r6, r7, r8, pc}
   18618:	push	{r4, lr}
   1861c:	mov	r2, #1
   18620:	bl	185a4 <argp_parse@@Base+0x1334>
   18624:	pop	{r4, pc}
   18628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1862c:	sub	sp, sp, #12
   18630:	mov	fp, r0
   18634:	mov	sl, r1
   18638:	mov	r9, r2
   1863c:	mov	r7, r3
   18640:	ldr	r6, [sp, #48]	; 0x30
   18644:	ldr	r5, [r1]
   18648:	asrs	r4, r5, #1
   1864c:	bmi	187a8 <argp_parse@@Base+0x1538>
   18650:	cmp	r5, #0
   18654:	blt	187bc <argp_parse@@Base+0x154c>
   18658:	mvn	r3, #-2147483648	; 0x80000000
   1865c:	sub	r3, r3, r4
   18660:	cmp	r5, r3
   18664:	movle	r3, #0
   18668:	movgt	r3, #1
   1866c:	cmp	r3, #0
   18670:	addeq	r4, r4, r5
   18674:	mvnne	r4, #-2147483648	; 0x80000000
   18678:	mvn	r8, r7
   1867c:	lsr	r8, r8, #31
   18680:	cmp	r7, r4
   18684:	movge	r3, #0
   18688:	andlt	r3, r8, #1
   1868c:	cmp	r3, #0
   18690:	movne	r4, r7
   18694:	cmp	r6, #0
   18698:	blt	187d0 <argp_parse@@Base+0x1560>
   1869c:	cmp	r6, #0
   186a0:	beq	1887c <argp_parse@@Base+0x160c>
   186a4:	cmp	r4, #0
   186a8:	blt	1882c <argp_parse@@Base+0x15bc>
   186ac:	mov	r1, r6
   186b0:	mvn	r0, #-2147483648	; 0x80000000
   186b4:	bl	1a0d0 <argp_parse@@Base+0x2e60>
   186b8:	cmp	r0, r4
   186bc:	movge	r0, #0
   186c0:	movlt	r0, #1
   186c4:	cmp	r0, #0
   186c8:	mvnne	r3, #-2147483648	; 0x80000000
   186cc:	strne	r3, [sp, #4]
   186d0:	beq	18864 <argp_parse@@Base+0x15f4>
   186d4:	mov	r1, r6
   186d8:	ldr	r0, [sp, #4]
   186dc:	bl	1a0d0 <argp_parse@@Base+0x2e60>
   186e0:	mov	r4, r0
   186e4:	mov	r1, r6
   186e8:	ldr	r0, [sp, #4]
   186ec:	bl	1a2f0 <argp_parse@@Base+0x3080>
   186f0:	ldr	r3, [sp, #4]
   186f4:	sub	r1, r3, r1
   186f8:	cmp	fp, #0
   186fc:	moveq	r3, #0
   18700:	streq	r3, [sl]
   18704:	sub	r3, r4, r5
   18708:	cmp	r3, r9
   1870c:	bge	18794 <argp_parse@@Base+0x1524>
   18710:	cmp	r9, #0
   18714:	blt	18888 <argp_parse@@Base+0x1618>
   18718:	cmp	r5, #0
   1871c:	blt	1889c <argp_parse@@Base+0x162c>
   18720:	mvn	r3, #-2147483648	; 0x80000000
   18724:	sub	r3, r3, r9
   18728:	cmp	r5, r3
   1872c:	movle	r3, #0
   18730:	movgt	r3, #1
   18734:	cmp	r3, #0
   18738:	bne	18944 <argp_parse@@Base+0x16d4>
   1873c:	add	r5, r5, r9
   18740:	mov	r4, r5
   18744:	cmp	r7, r5
   18748:	movge	r7, #0
   1874c:	andlt	r7, r8, #1
   18750:	cmp	r7, #0
   18754:	bne	18944 <argp_parse@@Base+0x16d4>
   18758:	cmp	r6, #0
   1875c:	blt	188b0 <argp_parse@@Base+0x1640>
   18760:	cmp	r6, #0
   18764:	beq	18790 <argp_parse@@Base+0x1520>
   18768:	cmp	r5, #0
   1876c:	blt	1890c <argp_parse@@Base+0x169c>
   18770:	mov	r1, r6
   18774:	mvn	r0, #-2147483648	; 0x80000000
   18778:	bl	1a0d0 <argp_parse@@Base+0x2e60>
   1877c:	cmp	r5, r0
   18780:	movle	r0, #0
   18784:	movgt	r0, #1
   18788:	cmp	r0, #0
   1878c:	bne	18944 <argp_parse@@Base+0x16d4>
   18790:	mul	r1, r5, r6
   18794:	mov	r0, fp
   18798:	bl	184b0 <argp_parse@@Base+0x1240>
   1879c:	str	r4, [sl]
   187a0:	add	sp, sp, #12
   187a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187a8:	rsb	r3, r4, #-2147483648	; 0x80000000
   187ac:	cmp	r5, r3
   187b0:	movge	r3, #0
   187b4:	movlt	r3, #1
   187b8:	b	1866c <argp_parse@@Base+0x13fc>
   187bc:	rsb	r3, r5, #-2147483648	; 0x80000000
   187c0:	cmp	r4, r3
   187c4:	movge	r3, #0
   187c8:	movlt	r3, #1
   187cc:	b	1866c <argp_parse@@Base+0x13fc>
   187d0:	cmp	r4, #0
   187d4:	blt	187fc <argp_parse@@Base+0x158c>
   187d8:	cmn	r6, #1
   187dc:	beq	18818 <argp_parse@@Base+0x15a8>
   187e0:	mov	r1, r6
   187e4:	mov	r0, #-2147483648	; 0x80000000
   187e8:	bl	1a0d0 <argp_parse@@Base+0x2e60>
   187ec:	cmp	r0, r4
   187f0:	movge	r0, #0
   187f4:	movlt	r0, #1
   187f8:	b	186c4 <argp_parse@@Base+0x1454>
   187fc:	mov	r1, r6
   18800:	mvn	r0, #-2147483648	; 0x80000000
   18804:	bl	1a0d0 <argp_parse@@Base+0x2e60>
   18808:	cmp	r0, r4
   1880c:	movle	r0, #0
   18810:	movgt	r0, #1
   18814:	b	186c4 <argp_parse@@Base+0x1454>
   18818:	add	r0, r4, #-2147483648	; 0x80000000
   1881c:	cmp	r0, #0
   18820:	movle	r0, #0
   18824:	movgt	r0, #1
   18828:	b	186c4 <argp_parse@@Base+0x1454>
   1882c:	cmn	r4, #1
   18830:	beq	18850 <argp_parse@@Base+0x15e0>
   18834:	mov	r1, r4
   18838:	mov	r0, #-2147483648	; 0x80000000
   1883c:	bl	1a0d0 <argp_parse@@Base+0x2e60>
   18840:	cmp	r6, r0
   18844:	movle	r0, #0
   18848:	movgt	r0, #1
   1884c:	b	186c4 <argp_parse@@Base+0x1454>
   18850:	add	r0, r6, #-2147483648	; 0x80000000
   18854:	cmp	r0, #0
   18858:	movle	r0, #0
   1885c:	movgt	r0, #1
   18860:	b	186c4 <argp_parse@@Base+0x1454>
   18864:	mul	r1, r6, r4
   18868:	cmp	r1, #63	; 0x3f
   1886c:	movle	r3, #64	; 0x40
   18870:	strle	r3, [sp, #4]
   18874:	bgt	186f8 <argp_parse@@Base+0x1488>
   18878:	b	186d4 <argp_parse@@Base+0x1464>
   1887c:	mov	r3, #64	; 0x40
   18880:	str	r3, [sp, #4]
   18884:	b	186d4 <argp_parse@@Base+0x1464>
   18888:	rsb	r3, r9, #-2147483648	; 0x80000000
   1888c:	cmp	r5, r3
   18890:	movge	r3, #0
   18894:	movlt	r3, #1
   18898:	b	18734 <argp_parse@@Base+0x14c4>
   1889c:	rsb	r3, r5, #-2147483648	; 0x80000000
   188a0:	cmp	r9, r3
   188a4:	movge	r3, #0
   188a8:	movlt	r3, #1
   188ac:	b	18734 <argp_parse@@Base+0x14c4>
   188b0:	cmp	r5, #0
   188b4:	blt	188dc <argp_parse@@Base+0x166c>
   188b8:	cmn	r6, #1
   188bc:	beq	188f8 <argp_parse@@Base+0x1688>
   188c0:	mov	r1, r6
   188c4:	mov	r0, #-2147483648	; 0x80000000
   188c8:	bl	1a0d0 <argp_parse@@Base+0x2e60>
   188cc:	cmp	r5, r0
   188d0:	movle	r0, #0
   188d4:	movgt	r0, #1
   188d8:	b	18788 <argp_parse@@Base+0x1518>
   188dc:	mov	r1, r6
   188e0:	mvn	r0, #-2147483648	; 0x80000000
   188e4:	bl	1a0d0 <argp_parse@@Base+0x2e60>
   188e8:	cmp	r5, r0
   188ec:	movge	r0, #0
   188f0:	movlt	r0, #1
   188f4:	b	18788 <argp_parse@@Base+0x1518>
   188f8:	add	r0, r5, #-2147483648	; 0x80000000
   188fc:	cmp	r0, #0
   18900:	movle	r0, #0
   18904:	movgt	r0, #1
   18908:	b	18788 <argp_parse@@Base+0x1518>
   1890c:	cmn	r5, #1
   18910:	beq	18930 <argp_parse@@Base+0x16c0>
   18914:	mov	r1, r5
   18918:	mov	r0, #-2147483648	; 0x80000000
   1891c:	bl	1a0d0 <argp_parse@@Base+0x2e60>
   18920:	cmp	r6, r0
   18924:	movle	r0, #0
   18928:	movgt	r0, #1
   1892c:	b	18788 <argp_parse@@Base+0x1518>
   18930:	add	r0, r6, #-2147483648	; 0x80000000
   18934:	cmp	r0, #0
   18938:	movle	r0, #0
   1893c:	movgt	r0, #1
   18940:	b	18788 <argp_parse@@Base+0x1518>
   18944:	bl	18a20 <argp_parse@@Base+0x17b0>
   18948:	push	{r4, lr}
   1894c:	bl	18a4c <argp_parse@@Base+0x17dc>
   18950:	cmp	r0, #0
   18954:	popne	{r4, pc}
   18958:	bl	18a20 <argp_parse@@Base+0x17b0>
   1895c:	push	{r4, lr}
   18960:	mov	r1, #1
   18964:	bl	18948 <argp_parse@@Base+0x16d8>
   18968:	pop	{r4, pc}
   1896c:	push	{r4, lr}
   18970:	bl	18a4c <argp_parse@@Base+0x17dc>
   18974:	cmp	r0, #0
   18978:	popne	{r4, pc}
   1897c:	bl	18a20 <argp_parse@@Base+0x17b0>
   18980:	push	{r4, lr}
   18984:	mov	r1, #1
   18988:	bl	1896c <argp_parse@@Base+0x16fc>
   1898c:	pop	{r4, pc}
   18990:	push	{r4, r5, r6, lr}
   18994:	mov	r5, r0
   18998:	mov	r4, r1
   1899c:	mov	r0, r1
   189a0:	bl	1847c <argp_parse@@Base+0x120c>
   189a4:	mov	r2, r4
   189a8:	mov	r1, r5
   189ac:	bl	11298 <memcpy@plt>
   189b0:	pop	{r4, r5, r6, pc}
   189b4:	push	{r4, r5, r6, lr}
   189b8:	mov	r5, r0
   189bc:	mov	r4, r1
   189c0:	mov	r0, r1
   189c4:	bl	18490 <argp_parse@@Base+0x1220>
   189c8:	mov	r2, r4
   189cc:	mov	r1, r5
   189d0:	bl	11298 <memcpy@plt>
   189d4:	pop	{r4, r5, r6, pc}
   189d8:	push	{r4, r5, r6, lr}
   189dc:	mov	r5, r0
   189e0:	mov	r4, r1
   189e4:	add	r0, r1, #1
   189e8:	bl	18490 <argp_parse@@Base+0x1220>
   189ec:	mov	r2, #0
   189f0:	strb	r2, [r0, r4]
   189f4:	mov	r2, r4
   189f8:	mov	r1, r5
   189fc:	bl	11298 <memcpy@plt>
   18a00:	pop	{r4, r5, r6, pc}
   18a04:	push	{r4, lr}
   18a08:	mov	r4, r0
   18a0c:	bl	113e8 <strlen@plt>
   18a10:	add	r1, r0, #1
   18a14:	mov	r0, r4
   18a18:	bl	18990 <argp_parse@@Base+0x1720>
   18a1c:	pop	{r4, pc}
   18a20:	push	{r4, lr}
   18a24:	ldr	r3, [pc, #20]	; 18a40 <argp_parse@@Base+0x17d0>
   18a28:	ldr	r0, [r3]
   18a2c:	ldr	r3, [pc, #16]	; 18a44 <argp_parse@@Base+0x17d4>
   18a30:	ldr	r2, [pc, #16]	; 18a48 <argp_parse@@Base+0x17d8>
   18a34:	mov	r1, #0
   18a38:	bl	1134c <error@plt>
   18a3c:	bl	11544 <abort@plt>
   18a40:	andeq	ip, r2, r8, lsr r4
   18a44:	andeq	fp, r1, ip, asr #7
   18a48:	andeq	sl, r1, r0, ror #9
   18a4c:	push	{r4, lr}
   18a50:	mov	r2, r0
   18a54:	mov	r3, r1
   18a58:	cmp	r1, #0
   18a5c:	cmpne	r0, #0
   18a60:	moveq	r3, #1
   18a64:	moveq	r2, r3
   18a68:	umull	r0, r1, r2, r3
   18a6c:	cmp	r0, #0
   18a70:	cmpge	r1, #0
   18a74:	bne	18a88 <argp_parse@@Base+0x1818>
   18a78:	mov	r1, r3
   18a7c:	mov	r0, r2
   18a80:	bl	111e4 <calloc@plt>
   18a84:	pop	{r4, pc}
   18a88:	bl	1140c <__errno_location@plt>
   18a8c:	mov	r3, #12
   18a90:	str	r3, [r0]
   18a94:	mov	r0, #0
   18a98:	pop	{r4, pc}
   18a9c:	push	{r4, lr}
   18aa0:	cmp	r0, #0
   18aa4:	moveq	r0, #1
   18aa8:	cmp	r0, #0
   18aac:	blt	18ab8 <argp_parse@@Base+0x1848>
   18ab0:	bl	1137c <malloc@plt>
   18ab4:	pop	{r4, pc}
   18ab8:	bl	1140c <__errno_location@plt>
   18abc:	mov	r3, #12
   18ac0:	str	r3, [r0]
   18ac4:	mov	r0, #0
   18ac8:	pop	{r4, pc}
   18acc:	push	{r4, lr}
   18ad0:	cmp	r0, #0
   18ad4:	beq	18af0 <argp_parse@@Base+0x1880>
   18ad8:	cmp	r1, #0
   18adc:	beq	18afc <argp_parse@@Base+0x188c>
   18ae0:	cmp	r1, #0
   18ae4:	blt	18b08 <argp_parse@@Base+0x1898>
   18ae8:	bl	112e0 <realloc@plt>
   18aec:	pop	{r4, pc}
   18af0:	mov	r0, r1
   18af4:	bl	18a9c <argp_parse@@Base+0x182c>
   18af8:	pop	{r4, pc}
   18afc:	bl	17e64 <argp_parse@@Base+0xbf4>
   18b00:	mov	r0, #0
   18b04:	pop	{r4, pc}
   18b08:	bl	1140c <__errno_location@plt>
   18b0c:	mov	r3, #12
   18b10:	str	r3, [r0]
   18b14:	mov	r0, #0
   18b18:	pop	{r4, pc}
   18b1c:	push	{r4, r5, r6, r7, r8, lr}
   18b20:	mov	r8, r0
   18b24:	mov	r7, r1
   18b28:	mov	r6, r2
   18b2c:	mov	r5, r3
   18b30:	mov	r0, #36	; 0x24
   18b34:	bl	18a9c <argp_parse@@Base+0x182c>
   18b38:	subs	r4, r0, #0
   18b3c:	beq	18b7c <argp_parse@@Base+0x190c>
   18b40:	str	r8, [r4]
   18b44:	str	r7, [r4, #4]
   18b48:	str	r6, [r4, #8]
   18b4c:	str	r5, [r4, #12]
   18b50:	mov	r3, #0
   18b54:	str	r3, [r4, #20]
   18b58:	str	r3, [r4, #16]
   18b5c:	mov	r0, #200	; 0xc8
   18b60:	bl	18a9c <argp_parse@@Base+0x182c>
   18b64:	str	r0, [r4, #24]
   18b68:	cmp	r0, #0
   18b6c:	strne	r0, [r4, #28]
   18b70:	addne	r0, r0, #200	; 0xc8
   18b74:	strne	r0, [r4, #32]
   18b78:	beq	18b84 <argp_parse@@Base+0x1914>
   18b7c:	mov	r0, r4
   18b80:	pop	{r4, r5, r6, r7, r8, pc}
   18b84:	mov	r0, r4
   18b88:	bl	17e64 <argp_parse@@Base+0xbf4>
   18b8c:	mov	r4, #0
   18b90:	b	18b7c <argp_parse@@Base+0x190c>
   18b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b98:	sub	sp, sp, #20
   18b9c:	mov	r4, r0
   18ba0:	ldr	r2, [r0, #24]
   18ba4:	ldr	r3, [r0, #16]
   18ba8:	add	r9, r2, r3
   18bac:	mov	sl, #32
   18bb0:	b	18c5c <argp_parse@@Base+0x19ec>
   18bb4:	add	r5, r5, #1
   18bb8:	cmp	r6, r5
   18bbc:	beq	18bec <argp_parse@@Base+0x197c>
   18bc0:	ldr	r0, [r4]
   18bc4:	ldr	r3, [r0, #20]
   18bc8:	ldr	r2, [r0, #24]
   18bcc:	cmp	r3, r2
   18bd0:	addcc	r2, r3, #1
   18bd4:	strcc	r2, [r0, #20]
   18bd8:	strbcc	sl, [r3]
   18bdc:	bcc	18bb4 <argp_parse@@Base+0x1944>
   18be0:	mov	r1, sl
   18be4:	bl	1149c <__overflow@plt>
   18be8:	b	18bb4 <argp_parse@@Base+0x1944>
   18bec:	str	r6, [r4, #20]
   18bf0:	ldr	fp, [r4, #28]
   18bf4:	str	fp, [sp, #8]
   18bf8:	str	r9, [sp, #4]
   18bfc:	sub	r3, fp, r9
   18c00:	str	r3, [sp]
   18c04:	mov	r2, r3
   18c08:	mov	r1, #10
   18c0c:	mov	r0, r9
   18c10:	bl	1146c <memchr@plt>
   18c14:	mov	r7, r0
   18c18:	ldr	r3, [r4, #20]
   18c1c:	cmp	r3, #0
   18c20:	movlt	r3, #0
   18c24:	strlt	r3, [r4, #20]
   18c28:	cmp	r7, #0
   18c2c:	beq	18ccc <argp_parse@@Base+0x1a5c>
   18c30:	ldr	r0, [r4, #20]
   18c34:	mov	r5, r7
   18c38:	ldr	r8, [r4, #8]
   18c3c:	ldr	r3, [sp, #4]
   18c40:	sub	r3, r7, r3
   18c44:	add	r3, r3, r0
   18c48:	cmp	r3, r8
   18c4c:	bge	18d1c <argp_parse@@Base+0x1aac>
   18c50:	mov	r3, #0
   18c54:	str	r3, [r4, #20]
   18c58:	add	r9, r7, #1
   18c5c:	ldr	fp, [r4, #28]
   18c60:	cmp	r9, fp
   18c64:	bcs	18d04 <argp_parse@@Base+0x1a94>
   18c68:	ldr	r3, [r4, #20]
   18c6c:	cmp	r3, #0
   18c70:	bne	18bf0 <argp_parse@@Base+0x1980>
   18c74:	ldr	r6, [r4, #4]
   18c78:	cmp	r6, #0
   18c7c:	beq	190c8 <argp_parse@@Base+0x1e58>
   18c80:	add	r3, fp, r6
   18c84:	ldr	r2, [r4, #32]
   18c88:	cmp	r2, r3
   18c8c:	movls	r5, #0
   18c90:	bls	18bc0 <argp_parse@@Base+0x1950>
   18c94:	add	r5, r9, r6
   18c98:	sub	r2, fp, r9
   18c9c:	mov	r1, r9
   18ca0:	mov	r0, r5
   18ca4:	bl	11250 <memmove@plt>
   18ca8:	ldr	r3, [r4, #28]
   18cac:	add	r3, r3, r6
   18cb0:	str	r3, [r4, #28]
   18cb4:	mov	r2, r6
   18cb8:	mov	r1, sl
   18cbc:	mov	r0, r9
   18cc0:	bl	1143c <memset@plt>
   18cc4:	mov	r9, r5
   18cc8:	b	18bec <argp_parse@@Base+0x197c>
   18ccc:	ldr	r3, [r4, #20]
   18cd0:	ldr	r2, [sp]
   18cd4:	add	r3, r2, r3
   18cd8:	ldr	r6, [r4, #8]
   18cdc:	cmp	r3, r6
   18ce0:	bcc	18d00 <argp_parse@@Base+0x1a90>
   18ce4:	sub	r6, r6, #1
   18ce8:	ldr	r3, [r4, #12]
   18cec:	str	r3, [sp, #12]
   18cf0:	cmp	r3, #0
   18cf4:	blt	18e10 <argp_parse@@Base+0x1ba0>
   18cf8:	mov	r7, fp
   18cfc:	b	18d30 <argp_parse@@Base+0x1ac0>
   18d00:	str	r3, [r4, #20]
   18d04:	ldr	r3, [r4, #28]
   18d08:	ldr	r2, [r4, #24]
   18d0c:	sub	r3, r3, r2
   18d10:	str	r3, [r4, #16]
   18d14:	add	sp, sp, #20
   18d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d1c:	sub	r6, r8, #1
   18d20:	ldr	r3, [r4, #12]
   18d24:	str	r3, [sp, #12]
   18d28:	cmp	r3, #0
   18d2c:	blt	18dc4 <argp_parse@@Base+0x1b54>
   18d30:	ldr	r5, [r4, #20]
   18d34:	rsb	r5, r5, #1
   18d38:	add	r5, r5, r6
   18d3c:	adds	r5, r9, r5
   18d40:	bcs	190f0 <argp_parse@@Base+0x1e80>
   18d44:	bl	113c4 <__ctype_b_loc@plt>
   18d48:	ldr	r0, [r0]
   18d4c:	mov	r3, r5
   18d50:	mov	r1, r3
   18d54:	sub	r3, r3, #1
   18d58:	ldrb	r2, [r1]
   18d5c:	lsl	r2, r2, #1
   18d60:	ldrh	r2, [r0, r2]
   18d64:	tst	r2, #1
   18d68:	bne	18e30 <argp_parse@@Base+0x1bc0>
   18d6c:	mov	r1, r3
   18d70:	cmp	r3, r9
   18d74:	bcs	18d50 <argp_parse@@Base+0x1ae0>
   18d78:	add	r6, r1, #1
   18d7c:	cmp	r6, r9
   18d80:	bhi	18e6c <argp_parse@@Base+0x1bfc>
   18d84:	cmp	r5, r7
   18d88:	bcs	18f1c <argp_parse@@Base+0x1cac>
   18d8c:	add	r6, r5, #1
   18d90:	mov	r8, r7
   18d94:	mov	r5, r6
   18d98:	cmp	r8, r6
   18d9c:	beq	18f1c <argp_parse@@Base+0x1cac>
   18da0:	bl	113c4 <__ctype_b_loc@plt>
   18da4:	add	r6, r6, #1
   18da8:	ldrb	r3, [r5]
   18dac:	ldr	r2, [r0]
   18db0:	lsl	r3, r3, #1
   18db4:	ldrh	r3, [r2, r3]
   18db8:	tst	r3, #1
   18dbc:	beq	18d94 <argp_parse@@Base+0x1b24>
   18dc0:	b	18f30 <argp_parse@@Base+0x1cc0>
   18dc4:	cmp	fp, r7
   18dc8:	bls	18e10 <argp_parse@@Base+0x1ba0>
   18dcc:	sub	r0, r6, r0
   18dd0:	ldr	r3, [sp, #8]
   18dd4:	sub	r2, r3, r7
   18dd8:	mov	r1, r7
   18ddc:	add	r0, r9, r0
   18de0:	bl	11250 <memmove@plt>
   18de4:	ldr	r3, [r4, #20]
   18de8:	sub	r6, r6, r3
   18dec:	add	r6, r9, r6
   18df0:	sub	r5, r6, r7
   18df4:	ldr	r3, [r4, #28]
   18df8:	sub	r5, r3, r5
   18dfc:	str	r5, [r4, #28]
   18e00:	mov	r3, #0
   18e04:	str	r3, [r4, #20]
   18e08:	add	r9, r9, r8
   18e0c:	b	18c5c <argp_parse@@Base+0x19ec>
   18e10:	ldr	r3, [r4, #20]
   18e14:	ldr	r2, [sp]
   18e18:	add	r3, r2, r3
   18e1c:	str	r3, [r4, #20]
   18e20:	sub	r3, r6, r3
   18e24:	add	r3, fp, r3
   18e28:	str	r3, [r4, #28]
   18e2c:	b	18d04 <argp_parse@@Base+0x1a94>
   18e30:	add	r6, r1, #1
   18e34:	cmp	r6, r9
   18e38:	bls	18d84 <argp_parse@@Base+0x1b14>
   18e3c:	cmp	r1, r9
   18e40:	bcc	18e6c <argp_parse@@Base+0x1bfc>
   18e44:	sub	ip, r9, #1
   18e48:	mov	r1, r3
   18e4c:	cmp	ip, r3
   18e50:	beq	18e6c <argp_parse@@Base+0x1bfc>
   18e54:	sub	r3, r3, #1
   18e58:	ldrb	r2, [r1]
   18e5c:	lsl	r2, r2, #1
   18e60:	ldrh	r2, [r0, r2]
   18e64:	tst	r2, #1
   18e68:	bne	18e48 <argp_parse@@Base+0x1bd8>
   18e6c:	add	r5, r1, #1
   18e70:	ldr	r3, [sp]
   18e74:	add	r3, r3, #1
   18e78:	add	r3, r9, r3
   18e7c:	cmp	r6, r3
   18e80:	beq	18f54 <argp_parse@@Base+0x1ce4>
   18e84:	add	r3, r5, #1
   18e88:	sub	r3, r6, r3
   18e8c:	ldr	r2, [sp, #12]
   18e90:	cmp	r3, r2
   18e94:	bge	18f6c <argp_parse@@Base+0x1cfc>
   18e98:	cmp	r6, fp
   18e9c:	bcs	18f6c <argp_parse@@Base+0x1cfc>
   18ea0:	ldr	r3, [r4, #32]
   18ea4:	ldr	r2, [sp, #8]
   18ea8:	sub	r3, r3, r2
   18eac:	ldr	r2, [sp, #12]
   18eb0:	add	r2, r2, #1
   18eb4:	cmp	r3, r2
   18eb8:	bgt	18fb4 <argp_parse@@Base+0x1d44>
   18ebc:	ldr	r0, [r4, #24]
   18ec0:	cmp	r5, r0
   18ec4:	bls	18ed8 <argp_parse@@Base+0x1c68>
   18ec8:	ldr	r3, [r4]
   18ecc:	sub	r2, r5, r0
   18ed0:	mov	r1, #1
   18ed4:	bl	112b0 <fwrite_unlocked@plt>
   18ed8:	ldr	r0, [r4]
   18edc:	ldr	r3, [r0, #20]
   18ee0:	ldr	r2, [r0, #24]
   18ee4:	cmp	r3, r2
   18ee8:	addcc	r2, r3, #1
   18eec:	strcc	r2, [r0, #20]
   18ef0:	movcc	r2, #10
   18ef4:	strbcc	r2, [r3]
   18ef8:	bcs	19000 <argp_parse@@Base+0x1d90>
   18efc:	ldr	r7, [r4, #24]
   18f00:	ldr	r3, [sp, #4]
   18f04:	sub	r3, r3, r7
   18f08:	ldr	r2, [sp]
   18f0c:	add	r3, r2, r3
   18f10:	str	r3, [sp]
   18f14:	mov	r9, r7
   18f18:	b	18f7c <argp_parse@@Base+0x1d0c>
   18f1c:	cmp	r5, r7
   18f20:	moveq	r3, #0
   18f24:	streq	r3, [r4, #20]
   18f28:	addeq	r9, r7, #1
   18f2c:	beq	18c5c <argp_parse@@Base+0x19ec>
   18f30:	bl	113c4 <__ctype_b_loc@plt>
   18f34:	ldr	r2, [r0]
   18f38:	mov	r6, r5
   18f3c:	ldrb	r3, [r6, #1]!
   18f40:	lsl	r3, r3, #1
   18f44:	ldrh	r3, [r2, r3]
   18f48:	tst	r3, #1
   18f4c:	bne	18f3c <argp_parse@@Base+0x1ccc>
   18f50:	b	18e70 <argp_parse@@Base+0x1c00>
   18f54:	ldr	r3, [r4, #32]
   18f58:	sub	r3, r3, r5
   18f5c:	ldr	r2, [sp, #12]
   18f60:	add	r2, r2, #1
   18f64:	cmp	r3, r2
   18f68:	blt	18e98 <argp_parse@@Base+0x1c28>
   18f6c:	mov	r3, #10
   18f70:	strb	r3, [r5]
   18f74:	mov	r7, r9
   18f78:	add	r9, r5, #1
   18f7c:	mov	r8, r6
   18f80:	ldr	r3, [r4, #12]
   18f84:	sub	r2, r6, r9
   18f88:	cmp	r2, r3
   18f8c:	bge	1901c <argp_parse@@Base+0x1dac>
   18f90:	ldr	r2, [sp]
   18f94:	add	r2, r2, #1
   18f98:	add	r2, r7, r2
   18f9c:	cmp	r6, r2
   18fa0:	beq	1900c <argp_parse@@Base+0x1d9c>
   18fa4:	cmp	r3, #0
   18fa8:	movgt	r5, #0
   18fac:	bgt	19080 <argp_parse@@Base+0x1e10>
   18fb0:	b	19040 <argp_parse@@Base+0x1dd0>
   18fb4:	ldr	r3, [sp, #8]
   18fb8:	sub	r7, r3, r6
   18fbc:	mov	r0, r2
   18fc0:	mov	r2, r7
   18fc4:	mov	r1, r6
   18fc8:	add	r0, r5, r0
   18fcc:	bl	11250 <memmove@plt>
   18fd0:	ldr	r6, [r4, #12]
   18fd4:	add	r6, r6, #1
   18fd8:	add	r6, r5, r6
   18fdc:	add	r7, r6, r7
   18fe0:	ldr	r3, [sp, #4]
   18fe4:	sub	r3, r7, r3
   18fe8:	str	r3, [sp]
   18fec:	mov	r3, #10
   18ff0:	strb	r3, [r5]
   18ff4:	mov	r7, r9
   18ff8:	add	r9, r5, #1
   18ffc:	b	18f7c <argp_parse@@Base+0x1d0c>
   19000:	mov	r1, #10
   19004:	bl	1149c <__overflow@plt>
   19008:	b	18efc <argp_parse@@Base+0x1c8c>
   1900c:	ldr	r2, [r4, #32]
   19010:	sub	r2, r2, r6
   19014:	cmp	r3, r2
   19018:	bgt	18fa4 <argp_parse@@Base+0x1d34>
   1901c:	cmp	r3, #0
   19020:	ble	19040 <argp_parse@@Base+0x1dd0>
   19024:	mov	r3, r9
   19028:	strb	sl, [r3], #1
   1902c:	sub	r1, r3, r9
   19030:	ldr	r2, [r4, #12]
   19034:	cmp	r1, r2
   19038:	blt	19028 <argp_parse@@Base+0x1db8>
   1903c:	mov	r9, r3
   19040:	cmp	r9, r6
   19044:	bcc	190ac <argp_parse@@Base+0x1e3c>
   19048:	sub	r7, r8, r7
   1904c:	ldr	r3, [sp]
   19050:	sub	r7, r3, r7
   19054:	add	r7, r9, r7
   19058:	str	r7, [r4, #28]
   1905c:	ldr	r3, [r4, #12]
   19060:	cmp	r3, #0
   19064:	mvneq	r3, #0
   19068:	str	r3, [r4, #20]
   1906c:	b	18c5c <argp_parse@@Base+0x19ec>
   19070:	add	r5, r5, #1
   19074:	ldr	r3, [r4, #12]
   19078:	cmp	r3, r5
   1907c:	ble	19040 <argp_parse@@Base+0x1dd0>
   19080:	ldr	r0, [r4]
   19084:	ldr	r3, [r0, #20]
   19088:	ldr	r2, [r0, #24]
   1908c:	cmp	r3, r2
   19090:	addcc	r2, r3, #1
   19094:	strcc	r2, [r0, #20]
   19098:	strbcc	sl, [r3]
   1909c:	bcc	19070 <argp_parse@@Base+0x1e00>
   190a0:	mov	r1, sl
   190a4:	bl	1149c <__overflow@plt>
   190a8:	b	19070 <argp_parse@@Base+0x1e00>
   190ac:	ldr	r3, [sp]
   190b0:	add	r2, r7, r3
   190b4:	sub	r2, r2, r8
   190b8:	mov	r1, r6
   190bc:	mov	r0, r9
   190c0:	bl	11250 <memmove@plt>
   190c4:	b	19048 <argp_parse@@Base+0x1dd8>
   190c8:	str	fp, [sp, #8]
   190cc:	str	r9, [sp, #4]
   190d0:	sub	r3, fp, r9
   190d4:	str	r3, [sp]
   190d8:	mov	r2, r3
   190dc:	mov	r1, #10
   190e0:	mov	r0, r9
   190e4:	bl	1146c <memchr@plt>
   190e8:	mov	r7, r0
   190ec:	b	18c28 <argp_parse@@Base+0x19b8>
   190f0:	mov	r1, r5
   190f4:	b	18d78 <argp_parse@@Base+0x1b08>
   190f8:	push	{r4, lr}
   190fc:	mov	r4, r0
   19100:	bl	18b94 <argp_parse@@Base+0x1924>
   19104:	ldr	r2, [r4, #28]
   19108:	ldr	r0, [r4, #24]
   1910c:	cmp	r2, r0
   19110:	bls	19124 <argp_parse@@Base+0x1eb4>
   19114:	ldr	r3, [r4]
   19118:	sub	r2, r2, r0
   1911c:	mov	r1, #1
   19120:	bl	112b0 <fwrite_unlocked@plt>
   19124:	ldr	r0, [r4, #24]
   19128:	bl	17e64 <argp_parse@@Base+0xbf4>
   1912c:	mov	r0, r4
   19130:	bl	17e64 <argp_parse@@Base+0xbf4>
   19134:	pop	{r4, pc}
   19138:	ldr	r3, [r0, #32]
   1913c:	ldr	r2, [r0, #28]
   19140:	sub	r3, r3, r2
   19144:	cmp	r3, r1
   19148:	bcc	19154 <argp_parse@@Base+0x1ee4>
   1914c:	mov	r0, #1
   19150:	bx	lr
   19154:	push	{r4, r5, r6, lr}
   19158:	mov	r5, r1
   1915c:	mov	r4, r0
   19160:	bl	18b94 <argp_parse@@Base+0x1924>
   19164:	ldr	r0, [r4, #24]
   19168:	ldr	r2, [r4, #28]
   1916c:	ldr	r3, [r4]
   19170:	sub	r2, r2, r0
   19174:	mov	r1, #1
   19178:	bl	112b0 <fwrite_unlocked@plt>
   1917c:	ldr	r2, [r4, #28]
   19180:	ldr	r3, [r4, #24]
   19184:	sub	r1, r2, r3
   19188:	cmp	r0, r1
   1918c:	bne	191d0 <argp_parse@@Base+0x1f60>
   19190:	str	r3, [r4, #28]
   19194:	mov	r2, #0
   19198:	str	r2, [r4, #16]
   1919c:	ldr	r1, [r4, #32]
   191a0:	sub	r1, r1, r3
   191a4:	cmp	r5, r1
   191a8:	bls	191c8 <argp_parse@@Base+0x1f58>
   191ac:	adds	r5, r5, r1
   191b0:	bcc	191fc <argp_parse@@Base+0x1f8c>
   191b4:	bl	1140c <__errno_location@plt>
   191b8:	mov	r3, #12
   191bc:	str	r3, [r0]
   191c0:	mov	r0, #0
   191c4:	pop	{r4, r5, r6, pc}
   191c8:	mov	r0, #1
   191cc:	pop	{r4, r5, r6, pc}
   191d0:	sub	r2, r2, r0
   191d4:	str	r2, [r4, #28]
   191d8:	ldr	r1, [r4, #16]
   191dc:	sub	r1, r1, r0
   191e0:	str	r1, [r4, #16]
   191e4:	sub	r2, r2, r3
   191e8:	add	r1, r3, r0
   191ec:	mov	r0, r3
   191f0:	bl	11250 <memmove@plt>
   191f4:	mov	r0, #0
   191f8:	pop	{r4, r5, r6, pc}
   191fc:	mov	r1, r5
   19200:	mov	r0, r3
   19204:	bl	18acc <argp_parse@@Base+0x185c>
   19208:	cmp	r0, #0
   1920c:	beq	191b4 <argp_parse@@Base+0x1f44>
   19210:	str	r0, [r4, #24]
   19214:	add	r5, r0, r5
   19218:	str	r5, [r4, #32]
   1921c:	str	r0, [r4, #28]
   19220:	mov	r0, #1
   19224:	pop	{r4, r5, r6, pc}
   19228:	push	{r1, r2, r3}
   1922c:	push	{r4, r5, r6, r7, lr}
   19230:	sub	sp, sp, #8
   19234:	mov	r5, r0
   19238:	ldr	r7, [sp, #28]
   1923c:	mov	r1, #150	; 0x96
   19240:	add	r6, sp, #32
   19244:	mov	r0, r5
   19248:	bl	19138 <argp_parse@@Base+0x1ec8>
   1924c:	cmp	r0, #0
   19250:	beq	19284 <argp_parse@@Base+0x2014>
   19254:	str	r6, [sp, #4]
   19258:	ldr	r0, [r5, #28]
   1925c:	ldr	r4, [r5, #32]
   19260:	sub	r4, r4, r0
   19264:	mov	r3, r6
   19268:	mov	r2, r7
   1926c:	mov	r1, r4
   19270:	bl	114f0 <vsnprintf@plt>
   19274:	cmp	r4, r0
   19278:	bhi	1928c <argp_parse@@Base+0x201c>
   1927c:	add	r1, r0, #1
   19280:	b	19244 <argp_parse@@Base+0x1fd4>
   19284:	mvn	r0, #0
   19288:	b	19298 <argp_parse@@Base+0x2028>
   1928c:	ldr	r3, [r5, #28]
   19290:	add	r3, r3, r0
   19294:	str	r3, [r5, #28]
   19298:	add	sp, sp, #8
   1929c:	pop	{r4, r5, r6, r7, lr}
   192a0:	add	sp, sp, #12
   192a4:	bx	lr
   192a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   192ac:	ldr	r4, [r1, #28]
   192b0:	ldr	r5, [r1, #32]
   192b4:	ldr	r6, [r1]
   192b8:	add	r7, r0, r5, lsl #2
   192bc:	b	192f4 <argp_parse@@Base+0x2084>
   192c0:	cmp	sl, #0
   192c4:	ble	192f0 <argp_parse@@Base+0x2080>
   192c8:	add	r2, r0, r4, lsl #2
   192cc:	sub	r3, r6, sl
   192d0:	add	r3, r0, r3, lsl #2
   192d4:	add	r8, r0, r6, lsl #2
   192d8:	ldr	ip, [r2]
   192dc:	ldr	lr, [r3]
   192e0:	str	lr, [r2], #4
   192e4:	str	ip, [r3], #4
   192e8:	cmp	r3, r8
   192ec:	bne	192d8 <argp_parse@@Base+0x2068>
   192f0:	sub	r6, r6, sl
   192f4:	cmp	r6, r5
   192f8:	movle	r3, #0
   192fc:	movgt	r3, #1
   19300:	cmp	r4, r5
   19304:	movge	r3, #0
   19308:	cmp	r3, #0
   1930c:	beq	19358 <argp_parse@@Base+0x20e8>
   19310:	sub	r9, r6, r5
   19314:	sub	sl, r5, r4
   19318:	cmp	r9, sl
   1931c:	bgt	192c0 <argp_parse@@Base+0x2050>
   19320:	cmp	r9, #0
   19324:	addgt	r3, r0, r4, lsl #2
   19328:	addgt	r8, r9, r4
   1932c:	addgt	r8, r0, r8, lsl #2
   19330:	movgt	r2, r7
   19334:	ble	19350 <argp_parse@@Base+0x20e0>
   19338:	ldr	ip, [r3]
   1933c:	ldr	lr, [r2]
   19340:	str	lr, [r3], #4
   19344:	str	ip, [r2], #4
   19348:	cmp	r3, r8
   1934c:	bne	19338 <argp_parse@@Base+0x20c8>
   19350:	add	r4, r4, r9
   19354:	b	192f4 <argp_parse@@Base+0x2084>
   19358:	ldr	r0, [r1]
   1935c:	ldr	r3, [r1, #32]
   19360:	sub	r2, r0, r3
   19364:	ldr	r3, [r1, #28]
   19368:	add	r3, r3, r2
   1936c:	str	r3, [r1, #28]
   19370:	str	r0, [r1, #32]
   19374:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1937c:	sub	sp, sp, #44	; 0x2c
   19380:	str	r0, [sp, #20]
   19384:	str	r1, [sp, #12]
   19388:	str	r2, [sp, #24]
   1938c:	str	r3, [sp, #8]
   19390:	ldr	fp, [sp, #88]	; 0x58
   19394:	ldr	sl, [fp, #20]
   19398:	ldrb	r3, [sl]
   1939c:	cmp	r3, #0
   193a0:	cmpne	r3, #61	; 0x3d
   193a4:	beq	193e0 <argp_parse@@Base+0x2170>
   193a8:	mov	r8, sl
   193ac:	ldrb	r3, [r8, #1]!
   193b0:	cmp	r3, #0
   193b4:	cmpne	r3, #61	; 0x3d
   193b8:	bne	193ac <argp_parse@@Base+0x213c>
   193bc:	sub	r7, r8, sl
   193c0:	ldr	r5, [sp, #8]
   193c4:	ldr	r3, [r5]
   193c8:	str	r3, [sp, #16]
   193cc:	cmp	r3, #0
   193d0:	beq	196d4 <argp_parse@@Base+0x2464>
   193d4:	mov	r4, r3
   193d8:	mov	r6, #0
   193dc:	b	193f8 <argp_parse@@Base+0x2188>
   193e0:	mov	r8, sl
   193e4:	b	193bc <argp_parse@@Base+0x214c>
   193e8:	add	r6, r6, #1
   193ec:	ldr	r4, [r5, #16]!
   193f0:	cmp	r4, #0
   193f4:	beq	19430 <argp_parse@@Base+0x21c0>
   193f8:	mov	r9, r5
   193fc:	mov	r2, r7
   19400:	mov	r1, sl
   19404:	mov	r0, r4
   19408:	bl	11538 <strncmp@plt>
   1940c:	cmp	r0, #0
   19410:	bne	193e8 <argp_parse@@Base+0x2178>
   19414:	mov	r0, r4
   19418:	bl	113e8 <strlen@plt>
   1941c:	cmp	r7, r0
   19420:	bne	193e8 <argp_parse@@Base+0x2178>
   19424:	cmp	r5, #0
   19428:	strne	r6, [sp, #28]
   1942c:	bne	19684 <argp_parse@@Base+0x2414>
   19430:	ldr	r4, [sp, #8]
   19434:	mvn	r3, #0
   19438:	str	r3, [sp, #28]
   1943c:	mov	sl, #0
   19440:	str	sl, [sp, #36]	; 0x24
   19444:	mov	r5, sl
   19448:	mov	r9, sl
   1944c:	str	r8, [sp, #32]
   19450:	mov	r8, sl
   19454:	ldr	r0, [sp, #16]
   19458:	b	194a8 <argp_parse@@Base+0x2238>
   1945c:	ldr	r2, [r9, #8]
   19460:	ldr	r3, [r4, #8]
   19464:	cmp	r2, r3
   19468:	bne	194e0 <argp_parse@@Base+0x2270>
   1946c:	ldr	r2, [r9, #12]
   19470:	ldr	r3, [r4, #12]
   19474:	cmp	r2, r3
   19478:	bne	194e0 <argp_parse@@Base+0x2270>
   1947c:	b	19498 <argp_parse@@Base+0x2228>
   19480:	cmp	r8, #0
   19484:	moveq	sl, #1
   19488:	beq	19498 <argp_parse@@Base+0x2228>
   1948c:	mov	sl, #1
   19490:	mov	r3, #1
   19494:	strb	r3, [r8, r5]
   19498:	add	r5, r5, #1
   1949c:	ldr	r0, [r4, #16]!
   194a0:	cmp	r0, #0
   194a4:	beq	19548 <argp_parse@@Base+0x22d8>
   194a8:	mov	r2, r7
   194ac:	ldr	r1, [fp, #20]
   194b0:	bl	11538 <strncmp@plt>
   194b4:	cmp	r0, #0
   194b8:	bne	19498 <argp_parse@@Base+0x2228>
   194bc:	cmp	r9, #0
   194c0:	beq	19534 <argp_parse@@Base+0x22c4>
   194c4:	ldr	r3, [sp, #84]	; 0x54
   194c8:	cmp	r3, #0
   194cc:	bne	194e0 <argp_parse@@Base+0x2270>
   194d0:	ldr	r2, [r9, #4]
   194d4:	ldr	r3, [r4, #4]
   194d8:	cmp	r2, r3
   194dc:	beq	1945c <argp_parse@@Base+0x21ec>
   194e0:	cmp	sl, #0
   194e4:	bne	19498 <argp_parse@@Base+0x2228>
   194e8:	ldr	r3, [sp, #92]	; 0x5c
   194ec:	cmp	r3, #0
   194f0:	beq	19480 <argp_parse@@Base+0x2210>
   194f4:	cmp	r8, #0
   194f8:	bne	19490 <argp_parse@@Base+0x2220>
   194fc:	mov	r0, r6
   19500:	bl	18a9c <argp_parse@@Base+0x182c>
   19504:	subs	r8, r0, #0
   19508:	beq	19540 <argp_parse@@Base+0x22d0>
   1950c:	mov	r2, r6
   19510:	mov	r1, #0
   19514:	mov	r0, r8
   19518:	bl	1143c <memset@plt>
   1951c:	ldr	r3, [sp, #28]
   19520:	mov	r2, #1
   19524:	strb	r2, [r8, r3]
   19528:	mov	r3, #1
   1952c:	str	r3, [sp, #36]	; 0x24
   19530:	b	19490 <argp_parse@@Base+0x2220>
   19534:	str	r5, [sp, #28]
   19538:	mov	r9, r4
   1953c:	b	19498 <argp_parse@@Base+0x2228>
   19540:	mov	sl, #1
   19544:	b	19498 <argp_parse@@Base+0x2228>
   19548:	mov	r3, r8
   1954c:	str	r8, [sp, #16]
   19550:	ldr	r8, [sp, #32]
   19554:	cmp	sl, #0
   19558:	cmpeq	r3, #0
   1955c:	beq	1967c <argp_parse@@Base+0x240c>
   19560:	ldr	r3, [sp, #92]	; 0x5c
   19564:	cmp	r3, #0
   19568:	beq	19598 <argp_parse@@Base+0x2328>
   1956c:	cmp	sl, #0
   19570:	beq	195d4 <argp_parse@@Base+0x2364>
   19574:	ldr	r3, [sp, #12]
   19578:	ldr	r2, [r3]
   1957c:	ldr	r3, [pc, #708]	; 19848 <argp_parse@@Base+0x25d8>
   19580:	ldr	r0, [r3]
   19584:	ldr	r3, [fp, #20]
   19588:	str	r3, [sp]
   1958c:	ldr	r3, [sp, #96]	; 0x60
   19590:	ldr	r1, [pc, #692]	; 1984c <argp_parse@@Base+0x25dc>
   19594:	bl	11400 <fprintf@plt>
   19598:	ldr	r3, [sp, #36]	; 0x24
   1959c:	cmp	r3, #0
   195a0:	bne	19670 <argp_parse@@Base+0x2400>
   195a4:	ldr	r4, [fp, #20]
   195a8:	mov	r0, r4
   195ac:	bl	113e8 <strlen@plt>
   195b0:	add	r0, r4, r0
   195b4:	str	r0, [fp, #20]
   195b8:	ldr	r3, [fp]
   195bc:	add	r3, r3, #1
   195c0:	str	r3, [fp]
   195c4:	mov	r3, #0
   195c8:	str	r3, [fp, #8]
   195cc:	mov	r0, #63	; 0x3f
   195d0:	b	197c8 <argp_parse@@Base+0x2558>
   195d4:	ldr	r4, [pc, #620]	; 19848 <argp_parse@@Base+0x25d8>
   195d8:	ldr	r0, [r4]
   195dc:	bl	114e4 <flockfile@plt>
   195e0:	ldr	r3, [sp, #12]
   195e4:	ldr	r2, [r3]
   195e8:	ldr	r0, [r4]
   195ec:	ldr	r3, [fp, #20]
   195f0:	str	r3, [sp]
   195f4:	ldr	r3, [sp, #96]	; 0x60
   195f8:	ldr	r1, [pc, #592]	; 19850 <argp_parse@@Base+0x25e0>
   195fc:	bl	11400 <fprintf@plt>
   19600:	cmp	r6, #0
   19604:	ble	19654 <argp_parse@@Base+0x23e4>
   19608:	ldr	r3, [sp, #16]
   1960c:	mov	r4, r3
   19610:	add	r6, r3, r6
   19614:	ldr	r7, [pc, #568]	; 19854 <argp_parse@@Base+0x25e4>
   19618:	ldr	r5, [pc, #552]	; 19848 <argp_parse@@Base+0x25d8>
   1961c:	ldr	r8, [sp, #8]
   19620:	b	19630 <argp_parse@@Base+0x23c0>
   19624:	add	sl, sl, #1
   19628:	cmp	r4, r6
   1962c:	beq	19654 <argp_parse@@Base+0x23e4>
   19630:	ldrb	r3, [r4], #1
   19634:	cmp	r3, #0
   19638:	beq	19624 <argp_parse@@Base+0x23b4>
   1963c:	ldr	r3, [r8, sl, lsl #4]
   19640:	ldr	r2, [sp, #96]	; 0x60
   19644:	mov	r1, r7
   19648:	ldr	r0, [r5]
   1964c:	bl	11400 <fprintf@plt>
   19650:	b	19624 <argp_parse@@Base+0x23b4>
   19654:	ldr	r4, [pc, #492]	; 19848 <argp_parse@@Base+0x25d8>
   19658:	ldr	r1, [r4]
   1965c:	mov	r0, #10
   19660:	bl	114cc <fputc@plt>
   19664:	ldr	r0, [r4]
   19668:	bl	112f8 <funlockfile@plt>
   1966c:	b	19598 <argp_parse@@Base+0x2328>
   19670:	ldr	r0, [sp, #16]
   19674:	bl	17e64 <argp_parse@@Base+0xbf4>
   19678:	b	195a4 <argp_parse@@Base+0x2334>
   1967c:	cmp	r9, #0
   19680:	beq	196d4 <argp_parse@@Base+0x2464>
   19684:	ldr	r2, [fp]
   19688:	add	r3, r2, #1
   1968c:	str	r3, [fp]
   19690:	mov	r1, #0
   19694:	str	r1, [fp, #20]
   19698:	ldrb	r1, [r8]
   1969c:	cmp	r1, #0
   196a0:	beq	19794 <argp_parse@@Base+0x2524>
   196a4:	ldr	r3, [r9, #4]
   196a8:	cmp	r3, #0
   196ac:	addne	r8, r8, #1
   196b0:	strne	r8, [fp, #12]
   196b4:	bne	197a0 <argp_parse@@Base+0x2530>
   196b8:	ldr	r3, [sp, #92]	; 0x5c
   196bc:	cmp	r3, #0
   196c0:	bne	1976c <argp_parse@@Base+0x24fc>
   196c4:	ldr	r3, [r9, #12]
   196c8:	str	r3, [fp, #8]
   196cc:	mov	r0, #63	; 0x3f
   196d0:	b	197c8 <argp_parse@@Base+0x2558>
   196d4:	ldr	r3, [sp, #84]	; 0x54
   196d8:	cmp	r3, #0
   196dc:	bne	1970c <argp_parse@@Base+0x249c>
   196e0:	ldr	r3, [sp, #92]	; 0x5c
   196e4:	cmp	r3, #0
   196e8:	bne	19744 <argp_parse@@Base+0x24d4>
   196ec:	mov	r2, #0
   196f0:	str	r2, [fp, #20]
   196f4:	ldr	r3, [fp]
   196f8:	add	r3, r3, #1
   196fc:	str	r3, [fp]
   19700:	str	r2, [fp, #8]
   19704:	mov	r0, #63	; 0x3f
   19708:	b	197c8 <argp_parse@@Base+0x2558>
   1970c:	ldr	r3, [fp]
   19710:	ldr	r2, [sp, #12]
   19714:	ldr	r3, [r2, r3, lsl #2]
   19718:	ldrb	r3, [r3, #1]
   1971c:	cmp	r3, #45	; 0x2d
   19720:	beq	196e0 <argp_parse@@Base+0x2470>
   19724:	ldr	r3, [fp, #20]
   19728:	ldrb	r1, [r3]
   1972c:	ldr	r0, [sp, #24]
   19730:	bl	113f4 <strchr@plt>
   19734:	cmp	r0, #0
   19738:	beq	196e0 <argp_parse@@Base+0x2470>
   1973c:	mvn	r0, #0
   19740:	b	197c8 <argp_parse@@Base+0x2558>
   19744:	ldr	r3, [sp, #12]
   19748:	ldr	r2, [r3]
   1974c:	ldr	r3, [pc, #244]	; 19848 <argp_parse@@Base+0x25d8>
   19750:	ldr	r0, [r3]
   19754:	ldr	r3, [fp, #20]
   19758:	str	r3, [sp]
   1975c:	ldr	r3, [sp, #96]	; 0x60
   19760:	ldr	r1, [pc, #240]	; 19858 <argp_parse@@Base+0x25e8>
   19764:	bl	11400 <fprintf@plt>
   19768:	b	196ec <argp_parse@@Base+0x247c>
   1976c:	ldr	r3, [sp, #12]
   19770:	ldr	r2, [r3]
   19774:	ldr	r3, [pc, #204]	; 19848 <argp_parse@@Base+0x25d8>
   19778:	ldr	r0, [r3]
   1977c:	ldr	r3, [r9]
   19780:	str	r3, [sp]
   19784:	ldr	r3, [sp, #96]	; 0x60
   19788:	ldr	r1, [pc, #204]	; 1985c <argp_parse@@Base+0x25ec>
   1978c:	bl	11400 <fprintf@plt>
   19790:	b	196c4 <argp_parse@@Base+0x2454>
   19794:	ldr	r1, [r9, #4]
   19798:	cmp	r1, #1
   1979c:	beq	197d0 <argp_parse@@Base+0x2560>
   197a0:	ldr	r3, [sp, #80]	; 0x50
   197a4:	cmp	r3, #0
   197a8:	ldrne	r2, [sp, #28]
   197ac:	strne	r2, [r3]
   197b0:	ldr	r3, [r9, #8]
   197b4:	cmp	r3, #0
   197b8:	ldrne	r2, [r9, #12]
   197bc:	strne	r2, [r3]
   197c0:	movne	r0, #0
   197c4:	ldreq	r0, [r9, #12]
   197c8:	add	sp, sp, #44	; 0x2c
   197cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197d0:	ldr	r1, [sp, #20]
   197d4:	cmp	r3, r1
   197d8:	bge	197f4 <argp_parse@@Base+0x2584>
   197dc:	add	r2, r2, #2
   197e0:	str	r2, [fp]
   197e4:	ldr	r2, [sp, #12]
   197e8:	ldr	r3, [r2, r3, lsl #2]
   197ec:	str	r3, [fp, #12]
   197f0:	b	197a0 <argp_parse@@Base+0x2530>
   197f4:	ldr	r3, [sp, #92]	; 0x5c
   197f8:	cmp	r3, #0
   197fc:	bne	19820 <argp_parse@@Base+0x25b0>
   19800:	ldr	r3, [r9, #12]
   19804:	str	r3, [fp, #8]
   19808:	ldr	r3, [sp, #24]
   1980c:	ldrb	r0, [r3]
   19810:	cmp	r0, #58	; 0x3a
   19814:	moveq	r0, #58	; 0x3a
   19818:	movne	r0, #63	; 0x3f
   1981c:	b	197c8 <argp_parse@@Base+0x2558>
   19820:	ldr	r3, [sp, #12]
   19824:	ldr	r2, [r3]
   19828:	ldr	r3, [pc, #24]	; 19848 <argp_parse@@Base+0x25d8>
   1982c:	ldr	r0, [r3]
   19830:	ldr	r3, [r9]
   19834:	str	r3, [sp]
   19838:	ldr	r3, [sp, #96]	; 0x60
   1983c:	ldr	r1, [pc, #28]	; 19860 <argp_parse@@Base+0x25f0>
   19840:	bl	11400 <fprintf@plt>
   19844:	b	19800 <argp_parse@@Base+0x2590>
   19848:	andeq	ip, r2, r0, asr r4
   1984c:	andeq	fp, r1, r0, ror #7
   19850:	andeq	fp, r1, r0, lsl #8
   19854:	andeq	fp, r1, r0, lsr r4
   19858:	andeq	fp, r1, r8, lsr r4
   1985c:	andeq	fp, r1, r8, asr r4
   19860:	andeq	fp, r1, r8, lsl #9
   19864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19868:	sub	sp, sp, #36	; 0x24
   1986c:	str	r3, [sp, #24]
   19870:	ldr	r4, [sp, #80]	; 0x50
   19874:	ldr	r8, [r4, #4]
   19878:	subs	r5, r0, #0
   1987c:	ble	19d84 <argp_parse@@Base+0x2b14>
   19880:	mov	r9, r1
   19884:	mov	r6, r2
   19888:	mov	r3, #0
   1988c:	str	r3, [r4, #12]
   19890:	ldr	r3, [r4]
   19894:	cmp	r3, #0
   19898:	beq	198bc <argp_parse@@Base+0x264c>
   1989c:	ldr	r3, [r4, #16]
   198a0:	cmp	r3, #0
   198a4:	beq	198c4 <argp_parse@@Base+0x2654>
   198a8:	ldrb	r3, [r2]
   198ac:	sub	r3, r3, #43	; 0x2b
   198b0:	tst	r3, #253	; 0xfd
   198b4:	addeq	r6, r2, #1
   198b8:	b	19920 <argp_parse@@Base+0x26b0>
   198bc:	mov	r3, #1
   198c0:	str	r3, [r4]
   198c4:	ldr	r3, [r4]
   198c8:	str	r3, [r4, #32]
   198cc:	str	r3, [r4, #28]
   198d0:	mov	r3, #0
   198d4:	str	r3, [r4, #20]
   198d8:	ldrb	r3, [r6]
   198dc:	cmp	r3, #45	; 0x2d
   198e0:	moveq	r3, #2
   198e4:	streq	r3, [r4, #24]
   198e8:	addeq	r6, r6, #1
   198ec:	beq	19918 <argp_parse@@Base+0x26a8>
   198f0:	cmp	r3, #43	; 0x2b
   198f4:	moveq	r3, #0
   198f8:	streq	r3, [r4, #24]
   198fc:	addeq	r6, r6, #1
   19900:	beq	19918 <argp_parse@@Base+0x26a8>
   19904:	ldr	r3, [sp, #84]	; 0x54
   19908:	cmp	r3, #0
   1990c:	beq	199bc <argp_parse@@Base+0x274c>
   19910:	mov	r3, #0
   19914:	str	r3, [r4, #24]
   19918:	mov	r3, #1
   1991c:	str	r3, [r4, #16]
   19920:	ldrb	r3, [r6]
   19924:	cmp	r3, #58	; 0x3a
   19928:	moveq	r8, #0
   1992c:	ldr	r3, [r4, #20]
   19930:	cmp	r3, #0
   19934:	beq	19944 <argp_parse@@Base+0x26d4>
   19938:	ldrb	r3, [r3]
   1993c:	cmp	r3, #0
   19940:	bne	19ad0 <argp_parse@@Base+0x2860>
   19944:	ldr	r3, [r4]
   19948:	ldr	r2, [r4, #32]
   1994c:	cmp	r2, r3
   19950:	strgt	r3, [r4, #32]
   19954:	ldr	r2, [r4, #28]
   19958:	cmp	r3, r2
   1995c:	strlt	r3, [r4, #28]
   19960:	ldr	r2, [r4, #24]
   19964:	cmp	r2, #1
   19968:	beq	199d8 <argp_parse@@Base+0x2768>
   1996c:	ldr	r7, [r4]
   19970:	cmp	r5, r7
   19974:	beq	19a5c <argp_parse@@Base+0x27ec>
   19978:	ldr	sl, [r9, r7, lsl #2]
   1997c:	ldr	r1, [pc, #1088]	; 19dc4 <argp_parse@@Base+0x2b54>
   19980:	mov	r0, sl
   19984:	bl	11208 <strcmp@plt>
   19988:	cmp	r0, #0
   1998c:	bne	19d94 <argp_parse@@Base+0x2b24>
   19990:	add	r7, r7, #1
   19994:	str	r7, [r4]
   19998:	ldr	r2, [r4, #28]
   1999c:	ldr	r3, [r4, #32]
   199a0:	cmp	r7, r3
   199a4:	cmpne	r2, r3
   199a8:	beq	19a4c <argp_parse@@Base+0x27dc>
   199ac:	mov	r1, r4
   199b0:	mov	r0, r9
   199b4:	bl	192a8 <argp_parse@@Base+0x2038>
   199b8:	b	19a54 <argp_parse@@Base+0x27e4>
   199bc:	ldr	r0, [pc, #1028]	; 19dc8 <argp_parse@@Base+0x2b58>
   199c0:	bl	11364 <getenv@plt>
   199c4:	cmp	r0, #0
   199c8:	bne	19910 <argp_parse@@Base+0x26a0>
   199cc:	mov	r3, #1
   199d0:	str	r3, [r4, #24]
   199d4:	b	19918 <argp_parse@@Base+0x26a8>
   199d8:	ldr	r2, [r4, #32]
   199dc:	ldr	r1, [r4, #28]
   199e0:	cmp	r1, r2
   199e4:	cmpne	r3, r2
   199e8:	beq	199fc <argp_parse@@Base+0x278c>
   199ec:	mov	r1, r4
   199f0:	mov	r0, r9
   199f4:	bl	192a8 <argp_parse@@Base+0x2038>
   199f8:	b	19a04 <argp_parse@@Base+0x2794>
   199fc:	cmp	r3, r2
   19a00:	strne	r3, [r4, #28]
   19a04:	ldr	r3, [r4]
   19a08:	cmp	r5, r3
   19a0c:	ble	19a44 <argp_parse@@Base+0x27d4>
   19a10:	add	r1, r9, r3, lsl #2
   19a14:	b	19a28 <argp_parse@@Base+0x27b8>
   19a18:	add	r3, r3, #1
   19a1c:	str	r3, [r4]
   19a20:	cmp	r5, r3
   19a24:	beq	19a44 <argp_parse@@Base+0x27d4>
   19a28:	ldr	r2, [r1], #4
   19a2c:	ldrb	r0, [r2]
   19a30:	cmp	r0, #45	; 0x2d
   19a34:	bne	19a18 <argp_parse@@Base+0x27a8>
   19a38:	ldrb	r2, [r2, #1]
   19a3c:	cmp	r2, #0
   19a40:	beq	19a18 <argp_parse@@Base+0x27a8>
   19a44:	str	r3, [r4, #32]
   19a48:	b	1996c <argp_parse@@Base+0x26fc>
   19a4c:	cmp	r2, r3
   19a50:	streq	r7, [r4, #28]
   19a54:	str	r5, [r4, #32]
   19a58:	str	r5, [r4]
   19a5c:	ldr	r3, [r4, #28]
   19a60:	ldr	r2, [r4, #32]
   19a64:	cmp	r3, r2
   19a68:	mvneq	r0, #0
   19a6c:	strne	r3, [r4]
   19a70:	mvnne	r0, #0
   19a74:	b	19bd4 <argp_parse@@Base+0x2964>
   19a78:	ldrb	r1, [sl, #1]
   19a7c:	cmp	r1, #0
   19a80:	beq	19da0 <argp_parse@@Base+0x2b30>
   19a84:	ldr	r3, [sp, #24]
   19a88:	cmp	r3, #0
   19a8c:	beq	19ac0 <argp_parse@@Base+0x2850>
   19a90:	cmp	r1, #45	; 0x2d
   19a94:	beq	19b38 <argp_parse@@Base+0x28c8>
   19a98:	ldr	r3, [sp, #76]	; 0x4c
   19a9c:	cmp	r3, #0
   19aa0:	beq	19ac0 <argp_parse@@Base+0x2850>
   19aa4:	ldrb	r3, [sl, #2]
   19aa8:	cmp	r3, #0
   19aac:	bne	19b78 <argp_parse@@Base+0x2908>
   19ab0:	mov	r0, r6
   19ab4:	bl	113f4 <strchr@plt>
   19ab8:	cmp	r0, #0
   19abc:	beq	19b78 <argp_parse@@Base+0x2908>
   19ac0:	ldr	r3, [r4]
   19ac4:	ldr	r3, [r9, r3, lsl #2]
   19ac8:	add	r3, r3, #1
   19acc:	str	r3, [r4, #20]
   19ad0:	ldr	sl, [r4, #20]
   19ad4:	add	fp, sl, #1
   19ad8:	str	fp, [r4, #20]
   19adc:	ldrb	r7, [sl]
   19ae0:	str	r7, [sp, #28]
   19ae4:	mov	r1, r7
   19ae8:	mov	r0, r6
   19aec:	bl	113f4 <strchr@plt>
   19af0:	ldrb	r3, [sl, #1]
   19af4:	cmp	r3, #0
   19af8:	ldreq	r3, [r4]
   19afc:	addeq	r3, r3, #1
   19b00:	streq	r3, [r4]
   19b04:	sub	r3, r7, #58	; 0x3a
   19b08:	uxtb	r3, r3
   19b0c:	cmp	r0, #0
   19b10:	cmpne	r3, #1
   19b14:	bls	19bc0 <argp_parse@@Base+0x2950>
   19b18:	ldrb	r3, [r0]
   19b1c:	cmp	r3, #87	; 0x57
   19b20:	beq	19bf8 <argp_parse@@Base+0x2988>
   19b24:	ldrb	r3, [r0, #1]
   19b28:	cmp	r3, #58	; 0x3a
   19b2c:	beq	19cc4 <argp_parse@@Base+0x2a54>
   19b30:	mov	r0, r7
   19b34:	b	19bd4 <argp_parse@@Base+0x2964>
   19b38:	add	sl, sl, #2
   19b3c:	str	sl, [r4, #20]
   19b40:	ldr	r3, [pc, #636]	; 19dc4 <argp_parse@@Base+0x2b54>
   19b44:	str	r3, [sp, #16]
   19b48:	str	r8, [sp, #12]
   19b4c:	str	r4, [sp, #8]
   19b50:	ldr	r3, [sp, #76]	; 0x4c
   19b54:	str	r3, [sp, #4]
   19b58:	ldr	r3, [sp, #72]	; 0x48
   19b5c:	str	r3, [sp]
   19b60:	ldr	r3, [sp, #24]
   19b64:	mov	r2, r6
   19b68:	mov	r1, r9
   19b6c:	mov	r0, r5
   19b70:	bl	19378 <argp_parse@@Base+0x2108>
   19b74:	b	19bd4 <argp_parse@@Base+0x2964>
   19b78:	add	sl, sl, #1
   19b7c:	str	sl, [r4, #20]
   19b80:	ldr	r3, [pc, #580]	; 19dcc <argp_parse@@Base+0x2b5c>
   19b84:	str	r3, [sp, #16]
   19b88:	str	r8, [sp, #12]
   19b8c:	str	r4, [sp, #8]
   19b90:	ldr	r3, [sp, #76]	; 0x4c
   19b94:	str	r3, [sp, #4]
   19b98:	ldr	r3, [sp, #72]	; 0x48
   19b9c:	str	r3, [sp]
   19ba0:	ldr	r3, [sp, #24]
   19ba4:	mov	r2, r6
   19ba8:	mov	r1, r9
   19bac:	mov	r0, r5
   19bb0:	bl	19378 <argp_parse@@Base+0x2108>
   19bb4:	cmn	r0, #1
   19bb8:	bne	19bd4 <argp_parse@@Base+0x2964>
   19bbc:	b	19ac0 <argp_parse@@Base+0x2850>
   19bc0:	cmp	r8, #0
   19bc4:	bne	19bdc <argp_parse@@Base+0x296c>
   19bc8:	ldr	r3, [sp, #28]
   19bcc:	str	r3, [r4, #8]
   19bd0:	mov	r0, #63	; 0x3f
   19bd4:	add	sp, sp, #36	; 0x24
   19bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bdc:	ldr	r3, [sp, #28]
   19be0:	ldr	r2, [r9]
   19be4:	ldr	r1, [pc, #484]	; 19dd0 <argp_parse@@Base+0x2b60>
   19be8:	ldr	r0, [pc, #484]	; 19dd4 <argp_parse@@Base+0x2b64>
   19bec:	ldr	r0, [r0]
   19bf0:	bl	11400 <fprintf@plt>
   19bf4:	b	19bc8 <argp_parse@@Base+0x2958>
   19bf8:	ldrb	r3, [r0, #1]
   19bfc:	ldr	r2, [sp, #24]
   19c00:	cmp	r3, #59	; 0x3b
   19c04:	movne	r3, #0
   19c08:	moveq	r3, #1
   19c0c:	cmp	r2, #0
   19c10:	moveq	r3, #0
   19c14:	cmp	r3, #0
   19c18:	beq	19b24 <argp_parse@@Base+0x28b4>
   19c1c:	ldrb	r3, [sl, #1]
   19c20:	cmp	r3, #0
   19c24:	strne	fp, [r4, #12]
   19c28:	bne	19c40 <argp_parse@@Base+0x29d0>
   19c2c:	ldr	r3, [r4]
   19c30:	cmp	r5, r3
   19c34:	beq	19c84 <argp_parse@@Base+0x2a14>
   19c38:	ldr	r3, [r9, r3, lsl #2]
   19c3c:	str	r3, [r4, #12]
   19c40:	ldr	r3, [r4, #12]
   19c44:	str	r3, [r4, #20]
   19c48:	mov	r3, #0
   19c4c:	str	r3, [r4, #12]
   19c50:	ldr	r2, [pc, #384]	; 19dd8 <argp_parse@@Base+0x2b68>
   19c54:	str	r2, [sp, #16]
   19c58:	str	r8, [sp, #12]
   19c5c:	str	r4, [sp, #8]
   19c60:	str	r3, [sp, #4]
   19c64:	ldr	r3, [sp, #72]	; 0x48
   19c68:	str	r3, [sp]
   19c6c:	ldr	r3, [sp, #24]
   19c70:	mov	r2, r6
   19c74:	mov	r1, r9
   19c78:	mov	r0, r5
   19c7c:	bl	19378 <argp_parse@@Base+0x2108>
   19c80:	b	19bd4 <argp_parse@@Base+0x2964>
   19c84:	cmp	r8, #0
   19c88:	bne	19ca8 <argp_parse@@Base+0x2a38>
   19c8c:	ldr	r3, [sp, #28]
   19c90:	str	r3, [r4, #8]
   19c94:	ldrb	r0, [r6]
   19c98:	cmp	r0, #58	; 0x3a
   19c9c:	moveq	r0, #58	; 0x3a
   19ca0:	movne	r0, #63	; 0x3f
   19ca4:	b	19bd4 <argp_parse@@Base+0x2964>
   19ca8:	ldr	r3, [sp, #28]
   19cac:	ldr	r2, [r9]
   19cb0:	ldr	r1, [pc, #292]	; 19ddc <argp_parse@@Base+0x2b6c>
   19cb4:	ldr	r0, [pc, #280]	; 19dd4 <argp_parse@@Base+0x2b64>
   19cb8:	ldr	r0, [r0]
   19cbc:	bl	11400 <fprintf@plt>
   19cc0:	b	19c8c <argp_parse@@Base+0x2a1c>
   19cc4:	ldrb	r3, [r0, #2]
   19cc8:	cmp	r3, #58	; 0x3a
   19ccc:	beq	19cf8 <argp_parse@@Base+0x2a88>
   19cd0:	ldrb	r3, [sl, #1]
   19cd4:	cmp	r3, #0
   19cd8:	beq	19d24 <argp_parse@@Base+0x2ab4>
   19cdc:	str	fp, [r4, #12]
   19ce0:	ldr	r3, [r4]
   19ce4:	add	r3, r3, #1
   19ce8:	str	r3, [r4]
   19cec:	mov	r3, #0
   19cf0:	str	r3, [r4, #20]
   19cf4:	b	19b30 <argp_parse@@Base+0x28c0>
   19cf8:	ldrb	r3, [sl, #1]
   19cfc:	cmp	r3, #0
   19d00:	strne	fp, [r4, #12]
   19d04:	ldrne	r3, [r4]
   19d08:	addne	r3, r3, #1
   19d0c:	strne	r3, [r4]
   19d10:	moveq	r3, #0
   19d14:	streq	r3, [r4, #12]
   19d18:	mov	r3, #0
   19d1c:	str	r3, [r4, #20]
   19d20:	b	19b30 <argp_parse@@Base+0x28c0>
   19d24:	ldr	r3, [r4]
   19d28:	cmp	r5, r3
   19d2c:	beq	19d44 <argp_parse@@Base+0x2ad4>
   19d30:	add	r2, r3, #1
   19d34:	str	r2, [r4]
   19d38:	ldr	r3, [r9, r3, lsl #2]
   19d3c:	str	r3, [r4, #12]
   19d40:	b	19cec <argp_parse@@Base+0x2a7c>
   19d44:	cmp	r8, #0
   19d48:	bne	19d68 <argp_parse@@Base+0x2af8>
   19d4c:	ldr	r3, [sp, #28]
   19d50:	str	r3, [r4, #8]
   19d54:	ldrb	r7, [r6]
   19d58:	cmp	r7, #58	; 0x3a
   19d5c:	moveq	r7, #58	; 0x3a
   19d60:	movne	r7, #63	; 0x3f
   19d64:	b	19cec <argp_parse@@Base+0x2a7c>
   19d68:	ldr	r3, [sp, #28]
   19d6c:	ldr	r2, [r9]
   19d70:	ldr	r1, [pc, #100]	; 19ddc <argp_parse@@Base+0x2b6c>
   19d74:	ldr	r0, [pc, #88]	; 19dd4 <argp_parse@@Base+0x2b64>
   19d78:	ldr	r0, [r0]
   19d7c:	bl	11400 <fprintf@plt>
   19d80:	b	19d4c <argp_parse@@Base+0x2adc>
   19d84:	mvn	r0, #0
   19d88:	b	19bd4 <argp_parse@@Base+0x2964>
   19d8c:	mvn	r0, #0
   19d90:	b	19bd4 <argp_parse@@Base+0x2964>
   19d94:	ldrb	r3, [sl]
   19d98:	cmp	r3, #45	; 0x2d
   19d9c:	beq	19a78 <argp_parse@@Base+0x2808>
   19da0:	ldr	r3, [r4, #24]
   19da4:	cmp	r3, #0
   19da8:	beq	19d8c <argp_parse@@Base+0x2b1c>
   19dac:	add	r3, r7, #1
   19db0:	str	r3, [r4]
   19db4:	ldr	r3, [r9, r7, lsl #2]
   19db8:	str	r3, [r4, #12]
   19dbc:	mov	r0, #1
   19dc0:	b	19bd4 <argp_parse@@Base+0x2964>
   19dc4:	andeq	sl, r1, r4, lsr pc
   19dc8:			; <UNDEFINED> instruction: 0x0001b4b0
   19dcc:	andeq	fp, r1, r0, asr #9
   19dd0:	andeq	fp, r1, r4, asr #9
   19dd4:	andeq	ip, r2, r0, asr r4
   19dd8:	andeq	fp, r1, ip, lsl #10
   19ddc:	andeq	fp, r1, r0, ror #9
   19de0:	push	{r4, r5, lr}
   19de4:	sub	sp, sp, #20
   19de8:	ldr	r4, [pc, #84]	; 19e44 <argp_parse@@Base+0x2bd4>
   19dec:	ldr	r5, [pc, #84]	; 19e48 <argp_parse@@Base+0x2bd8>
   19df0:	ldr	ip, [r5]
   19df4:	str	ip, [r4]
   19df8:	ldr	ip, [r5, #4]
   19dfc:	str	ip, [r4, #4]
   19e00:	ldr	ip, [sp, #40]	; 0x28
   19e04:	str	ip, [sp, #12]
   19e08:	str	r4, [sp, #8]
   19e0c:	ldr	ip, [sp, #36]	; 0x24
   19e10:	str	ip, [sp, #4]
   19e14:	ldr	ip, [sp, #32]
   19e18:	str	ip, [sp]
   19e1c:	bl	19864 <argp_parse@@Base+0x25f4>
   19e20:	ldr	r3, [r4]
   19e24:	str	r3, [r5]
   19e28:	ldr	r2, [r4, #12]
   19e2c:	ldr	r3, [pc, #24]	; 19e4c <argp_parse@@Base+0x2bdc>
   19e30:	str	r2, [r3]
   19e34:	ldr	r3, [r4, #8]
   19e38:	str	r3, [r5, #8]
   19e3c:	add	sp, sp, #20
   19e40:	pop	{r4, r5, pc}
   19e44:	andeq	ip, r2, ip, lsl r5
   19e48:	andeq	ip, r2, ip, lsr r4
   19e4c:	andeq	ip, r2, r4, asr #31
   19e50:	push	{lr}		; (str lr, [sp, #-4]!)
   19e54:	sub	sp, sp, #20
   19e58:	mov	r3, #1
   19e5c:	str	r3, [sp, #8]
   19e60:	mov	r3, #0
   19e64:	str	r3, [sp, #4]
   19e68:	str	r3, [sp]
   19e6c:	bl	19de0 <argp_parse@@Base+0x2b70>
   19e70:	add	sp, sp, #20
   19e74:	pop	{pc}		; (ldr pc, [sp], #4)
   19e78:	push	{r4, r5, r6, lr}
   19e7c:	mov	r6, r0
   19e80:	mov	r5, r1
   19e84:	subs	r4, r2, #0
   19e88:	beq	19eb4 <argp_parse@@Base+0x2c44>
   19e8c:	mov	r1, r4
   19e90:	mvn	r0, #0
   19e94:	bl	19ec4 <argp_parse@@Base+0x2c54>
   19e98:	cmp	r0, r5
   19e9c:	bcs	19eb4 <argp_parse@@Base+0x2c44>
   19ea0:	bl	1140c <__errno_location@plt>
   19ea4:	mov	r3, #12
   19ea8:	str	r3, [r0]
   19eac:	mov	r0, #0
   19eb0:	pop	{r4, r5, r6, pc}
   19eb4:	mul	r1, r5, r4
   19eb8:	mov	r0, r6
   19ebc:	bl	18acc <argp_parse@@Base+0x185c>
   19ec0:	pop	{r4, r5, r6, pc}
   19ec4:	subs	r2, r1, #1
   19ec8:	bxeq	lr
   19ecc:	bcc	1a0a4 <argp_parse@@Base+0x2e34>
   19ed0:	cmp	r0, r1
   19ed4:	bls	1a088 <argp_parse@@Base+0x2e18>
   19ed8:	tst	r1, r2
   19edc:	beq	1a094 <argp_parse@@Base+0x2e24>
   19ee0:	clz	r3, r0
   19ee4:	clz	r2, r1
   19ee8:	sub	r3, r2, r3
   19eec:	rsbs	r3, r3, #31
   19ef0:	addne	r3, r3, r3, lsl #1
   19ef4:	mov	r2, #0
   19ef8:	addne	pc, pc, r3, lsl #2
   19efc:	nop			; (mov r0, r0)
   19f00:	cmp	r0, r1, lsl #31
   19f04:	adc	r2, r2, r2
   19f08:	subcs	r0, r0, r1, lsl #31
   19f0c:	cmp	r0, r1, lsl #30
   19f10:	adc	r2, r2, r2
   19f14:	subcs	r0, r0, r1, lsl #30
   19f18:	cmp	r0, r1, lsl #29
   19f1c:	adc	r2, r2, r2
   19f20:	subcs	r0, r0, r1, lsl #29
   19f24:	cmp	r0, r1, lsl #28
   19f28:	adc	r2, r2, r2
   19f2c:	subcs	r0, r0, r1, lsl #28
   19f30:	cmp	r0, r1, lsl #27
   19f34:	adc	r2, r2, r2
   19f38:	subcs	r0, r0, r1, lsl #27
   19f3c:	cmp	r0, r1, lsl #26
   19f40:	adc	r2, r2, r2
   19f44:	subcs	r0, r0, r1, lsl #26
   19f48:	cmp	r0, r1, lsl #25
   19f4c:	adc	r2, r2, r2
   19f50:	subcs	r0, r0, r1, lsl #25
   19f54:	cmp	r0, r1, lsl #24
   19f58:	adc	r2, r2, r2
   19f5c:	subcs	r0, r0, r1, lsl #24
   19f60:	cmp	r0, r1, lsl #23
   19f64:	adc	r2, r2, r2
   19f68:	subcs	r0, r0, r1, lsl #23
   19f6c:	cmp	r0, r1, lsl #22
   19f70:	adc	r2, r2, r2
   19f74:	subcs	r0, r0, r1, lsl #22
   19f78:	cmp	r0, r1, lsl #21
   19f7c:	adc	r2, r2, r2
   19f80:	subcs	r0, r0, r1, lsl #21
   19f84:	cmp	r0, r1, lsl #20
   19f88:	adc	r2, r2, r2
   19f8c:	subcs	r0, r0, r1, lsl #20
   19f90:	cmp	r0, r1, lsl #19
   19f94:	adc	r2, r2, r2
   19f98:	subcs	r0, r0, r1, lsl #19
   19f9c:	cmp	r0, r1, lsl #18
   19fa0:	adc	r2, r2, r2
   19fa4:	subcs	r0, r0, r1, lsl #18
   19fa8:	cmp	r0, r1, lsl #17
   19fac:	adc	r2, r2, r2
   19fb0:	subcs	r0, r0, r1, lsl #17
   19fb4:	cmp	r0, r1, lsl #16
   19fb8:	adc	r2, r2, r2
   19fbc:	subcs	r0, r0, r1, lsl #16
   19fc0:	cmp	r0, r1, lsl #15
   19fc4:	adc	r2, r2, r2
   19fc8:	subcs	r0, r0, r1, lsl #15
   19fcc:	cmp	r0, r1, lsl #14
   19fd0:	adc	r2, r2, r2
   19fd4:	subcs	r0, r0, r1, lsl #14
   19fd8:	cmp	r0, r1, lsl #13
   19fdc:	adc	r2, r2, r2
   19fe0:	subcs	r0, r0, r1, lsl #13
   19fe4:	cmp	r0, r1, lsl #12
   19fe8:	adc	r2, r2, r2
   19fec:	subcs	r0, r0, r1, lsl #12
   19ff0:	cmp	r0, r1, lsl #11
   19ff4:	adc	r2, r2, r2
   19ff8:	subcs	r0, r0, r1, lsl #11
   19ffc:	cmp	r0, r1, lsl #10
   1a000:	adc	r2, r2, r2
   1a004:	subcs	r0, r0, r1, lsl #10
   1a008:	cmp	r0, r1, lsl #9
   1a00c:	adc	r2, r2, r2
   1a010:	subcs	r0, r0, r1, lsl #9
   1a014:	cmp	r0, r1, lsl #8
   1a018:	adc	r2, r2, r2
   1a01c:	subcs	r0, r0, r1, lsl #8
   1a020:	cmp	r0, r1, lsl #7
   1a024:	adc	r2, r2, r2
   1a028:	subcs	r0, r0, r1, lsl #7
   1a02c:	cmp	r0, r1, lsl #6
   1a030:	adc	r2, r2, r2
   1a034:	subcs	r0, r0, r1, lsl #6
   1a038:	cmp	r0, r1, lsl #5
   1a03c:	adc	r2, r2, r2
   1a040:	subcs	r0, r0, r1, lsl #5
   1a044:	cmp	r0, r1, lsl #4
   1a048:	adc	r2, r2, r2
   1a04c:	subcs	r0, r0, r1, lsl #4
   1a050:	cmp	r0, r1, lsl #3
   1a054:	adc	r2, r2, r2
   1a058:	subcs	r0, r0, r1, lsl #3
   1a05c:	cmp	r0, r1, lsl #2
   1a060:	adc	r2, r2, r2
   1a064:	subcs	r0, r0, r1, lsl #2
   1a068:	cmp	r0, r1, lsl #1
   1a06c:	adc	r2, r2, r2
   1a070:	subcs	r0, r0, r1, lsl #1
   1a074:	cmp	r0, r1
   1a078:	adc	r2, r2, r2
   1a07c:	subcs	r0, r0, r1
   1a080:	mov	r0, r2
   1a084:	bx	lr
   1a088:	moveq	r0, #1
   1a08c:	movne	r0, #0
   1a090:	bx	lr
   1a094:	clz	r2, r1
   1a098:	rsb	r2, r2, #31
   1a09c:	lsr	r0, r0, r2
   1a0a0:	bx	lr
   1a0a4:	cmp	r0, #0
   1a0a8:	mvnne	r0, #0
   1a0ac:	b	1a310 <argp_parse@@Base+0x30a0>
   1a0b0:	cmp	r1, #0
   1a0b4:	beq	1a0a4 <argp_parse@@Base+0x2e34>
   1a0b8:	push	{r0, r1, lr}
   1a0bc:	bl	19ec4 <argp_parse@@Base+0x2c54>
   1a0c0:	pop	{r1, r2, lr}
   1a0c4:	mul	r3, r2, r0
   1a0c8:	sub	r1, r1, r3
   1a0cc:	bx	lr
   1a0d0:	cmp	r1, #0
   1a0d4:	beq	1a2e0 <argp_parse@@Base+0x3070>
   1a0d8:	eor	ip, r0, r1
   1a0dc:	rsbmi	r1, r1, #0
   1a0e0:	subs	r2, r1, #1
   1a0e4:	beq	1a2ac <argp_parse@@Base+0x303c>
   1a0e8:	movs	r3, r0
   1a0ec:	rsbmi	r3, r0, #0
   1a0f0:	cmp	r3, r1
   1a0f4:	bls	1a2b8 <argp_parse@@Base+0x3048>
   1a0f8:	tst	r1, r2
   1a0fc:	beq	1a2c8 <argp_parse@@Base+0x3058>
   1a100:	clz	r2, r3
   1a104:	clz	r0, r1
   1a108:	sub	r2, r0, r2
   1a10c:	rsbs	r2, r2, #31
   1a110:	addne	r2, r2, r2, lsl #1
   1a114:	mov	r0, #0
   1a118:	addne	pc, pc, r2, lsl #2
   1a11c:	nop			; (mov r0, r0)
   1a120:	cmp	r3, r1, lsl #31
   1a124:	adc	r0, r0, r0
   1a128:	subcs	r3, r3, r1, lsl #31
   1a12c:	cmp	r3, r1, lsl #30
   1a130:	adc	r0, r0, r0
   1a134:	subcs	r3, r3, r1, lsl #30
   1a138:	cmp	r3, r1, lsl #29
   1a13c:	adc	r0, r0, r0
   1a140:	subcs	r3, r3, r1, lsl #29
   1a144:	cmp	r3, r1, lsl #28
   1a148:	adc	r0, r0, r0
   1a14c:	subcs	r3, r3, r1, lsl #28
   1a150:	cmp	r3, r1, lsl #27
   1a154:	adc	r0, r0, r0
   1a158:	subcs	r3, r3, r1, lsl #27
   1a15c:	cmp	r3, r1, lsl #26
   1a160:	adc	r0, r0, r0
   1a164:	subcs	r3, r3, r1, lsl #26
   1a168:	cmp	r3, r1, lsl #25
   1a16c:	adc	r0, r0, r0
   1a170:	subcs	r3, r3, r1, lsl #25
   1a174:	cmp	r3, r1, lsl #24
   1a178:	adc	r0, r0, r0
   1a17c:	subcs	r3, r3, r1, lsl #24
   1a180:	cmp	r3, r1, lsl #23
   1a184:	adc	r0, r0, r0
   1a188:	subcs	r3, r3, r1, lsl #23
   1a18c:	cmp	r3, r1, lsl #22
   1a190:	adc	r0, r0, r0
   1a194:	subcs	r3, r3, r1, lsl #22
   1a198:	cmp	r3, r1, lsl #21
   1a19c:	adc	r0, r0, r0
   1a1a0:	subcs	r3, r3, r1, lsl #21
   1a1a4:	cmp	r3, r1, lsl #20
   1a1a8:	adc	r0, r0, r0
   1a1ac:	subcs	r3, r3, r1, lsl #20
   1a1b0:	cmp	r3, r1, lsl #19
   1a1b4:	adc	r0, r0, r0
   1a1b8:	subcs	r3, r3, r1, lsl #19
   1a1bc:	cmp	r3, r1, lsl #18
   1a1c0:	adc	r0, r0, r0
   1a1c4:	subcs	r3, r3, r1, lsl #18
   1a1c8:	cmp	r3, r1, lsl #17
   1a1cc:	adc	r0, r0, r0
   1a1d0:	subcs	r3, r3, r1, lsl #17
   1a1d4:	cmp	r3, r1, lsl #16
   1a1d8:	adc	r0, r0, r0
   1a1dc:	subcs	r3, r3, r1, lsl #16
   1a1e0:	cmp	r3, r1, lsl #15
   1a1e4:	adc	r0, r0, r0
   1a1e8:	subcs	r3, r3, r1, lsl #15
   1a1ec:	cmp	r3, r1, lsl #14
   1a1f0:	adc	r0, r0, r0
   1a1f4:	subcs	r3, r3, r1, lsl #14
   1a1f8:	cmp	r3, r1, lsl #13
   1a1fc:	adc	r0, r0, r0
   1a200:	subcs	r3, r3, r1, lsl #13
   1a204:	cmp	r3, r1, lsl #12
   1a208:	adc	r0, r0, r0
   1a20c:	subcs	r3, r3, r1, lsl #12
   1a210:	cmp	r3, r1, lsl #11
   1a214:	adc	r0, r0, r0
   1a218:	subcs	r3, r3, r1, lsl #11
   1a21c:	cmp	r3, r1, lsl #10
   1a220:	adc	r0, r0, r0
   1a224:	subcs	r3, r3, r1, lsl #10
   1a228:	cmp	r3, r1, lsl #9
   1a22c:	adc	r0, r0, r0
   1a230:	subcs	r3, r3, r1, lsl #9
   1a234:	cmp	r3, r1, lsl #8
   1a238:	adc	r0, r0, r0
   1a23c:	subcs	r3, r3, r1, lsl #8
   1a240:	cmp	r3, r1, lsl #7
   1a244:	adc	r0, r0, r0
   1a248:	subcs	r3, r3, r1, lsl #7
   1a24c:	cmp	r3, r1, lsl #6
   1a250:	adc	r0, r0, r0
   1a254:	subcs	r3, r3, r1, lsl #6
   1a258:	cmp	r3, r1, lsl #5
   1a25c:	adc	r0, r0, r0
   1a260:	subcs	r3, r3, r1, lsl #5
   1a264:	cmp	r3, r1, lsl #4
   1a268:	adc	r0, r0, r0
   1a26c:	subcs	r3, r3, r1, lsl #4
   1a270:	cmp	r3, r1, lsl #3
   1a274:	adc	r0, r0, r0
   1a278:	subcs	r3, r3, r1, lsl #3
   1a27c:	cmp	r3, r1, lsl #2
   1a280:	adc	r0, r0, r0
   1a284:	subcs	r3, r3, r1, lsl #2
   1a288:	cmp	r3, r1, lsl #1
   1a28c:	adc	r0, r0, r0
   1a290:	subcs	r3, r3, r1, lsl #1
   1a294:	cmp	r3, r1
   1a298:	adc	r0, r0, r0
   1a29c:	subcs	r3, r3, r1
   1a2a0:	cmp	ip, #0
   1a2a4:	rsbmi	r0, r0, #0
   1a2a8:	bx	lr
   1a2ac:	teq	ip, r0
   1a2b0:	rsbmi	r0, r0, #0
   1a2b4:	bx	lr
   1a2b8:	movcc	r0, #0
   1a2bc:	asreq	r0, ip, #31
   1a2c0:	orreq	r0, r0, #1
   1a2c4:	bx	lr
   1a2c8:	clz	r2, r1
   1a2cc:	rsb	r2, r2, #31
   1a2d0:	cmp	ip, #0
   1a2d4:	lsr	r0, r3, r2
   1a2d8:	rsbmi	r0, r0, #0
   1a2dc:	bx	lr
   1a2e0:	cmp	r0, #0
   1a2e4:	mvngt	r0, #-2147483648	; 0x80000000
   1a2e8:	movlt	r0, #-2147483648	; 0x80000000
   1a2ec:	b	1a310 <argp_parse@@Base+0x30a0>
   1a2f0:	cmp	r1, #0
   1a2f4:	beq	1a2e0 <argp_parse@@Base+0x3070>
   1a2f8:	push	{r0, r1, lr}
   1a2fc:	bl	1a0d8 <argp_parse@@Base+0x2e68>
   1a300:	pop	{r1, r2, lr}
   1a304:	mul	r3, r2, r0
   1a308:	sub	r1, r1, r3
   1a30c:	bx	lr
   1a310:	push	{r1, lr}
   1a314:	mov	r0, #8
   1a318:	bl	111fc <raise@plt>
   1a31c:	pop	{r1, pc}
   1a320:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a324:	mov	r7, r0
   1a328:	ldr	r6, [pc, #72]	; 1a378 <argp_parse@@Base+0x3108>
   1a32c:	ldr	r5, [pc, #72]	; 1a37c <argp_parse@@Base+0x310c>
   1a330:	add	r6, pc, r6
   1a334:	add	r5, pc, r5
   1a338:	sub	r6, r6, r5
   1a33c:	mov	r8, r1
   1a340:	mov	r9, r2
   1a344:	bl	111b8 <fdopen@plt-0x20>
   1a348:	asrs	r6, r6, #2
   1a34c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a350:	mov	r4, #0
   1a354:	add	r4, r4, #1
   1a358:	ldr	r3, [r5], #4
   1a35c:	mov	r2, r9
   1a360:	mov	r1, r8
   1a364:	mov	r0, r7
   1a368:	blx	r3
   1a36c:	cmp	r6, r4
   1a370:	bne	1a354 <argp_parse@@Base+0x30e4>
   1a374:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a378:	ldrdeq	r1, [r1], -r0
   1a37c:	andeq	r1, r1, r8, asr #23
   1a380:	bx	lr

Disassembly of section .fini:

0001a384 <.fini>:
   1a384:	push	{r3, lr}
   1a388:	pop	{r3, pc}
