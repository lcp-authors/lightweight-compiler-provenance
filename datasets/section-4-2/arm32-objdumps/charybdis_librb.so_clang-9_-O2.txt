
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004c2c <_init>:
    4c2c:	push	{r3, lr}
    4c30:	bl	5580 <call_weak_fn>
    4c34:	pop	{r3, pc}

Disassembly of section .plt:

00004c38 <.plt>:
    4c38:	push	{lr}		; (str lr, [sp, #-4]!)
    4c3c:	ldr	lr, [pc, #4]	; 4c48 <.plt+0x10>
    4c40:	add	lr, pc, lr
    4c44:	ldr	pc, [lr, #8]!
    4c48:	.word	0x000273b8

00004c4c <rb_helper_run@plt>:
    4c4c:	add	ip, pc, #0, 12
    4c50:	add	ip, ip, #159744	; 0x27000
    4c54:	ldr	pc, [ip, #952]!	; 0x3b8

00004c58 <TLS_method@plt>:
    4c58:	add	ip, pc, #0, 12
    4c5c:	add	ip, ip, #159744	; 0x27000
    4c60:	ldr	pc, [ip, #944]!	; 0x3b0

00004c64 <open@plt>:
    4c64:	add	ip, pc, #0, 12
    4c68:	add	ip, ip, #159744	; 0x27000
    4c6c:	ldr	pc, [ip, #936]!	; 0x3a8

00004c70 <rb_init_netio@plt>:
    4c70:	add	ip, pc, #0, 12
    4c74:	add	ip, ip, #159744	; 0x27000
    4c78:	ldr	pc, [ip, #928]!	; 0x3a0

00004c7c <sigemptyset@plt>:
    4c7c:	add	ip, pc, #0, 12
    4c80:	add	ip, ip, #159744	; 0x27000
    4c84:	ldr	pc, [ip, #920]!	; 0x398

00004c88 <strerror@plt>:
    4c88:	add	ip, pc, #0, 12
    4c8c:	add	ip, ip, #159744	; 0x27000
    4c90:	ldr	pc, [ip, #912]!	; 0x390

00004c94 <rb_radixtree_elem_delete@plt>:
    4c94:	add	ip, pc, #0, 12
    4c98:	add	ip, ip, #159744	; 0x27000
    4c9c:	ldr	pc, [ip, #904]!	; 0x388

00004ca0 <getdtablesize@plt>:
    4ca0:	add	ip, pc, #0, 12
    4ca4:	add	ip, ip, #159744	; 0x27000
    4ca8:	ldr	pc, [ip, #896]!	; 0x380

00004cac <abort@plt>:
    4cac:	add	ip, pc, #0, 12
    4cb0:	add	ip, ip, #159744	; 0x27000
    4cb4:	ldr	pc, [ip, #888]!	; 0x378

00004cb8 <connect@plt>:
    4cb8:	add	ip, pc, #0, 12
    4cbc:	add	ip, ip, #159744	; 0x27000
    4cc0:	ldr	pc, [ip, #880]!	; 0x370

00004cc4 <rb_ignore_errno@plt>:
    4cc4:	add	ip, pc, #0, 12
    4cc8:	add	ip, ip, #159744	; 0x27000
    4ccc:	ldr	pc, [ip, #872]!	; 0x368

00004cd0 <rb_settimeout@plt>:
    4cd0:	add	ip, pc, #0, 12
    4cd4:	add	ip, ip, #159744	; 0x27000
    4cd8:	ldr	pc, [ip, #864]!	; 0x360

00004cdc <SSL_CTX_set_cipher_list@plt>:
    4cdc:	add	ip, pc, #0, 12
    4ce0:	add	ip, ip, #159744	; 0x27000
    4ce4:	ldr	pc, [ip, #856]!	; 0x358

00004ce8 <ERR_get_error@plt>:
    4ce8:	add	ip, pc, #0, 12
    4cec:	add	ip, ip, #159744	; 0x27000
    4cf0:	ldr	pc, [ip, #848]!	; 0x350

00004cf4 <strcasestr@plt>:
    4cf4:	add	ip, pc, #0, 12
    4cf8:	add	ip, ip, #159744	; 0x27000
    4cfc:	ldr	pc, [ip, #840]!	; 0x348

00004d00 <rb_connect_tcp@plt>:
    4d00:	add	ip, pc, #0, 12
    4d04:	add	ip, ip, #159744	; 0x27000
    4d08:	ldr	pc, [ip, #832]!	; 0x340

00004d0c <RAND_load_file@plt>:
    4d0c:	add	ip, pc, #0, 12
    4d10:	add	ip, ip, #159744	; 0x27000
    4d14:	ldr	pc, [ip, #824]!	; 0x338

00004d18 <signalfd@plt>:
    4d18:	add	ip, pc, #0, 12
    4d1c:	add	ip, ip, #159744	; 0x27000
    4d20:	ldr	pc, [ip, #816]!	; 0x330

00004d24 <SSL_CTX_free@plt>:
    4d24:	add	ip, pc, #0, 12
    4d28:	add	ip, ip, #159744	; 0x27000
    4d2c:	ldr	pc, [ip, #808]!	; 0x328

00004d30 <rb_getmaxconnect@plt>:
    4d30:	add	ip, pc, #0, 12
    4d34:	add	ip, ip, #159744	; 0x27000
    4d38:	ldr	pc, [ip, #800]!	; 0x320

00004d3c <sigwaitinfo@plt>:
    4d3c:	add	ip, pc, #0, 12
    4d40:	add	ip, ip, #159744	; 0x27000
    4d44:	ldr	pc, [ip, #792]!	; 0x318

00004d48 <__libc_current_sigrtmin@plt>:
    4d48:	add	ip, pc, #0, 12
    4d4c:	add	ip, ip, #159744	; 0x27000
    4d50:	ldr	pc, [ip, #784]!	; 0x310

00004d54 <__xstat@plt>:
    4d54:	add	ip, pc, #0, 12
    4d58:	add	ip, ip, #159744	; 0x27000
    4d5c:	ldr	pc, [ip, #776]!	; 0x308

00004d60 <rb_event_delete@plt>:
    4d60:	add	ip, pc, #0, 12
    4d64:	add	ip, ip, #159744	; 0x27000
    4d68:	ldr	pc, [ip, #768]!	; 0x300

00004d6c <rb_setselect@plt>:
    4d6c:	add	ip, pc, #0, 12
    4d70:	add	ip, ip, #159744	; 0x27000
    4d74:	ldr	pc, [ip, #760]!	; 0x2f8

00004d78 <rb_fd_ssl@plt>:
    4d78:	add	ip, pc, #0, 12
    4d7c:	add	ip, ip, #159744	; 0x27000
    4d80:	ldr	pc, [ip, #752]!	; 0x2f0

00004d84 <sigtimedwait@plt>:
    4d84:	add	ip, pc, #0, 12
    4d88:	add	ip, ip, #159744	; 0x27000
    4d8c:	ldr	pc, [ip, #744]!	; 0x2e8

00004d90 <rb_setenv@plt>:
    4d90:	add	ip, pc, #0, 12
    4d94:	add	ip, ip, #159744	; 0x27000
    4d98:	ldr	pc, [ip, #736]!	; 0x2e0

00004d9c <signal@plt>:
    4d9c:	add	ip, pc, #0, 12
    4da0:	add	ip, ip, #159744	; 0x27000
    4da4:	ldr	pc, [ip, #728]!	; 0x2d8

00004da8 <rb_get_fd@plt>:
    4da8:	add	ip, pc, #0, 12
    4dac:	add	ip, ip, #159744	; 0x27000
    4db0:	ldr	pc, [ip, #720]!	; 0x2d0

00004db4 <epoll_create@plt>:
    4db4:	add	ip, pc, #0, 12
    4db8:	add	ip, ip, #159744	; 0x27000
    4dbc:	ldr	pc, [ip, #712]!	; 0x2c8

00004dc0 <rb_clear_patricia@plt>:
    4dc0:	add	ip, pc, #0, 12
    4dc4:	add	ip, ip, #159744	; 0x27000
    4dc8:	ldr	pc, [ip, #704]!	; 0x2c0

00004dcc <__gmon_start__@plt>:
    4dcc:	add	ip, pc, #0, 12
    4dd0:	add	ip, ip, #159744	; 0x27000
    4dd4:	ldr	pc, [ip, #696]!	; 0x2b8

00004dd8 <SSL_CTX_clear_options@plt>:
    4dd8:	add	ip, pc, #0, 12
    4ddc:	add	ip, ip, #159744	; 0x27000
    4de0:	ldr	pc, [ip, #688]!	; 0x2b0

00004de4 <SSL_get_current_cipher@plt>:
    4de4:	add	ip, pc, #0, 12
    4de8:	add	ip, ip, #159744	; 0x27000
    4dec:	ldr	pc, [ip, #680]!	; 0x2a8

00004df0 <timer_create@plt>:
    4df0:	add	ip, pc, #0, 12
    4df4:	add	ip, ip, #159744	; 0x27000
    4df8:	ldr	pc, [ip, #672]!	; 0x2a0

00004dfc <X509_get_X509_PUBKEY@plt>:
    4dfc:	add	ip, pc, #0, 12
    4e00:	add	ip, ip, #159744	; 0x27000
    4e04:	ldr	pc, [ip, #664]!	; 0x298

00004e08 <rb_select@plt>:
    4e08:	add	ip, pc, #0, 12
    4e0c:	add	ip, ip, #159744	; 0x27000
    4e10:	ldr	pc, [ip, #656]!	; 0x290

00004e14 <vsnprintf@plt>:
    4e14:	add	ip, pc, #0, 12
    4e18:	add	ip, ip, #159744	; 0x27000
    4e1c:	ldr	pc, [ip, #648]!	; 0x288

00004e20 <socketpair@plt>:
    4e20:	add	ip, pc, #0, 12
    4e24:	add	ip, ip, #159744	; 0x27000
    4e28:	ldr	pc, [ip, #640]!	; 0x280

00004e2c <strncpy@plt>:
    4e2c:	add	ip, pc, #0, 12
    4e30:	add	ip, ip, #159744	; 0x27000
    4e34:	ldr	pc, [ip, #632]!	; 0x278

00004e38 <fclose@plt>:
    4e38:	add	ip, pc, #0, 12
    4e3c:	add	ip, ip, #159744	; 0x27000
    4e40:	ldr	pc, [ip, #624]!	; 0x270

00004e44 <recv@plt>:
    4e44:	add	ip, pc, #0, 12
    4e48:	add	ip, ip, #159744	; 0x27000
    4e4c:	ldr	pc, [ip, #616]!	; 0x268

00004e50 <getenv@plt>:
    4e50:	add	ip, pc, #0, 12
    4e54:	add	ip, ip, #159744	; 0x27000
    4e58:	ldr	pc, [ip, #608]!	; 0x260

00004e5c <ERR_error_string_n@plt>:
    4e5c:	add	ip, pc, #0, 12
    4e60:	add	ip, ip, #159744	; 0x27000
    4e64:	ldr	pc, [ip, #600]!	; 0x258

00004e68 <strchr@plt>:
    4e68:	add	ip, pc, #0, 12
    4e6c:	add	ip, ip, #159744	; 0x27000
    4e70:	ldr	pc, [ip, #592]!	; 0x250

00004e74 <rb_gettimeofday@plt>:
    4e74:	add	ip, pc, #0, 12
    4e78:	add	ip, ip, #159744	; 0x27000
    4e7c:	ldr	pc, [ip, #584]!	; 0x248

00004e80 <strcasecmp@plt>:
    4e80:	add	ip, pc, #0, 12
    4e84:	add	ip, ip, #159744	; 0x27000
    4e88:	ldr	pc, [ip, #576]!	; 0x240

00004e8c <listen@plt>:
    4e8c:	add	ip, pc, #0, 12
    4e90:	add	ip, ip, #159744	; 0x27000
    4e94:	ldr	pc, [ip, #568]!	; 0x238

00004e98 <calloc@plt>:
    4e98:	add	ip, pc, #0, 12
    4e9c:	add	ip, ip, #159744	; 0x27000
    4ea0:	ldr	pc, [ip, #560]!	; 0x230

00004ea4 <SSL_write@plt>:
    4ea4:	add	ip, pc, #0, 12
    4ea8:	add	ip, ip, #159744	; 0x27000
    4eac:	ldr	pc, [ip, #552]!	; 0x228

00004eb0 <rb_event_init@plt>:
    4eb0:	add	ip, pc, #0, 12
    4eb4:	add	ip, ip, #159744	; 0x27000
    4eb8:	ldr	pc, [ip, #544]!	; 0x220

00004ebc <fopen@plt>:
    4ebc:	add	ip, pc, #0, 12
    4ec0:	add	ip, ip, #159744	; 0x27000
    4ec4:	ldr	pc, [ip, #536]!	; 0x218

00004ec8 <rb_set_nb@plt>:
    4ec8:	add	ip, pc, #0, 12
    4ecc:	add	ip, ip, #159744	; 0x27000
    4ed0:	ldr	pc, [ip, #528]!	; 0x210

00004ed4 <memset@plt>:
    4ed4:	add	ip, pc, #0, 12
    4ed8:	add	ip, ip, #159744	; 0x27000
    4edc:	ldr	pc, [ip, #520]!	; 0x208

00004ee0 <rb_inet_pton@plt>:
    4ee0:	add	ip, pc, #0, 12
    4ee4:	add	ip, ip, #159744	; 0x27000
    4ee8:	ldr	pc, [ip, #512]!	; 0x200

00004eec <rb_radixtree_stats@plt>:
    4eec:	add	ip, pc, #0, 12
    4ef0:	add	ip, ip, #159744	; 0x27000
    4ef4:	ldr	pc, [ip, #504]!	; 0x1f8

00004ef8 <strrchr@plt>:
    4ef8:	add	ip, pc, #0, 12
    4efc:	add	ip, ip, #159744	; 0x27000
    4f00:	ldr	pc, [ip, #496]!	; 0x1f0

00004f04 <rb_write@plt>:
    4f04:	add	ip, pc, #0, 12
    4f08:	add	ip, ip, #159744	; 0x27000
    4f0c:	ldr	pc, [ip, #488]!	; 0x1e8

00004f10 <SSL_set_fd@plt>:
    4f10:	add	ip, pc, #0, 12
    4f14:	add	ip, ip, #159744	; 0x27000
    4f18:	ldr	pc, [ip, #480]!	; 0x1e0

00004f1c <SSL_CTX_ctrl@plt>:
    4f1c:	add	ip, pc, #0, 12
    4f20:	add	ip, ip, #159744	; 0x27000
    4f24:	ldr	pc, [ip, #472]!	; 0x1d8

00004f28 <rb_linebuf_parse@plt>:
    4f28:	add	ip, pc, #0, 12
    4f2c:	add	ip, ip, #159744	; 0x27000
    4f30:	ldr	pc, [ip, #464]!	; 0x1d0

00004f34 <writev@plt>:
    4f34:	add	ip, pc, #0, 12
    4f38:	add	ip, ip, #159744	; 0x27000
    4f3c:	ldr	pc, [ip, #456]!	; 0x1c8

00004f40 <rb_fsnprint@plt>:
    4f40:	add	ip, pc, #0, 12
    4f44:	add	ip, ip, #159744	; 0x27000
    4f48:	ldr	pc, [ip, #448]!	; 0x1c0

00004f4c <rb_strlcpy@plt>:
    4f4c:	add	ip, pc, #0, 12
    4f50:	add	ip, ip, #159744	; 0x27000
    4f54:	ldr	pc, [ip, #440]!	; 0x1b8

00004f58 <rb_patricia_search_best2@plt>:
    4f58:	add	ip, pc, #0, 12
    4f5c:	add	ip, ip, #159744	; 0x27000
    4f60:	ldr	pc, [ip, #432]!	; 0x1b0

00004f64 <SSL_CIPHER_get_name@plt>:
    4f64:	add	ip, pc, #0, 12
    4f68:	add	ip, ip, #159744	; 0x27000
    4f6c:	ldr	pc, [ip, #424]!	; 0x1a8

00004f70 <posix_spawnattr_init@plt>:
    4f70:	add	ip, pc, #0, 12
    4f74:	add	ip, ip, #159744	; 0x27000
    4f78:	ldr	pc, [ip, #416]!	; 0x1a0

00004f7c <OpenSSL_version_num@plt>:
    4f7c:	add	ip, pc, #0, 12
    4f80:	add	ip, ip, #159744	; 0x27000
    4f84:	ldr	pc, [ip, #408]!	; 0x198

00004f88 <rb_kill@plt>:
    4f88:	add	ip, pc, #0, 12
    4f8c:	add	ip, ip, #159744	; 0x27000
    4f90:	ldr	pc, [ip, #400]!	; 0x190

00004f94 <free@plt>:
    4f94:	add	ip, pc, #0, 12
    4f98:	add	ip, ip, #159744	; 0x27000
    4f9c:	ldr	pc, [ip, #392]!	; 0x188

00004fa0 <sendmsg@plt>:
    4fa0:	add	ip, pc, #0, 12
    4fa4:	add	ip, ip, #159744	; 0x27000
    4fa8:	ldr	pc, [ip, #384]!	; 0x180

00004fac <read@plt>:
    4fac:	add	ip, pc, #0, 12
    4fb0:	add	ip, ip, #159744	; 0x27000
    4fb4:	ldr	pc, [ip, #376]!	; 0x178

00004fb8 <rb_radixtree_elem_add@plt>:
    4fb8:	add	ip, pc, #0, 12
    4fbc:	add	ip, ip, #159744	; 0x27000
    4fc0:	ldr	pc, [ip, #368]!	; 0x170

00004fc4 <write@plt>:
    4fc4:	add	ip, pc, #0, 12
    4fc8:	add	ip, ip, #159744	; 0x27000
    4fcc:	ldr	pc, [ip, #360]!	; 0x168

00004fd0 <SSL_new@plt>:
    4fd0:	add	ip, pc, #0, 12
    4fd4:	add	ip, ip, #159744	; 0x27000
    4fd8:	ldr	pc, [ip, #352]!	; 0x160

00004fdc <access@plt>:
    4fdc:	add	ip, pc, #0, 12
    4fe0:	add	ip, ip, #159744	; 0x27000
    4fe4:	ldr	pc, [ip, #344]!	; 0x158

00004fe8 <rb_lib_loop@plt>:
    4fe8:	add	ip, pc, #0, 12
    4fec:	add	ip, ip, #159744	; 0x27000
    4ff0:	ldr	pc, [ip, #336]!	; 0x150

00004ff4 <timer_settime@plt>:
    4ff4:	add	ip, pc, #0, 12
    4ff8:	add	ip, ip, #159744	; 0x27000
    4ffc:	ldr	pc, [ip, #328]!	; 0x148

00005000 <gettimeofday@plt>:
    5000:	add	ip, pc, #0, 12
    5004:	add	ip, ip, #159744	; 0x27000
    5008:	ldr	pc, [ip, #320]!	; 0x140

0000500c <accept@plt>:
    500c:	add	ip, pc, #0, 12
    5010:	add	ip, ip, #159744	; 0x27000
    5014:	ldr	pc, [ip, #312]!	; 0x138

00005018 <SSL_read@plt>:
    5018:	add	ip, pc, #0, 12
    501c:	add	ip, ip, #159744	; 0x27000
    5020:	ldr	pc, [ip, #304]!	; 0x130

00005024 <rb_read@plt>:
    5024:	add	ip, pc, #0, 12
    5028:	add	ip, ip, #159744	; 0x27000
    502c:	ldr	pc, [ip, #296]!	; 0x128

00005030 <socket@plt>:
    5030:	add	ip, pc, #0, 12
    5034:	add	ip, ip, #159744	; 0x27000
    5038:	ldr	pc, [ip, #288]!	; 0x120

0000503c <rb_linebuf_get@plt>:
    503c:	add	ip, pc, #0, 12
    5040:	add	ip, ip, #159744	; 0x27000
    5044:	ldr	pc, [ip, #280]!	; 0x118

00005048 <epoll_wait@plt>:
    5048:	add	ip, pc, #0, 12
    504c:	add	ip, ip, #159744	; 0x27000
    5050:	ldr	pc, [ip, #272]!	; 0x110

00005054 <SSL_do_handshake@plt>:
    5054:	add	ip, pc, #0, 12
    5058:	add	ip, ip, #159744	; 0x27000
    505c:	ldr	pc, [ip, #264]!	; 0x108

00005060 <rb_linebuf_flush@plt>:
    5060:	add	ip, pc, #0, 12
    5064:	add	ip, ip, #159744	; 0x27000
    5068:	ldr	pc, [ip, #256]!	; 0x100

0000506c <posix_spawn@plt>:
    506c:	add	ip, pc, #0, 12
    5070:	add	ip, ip, #159744	; 0x27000
    5074:	ldr	pc, [ip, #248]!	; 0xf8

00005078 <strlen@plt>:
    5078:	add	ip, pc, #0, 12
    507c:	add	ip, ip, #159744	; 0x27000
    5080:	ldr	pc, [ip, #240]!	; 0xf0

00005084 <rb_current_time@plt>:
    5084:	add	ip, pc, #0, 12
    5088:	add	ip, ip, #159744	; 0x27000
    508c:	ldr	pc, [ip, #232]!	; 0xe8

00005090 <strtoul@plt>:
    5090:	add	ip, pc, #0, 12
    5094:	add	ip, ip, #159744	; 0x27000
    5098:	ldr	pc, [ip, #224]!	; 0xe0

0000509c <memcpy@plt>:
    509c:	add	ip, pc, #0, 12
    50a0:	add	ip, ip, #159744	; 0x27000
    50a4:	ldr	pc, [ip, #216]!	; 0xd8

000050a8 <PEM_read_X509@plt>:
    50a8:	add	ip, pc, #0, 12
    50ac:	add	ip, ip, #159744	; 0x27000
    50b0:	ldr	pc, [ip, #208]!	; 0xd0

000050b4 <posix_spawnattr_setflags@plt>:
    50b4:	add	ip, pc, #0, 12
    50b8:	add	ip, ip, #159744	; 0x27000
    50bc:	ldr	pc, [ip, #200]!	; 0xc8

000050c0 <__ctype_tolower_loc@plt>:
    50c0:	add	ip, pc, #0, 12
    50c4:	add	ip, ip, #159744	; 0x27000
    50c8:	ldr	pc, [ip, #192]!	; 0xc0

000050cc <SSL_CTX_use_certificate_chain_file@plt>:
    50cc:	add	ip, pc, #0, 12
    50d0:	add	ip, ip, #159744	; 0x27000
    50d4:	ldr	pc, [ip, #184]!	; 0xb8

000050d8 <rb_free_rb_dlink_node@plt>:
    50d8:	add	ip, pc, #0, 12
    50dc:	add	ip, ip, #159744	; 0x27000
    50e0:	ldr	pc, [ip, #176]!	; 0xb0

000050e4 <SSL_CTX_set_options@plt>:
    50e4:	add	ip, pc, #0, 12
    50e8:	add	ip, ip, #159744	; 0x27000
    50ec:	ldr	pc, [ip, #168]!	; 0xa8

000050f0 <posix_spawnattr_destroy@plt>:
    50f0:	add	ip, pc, #0, 12
    50f4:	add	ip, ip, #159744	; 0x27000
    50f8:	ldr	pc, [ip, #160]!	; 0xa0

000050fc <bcmp@plt>:
    50fc:	add	ip, pc, #0, 12
    5100:	add	ip, ip, #159744	; 0x27000
    5104:	ldr	pc, [ip, #152]!	; 0x98

00005108 <rb_close@plt>:
    5108:	add	ip, pc, #0, 12
    510c:	add	ip, ip, #159744	; 0x27000
    5110:	ldr	pc, [ip, #144]!	; 0x90

00005114 <strtol@plt>:
    5114:	add	ip, pc, #0, 12
    5118:	add	ip, ip, #159744	; 0x27000
    511c:	ldr	pc, [ip, #136]!	; 0x88

00005120 <sigaddset@plt>:
    5120:	add	ip, pc, #0, 12
    5124:	add	ip, ip, #159744	; 0x27000
    5128:	ldr	pc, [ip, #128]!	; 0x80

0000512c <strcpy@plt>:
    512c:	add	ip, pc, #0, 12
    5130:	add	ip, ip, #159744	; 0x27000
    5134:	ldr	pc, [ip, #120]!	; 0x78

00005138 <waitpid@plt>:
    5138:	add	ip, pc, #0, 12
    513c:	add	ip, ip, #159744	; 0x27000
    5140:	ldr	pc, [ip, #112]!	; 0x70

00005144 <rb_run_one_event@plt>:
    5144:	add	ip, pc, #0, 12
    5148:	add	ip, ip, #159744	; 0x27000
    514c:	ldr	pc, [ip, #104]!	; 0x68

00005150 <strncat@plt>:
    5150:	add	ip, pc, #0, 12
    5154:	add	ip, ip, #159744	; 0x27000
    5158:	ldr	pc, [ip, #96]!	; 0x60

0000515c <rb_bh_free@plt>:
    515c:	add	ip, pc, #0, 12
    5160:	add	ip, ip, #159744	; 0x27000
    5164:	ldr	pc, [ip, #88]!	; 0x58

00005168 <rb_init_rb_dlink_nodes@plt>:
    5168:	add	ip, pc, #0, 12
    516c:	add	ip, ip, #159744	; 0x27000
    5170:	ldr	pc, [ip, #80]!	; 0x50

00005174 <EVP_sha1@plt>:
    5174:	add	ip, pc, #0, 12
    5178:	add	ip, ip, #159744	; 0x27000
    517c:	ldr	pc, [ip, #72]!	; 0x48

00005180 <rb_patricia_lookup@plt>:
    5180:	add	ip, pc, #0, 12
    5184:	add	ip, ip, #159744	; 0x27000
    5188:	ldr	pc, [ip, #64]!	; 0x40

0000518c <shutdown@plt>:
    518c:	add	ip, pc, #0, 12
    5190:	add	ip, ip, #159744	; 0x27000
    5194:	ldr	pc, [ip, #56]!	; 0x38

00005198 <bind@plt>:
    5198:	add	ip, pc, #0, 12
    519c:	add	ip, ip, #159744	; 0x27000
    51a0:	ldr	pc, [ip, #48]!	; 0x30

000051a4 <rb_lib_log@plt>:
    51a4:	add	ip, pc, #0, 12
    51a8:	add	ip, ip, #159744	; 0x27000
    51ac:	ldr	pc, [ip, #40]!	; 0x28

000051b0 <SSL_CTX_use_PrivateKey_file@plt>:
    51b0:	add	ip, pc, #0, 12
    51b4:	add	ip, ip, #159744	; 0x27000
    51b8:	ldr	pc, [ip, #32]!

000051bc <select@plt>:
    51bc:	add	ip, pc, #0, 12
    51c0:	add	ip, ip, #159744	; 0x27000
    51c4:	ldr	pc, [ip, #24]!

000051c8 <close@plt>:
    51c8:	add	ip, pc, #0, 12
    51cc:	add	ip, ip, #159744	; 0x27000
    51d0:	ldr	pc, [ip, #16]!

000051d4 <rb_bh_alloc@plt>:
    51d4:	add	ip, pc, #0, 12
    51d8:	add	ip, ip, #159744	; 0x27000
    51dc:	ldr	pc, [ip, #8]!

000051e0 <SSL_free@plt>:
    51e0:	add	ip, pc, #0, 12
    51e4:	add	ip, ip, #159744	; 0x27000
    51e8:	ldr	pc, [ip, #0]!

000051ec <rb_pipe@plt>:
    51ec:	add	ip, pc, #0, 12
    51f0:	add	ip, ip, #155648	; 0x26000
    51f4:	ldr	pc, [ip, #4088]!	; 0xff8

000051f8 <strncasecmp@plt>:
    51f8:	add	ip, pc, #0, 12
    51fc:	add	ip, ip, #155648	; 0x26000
    5200:	ldr	pc, [ip, #4080]!	; 0xff0

00005204 <rb_outofmemory@plt>:
    5204:	add	ip, pc, #0, 12
    5208:	add	ip, ip, #155648	; 0x26000
    520c:	ldr	pc, [ip, #4072]!	; 0xfe8

00005210 <rb_set_time@plt>:
    5210:	add	ip, pc, #0, 12
    5214:	add	ip, ip, #155648	; 0x26000
    5218:	ldr	pc, [ip, #4064]!	; 0xfe0

0000521c <rb_dictionary_stats@plt>:
    521c:	add	ip, pc, #0, 12
    5220:	add	ip, ip, #155648	; 0x26000
    5224:	ldr	pc, [ip, #4056]!	; 0xfd8

00005228 <malloc@plt>:
    5228:	add	ip, pc, #0, 12
    522c:	add	ip, ip, #155648	; 0x26000
    5230:	ldr	pc, [ip, #4048]!	; 0xfd0

00005234 <sigprocmask@plt>:
    5234:	add	ip, pc, #0, 12
    5238:	add	ip, ip, #155648	; 0x26000
    523c:	ldr	pc, [ip, #4040]!	; 0xfc8

00005240 <rb_event_run@plt>:
    5240:	add	ip, pc, #0, 12
    5244:	add	ip, ip, #155648	; 0x26000
    5248:	ldr	pc, [ip, #4032]!	; 0xfc0

0000524c <SSL_set_accept_state@plt>:
    524c:	add	ip, pc, #0, 12
    5250:	add	ip, ip, #155648	; 0x26000
    5254:	ldr	pc, [ip, #4024]!	; 0xfb8

00005258 <rb_init_bh@plt>:
    5258:	add	ip, pc, #0, 12
    525c:	add	ip, ip, #155648	; 0x26000
    5260:	ldr	pc, [ip, #4016]!	; 0xfb0

00005264 <PEM_read_DHparams@plt>:
    5264:	add	ip, pc, #0, 12
    5268:	add	ip, ip, #155648	; 0x26000
    526c:	ldr	pc, [ip, #4008]!	; 0xfa8

00005270 <gmtime_r@plt>:
    5270:	add	ip, pc, #0, 12
    5274:	add	ip, ip, #155648	; 0x26000
    5278:	ldr	pc, [ip, #4000]!	; 0xfa0

0000527c <poll@plt>:
    527c:	add	ip, pc, #0, 12
    5280:	add	ip, ip, #155648	; 0x26000
    5284:	ldr	pc, [ip, #3992]!	; 0xf98

00005288 <ASN1_item_digest@plt>:
    5288:	add	ip, pc, #0, 12
    528c:	add	ip, ip, #155648	; 0x26000
    5290:	ldr	pc, [ip, #3984]!	; 0xf90

00005294 <strnlen@plt>:
    5294:	add	ip, pc, #0, 12
    5298:	add	ip, ip, #155648	; 0x26000
    529c:	ldr	pc, [ip, #3976]!	; 0xf88

000052a0 <SSL_get_peer_certificate@plt>:
    52a0:	add	ip, pc, #0, 12
    52a4:	add	ip, ip, #155648	; 0x26000
    52a8:	ldr	pc, [ip, #3968]!	; 0xf80

000052ac <rb_lib_init@plt>:
    52ac:	add	ip, pc, #0, 12
    52b0:	add	ip, ip, #155648	; 0x26000
    52b4:	ldr	pc, [ip, #3960]!	; 0xf78

000052b8 <SSL_get_verify_result@plt>:
    52b8:	add	ip, pc, #0, 12
    52bc:	add	ip, ip, #155648	; 0x26000
    52c0:	ldr	pc, [ip, #3952]!	; 0xf70

000052c4 <strtok_r@plt>:
    52c4:	add	ip, pc, #0, 12
    52c8:	add	ip, ip, #155648	; 0x26000
    52cc:	ldr	pc, [ip, #3944]!	; 0xf68

000052d0 <rb_lib_restart@plt>:
    52d0:	add	ip, pc, #0, 12
    52d4:	add	ip, ip, #155648	; 0x26000
    52d8:	ldr	pc, [ip, #3936]!	; 0xf60

000052dc <DH_free@plt>:
    52dc:	add	ip, pc, #0, 12
    52e0:	add	ip, ip, #155648	; 0x26000
    52e4:	ldr	pc, [ip, #3928]!	; 0xf58

000052e8 <timer_delete@plt>:
    52e8:	add	ip, pc, #0, 12
    52ec:	add	ip, ip, #155648	; 0x26000
    52f0:	ldr	pc, [ip, #3920]!	; 0xf50

000052f4 <rb_open@plt>:
    52f4:	add	ip, pc, #0, 12
    52f8:	add	ip, ip, #155648	; 0x26000
    52fc:	ldr	pc, [ip, #3912]!	; 0xf48

00005300 <send@plt>:
    5300:	add	ip, pc, #0, 12
    5304:	add	ip, ip, #155648	; 0x26000
    5308:	ldr	pc, [ip, #3904]!	; 0xf40

0000530c <SSL_shutdown@plt>:
    530c:	add	ip, pc, #0, 12
    5310:	add	ip, ip, #155648	; 0x26000
    5314:	ldr	pc, [ip, #3896]!	; 0xf38

00005318 <rb_bh_create@plt>:
    5318:	add	ip, pc, #0, 12
    531c:	add	ip, ip, #155648	; 0x26000
    5320:	ldr	pc, [ip, #3888]!	; 0xf30

00005324 <dup2@plt>:
    5324:	add	ip, pc, #0, 12
    5328:	add	ip, ip, #155648	; 0x26000
    532c:	ldr	pc, [ip, #3880]!	; 0xf28

00005330 <getpid@plt>:
    5330:	add	ip, pc, #0, 12
    5334:	add	ip, ip, #155648	; 0x26000
    5338:	ldr	pc, [ip, #3872]!	; 0xf20

0000533c <rb_writev@plt>:
    533c:	add	ip, pc, #0, 12
    5340:	add	ip, ip, #155648	; 0x26000
    5344:	ldr	pc, [ip, #3864]!	; 0xf18

00005348 <RAND_bytes@plt>:
    5348:	add	ip, pc, #0, 12
    534c:	add	ip, ip, #155648	; 0x26000
    5350:	ldr	pc, [ip, #3856]!	; 0xf10

00005354 <rb_linebuf_newbuf@plt>:
    5354:	add	ip, pc, #0, 12
    5358:	add	ip, ip, #155648	; 0x26000
    535c:	ldr	pc, [ip, #3848]!	; 0xf08

00005360 <rb_fdlist_init@plt>:
    5360:	add	ip, pc, #0, 12
    5364:	add	ip, ip, #155648	; 0x26000
    5368:	ldr	pc, [ip, #3840]!	; 0xf00

0000536c <rb_event_add@plt>:
    536c:	add	ip, pc, #0, 12
    5370:	add	ip, ip, #155648	; 0x26000
    5374:	ldr	pc, [ip, #3832]!	; 0xef8

00005378 <readlink@plt>:
    5378:	add	ip, pc, #0, 12
    537c:	add	ip, ip, #155648	; 0x26000
    5380:	ldr	pc, [ip, #3824]!	; 0xef0

00005384 <SSL_CTX_new@plt>:
    5384:	add	ip, pc, #0, 12
    5388:	add	ip, ip, #155648	; 0x26000
    538c:	ldr	pc, [ip, #3816]!	; 0xee8

00005390 <recvmsg@plt>:
    5390:	add	ip, pc, #0, 12
    5394:	add	ip, ip, #155648	; 0x26000
    5398:	ldr	pc, [ip, #3808]!	; 0xee0

0000539c <rand@plt>:
    539c:	add	ip, pc, #0, 12
    53a0:	add	ip, ip, #155648	; 0x26000
    53a4:	ldr	pc, [ip, #3800]!	; 0xed8

000053a8 <rb_linebuf_init@plt>:
    53a8:	add	ip, pc, #0, 12
    53ac:	add	ip, ip, #155648	; 0x26000
    53b0:	ldr	pc, [ip, #3792]!	; 0xed0

000053b4 <__fxstat@plt>:
    53b4:	add	ip, pc, #0, 12
    53b8:	add	ip, ip, #155648	; 0x26000
    53bc:	ldr	pc, [ip, #3784]!	; 0xec8

000053c0 <SSL_set_connect_state@plt>:
    53c0:	add	ip, pc, #0, 12
    53c4:	add	ip, ip, #155648	; 0x26000
    53c8:	ldr	pc, [ip, #3776]!	; 0xec0

000053cc <rb_radixtree_elem_find@plt>:
    53cc:	add	ip, pc, #0, 12
    53d0:	add	ip, ip, #155648	; 0x26000
    53d4:	ldr	pc, [ip, #3768]!	; 0xeb8

000053d8 <rb_make_rb_dlink_node@plt>:
    53d8:	add	ip, pc, #0, 12
    53dc:	add	ip, ip, #155648	; 0x26000
    53e0:	ldr	pc, [ip, #3760]!	; 0xeb0

000053e4 <rb_strlcat@plt>:
    53e4:	add	ip, pc, #0, 12
    53e8:	add	ip, ip, #155648	; 0x26000
    53ec:	ldr	pc, [ip, #3752]!	; 0xea8

000053f0 <rb_spawn_process@plt>:
    53f0:	add	ip, pc, #0, 12
    53f4:	add	ip, ip, #155648	; 0x26000
    53f8:	ldr	pc, [ip, #3744]!	; 0xea0

000053fc <EVP_sha512@plt>:
    53fc:	add	ip, pc, #0, 12
    5400:	add	ip, ip, #155648	; 0x26000
    5404:	ldr	pc, [ip, #3736]!	; 0xe98

00005408 <snprintf@plt>:
    5408:	add	ip, pc, #0, 12
    540c:	add	ip, ip, #155648	; 0x26000
    5410:	ldr	pc, [ip, #3728]!	; 0xe90

00005414 <RAND_status@plt>:
    5414:	add	ip, pc, #0, 12
    5418:	add	ip, ip, #155648	; 0x26000
    541c:	ldr	pc, [ip, #3720]!	; 0xe88

00005420 <timerfd_create@plt>:
    5420:	add	ip, pc, #0, 12
    5424:	add	ip, ip, #155648	; 0x26000
    5428:	ldr	pc, [ip, #3712]!	; 0xe80

0000542c <EVP_sha256@plt>:
    542c:	add	ip, pc, #0, 12
    5430:	add	ip, ip, #155648	; 0x26000
    5434:	ldr	pc, [ip, #3704]!	; 0xe78

00005438 <strcspn@plt>:
    5438:	add	ip, pc, #0, 12
    543c:	add	ip, ip, #155648	; 0x26000
    5440:	ldr	pc, [ip, #3696]!	; 0xe70

00005444 <rb_linebuf_put@plt>:
    5444:	add	ip, pc, #0, 12
    5448:	add	ip, ip, #155648	; 0x26000
    544c:	ldr	pc, [ip, #3688]!	; 0xe68

00005450 <rb_listen@plt>:
    5450:	add	ip, pc, #0, 12
    5454:	add	ip, ip, #155648	; 0x26000
    5458:	ldr	pc, [ip, #3680]!	; 0xe60

0000545c <fcntl@plt>:
    545c:	add	ip, pc, #0, 12
    5460:	add	ip, ip, #155648	; 0x26000
    5464:	ldr	pc, [ip, #3672]!	; 0xe58

00005468 <strncmp@plt>:
    5468:	add	ip, pc, #0, 12
    546c:	add	ip, ip, #155648	; 0x26000
    5470:	ldr	pc, [ip, #3664]!	; 0xe50

00005474 <kill@plt>:
    5474:	add	ip, pc, #0, 12
    5478:	add	ip, ip, #155648	; 0x26000
    547c:	ldr	pc, [ip, #3656]!	; 0xe48

00005480 <nanosleep@plt>:
    5480:	add	ip, pc, #0, 12
    5484:	add	ip, ip, #155648	; 0x26000
    5488:	ldr	pc, [ip, #3648]!	; 0xe40

0000548c <rb_event_next@plt>:
    548c:	add	ip, pc, #0, 12
    5490:	add	ip, ip, #155648	; 0x26000
    5494:	ldr	pc, [ip, #3640]!	; 0xe38

00005498 <realloc@plt>:
    5498:	add	ip, pc, #0, 12
    549c:	add	ip, ip, #155648	; 0x26000
    54a0:	ldr	pc, [ip, #3632]!	; 0xe30

000054a4 <timerfd_settime@plt>:
    54a4:	add	ip, pc, #0, 12
    54a8:	add	ip, ip, #155648	; 0x26000
    54ac:	ldr	pc, [ip, #3624]!	; 0xe28

000054b0 <epoll_ctl@plt>:
    54b0:	add	ip, pc, #0, 12
    54b4:	add	ip, ip, #155648	; 0x26000
    54b8:	ldr	pc, [ip, #3616]!	; 0xe20

000054bc <X509_free@plt>:
    54bc:	add	ip, pc, #0, 12
    54c0:	add	ip, ip, #155648	; 0x26000
    54c4:	ldr	pc, [ip, #3608]!	; 0xe18

000054c8 <readv@plt>:
    54c8:	add	ip, pc, #0, 12
    54cc:	add	ip, ip, #155648	; 0x26000
    54d0:	ldr	pc, [ip, #3600]!	; 0xe10

000054d4 <getsockopt@plt>:
    54d4:	add	ip, pc, #0, 12
    54d8:	add	ip, ip, #155648	; 0x26000
    54dc:	ldr	pc, [ip, #3592]!	; 0xe08

000054e0 <pipe@plt>:
    54e0:	add	ip, pc, #0, 12
    54e4:	add	ip, ip, #155648	; 0x26000
    54e8:	ldr	pc, [ip, #3584]!	; 0xe00

000054ec <OpenSSL_version@plt>:
    54ec:	add	ip, pc, #0, 12
    54f0:	add	ip, ip, #155648	; 0x26000
    54f4:	ldr	pc, [ip, #3576]!	; 0xdf8

000054f8 <setsockopt@plt>:
    54f8:	add	ip, pc, #0, 12
    54fc:	add	ip, ip, #155648	; 0x26000
    5500:	ldr	pc, [ip, #3568]!	; 0xdf0

00005504 <SSL_get_error@plt>:
    5504:	add	ip, pc, #0, 12
    5508:	add	ip, ip, #155648	; 0x26000
    550c:	ldr	pc, [ip, #3560]!	; 0xde8

00005510 <SSL_get_version@plt>:
    5510:	add	ip, pc, #0, 12
    5514:	add	ip, ip, #155648	; 0x26000
    5518:	ldr	pc, [ip, #3552]!	; 0xde0

0000551c <memchr@plt>:
    551c:	add	ip, pc, #0, 12
    5520:	add	ip, ip, #155648	; 0x26000
    5524:	ldr	pc, [ip, #3544]!	; 0xdd8

00005528 <setenv@plt>:
    5528:	add	ip, pc, #0, 12
    552c:	add	ip, ip, #155648	; 0x26000
    5530:	ldr	pc, [ip, #3536]!	; 0xdd0

00005534 <strcmp@plt>:
    5534:	add	ip, pc, #0, 12
    5538:	add	ip, ip, #155648	; 0x26000
    553c:	ldr	pc, [ip, #3528]!	; 0xdc8

00005540 <__errno_location@plt>:
    5540:	add	ip, pc, #0, 12
    5544:	add	ip, ip, #155648	; 0x26000
    5548:	ldr	pc, [ip, #3520]!	; 0xdc0

0000554c <__cxa_finalize@plt>:
    554c:	add	ip, pc, #0, 12
    5550:	add	ip, ip, #155648	; 0x26000
    5554:	ldr	pc, [ip, #3512]!	; 0xdb8

00005558 <sprintf@plt>:
    5558:	add	ip, pc, #0, 12
    555c:	add	ip, ip, #155648	; 0x26000
    5560:	ldr	pc, [ip, #3504]!	; 0xdb0

00005564 <rb_bh_usage@plt>:
    5564:	add	ip, pc, #0, 12
    5568:	add	ip, ip, #155648	; 0x26000
    556c:	ldr	pc, [ip, #3496]!	; 0xda8

00005570 <SSL_CTX_set_verify@plt>:
    5570:	add	ip, pc, #0, 12
    5574:	add	ip, ip, #155648	; 0x26000
    5578:	ldr	pc, [ip, #3488]!	; 0xda0

Disassembly of section .text:

00005580 <call_weak_fn>:
    5580:	ldr	r3, [pc, #20]	; 559c <call_weak_fn+0x1c>
    5584:	ldr	r2, [pc, #20]	; 55a0 <call_weak_fn+0x20>
    5588:	add	r3, pc, r3
    558c:	ldr	r2, [r3, r2]
    5590:	cmp	r2, #0
    5594:	bxeq	lr
    5598:	b	4dcc <__gmon_start__@plt>
    559c:	.word	0x00026a70
    55a0:	.word	0x0000032c

000055a4 <deregister_tm_clones>:
    55a4:	ldr	r0, [pc, #44]	; 55d8 <deregister_tm_clones+0x34>
    55a8:	ldr	r3, [pc, #44]	; 55dc <deregister_tm_clones+0x38>
    55ac:	add	r0, pc, r0
    55b0:	add	r3, pc, r3
    55b4:	cmp	r3, r0
    55b8:	ldr	r3, [pc, #32]	; 55e0 <deregister_tm_clones+0x3c>
    55bc:	add	r3, pc, r3
    55c0:	bxeq	lr
    55c4:	ldr	r2, [pc, #24]	; 55e4 <deregister_tm_clones+0x40>
    55c8:	ldr	r3, [r3, r2]
    55cc:	cmp	r3, #0
    55d0:	bxeq	lr
    55d4:	bx	r3
    55d8:	.word	0x00026eec
    55dc:	.word	0x00026ee8
    55e0:	.word	0x00026a3c
    55e4:	.word	0x00000348

000055e8 <register_tm_clones>:
    55e8:	ldr	r0, [pc, #56]	; 5628 <register_tm_clones+0x40>
    55ec:	ldr	r3, [pc, #56]	; 562c <register_tm_clones+0x44>
    55f0:	add	r0, pc, r0
    55f4:	add	r3, pc, r3
    55f8:	sub	r1, r3, r0
    55fc:	ldr	r3, [pc, #44]	; 5630 <register_tm_clones+0x48>
    5600:	asr	r1, r1, #2
    5604:	add	r3, pc, r3
    5608:	add	r1, r1, r1, lsr #31
    560c:	asrs	r1, r1, #1
    5610:	bxeq	lr
    5614:	ldr	r2, [pc, #24]	; 5634 <register_tm_clones+0x4c>
    5618:	ldr	r3, [r3, r2]
    561c:	cmp	r3, #0
    5620:	bxeq	lr
    5624:	bx	r3
    5628:	.word	0x00026ea8
    562c:	.word	0x00026ea4
    5630:	.word	0x000269f4
    5634:	.word	0x00000358

00005638 <__do_global_dtors_aux>:
    5638:	ldr	r3, [pc, #76]	; 568c <__do_global_dtors_aux+0x54>
    563c:	ldr	r2, [pc, #76]	; 5690 <__do_global_dtors_aux+0x58>
    5640:	add	r3, pc, r3
    5644:	add	r2, pc, r2
    5648:	ldrb	r3, [r3]
    564c:	cmp	r3, #0
    5650:	bxne	lr
    5654:	ldr	r3, [pc, #56]	; 5694 <__do_global_dtors_aux+0x5c>
    5658:	push	{r4, lr}
    565c:	ldr	r3, [r2, r3]
    5660:	cmp	r3, #0
    5664:	beq	5674 <__do_global_dtors_aux+0x3c>
    5668:	ldr	r3, [pc, #40]	; 5698 <__do_global_dtors_aux+0x60>
    566c:	ldr	r0, [pc, r3]
    5670:	bl	554c <__cxa_finalize@plt>
    5674:	bl	55a4 <deregister_tm_clones>
    5678:	ldr	r3, [pc, #28]	; 569c <__do_global_dtors_aux+0x64>
    567c:	mov	r2, #1
    5680:	add	r3, pc, r3
    5684:	strb	r2, [r3]
    5688:	pop	{r4, pc}
    568c:	.word	0x00026e58
    5690:	.word	0x000269b4
    5694:	.word	0x000003e8
    5698:	.word	0x00026d7c
    569c:	.word	0x00026e18

000056a0 <frame_dummy>:
    56a0:	b	55e8 <register_tm_clones>

000056a4 <rb_spawn_process>:
    56a4:	push	{r4, r5, r6, sl, fp, lr}
    56a8:	add	fp, sp, #16
    56ac:	sub	sp, sp, #352	; 0x160
    56b0:	add	r6, sp, #12
    56b4:	mov	r5, r0
    56b8:	mov	r4, r1
    56bc:	mov	r0, r6
    56c0:	bl	4f70 <posix_spawnattr_init@plt>
    56c4:	mov	r0, r6
    56c8:	mov	r1, #64	; 0x40
    56cc:	bl	50b4 <posix_spawnattr_setflags@plt>
    56d0:	ldr	r0, [pc, #88]	; 5730 <rb_spawn_process+0x8c>
    56d4:	mov	r1, r5
    56d8:	mov	r2, #0
    56dc:	mov	r3, r6
    56e0:	ldr	r0, [pc, r0]
    56e4:	str	r4, [sp]
    56e8:	ldr	r0, [r0]
    56ec:	str	r0, [sp, #4]
    56f0:	sub	r0, fp, #20
    56f4:	bl	506c <posix_spawn@plt>
    56f8:	mov	r4, r0
    56fc:	mov	r0, r6
    5700:	bl	50f0 <posix_spawnattr_destroy@plt>
    5704:	cmp	r4, #0
    5708:	beq	5724 <rb_spawn_process+0x80>
    570c:	bl	5540 <__errno_location@plt>
    5710:	str	r4, [r0]
    5714:	mvn	r0, #0
    5718:	str	r0, [fp, #-20]	; 0xffffffec
    571c:	sub	sp, fp, #16
    5720:	pop	{r4, r5, r6, sl, fp, pc}
    5724:	ldr	r0, [fp, #-20]	; 0xffffffec
    5728:	sub	sp, fp, #16
    572c:	pop	{r4, r5, r6, sl, fp, pc}
    5730:	.word	0x00026c88

00005734 <rb_gettimeofday>:
    5734:	b	5000 <gettimeofday@plt>

00005738 <rb_sleep>:
    5738:	push	{fp, lr}
    573c:	mov	fp, sp
    5740:	sub	sp, sp, #8
    5744:	str	r0, [sp]
    5748:	mov	r0, #1000	; 0x3e8
    574c:	mul	r0, r1, r0
    5750:	mov	r1, #0
    5754:	str	r0, [sp, #4]
    5758:	mov	r0, sp
    575c:	bl	5480 <nanosleep@plt>
    5760:	mov	sp, fp
    5764:	pop	{fp, pc}

00005768 <rb_strerror>:
    5768:	b	4c88 <strerror@plt>

0000576c <rb_kill>:
    576c:	b	5474 <kill@plt>

00005770 <rb_setenv>:
    5770:	b	5528 <setenv@plt>

00005774 <rb_waitpid>:
    5774:	b	5138 <waitpid@plt>

00005778 <rb_getpid>:
    5778:	b	5330 <getpid@plt>

0000577c <rb_path_to_self>:
    577c:	push	{r4, sl, fp, lr}
    5780:	add	fp, sp, #8
    5784:	ldr	r0, [pc, #36]	; 57b0 <rb_path_to_self+0x34>
    5788:	ldr	r4, [pc, #36]	; 57b4 <rb_path_to_self+0x38>
    578c:	mov	r2, #4096	; 0x1000
    5790:	add	r4, pc, r4
    5794:	add	r0, pc, r0
    5798:	mov	r1, r4
    579c:	bl	5378 <readlink@plt>
    57a0:	mvn	r1, #0
    57a4:	subs	r0, r0, r1
    57a8:	movne	r0, r4
    57ac:	pop	{r4, sl, fp, pc}
    57b0:	.word	0x00013c24
    57b4:	.word	0x00026d09

000057b8 <rb_init_netio_win32>:
    57b8:	push	{fp, lr}
    57bc:	mov	fp, sp
    57c0:	bl	5540 <__errno_location@plt>
    57c4:	mov	r1, #38	; 0x26
    57c8:	str	r1, [r0]
    57cc:	mvn	r0, #0
    57d0:	pop	{fp, pc}

000057d4 <rb_setselect_win32>:
    57d4:	push	{fp, lr}
    57d8:	mov	fp, sp
    57dc:	bl	5540 <__errno_location@plt>
    57e0:	mov	r1, #38	; 0x26
    57e4:	str	r1, [r0]
    57e8:	pop	{fp, pc}

000057ec <rb_select_win32>:
    57ec:	push	{fp, lr}
    57f0:	mov	fp, sp
    57f4:	bl	5540 <__errno_location@plt>
    57f8:	mov	r1, #38	; 0x26
    57fc:	str	r1, [r0]
    5800:	mvn	r0, #0
    5804:	pop	{fp, pc}

00005808 <rb_setup_fd_win32>:
    5808:	push	{fp, lr}
    580c:	mov	fp, sp
    5810:	bl	5540 <__errno_location@plt>
    5814:	mov	r1, #38	; 0x26
    5818:	str	r1, [r0]
    581c:	mvn	r0, #0
    5820:	pop	{fp, pc}
	...

00005830 <rb_crypt>:
    5830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5834:	add	fp, sp, #28
    5838:	sub	sp, sp, #236	; 0xec
    583c:	mov	r4, r0
    5840:	ldrb	r0, [r1]
    5844:	mov	r7, r1
    5848:	cmp	r0, #36	; 0x24
    584c:	bne	58d0 <rb_crypt+0xa0>
    5850:	ldrb	r0, [r7, #2]
    5854:	cmp	r0, #36	; 0x24
    5858:	beq	5868 <rb_crypt+0x38>
    585c:	ldrb	r0, [r7, #3]
    5860:	cmp	r0, #36	; 0x24
    5864:	bne	58d0 <rb_crypt+0xa0>
    5868:	ldrb	r0, [r7, #1]
    586c:	mov	r6, #0
    5870:	cmp	r0, #54	; 0x36
    5874:	beq	5bd0 <rb_crypt+0x3a0>
    5878:	cmp	r0, #53	; 0x35
    587c:	beq	5c2c <rb_crypt+0x3fc>
    5880:	cmp	r0, #49	; 0x31
    5884:	bne	6330 <rb_crypt+0xb00>
    5888:	ldr	r5, [pc, #3984]	; 6820 <rb_crypt+0xff0>
    588c:	mov	r0, r7
    5890:	mov	r2, #3
    5894:	add	r5, pc, r5
    5898:	str	r7, [r5]
    589c:	ldr	r9, [pc, #3968]	; 6824 <rb_crypt+0xff4>
    58a0:	add	r9, pc, r9
    58a4:	mov	r1, r9
    58a8:	bl	5468 <strncmp@plt>
    58ac:	cmp	r0, #0
    58b0:	mov	r1, #0
    58b4:	addeq	r7, r7, #3
    58b8:	streq	r7, [r5]
    58bc:	mov	r5, r7
    58c0:	ldr	r0, [pc, #3936]	; 6828 <rb_crypt+0xff8>
    58c4:	add	r0, pc, r0
    58c8:	str	r7, [r0]
    58cc:	b	5c84 <rb_crypt+0x454>
    58d0:	str	r7, [sp, #12]
    58d4:	bl	6e7c <rb_des_init>
    58d8:	sub	r0, fp, #120	; 0x78
    58dc:	mov	r2, #255	; 0xff
    58e0:	orr	r1, r0, #1
    58e4:	mov	r3, r4
    58e8:	ldrb	r7, [r3], #1
    58ec:	tst	r2, r7, lsl #1
    58f0:	lsl	r6, r7, #1
    58f4:	strb	r6, [r1, #-1]
    58f8:	movne	r4, r3
    58fc:	sub	r3, r1, r0
    5900:	add	r1, r1, #1
    5904:	cmp	r3, #8
    5908:	bne	58e4 <rb_crypt+0xb4>
    590c:	bl	6e7c <rb_des_init>
    5910:	ldr	r0, [fp, #-120]	; 0xffffff88
    5914:	ldr	r2, [fp, #-116]	; 0xffffff8c
    5918:	rev	r1, r0
    591c:	rev	r0, r2
    5920:	ldr	r2, [pc, #3844]	; 682c <rb_crypt+0xffc>
    5924:	ldr	r2, [pc, r2]
    5928:	cmp	r0, r2
    592c:	bne	5948 <rb_crypt+0x118>
    5930:	ldr	r2, [pc, #3832]	; 6830 <rb_crypt+0x1000>
    5934:	ldr	r2, [pc, r2]
    5938:	cmp	r1, r2
    593c:	bne	5948 <rb_crypt+0x118>
    5940:	orrs	r2, r0, r1
    5944:	bne	5b8c <rb_crypt+0x35c>
    5948:	ldr	r2, [pc, #4088]	; 6948 <rb_crypt+0x1118>
    594c:	lsr	ip, r1, #25
    5950:	and	sl, r1, #254	; 0xfe
    5954:	add	r2, pc, r2
    5958:	str	r0, [r2]
    595c:	ldr	r2, [pc, #4072]	; 694c <rb_crypt+0x111c>
    5960:	add	r2, pc, r2
    5964:	str	r1, [r2]
    5968:	ldr	r2, [pc, #4064]	; 6950 <rb_crypt+0x1120>
    596c:	add	r2, pc, r2
    5970:	ldr	r7, [r2, ip, lsl #2]
    5974:	ubfx	lr, r1, #17, #7
    5978:	add	r5, r2, lr, lsl #2
    597c:	ldr	r5, [r5, #512]	; 0x200
    5980:	ubfx	r8, r1, #9, #7
    5984:	add	r4, r2, r8, lsl #2
    5988:	ldr	r4, [r4, #1024]	; 0x400
    598c:	orr	r7, r5, r7
    5990:	orr	r7, r7, r4
    5994:	add	r4, r2, sl, lsl #1
    5998:	ldr	r4, [r4, #1536]	; 0x600
    599c:	orr	r7, r7, r4
    59a0:	lsr	r4, r0, #25
    59a4:	add	r3, r2, r4, lsl #2
    59a8:	ldr	r3, [r3, #2048]	; 0x800
    59ac:	orr	r3, r7, r3
    59b0:	ubfx	r7, r0, #17, #7
    59b4:	add	r6, r2, r7, lsl #2
    59b8:	ldr	r6, [r6, #2560]	; 0xa00
    59bc:	orr	r3, r3, r6
    59c0:	ubfx	r6, r0, #9, #7
    59c4:	and	r0, r0, #254	; 0xfe
    59c8:	add	r5, r2, r6, lsl #2
    59cc:	add	r2, r2, r0, lsl #1
    59d0:	ldr	r5, [r5, #3072]	; 0xc00
    59d4:	ldr	r2, [r2, #3584]	; 0xe00
    59d8:	orr	r3, r3, r5
    59dc:	orr	r1, r3, r2
    59e0:	str	r1, [sp, #32]
    59e4:	ldr	r3, [pc, #4068]	; 69d0 <rb_crypt+0x11a0>
    59e8:	add	r3, pc, r3
    59ec:	add	r1, r3, lr, lsl #2
    59f0:	ldr	r5, [r3, ip, lsl #2]
    59f4:	add	r7, r3, r7, lsl #2
    59f8:	add	r0, r3, r0, lsl #1
    59fc:	ldr	r1, [r1, #512]	; 0x200
    5a00:	ldr	r7, [r7, #2560]	; 0xa00
    5a04:	ldr	r0, [r0, #3584]	; 0xe00
    5a08:	orr	r1, r1, r5
    5a0c:	add	r5, r3, r8, lsl #2
    5a10:	ldr	r5, [r5, #1024]	; 0x400
    5a14:	orr	r1, r1, r5
    5a18:	add	r5, r3, sl, lsl #1
    5a1c:	ldr	r5, [r5, #1536]	; 0x600
    5a20:	orr	r1, r1, r5
    5a24:	add	r5, r3, r4, lsl #2
    5a28:	ldr	r5, [r5, #2048]	; 0x800
    5a2c:	orr	r1, r1, r5
    5a30:	orr	r1, r1, r7
    5a34:	add	r7, r3, r6, lsl #2
    5a38:	mov	r6, #0
    5a3c:	ldr	r7, [r7, #3072]	; 0xc00
    5a40:	orr	r1, r1, r7
    5a44:	orr	r0, r1, r0
    5a48:	mov	r1, #0
    5a4c:	str	r0, [sp, #28]
    5a50:	ldr	lr, [pc, #4056]	; 6a30 <rb_crypt+0x1200>
    5a54:	add	lr, pc, lr
    5a58:	ldr	r0, [pc, #4052]	; 6a34 <rb_crypt+0x1204>
    5a5c:	add	r0, pc, r0
    5a60:	ldrb	r3, [r0, r6]
    5a64:	ldr	r0, [sp, #28]
    5a68:	add	r1, r1, r3
    5a6c:	rsb	r2, r1, #28
    5a70:	lsr	r3, r0, r2
    5a74:	orr	r0, r3, r0, lsl r1
    5a78:	ubfx	r7, r0, #14, #7
    5a7c:	add	r3, lr, r7, lsl #2
    5a80:	str	r7, [sp, #36]	; 0x24
    5a84:	ldr	r3, [r3, #512]	; 0x200
    5a88:	ubfx	sl, r0, #21, #7
    5a8c:	ldr	r5, [lr, sl, lsl #2]
    5a90:	ubfx	r9, r0, #7, #7
    5a94:	add	ip, lr, r9, lsl #2
    5a98:	ldr	r7, [ip, #1024]	; 0x400
    5a9c:	and	ip, r0, #127	; 0x7f
    5aa0:	ldr	r0, [sp, #32]
    5aa4:	orr	r5, r3, r5
    5aa8:	orr	r7, r5, r7
    5aac:	add	r5, lr, ip, lsl #2
    5ab0:	lsr	r2, r0, r2
    5ab4:	orr	r2, r2, r0, lsl r1
    5ab8:	ldr	r5, [r5, #1536]	; 0x600
    5abc:	orr	r7, r7, r5
    5ac0:	ubfx	r5, r2, #21, #7
    5ac4:	add	r3, lr, r5, lsl #2
    5ac8:	ldr	r3, [r3, #2048]	; 0x800
    5acc:	orr	r3, r7, r3
    5ad0:	ubfx	r7, r2, #14, #7
    5ad4:	add	r0, lr, r7, lsl #2
    5ad8:	ldr	r0, [r0, #2560]	; 0xa00
    5adc:	orr	r0, r3, r0
    5ae0:	ubfx	r3, r2, #7, #7
    5ae4:	add	r8, lr, r3, lsl #2
    5ae8:	ldr	r4, [r8, #3072]	; 0xc00
    5aec:	and	r8, r2, #127	; 0x7f
    5af0:	orr	r0, r0, r4
    5af4:	add	r4, lr, r8, lsl #2
    5af8:	ldr	r4, [r4, #3584]	; 0xe00
    5afc:	orr	r0, r0, r4
    5b00:	ldr	r4, [pc, #4016]	; 6ab8 <rb_crypt+0x1288>
    5b04:	add	r4, pc, r4
    5b08:	str	r0, [r4, r6, lsl #2]
    5b0c:	ldr	r0, [pc, #4008]	; 6abc <rb_crypt+0x128c>
    5b10:	ldr	r4, [sp, #36]	; 0x24
    5b14:	add	r0, pc, r0
    5b18:	mov	r2, r0
    5b1c:	ldr	r0, [r0, sl, lsl #2]
    5b20:	add	r4, r2, r4, lsl #2
    5b24:	add	r5, r2, r5, lsl #2
    5b28:	add	r7, r2, r7, lsl #2
    5b2c:	add	r3, r2, r3, lsl #2
    5b30:	ldr	r4, [r4, #512]	; 0x200
    5b34:	ldr	r5, [r5, #2048]	; 0x800
    5b38:	ldr	r7, [r7, #2560]	; 0xa00
    5b3c:	ldr	r3, [r3, #3072]	; 0xc00
    5b40:	orr	r0, r4, r0
    5b44:	add	r4, r2, r9, lsl #2
    5b48:	ldr	r4, [r4, #1024]	; 0x400
    5b4c:	orr	r0, r0, r4
    5b50:	add	r4, r2, ip, lsl #2
    5b54:	add	r2, r2, r8, lsl #2
    5b58:	ldr	r4, [r4, #1536]	; 0x600
    5b5c:	ldr	r2, [r2, #3584]	; 0xe00
    5b60:	orr	r0, r0, r4
    5b64:	orr	r0, r0, r5
    5b68:	orr	r0, r0, r7
    5b6c:	orr	r0, r0, r3
    5b70:	orr	r0, r0, r2
    5b74:	ldr	r2, [pc, #4092]	; 6b78 <rb_crypt+0x1348>
    5b78:	add	r2, pc, r2
    5b7c:	str	r0, [r2, r6, lsl #2]
    5b80:	add	r6, r6, #1
    5b84:	cmp	r6, #16
    5b88:	bne	5a58 <rb_crypt+0x228>
    5b8c:	ldr	r7, [sp, #12]
    5b90:	mov	r1, #0
    5b94:	mov	r2, #0
    5b98:	ldrb	r0, [r7, #1]
    5b9c:	cmp	r0, #122	; 0x7a
    5ba0:	bhi	5eb4 <rb_crypt+0x684>
    5ba4:	cmp	r0, #97	; 0x61
    5ba8:	bcc	5bb4 <rb_crypt+0x384>
    5bac:	sub	r2, r0, #59	; 0x3b
    5bb0:	b	5eb4 <rb_crypt+0x684>
    5bb4:	cmp	r0, #90	; 0x5a
    5bb8:	mov	r2, #0
    5bbc:	bhi	5eb4 <rb_crypt+0x684>
    5bc0:	cmp	r0, #65	; 0x41
    5bc4:	bcc	5ea4 <rb_crypt+0x674>
    5bc8:	sub	r2, r0, #53	; 0x35
    5bcc:	b	5eb4 <rb_crypt+0x684>
    5bd0:	mov	r0, r7
    5bd4:	bl	5078 <strlen@plt>
    5bd8:	ldr	r2, [pc, #3996]	; 6b7c <rb_crypt+0x134c>
    5bdc:	add	r5, r0, #109	; 0x6d
    5be0:	ldr	r2, [pc, r2]
    5be4:	ldr	r0, [pc, #3988]	; 6b80 <rb_crypt+0x1350>
    5be8:	ldr	r0, [pc, r0]
    5bec:	cmp	r0, r5
    5bf0:	bge	5da4 <rb_crypt+0x574>
    5bf4:	mov	r0, r2
    5bf8:	mov	r1, r5
    5bfc:	bl	5498 <realloc@plt>
    5c00:	cmp	r0, #0
    5c04:	mov	r6, #0
    5c08:	beq	6330 <rb_crypt+0xb00>
    5c0c:	mov	r2, r0
    5c10:	ldr	r0, [pc, #3948]	; 6b84 <rb_crypt+0x1354>
    5c14:	add	r0, pc, r0
    5c18:	str	r5, [r0]
    5c1c:	ldr	r0, [pc, #4092]	; 6c20 <rb_crypt+0x13f0>
    5c20:	add	r0, pc, r0
    5c24:	str	r2, [r0]
    5c28:	b	5da8 <rb_crypt+0x578>
    5c2c:	mov	r0, r7
    5c30:	bl	5078 <strlen@plt>
    5c34:	add	r5, r0, #66	; 0x42
    5c38:	mov	r0, r5
    5c3c:	bl	5228 <malloc@plt>
    5c40:	mov	r6, #0
    5c44:	cmp	r0, #0
    5c48:	beq	6330 <rb_crypt+0xb00>
    5c4c:	mov	r2, r0
    5c50:	ldr	r0, [pc, #4044]	; 6c24 <rb_crypt+0x13f4>
    5c54:	mov	r1, r7
    5c58:	mov	r3, r5
    5c5c:	add	r0, pc, r0
    5c60:	str	r2, [r0]
    5c64:	mov	r0, r4
    5c68:	sub	sp, fp, #28
    5c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c70:	b	8990 <rb_sha256_crypt_r>
    5c74:	add	r2, r7, r1
    5c78:	add	r1, r1, #1
    5c7c:	add	r5, r2, #1
    5c80:	str	r5, [r0]
    5c84:	ldrb	r2, [r7, r1]
    5c88:	cmp	r2, #0
    5c8c:	beq	5c9c <rb_crypt+0x46c>
    5c90:	cmp	r2, #36	; 0x24
    5c94:	cmpne	r1, #8
    5c98:	bne	5c74 <rb_crypt+0x444>
    5c9c:	str	r7, [sp, #12]
    5ca0:	add	r0, pc, #664	; 0x298
    5ca4:	sub	r8, fp, #120	; 0x78
    5ca8:	vld1.64	{d16-d17}, [r0 :128]
    5cac:	mov	r6, r8
    5cb0:	mov	r0, r4
    5cb4:	vst1.32	{d16-d17}, [r6]!
    5cb8:	bl	5078 <strlen@plt>
    5cbc:	mov	r7, r0
    5cc0:	lsr	r1, r0, #29
    5cc4:	lsl	r0, r0, #3
    5cc8:	strd	r0, [r6]
    5ccc:	mov	r0, #0
    5cd0:	cmp	r7, #64	; 0x40
    5cd4:	bcc	5d54 <rb_crypt+0x524>
    5cd8:	add	r3, r4, #32
    5cdc:	mov	r0, #48	; 0x30
    5ce0:	mov	r2, r4
    5ce4:	add	r1, r8, #24
    5ce8:	vld1.8	{d16-d17}, [r2], r0
    5cec:	add	r0, r4, #16
    5cf0:	vld1.8	{d18-d19}, [r3]
    5cf4:	vld1.8	{d20-d21}, [r0]
    5cf8:	vld1.8	{d22-d23}, [r2]
    5cfc:	add	r0, r8, #56	; 0x38
    5d00:	vst1.64	{d18-d19}, [r0]
    5d04:	add	r0, r8, #40	; 0x28
    5d08:	vst1.64	{d16-d17}, [r1]
    5d0c:	vst1.64	{d20-d21}, [r0]
    5d10:	add	r0, r8, #72	; 0x48
    5d14:	vst1.64	{d22-d23}, [r0]
    5d18:	mov	r0, r8
    5d1c:	bl	7f64 <MD5Transform>
    5d20:	mov	r0, #64	; 0x40
    5d24:	cmp	r7, #128	; 0x80
    5d28:	bcc	5d54 <rb_crypt+0x524>
    5d2c:	mov	r6, #64	; 0x40
    5d30:	sub	sl, fp, #120	; 0x78
    5d34:	add	r1, r4, r6
    5d38:	mov	r0, sl
    5d3c:	bl	7f64 <MD5Transform>
    5d40:	add	r1, r6, #127	; 0x7f
    5d44:	add	r0, r6, #64	; 0x40
    5d48:	cmp	r1, r7
    5d4c:	mov	r6, r0
    5d50:	bcc	5d34 <rb_crypt+0x504>
    5d54:	add	r1, r4, r0
    5d58:	sub	r2, r7, r0
    5d5c:	add	r0, r8, #24
    5d60:	str	r0, [sp, #32]
    5d64:	bl	509c <memcpy@plt>
    5d68:	ldr	r0, [fp, #-104]	; 0xffffff98
    5d6c:	ldr	r6, [fp, #-100]	; 0xffffff9c
    5d70:	adds	sl, r0, #24
    5d74:	str	sl, [fp, #-104]	; 0xffffff98
    5d78:	ubfx	r0, r0, #3, #6
    5d7c:	ldr	r1, [sp, #12]
    5d80:	addcs	r6, r6, #1
    5d84:	strcs	r6, [fp, #-100]	; 0xffffff9c
    5d88:	cmp	r0, #61	; 0x3d
    5d8c:	str	r6, [fp, #-100]	; 0xffffff9c
    5d90:	sub	r1, r5, r1
    5d94:	str	r1, [sp, #24]
    5d98:	bcs	5dc0 <rb_crypt+0x590>
    5d9c:	mov	r7, #0
    5da0:	b	5df4 <rb_crypt+0x5c4>
    5da4:	mov	r5, r0
    5da8:	mov	r0, r4
    5dac:	mov	r1, r7
    5db0:	mov	r3, r5
    5db4:	sub	sp, fp, #28
    5db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dbc:	b	9e60 <rb_sha512_crypt_r>
    5dc0:	ldr	r1, [pc, #3748]	; 6c6c <rb_crypt+0x143c>
    5dc4:	rsb	r7, r0, #64	; 0x40
    5dc8:	add	r0, r8, r0
    5dcc:	add	r0, r0, #24
    5dd0:	mov	r2, r7
    5dd4:	add	r1, pc, r1
    5dd8:	bl	509c <memcpy@plt>
    5ddc:	ldr	r1, [sp, #32]
    5de0:	mov	r0, r8
    5de4:	bl	7f64 <MD5Transform>
    5de8:	ldr	sl, [fp, #-104]	; 0xffffff98
    5dec:	ldr	r6, [fp, #-100]	; 0xffffff9c
    5df0:	mov	r0, #0
    5df4:	add	r0, r8, r0
    5df8:	add	r1, r9, r7
    5dfc:	rsb	r2, r7, #3
    5e00:	add	r0, r0, #24
    5e04:	bl	509c <memcpy@plt>
    5e08:	ldr	r5, [sp, #24]
    5e0c:	mov	r7, #0
    5e10:	add	r0, sl, r5, lsl #3
    5e14:	cmp	r0, sl
    5e18:	str	r0, [fp, #-104]	; 0xffffff98
    5e1c:	ubfx	r9, sl, #3, #6
    5e20:	ldr	sl, [sp, #12]
    5e24:	addcc	r6, r6, #1
    5e28:	add	r0, r6, r5, lsr #29
    5e2c:	strcc	r6, [fp, #-100]	; 0xffffff9c
    5e30:	rsb	r6, r9, #64	; 0x40
    5e34:	cmp	r6, r5
    5e38:	str	r0, [fp, #-100]	; 0xffffff9c
    5e3c:	mov	r0, #0
    5e40:	bhi	6344 <rb_crypt+0xb14>
    5e44:	add	r0, r8, r9
    5e48:	mov	r1, sl
    5e4c:	mov	r2, r6
    5e50:	add	r0, r0, #24
    5e54:	bl	509c <memcpy@plt>
    5e58:	ldr	r1, [sp, #32]
    5e5c:	mov	r0, r8
    5e60:	bl	7f64 <MD5Transform>
    5e64:	eor	r0, r9, #127	; 0x7f
    5e68:	mov	r9, #0
    5e6c:	cmp	r0, r5
    5e70:	bcs	633c <rb_crypt+0xb0c>
    5e74:	ldr	r5, [sp, #24]
    5e78:	sub	r9, fp, #120	; 0x78
    5e7c:	add	r1, sl, r6
    5e80:	mov	r0, r9
    5e84:	bl	7f64 <MD5Transform>
    5e88:	add	r1, r6, #127	; 0x7f
    5e8c:	add	r0, r6, #64	; 0x40
    5e90:	cmp	r1, r5
    5e94:	mov	r6, r0
    5e98:	bcc	5e7c <rb_crypt+0x64c>
    5e9c:	mov	r9, #0
    5ea0:	b	6344 <rb_crypt+0xb14>
    5ea4:	sub	r2, r0, #46	; 0x2e
    5ea8:	uxtb	r3, r2
    5eac:	cmp	r3, #12
    5eb0:	movcs	r2, #0
    5eb4:	ldrb	r3, [r7]
    5eb8:	lsl	r2, r2, #6
    5ebc:	cmp	r3, #122	; 0x7a
    5ec0:	bhi	5efc <rb_crypt+0x6cc>
    5ec4:	cmp	r3, #97	; 0x61
    5ec8:	bcc	5ed4 <rb_crypt+0x6a4>
    5ecc:	sub	r1, r3, #59	; 0x3b
    5ed0:	b	5efc <rb_crypt+0x6cc>
    5ed4:	cmp	r3, #90	; 0x5a
    5ed8:	bhi	5efc <rb_crypt+0x6cc>
    5edc:	cmp	r3, #65	; 0x41
    5ee0:	bcc	5eec <rb_crypt+0x6bc>
    5ee4:	sub	r1, r3, #53	; 0x35
    5ee8:	b	5efc <rb_crypt+0x6cc>
    5eec:	sub	r1, r3, #46	; 0x2e
    5ef0:	uxtb	r7, r1
    5ef4:	cmp	r7, #12
    5ef8:	movcs	r1, #0
    5efc:	ldr	r7, [pc, #3892]	; 6e38 <rb_crypt+0x1608>
    5f00:	cmp	r0, #0
    5f04:	add	r7, pc, r7
    5f08:	strb	r3, [r7]
    5f0c:	movne	r3, r0
    5f10:	orr	r0, r1, r2
    5f14:	strb	r3, [r7, #1]
    5f18:	ldr	r1, [pc, #3868]	; 6e3c <rb_crypt+0x160c>
    5f1c:	ldr	r1, [pc, r1]
    5f20:	cmp	r1, r0
    5f24:	bne	5f50 <rb_crypt+0x720>
    5f28:	ldr	r2, [pc, #3856]	; 6e40 <rb_crypt+0x1610>
    5f2c:	ldr	r2, [pc, r2]
    5f30:	b	5f94 <rb_crypt+0x764>
    5f34:	nop	{0}
    5f38:	nop	{0}
    5f3c:	nop	{0}
    5f40:	.word	0x67452301
    5f44:	.word	0xefcdab89
    5f48:	.word	0x98badcfe
    5f4c:	.word	0x10325476
    5f50:	ldr	r1, [pc, #3820]	; 6e44 <rb_crypt+0x1614>
    5f54:	mov	r2, #0
    5f58:	mov	r7, #1
    5f5c:	mov	r6, #24
    5f60:	add	r1, pc, r1
    5f64:	str	r2, [r1]
    5f68:	ldr	r3, [pc, #3800]	; 6e48 <rb_crypt+0x1618>
    5f6c:	add	r3, pc, r3
    5f70:	str	r0, [r3]
    5f74:	mov	r3, #8388608	; 0x800000
    5f78:	tst	r7, r0
    5f7c:	lsl	r7, r7, #1
    5f80:	orrne	r2, r3, r2
    5f84:	lsr	r3, r3, #1
    5f88:	strne	r2, [r1]
    5f8c:	subs	r6, r6, #1
    5f90:	bne	5f78 <rb_crypt+0x748>
    5f94:	str	r2, [sp, #32]
    5f98:	mov	r2, #4096	; 0x1000
    5f9c:	mov	ip, #5120	; 0x1400
    5fa0:	mov	r6, #6144	; 0x1800
    5fa4:	mov	r5, #7168	; 0x1c00
    5fa8:	mov	sl, #24
    5fac:	ldr	r0, [pc, #3736]	; 6e4c <rb_crypt+0x161c>
    5fb0:	add	r0, pc, r0
    5fb4:	ldr	r1, [r0, r2]
    5fb8:	ldr	r3, [r0, #1024]	; 0x400
    5fbc:	ldr	r7, [pc, #3724]	; 6e50 <rb_crypt+0x1620>
    5fc0:	ldr	r7, [pc, r7]
    5fc4:	orr	r3, r3, r7
    5fc8:	ldr	r7, [r0, #2048]	; 0x800
    5fcc:	orr	r3, r3, r7
    5fd0:	ldr	r7, [r0, #3072]	; 0xc00
    5fd4:	orr	r3, r3, r7
    5fd8:	ldr	r7, [r0, ip]
    5fdc:	orr	r1, r3, r1
    5fe0:	orr	r1, r1, r7
    5fe4:	ldr	r7, [r0, r6]
    5fe8:	ldr	r0, [r0, r5]
    5fec:	orr	r1, r1, r7
    5ff0:	orr	r7, r1, r0
    5ff4:	ldr	r0, [pc, #3672]	; 6e54 <rb_crypt+0x1624>
    5ff8:	add	r0, pc, r0
    5ffc:	ldr	r1, [r0, r2]
    6000:	ldr	r4, [r0, #1024]	; 0x400
    6004:	ldr	r3, [pc, #3660]	; 6e58 <rb_crypt+0x1628>
    6008:	ldr	r3, [pc, r3]
    600c:	orr	r3, r4, r3
    6010:	ldr	r4, [r0, #2048]	; 0x800
    6014:	orr	r3, r3, r4
    6018:	ldr	r4, [r0, #3072]	; 0xc00
    601c:	orr	r3, r3, r4
    6020:	orr	r1, r3, r1
    6024:	ldr	r3, [r0, ip]
    6028:	orr	r1, r1, r3
    602c:	ldr	r3, [r0, r6]
    6030:	ldr	r0, [r0, r5]
    6034:	mov	r6, #4032	; 0xfc0
    6038:	orr	r1, r1, r3
    603c:	mov	r3, #258048	; 0x3f000
    6040:	orr	ip, r1, r0
    6044:	ldr	r0, [pc, #3600]	; 6e5c <rb_crypt+0x162c>
    6048:	ldr	r1, [pc, #3600]	; 6e60 <rb_crypt+0x1630>
    604c:	ldr	r9, [pc, #3600]	; 6e64 <rb_crypt+0x1634>
    6050:	ldr	r8, [sp, #32]
    6054:	add	r0, pc, r0
    6058:	add	r1, pc, r1
    605c:	add	r9, pc, r9
    6060:	mov	lr, ip
    6064:	str	sl, [sp, #36]	; 0x24
    6068:	mov	sl, #0
    606c:	mov	ip, r7
    6070:	mov	r2, #4096	; 0x1000
    6074:	and	r5, r3, ip, lsr #11
    6078:	mov	r3, #16515072	; 0xfc0000
    607c:	mov	r7, ip
    6080:	and	r4, r3, ip, ror #9
    6084:	orr	r5, r4, r5
    6088:	and	r4, r6, ip, lsr #13
    608c:	and	r6, ip, #129024	; 0x1f800
    6090:	orr	r5, r5, r4
    6094:	ubfx	r4, ip, #15, #6
    6098:	ldr	r3, [pc, #3528]	; 6e68 <rb_crypt+0x1638>
    609c:	orr	r5, r5, r4
    60a0:	add	r3, pc, r3
    60a4:	ldr	r4, [r3, sl, lsl #2]
    60a8:	and	r3, ip, #8064	; 0x1f80
    60ac:	lsl	r3, r3, #5
    60b0:	orr	r3, r3, ip, lsr #31
    60b4:	orr	r3, r3, r6, lsl #7
    60b8:	and	r6, ip, #504	; 0x1f8
    60bc:	eor	r4, r5, r4
    60c0:	orr	r3, r3, r6, lsl #3
    60c4:	and	r6, ip, #31
    60c8:	orr	r3, r3, r6, lsl #1
    60cc:	eor	r6, r5, r3
    60d0:	and	r6, r6, r8
    60d4:	eor	r5, r4, r6
    60d8:	ldrb	r4, [r0, r5, lsr #12]
    60dc:	bfc	r5, #12, #20
    60e0:	add	r5, r0, r5
    60e4:	ldrb	r5, [r5, r2]
    60e8:	ldr	r4, [r1, r4, lsl #2]
    60ec:	add	r5, r1, r5, lsl #2
    60f0:	ldr	r5, [r5, #1024]	; 0x400
    60f4:	orr	r5, r5, r4
    60f8:	ldr	r4, [r9, sl, lsl #2]
    60fc:	add	sl, sl, #1
    6100:	cmp	sl, #16
    6104:	eor	r3, r3, r4
    6108:	mov	r4, #8192	; 0x2000
    610c:	eor	r3, r3, r6
    6110:	add	r6, r0, r3, lsr #12
    6114:	bfc	r3, #12, #20
    6118:	ldrb	r6, [r6, r4]
    611c:	mov	r4, #12288	; 0x3000
    6120:	add	r3, r0, r3
    6124:	ldrb	r3, [r3, r4]
    6128:	add	r6, r1, r6, lsl #2
    612c:	add	r3, r1, r3, lsl #2
    6130:	ldr	r6, [r6, #2048]	; 0x800
    6134:	ldr	r3, [r3, #3072]	; 0xc00
    6138:	orr	r6, r5, r6
    613c:	orr	r3, r6, r3
    6140:	mov	r6, #4032	; 0xfc0
    6144:	eor	ip, r3, lr
    6148:	mov	r3, #258048	; 0x3f000
    614c:	mov	lr, r7
    6150:	bne	6074 <rb_crypt+0x844>
    6154:	ldr	r2, [sp, #36]	; 0x24
    6158:	sub	sl, r2, #1
    615c:	cmp	r2, #0
    6160:	bne	6060 <rb_crypt+0x830>
    6164:	ldr	r0, [pc, #3328]	; 6e6c <rb_crypt+0x163c>
    6168:	uxtb	r6, r7
    616c:	mov	r8, #7168	; 0x1c00
    6170:	uxtb	lr, ip
    6174:	add	r0, pc, r0
    6178:	add	r1, r0, r6, lsl #2
    617c:	ldr	r1, [r1, r8]
    6180:	str	r1, [sp, #36]	; 0x24
    6184:	ubfx	r5, r7, #8, #8
    6188:	mov	r1, #6144	; 0x1800
    618c:	add	r3, r0, r5, lsl #2
    6190:	ldr	r1, [r3, r1]
    6194:	str	r1, [sp, #32]
    6198:	ubfx	r4, r7, #16, #8
    619c:	mov	r1, #5120	; 0x1400
    61a0:	lsr	r7, r7, #24
    61a4:	add	r3, r0, r4, lsl #2
    61a8:	ldr	r1, [r3, r1]
    61ac:	add	r3, r0, r7, lsl #2
    61b0:	str	r1, [sp, #28]
    61b4:	mov	r1, #4096	; 0x1000
    61b8:	ldr	r1, [r3, r1]
    61bc:	add	r3, r0, lr, lsl #2
    61c0:	str	r1, [sp, #24]
    61c4:	ldr	r1, [r3, #3072]	; 0xc00
    61c8:	str	r1, [sp, #20]
    61cc:	ubfx	r1, ip, #8, #8
    61d0:	add	r3, r0, r1, lsl #2
    61d4:	ldr	r2, [r3, #2048]	; 0x800
    61d8:	mov	r3, #6144	; 0x1800
    61dc:	str	r2, [sp, #16]
    61e0:	ubfx	r2, ip, #16, #8
    61e4:	lsr	ip, ip, #24
    61e8:	ldr	sl, [r0, ip, lsl #2]
    61ec:	add	r0, r0, r2, lsl #2
    61f0:	ldr	r9, [r0, #1024]	; 0x400
    61f4:	ldr	r0, [pc, #3188]	; 6e70 <rb_crypt+0x1640>
    61f8:	add	r0, pc, r0
    61fc:	add	r5, r0, r5, lsl #2
    6200:	add	r4, r0, r4, lsl #2
    6204:	add	r7, r0, r7, lsl #2
    6208:	add	r1, r0, r1, lsl #2
    620c:	add	r6, r0, r6, lsl #2
    6210:	ldr	r5, [r5, r3]
    6214:	mov	r3, #5120	; 0x1400
    6218:	ldr	r8, [r6, r8]
    621c:	ldr	r1, [r1, #2048]	; 0x800
    6220:	ldr	r4, [r4, r3]
    6224:	mov	r3, #4096	; 0x1000
    6228:	ldr	r7, [r7, r3]
    622c:	add	r3, r0, lr, lsl #2
    6230:	ldr	lr, [r3, #3072]	; 0xc00
    6234:	ldr	r3, [r0, ip, lsl #2]
    6238:	add	r0, r0, r2, lsl #2
    623c:	mov	r2, #0
    6240:	ldr	r0, [r0, #1024]	; 0x400
    6244:	ldr	r6, [pc, #3112]	; 6e74 <rb_crypt+0x1644>
    6248:	orr	r0, r0, r3
    624c:	add	r6, pc, r6
    6250:	orr	r0, r0, r1
    6254:	strb	r2, [r6, #13]
    6258:	orr	r0, r0, lr
    625c:	orr	r0, r0, r7
    6260:	ldr	r7, [pc, #3088]	; 6e78 <rb_crypt+0x1648>
    6264:	ldr	r1, [sp, #16]
    6268:	orr	r0, r0, r4
    626c:	orr	r0, r0, r5
    6270:	orr	r5, r0, r8
    6274:	add	r7, pc, r7
    6278:	ldrb	r0, [r7, r5, lsr #26]
    627c:	strb	r0, [r6, #2]
    6280:	orr	r0, r9, sl
    6284:	orr	r0, r0, r1
    6288:	ldr	r1, [sp, #20]
    628c:	orr	r0, r0, r1
    6290:	ldr	r1, [sp, #24]
    6294:	orr	r0, r0, r1
    6298:	ldr	r1, [sp, #28]
    629c:	orr	r0, r0, r1
    62a0:	ldr	r1, [sp, #32]
    62a4:	orr	r0, r0, r1
    62a8:	ldr	r1, [sp, #36]	; 0x24
    62ac:	orr	r0, r0, r1
    62b0:	and	r1, r0, #15
    62b4:	ldrb	r1, [r7, r1, lsl #2]
    62b8:	strb	r1, [r6, #12]
    62bc:	ubfx	r1, r0, #4, #6
    62c0:	ldrb	r1, [r7, r1]
    62c4:	strb	r1, [r6, #11]
    62c8:	ubfx	r1, r0, #10, #6
    62cc:	ldrb	r1, [r7, r1]
    62d0:	strb	r1, [r6, #10]
    62d4:	ubfx	r1, r0, #16, #6
    62d8:	ldrb	r1, [r7, r1]
    62dc:	strb	r1, [r6, #9]
    62e0:	ubfx	r1, r0, #22, #6
    62e4:	lsr	r0, r0, #16
    62e8:	ldrb	r1, [r7, r1]
    62ec:	orr	r0, r0, r5, lsl #16
    62f0:	strb	r1, [r6, #8]
    62f4:	ubfx	r1, r5, #2, #6
    62f8:	ldrb	r1, [r7, r1]
    62fc:	strb	r1, [r6, #6]
    6300:	ubfx	r1, r5, #8, #6
    6304:	ldrb	r1, [r7, r1]
    6308:	strb	r1, [r6, #5]
    630c:	ubfx	r1, r5, #14, #6
    6310:	ldrb	r1, [r7, r1]
    6314:	strb	r1, [r6, #4]
    6318:	ubfx	r1, r5, #20, #6
    631c:	ldrb	r1, [r7, r1]
    6320:	strb	r1, [r6, #3]
    6324:	ubfx	r0, r0, #12, #6
    6328:	ldrb	r0, [r7, r0]
    632c:	strb	r0, [r6, #7]
    6330:	mov	r0, r6
    6334:	sub	sp, fp, #28
    6338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    633c:	ldr	r5, [sp, #24]
    6340:	mov	r0, r6
    6344:	lsl	r1, r5, #3
    6348:	sub	r2, r5, r0
    634c:	str	r1, [sp, #20]
    6350:	add	r1, sl, r0
    6354:	add	r0, r8, r9
    6358:	add	r0, r0, #24
    635c:	bl	509c <memcpy@plt>
    6360:	add	r0, pc, #984	; 0x3d8
    6364:	add	r5, sp, #56	; 0x38
    6368:	vld1.64	{d16-d17}, [r0 :128]
    636c:	mov	r0, r4
    6370:	vst1.32	{d16-d17}, [r5]!
    6374:	bl	5078 <strlen@plt>
    6378:	mov	r6, r0
    637c:	lsr	r1, r0, #29
    6380:	lsl	r0, r0, #3
    6384:	cmp	r6, #64	; 0x40
    6388:	strd	r0, [r5]
    638c:	bcc	640c <rb_crypt+0xbdc>
    6390:	add	r3, r4, #32
    6394:	add	r7, r4, #16
    6398:	mov	r0, #48	; 0x30
    639c:	mov	r2, r4
    63a0:	vld1.8	{d18-d19}, [r3]
    63a4:	vld1.8	{d16-d17}, [r2], r0
    63a8:	vld1.8	{d20-d21}, [r7]
    63ac:	add	r0, sp, #56	; 0x38
    63b0:	vld1.8	{d22-d23}, [r2]
    63b4:	add	r2, r0, #56	; 0x38
    63b8:	add	r1, r0, #24
    63bc:	vst1.64	{d18-d19}, [r2]
    63c0:	add	r2, r0, #40	; 0x28
    63c4:	vst1.64	{d16-d17}, [r1]
    63c8:	vst1.64	{d20-d21}, [r2]
    63cc:	add	r2, r0, #72	; 0x48
    63d0:	vst1.64	{d22-d23}, [r2]
    63d4:	bl	7f64 <MD5Transform>
    63d8:	mov	r7, #64	; 0x40
    63dc:	cmp	r6, #128	; 0x80
    63e0:	bcc	640c <rb_crypt+0xbdc>
    63e4:	mov	r5, #64	; 0x40
    63e8:	add	sl, sp, #56	; 0x38
    63ec:	add	r1, r4, r5
    63f0:	mov	r0, sl
    63f4:	bl	7f64 <MD5Transform>
    63f8:	add	r0, r5, #127	; 0x7f
    63fc:	add	r7, r5, #64	; 0x40
    6400:	cmp	r0, r6
    6404:	mov	r5, r7
    6408:	bcc	63ec <rb_crypt+0xbbc>
    640c:	ldr	r0, [sp, #24]
    6410:	add	r1, r4, r7
    6414:	sub	r2, r6, r7
    6418:	lsr	r0, r0, #29
    641c:	str	r0, [sp, #16]
    6420:	add	r0, sp, #56	; 0x38
    6424:	add	r0, r0, #24
    6428:	str	r0, [sp, #36]	; 0x24
    642c:	bl	509c <memcpy@plt>
    6430:	ldr	r1, [sp, #72]	; 0x48
    6434:	ldr	r2, [sp, #20]
    6438:	ldr	r0, [sp, #76]	; 0x4c
    643c:	adds	r2, r1, r2
    6440:	str	r2, [sp, #72]	; 0x48
    6444:	ubfx	r9, r1, #3, #6
    6448:	ldr	r1, [sp, #16]
    644c:	ldr	sl, [sp, #24]
    6450:	ldr	r6, [sp, #12]
    6454:	addcs	r0, r0, #1
    6458:	rsb	r7, r9, #64	; 0x40
    645c:	strcs	r0, [sp, #76]	; 0x4c
    6460:	add	r0, r0, r1
    6464:	cmp	r7, sl
    6468:	str	r0, [sp, #76]	; 0x4c
    646c:	bls	6478 <rb_crypt+0xc48>
    6470:	mov	r7, #0
    6474:	b	64d8 <rb_crypt+0xca8>
    6478:	add	r5, sp, #56	; 0x38
    647c:	mov	r1, r6
    6480:	mov	r2, r7
    6484:	add	r0, r5, r9
    6488:	add	r0, r0, #24
    648c:	bl	509c <memcpy@plt>
    6490:	ldr	r1, [sp, #36]	; 0x24
    6494:	mov	r0, r5
    6498:	bl	7f64 <MD5Transform>
    649c:	eor	r0, r9, #127	; 0x7f
    64a0:	mov	r9, #0
    64a4:	cmp	r0, sl
    64a8:	bcs	64d8 <rb_crypt+0xca8>
    64ac:	ldr	r5, [sp, #24]
    64b0:	add	sl, sp, #56	; 0x38
    64b4:	add	r1, r6, r7
    64b8:	mov	r0, sl
    64bc:	bl	7f64 <MD5Transform>
    64c0:	add	r1, r7, #127	; 0x7f
    64c4:	add	r0, r7, #64	; 0x40
    64c8:	cmp	r1, r5
    64cc:	mov	r7, r0
    64d0:	bcc	64b4 <rb_crypt+0xc84>
    64d4:	mov	r7, r0
    64d8:	ldr	r0, [sp, #24]
    64dc:	add	r1, r6, r7
    64e0:	sub	r2, r0, r7
    64e4:	add	r0, sp, #56	; 0x38
    64e8:	add	r0, r0, r9
    64ec:	add	r0, r0, #24
    64f0:	bl	509c <memcpy@plt>
    64f4:	mov	r0, r4
    64f8:	bl	5078 <strlen@plt>
    64fc:	ldr	r1, [sp, #72]	; 0x48
    6500:	mov	r5, r0
    6504:	ldr	r0, [sp, #76]	; 0x4c
    6508:	add	r2, r1, r5, lsl #3
    650c:	cmp	r2, r1
    6510:	str	r2, [sp, #72]	; 0x48
    6514:	ubfx	r9, r1, #3, #6
    6518:	addcc	r0, r0, #1
    651c:	rsb	r7, r9, #64	; 0x40
    6520:	strcc	r0, [sp, #76]	; 0x4c
    6524:	add	r0, r0, r5, lsr #29
    6528:	cmp	r7, r5
    652c:	str	r0, [sp, #76]	; 0x4c
    6530:	bls	653c <rb_crypt+0xd0c>
    6534:	mov	r7, #0
    6538:	b	6598 <rb_crypt+0xd68>
    653c:	add	r6, sp, #56	; 0x38
    6540:	mov	r1, r4
    6544:	mov	r2, r7
    6548:	add	r0, r6, r9
    654c:	add	r0, r0, #24
    6550:	bl	509c <memcpy@plt>
    6554:	ldr	r1, [sp, #36]	; 0x24
    6558:	mov	r0, r6
    655c:	bl	7f64 <MD5Transform>
    6560:	eor	r0, r9, #127	; 0x7f
    6564:	mov	r9, #0
    6568:	cmp	r0, r5
    656c:	bcs	6598 <rb_crypt+0xd68>
    6570:	add	r6, sp, #56	; 0x38
    6574:	add	r1, r4, r7
    6578:	mov	r0, r6
    657c:	bl	7f64 <MD5Transform>
    6580:	add	r1, r7, #127	; 0x7f
    6584:	add	r0, r7, #64	; 0x40
    6588:	cmp	r1, r5
    658c:	mov	r7, r0
    6590:	bcc	6574 <rb_crypt+0xd44>
    6594:	mov	r7, r0
    6598:	sub	r2, r5, r7
    659c:	add	r5, sp, #56	; 0x38
    65a0:	add	r1, r4, r7
    65a4:	add	r0, r5, r9
    65a8:	add	r0, r0, #24
    65ac:	bl	509c <memcpy@plt>
    65b0:	add	sl, sp, #40	; 0x28
    65b4:	mov	r1, r5
    65b8:	mov	r0, sl
    65bc:	bl	7dac <MD5Final>
    65c0:	mov	r0, r4
    65c4:	bl	5078 <strlen@plt>
    65c8:	cmp	r0, #1
    65cc:	blt	6694 <rb_crypt+0xe64>
    65d0:	mov	r7, r0
    65d4:	b	65fc <rb_crypt+0xdcc>
    65d8:	mov	r5, #0
    65dc:	add	r0, r8, r9
    65e0:	add	r1, sl, r5
    65e4:	sub	r2, r6, r5
    65e8:	add	r0, r0, #24
    65ec:	bl	509c <memcpy@plt>
    65f0:	sub	r7, r7, #16
    65f4:	cmp	r7, #0
    65f8:	ble	6694 <rb_crypt+0xe64>
    65fc:	ldr	r1, [fp, #-104]	; 0xffffff98
    6600:	cmp	r7, #16
    6604:	mov	r6, r7
    6608:	ldr	r0, [fp, #-100]	; 0xffffff9c
    660c:	movge	r6, #16
    6610:	add	r2, r1, r6, lsl #3
    6614:	cmp	r2, r6, lsl #3
    6618:	str	r2, [fp, #-104]	; 0xffffff98
    661c:	ubfx	r9, r1, #3, #6
    6620:	rsb	r5, r9, #64	; 0x40
    6624:	addcc	r0, r0, #1
    6628:	strcc	r0, [fp, #-100]	; 0xffffff9c
    662c:	add	r0, r0, r6, lsr #29
    6630:	cmp	r5, r6
    6634:	str	r0, [fp, #-100]	; 0xffffff9c
    6638:	bhi	65d8 <rb_crypt+0xda8>
    663c:	add	r0, r8, r9
    6640:	mov	r1, sl
    6644:	mov	r2, r5
    6648:	add	r0, r0, #24
    664c:	bl	509c <memcpy@plt>
    6650:	ldr	r1, [sp, #32]
    6654:	mov	r0, r8
    6658:	bl	7f64 <MD5Transform>
    665c:	eor	r0, r9, #127	; 0x7f
    6660:	mov	r9, #0
    6664:	cmp	r0, r6
    6668:	bcs	65dc <rb_crypt+0xdac>
    666c:	add	r1, sl, r5
    6670:	mov	r0, r8
    6674:	bl	7f64 <MD5Transform>
    6678:	add	r1, r5, #127	; 0x7f
    667c:	add	r0, r5, #64	; 0x40
    6680:	cmp	r1, r6
    6684:	mov	r5, r0
    6688:	bcc	666c <rb_crypt+0xe3c>
    668c:	mov	r5, r0
    6690:	b	65dc <rb_crypt+0xdac>
    6694:	vmov.i32	q8, #0	; 0x00000000
    6698:	mov	r0, r4
    669c:	vst1.64	{d16-d17}, [sl]
    66a0:	bl	5078 <strlen@plt>
    66a4:	cmp	r0, #0
    66a8:	beq	678c <rb_crypt+0xf5c>
    66ac:	mov	r7, r0
    66b0:	mov	r5, #0
    66b4:	b	66dc <rb_crypt+0xeac>
    66b8:	add	r1, r4, r2
    66bc:	add	r0, r8, r6
    66c0:	eor	r2, r2, #1
    66c4:	add	r0, r0, #24
    66c8:	bl	509c <memcpy@plt>
    66cc:	lsr	r0, r7, #1
    66d0:	cmp	r5, r7, lsr #1
    66d4:	mov	r7, r0
    66d8:	beq	678c <rb_crypt+0xf5c>
    66dc:	ldr	r2, [fp, #-104]	; 0xffffff98
    66e0:	ldr	r0, [fp, #-100]	; 0xffffff9c
    66e4:	tst	r7, #1
    66e8:	add	r1, r2, #8
    66ec:	str	r1, [fp, #-104]	; 0xffffff98
    66f0:	ubfx	r6, r2, #3, #6
    66f4:	bne	6750 <rb_crypt+0xf20>
    66f8:	cmp	r1, #7
    66fc:	mov	r2, #0
    6700:	addls	r0, r0, #1
    6704:	strls	r0, [fp, #-100]	; 0xffffff9c
    6708:	cmp	r6, #63	; 0x3f
    670c:	str	r0, [fp, #-100]	; 0xffffff9c
    6710:	bne	66b8 <rb_crypt+0xe88>
    6714:	ldrb	r0, [r4]
    6718:	ldr	r1, [sp, #32]
    671c:	strb	r0, [fp, #-33]	; 0xffffffdf
    6720:	mov	r0, r8
    6724:	bl	7f64 <MD5Transform>
    6728:	mov	r2, #1
    672c:	mov	r6, #0
    6730:	b	66b8 <rb_crypt+0xe88>
    6734:	nop	{0}
    6738:	nop	{0}
    673c:	nop	{0}
    6740:	.word	0x67452301
    6744:	.word	0xefcdab89
    6748:	.word	0x98badcfe
    674c:	.word	0x10325476
    6750:	cmp	r1, #7
    6754:	mov	r2, #0
    6758:	addls	r0, r0, #1
    675c:	strls	r0, [fp, #-100]	; 0xffffff9c
    6760:	cmp	r6, #63	; 0x3f
    6764:	str	r0, [fp, #-100]	; 0xffffff9c
    6768:	bne	6784 <rb_crypt+0xf54>
    676c:	ldr	r1, [sp, #32]
    6770:	mov	r6, #0
    6774:	mov	r0, r8
    6778:	strb	r6, [fp, #-33]	; 0xffffffdf
    677c:	bl	7f64 <MD5Transform>
    6780:	mov	r2, #1
    6784:	orr	r1, sl, r2
    6788:	b	66bc <rb_crypt+0xe8c>
    678c:	ldr	r5, [pc, #1668]	; 6e18 <rb_crypt+0x15e8>
    6790:	ldr	r1, [pc, #1668]	; 6e1c <rb_crypt+0x15ec>
    6794:	mov	r2, #120	; 0x78
    6798:	add	r5, pc, r5
    679c:	add	r1, pc, r1
    67a0:	mov	r0, r5
    67a4:	bl	4f4c <rb_strlcpy@plt>
    67a8:	ldr	r1, [pc, #1648]	; 6e20 <rb_crypt+0x15f0>
    67ac:	mov	r6, sl
    67b0:	mov	r0, r5
    67b4:	ldr	r1, [pc, r1]
    67b8:	ldr	sl, [sp, #24]
    67bc:	mov	r2, sl
    67c0:	bl	5150 <strncat@plt>
    67c4:	ldr	r1, [pc, #1624]	; 6e24 <rb_crypt+0x15f4>
    67c8:	mov	r2, #120	; 0x78
    67cc:	add	r1, pc, r1
    67d0:	bl	53e4 <rb_strlcat@plt>
    67d4:	sub	r1, fp, #120	; 0x78
    67d8:	mov	r0, r6
    67dc:	bl	7dac <MD5Final>
    67e0:	ldr	r0, [pc, #1600]	; 6e28 <rb_crypt+0x15f8>
    67e4:	mov	r8, #0
    67e8:	mov	r9, #0
    67ec:	add	r7, sp, #56	; 0x38
    67f0:	ldr	r0, [pc, r0]
    67f4:	str	r0, [sp, #28]
    67f8:	add	r0, r4, #32
    67fc:	str	r0, [sp, #12]
    6800:	ldr	r0, [sp, #36]	; 0x24
    6804:	add	r1, r0, #32
    6808:	add	r0, r0, #16
    680c:	str	r1, [sp, #8]
    6810:	add	r1, r4, #16
    6814:	str	r1, [sp, #4]
    6818:	str	r0, [sp]
    681c:	b	6870 <rb_crypt+0x1040>
    6820:	.word	0x00038fd4
    6824:	.word	0x00013b68
    6828:	.word	0x00038fa8
    682c:	.word	0x00027b98
    6830:	.word	0x00027b8c
    6834:	mov	r6, #0
    6838:	add	r0, r7, r8
    683c:	add	r1, r4, r6
    6840:	sub	r2, r5, r6
    6844:	add	r0, r0, #24
    6848:	bl	509c <memcpy@plt>
    684c:	ldr	sl, [sp, #24]
    6850:	add	r6, sp, #40	; 0x28
    6854:	mov	r8, #0
    6858:	mov	r0, r6
    685c:	mov	r1, r7
    6860:	bl	7dac <MD5Final>
    6864:	add	r9, r9, #1
    6868:	cmp	r9, #1000	; 0x3e8
    686c:	beq	6c70 <rb_crypt+0x1440>
    6870:	sub	r0, pc, #312	; 0x138
    6874:	str	r8, [sp, #76]	; 0x4c
    6878:	vld1.64	{d16-d17}, [r0 :128]
    687c:	mov	r0, r7
    6880:	vst1.32	{d16-d17}, [r0]!
    6884:	str	r8, [r0]
    6888:	ands	r0, r9, #1
    688c:	str	r0, [sp, #32]
    6890:	beq	6954 <rb_crypt+0x1124>
    6894:	mov	r0, r4
    6898:	bl	5078 <strlen@plt>
    689c:	mov	r5, r0
    68a0:	lsr	r0, r0, #29
    68a4:	str	r0, [sp, #76]	; 0x4c
    68a8:	lsl	r0, r5, #3
    68ac:	cmp	r5, #64	; 0x40
    68b0:	str	r0, [sp, #72]	; 0x48
    68b4:	mov	r0, #0
    68b8:	bcc	6934 <rb_crypt+0x1104>
    68bc:	ldr	r1, [sp, #12]
    68c0:	mov	r0, r4
    68c4:	mov	r2, #48	; 0x30
    68c8:	vld1.8	{d16-d17}, [r0], r2
    68cc:	vld1.8	{d22-d23}, [r0]
    68d0:	ldr	r0, [sp, #8]
    68d4:	vld1.8	{d18-d19}, [r1]
    68d8:	ldr	r1, [sp, #4]
    68dc:	vld1.8	{d20-d21}, [r1]
    68e0:	ldr	r1, [sp, #36]	; 0x24
    68e4:	vst1.8	{d18-d19}, [r0]
    68e8:	ldr	r0, [sp]
    68ec:	vst1.8	{d20-d21}, [r0]
    68f0:	mov	r0, r1
    68f4:	vst1.8	{d16-d17}, [r0], r2
    68f8:	vst1.8	{d22-d23}, [r0]
    68fc:	mov	r0, r7
    6900:	bl	7f64 <MD5Transform>
    6904:	mov	r0, #64	; 0x40
    6908:	cmp	r5, #128	; 0x80
    690c:	bcc	6934 <rb_crypt+0x1104>
    6910:	mov	r6, #64	; 0x40
    6914:	add	r1, r4, r6
    6918:	mov	r0, r7
    691c:	bl	7f64 <MD5Transform>
    6920:	add	r1, r6, #127	; 0x7f
    6924:	add	r0, r6, #64	; 0x40
    6928:	cmp	r1, r5
    692c:	mov	r6, r0
    6930:	bcc	6914 <rb_crypt+0x10e4>
    6934:	add	r1, r4, r0
    6938:	sub	r2, r5, r0
    693c:	ldr	r0, [sp, #36]	; 0x24
    6940:	bl	509c <memcpy@plt>
    6944:	b	6970 <rb_crypt+0x1140>
    6948:	.word	0x00027b68
    694c:	.word	0x00027b60
    6950:	.word	0x00034e5c
    6954:	add	r0, sp, #40	; 0x28
    6958:	str	r8, [sp, #76]	; 0x4c
    695c:	vld1.64	{d16-d17}, [r0]
    6960:	mov	r0, #128	; 0x80
    6964:	str	r0, [sp, #72]	; 0x48
    6968:	ldr	r0, [sp, #36]	; 0x24
    696c:	vst1.64	{d16-d17}, [r0]
    6970:	movw	r0, #43691	; 0xaaab
    6974:	movw	r1, #21846	; 0x5556
    6978:	movt	r0, #43690	; 0xaaaa
    697c:	movt	r1, #21845	; 0x5555
    6980:	mul	r0, r9, r0
    6984:	cmp	r0, r1
    6988:	bcc	6a54 <rb_crypt+0x1224>
    698c:	ldr	r1, [sp, #72]	; 0x48
    6990:	ldr	r2, [sp, #20]
    6994:	ldr	r0, [sp, #76]	; 0x4c
    6998:	adds	r2, r1, r2
    699c:	str	r2, [sp, #72]	; 0x48
    69a0:	ubfx	r6, r1, #3, #6
    69a4:	ldr	r1, [sp, #16]
    69a8:	addcs	r0, r0, #1
    69ac:	rsb	r5, r6, #64	; 0x40
    69b0:	strcs	r0, [sp, #76]	; 0x4c
    69b4:	cmp	r5, sl
    69b8:	add	r0, r0, r1
    69bc:	str	r0, [sp, #76]	; 0x4c
    69c0:	bls	69d4 <rb_crypt+0x11a4>
    69c4:	ldr	r8, [sp, #28]
    69c8:	mov	r5, #0
    69cc:	b	6a3c <rb_crypt+0x120c>
    69d0:	.word	0x00033de0
    69d4:	ldr	r1, [sp, #28]
    69d8:	add	r0, r7, r6
    69dc:	mov	r2, r5
    69e0:	add	r0, r0, #24
    69e4:	bl	509c <memcpy@plt>
    69e8:	ldr	r1, [sp, #36]	; 0x24
    69ec:	mov	r0, r7
    69f0:	bl	7f64 <MD5Transform>
    69f4:	eor	r0, r6, #127	; 0x7f
    69f8:	mov	r6, #0
    69fc:	cmp	r0, sl
    6a00:	bcs	6a38 <rb_crypt+0x1208>
    6a04:	ldr	r8, [sp, #28]
    6a08:	add	r1, r8, r5
    6a0c:	mov	r0, r7
    6a10:	bl	7f64 <MD5Transform>
    6a14:	add	r1, r5, #127	; 0x7f
    6a18:	add	r0, r5, #64	; 0x40
    6a1c:	cmp	r1, sl
    6a20:	mov	r5, r0
    6a24:	bcc	6a08 <rb_crypt+0x11d8>
    6a28:	mov	r5, r0
    6a2c:	b	6a3c <rb_crypt+0x120c>
    6a30:	.word	0x00035d74
    6a34:	.word	0x0001416c
    6a38:	ldr	r8, [sp, #28]
    6a3c:	add	r0, r7, r6
    6a40:	add	r1, r8, r5
    6a44:	sub	r2, sl, r5
    6a48:	add	r0, r0, #24
    6a4c:	bl	509c <memcpy@plt>
    6a50:	mov	r8, #0
    6a54:	movw	r0, #28087	; 0x6db7
    6a58:	movw	r1, #18725	; 0x4925
    6a5c:	movt	r0, #46811	; 0xb6db
    6a60:	movt	r1, #9362	; 0x2492
    6a64:	mul	r0, r9, r0
    6a68:	cmp	r0, r1
    6a6c:	bcc	6b38 <rb_crypt+0x1308>
    6a70:	mov	r0, r4
    6a74:	bl	5078 <strlen@plt>
    6a78:	ldr	r1, [sp, #72]	; 0x48
    6a7c:	mov	r8, r0
    6a80:	ldr	r0, [sp, #76]	; 0x4c
    6a84:	add	r2, r1, r8, lsl #3
    6a88:	cmp	r2, r1
    6a8c:	str	r2, [sp, #72]	; 0x48
    6a90:	ubfx	r6, r1, #3, #6
    6a94:	addcc	r0, r0, #1
    6a98:	rsb	r5, r6, #64	; 0x40
    6a9c:	strcc	r0, [sp, #76]	; 0x4c
    6aa0:	add	r0, r0, r8, lsr #29
    6aa4:	cmp	r5, r8
    6aa8:	str	r0, [sp, #76]	; 0x4c
    6aac:	bls	6ac0 <rb_crypt+0x1290>
    6ab0:	mov	r5, #0
    6ab4:	b	6b1c <rb_crypt+0x12ec>
    6ab8:	.word	0x00038ce4
    6abc:	.word	0x00036cb4
    6ac0:	add	r7, sp, #56	; 0x38
    6ac4:	mov	r1, r4
    6ac8:	mov	r2, r5
    6acc:	add	r0, r7, r6
    6ad0:	add	r0, r0, #24
    6ad4:	bl	509c <memcpy@plt>
    6ad8:	ldr	r1, [sp, #36]	; 0x24
    6adc:	mov	r0, r7
    6ae0:	bl	7f64 <MD5Transform>
    6ae4:	eor	r0, r6, #127	; 0x7f
    6ae8:	mov	r6, #0
    6aec:	cmp	r0, r8
    6af0:	bcs	6b1c <rb_crypt+0x12ec>
    6af4:	add	r7, sp, #56	; 0x38
    6af8:	add	r1, r4, r5
    6afc:	mov	r0, r7
    6b00:	bl	7f64 <MD5Transform>
    6b04:	add	r1, r5, #127	; 0x7f
    6b08:	add	r0, r5, #64	; 0x40
    6b0c:	cmp	r1, r8
    6b10:	mov	r5, r0
    6b14:	bcc	6af8 <rb_crypt+0x12c8>
    6b18:	mov	r5, r0
    6b1c:	add	r7, sp, #56	; 0x38
    6b20:	add	r1, r4, r5
    6b24:	sub	r2, r8, r5
    6b28:	add	r0, r7, r6
    6b2c:	add	r0, r0, #24
    6b30:	bl	509c <memcpy@plt>
    6b34:	mov	r8, #0
    6b38:	ldr	r0, [sp, #32]
    6b3c:	cmp	r0, #0
    6b40:	beq	6b88 <rb_crypt+0x1358>
    6b44:	ldr	r0, [sp, #72]	; 0x48
    6b48:	ldr	r1, [sp, #76]	; 0x4c
    6b4c:	adds	r2, r0, #128	; 0x80
    6b50:	str	r2, [sp, #72]	; 0x48
    6b54:	ubfx	r0, r0, #3, #6
    6b58:	addcs	r1, r1, #1
    6b5c:	strcs	r1, [sp, #76]	; 0x4c
    6b60:	cmp	r0, #48	; 0x30
    6b64:	str	r1, [sp, #76]	; 0x4c
    6b68:	bcs	6c28 <rb_crypt+0x13f8>
    6b6c:	mov	r5, #0
    6b70:	add	r6, sp, #40	; 0x28
    6b74:	b	6c54 <rb_crypt+0x1424>
    6b78:	.word	0x00038cb0
    6b7c:	.word	0x00038d10
    6b80:	.word	0x00038d0c
    6b84:	.word	0x00038ce0
    6b88:	mov	r0, r4
    6b8c:	bl	5078 <strlen@plt>
    6b90:	ldr	r1, [sp, #72]	; 0x48
    6b94:	mov	r5, r0
    6b98:	ldr	r0, [sp, #76]	; 0x4c
    6b9c:	add	r2, r1, r5, lsl #3
    6ba0:	cmp	r2, r1
    6ba4:	str	r2, [sp, #72]	; 0x48
    6ba8:	ubfx	r8, r1, #3, #6
    6bac:	addcc	r0, r0, #1
    6bb0:	rsb	r6, r8, #64	; 0x40
    6bb4:	strcc	r0, [sp, #76]	; 0x4c
    6bb8:	add	r0, r0, r5, lsr #29
    6bbc:	cmp	r6, r5
    6bc0:	str	r0, [sp, #76]	; 0x4c
    6bc4:	bhi	6834 <rb_crypt+0x1004>
    6bc8:	add	r0, r7, r8
    6bcc:	mov	r1, r4
    6bd0:	mov	r2, r6
    6bd4:	add	r0, r0, #24
    6bd8:	bl	509c <memcpy@plt>
    6bdc:	ldr	r1, [sp, #36]	; 0x24
    6be0:	mov	r0, r7
    6be4:	bl	7f64 <MD5Transform>
    6be8:	eor	r0, r8, #127	; 0x7f
    6bec:	mov	r8, #0
    6bf0:	cmp	r0, r5
    6bf4:	bcs	6838 <rb_crypt+0x1008>
    6bf8:	add	r1, r4, r6
    6bfc:	mov	r0, r7
    6c00:	bl	7f64 <MD5Transform>
    6c04:	add	r1, r6, #127	; 0x7f
    6c08:	add	r0, r6, #64	; 0x40
    6c0c:	cmp	r1, r5
    6c10:	mov	r6, r0
    6c14:	bcc	6bf8 <rb_crypt+0x13c8>
    6c18:	mov	r6, r0
    6c1c:	b	6838 <rb_crypt+0x1008>
    6c20:	.word	0x00038cd0
    6c24:	.word	0x00038c90
    6c28:	rsb	r5, r0, #64	; 0x40
    6c2c:	add	r0, r7, r0
    6c30:	add	r6, sp, #40	; 0x28
    6c34:	add	r0, r0, #24
    6c38:	mov	r1, r6
    6c3c:	mov	r2, r5
    6c40:	bl	509c <memcpy@plt>
    6c44:	ldr	r1, [sp, #36]	; 0x24
    6c48:	mov	r0, r7
    6c4c:	bl	7f64 <MD5Transform>
    6c50:	mov	r0, #0
    6c54:	add	r0, r7, r0
    6c58:	add	r1, r6, r5
    6c5c:	rsb	r2, r5, #16
    6c60:	add	r0, r0, #24
    6c64:	bl	509c <memcpy@plt>
    6c68:	b	6858 <rb_crypt+0x1028>
    6c6c:	.word	0x00013634
    6c70:	ldr	r8, [pc, #436]	; 6e2c <rb_crypt+0x15fc>
    6c74:	add	r8, pc, r8
    6c78:	mov	r0, r8
    6c7c:	bl	5078 <strlen@plt>
    6c80:	ldrb	r3, [sp, #52]	; 0x34
    6c84:	ldr	r2, [pc, #420]	; 6e30 <rb_crypt+0x1600>
    6c88:	and	r1, r3, #63	; 0x3f
    6c8c:	add	r2, pc, r2
    6c90:	ldrb	r7, [r2, r1]
    6c94:	mov	r1, r8
    6c98:	strb	r7, [r1, r0]!
    6c9c:	ldrb	r7, [sp, #40]	; 0x28
    6ca0:	ldrb	r5, [sp, #46]	; 0x2e
    6ca4:	ldrb	r6, [sp, #41]	; 0x29
    6ca8:	ldrb	ip, [sp, #42]	; 0x2a
    6cac:	ldrb	r4, [r2, r7, lsr #2]
    6cb0:	orr	r3, r3, r5, lsl #8
    6cb4:	strb	r4, [r1, #3]
    6cb8:	ubfx	r3, r3, #6, #6
    6cbc:	ldrb	r4, [sp, #53]	; 0x35
    6cc0:	ldrb	r3, [r2, r3]
    6cc4:	strb	r3, [r1, #1]
    6cc8:	ldrb	r3, [r2, r6, lsr #2]
    6ccc:	strb	r3, [r1, #7]
    6cd0:	ldrb	r3, [sp, #47]	; 0x2f
    6cd4:	orr	r0, r4, r3, lsl #8
    6cd8:	ubfx	r0, r0, #6, #6
    6cdc:	ldrb	r0, [r2, r0]
    6ce0:	strb	r0, [r1, #5]
    6ce4:	and	r0, r4, #63	; 0x3f
    6ce8:	ldrb	r0, [r2, r0]
    6cec:	strb	r0, [r1, #4]
    6cf0:	lsl	r0, r5, #8
    6cf4:	orr	r0, r0, r7, lsl #16
    6cf8:	ubfx	r0, r0, #12, #6
    6cfc:	ldrb	r0, [r2, r0]
    6d00:	strb	r0, [r1, #2]
    6d04:	lsl	r0, r3, #8
    6d08:	orr	r0, r0, r6, lsl #16
    6d0c:	mov	r6, r8
    6d10:	ubfx	r0, r0, #12, #6
    6d14:	ldrb	r7, [sp, #48]	; 0x30
    6d18:	ldrb	r3, [sp, #54]	; 0x36
    6d1c:	ldrb	r0, [r2, r0]
    6d20:	strb	r0, [r1, #6]
    6d24:	ldrb	r0, [r2, ip, lsr #2]
    6d28:	strb	r0, [r1, #11]
    6d2c:	lsl	r0, r7, #8
    6d30:	orr	r0, r0, ip, lsl #16
    6d34:	ubfx	r0, r0, #12, #6
    6d38:	ldrb	r0, [r2, r0]
    6d3c:	strb	r0, [r1, #10]
    6d40:	orr	r0, r3, r7, lsl #8
    6d44:	ubfx	r0, r0, #6, #6
    6d48:	ldrb	ip, [sp, #44]	; 0x2c
    6d4c:	ldrb	r7, [sp, #45]	; 0x2d
    6d50:	ldrb	r0, [r2, r0]
    6d54:	strb	r0, [r1, #9]
    6d58:	and	r0, r3, #63	; 0x3f
    6d5c:	ldrb	r3, [sp, #49]	; 0x31
    6d60:	ldrb	r0, [r2, r0]
    6d64:	strb	r0, [r1, #8]
    6d68:	ldrb	r0, [sp, #43]	; 0x2b
    6d6c:	ldrb	r5, [r2, r0, lsr #2]
    6d70:	strb	r5, [r1, #15]
    6d74:	ldrb	r5, [r2, ip, lsr #2]
    6d78:	strb	r5, [r1, #19]
    6d7c:	ldrb	r5, [sp, #55]	; 0x37
    6d80:	and	r4, r5, #63	; 0x3f
    6d84:	orr	r5, r5, r3, lsl #8
    6d88:	ldrb	r4, [r2, r4]
    6d8c:	strb	r4, [r1, #12]
    6d90:	and	r4, r7, #63	; 0x3f
    6d94:	ldrb	r4, [r2, r4]
    6d98:	strb	r4, [r1, #16]
    6d9c:	ubfx	r5, r5, #6, #6
    6da0:	ldrb	r5, [r2, r5]
    6da4:	strb	r5, [r1, #13]
    6da8:	ldrb	r5, [sp, #50]	; 0x32
    6dac:	orr	r7, r7, r5, lsl #8
    6db0:	ubfx	r7, r7, #6, #6
    6db4:	ldrb	r7, [r2, r7]
    6db8:	strb	r7, [r1, #17]
    6dbc:	lsl	r7, r3, #8
    6dc0:	orr	r0, r7, r0, lsl #16
    6dc4:	ubfx	r0, r0, #12, #6
    6dc8:	ldrb	r0, [r2, r0]
    6dcc:	strb	r0, [r1, #14]
    6dd0:	lsl	r0, r5, #8
    6dd4:	orr	r0, r0, ip, lsl #16
    6dd8:	ubfx	r0, r0, #12, #6
    6ddc:	ldrb	r0, [r2, r0]
    6de0:	strb	r0, [r1, #18]
    6de4:	ldrb	r0, [sp, #51]	; 0x33
    6de8:	ldrb	r3, [r2, r0, lsr #6]
    6dec:	and	r0, r0, #63	; 0x3f
    6df0:	ldrb	r0, [r2, r0]
    6df4:	strb	r3, [r1, #21]
    6df8:	strb	r0, [r1, #20]
    6dfc:	add	r0, r1, #22
    6e00:	ldr	r2, [pc, #44]	; 6e34 <rb_crypt+0x1604>
    6e04:	add	r2, pc, r2
    6e08:	str	r0, [r2]
    6e0c:	mov	r0, #0
    6e10:	strb	r0, [r1, #22]
    6e14:	b	6330 <rb_crypt+0xb00>
    6e18:	.word	0x000380d8
    6e1c:	.word	0x00012c6c
    6e20:	.word	0x000380b4
    6e24:	.word	0x00012c3e
    6e28:	.word	0x00038078
    6e2c:	.word	0x00037bfc
    6e30:	.word	0x0001273b
    6e34:	.word	0x00037ae4
    6e38:	.word	0x0002759c
    6e3c:	.word	0x000275ac
    6e40:	.word	0x00027598
    6e44:	.word	0x00027564
    6e48:	.word	0x0002755c
    6e4c:	.word	0x0002d818
    6e50:	.word	0x0002d808
    6e54:	.word	0x0002b7d0
    6e58:	.word	0x0002b7c0
    6e5c:	.word	0x00027678
    6e60:	.word	0x00037790
    6e64:	.word	0x000387cc
    6e68:	.word	0x00038748
    6e6c:	.word	0x00031654
    6e70:	.word	0x0002f5d0
    6e74:	.word	0x00027254
    6e78:	.word	0x00013153

00006e7c <rb_des_init>:
    6e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e80:	add	fp, sp, #28
    6e84:	sub	sp, sp, #92	; 0x5c
    6e88:	ldr	r0, [pc, #3628]	; 7cbc <rb_des_init+0xe40>
    6e8c:	add	r0, pc, r0
    6e90:	ldrb	r0, [r0]
    6e94:	cmp	r0, #0
    6e98:	bne	7cb4 <rb_des_init+0xe38>
    6e9c:	ldr	r0, [pc, #3612]	; 7cc0 <rb_des_init+0xe44>
    6ea0:	mov	r2, #0
    6ea4:	mov	r3, #0
    6ea8:	add	r0, pc, r0
    6eac:	str	r2, [r0]
    6eb0:	ldr	r0, [pc, #3596]	; 7cc4 <rb_des_init+0xe48>
    6eb4:	add	r0, pc, r0
    6eb8:	str	r2, [r0]
    6ebc:	ldr	r0, [pc, #3588]	; 7cc8 <rb_des_init+0xe4c>
    6ec0:	add	r0, pc, r0
    6ec4:	str	r2, [r0]
    6ec8:	ldr	r0, [pc, #3580]	; 7ccc <rb_des_init+0xe50>
    6ecc:	add	r0, pc, r0
    6ed0:	str	r2, [r0]
    6ed4:	ldr	r1, [pc, #3572]	; 7cd0 <rb_des_init+0xe54>
    6ed8:	ldr	lr, [pc, #3572]	; 7cd4 <rb_des_init+0xe58>
    6edc:	add	r1, pc, r1
    6ee0:	add	lr, pc, lr
    6ee4:	and	r6, r2, #16
    6ee8:	and	r7, r3, #32
    6eec:	add	r2, r2, #16
    6ef0:	orr	r7, r6, r7
    6ef4:	ubfx	r6, r3, #1, #4
    6ef8:	orr	r7, r7, r6
    6efc:	ldrb	r7, [r1, r7]
    6f00:	strb	r7, [lr, r3]
    6f04:	add	r3, r3, #1
    6f08:	cmp	r3, #64	; 0x40
    6f0c:	bne	6ee4 <rb_des_init+0x68>
    6f10:	mov	r2, #0
    6f14:	mov	r3, #0
    6f18:	and	r6, r2, #16
    6f1c:	and	r7, r3, #32
    6f20:	add	r2, r2, #16
    6f24:	add	r0, lr, r3
    6f28:	orr	r7, r6, r7
    6f2c:	ubfx	r6, r3, #1, #4
    6f30:	add	r3, r3, #1
    6f34:	cmp	r2, #1024	; 0x400
    6f38:	orr	r7, r7, r6
    6f3c:	add	r7, r1, r7
    6f40:	ldrb	r7, [r7, #64]	; 0x40
    6f44:	strb	r7, [r0, #64]	; 0x40
    6f48:	bne	6f18 <rb_des_init+0x9c>
    6f4c:	mov	r2, #0
    6f50:	mov	r3, #0
    6f54:	and	r6, r2, #16
    6f58:	and	r7, r3, #32
    6f5c:	add	r2, r2, #16
    6f60:	add	r0, lr, r3
    6f64:	orr	r7, r6, r7
    6f68:	ubfx	r6, r3, #1, #4
    6f6c:	add	r3, r3, #1
    6f70:	cmp	r2, #1024	; 0x400
    6f74:	orr	r7, r7, r6
    6f78:	add	r7, r1, r7
    6f7c:	ldrb	r7, [r7, #128]	; 0x80
    6f80:	strb	r7, [r0, #128]	; 0x80
    6f84:	bne	6f54 <rb_des_init+0xd8>
    6f88:	mov	r2, #0
    6f8c:	mov	r3, #0
    6f90:	and	r6, r2, #16
    6f94:	and	r7, r3, #32
    6f98:	add	r2, r2, #16
    6f9c:	add	r0, lr, r3
    6fa0:	orr	r7, r6, r7
    6fa4:	ubfx	r6, r3, #1, #4
    6fa8:	add	r3, r3, #1
    6fac:	cmp	r2, #1024	; 0x400
    6fb0:	orr	r7, r7, r6
    6fb4:	add	r7, r1, r7
    6fb8:	ldrb	r7, [r7, #192]	; 0xc0
    6fbc:	strb	r7, [r0, #192]	; 0xc0
    6fc0:	bne	6f90 <rb_des_init+0x114>
    6fc4:	mov	r2, #0
    6fc8:	mov	r3, #0
    6fcc:	and	r6, r2, #16
    6fd0:	and	r7, r3, #32
    6fd4:	add	r2, r2, #16
    6fd8:	add	r0, lr, r3
    6fdc:	orr	r7, r6, r7
    6fe0:	ubfx	r6, r3, #1, #4
    6fe4:	add	r3, r3, #1
    6fe8:	cmp	r2, #1024	; 0x400
    6fec:	orr	r7, r7, r6
    6ff0:	add	r7, r1, r7
    6ff4:	ldrb	r7, [r7, #256]	; 0x100
    6ff8:	strb	r7, [r0, #256]	; 0x100
    6ffc:	bne	6fcc <rb_des_init+0x150>
    7000:	mov	r2, #0
    7004:	mov	r3, #0
    7008:	and	r6, r2, #16
    700c:	and	r7, r3, #32
    7010:	add	r2, r2, #16
    7014:	add	r0, lr, r3
    7018:	orr	r7, r6, r7
    701c:	ubfx	r6, r3, #1, #4
    7020:	add	r3, r3, #1
    7024:	cmp	r2, #1024	; 0x400
    7028:	orr	r7, r7, r6
    702c:	add	r7, r1, r7
    7030:	ldrb	r7, [r7, #320]	; 0x140
    7034:	strb	r7, [r0, #320]	; 0x140
    7038:	bne	7008 <rb_des_init+0x18c>
    703c:	mov	r2, #0
    7040:	mov	r3, #0
    7044:	and	r6, r2, #16
    7048:	and	r7, r3, #32
    704c:	add	r2, r2, #16
    7050:	add	r0, lr, r3
    7054:	orr	r7, r6, r7
    7058:	ubfx	r6, r3, #1, #4
    705c:	add	r3, r3, #1
    7060:	cmp	r2, #1024	; 0x400
    7064:	orr	r7, r7, r6
    7068:	add	r7, r1, r7
    706c:	ldrb	r7, [r7, #384]	; 0x180
    7070:	strb	r7, [r0, #384]	; 0x180
    7074:	bne	7044 <rb_des_init+0x1c8>
    7078:	mov	r2, #0
    707c:	mov	r3, #0
    7080:	and	r6, r2, #16
    7084:	and	r7, r3, #32
    7088:	add	r2, r2, #16
    708c:	add	r0, lr, r3
    7090:	orr	r7, r6, r7
    7094:	ubfx	r6, r3, #1, #4
    7098:	add	r3, r3, #1
    709c:	cmp	r2, #1024	; 0x400
    70a0:	orr	r7, r7, r6
    70a4:	add	r7, r1, r7
    70a8:	ldrb	r7, [r7, #448]	; 0x1c0
    70ac:	strb	r7, [r0, #448]	; 0x1c0
    70b0:	bne	7080 <rb_des_init+0x204>
    70b4:	ldr	r1, [pc, #3100]	; 7cd8 <rb_des_init+0xe5c>
    70b8:	mov	ip, #0
    70bc:	add	r1, pc, r1
    70c0:	ldrb	r3, [lr, ip]
    70c4:	lsl	r7, ip, #6
    70c8:	mov	r6, #0
    70cc:	lsl	r3, r3, #4
    70d0:	add	r4, lr, r6
    70d4:	orr	r5, r6, r7
    70d8:	ldrb	r2, [r4, #64]	; 0x40
    70dc:	orr	r2, r3, r2
    70e0:	strb	r2, [r1, r5]
    70e4:	ldrb	r5, [r4, #65]	; 0x41
    70e8:	add	r2, r6, #1
    70ec:	add	r6, r6, #2
    70f0:	cmp	r6, #64	; 0x40
    70f4:	orr	r2, r2, r7
    70f8:	orr	r5, r3, r5
    70fc:	strb	r5, [r1, r2]
    7100:	bne	70d0 <rb_des_init+0x254>
    7104:	add	ip, ip, #1
    7108:	cmp	ip, #64	; 0x40
    710c:	bne	70c0 <rb_des_init+0x244>
    7110:	mov	ip, #0
    7114:	add	r3, r1, #4096	; 0x1000
    7118:	add	r7, lr, ip
    711c:	lsl	r6, ip, #6
    7120:	mov	r5, #0
    7124:	ldrb	r7, [r7, #128]	; 0x80
    7128:	lsl	r7, r7, #4
    712c:	add	r2, lr, r5
    7130:	orr	r4, r5, r6
    7134:	ldrb	r0, [r2, #192]	; 0xc0
    7138:	ldrb	r2, [r2, #193]	; 0xc1
    713c:	orr	r0, r7, r0
    7140:	orr	r2, r7, r2
    7144:	strb	r0, [r3, r4]
    7148:	add	r0, r5, #1
    714c:	add	r5, r5, #2
    7150:	orr	r0, r0, r6
    7154:	cmp	r5, #64	; 0x40
    7158:	strb	r2, [r3, r0]
    715c:	bne	712c <rb_des_init+0x2b0>
    7160:	add	ip, ip, #1
    7164:	cmp	ip, #64	; 0x40
    7168:	bne	7118 <rb_des_init+0x29c>
    716c:	mov	ip, #0
    7170:	add	r3, r1, #8192	; 0x2000
    7174:	add	r0, lr, ip
    7178:	lsl	r6, ip, #6
    717c:	mov	r5, #0
    7180:	ldrb	r0, [r0, #256]	; 0x100
    7184:	lsl	r7, r0, #4
    7188:	add	r4, lr, r5
    718c:	orr	r0, r5, r6
    7190:	ldrb	r2, [r4, #320]	; 0x140
    7194:	orr	r2, r7, r2
    7198:	strb	r2, [r3, r0]
    719c:	ldrb	r2, [r4, #321]	; 0x141
    71a0:	add	r0, r5, #1
    71a4:	add	r5, r5, #2
    71a8:	cmp	r5, #64	; 0x40
    71ac:	orr	r0, r0, r6
    71b0:	orr	r2, r7, r2
    71b4:	strb	r2, [r3, r0]
    71b8:	bne	7188 <rb_des_init+0x30c>
    71bc:	add	ip, ip, #1
    71c0:	cmp	ip, #64	; 0x40
    71c4:	bne	7174 <rb_des_init+0x2f8>
    71c8:	mov	r2, #0
    71cc:	add	r1, r1, #12288	; 0x3000
    71d0:	add	r0, lr, r2
    71d4:	lsl	r7, r2, #6
    71d8:	mov	r6, #0
    71dc:	ldrb	r0, [r0, #384]	; 0x180
    71e0:	lsl	r3, r0, #4
    71e4:	add	r5, lr, r6
    71e8:	orr	r0, r6, r7
    71ec:	ldrb	r4, [r5, #448]	; 0x1c0
    71f0:	ldrb	r5, [r5, #449]	; 0x1c1
    71f4:	orr	r4, r3, r4
    71f8:	orr	r5, r3, r5
    71fc:	strb	r4, [r1, r0]
    7200:	add	r0, r6, #1
    7204:	add	r6, r6, #2
    7208:	orr	r0, r0, r7
    720c:	cmp	r6, #64	; 0x40
    7210:	strb	r5, [r1, r0]
    7214:	bne	71e4 <rb_des_init+0x368>
    7218:	add	r2, r2, #1
    721c:	cmp	r2, #64	; 0x40
    7220:	bne	71d0 <rb_des_init+0x354>
    7224:	ldr	r4, [pc, #2736]	; 7cdc <rb_des_init+0xe60>
    7228:	mov	r1, #255	; 0xff
    722c:	mov	r2, #64	; 0x40
    7230:	add	r4, pc, r4
    7234:	mov	r0, r4
    7238:	bl	4ed4 <memset@plt>
    723c:	ldr	r1, [pc, #2716]	; 7ce0 <rb_des_init+0xe64>
    7240:	ldr	r5, [pc, #2716]	; 7ce4 <rb_des_init+0xe68>
    7244:	ldr	r7, [pc, #2716]	; 7ce8 <rb_des_init+0xe6c>
    7248:	mov	r0, #0
    724c:	add	r1, pc, r1
    7250:	add	r5, pc, r5
    7254:	add	r7, pc, r7
    7258:	ldrb	r2, [r1, r0]
    725c:	sub	r2, r2, #1
    7260:	strb	r2, [r5, r0]
    7264:	uxtb	r2, r2
    7268:	strb	r0, [r7, r2]
    726c:	add	r0, r0, #1
    7270:	cmp	r0, #64	; 0x40
    7274:	bne	7258 <rb_des_init+0x3dc>
    7278:	ldr	r6, [pc, #2668]	; 7cec <rb_des_init+0xe70>
    727c:	mov	r1, #255	; 0xff
    7280:	mov	r2, #56	; 0x38
    7284:	add	r6, pc, r6
    7288:	mov	r0, r6
    728c:	bl	4ed4 <memset@plt>
    7290:	ldr	r1, [pc, #2648]	; 7cf0 <rb_des_init+0xe74>
    7294:	mov	r0, #0
    7298:	add	r1, pc, r1
    729c:	mov	r2, r1
    72a0:	ldrb	r3, [r2, r0]!
    72a4:	ldrb	r2, [r2, #1]
    72a8:	add	r3, r3, r4
    72ac:	strb	r0, [r3, #-1]
    72b0:	add	r3, r0, #1
    72b4:	add	r0, r0, #2
    72b8:	add	r2, r2, r4
    72bc:	cmp	r0, #56	; 0x38
    72c0:	strb	r3, [r2, #-1]
    72c4:	bne	729c <rb_des_init+0x420>
    72c8:	ldr	r1, [pc, #2596]	; 7cf4 <rb_des_init+0xe78>
    72cc:	mov	r0, #0
    72d0:	add	r1, pc, r1
    72d4:	mov	r2, r1
    72d8:	ldrb	r3, [r2, r0]!
    72dc:	ldrb	r2, [r2, #1]
    72e0:	add	r3, r3, r6
    72e4:	strb	r0, [r3, #-1]
    72e8:	add	r3, r0, #1
    72ec:	add	r0, r0, #2
    72f0:	add	r2, r2, r6
    72f4:	cmp	r0, #48	; 0x30
    72f8:	strb	r3, [r2, #-1]
    72fc:	bne	72d4 <rb_des_init+0x458>
    7300:	ldr	r8, [pc, #2544]	; 7cf8 <rb_des_init+0xe7c>
    7304:	ldr	r1, [pc, #2544]	; 7cfc <rb_des_init+0xe80>
    7308:	mov	r0, #0
    730c:	add	r1, pc, r1
    7310:	add	r8, pc, r8
    7314:	str	r1, [fp, #-44]	; 0xffffffd4
    7318:	ldr	r1, [pc, #2528]	; 7d00 <rb_des_init+0xe84>
    731c:	add	r1, pc, r1
    7320:	str	r1, [fp, #-48]	; 0xffffffd0
    7324:	ldr	r1, [pc, #2520]	; 7d04 <rb_des_init+0xe88>
    7328:	add	r1, pc, r1
    732c:	str	r1, [fp, #-52]	; 0xffffffcc
    7330:	b	737c <rb_des_init+0x500>
    7334:	ldr	r0, [fp, #-52]	; 0xffffffcc
    7338:	ldr	r7, [fp, #-36]	; 0xffffffdc
    733c:	ldr	r5, [fp, #-32]	; 0xffffffe0
    7340:	add	r8, r8, #512	; 0x200
    7344:	add	r0, r0, #512	; 0x200
    7348:	add	r7, r7, #8
    734c:	add	r5, r5, #8
    7350:	str	r0, [fp, #-52]	; 0xffffffcc
    7354:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7358:	add	r0, r0, #512	; 0x200
    735c:	str	r0, [fp, #-48]	; 0xffffffd0
    7360:	ldr	r0, [fp, #-44]	; 0xffffffd4
    7364:	add	r0, r0, #512	; 0x200
    7368:	str	r0, [fp, #-44]	; 0xffffffd4
    736c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    7370:	add	r0, r0, #1
    7374:	cmp	r0, #8
    7378:	beq	7aa0 <rb_des_init+0xc24>
    737c:	lsl	r1, r0, #3
    7380:	str	r8, [sp, #4]
    7384:	str	r5, [fp, #-32]	; 0xffffffe0
    7388:	str	r7, [fp, #-36]	; 0xffffffdc
    738c:	str	r0, [fp, #-56]	; 0xffffffc8
    7390:	str	r1, [sp, #60]	; 0x3c
    7394:	mov	r1, #0
    7398:	b	73ac <rb_des_init+0x530>
    739c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    73a0:	add	r1, r1, #1
    73a4:	cmp	r1, #256	; 0x100
    73a8:	beq	74a4 <rb_des_init+0x628>
    73ac:	ldr	r2, [pc, #2388]	; 7d08 <rb_des_init+0xe8c>
    73b0:	mov	r3, #0
    73b4:	mov	r6, #0
    73b8:	mov	lr, #0
    73bc:	add	r2, pc, r2
    73c0:	add	r2, r2, r0, lsl #10
    73c4:	str	r3, [r2, r1, lsl #2]!
    73c8:	str	r2, [fp, #-40]	; 0xffffffd8
    73cc:	ldr	r2, [pc, #2360]	; 7d0c <rb_des_init+0xe90>
    73d0:	add	r2, pc, r2
    73d4:	add	r9, r2, r0, lsl #10
    73d8:	str	r3, [r9, r1, lsl #2]!
    73dc:	ldr	r2, [pc, #2348]	; 7d10 <rb_des_init+0xe94>
    73e0:	add	r2, pc, r2
    73e4:	add	sl, r2, r0, lsl #10
    73e8:	str	r3, [sl, r1, lsl #2]!
    73ec:	ldr	r2, [pc, #2336]	; 7d14 <rb_des_init+0xe98>
    73f0:	add	r2, pc, r2
    73f4:	add	ip, r2, r0, lsl #10
    73f8:	mov	r0, #0
    73fc:	mov	r2, #0
    7400:	str	r3, [ip, r1, lsl #2]!
    7404:	b	7424 <rb_des_init+0x5a8>
    7408:	add	r5, r4, r5, lsl #2
    740c:	ldr	r5, [r5, #-128]	; 0xffffff80
    7410:	orr	r6, r6, r5
    7414:	str	r6, [ip]
    7418:	add	lr, lr, #1
    741c:	cmp	lr, #8
    7420:	beq	739c <rb_des_init+0x520>
    7424:	ldr	r4, [pc, #2284]	; 7d18 <rb_des_init+0xe9c>
    7428:	add	r4, pc, r4
    742c:	ldrb	r5, [r4, lr]
    7430:	tst	r1, r5
    7434:	beq	7418 <rb_des_init+0x59c>
    7438:	ldrb	r8, [r7, lr]
    743c:	cmp	r8, #31
    7440:	bhi	7460 <rb_des_init+0x5e4>
    7444:	ldr	r5, [pc, #2256]	; 7d1c <rb_des_init+0xea0>
    7448:	ldr	r4, [fp, #-40]	; 0xffffffd8
    744c:	add	r5, pc, r5
    7450:	ldr	r5, [r5, r8, lsl #2]
    7454:	orr	r0, r0, r5
    7458:	str	r0, [r4]
    745c:	b	7478 <rb_des_init+0x5fc>
    7460:	ldr	r4, [pc, #2232]	; 7d20 <rb_des_init+0xea4>
    7464:	add	r4, pc, r4
    7468:	add	r5, r4, r8, lsl #2
    746c:	ldr	r5, [r5, #-128]	; 0xffffff80
    7470:	orr	r2, r2, r5
    7474:	str	r2, [r9]
    7478:	ldr	r5, [fp, #-32]	; 0xffffffe0
    747c:	ldr	r7, [fp, #-36]	; 0xffffffdc
    7480:	ldrb	r5, [r5, lr]
    7484:	ldr	r4, [pc, #2200]	; 7d24 <rb_des_init+0xea8>
    7488:	add	r4, pc, r4
    748c:	cmp	r5, #31
    7490:	bhi	7408 <rb_des_init+0x58c>
    7494:	ldr	r5, [r4, r5, lsl #2]
    7498:	orr	r3, r3, r5
    749c:	str	r3, [sl]
    74a0:	b	7418 <rb_des_init+0x59c>
    74a4:	ldr	r1, [sp, #60]	; 0x3c
    74a8:	mov	ip, #0
    74ac:	orr	r2, r1, #6
    74b0:	str	r2, [sp, #56]	; 0x38
    74b4:	orr	r2, r1, #5
    74b8:	str	r2, [sp, #52]	; 0x34
    74bc:	orr	r2, r1, #4
    74c0:	str	r2, [sp, #48]	; 0x30
    74c4:	orr	r2, r1, #3
    74c8:	str	r2, [sp, #44]	; 0x2c
    74cc:	orr	r2, r1, #2
    74d0:	orr	r1, r1, #1
    74d4:	str	r1, [sp, #36]	; 0x24
    74d8:	rsb	r1, r0, r0, lsl #3
    74dc:	str	r2, [sp, #40]	; 0x28
    74e0:	add	r0, r1, #6
    74e4:	str	r1, [sp, #32]
    74e8:	str	r0, [sp, #28]
    74ec:	add	r0, r1, #5
    74f0:	str	r0, [sp, #24]
    74f4:	add	r0, r1, #4
    74f8:	str	r0, [sp, #20]
    74fc:	add	r0, r1, #3
    7500:	str	r0, [sp, #16]
    7504:	add	r0, r1, #2
    7508:	str	r0, [sp, #12]
    750c:	mov	r0, r1
    7510:	add	r0, r1, #1
    7514:	str	r0, [sp, #8]
    7518:	ldr	r8, [pc, #2056]	; 7d28 <rb_des_init+0xeac>
    751c:	ldr	r9, [pc, #2056]	; 7d2c <rb_des_init+0xeb0>
    7520:	add	r8, pc, r8
    7524:	add	r9, pc, r9
    7528:	mov	r4, r8
    752c:	ldr	r8, [sp, #4]
    7530:	mov	r6, r9
    7534:	b	7560 <rb_des_init+0x6e4>
    7538:	ldr	r1, [pc, #2152]	; 7da8 <rb_des_init+0xf2c>
    753c:	add	r1, pc, r1
    7540:	add	r0, r1, r0, lsl #2
    7544:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7548:	ldr	r0, [r0, #32]
    754c:	orr	r0, r5, r0
    7550:	str	r0, [r1, ip, lsl #2]
    7554:	add	ip, ip, #1
    7558:	cmp	ip, #128	; 0x80
    755c:	beq	7334 <rb_des_init+0x4b8>
    7560:	ldr	r0, [fp, #-44]	; 0xffffffd4
    7564:	mov	r1, #0
    7568:	ands	r5, ip, #64	; 0x40
    756c:	mov	r2, #0
    7570:	str	r1, [r8, ip, lsl #2]
    7574:	str	r1, [r0, ip, lsl #2]
    7578:	mov	r1, #0
    757c:	beq	75b8 <rb_des_init+0x73c>
    7580:	ldr	r0, [sp, #60]	; 0x3c
    7584:	mov	r1, #0
    7588:	mov	r2, #0
    758c:	ldrb	r0, [r4, r0]
    7590:	cmp	r0, #255	; 0xff
    7594:	beq	75b8 <rb_des_init+0x73c>
    7598:	ldr	r1, [pc, #1936]	; 7d30 <rb_des_init+0xeb4>
    759c:	cmp	r0, #27
    75a0:	add	r1, pc, r1
    75a4:	bhi	75fc <rb_des_init+0x780>
    75a8:	add	r0, r1, r0, lsl #2
    75ac:	mov	r2, #0
    75b0:	ldr	r1, [r0, #16]
    75b4:	str	r1, [r8, ip, lsl #2]
    75b8:	ands	lr, ip, #32
    75bc:	beq	7630 <rb_des_init+0x7b4>
    75c0:	ldr	r0, [sp, #36]	; 0x24
    75c4:	ldrb	r0, [r4, r0]
    75c8:	cmp	r0, #255	; 0xff
    75cc:	beq	7630 <rb_des_init+0x7b4>
    75d0:	ldr	r3, [pc, #1884]	; 7d34 <rb_des_init+0xeb8>
    75d4:	cmp	r0, #28
    75d8:	add	r3, pc, r3
    75dc:	bcs	761c <rb_des_init+0x7a0>
    75e0:	add	r0, r3, r0, lsl #2
    75e4:	ldr	r0, [r0, #16]
    75e8:	orr	r1, r1, r0
    75ec:	str	r1, [r8, ip, lsl #2]
    75f0:	ands	r9, ip, #16
    75f4:	bne	7638 <rb_des_init+0x7bc>
    75f8:	b	7668 <rb_des_init+0x7ec>
    75fc:	add	r0, r1, r0, lsl #2
    7600:	mov	r1, #0
    7604:	ldr	r2, [r0, #-96]	; 0xffffffa0
    7608:	ldr	r0, [fp, #-44]	; 0xffffffd4
    760c:	str	r2, [r0, ip, lsl #2]
    7610:	ands	lr, ip, #32
    7614:	bne	75c0 <rb_des_init+0x744>
    7618:	b	7630 <rb_des_init+0x7b4>
    761c:	add	r0, r3, r0, lsl #2
    7620:	ldr	r0, [r0, #-96]	; 0xffffffa0
    7624:	orr	r2, r2, r0
    7628:	ldr	r0, [fp, #-44]	; 0xffffffd4
    762c:	str	r2, [r0, ip, lsl #2]
    7630:	ands	r9, ip, #16
    7634:	beq	7668 <rb_des_init+0x7ec>
    7638:	ldr	r0, [sp, #40]	; 0x28
    763c:	ldrb	r0, [r4, r0]
    7640:	cmp	r0, #255	; 0xff
    7644:	beq	7668 <rb_des_init+0x7ec>
    7648:	ldr	r3, [pc, #1828]	; 7d74 <rb_des_init+0xef8>
    764c:	cmp	r0, #28
    7650:	add	r3, pc, r3
    7654:	bcs	76a4 <rb_des_init+0x828>
    7658:	add	r0, r3, r0, lsl #2
    765c:	ldr	r0, [r0, #16]
    7660:	orr	r1, r1, r0
    7664:	str	r1, [r8, ip, lsl #2]
    7668:	ands	r7, ip, #8
    766c:	beq	76d8 <rb_des_init+0x85c>
    7670:	ldr	r0, [sp, #44]	; 0x2c
    7674:	ldrb	r0, [r4, r0]
    7678:	cmp	r0, #255	; 0xff
    767c:	beq	76d8 <rb_des_init+0x85c>
    7680:	ldr	r3, [pc, #1776]	; 7d78 <rb_des_init+0xefc>
    7684:	cmp	r0, #28
    7688:	add	r3, pc, r3
    768c:	bcs	76c4 <rb_des_init+0x848>
    7690:	add	r0, r3, r0, lsl #2
    7694:	ldr	r0, [r0, #16]
    7698:	orr	r1, r1, r0
    769c:	str	r1, [r8, ip, lsl #2]
    76a0:	b	76d8 <rb_des_init+0x85c>
    76a4:	add	r0, r3, r0, lsl #2
    76a8:	ldr	r0, [r0, #-96]	; 0xffffffa0
    76ac:	orr	r2, r2, r0
    76b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    76b4:	str	r2, [r0, ip, lsl #2]
    76b8:	ands	r7, ip, #8
    76bc:	bne	7670 <rb_des_init+0x7f4>
    76c0:	b	76d8 <rb_des_init+0x85c>
    76c4:	add	r0, r3, r0, lsl #2
    76c8:	ldr	r0, [r0, #-96]	; 0xffffffa0
    76cc:	orr	r2, r2, r0
    76d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    76d4:	str	r2, [r0, ip, lsl #2]
    76d8:	ands	sl, ip, #4
    76dc:	str	sl, [fp, #-40]	; 0xffffffd8
    76e0:	beq	7714 <rb_des_init+0x898>
    76e4:	ldr	r0, [sp, #48]	; 0x30
    76e8:	ldrb	r0, [r4, r0]
    76ec:	cmp	r0, #255	; 0xff
    76f0:	beq	7714 <rb_des_init+0x898>
    76f4:	ldr	r3, [pc, #1664]	; 7d7c <rb_des_init+0xf00>
    76f8:	cmp	r0, #28
    76fc:	add	r3, pc, r3
    7700:	bcs	7758 <rb_des_init+0x8dc>
    7704:	add	r0, r3, r0, lsl #2
    7708:	ldr	r0, [r0, #16]
    770c:	orr	r1, r1, r0
    7710:	str	r1, [r8, ip, lsl #2]
    7714:	ands	r3, ip, #2
    7718:	beq	778c <rb_des_init+0x910>
    771c:	ldr	r0, [sp, #52]	; 0x34
    7720:	ldrb	r0, [r4, r0]
    7724:	cmp	r0, #255	; 0xff
    7728:	beq	778c <rb_des_init+0x910>
    772c:	ldr	r4, [pc, #1612]	; 7d80 <rb_des_init+0xf04>
    7730:	cmp	r0, #28
    7734:	add	r4, pc, r4
    7738:	bcs	7778 <rb_des_init+0x8fc>
    773c:	add	r0, r4, r0, lsl #2
    7740:	ldr	r0, [r0, #16]
    7744:	orr	r1, r1, r0
    7748:	str	r1, [r8, ip, lsl #2]
    774c:	ands	r4, ip, #1
    7750:	bne	7794 <rb_des_init+0x918>
    7754:	b	7828 <rb_des_init+0x9ac>
    7758:	add	r0, r3, r0, lsl #2
    775c:	ldr	r0, [r0, #-96]	; 0xffffffa0
    7760:	orr	r2, r2, r0
    7764:	ldr	r0, [fp, #-44]	; 0xffffffd4
    7768:	str	r2, [r0, ip, lsl #2]
    776c:	ands	r3, ip, #2
    7770:	bne	771c <rb_des_init+0x8a0>
    7774:	b	778c <rb_des_init+0x910>
    7778:	add	r0, r4, r0, lsl #2
    777c:	ldr	r0, [r0, #-96]	; 0xffffffa0
    7780:	orr	r2, r2, r0
    7784:	ldr	r0, [fp, #-44]	; 0xffffffd4
    7788:	str	r2, [r0, ip, lsl #2]
    778c:	ands	r4, ip, #1
    7790:	beq	7828 <rb_des_init+0x9ac>
    7794:	mov	sl, r2
    7798:	mov	r2, r1
    779c:	mov	r1, r5
    77a0:	mov	r5, r9
    77a4:	mov	r9, r4
    77a8:	mov	r4, lr
    77ac:	mov	lr, r3
    77b0:	ldr	r0, [sp, #56]	; 0x38
    77b4:	mov	r3, r8
    77b8:	ldr	r8, [pc, #1476]	; 7d84 <rb_des_init+0xf08>
    77bc:	add	r8, pc, r8
    77c0:	ldrb	r0, [r8, r0]
    77c4:	mov	r8, r3
    77c8:	mov	r3, lr
    77cc:	mov	lr, r4
    77d0:	mov	r4, r9
    77d4:	mov	r9, r5
    77d8:	mov	r5, r1
    77dc:	cmp	r0, #255	; 0xff
    77e0:	beq	7828 <rb_des_init+0x9ac>
    77e4:	cmp	r0, #28
    77e8:	bcs	780c <rb_des_init+0x990>
    77ec:	mov	r1, r2
    77f0:	ldr	r2, [pc, #1428]	; 7d8c <rb_des_init+0xf10>
    77f4:	add	r2, pc, r2
    77f8:	add	r0, r2, r0, lsl #2
    77fc:	ldr	r0, [r0, #16]
    7800:	orr	r0, r1, r0
    7804:	str	r0, [r8, ip, lsl #2]
    7808:	b	7828 <rb_des_init+0x9ac>
    780c:	ldr	r1, [pc, #1396]	; 7d88 <rb_des_init+0xf0c>
    7810:	add	r1, pc, r1
    7814:	add	r0, r1, r0, lsl #2
    7818:	ldr	r1, [fp, #-44]	; 0xffffffd4
    781c:	ldr	r0, [r0, #-96]	; 0xffffffa0
    7820:	orr	r0, sl, r0
    7824:	str	r0, [r1, ip, lsl #2]
    7828:	ldr	r0, [fp, #-48]	; 0xffffffd0
    782c:	mov	r1, #0
    7830:	cmp	r5, #0
    7834:	str	r1, [r0, ip, lsl #2]
    7838:	ldr	r0, [fp, #-52]	; 0xffffffcc
    783c:	str	r1, [r0, ip, lsl #2]
    7840:	beq	7898 <rb_des_init+0xa1c>
    7844:	ldr	r0, [sp, #32]
    7848:	ldrb	r0, [r6, r0]
    784c:	cmp	r0, #255	; 0xff
    7850:	beq	7898 <rb_des_init+0xa1c>
    7854:	cmp	r0, #23
    7858:	bhi	7880 <rb_des_init+0xa04>
    785c:	ldr	r2, [pc, #1236]	; 7d38 <rb_des_init+0xebc>
    7860:	add	r2, pc, r2
    7864:	add	r0, r2, r0, lsl #2
    7868:	ldr	r5, [r0, #32]
    786c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7870:	str	r5, [r0, ip, lsl #2]
    7874:	cmp	lr, #0
    7878:	bne	78a4 <rb_des_init+0xa28>
    787c:	b	78d8 <rb_des_init+0xa5c>
    7880:	ldr	r1, [pc, #1204]	; 7d3c <rb_des_init+0xec0>
    7884:	add	r1, pc, r1
    7888:	add	r0, r1, r0, lsl #2
    788c:	ldr	r1, [r0, #-64]	; 0xffffffc0
    7890:	ldr	r0, [fp, #-52]	; 0xffffffcc
    7894:	str	r1, [r0, ip, lsl #2]
    7898:	mov	r5, #0
    789c:	cmp	lr, #0
    78a0:	beq	78d8 <rb_des_init+0xa5c>
    78a4:	ldr	r0, [sp, #8]
    78a8:	ldrb	r0, [r6, r0]
    78ac:	cmp	r0, #255	; 0xff
    78b0:	beq	78d8 <rb_des_init+0xa5c>
    78b4:	ldr	r2, [pc, #1156]	; 7d40 <rb_des_init+0xec4>
    78b8:	cmp	r0, #24
    78bc:	add	r2, pc, r2
    78c0:	bcs	7920 <rb_des_init+0xaa4>
    78c4:	add	r0, r2, r0, lsl #2
    78c8:	ldr	r0, [r0, #32]
    78cc:	orr	r5, r5, r0
    78d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    78d4:	str	r5, [r0, ip, lsl #2]
    78d8:	cmp	r9, #0
    78dc:	beq	7954 <rb_des_init+0xad8>
    78e0:	ldr	r0, [sp, #12]
    78e4:	ldrb	r0, [r6, r0]
    78e8:	cmp	r0, #255	; 0xff
    78ec:	beq	7954 <rb_des_init+0xad8>
    78f0:	ldr	r2, [pc, #1176]	; 7d90 <rb_des_init+0xf14>
    78f4:	cmp	r0, #24
    78f8:	add	r2, pc, r2
    78fc:	bcs	7940 <rb_des_init+0xac4>
    7900:	add	r0, r2, r0, lsl #2
    7904:	ldr	r0, [r0, #32]
    7908:	orr	r5, r5, r0
    790c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7910:	str	r5, [r0, ip, lsl #2]
    7914:	cmp	r7, #0
    7918:	bne	795c <rb_des_init+0xae0>
    791c:	b	79a8 <rb_des_init+0xb2c>
    7920:	add	r0, r2, r0, lsl #2
    7924:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7928:	orr	r1, r1, r0
    792c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    7930:	str	r1, [r0, ip, lsl #2]
    7934:	cmp	r9, #0
    7938:	bne	78e0 <rb_des_init+0xa64>
    793c:	b	7954 <rb_des_init+0xad8>
    7940:	add	r0, r2, r0, lsl #2
    7944:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7948:	orr	r1, r1, r0
    794c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    7950:	str	r1, [r0, ip, lsl #2]
    7954:	cmp	r7, #0
    7958:	beq	79a8 <rb_des_init+0xb2c>
    795c:	ldr	r0, [sp, #16]
    7960:	ldrb	r0, [r6, r0]
    7964:	cmp	r0, #255	; 0xff
    7968:	beq	79a8 <rb_des_init+0xb2c>
    796c:	ldr	r2, [pc, #1056]	; 7d94 <rb_des_init+0xf18>
    7970:	cmp	r0, #24
    7974:	add	r2, pc, r2
    7978:	bcs	7994 <rb_des_init+0xb18>
    797c:	add	r0, r2, r0, lsl #2
    7980:	ldr	r0, [r0, #32]
    7984:	orr	r5, r5, r0
    7988:	ldr	r0, [fp, #-48]	; 0xffffffd0
    798c:	str	r5, [r0, ip, lsl #2]
    7990:	b	79a8 <rb_des_init+0xb2c>
    7994:	add	r0, r2, r0, lsl #2
    7998:	ldr	r0, [r0, #-64]	; 0xffffffc0
    799c:	orr	r1, r1, r0
    79a0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    79a4:	str	r1, [r0, ip, lsl #2]
    79a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    79ac:	cmp	r0, #0
    79b0:	beq	79e8 <rb_des_init+0xb6c>
    79b4:	ldr	r0, [sp, #20]
    79b8:	ldrb	r0, [r6, r0]
    79bc:	cmp	r0, #255	; 0xff
    79c0:	beq	79e8 <rb_des_init+0xb6c>
    79c4:	ldr	r2, [pc, #972]	; 7d98 <rb_des_init+0xf1c>
    79c8:	cmp	r0, #24
    79cc:	add	r2, pc, r2
    79d0:	bcs	7a28 <rb_des_init+0xbac>
    79d4:	add	r0, r2, r0, lsl #2
    79d8:	ldr	r0, [r0, #32]
    79dc:	orr	r5, r5, r0
    79e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    79e4:	str	r5, [r0, ip, lsl #2]
    79e8:	cmp	r3, #0
    79ec:	beq	7a5c <rb_des_init+0xbe0>
    79f0:	ldr	r0, [sp, #24]
    79f4:	ldrb	r0, [r6, r0]
    79f8:	cmp	r0, #255	; 0xff
    79fc:	beq	7a5c <rb_des_init+0xbe0>
    7a00:	ldr	r2, [pc, #916]	; 7d9c <rb_des_init+0xf20>
    7a04:	cmp	r0, #24
    7a08:	add	r2, pc, r2
    7a0c:	bcs	7a48 <rb_des_init+0xbcc>
    7a10:	add	r0, r2, r0, lsl #2
    7a14:	ldr	r0, [r0, #32]
    7a18:	orr	r5, r5, r0
    7a1c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7a20:	str	r5, [r0, ip, lsl #2]
    7a24:	b	7a5c <rb_des_init+0xbe0>
    7a28:	add	r0, r2, r0, lsl #2
    7a2c:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7a30:	orr	r1, r1, r0
    7a34:	ldr	r0, [fp, #-52]	; 0xffffffcc
    7a38:	str	r1, [r0, ip, lsl #2]
    7a3c:	cmp	r3, #0
    7a40:	bne	79f0 <rb_des_init+0xb74>
    7a44:	b	7a5c <rb_des_init+0xbe0>
    7a48:	add	r0, r2, r0, lsl #2
    7a4c:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7a50:	orr	r1, r1, r0
    7a54:	ldr	r0, [fp, #-52]	; 0xffffffcc
    7a58:	str	r1, [r0, ip, lsl #2]
    7a5c:	cmp	r4, #0
    7a60:	ldr	r4, [pc, #824]	; 7da0 <rb_des_init+0xf24>
    7a64:	add	r4, pc, r4
    7a68:	beq	7554 <rb_des_init+0x6d8>
    7a6c:	ldr	r0, [sp, #28]
    7a70:	ldrb	r0, [r6, r0]
    7a74:	cmp	r0, #255	; 0xff
    7a78:	beq	7554 <rb_des_init+0x6d8>
    7a7c:	cmp	r0, #24
    7a80:	bcc	7538 <rb_des_init+0x6bc>
    7a84:	ldr	r2, [pc, #792]	; 7da4 <rb_des_init+0xf28>
    7a88:	add	r2, pc, r2
    7a8c:	add	r0, r2, r0, lsl #2
    7a90:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7a94:	orr	r0, r1, r0
    7a98:	ldr	r1, [fp, #-52]	; 0xffffffcc
    7a9c:	b	7550 <rb_des_init+0x6d4>
    7aa0:	ldr	r2, [pc, #668]	; 7d44 <rb_des_init+0xec8>
    7aa4:	ldr	r1, [pc, #668]	; 7d48 <rb_des_init+0xecc>
    7aa8:	mov	r0, #0
    7aac:	add	r2, pc, r2
    7ab0:	add	r1, pc, r1
    7ab4:	mov	r3, r2
    7ab8:	ldrb	r7, [r3, r0]!
    7abc:	ldrb	r3, [r3, #1]
    7ac0:	add	r7, r7, r1
    7ac4:	strb	r0, [r7, #-1]
    7ac8:	add	r7, r0, #1
    7acc:	add	r0, r0, #2
    7ad0:	add	r3, r3, r1
    7ad4:	cmp	r0, #32
    7ad8:	strb	r7, [r3, #-1]
    7adc:	bne	7ab4 <rb_des_init+0xc38>
    7ae0:	ldr	r3, [pc, #612]	; 7d4c <rb_des_init+0xed0>
    7ae4:	mov	r2, #0
    7ae8:	add	r3, pc, r3
    7aec:	b	7b04 <rb_des_init+0xc88>
    7af0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7af4:	add	r3, r3, #1024	; 0x400
    7af8:	add	r2, r2, #1
    7afc:	cmp	r2, #4
    7b00:	beq	7ca4 <rb_des_init+0xe28>
    7b04:	mov	r0, #7
    7b08:	lsl	r6, r2, #3
    7b0c:	mov	r5, #0
    7b10:	str	r2, [fp, #-36]	; 0xffffffdc
    7b14:	orr	r0, r0, r2, lsl #3
    7b18:	str	r0, [fp, #-32]	; 0xffffffe0
    7b1c:	mov	r0, #6
    7b20:	orr	sl, r0, r2, lsl #3
    7b24:	mov	r0, #5
    7b28:	orr	ip, r0, r2, lsl #3
    7b2c:	mov	r0, #4
    7b30:	orr	lr, r0, r2, lsl #3
    7b34:	mov	r0, #3
    7b38:	orr	r8, r0, r2, lsl #3
    7b3c:	mov	r0, #2
    7b40:	orr	r9, r0, r2, lsl #3
    7b44:	mov	r0, #1
    7b48:	orr	r0, r0, r2, lsl #3
    7b4c:	b	7b5c <rb_des_init+0xce0>
    7b50:	add	r5, r5, #1
    7b54:	cmp	r5, #256	; 0x100
    7b58:	beq	7af0 <rb_des_init+0xc74>
    7b5c:	mov	r2, #0
    7b60:	tst	r5, #128	; 0x80
    7b64:	str	r2, [r3, r5, lsl #2]
    7b68:	bne	7ba8 <rb_des_init+0xd2c>
    7b6c:	tst	r5, #64	; 0x40
    7b70:	bne	7bc4 <rb_des_init+0xd48>
    7b74:	tst	r5, #32
    7b78:	bne	7be4 <rb_des_init+0xd68>
    7b7c:	tst	r5, #16
    7b80:	bne	7c04 <rb_des_init+0xd88>
    7b84:	tst	r5, #8
    7b88:	bne	7c24 <rb_des_init+0xda8>
    7b8c:	tst	r5, #4
    7b90:	bne	7c44 <rb_des_init+0xdc8>
    7b94:	tst	r5, #2
    7b98:	bne	7c64 <rb_des_init+0xde8>
    7b9c:	tst	r5, #1
    7ba0:	beq	7b50 <rb_des_init+0xcd4>
    7ba4:	b	7c84 <rb_des_init+0xe08>
    7ba8:	ldrb	r2, [r1, r6]
    7bac:	ldr	r4, [pc, #412]	; 7d50 <rb_des_init+0xed4>
    7bb0:	add	r4, pc, r4
    7bb4:	ldr	r2, [r4, r2, lsl #2]
    7bb8:	str	r2, [r3, r5, lsl #2]
    7bbc:	tst	r5, #64	; 0x40
    7bc0:	beq	7b74 <rb_des_init+0xcf8>
    7bc4:	ldrb	r4, [r1, r0]
    7bc8:	ldr	r7, [pc, #388]	; 7d54 <rb_des_init+0xed8>
    7bcc:	add	r7, pc, r7
    7bd0:	ldr	r4, [r7, r4, lsl #2]
    7bd4:	orr	r2, r2, r4
    7bd8:	str	r2, [r3, r5, lsl #2]
    7bdc:	tst	r5, #32
    7be0:	beq	7b7c <rb_des_init+0xd00>
    7be4:	ldrb	r4, [r1, r9]
    7be8:	ldr	r7, [pc, #360]	; 7d58 <rb_des_init+0xedc>
    7bec:	add	r7, pc, r7
    7bf0:	ldr	r4, [r7, r4, lsl #2]
    7bf4:	orr	r2, r2, r4
    7bf8:	str	r2, [r3, r5, lsl #2]
    7bfc:	tst	r5, #16
    7c00:	beq	7b84 <rb_des_init+0xd08>
    7c04:	ldrb	r4, [r1, r8]
    7c08:	ldr	r7, [pc, #332]	; 7d5c <rb_des_init+0xee0>
    7c0c:	add	r7, pc, r7
    7c10:	ldr	r4, [r7, r4, lsl #2]
    7c14:	orr	r2, r2, r4
    7c18:	str	r2, [r3, r5, lsl #2]
    7c1c:	tst	r5, #8
    7c20:	beq	7b8c <rb_des_init+0xd10>
    7c24:	ldrb	r4, [r1, lr]
    7c28:	ldr	r7, [pc, #304]	; 7d60 <rb_des_init+0xee4>
    7c2c:	add	r7, pc, r7
    7c30:	ldr	r4, [r7, r4, lsl #2]
    7c34:	orr	r2, r2, r4
    7c38:	str	r2, [r3, r5, lsl #2]
    7c3c:	tst	r5, #4
    7c40:	beq	7b94 <rb_des_init+0xd18>
    7c44:	ldrb	r4, [r1, ip]
    7c48:	ldr	r7, [pc, #276]	; 7d64 <rb_des_init+0xee8>
    7c4c:	add	r7, pc, r7
    7c50:	ldr	r4, [r7, r4, lsl #2]
    7c54:	orr	r2, r2, r4
    7c58:	str	r2, [r3, r5, lsl #2]
    7c5c:	tst	r5, #2
    7c60:	beq	7b9c <rb_des_init+0xd20>
    7c64:	ldrb	r4, [r1, sl]
    7c68:	ldr	r7, [pc, #248]	; 7d68 <rb_des_init+0xeec>
    7c6c:	add	r7, pc, r7
    7c70:	ldr	r4, [r7, r4, lsl #2]
    7c74:	orr	r2, r2, r4
    7c78:	str	r2, [r3, r5, lsl #2]
    7c7c:	tst	r5, #1
    7c80:	beq	7b50 <rb_des_init+0xcd4>
    7c84:	ldr	r4, [fp, #-32]	; 0xffffffe0
    7c88:	ldrb	r4, [r1, r4]
    7c8c:	ldr	r7, [pc, #216]	; 7d6c <rb_des_init+0xef0>
    7c90:	add	r7, pc, r7
    7c94:	ldr	r4, [r7, r4, lsl #2]
    7c98:	orr	r2, r2, r4
    7c9c:	str	r2, [r3, r5, lsl #2]
    7ca0:	b	7b50 <rb_des_init+0xcd4>
    7ca4:	ldr	r1, [pc, #196]	; 7d70 <rb_des_init+0xef4>
    7ca8:	mov	r0, #1
    7cac:	add	r1, pc, r1
    7cb0:	strb	r0, [r1]
    7cb4:	sub	sp, fp, #28
    7cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cbc:	.word	0x0002662c
    7cc0:	.word	0x00026618
    7cc4:	.word	0x00026608
    7cc8:	.word	0x00026604
    7ccc:	.word	0x000265fc
    7cd0:	.word	0x000125bc
    7cd4:	.word	0x000265ec
    7cd8:	.word	0x00026610
    7cdc:	.word	0x0002a520
    7ce0:	.word	0x0001244c
    7ce4:	.word	0x0002a4bc
    7ce8:	.word	0x0002a478
    7cec:	.word	0x0002a50c
    7cf0:	.word	0x00012440
    7cf4:	.word	0x00012440
    7cf8:	.word	0x000324b8
    7cfc:	.word	0x000334bc
    7d00:	.word	0x000344ac
    7d04:	.word	0x000354a0
    7d08:	.word	0x0002a40c
    7d0c:	.word	0x0002c3f8
    7d10:	.word	0x0002e3e8
    7d14:	.word	0x000303d8
    7d18:	.word	0x00012778
    7d1c:	.word	0x00011fcc
    7d20:	.word	0x00011fb4
    7d24:	.word	0x00011f90
    7d28:	.word	0x0002a230
    7d2c:	.word	0x0002a26c
    7d30:	.word	0x00011e78
    7d34:	.word	0x00011e40
    7d38:	.word	0x00011bb8
    7d3c:	.word	0x00011b94
    7d40:	.word	0x00011b5c
    7d44:	.word	0x000120fc
    7d48:	.word	0x00035d18
    7d4c:	.word	0x00035d00
    7d50:	.word	0x00011868
    7d54:	.word	0x0001184c
    7d58:	.word	0x0001182c
    7d5c:	.word	0x0001180c
    7d60:	.word	0x000117ec
    7d64:	.word	0x000117cc
    7d68:	.word	0x000117ac
    7d6c:	.word	0x00011788
    7d70:	.word	0x0002580c
    7d74:	.word	0x00011dc8
    7d78:	.word	0x00011d90
    7d7c:	.word	0x00011d1c
    7d80:	.word	0x00011ce4
    7d84:	.word	0x00029f94
    7d88:	.word	0x00011c08
    7d8c:	.word	0x00011c24
    7d90:	.word	0x00011b20
    7d94:	.word	0x00011aa4
    7d98:	.word	0x00011a4c
    7d9c:	.word	0x00011a10
    7da0:	.word	0x00029cec
    7da4:	.word	0x00011990
    7da8:	.word	0x00011edc

00007dac <MD5Final>:
    7dac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7db0:	add	fp, sp, #28
    7db4:	sub	sp, sp, #12
    7db8:	mov	r7, r0
    7dbc:	ldr	r0, [r1, #16]
    7dc0:	mov	r4, r1
    7dc4:	ldr	r1, [r1, #20]
    7dc8:	stm	sp, {r0, r1}
    7dcc:	ubfx	sl, r0, #3, #6
    7dd0:	mov	r1, #120	; 0x78
    7dd4:	cmp	sl, #56	; 0x38
    7dd8:	rsb	r6, sl, #64	; 0x40
    7ddc:	movwcc	r1, #56	; 0x38
    7de0:	sub	r5, r1, sl
    7de4:	add	r1, r0, r5, lsl #3
    7de8:	str	r1, [r4, #16]
    7dec:	cmp	r1, r5, lsl #3
    7df0:	ldr	r0, [r4, #20]
    7df4:	addcc	r0, r0, #1
    7df8:	strcc	r0, [r4, #20]
    7dfc:	add	r0, r0, r5, lsr #29
    7e00:	cmp	r6, r5
    7e04:	str	r0, [r4, #20]
    7e08:	ldr	r0, [pc, #328]	; 7f58 <MD5Final+0x1ac>
    7e0c:	add	r0, pc, r0
    7e10:	bls	7e1c <MD5Final+0x70>
    7e14:	mov	r6, #0
    7e18:	b	7e88 <MD5Final+0xdc>
    7e1c:	mov	r8, r7
    7e20:	ldr	r7, [pc, #308]	; 7f5c <MD5Final+0x1b0>
    7e24:	add	r9, r4, #24
    7e28:	mov	r2, r6
    7e2c:	add	r0, r9, sl
    7e30:	add	r7, pc, r7
    7e34:	mov	r1, r7
    7e38:	bl	509c <memcpy@plt>
    7e3c:	mov	r0, r4
    7e40:	mov	r1, r9
    7e44:	bl	7f64 <MD5Transform>
    7e48:	eor	r0, sl, #127	; 0x7f
    7e4c:	mov	sl, #0
    7e50:	cmp	r0, r5
    7e54:	bcs	7e7c <MD5Final+0xd0>
    7e58:	add	r1, r7, r6
    7e5c:	mov	r0, r4
    7e60:	bl	7f64 <MD5Transform>
    7e64:	add	r1, r6, #127	; 0x7f
    7e68:	add	r0, r6, #64	; 0x40
    7e6c:	cmp	r1, r5
    7e70:	mov	r6, r0
    7e74:	bcc	7e58 <MD5Final+0xac>
    7e78:	mov	r6, r0
    7e7c:	ldr	r0, [pc, #220]	; 7f60 <MD5Final+0x1b4>
    7e80:	mov	r7, r8
    7e84:	add	r0, pc, r0
    7e88:	add	r1, r0, r6
    7e8c:	add	r0, r4, sl
    7e90:	sub	r2, r5, r6
    7e94:	add	r0, r0, #24
    7e98:	bl	509c <memcpy@plt>
    7e9c:	ldr	r0, [r4, #16]
    7ea0:	ldr	r1, [r4, #20]
    7ea4:	mov	r8, #0
    7ea8:	mov	r6, #0
    7eac:	adds	r2, r0, #64	; 0x40
    7eb0:	str	r2, [r4, #16]
    7eb4:	ubfx	r0, r0, #3, #6
    7eb8:	addcs	r1, r1, #1
    7ebc:	strcs	r1, [r4, #20]
    7ec0:	cmp	r0, #56	; 0x38
    7ec4:	str	r1, [r4, #20]
    7ec8:	bcc	7ef4 <MD5Final+0x148>
    7ecc:	rsb	r6, r0, #64	; 0x40
    7ed0:	add	r5, r4, #24
    7ed4:	mov	r1, sp
    7ed8:	add	r0, r5, r0
    7edc:	mov	r2, r6
    7ee0:	bl	509c <memcpy@plt>
    7ee4:	mov	r0, r4
    7ee8:	mov	r1, r5
    7eec:	bl	7f64 <MD5Transform>
    7ef0:	mov	r0, #0
    7ef4:	mov	r1, sp
    7ef8:	add	r0, r4, r0
    7efc:	rsb	r2, r6, #8
    7f00:	add	r1, r1, r6
    7f04:	add	r0, r0, #24
    7f08:	bl	509c <memcpy@plt>
    7f0c:	mov	r0, #80	; 0x50
    7f10:	mov	r1, r4
    7f14:	vmov.i32	q9, #0	; 0x00000000
    7f18:	vld1.8	{d16-d17}, [r1], r0
    7f1c:	add	r0, r4, #16
    7f20:	vst1.8	{d16-d17}, [r7]
    7f24:	vst1.8	{d18-d19}, [r0]
    7f28:	add	r0, r4, #32
    7f2c:	str	r8, [r1]
    7f30:	vst1.8	{d18-d19}, [r0]
    7f34:	add	r0, r4, #48	; 0x30
    7f38:	vst1.8	{d18-d19}, [r0]
    7f3c:	add	r0, r4, #64	; 0x40
    7f40:	vst1.8	{d18-d19}, [r0]
    7f44:	mov	r0, #84	; 0x54
    7f48:	vst1.8	{d18-d19}, [r4], r0
    7f4c:	str	r8, [r4]
    7f50:	sub	sp, fp, #28
    7f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f58:	.word	0x000245e4
    7f5c:	.word	0x000245c0
    7f60:	.word	0x0002456c

00007f64 <MD5Transform>:
    7f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f68:	add	fp, sp, #28
    7f6c:	sub	sp, sp, #84	; 0x54
    7f70:	mov	ip, r1
    7f74:	ldr	r4, [r0, #4]
    7f78:	ldr	r2, [r0, #12]
    7f7c:	ldr	r1, [r0, #8]
    7f80:	ldr	r5, [r0]
    7f84:	str	r0, [sp, #16]
    7f88:	ldr	r9, [ip, #4]
    7f8c:	ldr	lr, [ip, #8]
    7f90:	ldr	r8, [ip, #12]
    7f94:	and	r0, r1, r4
    7f98:	bic	r3, r2, r4
    7f9c:	str	r5, [sp, #24]
    7fa0:	str	r1, [sp, #32]
    7fa4:	str	r4, [sp, #20]
    7fa8:	str	r2, [sp, #28]
    7fac:	orr	r0, r3, r0
    7fb0:	ldr	r3, [ip]
    7fb4:	str	r8, [fp, #-44]	; 0xffffffd4
    7fb8:	str	lr, [fp, #-52]	; 0xffffffcc
    7fbc:	str	r9, [fp, #-48]	; 0xffffffd0
    7fc0:	str	r3, [fp, #-36]	; 0xffffffdc
    7fc4:	add	r3, r5, r3
    7fc8:	add	r0, r3, r0
    7fcc:	movw	r3, #42104	; 0xa478
    7fd0:	movt	r3, #55146	; 0xd76a
    7fd4:	add	r0, r0, r3
    7fd8:	add	r0, r4, r0, ror #25
    7fdc:	bic	r3, r1, r0
    7fe0:	and	r7, r0, r4
    7fe4:	orr	r3, r7, r3
    7fe8:	add	r7, r2, r9
    7fec:	add	r3, r7, r3
    7ff0:	movw	r7, #46934	; 0xb756
    7ff4:	movt	r7, #59591	; 0xe8c7
    7ff8:	add	r3, r3, r7
    7ffc:	add	r3, r0, r3, ror #20
    8000:	bic	r7, r4, r3
    8004:	and	r6, r3, r0
    8008:	orr	r7, r6, r7
    800c:	add	r6, r1, lr
    8010:	ldr	r1, [ip, #16]
    8014:	ldr	lr, [ip, #44]	; 0x2c
    8018:	add	r7, r6, r7
    801c:	movw	r6, #28891	; 0x70db
    8020:	movt	r6, #9248	; 0x2420
    8024:	add	r7, r7, r6
    8028:	str	r1, [sp, #48]	; 0x30
    802c:	str	lr, [fp, #-40]	; 0xffffffd8
    8030:	add	r7, r3, r7, ror #15
    8034:	bic	r6, r0, r7
    8038:	and	r5, r7, r3
    803c:	add	r0, r1, r0
    8040:	ldr	r1, [ip, #20]
    8044:	orr	r6, r5, r6
    8048:	add	r5, r4, r8
    804c:	ldr	r8, [ip, #24]
    8050:	add	r6, r5, r6
    8054:	movw	r5, #52974	; 0xceee
    8058:	movt	r5, #49597	; 0xc1bd
    805c:	str	r1, [sp, #36]	; 0x24
    8060:	add	r6, r6, r5
    8064:	str	r8, [sp, #12]
    8068:	add	r4, r7, r6, ror #10
    806c:	bic	r6, r3, r4
    8070:	and	r5, r4, r7
    8074:	add	r3, r1, r3
    8078:	ldr	r1, [ip, #28]
    807c:	orr	r6, r5, r6
    8080:	add	r0, r0, r6
    8084:	movw	r6, #4015	; 0xfaf
    8088:	movt	r6, #62844	; 0xf57c
    808c:	str	r1, [sp, #52]	; 0x34
    8090:	add	r0, r0, r6
    8094:	add	r0, r4, r0, ror #25
    8098:	bic	r6, r7, r0
    809c:	and	r5, r0, r4
    80a0:	add	r7, r8, r7
    80a4:	orr	r5, r5, r6
    80a8:	add	r3, r3, r5
    80ac:	movw	r5, #50730	; 0xc62a
    80b0:	movt	r5, #18311	; 0x4787
    80b4:	add	r3, r3, r5
    80b8:	add	r3, r0, r3, ror #20
    80bc:	bic	r5, r4, r3
    80c0:	and	r6, r3, r0
    80c4:	add	r4, r1, r4
    80c8:	ldr	r1, [ip, #32]
    80cc:	orr	r5, r6, r5
    80d0:	add	r7, r7, r5
    80d4:	movw	r5, #17939	; 0x4613
    80d8:	movt	r5, #43056	; 0xa830
    80dc:	str	r1, [sp, #44]	; 0x2c
    80e0:	add	r7, r7, r5
    80e4:	add	r5, r3, r7, ror #15
    80e8:	bic	r7, r0, r5
    80ec:	and	r6, r5, r3
    80f0:	add	r0, r1, r0
    80f4:	ldr	r1, [ip, #36]	; 0x24
    80f8:	orr	r6, r6, r7
    80fc:	add	r4, r4, r6
    8100:	movw	r6, #38145	; 0x9501
    8104:	movt	r6, #64838	; 0xfd46
    8108:	str	r1, [fp, #-32]	; 0xffffffe0
    810c:	add	r4, r4, r6
    8110:	add	r6, r5, r4, ror #10
    8114:	bic	r4, r3, r6
    8118:	and	r7, r6, r5
    811c:	add	r3, r1, r3
    8120:	ldr	r1, [ip, #40]	; 0x28
    8124:	orr	r4, r7, r4
    8128:	add	r0, r0, r4
    812c:	movw	r4, #39128	; 0x98d8
    8130:	movt	r4, #27008	; 0x6980
    8134:	str	r1, [sp, #56]	; 0x38
    8138:	add	r0, r0, r4
    813c:	add	r0, r6, r0, ror #25
    8140:	bic	r4, r5, r0
    8144:	and	r7, r0, r6
    8148:	add	r5, r1, r5
    814c:	orr	r4, r7, r4
    8150:	add	r3, r3, r4
    8154:	movw	r4, #63407	; 0xf7af
    8158:	movt	r4, #35652	; 0x8b44
    815c:	add	r3, r3, r4
    8160:	add	r3, r0, r3, ror #20
    8164:	bic	r4, r6, r3
    8168:	and	r7, r3, r0
    816c:	add	r6, lr, r6
    8170:	orr	r7, r7, r4
    8174:	ldr	r4, [ip, #48]	; 0x30
    8178:	add	r5, r5, r7
    817c:	movw	r7, #42063	; 0xa44f
    8180:	sub	r5, r5, r7
    8184:	add	r1, r3, r5, ror #15
    8188:	str	r4, [sp, #4]
    818c:	bic	r5, r0, r1
    8190:	and	r7, r1, r3
    8194:	add	r0, r4, r0
    8198:	ldr	r4, [ip, #52]	; 0x34
    819c:	orr	r5, r7, r5
    81a0:	add	r5, r6, r5
    81a4:	movw	r6, #55230	; 0xd7be
    81a8:	movt	r6, #35164	; 0x895c
    81ac:	str	r4, [sp, #40]	; 0x28
    81b0:	add	r5, r5, r6
    81b4:	add	r2, r1, r5, ror #10
    81b8:	bic	r5, r3, r2
    81bc:	and	r6, r2, r1
    81c0:	add	r3, r4, r3
    81c4:	ldr	r4, [ip, #56]	; 0x38
    81c8:	orr	r5, r6, r5
    81cc:	add	r0, r0, r5
    81d0:	movw	r5, #4386	; 0x1122
    81d4:	movt	r5, #27536	; 0x6b90
    81d8:	add	r0, r0, r5
    81dc:	add	r0, r2, r0, ror #25
    81e0:	bic	r5, r1, r0
    81e4:	and	r7, r0, r2
    81e8:	add	r1, r4, r1
    81ec:	orr	r7, r7, r5
    81f0:	add	r3, r3, r7
    81f4:	movw	r7, #29075	; 0x7193
    81f8:	movt	r7, #64920	; 0xfd98
    81fc:	add	r3, r3, r7
    8200:	add	r7, r0, r3, ror #20
    8204:	bic	r3, r2, r7
    8208:	and	sl, r7, r0
    820c:	orr	r3, sl, r3
    8210:	mov	sl, r4
    8214:	add	r1, r1, r3
    8218:	movw	r3, #17294	; 0x438e
    821c:	str	sl, [sp]
    8220:	movt	r3, #42617	; 0xa679
    8224:	add	r1, r1, r3
    8228:	add	r3, r7, r1, ror #15
    822c:	bic	r1, r0, r3
    8230:	and	r5, r3, r7
    8234:	bic	r4, r3, r7
    8238:	add	r0, r9, r0
    823c:	ldr	r9, [sp, #36]	; 0x24
    8240:	orr	r5, r5, r1
    8244:	ldr	r1, [ip, #60]	; 0x3c
    8248:	ldr	ip, [sp, #48]	; 0x30
    824c:	add	r2, r1, r2
    8250:	mov	r6, r1
    8254:	str	r1, [sp, #8]
    8258:	ldr	r1, [fp, #-36]	; 0xffffffdc
    825c:	add	r2, r2, r5
    8260:	movw	r5, #2081	; 0x821
    8264:	movt	r5, #18868	; 0x49b4
    8268:	add	r2, r2, r5
    826c:	add	r2, r3, r2, ror #10
    8270:	and	r5, r2, r7
    8274:	add	r7, r8, r7
    8278:	ldr	r8, [sp, #44]	; 0x2c
    827c:	orr	r5, r5, r4
    8280:	bic	r4, r2, r3
    8284:	add	r0, r0, r5
    8288:	movw	r5, #9570	; 0x2562
    828c:	movt	r5, #63006	; 0xf61e
    8290:	add	r0, r0, r5
    8294:	add	r0, r2, r0, ror #27
    8298:	and	r5, r0, r3
    829c:	add	r3, lr, r3
    82a0:	mov	lr, sl
    82a4:	orr	r5, r5, r4
    82a8:	bic	r4, r0, r2
    82ac:	add	r7, r7, r5
    82b0:	movw	r5, #45888	; 0xb340
    82b4:	movt	r5, #49216	; 0xc040
    82b8:	add	r7, r7, r5
    82bc:	add	r7, r0, r7, ror #23
    82c0:	and	r5, r7, r2
    82c4:	add	r2, r1, r2
    82c8:	ldr	r1, [sp, #56]	; 0x38
    82cc:	orr	r5, r5, r4
    82d0:	bic	r4, r7, r0
    82d4:	add	r3, r3, r5
    82d8:	movw	r5, #23121	; 0x5a51
    82dc:	movt	r5, #9822	; 0x265e
    82e0:	add	r3, r3, r5
    82e4:	add	r3, r7, r3, ror #18
    82e8:	and	r5, r3, r0
    82ec:	add	r0, r9, r0
    82f0:	orr	r5, r5, r4
    82f4:	bic	r4, r3, r7
    82f8:	add	r2, r2, r5
    82fc:	movw	r5, #51114	; 0xc7aa
    8300:	movt	r5, #59830	; 0xe9b6
    8304:	add	r2, r2, r5
    8308:	add	r2, r3, r2, ror #12
    830c:	and	r5, r2, r7
    8310:	add	r7, r1, r7
    8314:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8318:	orr	r5, r5, r4
    831c:	bic	r4, r2, r3
    8320:	add	r0, r0, r5
    8324:	movw	r5, #4189	; 0x105d
    8328:	movt	r5, #54831	; 0xd62f
    832c:	add	r0, r0, r5
    8330:	add	r0, r2, r0, ror #27
    8334:	and	r5, r0, r3
    8338:	add	r3, r6, r3
    833c:	ldr	r6, [sp, #4]
    8340:	orr	r5, r5, r4
    8344:	bic	r4, r0, r2
    8348:	add	r7, r7, r5
    834c:	movw	r5, #5203	; 0x1453
    8350:	movt	r5, #580	; 0x244
    8354:	add	r7, r7, r5
    8358:	add	r7, r0, r7, ror #23
    835c:	and	r5, r7, r2
    8360:	add	r2, ip, r2
    8364:	orr	r5, r5, r4
    8368:	bic	r4, r7, r0
    836c:	add	r3, r3, r5
    8370:	movw	r5, #59009	; 0xe681
    8374:	movt	r5, #55457	; 0xd8a1
    8378:	add	r3, r3, r5
    837c:	add	r3, r7, r3, ror #18
    8380:	and	r5, r3, r0
    8384:	add	r0, r1, r0
    8388:	ldr	r1, [fp, #-44]	; 0xffffffd4
    838c:	orr	r5, r5, r4
    8390:	bic	r4, r3, r7
    8394:	add	r2, r2, r5
    8398:	movw	r5, #64456	; 0xfbc8
    839c:	movt	r5, #59347	; 0xe7d3
    83a0:	add	r2, r2, r5
    83a4:	add	r2, r3, r2, ror #12
    83a8:	and	r5, r2, r7
    83ac:	add	r7, sl, r7
    83b0:	ldr	sl, [sp, #40]	; 0x28
    83b4:	orr	r5, r5, r4
    83b8:	bic	r4, r2, r3
    83bc:	add	r0, r0, r5
    83c0:	movw	r5, #52710	; 0xcde6
    83c4:	movt	r5, #8673	; 0x21e1
    83c8:	add	r0, r0, r5
    83cc:	add	r0, r2, r0, ror #27
    83d0:	and	r5, r0, r3
    83d4:	add	r3, r1, r3
    83d8:	ldr	r1, [fp, #-52]	; 0xffffffcc
    83dc:	orr	r5, r5, r4
    83e0:	bic	r4, r0, r2
    83e4:	add	r7, r7, r5
    83e8:	movw	r5, #2006	; 0x7d6
    83ec:	movt	r5, #49975	; 0xc337
    83f0:	add	r7, r7, r5
    83f4:	add	r7, r0, r7, ror #23
    83f8:	and	r5, r7, r2
    83fc:	add	r2, r8, r2
    8400:	orr	r5, r5, r4
    8404:	bic	r4, r7, r0
    8408:	add	r3, r3, r5
    840c:	movw	r5, #3463	; 0xd87
    8410:	movt	r5, #62677	; 0xf4d5
    8414:	add	r3, r3, r5
    8418:	add	r3, r7, r3, ror #18
    841c:	and	r5, r3, r0
    8420:	add	r0, sl, r0
    8424:	orr	r5, r5, r4
    8428:	bic	r4, r3, r7
    842c:	add	r2, r2, r5
    8430:	movw	r5, #5357	; 0x14ed
    8434:	movt	r5, #17754	; 0x455a
    8438:	add	r2, r2, r5
    843c:	add	r2, r3, r2, ror #12
    8440:	and	r5, r2, r7
    8444:	add	r7, r1, r7
    8448:	ldr	r1, [sp, #52]	; 0x34
    844c:	orr	r5, r5, r4
    8450:	bic	r4, r2, r3
    8454:	add	r0, r0, r5
    8458:	movw	r5, #59653	; 0xe905
    845c:	movt	r5, #43491	; 0xa9e3
    8460:	add	r0, r0, r5
    8464:	add	r0, r2, r0, ror #27
    8468:	and	r5, r0, r3
    846c:	add	r3, r1, r3
    8470:	orr	r5, r5, r4
    8474:	bic	r4, r0, r2
    8478:	add	r7, r7, r5
    847c:	movw	r5, #41976	; 0xa3f8
    8480:	movt	r5, #64751	; 0xfcef
    8484:	add	r7, r7, r5
    8488:	add	r7, r0, r7, ror #23
    848c:	and	r5, r7, r2
    8490:	add	r2, r6, r2
    8494:	orr	r5, r5, r4
    8498:	bic	r4, r7, r0
    849c:	add	r3, r3, r5
    84a0:	movw	r5, #729	; 0x2d9
    84a4:	movt	r5, #26479	; 0x676f
    84a8:	add	r3, r3, r5
    84ac:	add	r3, r7, r3, ror #18
    84b0:	and	r5, r3, r0
    84b4:	add	r0, r9, r0
    84b8:	ldr	r9, [sp, #12]
    84bc:	orr	r5, r5, r4
    84c0:	add	r2, r2, r5
    84c4:	movw	r5, #19594	; 0x4c8a
    84c8:	movt	r5, #36138	; 0x8d2a
    84cc:	add	r2, r2, r5
    84d0:	add	r2, r3, r2, ror #12
    84d4:	eor	r5, r2, r3
    84d8:	eor	r4, r5, r7
    84dc:	add	r7, r8, r7
    84e0:	ldr	r8, [sp, #56]	; 0x38
    84e4:	add	r0, r0, r4
    84e8:	movw	r4, #14658	; 0x3942
    84ec:	movt	r4, #65530	; 0xfffa
    84f0:	add	r0, r0, r4
    84f4:	ldr	r4, [fp, #-40]	; 0xffffffd8
    84f8:	add	r0, r2, r0, ror #28
    84fc:	eor	r5, r5, r0
    8500:	add	r7, r7, r5
    8504:	movw	r5, #63105	; 0xf681
    8508:	add	r3, r4, r3
    850c:	ldr	r4, [fp, #-48]	; 0xffffffd0
    8510:	movt	r5, #34673	; 0x8771
    8514:	add	r7, r7, r5
    8518:	eor	r5, r0, r2
    851c:	add	r2, lr, r2
    8520:	ldr	lr, [sp, #8]
    8524:	add	r7, r0, r7, ror #21
    8528:	eor	r5, r5, r7
    852c:	add	r3, r3, r5
    8530:	movw	r5, #24866	; 0x6122
    8534:	movt	r5, #28061	; 0x6d9d
    8538:	add	r3, r3, r5
    853c:	eor	r5, r7, r0
    8540:	add	r0, r4, r0
    8544:	ldr	r4, [fp, #-36]	; 0xffffffdc
    8548:	add	r3, r7, r3, ror #16
    854c:	eor	r5, r5, r3
    8550:	add	r2, r2, r5
    8554:	movw	r5, #14348	; 0x380c
    8558:	movt	r5, #64997	; 0xfde5
    855c:	add	r2, r2, r5
    8560:	eor	r5, r3, r7
    8564:	add	r7, ip, r7
    8568:	ldr	ip, [fp, #-44]	; 0xffffffd4
    856c:	add	r2, r3, r2, ror #9
    8570:	eor	r5, r5, r2
    8574:	add	r0, r0, r5
    8578:	movw	r5, #59972	; 0xea44
    857c:	movt	r5, #42174	; 0xa4be
    8580:	add	r0, r0, r5
    8584:	eor	r5, r2, r3
    8588:	add	r3, r1, r3
    858c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8590:	add	r0, r2, r0, ror #28
    8594:	eor	r5, r5, r0
    8598:	add	r7, r7, r5
    859c:	movw	r5, #53161	; 0xcfa9
    85a0:	movt	r5, #19422	; 0x4bde
    85a4:	add	r7, r7, r5
    85a8:	eor	r5, r0, r2
    85ac:	add	r2, r8, r2
    85b0:	add	r7, r0, r7, ror #21
    85b4:	eor	r5, r5, r7
    85b8:	add	r3, r3, r5
    85bc:	movw	r5, #19296	; 0x4b60
    85c0:	movt	r5, #63163	; 0xf6bb
    85c4:	add	r3, r3, r5
    85c8:	eor	r5, r7, r0
    85cc:	add	r0, sl, r0
    85d0:	ldr	sl, [fp, #-52]	; 0xffffffcc
    85d4:	add	r3, r7, r3, ror #16
    85d8:	eor	r5, r5, r3
    85dc:	add	r2, r2, r5
    85e0:	movw	r5, #48240	; 0xbc70
    85e4:	movt	r5, #48831	; 0xbebf
    85e8:	add	r2, r2, r5
    85ec:	eor	r5, r3, r7
    85f0:	add	r7, r4, r7
    85f4:	add	r2, r3, r2, ror #9
    85f8:	eor	r5, r5, r2
    85fc:	add	r0, r0, r5
    8600:	movw	r5, #32454	; 0x7ec6
    8604:	movt	r5, #10395	; 0x289b
    8608:	add	r0, r0, r5
    860c:	eor	r5, r2, r3
    8610:	add	r3, ip, r3
    8614:	add	r0, r2, r0, ror #28
    8618:	eor	r5, r5, r0
    861c:	add	r7, r7, r5
    8620:	movw	r5, #10234	; 0x27fa
    8624:	movt	r5, #60065	; 0xeaa1
    8628:	add	r7, r7, r5
    862c:	eor	r5, r0, r2
    8630:	add	r2, r9, r2
    8634:	add	r7, r0, r7, ror #21
    8638:	eor	r5, r5, r7
    863c:	add	r3, r3, r5
    8640:	movw	r5, #12421	; 0x3085
    8644:	movt	r5, #54511	; 0xd4ef
    8648:	add	r3, r3, r5
    864c:	eor	r5, r7, r0
    8650:	add	r0, r1, r0
    8654:	ldr	r1, [sp, #52]	; 0x34
    8658:	add	r3, r7, r3, ror #16
    865c:	eor	r5, r5, r3
    8660:	add	r2, r2, r5
    8664:	movw	r5, #7429	; 0x1d05
    8668:	movt	r5, #1160	; 0x488
    866c:	add	r2, r2, r5
    8670:	eor	r5, r3, r7
    8674:	add	r7, r6, r7
    8678:	add	r2, r3, r2, ror #9
    867c:	eor	r5, r5, r2
    8680:	add	r0, r0, r5
    8684:	movw	r5, #53305	; 0xd039
    8688:	movt	r5, #55764	; 0xd9d4
    868c:	add	r0, r0, r5
    8690:	eor	r5, r2, r3
    8694:	add	r3, lr, r3
    8698:	add	r0, r2, r0, ror #28
    869c:	eor	r5, r5, r0
    86a0:	add	r7, r7, r5
    86a4:	movw	r5, #39397	; 0x99e5
    86a8:	movt	r5, #59099	; 0xe6db
    86ac:	add	r7, r7, r5
    86b0:	eor	r5, r0, r2
    86b4:	add	r2, sl, r2
    86b8:	add	r7, r0, r7, ror #21
    86bc:	eor	r5, r5, r7
    86c0:	add	r3, r3, r5
    86c4:	movw	r5, #31992	; 0x7cf8
    86c8:	movt	r5, #8098	; 0x1fa2
    86cc:	add	r3, r3, r5
    86d0:	eor	r5, r7, r0
    86d4:	add	r0, r4, r0
    86d8:	add	r3, r7, r3, ror #16
    86dc:	eor	r5, r5, r3
    86e0:	add	r2, r2, r5
    86e4:	movw	r5, #22117	; 0x5665
    86e8:	movt	r5, #50348	; 0xc4ac
    86ec:	add	r2, r2, r5
    86f0:	mvn	r5, r7
    86f4:	add	r7, r1, r7
    86f8:	ldr	r1, [sp]
    86fc:	add	r2, r3, r2, ror #9
    8700:	orr	r5, r2, r5
    8704:	eor	r5, r5, r3
    8708:	add	r0, r0, r5
    870c:	movw	r5, #8772	; 0x2244
    8710:	movt	r5, #62505	; 0xf429
    8714:	add	r0, r0, r5
    8718:	mvn	r5, r3
    871c:	add	r3, r1, r3
    8720:	ldr	r1, [sp, #36]	; 0x24
    8724:	add	r0, r2, r0, ror #26
    8728:	orr	r5, r0, r5
    872c:	eor	r5, r5, r2
    8730:	add	r7, r7, r5
    8734:	movw	r5, #65431	; 0xff97
    8738:	movt	r5, #17194	; 0x432a
    873c:	add	r7, r7, r5
    8740:	mvn	r5, r2
    8744:	add	r2, r1, r2
    8748:	ldr	r1, [fp, #-48]	; 0xffffffd0
    874c:	add	r7, r0, r7, ror #22
    8750:	orr	r5, r7, r5
    8754:	eor	r5, r5, r0
    8758:	add	r3, r3, r5
    875c:	movw	r5, #9127	; 0x23a7
    8760:	movt	r5, #43924	; 0xab94
    8764:	add	r3, r3, r5
    8768:	mvn	r5, r0
    876c:	add	r0, r6, r0
    8770:	movw	r6, #22979	; 0x59c3
    8774:	add	r3, r7, r3, ror #17
    8778:	movt	r6, #25947	; 0x655b
    877c:	orr	r5, r3, r5
    8780:	eor	r5, r5, r7
    8784:	add	r2, r2, r5
    8788:	movw	r5, #41017	; 0xa039
    878c:	movt	r5, #64659	; 0xfc93
    8790:	add	r2, r2, r5
    8794:	mvn	r5, r7
    8798:	add	r7, ip, r7
    879c:	add	r2, r3, r2, ror #11
    87a0:	orr	r5, r2, r5
    87a4:	eor	r5, r5, r3
    87a8:	add	r0, r0, r5
    87ac:	ldr	r5, [fp, #-40]	; 0xffffffd8
    87b0:	add	r0, r0, r6
    87b4:	mvn	r6, r3
    87b8:	add	r3, r8, r3
    87bc:	add	r0, r2, r0, ror #26
    87c0:	orr	r6, r0, r6
    87c4:	eor	r6, r6, r2
    87c8:	add	r7, r7, r6
    87cc:	movw	r6, #52370	; 0xcc92
    87d0:	movt	r6, #36620	; 0x8f0c
    87d4:	add	r7, r7, r6
    87d8:	mvn	r6, r2
    87dc:	add	r2, r1, r2
    87e0:	ldr	r1, [sp, #44]	; 0x2c
    87e4:	add	r7, r0, r7, ror #22
    87e8:	orr	r6, r7, r6
    87ec:	eor	r6, r6, r0
    87f0:	add	r3, r3, r6
    87f4:	movw	r6, #62589	; 0xf47d
    87f8:	movt	r6, #65519	; 0xffef
    87fc:	add	r3, r3, r6
    8800:	mvn	r6, r0
    8804:	add	r0, r1, r0
    8808:	add	r1, lr, r7
    880c:	add	r3, r7, r3, ror #17
    8810:	orr	r6, r3, r6
    8814:	eor	r6, r6, r7
    8818:	add	r2, r2, r6
    881c:	movw	r6, #24017	; 0x5dd1
    8820:	movt	r6, #34180	; 0x8584
    8824:	add	r2, r2, r6
    8828:	mvn	r6, r7
    882c:	ldr	r7, [sp, #40]	; 0x28
    8830:	add	r2, r3, r2, ror #11
    8834:	orr	r6, r2, r6
    8838:	eor	r6, r6, r3
    883c:	add	r0, r0, r6
    8840:	movw	r6, #32335	; 0x7e4f
    8844:	movt	r6, #28584	; 0x6fa8
    8848:	add	r0, r0, r6
    884c:	add	r6, r2, r0, ror #26
    8850:	mvn	r0, r3
    8854:	add	r3, r9, r3
    8858:	orr	r0, r6, r0
    885c:	eor	r0, r0, r2
    8860:	add	r0, r1, r0
    8864:	movw	r1, #59104	; 0xe6e0
    8868:	movt	r1, #65068	; 0xfe2c
    886c:	add	r0, r0, r1
    8870:	add	r1, r6, r0, ror #22
    8874:	mvn	r0, r2
    8878:	add	r2, r7, r2
    887c:	ldr	r7, [sp, #48]	; 0x30
    8880:	orr	r0, r1, r0
    8884:	eor	r0, r0, r6
    8888:	add	r0, r3, r0
    888c:	movw	r3, #17172	; 0x4314
    8890:	add	r7, r7, r6
    8894:	movt	r3, #41729	; 0xa301
    8898:	add	r0, r0, r3
    889c:	add	r3, r1, r0, ror #17
    88a0:	mvn	r0, r6
    88a4:	ldr	r6, [sp, #16]
    88a8:	orr	r0, r3, r0
    88ac:	eor	r0, r0, r1
    88b0:	add	r0, r2, r0
    88b4:	movw	r2, #4513	; 0x11a1
    88b8:	movt	r2, #19976	; 0x4e08
    88bc:	add	r0, r0, r2
    88c0:	mvn	r2, r1
    88c4:	add	r1, r5, r1
    88c8:	add	r0, r3, r0, ror #11
    88cc:	orr	r2, r0, r2
    88d0:	eor	r2, r2, r3
    88d4:	add	r2, r7, r2
    88d8:	movw	r7, #32386	; 0x7e82
    88dc:	movt	r7, #63315	; 0xf753
    88e0:	add	r2, r2, r7
    88e4:	ldr	r7, [sp, #24]
    88e8:	add	r2, r0, r2, ror #26
    88ec:	add	r7, r2, r7
    88f0:	str	r7, [r6]
    88f4:	mvn	r7, r3
    88f8:	add	r3, sl, r3
    88fc:	orr	r7, r2, r7
    8900:	eor	r7, r7, r0
    8904:	add	r1, r1, r7
    8908:	movw	r7, #62005	; 0xf235
    890c:	movt	r7, #48442	; 0xbd3a
    8910:	add	r1, r1, r7
    8914:	ldr	r7, [sp, #28]
    8918:	add	r1, r2, r1, ror #22
    891c:	add	r7, r1, r7
    8920:	str	r7, [r6, #12]
    8924:	mvn	r7, r0
    8928:	orr	r7, r1, r7
    892c:	eor	r7, r7, r2
    8930:	mvn	r2, r2
    8934:	add	r3, r3, r7
    8938:	movw	r7, #53947	; 0xd2bb
    893c:	movt	r7, #10967	; 0x2ad7
    8940:	add	r3, r3, r7
    8944:	ldr	r7, [sp, #32]
    8948:	add	r3, r1, r3, ror #17
    894c:	orr	r2, r3, r2
    8950:	eor	r1, r2, r1
    8954:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8958:	add	r7, r3, r7
    895c:	str	r7, [r6, #8]
    8960:	ldr	r7, [sp, #20]
    8964:	add	r0, r2, r0
    8968:	add	r0, r0, r1
    896c:	movw	r1, #54161	; 0xd391
    8970:	add	r7, r3, r7
    8974:	movt	r1, #60294	; 0xeb86
    8978:	add	r0, r0, r1
    897c:	add	r0, r7, r0, ror #11
    8980:	str	r0, [r6, #4]
    8984:	sub	sp, fp, #28
    8988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    898c:	nop	{0}

00008990 <rb_sha256_crypt_r>:
    8990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8994:	add	fp, sp, #28
    8998:	sub	sp, sp, #4
    899c:	vpush	{d8-d11}
    89a0:	sub	sp, sp, #472	; 0x1d8
    89a4:	mov	r5, r0
    89a8:	ldr	r0, [pc, #3776]	; 9870 <rb_sha256_crypt_r+0xee0>
    89ac:	mov	r7, r2
    89b0:	mov	r2, #3
    89b4:	mov	r4, r3
    89b8:	mov	r6, r1
    89bc:	add	r0, pc, r0
    89c0:	bl	5468 <strncmp@plt>
    89c4:	ldr	r1, [pc, #3752]	; 9874 <rb_sha256_crypt_r+0xee4>
    89c8:	cmp	r0, #0
    89cc:	mov	r2, #7
    89d0:	addeq	r6, r6, #3
    89d4:	mov	r0, r6
    89d8:	add	r1, pc, r1
    89dc:	bl	5468 <strncmp@plt>
    89e0:	movw	r1, #5000	; 0x1388
    89e4:	cmp	r0, #0
    89e8:	str	r4, [fp, #-520]	; 0xfffffdf8
    89ec:	str	r1, [fp, #-500]	; 0xfffffe0c
    89f0:	beq	89fc <rb_sha256_crypt_r+0x6c>
    89f4:	mov	r0, #0
    89f8:	b	8a40 <rb_sha256_crypt_r+0xb0>
    89fc:	add	r0, r6, #7
    8a00:	sub	r1, fp, #312	; 0x138
    8a04:	mov	r2, #10
    8a08:	bl	5090 <strtoul@plt>
    8a0c:	ldr	r1, [fp, #-312]	; 0xfffffec8
    8a10:	ldrb	r2, [r1]
    8a14:	cmp	r2, #36	; 0x24
    8a18:	bne	9128 <rb_sha256_crypt_r+0x798>
    8a1c:	movw	r2, #51711	; 0xc9ff
    8a20:	add	r6, r1, #1
    8a24:	movt	r2, #15258	; 0x3b9a
    8a28:	cmp	r0, r2
    8a2c:	movcc	r2, r0
    8a30:	mov	r0, #1
    8a34:	cmp	r2, #1000	; 0x3e8
    8a38:	movls	r2, #1000	; 0x3e8
    8a3c:	str	r2, [fp, #-500]	; 0xfffffe0c
    8a40:	str	r0, [fp, #-532]	; 0xfffffdec
    8a44:	ldr	r1, [pc, #3628]	; 9878 <rb_sha256_crypt_r+0xee8>
    8a48:	mov	r0, r6
    8a4c:	add	r1, pc, r1
    8a50:	bl	5438 <strcspn@plt>
    8a54:	cmp	r0, #16
    8a58:	movcs	r0, #16
    8a5c:	str	r0, [fp, #-504]	; 0xfffffe08
    8a60:	mov	r0, r5
    8a64:	bl	5078 <strlen@plt>
    8a68:	mov	sl, r0
    8a6c:	tst	r5, #3
    8a70:	beq	8aa4 <rb_sha256_crypt_r+0x114>
    8a74:	add	r0, sl, #11
    8a78:	bic	r0, r0, #7
    8a7c:	sub	r0, sp, r0
    8a80:	add	r4, r0, #4
    8a84:	mov	sp, r0
    8a88:	mov	r0, r4
    8a8c:	mov	r1, r5
    8a90:	mov	r2, sl
    8a94:	bl	509c <memcpy@plt>
    8a98:	mov	r5, r4
    8a9c:	str	r4, [fp, #-524]	; 0xfffffdf4
    8aa0:	b	8aac <rb_sha256_crypt_r+0x11c>
    8aa4:	mov	r0, #0
    8aa8:	str	r0, [fp, #-524]	; 0xfffffdf4
    8aac:	mov	r8, #0
    8ab0:	tst	r6, #3
    8ab4:	str	r7, [fp, #-516]	; 0xfffffdfc
    8ab8:	beq	8af0 <rb_sha256_crypt_r+0x160>
    8abc:	ldr	r7, [fp, #-504]	; 0xfffffe08
    8ac0:	add	r0, r7, #11
    8ac4:	bic	r0, r0, #7
    8ac8:	sub	r0, sp, r0
    8acc:	add	r4, r0, #4
    8ad0:	mov	sp, r0
    8ad4:	mov	r0, r4
    8ad8:	mov	r1, r6
    8adc:	mov	r2, r7
    8ae0:	bl	509c <memcpy@plt>
    8ae4:	mov	r6, r4
    8ae8:	str	r4, [fp, #-528]	; 0xfffffdf0
    8aec:	b	8afc <rb_sha256_crypt_r+0x16c>
    8af0:	ldr	r7, [fp, #-504]	; 0xfffffe08
    8af4:	mov	r0, #0
    8af8:	str	r0, [fp, #-528]	; 0xfffffdf0
    8afc:	add	r0, pc, #908	; 0x38c
    8b00:	sub	r4, fp, #312	; 0x138
    8b04:	mov	r1, #36	; 0x24
    8b08:	vld1.64	{d8-d9}, [r0 :128]
    8b0c:	add	r0, pc, #908	; 0x38c
    8b10:	mov	r2, r4
    8b14:	vld1.64	{d10-d11}, [r0 :128]
    8b18:	add	r0, r4, #16
    8b1c:	str	r0, [fp, #-496]	; 0xfffffe10
    8b20:	vst1.64	{d8-d9}, [r0]
    8b24:	mov	r0, r4
    8b28:	vst1.32	{d10-d11}, [r0], r1
    8b2c:	mov	r1, sl
    8b30:	str	r8, [r0]
    8b34:	mov	r0, r5
    8b38:	str	r8, [fp, #-272]	; 0xfffffef0
    8b3c:	str	r8, [fp, #-280]	; 0xfffffee8
    8b40:	bl	988c <rb_sha256_process_bytes>
    8b44:	mov	r0, r6
    8b48:	mov	r1, r7
    8b4c:	mov	r2, r4
    8b50:	bl	988c <rb_sha256_process_bytes>
    8b54:	sub	r9, fp, #488	; 0x1e8
    8b58:	mov	r1, #36	; 0x24
    8b5c:	mov	r0, r9
    8b60:	mov	r2, r9
    8b64:	vst1.32	{d10-d11}, [r0], r1
    8b68:	mov	r1, sl
    8b6c:	str	r8, [r0]
    8b70:	add	r0, r9, #16
    8b74:	vst1.64	{d8-d9}, [r0]
    8b78:	str	r0, [fp, #-508]	; 0xfffffe04
    8b7c:	mov	r0, r5
    8b80:	str	r8, [fp, #-448]	; 0xfffffe40
    8b84:	str	r8, [fp, #-456]	; 0xfffffe38
    8b88:	bl	988c <rb_sha256_process_bytes>
    8b8c:	mov	r0, r6
    8b90:	mov	r1, r7
    8b94:	mov	r2, r9
    8b98:	bl	988c <rb_sha256_process_bytes>
    8b9c:	mov	r0, r5
    8ba0:	mov	r1, sl
    8ba4:	mov	r2, r9
    8ba8:	bl	988c <rb_sha256_process_bytes>
    8bac:	sub	r1, fp, #100	; 0x64
    8bb0:	mov	r0, r9
    8bb4:	bl	9a60 <rb_sha256_finish_ctx>
    8bb8:	cmp	sl, #33	; 0x21
    8bbc:	mov	r1, sl
    8bc0:	mov	r8, r6
    8bc4:	str	r6, [fp, #-512]	; 0xfffffe00
    8bc8:	bcc	8c08 <rb_sha256_crypt_r+0x278>
    8bcc:	sub	r0, sl, #33	; 0x21
    8bd0:	sub	r4, fp, #100	; 0x64
    8bd4:	sub	r6, fp, #312	; 0x138
    8bd8:	mov	r7, sl
    8bdc:	bic	r8, r0, #31
    8be0:	mov	r0, r4
    8be4:	mov	r1, #32
    8be8:	mov	r2, r6
    8bec:	bl	988c <rb_sha256_process_bytes>
    8bf0:	sub	r7, r7, #32
    8bf4:	cmp	r7, #32
    8bf8:	bhi	8be0 <rb_sha256_crypt_r+0x250>
    8bfc:	sub	r0, sl, r8
    8c00:	ldr	r8, [fp, #-512]	; 0xfffffe00
    8c04:	sub	r1, r0, #32
    8c08:	sub	r0, fp, #100	; 0x64
    8c0c:	sub	r2, fp, #312	; 0x138
    8c10:	bl	988c <rb_sha256_process_bytes>
    8c14:	cmp	sl, #0
    8c18:	beq	8d84 <rb_sha256_crypt_r+0x3f4>
    8c1c:	sub	r6, fp, #312	; 0x138
    8c20:	mov	r4, #0
    8c24:	sub	r8, fp, #100	; 0x64
    8c28:	mov	r7, sl
    8c2c:	tst	r7, #1
    8c30:	mov	r2, r6
    8c34:	moveq	r0, r5
    8c38:	moveq	r1, sl
    8c3c:	movne	r0, r8
    8c40:	movne	r1, #32
    8c44:	bl	988c <rb_sha256_process_bytes>
    8c48:	lsr	r0, r7, #1
    8c4c:	cmp	r4, r7, lsr #1
    8c50:	mov	r7, r0
    8c54:	bne	8c2c <rb_sha256_crypt_r+0x29c>
    8c58:	sub	r0, fp, #312	; 0x138
    8c5c:	sub	r1, fp, #100	; 0x64
    8c60:	bl	9a60 <rb_sha256_finish_ctx>
    8c64:	add	r0, pc, #564	; 0x234
    8c68:	add	r1, pc, #544	; 0x220
    8c6c:	ldr	r7, [fp, #-508]	; 0xfffffe04
    8c70:	ldr	r8, [fp, #-512]	; 0xfffffe00
    8c74:	cmp	sl, #0
    8c78:	vld1.64	{d16-d17}, [r0 :128]
    8c7c:	vld1.64	{d18-d19}, [r1 :128]
    8c80:	mov	r0, #40	; 0x28
    8c84:	mov	r1, r9
    8c88:	vst1.32	{d16-d17}, [r1], r0
    8c8c:	mov	r0, #0
    8c90:	vst1.32	{d18-d19}, [r7]
    8c94:	str	r0, [r1]
    8c98:	str	r0, [fp, #-456]	; 0xfffffe38
    8c9c:	str	r0, [fp, #-452]	; 0xfffffe3c
    8ca0:	beq	8dc4 <rb_sha256_crypt_r+0x434>
    8ca4:	sub	r6, fp, #488	; 0x1e8
    8ca8:	mov	r4, sl
    8cac:	mov	r0, r5
    8cb0:	mov	r1, sl
    8cb4:	mov	r2, r6
    8cb8:	bl	988c <rb_sha256_process_bytes>
    8cbc:	subs	r4, r4, #1
    8cc0:	bne	8cac <rb_sha256_crypt_r+0x31c>
    8cc4:	sub	r6, fp, #136	; 0x88
    8cc8:	sub	r0, fp, #488	; 0x1e8
    8ccc:	mov	r1, r6
    8cd0:	bl	9a60 <rb_sha256_finish_ctx>
    8cd4:	add	r0, sl, #7
    8cd8:	bic	r0, r0, #7
    8cdc:	sub	r3, sp, r0
    8ce0:	mov	sp, r3
    8ce4:	ldr	r5, [fp, #-504]	; 0xfffffe08
    8ce8:	cmp	sl, #32
    8cec:	str	r3, [fp, #-492]	; 0xfffffe14
    8cf0:	bcc	8df0 <rb_sha256_crypt_r+0x460>
    8cf4:	sub	r2, sl, #32
    8cf8:	mov	r1, sl
    8cfc:	mov	r0, r3
    8d00:	tst	r2, #32
    8d04:	bne	8d2c <rb_sha256_crypt_r+0x39c>
    8d08:	mov	r0, r6
    8d0c:	mov	r1, #32
    8d10:	vld1.64	{d16-d17}, [r0]!
    8d14:	vld1.64	{d18-d19}, [r0]
    8d18:	add	r0, r3, #16
    8d1c:	vst1.64	{d18-d19}, [r0]
    8d20:	mov	r0, r3
    8d24:	vst1.64	{d16-d17}, [r0], r1
    8d28:	mov	r1, r2
    8d2c:	cmp	r2, #32
    8d30:	bcc	8d7c <rb_sha256_crypt_r+0x3ec>
    8d34:	mov	r2, #48	; 0x30
    8d38:	mov	r3, r6
    8d3c:	add	r7, r0, #16
    8d40:	sub	r1, r1, #64	; 0x40
    8d44:	vld1.8	{d16-d17}, [r3]!
    8d48:	cmp	r1, #31
    8d4c:	vld1.64	{d18-d19}, [r3]
    8d50:	vst1.8	{d18-d19}, [r7]
    8d54:	mov	r7, r0
    8d58:	vld1.64	{d18-d19}, [r3]
    8d5c:	add	r3, r0, #32
    8d60:	add	r0, r0, #64	; 0x40
    8d64:	vst1.8	{d16-d17}, [r7], r2
    8d68:	vld1.64	{d16-d17}, [r6]
    8d6c:	vst1.8	{d18-d19}, [r7]
    8d70:	vst1.8	{d16-d17}, [r3]
    8d74:	bhi	8d38 <rb_sha256_crypt_r+0x3a8>
    8d78:	ldr	r7, [fp, #-508]	; 0xfffffe04
    8d7c:	and	r2, sl, #31
    8d80:	b	8df8 <rb_sha256_crypt_r+0x468>
    8d84:	sub	r0, fp, #312	; 0x138
    8d88:	sub	r1, fp, #100	; 0x64
    8d8c:	bl	9a60 <rb_sha256_finish_ctx>
    8d90:	add	r0, pc, #264	; 0x108
    8d94:	add	r1, pc, #244	; 0xf4
    8d98:	ldr	r7, [fp, #-508]	; 0xfffffe04
    8d9c:	vld1.64	{d16-d17}, [r0 :128]
    8da0:	vld1.64	{d18-d19}, [r1 :128]
    8da4:	mov	r0, #40	; 0x28
    8da8:	mov	r1, r9
    8dac:	vst1.32	{d16-d17}, [r1], r0
    8db0:	mov	r0, #0
    8db4:	vst1.32	{d18-d19}, [r7]
    8db8:	str	r0, [r1]
    8dbc:	str	r0, [fp, #-456]	; 0xfffffe38
    8dc0:	str	r0, [fp, #-452]	; 0xfffffe3c
    8dc4:	sub	r0, fp, #488	; 0x1e8
    8dc8:	sub	r1, fp, #136	; 0x88
    8dcc:	bl	9a60 <rb_sha256_finish_ctx>
    8dd0:	add	r0, sl, #7
    8dd4:	bic	r0, r0, #7
    8dd8:	sub	r0, sp, r0
    8ddc:	mov	sp, r0
    8de0:	ldr	r5, [fp, #-504]	; 0xfffffe08
    8de4:	mov	r2, #0
    8de8:	str	r0, [fp, #-492]	; 0xfffffe14
    8dec:	b	8df8 <rb_sha256_crypt_r+0x468>
    8df0:	mov	r0, r3
    8df4:	mov	r2, sl
    8df8:	sub	r1, fp, #136	; 0x88
    8dfc:	sub	r6, fp, #312	; 0x138
    8e00:	bl	509c <memcpy@plt>
    8e04:	add	r0, pc, #148	; 0x94
    8e08:	add	r1, pc, #128	; 0x80
    8e0c:	mov	r4, #0
    8e10:	vld1.64	{d16-d17}, [r0 :128]
    8e14:	vld1.64	{d18-d19}, [r1 :128]
    8e18:	mov	r0, #40	; 0x28
    8e1c:	mov	r1, r9
    8e20:	vst1.32	{d16-d17}, [r1], r0
    8e24:	vst1.32	{d18-d19}, [r7]
    8e28:	str	r4, [r1]
    8e2c:	str	r4, [fp, #-456]	; 0xfffffe38
    8e30:	str	r4, [fp, #-452]	; 0xfffffe3c
    8e34:	mov	r0, r8
    8e38:	mov	r1, r5
    8e3c:	mov	r2, r9
    8e40:	bl	988c <rb_sha256_process_bytes>
    8e44:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    8e48:	add	r4, r4, #1
    8e4c:	add	r0, r0, #16
    8e50:	cmp	r4, r0
    8e54:	bcc	8e34 <rb_sha256_crypt_r+0x4a4>
    8e58:	sub	r4, fp, #136	; 0x88
    8e5c:	sub	r0, fp, #488	; 0x1e8
    8e60:	mov	r1, r4
    8e64:	bl	9a60 <rb_sha256_finish_ctx>
    8e68:	add	r0, r5, #7
    8e6c:	bic	r0, r0, #7
    8e70:	sub	r0, sp, r0
    8e74:	mov	sp, r0
    8e78:	mov	r1, r4
    8e7c:	mov	r2, r5
    8e80:	str	r0, [fp, #-508]	; 0xfffffe04
    8e84:	bl	509c <memcpy@plt>
    8e88:	mov	r7, #0
    8e8c:	b	8ee0 <rb_sha256_crypt_r+0x550>
    8e90:	.word	0x510e527f
    8e94:	.word	0x9b05688c
    8e98:	.word	0x1f83d9ab
    8e9c:	.word	0x5be0cd19
    8ea0:	.word	0x6a09e667
    8ea4:	.word	0xbb67ae85
    8ea8:	.word	0x3c6ef372
    8eac:	.word	0xa54ff53a
    8eb0:	ldr	r0, [fp, #-492]	; 0xfffffe14
    8eb4:	mov	r1, sl
    8eb8:	mov	r2, r6
    8ebc:	bl	988c <rb_sha256_process_bytes>
    8ec0:	sub	r4, fp, #100	; 0x64
    8ec4:	mov	r0, r6
    8ec8:	mov	r1, r4
    8ecc:	bl	9a60 <rb_sha256_finish_ctx>
    8ed0:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    8ed4:	add	r7, r7, #1
    8ed8:	cmp	r0, r7
    8edc:	beq	8fc8 <rb_sha256_crypt_r+0x638>
    8ee0:	sub	r0, pc, #72	; 0x48
    8ee4:	mov	r1, #40	; 0x28
    8ee8:	mov	r5, sl
    8eec:	ands	r4, r7, #1
    8ef0:	vld1.64	{d16-d17}, [r0 :128]
    8ef4:	sub	r0, pc, #108	; 0x6c
    8ef8:	vld1.64	{d18-d19}, [r0 :128]
    8efc:	mov	r0, r6
    8f00:	vst1.32	{d16-d17}, [r0], r1
    8f04:	ldr	r1, [fp, #-496]	; 0xfffffe10
    8f08:	vst1.32	{d18-d19}, [r1]
    8f0c:	mov	r1, #0
    8f10:	str	r1, [r0]
    8f14:	movw	r0, #18725	; 0x4925
    8f18:	str	r1, [fp, #-280]	; 0xfffffee8
    8f1c:	str	r1, [fp, #-276]	; 0xfffffeec
    8f20:	movt	r0, #9362	; 0x2492
    8f24:	umull	r0, r1, r7, r0
    8f28:	sub	r0, r7, r1
    8f2c:	add	r9, r1, r0, lsr #1
    8f30:	lsr	r0, r9, #2
    8f34:	lsl	r8, r0, #3
    8f38:	movw	r0, #43691	; 0xaaab
    8f3c:	movt	r0, #43690	; 0xaaaa
    8f40:	umull	r0, r1, r7, r0
    8f44:	lsr	r0, r1, #1
    8f48:	add	sl, r0, r0, lsl #1
    8f4c:	beq	8f5c <rb_sha256_crypt_r+0x5cc>
    8f50:	ldr	r0, [fp, #-492]	; 0xfffffe14
    8f54:	mov	r1, r5
    8f58:	b	8f64 <rb_sha256_crypt_r+0x5d4>
    8f5c:	sub	r0, fp, #100	; 0x64
    8f60:	mov	r1, #32
    8f64:	mov	r2, r6
    8f68:	bl	988c <rb_sha256_process_bytes>
    8f6c:	sub	r6, r8, r9, lsr #2
    8f70:	cmp	sl, r7
    8f74:	beq	8f88 <rb_sha256_crypt_r+0x5f8>
    8f78:	ldr	r0, [fp, #-508]	; 0xfffffe04
    8f7c:	ldr	r1, [fp, #-504]	; 0xfffffe08
    8f80:	sub	r2, fp, #312	; 0x138
    8f84:	bl	988c <rb_sha256_process_bytes>
    8f88:	cmp	r6, r7
    8f8c:	mov	sl, r5
    8f90:	sub	r6, fp, #312	; 0x138
    8f94:	beq	8fa8 <rb_sha256_crypt_r+0x618>
    8f98:	ldr	r0, [fp, #-492]	; 0xfffffe14
    8f9c:	mov	r1, sl
    8fa0:	mov	r2, r6
    8fa4:	bl	988c <rb_sha256_process_bytes>
    8fa8:	cmp	r4, #0
    8fac:	beq	8eb0 <rb_sha256_crypt_r+0x520>
    8fb0:	sub	r4, fp, #100	; 0x64
    8fb4:	mov	r1, #32
    8fb8:	mov	r2, r6
    8fbc:	mov	r0, r4
    8fc0:	bl	988c <rb_sha256_process_bytes>
    8fc4:	b	8ec4 <rb_sha256_crypt_r+0x534>
    8fc8:	ldr	r4, [fp, #-520]	; 0xfffffdf8
    8fcc:	ldr	r8, [fp, #-516]	; 0xfffffdfc
    8fd0:	mov	r1, #0
    8fd4:	bic	r5, r4, r4, asr #31
    8fd8:	mov	r0, r8
    8fdc:	mov	r2, r5
    8fe0:	bl	4ed4 <memset@plt>
    8fe4:	ldr	r1, [pc, #2192]	; 987c <rb_sha256_crypt_r+0xeec>
    8fe8:	mov	r0, r8
    8fec:	mov	r2, r5
    8ff0:	add	r1, pc, r1
    8ff4:	bl	4e2c <strncpy@plt>
    8ff8:	bl	5078 <strlen@plt>
    8ffc:	adds	r6, r8, r0
    9000:	ldr	r0, [fp, #-532]	; 0xfffffdec
    9004:	sub	r7, r4, #3
    9008:	addeq	r6, r8, r5
    900c:	cmp	r0, #0
    9010:	beq	9048 <rb_sha256_crypt_r+0x6b8>
    9014:	sub	sp, sp, #8
    9018:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    901c:	bic	r1, r7, r7, asr #31
    9020:	str	r0, [sp]
    9024:	mov	r0, r6
    9028:	ldr	r2, [pc, #2128]	; 9880 <rb_sha256_crypt_r+0xef0>
    902c:	ldr	r3, [pc, #2128]	; 9884 <rb_sha256_crypt_r+0xef4>
    9030:	add	r2, pc, r2
    9034:	add	r3, pc, r3
    9038:	bl	5408 <snprintf@plt>
    903c:	add	sp, sp, #8
    9040:	sub	r7, r7, r0
    9044:	add	r6, r6, r0
    9048:	ldr	r4, [fp, #-504]	; 0xfffffe08
    904c:	mov	r0, r6
    9050:	mov	r1, #0
    9054:	mov	r9, #0
    9058:	mov	r2, r4
    905c:	bl	4ed4 <memset@plt>
    9060:	bic	r5, r7, r7, asr #31
    9064:	ldr	r1, [fp, #-512]	; 0xfffffe00
    9068:	mov	r0, r6
    906c:	cmp	r5, r4
    9070:	movcs	r5, r4
    9074:	mov	r2, r5
    9078:	bl	4e2c <strncpy@plt>
    907c:	mov	r0, r8
    9080:	sub	r5, r7, r5
    9084:	bl	5078 <strlen@plt>
    9088:	adds	r2, r8, r0
    908c:	moveq	r2, r4
    9090:	cmp	r5, #1
    9094:	blt	974c <rb_sha256_crypt_r+0xdbc>
    9098:	mov	r0, #36	; 0x24
    909c:	strb	r0, [r2]
    90a0:	beq	974c <rb_sha256_crypt_r+0xdbc>
    90a4:	ldrb	r6, [fp, #-80]	; 0xffffffb0
    90a8:	ldrb	r3, [fp, #-100]	; 0xffffff9c
    90ac:	ldrb	r7, [fp, #-90]	; 0xffffffa6
    90b0:	ldr	r0, [pc, #2000]	; 9888 <rb_sha256_crypt_r+0xef8>
    90b4:	and	r1, r6, #63	; 0x3f
    90b8:	add	r0, pc, r0
    90bc:	ldrb	r1, [r0, r1]
    90c0:	strb	r1, [r2, #1]
    90c4:	sub	r1, r5, #2
    90c8:	cmp	r1, #0
    90cc:	ble	913c <rb_sha256_crypt_r+0x7ac>
    90d0:	orr	r1, r6, r7, lsl #8
    90d4:	ubfx	r1, r1, #6, #6
    90d8:	ldrb	r1, [r0, r1]
    90dc:	strb	r1, [r2, #2]
    90e0:	sub	r1, r5, #3
    90e4:	cmp	r1, #1
    90e8:	blt	914c <rb_sha256_crypt_r+0x7bc>
    90ec:	lsl	r1, r7, #8
    90f0:	orr	r1, r1, r3, lsl #16
    90f4:	ubfx	r1, r1, #12, #6
    90f8:	ldrb	r1, [r0, r1]
    90fc:	strb	r1, [r2, #3]
    9100:	sub	r1, r5, #4
    9104:	cmp	r1, #1
    9108:	blt	915c <rb_sha256_crypt_r+0x7cc>
    910c:	ldrb	r1, [r0, r3, lsr #2]
    9110:	add	r7, r2, #5
    9114:	strb	r1, [r2, #4]
    9118:	sub	r1, r5, #5
    911c:	cmp	r1, #1
    9120:	bge	9168 <rb_sha256_crypt_r+0x7d8>
    9124:	b	974c <rb_sha256_crypt_r+0xdbc>
    9128:	mov	r0, #0
    912c:	str	r0, [fp, #-532]	; 0xfffffdec
    9130:	movw	r0, #5000	; 0x1388
    9134:	str	r0, [fp, #-500]	; 0xfffffe0c
    9138:	b	8a44 <rb_sha256_crypt_r+0xb4>
    913c:	add	r7, r2, #2
    9140:	cmp	r1, #1
    9144:	bge	9168 <rb_sha256_crypt_r+0x7d8>
    9148:	b	974c <rb_sha256_crypt_r+0xdbc>
    914c:	add	r7, r2, #3
    9150:	cmp	r1, #1
    9154:	bge	9168 <rb_sha256_crypt_r+0x7d8>
    9158:	b	974c <rb_sha256_crypt_r+0xdbc>
    915c:	add	r7, r2, #4
    9160:	cmp	r1, #1
    9164:	blt	974c <rb_sha256_crypt_r+0xdbc>
    9168:	ldrb	r4, [fp, #-89]	; 0xffffffa7
    916c:	ldrb	r5, [fp, #-99]	; 0xffffff9d
    9170:	ldrb	r6, [fp, #-79]	; 0xffffffb1
    9174:	mov	r3, r7
    9178:	and	r2, r4, #63	; 0x3f
    917c:	ldrb	r2, [r0, r2]
    9180:	strb	r2, [r3], #1
    9184:	sub	r2, r1, #1
    9188:	cmp	r2, #0
    918c:	ble	91dc <rb_sha256_crypt_r+0x84c>
    9190:	orr	r2, r4, r5, lsl #8
    9194:	ubfx	r2, r2, #6, #6
    9198:	ldrb	r2, [r0, r2]
    919c:	strb	r2, [r7, #1]
    91a0:	sub	r2, r1, #2
    91a4:	cmp	r2, #1
    91a8:	blt	92e0 <rb_sha256_crypt_r+0x950>
    91ac:	lsl	r2, r5, #8
    91b0:	orr	r2, r2, r6, lsl #16
    91b4:	ubfx	r2, r2, #12, #6
    91b8:	ldrb	r2, [r0, r2]
    91bc:	strb	r2, [r7, #2]
    91c0:	sub	r2, r1, #3
    91c4:	cmp	r2, #1
    91c8:	blt	92f0 <rb_sha256_crypt_r+0x960>
    91cc:	ldrb	r2, [r0, r6, lsr #2]
    91d0:	add	r3, r7, #4
    91d4:	strb	r2, [r7, #3]
    91d8:	sub	r2, r1, #4
    91dc:	cmp	r2, #1
    91e0:	blt	974c <rb_sha256_crypt_r+0xdbc>
    91e4:	ldrb	r4, [fp, #-98]	; 0xffffff9e
    91e8:	ldrb	r6, [fp, #-88]	; 0xffffffa8
    91ec:	ldrb	r5, [fp, #-78]	; 0xffffffb2
    91f0:	mov	r7, r3
    91f4:	and	r1, r4, #63	; 0x3f
    91f8:	ldrb	r1, [r0, r1]
    91fc:	strb	r1, [r7], #1
    9200:	sub	r1, r2, #1
    9204:	cmp	r1, #0
    9208:	ble	9258 <rb_sha256_crypt_r+0x8c8>
    920c:	orr	r1, r4, r5, lsl #8
    9210:	ubfx	r1, r1, #6, #6
    9214:	ldrb	r1, [r0, r1]
    9218:	strb	r1, [r3, #1]
    921c:	sub	r1, r2, #2
    9220:	cmp	r1, #1
    9224:	blt	9300 <rb_sha256_crypt_r+0x970>
    9228:	lsl	r1, r5, #8
    922c:	orr	r1, r1, r6, lsl #16
    9230:	ubfx	r1, r1, #12, #6
    9234:	ldrb	r1, [r0, r1]
    9238:	strb	r1, [r3, #2]
    923c:	sub	r1, r2, #3
    9240:	cmp	r1, #1
    9244:	blt	9310 <rb_sha256_crypt_r+0x980>
    9248:	ldrb	r1, [r0, r6, lsr #2]
    924c:	add	r7, r3, #4
    9250:	strb	r1, [r3, #3]
    9254:	sub	r1, r2, #4
    9258:	cmp	r1, #1
    925c:	blt	974c <rb_sha256_crypt_r+0xdbc>
    9260:	ldrb	r4, [fp, #-77]	; 0xffffffb3
    9264:	ldrb	r6, [fp, #-97]	; 0xffffff9f
    9268:	ldrb	r5, [fp, #-87]	; 0xffffffa9
    926c:	mov	r3, r7
    9270:	and	r2, r4, #63	; 0x3f
    9274:	ldrb	r2, [r0, r2]
    9278:	strb	r2, [r3], #1
    927c:	sub	r2, r1, #1
    9280:	cmp	r2, #0
    9284:	ble	9334 <rb_sha256_crypt_r+0x9a4>
    9288:	orr	r2, r4, r5, lsl #8
    928c:	ubfx	r2, r2, #6, #6
    9290:	ldrb	r2, [r0, r2]
    9294:	strb	r2, [r7, #1]
    9298:	sub	r2, r1, #2
    929c:	cmp	r2, #1
    92a0:	blt	9320 <rb_sha256_crypt_r+0x990>
    92a4:	lsl	r2, r5, #8
    92a8:	orr	r2, r2, r6, lsl #16
    92ac:	ubfx	r2, r2, #12, #6
    92b0:	ldrb	r2, [r0, r2]
    92b4:	strb	r2, [r7, #2]
    92b8:	sub	r2, r1, #3
    92bc:	cmp	r2, #1
    92c0:	blt	9330 <rb_sha256_crypt_r+0x9a0>
    92c4:	ldrb	r2, [r0, r6, lsr #2]
    92c8:	add	r3, r7, #4
    92cc:	strb	r2, [r7, #3]
    92d0:	sub	r2, r1, #4
    92d4:	cmp	r2, #1
    92d8:	bge	933c <rb_sha256_crypt_r+0x9ac>
    92dc:	b	974c <rb_sha256_crypt_r+0xdbc>
    92e0:	add	r3, r7, #2
    92e4:	cmp	r2, #1
    92e8:	bge	91e4 <rb_sha256_crypt_r+0x854>
    92ec:	b	974c <rb_sha256_crypt_r+0xdbc>
    92f0:	add	r3, r7, #3
    92f4:	cmp	r2, #1
    92f8:	bge	91e4 <rb_sha256_crypt_r+0x854>
    92fc:	b	974c <rb_sha256_crypt_r+0xdbc>
    9300:	add	r7, r3, #2
    9304:	cmp	r1, #1
    9308:	bge	9260 <rb_sha256_crypt_r+0x8d0>
    930c:	b	974c <rb_sha256_crypt_r+0xdbc>
    9310:	add	r7, r3, #3
    9314:	cmp	r1, #1
    9318:	bge	9260 <rb_sha256_crypt_r+0x8d0>
    931c:	b	974c <rb_sha256_crypt_r+0xdbc>
    9320:	add	r3, r7, #2
    9324:	cmp	r2, #1
    9328:	bge	933c <rb_sha256_crypt_r+0x9ac>
    932c:	b	974c <rb_sha256_crypt_r+0xdbc>
    9330:	add	r3, r7, #3
    9334:	cmp	r2, #1
    9338:	blt	974c <rb_sha256_crypt_r+0xdbc>
    933c:	ldrb	r4, [fp, #-86]	; 0xffffffaa
    9340:	ldrb	r5, [fp, #-96]	; 0xffffffa0
    9344:	ldrb	r6, [fp, #-76]	; 0xffffffb4
    9348:	mov	r7, r3
    934c:	and	r1, r4, #63	; 0x3f
    9350:	ldrb	r1, [r0, r1]
    9354:	strb	r1, [r7], #1
    9358:	sub	r1, r2, #1
    935c:	cmp	r1, #0
    9360:	ble	93d0 <rb_sha256_crypt_r+0xa40>
    9364:	orr	r1, r4, r5, lsl #8
    9368:	ubfx	r1, r1, #6, #6
    936c:	ldrb	r1, [r0, r1]
    9370:	strb	r1, [r3, #1]
    9374:	sub	r1, r2, #2
    9378:	cmp	r1, #1
    937c:	blt	93bc <rb_sha256_crypt_r+0xa2c>
    9380:	lsl	r1, r5, #8
    9384:	orr	r1, r1, r6, lsl #16
    9388:	ubfx	r1, r1, #12, #6
    938c:	ldrb	r1, [r0, r1]
    9390:	strb	r1, [r3, #2]
    9394:	sub	r1, r2, #3
    9398:	cmp	r1, #1
    939c:	blt	93cc <rb_sha256_crypt_r+0xa3c>
    93a0:	ldrb	r1, [r0, r6, lsr #2]
    93a4:	add	r7, r3, #4
    93a8:	strb	r1, [r3, #3]
    93ac:	sub	r1, r2, #4
    93b0:	cmp	r1, #1
    93b4:	bge	93d8 <rb_sha256_crypt_r+0xa48>
    93b8:	b	974c <rb_sha256_crypt_r+0xdbc>
    93bc:	add	r7, r3, #2
    93c0:	cmp	r1, #1
    93c4:	bge	93d8 <rb_sha256_crypt_r+0xa48>
    93c8:	b	974c <rb_sha256_crypt_r+0xdbc>
    93cc:	add	r7, r3, #3
    93d0:	cmp	r1, #1
    93d4:	blt	974c <rb_sha256_crypt_r+0xdbc>
    93d8:	ldrb	r4, [fp, #-95]	; 0xffffffa1
    93dc:	ldrb	r6, [fp, #-85]	; 0xffffffab
    93e0:	ldrb	r5, [fp, #-75]	; 0xffffffb5
    93e4:	mov	r3, r7
    93e8:	and	r2, r4, #63	; 0x3f
    93ec:	ldrb	r2, [r0, r2]
    93f0:	strb	r2, [r3], #1
    93f4:	sub	r2, r1, #1
    93f8:	cmp	r2, #0
    93fc:	ble	946c <rb_sha256_crypt_r+0xadc>
    9400:	orr	r2, r4, r5, lsl #8
    9404:	ubfx	r2, r2, #6, #6
    9408:	ldrb	r2, [r0, r2]
    940c:	strb	r2, [r7, #1]
    9410:	sub	r2, r1, #2
    9414:	cmp	r2, #1
    9418:	blt	9458 <rb_sha256_crypt_r+0xac8>
    941c:	lsl	r2, r5, #8
    9420:	orr	r2, r2, r6, lsl #16
    9424:	ubfx	r2, r2, #12, #6
    9428:	ldrb	r2, [r0, r2]
    942c:	strb	r2, [r7, #2]
    9430:	sub	r2, r1, #3
    9434:	cmp	r2, #1
    9438:	blt	9468 <rb_sha256_crypt_r+0xad8>
    943c:	ldrb	r2, [r0, r6, lsr #2]
    9440:	add	r3, r7, #4
    9444:	strb	r2, [r7, #3]
    9448:	sub	r2, r1, #4
    944c:	cmp	r2, #1
    9450:	bge	9474 <rb_sha256_crypt_r+0xae4>
    9454:	b	974c <rb_sha256_crypt_r+0xdbc>
    9458:	add	r3, r7, #2
    945c:	cmp	r2, #1
    9460:	bge	9474 <rb_sha256_crypt_r+0xae4>
    9464:	b	974c <rb_sha256_crypt_r+0xdbc>
    9468:	add	r3, r7, #3
    946c:	cmp	r2, #1
    9470:	blt	974c <rb_sha256_crypt_r+0xdbc>
    9474:	ldrb	r4, [fp, #-74]	; 0xffffffb6
    9478:	ldrb	r6, [fp, #-94]	; 0xffffffa2
    947c:	ldrb	r5, [fp, #-84]	; 0xffffffac
    9480:	mov	r7, r3
    9484:	and	r1, r4, #63	; 0x3f
    9488:	ldrb	r1, [r0, r1]
    948c:	strb	r1, [r7], #1
    9490:	sub	r1, r2, #1
    9494:	cmp	r1, #0
    9498:	ble	9508 <rb_sha256_crypt_r+0xb78>
    949c:	orr	r1, r4, r5, lsl #8
    94a0:	ubfx	r1, r1, #6, #6
    94a4:	ldrb	r1, [r0, r1]
    94a8:	strb	r1, [r3, #1]
    94ac:	sub	r1, r2, #2
    94b0:	cmp	r1, #1
    94b4:	blt	94f4 <rb_sha256_crypt_r+0xb64>
    94b8:	lsl	r1, r5, #8
    94bc:	orr	r1, r1, r6, lsl #16
    94c0:	ubfx	r1, r1, #12, #6
    94c4:	ldrb	r1, [r0, r1]
    94c8:	strb	r1, [r3, #2]
    94cc:	sub	r1, r2, #3
    94d0:	cmp	r1, #1
    94d4:	blt	9504 <rb_sha256_crypt_r+0xb74>
    94d8:	ldrb	r1, [r0, r6, lsr #2]
    94dc:	add	r7, r3, #4
    94e0:	strb	r1, [r3, #3]
    94e4:	sub	r1, r2, #4
    94e8:	cmp	r1, #1
    94ec:	bge	9510 <rb_sha256_crypt_r+0xb80>
    94f0:	b	974c <rb_sha256_crypt_r+0xdbc>
    94f4:	add	r7, r3, #2
    94f8:	cmp	r1, #1
    94fc:	bge	9510 <rb_sha256_crypt_r+0xb80>
    9500:	b	974c <rb_sha256_crypt_r+0xdbc>
    9504:	add	r7, r3, #3
    9508:	cmp	r1, #1
    950c:	blt	974c <rb_sha256_crypt_r+0xdbc>
    9510:	ldrb	r4, [fp, #-83]	; 0xffffffad
    9514:	ldrb	r5, [fp, #-93]	; 0xffffffa3
    9518:	ldrb	r6, [fp, #-73]	; 0xffffffb7
    951c:	mov	r3, r7
    9520:	and	r2, r4, #63	; 0x3f
    9524:	ldrb	r2, [r0, r2]
    9528:	strb	r2, [r3], #1
    952c:	sub	r2, r1, #1
    9530:	cmp	r2, #0
    9534:	ble	95a4 <rb_sha256_crypt_r+0xc14>
    9538:	orr	r2, r4, r5, lsl #8
    953c:	ubfx	r2, r2, #6, #6
    9540:	ldrb	r2, [r0, r2]
    9544:	strb	r2, [r7, #1]
    9548:	sub	r2, r1, #2
    954c:	cmp	r2, #1
    9550:	blt	9590 <rb_sha256_crypt_r+0xc00>
    9554:	lsl	r2, r5, #8
    9558:	orr	r2, r2, r6, lsl #16
    955c:	ubfx	r2, r2, #12, #6
    9560:	ldrb	r2, [r0, r2]
    9564:	strb	r2, [r7, #2]
    9568:	sub	r2, r1, #3
    956c:	cmp	r2, #1
    9570:	blt	95a0 <rb_sha256_crypt_r+0xc10>
    9574:	ldrb	r2, [r0, r6, lsr #2]
    9578:	add	r3, r7, #4
    957c:	strb	r2, [r7, #3]
    9580:	sub	r2, r1, #4
    9584:	cmp	r2, #1
    9588:	bge	95ac <rb_sha256_crypt_r+0xc1c>
    958c:	b	974c <rb_sha256_crypt_r+0xdbc>
    9590:	add	r3, r7, #2
    9594:	cmp	r2, #1
    9598:	bge	95ac <rb_sha256_crypt_r+0xc1c>
    959c:	b	974c <rb_sha256_crypt_r+0xdbc>
    95a0:	add	r3, r7, #3
    95a4:	cmp	r2, #1
    95a8:	blt	974c <rb_sha256_crypt_r+0xdbc>
    95ac:	ldrb	r4, [fp, #-92]	; 0xffffffa4
    95b0:	ldrb	r6, [fp, #-82]	; 0xffffffae
    95b4:	ldrb	r5, [fp, #-72]	; 0xffffffb8
    95b8:	mov	r7, r3
    95bc:	and	r1, r4, #63	; 0x3f
    95c0:	ldrb	r1, [r0, r1]
    95c4:	strb	r1, [r7], #1
    95c8:	sub	r1, r2, #1
    95cc:	cmp	r1, #0
    95d0:	ble	9640 <rb_sha256_crypt_r+0xcb0>
    95d4:	orr	r1, r4, r5, lsl #8
    95d8:	ubfx	r1, r1, #6, #6
    95dc:	ldrb	r1, [r0, r1]
    95e0:	strb	r1, [r3, #1]
    95e4:	sub	r1, r2, #2
    95e8:	cmp	r1, #1
    95ec:	blt	962c <rb_sha256_crypt_r+0xc9c>
    95f0:	lsl	r1, r5, #8
    95f4:	orr	r1, r1, r6, lsl #16
    95f8:	ubfx	r1, r1, #12, #6
    95fc:	ldrb	r1, [r0, r1]
    9600:	strb	r1, [r3, #2]
    9604:	sub	r1, r2, #3
    9608:	cmp	r1, #1
    960c:	blt	963c <rb_sha256_crypt_r+0xcac>
    9610:	ldrb	r1, [r0, r6, lsr #2]
    9614:	add	r7, r3, #4
    9618:	strb	r1, [r3, #3]
    961c:	sub	r1, r2, #4
    9620:	cmp	r1, #1
    9624:	bge	9648 <rb_sha256_crypt_r+0xcb8>
    9628:	b	974c <rb_sha256_crypt_r+0xdbc>
    962c:	add	r7, r3, #2
    9630:	cmp	r1, #1
    9634:	bge	9648 <rb_sha256_crypt_r+0xcb8>
    9638:	b	974c <rb_sha256_crypt_r+0xdbc>
    963c:	add	r7, r3, #3
    9640:	cmp	r1, #1
    9644:	blt	974c <rb_sha256_crypt_r+0xdbc>
    9648:	ldrb	r4, [fp, #-71]	; 0xffffffb9
    964c:	ldrb	r6, [fp, #-91]	; 0xffffffa5
    9650:	ldrb	r5, [fp, #-81]	; 0xffffffaf
    9654:	mov	r3, r7
    9658:	and	r2, r4, #63	; 0x3f
    965c:	ldrb	r2, [r0, r2]
    9660:	strb	r2, [r3], #1
    9664:	sub	r2, r1, #1
    9668:	cmp	r2, #0
    966c:	ble	96dc <rb_sha256_crypt_r+0xd4c>
    9670:	orr	r2, r4, r5, lsl #8
    9674:	ubfx	r2, r2, #6, #6
    9678:	ldrb	r2, [r0, r2]
    967c:	strb	r2, [r7, #1]
    9680:	sub	r2, r1, #2
    9684:	cmp	r2, #1
    9688:	blt	96c8 <rb_sha256_crypt_r+0xd38>
    968c:	lsl	r2, r5, #8
    9690:	orr	r2, r2, r6, lsl #16
    9694:	ubfx	r2, r2, #12, #6
    9698:	ldrb	r2, [r0, r2]
    969c:	strb	r2, [r7, #2]
    96a0:	sub	r2, r1, #3
    96a4:	cmp	r2, #1
    96a8:	blt	96d8 <rb_sha256_crypt_r+0xd48>
    96ac:	ldrb	r2, [r0, r6, lsr #2]
    96b0:	add	r3, r7, #4
    96b4:	strb	r2, [r7, #3]
    96b8:	sub	r2, r1, #4
    96bc:	cmp	r2, #1
    96c0:	bge	96e4 <rb_sha256_crypt_r+0xd54>
    96c4:	b	974c <rb_sha256_crypt_r+0xdbc>
    96c8:	add	r3, r7, #2
    96cc:	cmp	r2, #1
    96d0:	bge	96e4 <rb_sha256_crypt_r+0xd54>
    96d4:	b	974c <rb_sha256_crypt_r+0xdbc>
    96d8:	add	r3, r7, #3
    96dc:	cmp	r2, #1
    96e0:	blt	974c <rb_sha256_crypt_r+0xdbc>
    96e4:	ldrb	r5, [fp, #-70]	; 0xffffffba
    96e8:	ldrb	r6, [fp, #-69]	; 0xffffffbb
    96ec:	mov	r7, r3
    96f0:	and	r1, r5, #63	; 0x3f
    96f4:	ldrb	r1, [r0, r1]
    96f8:	strb	r1, [r7], #1
    96fc:	sub	r1, r2, #1
    9700:	cmp	r1, #0
    9704:	ble	9730 <rb_sha256_crypt_r+0xda0>
    9708:	orr	r7, r5, r6, lsl #8
    970c:	sub	r2, r2, #2
    9710:	cmp	r2, #1
    9714:	ubfx	r7, r7, #6, #6
    9718:	ldrb	r7, [r0, r7]
    971c:	strb	r7, [r3, #1]
    9720:	blt	9740 <rb_sha256_crypt_r+0xdb0>
    9724:	ldrb	r0, [r0, r6, lsr #4]
    9728:	add	r7, r3, #3
    972c:	strb	r0, [r3, #2]
    9730:	mov	r1, r2
    9734:	cmp	r1, #1
    9738:	ble	974c <rb_sha256_crypt_r+0xdbc>
    973c:	b	9838 <rb_sha256_crypt_r+0xea8>
    9740:	add	r7, r3, #2
    9744:	cmp	r1, #1
    9748:	bgt	9838 <rb_sha256_crypt_r+0xea8>
    974c:	bl	5540 <__errno_location@plt>
    9750:	mov	r1, #34	; 0x22
    9754:	str	r1, [r0]
    9758:	add	r0, pc, #256	; 0x100
    975c:	add	r1, pc, #236	; 0xec
    9760:	sub	r5, fp, #312	; 0x138
    9764:	vld1.64	{d16-d17}, [r0 :128]
    9768:	vld1.64	{d18-d19}, [r1 :128]
    976c:	mov	r0, #40	; 0x28
    9770:	mov	r1, r5
    9774:	vst1.32	{d16-d17}, [r1], r0
    9778:	ldr	r0, [fp, #-496]	; 0xfffffe10
    977c:	vst1.32	{d18-d19}, [r0]
    9780:	mov	r0, #0
    9784:	str	r0, [r1]
    9788:	str	r0, [fp, #-280]	; 0xfffffee8
    978c:	str	r0, [fp, #-276]	; 0xfffffeec
    9790:	sub	r1, fp, #100	; 0x64
    9794:	mov	r0, r5
    9798:	bl	9a60 <rb_sha256_finish_ctx>
    979c:	vmov.i32	q8, #0	; 0x00000000
    97a0:	sub	r0, fp, #136	; 0x88
    97a4:	mov	r1, #0
    97a8:	mov	r2, sl
    97ac:	vst1.64	{d16-d17}, [r0]!
    97b0:	vst1.64	{d16-d17}, [r0]
    97b4:	ldr	r0, [fp, #-492]	; 0xfffffe14
    97b8:	bl	4ed4 <memset@plt>
    97bc:	ldr	r4, [fp, #-504]	; 0xfffffe08
    97c0:	ldr	r0, [fp, #-508]	; 0xfffffe04
    97c4:	mov	r1, #0
    97c8:	mov	r2, r4
    97cc:	bl	4ed4 <memset@plt>
    97d0:	mov	r0, r5
    97d4:	mov	r1, #0
    97d8:	mov	r2, #172	; 0xac
    97dc:	bl	4ed4 <memset@plt>
    97e0:	sub	r0, fp, #488	; 0x1e8
    97e4:	mov	r1, #0
    97e8:	mov	r2, #172	; 0xac
    97ec:	bl	4ed4 <memset@plt>
    97f0:	ldr	r0, [fp, #-524]	; 0xfffffdf4
    97f4:	ldr	r5, [fp, #-528]	; 0xfffffdf0
    97f8:	cmp	r0, #0
    97fc:	beq	980c <rb_sha256_crypt_r+0xe7c>
    9800:	mov	r1, #0
    9804:	mov	r2, sl
    9808:	bl	4ed4 <memset@plt>
    980c:	cmp	r5, #0
    9810:	beq	9824 <rb_sha256_crypt_r+0xe94>
    9814:	mov	r0, r5
    9818:	mov	r1, #0
    981c:	mov	r2, r4
    9820:	bl	4ed4 <memset@plt>
    9824:	mov	r0, r9
    9828:	sub	sp, fp, #64	; 0x40
    982c:	vpop	{d8-d11}
    9830:	add	sp, sp, #4
    9834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9838:	mov	r0, #0
    983c:	mov	r9, r8
    9840:	strb	r0, [r7]
    9844:	b	9758 <rb_sha256_crypt_r+0xdc8>
    9848:	nop	{0}
    984c:	nop	{0}
    9850:	.word	0x510e527f
    9854:	.word	0x9b05688c
    9858:	.word	0x1f83d9ab
    985c:	.word	0x5be0cd19
    9860:	.word	0x6a09e667
    9864:	.word	0xbb67ae85
    9868:	.word	0x3c6ef372
    986c:	.word	0xa54ff53a
    9870:	.word	0x00010d84
    9874:	.word	0x00010d6c
    9878:	.word	0x000109be
    987c:	.word	0x00010750
    9880:	.word	0x000103dc
    9884:	.word	0x00010710
    9888:	.word	0x0001030f

0000988c <rb_sha256_process_bytes>:
    988c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9890:	add	fp, sp, #28
    9894:	sub	sp, sp, #12
    9898:	ldr	r5, [r2, #40]	; 0x28
    989c:	mov	r4, r2
    98a0:	mov	r8, r1
    98a4:	mov	r6, r0
    98a8:	cmp	r5, #0
    98ac:	beq	9920 <rb_sha256_process_bytes+0x94>
    98b0:	rsb	r7, r5, #128	; 0x80
    98b4:	add	r0, r4, r5
    98b8:	mov	r1, r6
    98bc:	cmp	r7, r8
    98c0:	add	r0, r0, #44	; 0x2c
    98c4:	movhi	r7, r8
    98c8:	mov	r2, r7
    98cc:	bl	509c <memcpy@plt>
    98d0:	ldr	r0, [r4, #40]	; 0x28
    98d4:	add	r0, r0, r7
    98d8:	cmp	r0, #65	; 0x41
    98dc:	str	r0, [r4, #40]	; 0x28
    98e0:	bcc	9918 <rb_sha256_process_bytes+0x8c>
    98e4:	add	r9, r4, #44	; 0x2c
    98e8:	bic	r1, r0, #63	; 0x3f
    98ec:	mov	r2, r4
    98f0:	mov	r0, r9
    98f4:	bl	9b84 <rb_sha256_process_block>
    98f8:	ldr	r0, [r4, #40]	; 0x28
    98fc:	and	r2, r0, #63	; 0x3f
    9900:	add	r0, r7, r5
    9904:	bic	r0, r0, #63	; 0x3f
    9908:	str	r2, [r4, #40]	; 0x28
    990c:	add	r1, r9, r0
    9910:	mov	r0, r9
    9914:	bl	509c <memcpy@plt>
    9918:	sub	r8, r8, r7
    991c:	add	r6, r6, r7
    9920:	cmp	r8, #64	; 0x40
    9924:	bcc	99c4 <rb_sha256_process_bytes+0x138>
    9928:	tst	r6, #3
    992c:	beq	99d8 <rb_sha256_process_bytes+0x14c>
    9930:	cmp	r8, #65	; 0x41
    9934:	bcc	9a00 <rb_sha256_process_bytes+0x174>
    9938:	add	r5, r4, #44	; 0x2c
    993c:	sub	r0, r8, #65	; 0x41
    9940:	mov	r7, r6
    9944:	str	r8, [sp, #8]
    9948:	bic	r0, r0, #63	; 0x3f
    994c:	add	sl, r5, #32
    9950:	add	r9, r5, #16
    9954:	str	r0, [sp, #4]
    9958:	mov	r0, #64	; 0x40
    995c:	add	r1, r6, #48	; 0x30
    9960:	mov	r2, r4
    9964:	vld1.8	{d16-d17}, [r7], r0
    9968:	add	r0, r6, #32
    996c:	vld1.8	{d18-d19}, [r1]
    9970:	mov	r1, #48	; 0x30
    9974:	vld1.8	{d20-d21}, [r0]
    9978:	mov	r0, r5
    997c:	vst1.8	{d16-d17}, [r0], r1
    9980:	add	r1, r6, #16
    9984:	vld1.8	{d16-d17}, [r1]
    9988:	vst1.8	{d18-d19}, [r0]
    998c:	mov	r0, r5
    9990:	mov	r1, #64	; 0x40
    9994:	vst1.8	{d20-d21}, [sl]
    9998:	vst1.8	{d16-d17}, [r9]
    999c:	bl	9b84 <rb_sha256_process_block>
    99a0:	sub	r8, r8, #64	; 0x40
    99a4:	mov	r6, r7
    99a8:	cmp	r8, #64	; 0x40
    99ac:	bhi	9958 <rb_sha256_process_bytes+0xcc>
    99b0:	ldr	r0, [sp, #8]
    99b4:	ldr	r1, [sp, #4]
    99b8:	sub	r0, r0, r1
    99bc:	sub	r8, r0, #64	; 0x40
    99c0:	b	9a08 <rb_sha256_process_bytes+0x17c>
    99c4:	mov	r7, r6
    99c8:	cmp	r8, #0
    99cc:	bne	9a08 <rb_sha256_process_bytes+0x17c>
    99d0:	sub	sp, fp, #28
    99d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99d8:	bic	r5, r8, #63	; 0x3f
    99dc:	mov	r0, r6
    99e0:	mov	r2, r4
    99e4:	mov	r1, r5
    99e8:	bl	9b84 <rb_sha256_process_block>
    99ec:	add	r7, r6, r5
    99f0:	and	r8, r8, #63	; 0x3f
    99f4:	cmp	r8, #0
    99f8:	bne	9a08 <rb_sha256_process_bytes+0x17c>
    99fc:	b	99d0 <rb_sha256_process_bytes+0x144>
    9a00:	mov	r7, r6
    9a04:	mov	r8, #64	; 0x40
    9a08:	ldr	r5, [r4, #40]	; 0x28
    9a0c:	mov	r1, r7
    9a10:	mov	r2, r8
    9a14:	add	r0, r4, r5
    9a18:	add	r0, r0, #44	; 0x2c
    9a1c:	bl	509c <memcpy@plt>
    9a20:	add	r5, r5, r8
    9a24:	cmp	r5, #64	; 0x40
    9a28:	bcc	9a54 <rb_sha256_process_bytes+0x1c8>
    9a2c:	add	r6, r4, #44	; 0x2c
    9a30:	mov	r1, #64	; 0x40
    9a34:	mov	r2, r4
    9a38:	mov	r0, r6
    9a3c:	bl	9b84 <rb_sha256_process_block>
    9a40:	sub	r5, r5, #64	; 0x40
    9a44:	add	r1, r4, #108	; 0x6c
    9a48:	mov	r0, r6
    9a4c:	mov	r2, r5
    9a50:	bl	509c <memcpy@plt>
    9a54:	str	r5, [r4, #40]	; 0x28
    9a58:	sub	sp, fp, #28
    9a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009a60 <rb_sha256_finish_ctx>:
    9a60:	push	{r4, r5, r6, r7, fp, lr}
    9a64:	add	fp, sp, #16
    9a68:	mov	r5, r0
    9a6c:	mov	r4, r1
    9a70:	ldr	r0, [r0, #32]
    9a74:	ldr	r1, [r5, #40]	; 0x28
    9a78:	adds	r0, r0, r1
    9a7c:	str	r0, [r5, #32]
    9a80:	bcc	9a90 <rb_sha256_finish_ctx+0x30>
    9a84:	ldr	r0, [r5, #36]	; 0x24
    9a88:	add	r0, r0, #1
    9a8c:	str	r0, [r5, #36]	; 0x24
    9a90:	cmp	r1, #55	; 0x37
    9a94:	mov	r7, #56	; 0x38
    9a98:	add	r6, r5, #44	; 0x2c
    9a9c:	movwhi	r7, #120	; 0x78
    9aa0:	add	r0, r6, r1
    9aa4:	sub	r2, r7, r1
    9aa8:	ldr	r1, [pc, #208]	; 9b80 <rb_sha256_finish_ctx+0x120>
    9aac:	add	r1, pc, r1
    9ab0:	bl	509c <memcpy@plt>
    9ab4:	ldr	r0, [r5, #32]
    9ab8:	mov	r1, #65280	; 0xff00
    9abc:	lsl	r3, r0, #11
    9ac0:	and	r2, r1, r0, lsr #5
    9ac4:	uxtb16	r3, r3
    9ac8:	orr	r3, r3, r0, lsl #27
    9acc:	orr	r2, r3, r2
    9ad0:	ubfx	r3, r0, #21, #8
    9ad4:	orr	r2, r2, r3
    9ad8:	orr	r3, r7, #4
    9adc:	str	r2, [r6, r3]
    9ae0:	movw	r3, #8160	; 0x1fe0
    9ae4:	ldr	r2, [r5, #36]	; 0x24
    9ae8:	and	r1, r1, r2, lsr #5
    9aec:	and	r3, r2, r3
    9af0:	orr	r1, r1, r3, lsl #11
    9af4:	ubfx	r3, r2, #21, #8
    9af8:	lsl	r2, r2, #3
    9afc:	orr	r0, r2, r0, lsr #29
    9b00:	mov	r2, r5
    9b04:	orr	r1, r1, r3
    9b08:	orr	r0, r1, r0, lsl #24
    9b0c:	add	r1, r7, #8
    9b10:	str	r0, [r6, r7]
    9b14:	mov	r0, r6
    9b18:	bl	9b84 <rb_sha256_process_block>
    9b1c:	ldr	r0, [r5]
    9b20:	rev	r0, r0
    9b24:	str	r0, [r4]
    9b28:	ldr	r0, [r5, #4]
    9b2c:	rev	r0, r0
    9b30:	str	r0, [r4, #4]
    9b34:	ldr	r0, [r5, #8]
    9b38:	rev	r0, r0
    9b3c:	str	r0, [r4, #8]
    9b40:	ldr	r0, [r5, #12]
    9b44:	rev	r0, r0
    9b48:	str	r0, [r4, #12]
    9b4c:	ldr	r0, [r5, #16]
    9b50:	rev	r0, r0
    9b54:	str	r0, [r4, #16]
    9b58:	ldr	r0, [r5, #20]
    9b5c:	rev	r0, r0
    9b60:	str	r0, [r4, #20]
    9b64:	ldr	r0, [r5, #24]
    9b68:	rev	r0, r0
    9b6c:	str	r0, [r4, #24]
    9b70:	ldr	r0, [r5, #28]
    9b74:	rev	r0, r0
    9b78:	str	r0, [r4, #28]
    9b7c:	pop	{r4, r5, r6, r7, fp, pc}
    9b80:	.word	0x0000fda4

00009b84 <rb_sha256_process_block>:
    9b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b88:	add	fp, sp, #28
    9b8c:	sub	sp, sp, #304	; 0x130
    9b90:	mov	r3, r0
    9b94:	ldr	r0, [r2, #32]
    9b98:	add	lr, r2, #16
    9b9c:	lsr	r4, r1, #2
    9ba0:	adds	r0, r0, r1
    9ba4:	str	r0, [r2, #32]
    9ba8:	ldr	r0, [r2, #4]
    9bac:	ldr	r9, [r2]
    9bb0:	str	r0, [sp, #32]
    9bb4:	ldr	r0, [r2, #8]
    9bb8:	str	r0, [sp, #36]	; 0x24
    9bbc:	ldr	r0, [r2, #12]
    9bc0:	str	r0, [sp, #40]	; 0x28
    9bc4:	ldr	r0, [r2, #28]
    9bc8:	ldm	lr, {sl, ip, lr}
    9bcc:	bcc	9bdc <rb_sha256_process_block+0x58>
    9bd0:	ldr	r1, [r2, #36]	; 0x24
    9bd4:	add	r1, r1, #1
    9bd8:	str	r1, [r2, #36]	; 0x24
    9bdc:	cmp	r4, #0
    9be0:	str	r2, [sp]
    9be4:	beq	9e28 <rb_sha256_process_block+0x2a4>
    9be8:	ldr	r1, [r3]
    9bec:	str	r4, [sp, #4]
    9bf0:	str	r3, [sp, #8]
    9bf4:	rev	r8, r1
    9bf8:	str	r8, [sp, #44]	; 0x2c
    9bfc:	ldr	r1, [r3, #4]
    9c00:	rev	r1, r1
    9c04:	str	r1, [sp, #48]	; 0x30
    9c08:	ldr	r1, [r3, #8]
    9c0c:	rev	r1, r1
    9c10:	str	r1, [sp, #52]	; 0x34
    9c14:	ldr	r1, [r3, #12]
    9c18:	rev	r1, r1
    9c1c:	str	r1, [sp, #56]	; 0x38
    9c20:	ldr	r1, [r3, #16]
    9c24:	rev	r1, r1
    9c28:	str	r1, [sp, #60]	; 0x3c
    9c2c:	ldr	r1, [r3, #20]
    9c30:	rev	r1, r1
    9c34:	str	r1, [sp, #64]	; 0x40
    9c38:	ldr	r1, [r3, #24]
    9c3c:	rev	r1, r1
    9c40:	str	r1, [sp, #68]	; 0x44
    9c44:	ldr	r1, [r3, #28]
    9c48:	rev	r1, r1
    9c4c:	str	r1, [sp, #72]	; 0x48
    9c50:	ldr	r1, [r3, #32]
    9c54:	rev	r1, r1
    9c58:	str	r1, [sp, #76]	; 0x4c
    9c5c:	ldr	r1, [r3, #36]	; 0x24
    9c60:	rev	r1, r1
    9c64:	str	r1, [sp, #80]	; 0x50
    9c68:	ldr	r1, [r3, #40]	; 0x28
    9c6c:	rev	r1, r1
    9c70:	str	r1, [sp, #84]	; 0x54
    9c74:	ldr	r1, [r3, #44]	; 0x2c
    9c78:	rev	r1, r1
    9c7c:	str	r1, [sp, #88]	; 0x58
    9c80:	ldr	r1, [r3, #48]	; 0x30
    9c84:	rev	r1, r1
    9c88:	str	r1, [sp, #92]	; 0x5c
    9c8c:	ldr	r1, [r3, #52]	; 0x34
    9c90:	rev	r1, r1
    9c94:	str	r1, [sp, #96]	; 0x60
    9c98:	ldr	r1, [r3, #56]	; 0x38
    9c9c:	rev	r1, r1
    9ca0:	str	r1, [sp, #100]	; 0x64
    9ca4:	ldr	r1, [r3, #60]	; 0x3c
    9ca8:	rev	r1, r1
    9cac:	str	r1, [sp, #104]	; 0x68
    9cb0:	mov	r1, #0
    9cb4:	add	r2, sp, #44	; 0x2c
    9cb8:	add	r2, r2, r1
    9cbc:	add	r1, r1, #4
    9cc0:	ldr	r6, [r2, #56]	; 0x38
    9cc4:	ldr	r3, [r2, #4]
    9cc8:	ldr	r7, [r2, #36]	; 0x24
    9ccc:	cmp	r1, #192	; 0xc0
    9cd0:	ror	r4, r6, #19
    9cd4:	ror	r5, r3, #18
    9cd8:	add	r7, r8, r7
    9cdc:	mov	r8, r3
    9ce0:	eor	r4, r4, r6, lsr #10
    9ce4:	eor	r5, r5, r3, lsr #3
    9ce8:	eor	r6, r4, r6, ror #17
    9cec:	eor	r5, r5, r3, ror #7
    9cf0:	add	r7, r7, r6
    9cf4:	add	r7, r7, r5
    9cf8:	str	r7, [r2, #64]	; 0x40
    9cfc:	bne	9cb4 <rb_sha256_process_block+0x130>
    9d00:	ldr	r6, [sp, #32]
    9d04:	ldr	r3, [sp, #36]	; 0x24
    9d08:	ldr	r8, [sp, #40]	; 0x28
    9d0c:	mov	r2, #0
    9d10:	mov	r4, ip
    9d14:	mov	r7, r0
    9d18:	str	r9, [sp, #12]
    9d1c:	str	sl, [sp, #16]
    9d20:	str	ip, [sp, #20]
    9d24:	str	lr, [sp, #24]
    9d28:	str	r0, [sp, #28]
    9d2c:	mov	r5, r3
    9d30:	mov	r3, r6
    9d34:	mov	r6, r9
    9d38:	mov	ip, lr
    9d3c:	mov	lr, r4
    9d40:	mov	r4, sl
    9d44:	ror	r0, r6, #2
    9d48:	eor	r1, r3, r5
    9d4c:	and	r9, r3, r5
    9d50:	eor	r0, r0, r6, ror #13
    9d54:	and	r1, r6, r1
    9d58:	eor	r1, r1, r9
    9d5c:	eor	r0, r0, r6, ror #22
    9d60:	add	r9, r0, r1
    9d64:	bic	r1, ip, sl
    9d68:	and	r0, sl, lr
    9d6c:	orr	r0, r0, r1
    9d70:	ror	r1, sl, #6
    9d74:	eor	r1, r1, sl, ror #11
    9d78:	add	r0, r0, r7
    9d7c:	mov	r7, ip
    9d80:	eor	r1, r1, sl, ror #25
    9d84:	add	r0, r0, r1
    9d88:	ldr	r1, [pc, #200]	; 9e58 <rb_sha256_process_block+0x2d4>
    9d8c:	add	r1, pc, r1
    9d90:	ldr	r1, [r1, r2, lsl #2]
    9d94:	add	r0, r0, r1
    9d98:	add	r1, sp, #44	; 0x2c
    9d9c:	ldr	r1, [r1, r2, lsl #2]
    9da0:	add	r2, r2, #1
    9da4:	cmp	r2, #64	; 0x40
    9da8:	add	r0, r0, r1
    9dac:	add	sl, r0, r8
    9db0:	add	r9, r9, r0
    9db4:	mov	r8, r5
    9db8:	bne	9d2c <rb_sha256_process_block+0x1a8>
    9dbc:	ldr	r1, [sp, #24]
    9dc0:	ldr	r0, [sp, #28]
    9dc4:	add	r1, lr, r1
    9dc8:	add	r0, ip, r0
    9dcc:	ldr	ip, [sp, #20]
    9dd0:	mov	lr, r1
    9dd4:	ldr	r1, [sp, #16]
    9dd8:	add	ip, r4, ip
    9ddc:	ldr	r4, [sp, #4]
    9de0:	add	r1, sl, r1
    9de4:	mov	sl, r1
    9de8:	ldr	r1, [sp, #40]	; 0x28
    9dec:	subs	r4, r4, #16
    9df0:	add	r1, r5, r1
    9df4:	str	r1, [sp, #40]	; 0x28
    9df8:	ldr	r1, [sp, #36]	; 0x24
    9dfc:	add	r1, r3, r1
    9e00:	ldr	r3, [sp, #8]
    9e04:	str	r1, [sp, #36]	; 0x24
    9e08:	ldr	r1, [sp, #32]
    9e0c:	add	r3, r3, #64	; 0x40
    9e10:	add	r1, r6, r1
    9e14:	str	r1, [sp, #32]
    9e18:	ldr	r1, [sp, #12]
    9e1c:	add	r1, r9, r1
    9e20:	mov	r9, r1
    9e24:	bne	9be8 <rb_sha256_process_block+0x64>
    9e28:	ldr	r1, [sp]
    9e2c:	ldr	r2, [sp, #32]
    9e30:	str	r9, [r1]
    9e34:	str	r2, [r1, #4]
    9e38:	ldr	r2, [sp, #36]	; 0x24
    9e3c:	add	r3, r1, #12
    9e40:	str	r2, [r1, #8]
    9e44:	ldr	r2, [sp, #40]	; 0x28
    9e48:	stm	r3, {r2, sl, ip, lr}
    9e4c:	str	r0, [r1, #28]
    9e50:	sub	sp, fp, #28
    9e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e58:	.word	0x0000f9c0
    9e5c:	.word	0xe320f000

00009e60 <rb_sha512_crypt_r>:
    9e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e64:	add	fp, sp, #28
    9e68:	sub	sp, sp, #4
    9e6c:	vpush	{d8-d15}
    9e70:	sub	sp, sp, #896	; 0x380
    9e74:	mov	sl, r0
    9e78:	ldr	r0, [pc, #4064]	; ae60 <rb_sha512_crypt_r+0x1000>
    9e7c:	mov	r4, r2
    9e80:	mov	r2, #3
    9e84:	mov	r6, r3
    9e88:	mov	r8, r1
    9e8c:	add	r0, pc, r0
    9e90:	bl	5468 <strncmp@plt>
    9e94:	ldr	r1, [pc, #4040]	; ae64 <rb_sha512_crypt_r+0x1004>
    9e98:	cmp	r0, #0
    9e9c:	mov	r2, #7
    9ea0:	addeq	r8, r8, #3
    9ea4:	mov	r0, r8
    9ea8:	add	r1, pc, r1
    9eac:	bl	5468 <strncmp@plt>
    9eb0:	movw	r1, #5000	; 0x1388
    9eb4:	cmp	r0, #0
    9eb8:	str	r4, [fp, #-976]	; 0xfffffc30
    9ebc:	str	r6, [fp, #-980]	; 0xfffffc2c
    9ec0:	str	r1, [fp, #-948]	; 0xfffffc4c
    9ec4:	beq	9f10 <rb_sha512_crypt_r+0xb0>
    9ec8:	mov	r0, #0
    9ecc:	b	9f54 <rb_sha512_crypt_r+0xf4>
    9ed0:	.word	0xf3bcc908
    9ed4:	.word	0x6a09e667
    9ed8:	.word	0x84caa73b
    9edc:	.word	0xbb67ae85
    9ee0:	.word	0xade682d1
    9ee4:	.word	0x510e527f
    9ee8:	.word	0x2b3e6c1f
    9eec:	.word	0x9b05688c
    9ef0:	.word	0xfe94f82b
    9ef4:	.word	0x3c6ef372
    9ef8:	.word	0x5f1d36f1
    9efc:	.word	0xa54ff53a
    9f00:	.word	0xfb41bd6b
    9f04:	.word	0x1f83d9ab
    9f08:	.word	0x137e2179
    9f0c:	.word	0x5be0cd19
    9f10:	add	r0, r8, #7
    9f14:	sub	r1, fp, #168	; 0xa8
    9f18:	mov	r2, #10
    9f1c:	bl	5090 <strtoul@plt>
    9f20:	ldr	r1, [fp, #-168]	; 0xffffff58
    9f24:	ldrb	r2, [r1]
    9f28:	cmp	r2, #36	; 0x24
    9f2c:	bne	a698 <rb_sha512_crypt_r+0x838>
    9f30:	movw	r2, #51711	; 0xc9ff
    9f34:	add	r8, r1, #1
    9f38:	movt	r2, #15258	; 0x3b9a
    9f3c:	cmp	r0, r2
    9f40:	movcc	r2, r0
    9f44:	mov	r0, #1
    9f48:	cmp	r2, #1000	; 0x3e8
    9f4c:	movls	r2, #1000	; 0x3e8
    9f50:	str	r2, [fp, #-948]	; 0xfffffc4c
    9f54:	str	r0, [fp, #-988]	; 0xfffffc24
    9f58:	ldr	r1, [pc, #4004]	; af04 <rb_sha512_crypt_r+0x10a4>
    9f5c:	mov	r0, r8
    9f60:	sub	r9, fp, #920	; 0x398
    9f64:	sub	r4, fp, #576	; 0x240
    9f68:	add	r1, pc, r1
    9f6c:	bl	5438 <strcspn@plt>
    9f70:	mov	r6, r0
    9f74:	cmp	r0, #16
    9f78:	mov	r0, sl
    9f7c:	movcs	r6, #16
    9f80:	bl	5078 <strlen@plt>
    9f84:	tst	sl, #7
    9f88:	str	r0, [fp, #-924]	; 0xfffffc64
    9f8c:	beq	9fc0 <rb_sha512_crypt_r+0x160>
    9f90:	mov	r2, r0
    9f94:	add	r0, r0, #15
    9f98:	bic	r0, r0, #7
    9f9c:	sub	r0, sp, r0
    9fa0:	add	r5, r0, #8
    9fa4:	mov	sp, r0
    9fa8:	mov	r0, r5
    9fac:	mov	r1, sl
    9fb0:	bl	509c <memcpy@plt>
    9fb4:	mov	sl, r5
    9fb8:	str	r5, [fp, #-984]	; 0xfffffc28
    9fbc:	b	9fc8 <rb_sha512_crypt_r+0x168>
    9fc0:	mov	r0, #0
    9fc4:	str	r0, [fp, #-984]	; 0xfffffc28
    9fc8:	add	r0, r9, #16
    9fcc:	mov	r7, #0
    9fd0:	tst	r8, #7
    9fd4:	str	r0, [fp, #-964]	; 0xfffffc3c
    9fd8:	add	r0, r9, #32
    9fdc:	str	r0, [fp, #-960]	; 0xfffffc40
    9fe0:	add	r0, r9, #48	; 0x30
    9fe4:	str	r0, [fp, #-956]	; 0xfffffc44
    9fe8:	add	r0, r4, #16
    9fec:	str	r0, [fp, #-940]	; 0xfffffc54
    9ff0:	add	r0, r4, #32
    9ff4:	str	r0, [fp, #-936]	; 0xfffffc58
    9ff8:	add	r0, r4, #48	; 0x30
    9ffc:	str	r0, [fp, #-932]	; 0xfffffc5c
    a000:	beq	a034 <rb_sha512_crypt_r+0x1d4>
    a004:	add	r0, r6, #15
    a008:	bic	r0, r0, #7
    a00c:	sub	r0, sp, r0
    a010:	add	r5, r0, #8
    a014:	mov	sp, r0
    a018:	mov	r0, r5
    a01c:	mov	r1, r8
    a020:	mov	r2, r6
    a024:	bl	509c <memcpy@plt>
    a028:	mov	r8, r5
    a02c:	str	r5, [fp, #-992]	; 0xfffffc20
    a030:	b	a03c <rb_sha512_crypt_r+0x1dc>
    a034:	mov	r0, #0
    a038:	str	r0, [fp, #-992]	; 0xfffffc20
    a03c:	sub	r0, pc, #372	; 0x174
    a040:	mov	r2, #80	; 0x50
    a044:	mov	r5, r6
    a048:	vmov.i32	q8, #0	; 0x00000000
    a04c:	vld1.64	{d8-d9}, [r0 :128]
    a050:	sub	r0, pc, #376	; 0x178
    a054:	sub	r1, pc, #364	; 0x16c
    a058:	vld1.64	{d12-d13}, [r0 :128]
    a05c:	mov	r0, r4
    a060:	vld1.64	{d10-d11}, [r1 :128]
    a064:	vst1.64	{d8-d9}, [r0], r2
    a068:	sub	r1, pc, #368	; 0x170
    a06c:	ldr	r6, [fp, #-924]	; 0xfffffc64
    a070:	mov	r2, r4
    a074:	vld1.64	{d14-d15}, [r1 :128]
    a078:	ldr	r1, [fp, #-940]	; 0xfffffc54
    a07c:	vst1.64	{d10-d11}, [r1]
    a080:	ldr	r1, [fp, #-936]	; 0xfffffc58
    a084:	vst1.64	{d12-d13}, [r1]
    a088:	ldr	r1, [fp, #-932]	; 0xfffffc5c
    a08c:	vst1.64	{d14-d15}, [r1]
    a090:	str	r7, [r0]
    a094:	add	r0, r4, #64	; 0x40
    a098:	mov	r1, r6
    a09c:	str	r7, [fp, #-492]	; 0xfffffe14
    a0a0:	str	r0, [fp, #-944]	; 0xfffffc50
    a0a4:	vst1.64	{d16-d17}, [r0]
    a0a8:	mov	r0, sl
    a0ac:	bl	b520 <rb_sha512_process_bytes>
    a0b0:	mov	r0, r8
    a0b4:	mov	r1, r5
    a0b8:	mov	r2, r4
    a0bc:	bl	b520 <rb_sha512_process_bytes>
    a0c0:	mov	r0, r9
    a0c4:	mov	r1, #80	; 0x50
    a0c8:	vmov.i32	q8, #0	; 0x00000000
    a0cc:	mov	r2, r9
    a0d0:	vst1.64	{d8-d9}, [r0], r1
    a0d4:	ldr	r1, [fp, #-964]	; 0xfffffc3c
    a0d8:	vst1.64	{d10-d11}, [r1]
    a0dc:	ldr	r1, [fp, #-960]	; 0xfffffc40
    a0e0:	vst1.64	{d12-d13}, [r1]
    a0e4:	ldr	r1, [fp, #-956]	; 0xfffffc44
    a0e8:	vst1.64	{d14-d15}, [r1]
    a0ec:	str	r7, [r0]
    a0f0:	add	r0, r9, #64	; 0x40
    a0f4:	mov	r1, r6
    a0f8:	str	r7, [fp, #-836]	; 0xfffffcbc
    a0fc:	str	r0, [fp, #-972]	; 0xfffffc34
    a100:	vst1.64	{d16-d17}, [r0]
    a104:	mov	r0, sl
    a108:	bl	b520 <rb_sha512_process_bytes>
    a10c:	mov	r0, r8
    a110:	mov	r1, r5
    a114:	mov	r2, r9
    a118:	str	r8, [fp, #-968]	; 0xfffffc38
    a11c:	bl	b520 <rb_sha512_process_bytes>
    a120:	mov	r0, sl
    a124:	mov	r1, r6
    a128:	mov	r2, r9
    a12c:	bl	b520 <rb_sha512_process_bytes>
    a130:	sub	r1, fp, #168	; 0xa8
    a134:	mov	r0, r9
    a138:	bl	b6c0 <rb_sha512_finish_ctx>
    a13c:	cmp	r6, #65	; 0x41
    a140:	mov	r1, r6
    a144:	bcc	a180 <rb_sha512_crypt_r+0x320>
    a148:	sub	r0, r6, #65	; 0x41
    a14c:	sub	r4, fp, #168	; 0xa8
    a150:	sub	r7, fp, #576	; 0x240
    a154:	bic	r8, r0, #63	; 0x3f
    a158:	mov	r0, r4
    a15c:	mov	r1, #64	; 0x40
    a160:	mov	r2, r7
    a164:	bl	b520 <rb_sha512_process_bytes>
    a168:	sub	r6, r6, #64	; 0x40
    a16c:	cmp	r6, #64	; 0x40
    a170:	bhi	a158 <rb_sha512_crypt_r+0x2f8>
    a174:	ldr	r6, [fp, #-924]	; 0xfffffc64
    a178:	sub	r0, r6, r8
    a17c:	sub	r1, r0, #64	; 0x40
    a180:	sub	r0, fp, #168	; 0xa8
    a184:	sub	r2, fp, #576	; 0x240
    a188:	str	r5, [fp, #-952]	; 0xfffffc48
    a18c:	bl	b520 <rb_sha512_process_bytes>
    a190:	cmp	r6, #0
    a194:	beq	a1f0 <rb_sha512_crypt_r+0x390>
    a198:	clz	r0, r6
    a19c:	sub	r4, fp, #576	; 0x240
    a1a0:	mov	r5, #0
    a1a4:	sub	r7, fp, #168	; 0xa8
    a1a8:	lsr	r8, r0, #5
    a1ac:	tst	r6, #1
    a1b0:	bne	a1dc <rb_sha512_crypt_r+0x37c>
    a1b4:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a1b8:	mov	r0, sl
    a1bc:	mov	r2, r4
    a1c0:	bl	b520 <rb_sha512_process_bytes>
    a1c4:	lsr	r0, r6, #1
    a1c8:	cmp	r5, r6, lsr #1
    a1cc:	mov	r6, r0
    a1d0:	beq	a1e8 <rb_sha512_crypt_r+0x388>
    a1d4:	tst	r6, #1
    a1d8:	beq	a1b4 <rb_sha512_crypt_r+0x354>
    a1dc:	mov	r0, r7
    a1e0:	mov	r1, #64	; 0x40
    a1e4:	b	a1bc <rb_sha512_crypt_r+0x35c>
    a1e8:	ldr	r6, [fp, #-924]	; 0xfffffc64
    a1ec:	b	a1f4 <rb_sha512_crypt_r+0x394>
    a1f0:	mov	r8, #1
    a1f4:	sub	r0, fp, #576	; 0x240
    a1f8:	sub	r1, fp, #168	; 0xa8
    a1fc:	bl	b6c0 <rb_sha512_finish_ctx>
    a200:	sub	r0, pc, #824	; 0x338
    a204:	mov	r7, #0
    a208:	cmp	r8, #0
    a20c:	vld1.64	{d16-d17}, [r0 :128]
    a210:	sub	r0, pc, #824	; 0x338
    a214:	sub	r1, pc, #812	; 0x32c
    a218:	vld1.64	{d18-d19}, [r1 :128]
    a21c:	vld1.64	{d20-d21}, [r0 :128]
    a220:	vst1.64	{d16-d17}, [r9]
    a224:	sub	r0, pc, #812	; 0x32c
    a228:	ldr	r1, [fp, #-972]	; 0xfffffc34
    a22c:	ldr	r5, [fp, #-968]	; 0xfffffc38
    a230:	vld1.64	{d16-d17}, [r0 :128]
    a234:	ldr	r0, [fp, #-964]	; 0xfffffc3c
    a238:	vst1.64	{d18-d19}, [r0]
    a23c:	ldr	r0, [fp, #-960]	; 0xfffffc40
    a240:	vst1.64	{d20-d21}, [r0]
    a244:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a248:	vst1.64	{d16-d17}, [r0]
    a24c:	vmov.i32	q8, #0	; 0x00000000
    a250:	mov	r0, #20
    a254:	str	r7, [r1, #16]
    a258:	vst1.64	{d16-d17}, [r1], r0
    a25c:	str	r7, [r1]
    a260:	beq	a28c <rb_sha512_crypt_r+0x42c>
    a264:	sub	r0, fp, #920	; 0x398
    a268:	sub	r1, fp, #232	; 0xe8
    a26c:	bl	b6c0 <rb_sha512_finish_ctx>
    a270:	add	r0, r6, #7
    a274:	bic	r0, r0, #7
    a278:	sub	r0, sp, r0
    a27c:	mov	sp, r0
    a280:	ldr	r8, [fp, #-952]	; 0xfffffc48
    a284:	str	r0, [fp, #-928]	; 0xfffffc60
    a288:	b	a348 <rb_sha512_crypt_r+0x4e8>
    a28c:	sub	r7, fp, #920	; 0x398
    a290:	mov	r4, r6
    a294:	mov	r0, sl
    a298:	mov	r1, r6
    a29c:	mov	r2, r7
    a2a0:	bl	b520 <rb_sha512_process_bytes>
    a2a4:	subs	r4, r4, #1
    a2a8:	bne	a294 <rb_sha512_crypt_r+0x434>
    a2ac:	sub	sl, fp, #232	; 0xe8
    a2b0:	sub	r0, fp, #920	; 0x398
    a2b4:	mov	r1, sl
    a2b8:	bl	b6c0 <rb_sha512_finish_ctx>
    a2bc:	add	r0, r6, #7
    a2c0:	bic	r0, r0, #7
    a2c4:	sub	r4, sp, r0
    a2c8:	mov	sp, r4
    a2cc:	ldr	r8, [fp, #-952]	; 0xfffffc48
    a2d0:	cmp	r6, #64	; 0x40
    a2d4:	str	r4, [fp, #-928]	; 0xfffffc60
    a2d8:	bcc	a340 <rb_sha512_crypt_r+0x4e0>
    a2dc:	mov	r0, #0
    a2e0:	add	r1, sl, #32
    a2e4:	mov	r2, #48	; 0x30
    a2e8:	add	r3, sl, #16
    a2ec:	mov	r7, sl
    a2f0:	sub	r6, r4, r0
    a2f4:	vld1.64	{d20-d21}, [r3]
    a2f8:	vld1.64	{d18-d19}, [r1]
    a2fc:	sub	r0, r0, #64	; 0x40
    a300:	vld1.64	{d16-d17}, [r7], r2
    a304:	add	r5, r6, #32
    a308:	vld1.64	{d22-d23}, [r7]
    a30c:	add	r7, r6, #16
    a310:	vst1.64	{d20-d21}, [r7]
    a314:	vst1.64	{d18-d19}, [r5]
    a318:	vst1.64	{d16-d17}, [r6], r2
    a31c:	vst1.64	{d22-d23}, [r6]
    a320:	ldr	r6, [fp, #-924]	; 0xfffffc64
    a324:	add	r7, r6, r0
    a328:	cmp	r7, #63	; 0x3f
    a32c:	bhi	a2ec <rb_sha512_crypt_r+0x48c>
    a330:	ldr	r5, [fp, #-968]	; 0xfffffc38
    a334:	sub	r0, r4, r0
    a338:	and	r7, r6, #63	; 0x3f
    a33c:	b	a348 <rb_sha512_crypt_r+0x4e8>
    a340:	mov	r0, r4
    a344:	mov	r7, r6
    a348:	sub	r1, fp, #232	; 0xe8
    a34c:	mov	r2, r7
    a350:	bl	509c <memcpy@plt>
    a354:	add	r0, pc, #884	; 0x374
    a358:	mov	r4, #0
    a35c:	sub	r6, fp, #576	; 0x240
    a360:	vld1.64	{d16-d17}, [r0 :128]
    a364:	add	r0, pc, #884	; 0x374
    a368:	vld1.64	{d18-d19}, [r0 :128]
    a36c:	vst1.64	{d16-d17}, [r9]
    a370:	add	r0, pc, #888	; 0x378
    a374:	vld1.64	{d16-d17}, [r0 :128]
    a378:	ldr	r0, [fp, #-964]	; 0xfffffc3c
    a37c:	vst1.64	{d18-d19}, [r0]
    a380:	add	r0, pc, #888	; 0x378
    a384:	ldr	r1, [fp, #-972]	; 0xfffffc34
    a388:	vld1.64	{d18-d19}, [r0 :128]
    a38c:	ldr	r0, [fp, #-960]	; 0xfffffc40
    a390:	vst1.64	{d16-d17}, [r0]
    a394:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a398:	vmov.i32	q8, #0	; 0x00000000
    a39c:	vst1.64	{d18-d19}, [r0]
    a3a0:	mov	r0, #20
    a3a4:	str	r4, [r1, #16]
    a3a8:	vst1.64	{d16-d17}, [r1], r0
    a3ac:	str	r4, [r1]
    a3b0:	mov	r0, r5
    a3b4:	mov	r1, r8
    a3b8:	mov	r2, r9
    a3bc:	bl	b520 <rb_sha512_process_bytes>
    a3c0:	ldrb	r0, [fp, #-168]	; 0xffffff58
    a3c4:	add	r4, r4, #1
    a3c8:	add	r0, r0, #16
    a3cc:	cmp	r4, r0
    a3d0:	bcc	a3b0 <rb_sha512_crypt_r+0x550>
    a3d4:	sub	r4, fp, #232	; 0xe8
    a3d8:	sub	r0, fp, #920	; 0x398
    a3dc:	mov	r1, r4
    a3e0:	bl	b6c0 <rb_sha512_finish_ctx>
    a3e4:	add	r0, r8, #7
    a3e8:	bic	r0, r0, #7
    a3ec:	sub	r0, sp, r0
    a3f0:	mov	sp, r0
    a3f4:	mov	r1, r4
    a3f8:	mov	r2, r8
    a3fc:	str	r0, [fp, #-956]	; 0xfffffc44
    a400:	bl	509c <memcpy@plt>
    a404:	vmov.i32	q4, #0	; 0x00000000
    a408:	mov	r7, #0
    a40c:	sub	r5, fp, #168	; 0xa8
    a410:	mov	r8, #0
    a414:	b	a444 <rb_sha512_crypt_r+0x5e4>
    a418:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a41c:	mov	r1, r4
    a420:	mov	r2, r6
    a424:	bl	b520 <rb_sha512_process_bytes>
    a428:	mov	r0, r6
    a42c:	mov	r1, r5
    a430:	bl	b6c0 <rb_sha512_finish_ctx>
    a434:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    a438:	add	r8, r8, #1
    a43c:	cmp	r0, r8
    a440:	beq	a538 <rb_sha512_crypt_r+0x6d8>
    a444:	add	r0, pc, #644	; 0x284
    a448:	mov	r2, r6
    a44c:	ands	sl, r8, #1
    a450:	vld1.64	{d16-d17}, [r0 :128]
    a454:	add	r0, pc, #660	; 0x294
    a458:	add	r1, pc, #640	; 0x280
    a45c:	vld1.64	{d18-d19}, [r1 :128]
    a460:	vld1.64	{d20-d21}, [r0 :128]
    a464:	mov	r1, #20
    a468:	vst1.64	{d16-d17}, [r6]
    a46c:	add	r0, pc, #652	; 0x28c
    a470:	vld1.64	{d16-d17}, [r0 :128]
    a474:	ldr	r0, [fp, #-940]	; 0xfffffc54
    a478:	vst1.64	{d18-d19}, [r0]
    a47c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    a480:	vst1.64	{d20-d21}, [r0]
    a484:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    a488:	vst1.64	{d16-d17}, [r0]
    a48c:	ldr	r0, [fp, #-944]	; 0xfffffc50
    a490:	str	r7, [r0, #16]
    a494:	vst1.64	{d8-d9}, [r0], r1
    a498:	str	r7, [r0]
    a49c:	movw	r0, #18725	; 0x4925
    a4a0:	movt	r0, #9362	; 0x2492
    a4a4:	umull	r0, r1, r8, r0
    a4a8:	sub	r0, r8, r1
    a4ac:	add	r6, r1, r0, lsr #1
    a4b0:	lsr	r0, r6, #2
    a4b4:	lsl	r4, r0, #3
    a4b8:	movw	r0, #43691	; 0xaaab
    a4bc:	movt	r0, #43690	; 0xaaaa
    a4c0:	umull	r0, r1, r8, r0
    a4c4:	lsr	r0, r1, #1
    a4c8:	add	r9, r0, r0, lsl #1
    a4cc:	beq	a4dc <rb_sha512_crypt_r+0x67c>
    a4d0:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a4d4:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a4d8:	b	a4e4 <rb_sha512_crypt_r+0x684>
    a4dc:	mov	r0, r5
    a4e0:	mov	r1, #64	; 0x40
    a4e4:	bl	b520 <rb_sha512_process_bytes>
    a4e8:	sub	r4, r4, r6, lsr #2
    a4ec:	cmp	r9, r8
    a4f0:	sub	r6, fp, #576	; 0x240
    a4f4:	beq	a508 <rb_sha512_crypt_r+0x6a8>
    a4f8:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a4fc:	ldr	r1, [fp, #-952]	; 0xfffffc48
    a500:	mov	r2, r6
    a504:	bl	b520 <rb_sha512_process_bytes>
    a508:	cmp	r4, r8
    a50c:	ldr	r4, [fp, #-924]	; 0xfffffc64
    a510:	beq	a524 <rb_sha512_crypt_r+0x6c4>
    a514:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a518:	mov	r1, r4
    a51c:	mov	r2, r6
    a520:	bl	b520 <rb_sha512_process_bytes>
    a524:	cmp	sl, #0
    a528:	beq	a418 <rb_sha512_crypt_r+0x5b8>
    a52c:	mov	r0, r5
    a530:	mov	r1, #64	; 0x40
    a534:	b	a420 <rb_sha512_crypt_r+0x5c0>
    a538:	ldr	r4, [fp, #-980]	; 0xfffffc2c
    a53c:	ldr	r9, [fp, #-976]	; 0xfffffc30
    a540:	mov	r1, #0
    a544:	bic	r7, r4, r4, asr #31
    a548:	mov	r0, r9
    a54c:	mov	r2, r7
    a550:	bl	4ed4 <memset@plt>
    a554:	ldr	r1, [pc, #4020]	; b510 <rb_sha512_crypt_r+0x16b0>
    a558:	mov	r0, r9
    a55c:	mov	r2, r7
    a560:	add	r1, pc, r1
    a564:	bl	4e2c <strncpy@plt>
    a568:	bl	5078 <strlen@plt>
    a56c:	adds	r5, r9, r0
    a570:	ldr	r0, [fp, #-988]	; 0xfffffc24
    a574:	sub	r4, r4, #3
    a578:	addeq	r5, r9, r7
    a57c:	cmp	r0, #0
    a580:	beq	a5b8 <rb_sha512_crypt_r+0x758>
    a584:	sub	sp, sp, #8
    a588:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    a58c:	bic	r1, r4, r4, asr #31
    a590:	str	r0, [sp]
    a594:	mov	r0, r5
    a598:	ldr	r2, [pc, #3956]	; b514 <rb_sha512_crypt_r+0x16b4>
    a59c:	ldr	r3, [pc, #3956]	; b518 <rb_sha512_crypt_r+0x16b8>
    a5a0:	add	r2, pc, r2
    a5a4:	add	r3, pc, r3
    a5a8:	bl	5408 <snprintf@plt>
    a5ac:	add	sp, sp, #8
    a5b0:	sub	r4, r4, r0
    a5b4:	add	r5, r5, r0
    a5b8:	ldr	r8, [fp, #-952]	; 0xfffffc48
    a5bc:	bic	r7, r4, r4, asr #31
    a5c0:	mov	r0, r5
    a5c4:	mov	r1, #0
    a5c8:	mov	sl, #0
    a5cc:	cmp	r7, r8
    a5d0:	movcs	r7, r8
    a5d4:	mov	r2, r7
    a5d8:	bl	4ed4 <memset@plt>
    a5dc:	ldr	r1, [fp, #-968]	; 0xfffffc38
    a5e0:	mov	r0, r5
    a5e4:	mov	r2, r7
    a5e8:	bl	4e2c <strncpy@plt>
    a5ec:	mov	r0, r9
    a5f0:	bl	5078 <strlen@plt>
    a5f4:	adds	r2, r9, r0
    a5f8:	sub	r3, r4, r7
    a5fc:	addeq	r2, r9, r8
    a600:	cmp	r3, #1
    a604:	blt	b394 <rb_sha512_crypt_r+0x1534>
    a608:	mov	r0, #36	; 0x24
    a60c:	strb	r0, [r2]
    a610:	beq	b394 <rb_sha512_crypt_r+0x1534>
    a614:	ldrb	r5, [fp, #-126]	; 0xffffff82
    a618:	ldrb	r7, [fp, #-168]	; 0xffffff58
    a61c:	ldrb	r6, [fp, #-147]	; 0xffffff6d
    a620:	ldr	r0, [pc, #3828]	; b51c <rb_sha512_crypt_r+0x16bc>
    a624:	and	r1, r5, #63	; 0x3f
    a628:	add	r0, pc, r0
    a62c:	ldrb	r1, [r0, r1]
    a630:	strb	r1, [r2, #1]
    a634:	sub	r1, r3, #2
    a638:	cmp	r1, #0
    a63c:	ble	a6ac <rb_sha512_crypt_r+0x84c>
    a640:	orr	r1, r5, r6, lsl #8
    a644:	ubfx	r1, r1, #6, #6
    a648:	ldrb	r1, [r0, r1]
    a64c:	strb	r1, [r2, #2]
    a650:	sub	r1, r3, #3
    a654:	cmp	r1, #1
    a658:	blt	a6bc <rb_sha512_crypt_r+0x85c>
    a65c:	lsl	r1, r6, #8
    a660:	orr	r1, r1, r7, lsl #16
    a664:	ubfx	r1, r1, #12, #6
    a668:	ldrb	r1, [r0, r1]
    a66c:	strb	r1, [r2, #3]
    a670:	sub	r1, r3, #4
    a674:	cmp	r1, #1
    a678:	blt	a710 <rb_sha512_crypt_r+0x8b0>
    a67c:	ldrb	r1, [r0, r7, lsr #2]
    a680:	add	r7, r2, #5
    a684:	strb	r1, [r2, #4]
    a688:	sub	r1, r3, #5
    a68c:	cmp	r1, #1
    a690:	bge	a71c <rb_sha512_crypt_r+0x8bc>
    a694:	b	b394 <rb_sha512_crypt_r+0x1534>
    a698:	mov	r0, #0
    a69c:	str	r0, [fp, #-988]	; 0xfffffc24
    a6a0:	movw	r0, #5000	; 0x1388
    a6a4:	str	r0, [fp, #-948]	; 0xfffffc4c
    a6a8:	b	9f58 <rb_sha512_crypt_r+0xf8>
    a6ac:	add	r7, r2, #2
    a6b0:	cmp	r1, #1
    a6b4:	bge	a71c <rb_sha512_crypt_r+0x8bc>
    a6b8:	b	b394 <rb_sha512_crypt_r+0x1534>
    a6bc:	add	r7, r2, #3
    a6c0:	cmp	r1, #1
    a6c4:	bge	a71c <rb_sha512_crypt_r+0x8bc>
    a6c8:	b	b394 <rb_sha512_crypt_r+0x1534>
    a6cc:	nop	{0}
    a6d0:	.word	0xf3bcc908
    a6d4:	.word	0x6a09e667
    a6d8:	.word	0x84caa73b
    a6dc:	.word	0xbb67ae85
    a6e0:	.word	0xfe94f82b
    a6e4:	.word	0x3c6ef372
    a6e8:	.word	0x5f1d36f1
    a6ec:	.word	0xa54ff53a
    a6f0:	.word	0xade682d1
    a6f4:	.word	0x510e527f
    a6f8:	.word	0x2b3e6c1f
    a6fc:	.word	0x9b05688c
    a700:	.word	0xfb41bd6b
    a704:	.word	0x1f83d9ab
    a708:	.word	0x137e2179
    a70c:	.word	0x5be0cd19
    a710:	add	r7, r2, #4
    a714:	cmp	r1, #1
    a718:	blt	b394 <rb_sha512_crypt_r+0x1534>
    a71c:	ldrb	r4, [fp, #-167]	; 0xffffff59
    a720:	ldrb	r6, [fp, #-146]	; 0xffffff6e
    a724:	ldrb	r5, [fp, #-125]	; 0xffffff83
    a728:	mov	r3, r7
    a72c:	and	r2, r4, #63	; 0x3f
    a730:	ldrb	r2, [r0, r2]
    a734:	strb	r2, [r3], #1
    a738:	sub	r2, r1, #1
    a73c:	cmp	r2, #0
    a740:	ble	a790 <rb_sha512_crypt_r+0x930>
    a744:	orr	r2, r4, r5, lsl #8
    a748:	ubfx	r2, r2, #6, #6
    a74c:	ldrb	r2, [r0, r2]
    a750:	strb	r2, [r7, #1]
    a754:	sub	r2, r1, #2
    a758:	cmp	r2, #1
    a75c:	blt	a894 <rb_sha512_crypt_r+0xa34>
    a760:	lsl	r2, r5, #8
    a764:	orr	r2, r2, r6, lsl #16
    a768:	ubfx	r2, r2, #12, #6
    a76c:	ldrb	r2, [r0, r2]
    a770:	strb	r2, [r7, #2]
    a774:	sub	r2, r1, #3
    a778:	cmp	r2, #1
    a77c:	blt	a8a4 <rb_sha512_crypt_r+0xa44>
    a780:	ldrb	r2, [r0, r6, lsr #2]
    a784:	add	r3, r7, #4
    a788:	strb	r2, [r7, #3]
    a78c:	sub	r2, r1, #4
    a790:	cmp	r2, #1
    a794:	blt	b394 <rb_sha512_crypt_r+0x1534>
    a798:	ldrb	r4, [fp, #-145]	; 0xffffff6f
    a79c:	ldrb	r5, [fp, #-166]	; 0xffffff5a
    a7a0:	ldrb	r6, [fp, #-124]	; 0xffffff84
    a7a4:	mov	r7, r3
    a7a8:	and	r1, r4, #63	; 0x3f
    a7ac:	ldrb	r1, [r0, r1]
    a7b0:	strb	r1, [r7], #1
    a7b4:	sub	r1, r2, #1
    a7b8:	cmp	r1, #0
    a7bc:	ble	a80c <rb_sha512_crypt_r+0x9ac>
    a7c0:	orr	r1, r4, r5, lsl #8
    a7c4:	ubfx	r1, r1, #6, #6
    a7c8:	ldrb	r1, [r0, r1]
    a7cc:	strb	r1, [r3, #1]
    a7d0:	sub	r1, r2, #2
    a7d4:	cmp	r1, #1
    a7d8:	blt	a8b4 <rb_sha512_crypt_r+0xa54>
    a7dc:	lsl	r1, r5, #8
    a7e0:	orr	r1, r1, r6, lsl #16
    a7e4:	ubfx	r1, r1, #12, #6
    a7e8:	ldrb	r1, [r0, r1]
    a7ec:	strb	r1, [r3, #2]
    a7f0:	sub	r1, r2, #3
    a7f4:	cmp	r1, #1
    a7f8:	blt	a8c4 <rb_sha512_crypt_r+0xa64>
    a7fc:	ldrb	r1, [r0, r6, lsr #2]
    a800:	add	r7, r3, #4
    a804:	strb	r1, [r3, #3]
    a808:	sub	r1, r2, #4
    a80c:	cmp	r1, #1
    a810:	blt	b394 <rb_sha512_crypt_r+0x1534>
    a814:	ldrb	r4, [fp, #-123]	; 0xffffff85
    a818:	ldrb	r6, [fp, #-165]	; 0xffffff5b
    a81c:	ldrb	r5, [fp, #-144]	; 0xffffff70
    a820:	mov	r3, r7
    a824:	and	r2, r4, #63	; 0x3f
    a828:	ldrb	r2, [r0, r2]
    a82c:	strb	r2, [r3], #1
    a830:	sub	r2, r1, #1
    a834:	cmp	r2, #0
    a838:	ble	a8e8 <rb_sha512_crypt_r+0xa88>
    a83c:	orr	r2, r4, r5, lsl #8
    a840:	ubfx	r2, r2, #6, #6
    a844:	ldrb	r2, [r0, r2]
    a848:	strb	r2, [r7, #1]
    a84c:	sub	r2, r1, #2
    a850:	cmp	r2, #1
    a854:	blt	a8d4 <rb_sha512_crypt_r+0xa74>
    a858:	lsl	r2, r5, #8
    a85c:	orr	r2, r2, r6, lsl #16
    a860:	ubfx	r2, r2, #12, #6
    a864:	ldrb	r2, [r0, r2]
    a868:	strb	r2, [r7, #2]
    a86c:	sub	r2, r1, #3
    a870:	cmp	r2, #1
    a874:	blt	a8e4 <rb_sha512_crypt_r+0xa84>
    a878:	ldrb	r2, [r0, r6, lsr #2]
    a87c:	add	r3, r7, #4
    a880:	strb	r2, [r7, #3]
    a884:	sub	r2, r1, #4
    a888:	cmp	r2, #1
    a88c:	bge	a8f0 <rb_sha512_crypt_r+0xa90>
    a890:	b	b394 <rb_sha512_crypt_r+0x1534>
    a894:	add	r3, r7, #2
    a898:	cmp	r2, #1
    a89c:	bge	a798 <rb_sha512_crypt_r+0x938>
    a8a0:	b	b394 <rb_sha512_crypt_r+0x1534>
    a8a4:	add	r3, r7, #3
    a8a8:	cmp	r2, #1
    a8ac:	bge	a798 <rb_sha512_crypt_r+0x938>
    a8b0:	b	b394 <rb_sha512_crypt_r+0x1534>
    a8b4:	add	r7, r3, #2
    a8b8:	cmp	r1, #1
    a8bc:	bge	a814 <rb_sha512_crypt_r+0x9b4>
    a8c0:	b	b394 <rb_sha512_crypt_r+0x1534>
    a8c4:	add	r7, r3, #3
    a8c8:	cmp	r1, #1
    a8cc:	bge	a814 <rb_sha512_crypt_r+0x9b4>
    a8d0:	b	b394 <rb_sha512_crypt_r+0x1534>
    a8d4:	add	r3, r7, #2
    a8d8:	cmp	r2, #1
    a8dc:	bge	a8f0 <rb_sha512_crypt_r+0xa90>
    a8e0:	b	b394 <rb_sha512_crypt_r+0x1534>
    a8e4:	add	r3, r7, #3
    a8e8:	cmp	r2, #1
    a8ec:	blt	b394 <rb_sha512_crypt_r+0x1534>
    a8f0:	ldrb	r4, [fp, #-164]	; 0xffffff5c
    a8f4:	ldrb	r6, [fp, #-143]	; 0xffffff71
    a8f8:	ldrb	r5, [fp, #-122]	; 0xffffff86
    a8fc:	mov	r7, r3
    a900:	and	r1, r4, #63	; 0x3f
    a904:	ldrb	r1, [r0, r1]
    a908:	strb	r1, [r7], #1
    a90c:	sub	r1, r2, #1
    a910:	cmp	r1, #0
    a914:	ble	a984 <rb_sha512_crypt_r+0xb24>
    a918:	orr	r1, r4, r5, lsl #8
    a91c:	ubfx	r1, r1, #6, #6
    a920:	ldrb	r1, [r0, r1]
    a924:	strb	r1, [r3, #1]
    a928:	sub	r1, r2, #2
    a92c:	cmp	r1, #1
    a930:	blt	a970 <rb_sha512_crypt_r+0xb10>
    a934:	lsl	r1, r5, #8
    a938:	orr	r1, r1, r6, lsl #16
    a93c:	ubfx	r1, r1, #12, #6
    a940:	ldrb	r1, [r0, r1]
    a944:	strb	r1, [r3, #2]
    a948:	sub	r1, r2, #3
    a94c:	cmp	r1, #1
    a950:	blt	a980 <rb_sha512_crypt_r+0xb20>
    a954:	ldrb	r1, [r0, r6, lsr #2]
    a958:	add	r7, r3, #4
    a95c:	strb	r1, [r3, #3]
    a960:	sub	r1, r2, #4
    a964:	cmp	r1, #1
    a968:	bge	a98c <rb_sha512_crypt_r+0xb2c>
    a96c:	b	b394 <rb_sha512_crypt_r+0x1534>
    a970:	add	r7, r3, #2
    a974:	cmp	r1, #1
    a978:	bge	a98c <rb_sha512_crypt_r+0xb2c>
    a97c:	b	b394 <rb_sha512_crypt_r+0x1534>
    a980:	add	r7, r3, #3
    a984:	cmp	r1, #1
    a988:	blt	b394 <rb_sha512_crypt_r+0x1534>
    a98c:	ldrb	r4, [fp, #-142]	; 0xffffff72
    a990:	ldrb	r5, [fp, #-163]	; 0xffffff5d
    a994:	ldrb	r6, [fp, #-121]	; 0xffffff87
    a998:	mov	r3, r7
    a99c:	and	r2, r4, #63	; 0x3f
    a9a0:	ldrb	r2, [r0, r2]
    a9a4:	strb	r2, [r3], #1
    a9a8:	sub	r2, r1, #1
    a9ac:	cmp	r2, #0
    a9b0:	ble	aa20 <rb_sha512_crypt_r+0xbc0>
    a9b4:	orr	r2, r4, r5, lsl #8
    a9b8:	ubfx	r2, r2, #6, #6
    a9bc:	ldrb	r2, [r0, r2]
    a9c0:	strb	r2, [r7, #1]
    a9c4:	sub	r2, r1, #2
    a9c8:	cmp	r2, #1
    a9cc:	blt	aa0c <rb_sha512_crypt_r+0xbac>
    a9d0:	lsl	r2, r5, #8
    a9d4:	orr	r2, r2, r6, lsl #16
    a9d8:	ubfx	r2, r2, #12, #6
    a9dc:	ldrb	r2, [r0, r2]
    a9e0:	strb	r2, [r7, #2]
    a9e4:	sub	r2, r1, #3
    a9e8:	cmp	r2, #1
    a9ec:	blt	aa1c <rb_sha512_crypt_r+0xbbc>
    a9f0:	ldrb	r2, [r0, r6, lsr #2]
    a9f4:	add	r3, r7, #4
    a9f8:	strb	r2, [r7, #3]
    a9fc:	sub	r2, r1, #4
    aa00:	cmp	r2, #1
    aa04:	bge	aa28 <rb_sha512_crypt_r+0xbc8>
    aa08:	b	b394 <rb_sha512_crypt_r+0x1534>
    aa0c:	add	r3, r7, #2
    aa10:	cmp	r2, #1
    aa14:	bge	aa28 <rb_sha512_crypt_r+0xbc8>
    aa18:	b	b394 <rb_sha512_crypt_r+0x1534>
    aa1c:	add	r3, r7, #3
    aa20:	cmp	r2, #1
    aa24:	blt	b394 <rb_sha512_crypt_r+0x1534>
    aa28:	ldrb	r4, [fp, #-120]	; 0xffffff88
    aa2c:	ldrb	r6, [fp, #-162]	; 0xffffff5e
    aa30:	ldrb	r5, [fp, #-141]	; 0xffffff73
    aa34:	mov	r7, r3
    aa38:	and	r1, r4, #63	; 0x3f
    aa3c:	ldrb	r1, [r0, r1]
    aa40:	strb	r1, [r7], #1
    aa44:	sub	r1, r2, #1
    aa48:	cmp	r1, #0
    aa4c:	ble	aabc <rb_sha512_crypt_r+0xc5c>
    aa50:	orr	r1, r4, r5, lsl #8
    aa54:	ubfx	r1, r1, #6, #6
    aa58:	ldrb	r1, [r0, r1]
    aa5c:	strb	r1, [r3, #1]
    aa60:	sub	r1, r2, #2
    aa64:	cmp	r1, #1
    aa68:	blt	aaa8 <rb_sha512_crypt_r+0xc48>
    aa6c:	lsl	r1, r5, #8
    aa70:	orr	r1, r1, r6, lsl #16
    aa74:	ubfx	r1, r1, #12, #6
    aa78:	ldrb	r1, [r0, r1]
    aa7c:	strb	r1, [r3, #2]
    aa80:	sub	r1, r2, #3
    aa84:	cmp	r1, #1
    aa88:	blt	aab8 <rb_sha512_crypt_r+0xc58>
    aa8c:	ldrb	r1, [r0, r6, lsr #2]
    aa90:	add	r7, r3, #4
    aa94:	strb	r1, [r3, #3]
    aa98:	sub	r1, r2, #4
    aa9c:	cmp	r1, #1
    aaa0:	bge	aac4 <rb_sha512_crypt_r+0xc64>
    aaa4:	b	b394 <rb_sha512_crypt_r+0x1534>
    aaa8:	add	r7, r3, #2
    aaac:	cmp	r1, #1
    aab0:	bge	aac4 <rb_sha512_crypt_r+0xc64>
    aab4:	b	b394 <rb_sha512_crypt_r+0x1534>
    aab8:	add	r7, r3, #3
    aabc:	cmp	r1, #1
    aac0:	blt	b394 <rb_sha512_crypt_r+0x1534>
    aac4:	ldrb	r4, [fp, #-161]	; 0xffffff5f
    aac8:	ldrb	r6, [fp, #-140]	; 0xffffff74
    aacc:	ldrb	r5, [fp, #-119]	; 0xffffff89
    aad0:	mov	r3, r7
    aad4:	and	r2, r4, #63	; 0x3f
    aad8:	ldrb	r2, [r0, r2]
    aadc:	strb	r2, [r3], #1
    aae0:	sub	r2, r1, #1
    aae4:	cmp	r2, #0
    aae8:	ble	ab58 <rb_sha512_crypt_r+0xcf8>
    aaec:	orr	r2, r4, r5, lsl #8
    aaf0:	ubfx	r2, r2, #6, #6
    aaf4:	ldrb	r2, [r0, r2]
    aaf8:	strb	r2, [r7, #1]
    aafc:	sub	r2, r1, #2
    ab00:	cmp	r2, #1
    ab04:	blt	ab44 <rb_sha512_crypt_r+0xce4>
    ab08:	lsl	r2, r5, #8
    ab0c:	orr	r2, r2, r6, lsl #16
    ab10:	ubfx	r2, r2, #12, #6
    ab14:	ldrb	r2, [r0, r2]
    ab18:	strb	r2, [r7, #2]
    ab1c:	sub	r2, r1, #3
    ab20:	cmp	r2, #1
    ab24:	blt	ab54 <rb_sha512_crypt_r+0xcf4>
    ab28:	ldrb	r2, [r0, r6, lsr #2]
    ab2c:	add	r3, r7, #4
    ab30:	strb	r2, [r7, #3]
    ab34:	sub	r2, r1, #4
    ab38:	cmp	r2, #1
    ab3c:	bge	ab60 <rb_sha512_crypt_r+0xd00>
    ab40:	b	b394 <rb_sha512_crypt_r+0x1534>
    ab44:	add	r3, r7, #2
    ab48:	cmp	r2, #1
    ab4c:	bge	ab60 <rb_sha512_crypt_r+0xd00>
    ab50:	b	b394 <rb_sha512_crypt_r+0x1534>
    ab54:	add	r3, r7, #3
    ab58:	cmp	r2, #1
    ab5c:	blt	b394 <rb_sha512_crypt_r+0x1534>
    ab60:	ldrb	r4, [fp, #-139]	; 0xffffff75
    ab64:	ldrb	r5, [fp, #-160]	; 0xffffff60
    ab68:	ldrb	r6, [fp, #-118]	; 0xffffff8a
    ab6c:	mov	r7, r3
    ab70:	and	r1, r4, #63	; 0x3f
    ab74:	ldrb	r1, [r0, r1]
    ab78:	strb	r1, [r7], #1
    ab7c:	sub	r1, r2, #1
    ab80:	cmp	r1, #0
    ab84:	ble	abf4 <rb_sha512_crypt_r+0xd94>
    ab88:	orr	r1, r4, r5, lsl #8
    ab8c:	ubfx	r1, r1, #6, #6
    ab90:	ldrb	r1, [r0, r1]
    ab94:	strb	r1, [r3, #1]
    ab98:	sub	r1, r2, #2
    ab9c:	cmp	r1, #1
    aba0:	blt	abe0 <rb_sha512_crypt_r+0xd80>
    aba4:	lsl	r1, r5, #8
    aba8:	orr	r1, r1, r6, lsl #16
    abac:	ubfx	r1, r1, #12, #6
    abb0:	ldrb	r1, [r0, r1]
    abb4:	strb	r1, [r3, #2]
    abb8:	sub	r1, r2, #3
    abbc:	cmp	r1, #1
    abc0:	blt	abf0 <rb_sha512_crypt_r+0xd90>
    abc4:	ldrb	r1, [r0, r6, lsr #2]
    abc8:	add	r7, r3, #4
    abcc:	strb	r1, [r3, #3]
    abd0:	sub	r1, r2, #4
    abd4:	cmp	r1, #1
    abd8:	bge	abfc <rb_sha512_crypt_r+0xd9c>
    abdc:	b	b394 <rb_sha512_crypt_r+0x1534>
    abe0:	add	r7, r3, #2
    abe4:	cmp	r1, #1
    abe8:	bge	abfc <rb_sha512_crypt_r+0xd9c>
    abec:	b	b394 <rb_sha512_crypt_r+0x1534>
    abf0:	add	r7, r3, #3
    abf4:	cmp	r1, #1
    abf8:	blt	b394 <rb_sha512_crypt_r+0x1534>
    abfc:	ldrb	r4, [fp, #-117]	; 0xffffff8b
    ac00:	ldrb	r6, [fp, #-159]	; 0xffffff61
    ac04:	ldrb	r5, [fp, #-138]	; 0xffffff76
    ac08:	mov	r3, r7
    ac0c:	and	r2, r4, #63	; 0x3f
    ac10:	ldrb	r2, [r0, r2]
    ac14:	strb	r2, [r3], #1
    ac18:	sub	r2, r1, #1
    ac1c:	cmp	r2, #0
    ac20:	ble	ac90 <rb_sha512_crypt_r+0xe30>
    ac24:	orr	r2, r4, r5, lsl #8
    ac28:	ubfx	r2, r2, #6, #6
    ac2c:	ldrb	r2, [r0, r2]
    ac30:	strb	r2, [r7, #1]
    ac34:	sub	r2, r1, #2
    ac38:	cmp	r2, #1
    ac3c:	blt	ac7c <rb_sha512_crypt_r+0xe1c>
    ac40:	lsl	r2, r5, #8
    ac44:	orr	r2, r2, r6, lsl #16
    ac48:	ubfx	r2, r2, #12, #6
    ac4c:	ldrb	r2, [r0, r2]
    ac50:	strb	r2, [r7, #2]
    ac54:	sub	r2, r1, #3
    ac58:	cmp	r2, #1
    ac5c:	blt	ac8c <rb_sha512_crypt_r+0xe2c>
    ac60:	ldrb	r2, [r0, r6, lsr #2]
    ac64:	add	r3, r7, #4
    ac68:	strb	r2, [r7, #3]
    ac6c:	sub	r2, r1, #4
    ac70:	cmp	r2, #1
    ac74:	bge	ac98 <rb_sha512_crypt_r+0xe38>
    ac78:	b	b394 <rb_sha512_crypt_r+0x1534>
    ac7c:	add	r3, r7, #2
    ac80:	cmp	r2, #1
    ac84:	bge	ac98 <rb_sha512_crypt_r+0xe38>
    ac88:	b	b394 <rb_sha512_crypt_r+0x1534>
    ac8c:	add	r3, r7, #3
    ac90:	cmp	r2, #1
    ac94:	blt	b394 <rb_sha512_crypt_r+0x1534>
    ac98:	ldrb	r4, [fp, #-158]	; 0xffffff62
    ac9c:	ldrb	r6, [fp, #-137]	; 0xffffff77
    aca0:	ldrb	r5, [fp, #-116]	; 0xffffff8c
    aca4:	mov	r7, r3
    aca8:	and	r1, r4, #63	; 0x3f
    acac:	ldrb	r1, [r0, r1]
    acb0:	strb	r1, [r7], #1
    acb4:	sub	r1, r2, #1
    acb8:	cmp	r1, #0
    acbc:	ble	ad2c <rb_sha512_crypt_r+0xecc>
    acc0:	orr	r1, r4, r5, lsl #8
    acc4:	ubfx	r1, r1, #6, #6
    acc8:	ldrb	r1, [r0, r1]
    accc:	strb	r1, [r3, #1]
    acd0:	sub	r1, r2, #2
    acd4:	cmp	r1, #1
    acd8:	blt	ad18 <rb_sha512_crypt_r+0xeb8>
    acdc:	lsl	r1, r5, #8
    ace0:	orr	r1, r1, r6, lsl #16
    ace4:	ubfx	r1, r1, #12, #6
    ace8:	ldrb	r1, [r0, r1]
    acec:	strb	r1, [r3, #2]
    acf0:	sub	r1, r2, #3
    acf4:	cmp	r1, #1
    acf8:	blt	ad28 <rb_sha512_crypt_r+0xec8>
    acfc:	ldrb	r1, [r0, r6, lsr #2]
    ad00:	add	r7, r3, #4
    ad04:	strb	r1, [r3, #3]
    ad08:	sub	r1, r2, #4
    ad0c:	cmp	r1, #1
    ad10:	bge	ad34 <rb_sha512_crypt_r+0xed4>
    ad14:	b	b394 <rb_sha512_crypt_r+0x1534>
    ad18:	add	r7, r3, #2
    ad1c:	cmp	r1, #1
    ad20:	bge	ad34 <rb_sha512_crypt_r+0xed4>
    ad24:	b	b394 <rb_sha512_crypt_r+0x1534>
    ad28:	add	r7, r3, #3
    ad2c:	cmp	r1, #1
    ad30:	blt	b394 <rb_sha512_crypt_r+0x1534>
    ad34:	ldrb	r4, [fp, #-136]	; 0xffffff78
    ad38:	ldrb	r5, [fp, #-157]	; 0xffffff63
    ad3c:	ldrb	r6, [fp, #-115]	; 0xffffff8d
    ad40:	mov	r3, r7
    ad44:	and	r2, r4, #63	; 0x3f
    ad48:	ldrb	r2, [r0, r2]
    ad4c:	strb	r2, [r3], #1
    ad50:	sub	r2, r1, #1
    ad54:	cmp	r2, #0
    ad58:	ble	adc8 <rb_sha512_crypt_r+0xf68>
    ad5c:	orr	r2, r4, r5, lsl #8
    ad60:	ubfx	r2, r2, #6, #6
    ad64:	ldrb	r2, [r0, r2]
    ad68:	strb	r2, [r7, #1]
    ad6c:	sub	r2, r1, #2
    ad70:	cmp	r2, #1
    ad74:	blt	adb4 <rb_sha512_crypt_r+0xf54>
    ad78:	lsl	r2, r5, #8
    ad7c:	orr	r2, r2, r6, lsl #16
    ad80:	ubfx	r2, r2, #12, #6
    ad84:	ldrb	r2, [r0, r2]
    ad88:	strb	r2, [r7, #2]
    ad8c:	sub	r2, r1, #3
    ad90:	cmp	r2, #1
    ad94:	blt	adc4 <rb_sha512_crypt_r+0xf64>
    ad98:	ldrb	r2, [r0, r6, lsr #2]
    ad9c:	add	r3, r7, #4
    ada0:	strb	r2, [r7, #3]
    ada4:	sub	r2, r1, #4
    ada8:	cmp	r2, #1
    adac:	bge	add0 <rb_sha512_crypt_r+0xf70>
    adb0:	b	b394 <rb_sha512_crypt_r+0x1534>
    adb4:	add	r3, r7, #2
    adb8:	cmp	r2, #1
    adbc:	bge	add0 <rb_sha512_crypt_r+0xf70>
    adc0:	b	b394 <rb_sha512_crypt_r+0x1534>
    adc4:	add	r3, r7, #3
    adc8:	cmp	r2, #1
    adcc:	blt	b394 <rb_sha512_crypt_r+0x1534>
    add0:	ldrb	r4, [fp, #-114]	; 0xffffff8e
    add4:	ldrb	r6, [fp, #-156]	; 0xffffff64
    add8:	ldrb	r5, [fp, #-135]	; 0xffffff79
    addc:	mov	r7, r3
    ade0:	and	r1, r4, #63	; 0x3f
    ade4:	ldrb	r1, [r0, r1]
    ade8:	strb	r1, [r7], #1
    adec:	sub	r1, r2, #1
    adf0:	cmp	r1, #0
    adf4:	ble	ae6c <rb_sha512_crypt_r+0x100c>
    adf8:	orr	r1, r4, r5, lsl #8
    adfc:	ubfx	r1, r1, #6, #6
    ae00:	ldrb	r1, [r0, r1]
    ae04:	strb	r1, [r3, #1]
    ae08:	sub	r1, r2, #2
    ae0c:	cmp	r1, #1
    ae10:	blt	ae50 <rb_sha512_crypt_r+0xff0>
    ae14:	lsl	r1, r5, #8
    ae18:	orr	r1, r1, r6, lsl #16
    ae1c:	ubfx	r1, r1, #12, #6
    ae20:	ldrb	r1, [r0, r1]
    ae24:	strb	r1, [r3, #2]
    ae28:	sub	r1, r2, #3
    ae2c:	cmp	r1, #1
    ae30:	blt	ae68 <rb_sha512_crypt_r+0x1008>
    ae34:	ldrb	r1, [r0, r6, lsr #2]
    ae38:	add	r7, r3, #4
    ae3c:	strb	r1, [r3, #3]
    ae40:	sub	r1, r2, #4
    ae44:	cmp	r1, #1
    ae48:	bge	ae74 <rb_sha512_crypt_r+0x1014>
    ae4c:	b	b394 <rb_sha512_crypt_r+0x1534>
    ae50:	add	r7, r3, #2
    ae54:	cmp	r1, #1
    ae58:	bge	ae74 <rb_sha512_crypt_r+0x1014>
    ae5c:	b	b394 <rb_sha512_crypt_r+0x1534>
    ae60:	.word	0x0000fa04
    ae64:	.word	0x0000f9ec
    ae68:	add	r7, r3, #3
    ae6c:	cmp	r1, #1
    ae70:	blt	b394 <rb_sha512_crypt_r+0x1534>
    ae74:	ldrb	r4, [fp, #-155]	; 0xffffff65
    ae78:	ldrb	r6, [fp, #-134]	; 0xffffff7a
    ae7c:	ldrb	r5, [fp, #-113]	; 0xffffff8f
    ae80:	mov	r3, r7
    ae84:	and	r2, r4, #63	; 0x3f
    ae88:	ldrb	r2, [r0, r2]
    ae8c:	strb	r2, [r3], #1
    ae90:	sub	r2, r1, #1
    ae94:	cmp	r2, #0
    ae98:	ble	af0c <rb_sha512_crypt_r+0x10ac>
    ae9c:	orr	r2, r4, r5, lsl #8
    aea0:	ubfx	r2, r2, #6, #6
    aea4:	ldrb	r2, [r0, r2]
    aea8:	strb	r2, [r7, #1]
    aeac:	sub	r2, r1, #2
    aeb0:	cmp	r2, #1
    aeb4:	blt	aef4 <rb_sha512_crypt_r+0x1094>
    aeb8:	lsl	r2, r5, #8
    aebc:	orr	r2, r2, r6, lsl #16
    aec0:	ubfx	r2, r2, #12, #6
    aec4:	ldrb	r2, [r0, r2]
    aec8:	strb	r2, [r7, #2]
    aecc:	sub	r2, r1, #3
    aed0:	cmp	r2, #1
    aed4:	blt	af08 <rb_sha512_crypt_r+0x10a8>
    aed8:	ldrb	r2, [r0, r6, lsr #2]
    aedc:	add	r3, r7, #4
    aee0:	strb	r2, [r7, #3]
    aee4:	sub	r2, r1, #4
    aee8:	cmp	r2, #1
    aeec:	bge	af14 <rb_sha512_crypt_r+0x10b4>
    aef0:	b	b394 <rb_sha512_crypt_r+0x1534>
    aef4:	add	r3, r7, #2
    aef8:	cmp	r2, #1
    aefc:	bge	af14 <rb_sha512_crypt_r+0x10b4>
    af00:	b	b394 <rb_sha512_crypt_r+0x1534>
    af04:	.word	0x0000f4a2
    af08:	add	r3, r7, #3
    af0c:	cmp	r2, #1
    af10:	blt	b394 <rb_sha512_crypt_r+0x1534>
    af14:	ldrb	r4, [fp, #-133]	; 0xffffff7b
    af18:	ldrb	r5, [fp, #-154]	; 0xffffff66
    af1c:	ldrb	r6, [fp, #-112]	; 0xffffff90
    af20:	mov	r7, r3
    af24:	and	r1, r4, #63	; 0x3f
    af28:	ldrb	r1, [r0, r1]
    af2c:	strb	r1, [r7], #1
    af30:	sub	r1, r2, #1
    af34:	cmp	r1, #0
    af38:	ble	afa8 <rb_sha512_crypt_r+0x1148>
    af3c:	orr	r1, r4, r5, lsl #8
    af40:	ubfx	r1, r1, #6, #6
    af44:	ldrb	r1, [r0, r1]
    af48:	strb	r1, [r3, #1]
    af4c:	sub	r1, r2, #2
    af50:	cmp	r1, #1
    af54:	blt	af94 <rb_sha512_crypt_r+0x1134>
    af58:	lsl	r1, r5, #8
    af5c:	orr	r1, r1, r6, lsl #16
    af60:	ubfx	r1, r1, #12, #6
    af64:	ldrb	r1, [r0, r1]
    af68:	strb	r1, [r3, #2]
    af6c:	sub	r1, r2, #3
    af70:	cmp	r1, #1
    af74:	blt	afa4 <rb_sha512_crypt_r+0x1144>
    af78:	ldrb	r1, [r0, r6, lsr #2]
    af7c:	add	r7, r3, #4
    af80:	strb	r1, [r3, #3]
    af84:	sub	r1, r2, #4
    af88:	cmp	r1, #1
    af8c:	bge	afb0 <rb_sha512_crypt_r+0x1150>
    af90:	b	b394 <rb_sha512_crypt_r+0x1534>
    af94:	add	r7, r3, #2
    af98:	cmp	r1, #1
    af9c:	bge	afb0 <rb_sha512_crypt_r+0x1150>
    afa0:	b	b394 <rb_sha512_crypt_r+0x1534>
    afa4:	add	r7, r3, #3
    afa8:	cmp	r1, #1
    afac:	blt	b394 <rb_sha512_crypt_r+0x1534>
    afb0:	ldrb	r4, [fp, #-111]	; 0xffffff91
    afb4:	ldrb	r6, [fp, #-153]	; 0xffffff67
    afb8:	ldrb	r5, [fp, #-132]	; 0xffffff7c
    afbc:	mov	r3, r7
    afc0:	and	r2, r4, #63	; 0x3f
    afc4:	ldrb	r2, [r0, r2]
    afc8:	strb	r2, [r3], #1
    afcc:	sub	r2, r1, #1
    afd0:	cmp	r2, #0
    afd4:	ble	b044 <rb_sha512_crypt_r+0x11e4>
    afd8:	orr	r2, r4, r5, lsl #8
    afdc:	ubfx	r2, r2, #6, #6
    afe0:	ldrb	r2, [r0, r2]
    afe4:	strb	r2, [r7, #1]
    afe8:	sub	r2, r1, #2
    afec:	cmp	r2, #1
    aff0:	blt	b030 <rb_sha512_crypt_r+0x11d0>
    aff4:	lsl	r2, r5, #8
    aff8:	orr	r2, r2, r6, lsl #16
    affc:	ubfx	r2, r2, #12, #6
    b000:	ldrb	r2, [r0, r2]
    b004:	strb	r2, [r7, #2]
    b008:	sub	r2, r1, #3
    b00c:	cmp	r2, #1
    b010:	blt	b040 <rb_sha512_crypt_r+0x11e0>
    b014:	ldrb	r2, [r0, r6, lsr #2]
    b018:	add	r3, r7, #4
    b01c:	strb	r2, [r7, #3]
    b020:	sub	r2, r1, #4
    b024:	cmp	r2, #1
    b028:	bge	b04c <rb_sha512_crypt_r+0x11ec>
    b02c:	b	b394 <rb_sha512_crypt_r+0x1534>
    b030:	add	r3, r7, #2
    b034:	cmp	r2, #1
    b038:	bge	b04c <rb_sha512_crypt_r+0x11ec>
    b03c:	b	b394 <rb_sha512_crypt_r+0x1534>
    b040:	add	r3, r7, #3
    b044:	cmp	r2, #1
    b048:	blt	b394 <rb_sha512_crypt_r+0x1534>
    b04c:	ldrb	r4, [fp, #-152]	; 0xffffff68
    b050:	ldrb	r6, [fp, #-131]	; 0xffffff7d
    b054:	ldrb	r5, [fp, #-110]	; 0xffffff92
    b058:	mov	r7, r3
    b05c:	and	r1, r4, #63	; 0x3f
    b060:	ldrb	r1, [r0, r1]
    b064:	strb	r1, [r7], #1
    b068:	sub	r1, r2, #1
    b06c:	cmp	r1, #0
    b070:	ble	b0e0 <rb_sha512_crypt_r+0x1280>
    b074:	orr	r1, r4, r5, lsl #8
    b078:	ubfx	r1, r1, #6, #6
    b07c:	ldrb	r1, [r0, r1]
    b080:	strb	r1, [r3, #1]
    b084:	sub	r1, r2, #2
    b088:	cmp	r1, #1
    b08c:	blt	b0cc <rb_sha512_crypt_r+0x126c>
    b090:	lsl	r1, r5, #8
    b094:	orr	r1, r1, r6, lsl #16
    b098:	ubfx	r1, r1, #12, #6
    b09c:	ldrb	r1, [r0, r1]
    b0a0:	strb	r1, [r3, #2]
    b0a4:	sub	r1, r2, #3
    b0a8:	cmp	r1, #1
    b0ac:	blt	b0dc <rb_sha512_crypt_r+0x127c>
    b0b0:	ldrb	r1, [r0, r6, lsr #2]
    b0b4:	add	r7, r3, #4
    b0b8:	strb	r1, [r3, #3]
    b0bc:	sub	r1, r2, #4
    b0c0:	cmp	r1, #1
    b0c4:	bge	b0e8 <rb_sha512_crypt_r+0x1288>
    b0c8:	b	b394 <rb_sha512_crypt_r+0x1534>
    b0cc:	add	r7, r3, #2
    b0d0:	cmp	r1, #1
    b0d4:	bge	b0e8 <rb_sha512_crypt_r+0x1288>
    b0d8:	b	b394 <rb_sha512_crypt_r+0x1534>
    b0dc:	add	r7, r3, #3
    b0e0:	cmp	r1, #1
    b0e4:	blt	b394 <rb_sha512_crypt_r+0x1534>
    b0e8:	ldrb	r4, [fp, #-130]	; 0xffffff7e
    b0ec:	ldrb	r5, [fp, #-151]	; 0xffffff69
    b0f0:	ldrb	r6, [fp, #-109]	; 0xffffff93
    b0f4:	mov	r3, r7
    b0f8:	and	r2, r4, #63	; 0x3f
    b0fc:	ldrb	r2, [r0, r2]
    b100:	strb	r2, [r3], #1
    b104:	sub	r2, r1, #1
    b108:	cmp	r2, #0
    b10c:	ble	b188 <rb_sha512_crypt_r+0x1328>
    b110:	orr	r2, r4, r5, lsl #8
    b114:	ubfx	r2, r2, #6, #6
    b118:	ldrb	r2, [r0, r2]
    b11c:	strb	r2, [r7, #1]
    b120:	sub	r2, r1, #2
    b124:	cmp	r2, #1
    b128:	blt	b16c <rb_sha512_crypt_r+0x130c>
    b12c:	lsl	r2, r5, #8
    b130:	orr	r2, r2, r6, lsl #16
    b134:	ubfx	r2, r2, #12, #6
    b138:	ldrb	r2, [r0, r2]
    b13c:	strb	r2, [r7, #2]
    b140:	sub	r2, r1, #3
    b144:	cmp	r2, #1
    b148:	blt	b180 <rb_sha512_crypt_r+0x1320>
    b14c:	ldrb	r2, [r0, r6, lsr #2]
    b150:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b154:	add	r3, r7, #4
    b158:	strb	r2, [r7, #3]
    b15c:	sub	r2, r1, #4
    b160:	cmp	r2, #1
    b164:	bge	b190 <rb_sha512_crypt_r+0x1330>
    b168:	b	b394 <rb_sha512_crypt_r+0x1534>
    b16c:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b170:	add	r3, r7, #2
    b174:	cmp	r2, #1
    b178:	bge	b190 <rb_sha512_crypt_r+0x1330>
    b17c:	b	b394 <rb_sha512_crypt_r+0x1534>
    b180:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b184:	add	r3, r7, #3
    b188:	cmp	r2, #1
    b18c:	blt	b394 <rb_sha512_crypt_r+0x1534>
    b190:	ldrb	r4, [fp, #-108]	; 0xffffff94
    b194:	ldrb	r6, [fp, #-150]	; 0xffffff6a
    b198:	ldrb	r5, [fp, #-129]	; 0xffffff7f
    b19c:	mov	r7, r3
    b1a0:	and	r1, r4, #63	; 0x3f
    b1a4:	ldrb	r1, [r0, r1]
    b1a8:	strb	r1, [r7], #1
    b1ac:	sub	r1, r2, #1
    b1b0:	cmp	r1, #0
    b1b4:	ble	b230 <rb_sha512_crypt_r+0x13d0>
    b1b8:	orr	r1, r4, r5, lsl #8
    b1bc:	ubfx	r1, r1, #6, #6
    b1c0:	ldrb	r1, [r0, r1]
    b1c4:	strb	r1, [r3, #1]
    b1c8:	sub	r1, r2, #2
    b1cc:	cmp	r1, #1
    b1d0:	blt	b214 <rb_sha512_crypt_r+0x13b4>
    b1d4:	lsl	r1, r5, #8
    b1d8:	orr	r1, r1, r6, lsl #16
    b1dc:	ubfx	r1, r1, #12, #6
    b1e0:	ldrb	r1, [r0, r1]
    b1e4:	strb	r1, [r3, #2]
    b1e8:	sub	r1, r2, #3
    b1ec:	cmp	r1, #1
    b1f0:	blt	b228 <rb_sha512_crypt_r+0x13c8>
    b1f4:	ldrb	r1, [r0, r6, lsr #2]
    b1f8:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b1fc:	add	r7, r3, #4
    b200:	strb	r1, [r3, #3]
    b204:	sub	r1, r2, #4
    b208:	cmp	r1, #1
    b20c:	bge	b238 <rb_sha512_crypt_r+0x13d8>
    b210:	b	b394 <rb_sha512_crypt_r+0x1534>
    b214:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b218:	add	r7, r3, #2
    b21c:	cmp	r1, #1
    b220:	bge	b238 <rb_sha512_crypt_r+0x13d8>
    b224:	b	b394 <rb_sha512_crypt_r+0x1534>
    b228:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b22c:	add	r7, r3, #3
    b230:	cmp	r1, #1
    b234:	blt	b394 <rb_sha512_crypt_r+0x1534>
    b238:	ldrb	r4, [fp, #-149]	; 0xffffff6b
    b23c:	ldrb	r6, [fp, #-128]	; 0xffffff80
    b240:	ldrb	r5, [fp, #-107]	; 0xffffff95
    b244:	mov	r3, r7
    b248:	and	r2, r4, #63	; 0x3f
    b24c:	ldrb	r2, [r0, r2]
    b250:	strb	r2, [r3], #1
    b254:	sub	r2, r1, #1
    b258:	cmp	r2, #0
    b25c:	ble	b2bc <rb_sha512_crypt_r+0x145c>
    b260:	orr	r2, r4, r5, lsl #8
    b264:	ubfx	r2, r2, #6, #6
    b268:	ldrb	r2, [r0, r2]
    b26c:	strb	r2, [r7, #1]
    b270:	sub	r2, r1, #2
    b274:	cmp	r2, #1
    b278:	blt	b2b0 <rb_sha512_crypt_r+0x1450>
    b27c:	lsl	r2, r5, #8
    b280:	orr	r2, r2, r6, lsl #16
    b284:	ubfx	r2, r2, #12, #6
    b288:	ldrb	r2, [r0, r2]
    b28c:	strb	r2, [r7, #2]
    b290:	sub	r2, r1, #3
    b294:	cmp	r2, #1
    b298:	blt	b2b8 <rb_sha512_crypt_r+0x1458>
    b29c:	ldrb	r2, [r0, r6, lsr #2]
    b2a0:	add	r3, r7, #4
    b2a4:	strb	r2, [r7, #3]
    b2a8:	sub	r2, r1, #4
    b2ac:	b	b2bc <rb_sha512_crypt_r+0x145c>
    b2b0:	add	r3, r7, #2
    b2b4:	b	b2bc <rb_sha512_crypt_r+0x145c>
    b2b8:	add	r3, r7, #3
    b2bc:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b2c0:	cmp	r2, #1
    b2c4:	blt	b394 <rb_sha512_crypt_r+0x1534>
    b2c8:	ldrb	r4, [fp, #-127]	; 0xffffff81
    b2cc:	ldrb	r5, [fp, #-148]	; 0xffffff6c
    b2d0:	ldrb	r6, [fp, #-106]	; 0xffffff96
    b2d4:	mov	r7, r3
    b2d8:	and	r1, r4, #63	; 0x3f
    b2dc:	ldrb	r1, [r0, r1]
    b2e0:	strb	r1, [r7], #1
    b2e4:	sub	r1, r2, #1
    b2e8:	cmp	r1, #0
    b2ec:	ble	b34c <rb_sha512_crypt_r+0x14ec>
    b2f0:	orr	r1, r4, r5, lsl #8
    b2f4:	ubfx	r1, r1, #6, #6
    b2f8:	ldrb	r1, [r0, r1]
    b2fc:	strb	r1, [r3, #1]
    b300:	sub	r1, r2, #2
    b304:	cmp	r1, #1
    b308:	blt	b340 <rb_sha512_crypt_r+0x14e0>
    b30c:	lsl	r1, r5, #8
    b310:	orr	r1, r1, r6, lsl #16
    b314:	ubfx	r1, r1, #12, #6
    b318:	ldrb	r1, [r0, r1]
    b31c:	strb	r1, [r3, #2]
    b320:	sub	r1, r2, #3
    b324:	cmp	r1, #1
    b328:	blt	b348 <rb_sha512_crypt_r+0x14e8>
    b32c:	ldrb	r1, [r0, r6, lsr #2]
    b330:	add	r7, r3, #4
    b334:	strb	r1, [r3, #3]
    b338:	sub	r1, r2, #4
    b33c:	b	b34c <rb_sha512_crypt_r+0x14ec>
    b340:	add	r7, r3, #2
    b344:	b	b34c <rb_sha512_crypt_r+0x14ec>
    b348:	add	r7, r3, #3
    b34c:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b350:	cmp	r1, #1
    b354:	blt	b394 <rb_sha512_crypt_r+0x1534>
    b358:	ldrb	r3, [fp, #-105]	; 0xffffff97
    b35c:	and	r2, r3, #63	; 0x3f
    b360:	ldrb	r6, [r0, r2]
    b364:	mov	r2, r7
    b368:	strb	r6, [r2], #1
    b36c:	sub	r6, r1, #1
    b370:	cmp	r6, #0
    b374:	ble	b388 <rb_sha512_crypt_r+0x1528>
    b378:	ldrb	r0, [r0, r3, lsr #6]
    b37c:	add	r2, r7, #2
    b380:	mov	r1, r6
    b384:	strb	r0, [r7, #1]
    b388:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b38c:	cmp	r1, #1
    b390:	bgt	b4b8 <rb_sha512_crypt_r+0x1658>
    b394:	bl	5540 <__errno_location@plt>
    b398:	mov	r1, #34	; 0x22
    b39c:	str	r1, [r0]
    b3a0:	ldr	r5, [fp, #-992]	; 0xfffffc20
    b3a4:	add	r0, pc, #292	; 0x124
    b3a8:	sub	r6, fp, #576	; 0x240
    b3ac:	vmov.i32	q4, #0	; 0x00000000
    b3b0:	vld1.64	{d16-d17}, [r0 :128]
    b3b4:	add	r0, pc, #292	; 0x124
    b3b8:	add	r1, pc, #304	; 0x130
    b3bc:	vld1.64	{d18-d19}, [r1 :128]
    b3c0:	vld1.64	{d20-d21}, [r0 :128]
    b3c4:	mov	r1, #20
    b3c8:	vst1.64	{d16-d17}, [r6]
    b3cc:	add	r0, pc, #300	; 0x12c
    b3d0:	ldr	r2, [fp, #-944]	; 0xfffffc50
    b3d4:	vld1.64	{d16-d17}, [r0 :128]
    b3d8:	ldr	r0, [fp, #-940]	; 0xfffffc54
    b3dc:	vst1.64	{d18-d19}, [r0]
    b3e0:	ldr	r0, [fp, #-936]	; 0xfffffc58
    b3e4:	vst1.64	{d20-d21}, [r0]
    b3e8:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    b3ec:	vst1.64	{d16-d17}, [r0]
    b3f0:	mov	r0, #0
    b3f4:	str	r0, [r2, #16]
    b3f8:	vst1.64	{d8-d9}, [r2], r1
    b3fc:	sub	r1, fp, #168	; 0xa8
    b400:	str	r0, [r2]
    b404:	mov	r0, r6
    b408:	bl	b6c0 <rb_sha512_finish_ctx>
    b40c:	sub	r0, fp, #232	; 0xe8
    b410:	ldr	r4, [fp, #-924]	; 0xfffffc64
    b414:	mov	r1, r0
    b418:	add	r0, r0, #32
    b41c:	vst1.64	{d8-d9}, [r0]
    b420:	add	r0, r1, #16
    b424:	vst1.64	{d8-d9}, [r0]
    b428:	mov	r0, #48	; 0x30
    b42c:	vst1.64	{d8-d9}, [r1], r0
    b430:	ldr	r0, [fp, #-928]	; 0xfffffc60
    b434:	mov	r2, r4
    b438:	vst1.64	{d8-d9}, [r1]
    b43c:	mov	r1, #0
    b440:	bl	4ed4 <memset@plt>
    b444:	ldr	r0, [fp, #-956]	; 0xfffffc44
    b448:	mov	r1, #0
    b44c:	mov	r2, r8
    b450:	bl	4ed4 <memset@plt>
    b454:	mov	r0, r6
    b458:	mov	r1, #0
    b45c:	mov	r2, #344	; 0x158
    b460:	bl	4ed4 <memset@plt>
    b464:	sub	r0, fp, #920	; 0x398
    b468:	mov	r1, #0
    b46c:	mov	r2, #344	; 0x158
    b470:	bl	4ed4 <memset@plt>
    b474:	ldr	r0, [fp, #-984]	; 0xfffffc28
    b478:	cmp	r0, #0
    b47c:	beq	b48c <rb_sha512_crypt_r+0x162c>
    b480:	mov	r1, #0
    b484:	mov	r2, r4
    b488:	bl	4ed4 <memset@plt>
    b48c:	cmp	r5, #0
    b490:	beq	b4a4 <rb_sha512_crypt_r+0x1644>
    b494:	mov	r0, r5
    b498:	mov	r1, #0
    b49c:	mov	r2, r8
    b4a0:	bl	4ed4 <memset@plt>
    b4a4:	mov	r0, sl
    b4a8:	sub	sp, fp, #96	; 0x60
    b4ac:	vpop	{d8-d15}
    b4b0:	add	sp, sp, #4
    b4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4b8:	mov	r0, #0
    b4bc:	mov	sl, r9
    b4c0:	strb	r0, [r2]
    b4c4:	b	b3a0 <rb_sha512_crypt_r+0x1540>
    b4c8:	nop	{0}
    b4cc:	nop	{0}
    b4d0:	.word	0xf3bcc908
    b4d4:	.word	0x6a09e667
    b4d8:	.word	0x84caa73b
    b4dc:	.word	0xbb67ae85
    b4e0:	.word	0xade682d1
    b4e4:	.word	0x510e527f
    b4e8:	.word	0x2b3e6c1f
    b4ec:	.word	0x9b05688c
    b4f0:	.word	0xfe94f82b
    b4f4:	.word	0x3c6ef372
    b4f8:	.word	0x5f1d36f1
    b4fc:	.word	0xa54ff53a
    b500:	.word	0xfb41bd6b
    b504:	.word	0x1f83d9ab
    b508:	.word	0x137e2179
    b50c:	.word	0x5be0cd19
    b510:	.word	0x0000f330
    b514:	.word	0x0000ee6c
    b518:	.word	0x0000f2f0
    b51c:	.word	0x0000ed9f

0000b520 <rb_sha512_process_bytes>:
    b520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b524:	add	fp, sp, #28
    b528:	sub	sp, sp, #4
    b52c:	mov	r9, r2
    b530:	mov	r6, r0
    b534:	mov	r4, r2
    b538:	mov	sl, r1
    b53c:	ldr	r5, [r9, #80]!	; 0x50
    b540:	ldr	r0, [r9, #4]
    b544:	orrs	r0, r5, r0
    b548:	beq	b5cc <rb_sha512_process_bytes+0xac>
    b54c:	rsb	r7, r5, #256	; 0x100
    b550:	add	r0, r4, r5
    b554:	mov	r1, r6
    b558:	cmp	r7, sl
    b55c:	add	r0, r0, #88	; 0x58
    b560:	movhi	r7, sl
    b564:	mov	r2, r7
    b568:	bl	509c <memcpy@plt>
    b56c:	ldrd	r0, [r9]
    b570:	adds	r0, r0, r7
    b574:	adc	r1, r1, #0
    b578:	subs	r2, r0, #129	; 0x81
    b57c:	strd	r0, [r9]
    b580:	sbcs	r1, r1, #0
    b584:	bcc	b5c4 <rb_sha512_process_bytes+0xa4>
    b588:	add	r8, r4, #88	; 0x58
    b58c:	bic	r1, r0, #127	; 0x7f
    b590:	mov	r2, r4
    b594:	mov	r0, r8
    b598:	bl	ba7c <rb_sha512_process_block>
    b59c:	mov	r0, #0
    b5a0:	str	r0, [r9, #4]
    b5a4:	ldr	r0, [r9]
    b5a8:	and	r2, r0, #127	; 0x7f
    b5ac:	add	r0, r7, r5
    b5b0:	bic	r0, r0, #127	; 0x7f
    b5b4:	str	r2, [r9]
    b5b8:	add	r1, r8, r0
    b5bc:	mov	r0, r8
    b5c0:	bl	509c <memcpy@plt>
    b5c4:	sub	sl, sl, r7
    b5c8:	add	r6, r6, r7
    b5cc:	cmp	sl, #128	; 0x80
    b5d0:	bcc	b64c <rb_sha512_process_bytes+0x12c>
    b5d4:	tst	r6, #7
    b5d8:	beq	b630 <rb_sha512_process_bytes+0x110>
    b5dc:	cmp	sl, #129	; 0x81
    b5e0:	bcc	b65c <rb_sha512_process_bytes+0x13c>
    b5e4:	sub	r0, sl, #129	; 0x81
    b5e8:	add	r7, r4, #88	; 0x58
    b5ec:	mov	r5, sl
    b5f0:	bic	r8, r0, #127	; 0x7f
    b5f4:	mov	r0, r7
    b5f8:	mov	r1, r6
    b5fc:	mov	r2, #128	; 0x80
    b600:	bl	509c <memcpy@plt>
    b604:	mov	r0, r7
    b608:	mov	r1, #128	; 0x80
    b60c:	mov	r2, r4
    b610:	bl	ba7c <rb_sha512_process_block>
    b614:	sub	r5, r5, #128	; 0x80
    b618:	add	r6, r6, #128	; 0x80
    b61c:	cmp	r5, #128	; 0x80
    b620:	bhi	b5f4 <rb_sha512_process_bytes+0xd4>
    b624:	sub	r0, sl, r8
    b628:	sub	sl, r0, #128	; 0x80
    b62c:	b	b660 <rb_sha512_process_bytes+0x140>
    b630:	bic	r7, sl, #127	; 0x7f
    b634:	mov	r0, r6
    b638:	mov	r2, r4
    b63c:	mov	r1, r7
    b640:	bl	ba7c <rb_sha512_process_block>
    b644:	add	r6, r6, r7
    b648:	and	sl, sl, #127	; 0x7f
    b64c:	cmp	sl, #0
    b650:	bne	b660 <rb_sha512_process_bytes+0x140>
    b654:	sub	sp, fp, #28
    b658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b65c:	mov	sl, #128	; 0x80
    b660:	ldr	r5, [r9]
    b664:	mov	r1, r6
    b668:	mov	r2, sl
    b66c:	add	r0, r4, r5
    b670:	add	r0, r0, #88	; 0x58
    b674:	bl	509c <memcpy@plt>
    b678:	add	r6, sl, r5
    b67c:	cmp	r6, #128	; 0x80
    b680:	bcc	b6ac <rb_sha512_process_bytes+0x18c>
    b684:	add	r5, r4, #88	; 0x58
    b688:	mov	r1, #128	; 0x80
    b68c:	mov	r2, r4
    b690:	mov	r0, r5
    b694:	bl	ba7c <rb_sha512_process_block>
    b698:	sub	r6, r6, #128	; 0x80
    b69c:	add	r1, r4, #216	; 0xd8
    b6a0:	mov	r0, r5
    b6a4:	mov	r2, r6
    b6a8:	bl	509c <memcpy@plt>
    b6ac:	mov	r7, #0
    b6b0:	strd	r6, [r9]
    b6b4:	sub	sp, fp, #28
    b6b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6bc:	nop	{0}

0000b6c0 <rb_sha512_finish_ctx>:
    b6c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6c4:	add	fp, sp, #28
    b6c8:	sub	sp, sp, #4
    b6cc:	vpush	{d8-d9}
    b6d0:	sub	sp, sp, #32
    b6d4:	mov	r5, r0
    b6d8:	mov	sl, r0
    b6dc:	mov	r8, r1
    b6e0:	ldr	r0, [r5, #64]!	; 0x40
    b6e4:	add	r7, r8, #8
    b6e8:	ldrd	r2, [r5, #16]
    b6ec:	ldr	r1, [r5, #4]
    b6f0:	sub	r6, r5, #56	; 0x38
    b6f4:	adds	r0, r0, r2
    b6f8:	adcs	r1, r1, r3
    b6fc:	strd	r0, [r5]
    b700:	str	r6, [sp, #4]
    b704:	sub	r6, r5, #48	; 0x30
    b708:	mov	r1, #0
    b70c:	str	r6, [sp, #8]
    b710:	sub	r6, r5, #40	; 0x28
    b714:	adc	r0, r1, #0
    b718:	str	r6, [sp, #12]
    b71c:	sub	r6, r5, #32
    b720:	cmp	r0, #1
    b724:	str	r6, [sp, #16]
    b728:	sub	r6, r5, #24
    b72c:	str	r6, [sp, #20]
    b730:	sub	r6, r5, #16
    b734:	str	r6, [sp, #24]
    b738:	sub	r6, r5, #8
    b73c:	str	r6, [sp, #28]
    b740:	bne	b758 <rb_sha512_finish_ctx+0x98>
    b744:	add	r0, r5, #8
    b748:	ldm	r0, {r6, r9}
    b74c:	adds	r6, r6, #1
    b750:	adc	r9, r9, #0
    b754:	stm	r0, {r6, r9}
    b758:	rsbs	r4, r2, #111	; 0x6f
    b75c:	add	r6, sl, #88	; 0x58
    b760:	mov	r9, #112	; 0x70
    b764:	rscs	r3, r3, #0
    b768:	add	r0, r6, r2
    b76c:	movwcc	r1, #1
    b770:	cmp	r1, #0
    b774:	ldr	r1, [pc, #764]	; ba78 <rb_sha512_finish_ctx+0x3b8>
    b778:	movwne	r9, #240	; 0xf0
    b77c:	sub	r2, r9, r2
    b780:	add	r1, pc, r1
    b784:	bl	509c <memcpy@plt>
    b788:	vld1.64	{d1-d2}, [r5]
    b78c:	add	r2, pc, #540	; 0x21c
    b790:	vmov.i32	q8, #0	; 0x00000000
    b794:	vmov.i64	q11, #0x00ff000000000000
    b798:	vld1.64	{d20-d21}, [r2 :128]
    b79c:	add	r2, pc, #540	; 0x21c
    b7a0:	vld1.64	{d18-d19}, [r2 :128]
    b7a4:	add	r2, pc, #548	; 0x224
    b7a8:	vmov.32	r0, d2[0]
    b7ac:	vldr	s0, [pc, #700]	; ba70 <rb_sha512_finish_ctx+0x3b0>
    b7b0:	vsub.i64	q13, q8, q10
    b7b4:	lsl	r1, r0, #11
    b7b8:	vmov	s1, r1
    b7bc:	vmov.32	r1, d1[1]
    b7c0:	vorr	d3, d1, d1
    b7c4:	vshl.s64	q12, q0, #59	; 0x3b
    b7c8:	vand	q11, q0, q11
    b7cc:	vshl.u64	q14, q1, q9
    b7d0:	vshl.u64	q9, q1, q13
    b7d4:	vld1.64	{d26-d27}, [r2 :128]
    b7d8:	vorr	d23, d25, d25
    b7dc:	vshl.u64	q10, q1, q10
    b7e0:	lsr	r1, r1, #29
    b7e4:	vmov	s8, r1
    b7e8:	add	r1, pc, #496	; 0x1f0
    b7ec:	add	r2, pc, #508	; 0x1fc
    b7f0:	vmov.f32	s9, s0
    b7f4:	vorr	d5, d1, d1
    b7f8:	vorr	d19, d21, d21
    b7fc:	vld1.64	{d30-d31}, [r2 :128]
    b800:	vmov.32	r2, d2[1]
    b804:	vld1.64	{d6-d7}, [r1 :128]
    b808:	vshl.u64	q13, q1, q13
    b80c:	vand	q14, q14, q15
    b810:	vsub.i64	q15, q8, q3
    b814:	vldr	s14, [pc, #600]	; ba74 <rb_sha512_finish_ctx+0x3b4>
    b818:	lsl	r1, r2, #3
    b81c:	add	r2, pc, #476	; 0x1dc
    b820:	orr	r1, r1, r0, lsr #29
    b824:	vld1.64	{d8-d9}, [r2 :128]
    b828:	lsl	r0, r0, #3
    b82c:	vmov	s12, r0
    b830:	add	r0, pc, #472	; 0x1d8
    b834:	vorr	q11, q14, q11
    b838:	vshl.u64	q15, q1, q15
    b83c:	vmov	s13, r1
    b840:	vmov.f32	s15, s0
    b844:	vand	q12, q13, q4
    b848:	vsub.i64	q13, q8, q3
    b84c:	vorr	q14, q2, q3
    b850:	vld1.64	{d6-d7}, [r0 :128]
    b854:	add	r0, pc, #452	; 0x1c4
    b858:	vshl.u64	q13, q2, q13
    b85c:	vorr	q11, q11, q12
    b860:	vsub.i64	q2, q8, q3
    b864:	vld1.64	{d6-d7}, [r0 :128]
    b868:	add	r0, pc, #448	; 0x1c0
    b86c:	vld1.64	{d20-d21}, [r0 :128]
    b870:	add	r0, pc, #456	; 0x1c8
    b874:	add	r1, pc, #468	; 0x1d4
    b878:	add	r2, pc, #480	; 0x1e0
    b87c:	vld1.64	{d24-d25}, [r2 :128]
    b880:	vorr	d29, d27, d27
    b884:	mov	r2, sl
    b888:	vshl.u64	q2, q1, q2
    b88c:	vand	q9, q9, q3
    b890:	vsub.i64	q8, q8, q10
    b894:	vld1.64	{d20-d21}, [r1 :128]
    b898:	add	r1, r9, #16
    b89c:	vand	q12, q15, q12
    b8a0:	vld1.64	{d30-d31}, [r0 :128]
    b8a4:	add	r0, r6, r9
    b8a8:	vorr	q9, q11, q9
    b8ac:	vmov.i64	q11, #0x00000000000000ff
    b8b0:	vshl.u64	q8, q1, q8
    b8b4:	vorr	q9, q9, q12
    b8b8:	vand	q10, q2, q10
    b8bc:	vand	q11, q14, q11
    b8c0:	vshl.s64	q12, q14, #56	; 0x38
    b8c4:	vand	q8, q8, q15
    b8c8:	vorr	q9, q9, q10
    b8cc:	vorr	d25, d23, d23
    b8d0:	vorr	q8, q9, q8
    b8d4:	vorr	q8, q8, q12
    b8d8:	vst1.64	{d16-d17}, [r0]
    b8dc:	mov	r0, r6
    b8e0:	bl	ba7c <rb_sha512_process_block>
    b8e4:	ldrd	r0, [sl]
    b8e8:	rev	r3, r0
    b8ec:	rev	r2, r1
    b8f0:	strd	r2, [r8]
    b8f4:	ldr	r0, [sp, #4]
    b8f8:	ldrd	r0, [r0]
    b8fc:	rev	r0, r0
    b900:	str	r0, [r7, #4]
    b904:	rev	r0, r1
    b908:	str	r0, [r7]
    b90c:	ldr	r0, [sp, #8]
    b910:	ldrd	r0, [r0]
    b914:	rev	r0, r0
    b918:	str	r0, [r7, #12]
    b91c:	rev	r0, r1
    b920:	str	r0, [r7, #8]
    b924:	ldr	r0, [sp, #12]
    b928:	ldrd	r0, [r0]
    b92c:	rev	r0, r0
    b930:	str	r0, [r7, #20]
    b934:	rev	r0, r1
    b938:	str	r0, [r7, #16]
    b93c:	ldr	r0, [sp, #16]
    b940:	ldrd	r0, [r0]
    b944:	rev	r0, r0
    b948:	str	r0, [r7, #28]
    b94c:	rev	r0, r1
    b950:	str	r0, [r7, #24]
    b954:	ldr	r0, [sp, #20]
    b958:	ldrd	r0, [r0]
    b95c:	rev	r0, r0
    b960:	str	r0, [r7, #36]	; 0x24
    b964:	rev	r0, r1
    b968:	str	r0, [r7, #32]
    b96c:	ldr	r0, [sp, #24]
    b970:	ldrd	r0, [r0]
    b974:	rev	r0, r0
    b978:	str	r0, [r7, #44]	; 0x2c
    b97c:	rev	r0, r1
    b980:	str	r0, [r7, #40]	; 0x28
    b984:	ldr	r0, [sp, #28]
    b988:	ldrd	r0, [r0]
    b98c:	rev	r0, r0
    b990:	str	r0, [r7, #52]	; 0x34
    b994:	rev	r0, r1
    b998:	str	r0, [r7, #48]	; 0x30
    b99c:	sub	sp, fp, #48	; 0x30
    b9a0:	vpop	{d8-d9}
    b9a4:	add	sp, sp, #4
    b9a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9ac:	nop	{0}
    b9b0:	.word	0x00000005
    b9b4:	.word	0x00000000
    b9b8:	.word	0x0000000b
    b9bc:	.word	0x00000000
    b9c0:	.word	0x0000001b
    b9c4:	.word	0x00000000
    b9c8:	.word	0x0000002b
    b9cc:	.word	0x00000000
    b9d0:	.word	0x0000000b
    b9d4:	.word	0x00000000
    b9d8:	.word	0x0000001b
    b9dc:	.word	0x00000000
    b9e0:	.word	0x00000015
    b9e4:	.word	0x00000000
    b9e8:	.word	0x00000005
	...
    b9f4:	.word	0x0000ff00
    b9f8:	.word	0x00000000
    b9fc:	.word	0x00ff0000
    ba00:	.word	0x00000000
    ba04:	.word	0x000000ff
    ba08:	.word	0x00000000
    ba0c:	.word	0x0000ff00
    ba10:	.word	0x00000025
    ba14:	.word	0x00000000
    ba18:	.word	0x00000015
    ba1c:	.word	0x00000000
    ba20:	.word	0xff000000
	...
    ba2c:	.word	0x000000ff
    ba30:	.word	0x00000035
    ba34:	.word	0x00000000
    ba38:	.word	0x00000025
    ba3c:	.word	0x00000000
    ba40:	.word	0x000000ff
    ba44:	.word	0x00000000
    ba48:	.word	0x0000ff00
    ba4c:	.word	0x00000000
    ba50:	.word	0x0000ff00
    ba54:	.word	0x00000000
    ba58:	.word	0x00ff0000
    ba5c:	.word	0x00000000
    ba60:	.word	0x00ff0000
    ba64:	.word	0x00000000
    ba68:	.word	0xff000000
	...
    ba74:	.word	0x00000035
    ba78:	.word	0x0000e3a0

0000ba7c <rb_sha512_process_block>:
    ba7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba80:	add	fp, sp, #28
    ba84:	sub	sp, sp, #860	; 0x35c
    ba88:	mov	r6, r0
    ba8c:	ldr	r0, [r2, #64]	; 0x40
    ba90:	lsr	r7, r1, #3
    ba94:	adds	r0, r0, r1
    ba98:	str	r0, [r2, #64]	; 0x40
    ba9c:	ldr	r0, [r2, #68]	; 0x44
    baa0:	adcs	r0, r0, #0
    baa4:	str	r0, [r2, #68]	; 0x44
    baa8:	mov	r0, #0
    baac:	ldr	r1, [r2, #60]	; 0x3c
    bab0:	ldr	r5, [r2, #36]	; 0x24
    bab4:	ldr	sl, [r2, #28]
    bab8:	adc	r0, r0, #0
    babc:	cmp	r0, #1
    bac0:	str	r1, [sp, #160]	; 0xa0
    bac4:	mov	r1, r2
    bac8:	ldr	r3, [r1, #56]!	; 0x38
    bacc:	str	r1, [sp, #24]
    bad0:	ldr	r1, [r2, #52]	; 0x34
    bad4:	str	r3, [sp, #156]	; 0x9c
    bad8:	str	r1, [sp, #152]	; 0x98
    badc:	mov	r1, r2
    bae0:	ldr	r3, [r1, #48]!	; 0x30
    bae4:	str	r1, [sp, #20]
    bae8:	ldr	r1, [r2, #44]	; 0x2c
    baec:	str	r3, [sp, #148]	; 0x94
    baf0:	str	r1, [sp, #144]	; 0x90
    baf4:	mov	r1, r2
    baf8:	ldr	r3, [r1, #40]!	; 0x28
    bafc:	str	r1, [sp, #16]
    bb00:	mov	r1, r2
    bb04:	ldr	r9, [r1, #32]!
    bb08:	str	r1, [sp, #12]
    bb0c:	mov	r1, r2
    bb10:	str	r3, [sp, #140]	; 0x8c
    bb14:	ldr	r3, [r1, #24]!
    bb18:	str	r1, [sp, #8]
    bb1c:	str	r3, [sp, #136]	; 0x88
    bb20:	ldm	r2, {r1, r3}
    bb24:	str	r3, [sp, #120]	; 0x78
    bb28:	str	r1, [sp, #124]	; 0x7c
    bb2c:	ldr	r1, [r2, #12]
    bb30:	str	r1, [sp, #128]	; 0x80
    bb34:	ldr	r1, [r2, #20]
    bb38:	str	r1, [sp, #132]	; 0x84
    bb3c:	mov	r1, r2
    bb40:	ldr	r3, [r1, #16]!
    bb44:	str	r1, [sp, #4]
    bb48:	mov	r1, r2
    bb4c:	str	r3, [sp, #116]	; 0x74
    bb50:	ldr	r3, [r1, #8]!
    bb54:	str	r1, [sp]
    bb58:	str	r3, [sp, #112]	; 0x70
    bb5c:	bne	bb70 <rb_sha512_process_block+0xf4>
    bb60:	ldrd	r0, [r2, #72]	; 0x48
    bb64:	adds	r0, r0, #1
    bb68:	adc	r1, r1, #0
    bb6c:	strd	r0, [r2, #72]	; 0x48
    bb70:	cmp	r7, #0
    bb74:	str	r2, [sp, #28]
    bb78:	beq	c14c <rb_sha512_process_block+0x6d0>
    bb7c:	add	r0, sp, #216	; 0xd8
    bb80:	add	r1, r0, #8
    bb84:	str	r1, [sp, #88]	; 0x58
    bb88:	add	r1, r0, #16
    bb8c:	str	r1, [sp, #84]	; 0x54
    bb90:	add	r1, r0, #24
    bb94:	str	r1, [sp, #80]	; 0x50
    bb98:	add	r1, r0, #32
    bb9c:	str	r1, [sp, #76]	; 0x4c
    bba0:	add	r1, r0, #40	; 0x28
    bba4:	str	r1, [sp, #72]	; 0x48
    bba8:	add	r1, r0, #48	; 0x30
    bbac:	str	r1, [sp, #68]	; 0x44
    bbb0:	add	r1, r0, #56	; 0x38
    bbb4:	str	r1, [sp, #64]	; 0x40
    bbb8:	add	r1, r0, #64	; 0x40
    bbbc:	str	r1, [sp, #60]	; 0x3c
    bbc0:	add	r1, r0, #72	; 0x48
    bbc4:	str	r1, [sp, #56]	; 0x38
    bbc8:	add	r1, r0, #80	; 0x50
    bbcc:	str	r1, [sp, #52]	; 0x34
    bbd0:	add	r1, r0, #88	; 0x58
    bbd4:	str	r1, [sp, #48]	; 0x30
    bbd8:	add	r1, r0, #96	; 0x60
    bbdc:	str	r1, [sp, #44]	; 0x2c
    bbe0:	add	r1, r0, #104	; 0x68
    bbe4:	str	r1, [sp, #40]	; 0x28
    bbe8:	add	r1, r0, #112	; 0x70
    bbec:	add	r0, r0, #120	; 0x78
    bbf0:	str	r1, [sp, #36]	; 0x24
    bbf4:	str	r0, [sp, #32]
    bbf8:	str	r5, [sp, #108]	; 0x6c
    bbfc:	str	r7, [sp, #92]	; 0x5c
    bc00:	ldm	r6, {r0, r2}
    bc04:	rev	lr, r2
    bc08:	str	lr, [sp, #216]	; 0xd8
    bc0c:	rev	ip, r0
    bc10:	str	ip, [sp, #220]	; 0xdc
    bc14:	ldr	r0, [r6, #8]
    bc18:	ldr	r3, [r6, #12]
    bc1c:	rev	r5, r0
    bc20:	ldr	r0, [sp, #88]	; 0x58
    bc24:	rev	r4, r3
    bc28:	strd	r4, [r0]
    bc2c:	ldr	r0, [r6, #16]
    bc30:	ldr	r3, [r6, #20]
    bc34:	rev	r5, r0
    bc38:	ldr	r0, [sp, #84]	; 0x54
    bc3c:	rev	r4, r3
    bc40:	strd	r4, [r0]
    bc44:	ldr	r0, [r6, #24]
    bc48:	ldr	r3, [r6, #28]
    bc4c:	rev	r5, r0
    bc50:	ldr	r0, [sp, #80]	; 0x50
    bc54:	rev	r4, r3
    bc58:	strd	r4, [r0]
    bc5c:	ldr	r0, [r6, #32]
    bc60:	ldr	r3, [r6, #36]	; 0x24
    bc64:	rev	r5, r0
    bc68:	ldr	r0, [sp, #76]	; 0x4c
    bc6c:	rev	r4, r3
    bc70:	strd	r4, [r0]
    bc74:	ldr	r0, [r6, #40]	; 0x28
    bc78:	ldr	r3, [r6, #44]	; 0x2c
    bc7c:	rev	r5, r0
    bc80:	ldr	r0, [sp, #72]	; 0x48
    bc84:	rev	r4, r3
    bc88:	strd	r4, [r0]
    bc8c:	ldr	r0, [r6, #48]	; 0x30
    bc90:	ldr	r3, [r6, #52]	; 0x34
    bc94:	rev	r5, r0
    bc98:	ldr	r0, [sp, #68]	; 0x44
    bc9c:	rev	r4, r3
    bca0:	strd	r4, [r0]
    bca4:	ldr	r0, [r6, #56]	; 0x38
    bca8:	ldr	r3, [r6, #60]	; 0x3c
    bcac:	rev	r5, r0
    bcb0:	ldr	r0, [sp, #64]	; 0x40
    bcb4:	rev	r4, r3
    bcb8:	strd	r4, [r0]
    bcbc:	ldr	r0, [r6, #64]	; 0x40
    bcc0:	ldr	r3, [r6, #68]	; 0x44
    bcc4:	rev	r5, r0
    bcc8:	ldr	r0, [sp, #60]	; 0x3c
    bccc:	rev	r4, r3
    bcd0:	strd	r4, [r0]
    bcd4:	ldr	r0, [r6, #72]	; 0x48
    bcd8:	ldr	r3, [r6, #76]	; 0x4c
    bcdc:	rev	r5, r0
    bce0:	ldr	r0, [sp, #56]	; 0x38
    bce4:	rev	r4, r3
    bce8:	strd	r4, [r0]
    bcec:	ldr	r0, [r6, #80]	; 0x50
    bcf0:	ldr	r3, [r6, #84]	; 0x54
    bcf4:	rev	r5, r0
    bcf8:	ldr	r0, [sp, #52]	; 0x34
    bcfc:	rev	r4, r3
    bd00:	strd	r4, [r0]
    bd04:	ldr	r0, [r6, #88]	; 0x58
    bd08:	ldr	r3, [r6, #92]	; 0x5c
    bd0c:	rev	r5, r0
    bd10:	ldr	r0, [sp, #48]	; 0x30
    bd14:	rev	r4, r3
    bd18:	strd	r4, [r0]
    bd1c:	ldr	r0, [r6, #96]	; 0x60
    bd20:	ldr	r3, [r6, #100]	; 0x64
    bd24:	rev	r5, r0
    bd28:	ldr	r0, [sp, #44]	; 0x2c
    bd2c:	rev	r4, r3
    bd30:	strd	r4, [r0]
    bd34:	ldr	r0, [r6, #104]	; 0x68
    bd38:	ldr	r3, [r6, #108]	; 0x6c
    bd3c:	rev	r5, r0
    bd40:	ldr	r0, [sp, #40]	; 0x28
    bd44:	rev	r4, r3
    bd48:	strd	r4, [r0]
    bd4c:	ldr	r0, [r6, #112]	; 0x70
    bd50:	ldr	r3, [r6, #116]	; 0x74
    bd54:	rev	r5, r0
    bd58:	ldr	r0, [sp, #36]	; 0x24
    bd5c:	rev	r4, r3
    bd60:	strd	r4, [r0]
    bd64:	ldr	r0, [r6, #120]	; 0x78
    bd68:	ldr	r3, [r6, #124]	; 0x7c
    bd6c:	add	r6, r6, #128	; 0x80
    bd70:	str	r6, [sp, #96]	; 0x60
    bd74:	rev	r5, r0
    bd78:	ldr	r0, [sp, #32]
    bd7c:	rev	r4, r3
    bd80:	strd	r4, [r0]
    bd84:	movw	r0, #65024	; 0xfe00
    bd88:	movt	r0, #65535	; 0xffff
    bd8c:	add	r1, sp, #216	; 0xd8
    bd90:	add	r3, r1, r0
    bd94:	ldr	r6, [r3, #628]	; 0x274
    bd98:	ldr	r7, [r3, #624]	; 0x270
    bd9c:	ldr	r2, [r3, #520]	; 0x208
    bda0:	lsl	r4, r6, #3
    bda4:	lsr	r5, r6, #19
    bda8:	lsr	r1, r6, #29
    bdac:	orr	r4, r4, r7, lsr #29
    bdb0:	orr	r5, r5, r7, lsl #13
    bdb4:	orr	r1, r1, r7, lsl #3
    bdb8:	eor	r4, r4, r6, lsr #6
    bdbc:	eor	r5, r4, r5
    bdc0:	lsr	r4, r7, #6
    bdc4:	lsr	r7, r7, #19
    bdc8:	orr	r4, r4, r6, lsl #26
    bdcc:	orr	r7, r7, r6, lsl #13
    bdd0:	ldr	r6, [r3, #584]	; 0x248
    bdd4:	eor	r1, r1, r4
    bdd8:	ldr	r4, [r3, #524]	; 0x20c
    bddc:	eor	r1, r1, r7
    bde0:	ldr	r7, [r3, #588]	; 0x24c
    bde4:	adds	r6, lr, r6
    bde8:	mov	lr, r2
    bdec:	adc	r7, ip, r7
    bdf0:	adds	r1, r6, r1
    bdf4:	lsr	r6, r2, #7
    bdf8:	adc	ip, r7, r5
    bdfc:	lsr	r5, r2, #8
    be00:	orr	r6, r6, r4, lsl #25
    be04:	orr	r5, r5, r4, lsl #24
    be08:	eor	r6, r5, r6
    be0c:	lsrs	r5, r4, #1
    be10:	rrx	r7, r2
    be14:	eor	r7, r6, r7
    be18:	orr	r6, r5, r2, lsl #31
    be1c:	lsr	r5, r4, #8
    be20:	adds	r1, r1, r7
    be24:	orr	r5, r5, r2, lsl #24
    be28:	str	r1, [r3, #640]	; 0x280
    be2c:	eor	r5, r5, r4, lsr #7
    be30:	eor	r7, r5, r6
    be34:	adc	r7, ip, r7
    be38:	adds	r0, r0, #8
    be3c:	mov	ip, r4
    be40:	str	r7, [r3, #644]	; 0x284
    be44:	bne	bd8c <rb_sha512_process_block+0x310>
    be48:	ldr	r0, [sp, #124]	; 0x7c
    be4c:	ldr	r7, [sp, #116]	; 0x74
    be50:	ldr	r6, [sp, #152]	; 0x98
    be54:	ldr	r2, [sp, #112]	; 0x70
    be58:	ldr	r3, [sp, #128]	; 0x80
    be5c:	ldr	r8, [sp, #108]	; 0x6c
    be60:	ldr	r5, [sp, #140]	; 0x8c
    be64:	ldr	lr, [sp, #156]	; 0x9c
    be68:	ldr	r4, [sp, #160]	; 0xa0
    be6c:	mov	ip, #0
    be70:	str	sl, [sp, #100]	; 0x64
    be74:	str	sl, [sp, #176]	; 0xb0
    be78:	str	r9, [sp, #104]	; 0x68
    be7c:	str	r9, [sp, #188]	; 0xbc
    be80:	str	r0, [sp, #196]	; 0xc4
    be84:	ldr	r0, [sp, #120]	; 0x78
    be88:	str	r7, [sp, #208]	; 0xd0
    be8c:	ldr	r7, [sp, #132]	; 0x84
    be90:	str	r6, [sp, #200]	; 0xc8
    be94:	str	r0, [sp, #192]	; 0xc0
    be98:	ldr	r0, [sp, #136]	; 0x88
    be9c:	str	r7, [sp, #204]	; 0xcc
    bea0:	ldr	r7, [sp, #144]	; 0x90
    bea4:	str	r0, [sp, #180]	; 0xb4
    bea8:	ldr	r0, [sp, #148]	; 0x94
    beac:	str	r0, [sp, #212]	; 0xd4
    beb0:	ldr	r1, [sp, #204]	; 0xcc
    beb4:	ldr	r9, [sp, #212]	; 0xd4
    beb8:	ldr	r0, [sp, #200]	; 0xc8
    bebc:	mov	r6, r7
    bec0:	str	r5, [sp, #212]	; 0xd4
    bec4:	mov	r7, r8
    bec8:	ldr	r5, [sp, #188]	; 0xbc
    becc:	mov	r8, r3
    bed0:	mov	sl, r2
    bed4:	ldr	r3, [sp, #192]	; 0xc0
    bed8:	ldr	r2, [sp, #196]	; 0xc4
    bedc:	str	r6, [sp, #200]	; 0xc8
    bee0:	str	r1, [sp, #164]	; 0xa4
    bee4:	ldr	r1, [sp, #208]	; 0xd0
    bee8:	str	r0, [sp, #172]	; 0xac
    beec:	bic	r0, r0, r7
    bef0:	str	r9, [sp, #168]	; 0xa8
    bef4:	str	r1, [sp, #184]	; 0xb8
    bef8:	and	r1, r7, r6
    befc:	ldr	r6, [sp, #212]	; 0xd4
    bf00:	orr	r0, r1, r0
    bf04:	bic	r1, r9, r5
    bf08:	and	r6, r5, r6
    bf0c:	orr	r1, r6, r1
    bf10:	lsr	r6, r7, #18
    bf14:	adds	r1, r1, lr
    bf18:	orr	r6, r6, r5, lsl #14
    bf1c:	adc	lr, r0, r4
    bf20:	lsr	r4, r7, #14
    bf24:	lsr	r0, r5, #14
    bf28:	orr	r4, r4, r5, lsl #18
    bf2c:	orr	r0, r0, r7, lsl #18
    bf30:	eor	r6, r4, r6
    bf34:	lsl	r4, r7, #23
    bf38:	orr	r4, r4, r5, lsr #9
    bf3c:	eor	r6, r6, r4
    bf40:	lsr	r4, r5, #18
    bf44:	orr	r4, r4, r7, lsl #14
    bf48:	eor	r0, r0, r4
    bf4c:	lsr	r4, r7, #9
    bf50:	orr	r4, r4, r5, lsl #23
    bf54:	eor	r0, r0, r4
    bf58:	adds	r0, r1, r0
    bf5c:	adc	r1, lr, r6
    bf60:	ldr	r6, [pc, #632]	; c1e0 <rb_sha512_process_block+0x764>
    bf64:	ldr	lr, [sp, #164]	; 0xa4
    bf68:	str	r8, [sp, #204]	; 0xcc
    bf6c:	str	sl, [sp, #208]	; 0xd0
    bf70:	add	r6, pc, r6
    bf74:	ldr	r4, [r6, ip]!
    bf78:	ldr	r6, [r6, #4]
    bf7c:	adds	r0, r0, r4
    bf80:	adc	r1, r1, r6
    bf84:	add	r6, sp, #216	; 0xd8
    bf88:	mov	r4, r6
    bf8c:	add	r6, r6, ip
    bf90:	ldr	r4, [r4, ip]
    bf94:	ldr	r6, [r6, #4]
    bf98:	add	ip, ip, #8
    bf9c:	adds	r9, r0, r4
    bfa0:	and	r0, r8, lr
    bfa4:	ldr	r4, [sp, #184]	; 0xb8
    bfa8:	adc	r6, r1, r6
    bfac:	eor	r1, r8, lr
    bfb0:	and	r1, r3, r1
    bfb4:	eor	r0, r1, r0
    bfb8:	lsl	r1, r3, #30
    bfbc:	str	r0, [sp, #196]	; 0xc4
    bfc0:	lsr	r0, r3, #28
    bfc4:	orr	r1, r1, r2, lsr #2
    bfc8:	orr	r0, r0, r2, lsl #4
    bfcc:	eor	r0, r0, r1
    bfd0:	lsl	r1, r3, #25
    bfd4:	orr	r1, r1, r2, lsr #7
    bfd8:	eor	r8, r0, r1
    bfdc:	eor	r0, sl, r4
    bfe0:	and	r1, sl, r4
    bfe4:	mov	sl, r4
    bfe8:	lsr	r4, r3, #2
    bfec:	and	r0, r2, r0
    bff0:	orr	r4, r4, r2, lsl #30
    bff4:	eor	r0, r0, r1
    bff8:	lsr	r1, r2, #28
    bffc:	orr	r1, r1, r3, lsl #4
    c000:	eor	r1, r1, r4
    c004:	lsr	r4, r3, #7
    c008:	orr	r4, r4, r2, lsl #25
    c00c:	eor	r1, r1, r4
    c010:	ldr	r4, [sp, #172]	; 0xac
    c014:	adds	r0, r1, r0
    c018:	ldr	r1, [sp, #196]	; 0xc4
    c01c:	adc	r1, r8, r1
    c020:	adds	r0, r0, r9
    c024:	str	r0, [sp, #196]	; 0xc4
    c028:	adc	r0, r1, r6
    c02c:	mov	r1, lr
    c030:	str	r0, [sp, #192]	; 0xc0
    c034:	ldr	r0, [sp, #180]	; 0xb4
    c038:	str	sl, [sp, #180]	; 0xb4
    c03c:	adds	r0, r9, r0
    c040:	str	r0, [sp, #188]	; 0xbc
    c044:	ldr	r0, [sp, #176]	; 0xb0
    c048:	str	lr, [sp, #176]	; 0xb0
    c04c:	ldr	lr, [sp, #168]	; 0xa8
    c050:	adc	r8, r6, r0
    c054:	cmp	ip, #640	; 0x280
    c058:	bne	beb0 <rb_sha512_process_block+0x434>
    c05c:	ldr	r6, [sp, #156]	; 0x9c
    c060:	mov	r0, r4
    c064:	ldr	r0, [sp, #212]	; 0xd4
    c068:	ldr	r9, [sp, #104]	; 0x68
    c06c:	mov	sl, lr
    c070:	ldr	sl, [sp, #100]	; 0x64
    c074:	adds	r6, lr, r6
    c078:	str	r6, [sp, #156]	; 0x9c
    c07c:	ldr	r6, [sp, #160]	; 0xa0
    c080:	adc	r6, r4, r6
    c084:	ldr	r4, [sp, #200]	; 0xc8
    c088:	str	r6, [sp, #160]	; 0xa0
    c08c:	ldr	r6, [sp, #148]	; 0x94
    c090:	adds	r6, r0, r6
    c094:	ldr	r0, [sp, #188]	; 0xbc
    c098:	str	r6, [sp, #148]	; 0x94
    c09c:	ldr	r6, [sp, #152]	; 0x98
    c0a0:	adc	r6, r4, r6
    c0a4:	str	r6, [sp, #152]	; 0x98
    c0a8:	ldr	r6, [sp, #140]	; 0x8c
    c0ac:	adds	r6, r5, r6
    c0b0:	str	r6, [sp, #140]	; 0x8c
    c0b4:	ldr	r6, [sp, #144]	; 0x90
    c0b8:	adc	r6, r7, r6
    c0bc:	ldr	r7, [sp, #108]	; 0x6c
    c0c0:	adds	r9, r0, r9
    c0c4:	ldr	r0, [sp, #184]	; 0xb8
    c0c8:	str	r6, [sp, #144]	; 0x90
    c0cc:	ldr	r6, [sp, #208]	; 0xd0
    c0d0:	adc	r7, r8, r7
    c0d4:	mov	r5, r7
    c0d8:	ldr	r7, [sp, #136]	; 0x88
    c0dc:	adds	r7, r0, r7
    c0e0:	ldr	r0, [sp, #196]	; 0xc4
    c0e4:	str	r7, [sp, #136]	; 0x88
    c0e8:	ldr	r7, [sp, #116]	; 0x74
    c0ec:	adc	sl, r1, sl
    c0f0:	ldr	r1, [sp, #192]	; 0xc0
    c0f4:	adds	r7, r6, r7
    c0f8:	ldr	r6, [sp, #204]	; 0xcc
    c0fc:	str	r7, [sp, #116]	; 0x74
    c100:	ldr	r7, [sp, #132]	; 0x84
    c104:	adc	r7, r6, r7
    c108:	ldr	r6, [sp, #96]	; 0x60
    c10c:	str	r7, [sp, #132]	; 0x84
    c110:	ldr	r7, [sp, #112]	; 0x70
    c114:	adds	r7, r2, r7
    c118:	ldr	r2, [sp, #128]	; 0x80
    c11c:	str	r7, [sp, #112]	; 0x70
    c120:	ldr	r7, [sp, #92]	; 0x5c
    c124:	adc	r2, r3, r2
    c128:	str	r2, [sp, #128]	; 0x80
    c12c:	ldr	r2, [sp, #124]	; 0x7c
    c130:	adds	r2, r0, r2
    c134:	ldr	r0, [sp, #120]	; 0x78
    c138:	str	r2, [sp, #124]	; 0x7c
    c13c:	adc	r0, r1, r0
    c140:	subs	r7, r7, #16
    c144:	str	r0, [sp, #120]	; 0x78
    c148:	bne	bbf8 <rb_sha512_process_block+0x17c>
    c14c:	ldr	r0, [sp, #28]
    c150:	ldr	r1, [sp, #124]	; 0x7c
    c154:	ldr	r2, [sp, #120]	; 0x78
    c158:	stm	r0, {r1, r2}
    c15c:	ldr	r0, [sp, #128]	; 0x80
    c160:	ldr	r1, [sp]
    c164:	ldr	r2, [sp, #112]	; 0x70
    c168:	str	r2, [r1]
    c16c:	str	r0, [r1, #4]
    c170:	ldr	r0, [sp, #132]	; 0x84
    c174:	ldr	r1, [sp, #4]
    c178:	ldr	r2, [sp, #116]	; 0x74
    c17c:	str	r2, [r1]
    c180:	str	r0, [r1, #4]
    c184:	ldr	r0, [sp, #8]
    c188:	ldr	r1, [sp, #136]	; 0x88
    c18c:	stm	r0, {r1, sl}
    c190:	ldr	r0, [sp, #12]
    c194:	str	r9, [r0]
    c198:	str	r5, [r0, #4]
    c19c:	ldr	r0, [sp, #144]	; 0x90
    c1a0:	ldr	r1, [sp, #16]
    c1a4:	ldr	r2, [sp, #140]	; 0x8c
    c1a8:	str	r2, [r1]
    c1ac:	str	r0, [r1, #4]
    c1b0:	ldr	r0, [sp, #152]	; 0x98
    c1b4:	ldr	r1, [sp, #20]
    c1b8:	ldr	r2, [sp, #148]	; 0x94
    c1bc:	str	r2, [r1]
    c1c0:	str	r0, [r1, #4]
    c1c4:	ldr	r0, [sp, #160]	; 0xa0
    c1c8:	ldr	r1, [sp, #24]
    c1cc:	ldr	r2, [sp, #156]	; 0x9c
    c1d0:	str	r2, [r1]
    c1d4:	str	r0, [r1, #4]
    c1d8:	sub	sp, fp, #28
    c1dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1e0:	.word	0x0000d930

0000c1e4 <rb_init_bh>:
    c1e4:	push	{fp, lr}
    c1e8:	mov	fp, sp
    c1ec:	mov	r0, #1
    c1f0:	mov	r1, #12
    c1f4:	bl	4e98 <calloc@plt>
    c1f8:	cmp	r0, #0
    c1fc:	ldrne	r1, [pc, #12]	; c210 <rb_init_bh+0x2c>
    c200:	addne	r1, pc, r1
    c204:	strne	r0, [r1]
    c208:	popne	{fp, pc}
    c20c:	bl	5204 <rb_outofmemory@plt>
    c210:	.word	0x000326f8

0000c214 <rb_bh_create>:
    c214:	push	{r4, r5, r6, r7, fp, lr}
    c218:	add	fp, sp, #16
    c21c:	cmp	r0, #0
    c220:	beq	c2e4 <rb_bh_create+0xd0>
    c224:	mov	r6, r1
    c228:	cmp	r1, #0
    c22c:	ble	c2e4 <rb_bh_create+0xd0>
    c230:	mov	r7, r0
    c234:	cmp	r0, #11
    c238:	bls	c2f8 <rb_bh_create+0xe4>
    c23c:	mov	r0, #1
    c240:	mov	r1, #48	; 0x30
    c244:	mov	r5, r2
    c248:	bl	4e98 <calloc@plt>
    c24c:	cmp	r0, #0
    c250:	beq	c2f4 <rb_bh_create+0xe0>
    c254:	mov	r4, r0
    c258:	cmp	r5, #0
    c25c:	str	r7, [r0, #12]
    c260:	str	r6, [r0, #16]
    c264:	beq	c28c <rb_bh_create+0x78>
    c268:	mov	r0, r5
    c26c:	bl	5078 <strlen@plt>
    c270:	add	r0, r0, #1
    c274:	bl	5228 <malloc@plt>
    c278:	cmp	r0, #0
    c27c:	beq	c2f4 <rb_bh_create+0xe0>
    c280:	mov	r1, r5
    c284:	bl	512c <strcpy@plt>
    c288:	str	r0, [r4, #44]	; 0x2c
    c28c:	ldr	r0, [pc, #116]	; c308 <rb_bh_create+0xf4>
    c290:	mov	r1, #0
    c294:	ldr	r0, [pc, r0]
    c298:	str	r1, [r4, #4]
    c29c:	str	r4, [r4]
    c2a0:	ldr	r1, [r0]
    c2a4:	cmp	r1, #0
    c2a8:	str	r1, [r4, #8]
    c2ac:	beq	c2bc <rb_bh_create+0xa8>
    c2b0:	add	r1, r1, #4
    c2b4:	str	r4, [r1]
    c2b8:	b	c2cc <rb_bh_create+0xb8>
    c2bc:	mov	r1, r0
    c2c0:	ldr	r2, [r1, #4]!
    c2c4:	cmp	r2, #0
    c2c8:	streq	r4, [r1]
    c2cc:	str	r4, [r0]
    c2d0:	ldr	r1, [r0, #8]
    c2d4:	add	r1, r1, #1
    c2d8:	str	r1, [r0, #8]
    c2dc:	mov	r0, r4
    c2e0:	pop	{r4, r5, r6, r7, fp, pc}
    c2e4:	ldr	r0, [pc, #32]	; c30c <rb_bh_create+0xf8>
    c2e8:	mov	r1, #147	; 0x93
    c2ec:	add	r0, pc, r0
    c2f0:	bl	c314 <_rb_bh_fail>
    c2f4:	bl	5204 <rb_outofmemory@plt>
    c2f8:	ldr	r0, [pc, #16]	; c310 <rb_bh_create+0xfc>
    c2fc:	mov	r1, #151	; 0x97
    c300:	add	r0, pc, r0
    c304:	bl	c314 <_rb_bh_fail>
    c308:	.word	0x00032664
    c30c:	.word	0x0000d8ec
    c310:	.word	0x0000d90a

0000c314 <_rb_bh_fail>:
    c314:	push	{fp, lr}
    c318:	mov	fp, sp
    c31c:	mov	r3, r1
    c320:	mov	r1, r0
    c324:	ldr	r0, [pc, #16]	; c33c <_rb_bh_fail+0x28>
    c328:	ldr	r2, [pc, #16]	; c340 <_rb_bh_fail+0x2c>
    c32c:	add	r0, pc, r0
    c330:	add	r2, pc, r2
    c334:	bl	51a4 <rb_lib_log@plt>
    c338:	bl	4cac <abort@plt>
    c33c:	.word	0x0000d992
    c340:	.word	0x0000d8d1

0000c344 <rb_bh_alloc>:
    c344:	push	{fp, lr}
    c348:	mov	fp, sp
    c34c:	cmp	r0, #0
    c350:	beq	c36c <rb_bh_alloc+0x28>
    c354:	ldr	r1, [r0, #12]
    c358:	mov	r0, #1
    c35c:	bl	4e98 <calloc@plt>
    c360:	cmp	r0, #0
    c364:	popne	{fp, pc}
    c368:	bl	5204 <rb_outofmemory@plt>
    c36c:	ldr	r0, [pc, #8]	; c37c <rb_bh_alloc+0x38>
    c370:	mov	r1, #186	; 0xba
    c374:	add	r0, pc, r0
    c378:	bl	c314 <_rb_bh_fail>
    c37c:	.word	0x0000d8d1

0000c380 <rb_bh_free>:
    c380:	push	{fp, lr}
    c384:	mov	fp, sp
    c388:	cmp	r0, #0
    c38c:	beq	c3a8 <rb_bh_free+0x28>
    c390:	cmp	r1, #0
    c394:	beq	c3b4 <rb_bh_free+0x34>
    c398:	mov	r0, r1
    c39c:	bl	4f94 <free@plt>
    c3a0:	mov	r0, #0
    c3a4:	pop	{fp, pc}
    c3a8:	ldr	r0, [pc, #24]	; c3c8 <rb_bh_free+0x48>
    c3ac:	add	r0, pc, r0
    c3b0:	b	c3bc <rb_bh_free+0x3c>
    c3b4:	ldr	r0, [pc, #16]	; c3cc <rb_bh_free+0x4c>
    c3b8:	add	r0, pc, r0
    c3bc:	bl	51a4 <rb_lib_log@plt>
    c3c0:	mov	r0, #1
    c3c4:	pop	{fp, pc}
    c3c8:	.word	0x0000d8b7
    c3cc:	.word	0x0000d8cb

0000c3d0 <rb_bh_destroy>:
    c3d0:	push	{r4, r5, fp, lr}
    c3d4:	add	fp, sp, #8
    c3d8:	cmp	r0, #0
    c3dc:	beq	c408 <rb_bh_destroy+0x38>
    c3e0:	ldr	r1, [r0, #8]
    c3e4:	mov	r4, r0
    c3e8:	ldr	r2, [r0, #4]
    c3ec:	ldr	r0, [pc, #108]	; c460 <rb_bh_destroy+0x90>
    c3f0:	ldr	r0, [pc, r0]
    c3f4:	cmp	r1, #0
    c3f8:	beq	c414 <rb_bh_destroy+0x44>
    c3fc:	str	r2, [r1, #4]
    c400:	ldr	r2, [r4, #4]
    c404:	b	c418 <rb_bh_destroy+0x48>
    c408:	mov	r5, #1
    c40c:	mov	r0, r5
    c410:	pop	{r4, r5, fp, pc}
    c414:	str	r2, [r0, #4]
    c418:	cmp	r2, #0
    c41c:	mov	r3, r0
    c420:	mov	r5, #0
    c424:	addne	r3, r2, #8
    c428:	str	r1, [r3]
    c42c:	str	r5, [r4, #4]
    c430:	str	r5, [r4, #8]
    c434:	ldr	r1, [r0, #8]
    c438:	sub	r1, r1, #1
    c43c:	str	r1, [r0, #8]
    c440:	ldr	r0, [r4, #44]	; 0x2c
    c444:	cmp	r0, #0
    c448:	beq	c450 <rb_bh_destroy+0x80>
    c44c:	bl	4f94 <free@plt>
    c450:	mov	r0, r4
    c454:	bl	4f94 <free@plt>
    c458:	mov	r0, r5
    c45c:	pop	{r4, r5, fp, pc}
    c460:	.word	0x00032508

0000c464 <rb_bh_usage>:
    c464:	cmp	r1, #0
    c468:	movne	r0, #0
    c46c:	strne	r0, [r1]
    c470:	cmp	r2, #0
    c474:	movne	r0, #0
    c478:	strne	r0, [r2]
    c47c:	ldr	r0, [sp]
    c480:	cmp	r3, #0
    c484:	movne	r1, #0
    c488:	strne	r1, [r3]
    c48c:	cmp	r0, #0
    c490:	ldrne	r1, [pc, #8]	; c4a0 <rb_bh_usage+0x3c>
    c494:	addne	r1, pc, r1
    c498:	strne	r1, [r0]
    c49c:	bx	lr
    c4a0:	.word	0x0000d80e

0000c4a4 <rb_bh_usage_all>:
    c4a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    c4a8:	add	fp, sp, #24
    c4ac:	sub	sp, sp, #8
    c4b0:	cmp	r0, #0
    c4b4:	beq	c520 <rb_bh_usage_all+0x7c>
    c4b8:	mov	r5, r0
    c4bc:	ldr	r0, [pc, #100]	; c528 <rb_bh_usage_all+0x84>
    c4c0:	ldr	r0, [pc, r0]
    c4c4:	ldr	r6, [r0]
    c4c8:	cmp	r6, #0
    c4cc:	beq	c520 <rb_bh_usage_all+0x7c>
    c4d0:	ldr	r7, [pc, #84]	; c52c <rb_bh_usage_all+0x88>
    c4d4:	mov	r8, r1
    c4d8:	add	r7, pc, r7
    c4dc:	ldr	r0, [r6]
    c4e0:	ldr	r2, [r0, #12]
    c4e4:	ldr	r3, [r0, #16]
    c4e8:	ldr	r4, [r0, #28]
    c4ec:	ldr	r1, [r0, #40]	; 0x28
    c4f0:	ldr	r0, [r0, #44]	; 0x2c
    c4f4:	cmp	r0, #0
    c4f8:	movne	r7, r0
    c4fc:	mul	r0, r3, r4
    c500:	stm	sp, {r7, r8}
    c504:	mul	r3, r0, r2
    c508:	sub	r0, r0, r1
    c50c:	mul	r2, r0, r2
    c510:	blx	r5
    c514:	ldr	r6, [r6, #8]
    c518:	cmp	r6, #0
    c51c:	bne	c4dc <rb_bh_usage_all+0x38>
    c520:	sub	sp, fp, #24
    c524:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c528:	.word	0x00032438
    c52c:	.word	0x0000d7d7

0000c530 <rb_bh_total_usage>:
    c530:	push	{r4, r5, r6, sl, fp, lr}
    c534:	add	fp, sp, #16
    c538:	ldr	r2, [pc, #100]	; c5a4 <rb_bh_total_usage+0x74>
    c53c:	ldr	r2, [pc, r2]
    c540:	ldr	r2, [r2]
    c544:	cmp	r2, #0
    c548:	beq	c588 <rb_bh_total_usage+0x58>
    c54c:	mov	lr, #0
    c550:	mov	ip, #0
    c554:	ldr	r3, [r2]
    c558:	ldr	r2, [r2, #8]
    c55c:	ldr	r5, [r3, #16]
    c560:	ldr	r6, [r3, #28]
    c564:	ldr	r4, [r3, #12]
    c568:	ldr	r3, [r3, #40]	; 0x28
    c56c:	cmp	r2, #0
    c570:	mul	r5, r5, r6
    c574:	sub	r3, r5, r3
    c578:	mla	lr, r5, r4, lr
    c57c:	mla	ip, r3, r4, ip
    c580:	bne	c554 <rb_bh_total_usage+0x24>
    c584:	b	c590 <rb_bh_total_usage+0x60>
    c588:	mov	ip, #0
    c58c:	mov	lr, #0
    c590:	cmp	r0, #0
    c594:	strne	lr, [r0]
    c598:	cmp	r1, #0
    c59c:	strne	ip, [r1]
    c5a0:	pop	{r4, r5, r6, sl, fp, pc}
    c5a4:	.word	0x000323bc

0000c5a8 <rb_get_sockerr>:
    c5a8:	push	{r4, r5, r6, r7, fp, lr}
    c5ac:	add	fp, sp, #16
    c5b0:	sub	sp, sp, #16
    c5b4:	mov	r5, r0
    c5b8:	mov	r0, #0
    c5bc:	str	r0, [sp, #12]
    c5c0:	mov	r0, #4
    c5c4:	str	r0, [sp, #8]
    c5c8:	ldrb	r7, [r5, #17]
    c5cc:	bl	5540 <__errno_location@plt>
    c5d0:	ldr	r6, [r0]
    c5d4:	tst	r7, #4
    c5d8:	bne	c5e8 <rb_get_sockerr+0x40>
    c5dc:	mov	r0, r6
    c5e0:	sub	sp, fp, #16
    c5e4:	pop	{r4, r5, r6, r7, fp, pc}
    c5e8:	mov	r4, r0
    c5ec:	ldr	r0, [r5, #12]
    c5f0:	add	r1, sp, #8
    c5f4:	add	r3, sp, #12
    c5f8:	mov	r2, #4
    c5fc:	str	r1, [sp]
    c600:	mov	r1, #1
    c604:	bl	54d4 <getsockopt@plt>
    c608:	mov	r1, r0
    c60c:	ldr	r0, [sp, #12]
    c610:	cmp	r0, #0
    c614:	moveq	r0, r6
    c618:	cmp	r1, #0
    c61c:	movne	r0, r6
    c620:	str	r0, [r4]
    c624:	sub	sp, fp, #16
    c628:	pop	{r4, r5, r6, r7, fp, pc}

0000c62c <rb_get_fd>:
    c62c:	cmp	r0, #0
    c630:	ldrne	r0, [r0, #12]
    c634:	mvneq	r0, #0
    c638:	bx	lr

0000c63c <rb_getmaxconnect>:
    c63c:	ldr	r0, [pc, #8]	; c64c <rb_getmaxconnect+0x10>
    c640:	ldr	r0, [pc, r0]
    c644:	ldr	r0, [r0]
    c648:	bx	lr
    c64c:	.word	0x0001fd24

0000c650 <rb_set_buffers>:
    c650:	push	{r4, r5, fp, lr}
    c654:	add	fp, sp, #8
    c658:	sub	sp, sp, #8
    c65c:	cmp	r0, #0
    c660:	str	r1, [sp, #4]
    c664:	beq	c690 <rb_set_buffers+0x40>
    c668:	mov	r4, r0
    c66c:	ldr	r0, [r0, #12]
    c670:	mov	r5, #4
    c674:	add	r3, sp, #4
    c678:	mov	r1, #1
    c67c:	mov	r2, #8
    c680:	str	r5, [sp]
    c684:	bl	54f8 <setsockopt@plt>
    c688:	cmp	r0, #0
    c68c:	beq	c69c <rb_set_buffers+0x4c>
    c690:	mov	r0, #0
    c694:	sub	sp, fp, #8
    c698:	pop	{r4, r5, fp, pc}
    c69c:	ldr	r0, [r4, #12]
    c6a0:	add	r3, sp, #4
    c6a4:	mov	r1, #1
    c6a8:	mov	r2, #7
    c6ac:	str	r5, [sp]
    c6b0:	bl	54f8 <setsockopt@plt>
    c6b4:	clz	r0, r0
    c6b8:	lsr	r0, r0, #5
    c6bc:	sub	sp, fp, #8
    c6c0:	pop	{r4, r5, fp, pc}

0000c6c4 <rb_set_nb>:
    c6c4:	push	{r4, r5, fp, lr}
    c6c8:	add	fp, sp, #8
    c6cc:	cmp	r0, #0
    c6d0:	beq	c72c <rb_set_nb+0x68>
    c6d4:	ldr	r4, [r0, #12]
    c6d8:	ldr	r1, [pc, #88]	; c738 <rb_set_nb+0x74>
    c6dc:	ldr	r1, [pc, r1]
    c6e0:	blx	r1
    c6e4:	mov	r5, r0
    c6e8:	cmp	r0, #0
    c6ec:	bne	c730 <rb_set_nb+0x6c>
    c6f0:	mov	r0, r4
    c6f4:	mov	r1, #3
    c6f8:	mov	r2, #0
    c6fc:	mov	r5, #0
    c700:	bl	545c <fcntl@plt>
    c704:	cmn	r0, #1
    c708:	beq	c730 <rb_set_nb+0x6c>
    c70c:	orr	r2, r0, #2048	; 0x800
    c710:	mov	r0, r4
    c714:	mov	r1, #4
    c718:	bl	545c <fcntl@plt>
    c71c:	mvn	r1, #0
    c720:	subs	r0, r0, r1
    c724:	movwne	r0, #1
    c728:	pop	{r4, r5, fp, pc}
    c72c:	mov	r5, #0
    c730:	mov	r0, r5
    c734:	pop	{r4, r5, fp, pc}
    c738:	.word	0x00032274

0000c73c <rb_setup_fd>:
    c73c:	ldr	r1, [pc, #4]	; c748 <rb_setup_fd+0xc>
    c740:	ldr	r1, [pc, r1]
    c744:	bx	r1
    c748:	.word	0x00032210

0000c74c <rb_settimeout>:
    c74c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    c750:	add	fp, sp, #24
    c754:	cmp	r0, #0
    c758:	beq	c864 <rb_settimeout+0x118>
    c75c:	ldr	r5, [r0, #44]	; 0x2c
    c760:	mov	r7, r2
    c764:	mov	r4, r0
    c768:	cmp	r2, #0
    c76c:	beq	c7e8 <rb_settimeout+0x9c>
    c770:	mov	r8, r3
    c774:	mov	r6, r1
    c778:	cmp	r5, #0
    c77c:	bne	c79c <rb_settimeout+0x50>
    c780:	mov	r0, #1
    c784:	mov	r1, #28
    c788:	bl	4e98 <calloc@plt>
    c78c:	cmp	r0, #0
    c790:	beq	c8d8 <rb_settimeout+0x18c>
    c794:	mov	r5, r0
    c798:	str	r0, [r4, #44]	; 0x2c
    c79c:	str	r4, [r5]
    c7a0:	bl	5084 <rb_current_time@plt>
    c7a4:	ldr	r2, [pc, #320]	; c8ec <rb_settimeout+0x1a0>
    c7a8:	mov	r1, #0
    c7ac:	add	r0, r0, r6
    c7b0:	ldr	r2, [pc, r2]
    c7b4:	str	r5, [r5, #4]
    c7b8:	str	r1, [r5, #8]
    c7bc:	add	r1, r5, #16
    c7c0:	str	r2, [r5, #12]
    c7c4:	stm	r1, {r0, r7, r8}
    c7c8:	add	r1, r5, #4
    c7cc:	cmp	r2, #0
    c7d0:	ldr	r0, [pc, #280]	; c8f0 <rb_settimeout+0x1a4>
    c7d4:	add	r0, pc, r0
    c7d8:	beq	c80c <rb_settimeout+0xc0>
    c7dc:	add	r2, r2, #4
    c7e0:	str	r1, [r2]
    c7e4:	b	c81c <rb_settimeout+0xd0>
    c7e8:	cmp	r5, #0
    c7ec:	beq	c864 <rb_settimeout+0x118>
    c7f0:	ldr	r0, [r5, #12]
    c7f4:	ldr	r1, [r5, #8]
    c7f8:	cmp	r0, #0
    c7fc:	beq	c868 <rb_settimeout+0x11c>
    c800:	str	r1, [r0, #4]
    c804:	ldr	r1, [r5, #8]
    c808:	b	c874 <rb_settimeout+0x128>
    c80c:	mov	r2, r0
    c810:	ldr	r3, [r2, #4]!
    c814:	cmp	r3, #0
    c818:	streq	r1, [r2]
    c81c:	str	r1, [r0]
    c820:	ldr	r1, [r0, #8]
    c824:	add	r1, r1, #1
    c828:	str	r1, [r0, #8]
    c82c:	ldr	r0, [pc, #192]	; c8f4 <rb_settimeout+0x1a8>
    c830:	ldr	r0, [pc, r0]
    c834:	cmp	r0, #0
    c838:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    c83c:	ldr	r1, [pc, #180]	; c8f8 <rb_settimeout+0x1ac>
    c840:	mov	r2, #0
    c844:	mov	r3, #5
    c848:	ldr	r1, [pc, r1]
    c84c:	ldr	r0, [pc, #168]	; c8fc <rb_settimeout+0x1b0>
    c850:	add	r0, pc, r0
    c854:	bl	536c <rb_event_add@plt>
    c858:	ldr	r1, [pc, #160]	; c900 <rb_settimeout+0x1b4>
    c85c:	add	r1, pc, r1
    c860:	str	r0, [r1]
    c864:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c868:	ldr	r2, [pc, #108]	; c8dc <rb_settimeout+0x190>
    c86c:	add	r2, pc, r2
    c870:	str	r1, [r2, #4]
    c874:	ldr	r7, [pc, #100]	; c8e0 <rb_settimeout+0x194>
    c878:	cmp	r1, #0
    c87c:	mov	r6, #0
    c880:	add	r7, pc, r7
    c884:	mov	r2, r7
    c888:	addne	r2, r1, #8
    c88c:	str	r0, [r2]
    c890:	str	r6, [r5, #8]
    c894:	str	r6, [r5, #12]
    c898:	ldr	r0, [r7, #8]
    c89c:	sub	r0, r0, #1
    c8a0:	str	r0, [r7, #8]
    c8a4:	mov	r0, r5
    c8a8:	bl	4f94 <free@plt>
    c8ac:	str	r6, [r4, #44]	; 0x2c
    c8b0:	ldr	r0, [r7, #8]
    c8b4:	cmp	r0, #0
    c8b8:	bne	c864 <rb_settimeout+0x118>
    c8bc:	ldr	r0, [pc, #32]	; c8e4 <rb_settimeout+0x198>
    c8c0:	ldr	r0, [pc, r0]
    c8c4:	bl	4d60 <rb_event_delete@plt>
    c8c8:	ldr	r0, [pc, #24]	; c8e8 <rb_settimeout+0x19c>
    c8cc:	add	r0, pc, r0
    c8d0:	str	r6, [r0]
    c8d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c8d8:	bl	5204 <rb_outofmemory@plt>
    c8dc:	.word	0x00032094
    c8e0:	.word	0x00032080
    c8e4:	.word	0x0003204c
    c8e8:	.word	0x00032040
    c8ec:	.word	0x00032150
    c8f0:	.word	0x0003212c
    c8f4:	.word	0x000320dc
    c8f8:	.word	0x0001facc
    c8fc:	.word	0x0000d494
    c900:	.word	0x000320b0

0000c904 <rb_checktimeouts>:
    c904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c908:	add	fp, sp, #28
    c90c:	sub	sp, sp, #4
    c910:	ldr	r7, [pc, #188]	; c9d4 <rb_checktimeouts+0xd0>
    c914:	ldr	r7, [pc, r7]
    c918:	cmp	r7, #0
    c91c:	beq	c9cc <rb_checktimeouts+0xc8>
    c920:	ldr	r8, [pc, #176]	; c9d8 <rb_checktimeouts+0xd4>
    c924:	mov	r9, #0
    c928:	add	r8, pc, r8
    c92c:	b	c978 <rb_checktimeouts+0x74>
    c930:	str	r1, [r8, #4]
    c934:	cmp	r1, #0
    c938:	mov	r2, r8
    c93c:	addne	r2, r1, #8
    c940:	str	r0, [r2]
    c944:	str	r9, [r5, #8]
    c948:	str	r9, [r5, #12]
    c94c:	ldr	r0, [r8, #8]
    c950:	sub	r0, r0, #1
    c954:	str	r0, [r8, #8]
    c958:	mov	r0, r5
    c95c:	str	r9, [r4, #44]	; 0x2c
    c960:	bl	4f94 <free@plt>
    c964:	mov	r0, r4
    c968:	mov	r1, r6
    c96c:	blx	sl
    c970:	cmp	r7, #0
    c974:	beq	c9cc <rb_checktimeouts+0xc8>
    c978:	ldr	r5, [r7]
    c97c:	ldr	r7, [r7, #8]
    c980:	ldr	r4, [r5]
    c984:	cmp	r4, #0
    c988:	beq	c970 <rb_checktimeouts+0x6c>
    c98c:	ldrb	r0, [r4, #16]
    c990:	tst	r0, #1
    c994:	beq	c970 <rb_checktimeouts+0x6c>
    c998:	ldr	r6, [r5, #16]
    c99c:	bl	5084 <rb_current_time@plt>
    c9a0:	cmp	r6, r0
    c9a4:	bge	c970 <rb_checktimeouts+0x6c>
    c9a8:	ldr	r0, [r5, #12]
    c9ac:	ldr	r1, [r5, #8]
    c9b0:	ldr	sl, [r5, #20]
    c9b4:	ldr	r6, [r5, #24]
    c9b8:	cmp	r0, #0
    c9bc:	beq	c930 <rb_checktimeouts+0x2c>
    c9c0:	str	r1, [r0, #4]
    c9c4:	ldr	r1, [r5, #8]
    c9c8:	b	c934 <rb_checktimeouts+0x30>
    c9cc:	sub	sp, fp, #28
    c9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9d4:	.word	0x00031fec
    c9d8:	.word	0x00031fd8

0000c9dc <rb_bind>:
    c9dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    c9e0:	add	fp, sp, #24
    c9e4:	sub	sp, sp, #16
    c9e8:	mov	r6, r0
    c9ec:	mov	r0, #1
    c9f0:	mov	r5, r1
    c9f4:	mov	r7, #4
    c9f8:	add	r3, sp, #4
    c9fc:	mov	r1, #1
    ca00:	mov	r2, #2
    ca04:	str	r0, [sp, #4]
    ca08:	ldr	r0, [r6, #12]
    ca0c:	str	r7, [sp]
    ca10:	bl	54f8 <setsockopt@plt>
    ca14:	cmp	r0, #0
    ca18:	beq	ca4c <rb_bind+0x70>
    ca1c:	mov	r4, r0
    ca20:	mov	r0, #0
    ca24:	ldr	r8, [r6, #12]
    ca28:	str	r7, [sp, #8]
    ca2c:	str	r0, [sp, #12]
    ca30:	ldrb	r5, [r6, #17]
    ca34:	bl	5540 <__errno_location@plt>
    ca38:	ldr	r7, [r0]
    ca3c:	tst	r5, #4
    ca40:	bne	ca70 <rb_bind+0x94>
    ca44:	mov	r0, r7
    ca48:	b	caac <rb_bind+0xd0>
    ca4c:	ldrh	r0, [r5]
    ca50:	mov	r2, #28
    ca54:	mov	r1, r5
    ca58:	cmp	r0, #2
    ca5c:	ldr	r0, [r6, #12]
    ca60:	movweq	r2, #16
    ca64:	bl	5198 <bind@plt>
    ca68:	mov	r4, r0
    ca6c:	b	cac4 <rb_bind+0xe8>
    ca70:	mov	r6, r0
    ca74:	add	r0, sp, #8
    ca78:	add	r3, sp, #12
    ca7c:	mov	r1, #1
    ca80:	mov	r2, #4
    ca84:	str	r0, [sp]
    ca88:	mov	r0, r8
    ca8c:	bl	54d4 <getsockopt@plt>
    ca90:	mov	r1, r0
    ca94:	ldr	r0, [sp, #12]
    ca98:	cmp	r0, #0
    ca9c:	moveq	r0, r7
    caa0:	cmp	r1, #0
    caa4:	movne	r0, r7
    caa8:	str	r0, [r6]
    caac:	bl	4c88 <strerror@plt>
    cab0:	mov	r2, r0
    cab4:	ldr	r0, [pc, #20]	; cad0 <rb_bind+0xf4>
    cab8:	mov	r1, r8
    cabc:	add	r0, pc, r0
    cac0:	bl	51a4 <rb_lib_log@plt>
    cac4:	mov	r0, r4
    cac8:	sub	sp, fp, #24
    cacc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cad0:	.word	0x0000d3ef

0000cad4 <rb_sctp_bindx>:
    cad4:	mvn	r0, #0
    cad8:	bx	lr

0000cadc <rb_inet_get_proto>:
    cadc:	mov	r0, #6
    cae0:	bx	lr

0000cae4 <rb_accept_tcp>:
    cae4:	push	{r4, r5, r6, r7, fp, lr}
    cae8:	add	fp, sp, #16
    caec:	cmp	r0, #0
    caf0:	beq	cb38 <rb_accept_tcp+0x54>
    caf4:	mov	r6, r1
    caf8:	mov	r5, r0
    cafc:	mov	r0, #1
    cb00:	mov	r1, #144	; 0x90
    cb04:	mov	r4, r3
    cb08:	mov	r7, r2
    cb0c:	bl	4e98 <calloc@plt>
    cb10:	cmp	r0, #0
    cb14:	beq	cb3c <rb_accept_tcp+0x58>
    cb18:	str	r0, [r5, #52]	; 0x34
    cb1c:	str	r7, [r0, #132]	; 0x84
    cb20:	str	r6, [r0, #136]	; 0x88
    cb24:	str	r4, [r0, #140]	; 0x8c
    cb28:	mov	r0, r5
    cb2c:	mov	r1, #0
    cb30:	pop	{r4, r5, r6, r7, fp, lr}
    cb34:	b	cb40 <rb_accept_tryaccept>
    cb38:	pop	{r4, r5, r6, r7, fp, pc}
    cb3c:	bl	5204 <rb_outofmemory@plt>

0000cb40 <rb_accept_tryaccept>:
    cb40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb44:	add	fp, sp, #28
    cb48:	sub	sp, sp, #4
    cb4c:	vpush	{d8-d9}
    cb50:	sub	sp, sp, #160	; 0xa0
    cb54:	vmov.i32	q4, #0	; 0x00000000
    cb58:	add	r5, sp, #32
    cb5c:	mov	r4, r0
    cb60:	mov	r1, #112	; 0x70
    cb64:	add	r2, sp, #28
    cb68:	add	r0, r5, #16
    cb6c:	add	sl, r5, #80	; 0x50
    cb70:	add	r8, r5, #96	; 0x60
    cb74:	str	r0, [sp, #24]
    cb78:	vst1.64	{d8-d9}, [r0]
    cb7c:	add	r0, r5, #32
    cb80:	vst1.64	{d8-d9}, [sl]
    cb84:	vst1.64	{d8-d9}, [r8]
    cb88:	str	r0, [sp, #20]
    cb8c:	vst1.64	{d8-d9}, [r0]
    cb90:	add	r0, r5, #48	; 0x30
    cb94:	str	r0, [sp, #16]
    cb98:	vst1.64	{d8-d9}, [r0]
    cb9c:	add	r0, r5, #64	; 0x40
    cba0:	str	r0, [sp, #12]
    cba4:	vst1.64	{d8-d9}, [r0]
    cba8:	mov	r0, r5
    cbac:	vst1.64	{d8-d9}, [r0], r1
    cbb0:	mov	r1, r5
    cbb4:	vst1.64	{d8-d9}, [r0]
    cbb8:	mov	r0, #128	; 0x80
    cbbc:	str	r0, [sp, #28]
    cbc0:	ldr	r0, [r4, #12]
    cbc4:	bl	500c <accept@plt>
    cbc8:	cmp	r0, #0
    cbcc:	bmi	cd98 <rb_accept_tryaccept+0x258>
    cbd0:	mov	r9, r0
    cbd4:	add	r0, r5, #8
    cbd8:	str	r0, [sp, #8]
    cbdc:	b	cc54 <rb_accept_tryaccept+0x114>
    cbe0:	ldr	r0, [pc, #484]	; cdcc <rb_accept_tryaccept+0x28c>
    cbe4:	mov	r1, r9
    cbe8:	add	r0, pc, r0
    cbec:	bl	51a4 <rb_lib_log@plt>
    cbf0:	mov	r0, r9
    cbf4:	bl	51c8 <close@plt>
    cbf8:	mov	r0, r5
    cbfc:	mov	r1, #112	; 0x70
    cc00:	vst1.64	{d8-d9}, [r8]
    cc04:	vst1.64	{d8-d9}, [sl]
    cc08:	add	r2, sp, #28
    cc0c:	vst1.64	{d8-d9}, [r0], r1
    cc10:	mov	r1, r5
    cc14:	vst1.64	{d8-d9}, [r0]
    cc18:	ldr	r0, [sp, #12]
    cc1c:	vst1.64	{d8-d9}, [r0]
    cc20:	ldr	r0, [sp, #16]
    cc24:	vst1.64	{d8-d9}, [r0]
    cc28:	ldr	r0, [sp, #20]
    cc2c:	vst1.64	{d8-d9}, [r0]
    cc30:	ldr	r0, [sp, #24]
    cc34:	vst1.64	{d8-d9}, [r0]
    cc38:	mov	r0, #128	; 0x80
    cc3c:	str	r0, [sp, #28]
    cc40:	ldr	r0, [r4, #12]
    cc44:	bl	500c <accept@plt>
    cc48:	mov	r9, r0
    cc4c:	cmp	r0, #0
    cc50:	bmi	cd98 <rb_accept_tryaccept+0x258>
    cc54:	ldrb	r0, [r4, #17]
    cc58:	ldr	r2, [pc, #360]	; cdc8 <rb_accept_tryaccept+0x288>
    cc5c:	and	r0, r0, #128	; 0x80
    cc60:	add	r2, pc, r2
    cc64:	orr	r1, r0, #4
    cc68:	mov	r0, r9
    cc6c:	bl	52f4 <rb_open@plt>
    cc70:	cmp	r0, #0
    cc74:	beq	cbe0 <rb_accept_tryaccept+0xa0>
    cc78:	ldr	r7, [r0, #12]
    cc7c:	ldr	r1, [pc, #340]	; cdd8 <rb_accept_tryaccept+0x298>
    cc80:	mov	r6, r0
    cc84:	ldr	r1, [pc, r1]
    cc88:	blx	r1
    cc8c:	cmp	r0, #0
    cc90:	bne	ccdc <rb_accept_tryaccept+0x19c>
    cc94:	mov	r0, r7
    cc98:	mov	r1, #3
    cc9c:	mov	r2, #0
    cca0:	bl	545c <fcntl@plt>
    cca4:	cmn	r0, #1
    cca8:	beq	ccc4 <rb_accept_tryaccept+0x184>
    ccac:	orr	r2, r0, #2048	; 0x800
    ccb0:	mov	r0, r7
    ccb4:	mov	r1, #4
    ccb8:	bl	545c <fcntl@plt>
    ccbc:	cmn	r0, #1
    ccc0:	bne	ccdc <rb_accept_tryaccept+0x19c>
    ccc4:	ldr	r1, [r6, #12]
    ccc8:	ldr	r0, [pc, #268]	; cddc <rb_accept_tryaccept+0x29c>
    cccc:	add	r0, pc, r0
    ccd0:	bl	51a4 <rb_lib_log@plt>
    ccd4:	mov	r0, r6
    ccd8:	bl	5108 <rb_close@plt>
    ccdc:	ldr	r0, [sp, #40]	; 0x28
    cce0:	ldr	r1, [sp, #44]	; 0x2c
    cce4:	orrs	r0, r0, r1
    cce8:	bne	cd20 <rb_accept_tryaccept+0x1e0>
    ccec:	ldrh	r0, [sp, #32]
    ccf0:	cmp	r0, #10
    ccf4:	ldreq	r0, [sp, #48]	; 0x30
    ccf8:	cmneq	r0, #65536	; 0x10000
    ccfc:	bne	cd20 <rb_accept_tryaccept+0x1e0>
    cd00:	mov	r0, #2
    cd04:	mov	r1, #0
    cd08:	strh	r0, [sp, #32]
    cd0c:	ldr	r0, [sp, #52]	; 0x34
    cd10:	str	r0, [sp, #36]	; 0x24
    cd14:	ldr	r0, [sp, #8]
    cd18:	str	r1, [r0, #4]
    cd1c:	str	r1, [r0]
    cd20:	ldr	r0, [r4, #52]	; 0x34
    cd24:	ldr	r7, [r0, #136]	; 0x88
    cd28:	cmp	r7, #0
    cd2c:	beq	cd4c <rb_accept_tryaccept+0x20c>
    cd30:	ldr	r3, [r0, #140]	; 0x8c
    cd34:	ldr	r2, [sp, #28]
    cd38:	mov	r0, r6
    cd3c:	mov	r1, r5
    cd40:	blx	r7
    cd44:	cmp	r0, #0
    cd48:	beq	cbf8 <rb_accept_tryaccept+0xb8>
    cd4c:	ldrb	r0, [r4, #17]
    cd50:	tst	r0, #32
    cd54:	bne	cd80 <rb_accept_tryaccept+0x240>
    cd58:	ldr	r0, [r4, #52]	; 0x34
    cd5c:	ldr	r3, [sp, #28]
    cd60:	mov	r1, #0
    cd64:	mov	r2, r5
    cd68:	ldr	r7, [r0, #132]	; 0x84
    cd6c:	ldr	r0, [r0, #140]	; 0x8c
    cd70:	str	r0, [sp]
    cd74:	mov	r0, r6
    cd78:	blx	r7
    cd7c:	b	cbf8 <rb_accept_tryaccept+0xb8>
    cd80:	ldr	r3, [sp, #28]
    cd84:	mov	r0, r4
    cd88:	mov	r1, r6
    cd8c:	mov	r2, r5
    cd90:	bl	10ef8 <rb_ssl_accept_setup>
    cd94:	b	cbf8 <rb_accept_tryaccept+0xb8>
    cd98:	ldr	r7, [pc, #48]	; cdd0 <rb_accept_tryaccept+0x290>
    cd9c:	mov	r0, r4
    cda0:	mov	r1, #1
    cda4:	mov	r3, #0
    cda8:	ldr	r7, [pc, r7]
    cdac:	ldr	r2, [pc, #32]	; cdd4 <rb_accept_tryaccept+0x294>
    cdb0:	add	r2, pc, r2
    cdb4:	blx	r7
    cdb8:	sub	sp, fp, #48	; 0x30
    cdbc:	vpop	{d8-d9}
    cdc0:	add	sp, sp, #4
    cdc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdc8:	.word	0x0000d28a
    cdcc:	.word	0x0000d316
    cdd0:	.word	0x00031ba0
    cdd4:	.word	0xfffffd88
    cdd8:	.word	0x00031ccc
    cddc:	.word	0x0000d278

0000cde0 <rb_connect_tcp>:
    cde0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    cde4:	add	fp, sp, #24
    cde8:	cmp	r0, #0
    cdec:	beq	ceb0 <rb_connect_tcp+0xd0>
    cdf0:	ldr	r8, [fp, #12]
    cdf4:	ldr	r9, [fp, #8]
    cdf8:	mov	r7, r1
    cdfc:	mov	r4, r0
    ce00:	mov	r0, #1
    ce04:	mov	r1, #268	; 0x10c
    ce08:	mov	r5, r3
    ce0c:	mov	r6, r2
    ce10:	bl	4e98 <calloc@plt>
    ce14:	cmp	r0, #0
    ce18:	beq	cfa0 <rb_connect_tcp+0x1c0>
    ce1c:	str	r0, [r4, #48]	; 0x30
    ce20:	str	r5, [r0, #260]	; 0x104
    ce24:	str	r9, [r0, #264]	; 0x108
    ce28:	add	r0, r0, #128	; 0x80
    ce2c:	mov	r1, r7
    ce30:	mov	r2, #128	; 0x80
    ce34:	bl	509c <memcpy@plt>
    ce38:	cmp	r6, #0
    ce3c:	beq	ce64 <rb_connect_tcp+0x84>
    ce40:	ldrh	r0, [r6]
    ce44:	mov	r2, #28
    ce48:	mov	r1, r6
    ce4c:	cmp	r0, #2
    ce50:	ldr	r0, [r4, #12]
    ce54:	movweq	r2, #16
    ce58:	bl	5198 <bind@plt>
    ce5c:	cmn	r0, #1
    ce60:	ble	cf50 <rb_connect_tcp+0x170>
    ce64:	ldr	r2, [pc, #312]	; cfa4 <rb_connect_tcp+0x1c4>
    ce68:	mov	r0, r4
    ce6c:	mov	r1, r8
    ce70:	mov	r3, #0
    ce74:	add	r2, pc, r2
    ce78:	bl	4cd0 <rb_settimeout@plt>
    ce7c:	ldr	r1, [r4, #48]	; 0x30
    ce80:	ldr	r0, [r4, #12]
    ce84:	mov	r2, #28
    ce88:	ldrh	r3, [r1, #128]!	; 0x80
    ce8c:	cmp	r3, #2
    ce90:	movweq	r2, #16
    ce94:	bl	4cb8 <connect@plt>
    ce98:	cmn	r0, #1
    ce9c:	ble	ceb4 <rb_connect_tcp+0xd4>
    cea0:	mov	r0, r4
    cea4:	mov	r1, #0
    cea8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    ceac:	b	cfb0 <rb_connect_callback>
    ceb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    ceb4:	bl	5540 <__errno_location@plt>
    ceb8:	ldr	r0, [r0]
    cebc:	sub	r1, r0, #85	; 0x55
    cec0:	cmp	r1, #30
    cec4:	bhi	cf60 <rb_connect_tcp+0x180>
    cec8:	add	r0, pc, #4
    cecc:	ldr	r1, [r0, r1, lsl #2]
    ced0:	add	pc, r0, r1
    ced4:	.word	0x00000098
    ced8:	.word	0x000000bc
    cedc:	.word	0x000000bc
    cee0:	.word	0x000000bc
    cee4:	.word	0x000000bc
    cee8:	.word	0x000000bc
    ceec:	.word	0x000000bc
    cef0:	.word	0x000000bc
    cef4:	.word	0x000000bc
    cef8:	.word	0x000000bc
    cefc:	.word	0x000000bc
    cf00:	.word	0x000000bc
    cf04:	.word	0x000000bc
    cf08:	.word	0x000000bc
    cf0c:	.word	0x000000bc
    cf10:	.word	0x000000bc
    cf14:	.word	0x000000bc
    cf18:	.word	0x000000bc
    cf1c:	.word	0x000000bc
    cf20:	.word	0x000000bc
    cf24:	.word	0x00000098
    cf28:	.word	0xffffffcc
    cf2c:	.word	0x000000bc
    cf30:	.word	0x000000bc
    cf34:	.word	0x000000bc
    cf38:	.word	0x000000bc
    cf3c:	.word	0x000000bc
    cf40:	.word	0x000000bc
    cf44:	.word	0x000000bc
    cf48:	.word	0x000000bc
    cf4c:	.word	0x00000098
    cf50:	mov	r0, r4
    cf54:	mov	r1, #1
    cf58:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    cf5c:	b	cfb0 <rb_connect_callback>
    cf60:	cmp	r0, #4
    cf64:	cmpne	r0, #11
    cf68:	bne	cf90 <rb_connect_tcp+0x1b0>
    cf6c:	ldr	ip, [pc, #52]	; cfa8 <rb_connect_tcp+0x1c8>
    cf70:	mov	r0, r4
    cf74:	mov	r1, #2
    cf78:	mov	r3, #0
    cf7c:	ldr	ip, [pc, ip]
    cf80:	ldr	r2, [pc, #36]	; cfac <rb_connect_tcp+0x1cc>
    cf84:	add	r2, pc, r2
    cf88:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    cf8c:	bx	ip
    cf90:	mov	r0, r4
    cf94:	mov	r1, #4
    cf98:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    cf9c:	b	cfb0 <rb_connect_callback>
    cfa0:	bl	5204 <rb_outofmemory@plt>
    cfa4:	.word	0x00000244
    cfa8:	.word	0x000319cc
    cfac:	.word	0x0000018c

0000cfb0 <rb_connect_callback>:
    cfb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfb4:	add	fp, sp, #28
    cfb8:	sub	sp, sp, #4
    cfbc:	mov	r4, r1
    cfc0:	mov	r5, r0
    cfc4:	bl	5540 <__errno_location@plt>
    cfc8:	cmp	r5, #0
    cfcc:	beq	d030 <rb_connect_callback+0x80>
    cfd0:	mov	r6, r0
    cfd4:	ldr	r0, [r5, #48]	; 0x30
    cfd8:	cmp	r0, #0
    cfdc:	beq	d030 <rb_connect_callback+0x80>
    cfe0:	ldr	r3, [r0, #260]	; 0x104
    cfe4:	cmp	r3, #0
    cfe8:	beq	d030 <rb_connect_callback+0x80>
    cfec:	mov	r1, #0
    cff0:	ldr	r8, [r6]
    cff4:	str	r1, [r0, #260]	; 0x104
    cff8:	ldr	r9, [r0, #264]	; 0x108
    cffc:	ldr	r0, [r5, #44]	; 0x2c
    d000:	cmp	r0, #0
    d004:	beq	d098 <rb_connect_callback+0xe8>
    d008:	ldr	r1, [r0, #12]
    d00c:	ldr	r2, [r0, #8]
    d010:	ldr	r7, [pc, #156]	; d0b4 <rb_connect_callback+0x104>
    d014:	str	r3, [sp]
    d018:	cmp	r1, #0
    d01c:	add	r7, pc, r7
    d020:	beq	d038 <rb_connect_callback+0x88>
    d024:	str	r2, [r1, #4]
    d028:	ldr	r2, [r0, #8]
    d02c:	b	d03c <rb_connect_callback+0x8c>
    d030:	sub	sp, fp, #28
    d034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d038:	str	r2, [r7, #4]
    d03c:	cmp	r2, #0
    d040:	mov	r3, r7
    d044:	mov	sl, #0
    d048:	addne	r3, r2, #8
    d04c:	str	r1, [r3]
    d050:	str	sl, [r0, #8]
    d054:	str	sl, [r0, #12]
    d058:	ldr	r1, [r7, #8]
    d05c:	sub	r1, r1, #1
    d060:	str	r1, [r7, #8]
    d064:	bl	4f94 <free@plt>
    d068:	str	sl, [r5, #44]	; 0x2c
    d06c:	ldr	r3, [sp]
    d070:	ldr	r0, [r7, #8]
    d074:	cmp	r0, #0
    d078:	bne	d098 <rb_connect_callback+0xe8>
    d07c:	ldr	r0, [pc, #52]	; d0b8 <rb_connect_callback+0x108>
    d080:	ldr	r0, [pc, r0]
    d084:	bl	4d60 <rb_event_delete@plt>
    d088:	ldr	r3, [sp]
    d08c:	ldr	r0, [pc, #40]	; d0bc <rb_connect_callback+0x10c>
    d090:	add	r0, pc, r0
    d094:	str	sl, [r0]
    d098:	str	r8, [r6]
    d09c:	mov	r0, r5
    d0a0:	mov	r1, r4
    d0a4:	mov	r2, r9
    d0a8:	sub	sp, fp, #28
    d0ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0b0:	bx	r3
    d0b4:	.word	0x000318e4
    d0b8:	.word	0x0003188c
    d0bc:	.word	0x0003187c

0000d0c0 <rb_connect_timeout>:
    d0c0:	mov	r1, #3
    d0c4:	b	cfb0 <rb_connect_callback>

0000d0c8 <rb_ignore_errno>:
    d0c8:	sub	r2, r0, #85	; 0x55
    d0cc:	mov	r1, r0
    d0d0:	mov	r0, #1
    d0d4:	cmp	r2, #30
    d0d8:	bhi	d0f0 <rb_ignore_errno+0x28>
    d0dc:	movw	r3, #1
    d0e0:	mov	ip, #1
    d0e4:	movt	r3, #16400	; 0x4010
    d0e8:	tst	r3, ip, lsl r2
    d0ec:	bxne	lr
    d0f0:	cmp	r1, #4
    d0f4:	cmpne	r1, #11
    d0f8:	bne	d100 <rb_ignore_errno+0x38>
    d0fc:	bx	lr
    d100:	mov	r0, #0
    d104:	bx	lr

0000d108 <rb_setselect>:
    d108:	ldr	ip, [pc, #4]	; d114 <rb_setselect+0xc>
    d10c:	ldr	ip, [pc, ip]
    d110:	bx	ip
    d114:	.word	0x0003183c

0000d118 <rb_connect_outcome>:
    d118:	push	{r4, r5, fp, lr}
    d11c:	add	fp, sp, #8
    d120:	sub	sp, sp, #16
    d124:	mov	r4, r0
    d128:	mov	r0, #0
    d12c:	str	r0, [sp, #12]
    d130:	mov	r0, #4
    d134:	cmp	r4, #0
    d138:	str	r0, [sp, #8]
    d13c:	beq	d1b4 <rb_connect_outcome+0x9c>
    d140:	ldr	r0, [r4, #48]	; 0x30
    d144:	cmp	r0, #0
    d148:	beq	d1b4 <rb_connect_outcome+0x9c>
    d14c:	ldr	r0, [r0, #260]	; 0x104
    d150:	cmp	r0, #0
    d154:	beq	d1b4 <rb_connect_outcome+0x9c>
    d158:	ldr	r0, [r4, #12]
    d15c:	add	r1, sp, #8
    d160:	add	r3, sp, #12
    d164:	mov	r2, #4
    d168:	str	r1, [sp]
    d16c:	mov	r1, #1
    d170:	bl	54d4 <getsockopt@plt>
    d174:	cmp	r0, #0
    d178:	bmi	d194 <rb_connect_outcome+0x7c>
    d17c:	ldr	r5, [sp, #12]
    d180:	cmp	r5, #0
    d184:	beq	d194 <rb_connect_outcome+0x7c>
    d188:	bl	5540 <__errno_location@plt>
    d18c:	str	r5, [r0]
    d190:	b	d1a8 <rb_connect_outcome+0x90>
    d194:	cmn	r0, #1
    d198:	ble	d1a8 <rb_connect_outcome+0x90>
    d19c:	mov	r0, r4
    d1a0:	mov	r1, #0
    d1a4:	b	d1b0 <rb_connect_outcome+0x98>
    d1a8:	mov	r0, r4
    d1ac:	mov	r1, #4
    d1b0:	bl	cfb0 <rb_connect_callback>
    d1b4:	sub	sp, fp, #8
    d1b8:	pop	{r4, r5, fp, pc}

0000d1bc <rb_connect_sctp>:
    d1bc:	mov	r1, #4
    d1c0:	b	cfb0 <rb_connect_callback>

0000d1c4 <rb_connect_sockaddr>:
    d1c4:	cmp	r0, #0
    d1c8:	moveq	r0, #0
    d1cc:	bxeq	lr
    d1d0:	push	{fp, lr}
    d1d4:	mov	fp, sp
    d1d8:	ldr	r0, [r0, #48]	; 0x30
    d1dc:	add	r3, r0, #128	; 0x80
    d1e0:	mov	r0, r1
    d1e4:	mov	r1, r3
    d1e8:	bl	509c <memcpy@plt>
    d1ec:	mov	r0, #1
    d1f0:	pop	{fp, pc}

0000d1f4 <rb_errstr>:
    d1f4:	cmp	r0, #6
    d1f8:	bls	d208 <rb_errstr+0x14>
    d1fc:	ldr	r0, [pc, #20]	; d218 <rb_errstr+0x24>
    d200:	add	r0, pc, r0
    d204:	bx	lr
    d208:	ldr	r1, [pc, #12]	; d21c <rb_errstr+0x28>
    d20c:	add	r1, pc, r1
    d210:	ldr	r0, [r1, r0, lsl #2]
    d214:	bx	lr
    d218:	.word	0x0000caf5
    d21c:	.word	0x0001e828

0000d220 <rb_socketpair>:
    d220:	push	{r4, r5, r6, r7, fp, lr}
    d224:	add	fp, sp, #16
    d228:	sub	sp, sp, #8
    d22c:	mov	r4, r3
    d230:	ldr	r3, [pc, #436]	; d3ec <rb_socketpair+0x1cc>
    d234:	ldr	r3, [pc, r3]
    d238:	ldr	r3, [r3]
    d23c:	ldr	r7, [pc, #428]	; d3f0 <rb_socketpair+0x1d0>
    d240:	ldr	r7, [pc, r7]
    d244:	cmp	r7, r3
    d248:	bge	d384 <rb_socketpair+0x164>
    d24c:	mov	r3, sp
    d250:	bl	4e20 <socketpair@plt>
    d254:	mvn	r5, #0
    d258:	cmp	r0, #0
    d25c:	bne	d394 <rb_socketpair+0x174>
    d260:	ldr	r6, [fp, #12]
    d264:	ldr	r0, [sp]
    d268:	ldr	r7, [fp, #8]
    d26c:	mov	r1, #4
    d270:	mov	r2, r6
    d274:	bl	52f4 <rb_open@plt>
    d278:	str	r0, [r4]
    d27c:	mov	r1, #4
    d280:	mov	r2, r6
    d284:	ldr	r0, [sp, #4]
    d288:	bl	52f4 <rb_open@plt>
    d28c:	str	r0, [r7]
    d290:	mov	r1, r0
    d294:	ldr	r0, [r4]
    d298:	cmp	r0, #0
    d29c:	beq	d3a0 <rb_socketpair+0x180>
    d2a0:	cmp	r1, #0
    d2a4:	beq	d3ac <rb_socketpair+0x18c>
    d2a8:	ldr	r6, [r0, #12]
    d2ac:	ldr	r1, [pc, #320]	; d3f4 <rb_socketpair+0x1d4>
    d2b0:	ldr	r1, [pc, r1]
    d2b4:	blx	r1
    d2b8:	cmp	r0, #0
    d2bc:	bne	d2f0 <rb_socketpair+0xd0>
    d2c0:	mov	r0, r6
    d2c4:	mov	r1, #3
    d2c8:	mov	r2, #0
    d2cc:	bl	545c <fcntl@plt>
    d2d0:	cmn	r0, #1
    d2d4:	beq	d3b4 <rb_socketpair+0x194>
    d2d8:	orr	r2, r0, #2048	; 0x800
    d2dc:	mov	r0, r6
    d2e0:	mov	r1, #4
    d2e4:	bl	545c <fcntl@plt>
    d2e8:	cmn	r0, #1
    d2ec:	beq	d3b4 <rb_socketpair+0x194>
    d2f0:	ldr	r0, [r7]
    d2f4:	cmp	r0, #0
    d2f8:	beq	d34c <rb_socketpair+0x12c>
    d2fc:	ldr	r6, [r0, #12]
    d300:	ldr	r1, [pc, #244]	; d3fc <rb_socketpair+0x1dc>
    d304:	ldr	r1, [pc, r1]
    d308:	blx	r1
    d30c:	mov	r5, #0
    d310:	cmp	r0, #0
    d314:	bne	d394 <rb_socketpair+0x174>
    d318:	mov	r0, r6
    d31c:	mov	r1, #3
    d320:	mov	r2, #0
    d324:	mov	r5, #0
    d328:	bl	545c <fcntl@plt>
    d32c:	cmn	r0, #1
    d330:	beq	d34c <rb_socketpair+0x12c>
    d334:	orr	r2, r0, #2048	; 0x800
    d338:	mov	r0, r6
    d33c:	mov	r1, #4
    d340:	bl	545c <fcntl@plt>
    d344:	cmn	r0, #1
    d348:	bne	d394 <rb_socketpair+0x174>
    d34c:	ldr	r5, [sp, #4]
    d350:	bl	5540 <__errno_location@plt>
    d354:	ldr	r0, [r0]
    d358:	bl	4c88 <strerror@plt>
    d35c:	mov	r2, r0
    d360:	ldr	r0, [pc, #152]	; d400 <rb_socketpair+0x1e0>
    d364:	mov	r1, r5
    d368:	add	r0, pc, r0
    d36c:	bl	51a4 <rb_lib_log@plt>
    d370:	ldr	r0, [r4]
    d374:	bl	5108 <rb_close@plt>
    d378:	ldr	r0, [r7]
    d37c:	bl	5108 <rb_close@plt>
    d380:	b	d390 <rb_socketpair+0x170>
    d384:	bl	5540 <__errno_location@plt>
    d388:	mov	r1, #23
    d38c:	str	r1, [r0]
    d390:	mvn	r5, #0
    d394:	mov	r0, r5
    d398:	sub	sp, fp, #16
    d39c:	pop	{r4, r5, r6, r7, fp, pc}
    d3a0:	cmp	r1, #0
    d3a4:	beq	d394 <rb_socketpair+0x174>
    d3a8:	mov	r0, r1
    d3ac:	bl	5108 <rb_close@plt>
    d3b0:	b	d394 <rb_socketpair+0x174>
    d3b4:	ldr	r6, [sp]
    d3b8:	bl	5540 <__errno_location@plt>
    d3bc:	ldr	r0, [r0]
    d3c0:	bl	4c88 <strerror@plt>
    d3c4:	mov	r2, r0
    d3c8:	ldr	r0, [pc, #40]	; d3f8 <rb_socketpair+0x1d8>
    d3cc:	mov	r1, r6
    d3d0:	add	r0, pc, r0
    d3d4:	bl	51a4 <rb_lib_log@plt>
    d3d8:	ldr	r0, [r4]
    d3dc:	bl	5108 <rb_close@plt>
    d3e0:	ldr	r0, [r7]
    d3e4:	bl	5108 <rb_close@plt>
    d3e8:	b	d394 <rb_socketpair+0x174>
    d3ec:	.word	0x0001f130
    d3f0:	.word	0x000316d0
    d3f4:	.word	0x000316a0
    d3f8:	.word	0x0000c93b
    d3fc:	.word	0x0003164c
    d400:	.word	0x0000c9a3

0000d404 <rb_open>:
    d404:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d408:	add	fp, sp, #24
    d40c:	eor	r7, r0, r0, lsr #12
    d410:	mov	r4, r2
    d414:	mov	r8, r1
    d418:	mov	r5, r0
    d41c:	cmn	r0, #1
    d420:	ble	d468 <rb_open+0x64>
    d424:	ldr	r1, [pc, #360]	; d594 <rb_open+0x190>
    d428:	mov	r0, r7
    d42c:	bfc	r0, #12, #20
    d430:	eor	r0, r0, r5, lsr #24
    d434:	ldr	r1, [pc, r1]
    d438:	add	r0, r0, r0, lsl #1
    d43c:	ldr	r1, [r1]
    d440:	ldr	r0, [r1, r0, lsl #2]
    d444:	cmp	r0, #0
    d448:	beq	d468 <rb_open+0x64>
    d44c:	ldr	r6, [r0]
    d450:	ldr	r1, [r6, #12]
    d454:	cmp	r1, r5
    d458:	beq	d4c0 <rb_open+0xbc>
    d45c:	ldr	r0, [r0, #8]
    d460:	cmp	r0, #0
    d464:	bne	d44c <rb_open+0x48>
    d468:	ldr	r0, [pc, #296]	; d598 <rb_open+0x194>
    d46c:	ldr	r0, [pc, r0]
    d470:	bl	51d4 <rb_bh_alloc@plt>
    d474:	str	r5, [r0, #12]
    d478:	mov	r6, r0
    d47c:	mov	r1, #0
    d480:	ldr	r0, [pc, #276]	; d59c <rb_open+0x198>
    d484:	ldr	r0, [pc, r0]
    d488:	ldr	r0, [r0]
    d48c:	str	r1, [r6, #4]
    d490:	eor	r1, r7, r5, asr #24
    d494:	str	r6, [r6]
    d498:	bfc	r1, #12, #20
    d49c:	add	r1, r1, r1, lsl #1
    d4a0:	mov	r2, r0
    d4a4:	ldr	r3, [r2, r1, lsl #2]!
    d4a8:	cmp	r3, #0
    d4ac:	str	r3, [r6, #8]
    d4b0:	beq	d4cc <rb_open+0xc8>
    d4b4:	add	r3, r3, #4
    d4b8:	str	r6, [r3]
    d4bc:	b	d4dc <rb_open+0xd8>
    d4c0:	cmp	r6, #0
    d4c4:	bne	d4f0 <rb_open+0xec>
    d4c8:	b	d468 <rb_open+0x64>
    d4cc:	add	r3, r0, r1, lsl #2
    d4d0:	ldr	r7, [r3, #4]!
    d4d4:	cmp	r7, #0
    d4d8:	streq	r6, [r3]
    d4dc:	add	r0, r0, r1, lsl #2
    d4e0:	str	r6, [r2]
    d4e4:	ldr	r1, [r0, #8]
    d4e8:	add	r1, r1, #1
    d4ec:	str	r1, [r0, #8]
    d4f0:	ldrb	r0, [r6, #16]
    d4f4:	tst	r0, #1
    d4f8:	bne	d558 <rb_open+0x154>
    d4fc:	cmp	r4, #0
    d500:	orr	r0, r0, #1
    d504:	strb	r8, [r6, #17]
    d508:	str	r5, [r6, #12]
    d50c:	strb	r0, [r6, #16]
    d510:	beq	d538 <rb_open+0x134>
    d514:	mov	r0, #128	; 0x80
    d518:	bl	5228 <malloc@plt>
    d51c:	cmp	r0, #0
    d520:	beq	d590 <rb_open+0x18c>
    d524:	mov	r1, r4
    d528:	mov	r2, #128	; 0x80
    d52c:	mov	r5, r0
    d530:	bl	4f4c <rb_strlcpy@plt>
    d534:	str	r5, [r6, #24]
    d538:	ldr	r0, [pc, #104]	; d5a8 <rb_open+0x1a4>
    d53c:	ldr	r0, [pc, r0]
    d540:	ldr	r1, [pc, #100]	; d5ac <rb_open+0x1a8>
    d544:	add	r0, r0, #1
    d548:	add	r1, pc, r1
    d54c:	str	r0, [r1]
    d550:	mov	r0, r6
    d554:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d558:	cmp	r6, #0
    d55c:	beq	d56c <rb_open+0x168>
    d560:	ldr	r2, [r6, #24]
    d564:	cmp	r2, #0
    d568:	bne	d574 <rb_open+0x170>
    d56c:	ldr	r2, [pc, #44]	; d5a0 <rb_open+0x19c>
    d570:	add	r2, pc, r2
    d574:	ldr	r0, [pc, #40]	; d5a4 <rb_open+0x1a0>
    d578:	mov	r1, r5
    d57c:	add	r0, pc, r0
    d580:	bl	51a4 <rb_lib_log@plt>
    d584:	mov	r6, #0
    d588:	mov	r0, r6
    d58c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d590:	bl	5204 <rb_outofmemory@plt>
    d594:	.word	0x0001ef50
    d598:	.word	0x000314ac
    d59c:	.word	0x0001ef00
    d5a0:	.word	0x0000c70e
    d5a4:	.word	0x0000c842
    d5a8:	.word	0x000313d4
    d5ac:	.word	0x000313c8

0000d5b0 <rb_close>:
    d5b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    d5b4:	add	fp, sp, #24
    d5b8:	cmp	r0, #0
    d5bc:	beq	d79c <rb_close+0x1ec>
    d5c0:	ldrb	r7, [r0, #17]
    d5c4:	ldr	r8, [r0, #12]
    d5c8:	mov	r5, r0
    d5cc:	ands	r9, r7, #16
    d5d0:	beq	d5e0 <rb_close+0x30>
    d5d4:	mov	r0, r8
    d5d8:	mov	r1, #0
    d5dc:	bl	4e8c <listen@plt>
    d5e0:	ldr	r6, [pc, #440]	; d7a0 <rb_close+0x1f0>
    d5e4:	mov	r0, r5
    d5e8:	mov	r1, #3
    d5ec:	mov	r2, #0
    d5f0:	mov	r3, #0
    d5f4:	ldr	r6, [pc, r6]
    d5f8:	blx	r6
    d5fc:	ldr	r0, [r5, #44]	; 0x2c
    d600:	cmp	r0, #0
    d604:	beq	d684 <rb_close+0xd4>
    d608:	ldr	r1, [r0, #12]
    d60c:	ldr	r2, [r0, #8]
    d610:	ldr	r4, [pc, #396]	; d7a4 <rb_close+0x1f4>
    d614:	cmp	r1, #0
    d618:	add	r4, pc, r4
    d61c:	beq	d62c <rb_close+0x7c>
    d620:	str	r2, [r1, #4]
    d624:	ldr	r2, [r0, #8]
    d628:	b	d630 <rb_close+0x80>
    d62c:	str	r2, [r4, #4]
    d630:	cmp	r2, #0
    d634:	mov	r3, r4
    d638:	mov	r6, #0
    d63c:	addne	r3, r2, #8
    d640:	str	r1, [r3]
    d644:	str	r6, [r0, #8]
    d648:	str	r6, [r0, #12]
    d64c:	ldr	r1, [r4, #8]
    d650:	sub	r1, r1, #1
    d654:	str	r1, [r4, #8]
    d658:	bl	4f94 <free@plt>
    d65c:	str	r6, [r5, #44]	; 0x2c
    d660:	ldr	r0, [r4, #8]
    d664:	cmp	r0, #0
    d668:	bne	d684 <rb_close+0xd4>
    d66c:	ldr	r0, [pc, #308]	; d7a8 <rb_close+0x1f8>
    d670:	ldr	r0, [pc, r0]
    d674:	bl	4d60 <rb_event_delete@plt>
    d678:	ldr	r0, [pc, #300]	; d7ac <rb_close+0x1fc>
    d67c:	add	r0, pc, r0
    d680:	str	r6, [r0]
    d684:	ldr	r0, [r5, #52]	; 0x34
    d688:	cmp	r0, #0
    d68c:	beq	d694 <rb_close+0xe4>
    d690:	bl	4f94 <free@plt>
    d694:	ldr	r0, [r5, #48]	; 0x30
    d698:	cmp	r0, #0
    d69c:	beq	d6a4 <rb_close+0xf4>
    d6a0:	bl	4f94 <free@plt>
    d6a4:	ldr	r0, [r5, #24]
    d6a8:	cmp	r0, #0
    d6ac:	beq	d6b4 <rb_close+0x104>
    d6b0:	bl	4f94 <free@plt>
    d6b4:	tst	r7, #32
    d6b8:	beq	d6c4 <rb_close+0x114>
    d6bc:	mov	r0, r5
    d6c0:	bl	100a4 <rb_ssl_shutdown>
    d6c4:	ldrb	r0, [r5, #16]
    d6c8:	tst	r0, #1
    d6cc:	beq	d784 <rb_close+0x1d4>
    d6d0:	ldr	r1, [r5, #12]
    d6d4:	ldr	r2, [r5, #8]
    d6d8:	ldr	r3, [r5, #4]
    d6dc:	eor	r7, r1, r1, lsr #12
    d6e0:	cmp	r2, #0
    d6e4:	eor	r1, r7, r1, asr #24
    d6e8:	ldr	r7, [pc, #192]	; d7b0 <rb_close+0x200>
    d6ec:	bfc	r1, #12, #20
    d6f0:	ldr	r7, [pc, r7]
    d6f4:	add	r1, r1, r1, lsl #1
    d6f8:	ldr	r7, [r7]
    d6fc:	add	r7, r7, r1, lsl #2
    d700:	beq	d710 <rb_close+0x160>
    d704:	str	r3, [r2, #4]
    d708:	ldr	r3, [r5, #4]
    d70c:	b	d714 <rb_close+0x164>
    d710:	str	r3, [r7, #4]
    d714:	cmp	r3, #0
    d718:	mov	r1, r7
    d71c:	addne	r1, r3, #8
    d720:	str	r2, [r1]
    d724:	mov	r1, #0
    d728:	ldr	r3, [pc, #132]	; d7b4 <rb_close+0x204>
    d72c:	ldr	r3, [pc, r3]
    d730:	stmib	r5, {r1, r3}
    d734:	ldr	r2, [pc, #124]	; d7b8 <rb_close+0x208>
    d738:	cmp	r3, #0
    d73c:	add	r2, pc, r2
    d740:	beq	d750 <rb_close+0x1a0>
    d744:	add	r3, r3, #4
    d748:	str	r5, [r3]
    d74c:	b	d760 <rb_close+0x1b0>
    d750:	mov	r3, r2
    d754:	ldr	r1, [r3, #4]!
    d758:	cmp	r1, #0
    d75c:	streq	r5, [r3]
    d760:	str	r5, [r2]
    d764:	and	r0, r0, #254	; 0xfe
    d768:	ldr	r1, [r7, #8]
    d76c:	sub	r1, r1, #1
    d770:	str	r1, [r7, #8]
    d774:	ldr	r1, [r2, #8]
    d778:	add	r1, r1, #1
    d77c:	str	r1, [r2, #8]
    d780:	strb	r0, [r5, #16]
    d784:	cmp	r9, #0
    d788:	beq	d79c <rb_close+0x1ec>
    d78c:	mov	r0, r8
    d790:	mov	r1, #2
    d794:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    d798:	b	518c <shutdown@plt>
    d79c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    d7a0:	.word	0x00031354
    d7a4:	.word	0x000312e8
    d7a8:	.word	0x0003129c
    d7ac:	.word	0x00031290
    d7b0:	.word	0x0001ec94
    d7b4:	.word	0x00031228
    d7b8:	.word	0x00031218

0000d7bc <rb_pipe>:
    d7bc:	push	{r4, r5, r6, r7, fp, lr}
    d7c0:	add	fp, sp, #16
    d7c4:	sub	sp, sp, #8
    d7c8:	mov	r5, r0
    d7cc:	ldr	r0, [pc, #356]	; d938 <rb_pipe+0x17c>
    d7d0:	mov	r4, r1
    d7d4:	ldr	r0, [pc, r0]
    d7d8:	ldr	r0, [r0]
    d7dc:	ldr	r1, [pc, #344]	; d93c <rb_pipe+0x180>
    d7e0:	ldr	r1, [pc, r1]
    d7e4:	cmp	r1, r0
    d7e8:	bge	d8e4 <rb_pipe+0x128>
    d7ec:	mov	r0, sp
    d7f0:	mov	r7, r2
    d7f4:	bl	54e0 <pipe@plt>
    d7f8:	mvn	r6, #0
    d7fc:	cmn	r0, #1
    d800:	beq	d92c <rb_pipe+0x170>
    d804:	ldr	r0, [sp]
    d808:	mov	r1, #8
    d80c:	mov	r2, r7
    d810:	bl	52f4 <rb_open@plt>
    d814:	str	r0, [r5]
    d818:	mov	r1, #8
    d81c:	mov	r2, r7
    d820:	ldr	r0, [sp, #4]
    d824:	bl	52f4 <rb_open@plt>
    d828:	str	r0, [r4]
    d82c:	ldr	r0, [r5]
    d830:	cmp	r0, #0
    d834:	beq	d8f4 <rb_pipe+0x138>
    d838:	ldr	r6, [r0, #12]
    d83c:	ldr	r1, [pc, #252]	; d940 <rb_pipe+0x184>
    d840:	ldr	r1, [pc, r1]
    d844:	blx	r1
    d848:	cmp	r0, #0
    d84c:	bne	d880 <rb_pipe+0xc4>
    d850:	mov	r0, r6
    d854:	mov	r1, #3
    d858:	mov	r2, #0
    d85c:	bl	545c <fcntl@plt>
    d860:	cmn	r0, #1
    d864:	beq	d8f4 <rb_pipe+0x138>
    d868:	orr	r2, r0, #2048	; 0x800
    d86c:	mov	r0, r6
    d870:	mov	r1, #4
    d874:	bl	545c <fcntl@plt>
    d878:	cmn	r0, #1
    d87c:	beq	d8f4 <rb_pipe+0x138>
    d880:	ldr	r0, [r4]
    d884:	cmp	r0, #0
    d888:	beq	d8dc <rb_pipe+0x120>
    d88c:	ldr	r7, [r0, #12]
    d890:	ldr	r1, [pc, #172]	; d944 <rb_pipe+0x188>
    d894:	ldr	r1, [pc, r1]
    d898:	blx	r1
    d89c:	mov	r6, #0
    d8a0:	cmp	r0, #0
    d8a4:	bne	d92c <rb_pipe+0x170>
    d8a8:	mov	r0, r7
    d8ac:	mov	r1, #3
    d8b0:	mov	r2, #0
    d8b4:	mov	r6, #0
    d8b8:	bl	545c <fcntl@plt>
    d8bc:	cmn	r0, #1
    d8c0:	beq	d8dc <rb_pipe+0x120>
    d8c4:	orr	r2, r0, #2048	; 0x800
    d8c8:	mov	r0, r7
    d8cc:	mov	r1, #4
    d8d0:	bl	545c <fcntl@plt>
    d8d4:	cmn	r0, #1
    d8d8:	bne	d92c <rb_pipe+0x170>
    d8dc:	ldr	r6, [sp, #4]
    d8e0:	b	d8f8 <rb_pipe+0x13c>
    d8e4:	bl	5540 <__errno_location@plt>
    d8e8:	mov	r1, #23
    d8ec:	str	r1, [r0]
    d8f0:	b	d928 <rb_pipe+0x16c>
    d8f4:	ldr	r6, [sp]
    d8f8:	bl	5540 <__errno_location@plt>
    d8fc:	ldr	r0, [r0]
    d900:	bl	4c88 <strerror@plt>
    d904:	mov	r2, r0
    d908:	ldr	r0, [pc, #56]	; d948 <rb_pipe+0x18c>
    d90c:	mov	r1, r6
    d910:	add	r0, pc, r0
    d914:	bl	51a4 <rb_lib_log@plt>
    d918:	ldr	r0, [r5]
    d91c:	bl	5108 <rb_close@plt>
    d920:	ldr	r0, [r4]
    d924:	bl	5108 <rb_close@plt>
    d928:	mvn	r6, #0
    d92c:	mov	r0, r6
    d930:	sub	sp, fp, #16
    d934:	pop	{r4, r5, r6, r7, fp, pc}
    d938:	.word	0x0001eb90
    d93c:	.word	0x00031130
    d940:	.word	0x00031110
    d944:	.word	0x000310bc
    d948:	.word	0x0000c3fb

0000d94c <rb_socket>:
    d94c:	push	{r4, r5, r6, r7, fp, lr}
    d950:	add	fp, sp, #16
    d954:	sub	sp, sp, #8
    d958:	mov	r7, r0
    d95c:	ldr	r0, [pc, #372]	; dad8 <rb_socket+0x18c>
    d960:	mov	r6, r3
    d964:	ldr	r0, [pc, r0]
    d968:	ldr	r0, [r0]
    d96c:	ldr	r3, [pc, #360]	; dadc <rb_socket+0x190>
    d970:	ldr	r3, [pc, r3]
    d974:	cmp	r3, r0
    d978:	bge	dac4 <rb_socket+0x178>
    d97c:	mov	r0, r7
    d980:	bl	5030 <socket@plt>
    d984:	mov	r4, #0
    d988:	cmp	r0, #0
    d98c:	bmi	da8c <rb_socket+0x140>
    d990:	mov	r5, r0
    d994:	cmp	r7, #10
    d998:	bne	d9c8 <rb_socket+0x7c>
    d99c:	mov	r0, #1
    d9a0:	add	r3, sp, #4
    d9a4:	mov	r1, #41	; 0x29
    d9a8:	mov	r2, #26
    d9ac:	str	r0, [sp, #4]
    d9b0:	mov	r0, #4
    d9b4:	str	r0, [sp]
    d9b8:	mov	r0, r5
    d9bc:	bl	54f8 <setsockopt@plt>
    d9c0:	cmn	r0, #1
    d9c4:	beq	da5c <rb_socket+0x110>
    d9c8:	mov	r0, r5
    d9cc:	mov	r1, #4
    d9d0:	mov	r2, r6
    d9d4:	bl	52f4 <rb_open@plt>
    d9d8:	cmp	r0, #0
    d9dc:	beq	da38 <rb_socket+0xec>
    d9e0:	ldr	r7, [r0, #12]
    d9e4:	ldr	r1, [pc, #252]	; dae8 <rb_socket+0x19c>
    d9e8:	mov	r6, r0
    d9ec:	ldr	r1, [pc, r1]
    d9f0:	blx	r1
    d9f4:	cmp	r0, #0
    d9f8:	bne	da30 <rb_socket+0xe4>
    d9fc:	mov	r0, r7
    da00:	mov	r1, #3
    da04:	mov	r2, #0
    da08:	mov	r4, #0
    da0c:	bl	545c <fcntl@plt>
    da10:	cmn	r0, #1
    da14:	beq	da98 <rb_socket+0x14c>
    da18:	orr	r2, r0, #2048	; 0x800
    da1c:	mov	r0, r7
    da20:	mov	r1, #4
    da24:	bl	545c <fcntl@plt>
    da28:	cmn	r0, #1
    da2c:	beq	da98 <rb_socket+0x14c>
    da30:	mov	r4, r6
    da34:	b	da8c <rb_socket+0x140>
    da38:	bl	5540 <__errno_location@plt>
    da3c:	ldr	r0, [r0]
    da40:	bl	4c88 <strerror@plt>
    da44:	mov	r2, r0
    da48:	ldr	r0, [pc, #148]	; dae4 <rb_socket+0x198>
    da4c:	mov	r1, r5
    da50:	add	r0, pc, r0
    da54:	bl	51a4 <rb_lib_log@plt>
    da58:	b	da84 <rb_socket+0x138>
    da5c:	ldr	r6, [sp, #4]
    da60:	bl	5540 <__errno_location@plt>
    da64:	ldr	r0, [r0]
    da68:	bl	4c88 <strerror@plt>
    da6c:	mov	r3, r0
    da70:	ldr	r0, [pc, #104]	; dae0 <rb_socket+0x194>
    da74:	mov	r1, r6
    da78:	mov	r2, r5
    da7c:	add	r0, pc, r0
    da80:	bl	51a4 <rb_lib_log@plt>
    da84:	mov	r0, r5
    da88:	bl	51c8 <close@plt>
    da8c:	mov	r0, r4
    da90:	sub	sp, fp, #16
    da94:	pop	{r4, r5, r6, r7, fp, pc}
    da98:	bl	5540 <__errno_location@plt>
    da9c:	ldr	r0, [r0]
    daa0:	bl	4c88 <strerror@plt>
    daa4:	mov	r2, r0
    daa8:	ldr	r0, [pc, #60]	; daec <rb_socket+0x1a0>
    daac:	mov	r1, r5
    dab0:	add	r0, pc, r0
    dab4:	bl	51a4 <rb_lib_log@plt>
    dab8:	mov	r0, r6
    dabc:	bl	5108 <rb_close@plt>
    dac0:	b	da8c <rb_socket+0x140>
    dac4:	bl	5540 <__errno_location@plt>
    dac8:	mov	r1, #23
    dacc:	mov	r4, #0
    dad0:	str	r1, [r0]
    dad4:	b	da8c <rb_socket+0x140>
    dad8:	.word	0x0001ea00
    dadc:	.word	0x00030fa0
    dae0:	.word	0x0000c2bc
    dae4:	.word	0x0000c327
    dae8:	.word	0x00030f64
    daec:	.word	0x0000c25b

0000daf0 <rb_listen>:
    daf0:	push	{r4, r5, r6, sl, fp, lr}
    daf4:	add	fp, sp, #16
    daf8:	sub	sp, sp, #8
    dafc:	str	r1, [sp, #4]
    db00:	mov	r5, r0
    db04:	mov	r6, r2
    db08:	ldrb	r0, [r0, #17]
    db0c:	and	r0, r0, #128	; 0x80
    db10:	orr	r0, r0, #20
    db14:	strb	r0, [r5, #17]
    db18:	ldr	r0, [r5, #12]
    db1c:	bl	4e8c <listen@plt>
    db20:	mov	r4, r0
    db24:	cmp	r6, #0
    db28:	beq	db50 <rb_listen+0x60>
    db2c:	cmp	r4, #0
    db30:	bne	db50 <rb_listen+0x60>
    db34:	ldr	r0, [r5, #12]
    db38:	mov	r1, #4
    db3c:	add	r3, sp, #4
    db40:	mov	r2, #9
    db44:	str	r1, [sp]
    db48:	mov	r1, #6
    db4c:	bl	54f8 <setsockopt@plt>
    db50:	mov	r0, r4
    db54:	sub	sp, fp, #16
    db58:	pop	{r4, r5, r6, sl, fp, pc}

0000db5c <rb_fdlist_init>:
    db5c:	push	{r4, r5, r6, r7, fp, lr}
    db60:	add	fp, sp, #16
    db64:	ldr	r6, [pc, #116]	; dbe0 <rb_fdlist_init+0x84>
    db68:	mov	r4, r2
    db6c:	add	r6, pc, r6
    db70:	ldrb	r2, [r6]
    db74:	cmp	r2, #0
    db78:	bne	dbbc <rb_fdlist_init+0x60>
    db7c:	ldr	r7, [pc, #96]	; dbe4 <rb_fdlist_init+0x88>
    db80:	cmp	r0, #0
    db84:	ldr	r7, [pc, r7]
    db88:	str	r1, [r7]
    db8c:	beq	dbb4 <rb_fdlist_init+0x58>
    db90:	cmp	r1, #4
    db94:	blt	dbb4 <rb_fdlist_init+0x58>
    db98:	mov	r5, #3
    db9c:	mov	r0, r5
    dba0:	bl	51c8 <close@plt>
    dba4:	ldr	r0, [r7]
    dba8:	add	r5, r5, #1
    dbac:	cmp	r5, r0
    dbb0:	blt	db9c <rb_fdlist_init+0x40>
    dbb4:	mov	r0, #1
    dbb8:	strb	r0, [r6]
    dbbc:	ldr	r2, [pc, #36]	; dbe8 <rb_fdlist_init+0x8c>
    dbc0:	mov	r0, #68	; 0x44
    dbc4:	mov	r1, r4
    dbc8:	add	r2, pc, r2
    dbcc:	bl	5318 <rb_bh_create@plt>
    dbd0:	ldr	r1, [pc, #20]	; dbec <rb_fdlist_init+0x90>
    dbd4:	add	r1, pc, r1
    dbd8:	str	r0, [r1]
    dbdc:	pop	{r4, r5, r6, r7, fp, pc}
    dbe0:	.word	0x00030da8
    dbe4:	.word	0x0001e7e0
    dbe8:	.word	0x0000c1e8
    dbec:	.word	0x00030d44

0000dbf0 <rb_dump_fd>:
    dbf0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    dbf4:	add	fp, sp, #24
    dbf8:	ldr	r8, [pc, #144]	; dc90 <rb_dump_fd+0xa0>
    dbfc:	mov	r4, r1
    dc00:	mov	r5, r0
    dc04:	mov	r6, #0
    dc08:	ldr	r8, [pc, r8]
    dc0c:	ldr	r9, [pc, #128]	; dc94 <rb_dump_fd+0xa4>
    dc10:	add	r9, pc, r9
    dc14:	b	dc24 <rb_dump_fd+0x34>
    dc18:	add	r6, r6, #1
    dc1c:	cmp	r6, #4096	; 0x1000
    dc20:	beq	dc8c <rb_dump_fd+0x9c>
    dc24:	ldr	r0, [r8]
    dc28:	add	r1, r6, r6, lsl #1
    dc2c:	add	r2, r0, r1, lsl #2
    dc30:	ldr	r2, [r2, #8]
    dc34:	cmp	r2, #0
    dc38:	beq	dc18 <rb_dump_fd+0x28>
    dc3c:	ldr	r7, [r0, r1, lsl #2]
    dc40:	cmp	r7, #0
    dc44:	bne	dc58 <rb_dump_fd+0x68>
    dc48:	b	dc18 <rb_dump_fd+0x28>
    dc4c:	ldr	r7, [r7, #8]
    dc50:	cmp	r7, #0
    dc54:	beq	dc18 <rb_dump_fd+0x28>
    dc58:	ldr	r1, [r7]
    dc5c:	cmp	r1, #0
    dc60:	beq	dc4c <rb_dump_fd+0x5c>
    dc64:	ldrb	r0, [r1, #16]
    dc68:	tst	r0, #1
    dc6c:	beq	dc4c <rb_dump_fd+0x5c>
    dc70:	ldr	r0, [r1, #12]
    dc74:	ldr	r1, [r1, #24]
    dc78:	mov	r2, r4
    dc7c:	cmp	r1, #0
    dc80:	moveq	r1, r9
    dc84:	blx	r5
    dc88:	b	dc4c <rb_dump_fd+0x5c>
    dc8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    dc90:	.word	0x0001e77c
    dc94:	.word	0x0000c29a

0000dc98 <rb_note>:
    dc98:	push	{r4, r5, r6, sl, fp, lr}
    dc9c:	add	fp, sp, #16
    dca0:	cmp	r0, #0
    dca4:	beq	dce4 <rb_note+0x4c>
    dca8:	mov	r4, r0
    dcac:	ldr	r0, [r0, #24]
    dcb0:	mov	r5, r1
    dcb4:	cmp	r0, #0
    dcb8:	beq	dcc0 <rb_note+0x28>
    dcbc:	bl	4f94 <free@plt>
    dcc0:	mov	r0, #128	; 0x80
    dcc4:	bl	5228 <malloc@plt>
    dcc8:	cmp	r0, #0
    dccc:	beq	dce8 <rb_note+0x50>
    dcd0:	mov	r1, r5
    dcd4:	mov	r2, #128	; 0x80
    dcd8:	mov	r6, r0
    dcdc:	bl	4f4c <rb_strlcpy@plt>
    dce0:	str	r6, [r4, #24]
    dce4:	pop	{r4, r5, r6, sl, fp, pc}
    dce8:	bl	5204 <rb_outofmemory@plt>

0000dcec <rb_set_type>:
    dcec:	strb	r1, [r0, #17]
    dcf0:	bx	lr

0000dcf4 <rb_get_type>:
    dcf4:	ldrb	r0, [r0, #17]
    dcf8:	bx	lr

0000dcfc <rb_fd_ssl>:
    dcfc:	cmp	r0, #0
    dd00:	moveq	r0, #0
    dd04:	ldrbne	r0, [r0, #17]
    dd08:	ubfxne	r0, r0, #5, #1
    dd0c:	bx	lr

0000dd10 <rb_get_fde>:
    dd10:	cmp	r0, #0
    dd14:	bmi	dd5c <rb_get_fde+0x4c>
    dd18:	ldr	r2, [pc, #72]	; dd68 <rb_get_fde+0x58>
    dd1c:	eor	r1, r0, r0, lsr #12
    dd20:	bfc	r1, #12, #20
    dd24:	ldr	r2, [pc, r2]
    dd28:	eor	r1, r1, r0, lsr #24
    dd2c:	add	r1, r1, r1, lsl #1
    dd30:	ldr	r2, [r2]
    dd34:	ldr	r2, [r2, r1, lsl #2]
    dd38:	cmp	r2, #0
    dd3c:	beq	dd5c <rb_get_fde+0x4c>
    dd40:	ldr	r1, [r2]
    dd44:	ldr	r3, [r1, #12]
    dd48:	cmp	r3, r0
    dd4c:	beq	dd60 <rb_get_fde+0x50>
    dd50:	ldr	r2, [r2, #8]
    dd54:	cmp	r2, #0
    dd58:	bne	dd40 <rb_get_fde+0x30>
    dd5c:	mov	r1, #0
    dd60:	mov	r0, r1
    dd64:	bx	lr
    dd68:	.word	0x0001e660

0000dd6c <rb_read>:
    dd6c:	cmp	r0, #0
    dd70:	moveq	r0, #0
    dd74:	bxeq	lr
    dd78:	ldrb	r3, [r0, #17]
    dd7c:	tst	r3, #32
    dd80:	bne	dd94 <rb_read+0x28>
    dd84:	ldr	r0, [r0, #12]
    dd88:	tst	r3, #4
    dd8c:	bne	dd98 <rb_read+0x2c>
    dd90:	b	4fac <read@plt>
    dd94:	b	10a70 <rb_ssl_read>
    dd98:	mov	r3, #0
    dd9c:	b	4e44 <recv@plt>

0000dda0 <rb_write>:
    dda0:	cmp	r0, #0
    dda4:	moveq	r0, #0
    dda8:	bxeq	lr
    ddac:	ldrb	r3, [r0, #17]
    ddb0:	tst	r3, #32
    ddb4:	bne	ddc8 <rb_write+0x28>
    ddb8:	ldr	r0, [r0, #12]
    ddbc:	tst	r3, #4
    ddc0:	bne	ddcc <rb_write+0x2c>
    ddc4:	b	4fc4 <write@plt>
    ddc8:	b	10bdc <rb_ssl_write>
    ddcc:	mov	r3, #16384	; 0x4000
    ddd0:	b	5300 <send@plt>

0000ddd4 <rb_writev>:
    ddd4:	push	{r4, r5, r6, r7, fp, lr}
    ddd8:	add	fp, sp, #16
    dddc:	sub	sp, sp, #32
    dde0:	cmp	r0, #0
    dde4:	beq	de18 <rb_writev+0x44>
    dde8:	mov	r5, r0
    ddec:	ldrb	r0, [r0, #17]
    ddf0:	mov	r4, r1
    ddf4:	tst	r0, #32
    ddf8:	bne	de30 <rb_writev+0x5c>
    ddfc:	tst	r0, #4
    de00:	bne	deac <rb_writev+0xd8>
    de04:	ldr	r0, [r5, #12]
    de08:	mov	r1, r4
    de0c:	sub	sp, fp, #16
    de10:	pop	{r4, r5, r6, r7, fp, lr}
    de14:	b	4f34 <writev@plt>
    de18:	bl	5540 <__errno_location@plt>
    de1c:	mov	r1, #9
    de20:	str	r1, [r0]
    de24:	mvn	r0, #0
    de28:	sub	sp, fp, #16
    de2c:	pop	{r4, r5, r6, r7, fp, pc}
    de30:	cmp	r2, #0
    de34:	beq	dee4 <rb_writev+0x110>
    de38:	sub	r7, r2, #1
    de3c:	mov	r6, #0
    de40:	ldm	r4, {r1, r2}
    de44:	tst	r0, #32
    de48:	bne	de6c <rb_writev+0x98>
    de4c:	uxtb	r3, r0
    de50:	ldr	r0, [r5, #12]
    de54:	tst	r3, #4
    de58:	bne	de80 <rb_writev+0xac>
    de5c:	bl	4fc4 <write@plt>
    de60:	cmp	r0, #0
    de64:	bgt	de90 <rb_writev+0xbc>
    de68:	b	def0 <rb_writev+0x11c>
    de6c:	mov	r0, r5
    de70:	bl	10bdc <rb_ssl_write>
    de74:	cmp	r0, #0
    de78:	bgt	de90 <rb_writev+0xbc>
    de7c:	b	def0 <rb_writev+0x11c>
    de80:	mov	r3, #16384	; 0x4000
    de84:	bl	5300 <send@plt>
    de88:	cmp	r0, #0
    de8c:	ble	def0 <rb_writev+0x11c>
    de90:	add	r6, r0, r6
    de94:	cmp	r7, #0
    de98:	beq	df00 <rb_writev+0x12c>
    de9c:	ldrb	r0, [r5, #17]
    dea0:	add	r4, r4, #8
    dea4:	sub	r7, r7, #1
    dea8:	b	de40 <rb_writev+0x6c>
    deac:	vmov.i32	q8, #0	; 0x00000000
    deb0:	mov	r1, sp
    deb4:	add	r0, r1, #12
    deb8:	mov	r3, r1
    debc:	vst1.32	{d16-d17}, [r0]
    dec0:	mov	r0, #8
    dec4:	vst1.64	{d16-d17}, [r3], r0
    dec8:	str	r4, [r3]
    decc:	str	r2, [sp, #12]
    ded0:	mov	r2, #16384	; 0x4000
    ded4:	ldr	r0, [r5, #12]
    ded8:	bl	4fa0 <sendmsg@plt>
    dedc:	sub	sp, fp, #16
    dee0:	pop	{r4, r5, r6, r7, fp, pc}
    dee4:	mov	r0, #0
    dee8:	sub	sp, fp, #16
    deec:	pop	{r4, r5, r6, r7, fp, pc}
    def0:	cmp	r6, #0
    def4:	movgt	r0, r6
    def8:	sub	sp, fp, #16
    defc:	pop	{r4, r5, r6, r7, fp, pc}
    df00:	mov	r0, r6
    df04:	sub	sp, fp, #16
    df08:	pop	{r4, r5, r6, r7, fp, pc}

0000df0c <rb_inet_pton_sock>:
    df0c:	push	{r4, r5, r6, r7, fp, lr}
    df10:	add	fp, sp, #16
    df14:	sub	sp, sp, #8
    df18:	vmov.i32	q8, #0	; 0x00000000
    df1c:	mov	ip, r0
    df20:	mov	r7, r1
    df24:	mov	r0, #112	; 0x70
    df28:	vst1.32	{d16-d17}, [r1], r0
    df2c:	add	r0, r7, #96	; 0x60
    df30:	vst1.32	{d16-d17}, [r0]
    df34:	add	r0, r7, #80	; 0x50
    df38:	vst1.32	{d16-d17}, [r1]
    df3c:	mov	r1, #0
    df40:	vst1.32	{d16-d17}, [r0]
    df44:	add	r0, r7, #64	; 0x40
    df48:	vst1.32	{d16-d17}, [r0]
    df4c:	add	r0, r7, #48	; 0x30
    df50:	vst1.32	{d16-d17}, [r0]
    df54:	add	r0, r7, #32
    df58:	vst1.32	{d16-d17}, [r0]
    df5c:	add	r0, r7, #16
    df60:	vst1.32	{d16-d17}, [r0]
    df64:	strb	r1, [sp, #4]
    df68:	ldrb	r5, [ip]
    df6c:	cmp	r5, #0
    df70:	beq	e018 <rb_inet_pton_sock+0x10c>
    df74:	add	r0, ip, #1
    df78:	add	r2, sp, #4
    df7c:	mov	r3, #0
    df80:	mov	r4, #0
    df84:	b	dfa0 <rb_inet_pton_sock+0x94>
    df88:	mov	r1, #0
    df8c:	mov	r4, #0
    df90:	strb	r1, [r2, #1]!
    df94:	ldrb	r5, [r0], #1
    df98:	cmp	r5, #0
    df9c:	beq	e010 <rb_inet_pton_sock+0x104>
    dfa0:	sub	r6, r5, #48	; 0x30
    dfa4:	uxtb	r6, r6
    dfa8:	cmp	r6, #9
    dfac:	bhi	dff0 <rb_inet_pton_sock+0xe4>
    dfb0:	uxtb	r6, r1
    dfb4:	lsl	r6, r6, #2
    dfb8:	uxtab	r1, r6, r1
    dfbc:	lsl	r1, r1, #1
    dfc0:	uxtab	r1, r1, r5
    dfc4:	sub	r1, r1, #48	; 0x30
    dfc8:	cmp	r1, #255	; 0xff
    dfcc:	bhi	e018 <rb_inet_pton_sock+0x10c>
    dfd0:	cmp	r4, #0
    dfd4:	strb	r1, [r2]
    dfd8:	bne	df94 <rb_inet_pton_sock+0x88>
    dfdc:	cmp	r3, #3
    dfe0:	bgt	e018 <rb_inet_pton_sock+0x10c>
    dfe4:	add	r3, r3, #1
    dfe8:	mov	r4, #1
    dfec:	b	df94 <rb_inet_pton_sock+0x88>
    dff0:	cmp	r3, #4
    dff4:	beq	e018 <rb_inet_pton_sock+0x10c>
    dff8:	uxtb	r1, r5
    dffc:	cmp	r1, #46	; 0x2e
    e000:	bne	e018 <rb_inet_pton_sock+0x10c>
    e004:	cmp	r4, #0
    e008:	bne	df88 <rb_inet_pton_sock+0x7c>
    e00c:	b	e018 <rb_inet_pton_sock+0x10c>
    e010:	cmp	r3, #4
    e014:	bge	e040 <rb_inet_pton_sock+0x134>
    e018:	add	r2, r7, #8
    e01c:	mov	r0, #10
    e020:	mov	r1, ip
    e024:	mov	r4, #10
    e028:	bl	4ee0 <rb_inet_pton@plt>
    e02c:	cmp	r0, #0
    e030:	bne	e04c <rb_inet_pton_sock+0x140>
    e034:	mov	r0, #0
    e038:	sub	sp, fp, #16
    e03c:	pop	{r4, r5, r6, r7, fp, pc}
    e040:	ldr	r0, [sp, #4]
    e044:	mov	r4, #2
    e048:	str	r0, [r7, #4]
    e04c:	mov	r0, #0
    e050:	strh	r0, [r7, #2]
    e054:	strh	r4, [r7]
    e058:	mov	r0, #1
    e05c:	sub	sp, fp, #16
    e060:	pop	{r4, r5, r6, r7, fp, pc}

0000e064 <rb_inet_pton>:
    e064:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e068:	add	fp, sp, #24
    e06c:	sub	sp, sp, #56	; 0x38
    e070:	mov	r8, r2
    e074:	mov	r2, r1
    e078:	cmp	r0, #10
    e07c:	beq	e14c <rb_inet_pton+0xe8>
    e080:	mov	r1, r0
    e084:	mvn	r0, #0
    e088:	cmp	r1, #2
    e08c:	bne	e264 <rb_inet_pton+0x200>
    e090:	mov	r0, #0
    e094:	strb	r0, [sp]
    e098:	ldrb	r6, [r2]
    e09c:	cmp	r6, #0
    e0a0:	beq	e264 <rb_inet_pton+0x200>
    e0a4:	add	r1, r2, #1
    e0a8:	mov	r5, #0
    e0ac:	mov	r2, sp
    e0b0:	mov	r3, #0
    e0b4:	mov	r4, #0
    e0b8:	b	e0d4 <rb_inet_pton+0x70>
    e0bc:	mov	r5, #0
    e0c0:	mov	r4, #0
    e0c4:	strb	r5, [r2, #1]!
    e0c8:	ldrb	r6, [r1], #1
    e0cc:	cmp	r6, #0
    e0d0:	beq	e200 <rb_inet_pton+0x19c>
    e0d4:	sub	r0, r6, #48	; 0x30
    e0d8:	uxtb	r0, r0
    e0dc:	cmp	r0, #9
    e0e0:	bhi	e128 <rb_inet_pton+0xc4>
    e0e4:	uxtb	r0, r5
    e0e8:	lsl	r0, r0, #2
    e0ec:	uxtab	r0, r0, r5
    e0f0:	lsl	r0, r0, #1
    e0f4:	uxtab	r0, r0, r6
    e0f8:	sub	r5, r0, #48	; 0x30
    e0fc:	mov	r0, #0
    e100:	cmp	r5, #255	; 0xff
    e104:	bhi	e264 <rb_inet_pton+0x200>
    e108:	cmp	r4, #0
    e10c:	strb	r5, [r2]
    e110:	bne	e0c8 <rb_inet_pton+0x64>
    e114:	cmp	r3, #3
    e118:	bgt	e264 <rb_inet_pton+0x200>
    e11c:	add	r3, r3, #1
    e120:	mov	r4, #1
    e124:	b	e0c8 <rb_inet_pton+0x64>
    e128:	mov	r0, #0
    e12c:	cmp	r3, #4
    e130:	beq	e264 <rb_inet_pton+0x200>
    e134:	uxtb	r6, r6
    e138:	cmp	r6, #46	; 0x2e
    e13c:	bne	e264 <rb_inet_pton+0x200>
    e140:	cmp	r4, #0
    e144:	bne	e0bc <rb_inet_pton+0x58>
    e148:	b	e264 <rb_inet_pton+0x200>
    e14c:	mov	r5, #0
    e150:	strb	r5, [sp]
    e154:	ldrb	r6, [r2]
    e158:	cmp	r6, #0
    e15c:	beq	e228 <rb_inet_pton+0x1c4>
    e160:	mov	r0, #1
    e164:	mov	r1, sp
    e168:	mov	r3, #0
    e16c:	mov	r4, #0
    e170:	b	e190 <rb_inet_pton+0x12c>
    e174:	mov	r5, #0
    e178:	mov	r4, #0
    e17c:	strb	r5, [r1, #1]!
    e180:	ldrb	r6, [r2, r0]
    e184:	add	r0, r0, #1
    e188:	cmp	r6, #0
    e18c:	beq	e220 <rb_inet_pton+0x1bc>
    e190:	sub	r7, r6, #48	; 0x30
    e194:	uxtb	r7, r7
    e198:	cmp	r7, #9
    e19c:	bhi	e1e0 <rb_inet_pton+0x17c>
    e1a0:	uxtb	r7, r5
    e1a4:	lsl	r7, r7, #2
    e1a8:	uxtab	r7, r7, r5
    e1ac:	lsl	r7, r7, #1
    e1b0:	uxtab	r7, r7, r6
    e1b4:	sub	r5, r7, #48	; 0x30
    e1b8:	cmp	r5, #255	; 0xff
    e1bc:	bhi	e228 <rb_inet_pton+0x1c4>
    e1c0:	cmp	r4, #0
    e1c4:	strb	r5, [r1]
    e1c8:	bne	e180 <rb_inet_pton+0x11c>
    e1cc:	cmp	r3, #3
    e1d0:	bgt	e228 <rb_inet_pton+0x1c4>
    e1d4:	add	r3, r3, #1
    e1d8:	mov	r4, #1
    e1dc:	b	e180 <rb_inet_pton+0x11c>
    e1e0:	cmp	r3, #4
    e1e4:	beq	e228 <rb_inet_pton+0x1c4>
    e1e8:	uxtb	r7, r6
    e1ec:	cmp	r7, #46	; 0x2e
    e1f0:	bne	e228 <rb_inet_pton+0x1c4>
    e1f4:	cmp	r4, #0
    e1f8:	bne	e174 <rb_inet_pton+0x110>
    e1fc:	b	e228 <rb_inet_pton+0x1c4>
    e200:	mov	r0, #0
    e204:	cmp	r3, #4
    e208:	blt	e264 <rb_inet_pton+0x200>
    e20c:	ldr	r0, [sp]
    e210:	str	r0, [r8]
    e214:	mov	r0, #1
    e218:	sub	sp, fp, #24
    e21c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e220:	cmp	r3, #4
    e224:	bge	e23c <rb_inet_pton+0x1d8>
    e228:	mov	r0, r2
    e22c:	mov	r1, r8
    e230:	sub	sp, fp, #24
    e234:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    e238:	b	e8d8 <inet_pton6>
    e23c:	ldr	r0, [sp]
    e240:	mov	r5, sp
    e244:	str	r0, [r8]
    e248:	mov	r0, r5
    e24c:	ldr	r1, [pc, #24]	; e26c <rb_inet_pton+0x208>
    e250:	add	r1, pc, r1
    e254:	bl	5558 <sprintf@plt>
    e258:	mov	r0, r5
    e25c:	mov	r1, r8
    e260:	bl	e8d8 <inet_pton6>
    e264:	sub	sp, fp, #24
    e268:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e26c:	.word	0x0000bba0

0000e270 <rb_inet_ntop_sock>:
    e270:	mov	r3, r2
    e274:	mov	r2, r1
    e278:	ldrh	r1, [r0]
    e27c:	cmp	r1, #10
    e280:	beq	e2a0 <rb_inet_ntop_sock+0x30>
    e284:	cmp	r1, #2
    e288:	movne	r0, #0
    e28c:	bxne	lr
    e290:	mov	r1, r2
    e294:	add	r0, r0, #4
    e298:	mov	r2, r3
    e29c:	b	e7b0 <inet_ntop4>
    e2a0:	add	r1, r0, #8
    e2a4:	mov	r0, #10
    e2a8:	b	e2ac <rb_inet_ntop>

0000e2ac <rb_inet_ntop>:
    e2ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2b0:	add	fp, sp, #28
    e2b4:	sub	sp, sp, #100	; 0x64
    e2b8:	mov	sl, r1
    e2bc:	cmp	r0, #10
    e2c0:	beq	e2ec <rb_inet_ntop+0x40>
    e2c4:	mov	r1, r0
    e2c8:	mov	r0, #0
    e2cc:	cmp	r1, #2
    e2d0:	bne	e744 <rb_inet_ntop+0x498>
    e2d4:	mov	r0, sl
    e2d8:	mov	r1, r2
    e2dc:	mov	r2, r3
    e2e0:	sub	sp, fp, #28
    e2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2e8:	b	e7b0 <inet_ntop4>
    e2ec:	ldr	r0, [sl]
    e2f0:	cmp	r0, #0
    e2f4:	beq	e300 <rb_inet_ntop+0x54>
    e2f8:	ldrb	r1, [sl, #4]
    e2fc:	b	e30c <rb_inet_ntop+0x60>
    e300:	ldr	r1, [sl, #4]
    e304:	cmp	r1, #0
    e308:	beq	e768 <rb_inet_ntop+0x4bc>
    e30c:	ldrb	r4, [sl, #1]
    e310:	str	r2, [sp, #4]
    e314:	uxtb	r1, r1
    e318:	bfi	r4, r0, #8, #8
    e31c:	str	r4, [sp, #16]
    e320:	cmp	r4, #0
    e324:	ldrb	r0, [sl, #2]
    e328:	ldrb	r2, [sl, #3]
    e32c:	orr	r0, r2, r0, lsl #8
    e330:	str	r0, [sp, #20]
    e334:	ldrb	r2, [sl, #5]
    e338:	orr	r2, r2, r1, lsl #8
    e33c:	str	r2, [sp, #24]
    e340:	ldrb	r1, [sl, #6]
    e344:	ldrb	r7, [sl, #7]
    e348:	orr	ip, r7, r1, lsl #8
    e34c:	str	ip, [sp, #28]
    e350:	ldrb	r1, [sl, #8]
    e354:	ldrb	r7, [sl, #9]
    e358:	orr	r7, r7, r1, lsl #8
    e35c:	str	r7, [sp, #32]
    e360:	ldrb	r1, [sl, #10]
    e364:	ldrb	r6, [sl, #11]
    e368:	orr	r8, r6, r1, lsl #8
    e36c:	str	r8, [sp, #36]	; 0x24
    e370:	ldrb	r6, [sl, #12]!
    e374:	ldrb	r5, [sl, #1]
    e378:	orr	r1, r5, r6, lsl #8
    e37c:	str	r1, [sp, #40]	; 0x28
    e380:	str	r1, [sp, #12]
    e384:	ldrb	r6, [sl, #2]
    e388:	ldrb	r5, [sl, #3]
    e38c:	orr	r1, r5, r6, lsl #8
    e390:	mov	r6, r4
    e394:	movwne	r6, #1
    e398:	cmp	r0, #0
    e39c:	mov	lr, r1
    e3a0:	str	r1, [sp, #44]	; 0x2c
    e3a4:	beq	e414 <rb_inet_ntop+0x168>
    e3a8:	clz	r0, r4
    e3ac:	rsb	r5, r6, #0
    e3b0:	mvn	r6, #0
    e3b4:	lsr	r0, r0, #5
    e3b8:	mov	r9, r0
    e3bc:	cmp	r2, #0
    e3c0:	beq	e430 <rb_inet_ntop+0x184>
    e3c4:	mvn	r2, #0
    e3c8:	cmn	r6, #1
    e3cc:	beq	e444 <rb_inet_ntop+0x198>
    e3d0:	add	r1, r5, #1
    e3d4:	cmp	r0, r9
    e3d8:	mov	r4, #0
    e3dc:	clz	r1, r1
    e3e0:	movwhi	r4, #1
    e3e4:	lsr	r1, r1, #5
    e3e8:	orrs	r1, r1, r4
    e3ec:	moveq	r6, r5
    e3f0:	movne	r9, r0
    e3f4:	cmp	ip, #0
    e3f8:	bne	e450 <rb_inet_ntop+0x1a4>
    e3fc:	cmn	r2, #1
    e400:	add	r0, r0, #1
    e404:	mov	r4, r2
    e408:	movweq	r0, #1
    e40c:	movweq	r4, #3
    e410:	b	e484 <rb_inet_ntop+0x1d8>
    e414:	cmp	r4, #0
    e418:	mov	r0, #1
    e41c:	mvn	r5, #0
    e420:	mov	r9, #0
    e424:	movweq	r0, #2
    e428:	cmp	r2, #0
    e42c:	bne	e3c4 <rb_inet_ntop+0x118>
    e430:	cmn	r6, #1
    e434:	add	r0, r0, #1
    e438:	mov	r2, r6
    e43c:	movweq	r0, #1
    e440:	movweq	r2, #2
    e444:	mov	r6, r5
    e448:	cmp	ip, #0
    e44c:	beq	e3fc <rb_inet_ntop+0x150>
    e450:	mvn	r4, #0
    e454:	cmn	r2, #1
    e458:	beq	e484 <rb_inet_ntop+0x1d8>
    e45c:	add	r5, r6, #1
    e460:	cmp	r0, r9
    e464:	mov	r1, #0
    e468:	clz	r5, r5
    e46c:	movwgt	r1, #1
    e470:	lsr	r5, r5, #5
    e474:	orrs	r1, r5, r1
    e478:	moveq	r2, r6
    e47c:	movne	r9, r0
    e480:	b	e488 <rb_inet_ntop+0x1dc>
    e484:	mov	r2, r6
    e488:	ldr	r6, [sp, #12]
    e48c:	cmp	r7, #0
    e490:	beq	e4e4 <rb_inet_ntop+0x238>
    e494:	mvn	r7, #0
    e498:	cmn	r4, #1
    e49c:	beq	e4f8 <rb_inet_ntop+0x24c>
    e4a0:	add	r5, r2, #1
    e4a4:	cmp	r0, r9
    e4a8:	mov	r1, #0
    e4ac:	clz	r5, r5
    e4b0:	movwgt	r1, #1
    e4b4:	lsr	r5, r5, #5
    e4b8:	orrs	r1, r5, r1
    e4bc:	moveq	r4, r2
    e4c0:	movne	r9, r0
    e4c4:	cmp	r8, #0
    e4c8:	bne	e504 <rb_inet_ntop+0x258>
    e4cc:	cmn	r7, #1
    e4d0:	add	r0, r0, #1
    e4d4:	mov	r5, r7
    e4d8:	movweq	r0, #1
    e4dc:	movweq	r5, #5
    e4e0:	b	e554 <rb_inet_ntop+0x2a8>
    e4e4:	cmn	r4, #1
    e4e8:	add	r0, r0, #1
    e4ec:	mov	r7, r4
    e4f0:	movweq	r0, #1
    e4f4:	movweq	r7, #4
    e4f8:	mov	r4, r2
    e4fc:	cmp	r8, #0
    e500:	beq	e4cc <rb_inet_ntop+0x220>
    e504:	mvn	r5, #0
    e508:	cmn	r7, #1
    e50c:	beq	e554 <rb_inet_ntop+0x2a8>
    e510:	add	r2, r4, #1
    e514:	cmp	r0, r9
    e518:	mov	r1, #0
    e51c:	clz	r2, r2
    e520:	movwgt	r1, #1
    e524:	lsr	r2, r2, #5
    e528:	orrs	r1, r2, r1
    e52c:	moveq	r7, r4
    e530:	movne	r9, r0
    e534:	cmp	r6, #0
    e538:	bne	e560 <rb_inet_ntop+0x2b4>
    e53c:	cmn	r5, #1
    e540:	add	r0, r0, #1
    e544:	mov	r6, r5
    e548:	movweq	r0, #1
    e54c:	movweq	r6, #6
    e550:	b	e594 <rb_inet_ntop+0x2e8>
    e554:	mov	r7, r4
    e558:	cmp	r6, #0
    e55c:	beq	e53c <rb_inet_ntop+0x290>
    e560:	mvn	r6, #0
    e564:	cmn	r5, #1
    e568:	beq	e594 <rb_inet_ntop+0x2e8>
    e56c:	add	r2, r7, #1
    e570:	cmp	r0, r9
    e574:	mov	r1, #0
    e578:	clz	r2, r2
    e57c:	movwgt	r1, #1
    e580:	lsr	r2, r2, #5
    e584:	orrs	r1, r2, r1
    e588:	moveq	r5, r7
    e58c:	movne	r9, r0
    e590:	b	e598 <rb_inet_ntop+0x2ec>
    e594:	mov	r5, r7
    e598:	cmp	lr, #0
    e59c:	str	r3, [sp, #8]
    e5a0:	str	sl, [sp]
    e5a4:	beq	e5d8 <rb_inet_ntop+0x32c>
    e5a8:	cmn	r6, #1
    e5ac:	beq	e618 <rb_inet_ntop+0x36c>
    e5b0:	add	r2, r5, #1
    e5b4:	cmp	r0, r9
    e5b8:	mov	r1, #0
    e5bc:	clz	r2, r2
    e5c0:	movwgt	r1, #1
    e5c4:	lsr	r2, r2, #5
    e5c8:	orrs	r1, r2, r1
    e5cc:	moveq	r6, r5
    e5d0:	movne	r9, r0
    e5d4:	b	e61c <rb_inet_ntop+0x370>
    e5d8:	cmn	r6, #1
    e5dc:	add	r0, r0, #1
    e5e0:	add	r2, r5, #1
    e5e4:	mov	r1, #0
    e5e8:	movweq	r0, #1
    e5ec:	clz	r2, r2
    e5f0:	cmp	r0, r9
    e5f4:	lsr	r2, r2, #5
    e5f8:	movwgt	r1, #1
    e5fc:	orrs	r1, r2, r1
    e600:	movne	r9, r0
    e604:	cmn	r6, #1
    e608:	movweq	r6, #7
    e60c:	cmp	r1, #0
    e610:	moveq	r6, r5
    e614:	b	e61c <rb_inet_ntop+0x370>
    e618:	mov	r6, r5
    e61c:	str	r9, [sp, #12]
    e620:	cmn	r6, #1
    e624:	add	r7, sp, #48	; 0x30
    e628:	mov	sl, #58	; 0x3a
    e62c:	add	r5, sp, #16
    e630:	ldr	r4, [pc, #372]	; e7ac <rb_inet_ntop+0x500>
    e634:	movne	r6, r6
    e638:	cmp	r9, #2
    e63c:	mvnlt	r6, #0
    e640:	add	r8, r6, r9
    e644:	mov	r9, #0
    e648:	add	r4, pc, r4
    e64c:	cmp	r9, r8
    e650:	blt	e690 <rb_inet_ntop+0x3e4>
    e654:	b	e6bc <rb_inet_ntop+0x410>
    e658:	ldr	r0, [sp, #36]	; 0x24
    e65c:	movw	r1, #65535	; 0xffff
    e660:	cmp	r0, r1
    e664:	beq	e6e8 <rb_inet_ntop+0x43c>
    e668:	ldr	r2, [r5, r9, lsl #2]
    e66c:	mov	r0, r7
    e670:	mov	r1, r4
    e674:	bl	5558 <sprintf@plt>
    e678:	add	r7, r7, r0
    e67c:	add	r9, r9, #1
    e680:	cmp	r9, #8
    e684:	beq	e714 <rb_inet_ntop+0x468>
    e688:	cmp	r9, r8
    e68c:	bge	e6bc <rb_inet_ntop+0x410>
    e690:	cmn	r6, #1
    e694:	beq	e6bc <rb_inet_ntop+0x410>
    e698:	cmp	r9, r6
    e69c:	blt	e6bc <rb_inet_ntop+0x410>
    e6a0:	cmp	r6, r9
    e6a4:	bne	e67c <rb_inet_ntop+0x3d0>
    e6a8:	cmp	r6, #0
    e6ac:	moveq	r0, #48	; 0x30
    e6b0:	strbeq	r0, [r7], #1
    e6b4:	strb	sl, [r7], #1
    e6b8:	b	e67c <rb_inet_ntop+0x3d0>
    e6bc:	cmp	r9, #0
    e6c0:	beq	e668 <rb_inet_ntop+0x3bc>
    e6c4:	cmp	r6, #0
    e6c8:	strb	sl, [r7], #1
    e6cc:	cmpeq	r9, #6
    e6d0:	bne	e668 <rb_inet_ntop+0x3bc>
    e6d4:	ldr	r0, [sp, #12]
    e6d8:	cmp	r0, #5
    e6dc:	beq	e658 <rb_inet_ntop+0x3ac>
    e6e0:	cmp	r0, #6
    e6e4:	bne	e668 <rb_inet_ntop+0x3bc>
    e6e8:	add	r0, sp, #48	; 0x30
    e6ec:	mov	r1, r7
    e6f0:	sub	r0, r0, r7
    e6f4:	add	r2, r0, #46	; 0x2e
    e6f8:	ldr	r0, [sp]
    e6fc:	bl	e7b0 <inet_ntop4>
    e700:	cmp	r0, #0
    e704:	beq	e7a0 <rb_inet_ntop+0x4f4>
    e708:	mov	r0, r7
    e70c:	bl	5078 <strlen@plt>
    e710:	add	r7, r7, r0
    e714:	cmn	r6, #1
    e718:	beq	e728 <rb_inet_ntop+0x47c>
    e71c:	cmp	r8, #8
    e720:	moveq	r0, #58	; 0x3a
    e724:	strbeq	r0, [r7], #1
    e728:	ldr	r3, [sp, #8]
    e72c:	add	r1, sp, #48	; 0x30
    e730:	mov	r0, #0
    e734:	strb	r0, [r7], -r1
    e738:	add	r2, r7, #1
    e73c:	cmp	r2, r3
    e740:	bls	e74c <rb_inet_ntop+0x4a0>
    e744:	sub	sp, fp, #28
    e748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e74c:	ldr	r4, [sp, #4]
    e750:	add	r1, sp, #48	; 0x30
    e754:	mov	r0, r4
    e758:	bl	509c <memcpy@plt>
    e75c:	mov	r0, r4
    e760:	sub	sp, fp, #28
    e764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e768:	ldr	r1, [sl, #8]
    e76c:	cmn	r1, #65536	; 0x10000
    e770:	bne	e77c <rb_inet_ntop+0x4d0>
    e774:	add	r0, sl, #12
    e778:	b	e2d8 <rb_inet_ntop+0x2c>
    e77c:	ldr	r7, [sl, #8]
    e780:	mov	r1, #0
    e784:	cmp	r7, #0
    e788:	bne	e30c <rb_inet_ntop+0x60>
    e78c:	ldr	r7, [sl, #12]
    e790:	rev	r7, r7
    e794:	cmp	r7, #2
    e798:	bcc	e30c <rb_inet_ntop+0x60>
    e79c:	b	e774 <rb_inet_ntop+0x4c8>
    e7a0:	mov	r0, #0
    e7a4:	sub	sp, fp, #28
    e7a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7ac:	.word	0x0000bc0d

0000e7b0 <inet_ntop4>:
    e7b0:	push	{r4, r5, r6, sl, fp, lr}
    e7b4:	add	fp, sp, #16
    e7b8:	mov	r6, r1
    e7bc:	mov	r1, #0
    e7c0:	cmp	r2, #16
    e7c4:	bcc	e8c0 <inet_ntop4+0x110>
    e7c8:	ldrb	r1, [r0]
    e7cc:	ldr	ip, [pc, #244]	; e8c8 <inet_ntop4+0x118>
    e7d0:	add	ip, pc, ip
    e7d4:	ldr	r1, [ip, r1, lsl #2]
    e7d8:	ldrb	r2, [r1]
    e7dc:	cmp	r2, #0
    e7e0:	beq	e804 <inet_ntop4+0x54>
    e7e4:	add	r3, r1, #1
    e7e8:	ldr	r1, [pc, #224]	; e8d0 <inet_ntop4+0x120>
    e7ec:	add	r1, pc, r1
    e7f0:	strb	r2, [r1], #1
    e7f4:	ldrb	r2, [r3], #1
    e7f8:	cmp	r2, #0
    e7fc:	bne	e7f0 <inet_ntop4+0x40>
    e800:	b	e80c <inet_ntop4+0x5c>
    e804:	ldr	r1, [pc, #192]	; e8cc <inet_ntop4+0x11c>
    e808:	add	r1, pc, r1
    e80c:	mov	r3, #46	; 0x2e
    e810:	mov	r2, r1
    e814:	strb	r3, [r2], #1
    e818:	ldrb	r5, [r0, #1]
    e81c:	ldr	r5, [ip, r5, lsl #2]
    e820:	ldrb	r4, [r5]
    e824:	cmp	r4, #0
    e828:	beq	e844 <inet_ntop4+0x94>
    e82c:	add	r1, r5, #1
    e830:	strb	r4, [r2], #1
    e834:	ldrb	r4, [r1], #1
    e838:	cmp	r4, #0
    e83c:	bne	e830 <inet_ntop4+0x80>
    e840:	sub	r1, r2, #1
    e844:	strb	r3, [r2]
    e848:	ldrb	r2, [r0, #2]
    e84c:	ldr	r4, [ip, r2, lsl #2]
    e850:	add	r2, r1, #2
    e854:	ldrb	r3, [r4]
    e858:	cmp	r3, #0
    e85c:	beq	e874 <inet_ntop4+0xc4>
    e860:	add	r1, r4, #1
    e864:	strb	r3, [r2], #1
    e868:	ldrb	r3, [r1], #1
    e86c:	cmp	r3, #0
    e870:	bne	e864 <inet_ntop4+0xb4>
    e874:	mov	r1, #46	; 0x2e
    e878:	strb	r1, [r2], #1
    e87c:	ldrb	r0, [r0, #3]
    e880:	ldr	r1, [ip, r0, lsl #2]
    e884:	ldrb	r0, [r1]
    e888:	cmp	r0, #0
    e88c:	beq	e8a4 <inet_ntop4+0xf4>
    e890:	add	r1, r1, #1
    e894:	strb	r0, [r2], #1
    e898:	ldrb	r0, [r1], #1
    e89c:	cmp	r0, #0
    e8a0:	bne	e894 <inet_ntop4+0xe4>
    e8a4:	mov	r0, #0
    e8a8:	strb	r0, [r2]
    e8ac:	mov	r0, r6
    e8b0:	ldr	r1, [pc, #28]	; e8d4 <inet_ntop4+0x124>
    e8b4:	add	r1, pc, r1
    e8b8:	bl	512c <strcpy@plt>
    e8bc:	mov	r1, r6
    e8c0:	mov	r0, r1
    e8c4:	pop	{r4, r5, r6, sl, fp, pc}
    e8c8:	.word	0x0001d280
    e8cc:	.word	0x00030158
    e8d0:	.word	0x00030174
    e8d4:	.word	0x000300ac

0000e8d8 <inet_pton6>:
    e8d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8dc:	add	fp, sp, #28
    e8e0:	sub	sp, sp, #44	; 0x2c
    e8e4:	vmov.i32	q8, #0	; 0x00000000
    e8e8:	mov	sl, r0
    e8ec:	add	r0, sp, #24
    e8f0:	str	r1, [sp, #4]
    e8f4:	str	r0, [sp, #20]
    e8f8:	vst1.64	{d16-d17}, [r0]!
    e8fc:	ldrb	r4, [sl]
    e900:	str	r0, [sp, #16]
    e904:	cmp	r4, #58	; 0x3a
    e908:	bne	e91c <inet_pton6+0x44>
    e90c:	ldrb	r1, [sl, #1]!
    e910:	mov	r0, #0
    e914:	cmp	r1, #58	; 0x3a
    e918:	bne	ec2c <inet_pton6+0x354>
    e91c:	bl	50c0 <__ctype_tolower_loc@plt>
    e920:	ldr	r6, [r0]
    e924:	str	r0, [sp, #8]
    e928:	ldr	r4, [r6, r4, lsl #2]
    e92c:	cmp	r4, #0
    e930:	beq	ecec <inet_pton6+0x414>
    e934:	mov	r0, #0
    e938:	add	r5, sl, #1
    e93c:	mov	r8, #0
    e940:	mov	r9, #0
    e944:	str	r0, [sp, #12]
    e948:	ldr	r7, [pc, #952]	; ed08 <inet_pton6+0x430>
    e94c:	add	r7, pc, r7
    e950:	b	e97c <inet_pton6+0xa4>
    e954:	sub	r0, r0, r7
    e958:	mov	r9, #1
    e95c:	orr	r8, r0, r8, lsl #4
    e960:	mov	r0, #0
    e964:	cmp	r0, r8, lsr #16
    e968:	bne	ec2c <inet_pton6+0x354>
    e96c:	ldrb	r0, [r5], #1
    e970:	ldr	r4, [r6, r0, lsl #2]
    e974:	cmp	r4, #0
    e978:	beq	ea2c <inet_pton6+0x154>
    e97c:	mov	r0, r7
    e980:	mov	r1, r4
    e984:	mov	r2, #17
    e988:	bl	551c <memchr@plt>
    e98c:	cmp	r0, #0
    e990:	bne	e954 <inet_pton6+0x7c>
    e994:	cmp	r4, #58	; 0x3a
    e998:	bne	e9f0 <inet_pton6+0x118>
    e99c:	cmp	r9, #0
    e9a0:	beq	ea08 <inet_pton6+0x130>
    e9a4:	ldr	r0, [sp, #20]
    e9a8:	ldr	r2, [sp, #16]
    e9ac:	add	r1, r0, #2
    e9b0:	mov	r0, #0
    e9b4:	cmp	r1, r2
    e9b8:	bhi	ec2c <inet_pton6+0x354>
    e9bc:	ldrb	r2, [r5]
    e9c0:	cmp	r2, #0
    e9c4:	beq	ec2c <inet_pton6+0x354>
    e9c8:	ldr	r2, [sp, #20]
    e9cc:	rev16	r0, r8
    e9d0:	mov	r9, #0
    e9d4:	mov	sl, r5
    e9d8:	mov	r8, #0
    e9dc:	str	r1, [sp, #20]
    e9e0:	strh	r0, [r2]
    e9e4:	ldr	r0, [sp, #8]
    e9e8:	ldr	r6, [r0]
    e9ec:	b	e96c <inet_pton6+0x94>
    e9f0:	cmp	r4, #46	; 0x2e
    e9f4:	bne	e96c <inet_pton6+0x94>
    e9f8:	ldrb	r0, [r5]
    e9fc:	cmp	r0, #0
    ea00:	beq	e96c <inet_pton6+0x94>
    ea04:	b	eab0 <inet_pton6+0x1d8>
    ea08:	ldr	r0, [sp, #12]
    ea0c:	mov	r9, #0
    ea10:	mov	sl, r5
    ea14:	cmp	r0, #0
    ea18:	ldr	r0, [sp, #20]
    ea1c:	str	r0, [sp, #12]
    ea20:	mov	r0, #0
    ea24:	beq	e96c <inet_pton6+0x94>
    ea28:	b	ec2c <inet_pton6+0x354>
    ea2c:	cmp	r9, #0
    ea30:	beq	ea5c <inet_pton6+0x184>
    ea34:	ldr	r0, [sp, #20]
    ea38:	ldr	r2, [sp, #16]
    ea3c:	add	r1, r0, #2
    ea40:	mov	r0, #0
    ea44:	cmp	r1, r2
    ea48:	bhi	ec2c <inet_pton6+0x354>
    ea4c:	ldr	r2, [sp, #20]
    ea50:	rev16	r0, r8
    ea54:	strh	r0, [r2]
    ea58:	b	ea60 <inet_pton6+0x188>
    ea5c:	ldr	r1, [sp, #20]
    ea60:	ldr	r2, [sp, #12]
    ea64:	cmp	r2, #0
    ea68:	beq	ea9c <inet_pton6+0x1c4>
    ea6c:	ldr	r0, [sp, #16]
    ea70:	cmp	r1, r0
    ea74:	beq	ecec <inet_pton6+0x414>
    ea78:	sub	r8, r1, r2
    ea7c:	cmp	r8, #1
    ea80:	blt	ec18 <inet_pton6+0x340>
    ea84:	mov	r9, r2
    ea88:	mov	r3, #1
    ea8c:	cmp	r8, #16
    ea90:	bcs	eb78 <inet_pton6+0x2a0>
    ea94:	mov	sl, r9
    ea98:	b	eb9c <inet_pton6+0x2c4>
    ea9c:	ldr	r2, [sp, #16]
    eaa0:	mov	r0, #0
    eaa4:	cmp	r1, r2
    eaa8:	bne	ec2c <inet_pton6+0x354>
    eaac:	b	ec18 <inet_pton6+0x340>
    eab0:	ldr	r0, [sp, #20]
    eab4:	ldr	r2, [sp, #16]
    eab8:	add	r1, r0, #4
    eabc:	mov	r0, #0
    eac0:	cmp	r1, r2
    eac4:	bhi	ec2c <inet_pton6+0x354>
    eac8:	mov	r7, #0
    eacc:	strb	r7, [fp, #-32]	; 0xffffffe0
    ead0:	ldrb	r5, [sl]
    ead4:	cmp	r5, #0
    ead8:	beq	ecec <inet_pton6+0x414>
    eadc:	add	r0, sl, #1
    eae0:	sub	r2, fp, #32
    eae4:	mov	r3, #0
    eae8:	mov	r6, #0
    eaec:	b	eb04 <inet_pton6+0x22c>
    eaf0:	add	r3, r3, #1
    eaf4:	mov	r6, #1
    eaf8:	ldrb	r5, [r0], #1
    eafc:	cmp	r5, #0
    eb00:	beq	ece4 <inet_pton6+0x40c>
    eb04:	sub	r4, r5, #48	; 0x30
    eb08:	uxtb	r4, r4
    eb0c:	cmp	r4, #9
    eb10:	bhi	eb4c <inet_pton6+0x274>
    eb14:	uxtb	r4, r7
    eb18:	lsl	r4, r4, #2
    eb1c:	uxtab	r7, r4, r7
    eb20:	lsl	r7, r7, #1
    eb24:	uxtab	r7, r7, r5
    eb28:	sub	r7, r7, #48	; 0x30
    eb2c:	cmp	r7, #255	; 0xff
    eb30:	bhi	ecec <inet_pton6+0x414>
    eb34:	cmp	r6, #0
    eb38:	strb	r7, [r2]
    eb3c:	bne	eaf8 <inet_pton6+0x220>
    eb40:	cmp	r3, #3
    eb44:	ble	eaf0 <inet_pton6+0x218>
    eb48:	b	ecec <inet_pton6+0x414>
    eb4c:	cmp	r3, #4
    eb50:	beq	ecec <inet_pton6+0x414>
    eb54:	uxtb	r7, r5
    eb58:	cmp	r7, #46	; 0x2e
    eb5c:	bne	ecec <inet_pton6+0x414>
    eb60:	cmp	r6, #0
    eb64:	beq	ecec <inet_pton6+0x414>
    eb68:	mov	r7, #0
    eb6c:	mov	r6, #0
    eb70:	strb	r7, [r2, #1]!
    eb74:	b	eaf8 <inet_pton6+0x220>
    eb78:	mvn	r2, r9
    eb7c:	mov	sl, r9
    eb80:	add	r7, r2, r1
    eb84:	add	r2, sp, #24
    eb88:	add	r6, r2, #15
    eb8c:	cmp	r7, r6
    eb90:	addls	r6, sl, r7
    eb94:	cmpls	r7, r6
    eb98:	bls	ec34 <inet_pton6+0x35c>
    eb9c:	sub	r2, r1, r3
    eba0:	tst	r8, #1
    eba4:	beq	ebc4 <inet_pton6+0x2ec>
    eba8:	sub	r0, r8, r3
    ebac:	ldr	r6, [sp, #16]
    ebb0:	ldrb	r7, [sl, r0]
    ebb4:	strb	r7, [r6, -r3]
    ebb8:	mov	r7, #0
    ebbc:	add	r3, r3, #1
    ebc0:	strb	r7, [sl, r0]
    ebc4:	cmp	r2, sl
    ebc8:	beq	ec18 <inet_pton6+0x340>
    ebcc:	mvn	r0, r1
    ebd0:	rsb	r1, r3, #0
    ebd4:	add	r7, r9, r8
    ebd8:	add	r2, sp, #24
    ebdc:	mov	r3, #0
    ebe0:	add	r0, r0, r9
    ebe4:	sub	r6, r7, #2
    ebe8:	ldrb	r5, [r7, r1]!
    ebec:	add	r4, r2, r1
    ebf0:	add	r0, r0, #2
    ebf4:	sub	r2, r2, #2
    ebf8:	cmp	r1, r0
    ebfc:	strb	r5, [r4, #16]
    ec00:	strb	r3, [r7]
    ec04:	ldrb	r5, [r7, #-1]
    ec08:	strb	r5, [r4, #15]
    ec0c:	strb	r3, [r7, #-1]
    ec10:	mov	r7, r6
    ec14:	bne	ebe4 <inet_pton6+0x30c>
    ec18:	add	r0, sp, #24
    ec1c:	vld1.64	{d16-d17}, [r0]
    ec20:	ldr	r0, [sp, #4]
    ec24:	vst1.8	{d16-d17}, [r0]
    ec28:	mov	r0, #1
    ec2c:	sub	sp, fp, #28
    ec30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec34:	sub	r6, sl, r1
    ec38:	add	r7, r2, #16
    ec3c:	add	r6, r7, r6
    ec40:	cmp	r6, r1
    ec44:	cmpcc	sl, r7
    ec48:	bcc	eb9c <inet_pton6+0x2c4>
    ec4c:	bic	ip, r8, #15
    ec50:	mov	r7, #1
    ec54:	subs	r3, ip, #16
    ec58:	add	r3, r7, r3, lsr #4
    ec5c:	and	lr, r3, #1
    ec60:	beq	eca4 <inet_pton6+0x3cc>
    ec64:	vmov.i32	q8, #0	; 0x00000000
    ec68:	sub	r5, lr, r3
    ec6c:	sub	r4, r1, #32
    ec70:	mov	r7, #1
    ec74:	mvn	r3, #31
    ec78:	add	r6, r4, #16
    ec7c:	sub	r0, r2, #16
    ec80:	adds	r5, r5, #2
    ec84:	add	r7, r7, #32
    ec88:	vld1.8	{d18-d19}, [r6]
    ec8c:	vst1.8	{d18-d19}, [r2], r3
    ec90:	vld1.8	{d18-d19}, [r4]
    ec94:	vst1.8	{d16-d17}, [r6]
    ec98:	vst1.8	{d18-d19}, [r0]
    ec9c:	vst1.8	{d16-d17}, [r4], r3
    eca0:	bne	ec78 <inet_pton6+0x3a0>
    eca4:	cmp	lr, #0
    eca8:	beq	ecd4 <inet_pton6+0x3fc>
    ecac:	sub	r2, r8, r7
    ecb0:	add	r0, sp, #24
    ecb4:	vmov.i32	q9, #0	; 0x00000000
    ecb8:	add	r2, sl, r2
    ecbc:	sub	r0, r0, r7
    ecc0:	sub	r2, r2, #15
    ecc4:	add	r0, r0, #1
    ecc8:	vld1.8	{d16-d17}, [r2]
    eccc:	vst1.8	{d16-d17}, [r0]
    ecd0:	vst1.8	{d18-d19}, [r2]
    ecd4:	cmp	r8, ip
    ecd8:	beq	ec18 <inet_pton6+0x340>
    ecdc:	orr	r3, ip, #1
    ece0:	b	ea94 <inet_pton6+0x1bc>
    ece4:	cmp	r3, #3
    ece8:	bgt	ecf8 <inet_pton6+0x420>
    ecec:	mov	r0, #0
    ecf0:	sub	sp, fp, #28
    ecf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ecfc:	ldr	r2, [sp, #20]
    ed00:	str	r0, [r2]
    ed04:	b	ea60 <inet_pton6+0x188>
    ed08:	.word	0x0000b911

0000ed0c <rb_get_iotype>:
    ed0c:	ldr	r0, [pc, #4]	; ed18 <rb_get_iotype+0xc>
    ed10:	add	r0, pc, r0
    ed14:	bx	lr
    ed18:	.word	0x0002fc0c

0000ed1c <rb_io_sched_event>:
    ed1c:	push	{r4, r5, fp, lr}
    ed20:	add	fp, sp, #8
    ed24:	cmp	r0, #0
    ed28:	beq	ed50 <rb_io_sched_event+0x34>
    ed2c:	mov	r5, r0
    ed30:	ldr	r0, [pc, #68]	; ed7c <rb_io_sched_event+0x60>
    ed34:	ldr	r0, [pc, r0]
    ed38:	cmp	r0, #0
    ed3c:	movne	r4, r1
    ed40:	ldrne	r1, [pc, #56]	; ed80 <rb_io_sched_event+0x64>
    ed44:	ldrne	r1, [pc, r1]
    ed48:	cmpne	r1, #0
    ed4c:	bne	ed58 <rb_io_sched_event+0x3c>
    ed50:	mov	r0, #0
    ed54:	pop	{r4, r5, fp, pc}
    ed58:	blx	r0
    ed5c:	cmp	r0, #0
    ed60:	beq	ed50 <rb_io_sched_event+0x34>
    ed64:	ldr	r2, [pc, #24]	; ed84 <rb_io_sched_event+0x68>
    ed68:	mov	r0, r5
    ed6c:	mov	r1, r4
    ed70:	ldr	r2, [pc, r2]
    ed74:	pop	{r4, r5, fp, lr}
    ed78:	bx	r2
    ed7c:	.word	0x0002fc04
    ed80:	.word	0x0002fbf8
    ed84:	.word	0x0002fbcc

0000ed88 <rb_io_unsched_event>:
    ed88:	push	{r4, sl, fp, lr}
    ed8c:	add	fp, sp, #8
    ed90:	cmp	r0, #0
    ed94:	beq	edb8 <rb_io_unsched_event+0x30>
    ed98:	mov	r4, r0
    ed9c:	ldr	r0, [pc, #56]	; eddc <rb_io_unsched_event+0x54>
    eda0:	ldr	r0, [pc, r0]
    eda4:	cmp	r0, #0
    eda8:	ldrne	r1, [pc, #48]	; ede0 <rb_io_unsched_event+0x58>
    edac:	ldrne	r1, [pc, r1]
    edb0:	cmpne	r1, #0
    edb4:	bne	edbc <rb_io_unsched_event+0x34>
    edb8:	pop	{r4, sl, fp, pc}
    edbc:	blx	r0
    edc0:	cmp	r0, #0
    edc4:	popeq	{r4, sl, fp, pc}
    edc8:	ldr	r1, [pc, #20]	; ede4 <rb_io_unsched_event+0x5c>
    edcc:	mov	r0, r4
    edd0:	ldr	r1, [pc, r1]
    edd4:	pop	{r4, sl, fp, lr}
    edd8:	bx	r1
    eddc:	.word	0x0002fb98
    ede0:	.word	0x0002fb94
    ede4:	.word	0x0002fb70

0000ede8 <rb_io_supports_event>:
    ede8:	ldr	r0, [pc, #16]	; ee00 <rb_io_supports_event+0x18>
    edec:	ldr	r0, [pc, r0]
    edf0:	cmp	r0, #0
    edf4:	moveq	r0, #0
    edf8:	bxeq	lr
    edfc:	bx	r0
    ee00:	.word	0x0002fb4c

0000ee04 <rb_io_init_event>:
    ee04:	push	{fp, lr}
    ee08:	mov	fp, sp
    ee0c:	ldr	r0, [pc, #12]	; ee20 <rb_io_init_event+0x1c>
    ee10:	ldr	r0, [pc, r0]
    ee14:	blx	r0
    ee18:	pop	{fp, lr}
    ee1c:	b	11860 <rb_event_io_register_all>
    ee20:	.word	0x0002fb34

0000ee24 <rb_init_netio>:
    ee24:	push	{r4, r5, fp, lr}
    ee28:	add	fp, sp, #8
    ee2c:	ldr	r0, [pc, #2656]	; f894 <rb_init_netio+0xa70>
    ee30:	add	r0, pc, r0
    ee34:	bl	4e50 <getenv@plt>
    ee38:	mov	r5, r0
    ee3c:	mov	r0, #1
    ee40:	mov	r1, #49152	; 0xc000
    ee44:	bl	4e98 <calloc@plt>
    ee48:	cmp	r0, #0
    ee4c:	beq	f880 <rb_init_netio+0xa5c>
    ee50:	ldr	r1, [pc, #2624]	; f898 <rb_init_netio+0xa74>
    ee54:	ldr	r1, [pc, r1]
    ee58:	str	r0, [r1]
    ee5c:	bl	10124 <rb_init_ssl>
    ee60:	cmp	r5, #0
    ee64:	beq	f29c <rb_init_netio+0x478>
    ee68:	ldr	r4, [pc, #2604]	; f89c <rb_init_netio+0xa78>
    ee6c:	mov	r1, r5
    ee70:	add	r4, pc, r4
    ee74:	mov	r0, r4
    ee78:	bl	5534 <strcmp@plt>
    ee7c:	cmp	r0, #0
    ee80:	beq	efa8 <rb_init_netio+0x184>
    ee84:	ldr	r4, [pc, #2636]	; f8d8 <rb_init_netio+0xab4>
    ee88:	mov	r1, r5
    ee8c:	add	r4, pc, r4
    ee90:	mov	r0, r4
    ee94:	bl	5534 <strcmp@plt>
    ee98:	cmp	r0, #0
    ee9c:	beq	f044 <rb_init_netio+0x220>
    eea0:	ldr	r4, [pc, #2668]	; f914 <rb_init_netio+0xaf0>
    eea4:	mov	r1, r5
    eea8:	add	r4, pc, r4
    eeac:	mov	r0, r4
    eeb0:	bl	5534 <strcmp@plt>
    eeb4:	cmp	r0, #0
    eeb8:	beq	f0d4 <rb_init_netio+0x2b0>
    eebc:	ldr	r4, [pc, #2696]	; f94c <rb_init_netio+0xb28>
    eec0:	mov	r1, r5
    eec4:	add	r4, pc, r4
    eec8:	mov	r0, r4
    eecc:	bl	5534 <strcmp@plt>
    eed0:	cmp	r0, #0
    eed4:	beq	f170 <rb_init_netio+0x34c>
    eed8:	ldr	r4, [pc, #2716]	; f97c <rb_init_netio+0xb58>
    eedc:	mov	r1, r5
    eee0:	add	r4, pc, r4
    eee4:	mov	r0, r4
    eee8:	bl	5534 <strcmp@plt>
    eeec:	cmp	r0, #0
    eef0:	beq	f1ec <rb_init_netio+0x3c8>
    eef4:	ldr	r4, [pc, #2732]	; f9a8 <rb_init_netio+0xb84>
    eef8:	mov	r1, r5
    eefc:	add	r4, pc, r4
    ef00:	mov	r0, r4
    ef04:	bl	5534 <strcmp@plt>
    ef08:	cmp	r0, #0
    ef0c:	beq	f268 <rb_init_netio+0x444>
    ef10:	ldr	r4, [pc, #2760]	; f9e0 <rb_init_netio+0xbbc>
    ef14:	mov	r1, r5
    ef18:	add	r4, pc, r4
    ef1c:	mov	r0, r4
    ef20:	bl	5534 <strcmp@plt>
    ef24:	cmp	r0, #0
    ef28:	bne	f274 <rb_init_netio+0x450>
    ef2c:	bl	15718 <rb_init_netio_select>
    ef30:	cmp	r0, #0
    ef34:	bne	f274 <rb_init_netio+0x450>
    ef38:	ldr	r0, [pc, #2724]	; f9e4 <rb_init_netio+0xbc0>
    ef3c:	mov	r1, #0
    ef40:	add	r0, pc, r0
    ef44:	str	r1, [r0]
    ef48:	ldr	r0, [pc, #2712]	; f9e8 <rb_init_netio+0xbc4>
    ef4c:	add	r0, pc, r0
    ef50:	str	r1, [r0]
    ef54:	ldr	r0, [pc, #2704]	; f9ec <rb_init_netio+0xbc8>
    ef58:	add	r0, pc, r0
    ef5c:	str	r1, [r0]
    ef60:	ldr	r0, [pc, #2696]	; f9f0 <rb_init_netio+0xbcc>
    ef64:	ldr	r1, [pc, #2696]	; f9f4 <rb_init_netio+0xbd0>
    ef68:	add	r0, pc, r0
    ef6c:	add	r1, pc, r1
    ef70:	str	r1, [r0]
    ef74:	ldr	r0, [pc, #2684]	; f9f8 <rb_init_netio+0xbd4>
    ef78:	ldr	r0, [pc, r0]
    ef7c:	ldr	r1, [pc, #2680]	; f9fc <rb_init_netio+0xbd8>
    ef80:	add	r1, pc, r1
    ef84:	str	r0, [r1]
    ef88:	ldr	r0, [pc, #2672]	; fa00 <rb_init_netio+0xbdc>
    ef8c:	ldr	r0, [pc, r0]
    ef90:	ldr	r1, [pc, #2668]	; fa04 <rb_init_netio+0xbe0>
    ef94:	add	r1, pc, r1
    ef98:	str	r0, [r1]
    ef9c:	ldr	r0, [pc, #2660]	; fa08 <rb_init_netio+0xbe4>
    efa0:	ldr	r0, [pc, r0]
    efa4:	b	f638 <rb_init_netio+0x814>
    efa8:	bl	13d2c <rb_init_netio_epoll>
    efac:	cmp	r0, #0
    efb0:	bne	f274 <rb_init_netio+0x450>
    efb4:	ldr	r0, [pc, #2276]	; f8a0 <rb_init_netio+0xa7c>
    efb8:	ldr	r0, [pc, r0]
    efbc:	ldr	r1, [pc, #2272]	; f8a4 <rb_init_netio+0xa80>
    efc0:	add	r1, pc, r1
    efc4:	str	r0, [r1]
    efc8:	ldr	r0, [pc, #2264]	; f8a8 <rb_init_netio+0xa84>
    efcc:	ldr	r0, [pc, r0]
    efd0:	ldr	r1, [pc, #2260]	; f8ac <rb_init_netio+0xa88>
    efd4:	add	r1, pc, r1
    efd8:	str	r0, [r1]
    efdc:	ldr	r0, [pc, #2252]	; f8b0 <rb_init_netio+0xa8c>
    efe0:	ldr	r0, [pc, r0]
    efe4:	ldr	r1, [pc, #2248]	; f8b4 <rb_init_netio+0xa90>
    efe8:	add	r1, pc, r1
    efec:	str	r0, [r1]
    eff0:	ldr	r0, [pc, #2240]	; f8b8 <rb_init_netio+0xa94>
    eff4:	ldr	r0, [pc, r0]
    eff8:	ldr	r1, [pc, #2236]	; f8bc <rb_init_netio+0xa98>
    effc:	add	r1, pc, r1
    f000:	str	r0, [r1]
    f004:	ldr	r0, [pc, #2228]	; f8c0 <rb_init_netio+0xa9c>
    f008:	ldr	r0, [pc, r0]
    f00c:	ldr	r1, [pc, #2224]	; f8c4 <rb_init_netio+0xaa0>
    f010:	add	r1, pc, r1
    f014:	str	r0, [r1]
    f018:	ldr	r0, [pc, #2216]	; f8c8 <rb_init_netio+0xaa4>
    f01c:	ldr	r0, [pc, r0]
    f020:	ldr	r1, [pc, #2212]	; f8cc <rb_init_netio+0xaa8>
    f024:	add	r1, pc, r1
    f028:	str	r0, [r1]
    f02c:	ldr	r0, [pc, #2204]	; f8d0 <rb_init_netio+0xaac>
    f030:	ldr	r0, [pc, r0]
    f034:	ldr	r1, [pc, #2200]	; f8d4 <rb_init_netio+0xab0>
    f038:	add	r1, pc, r1
    f03c:	str	r0, [r1]
    f040:	b	f7e4 <rb_init_netio+0x9c0>
    f044:	bl	15dbc <rb_init_netio_kqueue>
    f048:	cmp	r0, #0
    f04c:	bne	f274 <rb_init_netio+0x450>
    f050:	ldr	r0, [pc, #2180]	; f8dc <rb_init_netio+0xab8>
    f054:	ldr	r0, [pc, r0]
    f058:	ldr	r1, [pc, #2176]	; f8e0 <rb_init_netio+0xabc>
    f05c:	add	r1, pc, r1
    f060:	str	r0, [r1]
    f064:	ldr	r0, [pc, #2168]	; f8e4 <rb_init_netio+0xac0>
    f068:	ldr	r0, [pc, r0]
    f06c:	ldr	r1, [pc, #2164]	; f8e8 <rb_init_netio+0xac4>
    f070:	add	r1, pc, r1
    f074:	str	r0, [r1]
    f078:	ldr	r0, [pc, #2156]	; f8ec <rb_init_netio+0xac8>
    f07c:	ldr	r0, [pc, r0]
    f080:	ldr	r1, [pc, #2152]	; f8f0 <rb_init_netio+0xacc>
    f084:	add	r1, pc, r1
    f088:	str	r0, [r1]
    f08c:	ldr	r0, [pc, #2144]	; f8f4 <rb_init_netio+0xad0>
    f090:	ldr	r0, [pc, r0]
    f094:	ldr	r1, [pc, #2140]	; f8f8 <rb_init_netio+0xad4>
    f098:	add	r1, pc, r1
    f09c:	str	r0, [r1]
    f0a0:	ldr	r0, [pc, #2132]	; f8fc <rb_init_netio+0xad8>
    f0a4:	ldr	r0, [pc, r0]
    f0a8:	ldr	r1, [pc, #2128]	; f900 <rb_init_netio+0xadc>
    f0ac:	add	r1, pc, r1
    f0b0:	str	r0, [r1]
    f0b4:	ldr	r0, [pc, #2120]	; f904 <rb_init_netio+0xae0>
    f0b8:	ldr	r0, [pc, r0]
    f0bc:	ldr	r1, [pc, #2116]	; f908 <rb_init_netio+0xae4>
    f0c0:	add	r1, pc, r1
    f0c4:	str	r0, [r1]
    f0c8:	ldr	r0, [pc, #2108]	; f90c <rb_init_netio+0xae8>
    f0cc:	ldr	r0, [pc, r0]
    f0d0:	b	f160 <rb_init_netio+0x33c>
    f0d4:	bl	14c84 <rb_init_netio_ports>
    f0d8:	cmp	r0, #0
    f0dc:	bne	f274 <rb_init_netio+0x450>
    f0e0:	ldr	r0, [pc, #2096]	; f918 <rb_init_netio+0xaf4>
    f0e4:	ldr	r0, [pc, r0]
    f0e8:	ldr	r1, [pc, #2092]	; f91c <rb_init_netio+0xaf8>
    f0ec:	add	r1, pc, r1
    f0f0:	str	r0, [r1]
    f0f4:	ldr	r0, [pc, #2084]	; f920 <rb_init_netio+0xafc>
    f0f8:	ldr	r0, [pc, r0]
    f0fc:	ldr	r1, [pc, #2080]	; f924 <rb_init_netio+0xb00>
    f100:	add	r1, pc, r1
    f104:	str	r0, [r1]
    f108:	ldr	r0, [pc, #2072]	; f928 <rb_init_netio+0xb04>
    f10c:	ldr	r0, [pc, r0]
    f110:	ldr	r1, [pc, #2068]	; f92c <rb_init_netio+0xb08>
    f114:	add	r1, pc, r1
    f118:	str	r0, [r1]
    f11c:	ldr	r0, [pc, #2060]	; f930 <rb_init_netio+0xb0c>
    f120:	ldr	r0, [pc, r0]
    f124:	ldr	r1, [pc, #2056]	; f934 <rb_init_netio+0xb10>
    f128:	add	r1, pc, r1
    f12c:	str	r0, [r1]
    f130:	ldr	r0, [pc, #2048]	; f938 <rb_init_netio+0xb14>
    f134:	ldr	r0, [pc, r0]
    f138:	ldr	r1, [pc, #2044]	; f93c <rb_init_netio+0xb18>
    f13c:	add	r1, pc, r1
    f140:	str	r0, [r1]
    f144:	ldr	r0, [pc, #2036]	; f940 <rb_init_netio+0xb1c>
    f148:	ldr	r0, [pc, r0]
    f14c:	ldr	r1, [pc, #2032]	; f944 <rb_init_netio+0xb20>
    f150:	add	r1, pc, r1
    f154:	str	r0, [r1]
    f158:	ldr	r0, [pc, #2024]	; f948 <rb_init_netio+0xb24>
    f15c:	ldr	r0, [pc, r0]
    f160:	ldr	r1, [pc, #1960]	; f910 <rb_init_netio+0xaec>
    f164:	add	r1, pc, r1
    f168:	str	r0, [r1]
    f16c:	b	f7e4 <rb_init_netio+0x9c0>
    f170:	bl	147e4 <rb_init_netio_poll>
    f174:	cmp	r0, #0
    f178:	bne	f274 <rb_init_netio+0x450>
    f17c:	ldr	r0, [pc, #1996]	; f950 <rb_init_netio+0xb2c>
    f180:	mov	r1, #0
    f184:	add	r0, pc, r0
    f188:	str	r1, [r0]
    f18c:	ldr	r0, [pc, #1984]	; f954 <rb_init_netio+0xb30>
    f190:	add	r0, pc, r0
    f194:	str	r1, [r0]
    f198:	ldr	r0, [pc, #1976]	; f958 <rb_init_netio+0xb34>
    f19c:	add	r0, pc, r0
    f1a0:	str	r1, [r0]
    f1a4:	ldr	r0, [pc, #1968]	; f95c <rb_init_netio+0xb38>
    f1a8:	ldr	r1, [pc, #1968]	; f960 <rb_init_netio+0xb3c>
    f1ac:	add	r0, pc, r0
    f1b0:	add	r1, pc, r1
    f1b4:	str	r1, [r0]
    f1b8:	ldr	r0, [pc, #1956]	; f964 <rb_init_netio+0xb40>
    f1bc:	ldr	r0, [pc, r0]
    f1c0:	ldr	r1, [pc, #1952]	; f968 <rb_init_netio+0xb44>
    f1c4:	add	r1, pc, r1
    f1c8:	str	r0, [r1]
    f1cc:	ldr	r0, [pc, #1944]	; f96c <rb_init_netio+0xb48>
    f1d0:	ldr	r0, [pc, r0]
    f1d4:	ldr	r1, [pc, #1940]	; f970 <rb_init_netio+0xb4c>
    f1d8:	add	r1, pc, r1
    f1dc:	str	r0, [r1]
    f1e0:	ldr	r0, [pc, #1932]	; f974 <rb_init_netio+0xb50>
    f1e4:	ldr	r0, [pc, r0]
    f1e8:	b	f638 <rb_init_netio+0x814>
    f1ec:	bl	13cd4 <rb_init_netio_devpoll>
    f1f0:	cmp	r0, #0
    f1f4:	bne	f274 <rb_init_netio+0x450>
    f1f8:	ldr	r0, [pc, #1920]	; f980 <rb_init_netio+0xb5c>
    f1fc:	mov	r1, #0
    f200:	add	r0, pc, r0
    f204:	str	r1, [r0]
    f208:	ldr	r0, [pc, #1908]	; f984 <rb_init_netio+0xb60>
    f20c:	add	r0, pc, r0
    f210:	str	r1, [r0]
    f214:	ldr	r0, [pc, #1900]	; f988 <rb_init_netio+0xb64>
    f218:	add	r0, pc, r0
    f21c:	str	r1, [r0]
    f220:	ldr	r0, [pc, #1892]	; f98c <rb_init_netio+0xb68>
    f224:	ldr	r1, [pc, #1892]	; f990 <rb_init_netio+0xb6c>
    f228:	add	r0, pc, r0
    f22c:	add	r1, pc, r1
    f230:	str	r1, [r0]
    f234:	ldr	r0, [pc, #1880]	; f994 <rb_init_netio+0xb70>
    f238:	ldr	r0, [pc, r0]
    f23c:	ldr	r1, [pc, #1876]	; f998 <rb_init_netio+0xb74>
    f240:	add	r1, pc, r1
    f244:	str	r0, [r1]
    f248:	ldr	r0, [pc, #1868]	; f99c <rb_init_netio+0xb78>
    f24c:	ldr	r0, [pc, r0]
    f250:	ldr	r1, [pc, #1864]	; f9a0 <rb_init_netio+0xb7c>
    f254:	add	r1, pc, r1
    f258:	str	r0, [r1]
    f25c:	ldr	r0, [pc, #1856]	; f9a4 <rb_init_netio+0xb80>
    f260:	ldr	r0, [pc, r0]
    f264:	b	f638 <rb_init_netio+0x814>
    f268:	bl	14cdc <rb_init_netio_sigio>
    f26c:	cmp	r0, #0
    f270:	beq	f7fc <rb_init_netio+0x9d8>
    f274:	ldr	r4, [pc, #1936]	; fa0c <rb_init_netio+0xbe8>
    f278:	mov	r1, r5
    f27c:	add	r4, pc, r4
    f280:	mov	r0, r4
    f284:	bl	5534 <strcmp@plt>
    f288:	cmp	r0, #0
    f28c:	bne	f29c <rb_init_netio+0x478>
    f290:	bl	57b8 <rb_init_netio_win32>
    f294:	cmp	r0, #0
    f298:	beq	f5cc <rb_init_netio+0x7a8>
    f29c:	bl	15dbc <rb_init_netio_kqueue>
    f2a0:	cmp	r0, #0
    f2a4:	beq	f380 <rb_init_netio+0x55c>
    f2a8:	bl	13d2c <rb_init_netio_epoll>
    f2ac:	cmp	r0, #0
    f2b0:	beq	f418 <rb_init_netio+0x5f4>
    f2b4:	bl	14c84 <rb_init_netio_ports>
    f2b8:	cmp	r0, #0
    f2bc:	beq	f4b0 <rb_init_netio+0x68c>
    f2c0:	bl	13cd4 <rb_init_netio_devpoll>
    f2c4:	cmp	r0, #0
    f2c8:	beq	f548 <rb_init_netio+0x724>
    f2cc:	bl	14cdc <rb_init_netio_sigio>
    f2d0:	cmp	r0, #0
    f2d4:	beq	f648 <rb_init_netio+0x824>
    f2d8:	bl	147e4 <rb_init_netio_poll>
    f2dc:	cmp	r0, #0
    f2e0:	beq	f6e0 <rb_init_netio+0x8bc>
    f2e4:	bl	57b8 <rb_init_netio_win32>
    f2e8:	cmp	r0, #0
    f2ec:	beq	f764 <rb_init_netio+0x940>
    f2f0:	bl	15718 <rb_init_netio_select>
    f2f4:	cmp	r0, #0
    f2f8:	bne	f884 <rb_init_netio+0xa60>
    f2fc:	ldr	r0, [pc, #2228]	; fbb8 <rb_init_netio+0xd94>
    f300:	mov	r1, #0
    f304:	add	r0, pc, r0
    f308:	str	r1, [r0]
    f30c:	ldr	r0, [pc, #2216]	; fbbc <rb_init_netio+0xd98>
    f310:	add	r0, pc, r0
    f314:	str	r1, [r0]
    f318:	ldr	r0, [pc, #2208]	; fbc0 <rb_init_netio+0xd9c>
    f31c:	add	r0, pc, r0
    f320:	str	r1, [r0]
    f324:	ldr	r0, [pc, #2200]	; fbc4 <rb_init_netio+0xda0>
    f328:	ldr	r1, [pc, #2200]	; fbc8 <rb_init_netio+0xda4>
    f32c:	add	r0, pc, r0
    f330:	add	r1, pc, r1
    f334:	str	r1, [r0]
    f338:	ldr	r0, [pc, #2188]	; fbcc <rb_init_netio+0xda8>
    f33c:	ldr	r0, [pc, r0]
    f340:	ldr	r1, [pc, #2184]	; fbd0 <rb_init_netio+0xdac>
    f344:	add	r1, pc, r1
    f348:	str	r0, [r1]
    f34c:	ldr	r0, [pc, #2176]	; fbd4 <rb_init_netio+0xdb0>
    f350:	ldr	r0, [pc, r0]
    f354:	ldr	r1, [pc, #2172]	; fbd8 <rb_init_netio+0xdb4>
    f358:	add	r1, pc, r1
    f35c:	str	r0, [r1]
    f360:	ldr	r0, [pc, #2164]	; fbdc <rb_init_netio+0xdb8>
    f364:	ldr	r0, [pc, r0]
    f368:	ldr	r1, [pc, #2160]	; fbe0 <rb_init_netio+0xdbc>
    f36c:	add	r1, pc, r1
    f370:	str	r0, [r1]
    f374:	ldr	r4, [pc, #2152]	; fbe4 <rb_init_netio+0xdc0>
    f378:	add	r4, pc, r4
    f37c:	b	f7e4 <rb_init_netio+0x9c0>
    f380:	ldr	r0, [pc, #1712]	; fa38 <rb_init_netio+0xc14>
    f384:	ldr	r0, [pc, r0]
    f388:	ldr	r1, [pc, #1708]	; fa3c <rb_init_netio+0xc18>
    f38c:	add	r1, pc, r1
    f390:	str	r0, [r1]
    f394:	ldr	r0, [pc, #1700]	; fa40 <rb_init_netio+0xc1c>
    f398:	ldr	r0, [pc, r0]
    f39c:	ldr	r1, [pc, #1696]	; fa44 <rb_init_netio+0xc20>
    f3a0:	add	r1, pc, r1
    f3a4:	str	r0, [r1]
    f3a8:	ldr	r0, [pc, #1688]	; fa48 <rb_init_netio+0xc24>
    f3ac:	ldr	r0, [pc, r0]
    f3b0:	ldr	r1, [pc, #1684]	; fa4c <rb_init_netio+0xc28>
    f3b4:	add	r1, pc, r1
    f3b8:	str	r0, [r1]
    f3bc:	ldr	r0, [pc, #1676]	; fa50 <rb_init_netio+0xc2c>
    f3c0:	ldr	r0, [pc, r0]
    f3c4:	ldr	r1, [pc, #1672]	; fa54 <rb_init_netio+0xc30>
    f3c8:	add	r1, pc, r1
    f3cc:	str	r0, [r1]
    f3d0:	ldr	r0, [pc, #1664]	; fa58 <rb_init_netio+0xc34>
    f3d4:	ldr	r0, [pc, r0]
    f3d8:	ldr	r1, [pc, #1660]	; fa5c <rb_init_netio+0xc38>
    f3dc:	add	r1, pc, r1
    f3e0:	str	r0, [r1]
    f3e4:	ldr	r0, [pc, #1652]	; fa60 <rb_init_netio+0xc3c>
    f3e8:	ldr	r0, [pc, r0]
    f3ec:	ldr	r1, [pc, #1648]	; fa64 <rb_init_netio+0xc40>
    f3f0:	add	r1, pc, r1
    f3f4:	str	r0, [r1]
    f3f8:	ldr	r0, [pc, #1640]	; fa68 <rb_init_netio+0xc44>
    f3fc:	ldr	r0, [pc, r0]
    f400:	ldr	r1, [pc, #1636]	; fa6c <rb_init_netio+0xc48>
    f404:	add	r1, pc, r1
    f408:	str	r0, [r1]
    f40c:	ldr	r4, [pc, #1628]	; fa70 <rb_init_netio+0xc4c>
    f410:	add	r4, pc, r4
    f414:	b	f7e4 <rb_init_netio+0x9c0>
    f418:	ldr	r0, [pc, #1620]	; fa74 <rb_init_netio+0xc50>
    f41c:	ldr	r0, [pc, r0]
    f420:	ldr	r1, [pc, #1616]	; fa78 <rb_init_netio+0xc54>
    f424:	add	r1, pc, r1
    f428:	str	r0, [r1]
    f42c:	ldr	r0, [pc, #1608]	; fa7c <rb_init_netio+0xc58>
    f430:	ldr	r0, [pc, r0]
    f434:	ldr	r1, [pc, #1604]	; fa80 <rb_init_netio+0xc5c>
    f438:	add	r1, pc, r1
    f43c:	str	r0, [r1]
    f440:	ldr	r0, [pc, #1596]	; fa84 <rb_init_netio+0xc60>
    f444:	ldr	r0, [pc, r0]
    f448:	ldr	r1, [pc, #1592]	; fa88 <rb_init_netio+0xc64>
    f44c:	add	r1, pc, r1
    f450:	str	r0, [r1]
    f454:	ldr	r0, [pc, #1584]	; fa8c <rb_init_netio+0xc68>
    f458:	ldr	r0, [pc, r0]
    f45c:	ldr	r1, [pc, #1580]	; fa90 <rb_init_netio+0xc6c>
    f460:	add	r1, pc, r1
    f464:	str	r0, [r1]
    f468:	ldr	r0, [pc, #1572]	; fa94 <rb_init_netio+0xc70>
    f46c:	ldr	r0, [pc, r0]
    f470:	ldr	r1, [pc, #1568]	; fa98 <rb_init_netio+0xc74>
    f474:	add	r1, pc, r1
    f478:	str	r0, [r1]
    f47c:	ldr	r0, [pc, #1560]	; fa9c <rb_init_netio+0xc78>
    f480:	ldr	r0, [pc, r0]
    f484:	ldr	r1, [pc, #1556]	; faa0 <rb_init_netio+0xc7c>
    f488:	add	r1, pc, r1
    f48c:	str	r0, [r1]
    f490:	ldr	r0, [pc, #1548]	; faa4 <rb_init_netio+0xc80>
    f494:	ldr	r0, [pc, r0]
    f498:	ldr	r1, [pc, #1544]	; faa8 <rb_init_netio+0xc84>
    f49c:	add	r1, pc, r1
    f4a0:	str	r0, [r1]
    f4a4:	ldr	r4, [pc, #1536]	; faac <rb_init_netio+0xc88>
    f4a8:	add	r4, pc, r4
    f4ac:	b	f7e4 <rb_init_netio+0x9c0>
    f4b0:	ldr	r0, [pc, #1528]	; fab0 <rb_init_netio+0xc8c>
    f4b4:	ldr	r0, [pc, r0]
    f4b8:	ldr	r1, [pc, #1524]	; fab4 <rb_init_netio+0xc90>
    f4bc:	add	r1, pc, r1
    f4c0:	str	r0, [r1]
    f4c4:	ldr	r0, [pc, #1516]	; fab8 <rb_init_netio+0xc94>
    f4c8:	ldr	r0, [pc, r0]
    f4cc:	ldr	r1, [pc, #1512]	; fabc <rb_init_netio+0xc98>
    f4d0:	add	r1, pc, r1
    f4d4:	str	r0, [r1]
    f4d8:	ldr	r0, [pc, #1504]	; fac0 <rb_init_netio+0xc9c>
    f4dc:	ldr	r0, [pc, r0]
    f4e0:	ldr	r1, [pc, #1500]	; fac4 <rb_init_netio+0xca0>
    f4e4:	add	r1, pc, r1
    f4e8:	str	r0, [r1]
    f4ec:	ldr	r0, [pc, #1492]	; fac8 <rb_init_netio+0xca4>
    f4f0:	ldr	r0, [pc, r0]
    f4f4:	ldr	r1, [pc, #1488]	; facc <rb_init_netio+0xca8>
    f4f8:	add	r1, pc, r1
    f4fc:	str	r0, [r1]
    f500:	ldr	r0, [pc, #1480]	; fad0 <rb_init_netio+0xcac>
    f504:	ldr	r0, [pc, r0]
    f508:	ldr	r1, [pc, #1476]	; fad4 <rb_init_netio+0xcb0>
    f50c:	add	r1, pc, r1
    f510:	str	r0, [r1]
    f514:	ldr	r0, [pc, #1468]	; fad8 <rb_init_netio+0xcb4>
    f518:	ldr	r0, [pc, r0]
    f51c:	ldr	r1, [pc, #1464]	; fadc <rb_init_netio+0xcb8>
    f520:	add	r1, pc, r1
    f524:	str	r0, [r1]
    f528:	ldr	r0, [pc, #1456]	; fae0 <rb_init_netio+0xcbc>
    f52c:	ldr	r0, [pc, r0]
    f530:	ldr	r1, [pc, #1452]	; fae4 <rb_init_netio+0xcc0>
    f534:	add	r1, pc, r1
    f538:	str	r0, [r1]
    f53c:	ldr	r4, [pc, #1444]	; fae8 <rb_init_netio+0xcc4>
    f540:	add	r4, pc, r4
    f544:	b	f7e4 <rb_init_netio+0x9c0>
    f548:	ldr	r0, [pc, #1436]	; faec <rb_init_netio+0xcc8>
    f54c:	mov	r1, #0
    f550:	add	r0, pc, r0
    f554:	str	r1, [r0]
    f558:	ldr	r0, [pc, #1424]	; faf0 <rb_init_netio+0xccc>
    f55c:	add	r0, pc, r0
    f560:	str	r1, [r0]
    f564:	ldr	r0, [pc, #1416]	; faf4 <rb_init_netio+0xcd0>
    f568:	add	r0, pc, r0
    f56c:	str	r1, [r0]
    f570:	ldr	r0, [pc, #1408]	; faf8 <rb_init_netio+0xcd4>
    f574:	ldr	r1, [pc, #1408]	; fafc <rb_init_netio+0xcd8>
    f578:	add	r0, pc, r0
    f57c:	add	r1, pc, r1
    f580:	str	r1, [r0]
    f584:	ldr	r0, [pc, #1396]	; fb00 <rb_init_netio+0xcdc>
    f588:	ldr	r0, [pc, r0]
    f58c:	ldr	r1, [pc, #1392]	; fb04 <rb_init_netio+0xce0>
    f590:	add	r1, pc, r1
    f594:	str	r0, [r1]
    f598:	ldr	r0, [pc, #1384]	; fb08 <rb_init_netio+0xce4>
    f59c:	ldr	r0, [pc, r0]
    f5a0:	ldr	r1, [pc, #1380]	; fb0c <rb_init_netio+0xce8>
    f5a4:	add	r1, pc, r1
    f5a8:	str	r0, [r1]
    f5ac:	ldr	r0, [pc, #1372]	; fb10 <rb_init_netio+0xcec>
    f5b0:	ldr	r0, [pc, r0]
    f5b4:	ldr	r1, [pc, #1368]	; fb14 <rb_init_netio+0xcf0>
    f5b8:	add	r1, pc, r1
    f5bc:	str	r0, [r1]
    f5c0:	ldr	r4, [pc, #1360]	; fb18 <rb_init_netio+0xcf4>
    f5c4:	add	r4, pc, r4
    f5c8:	b	f7e4 <rb_init_netio+0x9c0>
    f5cc:	ldr	r0, [pc, #1084]	; fa10 <rb_init_netio+0xbec>
    f5d0:	mov	r1, #0
    f5d4:	add	r0, pc, r0
    f5d8:	str	r1, [r0]
    f5dc:	ldr	r0, [pc, #1072]	; fa14 <rb_init_netio+0xbf0>
    f5e0:	add	r0, pc, r0
    f5e4:	str	r1, [r0]
    f5e8:	ldr	r0, [pc, #1064]	; fa18 <rb_init_netio+0xbf4>
    f5ec:	add	r0, pc, r0
    f5f0:	str	r1, [r0]
    f5f4:	ldr	r0, [pc, #1056]	; fa1c <rb_init_netio+0xbf8>
    f5f8:	ldr	r1, [pc, #1056]	; fa20 <rb_init_netio+0xbfc>
    f5fc:	add	r0, pc, r0
    f600:	add	r1, pc, r1
    f604:	str	r1, [r0]
    f608:	ldr	r0, [pc, #1044]	; fa24 <rb_init_netio+0xc00>
    f60c:	ldr	r0, [pc, r0]
    f610:	ldr	r1, [pc, #1040]	; fa28 <rb_init_netio+0xc04>
    f614:	add	r1, pc, r1
    f618:	str	r0, [r1]
    f61c:	ldr	r0, [pc, #1032]	; fa2c <rb_init_netio+0xc08>
    f620:	ldr	r0, [pc, r0]
    f624:	ldr	r1, [pc, #1028]	; fa30 <rb_init_netio+0xc0c>
    f628:	add	r1, pc, r1
    f62c:	str	r0, [r1]
    f630:	ldr	r0, [pc, #1020]	; fa34 <rb_init_netio+0xc10>
    f634:	ldr	r0, [pc, r0]
    f638:	ldr	r1, [pc, #824]	; f978 <rb_init_netio+0xb54>
    f63c:	add	r1, pc, r1
    f640:	str	r0, [r1]
    f644:	b	f7e4 <rb_init_netio+0x9c0>
    f648:	ldr	r0, [pc, #1228]	; fb1c <rb_init_netio+0xcf8>
    f64c:	ldr	r0, [pc, r0]
    f650:	ldr	r1, [pc, #1224]	; fb20 <rb_init_netio+0xcfc>
    f654:	add	r1, pc, r1
    f658:	str	r0, [r1]
    f65c:	ldr	r0, [pc, #1216]	; fb24 <rb_init_netio+0xd00>
    f660:	ldr	r0, [pc, r0]
    f664:	ldr	r1, [pc, #1212]	; fb28 <rb_init_netio+0xd04>
    f668:	add	r1, pc, r1
    f66c:	str	r0, [r1]
    f670:	ldr	r0, [pc, #1204]	; fb2c <rb_init_netio+0xd08>
    f674:	ldr	r0, [pc, r0]
    f678:	ldr	r1, [pc, #1200]	; fb30 <rb_init_netio+0xd0c>
    f67c:	add	r1, pc, r1
    f680:	str	r0, [r1]
    f684:	ldr	r0, [pc, #1192]	; fb34 <rb_init_netio+0xd10>
    f688:	ldr	r0, [pc, r0]
    f68c:	ldr	r1, [pc, #1188]	; fb38 <rb_init_netio+0xd14>
    f690:	add	r1, pc, r1
    f694:	str	r0, [r1]
    f698:	ldr	r0, [pc, #1180]	; fb3c <rb_init_netio+0xd18>
    f69c:	ldr	r0, [pc, r0]
    f6a0:	ldr	r1, [pc, #1176]	; fb40 <rb_init_netio+0xd1c>
    f6a4:	add	r1, pc, r1
    f6a8:	str	r0, [r1]
    f6ac:	ldr	r0, [pc, #1168]	; fb44 <rb_init_netio+0xd20>
    f6b0:	ldr	r0, [pc, r0]
    f6b4:	ldr	r1, [pc, #1164]	; fb48 <rb_init_netio+0xd24>
    f6b8:	add	r1, pc, r1
    f6bc:	str	r0, [r1]
    f6c0:	ldr	r0, [pc, #1156]	; fb4c <rb_init_netio+0xd28>
    f6c4:	ldr	r0, [pc, r0]
    f6c8:	ldr	r1, [pc, #1152]	; fb50 <rb_init_netio+0xd2c>
    f6cc:	add	r1, pc, r1
    f6d0:	str	r0, [r1]
    f6d4:	ldr	r4, [pc, #1144]	; fb54 <rb_init_netio+0xd30>
    f6d8:	add	r4, pc, r4
    f6dc:	b	f7e4 <rb_init_netio+0x9c0>
    f6e0:	ldr	r0, [pc, #1136]	; fb58 <rb_init_netio+0xd34>
    f6e4:	mov	r1, #0
    f6e8:	add	r0, pc, r0
    f6ec:	str	r1, [r0]
    f6f0:	ldr	r0, [pc, #1124]	; fb5c <rb_init_netio+0xd38>
    f6f4:	add	r0, pc, r0
    f6f8:	str	r1, [r0]
    f6fc:	ldr	r0, [pc, #1116]	; fb60 <rb_init_netio+0xd3c>
    f700:	add	r0, pc, r0
    f704:	str	r1, [r0]
    f708:	ldr	r0, [pc, #1108]	; fb64 <rb_init_netio+0xd40>
    f70c:	ldr	r1, [pc, #1108]	; fb68 <rb_init_netio+0xd44>
    f710:	add	r0, pc, r0
    f714:	add	r1, pc, r1
    f718:	str	r1, [r0]
    f71c:	ldr	r0, [pc, #1096]	; fb6c <rb_init_netio+0xd48>
    f720:	ldr	r0, [pc, r0]
    f724:	ldr	r1, [pc, #1092]	; fb70 <rb_init_netio+0xd4c>
    f728:	add	r1, pc, r1
    f72c:	str	r0, [r1]
    f730:	ldr	r0, [pc, #1084]	; fb74 <rb_init_netio+0xd50>
    f734:	ldr	r0, [pc, r0]
    f738:	ldr	r1, [pc, #1080]	; fb78 <rb_init_netio+0xd54>
    f73c:	add	r1, pc, r1
    f740:	str	r0, [r1]
    f744:	ldr	r0, [pc, #1072]	; fb7c <rb_init_netio+0xd58>
    f748:	ldr	r0, [pc, r0]
    f74c:	ldr	r1, [pc, #1068]	; fb80 <rb_init_netio+0xd5c>
    f750:	add	r1, pc, r1
    f754:	str	r0, [r1]
    f758:	ldr	r4, [pc, #1060]	; fb84 <rb_init_netio+0xd60>
    f75c:	add	r4, pc, r4
    f760:	b	f7e4 <rb_init_netio+0x9c0>
    f764:	ldr	r0, [pc, #1052]	; fb88 <rb_init_netio+0xd64>
    f768:	mov	r1, #0
    f76c:	add	r0, pc, r0
    f770:	str	r1, [r0]
    f774:	ldr	r0, [pc, #1040]	; fb8c <rb_init_netio+0xd68>
    f778:	add	r0, pc, r0
    f77c:	str	r1, [r0]
    f780:	ldr	r0, [pc, #1032]	; fb90 <rb_init_netio+0xd6c>
    f784:	add	r0, pc, r0
    f788:	str	r1, [r0]
    f78c:	ldr	r0, [pc, #1024]	; fb94 <rb_init_netio+0xd70>
    f790:	ldr	r1, [pc, #1024]	; fb98 <rb_init_netio+0xd74>
    f794:	add	r0, pc, r0
    f798:	add	r1, pc, r1
    f79c:	str	r1, [r0]
    f7a0:	ldr	r0, [pc, #1012]	; fb9c <rb_init_netio+0xd78>
    f7a4:	ldr	r0, [pc, r0]
    f7a8:	ldr	r1, [pc, #1008]	; fba0 <rb_init_netio+0xd7c>
    f7ac:	add	r1, pc, r1
    f7b0:	str	r0, [r1]
    f7b4:	ldr	r0, [pc, #1000]	; fba4 <rb_init_netio+0xd80>
    f7b8:	ldr	r0, [pc, r0]
    f7bc:	ldr	r1, [pc, #996]	; fba8 <rb_init_netio+0xd84>
    f7c0:	add	r1, pc, r1
    f7c4:	str	r0, [r1]
    f7c8:	ldr	r0, [pc, #988]	; fbac <rb_init_netio+0xd88>
    f7cc:	ldr	r0, [pc, r0]
    f7d0:	ldr	r1, [pc, #984]	; fbb0 <rb_init_netio+0xd8c>
    f7d4:	add	r1, pc, r1
    f7d8:	str	r0, [r1]
    f7dc:	ldr	r4, [pc, #976]	; fbb4 <rb_init_netio+0xd90>
    f7e0:	add	r4, pc, r4
    f7e4:	ldr	r0, [pc, #1020]	; fbe8 <rb_init_netio+0xdc4>
    f7e8:	mov	r1, r4
    f7ec:	mov	r2, #25
    f7f0:	add	r0, pc, r0
    f7f4:	pop	{r4, r5, fp, lr}
    f7f8:	b	4f4c <rb_strlcpy@plt>
    f7fc:	ldr	r0, [pc, #424]	; f9ac <rb_init_netio+0xb88>
    f800:	ldr	r0, [pc, r0]
    f804:	ldr	r1, [pc, #420]	; f9b0 <rb_init_netio+0xb8c>
    f808:	add	r1, pc, r1
    f80c:	str	r0, [r1]
    f810:	ldr	r0, [pc, #412]	; f9b4 <rb_init_netio+0xb90>
    f814:	ldr	r0, [pc, r0]
    f818:	ldr	r1, [pc, #408]	; f9b8 <rb_init_netio+0xb94>
    f81c:	add	r1, pc, r1
    f820:	str	r0, [r1]
    f824:	ldr	r0, [pc, #400]	; f9bc <rb_init_netio+0xb98>
    f828:	ldr	r0, [pc, r0]
    f82c:	ldr	r1, [pc, #396]	; f9c0 <rb_init_netio+0xb9c>
    f830:	add	r1, pc, r1
    f834:	str	r0, [r1]
    f838:	ldr	r0, [pc, #388]	; f9c4 <rb_init_netio+0xba0>
    f83c:	ldr	r0, [pc, r0]
    f840:	ldr	r1, [pc, #384]	; f9c8 <rb_init_netio+0xba4>
    f844:	add	r1, pc, r1
    f848:	str	r0, [r1]
    f84c:	ldr	r0, [pc, #376]	; f9cc <rb_init_netio+0xba8>
    f850:	ldr	r0, [pc, r0]
    f854:	ldr	r1, [pc, #372]	; f9d0 <rb_init_netio+0xbac>
    f858:	add	r1, pc, r1
    f85c:	str	r0, [r1]
    f860:	ldr	r0, [pc, #364]	; f9d4 <rb_init_netio+0xbb0>
    f864:	ldr	r0, [pc, r0]
    f868:	ldr	r1, [pc, #360]	; f9d8 <rb_init_netio+0xbb4>
    f86c:	add	r1, pc, r1
    f870:	str	r0, [r1]
    f874:	ldr	r0, [pc, #352]	; f9dc <rb_init_netio+0xbb8>
    f878:	ldr	r0, [pc, r0]
    f87c:	b	f034 <rb_init_netio+0x210>
    f880:	bl	5204 <rb_outofmemory@plt>
    f884:	ldr	r0, [pc, #864]	; fbec <rb_init_netio+0xdc8>
    f888:	add	r0, pc, r0
    f88c:	bl	51a4 <rb_lib_log@plt>
    f890:	bl	4cac <abort@plt>
    f894:	.word	0x0000afca
    f898:	.word	0x0001d530
    f89c:	.word	0x0000af9b
    f8a0:	.word	0x0001d3d4
    f8a4:	.word	0x0002f98c
    f8a8:	.word	0x0001d360
    f8ac:	.word	0x0002f974
    f8b0:	.word	0x0001d3e8
    f8b4:	.word	0x0002f968
    f8b8:	.word	0x0001d354
    f8bc:	.word	0x0002f940
    f8c0:	.word	0x0001d380
    f8c4:	.word	0x0002f930
    f8c8:	.word	0x0001d300
    f8cc:	.word	0x0002f914
    f8d0:	.word	0x0001d3ac
    f8d4:	.word	0x0002f90c
    f8d8:	.word	0x0000af85
    f8dc:	.word	0x0001d2e8
    f8e0:	.word	0x0002f8f0
    f8e4:	.word	0x0001d318
    f8e8:	.word	0x0002f8d8
    f8ec:	.word	0x0001d2e0
    f8f0:	.word	0x0002f8cc
    f8f4:	.word	0x0001d2c4
    f8f8:	.word	0x0002f8a4
    f8fc:	.word	0x0001d2f4
    f900:	.word	0x0002f894
    f904:	.word	0x0001d2a0
    f908:	.word	0x0002f884
    f90c:	.word	0x0001d2dc
    f910:	.word	0x0002f7d4
    f914:	.word	0x0000af70
    f918:	.word	0x0001d268
    f91c:	.word	0x0002f860
    f920:	.word	0x0001d2b4
    f924:	.word	0x0002f848
    f928:	.word	0x0001d2c8
    f92c:	.word	0x0002f83c
    f930:	.word	0x0001d1f8
    f934:	.word	0x0002f814
    f938:	.word	0x0001d29c
    f93c:	.word	0x0002f804
    f940:	.word	0x0001d1e0
    f944:	.word	0x0002f7f4
    f948:	.word	0x0001d248
    f94c:	.word	0x0000af48
    f950:	.word	0x0002f7b8
    f954:	.word	0x0002f7b0
    f958:	.word	0x0002f7a8
    f95c:	.word	0x0002f78c
    f960:	.word	0x00000ee4
    f964:	.word	0x0001d204
    f968:	.word	0x0002f788
    f96c:	.word	0x0001d1e0
    f970:	.word	0x0002f770
    f974:	.word	0x0001d160
    f978:	.word	0x0002f314
    f97c:	.word	0x0000af3e
    f980:	.word	0x0002f73c
    f984:	.word	0x0002f734
    f988:	.word	0x0002f72c
    f98c:	.word	0x0002f710
    f990:	.word	0x00000e68
    f994:	.word	0x0001d17c
    f998:	.word	0x0002f70c
    f99c:	.word	0x0001d128
    f9a0:	.word	0x0002f6f4
    f9a4:	.word	0x0001d118
    f9a8:	.word	0x0000af2a
    f9ac:	.word	0x0001cb30
    f9b0:	.word	0x0002f144
    f9b4:	.word	0x0001cb7c
    f9b8:	.word	0x0002f12c
    f9bc:	.word	0x0001cb78
    f9c0:	.word	0x0002f120
    f9c4:	.word	0x0001cafc
    f9c8:	.word	0x0002f0f8
    f9cc:	.word	0x0001cad0
    f9d0:	.word	0x0002f0e8
    f9d4:	.word	0x0001cb38
    f9d8:	.word	0x0002f0cc
    f9dc:	.word	0x0001cb44
    f9e0:	.word	0x0000af14
    f9e4:	.word	0x0002f9fc
    f9e8:	.word	0x0002f9f4
    f9ec:	.word	0x0002f9ec
    f9f0:	.word	0x0002f9d0
    f9f4:	.word	0x00001128
    f9f8:	.word	0x0001d404
    f9fc:	.word	0x0002f9cc
    fa00:	.word	0x0001d458
    fa04:	.word	0x0002f9b4
    fa08:	.word	0x0001d424
    fa0c:	.word	0x0000abb7
    fa10:	.word	0x0002f368
    fa14:	.word	0x0002f360
    fa18:	.word	0x0002f358
    fa1c:	.word	0x0002f33c
    fa20:	.word	0x00000a94
    fa24:	.word	0x0001cd60
    fa28:	.word	0x0002f338
    fa2c:	.word	0x0001cd40
    fa30:	.word	0x0002f320
    fa34:	.word	0x0001cd00
    fa38:	.word	0x0001cfb8
    fa3c:	.word	0x0002f5c0
    fa40:	.word	0x0001cfe8
    fa44:	.word	0x0002f5a8
    fa48:	.word	0x0001cfb0
    fa4c:	.word	0x0002f59c
    fa50:	.word	0x0001cf94
    fa54:	.word	0x0002f574
    fa58:	.word	0x0001cfc4
    fa5c:	.word	0x0002f564
    fa60:	.word	0x0001cf70
    fa64:	.word	0x0002f554
    fa68:	.word	0x0001cfac
    fa6c:	.word	0x0002f534
    fa70:	.word	0x0000aa01
    fa74:	.word	0x0001cf70
    fa78:	.word	0x0002f528
    fa7c:	.word	0x0001cefc
    fa80:	.word	0x0002f510
    fa84:	.word	0x0001cf84
    fa88:	.word	0x0002f504
    fa8c:	.word	0x0001cef0
    fa90:	.word	0x0002f4dc
    fa94:	.word	0x0001cf1c
    fa98:	.word	0x0002f4cc
    fa9c:	.word	0x0001ce9c
    faa0:	.word	0x0002f4b0
    faa4:	.word	0x0001cf48
    faa8:	.word	0x0002f4a8
    faac:	.word	0x0000a963
    fab0:	.word	0x0001ce98
    fab4:	.word	0x0002f490
    fab8:	.word	0x0001cee4
    fabc:	.word	0x0002f478
    fac0:	.word	0x0001cef8
    fac4:	.word	0x0002f46c
    fac8:	.word	0x0001ce28
    facc:	.word	0x0002f444
    fad0:	.word	0x0001cecc
    fad4:	.word	0x0002f434
    fad8:	.word	0x0001ce10
    fadc:	.word	0x0002f424
    fae0:	.word	0x0001ce78
    fae4:	.word	0x0002f404
    fae8:	.word	0x0000a8d8
    faec:	.word	0x0002f3ec
    faf0:	.word	0x0002f3e4
    faf4:	.word	0x0002f3dc
    faf8:	.word	0x0002f3c0
    fafc:	.word	0x00000b18
    fb00:	.word	0x0001ce2c
    fb04:	.word	0x0002f3bc
    fb08:	.word	0x0001cdd8
    fb0c:	.word	0x0002f3a4
    fb10:	.word	0x0001cdc8
    fb14:	.word	0x0002f398
    fb18:	.word	0x0000a85a
    fb1c:	.word	0x0001cce4
    fb20:	.word	0x0002f2f8
    fb24:	.word	0x0001cd30
    fb28:	.word	0x0002f2e0
    fb2c:	.word	0x0001cd2c
    fb30:	.word	0x0002f2d4
    fb34:	.word	0x0001ccb0
    fb38:	.word	0x0002f2ac
    fb3c:	.word	0x0001cc84
    fb40:	.word	0x0002f29c
    fb44:	.word	0x0001ccec
    fb48:	.word	0x0002f280
    fb4c:	.word	0x0001ccf8
    fb50:	.word	0x0002f278
    fb54:	.word	0x0000a74e
    fb58:	.word	0x0002f254
    fb5c:	.word	0x0002f24c
    fb60:	.word	0x0002f244
    fb64:	.word	0x0002f228
    fb68:	.word	0x00000980
    fb6c:	.word	0x0001cca0
    fb70:	.word	0x0002f224
    fb74:	.word	0x0001cc7c
    fb78:	.word	0x0002f20c
    fb7c:	.word	0x0001cbfc
    fb80:	.word	0x0002f200
    fb84:	.word	0x0000a6b0
    fb88:	.word	0x0002f1d0
    fb8c:	.word	0x0002f1c8
    fb90:	.word	0x0002f1c0
    fb94:	.word	0x0002f1a4
    fb98:	.word	0x000008fc
    fb9c:	.word	0x0001cbc8
    fba0:	.word	0x0002f1a0
    fba4:	.word	0x0001cba8
    fba8:	.word	0x0002f188
    fbac:	.word	0x0001cb68
    fbb0:	.word	0x0002f17c
    fbb4:	.word	0x0000a653
    fbb8:	.word	0x0002f638
    fbbc:	.word	0x0002f630
    fbc0:	.word	0x0002f628
    fbc4:	.word	0x0002f60c
    fbc8:	.word	0x00000d64
    fbcc:	.word	0x0001d040
    fbd0:	.word	0x0002f608
    fbd4:	.word	0x0001d094
    fbd8:	.word	0x0002f5f0
    fbdc:	.word	0x0001d060
    fbe0:	.word	0x0002f5e4
    fbe4:	.word	0x0000aab4
    fbe8:	.word	0x0002f12c
    fbec:	.word	0x0000a5b1

0000fbf0 <rb_select>:
    fbf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbf4:	add	fp, sp, #28
    fbf8:	sub	sp, sp, #4
    fbfc:	ldr	r1, [pc, #188]	; fcc0 <rb_select+0xd0>
    fc00:	ldr	r1, [pc, r1]
    fc04:	blx	r1
    fc08:	ldr	r6, [pc, #180]	; fcc4 <rb_select+0xd4>
    fc0c:	mov	r8, r0
    fc10:	ldr	r6, [pc, r6]
    fc14:	cmp	r6, #0
    fc18:	beq	fcb4 <rb_select+0xc4>
    fc1c:	ldr	r9, [pc, #164]	; fcc8 <rb_select+0xd8>
    fc20:	ldr	r7, [pc, #164]	; fccc <rb_select+0xdc>
    fc24:	mov	sl, #0
    fc28:	add	r9, pc, r9
    fc2c:	add	r7, pc, r7
    fc30:	b	fc78 <rb_select+0x88>
    fc34:	str	r1, [r7, #4]
    fc38:	cmp	r1, #0
    fc3c:	mov	r2, r7
    fc40:	addne	r2, r1, #8
    fc44:	mov	r1, r5
    fc48:	str	r0, [r2]
    fc4c:	str	sl, [r6, #4]
    fc50:	str	sl, [r6, #8]
    fc54:	ldr	r0, [r7, #8]
    fc58:	sub	r0, r0, #1
    fc5c:	str	r0, [r7, #8]
    fc60:	ldr	r0, [pc, #108]	; fcd4 <rb_select+0xe4>
    fc64:	ldr	r0, [pc, r0]
    fc68:	bl	515c <rb_bh_free@plt>
    fc6c:	cmp	r4, #0
    fc70:	mov	r6, r4
    fc74:	beq	fcb4 <rb_select+0xc4>
    fc78:	ldr	r5, [r6]
    fc7c:	ldr	r4, [r6, #8]
    fc80:	ldr	r0, [pc, #72]	; fcd0 <rb_select+0xe0>
    fc84:	ldr	r0, [pc, r0]
    fc88:	sub	r0, r0, #1
    fc8c:	str	r0, [r9]
    fc90:	ldr	r0, [r5, #12]
    fc94:	bl	51c8 <close@plt>
    fc98:	ldr	r0, [r6, #8]
    fc9c:	ldr	r1, [r6, #4]
    fca0:	cmp	r0, #0
    fca4:	beq	fc34 <rb_select+0x44>
    fca8:	str	r1, [r0, #4]
    fcac:	ldr	r1, [r6, #4]
    fcb0:	b	fc38 <rb_select+0x48>
    fcb4:	mov	r0, r8
    fcb8:	sub	sp, fp, #28
    fcbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcc0:	.word	0x0002ed4c
    fcc4:	.word	0x0002ed44
    fcc8:	.word	0x0002ece8
    fccc:	.word	0x0002ed28
    fcd0:	.word	0x0002ec8c
    fcd4:	.word	0x0002ecb4

0000fcd8 <rb_recv_fd_buf>:
    fcd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fcdc:	add	fp, sp, #28
    fce0:	sub	sp, sp, #132	; 0x84
    fce4:	ldr	r9, [fp, #8]
    fce8:	mov	sl, r3
    fcec:	mov	r3, #0
    fcf0:	mov	r7, #1
    fcf4:	sub	ip, fp, #68	; 0x44
    fcf8:	str	r3, [fp, #-36]	; 0xffffffdc
    fcfc:	str	r7, [fp, #-48]	; 0xffffffd0
    fd00:	sub	r7, fp, #68	; 0x44
    fd04:	str	r7, [fp, #-52]	; 0xffffffcc
    fd08:	str	r3, [fp, #-56]	; 0xffffffc8
    fd0c:	stm	ip, {r1, r2, r3}
    fd10:	mov	r1, #19
    fd14:	mov	r2, #12
    fd18:	add	r1, r1, r9, lsl #2
    fd1c:	add	r2, r2, r9, lsl #2
    fd20:	bic	r1, r1, #7
    fd24:	sub	r1, sp, r1
    fd28:	mov	sp, r1
    fd2c:	cmp	r0, #0
    fd30:	str	r2, [fp, #-40]	; 0xffffffd8
    fd34:	str	r1, [fp, #-44]	; 0xffffffd4
    fd38:	beq	fd44 <rb_recv_fd_buf+0x6c>
    fd3c:	ldr	r0, [r0, #12]
    fd40:	b	fd48 <rb_recv_fd_buf+0x70>
    fd44:	mvn	r0, #0
    fd48:	sub	r1, fp, #60	; 0x3c
    fd4c:	mov	r2, #0
    fd50:	bl	5390 <recvmsg@plt>
    fd54:	mov	r5, r0
    fd58:	cmp	r0, #1
    fd5c:	blt	fe50 <rb_recv_fd_buf+0x178>
    fd60:	ldr	r1, [fp, #-40]	; 0xffffffd8
    fd64:	cmp	r1, #0
    fd68:	beq	fe48 <rb_recv_fd_buf+0x170>
    fd6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    fd70:	cmp	r0, #0
    fd74:	beq	fe48 <rb_recv_fd_buf+0x170>
    fd78:	cmp	r1, #11
    fd7c:	movls	r0, #0
    fd80:	cmp	r1, #12
    fd84:	bcc	fe48 <rb_recv_fd_buf+0x170>
    fd88:	cmp	r9, #1
    fd8c:	blt	fe50 <rb_recv_fd_buf+0x178>
    fd90:	ldr	r1, [r0]
    fd94:	sub	r1, r1, #12
    fd98:	lsr	r6, r1, #2
    fd9c:	cmp	r6, #0
    fda0:	beq	fe50 <rb_recv_fd_buf+0x178>
    fda4:	add	r4, r0, #12
    fda8:	mov	r8, #0
    fdac:	ldr	r7, [r4, r8, lsl #2]
    fdb0:	mov	r0, #3
    fdb4:	sub	r2, fp, #160	; 0xa0
    fdb8:	mov	r1, r7
    fdbc:	bl	53b4 <__fxstat@plt>
    fdc0:	mov	r1, #64	; 0x40
    fdc4:	cmp	r0, #0
    fdc8:	beq	fdf8 <rb_recv_fd_buf+0x120>
    fdcc:	ldr	r2, [pc, #148]	; fe68 <rb_recv_fd_buf+0x190>
    fdd0:	add	r2, pc, r2
    fdd4:	mov	r0, r7
    fdd8:	bl	52f4 <rb_open@plt>
    fddc:	str	r0, [sl, r8, lsl #2]
    fde0:	add	r8, r8, #1
    fde4:	cmp	r8, r9
    fde8:	bge	fe50 <rb_recv_fd_buf+0x178>
    fdec:	cmp	r8, r6
    fdf0:	bcc	fdac <rb_recv_fd_buf+0xd4>
    fdf4:	b	fe50 <rb_recv_fd_buf+0x178>
    fdf8:	ldr	r0, [fp, #-144]	; 0xffffff70
    fdfc:	and	r0, r0, #61440	; 0xf000
    fe00:	cmp	r0, #49152	; 0xc000
    fe04:	beq	fe28 <rb_recv_fd_buf+0x150>
    fe08:	cmp	r0, #32768	; 0x8000
    fe0c:	beq	fe38 <rb_recv_fd_buf+0x160>
    fe10:	cmp	r0, #4096	; 0x1000
    fe14:	bne	fdcc <rb_recv_fd_buf+0xf4>
    fe18:	ldr	r2, [pc, #64]	; fe60 <rb_recv_fd_buf+0x188>
    fe1c:	mov	r1, #8
    fe20:	add	r2, pc, r2
    fe24:	b	fdd4 <rb_recv_fd_buf+0xfc>
    fe28:	ldr	r2, [pc, #44]	; fe5c <rb_recv_fd_buf+0x184>
    fe2c:	mov	r1, #4
    fe30:	add	r2, pc, r2
    fe34:	b	fdd4 <rb_recv_fd_buf+0xfc>
    fe38:	ldr	r2, [pc, #36]	; fe64 <rb_recv_fd_buf+0x18c>
    fe3c:	mov	r1, #2
    fe40:	add	r2, pc, r2
    fe44:	b	fdd4 <rb_recv_fd_buf+0xfc>
    fe48:	mov	r0, #0
    fe4c:	str	r0, [sl]
    fe50:	mov	r0, r5
    fe54:	sub	sp, fp, #28
    fe58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe5c:	.word	0x0000a052
    fe60:	.word	0x0000a070
    fe64:	.word	0x0000a05c
    fe68:	.word	0x0000a0a3

0000fe6c <rb_send_fd_buf>:
    fe6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    fe70:	add	fp, sp, #24
    fe74:	sub	sp, sp, #48	; 0x30
    fe78:	vmov.i32	q8, #0	; 0x00000000
    fe7c:	sub	r7, fp, #56	; 0x38
    fe80:	mov	r4, #0
    fe84:	add	r6, r7, #12
    fe88:	vst1.32	{d16-d17}, [r6]
    fe8c:	mov	r6, #48	; 0x30
    fe90:	strb	r6, [fp, #-65]	; 0xffffffbf
    fe94:	mov	r6, #20
    fe98:	vst1.64	{d16-d17}, [r7], r6
    fe9c:	mov	r6, #1
    fea0:	str	r4, [r7]
    fea4:	sub	r7, fp, #64	; 0x40
    fea8:	str	r7, [fp, #-48]	; 0xffffffd0
    feac:	ldr	r7, [fp, #8]
    feb0:	str	r4, [fp, #-56]	; 0xffffffc8
    feb4:	str	r4, [fp, #-52]	; 0xffffffcc
    feb8:	str	r4, [fp, #-40]	; 0xffffffd8
    febc:	str	r4, [fp, #-32]	; 0xffffffe0
    fec0:	str	r6, [fp, #-44]	; 0xffffffd4
    fec4:	cmp	r7, #0
    fec8:	movweq	r7, #1
    fecc:	str	r7, [fp, #-60]	; 0xffffffc4
    fed0:	sub	r7, fp, #65	; 0x41
    fed4:	movne	r7, r3
    fed8:	cmp	r2, #1
    fedc:	str	r7, [fp, #-64]	; 0xffffffc0
    fee0:	blt	ff90 <rb_send_fd_buf+0x124>
    fee4:	mov	r3, #19
    fee8:	mov	r8, sp
    feec:	add	r3, r3, r2, lsl #2
    fef0:	bic	r3, r3, #7
    fef4:	sub	lr, sp, r3
    fef8:	mov	r3, #12
    fefc:	add	r3, r3, r2, lsl #2
    ff00:	mov	sp, lr
    ff04:	cmp	r3, #11
    ff08:	str	r3, [fp, #-36]	; 0xffffffdc
    ff0c:	str	lr, [fp, #-40]	; 0xffffffd8
    ff10:	and	ip, r2, #1
    ff14:	movls	lr, r4
    ff18:	cmp	r2, #1
    ff1c:	stm	lr, {r3, r6}
    ff20:	str	r6, [lr, #8]
    ff24:	beq	ff70 <rb_send_fd_buf+0x104>
    ff28:	sub	r2, r2, ip
    ff2c:	add	r6, r1, #4
    ff30:	mov	r4, #0
    ff34:	ldr	r5, [r6, #-4]
    ff38:	mvn	r3, #0
    ff3c:	mvn	r7, #0
    ff40:	cmp	r5, #0
    ff44:	ldrne	r3, [r5, #12]
    ff48:	add	r5, lr, r4, lsl #2
    ff4c:	add	r4, r4, #2
    ff50:	str	r3, [r5, #12]
    ff54:	ldr	r3, [r6]
    ff58:	add	r6, r6, #8
    ff5c:	cmp	r3, #0
    ff60:	ldrne	r7, [r3, #12]
    ff64:	cmp	r2, r4
    ff68:	str	r7, [r5, #16]
    ff6c:	bne	ff34 <rb_send_fd_buf+0xc8>
    ff70:	cmp	ip, #0
    ff74:	beq	ffc0 <rb_send_fd_buf+0x154>
    ff78:	ldr	r1, [r1, r4, lsl #2]
    ff7c:	add	r2, lr, #12
    ff80:	cmp	r1, #0
    ff84:	beq	ffb8 <rb_send_fd_buf+0x14c>
    ff88:	ldr	r1, [r1, #12]
    ff8c:	b	ffbc <rb_send_fd_buf+0x150>
    ff90:	cmp	r0, #0
    ff94:	beq	ffa0 <rb_send_fd_buf+0x134>
    ff98:	ldr	r0, [r0, #12]
    ff9c:	b	ffa4 <rb_send_fd_buf+0x138>
    ffa0:	mvn	r0, #0
    ffa4:	sub	r1, fp, #56	; 0x38
    ffa8:	mov	r2, #16384	; 0x4000
    ffac:	bl	4fa0 <sendmsg@plt>
    ffb0:	sub	sp, fp, #24
    ffb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    ffb8:	mvn	r1, #0
    ffbc:	str	r1, [r2, r4, lsl #2]
    ffc0:	ldr	r1, [lr]
    ffc4:	cmp	r0, #0
    ffc8:	str	r1, [fp, #-36]	; 0xffffffdc
    ffcc:	beq	ffd8 <rb_send_fd_buf+0x16c>
    ffd0:	ldr	r0, [r0, #12]
    ffd4:	b	ffdc <rb_send_fd_buf+0x170>
    ffd8:	mvn	r0, #0
    ffdc:	sub	r1, fp, #56	; 0x38
    ffe0:	mov	r2, #16384	; 0x4000
    ffe4:	bl	4fa0 <sendmsg@plt>
    ffe8:	mov	sp, r8
    ffec:	sub	sp, fp, #24
    fff0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000fff4 <rb_ipv4_from_ipv6>:
    fff4:	push	{r4, r5, r6, sl, fp, lr}
    fff8:	add	fp, sp, #16
    fffc:	mov	r4, r1
   10000:	ldr	r1, [pc, #140]	; 10094 <rb_ipv4_from_ipv6+0xa0>
   10004:	add	r6, r0, #8
   10008:	mov	r5, r0
   1000c:	mov	r2, #2
   10010:	mov	r0, r6
   10014:	add	r1, pc, r1
   10018:	bl	50fc <bcmp@plt>
   1001c:	cmp	r0, #0
   10020:	beq	1007c <rb_ipv4_from_ipv6+0x88>
   10024:	ldr	r1, [pc, #108]	; 10098 <rb_ipv4_from_ipv6+0xa4>
   10028:	mov	r0, r6
   1002c:	mov	r2, #4
   10030:	add	r1, pc, r1
   10034:	bl	50fc <bcmp@plt>
   10038:	mov	r1, r0
   1003c:	mov	r0, #0
   10040:	cmp	r1, #0
   10044:	popne	{r4, r5, r6, sl, fp, pc}
   10048:	ldrb	r0, [r5, #20]
   1004c:	mvn	r0, r0
   10050:	strb	r0, [r4, #4]
   10054:	ldrb	r0, [r5, #21]
   10058:	mvn	r0, r0
   1005c:	strb	r0, [r4, #5]
   10060:	ldrb	r0, [r5, #22]
   10064:	mvn	r0, r0
   10068:	strb	r0, [r4, #6]
   1006c:	ldrb	r0, [r5, #23]
   10070:	mvn	r0, r0
   10074:	strb	r0, [r4, #7]
   10078:	b	10084 <rb_ipv4_from_ipv6+0x90>
   1007c:	ldr	r0, [r6, #2]
   10080:	str	r0, [r4, #4]
   10084:	mov	r0, #2
   10088:	str	r0, [r4]
   1008c:	mov	r0, #1
   10090:	pop	{r4, r5, r6, sl, fp, pc}
   10094:	.word	0x00009e94
   10098:	.word	0x0000a228

0001009c <rb_unsupported_event>:
   1009c:	mov	r0, #0
   100a0:	bx	lr

000100a4 <rb_ssl_shutdown>:
   100a4:	push	{r4, r5, r6, sl, fp, lr}
   100a8:	add	fp, sp, #16
   100ac:	cmp	r0, #0
   100b0:	beq	10120 <rb_ssl_shutdown+0x7c>
   100b4:	mov	r4, r0
   100b8:	ldr	r0, [r0, #56]	; 0x38
   100bc:	cmp	r0, #0
   100c0:	beq	10120 <rb_ssl_shutdown+0x7c>
   100c4:	bl	4ce8 <ERR_get_error@plt>
   100c8:	cmp	r0, #0
   100cc:	bne	100c4 <rb_ssl_shutdown+0x20>
   100d0:	mov	r6, #1
   100d4:	ldr	r0, [r4, #56]	; 0x38
   100d8:	bl	530c <SSL_shutdown@plt>
   100dc:	mov	r5, r0
   100e0:	ldr	r0, [r4, #56]	; 0x38
   100e4:	mov	r1, r5
   100e8:	bl	5504 <SSL_get_error@plt>
   100ec:	cmn	r5, #1
   100f0:	bgt	10110 <rb_ssl_shutdown+0x6c>
   100f4:	orr	r0, r0, #1
   100f8:	cmp	r0, #3
   100fc:	bne	10110 <rb_ssl_shutdown+0x6c>
   10100:	add	r0, r6, #1
   10104:	cmp	r6, #4
   10108:	mov	r6, r0
   1010c:	bcc	100d4 <rb_ssl_shutdown+0x30>
   10110:	ldr	r0, [r4, #56]	; 0x38
   10114:	bl	51e0 <SSL_free@plt>
   10118:	mov	r0, #0
   1011c:	str	r0, [r4, #56]	; 0x38
   10120:	pop	{r4, r5, r6, sl, fp, pc}

00010124 <rb_init_ssl>:
   10124:	push	{fp, lr}
   10128:	mov	fp, sp
   1012c:	ldr	r0, [pc, #20]	; 10148 <rb_init_ssl+0x24>
   10130:	ldr	r1, [pc, #20]	; 1014c <rb_init_ssl+0x28>
   10134:	add	r0, pc, r0
   10138:	add	r1, pc, r1
   1013c:	bl	51a4 <rb_lib_log@plt>
   10140:	mov	r0, #1
   10144:	pop	{fp, pc}
   10148:	.word	0x0000a13a
   1014c:	.word	0x0000a156

00010150 <rb_setup_ssl_server>:
   10150:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10154:	add	fp, sp, #24
   10158:	sub	sp, sp, #8
   1015c:	cmp	r0, #0
   10160:	beq	10294 <rb_setup_ssl_server+0x144>
   10164:	mov	r4, r3
   10168:	mov	r8, r2
   1016c:	mov	r7, r1
   10170:	mov	r6, r0
   10174:	bl	4ce8 <ERR_get_error@plt>
   10178:	cmp	r0, #0
   1017c:	bne	10174 <rb_setup_ssl_server+0x24>
   10180:	ldr	r5, [pc, #844]	; 104d4 <rb_setup_ssl_server+0x384>
   10184:	cmp	r4, #0
   10188:	add	r5, pc, r5
   1018c:	movne	r5, r4
   10190:	cmp	r7, #0
   10194:	moveq	r7, r6
   10198:	bl	4c58 <TLS_method@plt>
   1019c:	bl	5384 <SSL_CTX_new@plt>
   101a0:	cmp	r0, #0
   101a4:	beq	102ac <rb_setup_ssl_server+0x15c>
   101a8:	mov	r1, r6
   101ac:	mov	r4, r0
   101b0:	bl	50cc <SSL_CTX_use_certificate_chain_file@plt>
   101b4:	cmp	r0, #1
   101b8:	bne	102f4 <rb_setup_ssl_server+0x1a4>
   101bc:	mov	r0, r4
   101c0:	mov	r1, r7
   101c4:	mov	r2, #1
   101c8:	bl	51b0 <SSL_CTX_use_PrivateKey_file@plt>
   101cc:	cmp	r0, #1
   101d0:	bne	1033c <rb_setup_ssl_server+0x1ec>
   101d4:	cmp	r8, #0
   101d8:	beq	10398 <rb_setup_ssl_server+0x248>
   101dc:	ldr	r1, [pc, #800]	; 10504 <rb_setup_ssl_server+0x3b4>
   101e0:	mov	r0, r8
   101e4:	add	r1, pc, r1
   101e8:	bl	4ebc <fopen@plt>
   101ec:	mov	r9, r0
   101f0:	mov	r0, #0
   101f4:	cmp	r9, #0
   101f8:	str	r0, [sp, #4]
   101fc:	beq	103b0 <rb_setup_ssl_server+0x260>
   10200:	add	r1, sp, #4
   10204:	mov	r0, r9
   10208:	mov	r2, #0
   1020c:	mov	r3, #0
   10210:	mov	r7, #0
   10214:	bl	5264 <PEM_read_DHparams@plt>
   10218:	cmp	r0, #0
   1021c:	beq	10240 <rb_setup_ssl_server+0xf0>
   10220:	ldr	r3, [sp, #4]
   10224:	mov	r0, r4
   10228:	mov	r1, #3
   1022c:	mov	r2, #0
   10230:	bl	4f1c <SSL_CTX_ctrl@plt>
   10234:	ldr	r0, [sp, #4]
   10238:	bl	52dc <DH_free@plt>
   1023c:	b	10288 <rb_setup_ssl_server+0x138>
   10240:	mov	r6, r7
   10244:	bl	4ce8 <ERR_get_error@plt>
   10248:	mov	r7, r0
   1024c:	cmp	r0, #0
   10250:	bne	10240 <rb_setup_ssl_server+0xf0>
   10254:	ldr	r7, [pc, #692]	; 10510 <rb_setup_ssl_server+0x3c0>
   10258:	mov	r0, r6
   1025c:	mov	r2, #512	; 0x200
   10260:	add	r7, pc, r7
   10264:	mov	r1, r7
   10268:	bl	4e5c <ERR_error_string_n@plt>
   1026c:	ldr	r0, [pc, #672]	; 10514 <rb_setup_ssl_server+0x3c4>
   10270:	ldr	r1, [pc, #672]	; 10518 <rb_setup_ssl_server+0x3c8>
   10274:	mov	r2, r8
   10278:	mov	r3, r7
   1027c:	add	r0, pc, r0
   10280:	add	r1, pc, r1
   10284:	bl	51a4 <rb_lib_log@plt>
   10288:	mov	r0, r9
   1028c:	bl	4e38 <fclose@plt>
   10290:	b	103d8 <rb_setup_ssl_server+0x288>
   10294:	ldr	r0, [pc, #560]	; 104cc <rb_setup_ssl_server+0x37c>
   10298:	ldr	r1, [pc, #560]	; 104d0 <rb_setup_ssl_server+0x380>
   1029c:	add	r0, pc, r0
   102a0:	add	r1, pc, r1
   102a4:	bl	51a4 <rb_lib_log@plt>
   102a8:	b	1038c <rb_setup_ssl_server+0x23c>
   102ac:	mov	r0, #0
   102b0:	mov	r4, r0
   102b4:	bl	4ce8 <ERR_get_error@plt>
   102b8:	cmp	r0, #0
   102bc:	bne	102b0 <rb_setup_ssl_server+0x160>
   102c0:	ldr	r5, [pc, #528]	; 104d8 <rb_setup_ssl_server+0x388>
   102c4:	mov	r0, r4
   102c8:	mov	r2, #512	; 0x200
   102cc:	add	r5, pc, r5
   102d0:	mov	r1, r5
   102d4:	bl	4e5c <ERR_error_string_n@plt>
   102d8:	ldr	r0, [pc, #508]	; 104dc <rb_setup_ssl_server+0x38c>
   102dc:	ldr	r1, [pc, #508]	; 104e0 <rb_setup_ssl_server+0x390>
   102e0:	mov	r2, r5
   102e4:	add	r0, pc, r0
   102e8:	add	r1, pc, r1
   102ec:	bl	51a4 <rb_lib_log@plt>
   102f0:	b	1038c <rb_setup_ssl_server+0x23c>
   102f4:	mov	r0, #0
   102f8:	mov	r5, r0
   102fc:	bl	4ce8 <ERR_get_error@plt>
   10300:	cmp	r0, #0
   10304:	bne	102f8 <rb_setup_ssl_server+0x1a8>
   10308:	ldr	r7, [pc, #468]	; 104e4 <rb_setup_ssl_server+0x394>
   1030c:	mov	r0, r5
   10310:	mov	r2, #512	; 0x200
   10314:	add	r7, pc, r7
   10318:	mov	r1, r7
   1031c:	bl	4e5c <ERR_error_string_n@plt>
   10320:	ldr	r0, [pc, #448]	; 104e8 <rb_setup_ssl_server+0x398>
   10324:	ldr	r1, [pc, #448]	; 104ec <rb_setup_ssl_server+0x39c>
   10328:	mov	r2, r6
   1032c:	mov	r3, r7
   10330:	add	r0, pc, r0
   10334:	add	r1, pc, r1
   10338:	b	10380 <rb_setup_ssl_server+0x230>
   1033c:	mov	r0, #0
   10340:	mov	r5, r0
   10344:	bl	4ce8 <ERR_get_error@plt>
   10348:	cmp	r0, #0
   1034c:	bne	10340 <rb_setup_ssl_server+0x1f0>
   10350:	ldr	r6, [pc, #408]	; 104f0 <rb_setup_ssl_server+0x3a0>
   10354:	mov	r0, r5
   10358:	mov	r2, #512	; 0x200
   1035c:	add	r6, pc, r6
   10360:	mov	r1, r6
   10364:	bl	4e5c <ERR_error_string_n@plt>
   10368:	ldr	r0, [pc, #388]	; 104f4 <rb_setup_ssl_server+0x3a4>
   1036c:	ldr	r1, [pc, #388]	; 104f8 <rb_setup_ssl_server+0x3a8>
   10370:	mov	r2, r7
   10374:	mov	r3, r6
   10378:	add	r0, pc, r0
   1037c:	add	r1, pc, r1
   10380:	bl	51a4 <rb_lib_log@plt>
   10384:	mov	r0, r4
   10388:	bl	4d24 <SSL_CTX_free@plt>
   1038c:	mov	r0, #0
   10390:	sub	sp, fp, #24
   10394:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10398:	ldr	r0, [pc, #348]	; 104fc <rb_setup_ssl_server+0x3ac>
   1039c:	ldr	r1, [pc, #348]	; 10500 <rb_setup_ssl_server+0x3b0>
   103a0:	add	r0, pc, r0
   103a4:	add	r1, pc, r1
   103a8:	bl	51a4 <rb_lib_log@plt>
   103ac:	b	103d8 <rb_setup_ssl_server+0x288>
   103b0:	bl	5540 <__errno_location@plt>
   103b4:	ldr	r0, [r0]
   103b8:	bl	4c88 <strerror@plt>
   103bc:	mov	r3, r0
   103c0:	ldr	r0, [pc, #320]	; 10508 <rb_setup_ssl_server+0x3b8>
   103c4:	ldr	r1, [pc, #320]	; 1050c <rb_setup_ssl_server+0x3bc>
   103c8:	mov	r2, r8
   103cc:	add	r0, pc, r0
   103d0:	add	r1, pc, r1
   103d4:	bl	51a4 <rb_lib_log@plt>
   103d8:	mov	r0, r4
   103dc:	mov	r1, r5
   103e0:	bl	4cdc <SSL_CTX_set_cipher_list@plt>
   103e4:	cmp	r0, #1
   103e8:	bne	104b4 <rb_setup_ssl_server+0x364>
   103ec:	mov	r0, r4
   103f0:	mov	r1, #44	; 0x2c
   103f4:	mov	r2, #0
   103f8:	mov	r3, #0
   103fc:	bl	4f1c <SSL_CTX_ctrl@plt>
   10400:	ldr	r2, [pc, #284]	; 10524 <rb_setup_ssl_server+0x3d4>
   10404:	mov	r0, r4
   10408:	mov	r1, #5
   1040c:	add	r2, pc, r2
   10410:	bl	5570 <SSL_CTX_set_verify@plt>
   10414:	mov	r0, r4
   10418:	mov	r1, #2048	; 0x800
   1041c:	bl	4dd8 <SSL_CTX_clear_options@plt>
   10420:	mov	r0, r4
   10424:	mov	r1, #67108864	; 0x4000000
   10428:	bl	50e4 <SSL_CTX_set_options@plt>
   1042c:	mov	r0, r4
   10430:	mov	r1, #16384	; 0x4000
   10434:	bl	50e4 <SSL_CTX_set_options@plt>
   10438:	mov	r0, r4
   1043c:	mov	r1, #4194304	; 0x400000
   10440:	bl	50e4 <SSL_CTX_set_options@plt>
   10444:	mov	r0, r4
   10448:	mov	r1, #0
   1044c:	bl	50e4 <SSL_CTX_set_options@plt>
   10450:	mov	r0, r4
   10454:	mov	r1, #0
   10458:	bl	50e4 <SSL_CTX_set_options@plt>
   1045c:	ldr	r3, [pc, #196]	; 10528 <rb_setup_ssl_server+0x3d8>
   10460:	mov	r0, r4
   10464:	mov	r1, #92	; 0x5c
   10468:	mov	r2, #0
   1046c:	add	r3, pc, r3
   10470:	bl	4f1c <SSL_CTX_ctrl@plt>
   10474:	ldr	r0, [pc, #176]	; 1052c <rb_setup_ssl_server+0x3dc>
   10478:	ldr	r0, [pc, r0]
   1047c:	cmp	r0, #0
   10480:	beq	10488 <rb_setup_ssl_server+0x338>
   10484:	bl	4d24 <SSL_CTX_free@plt>
   10488:	ldr	r0, [pc, #160]	; 10530 <rb_setup_ssl_server+0x3e0>
   1048c:	add	r0, pc, r0
   10490:	str	r4, [r0]
   10494:	ldr	r0, [pc, #152]	; 10534 <rb_setup_ssl_server+0x3e4>
   10498:	ldr	r1, [pc, #152]	; 10538 <rb_setup_ssl_server+0x3e8>
   1049c:	add	r0, pc, r0
   104a0:	add	r1, pc, r1
   104a4:	bl	51a4 <rb_lib_log@plt>
   104a8:	mov	r0, #1
   104ac:	sub	sp, fp, #24
   104b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   104b4:	ldr	r0, [pc, #96]	; 1051c <rb_setup_ssl_server+0x3cc>
   104b8:	ldr	r1, [pc, #96]	; 10520 <rb_setup_ssl_server+0x3d0>
   104bc:	add	r0, pc, r0
   104c0:	add	r1, pc, r1
   104c4:	bl	51a4 <rb_lib_log@plt>
   104c8:	b	10384 <rb_setup_ssl_server+0x234>
   104cc:	.word	0x00009ffe
   104d0:	.word	0x0000a01c
   104d4:	.word	0x0000a39d
   104d8:	.word	0x0002e8a8
   104dc:	.word	0x00009fec
   104e0:	.word	0x00009fd4
   104e4:	.word	0x0002e860
   104e8:	.word	0x00009fb4
   104ec:	.word	0x00009f88
   104f0:	.word	0x0002e818
   104f4:	.word	0x00009f9e
   104f8:	.word	0x00009f40
   104fc:	.word	0x00009fa1
   10500:	.word	0x00009f18
   10504:	.word	0x0000a6a0
   10508:	.word	0x00009f99
   1050c:	.word	0x00009eec
   10510:	.word	0x0002e914
   10514:	.word	0x0000a0fe
   10518:	.word	0x0000a03c
   1051c:	.word	0x00009edf
   10520:	.word	0x00009dfc
   10524:	.word	0x00000128
   10528:	.word	0x0001bfc4
   1052c:	.word	0x0002e4f8
   10530:	.word	0x0002e4e4
   10534:	.word	0x00009f3c
   10538:	.word	0x00009e1c

0001053c <verify_accept_all_cb>:
   1053c:	mov	r0, #1
   10540:	bx	lr

00010544 <rb_init_prng>:
   10544:	push	{r4, r5, fp, lr}
   10548:	add	fp, sp, #8
   1054c:	mov	r5, r1
   10550:	mov	r4, r0
   10554:	bl	4ce8 <ERR_get_error@plt>
   10558:	cmp	r0, #0
   1055c:	bne	10554 <rb_init_prng+0x10>
   10560:	cmp	r5, #0
   10564:	bne	105c0 <rb_init_prng+0x7c>
   10568:	mov	r0, r4
   1056c:	mvn	r1, #0
   10570:	bl	4d0c <RAND_load_file@plt>
   10574:	cmn	r0, #1
   10578:	bgt	105c0 <rb_init_prng+0x7c>
   1057c:	mov	r0, #0
   10580:	mov	r4, r0
   10584:	bl	4ce8 <ERR_get_error@plt>
   10588:	cmp	r0, #0
   1058c:	bne	10580 <rb_init_prng+0x3c>
   10590:	ldr	r5, [pc, #156]	; 10634 <rb_init_prng+0xf0>
   10594:	mov	r0, r4
   10598:	mov	r2, #512	; 0x200
   1059c:	add	r5, pc, r5
   105a0:	mov	r1, r5
   105a4:	bl	4e5c <ERR_error_string_n@plt>
   105a8:	ldr	r0, [pc, #136]	; 10638 <rb_init_prng+0xf4>
   105ac:	ldr	r1, [pc, #136]	; 1063c <rb_init_prng+0xf8>
   105b0:	mov	r2, r5
   105b4:	add	r0, pc, r0
   105b8:	add	r1, pc, r1
   105bc:	bl	51a4 <rb_lib_log@plt>
   105c0:	bl	5414 <RAND_status@plt>
   105c4:	cmp	r0, #1
   105c8:	bne	105e8 <rb_init_prng+0xa4>
   105cc:	ldr	r0, [pc, #120]	; 1064c <rb_init_prng+0x108>
   105d0:	ldr	r1, [pc, #120]	; 10650 <rb_init_prng+0x10c>
   105d4:	add	r0, pc, r0
   105d8:	add	r1, pc, r1
   105dc:	bl	51a4 <rb_lib_log@plt>
   105e0:	mov	r0, #1
   105e4:	pop	{r4, r5, fp, pc}
   105e8:	mov	r0, #0
   105ec:	mov	r4, r0
   105f0:	bl	4ce8 <ERR_get_error@plt>
   105f4:	cmp	r0, #0
   105f8:	bne	105ec <rb_init_prng+0xa8>
   105fc:	ldr	r5, [pc, #60]	; 10640 <rb_init_prng+0xfc>
   10600:	mov	r0, r4
   10604:	mov	r2, #512	; 0x200
   10608:	add	r5, pc, r5
   1060c:	mov	r1, r5
   10610:	bl	4e5c <ERR_error_string_n@plt>
   10614:	ldr	r0, [pc, #40]	; 10644 <rb_init_prng+0x100>
   10618:	ldr	r1, [pc, #40]	; 10648 <rb_init_prng+0x104>
   1061c:	mov	r2, r5
   10620:	add	r0, pc, r0
   10624:	add	r1, pc, r1
   10628:	bl	51a4 <rb_lib_log@plt>
   1062c:	mov	r0, #0
   10630:	pop	{r4, r5, fp, pc}
   10634:	.word	0x0002e5d8
   10638:	.word	0x00009e45
   1063c:	.word	0x00009e58
   10640:	.word	0x0002e56c
   10644:	.word	0x00009dfd
   10648:	.word	0x00009dec
   1064c:	.word	0x00009e5d
   10650:	.word	0x00009e38

00010654 <rb_get_random>:
   10654:	push	{r4, r5, fp, lr}
   10658:	add	fp, sp, #8
   1065c:	mov	r4, r1
   10660:	mov	r5, r0
   10664:	bl	4ce8 <ERR_get_error@plt>
   10668:	cmp	r0, #0
   1066c:	bne	10664 <rb_get_random+0x10>
   10670:	mov	r0, r5
   10674:	mov	r1, r4
   10678:	bl	5348 <RAND_bytes@plt>
   1067c:	mov	r1, r0
   10680:	mov	r0, #1
   10684:	cmp	r1, #1
   10688:	popeq	{r4, r5, fp, pc}
   1068c:	mov	r0, #0
   10690:	mov	r4, r0
   10694:	bl	4ce8 <ERR_get_error@plt>
   10698:	cmp	r0, #0
   1069c:	bne	10690 <rb_get_random+0x3c>
   106a0:	ldr	r5, [pc, #48]	; 106d8 <rb_get_random+0x84>
   106a4:	mov	r0, r4
   106a8:	mov	r2, #512	; 0x200
   106ac:	add	r5, pc, r5
   106b0:	mov	r1, r5
   106b4:	bl	4e5c <ERR_error_string_n@plt>
   106b8:	ldr	r0, [pc, #28]	; 106dc <rb_get_random+0x88>
   106bc:	ldr	r1, [pc, #28]	; 106e0 <rb_get_random+0x8c>
   106c0:	mov	r2, r5
   106c4:	add	r0, pc, r0
   106c8:	add	r1, pc, r1
   106cc:	bl	51a4 <rb_lib_log@plt>
   106d0:	mov	r0, #0
   106d4:	pop	{r4, r5, fp, pc}
   106d8:	.word	0x0002e4c8
   106dc:	.word	0x00009d82
   106e0:	.word	0x00009d91

000106e4 <rb_get_ssl_strerror>:
   106e4:	push	{r4, sl, fp, lr}
   106e8:	add	fp, sp, #8
   106ec:	ldr	r0, [r0, #64]	; 0x40
   106f0:	ldr	r4, [pc, #20]	; 1070c <rb_get_ssl_strerror+0x28>
   106f4:	mov	r2, #512	; 0x200
   106f8:	add	r4, pc, r4
   106fc:	mov	r1, r4
   10700:	bl	4e5c <ERR_error_string_n@plt>
   10704:	mov	r0, r4
   10708:	pop	{r4, sl, fp, pc}
   1070c:	.word	0x0002e47c

00010710 <rb_get_ssl_certfp>:
   10710:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10714:	add	fp, sp, #24
   10718:	mov	r4, #0
   1071c:	cmp	r0, #0
   10720:	beq	10790 <rb_get_ssl_certfp+0x80>
   10724:	mov	r5, r0
   10728:	ldr	r0, [r0, #56]	; 0x38
   1072c:	cmp	r0, #0
   10730:	beq	10790 <rb_get_ssl_certfp+0x80>
   10734:	mov	r8, r2
   10738:	mov	r6, r1
   1073c:	bl	52a0 <SSL_get_peer_certificate@plt>
   10740:	cmp	r0, #0
   10744:	beq	10790 <rb_get_ssl_certfp+0x80>
   10748:	mov	r7, r0
   1074c:	ldr	r0, [r5, #56]	; 0x38
   10750:	bl	52b8 <SSL_get_verify_result@plt>
   10754:	mov	r4, #0
   10758:	cmp	r0, #27
   1075c:	bhi	10788 <rb_get_ssl_certfp+0x78>
   10760:	movw	r2, #1
   10764:	mov	r1, #1
   10768:	movt	r2, #2108	; 0x83c
   1076c:	tst	r2, r1, lsl r0
   10770:	beq	10788 <rb_get_ssl_certfp+0x78>
   10774:	mov	r0, r7
   10778:	mov	r1, r6
   1077c:	mov	r2, r8
   10780:	bl	10798 <make_certfp>
   10784:	mov	r4, r0
   10788:	mov	r0, r7
   1078c:	bl	54bc <X509_free@plt>
   10790:	mov	r0, r4
   10794:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00010798 <make_certfp>:
   10798:	push	{r4, r5, r6, sl, fp, lr}
   1079c:	add	fp, sp, #16
   107a0:	sub	sp, sp, #8
   107a4:	mov	r5, r0
   107a8:	mov	r0, #0
   107ac:	mov	r4, r1
   107b0:	cmp	r2, #1
   107b4:	str	r0, [sp, #4]
   107b8:	ble	107ec <make_certfp+0x54>
   107bc:	cmp	r2, #2
   107c0:	beq	1080c <make_certfp+0x74>
   107c4:	movw	r1, #4097	; 0x1001
   107c8:	cmp	r2, r1
   107cc:	beq	1081c <make_certfp+0x84>
   107d0:	movw	r1, #4098	; 0x1002
   107d4:	cmp	r2, r1
   107d8:	bne	10880 <make_certfp+0xe8>
   107dc:	mov	r0, #64	; 0x40
   107e0:	str	r0, [sp, #4]
   107e4:	bl	53fc <EVP_sha512@plt>
   107e8:	b	10828 <make_certfp+0x90>
   107ec:	cmp	r2, #0
   107f0:	beq	10844 <make_certfp+0xac>
   107f4:	cmp	r2, #1
   107f8:	bne	10880 <make_certfp+0xe8>
   107fc:	mov	r0, #32
   10800:	str	r0, [sp, #4]
   10804:	bl	542c <EVP_sha256@plt>
   10808:	b	10850 <make_certfp+0xb8>
   1080c:	mov	r0, #64	; 0x40
   10810:	str	r0, [sp, #4]
   10814:	bl	53fc <EVP_sha512@plt>
   10818:	b	10850 <make_certfp+0xb8>
   1081c:	mov	r0, #32
   10820:	str	r0, [sp, #4]
   10824:	bl	542c <EVP_sha256@plt>
   10828:	mov	r6, r0
   1082c:	mov	r0, r5
   10830:	bl	4dfc <X509_get_X509_PUBKEY@plt>
   10834:	mov	r5, r0
   10838:	ldr	r0, [pc, #156]	; 108dc <make_certfp+0x144>
   1083c:	ldr	r0, [pc, r0]
   10840:	b	1085c <make_certfp+0xc4>
   10844:	mov	r0, #20
   10848:	str	r0, [sp, #4]
   1084c:	bl	5174 <EVP_sha1@plt>
   10850:	mov	r6, r0
   10854:	ldr	r0, [pc, #124]	; 108d8 <make_certfp+0x140>
   10858:	ldr	r0, [pc, r0]
   1085c:	add	r1, sp, #4
   10860:	mov	r2, r5
   10864:	mov	r3, r4
   10868:	str	r1, [sp]
   1086c:	mov	r1, r6
   10870:	bl	5288 <ASN1_item_digest@plt>
   10874:	cmp	r0, #1
   10878:	bne	10888 <make_certfp+0xf0>
   1087c:	ldr	r0, [sp, #4]
   10880:	sub	sp, fp, #16
   10884:	pop	{r4, r5, r6, sl, fp, pc}
   10888:	mov	r0, #0
   1088c:	mov	r4, r0
   10890:	bl	4ce8 <ERR_get_error@plt>
   10894:	cmp	r0, #0
   10898:	bne	1088c <make_certfp+0xf4>
   1089c:	ldr	r5, [pc, #60]	; 108e0 <make_certfp+0x148>
   108a0:	mov	r0, r4
   108a4:	mov	r2, #512	; 0x200
   108a8:	add	r5, pc, r5
   108ac:	mov	r1, r5
   108b0:	bl	4e5c <ERR_error_string_n@plt>
   108b4:	ldr	r0, [pc, #40]	; 108e4 <make_certfp+0x14c>
   108b8:	ldr	r1, [pc, #40]	; 108e8 <make_certfp+0x150>
   108bc:	mov	r2, r5
   108c0:	add	r0, pc, r0
   108c4:	add	r1, pc, r1
   108c8:	bl	51a4 <rb_lib_log@plt>
   108cc:	mov	r0, #0
   108d0:	sub	sp, fp, #16
   108d4:	pop	{r4, r5, r6, sl, fp, pc}
   108d8:	.word	0x0001bb74
   108dc:	.word	0x0001bb9c
   108e0:	.word	0x0002e2cc
   108e4:	.word	0x00009c21
   108e8:	.word	0x00009c36

000108ec <rb_get_ssl_certfp_file>:
   108ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   108f0:	add	fp, sp, #24
   108f4:	mov	r7, r1
   108f8:	ldr	r1, [pc, #104]	; 10968 <rb_get_ssl_certfp_file+0x7c>
   108fc:	mov	r8, r2
   10900:	add	r1, pc, r1
   10904:	bl	4ebc <fopen@plt>
   10908:	cmp	r0, #0
   1090c:	beq	1095c <rb_get_ssl_certfp_file+0x70>
   10910:	mov	r1, #0
   10914:	mov	r2, #0
   10918:	mov	r3, #0
   1091c:	mov	r4, r0
   10920:	mov	r6, #0
   10924:	bl	50a8 <PEM_read_X509@plt>
   10928:	cmp	r0, #0
   1092c:	beq	1094c <rb_get_ssl_certfp_file+0x60>
   10930:	mov	r1, r7
   10934:	mov	r2, r8
   10938:	mov	r5, r0
   1093c:	bl	10798 <make_certfp>
   10940:	mov	r6, r0
   10944:	mov	r0, r5
   10948:	bl	54bc <X509_free@plt>
   1094c:	mov	r0, r4
   10950:	bl	4e38 <fclose@plt>
   10954:	mov	r0, r6
   10958:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1095c:	mvn	r6, #0
   10960:	mov	r0, r6
   10964:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10968:	.word	0x00009f84

0001096c <rb_get_ssl_info>:
   1096c:	push	{r4, r5, r6, r7, fp, lr}
   10970:	add	fp, sp, #16
   10974:	sub	sp, sp, #16
   10978:	movw	r4, #4175	; 0x104f
   1097c:	mov	r5, r1
   10980:	mov	r6, r0
   10984:	movt	r4, #4112	; 0x1010
   10988:	bl	4f7c <OpenSSL_version_num@plt>
   1098c:	cmp	r0, r4
   10990:	bne	109ac <rb_get_ssl_info+0x40>
   10994:	ldr	r0, [pc, #80]	; 109ec <rb_get_ssl_info+0x80>
   10998:	add	r0, pc, r0
   1099c:	str	r0, [sp]
   109a0:	ldr	r2, [pc, #72]	; 109f0 <rb_get_ssl_info+0x84>
   109a4:	add	r2, pc, r2
   109a8:	b	109d4 <rb_get_ssl_info+0x68>
   109ac:	bl	4f7c <OpenSSL_version_num@plt>
   109b0:	mov	r7, r0
   109b4:	mov	r0, #0
   109b8:	bl	54ec <OpenSSL_version@plt>
   109bc:	ldr	r1, [pc, #48]	; 109f4 <rb_get_ssl_info+0x88>
   109c0:	add	r1, pc, r1
   109c4:	stm	sp, {r1, r7}
   109c8:	str	r0, [sp, #8]
   109cc:	ldr	r2, [pc, #36]	; 109f8 <rb_get_ssl_info+0x8c>
   109d0:	add	r2, pc, r2
   109d4:	mov	r0, r6
   109d8:	mov	r1, r5
   109dc:	mov	r3, r4
   109e0:	bl	5408 <snprintf@plt>
   109e4:	sub	sp, fp, #16
   109e8:	pop	{r4, r5, r6, r7, fp, pc}
   109ec:	.word	0x00009af3
   109f0:	.word	0x00009ac3
   109f4:	.word	0x00009acb
   109f8:	.word	0x00009ad7

000109fc <rb_ssl_get_cipher>:
   109fc:	push	{r4, r5, r6, sl, fp, lr}
   10a00:	add	fp, sp, #16
   10a04:	sub	sp, sp, #8
   10a08:	mov	r4, #0
   10a0c:	cmp	r0, #0
   10a10:	beq	10a5c <rb_ssl_get_cipher+0x60>
   10a14:	mov	r5, r0
   10a18:	ldr	r0, [r0, #56]	; 0x38
   10a1c:	cmp	r0, #0
   10a20:	beq	10a5c <rb_ssl_get_cipher+0x60>
   10a24:	bl	5510 <SSL_get_version@plt>
   10a28:	mov	r6, r0
   10a2c:	ldr	r0, [r5, #56]	; 0x38
   10a30:	bl	4de4 <SSL_get_current_cipher@plt>
   10a34:	bl	4f64 <SSL_CIPHER_get_name@plt>
   10a38:	str	r0, [sp]
   10a3c:	mov	r1, #512	; 0x200
   10a40:	mov	r3, r6
   10a44:	ldr	r4, [pc, #28]	; 10a68 <rb_ssl_get_cipher+0x6c>
   10a48:	ldr	r2, [pc, #28]	; 10a6c <rb_ssl_get_cipher+0x70>
   10a4c:	add	r4, pc, r4
   10a50:	add	r2, pc, r2
   10a54:	mov	r0, r4
   10a58:	bl	5408 <snprintf@plt>
   10a5c:	mov	r0, r4
   10a60:	sub	sp, fp, #16
   10a64:	pop	{r4, r5, r6, sl, fp, pc}
   10a68:	.word	0x0002df28
   10a6c:	.word	0x00009a8a

00010a70 <rb_ssl_read>:
   10a70:	push	{fp, lr}
   10a74:	mov	fp, sp
   10a78:	sub	sp, sp, #8
   10a7c:	mov	r3, r1
   10a80:	mov	r1, r0
   10a84:	str	r2, [sp]
   10a88:	mov	r0, #0
   10a8c:	mov	r2, r3
   10a90:	mov	r3, #0
   10a94:	bl	10aa0 <rb_ssl_read_or_write>
   10a98:	mov	sp, fp
   10a9c:	pop	{fp, pc}

00010aa0 <rb_ssl_read_or_write>:
   10aa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10aa4:	add	fp, sp, #24
   10aa8:	ldr	r5, [fp, #8]
   10aac:	mov	r6, r3
   10ab0:	mov	r7, r2
   10ab4:	mov	r8, r1
   10ab8:	mov	r4, r0
   10abc:	bl	4ce8 <ERR_get_error@plt>
   10ac0:	cmp	r0, #0
   10ac4:	bne	10abc <rb_ssl_read_or_write+0x1c>
   10ac8:	ldr	r0, [r8, #56]	; 0x38
   10acc:	cmp	r4, #0
   10ad0:	beq	10ae4 <rb_ssl_read_or_write+0x44>
   10ad4:	mov	r1, r6
   10ad8:	mov	r2, r5
   10adc:	bl	4ea4 <SSL_write@plt>
   10ae0:	b	10af0 <rb_ssl_read_or_write+0x50>
   10ae4:	mov	r1, r7
   10ae8:	mov	r2, r5
   10aec:	bl	5018 <SSL_read@plt>
   10af0:	mov	r1, r0
   10af4:	cmn	r0, #1
   10af8:	ble	10b04 <rb_ssl_read_or_write+0x64>
   10afc:	mov	r0, r1
   10b00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10b04:	ldr	r0, [r8, #56]	; 0x38
   10b08:	bl	5504 <SSL_get_error@plt>
   10b0c:	sub	r0, r0, #2
   10b10:	cmp	r0, #4
   10b14:	bhi	10b6c <rb_ssl_read_or_write+0xcc>
   10b18:	add	r2, pc, #8
   10b1c:	mov	r1, #0
   10b20:	ldr	r0, [r2, r0, lsl #2]
   10b24:	add	pc, r2, r0
   10b28:	.word	0x00000014
   10b2c:	.word	0x0000002c
   10b30:	.word	0x00000044
   10b34:	.word	0x00000068
   10b38:	.word	0xffffffd4
   10b3c:	bl	5540 <__errno_location@plt>
   10b40:	mov	r1, #11
   10b44:	str	r1, [r0]
   10b48:	mvn	r1, #2
   10b4c:	mov	r0, r1
   10b50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10b54:	bl	5540 <__errno_location@plt>
   10b58:	mov	r1, #11
   10b5c:	str	r1, [r0]
   10b60:	mvn	r1, #3
   10b64:	mov	r0, r1
   10b68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10b6c:	mov	r0, #0
   10b70:	mov	r4, r0
   10b74:	bl	4ce8 <ERR_get_error@plt>
   10b78:	cmp	r0, #0
   10b7c:	bne	10b70 <rb_ssl_read_or_write+0xd0>
   10b80:	cmp	r4, #0
   10b84:	str	r4, [r8, #64]	; 0x40
   10b88:	bne	10bb0 <rb_ssl_read_or_write+0x110>
   10b8c:	b	10bd0 <rb_ssl_read_or_write+0x130>
   10b90:	mov	r0, #0
   10b94:	mov	r4, r0
   10b98:	bl	4ce8 <ERR_get_error@plt>
   10b9c:	cmp	r0, #0
   10ba0:	bne	10b94 <rb_ssl_read_or_write+0xf4>
   10ba4:	cmp	r4, #0
   10ba8:	beq	10bc8 <rb_ssl_read_or_write+0x128>
   10bac:	str	r4, [r8, #64]	; 0x40
   10bb0:	bl	5540 <__errno_location@plt>
   10bb4:	mov	r1, #5
   10bb8:	str	r1, [r0]
   10bbc:	mvn	r1, #1
   10bc0:	mov	r0, r1
   10bc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10bc8:	mov	r0, #0
   10bcc:	str	r0, [r8, #64]	; 0x40
   10bd0:	mvn	r1, #0
   10bd4:	mov	r0, r1
   10bd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00010bdc <rb_ssl_write>:
   10bdc:	push	{fp, lr}
   10be0:	mov	fp, sp
   10be4:	sub	sp, sp, #8
   10be8:	mov	r3, r1
   10bec:	mov	r1, r0
   10bf0:	str	r2, [sp]
   10bf4:	mov	r0, #1
   10bf8:	mov	r2, #0
   10bfc:	bl	10aa0 <rb_ssl_read_or_write>
   10c00:	mov	sp, fp
   10c04:	pop	{fp, pc}

00010c08 <rb_supports_ssl>:
   10c08:	mov	r0, #1
   10c0c:	bx	lr

00010c10 <rb_ssl_handshake_count>:
   10c10:	ldr	r0, [r0, #60]	; 0x3c
   10c14:	bx	lr

00010c18 <rb_ssl_clear_handshake_count>:
   10c18:	mov	r1, #0
   10c1c:	str	r1, [r0, #60]	; 0x3c
   10c20:	bx	lr

00010c24 <rb_ssl_start_accepted>:
   10c24:	push	{r4, r5, r6, r7, fp, lr}
   10c28:	add	fp, sp, #16
   10c2c:	mov	r4, r0
   10c30:	ldrb	r0, [r0, #17]
   10c34:	mov	r6, r1
   10c38:	mov	r1, #144	; 0x90
   10c3c:	mov	r5, r3
   10c40:	mov	r7, r2
   10c44:	orr	r0, r0, #32
   10c48:	strb	r0, [r4, #17]
   10c4c:	mov	r0, #1
   10c50:	bl	4e98 <calloc@plt>
   10c54:	cmp	r0, #0
   10c58:	beq	10ca8 <rb_ssl_start_accepted+0x84>
   10c5c:	mov	r1, #0
   10c60:	mov	r2, #132	; 0x84
   10c64:	str	r0, [r4, #52]	; 0x34
   10c68:	str	r7, [r0, #140]	; 0x8c
   10c6c:	str	r6, [r0, #132]	; 0x84
   10c70:	bl	4ed4 <memset@plt>
   10c74:	ldr	r2, [pc, #48]	; 10cac <rb_ssl_start_accepted+0x88>
   10c78:	mov	r0, r4
   10c7c:	mov	r1, r5
   10c80:	mov	r3, #0
   10c84:	add	r2, pc, r2
   10c88:	bl	4cd0 <rb_settimeout@plt>
   10c8c:	mov	r0, r4
   10c90:	mov	r1, #0
   10c94:	bl	10ce4 <rb_ssl_init_fd>
   10c98:	mov	r0, r4
   10c9c:	mov	r1, #0
   10ca0:	pop	{r4, r5, r6, r7, fp, lr}
   10ca4:	b	10db0 <rb_ssl_accept_common>
   10ca8:	bl	5204 <rb_outofmemory@plt>
   10cac:	.word	0x00000024

00010cb0 <rb_ssl_timeout_cb>:
   10cb0:	push	{fp, lr}
   10cb4:	mov	fp, sp
   10cb8:	sub	sp, sp, #8
   10cbc:	ldr	r1, [r0, #52]	; 0x34
   10cc0:	mov	r2, #0
   10cc4:	mov	r3, #0
   10cc8:	ldr	ip, [r1, #132]	; 0x84
   10ccc:	ldr	r1, [r1, #140]	; 0x8c
   10cd0:	str	r1, [sp]
   10cd4:	mov	r1, #3
   10cd8:	blx	ip
   10cdc:	mov	sp, fp
   10ce0:	pop	{fp, pc}

00010ce4 <rb_ssl_init_fd>:
   10ce4:	push	{r4, r5, r6, sl, fp, lr}
   10ce8:	add	fp, sp, #16
   10cec:	mov	r5, r1
   10cf0:	mov	r4, r0
   10cf4:	bl	4ce8 <ERR_get_error@plt>
   10cf8:	cmp	r0, #0
   10cfc:	bne	10cf4 <rb_ssl_init_fd+0x10>
   10d00:	ldr	r0, [pc, #152]	; 10da0 <rb_ssl_init_fd+0xbc>
   10d04:	ldr	r0, [pc, r0]
   10d08:	bl	4fd0 <SSL_new@plt>
   10d0c:	cmp	r0, #0
   10d10:	str	r0, [r4, #56]	; 0x38
   10d14:	beq	10d30 <rb_ssl_init_fd+0x4c>
   10d18:	cmp	r5, #1
   10d1c:	beq	10d80 <rb_ssl_init_fd+0x9c>
   10d20:	cmp	r5, #0
   10d24:	bne	10d84 <rb_ssl_init_fd+0xa0>
   10d28:	bl	524c <SSL_set_accept_state@plt>
   10d2c:	b	10d84 <rb_ssl_init_fd+0xa0>
   10d30:	mov	r0, #0
   10d34:	mov	r5, r0
   10d38:	bl	4ce8 <ERR_get_error@plt>
   10d3c:	cmp	r0, #0
   10d40:	bne	10d34 <rb_ssl_init_fd+0x50>
   10d44:	ldr	r6, [pc, #88]	; 10da4 <rb_ssl_init_fd+0xc0>
   10d48:	mov	r0, r5
   10d4c:	mov	r2, #512	; 0x200
   10d50:	add	r6, pc, r6
   10d54:	mov	r1, r6
   10d58:	bl	4e5c <ERR_error_string_n@plt>
   10d5c:	ldr	r0, [pc, #68]	; 10da8 <rb_ssl_init_fd+0xc4>
   10d60:	ldr	r1, [pc, #68]	; 10dac <rb_ssl_init_fd+0xc8>
   10d64:	mov	r2, r6
   10d68:	add	r0, pc, r0
   10d6c:	add	r1, pc, r1
   10d70:	bl	51a4 <rb_lib_log@plt>
   10d74:	mov	r0, r4
   10d78:	pop	{r4, r5, r6, sl, fp, lr}
   10d7c:	b	5108 <rb_close@plt>
   10d80:	bl	53c0 <SSL_set_connect_state@plt>
   10d84:	ldr	r5, [r4, #56]	; 0x38
   10d88:	mov	r0, r4
   10d8c:	bl	4da8 <rb_get_fd@plt>
   10d90:	mov	r1, r0
   10d94:	mov	r0, r5
   10d98:	pop	{r4, r5, r6, sl, fp, lr}
   10d9c:	b	4f10 <SSL_set_fd@plt>
   10da0:	.word	0x0002dc6c
   10da4:	.word	0x0002de24
   10da8:	.word	0x0000979e
   10dac:	.word	0x000097aa

00010db0 <rb_ssl_accept_common>:
   10db0:	push	{r4, r5, r6, sl, fp, lr}
   10db4:	add	fp, sp, #16
   10db8:	sub	sp, sp, #8
   10dbc:	mov	r4, r0
   10dc0:	bl	4ce8 <ERR_get_error@plt>
   10dc4:	cmp	r0, #0
   10dc8:	bne	10dc0 <rb_ssl_accept_common+0x10>
   10dcc:	ldr	r0, [r4, #56]	; 0x38
   10dd0:	bl	5054 <SSL_do_handshake@plt>
   10dd4:	mov	r6, r0
   10dd8:	ldr	r0, [r4, #56]	; 0x38
   10ddc:	mov	r1, r6
   10de0:	bl	5504 <SSL_get_error@plt>
   10de4:	cmp	r6, #1
   10de8:	bne	10e64 <rb_ssl_accept_common+0xb4>
   10dec:	ldr	r0, [r4, #60]	; 0x3c
   10df0:	mov	r1, #0
   10df4:	mov	r2, #0
   10df8:	mov	r3, #0
   10dfc:	mov	r6, #0
   10e00:	add	r0, r0, #1
   10e04:	str	r0, [r4, #60]	; 0x3c
   10e08:	mov	r0, r4
   10e0c:	bl	4cd0 <rb_settimeout@plt>
   10e10:	mov	r0, r4
   10e14:	mov	r1, #3
   10e18:	mov	r2, #0
   10e1c:	mov	r3, #0
   10e20:	bl	4d6c <rb_setselect@plt>
   10e24:	ldr	r5, [r4, #52]	; 0x34
   10e28:	str	r6, [r4, #52]	; 0x34
   10e2c:	mov	r1, #0
   10e30:	ldr	r0, [r5, #140]	; 0x8c
   10e34:	ldr	r3, [r5, #128]	; 0x80
   10e38:	ldr	r6, [r5, #132]	; 0x84
   10e3c:	mov	r2, r5
   10e40:	str	r0, [sp]
   10e44:	mov	r0, r4
   10e48:	blx	r6
   10e4c:	cmp	r5, #0
   10e50:	beq	10eb4 <rb_ssl_accept_common+0x104>
   10e54:	mov	r0, r5
   10e58:	sub	sp, fp, #16
   10e5c:	pop	{r4, r5, r6, sl, fp, lr}
   10e60:	b	4f94 <free@plt>
   10e64:	mov	r5, r0
   10e68:	cmn	r6, #1
   10e6c:	cmpeq	r5, #2
   10e70:	beq	10ebc <rb_ssl_accept_common+0x10c>
   10e74:	cmn	r6, #1
   10e78:	cmpeq	r5, #3
   10e7c:	beq	10ed0 <rb_ssl_accept_common+0x120>
   10e80:	bl	5540 <__errno_location@plt>
   10e84:	mov	r1, #5
   10e88:	mov	r2, #0
   10e8c:	mov	r3, #0
   10e90:	str	r1, [r0]
   10e94:	str	r5, [r4, #64]	; 0x40
   10e98:	mov	r1, #6
   10e9c:	ldr	r0, [r4, #52]	; 0x34
   10ea0:	ldr	r6, [r0, #132]	; 0x84
   10ea4:	ldr	r0, [r0, #140]	; 0x8c
   10ea8:	str	r0, [sp]
   10eac:	mov	r0, r4
   10eb0:	blx	r6
   10eb4:	sub	sp, fp, #16
   10eb8:	pop	{r4, r5, r6, sl, fp, pc}
   10ebc:	ldr	r2, [pc, #44]	; 10ef0 <rb_ssl_accept_common+0x140>
   10ec0:	mov	r0, r4
   10ec4:	mov	r1, #1
   10ec8:	add	r2, pc, r2
   10ecc:	b	10ee0 <rb_ssl_accept_common+0x130>
   10ed0:	ldr	r2, [pc, #28]	; 10ef4 <rb_ssl_accept_common+0x144>
   10ed4:	mov	r0, r4
   10ed8:	mov	r1, #2
   10edc:	add	r2, pc, r2
   10ee0:	mov	r3, #0
   10ee4:	sub	sp, fp, #16
   10ee8:	pop	{r4, r5, r6, sl, fp, lr}
   10eec:	b	4d6c <rb_setselect@plt>
   10ef0:	.word	0xfffffee0
   10ef4:	.word	0xfffffecc

00010ef8 <rb_ssl_accept_setup>:
   10ef8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10efc:	add	fp, sp, #24
   10f00:	mov	r6, r0
   10f04:	ldrb	r0, [r1, #17]
   10f08:	mov	r4, r1
   10f0c:	mov	r5, r3
   10f10:	mov	r8, r2
   10f14:	orr	r0, r0, #32
   10f18:	strb	r0, [r1, #17]
   10f1c:	mov	r0, #1
   10f20:	mov	r1, #144	; 0x90
   10f24:	bl	4e98 <calloc@plt>
   10f28:	cmp	r0, #0
   10f2c:	beq	10fac <rb_ssl_accept_setup+0xb4>
   10f30:	str	r0, [r4, #52]	; 0x34
   10f34:	mov	r7, r0
   10f38:	cmp	r5, #127	; 0x7f
   10f3c:	rsb	r2, r5, #128	; 0x80
   10f40:	ldr	r0, [r6, #52]	; 0x34
   10f44:	movwhi	r2, #0
   10f48:	ldr	r1, [r0, #132]	; 0x84
   10f4c:	str	r1, [r7, #132]	; 0x84
   10f50:	mov	r1, #0
   10f54:	ldr	r0, [r0, #140]	; 0x8c
   10f58:	str	r5, [r7, #128]	; 0x80
   10f5c:	str	r0, [r7, #140]	; 0x8c
   10f60:	add	r0, r7, r5
   10f64:	bl	4ed4 <memset@plt>
   10f68:	mov	r0, r7
   10f6c:	mov	r1, r8
   10f70:	mov	r2, r5
   10f74:	bl	509c <memcpy@plt>
   10f78:	ldr	r2, [pc, #48]	; 10fb0 <rb_ssl_accept_setup+0xb8>
   10f7c:	mov	r0, r4
   10f80:	mov	r1, #10
   10f84:	mov	r3, #0
   10f88:	add	r2, pc, r2
   10f8c:	bl	4cd0 <rb_settimeout@plt>
   10f90:	mov	r0, r4
   10f94:	mov	r1, #0
   10f98:	bl	10ce4 <rb_ssl_init_fd>
   10f9c:	mov	r0, r4
   10fa0:	mov	r1, #0
   10fa4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   10fa8:	b	10db0 <rb_ssl_accept_common>
   10fac:	bl	5204 <rb_outofmemory@plt>
   10fb0:	.word	0xfffffd20

00010fb4 <rb_ssl_listen>:
   10fb4:	push	{r4, sl, fp, lr}
   10fb8:	add	fp, sp, #8
   10fbc:	mov	r4, r0
   10fc0:	bl	5450 <rb_listen@plt>
   10fc4:	mov	r1, #52	; 0x34
   10fc8:	strb	r1, [r4, #17]
   10fcc:	pop	{r4, sl, fp, pc}

00010fd0 <rb_connect_tcp_ssl>:
   10fd0:	push	{r4, r5, r6, r7, fp, lr}
   10fd4:	add	fp, sp, #16
   10fd8:	sub	sp, sp, #8
   10fdc:	cmp	r0, #0
   10fe0:	beq	11038 <rb_connect_tcp_ssl+0x68>
   10fe4:	mov	r5, r1
   10fe8:	mov	r6, r0
   10fec:	mov	r0, #1
   10ff0:	mov	r1, #12
   10ff4:	mov	r7, r3
   10ff8:	mov	r4, r2
   10ffc:	bl	4e98 <calloc@plt>
   11000:	cmp	r0, #0
   11004:	beq	11040 <rb_connect_tcp_ssl+0x70>
   11008:	ldr	r1, [fp, #12]
   1100c:	ldr	r2, [fp, #8]
   11010:	str	r7, [r0]
   11014:	stm	sp, {r0, r1}
   11018:	str	r2, [r0, #4]
   1101c:	str	r1, [r0, #8]
   11020:	mov	r0, r6
   11024:	mov	r1, r5
   11028:	mov	r2, r4
   1102c:	ldr	r3, [pc, #16]	; 11044 <rb_connect_tcp_ssl+0x74>
   11030:	add	r3, pc, r3
   11034:	bl	4d00 <rb_connect_tcp@plt>
   11038:	sub	sp, fp, #16
   1103c:	pop	{r4, r5, r6, r7, fp, pc}
   11040:	bl	5204 <rb_outofmemory@plt>
   11044:	.word	0x00000010

00011048 <rb_ssl_tryconn>:
   11048:	push	{r4, r5, fp, lr}
   1104c:	add	fp, sp, #8
   11050:	mov	r4, r2
   11054:	mov	r5, r0
   11058:	cmp	r1, #0
   1105c:	beq	11090 <rb_ssl_tryconn+0x48>
   11060:	ldr	r0, [r5, #48]	; 0x30
   11064:	ldr	r2, [r4]
   11068:	str	r2, [r0, #260]	; 0x104
   1106c:	ldr	r2, [r4, #4]
   11070:	str	r2, [r0, #264]	; 0x108
   11074:	mov	r0, r5
   11078:	bl	cfb0 <rb_connect_callback>
   1107c:	cmp	r4, #0
   11080:	beq	110d0 <rb_ssl_tryconn+0x88>
   11084:	mov	r0, r4
   11088:	pop	{r4, r5, fp, lr}
   1108c:	b	4f94 <free@plt>
   11090:	ldrb	r0, [r5, #17]
   11094:	mov	r3, r4
   11098:	orr	r0, r0, #32
   1109c:	strb	r0, [r5, #17]
   110a0:	mov	r0, r5
   110a4:	ldr	r1, [r4, #8]
   110a8:	ldr	r2, [pc, #36]	; 110d4 <rb_ssl_tryconn+0x8c>
   110ac:	add	r2, pc, r2
   110b0:	bl	4cd0 <rb_settimeout@plt>
   110b4:	mov	r0, r5
   110b8:	mov	r1, #1
   110bc:	bl	10ce4 <rb_ssl_init_fd>
   110c0:	mov	r0, r5
   110c4:	mov	r1, r4
   110c8:	pop	{r4, r5, fp, lr}
   110cc:	b	111c0 <rb_ssl_connect_common>
   110d0:	pop	{r4, r5, fp, pc}
   110d4:	.word	0x000000cc

000110d8 <rb_ssl_start_connected>:
   110d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   110dc:	add	fp, sp, #24
   110e0:	cmp	r0, #0
   110e4:	beq	11174 <rb_ssl_start_connected+0x9c>
   110e8:	mov	r5, r1
   110ec:	mov	r4, r0
   110f0:	mov	r0, #1
   110f4:	mov	r1, #12
   110f8:	mov	r8, r3
   110fc:	mov	r7, r2
   11100:	bl	4e98 <calloc@plt>
   11104:	cmp	r0, #0
   11108:	beq	11178 <rb_ssl_start_connected+0xa0>
   1110c:	mov	r6, r0
   11110:	stm	r0, {r5, r7, r8}
   11114:	mov	r0, #1
   11118:	mov	r1, #268	; 0x10c
   1111c:	bl	4e98 <calloc@plt>
   11120:	cmp	r0, #0
   11124:	beq	11178 <rb_ssl_start_connected+0xa0>
   11128:	str	r0, [r4, #48]	; 0x30
   1112c:	str	r5, [r0, #260]	; 0x104
   11130:	str	r7, [r0, #264]	; 0x108
   11134:	mov	r1, r8
   11138:	mov	r3, r6
   1113c:	ldrb	r0, [r4, #17]
   11140:	orr	r0, r0, #32
   11144:	strb	r0, [r4, #17]
   11148:	mov	r0, r4
   1114c:	ldr	r2, [pc, #40]	; 1117c <rb_ssl_start_connected+0xa4>
   11150:	add	r2, pc, r2
   11154:	bl	4cd0 <rb_settimeout@plt>
   11158:	mov	r0, r4
   1115c:	mov	r1, #1
   11160:	bl	10ce4 <rb_ssl_init_fd>
   11164:	mov	r0, r4
   11168:	mov	r1, r6
   1116c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11170:	b	111c0 <rb_ssl_connect_common>
   11174:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11178:	bl	5204 <rb_outofmemory@plt>
   1117c:	.word	0x00000028

00011180 <rb_ssl_tryconn_timeout_cb>:
   11180:	push	{r4, sl, fp, lr}
   11184:	add	fp, sp, #8
   11188:	mov	r4, r1
   1118c:	ldr	r1, [r0, #48]	; 0x30
   11190:	ldr	r2, [r4]
   11194:	str	r2, [r1, #260]	; 0x104
   11198:	ldr	r2, [r4, #4]
   1119c:	str	r2, [r1, #264]	; 0x108
   111a0:	mov	r1, #3
   111a4:	bl	cfb0 <rb_connect_callback>
   111a8:	cmp	r4, #0
   111ac:	beq	111bc <rb_ssl_tryconn_timeout_cb+0x3c>
   111b0:	mov	r0, r4
   111b4:	pop	{r4, sl, fp, lr}
   111b8:	b	4f94 <free@plt>
   111bc:	pop	{r4, sl, fp, pc}

000111c0 <rb_ssl_connect_common>:
   111c0:	push	{r4, r5, r6, r7, fp, lr}
   111c4:	add	fp, sp, #16
   111c8:	mov	r4, r1
   111cc:	mov	r5, r0
   111d0:	bl	4ce8 <ERR_get_error@plt>
   111d4:	cmp	r0, #0
   111d8:	bne	111d0 <rb_ssl_connect_common+0x10>
   111dc:	ldr	r0, [r5, #56]	; 0x38
   111e0:	bl	5054 <SSL_do_handshake@plt>
   111e4:	mov	r7, r0
   111e8:	ldr	r0, [r5, #56]	; 0x38
   111ec:	mov	r1, r7
   111f0:	bl	5504 <SSL_get_error@plt>
   111f4:	cmp	r7, #1
   111f8:	bne	11250 <rb_ssl_connect_common+0x90>
   111fc:	ldr	r0, [r5, #60]	; 0x3c
   11200:	mov	r1, #0
   11204:	mov	r2, #0
   11208:	mov	r3, #0
   1120c:	add	r0, r0, #1
   11210:	str	r0, [r5, #60]	; 0x3c
   11214:	mov	r0, r5
   11218:	bl	4cd0 <rb_settimeout@plt>
   1121c:	mov	r0, r5
   11220:	mov	r1, #3
   11224:	mov	r2, #0
   11228:	mov	r3, #0
   1122c:	bl	4d6c <rb_setselect@plt>
   11230:	ldr	r0, [r5, #48]	; 0x30
   11234:	ldr	r1, [r4]
   11238:	str	r1, [r0, #260]	; 0x104
   1123c:	ldr	r1, [r4, #4]
   11240:	str	r1, [r0, #264]	; 0x108
   11244:	mov	r0, r5
   11248:	mov	r1, #0
   1124c:	b	11298 <rb_ssl_connect_common+0xd8>
   11250:	mov	r6, r0
   11254:	cmn	r7, #1
   11258:	cmpeq	r6, #2
   1125c:	beq	112b0 <rb_ssl_connect_common+0xf0>
   11260:	cmn	r7, #1
   11264:	cmpeq	r6, #3
   11268:	beq	112c4 <rb_ssl_connect_common+0x104>
   1126c:	bl	5540 <__errno_location@plt>
   11270:	mov	r1, #5
   11274:	str	r1, [r0]
   11278:	str	r6, [r5, #64]	; 0x40
   1127c:	ldr	r0, [r5, #48]	; 0x30
   11280:	ldr	r1, [r4]
   11284:	str	r1, [r0, #260]	; 0x104
   11288:	ldr	r1, [r4, #4]
   1128c:	str	r1, [r0, #264]	; 0x108
   11290:	mov	r0, r5
   11294:	mov	r1, #6
   11298:	bl	cfb0 <rb_connect_callback>
   1129c:	cmp	r4, #0
   112a0:	beq	112e0 <rb_ssl_connect_common+0x120>
   112a4:	mov	r0, r4
   112a8:	pop	{r4, r5, r6, r7, fp, lr}
   112ac:	b	4f94 <free@plt>
   112b0:	ldr	r2, [pc, #44]	; 112e4 <rb_ssl_connect_common+0x124>
   112b4:	mov	r0, r5
   112b8:	mov	r1, #1
   112bc:	add	r2, pc, r2
   112c0:	b	112d4 <rb_ssl_connect_common+0x114>
   112c4:	ldr	r2, [pc, #28]	; 112e8 <rb_ssl_connect_common+0x128>
   112c8:	mov	r0, r5
   112cc:	mov	r1, #2
   112d0:	add	r2, pc, r2
   112d4:	mov	r3, r4
   112d8:	pop	{r4, r5, r6, r7, fp, lr}
   112dc:	b	4d6c <rb_setselect@plt>
   112e0:	pop	{r4, r5, r6, r7, fp, pc}
   112e4:	.word	0xfffffefc
   112e8:	.word	0xfffffee8

000112ec <rb_event_add>:
   112ec:	push	{r4, r5, r6, sl, fp, lr}
   112f0:	add	fp, sp, #16
   112f4:	sub	sp, sp, #8
   112f8:	mov	r4, r2
   112fc:	mov	r5, r1
   11300:	mov	r6, r0
   11304:	cmp	r3, #0
   11308:	ble	11328 <rb_event_add+0x3c>
   1130c:	mov	r0, r6
   11310:	mov	r1, r5
   11314:	mov	r2, r4
   11318:	str	r3, [sp]
   1131c:	bl	11348 <rb_event_add_common>
   11320:	sub	sp, fp, #16
   11324:	pop	{r4, r5, r6, sl, fp, pc}
   11328:	ldr	r0, [pc, #20]	; 11344 <rb_event_add+0x58>
   1132c:	mov	r1, r6
   11330:	mov	r2, r3
   11334:	add	r0, pc, r0
   11338:	bl	51a4 <rb_lib_log@plt>
   1133c:	mov	r3, #1
   11340:	b	1130c <rb_event_add+0x20>
   11344:	.word	0x00009381

00011348 <rb_event_add_common>:
   11348:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1134c:	add	fp, sp, #24
   11350:	mov	r6, r1
   11354:	mov	r7, r0
   11358:	mov	r0, #1
   1135c:	mov	r1, #48	; 0x30
   11360:	mov	r4, r3
   11364:	mov	r8, r2
   11368:	bl	4e98 <calloc@plt>
   1136c:	cmp	r0, #0
   11370:	beq	1144c <rb_event_add_common+0x104>
   11374:	mov	r5, r0
   11378:	str	r6, [r0, #12]
   1137c:	mov	r0, #33	; 0x21
   11380:	bl	5228 <malloc@plt>
   11384:	cmp	r0, #0
   11388:	beq	1144c <rb_event_add_common+0x104>
   1138c:	ldr	r9, [fp, #8]
   11390:	mov	r1, r7
   11394:	mov	r2, #33	; 0x21
   11398:	mov	r6, r0
   1139c:	bl	4f4c <rb_strlcpy@plt>
   113a0:	str	r8, [r5, #16]
   113a4:	str	r6, [r5, #20]
   113a8:	bl	5084 <rb_current_time@plt>
   113ac:	mov	r1, #0
   113b0:	add	r0, r0, r4
   113b4:	str	r1, [r5, #44]	; 0x2c
   113b8:	str	r9, [r5, #24]
   113bc:	str	r0, [r5, #28]
   113c0:	str	r4, [r5, #32]
   113c4:	ldr	r1, [pc, #132]	; 11450 <rb_event_add_common+0x108>
   113c8:	ldr	r1, [pc, r1]
   113cc:	cmp	r0, r1
   113d0:	blt	113dc <rb_event_add_common+0x94>
   113d4:	cmn	r1, #1
   113d8:	bne	113e8 <rb_event_add_common+0xa0>
   113dc:	ldr	r1, [pc, #112]	; 11454 <rb_event_add_common+0x10c>
   113e0:	add	r1, pc, r1
   113e4:	str	r0, [r1]
   113e8:	ldr	r1, [pc, #104]	; 11458 <rb_event_add_common+0x110>
   113ec:	mov	r0, #0
   113f0:	ldr	r1, [pc, r1]
   113f4:	str	r5, [r5]
   113f8:	stmib	r5, {r0, r1}
   113fc:	ldr	r0, [pc, #88]	; 1145c <rb_event_add_common+0x114>
   11400:	cmp	r1, #0
   11404:	add	r0, pc, r0
   11408:	beq	11418 <rb_event_add_common+0xd0>
   1140c:	add	r1, r1, #4
   11410:	str	r5, [r1]
   11414:	b	11428 <rb_event_add_common+0xe0>
   11418:	mov	r1, r0
   1141c:	ldr	r2, [r1, #4]!
   11420:	cmp	r2, #0
   11424:	streq	r5, [r1]
   11428:	str	r5, [r0]
   1142c:	ldr	r1, [r0, #8]
   11430:	add	r1, r1, #1
   11434:	str	r1, [r0, #8]
   11438:	mov	r0, r5
   1143c:	mov	r1, r4
   11440:	bl	ed1c <rb_io_sched_event>
   11444:	mov	r0, r5
   11448:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1144c:	bl	5204 <rb_outofmemory@plt>
   11450:	.word	0x0001b084
   11454:	.word	0x0001b06c
   11458:	.word	0x0002d9a8
   1145c:	.word	0x0002d994

00011460 <rb_event_addonce>:
   11460:	push	{r4, r5, r6, sl, fp, lr}
   11464:	add	fp, sp, #16
   11468:	sub	sp, sp, #8
   1146c:	mov	r4, r2
   11470:	mov	r5, r1
   11474:	mov	r6, r0
   11478:	cmp	r3, #0
   1147c:	ble	114a0 <rb_event_addonce+0x40>
   11480:	mov	r0, #0
   11484:	mov	r1, r5
   11488:	mov	r2, r4
   1148c:	str	r0, [sp]
   11490:	mov	r0, r6
   11494:	bl	11348 <rb_event_add_common>
   11498:	sub	sp, fp, #16
   1149c:	pop	{r4, r5, r6, sl, fp, pc}
   114a0:	ldr	r0, [pc, #20]	; 114bc <rb_event_addonce+0x5c>
   114a4:	mov	r1, r6
   114a8:	mov	r2, r3
   114ac:	add	r0, pc, r0
   114b0:	bl	51a4 <rb_lib_log@plt>
   114b4:	mov	r3, #1
   114b8:	b	11480 <rb_event_addonce+0x20>
   114bc:	.word	0x0000924d

000114c0 <rb_event_delete>:
   114c0:	cmp	r0, #0
   114c4:	bxeq	lr
   114c8:	mov	r1, #1
   114cc:	str	r1, [r0, #44]	; 0x2c
   114d0:	b	ed88 <rb_io_unsched_event>

000114d4 <rb_event_find_delete>:
   114d4:	ldr	r3, [pc, #60]	; 11518 <rb_event_find_delete+0x44>
   114d8:	ldr	r3, [pc, r3]
   114dc:	b	114e4 <rb_event_find_delete+0x10>
   114e0:	ldr	r3, [r3, #8]
   114e4:	cmp	r3, #0
   114e8:	bxeq	lr
   114ec:	ldr	ip, [r3]
   114f0:	ldr	r2, [ip, #12]
   114f4:	cmp	r2, r0
   114f8:	bne	114e0 <rb_event_find_delete+0xc>
   114fc:	ldr	r2, [ip, #16]
   11500:	cmp	r2, r1
   11504:	bne	114e0 <rb_event_find_delete+0xc>
   11508:	mov	r0, #1
   1150c:	str	r0, [ip, #44]	; 0x2c
   11510:	mov	r0, ip
   11514:	b	ed88 <rb_io_unsched_event>
   11518:	.word	0x0002d8c0

0001151c <rb_event_addish>:
   1151c:	push	{r4, r5, r6, r7, fp, lr}
   11520:	add	fp, sp, #16
   11524:	sub	sp, sp, #8
   11528:	mov	r6, r3
   1152c:	cmp	r3, #0
   11530:	mov	r4, r2
   11534:	mov	r5, r1
   11538:	mov	r7, r0
   1153c:	rsbmi	r6, r6, #0
   11540:	cmp	r6, #2
   11544:	rsbgt	r6, r6, #0
   11548:	cmn	r6, #1
   1154c:	mov	r3, r6
   11550:	bgt	115a0 <rb_event_addish+0x84>
   11554:	bl	539c <rand@plt>
   11558:	movw	r1, #19923	; 0x4dd3
   1155c:	movt	r1, #4194	; 0x1062
   11560:	smmul	r2, r0, r1
   11564:	asr	r3, r2, #6
   11568:	add	r2, r3, r2, lsr #31
   1156c:	mov	r3, #1000	; 0x3e8
   11570:	mls	r0, r2, r3, r0
   11574:	mov	r2, #0
   11578:	movw	r3, #21846	; 0x5556
   1157c:	sub	r2, r2, r6, lsl #1
   11580:	movt	r3, #21845	; 0x5555
   11584:	smmul	r2, r2, r3
   11588:	add	r2, r2, r2, lsr #31
   1158c:	mul	r0, r0, r2
   11590:	smmul	r0, r0, r1
   11594:	asr	r1, r0, #6
   11598:	add	r0, r1, r0, lsr #31
   1159c:	add	r3, r0, r2
   115a0:	mov	r0, r7
   115a4:	mov	r1, r5
   115a8:	mov	r2, r4
   115ac:	str	r6, [sp]
   115b0:	bl	11348 <rb_event_add_common>
   115b4:	sub	sp, fp, #16
   115b8:	pop	{r4, r5, r6, r7, fp, pc}

000115bc <rb_run_one_event>:
   115bc:	push	{r4, r5, r6, sl, fp, lr}
   115c0:	add	fp, sp, #16
   115c4:	mov	r4, r0
   115c8:	ldr	r1, [r0, #20]
   115cc:	ldr	r0, [pc, #196]	; 11698 <rb_run_one_event+0xdc>
   115d0:	mov	r2, #33	; 0x21
   115d4:	add	r0, pc, r0
   115d8:	bl	4f4c <rb_strlcpy@plt>
   115dc:	ldr	r1, [r4, #12]
   115e0:	ldr	r0, [r4, #16]
   115e4:	blx	r1
   115e8:	ldr	r0, [r4, #24]
   115ec:	cmp	r0, #0
   115f0:	beq	11684 <rb_run_one_event+0xc8>
   115f4:	bl	5084 <rb_current_time@plt>
   115f8:	ldr	r6, [r4, #24]
   115fc:	mov	r5, r0
   11600:	cmn	r6, #1
   11604:	bgt	11654 <rb_run_one_event+0x98>
   11608:	bl	539c <rand@plt>
   1160c:	movw	r1, #19923	; 0x4dd3
   11610:	movt	r1, #4194	; 0x1062
   11614:	smmul	r2, r0, r1
   11618:	asr	r3, r2, #6
   1161c:	add	r2, r3, r2, lsr #31
   11620:	mov	r3, #1000	; 0x3e8
   11624:	mls	r0, r2, r3, r0
   11628:	mov	r2, #0
   1162c:	movw	r3, #21846	; 0x5556
   11630:	sub	r2, r2, r6, lsl #1
   11634:	movt	r3, #21845	; 0x5555
   11638:	smmul	r2, r2, r3
   1163c:	add	r2, r2, r2, lsr #31
   11640:	mul	r0, r0, r2
   11644:	smmul	r0, r0, r1
   11648:	asr	r1, r0, #6
   1164c:	add	r0, r1, r0, lsr #31
   11650:	add	r6, r0, r2
   11654:	add	r0, r6, r5
   11658:	str	r0, [r4, #28]
   1165c:	ldr	r1, [pc, #56]	; 1169c <rb_run_one_event+0xe0>
   11660:	ldr	r1, [pc, r1]
   11664:	cmp	r0, r1
   11668:	blt	11674 <rb_run_one_event+0xb8>
   1166c:	cmn	r1, #1
   11670:	popne	{r4, r5, r6, sl, fp, pc}
   11674:	ldr	r1, [pc, #36]	; 116a0 <rb_run_one_event+0xe4>
   11678:	add	r1, pc, r1
   1167c:	str	r0, [r1]
   11680:	pop	{r4, r5, r6, sl, fp, pc}
   11684:	mov	r0, #1
   11688:	str	r0, [r4, #44]	; 0x2c
   1168c:	mov	r0, r4
   11690:	pop	{r4, r5, r6, sl, fp, lr}
   11694:	b	ed88 <rb_io_unsched_event>
   11698:	.word	0x0002d7a0
   1169c:	.word	0x0001adec
   116a0:	.word	0x0001add4

000116a4 <rb_event_run>:
   116a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116a8:	add	fp, sp, #28
   116ac:	sub	sp, sp, #4
   116b0:	bl	ede8 <rb_io_supports_event>
   116b4:	cmp	r0, #0
   116b8:	beq	116c4 <rb_event_run+0x20>
   116bc:	sub	sp, fp, #28
   116c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116c4:	ldr	r9, [pc, #384]	; 1184c <rb_event_run+0x1a8>
   116c8:	mvn	r0, #0
   116cc:	add	r9, pc, r9
   116d0:	str	r0, [r9]
   116d4:	ldr	r4, [pc, #372]	; 11850 <rb_event_run+0x1ac>
   116d8:	ldr	r4, [pc, r4]
   116dc:	cmp	r4, #0
   116e0:	beq	116bc <rb_event_run+0x18>
   116e4:	ldr	r7, [pc, #360]	; 11854 <rb_event_run+0x1b0>
   116e8:	mov	sl, #0
   116ec:	add	r7, pc, r7
   116f0:	b	11700 <rb_event_run+0x5c>
   116f4:	str	r0, [r9]
   116f8:	cmp	r4, #0
   116fc:	beq	116bc <rb_event_run+0x18>
   11700:	ldr	r5, [r4]
   11704:	ldr	r4, [r4, #8]
   11708:	ldr	r0, [r5, #44]	; 0x2c
   1170c:	cmp	r0, #0
   11710:	beq	11730 <rb_event_run+0x8c>
   11714:	ldr	r0, [r5, #8]
   11718:	ldr	r1, [r5, #4]
   1171c:	cmp	r0, #0
   11720:	beq	11748 <rb_event_run+0xa4>
   11724:	str	r1, [r0, #4]
   11728:	ldr	r1, [r5, #4]
   1172c:	b	1174c <rb_event_run+0xa8>
   11730:	ldr	r6, [r5, #28]
   11734:	bl	5084 <rb_current_time@plt>
   11738:	cmp	r6, r0
   1173c:	ble	11794 <rb_event_run+0xf0>
   11740:	ldr	r0, [r5, #28]
   11744:	b	11828 <rb_event_run+0x184>
   11748:	str	r1, [r7, #4]
   1174c:	cmp	r1, #0
   11750:	mov	r2, r7
   11754:	addne	r2, r1, #8
   11758:	str	r0, [r2]
   1175c:	str	sl, [r5, #4]
   11760:	str	sl, [r5, #8]
   11764:	ldr	r0, [r7, #8]
   11768:	sub	r0, r0, #1
   1176c:	str	r0, [r7, #8]
   11770:	ldr	r0, [r5, #20]
   11774:	cmp	r0, #0
   11778:	beq	11780 <rb_event_run+0xdc>
   1177c:	bl	4f94 <free@plt>
   11780:	mov	r0, r5
   11784:	bl	4f94 <free@plt>
   11788:	cmp	r4, #0
   1178c:	bne	11700 <rb_event_run+0x5c>
   11790:	b	116bc <rb_event_run+0x18>
   11794:	ldr	r1, [r5, #20]
   11798:	ldr	r0, [pc, #184]	; 11858 <rb_event_run+0x1b4>
   1179c:	mov	r2, #33	; 0x21
   117a0:	add	r0, pc, r0
   117a4:	bl	4f4c <rb_strlcpy@plt>
   117a8:	ldr	r1, [r5, #12]
   117ac:	ldr	r0, [r5, #16]
   117b0:	blx	r1
   117b4:	ldr	r0, [r5, #24]
   117b8:	cmp	r0, #0
   117bc:	beq	11714 <rb_event_run+0x70>
   117c0:	bl	5084 <rb_current_time@plt>
   117c4:	ldr	r8, [r5, #24]
   117c8:	mov	r6, r0
   117cc:	cmn	r8, #1
   117d0:	bgt	11820 <rb_event_run+0x17c>
   117d4:	bl	539c <rand@plt>
   117d8:	movw	r1, #19923	; 0x4dd3
   117dc:	movt	r1, #4194	; 0x1062
   117e0:	mov	r3, r1
   117e4:	smmul	r1, r0, r1
   117e8:	asr	r2, r1, #6
   117ec:	add	r1, r2, r1, lsr #31
   117f0:	mov	r2, #1000	; 0x3e8
   117f4:	mls	r0, r1, r2, r0
   117f8:	movw	r2, #21846	; 0x5556
   117fc:	sub	r1, sl, r8, lsl #1
   11800:	movt	r2, #21845	; 0x5555
   11804:	smmul	r1, r1, r2
   11808:	add	r1, r1, r1, lsr #31
   1180c:	mul	r0, r0, r1
   11810:	smmul	r0, r0, r3
   11814:	asr	r2, r0, #6
   11818:	add	r0, r2, r0, lsr #31
   1181c:	add	r8, r0, r1
   11820:	add	r0, r8, r6
   11824:	str	r0, [r5, #28]
   11828:	ldr	r1, [pc, #44]	; 1185c <rb_event_run+0x1b8>
   1182c:	ldr	r1, [pc, r1]
   11830:	cmp	r0, r1
   11834:	blt	116f4 <rb_event_run+0x50>
   11838:	cmn	r1, #1
   1183c:	streq	r0, [r9]
   11840:	cmp	r4, #0
   11844:	bne	11700 <rb_event_run+0x5c>
   11848:	b	116bc <rb_event_run+0x18>
   1184c:	.word	0x0001ad80
   11850:	.word	0x0002d6c0
   11854:	.word	0x0002d6ac
   11858:	.word	0x0002d5d4
   1185c:	.word	0x0001ac20

00011860 <rb_event_io_register_all>:
   11860:	push	{r4, sl, fp, lr}
   11864:	add	fp, sp, #8
   11868:	bl	ede8 <rb_io_supports_event>
   1186c:	cmp	r0, #0
   11870:	popeq	{r4, sl, fp, pc}
   11874:	ldr	r4, [pc, #36]	; 118a0 <rb_event_io_register_all+0x40>
   11878:	ldr	r4, [pc, r4]
   1187c:	cmp	r4, #0
   11880:	beq	1189c <rb_event_io_register_all+0x3c>
   11884:	ldr	r0, [r4]
   11888:	ldr	r1, [r0, #32]
   1188c:	bl	ed1c <rb_io_sched_event>
   11890:	ldr	r4, [r4, #8]
   11894:	cmp	r4, #0
   11898:	bne	11884 <rb_event_io_register_all+0x24>
   1189c:	pop	{r4, sl, fp, pc}
   118a0:	.word	0x0002d520

000118a4 <rb_event_init>:
   118a4:	ldr	r0, [pc, #16]	; 118bc <rb_event_init+0x18>
   118a8:	ldr	r1, [pc, #16]	; 118c0 <rb_event_init+0x1c>
   118ac:	mov	r2, #33	; 0x21
   118b0:	add	r0, pc, r0
   118b4:	add	r1, pc, r1
   118b8:	b	4f4c <rb_strlcpy@plt>
   118bc:	.word	0x0002d4c4
   118c0:	.word	0x00008e87

000118c4 <rb_dump_events>:
   118c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c8:	add	fp, sp, #28
   118cc:	sub	sp, sp, #524	; 0x20c
   118d0:	ldr	r2, [pc, #180]	; 1198c <rb_dump_events+0xc8>
   118d4:	ldr	r3, [pc, #180]	; 11990 <rb_dump_events+0xcc>
   118d8:	add	r6, sp, #8
   118dc:	mov	r9, r1
   118e0:	mov	sl, r0
   118e4:	mov	r1, #512	; 0x200
   118e8:	mov	r0, r6
   118ec:	add	r2, pc, r2
   118f0:	add	r3, pc, r3
   118f4:	bl	5408 <snprintf@plt>
   118f8:	mov	r0, r6
   118fc:	mov	r1, r9
   11900:	blx	sl
   11904:	ldr	r1, [pc, #136]	; 11994 <rb_dump_events+0xd0>
   11908:	mov	r0, r6
   1190c:	mov	r2, #512	; 0x200
   11910:	add	r1, pc, r1
   11914:	bl	4f4c <rb_strlcpy@plt>
   11918:	mov	r0, r6
   1191c:	mov	r1, r9
   11920:	blx	sl
   11924:	ldr	r4, [pc, #108]	; 11998 <rb_dump_events+0xd4>
   11928:	ldr	r4, [pc, r4]
   1192c:	cmp	r4, #0
   11930:	beq	11984 <rb_dump_events+0xc0>
   11934:	add	r6, sp, #8
   11938:	ldr	r5, [r4]
   1193c:	ldr	r7, [r5, #20]
   11940:	ldr	r8, [r5, #28]
   11944:	bl	5084 <rb_current_time@plt>
   11948:	sub	r0, r8, r0
   1194c:	ldr	r1, [r5, #24]
   11950:	mov	r3, r7
   11954:	stm	sp, {r0, r1}
   11958:	mov	r0, r6
   1195c:	mov	r1, #512	; 0x200
   11960:	ldr	r2, [pc, #52]	; 1199c <rb_dump_events+0xd8>
   11964:	add	r2, pc, r2
   11968:	bl	5408 <snprintf@plt>
   1196c:	mov	r0, r6
   11970:	mov	r1, r9
   11974:	blx	sl
   11978:	ldr	r4, [r4, #8]
   1197c:	cmp	r4, #0
   11980:	bne	11938 <rb_dump_events+0x74>
   11984:	sub	sp, fp, #28
   11988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1198c:	.word	0x00008e54
   11990:	.word	0x0002d484
   11994:	.word	0x00008e46
   11998:	.word	0x0002d470
   1199c:	.word	0x00008e1e

000119a0 <rb_set_back_events>:
   119a0:	ldr	r1, [pc, #40]	; 119d0 <rb_set_back_events+0x30>
   119a4:	ldr	r1, [pc, r1]
   119a8:	b	119c4 <rb_set_back_events+0x24>
   119ac:	ldr	r2, [r1]
   119b0:	ldr	r3, [r2, #28]
   119b4:	subs	r3, r3, r0
   119b8:	movle	r3, #0
   119bc:	str	r3, [r2, #28]
   119c0:	ldr	r1, [r1, #8]
   119c4:	cmp	r1, #0
   119c8:	bxeq	lr
   119cc:	b	119ac <rb_set_back_events+0xc>
   119d0:	.word	0x0002d3f4

000119d4 <rb_event_update>:
   119d4:	push	{r4, r5, fp, lr}
   119d8:	add	fp, sp, #8
   119dc:	cmp	r0, #0
   119e0:	beq	11a64 <rb_event_update+0x90>
   119e4:	mov	r5, r1
   119e8:	mov	r4, r0
   119ec:	cmn	r1, #1
   119f0:	str	r1, [r0, #24]
   119f4:	bgt	11a44 <rb_event_update+0x70>
   119f8:	bl	539c <rand@plt>
   119fc:	movw	r1, #19923	; 0x4dd3
   11a00:	movt	r1, #4194	; 0x1062
   11a04:	smmul	r2, r0, r1
   11a08:	asr	r3, r2, #6
   11a0c:	add	r2, r3, r2, lsr #31
   11a10:	mov	r3, #1000	; 0x3e8
   11a14:	mls	r0, r2, r3, r0
   11a18:	mov	r2, #0
   11a1c:	movw	r3, #21846	; 0x5556
   11a20:	sub	r2, r2, r5, lsl #1
   11a24:	movt	r3, #21845	; 0x5555
   11a28:	smmul	r2, r2, r3
   11a2c:	add	r2, r2, r2, lsr #31
   11a30:	mul	r0, r0, r2
   11a34:	smmul	r0, r0, r1
   11a38:	asr	r1, r0, #6
   11a3c:	add	r0, r1, r0, lsr #31
   11a40:	add	r5, r0, r2
   11a44:	bl	5084 <rb_current_time@plt>
   11a48:	ldr	r1, [r4, #28]
   11a4c:	add	r0, r0, r5
   11a50:	cmp	r0, r1
   11a54:	popge	{r4, r5, fp, pc}
   11a58:	bl	5084 <rb_current_time@plt>
   11a5c:	add	r0, r0, r5
   11a60:	str	r0, [r4, #28]
   11a64:	pop	{r4, r5, fp, pc}

00011a68 <rb_event_next>:
   11a68:	ldr	r0, [pc, #4]	; 11a74 <rb_event_next+0xc>
   11a6c:	ldr	r0, [pc, r0]
   11a70:	bx	lr
   11a74:	.word	0x0001a9e0

00011a78 <rb_ctime>:
   11a78:	push	{r4, r5, r6, r7, fp, lr}
   11a7c:	add	fp, sp, #16
   11a80:	sub	sp, sp, #72	; 0x48
   11a84:	mov	r6, r1
   11a88:	str	r0, [fp, #-20]	; 0xffffffec
   11a8c:	sub	r0, fp, #20
   11a90:	add	r1, sp, #24
   11a94:	mov	r7, r2
   11a98:	bl	5270 <gmtime_r@plt>
   11a9c:	ldr	r5, [pc, #144]	; 11b34 <rb_ctime+0xbc>
   11aa0:	cmp	r6, #0
   11aa4:	movweq	r7, #128	; 0x80
   11aa8:	add	r5, pc, r5
   11aac:	movne	r5, r6
   11ab0:	cmp	r0, #0
   11ab4:	beq	11b1c <rb_ctime+0xa4>
   11ab8:	ldm	r0, {r1, r2, r3, r6, ip}
   11abc:	ldr	r4, [r0, #20]
   11ac0:	ldr	r0, [r0, #24]
   11ac4:	str	r2, [sp, #12]
   11ac8:	str	r3, [sp, #8]
   11acc:	str	r6, [sp, #4]
   11ad0:	str	r1, [sp, #16]
   11ad4:	movw	r1, #1900	; 0x76c
   11ad8:	add	r1, r4, r1
   11adc:	str	r1, [sp, #20]
   11ae0:	ldr	r1, [pc, #84]	; 11b3c <rb_ctime+0xc4>
   11ae4:	add	r1, pc, r1
   11ae8:	ldr	r1, [r1, ip, lsl #2]
   11aec:	str	r1, [sp]
   11af0:	ldr	r1, [pc, #72]	; 11b40 <rb_ctime+0xc8>
   11af4:	ldr	r2, [pc, #72]	; 11b44 <rb_ctime+0xcc>
   11af8:	add	r1, pc, r1
   11afc:	add	r2, pc, r2
   11b00:	ldr	r3, [r1, r0, lsl #2]
   11b04:	mov	r0, r5
   11b08:	mov	r1, r7
   11b0c:	bl	5408 <snprintf@plt>
   11b10:	mov	r0, r5
   11b14:	sub	sp, fp, #16
   11b18:	pop	{r4, r5, r6, r7, fp, pc}
   11b1c:	ldr	r1, [pc, #20]	; 11b38 <rb_ctime+0xc0>
   11b20:	mov	r0, r5
   11b24:	mov	r2, r7
   11b28:	add	r1, pc, r1
   11b2c:	bl	4f4c <rb_strlcpy@plt>
   11b30:	b	11b10 <rb_ctime+0x98>
   11b34:	.word	0x0002d300
   11b38:	.word	0x00008382
   11b3c:	.word	0x0001a388
   11b40:	.word	0x0001a358
   11b44:	.word	0x00008ca9

00011b48 <rb_date>:
   11b48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11b4c:	add	fp, sp, #24
   11b50:	sub	sp, sp, #72	; 0x48
   11b54:	mov	r4, r1
   11b58:	str	r0, [fp, #-28]	; 0xffffffe4
   11b5c:	sub	r0, fp, #28
   11b60:	add	r1, sp, #24
   11b64:	mov	r8, r2
   11b68:	bl	5270 <gmtime_r@plt>
   11b6c:	cmp	r0, #0
   11b70:	beq	11bd4 <rb_date+0x8c>
   11b74:	ldm	r0, {r1, r2, r3, r5, r6, r7}
   11b78:	ldr	r0, [r0, #24]
   11b7c:	str	r2, [sp, #16]
   11b80:	str	r3, [sp, #12]
   11b84:	str	r5, [sp, #4]
   11b88:	str	r1, [sp, #20]
   11b8c:	movw	r1, #1900	; 0x76c
   11b90:	add	r1, r7, r1
   11b94:	str	r1, [sp, #8]
   11b98:	ldr	r1, [pc, #80]	; 11bf0 <rb_date+0xa8>
   11b9c:	add	r1, pc, r1
   11ba0:	ldr	r1, [r1, r6, lsl #2]
   11ba4:	str	r1, [sp]
   11ba8:	ldr	r1, [pc, #68]	; 11bf4 <rb_date+0xac>
   11bac:	ldr	r2, [pc, #68]	; 11bf8 <rb_date+0xb0>
   11bb0:	add	r1, pc, r1
   11bb4:	add	r2, pc, r2
   11bb8:	ldr	r3, [r1, r0, lsl #2]
   11bbc:	mov	r0, r4
   11bc0:	mov	r1, r8
   11bc4:	bl	5408 <snprintf@plt>
   11bc8:	mov	r0, r4
   11bcc:	sub	sp, fp, #24
   11bd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11bd4:	ldr	r1, [pc, #16]	; 11bec <rb_date+0xa4>
   11bd8:	mov	r0, r4
   11bdc:	mov	r2, r8
   11be0:	add	r1, pc, r1
   11be4:	bl	4f4c <rb_strlcpy@plt>
   11be8:	b	11bc8 <rb_date+0x80>
   11bec:	.word	0x000082ca
   11bf0:	.word	0x0001a31c
   11bf4:	.word	0x0001a2ec
   11bf8:	.word	0x00008c0c

00011bfc <rb_current_time>:
   11bfc:	ldr	r0, [pc, #4]	; 11c08 <rb_current_time+0xc>
   11c00:	ldr	r0, [pc, r0]
   11c04:	bx	lr
   11c08:	.word	0x0002d228

00011c0c <rb_current_time_tv>:
   11c0c:	ldr	r0, [pc, #4]	; 11c18 <rb_current_time_tv+0xc>
   11c10:	add	r0, pc, r0
   11c14:	bx	lr
   11c18:	.word	0x0002d218

00011c1c <rb_lib_log>:
   11c1c:	sub	sp, sp, #12
   11c20:	push	{r4, sl, fp, lr}
   11c24:	add	fp, sp, #8
   11c28:	sub	sp, sp, #4
   11c2c:	mov	ip, r0
   11c30:	add	r0, fp, #8
   11c34:	stm	r0, {r1, r2, r3}
   11c38:	ldr	r0, [pc, #72]	; 11c88 <rb_lib_log+0x6c>
   11c3c:	ldr	r0, [pc, r0]
   11c40:	cmp	r0, #0
   11c44:	beq	11c78 <rb_lib_log+0x5c>
   11c48:	add	r3, fp, #8
   11c4c:	mov	r1, #512	; 0x200
   11c50:	mov	r2, ip
   11c54:	str	r3, [sp]
   11c58:	ldr	r4, [pc, #44]	; 11c8c <rb_lib_log+0x70>
   11c5c:	add	r4, pc, r4
   11c60:	mov	r0, r4
   11c64:	bl	4e14 <vsnprintf@plt>
   11c68:	ldr	r1, [pc, #32]	; 11c90 <rb_lib_log+0x74>
   11c6c:	mov	r0, r4
   11c70:	ldr	r1, [pc, r1]
   11c74:	blx	r1
   11c78:	sub	sp, fp, #8
   11c7c:	pop	{r4, sl, fp, lr}
   11c80:	add	sp, sp, #12
   11c84:	bx	lr
   11c88:	.word	0x0002d1f4
   11c8c:	.word	0x0002d1d8
   11c90:	.word	0x0002d1c0

00011c94 <rb_lib_die>:
   11c94:	sub	sp, sp, #12
   11c98:	push	{r4, sl, fp, lr}
   11c9c:	add	fp, sp, #8
   11ca0:	sub	sp, sp, #4
   11ca4:	mov	ip, r0
   11ca8:	add	r0, fp, #8
   11cac:	stm	r0, {r1, r2, r3}
   11cb0:	ldr	r0, [pc, #76]	; 11d04 <rb_lib_die+0x70>
   11cb4:	ldr	r0, [pc, r0]
   11cb8:	cmp	r0, #0
   11cbc:	beq	11d00 <rb_lib_die+0x6c>
   11cc0:	add	r3, fp, #8
   11cc4:	mov	r1, #512	; 0x200
   11cc8:	mov	r2, ip
   11ccc:	str	r3, [sp]
   11cd0:	ldr	r4, [pc, #48]	; 11d08 <rb_lib_die+0x74>
   11cd4:	add	r4, pc, r4
   11cd8:	mov	r0, r4
   11cdc:	bl	4e14 <vsnprintf@plt>
   11ce0:	ldr	r1, [pc, #36]	; 11d0c <rb_lib_die+0x78>
   11ce4:	mov	r0, r4
   11ce8:	ldr	r1, [pc, r1]
   11cec:	blx	r1
   11cf0:	sub	sp, fp, #8
   11cf4:	pop	{r4, sl, fp, lr}
   11cf8:	add	sp, sp, #12
   11cfc:	bx	lr
   11d00:	bl	4cac <abort@plt>
   11d04:	.word	0x0002d380
   11d08:	.word	0x0002d160
   11d0c:	.word	0x0002d34c

00011d10 <rb_lib_restart>:
   11d10:	sub	sp, sp, #12
   11d14:	push	{fp, lr}
   11d18:	mov	fp, sp
   11d1c:	sub	sp, sp, #4
   11d20:	mov	ip, r0
   11d24:	add	r0, fp, #8
   11d28:	stm	r0, {r1, r2, r3}
   11d2c:	ldr	r0, [pc, #64]	; 11d74 <rb_lib_restart+0x64>
   11d30:	ldr	r0, [pc, r0]
   11d34:	cmp	r0, #0
   11d38:	bne	11d40 <rb_lib_restart+0x30>
   11d3c:	bl	4cac <abort@plt>
   11d40:	add	r3, fp, #8
   11d44:	mov	r1, #512	; 0x200
   11d48:	mov	r2, ip
   11d4c:	str	r3, [sp]
   11d50:	ldr	r4, [pc, #32]	; 11d78 <rb_lib_restart+0x68>
   11d54:	add	r4, pc, r4
   11d58:	mov	r0, r4
   11d5c:	bl	4e14 <vsnprintf@plt>
   11d60:	ldr	r1, [pc, #20]	; 11d7c <rb_lib_restart+0x6c>
   11d64:	mov	r0, r4
   11d68:	ldr	r1, [pc, r1]
   11d6c:	blx	r1
   11d70:	bl	4cac <abort@plt>
   11d74:	.word	0x0002d308
   11d78:	.word	0x0002d0e0
   11d7c:	.word	0x0002d2d0

00011d80 <rb_set_time>:
   11d80:	push	{fp, lr}
   11d84:	mov	fp, sp
   11d88:	sub	sp, sp, #8
   11d8c:	mov	r0, sp
   11d90:	mov	r1, #0
   11d94:	bl	4e74 <rb_gettimeofday@plt>
   11d98:	cmn	r0, #1
   11d9c:	beq	11dd4 <rb_set_time+0x54>
   11da0:	ldr	r0, [pc, #84]	; 11dfc <rb_set_time+0x7c>
   11da4:	ldr	r0, [pc, r0]
   11da8:	ldr	r1, [sp]
   11dac:	cmp	r0, r1
   11db0:	ble	11dbc <rb_set_time+0x3c>
   11db4:	sub	r0, r0, r1
   11db8:	bl	119a0 <rb_set_back_events>
   11dbc:	ldm	sp, {r0, r1}
   11dc0:	ldr	r2, [pc, #56]	; 11e00 <rb_set_time+0x80>
   11dc4:	add	r2, pc, r2
   11dc8:	strd	r0, [r2]
   11dcc:	mov	sp, fp
   11dd0:	pop	{fp, pc}
   11dd4:	bl	5540 <__errno_location@plt>
   11dd8:	ldr	r0, [r0]
   11ddc:	bl	4c88 <strerror@plt>
   11de0:	mov	r1, r0
   11de4:	ldr	r0, [pc, #24]	; 11e04 <rb_set_time+0x84>
   11de8:	add	r0, pc, r0
   11dec:	bl	51a4 <rb_lib_log@plt>
   11df0:	ldr	r0, [pc, #16]	; 11e08 <rb_set_time+0x88>
   11df4:	add	r0, pc, r0
   11df8:	bl	52d0 <rb_lib_restart@plt>
   11dfc:	.word	0x0002d084
   11e00:	.word	0x0002d064
   11e04:	.word	0x000089fd
   11e08:	.word	0x00008a04

00011e0c <rb_lib_version>:
   11e0c:	push	{r4, sl, fp, lr}
   11e10:	add	fp, sp, #8
   11e14:	sub	sp, sp, #520	; 0x208
   11e18:	add	r4, sp, #8
   11e1c:	mov	r1, #512	; 0x200
   11e20:	mov	r0, r4
   11e24:	bl	1096c <rb_get_ssl_info>
   11e28:	ldr	r0, [pc, #48]	; 11e60 <rb_lib_version+0x54>
   11e2c:	mov	r1, #640	; 0x280
   11e30:	ldr	r0, [pc, r0]
   11e34:	str	r4, [sp]
   11e38:	ldr	r3, [r0]
   11e3c:	ldr	r4, [pc, #32]	; 11e64 <rb_lib_version+0x58>
   11e40:	ldr	r2, [pc, #32]	; 11e68 <rb_lib_version+0x5c>
   11e44:	add	r4, pc, r4
   11e48:	add	r2, pc, r2
   11e4c:	mov	r0, r4
   11e50:	bl	5408 <snprintf@plt>
   11e54:	mov	r0, r4
   11e58:	sub	sp, fp, #8
   11e5c:	pop	{r4, sl, fp, pc}
   11e60:	.word	0x0001a540
   11e64:	.word	0x0002d1f8
   11e68:	.word	0x000089be

00011e6c <rb_lib_init>:
   11e6c:	push	{r4, r5, r6, r7, fp, lr}
   11e70:	add	fp, sp, #16
   11e74:	mov	r4, r3
   11e78:	mov	r5, r2
   11e7c:	mov	r6, r1
   11e80:	mov	r7, r0
   11e84:	bl	5210 <rb_set_time@plt>
   11e88:	ldr	r0, [pc, #88]	; 11ee8 <rb_lib_init+0x7c>
   11e8c:	add	r0, pc, r0
   11e90:	str	r6, [r0]
   11e94:	ldr	r0, [pc, #80]	; 11eec <rb_lib_init+0x80>
   11e98:	add	r0, pc, r0
   11e9c:	str	r7, [r0]
   11ea0:	ldr	r0, [pc, #72]	; 11ef0 <rb_lib_init+0x84>
   11ea4:	add	r0, pc, r0
   11ea8:	str	r5, [r0]
   11eac:	bl	4eb0 <rb_event_init@plt>
   11eb0:	bl	5258 <rb_init_bh@plt>
   11eb4:	ldr	r1, [fp, #8]
   11eb8:	ldr	r2, [fp, #16]
   11ebc:	mov	r0, r4
   11ec0:	bl	5360 <rb_fdlist_init@plt>
   11ec4:	bl	4c70 <rb_init_netio@plt>
   11ec8:	ldr	r0, [fp, #12]
   11ecc:	bl	5168 <rb_init_rb_dlink_nodes@plt>
   11ed0:	bl	ede8 <rb_io_supports_event>
   11ed4:	cmp	r0, #0
   11ed8:	beq	11ee4 <rb_lib_init+0x78>
   11edc:	pop	{r4, r5, r6, r7, fp, lr}
   11ee0:	b	ee04 <rb_io_init_event>
   11ee4:	pop	{r4, r5, r6, r7, fp, pc}
   11ee8:	.word	0x0002d1ac
   11eec:	.word	0x0002cf98
   11ef0:	.word	0x0002d190

00011ef4 <rb_lib_loop>:
   11ef4:	push	{fp, lr}
   11ef8:	mov	fp, sp
   11efc:	mov	r4, r0
   11f00:	bl	5210 <rb_set_time@plt>
   11f04:	bl	ede8 <rb_io_supports_event>
   11f08:	cmp	r0, #0
   11f0c:	beq	11f1c <rb_lib_loop+0x28>
   11f10:	mvn	r0, #0
   11f14:	bl	4e08 <rb_select@plt>
   11f18:	b	11f10 <rb_lib_loop+0x1c>
   11f1c:	mov	r5, #1000	; 0x3e8
   11f20:	b	11f44 <rb_lib_loop+0x50>
   11f24:	ldr	r1, [pc, #56]	; 11f64 <rb_lib_loop+0x70>
   11f28:	ldr	r1, [pc, r1]
   11f2c:	sub	r1, r0, r1
   11f30:	cmp	r1, #1
   11f34:	mul	r0, r1, r5
   11f38:	movwlt	r0, #1000	; 0x3e8
   11f3c:	bl	4e08 <rb_select@plt>
   11f40:	bl	5240 <rb_event_run@plt>
   11f44:	cmp	r4, #0
   11f48:	mov	r0, r4
   11f4c:	bne	11f3c <rb_lib_loop+0x48>
   11f50:	bl	548c <rb_event_next@plt>
   11f54:	cmp	r0, #1
   11f58:	bge	11f24 <rb_lib_loop+0x30>
   11f5c:	mvn	r0, #0
   11f60:	b	11f3c <rb_lib_loop+0x48>
   11f64:	.word	0x0002cf00

00011f68 <rb_strtok_r>:
   11f68:	b	52c4 <strtok_r@plt>

00011f6c <rb_base64_encode>:
   11f6c:	push	{r4, r5, r6, sl, fp, lr}
   11f70:	add	fp, sp, #16
   11f74:	mov	r4, r0
   11f78:	adds	r0, r1, #2
   11f7c:	bmi	12024 <rb_base64_encode+0xb8>
   11f80:	mov	r6, r1
   11f84:	movw	r1, #43691	; 0xaaab
   11f88:	movt	r1, #43690	; 0xaaaa
   11f8c:	umull	r0, r1, r0, r1
   11f90:	lsr	r0, r1, #1
   11f94:	add	r1, r0, r0, lsl #2
   11f98:	mov	r0, #1
   11f9c:	bl	4e98 <calloc@plt>
   11fa0:	cmp	r0, #0
   11fa4:	beq	1209c <rb_base64_encode+0x130>
   11fa8:	cmp	r6, #3
   11fac:	blt	1202c <rb_base64_encode+0xc0>
   11fb0:	ldr	ip, [pc, #232]	; 120a0 <rb_base64_encode+0x134>
   11fb4:	mov	r1, r0
   11fb8:	add	ip, pc, ip
   11fbc:	ldrb	r3, [r4]
   11fc0:	sub	r6, r6, #3
   11fc4:	cmp	r6, #2
   11fc8:	ldrb	r2, [ip, r3, lsr #2]
   11fcc:	strb	r2, [r1]
   11fd0:	and	r2, r3, #3
   11fd4:	ldrb	r3, [r4, #1]
   11fd8:	lsr	r5, r3, #4
   11fdc:	and	r3, r3, #15
   11fe0:	orr	r2, r5, r2, lsl #4
   11fe4:	ldrb	r2, [ip, r2]
   11fe8:	strb	r2, [r1, #1]
   11fec:	ldrb	r2, [r4, #2]
   11ff0:	add	r4, r4, #3
   11ff4:	and	r5, r2, #63	; 0x3f
   11ff8:	lsr	r2, r2, #6
   11ffc:	orr	r2, r2, r3, lsl #2
   12000:	ldrb	r5, [ip, r5]
   12004:	ldrb	r2, [ip, r2]
   12008:	strb	r5, [r1, #3]
   1200c:	strb	r2, [r1, #2]
   12010:	add	r1, r1, #4
   12014:	bgt	11fbc <rb_base64_encode+0x50>
   12018:	cmp	r6, #0
   1201c:	bne	12038 <rb_base64_encode+0xcc>
   12020:	b	12090 <rb_base64_encode+0x124>
   12024:	mov	r0, #0
   12028:	pop	{r4, r5, r6, sl, fp, pc}
   1202c:	mov	r1, r0
   12030:	cmp	r6, #0
   12034:	beq	12090 <rb_base64_encode+0x124>
   12038:	ldrb	r3, [r4]
   1203c:	ldr	r2, [pc, #96]	; 120a4 <rb_base64_encode+0x138>
   12040:	cmp	r6, #2
   12044:	add	r2, pc, r2
   12048:	ldrb	r5, [r2, r3, lsr #2]
   1204c:	strb	r5, [r1]
   12050:	mov	r5, #48	; 0x30
   12054:	and	r3, r5, r3, lsl #4
   12058:	blt	12074 <rb_base64_encode+0x108>
   1205c:	ldrb	r6, [r4, #1]
   12060:	and	r5, r6, #15
   12064:	orr	r3, r3, r6, lsr #4
   12068:	ldrb	r5, [r2, r5, lsl #2]
   1206c:	strb	r5, [r1, #2]
   12070:	b	1207c <rb_base64_encode+0x110>
   12074:	mov	r6, #61	; 0x3d
   12078:	strb	r6, [r1, #2]
   1207c:	ldrb	r2, [r2, r3]
   12080:	strb	r2, [r1, #1]
   12084:	mov	r2, #61	; 0x3d
   12088:	strb	r2, [r1, #3]
   1208c:	add	r1, r1, #4
   12090:	mov	r2, #0
   12094:	strb	r2, [r1]
   12098:	pop	{r4, r5, r6, sl, fp, pc}
   1209c:	bl	5204 <rb_outofmemory@plt>
   120a0:	.word	0x00008865
   120a4:	.word	0x000087d9

000120a8 <rb_base64_decode>:
   120a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   120ac:	add	fp, sp, #24
   120b0:	mov	r5, r1
   120b4:	mov	r6, r0
   120b8:	add	r1, r1, #1
   120bc:	mov	r0, #1
   120c0:	mov	r8, r2
   120c4:	bl	4e98 <calloc@plt>
   120c8:	cmp	r0, #0
   120cc:	beq	121e4 <rb_base64_decode+0x13c>
   120d0:	ldr	r3, [pc, #272]	; 121e8 <rb_base64_decode+0x140>
   120d4:	mov	r1, #0
   120d8:	mov	ip, #0
   120dc:	add	r3, pc, r3
   120e0:	ldrb	r4, [r6], #1
   120e4:	cmp	r4, #0
   120e8:	beq	121d4 <rb_base64_decode+0x12c>
   120ec:	subs	r5, r5, #1
   120f0:	blt	12190 <rb_base64_decode+0xe8>
   120f4:	cmp	r4, #61	; 0x3d
   120f8:	beq	12190 <rb_base64_decode+0xe8>
   120fc:	add	r7, r3, r4, lsl #1
   12100:	ldrsh	r4, [r7]
   12104:	cmp	r4, #0
   12108:	bmi	120e0 <rb_base64_decode+0x38>
   1210c:	and	r7, ip, #3
   12110:	add	r2, pc, #4
   12114:	ldr	r7, [r2, r7, lsl #2]
   12118:	add	pc, r2, r7
   1211c:	.word	0x00000010
   12120:	.word	0x00000050
   12124:	.word	0x00000020
   12128:	.word	0x00000038
   1212c:	lsl	r2, r4, #2
   12130:	add	ip, ip, #1
   12134:	strb	r2, [r0, r1]
   12138:	b	120e0 <rb_base64_decode+0x38>
   1213c:	add	r2, r1, #1
   12140:	lsl	r7, r4, #6
   12144:	strb	r7, [r0, r2]
   12148:	ldrb	r7, [r0, r1]
   1214c:	orr	r7, r7, r4, lsr #2
   12150:	b	12180 <rb_base64_decode+0xd8>
   12154:	ldrb	r2, [r0, r1]
   12158:	add	ip, ip, #1
   1215c:	orr	r2, r2, r4
   12160:	strb	r2, [r0, r1]
   12164:	add	r1, r1, #1
   12168:	b	120e0 <rb_base64_decode+0x38>
   1216c:	add	r2, r1, #1
   12170:	lsl	r7, r4, #4
   12174:	strb	r7, [r0, r2]
   12178:	ldrb	r7, [r0, r1]
   1217c:	orr	r7, r7, r4, lsr #4
   12180:	strb	r7, [r0, r1]
   12184:	mov	r1, r2
   12188:	add	ip, ip, #1
   1218c:	b	120e0 <rb_base64_decode+0x38>
   12190:	cmp	r4, #61	; 0x3d
   12194:	bne	121d4 <rb_base64_decode+0x12c>
   12198:	and	r2, ip, #3
   1219c:	cmp	r2, #3
   121a0:	beq	121c0 <rb_base64_decode+0x118>
   121a4:	cmp	r2, #2
   121a8:	beq	121c8 <rb_base64_decode+0x120>
   121ac:	cmp	r2, #1
   121b0:	bne	121d4 <rb_base64_decode+0x12c>
   121b4:	bl	4f94 <free@plt>
   121b8:	mov	r0, #0
   121bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   121c0:	mov	r2, r1
   121c4:	b	121cc <rb_base64_decode+0x124>
   121c8:	add	r2, r1, #1
   121cc:	mov	r3, #0
   121d0:	strb	r3, [r0, r2]
   121d4:	mov	r2, #0
   121d8:	strb	r2, [r0, r1]
   121dc:	str	r1, [r8]
   121e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   121e4:	bl	5204 <rb_outofmemory@plt>
   121e8:	.word	0x0000885a

000121ec <rb_outofmemory>:
   121ec:	push	{fp, lr}
   121f0:	mov	fp, sp
   121f4:	ldr	r0, [pc, #48]	; 1222c <rb_outofmemory+0x40>
   121f8:	add	r0, pc, r0
   121fc:	ldrb	r1, [r0]
   12200:	cmp	r1, #1
   12204:	bne	1220c <rb_outofmemory+0x20>
   12208:	bl	4cac <abort@plt>
   1220c:	mov	r1, #1
   12210:	strb	r1, [r0]
   12214:	ldr	r0, [pc, #20]	; 12230 <rb_outofmemory+0x44>
   12218:	add	r0, pc, r0
   1221c:	bl	51a4 <rb_lib_log@plt>
   12220:	ldr	r0, [pc, #12]	; 12234 <rb_outofmemory+0x48>
   12224:	add	r0, pc, r0
   12228:	bl	52d0 <rb_lib_restart@plt>
   1222c:	.word	0x0002d0c4
   12230:	.word	0x0000891e
   12234:	.word	0x00008936

00012238 <rb_linebuf_init>:
   12238:	push	{fp, lr}
   1223c:	mov	fp, sp
   12240:	ldr	r2, [pc, #28]	; 12264 <rb_linebuf_init+0x2c>
   12244:	mov	r1, r0
   12248:	movw	r0, #1036	; 0x40c
   1224c:	add	r2, pc, r2
   12250:	bl	5318 <rb_bh_create@plt>
   12254:	ldr	r1, [pc, #12]	; 12268 <rb_linebuf_init+0x30>
   12258:	add	r1, pc, r1
   1225c:	str	r0, [r1]
   12260:	pop	{fp, pc}
   12264:	.word	0x0000891c
   12268:	.word	0x0002d068

0001226c <rb_linebuf_newbuf>:
   1226c:	vmov.i32	q8, #0	; 0x00000000
   12270:	mov	r1, #12
   12274:	vst1.32	{d16-d17}, [r0], r1
   12278:	vst1.32	{d16-d17}, [r0]
   1227c:	bx	lr

00012280 <rb_linebuf_donebuf>:
   12280:	push	{r4, r5, r6, r7, fp, lr}
   12284:	add	fp, sp, #16
   12288:	mov	r4, r0
   1228c:	ldr	r0, [r0]
   12290:	cmp	r0, #0
   12294:	beq	1235c <rb_linebuf_donebuf+0xdc>
   12298:	ldr	r7, [pc, #192]	; 12360 <rb_linebuf_donebuf+0xe0>
   1229c:	mov	r6, #0
   122a0:	add	r7, pc, r7
   122a4:	b	122b4 <rb_linebuf_donebuf+0x34>
   122a8:	ldr	r0, [r4]
   122ac:	cmp	r0, #0
   122b0:	beq	1235c <rb_linebuf_donebuf+0xdc>
   122b4:	ldr	r1, [r0, #8]
   122b8:	ldr	r5, [r0]
   122bc:	ldr	r2, [r0, #4]
   122c0:	cmp	r1, #0
   122c4:	beq	122d4 <rb_linebuf_donebuf+0x54>
   122c8:	str	r2, [r1, #4]
   122cc:	ldr	r2, [r0, #4]
   122d0:	b	122d8 <rb_linebuf_donebuf+0x58>
   122d4:	str	r2, [r4, #4]
   122d8:	cmp	r2, #0
   122dc:	mov	r3, r4
   122e0:	addne	r3, r2, #8
   122e4:	str	r1, [r3]
   122e8:	str	r6, [r0, #4]
   122ec:	str	r6, [r0, #8]
   122f0:	ldr	r1, [r4, #8]
   122f4:	sub	r1, r1, #1
   122f8:	str	r1, [r4, #8]
   122fc:	bl	50d8 <rb_free_rb_dlink_node@plt>
   12300:	ldr	r1, [r4, #16]
   12304:	ldr	r2, [r4, #24]
   12308:	ldr	r0, [r4, #12]
   1230c:	sub	r1, r1, #1
   12310:	sub	r2, r2, #1
   12314:	str	r1, [r4, #16]
   12318:	ldr	r1, [r5, #1028]	; 0x404
   1231c:	str	r2, [r4, #24]
   12320:	sub	r0, r0, r1
   12324:	str	r0, [r4, #12]
   12328:	ldr	r0, [r5, #1032]	; 0x408
   1232c:	subs	r0, r0, #1
   12330:	str	r0, [r5, #1032]	; 0x408
   12334:	bne	122a8 <rb_linebuf_donebuf+0x28>
   12338:	ldr	r0, [pc, #36]	; 12364 <rb_linebuf_donebuf+0xe4>
   1233c:	mov	r1, r5
   12340:	ldr	r0, [pc, r0]
   12344:	sub	r0, r0, #1
   12348:	str	r0, [r7]
   1234c:	ldr	r0, [pc, #20]	; 12368 <rb_linebuf_donebuf+0xe8>
   12350:	ldr	r0, [pc, r0]
   12354:	bl	515c <rb_bh_free@plt>
   12358:	b	122a8 <rb_linebuf_donebuf+0x28>
   1235c:	pop	{r4, r5, r6, r7, fp, pc}
   12360:	.word	0x0002f028
   12364:	.word	0x0002ef88
   12368:	.word	0x0002cf70

0001236c <rb_linebuf_parse>:
   1236c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12370:	add	fp, sp, #28
   12374:	sub	sp, sp, #4
   12378:	mov	r9, r0
   1237c:	ldr	r0, [r0, #4]
   12380:	mov	r8, r3
   12384:	mov	r5, r2
   12388:	mov	r6, r1
   1238c:	cmp	r0, #0
   12390:	beq	123bc <rb_linebuf_parse+0x50>
   12394:	ldr	r1, [r0]
   12398:	mov	r0, r9
   1239c:	mov	r2, r6
   123a0:	mov	r3, r5
   123a4:	cmp	r8, #0
   123a8:	beq	123cc <rb_linebuf_parse+0x60>
   123ac:	bl	126ec <rb_linebuf_copy_raw>
   123b0:	cmn	r0, #1
   123b4:	bne	123d8 <rb_linebuf_parse+0x6c>
   123b8:	b	124e8 <rb_linebuf_parse+0x17c>
   123bc:	mov	r4, #0
   123c0:	cmp	r5, #1
   123c4:	bge	123f8 <rb_linebuf_parse+0x8c>
   123c8:	b	124ec <rb_linebuf_parse+0x180>
   123cc:	bl	12504 <rb_linebuf_copy_line>
   123d0:	cmn	r0, #1
   123d4:	beq	124e8 <rb_linebuf_parse+0x17c>
   123d8:	mov	r4, #1
   123dc:	cmp	r0, r5
   123e0:	beq	124ec <rb_linebuf_parse+0x180>
   123e4:	add	r6, r6, r0
   123e8:	sub	r5, r5, r0
   123ec:	mov	r4, #1
   123f0:	cmp	r5, #1
   123f4:	blt	124ec <rb_linebuf_parse+0x180>
   123f8:	mov	sl, #0
   123fc:	b	12420 <rb_linebuf_parse+0xb4>
   12400:	bl	12504 <rb_linebuf_copy_line>
   12404:	cmn	r0, #1
   12408:	beq	124e8 <rb_linebuf_parse+0x17c>
   1240c:	sub	r5, r5, r0
   12410:	add	r6, r6, r0
   12414:	add	r4, r4, #1
   12418:	cmp	r5, #0
   1241c:	ble	124ec <rb_linebuf_parse+0x180>
   12420:	ldr	r0, [pc, #208]	; 124f8 <rb_linebuf_parse+0x18c>
   12424:	ldr	r0, [pc, r0]
   12428:	bl	51d4 <rb_bh_alloc@plt>
   1242c:	mov	r7, r0
   12430:	cmp	r0, #0
   12434:	beq	124b8 <rb_linebuf_parse+0x14c>
   12438:	ldr	r0, [pc, #188]	; 124fc <rb_linebuf_parse+0x190>
   1243c:	ldr	r0, [pc, r0]
   12440:	ldr	r1, [pc, #184]	; 12500 <rb_linebuf_parse+0x194>
   12444:	add	r0, r0, #1
   12448:	add	r1, pc, r1
   1244c:	str	r0, [r1]
   12450:	bl	53d8 <rb_make_rb_dlink_node@plt>
   12454:	str	sl, [r0, #8]
   12458:	str	r7, [r0]
   1245c:	ldr	r1, [r9, #4]
   12460:	cmp	r1, #0
   12464:	str	r1, [r0, #4]
   12468:	beq	12478 <rb_linebuf_parse+0x10c>
   1246c:	add	r1, r1, #8
   12470:	str	r0, [r1]
   12474:	b	12484 <rb_linebuf_parse+0x118>
   12478:	ldr	r1, [r9]
   1247c:	cmp	r1, #0
   12480:	beq	124e0 <rb_linebuf_parse+0x174>
   12484:	str	r0, [r9, #4]
   12488:	ldr	r0, [r9, #8]
   1248c:	add	r0, r0, #1
   12490:	str	r0, [r9, #8]
   12494:	ldr	r0, [r7, #1032]	; 0x408
   12498:	add	r0, r0, #1
   1249c:	str	r0, [r7, #1032]	; 0x408
   124a0:	ldr	r0, [r9, #16]
   124a4:	ldr	r1, [r9, #24]
   124a8:	add	r0, r0, #1
   124ac:	str	r0, [r9, #16]
   124b0:	add	r0, r1, #1
   124b4:	str	r0, [r9, #24]
   124b8:	mov	r0, r9
   124bc:	mov	r1, r7
   124c0:	mov	r2, r6
   124c4:	mov	r3, r5
   124c8:	cmp	r8, #0
   124cc:	beq	12400 <rb_linebuf_parse+0x94>
   124d0:	bl	126ec <rb_linebuf_copy_raw>
   124d4:	cmn	r0, #1
   124d8:	bne	1240c <rb_linebuf_parse+0xa0>
   124dc:	b	124e8 <rb_linebuf_parse+0x17c>
   124e0:	mov	r1, r9
   124e4:	b	12470 <rb_linebuf_parse+0x104>
   124e8:	mvn	r4, #0
   124ec:	mov	r0, r4
   124f0:	sub	sp, fp, #28
   124f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f8:	.word	0x0002ce9c
   124fc:	.word	0x0002ee8c
   12500:	.word	0x0002ee80

00012504 <rb_linebuf_copy_line>:
   12504:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12508:	add	fp, sp, #24
   1250c:	mov	r7, #0
   12510:	mov	r8, r0
   12514:	strb	r7, [r1, #1026]	; 0x402
   12518:	ldrb	r0, [r1, #1025]	; 0x401
   1251c:	cmp	r0, #1
   12520:	beq	126e4 <rb_linebuf_copy_line+0x1e0>
   12524:	ldr	r9, [r1, #1028]	; 0x404
   12528:	mov	r4, r1
   1252c:	mov	r7, #0
   12530:	cmp	r3, #0
   12534:	beq	12598 <rb_linebuf_copy_line+0x94>
   12538:	rsb	r0, r3, #0
   1253c:	add	r1, r2, #1
   12540:	ldrb	r5, [r1, #-1]
   12544:	cmp	r5, #13
   12548:	cmpne	r5, #10
   1254c:	beq	12560 <rb_linebuf_copy_line+0x5c>
   12550:	adds	r0, r0, #1
   12554:	add	r1, r1, #1
   12558:	bcc	12540 <rb_linebuf_copy_line+0x3c>
   1255c:	b	12598 <rb_linebuf_copy_line+0x94>
   12560:	add	r6, r0, #1
   12564:	mov	r7, #0
   12568:	uxtb	r5, r5
   1256c:	cmp	r5, #13
   12570:	cmpne	r5, #10
   12574:	bne	1258c <rb_linebuf_copy_line+0x88>
   12578:	cmp	r6, r7
   1257c:	beq	12594 <rb_linebuf_copy_line+0x90>
   12580:	ldrb	r5, [r1, -r7]
   12584:	sub	r7, r7, #1
   12588:	b	12568 <rb_linebuf_copy_line+0x64>
   1258c:	sub	r7, r7, r0
   12590:	b	12598 <rb_linebuf_copy_line+0x94>
   12594:	mov	r7, #0
   12598:	sub	r7, r3, r7
   1259c:	cmn	r7, #1
   125a0:	beq	12628 <rb_linebuf_copy_line+0x124>
   125a4:	movw	r0, #1022	; 0x3fe
   125a8:	add	r6, r4, r9
   125ac:	sub	r5, r0, r9
   125b0:	cmp	r7, r5
   125b4:	ble	12634 <rb_linebuf_copy_line+0x130>
   125b8:	mov	r1, r2
   125bc:	mov	r0, r6
   125c0:	mov	r2, r5
   125c4:	bl	509c <memcpy@plt>
   125c8:	mov	r0, #0
   125cc:	cmp	r5, #0
   125d0:	strb	r0, [r4, #1022]	; 0x3fe
   125d4:	beq	12604 <rb_linebuf_copy_line+0x100>
   125d8:	movw	r1, #1022	; 0x3fe
   125dc:	movw	r2, #1021	; 0x3fd
   125e0:	sub	r1, r9, r1
   125e4:	add	r2, r4, r2
   125e8:	ldrb	r3, [r2]
   125ec:	cmp	r3, #13
   125f0:	cmpne	r3, #10
   125f4:	bne	12604 <rb_linebuf_copy_line+0x100>
   125f8:	strb	r0, [r2], #-1
   125fc:	adds	r1, r1, #1
   12600:	bcc	125e8 <rb_linebuf_copy_line+0xe4>
   12604:	movw	r0, #1022	; 0x3fe
   12608:	mov	r1, #1
   1260c:	str	r0, [r4, #1028]	; 0x404
   12610:	strb	r1, [r4, #1025]	; 0x401
   12614:	ldr	r1, [r8, #12]
   12618:	add	r0, r1, r0
   1261c:	str	r0, [r8, #12]
   12620:	mov	r0, r7
   12624:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12628:	mvn	r7, #0
   1262c:	mov	r0, r7
   12630:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12634:	mov	r1, r2
   12638:	mov	r0, r6
   1263c:	mov	r2, r7
   12640:	bl	509c <memcpy@plt>
   12644:	mov	r0, #0
   12648:	mov	r1, r6
   1264c:	strb	r0, [r1, r7]!
   12650:	ldrb	r2, [r1, #-1]
   12654:	cmp	r2, #10
   12658:	cmpne	r2, #13
   1265c:	bne	126a0 <rb_linebuf_copy_line+0x19c>
   12660:	cmp	r7, #0
   12664:	beq	126c4 <rb_linebuf_copy_line+0x1c0>
   12668:	sub	r1, r6, #2
   1266c:	mov	r6, r7
   12670:	uxtb	r0, r2
   12674:	cmp	r0, #13
   12678:	cmpne	r0, #10
   1267c:	bne	126c0 <rb_linebuf_copy_line+0x1bc>
   12680:	add	r2, r1, r6
   12684:	mov	r0, #0
   12688:	subs	r3, r6, #1
   1268c:	strb	r0, [r2, #1]
   12690:	beq	126c4 <rb_linebuf_copy_line+0x1c0>
   12694:	ldrb	r2, [r1, r6]
   12698:	mov	r6, r3
   1269c:	b	12670 <rb_linebuf_copy_line+0x16c>
   126a0:	ldr	r0, [r8, #12]
   126a4:	add	r0, r0, r7
   126a8:	str	r0, [r8, #12]
   126ac:	mov	r0, #0
   126b0:	strb	r0, [r4, #1025]	; 0x401
   126b4:	ldr	r0, [r4, #1028]	; 0x404
   126b8:	add	r0, r0, r7
   126bc:	b	126e0 <rb_linebuf_copy_line+0x1dc>
   126c0:	mov	r0, r6
   126c4:	mov	r1, #1
   126c8:	strb	r1, [r4, #1025]	; 0x401
   126cc:	ldr	r1, [r8, #12]
   126d0:	add	r1, r1, r0
   126d4:	str	r1, [r8, #12]
   126d8:	ldr	r1, [r4, #1028]	; 0x404
   126dc:	add	r0, r1, r0
   126e0:	str	r0, [r4, #1028]	; 0x404
   126e4:	mov	r0, r7
   126e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000126ec <rb_linebuf_copy_raw>:
   126ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   126f0:	add	fp, sp, #24
   126f4:	mov	r8, r0
   126f8:	mov	r0, #1
   126fc:	mov	r6, #0
   12700:	strb	r0, [r1, #1026]	; 0x402
   12704:	ldrb	r0, [r1, #1025]	; 0x401
   12708:	cmp	r0, #1
   1270c:	beq	12848 <rb_linebuf_copy_raw+0x15c>
   12710:	ldr	ip, [r1, #1028]	; 0x404
   12714:	mov	r4, r1
   12718:	mov	r6, #0
   1271c:	cmp	r3, #0
   12720:	beq	12784 <rb_linebuf_copy_raw+0x98>
   12724:	rsb	r1, r3, #0
   12728:	add	r7, r2, #1
   1272c:	ldrb	r0, [r7, #-1]
   12730:	cmp	r0, #13
   12734:	cmpne	r0, #10
   12738:	beq	1274c <rb_linebuf_copy_raw+0x60>
   1273c:	adds	r1, r1, #1
   12740:	add	r7, r7, #1
   12744:	bcc	1272c <rb_linebuf_copy_raw+0x40>
   12748:	b	12784 <rb_linebuf_copy_raw+0x98>
   1274c:	add	r5, r1, #1
   12750:	mov	r6, #0
   12754:	uxtb	r0, r0
   12758:	cmp	r0, #13
   1275c:	cmpne	r0, #10
   12760:	bne	12778 <rb_linebuf_copy_raw+0x8c>
   12764:	cmp	r5, r6
   12768:	beq	12780 <rb_linebuf_copy_raw+0x94>
   1276c:	ldrb	r0, [r7, -r6]
   12770:	sub	r6, r6, #1
   12774:	b	12754 <rb_linebuf_copy_raw+0x68>
   12778:	sub	r6, r6, r1
   1277c:	b	12784 <rb_linebuf_copy_raw+0x98>
   12780:	mov	r6, #0
   12784:	sub	r6, r3, r6
   12788:	cmn	r6, #1
   1278c:	beq	127dc <rb_linebuf_copy_raw+0xf0>
   12790:	movw	r9, #1022	; 0x3fe
   12794:	add	r5, r4, ip
   12798:	sub	r7, r9, ip
   1279c:	cmp	r6, r7
   127a0:	ble	127e8 <rb_linebuf_copy_raw+0xfc>
   127a4:	mov	r1, r2
   127a8:	mov	r0, r5
   127ac:	mov	r2, r7
   127b0:	bl	509c <memcpy@plt>
   127b4:	mov	r0, #1
   127b8:	str	r9, [r4, #1028]	; 0x404
   127bc:	strb	r0, [r4, #1025]	; 0x401
   127c0:	mov	r0, #0
   127c4:	strb	r0, [r4, #1022]	; 0x3fe
   127c8:	ldr	r0, [r8, #12]
   127cc:	add	r0, r0, r9
   127d0:	str	r0, [r8, #12]
   127d4:	mov	r0, r7
   127d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   127dc:	mvn	r6, #0
   127e0:	mov	r0, r6
   127e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   127e8:	mov	r1, r2
   127ec:	mov	r0, r5
   127f0:	mov	r2, r6
   127f4:	bl	509c <memcpy@plt>
   127f8:	mov	r0, #0
   127fc:	strb	r0, [r5, r6]!
   12800:	ldrb	r0, [r5, #-1]
   12804:	cmp	r0, #10
   12808:	cmpne	r0, #13
   1280c:	bne	12828 <rb_linebuf_copy_raw+0x13c>
   12810:	mov	r0, #1
   12814:	strb	r0, [r4, #1025]	; 0x401
   12818:	ldr	r0, [r8, #12]
   1281c:	add	r0, r0, r6
   12820:	str	r0, [r8, #12]
   12824:	b	1283c <rb_linebuf_copy_raw+0x150>
   12828:	ldr	r0, [r8, #12]
   1282c:	add	r0, r0, r6
   12830:	str	r0, [r8, #12]
   12834:	mov	r0, #0
   12838:	strb	r0, [r4, #1025]	; 0x401
   1283c:	ldr	r0, [r4, #1028]	; 0x404
   12840:	add	r0, r0, r6
   12844:	str	r0, [r4, #1028]	; 0x404
   12848:	mov	r0, r6
   1284c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012850 <rb_linebuf_get>:
   12850:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12854:	add	fp, sp, #24
   12858:	mov	r5, r0
   1285c:	ldr	r0, [r0]
   12860:	mov	r6, #0
   12864:	cmp	r0, #0
   12868:	beq	12988 <rb_linebuf_get+0x138>
   1286c:	ldr	r4, [r0]
   12870:	mov	r9, r1
   12874:	cmp	r3, #0
   12878:	bne	12888 <rb_linebuf_get+0x38>
   1287c:	ldrb	r0, [r4, #1025]	; 0x401
   12880:	cmp	r0, #0
   12884:	beq	12988 <rb_linebuf_get+0x138>
   12888:	ldr	r3, [r4, #1028]	; 0x404
   1288c:	ldr	r8, [fp, #8]
   12890:	cmp	r3, r2
   12894:	subgt	r3, r2, #1
   12898:	cmp	r8, #0
   1289c:	bne	128e0 <rb_linebuf_get+0x90>
   128a0:	ldrb	r0, [r4, #1026]	; 0x402
   128a4:	cmp	r0, #0
   128a8:	beq	128e0 <rb_linebuf_get+0x90>
   128ac:	mov	r6, #0
   128b0:	cmp	r3, #0
   128b4:	beq	128e4 <rb_linebuf_get+0x94>
   128b8:	rsb	r0, r3, #0
   128bc:	mov	r1, r4
   128c0:	ldrb	r2, [r1]
   128c4:	cmp	r2, #13
   128c8:	cmpne	r2, #10
   128cc:	bne	129c0 <rb_linebuf_get+0x170>
   128d0:	adds	r0, r0, #1
   128d4:	add	r1, r1, #1
   128d8:	bcc	128c0 <rb_linebuf_get+0x70>
   128dc:	b	128e8 <rb_linebuf_get+0x98>
   128e0:	mov	r6, r3
   128e4:	mov	r1, r4
   128e8:	mov	r0, r9
   128ec:	mov	r2, r6
   128f0:	bl	509c <memcpy@plt>
   128f4:	cmp	r8, #0
   128f8:	moveq	r0, #0
   128fc:	strbeq	r0, [r9, r6]
   12900:	ldr	r0, [r5]
   12904:	ldr	r1, [r0, #8]
   12908:	ldr	r2, [r0, #4]
   1290c:	cmp	r1, #0
   12910:	beq	12920 <rb_linebuf_get+0xd0>
   12914:	str	r2, [r1, #4]
   12918:	ldr	r2, [r0, #4]
   1291c:	b	12924 <rb_linebuf_get+0xd4>
   12920:	str	r2, [r5, #4]
   12924:	cmp	r2, #0
   12928:	mov	r3, r5
   1292c:	addne	r3, r2, #8
   12930:	str	r1, [r3]
   12934:	mov	r1, #0
   12938:	str	r1, [r0, #4]
   1293c:	str	r1, [r0, #8]
   12940:	ldr	r1, [r5, #8]
   12944:	sub	r1, r1, #1
   12948:	str	r1, [r5, #8]
   1294c:	bl	50d8 <rb_free_rb_dlink_node@plt>
   12950:	ldr	r1, [r5, #16]
   12954:	ldr	r2, [r5, #24]
   12958:	ldr	r0, [r5, #12]
   1295c:	sub	r1, r1, #1
   12960:	sub	r2, r2, #1
   12964:	str	r1, [r5, #16]
   12968:	ldr	r1, [r4, #1028]	; 0x404
   1296c:	str	r2, [r5, #24]
   12970:	sub	r0, r0, r1
   12974:	str	r0, [r5, #12]
   12978:	ldr	r0, [r4, #1032]	; 0x408
   1297c:	subs	r0, r0, #1
   12980:	str	r0, [r4, #1032]	; 0x408
   12984:	beq	12990 <rb_linebuf_get+0x140>
   12988:	mov	r0, r6
   1298c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12990:	ldr	r0, [pc, #104]	; 12a00 <rb_linebuf_get+0x1b0>
   12994:	ldr	r0, [pc, r0]
   12998:	ldr	r1, [pc, #100]	; 12a04 <rb_linebuf_get+0x1b4>
   1299c:	sub	r0, r0, #1
   129a0:	add	r1, pc, r1
   129a4:	str	r0, [r1]
   129a8:	mov	r1, r4
   129ac:	ldr	r0, [pc, #84]	; 12a08 <rb_linebuf_get+0x1b8>
   129b0:	ldr	r0, [pc, r0]
   129b4:	bl	515c <rb_bh_free@plt>
   129b8:	mov	r0, r6
   129bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   129c0:	add	r2, r3, r4
   129c4:	add	r3, r0, #1
   129c8:	mov	r6, #0
   129cc:	sub	r2, r2, #1
   129d0:	ldrb	r7, [r2, r6]
   129d4:	cmp	r7, #13
   129d8:	cmpne	r7, #10
   129dc:	bne	129f8 <rb_linebuf_get+0x1a8>
   129e0:	sub	r7, r6, #1
   129e4:	cmp	r3, r6
   129e8:	mov	r6, r7
   129ec:	bne	129d0 <rb_linebuf_get+0x180>
   129f0:	mov	r6, #0
   129f4:	b	128e8 <rb_linebuf_get+0x98>
   129f8:	sub	r6, r6, r0
   129fc:	b	128e8 <rb_linebuf_get+0x98>
   12a00:	.word	0x0002e934
   12a04:	.word	0x0002e928
   12a08:	.word	0x0002c910

00012a0c <rb_linebuf_attach>:
   12a0c:	push	{r4, r5, r6, r7, fp, lr}
   12a10:	add	fp, sp, #16
   12a14:	ldr	r5, [r1]
   12a18:	cmp	r5, #0
   12a1c:	beq	12ab4 <rb_linebuf_attach+0xa8>
   12a20:	mov	r4, r0
   12a24:	mov	r6, #0
   12a28:	b	12a80 <rb_linebuf_attach+0x74>
   12a2c:	add	r1, r1, #8
   12a30:	str	r0, [r1]
   12a34:	str	r0, [r4, #4]
   12a38:	add	r2, r4, #8
   12a3c:	ldm	r2, {r0, r1, r2}
   12a40:	ldr	r3, [r4, #24]
   12a44:	add	r0, r0, #1
   12a48:	str	r0, [r4, #8]
   12a4c:	add	r0, r2, #1
   12a50:	add	r2, r3, #1
   12a54:	str	r0, [r4, #16]
   12a58:	ldr	r0, [r7, #1028]	; 0x404
   12a5c:	str	r2, [r4, #24]
   12a60:	add	r0, r1, r0
   12a64:	str	r0, [r4, #12]
   12a68:	ldr	r0, [r7, #1032]	; 0x408
   12a6c:	add	r0, r0, #1
   12a70:	str	r0, [r7, #1032]	; 0x408
   12a74:	ldr	r5, [r5, #8]
   12a78:	cmp	r5, #0
   12a7c:	beq	12ab4 <rb_linebuf_attach+0xa8>
   12a80:	ldr	r7, [r5]
   12a84:	bl	53d8 <rb_make_rb_dlink_node@plt>
   12a88:	str	r6, [r0, #8]
   12a8c:	str	r7, [r0]
   12a90:	ldr	r1, [r4, #4]
   12a94:	cmp	r1, #0
   12a98:	str	r1, [r0, #4]
   12a9c:	bne	12a2c <rb_linebuf_attach+0x20>
   12aa0:	ldr	r1, [r4]
   12aa4:	cmp	r1, #0
   12aa8:	bne	12a34 <rb_linebuf_attach+0x28>
   12aac:	mov	r1, r4
   12ab0:	b	12a30 <rb_linebuf_attach+0x24>
   12ab4:	pop	{r4, r5, r6, r7, fp, pc}

00012ab8 <rb_linebuf_put>:
   12ab8:	push	{r4, r5, r6, sl, fp, lr}
   12abc:	add	fp, sp, #16
   12ac0:	mov	r4, r0
   12ac4:	ldr	r0, [pc, #244]	; 12bc0 <rb_linebuf_put+0x108>
   12ac8:	mov	r6, r1
   12acc:	ldr	r0, [pc, r0]
   12ad0:	bl	51d4 <rb_bh_alloc@plt>
   12ad4:	mov	r5, r0
   12ad8:	cmp	r0, #0
   12adc:	beq	12b64 <rb_linebuf_put+0xac>
   12ae0:	ldr	r0, [pc, #220]	; 12bc4 <rb_linebuf_put+0x10c>
   12ae4:	ldr	r0, [pc, r0]
   12ae8:	ldr	r1, [pc, #216]	; 12bc8 <rb_linebuf_put+0x110>
   12aec:	add	r0, r0, #1
   12af0:	add	r1, pc, r1
   12af4:	str	r0, [r1]
   12af8:	bl	53d8 <rb_make_rb_dlink_node@plt>
   12afc:	mov	r1, #0
   12b00:	str	r1, [r0, #8]
   12b04:	str	r5, [r0]
   12b08:	ldr	r1, [r4, #4]
   12b0c:	cmp	r1, #0
   12b10:	str	r1, [r0, #4]
   12b14:	beq	12b24 <rb_linebuf_put+0x6c>
   12b18:	add	r1, r1, #8
   12b1c:	str	r0, [r1]
   12b20:	b	12b30 <rb_linebuf_put+0x78>
   12b24:	ldr	r1, [r4]
   12b28:	cmp	r1, #0
   12b2c:	beq	12bb8 <rb_linebuf_put+0x100>
   12b30:	str	r0, [r4, #4]
   12b34:	ldr	r0, [r4, #8]
   12b38:	add	r0, r0, #1
   12b3c:	str	r0, [r4, #8]
   12b40:	ldr	r0, [r5, #1032]	; 0x408
   12b44:	add	r0, r0, #1
   12b48:	str	r0, [r5, #1032]	; 0x408
   12b4c:	ldr	r0, [r4, #16]
   12b50:	ldr	r1, [r4, #24]
   12b54:	add	r0, r0, #1
   12b58:	str	r0, [r4, #16]
   12b5c:	add	r0, r1, #1
   12b60:	str	r0, [r4, #24]
   12b64:	mov	r0, r5
   12b68:	movw	r1, #1023	; 0x3ff
   12b6c:	mov	r2, r6
   12b70:	bl	4f40 <rb_fsnprint@plt>
   12b74:	bic	r0, r0, r0, asr #31
   12b78:	movw	r1, #1022	; 0x3fe
   12b7c:	mov	r2, #0
   12b80:	cmp	r0, r1
   12b84:	movcc	r1, r0
   12b88:	add	r0, r1, #2
   12b8c:	add	r1, r5, r1
   12b90:	strb	r2, [r5, r0]
   12b94:	movw	r2, #2573	; 0xa0d
   12b98:	strh	r2, [r1]
   12b9c:	mov	r1, #1
   12ba0:	strb	r1, [r5, #1025]	; 0x401
   12ba4:	str	r0, [r5, #1028]	; 0x404
   12ba8:	ldr	r1, [r4, #12]
   12bac:	add	r0, r1, r0
   12bb0:	str	r0, [r4, #12]
   12bb4:	pop	{r4, r5, r6, sl, fp, pc}
   12bb8:	mov	r1, r4
   12bbc:	b	12b1c <rb_linebuf_put+0x64>
   12bc0:	.word	0x0002c7f4
   12bc4:	.word	0x0002e7e4
   12bc8:	.word	0x0002e7d8

00012bcc <rb_linebuf_flush>:
   12bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bd0:	add	fp, sp, #28
   12bd4:	sub	sp, sp, #4
   12bd8:	mov	r4, r1
   12bdc:	mov	r5, r0
   12be0:	bl	4d78 <rb_fd_ssl@plt>
   12be4:	cmp	r0, #0
   12be8:	beq	12c6c <rb_linebuf_flush+0xa0>
   12bec:	ldr	r0, [r4]
   12bf0:	cmp	r0, #0
   12bf4:	beq	12e04 <rb_linebuf_flush+0x238>
   12bf8:	ldr	r6, [r0]
   12bfc:	ldrb	r0, [r6, #1025]	; 0x401
   12c00:	cmp	r0, #0
   12c04:	beq	12e04 <rb_linebuf_flush+0x238>
   12c08:	ldr	r0, [r4, #20]
   12c0c:	ldr	r2, [r6, #1028]	; 0x404
   12c10:	add	r1, r6, r0
   12c14:	sub	r2, r2, r0
   12c18:	mov	r0, r5
   12c1c:	bl	4f04 <rb_write@plt>
   12c20:	mov	r8, r0
   12c24:	cmp	r0, #1
   12c28:	blt	12e14 <rb_linebuf_flush+0x248>
   12c2c:	ldr	r0, [r4, #20]
   12c30:	add	r0, r0, r8
   12c34:	str	r0, [r4, #20]
   12c38:	ldr	r1, [r6, #1028]	; 0x404
   12c3c:	cmp	r0, r1
   12c40:	bne	12e14 <rb_linebuf_flush+0x248>
   12c44:	mov	r0, #0
   12c48:	str	r0, [r4, #20]
   12c4c:	ldr	r0, [r4]
   12c50:	ldr	r1, [r0, #8]
   12c54:	ldr	r2, [r0, #4]
   12c58:	cmp	r1, #0
   12c5c:	beq	12e38 <rb_linebuf_flush+0x26c>
   12c60:	str	r2, [r1, #4]
   12c64:	ldr	r2, [r0, #4]
   12c68:	b	12e3c <rb_linebuf_flush+0x270>
   12c6c:	ldr	r6, [pc, #600]	; 12ecc <rb_linebuf_flush+0x300>
   12c70:	mov	r1, #0
   12c74:	mov	r2, #8192	; 0x2000
   12c78:	add	r6, pc, r6
   12c7c:	mov	r0, r6
   12c80:	bl	4ed4 <memset@plt>
   12c84:	ldr	r0, [r4]
   12c88:	cmp	r0, #0
   12c8c:	beq	12e04 <rb_linebuf_flush+0x238>
   12c90:	ldr	r1, [r0]
   12c94:	ldrb	r2, [r1, #1025]	; 0x401
   12c98:	cmp	r2, #0
   12c9c:	beq	12e04 <rb_linebuf_flush+0x238>
   12ca0:	ldr	r2, [r4, #20]
   12ca4:	add	r8, r1, r2
   12ca8:	ldr	r1, [r1, #1028]	; 0x404
   12cac:	sub	r9, r1, r2
   12cb0:	add	r1, r6, #8
   12cb4:	strd	r8, [r6]
   12cb8:	mov	r6, #1
   12cbc:	ldr	r0, [r0, #8]
   12cc0:	cmp	r0, #0
   12cc4:	ldrne	r2, [r0]
   12cc8:	ldrbne	r3, [r2, #1025]	; 0x401
   12ccc:	cmpne	r3, #0
   12cd0:	beq	12cf4 <rb_linebuf_flush+0x128>
   12cd4:	str	r2, [r1]
   12cd8:	add	r6, r6, #1
   12cdc:	ldr	r2, [r2, #1028]	; 0x404
   12ce0:	cmp	r6, #1024	; 0x400
   12ce4:	str	r2, [r1, #4]
   12ce8:	add	r1, r1, #8
   12cec:	bne	12cbc <rb_linebuf_flush+0xf0>
   12cf0:	mov	r6, #1024	; 0x400
   12cf4:	ldr	r1, [pc, #468]	; 12ed0 <rb_linebuf_flush+0x304>
   12cf8:	mov	r0, r5
   12cfc:	mov	r2, r6
   12d00:	add	r1, pc, r1
   12d04:	bl	533c <rb_writev@plt>
   12d08:	mov	r8, r0
   12d0c:	cmp	r0, #1
   12d10:	blt	12e14 <rb_linebuf_flush+0x248>
   12d14:	ldr	r5, [r4]
   12d18:	ldr	r0, [r4, #20]
   12d1c:	mov	r9, #0
   12d20:	str	r8, [sp]
   12d24:	b	12d3c <rb_linebuf_flush+0x170>
   12d28:	mov	r0, #0
   12d2c:	sub	r8, r8, sl
   12d30:	subs	r6, r6, #1
   12d34:	str	r0, [r4, #20]
   12d38:	beq	12e30 <rb_linebuf_flush+0x264>
   12d3c:	ldr	r7, [r5]
   12d40:	ldr	r1, [r7, #1028]	; 0x404
   12d44:	sub	sl, r1, r0
   12d48:	cmp	r8, sl
   12d4c:	blt	12e20 <rb_linebuf_flush+0x254>
   12d50:	ldr	r0, [r4]
   12d54:	ldr	r5, [r5, #8]
   12d58:	ldr	r1, [r0, #8]
   12d5c:	ldr	r2, [r0, #4]
   12d60:	cmp	r1, #0
   12d64:	beq	12d74 <rb_linebuf_flush+0x1a8>
   12d68:	str	r2, [r1, #4]
   12d6c:	ldr	r2, [r0, #4]
   12d70:	b	12d78 <rb_linebuf_flush+0x1ac>
   12d74:	str	r2, [r4, #4]
   12d78:	cmp	r2, #0
   12d7c:	mov	r3, r4
   12d80:	addne	r3, r2, #8
   12d84:	str	r1, [r3]
   12d88:	str	r9, [r0, #4]
   12d8c:	str	r9, [r0, #8]
   12d90:	ldr	r1, [r4, #8]
   12d94:	sub	r1, r1, #1
   12d98:	str	r1, [r4, #8]
   12d9c:	bl	50d8 <rb_free_rb_dlink_node@plt>
   12da0:	ldr	r1, [r4, #16]
   12da4:	ldr	r2, [r4, #24]
   12da8:	ldr	r0, [r4, #12]
   12dac:	sub	r1, r1, #1
   12db0:	sub	r2, r2, #1
   12db4:	str	r1, [r4, #16]
   12db8:	ldr	r1, [r7, #1028]	; 0x404
   12dbc:	str	r2, [r4, #24]
   12dc0:	sub	r0, r0, r1
   12dc4:	str	r0, [r4, #12]
   12dc8:	ldr	r0, [r7, #1032]	; 0x408
   12dcc:	subs	r0, r0, #1
   12dd0:	str	r0, [r7, #1032]	; 0x408
   12dd4:	bne	12d28 <rb_linebuf_flush+0x15c>
   12dd8:	ldr	r0, [pc, #244]	; 12ed4 <rb_linebuf_flush+0x308>
   12ddc:	ldr	r0, [pc, r0]
   12de0:	ldr	r1, [pc, #240]	; 12ed8 <rb_linebuf_flush+0x30c>
   12de4:	sub	r0, r0, #1
   12de8:	add	r1, pc, r1
   12dec:	str	r0, [r1]
   12df0:	mov	r1, r7
   12df4:	ldr	r0, [pc, #224]	; 12edc <rb_linebuf_flush+0x310>
   12df8:	ldr	r0, [pc, r0]
   12dfc:	bl	515c <rb_bh_free@plt>
   12e00:	b	12d28 <rb_linebuf_flush+0x15c>
   12e04:	bl	5540 <__errno_location@plt>
   12e08:	mov	r1, #11
   12e0c:	mvn	r8, #0
   12e10:	str	r1, [r0]
   12e14:	mov	r0, r8
   12e18:	sub	sp, fp, #28
   12e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e20:	add	r0, r0, r8
   12e24:	ldr	r8, [sp]
   12e28:	str	r0, [r4, #20]
   12e2c:	b	12e14 <rb_linebuf_flush+0x248>
   12e30:	ldr	r8, [sp]
   12e34:	b	12e14 <rb_linebuf_flush+0x248>
   12e38:	str	r2, [r4, #4]
   12e3c:	cmp	r2, #0
   12e40:	mov	r3, r4
   12e44:	addne	r3, r2, #8
   12e48:	str	r1, [r3]
   12e4c:	mov	r1, #0
   12e50:	str	r1, [r0, #4]
   12e54:	str	r1, [r0, #8]
   12e58:	ldr	r1, [r4, #8]
   12e5c:	sub	r1, r1, #1
   12e60:	str	r1, [r4, #8]
   12e64:	bl	50d8 <rb_free_rb_dlink_node@plt>
   12e68:	ldr	r1, [r4, #16]
   12e6c:	ldr	r2, [r4, #24]
   12e70:	ldr	r0, [r4, #12]
   12e74:	sub	r1, r1, #1
   12e78:	sub	r2, r2, #1
   12e7c:	str	r1, [r4, #16]
   12e80:	ldr	r1, [r6, #1028]	; 0x404
   12e84:	str	r2, [r4, #24]
   12e88:	sub	r0, r0, r1
   12e8c:	str	r0, [r4, #12]
   12e90:	ldr	r0, [r6, #1032]	; 0x408
   12e94:	subs	r0, r0, #1
   12e98:	str	r0, [r6, #1032]	; 0x408
   12e9c:	bne	12e14 <rb_linebuf_flush+0x248>
   12ea0:	ldr	r0, [pc, #56]	; 12ee0 <rb_linebuf_flush+0x314>
   12ea4:	ldr	r0, [pc, r0]
   12ea8:	ldr	r1, [pc, #52]	; 12ee4 <rb_linebuf_flush+0x318>
   12eac:	sub	r0, r0, #1
   12eb0:	add	r1, pc, r1
   12eb4:	str	r0, [r1]
   12eb8:	mov	r1, r6
   12ebc:	ldr	r0, [pc, #36]	; 12ee8 <rb_linebuf_flush+0x31c>
   12ec0:	ldr	r0, [pc, r0]
   12ec4:	bl	515c <rb_bh_free@plt>
   12ec8:	b	12e14 <rb_linebuf_flush+0x248>
   12ecc:	.word	0x0002c650
   12ed0:	.word	0x0002c5c8
   12ed4:	.word	0x0002e4ec
   12ed8:	.word	0x0002e4e0
   12edc:	.word	0x0002c4c8
   12ee0:	.word	0x0002e424
   12ee4:	.word	0x0002e418
   12ee8:	.word	0x0002c400

00012eec <rb_count_rb_linebuf_memory>:
   12eec:	push	{fp, lr}
   12ef0:	mov	fp, sp
   12ef4:	sub	sp, sp, #8
   12ef8:	mov	r3, r1
   12efc:	mov	r1, r0
   12f00:	ldr	r0, [pc, #24]	; 12f20 <rb_count_rb_linebuf_memory+0x34>
   12f04:	mov	r2, #0
   12f08:	ldr	r0, [pc, r0]
   12f0c:	str	r2, [sp]
   12f10:	mov	r2, #0
   12f14:	bl	5564 <rb_bh_usage@plt>
   12f18:	mov	sp, fp
   12f1c:	pop	{fp, pc}
   12f20:	.word	0x0002c3b8

00012f24 <rb_init_rb_dlink_nodes>:
   12f24:	push	{fp, lr}
   12f28:	mov	fp, sp
   12f2c:	ldr	r2, [pc, #36]	; 12f58 <rb_init_rb_dlink_nodes+0x34>
   12f30:	mov	r1, r0
   12f34:	mov	r0, #12
   12f38:	add	r2, pc, r2
   12f3c:	bl	5318 <rb_bh_create@plt>
   12f40:	ldr	r1, [pc, #20]	; 12f5c <rb_init_rb_dlink_nodes+0x38>
   12f44:	cmp	r0, #0
   12f48:	add	r1, pc, r1
   12f4c:	str	r0, [r1]
   12f50:	popne	{fp, pc}
   12f54:	bl	5204 <rb_outofmemory@plt>
   12f58:	.word	0x00007c43
   12f5c:	.word	0x0002e384

00012f60 <rb_make_rb_dlink_node>:
   12f60:	ldr	r0, [pc, #4]	; 12f6c <rb_make_rb_dlink_node+0xc>
   12f64:	ldr	r0, [pc, r0]
   12f68:	b	51d4 <rb_bh_alloc@plt>
   12f6c:	.word	0x0002e368

00012f70 <rb_free_rb_dlink_node>:
   12f70:	mov	r1, r0
   12f74:	ldr	r0, [pc, #4]	; 12f80 <rb_free_rb_dlink_node+0x10>
   12f78:	ldr	r0, [pc, r0]
   12f7c:	b	515c <rb_bh_free@plt>
   12f80:	.word	0x0002e354

00012f84 <rb_string_to_array>:
   12f84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f88:	add	fp, sp, #24
   12f8c:	mov	r4, r1
   12f90:	mov	r1, r0
   12f94:	mov	r0, #0
   12f98:	cmp	r1, #0
   12f9c:	beq	13048 <rb_string_to_array+0xc4>
   12fa0:	ldrb	r3, [r1]
   12fa4:	cmp	r3, #0
   12fa8:	beq	13048 <rb_string_to_array+0xc4>
   12fac:	uxtb	r7, r3
   12fb0:	cmp	r7, #32
   12fb4:	bne	12fc0 <rb_string_to_array+0x3c>
   12fb8:	ldrb	r3, [r1, #1]!
   12fbc:	b	12fac <rb_string_to_array+0x28>
   12fc0:	cmp	r7, #0
   12fc4:	beq	13048 <rb_string_to_array+0xc4>
   12fc8:	sub	r6, r2, #1
   12fcc:	mov	r8, #0
   12fd0:	mov	r0, #0
   12fd4:	mov	r5, r0
   12fd8:	uxtb	r0, r3
   12fdc:	cmp	r0, #58	; 0x3a
   12fe0:	beq	1304c <rb_string_to_array+0xc8>
   12fe4:	str	r1, [r4, r5, lsl #2]
   12fe8:	mov	r0, r1
   12fec:	mov	r1, #32
   12ff0:	bl	4e68 <strchr@plt>
   12ff4:	mov	r2, r0
   12ff8:	add	r0, r5, #1
   12ffc:	cmp	r2, #0
   13000:	beq	13048 <rb_string_to_array+0xc4>
   13004:	mov	r7, r2
   13008:	strb	r8, [r7], #1
   1300c:	mov	r1, r7
   13010:	ldrb	r3, [r1]
   13014:	cmp	r3, #32
   13018:	bne	13024 <rb_string_to_array+0xa0>
   1301c:	add	r1, r1, #1
   13020:	b	13010 <rb_string_to_array+0x8c>
   13024:	cmp	r3, #0
   13028:	beq	13048 <rb_string_to_array+0xc4>
   1302c:	cmp	r0, r6
   13030:	blt	12fd4 <rb_string_to_array+0x50>
   13034:	ldrb	r1, [r2, #1]
   13038:	cmp	r1, #58	; 0x3a
   1303c:	addeq	r7, r2, #2
   13040:	str	r7, [r4, r0, lsl #2]
   13044:	add	r0, r5, #2
   13048:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1304c:	add	r0, r1, #1
   13050:	str	r0, [r4, r5, lsl #2]
   13054:	add	r0, r5, #1
   13058:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001305c <rb_strcasecmp>:
   1305c:	b	4e80 <strcasecmp@plt>

00013060 <rb_strncasecmp>:
   13060:	b	51f8 <strncasecmp@plt>

00013064 <rb_strcasestr>:
   13064:	b	4cf4 <strcasestr@plt>

00013068 <rb_strlcat>:
   13068:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1306c:	add	fp, sp, #24
   13070:	mov	r4, r2
   13074:	mov	r8, r1
   13078:	mov	r9, r0
   1307c:	bl	5078 <strlen@plt>
   13080:	mov	r7, r0
   13084:	sub	r6, r4, r0
   13088:	mov	r0, r8
   1308c:	bl	5078 <strlen@plt>
   13090:	cmp	r0, r6
   13094:	mov	r4, r0
   13098:	mov	r5, r0
   1309c:	mov	r1, r8
   130a0:	subcs	r4, r6, #1
   130a4:	add	r6, r9, r7
   130a8:	mov	r0, r6
   130ac:	mov	r2, r4
   130b0:	bl	509c <memcpy@plt>
   130b4:	mov	r0, #0
   130b8:	strb	r0, [r6, r4]
   130bc:	add	r0, r5, r7
   130c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000130c4 <rb_strlcpy>:
   130c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130c8:	add	fp, sp, #24
   130cc:	mov	r8, r0
   130d0:	mov	r0, r1
   130d4:	mov	r7, r2
   130d8:	mov	r6, r1
   130dc:	bl	5078 <strlen@plt>
   130e0:	mov	r4, r0
   130e4:	cmp	r7, #0
   130e8:	beq	13110 <rb_strlcpy+0x4c>
   130ec:	cmp	r4, r7
   130f0:	mov	r5, r4
   130f4:	mov	r0, r8
   130f8:	mov	r1, r6
   130fc:	subcs	r5, r7, #1
   13100:	mov	r2, r5
   13104:	bl	509c <memcpy@plt>
   13108:	mov	r0, #0
   1310c:	strb	r0, [r8, r5]
   13110:	mov	r0, r4
   13114:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013118 <rb_strnlen>:
   13118:	b	5294 <strnlen@plt>

0001311c <rb_snprintf_append>:
   1311c:	sub	sp, sp, #4
   13120:	push	{r4, r5, r6, r7, fp, lr}
   13124:	add	fp, sp, #16
   13128:	sub	sp, sp, #4
   1312c:	cmp	r1, #0
   13130:	str	r3, [fp, #8]
   13134:	beq	13160 <rb_snprintf_append+0x44>
   13138:	mov	r4, r2
   1313c:	mov	r6, r1
   13140:	mov	r5, r0
   13144:	bl	5078 <strlen@plt>
   13148:	cmp	r0, r6
   1314c:	ble	13168 <rb_snprintf_append+0x4c>
   13150:	sub	r0, r6, #1
   13154:	mov	r1, #0
   13158:	strb	r1, [r5, r0]
   1315c:	b	1318c <rb_snprintf_append+0x70>
   13160:	mvn	r0, #0
   13164:	b	1318c <rb_snprintf_append+0x70>
   13168:	mov	r7, r0
   1316c:	add	r3, fp, #8
   13170:	add	r0, r5, r0
   13174:	mov	r2, r4
   13178:	sub	r1, r6, r7
   1317c:	str	r3, [sp]
   13180:	bl	4e14 <vsnprintf@plt>
   13184:	cmp	r0, #0
   13188:	addpl	r0, r0, r7
   1318c:	sub	sp, fp, #16
   13190:	pop	{r4, r5, r6, r7, fp, lr}
   13194:	add	sp, sp, #4
   13198:	bx	lr

0001319c <rb_snprintf_try_append>:
   1319c:	sub	sp, sp, #4
   131a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   131a4:	add	fp, sp, #24
   131a8:	sub	sp, sp, #4
   131ac:	mvn	r4, #0
   131b0:	cmp	r1, #0
   131b4:	str	r3, [fp, #8]
   131b8:	beq	13228 <rb_snprintf_try_append+0x8c>
   131bc:	mov	r9, r2
   131c0:	mov	r5, r1
   131c4:	mov	r6, r0
   131c8:	bl	5078 <strlen@plt>
   131cc:	cmp	r0, r5
   131d0:	ble	131e4 <rb_snprintf_try_append+0x48>
   131d4:	add	r0, r5, r6
   131d8:	mov	r1, #0
   131dc:	strb	r1, [r0, #-1]
   131e0:	b	13228 <rb_snprintf_try_append+0x8c>
   131e4:	add	r8, r6, r0
   131e8:	add	r3, fp, #8
   131ec:	mov	r7, r0
   131f0:	sub	r1, r5, r0
   131f4:	mov	r2, r9
   131f8:	mov	r0, r8
   131fc:	str	r3, [sp]
   13200:	bl	4e14 <vsnprintf@plt>
   13204:	mov	r4, r0
   13208:	cmp	r0, #0
   1320c:	bmi	13228 <rb_snprintf_try_append+0x8c>
   13210:	add	r4, r4, r7
   13214:	sub	r0, r5, #1
   13218:	cmp	r4, r0
   1321c:	movgt	r0, #0
   13220:	mvngt	r4, #0
   13224:	strbgt	r0, [r8]
   13228:	mov	r0, r4
   1322c:	sub	sp, fp, #24
   13230:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   13234:	add	sp, sp, #4
   13238:	bx	lr

0001323c <rb_basename>:
   1323c:	push	{r4, sl, fp, lr}
   13240:	add	fp, sp, #8
   13244:	mov	r1, #47	; 0x2f
   13248:	mov	r4, r0
   1324c:	bl	4ef8 <strrchr@plt>
   13250:	cmp	r0, #0
   13254:	addne	r4, r0, #1
   13258:	mov	r0, r4
   1325c:	bl	5078 <strlen@plt>
   13260:	add	r0, r0, #1
   13264:	bl	5228 <malloc@plt>
   13268:	cmp	r0, #0
   1326c:	beq	1327c <rb_basename+0x40>
   13270:	mov	r1, r4
   13274:	pop	{r4, sl, fp, lr}
   13278:	b	512c <strcpy@plt>
   1327c:	bl	5204 <rb_outofmemory@plt>

00013280 <rb_dirname>:
   13280:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13284:	add	fp, sp, #24
   13288:	mov	r1, #47	; 0x2f
   1328c:	mov	r4, r0
   13290:	bl	4ef8 <strrchr@plt>
   13294:	cmp	r0, #0
   13298:	beq	13314 <rb_dirname+0x94>
   1329c:	cmp	r0, r4
   132a0:	bls	132bc <rb_dirname+0x3c>
   132a4:	ldrb	r1, [r0]
   132a8:	cmp	r1, #47	; 0x2f
   132ac:	bne	132bc <rb_dirname+0x3c>
   132b0:	sub	r0, r0, #1
   132b4:	cmp	r0, r4
   132b8:	bhi	132a4 <rb_dirname+0x24>
   132bc:	sub	r8, r0, r4
   132c0:	add	r6, r8, #2
   132c4:	mov	r0, r6
   132c8:	bl	5228 <malloc@plt>
   132cc:	cmp	r0, #0
   132d0:	beq	13334 <rb_dirname+0xb4>
   132d4:	mov	r5, r0
   132d8:	mov	r0, r4
   132dc:	bl	5078 <strlen@plt>
   132e0:	cmp	r6, #0
   132e4:	beq	1330c <rb_dirname+0x8c>
   132e8:	cmp	r0, r6
   132ec:	mov	r7, r0
   132f0:	mov	r0, r5
   132f4:	mov	r1, r4
   132f8:	addcs	r7, r8, #1
   132fc:	mov	r2, r7
   13300:	bl	509c <memcpy@plt>
   13304:	mov	r0, #0
   13308:	strb	r0, [r5, r7]
   1330c:	mov	r0, r5
   13310:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13314:	mov	r0, #2
   13318:	bl	5228 <malloc@plt>
   1331c:	cmp	r0, #0
   13320:	movne	r5, r0
   13324:	movne	r0, #46	; 0x2e
   13328:	strhne	r0, [r5]
   1332c:	movne	r0, r5
   13330:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   13334:	bl	5204 <rb_outofmemory@plt>

00013338 <rb_fsnprint>:
   13338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1333c:	add	fp, sp, #28
   13340:	sub	sp, sp, #12
   13344:	cmp	r2, #0
   13348:	str	r0, [sp, #4]
   1334c:	beq	13470 <rb_fsnprint+0x138>
   13350:	sub	r0, r1, #1
   13354:	mov	r4, r2
   13358:	mov	r8, r1
   1335c:	mov	r9, #0
   13360:	str	r1, [sp]
   13364:	str	r0, [sp, #8]
   13368:	mov	r0, r1
   1336c:	ldr	r7, [r4]
   13370:	cmp	r7, #0
   13374:	beq	13384 <rb_fsnprint+0x4c>
   13378:	sub	r0, r8, r9
   1337c:	cmp	r7, r0
   13380:	bls	13390 <rb_fsnprint+0x58>
   13384:	cmp	r0, #0
   13388:	mov	r7, r0
   1338c:	beq	13480 <rb_fsnprint+0x148>
   13390:	ldr	r6, [r4, #4]
   13394:	cmp	r6, #0
   13398:	beq	133c8 <rb_fsnprint+0x90>
   1339c:	ldr	r0, [sp, #4]
   133a0:	add	sl, r0, r9
   133a4:	ldr	r0, [r4, #12]
   133a8:	cmp	r0, #0
   133ac:	beq	133f8 <rb_fsnprint+0xc0>
   133b0:	ldr	r3, [r0]
   133b4:	mov	r0, sl
   133b8:	mov	r1, r7
   133bc:	mov	r2, r6
   133c0:	bl	4e14 <vsnprintf@plt>
   133c4:	b	133e8 <rb_fsnprint+0xb0>
   133c8:	ldr	r3, [r4, #8]
   133cc:	cmp	r3, #0
   133d0:	beq	13438 <rb_fsnprint+0x100>
   133d4:	ldr	r0, [sp, #4]
   133d8:	ldr	r2, [r4, #12]
   133dc:	mov	r1, r7
   133e0:	add	r0, r0, r9
   133e4:	blx	r3
   133e8:	mov	r5, r0
   133ec:	cmp	r5, #0
   133f0:	bpl	1343c <rb_fsnprint+0x104>
   133f4:	b	13484 <rb_fsnprint+0x14c>
   133f8:	mov	r0, r6
   133fc:	bl	5078 <strlen@plt>
   13400:	cmp	r0, r7
   13404:	mov	r8, r0
   13408:	mov	r5, r0
   1340c:	mov	r0, sl
   13410:	mov	r1, r6
   13414:	subcs	r8, r7, #1
   13418:	mov	r2, r8
   1341c:	bl	509c <memcpy@plt>
   13420:	mov	r0, #0
   13424:	strb	r0, [sl, r8]
   13428:	ldr	r8, [sp]
   1342c:	cmp	r5, #0
   13430:	bpl	1343c <rb_fsnprint+0x104>
   13434:	b	13484 <rb_fsnprint+0x14c>
   13438:	mov	r5, #0
   1343c:	sub	r0, r7, #1
   13440:	cmp	r5, r0
   13444:	movls	r0, r5
   13448:	add	r9, r0, r9
   1344c:	ldr	r0, [sp, #8]
   13450:	cmp	r9, r0
   13454:	bcs	13478 <rb_fsnprint+0x140>
   13458:	ldr	r4, [r4, #16]
   1345c:	sub	r0, r7, r5
   13460:	mov	r5, r9
   13464:	cmp	r4, #0
   13468:	bne	1336c <rb_fsnprint+0x34>
   1346c:	b	13484 <rb_fsnprint+0x14c>
   13470:	mov	r5, #0
   13474:	b	13484 <rb_fsnprint+0x14c>
   13478:	ldr	r5, [sp, #8]
   1347c:	b	13484 <rb_fsnprint+0x14c>
   13480:	mov	r5, r9
   13484:	mov	r0, r5
   13488:	sub	sp, fp, #28
   1348c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013490 <rb_fsnprintf>:
   13490:	push	{fp, lr}
   13494:	mov	fp, sp
   13498:	sub	sp, sp, #24
   1349c:	str	r2, [sp, #16]
   134a0:	sub	r2, fp, #4
   134a4:	add	ip, fp, #8
   134a8:	str	r2, [sp, #12]
   134ac:	mov	r2, #0
   134b0:	str	ip, [fp, #-4]
   134b4:	str	r2, [sp, #8]
   134b8:	stm	sp, {r2, r3}
   134bc:	mov	r2, sp
   134c0:	bl	4f40 <rb_fsnprint@plt>
   134c4:	mov	sp, fp
   134c8:	pop	{fp, pc}

000134cc <rb_helper_child>:
   134cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d0:	add	fp, sp, #28
   134d4:	sub	sp, sp, #28
   134d8:	str	r2, [sp, #24]
   134dc:	mov	r4, r0
   134e0:	mov	r8, r3
   134e4:	mov	r9, r1
   134e8:	ldr	r0, [pc, #488]	; 136d8 <rb_helper_child+0x20c>
   134ec:	add	r0, pc, r0
   134f0:	bl	4e50 <getenv@plt>
   134f4:	mov	r7, r0
   134f8:	ldr	r0, [pc, #476]	; 136dc <rb_helper_child+0x210>
   134fc:	add	r0, pc, r0
   13500:	bl	4e50 <getenv@plt>
   13504:	mov	r5, r0
   13508:	ldr	r0, [pc, #464]	; 136e0 <rb_helper_child+0x214>
   1350c:	add	r0, pc, r0
   13510:	bl	4e50 <getenv@plt>
   13514:	mov	sl, #0
   13518:	cmp	r7, #0
   1351c:	beq	136c8 <rb_helper_child+0x1fc>
   13520:	cmp	r5, #0
   13524:	movne	r6, r0
   13528:	cmpne	r0, #0
   1352c:	beq	136c8 <rb_helper_child+0x1fc>
   13530:	mov	r0, #1
   13534:	mov	r1, #84	; 0x54
   13538:	str	r8, [sp, #12]
   1353c:	str	r4, [sp, #16]
   13540:	bl	4e98 <calloc@plt>
   13544:	cmp	r0, #0
   13548:	beq	136d4 <rb_helper_child+0x208>
   1354c:	mov	sl, r0
   13550:	mov	r0, r7
   13554:	mov	r1, #0
   13558:	mov	r2, #10
   1355c:	mov	r4, #0
   13560:	bl	5114 <strtol@plt>
   13564:	mov	r7, r0
   13568:	mov	r0, r5
   1356c:	mov	r1, #0
   13570:	mov	r2, #10
   13574:	bl	5114 <strtol@plt>
   13578:	mov	r5, r0
   1357c:	mov	r0, r6
   13580:	mov	r1, #0
   13584:	mov	r2, #10
   13588:	bl	5114 <strtol@plt>
   1358c:	mov	r8, r0
   13590:	cmp	r0, #1
   13594:	bge	135a8 <rb_helper_child+0xdc>
   13598:	b	135c0 <rb_helper_child+0xf4>
   1359c:	add	r4, r4, #1
   135a0:	cmp	r8, r4
   135a4:	beq	135c0 <rb_helper_child+0xf4>
   135a8:	cmp	r7, r4
   135ac:	cmpne	r5, r4
   135b0:	beq	1359c <rb_helper_child+0xd0>
   135b4:	mov	r0, r4
   135b8:	bl	51c8 <close@plt>
   135bc:	b	1359c <rb_helper_child+0xd0>
   135c0:	str	r9, [sp, #20]
   135c4:	mov	r1, #2
   135c8:	ldr	r0, [pc, #276]	; 136e4 <rb_helper_child+0x218>
   135cc:	add	r0, pc, r0
   135d0:	bl	4c64 <open@plt>
   135d4:	cmp	r7, #0
   135d8:	mov	r9, r0
   135dc:	cmpne	r5, #0
   135e0:	beq	135f0 <rb_helper_child+0x124>
   135e4:	mov	r0, r9
   135e8:	mov	r1, #0
   135ec:	bl	5324 <dup2@plt>
   135f0:	cmp	r7, #1
   135f4:	cmpne	r5, #1
   135f8:	beq	13608 <rb_helper_child+0x13c>
   135fc:	mov	r0, r9
   13600:	mov	r1, #1
   13604:	bl	5324 <dup2@plt>
   13608:	cmp	r7, #2
   1360c:	cmpne	r5, #2
   13610:	beq	13620 <rb_helper_child+0x154>
   13614:	mov	r0, r9
   13618:	mov	r1, #2
   1361c:	bl	5324 <dup2@plt>
   13620:	ldr	r4, [fp, #20]
   13624:	ldr	r6, [fp, #16]
   13628:	ldr	r2, [fp, #8]
   1362c:	cmp	r9, #3
   13630:	blt	13644 <rb_helper_child+0x178>
   13634:	mov	r0, r9
   13638:	mov	r9, r2
   1363c:	bl	51c8 <close@plt>
   13640:	mov	r2, r9
   13644:	ldr	r0, [sp, #24]
   13648:	ldr	r1, [sp, #12]
   1364c:	mov	r3, #0
   13650:	str	r8, [sp]
   13654:	str	r6, [sp, #4]
   13658:	str	r4, [sp, #8]
   1365c:	bl	52ac <rb_lib_init@plt>
   13660:	ldr	r0, [fp, #12]
   13664:	bl	53a8 <rb_linebuf_init@plt>
   13668:	add	r0, sl, #4
   1366c:	bl	5354 <rb_linebuf_newbuf@plt>
   13670:	add	r0, sl, #32
   13674:	bl	5354 <rb_linebuf_newbuf@plt>
   13678:	ldr	r2, [pc, #104]	; 136e8 <rb_helper_child+0x21c>
   1367c:	mov	r0, r7
   13680:	mov	r1, #8
   13684:	add	r2, pc, r2
   13688:	bl	52f4 <rb_open@plt>
   1368c:	str	r0, [sl, #60]	; 0x3c
   13690:	mov	r0, r5
   13694:	mov	r1, #8
   13698:	ldr	r2, [pc, #76]	; 136ec <rb_helper_child+0x220>
   1369c:	add	r2, pc, r2
   136a0:	bl	52f4 <rb_open@plt>
   136a4:	str	r0, [sl, #64]	; 0x40
   136a8:	ldr	r0, [sl, #60]	; 0x3c
   136ac:	bl	4ec8 <rb_set_nb@plt>
   136b0:	ldr	r0, [sl, #64]	; 0x40
   136b4:	bl	4ec8 <rb_set_nb@plt>
   136b8:	ldr	r0, [sp, #16]
   136bc:	str	r0, [sl, #76]	; 0x4c
   136c0:	ldr	r0, [sp, #20]
   136c4:	str	r0, [sl, #80]	; 0x50
   136c8:	mov	r0, sl
   136cc:	sub	sp, fp, #28
   136d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d4:	bl	5204 <rb_outofmemory@plt>
   136d8:	.word	0x000076a0
   136dc:	.word	0x00007694
   136e0:	.word	0x00007688
   136e4:	.word	0x000075ce
   136e8:	.word	0x00007520
   136ec:	.word	0x0000751c

000136f0 <rb_helper_start>:
   136f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136f4:	add	fp, sp, #28
   136f8:	sub	sp, sp, #196	; 0xc4
   136fc:	mov	r9, r0
   13700:	mov	r8, r1
   13704:	mov	r0, r1
   13708:	mov	r1, #1
   1370c:	mov	r5, r3
   13710:	mov	r6, r2
   13714:	bl	4fdc <access@plt>
   13718:	mov	r4, #0
   1371c:	cmn	r0, #1
   13720:	beq	13904 <rb_helper_start+0x214>
   13724:	mov	r0, #1
   13728:	mov	r1, #84	; 0x54
   1372c:	bl	4e98 <calloc@plt>
   13730:	cmp	r0, #0
   13734:	beq	13910 <rb_helper_start+0x220>
   13738:	ldr	r2, [pc, #468]	; 13914 <rb_helper_start+0x224>
   1373c:	add	r7, sp, #60	; 0x3c
   13740:	mov	sl, r0
   13744:	mov	r1, #128	; 0x80
   13748:	mov	r3, r9
   1374c:	mov	r0, r7
   13750:	add	r2, pc, r2
   13754:	bl	5408 <snprintf@plt>
   13758:	add	r0, sp, #20
   1375c:	mov	r2, r7
   13760:	add	r1, r0, #4
   13764:	bl	51ec <rb_pipe@plt>
   13768:	cmn	r0, #1
   1376c:	ble	138fc <rb_helper_start+0x20c>
   13770:	str	r5, [sp, #8]
   13774:	str	r6, [sp, #4]
   13778:	add	r5, sp, #60	; 0x3c
   1377c:	mov	r1, #128	; 0x80
   13780:	mov	r3, r9
   13784:	ldr	r2, [pc, #396]	; 13918 <rb_helper_start+0x228>
   13788:	mov	r0, r5
   1378c:	add	r2, pc, r2
   13790:	bl	5408 <snprintf@plt>
   13794:	add	r0, sp, #12
   13798:	mov	r2, r5
   1379c:	add	r1, r0, #4
   137a0:	bl	51ec <rb_pipe@plt>
   137a4:	cmn	r0, #1
   137a8:	ble	138fc <rb_helper_start+0x20c>
   137ac:	ldr	r0, [sp, #24]
   137b0:	bl	4da8 <rb_get_fd@plt>
   137b4:	ldr	r7, [pc, #352]	; 1391c <rb_helper_start+0x22c>
   137b8:	add	r6, sp, #44	; 0x2c
   137bc:	mov	r3, r0
   137c0:	mov	r1, #16
   137c4:	mov	r0, r6
   137c8:	add	r7, pc, r7
   137cc:	mov	r2, r7
   137d0:	bl	5408 <snprintf@plt>
   137d4:	ldr	r0, [sp, #12]
   137d8:	bl	4da8 <rb_get_fd@plt>
   137dc:	add	r4, sp, #28
   137e0:	mov	r3, r0
   137e4:	mov	r1, #16
   137e8:	mov	r2, r7
   137ec:	mov	r0, r4
   137f0:	bl	5408 <snprintf@plt>
   137f4:	ldr	r0, [sp, #20]
   137f8:	bl	4ec8 <rb_set_nb@plt>
   137fc:	ldr	r0, [sp, #24]
   13800:	bl	4ec8 <rb_set_nb@plt>
   13804:	ldr	r0, [sp, #12]
   13808:	bl	4ec8 <rb_set_nb@plt>
   1380c:	ldr	r0, [sp, #16]
   13810:	bl	4ec8 <rb_set_nb@plt>
   13814:	ldr	r0, [pc, #260]	; 13920 <rb_helper_start+0x230>
   13818:	mov	r1, r4
   1381c:	mov	r2, #1
   13820:	add	r0, pc, r0
   13824:	bl	4d90 <rb_setenv@plt>
   13828:	ldr	r0, [pc, #244]	; 13924 <rb_helper_start+0x234>
   1382c:	mov	r1, r6
   13830:	mov	r2, #1
   13834:	add	r0, pc, r0
   13838:	bl	4d90 <rb_setenv@plt>
   1383c:	ldr	r0, [pc, #228]	; 13928 <rb_helper_start+0x238>
   13840:	ldr	r1, [pc, #228]	; 1392c <rb_helper_start+0x23c>
   13844:	mov	r2, #1
   13848:	add	r0, pc, r0
   1384c:	add	r1, pc, r1
   13850:	bl	4d90 <rb_setenv@plt>
   13854:	ldr	r2, [pc, #212]	; 13930 <rb_helper_start+0x240>
   13858:	mov	r0, r5
   1385c:	mov	r1, #128	; 0x80
   13860:	mov	r3, r9
   13864:	add	r2, pc, r2
   13868:	bl	5408 <snprintf@plt>
   1386c:	mov	r4, #0
   13870:	sub	r1, fp, #36	; 0x24
   13874:	mov	r0, r8
   13878:	str	r4, [fp, #-32]	; 0xffffffe0
   1387c:	str	r5, [fp, #-36]	; 0xffffffdc
   13880:	bl	53f0 <rb_spawn_process@plt>
   13884:	cmn	r0, #1
   13888:	beq	138dc <rb_helper_start+0x1ec>
   1388c:	mov	r5, r0
   13890:	ldr	r0, [sp, #24]
   13894:	bl	5108 <rb_close@plt>
   13898:	ldr	r0, [sp, #12]
   1389c:	bl	5108 <rb_close@plt>
   138a0:	add	r0, sl, #4
   138a4:	bl	5354 <rb_linebuf_newbuf@plt>
   138a8:	add	r0, sl, #32
   138ac:	bl	5354 <rb_linebuf_newbuf@plt>
   138b0:	ldr	r0, [sp, #20]
   138b4:	add	r2, sl, #60	; 0x3c
   138b8:	ldr	r1, [sp, #16]
   138bc:	stm	r2, {r0, r1, r5}
   138c0:	ldr	r0, [sp, #4]
   138c4:	str	r4, [sl, #72]	; 0x48
   138c8:	mov	r4, sl
   138cc:	str	r0, [sl, #76]	; 0x4c
   138d0:	ldr	r0, [sp, #8]
   138d4:	str	r0, [sl, #80]	; 0x50
   138d8:	b	13904 <rb_helper_start+0x214>
   138dc:	ldr	r0, [sp, #20]
   138e0:	bl	5108 <rb_close@plt>
   138e4:	ldr	r0, [sp, #24]
   138e8:	bl	5108 <rb_close@plt>
   138ec:	ldr	r0, [sp, #12]
   138f0:	bl	5108 <rb_close@plt>
   138f4:	ldr	r0, [sp, #16]
   138f8:	bl	5108 <rb_close@plt>
   138fc:	mov	r0, sl
   13900:	bl	4f94 <free@plt>
   13904:	mov	r0, r4
   13908:	sub	sp, fp, #28
   1390c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13910:	bl	5204 <rb_outofmemory@plt>
   13914:	.word	0x0000747c
   13918:	.word	0x00007451
   1391c:	.word	0x00006779
   13920:	.word	0x0000736c
   13924:	.word	0x0000735c
   13928:	.word	0x0000734c
   1392c:	.word	0x000073a3
   13930:	.word	0x0000738f

00013934 <rb_helper_restart>:
   13934:	ldr	r1, [r0, #80]	; 0x50
   13938:	bx	r1

0001393c <rb_helper_write_queue>:
   1393c:	sub	sp, sp, #8
   13940:	push	{fp, lr}
   13944:	mov	fp, sp
   13948:	sub	sp, sp, #24
   1394c:	str	r2, [fp, #8]
   13950:	add	r2, fp, #8
   13954:	str	r3, [fp, #12]
   13958:	sub	r3, fp, #4
   1395c:	add	r0, r0, #4
   13960:	str	r2, [fp, #-4]
   13964:	mov	r2, #0
   13968:	str	r2, [sp, #16]
   1396c:	stmib	sp, {r1, r2, r3}
   13970:	mov	r1, sp
   13974:	str	r2, [sp]
   13978:	bl	5444 <rb_linebuf_put@plt>
   1397c:	mov	sp, fp
   13980:	pop	{fp, lr}
   13984:	add	sp, sp, #8
   13988:	bx	lr

0001398c <rb_helper_write_flush>:
   1398c:	push	{r4, r5, r6, sl, fp, lr}
   13990:	add	fp, sp, #16
   13994:	mov	r4, r0
   13998:	ldr	r0, [r0, #16]
   1399c:	cmp	r0, #1
   139a0:	blt	13a00 <rb_helper_write_flush+0x74>
   139a4:	ldr	r6, [r4, #64]	; 0x40
   139a8:	add	r5, r4, #4
   139ac:	mov	r0, r6
   139b0:	mov	r1, r5
   139b4:	bl	5060 <rb_linebuf_flush@plt>
   139b8:	cmp	r0, #0
   139bc:	bgt	139ac <rb_helper_write_flush+0x20>
   139c0:	beq	13a04 <rb_helper_write_flush+0x78>
   139c4:	bl	5540 <__errno_location@plt>
   139c8:	ldr	r0, [r0]
   139cc:	bl	4cc4 <rb_ignore_errno@plt>
   139d0:	cmp	r0, #0
   139d4:	beq	13a04 <rb_helper_write_flush+0x78>
   139d8:	ldr	r0, [r4, #16]
   139dc:	cmp	r0, #1
   139e0:	blt	13a00 <rb_helper_write_flush+0x74>
   139e4:	ldr	r0, [r4, #64]	; 0x40
   139e8:	ldr	r2, [pc, #36]	; 13a14 <rb_helper_write_flush+0x88>
   139ec:	mov	r1, #2
   139f0:	mov	r3, r4
   139f4:	add	r2, pc, r2
   139f8:	pop	{r4, r5, r6, sl, fp, lr}
   139fc:	b	4d6c <rb_setselect@plt>
   13a00:	pop	{r4, r5, r6, sl, fp, pc}
   13a04:	ldr	r1, [r4, #80]	; 0x50
   13a08:	mov	r0, r4
   13a0c:	pop	{r4, r5, r6, sl, fp, lr}
   13a10:	bx	r1
   13a14:	.word	0x0000001c

00013a18 <rb_helper_write_sendq>:
   13a18:	push	{r4, r5, r6, sl, fp, lr}
   13a1c:	add	fp, sp, #16
   13a20:	mov	r5, r0
   13a24:	ldr	r0, [r1, #16]
   13a28:	cmp	r0, #1
   13a2c:	blt	13a8c <rb_helper_write_sendq+0x74>
   13a30:	mov	r4, r1
   13a34:	add	r6, r1, #4
   13a38:	mov	r0, r5
   13a3c:	mov	r1, r6
   13a40:	bl	5060 <rb_linebuf_flush@plt>
   13a44:	cmp	r0, #0
   13a48:	bgt	13a38 <rb_helper_write_sendq+0x20>
   13a4c:	beq	13a90 <rb_helper_write_sendq+0x78>
   13a50:	bl	5540 <__errno_location@plt>
   13a54:	ldr	r0, [r0]
   13a58:	bl	4cc4 <rb_ignore_errno@plt>
   13a5c:	cmp	r0, #0
   13a60:	beq	13a90 <rb_helper_write_sendq+0x78>
   13a64:	ldr	r0, [r4, #16]
   13a68:	cmp	r0, #1
   13a6c:	blt	13a8c <rb_helper_write_sendq+0x74>
   13a70:	ldr	r0, [r4, #64]	; 0x40
   13a74:	ldr	r2, [pc, #36]	; 13aa0 <rb_helper_write_sendq+0x88>
   13a78:	mov	r1, #2
   13a7c:	mov	r3, r4
   13a80:	add	r2, pc, r2
   13a84:	pop	{r4, r5, r6, sl, fp, lr}
   13a88:	b	4d6c <rb_setselect@plt>
   13a8c:	pop	{r4, r5, r6, sl, fp, pc}
   13a90:	ldr	r1, [r4, #80]	; 0x50
   13a94:	mov	r0, r4
   13a98:	pop	{r4, r5, r6, sl, fp, lr}
   13a9c:	bx	r1
   13aa0:	.word	0xffffff90

00013aa4 <rb_helper_write>:
   13aa4:	sub	sp, sp, #8
   13aa8:	push	{r4, r5, r6, sl, fp, lr}
   13aac:	add	fp, sp, #16
   13ab0:	sub	sp, sp, #24
   13ab4:	mov	r4, r0
   13ab8:	add	r0, fp, #8
   13abc:	str	r2, [fp, #8]
   13ac0:	add	r2, sp, #20
   13ac4:	str	r3, [fp, #12]
   13ac8:	str	r0, [sp, #20]
   13acc:	mov	r0, #0
   13ad0:	add	r5, r4, #4
   13ad4:	str	r0, [sp, #16]
   13ad8:	str	r2, [sp, #12]
   13adc:	str	r0, [sp, #8]
   13ae0:	stm	sp, {r0, r1}
   13ae4:	mov	r1, sp
   13ae8:	mov	r0, r5
   13aec:	bl	5444 <rb_linebuf_put@plt>
   13af0:	ldr	r0, [r4, #16]
   13af4:	cmp	r0, #1
   13af8:	blt	13b60 <rb_helper_write+0xbc>
   13afc:	ldr	r6, [r4, #64]	; 0x40
   13b00:	mov	r0, r6
   13b04:	mov	r1, r5
   13b08:	bl	5060 <rb_linebuf_flush@plt>
   13b0c:	cmp	r0, #0
   13b10:	bgt	13b00 <rb_helper_write+0x5c>
   13b14:	beq	13b54 <rb_helper_write+0xb0>
   13b18:	bl	5540 <__errno_location@plt>
   13b1c:	ldr	r0, [r0]
   13b20:	bl	4cc4 <rb_ignore_errno@plt>
   13b24:	cmp	r0, #0
   13b28:	beq	13b54 <rb_helper_write+0xb0>
   13b2c:	ldr	r0, [r4, #16]
   13b30:	cmp	r0, #1
   13b34:	blt	13b60 <rb_helper_write+0xbc>
   13b38:	ldr	r0, [r4, #64]	; 0x40
   13b3c:	ldr	r2, [pc, #44]	; 13b70 <rb_helper_write+0xcc>
   13b40:	mov	r1, #2
   13b44:	mov	r3, r4
   13b48:	add	r2, pc, r2
   13b4c:	bl	4d6c <rb_setselect@plt>
   13b50:	b	13b60 <rb_helper_write+0xbc>
   13b54:	ldr	r1, [r4, #80]	; 0x50
   13b58:	mov	r0, r4
   13b5c:	blx	r1
   13b60:	sub	sp, fp, #16
   13b64:	pop	{r4, r5, r6, sl, fp, lr}
   13b68:	add	sp, sp, #8
   13b6c:	bx	lr
   13b70:	.word	0xfffffec8

00013b74 <rb_helper_run>:
   13b74:	cmp	r0, #0
   13b78:	bxeq	lr
   13b7c:	mov	r1, r0
   13b80:	ldr	r0, [r0, #60]	; 0x3c
   13b84:	b	13b88 <rb_helper_read_cb>

00013b88 <rb_helper_read_cb>:
   13b88:	push	{r4, r5, r6, sl, fp, lr}
   13b8c:	add	fp, sp, #16
   13b90:	cmp	r1, #0
   13b94:	beq	13c38 <rb_helper_read_cb+0xb0>
   13b98:	mov	r4, r1
   13b9c:	ldr	r0, [r1, #60]	; 0x3c
   13ba0:	ldr	r1, [pc, #164]	; 13c4c <rb_helper_read_cb+0xc4>
   13ba4:	mov	r2, #32768	; 0x8000
   13ba8:	add	r1, pc, r1
   13bac:	bl	5024 <rb_read@plt>
   13bb0:	mov	r2, r0
   13bb4:	cmp	r0, #1
   13bb8:	blt	13c00 <rb_helper_read_cb+0x78>
   13bbc:	ldr	r6, [pc, #140]	; 13c50 <rb_helper_read_cb+0xc8>
   13bc0:	add	r5, r4, #32
   13bc4:	add	r6, pc, r6
   13bc8:	mov	r0, r5
   13bcc:	mov	r1, r6
   13bd0:	mov	r3, #0
   13bd4:	bl	4f28 <rb_linebuf_parse@plt>
   13bd8:	ldr	r1, [r4, #76]	; 0x4c
   13bdc:	mov	r0, r4
   13be0:	blx	r1
   13be4:	ldr	r0, [r4, #60]	; 0x3c
   13be8:	mov	r1, r6
   13bec:	mov	r2, #32768	; 0x8000
   13bf0:	bl	5024 <rb_read@plt>
   13bf4:	mov	r2, r0
   13bf8:	cmp	r0, #0
   13bfc:	bgt	13bc8 <rb_helper_read_cb+0x40>
   13c00:	cmp	r2, #0
   13c04:	beq	13c3c <rb_helper_read_cb+0xb4>
   13c08:	bl	5540 <__errno_location@plt>
   13c0c:	ldr	r0, [r0]
   13c10:	bl	4cc4 <rb_ignore_errno@plt>
   13c14:	cmp	r0, #0
   13c18:	beq	13c3c <rb_helper_read_cb+0xb4>
   13c1c:	ldr	r0, [r4, #60]	; 0x3c
   13c20:	ldr	r2, [pc, #44]	; 13c54 <rb_helper_read_cb+0xcc>
   13c24:	mov	r1, #1
   13c28:	mov	r3, r4
   13c2c:	add	r2, pc, r2
   13c30:	pop	{r4, r5, r6, sl, fp, lr}
   13c34:	b	4d6c <rb_setselect@plt>
   13c38:	pop	{r4, r5, r6, sl, fp, pc}
   13c3c:	ldr	r1, [r4, #80]	; 0x50
   13c40:	mov	r0, r4
   13c44:	pop	{r4, r5, r6, sl, fp, lr}
   13c48:	bx	r1
   13c4c:	.word	0x0002d728
   13c50:	.word	0x0002d70c
   13c54:	.word	0xffffff54

00013c58 <rb_helper_close>:
   13c58:	cmp	r0, #0
   13c5c:	bxeq	lr
   13c60:	push	{r4, sl, fp, lr}
   13c64:	add	fp, sp, #8
   13c68:	mov	r4, r0
   13c6c:	ldr	r0, [r0, #68]	; 0x44
   13c70:	mov	r1, #9
   13c74:	bl	4f88 <rb_kill@plt>
   13c78:	ldr	r0, [r4, #60]	; 0x3c
   13c7c:	bl	5108 <rb_close@plt>
   13c80:	ldr	r0, [r4, #64]	; 0x40
   13c84:	bl	5108 <rb_close@plt>
   13c88:	mov	r0, r4
   13c8c:	pop	{r4, sl, fp, lr}
   13c90:	b	4f94 <free@plt>

00013c94 <rb_helper_read>:
   13c94:	push	{fp, lr}
   13c98:	mov	fp, sp
   13c9c:	sub	sp, sp, #8
   13ca0:	mov	r3, #0
   13ca4:	add	r0, r0, #32
   13ca8:	str	r3, [sp]
   13cac:	mov	r3, #0
   13cb0:	bl	503c <rb_linebuf_get@plt>
   13cb4:	mov	sp, fp
   13cb8:	pop	{fp, pc}

00013cbc <rb_helper_loop>:
   13cbc:	push	{fp, lr}
   13cc0:	mov	fp, sp
   13cc4:	mov	r4, r1
   13cc8:	bl	4c4c <rb_helper_run@plt>
   13ccc:	mov	r0, r4
   13cd0:	bl	4fe8 <rb_lib_loop@plt>

00013cd4 <rb_init_netio_devpoll>:
   13cd4:	mov	r0, #38	; 0x26
   13cd8:	bx	lr

00013cdc <rb_setselect_devpoll>:
   13cdc:	push	{fp, lr}
   13ce0:	mov	fp, sp
   13ce4:	bl	5540 <__errno_location@plt>
   13ce8:	mov	r1, #38	; 0x26
   13cec:	str	r1, [r0]
   13cf0:	pop	{fp, pc}

00013cf4 <rb_select_devpoll>:
   13cf4:	push	{fp, lr}
   13cf8:	mov	fp, sp
   13cfc:	bl	5540 <__errno_location@plt>
   13d00:	mov	r1, #38	; 0x26
   13d04:	str	r1, [r0]
   13d08:	mvn	r0, #0
   13d0c:	pop	{fp, pc}

00013d10 <rb_setup_fd_devpoll>:
   13d10:	push	{fp, lr}
   13d14:	mov	fp, sp
   13d18:	bl	5540 <__errno_location@plt>
   13d1c:	mov	r1, #38	; 0x26
   13d20:	str	r1, [r0]
   13d24:	mvn	r0, #0
   13d28:	pop	{fp, pc}

00013d2c <rb_init_netio_epoll>:
   13d2c:	push	{r4, sl, fp, lr}
   13d30:	add	fp, sp, #8
   13d34:	ldr	r0, [pc, #160]	; 13ddc <rb_init_netio_epoll+0xb0>
   13d38:	mov	r1, #0
   13d3c:	add	r0, pc, r0
   13d40:	strb	r1, [r0]
   13d44:	ldr	r0, [pc, #148]	; 13de0 <rb_init_netio_epoll+0xb4>
   13d48:	add	r0, pc, r0
   13d4c:	str	r1, [r0]
   13d50:	mov	r0, #1
   13d54:	mov	r1, #12
   13d58:	bl	4e98 <calloc@plt>
   13d5c:	cmp	r0, #0
   13d60:	beq	13dd0 <rb_init_netio_epoll+0xa4>
   13d64:	ldr	r1, [pc, #120]	; 13de4 <rb_init_netio_epoll+0xb8>
   13d68:	add	r1, pc, r1
   13d6c:	str	r0, [r1]
   13d70:	bl	4ca0 <getdtablesize@plt>
   13d74:	ldr	r1, [pc, #108]	; 13de8 <rb_init_netio_epoll+0xbc>
   13d78:	ldr	r1, [pc, r1]
   13d7c:	str	r0, [r1, #8]
   13d80:	bl	4db4 <epoll_create@plt>
   13d84:	ldr	r1, [pc, #96]	; 13dec <rb_init_netio_epoll+0xc0>
   13d88:	cmp	r0, #0
   13d8c:	ldr	r1, [pc, r1]
   13d90:	str	r0, [r1]
   13d94:	bmi	13dd4 <rb_init_netio_epoll+0xa8>
   13d98:	ldr	r2, [pc, #80]	; 13df0 <rb_init_netio_epoll+0xc4>
   13d9c:	mov	r1, #64	; 0x40
   13da0:	add	r2, pc, r2
   13da4:	bl	52f4 <rb_open@plt>
   13da8:	ldr	r4, [pc, #68]	; 13df4 <rb_init_netio_epoll+0xc8>
   13dac:	ldr	r4, [pc, r4]
   13db0:	ldr	r0, [r4, #8]
   13db4:	lsl	r1, r0, #4
   13db8:	mov	r0, #1
   13dbc:	bl	4e98 <calloc@plt>
   13dc0:	cmp	r0, #0
   13dc4:	strne	r0, [r4, #4]
   13dc8:	movne	r0, #0
   13dcc:	popne	{r4, sl, fp, pc}
   13dd0:	bl	5204 <rb_outofmemory@plt>
   13dd4:	mvn	r0, #0
   13dd8:	pop	{r4, sl, fp, pc}
   13ddc:	.word	0x00035598
   13de0:	.word	0x00035588
   13de4:	.word	0x00035570
   13de8:	.word	0x00035560
   13dec:	.word	0x0003554c
   13df0:	.word	0x00006e63
   13df4:	.word	0x0003552c

00013df8 <rb_setup_fd_epoll>:
   13df8:	mov	r0, #0
   13dfc:	bx	lr

00013e00 <rb_setselect_epoll>:
   13e00:	push	{fp, lr}
   13e04:	mov	fp, sp
   13e08:	sub	sp, sp, #16
   13e0c:	ldr	ip, [r0, #20]
   13e10:	tst	r1, #1
   13e14:	mov	lr, ip
   13e18:	beq	13e34 <rb_setselect_epoll+0x34>
   13e1c:	cmp	r2, #0
   13e20:	orr	lr, ip, #1
   13e24:	str	r2, [r0, #28]
   13e28:	str	r3, [r0, #32]
   13e2c:	biceq	lr, ip, #1
   13e30:	str	lr, [r0, #20]
   13e34:	tst	r1, #2
   13e38:	bne	13e68 <rb_setselect_epoll+0x68>
   13e3c:	mov	r3, lr
   13e40:	orrs	r1, r3, ip
   13e44:	beq	13ecc <rb_setselect_epoll+0xcc>
   13e48:	cmp	r3, #1
   13e4c:	blt	13e8c <rb_setselect_epoll+0x8c>
   13e50:	cmp	ip, #0
   13e54:	beq	13e9c <rb_setselect_epoll+0x9c>
   13e58:	mov	r1, #3
   13e5c:	cmp	r3, ip
   13e60:	bne	13ea0 <rb_setselect_epoll+0xa0>
   13e64:	b	13ecc <rb_setselect_epoll+0xcc>
   13e68:	cmp	r2, #0
   13e6c:	str	r2, [r0, #36]	; 0x24
   13e70:	str	r3, [r0, #40]	; 0x28
   13e74:	orr	r3, lr, #4
   13e78:	biceq	r3, lr, #4
   13e7c:	str	r3, [r0, #20]
   13e80:	orrs	r1, r3, ip
   13e84:	bne	13e48 <rb_setselect_epoll+0x48>
   13e88:	b	13ecc <rb_setselect_epoll+0xcc>
   13e8c:	str	r0, [sp, #8]
   13e90:	str	r3, [sp]
   13e94:	mov	r1, #2
   13e98:	b	13eac <rb_setselect_epoll+0xac>
   13e9c:	mov	r1, #1
   13ea0:	orr	r2, r3, #-2147483648	; 0x80000000
   13ea4:	str	r0, [sp, #8]
   13ea8:	str	r2, [sp]
   13eac:	ldr	r2, [r0, #12]
   13eb0:	ldr	r0, [pc, #60]	; 13ef4 <rb_setselect_epoll+0xf4>
   13eb4:	mov	r3, sp
   13eb8:	ldr	r0, [pc, r0]
   13ebc:	ldr	r0, [r0]
   13ec0:	bl	54b0 <epoll_ctl@plt>
   13ec4:	cmp	r0, #0
   13ec8:	bne	13ed4 <rb_setselect_epoll+0xd4>
   13ecc:	mov	sp, fp
   13ed0:	pop	{fp, pc}
   13ed4:	bl	5540 <__errno_location@plt>
   13ed8:	ldr	r0, [r0]
   13edc:	bl	4c88 <strerror@plt>
   13ee0:	mov	r1, r0
   13ee4:	ldr	r0, [pc, #12]	; 13ef8 <rb_setselect_epoll+0xf8>
   13ee8:	add	r0, pc, r0
   13eec:	bl	51a4 <rb_lib_log@plt>
   13ef0:	bl	4cac <abort@plt>
   13ef4:	.word	0x00035420
   13ef8:	.word	0x00006d31

00013efc <rb_select_epoll>:
   13efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f00:	add	fp, sp, #28
   13f04:	sub	sp, sp, #20
   13f08:	ldr	r2, [pc, #392]	; 14098 <rb_select_epoll+0x19c>
   13f0c:	mov	r3, r0
   13f10:	ldr	r2, [pc, r2]
   13f14:	ldm	r2, {r0, r1, r2}
   13f18:	bl	5048 <epoll_wait@plt>
   13f1c:	mov	r4, r0
   13f20:	bl	5540 <__errno_location@plt>
   13f24:	ldr	r6, [r0]
   13f28:	mov	sl, r0
   13f2c:	bl	5210 <rb_set_time@plt>
   13f30:	cmn	r4, #1
   13f34:	str	r6, [sl]
   13f38:	ble	14078 <rb_select_epoll+0x17c>
   13f3c:	cmp	r4, #0
   13f40:	beq	1406c <rb_select_epoll+0x170>
   13f44:	mov	r6, #0
   13f48:	mov	r9, sp
   13f4c:	mov	r5, #0
   13f50:	b	13f60 <rb_select_epoll+0x64>
   13f54:	add	r5, r5, #1
   13f58:	cmp	r4, r5
   13f5c:	beq	1406c <rb_select_epoll+0x170>
   13f60:	ldr	r0, [pc, #308]	; 1409c <rb_select_epoll+0x1a0>
   13f64:	ldr	r0, [pc, r0]
   13f68:	ldr	r0, [r0, #4]
   13f6c:	ldrb	r1, [r0, r5, lsl #4]!
   13f70:	ldr	r7, [r0, #8]
   13f74:	tst	r1, #25
   13f78:	ldr	r8, [r7, #20]
   13f7c:	beq	13fa0 <rb_select_epoll+0xa4>
   13f80:	ldr	r2, [r7, #28]
   13f84:	ldr	r1, [r7, #32]
   13f88:	str	r6, [r7, #28]
   13f8c:	str	r6, [r7, #32]
   13f90:	cmp	r2, #0
   13f94:	beq	13fa0 <rb_select_epoll+0xa4>
   13f98:	mov	r0, r7
   13f9c:	blx	r2
   13fa0:	ldrb	r0, [r7, #16]
   13fa4:	tst	r0, #1
   13fa8:	beq	13f54 <rb_select_epoll+0x58>
   13fac:	ldr	r0, [pc, #236]	; 140a0 <rb_select_epoll+0x1a4>
   13fb0:	ldr	r0, [pc, r0]
   13fb4:	ldr	r0, [r0, #4]
   13fb8:	ldrb	r0, [r0, r5, lsl #4]
   13fbc:	tst	r0, #28
   13fc0:	beq	13ff0 <rb_select_epoll+0xf4>
   13fc4:	ldr	r2, [r7, #36]	; 0x24
   13fc8:	ldr	r1, [r7, #40]	; 0x28
   13fcc:	str	r6, [r7, #36]	; 0x24
   13fd0:	str	r6, [r7, #40]	; 0x28
   13fd4:	cmp	r2, #0
   13fd8:	beq	13ff0 <rb_select_epoll+0xf4>
   13fdc:	mov	r0, r7
   13fe0:	blx	r2
   13fe4:	ldrb	r0, [r7, #16]
   13fe8:	tst	r0, #1
   13fec:	beq	13f54 <rb_select_epoll+0x58>
   13ff0:	ldr	r0, [r7, #28]
   13ff4:	ldr	r1, [r7, #36]	; 0x24
   13ff8:	cmp	r0, #0
   13ffc:	movwne	r0, #1
   14000:	cmp	r1, #0
   14004:	orrne	r0, r0, #4
   14008:	cmp	r8, r0
   1400c:	beq	13f54 <rb_select_epoll+0x58>
   14010:	cmp	r0, #0
   14014:	str	r0, [sp]
   14018:	str	r0, [r7, #20]
   1401c:	str	r7, [sp, #8]
   14020:	mov	r1, #3
   14024:	mov	r3, r9
   14028:	orrne	r0, r0, #-2147483648	; 0x80000000
   1402c:	movweq	r1, #2
   14030:	strne	r0, [sp]
   14034:	ldr	r2, [r7, #12]
   14038:	ldr	r0, [pc, #100]	; 140a4 <rb_select_epoll+0x1a8>
   1403c:	ldr	r0, [pc, r0]
   14040:	ldr	r0, [r0]
   14044:	bl	54b0 <epoll_ctl@plt>
   14048:	cmp	r0, #0
   1404c:	beq	13f54 <rb_select_epoll+0x58>
   14050:	ldr	r0, [sl]
   14054:	bl	4c88 <strerror@plt>
   14058:	mov	r1, r0
   1405c:	ldr	r0, [pc, #68]	; 140a8 <rb_select_epoll+0x1ac>
   14060:	add	r0, pc, r0
   14064:	bl	51a4 <rb_lib_log@plt>
   14068:	b	13f54 <rb_select_epoll+0x58>
   1406c:	mov	r0, #0
   14070:	sub	sp, fp, #28
   14074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14078:	mov	r0, r6
   1407c:	bl	4cc4 <rb_ignore_errno@plt>
   14080:	mov	r1, r0
   14084:	mov	r0, #0
   14088:	cmp	r1, #0
   1408c:	movweq	r0, #5
   14090:	sub	sp, fp, #28
   14094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14098:	.word	0x000353c8
   1409c:	.word	0x00035374
   140a0:	.word	0x00035328
   140a4:	.word	0x0003529c
   140a8:	.word	0x00006be4

000140ac <rb_epoll_supports_event>:
   140ac:	push	{r4, r5, r6, sl, fp, lr}
   140b0:	add	fp, sp, #16
   140b4:	sub	sp, sp, #288	; 0x120
   140b8:	ldr	r4, [pc, #272]	; 141d0 <rb_epoll_supports_event+0x124>
   140bc:	ldr	r4, [pc, r4]
   140c0:	cmp	r4, #1
   140c4:	beq	14168 <rb_epoll_supports_event+0xbc>
   140c8:	cmn	r4, #1
   140cc:	bne	140d8 <rb_epoll_supports_event+0x2c>
   140d0:	mov	r4, #0
   140d4:	b	14168 <rb_epoll_supports_event+0xbc>
   140d8:	ldr	r1, [pc, #244]	; 141d4 <rb_epoll_supports_event+0x128>
   140dc:	add	r2, sp, #128	; 0x80
   140e0:	mov	r0, #3
   140e4:	add	r1, pc, r1
   140e8:	bl	4d54 <__xstat@plt>
   140ec:	cmp	r0, #0
   140f0:	beq	14154 <rb_epoll_supports_event+0xa8>
   140f4:	mov	r0, #0
   140f8:	mov	r1, #0
   140fc:	mov	r4, #0
   14100:	bl	5420 <timerfd_create@plt>
   14104:	cmp	r0, #0
   14108:	bmi	14130 <rb_epoll_supports_event+0x84>
   1410c:	bl	51c8 <close@plt>
   14110:	ldr	r0, [pc, #196]	; 141dc <rb_epoll_supports_event+0x130>
   14114:	mov	r4, #1
   14118:	add	r0, pc, r0
   1411c:	str	r4, [r0]
   14120:	ldr	r0, [pc, #184]	; 141e0 <rb_epoll_supports_event+0x134>
   14124:	add	r0, pc, r0
   14128:	strb	r4, [r0]
   1412c:	b	14168 <rb_epoll_supports_event+0xbc>
   14130:	mov	r0, #26
   14134:	str	r4, [fp, #-76]	; 0xffffffb4
   14138:	sub	r1, fp, #84	; 0x54
   1413c:	sub	r2, fp, #20
   14140:	str	r0, [fp, #-80]	; 0xffffffb0
   14144:	mov	r0, #0
   14148:	bl	4df0 <timer_create@plt>
   1414c:	cmp	r0, #0
   14150:	beq	14174 <rb_epoll_supports_event+0xc8>
   14154:	ldr	r0, [pc, #124]	; 141d8 <rb_epoll_supports_event+0x12c>
   14158:	mvn	r1, #0
   1415c:	mov	r4, #0
   14160:	add	r0, pc, r0
   14164:	str	r1, [r0]
   14168:	mov	r0, r4
   1416c:	sub	sp, fp, #16
   14170:	pop	{r4, r5, r6, sl, fp, pc}
   14174:	ldr	r0, [fp, #-20]	; 0xffffffec
   14178:	bl	52e8 <timer_delete@plt>
   1417c:	mov	r5, sp
   14180:	mov	r0, r5
   14184:	bl	4c7c <sigemptyset@plt>
   14188:	mvn	r0, #0
   1418c:	mov	r1, r5
   14190:	mov	r2, #0
   14194:	mvn	r6, #0
   14198:	mov	r4, #0
   1419c:	bl	4d18 <signalfd@plt>
   141a0:	cmn	r0, #1
   141a4:	ble	141c0 <rb_epoll_supports_event+0x114>
   141a8:	bl	51c8 <close@plt>
   141ac:	ldr	r0, [pc, #52]	; 141e8 <rb_epoll_supports_event+0x13c>
   141b0:	mov	r4, #1
   141b4:	add	r0, pc, r0
   141b8:	str	r4, [r0]
   141bc:	b	14168 <rb_epoll_supports_event+0xbc>
   141c0:	ldr	r0, [pc, #28]	; 141e4 <rb_epoll_supports_event+0x138>
   141c4:	add	r0, pc, r0
   141c8:	str	r6, [r0]
   141cc:	b	14168 <rb_epoll_supports_event+0xbc>
   141d0:	.word	0x00035214
   141d4:	.word	0x00006b88
   141d8:	.word	0x00035170
   141dc:	.word	0x000351b8
   141e0:	.word	0x000351b0
   141e4:	.word	0x0003510c
   141e8:	.word	0x0003511c

000141ec <rb_epoll_init_event>:
   141ec:	push	{r4, r5, fp, lr}
   141f0:	add	fp, sp, #8
   141f4:	sub	sp, sp, #128	; 0x80
   141f8:	bl	140ac <rb_epoll_supports_event>
   141fc:	ldr	r0, [pc, #172]	; 142b0 <rb_epoll_init_event+0xc4>
   14200:	add	r0, pc, r0
   14204:	ldrb	r0, [r0]
   14208:	cmp	r0, #0
   1420c:	bne	14294 <rb_epoll_init_event+0xa8>
   14210:	mov	r4, sp
   14214:	mov	r0, r4
   14218:	bl	4c7c <sigemptyset@plt>
   1421c:	bl	4d48 <__libc_current_sigrtmin@plt>
   14220:	mov	r1, r0
   14224:	mov	r0, r4
   14228:	bl	5120 <sigaddset@plt>
   1422c:	mov	r0, #0
   14230:	mov	r1, r4
   14234:	mov	r2, #0
   14238:	bl	5234 <sigprocmask@plt>
   1423c:	mov	r0, r4
   14240:	bl	4c7c <sigemptyset@plt>
   14244:	bl	4d48 <__libc_current_sigrtmin@plt>
   14248:	mov	r1, r0
   1424c:	mov	r0, r4
   14250:	bl	5120 <sigaddset@plt>
   14254:	mvn	r0, #0
   14258:	mov	r1, r4
   1425c:	mov	r2, #0
   14260:	mvn	r5, #0
   14264:	bl	4d18 <signalfd@plt>
   14268:	cmn	r0, #1
   1426c:	beq	1429c <rb_epoll_init_event+0xb0>
   14270:	ldr	r2, [pc, #64]	; 142b8 <rb_epoll_init_event+0xcc>
   14274:	mov	r1, #64	; 0x40
   14278:	add	r2, pc, r2
   1427c:	bl	52f4 <rb_open@plt>
   14280:	mov	r4, r0
   14284:	bl	4ec8 <rb_set_nb@plt>
   14288:	mov	r0, r4
   1428c:	mov	r1, #0
   14290:	bl	142bc <signalfd_handler>
   14294:	sub	sp, fp, #8
   14298:	pop	{r4, r5, fp, pc}
   1429c:	ldr	r0, [pc, #16]	; 142b4 <rb_epoll_init_event+0xc8>
   142a0:	add	r0, pc, r0
   142a4:	str	r5, [r0]
   142a8:	sub	sp, fp, #8
   142ac:	pop	{r4, r5, fp, pc}
   142b0:	.word	0x000350d4
   142b4:	.word	0x00035030
   142b8:	.word	0x00006a0c

000142bc <signalfd_handler>:
   142bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142c0:	add	fp, sp, #24
   142c4:	ldr	r5, [pc, #408]	; 14464 <signalfd_handler+0x1a8>
   142c8:	mov	r4, r0
   142cc:	mov	r0, #128	; 0x80
   142d0:	add	r5, pc, r5
   142d4:	str	r0, [r5, #60]	; 0x3c
   142d8:	str	r0, [r5, #52]	; 0x34
   142dc:	str	r0, [r5, #44]	; 0x2c
   142e0:	str	r0, [r5, #36]	; 0x24
   142e4:	str	r0, [r5, #28]
   142e8:	str	r0, [r5, #20]
   142ec:	str	r0, [r5, #12]
   142f0:	str	r0, [r5, #4]
   142f4:	ldr	r6, [pc, #364]	; 14468 <signalfd_handler+0x1ac>
   142f8:	add	r6, pc, r6
   142fc:	add	r1, r6, #1920	; 0x780
   14300:	add	r2, r6, #1792	; 0x700
   14304:	add	r3, r6, #1664	; 0x680
   14308:	add	r7, r6, #1536	; 0x600
   1430c:	str	r6, [r5]
   14310:	str	r7, [r5, #96]	; 0x60
   14314:	str	r0, [r5, #100]	; 0x64
   14318:	str	r3, [r5, #104]	; 0x68
   1431c:	str	r0, [r5, #108]	; 0x6c
   14320:	str	r2, [r5, #112]	; 0x70
   14324:	str	r0, [r5, #116]	; 0x74
   14328:	str	r1, [r5, #120]	; 0x78
   1432c:	add	r1, r6, #1408	; 0x580
   14330:	add	r2, r6, #1280	; 0x500
   14334:	add	r3, r6, #1152	; 0x480
   14338:	add	r7, r6, #1024	; 0x400
   1433c:	str	r0, [r5, #124]	; 0x7c
   14340:	str	r7, [r5, #64]	; 0x40
   14344:	str	r0, [r5, #68]	; 0x44
   14348:	str	r3, [r5, #72]	; 0x48
   1434c:	str	r0, [r5, #76]	; 0x4c
   14350:	str	r2, [r5, #80]	; 0x50
   14354:	str	r0, [r5, #84]	; 0x54
   14358:	str	r1, [r5, #88]	; 0x58
   1435c:	str	r0, [r5, #92]	; 0x5c
   14360:	add	r0, r6, #896	; 0x380
   14364:	str	r0, [r5, #56]	; 0x38
   14368:	add	r0, r6, #768	; 0x300
   1436c:	str	r0, [r5, #48]	; 0x30
   14370:	add	r0, r6, #640	; 0x280
   14374:	str	r0, [r5, #40]	; 0x28
   14378:	add	r0, r6, #512	; 0x200
   1437c:	str	r0, [r5, #32]
   14380:	add	r0, r6, #384	; 0x180
   14384:	str	r0, [r5, #24]
   14388:	add	r0, r6, #256	; 0x100
   1438c:	str	r0, [r5, #16]
   14390:	add	r0, r6, #128	; 0x80
   14394:	str	r0, [r5, #8]
   14398:	mov	r0, r4
   1439c:	bl	4da8 <rb_get_fd@plt>
   143a0:	mov	r1, r5
   143a4:	mov	r2, #16
   143a8:	bl	54c8 <readv@plt>
   143ac:	cmp	r0, #0
   143b0:	beq	14454 <signalfd_handler+0x198>
   143b4:	ldr	r8, [pc, #176]	; 1446c <signalfd_handler+0x1b0>
   143b8:	add	r5, r6, #48	; 0x30
   143bc:	add	r8, pc, r8
   143c0:	cmp	r0, #0
   143c4:	bpl	143f0 <signalfd_handler+0x134>
   143c8:	b	14424 <signalfd_handler+0x168>
   143cc:	mov	r0, r4
   143d0:	bl	4da8 <rb_get_fd@plt>
   143d4:	mov	r1, r8
   143d8:	mov	r2, #16
   143dc:	bl	54c8 <readv@plt>
   143e0:	cmp	r0, #0
   143e4:	beq	14454 <signalfd_handler+0x198>
   143e8:	cmp	r0, #0
   143ec:	bmi	14424 <signalfd_handler+0x168>
   143f0:	cmp	r0, #128	; 0x80
   143f4:	blt	143cc <signalfd_handler+0x110>
   143f8:	lsr	r7, r0, #7
   143fc:	mov	r6, r5
   14400:	b	14410 <signalfd_handler+0x154>
   14404:	add	r6, r6, #128	; 0x80
   14408:	subs	r7, r7, #1
   1440c:	beq	143cc <signalfd_handler+0x110>
   14410:	ldr	r0, [r6]
   14414:	cmp	r0, #0
   14418:	beq	14404 <signalfd_handler+0x148>
   1441c:	bl	5144 <rb_run_one_event@plt>
   14420:	b	14404 <signalfd_handler+0x148>
   14424:	bl	5540 <__errno_location@plt>
   14428:	ldr	r0, [r0]
   1442c:	bl	4cc4 <rb_ignore_errno@plt>
   14430:	cmp	r0, #0
   14434:	beq	14454 <signalfd_handler+0x198>
   14438:	ldr	r2, [pc, #48]	; 14470 <signalfd_handler+0x1b4>
   1443c:	mov	r0, r4
   14440:	mov	r1, #1
   14444:	mov	r3, #0
   14448:	add	r2, pc, r2
   1444c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14450:	b	4d6c <rb_setselect@plt>
   14454:	mov	r0, r4
   14458:	bl	5108 <rb_close@plt>
   1445c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14460:	b	141ec <rb_epoll_init_event>
   14464:	.word	0x00035810
   14468:	.word	0x00034fe8
   1446c:	.word	0x00035724
   14470:	.word	0xfffffe6c

00014474 <rb_epoll_sched_event>:
   14474:	push	{r4, r5, r6, r7, fp, lr}
   14478:	add	fp, sp, #16
   1447c:	sub	sp, sp, #80	; 0x50
   14480:	mov	r4, r0
   14484:	ldr	r0, [pc, #536]	; 146a4 <rb_epoll_sched_event+0x230>
   14488:	mov	r6, r1
   1448c:	add	r0, pc, r0
   14490:	ldrb	r0, [r0]
   14494:	cmp	r0, #1
   14498:	bne	14564 <rb_epoll_sched_event+0xf0>
   1449c:	mov	r0, #0
   144a0:	mov	r1, #0
   144a4:	mov	r5, #0
   144a8:	bl	5420 <timerfd_create@plt>
   144ac:	cmn	r0, #1
   144b0:	ble	14628 <rb_epoll_sched_event+0x1b4>
   144b4:	str	r5, [sp, #20]
   144b8:	str	r5, [sp, #16]
   144bc:	str	r5, [sp, #28]
   144c0:	str	r6, [sp, #24]
   144c4:	mov	r7, r0
   144c8:	ldr	r0, [r4, #24]
   144cc:	cmp	r0, #0
   144d0:	beq	144e8 <rb_epoll_sched_event+0x74>
   144d4:	add	r0, sp, #16
   144d8:	add	r0, r0, #8
   144dc:	ldrd	r0, [r0]
   144e0:	str	r1, [sp, #20]
   144e4:	str	r0, [sp, #16]
   144e8:	add	r2, sp, #16
   144ec:	mov	r0, r7
   144f0:	mov	r1, #0
   144f4:	mov	r3, #0
   144f8:	mov	r5, #0
   144fc:	bl	54a4 <timerfd_settime@plt>
   14500:	cmn	r0, #1
   14504:	ble	14670 <rb_epoll_sched_event+0x1fc>
   14508:	ldr	r3, [r4, #20]
   1450c:	ldr	r5, [pc, #412]	; 146b0 <rb_epoll_sched_event+0x23c>
   14510:	ldr	r2, [pc, #412]	; 146b4 <rb_epoll_sched_event+0x240>
   14514:	mov	r1, #136	; 0x88
   14518:	add	r5, pc, r5
   1451c:	add	r2, pc, r2
   14520:	mov	r0, r5
   14524:	bl	5408 <snprintf@plt>
   14528:	mov	r0, r7
   1452c:	mov	r1, #64	; 0x40
   14530:	mov	r2, r5
   14534:	bl	52f4 <rb_open@plt>
   14538:	mov	r6, r0
   1453c:	bl	4ec8 <rb_set_nb@plt>
   14540:	str	r6, [r4, #40]	; 0x28
   14544:	mov	r0, r6
   14548:	mov	r1, #1
   1454c:	mov	r3, r4
   14550:	mov	r5, #1
   14554:	ldr	r2, [pc, #348]	; 146b8 <rb_epoll_sched_event+0x244>
   14558:	add	r2, pc, r2
   1455c:	bl	4d6c <rb_setselect@plt>
   14560:	b	14694 <rb_epoll_sched_event+0x220>
   14564:	vmov.i32	q8, #0	; 0x00000000
   14568:	add	r0, sp, #16
   1456c:	add	r1, r0, #16
   14570:	vst1.64	{d16-d17}, [r1]
   14574:	add	r1, r0, #32
   14578:	vst1.64	{d16-d17}, [r1]
   1457c:	mov	r1, #48	; 0x30
   14580:	vst1.64	{d16-d17}, [r0], r1
   14584:	mov	r1, #4
   14588:	vst1.64	{d16-d17}, [r0]
   1458c:	mov	r0, #1
   14590:	bl	4e98 <calloc@plt>
   14594:	cmp	r0, #0
   14598:	beq	146a0 <rb_epoll_sched_event+0x22c>
   1459c:	mov	r7, #0
   145a0:	str	r0, [r4, #40]	; 0x28
   145a4:	mov	r5, r0
   145a8:	str	r7, [sp, #24]
   145ac:	bl	4d48 <__libc_current_sigrtmin@plt>
   145b0:	str	r0, [sp, #20]
   145b4:	add	r1, sp, #16
   145b8:	mov	r0, #0
   145bc:	mov	r2, r5
   145c0:	str	r4, [sp, #16]
   145c4:	bl	4df0 <timer_create@plt>
   145c8:	cmp	r0, #0
   145cc:	bmi	14648 <rb_epoll_sched_event+0x1d4>
   145d0:	str	r7, [sp, #4]
   145d4:	str	r7, [sp]
   145d8:	str	r7, [sp, #12]
   145dc:	str	r6, [sp, #8]
   145e0:	ldr	r0, [r4, #24]
   145e4:	cmp	r0, #0
   145e8:	beq	145fc <rb_epoll_sched_event+0x188>
   145ec:	mov	r0, sp
   145f0:	add	r0, r0, #8
   145f4:	ldrd	r0, [r0]
   145f8:	stm	sp, {r0, r1}
   145fc:	ldr	r0, [r5]
   14600:	mov	r2, sp
   14604:	mov	r1, #0
   14608:	mov	r3, #0
   1460c:	bl	4ff4 <timer_settime@plt>
   14610:	mov	r5, #1
   14614:	cmn	r0, #1
   14618:	bgt	14694 <rb_epoll_sched_event+0x220>
   1461c:	ldr	r4, [pc, #156]	; 146c0 <rb_epoll_sched_event+0x24c>
   14620:	add	r4, pc, r4
   14624:	b	14650 <rb_epoll_sched_event+0x1dc>
   14628:	bl	5540 <__errno_location@plt>
   1462c:	ldr	r0, [r0]
   14630:	bl	4c88 <strerror@plt>
   14634:	mov	r1, r0
   14638:	ldr	r0, [pc, #104]	; 146a8 <rb_epoll_sched_event+0x234>
   1463c:	add	r0, pc, r0
   14640:	bl	51a4 <rb_lib_log@plt>
   14644:	b	14694 <rb_epoll_sched_event+0x220>
   14648:	ldr	r4, [pc, #108]	; 146bc <rb_epoll_sched_event+0x248>
   1464c:	add	r4, pc, r4
   14650:	bl	5540 <__errno_location@plt>
   14654:	ldr	r0, [r0]
   14658:	bl	4c88 <strerror@plt>
   1465c:	mov	r1, r0
   14660:	mov	r0, r4
   14664:	bl	51a4 <rb_lib_log@plt>
   14668:	mov	r5, #0
   1466c:	b	14694 <rb_epoll_sched_event+0x220>
   14670:	bl	5540 <__errno_location@plt>
   14674:	ldr	r0, [r0]
   14678:	bl	4c88 <strerror@plt>
   1467c:	mov	r1, r0
   14680:	ldr	r0, [pc, #36]	; 146ac <rb_epoll_sched_event+0x238>
   14684:	add	r0, pc, r0
   14688:	bl	51a4 <rb_lib_log@plt>
   1468c:	mov	r0, r7
   14690:	bl	51c8 <close@plt>
   14694:	mov	r0, r5
   14698:	sub	sp, fp, #16
   1469c:	pop	{r4, r5, r6, r7, fp, pc}
   146a0:	bl	5204 <rb_outofmemory@plt>
   146a4:	.word	0x00034e48
   146a8:	.word	0x00006651
   146ac:	.word	0x0000661d
   146b0:	.word	0x00035648
   146b4:	.word	0x0000679a
   146b8:	.word	0x000001b8
   146bc:	.word	0x000066a7
   146c0:	.word	0x000066e5

000146c4 <rb_epoll_unsched_event>:
   146c4:	push	{r4, sl, fp, lr}
   146c8:	add	fp, sp, #8
   146cc:	mov	r4, r0
   146d0:	ldr	r0, [r0, #40]	; 0x28
   146d4:	ldr	r1, [pc, #56]	; 14714 <rb_epoll_unsched_event+0x50>
   146d8:	add	r1, pc, r1
   146dc:	ldrb	r1, [r1]
   146e0:	cmp	r1, #1
   146e4:	bne	146f0 <rb_epoll_unsched_event+0x2c>
   146e8:	bl	5108 <rb_close@plt>
   146ec:	b	14708 <rb_epoll_unsched_event+0x44>
   146f0:	ldr	r0, [r0]
   146f4:	bl	52e8 <timer_delete@plt>
   146f8:	ldr	r0, [r4, #40]	; 0x28
   146fc:	cmp	r0, #0
   14700:	beq	14708 <rb_epoll_unsched_event+0x44>
   14704:	bl	4f94 <free@plt>
   14708:	mov	r0, #0
   1470c:	str	r0, [r4, #40]	; 0x28
   14710:	pop	{r4, sl, fp, pc}
   14714:	.word	0x00034bfc

00014718 <rb_read_timerfd>:
   14718:	push	{r4, r5, fp, lr}
   1471c:	add	fp, sp, #8
   14720:	sub	sp, sp, #8
   14724:	mov	r5, r0
   14728:	cmp	r1, #0
   1472c:	beq	14790 <rb_read_timerfd+0x78>
   14730:	mov	r4, r1
   14734:	mov	r1, sp
   14738:	mov	r0, r5
   1473c:	mov	r2, #8
   14740:	bl	5024 <rb_read@plt>
   14744:	cmp	r0, #0
   14748:	beq	147a0 <rb_read_timerfd+0x88>
   1474c:	cmn	r0, #1
   14750:	bgt	14768 <rb_read_timerfd+0x50>
   14754:	bl	5540 <__errno_location@plt>
   14758:	ldr	r0, [r0]
   1475c:	bl	4cc4 <rb_ignore_errno@plt>
   14760:	cmp	r0, #0
   14764:	beq	147a0 <rb_read_timerfd+0x88>
   14768:	ldr	r2, [pc, #104]	; 147d8 <rb_read_timerfd+0xc0>
   1476c:	mov	r0, r5
   14770:	mov	r1, #1
   14774:	mov	r3, r4
   14778:	add	r2, pc, r2
   1477c:	bl	4d6c <rb_setselect@plt>
   14780:	mov	r0, r4
   14784:	bl	5144 <rb_run_one_event@plt>
   14788:	sub	sp, fp, #8
   1478c:	pop	{r4, r5, fp, pc}
   14790:	mov	r0, r5
   14794:	bl	5108 <rb_close@plt>
   14798:	sub	sp, fp, #8
   1479c:	pop	{r4, r5, fp, pc}
   147a0:	mov	r0, r5
   147a4:	bl	5108 <rb_close@plt>
   147a8:	ldr	r4, [r4, #20]
   147ac:	bl	5540 <__errno_location@plt>
   147b0:	ldr	r0, [r0]
   147b4:	bl	4c88 <strerror@plt>
   147b8:	mov	r2, r0
   147bc:	ldr	r0, [pc, #16]	; 147d4 <rb_read_timerfd+0xbc>
   147c0:	mov	r1, r4
   147c4:	add	r0, pc, r0
   147c8:	bl	51a4 <rb_lib_log@plt>
   147cc:	sub	sp, fp, #8
   147d0:	pop	{r4, r5, fp, pc}
   147d4:	.word	0x000064fe
   147d8:	.word	0xffffff98

000147dc <rb_setup_fd_poll>:
   147dc:	mov	r0, #0
   147e0:	bx	lr

000147e4 <rb_init_netio_poll>:
   147e4:	push	{r4, r5, fp, lr}
   147e8:	add	fp, sp, #8
   147ec:	bl	4d30 <rb_getmaxconnect@plt>
   147f0:	lsl	r1, r0, #3
   147f4:	mov	r0, #1
   147f8:	bl	4e98 <calloc@plt>
   147fc:	cmp	r0, #0
   14800:	beq	14868 <rb_init_netio_poll+0x84>
   14804:	ldr	r1, [pc, #96]	; 1486c <rb_init_netio_poll+0x88>
   14808:	add	r1, pc, r1
   1480c:	str	r0, [r1]
   14810:	bl	4d30 <rb_getmaxconnect@plt>
   14814:	ldr	r1, [pc, #84]	; 14870 <rb_init_netio_poll+0x8c>
   14818:	add	r1, pc, r1
   1481c:	str	r0, [r1]
   14820:	bl	4d30 <rb_getmaxconnect@plt>
   14824:	cmp	r0, #1
   14828:	blt	14850 <rb_init_netio_poll+0x6c>
   1482c:	mov	r4, #0
   14830:	mvn	r5, #0
   14834:	ldr	r0, [pc, #56]	; 14874 <rb_init_netio_poll+0x90>
   14838:	ldr	r0, [pc, r0]
   1483c:	str	r5, [r0, r4, lsl #3]
   14840:	add	r4, r4, #1
   14844:	bl	4d30 <rb_getmaxconnect@plt>
   14848:	cmp	r4, r0
   1484c:	blt	14834 <rb_init_netio_poll+0x50>
   14850:	ldr	r0, [pc, #32]	; 14878 <rb_init_netio_poll+0x94>
   14854:	mov	r1, #0
   14858:	add	r0, pc, r0
   1485c:	str	r1, [r0]
   14860:	mov	r0, #0
   14864:	pop	{r4, r5, fp, pc}
   14868:	bl	5204 <rb_outofmemory@plt>
   1486c:	.word	0x000353e0
   14870:	.word	0x000353d8
   14874:	.word	0x000353b0
   14878:	.word	0x00035394

0001487c <rb_setselect_poll>:
   1487c:	push	{r4, r5, r6, r7, fp, lr}
   14880:	add	fp, sp, #16
   14884:	cmp	r0, #0
   14888:	beq	14928 <rb_setselect_poll+0xac>
   1488c:	mov	r4, r0
   14890:	tst	r1, #1
   14894:	beq	148b4 <rb_setselect_poll+0x38>
   14898:	str	r2, [r4, #28]
   1489c:	str	r3, [r4, #32]
   148a0:	cmp	r2, #0
   148a4:	ldr	r0, [r4, #20]
   148a8:	orr	r7, r0, #64	; 0x40
   148ac:	biceq	r7, r0, #64	; 0x40
   148b0:	str	r7, [r4, #20]
   148b4:	tst	r1, #2
   148b8:	beq	148d8 <rb_setselect_poll+0x5c>
   148bc:	str	r2, [r4, #36]	; 0x24
   148c0:	str	r3, [r4, #40]	; 0x28
   148c4:	cmp	r2, #0
   148c8:	ldr	r0, [r4, #20]
   148cc:	orr	r1, r0, #256	; 0x100
   148d0:	biceq	r1, r0, #256	; 0x100
   148d4:	str	r1, [r4, #20]
   148d8:	ldr	r0, [r4, #12]
   148dc:	ldr	r7, [pc, #376]	; 14a5c <rb_setselect_poll+0x1e0>
   148e0:	ldr	r7, [pc, r7]
   148e4:	cmp	r7, r0
   148e8:	ble	14998 <rb_setselect_poll+0x11c>
   148ec:	ldr	r1, [r4, #20]
   148f0:	cmp	r1, #0
   148f4:	ble	1492c <rb_setselect_poll+0xb0>
   148f8:	ldr	r0, [r4, #12]
   148fc:	ldr	r2, [pc, #376]	; 14a7c <rb_setselect_poll+0x200>
   14900:	ldr	r2, [pc, r2]
   14904:	str	r0, [r2, r0, lsl #3]!
   14908:	strh	r1, [r2, #4]
   1490c:	ldr	r1, [pc, #364]	; 14a80 <rb_setselect_poll+0x204>
   14910:	ldr	r1, [pc, r1]
   14914:	cmp	r0, r1
   14918:	pople	{r4, r5, r6, r7, fp, pc}
   1491c:	ldr	r1, [pc, #352]	; 14a84 <rb_setselect_poll+0x208>
   14920:	add	r1, pc, r1
   14924:	str	r0, [r1]
   14928:	pop	{r4, r5, r6, r7, fp, pc}
   1492c:	ldr	r1, [r4, #12]
   14930:	ldr	r0, [pc, #312]	; 14a70 <rb_setselect_poll+0x1f4>
   14934:	mvn	r2, #0
   14938:	ldr	r0, [pc, r0]
   1493c:	mov	r3, r0
   14940:	str	r2, [r3, r1, lsl #3]!
   14944:	mov	r2, #0
   14948:	strh	r2, [r3, #4]
   1494c:	ldr	r2, [pc, #288]	; 14a74 <rb_setselect_poll+0x1f8>
   14950:	ldr	r2, [pc, r2]
   14954:	cmp	r1, r2
   14958:	bne	14928 <rb_setselect_poll+0xac>
   1495c:	cmp	r2, #0
   14960:	bmi	14928 <rb_setselect_poll+0xac>
   14964:	sub	r2, r1, #1
   14968:	mov	r1, r2
   1496c:	add	r2, r2, #1
   14970:	cmp	r2, #1
   14974:	blt	14988 <rb_setselect_poll+0x10c>
   14978:	ldr	r3, [r0, r1, lsl #3]
   1497c:	sub	r2, r1, #1
   14980:	cmn	r3, #1
   14984:	beq	14968 <rb_setselect_poll+0xec>
   14988:	ldr	r0, [pc, #232]	; 14a78 <rb_setselect_poll+0x1fc>
   1498c:	add	r0, pc, r0
   14990:	str	r1, [r0]
   14994:	pop	{r4, r5, r6, r7, fp, pc}
   14998:	ldr	r0, [pc, #192]	; 14a60 <rb_setselect_poll+0x1e4>
   1499c:	add	r1, r7, #1024	; 0x400
   149a0:	add	r0, pc, r0
   149a4:	str	r1, [r0]
   149a8:	lsl	r1, r1, #3
   149ac:	ldr	r0, [pc, #176]	; 14a64 <rb_setselect_poll+0x1e8>
   149b0:	ldr	r0, [pc, r0]
   149b4:	bl	5498 <realloc@plt>
   149b8:	cmp	r0, #0
   149bc:	beq	14a58 <rb_setselect_poll+0x1dc>
   149c0:	mov	r5, r0
   149c4:	ldr	r0, [pc, #156]	; 14a68 <rb_setselect_poll+0x1ec>
   149c8:	add	r6, r7, #1
   149cc:	mov	r1, #0
   149d0:	mov	r2, #8192	; 0x2000
   149d4:	add	r0, pc, r0
   149d8:	str	r5, [r0]
   149dc:	add	r0, r5, r6, lsl #3
   149e0:	bl	4ed4 <memset@plt>
   149e4:	ldr	r0, [pc, #128]	; 14a6c <rb_setselect_poll+0x1f0>
   149e8:	ldr	r0, [pc, r0]
   149ec:	cmp	r6, r0
   149f0:	bge	148ec <rb_setselect_poll+0x70>
   149f4:	mvn	r2, r7
   149f8:	sub	r1, r0, r7
   149fc:	add	r2, r0, r2
   14a00:	sub	r1, r1, #2
   14a04:	ands	r2, r2, #3
   14a08:	beq	14a20 <rb_setselect_poll+0x1a4>
   14a0c:	mvn	r3, #0
   14a10:	str	r3, [r5, r6, lsl #3]
   14a14:	subs	r2, r2, #1
   14a18:	add	r6, r6, #1
   14a1c:	bne	14a10 <rb_setselect_poll+0x194>
   14a20:	cmp	r1, #3
   14a24:	bcc	148ec <rb_setselect_poll+0x70>
   14a28:	add	r1, r5, r6, lsl #3
   14a2c:	sub	r0, r0, r6
   14a30:	mvn	r2, #0
   14a34:	add	r1, r1, #16
   14a38:	str	r2, [r1, #8]
   14a3c:	str	r2, [r1]
   14a40:	str	r2, [r1, #-8]
   14a44:	str	r2, [r1, #-16]
   14a48:	add	r1, r1, #32
   14a4c:	subs	r0, r0, #4
   14a50:	bne	14a38 <rb_setselect_poll+0x1bc>
   14a54:	b	148ec <rb_setselect_poll+0x70>
   14a58:	bl	5204 <rb_outofmemory@plt>
   14a5c:	.word	0x00035310
   14a60:	.word	0x00035250
   14a64:	.word	0x00035238
   14a68:	.word	0x00035214
   14a6c:	.word	0x00035208
   14a70:	.word	0x000352b0
   14a74:	.word	0x0003529c
   14a78:	.word	0x00035260
   14a7c:	.word	0x000352e8
   14a80:	.word	0x000352dc
   14a84:	.word	0x000352cc

00014a88 <rb_select_poll>:
   14a88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a8c:	add	fp, sp, #24
   14a90:	mov	r2, r0
   14a94:	ldr	r0, [pc, #400]	; 14c2c <rb_select_poll+0x1a4>
   14a98:	ldr	r0, [pc, r0]
   14a9c:	ldr	r1, [pc, #396]	; 14c30 <rb_select_poll+0x1a8>
   14aa0:	ldr	r1, [pc, r1]
   14aa4:	add	r1, r1, #1
   14aa8:	bl	527c <poll@plt>
   14aac:	mov	r4, r0
   14ab0:	bl	5210 <rb_set_time@plt>
   14ab4:	cmn	r4, #1
   14ab8:	ble	14c0c <rb_select_poll+0x184>
   14abc:	mov	r0, #0
   14ac0:	cmp	r4, #0
   14ac4:	beq	14c28 <rb_select_poll+0x1a0>
   14ac8:	ldr	r1, [pc, #356]	; 14c34 <rb_select_poll+0x1ac>
   14acc:	ldr	r1, [pc, r1]
   14ad0:	cmp	r1, #0
   14ad4:	bmi	14c28 <rb_select_poll+0x1a0>
   14ad8:	ldr	r6, [pc, #344]	; 14c38 <rb_select_poll+0x1b0>
   14adc:	mov	r8, #0
   14ae0:	mov	r0, #0
   14ae4:	ldr	r6, [pc, r6]
   14ae8:	b	14b00 <rb_select_poll+0x78>
   14aec:	ldr	r1, [pc, #332]	; 14c40 <rb_select_poll+0x1b8>
   14af0:	add	r0, r7, #1
   14af4:	ldr	r1, [pc, r1]
   14af8:	cmp	r7, r1
   14afc:	bge	14c24 <rb_select_poll+0x19c>
   14b00:	ldr	r1, [pc, #308]	; 14c3c <rb_select_poll+0x1b4>
   14b04:	mov	r7, r0
   14b08:	ldr	r1, [pc, r1]
   14b0c:	ldr	r0, [r1, r0, lsl #3]!
   14b10:	ldrsh	r5, [r1, #6]
   14b14:	cmp	r5, #0
   14b18:	beq	14aec <rb_select_poll+0x64>
   14b1c:	cmp	r0, #0
   14b20:	bmi	14aec <rb_select_poll+0x64>
   14b24:	eor	r1, r0, r0, lsr #12
   14b28:	ldr	r2, [r6]
   14b2c:	bfc	r1, #12, #20
   14b30:	eor	r1, r1, r0, lsr #24
   14b34:	add	r1, r1, r1, lsl #1
   14b38:	ldr	r1, [r2, r1, lsl #2]
   14b3c:	cmp	r1, #0
   14b40:	beq	14aec <rb_select_poll+0x64>
   14b44:	ldr	r4, [r1]
   14b48:	ldr	r2, [r4, #12]
   14b4c:	cmp	r2, r0
   14b50:	beq	14b64 <rb_select_poll+0xdc>
   14b54:	ldr	r1, [r1, #8]
   14b58:	cmp	r1, #0
   14b5c:	bne	14b44 <rb_select_poll+0xbc>
   14b60:	b	14aec <rb_select_poll+0x64>
   14b64:	cmp	r4, #0
   14b68:	beq	14aec <rb_select_poll+0x64>
   14b6c:	tst	r5, #89	; 0x59
   14b70:	beq	14b94 <rb_select_poll+0x10c>
   14b74:	ldr	r2, [r4, #28]
   14b78:	ldr	r1, [r4, #32]
   14b7c:	str	r8, [r4, #28]
   14b80:	str	r8, [r4, #32]
   14b84:	cmp	r2, #0
   14b88:	beq	14b94 <rb_select_poll+0x10c>
   14b8c:	mov	r0, r4
   14b90:	blx	r2
   14b94:	tst	r5, #284	; 0x11c
   14b98:	ldrbne	r0, [r4, #16]
   14b9c:	andsne	r0, r0, #1
   14ba0:	bne	14be8 <rb_select_poll+0x160>
   14ba4:	ldr	r0, [r4, #28]
   14ba8:	cmp	r0, #0
   14bac:	bne	14bc4 <rb_select_poll+0x13c>
   14bb0:	mov	r0, r4
   14bb4:	mov	r1, #1
   14bb8:	mov	r2, #0
   14bbc:	mov	r3, #0
   14bc0:	bl	1487c <rb_setselect_poll>
   14bc4:	ldr	r0, [r4, #36]	; 0x24
   14bc8:	cmp	r0, #0
   14bcc:	bne	14aec <rb_select_poll+0x64>
   14bd0:	mov	r0, r4
   14bd4:	mov	r1, #2
   14bd8:	mov	r2, #0
   14bdc:	mov	r3, #0
   14be0:	bl	1487c <rb_setselect_poll>
   14be4:	b	14aec <rb_select_poll+0x64>
   14be8:	ldr	r2, [r4, #36]	; 0x24
   14bec:	ldr	r1, [r4, #40]	; 0x28
   14bf0:	str	r8, [r4, #36]	; 0x24
   14bf4:	str	r8, [r4, #40]	; 0x28
   14bf8:	cmp	r2, #0
   14bfc:	beq	14ba4 <rb_select_poll+0x11c>
   14c00:	mov	r0, r4
   14c04:	blx	r2
   14c08:	b	14ba4 <rb_select_poll+0x11c>
   14c0c:	bl	5540 <__errno_location@plt>
   14c10:	ldr	r0, [r0]
   14c14:	bl	4cc4 <rb_ignore_errno@plt>
   14c18:	cmp	r0, #0
   14c1c:	movwne	r0, #5
   14c20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c24:	mov	r0, #0
   14c28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c2c:	.word	0x00035150
   14c30:	.word	0x0003514c
   14c34:	.word	0x00035120
   14c38:	.word	0x000178a0
   14c3c:	.word	0x000350e0
   14c40:	.word	0x000350f8

00014c44 <rb_ports_supports_event>:
   14c44:	push	{fp, lr}
   14c48:	mov	fp, sp
   14c4c:	bl	5540 <__errno_location@plt>
   14c50:	mov	r1, #38	; 0x26
   14c54:	str	r1, [r0]
   14c58:	mov	r0, #0
   14c5c:	pop	{fp, pc}

00014c60 <rb_ports_init_event>:
   14c60:	bx	lr

00014c64 <rb_ports_sched_event>:
   14c64:	push	{fp, lr}
   14c68:	mov	fp, sp
   14c6c:	bl	5540 <__errno_location@plt>
   14c70:	mov	r1, #38	; 0x26
   14c74:	str	r1, [r0]
   14c78:	mvn	r0, #0
   14c7c:	pop	{fp, pc}

00014c80 <rb_ports_unsched_event>:
   14c80:	bx	lr

00014c84 <rb_init_netio_ports>:
   14c84:	mov	r0, #38	; 0x26
   14c88:	bx	lr

00014c8c <rb_setselect_ports>:
   14c8c:	push	{fp, lr}
   14c90:	mov	fp, sp
   14c94:	bl	5540 <__errno_location@plt>
   14c98:	mov	r1, #38	; 0x26
   14c9c:	str	r1, [r0]
   14ca0:	pop	{fp, pc}

00014ca4 <rb_select_ports>:
   14ca4:	push	{fp, lr}
   14ca8:	mov	fp, sp
   14cac:	bl	5540 <__errno_location@plt>
   14cb0:	mov	r1, #38	; 0x26
   14cb4:	str	r1, [r0]
   14cb8:	mvn	r0, #0
   14cbc:	pop	{fp, pc}

00014cc0 <rb_setup_fd_ports>:
   14cc0:	push	{fp, lr}
   14cc4:	mov	fp, sp
   14cc8:	bl	5540 <__errno_location@plt>
   14ccc:	mov	r1, #38	; 0x26
   14cd0:	str	r1, [r0]
   14cd4:	mvn	r0, #0
   14cd8:	pop	{fp, pc}

00014cdc <rb_init_netio_sigio>:
   14cdc:	push	{r4, r5, r6, sl, fp, lr}
   14ce0:	add	fp, sp, #16
   14ce4:	bl	4d30 <rb_getmaxconnect@plt>
   14ce8:	lsl	r1, r0, #3
   14cec:	mov	r0, #1
   14cf0:	bl	4e98 <calloc@plt>
   14cf4:	cmp	r0, #0
   14cf8:	beq	14da8 <rb_init_netio_sigio+0xcc>
   14cfc:	ldr	r4, [pc, #168]	; 14dac <rb_init_netio_sigio+0xd0>
   14d00:	ldr	r4, [pc, r4]
   14d04:	str	r0, [r4]
   14d08:	bl	4d30 <rb_getmaxconnect@plt>
   14d0c:	str	r0, [r4, #8]
   14d10:	bl	4d30 <rb_getmaxconnect@plt>
   14d14:	cmp	r0, #1
   14d18:	blt	14d3c <rb_init_netio_sigio+0x60>
   14d1c:	mov	r5, #0
   14d20:	mvn	r6, #0
   14d24:	ldr	r0, [r4]
   14d28:	str	r6, [r0, r5, lsl #3]
   14d2c:	add	r5, r5, #1
   14d30:	bl	4d30 <rb_getmaxconnect@plt>
   14d34:	cmp	r5, r0
   14d38:	blt	14d24 <rb_init_netio_sigio+0x48>
   14d3c:	ldr	r0, [pc, #108]	; 14db0 <rb_init_netio_sigio+0xd4>
   14d40:	mov	r1, #1
   14d44:	add	r0, pc, r0
   14d48:	strb	r1, [r0]
   14d4c:	mov	r0, #0
   14d50:	str	r0, [r4, #4]
   14d54:	ldr	r4, [pc, #88]	; 14db4 <rb_init_netio_sigio+0xd8>
   14d58:	add	r4, pc, r4
   14d5c:	mov	r0, r4
   14d60:	bl	4c7c <sigemptyset@plt>
   14d64:	bl	4d48 <__libc_current_sigrtmin@plt>
   14d68:	mov	r1, r0
   14d6c:	mov	r0, r4
   14d70:	bl	5120 <sigaddset@plt>
   14d74:	mov	r0, r4
   14d78:	mov	r1, #29
   14d7c:	bl	5120 <sigaddset@plt>
   14d80:	bl	4d48 <__libc_current_sigrtmin@plt>
   14d84:	add	r1, r0, #1
   14d88:	mov	r0, r4
   14d8c:	bl	5120 <sigaddset@plt>
   14d90:	mov	r0, #0
   14d94:	mov	r1, r4
   14d98:	mov	r2, #0
   14d9c:	bl	5234 <sigprocmask@plt>
   14da0:	mov	r0, #0
   14da4:	pop	{r4, r5, r6, sl, fp, pc}
   14da8:	bl	5204 <rb_outofmemory@plt>
   14dac:	.word	0x00017694
   14db0:	.word	0x00034eb0
   14db4:	.word	0x00034ea0

00014db8 <rb_setup_fd_sigio>:
   14db8:	push	{r4, r5, r6, sl, fp, lr}
   14dbc:	add	fp, sp, #16
   14dc0:	ldr	r5, [r0, #12]
   14dc4:	mov	r1, #3
   14dc8:	mov	r2, #0
   14dcc:	mov	r4, #0
   14dd0:	mov	r0, r5
   14dd4:	bl	545c <fcntl@plt>
   14dd8:	cmn	r0, #1
   14ddc:	beq	14e54 <rb_setup_fd_sigio+0x9c>
   14de0:	mov	r6, r0
   14de4:	tst	r0, #8192	; 0x2000
   14de8:	beq	14e00 <rb_setup_fd_sigio+0x48>
   14dec:	bic	r6, r6, #8192	; 0x2000
   14df0:	mov	r0, r5
   14df4:	mov	r1, #4
   14df8:	mov	r2, r6
   14dfc:	bl	545c <fcntl@plt>
   14e00:	orr	r2, r6, #10240	; 0x2800
   14e04:	mov	r0, r5
   14e08:	mov	r1, #4
   14e0c:	bl	545c <fcntl@plt>
   14e10:	cmn	r0, #1
   14e14:	beq	14e54 <rb_setup_fd_sigio+0x9c>
   14e18:	bl	4d48 <__libc_current_sigrtmin@plt>
   14e1c:	mov	r2, r0
   14e20:	mov	r0, r5
   14e24:	mov	r1, #10
   14e28:	bl	545c <fcntl@plt>
   14e2c:	cmn	r0, #1
   14e30:	beq	14e54 <rb_setup_fd_sigio+0x9c>
   14e34:	bl	5330 <getpid@plt>
   14e38:	mov	r2, r0
   14e3c:	mov	r0, r5
   14e40:	mov	r1, #8
   14e44:	bl	545c <fcntl@plt>
   14e48:	mvn	r1, #0
   14e4c:	subs	r4, r0, r1
   14e50:	movwne	r4, #1
   14e54:	mov	r0, r4
   14e58:	pop	{r4, r5, r6, sl, fp, pc}

00014e5c <rb_setselect_sigio>:
   14e5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e60:	add	fp, sp, #24
   14e64:	cmp	r0, #0
   14e68:	beq	14ef8 <rb_setselect_sigio+0x9c>
   14e6c:	mov	r4, r0
   14e70:	tst	r1, #1
   14e74:	beq	14e94 <rb_setselect_sigio+0x38>
   14e78:	str	r2, [r4, #28]
   14e7c:	str	r3, [r4, #32]
   14e80:	cmp	r2, #0
   14e84:	ldr	r0, [r4, #20]
   14e88:	orr	r7, r0, #64	; 0x40
   14e8c:	biceq	r7, r0, #64	; 0x40
   14e90:	str	r7, [r4, #20]
   14e94:	tst	r1, #2
   14e98:	beq	14eb8 <rb_setselect_sigio+0x5c>
   14e9c:	str	r2, [r4, #36]	; 0x24
   14ea0:	str	r3, [r4, #40]	; 0x28
   14ea4:	cmp	r2, #0
   14ea8:	ldr	r0, [r4, #20]
   14eac:	orr	r1, r0, #256	; 0x100
   14eb0:	biceq	r1, r0, #256	; 0x100
   14eb4:	str	r1, [r4, #20]
   14eb8:	ldr	r0, [r4, #12]
   14ebc:	ldr	r6, [pc, #320]	; 15004 <rb_setselect_sigio+0x1a8>
   14ec0:	ldr	r6, [pc, r6]
   14ec4:	ldr	r5, [r6, #8]
   14ec8:	cmp	r5, r0
   14ecc:	ble	14f58 <rb_setselect_sigio+0xfc>
   14ed0:	ldr	r1, [r4, #20]
   14ed4:	cmp	r1, #0
   14ed8:	ble	14efc <rb_setselect_sigio+0xa0>
   14edc:	ldr	r0, [r4, #12]
   14ee0:	ldr	r2, [r6]
   14ee4:	str	r0, [r2, r0, lsl #3]!
   14ee8:	strh	r1, [r2, #4]
   14eec:	ldr	r1, [r6, #4]
   14ef0:	cmp	r0, r1
   14ef4:	strgt	r0, [r6, #4]
   14ef8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14efc:	ldr	r0, [r6]
   14f00:	ldr	r1, [r4, #12]
   14f04:	mvn	r2, #0
   14f08:	mov	r3, r0
   14f0c:	str	r2, [r3, r1, lsl #3]!
   14f10:	mov	r2, #0
   14f14:	strh	r2, [r3, #4]
   14f18:	ldr	r2, [r6, #4]
   14f1c:	cmp	r1, r2
   14f20:	bne	14ef8 <rb_setselect_sigio+0x9c>
   14f24:	cmp	r2, #0
   14f28:	bmi	14ef8 <rb_setselect_sigio+0x9c>
   14f2c:	sub	r2, r1, #1
   14f30:	mov	r1, r2
   14f34:	add	r2, r2, #1
   14f38:	cmp	r2, #1
   14f3c:	blt	14f50 <rb_setselect_sigio+0xf4>
   14f40:	ldr	r3, [r0, r1, lsl #3]
   14f44:	sub	r2, r1, #1
   14f48:	cmn	r3, #1
   14f4c:	beq	14f30 <rb_setselect_sigio+0xd4>
   14f50:	str	r1, [r6, #4]
   14f54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f58:	add	r1, r5, #1024	; 0x400
   14f5c:	str	r1, [r6, #8]
   14f60:	lsl	r1, r1, #3
   14f64:	ldr	r0, [r6]
   14f68:	bl	5498 <realloc@plt>
   14f6c:	cmp	r0, #0
   14f70:	beq	15000 <rb_setselect_sigio+0x1a4>
   14f74:	add	r7, r5, #1
   14f78:	mov	r8, r0
   14f7c:	str	r0, [r6]
   14f80:	mov	r1, #0
   14f84:	mov	r2, #8192	; 0x2000
   14f88:	add	r0, r0, r7, lsl #3
   14f8c:	bl	4ed4 <memset@plt>
   14f90:	ldr	r0, [r6, #8]
   14f94:	cmp	r7, r0
   14f98:	bge	14ed0 <rb_setselect_sigio+0x74>
   14f9c:	mvn	r2, r5
   14fa0:	sub	r1, r0, r5
   14fa4:	add	r2, r0, r2
   14fa8:	sub	r1, r1, #2
   14fac:	ands	r2, r2, #3
   14fb0:	beq	14fc8 <rb_setselect_sigio+0x16c>
   14fb4:	mvn	r3, #0
   14fb8:	str	r3, [r8, r7, lsl #3]
   14fbc:	subs	r2, r2, #1
   14fc0:	add	r7, r7, #1
   14fc4:	bne	14fb8 <rb_setselect_sigio+0x15c>
   14fc8:	cmp	r1, #3
   14fcc:	bcc	14ed0 <rb_setselect_sigio+0x74>
   14fd0:	add	r1, r8, r7, lsl #3
   14fd4:	sub	r0, r0, r7
   14fd8:	mvn	r2, #0
   14fdc:	add	r1, r1, #16
   14fe0:	str	r2, [r1, #8]
   14fe4:	str	r2, [r1]
   14fe8:	str	r2, [r1, #-8]
   14fec:	str	r2, [r1, #-16]
   14ff0:	add	r1, r1, #32
   14ff4:	subs	r0, r0, #4
   14ff8:	bne	14fe0 <rb_setselect_sigio+0x184>
   14ffc:	b	14ed0 <rb_setselect_sigio+0x74>
   15000:	bl	5204 <rb_outofmemory@plt>
   15004:	.word	0x000174d4

00015008 <rb_select_sigio>:
   15008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1500c:	add	fp, sp, #28
   15010:	sub	sp, sp, #140	; 0x8c
   15014:	mov	r4, r0
   15018:	ldr	r0, [pc, #1044]	; 15434 <rb_select_sigio+0x42c>
   1501c:	ldr	r0, [pc, r0]
   15020:	cmn	r0, #1
   15024:	beq	15068 <rb_select_sigio+0x60>
   15028:	cmp	r0, #1
   1502c:	beq	1508c <rb_select_sigio+0x84>
   15030:	mov	r0, #0
   15034:	add	r1, sp, #12
   15038:	add	r2, sp, #4
   1503c:	str	r0, [sp, #20]
   15040:	mov	r0, #26
   15044:	str	r0, [sp, #16]
   15048:	mov	r0, #0
   1504c:	bl	4df0 <timer_create@plt>
   15050:	cmp	r0, #0
   15054:	beq	15074 <rb_select_sigio+0x6c>
   15058:	ldr	r0, [pc, #984]	; 15438 <rb_select_sigio+0x430>
   1505c:	mvn	r1, #0
   15060:	add	r0, pc, r0
   15064:	str	r1, [r0]
   15068:	cmp	r4, #0
   1506c:	bpl	1508c <rb_select_sigio+0x84>
   15070:	b	150bc <rb_select_sigio+0xb4>
   15074:	ldr	r0, [sp, #4]
   15078:	bl	52e8 <timer_delete@plt>
   1507c:	ldr	r0, [pc, #952]	; 1543c <rb_select_sigio+0x434>
   15080:	mov	r1, #1
   15084:	add	r0, pc, r0
   15088:	str	r1, [r0]
   1508c:	movw	r0, #19923	; 0x4dd3
   15090:	movt	r0, #4194	; 0x1062
   15094:	smmul	r0, r4, r0
   15098:	asr	r1, r0, #6
   1509c:	add	r0, r1, r0, lsr #31
   150a0:	mov	r1, #1000	; 0x3e8
   150a4:	str	r0, [sp, #4]
   150a8:	mls	r0, r0, r1, r4
   150ac:	movw	r1, #16960	; 0x4240
   150b0:	movt	r1, #15
   150b4:	mul	r0, r0, r1
   150b8:	str	r0, [sp, #8]
   150bc:	ldr	r6, [pc, #892]	; 15440 <rb_select_sigio+0x438>
   150c0:	add	r6, pc, r6
   150c4:	ldrb	r0, [r6]
   150c8:	cmp	r0, #0
   150cc:	bne	1527c <rb_select_sigio+0x274>
   150d0:	ldr	r9, [pc, #876]	; 15444 <rb_select_sigio+0x43c>
   150d4:	add	r5, sp, #12
   150d8:	add	r8, sp, #4
   150dc:	add	r9, pc, r9
   150e0:	cmp	r4, #0
   150e4:	bpl	15100 <rb_select_sigio+0xf8>
   150e8:	b	15124 <rb_select_sigio+0x11c>
   150ec:	ldrb	r0, [r6]
   150f0:	cmp	r0, #0
   150f4:	bne	1527c <rb_select_sigio+0x274>
   150f8:	cmp	r4, #0
   150fc:	bmi	15124 <rb_select_sigio+0x11c>
   15100:	ldr	r0, [pc, #832]	; 15448 <rb_select_sigio+0x440>
   15104:	ldr	r0, [pc, r0]
   15108:	cmp	r0, #0
   1510c:	bne	15124 <rb_select_sigio+0x11c>
   15110:	mov	r0, r9
   15114:	mov	r1, r5
   15118:	mov	r2, r8
   1511c:	bl	4d84 <sigtimedwait@plt>
   15120:	b	15130 <rb_select_sigio+0x128>
   15124:	mov	r0, r9
   15128:	mov	r1, r5
   1512c:	bl	4d3c <sigwaitinfo@plt>
   15130:	mov	r7, r0
   15134:	cmp	r0, #1
   15138:	blt	15254 <rb_select_sigio+0x24c>
   1513c:	cmp	r7, #29
   15140:	beq	15268 <rb_select_sigio+0x260>
   15144:	bl	4d48 <__libc_current_sigrtmin@plt>
   15148:	add	r0, r0, #1
   1514c:	cmp	r7, r0
   15150:	bne	15178 <rb_select_sigio+0x170>
   15154:	ldr	r0, [pc, #756]	; 15450 <rb_select_sigio+0x448>
   15158:	ldr	r0, [pc, r0]
   1515c:	cmp	r0, #0
   15160:	beq	15178 <rb_select_sigio+0x170>
   15164:	ldr	r0, [sp, #32]
   15168:	cmp	r0, #0
   1516c:	beq	150ec <rb_select_sigio+0xe4>
   15170:	bl	5144 <rb_run_one_event@plt>
   15174:	b	150ec <rb_select_sigio+0xe4>
   15178:	ldr	r0, [pc, #728]	; 15458 <rb_select_sigio+0x450>
   1517c:	ldr	r0, [pc, r0]
   15180:	ldrh	r3, [sp, #24]
   15184:	ldr	r1, [r0]
   15188:	ldr	r0, [sp, #28]
   1518c:	add	r1, r1, r0, lsl #3
   15190:	cmp	r0, #0
   15194:	ldrh	r2, [r1, #6]
   15198:	orr	r2, r2, r3
   1519c:	strh	r2, [r1, #6]
   151a0:	bmi	150ec <rb_select_sigio+0xe4>
   151a4:	ldr	r3, [pc, #688]	; 1545c <rb_select_sigio+0x454>
   151a8:	eor	r1, r0, r0, lsr #12
   151ac:	bfc	r1, #12, #20
   151b0:	ldr	r3, [pc, r3]
   151b4:	eor	r1, r1, r0, lsr #24
   151b8:	add	r1, r1, r1, lsl #1
   151bc:	ldr	r3, [r3]
   151c0:	ldr	r1, [r3, r1, lsl #2]
   151c4:	cmp	r1, #0
   151c8:	beq	150ec <rb_select_sigio+0xe4>
   151cc:	sxth	sl, r2
   151d0:	ldr	r7, [r1]
   151d4:	ldr	r2, [r7, #12]
   151d8:	cmp	r2, r0
   151dc:	beq	151f0 <rb_select_sigio+0x1e8>
   151e0:	ldr	r1, [r1, #8]
   151e4:	cmp	r1, #0
   151e8:	bne	151d0 <rb_select_sigio+0x1c8>
   151ec:	b	150ec <rb_select_sigio+0xe4>
   151f0:	cmp	r7, #0
   151f4:	beq	150ec <rb_select_sigio+0xe4>
   151f8:	tst	sl, #89	; 0x59
   151fc:	beq	15224 <rb_select_sigio+0x21c>
   15200:	ldr	r2, [r7, #28]
   15204:	ldr	r1, [r7, #32]
   15208:	mov	r0, #0
   1520c:	str	r0, [r7, #28]
   15210:	str	r0, [r7, #32]
   15214:	cmp	r2, #0
   15218:	beq	15224 <rb_select_sigio+0x21c>
   1521c:	mov	r0, r7
   15220:	blx	r2
   15224:	tst	sl, #284	; 0x11c
   15228:	beq	150ec <rb_select_sigio+0xe4>
   1522c:	ldr	r2, [r7, #36]	; 0x24
   15230:	ldr	r1, [r7, #40]	; 0x28
   15234:	mov	r0, #0
   15238:	str	r0, [r7, #36]	; 0x24
   1523c:	str	r0, [r7, #40]	; 0x28
   15240:	cmp	r2, #0
   15244:	beq	150ec <rb_select_sigio+0xe4>
   15248:	mov	r0, r7
   1524c:	blx	r2
   15250:	b	150ec <rb_select_sigio+0xe4>
   15254:	ldrb	r0, [r6]
   15258:	cmp	r0, #0
   1525c:	bne	1527c <rb_select_sigio+0x274>
   15260:	bl	5210 <rb_set_time@plt>
   15264:	b	15408 <rb_select_sigio+0x400>
   15268:	ldr	r0, [pc, #476]	; 1544c <rb_select_sigio+0x444>
   1526c:	add	r0, pc, r0
   15270:	bl	51a4 <rb_lib_log@plt>
   15274:	mov	r0, #1
   15278:	strb	r0, [r6]
   1527c:	bl	4d48 <__libc_current_sigrtmin@plt>
   15280:	mov	r1, #1
   15284:	bl	4d9c <signal@plt>
   15288:	bl	4d48 <__libc_current_sigrtmin@plt>
   1528c:	mov	r1, #0
   15290:	mov	r5, #0
   15294:	bl	4d9c <signal@plt>
   15298:	strb	r5, [r6]
   1529c:	mov	r2, r4
   152a0:	ldr	r6, [pc, #428]	; 15454 <rb_select_sigio+0x44c>
   152a4:	ldr	r6, [pc, r6]
   152a8:	ldm	r6, {r0, r1}
   152ac:	add	r1, r1, #1
   152b0:	bl	527c <poll@plt>
   152b4:	mov	r4, r0
   152b8:	bl	5210 <rb_set_time@plt>
   152bc:	cmn	r4, #1
   152c0:	ble	15410 <rb_select_sigio+0x408>
   152c4:	cmp	r4, #0
   152c8:	beq	15428 <rb_select_sigio+0x420>
   152cc:	ldr	r0, [r6, #4]
   152d0:	cmp	r0, #0
   152d4:	bmi	15428 <rb_select_sigio+0x420>
   152d8:	ldr	r9, [pc, #384]	; 15460 <rb_select_sigio+0x458>
   152dc:	mov	r8, #0
   152e0:	mov	r0, #0
   152e4:	ldr	r9, [pc, r9]
   152e8:	b	152fc <rb_select_sigio+0x2f4>
   152ec:	ldr	r1, [r6, #4]
   152f0:	add	r0, r5, #1
   152f4:	cmp	r5, r1
   152f8:	bge	15408 <rb_select_sigio+0x400>
   152fc:	mov	r5, r0
   15300:	ldr	r0, [r6]
   15304:	add	r1, r0, r5, lsl #3
   15308:	ldrsh	r7, [r1, #6]
   1530c:	cmp	r7, #0
   15310:	beq	152ec <rb_select_sigio+0x2e4>
   15314:	ldr	r0, [r0, r5, lsl #3]
   15318:	cmp	r0, #0
   1531c:	bmi	152ec <rb_select_sigio+0x2e4>
   15320:	eor	r1, r0, r0, lsr #12
   15324:	ldr	r2, [r9]
   15328:	bfc	r1, #12, #20
   1532c:	eor	r1, r1, r0, lsr #24
   15330:	add	r1, r1, r1, lsl #1
   15334:	ldr	r1, [r2, r1, lsl #2]
   15338:	cmp	r1, #0
   1533c:	beq	152ec <rb_select_sigio+0x2e4>
   15340:	ldr	r4, [r1]
   15344:	ldr	r2, [r4, #12]
   15348:	cmp	r2, r0
   1534c:	beq	15360 <rb_select_sigio+0x358>
   15350:	ldr	r1, [r1, #8]
   15354:	cmp	r1, #0
   15358:	bne	15340 <rb_select_sigio+0x338>
   1535c:	b	152ec <rb_select_sigio+0x2e4>
   15360:	cmp	r4, #0
   15364:	beq	152ec <rb_select_sigio+0x2e4>
   15368:	tst	r7, #89	; 0x59
   1536c:	beq	15390 <rb_select_sigio+0x388>
   15370:	ldr	r2, [r4, #28]
   15374:	ldr	r1, [r4, #32]
   15378:	str	r8, [r4, #28]
   1537c:	str	r8, [r4, #32]
   15380:	cmp	r2, #0
   15384:	beq	15390 <rb_select_sigio+0x388>
   15388:	mov	r0, r4
   1538c:	blx	r2
   15390:	tst	r7, #284	; 0x11c
   15394:	ldrbne	r0, [r4, #16]
   15398:	andsne	r0, r0, #1
   1539c:	bne	153e4 <rb_select_sigio+0x3dc>
   153a0:	ldr	r0, [r4, #28]
   153a4:	cmp	r0, #0
   153a8:	bne	153c0 <rb_select_sigio+0x3b8>
   153ac:	mov	r0, r4
   153b0:	mov	r1, #1
   153b4:	mov	r2, #0
   153b8:	mov	r3, #0
   153bc:	bl	14e5c <rb_setselect_sigio>
   153c0:	ldr	r0, [r4, #36]	; 0x24
   153c4:	cmp	r0, #0
   153c8:	bne	152ec <rb_select_sigio+0x2e4>
   153cc:	mov	r0, r4
   153d0:	mov	r1, #2
   153d4:	mov	r2, #0
   153d8:	mov	r3, #0
   153dc:	bl	14e5c <rb_setselect_sigio>
   153e0:	b	152ec <rb_select_sigio+0x2e4>
   153e4:	ldr	r2, [r4, #36]	; 0x24
   153e8:	ldr	r1, [r4, #40]	; 0x28
   153ec:	str	r8, [r4, #36]	; 0x24
   153f0:	str	r8, [r4, #40]	; 0x28
   153f4:	cmp	r2, #0
   153f8:	beq	153a0 <rb_select_sigio+0x398>
   153fc:	mov	r0, r4
   15400:	blx	r2
   15404:	b	153a0 <rb_select_sigio+0x398>
   15408:	mov	r5, #0
   1540c:	b	15428 <rb_select_sigio+0x420>
   15410:	bl	5540 <__errno_location@plt>
   15414:	ldr	r0, [r0]
   15418:	bl	4cc4 <rb_ignore_errno@plt>
   1541c:	cmp	r0, #0
   15420:	mov	r5, r0
   15424:	movwne	r5, #5
   15428:	mov	r0, r5
   1542c:	sub	sp, fp, #28
   15430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15434:	.word	0x00034c5c
   15438:	.word	0x00034c18
   1543c:	.word	0x00034bf4
   15440:	.word	0x00034b34
   15444:	.word	0x00034b1c
   15448:	.word	0x00034b74
   1544c:	.word	0x00005aac
   15450:	.word	0x00034b20
   15454:	.word	0x000170f0
   15458:	.word	0x00017218
   1545c:	.word	0x000171d4
   15460:	.word	0x000170a0

00015464 <rb_sigio_supports_event>:
   15464:	push	{r4, sl, fp, lr}
   15468:	add	fp, sp, #8
   1546c:	sub	sp, sp, #72	; 0x48
   15470:	ldr	r4, [pc, #120]	; 154f0 <rb_sigio_supports_event+0x8c>
   15474:	ldr	r4, [pc, r4]
   15478:	cmp	r4, #1
   1547c:	beq	154e4 <rb_sigio_supports_event+0x80>
   15480:	cmn	r4, #1
   15484:	bne	15490 <rb_sigio_supports_event+0x2c>
   15488:	mov	r4, #0
   1548c:	b	154e4 <rb_sigio_supports_event+0x80>
   15490:	mov	r4, #0
   15494:	mov	r0, #26
   15498:	add	r1, sp, #4
   1549c:	sub	r2, fp, #12
   154a0:	str	r4, [sp, #12]
   154a4:	str	r0, [sp, #8]
   154a8:	mov	r0, #0
   154ac:	bl	4df0 <timer_create@plt>
   154b0:	cmp	r0, #0
   154b4:	beq	154cc <rb_sigio_supports_event+0x68>
   154b8:	ldr	r0, [pc, #52]	; 154f4 <rb_sigio_supports_event+0x90>
   154bc:	mvn	r1, #0
   154c0:	add	r0, pc, r0
   154c4:	str	r1, [r0]
   154c8:	b	154e4 <rb_sigio_supports_event+0x80>
   154cc:	ldr	r0, [fp, #-12]
   154d0:	bl	52e8 <timer_delete@plt>
   154d4:	ldr	r0, [pc, #28]	; 154f8 <rb_sigio_supports_event+0x94>
   154d8:	mov	r4, #1
   154dc:	add	r0, pc, r0
   154e0:	str	r4, [r0]
   154e4:	mov	r0, r4
   154e8:	sub	sp, fp, #8
   154ec:	pop	{r4, sl, fp, pc}
   154f0:	.word	0x00034804
   154f4:	.word	0x000347b8
   154f8:	.word	0x0003479c

000154fc <rb_sigio_init_event>:
   154fc:	push	{fp, lr}
   15500:	mov	fp, sp
   15504:	sub	sp, sp, #72	; 0x48
   15508:	ldr	r0, [pc, #108]	; 1557c <rb_sigio_init_event+0x80>
   1550c:	ldr	r0, [pc, r0]
   15510:	cmn	r0, #1
   15514:	cmpne	r0, #1
   15518:	bne	15524 <rb_sigio_init_event+0x28>
   1551c:	mov	sp, fp
   15520:	pop	{fp, pc}
   15524:	mov	r0, #0
   15528:	add	r1, sp, #4
   1552c:	sub	r2, fp, #4
   15530:	str	r0, [sp, #12]
   15534:	mov	r0, #26
   15538:	str	r0, [sp, #8]
   1553c:	mov	r0, #0
   15540:	bl	4df0 <timer_create@plt>
   15544:	cmp	r0, #0
   15548:	beq	1555c <rb_sigio_init_event+0x60>
   1554c:	ldr	r0, [pc, #44]	; 15580 <rb_sigio_init_event+0x84>
   15550:	mvn	r1, #0
   15554:	add	r0, pc, r0
   15558:	b	15570 <rb_sigio_init_event+0x74>
   1555c:	ldr	r0, [fp, #-4]
   15560:	bl	52e8 <timer_delete@plt>
   15564:	ldr	r0, [pc, #24]	; 15584 <rb_sigio_init_event+0x88>
   15568:	mov	r1, #1
   1556c:	add	r0, pc, r0
   15570:	str	r1, [r0]
   15574:	mov	sp, fp
   15578:	pop	{fp, pc}
   1557c:	.word	0x0003476c
   15580:	.word	0x00034724
   15584:	.word	0x0003470c

00015588 <rb_sigio_sched_event>:
   15588:	push	{r4, r5, r6, r7, fp, lr}
   1558c:	add	fp, sp, #16
   15590:	sub	sp, sp, #80	; 0x50
   15594:	mov	r4, r0
   15598:	ldr	r0, [pc, #284]	; 156bc <rb_sigio_sched_event+0x134>
   1559c:	ldr	r0, [pc, r0]
   155a0:	cmp	r0, #1
   155a4:	blt	15688 <rb_sigio_sched_event+0x100>
   155a8:	vmov.i32	q8, #0	; 0x00000000
   155ac:	mov	r5, r1
   155b0:	add	r1, sp, #16
   155b4:	mov	r0, #48	; 0x30
   155b8:	mov	r2, r1
   155bc:	vst1.64	{d16-d17}, [r2], r0
   155c0:	add	r0, r1, #32
   155c4:	vst1.64	{d16-d17}, [r0]
   155c8:	add	r0, r1, #16
   155cc:	mov	r1, #4
   155d0:	vst1.64	{d16-d17}, [r2]
   155d4:	vst1.64	{d16-d17}, [r0]
   155d8:	mov	r0, #1
   155dc:	bl	4e98 <calloc@plt>
   155e0:	cmp	r0, #0
   155e4:	beq	156b8 <rb_sigio_sched_event+0x130>
   155e8:	mov	r6, #0
   155ec:	str	r0, [r4, #40]	; 0x28
   155f0:	mov	r7, r0
   155f4:	str	r6, [sp, #24]
   155f8:	bl	4d48 <__libc_current_sigrtmin@plt>
   155fc:	add	r0, r0, #1
   15600:	str	r4, [sp, #16]
   15604:	add	r1, sp, #16
   15608:	mov	r2, r7
   1560c:	str	r0, [sp, #20]
   15610:	mov	r0, #0
   15614:	bl	4df0 <timer_create@plt>
   15618:	cmn	r0, #1
   1561c:	ble	15690 <rb_sigio_sched_event+0x108>
   15620:	str	r6, [sp, #4]
   15624:	str	r6, [sp]
   15628:	str	r6, [sp, #12]
   1562c:	str	r5, [sp, #8]
   15630:	ldr	r0, [r4, #24]
   15634:	cmp	r0, #0
   15638:	beq	1564c <rb_sigio_sched_event+0xc4>
   1563c:	mov	r0, sp
   15640:	add	r0, r0, #8
   15644:	ldrd	r0, [r0]
   15648:	stm	sp, {r0, r1}
   1564c:	ldr	r0, [r7]
   15650:	mov	r2, sp
   15654:	mov	r1, #0
   15658:	mov	r3, #0
   1565c:	bl	4ff4 <timer_settime@plt>
   15660:	mov	r6, #1
   15664:	cmn	r0, #1
   15668:	bgt	156ac <rb_sigio_sched_event+0x124>
   1566c:	bl	5540 <__errno_location@plt>
   15670:	ldr	r0, [r0]
   15674:	bl	4c88 <strerror@plt>
   15678:	mov	r1, r0
   1567c:	ldr	r0, [pc, #64]	; 156c4 <rb_sigio_sched_event+0x13c>
   15680:	add	r0, pc, r0
   15684:	bl	51a4 <rb_lib_log@plt>
   15688:	mov	r6, #0
   1568c:	b	156ac <rb_sigio_sched_event+0x124>
   15690:	bl	5540 <__errno_location@plt>
   15694:	ldr	r0, [r0]
   15698:	bl	4c88 <strerror@plt>
   1569c:	mov	r1, r0
   156a0:	ldr	r0, [pc, #24]	; 156c0 <rb_sigio_sched_event+0x138>
   156a4:	add	r0, pc, r0
   156a8:	bl	51a4 <rb_lib_log@plt>
   156ac:	mov	r0, r6
   156b0:	sub	sp, fp, #16
   156b4:	pop	{r4, r5, r6, r7, fp, pc}
   156b8:	bl	5204 <rb_outofmemory@plt>
   156bc:	.word	0x000346dc
   156c0:	.word	0x0000564f
   156c4:	.word	0x00005685

000156c8 <rb_sigio_unsched_event>:
   156c8:	push	{r4, sl, fp, lr}
   156cc:	add	fp, sp, #8
   156d0:	mov	r4, r0
   156d4:	ldr	r0, [pc, #48]	; 1570c <rb_sigio_unsched_event+0x44>
   156d8:	ldr	r0, [pc, r0]
   156dc:	cmp	r0, #1
   156e0:	poplt	{r4, sl, fp, pc}
   156e4:	ldr	r0, [r4, #40]	; 0x28
   156e8:	ldr	r0, [r0]
   156ec:	bl	52e8 <timer_delete@plt>
   156f0:	ldr	r0, [r4, #40]	; 0x28
   156f4:	cmp	r0, #0
   156f8:	beq	15700 <rb_sigio_unsched_event+0x38>
   156fc:	bl	4f94 <free@plt>
   15700:	mov	r0, #0
   15704:	str	r0, [r4, #40]	; 0x28
   15708:	pop	{r4, sl, fp, pc}
   1570c:	.word	0x000345a0

00015710 <rb_setup_fd_select>:
   15710:	mov	r0, #0
   15714:	bx	lr

00015718 <rb_init_netio_select>:
   15718:	ldr	r0, [pc, #164]	; 157c4 <rb_init_netio_select+0xac>
   1571c:	vmov.i32	q8, #0	; 0x00000000
   15720:	ldr	r0, [pc, r0]
   15724:	ldr	r1, [r0]
   15728:	cmp	r1, #1024	; 0x400
   1572c:	movgt	r1, #1024	; 0x400
   15730:	strgt	r1, [r0]
   15734:	mov	r0, #112	; 0x70
   15738:	ldr	r1, [pc, #136]	; 157c8 <rb_init_netio_select+0xb0>
   1573c:	add	r1, pc, r1
   15740:	mov	r2, r1
   15744:	vst1.64	{d16-d17}, [r2], r0
   15748:	vst1.64	{d16-d17}, [r2]
   1574c:	add	r2, r1, #96	; 0x60
   15750:	vst1.64	{d16-d17}, [r2]
   15754:	add	r2, r1, #80	; 0x50
   15758:	vst1.64	{d16-d17}, [r2]
   1575c:	add	r2, r1, #64	; 0x40
   15760:	vst1.64	{d16-d17}, [r2]
   15764:	add	r2, r1, #48	; 0x30
   15768:	vst1.64	{d16-d17}, [r2]
   1576c:	add	r2, r1, #32
   15770:	add	r1, r1, #16
   15774:	vst1.64	{d16-d17}, [r2]
   15778:	vst1.64	{d16-d17}, [r1]
   1577c:	ldr	r1, [pc, #72]	; 157cc <rb_init_netio_select+0xb4>
   15780:	add	r1, pc, r1
   15784:	add	r2, r1, #16
   15788:	vst1.64	{d16-d17}, [r2]
   1578c:	add	r2, r1, #32
   15790:	vst1.64	{d16-d17}, [r2]
   15794:	add	r2, r1, #48	; 0x30
   15798:	vst1.64	{d16-d17}, [r2]
   1579c:	add	r2, r1, #64	; 0x40
   157a0:	vst1.64	{d16-d17}, [r2]
   157a4:	add	r2, r1, #80	; 0x50
   157a8:	vst1.64	{d16-d17}, [r2]
   157ac:	add	r2, r1, #96	; 0x60
   157b0:	vst1.64	{d16-d17}, [r1], r0
   157b4:	mov	r0, #0
   157b8:	vst1.64	{d16-d17}, [r2]
   157bc:	vst1.64	{d16-d17}, [r1]
   157c0:	bx	lr
   157c4:	.word	0x00016c44
   157c8:	.word	0x00034544
   157cc:	.word	0x00034580

000157d0 <rb_setselect_select>:
   157d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   157d4:	add	fp, sp, #24
   157d8:	tst	r1, #1
   157dc:	beq	158d4 <rb_setselect_select+0x104>
   157e0:	str	r2, [r0, #28]
   157e4:	str	r3, [r0, #32]
   157e8:	mov	r6, #1
   157ec:	cmp	r2, #0
   157f0:	ldr	ip, [r0, #12]
   157f4:	ldr	r5, [pc, #484]	; 159e0 <rb_setselect_select+0x210>
   157f8:	and	r7, ip, #31
   157fc:	add	r5, pc, r5
   15800:	lsl	r6, r6, r7
   15804:	asr	r7, ip, #31
   15808:	add	r7, ip, r7, lsr #27
   1580c:	asr	r7, r7, #5
   15810:	beq	1582c <rb_setselect_select+0x5c>
   15814:	ldr	r4, [r5, r7, lsl #2]
   15818:	orr	r6, r4, r6
   1581c:	str	r6, [r5, r7, lsl #2]
   15820:	ldr	r7, [r0, #20]
   15824:	orr	r4, r7, #1
   15828:	b	15840 <rb_setselect_select+0x70>
   1582c:	ldr	r4, [r5, r7, lsl #2]
   15830:	bic	r6, r4, r6
   15834:	str	r6, [r5, r7, lsl #2]
   15838:	ldr	r7, [r0, #20]
   1583c:	bic	r4, r7, #1
   15840:	str	r4, [r0, #20]
   15844:	tst	r4, #3
   15848:	ldr	lr, [pc, #404]	; 159e4 <rb_setselect_select+0x214>
   1584c:	ldr	lr, [pc, lr]
   15850:	beq	15874 <rb_setselect_select+0xa4>
   15854:	cmp	ip, lr
   15858:	ble	158d4 <rb_setselect_select+0x104>
   1585c:	ldr	r7, [pc, #388]	; 159e8 <rb_setselect_select+0x218>
   15860:	add	r7, pc, r7
   15864:	str	ip, [r7]
   15868:	tst	r1, #2
   1586c:	bne	158dc <rb_setselect_select+0x10c>
   15870:	b	159dc <rb_setselect_select+0x20c>
   15874:	cmp	lr, #0
   15878:	bmi	158d4 <rb_setselect_select+0x104>
   1587c:	cmp	ip, lr
   15880:	bgt	158d4 <rb_setselect_select+0x104>
   15884:	ldr	r4, [pc, #352]	; 159ec <rb_setselect_select+0x21c>
   15888:	ldr	r9, [pc, #352]	; 159f0 <rb_setselect_select+0x220>
   1588c:	ldr	r8, [pc, #352]	; 159f4 <rb_setselect_select+0x224>
   15890:	mov	ip, #1
   15894:	add	r4, pc, r4
   15898:	add	r9, pc, r9
   1589c:	add	r8, pc, r8
   158a0:	lsr	r7, lr, #5
   158a4:	and	r6, lr, #31
   158a8:	ldr	r5, [r4, r7, lsl #2]
   158ac:	tst	r5, ip, lsl r6
   158b0:	lsleq	r5, ip, r6
   158b4:	ldreq	r6, [r9, r7, lsl #2]
   158b8:	tsteq	r6, r5
   158bc:	bne	158d4 <rb_setselect_select+0x104>
   158c0:	sub	r5, lr, #1
   158c4:	cmp	lr, #0
   158c8:	mov	lr, r5
   158cc:	str	r5, [r8]
   158d0:	bgt	158a0 <rb_setselect_select+0xd0>
   158d4:	tst	r1, #2
   158d8:	beq	159dc <rb_setselect_select+0x20c>
   158dc:	str	r2, [r0, #36]	; 0x24
   158e0:	str	r3, [r0, #40]	; 0x28
   158e4:	mov	r7, #1
   158e8:	cmp	r2, #0
   158ec:	ldr	r1, [r0, #12]
   158f0:	and	r3, r1, #31
   158f4:	lsl	r3, r7, r3
   158f8:	beq	15928 <rb_setselect_select+0x158>
   158fc:	ldr	r7, [pc, #244]	; 159f8 <rb_setselect_select+0x228>
   15900:	asr	r2, r1, #31
   15904:	add	r2, r1, r2, lsr #27
   15908:	asr	r2, r2, #5
   1590c:	add	r7, pc, r7
   15910:	ldr	r6, [r7, r2, lsl #2]
   15914:	orr	r3, r6, r3
   15918:	str	r3, [r7, r2, lsl #2]
   1591c:	ldr	r2, [r0, #20]
   15920:	orr	r2, r2, #2
   15924:	b	15950 <rb_setselect_select+0x180>
   15928:	ldr	r7, [pc, #204]	; 159fc <rb_setselect_select+0x22c>
   1592c:	asr	r2, r1, #31
   15930:	add	r2, r1, r2, lsr #27
   15934:	asr	r2, r2, #5
   15938:	add	r7, pc, r7
   1593c:	ldr	r6, [r7, r2, lsl #2]
   15940:	bic	r3, r6, r3
   15944:	str	r3, [r7, r2, lsl #2]
   15948:	ldr	r2, [r0, #20]
   1594c:	bic	r2, r2, #2
   15950:	str	r2, [r0, #20]
   15954:	tst	r2, #3
   15958:	ldr	r0, [pc, #160]	; 15a00 <rb_setselect_select+0x230>
   1595c:	ldr	r0, [pc, r0]
   15960:	beq	1597c <rb_setselect_select+0x1ac>
   15964:	cmp	r1, r0
   15968:	ble	159dc <rb_setselect_select+0x20c>
   1596c:	ldr	r0, [pc, #144]	; 15a04 <rb_setselect_select+0x234>
   15970:	add	r0, pc, r0
   15974:	str	r1, [r0]
   15978:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1597c:	cmp	r0, #0
   15980:	bmi	159dc <rb_setselect_select+0x20c>
   15984:	cmp	r1, r0
   15988:	bgt	159dc <rb_setselect_select+0x20c>
   1598c:	ldr	r2, [pc, #116]	; 15a08 <rb_setselect_select+0x238>
   15990:	ldr	r3, [pc, #116]	; 15a0c <rb_setselect_select+0x23c>
   15994:	ldr	r6, [pc, #116]	; 15a10 <rb_setselect_select+0x240>
   15998:	mov	r1, #1
   1599c:	add	r2, pc, r2
   159a0:	add	r3, pc, r3
   159a4:	add	r6, pc, r6
   159a8:	lsr	r7, r0, #5
   159ac:	and	r5, r0, #31
   159b0:	ldr	r4, [r2, r7, lsl #2]
   159b4:	tst	r4, r1, lsl r5
   159b8:	ldreq	r7, [r3, r7, lsl #2]
   159bc:	lsleq	r5, r1, r5
   159c0:	tsteq	r7, r5
   159c4:	bne	159dc <rb_setselect_select+0x20c>
   159c8:	sub	r7, r0, #1
   159cc:	cmp	r0, #0
   159d0:	mov	r0, r7
   159d4:	str	r7, [r6]
   159d8:	bgt	159a8 <rb_setselect_select+0x1d8>
   159dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   159e0:	.word	0x00034484
   159e4:	.word	0x00016c04
   159e8:	.word	0x00016bf0
   159ec:	.word	0x000343ec
   159f0:	.word	0x00034468
   159f4:	.word	0x00016bb4
   159f8:	.word	0x000343f4
   159fc:	.word	0x000343c8
   15a00:	.word	0x00016af4
   15a04:	.word	0x00016ae0
   15a08:	.word	0x000342e4
   15a0c:	.word	0x00034360
   15a10:	.word	0x00016aac

00015a14 <rb_select_select>:
   15a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a18:	add	fp, sp, #28
   15a1c:	sub	sp, sp, #12
   15a20:	ldr	r9, [pc, #832]	; 15d68 <rb_select_select+0x354>
   15a24:	ldr	r1, [pc, #832]	; 15d6c <rb_select_select+0x358>
   15a28:	mov	r5, r0
   15a2c:	mov	r2, #128	; 0x80
   15a30:	add	r9, pc, r9
   15a34:	add	r1, pc, r1
   15a38:	mov	r0, r9
   15a3c:	bl	509c <memcpy@plt>
   15a40:	ldr	sl, [pc, #808]	; 15d70 <rb_select_select+0x35c>
   15a44:	ldr	r1, [pc, #808]	; 15d74 <rb_select_select+0x360>
   15a48:	mov	r2, #128	; 0x80
   15a4c:	add	sl, pc, sl
   15a50:	add	r1, pc, r1
   15a54:	mov	r0, sl
   15a58:	bl	509c <memcpy@plt>
   15a5c:	mov	r0, #1000	; 0x3e8
   15a60:	mov	r6, #0
   15a64:	add	r4, sp, #4
   15a68:	mul	r7, r5, r0
   15a6c:	stmib	sp, {r6, r7}
   15a70:	mov	r1, r9
   15a74:	mov	r2, sl
   15a78:	mov	r3, #0
   15a7c:	ldr	r0, [pc, #756]	; 15d78 <rb_select_select+0x364>
   15a80:	ldr	r0, [pc, r0]
   15a84:	str	r4, [sp]
   15a88:	add	r0, r0, #1
   15a8c:	bl	51bc <select@plt>
   15a90:	cmn	r0, #1
   15a94:	bgt	15abc <rb_select_select+0xa8>
   15a98:	bl	5540 <__errno_location@plt>
   15a9c:	ldr	r0, [r0]
   15aa0:	bl	4cc4 <rb_ignore_errno@plt>
   15aa4:	cmp	r0, #0
   15aa8:	bne	15a6c <rb_select_select+0x58>
   15aac:	bl	5210 <rb_set_time@plt>
   15ab0:	mvn	r0, #0
   15ab4:	sub	sp, fp, #28
   15ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15abc:	mov	r5, r0
   15ac0:	bl	5210 <rb_set_time@plt>
   15ac4:	mov	r0, #0
   15ac8:	cmp	r5, #0
   15acc:	beq	15d60 <rb_select_select+0x34c>
   15ad0:	ldr	r1, [pc, #676]	; 15d7c <rb_select_select+0x368>
   15ad4:	ldr	r1, [pc, r1]
   15ad8:	cmp	r1, #0
   15adc:	bmi	15d60 <rb_select_select+0x34c>
   15ae0:	ldr	r7, [pc, #664]	; 15d80 <rb_select_select+0x36c>
   15ae4:	mov	ip, #1
   15ae8:	mov	r0, #0
   15aec:	ldr	r7, [pc, r7]
   15af0:	ldr	lr, [pc, #652]	; 15d84 <rb_select_select+0x370>
   15af4:	add	lr, pc, lr
   15af8:	b	15b18 <rb_select_select+0x104>
   15afc:	cmp	r1, r0
   15b00:	strgt	r1, [lr]
   15b04:	ldr	r1, [pc, #684]	; 15db8 <rb_select_select+0x3a4>
   15b08:	add	r0, r8, #1
   15b0c:	ldr	r1, [pc, r1]
   15b10:	cmp	r8, r1
   15b14:	bge	15d5c <rb_select_select+0x348>
   15b18:	mov	r8, r0
   15b1c:	eor	r0, r0, r0, lsr #12
   15b20:	ldr	r1, [r7]
   15b24:	bfc	r0, #12, #20
   15b28:	eor	r0, r0, r8, lsr #24
   15b2c:	add	r0, r0, r0, lsl #1
   15b30:	ldr	r0, [r1, r0, lsl #2]
   15b34:	cmp	r0, #0
   15b38:	beq	15b04 <rb_select_select+0xf0>
   15b3c:	ldr	r5, [r0]
   15b40:	ldr	r1, [r5, #12]
   15b44:	cmp	r1, r8
   15b48:	beq	15b5c <rb_select_select+0x148>
   15b4c:	ldr	r0, [r0, #8]
   15b50:	cmp	r0, #0
   15b54:	bne	15b3c <rb_select_select+0x128>
   15b58:	b	15b04 <rb_select_select+0xf0>
   15b5c:	cmp	r5, #0
   15b60:	beq	15b04 <rb_select_select+0xf0>
   15b64:	lsr	r6, r8, #5
   15b68:	and	r4, r8, #31
   15b6c:	ldr	r0, [r9, r6, lsl #2]
   15b70:	tst	r0, ip, lsl r4
   15b74:	beq	15bac <rb_select_select+0x198>
   15b78:	ldr	r2, [r5, #28]
   15b7c:	mov	r0, #0
   15b80:	str	r0, [r5, #28]
   15b84:	cmp	r2, #0
   15b88:	beq	15bac <rb_select_select+0x198>
   15b8c:	ldr	r1, [r5, #32]
   15b90:	mov	r0, r5
   15b94:	blx	r2
   15b98:	ldr	lr, [pc, #488]	; 15d88 <rb_select_select+0x374>
   15b9c:	ldr	r7, [pc, #488]	; 15d8c <rb_select_select+0x378>
   15ba0:	mov	ip, #1
   15ba4:	ldr	r7, [pc, r7]
   15ba8:	add	lr, pc, lr
   15bac:	ldrb	r0, [r5, #16]
   15bb0:	tst	r0, #1
   15bb4:	beq	15b04 <rb_select_select+0xf0>
   15bb8:	ldr	r1, [sl, r6, lsl #2]
   15bbc:	lsl	r0, ip, r4
   15bc0:	tst	r1, r0
   15bc4:	beq	15bfc <rb_select_select+0x1e8>
   15bc8:	ldr	r2, [r5, #36]	; 0x24
   15bcc:	mov	r0, #0
   15bd0:	str	r0, [r5, #36]	; 0x24
   15bd4:	cmp	r2, #0
   15bd8:	beq	15bfc <rb_select_select+0x1e8>
   15bdc:	ldr	r1, [r5, #40]	; 0x28
   15be0:	mov	r0, r5
   15be4:	blx	r2
   15be8:	ldr	lr, [pc, #416]	; 15d90 <rb_select_select+0x37c>
   15bec:	ldr	r7, [pc, #416]	; 15d94 <rb_select_select+0x380>
   15bf0:	mov	ip, #1
   15bf4:	ldr	r7, [pc, r7]
   15bf8:	add	lr, pc, lr
   15bfc:	ldr	r0, [r5, #28]
   15c00:	cmp	r0, #0
   15c04:	bne	15cb0 <rb_select_select+0x29c>
   15c08:	ldr	r1, [r5, #12]
   15c0c:	ldr	r2, [pc, #388]	; 15d98 <rb_select_select+0x384>
   15c10:	asr	r0, r1, #31
   15c14:	add	r2, pc, r2
   15c18:	and	r3, r1, #31
   15c1c:	add	r0, r1, r0, lsr #27
   15c20:	mov	r6, r2
   15c24:	asr	r0, r0, #5
   15c28:	ldr	r2, [r2, r0, lsl #2]
   15c2c:	bic	r2, r2, ip, lsl r3
   15c30:	str	r2, [r6, r0, lsl #2]
   15c34:	ldr	r2, [r5, #20]
   15c38:	bic	r0, r2, #1
   15c3c:	tst	r2, #2
   15c40:	str	r0, [r5, #20]
   15c44:	ldr	r0, [pc, #336]	; 15d9c <rb_select_select+0x388>
   15c48:	ldr	r0, [pc, r0]
   15c4c:	bne	15ca8 <rb_select_select+0x294>
   15c50:	cmp	r0, #0
   15c54:	bmi	15cb0 <rb_select_select+0x29c>
   15c58:	cmp	r1, r0
   15c5c:	bgt	15cb0 <rb_select_select+0x29c>
   15c60:	ldr	r3, [pc, #312]	; 15da0 <rb_select_select+0x38c>
   15c64:	lsr	r1, r0, #5
   15c68:	and	r2, r0, #31
   15c6c:	add	r3, pc, r3
   15c70:	ldr	r3, [r3, r1, lsl #2]
   15c74:	tst	r3, ip, lsl r2
   15c78:	ldreq	r3, [pc, #292]	; 15da4 <rb_select_select+0x390>
   15c7c:	lsleq	r2, ip, r2
   15c80:	addeq	r3, pc, r3
   15c84:	ldreq	r1, [r3, r1, lsl #2]
   15c88:	tsteq	r1, r2
   15c8c:	bne	15cb0 <rb_select_select+0x29c>
   15c90:	sub	r1, r0, #1
   15c94:	cmp	r0, #0
   15c98:	mov	r0, r1
   15c9c:	str	r1, [lr]
   15ca0:	bgt	15c60 <rb_select_select+0x24c>
   15ca4:	b	15cb0 <rb_select_select+0x29c>
   15ca8:	cmp	r1, r0
   15cac:	strgt	r1, [lr]
   15cb0:	ldr	r0, [r5, #36]	; 0x24
   15cb4:	cmp	r0, #0
   15cb8:	bne	15b04 <rb_select_select+0xf0>
   15cbc:	ldr	r1, [r5, #12]
   15cc0:	ldr	r2, [pc, #224]	; 15da8 <rb_select_select+0x394>
   15cc4:	asr	r0, r1, #31
   15cc8:	add	r2, pc, r2
   15ccc:	and	r3, r1, #31
   15cd0:	add	r0, r1, r0, lsr #27
   15cd4:	mov	r6, r2
   15cd8:	asr	r0, r0, #5
   15cdc:	ldr	r2, [r2, r0, lsl #2]
   15ce0:	bic	r2, r2, ip, lsl r3
   15ce4:	str	r2, [r6, r0, lsl #2]
   15ce8:	ldr	r2, [r5, #20]
   15cec:	bic	r0, r2, #2
   15cf0:	tst	r2, #1
   15cf4:	str	r0, [r5, #20]
   15cf8:	ldr	r0, [pc, #172]	; 15dac <rb_select_select+0x398>
   15cfc:	ldr	r0, [pc, r0]
   15d00:	bne	15afc <rb_select_select+0xe8>
   15d04:	cmp	r0, #0
   15d08:	bmi	15b04 <rb_select_select+0xf0>
   15d0c:	cmp	r1, r0
   15d10:	bgt	15b04 <rb_select_select+0xf0>
   15d14:	ldr	r3, [pc, #148]	; 15db0 <rb_select_select+0x39c>
   15d18:	lsr	r1, r0, #5
   15d1c:	and	r2, r0, #31
   15d20:	add	r3, pc, r3
   15d24:	ldr	r3, [r3, r1, lsl #2]
   15d28:	tst	r3, ip, lsl r2
   15d2c:	ldreq	r3, [pc, #128]	; 15db4 <rb_select_select+0x3a0>
   15d30:	lsleq	r2, ip, r2
   15d34:	addeq	r3, pc, r3
   15d38:	ldreq	r1, [r3, r1, lsl #2]
   15d3c:	tsteq	r1, r2
   15d40:	bne	15b04 <rb_select_select+0xf0>
   15d44:	sub	r1, r0, #1
   15d48:	cmp	r0, #0
   15d4c:	mov	r0, r1
   15d50:	str	r1, [lr]
   15d54:	bgt	15d14 <rb_select_select+0x300>
   15d58:	b	15b04 <rb_select_select+0xf0>
   15d5c:	mov	r0, #0
   15d60:	sub	sp, fp, #28
   15d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d68:	.word	0x00034350
   15d6c:	.word	0x0003424c
   15d70:	.word	0x000343b4
   15d74:	.word	0x000342b0
   15d78:	.word	0x000169d0
   15d7c:	.word	0x0001697c
   15d80:	.word	0x00016898
   15d84:	.word	0x0001695c
   15d88:	.word	0x000168a8
   15d8c:	.word	0x000167e0
   15d90:	.word	0x00016858
   15d94:	.word	0x00016790
   15d98:	.word	0x0003406c
   15d9c:	.word	0x00016808
   15da0:	.word	0x00034014
   15da4:	.word	0x00034080
   15da8:	.word	0x00034038
   15dac:	.word	0x00016754
   15db0:	.word	0x00033f60
   15db4:	.word	0x00033fcc
   15db8:	.word	0x00016944

00015dbc <rb_init_netio_kqueue>:
   15dbc:	push	{fp, lr}
   15dc0:	mov	fp, sp
   15dc4:	bl	5540 <__errno_location@plt>
   15dc8:	mov	r1, #38	; 0x26
   15dcc:	str	r1, [r0]
   15dd0:	mvn	r0, #0
   15dd4:	pop	{fp, pc}

00015dd8 <rb_setselect_kqueue>:
   15dd8:	push	{fp, lr}
   15ddc:	mov	fp, sp
   15de0:	bl	5540 <__errno_location@plt>
   15de4:	mov	r1, #38	; 0x26
   15de8:	str	r1, [r0]
   15dec:	pop	{fp, pc}

00015df0 <rb_select_kqueue>:
   15df0:	push	{fp, lr}
   15df4:	mov	fp, sp
   15df8:	bl	5540 <__errno_location@plt>
   15dfc:	mov	r1, #38	; 0x26
   15e00:	str	r1, [r0]
   15e04:	mvn	r0, #0
   15e08:	pop	{fp, pc}

00015e0c <rb_setup_fd_kqueue>:
   15e0c:	push	{fp, lr}
   15e10:	mov	fp, sp
   15e14:	bl	5540 <__errno_location@plt>
   15e18:	mov	r1, #38	; 0x26
   15e1c:	str	r1, [r0]
   15e20:	mvn	r0, #0
   15e24:	pop	{fp, pc}

00015e28 <rb_kqueue_init_event>:
   15e28:	bx	lr

00015e2c <rb_kqueue_sched_event>:
   15e2c:	push	{fp, lr}
   15e30:	mov	fp, sp
   15e34:	bl	5540 <__errno_location@plt>
   15e38:	mov	r1, #38	; 0x26
   15e3c:	str	r1, [r0]
   15e40:	mvn	r0, #0
   15e44:	pop	{fp, pc}

00015e48 <rb_kqueue_unsched_event>:
   15e48:	bx	lr

00015e4c <rb_kqueue_supports_event>:
   15e4c:	push	{fp, lr}
   15e50:	mov	fp, sp
   15e54:	bl	5540 <__errno_location@plt>
   15e58:	mov	r1, #38	; 0x26
   15e5c:	str	r1, [r0]
   15e60:	mov	r0, #0
   15e64:	pop	{fp, pc}

00015e68 <rb_rawbuf_flush>:
   15e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e6c:	add	fp, sp, #28
   15e70:	sub	sp, sp, #4
   15e74:	sub	sp, sp, #8192	; 0x2000
   15e78:	mov	r4, r0
   15e7c:	ldr	r0, [r0]
   15e80:	cmp	r0, #0
   15e84:	beq	16040 <rb_rawbuf_flush+0x1d8>
   15e88:	mov	r0, r1
   15e8c:	mov	r8, r1
   15e90:	bl	4d78 <rb_fd_ssl@plt>
   15e94:	cmp	r0, #0
   15e98:	beq	15eb8 <rb_rawbuf_flush+0x50>
   15e9c:	ldr	r0, [r4]
   15ea0:	ldr	r6, [r0]
   15ea4:	ldrb	r0, [r6, #1040]	; 0x410
   15ea8:	cmp	r0, #0
   15eac:	beq	16054 <rb_rawbuf_flush+0x1ec>
   15eb0:	ldr	r0, [r4, #16]
   15eb4:	b	16064 <rb_rawbuf_flush+0x1fc>
   15eb8:	mov	r7, sp
   15ebc:	mov	r1, #0
   15ec0:	mov	r2, #8192	; 0x2000
   15ec4:	mov	r6, #0
   15ec8:	mov	r0, r7
   15ecc:	bl	4ed4 <memset@plt>
   15ed0:	ldr	r0, [r4]
   15ed4:	cmp	r0, #0
   15ed8:	beq	16040 <rb_rawbuf_flush+0x1d8>
   15edc:	movw	r1, #1022	; 0x3fe
   15ee0:	ldr	r3, [r0]
   15ee4:	ldrb	r2, [r3, #1040]	; 0x410
   15ee8:	cmp	r2, #0
   15eec:	beq	15f04 <rb_rawbuf_flush+0x9c>
   15ef0:	ldr	r5, [r4, #16]
   15ef4:	ldr	r2, [r3, #1036]	; 0x40c
   15ef8:	add	r3, r3, r5
   15efc:	sub	r2, r2, r5
   15f00:	b	15f08 <rb_rawbuf_flush+0xa0>
   15f04:	ldr	r2, [r3, #1036]	; 0x40c
   15f08:	add	r5, r3, #12
   15f0c:	add	r3, r7, r6, lsl #3
   15f10:	add	r9, r6, #1
   15f14:	cmp	r6, r1
   15f18:	str	r5, [r7, r6, lsl #3]
   15f1c:	str	r2, [r3, #4]
   15f20:	bhi	15f34 <rb_rawbuf_flush+0xcc>
   15f24:	ldr	r0, [r0, #8]
   15f28:	mov	r6, r9
   15f2c:	cmp	r0, #0
   15f30:	bne	15ee0 <rb_rawbuf_flush+0x78>
   15f34:	mov	r1, sp
   15f38:	mov	r0, r8
   15f3c:	mov	r2, r9
   15f40:	bl	533c <rb_writev@plt>
   15f44:	mov	r8, r0
   15f48:	cmp	r0, #1
   15f4c:	blt	1610c <rb_rawbuf_flush+0x2a4>
   15f50:	ldr	sl, [r4]
   15f54:	cmp	sl, #0
   15f58:	beq	1610c <rb_rawbuf_flush+0x2a4>
   15f5c:	mov	r6, #0
   15f60:	mov	r5, r8
   15f64:	ldr	r1, [sl]
   15f68:	ldr	sl, [sl, #8]
   15f6c:	ldrb	r0, [r1, #1040]	; 0x410
   15f70:	ldr	r3, [r1, #1036]	; 0x40c
   15f74:	cmp	r0, #0
   15f78:	beq	15f8c <rb_rawbuf_flush+0x124>
   15f7c:	ldr	r0, [r4, #16]
   15f80:	sub	r7, r3, r0
   15f84:	cmp	r5, r7
   15f88:	bge	15fc0 <rb_rawbuf_flush+0x158>
   15f8c:	cmp	r5, r3
   15f90:	blt	16118 <rb_rawbuf_flush+0x2b0>
   15f94:	ldr	r0, [r4, #12]
   15f98:	sub	r0, r0, r3
   15f9c:	str	r0, [r4, #12]
   15fa0:	ldr	r0, [r1, #8]
   15fa4:	ldr	r2, [r1, #4]
   15fa8:	cmp	r0, #0
   15fac:	beq	15fe8 <rb_rawbuf_flush+0x180>
   15fb0:	str	r2, [r0, #4]
   15fb4:	mov	r7, r3
   15fb8:	ldr	r2, [r1, #4]
   15fbc:	b	15ff8 <rb_rawbuf_flush+0x190>
   15fc0:	ldr	r0, [r4, #12]
   15fc4:	sub	r0, r0, r7
   15fc8:	str	r0, [r4, #12]
   15fcc:	ldr	r0, [r1, #8]
   15fd0:	ldr	r2, [r1, #4]
   15fd4:	cmp	r0, #0
   15fd8:	beq	15ff4 <rb_rawbuf_flush+0x18c>
   15fdc:	str	r2, [r0, #4]
   15fe0:	ldr	r2, [r1, #4]
   15fe4:	b	15ff8 <rb_rawbuf_flush+0x190>
   15fe8:	str	r2, [r4, #4]
   15fec:	mov	r7, r3
   15ff0:	b	15ff8 <rb_rawbuf_flush+0x190>
   15ff4:	str	r2, [r4, #4]
   15ff8:	cmp	r2, #0
   15ffc:	mov	r3, r4
   16000:	addne	r3, r2, #8
   16004:	str	r0, [r3]
   16008:	str	r6, [r1, #4]
   1600c:	str	r6, [r1, #8]
   16010:	ldr	r0, [r4, #8]
   16014:	sub	r0, r0, #1
   16018:	str	r0, [r4, #8]
   1601c:	ldr	r0, [pc, #268]	; 16130 <rb_rawbuf_flush+0x2c8>
   16020:	ldr	r0, [pc, r0]
   16024:	bl	515c <rb_bh_free@plt>
   16028:	cmp	sl, #0
   1602c:	beq	1610c <rb_rawbuf_flush+0x2a4>
   16030:	sub	r5, r5, r7
   16034:	subs	r9, r9, #1
   16038:	bne	15f64 <rb_rawbuf_flush+0xfc>
   1603c:	b	1610c <rb_rawbuf_flush+0x2a4>
   16040:	bl	5540 <__errno_location@plt>
   16044:	mov	r1, #11
   16048:	mvn	r8, #0
   1604c:	str	r1, [r0]
   16050:	b	1610c <rb_rawbuf_flush+0x2a4>
   16054:	mov	r0, #1
   16058:	strb	r0, [r6, #1040]	; 0x410
   1605c:	mov	r0, #0
   16060:	str	r0, [r4, #16]
   16064:	ldr	r1, [r6, #1036]	; 0x40c
   16068:	sub	r2, r1, r0
   1606c:	add	r0, r6, r0
   16070:	add	r1, r0, #12
   16074:	mov	r0, r8
   16078:	bl	4f04 <rb_write@plt>
   1607c:	mov	r8, r0
   16080:	cmp	r0, #1
   16084:	blt	1610c <rb_rawbuf_flush+0x2a4>
   16088:	ldr	r0, [r4, #16]
   1608c:	add	r0, r0, r8
   16090:	str	r0, [r4, #16]
   16094:	ldr	r1, [r6, #1036]	; 0x40c
   16098:	cmp	r0, r1
   1609c:	bne	16100 <rb_rawbuf_flush+0x298>
   160a0:	mov	r0, #0
   160a4:	str	r0, [r4, #16]
   160a8:	ldr	r0, [r6, #8]
   160ac:	ldr	r1, [r6, #4]
   160b0:	cmp	r0, #0
   160b4:	beq	160c4 <rb_rawbuf_flush+0x25c>
   160b8:	str	r1, [r0, #4]
   160bc:	ldr	r1, [r6, #4]
   160c0:	b	160c8 <rb_rawbuf_flush+0x260>
   160c4:	str	r1, [r4, #4]
   160c8:	cmp	r1, #0
   160cc:	mov	r2, r4
   160d0:	addne	r2, r1, #8
   160d4:	mov	r1, r6
   160d8:	str	r0, [r2]
   160dc:	mov	r0, #0
   160e0:	str	r0, [r6, #4]
   160e4:	str	r0, [r6, #8]
   160e8:	ldr	r0, [r4, #8]
   160ec:	sub	r0, r0, #1
   160f0:	str	r0, [r4, #8]
   160f4:	ldr	r0, [pc, #56]	; 16134 <rb_rawbuf_flush+0x2cc>
   160f8:	ldr	r0, [pc, r0]
   160fc:	bl	515c <rb_bh_free@plt>
   16100:	ldr	r0, [r4, #12]
   16104:	sub	r0, r0, r8
   16108:	str	r0, [r4, #12]
   1610c:	mov	r0, r8
   16110:	sub	sp, fp, #28
   16114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16118:	mov	r0, #1
   1611c:	strb	r0, [r1, #1040]	; 0x410
   16120:	str	r5, [r4, #16]
   16124:	ldr	r0, [r4, #12]
   16128:	sub	r0, r0, r5
   1612c:	b	16108 <rb_rawbuf_flush+0x2a0>
   16130:	.word	0x00033e60
   16134:	.word	0x00033d88

00016138 <rb_rawbuf_append>:
   16138:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1613c:	add	fp, sp, #24
   16140:	mov	r8, r0
   16144:	ldr	r0, [r0, #4]
   16148:	mov	r6, r2
   1614c:	mov	r5, r1
   16150:	cmp	r0, #0
   16154:	beq	1617c <rb_rawbuf_append+0x44>
   16158:	ldr	r4, [r0]
   1615c:	cmp	r4, #0
   16160:	beq	1617c <rb_rawbuf_append+0x44>
   16164:	ldr	r0, [r4, #1036]	; 0x40c
   16168:	cmp	r0, #1024	; 0x400
   1616c:	bge	1617c <rb_rawbuf_append+0x44>
   16170:	ldrb	r1, [r4, #1040]	; 0x410
   16174:	cmp	r1, #0
   16178:	beq	16224 <rb_rawbuf_append+0xec>
   1617c:	cmp	r6, #1
   16180:	blt	16270 <rb_rawbuf_append+0x138>
   16184:	mov	r9, #0
   16188:	b	161e8 <rb_rawbuf_append+0xb0>
   1618c:	add	r0, r0, #8
   16190:	str	r7, [r0]
   16194:	str	r7, [r8, #4]
   16198:	cmp	r6, #1024	; 0x400
   1619c:	mov	r4, r6
   161a0:	mov	r1, r5
   161a4:	ldr	r0, [r8, #8]
   161a8:	movge	r4, #1024	; 0x400
   161ac:	mov	r2, r4
   161b0:	add	r0, r0, #1
   161b4:	str	r0, [r8, #8]
   161b8:	add	r0, r7, #12
   161bc:	bl	509c <memcpy@plt>
   161c0:	ldr	r0, [r7, #1036]	; 0x40c
   161c4:	sub	r6, r6, r4
   161c8:	add	r5, r5, r4
   161cc:	cmp	r6, #0
   161d0:	add	r0, r0, r4
   161d4:	str	r0, [r7, #1036]	; 0x40c
   161d8:	ldr	r0, [r8, #12]
   161dc:	add	r0, r0, r4
   161e0:	str	r0, [r8, #12]
   161e4:	ble	16270 <rb_rawbuf_append+0x138>
   161e8:	ldr	r0, [pc, #132]	; 16274 <rb_rawbuf_append+0x13c>
   161ec:	ldr	r0, [pc, r0]
   161f0:	bl	51d4 <rb_bh_alloc@plt>
   161f4:	str	r9, [r0, #8]
   161f8:	str	r0, [r0]
   161fc:	mov	r7, r0
   16200:	ldr	r0, [r8, #4]
   16204:	cmp	r0, #0
   16208:	str	r0, [r7, #4]
   1620c:	bne	1618c <rb_rawbuf_append+0x54>
   16210:	ldr	r0, [r8]
   16214:	cmp	r0, #0
   16218:	bne	16194 <rb_rawbuf_append+0x5c>
   1621c:	mov	r0, r8
   16220:	b	16190 <rb_rawbuf_append+0x58>
   16224:	rsb	r7, r0, #1024	; 0x400
   16228:	add	r0, r4, r0
   1622c:	mov	r1, r5
   16230:	cmp	r7, r6
   16234:	add	r0, r0, #12
   16238:	movgt	r7, r6
   1623c:	mov	r2, r7
   16240:	bl	509c <memcpy@plt>
   16244:	ldr	r0, [r4, #1036]	; 0x40c
   16248:	subs	r6, r6, r7
   1624c:	add	r0, r7, r0
   16250:	str	r0, [r4, #1036]	; 0x40c
   16254:	ldr	r0, [r8, #12]
   16258:	add	r0, r0, r7
   1625c:	str	r0, [r8, #12]
   16260:	beq	16270 <rb_rawbuf_append+0x138>
   16264:	add	r5, r5, r7
   16268:	cmp	r6, #1
   1626c:	bge	16184 <rb_rawbuf_append+0x4c>
   16270:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16274:	.word	0x00033c94

00016278 <rb_rawbuf_get>:
   16278:	push	{r4, r5, r6, r7, fp, lr}
   1627c:	add	fp, sp, #16
   16280:	mov	r4, r0
   16284:	ldr	r0, [r0]
   16288:	cmp	r0, #0
   1628c:	beq	162b4 <rb_rawbuf_get+0x3c>
   16290:	ldr	r7, [r0]
   16294:	mov	r5, r2
   16298:	ldrb	r0, [r7, #1040]	; 0x410
   1629c:	cmp	r0, #0
   162a0:	beq	162c0 <rb_rawbuf_get+0x48>
   162a4:	ldr	r0, [r4, #16]
   162a8:	add	r0, r7, r0
   162ac:	add	r2, r0, #12
   162b0:	b	162c4 <rb_rawbuf_get+0x4c>
   162b4:	mov	r6, #0
   162b8:	mov	r0, r6
   162bc:	pop	{r4, r5, r6, r7, fp, pc}
   162c0:	add	r2, r7, #12
   162c4:	ldr	r6, [r7, #1036]	; 0x40c
   162c8:	mov	r0, r1
   162cc:	mov	r1, r2
   162d0:	cmp	r6, r5
   162d4:	movge	r6, r5
   162d8:	mov	r2, r6
   162dc:	bl	509c <memcpy@plt>
   162e0:	ldr	r0, [r7, #1036]	; 0x40c
   162e4:	cmp	r0, r6
   162e8:	bne	16310 <rb_rawbuf_get+0x98>
   162ec:	mov	r0, #0
   162f0:	str	r0, [r4, #16]
   162f4:	ldr	r0, [r7, #8]
   162f8:	ldr	r1, [r7, #4]
   162fc:	cmp	r0, #0
   16300:	beq	16340 <rb_rawbuf_get+0xc8>
   16304:	str	r1, [r0, #4]
   16308:	ldr	r1, [r7, #4]
   1630c:	b	16344 <rb_rawbuf_get+0xcc>
   16310:	mov	r1, #1
   16314:	sub	r0, r0, r6
   16318:	strb	r1, [r7, #1040]	; 0x410
   1631c:	str	r0, [r7, #1036]	; 0x40c
   16320:	ldr	r0, [r4, #12]
   16324:	ldr	r1, [r4, #16]
   16328:	sub	r0, r0, r6
   1632c:	add	r1, r1, r6
   16330:	str	r0, [r4, #12]
   16334:	mov	r0, r6
   16338:	str	r1, [r4, #16]
   1633c:	pop	{r4, r5, r6, r7, fp, pc}
   16340:	str	r1, [r4, #4]
   16344:	cmp	r1, #0
   16348:	mov	r2, r4
   1634c:	addne	r2, r1, #8
   16350:	mov	r1, r7
   16354:	str	r0, [r2]
   16358:	mov	r0, #0
   1635c:	str	r0, [r7, #4]
   16360:	str	r0, [r7, #8]
   16364:	ldr	r0, [r4, #8]
   16368:	sub	r0, r0, #1
   1636c:	str	r0, [r4, #8]
   16370:	ldr	r0, [pc, #24]	; 16390 <rb_rawbuf_get+0x118>
   16374:	ldr	r0, [pc, r0]
   16378:	bl	515c <rb_bh_free@plt>
   1637c:	ldr	r0, [r4, #12]
   16380:	sub	r0, r0, r5
   16384:	str	r0, [r4, #12]
   16388:	mov	r0, r6
   1638c:	pop	{r4, r5, r6, r7, fp, pc}
   16390:	.word	0x00033b0c

00016394 <rb_rawbuf_length>:
   16394:	ldr	r0, [r0, #12]
   16398:	bx	lr

0001639c <rb_new_rawbuffer>:
   1639c:	push	{fp, lr}
   163a0:	mov	fp, sp
   163a4:	mov	r0, #1
   163a8:	mov	r1, #20
   163ac:	bl	4e98 <calloc@plt>
   163b0:	cmp	r0, #0
   163b4:	popne	{fp, pc}
   163b8:	bl	5204 <rb_outofmemory@plt>

000163bc <rb_free_rawbuffer>:
   163bc:	push	{r4, r5, r6, sl, fp, lr}
   163c0:	add	fp, sp, #16
   163c4:	ldr	r5, [r0]
   163c8:	mov	r4, r0
   163cc:	cmp	r5, #0
   163d0:	beq	1643c <rb_free_rawbuffer+0x80>
   163d4:	mov	r6, #0
   163d8:	b	16418 <rb_free_rawbuffer+0x5c>
   163dc:	str	r2, [r4, #4]
   163e0:	cmp	r2, #0
   163e4:	mov	r3, r4
   163e8:	addne	r3, r2, #8
   163ec:	str	r0, [r3]
   163f0:	str	r6, [r1, #4]
   163f4:	str	r6, [r1, #8]
   163f8:	ldr	r0, [r4, #8]
   163fc:	sub	r0, r0, #1
   16400:	str	r0, [r4, #8]
   16404:	ldr	r0, [pc, #60]	; 16448 <rb_free_rawbuffer+0x8c>
   16408:	ldr	r0, [pc, r0]
   1640c:	bl	515c <rb_bh_free@plt>
   16410:	cmp	r5, #0
   16414:	beq	1643c <rb_free_rawbuffer+0x80>
   16418:	ldr	r1, [r5]
   1641c:	ldr	r5, [r5, #8]
   16420:	ldr	r0, [r1, #8]
   16424:	ldr	r2, [r1, #4]
   16428:	cmp	r0, #0
   1642c:	beq	163dc <rb_free_rawbuffer+0x20>
   16430:	str	r2, [r0, #4]
   16434:	ldr	r2, [r1, #4]
   16438:	b	163e0 <rb_free_rawbuffer+0x24>
   1643c:	mov	r0, r4
   16440:	pop	{r4, r5, r6, sl, fp, lr}
   16444:	b	4f94 <free@plt>
   16448:	.word	0x00033a78

0001644c <rb_init_rawbuffers>:
   1644c:	push	{fp, lr}
   16450:	mov	fp, sp
   16454:	mov	r1, r0
   16458:	ldr	r0, [pc, #40]	; 16488 <rb_init_rawbuffers+0x3c>
   1645c:	ldr	r0, [pc, r0]
   16460:	cmp	r0, #0
   16464:	popne	{fp, pc}
   16468:	ldr	r2, [pc, #28]	; 1648c <rb_init_rawbuffers+0x40>
   1646c:	movw	r0, #1044	; 0x414
   16470:	add	r2, pc, r2
   16474:	bl	5318 <rb_bh_create@plt>
   16478:	ldr	r1, [pc, #16]	; 16490 <rb_init_rawbuffers+0x44>
   1647c:	add	r1, pc, r1
   16480:	str	r0, [r1]
   16484:	pop	{fp, pc}
   16488:	.word	0x00033a24
   1648c:	.word	0x00004919
   16490:	.word	0x00033a04

00016494 <rb_init_patricia>:
   16494:	bx	lr

00016498 <rb_new_patricia>:
   16498:	push	{r4, sl, fp, lr}
   1649c:	add	fp, sp, #8
   164a0:	mov	r4, r0
   164a4:	mov	r0, #1
   164a8:	mov	r1, #12
   164ac:	bl	4e98 <calloc@plt>
   164b0:	cmp	r0, #0
   164b4:	strne	r4, [r0, #4]
   164b8:	ldrne	r1, [pc, #24]	; 164d8 <rb_new_patricia+0x40>
   164bc:	ldrne	r1, [pc, r1]
   164c0:	ldrne	r2, [pc, #20]	; 164dc <rb_new_patricia+0x44>
   164c4:	addne	r1, r1, #1
   164c8:	addne	r2, pc, r2
   164cc:	strne	r1, [r2]
   164d0:	popne	{r4, sl, fp, pc}
   164d4:	bl	5204 <rb_outofmemory@plt>
   164d8:	.word	0x000339c8
   164dc:	.word	0x000339bc

000164e0 <rb_clear_patricia>:
   164e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164e4:	add	fp, sp, #28
   164e8:	sub	sp, sp, #524	; 0x20c
   164ec:	ldr	r6, [r0]
   164f0:	mov	r4, r0
   164f4:	cmp	r6, #0
   164f8:	beq	165ac <rb_clear_patricia+0xcc>
   164fc:	mov	r9, r1
   16500:	mov	sl, #0
   16504:	add	r8, sp, #4
   16508:	b	16524 <rb_clear_patricia+0x44>
   1650c:	cmp	r7, #0
   16510:	mov	r6, r5
   16514:	strne	r7, [r8, sl, lsl #2]
   16518:	addne	sl, sl, #1
   1651c:	cmp	r6, #0
   16520:	beq	165a4 <rb_clear_patricia+0xc4>
   16524:	ldmib	r6, {r0, r5, r7}
   16528:	cmp	r0, #0
   1652c:	beq	16558 <rb_clear_patricia+0x78>
   16530:	ldr	r1, [r0, #4]
   16534:	subs	r1, r1, #1
   16538:	str	r1, [r0, #4]
   1653c:	bgt	16544 <rb_clear_patricia+0x64>
   16540:	bl	4f94 <free@plt>
   16544:	cmp	r9, #0
   16548:	ldrne	r0, [r6, #20]
   1654c:	cmpne	r0, #0
   16550:	beq	16558 <rb_clear_patricia+0x78>
   16554:	blx	r9
   16558:	mov	r0, r6
   1655c:	bl	4f94 <free@plt>
   16560:	ldr	r0, [r4, #8]
   16564:	cmp	r5, #0
   16568:	sub	r0, r0, #1
   1656c:	str	r0, [r4, #8]
   16570:	bne	1650c <rb_clear_patricia+0x2c>
   16574:	cmp	r7, #0
   16578:	beq	1658c <rb_clear_patricia+0xac>
   1657c:	mov	r6, r7
   16580:	cmp	r6, #0
   16584:	bne	16524 <rb_clear_patricia+0x44>
   16588:	b	165a4 <rb_clear_patricia+0xc4>
   1658c:	cmp	sl, #0
   16590:	beq	165ac <rb_clear_patricia+0xcc>
   16594:	sub	sl, sl, #1
   16598:	ldr	r6, [r8, sl, lsl #2]
   1659c:	cmp	r6, #0
   165a0:	bne	16524 <rb_clear_patricia+0x44>
   165a4:	cmp	r4, #0
   165a8:	beq	165bc <rb_clear_patricia+0xdc>
   165ac:	mov	r0, r4
   165b0:	sub	sp, fp, #28
   165b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165b8:	b	4f94 <free@plt>
   165bc:	sub	sp, fp, #28
   165c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000165c4 <rb_destroy_patricia>:
   165c4:	push	{fp, lr}
   165c8:	mov	fp, sp
   165cc:	bl	4dc0 <rb_clear_patricia@plt>
   165d0:	ldr	r0, [pc, #20]	; 165ec <rb_destroy_patricia+0x28>
   165d4:	ldr	r0, [pc, r0]
   165d8:	ldr	r1, [pc, #16]	; 165f0 <rb_destroy_patricia+0x2c>
   165dc:	sub	r0, r0, #1
   165e0:	add	r1, pc, r1
   165e4:	str	r0, [r1]
   165e8:	pop	{fp, pc}
   165ec:	.word	0x000338b0
   165f0:	.word	0x000338a4

000165f4 <rb_patricia_process>:
   165f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   165f8:	add	fp, sp, #24
   165fc:	sub	sp, sp, #520	; 0x208
   16600:	ldr	r7, [r0]
   16604:	cmp	r7, #0
   16608:	beq	16678 <rb_patricia_process+0x84>
   1660c:	mov	r4, r1
   16610:	mov	r5, #0
   16614:	add	r6, sp, #4
   16618:	b	16634 <rb_patricia_process+0x40>
   1661c:	cmp	r7, #0
   16620:	strne	r7, [r6, r5, lsl #2]
   16624:	addne	r5, r5, #1
   16628:	mov	r7, r0
   1662c:	cmp	r7, #0
   16630:	beq	16678 <rb_patricia_process+0x84>
   16634:	ldr	r0, [r7, #4]
   16638:	cmp	r0, #0
   1663c:	beq	16648 <rb_patricia_process+0x54>
   16640:	ldr	r1, [r7, #20]
   16644:	blx	r4
   16648:	ldr	r0, [r7, #8]
   1664c:	ldr	r7, [r7, #12]
   16650:	cmp	r0, #0
   16654:	bne	1661c <rb_patricia_process+0x28>
   16658:	cmp	r7, #0
   1665c:	bne	1662c <rb_patricia_process+0x38>
   16660:	cmp	r5, #0
   16664:	beq	16678 <rb_patricia_process+0x84>
   16668:	sub	r5, r5, #1
   1666c:	ldr	r7, [r6, r5, lsl #2]
   16670:	cmp	r7, #0
   16674:	bne	16634 <rb_patricia_process+0x40>
   16678:	sub	sp, fp, #24
   1667c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00016680 <rb_patricia_search_exact>:
   16680:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16684:	add	fp, sp, #24
   16688:	ldr	r4, [r0]
   1668c:	cmp	r4, #0
   16690:	beq	16700 <rb_patricia_search_exact+0x80>
   16694:	ldrh	r6, [r1, #2]
   16698:	add	r5, r1, #8
   1669c:	mov	r0, #128	; 0x80
   166a0:	ldr	r1, [r4]
   166a4:	cmp	r1, r6
   166a8:	bcs	166d0 <rb_patricia_search_exact+0x50>
   166ac:	ldrb	r2, [r5, r1, lsr #3]
   166b0:	and	r1, r1, #7
   166b4:	tst	r2, r0, lsr r1
   166b8:	mov	r1, #12
   166bc:	movweq	r1, #8
   166c0:	ldr	r4, [r4, r1]
   166c4:	cmp	r4, #0
   166c8:	bne	166a0 <rb_patricia_search_exact+0x20>
   166cc:	b	16700 <rb_patricia_search_exact+0x80>
   166d0:	bhi	16700 <rb_patricia_search_exact+0x80>
   166d4:	ldr	r0, [r4, #4]
   166d8:	cmp	r0, #0
   166dc:	beq	16700 <rb_patricia_search_exact+0x80>
   166e0:	add	r8, r0, #8
   166e4:	lsr	r7, r6, #3
   166e8:	mov	r1, r5
   166ec:	mov	r0, r8
   166f0:	mov	r2, r7
   166f4:	bl	50fc <bcmp@plt>
   166f8:	cmp	r0, #0
   166fc:	beq	1670c <rb_patricia_search_exact+0x8c>
   16700:	mov	r4, #0
   16704:	mov	r0, r4
   16708:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1670c:	ands	r0, r6, #7
   16710:	beq	16704 <rb_patricia_search_exact+0x84>
   16714:	ldrb	r1, [r8, r7]
   16718:	ldrb	r2, [r5, r7]
   1671c:	rsb	r0, r0, #8
   16720:	eor	r1, r2, r1
   16724:	mov	r2, #255	; 0xff
   16728:	tst	r1, r2, lsl r0
   1672c:	movne	r4, #0
   16730:	mov	r0, r4
   16734:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016738 <rb_patricia_search_best2>:
   16738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1673c:	add	fp, sp, #28
   16740:	sub	sp, sp, #524	; 0x20c
   16744:	ldr	r7, [r0]
   16748:	cmp	r7, #0
   1674c:	beq	16850 <rb_patricia_search_best2+0x118>
   16750:	ldrh	r6, [r1, #2]
   16754:	add	sl, r1, #8
   16758:	mov	r0, #0
   1675c:	mov	r5, #128	; 0x80
   16760:	add	ip, sp, #4
   16764:	ldr	r4, [r7]
   16768:	cmp	r4, r6
   1676c:	bcs	167a4 <rb_patricia_search_best2+0x6c>
   16770:	ldr	r3, [r7, #4]
   16774:	cmp	r3, #0
   16778:	strne	r7, [ip, r0, lsl #2]
   1677c:	addne	r0, r0, #1
   16780:	ldrb	r3, [sl, r4, lsr #3]
   16784:	and	r4, r4, #7
   16788:	tst	r3, r5, lsr r4
   1678c:	mov	r3, #12
   16790:	movweq	r3, #8
   16794:	ldr	r7, [r7, r3]
   16798:	cmp	r7, #0
   1679c:	bne	16764 <rb_patricia_search_best2+0x2c>
   167a0:	b	167bc <rb_patricia_search_best2+0x84>
   167a4:	cmp	r2, #0
   167a8:	beq	167bc <rb_patricia_search_best2+0x84>
   167ac:	ldr	r2, [r7, #4]
   167b0:	cmp	r2, #0
   167b4:	strne	r7, [ip, r0, lsl #2]
   167b8:	addne	r0, r0, #1
   167bc:	cmp	r0, #1
   167c0:	blt	16850 <rb_patricia_search_best2+0x118>
   167c4:	cmp	r1, #0
   167c8:	sub	r8, ip, #4
   167cc:	moveq	sl, r1
   167d0:	subs	r4, r0, #1
   167d4:	bge	16810 <rb_patricia_search_best2+0xd8>
   167d8:	b	16850 <rb_patricia_search_best2+0x118>
   167dc:	ldrb	r1, [r6, r7]
   167e0:	ldrb	r2, [sl, r7]
   167e4:	rsb	r0, r0, #8
   167e8:	eor	r1, r2, r1
   167ec:	mov	r2, #255	; 0xff
   167f0:	and	r0, r1, r2, lsl r0
   167f4:	clz	r0, r0
   167f8:	lsr	r1, r0, #5
   167fc:	cmp	r1, #0
   16800:	mov	r0, r4
   16804:	bne	16854 <rb_patricia_search_best2+0x11c>
   16808:	subs	r4, r0, #1
   1680c:	blt	16850 <rb_patricia_search_best2+0x118>
   16810:	ldr	r5, [r8, r0, lsl #2]
   16814:	mov	r1, sl
   16818:	ldr	r6, [r5, #4]
   1681c:	ldrh	r9, [r6, #2]
   16820:	cmp	r6, #0
   16824:	addne	r6, r6, #8
   16828:	mov	r0, r6
   1682c:	lsr	r7, r9, #3
   16830:	mov	r2, r7
   16834:	bl	50fc <bcmp@plt>
   16838:	mov	r1, #0
   1683c:	cmp	r0, #0
   16840:	bne	167fc <rb_patricia_search_best2+0xc4>
   16844:	ands	r0, r9, #7
   16848:	bne	167dc <rb_patricia_search_best2+0xa4>
   1684c:	b	16854 <rb_patricia_search_best2+0x11c>
   16850:	mov	r5, #0
   16854:	mov	r0, r5
   16858:	sub	sp, fp, #28
   1685c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016860 <rb_patricia_search_best>:
   16860:	mov	r2, #1
   16864:	b	16738 <rb_patricia_search_best2>

00016868 <rb_patricia_lookup>:
   16868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1686c:	add	fp, sp, #28
   16870:	sub	sp, sp, #12
   16874:	ldr	r3, [r0]
   16878:	mov	r9, r0
   1687c:	cmp	r3, #0
   16880:	beq	168f0 <rb_patricia_lookup+0x88>
   16884:	ldrh	r8, [r1, #2]
   16888:	add	r5, r1, #8
   1688c:	mov	r2, #128	; 0x80
   16890:	b	168a0 <rb_patricia_lookup+0x38>
   16894:	ldr	r3, [r0, #8]
   16898:	cmp	r3, #0
   1689c:	beq	168e4 <rb_patricia_lookup+0x7c>
   168a0:	ldr	r6, [r3]
   168a4:	mov	r0, r3
   168a8:	cmp	r6, r8
   168ac:	bcc	168bc <rb_patricia_lookup+0x54>
   168b0:	ldr	r3, [r0, #4]
   168b4:	cmp	r3, #0
   168b8:	bne	16940 <rb_patricia_lookup+0xd8>
   168bc:	ldr	r3, [r9, #4]
   168c0:	cmp	r6, r3
   168c4:	bcs	16894 <rb_patricia_lookup+0x2c>
   168c8:	ldrb	r3, [r5, r6, lsr #3]
   168cc:	and	r7, r6, #7
   168d0:	tst	r3, r2, lsr r7
   168d4:	beq	16894 <rb_patricia_lookup+0x2c>
   168d8:	ldr	r3, [r0, #12]
   168dc:	cmp	r3, #0
   168e0:	bne	168a0 <rb_patricia_lookup+0x38>
   168e4:	cmp	r6, r8
   168e8:	movcs	r6, r8
   168ec:	b	16944 <rb_patricia_lookup+0xdc>
   168f0:	mov	r4, r1
   168f4:	mov	r0, #1
   168f8:	mov	r1, #24
   168fc:	bl	4e98 <calloc@plt>
   16900:	cmp	r0, #0
   16904:	beq	16d8c <rb_patricia_lookup+0x524>
   16908:	ldrh	r6, [r4, #2]
   1690c:	mov	r5, r0
   16910:	cmp	r4, #0
   16914:	str	r6, [r0]
   16918:	mov	r0, #0
   1691c:	beq	16cc8 <rb_patricia_lookup+0x460>
   16920:	ldr	r1, [r4, #4]
   16924:	mov	r2, r4
   16928:	cmp	r1, #0
   1692c:	beq	16adc <rb_patricia_lookup+0x274>
   16930:	add	r0, r1, #1
   16934:	str	r0, [r2, #4]
   16938:	mov	r0, r2
   1693c:	b	16cc8 <rb_patricia_lookup+0x460>
   16940:	mov	r6, r8
   16944:	ldr	r3, [r0, #4]
   16948:	cmp	r6, #0
   1694c:	str	r5, [sp, #8]
   16950:	add	r7, r3, #8
   16954:	str	r7, [sp, #4]
   16958:	beq	169e4 <rb_patricia_lookup+0x17c>
   1695c:	ldrb	r2, [r5]
   16960:	ldrb	r7, [r7]
   16964:	mov	ip, #0
   16968:	eor	r7, r7, r2
   1696c:	mov	r2, #0
   16970:	tst	r7, #255	; 0xff
   16974:	bne	169a8 <rb_patricia_lookup+0x140>
   16978:	add	r5, r1, #9
   1697c:	add	r3, r3, #9
   16980:	mov	r2, #0
   16984:	add	sl, r2, #8
   16988:	cmp	sl, r6
   1698c:	bcs	169e8 <rb_patricia_lookup+0x180>
   16990:	ldrb	r7, [r5], #1
   16994:	ldrb	r4, [r3], #1
   16998:	add	r2, r2, #8
   1699c:	eor	r7, r4, r7
   169a0:	tst	r7, #255	; 0xff
   169a4:	beq	16984 <rb_patricia_lookup+0x11c>
   169a8:	tst	r7, #128	; 0x80
   169ac:	bne	169dc <rb_patricia_lookup+0x174>
   169b0:	uxtb	r5, r7
   169b4:	mov	ip, #1
   169b8:	tst	r5, #64	; 0x40
   169bc:	moveq	ip, #2
   169c0:	tsteq	r5, #32
   169c4:	bne	169dc <rb_patricia_lookup+0x174>
   169c8:	tst	r5, #16
   169cc:	mov	ip, #3
   169d0:	moveq	ip, #4
   169d4:	tsteq	r5, #8
   169d8:	beq	16d30 <rb_patricia_lookup+0x4c8>
   169dc:	add	sl, ip, r2
   169e0:	b	169e8 <rb_patricia_lookup+0x180>
   169e4:	mov	sl, #0
   169e8:	cmp	sl, r6
   169ec:	movhi	sl, r6
   169f0:	mov	r5, r0
   169f4:	ldr	r0, [r0, #16]
   169f8:	cmp	r0, #0
   169fc:	beq	16a0c <rb_patricia_lookup+0x1a4>
   16a00:	ldr	r2, [r0]
   16a04:	cmp	r2, sl
   16a08:	bcs	169f0 <rb_patricia_lookup+0x188>
   16a0c:	mov	r4, r1
   16a10:	cmp	sl, r8
   16a14:	bne	16a5c <rb_patricia_lookup+0x1f4>
   16a18:	ldr	r0, [r5]
   16a1c:	cmp	r0, r8
   16a20:	bne	16a5c <rb_patricia_lookup+0x1f4>
   16a24:	ldr	r0, [r5, #4]
   16a28:	cmp	r0, #0
   16a2c:	bne	16ce8 <rb_patricia_lookup+0x480>
   16a30:	mov	r0, #0
   16a34:	cmp	r4, #0
   16a38:	beq	16a54 <rb_patricia_lookup+0x1ec>
   16a3c:	ldr	r1, [r4, #4]
   16a40:	cmp	r1, #0
   16a44:	beq	16cf4 <rb_patricia_lookup+0x48c>
   16a48:	add	r0, r1, #1
   16a4c:	str	r0, [r4, #4]
   16a50:	mov	r0, r4
   16a54:	str	r0, [r5, #4]
   16a58:	b	16ce8 <rb_patricia_lookup+0x480>
   16a5c:	mov	r0, #1
   16a60:	mov	r1, #24
   16a64:	bl	4e98 <calloc@plt>
   16a68:	cmp	r0, #0
   16a6c:	beq	16d8c <rb_patricia_lookup+0x524>
   16a70:	mov	r7, r0
   16a74:	str	r8, [r0]
   16a78:	mov	r0, #0
   16a7c:	cmp	r4, #0
   16a80:	beq	16b48 <rb_patricia_lookup+0x2e0>
   16a84:	ldr	r1, [r4, #4]
   16a88:	cmp	r1, #0
   16a8c:	beq	16aa0 <rb_patricia_lookup+0x238>
   16a90:	add	r0, r1, #1
   16a94:	str	r0, [r4, #4]
   16a98:	mov	r0, r4
   16a9c:	b	16b48 <rb_patricia_lookup+0x2e0>
   16aa0:	ldrh	r4, [r4]
   16aa4:	cmp	r4, #2
   16aa8:	beq	16b18 <rb_patricia_lookup+0x2b0>
   16aac:	cmp	r4, #10
   16ab0:	bne	16b48 <rb_patricia_lookup+0x2e0>
   16ab4:	mov	r0, #1
   16ab8:	mov	r1, #24
   16abc:	bl	4e98 <calloc@plt>
   16ac0:	cmp	r0, #0
   16ac4:	beq	16d8c <rb_patricia_lookup+0x524>
   16ac8:	ldr	r1, [sp, #8]
   16acc:	vld1.8	{d16-d17}, [r1]
   16ad0:	add	r1, r0, #8
   16ad4:	vst1.8	{d16-d17}, [r1]
   16ad8:	b	16b38 <rb_patricia_lookup+0x2d0>
   16adc:	ldrh	r7, [r2], #8
   16ae0:	cmp	r7, #2
   16ae4:	beq	16c98 <rb_patricia_lookup+0x430>
   16ae8:	cmp	r7, #10
   16aec:	bne	16cc8 <rb_patricia_lookup+0x460>
   16af0:	mov	r0, #1
   16af4:	mov	r1, #24
   16af8:	mov	r4, r2
   16afc:	bl	4e98 <calloc@plt>
   16b00:	cmp	r0, #0
   16b04:	beq	16d8c <rb_patricia_lookup+0x524>
   16b08:	vld1.8	{d16-d17}, [r4]
   16b0c:	add	r1, r0, #8
   16b10:	vst1.8	{d16-d17}, [r1]
   16b14:	b	16cb8 <rb_patricia_lookup+0x450>
   16b18:	mov	r0, #1
   16b1c:	mov	r1, #24
   16b20:	bl	4e98 <calloc@plt>
   16b24:	cmp	r0, #0
   16b28:	beq	16d8c <rb_patricia_lookup+0x524>
   16b2c:	ldr	r1, [sp, #8]
   16b30:	ldr	r1, [r1]
   16b34:	str	r1, [r0, #8]
   16b38:	mov	r1, #1
   16b3c:	str	r1, [r0, #4]
   16b40:	strh	r4, [r0]
   16b44:	strh	r8, [r0, #2]
   16b48:	vmov.i32	q8, #0	; 0x00000000
   16b4c:	str	r0, [r7, #4]
   16b50:	add	r0, r7, #8
   16b54:	vst1.32	{d16-d17}, [r0]
   16b58:	ldr	r4, [r9, #8]
   16b5c:	add	r1, r4, #1
   16b60:	str	r1, [r9, #8]
   16b64:	ldr	r1, [r5]
   16b68:	cmp	r1, sl
   16b6c:	bne	16ba0 <rb_patricia_lookup+0x338>
   16b70:	str	r5, [r7, #16]
   16b74:	ldr	r0, [r9, #4]
   16b78:	cmp	sl, r0
   16b7c:	bcs	16c00 <rb_patricia_lookup+0x398>
   16b80:	ldr	r0, [sp, #8]
   16b84:	and	r1, sl, #7
   16b88:	mov	r2, #128	; 0x80
   16b8c:	ldrb	r0, [r0, sl, lsr #3]
   16b90:	tst	r0, r2, lsr r1
   16b94:	beq	16c00 <rb_patricia_lookup+0x398>
   16b98:	str	r7, [r5, #12]
   16b9c:	b	16c90 <rb_patricia_lookup+0x428>
   16ba0:	cmp	sl, r8
   16ba4:	bne	16c08 <rb_patricia_lookup+0x3a0>
   16ba8:	ldr	r1, [r9, #4]
   16bac:	cmp	r1, r8
   16bb0:	bls	16bcc <rb_patricia_lookup+0x364>
   16bb4:	ldr	r1, [sp, #4]
   16bb8:	and	r2, r8, #7
   16bbc:	mov	r3, #128	; 0x80
   16bc0:	ldrb	r1, [r1, r8, lsr #3]
   16bc4:	tst	r1, r3, lsr r2
   16bc8:	addne	r0, r7, #12
   16bcc:	str	r5, [r0]
   16bd0:	ldr	r0, [r5, #16]
   16bd4:	str	r0, [r7, #16]
   16bd8:	ldr	r0, [r5, #16]
   16bdc:	cmp	r0, #0
   16be0:	beq	16bf4 <rb_patricia_lookup+0x38c>
   16be4:	mov	r9, r0
   16be8:	ldr	r1, [r9, #12]!
   16bec:	cmp	r1, r5
   16bf0:	addne	r9, r0, #8
   16bf4:	str	r7, [r9]
   16bf8:	str	r7, [r5, #16]
   16bfc:	b	16c90 <rb_patricia_lookup+0x428>
   16c00:	str	r7, [r5, #8]
   16c04:	b	16c90 <rb_patricia_lookup+0x428>
   16c08:	mov	r0, #1
   16c0c:	mov	r1, #24
   16c10:	bl	4e98 <calloc@plt>
   16c14:	cmp	r0, #0
   16c18:	beq	16d8c <rb_patricia_lookup+0x524>
   16c1c:	str	sl, [r0]
   16c20:	ldr	r1, [r5, #16]
   16c24:	str	r1, [r0, #16]
   16c28:	add	r1, r4, #2
   16c2c:	str	r1, [r9, #8]
   16c30:	ldr	r1, [r9, #4]
   16c34:	cmp	sl, r1
   16c38:	bcs	16c60 <rb_patricia_lookup+0x3f8>
   16c3c:	ldr	r1, [sp, #8]
   16c40:	and	r2, sl, #7
   16c44:	mov	r3, #128	; 0x80
   16c48:	ldrb	r1, [r1, sl, lsr #3]
   16c4c:	tst	r1, r3, lsr r2
   16c50:	beq	16c60 <rb_patricia_lookup+0x3f8>
   16c54:	str	r5, [r0, #8]
   16c58:	str	r7, [r0, #12]
   16c5c:	b	16c68 <rb_patricia_lookup+0x400>
   16c60:	str	r7, [r0, #8]
   16c64:	str	r5, [r0, #12]
   16c68:	str	r0, [r7, #16]
   16c6c:	ldr	r1, [r5, #16]
   16c70:	cmp	r1, #0
   16c74:	beq	16c88 <rb_patricia_lookup+0x420>
   16c78:	mov	r9, r1
   16c7c:	ldr	r2, [r9, #12]!
   16c80:	cmp	r2, r5
   16c84:	addne	r9, r1, #8
   16c88:	str	r0, [r9]
   16c8c:	str	r0, [r5, #16]
   16c90:	mov	r5, r7
   16c94:	b	16ce8 <rb_patricia_lookup+0x480>
   16c98:	mov	r0, #1
   16c9c:	mov	r1, #24
   16ca0:	mov	r4, r2
   16ca4:	bl	4e98 <calloc@plt>
   16ca8:	cmp	r0, #0
   16cac:	beq	16d8c <rb_patricia_lookup+0x524>
   16cb0:	ldr	r1, [r4]
   16cb4:	str	r1, [r0, #8]
   16cb8:	mov	r1, #1
   16cbc:	str	r1, [r0, #4]
   16cc0:	strh	r7, [r0]
   16cc4:	strh	r6, [r0, #2]
   16cc8:	vmov.i32	q8, #0	; 0x00000000
   16ccc:	str	r0, [r5, #4]
   16cd0:	add	r0, r5, #8
   16cd4:	vst1.32	{d16-d17}, [r0]
   16cd8:	str	r5, [r9]
   16cdc:	ldr	r0, [r9, #8]
   16ce0:	add	r0, r0, #1
   16ce4:	str	r0, [r9, #8]
   16ce8:	mov	r0, r5
   16cec:	sub	sp, fp, #28
   16cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cf4:	ldrh	r4, [r4]
   16cf8:	cmp	r4, #2
   16cfc:	beq	16d54 <rb_patricia_lookup+0x4ec>
   16d00:	cmp	r4, #10
   16d04:	bne	16a54 <rb_patricia_lookup+0x1ec>
   16d08:	mov	r0, #1
   16d0c:	mov	r1, #24
   16d10:	bl	4e98 <calloc@plt>
   16d14:	cmp	r0, #0
   16d18:	beq	16d8c <rb_patricia_lookup+0x524>
   16d1c:	ldr	r1, [sp, #8]
   16d20:	vld1.8	{d16-d17}, [r1]
   16d24:	add	r1, r0, #8
   16d28:	vst1.8	{d16-d17}, [r1]
   16d2c:	b	16d74 <rb_patricia_lookup+0x50c>
   16d30:	tst	r5, #4
   16d34:	mov	ip, #5
   16d38:	moveq	ip, #6
   16d3c:	tsteq	r5, #2
   16d40:	bne	169dc <rb_patricia_lookup+0x174>
   16d44:	tst	r5, #1
   16d48:	mov	ip, #7
   16d4c:	movweq	ip, #8
   16d50:	b	169dc <rb_patricia_lookup+0x174>
   16d54:	mov	r0, #1
   16d58:	mov	r1, #24
   16d5c:	bl	4e98 <calloc@plt>
   16d60:	cmp	r0, #0
   16d64:	beq	16d8c <rb_patricia_lookup+0x524>
   16d68:	ldr	r1, [sp, #8]
   16d6c:	ldr	r1, [r1]
   16d70:	str	r1, [r0, #8]
   16d74:	mov	r1, #1
   16d78:	str	r1, [r0, #4]
   16d7c:	strh	r4, [r0]
   16d80:	strh	r8, [r0, #2]
   16d84:	str	r0, [r5, #4]
   16d88:	b	16ce8 <rb_patricia_lookup+0x480>
   16d8c:	bl	5204 <rb_outofmemory@plt>

00016d90 <rb_patricia_remove>:
   16d90:	push	{r4, r5, r6, r7, fp, lr}
   16d94:	add	fp, sp, #16
   16d98:	ldr	r6, [r1, #12]
   16d9c:	mov	r4, r0
   16da0:	ldr	r0, [r1, #8]
   16da4:	mov	r5, r1
   16da8:	cmp	r6, #0
   16dac:	beq	16de8 <rb_patricia_remove+0x58>
   16db0:	cmp	r0, #0
   16db4:	beq	16df4 <rb_patricia_remove+0x64>
   16db8:	ldr	r0, [r5, #4]
   16dbc:	cmp	r0, #0
   16dc0:	beq	16dd8 <rb_patricia_remove+0x48>
   16dc4:	ldr	r1, [r0, #4]
   16dc8:	subs	r1, r1, #1
   16dcc:	str	r1, [r0, #4]
   16dd0:	bgt	16dd8 <rb_patricia_remove+0x48>
   16dd4:	bl	4f94 <free@plt>
   16dd8:	mov	r0, #0
   16ddc:	str	r0, [r5, #20]
   16de0:	str	r0, [r5, #4]
   16de4:	pop	{r4, r5, r6, r7, fp, pc}
   16de8:	cmp	r0, #0
   16dec:	mov	r6, r0
   16df0:	beq	16e54 <rb_patricia_remove+0xc4>
   16df4:	ldr	r7, [r5, #16]
   16df8:	str	r7, [r6, #16]
   16dfc:	ldr	r0, [r5, #4]
   16e00:	cmp	r0, #0
   16e04:	beq	16e1c <rb_patricia_remove+0x8c>
   16e08:	ldr	r1, [r0, #4]
   16e0c:	subs	r1, r1, #1
   16e10:	str	r1, [r0, #4]
   16e14:	bgt	16e1c <rb_patricia_remove+0x8c>
   16e18:	bl	4f94 <free@plt>
   16e1c:	mov	r0, r5
   16e20:	bl	4f94 <free@plt>
   16e24:	ldr	r0, [r4, #8]
   16e28:	cmp	r7, #0
   16e2c:	sub	r0, r0, #1
   16e30:	str	r0, [r4, #8]
   16e34:	beq	16e4c <rb_patricia_remove+0xbc>
   16e38:	ldr	r0, [r7, #12]
   16e3c:	cmp	r0, r5
   16e40:	beq	16eac <rb_patricia_remove+0x11c>
   16e44:	str	r6, [r7, #8]
   16e48:	pop	{r4, r5, r6, r7, fp, pc}
   16e4c:	str	r6, [r4]
   16e50:	pop	{r4, r5, r6, r7, fp, pc}
   16e54:	ldr	r0, [r5, #4]
   16e58:	ldr	r6, [r5, #16]
   16e5c:	cmp	r0, #0
   16e60:	beq	16e78 <rb_patricia_remove+0xe8>
   16e64:	ldr	r1, [r0, #4]
   16e68:	subs	r1, r1, #1
   16e6c:	str	r1, [r0, #4]
   16e70:	bgt	16e78 <rb_patricia_remove+0xe8>
   16e74:	bl	4f94 <free@plt>
   16e78:	mov	r0, r5
   16e7c:	bl	4f94 <free@plt>
   16e80:	ldr	r0, [r4, #8]
   16e84:	cmp	r6, #0
   16e88:	sub	r0, r0, #1
   16e8c:	str	r0, [r4, #8]
   16e90:	beq	16eb4 <rb_patricia_remove+0x124>
   16e94:	ldr	r0, [r6, #12]
   16e98:	cmp	r0, r5
   16e9c:	beq	16ec0 <rb_patricia_remove+0x130>
   16ea0:	mov	r1, #0
   16ea4:	str	r1, [r6, #8]
   16ea8:	b	16ecc <rb_patricia_remove+0x13c>
   16eac:	str	r6, [r7, #12]
   16eb0:	pop	{r4, r5, r6, r7, fp, pc}
   16eb4:	mov	r0, #0
   16eb8:	str	r0, [r4]
   16ebc:	pop	{r4, r5, r6, r7, fp, pc}
   16ec0:	mov	r0, #0
   16ec4:	str	r0, [r6, #12]
   16ec8:	ldr	r0, [r6, #8]
   16ecc:	ldr	r1, [r6, #4]
   16ed0:	cmp	r1, #0
   16ed4:	popne	{r4, r5, r6, r7, fp, pc}
   16ed8:	ldr	r1, [r6, #16]
   16edc:	cmp	r1, #0
   16ee0:	beq	16ef8 <rb_patricia_remove+0x168>
   16ee4:	mov	r2, r1
   16ee8:	ldr	r3, [r2, #12]!
   16eec:	cmp	r3, r6
   16ef0:	subne	r2, r2, #4
   16ef4:	b	16efc <rb_patricia_remove+0x16c>
   16ef8:	mov	r2, r4
   16efc:	str	r0, [r2]
   16f00:	str	r1, [r0, #16]
   16f04:	mov	r0, r6
   16f08:	bl	4f94 <free@plt>
   16f0c:	ldr	r0, [r4, #8]
   16f10:	sub	r0, r0, #1
   16f14:	str	r0, [r4, #8]
   16f18:	pop	{r4, r5, r6, r7, fp, pc}

00016f1c <make_and_lookup_ip>:
   16f1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16f20:	add	fp, sp, #24
   16f24:	mov	r5, r1
   16f28:	mov	r9, r2
   16f2c:	mov	r8, r0
   16f30:	ldrh	r4, [r5], #8
   16f34:	cmp	r4, #10
   16f38:	addne	r5, r1, #4
   16f3c:	cmp	r4, #2
   16f40:	beq	16f78 <make_and_lookup_ip+0x5c>
   16f44:	mov	r7, #0
   16f48:	cmp	r4, #10
   16f4c:	bne	16fd8 <make_and_lookup_ip+0xbc>
   16f50:	mov	r0, #1
   16f54:	mov	r1, #24
   16f58:	bl	4e98 <calloc@plt>
   16f5c:	cmp	r0, #0
   16f60:	beq	16fe0 <make_and_lookup_ip+0xc4>
   16f64:	vld1.8	{d16-d17}, [r5]
   16f68:	mov	r6, r0
   16f6c:	add	r0, r0, #8
   16f70:	vst1.8	{d16-d17}, [r0]
   16f74:	b	16f98 <make_and_lookup_ip+0x7c>
   16f78:	mov	r0, #1
   16f7c:	mov	r1, #24
   16f80:	bl	4e98 <calloc@plt>
   16f84:	cmp	r0, #0
   16f88:	beq	16fe0 <make_and_lookup_ip+0xc4>
   16f8c:	mov	r6, r0
   16f90:	ldr	r0, [r5]
   16f94:	str	r0, [r6, #8]
   16f98:	cmn	r9, #1
   16f9c:	mov	r0, #1
   16fa0:	mov	r1, r6
   16fa4:	str	r0, [r6, #4]
   16fa8:	mov	r0, r8
   16fac:	movle	r9, #128	; 0x80
   16fb0:	strh	r4, [r6]
   16fb4:	strh	r9, [r6, #2]
   16fb8:	bl	5180 <rb_patricia_lookup@plt>
   16fbc:	mov	r7, r0
   16fc0:	ldr	r0, [r6, #4]
   16fc4:	subs	r0, r0, #1
   16fc8:	str	r0, [r6, #4]
   16fcc:	bgt	16fd8 <make_and_lookup_ip+0xbc>
   16fd0:	mov	r0, r6
   16fd4:	bl	4f94 <free@plt>
   16fd8:	mov	r0, r7
   16fdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16fe0:	bl	5204 <rb_outofmemory@plt>

00016fe4 <make_and_lookup>:
   16fe4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16fe8:	add	fp, sp, #24
   16fec:	sub	sp, sp, #24
   16ff0:	sub	sp, sp, #1024	; 0x400
   16ff4:	mov	r5, r1
   16ff8:	mov	r8, r0
   16ffc:	cmp	r1, #0
   17000:	beq	170c0 <make_and_lookup+0xdc>
   17004:	mov	r0, r5
   17008:	mov	r1, #47	; 0x2f
   1700c:	bl	4e68 <strchr@plt>
   17010:	cmp	r0, #0
   17014:	beq	17060 <make_and_lookup+0x7c>
   17018:	mov	r7, r0
   1701c:	add	r0, r0, #1
   17020:	mov	r1, #0
   17024:	mov	r2, #10
   17028:	mov	r9, #0
   1702c:	bl	5114 <strtol@plt>
   17030:	sub	r4, r7, r5
   17034:	mov	r7, sp
   17038:	mov	r6, r0
   1703c:	mov	r1, r5
   17040:	mov	r0, r7
   17044:	mov	r2, r4
   17048:	bl	509c <memcpy@plt>
   1704c:	sub	r0, r6, #1
   17050:	strb	r9, [r7, r4]
   17054:	cmp	r0, #31
   17058:	movwhi	r6, #32
   1705c:	b	17068 <make_and_lookup+0x84>
   17060:	mov	r6, #32
   17064:	mov	r7, r5
   17068:	sub	r2, fp, #48	; 0x30
   1706c:	mov	r0, #2
   17070:	mov	r1, r7
   17074:	bl	4ee0 <rb_inet_pton@plt>
   17078:	cmp	r0, #1
   1707c:	blt	170c0 <make_and_lookup+0xdc>
   17080:	mov	r0, #1
   17084:	mov	r1, #24
   17088:	mov	r4, #1
   1708c:	bl	4e98 <calloc@plt>
   17090:	cmp	r0, #0
   17094:	beq	171c4 <make_and_lookup+0x1e0>
   17098:	mov	r5, r0
   1709c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   170a0:	cmn	r6, #1
   170a4:	mov	r1, #2
   170a8:	movle	r6, #128	; 0x80
   170ac:	strh	r1, [r5]
   170b0:	strh	r6, [r5, #2]
   170b4:	str	r4, [r5, #4]
   170b8:	str	r0, [r5, #8]
   170bc:	b	17188 <make_and_lookup+0x1a4>
   170c0:	cmp	r5, #0
   170c4:	beq	171b4 <make_and_lookup+0x1d0>
   170c8:	mov	r0, r5
   170cc:	mov	r1, #47	; 0x2f
   170d0:	bl	4e68 <strchr@plt>
   170d4:	cmp	r0, #0
   170d8:	beq	17128 <make_and_lookup+0x144>
   170dc:	mov	r7, r0
   170e0:	add	r0, r0, #1
   170e4:	mov	r1, #0
   170e8:	mov	r2, #10
   170ec:	mov	r9, #0
   170f0:	bl	5114 <strtol@plt>
   170f4:	sub	r4, r7, r5
   170f8:	mov	r7, sp
   170fc:	mov	r6, r0
   17100:	mov	r1, r5
   17104:	mov	r0, r7
   17108:	mov	r2, r4
   1710c:	bl	509c <memcpy@plt>
   17110:	sub	r0, r6, #1
   17114:	mov	r5, r7
   17118:	strb	r9, [r7, r4]
   1711c:	cmp	r0, #127	; 0x7f
   17120:	movwhi	r6, #128	; 0x80
   17124:	b	1712c <make_and_lookup+0x148>
   17128:	mov	r6, #128	; 0x80
   1712c:	sub	r7, fp, #48	; 0x30
   17130:	mov	r0, #10
   17134:	mov	r1, r5
   17138:	mov	r2, r7
   1713c:	bl	4ee0 <rb_inet_pton@plt>
   17140:	cmp	r0, #1
   17144:	blt	171b4 <make_and_lookup+0x1d0>
   17148:	mov	r0, #1
   1714c:	mov	r1, #24
   17150:	mov	r4, #1
   17154:	bl	4e98 <calloc@plt>
   17158:	cmp	r0, #0
   1715c:	beq	171c4 <make_and_lookup+0x1e0>
   17160:	vld1.64	{d16-d17}, [r7]
   17164:	cmn	r6, #1
   17168:	mov	r5, r0
   1716c:	movle	r6, #128	; 0x80
   17170:	strh	r6, [r0, #2]
   17174:	str	r4, [r0, #4]
   17178:	mov	r0, #10
   1717c:	strh	r0, [r5]
   17180:	add	r0, r5, #8
   17184:	vst1.32	{d16-d17}, [r0]
   17188:	mov	r0, r8
   1718c:	mov	r1, r5
   17190:	bl	5180 <rb_patricia_lookup@plt>
   17194:	mov	r4, r0
   17198:	ldr	r0, [r5, #4]
   1719c:	subs	r0, r0, #1
   171a0:	str	r0, [r5, #4]
   171a4:	bgt	171b8 <make_and_lookup+0x1d4>
   171a8:	mov	r0, r5
   171ac:	bl	4f94 <free@plt>
   171b0:	b	171b8 <make_and_lookup+0x1d4>
   171b4:	mov	r4, #0
   171b8:	mov	r0, r4
   171bc:	sub	sp, fp, #24
   171c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   171c4:	bl	5204 <rb_outofmemory@plt>

000171c8 <rb_match_ip>:
   171c8:	push	{r4, r5, r6, r7, fp, lr}
   171cc:	add	fp, sp, #16
   171d0:	mov	r7, r1
   171d4:	mov	r4, r0
   171d8:	mov	r0, #1
   171dc:	ldrh	r6, [r7], #8
   171e0:	cmp	r6, #10
   171e4:	addne	r7, r1, #4
   171e8:	mov	r1, #24
   171ec:	bl	4e98 <calloc@plt>
   171f0:	mov	r5, r0
   171f4:	cmp	r6, #10
   171f8:	bne	17214 <rb_match_ip+0x4c>
   171fc:	cmp	r5, #0
   17200:	beq	17268 <rb_match_ip+0xa0>
   17204:	vld1.8	{d16-d17}, [r7]
   17208:	add	r0, r5, #8
   1720c:	vst1.8	{d16-d17}, [r0]
   17210:	b	17224 <rb_match_ip+0x5c>
   17214:	cmp	r5, #0
   17218:	beq	17268 <rb_match_ip+0xa0>
   1721c:	ldr	r0, [r7]
   17220:	str	r0, [r5, #8]
   17224:	cmp	r6, #10
   17228:	mov	r0, #1
   1722c:	mov	r1, r5
   17230:	mov	r2, #1
   17234:	str	r0, [r5, #4]
   17238:	mov	r0, #32
   1723c:	movwne	r6, #2
   17240:	movweq	r0, #128	; 0x80
   17244:	strh	r6, [r5]
   17248:	strh	r0, [r5, #2]
   1724c:	mov	r0, r4
   17250:	bl	4f58 <rb_patricia_search_best2@plt>
   17254:	mov	r4, r0
   17258:	mov	r0, r5
   1725c:	bl	4f94 <free@plt>
   17260:	mov	r0, r4
   17264:	pop	{r4, r5, r6, r7, fp, pc}
   17268:	bl	5204 <rb_outofmemory@plt>

0001726c <rb_match_ip_exact>:
   1726c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17270:	add	fp, sp, #24
   17274:	mov	r6, r1
   17278:	cmp	r2, #128	; 0x80
   1727c:	mov	r8, r0
   17280:	mov	r0, r2
   17284:	mov	r5, r2
   17288:	ldrh	r7, [r6], #8
   1728c:	movcs	r0, #128	; 0x80
   17290:	cmp	r2, #32
   17294:	movcs	r5, #32
   17298:	cmp	r7, #10
   1729c:	moveq	r5, r0
   172a0:	addne	r6, r1, #4
   172a4:	mov	r0, #1
   172a8:	mov	r1, #24
   172ac:	bl	4e98 <calloc@plt>
   172b0:	mov	r4, r0
   172b4:	cmp	r7, #10
   172b8:	bne	172d4 <rb_match_ip_exact+0x68>
   172bc:	cmp	r4, #0
   172c0:	beq	173ac <rb_match_ip_exact+0x140>
   172c4:	vld1.8	{d16-d17}, [r6]
   172c8:	add	r0, r4, #8
   172cc:	vst1.8	{d16-d17}, [r0]
   172d0:	b	172e4 <rb_match_ip_exact+0x78>
   172d4:	cmp	r4, #0
   172d8:	beq	173ac <rb_match_ip_exact+0x140>
   172dc:	ldr	r0, [r6]
   172e0:	str	r0, [r4, #8]
   172e4:	cmp	r7, #10
   172e8:	mov	r0, #1
   172ec:	movwne	r7, #2
   172f0:	str	r0, [r4, #4]
   172f4:	strh	r5, [r4, #2]
   172f8:	strh	r7, [r4]
   172fc:	ldr	r6, [r8]
   17300:	cmp	r6, #0
   17304:	beq	17370 <rb_match_ip_exact+0x104>
   17308:	add	r7, r4, #8
   1730c:	mov	r0, #128	; 0x80
   17310:	ldr	r1, [r6]
   17314:	cmp	r1, r5
   17318:	bcs	17340 <rb_match_ip_exact+0xd4>
   1731c:	ldrb	r2, [r7, r1, lsr #3]
   17320:	and	r1, r1, #7
   17324:	tst	r2, r0, lsr r1
   17328:	mov	r1, #12
   1732c:	movweq	r1, #8
   17330:	ldr	r6, [r6, r1]
   17334:	cmp	r6, #0
   17338:	bne	17310 <rb_match_ip_exact+0xa4>
   1733c:	b	17370 <rb_match_ip_exact+0x104>
   17340:	bhi	17370 <rb_match_ip_exact+0x104>
   17344:	ldr	r0, [r6, #4]
   17348:	cmp	r0, #0
   1734c:	beq	17370 <rb_match_ip_exact+0x104>
   17350:	add	r8, r0, #8
   17354:	lsr	r9, r5, #3
   17358:	mov	r1, r7
   1735c:	mov	r0, r8
   17360:	mov	r2, r9
   17364:	bl	50fc <bcmp@plt>
   17368:	cmp	r0, #0
   1736c:	beq	17384 <rb_match_ip_exact+0x118>
   17370:	mov	r6, #0
   17374:	mov	r0, r4
   17378:	bl	4f94 <free@plt>
   1737c:	mov	r0, r6
   17380:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17384:	ands	r0, r5, #7
   17388:	beq	17374 <rb_match_ip_exact+0x108>
   1738c:	ldrb	r1, [r8, r9]
   17390:	ldrb	r2, [r7, r9]
   17394:	rsb	r0, r0, #8
   17398:	eor	r1, r2, r1
   1739c:	mov	r2, #255	; 0xff
   173a0:	tst	r1, r2, lsl r0
   173a4:	movne	r6, #0
   173a8:	b	17374 <rb_match_ip_exact+0x108>
   173ac:	bl	5204 <rb_outofmemory@plt>

000173b0 <rb_match_string>:
   173b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   173b4:	add	fp, sp, #24
   173b8:	sub	sp, sp, #24
   173bc:	sub	sp, sp, #1024	; 0x400
   173c0:	mov	r5, r1
   173c4:	mov	r8, r0
   173c8:	cmp	r1, #0
   173cc:	beq	1748c <rb_match_string+0xdc>
   173d0:	mov	r0, r5
   173d4:	mov	r1, #47	; 0x2f
   173d8:	bl	4e68 <strchr@plt>
   173dc:	cmp	r0, #0
   173e0:	beq	1742c <rb_match_string+0x7c>
   173e4:	mov	r7, r0
   173e8:	add	r0, r0, #1
   173ec:	mov	r1, #0
   173f0:	mov	r2, #10
   173f4:	mov	r9, #0
   173f8:	bl	5114 <strtol@plt>
   173fc:	sub	r4, r7, r5
   17400:	mov	r7, sp
   17404:	mov	r6, r0
   17408:	mov	r1, r5
   1740c:	mov	r0, r7
   17410:	mov	r2, r4
   17414:	bl	509c <memcpy@plt>
   17418:	sub	r0, r6, #1
   1741c:	strb	r9, [r7, r4]
   17420:	cmp	r0, #31
   17424:	movwhi	r6, #32
   17428:	b	17434 <rb_match_string+0x84>
   1742c:	mov	r6, #32
   17430:	mov	r7, r5
   17434:	sub	r2, fp, #48	; 0x30
   17438:	mov	r0, #2
   1743c:	mov	r1, r7
   17440:	bl	4ee0 <rb_inet_pton@plt>
   17444:	cmp	r0, #1
   17448:	blt	1748c <rb_match_string+0xdc>
   1744c:	mov	r0, #1
   17450:	mov	r1, #24
   17454:	mov	r4, #1
   17458:	bl	4e98 <calloc@plt>
   1745c:	cmp	r0, #0
   17460:	beq	17584 <rb_match_string+0x1d4>
   17464:	mov	r5, r0
   17468:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1746c:	cmn	r6, #1
   17470:	mov	r1, #2
   17474:	movle	r6, #128	; 0x80
   17478:	strh	r1, [r5]
   1747c:	strh	r6, [r5, #2]
   17480:	str	r4, [r5, #4]
   17484:	str	r0, [r5, #8]
   17488:	b	17554 <rb_match_string+0x1a4>
   1748c:	cmp	r5, #0
   17490:	beq	17574 <rb_match_string+0x1c4>
   17494:	mov	r0, r5
   17498:	mov	r1, #47	; 0x2f
   1749c:	bl	4e68 <strchr@plt>
   174a0:	cmp	r0, #0
   174a4:	beq	174f4 <rb_match_string+0x144>
   174a8:	mov	r7, r0
   174ac:	add	r0, r0, #1
   174b0:	mov	r1, #0
   174b4:	mov	r2, #10
   174b8:	mov	r9, #0
   174bc:	bl	5114 <strtol@plt>
   174c0:	sub	r4, r7, r5
   174c4:	mov	r7, sp
   174c8:	mov	r6, r0
   174cc:	mov	r1, r5
   174d0:	mov	r0, r7
   174d4:	mov	r2, r4
   174d8:	bl	509c <memcpy@plt>
   174dc:	sub	r0, r6, #1
   174e0:	mov	r5, r7
   174e4:	strb	r9, [r7, r4]
   174e8:	cmp	r0, #127	; 0x7f
   174ec:	movwhi	r6, #128	; 0x80
   174f0:	b	174f8 <rb_match_string+0x148>
   174f4:	mov	r6, #128	; 0x80
   174f8:	sub	r7, fp, #48	; 0x30
   174fc:	mov	r0, #10
   17500:	mov	r1, r5
   17504:	mov	r2, r7
   17508:	bl	4ee0 <rb_inet_pton@plt>
   1750c:	cmp	r0, #1
   17510:	blt	17574 <rb_match_string+0x1c4>
   17514:	mov	r0, #1
   17518:	mov	r1, #24
   1751c:	mov	r4, #1
   17520:	bl	4e98 <calloc@plt>
   17524:	cmp	r0, #0
   17528:	beq	17584 <rb_match_string+0x1d4>
   1752c:	vld1.64	{d16-d17}, [r7]
   17530:	cmn	r6, #1
   17534:	mov	r5, r0
   17538:	movle	r6, #128	; 0x80
   1753c:	strh	r6, [r0, #2]
   17540:	str	r4, [r0, #4]
   17544:	mov	r0, #10
   17548:	strh	r0, [r5]
   1754c:	add	r0, r5, #8
   17550:	vst1.32	{d16-d17}, [r0]
   17554:	mov	r0, r8
   17558:	mov	r1, r5
   1755c:	mov	r2, #1
   17560:	bl	4f58 <rb_patricia_search_best2@plt>
   17564:	mov	r4, r0
   17568:	mov	r0, r5
   1756c:	bl	4f94 <free@plt>
   17570:	b	17578 <rb_match_string+0x1c8>
   17574:	mov	r4, #0
   17578:	mov	r0, r4
   1757c:	sub	sp, fp, #24
   17580:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17584:	bl	5204 <rb_outofmemory@plt>

00017588 <rb_match_exact_string>:
   17588:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1758c:	add	fp, sp, #24
   17590:	sub	sp, sp, #24
   17594:	sub	sp, sp, #1024	; 0x400
   17598:	mov	r5, r1
   1759c:	mov	r8, r0
   175a0:	cmp	r1, #0
   175a4:	beq	176a8 <rb_match_exact_string+0x120>
   175a8:	mov	r0, r5
   175ac:	mov	r1, #47	; 0x2f
   175b0:	bl	4e68 <strchr@plt>
   175b4:	cmp	r0, #0
   175b8:	beq	17604 <rb_match_exact_string+0x7c>
   175bc:	mov	r7, r0
   175c0:	add	r0, r0, #1
   175c4:	mov	r1, #0
   175c8:	mov	r2, #10
   175cc:	mov	r9, #0
   175d0:	bl	5114 <strtol@plt>
   175d4:	sub	r4, r7, r5
   175d8:	mov	r7, sp
   175dc:	mov	r6, r0
   175e0:	mov	r1, r5
   175e4:	mov	r0, r7
   175e8:	mov	r2, r4
   175ec:	bl	509c <memcpy@plt>
   175f0:	sub	r0, r6, #1
   175f4:	strb	r9, [r7, r4]
   175f8:	cmp	r0, #31
   175fc:	movwhi	r6, #32
   17600:	b	1760c <rb_match_exact_string+0x84>
   17604:	mov	r6, #32
   17608:	mov	r7, r5
   1760c:	sub	r2, fp, #48	; 0x30
   17610:	mov	r0, #2
   17614:	mov	r1, r7
   17618:	bl	4ee0 <rb_inet_pton@plt>
   1761c:	cmp	r0, #1
   17620:	blt	176a8 <rb_match_exact_string+0x120>
   17624:	mov	r0, #1
   17628:	mov	r1, #24
   1762c:	mov	r4, #1
   17630:	bl	4e98 <calloc@plt>
   17634:	cmp	r0, #0
   17638:	beq	1782c <rb_match_exact_string+0x2a4>
   1763c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17640:	mov	r5, r0
   17644:	str	r4, [r0, #4]
   17648:	mov	r0, #2
   1764c:	cmn	r6, #1
   17650:	strh	r0, [r5]
   17654:	mov	r0, #128	; 0x80
   17658:	mov	r7, r5
   1765c:	movle	r6, r0
   17660:	strh	r6, [r5, #2]
   17664:	str	r1, [r7, #8]!
   17668:	ldr	r4, [r8]
   1766c:	cmp	r4, #0
   17670:	beq	177ec <rb_match_exact_string+0x264>
   17674:	uxth	r1, r6
   17678:	ldr	r2, [r4]
   1767c:	cmp	r2, r1
   17680:	bcs	177bc <rb_match_exact_string+0x234>
   17684:	ldrb	r3, [r7, r2, lsr #3]
   17688:	and	r2, r2, #7
   1768c:	tst	r3, r0, lsr r2
   17690:	mov	r2, #12
   17694:	movweq	r2, #8
   17698:	ldr	r4, [r4, r2]
   1769c:	cmp	r4, #0
   176a0:	bne	17678 <rb_match_exact_string+0xf0>
   176a4:	b	177ec <rb_match_exact_string+0x264>
   176a8:	cmp	r5, #0
   176ac:	beq	177b4 <rb_match_exact_string+0x22c>
   176b0:	mov	r0, r5
   176b4:	mov	r1, #47	; 0x2f
   176b8:	bl	4e68 <strchr@plt>
   176bc:	cmp	r0, #0
   176c0:	beq	17710 <rb_match_exact_string+0x188>
   176c4:	mov	r7, r0
   176c8:	add	r0, r0, #1
   176cc:	mov	r1, #0
   176d0:	mov	r2, #10
   176d4:	mov	r9, #0
   176d8:	bl	5114 <strtol@plt>
   176dc:	sub	r4, r7, r5
   176e0:	mov	r7, sp
   176e4:	mov	r6, r0
   176e8:	mov	r1, r5
   176ec:	mov	r0, r7
   176f0:	mov	r2, r4
   176f4:	bl	509c <memcpy@plt>
   176f8:	sub	r0, r6, #1
   176fc:	mov	r5, r7
   17700:	strb	r9, [r7, r4]
   17704:	cmp	r0, #127	; 0x7f
   17708:	movwhi	r6, #128	; 0x80
   1770c:	b	17714 <rb_match_exact_string+0x18c>
   17710:	mov	r6, #128	; 0x80
   17714:	sub	r7, fp, #48	; 0x30
   17718:	mov	r0, #10
   1771c:	mov	r1, r5
   17720:	mov	r2, r7
   17724:	bl	4ee0 <rb_inet_pton@plt>
   17728:	cmp	r0, #1
   1772c:	blt	177b4 <rb_match_exact_string+0x22c>
   17730:	mov	r0, #1
   17734:	mov	r1, #24
   17738:	mov	r4, #1
   1773c:	bl	4e98 <calloc@plt>
   17740:	cmp	r0, #0
   17744:	beq	1782c <rb_match_exact_string+0x2a4>
   17748:	vld1.64	{d16-d17}, [r7]
   1774c:	mov	r5, r0
   17750:	mov	r0, #128	; 0x80
   17754:	cmn	r6, #1
   17758:	mov	r1, #10
   1775c:	movle	r6, r0
   17760:	add	r7, r5, #8
   17764:	strh	r6, [r5, #2]
   17768:	str	r4, [r5, #4]
   1776c:	strh	r1, [r5]
   17770:	vst1.32	{d16-d17}, [r7]
   17774:	ldr	r4, [r8]
   17778:	cmp	r4, #0
   1777c:	beq	177ec <rb_match_exact_string+0x264>
   17780:	uxth	r1, r6
   17784:	ldr	r2, [r4]
   17788:	cmp	r2, r1
   1778c:	bcs	177bc <rb_match_exact_string+0x234>
   17790:	ldrb	r3, [r7, r2, lsr #3]
   17794:	and	r2, r2, #7
   17798:	tst	r3, r0, lsr r2
   1779c:	mov	r2, #12
   177a0:	movweq	r2, #8
   177a4:	ldr	r4, [r4, r2]
   177a8:	cmp	r4, #0
   177ac:	bne	17784 <rb_match_exact_string+0x1fc>
   177b0:	b	177ec <rb_match_exact_string+0x264>
   177b4:	mov	r4, #0
   177b8:	b	177f8 <rb_match_exact_string+0x270>
   177bc:	bhi	177ec <rb_match_exact_string+0x264>
   177c0:	ldr	r0, [r4, #4]
   177c4:	cmp	r0, #0
   177c8:	beq	177ec <rb_match_exact_string+0x264>
   177cc:	add	r8, r0, #8
   177d0:	lsr	r9, r1, #3
   177d4:	mov	r1, r7
   177d8:	mov	r0, r8
   177dc:	mov	r2, r9
   177e0:	bl	50fc <bcmp@plt>
   177e4:	cmp	r0, #0
   177e8:	beq	17804 <rb_match_exact_string+0x27c>
   177ec:	mov	r4, #0
   177f0:	mov	r0, r5
   177f4:	bl	4f94 <free@plt>
   177f8:	mov	r0, r4
   177fc:	sub	sp, fp, #24
   17800:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17804:	ands	r0, r6, #7
   17808:	beq	177f0 <rb_match_exact_string+0x268>
   1780c:	ldrb	r1, [r8, r9]
   17810:	ldrb	r2, [r7, r9]
   17814:	rsb	r0, r0, #8
   17818:	eor	r1, r2, r1
   1781c:	mov	r2, #255	; 0xff
   17820:	tst	r1, r2, lsl r0
   17824:	movne	r4, #0
   17828:	b	177f0 <rb_match_exact_string+0x268>
   1782c:	bl	5204 <rb_outofmemory@plt>

00017830 <rb_dictionary_create>:
   17830:	push	{r4, r5, r6, sl, fp, lr}
   17834:	add	fp, sp, #16
   17838:	mov	r6, r1
   1783c:	mov	r5, r0
   17840:	mov	r0, #1
   17844:	mov	r1, #40	; 0x28
   17848:	bl	4e98 <calloc@plt>
   1784c:	cmp	r0, #0
   17850:	beq	178e0 <rb_dictionary_create+0xb0>
   17854:	mov	r4, r0
   17858:	str	r6, [r0]
   1785c:	mov	r0, r5
   17860:	bl	5078 <strlen@plt>
   17864:	add	r0, r0, #1
   17868:	bl	5228 <malloc@plt>
   1786c:	cmp	r0, #0
   17870:	beq	178e0 <rb_dictionary_create+0xb0>
   17874:	mov	r1, r5
   17878:	bl	512c <strcpy@plt>
   1787c:	str	r0, [r4, #20]
   17880:	mov	r1, #0
   17884:	ldr	r2, [pc, #88]	; 178e4 <rb_dictionary_create+0xb4>
   17888:	ldr	r2, [pc, r2]
   1788c:	str	r4, [r4, #28]
   17890:	str	r1, [r4, #32]
   17894:	add	r1, r4, #28
   17898:	str	r2, [r4, #36]	; 0x24
   1789c:	cmp	r2, #0
   178a0:	ldr	r0, [pc, #64]	; 178e8 <rb_dictionary_create+0xb8>
   178a4:	add	r0, pc, r0
   178a8:	beq	178b8 <rb_dictionary_create+0x88>
   178ac:	add	r2, r2, #4
   178b0:	str	r1, [r2]
   178b4:	b	178c8 <rb_dictionary_create+0x98>
   178b8:	mov	r2, r0
   178bc:	ldr	r3, [r2, #4]!
   178c0:	cmp	r3, #0
   178c4:	streq	r1, [r2]
   178c8:	str	r1, [r0]
   178cc:	ldr	r1, [r0, #8]
   178d0:	add	r1, r1, #1
   178d4:	str	r1, [r0, #8]
   178d8:	mov	r0, r4
   178dc:	pop	{r4, r5, r6, sl, fp, pc}
   178e0:	bl	5204 <rb_outofmemory@plt>
   178e4:	.word	0x00032600
   178e8:	.word	0x000325e4

000178ec <rb_dictionary_set_comparator_func>:
   178ec:	str	r1, [r0]
   178f0:	bx	lr

000178f4 <rb_dictionary_get_comparator_func>:
   178f4:	ldr	r0, [r0]
   178f8:	bx	lr

000178fc <rb_dictionary_get_linear_index>:
   178fc:	push	{r4, r5, r6, sl, fp, lr}
   17900:	add	fp, sp, #16
   17904:	mov	r6, r1
   17908:	mov	r4, r0
   1790c:	bl	17ba4 <rb_dictionary_retune>
   17910:	ldr	r0, [r4, #4]
   17914:	mvn	r5, #0
   17918:	cmp	r0, #0
   1791c:	beq	17984 <rb_dictionary_get_linear_index+0x88>
   17920:	ldr	r1, [r0, #20]
   17924:	ldr	r2, [r4]
   17928:	mov	r0, r6
   1792c:	blx	r2
   17930:	cmp	r0, #0
   17934:	bne	17984 <rb_dictionary_get_linear_index+0x88>
   17938:	ldr	r0, [r4, #4]
   1793c:	cmp	r0, #0
   17940:	beq	17984 <rb_dictionary_get_linear_index+0x88>
   17944:	ldrb	r2, [r4, #24]
   17948:	tst	r2, #1
   1794c:	beq	17980 <rb_dictionary_get_linear_index+0x84>
   17950:	ldr	r1, [r4, #8]
   17954:	cmp	r1, #0
   17958:	beq	17978 <rb_dictionary_get_linear_index+0x7c>
   1795c:	mov	r2, #0
   17960:	str	r2, [r1, #24]
   17964:	add	r2, r2, #1
   17968:	ldr	r1, [r1, #12]
   1796c:	cmp	r1, #0
   17970:	bne	17960 <rb_dictionary_get_linear_index+0x64>
   17974:	ldrb	r2, [r4, #24]
   17978:	and	r1, r2, #254	; 0xfe
   1797c:	strb	r1, [r4, #24]
   17980:	ldr	r5, [r0, #24]
   17984:	mov	r0, r5
   17988:	pop	{r4, r5, r6, sl, fp, pc}

0001798c <rb_dictionary_find>:
   1798c:	push	{r4, r5, r6, sl, fp, lr}
   17990:	add	fp, sp, #16
   17994:	mov	r6, r1
   17998:	mov	r4, r0
   1799c:	bl	17ba4 <rb_dictionary_retune>
   179a0:	ldr	r0, [r4, #4]
   179a4:	mov	r5, #0
   179a8:	cmp	r0, #0
   179ac:	beq	179c8 <rb_dictionary_find+0x3c>
   179b0:	ldr	r1, [r0, #20]
   179b4:	ldr	r2, [r4]
   179b8:	mov	r0, r6
   179bc:	blx	r2
   179c0:	cmp	r0, #0
   179c4:	ldreq	r5, [r4, #4]
   179c8:	mov	r0, r5
   179cc:	pop	{r4, r5, r6, sl, fp, pc}

000179d0 <rb_dictionary_destroy>:
   179d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   179d4:	add	fp, sp, #24
   179d8:	ldr	r7, [r0, #8]
   179dc:	mov	r8, r0
   179e0:	cmp	r7, #0
   179e4:	beq	17a24 <rb_dictionary_destroy+0x54>
   179e8:	mov	r5, r2
   179ec:	mov	r6, r1
   179f0:	b	17a08 <rb_dictionary_destroy+0x38>
   179f4:	mov	r0, r7
   179f8:	bl	4f94 <free@plt>
   179fc:	cmp	r4, #0
   17a00:	mov	r7, r4
   17a04:	beq	17a24 <rb_dictionary_destroy+0x54>
   17a08:	ldr	r4, [r7, #12]
   17a0c:	cmp	r6, #0
   17a10:	beq	179f4 <rb_dictionary_destroy+0x24>
   17a14:	mov	r0, r7
   17a18:	mov	r1, r5
   17a1c:	blx	r6
   17a20:	b	179f4 <rb_dictionary_destroy+0x24>
   17a24:	ldr	r1, [r8, #36]	; 0x24
   17a28:	ldr	r2, [r8, #32]
   17a2c:	ldr	r0, [pc, #92]	; 17a90 <rb_dictionary_destroy+0xc0>
   17a30:	cmp	r1, #0
   17a34:	add	r0, pc, r0
   17a38:	beq	17a48 <rb_dictionary_destroy+0x78>
   17a3c:	str	r2, [r1, #4]
   17a40:	ldr	r2, [r8, #32]
   17a44:	b	17a4c <rb_dictionary_destroy+0x7c>
   17a48:	str	r2, [r0, #4]
   17a4c:	cmp	r2, #0
   17a50:	mov	r3, r0
   17a54:	addne	r3, r2, #8
   17a58:	str	r1, [r3]
   17a5c:	mov	r1, #0
   17a60:	str	r1, [r8, #32]
   17a64:	str	r1, [r8, #36]	; 0x24
   17a68:	ldr	r1, [r0, #8]
   17a6c:	sub	r1, r1, #1
   17a70:	str	r1, [r0, #8]
   17a74:	ldr	r0, [r8, #20]
   17a78:	cmp	r0, #0
   17a7c:	beq	17a84 <rb_dictionary_destroy+0xb4>
   17a80:	bl	4f94 <free@plt>
   17a84:	mov	r0, r8
   17a88:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17a8c:	b	4f94 <free@plt>
   17a90:	.word	0x00032454

00017a94 <rb_dictionary_foreach>:
   17a94:	push	{r4, r5, r6, sl, fp, lr}
   17a98:	add	fp, sp, #16
   17a9c:	ldr	r0, [r0, #8]
   17aa0:	cmp	r0, #0
   17aa4:	beq	17ad8 <rb_dictionary_foreach+0x44>
   17aa8:	mov	r4, r2
   17aac:	mov	r5, r1
   17ab0:	b	17ac0 <rb_dictionary_foreach+0x2c>
   17ab4:	cmp	r6, #0
   17ab8:	mov	r0, r6
   17abc:	beq	17ad8 <rb_dictionary_foreach+0x44>
   17ac0:	ldr	r6, [r0, #12]
   17ac4:	cmp	r5, #0
   17ac8:	beq	17ab4 <rb_dictionary_foreach+0x20>
   17acc:	mov	r1, r4
   17ad0:	blx	r5
   17ad4:	b	17ab4 <rb_dictionary_foreach+0x20>
   17ad8:	pop	{r4, r5, r6, sl, fp, pc}

00017adc <rb_dictionary_search>:
   17adc:	push	{r4, r5, r6, sl, fp, lr}
   17ae0:	add	fp, sp, #16
   17ae4:	ldr	r0, [r0, #8]
   17ae8:	cmp	r0, #0
   17aec:	beq	17b28 <rb_dictionary_search+0x4c>
   17af0:	mov	r4, r2
   17af4:	mov	r5, r1
   17af8:	b	17b08 <rb_dictionary_search+0x2c>
   17afc:	cmp	r6, #0
   17b00:	mov	r0, r6
   17b04:	beq	17b28 <rb_dictionary_search+0x4c>
   17b08:	ldr	r6, [r0, #12]
   17b0c:	cmp	r5, #0
   17b10:	beq	17afc <rb_dictionary_search+0x20>
   17b14:	mov	r1, r4
   17b18:	blx	r5
   17b1c:	cmp	r0, #0
   17b20:	beq	17afc <rb_dictionary_search+0x20>
   17b24:	pop	{r4, r5, r6, sl, fp, pc}
   17b28:	mov	r0, #0
   17b2c:	pop	{r4, r5, r6, sl, fp, pc}

00017b30 <rb_dictionary_foreach_start>:
   17b30:	mov	r2, #0
   17b34:	str	r2, [r1, #4]
   17b38:	ldr	r0, [r0, #8]
   17b3c:	cmp	r0, #0
   17b40:	str	r0, [r1]
   17b44:	strne	r0, [r1]
   17b48:	ldrne	r0, [r0, #12]
   17b4c:	strne	r0, [r1, #4]
   17b50:	bx	lr

00017b54 <rb_dictionary_foreach_next>:
   17b54:	mov	r2, r0
   17b58:	ldr	r0, [r1]
   17b5c:	cmp	r0, #0
   17b60:	beq	17b7c <rb_dictionary_foreach_next+0x28>
   17b64:	ldr	r0, [r1, #4]
   17b68:	str	r0, [r1]
   17b6c:	cmp	r0, #0
   17b70:	ldrne	r0, [r0, #12]
   17b74:	strne	r0, [r1, #4]
   17b78:	bx	lr
   17b7c:	ldr	r0, [pc, #8]	; 17b8c <rb_dictionary_foreach_next+0x38>
   17b80:	mov	r1, r2
   17b84:	add	r0, pc, r0
   17b88:	b	51a4 <rb_lib_log@plt>
   17b8c:	.word	0x00003217

00017b90 <rb_dictionary_foreach_cur>:
   17b90:	ldr	r0, [r1]
   17b94:	cmp	r0, #0
   17b98:	ldrne	r0, [r0, #16]
   17b9c:	moveq	r0, #0
   17ba0:	bx	lr

00017ba4 <rb_dictionary_retune>:
   17ba4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17ba8:	add	fp, sp, #24
   17bac:	sub	sp, sp, #32
   17bb0:	ldr	r6, [r0, #4]
   17bb4:	cmp	r6, #0
   17bb8:	beq	17d04 <rb_dictionary_retune+0x160>
   17bbc:	mov	r4, r0
   17bc0:	mov	r0, #0
   17bc4:	mov	r5, r1
   17bc8:	str	r0, [sp, #4]
   17bcc:	str	r0, [sp, #8]
   17bd0:	mov	r0, r5
   17bd4:	ldr	r1, [r6, #20]
   17bd8:	ldr	r2, [r4]
   17bdc:	blx	r2
   17be0:	cmp	r0, #0
   17be4:	beq	17cc8 <rb_dictionary_retune+0x124>
   17be8:	add	r8, sp, #4
   17bec:	mov	r7, r8
   17bf0:	cmn	r0, #1
   17bf4:	bgt	17c30 <rb_dictionary_retune+0x8c>
   17bf8:	b	17c74 <rb_dictionary_retune+0xd0>
   17bfc:	mov	r1, r6
   17c00:	str	r1, [r7, #4]
   17c04:	add	r0, r1, #4
   17c08:	mov	r7, r1
   17c0c:	ldr	r6, [r0]
   17c10:	ldr	r2, [r4]
   17c14:	mov	r0, r5
   17c18:	ldr	r1, [r6, #20]
   17c1c:	blx	r2
   17c20:	cmp	r0, #0
   17c24:	beq	17ce0 <rb_dictionary_retune+0x13c>
   17c28:	cmn	r0, #1
   17c2c:	ble	17c74 <rb_dictionary_retune+0xd0>
   17c30:	ldr	r0, [r6, #4]
   17c34:	cmp	r0, #0
   17c38:	beq	17ce0 <rb_dictionary_retune+0x13c>
   17c3c:	ldr	r1, [r0, #20]
   17c40:	ldr	r2, [r4]
   17c44:	mov	r0, r5
   17c48:	blx	r2
   17c4c:	cmp	r0, #1
   17c50:	blt	17bfc <rb_dictionary_retune+0x58>
   17c54:	ldr	r1, [r6, #4]
   17c58:	ldr	r0, [r1]
   17c5c:	str	r0, [r6, #4]
   17c60:	str	r6, [r1]
   17c64:	ldr	r0, [r1, #4]
   17c68:	cmp	r0, #0
   17c6c:	bne	17c00 <rb_dictionary_retune+0x5c>
   17c70:	b	17cd4 <rb_dictionary_retune+0x130>
   17c74:	ldr	r0, [r6]
   17c78:	cmp	r0, #0
   17c7c:	beq	17ce0 <rb_dictionary_retune+0x13c>
   17c80:	ldr	r1, [r0, #20]
   17c84:	ldr	r2, [r4]
   17c88:	mov	r0, r5
   17c8c:	blx	r2
   17c90:	cmn	r0, #1
   17c94:	ble	17ca0 <rb_dictionary_retune+0xfc>
   17c98:	mov	r0, r6
   17c9c:	b	17cbc <rb_dictionary_retune+0x118>
   17ca0:	ldr	r0, [r6]
   17ca4:	ldr	r1, [r0, #4]
   17ca8:	str	r1, [r6]
   17cac:	str	r6, [r0, #4]
   17cb0:	ldr	r1, [r0]
   17cb4:	cmp	r1, #0
   17cb8:	beq	17cdc <rb_dictionary_retune+0x138>
   17cbc:	str	r0, [r8]
   17cc0:	mov	r8, r0
   17cc4:	b	17c0c <rb_dictionary_retune+0x68>
   17cc8:	add	r7, sp, #4
   17ccc:	mov	r8, r7
   17cd0:	b	17ce0 <rb_dictionary_retune+0x13c>
   17cd4:	mov	r6, r1
   17cd8:	b	17ce0 <rb_dictionary_retune+0x13c>
   17cdc:	mov	r6, r0
   17ce0:	ldr	r0, [r6]
   17ce4:	str	r0, [r7, #4]
   17ce8:	ldr	r0, [r6, #4]
   17cec:	str	r0, [r8]
   17cf0:	ldr	r0, [sp, #8]
   17cf4:	str	r0, [r6]
   17cf8:	ldr	r0, [sp, #4]
   17cfc:	str	r0, [r6, #4]
   17d00:	str	r6, [r4, #4]
   17d04:	sub	sp, fp, #24
   17d08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00017d0c <rb_dictionary_add>:
   17d0c:	push	{r4, r5, r6, r7, fp, lr}
   17d10:	add	fp, sp, #16
   17d14:	mov	r6, r1
   17d18:	mov	r5, r0
   17d1c:	mov	r0, #1
   17d20:	mov	r1, #28
   17d24:	mov	r7, r2
   17d28:	bl	4e98 <calloc@plt>
   17d2c:	cmp	r0, #0
   17d30:	beq	17e60 <rb_dictionary_add+0x154>
   17d34:	str	r7, [r0, #16]
   17d38:	str	r6, [r0, #20]
   17d3c:	mov	r4, r0
   17d40:	ldrb	r0, [r5, #24]
   17d44:	orr	r0, r0, #1
   17d48:	strb	r0, [r5, #24]
   17d4c:	ldr	r1, [r5, #16]
   17d50:	ldr	r0, [r5, #4]
   17d54:	add	r1, r1, #1
   17d58:	cmp	r0, #0
   17d5c:	str	r1, [r5, #16]
   17d60:	beq	17dcc <rb_dictionary_add+0xc0>
   17d64:	mov	r0, r5
   17d68:	mov	r1, r6
   17d6c:	bl	17ba4 <rb_dictionary_retune>
   17d70:	ldr	r1, [r5, #4]
   17d74:	ldr	r0, [r4, #20]
   17d78:	ldr	r2, [r5]
   17d7c:	ldr	r1, [r1, #20]
   17d80:	blx	r2
   17d84:	cmn	r0, #1
   17d88:	ble	17de8 <rb_dictionary_add+0xdc>
   17d8c:	cmp	r0, #0
   17d90:	beq	17e2c <rb_dictionary_add+0x120>
   17d94:	ldr	r0, [r5, #4]
   17d98:	ldr	r1, [r0, #4]
   17d9c:	stm	r4, {r0, r1}
   17da0:	mov	r1, #0
   17da4:	str	r1, [r0, #4]
   17da8:	ldr	r1, [r0, #12]
   17dac:	cmp	r1, #0
   17db0:	add	r2, r1, #8
   17db4:	addeq	r2, r5, #12
   17db8:	str	r4, [r2]
   17dbc:	str	r0, [r4, #8]
   17dc0:	str	r1, [r4, #12]
   17dc4:	str	r4, [r0, #12]
   17dc8:	b	17e20 <rb_dictionary_add+0x114>
   17dcc:	vmov.i32	q8, #0	; 0x00000000
   17dd0:	mov	r0, r4
   17dd4:	vst1.32	{d16-d17}, [r4]
   17dd8:	str	r4, [r5, #4]
   17ddc:	str	r4, [r5, #8]
   17de0:	str	r4, [r5, #12]
   17de4:	pop	{r4, r5, r6, r7, fp, pc}
   17de8:	ldr	r0, [r5, #4]
   17dec:	ldr	r1, [r0]
   17df0:	str	r0, [r4, #4]
   17df4:	str	r1, [r4]
   17df8:	mov	r1, #0
   17dfc:	str	r1, [r0]
   17e00:	ldr	r1, [r0, #8]
   17e04:	cmp	r1, #0
   17e08:	add	r2, r1, #12
   17e0c:	addeq	r2, r5, #8
   17e10:	str	r4, [r2]
   17e14:	str	r0, [r4, #12]
   17e18:	str	r1, [r4, #8]
   17e1c:	str	r4, [r0, #8]
   17e20:	mov	r0, r4
   17e24:	str	r4, [r5, #4]
   17e28:	pop	{r4, r5, r6, r7, fp, pc}
   17e2c:	ldr	r0, [r5, #4]
   17e30:	ldr	r1, [r4, #20]
   17e34:	str	r1, [r0, #20]
   17e38:	ldr	r1, [r4, #16]
   17e3c:	str	r1, [r0, #16]
   17e40:	ldr	r0, [r5, #16]
   17e44:	sub	r0, r0, #1
   17e48:	str	r0, [r5, #16]
   17e4c:	mov	r0, r4
   17e50:	bl	4f94 <free@plt>
   17e54:	ldr	r4, [r5, #4]
   17e58:	mov	r0, r4
   17e5c:	pop	{r4, r5, r6, r7, fp, pc}
   17e60:	bl	5204 <rb_outofmemory@plt>

00017e64 <rb_dictionary_delete>:
   17e64:	push	{r4, r5, r6, sl, fp, lr}
   17e68:	add	fp, sp, #16
   17e6c:	mov	r6, r1
   17e70:	mov	r5, r0
   17e74:	bl	17ba4 <rb_dictionary_retune>
   17e78:	ldr	r0, [r5, #4]
   17e7c:	mov	r4, #0
   17e80:	cmp	r0, #0
   17e84:	beq	17f78 <rb_dictionary_delete+0x114>
   17e88:	ldr	r1, [r0, #20]
   17e8c:	ldr	r2, [r5]
   17e90:	mov	r0, r6
   17e94:	blx	r2
   17e98:	cmp	r0, #0
   17e9c:	bne	17f78 <rb_dictionary_delete+0x114>
   17ea0:	ldr	r0, [r5, #4]
   17ea4:	cmp	r0, #0
   17ea8:	beq	17f78 <rb_dictionary_delete+0x114>
   17eac:	ldrb	r1, [r5, #24]
   17eb0:	ldr	r4, [r0, #16]
   17eb4:	orr	r1, r1, #1
   17eb8:	strb	r1, [r5, #24]
   17ebc:	ldr	r3, [r0]
   17ec0:	ldr	r1, [r0, #4]
   17ec4:	cmp	r3, #0
   17ec8:	beq	17f14 <rb_dictionary_delete+0xb0>
   17ecc:	cmp	r1, #0
   17ed0:	beq	17f1c <rb_dictionary_delete+0xb8>
   17ed4:	ldr	r2, [r0, #12]
   17ed8:	cmp	r2, r1
   17edc:	beq	17f24 <rb_dictionary_delete+0xc0>
   17ee0:	mov	r3, r1
   17ee4:	mov	r6, r3
   17ee8:	ldr	r3, [r3]
   17eec:	cmp	r3, #0
   17ef0:	cmpne	r3, r2
   17ef4:	bne	17ee4 <rb_dictionary_delete+0x80>
   17ef8:	ldr	r3, [r2, #4]
   17efc:	str	r3, [r6]
   17f00:	str	r2, [r5, #4]
   17f04:	ldr	r3, [r0]
   17f08:	str	r3, [r2]
   17f0c:	str	r1, [r2, #4]
   17f10:	b	17f2c <rb_dictionary_delete+0xc8>
   17f14:	str	r1, [r5, #4]
   17f18:	b	17f2c <rb_dictionary_delete+0xc8>
   17f1c:	str	r3, [r5, #4]
   17f20:	b	17f2c <rb_dictionary_delete+0xc8>
   17f24:	str	r1, [r5, #4]
   17f28:	str	r3, [r1]
   17f2c:	ldr	r1, [r0, #8]
   17f30:	cmp	r1, #0
   17f34:	ldrne	r2, [r0, #12]
   17f38:	strne	r2, [r1, #12]
   17f3c:	ldr	r2, [r5, #8]
   17f40:	cmp	r2, r0
   17f44:	ldr	r2, [r0, #12]
   17f48:	streq	r2, [r5, #8]
   17f4c:	cmp	r2, #0
   17f50:	strne	r1, [r2, #8]
   17f54:	ldr	r1, [r5, #12]
   17f58:	cmp	r1, r0
   17f5c:	bne	17f68 <rb_dictionary_delete+0x104>
   17f60:	ldr	r1, [r0, #8]
   17f64:	str	r1, [r5, #12]
   17f68:	ldr	r1, [r5, #16]
   17f6c:	sub	r1, r1, #1
   17f70:	str	r1, [r5, #16]
   17f74:	bl	4f94 <free@plt>
   17f78:	mov	r0, r4
   17f7c:	pop	{r4, r5, r6, sl, fp, pc}

00017f80 <rb_dictionary_retrieve>:
   17f80:	push	{r4, r5, r6, sl, fp, lr}
   17f84:	add	fp, sp, #16
   17f88:	mov	r6, r1
   17f8c:	mov	r5, r0
   17f90:	bl	17ba4 <rb_dictionary_retune>
   17f94:	ldr	r0, [r5, #4]
   17f98:	mov	r4, #0
   17f9c:	cmp	r0, #0
   17fa0:	beq	17fbc <rb_dictionary_retrieve+0x3c>
   17fa4:	ldr	r1, [r0, #20]
   17fa8:	ldr	r2, [r5]
   17fac:	mov	r0, r6
   17fb0:	blx	r2
   17fb4:	cmp	r0, #0
   17fb8:	beq	17fc4 <rb_dictionary_retrieve+0x44>
   17fbc:	mov	r0, r4
   17fc0:	pop	{r4, r5, r6, sl, fp, pc}
   17fc4:	ldr	r0, [r5, #4]
   17fc8:	cmp	r0, #0
   17fcc:	ldrne	r4, [r0, #16]
   17fd0:	mov	r0, r4
   17fd4:	pop	{r4, r5, r6, sl, fp, pc}

00017fd8 <rb_dictionary_size>:
   17fd8:	ldr	r0, [r0, #16]
   17fdc:	bx	lr

00017fe0 <rb_dictionary_stats>:
   17fe0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17fe4:	add	fp, sp, #24
   17fe8:	sub	sp, sp, #280	; 0x118
   17fec:	mov	r6, r0
   17ff0:	ldr	r0, [r0, #16]
   17ff4:	mov	r5, r2
   17ff8:	mov	r7, r1
   17ffc:	cmp	r0, #0
   18000:	beq	18058 <rb_dictionary_stats+0x78>
   18004:	mov	r0, #0
   18008:	add	r2, sp, #20
   1800c:	mov	r1, #0
   18010:	str	r0, [sp, #20]
   18014:	ldr	r0, [r6, #4]
   18018:	bl	180bc <stats_recurse>
   1801c:	ldr	r1, [r6, #16]
   18020:	ldr	r3, [r6, #20]
   18024:	ldr	r2, [sp, #20]
   18028:	ldr	r6, [pc, #120]	; 180a8 <rb_dictionary_stats+0xc8>
   1802c:	str	r0, [sp, #8]
   18030:	udiv	r4, r0, r1
   18034:	add	r6, pc, r6
   18038:	str	r1, [sp, #4]
   1803c:	str	r2, [sp, #16]
   18040:	add	r0, sp, #24
   18044:	str	r6, [sp]
   18048:	str	r4, [sp, #12]
   1804c:	ldr	r2, [pc, #88]	; 180ac <rb_dictionary_stats+0xcc>
   18050:	add	r2, pc, r2
   18054:	b	1808c <rb_dictionary_stats+0xac>
   18058:	ldr	r3, [r6, #20]
   1805c:	ldr	r0, [pc, #76]	; 180b0 <rb_dictionary_stats+0xd0>
   18060:	ldr	r1, [pc, #76]	; 180b4 <rb_dictionary_stats+0xd4>
   18064:	add	r0, pc, r0
   18068:	add	r1, pc, r1
   1806c:	str	r1, [sp]
   18070:	str	r0, [sp, #4]
   18074:	str	r0, [sp, #8]
   18078:	str	r0, [sp, #12]
   1807c:	str	r0, [sp, #16]
   18080:	add	r0, sp, #24
   18084:	ldr	r2, [pc, #44]	; 180b8 <rb_dictionary_stats+0xd8>
   18088:	add	r2, pc, r2
   1808c:	mov	r1, #256	; 0x100
   18090:	bl	5408 <snprintf@plt>
   18094:	add	r0, sp, #24
   18098:	mov	r1, r5
   1809c:	blx	r7
   180a0:	sub	sp, fp, #24
   180a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   180a8:	.word	0x00002ddc
   180ac:	.word	0x00002d9c
   180b0:	.word	0x00001f83
   180b4:	.word	0x00002da8
   180b8:	.word	0x00002d8d

000180bc <stats_recurse>:
   180bc:	push	{r4, r5, r6, r7, fp, lr}
   180c0:	add	fp, sp, #16
   180c4:	mov	r6, r0
   180c8:	ldr	r0, [r2]
   180cc:	mov	r5, r2
   180d0:	mov	r4, r1
   180d4:	cmp	r0, r1
   180d8:	strlt	r4, [r5]
   180dc:	cmp	r6, #0
   180e0:	beq	18128 <stats_recurse+0x6c>
   180e4:	ldr	r0, [r6]
   180e8:	mov	r7, r4
   180ec:	cmp	r0, #0
   180f0:	beq	18104 <stats_recurse+0x48>
   180f4:	add	r1, r4, #1
   180f8:	mov	r2, r5
   180fc:	bl	180bc <stats_recurse>
   18100:	add	r7, r0, r4
   18104:	ldr	r0, [r6, #4]
   18108:	cmp	r0, #0
   1810c:	beq	18124 <stats_recurse+0x68>
   18110:	add	r1, r4, #1
   18114:	mov	r2, r5
   18118:	bl	180bc <stats_recurse>
   1811c:	add	r0, r0, r7
   18120:	pop	{r4, r5, r6, r7, fp, pc}
   18124:	mov	r4, r7
   18128:	mov	r0, r4
   1812c:	pop	{r4, r5, r6, r7, fp, pc}

00018130 <rb_dictionary_stats_walk>:
   18130:	push	{r4, r5, r6, sl, fp, lr}
   18134:	add	fp, sp, #16
   18138:	ldr	r6, [pc, #48]	; 18170 <rb_dictionary_stats_walk+0x40>
   1813c:	ldr	r6, [pc, r6]
   18140:	cmp	r6, #0
   18144:	beq	1816c <rb_dictionary_stats_walk+0x3c>
   18148:	mov	r4, r1
   1814c:	mov	r5, r0
   18150:	ldr	r0, [r6]
   18154:	mov	r1, r5
   18158:	mov	r2, r4
   1815c:	bl	521c <rb_dictionary_stats@plt>
   18160:	ldr	r6, [r6, #8]
   18164:	cmp	r6, #0
   18168:	bne	18150 <rb_dictionary_stats_walk+0x20>
   1816c:	pop	{r4, r5, r6, sl, fp, pc}
   18170:	.word	0x00031d4c

00018174 <rb_radixtree_create>:
   18174:	push	{r4, r5, r6, sl, fp, lr}
   18178:	add	fp, sp, #16
   1817c:	mov	r6, r1
   18180:	mov	r5, r0
   18184:	mov	r0, #1
   18188:	mov	r1, #28
   1818c:	bl	4e98 <calloc@plt>
   18190:	cmp	r0, #0
   18194:	beq	18224 <rb_radixtree_create+0xb0>
   18198:	mov	r4, r0
   1819c:	str	r6, [r0]
   181a0:	mov	r0, r5
   181a4:	bl	5078 <strlen@plt>
   181a8:	add	r0, r0, #1
   181ac:	bl	5228 <malloc@plt>
   181b0:	cmp	r0, #0
   181b4:	beq	18224 <rb_radixtree_create+0xb0>
   181b8:	mov	r1, r5
   181bc:	bl	512c <strcpy@plt>
   181c0:	mov	r3, #0
   181c4:	str	r3, [r4, #4]
   181c8:	ldr	r1, [pc, #88]	; 18228 <rb_radixtree_create+0xb4>
   181cc:	ldr	r1, [pc, r1]
   181d0:	str	r0, [r4, #12]
   181d4:	add	r0, r4, #16
   181d8:	str	r4, [r4, #16]
   181dc:	str	r3, [r4, #20]
   181e0:	ldr	r2, [r1]
   181e4:	cmp	r2, #0
   181e8:	str	r2, [r4, #24]
   181ec:	beq	181fc <rb_radixtree_create+0x88>
   181f0:	add	r2, r2, #4
   181f4:	str	r0, [r2]
   181f8:	b	1820c <rb_radixtree_create+0x98>
   181fc:	mov	r2, r1
   18200:	ldr	r3, [r2, #4]!
   18204:	cmp	r3, #0
   18208:	streq	r0, [r2]
   1820c:	str	r0, [r1]
   18210:	ldr	r0, [r1, #8]
   18214:	add	r0, r0, #1
   18218:	str	r0, [r1, #8]
   1821c:	mov	r0, r4
   18220:	pop	{r4, r5, r6, sl, fp, pc}
   18224:	bl	5204 <rb_outofmemory@plt>
   18228:	.word	0x000141ec

0001822c <rb_radixtree_destroy>:
   1822c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18230:	add	fp, sp, #24
   18234:	mov	r4, r0
   18238:	cmp	r0, #0
   1823c:	beq	18450 <rb_radixtree_destroy+0x224>
   18240:	ldr	r0, [r4, #4]
   18244:	cmp	r0, #0
   18248:	beq	18450 <rb_radixtree_destroy+0x224>
   1824c:	mov	r8, r2
   18250:	mov	r9, r1
   18254:	bl	18918 <first_leaf>
   18258:	mov	r6, r0
   1825c:	cmp	r0, #0
   18260:	beq	1830c <rb_radixtree_destroy+0xe0>
   18264:	ldr	r0, [r6, #12]
   18268:	cmp	r0, #0
   1826c:	beq	182fc <rb_radixtree_destroy+0xd0>
   18270:	ldrb	r1, [r6, #16]
   18274:	b	18288 <rb_radixtree_destroy+0x5c>
   18278:	sub	r1, r2, #1
   1827c:	sub	r2, r2, #2
   18280:	cmp	r2, #15
   18284:	bge	182c8 <rb_radixtree_destroy+0x9c>
   18288:	add	r1, r1, #1
   1828c:	ldr	r7, [r0, r1, lsl #2]
   18290:	add	r2, r1, #1
   18294:	cmp	r7, #0
   18298:	bne	182a8 <rb_radixtree_destroy+0x7c>
   1829c:	cmp	r1, #16
   182a0:	mov	r1, r2
   182a4:	blt	1828c <rb_radixtree_destroy+0x60>
   182a8:	cmp	r7, #0
   182ac:	beq	18278 <rb_radixtree_destroy+0x4c>
   182b0:	ldr	r1, [r7]
   182b4:	cmn	r1, #1
   182b8:	bne	182f0 <rb_radixtree_destroy+0xc4>
   182bc:	cmp	r7, r6
   182c0:	beq	18278 <rb_radixtree_destroy+0x4c>
   182c4:	b	1831c <rb_radixtree_destroy+0xf0>
   182c8:	ldr	r2, [r0, #68]	; 0x44
   182cc:	cmp	r2, #0
   182d0:	beq	182fc <rb_radixtree_destroy+0xd0>
   182d4:	ldrb	r1, [r0, #72]	; 0x48
   182d8:	mov	r0, r2
   182dc:	cmp	r1, #14
   182e0:	bhi	182c8 <rb_radixtree_destroy+0x9c>
   182e4:	add	r1, r1, #1
   182e8:	mov	r0, r2
   182ec:	b	18288 <rb_radixtree_destroy+0x5c>
   182f0:	mov	r1, #0
   182f4:	mov	r0, r7
   182f8:	b	18288 <rb_radixtree_destroy+0x5c>
   182fc:	mov	r7, #0
   18300:	cmp	r4, #0
   18304:	bne	1843c <rb_radixtree_destroy+0x210>
   18308:	b	18450 <rb_radixtree_destroy+0x224>
   1830c:	mov	r7, r6
   18310:	cmp	r4, #0
   18314:	bne	1843c <rb_radixtree_destroy+0x210>
   18318:	b	18450 <rb_radixtree_destroy+0x224>
   1831c:	ldr	r1, [r6, #8]
   18320:	ldr	r0, [r7, #8]
   18324:	bl	5534 <strcmp@plt>
   18328:	cmp	r0, #0
   1832c:	movwmi	r7, #0
   18330:	cmp	r4, #0
   18334:	bne	1843c <rb_radixtree_destroy+0x210>
   18338:	b	18450 <rb_radixtree_destroy+0x224>
   1833c:	mov	r6, r7
   18340:	cmp	r9, #0
   18344:	beq	18358 <rb_radixtree_destroy+0x12c>
   18348:	ldr	r1, [r5, #4]
   1834c:	ldr	r0, [r5, #8]
   18350:	mov	r2, r8
   18354:	blx	r9
   18358:	ldr	r1, [r5, #8]
   1835c:	mov	r0, r4
   18360:	mov	r2, #0
   18364:	bl	53cc <rb_radixtree_elem_find@plt>
   18368:	cmp	r0, #0
   1836c:	movne	r1, r0
   18370:	movne	r0, r4
   18374:	blne	4c94 <rb_radixtree_elem_delete@plt>
   18378:	cmp	r6, #0
   1837c:	beq	18450 <rb_radixtree_destroy+0x224>
   18380:	ldr	r0, [r6, #12]
   18384:	cmp	r0, #0
   18388:	beq	18418 <rb_radixtree_destroy+0x1ec>
   1838c:	ldrb	r1, [r6, #16]
   18390:	b	183a4 <rb_radixtree_destroy+0x178>
   18394:	sub	r1, r2, #1
   18398:	sub	r2, r2, #2
   1839c:	cmp	r2, #15
   183a0:	bge	183e4 <rb_radixtree_destroy+0x1b8>
   183a4:	add	r1, r1, #1
   183a8:	ldr	r7, [r0, r1, lsl #2]
   183ac:	add	r2, r1, #1
   183b0:	cmp	r7, #0
   183b4:	bne	183c4 <rb_radixtree_destroy+0x198>
   183b8:	cmp	r1, #16
   183bc:	mov	r1, r2
   183c0:	blt	183a8 <rb_radixtree_destroy+0x17c>
   183c4:	cmp	r7, #0
   183c8:	beq	18394 <rb_radixtree_destroy+0x168>
   183cc:	ldr	r1, [r7]
   183d0:	cmn	r1, #1
   183d4:	bne	1840c <rb_radixtree_destroy+0x1e0>
   183d8:	cmp	r7, r6
   183dc:	beq	18394 <rb_radixtree_destroy+0x168>
   183e0:	b	18420 <rb_radixtree_destroy+0x1f4>
   183e4:	ldr	r2, [r0, #68]	; 0x44
   183e8:	cmp	r2, #0
   183ec:	beq	18438 <rb_radixtree_destroy+0x20c>
   183f0:	ldrb	r1, [r0, #72]	; 0x48
   183f4:	mov	r0, r2
   183f8:	cmp	r1, #14
   183fc:	bhi	183e4 <rb_radixtree_destroy+0x1b8>
   18400:	add	r1, r1, #1
   18404:	mov	r0, r2
   18408:	b	183a4 <rb_radixtree_destroy+0x178>
   1840c:	mov	r1, #0
   18410:	mov	r0, r7
   18414:	b	183a4 <rb_radixtree_destroy+0x178>
   18418:	mov	r7, #0
   1841c:	b	1843c <rb_radixtree_destroy+0x210>
   18420:	ldr	r1, [r6, #8]
   18424:	ldr	r0, [r7, #8]
   18428:	bl	5534 <strcmp@plt>
   1842c:	cmp	r0, #0
   18430:	movwmi	r7, #0
   18434:	b	1843c <rb_radixtree_destroy+0x210>
   18438:	mov	r7, #0
   1843c:	cmp	r6, #0
   18440:	ldrne	r0, [r6, #4]
   18444:	movne	r5, r6
   18448:	cmpne	r0, #0
   1844c:	bne	1833c <rb_radixtree_destroy+0x110>
   18450:	ldr	r0, [r4, #24]
   18454:	ldr	r1, [r4, #20]
   18458:	cmp	r0, #0
   1845c:	beq	1846c <rb_radixtree_destroy+0x240>
   18460:	str	r1, [r0, #4]
   18464:	ldr	r1, [r4, #20]
   18468:	b	18478 <rb_radixtree_destroy+0x24c>
   1846c:	ldr	r2, [pc, #80]	; 184c4 <rb_radixtree_destroy+0x298>
   18470:	ldr	r2, [pc, r2]
   18474:	str	r1, [r2, #4]
   18478:	ldr	r2, [pc, #72]	; 184c8 <rb_radixtree_destroy+0x29c>
   1847c:	cmp	r1, #0
   18480:	ldr	r2, [pc, r2]
   18484:	mov	r3, r2
   18488:	addne	r3, r1, #8
   1848c:	str	r0, [r3]
   18490:	mov	r0, #0
   18494:	str	r0, [r4, #20]
   18498:	str	r0, [r4, #24]
   1849c:	ldr	r0, [r2, #8]
   184a0:	sub	r0, r0, #1
   184a4:	str	r0, [r2, #8]
   184a8:	ldr	r0, [r4, #12]
   184ac:	cmp	r0, #0
   184b0:	beq	184b8 <rb_radixtree_destroy+0x28c>
   184b4:	bl	4f94 <free@plt>
   184b8:	mov	r0, r4
   184bc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   184c0:	b	4f94 <free@plt>
   184c4:	.word	0x00013f48
   184c8:	.word	0x00013f38

000184cc <rb_radixtree_foreach_start>:
   184cc:	push	{r4, r5, fp, lr}
   184d0:	add	fp, sp, #8
   184d4:	cmp	r0, #0
   184d8:	beq	185c8 <rb_radixtree_foreach_start+0xfc>
   184dc:	ldr	r0, [r0, #4]
   184e0:	mov	r4, r1
   184e4:	cmp	r0, #0
   184e8:	beq	1859c <rb_radixtree_foreach_start+0xd0>
   184ec:	bl	18918 <first_leaf>
   184f0:	cmp	r0, #0
   184f4:	str	r0, [r4, #8]
   184f8:	str	r0, [r4, #12]
   184fc:	popeq	{r4, r5, fp, pc}
   18500:	str	r0, [r4, #8]
   18504:	ldr	r1, [r0, #12]
   18508:	cmp	r1, #0
   1850c:	beq	185c0 <rb_radixtree_foreach_start+0xf4>
   18510:	ldrb	r2, [r0, #16]
   18514:	b	18528 <rb_radixtree_foreach_start+0x5c>
   18518:	sub	r2, r3, #1
   1851c:	sub	r3, r3, #2
   18520:	cmp	r3, #15
   18524:	bge	18568 <rb_radixtree_foreach_start+0x9c>
   18528:	add	r2, r2, #1
   1852c:	ldr	r5, [r1, r2, lsl #2]
   18530:	add	r3, r2, #1
   18534:	cmp	r5, #0
   18538:	bne	18548 <rb_radixtree_foreach_start+0x7c>
   1853c:	cmp	r2, #16
   18540:	mov	r2, r3
   18544:	blt	1852c <rb_radixtree_foreach_start+0x60>
   18548:	cmp	r5, #0
   1854c:	beq	18518 <rb_radixtree_foreach_start+0x4c>
   18550:	ldr	r2, [r5]
   18554:	cmn	r2, #1
   18558:	bne	18590 <rb_radixtree_foreach_start+0xc4>
   1855c:	cmp	r5, r0
   18560:	beq	18518 <rb_radixtree_foreach_start+0x4c>
   18564:	b	185a8 <rb_radixtree_foreach_start+0xdc>
   18568:	ldr	r3, [r1, #68]	; 0x44
   1856c:	cmp	r3, #0
   18570:	beq	185c0 <rb_radixtree_foreach_start+0xf4>
   18574:	ldrb	r2, [r1, #72]	; 0x48
   18578:	mov	r1, r3
   1857c:	cmp	r2, #14
   18580:	bhi	18568 <rb_radixtree_foreach_start+0x9c>
   18584:	add	r2, r2, #1
   18588:	mov	r1, r3
   1858c:	b	18528 <rb_radixtree_foreach_start+0x5c>
   18590:	mov	r2, #0
   18594:	mov	r1, r5
   18598:	b	18528 <rb_radixtree_foreach_start+0x5c>
   1859c:	mov	r0, #0
   185a0:	str	r0, [r4, #8]
   185a4:	b	185c4 <rb_radixtree_foreach_start+0xf8>
   185a8:	ldr	r1, [r0, #8]
   185ac:	ldr	r0, [r5, #8]
   185b0:	bl	5534 <strcmp@plt>
   185b4:	cmn	r0, #1
   185b8:	strgt	r5, [r4, #12]
   185bc:	popgt	{r4, r5, fp, pc}
   185c0:	mov	r0, #0
   185c4:	str	r0, [r4, #12]
   185c8:	pop	{r4, r5, fp, pc}

000185cc <rb_radixtree_foreach_cur>:
   185cc:	mov	r2, r0
   185d0:	mov	r0, #0
   185d4:	cmp	r2, #0
   185d8:	bxeq	lr
   185dc:	ldr	r1, [r1, #8]
   185e0:	cmp	r1, #0
   185e4:	ldrne	r0, [r1, #4]
   185e8:	bx	lr

000185ec <rb_radixtree_delete>:
   185ec:	push	{r4, r5, fp, lr}
   185f0:	add	fp, sp, #8
   185f4:	mov	r2, #0
   185f8:	mov	r5, r0
   185fc:	mov	r4, #0
   18600:	bl	53cc <rb_radixtree_elem_find@plt>
   18604:	cmp	r0, #0
   18608:	beq	1861c <rb_radixtree_delete+0x30>
   1860c:	ldr	r4, [r0, #4]
   18610:	mov	r1, r0
   18614:	mov	r0, r5
   18618:	bl	4c94 <rb_radixtree_elem_delete@plt>
   1861c:	mov	r0, r4
   18620:	pop	{r4, r5, fp, pc}

00018624 <rb_radixtree_foreach_next>:
   18624:	push	{r4, r5, fp, lr}
   18628:	add	fp, sp, #8
   1862c:	cmp	r0, #0
   18630:	beq	1870c <rb_radixtree_foreach_next+0xe8>
   18634:	ldr	r0, [r1, #8]
   18638:	mov	r4, r1
   1863c:	cmp	r0, #0
   18640:	beq	1870c <rb_radixtree_foreach_next+0xe8>
   18644:	ldr	r0, [r4, #12]
   18648:	cmp	r0, #0
   1864c:	str	r0, [r4, #8]
   18650:	popeq	{r4, r5, fp, pc}
   18654:	ldr	r1, [r0, #12]
   18658:	cmp	r1, #0
   1865c:	beq	18704 <rb_radixtree_foreach_next+0xe0>
   18660:	ldrb	r2, [r0, #16]
   18664:	b	18678 <rb_radixtree_foreach_next+0x54>
   18668:	sub	r2, r3, #1
   1866c:	sub	r3, r3, #2
   18670:	cmp	r3, #15
   18674:	bge	186b8 <rb_radixtree_foreach_next+0x94>
   18678:	add	r2, r2, #1
   1867c:	ldr	r5, [r1, r2, lsl #2]
   18680:	add	r3, r2, #1
   18684:	cmp	r5, #0
   18688:	bne	18698 <rb_radixtree_foreach_next+0x74>
   1868c:	cmp	r2, #16
   18690:	mov	r2, r3
   18694:	blt	1867c <rb_radixtree_foreach_next+0x58>
   18698:	cmp	r5, #0
   1869c:	beq	18668 <rb_radixtree_foreach_next+0x44>
   186a0:	ldr	r2, [r5]
   186a4:	cmn	r2, #1
   186a8:	bne	186e0 <rb_radixtree_foreach_next+0xbc>
   186ac:	cmp	r5, r0
   186b0:	beq	18668 <rb_radixtree_foreach_next+0x44>
   186b4:	b	186ec <rb_radixtree_foreach_next+0xc8>
   186b8:	ldr	r3, [r1, #68]	; 0x44
   186bc:	cmp	r3, #0
   186c0:	beq	18704 <rb_radixtree_foreach_next+0xe0>
   186c4:	ldrb	r2, [r1, #72]	; 0x48
   186c8:	mov	r1, r3
   186cc:	cmp	r2, #14
   186d0:	bhi	186b8 <rb_radixtree_foreach_next+0x94>
   186d4:	add	r2, r2, #1
   186d8:	mov	r1, r3
   186dc:	b	18678 <rb_radixtree_foreach_next+0x54>
   186e0:	mov	r2, #0
   186e4:	mov	r1, r5
   186e8:	b	18678 <rb_radixtree_foreach_next+0x54>
   186ec:	ldr	r1, [r0, #8]
   186f0:	ldr	r0, [r5, #8]
   186f4:	bl	5534 <strcmp@plt>
   186f8:	cmn	r0, #1
   186fc:	strgt	r5, [r4, #12]
   18700:	popgt	{r4, r5, fp, pc}
   18704:	mov	r0, #0
   18708:	str	r0, [r4, #12]
   1870c:	pop	{r4, r5, fp, pc}

00018710 <rb_radixtree_foreach>:
   18710:	push	{r4, r5, r6, r7, fp, lr}
   18714:	add	fp, sp, #16
   18718:	ldr	r0, [r0, #4]
   1871c:	cmp	r0, #0
   18720:	beq	187fc <rb_radixtree_foreach+0xec>
   18724:	mov	r3, r1
   18728:	ldr	r1, [r0]
   1872c:	mov	r4, r2
   18730:	cmn	r1, #1
   18734:	beq	187e0 <rb_radixtree_foreach+0xd0>
   18738:	mov	r1, #0
   1873c:	mov	r5, r0
   18740:	add	r0, r1, #1
   18744:	ldr	r2, [r5, r0, lsl #2]
   18748:	add	r1, r0, #1
   1874c:	cmp	r2, #0
   18750:	bne	18760 <rb_radixtree_foreach+0x50>
   18754:	cmp	r0, #16
   18758:	mov	r0, r1
   1875c:	blt	18744 <rb_radixtree_foreach+0x34>
   18760:	sub	r6, r1, #1
   18764:	cmp	r2, #0
   18768:	beq	187a8 <rb_radixtree_foreach+0x98>
   1876c:	ldr	r0, [r2]
   18770:	mov	r1, r6
   18774:	cmn	r0, #1
   18778:	mov	r0, r5
   1877c:	movne	r0, r2
   18780:	movwne	r1, #0
   18784:	bne	187b0 <rb_radixtree_foreach+0xa0>
   18788:	cmp	r3, #0
   1878c:	beq	187b0 <rb_radixtree_foreach+0xa0>
   18790:	ldr	r1, [r2, #4]
   18794:	ldr	r0, [r2, #8]
   18798:	mov	r2, r4
   1879c:	mov	r7, r3
   187a0:	blx	r3
   187a4:	mov	r3, r7
   187a8:	mov	r0, r5
   187ac:	mov	r1, r6
   187b0:	cmp	r1, #16
   187b4:	blt	1873c <rb_radixtree_foreach+0x2c>
   187b8:	mov	r1, r0
   187bc:	ldr	r0, [r1, #68]	; 0x44
   187c0:	cmp	r0, #0
   187c4:	beq	187fc <rb_radixtree_foreach+0xec>
   187c8:	ldrb	r2, [r1, #72]	; 0x48
   187cc:	mov	r1, r0
   187d0:	cmp	r2, #14
   187d4:	bhi	187bc <rb_radixtree_foreach+0xac>
   187d8:	add	r1, r2, #1
   187dc:	b	1873c <rb_radixtree_foreach+0x2c>
   187e0:	cmp	r3, #0
   187e4:	beq	187fc <rb_radixtree_foreach+0xec>
   187e8:	ldr	r1, [r0, #4]
   187ec:	ldr	r0, [r0, #8]
   187f0:	mov	r2, r4
   187f4:	pop	{r4, r5, r6, r7, fp, lr}
   187f8:	bx	r3
   187fc:	pop	{r4, r5, r6, r7, fp, pc}

00018800 <rb_radixtree_search>:
   18800:	push	{r4, r5, r6, r7, fp, lr}
   18804:	add	fp, sp, #16
   18808:	mov	r4, r2
   1880c:	ldr	r2, [r0, #4]
   18810:	mov	r0, #0
   18814:	cmp	r2, #0
   18818:	beq	18914 <rb_radixtree_search+0x114>
   1881c:	mov	r3, r1
   18820:	ldr	r1, [r2]
   18824:	cmn	r1, #1
   18828:	beq	188f8 <rb_radixtree_search+0xf8>
   1882c:	mov	r1, #0
   18830:	b	18838 <rb_radixtree_search+0x38>
   18834:	mov	r2, #0
   18838:	mov	r5, r2
   1883c:	add	r1, r1, #1
   18840:	ldr	r0, [r5, r1, lsl #2]
   18844:	add	r2, r1, #1
   18848:	cmp	r0, #0
   1884c:	bne	1885c <rb_radixtree_search+0x5c>
   18850:	cmp	r1, #16
   18854:	mov	r1, r2
   18858:	blt	18840 <rb_radixtree_search+0x40>
   1885c:	sub	r6, r2, #1
   18860:	cmp	r0, #0
   18864:	beq	188c0 <rb_radixtree_search+0xc0>
   18868:	ldr	r1, [r0]
   1886c:	mov	r2, r5
   18870:	cmn	r1, #1
   18874:	mov	r1, r6
   18878:	movne	r2, r0
   1887c:	movwne	r1, #0
   18880:	bne	188b4 <rb_radixtree_search+0xb4>
   18884:	cmp	r3, #0
   18888:	beq	188b4 <rb_radixtree_search+0xb4>
   1888c:	ldr	r1, [r0, #4]
   18890:	ldr	r0, [r0, #8]
   18894:	mov	r2, r4
   18898:	mov	r7, r3
   1889c:	blx	r3
   188a0:	mov	r3, r7
   188a4:	cmp	r0, #0
   188a8:	mov	r2, r5
   188ac:	mov	r1, r6
   188b0:	bne	18914 <rb_radixtree_search+0x114>
   188b4:	cmp	r1, #16
   188b8:	blt	18838 <rb_radixtree_search+0x38>
   188bc:	b	188d0 <rb_radixtree_search+0xd0>
   188c0:	mov	r2, r5
   188c4:	mov	r1, r6
   188c8:	cmp	r1, #16
   188cc:	blt	18838 <rb_radixtree_search+0x38>
   188d0:	ldr	r0, [r2, #68]	; 0x44
   188d4:	ldrb	r1, [r2, #72]	; 0x48
   188d8:	cmp	r0, #0
   188dc:	beq	18834 <rb_radixtree_search+0x34>
   188e0:	cmp	r1, #14
   188e4:	mov	r2, r0
   188e8:	bhi	188d0 <rb_radixtree_search+0xd0>
   188ec:	add	r1, r1, #1
   188f0:	mov	r2, r0
   188f4:	b	18838 <rb_radixtree_search+0x38>
   188f8:	cmp	r3, #0
   188fc:	beq	18914 <rb_radixtree_search+0x114>
   18900:	ldr	r1, [r2, #4]
   18904:	ldr	r0, [r2, #8]
   18908:	mov	r2, r4
   1890c:	pop	{r4, r5, r6, r7, fp, lr}
   18910:	bx	r3
   18914:	pop	{r4, r5, r6, r7, fp, pc}

00018918 <first_leaf>:
   18918:	ldr	r1, [r0]
   1891c:	cmn	r1, #1
   18920:	bxeq	lr
   18924:	mov	r1, r0
   18928:	ldr	r0, [r0, #4]
   1892c:	cmp	r0, #0
   18930:	bne	18918 <first_leaf>
   18934:	ldr	r0, [r1, #8]
   18938:	cmp	r0, #0
   1893c:	bne	18918 <first_leaf>
   18940:	ldr	r0, [r1, #12]
   18944:	cmp	r0, #0
   18948:	bne	18918 <first_leaf>
   1894c:	ldr	r0, [r1, #16]
   18950:	cmp	r0, #0
   18954:	bne	18918 <first_leaf>
   18958:	ldr	r0, [r1, #20]
   1895c:	cmp	r0, #0
   18960:	bne	18918 <first_leaf>
   18964:	ldr	r0, [r1, #24]
   18968:	cmp	r0, #0
   1896c:	bne	18918 <first_leaf>
   18970:	ldr	r0, [r1, #28]
   18974:	cmp	r0, #0
   18978:	bne	18918 <first_leaf>
   1897c:	ldr	r0, [r1, #32]
   18980:	cmp	r0, #0
   18984:	bne	18918 <first_leaf>
   18988:	ldr	r0, [r1, #36]	; 0x24
   1898c:	cmp	r0, #0
   18990:	bne	18918 <first_leaf>
   18994:	ldr	r0, [r1, #40]	; 0x28
   18998:	cmp	r0, #0
   1899c:	bne	18918 <first_leaf>
   189a0:	ldr	r0, [r1, #44]	; 0x2c
   189a4:	cmp	r0, #0
   189a8:	bne	18918 <first_leaf>
   189ac:	ldr	r0, [r1, #48]	; 0x30
   189b0:	cmp	r0, #0
   189b4:	bne	18918 <first_leaf>
   189b8:	ldr	r0, [r1, #52]	; 0x34
   189bc:	cmp	r0, #0
   189c0:	bne	18918 <first_leaf>
   189c4:	ldr	r0, [r1, #56]	; 0x38
   189c8:	cmp	r0, #0
   189cc:	bne	18918 <first_leaf>
   189d0:	ldr	r0, [r1, #60]	; 0x3c
   189d4:	cmp	r0, #0
   189d8:	bne	18918 <first_leaf>
   189dc:	ldr	r0, [r1, #64]	; 0x40
   189e0:	cmp	r0, #0
   189e4:	moveq	r0, r1
   189e8:	b	18918 <first_leaf>

000189ec <rb_radixtree_elem_find>:
   189ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189f0:	add	fp, sp, #28
   189f4:	sub	sp, sp, #260	; 0x104
   189f8:	mov	sl, r0
   189fc:	mov	r0, r1
   18a00:	mov	r8, r2
   18a04:	mov	r4, r1
   18a08:	bl	5078 <strlen@plt>
   18a0c:	mov	r5, r0
   18a10:	ldr	r0, [sl]
   18a14:	mov	r6, #0
   18a18:	cmp	r0, #0
   18a1c:	beq	18a54 <rb_radixtree_elem_find+0x68>
   18a20:	cmp	r5, #256	; 0x100
   18a24:	blt	18a5c <rb_radixtree_elem_find+0x70>
   18a28:	add	r0, r5, #1
   18a2c:	bl	5228 <malloc@plt>
   18a30:	cmp	r0, #0
   18a34:	beq	18b18 <rb_radixtree_elem_find+0x12c>
   18a38:	mov	r1, r4
   18a3c:	mov	r7, r0
   18a40:	bl	512c <strcpy@plt>
   18a44:	ldr	r1, [sl]
   18a48:	blx	r1
   18a4c:	mov	r9, r7
   18a50:	b	18a80 <rb_radixtree_elem_find+0x94>
   18a54:	mov	r7, r4
   18a58:	b	18a7c <rb_radixtree_elem_find+0x90>
   18a5c:	mov	r7, sp
   18a60:	mov	r1, r4
   18a64:	mov	r2, #256	; 0x100
   18a68:	mov	r0, r7
   18a6c:	bl	4f4c <rb_strlcpy@plt>
   18a70:	ldr	r1, [sl]
   18a74:	mov	r0, r7
   18a78:	blx	r1
   18a7c:	mov	r9, #0
   18a80:	ldr	r4, [sl, #4]
   18a84:	cmp	r4, #0
   18a88:	beq	18afc <rb_radixtree_elem_find+0x110>
   18a8c:	mov	ip, #4
   18a90:	mov	r1, #15
   18a94:	mov	r6, #0
   18a98:	b	18aac <rb_radixtree_elem_find+0xc0>
   18a9c:	add	r0, r4, r0, lsl #2
   18aa0:	ldr	r4, [r0, #4]
   18aa4:	cmp	r4, #0
   18aa8:	beq	18afc <rb_radixtree_elem_find+0x110>
   18aac:	ldr	r2, [r4]
   18ab0:	cmn	r2, #1
   18ab4:	beq	18adc <rb_radixtree_elem_find+0xf0>
   18ab8:	add	r3, r2, r2, lsr #31
   18abc:	mov	r0, #0
   18ac0:	cmp	r5, r3, asr #1
   18ac4:	ble	18a9c <rb_radixtree_elem_find+0xb0>
   18ac8:	asr	r0, r3, #1
   18acc:	bic	r2, ip, r2, lsl #2
   18ad0:	ldrb	r0, [r7, r0]
   18ad4:	and	r0, r1, r0, lsr r2
   18ad8:	b	18a9c <rb_radixtree_elem_find+0xb0>
   18adc:	cmp	r8, #0
   18ae0:	bne	18af8 <rb_radixtree_elem_find+0x10c>
   18ae4:	ldr	r0, [r4, #8]
   18ae8:	mov	r1, r7
   18aec:	bl	5534 <strcmp@plt>
   18af0:	cmp	r0, #0
   18af4:	movne	r4, #0
   18af8:	mov	r6, r4
   18afc:	cmp	r9, #0
   18b00:	beq	18b0c <rb_radixtree_elem_find+0x120>
   18b04:	mov	r0, r9
   18b08:	bl	4f94 <free@plt>
   18b0c:	mov	r0, r6
   18b10:	sub	sp, fp, #28
   18b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b18:	bl	5204 <rb_outofmemory@plt>

00018b1c <rb_radixtree_foreach_start_from>:
   18b1c:	push	{r4, r5, fp, lr}
   18b20:	add	fp, sp, #8
   18b24:	mov	r4, r1
   18b28:	mov	r5, r0
   18b2c:	cmp	r2, #0
   18b30:	beq	18b70 <rb_radixtree_foreach_start_from+0x54>
   18b34:	mov	r0, #0
   18b38:	mov	r1, r2
   18b3c:	mov	r2, #1
   18b40:	str	r0, [r4, #8]
   18b44:	mov	r0, r5
   18b48:	bl	53cc <rb_radixtree_elem_find@plt>
   18b4c:	cmp	r5, #0
   18b50:	str	r0, [r4, #12]
   18b54:	popeq	{r4, r5, fp, pc}
   18b58:	ldr	r1, [r4, #8]
   18b5c:	cmp	r1, #0
   18b60:	strne	r0, [r4, #8]
   18b64:	cmpne	r0, #0
   18b68:	bne	18b80 <rb_radixtree_foreach_start_from+0x64>
   18b6c:	pop	{r4, r5, fp, pc}
   18b70:	mov	r0, r5
   18b74:	mov	r1, r4
   18b78:	pop	{r4, r5, fp, lr}
   18b7c:	b	184cc <rb_radixtree_foreach_start>
   18b80:	ldr	r1, [r0, #12]
   18b84:	cmp	r1, #0
   18b88:	beq	18c2c <rb_radixtree_foreach_start_from+0x110>
   18b8c:	ldrb	r2, [r0, #16]
   18b90:	b	18ba4 <rb_radixtree_foreach_start_from+0x88>
   18b94:	sub	r2, r3, #1
   18b98:	sub	r3, r3, #2
   18b9c:	cmp	r3, #15
   18ba0:	bge	18be4 <rb_radixtree_foreach_start_from+0xc8>
   18ba4:	add	r2, r2, #1
   18ba8:	ldr	r5, [r1, r2, lsl #2]
   18bac:	add	r3, r2, #1
   18bb0:	cmp	r5, #0
   18bb4:	bne	18bc4 <rb_radixtree_foreach_start_from+0xa8>
   18bb8:	cmp	r2, #16
   18bbc:	mov	r2, r3
   18bc0:	blt	18ba8 <rb_radixtree_foreach_start_from+0x8c>
   18bc4:	cmp	r5, #0
   18bc8:	beq	18b94 <rb_radixtree_foreach_start_from+0x78>
   18bcc:	ldr	r2, [r5]
   18bd0:	cmn	r2, #1
   18bd4:	bne	18c0c <rb_radixtree_foreach_start_from+0xf0>
   18bd8:	cmp	r0, r5
   18bdc:	beq	18b94 <rb_radixtree_foreach_start_from+0x78>
   18be0:	b	18c18 <rb_radixtree_foreach_start_from+0xfc>
   18be4:	ldr	r3, [r1, #68]	; 0x44
   18be8:	cmp	r3, #0
   18bec:	beq	18c2c <rb_radixtree_foreach_start_from+0x110>
   18bf0:	ldrb	r2, [r1, #72]	; 0x48
   18bf4:	mov	r1, r3
   18bf8:	cmp	r2, #14
   18bfc:	bhi	18be4 <rb_radixtree_foreach_start_from+0xc8>
   18c00:	add	r2, r2, #1
   18c04:	mov	r1, r3
   18c08:	b	18ba4 <rb_radixtree_foreach_start_from+0x88>
   18c0c:	mov	r2, #0
   18c10:	mov	r1, r5
   18c14:	b	18ba4 <rb_radixtree_foreach_start_from+0x88>
   18c18:	ldr	r1, [r0, #8]
   18c1c:	ldr	r0, [r5, #8]
   18c20:	bl	5534 <strcmp@plt>
   18c24:	cmn	r0, #1
   18c28:	bgt	18c38 <rb_radixtree_foreach_start_from+0x11c>
   18c2c:	mov	r0, #0
   18c30:	str	r0, [r4, #12]
   18c34:	pop	{r4, r5, fp, pc}
   18c38:	str	r5, [r4, #12]
   18c3c:	pop	{r4, r5, fp, pc}

00018c40 <rb_radixtree_elem_add>:
   18c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c44:	add	fp, sp, #28
   18c48:	sub	sp, sp, #28
   18c4c:	mov	sl, r0
   18c50:	mov	r0, r1
   18c54:	mov	r8, r2
   18c58:	mov	r5, r1
   18c5c:	bl	5078 <strlen@plt>
   18c60:	mov	r4, r0
   18c64:	add	r0, r0, #1
   18c68:	bl	5228 <malloc@plt>
   18c6c:	cmp	r0, #0
   18c70:	beq	18fa0 <rb_radixtree_elem_add+0x360>
   18c74:	mov	r1, r5
   18c78:	mov	r5, r0
   18c7c:	bl	512c <strcpy@plt>
   18c80:	ldr	r1, [sl]
   18c84:	cmp	r1, #0
   18c88:	beq	18c94 <rb_radixtree_elem_add+0x54>
   18c8c:	mov	r0, r5
   18c90:	blx	r1
   18c94:	mov	r0, sl
   18c98:	str	r5, [sp, #24]
   18c9c:	ldr	r7, [r0, #4]!
   18ca0:	cmp	r7, #0
   18ca4:	beq	18d0c <rb_radixtree_elem_add+0xcc>
   18ca8:	ldr	r2, [r7]
   18cac:	str	r0, [sp, #8]
   18cb0:	str	r7, [sp, #20]
   18cb4:	cmn	r2, #1
   18cb8:	beq	18d58 <rb_radixtree_elem_add+0x118>
   18cbc:	ldr	r1, [sp, #24]
   18cc0:	mov	r0, #4
   18cc4:	mov	r6, #15
   18cc8:	add	r3, r2, r2, lsr #31
   18ccc:	mov	r5, r7
   18cd0:	mov	r9, #0
   18cd4:	cmp	r4, r3, asr #1
   18cd8:	ble	18cec <rb_radixtree_elem_add+0xac>
   18cdc:	asr	r3, r3, #1
   18ce0:	bic	r2, r0, r2, lsl #2
   18ce4:	ldrb	r3, [r1, r3]
   18ce8:	and	r9, r6, r3, lsr r2
   18cec:	add	r2, r5, r9, lsl #2
   18cf0:	ldr	r7, [r2, #4]
   18cf4:	cmp	r7, #0
   18cf8:	beq	18d88 <rb_radixtree_elem_add+0x148>
   18cfc:	ldr	r2, [r7]
   18d00:	cmn	r2, #1
   18d04:	bne	18cc8 <rb_radixtree_elem_add+0x88>
   18d08:	b	18d64 <rb_radixtree_elem_add+0x124>
   18d0c:	mov	r9, #18
   18d10:	mov	r5, #0
   18d14:	mov	r0, #1
   18d18:	mov	r1, #20
   18d1c:	bl	4e98 <calloc@plt>
   18d20:	cmp	r0, #0
   18d24:	mvnne	r1, #0
   18d28:	strne	r0, [sl, #4]
   18d2c:	strbne	r9, [r0, #16]
   18d30:	stmne	r0, {r1, r8}
   18d34:	ldrne	r1, [sp, #24]
   18d38:	strne	r1, [r0, #8]
   18d3c:	strne	r5, [r0, #12]
   18d40:	ldrne	r1, [sl, #8]
   18d44:	addne	r1, r1, #1
   18d48:	strne	r1, [sl, #8]
   18d4c:	subne	sp, fp, #28
   18d50:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d54:	bl	5204 <rb_outofmemory@plt>
   18d58:	ldr	r1, [sp, #24]
   18d5c:	mov	r5, #0
   18d60:	mov	r9, #18
   18d64:	ldr	r0, [r7, #8]
   18d68:	bl	5534 <strcmp@plt>
   18d6c:	cmp	r0, #0
   18d70:	bne	18d9c <rb_radixtree_elem_add+0x15c>
   18d74:	ldr	r0, [sp, #24]
   18d78:	bl	4f94 <free@plt>
   18d7c:	mov	r0, #0
   18d80:	sub	sp, fp, #28
   18d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d88:	mov	r0, r5
   18d8c:	bl	18918 <first_leaf>
   18d90:	mov	r7, r0
   18d94:	cmp	r0, #0
   18d98:	beq	18d14 <rb_radixtree_elem_add+0xd4>
   18d9c:	ldr	r0, [r7, #8]
   18da0:	ldr	ip, [sp, #24]
   18da4:	str	r8, [sp, #12]
   18da8:	mvn	r8, #0
   18dac:	mov	r1, #0
   18db0:	mov	r2, #4
   18db4:	mov	r3, #15
   18db8:	str	sl, [sp, #16]
   18dbc:	add	r8, r8, #1
   18dc0:	bic	sl, r2, r1
   18dc4:	add	r1, r1, #4
   18dc8:	ldrb	r4, [ip, r8, lsr #1]
   18dcc:	ldrb	r6, [r0, r8, lsr #1]
   18dd0:	eor	r6, r6, r4
   18dd4:	tst	r6, r3, lsl sl
   18dd8:	beq	18dbc <rb_radixtree_elem_add+0x17c>
   18ddc:	lsr	lr, r8, #1
   18de0:	mov	r6, #1
   18de4:	cmp	r5, #0
   18de8:	beq	18e30 <rb_radixtree_elem_add+0x1f0>
   18dec:	ldr	r0, [r5]
   18df0:	cmp	r0, r8
   18df4:	ble	18e18 <rb_radixtree_elem_add+0x1d8>
   18df8:	mov	r1, r5
   18dfc:	ldr	r5, [r5, #68]	; 0x44
   18e00:	cmp	r5, #0
   18e04:	beq	18e2c <rb_radixtree_elem_add+0x1ec>
   18e08:	ldr	r0, [r5]
   18e0c:	cmp	r0, r8
   18e10:	bgt	18df8 <rb_radixtree_elem_add+0x1b8>
   18e14:	ldrb	r9, [r1, #72]	; 0x48
   18e18:	mov	r6, #0
   18e1c:	cmp	r0, r8
   18e20:	mov	r4, r5
   18e24:	blt	18e34 <rb_radixtree_elem_add+0x1f4>
   18e28:	b	18f30 <rb_radixtree_elem_add+0x2f0>
   18e2c:	ldrb	r9, [r1, #72]	; 0x48
   18e30:	mov	r5, #0
   18e34:	mov	r0, #1
   18e38:	mov	r1, #76	; 0x4c
   18e3c:	str	lr, [sp, #4]
   18e40:	bl	4e98 <calloc@plt>
   18e44:	cmp	r0, #0
   18e48:	beq	18fa0 <rb_radixtree_elem_add+0x360>
   18e4c:	vmov.i32	q8, #0	; 0x00000000
   18e50:	mov	r4, r0
   18e54:	ldr	r3, [sp, #20]
   18e58:	ldr	lr, [sp, #4]
   18e5c:	strb	r9, [r0, #72]	; 0x48
   18e60:	str	r5, [r0, #68]	; 0x44
   18e64:	str	r8, [r0], #4
   18e68:	cmp	r6, #0
   18e6c:	add	r1, r4, #20
   18e70:	vst1.32	{d16-d17}, [r1]
   18e74:	add	r1, r4, #36	; 0x24
   18e78:	vst1.32	{d16-d17}, [r0]
   18e7c:	vst1.32	{d16-d17}, [r1]
   18e80:	add	r1, r4, #52	; 0x34
   18e84:	vst1.32	{d16-d17}, [r1]
   18e88:	beq	18ebc <rb_radixtree_elem_add+0x27c>
   18e8c:	ldr	r1, [r7, #8]
   18e90:	ldr	ip, [sp, #24]
   18e94:	ldrb	r2, [r1, lr]
   18e98:	mov	r1, #15
   18e9c:	and	r2, r1, r2, lsr sl
   18ea0:	str	r3, [r0, r2, lsl #2]
   18ea4:	ldr	r0, [r3]
   18ea8:	cmn	r0, #1
   18eac:	beq	18f08 <rb_radixtree_elem_add+0x2c8>
   18eb0:	str	r4, [r3, #68]	; 0x44
   18eb4:	ldr	r6, [sp, #8]
   18eb8:	b	18ef0 <rb_radixtree_elem_add+0x2b0>
   18ebc:	ldr	r1, [r7, #8]
   18ec0:	add	r6, r5, r9, lsl #2
   18ec4:	ldr	ip, [sp, #24]
   18ec8:	ldr	r3, [r6, #4]!
   18ecc:	ldrb	r2, [r1, lr]
   18ed0:	mov	r1, #15
   18ed4:	and	r2, r1, r2, lsr sl
   18ed8:	str	r3, [r0, r2, lsl #2]
   18edc:	ldr	r0, [r6]
   18ee0:	ldr	r2, [r0]
   18ee4:	cmn	r2, #1
   18ee8:	beq	18f14 <rb_radixtree_elem_add+0x2d4>
   18eec:	str	r4, [r0, #68]	; 0x44
   18ef0:	ldr	r0, [r7, #8]
   18ef4:	ldrb	r0, [r0, lr]
   18ef8:	and	r0, r1, r0, lsr sl
   18efc:	ldr	r1, [r6]
   18f00:	strb	r0, [r1, #72]	; 0x48
   18f04:	b	18f2c <rb_radixtree_elem_add+0x2ec>
   18f08:	str	r4, [r3, #12]
   18f0c:	ldr	r6, [sp, #8]
   18f10:	b	18f18 <rb_radixtree_elem_add+0x2d8>
   18f14:	str	r4, [r0, #12]
   18f18:	ldr	r0, [r7, #8]
   18f1c:	ldrb	r0, [r0, lr]
   18f20:	and	r0, r1, r0, lsr sl
   18f24:	ldr	r1, [r6]
   18f28:	strb	r0, [r1, #16]
   18f2c:	str	r4, [r6]
   18f30:	ldrb	r5, [ip, lr]
   18f34:	mov	r0, #1
   18f38:	mov	r1, #20
   18f3c:	mov	r6, ip
   18f40:	bl	4e98 <calloc@plt>
   18f44:	cmp	r0, #0
   18f48:	movne	r1, #15
   18f4c:	mvnne	r3, #0
   18f50:	andne	r1, r1, r5, lsr sl
   18f54:	addne	r2, r4, r1, lsl #2
   18f58:	strne	r0, [r2, #4]!
   18f5c:	strne	r3, [r0]
   18f60:	ldrne	r3, [sp, #12]
   18f64:	ldrne	r0, [r2]
   18f68:	strne	r3, [r0, #4]
   18f6c:	ldrne	r0, [r2]
   18f70:	strne	r6, [r0, #8]
   18f74:	ldrne	r0, [r2]
   18f78:	strne	r4, [r0, #12]
   18f7c:	ldrne	r0, [r2]
   18f80:	strbne	r1, [r0, #16]
   18f84:	ldrne	r1, [sp, #16]
   18f88:	ldrne	r0, [r1, #8]
   18f8c:	addne	r0, r0, #1
   18f90:	strne	r0, [r1, #8]
   18f94:	ldrne	r0, [r2]
   18f98:	subne	sp, fp, #28
   18f9c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fa0:	bl	5204 <rb_outofmemory@plt>

00018fa4 <rb_radixtree_add>:
   18fa4:	push	{fp, lr}
   18fa8:	mov	fp, sp
   18fac:	bl	4fb8 <rb_radixtree_elem_add@plt>
   18fb0:	cmp	r0, #0
   18fb4:	movwne	r0, #1
   18fb8:	pop	{fp, pc}

00018fbc <rb_radixtree_elem_delete>:
   18fbc:	push	{r4, r5, r6, r7, fp, lr}
   18fc0:	add	fp, sp, #16
   18fc4:	mov	r4, r0
   18fc8:	ldr	r0, [r1, #8]
   18fcc:	ldr	r5, [r1, #12]
   18fd0:	ldrb	r7, [r1, #16]
   18fd4:	mov	r6, r1
   18fd8:	cmp	r0, #0
   18fdc:	beq	18fe4 <rb_radixtree_elem_delete+0x28>
   18fe0:	bl	4f94 <free@plt>
   18fe4:	mov	r0, r6
   18fe8:	bl	4f94 <free@plt>
   18fec:	cmp	r5, #0
   18ff0:	beq	191a8 <rb_radixtree_elem_delete+0x1ec>
   18ff4:	add	r0, r5, #4
   18ff8:	mov	r1, #0
   18ffc:	mvn	r6, #1
   19000:	str	r1, [r0, r7, lsl #2]
   19004:	ldmib	r5, {r0, r2, r3, r7}
   19008:	cmp	r0, #0
   1900c:	mvn	r0, #1
   19010:	mvneq	r1, #0
   19014:	movweq	r6, #1
   19018:	cmp	r2, #0
   1901c:	mvn	r2, #1
   19020:	moveq	r6, r1
   19024:	mvn	r1, #1
   19028:	cmn	r6, #1
   1902c:	movweq	r1, #2
   19030:	cmp	r3, #0
   19034:	ldr	r3, [r5, #20]
   19038:	moveq	r1, r6
   1903c:	cmn	r1, #1
   19040:	movweq	r2, #3
   19044:	cmp	r7, #0
   19048:	moveq	r2, r1
   1904c:	mvn	r1, #1
   19050:	cmn	r2, #1
   19054:	movweq	r1, #4
   19058:	cmp	r3, #0
   1905c:	ldr	r3, [r5, #24]
   19060:	moveq	r1, r2
   19064:	mvn	r2, #1
   19068:	cmn	r1, #1
   1906c:	movweq	r2, #5
   19070:	cmp	r3, #0
   19074:	ldr	r3, [r5, #28]
   19078:	moveq	r2, r1
   1907c:	mvn	r1, #1
   19080:	cmn	r2, #1
   19084:	movweq	r1, #6
   19088:	cmp	r3, #0
   1908c:	ldr	r3, [r5, #32]
   19090:	moveq	r1, r2
   19094:	mvn	r2, #1
   19098:	cmn	r1, #1
   1909c:	movweq	r2, #7
   190a0:	cmp	r3, #0
   190a4:	ldr	r3, [r5, #36]	; 0x24
   190a8:	moveq	r2, r1
   190ac:	mvn	r1, #1
   190b0:	cmn	r2, #1
   190b4:	movweq	r1, #8
   190b8:	cmp	r3, #0
   190bc:	ldr	r3, [r5, #40]	; 0x28
   190c0:	moveq	r1, r2
   190c4:	mvn	r2, #1
   190c8:	cmn	r1, #1
   190cc:	movweq	r2, #9
   190d0:	cmp	r3, #0
   190d4:	ldr	r3, [r5, #44]	; 0x2c
   190d8:	moveq	r2, r1
   190dc:	mvn	r1, #1
   190e0:	cmn	r2, #1
   190e4:	movweq	r1, #10
   190e8:	cmp	r3, #0
   190ec:	ldr	r3, [r5, #48]	; 0x30
   190f0:	moveq	r1, r2
   190f4:	mvn	r2, #1
   190f8:	cmn	r1, #1
   190fc:	movweq	r2, #11
   19100:	cmp	r3, #0
   19104:	ldr	r3, [r5, #52]	; 0x34
   19108:	moveq	r2, r1
   1910c:	mvn	r1, #1
   19110:	cmn	r2, #1
   19114:	movweq	r1, #12
   19118:	cmp	r3, #0
   1911c:	ldr	r3, [r5, #56]	; 0x38
   19120:	moveq	r1, r2
   19124:	mvn	r2, #1
   19128:	cmn	r1, #1
   1912c:	movweq	r2, #13
   19130:	cmp	r3, #0
   19134:	ldr	r3, [r5, #60]	; 0x3c
   19138:	moveq	r2, r1
   1913c:	mvn	r1, #1
   19140:	cmn	r2, #1
   19144:	movweq	r1, #14
   19148:	cmp	r3, #0
   1914c:	moveq	r1, r2
   19150:	ldr	r2, [r5, #64]	; 0x40
   19154:	cmn	r1, #1
   19158:	movweq	r0, #15
   1915c:	cmp	r2, #0
   19160:	moveq	r0, r1
   19164:	cmp	r0, #0
   19168:	bmi	191c8 <rb_radixtree_elem_delete+0x20c>
   1916c:	ldr	r2, [r5, #68]	; 0x44
   19170:	ldrb	r1, [r5, #72]	; 0x48
   19174:	add	r0, r5, r0, lsl #2
   19178:	ldr	r0, [r0, #4]
   1917c:	add	r3, r2, r1, lsl #2
   19180:	cmp	r2, #0
   19184:	add	r3, r3, #4
   19188:	addeq	r3, r4, #4
   1918c:	str	r0, [r3]
   19190:	ldr	r3, [r0]
   19194:	cmn	r3, #1
   19198:	beq	191b4 <rb_radixtree_elem_delete+0x1f8>
   1919c:	str	r2, [r0, #68]	; 0x44
   191a0:	add	r0, r0, #72	; 0x48
   191a4:	b	191bc <rb_radixtree_elem_delete+0x200>
   191a8:	mov	r0, #0
   191ac:	str	r0, [r4, #4]
   191b0:	b	191c8 <rb_radixtree_elem_delete+0x20c>
   191b4:	str	r2, [r0, #12]
   191b8:	add	r0, r0, #16
   191bc:	strb	r1, [r0]
   191c0:	mov	r0, r5
   191c4:	bl	4f94 <free@plt>
   191c8:	ldr	r0, [r4, #8]
   191cc:	subs	r0, r0, #1
   191d0:	str	r0, [r4, #8]
   191d4:	moveq	r0, #0
   191d8:	streq	r0, [r4, #4]
   191dc:	pop	{r4, r5, r6, r7, fp, pc}

000191e0 <rb_radixtree_retrieve>:
   191e0:	push	{r4, sl, fp, lr}
   191e4:	add	fp, sp, #8
   191e8:	mov	r2, #0
   191ec:	mov	r4, #0
   191f0:	bl	53cc <rb_radixtree_elem_find@plt>
   191f4:	cmp	r0, #0
   191f8:	ldrne	r4, [r0, #4]
   191fc:	mov	r0, r4
   19200:	pop	{r4, sl, fp, pc}

00019204 <rb_radixtree_elem_get_key>:
   19204:	ldr	r0, [r0, #8]
   19208:	bx	lr

0001920c <rb_radixtree_elem_set_data>:
   1920c:	str	r1, [r0, #4]
   19210:	bx	lr

00019214 <rb_radixtree_elem_get_data>:
   19214:	ldr	r0, [r0, #4]
   19218:	bx	lr

0001921c <rb_radixtree_size>:
   1921c:	ldr	r0, [r0, #8]
   19220:	bx	lr

00019224 <rb_radixtree_stats>:
   19224:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19228:	add	fp, sp, #24
   1922c:	sub	sp, sp, #280	; 0x118
   19230:	mov	r6, r0
   19234:	mov	r0, #0
   19238:	mov	r5, r2
   1923c:	mov	r7, r1
   19240:	str	r0, [sp, #20]
   19244:	ldr	r0, [r6, #8]
   19248:	cmp	r0, #0
   1924c:	beq	1929c <rb_radixtree_stats+0x78>
   19250:	ldr	r0, [r6, #4]
   19254:	add	r2, sp, #20
   19258:	mov	r1, #0
   1925c:	bl	19300 <stats_recurse>
   19260:	ldr	r1, [r6, #8]
   19264:	ldr	r3, [r6, #12]
   19268:	ldr	r2, [sp, #20]
   1926c:	ldr	r6, [pc, #120]	; 192ec <rb_radixtree_stats+0xc8>
   19270:	str	r0, [sp, #8]
   19274:	udiv	r4, r0, r1
   19278:	add	r6, pc, r6
   1927c:	str	r1, [sp, #4]
   19280:	str	r2, [sp, #16]
   19284:	add	r0, sp, #24
   19288:	str	r6, [sp]
   1928c:	str	r4, [sp, #12]
   19290:	ldr	r2, [pc, #88]	; 192f0 <rb_radixtree_stats+0xcc>
   19294:	add	r2, pc, r2
   19298:	b	192d0 <rb_radixtree_stats+0xac>
   1929c:	ldr	r3, [r6, #12]
   192a0:	ldr	r0, [pc, #76]	; 192f4 <rb_radixtree_stats+0xd0>
   192a4:	ldr	r1, [pc, #76]	; 192f8 <rb_radixtree_stats+0xd4>
   192a8:	add	r0, pc, r0
   192ac:	add	r1, pc, r1
   192b0:	str	r1, [sp]
   192b4:	str	r0, [sp, #4]
   192b8:	str	r0, [sp, #8]
   192bc:	str	r0, [sp, #12]
   192c0:	str	r0, [sp, #16]
   192c4:	add	r0, sp, #24
   192c8:	ldr	r2, [pc, #44]	; 192fc <rb_radixtree_stats+0xd8>
   192cc:	add	r2, pc, r2
   192d0:	mov	r1, #256	; 0x100
   192d4:	bl	5408 <snprintf@plt>
   192d8:	add	r0, sp, #24
   192dc:	mov	r1, r5
   192e0:	blx	r7
   192e4:	sub	sp, fp, #24
   192e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   192ec:	.word	0x00001bc1
   192f0:	.word	0x00001b58
   192f4:	.word	0x00000d3f
   192f8:	.word	0x00001b8d
   192fc:	.word	0x00001b49

00019300 <stats_recurse>:
   19300:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19304:	add	fp, sp, #24
   19308:	mov	r4, r1
   1930c:	ldr	r1, [r2]
   19310:	mov	r8, r2
   19314:	cmp	r1, r4
   19318:	strlt	r4, [r8]
   1931c:	ldr	r1, [r0]
   19320:	cmn	r1, #1
   19324:	beq	19368 <stats_recurse+0x68>
   19328:	add	r6, r4, #1
   1932c:	add	r7, r0, #4
   19330:	mov	r5, #0
   19334:	mov	r4, #0
   19338:	b	19348 <stats_recurse+0x48>
   1933c:	add	r5, r5, #1
   19340:	cmp	r5, #16
   19344:	beq	19368 <stats_recurse+0x68>
   19348:	ldr	r0, [r7, r5, lsl #2]
   1934c:	cmp	r0, #0
   19350:	beq	1933c <stats_recurse+0x3c>
   19354:	mov	r1, r6
   19358:	mov	r2, r8
   1935c:	bl	19300 <stats_recurse>
   19360:	add	r4, r0, r4
   19364:	b	1933c <stats_recurse+0x3c>
   19368:	mov	r0, r4
   1936c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00019370 <rb_radixtree_stats_walk>:
   19370:	push	{r4, r5, r6, sl, fp, lr}
   19374:	add	fp, sp, #16
   19378:	mov	r5, r0
   1937c:	ldr	r0, [pc, #48]	; 193b4 <rb_radixtree_stats_walk+0x44>
   19380:	ldr	r0, [pc, r0]
   19384:	ldr	r6, [r0]
   19388:	cmp	r6, #0
   1938c:	beq	193b0 <rb_radixtree_stats_walk+0x40>
   19390:	mov	r4, r1
   19394:	ldr	r0, [r6]
   19398:	mov	r1, r5
   1939c:	mov	r2, r4
   193a0:	bl	4eec <rb_radixtree_stats@plt>
   193a4:	ldr	r6, [r6, #8]
   193a8:	cmp	r6, #0
   193ac:	bne	19394 <rb_radixtree_stats_walk+0x24>
   193b0:	pop	{r4, r5, r6, sl, fp, pc}
   193b4:	.word	0x00013038

Disassembly of section .fini:

000193b8 <_fini>:
   193b8:	push	{r3, lr}
   193bc:	pop	{r3, pc}
