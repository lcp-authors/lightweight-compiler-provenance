
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

00010f80 <.init>:
   10f80:	push	{r3, lr}
   10f84:	bl	119c0 <__assert_fail@plt+0x6f0>
   10f88:	pop	{r3, pc}

Disassembly of section .plt:

00010f8c <fstatfs64@plt-0x14>:
   10f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f90:	ldr	lr, [pc, #4]	; 10f9c <fstatfs64@plt-0x4>
   10f94:	add	lr, pc, lr
   10f98:	ldr	pc, [lr, #8]!
   10f9c:	andeq	lr, r1, r4, rrx

00010fa0 <fstatfs64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #122880	; 0x1e000
   10fa8:	ldr	pc, [ip, #100]!	; 0x64

00010fac <calloc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #122880	; 0x1e000
   10fb4:	ldr	pc, [ip, #92]!	; 0x5c

00010fb8 <fputs_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #122880	; 0x1e000
   10fc0:	ldr	pc, [ip, #84]!	; 0x54

00010fc4 <raise@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #122880	; 0x1e000
   10fcc:	ldr	pc, [ip, #76]!	; 0x4c

00010fd0 <__getdelim@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #122880	; 0x1e000
   10fd8:	ldr	pc, [ip, #68]!	; 0x44

00010fdc <strcmp@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #122880	; 0x1e000
   10fe4:	ldr	pc, [ip, #60]!	; 0x3c

00010fe8 <fflush@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #122880	; 0x1e000
   10ff0:	ldr	pc, [ip, #52]!	; 0x34

00010ff4 <unlinkat@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #122880	; 0x1e000
   10ffc:	ldr	pc, [ip, #44]!	; 0x2c

00011000 <memmove@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #122880	; 0x1e000
   11008:	ldr	pc, [ip, #36]!	; 0x24

0001100c <free@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #122880	; 0x1e000
   11014:	ldr	pc, [ip, #28]!

00011018 <faccessat@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #122880	; 0x1e000
   11020:	ldr	pc, [ip, #20]!

00011024 <_exit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #122880	; 0x1e000
   1102c:	ldr	pc, [ip, #12]!

00011030 <memcpy@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #122880	; 0x1e000
   11038:	ldr	pc, [ip, #4]!

0001103c <mbsinit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #118784	; 0x1d000
   11044:	ldr	pc, [ip, #4092]!	; 0xffc

00011048 <memcmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #118784	; 0x1d000
   11050:	ldr	pc, [ip, #4084]!	; 0xff4

00011054 <fputc_unlocked@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #118784	; 0x1d000
   1105c:	ldr	pc, [ip, #4076]!	; 0xfec

00011060 <dcgettext@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #118784	; 0x1d000
   11068:	ldr	pc, [ip, #4068]!	; 0xfe4

0001106c <realloc@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #118784	; 0x1d000
   11074:	ldr	pc, [ip, #4060]!	; 0xfdc

00011078 <textdomain@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #118784	; 0x1d000
   11080:	ldr	pc, [ip, #4052]!	; 0xfd4

00011084 <geteuid@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #118784	; 0x1d000
   1108c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011090 <__fxstatat64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #118784	; 0x1d000
   11098:	ldr	pc, [ip, #4036]!	; 0xfc4

0001109c <iswprint@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #118784	; 0x1d000
   110a4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a8 <__fxstat64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #118784	; 0x1d000
   110b0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110b4 <fwrite@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #118784	; 0x1d000
   110bc:	ldr	pc, [ip, #4012]!	; 0xfac

000110c0 <lseek64@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #118784	; 0x1d000
   110c8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110cc <__ctype_get_mb_cur_max@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #118784	; 0x1d000
   110d4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d8 <__fpending@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #118784	; 0x1d000
   110e0:	ldr	pc, [ip, #3988]!	; 0xf94

000110e4 <mbrtowc@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #118784	; 0x1d000
   110ec:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f0 <error@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #118784	; 0x1d000
   110f8:	ldr	pc, [ip, #3972]!	; 0xf84

000110fc <open64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #118784	; 0x1d000
   11104:	ldr	pc, [ip, #3964]!	; 0xf7c

00011108 <malloc@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #118784	; 0x1d000
   11110:	ldr	pc, [ip, #3956]!	; 0xf74

00011114 <__libc_start_main@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #118784	; 0x1d000
   1111c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011120 <__freading@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #118784	; 0x1d000
   11128:	ldr	pc, [ip, #3940]!	; 0xf64

0001112c <__gmon_start__@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #118784	; 0x1d000
   11134:	ldr	pc, [ip, #3932]!	; 0xf5c

00011138 <mempcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #118784	; 0x1d000
   11140:	ldr	pc, [ip, #3924]!	; 0xf54

00011144 <getopt_long@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #118784	; 0x1d000
   1114c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011150 <__ctype_b_loc@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #118784	; 0x1d000
   11158:	ldr	pc, [ip, #3908]!	; 0xf44

0001115c <exit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #118784	; 0x1d000
   11164:	ldr	pc, [ip, #3900]!	; 0xf3c

00011168 <strlen@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #118784	; 0x1d000
   11170:	ldr	pc, [ip, #3892]!	; 0xf34

00011174 <openat64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #118784	; 0x1d000
   1117c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011180 <__errno_location@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #118784	; 0x1d000
   11188:	ldr	pc, [ip, #3876]!	; 0xf24

0001118c <__cxa_atexit@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #118784	; 0x1d000
   11194:	ldr	pc, [ip, #3868]!	; 0xf1c

00011198 <memset@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #118784	; 0x1d000
   111a0:	ldr	pc, [ip, #3860]!	; 0xf14

000111a4 <__printf_chk@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #118784	; 0x1d000
   111ac:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b0 <fileno@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #118784	; 0x1d000
   111b8:	ldr	pc, [ip, #3844]!	; 0xf04

000111bc <__fprintf_chk@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #118784	; 0x1d000
   111c4:	ldr	pc, [ip, #3836]!	; 0xefc

000111c8 <fclose@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #118784	; 0x1d000
   111d0:	ldr	pc, [ip, #3828]!	; 0xef4

000111d4 <fseeko64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #118784	; 0x1d000
   111dc:	ldr	pc, [ip, #3820]!	; 0xeec

000111e0 <fcntl64@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #118784	; 0x1d000
   111e8:	ldr	pc, [ip, #3812]!	; 0xee4

000111ec <rpmatch@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #118784	; 0x1d000
   111f4:	ldr	pc, [ip, #3804]!	; 0xedc

000111f8 <__overflow@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #118784	; 0x1d000
   11200:	ldr	pc, [ip, #3796]!	; 0xed4

00011204 <setlocale@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #118784	; 0x1d000
   1120c:	ldr	pc, [ip, #3788]!	; 0xecc

00011210 <strrchr@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #118784	; 0x1d000
   11218:	ldr	pc, [ip, #3780]!	; 0xec4

0001121c <nl_langinfo@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #118784	; 0x1d000
   11224:	ldr	pc, [ip, #3772]!	; 0xebc

00011228 <readdir64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #118784	; 0x1d000
   11230:	ldr	pc, [ip, #3764]!	; 0xeb4

00011234 <fdopendir@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #118784	; 0x1d000
   1123c:	ldr	pc, [ip, #3756]!	; 0xeac

00011240 <dirfd@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #118784	; 0x1d000
   11248:	ldr	pc, [ip, #3748]!	; 0xea4

0001124c <fchdir@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #118784	; 0x1d000
   11254:	ldr	pc, [ip, #3740]!	; 0xe9c

00011258 <qsort@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #118784	; 0x1d000
   11260:	ldr	pc, [ip, #3732]!	; 0xe94

00011264 <bindtextdomain@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #118784	; 0x1d000
   1126c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011270 <__xstat64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #118784	; 0x1d000
   11278:	ldr	pc, [ip, #3716]!	; 0xe84

0001127c <isatty@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #118784	; 0x1d000
   11284:	ldr	pc, [ip, #3708]!	; 0xe7c

00011288 <strncmp@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3700]!	; 0xe74

00011294 <abort@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3692]!	; 0xe6c

000112a0 <close@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3684]!	; 0xe64

000112ac <__lxstat64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3676]!	; 0xe5c

000112b8 <dcngettext@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3668]!	; 0xe54

000112c4 <closedir@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3660]!	; 0xe4c

000112d0 <__assert_fail@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3652]!	; 0xe44

Disassembly of section .text:

000112e0 <.text>:
   112e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112e4:	mov	r5, r1
   112e8:	mov	r4, #0
   112ec:	strd	r6, [sp, #8]
   112f0:	mov	r7, r0
   112f4:	movw	r6, #55568	; 0xd910
   112f8:	movt	r6, #1
   112fc:	strd	r8, [sp, #16]
   11300:	movw	r9, #61848	; 0xf198
   11304:	movt	r9, #2
   11308:	strd	sl, [sp, #24]
   1130c:	movw	sl, #52868	; 0xce84
   11310:	movt	sl, #1
   11314:	str	lr, [sp, #32]
   11318:	sub	sp, sp, #164	; 0xa4
   1131c:	ldr	r0, [r1]
   11320:	mov	fp, r4
   11324:	add	r8, sl, #108	; 0x6c
   11328:	bl	17a88 <__assert_fail@plt+0x67b8>
   1132c:	movw	r1, #57420	; 0xe04c
   11330:	movt	r1, #1
   11334:	mov	r0, #6
   11338:	bl	11204 <setlocale@plt>
   1133c:	movw	r1, #55300	; 0xd804
   11340:	movt	r1, #1
   11344:	movw	r0, #55132	; 0xd75c
   11348:	movt	r0, #1
   1134c:	bl	11264 <bindtextdomain@plt>
   11350:	movw	r0, #55132	; 0xd75c
   11354:	movt	r0, #1
   11358:	bl	11078 <textdomain@plt>
   1135c:	movw	r0, #13628	; 0x353c
   11360:	movt	r0, #1
   11364:	bl	1ce60 <__assert_fail@plt+0xbb90>
   11368:	mov	r3, #4
   1136c:	mov	r0, r4
   11370:	strb	r4, [sp, #36]	; 0x24
   11374:	str	r3, [sp, #40]	; 0x28
   11378:	strh	r4, [sp, #44]	; 0x2c
   1137c:	strb	r4, [sp, #46]	; 0x2e
   11380:	str	r4, [sp, #48]	; 0x30
   11384:	strb	r4, [sp, #52]	; 0x34
   11388:	bl	1127c <isatty@plt>
   1138c:	subs	r0, r0, r4
   11390:	mov	r3, #1
   11394:	movne	r0, #1
   11398:	str	r3, [sp, #28]
   1139c:	strb	r0, [sp, #53]	; 0x35
   113a0:	strh	r4, [sp, #54]	; 0x36
   113a4:	mov	r4, #0
   113a8:	mov	r3, r8
   113ac:	mov	r2, r6
   113b0:	mov	r1, r5
   113b4:	mov	r0, r7
   113b8:	str	r4, [sp]
   113bc:	bl	11144 <getopt_long@plt>
   113c0:	cmn	r0, #1
   113c4:	beq	11634 <__assert_fail@plt+0x364>
   113c8:	cmp	r0, #105	; 0x69
   113cc:	beq	115cc <__assert_fail@plt+0x2fc>
   113d0:	ble	11424 <__assert_fail@plt+0x154>
   113d4:	movw	r3, #257	; 0x101
   113d8:	cmp	r0, r3
   113dc:	beq	11610 <__assert_fail@plt+0x340>
   113e0:	ble	11498 <__assert_fail@plt+0x1c8>
   113e4:	movw	r3, #259	; 0x103
   113e8:	cmp	r0, r3
   113ec:	beq	115e0 <__assert_fail@plt+0x310>
   113f0:	bge	11458 <__assert_fail@plt+0x188>
   113f4:	movw	r3, #61824	; 0xf180
   113f8:	movt	r3, #2
   113fc:	ldr	r3, [r3]
   11400:	movw	r1, #55340	; 0xd82c
   11404:	movt	r1, #1
   11408:	sub	r3, r3, #-1073741823	; 0xc0000001
   1140c:	ldr	r0, [r5, r3, lsl #2]
   11410:	bl	10fdc <strcmp@plt>
   11414:	cmp	r0, #0
   11418:	bne	11934 <__assert_fail@plt+0x664>
   1141c:	str	r0, [sp, #28]
   11420:	b	113a4 <__assert_fail@plt+0xd4>
   11424:	cmp	r0, #73	; 0x49
   11428:	beq	115ac <__assert_fail@plt+0x2dc>
   1142c:	ble	11530 <__assert_fail@plt+0x260>
   11430:	cmp	r0, #100	; 0x64
   11434:	beq	1161c <__assert_fail@plt+0x34c>
   11438:	cmp	r0, #102	; 0x66
   1143c:	bne	1151c <__assert_fail@plt+0x24c>
   11440:	mov	r3, #5
   11444:	mov	r2, #1
   11448:	mov	fp, r4
   1144c:	strb	r2, [sp, #36]	; 0x24
   11450:	str	r3, [sp, #40]	; 0x28
   11454:	b	113a4 <__assert_fail@plt+0xd4>
   11458:	cmp	r0, #260	; 0x104
   1145c:	bne	11474 <__assert_fail@plt+0x1a4>
   11460:	mov	r3, #1
   11464:	strb	r3, [sp, #53]	; 0x35
   11468:	b	113a4 <__assert_fail@plt+0xd4>
   1146c:	cmp	r0, #114	; 0x72
   11470:	beq	11524 <__assert_fail@plt+0x254>
   11474:	mov	r4, #1
   11478:	cmp	r7, r4
   1147c:	ble	11894 <__assert_fail@plt+0x5c4>
   11480:	ldr	r6, [r5, r4, lsl #2]
   11484:	ldrb	r3, [r6]
   11488:	cmp	r3, #45	; 0x2d
   1148c:	beq	11810 <__assert_fail@plt+0x540>
   11490:	add	r4, r4, #1
   11494:	b	11478 <__assert_fail@plt+0x1a8>
   11498:	cmp	r0, #118	; 0x76
   1149c:	beq	115c0 <__assert_fail@plt+0x2f0>
   114a0:	cmp	r0, #256	; 0x100
   114a4:	bne	1146c <__assert_fail@plt+0x19c>
   114a8:	ldr	r1, [r9]
   114ac:	cmp	r1, #0
   114b0:	beq	11508 <__assert_fail@plt+0x238>
   114b4:	movw	r0, #61744	; 0xf130
   114b8:	movt	r0, #2
   114bc:	ldr	r3, [pc, #1208]	; 1197c <__assert_fail@plt+0x6ac>
   114c0:	mov	r2, #1
   114c4:	mov	lr, #4
   114c8:	ldr	ip, [r0]
   114cc:	movw	r0, #55324	; 0xd81c
   114d0:	movt	r0, #1
   114d4:	str	lr, [sp]
   114d8:	str	ip, [sp, #4]
   114dc:	str	r2, [sp, #8]
   114e0:	add	r2, r3, #24
   114e4:	bl	132b8 <__assert_fail@plt+0x1fe8>
   114e8:	add	r0, sl, r0, lsl #2
   114ec:	ldr	r3, [r0, #56]	; 0x38
   114f0:	cmp	r3, #1
   114f4:	beq	11684 <__assert_fail@plt+0x3b4>
   114f8:	cmp	r3, #0
   114fc:	beq	11674 <__assert_fail@plt+0x3a4>
   11500:	cmp	r3, #2
   11504:	bne	113a4 <__assert_fail@plt+0xd4>
   11508:	mov	r3, #3
   1150c:	mov	fp, #0
   11510:	strb	fp, [sp, #36]	; 0x24
   11514:	str	r3, [sp, #40]	; 0x28
   11518:	b	113a4 <__assert_fail@plt+0xd4>
   1151c:	cmp	r0, #82	; 0x52
   11520:	bne	11474 <__assert_fail@plt+0x1a4>
   11524:	mov	r3, #1
   11528:	strb	r3, [sp, #45]	; 0x2d
   1152c:	b	113a4 <__assert_fail@plt+0xd4>
   11530:	cmn	r0, #3
   11534:	bne	1159c <__assert_fail@plt+0x2cc>
   11538:	movw	r2, #55464	; 0xd8a8
   1153c:	movt	r2, #1
   11540:	movw	r3, #55480	; 0xd8b8
   11544:	movt	r3, #1
   11548:	movw	r1, #55500	; 0xd8cc
   1154c:	movt	r1, #1
   11550:	str	r4, [sp, #16]
   11554:	movw	r0, #61844	; 0xf194
   11558:	movt	r0, #2
   1155c:	str	r2, [sp, #12]
   11560:	movw	r2, #55516	; 0xd8dc
   11564:	movt	r2, #1
   11568:	stmib	sp, {r1, r3}
   1156c:	movw	r3, #61740	; 0xf12c
   11570:	movt	r3, #2
   11574:	movw	r1, #53176	; 0xcfb8
   11578:	movt	r1, #1
   1157c:	str	r2, [sp]
   11580:	movw	r2, #55128	; 0xd758
   11584:	movt	r2, #1
   11588:	ldr	r0, [r0]
   1158c:	ldr	r3, [r3]
   11590:	bl	1bb74 <__assert_fail@plt+0xa8a4>
   11594:	mov	r0, r4
   11598:	bl	1115c <exit@plt>
   1159c:	cmn	r0, #2
   115a0:	bne	11474 <__assert_fail@plt+0x1a4>
   115a4:	mov	r0, r4
   115a8:	bl	11a74 <__assert_fail@plt+0x7a4>
   115ac:	mov	r3, #4
   115b0:	mov	fp, #1
   115b4:	strb	r4, [sp, #36]	; 0x24
   115b8:	str	r3, [sp, #40]	; 0x28
   115bc:	b	113a4 <__assert_fail@plt+0xd4>
   115c0:	mov	r3, #1
   115c4:	strb	r3, [sp, #54]	; 0x36
   115c8:	b	113a4 <__assert_fail@plt+0xd4>
   115cc:	mov	r3, #3
   115d0:	mov	fp, r4
   115d4:	strb	r4, [sp, #36]	; 0x24
   115d8:	str	r3, [sp, #40]	; 0x28
   115dc:	b	113a4 <__assert_fail@plt+0xd4>
   115e0:	ldr	r0, [r9]
   115e4:	cmp	r0, #0
   115e8:	beq	11628 <__assert_fail@plt+0x358>
   115ec:	movw	r1, #55416	; 0xd878
   115f0:	movt	r1, #1
   115f4:	bl	10fdc <strcmp@plt>
   115f8:	cmp	r0, #0
   115fc:	bne	11958 <__assert_fail@plt+0x688>
   11600:	mov	r3, #1
   11604:	str	r3, [sp, #28]
   11608:	strb	r3, [sp, #52]	; 0x34
   1160c:	b	113a4 <__assert_fail@plt+0xd4>
   11610:	mov	r3, #1
   11614:	strb	r3, [sp, #44]	; 0x2c
   11618:	b	113a4 <__assert_fail@plt+0xd4>
   1161c:	mov	r3, #1
   11620:	strb	r3, [sp, #46]	; 0x2e
   11624:	b	113a4 <__assert_fail@plt+0xd4>
   11628:	mov	r3, #1
   1162c:	str	r3, [sp, #28]
   11630:	b	113a4 <__assert_fail@plt+0xd4>
   11634:	movw	r4, #61824	; 0xf180
   11638:	movt	r4, #2
   1163c:	ldr	r3, [r4]
   11640:	cmp	r3, r7
   11644:	blt	11698 <__assert_fail@plt+0x3c8>
   11648:	ldrb	r4, [sp, #36]	; 0x24
   1164c:	cmp	r4, #0
   11650:	beq	1190c <__assert_fail@plt+0x63c>
   11654:	mov	r0, #0
   11658:	add	sp, sp, #164	; 0xa4
   1165c:	ldrd	r4, [sp]
   11660:	ldrd	r6, [sp, #8]
   11664:	ldrd	r8, [sp, #16]
   11668:	ldrd	sl, [sp, #24]
   1166c:	add	sp, sp, #32
   11670:	pop	{pc}		; (ldr pc, [sp], #4)
   11674:	mov	r3, #5
   11678:	mov	fp, #0
   1167c:	str	r3, [sp, #40]	; 0x28
   11680:	b	113a4 <__assert_fail@plt+0xd4>
   11684:	mov	fp, r3
   11688:	mov	r3, #4
   1168c:	strb	r4, [sp, #36]	; 0x24
   11690:	str	r3, [sp, #40]	; 0x28
   11694:	b	113a4 <__assert_fail@plt+0xd4>
   11698:	ldrb	r3, [sp, #45]	; 0x2d
   1169c:	ldr	r2, [sp, #28]
   116a0:	tst	r2, r3
   116a4:	bne	1189c <__assert_fail@plt+0x5cc>
   116a8:	ldr	r3, [r4]
   116ac:	cmp	fp, #0
   116b0:	add	r6, r5, r3, lsl #2
   116b4:	beq	11768 <__assert_fail@plt+0x498>
   116b8:	ldrb	r2, [sp, #45]	; 0x2d
   116bc:	sub	r7, r7, r3
   116c0:	mov	r4, r7
   116c4:	asr	r5, r7, #31
   116c8:	cmp	r2, #0
   116cc:	bne	117a8 <__assert_fail@plt+0x4d8>
   116d0:	cmp	r5, #0
   116d4:	cmpeq	r7, #3
   116d8:	bls	11768 <__assert_fail@plt+0x498>
   116dc:	mov	r1, #0
   116e0:	mvn	r0, #0
   116e4:	cmp	r5, r1
   116e8:	movw	r3, #61832	; 0xf188
   116ec:	movt	r3, #2
   116f0:	cmpeq	r7, r0
   116f4:	ldr	r8, [r3]
   116f8:	bls	118fc <__assert_fail@plt+0x62c>
   116fc:	movw	r2, #16960	; 0x4240
   11700:	movt	r2, #15
   11704:	mov	r3, #0
   11708:	mov	r0, r4
   1170c:	mov	r1, r5
   11710:	bl	1cc88 <__assert_fail@plt+0xb9b8>
   11714:	add	r3, r2, #999424	; 0xf4000
   11718:	add	r3, r3, #576	; 0x240
   1171c:	mov	r0, #5
   11720:	movw	r2, #55708	; 0xd99c
   11724:	movt	r2, #1
   11728:	movw	r1, #55736	; 0xd9b8
   1172c:	movt	r1, #1
   11730:	str	r0, [sp]
   11734:	mov	r0, #0
   11738:	bl	112b8 <dcngettext@plt>
   1173c:	mov	r2, r0
   11740:	movw	r3, #61884	; 0xf1bc
   11744:	movt	r3, #2
   11748:	strd	r4, [sp]
   1174c:	mov	r1, #1
   11750:	mov	r0, r8
   11754:	ldr	r3, [r3]
   11758:	bl	111bc <__fprintf_chk@plt>
   1175c:	bl	1c460 <__assert_fail@plt+0xb190>
   11760:	cmp	r0, #0
   11764:	beq	11654 <__assert_fail@plt+0x384>
   11768:	mov	r0, r6
   1176c:	add	r1, sp, #36	; 0x24
   11770:	bl	1260c <__assert_fail@plt+0x133c>
   11774:	sub	r3, r0, #2
   11778:	cmp	r3, #2
   1177c:	subls	r0, r0, #4
   11780:	clzls	r0, r0
   11784:	lsrls	r0, r0, #5
   11788:	bls	11658 <__assert_fail@plt+0x388>
   1178c:	movw	r1, #55764	; 0xd9d4
   11790:	movt	r1, #1
   11794:	ldr	r3, [pc, #484]	; 11980 <__assert_fail@plt+0x6b0>
   11798:	movw	r0, #55776	; 0xd9e0
   1179c:	movt	r0, #1
   117a0:	movw	r2, #371	; 0x173
   117a4:	bl	112d0 <__assert_fail@plt>
   117a8:	mov	r1, #0
   117ac:	mvn	r0, #0
   117b0:	cmp	r5, r1
   117b4:	movw	r3, #61832	; 0xf188
   117b8:	movt	r3, #2
   117bc:	cmpeq	r7, r0
   117c0:	ldr	r8, [r3]
   117c4:	bls	11904 <__assert_fail@plt+0x634>
   117c8:	movw	r2, #16960	; 0x4240
   117cc:	movt	r2, #15
   117d0:	mov	r3, #0
   117d4:	mov	r0, r4
   117d8:	mov	r1, r5
   117dc:	bl	1cc88 <__assert_fail@plt+0xb9b8>
   117e0:	add	r3, r2, #999424	; 0xf4000
   117e4:	add	r3, r3, #576	; 0x240
   117e8:	mov	r0, #5
   117ec:	movw	r2, #55628	; 0xd94c
   117f0:	movt	r2, #1
   117f4:	movw	r1, #55668	; 0xd974
   117f8:	movt	r1, #1
   117fc:	str	r0, [sp]
   11800:	mov	r0, #0
   11804:	bl	112b8 <dcngettext@plt>
   11808:	mov	r2, r0
   1180c:	b	11740 <__assert_fail@plt+0x470>
   11810:	ldrb	r3, [r6, #1]
   11814:	cmp	r3, #0
   11818:	beq	11490 <__assert_fail@plt+0x1c0>
   1181c:	add	r2, sp, #56	; 0x38
   11820:	mov	r1, r6
   11824:	mov	r0, #3
   11828:	bl	112ac <__lxstat64@plt>
   1182c:	cmp	r0, #0
   11830:	bne	11490 <__assert_fail@plt+0x1c0>
   11834:	mov	r2, #5
   11838:	movw	r3, #61832	; 0xf188
   1183c:	movt	r3, #2
   11840:	movw	r1, #55528	; 0xd8e8
   11844:	movt	r1, #1
   11848:	ldr	r4, [r3]
   1184c:	bl	11060 <dcgettext@plt>
   11850:	ldr	r8, [r5]
   11854:	mov	r2, r6
   11858:	mov	r7, r0
   1185c:	mov	r1, #3
   11860:	mov	r0, #1
   11864:	bl	19ff0 <__assert_fail@plt+0x8d20>
   11868:	mov	r5, r0
   1186c:	mov	r1, r6
   11870:	mov	r0, #4
   11874:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   11878:	mov	r3, r8
   1187c:	mov	r2, r7
   11880:	str	r5, [sp]
   11884:	mov	r1, #1
   11888:	str	r0, [sp, #4]
   1188c:	mov	r0, r4
   11890:	bl	111bc <__fprintf_chk@plt>
   11894:	mov	r0, #1
   11898:	bl	11a74 <__assert_fail@plt+0x7a4>
   1189c:	movw	r0, #61856	; 0xf1a0
   118a0:	movt	r0, #2
   118a4:	bl	1b58c <__assert_fail@plt+0xa2bc>
   118a8:	cmp	r0, #0
   118ac:	mov	r6, r0
   118b0:	str	r0, [sp, #48]	; 0x30
   118b4:	bne	116a8 <__assert_fail@plt+0x3d8>
   118b8:	bl	11180 <__errno_location@plt>
   118bc:	movw	r1, #55592	; 0xd928
   118c0:	movt	r1, #1
   118c4:	ldr	r4, [r0]
   118c8:	mov	r2, #5
   118cc:	mov	r0, r6
   118d0:	bl	11060 <dcgettext@plt>
   118d4:	mov	r5, r0
   118d8:	movw	r1, #55624	; 0xd948
   118dc:	movt	r1, #1
   118e0:	mov	r0, #4
   118e4:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   118e8:	mov	r3, r0
   118ec:	mov	r2, r5
   118f0:	mov	r1, r4
   118f4:	mov	r0, #1
   118f8:	bl	110f0 <error@plt>
   118fc:	mov	r3, r7
   11900:	b	1171c <__assert_fail@plt+0x44c>
   11904:	mov	r3, r7
   11908:	b	117e8 <__assert_fail@plt+0x518>
   1190c:	mov	r2, #5
   11910:	mov	r0, r4
   11914:	movw	r1, #55576	; 0xd918
   11918:	movt	r1, #1
   1191c:	bl	11060 <dcgettext@plt>
   11920:	mov	r2, r0
   11924:	mov	r1, r4
   11928:	mov	r0, r4
   1192c:	bl	110f0 <error@plt>
   11930:	b	11894 <__assert_fail@plt+0x5c4>
   11934:	mov	r2, #5
   11938:	movw	r1, #55360	; 0xd840
   1193c:	movt	r1, #1
   11940:	mov	r0, r4
   11944:	bl	11060 <dcgettext@plt>
   11948:	mov	r2, r0
   1194c:	mov	r1, r4
   11950:	mov	r0, #1
   11954:	bl	110f0 <error@plt>
   11958:	movw	r1, #55420	; 0xd87c
   1195c:	movt	r1, #1
   11960:	mov	r2, #5
   11964:	mov	r0, r4
   11968:	bl	11060 <dcgettext@plt>
   1196c:	mov	r5, r0
   11970:	mov	r0, #4
   11974:	ldr	r1, [r9]
   11978:	b	118e4 <__assert_fail@plt+0x614>
   1197c:			; <UNDEFINED> instruction: 0x0001cebc
   11980:			; <UNDEFINED> instruction: 0x0001cfb0
   11984:	mov	fp, #0
   11988:	mov	lr, #0
   1198c:	pop	{r1}		; (ldr r1, [sp], #4)
   11990:	mov	r2, sp
   11994:	push	{r2}		; (str r2, [sp, #-4]!)
   11998:	push	{r0}		; (str r0, [sp, #-4]!)
   1199c:	ldr	ip, [pc, #16]	; 119b4 <__assert_fail@plt+0x6e4>
   119a0:	push	{ip}		; (str ip, [sp, #-4]!)
   119a4:	ldr	r0, [pc, #12]	; 119b8 <__assert_fail@plt+0x6e8>
   119a8:	ldr	r3, [pc, #12]	; 119bc <__assert_fail@plt+0x6ec>
   119ac:	bl	11114 <__libc_start_main@plt>
   119b0:	bl	11294 <abort@plt>
   119b4:	andeq	ip, r1, ip, asr lr
   119b8:	andeq	r1, r1, r0, ror #5
   119bc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   119c0:	ldr	r3, [pc, #20]	; 119dc <__assert_fail@plt+0x70c>
   119c4:	ldr	r2, [pc, #20]	; 119e0 <__assert_fail@plt+0x710>
   119c8:	add	r3, pc, r3
   119cc:	ldr	r2, [r3, r2]
   119d0:	cmp	r2, #0
   119d4:	bxeq	lr
   119d8:	b	1112c <__gmon_start__@plt>
   119dc:	andeq	sp, r1, r0, lsr r6
   119e0:	andeq	r0, r0, r0, lsr #2
   119e4:	ldr	r0, [pc, #24]	; 11a04 <__assert_fail@plt+0x734>
   119e8:	ldr	r3, [pc, #24]	; 11a08 <__assert_fail@plt+0x738>
   119ec:	cmp	r3, r0
   119f0:	bxeq	lr
   119f4:	ldr	r3, [pc, #16]	; 11a0c <__assert_fail@plt+0x73c>
   119f8:	cmp	r3, #0
   119fc:	bxeq	lr
   11a00:	bx	r3
   11a04:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   11a08:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   11a0c:	andeq	r0, r0, r0
   11a10:	ldr	r0, [pc, #36]	; 11a3c <__assert_fail@plt+0x76c>
   11a14:	ldr	r1, [pc, #36]	; 11a40 <__assert_fail@plt+0x770>
   11a18:	sub	r1, r1, r0
   11a1c:	asr	r1, r1, #2
   11a20:	add	r1, r1, r1, lsr #31
   11a24:	asrs	r1, r1, #1
   11a28:	bxeq	lr
   11a2c:	ldr	r3, [pc, #16]	; 11a44 <__assert_fail@plt+0x774>
   11a30:	cmp	r3, #0
   11a34:	bxeq	lr
   11a38:	bx	r3
   11a3c:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   11a40:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   11a44:	andeq	r0, r0, r0
   11a48:	push	{r4, lr}
   11a4c:	ldr	r4, [pc, #24]	; 11a6c <__assert_fail@plt+0x79c>
   11a50:	ldrb	r3, [r4]
   11a54:	cmp	r3, #0
   11a58:	popne	{r4, pc}
   11a5c:	bl	119e4 <__assert_fail@plt+0x714>
   11a60:	mov	r3, #1
   11a64:	strb	r3, [r4]
   11a68:	pop	{r4, pc}
   11a6c:	muleq	r2, ip, r1
   11a70:	b	11a10 <__assert_fail@plt+0x740>
   11a74:	subs	r6, r0, #0
   11a78:	str	r7, [sp, #-8]!
   11a7c:	str	lr, [sp, #4]
   11a80:	sub	sp, sp, #56	; 0x38
   11a84:	beq	11acc <__assert_fail@plt+0x7fc>
   11a88:	movw	r3, #61832	; 0xf188
   11a8c:	movt	r3, #2
   11a90:	ldr	r4, [r3]
   11a94:	mov	r2, #5
   11a98:	movw	r1, #53180	; 0xcfbc
   11a9c:	movt	r1, #1
   11aa0:	mov	r0, #0
   11aa4:	bl	11060 <dcgettext@plt>
   11aa8:	movw	r3, #61884	; 0xf1bc
   11aac:	movt	r3, #2
   11ab0:	mov	r2, r0
   11ab4:	mov	r1, #1
   11ab8:	ldr	r3, [r3]
   11abc:	mov	r0, r4
   11ac0:	bl	111bc <__fprintf_chk@plt>
   11ac4:	mov	r0, r6
   11ac8:	bl	1115c <exit@plt>
   11acc:	mov	r2, #5
   11ad0:	movw	r1, #53220	; 0xcfe4
   11ad4:	movt	r1, #1
   11ad8:	movw	r4, #61884	; 0xf1bc
   11adc:	movt	r4, #2
   11ae0:	movw	r7, #61844	; 0xf194
   11ae4:	movt	r7, #2
   11ae8:	bl	11060 <dcgettext@plt>
   11aec:	mov	r1, r0
   11af0:	mov	r0, #1
   11af4:	ldr	r2, [r4]
   11af8:	bl	111a4 <__printf_chk@plt>
   11afc:	mov	r2, #5
   11b00:	movw	r1, #53256	; 0xd008
   11b04:	movt	r1, #1
   11b08:	mov	r0, r6
   11b0c:	bl	11060 <dcgettext@plt>
   11b10:	ldr	r1, [r7]
   11b14:	bl	10fb8 <fputs_unlocked@plt>
   11b18:	mov	r2, #5
   11b1c:	movw	r1, #53416	; 0xd0a8
   11b20:	movt	r1, #1
   11b24:	mov	r0, r6
   11b28:	bl	11060 <dcgettext@plt>
   11b2c:	ldr	r1, [r7]
   11b30:	bl	10fb8 <fputs_unlocked@plt>
   11b34:	mov	r2, #5
   11b38:	movw	r1, #53792	; 0xd220
   11b3c:	movt	r1, #1
   11b40:	mov	r0, r6
   11b44:	bl	11060 <dcgettext@plt>
   11b48:	ldr	r1, [r7]
   11b4c:	bl	10fb8 <fputs_unlocked@plt>
   11b50:	mov	r2, #5
   11b54:	movw	r1, #54016	; 0xd300
   11b58:	movt	r1, #1
   11b5c:	mov	r0, r6
   11b60:	bl	11060 <dcgettext@plt>
   11b64:	ldr	r1, [r7]
   11b68:	bl	10fb8 <fputs_unlocked@plt>
   11b6c:	mov	r2, #5
   11b70:	movw	r1, #54272	; 0xd400
   11b74:	movt	r1, #1
   11b78:	mov	r0, r6
   11b7c:	bl	11060 <dcgettext@plt>
   11b80:	ldr	r1, [r7]
   11b84:	bl	10fb8 <fputs_unlocked@plt>
   11b88:	mov	r2, #5
   11b8c:	movw	r1, #54448	; 0xd4b0
   11b90:	movt	r1, #1
   11b94:	mov	r0, r6
   11b98:	bl	11060 <dcgettext@plt>
   11b9c:	ldr	r1, [r7]
   11ba0:	bl	10fb8 <fputs_unlocked@plt>
   11ba4:	mov	r2, #5
   11ba8:	movw	r1, #54496	; 0xd4e0
   11bac:	movt	r1, #1
   11bb0:	mov	r0, r6
   11bb4:	bl	11060 <dcgettext@plt>
   11bb8:	ldr	r1, [r7]
   11bbc:	bl	10fb8 <fputs_unlocked@plt>
   11bc0:	mov	r2, #5
   11bc4:	movw	r1, #54552	; 0xd518
   11bc8:	movt	r1, #1
   11bcc:	mov	r0, r6
   11bd0:	bl	11060 <dcgettext@plt>
   11bd4:	ldr	r1, [r7]
   11bd8:	bl	10fb8 <fputs_unlocked@plt>
   11bdc:	mov	r2, #5
   11be0:	movw	r1, #54708	; 0xd5b4
   11be4:	movt	r1, #1
   11be8:	mov	r0, r6
   11bec:	bl	11060 <dcgettext@plt>
   11bf0:	ldr	r3, [r4]
   11bf4:	mov	r1, r0
   11bf8:	mov	r0, #1
   11bfc:	mov	r2, r3
   11c00:	bl	111a4 <__printf_chk@plt>
   11c04:	mov	r2, #5
   11c08:	movw	r1, #54832	; 0xd630
   11c0c:	movt	r1, #1
   11c10:	mov	r0, r6
   11c14:	bl	11060 <dcgettext@plt>
   11c18:	ldr	r1, [r7]
   11c1c:	bl	10fb8 <fputs_unlocked@plt>
   11c20:	movw	lr, #52868	; 0xce84
   11c24:	movt	lr, #1
   11c28:	ldr	ip, [lr]
   11c2c:	ldr	r4, [lr, #4]
   11c30:	ldrd	r8, [lr, #8]
   11c34:	subs	r1, ip, #0
   11c38:	str	ip, [sp]
   11c3c:	ldrd	r2, [lr, #16]
   11c40:	str	r4, [sp, #4]
   11c44:	ldrd	r4, [lr, #24]
   11c48:	strd	r8, [sp, #8]
   11c4c:	ldrd	r8, [lr, #32]
   11c50:	strd	r2, [sp, #16]
   11c54:	ldrd	r2, [lr, #40]	; 0x28
   11c58:	strd	r4, [sp, #24]
   11c5c:	ldrd	r4, [lr, #48]	; 0x30
   11c60:	strd	r8, [sp, #32]
   11c64:	strd	r2, [sp, #40]	; 0x28
   11c68:	strd	r4, [sp, #48]	; 0x30
   11c6c:	movwne	r5, #53176	; 0xcfb8
   11c70:	mov	r4, sp
   11c74:	movtne	r5, #1
   11c78:	bne	11d70 <__assert_fail@plt+0xaa0>
   11c7c:	ldr	r4, [r4, #4]
   11c80:	movw	r1, #55064	; 0xd718
   11c84:	movt	r1, #1
   11c88:	mov	r2, #5
   11c8c:	cmp	r4, #0
   11c90:	beq	11d84 <__assert_fail@plt+0xab4>
   11c94:	mov	r0, #0
   11c98:	bl	11060 <dcgettext@plt>
   11c9c:	mov	r1, r0
   11ca0:	movw	r3, #55088	; 0xd730
   11ca4:	movt	r3, #1
   11ca8:	movw	r2, #55128	; 0xd758
   11cac:	movt	r2, #1
   11cb0:	mov	r0, #1
   11cb4:	bl	111a4 <__printf_chk@plt>
   11cb8:	mov	r1, #0
   11cbc:	mov	r0, #5
   11cc0:	bl	11204 <setlocale@plt>
   11cc4:	cmp	r0, #0
   11cc8:	movweq	r5, #53176	; 0xcfb8
   11ccc:	movteq	r5, #1
   11cd0:	beq	11cf4 <__assert_fail@plt+0xa24>
   11cd4:	movw	r1, #55144	; 0xd768
   11cd8:	movt	r1, #1
   11cdc:	mov	r2, #3
   11ce0:	movw	r5, #53176	; 0xcfb8
   11ce4:	movt	r5, #1
   11ce8:	bl	11288 <strncmp@plt>
   11cec:	cmp	r0, #0
   11cf0:	bne	11e3c <__assert_fail@plt+0xb6c>
   11cf4:	mov	r2, #5
   11cf8:	movw	r1, #55220	; 0xd7b4
   11cfc:	movt	r1, #1
   11d00:	mov	r0, #0
   11d04:	bl	11060 <dcgettext@plt>
   11d08:	mov	r1, r0
   11d0c:	movw	r3, #53176	; 0xcfb8
   11d10:	movt	r3, #1
   11d14:	movw	r2, #55088	; 0xd730
   11d18:	movt	r2, #1
   11d1c:	mov	r0, #1
   11d20:	bl	111a4 <__printf_chk@plt>
   11d24:	mov	r2, #5
   11d28:	movw	r1, #55248	; 0xd7d0
   11d2c:	movt	r1, #1
   11d30:	mov	r0, #0
   11d34:	bl	11060 <dcgettext@plt>
   11d38:	movw	r2, #55808	; 0xda00
   11d3c:	movt	r2, #1
   11d40:	cmp	r4, r5
   11d44:	movw	r3, #57420	; 0xe04c
   11d48:	movt	r3, #1
   11d4c:	mov	r1, r0
   11d50:	moveq	r3, r2
   11d54:	mov	r2, r4
   11d58:	mov	r0, #1
   11d5c:	bl	111a4 <__printf_chk@plt>
   11d60:	b	11ac4 <__assert_fail@plt+0x7f4>
   11d64:	ldr	r1, [r4, #8]!
   11d68:	cmp	r1, #0
   11d6c:	beq	11c7c <__assert_fail@plt+0x9ac>
   11d70:	mov	r0, r5
   11d74:	bl	10fdc <strcmp@plt>
   11d78:	cmp	r0, #0
   11d7c:	bne	11d64 <__assert_fail@plt+0xa94>
   11d80:	b	11c7c <__assert_fail@plt+0x9ac>
   11d84:	mov	r0, r4
   11d88:	bl	11060 <dcgettext@plt>
   11d8c:	mov	r1, r0
   11d90:	movw	r3, #55088	; 0xd730
   11d94:	movt	r3, #1
   11d98:	movw	r2, #55128	; 0xd758
   11d9c:	movt	r2, #1
   11da0:	mov	r0, #1
   11da4:	bl	111a4 <__printf_chk@plt>
   11da8:	mov	r1, r4
   11dac:	mov	r0, #5
   11db0:	bl	11204 <setlocale@plt>
   11db4:	cmp	r0, #0
   11db8:	beq	11dd4 <__assert_fail@plt+0xb04>
   11dbc:	movw	r1, #55144	; 0xd768
   11dc0:	movt	r1, #1
   11dc4:	mov	r2, #3
   11dc8:	bl	11288 <strncmp@plt>
   11dcc:	cmp	r0, #0
   11dd0:	bne	11e30 <__assert_fail@plt+0xb60>
   11dd4:	mov	r2, #5
   11dd8:	movw	r1, #55220	; 0xd7b4
   11ddc:	movt	r1, #1
   11de0:	mov	r0, #0
   11de4:	bl	11060 <dcgettext@plt>
   11de8:	mov	r1, r0
   11dec:	movw	r3, #53176	; 0xcfb8
   11df0:	movt	r3, #1
   11df4:	movw	r2, #55088	; 0xd730
   11df8:	movt	r2, #1
   11dfc:	mov	r0, #1
   11e00:	bl	111a4 <__printf_chk@plt>
   11e04:	movw	r1, #55248	; 0xd7d0
   11e08:	movt	r1, #1
   11e0c:	mov	r2, #5
   11e10:	mov	r0, #0
   11e14:	bl	11060 <dcgettext@plt>
   11e18:	movw	r4, #53176	; 0xcfb8
   11e1c:	movt	r4, #1
   11e20:	movw	r3, #55808	; 0xda00
   11e24:	movt	r3, #1
   11e28:	mov	r1, r0
   11e2c:	b	11d54 <__assert_fail@plt+0xa84>
   11e30:	movw	r5, #53176	; 0xcfb8
   11e34:	movt	r5, #1
   11e38:	mov	r4, r5
   11e3c:	mov	r2, #5
   11e40:	movw	r1, #55148	; 0xd76c
   11e44:	movt	r1, #1
   11e48:	mov	r0, #0
   11e4c:	bl	11060 <dcgettext@plt>
   11e50:	ldr	r1, [r7]
   11e54:	bl	10fb8 <fputs_unlocked@plt>
   11e58:	b	11cf4 <__assert_fail@plt+0xa24>
   11e5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11e60:	subs	r4, r3, #0
   11e64:	mov	r5, r1
   11e68:	ldr	r1, [r1, #24]
   11e6c:	strd	r6, [sp, #8]
   11e70:	mov	r7, r2
   11e74:	mov	r6, r0
   11e78:	movne	r2, #512	; 0x200
   11e7c:	moveq	r2, #0
   11e80:	str	r8, [sp, #16]
   11e84:	str	lr, [sp, #20]
   11e88:	sub	sp, sp, #112	; 0x70
   11e8c:	ldr	r0, [r0]
   11e90:	bl	10ff4 <unlinkat@plt>
   11e94:	cmp	r0, #0
   11e98:	beq	11f7c <__assert_fail@plt+0xcac>
   11e9c:	bl	11180 <__errno_location@plt>
   11ea0:	ldr	r4, [r0]
   11ea4:	mov	r8, r0
   11ea8:	cmp	r4, #30
   11eac:	beq	1202c <__assert_fail@plt+0xd5c>
   11eb0:	ldrb	r3, [r7]
   11eb4:	cmp	r3, #0
   11eb8:	beq	11ed8 <__assert_fail@plt+0xc08>
   11ebc:	cmp	r4, #20
   11ec0:	beq	11f88 <__assert_fail@plt+0xcb8>
   11ec4:	ble	11f90 <__assert_fail@plt+0xcc0>
   11ec8:	cmp	r4, #22
   11ecc:	beq	11f88 <__assert_fail@plt+0xcb8>
   11ed0:	cmp	r4, #84	; 0x54
   11ed4:	beq	11f88 <__assert_fail@plt+0xcb8>
   11ed8:	ldrh	r3, [r5, #56]	; 0x38
   11edc:	cmp	r3, #4
   11ee0:	beq	11fec <__assert_fail@plt+0xd1c>
   11ee4:	mov	r2, #5
   11ee8:	movw	r1, #56120	; 0xdb38
   11eec:	movt	r1, #1
   11ef0:	mov	r0, #0
   11ef4:	bl	11060 <dcgettext@plt>
   11ef8:	mov	r6, r0
   11efc:	mov	r0, #4
   11f00:	ldr	r1, [r5, #28]
   11f04:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   11f08:	mov	r3, r0
   11f0c:	mov	r2, r6
   11f10:	mov	r1, r4
   11f14:	mov	r0, #0
   11f18:	bl	110f0 <error@plt>
   11f1c:	ldr	r3, [r5, #4]
   11f20:	ldr	r2, [r3, #48]	; 0x30
   11f24:	cmp	r2, #0
   11f28:	blt	11f60 <__assert_fail@plt+0xc90>
   11f2c:	ldr	r2, [r3, #16]
   11f30:	cmp	r2, #0
   11f34:	bne	11f60 <__assert_fail@plt+0xc90>
   11f38:	mov	r1, #1
   11f3c:	b	11f4c <__assert_fail@plt+0xc7c>
   11f40:	ldr	r2, [r3, #16]
   11f44:	cmp	r2, #0
   11f48:	bne	11f60 <__assert_fail@plt+0xc90>
   11f4c:	str	r1, [r3, #16]
   11f50:	ldr	r3, [r3, #4]
   11f54:	ldr	r2, [r3, #48]	; 0x30
   11f58:	cmp	r2, #0
   11f5c:	bge	11f40 <__assert_fail@plt+0xc70>
   11f60:	mov	r0, #4
   11f64:	add	sp, sp, #112	; 0x70
   11f68:	ldrd	r4, [sp]
   11f6c:	ldrd	r6, [sp, #8]
   11f70:	ldr	r8, [sp, #16]
   11f74:	add	sp, sp, #20
   11f78:	pop	{pc}		; (ldr pc, [sp], #4)
   11f7c:	ldrb	r3, [r7, #18]
   11f80:	cmp	r3, #0
   11f84:	bne	11fa8 <__assert_fail@plt+0xcd8>
   11f88:	mov	r0, #2
   11f8c:	b	11f64 <__assert_fail@plt+0xc94>
   11f90:	cmp	r4, #2
   11f94:	beq	11f88 <__assert_fail@plt+0xcb8>
   11f98:	ldrh	r3, [r5, #56]	; 0x38
   11f9c:	cmp	r3, #4
   11fa0:	bne	11ee4 <__assert_fail@plt+0xc14>
   11fa4:	b	11fec <__assert_fail@plt+0xd1c>
   11fa8:	cmp	r4, #0
   11fac:	mov	r2, #5
   11fb0:	movwne	r1, #56084	; 0xdb14
   11fb4:	movweq	r1, #56108	; 0xdb2c
   11fb8:	movtne	r1, #1
   11fbc:	movteq	r1, #1
   11fc0:	bl	11060 <dcgettext@plt>
   11fc4:	mov	r4, r0
   11fc8:	mov	r0, #4
   11fcc:	ldr	r1, [r5, #28]
   11fd0:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   11fd4:	mov	r2, r0
   11fd8:	mov	r1, r4
   11fdc:	mov	r0, #1
   11fe0:	bl	111a4 <__printf_chk@plt>
   11fe4:	mov	r0, #2
   11fe8:	b	11f64 <__assert_fail@plt+0xc94>
   11fec:	cmp	r4, #17
   11ff0:	cmpne	r4, #39	; 0x27
   11ff4:	sub	r2, r4, #20
   11ff8:	moveq	r3, #1
   11ffc:	movne	r3, #0
   12000:	cmp	r2, #1
   12004:	orrls	r3, r3, #1
   12008:	cmp	r3, #0
   1200c:	moveq	r0, r4
   12010:	beq	12074 <__assert_fail@plt+0xda4>
   12014:	ldr	r3, [r5, #32]
   12018:	cmp	r3, #13
   1201c:	cmpne	r3, #1
   12020:	moveq	r4, r3
   12024:	streq	r3, [r8]
   12028:	b	11ee4 <__assert_fail@plt+0xc14>
   1202c:	mov	r2, #256	; 0x100
   12030:	add	r3, sp, #8
   12034:	ldr	r1, [r6]
   12038:	mov	r0, #3
   1203c:	str	r2, [sp]
   12040:	ldr	r2, [r5, #24]
   12044:	bl	11090 <__fxstatat64@plt>
   12048:	cmp	r0, #0
   1204c:	beq	1205c <__assert_fail@plt+0xd8c>
   12050:	ldr	r0, [r8]
   12054:	cmp	r0, #2
   12058:	beq	12068 <__assert_fail@plt+0xd98>
   1205c:	mov	r3, #30
   12060:	str	r3, [r8]
   12064:	b	11ee4 <__assert_fail@plt+0xc14>
   12068:	ldrb	r3, [r7]
   1206c:	cmp	r3, #0
   12070:	bne	11f64 <__assert_fail@plt+0xc94>
   12074:	mov	r4, r0
   12078:	b	11ee4 <__assert_fail@plt+0xc14>
   1207c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12080:	mov	r5, r1
   12084:	mov	r4, r2
   12088:	strd	r6, [sp, #8]
   1208c:	mov	r7, r3
   12090:	strd	r8, [sp, #16]
   12094:	strd	sl, [sp, #24]
   12098:	str	lr, [sp, #32]
   1209c:	sub	sp, sp, #132	; 0x84
   120a0:	ldr	r6, [sp, #172]	; 0xac
   120a4:	str	r0, [sp, #16]
   120a8:	ldr	r8, [r1, #24]
   120ac:	ldr	r3, [r1, #28]
   120b0:	cmp	r6, #0
   120b4:	str	r3, [sp, #8]
   120b8:	beq	123c4 <__assert_fail@plt+0x10f4>
   120bc:	mov	r3, #2
   120c0:	cmp	r2, #0
   120c4:	mvn	sl, #0
   120c8:	mvn	fp, #0
   120cc:	str	r3, [r6]
   120d0:	movne	r3, #4
   120d4:	moveq	r3, #0
   120d8:	mov	r2, #51456	; 0xc900
   120dc:	mov	r1, r8
   120e0:	moveq	r9, #1
   120e4:	movne	r9, #0
   120e8:	str	r3, [sp, #12]
   120ec:	strd	sl, [sp, #72]	; 0x48
   120f0:	bl	11174 <openat64@plt>
   120f4:	subs	r3, r0, #0
   120f8:	str	r3, [sp, #20]
   120fc:	blt	12188 <__assert_fail@plt+0xeb8>
   12100:	bl	11234 <fdopendir@plt>
   12104:	subs	r4, r0, #0
   12108:	ldr	r3, [sp, #20]
   1210c:	beq	12490 <__assert_fail@plt+0x11c0>
   12110:	bl	11180 <__errno_location@plt>
   12114:	mov	sl, r0
   12118:	mov	r3, #0
   1211c:	str	r3, [r0]
   12120:	mov	r0, r4
   12124:	bl	11228 <readdir64@plt>
   12128:	cmp	r0, #0
   1212c:	beq	12160 <__assert_fail@plt+0xe90>
   12130:	ldrb	r3, [r0, #19]
   12134:	cmp	r3, #46	; 0x2e
   12138:	beq	12464 <__assert_fail@plt+0x1194>
   1213c:	ldr	r2, [sl]
   12140:	mov	r0, r4
   12144:	mov	r4, #0
   12148:	str	r2, [sp, #20]
   1214c:	bl	112c4 <closedir@plt>
   12150:	ldr	r2, [sp, #20]
   12154:	mov	r3, #3
   12158:	str	r2, [sl]
   1215c:	b	12190 <__assert_fail@plt+0xec0>
   12160:	ldr	r3, [sl]
   12164:	mov	r0, r4
   12168:	str	r3, [sp, #20]
   1216c:	bl	112c4 <closedir@plt>
   12170:	ldr	r3, [sp, #20]
   12174:	cmp	r3, #0
   12178:	str	r3, [sl]
   1217c:	moveq	r4, #1
   12180:	moveq	r3, #4
   12184:	beq	12190 <__assert_fail@plt+0xec0>
   12188:	mov	r4, #0
   1218c:	mov	r3, #3
   12190:	str	r3, [r6]
   12194:	ldr	r5, [r5, #16]
   12198:	cmp	r5, #0
   1219c:	bne	1236c <__assert_fail@plt+0x109c>
   121a0:	ldr	r3, [r7, #4]
   121a4:	cmp	r3, #5
   121a8:	beq	1234c <__assert_fail@plt+0x107c>
   121ac:	ldrb	r2, [r7]
   121b0:	cmp	r2, #0
   121b4:	bne	12378 <__assert_fail@plt+0x10a8>
   121b8:	cmp	r3, #3
   121bc:	beq	121cc <__assert_fail@plt+0xefc>
   121c0:	ldrb	r3, [r7, #17]
   121c4:	cmp	r3, #0
   121c8:	beq	1234c <__assert_fail@plt+0x107c>
   121cc:	bl	1bd38 <__assert_fail@plt+0xaa68>
   121d0:	cmp	r0, #0
   121d4:	bne	12374 <__assert_fail@plt+0x10a4>
   121d8:	ldrd	r2, [sp, #72]	; 0x48
   121dc:	mvn	r1, #0
   121e0:	mvn	r0, #0
   121e4:	cmp	r3, r1
   121e8:	cmpeq	r2, r0
   121ec:	beq	12518 <__assert_fail@plt+0x1248>
   121f0:	cmp	r2, #0
   121f4:	sbcs	r3, r3, #0
   121f8:	blt	125f4 <__assert_fail@plt+0x1324>
   121fc:	ldr	r3, [sp, #40]	; 0x28
   12200:	and	r3, r3, #61440	; 0xf000
   12204:	cmp	r3, #40960	; 0xa000
   12208:	beq	12374 <__assert_fail@plt+0x10a4>
   1220c:	mov	r3, #512	; 0x200
   12210:	mov	r2, #2
   12214:	ldr	r0, [sp, #16]
   12218:	mov	r1, r8
   1221c:	bl	11018 <faccessat@plt>
   12220:	cmp	r0, #0
   12224:	beq	12374 <__assert_fail@plt+0x10a4>
   12228:	bl	11180 <__errno_location@plt>
   1222c:	ldr	r5, [r0]
   12230:	cmp	r5, #13
   12234:	beq	125ec <__assert_fail@plt+0x131c>
   12238:	mov	r0, #4
   1223c:	ldr	r1, [sp, #8]
   12240:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   12244:	mov	r4, r0
   12248:	mov	r2, #5
   1224c:	movw	r1, #56120	; 0xdb38
   12250:	movt	r1, #1
   12254:	mov	r0, #0
   12258:	bl	11060 <dcgettext@plt>
   1225c:	mov	r2, r0
   12260:	mov	r3, r4
   12264:	mov	r0, #0
   12268:	mov	r1, r5
   1226c:	bl	110f0 <error@plt>
   12270:	mov	r0, #4
   12274:	b	12350 <__assert_fail@plt+0x1080>
   12278:	ldrd	r2, [sp, #72]	; 0x48
   1227c:	mvn	r1, #0
   12280:	mvn	r0, #0
   12284:	cmp	r3, r1
   12288:	cmpeq	r2, r0
   1228c:	beq	1256c <__assert_fail@plt+0x129c>
   12290:	cmp	r2, #0
   12294:	sbcs	r3, r3, #0
   12298:	blt	125f4 <__assert_fail@plt+0x1324>
   1229c:	ldr	r3, [sp, #40]	; 0x28
   122a0:	and	r3, r3, #61440	; 0xf000
   122a4:	cmp	r3, #40960	; 0xa000
   122a8:	beq	12480 <__assert_fail@plt+0x11b0>
   122ac:	cmp	r3, #16384	; 0x4000
   122b0:	beq	12394 <__assert_fail@plt+0x10c4>
   122b4:	mov	r0, #4
   122b8:	ldr	r1, [sp, #8]
   122bc:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   122c0:	mov	r6, r0
   122c4:	ldrd	r2, [sp, #72]	; 0x48
   122c8:	mvn	r1, #0
   122cc:	mvn	r0, #0
   122d0:	cmp	r3, r1
   122d4:	cmpeq	r2, r0
   122d8:	beq	124ec <__assert_fail@plt+0x121c>
   122dc:	cmp	r2, #0
   122e0:	sbcs	r3, r3, #0
   122e4:	blt	12600 <__assert_fail@plt+0x1330>
   122e8:	movw	r3, #61832	; 0xf188
   122ec:	movt	r3, #2
   122f0:	cmp	r5, #0
   122f4:	ldr	r4, [r3]
   122f8:	beq	124bc <__assert_fail@plt+0x11ec>
   122fc:	movw	r1, #56220	; 0xdb9c
   12300:	movt	r1, #1
   12304:	mov	r2, #5
   12308:	mov	r0, #0
   1230c:	bl	11060 <dcgettext@plt>
   12310:	mov	r7, r0
   12314:	movw	r3, #61884	; 0xf1bc
   12318:	movt	r3, #2
   1231c:	ldr	r5, [r3]
   12320:	add	r0, sp, #24
   12324:	bl	137d0 <__assert_fail@plt+0x2500>
   12328:	mov	r2, r7
   1232c:	mov	r1, #1
   12330:	stm	sp, {r0, r6}
   12334:	mov	r0, r4
   12338:	mov	r3, r5
   1233c:	bl	111bc <__fprintf_chk@plt>
   12340:	bl	1c460 <__assert_fail@plt+0xb190>
   12344:	cmp	r0, #0
   12348:	beq	1236c <__assert_fail@plt+0x109c>
   1234c:	mov	r0, #2
   12350:	add	sp, sp, #132	; 0x84
   12354:	ldrd	r4, [sp]
   12358:	ldrd	r6, [sp, #8]
   1235c:	ldrd	r8, [sp, #16]
   12360:	ldrd	sl, [sp, #24]
   12364:	add	sp, sp, #32
   12368:	pop	{pc}		; (ldr pc, [sp], #4)
   1236c:	mov	r0, #3
   12370:	b	12350 <__assert_fail@plt+0x1080>
   12374:	ldr	r3, [r7, #4]
   12378:	cmp	r3, #3
   1237c:	bne	1234c <__assert_fail@plt+0x107c>
   12380:	cmp	r9, #0
   12384:	bne	12278 <__assert_fail@plt+0xfa8>
   12388:	ldr	r3, [sp, #12]
   1238c:	cmp	r3, #4
   12390:	bne	122b4 <__assert_fail@plt+0xfe4>
   12394:	ldrb	r3, [r7, #9]
   12398:	cmp	r3, #0
   1239c:	bne	123f4 <__assert_fail@plt+0x1124>
   123a0:	ldrb	r3, [r7, #10]
   123a4:	tst	r4, r3
   123a8:	bne	122b4 <__assert_fail@plt+0xfe4>
   123ac:	mov	r0, #4
   123b0:	ldr	r1, [sp, #8]
   123b4:	mov	r5, #21
   123b8:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   123bc:	mov	r4, r0
   123c0:	b	12248 <__assert_fail@plt+0xf78>
   123c4:	cmp	r4, #0
   123c8:	mvn	r2, #0
   123cc:	mvn	r3, #0
   123d0:	moveq	r9, #1
   123d4:	streq	r4, [sp, #12]
   123d8:	strd	r2, [sp, #72]	; 0x48
   123dc:	beq	12194 <__assert_fail@plt+0xec4>
   123e0:	mov	r3, #4
   123e4:	mov	r9, r6
   123e8:	mov	r4, r6
   123ec:	str	r3, [sp, #12]
   123f0:	b	12194 <__assert_fail@plt+0xec4>
   123f4:	mov	r0, #4
   123f8:	ldr	r1, [sp, #8]
   123fc:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   12400:	ldr	r3, [sp, #168]	; 0xa8
   12404:	mov	r6, r0
   12408:	cmp	r3, #2
   1240c:	moveq	r0, r4
   12410:	orrne	r0, r4, #1
   12414:	cmp	r0, #0
   12418:	bne	122c4 <__assert_fail@plt+0xff4>
   1241c:	movw	r3, #61832	; 0xf188
   12420:	movt	r3, #2
   12424:	cmp	r5, #0
   12428:	ldr	r4, [r3]
   1242c:	beq	124a0 <__assert_fail@plt+0x11d0>
   12430:	mov	r2, #5
   12434:	movw	r1, #56140	; 0xdb4c
   12438:	movt	r1, #1
   1243c:	bl	11060 <dcgettext@plt>
   12440:	mov	r2, r0
   12444:	movw	r3, #61884	; 0xf1bc
   12448:	movt	r3, #2
   1244c:	str	r6, [sp]
   12450:	mov	r0, r4
   12454:	mov	r1, #1
   12458:	ldr	r3, [r3]
   1245c:	bl	111bc <__fprintf_chk@plt>
   12460:	b	12340 <__assert_fail@plt+0x1070>
   12464:	ldrb	r3, [r0, #20]
   12468:	cmp	r3, #46	; 0x2e
   1246c:	beq	124d8 <__assert_fail@plt+0x1208>
   12470:	cmp	r3, #47	; 0x2f
   12474:	cmpne	r3, #0
   12478:	beq	12120 <__assert_fail@plt+0xe50>
   1247c:	b	1213c <__assert_fail@plt+0xe6c>
   12480:	ldr	r3, [r7, #4]
   12484:	cmp	r3, #3
   12488:	bne	1234c <__assert_fail@plt+0x107c>
   1248c:	b	122b4 <__assert_fail@plt+0xfe4>
   12490:	mov	r0, r3
   12494:	bl	112a0 <close@plt>
   12498:	mov	r3, #3
   1249c:	b	12190 <__assert_fail@plt+0xec0>
   124a0:	mov	r2, #5
   124a4:	mov	r0, r5
   124a8:	movw	r1, #56188	; 0xdb7c
   124ac:	movt	r1, #1
   124b0:	bl	11060 <dcgettext@plt>
   124b4:	mov	r2, r0
   124b8:	b	12444 <__assert_fail@plt+0x1174>
   124bc:	mov	r0, r5
   124c0:	movw	r1, #56256	; 0xdbc0
   124c4:	movt	r1, #1
   124c8:	mov	r2, #5
   124cc:	bl	11060 <dcgettext@plt>
   124d0:	mov	r7, r0
   124d4:	b	12314 <__assert_fail@plt+0x1044>
   124d8:	ldrb	r3, [r0, #21]
   124dc:	cmp	r3, #0
   124e0:	cmpne	r3, #47	; 0x2f
   124e4:	beq	12120 <__assert_fail@plt+0xe50>
   124e8:	b	1213c <__assert_fail@plt+0xe6c>
   124ec:	mov	r0, #256	; 0x100
   124f0:	mov	r2, r8
   124f4:	ldr	r1, [sp, #16]
   124f8:	add	r3, sp, #24
   124fc:	str	r0, [sp]
   12500:	mov	r0, #3
   12504:	bl	11090 <__fxstatat64@plt>
   12508:	cmp	r0, #0
   1250c:	bne	12598 <__assert_fail@plt+0x12c8>
   12510:	ldrd	r2, [sp, #72]	; 0x48
   12514:	b	122dc <__assert_fail@plt+0x100c>
   12518:	mov	r0, #256	; 0x100
   1251c:	add	r3, sp, #24
   12520:	ldr	r1, [sp, #16]
   12524:	mov	r2, r8
   12528:	str	r0, [sp]
   1252c:	mov	r0, #3
   12530:	bl	11090 <__fxstatat64@plt>
   12534:	cmp	r0, #0
   12538:	bne	12544 <__assert_fail@plt+0x1274>
   1253c:	ldrd	r2, [sp, #72]	; 0x48
   12540:	b	121f0 <__assert_fail@plt+0xf20>
   12544:	mvn	r2, #1
   12548:	mvn	r3, #0
   1254c:	strd	r2, [sp, #72]	; 0x48
   12550:	bl	11180 <__errno_location@plt>
   12554:	ldr	r5, [r0]
   12558:	asr	r3, r5, #31
   1255c:	mov	r2, r5
   12560:	strd	r2, [sp, #120]	; 0x78
   12564:	str	r5, [r0]
   12568:	b	12238 <__assert_fail@plt+0xf68>
   1256c:	mov	r0, #256	; 0x100
   12570:	add	r3, sp, #24
   12574:	ldr	r1, [sp, #16]
   12578:	mov	r2, r8
   1257c:	str	r0, [sp]
   12580:	mov	r0, #3
   12584:	bl	11090 <__fxstatat64@plt>
   12588:	cmp	r0, #0
   1258c:	bne	12544 <__assert_fail@plt+0x1274>
   12590:	ldrd	r2, [sp, #72]	; 0x48
   12594:	b	12290 <__assert_fail@plt+0xfc0>
   12598:	mvn	r2, #1
   1259c:	mvn	r3, #0
   125a0:	strd	r2, [sp, #72]	; 0x48
   125a4:	bl	11180 <__errno_location@plt>
   125a8:	ldr	r4, [r0]
   125ac:	asr	r3, r4, #31
   125b0:	mov	r2, r4
   125b4:	strd	r2, [sp, #120]	; 0x78
   125b8:	mov	r2, #5
   125bc:	movw	r1, #56120	; 0xdb38
   125c0:	movt	r1, #1
   125c4:	str	r4, [r0]
   125c8:	mov	r0, #0
   125cc:	bl	11060 <dcgettext@plt>
   125d0:	mov	r2, r0
   125d4:	mov	r3, r6
   125d8:	mov	r0, #0
   125dc:	mov	r1, r4
   125e0:	bl	110f0 <error@plt>
   125e4:	mov	r0, #4
   125e8:	b	12350 <__assert_fail@plt+0x1080>
   125ec:	mov	r5, #1
   125f0:	b	12380 <__assert_fail@plt+0x10b0>
   125f4:	bl	11180 <__errno_location@plt>
   125f8:	ldr	r5, [sp, #120]	; 0x78
   125fc:	b	12564 <__assert_fail@plt+0x1294>
   12600:	bl	11180 <__errno_location@plt>
   12604:	ldr	r4, [sp, #120]	; 0x78
   12608:	b	125b8 <__assert_fail@plt+0x12e8>
   1260c:	ldr	r3, [r0]
   12610:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12614:	strd	r6, [sp, #8]
   12618:	strd	r8, [sp, #16]
   1261c:	strd	sl, [sp, #24]
   12620:	cmp	r3, #0
   12624:	str	lr, [sp, #32]
   12628:	sub	sp, sp, #132	; 0x84
   1262c:	beq	12e2c <__assert_fail@plt+0x1b5c>
   12630:	ldrb	r3, [r1, #8]
   12634:	mov	r2, #0
   12638:	mov	r9, r1
   1263c:	movw	r1, #56836	; 0xde04
   12640:	movt	r1, #1
   12644:	movw	sl, #56624	; 0xdd30
   12648:	movt	sl, #1
   1264c:	str	r1, [sp, #16]
   12650:	movw	fp, #56436	; 0xdc74
   12654:	movt	fp, #1
   12658:	mov	r8, #2
   1265c:	cmp	r3, r2
   12660:	moveq	r1, #536	; 0x218
   12664:	movne	r1, #600	; 0x258
   12668:	bl	1c3d0 <__assert_fail@plt+0xb100>
   1266c:	mov	r5, r0
   12670:	mov	r0, r5
   12674:	bl	157a8 <__assert_fail@plt+0x44d8>
   12678:	subs	r4, r0, #0
   1267c:	beq	12730 <__assert_fail@plt+0x1460>
   12680:	ldrh	r2, [r4, #56]	; 0x38
   12684:	sub	r3, r2, #1
   12688:	cmp	r3, #12
   1268c:	ldrls	pc, [pc, r3, lsl #2]
   12690:	b	12e40 <__assert_fail@plt+0x1b70>
   12694:	andeq	r2, r1, r8, asr #16
   12698:	andeq	r2, r1, r8, lsl #16
   1269c:	andeq	r2, r1, r4, ror r7
   126a0:	andeq	r2, r1, r4, ror r7
   126a4:	andeq	r2, r1, r0, asr #28
   126a8:	andeq	r2, r1, r4, ror r7
   126ac:	andeq	r2, r1, r8, asr #13
   126b0:	andeq	r2, r1, r4, ror r7
   126b4:	andeq	r2, r1, r0, asr #28
   126b8:	andeq	r2, r1, r4, ror r7
   126bc:	andeq	r2, r1, r4, ror r7
   126c0:	andeq	r2, r1, r4, ror r7
   126c4:	andeq	r2, r1, r4, ror r7
   126c8:	ldr	r6, [r4, #32]
   126cc:	mov	r2, #5
   126d0:	mov	r1, sl
   126d4:	mov	r0, #0
   126d8:	mov	r8, #4
   126dc:	bl	11060 <dcgettext@plt>
   126e0:	mov	r7, r0
   126e4:	mov	r1, #3
   126e8:	ldr	r2, [r4, #28]
   126ec:	mov	r0, #0
   126f0:	bl	1ac4c <__assert_fail@plt+0x997c>
   126f4:	mov	r3, r0
   126f8:	mov	r2, r7
   126fc:	mov	r1, r6
   12700:	mov	r0, #0
   12704:	bl	110f0 <error@plt>
   12708:	mov	r1, r4
   1270c:	mov	r2, r8
   12710:	mov	r0, r5
   12714:	bl	15fbc <__assert_fail@plt+0x4cec>
   12718:	mov	r0, r5
   1271c:	bl	157a8 <__assert_fail@plt+0x44d8>
   12720:	mov	r0, r5
   12724:	bl	157a8 <__assert_fail@plt+0x44d8>
   12728:	subs	r4, r0, #0
   1272c:	bne	12680 <__assert_fail@plt+0x13b0>
   12730:	bl	11180 <__errno_location@plt>
   12734:	ldr	r6, [r0]
   12738:	mov	r7, r0
   1273c:	cmp	r6, #0
   12740:	bne	12cd0 <__assert_fail@plt+0x1a00>
   12744:	mov	r0, r5
   12748:	bl	155a0 <__assert_fail@plt+0x42d0>
   1274c:	cmp	r0, #0
   12750:	bne	12d08 <__assert_fail@plt+0x1a38>
   12754:	mov	r0, r8
   12758:	add	sp, sp, #132	; 0x84
   1275c:	ldrd	r4, [sp]
   12760:	ldrd	r6, [sp, #8]
   12764:	ldrd	r8, [sp, #16]
   12768:	ldrd	sl, [sp, #24]
   1276c:	add	sp, sp, #32
   12770:	pop	{pc}		; (ldr pc, [sp], #4)
   12774:	cmp	r2, #6
   12778:	bne	127a8 <__assert_fail@plt+0x14d8>
   1277c:	ldrb	r3, [r9, #8]
   12780:	cmp	r3, #0
   12784:	beq	127a8 <__assert_fail@plt+0x14d8>
   12788:	ldr	r3, [r4, #48]	; 0x30
   1278c:	cmp	r3, #0
   12790:	ble	127a8 <__assert_fail@plt+0x14d8>
   12794:	ldrd	r0, [r5, #16]
   12798:	ldrd	r6, [r4, #64]	; 0x40
   1279c:	cmp	r7, r1
   127a0:	cmpeq	r6, r0
   127a4:	bne	12d38 <__assert_fail@plt+0x1a68>
   127a8:	bic	r2, r2, #2
   127ac:	mov	r3, #0
   127b0:	ldr	r0, [r5, #32]
   127b4:	sub	r6, r2, #4
   127b8:	mov	r1, #3
   127bc:	clz	r6, r6
   127c0:	lsr	r6, r6, #5
   127c4:	stm	sp, {r1, r3}
   127c8:	mov	r3, r9
   127cc:	mov	r1, r4
   127d0:	mov	r2, r6
   127d4:	bl	1207c <__assert_fail@plt+0xdac>
   127d8:	cmp	r0, #2
   127dc:	mov	r7, r0
   127e0:	beq	12a70 <__assert_fail@plt+0x17a0>
   127e4:	sub	r3, r7, #2
   127e8:	cmp	r3, #2
   127ec:	bhi	12eec <__assert_fail@plt+0x1c1c>
   127f0:	cmp	r7, #4
   127f4:	beq	12f0c <__assert_fail@plt+0x1c3c>
   127f8:	cmp	r7, #3
   127fc:	cmpeq	r8, #2
   12800:	moveq	r8, #3
   12804:	b	12670 <__assert_fail@plt+0x13a0>
   12808:	mov	r1, fp
   1280c:	mov	r2, #5
   12810:	mov	r0, #0
   12814:	mov	r8, #4
   12818:	bl	11060 <dcgettext@plt>
   1281c:	mov	r6, r0
   12820:	mov	r1, #3
   12824:	ldr	r2, [r4, #28]
   12828:	mov	r0, #0
   1282c:	bl	1ac4c <__assert_fail@plt+0x997c>
   12830:	mov	r1, #0
   12834:	mov	r3, r0
   12838:	mov	r2, r6
   1283c:	mov	r0, r1
   12840:	bl	110f0 <error@plt>
   12844:	b	12708 <__assert_fail@plt+0x1438>
   12848:	ldrb	r7, [r9, #9]
   1284c:	cmp	r7, #0
   12850:	bne	12990 <__assert_fail@plt+0x16c0>
   12854:	ldrb	r2, [r9, #10]
   12858:	cmp	r2, #0
   1285c:	beq	128d0 <__assert_fail@plt+0x1600>
   12860:	mov	r2, #51456	; 0xc900
   12864:	ldr	r1, [r4, #24]
   12868:	ldr	r0, [r5, #32]
   1286c:	bl	11174 <openat64@plt>
   12870:	subs	r6, r0, #0
   12874:	blt	128c0 <__assert_fail@plt+0x15f0>
   12878:	bl	11234 <fdopendir@plt>
   1287c:	subs	r3, r0, #0
   12880:	str	r3, [sp, #12]
   12884:	beq	12e34 <__assert_fail@plt+0x1b64>
   12888:	bl	11180 <__errno_location@plt>
   1288c:	mov	r6, r0
   12890:	str	r7, [r0]
   12894:	ldr	r0, [sp, #12]
   12898:	bl	11228 <readdir64@plt>
   1289c:	cmp	r0, #0
   128a0:	beq	12970 <__assert_fail@plt+0x16a0>
   128a4:	ldrb	r3, [r0, #19]
   128a8:	cmp	r3, #46	; 0x2e
   128ac:	beq	12c28 <__assert_fail@plt+0x1958>
   128b0:	ldr	r8, [r6]
   128b4:	ldr	r0, [sp, #12]
   128b8:	bl	112c4 <closedir@plt>
   128bc:	str	r8, [r6]
   128c0:	ldrb	r3, [r9, #10]
   128c4:	cmp	r3, #0
   128c8:	movne	r6, #39	; 0x27
   128cc:	bne	128d4 <__assert_fail@plt+0x1604>
   128d0:	mov	r6, #21
   128d4:	mov	r2, #5
   128d8:	movw	r1, #56120	; 0xdb38
   128dc:	movt	r1, #1
   128e0:	mov	r0, #0
   128e4:	bl	11060 <dcgettext@plt>
   128e8:	mov	r7, r0
   128ec:	mov	r0, #4
   128f0:	ldr	r1, [r4, #28]
   128f4:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   128f8:	mov	r3, r0
   128fc:	mov	r2, r7
   12900:	mov	r1, r6
   12904:	mov	r0, #0
   12908:	bl	110f0 <error@plt>
   1290c:	ldr	r3, [r4, #4]
   12910:	ldr	r2, [r3, #48]	; 0x30
   12914:	cmp	r2, #0
   12918:	blt	12950 <__assert_fail@plt+0x1680>
   1291c:	ldr	r2, [r3, #16]
   12920:	cmp	r2, #0
   12924:	bne	12950 <__assert_fail@plt+0x1680>
   12928:	mov	r1, #1
   1292c:	b	1293c <__assert_fail@plt+0x166c>
   12930:	ldr	r2, [r3, #16]
   12934:	cmp	r2, #0
   12938:	bne	12950 <__assert_fail@plt+0x1680>
   1293c:	str	r1, [r3, #16]
   12940:	ldr	r3, [r3, #4]
   12944:	ldr	r2, [r3, #48]	; 0x30
   12948:	cmp	r2, #0
   1294c:	bge	12930 <__assert_fail@plt+0x1660>
   12950:	mov	r2, #4
   12954:	mov	r1, r4
   12958:	mov	r0, r5
   1295c:	mov	r8, r2
   12960:	bl	15fbc <__assert_fail@plt+0x4cec>
   12964:	mov	r0, r5
   12968:	bl	157a8 <__assert_fail@plt+0x44d8>
   1296c:	b	12670 <__assert_fail@plt+0x13a0>
   12970:	ldr	r3, [r6]
   12974:	ldr	r0, [sp, #12]
   12978:	str	r3, [sp, #20]
   1297c:	bl	112c4 <closedir@plt>
   12980:	ldr	r3, [sp, #20]
   12984:	cmp	r3, #0
   12988:	str	r3, [r6]
   1298c:	bne	128c0 <__assert_fail@plt+0x15f0>
   12990:	ldr	r7, [r4, #48]	; 0x30
   12994:	cmp	r7, #0
   12998:	bne	129e0 <__assert_fail@plt+0x1710>
   1299c:	ldr	r6, [r4, #24]
   129a0:	mov	r0, r6
   129a4:	bl	13458 <__assert_fail@plt+0x2188>
   129a8:	ldrb	r3, [r0]
   129ac:	cmp	r3, #46	; 0x2e
   129b0:	beq	12ad4 <__assert_fail@plt+0x1804>
   129b4:	ldr	ip, [r9, #12]
   129b8:	cmp	ip, #0
   129bc:	beq	129d4 <__assert_fail@plt+0x1704>
   129c0:	ldrd	r2, [ip]
   129c4:	ldrd	r0, [r4, #160]	; 0xa0
   129c8:	cmp	r1, r3
   129cc:	cmpeq	r0, r2
   129d0:	beq	12c44 <__assert_fail@plt+0x1974>
   129d4:	ldrb	r3, [r9, #16]
   129d8:	cmp	r3, #0
   129dc:	bne	12b74 <__assert_fail@plt+0x18a4>
   129e0:	add	r6, sp, #24
   129e4:	mov	ip, #2
   129e8:	mov	r3, r9
   129ec:	str	r6, [sp, #4]
   129f0:	mov	r2, #1
   129f4:	mov	r1, r4
   129f8:	ldr	r0, [r5, #32]
   129fc:	str	ip, [sp]
   12a00:	bl	1207c <__assert_fail@plt+0xdac>
   12a04:	cmp	r0, #2
   12a08:	mov	r7, r0
   12a0c:	beq	12a8c <__assert_fail@plt+0x17bc>
   12a10:	ldr	r3, [r4, #4]
   12a14:	ldr	r2, [r3, #48]	; 0x30
   12a18:	cmp	r2, #0
   12a1c:	blt	12a54 <__assert_fail@plt+0x1784>
   12a20:	ldr	r2, [r3, #16]
   12a24:	cmp	r2, #0
   12a28:	bne	12a54 <__assert_fail@plt+0x1784>
   12a2c:	mov	r1, #1
   12a30:	b	12a40 <__assert_fail@plt+0x1770>
   12a34:	ldr	r2, [r3, #16]
   12a38:	cmp	r2, #0
   12a3c:	bne	12a54 <__assert_fail@plt+0x1784>
   12a40:	str	r1, [r3, #16]
   12a44:	ldr	r3, [r3, #4]
   12a48:	ldr	r2, [r3, #48]	; 0x30
   12a4c:	cmp	r2, #0
   12a50:	bge	12a34 <__assert_fail@plt+0x1764>
   12a54:	mov	r1, r4
   12a58:	mov	r2, #4
   12a5c:	mov	r0, r5
   12a60:	bl	15fbc <__assert_fail@plt+0x4cec>
   12a64:	mov	r0, r5
   12a68:	bl	157a8 <__assert_fail@plt+0x44d8>
   12a6c:	b	127e4 <__assert_fail@plt+0x1514>
   12a70:	mov	r3, r6
   12a74:	mov	r1, r4
   12a78:	mov	r2, r9
   12a7c:	add	r0, r5, #32
   12a80:	bl	11e5c <__assert_fail@plt+0xb8c>
   12a84:	mov	r7, r0
   12a88:	b	127e4 <__assert_fail@plt+0x1514>
   12a8c:	ldr	r6, [sp, #24]
   12a90:	cmp	r6, #4
   12a94:	bne	12670 <__assert_fail@plt+0x13a0>
   12a98:	mov	r3, #1
   12a9c:	mov	r2, r9
   12aa0:	mov	r1, r4
   12aa4:	add	r0, r5, #32
   12aa8:	bl	11e5c <__assert_fail@plt+0xb8c>
   12aac:	cmp	r0, #2
   12ab0:	mov	r7, r0
   12ab4:	bne	12a10 <__assert_fail@plt+0x1740>
   12ab8:	mov	r2, r6
   12abc:	mov	r1, r4
   12ac0:	mov	r0, r5
   12ac4:	bl	15fbc <__assert_fail@plt+0x4cec>
   12ac8:	mov	r0, r5
   12acc:	bl	157a8 <__assert_fail@plt+0x44d8>
   12ad0:	b	12670 <__assert_fail@plt+0x13a0>
   12ad4:	ldrb	r3, [r0, #1]
   12ad8:	cmp	r3, #46	; 0x2e
   12adc:	moveq	r3, #2
   12ae0:	movne	r3, #1
   12ae4:	ldrb	r3, [r0, r3]
   12ae8:	cmp	r3, #47	; 0x2f
   12aec:	cmpne	r3, #0
   12af0:	bne	129b4 <__assert_fail@plt+0x16e4>
   12af4:	mov	r2, #5
   12af8:	mov	r0, r7
   12afc:	movw	r1, #56924	; 0xde5c
   12b00:	movt	r1, #1
   12b04:	bl	11060 <dcgettext@plt>
   12b08:	mov	r1, #4
   12b0c:	movw	r2, #56976	; 0xde90
   12b10:	movt	r2, #1
   12b14:	str	r0, [sp, #12]
   12b18:	mov	r0, r7
   12b1c:	mov	r8, r1
   12b20:	bl	19ff0 <__assert_fail@plt+0x8d20>
   12b24:	mov	r3, r0
   12b28:	mov	r1, r8
   12b2c:	movw	r2, #56400	; 0xdc50
   12b30:	movt	r2, #1
   12b34:	mov	r0, #1
   12b38:	str	r3, [sp, #20]
   12b3c:	bl	19ff0 <__assert_fail@plt+0x8d20>
   12b40:	mov	r6, r0
   12b44:	mov	r1, r8
   12b48:	ldr	r2, [r4, #28]
   12b4c:	mov	r0, #2
   12b50:	bl	19ff0 <__assert_fail@plt+0x8d20>
   12b54:	mov	r1, r7
   12b58:	str	r6, [sp]
   12b5c:	str	r0, [sp, #4]
   12b60:	mov	r0, r7
   12b64:	ldr	r2, [sp, #12]
   12b68:	ldr	r3, [sp, #20]
   12b6c:	bl	110f0 <error@plt>
   12b70:	b	12708 <__assert_fail@plt+0x1438>
   12b74:	mov	r0, r6
   12b78:	mov	r2, #0
   12b7c:	movw	r1, #56400	; 0xdc50
   12b80:	movt	r1, #1
   12b84:	bl	138d0 <__assert_fail@plt+0x2600>
   12b88:	add	r6, sp, #24
   12b8c:	mov	r1, r0
   12b90:	mov	r7, r0
   12b94:	mov	r2, r6
   12b98:	mov	r0, #3
   12b9c:	bl	112ac <__lxstat64@plt>
   12ba0:	subs	r3, r0, #0
   12ba4:	str	r3, [sp, #12]
   12ba8:	bne	12db8 <__assert_fail@plt+0x1ae8>
   12bac:	mov	r0, r7
   12bb0:	bl	13a30 <__assert_fail@plt+0x2760>
   12bb4:	ldrd	r0, [r5, #16]
   12bb8:	ldrd	r2, [sp, #24]
   12bbc:	cmp	r1, r3
   12bc0:	cmpeq	r0, r2
   12bc4:	beq	129e4 <__assert_fail@plt+0x1714>
   12bc8:	ldr	r7, [sp, #12]
   12bcc:	mov	r2, #5
   12bd0:	ldr	r1, [sp, #16]
   12bd4:	mov	r0, r7
   12bd8:	bl	11060 <dcgettext@plt>
   12bdc:	mov	r6, r0
   12be0:	mov	r0, #4
   12be4:	ldr	r1, [r4, #28]
   12be8:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   12bec:	mov	r3, r0
   12bf0:	mov	r2, r6
   12bf4:	mov	r1, r7
   12bf8:	mov	r0, r7
   12bfc:	bl	110f0 <error@plt>
   12c00:	mov	r2, #5
   12c04:	mov	r0, r7
   12c08:	movw	r1, #56884	; 0xde34
   12c0c:	movt	r1, #1
   12c10:	bl	11060 <dcgettext@plt>
   12c14:	mov	r2, r0
   12c18:	mov	r1, r7
   12c1c:	mov	r0, r7
   12c20:	bl	110f0 <error@plt>
   12c24:	b	12950 <__assert_fail@plt+0x1680>
   12c28:	ldrb	r3, [r0, #20]
   12c2c:	cmp	r3, #46	; 0x2e
   12c30:	beq	12e18 <__assert_fail@plt+0x1b48>
   12c34:	cmp	r3, #47	; 0x2f
   12c38:	cmpne	r3, #0
   12c3c:	beq	12894 <__assert_fail@plt+0x15c4>
   12c40:	b	128b0 <__assert_fail@plt+0x15e0>
   12c44:	ldrd	r0, [ip, #8]
   12c48:	ldrd	r2, [r4, #64]	; 0x40
   12c4c:	cmp	r3, r1
   12c50:	cmpeq	r2, r0
   12c54:	bne	129d4 <__assert_fail@plt+0x1704>
   12c58:	movw	r1, #55624	; 0xd948
   12c5c:	movt	r1, #1
   12c60:	ldr	r0, [r4, #28]
   12c64:	bl	10fdc <strcmp@plt>
   12c68:	subs	r6, r0, #0
   12c6c:	bne	12e90 <__assert_fail@plt+0x1bc0>
   12c70:	mov	r2, #5
   12c74:	movw	r1, #56292	; 0xdbe4
   12c78:	movt	r1, #1
   12c7c:	bl	11060 <dcgettext@plt>
   12c80:	mov	r7, r0
   12c84:	mov	r0, #4
   12c88:	ldr	r1, [r4, #28]
   12c8c:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   12c90:	mov	r3, r0
   12c94:	mov	r2, r7
   12c98:	mov	r1, r6
   12c9c:	mov	r0, r6
   12ca0:	bl	110f0 <error@plt>
   12ca4:	mov	r2, #5
   12ca8:	movw	r1, #56784	; 0xddd0
   12cac:	movt	r1, #1
   12cb0:	mov	r0, #0
   12cb4:	bl	11060 <dcgettext@plt>
   12cb8:	mov	r1, #0
   12cbc:	mov	r2, r0
   12cc0:	mov	r0, r1
   12cc4:	mov	r8, #4
   12cc8:	bl	110f0 <error@plt>
   12ccc:	b	12708 <__assert_fail@plt+0x1438>
   12cd0:	mov	r2, #5
   12cd4:	movw	r1, #56276	; 0xdbd4
   12cd8:	movt	r1, #1
   12cdc:	mov	r0, r4
   12ce0:	bl	11060 <dcgettext@plt>
   12ce4:	mov	r2, r0
   12ce8:	mov	r1, r6
   12cec:	mov	r0, r4
   12cf0:	mov	r8, #4
   12cf4:	bl	110f0 <error@plt>
   12cf8:	mov	r0, r5
   12cfc:	bl	155a0 <__assert_fail@plt+0x42d0>
   12d00:	cmp	r0, #0
   12d04:	beq	12754 <__assert_fail@plt+0x1484>
   12d08:	ldr	r4, [r7]
   12d0c:	mov	r2, #5
   12d10:	movw	r1, #56764	; 0xddbc
   12d14:	movt	r1, #1
   12d18:	mov	r0, #0
   12d1c:	bl	11060 <dcgettext@plt>
   12d20:	mov	r2, r0
   12d24:	mov	r0, #0
   12d28:	mov	r8, #4
   12d2c:	mov	r1, r4
   12d30:	bl	110f0 <error@plt>
   12d34:	b	12754 <__assert_fail@plt+0x1484>
   12d38:	ldr	r3, [r4, #4]
   12d3c:	ldr	r2, [r3, #48]	; 0x30
   12d40:	cmp	r2, #0
   12d44:	blt	12d7c <__assert_fail@plt+0x1aac>
   12d48:	ldr	r2, [r3, #16]
   12d4c:	cmp	r2, #0
   12d50:	bne	12d7c <__assert_fail@plt+0x1aac>
   12d54:	mov	r1, #1
   12d58:	b	12d68 <__assert_fail@plt+0x1a98>
   12d5c:	ldr	r2, [r3, #16]
   12d60:	cmp	r2, #0
   12d64:	bne	12d7c <__assert_fail@plt+0x1aac>
   12d68:	str	r1, [r3, #16]
   12d6c:	ldr	r3, [r3, #4]
   12d70:	ldr	r2, [r3, #48]	; 0x30
   12d74:	cmp	r2, #0
   12d78:	bge	12d5c <__assert_fail@plt+0x1a8c>
   12d7c:	mov	r2, #5
   12d80:	mov	r0, #0
   12d84:	ldr	r1, [sp, #16]
   12d88:	bl	11060 <dcgettext@plt>
   12d8c:	mov	r8, #4
   12d90:	mov	r6, r0
   12d94:	ldr	r1, [r4, #28]
   12d98:	mov	r0, r8
   12d9c:	bl	1a0cc <__assert_fail@plt+0x8dfc>
   12da0:	mov	r1, #0
   12da4:	mov	r3, r0
   12da8:	mov	r2, r6
   12dac:	mov	r0, r1
   12db0:	bl	110f0 <error@plt>
   12db4:	b	12670 <__assert_fail@plt+0x13a0>
   12db8:	mov	r2, #5
   12dbc:	movw	r1, #56404	; 0xdc54
   12dc0:	movt	r1, #1
   12dc4:	mov	r0, #0
   12dc8:	bl	11060 <dcgettext@plt>
   12dcc:	mov	r6, r0
   12dd0:	mov	r2, r7
   12dd4:	mov	r1, #4
   12dd8:	mov	r0, #0
   12ddc:	bl	19ff0 <__assert_fail@plt+0x8d20>
   12de0:	mov	r8, r0
   12de4:	mov	r1, #4
   12de8:	ldr	r2, [r4, #24]
   12dec:	mov	r0, #1
   12df0:	bl	19ff0 <__assert_fail@plt+0x8d20>
   12df4:	mov	r1, #0
   12df8:	mov	r3, r8
   12dfc:	str	r0, [sp]
   12e00:	mov	r2, r6
   12e04:	mov	r0, r1
   12e08:	bl	110f0 <error@plt>
   12e0c:	mov	r0, r7
   12e10:	bl	13a30 <__assert_fail@plt+0x2760>
   12e14:	b	12950 <__assert_fail@plt+0x1680>
   12e18:	ldrb	r3, [r0, #21]
   12e1c:	cmp	r3, #0
   12e20:	cmpne	r3, #47	; 0x2f
   12e24:	beq	12894 <__assert_fail@plt+0x15c4>
   12e28:	b	128b0 <__assert_fail@plt+0x15e0>
   12e2c:	mov	r8, #2
   12e30:	b	12754 <__assert_fail@plt+0x1484>
   12e34:	mov	r0, r6
   12e38:	bl	112a0 <close@plt>
   12e3c:	b	128c0 <__assert_fail@plt+0x15f0>
   12e40:	mov	r2, #5
   12e44:	movw	r1, #56648	; 0xdd48
   12e48:	movt	r1, #1
   12e4c:	mov	r0, #0
   12e50:	bl	11060 <dcgettext@plt>
   12e54:	ldrh	r6, [r4, #56]	; 0x38
   12e58:	mov	r5, r0
   12e5c:	mov	r1, #3
   12e60:	mov	r0, #0
   12e64:	ldr	r2, [r4, #28]
   12e68:	bl	1ac4c <__assert_fail@plt+0x997c>
   12e6c:	movw	ip, #56704	; 0xdd80
   12e70:	movt	ip, #1
   12e74:	mov	r1, #0
   12e78:	mov	r3, r6
   12e7c:	mov	r2, r5
   12e80:	stm	sp, {r0, ip}
   12e84:	mov	r0, r1
   12e88:	bl	110f0 <error@plt>
   12e8c:	bl	11294 <abort@plt>
   12e90:	mov	r2, #5
   12e94:	movw	r1, #56340	; 0xdc14
   12e98:	movt	r1, #1
   12e9c:	mov	r0, #0
   12ea0:	bl	11060 <dcgettext@plt>
   12ea4:	mov	r6, r0
   12ea8:	mov	r1, #4
   12eac:	ldr	r2, [r4, #28]
   12eb0:	mov	r0, #0
   12eb4:	bl	19ff0 <__assert_fail@plt+0x8d20>
   12eb8:	mov	r7, r0
   12ebc:	mov	r1, #4
   12ec0:	movw	r2, #55624	; 0xd948
   12ec4:	movt	r2, #1
   12ec8:	mov	r0, #1
   12ecc:	bl	19ff0 <__assert_fail@plt+0x8d20>
   12ed0:	mov	r1, #0
   12ed4:	mov	r3, r7
   12ed8:	str	r0, [sp]
   12edc:	mov	r2, r6
   12ee0:	mov	r0, r1
   12ee4:	bl	110f0 <error@plt>
   12ee8:	b	12ca4 <__assert_fail@plt+0x19d4>
   12eec:	movw	r3, #56080	; 0xdb10
   12ef0:	movt	r3, #1
   12ef4:	movw	r1, #56728	; 0xdd98
   12ef8:	movt	r1, #1
   12efc:	movw	r0, #56744	; 0xdda8
   12f00:	movt	r0, #1
   12f04:	movw	r2, #610	; 0x262
   12f08:	bl	112d0 <__assert_fail@plt>
   12f0c:	mov	r8, r7
   12f10:	b	12670 <__assert_fail@plt+0x13a0>
   12f14:	mov	r0, #1
   12f18:	b	11a74 <__assert_fail@plt+0x7a4>
   12f1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12f20:	mov	r4, r1
   12f24:	strd	r6, [sp, #8]
   12f28:	mov	r6, r2
   12f2c:	strd	r8, [sp, #16]
   12f30:	mov	r8, r3
   12f34:	strd	sl, [sp, #24]
   12f38:	mov	sl, r0
   12f3c:	str	lr, [sp, #32]
   12f40:	sub	sp, sp, #12
   12f44:	str	r2, [sp]
   12f48:	bl	11168 <strlen@plt>
   12f4c:	ldr	fp, [r4]
   12f50:	cmp	fp, #0
   12f54:	beq	13064 <__assert_fail@plt+0x1d94>
   12f58:	cmp	r6, #0
   12f5c:	mov	r7, r0
   12f60:	beq	13010 <__assert_fail@plt+0x1d40>
   12f64:	mov	r5, #0
   12f68:	mvn	r9, #0
   12f6c:	str	r5, [sp, #4]
   12f70:	mov	r2, r7
   12f74:	mov	r1, sl
   12f78:	mov	r0, fp
   12f7c:	bl	11288 <strncmp@plt>
   12f80:	cmp	r0, #0
   12f84:	mov	r0, fp
   12f88:	bne	12fc8 <__assert_fail@plt+0x1cf8>
   12f8c:	bl	11168 <strlen@plt>
   12f90:	ldr	r3, [sp]
   12f94:	cmp	r0, r7
   12f98:	mov	r2, r8
   12f9c:	mov	r1, r6
   12fa0:	mla	r0, r8, r9, r3
   12fa4:	beq	13008 <__assert_fail@plt+0x1d38>
   12fa8:	cmn	r9, #1
   12fac:	moveq	r9, r5
   12fb0:	beq	12fc8 <__assert_fail@plt+0x1cf8>
   12fb4:	bl	11048 <memcmp@plt>
   12fb8:	ldr	r3, [sp, #4]
   12fbc:	cmp	r0, #0
   12fc0:	movne	r3, #1
   12fc4:	str	r3, [sp, #4]
   12fc8:	ldr	fp, [r4, #4]!
   12fcc:	add	r5, r5, #1
   12fd0:	add	r6, r6, r8
   12fd4:	cmp	fp, #0
   12fd8:	bne	12f70 <__assert_fail@plt+0x1ca0>
   12fdc:	ldr	r3, [sp, #4]
   12fe0:	cmp	r3, #0
   12fe4:	mvnne	r9, #1
   12fe8:	mov	r0, r9
   12fec:	add	sp, sp, #12
   12ff0:	ldrd	r4, [sp]
   12ff4:	ldrd	r6, [sp, #8]
   12ff8:	ldrd	r8, [sp, #16]
   12ffc:	ldrd	sl, [sp, #24]
   13000:	add	sp, sp, #32
   13004:	pop	{pc}		; (ldr pc, [sp], #4)
   13008:	mov	r9, r5
   1300c:	b	12fe8 <__assert_fail@plt+0x1d18>
   13010:	mov	r5, r6
   13014:	mvn	r9, #0
   13018:	mov	r2, r7
   1301c:	mov	r1, sl
   13020:	mov	r0, fp
   13024:	bl	11288 <strncmp@plt>
   13028:	cmp	r0, #0
   1302c:	mov	r0, fp
   13030:	bne	1304c <__assert_fail@plt+0x1d7c>
   13034:	bl	11168 <strlen@plt>
   13038:	cmp	r0, r7
   1303c:	beq	13008 <__assert_fail@plt+0x1d38>
   13040:	cmn	r9, #1
   13044:	moveq	r9, r5
   13048:	movne	r6, #1
   1304c:	ldr	fp, [r4, #4]!
   13050:	add	r5, r5, #1
   13054:	cmp	fp, #0
   13058:	bne	13018 <__assert_fail@plt+0x1d48>
   1305c:	str	r6, [sp, #4]
   13060:	b	12fdc <__assert_fail@plt+0x1d0c>
   13064:	mvn	r9, #0
   13068:	b	12fe8 <__assert_fail@plt+0x1d18>
   1306c:	strd	r4, [sp, #-16]!
   13070:	str	r6, [sp, #8]
   13074:	mov	r6, r0
   13078:	ldr	r0, [r1]
   1307c:	str	lr, [sp, #12]
   13080:	cmp	r0, #0
   13084:	beq	130c8 <__assert_fail@plt+0x1df8>
   13088:	mov	r4, r1
   1308c:	mov	r5, #0
   13090:	b	130a4 <__assert_fail@plt+0x1dd4>
   13094:	ldr	r0, [r4, #4]!
   13098:	add	r5, r5, #1
   1309c:	cmp	r0, #0
   130a0:	beq	130c8 <__assert_fail@plt+0x1df8>
   130a4:	mov	r1, r6
   130a8:	bl	10fdc <strcmp@plt>
   130ac:	cmp	r0, #0
   130b0:	bne	13094 <__assert_fail@plt+0x1dc4>
   130b4:	mov	r0, r5
   130b8:	ldrd	r4, [sp]
   130bc:	ldr	r6, [sp, #8]
   130c0:	add	sp, sp, #12
   130c4:	pop	{pc}		; (ldr pc, [sp], #4)
   130c8:	ldrd	r4, [sp]
   130cc:	mvn	r0, #0
   130d0:	ldr	r6, [sp, #8]
   130d4:	add	sp, sp, #12
   130d8:	pop	{pc}		; (ldr pc, [sp], #4)
   130dc:	cmn	r2, #1
   130e0:	strd	r4, [sp, #-16]!
   130e4:	mov	r5, r1
   130e8:	movweq	r1, #56996	; 0xdea4
   130ec:	movwne	r1, #57024	; 0xdec0
   130f0:	str	r6, [sp, #8]
   130f4:	movteq	r1, #1
   130f8:	movtne	r1, #1
   130fc:	str	lr, [sp, #12]
   13100:	mov	r6, r0
   13104:	sub	sp, sp, #8
   13108:	mov	r2, #5
   1310c:	mov	r0, #0
   13110:	bl	11060 <dcgettext@plt>
   13114:	mov	r4, r0
   13118:	mov	r2, r5
   1311c:	mov	r1, #8
   13120:	mov	r0, #0
   13124:	bl	19ff0 <__assert_fail@plt+0x8d20>
   13128:	mov	r5, r0
   1312c:	mov	r1, r6
   13130:	mov	r0, #1
   13134:	bl	1b3e8 <__assert_fail@plt+0xa118>
   13138:	mov	r1, #0
   1313c:	mov	r3, r5
   13140:	str	r0, [sp]
   13144:	mov	r2, r4
   13148:	mov	r0, r1
   1314c:	bl	110f0 <error@plt>
   13150:	add	sp, sp, #8
   13154:	ldrd	r4, [sp]
   13158:	ldr	r6, [sp, #8]
   1315c:	add	sp, sp, #12
   13160:	pop	{pc}		; (ldr pc, [sp], #4)
   13164:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13168:	mov	r4, r1
   1316c:	movw	r1, #57056	; 0xdee0
   13170:	movt	r1, #1
   13174:	strd	r6, [sp, #8]
   13178:	mov	r6, r0
   1317c:	mov	r7, r2
   13180:	mov	r0, #0
   13184:	strd	r8, [sp, #16]
   13188:	mov	r2, #5
   1318c:	strd	sl, [sp, #24]
   13190:	movw	sl, #61832	; 0xf188
   13194:	movt	sl, #2
   13198:	str	lr, [sp, #32]
   1319c:	sub	sp, sp, #12
   131a0:	bl	11060 <dcgettext@plt>
   131a4:	ldr	r1, [sl]
   131a8:	bl	10fb8 <fputs_unlocked@plt>
   131ac:	ldr	fp, [r6]
   131b0:	cmp	fp, #0
   131b4:	beq	13254 <__assert_fail@plt+0x1f84>
   131b8:	movw	r3, #57080	; 0xdef8
   131bc:	movt	r3, #1
   131c0:	mov	r9, #0
   131c4:	str	r3, [sp]
   131c8:	movw	r3, #57088	; 0xdf00
   131cc:	movt	r3, #1
   131d0:	mov	r5, r9
   131d4:	str	r3, [sp, #4]
   131d8:	b	13210 <__assert_fail@plt+0x1f40>
   131dc:	mov	r0, fp
   131e0:	mov	r9, r4
   131e4:	bl	1b3f8 <__assert_fail@plt+0xa128>
   131e8:	mov	r3, r0
   131ec:	mov	r1, #1
   131f0:	ldr	r2, [sp]
   131f4:	mov	r0, r8
   131f8:	bl	111bc <__fprintf_chk@plt>
   131fc:	ldr	fp, [r6, #4]!
   13200:	add	r5, r5, #1
   13204:	add	r4, r4, r7
   13208:	cmp	fp, #0
   1320c:	beq	13254 <__assert_fail@plt+0x1f84>
   13210:	cmp	r5, #0
   13214:	mov	r1, r4
   13218:	ldr	r8, [sl]
   1321c:	mov	r2, r7
   13220:	mov	r0, r9
   13224:	beq	131dc <__assert_fail@plt+0x1f0c>
   13228:	bl	11048 <memcmp@plt>
   1322c:	cmp	r0, #0
   13230:	bne	131dc <__assert_fail@plt+0x1f0c>
   13234:	mov	r0, fp
   13238:	bl	1b3f8 <__assert_fail@plt+0xa128>
   1323c:	mov	r3, r0
   13240:	mov	r1, #1
   13244:	ldr	r2, [sp, #4]
   13248:	mov	r0, r8
   1324c:	bl	111bc <__fprintf_chk@plt>
   13250:	b	131fc <__assert_fail@plt+0x1f2c>
   13254:	ldr	r0, [sl]
   13258:	ldr	r3, [r0, #20]
   1325c:	ldr	r2, [r0, #24]
   13260:	cmp	r3, r2
   13264:	bcs	13294 <__assert_fail@plt+0x1fc4>
   13268:	add	r1, r3, #1
   1326c:	mov	r2, #10
   13270:	str	r1, [r0, #20]
   13274:	strb	r2, [r3]
   13278:	add	sp, sp, #12
   1327c:	ldrd	r4, [sp]
   13280:	ldrd	r6, [sp, #8]
   13284:	ldrd	r8, [sp, #16]
   13288:	ldrd	sl, [sp, #24]
   1328c:	add	sp, sp, #32
   13290:	pop	{pc}		; (ldr pc, [sp], #4)
   13294:	mov	r1, #10
   13298:	add	sp, sp, #12
   1329c:	ldrd	r4, [sp]
   132a0:	ldrd	r6, [sp, #8]
   132a4:	ldrd	r8, [sp, #16]
   132a8:	ldrd	sl, [sp, #24]
   132ac:	ldr	lr, [sp, #32]
   132b0:	add	sp, sp, #36	; 0x24
   132b4:	b	111f8 <__overflow@plt>
   132b8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   132bc:	mov	r5, r1
   132c0:	strd	r6, [sp, #8]
   132c4:	mov	r6, r2
   132c8:	mov	r7, r3
   132cc:	strd	r8, [sp, #16]
   132d0:	mov	r8, r0
   132d4:	str	lr, [sp, #24]
   132d8:	sub	sp, sp, #12
   132dc:	ldrb	r4, [sp, #48]	; 0x30
   132e0:	cmp	r4, #0
   132e4:	bne	13390 <__assert_fail@plt+0x20c0>
   132e8:	ldr	r0, [r2]
   132ec:	cmp	r0, #0
   132f0:	movne	r9, r2
   132f4:	bne	13378 <__assert_fail@plt+0x20a8>
   132f8:	movw	r1, #56996	; 0xdea4
   132fc:	movt	r1, #1
   13300:	mov	r2, #5
   13304:	mov	r0, #0
   13308:	bl	11060 <dcgettext@plt>
   1330c:	mov	r9, r0
   13310:	mov	r2, r5
   13314:	mov	r1, #8
   13318:	mov	r0, #0
   1331c:	bl	19ff0 <__assert_fail@plt+0x8d20>
   13320:	mov	r4, r0
   13324:	mov	r1, r8
   13328:	mov	r0, #1
   1332c:	bl	1b3e8 <__assert_fail@plt+0xa118>
   13330:	mov	r1, #0
   13334:	mov	r3, r4
   13338:	str	r0, [sp]
   1333c:	mov	r2, r9
   13340:	mov	r0, r1
   13344:	bl	110f0 <error@plt>
   13348:	mov	r0, r6
   1334c:	mov	r1, r7
   13350:	ldr	r2, [sp, #40]	; 0x28
   13354:	bl	13164 <__assert_fail@plt+0x1e94>
   13358:	ldr	r3, [sp, #44]	; 0x2c
   1335c:	blx	r3
   13360:	mvn	r0, #0
   13364:	b	133ac <__assert_fail@plt+0x20dc>
   13368:	ldr	r0, [r9, #4]!
   1336c:	add	r4, r4, #1
   13370:	cmp	r0, #0
   13374:	beq	132f8 <__assert_fail@plt+0x2028>
   13378:	mov	r1, r5
   1337c:	bl	10fdc <strcmp@plt>
   13380:	cmp	r0, #0
   13384:	bne	13368 <__assert_fail@plt+0x2098>
   13388:	mov	r0, r4
   1338c:	b	133ac <__assert_fail@plt+0x20dc>
   13390:	mov	r2, r3
   13394:	mov	r1, r6
   13398:	ldr	r3, [sp, #40]	; 0x28
   1339c:	mov	r0, r5
   133a0:	bl	12f1c <__assert_fail@plt+0x1c4c>
   133a4:	cmp	r0, #0
   133a8:	blt	133c4 <__assert_fail@plt+0x20f4>
   133ac:	add	sp, sp, #12
   133b0:	ldrd	r4, [sp]
   133b4:	ldrd	r6, [sp, #8]
   133b8:	ldrd	r8, [sp, #16]
   133bc:	add	sp, sp, #24
   133c0:	pop	{pc}		; (ldr pc, [sp], #4)
   133c4:	cmn	r0, #1
   133c8:	beq	132f8 <__assert_fail@plt+0x2028>
   133cc:	movw	r1, #57024	; 0xdec0
   133d0:	movt	r1, #1
   133d4:	mov	r2, #5
   133d8:	mov	r0, #0
   133dc:	bl	11060 <dcgettext@plt>
   133e0:	mov	r9, r0
   133e4:	b	13310 <__assert_fail@plt+0x2040>
   133e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   133ec:	strd	r6, [sp, #8]
   133f0:	ldr	r7, [r1]
   133f4:	str	r8, [sp, #16]
   133f8:	str	lr, [sp, #20]
   133fc:	cmp	r7, #0
   13400:	beq	13440 <__assert_fail@plt+0x2170>
   13404:	mov	r6, r3
   13408:	mov	r8, r0
   1340c:	mov	r4, r2
   13410:	mov	r5, r1
   13414:	b	13424 <__assert_fail@plt+0x2154>
   13418:	ldr	r7, [r5, #4]!
   1341c:	cmp	r7, #0
   13420:	beq	13440 <__assert_fail@plt+0x2170>
   13424:	mov	r1, r4
   13428:	mov	r2, r6
   1342c:	mov	r0, r8
   13430:	add	r4, r4, r6
   13434:	bl	11048 <memcmp@plt>
   13438:	cmp	r0, #0
   1343c:	bne	13418 <__assert_fail@plt+0x2148>
   13440:	mov	r0, r7
   13444:	ldrd	r4, [sp]
   13448:	ldrd	r6, [sp, #8]
   1344c:	ldr	r8, [sp, #16]
   13450:	add	sp, sp, #20
   13454:	pop	{pc}		; (ldr pc, [sp], #4)
   13458:	ldrb	r3, [r0]
   1345c:	cmp	r3, #47	; 0x2f
   13460:	bne	13470 <__assert_fail@plt+0x21a0>
   13464:	ldrb	r3, [r0, #1]!
   13468:	cmp	r3, #47	; 0x2f
   1346c:	beq	13464 <__assert_fail@plt+0x2194>
   13470:	cmp	r3, #0
   13474:	beq	134a4 <__assert_fail@plt+0x21d4>
   13478:	mov	r2, r0
   1347c:	mov	r1, #0
   13480:	cmp	r3, #47	; 0x2f
   13484:	moveq	r1, #1
   13488:	beq	13498 <__assert_fail@plt+0x21c8>
   1348c:	cmp	r1, #0
   13490:	movne	r0, r2
   13494:	movne	r1, #0
   13498:	ldrb	r3, [r2, #1]!
   1349c:	cmp	r3, #0
   134a0:	bne	13480 <__assert_fail@plt+0x21b0>
   134a4:	bx	lr
   134a8:	str	r4, [sp, #-8]!
   134ac:	mov	r4, r0
   134b0:	str	lr, [sp, #4]
   134b4:	bl	11168 <strlen@plt>
   134b8:	cmp	r0, #1
   134bc:	bls	134d0 <__assert_fail@plt+0x2200>
   134c0:	sub	r2, r0, #1
   134c4:	ldrb	r1, [r4, r2]
   134c8:	cmp	r1, #47	; 0x2f
   134cc:	beq	134dc <__assert_fail@plt+0x220c>
   134d0:	ldr	r4, [sp]
   134d4:	add	sp, sp, #4
   134d8:	pop	{pc}		; (ldr pc, [sp], #4)
   134dc:	cmp	r2, #1
   134e0:	beq	134f4 <__assert_fail@plt+0x2224>
   134e4:	add	r1, r4, r0
   134e8:	ldrb	r1, [r1, #-2]
   134ec:	cmp	r1, #47	; 0x2f
   134f0:	beq	13504 <__assert_fail@plt+0x2234>
   134f4:	ldr	r4, [sp]
   134f8:	add	sp, sp, #4
   134fc:	mov	r0, r2
   13500:	pop	{pc}		; (ldr pc, [sp], #4)
   13504:	sub	r3, r0, #3
   13508:	rsb	r0, r4, #1
   1350c:	add	r3, r4, r3
   13510:	cmp	r3, r4
   13514:	add	r2, r0, r3
   13518:	beq	134f4 <__assert_fail@plt+0x2224>
   1351c:	ldrb	r1, [r3], #-1
   13520:	cmp	r1, #47	; 0x2f
   13524:	bne	134f4 <__assert_fail@plt+0x2224>
   13528:	b	13510 <__assert_fail@plt+0x2240>
   1352c:	movw	r3, #61872	; 0xf1b0
   13530:	movt	r3, #2
   13534:	str	r0, [r3]
   13538:	bx	lr
   1353c:	strd	r4, [sp, #-16]!
   13540:	movw	r4, #61840	; 0xf190
   13544:	movt	r4, #2
   13548:	ldr	r5, [r4]
   1354c:	str	r6, [sp, #8]
   13550:	str	lr, [sp, #12]
   13554:	sub	sp, sp, #8
   13558:	mov	r0, r5
   1355c:	bl	139f0 <__assert_fail@plt+0x2720>
   13560:	cmp	r0, #0
   13564:	bne	13614 <__assert_fail@plt+0x2344>
   13568:	mov	r0, r5
   1356c:	bl	1c5e8 <__assert_fail@plt+0xb318>
   13570:	cmp	r0, #0
   13574:	bne	135a4 <__assert_fail@plt+0x22d4>
   13578:	add	sp, sp, #8
   1357c:	ldrd	r4, [sp]
   13580:	ldr	r6, [sp, #8]
   13584:	ldr	lr, [sp, #12]
   13588:	add	sp, sp, #16
   1358c:	b	13684 <__assert_fail@plt+0x23b4>
   13590:	bl	13770 <__assert_fail@plt+0x24a0>
   13594:	cmp	r0, #0
   13598:	ldr	r0, [r4]
   1359c:	beq	13638 <__assert_fail@plt+0x2368>
   135a0:	bl	1c5e8 <__assert_fail@plt+0xb318>
   135a4:	mov	r2, #5
   135a8:	movw	r1, #57096	; 0xdf08
   135ac:	movt	r1, #1
   135b0:	mov	r0, #0
   135b4:	bl	11060 <dcgettext@plt>
   135b8:	movw	r3, #61872	; 0xf1b0
   135bc:	movt	r3, #2
   135c0:	ldr	r4, [r3]
   135c4:	mov	r5, r0
   135c8:	bl	11180 <__errno_location@plt>
   135cc:	mov	r2, r0
   135d0:	cmp	r4, #0
   135d4:	beq	13648 <__assert_fail@plt+0x2378>
   135d8:	ldr	r6, [r2]
   135dc:	mov	r0, r4
   135e0:	bl	1a87c <__assert_fail@plt+0x95ac>
   135e4:	mov	r3, r0
   135e8:	movw	r2, #57116	; 0xdf1c
   135ec:	movt	r2, #1
   135f0:	mov	r0, #0
   135f4:	str	r5, [sp]
   135f8:	mov	r1, r6
   135fc:	bl	110f0 <error@plt>
   13600:	bl	13684 <__assert_fail@plt+0x23b4>
   13604:	movw	r3, #61748	; 0xf134
   13608:	movt	r3, #2
   1360c:	ldr	r0, [r3]
   13610:	bl	11024 <_exit@plt>
   13614:	mov	r1, #1
   13618:	mov	r0, r5
   1361c:	mov	r2, #0
   13620:	mov	r3, #0
   13624:	str	r1, [sp]
   13628:	bl	13a90 <__assert_fail@plt+0x27c0>
   1362c:	cmp	r0, #0
   13630:	ldr	r0, [r4]
   13634:	beq	13590 <__assert_fail@plt+0x22c0>
   13638:	bl	1c5e8 <__assert_fail@plt+0xb318>
   1363c:	cmp	r0, #0
   13640:	beq	13578 <__assert_fail@plt+0x22a8>
   13644:	b	135a4 <__assert_fail@plt+0x22d4>
   13648:	mov	r3, r5
   1364c:	mov	r0, r4
   13650:	ldr	r1, [r2]
   13654:	movw	r2, #57120	; 0xdf20
   13658:	movt	r2, #1
   1365c:	bl	110f0 <error@plt>
   13660:	b	13600 <__assert_fail@plt+0x2330>
   13664:	movw	r3, #61876	; 0xf1b4
   13668:	movt	r3, #2
   1366c:	str	r0, [r3]
   13670:	bx	lr
   13674:	movw	r3, #61876	; 0xf1b4
   13678:	movt	r3, #2
   1367c:	strb	r0, [r3, #4]
   13680:	bx	lr
   13684:	movw	r3, #61844	; 0xf194
   13688:	movt	r3, #2
   1368c:	strd	r4, [sp, #-16]!
   13690:	ldr	r0, [r3]
   13694:	str	r6, [sp, #8]
   13698:	str	lr, [sp, #12]
   1369c:	sub	sp, sp, #8
   136a0:	bl	1c5e8 <__assert_fail@plt+0xb318>
   136a4:	cmp	r0, #0
   136a8:	beq	136d4 <__assert_fail@plt+0x2404>
   136ac:	movw	r4, #61876	; 0xf1b4
   136b0:	movt	r4, #2
   136b4:	ldrb	r6, [r4, #4]
   136b8:	bl	11180 <__errno_location@plt>
   136bc:	mov	r5, r0
   136c0:	cmp	r6, #0
   136c4:	beq	13700 <__assert_fail@plt+0x2430>
   136c8:	ldr	r3, [r0]
   136cc:	cmp	r3, #32
   136d0:	bne	13700 <__assert_fail@plt+0x2430>
   136d4:	movw	r3, #61832	; 0xf188
   136d8:	movt	r3, #2
   136dc:	ldr	r0, [r3]
   136e0:	bl	1c5e8 <__assert_fail@plt+0xb318>
   136e4:	cmp	r0, #0
   136e8:	bne	13748 <__assert_fail@plt+0x2478>
   136ec:	add	sp, sp, #8
   136f0:	ldrd	r4, [sp]
   136f4:	ldr	r6, [sp, #8]
   136f8:	add	sp, sp, #12
   136fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13700:	movw	r1, #57124	; 0xdf24
   13704:	movt	r1, #1
   13708:	mov	r2, #5
   1370c:	mov	r0, #0
   13710:	bl	11060 <dcgettext@plt>
   13714:	mov	r6, r0
   13718:	ldr	r0, [r4]
   1371c:	cmp	r0, #0
   13720:	beq	13758 <__assert_fail@plt+0x2488>
   13724:	ldr	r4, [r5]
   13728:	bl	1a87c <__assert_fail@plt+0x95ac>
   1372c:	mov	r3, r0
   13730:	movw	r2, #57116	; 0xdf1c
   13734:	movt	r2, #1
   13738:	mov	r0, #0
   1373c:	str	r6, [sp]
   13740:	mov	r1, r4
   13744:	bl	110f0 <error@plt>
   13748:	movw	r3, #61748	; 0xf134
   1374c:	movt	r3, #2
   13750:	ldr	r0, [r3]
   13754:	bl	11024 <_exit@plt>
   13758:	mov	r3, r6
   1375c:	movw	r2, #57120	; 0xdf20
   13760:	movt	r2, #1
   13764:	ldr	r1, [r5]
   13768:	bl	110f0 <error@plt>
   1376c:	b	13748 <__assert_fail@plt+0x2478>
   13770:	str	r4, [sp, #-8]!
   13774:	subs	r4, r0, #0
   13778:	str	lr, [sp, #4]
   1377c:	sub	sp, sp, #8
   13780:	beq	1379c <__assert_fail@plt+0x24cc>
   13784:	bl	11120 <__freading@plt>
   13788:	cmp	r0, #0
   1378c:	beq	1379c <__assert_fail@plt+0x24cc>
   13790:	ldr	r3, [r4]
   13794:	tst	r3, #256	; 0x100
   13798:	bne	137b4 <__assert_fail@plt+0x24e4>
   1379c:	mov	r0, r4
   137a0:	add	sp, sp, #8
   137a4:	ldr	r4, [sp]
   137a8:	ldr	lr, [sp, #4]
   137ac:	add	sp, sp, #8
   137b0:	b	10fe8 <fflush@plt>
   137b4:	mov	r1, #1
   137b8:	mov	r2, #0
   137bc:	mov	r3, #0
   137c0:	mov	r0, r4
   137c4:	str	r1, [sp]
   137c8:	bl	13a90 <__assert_fail@plt+0x27c0>
   137cc:	b	1379c <__assert_fail@plt+0x24cc>
   137d0:	ldr	r3, [r0, #16]
   137d4:	and	r3, r3, #61440	; 0xf000
   137d8:	cmp	r3, #32768	; 0x8000
   137dc:	beq	13824 <__assert_fail@plt+0x2554>
   137e0:	cmp	r3, #16384	; 0x4000
   137e4:	beq	1386c <__assert_fail@plt+0x259c>
   137e8:	cmp	r3, #40960	; 0xa000
   137ec:	beq	13894 <__assert_fail@plt+0x25c4>
   137f0:	cmp	r3, #24576	; 0x6000
   137f4:	beq	138a8 <__assert_fail@plt+0x25d8>
   137f8:	cmp	r3, #8192	; 0x2000
   137fc:	beq	13858 <__assert_fail@plt+0x2588>
   13800:	cmp	r3, #4096	; 0x1000
   13804:	beq	138bc <__assert_fail@plt+0x25ec>
   13808:	cmp	r3, #49152	; 0xc000
   1380c:	beq	13880 <__assert_fail@plt+0x25b0>
   13810:	movw	r1, #57260	; 0xdfac
   13814:	movt	r1, #1
   13818:	mov	r2, #5
   1381c:	mov	r0, #0
   13820:	b	11060 <dcgettext@plt>
   13824:	ldrd	r2, [r0, #48]	; 0x30
   13828:	orrs	r3, r2, r3
   1382c:	bne	13844 <__assert_fail@plt+0x2574>
   13830:	movw	r1, #57136	; 0xdf30
   13834:	movt	r1, #1
   13838:	mov	r2, #5
   1383c:	mov	r0, #0
   13840:	b	11060 <dcgettext@plt>
   13844:	movw	r1, #57156	; 0xdf44
   13848:	movt	r1, #1
   1384c:	mov	r2, #5
   13850:	mov	r0, #0
   13854:	b	11060 <dcgettext@plt>
   13858:	movw	r1, #57220	; 0xdf84
   1385c:	movt	r1, #1
   13860:	mov	r2, #5
   13864:	mov	r0, #0
   13868:	b	11060 <dcgettext@plt>
   1386c:	movw	r1, #57172	; 0xdf54
   13870:	movt	r1, #1
   13874:	mov	r2, #5
   13878:	mov	r0, #0
   1387c:	b	11060 <dcgettext@plt>
   13880:	movw	r1, #57252	; 0xdfa4
   13884:	movt	r1, #1
   13888:	mov	r2, #5
   1388c:	mov	r0, #0
   13890:	b	11060 <dcgettext@plt>
   13894:	movw	r1, #57184	; 0xdf60
   13898:	movt	r1, #1
   1389c:	mov	r2, #5
   138a0:	mov	r0, #0
   138a4:	b	11060 <dcgettext@plt>
   138a8:	movw	r1, #57200	; 0xdf70
   138ac:	movt	r1, #1
   138b0:	mov	r2, #5
   138b4:	mov	r0, #0
   138b8:	b	11060 <dcgettext@plt>
   138bc:	movw	r1, #57244	; 0xdf9c
   138c0:	movt	r1, #1
   138c4:	mov	r2, #5
   138c8:	mov	r0, #0
   138cc:	b	11060 <dcgettext@plt>
   138d0:	str	r4, [sp, #-8]!
   138d4:	str	lr, [sp, #4]
   138d8:	bl	138f4 <__assert_fail@plt+0x2624>
   138dc:	cmp	r0, #0
   138e0:	beq	138f0 <__assert_fail@plt+0x2620>
   138e4:	ldr	r4, [sp]
   138e8:	add	sp, sp, #4
   138ec:	pop	{pc}		; (ldr pc, [sp], #4)
   138f0:	bl	1c38c <__assert_fail@plt+0xb0bc>
   138f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138f8:	strd	r6, [sp, #8]
   138fc:	mov	r6, r1
   13900:	mov	r7, r0
   13904:	strd	r8, [sp, #16]
   13908:	mov	r9, r2
   1390c:	strd	sl, [sp, #24]
   13910:	str	lr, [sp, #32]
   13914:	sub	sp, sp, #4
   13918:	bl	13458 <__assert_fail@plt+0x2188>
   1391c:	mov	r4, r0
   13920:	bl	134a8 <__assert_fail@plt+0x21d8>
   13924:	mov	r5, r0
   13928:	mov	r0, r6
   1392c:	bl	11168 <strlen@plt>
   13930:	sub	r4, r4, r7
   13934:	cmp	r5, #0
   13938:	add	r4, r4, r5
   1393c:	mov	r8, r0
   13940:	beq	139d8 <__assert_fail@plt+0x2708>
   13944:	add	r3, r7, r4
   13948:	ldrb	r3, [r3, #-1]
   1394c:	cmp	r3, #47	; 0x2f
   13950:	beq	139cc <__assert_fail@plt+0x26fc>
   13954:	ldrb	r3, [r6]
   13958:	cmp	r3, #47	; 0x2f
   1395c:	beq	139cc <__assert_fail@plt+0x26fc>
   13960:	mov	r5, #1
   13964:	mov	sl, #47	; 0x2f
   13968:	add	r0, r8, #1
   1396c:	add	r0, r0, r4
   13970:	add	r0, r0, r5
   13974:	bl	1c554 <__assert_fail@plt+0xb284>
   13978:	subs	fp, r0, #0
   1397c:	beq	139ac <__assert_fail@plt+0x26dc>
   13980:	mov	r2, r4
   13984:	mov	r1, r7
   13988:	bl	11138 <mempcpy@plt>
   1398c:	cmp	r9, #0
   13990:	mov	r2, r8
   13994:	strb	sl, [r0], r5
   13998:	mov	r1, r6
   1399c:	strne	r0, [r9]
   139a0:	bl	11138 <mempcpy@plt>
   139a4:	mov	r3, #0
   139a8:	strb	r3, [r0]
   139ac:	mov	r0, fp
   139b0:	add	sp, sp, #4
   139b4:	ldrd	r4, [sp]
   139b8:	ldrd	r6, [sp, #8]
   139bc:	ldrd	r8, [sp, #16]
   139c0:	ldrd	sl, [sp, #24]
   139c4:	add	sp, sp, #32
   139c8:	pop	{pc}		; (ldr pc, [sp], #4)
   139cc:	mov	r5, #0
   139d0:	mov	sl, r5
   139d4:	b	13968 <__assert_fail@plt+0x2698>
   139d8:	ldrb	r3, [r6]
   139dc:	cmp	r3, #47	; 0x2f
   139e0:	moveq	r5, #1
   139e4:	movne	sl, #0
   139e8:	moveq	sl, #46	; 0x2e
   139ec:	b	13968 <__assert_fail@plt+0x2698>
   139f0:	ldr	r3, [r0, #16]
   139f4:	ldr	r2, [r0, #20]
   139f8:	cmp	r2, r3
   139fc:	bhi	13a28 <__assert_fail@plt+0x2758>
   13a00:	ldm	r0, {r1, r2, r3}
   13a04:	tst	r1, #256	; 0x100
   13a08:	sub	r3, r3, r2
   13a0c:	beq	13a20 <__assert_fail@plt+0x2750>
   13a10:	ldr	r1, [r0, #36]	; 0x24
   13a14:	ldr	r2, [r0, #44]	; 0x2c
   13a18:	sub	r2, r2, r1
   13a1c:	add	r3, r3, r2
   13a20:	mov	r0, r3
   13a24:	bx	lr
   13a28:	mov	r0, #0
   13a2c:	bx	lr
   13a30:	strd	r4, [sp, #-12]!
   13a34:	mov	r5, r0
   13a38:	str	lr, [sp, #8]
   13a3c:	sub	sp, sp, #12
   13a40:	bl	11180 <__errno_location@plt>
   13a44:	mov	r4, r0
   13a48:	mov	r2, #0
   13a4c:	ldr	r3, [r4]
   13a50:	mov	r0, r5
   13a54:	str	r2, [r4]
   13a58:	str	r3, [sp]
   13a5c:	str	r3, [sp, #4]
   13a60:	bl	1100c <free@plt>
   13a64:	ldr	r3, [r4]
   13a68:	add	r2, sp, #8
   13a6c:	clz	r3, r3
   13a70:	lsr	r3, r3, #5
   13a74:	add	r3, r2, r3, lsl #2
   13a78:	ldr	r3, [r3, #-8]
   13a7c:	str	r3, [r4]
   13a80:	add	sp, sp, #12
   13a84:	ldrd	r4, [sp]
   13a88:	add	sp, sp, #8
   13a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13a94:	mov	r4, r0
   13a98:	ldr	ip, [r0, #4]
   13a9c:	strd	r6, [sp, #8]
   13aa0:	str	lr, [sp, #20]
   13aa4:	ldr	lr, [r0, #8]
   13aa8:	str	r8, [sp, #16]
   13aac:	sub	sp, sp, #8
   13ab0:	ldr	r5, [sp, #32]
   13ab4:	cmp	lr, ip
   13ab8:	beq	13ae0 <__assert_fail@plt+0x2810>
   13abc:	mov	r0, r4
   13ac0:	str	r5, [sp, #32]
   13ac4:	add	sp, sp, #8
   13ac8:	ldrd	r4, [sp]
   13acc:	ldrd	r6, [sp, #8]
   13ad0:	ldr	r8, [sp, #16]
   13ad4:	ldr	lr, [sp, #20]
   13ad8:	add	sp, sp, #24
   13adc:	b	111d4 <fseeko64@plt>
   13ae0:	ldr	ip, [r0, #16]
   13ae4:	ldr	lr, [r0, #20]
   13ae8:	cmp	lr, ip
   13aec:	bne	13abc <__assert_fail@plt+0x27ec>
   13af0:	ldr	r8, [r0, #36]	; 0x24
   13af4:	cmp	r8, #0
   13af8:	bne	13abc <__assert_fail@plt+0x27ec>
   13afc:	mov	r6, r2
   13b00:	mov	r7, r3
   13b04:	bl	111b0 <fileno@plt>
   13b08:	mov	r2, r6
   13b0c:	mov	r3, r7
   13b10:	str	r5, [sp]
   13b14:	bl	110c0 <lseek64@plt>
   13b18:	mvn	r3, #0
   13b1c:	mvn	r2, #0
   13b20:	cmp	r1, r3
   13b24:	cmpeq	r0, r2
   13b28:	beq	13b58 <__assert_fail@plt+0x2888>
   13b2c:	ldr	r3, [r4]
   13b30:	strd	r0, [r4, #80]	; 0x50
   13b34:	bic	r3, r3, #16
   13b38:	str	r3, [r4]
   13b3c:	mov	r0, r8
   13b40:	add	sp, sp, #8
   13b44:	ldrd	r4, [sp]
   13b48:	ldrd	r6, [sp, #8]
   13b4c:	ldr	r8, [sp, #16]
   13b50:	add	sp, sp, #20
   13b54:	pop	{pc}		; (ldr pc, [sp], #4)
   13b58:	mvn	r8, #0
   13b5c:	b	13b3c <__assert_fail@plt+0x286c>
   13b60:	strd	r4, [sp, #-8]!
   13b64:	ldrd	r2, [r1, #8]
   13b68:	ldrd	r4, [r0, #8]
   13b6c:	cmp	r5, r3
   13b70:	cmpeq	r4, r2
   13b74:	movne	r0, #0
   13b78:	bne	13b94 <__assert_fail@plt+0x28c4>
   13b7c:	ldrd	r4, [r0]
   13b80:	ldrd	r2, [r1]
   13b84:	cmp	r5, r3
   13b88:	cmpeq	r4, r2
   13b8c:	moveq	r0, #1
   13b90:	movne	r0, #0
   13b94:	ldrd	r4, [sp]
   13b98:	add	sp, sp, #8
   13b9c:	bx	lr
   13ba0:	mov	r2, r1
   13ba4:	mov	r3, #0
   13ba8:	str	r4, [sp, #-8]!
   13bac:	ldrd	r0, [r0, #8]
   13bb0:	str	lr, [sp, #4]
   13bb4:	bl	1cc88 <__assert_fail@plt+0xb9b8>
   13bb8:	ldr	r4, [sp]
   13bbc:	add	sp, sp, #4
   13bc0:	mov	r0, r2
   13bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   13bc8:	mov	r2, r1
   13bcc:	mov	r3, #0
   13bd0:	str	r4, [sp, #-8]!
   13bd4:	ldrd	r0, [r0]
   13bd8:	str	lr, [sp, #4]
   13bdc:	bl	1cc88 <__assert_fail@plt+0xb9b8>
   13be0:	ldr	r4, [sp]
   13be4:	add	sp, sp, #4
   13be8:	mov	r0, r2
   13bec:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf0:	strd	r4, [sp, #-8]!
   13bf4:	ldrd	r2, [r1]
   13bf8:	ldrd	r4, [r0]
   13bfc:	cmp	r5, r3
   13c00:	cmpeq	r4, r2
   13c04:	ldrd	r4, [sp]
   13c08:	add	sp, sp, #8
   13c0c:	moveq	r0, #1
   13c10:	movne	r0, #0
   13c14:	bx	lr
   13c18:	ldr	r2, [r0]
   13c1c:	ldr	r3, [r1]
   13c20:	ldrd	r0, [r2, #160]	; 0xa0
   13c24:	ldrd	r2, [r3, #160]	; 0xa0
   13c28:	cmp	r1, r3
   13c2c:	cmpeq	r0, r2
   13c30:	movhi	r0, #1
   13c34:	movls	r0, #0
   13c38:	movcc	r3, #1
   13c3c:	movcs	r3, #0
   13c40:	sub	r0, r0, r3
   13c44:	bx	lr
   13c48:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13c4c:	mov	r5, r2
   13c50:	mov	r4, r1
   13c54:	ldr	r2, [r0, #40]	; 0x28
   13c58:	strd	r6, [sp, #8]
   13c5c:	mov	r6, r0
   13c60:	str	r8, [sp, #16]
   13c64:	str	lr, [sp, #20]
   13c68:	ldr	r0, [r0, #8]
   13c6c:	cmp	r2, r5
   13c70:	ldr	r7, [r6, #44]	; 0x2c
   13c74:	bcs	13c9c <__assert_fail@plt+0x29cc>
   13c78:	add	r1, r5, #40	; 0x28
   13c7c:	cmn	r1, #-1073741823	; 0xc0000001
   13c80:	str	r1, [r6, #40]	; 0x28
   13c84:	bhi	13d1c <__assert_fail@plt+0x2a4c>
   13c88:	lsl	r1, r1, #2
   13c8c:	bl	1c590 <__assert_fail@plt+0xb2c0>
   13c90:	cmp	r0, #0
   13c94:	strne	r0, [r6, #8]
   13c98:	beq	13d18 <__assert_fail@plt+0x2a48>
   13c9c:	cmp	r4, #0
   13ca0:	movne	r2, r0
   13ca4:	beq	13cb8 <__assert_fail@plt+0x29e8>
   13ca8:	str	r4, [r2], #4
   13cac:	ldr	r4, [r4, #8]
   13cb0:	cmp	r4, #0
   13cb4:	bne	13ca8 <__assert_fail@plt+0x29d8>
   13cb8:	mov	r3, r7
   13cbc:	mov	r2, #4
   13cc0:	mov	r1, r5
   13cc4:	bl	11258 <qsort@plt>
   13cc8:	ldr	lr, [r6, #8]
   13ccc:	subs	r3, r5, #1
   13cd0:	ldr	r0, [lr]
   13cd4:	moveq	r2, r0
   13cd8:	beq	13cfc <__assert_fail@plt+0x2a2c>
   13cdc:	mov	r2, lr
   13ce0:	ldr	r1, [r2]
   13ce4:	subs	r3, r3, #1
   13ce8:	ldr	ip, [r2, #4]!
   13cec:	str	ip, [r1, #8]
   13cf0:	bne	13ce0 <__assert_fail@plt+0x2a10>
   13cf4:	add	r5, lr, r5, lsl #2
   13cf8:	ldr	r2, [r5, #-4]
   13cfc:	mov	r3, #0
   13d00:	str	r3, [r2, #8]
   13d04:	ldrd	r4, [sp]
   13d08:	ldrd	r6, [sp, #8]
   13d0c:	ldr	r8, [sp, #16]
   13d10:	add	sp, sp, #20
   13d14:	pop	{pc}		; (ldr pc, [sp], #4)
   13d18:	ldr	r0, [r6, #8]
   13d1c:	bl	13a30 <__assert_fail@plt+0x2760>
   13d20:	mov	r3, #0
   13d24:	mov	r0, r4
   13d28:	str	r3, [r6, #8]
   13d2c:	str	r3, [r6, #40]	; 0x28
   13d30:	b	13d04 <__assert_fail@plt+0x2a34>
   13d34:	strd	r4, [sp, #-20]!	; 0xffffffec
   13d38:	ldr	r5, [r0, #44]	; 0x2c
   13d3c:	ldr	r3, [r5, #48]	; 0x30
   13d40:	strd	r6, [sp, #8]
   13d44:	str	lr, [sp, #16]
   13d48:	sub	sp, sp, #100	; 0x64
   13d4c:	tst	r3, #512	; 0x200
   13d50:	beq	13de0 <__assert_fail@plt+0x2b10>
   13d54:	ldr	r4, [r5, #52]	; 0x34
   13d58:	mov	r7, r1
   13d5c:	mov	r6, r0
   13d60:	cmp	r4, #0
   13d64:	beq	13d8c <__assert_fail@plt+0x2abc>
   13d68:	ldrd	r2, [r6, #64]	; 0x40
   13d6c:	add	r1, sp, #8
   13d70:	mov	r0, r4
   13d74:	strd	r2, [sp, #8]
   13d78:	bl	167c8 <__assert_fail@plt+0x54f8>
   13d7c:	cmp	r0, #0
   13d80:	beq	13dc4 <__assert_fail@plt+0x2af4>
   13d84:	ldr	r0, [r0, #8]
   13d88:	b	13de4 <__assert_fail@plt+0x2b14>
   13d8c:	movw	r0, #14896	; 0x3a30
   13d90:	movt	r0, #1
   13d94:	mov	r1, r4
   13d98:	movw	r3, #15344	; 0x3bf0
   13d9c:	movt	r3, #1
   13da0:	movw	r2, #15304	; 0x3bc8
   13da4:	movt	r2, #1
   13da8:	str	r0, [sp]
   13dac:	mov	r0, #13
   13db0:	bl	16b4c <__assert_fail@plt+0x587c>
   13db4:	cmp	r0, #0
   13db8:	mov	r4, r0
   13dbc:	str	r0, [r5, #52]	; 0x34
   13dc0:	bne	13d68 <__assert_fail@plt+0x2a98>
   13dc4:	cmp	r7, #0
   13dc8:	blt	13de0 <__assert_fail@plt+0x2b10>
   13dcc:	mov	r0, r7
   13dd0:	add	r1, sp, #8
   13dd4:	bl	10fa0 <fstatfs64@plt>
   13dd8:	cmp	r0, #0
   13ddc:	beq	13df8 <__assert_fail@plt+0x2b28>
   13de0:	mov	r0, #0
   13de4:	add	sp, sp, #100	; 0x64
   13de8:	ldrd	r4, [sp]
   13dec:	ldrd	r6, [sp, #8]
   13df0:	add	sp, sp, #16
   13df4:	pop	{pc}		; (ldr pc, [sp], #4)
   13df8:	cmp	r4, #0
   13dfc:	beq	13e3c <__assert_fail@plt+0x2b6c>
   13e00:	mov	r0, #16
   13e04:	bl	1c554 <__assert_fail@plt+0xb284>
   13e08:	subs	r5, r0, #0
   13e0c:	beq	13e3c <__assert_fail@plt+0x2b6c>
   13e10:	ldr	ip, [sp, #8]
   13e14:	mov	r0, r4
   13e18:	mov	r1, r5
   13e1c:	ldrd	r2, [r6, #64]	; 0x40
   13e20:	strd	r2, [r5]
   13e24:	str	ip, [r5, #8]
   13e28:	bl	173b4 <__assert_fail@plt+0x60e4>
   13e2c:	cmp	r0, #0
   13e30:	beq	13e44 <__assert_fail@plt+0x2b74>
   13e34:	cmp	r5, r0
   13e38:	bne	13e50 <__assert_fail@plt+0x2b80>
   13e3c:	ldr	r0, [sp, #8]
   13e40:	b	13de4 <__assert_fail@plt+0x2b14>
   13e44:	mov	r0, r5
   13e48:	bl	13a30 <__assert_fail@plt+0x2760>
   13e4c:	b	13e3c <__assert_fail@plt+0x2b6c>
   13e50:	bl	11294 <abort@plt>
   13e54:	ldr	ip, [r2, #48]	; 0x30
   13e58:	strd	r4, [sp, #-16]!
   13e5c:	mov	r4, r2
   13e60:	add	r5, r2, #64	; 0x40
   13e64:	ldr	r2, [r2, #24]
   13e68:	str	r6, [sp, #8]
   13e6c:	str	lr, [sp, #12]
   13e70:	sub	sp, sp, #8
   13e74:	cmp	ip, #0
   13e78:	bne	13ef0 <__assert_fail@plt+0x2c20>
   13e7c:	tst	r1, #1
   13e80:	beq	13ef0 <__assert_fail@plt+0x2c20>
   13e84:	mov	r1, r2
   13e88:	mov	r0, #3
   13e8c:	mov	r2, r5
   13e90:	bl	11270 <__xstat64@plt>
   13e94:	cmp	r0, #0
   13e98:	beq	13f1c <__assert_fail@plt+0x2c4c>
   13e9c:	bl	11180 <__errno_location@plt>
   13ea0:	ldr	r3, [r0]
   13ea4:	mov	r6, r0
   13ea8:	cmp	r3, #2
   13eac:	bne	13ed4 <__assert_fail@plt+0x2c04>
   13eb0:	mov	r2, r5
   13eb4:	mov	r0, #3
   13eb8:	ldr	r1, [r4, #24]
   13ebc:	bl	112ac <__lxstat64@plt>
   13ec0:	subs	r3, r0, #0
   13ec4:	moveq	r0, #13
   13ec8:	streq	r3, [r6]
   13ecc:	beq	13f40 <__assert_fail@plt+0x2c70>
   13ed0:	ldr	r3, [r6]
   13ed4:	mov	r0, r5
   13ed8:	mov	r2, #104	; 0x68
   13edc:	str	r3, [r4, #32]
   13ee0:	mov	r1, #0
   13ee4:	bl	11198 <memset@plt>
   13ee8:	mov	r0, #10
   13eec:	b	13f40 <__assert_fail@plt+0x2c70>
   13ef0:	ubfx	ip, r1, #1, #1
   13ef4:	orrs	r3, r3, ip
   13ef8:	bne	13e84 <__assert_fail@plt+0x2bb4>
   13efc:	mov	ip, #256	; 0x100
   13f00:	mov	r1, r0
   13f04:	mov	r3, r5
   13f08:	mov	r0, #3
   13f0c:	str	ip, [sp]
   13f10:	bl	11090 <__fxstatat64@plt>
   13f14:	cmp	r0, #0
   13f18:	bne	13f9c <__assert_fail@plt+0x2ccc>
   13f1c:	ldr	r3, [r4, #80]	; 0x50
   13f20:	and	r3, r3, #61440	; 0xf000
   13f24:	cmp	r3, #16384	; 0x4000
   13f28:	beq	13f54 <__assert_fail@plt+0x2c84>
   13f2c:	cmp	r3, #40960	; 0xa000
   13f30:	beq	13fa8 <__assert_fail@plt+0x2cd8>
   13f34:	cmp	r3, #32768	; 0x8000
   13f38:	movne	r0, #3
   13f3c:	moveq	r0, #8
   13f40:	add	sp, sp, #8
   13f44:	ldrd	r4, [sp]
   13f48:	ldr	r6, [sp, #8]
   13f4c:	add	sp, sp, #12
   13f50:	pop	{pc}		; (ldr pc, [sp], #4)
   13f54:	ldrb	r3, [r4, #168]	; 0xa8
   13f58:	cmp	r3, #46	; 0x2e
   13f5c:	bne	13f80 <__assert_fail@plt+0x2cb0>
   13f60:	ldrb	r3, [r4, #169]	; 0xa9
   13f64:	cmp	r3, #0
   13f68:	beq	13f88 <__assert_fail@plt+0x2cb8>
   13f6c:	ldr	r3, [r4, #168]	; 0xa8
   13f70:	bic	r3, r3, #-16777216	; 0xff000000
   13f74:	bic	r3, r3, #255	; 0xff
   13f78:	cmp	r3, #11776	; 0x2e00
   13f7c:	beq	13f88 <__assert_fail@plt+0x2cb8>
   13f80:	mov	r0, #1
   13f84:	b	13f40 <__assert_fail@plt+0x2c70>
   13f88:	ldr	r3, [r4, #48]	; 0x30
   13f8c:	cmp	r3, #0
   13f90:	moveq	r0, #1
   13f94:	movne	r0, #5
   13f98:	b	13f40 <__assert_fail@plt+0x2c70>
   13f9c:	bl	11180 <__errno_location@plt>
   13fa0:	ldr	r3, [r0]
   13fa4:	b	13ed4 <__assert_fail@plt+0x2c04>
   13fa8:	mov	r0, #12
   13fac:	b	13f40 <__assert_fail@plt+0x2c70>
   13fb0:	movw	r3, #258	; 0x102
   13fb4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13fb8:	tst	r0, r3
   13fbc:	strd	r6, [sp, #8]
   13fc0:	strd	r8, [sp, #16]
   13fc4:	mov	r8, r2
   13fc8:	str	sl, [sp, #24]
   13fcc:	mov	sl, r1
   13fd0:	str	lr, [sp, #28]
   13fd4:	beq	14058 <__assert_fail@plt+0x2d88>
   13fd8:	mov	r0, #24
   13fdc:	bl	1c554 <__assert_fail@plt+0xb284>
   13fe0:	subs	r9, r0, #0
   13fe4:	beq	1407c <__assert_fail@plt+0x2dac>
   13fe8:	ldrd	r6, [r8, #64]	; 0x40
   13fec:	mov	r1, r9
   13ff0:	ldrd	r4, [r8, #160]	; 0xa0
   13ff4:	ldr	r0, [sl]
   13ff8:	strd	r6, [r9]
   13ffc:	str	r8, [r9, #16]
   14000:	strd	r4, [r9, #8]
   14004:	bl	173b4 <__assert_fail@plt+0x60e4>
   14008:	cmp	r9, r0
   1400c:	mov	r4, r0
   14010:	beq	1403c <__assert_fail@plt+0x2d6c>
   14014:	mov	r0, r9
   14018:	bl	13a30 <__assert_fail@plt+0x2760>
   1401c:	cmp	r4, #0
   14020:	beq	1407c <__assert_fail@plt+0x2dac>
   14024:	ldr	r3, [r4, #16]
   14028:	mov	r2, #2
   1402c:	mov	r0, #1
   14030:	str	r3, [r8]
   14034:	strh	r2, [r8, #56]	; 0x38
   14038:	b	14040 <__assert_fail@plt+0x2d70>
   1403c:	mov	r0, #1
   14040:	ldrd	r4, [sp]
   14044:	ldrd	r6, [sp, #8]
   14048:	ldrd	r8, [sp, #16]
   1404c:	ldr	sl, [sp, #24]
   14050:	add	sp, sp, #28
   14054:	pop	{pc}		; (ldr pc, [sp], #4)
   14058:	add	r1, r2, #64	; 0x40
   1405c:	ldr	r0, [sl]
   14060:	bl	1c698 <__assert_fail@plt+0xb3c8>
   14064:	cmp	r0, #0
   14068:	beq	1403c <__assert_fail@plt+0x2d6c>
   1406c:	mov	r3, #2
   14070:	str	r8, [r8]
   14074:	strh	r3, [r8, #56]	; 0x38
   14078:	b	14040 <__assert_fail@plt+0x2d70>
   1407c:	mov	r0, #0
   14080:	b	14040 <__assert_fail@plt+0x2d70>
   14084:	movw	r3, #258	; 0x102
   14088:	mov	ip, r1
   1408c:	strd	r4, [sp, #-12]!
   14090:	tst	r0, r3
   14094:	str	lr, [sp, #8]
   14098:	sub	sp, sp, #28
   1409c:	bne	140ec <__assert_fail@plt+0x2e1c>
   140a0:	ldr	r3, [r2, #4]
   140a4:	cmp	r3, #0
   140a8:	beq	140dc <__assert_fail@plt+0x2e0c>
   140ac:	ldr	r1, [r3, #48]	; 0x30
   140b0:	cmp	r1, #0
   140b4:	blt	140dc <__assert_fail@plt+0x2e0c>
   140b8:	ldr	ip, [ip]
   140bc:	ldrd	r0, [ip, #16]
   140c0:	orrs	r1, r0, r1
   140c4:	beq	1414c <__assert_fail@plt+0x2e7c>
   140c8:	ldrd	r4, [ip]
   140cc:	ldrd	r0, [r2, #160]	; 0xa0
   140d0:	cmp	r5, r1
   140d4:	cmpeq	r4, r0
   140d8:	beq	14124 <__assert_fail@plt+0x2e54>
   140dc:	add	sp, sp, #28
   140e0:	ldrd	r4, [sp]
   140e4:	add	sp, sp, #8
   140e8:	pop	{pc}		; (ldr pc, [sp], #4)
   140ec:	ldrd	r4, [r2, #64]	; 0x40
   140f0:	mov	r1, sp
   140f4:	ldrd	r2, [r2, #160]	; 0xa0
   140f8:	ldr	r0, [ip]
   140fc:	strd	r4, [sp]
   14100:	strd	r2, [sp, #8]
   14104:	bl	175d8 <__assert_fail@plt+0x6308>
   14108:	cmp	r0, #0
   1410c:	beq	1414c <__assert_fail@plt+0x2e7c>
   14110:	bl	13a30 <__assert_fail@plt+0x2760>
   14114:	add	sp, sp, #28
   14118:	ldrd	r4, [sp]
   1411c:	add	sp, sp, #8
   14120:	pop	{pc}		; (ldr pc, [sp], #4)
   14124:	ldrd	r0, [ip, #8]
   14128:	ldrd	r4, [r2, #64]	; 0x40
   1412c:	cmp	r1, r5
   14130:	cmpeq	r0, r4
   14134:	bne	140dc <__assert_fail@plt+0x2e0c>
   14138:	ldrd	r0, [r3, #64]	; 0x40
   1413c:	ldrd	r2, [r3, #160]	; 0xa0
   14140:	strd	r2, [ip]
   14144:	strd	r0, [ip, #8]
   14148:	b	140dc <__assert_fail@plt+0x2e0c>
   1414c:	bl	11294 <abort@plt>
   14150:	ldr	r3, [r0, #48]	; 0x30
   14154:	strd	r4, [sp, #-16]!
   14158:	add	r5, r0, #60	; 0x3c
   1415c:	str	r6, [sp, #8]
   14160:	str	lr, [sp, #12]
   14164:	ands	r6, r3, #4
   14168:	movne	r6, #0
   1416c:	bne	141a8 <__assert_fail@plt+0x2ed8>
   14170:	tst	r3, #512	; 0x200
   14174:	mov	r4, r0
   14178:	beq	141d8 <__assert_fail@plt+0x2f08>
   1417c:	mov	r0, r5
   14180:	ldr	r1, [r4, #32]
   14184:	bl	1794c <__assert_fail@plt+0x667c>
   14188:	cmp	r0, #0
   1418c:	bge	141ec <__assert_fail@plt+0x2f1c>
   14190:	mvn	r3, #99	; 0x63
   14194:	str	r3, [r4, #32]
   14198:	b	141a8 <__assert_fail@plt+0x2ed8>
   1419c:	bl	17994 <__assert_fail@plt+0x66c4>
   141a0:	cmp	r0, #0
   141a4:	bge	141d0 <__assert_fail@plt+0x2f00>
   141a8:	mov	r0, r5
   141ac:	bl	17944 <__assert_fail@plt+0x6674>
   141b0:	cmp	r0, #0
   141b4:	mov	r0, r5
   141b8:	beq	1419c <__assert_fail@plt+0x2ecc>
   141bc:	mov	r0, r6
   141c0:	ldrd	r4, [sp]
   141c4:	ldr	r6, [sp, #8]
   141c8:	add	sp, sp, #12
   141cc:	pop	{pc}		; (ldr pc, [sp], #4)
   141d0:	bl	112a0 <close@plt>
   141d4:	b	141a8 <__assert_fail@plt+0x2ed8>
   141d8:	ldr	r0, [r0, #28]
   141dc:	bl	1124c <fchdir@plt>
   141e0:	adds	r6, r0, #0
   141e4:	movne	r6, #1
   141e8:	b	141a8 <__assert_fail@plt+0x2ed8>
   141ec:	bl	112a0 <close@plt>
   141f0:	mvn	r3, #99	; 0x63
   141f4:	str	r3, [r4, #32]
   141f8:	b	141a8 <__assert_fail@plt+0x2ed8>
   141fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14200:	mov	r5, r0
   14204:	mov	r4, r2
   14208:	strd	r6, [sp, #8]
   1420c:	strd	r8, [sp, #16]
   14210:	mov	r8, r1
   14214:	ldr	r9, [r0, #48]	; 0x30
   14218:	str	sl, [sp, #24]
   1421c:	subs	sl, r3, #0
   14220:	str	lr, [sp, #28]
   14224:	sub	sp, sp, #104	; 0x68
   14228:	and	r6, r9, #4
   1422c:	beq	14328 <__assert_fail@plt+0x3058>
   14230:	movw	r1, #56400	; 0xdc50
   14234:	movt	r1, #1
   14238:	mov	r0, sl
   1423c:	bl	10fdc <strcmp@plt>
   14240:	cmp	r0, #0
   14244:	bne	14328 <__assert_fail@plt+0x3058>
   14248:	cmp	r6, #0
   1424c:	bne	14368 <__assert_fail@plt+0x3098>
   14250:	cmp	r4, #0
   14254:	bge	144a4 <__assert_fail@plt+0x31d4>
   14258:	tst	r9, #512	; 0x200
   1425c:	beq	143ac <__assert_fail@plt+0x30dc>
   14260:	add	r6, r5, #60	; 0x3c
   14264:	mov	r0, r6
   14268:	bl	17944 <__assert_fail@plt+0x6674>
   1426c:	cmp	r0, #0
   14270:	beq	1442c <__assert_fail@plt+0x315c>
   14274:	lsl	r2, r9, #11
   14278:	mov	r6, #1
   1427c:	and	r2, r2, #32768	; 0x8000
   14280:	orr	r2, r2, #540672	; 0x84000
   14284:	orr	r2, r2, #2304	; 0x900
   14288:	mov	r1, sl
   1428c:	ldr	r0, [r5, #32]
   14290:	bl	179e4 <__assert_fail@plt+0x6714>
   14294:	mov	r7, r0
   14298:	cmp	r7, #0
   1429c:	blt	1449c <__assert_fail@plt+0x31cc>
   142a0:	ldr	r9, [r5, #48]	; 0x30
   142a4:	tst	r9, #2
   142a8:	beq	14344 <__assert_fail@plt+0x3074>
   142ac:	mov	r2, sp
   142b0:	mov	r1, r7
   142b4:	mov	r0, #3
   142b8:	bl	110a8 <__fxstat64@plt>
   142bc:	cmp	r0, #0
   142c0:	bne	143a4 <__assert_fail@plt+0x30d4>
   142c4:	ldrd	r2, [sp]
   142c8:	ldrd	r0, [r8, #64]	; 0x40
   142cc:	cmp	r1, r3
   142d0:	cmpeq	r0, r2
   142d4:	bne	14398 <__assert_fail@plt+0x30c8>
   142d8:	ldrd	r2, [sp, #96]	; 0x60
   142dc:	ldrd	r0, [r8, #160]	; 0xa0
   142e0:	cmp	r1, r3
   142e4:	cmpeq	r0, r2
   142e8:	bne	14398 <__assert_fail@plt+0x30c8>
   142ec:	ldr	r9, [r5, #48]	; 0x30
   142f0:	tst	r9, #512	; 0x200
   142f4:	bne	143d4 <__assert_fail@plt+0x3104>
   142f8:	mov	r0, r7
   142fc:	bl	1124c <fchdir@plt>
   14300:	mov	r9, r0
   14304:	cmp	r4, #0
   14308:	bge	14378 <__assert_fail@plt+0x30a8>
   1430c:	bl	11180 <__errno_location@plt>
   14310:	mov	r4, r0
   14314:	mov	r0, r7
   14318:	ldr	r5, [r4]
   1431c:	bl	112a0 <close@plt>
   14320:	str	r5, [r4]
   14324:	b	14378 <__assert_fail@plt+0x30a8>
   14328:	cmp	r6, #0
   1432c:	bne	14368 <__assert_fail@plt+0x3098>
   14330:	cmp	r4, #0
   14334:	movge	r7, r4
   14338:	blt	1445c <__assert_fail@plt+0x318c>
   1433c:	tst	r9, #2
   14340:	bne	142ac <__assert_fail@plt+0x2fdc>
   14344:	cmp	sl, #0
   14348:	beq	142f0 <__assert_fail@plt+0x3020>
   1434c:	mov	r0, sl
   14350:	movw	r1, #56400	; 0xdc50
   14354:	movt	r1, #1
   14358:	bl	10fdc <strcmp@plt>
   1435c:	cmp	r0, #0
   14360:	bne	142f0 <__assert_fail@plt+0x3020>
   14364:	b	142ac <__assert_fail@plt+0x2fdc>
   14368:	mvn	r3, r4
   1436c:	lsr	r3, r3, #31
   14370:	ands	r9, r3, r9, lsr #9
   14374:	bne	1441c <__assert_fail@plt+0x314c>
   14378:	mov	r0, r9
   1437c:	add	sp, sp, #104	; 0x68
   14380:	ldrd	r4, [sp]
   14384:	ldrd	r6, [sp, #8]
   14388:	ldrd	r8, [sp, #16]
   1438c:	ldr	sl, [sp, #24]
   14390:	add	sp, sp, #28
   14394:	pop	{pc}		; (ldr pc, [sp], #4)
   14398:	bl	11180 <__errno_location@plt>
   1439c:	mov	r3, #2
   143a0:	str	r3, [r0]
   143a4:	mvn	r9, #0
   143a8:	b	14304 <__assert_fail@plt+0x3034>
   143ac:	lsl	r2, r9, #11
   143b0:	mov	r6, #1
   143b4:	and	r2, r2, #32768	; 0x8000
   143b8:	orr	r2, r2, #540672	; 0x84000
   143bc:	orr	r2, r2, #2304	; 0x900
   143c0:	mov	r1, r2
   143c4:	mov	r0, sl
   143c8:	bl	1ca2c <__assert_fail@plt+0xb75c>
   143cc:	mov	r7, r0
   143d0:	b	14298 <__assert_fail@plt+0x2fc8>
   143d4:	ldr	r1, [r5, #32]
   143d8:	sub	r3, r1, r7
   143dc:	cmn	r1, #100	; 0x64
   143e0:	clz	r3, r3
   143e4:	lsr	r3, r3, #5
   143e8:	moveq	r3, #0
   143ec:	cmp	r3, #0
   143f0:	bne	144b8 <__assert_fail@plt+0x31e8>
   143f4:	cmp	r6, #0
   143f8:	beq	1447c <__assert_fail@plt+0x31ac>
   143fc:	mvn	r3, r1
   14400:	eor	r9, r9, #4
   14404:	lsr	r3, r3, #31
   14408:	ands	r3, r3, r9, lsr #2
   1440c:	bne	14494 <__assert_fail@plt+0x31c4>
   14410:	mov	r9, #0
   14414:	str	r7, [r5, #32]
   14418:	b	14378 <__assert_fail@plt+0x30a8>
   1441c:	mov	r0, r4
   14420:	mov	r9, #0
   14424:	bl	112a0 <close@plt>
   14428:	b	14378 <__assert_fail@plt+0x30a8>
   1442c:	mov	r0, r6
   14430:	bl	17994 <__assert_fail@plt+0x66c4>
   14434:	ldr	r9, [r5, #48]	; 0x30
   14438:	subs	r7, r0, #0
   1443c:	movlt	r6, #1
   14440:	andlt	r3, r9, #512	; 0x200
   14444:	blt	14460 <__assert_fail@plt+0x3190>
   14448:	tst	r9, #2
   1444c:	mov	r4, r7
   14450:	mov	r6, #1
   14454:	beq	142f0 <__assert_fail@plt+0x3020>
   14458:	b	142ac <__assert_fail@plt+0x2fdc>
   1445c:	and	r3, r9, #512	; 0x200
   14460:	lsl	r2, r9, #11
   14464:	cmp	r3, #0
   14468:	and	r2, r2, #32768	; 0x8000
   1446c:	orr	r2, r2, #540672	; 0x84000
   14470:	orr	r2, r2, #2304	; 0x900
   14474:	bne	14288 <__assert_fail@plt+0x2fb8>
   14478:	b	143c0 <__assert_fail@plt+0x30f0>
   1447c:	add	r0, r5, #60	; 0x3c
   14480:	bl	1794c <__assert_fail@plt+0x667c>
   14484:	cmp	r0, #0
   14488:	blt	14410 <__assert_fail@plt+0x3140>
   1448c:	bl	112a0 <close@plt>
   14490:	b	14410 <__assert_fail@plt+0x3140>
   14494:	mov	r0, r1
   14498:	b	1448c <__assert_fail@plt+0x31bc>
   1449c:	mvn	r9, #0
   144a0:	b	14378 <__assert_fail@plt+0x30a8>
   144a4:	tst	r9, #2
   144a8:	mov	r7, r4
   144ac:	mov	r6, #1
   144b0:	beq	1434c <__assert_fail@plt+0x307c>
   144b4:	b	142ac <__assert_fail@plt+0x2fdc>
   144b8:	bl	11294 <abort@plt>
   144bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   144c0:	strd	r6, [sp, #8]
   144c4:	mov	r6, r0
   144c8:	strd	sl, [sp, #24]
   144cc:	ldr	fp, [r0]
   144d0:	strd	r8, [sp, #16]
   144d4:	str	lr, [sp, #32]
   144d8:	sub	sp, sp, #76	; 0x4c
   144dc:	str	r1, [sp, #40]	; 0x28
   144e0:	ldr	r0, [fp, #12]
   144e4:	cmp	r0, #0
   144e8:	str	r0, [sp, #48]	; 0x30
   144ec:	beq	1495c <__assert_fail@plt+0x368c>
   144f0:	bl	11240 <dirfd@plt>
   144f4:	cmp	r0, #0
   144f8:	str	r0, [sp, #68]	; 0x44
   144fc:	blt	14ed0 <__assert_fail@plt+0x3c00>
   14500:	ldr	r3, [r6, #44]	; 0x2c
   14504:	cmp	r3, #0
   14508:	beq	14d7c <__assert_fail@plt+0x3aac>
   1450c:	ldr	r3, [r6, #48]	; 0x30
   14510:	mvn	r2, #0
   14514:	str	r2, [sp, #28]
   14518:	mov	r2, #1
   1451c:	str	r2, [sp, #60]	; 0x3c
   14520:	ldr	r1, [fp, #28]
   14524:	ldr	r0, [fp, #40]	; 0x28
   14528:	sub	r2, r0, #1
   1452c:	str	r0, [sp, #4]
   14530:	ldrb	r1, [r1, r2]
   14534:	cmp	r1, #47	; 0x2f
   14538:	beq	14548 <__assert_fail@plt+0x3278>
   1453c:	add	r1, r0, #1
   14540:	mov	r2, r0
   14544:	str	r1, [sp, #4]
   14548:	ands	r3, r3, #4
   1454c:	streq	r3, [sp, #32]
   14550:	beq	1456c <__assert_fail@plt+0x329c>
   14554:	ldr	r3, [r6, #24]
   14558:	mov	r0, #47	; 0x2f
   1455c:	add	r1, r3, r2
   14560:	strb	r0, [r3, r2]
   14564:	add	r3, r1, #1
   14568:	str	r3, [sp, #32]
   1456c:	movw	r3, #6548	; 0x1994
   14570:	movt	r3, #258	; 0x102
   14574:	ldr	r2, [r6, #36]	; 0x24
   14578:	movw	r0, #19778	; 0x4d42
   1457c:	movt	r0, #65363	; 0xff53
   14580:	str	fp, [sp, #16]
   14584:	str	r3, [sp, #52]	; 0x34
   14588:	mov	r1, #0
   1458c:	ldr	r3, [fp, #48]	; 0x30
   14590:	mov	r9, r1
   14594:	mov	fp, r1
   14598:	str	r0, [sp, #56]	; 0x38
   1459c:	ldr	r0, [sp, #4]
   145a0:	str	r1, [sp, #12]
   145a4:	str	r1, [sp, #36]	; 0x24
   145a8:	add	r3, r3, #1
   145ac:	sub	r2, r2, r0
   145b0:	str	r1, [sp, #44]	; 0x2c
   145b4:	str	r2, [sp, #20]
   145b8:	str	r3, [sp, #24]
   145bc:	b	145d4 <__assert_fail@plt+0x3304>
   145c0:	ldr	r3, [sp, #28]
   145c4:	add	r9, r9, #1
   145c8:	cmp	r9, r3
   145cc:	bcs	14ab8 <__assert_fail@plt+0x37e8>
   145d0:	mov	fp, r4
   145d4:	ldr	r3, [sp, #16]
   145d8:	ldr	r4, [r3, #12]
   145dc:	cmp	r4, #0
   145e0:	beq	14bf8 <__assert_fail@plt+0x3928>
   145e4:	bl	11180 <__errno_location@plt>
   145e8:	mov	sl, r0
   145ec:	mov	r3, #0
   145f0:	mov	r0, r4
   145f4:	str	r3, [sl]
   145f8:	bl	11228 <readdir64@plt>
   145fc:	subs	r7, r0, #0
   14600:	beq	14ccc <__assert_fail@plt+0x39fc>
   14604:	ldr	r3, [r6, #48]	; 0x30
   14608:	tst	r3, #32
   1460c:	bne	1461c <__assert_fail@plt+0x334c>
   14610:	ldrb	r3, [r7, #19]
   14614:	cmp	r3, #46	; 0x2e
   14618:	beq	1481c <__assert_fail@plt+0x354c>
   1461c:	add	r1, r7, #19
   14620:	mov	r0, r1
   14624:	str	r1, [sp, #8]
   14628:	bl	11168 <strlen@plt>
   1462c:	mov	r5, r0
   14630:	add	r0, r0, #176	; 0xb0
   14634:	bic	r0, r0, #7
   14638:	bl	1c554 <__assert_fail@plt+0xb284>
   1463c:	subs	r4, r0, #0
   14640:	beq	14850 <__assert_fail@plt+0x3580>
   14644:	add	r8, r4, #168	; 0xa8
   14648:	mov	r2, r5
   1464c:	ldr	r1, [sp, #8]
   14650:	mov	r0, r8
   14654:	bl	11030 <memcpy@plt>
   14658:	ldr	r3, [sp, #20]
   1465c:	mov	r1, #0
   14660:	add	r0, r4, r5
   14664:	mov	ip, #196608	; 0x30000
   14668:	ldr	r2, [r6, #24]
   1466c:	strb	r1, [r0, #168]	; 0xa8
   14670:	str	r1, [r4, #12]
   14674:	cmp	r3, r5
   14678:	str	r1, [r4, #16]
   1467c:	str	r1, [r4, #20]
   14680:	str	r2, [r4, #28]
   14684:	str	r1, [r4, #32]
   14688:	str	r6, [r4, #44]	; 0x2c
   1468c:	str	r5, [r4, #52]	; 0x34
   14690:	str	ip, [r4, #58]	; 0x3a
   14694:	bls	14758 <__assert_fail@plt+0x3488>
   14698:	ldr	r3, [sp, #4]
   1469c:	adds	r5, r5, r3
   146a0:	bcs	14fb8 <__assert_fail@plt+0x3ce8>
   146a4:	ldr	r3, [sp, #24]
   146a8:	str	r5, [r4, #40]	; 0x28
   146ac:	ldr	ip, [r6]
   146b0:	ldr	r1, [r6, #48]	; 0x30
   146b4:	str	r3, [r4, #48]	; 0x30
   146b8:	ldrd	r2, [r7]
   146bc:	str	ip, [r4, #4]
   146c0:	tst	r1, #4
   146c4:	streq	r8, [r4, #24]
   146c8:	strd	r2, [r4, #160]	; 0xa0
   146cc:	bne	147f8 <__assert_fail@plt+0x3528>
   146d0:	ldr	r3, [r6, #44]	; 0x2c
   146d4:	cmp	r3, #0
   146d8:	beq	146e4 <__assert_fail@plt+0x3414>
   146dc:	ands	r3, r1, #1024	; 0x400
   146e0:	beq	1483c <__assert_fail@plt+0x356c>
   146e4:	ldrb	r3, [r7, #18]
   146e8:	tst	r1, #8
   146ec:	sub	r0, r3, #1
   146f0:	beq	146fc <__assert_fail@plt+0x342c>
   146f4:	tst	r3, #251	; 0xfb
   146f8:	bne	148f8 <__assert_fail@plt+0x3628>
   146fc:	mov	r3, #11
   14700:	cmp	r0, r3
   14704:	strh	r3, [r4, #56]	; 0x38
   14708:	bls	147dc <__assert_fail@plt+0x350c>
   1470c:	mov	r1, #0
   14710:	mov	r2, #2
   14714:	mov	r3, #0
   14718:	str	r1, [r4, #80]	; 0x50
   1471c:	strd	r2, [r4, #112]	; 0x70
   14720:	ldr	r2, [sp, #12]
   14724:	mov	r3, #0
   14728:	str	r3, [r4, #8]
   1472c:	cmp	r2, r3
   14730:	movw	r3, #10000	; 0x2710
   14734:	strne	r4, [fp, #8]
   14738:	streq	r4, [sp, #12]
   1473c:	cmp	r9, r3
   14740:	bne	145c0 <__assert_fail@plt+0x32f0>
   14744:	ldr	r5, [r6, #44]	; 0x2c
   14748:	cmp	r5, #0
   1474c:	beq	14a6c <__assert_fail@plt+0x379c>
   14750:	movw	r9, #10001	; 0x2711
   14754:	b	145d0 <__assert_fail@plt+0x3300>
   14758:	ldr	ip, [r6, #36]	; 0x24
   1475c:	ldr	r3, [sp, #4]
   14760:	add	r0, ip, #256	; 0x100
   14764:	add	r0, r0, #1
   14768:	add	r0, r0, r3
   1476c:	add	r0, r0, r5
   14770:	cmp	ip, r0
   14774:	bhi	14934 <__assert_fail@plt+0x3664>
   14778:	mov	r1, r0
   1477c:	str	r0, [r6, #36]	; 0x24
   14780:	mov	r0, r2
   14784:	str	r2, [sp, #8]
   14788:	bl	1c590 <__assert_fail@plt+0xb2c0>
   1478c:	cmp	r0, #0
   14790:	ldr	r2, [sp, #8]
   14794:	beq	14d28 <__assert_fail@plt+0x3a58>
   14798:	cmp	r2, r0
   1479c:	str	r0, [r6, #24]
   147a0:	beq	147c0 <__assert_fail@plt+0x34f0>
   147a4:	ldr	r2, [r6, #48]	; 0x30
   147a8:	tst	r2, #4
   147ac:	ldrne	r3, [sp, #4]
   147b0:	addne	r3, r0, r3
   147b4:	strne	r3, [sp, #32]
   147b8:	mov	r3, #1
   147bc:	str	r3, [sp, #36]	; 0x24
   147c0:	ldr	r3, [sp, #4]
   147c4:	ldr	r2, [r6, #36]	; 0x24
   147c8:	sub	r3, r2, r3
   147cc:	str	r3, [sp, #20]
   147d0:	b	14698 <__assert_fail@plt+0x33c8>
   147d4:	mov	r3, #11
   147d8:	strh	r3, [r4, #56]	; 0x38
   147dc:	movw	r3, #57272	; 0xdfb8
   147e0:	movt	r3, #1
   147e4:	ldr	r1, [r3, r0, lsl #2]
   147e8:	mov	r2, #2
   147ec:	mov	r3, #0
   147f0:	str	r1, [r4, #80]	; 0x50
   147f4:	b	1471c <__assert_fail@plt+0x344c>
   147f8:	ldr	ip, [r4, #28]
   147fc:	mov	r1, r8
   14800:	ldr	r2, [r4, #52]	; 0x34
   14804:	ldr	r0, [sp, #32]
   14808:	str	ip, [r4, #24]
   1480c:	add	r2, r2, #1
   14810:	bl	11000 <memmove@plt>
   14814:	ldr	r1, [r6, #48]	; 0x30
   14818:	b	146d0 <__assert_fail@plt+0x3400>
   1481c:	ldrb	r3, [r7, #20]
   14820:	cmp	r3, #0
   14824:	beq	14834 <__assert_fail@plt+0x3564>
   14828:	ldrh	r3, [r7, #20]
   1482c:	cmp	r3, #46	; 0x2e
   14830:	bne	1461c <__assert_fail@plt+0x334c>
   14834:	mov	r4, fp
   14838:	b	145d0 <__assert_fail@plt+0x3300>
   1483c:	mov	r2, r4
   14840:	ldr	r0, [r6, #32]
   14844:	bl	13e54 <__assert_fail@plt+0x2b84>
   14848:	strh	r0, [r4, #56]	; 0x38
   1484c:	b	14720 <__assert_fail@plt+0x3450>
   14850:	ldr	r5, [sl]
   14854:	ldr	r8, [sp, #12]
   14858:	ldr	fp, [sp, #16]
   1485c:	mov	r0, r4
   14860:	bl	13a30 <__assert_fail@plt+0x2760>
   14864:	cmp	r8, #0
   14868:	bne	148d4 <__assert_fail@plt+0x3604>
   1486c:	ldr	r0, [fp, #12]
   14870:	bl	112c4 <closedir@plt>
   14874:	ldr	r3, [r6, #48]	; 0x30
   14878:	mov	r2, #0
   1487c:	mov	r1, #7
   14880:	mov	r8, r2
   14884:	str	r2, [fp, #12]
   14888:	strh	r1, [fp, #56]	; 0x38
   1488c:	orr	r3, r3, #8192	; 0x2000
   14890:	str	r3, [r6, #48]	; 0x30
   14894:	str	r5, [sl]
   14898:	mov	r0, r8
   1489c:	add	sp, sp, #76	; 0x4c
   148a0:	ldrd	r4, [sp]
   148a4:	ldrd	r6, [sp, #8]
   148a8:	ldrd	r8, [sp, #16]
   148ac:	ldrd	sl, [sp, #24]
   148b0:	add	sp, sp, #32
   148b4:	pop	{pc}		; (ldr pc, [sp], #4)
   148b8:	mov	r0, r3
   148bc:	bl	112c4 <closedir@plt>
   148c0:	mov	r0, r8
   148c4:	bl	13a30 <__assert_fail@plt+0x2760>
   148c8:	cmp	r4, #0
   148cc:	beq	1486c <__assert_fail@plt+0x359c>
   148d0:	mov	r8, r4
   148d4:	mov	r0, r8
   148d8:	ldr	r4, [r8, #8]
   148dc:	ldr	r3, [r8, #12]
   148e0:	cmp	r3, #0
   148e4:	bne	148b8 <__assert_fail@plt+0x35e8>
   148e8:	bl	13a30 <__assert_fail@plt+0x2760>
   148ec:	cmp	r4, #0
   148f0:	bne	148d0 <__assert_fail@plt+0x3600>
   148f4:	b	1486c <__assert_fail@plt+0x359c>
   148f8:	ubfx	r2, r1, #4, #1
   148fc:	cmp	r3, #10
   14900:	moveq	r3, r2
   14904:	orrne	r3, r2, #1
   14908:	cmp	r3, #0
   1490c:	beq	147d4 <__assert_fail@plt+0x3504>
   14910:	mov	r3, #11
   14914:	cmp	r0, r3
   14918:	strh	r3, [r4, #56]	; 0x38
   1491c:	bls	14b74 <__assert_fail@plt+0x38a4>
   14920:	mov	r1, #0
   14924:	mov	r2, #1
   14928:	mov	r3, #0
   1492c:	str	r1, [r4, #80]	; 0x50
   14930:	b	1471c <__assert_fail@plt+0x344c>
   14934:	mov	r0, r2
   14938:	ldr	r8, [sp, #12]
   1493c:	ldr	fp, [sp, #16]
   14940:	bl	13a30 <__assert_fail@plt+0x2760>
   14944:	mov	r3, #36	; 0x24
   14948:	mov	r1, #0
   1494c:	mov	r5, r3
   14950:	str	r1, [r6, #24]
   14954:	str	r3, [sl]
   14958:	b	1485c <__assert_fail@plt+0x358c>
   1495c:	ldr	r3, [r6, #48]	; 0x30
   14960:	ldr	r1, [fp, #24]
   14964:	and	r2, r3, #516	; 0x204
   14968:	cmp	r2, #512	; 0x200
   1496c:	ldreq	r0, [r6, #32]
   14970:	mvnne	r0, #99	; 0x63
   14974:	ands	r2, r3, #16
   14978:	beq	14988 <__assert_fail@plt+0x36b8>
   1497c:	tst	r3, #1
   14980:	moveq	r2, #32768	; 0x8000
   14984:	bne	14b90 <__assert_fail@plt+0x38c0>
   14988:	add	r3, sp, #68	; 0x44
   1498c:	bl	17a24 <__assert_fail@plt+0x6754>
   14990:	cmp	r0, #0
   14994:	mov	r8, r0
   14998:	str	r0, [fp, #12]
   1499c:	beq	14f24 <__assert_fail@plt+0x3c54>
   149a0:	ldrh	r3, [fp, #56]	; 0x38
   149a4:	ldr	r0, [r6, #48]	; 0x30
   149a8:	cmp	r3, #11
   149ac:	beq	14e64 <__assert_fail@plt+0x3b94>
   149b0:	tst	r0, #256	; 0x100
   149b4:	bne	14da8 <__assert_fail@plt+0x3ad8>
   149b8:	ldr	r2, [r6, #44]	; 0x2c
   149bc:	movw	r3, #34464	; 0x86a0
   149c0:	movt	r3, #1
   149c4:	cmp	r2, #0
   149c8:	mvnne	r3, #0
   149cc:	str	r3, [sp, #28]
   149d0:	ldr	r3, [sp, #40]	; 0x28
   149d4:	cmp	r3, #2
   149d8:	beq	14d98 <__assert_fail@plt+0x3ac8>
   149dc:	ldr	r3, [r6, #48]	; 0x30
   149e0:	ldr	r0, [sp, #68]	; 0x44
   149e4:	and	r3, r3, #56	; 0x38
   149e8:	cmp	r3, #24
   149ec:	beq	14ba0 <__assert_fail@plt+0x38d0>
   149f0:	ldr	r3, [sp, #40]	; 0x28
   149f4:	sub	r4, r3, #3
   149f8:	clz	r4, r4
   149fc:	lsr	r4, r4, #5
   14a00:	ldr	r3, [r6, #48]	; 0x30
   14a04:	tst	r3, #512	; 0x200
   14a08:	bne	14f10 <__assert_fail@plt+0x3c40>
   14a0c:	cmp	r0, #0
   14a10:	bge	14ea4 <__assert_fail@plt+0x3bd4>
   14a14:	cmp	r4, #0
   14a18:	beq	14a28 <__assert_fail@plt+0x3758>
   14a1c:	bl	11180 <__errno_location@plt>
   14a20:	ldr	r3, [r0]
   14a24:	str	r3, [fp, #32]
   14a28:	ldrh	r3, [fp, #58]	; 0x3a
   14a2c:	ldr	r0, [fp, #12]
   14a30:	orr	r3, r3, #1
   14a34:	strh	r3, [fp, #58]	; 0x3a
   14a38:	bl	112c4 <closedir@plt>
   14a3c:	ldr	r3, [r6, #48]	; 0x30
   14a40:	mov	r2, #0
   14a44:	str	r2, [fp, #12]
   14a48:	tst	r3, #512	; 0x200
   14a4c:	beq	14a5c <__assert_fail@plt+0x378c>
   14a50:	ldr	r0, [sp, #68]	; 0x44
   14a54:	cmp	r0, r2
   14a58:	bge	14f04 <__assert_fail@plt+0x3c34>
   14a5c:	mov	r2, #0
   14a60:	str	r2, [fp, #12]
   14a64:	str	r2, [sp, #60]	; 0x3c
   14a68:	b	14520 <__assert_fail@plt+0x3250>
   14a6c:	ldr	r0, [sp, #16]
   14a70:	ldr	r1, [sp, #68]	; 0x44
   14a74:	bl	13d34 <__assert_fail@plt+0x2a64>
   14a78:	movw	r3, #26985	; 0x6969
   14a7c:	cmp	r0, r3
   14a80:	beq	14aa4 <__assert_fail@plt+0x37d4>
   14a84:	ldr	r3, [sp, #52]	; 0x34
   14a88:	cmp	r0, r3
   14a8c:	beq	14aa4 <__assert_fail@plt+0x37d4>
   14a90:	ldr	r3, [sp, #56]	; 0x38
   14a94:	cmp	r0, r3
   14a98:	movne	r3, #1
   14a9c:	strne	r3, [sp, #44]	; 0x2c
   14aa0:	bne	14750 <__assert_fail@plt+0x3480>
   14aa4:	ldr	r3, [sp, #28]
   14aa8:	add	r9, r9, #1
   14aac:	str	r5, [sp, #44]	; 0x2c
   14ab0:	cmp	r9, r3
   14ab4:	bcc	145d0 <__assert_fail@plt+0x3300>
   14ab8:	ldr	r8, [sp, #12]
   14abc:	ldr	r3, [sp, #36]	; 0x24
   14ac0:	ldr	fp, [sp, #16]
   14ac4:	cmp	r3, #0
   14ac8:	beq	14c0c <__assert_fail@plt+0x393c>
   14acc:	ldr	r3, [r6, #4]
   14ad0:	ldr	r1, [r6, #24]
   14ad4:	cmp	r3, #0
   14ad8:	beq	14b0c <__assert_fail@plt+0x383c>
   14adc:	ldr	r2, [r3, #24]
   14ae0:	add	r0, r3, #168	; 0xa8
   14ae4:	cmp	r2, r0
   14ae8:	beq	14d14 <__assert_fail@plt+0x3a44>
   14aec:	ldr	r0, [r3, #28]
   14af0:	str	r1, [r3, #28]
   14af4:	sub	r2, r2, r0
   14af8:	add	r2, r1, r2
   14afc:	str	r2, [r3, #24]
   14b00:	ldr	r3, [r3, #8]
   14b04:	cmp	r3, #0
   14b08:	bne	14adc <__assert_fail@plt+0x380c>
   14b0c:	ldr	r3, [r8, #48]	; 0x30
   14b10:	cmp	r3, #0
   14b14:	movge	r3, r8
   14b18:	bge	14b30 <__assert_fail@plt+0x3860>
   14b1c:	b	14c0c <__assert_fail@plt+0x393c>
   14b20:	ldr	r3, [r2, #48]	; 0x30
   14b24:	cmp	r3, #0
   14b28:	blt	14c0c <__assert_fail@plt+0x393c>
   14b2c:	mov	r3, r2
   14b30:	ldr	r2, [r3, #24]
   14b34:	add	r0, r3, #168	; 0xa8
   14b38:	cmp	r2, r0
   14b3c:	beq	14b50 <__assert_fail@plt+0x3880>
   14b40:	ldr	r0, [r3, #28]
   14b44:	sub	r2, r2, r0
   14b48:	add	r2, r1, r2
   14b4c:	str	r2, [r3, #24]
   14b50:	ldr	r2, [r3, #8]
   14b54:	str	r1, [r3, #28]
   14b58:	cmp	r2, #0
   14b5c:	bne	14b20 <__assert_fail@plt+0x3850>
   14b60:	ldr	r2, [r3, #4]
   14b64:	ldr	r3, [r2, #48]	; 0x30
   14b68:	cmp	r3, #0
   14b6c:	bge	14b2c <__assert_fail@plt+0x385c>
   14b70:	b	14c0c <__assert_fail@plt+0x393c>
   14b74:	movw	r3, #57272	; 0xdfb8
   14b78:	movt	r3, #1
   14b7c:	ldr	r1, [r3, r0, lsl #2]
   14b80:	mov	r2, #1
   14b84:	mov	r3, #0
   14b88:	str	r1, [r4, #80]	; 0x50
   14b8c:	b	1471c <__assert_fail@plt+0x344c>
   14b90:	ldr	r2, [fp, #48]	; 0x30
   14b94:	cmp	r2, #0
   14b98:	movne	r2, #32768	; 0x8000
   14b9c:	b	14988 <__assert_fail@plt+0x36b8>
   14ba0:	ldr	r3, [fp, #84]	; 0x54
   14ba4:	cmp	r3, #2
   14ba8:	bne	149f0 <__assert_fail@plt+0x3720>
   14bac:	mov	r1, r0
   14bb0:	mov	r0, fp
   14bb4:	bl	13d34 <__assert_fail@plt+0x2a64>
   14bb8:	movw	r3, #26985	; 0x6969
   14bbc:	cmp	r0, r3
   14bc0:	beq	14fb0 <__assert_fail@plt+0x3ce0>
   14bc4:	bgt	14f94 <__assert_fail@plt+0x3cc4>
   14bc8:	movw	r3, #19778	; 0x4d42
   14bcc:	movt	r3, #65363	; 0xff53
   14bd0:	cmp	r0, r3
   14bd4:	beq	14fb0 <__assert_fail@plt+0x3ce0>
   14bd8:	cmp	r0, #0
   14bdc:	beq	14fb0 <__assert_fail@plt+0x3ce0>
   14be0:	ldr	r3, [sp, #40]	; 0x28
   14be4:	cmp	r3, #3
   14be8:	bne	14d98 <__assert_fail@plt+0x3ac8>
   14bec:	mov	r4, #0
   14bf0:	ldr	r0, [sp, #68]	; 0x44
   14bf4:	b	14a00 <__assert_fail@plt+0x3730>
   14bf8:	ldr	r8, [sp, #12]
   14bfc:	mov	fp, r3
   14c00:	ldr	r3, [sp, #36]	; 0x24
   14c04:	cmp	r3, #0
   14c08:	bne	14acc <__assert_fail@plt+0x37fc>
   14c0c:	ldr	r3, [r6, #48]	; 0x30
   14c10:	tst	r3, #4
   14c14:	beq	14c44 <__assert_fail@plt+0x3974>
   14c18:	ldr	r2, [sp, #4]
   14c1c:	ldr	r3, [r6, #36]	; 0x24
   14c20:	cmp	r9, #0
   14c24:	cmpne	r3, r2
   14c28:	bne	14c38 <__assert_fail@plt+0x3968>
   14c2c:	ldr	r3, [sp, #32]
   14c30:	sub	r3, r3, #1
   14c34:	str	r3, [sp, #32]
   14c38:	ldr	r2, [sp, #32]
   14c3c:	mov	r3, #0
   14c40:	strb	r3, [r2]
   14c44:	ldr	r2, [sp, #48]	; 0x30
   14c48:	ldr	r3, [sp, #60]	; 0x3c
   14c4c:	cmp	r2, #0
   14c50:	movne	r3, #0
   14c54:	cmp	r3, #0
   14c58:	beq	14c90 <__assert_fail@plt+0x39c0>
   14c5c:	ldr	r3, [sp, #40]	; 0x28
   14c60:	cmp	r9, #0
   14c64:	cmpne	r3, #1
   14c68:	bne	14c98 <__assert_fail@plt+0x39c8>
   14c6c:	ldr	r3, [fp, #48]	; 0x30
   14c70:	cmp	r3, #0
   14c74:	bne	14e80 <__assert_fail@plt+0x3bb0>
   14c78:	mov	r0, r6
   14c7c:	bl	14150 <__assert_fail@plt+0x2e80>
   14c80:	adds	r0, r0, #0
   14c84:	movne	r0, #1
   14c88:	cmp	r0, #0
   14c8c:	bne	14f34 <__assert_fail@plt+0x3c64>
   14c90:	cmp	r9, #0
   14c94:	beq	14df4 <__assert_fail@plt+0x3b24>
   14c98:	ldr	r3, [sp, #44]	; 0x2c
   14c9c:	cmp	r3, #0
   14ca0:	bne	14d50 <__assert_fail@plt+0x3a80>
   14ca4:	ldr	r3, [r6, #44]	; 0x2c
   14ca8:	cmp	r3, #0
   14cac:	cmpne	r9, #1
   14cb0:	beq	14898 <__assert_fail@plt+0x35c8>
   14cb4:	mov	r1, r8
   14cb8:	mov	r2, r9
   14cbc:	mov	r0, r6
   14cc0:	bl	13c48 <__assert_fail@plt+0x2978>
   14cc4:	mov	r8, r0
   14cc8:	b	14898 <__assert_fail@plt+0x35c8>
   14ccc:	ldr	r3, [sl]
   14cd0:	ldr	r8, [sp, #12]
   14cd4:	ldr	fp, [sp, #16]
   14cd8:	cmp	r3, #0
   14cdc:	beq	14cf8 <__assert_fail@plt+0x3a28>
   14ce0:	ldr	r2, [sp, #48]	; 0x30
   14ce4:	str	r3, [fp, #32]
   14ce8:	orrs	r2, r2, r9
   14cec:	moveq	r3, #4
   14cf0:	movne	r3, #7
   14cf4:	strh	r3, [fp, #56]	; 0x38
   14cf8:	ldr	r0, [fp, #12]
   14cfc:	cmp	r0, #0
   14d00:	beq	14c00 <__assert_fail@plt+0x3930>
   14d04:	bl	112c4 <closedir@plt>
   14d08:	mov	r3, #0
   14d0c:	str	r3, [fp, #12]
   14d10:	b	14c00 <__assert_fail@plt+0x3930>
   14d14:	str	r1, [r3, #28]
   14d18:	ldr	r3, [r3, #8]
   14d1c:	cmp	r3, #0
   14d20:	bne	14adc <__assert_fail@plt+0x380c>
   14d24:	b	14b0c <__assert_fail@plt+0x383c>
   14d28:	mov	r1, r0
   14d2c:	ldr	r0, [r6, #24]
   14d30:	str	r1, [sp, #4]
   14d34:	ldr	r8, [sp, #12]
   14d38:	ldr	fp, [sp, #16]
   14d3c:	bl	13a30 <__assert_fail@plt+0x2760>
   14d40:	ldr	r1, [sp, #4]
   14d44:	ldr	r5, [sl]
   14d48:	str	r1, [r6, #24]
   14d4c:	b	1485c <__assert_fail@plt+0x358c>
   14d50:	movw	r3, #15384	; 0x3c18
   14d54:	movt	r3, #1
   14d58:	mov	r1, r8
   14d5c:	mov	r2, r9
   14d60:	mov	r0, r6
   14d64:	str	r3, [r6, #44]	; 0x2c
   14d68:	bl	13c48 <__assert_fail@plt+0x2978>
   14d6c:	mov	r3, #0
   14d70:	mov	r8, r0
   14d74:	str	r3, [r6, #44]	; 0x2c
   14d78:	b	14898 <__assert_fail@plt+0x35c8>
   14d7c:	movw	r3, #34464	; 0x86a0
   14d80:	movt	r3, #1
   14d84:	mov	r2, #1
   14d88:	str	r3, [sp, #28]
   14d8c:	str	r2, [sp, #60]	; 0x3c
   14d90:	ldr	r3, [r6, #48]	; 0x30
   14d94:	b	14520 <__assert_fail@plt+0x3250>
   14d98:	mov	r3, #0
   14d9c:	str	r3, [sp, #60]	; 0x3c
   14da0:	ldr	r3, [r6, #48]	; 0x30
   14da4:	b	14520 <__assert_fail@plt+0x3250>
   14da8:	add	r4, r6, #56	; 0x38
   14dac:	mov	r2, fp
   14db0:	mov	r1, r4
   14db4:	bl	14084 <__assert_fail@plt+0x2db4>
   14db8:	mov	r3, #0
   14dbc:	mov	r2, fp
   14dc0:	ldr	r0, [r6, #32]
   14dc4:	ldr	r1, [r6, #48]	; 0x30
   14dc8:	bl	13e54 <__assert_fail@plt+0x2b84>
   14dcc:	mov	r2, fp
   14dd0:	mov	r1, r4
   14dd4:	ldr	r0, [r6, #48]	; 0x30
   14dd8:	bl	13fb0 <__assert_fail@plt+0x2ce0>
   14ddc:	subs	r8, r0, #0
   14de0:	bne	149b8 <__assert_fail@plt+0x36e8>
   14de4:	bl	11180 <__errno_location@plt>
   14de8:	mov	r3, #12
   14dec:	str	r3, [r0]
   14df0:	b	14898 <__assert_fail@plt+0x35c8>
   14df4:	ldr	r3, [sp, #40]	; 0x28
   14df8:	cmp	r3, #3
   14dfc:	bne	14e14 <__assert_fail@plt+0x3b44>
   14e00:	ldrh	r3, [fp, #56]	; 0x38
   14e04:	cmp	r3, #4
   14e08:	cmpne	r3, #7
   14e0c:	movne	r3, #6
   14e10:	strhne	r3, [fp, #56]	; 0x38
   14e14:	cmp	r8, #0
   14e18:	bne	14e3c <__assert_fail@plt+0x3b6c>
   14e1c:	b	14e5c <__assert_fail@plt+0x3b8c>
   14e20:	mov	r0, r3
   14e24:	bl	112c4 <closedir@plt>
   14e28:	mov	r0, r8
   14e2c:	bl	13a30 <__assert_fail@plt+0x2760>
   14e30:	cmp	r4, #0
   14e34:	beq	14e5c <__assert_fail@plt+0x3b8c>
   14e38:	mov	r8, r4
   14e3c:	mov	r0, r8
   14e40:	ldr	r4, [r8, #8]
   14e44:	ldr	r3, [r8, #12]
   14e48:	cmp	r3, #0
   14e4c:	bne	14e20 <__assert_fail@plt+0x3b50>
   14e50:	bl	13a30 <__assert_fail@plt+0x2760>
   14e54:	cmp	r4, #0
   14e58:	bne	14e38 <__assert_fail@plt+0x3b68>
   14e5c:	mov	r8, #0
   14e60:	b	14898 <__assert_fail@plt+0x35c8>
   14e64:	mov	r1, r0
   14e68:	mov	r3, #0
   14e6c:	ldr	r0, [r6, #32]
   14e70:	mov	r2, fp
   14e74:	bl	13e54 <__assert_fail@plt+0x2b84>
   14e78:	strh	r0, [fp, #56]	; 0x38
   14e7c:	b	149b8 <__assert_fail@plt+0x36e8>
   14e80:	movw	r3, #56400	; 0xdc50
   14e84:	movt	r3, #1
   14e88:	ldr	r1, [fp, #4]
   14e8c:	mvn	r2, #0
   14e90:	mov	r0, r6
   14e94:	bl	141fc <__assert_fail@plt+0x2f2c>
   14e98:	adds	r0, r0, #0
   14e9c:	movne	r0, #1
   14ea0:	b	14c88 <__assert_fail@plt+0x39b8>
   14ea4:	mov	r2, r0
   14ea8:	mov	r3, #0
   14eac:	mov	r1, fp
   14eb0:	mov	r0, r6
   14eb4:	bl	141fc <__assert_fail@plt+0x2f2c>
   14eb8:	cmp	r0, #0
   14ebc:	bne	14a14 <__assert_fail@plt+0x3744>
   14ec0:	mov	r3, #1
   14ec4:	str	r3, [sp, #60]	; 0x3c
   14ec8:	ldr	r3, [r6, #48]	; 0x30
   14ecc:	b	14520 <__assert_fail@plt+0x3250>
   14ed0:	ldr	r0, [fp, #12]
   14ed4:	mov	r8, #0
   14ed8:	bl	112c4 <closedir@plt>
   14edc:	ldr	r3, [sp, #40]	; 0x28
   14ee0:	str	r8, [fp, #12]
   14ee4:	cmp	r3, #3
   14ee8:	bne	14e5c <__assert_fail@plt+0x3b8c>
   14eec:	mov	r3, #4
   14ef0:	strh	r3, [fp, #56]	; 0x38
   14ef4:	bl	11180 <__errno_location@plt>
   14ef8:	ldr	r3, [r0]
   14efc:	str	r3, [fp, #32]
   14f00:	b	14898 <__assert_fail@plt+0x35c8>
   14f04:	bl	112a0 <close@plt>
   14f08:	ldr	r3, [r6, #48]	; 0x30
   14f0c:	b	14a5c <__assert_fail@plt+0x378c>
   14f10:	mov	r2, #3
   14f14:	movw	r1, #1030	; 0x406
   14f18:	bl	1c844 <__assert_fail@plt+0xb574>
   14f1c:	str	r0, [sp, #68]	; 0x44
   14f20:	b	14a0c <__assert_fail@plt+0x373c>
   14f24:	ldr	r3, [sp, #40]	; 0x28
   14f28:	cmp	r3, #3
   14f2c:	bne	14e5c <__assert_fail@plt+0x3b8c>
   14f30:	b	14eec <__assert_fail@plt+0x3c1c>
   14f34:	ldr	r3, [r6, #48]	; 0x30
   14f38:	mov	r2, #7
   14f3c:	cmp	r8, #0
   14f40:	strh	r2, [fp, #56]	; 0x38
   14f44:	orr	r3, r3, #8192	; 0x2000
   14f48:	str	r3, [r6, #48]	; 0x30
   14f4c:	bne	14f70 <__assert_fail@plt+0x3ca0>
   14f50:	b	14e5c <__assert_fail@plt+0x3b8c>
   14f54:	mov	r0, r3
   14f58:	bl	112c4 <closedir@plt>
   14f5c:	mov	r0, r8
   14f60:	bl	13a30 <__assert_fail@plt+0x2760>
   14f64:	cmp	r4, #0
   14f68:	beq	14e5c <__assert_fail@plt+0x3b8c>
   14f6c:	mov	r8, r4
   14f70:	mov	r0, r8
   14f74:	ldr	r4, [r8, #8]
   14f78:	ldr	r3, [r8, #12]
   14f7c:	cmp	r3, #0
   14f80:	bne	14f54 <__assert_fail@plt+0x3c84>
   14f84:	bl	13a30 <__assert_fail@plt+0x2760>
   14f88:	cmp	r4, #0
   14f8c:	bne	14f6c <__assert_fail@plt+0x3c9c>
   14f90:	b	14e5c <__assert_fail@plt+0x3b8c>
   14f94:	movw	r3, #40864	; 0x9fa0
   14f98:	cmp	r0, r3
   14f9c:	beq	14fb0 <__assert_fail@plt+0x3ce0>
   14fa0:	movw	r3, #16719	; 0x414f
   14fa4:	movt	r3, #21318	; 0x5346
   14fa8:	cmp	r0, r3
   14fac:	bne	14be0 <__assert_fail@plt+0x3910>
   14fb0:	ldr	r0, [sp, #68]	; 0x44
   14fb4:	b	149f0 <__assert_fail@plt+0x3720>
   14fb8:	ldr	r8, [sp, #12]
   14fbc:	mov	r0, r4
   14fc0:	ldr	fp, [sp, #16]
   14fc4:	bl	13a30 <__assert_fail@plt+0x2760>
   14fc8:	cmp	r8, #0
   14fcc:	bne	14ff0 <__assert_fail@plt+0x3d20>
   14fd0:	b	15010 <__assert_fail@plt+0x3d40>
   14fd4:	mov	r0, r3
   14fd8:	bl	112c4 <closedir@plt>
   14fdc:	mov	r0, r8
   14fe0:	bl	13a30 <__assert_fail@plt+0x2760>
   14fe4:	cmp	r4, #0
   14fe8:	beq	15010 <__assert_fail@plt+0x3d40>
   14fec:	mov	r8, r4
   14ff0:	mov	r0, r8
   14ff4:	ldr	r4, [r8, #8]
   14ff8:	ldr	r3, [r8, #12]
   14ffc:	cmp	r3, #0
   15000:	bne	14fd4 <__assert_fail@plt+0x3d04>
   15004:	bl	13a30 <__assert_fail@plt+0x2760>
   15008:	cmp	r4, #0
   1500c:	bne	14fec <__assert_fail@plt+0x3d1c>
   15010:	ldr	r0, [fp, #12]
   15014:	mov	r8, #0
   15018:	bl	112c4 <closedir@plt>
   1501c:	ldr	r3, [r6, #48]	; 0x30
   15020:	mov	r1, #7
   15024:	mov	r2, #36	; 0x24
   15028:	str	r8, [fp, #12]
   1502c:	strh	r1, [fp, #56]	; 0x38
   15030:	orr	r3, r3, #8192	; 0x2000
   15034:	str	r3, [r6, #48]	; 0x30
   15038:	str	r2, [sl]
   1503c:	b	14898 <__assert_fail@plt+0x35c8>
   15040:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15044:	strd	r6, [sp, #8]
   15048:	bic	r7, r1, #4080	; 0xff0
   1504c:	bic	r7, r7, #15
   15050:	strd	r8, [sp, #16]
   15054:	strd	sl, [sp, #24]
   15058:	cmp	r7, #0
   1505c:	str	lr, [sp, #32]
   15060:	sub	sp, sp, #36	; 0x24
   15064:	str	r2, [sp, #12]
   15068:	bne	154d4 <__assert_fail@plt+0x4204>
   1506c:	and	r3, r1, #516	; 0x204
   15070:	mov	r5, r1
   15074:	cmp	r3, #516	; 0x204
   15078:	beq	15468 <__assert_fail@plt+0x4198>
   1507c:	ands	r7, r1, #18
   15080:	beq	15468 <__assert_fail@plt+0x4198>
   15084:	mov	r9, r0
   15088:	mov	r1, #96	; 0x60
   1508c:	mov	r0, #1
   15090:	bl	1c4e0 <__assert_fail@plt+0xb210>
   15094:	subs	r7, r0, #0
   15098:	beq	153e0 <__assert_fail@plt+0x4110>
   1509c:	ldr	r3, [sp, #12]
   150a0:	tst	r5, #2
   150a4:	mvn	r2, #99	; 0x63
   150a8:	streq	r5, [r7, #48]	; 0x30
   150ac:	str	r2, [r7, #32]
   150b0:	str	r3, [r7, #44]	; 0x2c
   150b4:	bicne	r3, r5, #512	; 0x200
   150b8:	orrne	r3, r3, #4
   150bc:	strne	r3, [r7, #48]	; 0x30
   150c0:	ldr	r3, [r9]
   150c4:	cmp	r3, #0
   150c8:	beq	15520 <__assert_fail@plt+0x4250>
   150cc:	mov	r6, r9
   150d0:	mov	r4, #0
   150d4:	mov	r0, r3
   150d8:	bl	11168 <strlen@plt>
   150dc:	ldr	r3, [r6, #4]!
   150e0:	cmp	r4, r0
   150e4:	movcc	r4, r0
   150e8:	cmp	r3, #0
   150ec:	bne	150d4 <__assert_fail@plt+0x3e04>
   150f0:	add	r4, r4, #1
   150f4:	cmp	r4, #4096	; 0x1000
   150f8:	movcc	r4, #4096	; 0x1000
   150fc:	ldr	r0, [r7, #24]
   15100:	ldr	r3, [r7, #36]	; 0x24
   15104:	add	r1, r3, #256	; 0x100
   15108:	add	r1, r1, r4
   1510c:	cmp	r3, r1
   15110:	bhi	154e8 <__assert_fail@plt+0x4218>
   15114:	str	r1, [r7, #36]	; 0x24
   15118:	bl	1c590 <__assert_fail@plt+0xb2c0>
   1511c:	subs	r4, r0, #0
   15120:	beq	1556c <__assert_fail@plt+0x429c>
   15124:	ldr	r3, [r9]
   15128:	str	r4, [r7, #24]
   1512c:	cmp	r3, #0
   15130:	str	r3, [sp, #16]
   15134:	beq	154c0 <__assert_fail@plt+0x41f0>
   15138:	mov	r0, #176	; 0xb0
   1513c:	bl	1c554 <__assert_fail@plt+0xb284>
   15140:	subs	ip, r0, #0
   15144:	str	ip, [sp, #16]
   15148:	beq	15450 <__assert_fail@plt+0x4180>
   1514c:	ldr	r2, [sp, #12]
   15150:	mov	r3, #0
   15154:	mvn	r1, #0
   15158:	ldr	r0, [r7, #24]
   1515c:	str	r3, [ip, #12]
   15160:	str	r3, [ip, #16]
   15164:	cmp	r2, r3
   15168:	mov	r2, #196608	; 0x30000
   1516c:	str	r3, [ip, #20]
   15170:	str	r7, [ip, #44]	; 0x2c
   15174:	str	r3, [ip, #32]
   15178:	str	r3, [ip, #52]	; 0x34
   1517c:	strb	r3, [ip, #168]	; 0xa8
   15180:	moveq	r3, #1
   15184:	str	r0, [ip, #28]
   15188:	streq	r3, [sp, #24]
   1518c:	str	r1, [ip, #48]	; 0x30
   15190:	str	r2, [ip, #58]	; 0x3a
   15194:	ldr	fp, [r9]
   15198:	beq	151a8 <__assert_fail@plt+0x3ed8>
   1519c:	ldr	r3, [r7, #48]	; 0x30
   151a0:	ubfx	r3, r3, #10, #1
   151a4:	str	r3, [sp, #24]
   151a8:	cmp	fp, #0
   151ac:	beq	15598 <__assert_fail@plt+0x42c8>
   151b0:	eor	r5, r5, #2048	; 0x800
   151b4:	mov	r3, #0
   151b8:	ubfx	r2, r5, #11, #1
   151bc:	mov	r6, r3
   151c0:	mov	sl, r3
   151c4:	mov	r8, r3
   151c8:	str	r2, [sp, #20]
   151cc:	str	r3, [sp, #28]
   151d0:	b	1520c <__assert_fail@plt+0x3f3c>
   151d4:	ldr	r2, [sp, #12]
   151d8:	mov	r3, #11
   151dc:	mov	r0, #2
   151e0:	mov	r1, #0
   151e4:	strh	r3, [r4, #56]	; 0x38
   151e8:	strd	r0, [r4, #112]	; 0x70
   151ec:	cmp	r2, #0
   151f0:	beq	154ac <__assert_fail@plt+0x41dc>
   151f4:	str	r8, [r4, #8]
   151f8:	mov	r8, r4
   151fc:	ldr	fp, [r9, #4]!
   15200:	add	sl, sl, #1
   15204:	cmp	fp, #0
   15208:	beq	15308 <__assert_fail@plt+0x4038>
   1520c:	mov	r0, fp
   15210:	bl	11168 <strlen@plt>
   15214:	ldr	r3, [sp, #20]
   15218:	mov	r5, r0
   1521c:	cmp	r0, #2
   15220:	movls	r3, #0
   15224:	andhi	r3, r3, #1
   15228:	cmp	r3, #0
   1522c:	bne	15478 <__assert_fail@plt+0x41a8>
   15230:	add	r0, r5, #176	; 0xb0
   15234:	bic	r0, r0, #7
   15238:	bl	1c554 <__assert_fail@plt+0xb284>
   1523c:	subs	r4, r0, #0
   15240:	beq	15400 <__assert_fail@plt+0x4130>
   15244:	add	r3, r4, #168	; 0xa8
   15248:	mov	r1, fp
   1524c:	mov	r0, r3
   15250:	mov	r2, r5
   15254:	bl	11030 <memcpy@plt>
   15258:	add	ip, r4, r5
   1525c:	ldr	r2, [sp, #24]
   15260:	mov	r3, r0
   15264:	cmp	r8, #0
   15268:	mov	r1, #3
   1526c:	strb	r6, [ip, #168]	; 0xa8
   15270:	moveq	r2, #0
   15274:	ldr	ip, [sp, #16]
   15278:	ldr	r0, [r7, #24]
   1527c:	cmp	r2, #0
   15280:	str	ip, [r4, #4]
   15284:	str	r6, [r4, #12]
   15288:	str	r6, [r4, #16]
   1528c:	str	r6, [r4, #20]
   15290:	str	r3, [r4, #24]
   15294:	str	r0, [r4, #28]
   15298:	str	r6, [r4, #32]
   1529c:	str	r7, [r4, #44]	; 0x2c
   152a0:	str	r6, [r4, #48]	; 0x30
   152a4:	str	r5, [r4, #52]	; 0x34
   152a8:	strh	r6, [r4, #58]	; 0x3a
   152ac:	strh	r1, [r4, #60]	; 0x3c
   152b0:	bne	151d4 <__assert_fail@plt+0x3f04>
   152b4:	mov	r3, r2
   152b8:	mov	r2, r4
   152bc:	ldr	r0, [r7, #32]
   152c0:	ldr	r1, [r7, #48]	; 0x30
   152c4:	bl	13e54 <__assert_fail@plt+0x2b84>
   152c8:	ldr	r3, [sp, #12]
   152cc:	strh	r0, [r4, #56]	; 0x38
   152d0:	cmp	r3, #0
   152d4:	bne	151f4 <__assert_fail@plt+0x3f24>
   152d8:	cmp	r8, #0
   152dc:	str	r3, [r4, #8]
   152e0:	moveq	r8, r4
   152e4:	streq	r4, [sp, #28]
   152e8:	beq	151fc <__assert_fail@plt+0x3f2c>
   152ec:	ldr	r3, [sp, #28]
   152f0:	str	r4, [sp, #28]
   152f4:	str	r4, [r3, #8]
   152f8:	ldr	fp, [r9, #4]!
   152fc:	add	sl, sl, #1
   15300:	cmp	fp, #0
   15304:	bne	1520c <__assert_fail@plt+0x3f3c>
   15308:	ldr	r3, [sp, #12]
   1530c:	cmp	r3, #0
   15310:	cmpne	sl, #1
   15314:	bls	1532c <__assert_fail@plt+0x405c>
   15318:	mov	r1, r8
   1531c:	mov	r2, sl
   15320:	mov	r0, r7
   15324:	bl	13c48 <__assert_fail@plt+0x2978>
   15328:	mov	r8, r0
   1532c:	mov	r0, #176	; 0xb0
   15330:	bl	1c554 <__assert_fail@plt+0xb284>
   15334:	cmp	r0, #0
   15338:	streq	r0, [r7]
   1533c:	beq	15400 <__assert_fail@plt+0x4130>
   15340:	ldr	lr, [r7, #24]
   15344:	movw	r4, #258	; 0x102
   15348:	mov	r1, #0
   1534c:	mov	ip, #1
   15350:	mov	r2, #9
   15354:	str	r0, [r7]
   15358:	ldr	r3, [r7, #48]	; 0x30
   1535c:	str	r8, [r0, #8]
   15360:	str	r1, [r0, #12]
   15364:	str	r1, [r0, #16]
   15368:	str	r1, [r0, #20]
   1536c:	tst	r4, r3
   15370:	mov	r3, #3
   15374:	str	lr, [r0, #28]
   15378:	str	r1, [r0, #32]
   1537c:	str	r7, [r0, #44]	; 0x2c
   15380:	str	ip, [r0, #48]	; 0x30
   15384:	str	r1, [r0, #52]	; 0x34
   15388:	str	r2, [r0, #56]	; 0x38
   1538c:	strh	r3, [r0, #60]	; 0x3c
   15390:	strb	r1, [r0, #168]	; 0xa8
   15394:	beq	15504 <__assert_fail@plt+0x4234>
   15398:	movw	r0, #14896	; 0x3a30
   1539c:	movt	r0, #1
   153a0:	movw	r3, #15200	; 0x3b60
   153a4:	movt	r3, #1
   153a8:	movw	r2, #15264	; 0x3ba0
   153ac:	movt	r2, #1
   153b0:	str	r0, [sp]
   153b4:	mov	r0, #31
   153b8:	bl	16b4c <__assert_fail@plt+0x587c>
   153bc:	cmp	r0, #0
   153c0:	str	r0, [r7, #56]	; 0x38
   153c4:	beq	15400 <__assert_fail@plt+0x4130>
   153c8:	ldr	r3, [r7, #48]	; 0x30
   153cc:	tst	r3, #516	; 0x204
   153d0:	beq	15528 <__assert_fail@plt+0x4258>
   153d4:	mvn	r1, #0
   153d8:	add	r0, r7, #60	; 0x3c
   153dc:	bl	17918 <__assert_fail@plt+0x6648>
   153e0:	mov	r0, r7
   153e4:	add	sp, sp, #36	; 0x24
   153e8:	ldrd	r4, [sp]
   153ec:	ldrd	r6, [sp, #8]
   153f0:	ldrd	r8, [sp, #16]
   153f4:	ldrd	sl, [sp, #24]
   153f8:	add	sp, sp, #32
   153fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15400:	cmp	r8, #0
   15404:	bne	15428 <__assert_fail@plt+0x4158>
   15408:	b	15448 <__assert_fail@plt+0x4178>
   1540c:	mov	r0, r3
   15410:	bl	112c4 <closedir@plt>
   15414:	mov	r0, r8
   15418:	bl	13a30 <__assert_fail@plt+0x2760>
   1541c:	cmp	r4, #0
   15420:	beq	15448 <__assert_fail@plt+0x4178>
   15424:	mov	r8, r4
   15428:	mov	r0, r8
   1542c:	ldr	r4, [r8, #8]
   15430:	ldr	r3, [r8, #12]
   15434:	cmp	r3, #0
   15438:	bne	1540c <__assert_fail@plt+0x413c>
   1543c:	bl	13a30 <__assert_fail@plt+0x2760>
   15440:	cmp	r4, #0
   15444:	bne	15424 <__assert_fail@plt+0x4154>
   15448:	ldr	r0, [sp, #16]
   1544c:	bl	13a30 <__assert_fail@plt+0x2760>
   15450:	ldr	r0, [r7, #24]
   15454:	bl	13a30 <__assert_fail@plt+0x2760>
   15458:	mov	r0, r7
   1545c:	mov	r7, #0
   15460:	bl	13a30 <__assert_fail@plt+0x2760>
   15464:	b	153e0 <__assert_fail@plt+0x4110>
   15468:	bl	11180 <__errno_location@plt>
   1546c:	mov	r3, #22
   15470:	str	r3, [r0]
   15474:	b	153e0 <__assert_fail@plt+0x4110>
   15478:	sub	r3, r0, #1
   1547c:	ldrb	r2, [fp, r3]
   15480:	add	r3, fp, r3
   15484:	cmp	r2, #47	; 0x2f
   15488:	bne	15230 <__assert_fail@plt+0x3f60>
   1548c:	ldrb	r2, [r3, #-1]!
   15490:	cmp	r2, #47	; 0x2f
   15494:	bne	15230 <__assert_fail@plt+0x3f60>
   15498:	sub	r5, r5, #1
   1549c:	cmp	r5, #1
   154a0:	bne	1548c <__assert_fail@plt+0x41bc>
   154a4:	mov	r0, #176	; 0xb0
   154a8:	b	15238 <__assert_fail@plt+0x3f68>
   154ac:	ldr	r3, [sp, #28]
   154b0:	str	r2, [r4, #8]
   154b4:	str	r4, [sp, #28]
   154b8:	str	r4, [r3, #8]
   154bc:	b	152f8 <__assert_fail@plt+0x4028>
   154c0:	ldr	r3, [sp, #12]
   154c4:	cmp	r3, #0
   154c8:	beq	15590 <__assert_fail@plt+0x42c0>
   154cc:	ldr	fp, [sp, #16]
   154d0:	b	1519c <__assert_fail@plt+0x3ecc>
   154d4:	bl	11180 <__errno_location@plt>
   154d8:	mov	r3, #22
   154dc:	mov	r7, #0
   154e0:	str	r3, [r0]
   154e4:	b	153e0 <__assert_fail@plt+0x4110>
   154e8:	bl	13a30 <__assert_fail@plt+0x2760>
   154ec:	mov	r3, #0
   154f0:	str	r3, [r7, #24]
   154f4:	bl	11180 <__errno_location@plt>
   154f8:	mov	r3, #36	; 0x24
   154fc:	str	r3, [r0]
   15500:	b	15458 <__assert_fail@plt+0x4188>
   15504:	mov	r0, #32
   15508:	bl	1c554 <__assert_fail@plt+0xb284>
   1550c:	cmp	r0, #0
   15510:	str	r0, [r7, #56]	; 0x38
   15514:	beq	15400 <__assert_fail@plt+0x4130>
   15518:	bl	1c670 <__assert_fail@plt+0xb3a0>
   1551c:	b	153c8 <__assert_fail@plt+0x40f8>
   15520:	mov	r4, #4096	; 0x1000
   15524:	b	150fc <__assert_fail@plt+0x3e2c>
   15528:	lsl	r2, r3, #11
   1552c:	tst	r3, #512	; 0x200
   15530:	and	r2, r2, #32768	; 0x8000
   15534:	orr	r2, r2, #540672	; 0x84000
   15538:	orr	r2, r2, #2304	; 0x900
   1553c:	beq	1557c <__assert_fail@plt+0x42ac>
   15540:	movw	r1, #56976	; 0xde90
   15544:	movt	r1, #1
   15548:	ldr	r0, [r7, #32]
   1554c:	bl	179e4 <__assert_fail@plt+0x6714>
   15550:	cmp	r0, #0
   15554:	str	r0, [r7, #28]
   15558:	bge	153d4 <__assert_fail@plt+0x4104>
   1555c:	ldr	r3, [r7, #48]	; 0x30
   15560:	orr	r3, r3, #4
   15564:	str	r3, [r7, #48]	; 0x30
   15568:	b	153d4 <__assert_fail@plt+0x4104>
   1556c:	ldr	r0, [r7, #24]
   15570:	bl	13a30 <__assert_fail@plt+0x2760>
   15574:	str	r4, [r7, #24]
   15578:	b	15458 <__assert_fail@plt+0x4188>
   1557c:	mov	r1, r2
   15580:	movw	r0, #56976	; 0xde90
   15584:	movt	r0, #1
   15588:	bl	1ca2c <__assert_fail@plt+0xb75c>
   1558c:	b	15550 <__assert_fail@plt+0x4280>
   15590:	ldr	r8, [sp, #16]
   15594:	b	1532c <__assert_fail@plt+0x405c>
   15598:	mov	r8, fp
   1559c:	b	1532c <__assert_fail@plt+0x405c>
   155a0:	ldr	r3, [r0]
   155a4:	strd	r4, [sp, #-16]!
   155a8:	str	r6, [sp, #8]
   155ac:	mov	r6, r0
   155b0:	str	lr, [sp, #12]
   155b4:	cmp	r3, #0
   155b8:	beq	1560c <__assert_fail@plt+0x433c>
   155bc:	ldr	r2, [r3, #48]	; 0x30
   155c0:	cmp	r2, #0
   155c4:	bge	155e0 <__assert_fail@plt+0x4310>
   155c8:	b	15790 <__assert_fail@plt+0x44c0>
   155cc:	bl	13a30 <__assert_fail@plt+0x2760>
   155d0:	ldr	r3, [r4, #48]	; 0x30
   155d4:	cmp	r3, #0
   155d8:	blt	15604 <__assert_fail@plt+0x4334>
   155dc:	mov	r3, r4
   155e0:	ldr	r4, [r3, #8]
   155e4:	mov	r0, r3
   155e8:	cmp	r4, #0
   155ec:	bne	155cc <__assert_fail@plt+0x42fc>
   155f0:	ldr	r4, [r3, #4]
   155f4:	bl	13a30 <__assert_fail@plt+0x2760>
   155f8:	ldr	r3, [r4, #48]	; 0x30
   155fc:	cmp	r3, #0
   15600:	bge	155dc <__assert_fail@plt+0x430c>
   15604:	mov	r0, r4
   15608:	bl	13a30 <__assert_fail@plt+0x2760>
   1560c:	ldr	r4, [r6, #4]
   15610:	cmp	r4, #0
   15614:	bne	15638 <__assert_fail@plt+0x4368>
   15618:	b	15658 <__assert_fail@plt+0x4388>
   1561c:	mov	r0, r3
   15620:	bl	112c4 <closedir@plt>
   15624:	mov	r0, r4
   15628:	bl	13a30 <__assert_fail@plt+0x2760>
   1562c:	cmp	r5, #0
   15630:	beq	15658 <__assert_fail@plt+0x4388>
   15634:	mov	r4, r5
   15638:	mov	r0, r4
   1563c:	ldr	r5, [r4, #8]
   15640:	ldr	r3, [r4, #12]
   15644:	cmp	r3, #0
   15648:	bne	1561c <__assert_fail@plt+0x434c>
   1564c:	bl	13a30 <__assert_fail@plt+0x2760>
   15650:	cmp	r5, #0
   15654:	bne	15634 <__assert_fail@plt+0x4364>
   15658:	ldr	r0, [r6, #8]
   1565c:	bl	13a30 <__assert_fail@plt+0x2760>
   15660:	ldr	r0, [r6, #24]
   15664:	bl	13a30 <__assert_fail@plt+0x2760>
   15668:	ldr	r3, [r6, #48]	; 0x30
   1566c:	tst	r3, #512	; 0x200
   15670:	beq	15720 <__assert_fail@plt+0x4450>
   15674:	ldr	r0, [r6, #32]
   15678:	cmp	r0, #0
   1567c:	bge	15708 <__assert_fail@plt+0x4438>
   15680:	mov	r5, #0
   15684:	add	r4, r6, #60	; 0x3c
   15688:	b	15698 <__assert_fail@plt+0x43c8>
   1568c:	bl	17994 <__assert_fail@plt+0x66c4>
   15690:	cmp	r0, #0
   15694:	bge	15700 <__assert_fail@plt+0x4430>
   15698:	mov	r0, r4
   1569c:	bl	17944 <__assert_fail@plt+0x6674>
   156a0:	cmp	r0, #0
   156a4:	mov	r0, r4
   156a8:	beq	1568c <__assert_fail@plt+0x43bc>
   156ac:	ldr	r0, [r6, #52]	; 0x34
   156b0:	cmp	r0, #0
   156b4:	beq	156bc <__assert_fail@plt+0x43ec>
   156b8:	bl	16e8c <__assert_fail@plt+0x5bbc>
   156bc:	ldr	r3, [r6, #48]	; 0x30
   156c0:	movw	r2, #258	; 0x102
   156c4:	ldr	r0, [r6, #56]	; 0x38
   156c8:	tst	r2, r3
   156cc:	beq	15758 <__assert_fail@plt+0x4488>
   156d0:	cmp	r0, #0
   156d4:	beq	156dc <__assert_fail@plt+0x440c>
   156d8:	bl	16e8c <__assert_fail@plt+0x5bbc>
   156dc:	mov	r0, r6
   156e0:	bl	13a30 <__assert_fail@plt+0x2760>
   156e4:	cmp	r5, #0
   156e8:	bne	15798 <__assert_fail@plt+0x44c8>
   156ec:	mov	r0, r5
   156f0:	ldrd	r4, [sp]
   156f4:	ldr	r6, [sp, #8]
   156f8:	add	sp, sp, #12
   156fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15700:	bl	112a0 <close@plt>
   15704:	b	15698 <__assert_fail@plt+0x43c8>
   15708:	bl	112a0 <close@plt>
   1570c:	cmp	r0, #0
   15710:	beq	15680 <__assert_fail@plt+0x43b0>
   15714:	bl	11180 <__errno_location@plt>
   15718:	ldr	r5, [r0]
   1571c:	b	15684 <__assert_fail@plt+0x43b4>
   15720:	tst	r3, #4
   15724:	bne	15680 <__assert_fail@plt+0x43b0>
   15728:	ldr	r0, [r6, #28]
   1572c:	bl	1124c <fchdir@plt>
   15730:	cmp	r0, #0
   15734:	bne	15760 <__assert_fail@plt+0x4490>
   15738:	ldr	r0, [r6, #28]
   1573c:	bl	112a0 <close@plt>
   15740:	cmp	r0, #0
   15744:	beq	15680 <__assert_fail@plt+0x43b0>
   15748:	bl	11180 <__errno_location@plt>
   1574c:	mov	r4, r0
   15750:	ldr	r5, [r4]
   15754:	b	15684 <__assert_fail@plt+0x43b4>
   15758:	bl	13a30 <__assert_fail@plt+0x2760>
   1575c:	b	156dc <__assert_fail@plt+0x440c>
   15760:	bl	11180 <__errno_location@plt>
   15764:	ldr	r5, [r0]
   15768:	mov	r4, r0
   1576c:	ldr	r0, [r6, #28]
   15770:	bl	112a0 <close@plt>
   15774:	adds	r3, r0, #0
   15778:	movne	r3, #1
   1577c:	cmp	r5, #0
   15780:	movne	r3, #0
   15784:	cmp	r3, #0
   15788:	beq	15684 <__assert_fail@plt+0x43b4>
   1578c:	b	15750 <__assert_fail@plt+0x4480>
   15790:	mov	r4, r3
   15794:	b	15604 <__assert_fail@plt+0x4334>
   15798:	bl	11180 <__errno_location@plt>
   1579c:	str	r5, [r0]
   157a0:	mvn	r5, #0
   157a4:	b	156ec <__assert_fail@plt+0x441c>
   157a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   157ac:	ldr	r4, [r0]
   157b0:	strd	r6, [sp, #8]
   157b4:	str	r8, [sp, #16]
   157b8:	str	lr, [sp, #20]
   157bc:	sub	sp, sp, #8
   157c0:	cmp	r4, #0
   157c4:	beq	159d4 <__assert_fail@plt+0x4704>
   157c8:	ldr	r1, [r0, #48]	; 0x30
   157cc:	ands	r3, r1, #8192	; 0x2000
   157d0:	bne	159d4 <__assert_fail@plt+0x4704>
   157d4:	ldrh	r2, [r4, #60]	; 0x3c
   157d8:	mov	r8, r0
   157dc:	mov	r0, #3
   157e0:	strh	r0, [r4, #60]	; 0x3c
   157e4:	cmp	r2, #1
   157e8:	beq	15c2c <__assert_fail@plt+0x495c>
   157ec:	cmp	r2, #2
   157f0:	ldrh	r3, [r4, #56]	; 0x38
   157f4:	beq	158f4 <__assert_fail@plt+0x4624>
   157f8:	cmp	r3, #1
   157fc:	bne	1582c <__assert_fail@plt+0x455c>
   15800:	b	159f4 <__assert_fail@plt+0x4724>
   15804:	mov	r0, r4
   15808:	str	r5, [r8]
   1580c:	bl	13a30 <__assert_fail@plt+0x2760>
   15810:	ldr	r4, [r5, #48]	; 0x30
   15814:	cmp	r4, #0
   15818:	beq	15a74 <__assert_fail@plt+0x47a4>
   1581c:	ldrh	r3, [r5, #60]	; 0x3c
   15820:	mov	r4, r5
   15824:	cmp	r3, #4
   15828:	bne	15b48 <__assert_fail@plt+0x4878>
   1582c:	ldr	r5, [r4, #8]
   15830:	cmp	r5, #0
   15834:	bne	15804 <__assert_fail@plt+0x4534>
   15838:	ldr	r6, [r4, #4]
   1583c:	ldr	r3, [r6, #12]
   15840:	cmp	r3, #0
   15844:	bne	15da4 <__assert_fail@plt+0x4ad4>
   15848:	mov	r0, r4
   1584c:	str	r6, [r8]
   15850:	bl	13a30 <__assert_fail@plt+0x2760>
   15854:	ldr	r3, [r6, #48]	; 0x30
   15858:	cmn	r3, #1
   1585c:	beq	15d84 <__assert_fail@plt+0x4ab4>
   15860:	ldrh	r3, [r6, #56]	; 0x38
   15864:	cmp	r3, #11
   15868:	beq	15c28 <__assert_fail@plt+0x4958>
   1586c:	ldr	r2, [r8, #24]
   15870:	mov	r1, #0
   15874:	ldr	r3, [r6, #40]	; 0x28
   15878:	strb	r1, [r2, r3]
   1587c:	ldr	r3, [r6, #48]	; 0x30
   15880:	cmp	r3, r1
   15884:	beq	159a0 <__assert_fail@plt+0x46d0>
   15888:	ldrh	r3, [r6, #58]	; 0x3a
   1588c:	tst	r3, #2
   15890:	beq	15ce0 <__assert_fail@plt+0x4a10>
   15894:	ldr	r3, [r8, #48]	; 0x30
   15898:	ldr	r4, [r6, #36]	; 0x24
   1589c:	tst	r3, #4
   158a0:	bne	158e8 <__assert_fail@plt+0x4618>
   158a4:	tst	r3, #512	; 0x200
   158a8:	beq	15e80 <__assert_fail@plt+0x4bb0>
   158ac:	ldr	r1, [r8, #32]
   158b0:	sub	r3, r4, r1
   158b4:	cmn	r1, #100	; 0x64
   158b8:	clz	r3, r3
   158bc:	lsr	r3, r3, #5
   158c0:	moveq	r3, #0
   158c4:	cmp	r3, #0
   158c8:	bne	15c28 <__assert_fail@plt+0x4958>
   158cc:	add	r0, r8, #60	; 0x3c
   158d0:	bl	1794c <__assert_fail@plt+0x667c>
   158d4:	cmp	r0, #0
   158d8:	blt	158e0 <__assert_fail@plt+0x4610>
   158dc:	bl	112a0 <close@plt>
   158e0:	str	r4, [r8, #32]
   158e4:	ldr	r4, [r6, #36]	; 0x24
   158e8:	mov	r0, r4
   158ec:	bl	112a0 <close@plt>
   158f0:	b	15ce8 <__assert_fail@plt+0x4a18>
   158f4:	sub	r2, r3, #12
   158f8:	cmp	r2, #1
   158fc:	bls	15be4 <__assert_fail@plt+0x4914>
   15900:	cmp	r3, #1
   15904:	bne	1582c <__assert_fail@plt+0x455c>
   15908:	tst	r1, #64	; 0x40
   1590c:	beq	15924 <__assert_fail@plt+0x4654>
   15910:	ldrd	r2, [r8, #16]
   15914:	ldrd	r6, [r4, #64]	; 0x40
   15918:	cmp	r7, r3
   1591c:	cmpeq	r6, r2
   15920:	bne	159fc <__assert_fail@plt+0x472c>
   15924:	ldr	r5, [r8, #4]
   15928:	cmp	r5, #0
   1592c:	beq	15c8c <__assert_fail@plt+0x49bc>
   15930:	tst	r1, #4096	; 0x1000
   15934:	bne	15c40 <__assert_fail@plt+0x4970>
   15938:	mvn	r2, #0
   1593c:	mov	r1, r4
   15940:	ldr	r3, [r4, #24]
   15944:	mov	r0, r8
   15948:	bl	141fc <__assert_fail@plt+0x2f2c>
   1594c:	cmp	r0, #0
   15950:	beq	15d6c <__assert_fail@plt+0x4a9c>
   15954:	bl	11180 <__errno_location@plt>
   15958:	ldrh	r3, [r4, #58]	; 0x3a
   1595c:	ldr	r2, [r0]
   15960:	orr	r3, r3, #1
   15964:	str	r2, [r4, #32]
   15968:	strh	r3, [r4, #58]	; 0x3a
   1596c:	ldr	r4, [r8, #4]
   15970:	cmp	r4, #0
   15974:	beq	15994 <__assert_fail@plt+0x46c4>
   15978:	mov	r3, r4
   1597c:	ldr	r2, [r3, #4]
   15980:	ldr	r2, [r2, #24]
   15984:	str	r2, [r3, #24]
   15988:	ldr	r3, [r3, #8]
   1598c:	cmp	r3, #0
   15990:	bne	1597c <__assert_fail@plt+0x46ac>
   15994:	mov	r3, #0
   15998:	str	r3, [r8, #4]
   1599c:	b	15b50 <__assert_fail@plt+0x4880>
   159a0:	mov	r0, r8
   159a4:	bl	14150 <__assert_fail@plt+0x2e80>
   159a8:	cmp	r0, #0
   159ac:	beq	15ce8 <__assert_fail@plt+0x4a18>
   159b0:	bl	11180 <__errno_location@plt>
   159b4:	ldr	r3, [r8, #48]	; 0x30
   159b8:	ldr	r2, [r0]
   159bc:	orr	r0, r3, #8192	; 0x2000
   159c0:	ldrh	r3, [r6, #56]	; 0x38
   159c4:	str	r2, [r6, #32]
   159c8:	str	r0, [r8, #48]	; 0x30
   159cc:	cmp	r3, #2
   159d0:	bne	15cfc <__assert_fail@plt+0x4a2c>
   159d4:	mov	r4, #0
   159d8:	mov	r0, r4
   159dc:	add	sp, sp, #8
   159e0:	ldrd	r4, [sp]
   159e4:	ldrd	r6, [sp, #8]
   159e8:	ldr	r8, [sp, #16]
   159ec:	add	sp, sp, #20
   159f0:	pop	{pc}		; (ldr pc, [sp], #4)
   159f4:	cmp	r2, #4
   159f8:	bne	15908 <__assert_fail@plt+0x4638>
   159fc:	ldrh	r3, [r4, #58]	; 0x3a
   15a00:	tst	r3, #2
   15a04:	bne	15de4 <__assert_fail@plt+0x4b14>
   15a08:	ldr	r5, [r8, #4]
   15a0c:	cmp	r5, #0
   15a10:	bne	15a48 <__assert_fail@plt+0x4778>
   15a14:	mov	r3, #6
   15a18:	mov	r2, r4
   15a1c:	ldr	r0, [r8, #48]	; 0x30
   15a20:	add	r1, r8, #56	; 0x38
   15a24:	strh	r3, [r4, #56]	; 0x38
   15a28:	bl	14084 <__assert_fail@plt+0x2db4>
   15a2c:	b	159d8 <__assert_fail@plt+0x4708>
   15a30:	bl	112c4 <closedir@plt>
   15a34:	mov	r0, r5
   15a38:	bl	13a30 <__assert_fail@plt+0x2760>
   15a3c:	cmp	r6, #0
   15a40:	beq	15a68 <__assert_fail@plt+0x4798>
   15a44:	mov	r5, r6
   15a48:	ldr	r6, [r5, #8]
   15a4c:	ldr	r0, [r5, #12]
   15a50:	cmp	r0, #0
   15a54:	bne	15a30 <__assert_fail@plt+0x4760>
   15a58:	mov	r0, r5
   15a5c:	bl	13a30 <__assert_fail@plt+0x2760>
   15a60:	cmp	r6, #0
   15a64:	bne	15a44 <__assert_fail@plt+0x4774>
   15a68:	mov	r3, #0
   15a6c:	str	r3, [r8, #4]
   15a70:	b	15a14 <__assert_fail@plt+0x4744>
   15a74:	mov	r0, r8
   15a78:	bl	14150 <__assert_fail@plt+0x2e80>
   15a7c:	ldr	r3, [r8, #48]	; 0x30
   15a80:	cmp	r0, #0
   15a84:	orrne	r3, r3, #8192	; 0x2000
   15a88:	strne	r3, [r8, #48]	; 0x30
   15a8c:	bne	159d8 <__assert_fail@plt+0x4708>
   15a90:	movw	r2, #258	; 0x102
   15a94:	ldr	r0, [r8, #56]	; 0x38
   15a98:	tst	r2, r3
   15a9c:	beq	15ddc <__assert_fail@plt+0x4b0c>
   15aa0:	cmp	r0, #0
   15aa4:	beq	15aac <__assert_fail@plt+0x47dc>
   15aa8:	bl	16e8c <__assert_fail@plt+0x5bbc>
   15aac:	ldr	r2, [r5, #52]	; 0x34
   15ab0:	add	r4, r5, #168	; 0xa8
   15ab4:	mov	r1, r4
   15ab8:	ldr	r0, [r8, #24]
   15abc:	str	r2, [r5, #40]	; 0x28
   15ac0:	add	r2, r2, #1
   15ac4:	bl	11000 <memmove@plt>
   15ac8:	mov	r0, r4
   15acc:	mov	r1, #47	; 0x2f
   15ad0:	bl	11210 <strrchr@plt>
   15ad4:	cmp	r0, #0
   15ad8:	beq	15b08 <__assert_fail@plt+0x4838>
   15adc:	cmp	r4, r0
   15ae0:	beq	15d74 <__assert_fail@plt+0x4aa4>
   15ae4:	add	r6, r0, #1
   15ae8:	mov	r0, r6
   15aec:	bl	11168 <strlen@plt>
   15af0:	mov	r7, r0
   15af4:	mov	r1, r6
   15af8:	mov	r0, r4
   15afc:	add	r2, r7, #1
   15b00:	bl	11000 <memmove@plt>
   15b04:	str	r7, [r5, #52]	; 0x34
   15b08:	ldr	r3, [r8, #24]
   15b0c:	movw	r1, #258	; 0x102
   15b10:	ldr	r2, [r8, #48]	; 0x30
   15b14:	str	r3, [r5, #24]
   15b18:	str	r3, [r5, #28]
   15b1c:	tst	r1, r2
   15b20:	bne	15d34 <__assert_fail@plt+0x4a64>
   15b24:	mov	r0, #32
   15b28:	bl	1c554 <__assert_fail@plt+0xb284>
   15b2c:	cmp	r0, #0
   15b30:	str	r0, [r8, #56]	; 0x38
   15b34:	beq	15e74 <__assert_fail@plt+0x4ba4>
   15b38:	bl	1c670 <__assert_fail@plt+0xb3a0>
   15b3c:	mov	r4, r5
   15b40:	ldrh	r3, [r5, #56]	; 0x38
   15b44:	b	15b94 <__assert_fail@plt+0x48c4>
   15b48:	cmp	r3, #2
   15b4c:	beq	15df0 <__assert_fail@plt+0x4b20>
   15b50:	ldr	r0, [r4, #4]
   15b54:	mov	ip, #47	; 0x2f
   15b58:	add	r1, r4, #168	; 0xa8
   15b5c:	ldr	r3, [r8, #24]
   15b60:	ldr	lr, [r0, #28]
   15b64:	ldr	r2, [r0, #40]	; 0x28
   15b68:	sub	r0, r2, #1
   15b6c:	ldrb	lr, [lr, r0]
   15b70:	cmp	lr, ip
   15b74:	movne	r0, r2
   15b78:	strb	ip, [r3, r0]
   15b7c:	add	r0, r3, r0
   15b80:	ldr	r2, [r4, #52]	; 0x34
   15b84:	add	r0, r0, #1
   15b88:	add	r2, r2, #1
   15b8c:	bl	11000 <memmove@plt>
   15b90:	ldrh	r3, [r4, #56]	; 0x38
   15b94:	cmp	r3, #11
   15b98:	str	r4, [r8]
   15b9c:	beq	15c0c <__assert_fail@plt+0x493c>
   15ba0:	cmp	r3, #1
   15ba4:	bne	159d8 <__assert_fail@plt+0x4708>
   15ba8:	ldr	r3, [r4, #48]	; 0x30
   15bac:	add	r1, r8, #56	; 0x38
   15bb0:	ldr	r0, [r8, #48]	; 0x30
   15bb4:	cmp	r3, #0
   15bb8:	ldrdeq	r2, [r4, #64]	; 0x40
   15bbc:	strdeq	r2, [r8, #16]
   15bc0:	mov	r2, r4
   15bc4:	bl	13fb0 <__assert_fail@plt+0x2ce0>
   15bc8:	subs	r5, r0, #0
   15bcc:	bne	159d8 <__assert_fail@plt+0x4708>
   15bd0:	bl	11180 <__errno_location@plt>
   15bd4:	mov	r3, #12
   15bd8:	mov	r4, r5
   15bdc:	str	r3, [r0]
   15be0:	b	159d8 <__assert_fail@plt+0x4708>
   15be4:	mov	r3, #1
   15be8:	mov	r2, r4
   15bec:	ldr	r0, [r8, #32]
   15bf0:	bl	13e54 <__assert_fail@plt+0x2b84>
   15bf4:	cmp	r0, #1
   15bf8:	strh	r0, [r4, #56]	; 0x38
   15bfc:	beq	15e98 <__assert_fail@plt+0x4bc8>
   15c00:	cmp	r0, #11
   15c04:	str	r4, [r8]
   15c08:	bne	159d8 <__assert_fail@plt+0x4708>
   15c0c:	ldrd	r2, [r4, #112]	; 0x70
   15c10:	cmp	r3, #0
   15c14:	cmpeq	r2, #2
   15c18:	beq	15e20 <__assert_fail@plt+0x4b50>
   15c1c:	cmp	r3, #0
   15c20:	cmpeq	r2, #1
   15c24:	beq	159d8 <__assert_fail@plt+0x4708>
   15c28:	bl	11294 <abort@plt>
   15c2c:	mov	r2, r4
   15c30:	ldr	r0, [r8, #32]
   15c34:	bl	13e54 <__assert_fail@plt+0x2b84>
   15c38:	strh	r0, [r4, #56]	; 0x38
   15c3c:	b	159d8 <__assert_fail@plt+0x4708>
   15c40:	bic	r1, r1, #4096	; 0x1000
   15c44:	str	r1, [r8, #48]	; 0x30
   15c48:	b	15c64 <__assert_fail@plt+0x4994>
   15c4c:	bl	112c4 <closedir@plt>
   15c50:	mov	r0, r5
   15c54:	bl	13a30 <__assert_fail@plt+0x2760>
   15c58:	cmp	r6, #0
   15c5c:	beq	15c84 <__assert_fail@plt+0x49b4>
   15c60:	mov	r5, r6
   15c64:	ldr	r6, [r5, #8]
   15c68:	ldr	r0, [r5, #12]
   15c6c:	cmp	r0, #0
   15c70:	bne	15c4c <__assert_fail@plt+0x497c>
   15c74:	mov	r0, r5
   15c78:	bl	13a30 <__assert_fail@plt+0x2760>
   15c7c:	cmp	r6, #0
   15c80:	bne	15c60 <__assert_fail@plt+0x4990>
   15c84:	mov	r3, #0
   15c88:	str	r3, [r8, #4]
   15c8c:	mov	r1, #3
   15c90:	mov	r0, r8
   15c94:	bl	144bc <__assert_fail@plt+0x31ec>
   15c98:	cmp	r0, #0
   15c9c:	str	r0, [r8, #4]
   15ca0:	movne	r4, r0
   15ca4:	bne	15994 <__assert_fail@plt+0x46c4>
   15ca8:	ldr	r0, [r8, #48]	; 0x30
   15cac:	tst	r0, #8192	; 0x2000
   15cb0:	bne	159d4 <__assert_fail@plt+0x4704>
   15cb4:	ldr	r3, [r4, #32]
   15cb8:	cmp	r3, #0
   15cbc:	beq	15cd0 <__assert_fail@plt+0x4a00>
   15cc0:	ldrh	r3, [r4, #56]	; 0x38
   15cc4:	cmp	r3, #4
   15cc8:	movne	r3, #7
   15ccc:	strhne	r3, [r4, #56]	; 0x38
   15cd0:	add	r1, r8, #56	; 0x38
   15cd4:	mov	r2, r4
   15cd8:	bl	14084 <__assert_fail@plt+0x2db4>
   15cdc:	b	159d8 <__assert_fail@plt+0x4708>
   15ce0:	tst	r3, #1
   15ce4:	beq	15e40 <__assert_fail@plt+0x4b70>
   15ce8:	ldrh	r3, [r6, #56]	; 0x38
   15cec:	ldr	r0, [r8, #48]	; 0x30
   15cf0:	cmp	r3, #2
   15cf4:	beq	15d24 <__assert_fail@plt+0x4a54>
   15cf8:	ldr	r2, [r6, #32]
   15cfc:	cmp	r2, #0
   15d00:	movne	r3, #7
   15d04:	strhne	r3, [r6, #56]	; 0x38
   15d08:	bne	15d24 <__assert_fail@plt+0x4a54>
   15d0c:	mov	r3, #6
   15d10:	mov	r2, r6
   15d14:	add	r1, r8, #56	; 0x38
   15d18:	strh	r3, [r6, #56]	; 0x38
   15d1c:	bl	14084 <__assert_fail@plt+0x2db4>
   15d20:	ldr	r0, [r8, #48]	; 0x30
   15d24:	tst	r0, #8192	; 0x2000
   15d28:	moveq	r4, r6
   15d2c:	beq	159d8 <__assert_fail@plt+0x4708>
   15d30:	b	159d4 <__assert_fail@plt+0x4704>
   15d34:	movw	r1, #14896	; 0x3a30
   15d38:	movt	r1, #1
   15d3c:	movw	r3, #15200	; 0x3b60
   15d40:	movt	r3, #1
   15d44:	movw	r2, #15264	; 0x3ba0
   15d48:	movt	r2, #1
   15d4c:	str	r1, [sp]
   15d50:	mov	r0, #31
   15d54:	mov	r1, #0
   15d58:	bl	16b4c <__assert_fail@plt+0x587c>
   15d5c:	mov	r4, r5
   15d60:	ldrh	r3, [r5, #56]	; 0x38
   15d64:	str	r0, [r8, #56]	; 0x38
   15d68:	b	15b94 <__assert_fail@plt+0x48c4>
   15d6c:	ldr	r4, [r8, #4]
   15d70:	b	15994 <__assert_fail@plt+0x46c4>
   15d74:	ldrb	r3, [r4, #1]
   15d78:	cmp	r3, #0
   15d7c:	beq	15b08 <__assert_fail@plt+0x4838>
   15d80:	b	15ae4 <__assert_fail@plt+0x4814>
   15d84:	mov	r0, r6
   15d88:	bl	13a30 <__assert_fail@plt+0x2760>
   15d8c:	bl	11180 <__errno_location@plt>
   15d90:	mov	r3, #0
   15d94:	mov	r4, r3
   15d98:	str	r3, [r0]
   15d9c:	str	r3, [r8]
   15da0:	b	159d8 <__assert_fail@plt+0x4708>
   15da4:	ldr	r2, [r8, #24]
   15da8:	mov	r1, #3
   15dac:	mov	r0, r8
   15db0:	ldr	r3, [r6, #40]	; 0x28
   15db4:	str	r6, [r8]
   15db8:	strb	r5, [r2, r3]
   15dbc:	bl	144bc <__assert_fail@plt+0x31ec>
   15dc0:	subs	r3, r0, #0
   15dc4:	bne	15e64 <__assert_fail@plt+0x4b94>
   15dc8:	ldr	r3, [r8, #48]	; 0x30
   15dcc:	tst	r3, #8192	; 0x2000
   15dd0:	bne	159d4 <__assert_fail@plt+0x4704>
   15dd4:	ldr	r6, [r4, #4]
   15dd8:	b	15848 <__assert_fail@plt+0x4578>
   15ddc:	bl	13a30 <__assert_fail@plt+0x2760>
   15de0:	b	15aac <__assert_fail@plt+0x47dc>
   15de4:	ldr	r0, [r4, #36]	; 0x24
   15de8:	bl	112a0 <close@plt>
   15dec:	b	15a08 <__assert_fail@plt+0x4738>
   15df0:	mov	r3, #1
   15df4:	mov	r2, r5
   15df8:	ldr	r0, [r8, #32]
   15dfc:	ldr	r1, [r8, #48]	; 0x30
   15e00:	bl	13e54 <__assert_fail@plt+0x2b84>
   15e04:	cmp	r0, #1
   15e08:	strh	r0, [r5, #56]	; 0x38
   15e0c:	beq	15ef0 <__assert_fail@plt+0x4c20>
   15e10:	mov	r3, #3
   15e14:	mov	r4, r5
   15e18:	strh	r3, [r5, #60]	; 0x3c
   15e1c:	b	15b50 <__assert_fail@plt+0x4880>
   15e20:	mov	r3, #0
   15e24:	mov	r2, r4
   15e28:	ldr	r0, [r8, #32]
   15e2c:	ldr	r1, [r8, #48]	; 0x30
   15e30:	bl	13e54 <__assert_fail@plt+0x2b84>
   15e34:	mov	r3, r0
   15e38:	strh	r0, [r4, #56]	; 0x38
   15e3c:	b	15ba0 <__assert_fail@plt+0x48d0>
   15e40:	movw	r3, #56400	; 0xdc50
   15e44:	movt	r3, #1
   15e48:	ldr	r1, [r6, #4]
   15e4c:	mvn	r2, #0
   15e50:	mov	r0, r8
   15e54:	bl	141fc <__assert_fail@plt+0x2f2c>
   15e58:	cmp	r0, #0
   15e5c:	beq	15ce8 <__assert_fail@plt+0x4a18>
   15e60:	b	159b0 <__assert_fail@plt+0x46e0>
   15e64:	mov	r0, r4
   15e68:	mov	r4, r3
   15e6c:	bl	13a30 <__assert_fail@plt+0x2760>
   15e70:	b	15b50 <__assert_fail@plt+0x4880>
   15e74:	ldrh	r3, [r5, #56]	; 0x38
   15e78:	mov	r4, r5
   15e7c:	b	15b94 <__assert_fail@plt+0x48c4>
   15e80:	mov	r0, r4
   15e84:	bl	1124c <fchdir@plt>
   15e88:	cmp	r0, #0
   15e8c:	bne	15f40 <__assert_fail@plt+0x4c70>
   15e90:	ldr	r4, [r6, #36]	; 0x24
   15e94:	b	158e8 <__assert_fail@plt+0x4618>
   15e98:	ldr	r3, [r8, #48]	; 0x30
   15e9c:	tst	r3, #4
   15ea0:	strne	r4, [r8]
   15ea4:	bne	15ba8 <__assert_fail@plt+0x48d8>
   15ea8:	lsl	r2, r3, #11
   15eac:	tst	r3, #512	; 0x200
   15eb0:	and	r2, r2, #32768	; 0x8000
   15eb4:	orr	r2, r2, #540672	; 0x84000
   15eb8:	orr	r2, r2, #2304	; 0x900
   15ebc:	beq	15f60 <__assert_fail@plt+0x4c90>
   15ec0:	movw	r1, #56976	; 0xde90
   15ec4:	movt	r1, #1
   15ec8:	ldr	r0, [r8, #32]
   15ecc:	bl	179e4 <__assert_fail@plt+0x6714>
   15ed0:	cmp	r0, #0
   15ed4:	str	r0, [r4, #36]	; 0x24
   15ed8:	blt	15f74 <__assert_fail@plt+0x4ca4>
   15edc:	ldrh	r2, [r4, #58]	; 0x3a
   15ee0:	ldrh	r3, [r4, #56]	; 0x38
   15ee4:	orr	r2, r2, #2
   15ee8:	strh	r2, [r4, #58]	; 0x3a
   15eec:	b	15b94 <__assert_fail@plt+0x48c4>
   15ef0:	ldr	r3, [r8, #48]	; 0x30
   15ef4:	tst	r3, #4
   15ef8:	bne	15e10 <__assert_fail@plt+0x4b40>
   15efc:	lsl	r2, r3, #11
   15f00:	tst	r3, #512	; 0x200
   15f04:	and	r2, r2, #32768	; 0x8000
   15f08:	orr	r2, r2, #540672	; 0x84000
   15f0c:	orr	r2, r2, #2304	; 0x900
   15f10:	beq	15f90 <__assert_fail@plt+0x4cc0>
   15f14:	movw	r1, #56976	; 0xde90
   15f18:	movt	r1, #1
   15f1c:	ldr	r0, [r8, #32]
   15f20:	bl	179e4 <__assert_fail@plt+0x6714>
   15f24:	cmp	r0, #0
   15f28:	str	r0, [r5, #36]	; 0x24
   15f2c:	blt	15fa4 <__assert_fail@plt+0x4cd4>
   15f30:	ldrh	r3, [r5, #58]	; 0x3a
   15f34:	orr	r3, r3, #2
   15f38:	strh	r3, [r5, #58]	; 0x3a
   15f3c:	b	15e10 <__assert_fail@plt+0x4b40>
   15f40:	bl	11180 <__errno_location@plt>
   15f44:	ldr	r3, [r8, #48]	; 0x30
   15f48:	ldr	r2, [r0]
   15f4c:	ldr	r4, [r6, #36]	; 0x24
   15f50:	orr	r3, r3, #8192	; 0x2000
   15f54:	str	r2, [r6, #32]
   15f58:	str	r3, [r8, #48]	; 0x30
   15f5c:	b	158e8 <__assert_fail@plt+0x4618>
   15f60:	mov	r1, r2
   15f64:	movw	r0, #56976	; 0xde90
   15f68:	movt	r0, #1
   15f6c:	bl	1ca2c <__assert_fail@plt+0xb75c>
   15f70:	b	15ed0 <__assert_fail@plt+0x4c00>
   15f74:	bl	11180 <__errno_location@plt>
   15f78:	ldr	r3, [r0]
   15f7c:	mov	r2, #7
   15f80:	str	r3, [r4, #32]
   15f84:	strh	r2, [r4, #56]	; 0x38
   15f88:	str	r4, [r8]
   15f8c:	b	159d8 <__assert_fail@plt+0x4708>
   15f90:	mov	r1, r2
   15f94:	movw	r0, #56976	; 0xde90
   15f98:	movt	r0, #1
   15f9c:	bl	1ca2c <__assert_fail@plt+0xb75c>
   15fa0:	b	15f24 <__assert_fail@plt+0x4c54>
   15fa4:	bl	11180 <__errno_location@plt>
   15fa8:	ldr	r3, [r0]
   15fac:	mov	r2, #7
   15fb0:	str	r3, [r5, #32]
   15fb4:	strh	r2, [r5, #56]	; 0x38
   15fb8:	b	15e10 <__assert_fail@plt+0x4b40>
   15fbc:	cmp	r2, #4
   15fc0:	bhi	15fd4 <__assert_fail@plt+0x4d04>
   15fc4:	mov	r3, #0
   15fc8:	strh	r2, [r1, #60]	; 0x3c
   15fcc:	mov	r0, r3
   15fd0:	bx	lr
   15fd4:	str	r4, [sp, #-8]!
   15fd8:	str	lr, [sp, #4]
   15fdc:	bl	11180 <__errno_location@plt>
   15fe0:	mov	r2, #22
   15fe4:	mov	r3, #1
   15fe8:	ldr	r4, [sp]
   15fec:	add	sp, sp, #4
   15ff0:	str	r2, [r0]
   15ff4:	mov	r0, r3
   15ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ffc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16000:	mov	r5, r0
   16004:	strd	r6, [sp, #8]
   16008:	strd	r8, [sp, #16]
   1600c:	mov	r8, r1
   16010:	str	sl, [sp, #24]
   16014:	str	lr, [sp, #28]
   16018:	bl	11180 <__errno_location@plt>
   1601c:	bics	r2, r8, #4096	; 0x1000
   16020:	mov	r6, r0
   16024:	movne	r3, #22
   16028:	movne	r0, #0
   1602c:	strne	r3, [r6]
   16030:	bne	160f8 <__assert_fail@plt+0x4e28>
   16034:	ldr	r9, [r5]
   16038:	str	r2, [r6]
   1603c:	ldr	r3, [r5, #48]	; 0x30
   16040:	ands	r0, r3, #8192	; 0x2000
   16044:	bne	161a8 <__assert_fail@plt+0x4ed8>
   16048:	ldrh	r3, [r9, #56]	; 0x38
   1604c:	cmp	r3, #9
   16050:	beq	161b0 <__assert_fail@plt+0x4ee0>
   16054:	cmp	r3, #1
   16058:	bne	160f8 <__assert_fail@plt+0x4e28>
   1605c:	ldr	r4, [r5, #4]
   16060:	cmp	r4, #0
   16064:	bne	16084 <__assert_fail@plt+0x4db4>
   16068:	b	160a4 <__assert_fail@plt+0x4dd4>
   1606c:	bl	112c4 <closedir@plt>
   16070:	mov	r0, r4
   16074:	bl	13a30 <__assert_fail@plt+0x2760>
   16078:	cmp	r7, #0
   1607c:	beq	160a4 <__assert_fail@plt+0x4dd4>
   16080:	mov	r4, r7
   16084:	ldr	r7, [r4, #8]
   16088:	ldr	r0, [r4, #12]
   1608c:	cmp	r0, #0
   16090:	bne	1606c <__assert_fail@plt+0x4d9c>
   16094:	mov	r0, r4
   16098:	bl	13a30 <__assert_fail@plt+0x2760>
   1609c:	cmp	r7, #0
   160a0:	bne	16080 <__assert_fail@plt+0x4db0>
   160a4:	cmp	r8, #4096	; 0x1000
   160a8:	movne	r4, #1
   160ac:	bne	160c0 <__assert_fail@plt+0x4df0>
   160b0:	ldr	r3, [r5, #48]	; 0x30
   160b4:	mov	r4, #2
   160b8:	orr	r3, r3, #4096	; 0x1000
   160bc:	str	r3, [r5, #48]	; 0x30
   160c0:	ldr	r3, [r9, #48]	; 0x30
   160c4:	cmp	r3, #0
   160c8:	bne	160e8 <__assert_fail@plt+0x4e18>
   160cc:	ldr	r3, [r9, #24]
   160d0:	ldrb	r3, [r3]
   160d4:	cmp	r3, #47	; 0x2f
   160d8:	beq	160e8 <__assert_fail@plt+0x4e18>
   160dc:	ldr	r3, [r5, #48]	; 0x30
   160e0:	tst	r3, #4
   160e4:	beq	16110 <__assert_fail@plt+0x4e40>
   160e8:	mov	r1, r4
   160ec:	mov	r0, r5
   160f0:	bl	144bc <__assert_fail@plt+0x31ec>
   160f4:	str	r0, [r5, #4]
   160f8:	ldrd	r4, [sp]
   160fc:	ldrd	r6, [sp, #8]
   16100:	ldrd	r8, [sp, #16]
   16104:	ldr	sl, [sp, #24]
   16108:	add	sp, sp, #28
   1610c:	pop	{pc}		; (ldr pc, [sp], #4)
   16110:	lsl	r2, r3, #11
   16114:	tst	r3, #512	; 0x200
   16118:	and	r2, r2, #32768	; 0x8000
   1611c:	orr	r2, r2, #540672	; 0x84000
   16120:	orr	r2, r2, #2304	; 0x900
   16124:	beq	161b8 <__assert_fail@plt+0x4ee8>
   16128:	movw	r1, #56976	; 0xde90
   1612c:	movt	r1, #1
   16130:	ldr	r0, [r5, #32]
   16134:	bl	179e4 <__assert_fail@plt+0x6714>
   16138:	mov	r7, r0
   1613c:	cmp	r7, #0
   16140:	movlt	r3, #0
   16144:	movlt	r0, r3
   16148:	strlt	r3, [r5, #4]
   1614c:	blt	160f8 <__assert_fail@plt+0x4e28>
   16150:	mov	r1, r4
   16154:	mov	r0, r5
   16158:	bl	144bc <__assert_fail@plt+0x31ec>
   1615c:	ldr	r3, [r5, #48]	; 0x30
   16160:	str	r0, [r5, #4]
   16164:	ands	r4, r3, #512	; 0x200
   16168:	beq	161d0 <__assert_fail@plt+0x4f00>
   1616c:	ldr	r1, [r5, #32]
   16170:	sub	r3, r7, r1
   16174:	cmn	r1, #100	; 0x64
   16178:	clz	r3, r3
   1617c:	lsr	r3, r3, #5
   16180:	moveq	r3, #0
   16184:	cmp	r3, #0
   16188:	bne	16208 <__assert_fail@plt+0x4f38>
   1618c:	add	r0, r5, #60	; 0x3c
   16190:	bl	1794c <__assert_fail@plt+0x667c>
   16194:	cmp	r0, #0
   16198:	blt	161a0 <__assert_fail@plt+0x4ed0>
   1619c:	bl	112a0 <close@plt>
   161a0:	str	r7, [r5, #32]
   161a4:	b	161e8 <__assert_fail@plt+0x4f18>
   161a8:	mov	r0, r2
   161ac:	b	160f8 <__assert_fail@plt+0x4e28>
   161b0:	ldr	r0, [r9, #8]
   161b4:	b	160f8 <__assert_fail@plt+0x4e28>
   161b8:	mov	r1, r2
   161bc:	movw	r0, #56976	; 0xde90
   161c0:	movt	r0, #1
   161c4:	bl	1ca2c <__assert_fail@plt+0xb75c>
   161c8:	mov	r7, r0
   161cc:	b	1613c <__assert_fail@plt+0x4e6c>
   161d0:	mov	r0, r7
   161d4:	bl	1124c <fchdir@plt>
   161d8:	cmp	r0, #0
   161dc:	bne	161f0 <__assert_fail@plt+0x4f20>
   161e0:	mov	r0, r7
   161e4:	bl	112a0 <close@plt>
   161e8:	ldr	r0, [r5, #4]
   161ec:	b	160f8 <__assert_fail@plt+0x4e28>
   161f0:	ldr	r5, [r6]
   161f4:	mov	r0, r7
   161f8:	bl	112a0 <close@plt>
   161fc:	mov	r0, r4
   16200:	str	r5, [r6]
   16204:	b	160f8 <__assert_fail@plt+0x4e28>
   16208:	bl	11294 <abort@plt>
   1620c:	andeq	r0, r0, r0
   16210:	ror	r0, r0, #3
   16214:	udiv	r3, r0, r1
   16218:	mls	r0, r3, r1, r0
   1621c:	bx	lr
   16220:	sub	r0, r1, r0
   16224:	clz	r0, r0
   16228:	lsr	r0, r0, #5
   1622c:	bx	lr
   16230:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16234:	mov	r5, r1
   16238:	strd	r6, [sp, #8]
   1623c:	mov	r6, r0
   16240:	mov	r7, r3
   16244:	mov	r0, r1
   16248:	strd	r8, [sp, #16]
   1624c:	strd	sl, [sp, #24]
   16250:	mov	fp, r2
   16254:	str	lr, [sp, #32]
   16258:	sub	sp, sp, #4
   1625c:	ldr	r1, [r6, #8]
   16260:	ldr	r3, [r6, #24]
   16264:	blx	r3
   16268:	ldr	r3, [r6, #8]
   1626c:	cmp	r0, r3
   16270:	bcs	1638c <__assert_fail@plt+0x50bc>
   16274:	ldr	r8, [r6]
   16278:	lsl	r9, r0, #3
   1627c:	mov	sl, r0
   16280:	add	r4, r8, r9
   16284:	str	r4, [fp]
   16288:	ldr	r1, [r8, r0, lsl #3]
   1628c:	cmp	r1, #0
   16290:	beq	16384 <__assert_fail@plt+0x50b4>
   16294:	cmp	r1, r5
   16298:	beq	1634c <__assert_fail@plt+0x507c>
   1629c:	mov	r0, r5
   162a0:	ldr	r3, [r6, #28]
   162a4:	blx	r3
   162a8:	cmp	r0, #0
   162ac:	bne	16348 <__assert_fail@plt+0x5078>
   162b0:	ldr	r3, [r4, #4]
   162b4:	cmp	r3, #0
   162b8:	beq	16384 <__assert_fail@plt+0x50b4>
   162bc:	ldr	r1, [r3]
   162c0:	cmp	r5, r1
   162c4:	bne	162e8 <__assert_fail@plt+0x5018>
   162c8:	b	16304 <__assert_fail@plt+0x5034>
   162cc:	ldr	r4, [r4, #4]
   162d0:	ldr	r3, [r4, #4]
   162d4:	cmp	r3, #0
   162d8:	beq	16384 <__assert_fail@plt+0x50b4>
   162dc:	ldr	r1, [r3]
   162e0:	cmp	r1, r5
   162e4:	beq	16304 <__assert_fail@plt+0x5034>
   162e8:	mov	r0, r5
   162ec:	ldr	r3, [r6, #28]
   162f0:	blx	r3
   162f4:	cmp	r0, #0
   162f8:	beq	162cc <__assert_fail@plt+0x4ffc>
   162fc:	ldr	r3, [r4, #4]
   16300:	ldr	r1, [r3]
   16304:	cmp	r7, #0
   16308:	beq	16328 <__assert_fail@plt+0x5058>
   1630c:	ldr	r0, [r3, #4]
   16310:	mov	r2, #0
   16314:	str	r0, [r4, #4]
   16318:	str	r2, [r3]
   1631c:	ldr	r2, [r6, #36]	; 0x24
   16320:	str	r2, [r3, #4]
   16324:	str	r3, [r6, #36]	; 0x24
   16328:	mov	r0, r1
   1632c:	add	sp, sp, #4
   16330:	ldrd	r4, [sp]
   16334:	ldrd	r6, [sp, #8]
   16338:	ldrd	r8, [sp, #16]
   1633c:	ldrd	sl, [sp, #24]
   16340:	add	sp, sp, #32
   16344:	pop	{pc}		; (ldr pc, [sp], #4)
   16348:	ldr	r1, [r8, sl, lsl #3]
   1634c:	cmp	r7, #0
   16350:	beq	16328 <__assert_fail@plt+0x5058>
   16354:	ldr	r0, [r4, #4]
   16358:	cmp	r0, #0
   1635c:	streq	r0, [r8, sl, lsl #3]
   16360:	beq	16328 <__assert_fail@plt+0x5058>
   16364:	ldrd	r2, [r0]
   16368:	mov	ip, #0
   1636c:	strd	r2, [r8, r9]
   16370:	str	ip, [r0]
   16374:	ldr	r3, [r6, #36]	; 0x24
   16378:	str	r3, [r0, #4]
   1637c:	str	r0, [r6, #36]	; 0x24
   16380:	b	16328 <__assert_fail@plt+0x5058>
   16384:	mov	r1, #0
   16388:	b	16328 <__assert_fail@plt+0x5058>
   1638c:	bl	11294 <abort@plt>
   16390:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16394:	ldr	r3, [r1, #4]
   16398:	strd	r6, [sp, #8]
   1639c:	ldr	r6, [r1]
   163a0:	strd	r8, [sp, #16]
   163a4:	str	sl, [sp, #24]
   163a8:	str	lr, [sp, #28]
   163ac:	cmp	r6, r3
   163b0:	bcs	16490 <__assert_fail@plt+0x51c0>
   163b4:	mov	r8, r2
   163b8:	mov	r5, r0
   163bc:	mov	r7, r1
   163c0:	add	r6, r6, #8
   163c4:	mov	r9, #0
   163c8:	b	163d8 <__assert_fail@plt+0x5108>
   163cc:	cmp	r3, r6
   163d0:	add	r6, r6, #8
   163d4:	bls	16490 <__assert_fail@plt+0x51c0>
   163d8:	ldr	sl, [r6, #-8]
   163dc:	cmp	sl, #0
   163e0:	beq	163cc <__assert_fail@plt+0x50fc>
   163e4:	ldr	r4, [r6, #-4]
   163e8:	cmp	r4, #0
   163ec:	beq	16474 <__assert_fail@plt+0x51a4>
   163f0:	ldr	r1, [r5, #8]
   163f4:	b	16410 <__assert_fail@plt+0x5140>
   163f8:	ldr	r3, [ip, #4]
   163fc:	cmp	r2, #0
   16400:	str	r3, [r4, #4]
   16404:	str	r4, [ip, #4]
   16408:	mov	r4, r2
   1640c:	beq	16470 <__assert_fail@plt+0x51a0>
   16410:	ldr	sl, [r4]
   16414:	ldr	r3, [r5, #24]
   16418:	mov	r0, sl
   1641c:	blx	r3
   16420:	ldr	r1, [r5, #8]
   16424:	cmp	r0, r1
   16428:	bcs	16544 <__assert_fail@plt+0x5274>
   1642c:	ldr	r3, [r5]
   16430:	ldr	r2, [r4, #4]
   16434:	ldr	lr, [r3, r0, lsl #3]
   16438:	add	ip, r3, r0, lsl #3
   1643c:	cmp	lr, #0
   16440:	bne	163f8 <__assert_fail@plt+0x5128>
   16444:	ldr	ip, [r5, #12]
   16448:	cmp	r2, #0
   1644c:	str	sl, [r3, r0, lsl #3]
   16450:	add	ip, ip, #1
   16454:	str	ip, [r5, #12]
   16458:	str	lr, [r4]
   1645c:	ldr	r3, [r5, #36]	; 0x24
   16460:	str	r3, [r4, #4]
   16464:	str	r4, [r5, #36]	; 0x24
   16468:	mov	r4, r2
   1646c:	bne	16410 <__assert_fail@plt+0x5140>
   16470:	ldr	sl, [r6, #-8]
   16474:	cmp	r8, #0
   16478:	str	r9, [r6, #-4]
   1647c:	beq	164ac <__assert_fail@plt+0x51dc>
   16480:	ldr	r3, [r7, #4]
   16484:	cmp	r3, r6
   16488:	add	r6, r6, #8
   1648c:	bhi	163d8 <__assert_fail@plt+0x5108>
   16490:	mov	r0, #1
   16494:	ldrd	r4, [sp]
   16498:	ldrd	r6, [sp, #8]
   1649c:	ldrd	r8, [sp, #16]
   164a0:	ldr	sl, [sp, #24]
   164a4:	add	sp, sp, #28
   164a8:	pop	{pc}		; (ldr pc, [sp], #4)
   164ac:	mov	r0, sl
   164b0:	ldr	r1, [r5, #8]
   164b4:	ldr	r3, [r5, #24]
   164b8:	blx	r3
   164bc:	ldr	r3, [r5, #8]
   164c0:	cmp	r0, r3
   164c4:	bcs	16544 <__assert_fail@plt+0x5274>
   164c8:	ldr	r3, [r5]
   164cc:	ldr	r2, [r3, r0, lsl #3]
   164d0:	add	r4, r3, r0, lsl #3
   164d4:	cmp	r2, #0
   164d8:	beq	16518 <__assert_fail@plt+0x5248>
   164dc:	ldr	r0, [r5, #36]	; 0x24
   164e0:	cmp	r0, #0
   164e4:	beq	1652c <__assert_fail@plt+0x525c>
   164e8:	ldr	r3, [r0, #4]
   164ec:	str	r3, [r5, #36]	; 0x24
   164f0:	ldr	r3, [r4, #4]
   164f4:	str	sl, [r0]
   164f8:	str	r3, [r0, #4]
   164fc:	str	r0, [r4, #4]
   16500:	ldr	r2, [r7, #12]
   16504:	str	r9, [r6, #-8]
   16508:	ldr	r3, [r7, #4]
   1650c:	sub	r2, r2, #1
   16510:	str	r2, [r7, #12]
   16514:	b	163cc <__assert_fail@plt+0x50fc>
   16518:	ldr	r2, [r5, #12]
   1651c:	str	sl, [r3, r0, lsl #3]
   16520:	add	r2, r2, #1
   16524:	str	r2, [r5, #12]
   16528:	b	16500 <__assert_fail@plt+0x5230>
   1652c:	mov	r0, #8
   16530:	bl	1c554 <__assert_fail@plt+0xb284>
   16534:	cmp	r0, #0
   16538:	bne	164f0 <__assert_fail@plt+0x5220>
   1653c:	mov	r0, r8
   16540:	b	16494 <__assert_fail@plt+0x51c4>
   16544:	bl	11294 <abort@plt>
   16548:	ldr	r0, [r0, #8]
   1654c:	bx	lr
   16550:	ldr	r0, [r0, #12]
   16554:	bx	lr
   16558:	ldr	r0, [r0, #16]
   1655c:	bx	lr
   16560:	ldm	r0, {r1, r3}
   16564:	cmp	r1, r3
   16568:	bcs	165dc <__assert_fail@plt+0x530c>
   1656c:	sub	ip, r3, #1
   16570:	add	r3, r1, #16
   16574:	sub	ip, ip, r1
   16578:	mov	r0, #0
   1657c:	bic	ip, ip, #7
   16580:	add	r1, r1, #8
   16584:	add	ip, ip, r3
   16588:	b	16598 <__assert_fail@plt+0x52c8>
   1658c:	add	r1, r1, #8
   16590:	cmp	r1, ip
   16594:	beq	165d8 <__assert_fail@plt+0x5308>
   16598:	ldr	r3, [r1, #-8]
   1659c:	cmp	r3, #0
   165a0:	beq	1658c <__assert_fail@plt+0x52bc>
   165a4:	ldr	r3, [r1, #-4]
   165a8:	mov	r2, #1
   165ac:	cmp	r3, #0
   165b0:	beq	165c4 <__assert_fail@plt+0x52f4>
   165b4:	ldr	r3, [r3, #4]
   165b8:	add	r2, r2, #1
   165bc:	cmp	r3, #0
   165c0:	bne	165b4 <__assert_fail@plt+0x52e4>
   165c4:	cmp	r0, r2
   165c8:	add	r1, r1, #8
   165cc:	movcc	r0, r2
   165d0:	cmp	r1, ip
   165d4:	bne	16598 <__assert_fail@plt+0x52c8>
   165d8:	bx	lr
   165dc:	mov	r0, #0
   165e0:	bx	lr
   165e4:	ldm	r0, {r1, r3}
   165e8:	push	{lr}		; (str lr, [sp, #-4]!)
   165ec:	cmp	r1, r3
   165f0:	bcs	16684 <__assert_fail@plt+0x53b4>
   165f4:	sub	ip, r3, #1
   165f8:	mov	r2, #0
   165fc:	sub	ip, ip, r1
   16600:	add	r3, r1, #16
   16604:	bic	ip, ip, #7
   16608:	add	r1, r1, #8
   1660c:	add	ip, ip, r3
   16610:	mov	lr, r2
   16614:	b	16624 <__assert_fail@plt+0x5354>
   16618:	add	r1, r1, #8
   1661c:	cmp	r1, ip
   16620:	beq	16660 <__assert_fail@plt+0x5390>
   16624:	ldr	r3, [r1, #-8]
   16628:	cmp	r3, #0
   1662c:	beq	16618 <__assert_fail@plt+0x5348>
   16630:	ldr	r3, [r1, #-4]
   16634:	add	lr, lr, #1
   16638:	add	r2, r2, #1
   1663c:	cmp	r3, #0
   16640:	beq	16618 <__assert_fail@plt+0x5348>
   16644:	ldr	r3, [r3, #4]
   16648:	add	r2, r2, #1
   1664c:	cmp	r3, #0
   16650:	bne	16644 <__assert_fail@plt+0x5374>
   16654:	add	r1, r1, #8
   16658:	cmp	r1, ip
   1665c:	bne	16624 <__assert_fail@plt+0x5354>
   16660:	ldr	r3, [r0, #12]
   16664:	cmp	r3, lr
   16668:	movne	r0, #0
   1666c:	bne	16680 <__assert_fail@plt+0x53b0>
   16670:	ldr	r0, [r0, #16]
   16674:	sub	r0, r0, r2
   16678:	clz	r0, r0
   1667c:	lsr	r0, r0, #5
   16680:	pop	{pc}		; (ldr pc, [sp], #4)
   16684:	mov	r2, #0
   16688:	mov	lr, r2
   1668c:	b	16660 <__assert_fail@plt+0x5390>
   16690:	strd	r4, [sp, #-20]!	; 0xffffffec
   16694:	mov	r4, r1
   16698:	ldr	r2, [r0]
   1669c:	ldr	r1, [r0, #4]
   166a0:	ldr	r3, [r0, #16]
   166a4:	strd	r6, [sp, #8]
   166a8:	str	lr, [sp, #16]
   166ac:	sub	sp, sp, #12
   166b0:	cmp	r2, r1
   166b4:	ldrd	r6, [r0, #8]
   166b8:	bcs	167b8 <__assert_fail@plt+0x54e8>
   166bc:	sub	ip, r1, #1
   166c0:	add	r1, r2, #16
   166c4:	sub	ip, ip, r2
   166c8:	add	r0, r2, #8
   166cc:	bic	ip, ip, #7
   166d0:	mov	r5, #0
   166d4:	add	ip, ip, r1
   166d8:	b	166e8 <__assert_fail@plt+0x5418>
   166dc:	add	r0, r0, #8
   166e0:	cmp	r0, ip
   166e4:	beq	16728 <__assert_fail@plt+0x5458>
   166e8:	ldr	r2, [r0, #-8]
   166ec:	cmp	r2, #0
   166f0:	beq	166dc <__assert_fail@plt+0x540c>
   166f4:	ldr	r2, [r0, #-4]
   166f8:	mov	r1, #1
   166fc:	cmp	r2, #0
   16700:	beq	16714 <__assert_fail@plt+0x5444>
   16704:	ldr	r2, [r2, #4]
   16708:	add	r1, r1, #1
   1670c:	cmp	r2, #0
   16710:	bne	16704 <__assert_fail@plt+0x5434>
   16714:	cmp	r5, r1
   16718:	add	r0, r0, #8
   1671c:	movcc	r5, r1
   16720:	cmp	r0, ip
   16724:	bne	166e8 <__assert_fail@plt+0x5418>
   16728:	mov	r1, #1
   1672c:	mov	r0, r4
   16730:	movw	r2, #57340	; 0xdffc
   16734:	movt	r2, #1
   16738:	bl	111bc <__fprintf_chk@plt>
   1673c:	mov	r3, r6
   16740:	mov	r1, #1
   16744:	mov	r0, r4
   16748:	movw	r2, #57364	; 0xe014
   1674c:	movt	r2, #1
   16750:	bl	111bc <__fprintf_chk@plt>
   16754:	vmov	s15, r7
   16758:	mov	r3, r7
   1675c:	mov	r1, #1
   16760:	vldr	d5, [pc, #88]	; 167c0 <__assert_fail@plt+0x54f0>
   16764:	mov	r0, r4
   16768:	movw	r2, #57388	; 0xe02c
   1676c:	movt	r2, #1
   16770:	vcvt.f64.u32	d6, s15
   16774:	vmov	s15, r6
   16778:	vmul.f64	d6, d6, d5
   1677c:	vcvt.f64.u32	d7, s15
   16780:	vdiv.f64	d5, d6, d7
   16784:	vstr	d5, [sp]
   16788:	bl	111bc <__fprintf_chk@plt>
   1678c:	mov	r3, r5
   16790:	mov	r0, r4
   16794:	movw	r2, #57424	; 0xe050
   16798:	movt	r2, #1
   1679c:	mov	r1, #1
   167a0:	add	sp, sp, #12
   167a4:	ldrd	r4, [sp]
   167a8:	ldrd	r6, [sp, #8]
   167ac:	ldr	lr, [sp, #16]
   167b0:	add	sp, sp, #20
   167b4:	b	111bc <__fprintf_chk@plt>
   167b8:	mov	r5, #0
   167bc:	b	16728 <__assert_fail@plt+0x5458>
   167c0:	andeq	r0, r0, r0
   167c4:	subsmi	r0, r9, r0
   167c8:	strd	r4, [sp, #-16]!
   167cc:	mov	r5, r1
   167d0:	str	r6, [sp, #8]
   167d4:	mov	r6, r0
   167d8:	mov	r0, r1
   167dc:	str	lr, [sp, #12]
   167e0:	ldr	r1, [r6, #8]
   167e4:	ldr	r3, [r6, #24]
   167e8:	blx	r3
   167ec:	ldr	r3, [r6, #8]
   167f0:	cmp	r0, r3
   167f4:	bcs	16864 <__assert_fail@plt+0x5594>
   167f8:	ldr	r4, [r6]
   167fc:	ldr	r1, [r4, r0, lsl #3]
   16800:	add	r4, r4, r0, lsl #3
   16804:	cmp	r1, #0
   16808:	beq	16844 <__assert_fail@plt+0x5574>
   1680c:	cmp	r1, r5
   16810:	bne	16824 <__assert_fail@plt+0x5554>
   16814:	b	16848 <__assert_fail@plt+0x5578>
   16818:	ldr	r1, [r4]
   1681c:	cmp	r5, r1
   16820:	beq	16848 <__assert_fail@plt+0x5578>
   16824:	mov	r0, r5
   16828:	ldr	r3, [r6, #28]
   1682c:	blx	r3
   16830:	cmp	r0, #0
   16834:	bne	1685c <__assert_fail@plt+0x558c>
   16838:	ldr	r4, [r4, #4]
   1683c:	cmp	r4, #0
   16840:	bne	16818 <__assert_fail@plt+0x5548>
   16844:	mov	r1, #0
   16848:	ldrd	r4, [sp]
   1684c:	mov	r0, r1
   16850:	ldr	r6, [sp, #8]
   16854:	add	sp, sp, #12
   16858:	pop	{pc}		; (ldr pc, [sp], #4)
   1685c:	ldr	r1, [r4]
   16860:	b	16848 <__assert_fail@plt+0x5578>
   16864:	bl	11294 <abort@plt>
   16868:	ldr	r3, [r0, #16]
   1686c:	cmp	r3, #0
   16870:	beq	168c4 <__assert_fail@plt+0x55f4>
   16874:	ldr	r3, [r0]
   16878:	ldr	r2, [r0, #4]
   1687c:	cmp	r3, r2
   16880:	bcs	168b8 <__assert_fail@plt+0x55e8>
   16884:	ldr	r0, [r3]
   16888:	cmp	r0, #0
   1688c:	bxne	lr
   16890:	sub	r2, r2, #1
   16894:	sub	r2, r2, r3
   16898:	bic	r2, r2, #7
   1689c:	add	r2, r3, r2
   168a0:	b	168b0 <__assert_fail@plt+0x55e0>
   168a4:	ldr	r0, [r3, #8]!
   168a8:	cmp	r0, #0
   168ac:	bxne	lr
   168b0:	cmp	r3, r2
   168b4:	bne	168a4 <__assert_fail@plt+0x55d4>
   168b8:	str	r4, [sp, #-8]!
   168bc:	str	lr, [sp, #4]
   168c0:	bl	11294 <abort@plt>
   168c4:	mov	r0, r3
   168c8:	bx	lr
   168cc:	strd	r4, [sp, #-16]!
   168d0:	mov	r5, r0
   168d4:	mov	r4, r1
   168d8:	mov	r0, r1
   168dc:	ldr	r1, [r5, #8]
   168e0:	ldr	r3, [r5, #24]
   168e4:	str	r6, [sp, #8]
   168e8:	str	lr, [sp, #12]
   168ec:	blx	r3
   168f0:	ldr	r3, [r5, #8]
   168f4:	cmp	r0, r3
   168f8:	bcs	16960 <__assert_fail@plt+0x5690>
   168fc:	ldr	r2, [r5]
   16900:	add	r2, r2, r0, lsl #3
   16904:	mov	r3, r2
   16908:	b	16914 <__assert_fail@plt+0x5644>
   1690c:	cmp	r3, #0
   16910:	beq	1692c <__assert_fail@plt+0x565c>
   16914:	ldm	r3, {r1, r3}
   16918:	cmp	r1, r4
   1691c:	bne	1690c <__assert_fail@plt+0x563c>
   16920:	cmp	r3, #0
   16924:	ldrne	r0, [r3]
   16928:	bne	16950 <__assert_fail@plt+0x5680>
   1692c:	ldr	r3, [r5, #4]
   16930:	b	16940 <__assert_fail@plt+0x5670>
   16934:	ldr	r0, [r2]
   16938:	cmp	r0, #0
   1693c:	bne	16950 <__assert_fail@plt+0x5680>
   16940:	add	r2, r2, #8
   16944:	cmp	r3, r2
   16948:	bhi	16934 <__assert_fail@plt+0x5664>
   1694c:	mov	r0, #0
   16950:	ldrd	r4, [sp]
   16954:	ldr	r6, [sp, #8]
   16958:	add	sp, sp, #12
   1695c:	pop	{pc}		; (ldr pc, [sp], #4)
   16960:	bl	11294 <abort@plt>
   16964:	strd	r4, [sp, #-16]!
   16968:	mov	r3, #0
   1696c:	ldr	r5, [r0]
   16970:	str	r6, [sp, #8]
   16974:	str	lr, [sp, #12]
   16978:	ldr	lr, [r0, #4]
   1697c:	cmp	lr, r5
   16980:	bls	1699c <__assert_fail@plt+0x56cc>
   16984:	ldr	ip, [r5]
   16988:	cmp	ip, #0
   1698c:	bne	169b0 <__assert_fail@plt+0x56e0>
   16990:	add	r5, r5, #8
   16994:	cmp	r5, lr
   16998:	bcc	16984 <__assert_fail@plt+0x56b4>
   1699c:	ldrd	r4, [sp]
   169a0:	mov	r0, r3
   169a4:	ldr	r6, [sp, #8]
   169a8:	add	sp, sp, #12
   169ac:	pop	{pc}		; (ldr pc, [sp], #4)
   169b0:	cmp	r2, r3
   169b4:	bls	1699c <__assert_fail@plt+0x56cc>
   169b8:	str	ip, [r1, r3, lsl #2]
   169bc:	add	r4, r3, #1
   169c0:	lsl	lr, r3, #2
   169c4:	ldr	ip, [r5, #4]
   169c8:	cmp	ip, #0
   169cc:	beq	16a2c <__assert_fail@plt+0x575c>
   169d0:	cmp	r2, r4
   169d4:	bls	16a20 <__assert_fail@plt+0x5750>
   169d8:	ldr	r6, [ip]
   169dc:	add	r3, r3, #2
   169e0:	str	r6, [r1, r4, lsl #2]
   169e4:	ldr	ip, [ip, #4]
   169e8:	cmp	ip, #0
   169ec:	beq	16a18 <__assert_fail@plt+0x5748>
   169f0:	add	lr, lr, #4
   169f4:	add	lr, r1, lr
   169f8:	cmp	r2, r3
   169fc:	add	r3, r3, #1
   16a00:	beq	16a24 <__assert_fail@plt+0x5754>
   16a04:	ldr	r4, [ip]
   16a08:	str	r4, [lr, #4]!
   16a0c:	ldr	ip, [ip, #4]
   16a10:	cmp	ip, #0
   16a14:	bne	169f8 <__assert_fail@plt+0x5728>
   16a18:	ldr	lr, [r0, #4]
   16a1c:	b	16990 <__assert_fail@plt+0x56c0>
   16a20:	mov	r2, r4
   16a24:	mov	r3, r2
   16a28:	b	1699c <__assert_fail@plt+0x56cc>
   16a2c:	mov	r3, r4
   16a30:	ldr	lr, [r0, #4]
   16a34:	b	16990 <__assert_fail@plt+0x56c0>
   16a38:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16a3c:	ldr	r3, [r0, #4]
   16a40:	strd	r6, [sp, #8]
   16a44:	strd	r8, [sp, #16]
   16a48:	ldr	r8, [r0]
   16a4c:	str	sl, [sp, #24]
   16a50:	str	lr, [sp, #28]
   16a54:	cmp	r3, r8
   16a58:	bls	16ad4 <__assert_fail@plt+0x5804>
   16a5c:	mov	r7, r2
   16a60:	mov	r6, r1
   16a64:	mov	r9, r0
   16a68:	mov	r5, #0
   16a6c:	ldr	r0, [r8]
   16a70:	cmp	r0, #0
   16a74:	bne	16aa0 <__assert_fail@plt+0x57d0>
   16a78:	add	r8, r8, #8
   16a7c:	cmp	r8, r3
   16a80:	bcc	16a6c <__assert_fail@plt+0x579c>
   16a84:	mov	r0, r5
   16a88:	ldrd	r4, [sp]
   16a8c:	ldrd	r6, [sp, #8]
   16a90:	ldrd	r8, [sp, #16]
   16a94:	ldr	sl, [sp, #24]
   16a98:	add	sp, sp, #28
   16a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   16aa0:	mov	r4, r8
   16aa4:	b	16aac <__assert_fail@plt+0x57dc>
   16aa8:	ldr	r0, [r4]
   16aac:	mov	r1, r7
   16ab0:	blx	r6
   16ab4:	cmp	r0, #0
   16ab8:	beq	16a84 <__assert_fail@plt+0x57b4>
   16abc:	ldr	r4, [r4, #4]
   16ac0:	add	r5, r5, #1
   16ac4:	cmp	r4, #0
   16ac8:	bne	16aa8 <__assert_fail@plt+0x57d8>
   16acc:	ldr	r3, [r9, #4]
   16ad0:	b	16a78 <__assert_fail@plt+0x57a8>
   16ad4:	mov	r5, #0
   16ad8:	b	16a84 <__assert_fail@plt+0x57b4>
   16adc:	ldrb	r2, [r0]
   16ae0:	cmp	r2, #0
   16ae4:	beq	16b10 <__assert_fail@plt+0x5840>
   16ae8:	mov	r3, #0
   16aec:	rsb	r3, r3, r3, lsl #5
   16af0:	add	r3, r3, r2
   16af4:	ldrb	r2, [r0, #1]!
   16af8:	udiv	ip, r3, r1
   16afc:	cmp	r2, #0
   16b00:	mls	r3, r1, ip, r3
   16b04:	bne	16aec <__assert_fail@plt+0x581c>
   16b08:	mov	r0, r3
   16b0c:	bx	lr
   16b10:	mov	r3, r2
   16b14:	mov	r0, r3
   16b18:	bx	lr
   16b1c:	movw	r3, #57320	; 0xdfe8
   16b20:	movt	r3, #1
   16b24:	strd	r4, [sp, #-8]!
   16b28:	ldrd	r4, [r3]
   16b2c:	ldr	r1, [r3, #16]
   16b30:	ldrd	r2, [r3, #8]
   16b34:	strd	r4, [r0]
   16b38:	ldrd	r4, [sp]
   16b3c:	add	sp, sp, #8
   16b40:	strd	r2, [r0, #8]
   16b44:	str	r1, [r0, #16]
   16b48:	bx	lr
   16b4c:	cmp	r2, #0
   16b50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16b54:	movw	r4, #25104	; 0x6210
   16b58:	movt	r4, #1
   16b5c:	movne	r4, r2
   16b60:	strd	r6, [sp, #8]
   16b64:	cmp	r3, #0
   16b68:	str	r8, [sp, #16]
   16b6c:	mov	r8, r0
   16b70:	mov	r0, #40	; 0x28
   16b74:	movw	r5, #25120	; 0x6220
   16b78:	movt	r5, #1
   16b7c:	mov	r7, r1
   16b80:	str	lr, [sp, #20]
   16b84:	movne	r5, r3
   16b88:	bl	1c554 <__assert_fail@plt+0xb284>
   16b8c:	subs	r6, r0, #0
   16b90:	beq	16bd4 <__assert_fail@plt+0x5904>
   16b94:	cmp	r7, #0
   16b98:	movw	r3, #57320	; 0xdfe8
   16b9c:	movt	r3, #1
   16ba0:	beq	16c60 <__assert_fail@plt+0x5990>
   16ba4:	cmp	r7, r3
   16ba8:	str	r7, [r6, #20]
   16bac:	beq	16c64 <__assert_fail@plt+0x5994>
   16bb0:	vldr	s14, [pc, #456]	; 16d80 <__assert_fail@plt+0x5ab0>
   16bb4:	vldr	s15, [r7, #8]
   16bb8:	vcmpe.f32	s15, s14
   16bbc:	vmrs	APSR_nzcv, fpscr
   16bc0:	bgt	16bec <__assert_fail@plt+0x591c>
   16bc4:	str	r3, [r6, #20]
   16bc8:	mov	r0, r6
   16bcc:	mov	r6, #0
   16bd0:	bl	13a30 <__assert_fail@plt+0x2760>
   16bd4:	mov	r0, r6
   16bd8:	ldrd	r4, [sp]
   16bdc:	ldrd	r6, [sp, #8]
   16be0:	ldr	r8, [sp, #16]
   16be4:	add	sp, sp, #20
   16be8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bec:	vldr	s13, [pc, #400]	; 16d84 <__assert_fail@plt+0x5ab4>
   16bf0:	vcmpe.f32	s15, s13
   16bf4:	vmrs	APSR_nzcv, fpscr
   16bf8:	bpl	16bc4 <__assert_fail@plt+0x58f4>
   16bfc:	vldr	s13, [pc, #388]	; 16d88 <__assert_fail@plt+0x5ab8>
   16c00:	vldr	s12, [r7, #12]
   16c04:	vcmpe.f32	s12, s13
   16c08:	vmrs	APSR_nzcv, fpscr
   16c0c:	ble	16bc4 <__assert_fail@plt+0x58f4>
   16c10:	vldr	s13, [r7]
   16c14:	vcmpe.f32	s13, #0.0
   16c18:	vmrs	APSR_nzcv, fpscr
   16c1c:	blt	16bc4 <__assert_fail@plt+0x58f4>
   16c20:	vadd.f32	s14, s13, s14
   16c24:	vldr	s13, [r7, #4]
   16c28:	vcmpe.f32	s14, s13
   16c2c:	vmrs	APSR_nzcv, fpscr
   16c30:	bpl	16bc4 <__assert_fail@plt+0x58f4>
   16c34:	vldr	s12, [pc, #336]	; 16d8c <__assert_fail@plt+0x5abc>
   16c38:	vcmpe.f32	s13, s12
   16c3c:	vmrs	APSR_nzcv, fpscr
   16c40:	bhi	16bc4 <__assert_fail@plt+0x58f4>
   16c44:	vcmpe.f32	s15, s14
   16c48:	vmrs	APSR_nzcv, fpscr
   16c4c:	ble	16bc4 <__assert_fail@plt+0x58f4>
   16c50:	ldrb	r3, [r7, #16]
   16c54:	cmp	r3, #0
   16c58:	bne	16c8c <__assert_fail@plt+0x59bc>
   16c5c:	b	16c68 <__assert_fail@plt+0x5998>
   16c60:	str	r3, [r6, #20]
   16c64:	vldr	s15, [pc, #292]	; 16d90 <__assert_fail@plt+0x5ac0>
   16c68:	vmov	s14, r8
   16c6c:	vldr	s13, [pc, #288]	; 16d94 <__assert_fail@plt+0x5ac4>
   16c70:	vcvt.f32.u32	s12, s14
   16c74:	vdiv.f32	s14, s12, s15
   16c78:	vcmpe.f32	s14, s13
   16c7c:	vmrs	APSR_nzcv, fpscr
   16c80:	bge	16d14 <__assert_fail@plt+0x5a44>
   16c84:	vcvt.u32.f32	s15, s14
   16c88:	vmov	r8, s15
   16c8c:	cmp	r8, #10
   16c90:	movcs	r3, r8
   16c94:	movcc	r3, #10
   16c98:	orr	r3, r3, #1
   16c9c:	cmn	r3, #1
   16ca0:	beq	16d14 <__assert_fail@plt+0x5a44>
   16ca4:	movw	lr, #43691	; 0xaaab
   16ca8:	movt	lr, #43690	; 0xaaaa
   16cac:	umull	r1, r2, lr, r3
   16cb0:	cmp	r3, #9
   16cb4:	lsr	r2, r2, #1
   16cb8:	add	r2, r2, r2, lsl #1
   16cbc:	sub	r2, r3, r2
   16cc0:	bls	16d00 <__assert_fail@plt+0x5a30>
   16cc4:	cmp	r2, #0
   16cc8:	beq	16d08 <__assert_fail@plt+0x5a38>
   16ccc:	mov	ip, #16
   16cd0:	mov	r0, #9
   16cd4:	mov	r1, #3
   16cd8:	b	16ce4 <__assert_fail@plt+0x5a14>
   16cdc:	cmp	r2, #0
   16ce0:	beq	16d08 <__assert_fail@plt+0x5a38>
   16ce4:	add	r1, r1, #2
   16ce8:	add	r0, r0, ip
   16cec:	cmp	r0, r3
   16cf0:	add	ip, ip, #8
   16cf4:	udiv	r2, r3, r1
   16cf8:	mls	r2, r1, r2, r3
   16cfc:	bcc	16cdc <__assert_fail@plt+0x5a0c>
   16d00:	cmp	r2, #0
   16d04:	bne	16d20 <__assert_fail@plt+0x5a50>
   16d08:	add	r3, r3, #2
   16d0c:	cmn	r3, #1
   16d10:	bne	16cac <__assert_fail@plt+0x59dc>
   16d14:	mov	r3, #0
   16d18:	str	r3, [r6, #8]
   16d1c:	b	16bc8 <__assert_fail@plt+0x58f8>
   16d20:	lsrs	r2, r3, #30
   16d24:	movne	r7, #1
   16d28:	moveq	r7, #0
   16d2c:	tst	r3, #536870912	; 0x20000000
   16d30:	bne	16d14 <__assert_fail@plt+0x5a44>
   16d34:	cmp	r7, #0
   16d38:	bne	16d14 <__assert_fail@plt+0x5a44>
   16d3c:	mov	r0, r3
   16d40:	mov	r1, #8
   16d44:	str	r3, [r6, #8]
   16d48:	bl	1c4e0 <__assert_fail@plt+0xb210>
   16d4c:	cmp	r0, #0
   16d50:	str	r0, [r6]
   16d54:	beq	16bc8 <__assert_fail@plt+0x58f8>
   16d58:	ldr	r3, [r6, #8]
   16d5c:	str	r7, [r6, #12]
   16d60:	str	r7, [r6, #16]
   16d64:	strd	r4, [r6, #24]
   16d68:	str	r7, [r6, #36]	; 0x24
   16d6c:	add	r0, r0, r3, lsl #3
   16d70:	ldr	r3, [sp, #24]
   16d74:	str	r0, [r6, #4]
   16d78:	str	r3, [r6, #32]
   16d7c:	b	16bd4 <__assert_fail@plt+0x5904>
   16d80:	stclcc	12, cr12, [ip, #820]	; 0x334
   16d84:	svccc	0x00666666
   16d88:	svccc	0x008ccccd
   16d8c:	svccc	0x00800000
   16d90:	svccc	0x004ccccd
   16d94:	svcmi	0x00800000
   16d98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16d9c:	mov	r5, r0
   16da0:	ldr	r2, [r0, #4]
   16da4:	strd	r6, [sp, #8]
   16da8:	ldr	r6, [r0]
   16dac:	str	r8, [sp, #16]
   16db0:	str	lr, [sp, #20]
   16db4:	cmp	r6, r2
   16db8:	addcc	r6, r6, #8
   16dbc:	movcc	r7, #0
   16dc0:	bcc	16dd4 <__assert_fail@plt+0x5b04>
   16dc4:	b	16e48 <__assert_fail@plt+0x5b78>
   16dc8:	cmp	r2, r6
   16dcc:	add	r6, r6, #8
   16dd0:	bls	16e48 <__assert_fail@plt+0x5b78>
   16dd4:	ldr	r3, [r6, #-8]
   16dd8:	cmp	r3, #0
   16ddc:	beq	16dc8 <__assert_fail@plt+0x5af8>
   16de0:	ldr	r4, [r6, #-4]
   16de4:	ldr	r3, [r5, #32]
   16de8:	cmp	r4, #0
   16dec:	beq	16e20 <__assert_fail@plt+0x5b50>
   16df0:	cmp	r3, #0
   16df4:	beq	16e68 <__assert_fail@plt+0x5b98>
   16df8:	ldr	r0, [r4]
   16dfc:	blx	r3
   16e00:	ldr	r1, [r4, #4]
   16e04:	ldr	r3, [r5, #32]
   16e08:	ldr	r2, [r5, #36]	; 0x24
   16e0c:	str	r7, [r4]
   16e10:	str	r2, [r4, #4]
   16e14:	str	r4, [r5, #36]	; 0x24
   16e18:	subs	r4, r1, #0
   16e1c:	bne	16df0 <__assert_fail@plt+0x5b20>
   16e20:	cmp	r3, #0
   16e24:	beq	16e30 <__assert_fail@plt+0x5b60>
   16e28:	ldr	r0, [r6, #-8]
   16e2c:	blx	r3
   16e30:	str	r7, [r6, #-8]
   16e34:	str	r7, [r6, #-4]
   16e38:	ldr	r2, [r5, #4]
   16e3c:	cmp	r2, r6
   16e40:	add	r6, r6, #8
   16e44:	bhi	16dd4 <__assert_fail@plt+0x5b04>
   16e48:	mov	r3, #0
   16e4c:	ldrd	r6, [sp, #8]
   16e50:	ldr	r8, [sp, #16]
   16e54:	str	r3, [r5, #12]
   16e58:	str	r3, [r5, #16]
   16e5c:	ldrd	r4, [sp]
   16e60:	add	sp, sp, #20
   16e64:	pop	{pc}		; (ldr pc, [sp], #4)
   16e68:	ldr	r2, [r5, #36]	; 0x24
   16e6c:	str	r7, [r4]
   16e70:	ldr	r3, [r4, #4]
   16e74:	str	r2, [r4, #4]
   16e78:	mov	r2, r4
   16e7c:	str	r2, [r5, #36]	; 0x24
   16e80:	subs	r4, r3, #0
   16e84:	bne	16e6c <__assert_fail@plt+0x5b9c>
   16e88:	b	16e30 <__assert_fail@plt+0x5b60>
   16e8c:	strd	r4, [sp, #-16]!
   16e90:	ldr	r2, [r0, #32]
   16e94:	ldr	r5, [r0]
   16e98:	ldr	r3, [r0, #4]
   16e9c:	cmp	r2, #0
   16ea0:	str	r6, [sp, #8]
   16ea4:	mov	r6, r0
   16ea8:	str	lr, [sp, #12]
   16eac:	beq	16f14 <__assert_fail@plt+0x5c44>
   16eb0:	ldr	r2, [r0, #16]
   16eb4:	cmp	r2, #0
   16eb8:	beq	16f14 <__assert_fail@plt+0x5c44>
   16ebc:	cmp	r5, r3
   16ec0:	bcc	16ed4 <__assert_fail@plt+0x5c04>
   16ec4:	b	16f48 <__assert_fail@plt+0x5c78>
   16ec8:	add	r5, r5, #8
   16ecc:	cmp	r5, r3
   16ed0:	bcs	16f10 <__assert_fail@plt+0x5c40>
   16ed4:	ldr	r0, [r5]
   16ed8:	cmp	r0, #0
   16edc:	beq	16ec8 <__assert_fail@plt+0x5bf8>
   16ee0:	mov	r4, r5
   16ee4:	b	16eec <__assert_fail@plt+0x5c1c>
   16ee8:	ldr	r0, [r4]
   16eec:	ldr	r3, [r6, #32]
   16ef0:	blx	r3
   16ef4:	ldr	r4, [r4, #4]
   16ef8:	cmp	r4, #0
   16efc:	bne	16ee8 <__assert_fail@plt+0x5c18>
   16f00:	ldr	r3, [r6, #4]
   16f04:	add	r5, r5, #8
   16f08:	cmp	r5, r3
   16f0c:	bcc	16ed4 <__assert_fail@plt+0x5c04>
   16f10:	ldr	r5, [r6]
   16f14:	cmp	r3, r5
   16f18:	bls	16f48 <__assert_fail@plt+0x5c78>
   16f1c:	ldr	r0, [r5, #4]
   16f20:	cmp	r0, #0
   16f24:	beq	16f3c <__assert_fail@plt+0x5c6c>
   16f28:	ldr	r4, [r0, #4]
   16f2c:	bl	13a30 <__assert_fail@plt+0x2760>
   16f30:	subs	r0, r4, #0
   16f34:	bne	16f28 <__assert_fail@plt+0x5c58>
   16f38:	ldr	r3, [r6, #4]
   16f3c:	add	r5, r5, #8
   16f40:	cmp	r5, r3
   16f44:	bcc	16f1c <__assert_fail@plt+0x5c4c>
   16f48:	ldr	r0, [r6, #36]	; 0x24
   16f4c:	cmp	r0, #0
   16f50:	beq	16f64 <__assert_fail@plt+0x5c94>
   16f54:	ldr	r4, [r0, #4]
   16f58:	bl	13a30 <__assert_fail@plt+0x2760>
   16f5c:	subs	r0, r4, #0
   16f60:	bne	16f54 <__assert_fail@plt+0x5c84>
   16f64:	ldr	r0, [r6]
   16f68:	bl	13a30 <__assert_fail@plt+0x2760>
   16f6c:	mov	r0, r6
   16f70:	ldrd	r4, [sp]
   16f74:	ldr	r6, [sp, #8]
   16f78:	ldr	lr, [sp, #12]
   16f7c:	add	sp, sp, #16
   16f80:	b	13a30 <__assert_fail@plt+0x2760>
   16f84:	ldr	r3, [r0, #20]
   16f88:	strd	r4, [sp, #-20]!	; 0xffffffec
   16f8c:	mov	r5, r0
   16f90:	ldrb	r2, [r3, #16]
   16f94:	strd	r6, [sp, #8]
   16f98:	str	lr, [sp, #16]
   16f9c:	sub	sp, sp, #44	; 0x2c
   16fa0:	cmp	r2, #0
   16fa4:	bne	16fd0 <__assert_fail@plt+0x5d00>
   16fa8:	vmov	s15, r1
   16fac:	vldr	s12, [r3, #8]
   16fb0:	vldr	s13, [pc, #444]	; 17174 <__assert_fail@plt+0x5ea4>
   16fb4:	vcvt.f32.u32	s15, s15
   16fb8:	vdiv.f32	s14, s15, s12
   16fbc:	vcmpe.f32	s14, s13
   16fc0:	vmrs	APSR_nzcv, fpscr
   16fc4:	vcvtlt.u32.f32	s15, s14
   16fc8:	vmovlt	r1, s15
   16fcc:	bge	17054 <__assert_fail@plt+0x5d84>
   16fd0:	cmp	r1, #10
   16fd4:	movcc	r1, #10
   16fd8:	orr	r4, r1, #1
   16fdc:	cmn	r4, #1
   16fe0:	beq	17054 <__assert_fail@plt+0x5d84>
   16fe4:	movw	ip, #43691	; 0xaaab
   16fe8:	movt	ip, #43690	; 0xaaaa
   16fec:	umull	r2, r3, ip, r4
   16ff0:	cmp	r4, #9
   16ff4:	lsr	r3, r3, #1
   16ff8:	add	r3, r3, r3, lsl #1
   16ffc:	sub	r3, r4, r3
   17000:	bls	17040 <__assert_fail@plt+0x5d70>
   17004:	cmp	r3, #0
   17008:	beq	17048 <__assert_fail@plt+0x5d78>
   1700c:	mov	r0, #16
   17010:	mov	r1, #9
   17014:	mov	r2, #3
   17018:	b	17028 <__assert_fail@plt+0x5d58>
   1701c:	cmp	r3, #0
   17020:	add	r0, r0, #8
   17024:	beq	17048 <__assert_fail@plt+0x5d78>
   17028:	add	r2, r2, #2
   1702c:	add	r1, r1, r0
   17030:	cmp	r1, r4
   17034:	udiv	r3, r4, r2
   17038:	mls	r3, r2, r3, r4
   1703c:	bcc	1701c <__assert_fail@plt+0x5d4c>
   17040:	cmp	r3, #0
   17044:	bne	17070 <__assert_fail@plt+0x5da0>
   17048:	add	r4, r4, #2
   1704c:	cmn	r4, #1
   17050:	bne	16fec <__assert_fail@plt+0x5d1c>
   17054:	mov	r4, #0
   17058:	mov	r0, r4
   1705c:	add	sp, sp, #44	; 0x2c
   17060:	ldrd	r4, [sp]
   17064:	ldrd	r6, [sp, #8]
   17068:	add	sp, sp, #16
   1706c:	pop	{pc}		; (ldr pc, [sp], #4)
   17070:	lsrs	r3, r4, #30
   17074:	movne	r6, #1
   17078:	moveq	r6, #0
   1707c:	tst	r4, #536870912	; 0x20000000
   17080:	bne	17054 <__assert_fail@plt+0x5d84>
   17084:	cmp	r6, #0
   17088:	bne	17054 <__assert_fail@plt+0x5d84>
   1708c:	ldr	r3, [r5, #8]
   17090:	cmp	r3, r4
   17094:	beq	1713c <__assert_fail@plt+0x5e6c>
   17098:	mov	r1, #8
   1709c:	mov	r0, r4
   170a0:	bl	1c4e0 <__assert_fail@plt+0xb210>
   170a4:	cmp	r0, #0
   170a8:	str	r0, [sp]
   170ac:	beq	17054 <__assert_fail@plt+0x5d84>
   170b0:	add	r3, r0, r4, lsl #3
   170b4:	ldr	r7, [r5, #20]
   170b8:	mov	r2, r6
   170bc:	mov	r0, sp
   170c0:	mov	r1, r5
   170c4:	ldr	lr, [r5, #28]
   170c8:	stmib	sp, {r3, r4, r6}
   170cc:	ldr	r4, [r5, #24]
   170d0:	strd	r6, [sp, #16]
   170d4:	ldr	ip, [r5, #32]
   170d8:	ldr	r3, [r5, #36]	; 0x24
   170dc:	str	r4, [sp, #24]
   170e0:	str	lr, [sp, #28]
   170e4:	str	ip, [sp, #32]
   170e8:	str	r3, [sp, #36]	; 0x24
   170ec:	bl	16390 <__assert_fail@plt+0x50c0>
   170f0:	subs	r4, r0, #0
   170f4:	bne	17144 <__assert_fail@plt+0x5e74>
   170f8:	ldr	r3, [sp, #36]	; 0x24
   170fc:	mov	r2, #1
   17100:	mov	r1, sp
   17104:	mov	r0, r5
   17108:	str	r3, [r5, #36]	; 0x24
   1710c:	bl	16390 <__assert_fail@plt+0x50c0>
   17110:	cmp	r0, #0
   17114:	beq	17170 <__assert_fail@plt+0x5ea0>
   17118:	mov	r1, sp
   1711c:	mov	r0, r5
   17120:	mov	r2, r4
   17124:	bl	16390 <__assert_fail@plt+0x50c0>
   17128:	cmp	r0, #0
   1712c:	beq	17170 <__assert_fail@plt+0x5ea0>
   17130:	ldr	r0, [sp]
   17134:	bl	13a30 <__assert_fail@plt+0x2760>
   17138:	b	17058 <__assert_fail@plt+0x5d88>
   1713c:	mov	r4, #1
   17140:	b	17058 <__assert_fail@plt+0x5d88>
   17144:	ldr	r0, [r5]
   17148:	bl	13a30 <__assert_fail@plt+0x2760>
   1714c:	ldrd	r2, [sp]
   17150:	ldr	r1, [sp, #8]
   17154:	strd	r2, [r5]
   17158:	ldr	r2, [sp, #12]
   1715c:	str	r1, [r5, #8]
   17160:	ldr	r3, [sp, #36]	; 0x24
   17164:	str	r2, [r5, #12]
   17168:	str	r3, [r5, #36]	; 0x24
   1716c:	b	17058 <__assert_fail@plt+0x5d88>
   17170:	bl	11294 <abort@plt>
   17174:	svcmi	0x00800000
   17178:	strd	r4, [sp, #-16]!
   1717c:	str	r6, [sp, #8]
   17180:	subs	r6, r1, #0
   17184:	str	lr, [sp, #12]
   17188:	sub	sp, sp, #8
   1718c:	beq	17318 <__assert_fail@plt+0x6048>
   17190:	mov	r3, #0
   17194:	mov	r5, r2
   17198:	add	r2, sp, #4
   1719c:	mov	r4, r0
   171a0:	bl	16230 <__assert_fail@plt+0x4f60>
   171a4:	subs	r3, r0, #0
   171a8:	beq	171d4 <__assert_fail@plt+0x5f04>
   171ac:	cmp	r5, #0
   171b0:	moveq	r0, r5
   171b4:	beq	171c0 <__assert_fail@plt+0x5ef0>
   171b8:	mov	r0, #0
   171bc:	str	r3, [r5]
   171c0:	add	sp, sp, #8
   171c4:	ldrd	r4, [sp]
   171c8:	ldr	r6, [sp, #8]
   171cc:	add	sp, sp, #12
   171d0:	pop	{pc}		; (ldr pc, [sp], #4)
   171d4:	vldr	s15, [r4, #8]
   171d8:	vldr	s14, [r4, #12]
   171dc:	ldr	r3, [r4, #20]
   171e0:	vcvt.f32.u32	s15, s15
   171e4:	vcvt.f32.u32	s14, s14
   171e8:	vldr	s13, [r3, #8]
   171ec:	vmul.f32	s12, s13, s15
   171f0:	vcmpe.f32	s14, s12
   171f4:	vmrs	APSR_nzcv, fpscr
   171f8:	bgt	17240 <__assert_fail@plt+0x5f70>
   171fc:	ldr	r2, [sp, #4]
   17200:	ldr	r3, [r2]
   17204:	cmp	r3, #0
   17208:	beq	17344 <__assert_fail@plt+0x6074>
   1720c:	ldr	r3, [r4, #36]	; 0x24
   17210:	cmp	r3, #0
   17214:	beq	17368 <__assert_fail@plt+0x6098>
   17218:	ldr	r1, [r3, #4]
   1721c:	str	r1, [r4, #36]	; 0x24
   17220:	ldr	r1, [r4, #16]
   17224:	mov	r0, #1
   17228:	ldr	ip, [r2, #4]
   1722c:	add	r1, r1, r0
   17230:	stm	r3, {r6, ip}
   17234:	str	r3, [r2, #4]
   17238:	str	r1, [r4, #16]
   1723c:	b	171c0 <__assert_fail@plt+0x5ef0>
   17240:	movw	r2, #57320	; 0xdfe8
   17244:	movt	r2, #1
   17248:	cmp	r3, r2
   1724c:	beq	17380 <__assert_fail@plt+0x60b0>
   17250:	vldr	s12, [pc, #320]	; 17398 <__assert_fail@plt+0x60c8>
   17254:	vcmpe.f32	s13, s12
   17258:	vmrs	APSR_nzcv, fpscr
   1725c:	ble	1731c <__assert_fail@plt+0x604c>
   17260:	vldr	s11, [pc, #308]	; 1739c <__assert_fail@plt+0x60cc>
   17264:	vcmpe.f32	s13, s11
   17268:	vmrs	APSR_nzcv, fpscr
   1726c:	bpl	1731c <__assert_fail@plt+0x604c>
   17270:	vldr	s10, [pc, #296]	; 173a0 <__assert_fail@plt+0x60d0>
   17274:	vldr	s11, [r3, #12]
   17278:	vcmpe.f32	s11, s10
   1727c:	vmrs	APSR_nzcv, fpscr
   17280:	ble	1731c <__assert_fail@plt+0x604c>
   17284:	vldr	s10, [r3]
   17288:	vcmpe.f32	s10, #0.0
   1728c:	vmrs	APSR_nzcv, fpscr
   17290:	blt	1731c <__assert_fail@plt+0x604c>
   17294:	vadd.f32	s12, s10, s12
   17298:	vldr	s10, [r3, #4]
   1729c:	vcmpe.f32	s12, s10
   172a0:	vmrs	APSR_nzcv, fpscr
   172a4:	bpl	1731c <__assert_fail@plt+0x604c>
   172a8:	vldr	s9, [pc, #244]	; 173a4 <__assert_fail@plt+0x60d4>
   172ac:	vcmpe.f32	s10, s9
   172b0:	vmrs	APSR_nzcv, fpscr
   172b4:	bhi	1731c <__assert_fail@plt+0x604c>
   172b8:	vcmpe.f32	s13, s12
   172bc:	vmrs	APSR_nzcv, fpscr
   172c0:	ble	1731c <__assert_fail@plt+0x604c>
   172c4:	ldrb	r3, [r3, #16]
   172c8:	vmul.f32	s15, s15, s11
   172cc:	cmp	r3, #0
   172d0:	beq	1733c <__assert_fail@plt+0x606c>
   172d4:	vldr	s14, [pc, #204]	; 173a8 <__assert_fail@plt+0x60d8>
   172d8:	vcmpe.f32	s15, s14
   172dc:	vmrs	APSR_nzcv, fpscr
   172e0:	bge	17378 <__assert_fail@plt+0x60a8>
   172e4:	vcvt.u32.f32	s15, s15
   172e8:	mov	r0, r4
   172ec:	vmov	r1, s15
   172f0:	bl	16f84 <__assert_fail@plt+0x5cb4>
   172f4:	cmp	r0, #0
   172f8:	beq	17378 <__assert_fail@plt+0x60a8>
   172fc:	add	r2, sp, #4
   17300:	mov	r3, #0
   17304:	mov	r1, r6
   17308:	mov	r0, r4
   1730c:	bl	16230 <__assert_fail@plt+0x4f60>
   17310:	cmp	r0, #0
   17314:	beq	171fc <__assert_fail@plt+0x5f2c>
   17318:	bl	11294 <abort@plt>
   1731c:	vldr	s13, [pc, #136]	; 173ac <__assert_fail@plt+0x60dc>
   17320:	str	r2, [r4, #20]
   17324:	vmul.f32	s12, s15, s13
   17328:	vcmpe.f32	s14, s12
   1732c:	vmrs	APSR_nzcv, fpscr
   17330:	ble	171fc <__assert_fail@plt+0x5f2c>
   17334:	vldr	s14, [pc, #116]	; 173b0 <__assert_fail@plt+0x60e0>
   17338:	vmul.f32	s15, s15, s14
   1733c:	vmul.f32	s15, s15, s13
   17340:	b	172d4 <__assert_fail@plt+0x6004>
   17344:	ldr	r1, [r4, #12]
   17348:	mov	r0, #1
   1734c:	ldr	r3, [r4, #16]
   17350:	str	r6, [r2]
   17354:	add	r2, r1, r0
   17358:	add	r3, r3, r0
   1735c:	str	r2, [r4, #12]
   17360:	str	r3, [r4, #16]
   17364:	b	171c0 <__assert_fail@plt+0x5ef0>
   17368:	mov	r0, #8
   1736c:	bl	1c554 <__assert_fail@plt+0xb284>
   17370:	subs	r3, r0, #0
   17374:	bne	17390 <__assert_fail@plt+0x60c0>
   17378:	mvn	r0, #0
   1737c:	b	171c0 <__assert_fail@plt+0x5ef0>
   17380:	vldr	s14, [pc, #40]	; 173b0 <__assert_fail@plt+0x60e0>
   17384:	vldr	s13, [pc, #32]	; 173ac <__assert_fail@plt+0x60dc>
   17388:	vmul.f32	s15, s15, s14
   1738c:	b	1733c <__assert_fail@plt+0x606c>
   17390:	ldr	r2, [sp, #4]
   17394:	b	17220 <__assert_fail@plt+0x5f50>
   17398:	stclcc	12, cr12, [ip, #820]	; 0x334
   1739c:	svccc	0x00666666
   173a0:	svccc	0x008ccccd
   173a4:	svccc	0x00800000
   173a8:	svcmi	0x00800000
   173ac:	svccc	0x004ccccd
   173b0:	svccc	0x00b4fdf4
   173b4:	strd	r4, [sp, #-16]!
   173b8:	str	r6, [sp, #8]
   173bc:	subs	r6, r1, #0
   173c0:	str	lr, [sp, #12]
   173c4:	sub	sp, sp, #8
   173c8:	beq	17544 <__assert_fail@plt+0x6274>
   173cc:	mov	r3, #0
   173d0:	add	r2, sp, #4
   173d4:	mov	r4, r0
   173d8:	bl	16230 <__assert_fail@plt+0x4f60>
   173dc:	subs	r5, r0, #0
   173e0:	beq	173fc <__assert_fail@plt+0x612c>
   173e4:	mov	r0, r5
   173e8:	add	sp, sp, #8
   173ec:	ldrd	r4, [sp]
   173f0:	ldr	r6, [sp, #8]
   173f4:	add	sp, sp, #12
   173f8:	pop	{pc}		; (ldr pc, [sp], #4)
   173fc:	vldr	s15, [r4, #8]
   17400:	vldr	s14, [r4, #12]
   17404:	ldr	r3, [r4, #20]
   17408:	vcvt.f32.u32	s15, s15
   1740c:	vcvt.f32.u32	s14, s14
   17410:	vldr	s13, [r3, #8]
   17414:	vmul.f32	s12, s13, s15
   17418:	vcmpe.f32	s14, s12
   1741c:	vmrs	APSR_nzcv, fpscr
   17420:	bgt	1746c <__assert_fail@plt+0x619c>
   17424:	ldr	r3, [sp, #4]
   17428:	ldr	r2, [r3]
   1742c:	cmp	r2, #0
   17430:	beq	17570 <__assert_fail@plt+0x62a0>
   17434:	ldr	r0, [r4, #36]	; 0x24
   17438:	cmp	r0, #0
   1743c:	beq	17594 <__assert_fail@plt+0x62c4>
   17440:	ldr	r2, [r0, #4]
   17444:	str	r2, [r4, #36]	; 0x24
   17448:	ldr	r2, [r4, #16]
   1744c:	mov	r5, r6
   17450:	ldr	r1, [r3, #4]
   17454:	str	r6, [r0]
   17458:	add	r2, r2, #1
   1745c:	str	r1, [r0, #4]
   17460:	str	r0, [r3, #4]
   17464:	str	r2, [r4, #16]
   17468:	b	173e4 <__assert_fail@plt+0x6114>
   1746c:	movw	r2, #57320	; 0xdfe8
   17470:	movt	r2, #1
   17474:	cmp	r3, r2
   17478:	beq	175ac <__assert_fail@plt+0x62dc>
   1747c:	vldr	s12, [pc, #312]	; 175bc <__assert_fail@plt+0x62ec>
   17480:	vcmpe.f32	s13, s12
   17484:	vmrs	APSR_nzcv, fpscr
   17488:	ble	17548 <__assert_fail@plt+0x6278>
   1748c:	vldr	s11, [pc, #300]	; 175c0 <__assert_fail@plt+0x62f0>
   17490:	vcmpe.f32	s13, s11
   17494:	vmrs	APSR_nzcv, fpscr
   17498:	bpl	17548 <__assert_fail@plt+0x6278>
   1749c:	vldr	s10, [pc, #288]	; 175c4 <__assert_fail@plt+0x62f4>
   174a0:	vldr	s11, [r3, #12]
   174a4:	vcmpe.f32	s11, s10
   174a8:	vmrs	APSR_nzcv, fpscr
   174ac:	ble	17548 <__assert_fail@plt+0x6278>
   174b0:	vldr	s10, [r3]
   174b4:	vcmpe.f32	s10, #0.0
   174b8:	vmrs	APSR_nzcv, fpscr
   174bc:	blt	17548 <__assert_fail@plt+0x6278>
   174c0:	vadd.f32	s12, s10, s12
   174c4:	vldr	s10, [r3, #4]
   174c8:	vcmpe.f32	s12, s10
   174cc:	vmrs	APSR_nzcv, fpscr
   174d0:	bpl	17548 <__assert_fail@plt+0x6278>
   174d4:	vldr	s9, [pc, #236]	; 175c8 <__assert_fail@plt+0x62f8>
   174d8:	vcmpe.f32	s10, s9
   174dc:	vmrs	APSR_nzcv, fpscr
   174e0:	bhi	17548 <__assert_fail@plt+0x6278>
   174e4:	vcmpe.f32	s13, s12
   174e8:	vmrs	APSR_nzcv, fpscr
   174ec:	ble	17548 <__assert_fail@plt+0x6278>
   174f0:	ldrb	r3, [r3, #16]
   174f4:	vmul.f32	s15, s15, s11
   174f8:	cmp	r3, #0
   174fc:	beq	17568 <__assert_fail@plt+0x6298>
   17500:	vldr	s14, [pc, #196]	; 175cc <__assert_fail@plt+0x62fc>
   17504:	vcmpe.f32	s15, s14
   17508:	vmrs	APSR_nzcv, fpscr
   1750c:	bge	173e4 <__assert_fail@plt+0x6114>
   17510:	vcvt.u32.f32	s15, s15
   17514:	mov	r0, r4
   17518:	vmov	r1, s15
   1751c:	bl	16f84 <__assert_fail@plt+0x5cb4>
   17520:	cmp	r0, #0
   17524:	beq	173e4 <__assert_fail@plt+0x6114>
   17528:	add	r2, sp, #4
   1752c:	mov	r3, #0
   17530:	mov	r1, r6
   17534:	mov	r0, r4
   17538:	bl	16230 <__assert_fail@plt+0x4f60>
   1753c:	cmp	r0, #0
   17540:	beq	17424 <__assert_fail@plt+0x6154>
   17544:	bl	11294 <abort@plt>
   17548:	vldr	s13, [pc, #128]	; 175d0 <__assert_fail@plt+0x6300>
   1754c:	str	r2, [r4, #20]
   17550:	vmul.f32	s12, s15, s13
   17554:	vcmpe.f32	s14, s12
   17558:	vmrs	APSR_nzcv, fpscr
   1755c:	ble	17424 <__assert_fail@plt+0x6154>
   17560:	vldr	s14, [pc, #108]	; 175d4 <__assert_fail@plt+0x6304>
   17564:	vmul.f32	s15, s15, s14
   17568:	vmul.f32	s15, s15, s13
   1756c:	b	17500 <__assert_fail@plt+0x6230>
   17570:	ldr	r2, [r4, #12]
   17574:	mov	r5, r6
   17578:	str	r6, [r3]
   1757c:	ldr	r3, [r4, #16]
   17580:	add	r2, r2, #1
   17584:	add	r3, r3, #1
   17588:	str	r2, [r4, #12]
   1758c:	str	r3, [r4, #16]
   17590:	b	173e4 <__assert_fail@plt+0x6114>
   17594:	mov	r0, #8
   17598:	bl	1c554 <__assert_fail@plt+0xb284>
   1759c:	cmp	r0, #0
   175a0:	beq	173e4 <__assert_fail@plt+0x6114>
   175a4:	ldr	r3, [sp, #4]
   175a8:	b	17448 <__assert_fail@plt+0x6178>
   175ac:	vldr	s14, [pc, #32]	; 175d4 <__assert_fail@plt+0x6304>
   175b0:	vldr	s13, [pc, #24]	; 175d0 <__assert_fail@plt+0x6300>
   175b4:	vmul.f32	s15, s15, s14
   175b8:	b	17568 <__assert_fail@plt+0x6298>
   175bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   175c0:	svccc	0x00666666
   175c4:	svccc	0x008ccccd
   175c8:	svccc	0x00800000
   175cc:	svcmi	0x00800000
   175d0:	svccc	0x004ccccd
   175d4:	svccc	0x00b4fdf4
   175d8:	strd	r4, [sp, #-16]!
   175dc:	mov	r3, #1
   175e0:	mov	r4, r0
   175e4:	str	r6, [sp, #8]
   175e8:	str	lr, [sp, #12]
   175ec:	sub	sp, sp, #8
   175f0:	add	r2, sp, #4
   175f4:	bl	16230 <__assert_fail@plt+0x4f60>
   175f8:	subs	r5, r0, #0
   175fc:	beq	1761c <__assert_fail@plt+0x634c>
   17600:	ldr	r2, [sp, #4]
   17604:	ldr	r3, [r4, #16]
   17608:	ldr	r2, [r2]
   1760c:	sub	r3, r3, #1
   17610:	str	r3, [r4, #16]
   17614:	cmp	r2, #0
   17618:	beq	17634 <__assert_fail@plt+0x6364>
   1761c:	mov	r0, r5
   17620:	add	sp, sp, #8
   17624:	ldrd	r4, [sp]
   17628:	ldr	r6, [sp, #8]
   1762c:	add	sp, sp, #12
   17630:	pop	{pc}		; (ldr pc, [sp], #4)
   17634:	vldr	s15, [r4, #8]
   17638:	ldr	r3, [r4, #12]
   1763c:	ldr	r2, [r4, #20]
   17640:	vcvt.f32.u32	s15, s15
   17644:	sub	r3, r3, #1
   17648:	vmov	s14, r3
   1764c:	vldr	s13, [r2]
   17650:	str	r3, [r4, #12]
   17654:	vmul.f32	s12, s13, s15
   17658:	vcvt.f32.u32	s14, s14
   1765c:	vcmpe.f32	s14, s12
   17660:	vmrs	APSR_nzcv, fpscr
   17664:	bpl	1761c <__assert_fail@plt+0x634c>
   17668:	movw	r3, #57320	; 0xdfe8
   1766c:	movt	r3, #1
   17670:	cmp	r2, r3
   17674:	beq	17754 <__assert_fail@plt+0x6484>
   17678:	vldr	s11, [pc, #224]	; 17760 <__assert_fail@plt+0x6490>
   1767c:	vldr	s12, [r2, #8]
   17680:	vcmpe.f32	s12, s11
   17684:	vmrs	APSR_nzcv, fpscr
   17688:	ble	1773c <__assert_fail@plt+0x646c>
   1768c:	vldr	s10, [pc, #208]	; 17764 <__assert_fail@plt+0x6494>
   17690:	vcmpe.f32	s12, s10
   17694:	vmrs	APSR_nzcv, fpscr
   17698:	bpl	1773c <__assert_fail@plt+0x646c>
   1769c:	vldr	s10, [pc, #196]	; 17768 <__assert_fail@plt+0x6498>
   176a0:	vldr	s9, [r2, #12]
   176a4:	vcmpe.f32	s9, s10
   176a8:	vmrs	APSR_nzcv, fpscr
   176ac:	ble	1773c <__assert_fail@plt+0x646c>
   176b0:	vcmpe.f32	s13, #0.0
   176b4:	vmrs	APSR_nzcv, fpscr
   176b8:	blt	1773c <__assert_fail@plt+0x646c>
   176bc:	vadd.f32	s13, s13, s11
   176c0:	vldr	s11, [r2, #4]
   176c4:	vcmpe.f32	s13, s11
   176c8:	vmrs	APSR_nzcv, fpscr
   176cc:	bpl	1773c <__assert_fail@plt+0x646c>
   176d0:	vldr	s10, [pc, #148]	; 1776c <__assert_fail@plt+0x649c>
   176d4:	vcmpe.f32	s11, s10
   176d8:	vmrs	APSR_nzcv, fpscr
   176dc:	bhi	1773c <__assert_fail@plt+0x646c>
   176e0:	vcmpe.f32	s12, s13
   176e4:	vmrs	APSR_nzcv, fpscr
   176e8:	ble	1773c <__assert_fail@plt+0x646c>
   176ec:	ldrb	r3, [r2, #16]
   176f0:	vmul.f32	s15, s15, s11
   176f4:	cmp	r3, #0
   176f8:	beq	17758 <__assert_fail@plt+0x6488>
   176fc:	vcvt.u32.f32	s15, s15
   17700:	mov	r0, r4
   17704:	vmov	r1, s15
   17708:	bl	16f84 <__assert_fail@plt+0x5cb4>
   1770c:	cmp	r0, #0
   17710:	bne	1761c <__assert_fail@plt+0x634c>
   17714:	ldr	r0, [r4, #36]	; 0x24
   17718:	cmp	r0, #0
   1771c:	beq	17730 <__assert_fail@plt+0x6460>
   17720:	ldr	r6, [r0, #4]
   17724:	bl	13a30 <__assert_fail@plt+0x2760>
   17728:	subs	r0, r6, #0
   1772c:	bne	17720 <__assert_fail@plt+0x6450>
   17730:	mov	r3, #0
   17734:	str	r3, [r4, #36]	; 0x24
   17738:	b	1761c <__assert_fail@plt+0x634c>
   1773c:	vldr	s13, [pc, #44]	; 17770 <__assert_fail@plt+0x64a0>
   17740:	str	r3, [r4, #20]
   17744:	vmul.f32	s13, s15, s13
   17748:	vcmpe.f32	s14, s13
   1774c:	vmrs	APSR_nzcv, fpscr
   17750:	bpl	1761c <__assert_fail@plt+0x634c>
   17754:	vldr	s12, [pc, #24]	; 17774 <__assert_fail@plt+0x64a4>
   17758:	vmul.f32	s15, s15, s12
   1775c:	b	176fc <__assert_fail@plt+0x642c>
   17760:	stclcc	12, cr12, [ip, #820]	; 0x334
   17764:	svccc	0x00666666
   17768:	svccc	0x008ccccd
   1776c:	svccc	0x00800000
   17770:	andeq	r0, r0, r0
   17774:	svccc	0x004ccccd
   17778:	strd	r4, [sp, #-16]!
   1777c:	mov	r3, #1
   17780:	mov	r4, r0
   17784:	str	r6, [sp, #8]
   17788:	str	lr, [sp, #12]
   1778c:	sub	sp, sp, #8
   17790:	add	r2, sp, #4
   17794:	bl	16230 <__assert_fail@plt+0x4f60>
   17798:	subs	r5, r0, #0
   1779c:	beq	177bc <__assert_fail@plt+0x64ec>
   177a0:	ldr	r2, [sp, #4]
   177a4:	ldr	r3, [r4, #16]
   177a8:	ldr	r2, [r2]
   177ac:	sub	r3, r3, #1
   177b0:	str	r3, [r4, #16]
   177b4:	cmp	r2, #0
   177b8:	beq	177d4 <__assert_fail@plt+0x6504>
   177bc:	mov	r0, r5
   177c0:	add	sp, sp, #8
   177c4:	ldrd	r4, [sp]
   177c8:	ldr	r6, [sp, #8]
   177cc:	add	sp, sp, #12
   177d0:	pop	{pc}		; (ldr pc, [sp], #4)
   177d4:	vldr	s15, [r4, #8]
   177d8:	ldr	r3, [r4, #12]
   177dc:	ldr	r2, [r4, #20]
   177e0:	vcvt.f32.u32	s15, s15
   177e4:	sub	r3, r3, #1
   177e8:	vmov	s14, r3
   177ec:	vldr	s13, [r2]
   177f0:	str	r3, [r4, #12]
   177f4:	vmul.f32	s12, s13, s15
   177f8:	vcvt.f32.u32	s14, s14
   177fc:	vcmpe.f32	s14, s12
   17800:	vmrs	APSR_nzcv, fpscr
   17804:	bpl	177bc <__assert_fail@plt+0x64ec>
   17808:	movw	r3, #57320	; 0xdfe8
   1780c:	movt	r3, #1
   17810:	cmp	r2, r3
   17814:	beq	178f4 <__assert_fail@plt+0x6624>
   17818:	vldr	s11, [pc, #224]	; 17900 <__assert_fail@plt+0x6630>
   1781c:	vldr	s12, [r2, #8]
   17820:	vcmpe.f32	s12, s11
   17824:	vmrs	APSR_nzcv, fpscr
   17828:	ble	178dc <__assert_fail@plt+0x660c>
   1782c:	vldr	s10, [pc, #208]	; 17904 <__assert_fail@plt+0x6634>
   17830:	vcmpe.f32	s12, s10
   17834:	vmrs	APSR_nzcv, fpscr
   17838:	bpl	178dc <__assert_fail@plt+0x660c>
   1783c:	vldr	s10, [pc, #196]	; 17908 <__assert_fail@plt+0x6638>
   17840:	vldr	s9, [r2, #12]
   17844:	vcmpe.f32	s9, s10
   17848:	vmrs	APSR_nzcv, fpscr
   1784c:	ble	178dc <__assert_fail@plt+0x660c>
   17850:	vcmpe.f32	s13, #0.0
   17854:	vmrs	APSR_nzcv, fpscr
   17858:	blt	178dc <__assert_fail@plt+0x660c>
   1785c:	vadd.f32	s13, s13, s11
   17860:	vldr	s11, [r2, #4]
   17864:	vcmpe.f32	s13, s11
   17868:	vmrs	APSR_nzcv, fpscr
   1786c:	bpl	178dc <__assert_fail@plt+0x660c>
   17870:	vldr	s10, [pc, #148]	; 1790c <__assert_fail@plt+0x663c>
   17874:	vcmpe.f32	s11, s10
   17878:	vmrs	APSR_nzcv, fpscr
   1787c:	bhi	178dc <__assert_fail@plt+0x660c>
   17880:	vcmpe.f32	s12, s13
   17884:	vmrs	APSR_nzcv, fpscr
   17888:	ble	178dc <__assert_fail@plt+0x660c>
   1788c:	ldrb	r3, [r2, #16]
   17890:	vmul.f32	s15, s15, s11
   17894:	cmp	r3, #0
   17898:	beq	178f8 <__assert_fail@plt+0x6628>
   1789c:	vcvt.u32.f32	s15, s15
   178a0:	mov	r0, r4
   178a4:	vmov	r1, s15
   178a8:	bl	16f84 <__assert_fail@plt+0x5cb4>
   178ac:	cmp	r0, #0
   178b0:	bne	177bc <__assert_fail@plt+0x64ec>
   178b4:	ldr	r0, [r4, #36]	; 0x24
   178b8:	cmp	r0, #0
   178bc:	beq	178d0 <__assert_fail@plt+0x6600>
   178c0:	ldr	r6, [r0, #4]
   178c4:	bl	13a30 <__assert_fail@plt+0x2760>
   178c8:	subs	r0, r6, #0
   178cc:	bne	178c0 <__assert_fail@plt+0x65f0>
   178d0:	mov	r3, #0
   178d4:	str	r3, [r4, #36]	; 0x24
   178d8:	b	177bc <__assert_fail@plt+0x64ec>
   178dc:	vldr	s13, [pc, #44]	; 17910 <__assert_fail@plt+0x6640>
   178e0:	str	r3, [r4, #20]
   178e4:	vmul.f32	s13, s15, s13
   178e8:	vcmpe.f32	s14, s13
   178ec:	vmrs	APSR_nzcv, fpscr
   178f0:	bpl	177bc <__assert_fail@plt+0x64ec>
   178f4:	vldr	s12, [pc, #24]	; 17914 <__assert_fail@plt+0x6644>
   178f8:	vmul.f32	s15, s15, s12
   178fc:	b	1789c <__assert_fail@plt+0x65cc>
   17900:	stclcc	12, cr12, [ip, #820]	; 0x334
   17904:	svccc	0x00666666
   17908:	svccc	0x008ccccd
   1790c:	svccc	0x00800000
   17910:	andeq	r0, r0, r0
   17914:	svccc	0x004ccccd
   17918:	mov	r3, #0
   1791c:	mov	r2, #1
   17920:	str	r1, [r0]
   17924:	str	r1, [r0, #4]
   17928:	str	r1, [r0, #8]
   1792c:	str	r1, [r0, #12]
   17930:	str	r1, [r0, #16]
   17934:	str	r3, [r0, #20]
   17938:	str	r3, [r0, #24]
   1793c:	strb	r2, [r0, #28]
   17940:	bx	lr
   17944:	ldrb	r0, [r0, #28]
   17948:	bx	lr
   1794c:	ldrb	ip, [r0, #28]
   17950:	mov	r2, r0
   17954:	ldr	r3, [r0, #20]
   17958:	eor	ip, ip, #1
   1795c:	add	r3, ip, r3
   17960:	and	r3, r3, #3
   17964:	ldr	r0, [r0, r3, lsl #2]
   17968:	str	r1, [r2, r3, lsl #2]
   1796c:	ldr	r1, [r2, #24]
   17970:	str	r3, [r2, #20]
   17974:	cmp	r1, r3
   17978:	bne	17988 <__assert_fail@plt+0x66b8>
   1797c:	add	ip, ip, r1
   17980:	and	ip, ip, #3
   17984:	str	ip, [r2, #24]
   17988:	mov	r3, #0
   1798c:	strb	r3, [r2, #28]
   17990:	bx	lr
   17994:	ldrb	r3, [r0, #28]
   17998:	cmp	r3, #0
   1799c:	bne	179d8 <__assert_fail@plt+0x6708>
   179a0:	ldr	r1, [r0, #16]
   179a4:	ldr	r3, [r0, #20]
   179a8:	ldr	r2, [r0, r3, lsl #2]
   179ac:	str	r1, [r0, r3, lsl #2]
   179b0:	ldr	r1, [r0, #24]
   179b4:	cmp	r3, r1
   179b8:	moveq	r3, #1
   179bc:	strbeq	r3, [r0, #28]
   179c0:	beq	179d0 <__assert_fail@plt+0x6700>
   179c4:	add	r3, r3, #3
   179c8:	and	r3, r3, #3
   179cc:	str	r3, [r0, #20]
   179d0:	mov	r0, r2
   179d4:	bx	lr
   179d8:	str	r4, [sp, #-8]!
   179dc:	str	lr, [sp, #4]
   179e0:	bl	11294 <abort@plt>
   179e4:	push	{r2, r3}
   179e8:	push	{lr}		; (str lr, [sp, #-4]!)
   179ec:	sub	sp, sp, #12
   179f0:	ldr	r2, [sp, #16]
   179f4:	ands	r3, r2, #64	; 0x40
   179f8:	bne	17a14 <__assert_fail@plt+0x6744>
   179fc:	bl	11174 <openat64@plt>
   17a00:	bl	1b5e8 <__assert_fail@plt+0xa318>
   17a04:	add	sp, sp, #12
   17a08:	pop	{lr}		; (ldr lr, [sp], #4)
   17a0c:	add	sp, sp, #8
   17a10:	bx	lr
   17a14:	add	ip, sp, #20
   17a18:	ldr	r3, [sp, #20]
   17a1c:	str	ip, [sp, #4]
   17a20:	b	179fc <__assert_fail@plt+0x672c>
   17a24:	orr	r2, r2, #540672	; 0x84000
   17a28:	strd	r4, [sp, #-16]!
   17a2c:	orr	r2, r2, #2304	; 0x900
   17a30:	str	r6, [sp, #8]
   17a34:	mov	r6, r3
   17a38:	str	lr, [sp, #12]
   17a3c:	bl	179e4 <__assert_fail@plt+0x6714>
   17a40:	subs	r5, r0, #0
   17a44:	movlt	r4, #0
   17a48:	blt	17a5c <__assert_fail@plt+0x678c>
   17a4c:	bl	11234 <fdopendir@plt>
   17a50:	subs	r4, r0, #0
   17a54:	beq	17a70 <__assert_fail@plt+0x67a0>
   17a58:	str	r5, [r6]
   17a5c:	mov	r0, r4
   17a60:	ldrd	r4, [sp]
   17a64:	ldr	r6, [sp, #8]
   17a68:	add	sp, sp, #12
   17a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a70:	bl	11180 <__errno_location@plt>
   17a74:	mov	r6, r0
   17a78:	mov	r0, r5
   17a7c:	ldr	r5, [r6]
   17a80:	bl	112a0 <close@plt>
   17a84:	b	17a58 <__assert_fail@plt+0x6788>
   17a88:	strd	r4, [sp, #-16]!
   17a8c:	subs	r4, r0, #0
   17a90:	str	r6, [sp, #8]
   17a94:	str	lr, [sp, #12]
   17a98:	beq	17b30 <__assert_fail@plt+0x6860>
   17a9c:	mov	r1, #47	; 0x2f
   17aa0:	bl	11210 <strrchr@plt>
   17aa4:	subs	r5, r0, #0
   17aa8:	beq	17b08 <__assert_fail@plt+0x6838>
   17aac:	add	r6, r5, #1
   17ab0:	sub	r3, r6, r4
   17ab4:	cmp	r3, #6
   17ab8:	ble	17b08 <__assert_fail@plt+0x6838>
   17abc:	movw	r1, #57504	; 0xe0a0
   17ac0:	movt	r1, #1
   17ac4:	mov	r2, #7
   17ac8:	sub	r0, r5, #6
   17acc:	bl	11288 <strncmp@plt>
   17ad0:	cmp	r0, #0
   17ad4:	bne	17b08 <__assert_fail@plt+0x6838>
   17ad8:	movw	r1, #57512	; 0xe0a8
   17adc:	movt	r1, #1
   17ae0:	mov	r2, #3
   17ae4:	mov	r0, r6
   17ae8:	bl	11288 <strncmp@plt>
   17aec:	cmp	r0, #0
   17af0:	movne	r4, r6
   17af4:	bne	17b08 <__assert_fail@plt+0x6838>
   17af8:	add	r4, r5, #4
   17afc:	movw	r3, #61816	; 0xf178
   17b00:	movt	r3, #2
   17b04:	str	r4, [r3]
   17b08:	movw	r2, #61884	; 0xf1bc
   17b0c:	movt	r2, #2
   17b10:	ldr	r6, [sp, #8]
   17b14:	movw	r3, #61820	; 0xf17c
   17b18:	movt	r3, #2
   17b1c:	str	r4, [r2]
   17b20:	str	r4, [r3]
   17b24:	ldrd	r4, [sp]
   17b28:	add	sp, sp, #12
   17b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b30:	movw	r3, #61832	; 0xf188
   17b34:	movt	r3, #2
   17b38:	movw	r0, #57448	; 0xe068
   17b3c:	movt	r0, #1
   17b40:	ldr	r3, [r3]
   17b44:	mov	r2, #55	; 0x37
   17b48:	mov	r1, #1
   17b4c:	bl	110b4 <fwrite@plt>
   17b50:	bl	11294 <abort@plt>
   17b54:	mov	r2, #5
   17b58:	strd	r4, [sp, #-16]!
   17b5c:	mov	r5, r0
   17b60:	str	r6, [sp, #8]
   17b64:	mov	r6, r1
   17b68:	mov	r1, r0
   17b6c:	mov	r0, #0
   17b70:	str	lr, [sp, #12]
   17b74:	bl	11060 <dcgettext@plt>
   17b78:	cmp	r5, r0
   17b7c:	mov	r4, r0
   17b80:	beq	17b98 <__assert_fail@plt+0x68c8>
   17b84:	mov	r0, r4
   17b88:	ldrd	r4, [sp]
   17b8c:	ldr	r6, [sp, #8]
   17b90:	add	sp, sp, #12
   17b94:	pop	{pc}		; (ldr pc, [sp], #4)
   17b98:	bl	1ca6c <__assert_fail@plt+0xb79c>
   17b9c:	ldrb	r3, [r0]
   17ba0:	bic	r3, r3, #32
   17ba4:	cmp	r3, #85	; 0x55
   17ba8:	bne	17c10 <__assert_fail@plt+0x6940>
   17bac:	ldrb	r3, [r0, #1]
   17bb0:	bic	r3, r3, #32
   17bb4:	cmp	r3, #84	; 0x54
   17bb8:	bne	17c90 <__assert_fail@plt+0x69c0>
   17bbc:	ldrb	r3, [r0, #2]
   17bc0:	bic	r3, r3, #32
   17bc4:	cmp	r3, #70	; 0x46
   17bc8:	bne	17c90 <__assert_fail@plt+0x69c0>
   17bcc:	ldrb	r3, [r0, #3]
   17bd0:	cmp	r3, #45	; 0x2d
   17bd4:	bne	17c90 <__assert_fail@plt+0x69c0>
   17bd8:	ldrb	r3, [r0, #4]
   17bdc:	cmp	r3, #56	; 0x38
   17be0:	bne	17c90 <__assert_fail@plt+0x69c0>
   17be4:	ldrb	r3, [r0, #5]
   17be8:	cmp	r3, #0
   17bec:	bne	17c90 <__assert_fail@plt+0x69c0>
   17bf0:	ldrb	r2, [r4]
   17bf4:	movw	r3, #57604	; 0xe104
   17bf8:	movt	r3, #1
   17bfc:	movw	r4, #57616	; 0xe110
   17c00:	movt	r4, #1
   17c04:	cmp	r2, #96	; 0x60
   17c08:	movne	r4, r3
   17c0c:	b	17b84 <__assert_fail@plt+0x68b4>
   17c10:	cmp	r3, #71	; 0x47
   17c14:	bne	17c90 <__assert_fail@plt+0x69c0>
   17c18:	ldrb	r3, [r0, #1]
   17c1c:	bic	r3, r3, #32
   17c20:	cmp	r3, #66	; 0x42
   17c24:	bne	17c90 <__assert_fail@plt+0x69c0>
   17c28:	ldrb	r3, [r0, #2]
   17c2c:	cmp	r3, #49	; 0x31
   17c30:	bne	17c90 <__assert_fail@plt+0x69c0>
   17c34:	ldrb	r3, [r0, #3]
   17c38:	cmp	r3, #56	; 0x38
   17c3c:	bne	17c90 <__assert_fail@plt+0x69c0>
   17c40:	ldrb	r3, [r0, #4]
   17c44:	cmp	r3, #48	; 0x30
   17c48:	bne	17c90 <__assert_fail@plt+0x69c0>
   17c4c:	ldrb	r3, [r0, #5]
   17c50:	cmp	r3, #51	; 0x33
   17c54:	bne	17c90 <__assert_fail@plt+0x69c0>
   17c58:	ldrb	r3, [r0, #6]
   17c5c:	cmp	r3, #48	; 0x30
   17c60:	bne	17c90 <__assert_fail@plt+0x69c0>
   17c64:	ldrb	r3, [r0, #7]
   17c68:	cmp	r3, #0
   17c6c:	bne	17c90 <__assert_fail@plt+0x69c0>
   17c70:	ldrb	r2, [r4]
   17c74:	movw	r3, #57608	; 0xe108
   17c78:	movt	r3, #1
   17c7c:	movw	r4, #57612	; 0xe10c
   17c80:	movt	r4, #1
   17c84:	cmp	r2, #96	; 0x60
   17c88:	movne	r4, r3
   17c8c:	b	17b84 <__assert_fail@plt+0x68b4>
   17c90:	movw	r3, #57620	; 0xe114
   17c94:	movt	r3, #1
   17c98:	cmp	r6, #9
   17c9c:	movw	r4, #57600	; 0xe100
   17ca0:	movt	r4, #1
   17ca4:	movne	r4, r3
   17ca8:	b	17b84 <__assert_fail@plt+0x68b4>
   17cac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17cb0:	strd	r6, [sp, #8]
   17cb4:	strd	r8, [sp, #16]
   17cb8:	mov	r8, r3
   17cbc:	strd	sl, [sp, #24]
   17cc0:	mov	fp, r0
   17cc4:	mov	sl, r1
   17cc8:	str	lr, [sp, #32]
   17ccc:	sub	sp, sp, #140	; 0x8c
   17cd0:	ldr	r3, [sp, #180]	; 0xb4
   17cd4:	str	r2, [sp, #28]
   17cd8:	and	r4, r3, #2
   17cdc:	ubfx	r3, r3, #1, #1
   17ce0:	str	r3, [sp, #44]	; 0x2c
   17ce4:	bl	110cc <__ctype_get_mb_cur_max@plt>
   17ce8:	ldr	r3, [sp, #176]	; 0xb0
   17cec:	str	r0, [sp, #76]	; 0x4c
   17cf0:	cmp	r3, #10
   17cf4:	ldrls	pc, [pc, r3, lsl #2]
   17cf8:	b	19694 <__assert_fail@plt+0x83c4>
   17cfc:	andeq	r8, r1, ip, ror r1
   17d00:	muleq	r1, r8, r2
   17d04:	andeq	r8, r1, r4, lsl r8
   17d08:	andeq	r8, r1, r4, lsl #6
   17d0c:	andeq	r8, r1, r4, lsl #1
   17d10:	andeq	r8, r1, r0, lsl #2
   17d14:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17d18:	andeq	r8, r1, r0, asr #4
   17d1c:	andeq	r7, r1, r8, lsr #26
   17d20:	andeq	r7, r1, r8, lsr #26
   17d24:	andeq	r7, r1, r8, lsr #26
   17d28:	ldr	r3, [sp, #176]	; 0xb0
   17d2c:	cmp	r3, #10
   17d30:	beq	17d5c <__assert_fail@plt+0x6a8c>
   17d34:	mov	r1, r3
   17d38:	movw	r0, #57624	; 0xe118
   17d3c:	movt	r0, #1
   17d40:	bl	17b54 <__assert_fail@plt+0x6884>
   17d44:	str	r0, [sp, #188]	; 0xbc
   17d48:	movw	r0, #57620	; 0xe114
   17d4c:	movt	r0, #1
   17d50:	ldr	r1, [sp, #176]	; 0xb0
   17d54:	bl	17b54 <__assert_fail@plt+0x6884>
   17d58:	str	r0, [sp, #192]	; 0xc0
   17d5c:	cmp	r4, #0
   17d60:	movne	r4, #0
   17d64:	beq	19420 <__assert_fail@plt+0x8150>
   17d68:	mov	r5, #0
   17d6c:	ldr	r0, [sp, #192]	; 0xc0
   17d70:	mov	r9, r5
   17d74:	str	r5, [sp, #64]	; 0x40
   17d78:	bl	11168 <strlen@plt>
   17d7c:	mov	r3, #1
   17d80:	ldr	r2, [sp, #44]	; 0x2c
   17d84:	cmp	r0, r5
   17d88:	moveq	r2, r5
   17d8c:	str	r3, [sp, #32]
   17d90:	str	r3, [sp, #48]	; 0x30
   17d94:	str	r5, [sp, #52]	; 0x34
   17d98:	str	r3, [sp, #60]	; 0x3c
   17d9c:	ldr	r3, [sp, #180]	; 0xb4
   17da0:	str	r0, [sp, #56]	; 0x38
   17da4:	str	r5, [sp, #68]	; 0x44
   17da8:	str	r5, [sp, #80]	; 0x50
   17dac:	str	r5, [sp, #84]	; 0x54
   17db0:	and	r3, r3, #1
   17db4:	str	r2, [sp, #88]	; 0x58
   17db8:	str	r3, [sp, #92]	; 0x5c
   17dbc:	ldr	r3, [sp, #180]	; 0xb4
   17dc0:	and	r3, r3, #4
   17dc4:	str	r3, [sp, #96]	; 0x60
   17dc8:	ldr	r3, [sp, #192]	; 0xc0
   17dcc:	str	r3, [sp, #72]	; 0x48
   17dd0:	mov	r3, fp
   17dd4:	mov	r7, #0
   17dd8:	mov	fp, r9
   17ddc:	mov	r9, r3
   17de0:	cmn	r8, #1
   17de4:	beq	183e8 <__assert_fail@plt+0x7118>
   17de8:	subs	r6, r8, r7
   17dec:	movne	r6, #1
   17df0:	cmp	r6, #0
   17df4:	beq	18400 <__assert_fail@plt+0x7130>
   17df8:	ldr	r0, [sp, #28]
   17dfc:	ldr	r3, [sp, #48]	; 0x30
   17e00:	cmp	r3, #0
   17e04:	add	r3, r0, r7
   17e08:	str	r3, [sp, #36]	; 0x24
   17e0c:	beq	1888c <__assert_fail@plt+0x75bc>
   17e10:	ldr	r2, [sp, #56]	; 0x38
   17e14:	cmp	r2, #0
   17e18:	beq	18d8c <__assert_fail@plt+0x7abc>
   17e1c:	cmp	r2, #1
   17e20:	mov	r3, r2
   17e24:	movls	r3, #0
   17e28:	movhi	r3, #1
   17e2c:	cmn	r8, #1
   17e30:	add	r5, r7, r2
   17e34:	movne	r3, #0
   17e38:	cmp	r3, #0
   17e3c:	beq	17e48 <__assert_fail@plt+0x6b78>
   17e40:	bl	11168 <strlen@plt>
   17e44:	mov	r8, r0
   17e48:	cmp	r5, r8
   17e4c:	bhi	18d8c <__assert_fail@plt+0x7abc>
   17e50:	ldr	r0, [sp, #36]	; 0x24
   17e54:	ldr	r2, [sp, #56]	; 0x38
   17e58:	ldr	r1, [sp, #72]	; 0x48
   17e5c:	bl	11048 <memcmp@plt>
   17e60:	cmp	r0, #0
   17e64:	bne	18d8c <__assert_fail@plt+0x7abc>
   17e68:	ldr	r3, [sp, #44]	; 0x2c
   17e6c:	cmp	r3, #0
   17e70:	bne	19538 <__assert_fail@plt+0x8268>
   17e74:	ldr	r3, [sp, #36]	; 0x24
   17e78:	ldrb	r5, [r3]
   17e7c:	cmp	r5, #126	; 0x7e
   17e80:	ldrls	pc, [pc, r5, lsl #2]
   17e84:	b	19320 <__assert_fail@plt+0x8050>
   17e88:	andeq	r8, r1, ip, asr r5
   17e8c:	andeq	r9, r1, r0, lsr #6
   17e90:	andeq	r9, r1, r0, lsr #6
   17e94:	andeq	r9, r1, r0, lsr #6
   17e98:	andeq	r9, r1, r0, lsr #6
   17e9c:	andeq	r9, r1, r0, lsr #6
   17ea0:	andeq	r9, r1, r0, lsr #6
   17ea4:			; <UNDEFINED> instruction: 0x000184b4
   17ea8:	andeq	r8, r1, ip, lsr #9
   17eac:			; <UNDEFINED> instruction: 0x000184bc
   17eb0:	andeq	r8, r1, r0, asr #12
   17eb4:	andeq	r8, r1, r0, lsr r6
   17eb8:	andeq	r8, r1, r8, asr r3
   17ebc:	andeq	r8, r1, ip, lsl #12
   17ec0:	andeq	r9, r1, r0, lsr #6
   17ec4:	andeq	r9, r1, r0, lsr #6
   17ec8:	andeq	r9, r1, r0, lsr #6
   17ecc:	andeq	r9, r1, r0, lsr #6
   17ed0:	andeq	r9, r1, r0, lsr #6
   17ed4:	andeq	r9, r1, r0, lsr #6
   17ed8:	andeq	r9, r1, r0, lsr #6
   17edc:	andeq	r9, r1, r0, lsr #6
   17ee0:	andeq	r9, r1, r0, lsr #6
   17ee4:	andeq	r9, r1, r0, lsr #6
   17ee8:	andeq	r9, r1, r0, lsr #6
   17eec:	andeq	r9, r1, r0, lsr #6
   17ef0:	andeq	r9, r1, r0, lsr #6
   17ef4:	andeq	r9, r1, r0, lsr #6
   17ef8:	andeq	r9, r1, r0, lsr #6
   17efc:	andeq	r9, r1, r0, lsr #6
   17f00:	andeq	r9, r1, r0, lsr #6
   17f04:	andeq	r9, r1, r0, lsr #6
   17f08:			; <UNDEFINED> instruction: 0x000186b8
   17f0c:	andeq	r8, r1, ip, lsr #13
   17f10:	andeq	r8, r1, ip, lsr #13
   17f14:	andeq	r8, r1, r0, lsr #13
   17f18:	andeq	r8, r1, ip, lsr #13
   17f1c:	andeq	r8, r1, r4, lsl #15
   17f20:	andeq	r8, r1, ip, lsr #13
   17f24:	strdeq	r8, [r1], -r4
   17f28:	andeq	r8, r1, ip, lsr #13
   17f2c:	andeq	r8, r1, ip, lsr #13
   17f30:	andeq	r8, r1, ip, lsr #13
   17f34:	andeq	r8, r1, r4, lsl #15
   17f38:	andeq	r8, r1, r4, lsl #15
   17f3c:	andeq	r8, r1, r4, lsl #15
   17f40:	andeq	r8, r1, r4, lsl #15
   17f44:	andeq	r8, r1, r4, lsl #15
   17f48:	andeq	r8, r1, r4, lsl #15
   17f4c:	andeq	r8, r1, r4, lsl #15
   17f50:	andeq	r8, r1, r4, lsl #15
   17f54:	andeq	r8, r1, r4, lsl #15
   17f58:	andeq	r8, r1, r4, lsl #15
   17f5c:	andeq	r8, r1, r4, lsl #15
   17f60:	andeq	r8, r1, r4, lsl #15
   17f64:	andeq	r8, r1, r4, lsl #15
   17f68:	andeq	r8, r1, r4, lsl #15
   17f6c:	andeq	r8, r1, r4, lsl #15
   17f70:	andeq	r8, r1, r4, lsl #15
   17f74:	andeq	r8, r1, ip, lsr #13
   17f78:	andeq	r8, r1, ip, lsr #13
   17f7c:	andeq	r8, r1, ip, lsr #13
   17f80:	andeq	r8, r1, ip, lsr #13
   17f84:	andeq	r8, r1, r4, lsr #15
   17f88:	andeq	r9, r1, r0, lsr #6
   17f8c:	andeq	r8, r1, r4, lsl #15
   17f90:	andeq	r8, r1, r4, lsl #15
   17f94:	andeq	r8, r1, r4, lsl #15
   17f98:	andeq	r8, r1, r4, lsl #15
   17f9c:	andeq	r8, r1, r4, lsl #15
   17fa0:	andeq	r8, r1, r4, lsl #15
   17fa4:	andeq	r8, r1, r4, lsl #15
   17fa8:	andeq	r8, r1, r4, lsl #15
   17fac:	andeq	r8, r1, r4, lsl #15
   17fb0:	andeq	r8, r1, r4, lsl #15
   17fb4:	andeq	r8, r1, r4, lsl #15
   17fb8:	andeq	r8, r1, r4, lsl #15
   17fbc:	andeq	r8, r1, r4, lsl #15
   17fc0:	andeq	r8, r1, r4, lsl #15
   17fc4:	andeq	r8, r1, r4, lsl #15
   17fc8:	andeq	r8, r1, r4, lsl #15
   17fcc:	andeq	r8, r1, r4, lsl #15
   17fd0:	andeq	r8, r1, r4, lsl #15
   17fd4:	andeq	r8, r1, r4, lsl #15
   17fd8:	andeq	r8, r1, r4, lsl #15
   17fdc:	andeq	r8, r1, r4, lsl #15
   17fe0:	andeq	r8, r1, r4, lsl #15
   17fe4:	andeq	r8, r1, r4, lsl #15
   17fe8:	andeq	r8, r1, r4, lsl #15
   17fec:	andeq	r8, r1, r4, lsl #15
   17ff0:	andeq	r8, r1, r4, lsl #15
   17ff4:	andeq	r8, r1, ip, lsr #13
   17ff8:	andeq	r8, r1, r8, asr #14
   17ffc:	andeq	r8, r1, r4, lsl #15
   18000:	andeq	r8, r1, ip, lsr #13
   18004:	andeq	r8, r1, r4, lsl #15
   18008:	andeq	r8, r1, ip, lsr #13
   1800c:	andeq	r8, r1, r4, lsl #15
   18010:	andeq	r8, r1, r4, lsl #15
   18014:	andeq	r8, r1, r4, lsl #15
   18018:	andeq	r8, r1, r4, lsl #15
   1801c:	andeq	r8, r1, r4, lsl #15
   18020:	andeq	r8, r1, r4, lsl #15
   18024:	andeq	r8, r1, r4, lsl #15
   18028:	andeq	r8, r1, r4, lsl #15
   1802c:	andeq	r8, r1, r4, lsl #15
   18030:	andeq	r8, r1, r4, lsl #15
   18034:	andeq	r8, r1, r4, lsl #15
   18038:	andeq	r8, r1, r4, lsl #15
   1803c:	andeq	r8, r1, r4, lsl #15
   18040:	andeq	r8, r1, r4, lsl #15
   18044:	andeq	r8, r1, r4, lsl #15
   18048:	andeq	r8, r1, r4, lsl #15
   1804c:	andeq	r8, r1, r4, lsl #15
   18050:	andeq	r8, r1, r4, lsl #15
   18054:	andeq	r8, r1, r4, lsl #15
   18058:	andeq	r8, r1, r4, lsl #15
   1805c:	andeq	r8, r1, r4, lsl #15
   18060:	andeq	r8, r1, r4, lsl #15
   18064:	andeq	r8, r1, r4, lsl #15
   18068:	andeq	r8, r1, r4, lsl #15
   1806c:	andeq	r8, r1, r4, lsl #15
   18070:	andeq	r8, r1, r4, lsl #15
   18074:	andeq	r8, r1, r4, asr r6
   18078:	andeq	r8, r1, ip, lsr #13
   1807c:	andeq	r8, r1, r4, asr r6
   18080:	andeq	r8, r1, r0, lsr #13
   18084:	ldr	r3, [sp, #180]	; 0xb4
   18088:	cmp	r4, #0
   1808c:	and	r3, r3, #1
   18090:	str	r3, [sp, #92]	; 0x5c
   18094:	ldr	r3, [sp, #180]	; 0xb4
   18098:	and	r3, r3, #4
   1809c:	str	r3, [sp, #96]	; 0x60
   180a0:	moveq	r3, #1
   180a4:	streq	r3, [sp, #60]	; 0x3c
   180a8:	beq	18838 <__assert_fail@plt+0x7568>
   180ac:	mov	r3, #0
   180b0:	mov	r2, #1
   180b4:	mov	r4, r3
   180b8:	mov	r9, r3
   180bc:	str	r2, [sp, #32]
   180c0:	str	r2, [sp, #44]	; 0x2c
   180c4:	str	r3, [sp, #48]	; 0x30
   180c8:	str	r2, [sp, #52]	; 0x34
   180cc:	str	r2, [sp, #56]	; 0x38
   180d0:	str	r3, [sp, #60]	; 0x3c
   180d4:	str	r2, [sp, #64]	; 0x40
   180d8:	str	r2, [sp, #68]	; 0x44
   180dc:	str	r3, [sp, #80]	; 0x50
   180e0:	str	r3, [sp, #84]	; 0x54
   180e4:	str	r3, [sp, #88]	; 0x58
   180e8:	movw	r3, #57620	; 0xe114
   180ec:	movt	r3, #1
   180f0:	str	r3, [sp, #72]	; 0x48
   180f4:	mov	r3, #2
   180f8:	str	r3, [sp, #176]	; 0xb0
   180fc:	b	17dd0 <__assert_fail@plt+0x6b00>
   18100:	ldr	r3, [sp, #180]	; 0xb4
   18104:	cmp	r4, #0
   18108:	and	r3, r3, #1
   1810c:	str	r3, [sp, #92]	; 0x5c
   18110:	ldr	r3, [sp, #180]	; 0xb4
   18114:	and	r3, r3, #4
   18118:	str	r3, [sp, #96]	; 0x60
   1811c:	bne	194f0 <__assert_fail@plt+0x8220>
   18120:	cmp	sl, #0
   18124:	beq	1929c <__assert_fail@plt+0x7fcc>
   18128:	mov	r3, #34	; 0x22
   1812c:	mov	r2, r4
   18130:	mov	r1, #1
   18134:	mov	r9, r2
   18138:	strb	r3, [fp]
   1813c:	movw	r3, #57600	; 0xe100
   18140:	movt	r3, #1
   18144:	mov	r4, r1
   18148:	str	r1, [sp, #32]
   1814c:	str	r2, [sp, #44]	; 0x2c
   18150:	str	r1, [sp, #48]	; 0x30
   18154:	str	r2, [sp, #52]	; 0x34
   18158:	str	r1, [sp, #56]	; 0x38
   1815c:	str	r1, [sp, #60]	; 0x3c
   18160:	str	r2, [sp, #64]	; 0x40
   18164:	str	r2, [sp, #68]	; 0x44
   18168:	str	r3, [sp, #72]	; 0x48
   1816c:	str	r2, [sp, #80]	; 0x50
   18170:	str	r2, [sp, #84]	; 0x54
   18174:	str	r2, [sp, #88]	; 0x58
   18178:	b	17dd0 <__assert_fail@plt+0x6b00>
   1817c:	mov	r3, #0
   18180:	mov	r2, #1
   18184:	mov	r9, r3
   18188:	str	r2, [sp, #32]
   1818c:	str	r3, [sp, #44]	; 0x2c
   18190:	str	r3, [sp, #48]	; 0x30
   18194:	str	r3, [sp, #52]	; 0x34
   18198:	str	r3, [sp, #60]	; 0x3c
   1819c:	strd	r2, [sp, #64]	; 0x40
   181a0:	str	r3, [sp, #72]	; 0x48
   181a4:	str	r3, [sp, #80]	; 0x50
   181a8:	str	r3, [sp, #88]	; 0x58
   181ac:	ldr	r3, [sp, #180]	; 0xb4
   181b0:	and	r3, r3, r2
   181b4:	str	r3, [sp, #92]	; 0x5c
   181b8:	ldr	r3, [sp, #180]	; 0xb4
   181bc:	and	r3, r3, #4
   181c0:	str	r3, [sp, #96]	; 0x60
   181c4:	ldr	r3, [sp, #176]	; 0xb0
   181c8:	mov	r4, r3
   181cc:	str	r3, [sp, #56]	; 0x38
   181d0:	str	r3, [sp, #84]	; 0x54
   181d4:	b	17dd0 <__assert_fail@plt+0x6b00>
   181d8:	mov	r3, #1
   181dc:	mov	r4, #0
   181e0:	mov	r9, r4
   181e4:	str	r3, [sp, #32]
   181e8:	str	r3, [sp, #44]	; 0x2c
   181ec:	str	r3, [sp, #48]	; 0x30
   181f0:	str	r4, [sp, #52]	; 0x34
   181f4:	str	r3, [sp, #56]	; 0x38
   181f8:	str	r3, [sp, #60]	; 0x3c
   181fc:	str	r3, [sp, #88]	; 0x58
   18200:	movw	r3, #57600	; 0xe100
   18204:	movt	r3, #1
   18208:	str	r4, [sp, #64]	; 0x40
   1820c:	str	r4, [sp, #68]	; 0x44
   18210:	str	r3, [sp, #72]	; 0x48
   18214:	ldr	r3, [sp, #180]	; 0xb4
   18218:	str	r4, [sp, #80]	; 0x50
   1821c:	str	r4, [sp, #84]	; 0x54
   18220:	and	r3, r3, #1
   18224:	str	r3, [sp, #92]	; 0x5c
   18228:	ldr	r3, [sp, #180]	; 0xb4
   1822c:	and	r3, r3, #4
   18230:	str	r3, [sp, #96]	; 0x60
   18234:	mov	r3, #5
   18238:	str	r3, [sp, #176]	; 0xb0
   1823c:	b	17dd0 <__assert_fail@plt+0x6b00>
   18240:	mov	r3, #1
   18244:	mov	r4, #0
   18248:	mov	r9, r4
   1824c:	str	r3, [sp, #32]
   18250:	str	r4, [sp, #44]	; 0x2c
   18254:	str	r3, [sp, #48]	; 0x30
   18258:	str	r3, [sp, #60]	; 0x3c
   1825c:	ldr	r3, [sp, #180]	; 0xb4
   18260:	str	r4, [sp, #52]	; 0x34
   18264:	str	r4, [sp, #56]	; 0x38
   18268:	str	r4, [sp, #64]	; 0x40
   1826c:	str	r4, [sp, #68]	; 0x44
   18270:	and	r3, r3, #1
   18274:	str	r4, [sp, #72]	; 0x48
   18278:	str	r4, [sp, #80]	; 0x50
   1827c:	str	r4, [sp, #84]	; 0x54
   18280:	str	r3, [sp, #92]	; 0x5c
   18284:	ldr	r3, [sp, #180]	; 0xb4
   18288:	str	r4, [sp, #88]	; 0x58
   1828c:	and	r3, r3, #4
   18290:	str	r3, [sp, #96]	; 0x60
   18294:	b	17dd0 <__assert_fail@plt+0x6b00>
   18298:	mov	r3, #0
   1829c:	mov	r2, #1
   182a0:	ldr	r1, [sp, #176]	; 0xb0
   182a4:	mov	r4, r3
   182a8:	mov	r9, r3
   182ac:	movw	r3, #57620	; 0xe114
   182b0:	movt	r3, #1
   182b4:	str	r2, [sp, #32]
   182b8:	str	r2, [sp, #44]	; 0x2c
   182bc:	str	r4, [sp, #48]	; 0x30
   182c0:	strd	r2, [sp, #68]	; 0x44
   182c4:	ldr	r3, [sp, #180]	; 0xb4
   182c8:	str	r2, [sp, #52]	; 0x34
   182cc:	str	r1, [sp, #56]	; 0x38
   182d0:	str	r4, [sp, #60]	; 0x3c
   182d4:	str	r2, [sp, #64]	; 0x40
   182d8:	and	r3, r3, r2
   182dc:	str	r4, [sp, #80]	; 0x50
   182e0:	str	r4, [sp, #84]	; 0x54
   182e4:	str	r4, [sp, #88]	; 0x58
   182e8:	str	r3, [sp, #92]	; 0x5c
   182ec:	ldr	r3, [sp, #180]	; 0xb4
   182f0:	and	r3, r3, #4
   182f4:	str	r3, [sp, #96]	; 0x60
   182f8:	mov	r3, #2
   182fc:	str	r3, [sp, #176]	; 0xb0
   18300:	b	17dd0 <__assert_fail@plt+0x6b00>
   18304:	mov	r3, #1
   18308:	mov	r2, #0
   1830c:	mov	r4, r2
   18310:	mov	r9, r2
   18314:	str	r3, [sp, #32]
   18318:	str	r3, [sp, #44]	; 0x2c
   1831c:	str	r2, [sp, #48]	; 0x30
   18320:	str	r3, [sp, #52]	; 0x34
   18324:	str	r3, [sp, #56]	; 0x38
   18328:	str	r3, [sp, #60]	; 0x3c
   1832c:	str	r3, [sp, #64]	; 0x40
   18330:	str	r3, [sp, #68]	; 0x44
   18334:	str	r3, [sp, #88]	; 0x58
   18338:	movw	r3, #57620	; 0xe114
   1833c:	movt	r3, #1
   18340:	str	r3, [sp, #72]	; 0x48
   18344:	ldr	r3, [sp, #180]	; 0xb4
   18348:	str	r2, [sp, #80]	; 0x50
   1834c:	str	r2, [sp, #84]	; 0x54
   18350:	and	r3, r3, #1
   18354:	b	182e8 <__assert_fail@plt+0x7018>
   18358:	mov	r5, #102	; 0x66
   1835c:	mov	r6, #0
   18360:	ldr	r3, [sp, #44]	; 0x2c
   18364:	cmp	r3, #0
   18368:	bne	19218 <__assert_fail@plt+0x7f48>
   1836c:	ldr	r2, [sp, #52]	; 0x34
   18370:	eor	r3, fp, #1
   18374:	ands	r3, r2, r3
   18378:	beq	183b0 <__assert_fail@plt+0x70e0>
   1837c:	cmp	sl, r4
   18380:	mov	fp, r3
   18384:	movhi	r2, #39	; 0x27
   18388:	strbhi	r2, [r9, r4]
   1838c:	add	r2, r4, #1
   18390:	cmp	sl, r2
   18394:	movhi	r1, #36	; 0x24
   18398:	strbhi	r1, [r9, r2]
   1839c:	add	r2, r4, #2
   183a0:	add	r4, r4, #3
   183a4:	cmp	sl, r2
   183a8:	movhi	r1, #39	; 0x27
   183ac:	strbhi	r1, [r9, r2]
   183b0:	cmp	sl, r4
   183b4:	add	r7, r7, #1
   183b8:	movhi	r3, #92	; 0x5c
   183bc:	strbhi	r3, [r9, r4]
   183c0:	add	r4, r4, #1
   183c4:	cmp	r4, sl
   183c8:	ldr	r3, [sp, #32]
   183cc:	strbcc	r5, [r9, r4]
   183d0:	cmp	r6, #0
   183d4:	add	r4, r4, #1
   183d8:	moveq	r3, #0
   183dc:	cmn	r8, #1
   183e0:	str	r3, [sp, #32]
   183e4:	bne	17de8 <__assert_fail@plt+0x6b18>
   183e8:	ldr	r3, [sp, #28]
   183ec:	ldrb	r6, [r3, r7]
   183f0:	adds	r6, r6, #0
   183f4:	movne	r6, #1
   183f8:	cmp	r6, #0
   183fc:	bne	17df8 <__assert_fail@plt+0x6b28>
   18400:	mov	r3, r9
   18404:	mov	r9, fp
   18408:	mov	fp, r3
   1840c:	ldr	r3, [sp, #68]	; 0x44
   18410:	cmp	r4, #0
   18414:	movne	r3, #0
   18418:	cmp	r3, #0
   1841c:	bne	19610 <__assert_fail@plt+0x8340>
   18420:	ldr	r3, [sp, #44]	; 0x2c
   18424:	ldr	r2, [sp, #52]	; 0x34
   18428:	eor	r3, r3, #1
   1842c:	ands	r2, r3, r2
   18430:	beq	19548 <__assert_fail@plt+0x8278>
   18434:	ldr	r3, [sp, #80]	; 0x50
   18438:	cmp	r3, #0
   1843c:	beq	1954c <__assert_fail@plt+0x827c>
   18440:	ldr	r3, [sp, #32]
   18444:	cmp	r3, #0
   18448:	bne	195c0 <__assert_fail@plt+0x82f0>
   1844c:	ldr	r3, [sp, #84]	; 0x54
   18450:	adds	r3, r3, #0
   18454:	movne	r3, #1
   18458:	cmp	sl, #0
   1845c:	movne	r3, #0
   18460:	cmp	r3, #0
   18464:	ldreq	r2, [sp, #80]	; 0x50
   18468:	beq	1954c <__assert_fail@plt+0x827c>
   1846c:	ldr	r2, [sp, #84]	; 0x54
   18470:	mov	sl, r2
   18474:	mov	r0, #0
   18478:	mov	r4, #1
   1847c:	mov	r1, #39	; 0x27
   18480:	str	r0, [sp, #44]	; 0x2c
   18484:	strb	r1, [fp]
   18488:	str	r0, [sp, #48]	; 0x30
   1848c:	str	r4, [sp, #52]	; 0x34
   18490:	str	r4, [sp, #56]	; 0x38
   18494:	str	r4, [sp, #64]	; 0x40
   18498:	str	r0, [sp, #68]	; 0x44
   1849c:	str	r3, [sp, #80]	; 0x50
   184a0:	str	r2, [sp, #84]	; 0x54
   184a4:	str	r0, [sp, #88]	; 0x58
   184a8:	b	180e8 <__assert_fail@plt+0x6e18>
   184ac:	mov	r5, #98	; 0x62
   184b0:	b	1835c <__assert_fail@plt+0x708c>
   184b4:	mov	r5, #97	; 0x61
   184b8:	b	1835c <__assert_fail@plt+0x708c>
   184bc:	ldr	r3, [sp, #48]	; 0x30
   184c0:	str	r3, [sp, #40]	; 0x28
   184c4:	mov	r3, #116	; 0x74
   184c8:	ldr	r2, [sp, #68]	; 0x44
   184cc:	cmp	r2, #0
   184d0:	bne	186cc <__assert_fail@plt+0x73fc>
   184d4:	ldr	r2, [sp, #60]	; 0x3c
   184d8:	cmp	r2, #0
   184dc:	bne	18628 <__assert_fail@plt+0x7358>
   184e0:	ldr	r3, [sp, #44]	; 0x2c
   184e4:	mov	r6, #0
   184e8:	cmp	r3, #0
   184ec:	beq	18698 <__assert_fail@plt+0x73c8>
   184f0:	mov	r3, fp
   184f4:	ldr	r2, [sp, #184]	; 0xb8
   184f8:	cmp	r2, #0
   184fc:	beq	1851c <__assert_fail@plt+0x724c>
   18500:	ubfx	r1, r5, #5, #8
   18504:	mov	r0, r2
   18508:	and	r2, r5, #31
   1850c:	ldr	r1, [r0, r1, lsl #2]
   18510:	lsr	r2, r1, r2
   18514:	tst	r2, #1
   18518:	bne	18360 <__assert_fail@plt+0x7090>
   1851c:	ldr	r2, [sp, #40]	; 0x28
   18520:	cmp	r2, #0
   18524:	addeq	r7, r7, #1
   18528:	bne	18360 <__assert_fail@plt+0x7090>
   1852c:	cmp	r3, #0
   18530:	beq	183c4 <__assert_fail@plt+0x70f4>
   18534:	cmp	sl, r4
   18538:	mov	fp, #0
   1853c:	movhi	r3, #39	; 0x27
   18540:	strbhi	r3, [r9, r4]
   18544:	add	r3, r4, #1
   18548:	add	r4, r4, #2
   1854c:	cmp	sl, r3
   18550:	movhi	r2, #39	; 0x27
   18554:	strbhi	r2, [r9, r3]
   18558:	b	183c4 <__assert_fail@plt+0x70f4>
   1855c:	ldr	r3, [sp, #48]	; 0x30
   18560:	str	r3, [sp, #40]	; 0x28
   18564:	eor	r3, fp, #1
   18568:	ldr	r2, [sp, #52]	; 0x34
   1856c:	ands	r2, r2, r3
   18570:	beq	19230 <__assert_fail@plt+0x7f60>
   18574:	cmp	sl, r4
   18578:	movhi	r3, #39	; 0x27
   1857c:	strbhi	r3, [r9, r4]
   18580:	add	r3, r4, #1
   18584:	cmp	sl, r3
   18588:	movhi	r1, #36	; 0x24
   1858c:	strbhi	r1, [r9, r3]
   18590:	add	r3, r4, #2
   18594:	cmp	sl, r3
   18598:	movhi	r1, #39	; 0x27
   1859c:	strbhi	r1, [r9, r3]
   185a0:	add	r3, r4, #3
   185a4:	cmp	sl, r3
   185a8:	bls	1927c <__assert_fail@plt+0x7fac>
   185ac:	mov	r4, r3
   185b0:	mov	r3, #92	; 0x5c
   185b4:	mov	fp, r2
   185b8:	mov	r2, r4
   185bc:	strb	r3, [r9, r4]
   185c0:	ldr	r3, [sp, #176]	; 0xb0
   185c4:	add	r4, r4, #1
   185c8:	cmp	r3, #2
   185cc:	beq	192e4 <__assert_fail@plt+0x8014>
   185d0:	add	r3, r7, #1
   185d4:	cmp	r3, r8
   185d8:	bcs	185f0 <__assert_fail@plt+0x7320>
   185dc:	ldr	r1, [sp, #28]
   185e0:	ldrb	r3, [r1, r3]
   185e4:	sub	r3, r3, #48	; 0x30
   185e8:	cmp	r3, #9
   185ec:	bls	192f4 <__assert_fail@plt+0x8024>
   185f0:	mov	r3, #0
   185f4:	mov	r5, #48	; 0x30
   185f8:	ldr	r6, [sp, #64]	; 0x40
   185fc:	cmp	r6, #0
   18600:	beq	184f4 <__assert_fail@plt+0x7224>
   18604:	mov	r6, #0
   18608:	b	1851c <__assert_fail@plt+0x724c>
   1860c:	ldr	r3, [sp, #48]	; 0x30
   18610:	str	r3, [sp, #40]	; 0x28
   18614:	ldr	r2, [sp, #60]	; 0x3c
   18618:	mov	r5, #13
   1861c:	mov	r3, #114	; 0x72
   18620:	cmp	r2, #0
   18624:	beq	184e0 <__assert_fail@plt+0x7210>
   18628:	mov	r5, r3
   1862c:	b	1835c <__assert_fail@plt+0x708c>
   18630:	ldr	r3, [sp, #48]	; 0x30
   18634:	str	r3, [sp, #40]	; 0x28
   18638:	mov	r3, #118	; 0x76
   1863c:	b	184d4 <__assert_fail@plt+0x7204>
   18640:	ldr	r3, [sp, #48]	; 0x30
   18644:	str	r3, [sp, #40]	; 0x28
   18648:	mov	r5, #10
   1864c:	mov	r3, #110	; 0x6e
   18650:	b	184d4 <__assert_fail@plt+0x7204>
   18654:	ldr	r3, [sp, #48]	; 0x30
   18658:	cmn	r8, #1
   1865c:	str	r3, [sp, #40]	; 0x28
   18660:	beq	18aa8 <__assert_fail@plt+0x77d8>
   18664:	subs	r3, r8, #1
   18668:	movne	r3, #1
   1866c:	cmp	r3, #0
   18670:	bne	1867c <__assert_fail@plt+0x73ac>
   18674:	cmp	r7, #0
   18678:	beq	186c0 <__assert_fail@plt+0x73f0>
   1867c:	mov	r6, #0
   18680:	ldr	r3, [sp, #64]	; 0x40
   18684:	cmp	r3, #0
   18688:	beq	184f0 <__assert_fail@plt+0x7220>
   1868c:	ldr	r3, [sp, #44]	; 0x2c
   18690:	cmp	r3, #0
   18694:	bne	184f0 <__assert_fail@plt+0x7220>
   18698:	mov	r3, fp
   1869c:	b	1851c <__assert_fail@plt+0x724c>
   186a0:	ldr	r3, [sp, #48]	; 0x30
   186a4:	str	r3, [sp, #40]	; 0x28
   186a8:	b	18674 <__assert_fail@plt+0x73a4>
   186ac:	ldr	r3, [sp, #48]	; 0x30
   186b0:	str	r3, [sp, #40]	; 0x28
   186b4:	b	1867c <__assert_fail@plt+0x73ac>
   186b8:	ldr	r6, [sp, #48]	; 0x30
   186bc:	str	r6, [sp, #40]	; 0x28
   186c0:	ldr	r3, [sp, #68]	; 0x44
   186c4:	cmp	r3, #0
   186c8:	beq	18680 <__assert_fail@plt+0x73b0>
   186cc:	mov	r3, #2
   186d0:	mov	fp, r9
   186d4:	str	r3, [sp, #176]	; 0xb0
   186d8:	ldr	r3, [sp, #60]	; 0x3c
   186dc:	cmp	r3, #0
   186e0:	ldr	r3, [sp, #176]	; 0xb0
   186e4:	movne	r3, #4
   186e8:	str	r3, [sp, #176]	; 0xb0
   186ec:	mov	lr, #0
   186f0:	mov	r0, fp
   186f4:	ldr	r2, [sp, #28]
   186f8:	ldr	r3, [sp, #180]	; 0xb4
   186fc:	ldr	r1, [sp, #188]	; 0xbc
   18700:	bic	ip, r3, #2
   18704:	ldr	r3, [sp, #176]	; 0xb0
   18708:	stm	sp, {r3, ip, lr}
   1870c:	mov	r3, r8
   18710:	ldr	ip, [sp, #192]	; 0xc0
   18714:	str	r1, [sp, #12]
   18718:	mov	r1, sl
   1871c:	str	ip, [sp, #16]
   18720:	bl	17cac <__assert_fail@plt+0x69dc>
   18724:	mov	r4, r0
   18728:	mov	r0, r4
   1872c:	add	sp, sp, #140	; 0x8c
   18730:	ldrd	r4, [sp]
   18734:	ldrd	r6, [sp, #8]
   18738:	ldrd	r8, [sp, #16]
   1873c:	ldrd	sl, [sp, #24]
   18740:	add	sp, sp, #32
   18744:	pop	{pc}		; (ldr pc, [sp], #4)
   18748:	ldr	r3, [sp, #48]	; 0x30
   1874c:	str	r3, [sp, #40]	; 0x28
   18750:	ldr	r3, [sp, #176]	; 0xb0
   18754:	cmp	r3, #2
   18758:	beq	18ad0 <__assert_fail@plt+0x7800>
   1875c:	ldr	r3, [sp, #88]	; 0x58
   18760:	cmp	r3, #0
   18764:	moveq	r5, #92	; 0x5c
   18768:	moveq	r3, r5
   1876c:	beq	184d4 <__assert_fail@plt+0x7204>
   18770:	add	r7, r7, #1
   18774:	mov	r3, fp
   18778:	mov	r6, #0
   1877c:	mov	r5, #92	; 0x5c
   18780:	b	1852c <__assert_fail@plt+0x725c>
   18784:	ldr	r3, [sp, #64]	; 0x40
   18788:	cmp	r3, #0
   1878c:	bne	19604 <__assert_fail@plt+0x8334>
   18790:	ldr	r2, [sp, #48]	; 0x30
   18794:	mov	r3, fp
   18798:	mov	r6, r2
   1879c:	str	r2, [sp, #40]	; 0x28
   187a0:	b	184f4 <__assert_fail@plt+0x7224>
   187a4:	ldr	r3, [sp, #176]	; 0xb0
   187a8:	cmp	r3, #2
   187ac:	beq	19540 <__assert_fail@plt+0x8270>
   187b0:	cmp	r3, #5
   187b4:	ldr	r3, [sp, #48]	; 0x30
   187b8:	str	r3, [sp, #40]	; 0x28
   187bc:	bne	187e8 <__assert_fail@plt+0x7518>
   187c0:	ldr	r3, [sp, #96]	; 0x60
   187c4:	cmp	r3, #0
   187c8:	beq	19244 <__assert_fail@plt+0x7f74>
   187cc:	add	r3, r7, #2
   187d0:	cmp	r3, r8
   187d4:	bcs	187e8 <__assert_fail@plt+0x7518>
   187d8:	ldr	r2, [sp, #36]	; 0x24
   187dc:	ldrb	r5, [r2, #1]
   187e0:	cmp	r5, #63	; 0x3f
   187e4:	beq	1932c <__assert_fail@plt+0x805c>
   187e8:	mov	r6, #0
   187ec:	mov	r5, #63	; 0x3f
   187f0:	b	18680 <__assert_fail@plt+0x73b0>
   187f4:	ldr	r3, [sp, #176]	; 0xb0
   187f8:	cmp	r3, #2
   187fc:	ldr	r3, [sp, #48]	; 0x30
   18800:	beq	18fe8 <__assert_fail@plt+0x7d18>
   18804:	mov	r5, #39	; 0x27
   18808:	str	r3, [sp, #40]	; 0x28
   1880c:	str	r6, [sp, #80]	; 0x50
   18810:	b	18680 <__assert_fail@plt+0x73b0>
   18814:	ldr	r3, [sp, #180]	; 0xb4
   18818:	cmp	r4, #0
   1881c:	and	r3, r3, #1
   18820:	str	r3, [sp, #92]	; 0x5c
   18824:	ldr	r3, [sp, #180]	; 0xb4
   18828:	and	r3, r3, #4
   1882c:	str	r3, [sp, #96]	; 0x60
   18830:	bne	19650 <__assert_fail@plt+0x8380>
   18834:	str	r4, [sp, #60]	; 0x3c
   18838:	cmp	sl, #0
   1883c:	bne	19634 <__assert_fail@plt+0x8364>
   18840:	mov	r3, #1
   18844:	movw	r2, #57620	; 0xe114
   18848:	movt	r2, #1
   1884c:	mov	r4, r3
   18850:	mov	r3, #2
   18854:	mov	r9, sl
   18858:	str	r4, [sp, #32]
   1885c:	str	sl, [sp, #44]	; 0x2c
   18860:	str	sl, [sp, #48]	; 0x30
   18864:	str	r4, [sp, #52]	; 0x34
   18868:	str	r4, [sp, #56]	; 0x38
   1886c:	str	r4, [sp, #64]	; 0x40
   18870:	str	sl, [sp, #68]	; 0x44
   18874:	str	r2, [sp, #72]	; 0x48
   18878:	str	sl, [sp, #80]	; 0x50
   1887c:	str	sl, [sp, #84]	; 0x54
   18880:	str	sl, [sp, #88]	; 0x58
   18884:	str	r3, [sp, #176]	; 0xb0
   18888:	b	17dd0 <__assert_fail@plt+0x6b00>
   1888c:	ldrb	r5, [r0, r7]
   18890:	cmp	r5, #126	; 0x7e
   18894:	ldrls	pc, [pc, r5, lsl #2]
   18898:	b	18bfc <__assert_fail@plt+0x792c>
   1889c:	andeq	r8, r1, r8, asr #23
   188a0:	strdeq	r8, [r1], -ip
   188a4:	strdeq	r8, [r1], -ip
   188a8:	strdeq	r8, [r1], -ip
   188ac:	strdeq	r8, [r1], -ip
   188b0:	strdeq	r8, [r1], -ip
   188b4:	strdeq	r8, [r1], -ip
   188b8:			; <UNDEFINED> instruction: 0x00018bb8
   188bc:	andeq	r8, r1, r8, lsr #23
   188c0:	andeq	r8, r1, ip, lsr #22
   188c4:	muleq	r1, r8, fp
   188c8:	andeq	r8, r1, ip, lsl #22
   188cc:	andeq	r8, r1, ip, ror #23
   188d0:	andeq	r8, r1, r8, ror fp
   188d4:	strdeq	r8, [r1], -ip
   188d8:	strdeq	r8, [r1], -ip
   188dc:	strdeq	r8, [r1], -ip
   188e0:	strdeq	r8, [r1], -ip
   188e4:	strdeq	r8, [r1], -ip
   188e8:	strdeq	r8, [r1], -ip
   188ec:	strdeq	r8, [r1], -ip
   188f0:	strdeq	r8, [r1], -ip
   188f4:	strdeq	r8, [r1], -ip
   188f8:	strdeq	r8, [r1], -ip
   188fc:	strdeq	r8, [r1], -ip
   18900:	strdeq	r8, [r1], -ip
   18904:	strdeq	r8, [r1], -ip
   18908:	strdeq	r8, [r1], -ip
   1890c:	strdeq	r8, [r1], -ip
   18910:	strdeq	r8, [r1], -ip
   18914:	strdeq	r8, [r1], -ip
   18918:	strdeq	r8, [r1], -ip
   1891c:	andeq	r8, r1, r0, lsr #22
   18920:	andeq	r8, r1, r8, lsl #23
   18924:	andeq	r8, r1, r8, lsl #23
   18928:	andeq	r8, r1, r0, lsl #22
   1892c:	andeq	r8, r1, r8, lsl #23
   18930:	strdeq	r8, [r1], -r4
   18934:	andeq	r8, r1, r8, lsl #23
   18938:	andeq	r8, r1, r4, ror #22
   1893c:	andeq	r8, r1, r8, lsl #23
   18940:	andeq	r8, r1, r8, lsl #23
   18944:	andeq	r8, r1, r8, lsl #23
   18948:	strdeq	r8, [r1], -r4
   1894c:	strdeq	r8, [r1], -r4
   18950:	strdeq	r8, [r1], -r4
   18954:	strdeq	r8, [r1], -r4
   18958:	strdeq	r8, [r1], -r4
   1895c:	strdeq	r8, [r1], -r4
   18960:	strdeq	r8, [r1], -r4
   18964:	strdeq	r8, [r1], -r4
   18968:	strdeq	r8, [r1], -r4
   1896c:	strdeq	r8, [r1], -r4
   18970:	strdeq	r8, [r1], -r4
   18974:	strdeq	r8, [r1], -r4
   18978:	strdeq	r8, [r1], -r4
   1897c:	strdeq	r8, [r1], -r4
   18980:	strdeq	r8, [r1], -r4
   18984:	strdeq	r8, [r1], -r4
   18988:	andeq	r8, r1, r8, lsl #23
   1898c:	andeq	r8, r1, r8, lsl #23
   18990:	andeq	r8, r1, r8, lsl #23
   18994:	andeq	r8, r1, r8, lsl #23
   18998:	andeq	r8, r1, ip, lsr fp
   1899c:	strdeq	r8, [r1], -ip
   189a0:	strdeq	r8, [r1], -r4
   189a4:	strdeq	r8, [r1], -r4
   189a8:	strdeq	r8, [r1], -r4
   189ac:	strdeq	r8, [r1], -r4
   189b0:	strdeq	r8, [r1], -r4
   189b4:	strdeq	r8, [r1], -r4
   189b8:	strdeq	r8, [r1], -r4
   189bc:	strdeq	r8, [r1], -r4
   189c0:	strdeq	r8, [r1], -r4
   189c4:	strdeq	r8, [r1], -r4
   189c8:	strdeq	r8, [r1], -r4
   189cc:	strdeq	r8, [r1], -r4
   189d0:	strdeq	r8, [r1], -r4
   189d4:	strdeq	r8, [r1], -r4
   189d8:	strdeq	r8, [r1], -r4
   189dc:	strdeq	r8, [r1], -r4
   189e0:	strdeq	r8, [r1], -r4
   189e4:	strdeq	r8, [r1], -r4
   189e8:	strdeq	r8, [r1], -r4
   189ec:	strdeq	r8, [r1], -r4
   189f0:	strdeq	r8, [r1], -r4
   189f4:	strdeq	r8, [r1], -r4
   189f8:	strdeq	r8, [r1], -r4
   189fc:	strdeq	r8, [r1], -r4
   18a00:	strdeq	r8, [r1], -r4
   18a04:	strdeq	r8, [r1], -r4
   18a08:	andeq	r8, r1, r8, lsl #23
   18a0c:			; <UNDEFINED> instruction: 0x00018abc
   18a10:	strdeq	r8, [r1], -r4
   18a14:	andeq	r8, r1, r8, lsl #23
   18a18:	strdeq	r8, [r1], -r4
   18a1c:	andeq	r8, r1, r8, lsl #23
   18a20:	strdeq	r8, [r1], -r4
   18a24:	strdeq	r8, [r1], -r4
   18a28:	strdeq	r8, [r1], -r4
   18a2c:	strdeq	r8, [r1], -r4
   18a30:	strdeq	r8, [r1], -r4
   18a34:	strdeq	r8, [r1], -r4
   18a38:	strdeq	r8, [r1], -r4
   18a3c:	strdeq	r8, [r1], -r4
   18a40:	strdeq	r8, [r1], -r4
   18a44:	strdeq	r8, [r1], -r4
   18a48:	strdeq	r8, [r1], -r4
   18a4c:	strdeq	r8, [r1], -r4
   18a50:	strdeq	r8, [r1], -r4
   18a54:	strdeq	r8, [r1], -r4
   18a58:	strdeq	r8, [r1], -r4
   18a5c:	strdeq	r8, [r1], -r4
   18a60:	strdeq	r8, [r1], -r4
   18a64:	strdeq	r8, [r1], -r4
   18a68:	strdeq	r8, [r1], -r4
   18a6c:	strdeq	r8, [r1], -r4
   18a70:	strdeq	r8, [r1], -r4
   18a74:	strdeq	r8, [r1], -r4
   18a78:	strdeq	r8, [r1], -r4
   18a7c:	strdeq	r8, [r1], -r4
   18a80:	strdeq	r8, [r1], -r4
   18a84:	strdeq	r8, [r1], -r4
   18a88:	muleq	r1, r8, sl
   18a8c:	andeq	r8, r1, r8, lsl #23
   18a90:	muleq	r1, r8, sl
   18a94:	andeq	r8, r1, r0, lsl #22
   18a98:	mov	r3, #0
   18a9c:	cmn	r8, #1
   18aa0:	str	r3, [sp, #40]	; 0x28
   18aa4:	bne	18664 <__assert_fail@plt+0x7394>
   18aa8:	ldr	r3, [sp, #28]
   18aac:	ldrb	r3, [r3, #1]
   18ab0:	adds	r3, r3, #0
   18ab4:	movne	r3, #1
   18ab8:	b	1866c <__assert_fail@plt+0x739c>
   18abc:	mov	r3, #0
   18ac0:	str	r3, [sp, #40]	; 0x28
   18ac4:	ldr	r3, [sp, #176]	; 0xb0
   18ac8:	cmp	r3, #2
   18acc:	bne	1875c <__assert_fail@plt+0x748c>
   18ad0:	ldr	r3, [sp, #44]	; 0x2c
   18ad4:	cmp	r3, #0
   18ad8:	bne	19418 <__assert_fail@plt+0x8148>
   18adc:	mov	r6, r3
   18ae0:	add	r7, r7, #1
   18ae4:	mov	r3, fp
   18ae8:	mov	r5, #92	; 0x5c
   18aec:	b	1852c <__assert_fail@plt+0x725c>
   18af0:	ldr	r6, [sp, #48]	; 0x30
   18af4:	mov	r3, #0
   18af8:	str	r3, [sp, #40]	; 0x28
   18afc:	b	18680 <__assert_fail@plt+0x73b0>
   18b00:	mov	r3, #0
   18b04:	str	r3, [sp, #40]	; 0x28
   18b08:	b	18674 <__assert_fail@plt+0x73a4>
   18b0c:	mov	r3, #0
   18b10:	str	r3, [sp, #40]	; 0x28
   18b14:	mov	r3, #118	; 0x76
   18b18:	b	184d4 <__assert_fail@plt+0x7204>
   18b1c:	ldr	r6, [sp, #48]	; 0x30
   18b20:	mov	r3, #0
   18b24:	str	r3, [sp, #40]	; 0x28
   18b28:	b	186c0 <__assert_fail@plt+0x73f0>
   18b2c:	mov	r3, #0
   18b30:	str	r3, [sp, #40]	; 0x28
   18b34:	mov	r3, #116	; 0x74
   18b38:	b	184c8 <__assert_fail@plt+0x71f8>
   18b3c:	ldr	r3, [sp, #176]	; 0xb0
   18b40:	cmp	r3, #2
   18b44:	beq	19054 <__assert_fail@plt+0x7d84>
   18b48:	cmp	r3, #5
   18b4c:	mov	r3, #0
   18b50:	str	r3, [sp, #40]	; 0x28
   18b54:	beq	187c0 <__assert_fail@plt+0x74f0>
   18b58:	mov	r6, #0
   18b5c:	mov	r5, #63	; 0x3f
   18b60:	b	18680 <__assert_fail@plt+0x73b0>
   18b64:	ldr	r3, [sp, #176]	; 0xb0
   18b68:	cmp	r3, #2
   18b6c:	beq	18fdc <__assert_fail@plt+0x7d0c>
   18b70:	mov	r3, #0
   18b74:	b	18804 <__assert_fail@plt+0x7534>
   18b78:	mov	r3, #0
   18b7c:	str	r3, [sp, #40]	; 0x28
   18b80:	mov	r3, #114	; 0x72
   18b84:	b	184c8 <__assert_fail@plt+0x71f8>
   18b88:	mov	r3, #0
   18b8c:	mov	r6, r3
   18b90:	str	r3, [sp, #40]	; 0x28
   18b94:	b	186c0 <__assert_fail@plt+0x73f0>
   18b98:	mov	r3, #0
   18b9c:	str	r3, [sp, #40]	; 0x28
   18ba0:	mov	r3, #110	; 0x6e
   18ba4:	b	184c8 <__assert_fail@plt+0x71f8>
   18ba8:	mov	r3, #0
   18bac:	str	r3, [sp, #40]	; 0x28
   18bb0:	mov	r3, #98	; 0x62
   18bb4:	b	184d4 <__assert_fail@plt+0x7204>
   18bb8:	mov	r3, #0
   18bbc:	str	r3, [sp, #40]	; 0x28
   18bc0:	mov	r3, #97	; 0x61
   18bc4:	b	184d4 <__assert_fail@plt+0x7204>
   18bc8:	ldr	r3, [sp, #60]	; 0x3c
   18bcc:	cmp	r3, #0
   18bd0:	bne	18fc0 <__assert_fail@plt+0x7cf0>
   18bd4:	ldr	r3, [sp, #92]	; 0x5c
   18bd8:	cmp	r3, #0
   18bdc:	addne	r7, r7, #1
   18be0:	bne	17de0 <__assert_fail@plt+0x6b10>
   18be4:	str	r3, [sp, #40]	; 0x28
   18be8:	b	184e0 <__assert_fail@plt+0x7210>
   18bec:	mov	r3, #0
   18bf0:	str	r3, [sp, #40]	; 0x28
   18bf4:	mov	r3, #102	; 0x66
   18bf8:	b	184d4 <__assert_fail@plt+0x7204>
   18bfc:	mov	r3, #0
   18c00:	str	r3, [sp, #40]	; 0x28
   18c04:	ldr	r3, [sp, #76]	; 0x4c
   18c08:	cmp	r3, #1
   18c0c:	bne	19074 <__assert_fail@plt+0x7da4>
   18c10:	bl	11150 <__ctype_b_loc@plt>
   18c14:	ldr	r2, [r0]
   18c18:	sxth	r3, r5
   18c1c:	lsl	r3, r3, #1
   18c20:	ldr	r1, [sp, #76]	; 0x4c
   18c24:	ldrh	r3, [r2, r3]
   18c28:	mov	r0, r1
   18c2c:	and	r3, r3, #16384	; 0x4000
   18c30:	cmp	r3, #0
   18c34:	ldr	r3, [sp, #60]	; 0x3c
   18c38:	movne	r6, #1
   18c3c:	moveq	r6, #0
   18c40:	movne	r2, #0
   18c44:	andeq	r2, r3, #1
   18c48:	cmp	r2, #0
   18c4c:	beq	18680 <__assert_fail@plt+0x73b0>
   18c50:	ldr	r2, [sp, #60]	; 0x3c
   18c54:	mov	r6, #0
   18c58:	add	r1, r0, r7
   18c5c:	mov	ip, #39	; 0x27
   18c60:	str	r6, [sp, #100]	; 0x64
   18c64:	mov	r0, #0
   18c68:	ldr	lr, [sp, #36]	; 0x24
   18c6c:	str	r8, [sp, #36]	; 0x24
   18c70:	ldr	r6, [sp, #40]	; 0x28
   18c74:	ldr	r8, [sp, #44]	; 0x2c
   18c78:	b	18d28 <__assert_fail@plt+0x7a58>
   18c7c:	cmp	r8, #0
   18c80:	bne	1925c <__assert_fail@plt+0x7f8c>
   18c84:	ldr	r0, [sp, #52]	; 0x34
   18c88:	eor	r3, fp, #1
   18c8c:	ands	r3, r0, r3
   18c90:	beq	18cc0 <__assert_fail@plt+0x79f0>
   18c94:	cmp	sl, r4
   18c98:	add	r0, r4, #1
   18c9c:	strbhi	ip, [r9, r4]
   18ca0:	cmp	sl, r0
   18ca4:	movhi	fp, #36	; 0x24
   18ca8:	strbhi	fp, [r9, r0]
   18cac:	add	r0, r4, #2
   18cb0:	mov	fp, r3
   18cb4:	cmp	sl, r0
   18cb8:	add	r4, r4, #3
   18cbc:	strbhi	ip, [r9, r0]
   18cc0:	cmp	sl, r4
   18cc4:	movhi	r3, #92	; 0x5c
   18cc8:	strbhi	r3, [r9, r4]
   18ccc:	add	r3, r4, #1
   18cd0:	cmp	sl, r3
   18cd4:	bls	18ce4 <__assert_fail@plt+0x7a14>
   18cd8:	lsr	r0, r5, #6
   18cdc:	add	r0, r0, #48	; 0x30
   18ce0:	strb	r0, [r9, r3]
   18ce4:	add	r3, r4, #2
   18ce8:	cmp	sl, r3
   18cec:	bls	18cfc <__assert_fail@plt+0x7a2c>
   18cf0:	ubfx	r0, r5, #3, #3
   18cf4:	add	r0, r0, #48	; 0x30
   18cf8:	strb	r0, [r9, r3]
   18cfc:	add	r7, r7, #1
   18d00:	and	r5, r5, #7
   18d04:	cmp	r1, r7
   18d08:	add	r5, r5, #48	; 0x30
   18d0c:	add	r4, r4, #3
   18d10:	bls	19270 <__assert_fail@plt+0x7fa0>
   18d14:	mov	r0, r2
   18d18:	cmp	sl, r4
   18d1c:	strbhi	r5, [r9, r4]
   18d20:	add	r4, r4, #1
   18d24:	ldrb	r5, [lr, #1]!
   18d28:	cmp	r2, #0
   18d2c:	bne	18c7c <__assert_fail@plt+0x79ac>
   18d30:	eor	r3, r0, #1
   18d34:	cmp	r6, #0
   18d38:	and	r3, r3, fp
   18d3c:	uxtb	r3, r3
   18d40:	beq	18d54 <__assert_fail@plt+0x7a84>
   18d44:	cmp	sl, r4
   18d48:	movhi	r6, #92	; 0x5c
   18d4c:	strbhi	r6, [r9, r4]
   18d50:	add	r4, r4, #1
   18d54:	add	r7, r7, #1
   18d58:	cmp	r7, r1
   18d5c:	bcs	19250 <__assert_fail@plt+0x7f80>
   18d60:	cmp	r3, #0
   18d64:	beq	19294 <__assert_fail@plt+0x7fc4>
   18d68:	cmp	sl, r4
   18d6c:	add	r3, r4, #1
   18d70:	mov	r6, #0
   18d74:	strbhi	ip, [r9, r4]
   18d78:	cmp	sl, r3
   18d7c:	add	r4, r4, #2
   18d80:	mov	fp, r6
   18d84:	strbhi	ip, [r9, r3]
   18d88:	b	18d18 <__assert_fail@plt+0x7a48>
   18d8c:	ldr	r3, [sp, #36]	; 0x24
   18d90:	ldrb	r5, [r3]
   18d94:	cmp	r5, #126	; 0x7e
   18d98:	ldrls	pc, [pc, r5, lsl #2]
   18d9c:	b	18bfc <__assert_fail@plt+0x792c>
   18da0:	andeq	r8, r1, r0, asr #31
   18da4:	strdeq	r8, [r1], -ip
   18da8:	strdeq	r8, [r1], -ip
   18dac:	strdeq	r8, [r1], -ip
   18db0:	strdeq	r8, [r1], -ip
   18db4:	strdeq	r8, [r1], -ip
   18db8:	strdeq	r8, [r1], -ip
   18dbc:			; <UNDEFINED> instruction: 0x000184b4
   18dc0:	andeq	r8, r1, ip, lsr #9
   18dc4:	andeq	r8, r1, ip, lsr #22
   18dc8:			; <UNDEFINED> instruction: 0x00018fb4
   18dcc:	andeq	r8, r1, ip, lsl #22
   18dd0:	andeq	r8, r1, r8, asr r3
   18dd4:	andeq	r8, r1, r8, lsr #31
   18dd8:	strdeq	r8, [r1], -ip
   18ddc:	strdeq	r8, [r1], -ip
   18de0:	strdeq	r8, [r1], -ip
   18de4:	strdeq	r8, [r1], -ip
   18de8:	strdeq	r8, [r1], -ip
   18dec:	strdeq	r8, [r1], -ip
   18df0:	strdeq	r8, [r1], -ip
   18df4:	strdeq	r8, [r1], -ip
   18df8:	strdeq	r8, [r1], -ip
   18dfc:	strdeq	r8, [r1], -ip
   18e00:	strdeq	r8, [r1], -ip
   18e04:	strdeq	r8, [r1], -ip
   18e08:	strdeq	r8, [r1], -ip
   18e0c:	strdeq	r8, [r1], -ip
   18e10:	strdeq	r8, [r1], -ip
   18e14:	strdeq	r8, [r1], -ip
   18e18:	strdeq	r8, [r1], -ip
   18e1c:	strdeq	r8, [r1], -ip
   18e20:	andeq	r8, r1, ip, lsl fp
   18e24:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e28:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e2c:	andeq	r8, r1, r0, lsl #22
   18e30:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e34:	strdeq	r8, [r1], -r0
   18e38:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e3c:	andeq	r8, r1, r4, ror #22
   18e40:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e44:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e48:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e4c:	strdeq	r8, [r1], -r0
   18e50:	strdeq	r8, [r1], -r0
   18e54:	strdeq	r8, [r1], -r0
   18e58:	strdeq	r8, [r1], -r0
   18e5c:	strdeq	r8, [r1], -r0
   18e60:	strdeq	r8, [r1], -r0
   18e64:	strdeq	r8, [r1], -r0
   18e68:	strdeq	r8, [r1], -r0
   18e6c:	strdeq	r8, [r1], -r0
   18e70:	strdeq	r8, [r1], -r0
   18e74:	strdeq	r8, [r1], -r0
   18e78:	strdeq	r8, [r1], -r0
   18e7c:	strdeq	r8, [r1], -r0
   18e80:	strdeq	r8, [r1], -r0
   18e84:	strdeq	r8, [r1], -r0
   18e88:	strdeq	r8, [r1], -r0
   18e8c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e90:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e94:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e98:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e9c:	andeq	r8, r1, ip, lsr fp
   18ea0:	strdeq	r8, [r1], -ip
   18ea4:	strdeq	r8, [r1], -r0
   18ea8:	strdeq	r8, [r1], -r0
   18eac:	strdeq	r8, [r1], -r0
   18eb0:	strdeq	r8, [r1], -r0
   18eb4:	strdeq	r8, [r1], -r0
   18eb8:	strdeq	r8, [r1], -r0
   18ebc:	strdeq	r8, [r1], -r0
   18ec0:	strdeq	r8, [r1], -r0
   18ec4:	strdeq	r8, [r1], -r0
   18ec8:	strdeq	r8, [r1], -r0
   18ecc:	strdeq	r8, [r1], -r0
   18ed0:	strdeq	r8, [r1], -r0
   18ed4:	strdeq	r8, [r1], -r0
   18ed8:	strdeq	r8, [r1], -r0
   18edc:	strdeq	r8, [r1], -r0
   18ee0:	strdeq	r8, [r1], -r0
   18ee4:	strdeq	r8, [r1], -r0
   18ee8:	strdeq	r8, [r1], -r0
   18eec:	strdeq	r8, [r1], -r0
   18ef0:	strdeq	r8, [r1], -r0
   18ef4:	strdeq	r8, [r1], -r0
   18ef8:	strdeq	r8, [r1], -r0
   18efc:	strdeq	r8, [r1], -r0
   18f00:	strdeq	r8, [r1], -r0
   18f04:	strdeq	r8, [r1], -r0
   18f08:	strdeq	r8, [r1], -r0
   18f0c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f10:			; <UNDEFINED> instruction: 0x00018abc
   18f14:	strdeq	r8, [r1], -r0
   18f18:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f1c:	strdeq	r8, [r1], -r0
   18f20:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f24:	strdeq	r8, [r1], -r0
   18f28:	strdeq	r8, [r1], -r0
   18f2c:	strdeq	r8, [r1], -r0
   18f30:	strdeq	r8, [r1], -r0
   18f34:	strdeq	r8, [r1], -r0
   18f38:	strdeq	r8, [r1], -r0
   18f3c:	strdeq	r8, [r1], -r0
   18f40:	strdeq	r8, [r1], -r0
   18f44:	strdeq	r8, [r1], -r0
   18f48:	strdeq	r8, [r1], -r0
   18f4c:	strdeq	r8, [r1], -r0
   18f50:	strdeq	r8, [r1], -r0
   18f54:	strdeq	r8, [r1], -r0
   18f58:	strdeq	r8, [r1], -r0
   18f5c:	strdeq	r8, [r1], -r0
   18f60:	strdeq	r8, [r1], -r0
   18f64:	strdeq	r8, [r1], -r0
   18f68:	strdeq	r8, [r1], -r0
   18f6c:	strdeq	r8, [r1], -r0
   18f70:	strdeq	r8, [r1], -r0
   18f74:	strdeq	r8, [r1], -r0
   18f78:	strdeq	r8, [r1], -r0
   18f7c:	strdeq	r8, [r1], -r0
   18f80:	strdeq	r8, [r1], -r0
   18f84:	strdeq	r8, [r1], -r0
   18f88:	strdeq	r8, [r1], -r0
   18f8c:	muleq	r1, r8, sl
   18f90:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f94:	muleq	r1, r8, sl
   18f98:	andeq	r8, r1, r0, lsl #22
   18f9c:	mov	r3, #0
   18fa0:	str	r3, [sp, #40]	; 0x28
   18fa4:	b	1867c <__assert_fail@plt+0x73ac>
   18fa8:	mov	r3, #0
   18fac:	str	r3, [sp, #40]	; 0x28
   18fb0:	b	18614 <__assert_fail@plt+0x7344>
   18fb4:	mov	r3, #0
   18fb8:	str	r3, [sp, #40]	; 0x28
   18fbc:	b	18648 <__assert_fail@plt+0x7378>
   18fc0:	ldr	r3, [sp, #44]	; 0x2c
   18fc4:	cmp	r3, #0
   18fc8:	beq	18560 <__assert_fail@plt+0x7290>
   18fcc:	ldr	r3, [sp, #52]	; 0x34
   18fd0:	mov	fp, r9
   18fd4:	str	r3, [sp, #60]	; 0x3c
   18fd8:	b	186d8 <__assert_fail@plt+0x7408>
   18fdc:	ldr	r3, [sp, #44]	; 0x2c
   18fe0:	cmp	r3, #0
   18fe4:	bne	19418 <__assert_fail@plt+0x8148>
   18fe8:	str	r3, [sp, #40]	; 0x28
   18fec:	cmp	sl, #0
   18ff0:	ldr	r3, [sp, #84]	; 0x54
   18ff4:	clz	r3, r3
   18ff8:	lsr	r3, r3, #5
   18ffc:	moveq	r3, #0
   19000:	cmp	r3, #0
   19004:	strne	sl, [sp, #84]	; 0x54
   19008:	movne	sl, #0
   1900c:	bne	1903c <__assert_fail@plt+0x7d6c>
   19010:	cmp	sl, r4
   19014:	movhi	r3, #39	; 0x27
   19018:	strbhi	r3, [r9, r4]
   1901c:	add	r3, r4, #1
   19020:	cmp	sl, r3
   19024:	movhi	r2, #92	; 0x5c
   19028:	strbhi	r2, [r9, r3]
   1902c:	add	r3, r4, #2
   19030:	cmp	sl, r3
   19034:	movhi	r2, #39	; 0x27
   19038:	strbhi	r2, [r9, r3]
   1903c:	mov	r3, #0
   19040:	add	r4, r4, #3
   19044:	str	r6, [sp, #80]	; 0x50
   19048:	mov	fp, r3
   1904c:	mov	r5, #39	; 0x27
   19050:	b	1851c <__assert_fail@plt+0x724c>
   19054:	ldr	r3, [sp, #44]	; 0x2c
   19058:	cmp	r3, #0
   1905c:	bne	19418 <__assert_fail@plt+0x8148>
   19060:	mov	r6, #0
   19064:	mov	r5, #63	; 0x3f
   19068:	str	r3, [sp, #40]	; 0x28
   1906c:	mov	r3, fp
   19070:	b	1851c <__assert_fail@plt+0x724c>
   19074:	mov	r2, #0
   19078:	mov	r3, #0
   1907c:	cmn	r8, #1
   19080:	strd	r2, [sp, #128]	; 0x80
   19084:	bne	19094 <__assert_fail@plt+0x7dc4>
   19088:	ldr	r0, [sp, #28]
   1908c:	bl	11168 <strlen@plt>
   19090:	mov	r8, r0
   19094:	str	r9, [sp, #100]	; 0x64
   19098:	mov	r3, #0
   1909c:	strd	sl, [sp, #104]	; 0x68
   190a0:	ldr	sl, [sp, #28]
   190a4:	str	r5, [sp, #112]	; 0x70
   190a8:	mov	r5, r3
   190ac:	ldr	r9, [sp, #68]	; 0x44
   190b0:	str	r4, [sp, #116]	; 0x74
   190b4:	add	r4, r7, r5
   190b8:	add	r3, sp, #128	; 0x80
   190bc:	add	fp, sl, r4
   190c0:	sub	r2, r8, r4
   190c4:	mov	r1, fp
   190c8:	add	r0, sp, #124	; 0x7c
   190cc:	bl	1cab8 <__assert_fail@plt+0xb7e8>
   190d0:	subs	r1, r0, #0
   190d4:	beq	19114 <__assert_fail@plt+0x7e44>
   190d8:	cmn	r1, #1
   190dc:	beq	1946c <__assert_fail@plt+0x819c>
   190e0:	cmn	r1, #2
   190e4:	beq	1948c <__assert_fail@plt+0x81bc>
   190e8:	cmp	r9, #0
   190ec:	bne	19144 <__assert_fail@plt+0x7e74>
   190f0:	ldr	r0, [sp, #124]	; 0x7c
   190f4:	add	r5, r5, r1
   190f8:	bl	1109c <iswprint@plt>
   190fc:	cmp	r0, #0
   19100:	add	r0, sp, #128	; 0x80
   19104:	moveq	r6, #0
   19108:	bl	1103c <mbsinit@plt>
   1910c:	cmp	r0, #0
   19110:	beq	190b4 <__assert_fail@plt+0x7de4>
   19114:	ldr	r3, [sp, #60]	; 0x3c
   19118:	add	r9, sp, #100	; 0x64
   1911c:	mov	r0, r5
   19120:	ldm	r9, {r9, sl, fp}
   19124:	eor	r2, r6, #1
   19128:	ldr	r5, [sp, #112]	; 0x70
   1912c:	and	r2, r2, r3
   19130:	uxtb	r2, r2
   19134:	ldr	r4, [sp, #116]	; 0x74
   19138:	cmp	r0, #1
   1913c:	bhi	18c58 <__assert_fail@plt+0x7988>
   19140:	b	18c48 <__assert_fail@plt+0x7978>
   19144:	cmp	r1, #1
   19148:	beq	190f0 <__assert_fail@plt+0x7e20>
   1914c:	add	r2, r4, #1
   19150:	add	r3, sl, r1
   19154:	add	r2, sl, r2
   19158:	add	r4, r3, r4
   1915c:	ldrb	r3, [r2], #1
   19160:	sub	r3, r3, #91	; 0x5b
   19164:	cmp	r3, #33	; 0x21
   19168:	ldrls	pc, [pc, r3, lsl #2]
   1916c:	b	191f8 <__assert_fail@plt+0x7f28>
   19170:	andeq	r9, r1, r4, lsl #4
   19174:	andeq	r9, r1, r4, lsl #4
   19178:	strdeq	r9, [r1], -r8
   1917c:	andeq	r9, r1, r4, lsl #4
   19180:	strdeq	r9, [r1], -r8
   19184:	andeq	r9, r1, r4, lsl #4
   19188:	strdeq	r9, [r1], -r8
   1918c:	strdeq	r9, [r1], -r8
   19190:	strdeq	r9, [r1], -r8
   19194:	strdeq	r9, [r1], -r8
   19198:	strdeq	r9, [r1], -r8
   1919c:	strdeq	r9, [r1], -r8
   191a0:	strdeq	r9, [r1], -r8
   191a4:	strdeq	r9, [r1], -r8
   191a8:	strdeq	r9, [r1], -r8
   191ac:	strdeq	r9, [r1], -r8
   191b0:	strdeq	r9, [r1], -r8
   191b4:	strdeq	r9, [r1], -r8
   191b8:	strdeq	r9, [r1], -r8
   191bc:	strdeq	r9, [r1], -r8
   191c0:	strdeq	r9, [r1], -r8
   191c4:	strdeq	r9, [r1], -r8
   191c8:	strdeq	r9, [r1], -r8
   191cc:	strdeq	r9, [r1], -r8
   191d0:	strdeq	r9, [r1], -r8
   191d4:	strdeq	r9, [r1], -r8
   191d8:	strdeq	r9, [r1], -r8
   191dc:	strdeq	r9, [r1], -r8
   191e0:	strdeq	r9, [r1], -r8
   191e4:	strdeq	r9, [r1], -r8
   191e8:	strdeq	r9, [r1], -r8
   191ec:	strdeq	r9, [r1], -r8
   191f0:	strdeq	r9, [r1], -r8
   191f4:	andeq	r9, r1, r4, lsl #4
   191f8:	cmp	r4, r2
   191fc:	bne	1915c <__assert_fail@plt+0x7e8c>
   19200:	b	190f0 <__assert_fail@plt+0x7e20>
   19204:	mov	r3, #2
   19208:	ldr	fp, [sp, #100]	; 0x64
   1920c:	str	r3, [sp, #176]	; 0xb0
   19210:	ldr	sl, [sp, #104]	; 0x68
   19214:	b	186d8 <__assert_fail@plt+0x7408>
   19218:	ldr	r2, [sp, #52]	; 0x34
   1921c:	mov	fp, r9
   19220:	ldr	r3, [sp, #60]	; 0x3c
   19224:	and	r3, r3, r2
   19228:	str	r3, [sp, #60]	; 0x3c
   1922c:	b	186d8 <__assert_fail@plt+0x7408>
   19230:	cmp	sl, r4
   19234:	movhi	r2, fp
   19238:	bhi	185b0 <__assert_fail@plt+0x72e0>
   1923c:	mov	r2, r4
   19240:	b	185c0 <__assert_fail@plt+0x72f0>
   19244:	mov	r6, r3
   19248:	mov	r5, #63	; 0x3f
   1924c:	b	18680 <__assert_fail@plt+0x73b0>
   19250:	ldr	r8, [sp, #36]	; 0x24
   19254:	ldr	r6, [sp, #100]	; 0x64
   19258:	b	1852c <__assert_fail@plt+0x725c>
   1925c:	mov	fp, r9
   19260:	ldr	r8, [sp, #36]	; 0x24
   19264:	ldr	r3, [sp, #52]	; 0x34
   19268:	str	r3, [sp, #60]	; 0x3c
   1926c:	b	186d8 <__assert_fail@plt+0x7408>
   19270:	ldr	r8, [sp, #36]	; 0x24
   19274:	ldr	r6, [sp, #100]	; 0x64
   19278:	b	183c4 <__assert_fail@plt+0x70f4>
   1927c:	mov	r3, #0
   19280:	add	r4, r4, #4
   19284:	mov	fp, r2
   19288:	mov	r6, r3
   1928c:	mov	r5, #48	; 0x30
   19290:	b	1851c <__assert_fail@plt+0x724c>
   19294:	mov	r6, r3
   19298:	b	18d18 <__assert_fail@plt+0x7a48>
   1929c:	mov	r3, #1
   192a0:	movw	r2, #57600	; 0xe100
   192a4:	movt	r2, #1
   192a8:	mov	r4, r3
   192ac:	mov	r9, sl
   192b0:	str	r3, [sp, #32]
   192b4:	str	sl, [sp, #44]	; 0x2c
   192b8:	str	r3, [sp, #48]	; 0x30
   192bc:	str	sl, [sp, #52]	; 0x34
   192c0:	str	r3, [sp, #56]	; 0x38
   192c4:	str	r3, [sp, #60]	; 0x3c
   192c8:	str	sl, [sp, #64]	; 0x40
   192cc:	str	sl, [sp, #68]	; 0x44
   192d0:	str	r2, [sp, #72]	; 0x48
   192d4:	str	sl, [sp, #80]	; 0x50
   192d8:	str	sl, [sp, #84]	; 0x54
   192dc:	str	sl, [sp, #88]	; 0x58
   192e0:	b	17dd0 <__assert_fail@plt+0x6b00>
   192e4:	mov	r3, #0
   192e8:	mov	r5, #48	; 0x30
   192ec:	mov	r6, r3
   192f0:	b	1851c <__assert_fail@plt+0x724c>
   192f4:	cmp	sl, r4
   192f8:	mov	r5, #48	; 0x30
   192fc:	movhi	r3, #48	; 0x30
   19300:	strbhi	r3, [r9, r4]
   19304:	add	r3, r2, #2
   19308:	add	r4, r2, #3
   1930c:	cmp	sl, r3
   19310:	movhi	r1, #48	; 0x30
   19314:	strbhi	r1, [r9, r3]
   19318:	mov	r3, #0
   1931c:	b	185f8 <__assert_fail@plt+0x7328>
   19320:	ldr	r3, [sp, #48]	; 0x30
   19324:	str	r3, [sp, #40]	; 0x28
   19328:	b	18c04 <__assert_fail@plt+0x7934>
   1932c:	ldr	r2, [sp, #28]
   19330:	ldrb	r2, [r2, r3]
   19334:	sub	r1, r2, #33	; 0x21
   19338:	cmp	r1, #29
   1933c:	ldrls	pc, [pc, r1, lsl #2]
   19340:	b	1867c <__assert_fail@plt+0x73ac>
   19344:			; <UNDEFINED> instruction: 0x000193bc
   19348:	andeq	r8, r1, ip, ror r6
   1934c:	andeq	r8, r1, ip, ror r6
   19350:	andeq	r8, r1, ip, ror r6
   19354:	andeq	r8, r1, ip, ror r6
   19358:	andeq	r8, r1, ip, ror r6
   1935c:			; <UNDEFINED> instruction: 0x000193bc
   19360:			; <UNDEFINED> instruction: 0x000193bc
   19364:			; <UNDEFINED> instruction: 0x000193bc
   19368:	andeq	r8, r1, ip, ror r6
   1936c:	andeq	r8, r1, ip, ror r6
   19370:	andeq	r8, r1, ip, ror r6
   19374:			; <UNDEFINED> instruction: 0x000193bc
   19378:	andeq	r8, r1, ip, ror r6
   1937c:			; <UNDEFINED> instruction: 0x000193bc
   19380:	andeq	r8, r1, ip, ror r6
   19384:	andeq	r8, r1, ip, ror r6
   19388:	andeq	r8, r1, ip, ror r6
   1938c:	andeq	r8, r1, ip, ror r6
   19390:	andeq	r8, r1, ip, ror r6
   19394:	andeq	r8, r1, ip, ror r6
   19398:	andeq	r8, r1, ip, ror r6
   1939c:	andeq	r8, r1, ip, ror r6
   193a0:	andeq	r8, r1, ip, ror r6
   193a4:	andeq	r8, r1, ip, ror r6
   193a8:	andeq	r8, r1, ip, ror r6
   193ac:	andeq	r8, r1, ip, ror r6
   193b0:			; <UNDEFINED> instruction: 0x000193bc
   193b4:			; <UNDEFINED> instruction: 0x000193bc
   193b8:			; <UNDEFINED> instruction: 0x000193bc
   193bc:	ldr	r1, [sp, #44]	; 0x2c
   193c0:	cmp	r1, #0
   193c4:	bne	19624 <__assert_fail@plt+0x8354>
   193c8:	cmp	sl, r4
   193cc:	mov	r7, r3
   193d0:	movhi	r1, #63	; 0x3f
   193d4:	mov	r5, r2
   193d8:	mov	r3, fp
   193dc:	strbhi	r1, [r9, r4]
   193e0:	add	r1, r4, #1
   193e4:	cmp	sl, r1
   193e8:	movhi	r0, #34	; 0x22
   193ec:	strbhi	r0, [r9, r1]
   193f0:	add	r1, r4, #2
   193f4:	cmp	sl, r1
   193f8:	movhi	r0, #34	; 0x22
   193fc:	strbhi	r0, [r9, r1]
   19400:	add	r1, r4, #3
   19404:	add	r4, r4, #4
   19408:	cmp	sl, r1
   1940c:	movhi	r0, #63	; 0x3f
   19410:	strbhi	r0, [r9, r1]
   19414:	b	185f8 <__assert_fail@plt+0x7328>
   19418:	mov	fp, r9
   1941c:	b	186d8 <__assert_fail@plt+0x7408>
   19420:	ldr	r3, [sp, #188]	; 0xbc
   19424:	ldrb	r3, [r3]
   19428:	cmp	r3, #0
   1942c:	beq	17d68 <__assert_fail@plt+0x6a98>
   19430:	ldr	r2, [sp, #188]	; 0xbc
   19434:	cmp	sl, r4
   19438:	bls	19458 <__assert_fail@plt+0x8188>
   1943c:	strb	r3, [fp, r4]
   19440:	add	r4, r4, #1
   19444:	ldrb	r3, [r2, #1]!
   19448:	cmp	r3, #0
   1944c:	beq	17d68 <__assert_fail@plt+0x6a98>
   19450:	cmp	sl, r4
   19454:	bhi	1943c <__assert_fail@plt+0x816c>
   19458:	ldrb	r3, [r2, #1]!
   1945c:	add	r4, r4, #1
   19460:	cmp	r3, #0
   19464:	bne	19434 <__assert_fail@plt+0x8164>
   19468:	b	17d68 <__assert_fail@plt+0x6a98>
   1946c:	add	r9, sp, #100	; 0x64
   19470:	mov	r0, r5
   19474:	ldr	r2, [sp, #60]	; 0x3c
   19478:	mov	r6, #0
   1947c:	ldm	r9, {r9, sl, fp}
   19480:	ldr	r5, [sp, #112]	; 0x70
   19484:	ldr	r4, [sp, #116]	; 0x74
   19488:	b	19138 <__assert_fail@plt+0x7e68>
   1948c:	cmp	r4, r8
   19490:	add	r9, sp, #100	; 0x64
   19494:	mov	r1, r4
   19498:	mov	r2, fp
   1949c:	ldm	r9, {r9, sl, fp}
   194a0:	mov	r3, r5
   194a4:	mov	r0, r5
   194a8:	ldr	r5, [sp, #112]	; 0x70
   194ac:	ldr	r4, [sp, #116]	; 0x74
   194b0:	bcs	194e4 <__assert_fail@plt+0x8214>
   194b4:	ldrb	r6, [r2]
   194b8:	cmp	r6, #0
   194bc:	bne	194d0 <__assert_fail@plt+0x8200>
   194c0:	b	1961c <__assert_fail@plt+0x834c>
   194c4:	ldrb	r6, [r2, #1]!
   194c8:	cmp	r6, #0
   194cc:	beq	195b4 <__assert_fail@plt+0x82e4>
   194d0:	add	r3, r3, #1
   194d4:	add	r1, r7, r3
   194d8:	cmp	r8, r1
   194dc:	bhi	194c4 <__assert_fail@plt+0x81f4>
   194e0:	mov	r0, r3
   194e4:	mov	r6, #0
   194e8:	ldr	r2, [sp, #60]	; 0x3c
   194ec:	b	19138 <__assert_fail@plt+0x7e68>
   194f0:	mov	r3, #1
   194f4:	mov	r4, #0
   194f8:	mov	r9, r4
   194fc:	str	r3, [sp, #32]
   19500:	str	r3, [sp, #44]	; 0x2c
   19504:	str	r3, [sp, #48]	; 0x30
   19508:	str	r4, [sp, #52]	; 0x34
   1950c:	str	r3, [sp, #56]	; 0x38
   19510:	str	r3, [sp, #60]	; 0x3c
   19514:	str	r3, [sp, #88]	; 0x58
   19518:	movw	r3, #57600	; 0xe100
   1951c:	movt	r3, #1
   19520:	str	r4, [sp, #64]	; 0x40
   19524:	str	r4, [sp, #68]	; 0x44
   19528:	str	r3, [sp, #72]	; 0x48
   1952c:	str	r4, [sp, #80]	; 0x50
   19530:	str	r4, [sp, #84]	; 0x54
   19534:	b	17dd0 <__assert_fail@plt+0x6b00>
   19538:	mov	fp, r9
   1953c:	b	186ec <__assert_fail@plt+0x741c>
   19540:	ldr	r3, [sp, #48]	; 0x30
   19544:	b	19060 <__assert_fail@plt+0x7d90>
   19548:	mov	r2, r3
   1954c:	ldr	r3, [sp, #72]	; 0x48
   19550:	cmp	r3, #0
   19554:	moveq	r2, #0
   19558:	andne	r2, r2, #1
   1955c:	cmp	r2, #0
   19560:	beq	19590 <__assert_fail@plt+0x82c0>
   19564:	mov	r2, r3
   19568:	ldrb	r3, [r3]
   1956c:	cmp	r3, #0
   19570:	beq	19590 <__assert_fail@plt+0x82c0>
   19574:	cmp	sl, r4
   19578:	bls	195a0 <__assert_fail@plt+0x82d0>
   1957c:	strb	r3, [fp, r4]
   19580:	add	r4, r4, #1
   19584:	ldrb	r3, [r2, #1]!
   19588:	cmp	r3, #0
   1958c:	bne	19574 <__assert_fail@plt+0x82a4>
   19590:	cmp	sl, r4
   19594:	movhi	r3, #0
   19598:	strbhi	r3, [fp, r4]
   1959c:	b	18728 <__assert_fail@plt+0x7458>
   195a0:	ldrb	r3, [r2, #1]!
   195a4:	add	r4, r4, #1
   195a8:	cmp	r3, #0
   195ac:	bne	19574 <__assert_fail@plt+0x82a4>
   195b0:	b	19590 <__assert_fail@plt+0x82c0>
   195b4:	mov	r0, r3
   195b8:	ldr	r2, [sp, #60]	; 0x3c
   195bc:	b	19138 <__assert_fail@plt+0x7e68>
   195c0:	mov	ip, #5
   195c4:	mov	r3, r8
   195c8:	ldr	r1, [sp, #84]	; 0x54
   195cc:	str	ip, [sp]
   195d0:	ldr	r2, [sp, #180]	; 0xb4
   195d4:	ldr	ip, [sp, #188]	; 0xbc
   195d8:	ldr	r0, [sp, #184]	; 0xb8
   195dc:	str	r2, [sp, #4]
   195e0:	ldr	r2, [sp, #28]
   195e4:	str	ip, [sp, #12]
   195e8:	ldr	ip, [sp, #192]	; 0xc0
   195ec:	str	r0, [sp, #8]
   195f0:	mov	r0, fp
   195f4:	str	ip, [sp, #16]
   195f8:	bl	17cac <__assert_fail@plt+0x69dc>
   195fc:	mov	r4, r0
   19600:	b	18728 <__assert_fail@plt+0x7458>
   19604:	mov	r6, r3
   19608:	str	r3, [sp, #40]	; 0x28
   1960c:	b	18698 <__assert_fail@plt+0x73c8>
   19610:	mov	r3, #2
   19614:	str	r3, [sp, #176]	; 0xb0
   19618:	b	186d8 <__assert_fail@plt+0x7408>
   1961c:	ldr	r2, [sp, #60]	; 0x3c
   19620:	b	19138 <__assert_fail@plt+0x7e68>
   19624:	mov	r3, #5
   19628:	mov	fp, r9
   1962c:	str	r3, [sp, #176]	; 0xb0
   19630:	b	186ec <__assert_fail@plt+0x741c>
   19634:	mov	r1, #1
   19638:	mov	r9, #0
   1963c:	mov	r3, r9
   19640:	mov	r2, r9
   19644:	str	r1, [sp, #32]
   19648:	str	sl, [sp, #84]	; 0x54
   1964c:	b	18474 <__assert_fail@plt+0x71a4>
   19650:	mov	r3, #0
   19654:	mov	r2, #1
   19658:	mov	r9, r3
   1965c:	mov	r4, r3
   19660:	str	r2, [sp, #32]
   19664:	strd	r2, [sp, #44]	; 0x2c
   19668:	strd	r2, [sp, #56]	; 0x38
   1966c:	str	r3, [sp, #80]	; 0x50
   19670:	str	r3, [sp, #84]	; 0x54
   19674:	str	r3, [sp, #88]	; 0x58
   19678:	movw	r3, #57620	; 0xe114
   1967c:	movt	r3, #1
   19680:	str	r2, [sp, #52]	; 0x34
   19684:	str	r2, [sp, #64]	; 0x40
   19688:	str	r2, [sp, #68]	; 0x44
   1968c:	str	r3, [sp, #72]	; 0x48
   19690:	b	17dd0 <__assert_fail@plt+0x6b00>
   19694:	bl	11294 <abort@plt>
   19698:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1969c:	mov	r4, r0
   196a0:	mov	r5, r3
   196a4:	strd	r6, [sp, #8]
   196a8:	movw	r7, #61752	; 0xf138
   196ac:	movt	r7, #2
   196b0:	strd	r8, [sp, #16]
   196b4:	strd	sl, [sp, #24]
   196b8:	mov	sl, r1
   196bc:	mov	fp, r2
   196c0:	str	lr, [sp, #32]
   196c4:	sub	sp, sp, #60	; 0x3c
   196c8:	bl	11180 <__errno_location@plt>
   196cc:	mov	r8, r0
   196d0:	cmn	r4, #-2147483647	; 0x80000001
   196d4:	ldr	r6, [r7]
   196d8:	movne	r0, #0
   196dc:	moveq	r0, #1
   196e0:	ldr	r3, [r8]
   196e4:	orrs	r0, r0, r4, lsr #31
   196e8:	str	r3, [sp, #28]
   196ec:	bne	1987c <__assert_fail@plt+0x85ac>
   196f0:	ldr	r3, [r7, #4]
   196f4:	cmp	r3, r4
   196f8:	bgt	19758 <__assert_fail@plt+0x8488>
   196fc:	add	r1, r7, #8
   19700:	sub	r2, r4, r3
   19704:	str	r3, [sp, #52]	; 0x34
   19708:	cmp	r6, r1
   1970c:	add	r2, r2, #1
   19710:	beq	19854 <__assert_fail@plt+0x8584>
   19714:	mov	r1, #8
   19718:	mov	r0, r6
   1971c:	mvn	r3, #-2147483648	; 0x80000000
   19720:	str	r1, [sp]
   19724:	add	r1, sp, #52	; 0x34
   19728:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1972c:	mov	r6, r0
   19730:	str	r0, [r7]
   19734:	ldr	r0, [r7, #4]
   19738:	mov	r1, #0
   1973c:	ldr	r2, [sp, #52]	; 0x34
   19740:	sub	r2, r2, r0
   19744:	add	r0, r6, r0, lsl #3
   19748:	lsl	r2, r2, #3
   1974c:	bl	11198 <memset@plt>
   19750:	ldr	r3, [sp, #52]	; 0x34
   19754:	str	r3, [r7, #4]
   19758:	ldr	r1, [r5, #4]
   1975c:	add	r0, r6, r4, lsl #3
   19760:	add	ip, r5, #8
   19764:	mov	r3, fp
   19768:	mov	r2, sl
   1976c:	ldr	r7, [r0, #4]
   19770:	str	r0, [sp, #36]	; 0x24
   19774:	str	ip, [sp, #40]	; 0x28
   19778:	orr	r0, r1, #1
   1977c:	ldr	r9, [r6, r4, lsl #3]
   19780:	str	ip, [sp, #8]
   19784:	ldr	lr, [r5, #44]	; 0x2c
   19788:	str	r0, [sp, #4]
   1978c:	ldr	ip, [r5]
   19790:	mov	r1, r9
   19794:	str	ip, [sp, #32]
   19798:	ldr	ip, [r5, #40]	; 0x28
   1979c:	str	ip, [sp, #12]
   197a0:	ldr	ip, [sp, #32]
   197a4:	str	lr, [sp, #16]
   197a8:	str	r0, [sp, #44]	; 0x2c
   197ac:	mov	r0, r7
   197b0:	str	ip, [sp]
   197b4:	bl	17cac <__assert_fail@plt+0x69dc>
   197b8:	cmp	r9, r0
   197bc:	bhi	1982c <__assert_fail@plt+0x855c>
   197c0:	add	r9, r0, #1
   197c4:	movw	r3, #61888	; 0xf1c0
   197c8:	movt	r3, #2
   197cc:	cmp	r7, r3
   197d0:	str	r9, [r6, r4, lsl #3]
   197d4:	beq	197e0 <__assert_fail@plt+0x8510>
   197d8:	mov	r0, r7
   197dc:	bl	13a30 <__assert_fail@plt+0x2760>
   197e0:	mov	r0, r9
   197e4:	bl	1be1c <__assert_fail@plt+0xab4c>
   197e8:	ldr	ip, [r5]
   197ec:	mov	r3, fp
   197f0:	mov	r2, sl
   197f4:	mov	r1, r9
   197f8:	mov	r7, r0
   197fc:	ldr	lr, [sp, #36]	; 0x24
   19800:	ldr	r4, [r5, #40]	; 0x28
   19804:	str	r0, [lr, #4]
   19808:	ldr	lr, [r5, #44]	; 0x2c
   1980c:	str	ip, [sp]
   19810:	ldr	ip, [sp, #44]	; 0x2c
   19814:	str	ip, [sp, #4]
   19818:	ldr	ip, [sp, #40]	; 0x28
   1981c:	str	r4, [sp, #12]
   19820:	str	lr, [sp, #16]
   19824:	str	ip, [sp, #8]
   19828:	bl	17cac <__assert_fail@plt+0x69dc>
   1982c:	ldr	r3, [sp, #28]
   19830:	mov	r0, r7
   19834:	str	r3, [r8]
   19838:	add	sp, sp, #60	; 0x3c
   1983c:	ldrd	r4, [sp]
   19840:	ldrd	r6, [sp, #8]
   19844:	ldrd	r8, [sp, #16]
   19848:	ldrd	sl, [sp, #24]
   1984c:	add	sp, sp, #32
   19850:	pop	{pc}		; (ldr pc, [sp], #4)
   19854:	mov	r1, #8
   19858:	mvn	r3, #-2147483648	; 0x80000000
   1985c:	str	r1, [sp]
   19860:	add	r1, sp, #52	; 0x34
   19864:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   19868:	ldrd	r2, [r7, #8]
   1986c:	mov	r6, r0
   19870:	str	r0, [r7]
   19874:	strd	r2, [r0]
   19878:	b	19734 <__assert_fail@plt+0x8464>
   1987c:	bl	11294 <abort@plt>
   19880:	strd	r4, [sp, #-16]!
   19884:	mov	r5, r0
   19888:	str	r6, [sp, #8]
   1988c:	str	lr, [sp, #12]
   19890:	bl	11180 <__errno_location@plt>
   19894:	mov	r4, r0
   19898:	cmp	r5, #0
   1989c:	ldr	r0, [pc, #32]	; 198c4 <__assert_fail@plt+0x85f4>
   198a0:	mov	r1, #48	; 0x30
   198a4:	movne	r0, r5
   198a8:	ldr	r6, [r4]
   198ac:	bl	1c260 <__assert_fail@plt+0xaf90>
   198b0:	str	r6, [r4]
   198b4:	ldrd	r4, [sp]
   198b8:	ldr	r6, [sp, #8]
   198bc:	add	sp, sp, #12
   198c0:	pop	{pc}		; (ldr pc, [sp], #4)
   198c4:	andeq	pc, r2, r0, asr #5
   198c8:	ldr	r3, [pc, #12]	; 198dc <__assert_fail@plt+0x860c>
   198cc:	cmp	r0, #0
   198d0:	moveq	r0, r3
   198d4:	ldr	r0, [r0]
   198d8:	bx	lr
   198dc:	andeq	pc, r2, r0, asr #5
   198e0:	ldr	r3, [pc, #12]	; 198f4 <__assert_fail@plt+0x8624>
   198e4:	cmp	r0, #0
   198e8:	moveq	r0, r3
   198ec:	str	r1, [r0]
   198f0:	bx	lr
   198f4:	andeq	pc, r2, r0, asr #5
   198f8:	ldr	r3, [pc, #52]	; 19934 <__assert_fail@plt+0x8664>
   198fc:	cmp	r0, #0
   19900:	push	{lr}		; (str lr, [sp, #-4]!)
   19904:	lsr	lr, r1, #5
   19908:	and	r1, r1, #31
   1990c:	moveq	r0, r3
   19910:	add	r3, r0, #8
   19914:	ldr	ip, [r3, lr, lsl #2]
   19918:	lsr	r0, ip, r1
   1991c:	eor	r2, r2, r0
   19920:	and	r0, r0, #1
   19924:	and	r2, r2, #1
   19928:	eor	r1, ip, r2, lsl r1
   1992c:	str	r1, [r3, lr, lsl #2]
   19930:	pop	{pc}		; (ldr pc, [sp], #4)
   19934:	andeq	pc, r2, r0, asr #5
   19938:	ldr	r3, [pc, #16]	; 19950 <__assert_fail@plt+0x8680>
   1993c:	cmp	r0, #0
   19940:	movne	r3, r0
   19944:	ldr	r0, [r3, #4]
   19948:	str	r1, [r3, #4]
   1994c:	bx	lr
   19950:	andeq	pc, r2, r0, asr #5
   19954:	ldr	r3, [pc, #48]	; 1998c <__assert_fail@plt+0x86bc>
   19958:	cmp	r0, #0
   1995c:	mov	ip, #10
   19960:	moveq	r0, r3
   19964:	cmp	r2, #0
   19968:	cmpne	r1, #0
   1996c:	str	ip, [r0]
   19970:	beq	19980 <__assert_fail@plt+0x86b0>
   19974:	str	r1, [r0, #40]	; 0x28
   19978:	str	r2, [r0, #44]	; 0x2c
   1997c:	bx	lr
   19980:	str	r4, [sp, #-8]!
   19984:	str	lr, [sp, #4]
   19988:	bl	11294 <abort@plt>
   1998c:	andeq	pc, r2, r0, asr #5
   19990:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19994:	strd	r6, [sp, #8]
   19998:	mov	r7, r0
   1999c:	mov	r6, r1
   199a0:	strd	r8, [sp, #16]
   199a4:	mov	r8, r2
   199a8:	mov	r9, r3
   199ac:	str	lr, [sp, #24]
   199b0:	sub	sp, sp, #28
   199b4:	ldr	r4, [sp, #56]	; 0x38
   199b8:	ldr	ip, [pc, #104]	; 19a28 <__assert_fail@plt+0x8758>
   199bc:	cmp	r4, #0
   199c0:	moveq	r4, ip
   199c4:	bl	11180 <__errno_location@plt>
   199c8:	ldr	ip, [r4, #44]	; 0x2c
   199cc:	mov	r5, r0
   199d0:	mov	r1, r6
   199d4:	add	lr, r4, #8
   199d8:	mov	r3, r9
   199dc:	ldr	r6, [r5]
   199e0:	mov	r2, r8
   199e4:	mov	r0, r7
   199e8:	str	ip, [sp, #16]
   199ec:	ldr	ip, [r4, #40]	; 0x28
   199f0:	str	lr, [sp, #8]
   199f4:	str	ip, [sp, #12]
   199f8:	ldr	ip, [r4, #4]
   199fc:	str	ip, [sp, #4]
   19a00:	ldr	ip, [r4]
   19a04:	str	ip, [sp]
   19a08:	bl	17cac <__assert_fail@plt+0x69dc>
   19a0c:	str	r6, [r5]
   19a10:	add	sp, sp, #28
   19a14:	ldrd	r4, [sp]
   19a18:	ldrd	r6, [sp, #8]
   19a1c:	ldrd	r8, [sp, #16]
   19a20:	add	sp, sp, #24
   19a24:	pop	{pc}		; (ldr pc, [sp], #4)
   19a28:	andeq	pc, r2, r0, asr #5
   19a2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19a30:	cmp	r2, #0
   19a34:	ldr	r4, [pc, #192]	; 19afc <__assert_fail@plt+0x882c>
   19a38:	movne	r4, r2
   19a3c:	strd	r6, [sp, #8]
   19a40:	strd	r8, [sp, #16]
   19a44:	mov	r9, r1
   19a48:	mov	r8, r0
   19a4c:	strd	sl, [sp, #24]
   19a50:	str	lr, [sp, #32]
   19a54:	sub	sp, sp, #36	; 0x24
   19a58:	bl	11180 <__errno_location@plt>
   19a5c:	ldr	r5, [r4, #4]
   19a60:	mov	r6, r0
   19a64:	add	r7, r4, #8
   19a68:	mov	r1, #0
   19a6c:	mov	r3, r9
   19a70:	ldr	ip, [r4, #44]	; 0x2c
   19a74:	mov	r2, r8
   19a78:	mov	r0, r1
   19a7c:	ldr	sl, [r6]
   19a80:	orr	r5, r5, #1
   19a84:	str	ip, [sp, #16]
   19a88:	ldr	ip, [r4, #40]	; 0x28
   19a8c:	stmib	sp, {r5, r7, ip}
   19a90:	ldr	ip, [r4]
   19a94:	str	ip, [sp]
   19a98:	bl	17cac <__assert_fail@plt+0x69dc>
   19a9c:	add	r1, r0, #1
   19aa0:	mov	r0, r1
   19aa4:	str	r1, [sp, #28]
   19aa8:	bl	1be1c <__assert_fail@plt+0xab4c>
   19aac:	ldr	ip, [r4, #44]	; 0x2c
   19ab0:	mov	fp, r0
   19ab4:	mov	r3, r9
   19ab8:	mov	r2, r8
   19abc:	ldr	r1, [sp, #28]
   19ac0:	str	ip, [sp, #16]
   19ac4:	ldr	ip, [r4, #40]	; 0x28
   19ac8:	stmib	sp, {r5, r7, ip}
   19acc:	ldr	ip, [r4]
   19ad0:	str	ip, [sp]
   19ad4:	bl	17cac <__assert_fail@plt+0x69dc>
   19ad8:	mov	r0, fp
   19adc:	str	sl, [r6]
   19ae0:	add	sp, sp, #36	; 0x24
   19ae4:	ldrd	r4, [sp]
   19ae8:	ldrd	r6, [sp, #8]
   19aec:	ldrd	r8, [sp, #16]
   19af0:	ldrd	sl, [sp, #24]
   19af4:	add	sp, sp, #32
   19af8:	pop	{pc}		; (ldr pc, [sp], #4)
   19afc:	andeq	pc, r2, r0, asr #5
   19b00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19b04:	cmp	r3, #0
   19b08:	ldr	r4, [pc, #220]	; 19bec <__assert_fail@plt+0x891c>
   19b0c:	movne	r4, r3
   19b10:	strd	r6, [sp, #8]
   19b14:	mov	r6, r2
   19b18:	strd	r8, [sp, #16]
   19b1c:	mov	r9, r0
   19b20:	strd	sl, [sp, #24]
   19b24:	mov	sl, r1
   19b28:	str	lr, [sp, #32]
   19b2c:	sub	sp, sp, #44	; 0x2c
   19b30:	bl	11180 <__errno_location@plt>
   19b34:	ldr	r5, [r4, #4]
   19b38:	mov	r7, r0
   19b3c:	mov	r1, #0
   19b40:	add	r8, r4, #8
   19b44:	mov	r3, sl
   19b48:	ldr	ip, [r4, #44]	; 0x2c
   19b4c:	mov	r2, r9
   19b50:	mov	r0, r1
   19b54:	ldr	lr, [r7]
   19b58:	cmp	r6, r1
   19b5c:	orreq	r5, r5, #1
   19b60:	str	ip, [sp, #16]
   19b64:	ldr	ip, [r4, #40]	; 0x28
   19b68:	stmib	sp, {r5, r8, ip}
   19b6c:	ldr	ip, [r4]
   19b70:	str	lr, [sp, #28]
   19b74:	str	ip, [sp]
   19b78:	bl	17cac <__assert_fail@plt+0x69dc>
   19b7c:	add	r1, r0, #1
   19b80:	mov	fp, r0
   19b84:	mov	r0, r1
   19b88:	str	r1, [sp, #36]	; 0x24
   19b8c:	bl	1be1c <__assert_fail@plt+0xab4c>
   19b90:	ldr	ip, [r4, #44]	; 0x2c
   19b94:	mov	r3, sl
   19b98:	mov	r2, r9
   19b9c:	ldr	r1, [sp, #36]	; 0x24
   19ba0:	str	ip, [sp, #16]
   19ba4:	ldr	ip, [r4, #40]	; 0x28
   19ba8:	str	r0, [sp, #32]
   19bac:	stmib	sp, {r5, r8, ip}
   19bb0:	ldr	ip, [r4]
   19bb4:	str	ip, [sp]
   19bb8:	bl	17cac <__assert_fail@plt+0x69dc>
   19bbc:	ldr	lr, [sp, #28]
   19bc0:	cmp	r6, #0
   19bc4:	ldr	r0, [sp, #32]
   19bc8:	str	lr, [r7]
   19bcc:	strne	fp, [r6]
   19bd0:	add	sp, sp, #44	; 0x2c
   19bd4:	ldrd	r4, [sp]
   19bd8:	ldrd	r6, [sp, #8]
   19bdc:	ldrd	r8, [sp, #16]
   19be0:	ldrd	sl, [sp, #24]
   19be4:	add	sp, sp, #32
   19be8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bec:	andeq	pc, r2, r0, asr #5
   19bf0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19bf4:	movw	r5, #61752	; 0xf138
   19bf8:	movt	r5, #2
   19bfc:	ldr	r3, [r5, #4]
   19c00:	strd	r6, [sp, #8]
   19c04:	str	r8, [sp, #16]
   19c08:	str	lr, [sp, #20]
   19c0c:	ldr	r7, [r5]
   19c10:	cmp	r3, #1
   19c14:	ble	19c38 <__assert_fail@plt+0x8968>
   19c18:	mov	r4, #1
   19c1c:	add	r6, r7, #4
   19c20:	ldr	r0, [r6, r4, lsl #3]
   19c24:	add	r4, r4, #1
   19c28:	bl	13a30 <__assert_fail@plt+0x2760>
   19c2c:	ldr	r3, [r5, #4]
   19c30:	cmp	r3, r4
   19c34:	bgt	19c20 <__assert_fail@plt+0x8950>
   19c38:	ldr	r0, [r7, #4]
   19c3c:	movw	r4, #61888	; 0xf1c0
   19c40:	movt	r4, #2
   19c44:	cmp	r0, r4
   19c48:	beq	19c5c <__assert_fail@plt+0x898c>
   19c4c:	bl	13a30 <__assert_fail@plt+0x2760>
   19c50:	mov	r3, #256	; 0x100
   19c54:	str	r3, [r5, #8]
   19c58:	str	r4, [r5, #12]
   19c5c:	ldr	r4, [pc, #44]	; 19c90 <__assert_fail@plt+0x89c0>
   19c60:	cmp	r7, r4
   19c64:	beq	19c74 <__assert_fail@plt+0x89a4>
   19c68:	mov	r0, r7
   19c6c:	bl	13a30 <__assert_fail@plt+0x2760>
   19c70:	str	r4, [r5]
   19c74:	mov	r3, #1
   19c78:	ldrd	r6, [sp, #8]
   19c7c:	str	r3, [r5, #4]
   19c80:	ldrd	r4, [sp]
   19c84:	ldr	r8, [sp, #16]
   19c88:	add	sp, sp, #20
   19c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   19c90:	andeq	pc, r2, r0, asr #2
   19c94:	ldr	r3, [pc, #4]	; 19ca0 <__assert_fail@plt+0x89d0>
   19c98:	mvn	r2, #0
   19c9c:	b	19698 <__assert_fail@plt+0x83c8>
   19ca0:	andeq	pc, r2, r0, asr #5
   19ca4:	ldr	r3, [pc]	; 19cac <__assert_fail@plt+0x89dc>
   19ca8:	b	19698 <__assert_fail@plt+0x83c8>
   19cac:	andeq	pc, r2, r0, asr #5
   19cb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19cb4:	movw	r4, #61752	; 0xf138
   19cb8:	movt	r4, #2
   19cbc:	strd	r6, [sp, #8]
   19cc0:	strd	r8, [sp, #16]
   19cc4:	strd	sl, [sp, #24]
   19cc8:	mov	sl, r0
   19ccc:	str	lr, [sp, #32]
   19cd0:	sub	sp, sp, #44	; 0x2c
   19cd4:	bl	11180 <__errno_location@plt>
   19cd8:	ldr	r3, [r0]
   19cdc:	mov	r8, r0
   19ce0:	ldr	r2, [r4, #4]
   19ce4:	ldr	r5, [r4]
   19ce8:	str	r3, [sp, #28]
   19cec:	cmp	r2, #0
   19cf0:	bgt	19d4c <__assert_fail@plt+0x8a7c>
   19cf4:	add	r3, r4, #8
   19cf8:	str	r2, [sp, #36]	; 0x24
   19cfc:	rsb	r2, r2, #1
   19d00:	cmp	r5, r3
   19d04:	beq	19e18 <__assert_fail@plt+0x8b48>
   19d08:	mov	r1, #8
   19d0c:	mov	r0, r5
   19d10:	mvn	r3, #-2147483648	; 0x80000000
   19d14:	str	r1, [sp]
   19d18:	add	r1, sp, #36	; 0x24
   19d1c:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   19d20:	mov	r5, r0
   19d24:	str	r0, [r4]
   19d28:	ldr	r0, [r4, #4]
   19d2c:	mov	r1, #0
   19d30:	ldr	r2, [sp, #36]	; 0x24
   19d34:	sub	r2, r2, r0
   19d38:	add	r0, r5, r0, lsl #3
   19d3c:	lsl	r2, r2, #3
   19d40:	bl	11198 <memset@plt>
   19d44:	ldr	r3, [sp, #36]	; 0x24
   19d48:	str	r3, [r4, #4]
   19d4c:	movw	r4, #61888	; 0xf1c0
   19d50:	movt	r4, #2
   19d54:	ldr	r9, [r5]
   19d58:	add	fp, r4, #264	; 0x108
   19d5c:	mvn	r3, #0
   19d60:	ldr	r7, [r4, #260]	; 0x104
   19d64:	mov	r2, sl
   19d68:	ldr	r6, [r5, #4]
   19d6c:	str	fp, [sp, #8]
   19d70:	mov	r1, r9
   19d74:	ldr	ip, [r4, #256]	; 0x100
   19d78:	orr	r7, r7, #1
   19d7c:	ldr	lr, [r4, #300]	; 0x12c
   19d80:	mov	r0, r6
   19d84:	str	ip, [sp]
   19d88:	str	r7, [sp, #4]
   19d8c:	str	lr, [sp, #16]
   19d90:	ldr	ip, [r4, #296]	; 0x128
   19d94:	str	ip, [sp, #12]
   19d98:	bl	17cac <__assert_fail@plt+0x69dc>
   19d9c:	cmp	r9, r0
   19da0:	bhi	19df0 <__assert_fail@plt+0x8b20>
   19da4:	add	r9, r0, #1
   19da8:	cmp	r6, r4
   19dac:	str	r9, [r5]
   19db0:	beq	19dbc <__assert_fail@plt+0x8aec>
   19db4:	mov	r0, r6
   19db8:	bl	13a30 <__assert_fail@plt+0x2760>
   19dbc:	mov	r0, r9
   19dc0:	bl	1be1c <__assert_fail@plt+0xab4c>
   19dc4:	ldr	r3, [r4, #256]	; 0x100
   19dc8:	mov	r2, sl
   19dcc:	mov	r1, r9
   19dd0:	mov	r6, r0
   19dd4:	ldr	lr, [r4, #296]	; 0x128
   19dd8:	ldr	ip, [r4, #300]	; 0x12c
   19ddc:	str	r0, [r5, #4]
   19de0:	stm	sp, {r3, r7, fp, lr}
   19de4:	mvn	r3, #0
   19de8:	str	ip, [sp, #16]
   19dec:	bl	17cac <__assert_fail@plt+0x69dc>
   19df0:	ldr	r3, [sp, #28]
   19df4:	mov	r0, r6
   19df8:	str	r3, [r8]
   19dfc:	add	sp, sp, #44	; 0x2c
   19e00:	ldrd	r4, [sp]
   19e04:	ldrd	r6, [sp, #8]
   19e08:	ldrd	r8, [sp, #16]
   19e0c:	ldrd	sl, [sp, #24]
   19e10:	add	sp, sp, #32
   19e14:	pop	{pc}		; (ldr pc, [sp], #4)
   19e18:	mov	r0, #8
   19e1c:	mvn	r3, #-2147483648	; 0x80000000
   19e20:	add	r1, sp, #36	; 0x24
   19e24:	str	r0, [sp]
   19e28:	mov	r0, #0
   19e2c:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   19e30:	ldrd	r2, [r4, #8]
   19e34:	mov	r5, r0
   19e38:	str	r0, [r4]
   19e3c:	strd	r2, [r0]
   19e40:	b	19d28 <__assert_fail@plt+0x8a58>
   19e44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19e48:	movw	r4, #61752	; 0xf138
   19e4c:	movt	r4, #2
   19e50:	strd	r6, [sp, #8]
   19e54:	strd	r8, [sp, #16]
   19e58:	strd	sl, [sp, #24]
   19e5c:	mov	sl, r0
   19e60:	mov	fp, r1
   19e64:	str	lr, [sp, #32]
   19e68:	sub	sp, sp, #44	; 0x2c
   19e6c:	bl	11180 <__errno_location@plt>
   19e70:	ldr	r3, [r0]
   19e74:	mov	r8, r0
   19e78:	ldr	r2, [r4, #4]
   19e7c:	ldr	r5, [r4]
   19e80:	str	r3, [sp, #28]
   19e84:	cmp	r2, #0
   19e88:	bgt	19ee4 <__assert_fail@plt+0x8c14>
   19e8c:	add	r3, r4, #8
   19e90:	str	r2, [sp, #36]	; 0x24
   19e94:	rsb	r2, r2, #1
   19e98:	cmp	r5, r3
   19e9c:	beq	19fc0 <__assert_fail@plt+0x8cf0>
   19ea0:	mov	r1, #8
   19ea4:	mov	r0, r5
   19ea8:	mvn	r3, #-2147483648	; 0x80000000
   19eac:	str	r1, [sp]
   19eb0:	add	r1, sp, #36	; 0x24
   19eb4:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   19eb8:	mov	r5, r0
   19ebc:	str	r0, [r4]
   19ec0:	ldr	r0, [r4, #4]
   19ec4:	mov	r1, #0
   19ec8:	ldr	r2, [sp, #36]	; 0x24
   19ecc:	sub	r2, r2, r0
   19ed0:	add	r0, r5, r0, lsl #3
   19ed4:	lsl	r2, r2, #3
   19ed8:	bl	11198 <memset@plt>
   19edc:	ldr	r3, [sp, #36]	; 0x24
   19ee0:	str	r3, [r4, #4]
   19ee4:	movw	r4, #61888	; 0xf1c0
   19ee8:	movt	r4, #2
   19eec:	ldr	r9, [r5]
   19ef0:	add	r0, r4, #264	; 0x108
   19ef4:	mov	r3, fp
   19ef8:	ldr	r7, [r4, #260]	; 0x104
   19efc:	mov	r2, sl
   19f00:	ldr	r6, [r5, #4]
   19f04:	str	r0, [sp, #8]
   19f08:	mov	r1, r9
   19f0c:	ldr	ip, [r4, #256]	; 0x100
   19f10:	orr	r7, r7, #1
   19f14:	ldr	lr, [r4, #300]	; 0x12c
   19f18:	mov	r0, r6
   19f1c:	str	ip, [sp]
   19f20:	str	r7, [sp, #4]
   19f24:	str	lr, [sp, #16]
   19f28:	ldr	ip, [r4, #296]	; 0x128
   19f2c:	str	ip, [sp, #12]
   19f30:	bl	17cac <__assert_fail@plt+0x69dc>
   19f34:	cmp	r9, r0
   19f38:	bhi	19f98 <__assert_fail@plt+0x8cc8>
   19f3c:	add	r9, r0, #1
   19f40:	cmp	r6, r4
   19f44:	str	r9, [r5]
   19f48:	beq	19f54 <__assert_fail@plt+0x8c84>
   19f4c:	mov	r0, r6
   19f50:	bl	13a30 <__assert_fail@plt+0x2760>
   19f54:	mov	r0, r9
   19f58:	bl	1be1c <__assert_fail@plt+0xab4c>
   19f5c:	ldr	ip, [r4, #256]	; 0x100
   19f60:	mov	r1, r9
   19f64:	mov	r3, fp
   19f68:	mov	r2, sl
   19f6c:	mov	r6, r0
   19f70:	ldr	r9, [r4, #296]	; 0x128
   19f74:	ldr	lr, [r4, #300]	; 0x12c
   19f78:	str	r0, [r5, #4]
   19f7c:	str	ip, [sp]
   19f80:	ldr	ip, [pc, #100]	; 19fec <__assert_fail@plt+0x8d1c>
   19f84:	str	r7, [sp, #4]
   19f88:	str	ip, [sp, #8]
   19f8c:	str	r9, [sp, #12]
   19f90:	str	lr, [sp, #16]
   19f94:	bl	17cac <__assert_fail@plt+0x69dc>
   19f98:	ldr	r3, [sp, #28]
   19f9c:	mov	r0, r6
   19fa0:	str	r3, [r8]
   19fa4:	add	sp, sp, #44	; 0x2c
   19fa8:	ldrd	r4, [sp]
   19fac:	ldrd	r6, [sp, #8]
   19fb0:	ldrd	r8, [sp, #16]
   19fb4:	ldrd	sl, [sp, #24]
   19fb8:	add	sp, sp, #32
   19fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   19fc0:	mov	r0, #8
   19fc4:	mvn	r3, #-2147483648	; 0x80000000
   19fc8:	add	r1, sp, #36	; 0x24
   19fcc:	str	r0, [sp]
   19fd0:	mov	r0, #0
   19fd4:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   19fd8:	ldrd	r2, [r4, #8]
   19fdc:	mov	r5, r0
   19fe0:	str	r0, [r4]
   19fe4:	strd	r2, [r0]
   19fe8:	b	19ec0 <__assert_fail@plt+0x8bf0>
   19fec:	andeq	pc, r2, r8, asr #5
   19ff0:	strd	r4, [sp, #-20]!	; 0xffffffec
   19ff4:	mov	r4, #0
   19ff8:	mov	r5, #0
   19ffc:	strd	r6, [sp, #8]
   1a000:	cmp	r1, #10
   1a004:	str	lr, [sp, #16]
   1a008:	sub	sp, sp, #100	; 0x64
   1a00c:	strd	r4, [sp, #48]	; 0x30
   1a010:	beq	1a058 <__assert_fail@plt+0x8d88>
   1a014:	mov	r3, sp
   1a018:	strd	r4, [sp, #8]
   1a01c:	str	r1, [sp, #48]	; 0x30
   1a020:	mov	r1, r2
   1a024:	mvn	r2, #0
   1a028:	ldrd	r6, [sp, #48]	; 0x30
   1a02c:	strd	r6, [sp]
   1a030:	strd	r4, [sp, #16]
   1a034:	strd	r4, [sp, #24]
   1a038:	strd	r4, [sp, #32]
   1a03c:	strd	r4, [sp, #40]	; 0x28
   1a040:	bl	19698 <__assert_fail@plt+0x83c8>
   1a044:	add	sp, sp, #100	; 0x64
   1a048:	ldrd	r4, [sp]
   1a04c:	ldrd	r6, [sp, #8]
   1a050:	add	sp, sp, #16
   1a054:	pop	{pc}		; (ldr pc, [sp], #4)
   1a058:	bl	11294 <abort@plt>
   1a05c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a060:	mov	r4, #0
   1a064:	mov	r5, #0
   1a068:	strd	r6, [sp, #8]
   1a06c:	cmp	r1, #10
   1a070:	str	lr, [sp, #16]
   1a074:	sub	sp, sp, #100	; 0x64
   1a078:	strd	r4, [sp, #48]	; 0x30
   1a07c:	beq	1a0c8 <__assert_fail@plt+0x8df8>
   1a080:	mov	ip, r2
   1a084:	mov	r2, r3
   1a088:	strd	r4, [sp, #8]
   1a08c:	str	r1, [sp, #48]	; 0x30
   1a090:	mov	r3, sp
   1a094:	mov	r1, ip
   1a098:	ldrd	r6, [sp, #48]	; 0x30
   1a09c:	strd	r6, [sp]
   1a0a0:	strd	r4, [sp, #16]
   1a0a4:	strd	r4, [sp, #24]
   1a0a8:	strd	r4, [sp, #32]
   1a0ac:	strd	r4, [sp, #40]	; 0x28
   1a0b0:	bl	19698 <__assert_fail@plt+0x83c8>
   1a0b4:	add	sp, sp, #100	; 0x64
   1a0b8:	ldrd	r4, [sp]
   1a0bc:	ldrd	r6, [sp, #8]
   1a0c0:	add	sp, sp, #16
   1a0c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0c8:	bl	11294 <abort@plt>
   1a0cc:	mov	r2, #0
   1a0d0:	mov	r3, #0
   1a0d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a0d8:	strd	r6, [sp, #8]
   1a0dc:	cmp	r0, #10
   1a0e0:	strd	r8, [sp, #16]
   1a0e4:	strd	sl, [sp, #24]
   1a0e8:	str	lr, [sp, #32]
   1a0ec:	sub	sp, sp, #124	; 0x7c
   1a0f0:	strd	r2, [sp, #72]	; 0x48
   1a0f4:	strd	r2, [sp, #80]	; 0x50
   1a0f8:	strd	r2, [sp, #88]	; 0x58
   1a0fc:	strd	r2, [sp, #96]	; 0x60
   1a100:	strd	r2, [sp, #104]	; 0x68
   1a104:	strd	r2, [sp, #112]	; 0x70
   1a108:	beq	1a2ac <__assert_fail@plt+0x8fdc>
   1a10c:	mov	r6, r1
   1a110:	movw	r4, #61752	; 0xf138
   1a114:	movt	r4, #2
   1a118:	str	r0, [sp, #72]	; 0x48
   1a11c:	ldrd	r0, [sp, #72]	; 0x48
   1a120:	strd	r0, [sp, #24]
   1a124:	strd	r2, [sp, #32]
   1a128:	strd	r2, [sp, #40]	; 0x28
   1a12c:	strd	r2, [sp, #48]	; 0x30
   1a130:	strd	r2, [sp, #56]	; 0x38
   1a134:	strd	r2, [sp, #64]	; 0x40
   1a138:	bl	11180 <__errno_location@plt>
   1a13c:	mov	r8, r0
   1a140:	ldr	r5, [r4]
   1a144:	ldr	r2, [r4, #4]
   1a148:	ldr	r9, [r0]
   1a14c:	cmp	r2, #0
   1a150:	bgt	1a1ac <__assert_fail@plt+0x8edc>
   1a154:	add	r3, r4, #8
   1a158:	str	r2, [sp, #72]	; 0x48
   1a15c:	rsb	r2, r2, #1
   1a160:	cmp	r5, r3
   1a164:	beq	1a280 <__assert_fail@plt+0x8fb0>
   1a168:	mov	r3, #8
   1a16c:	mov	r0, r5
   1a170:	add	r1, sp, #72	; 0x48
   1a174:	str	r3, [sp]
   1a178:	mvn	r3, #-2147483648	; 0x80000000
   1a17c:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1a180:	mov	r5, r0
   1a184:	str	r0, [r4]
   1a188:	ldr	r0, [r4, #4]
   1a18c:	mov	r1, #0
   1a190:	ldr	r2, [sp, #72]	; 0x48
   1a194:	sub	r2, r2, r0
   1a198:	add	r0, r5, r0, lsl #3
   1a19c:	lsl	r2, r2, #3
   1a1a0:	bl	11198 <memset@plt>
   1a1a4:	ldr	r3, [sp, #72]	; 0x48
   1a1a8:	str	r3, [r4, #4]
   1a1ac:	ldr	sl, [r5]
   1a1b0:	add	r0, sp, #32
   1a1b4:	mvn	r3, #0
   1a1b8:	mov	r2, r6
   1a1bc:	ldr	r7, [sp, #28]
   1a1c0:	ldr	r4, [r5, #4]
   1a1c4:	mov	r1, sl
   1a1c8:	str	r0, [sp, #8]
   1a1cc:	ldr	lr, [sp, #24]
   1a1d0:	orr	r7, r7, #1
   1a1d4:	ldr	ip, [sp, #64]	; 0x40
   1a1d8:	mov	r0, r4
   1a1dc:	ldr	fp, [sp, #68]	; 0x44
   1a1e0:	str	lr, [sp]
   1a1e4:	str	r7, [sp, #4]
   1a1e8:	str	ip, [sp, #12]
   1a1ec:	str	fp, [sp, #16]
   1a1f0:	bl	17cac <__assert_fail@plt+0x69dc>
   1a1f4:	cmp	sl, r0
   1a1f8:	bhi	1a25c <__assert_fail@plt+0x8f8c>
   1a1fc:	add	sl, r0, #1
   1a200:	movw	r3, #61888	; 0xf1c0
   1a204:	movt	r3, #2
   1a208:	cmp	r4, r3
   1a20c:	str	sl, [r5]
   1a210:	beq	1a21c <__assert_fail@plt+0x8f4c>
   1a214:	mov	r0, r4
   1a218:	bl	13a30 <__assert_fail@plt+0x2760>
   1a21c:	mov	r0, sl
   1a220:	bl	1be1c <__assert_fail@plt+0xab4c>
   1a224:	ldr	r3, [sp, #24]
   1a228:	mov	r2, r6
   1a22c:	mov	r1, sl
   1a230:	mov	r4, r0
   1a234:	ldr	lr, [sp, #64]	; 0x40
   1a238:	ldr	ip, [sp, #68]	; 0x44
   1a23c:	str	r0, [r5, #4]
   1a240:	add	r5, sp, #32
   1a244:	stm	sp, {r3, r7}
   1a248:	mvn	r3, #0
   1a24c:	str	r5, [sp, #8]
   1a250:	str	lr, [sp, #12]
   1a254:	str	ip, [sp, #16]
   1a258:	bl	17cac <__assert_fail@plt+0x69dc>
   1a25c:	mov	r0, r4
   1a260:	str	r9, [r8]
   1a264:	add	sp, sp, #124	; 0x7c
   1a268:	ldrd	r4, [sp]
   1a26c:	ldrd	r6, [sp, #8]
   1a270:	ldrd	r8, [sp, #16]
   1a274:	ldrd	sl, [sp, #24]
   1a278:	add	sp, sp, #32
   1a27c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a280:	mov	r0, #8
   1a284:	mvn	r3, #-2147483648	; 0x80000000
   1a288:	add	r1, sp, #72	; 0x48
   1a28c:	str	r0, [sp]
   1a290:	mov	r0, #0
   1a294:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1a298:	ldrd	r2, [r4, #8]
   1a29c:	mov	r5, r0
   1a2a0:	str	r0, [r4]
   1a2a4:	strd	r2, [r0]
   1a2a8:	b	1a188 <__assert_fail@plt+0x8eb8>
   1a2ac:	bl	11294 <abort@plt>
   1a2b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a2b4:	cmp	r0, #10
   1a2b8:	strd	r6, [sp, #8]
   1a2bc:	mov	r6, #0
   1a2c0:	mov	r7, #0
   1a2c4:	strd	r8, [sp, #16]
   1a2c8:	strd	sl, [sp, #24]
   1a2cc:	str	lr, [sp, #32]
   1a2d0:	sub	sp, sp, #124	; 0x7c
   1a2d4:	strd	r6, [sp, #72]	; 0x48
   1a2d8:	strd	r6, [sp, #80]	; 0x50
   1a2dc:	strd	r6, [sp, #88]	; 0x58
   1a2e0:	strd	r6, [sp, #96]	; 0x60
   1a2e4:	strd	r6, [sp, #104]	; 0x68
   1a2e8:	strd	r6, [sp, #112]	; 0x70
   1a2ec:	beq	1a498 <__assert_fail@plt+0x91c8>
   1a2f0:	mov	sl, r2
   1a2f4:	movw	r5, #61752	; 0xf138
   1a2f8:	movt	r5, #2
   1a2fc:	str	r0, [sp, #72]	; 0x48
   1a300:	mov	r9, r1
   1a304:	ldrd	r2, [sp, #72]	; 0x48
   1a308:	strd	r2, [sp, #24]
   1a30c:	strd	r6, [sp, #32]
   1a310:	strd	r6, [sp, #40]	; 0x28
   1a314:	strd	r6, [sp, #48]	; 0x30
   1a318:	strd	r6, [sp, #56]	; 0x38
   1a31c:	strd	r6, [sp, #64]	; 0x40
   1a320:	bl	11180 <__errno_location@plt>
   1a324:	mov	r7, r0
   1a328:	ldr	r4, [r5]
   1a32c:	ldr	r2, [r5, #4]
   1a330:	ldr	fp, [r0]
   1a334:	cmp	r2, #0
   1a338:	bgt	1a394 <__assert_fail@plt+0x90c4>
   1a33c:	add	r3, r5, #8
   1a340:	str	r2, [sp, #72]	; 0x48
   1a344:	rsb	r2, r2, #1
   1a348:	cmp	r4, r3
   1a34c:	beq	1a46c <__assert_fail@plt+0x919c>
   1a350:	mov	r3, #8
   1a354:	mov	r0, r4
   1a358:	add	r1, sp, #72	; 0x48
   1a35c:	str	r3, [sp]
   1a360:	mvn	r3, #-2147483648	; 0x80000000
   1a364:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1a368:	mov	r4, r0
   1a36c:	str	r0, [r5]
   1a370:	ldr	r0, [r5, #4]
   1a374:	mov	r1, #0
   1a378:	ldr	r2, [sp, #72]	; 0x48
   1a37c:	sub	r2, r2, r0
   1a380:	add	r0, r4, r0, lsl #3
   1a384:	lsl	r2, r2, #3
   1a388:	bl	11198 <memset@plt>
   1a38c:	ldr	r3, [sp, #72]	; 0x48
   1a390:	str	r3, [r5, #4]
   1a394:	ldr	ip, [sp, #24]
   1a398:	add	r0, sp, #32
   1a39c:	mov	r3, sl
   1a3a0:	mov	r2, r9
   1a3a4:	ldr	r6, [sp, #28]
   1a3a8:	ldr	r8, [r4]
   1a3ac:	ldr	r5, [r4, #4]
   1a3b0:	str	ip, [sp]
   1a3b4:	orr	r6, r6, #1
   1a3b8:	ldr	ip, [sp, #64]	; 0x40
   1a3bc:	mov	r1, r8
   1a3c0:	str	r6, [sp, #4]
   1a3c4:	ldr	lr, [sp, #68]	; 0x44
   1a3c8:	str	r0, [sp, #8]
   1a3cc:	mov	r0, r5
   1a3d0:	str	ip, [sp, #12]
   1a3d4:	str	lr, [sp, #16]
   1a3d8:	bl	17cac <__assert_fail@plt+0x69dc>
   1a3dc:	cmp	r8, r0
   1a3e0:	bhi	1a448 <__assert_fail@plt+0x9178>
   1a3e4:	add	r8, r0, #1
   1a3e8:	movw	r3, #61888	; 0xf1c0
   1a3ec:	movt	r3, #2
   1a3f0:	cmp	r5, r3
   1a3f4:	str	r8, [r4]
   1a3f8:	beq	1a404 <__assert_fail@plt+0x9134>
   1a3fc:	mov	r0, r5
   1a400:	bl	13a30 <__assert_fail@plt+0x2760>
   1a404:	mov	r0, r8
   1a408:	bl	1be1c <__assert_fail@plt+0xab4c>
   1a40c:	ldr	lr, [sp, #24]
   1a410:	mov	r1, r8
   1a414:	mov	r3, sl
   1a418:	mov	r2, r9
   1a41c:	mov	r5, r0
   1a420:	ldr	r8, [sp, #64]	; 0x40
   1a424:	ldr	ip, [sp, #68]	; 0x44
   1a428:	str	r0, [r4, #4]
   1a42c:	str	lr, [sp]
   1a430:	add	lr, sp, #32
   1a434:	str	r6, [sp, #4]
   1a438:	str	lr, [sp, #8]
   1a43c:	str	r8, [sp, #12]
   1a440:	str	ip, [sp, #16]
   1a444:	bl	17cac <__assert_fail@plt+0x69dc>
   1a448:	mov	r0, r5
   1a44c:	str	fp, [r7]
   1a450:	add	sp, sp, #124	; 0x7c
   1a454:	ldrd	r4, [sp]
   1a458:	ldrd	r6, [sp, #8]
   1a45c:	ldrd	r8, [sp, #16]
   1a460:	ldrd	sl, [sp, #24]
   1a464:	add	sp, sp, #32
   1a468:	pop	{pc}		; (ldr pc, [sp], #4)
   1a46c:	mov	r0, #8
   1a470:	mvn	r3, #-2147483648	; 0x80000000
   1a474:	add	r1, sp, #72	; 0x48
   1a478:	str	r0, [sp]
   1a47c:	mov	r0, #0
   1a480:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1a484:	ldrd	r2, [r5, #8]
   1a488:	mov	r4, r0
   1a48c:	str	r0, [r5]
   1a490:	strd	r2, [r0]
   1a494:	b	1a370 <__assert_fail@plt+0x90a0>
   1a498:	bl	11294 <abort@plt>
   1a49c:	ldr	r3, [pc, #492]	; 1a690 <__assert_fail@plt+0x93c0>
   1a4a0:	lsr	ip, r2, #5
   1a4a4:	and	r2, r2, #31
   1a4a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4ac:	movw	r5, #61752	; 0xf138
   1a4b0:	movt	r5, #2
   1a4b4:	strd	r6, [sp, #8]
   1a4b8:	strd	r8, [sp, #16]
   1a4bc:	strd	sl, [sp, #24]
   1a4c0:	mov	sl, r0
   1a4c4:	mov	fp, r1
   1a4c8:	ldrd	r0, [r3]
   1a4cc:	str	lr, [sp, #32]
   1a4d0:	sub	sp, sp, #92	; 0x5c
   1a4d4:	ldrd	r8, [r3, #8]
   1a4d8:	add	r6, sp, #48	; 0x30
   1a4dc:	strd	r0, [sp, #40]	; 0x28
   1a4e0:	ldrd	r0, [r3, #16]
   1a4e4:	strd	r8, [sp, #48]	; 0x30
   1a4e8:	ldrd	r8, [r3, #24]
   1a4ec:	strd	r0, [sp, #56]	; 0x38
   1a4f0:	ldrd	r0, [r3, #32]
   1a4f4:	strd	r8, [sp, #64]	; 0x40
   1a4f8:	ldrd	r8, [r3, #40]	; 0x28
   1a4fc:	strd	r0, [sp, #72]	; 0x48
   1a500:	strd	r8, [sp, #80]	; 0x50
   1a504:	ldr	r3, [r6, ip, lsl #2]
   1a508:	mvn	r1, r3, lsr r2
   1a50c:	and	r1, r1, #1
   1a510:	eor	r2, r3, r1, lsl r2
   1a514:	str	r2, [r6, ip, lsl #2]
   1a518:	bl	11180 <__errno_location@plt>
   1a51c:	ldr	r3, [r0]
   1a520:	mov	r8, r0
   1a524:	ldr	r2, [r5, #4]
   1a528:	ldr	r4, [r5]
   1a52c:	str	r3, [sp, #28]
   1a530:	cmp	r2, #0
   1a534:	bgt	1a590 <__assert_fail@plt+0x92c0>
   1a538:	add	r3, r5, #8
   1a53c:	str	r2, [sp, #36]	; 0x24
   1a540:	rsb	r2, r2, #1
   1a544:	cmp	r4, r3
   1a548:	beq	1a664 <__assert_fail@plt+0x9394>
   1a54c:	mov	r1, #8
   1a550:	mov	r0, r4
   1a554:	mvn	r3, #-2147483648	; 0x80000000
   1a558:	str	r1, [sp]
   1a55c:	add	r1, sp, #36	; 0x24
   1a560:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1a564:	mov	r4, r0
   1a568:	str	r0, [r5]
   1a56c:	ldr	r0, [r5, #4]
   1a570:	mov	r1, #0
   1a574:	ldr	r2, [sp, #36]	; 0x24
   1a578:	sub	r2, r2, r0
   1a57c:	add	r0, r4, r0, lsl #3
   1a580:	lsl	r2, r2, #3
   1a584:	bl	11198 <memset@plt>
   1a588:	ldr	r3, [sp, #36]	; 0x24
   1a58c:	str	r3, [r5, #4]
   1a590:	ldr	ip, [sp, #40]	; 0x28
   1a594:	mov	r3, fp
   1a598:	mov	r2, sl
   1a59c:	ldr	r7, [sp, #44]	; 0x2c
   1a5a0:	ldr	r9, [r4]
   1a5a4:	ldr	r5, [r4, #4]
   1a5a8:	str	ip, [sp]
   1a5ac:	orr	r7, r7, #1
   1a5b0:	ldr	ip, [sp, #80]	; 0x50
   1a5b4:	mov	r1, r9
   1a5b8:	str	r7, [sp, #4]
   1a5bc:	ldr	lr, [sp, #84]	; 0x54
   1a5c0:	mov	r0, r5
   1a5c4:	str	r6, [sp, #8]
   1a5c8:	str	ip, [sp, #12]
   1a5cc:	str	lr, [sp, #16]
   1a5d0:	bl	17cac <__assert_fail@plt+0x69dc>
   1a5d4:	cmp	r9, r0
   1a5d8:	bhi	1a63c <__assert_fail@plt+0x936c>
   1a5dc:	add	r9, r0, #1
   1a5e0:	movw	r3, #61888	; 0xf1c0
   1a5e4:	movt	r3, #2
   1a5e8:	cmp	r5, r3
   1a5ec:	str	r9, [r4]
   1a5f0:	beq	1a5fc <__assert_fail@plt+0x932c>
   1a5f4:	mov	r0, r5
   1a5f8:	bl	13a30 <__assert_fail@plt+0x2760>
   1a5fc:	mov	r0, r9
   1a600:	bl	1be1c <__assert_fail@plt+0xab4c>
   1a604:	mov	r1, r9
   1a608:	ldr	ip, [sp, #40]	; 0x28
   1a60c:	mov	r3, fp
   1a610:	mov	r2, sl
   1a614:	mov	r5, r0
   1a618:	ldr	r9, [sp, #80]	; 0x50
   1a61c:	ldr	lr, [sp, #84]	; 0x54
   1a620:	str	r0, [r4, #4]
   1a624:	str	ip, [sp]
   1a628:	str	r7, [sp, #4]
   1a62c:	str	r6, [sp, #8]
   1a630:	str	r9, [sp, #12]
   1a634:	str	lr, [sp, #16]
   1a638:	bl	17cac <__assert_fail@plt+0x69dc>
   1a63c:	ldr	r3, [sp, #28]
   1a640:	mov	r0, r5
   1a644:	str	r3, [r8]
   1a648:	add	sp, sp, #92	; 0x5c
   1a64c:	ldrd	r4, [sp]
   1a650:	ldrd	r6, [sp, #8]
   1a654:	ldrd	r8, [sp, #16]
   1a658:	ldrd	sl, [sp, #24]
   1a65c:	add	sp, sp, #32
   1a660:	pop	{pc}		; (ldr pc, [sp], #4)
   1a664:	mov	r0, #8
   1a668:	mvn	r3, #-2147483648	; 0x80000000
   1a66c:	add	r1, sp, #36	; 0x24
   1a670:	str	r0, [sp]
   1a674:	mov	r0, #0
   1a678:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1a67c:	ldrd	r2, [r5, #8]
   1a680:	mov	r4, r0
   1a684:	str	r0, [r5]
   1a688:	strd	r2, [r0]
   1a68c:	b	1a56c <__assert_fail@plt+0x929c>
   1a690:	andeq	pc, r2, r0, asr #5
   1a694:	ldr	ip, [pc, #476]	; 1a878 <__assert_fail@plt+0x95a8>
   1a698:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a69c:	movw	r4, #61752	; 0xf138
   1a6a0:	movt	r4, #2
   1a6a4:	ldrd	r2, [ip, #8]
   1a6a8:	strd	r6, [sp, #8]
   1a6ac:	lsr	r7, r1, #5
   1a6b0:	mov	r6, r0
   1a6b4:	strd	r8, [sp, #16]
   1a6b8:	str	lr, [sp, #32]
   1a6bc:	and	lr, r1, #31
   1a6c0:	ldrd	r0, [ip]
   1a6c4:	strd	sl, [sp, #24]
   1a6c8:	sub	sp, sp, #84	; 0x54
   1a6cc:	add	r5, sp, #40	; 0x28
   1a6d0:	strd	r0, [sp, #32]
   1a6d4:	strd	r2, [sp, #40]	; 0x28
   1a6d8:	ldrd	r0, [ip, #16]
   1a6dc:	ldrd	r2, [ip, #24]
   1a6e0:	strd	r0, [sp, #48]	; 0x30
   1a6e4:	ldrd	r0, [ip, #32]
   1a6e8:	strd	r2, [sp, #56]	; 0x38
   1a6ec:	ldrd	r2, [ip, #40]	; 0x28
   1a6f0:	strd	r0, [sp, #64]	; 0x40
   1a6f4:	strd	r2, [sp, #72]	; 0x48
   1a6f8:	ldr	r1, [r5, r7, lsl #2]
   1a6fc:	mvn	r3, r1, lsr lr
   1a700:	and	r3, r3, #1
   1a704:	eor	r1, r1, r3, lsl lr
   1a708:	str	r1, [r5, r7, lsl #2]
   1a70c:	bl	11180 <__errno_location@plt>
   1a710:	mov	r9, r0
   1a714:	ldr	sl, [r0]
   1a718:	ldr	r2, [r4, #4]
   1a71c:	ldr	r7, [r4]
   1a720:	cmp	r2, #0
   1a724:	bgt	1a780 <__assert_fail@plt+0x94b0>
   1a728:	add	r3, r4, #8
   1a72c:	str	r2, [sp, #28]
   1a730:	rsb	r2, r2, #1
   1a734:	cmp	r7, r3
   1a738:	beq	1a84c <__assert_fail@plt+0x957c>
   1a73c:	mov	r1, #8
   1a740:	mov	r0, r7
   1a744:	mvn	r3, #-2147483648	; 0x80000000
   1a748:	str	r1, [sp]
   1a74c:	add	r1, sp, #28
   1a750:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1a754:	mov	r7, r0
   1a758:	str	r0, [r4]
   1a75c:	ldr	r0, [r4, #4]
   1a760:	mov	r1, #0
   1a764:	ldr	r2, [sp, #28]
   1a768:	sub	r2, r2, r0
   1a76c:	add	r0, r7, r0, lsl #3
   1a770:	lsl	r2, r2, #3
   1a774:	bl	11198 <memset@plt>
   1a778:	ldr	r3, [sp, #28]
   1a77c:	str	r3, [r4, #4]
   1a780:	ldr	ip, [sp, #32]
   1a784:	mvn	r3, #0
   1a788:	mov	r2, r6
   1a78c:	ldr	r8, [sp, #36]	; 0x24
   1a790:	ldr	fp, [r7]
   1a794:	ldr	r4, [r7, #4]
   1a798:	str	ip, [sp]
   1a79c:	orr	r8, r8, #1
   1a7a0:	ldr	ip, [sp, #72]	; 0x48
   1a7a4:	mov	r1, fp
   1a7a8:	str	r8, [sp, #4]
   1a7ac:	ldr	lr, [sp, #76]	; 0x4c
   1a7b0:	mov	r0, r4
   1a7b4:	str	r5, [sp, #8]
   1a7b8:	str	ip, [sp, #12]
   1a7bc:	str	lr, [sp, #16]
   1a7c0:	bl	17cac <__assert_fail@plt+0x69dc>
   1a7c4:	cmp	fp, r0
   1a7c8:	bhi	1a828 <__assert_fail@plt+0x9558>
   1a7cc:	add	fp, r0, #1
   1a7d0:	movw	r3, #61888	; 0xf1c0
   1a7d4:	movt	r3, #2
   1a7d8:	cmp	r4, r3
   1a7dc:	str	fp, [r7]
   1a7e0:	beq	1a7ec <__assert_fail@plt+0x951c>
   1a7e4:	mov	r0, r4
   1a7e8:	bl	13a30 <__assert_fail@plt+0x2760>
   1a7ec:	mov	r0, fp
   1a7f0:	bl	1be1c <__assert_fail@plt+0xab4c>
   1a7f4:	ldr	r3, [sp, #32]
   1a7f8:	mov	r2, r6
   1a7fc:	mov	r1, fp
   1a800:	mov	r4, r0
   1a804:	ldr	lr, [sp, #72]	; 0x48
   1a808:	ldr	ip, [sp, #76]	; 0x4c
   1a80c:	str	r0, [r7, #4]
   1a810:	stm	sp, {r3, r8}
   1a814:	mvn	r3, #0
   1a818:	str	r5, [sp, #8]
   1a81c:	str	lr, [sp, #12]
   1a820:	str	ip, [sp, #16]
   1a824:	bl	17cac <__assert_fail@plt+0x69dc>
   1a828:	mov	r0, r4
   1a82c:	str	sl, [r9]
   1a830:	add	sp, sp, #84	; 0x54
   1a834:	ldrd	r4, [sp]
   1a838:	ldrd	r6, [sp, #8]
   1a83c:	ldrd	r8, [sp, #16]
   1a840:	ldrd	sl, [sp, #24]
   1a844:	add	sp, sp, #32
   1a848:	pop	{pc}		; (ldr pc, [sp], #4)
   1a84c:	mov	r0, #8
   1a850:	mvn	r3, #-2147483648	; 0x80000000
   1a854:	add	r1, sp, #28
   1a858:	str	r0, [sp]
   1a85c:	mov	r0, #0
   1a860:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1a864:	ldrd	r2, [r4, #8]
   1a868:	mov	r7, r0
   1a86c:	str	r0, [r4]
   1a870:	strd	r2, [r0]
   1a874:	b	1a75c <__assert_fail@plt+0x948c>
   1a878:	andeq	pc, r2, r0, asr #5
   1a87c:	ldr	ip, [pc, #472]	; 1aa5c <__assert_fail@plt+0x978c>
   1a880:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a884:	mov	r5, r0
   1a888:	movw	r4, #61752	; 0xf138
   1a88c:	movt	r4, #2
   1a890:	ldrd	r2, [ip]
   1a894:	ldrd	r0, [ip, #8]
   1a898:	strd	r6, [sp, #8]
   1a89c:	strd	r8, [sp, #16]
   1a8a0:	strd	sl, [sp, #24]
   1a8a4:	str	lr, [sp, #32]
   1a8a8:	sub	sp, sp, #84	; 0x54
   1a8ac:	strd	r2, [sp, #32]
   1a8b0:	strd	r0, [sp, #40]	; 0x28
   1a8b4:	ldr	r6, [sp, #44]	; 0x2c
   1a8b8:	ldrd	r2, [ip, #16]
   1a8bc:	ldrd	r0, [ip, #24]
   1a8c0:	mvn	lr, r6
   1a8c4:	and	lr, lr, #67108864	; 0x4000000
   1a8c8:	eor	lr, lr, r6
   1a8cc:	ldrd	r6, [ip, #40]	; 0x28
   1a8d0:	strd	r2, [sp, #48]	; 0x30
   1a8d4:	ldrd	r2, [ip, #32]
   1a8d8:	str	lr, [sp, #44]	; 0x2c
   1a8dc:	strd	r0, [sp, #56]	; 0x38
   1a8e0:	strd	r2, [sp, #64]	; 0x40
   1a8e4:	strd	r6, [sp, #72]	; 0x48
   1a8e8:	bl	11180 <__errno_location@plt>
   1a8ec:	mov	r8, r0
   1a8f0:	ldr	r9, [r0]
   1a8f4:	ldr	r2, [r4, #4]
   1a8f8:	ldr	r6, [r4]
   1a8fc:	cmp	r2, #0
   1a900:	bgt	1a95c <__assert_fail@plt+0x968c>
   1a904:	add	r3, r4, #8
   1a908:	str	r2, [sp, #28]
   1a90c:	rsb	r2, r2, #1
   1a910:	cmp	r6, r3
   1a914:	beq	1aa30 <__assert_fail@plt+0x9760>
   1a918:	mov	r1, #8
   1a91c:	mov	r0, r6
   1a920:	mvn	r3, #-2147483648	; 0x80000000
   1a924:	str	r1, [sp]
   1a928:	add	r1, sp, #28
   1a92c:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1a930:	mov	r6, r0
   1a934:	str	r0, [r4]
   1a938:	ldr	r0, [r4, #4]
   1a93c:	mov	r1, #0
   1a940:	ldr	r2, [sp, #28]
   1a944:	sub	r2, r2, r0
   1a948:	add	r0, r6, r0, lsl #3
   1a94c:	lsl	r2, r2, #3
   1a950:	bl	11198 <memset@plt>
   1a954:	ldr	r3, [sp, #28]
   1a958:	str	r3, [r4, #4]
   1a95c:	ldr	sl, [r6]
   1a960:	add	r0, sp, #40	; 0x28
   1a964:	mvn	r3, #0
   1a968:	mov	r2, r5
   1a96c:	ldr	r7, [sp, #36]	; 0x24
   1a970:	ldr	r4, [r6, #4]
   1a974:	mov	r1, sl
   1a978:	str	r0, [sp, #8]
   1a97c:	ldr	lr, [sp, #32]
   1a980:	orr	r7, r7, #1
   1a984:	ldr	ip, [sp, #72]	; 0x48
   1a988:	mov	r0, r4
   1a98c:	ldr	fp, [sp, #76]	; 0x4c
   1a990:	str	lr, [sp]
   1a994:	str	r7, [sp, #4]
   1a998:	str	ip, [sp, #12]
   1a99c:	str	fp, [sp, #16]
   1a9a0:	bl	17cac <__assert_fail@plt+0x69dc>
   1a9a4:	cmp	sl, r0
   1a9a8:	bhi	1aa0c <__assert_fail@plt+0x973c>
   1a9ac:	add	sl, r0, #1
   1a9b0:	movw	r3, #61888	; 0xf1c0
   1a9b4:	movt	r3, #2
   1a9b8:	cmp	r4, r3
   1a9bc:	str	sl, [r6]
   1a9c0:	beq	1a9cc <__assert_fail@plt+0x96fc>
   1a9c4:	mov	r0, r4
   1a9c8:	bl	13a30 <__assert_fail@plt+0x2760>
   1a9cc:	mov	r0, sl
   1a9d0:	bl	1be1c <__assert_fail@plt+0xab4c>
   1a9d4:	ldr	r3, [sp, #32]
   1a9d8:	mov	r2, r5
   1a9dc:	add	r5, sp, #40	; 0x28
   1a9e0:	mov	r1, sl
   1a9e4:	mov	r4, r0
   1a9e8:	ldr	lr, [sp, #72]	; 0x48
   1a9ec:	ldr	ip, [sp, #76]	; 0x4c
   1a9f0:	str	r0, [r6, #4]
   1a9f4:	stm	sp, {r3, r7}
   1a9f8:	mvn	r3, #0
   1a9fc:	str	r5, [sp, #8]
   1aa00:	str	lr, [sp, #12]
   1aa04:	str	ip, [sp, #16]
   1aa08:	bl	17cac <__assert_fail@plt+0x69dc>
   1aa0c:	mov	r0, r4
   1aa10:	str	r9, [r8]
   1aa14:	add	sp, sp, #84	; 0x54
   1aa18:	ldrd	r4, [sp]
   1aa1c:	ldrd	r6, [sp, #8]
   1aa20:	ldrd	r8, [sp, #16]
   1aa24:	ldrd	sl, [sp, #24]
   1aa28:	add	sp, sp, #32
   1aa2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa30:	mov	r0, #8
   1aa34:	mvn	r3, #-2147483648	; 0x80000000
   1aa38:	add	r1, sp, #28
   1aa3c:	str	r0, [sp]
   1aa40:	mov	r0, #0
   1aa44:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1aa48:	ldrd	r2, [r4, #8]
   1aa4c:	mov	r6, r0
   1aa50:	str	r0, [r4]
   1aa54:	strd	r2, [r0]
   1aa58:	b	1a938 <__assert_fail@plt+0x9668>
   1aa5c:	andeq	pc, r2, r0, asr #5
   1aa60:	ldr	ip, [pc, #480]	; 1ac48 <__assert_fail@plt+0x9978>
   1aa64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa68:	mov	r5, r0
   1aa6c:	movw	r4, #61752	; 0xf138
   1aa70:	movt	r4, #2
   1aa74:	ldrd	r2, [ip]
   1aa78:	strd	r6, [sp, #8]
   1aa7c:	mov	r6, r1
   1aa80:	ldrd	r0, [ip, #8]
   1aa84:	strd	r8, [sp, #16]
   1aa88:	strd	sl, [sp, #24]
   1aa8c:	str	lr, [sp, #32]
   1aa90:	sub	sp, sp, #84	; 0x54
   1aa94:	ldrd	r8, [ip, #40]	; 0x28
   1aa98:	strd	r2, [sp, #32]
   1aa9c:	strd	r0, [sp, #40]	; 0x28
   1aaa0:	ldrd	r2, [ip, #16]
   1aaa4:	ldr	r7, [sp, #44]	; 0x2c
   1aaa8:	ldrd	r0, [ip, #24]
   1aaac:	strd	r2, [sp, #48]	; 0x30
   1aab0:	ldrd	r2, [ip, #32]
   1aab4:	mvn	lr, r7
   1aab8:	and	lr, lr, #67108864	; 0x4000000
   1aabc:	eor	lr, lr, r7
   1aac0:	str	lr, [sp, #44]	; 0x2c
   1aac4:	strd	r0, [sp, #56]	; 0x38
   1aac8:	strd	r2, [sp, #64]	; 0x40
   1aacc:	strd	r8, [sp, #72]	; 0x48
   1aad0:	bl	11180 <__errno_location@plt>
   1aad4:	mov	r9, r0
   1aad8:	ldr	sl, [r0]
   1aadc:	ldr	r2, [r4, #4]
   1aae0:	ldr	r7, [r4]
   1aae4:	cmp	r2, #0
   1aae8:	bgt	1ab44 <__assert_fail@plt+0x9874>
   1aaec:	add	r3, r4, #8
   1aaf0:	str	r2, [sp, #28]
   1aaf4:	rsb	r2, r2, #1
   1aaf8:	cmp	r7, r3
   1aafc:	beq	1ac1c <__assert_fail@plt+0x994c>
   1ab00:	mov	r1, #8
   1ab04:	mov	r0, r7
   1ab08:	mvn	r3, #-2147483648	; 0x80000000
   1ab0c:	str	r1, [sp]
   1ab10:	add	r1, sp, #28
   1ab14:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1ab18:	mov	r7, r0
   1ab1c:	str	r0, [r4]
   1ab20:	ldr	r0, [r4, #4]
   1ab24:	mov	r1, #0
   1ab28:	ldr	r2, [sp, #28]
   1ab2c:	sub	r2, r2, r0
   1ab30:	add	r0, r7, r0, lsl #3
   1ab34:	lsl	r2, r2, #3
   1ab38:	bl	11198 <memset@plt>
   1ab3c:	ldr	r3, [sp, #28]
   1ab40:	str	r3, [r4, #4]
   1ab44:	ldr	ip, [sp, #32]
   1ab48:	add	r0, sp, #40	; 0x28
   1ab4c:	mov	r3, r6
   1ab50:	mov	r2, r5
   1ab54:	ldr	r8, [sp, #36]	; 0x24
   1ab58:	ldr	fp, [r7]
   1ab5c:	ldr	r4, [r7, #4]
   1ab60:	str	ip, [sp]
   1ab64:	orr	r8, r8, #1
   1ab68:	ldr	ip, [sp, #72]	; 0x48
   1ab6c:	mov	r1, fp
   1ab70:	str	r8, [sp, #4]
   1ab74:	ldr	lr, [sp, #76]	; 0x4c
   1ab78:	str	r0, [sp, #8]
   1ab7c:	mov	r0, r4
   1ab80:	str	ip, [sp, #12]
   1ab84:	str	lr, [sp, #16]
   1ab88:	bl	17cac <__assert_fail@plt+0x69dc>
   1ab8c:	cmp	fp, r0
   1ab90:	bhi	1abf8 <__assert_fail@plt+0x9928>
   1ab94:	add	fp, r0, #1
   1ab98:	movw	r3, #61888	; 0xf1c0
   1ab9c:	movt	r3, #2
   1aba0:	cmp	r4, r3
   1aba4:	str	fp, [r7]
   1aba8:	beq	1abb4 <__assert_fail@plt+0x98e4>
   1abac:	mov	r0, r4
   1abb0:	bl	13a30 <__assert_fail@plt+0x2760>
   1abb4:	mov	r0, fp
   1abb8:	bl	1be1c <__assert_fail@plt+0xab4c>
   1abbc:	ldr	lr, [sp, #32]
   1abc0:	mov	r2, r5
   1abc4:	mov	r3, r6
   1abc8:	mov	r1, fp
   1abcc:	mov	r4, r0
   1abd0:	ldr	r5, [sp, #72]	; 0x48
   1abd4:	ldr	ip, [sp, #76]	; 0x4c
   1abd8:	str	r0, [r7, #4]
   1abdc:	str	lr, [sp]
   1abe0:	add	lr, sp, #40	; 0x28
   1abe4:	str	r8, [sp, #4]
   1abe8:	str	lr, [sp, #8]
   1abec:	str	r5, [sp, #12]
   1abf0:	str	ip, [sp, #16]
   1abf4:	bl	17cac <__assert_fail@plt+0x69dc>
   1abf8:	mov	r0, r4
   1abfc:	str	sl, [r9]
   1ac00:	add	sp, sp, #84	; 0x54
   1ac04:	ldrd	r4, [sp]
   1ac08:	ldrd	r6, [sp, #8]
   1ac0c:	ldrd	r8, [sp, #16]
   1ac10:	ldrd	sl, [sp, #24]
   1ac14:	add	sp, sp, #32
   1ac18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac1c:	mov	r0, #8
   1ac20:	mvn	r3, #-2147483648	; 0x80000000
   1ac24:	add	r1, sp, #28
   1ac28:	str	r0, [sp]
   1ac2c:	mov	r0, #0
   1ac30:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1ac34:	ldrd	r2, [r4, #8]
   1ac38:	mov	r7, r0
   1ac3c:	str	r0, [r4]
   1ac40:	strd	r2, [r0]
   1ac44:	b	1ab20 <__assert_fail@plt+0x9850>
   1ac48:	andeq	pc, r2, r0, asr #5
   1ac4c:	strd	r4, [sp, #-12]!
   1ac50:	mov	r4, #0
   1ac54:	mov	r5, #0
   1ac58:	str	lr, [sp, #8]
   1ac5c:	sub	sp, sp, #100	; 0x64
   1ac60:	cmp	r1, #10
   1ac64:	strd	r4, [sp]
   1ac68:	strd	r4, [sp, #8]
   1ac6c:	strd	r4, [sp, #16]
   1ac70:	strd	r4, [sp, #24]
   1ac74:	strd	r4, [sp, #32]
   1ac78:	strd	r4, [sp, #40]	; 0x28
   1ac7c:	beq	1acac <__assert_fail@plt+0x99dc>
   1ac80:	mov	ip, #67108864	; 0x4000000
   1ac84:	mov	r3, sp
   1ac88:	str	r1, [sp]
   1ac8c:	mov	r1, r2
   1ac90:	mvn	r2, #0
   1ac94:	str	ip, [sp, #12]
   1ac98:	bl	19698 <__assert_fail@plt+0x83c8>
   1ac9c:	add	sp, sp, #100	; 0x64
   1aca0:	ldrd	r4, [sp]
   1aca4:	add	sp, sp, #8
   1aca8:	pop	{pc}		; (ldr pc, [sp], #4)
   1acac:	bl	11294 <abort@plt>
   1acb0:	ldr	ip, [pc, #156]	; 1ad54 <__assert_fail@plt+0x9a84>
   1acb4:	cmp	r2, #0
   1acb8:	cmpne	r1, #0
   1acbc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1acc0:	strd	r6, [sp, #8]
   1acc4:	mov	r6, r2
   1acc8:	str	r8, [sp, #16]
   1accc:	mov	r8, r3
   1acd0:	strd	sl, [sp, #20]
   1acd4:	ldrd	r4, [ip]
   1acd8:	str	lr, [sp, #28]
   1acdc:	sub	sp, sp, #48	; 0x30
   1ace0:	mov	lr, #10
   1ace4:	ldrd	r2, [ip, #8]
   1ace8:	ldrd	sl, [ip, #16]
   1acec:	strd	r4, [sp]
   1acf0:	ldrd	r4, [ip, #32]
   1acf4:	str	lr, [sp]
   1acf8:	strd	r2, [sp, #8]
   1acfc:	strd	sl, [sp, #16]
   1ad00:	ldrd	r2, [ip, #24]
   1ad04:	ldrd	sl, [ip, #40]	; 0x28
   1ad08:	strd	r2, [sp, #24]
   1ad0c:	strd	r4, [sp, #32]
   1ad10:	strd	sl, [sp, #40]	; 0x28
   1ad14:	beq	1ad50 <__assert_fail@plt+0x9a80>
   1ad18:	mov	r7, r1
   1ad1c:	mov	r3, sp
   1ad20:	mov	r1, r8
   1ad24:	mvn	r2, #0
   1ad28:	str	r7, [sp, #40]	; 0x28
   1ad2c:	str	r6, [sp, #44]	; 0x2c
   1ad30:	bl	19698 <__assert_fail@plt+0x83c8>
   1ad34:	add	sp, sp, #48	; 0x30
   1ad38:	ldrd	r4, [sp]
   1ad3c:	ldrd	r6, [sp, #8]
   1ad40:	ldr	r8, [sp, #16]
   1ad44:	ldrd	sl, [sp, #20]
   1ad48:	add	sp, sp, #28
   1ad4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad50:	bl	11294 <abort@plt>
   1ad54:	andeq	pc, r2, r0, asr #5
   1ad58:	ldr	ip, [pc, #156]	; 1adfc <__assert_fail@plt+0x9b2c>
   1ad5c:	cmp	r2, #0
   1ad60:	cmpne	r1, #0
   1ad64:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1ad68:	strd	r6, [sp, #8]
   1ad6c:	mov	r6, r2
   1ad70:	str	r8, [sp, #16]
   1ad74:	mov	r8, r3
   1ad78:	strd	sl, [sp, #20]
   1ad7c:	ldrd	r4, [ip]
   1ad80:	str	lr, [sp, #28]
   1ad84:	sub	sp, sp, #48	; 0x30
   1ad88:	mov	lr, #10
   1ad8c:	ldrd	r2, [ip, #8]
   1ad90:	ldrd	sl, [ip, #16]
   1ad94:	strd	r4, [sp]
   1ad98:	ldrd	r4, [ip, #32]
   1ad9c:	str	lr, [sp]
   1ada0:	strd	r2, [sp, #8]
   1ada4:	strd	sl, [sp, #16]
   1ada8:	ldrd	r2, [ip, #24]
   1adac:	ldrd	sl, [ip, #40]	; 0x28
   1adb0:	strd	r2, [sp, #24]
   1adb4:	strd	r4, [sp, #32]
   1adb8:	strd	sl, [sp, #40]	; 0x28
   1adbc:	beq	1adf8 <__assert_fail@plt+0x9b28>
   1adc0:	ldr	r2, [sp, #80]	; 0x50
   1adc4:	mov	r7, r1
   1adc8:	mov	r3, sp
   1adcc:	mov	r1, r8
   1add0:	str	r7, [sp, #40]	; 0x28
   1add4:	str	r6, [sp, #44]	; 0x2c
   1add8:	bl	19698 <__assert_fail@plt+0x83c8>
   1addc:	add	sp, sp, #48	; 0x30
   1ade0:	ldrd	r4, [sp]
   1ade4:	ldrd	r6, [sp, #8]
   1ade8:	ldr	r8, [sp, #16]
   1adec:	ldrd	sl, [sp, #20]
   1adf0:	add	sp, sp, #28
   1adf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1adf8:	bl	11294 <abort@plt>
   1adfc:	andeq	pc, r2, r0, asr #5
   1ae00:	ldr	ip, [pc, #512]	; 1b008 <__assert_fail@plt+0x9d38>
   1ae04:	cmp	r0, #0
   1ae08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ae0c:	ldrd	r4, [ip, #16]
   1ae10:	strd	r6, [sp, #8]
   1ae14:	clz	r6, r1
   1ae18:	mov	r7, r1
   1ae1c:	strd	r8, [sp, #16]
   1ae20:	mov	r8, r0
   1ae24:	lsr	r6, r6, #5
   1ae28:	strd	sl, [sp, #24]
   1ae2c:	mov	fp, r2
   1ae30:	mov	sl, #10
   1ae34:	ldrd	r2, [ip]
   1ae38:	moveq	r6, #1
   1ae3c:	str	lr, [sp, #32]
   1ae40:	sub	sp, sp, #92	; 0x5c
   1ae44:	cmp	r6, #0
   1ae48:	ldrd	r0, [ip, #8]
   1ae4c:	strd	r2, [sp, #40]	; 0x28
   1ae50:	strd	r4, [sp, #56]	; 0x38
   1ae54:	ldrd	r2, [ip, #24]
   1ae58:	strd	r0, [sp, #48]	; 0x30
   1ae5c:	ldrd	r0, [ip, #32]
   1ae60:	str	sl, [sp, #40]	; 0x28
   1ae64:	ldrd	r4, [ip, #40]	; 0x28
   1ae68:	strd	r2, [sp, #64]	; 0x40
   1ae6c:	strd	r0, [sp, #72]	; 0x48
   1ae70:	strd	r4, [sp, #80]	; 0x50
   1ae74:	bne	1b004 <__assert_fail@plt+0x9d34>
   1ae78:	movw	r5, #61752	; 0xf138
   1ae7c:	movt	r5, #2
   1ae80:	str	r8, [sp, #80]	; 0x50
   1ae84:	str	r7, [sp, #84]	; 0x54
   1ae88:	bl	11180 <__errno_location@plt>
   1ae8c:	ldr	r3, [r0]
   1ae90:	mov	r9, r0
   1ae94:	ldr	r2, [r5, #4]
   1ae98:	ldr	r4, [r5]
   1ae9c:	str	r3, [sp, #28]
   1aea0:	cmp	r2, #0
   1aea4:	movgt	r1, sl
   1aea8:	bgt	1af10 <__assert_fail@plt+0x9c40>
   1aeac:	add	r3, r5, #8
   1aeb0:	str	r2, [sp, #36]	; 0x24
   1aeb4:	rsb	r2, r2, #1
   1aeb8:	cmp	r4, r3
   1aebc:	beq	1afd8 <__assert_fail@plt+0x9d08>
   1aec0:	mov	r1, #8
   1aec4:	mov	r0, r4
   1aec8:	mvn	r3, #-2147483648	; 0x80000000
   1aecc:	str	r1, [sp]
   1aed0:	add	r1, sp, #36	; 0x24
   1aed4:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1aed8:	mov	r4, r0
   1aedc:	str	r0, [r5]
   1aee0:	ldr	r0, [r5, #4]
   1aee4:	mov	r1, #0
   1aee8:	ldr	r2, [sp, #36]	; 0x24
   1aeec:	sub	r2, r2, r0
   1aef0:	add	r0, r4, r0, lsl #3
   1aef4:	lsl	r2, r2, #3
   1aef8:	bl	11198 <memset@plt>
   1aefc:	ldr	r3, [sp, #36]	; 0x24
   1af00:	ldr	r1, [sp, #40]	; 0x28
   1af04:	ldr	r8, [sp, #80]	; 0x50
   1af08:	str	r3, [r5, #4]
   1af0c:	ldr	r7, [sp, #84]	; 0x54
   1af10:	mvn	r3, #0
   1af14:	mov	r2, fp
   1af18:	ldr	r6, [sp, #44]	; 0x2c
   1af1c:	ldr	sl, [r4]
   1af20:	ldr	r5, [r4, #4]
   1af24:	orr	r6, r6, #1
   1af28:	stm	sp, {r1, r6}
   1af2c:	add	r1, sp, #48	; 0x30
   1af30:	str	r8, [sp, #12]
   1af34:	mov	r0, r5
   1af38:	str	r1, [sp, #8]
   1af3c:	mov	r1, sl
   1af40:	str	r7, [sp, #16]
   1af44:	bl	17cac <__assert_fail@plt+0x69dc>
   1af48:	cmp	sl, r0
   1af4c:	bhi	1afb0 <__assert_fail@plt+0x9ce0>
   1af50:	add	r7, r0, #1
   1af54:	movw	r3, #61888	; 0xf1c0
   1af58:	movt	r3, #2
   1af5c:	cmp	r5, r3
   1af60:	str	r7, [r4]
   1af64:	beq	1af70 <__assert_fail@plt+0x9ca0>
   1af68:	mov	r0, r5
   1af6c:	bl	13a30 <__assert_fail@plt+0x2760>
   1af70:	mov	r0, r7
   1af74:	bl	1be1c <__assert_fail@plt+0xab4c>
   1af78:	ldr	r3, [sp, #40]	; 0x28
   1af7c:	mov	r2, fp
   1af80:	mov	r1, r7
   1af84:	mov	r5, r0
   1af88:	ldr	lr, [sp, #80]	; 0x50
   1af8c:	ldr	ip, [sp, #84]	; 0x54
   1af90:	str	r0, [r4, #4]
   1af94:	add	r4, sp, #48	; 0x30
   1af98:	stm	sp, {r3, r6}
   1af9c:	mvn	r3, #0
   1afa0:	str	r4, [sp, #8]
   1afa4:	str	lr, [sp, #12]
   1afa8:	str	ip, [sp, #16]
   1afac:	bl	17cac <__assert_fail@plt+0x69dc>
   1afb0:	ldr	r3, [sp, #28]
   1afb4:	mov	r0, r5
   1afb8:	str	r3, [r9]
   1afbc:	add	sp, sp, #92	; 0x5c
   1afc0:	ldrd	r4, [sp]
   1afc4:	ldrd	r6, [sp, #8]
   1afc8:	ldrd	r8, [sp, #16]
   1afcc:	ldrd	sl, [sp, #24]
   1afd0:	add	sp, sp, #32
   1afd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1afd8:	mov	r1, #8
   1afdc:	mvn	r3, #-2147483648	; 0x80000000
   1afe0:	mov	r0, r6
   1afe4:	str	r1, [sp]
   1afe8:	add	r1, sp, #36	; 0x24
   1afec:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1aff0:	ldrd	r2, [r5, #8]
   1aff4:	mov	r4, r0
   1aff8:	str	r0, [r5]
   1affc:	strd	r2, [r0]
   1b000:	b	1aee0 <__assert_fail@plt+0x9c10>
   1b004:	bl	11294 <abort@plt>
   1b008:	andeq	pc, r2, r0, asr #5
   1b00c:	ldr	ip, [pc, #536]	; 1b22c <__assert_fail@plt+0x9f5c>
   1b010:	cmp	r0, #0
   1b014:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b018:	ldrd	r4, [ip, #16]
   1b01c:	strd	r6, [sp, #8]
   1b020:	mov	r6, r1
   1b024:	mov	r7, r0
   1b028:	strd	r8, [sp, #16]
   1b02c:	mov	r9, #10
   1b030:	strd	sl, [sp, #24]
   1b034:	mov	sl, r2
   1b038:	mov	fp, r3
   1b03c:	str	lr, [sp, #32]
   1b040:	clz	lr, r1
   1b044:	sub	sp, sp, #92	; 0x5c
   1b048:	ldrd	r2, [ip]
   1b04c:	lsr	lr, lr, #5
   1b050:	moveq	lr, #1
   1b054:	ldrd	r0, [ip, #8]
   1b058:	cmp	lr, #0
   1b05c:	strd	r4, [sp, #56]	; 0x38
   1b060:	ldrd	r4, [ip, #40]	; 0x28
   1b064:	str	lr, [sp, #28]
   1b068:	strd	r2, [sp, #40]	; 0x28
   1b06c:	ldrd	r2, [ip, #24]
   1b070:	strd	r0, [sp, #48]	; 0x30
   1b074:	ldrd	r0, [ip, #32]
   1b078:	str	r9, [sp, #40]	; 0x28
   1b07c:	strd	r2, [sp, #64]	; 0x40
   1b080:	strd	r4, [sp, #80]	; 0x50
   1b084:	strd	r0, [sp, #72]	; 0x48
   1b088:	bne	1b228 <__assert_fail@plt+0x9f58>
   1b08c:	movw	r5, #61752	; 0xf138
   1b090:	movt	r5, #2
   1b094:	str	r7, [sp, #80]	; 0x50
   1b098:	str	r6, [sp, #84]	; 0x54
   1b09c:	bl	11180 <__errno_location@plt>
   1b0a0:	ldr	r3, [r0]
   1b0a4:	mov	r8, r0
   1b0a8:	ldr	r2, [r5, #4]
   1b0ac:	ldr	r4, [r5]
   1b0b0:	str	r3, [sp, #24]
   1b0b4:	cmp	r2, #0
   1b0b8:	movgt	r1, r9
   1b0bc:	bgt	1b124 <__assert_fail@plt+0x9e54>
   1b0c0:	add	r3, r5, #8
   1b0c4:	str	r2, [sp, #36]	; 0x24
   1b0c8:	rsb	r2, r2, #1
   1b0cc:	cmp	r4, r3
   1b0d0:	beq	1b1fc <__assert_fail@plt+0x9f2c>
   1b0d4:	mov	r1, #8
   1b0d8:	mov	r0, r4
   1b0dc:	mvn	r3, #-2147483648	; 0x80000000
   1b0e0:	str	r1, [sp]
   1b0e4:	add	r1, sp, #36	; 0x24
   1b0e8:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1b0ec:	mov	r4, r0
   1b0f0:	str	r0, [r5]
   1b0f4:	ldr	r0, [r5, #4]
   1b0f8:	mov	r1, #0
   1b0fc:	ldr	r2, [sp, #36]	; 0x24
   1b100:	sub	r2, r2, r0
   1b104:	add	r0, r4, r0, lsl #3
   1b108:	lsl	r2, r2, #3
   1b10c:	bl	11198 <memset@plt>
   1b110:	ldr	r3, [sp, #36]	; 0x24
   1b114:	ldr	r1, [sp, #40]	; 0x28
   1b118:	ldr	r7, [sp, #80]	; 0x50
   1b11c:	str	r3, [r5, #4]
   1b120:	ldr	r6, [sp, #84]	; 0x54
   1b124:	mov	r3, fp
   1b128:	mov	r2, sl
   1b12c:	ldr	r0, [sp, #44]	; 0x2c
   1b130:	ldr	r9, [r4]
   1b134:	ldr	r5, [r4, #4]
   1b138:	orr	r0, r0, #1
   1b13c:	str	r1, [sp]
   1b140:	add	r1, sp, #48	; 0x30
   1b144:	str	r0, [sp, #4]
   1b148:	str	r1, [sp, #8]
   1b14c:	mov	r1, r9
   1b150:	str	r7, [sp, #12]
   1b154:	str	r6, [sp, #16]
   1b158:	str	r0, [sp, #28]
   1b15c:	mov	r0, r5
   1b160:	bl	17cac <__assert_fail@plt+0x69dc>
   1b164:	cmp	r9, r0
   1b168:	bhi	1b1d4 <__assert_fail@plt+0x9f04>
   1b16c:	add	r6, r0, #1
   1b170:	movw	r3, #61888	; 0xf1c0
   1b174:	movt	r3, #2
   1b178:	cmp	r5, r3
   1b17c:	str	r6, [r4]
   1b180:	beq	1b18c <__assert_fail@plt+0x9ebc>
   1b184:	mov	r0, r5
   1b188:	bl	13a30 <__assert_fail@plt+0x2760>
   1b18c:	mov	r0, r6
   1b190:	bl	1be1c <__assert_fail@plt+0xab4c>
   1b194:	ldr	lr, [sp, #40]	; 0x28
   1b198:	mov	r1, r6
   1b19c:	mov	r3, fp
   1b1a0:	mov	r2, sl
   1b1a4:	mov	r5, r0
   1b1a8:	ldr	r6, [sp, #80]	; 0x50
   1b1ac:	ldr	ip, [sp, #84]	; 0x54
   1b1b0:	str	r0, [r4, #4]
   1b1b4:	str	lr, [sp]
   1b1b8:	ldr	lr, [sp, #28]
   1b1bc:	str	lr, [sp, #4]
   1b1c0:	add	lr, sp, #48	; 0x30
   1b1c4:	str	r6, [sp, #12]
   1b1c8:	str	lr, [sp, #8]
   1b1cc:	str	ip, [sp, #16]
   1b1d0:	bl	17cac <__assert_fail@plt+0x69dc>
   1b1d4:	ldr	r3, [sp, #24]
   1b1d8:	mov	r0, r5
   1b1dc:	str	r3, [r8]
   1b1e0:	add	sp, sp, #92	; 0x5c
   1b1e4:	ldrd	r4, [sp]
   1b1e8:	ldrd	r6, [sp, #8]
   1b1ec:	ldrd	r8, [sp, #16]
   1b1f0:	ldrd	sl, [sp, #24]
   1b1f4:	add	sp, sp, #32
   1b1f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1fc:	mov	r1, #8
   1b200:	mvn	r3, #-2147483648	; 0x80000000
   1b204:	ldr	r0, [sp, #28]
   1b208:	str	r1, [sp]
   1b20c:	add	r1, sp, #36	; 0x24
   1b210:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1b214:	ldrd	r2, [r5, #8]
   1b218:	mov	r4, r0
   1b21c:	str	r0, [r5]
   1b220:	strd	r2, [r0]
   1b224:	b	1b0f4 <__assert_fail@plt+0x9e24>
   1b228:	bl	11294 <abort@plt>
   1b22c:	andeq	pc, r2, r0, asr #5
   1b230:	ldr	r3, [pc]	; 1b238 <__assert_fail@plt+0x9f68>
   1b234:	b	19698 <__assert_fail@plt+0x83c8>
   1b238:	andeq	pc, r2, r8, asr #2
   1b23c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b240:	movw	r4, #61752	; 0xf138
   1b244:	movt	r4, #2
   1b248:	strd	r6, [sp, #8]
   1b24c:	strd	r8, [sp, #16]
   1b250:	strd	sl, [sp, #24]
   1b254:	mov	sl, r0
   1b258:	mov	fp, r1
   1b25c:	str	lr, [sp, #32]
   1b260:	sub	sp, sp, #44	; 0x2c
   1b264:	bl	11180 <__errno_location@plt>
   1b268:	ldr	r3, [r0]
   1b26c:	mov	r8, r0
   1b270:	ldr	r2, [r4, #4]
   1b274:	ldr	r5, [r4]
   1b278:	str	r3, [sp, #28]
   1b27c:	cmp	r2, #0
   1b280:	bgt	1b2dc <__assert_fail@plt+0xa00c>
   1b284:	add	r3, r4, #8
   1b288:	str	r2, [sp, #36]	; 0x24
   1b28c:	rsb	r2, r2, #1
   1b290:	cmp	r5, r3
   1b294:	beq	1b3b8 <__assert_fail@plt+0xa0e8>
   1b298:	mov	r1, #8
   1b29c:	mov	r0, r5
   1b2a0:	mvn	r3, #-2147483648	; 0x80000000
   1b2a4:	str	r1, [sp]
   1b2a8:	add	r1, sp, #36	; 0x24
   1b2ac:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1b2b0:	mov	r5, r0
   1b2b4:	str	r0, [r4]
   1b2b8:	ldr	r0, [r4, #4]
   1b2bc:	mov	r1, #0
   1b2c0:	ldr	r2, [sp, #36]	; 0x24
   1b2c4:	sub	r2, r2, r0
   1b2c8:	add	r0, r5, r0, lsl #3
   1b2cc:	lsl	r2, r2, #3
   1b2d0:	bl	11198 <memset@plt>
   1b2d4:	ldr	r3, [sp, #36]	; 0x24
   1b2d8:	str	r3, [r4, #4]
   1b2dc:	ldr	ip, [r4, #16]
   1b2e0:	mov	r3, fp
   1b2e4:	mov	r2, sl
   1b2e8:	ldr	r7, [r4, #20]
   1b2ec:	ldr	r0, [pc, #240]	; 1b3e4 <__assert_fail@plt+0xa114>
   1b2f0:	ldr	r9, [r5]
   1b2f4:	orr	r7, r7, #1
   1b2f8:	ldr	r6, [r5, #4]
   1b2fc:	str	ip, [sp]
   1b300:	ldr	ip, [r4, #56]	; 0x38
   1b304:	mov	r1, r9
   1b308:	str	r7, [sp, #4]
   1b30c:	ldr	lr, [r4, #60]	; 0x3c
   1b310:	str	r0, [sp, #8]
   1b314:	mov	r0, r6
   1b318:	str	ip, [sp, #12]
   1b31c:	str	lr, [sp, #16]
   1b320:	bl	17cac <__assert_fail@plt+0x69dc>
   1b324:	cmp	r9, r0
   1b328:	bhi	1b390 <__assert_fail@plt+0xa0c0>
   1b32c:	add	r9, r0, #1
   1b330:	movw	r3, #61888	; 0xf1c0
   1b334:	movt	r3, #2
   1b338:	cmp	r6, r3
   1b33c:	str	r9, [r5]
   1b340:	beq	1b34c <__assert_fail@plt+0xa07c>
   1b344:	mov	r0, r6
   1b348:	bl	13a30 <__assert_fail@plt+0x2760>
   1b34c:	mov	r0, r9
   1b350:	bl	1be1c <__assert_fail@plt+0xab4c>
   1b354:	ldr	ip, [r4, #16]
   1b358:	mov	r1, r9
   1b35c:	mov	r3, fp
   1b360:	mov	r2, sl
   1b364:	mov	r6, r0
   1b368:	ldr	r9, [r4, #56]	; 0x38
   1b36c:	ldr	lr, [r4, #60]	; 0x3c
   1b370:	str	r0, [r5, #4]
   1b374:	str	ip, [sp]
   1b378:	ldr	ip, [pc, #100]	; 1b3e4 <__assert_fail@plt+0xa114>
   1b37c:	str	r7, [sp, #4]
   1b380:	str	ip, [sp, #8]
   1b384:	str	r9, [sp, #12]
   1b388:	str	lr, [sp, #16]
   1b38c:	bl	17cac <__assert_fail@plt+0x69dc>
   1b390:	ldr	r3, [sp, #28]
   1b394:	mov	r0, r6
   1b398:	str	r3, [r8]
   1b39c:	add	sp, sp, #44	; 0x2c
   1b3a0:	ldrd	r4, [sp]
   1b3a4:	ldrd	r6, [sp, #8]
   1b3a8:	ldrd	r8, [sp, #16]
   1b3ac:	ldrd	sl, [sp, #24]
   1b3b0:	add	sp, sp, #32
   1b3b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3b8:	mov	r0, #8
   1b3bc:	mvn	r3, #-2147483648	; 0x80000000
   1b3c0:	add	r1, sp, #36	; 0x24
   1b3c4:	str	r0, [sp]
   1b3c8:	mov	r0, #0
   1b3cc:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1b3d0:	ldrd	r2, [r4, #8]
   1b3d4:	mov	r5, r0
   1b3d8:	str	r0, [r4]
   1b3dc:	strd	r2, [r0]
   1b3e0:	b	1b2b8 <__assert_fail@plt+0x9fe8>
   1b3e4:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   1b3e8:	ldr	r3, [pc, #4]	; 1b3f4 <__assert_fail@plt+0xa124>
   1b3ec:	mvn	r2, #0
   1b3f0:	b	19698 <__assert_fail@plt+0x83c8>
   1b3f4:	andeq	pc, r2, r8, asr #2
   1b3f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b3fc:	movw	r4, #61752	; 0xf138
   1b400:	movt	r4, #2
   1b404:	strd	r6, [sp, #8]
   1b408:	strd	r8, [sp, #16]
   1b40c:	strd	sl, [sp, #24]
   1b410:	mov	sl, r0
   1b414:	str	lr, [sp, #32]
   1b418:	sub	sp, sp, #44	; 0x2c
   1b41c:	bl	11180 <__errno_location@plt>
   1b420:	ldr	r3, [r0]
   1b424:	mov	r8, r0
   1b428:	ldr	r2, [r4, #4]
   1b42c:	ldr	r5, [r4]
   1b430:	str	r3, [sp, #28]
   1b434:	cmp	r2, #0
   1b438:	bgt	1b494 <__assert_fail@plt+0xa1c4>
   1b43c:	add	r3, r4, #8
   1b440:	str	r2, [sp, #36]	; 0x24
   1b444:	rsb	r2, r2, #1
   1b448:	cmp	r5, r3
   1b44c:	beq	1b55c <__assert_fail@plt+0xa28c>
   1b450:	mov	r1, #8
   1b454:	mov	r0, r5
   1b458:	mvn	r3, #-2147483648	; 0x80000000
   1b45c:	str	r1, [sp]
   1b460:	add	r1, sp, #36	; 0x24
   1b464:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1b468:	mov	r5, r0
   1b46c:	str	r0, [r4]
   1b470:	ldr	r0, [r4, #4]
   1b474:	mov	r1, #0
   1b478:	ldr	r2, [sp, #36]	; 0x24
   1b47c:	sub	r2, r2, r0
   1b480:	add	r0, r5, r0, lsl #3
   1b484:	lsl	r2, r2, #3
   1b488:	bl	11198 <memset@plt>
   1b48c:	ldr	r3, [sp, #36]	; 0x24
   1b490:	str	r3, [r4, #4]
   1b494:	ldr	ip, [r4, #16]
   1b498:	mvn	r3, #0
   1b49c:	mov	r2, sl
   1b4a0:	ldr	r7, [r4, #20]
   1b4a4:	ldr	fp, [pc, #220]	; 1b588 <__assert_fail@plt+0xa2b8>
   1b4a8:	ldr	r9, [r5]
   1b4ac:	orr	r7, r7, #1
   1b4b0:	ldr	r6, [r5, #4]
   1b4b4:	str	ip, [sp]
   1b4b8:	ldr	ip, [r4, #56]	; 0x38
   1b4bc:	mov	r1, r9
   1b4c0:	stmib	sp, {r7, fp}
   1b4c4:	ldr	lr, [r4, #60]	; 0x3c
   1b4c8:	mov	r0, r6
   1b4cc:	str	ip, [sp, #12]
   1b4d0:	str	lr, [sp, #16]
   1b4d4:	bl	17cac <__assert_fail@plt+0x69dc>
   1b4d8:	cmp	r9, r0
   1b4dc:	bhi	1b534 <__assert_fail@plt+0xa264>
   1b4e0:	add	r9, r0, #1
   1b4e4:	movw	r3, #61888	; 0xf1c0
   1b4e8:	movt	r3, #2
   1b4ec:	cmp	r6, r3
   1b4f0:	str	r9, [r5]
   1b4f4:	beq	1b500 <__assert_fail@plt+0xa230>
   1b4f8:	mov	r0, r6
   1b4fc:	bl	13a30 <__assert_fail@plt+0x2760>
   1b500:	mov	r0, r9
   1b504:	bl	1be1c <__assert_fail@plt+0xab4c>
   1b508:	ldr	r3, [r4, #16]
   1b50c:	mov	r2, sl
   1b510:	mov	r1, r9
   1b514:	mov	r6, r0
   1b518:	ldr	lr, [r4, #56]	; 0x38
   1b51c:	ldr	ip, [r4, #60]	; 0x3c
   1b520:	str	r0, [r5, #4]
   1b524:	stm	sp, {r3, r7, fp, lr}
   1b528:	mvn	r3, #0
   1b52c:	str	ip, [sp, #16]
   1b530:	bl	17cac <__assert_fail@plt+0x69dc>
   1b534:	ldr	r3, [sp, #28]
   1b538:	mov	r0, r6
   1b53c:	str	r3, [r8]
   1b540:	add	sp, sp, #44	; 0x2c
   1b544:	ldrd	r4, [sp]
   1b548:	ldrd	r6, [sp, #8]
   1b54c:	ldrd	r8, [sp, #16]
   1b550:	ldrd	sl, [sp, #24]
   1b554:	add	sp, sp, #32
   1b558:	pop	{pc}		; (ldr pc, [sp], #4)
   1b55c:	mov	r0, #8
   1b560:	mvn	r3, #-2147483648	; 0x80000000
   1b564:	add	r1, sp, #36	; 0x24
   1b568:	str	r0, [sp]
   1b56c:	mov	r0, #0
   1b570:	bl	1c0c0 <__assert_fail@plt+0xadf0>
   1b574:	ldrd	r2, [r4, #8]
   1b578:	mov	r5, r0
   1b57c:	str	r0, [r4]
   1b580:	strd	r2, [r0]
   1b584:	b	1b470 <__assert_fail@plt+0xa1a0>
   1b588:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   1b58c:	str	r4, [sp, #-16]!
   1b590:	movw	r1, #55624	; 0xd948
   1b594:	movt	r1, #1
   1b598:	strd	r6, [sp, #4]
   1b59c:	mov	r4, r0
   1b5a0:	mov	r0, #3
   1b5a4:	str	lr, [sp, #12]
   1b5a8:	sub	sp, sp, #104	; 0x68
   1b5ac:	mov	r2, sp
   1b5b0:	bl	112ac <__lxstat64@plt>
   1b5b4:	cmp	r0, #0
   1b5b8:	movne	r0, #0
   1b5bc:	bne	1b5d4 <__assert_fail@plt+0xa304>
   1b5c0:	ldrd	r6, [sp]
   1b5c4:	mov	r0, r4
   1b5c8:	ldrd	r2, [sp, #96]	; 0x60
   1b5cc:	strd	r2, [r4]
   1b5d0:	strd	r6, [r4, #8]
   1b5d4:	add	sp, sp, #104	; 0x68
   1b5d8:	ldr	r4, [sp]
   1b5dc:	ldrd	r6, [sp, #4]
   1b5e0:	add	sp, sp, #12
   1b5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5e8:	cmp	r0, #2
   1b5ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b5f0:	mov	r4, r0
   1b5f4:	strd	r6, [sp, #8]
   1b5f8:	str	r8, [sp, #16]
   1b5fc:	str	lr, [sp, #20]
   1b600:	bls	1b61c <__assert_fail@plt+0xa34c>
   1b604:	mov	r0, r4
   1b608:	ldrd	r4, [sp]
   1b60c:	ldrd	r6, [sp, #8]
   1b610:	ldr	r8, [sp, #16]
   1b614:	add	sp, sp, #20
   1b618:	pop	{pc}		; (ldr pc, [sp], #4)
   1b61c:	bl	1cb60 <__assert_fail@plt+0xb890>
   1b620:	mov	r7, r0
   1b624:	bl	11180 <__errno_location@plt>
   1b628:	mov	r5, r0
   1b62c:	mov	r0, r4
   1b630:	ldr	r6, [r5]
   1b634:	mov	r4, r7
   1b638:	bl	112a0 <close@plt>
   1b63c:	str	r6, [r5]
   1b640:	b	1b604 <__assert_fail@plt+0xa334>
   1b644:	cmp	r1, #0
   1b648:	strd	r4, [sp, #-16]!
   1b64c:	mov	ip, r3
   1b650:	str	r6, [sp, #8]
   1b654:	mov	r4, r0
   1b658:	str	lr, [sp, #12]
   1b65c:	sub	sp, sp, #32
   1b660:	ldr	r5, [sp, #48]	; 0x30
   1b664:	ldr	r6, [sp, #52]	; 0x34
   1b668:	beq	1b7ac <__assert_fail@plt+0xa4dc>
   1b66c:	mov	r3, r1
   1b670:	mov	r1, #1
   1b674:	stm	sp, {r2, ip}
   1b678:	movw	r2, #57728	; 0xe180
   1b67c:	movt	r2, #1
   1b680:	bl	111bc <__fprintf_chk@plt>
   1b684:	mov	r2, #5
   1b688:	movw	r1, #57748	; 0xe194
   1b68c:	movt	r1, #1
   1b690:	mov	r0, #0
   1b694:	bl	11060 <dcgettext@plt>
   1b698:	movw	ip, #2022	; 0x7e6
   1b69c:	mov	r3, r0
   1b6a0:	mov	r1, #1
   1b6a4:	movw	r2, #58452	; 0xe454
   1b6a8:	movt	r2, #1
   1b6ac:	mov	r0, r4
   1b6b0:	str	ip, [sp]
   1b6b4:	bl	111bc <__fprintf_chk@plt>
   1b6b8:	mov	r1, r4
   1b6bc:	mov	r0, #10
   1b6c0:	bl	11054 <fputc_unlocked@plt>
   1b6c4:	mov	r2, #5
   1b6c8:	movw	r1, #57752	; 0xe198
   1b6cc:	movt	r1, #1
   1b6d0:	mov	r0, #0
   1b6d4:	bl	11060 <dcgettext@plt>
   1b6d8:	mov	r2, r0
   1b6dc:	mov	r1, #1
   1b6e0:	movw	r3, #57924	; 0xe244
   1b6e4:	movt	r3, #1
   1b6e8:	mov	r0, r4
   1b6ec:	bl	111bc <__fprintf_chk@plt>
   1b6f0:	mov	r1, r4
   1b6f4:	mov	r0, #10
   1b6f8:	bl	11054 <fputc_unlocked@plt>
   1b6fc:	cmp	r6, #9
   1b700:	ldrls	pc, [pc, r6, lsl #2]
   1b704:	b	1ba18 <__assert_fail@plt+0xa748>
   1b708:	muleq	r1, r8, r7
   1b70c:	andeq	fp, r1, r8, asr #15
   1b710:	andeq	fp, r1, r4, lsl #16
   1b714:	andeq	fp, r1, r4, asr #16
   1b718:	andeq	fp, r1, ip, lsl #17
   1b71c:	andeq	fp, r1, r4, asr #17
   1b720:	andeq	fp, r1, ip, lsl #18
   1b724:	andeq	fp, r1, r0, ror #18
   1b728:			; <UNDEFINED> instruction: 0x0001b9b8
   1b72c:	andeq	fp, r1, r0, lsr r7
   1b730:	movw	r1, #58228	; 0xe374
   1b734:	movt	r1, #1
   1b738:	mov	r2, #5
   1b73c:	mov	r0, #0
   1b740:	bl	11060 <dcgettext@plt>
   1b744:	ldr	lr, [r5, #4]
   1b748:	mov	r2, r0
   1b74c:	mov	r1, #1
   1b750:	mov	r0, r4
   1b754:	ldr	r3, [r5, #8]
   1b758:	ldr	ip, [r5, #32]
   1b75c:	str	lr, [sp]
   1b760:	ldr	lr, [r5, #12]
   1b764:	str	ip, [sp, #28]
   1b768:	ldr	ip, [r5, #28]
   1b76c:	str	r3, [sp, #4]
   1b770:	ldr	r3, [r5, #16]
   1b774:	str	lr, [sp, #8]
   1b778:	ldr	lr, [r5, #20]
   1b77c:	str	ip, [sp, #24]
   1b780:	ldr	ip, [r5, #24]
   1b784:	str	r3, [sp, #12]
   1b788:	ldr	r3, [r5]
   1b78c:	str	lr, [sp, #16]
   1b790:	str	ip, [sp, #20]
   1b794:	bl	111bc <__fprintf_chk@plt>
   1b798:	add	sp, sp, #32
   1b79c:	ldrd	r4, [sp]
   1b7a0:	ldr	r6, [sp, #8]
   1b7a4:	add	sp, sp, #12
   1b7a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7ac:	mov	r3, r2
   1b7b0:	mov	r1, #1
   1b7b4:	str	ip, [sp]
   1b7b8:	movw	r2, #57740	; 0xe18c
   1b7bc:	movt	r2, #1
   1b7c0:	bl	111bc <__fprintf_chk@plt>
   1b7c4:	b	1b684 <__assert_fail@plt+0xa3b4>
   1b7c8:	mov	r2, #5
   1b7cc:	movw	r1, #57960	; 0xe268
   1b7d0:	movt	r1, #1
   1b7d4:	mov	r0, #0
   1b7d8:	bl	11060 <dcgettext@plt>
   1b7dc:	ldr	r3, [r5]
   1b7e0:	mov	r2, r0
   1b7e4:	mov	r1, #1
   1b7e8:	mov	r0, r4
   1b7ec:	add	sp, sp, #32
   1b7f0:	ldrd	r4, [sp]
   1b7f4:	ldr	r6, [sp, #8]
   1b7f8:	ldr	lr, [sp, #12]
   1b7fc:	add	sp, sp, #16
   1b800:	b	111bc <__fprintf_chk@plt>
   1b804:	mov	r2, #5
   1b808:	movw	r1, #57976	; 0xe278
   1b80c:	movt	r1, #1
   1b810:	mov	r0, #0
   1b814:	bl	11060 <dcgettext@plt>
   1b818:	ldm	r5, {r3, ip}
   1b81c:	mov	r2, r0
   1b820:	mov	r1, #1
   1b824:	mov	r0, r4
   1b828:	str	ip, [sp, #48]	; 0x30
   1b82c:	add	sp, sp, #32
   1b830:	ldrd	r4, [sp]
   1b834:	ldr	r6, [sp, #8]
   1b838:	ldr	lr, [sp, #12]
   1b83c:	add	sp, sp, #16
   1b840:	b	111bc <__fprintf_chk@plt>
   1b844:	mov	r2, #5
   1b848:	movw	r1, #58000	; 0xe290
   1b84c:	movt	r1, #1
   1b850:	mov	r0, #0
   1b854:	bl	11060 <dcgettext@plt>
   1b858:	ldm	r5, {r3, lr}
   1b85c:	mov	r2, r0
   1b860:	mov	r1, #1
   1b864:	mov	r0, r4
   1b868:	ldr	ip, [r5, #8]
   1b86c:	str	lr, [sp, #48]	; 0x30
   1b870:	str	ip, [sp, #52]	; 0x34
   1b874:	add	sp, sp, #32
   1b878:	ldrd	r4, [sp]
   1b87c:	ldr	r6, [sp, #8]
   1b880:	ldr	lr, [sp, #12]
   1b884:	add	sp, sp, #16
   1b888:	b	111bc <__fprintf_chk@plt>
   1b88c:	mov	r2, #5
   1b890:	movw	r1, #58028	; 0xe2ac
   1b894:	movt	r1, #1
   1b898:	mov	r0, #0
   1b89c:	bl	11060 <dcgettext@plt>
   1b8a0:	ldmib	r5, {r3, ip, lr}
   1b8a4:	mov	r2, r0
   1b8a8:	mov	r1, #1
   1b8ac:	mov	r0, r4
   1b8b0:	str	r3, [sp]
   1b8b4:	ldr	r3, [r5]
   1b8b8:	stmib	sp, {ip, lr}
   1b8bc:	bl	111bc <__fprintf_chk@plt>
   1b8c0:	b	1b798 <__assert_fail@plt+0xa4c8>
   1b8c4:	mov	r2, #5
   1b8c8:	movw	r1, #58060	; 0xe2cc
   1b8cc:	movt	r1, #1
   1b8d0:	mov	r0, #0
   1b8d4:	bl	11060 <dcgettext@plt>
   1b8d8:	ldmib	r5, {ip, lr}
   1b8dc:	mov	r2, r0
   1b8e0:	mov	r1, #1
   1b8e4:	mov	r0, r4
   1b8e8:	ldr	r3, [r5, #16]
   1b8ec:	str	ip, [sp]
   1b8f0:	ldr	ip, [r5, #12]
   1b8f4:	str	r3, [sp, #12]
   1b8f8:	ldr	r3, [r5]
   1b8fc:	str	lr, [sp, #4]
   1b900:	str	ip, [sp, #8]
   1b904:	bl	111bc <__fprintf_chk@plt>
   1b908:	b	1b798 <__assert_fail@plt+0xa4c8>
   1b90c:	mov	r2, #5
   1b910:	movw	r1, #58096	; 0xe2f0
   1b914:	movt	r1, #1
   1b918:	mov	r0, #0
   1b91c:	bl	11060 <dcgettext@plt>
   1b920:	ldr	lr, [r5, #4]
   1b924:	mov	r2, r0
   1b928:	mov	r1, #1
   1b92c:	mov	r0, r4
   1b930:	ldr	r3, [r5, #8]
   1b934:	ldr	ip, [r5, #20]
   1b938:	str	lr, [sp]
   1b93c:	ldr	lr, [r5, #12]
   1b940:	str	ip, [sp, #16]
   1b944:	ldr	ip, [r5, #16]
   1b948:	str	r3, [sp, #4]
   1b94c:	ldr	r3, [r5]
   1b950:	str	lr, [sp, #8]
   1b954:	str	ip, [sp, #12]
   1b958:	bl	111bc <__fprintf_chk@plt>
   1b95c:	b	1b798 <__assert_fail@plt+0xa4c8>
   1b960:	mov	r2, #5
   1b964:	movw	r1, #58136	; 0xe318
   1b968:	movt	r1, #1
   1b96c:	mov	r0, #0
   1b970:	bl	11060 <dcgettext@plt>
   1b974:	ldmib	r5, {r3, ip}
   1b978:	mov	r2, r0
   1b97c:	mov	r1, #1
   1b980:	mov	r0, r4
   1b984:	ldr	lr, [r5, #24]
   1b988:	str	r3, [sp]
   1b98c:	ldr	r3, [r5, #12]
   1b990:	str	lr, [sp, #20]
   1b994:	ldr	lr, [r5, #20]
   1b998:	str	ip, [sp, #4]
   1b99c:	ldr	ip, [r5, #16]
   1b9a0:	str	r3, [sp, #8]
   1b9a4:	ldr	r3, [r5]
   1b9a8:	str	ip, [sp, #12]
   1b9ac:	str	lr, [sp, #16]
   1b9b0:	bl	111bc <__fprintf_chk@plt>
   1b9b4:	b	1b798 <__assert_fail@plt+0xa4c8>
   1b9b8:	mov	r2, #5
   1b9bc:	movw	r1, #58180	; 0xe344
   1b9c0:	movt	r1, #1
   1b9c4:	mov	r0, #0
   1b9c8:	bl	11060 <dcgettext@plt>
   1b9cc:	ldmib	r5, {ip, lr}
   1b9d0:	mov	r2, r0
   1b9d4:	mov	r1, #1
   1b9d8:	mov	r0, r4
   1b9dc:	ldr	r3, [r5, #28]
   1b9e0:	str	ip, [sp]
   1b9e4:	ldr	ip, [r5, #12]
   1b9e8:	str	r3, [sp, #24]
   1b9ec:	ldr	r3, [r5, #24]
   1b9f0:	str	lr, [sp, #4]
   1b9f4:	ldr	lr, [r5, #16]
   1b9f8:	str	ip, [sp, #8]
   1b9fc:	ldr	ip, [r5, #20]
   1ba00:	str	r3, [sp, #20]
   1ba04:	ldr	r3, [r5]
   1ba08:	str	lr, [sp, #12]
   1ba0c:	str	ip, [sp, #16]
   1ba10:	bl	111bc <__fprintf_chk@plt>
   1ba14:	b	1b798 <__assert_fail@plt+0xa4c8>
   1ba18:	movw	r1, #58280	; 0xe3a8
   1ba1c:	movt	r1, #1
   1ba20:	b	1b738 <__assert_fail@plt+0xa468>
   1ba24:	strd	r4, [sp, #-12]!
   1ba28:	str	lr, [sp, #8]
   1ba2c:	sub	sp, sp, #12
   1ba30:	ldr	r5, [sp, #24]
   1ba34:	ldr	ip, [r5]
   1ba38:	cmp	ip, #0
   1ba3c:	beq	1ba58 <__assert_fail@plt+0xa788>
   1ba40:	mov	lr, r5
   1ba44:	mov	ip, #0
   1ba48:	ldr	r4, [lr, #4]!
   1ba4c:	add	ip, ip, #1
   1ba50:	cmp	r4, #0
   1ba54:	bne	1ba48 <__assert_fail@plt+0xa778>
   1ba58:	stm	sp, {r5, ip}
   1ba5c:	bl	1b644 <__assert_fail@plt+0xa374>
   1ba60:	add	sp, sp, #12
   1ba64:	ldrd	r4, [sp]
   1ba68:	add	sp, sp, #8
   1ba6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba70:	push	{lr}		; (str lr, [sp, #-4]!)
   1ba74:	sub	sp, sp, #52	; 0x34
   1ba78:	ldr	ip, [sp, #56]	; 0x38
   1ba7c:	ldr	lr, [ip]
   1ba80:	cmp	lr, #0
   1ba84:	str	lr, [sp, #8]
   1ba88:	beq	1bb20 <__assert_fail@plt+0xa850>
   1ba8c:	ldr	lr, [ip, #4]
   1ba90:	cmp	lr, #0
   1ba94:	str	lr, [sp, #12]
   1ba98:	beq	1bb34 <__assert_fail@plt+0xa864>
   1ba9c:	ldr	lr, [ip, #8]
   1baa0:	cmp	lr, #0
   1baa4:	str	lr, [sp, #16]
   1baa8:	beq	1bb3c <__assert_fail@plt+0xa86c>
   1baac:	ldr	lr, [ip, #12]
   1bab0:	cmp	lr, #0
   1bab4:	str	lr, [sp, #20]
   1bab8:	beq	1bb44 <__assert_fail@plt+0xa874>
   1babc:	ldr	lr, [ip, #16]
   1bac0:	cmp	lr, #0
   1bac4:	str	lr, [sp, #24]
   1bac8:	beq	1bb4c <__assert_fail@plt+0xa87c>
   1bacc:	ldr	lr, [ip, #20]
   1bad0:	cmp	lr, #0
   1bad4:	str	lr, [sp, #28]
   1bad8:	beq	1bb54 <__assert_fail@plt+0xa884>
   1badc:	ldr	lr, [ip, #24]
   1bae0:	cmp	lr, #0
   1bae4:	str	lr, [sp, #32]
   1bae8:	beq	1bb5c <__assert_fail@plt+0xa88c>
   1baec:	ldr	lr, [ip, #28]
   1baf0:	cmp	lr, #0
   1baf4:	str	lr, [sp, #36]	; 0x24
   1baf8:	beq	1bb64 <__assert_fail@plt+0xa894>
   1bafc:	ldr	lr, [ip, #32]
   1bb00:	cmp	lr, #0
   1bb04:	str	lr, [sp, #40]	; 0x28
   1bb08:	beq	1bb6c <__assert_fail@plt+0xa89c>
   1bb0c:	ldr	ip, [ip, #36]	; 0x24
   1bb10:	cmp	ip, #0
   1bb14:	str	ip, [sp, #44]	; 0x2c
   1bb18:	movne	lr, #10
   1bb1c:	moveq	lr, #9
   1bb20:	add	ip, sp, #8
   1bb24:	stm	sp, {ip, lr}
   1bb28:	bl	1b644 <__assert_fail@plt+0xa374>
   1bb2c:	add	sp, sp, #52	; 0x34
   1bb30:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb34:	mov	lr, #1
   1bb38:	b	1bb20 <__assert_fail@plt+0xa850>
   1bb3c:	mov	lr, #2
   1bb40:	b	1bb20 <__assert_fail@plt+0xa850>
   1bb44:	mov	lr, #3
   1bb48:	b	1bb20 <__assert_fail@plt+0xa850>
   1bb4c:	mov	lr, #4
   1bb50:	b	1bb20 <__assert_fail@plt+0xa850>
   1bb54:	mov	lr, #5
   1bb58:	b	1bb20 <__assert_fail@plt+0xa850>
   1bb5c:	mov	lr, #6
   1bb60:	b	1bb20 <__assert_fail@plt+0xa850>
   1bb64:	mov	lr, #7
   1bb68:	b	1bb20 <__assert_fail@plt+0xa850>
   1bb6c:	mov	lr, #8
   1bb70:	b	1bb20 <__assert_fail@plt+0xa850>
   1bb74:	push	{r3}		; (str r3, [sp, #-4]!)
   1bb78:	push	{lr}		; (str lr, [sp, #-4]!)
   1bb7c:	sub	sp, sp, #56	; 0x38
   1bb80:	ldr	ip, [sp, #64]	; 0x40
   1bb84:	add	r3, sp, #64	; 0x40
   1bb88:	str	r3, [sp, #12]
   1bb8c:	cmp	ip, #0
   1bb90:	str	ip, [sp, #16]
   1bb94:	beq	1bc2c <__assert_fail@plt+0xa95c>
   1bb98:	ldr	ip, [sp, #68]	; 0x44
   1bb9c:	cmp	ip, #0
   1bba0:	str	ip, [sp, #20]
   1bba4:	beq	1bc50 <__assert_fail@plt+0xa980>
   1bba8:	ldr	ip, [sp, #72]	; 0x48
   1bbac:	cmp	ip, #0
   1bbb0:	str	ip, [sp, #24]
   1bbb4:	beq	1bc58 <__assert_fail@plt+0xa988>
   1bbb8:	ldr	ip, [sp, #76]	; 0x4c
   1bbbc:	cmp	ip, #0
   1bbc0:	str	ip, [sp, #28]
   1bbc4:	beq	1bc60 <__assert_fail@plt+0xa990>
   1bbc8:	ldr	ip, [sp, #80]	; 0x50
   1bbcc:	cmp	ip, #0
   1bbd0:	str	ip, [sp, #32]
   1bbd4:	beq	1bc68 <__assert_fail@plt+0xa998>
   1bbd8:	ldr	ip, [sp, #84]	; 0x54
   1bbdc:	cmp	ip, #0
   1bbe0:	str	ip, [sp, #36]	; 0x24
   1bbe4:	beq	1bc70 <__assert_fail@plt+0xa9a0>
   1bbe8:	ldr	ip, [sp, #88]	; 0x58
   1bbec:	cmp	ip, #0
   1bbf0:	str	ip, [sp, #40]	; 0x28
   1bbf4:	beq	1bc78 <__assert_fail@plt+0xa9a8>
   1bbf8:	ldr	ip, [sp, #92]	; 0x5c
   1bbfc:	cmp	ip, #0
   1bc00:	str	ip, [sp, #44]	; 0x2c
   1bc04:	beq	1bc80 <__assert_fail@plt+0xa9b0>
   1bc08:	ldr	ip, [sp, #96]	; 0x60
   1bc0c:	cmp	ip, #0
   1bc10:	str	ip, [sp, #48]	; 0x30
   1bc14:	beq	1bc88 <__assert_fail@plt+0xa9b8>
   1bc18:	ldr	r3, [sp, #100]	; 0x64
   1bc1c:	cmp	r3, #0
   1bc20:	str	r3, [sp, #52]	; 0x34
   1bc24:	movne	ip, #10
   1bc28:	moveq	ip, #9
   1bc2c:	ldr	r3, [sp, #60]	; 0x3c
   1bc30:	add	lr, sp, #16
   1bc34:	str	lr, [sp]
   1bc38:	str	ip, [sp, #4]
   1bc3c:	bl	1b644 <__assert_fail@plt+0xa374>
   1bc40:	add	sp, sp, #56	; 0x38
   1bc44:	pop	{lr}		; (ldr lr, [sp], #4)
   1bc48:	add	sp, sp, #4
   1bc4c:	bx	lr
   1bc50:	mov	ip, #1
   1bc54:	b	1bc2c <__assert_fail@plt+0xa95c>
   1bc58:	mov	ip, #2
   1bc5c:	b	1bc2c <__assert_fail@plt+0xa95c>
   1bc60:	mov	ip, #3
   1bc64:	b	1bc2c <__assert_fail@plt+0xa95c>
   1bc68:	mov	ip, #4
   1bc6c:	b	1bc2c <__assert_fail@plt+0xa95c>
   1bc70:	mov	ip, #5
   1bc74:	b	1bc2c <__assert_fail@plt+0xa95c>
   1bc78:	mov	ip, #6
   1bc7c:	b	1bc2c <__assert_fail@plt+0xa95c>
   1bc80:	mov	ip, #7
   1bc84:	b	1bc2c <__assert_fail@plt+0xa95c>
   1bc88:	mov	ip, #8
   1bc8c:	b	1bc2c <__assert_fail@plt+0xa95c>
   1bc90:	movw	r3, #61844	; 0xf194
   1bc94:	movt	r3, #2
   1bc98:	str	r4, [sp, #-8]!
   1bc9c:	mov	r0, #10
   1bca0:	ldr	r1, [r3]
   1bca4:	str	lr, [sp, #4]
   1bca8:	bl	11054 <fputc_unlocked@plt>
   1bcac:	mov	r2, #5
   1bcb0:	movw	r1, #58340	; 0xe3e4
   1bcb4:	movt	r1, #1
   1bcb8:	mov	r0, #0
   1bcbc:	bl	11060 <dcgettext@plt>
   1bcc0:	mov	r1, r0
   1bcc4:	movw	r2, #56704	; 0xdd80
   1bcc8:	movt	r2, #1
   1bccc:	mov	r0, #1
   1bcd0:	bl	111a4 <__printf_chk@plt>
   1bcd4:	mov	r2, #5
   1bcd8:	movw	r1, #58360	; 0xe3f8
   1bcdc:	movt	r1, #1
   1bce0:	mov	r0, #0
   1bce4:	bl	11060 <dcgettext@plt>
   1bce8:	mov	r1, r0
   1bcec:	movw	r3, #55088	; 0xd730
   1bcf0:	movt	r3, #1
   1bcf4:	movw	r2, #55128	; 0xd758
   1bcf8:	movt	r2, #1
   1bcfc:	mov	r0, #1
   1bd00:	bl	111a4 <__printf_chk@plt>
   1bd04:	mov	r2, #5
   1bd08:	movw	r1, #58380	; 0xe40c
   1bd0c:	movt	r1, #1
   1bd10:	mov	r0, #0
   1bd14:	bl	11060 <dcgettext@plt>
   1bd18:	mov	r1, r0
   1bd1c:	movw	r2, #58420	; 0xe434
   1bd20:	movt	r2, #1
   1bd24:	mov	r0, #1
   1bd28:	ldr	r4, [sp]
   1bd2c:	ldr	lr, [sp, #4]
   1bd30:	add	sp, sp, #8
   1bd34:	b	111a4 <__printf_chk@plt>
   1bd38:	str	r4, [sp, #-8]!
   1bd3c:	movw	r4, #62192	; 0xf2f0
   1bd40:	movt	r4, #2
   1bd44:	ldrb	r3, [r4]
   1bd48:	str	lr, [sp, #4]
   1bd4c:	cmp	r3, #0
   1bd50:	beq	1bd64 <__assert_fail@plt+0xaa94>
   1bd54:	ldrb	r0, [r4, #1]
   1bd58:	ldr	r4, [sp]
   1bd5c:	add	sp, sp, #4
   1bd60:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd64:	bl	11084 <geteuid@plt>
   1bd68:	clz	r0, r0
   1bd6c:	mov	r3, #1
   1bd70:	lsr	r0, r0, #5
   1bd74:	strb	r3, [r4]
   1bd78:	strb	r0, [r4, #1]
   1bd7c:	ldr	r4, [sp]
   1bd80:	add	sp, sp, #4
   1bd84:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd88:	strd	r4, [sp, #-16]!
   1bd8c:	mov	r4, r0
   1bd90:	mov	r5, r2
   1bd94:	str	r6, [sp, #8]
   1bd98:	mov	r6, r1
   1bd9c:	str	lr, [sp, #12]
   1bda0:	bl	1cb28 <__assert_fail@plt+0xb858>
   1bda4:	cmp	r0, #0
   1bda8:	beq	1bdbc <__assert_fail@plt+0xaaec>
   1bdac:	ldrd	r4, [sp]
   1bdb0:	ldr	r6, [sp, #8]
   1bdb4:	add	sp, sp, #12
   1bdb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdbc:	cmp	r4, #0
   1bdc0:	beq	1bdd0 <__assert_fail@plt+0xab00>
   1bdc4:	cmp	r6, #0
   1bdc8:	cmpne	r5, #0
   1bdcc:	beq	1bdac <__assert_fail@plt+0xaadc>
   1bdd0:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1bdd4:	str	r4, [sp, #-8]!
   1bdd8:	str	lr, [sp, #4]
   1bddc:	bl	1c554 <__assert_fail@plt+0xb284>
   1bde0:	cmp	r0, #0
   1bde4:	beq	1bdf4 <__assert_fail@plt+0xab24>
   1bde8:	ldr	r4, [sp]
   1bdec:	add	sp, sp, #4
   1bdf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdf4:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1bdf8:	str	r4, [sp, #-8]!
   1bdfc:	str	lr, [sp, #4]
   1be00:	bl	1c554 <__assert_fail@plt+0xb284>
   1be04:	cmp	r0, #0
   1be08:	beq	1be18 <__assert_fail@plt+0xab48>
   1be0c:	ldr	r4, [sp]
   1be10:	add	sp, sp, #4
   1be14:	pop	{pc}		; (ldr pc, [sp], #4)
   1be18:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1be1c:	str	r4, [sp, #-8]!
   1be20:	str	lr, [sp, #4]
   1be24:	bl	1c554 <__assert_fail@plt+0xb284>
   1be28:	cmp	r0, #0
   1be2c:	beq	1be3c <__assert_fail@plt+0xab6c>
   1be30:	ldr	r4, [sp]
   1be34:	add	sp, sp, #4
   1be38:	pop	{pc}		; (ldr pc, [sp], #4)
   1be3c:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1be40:	strd	r4, [sp, #-16]!
   1be44:	mov	r5, r0
   1be48:	mov	r4, r1
   1be4c:	str	r6, [sp, #8]
   1be50:	str	lr, [sp, #12]
   1be54:	bl	1c590 <__assert_fail@plt+0xb2c0>
   1be58:	cmp	r0, #0
   1be5c:	beq	1be70 <__assert_fail@plt+0xaba0>
   1be60:	ldrd	r4, [sp]
   1be64:	ldr	r6, [sp, #8]
   1be68:	add	sp, sp, #12
   1be6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be70:	adds	r4, r4, #0
   1be74:	movne	r4, #1
   1be78:	cmp	r5, #0
   1be7c:	moveq	r4, #1
   1be80:	cmp	r4, #0
   1be84:	beq	1be60 <__assert_fail@plt+0xab90>
   1be88:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1be8c:	cmp	r1, #0
   1be90:	orreq	r1, r1, #1
   1be94:	str	r4, [sp, #-8]!
   1be98:	str	lr, [sp, #4]
   1be9c:	bl	1c590 <__assert_fail@plt+0xb2c0>
   1bea0:	cmp	r0, #0
   1bea4:	beq	1beb4 <__assert_fail@plt+0xabe4>
   1bea8:	ldr	r4, [sp]
   1beac:	add	sp, sp, #4
   1beb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1beb4:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1beb8:	strd	r4, [sp, #-16]!
   1bebc:	mov	r4, r0
   1bec0:	mov	r5, r2
   1bec4:	str	r6, [sp, #8]
   1bec8:	mov	r6, r1
   1becc:	str	lr, [sp, #12]
   1bed0:	bl	1cb28 <__assert_fail@plt+0xb858>
   1bed4:	cmp	r0, #0
   1bed8:	beq	1beec <__assert_fail@plt+0xac1c>
   1bedc:	ldrd	r4, [sp]
   1bee0:	ldr	r6, [sp, #8]
   1bee4:	add	sp, sp, #12
   1bee8:	pop	{pc}		; (ldr pc, [sp], #4)
   1beec:	cmp	r4, #0
   1bef0:	beq	1bf00 <__assert_fail@plt+0xac30>
   1bef4:	cmp	r6, #0
   1bef8:	cmpne	r5, #0
   1befc:	beq	1bedc <__assert_fail@plt+0xac0c>
   1bf00:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1bf04:	cmp	r2, #0
   1bf08:	cmpne	r1, #0
   1bf0c:	str	r4, [sp, #-8]!
   1bf10:	moveq	r2, #1
   1bf14:	str	lr, [sp, #4]
   1bf18:	moveq	r1, r2
   1bf1c:	bl	1cb28 <__assert_fail@plt+0xb858>
   1bf20:	cmp	r0, #0
   1bf24:	beq	1bf34 <__assert_fail@plt+0xac64>
   1bf28:	ldr	r4, [sp]
   1bf2c:	add	sp, sp, #4
   1bf30:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf34:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1bf38:	mov	r2, r1
   1bf3c:	mov	r1, r0
   1bf40:	str	r4, [sp, #-8]!
   1bf44:	mov	r0, #0
   1bf48:	str	lr, [sp, #4]
   1bf4c:	bl	1cb28 <__assert_fail@plt+0xb858>
   1bf50:	cmp	r0, #0
   1bf54:	beq	1bf64 <__assert_fail@plt+0xac94>
   1bf58:	ldr	r4, [sp]
   1bf5c:	add	sp, sp, #4
   1bf60:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf64:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1bf68:	cmp	r1, #0
   1bf6c:	cmpne	r0, #0
   1bf70:	str	r4, [sp, #-8]!
   1bf74:	moveq	r2, #1
   1bf78:	movne	r2, r1
   1bf7c:	str	lr, [sp, #4]
   1bf80:	movne	r1, r0
   1bf84:	moveq	r1, r2
   1bf88:	mov	r0, #0
   1bf8c:	bl	1cb28 <__assert_fail@plt+0xb858>
   1bf90:	cmp	r0, #0
   1bf94:	beq	1bfa4 <__assert_fail@plt+0xacd4>
   1bf98:	ldr	r4, [sp]
   1bf9c:	add	sp, sp, #4
   1bfa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfa4:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1bfa8:	cmp	r0, #0
   1bfac:	strd	r4, [sp, #-16]!
   1bfb0:	mov	r5, r1
   1bfb4:	ldr	r4, [r1]
   1bfb8:	str	r6, [sp, #8]
   1bfbc:	str	lr, [sp, #12]
   1bfc0:	beq	1c008 <__assert_fail@plt+0xad38>
   1bfc4:	lsr	r3, r4, #1
   1bfc8:	add	r3, r3, #1
   1bfcc:	adds	r4, r4, r3
   1bfd0:	bcs	1c004 <__assert_fail@plt+0xad34>
   1bfd4:	mov	r2, #1
   1bfd8:	mov	r1, r4
   1bfdc:	bl	1cb28 <__assert_fail@plt+0xb858>
   1bfe0:	cmp	r0, #0
   1bfe4:	beq	1bffc <__assert_fail@plt+0xad2c>
   1bfe8:	ldr	r6, [sp, #8]
   1bfec:	str	r4, [r5]
   1bff0:	ldrd	r4, [sp]
   1bff4:	add	sp, sp, #12
   1bff8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bffc:	cmp	r4, #0
   1c000:	beq	1bfe8 <__assert_fail@plt+0xad18>
   1c004:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c008:	cmp	r4, #0
   1c00c:	mov	r2, #1
   1c010:	moveq	r4, #64	; 0x40
   1c014:	mov	r1, r4
   1c018:	bl	1cb28 <__assert_fail@plt+0xb858>
   1c01c:	cmp	r0, #0
   1c020:	bne	1bfe8 <__assert_fail@plt+0xad18>
   1c024:	b	1c004 <__assert_fail@plt+0xad34>
   1c028:	cmp	r0, #0
   1c02c:	strd	r4, [sp, #-16]!
   1c030:	mov	r5, r1
   1c034:	ldr	r4, [r1]
   1c038:	str	r6, [sp, #8]
   1c03c:	mov	r6, r2
   1c040:	str	lr, [sp, #12]
   1c044:	beq	1c08c <__assert_fail@plt+0xadbc>
   1c048:	lsr	r3, r4, #1
   1c04c:	add	r3, r3, #1
   1c050:	adds	r4, r4, r3
   1c054:	bcs	1c088 <__assert_fail@plt+0xadb8>
   1c058:	mov	r1, r4
   1c05c:	bl	1cb28 <__assert_fail@plt+0xb858>
   1c060:	cmp	r0, #0
   1c064:	beq	1c07c <__assert_fail@plt+0xadac>
   1c068:	ldr	r6, [sp, #8]
   1c06c:	str	r4, [r5]
   1c070:	ldrd	r4, [sp]
   1c074:	add	sp, sp, #12
   1c078:	pop	{pc}		; (ldr pc, [sp], #4)
   1c07c:	cmp	r4, #0
   1c080:	cmpne	r6, #0
   1c084:	beq	1c068 <__assert_fail@plt+0xad98>
   1c088:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c08c:	cmp	r4, #0
   1c090:	bne	1c0a4 <__assert_fail@plt+0xadd4>
   1c094:	mov	r4, #64	; 0x40
   1c098:	udiv	r4, r4, r2
   1c09c:	cmp	r2, #64	; 0x40
   1c0a0:	addhi	r4, r4, #1
   1c0a4:	mov	r2, r6
   1c0a8:	mov	r1, r4
   1c0ac:	mov	r0, #0
   1c0b0:	bl	1cb28 <__assert_fail@plt+0xb858>
   1c0b4:	cmp	r0, #0
   1c0b8:	bne	1c068 <__assert_fail@plt+0xad98>
   1c0bc:	b	1c088 <__assert_fail@plt+0xadb8>
   1c0c0:	ldr	ip, [r1]
   1c0c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c0c8:	strd	r6, [sp, #8]
   1c0cc:	mov	r7, r1
   1c0d0:	mov	r6, r0
   1c0d4:	str	r8, [sp, #16]
   1c0d8:	mvn	r8, r3
   1c0dc:	lsr	r8, r8, #31
   1c0e0:	str	lr, [sp, #20]
   1c0e4:	asr	r1, ip, #1
   1c0e8:	ldr	lr, [sp, #24]
   1c0ec:	adds	r4, ip, r1
   1c0f0:	mvnvs	r4, #-2147483648	; 0x80000000
   1c0f4:	cmp	r3, r4
   1c0f8:	movge	r1, #0
   1c0fc:	andlt	r1, r8, #1
   1c100:	cmp	r1, #0
   1c104:	movne	r4, r3
   1c108:	smull	r0, r1, r4, lr
   1c10c:	cmp	r1, r0, asr #31
   1c110:	bne	1c1c0 <__assert_fail@plt+0xaef0>
   1c114:	cmp	r0, #63	; 0x3f
   1c118:	mov	r5, r0
   1c11c:	ble	1c18c <__assert_fail@plt+0xaebc>
   1c120:	cmp	r6, #0
   1c124:	sub	r1, r4, ip
   1c128:	streq	r6, [r7]
   1c12c:	cmp	r1, r2
   1c130:	bge	1c160 <__assert_fail@plt+0xae90>
   1c134:	adds	r4, ip, r2
   1c138:	bvs	1c1bc <__assert_fail@plt+0xaeec>
   1c13c:	cmp	r4, r3
   1c140:	movle	r3, #0
   1c144:	andgt	r3, r8, #1
   1c148:	cmp	r3, #0
   1c14c:	bne	1c1bc <__assert_fail@plt+0xaeec>
   1c150:	smull	r0, r1, r4, lr
   1c154:	cmp	r1, r0, asr #31
   1c158:	mov	r5, r0
   1c15c:	bne	1c1bc <__assert_fail@plt+0xaeec>
   1c160:	mov	r1, r5
   1c164:	mov	r0, r6
   1c168:	bl	1c590 <__assert_fail@plt+0xb2c0>
   1c16c:	cmp	r0, #0
   1c170:	beq	1c1a0 <__assert_fail@plt+0xaed0>
   1c174:	ldr	r8, [sp, #16]
   1c178:	str	r4, [r7]
   1c17c:	ldrd	r4, [sp]
   1c180:	ldrd	r6, [sp, #8]
   1c184:	add	sp, sp, #20
   1c188:	pop	{pc}		; (ldr pc, [sp], #4)
   1c18c:	mov	r0, #64	; 0x40
   1c190:	sdiv	r4, r0, lr
   1c194:	mls	r5, lr, r4, r0
   1c198:	sub	r5, r0, r5
   1c19c:	b	1c120 <__assert_fail@plt+0xae50>
   1c1a0:	adds	r5, r5, #0
   1c1a4:	movne	r5, #1
   1c1a8:	cmp	r6, #0
   1c1ac:	movne	r6, r5
   1c1b0:	moveq	r6, #1
   1c1b4:	cmp	r6, #0
   1c1b8:	beq	1c174 <__assert_fail@plt+0xaea4>
   1c1bc:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c1c0:	mvn	r0, #-2147483648	; 0x80000000
   1c1c4:	b	1c190 <__assert_fail@plt+0xaec0>
   1c1c8:	mov	r1, #1
   1c1cc:	str	r4, [sp, #-8]!
   1c1d0:	str	lr, [sp, #4]
   1c1d4:	bl	1c4e0 <__assert_fail@plt+0xb210>
   1c1d8:	cmp	r0, #0
   1c1dc:	beq	1c1ec <__assert_fail@plt+0xaf1c>
   1c1e0:	ldr	r4, [sp]
   1c1e4:	add	sp, sp, #4
   1c1e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1ec:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c1f0:	mov	r1, #1
   1c1f4:	str	r4, [sp, #-8]!
   1c1f8:	str	lr, [sp, #4]
   1c1fc:	bl	1c4e0 <__assert_fail@plt+0xb210>
   1c200:	cmp	r0, #0
   1c204:	beq	1c214 <__assert_fail@plt+0xaf44>
   1c208:	ldr	r4, [sp]
   1c20c:	add	sp, sp, #4
   1c210:	pop	{pc}		; (ldr pc, [sp], #4)
   1c214:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c218:	str	r4, [sp, #-8]!
   1c21c:	str	lr, [sp, #4]
   1c220:	bl	1c4e0 <__assert_fail@plt+0xb210>
   1c224:	cmp	r0, #0
   1c228:	beq	1c238 <__assert_fail@plt+0xaf68>
   1c22c:	ldr	r4, [sp]
   1c230:	add	sp, sp, #4
   1c234:	pop	{pc}		; (ldr pc, [sp], #4)
   1c238:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c23c:	str	r4, [sp, #-8]!
   1c240:	str	lr, [sp, #4]
   1c244:	bl	1c4e0 <__assert_fail@plt+0xb210>
   1c248:	cmp	r0, #0
   1c24c:	beq	1c25c <__assert_fail@plt+0xaf8c>
   1c250:	ldr	r4, [sp]
   1c254:	add	sp, sp, #4
   1c258:	pop	{pc}		; (ldr pc, [sp], #4)
   1c25c:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c260:	strd	r4, [sp, #-16]!
   1c264:	mov	r4, r1
   1c268:	str	r6, [sp, #8]
   1c26c:	mov	r6, r0
   1c270:	mov	r0, r1
   1c274:	str	lr, [sp, #12]
   1c278:	bl	1c554 <__assert_fail@plt+0xb284>
   1c27c:	subs	r5, r0, #0
   1c280:	beq	1c2a4 <__assert_fail@plt+0xafd4>
   1c284:	mov	r2, r4
   1c288:	mov	r1, r6
   1c28c:	bl	11030 <memcpy@plt>
   1c290:	mov	r0, r5
   1c294:	ldrd	r4, [sp]
   1c298:	ldr	r6, [sp, #8]
   1c29c:	add	sp, sp, #12
   1c2a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2a4:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c2a8:	strd	r4, [sp, #-16]!
   1c2ac:	mov	r4, r1
   1c2b0:	str	r6, [sp, #8]
   1c2b4:	mov	r6, r0
   1c2b8:	mov	r0, r1
   1c2bc:	str	lr, [sp, #12]
   1c2c0:	bl	1c554 <__assert_fail@plt+0xb284>
   1c2c4:	subs	r5, r0, #0
   1c2c8:	beq	1c2ec <__assert_fail@plt+0xb01c>
   1c2cc:	mov	r2, r4
   1c2d0:	mov	r1, r6
   1c2d4:	bl	11030 <memcpy@plt>
   1c2d8:	mov	r0, r5
   1c2dc:	ldrd	r4, [sp]
   1c2e0:	ldr	r6, [sp, #8]
   1c2e4:	add	sp, sp, #12
   1c2e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2ec:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c2f0:	strd	r4, [sp, #-16]!
   1c2f4:	mov	r4, r1
   1c2f8:	str	r6, [sp, #8]
   1c2fc:	mov	r6, r0
   1c300:	add	r0, r1, #1
   1c304:	str	lr, [sp, #12]
   1c308:	bl	1c554 <__assert_fail@plt+0xb284>
   1c30c:	subs	r5, r0, #0
   1c310:	beq	1c33c <__assert_fail@plt+0xb06c>
   1c314:	mov	r3, #0
   1c318:	mov	r1, r6
   1c31c:	mov	r2, r4
   1c320:	strb	r3, [r5, r4]
   1c324:	bl	11030 <memcpy@plt>
   1c328:	mov	r0, r5
   1c32c:	ldrd	r4, [sp]
   1c330:	ldr	r6, [sp, #8]
   1c334:	add	sp, sp, #12
   1c338:	pop	{pc}		; (ldr pc, [sp], #4)
   1c33c:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c340:	strd	r4, [sp, #-16]!
   1c344:	str	r6, [sp, #8]
   1c348:	mov	r6, r0
   1c34c:	str	lr, [sp, #12]
   1c350:	bl	11168 <strlen@plt>
   1c354:	add	r4, r0, #1
   1c358:	mov	r0, r4
   1c35c:	bl	1c554 <__assert_fail@plt+0xb284>
   1c360:	subs	r5, r0, #0
   1c364:	beq	1c388 <__assert_fail@plt+0xb0b8>
   1c368:	mov	r2, r4
   1c36c:	mov	r1, r6
   1c370:	bl	11030 <memcpy@plt>
   1c374:	mov	r0, r5
   1c378:	ldrd	r4, [sp]
   1c37c:	ldr	r6, [sp, #8]
   1c380:	add	sp, sp, #12
   1c384:	pop	{pc}		; (ldr pc, [sp], #4)
   1c388:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c38c:	movw	r3, #61748	; 0xf134
   1c390:	movt	r3, #2
   1c394:	str	r4, [sp, #-8]!
   1c398:	ldr	r4, [r3]
   1c39c:	mov	r2, #5
   1c3a0:	movw	r1, #58500	; 0xe484
   1c3a4:	movt	r1, #1
   1c3a8:	mov	r0, #0
   1c3ac:	str	lr, [sp, #4]
   1c3b0:	bl	11060 <dcgettext@plt>
   1c3b4:	mov	r3, r0
   1c3b8:	movw	r2, #57120	; 0xdf20
   1c3bc:	movt	r2, #1
   1c3c0:	mov	r1, #0
   1c3c4:	mov	r0, r4
   1c3c8:	bl	110f0 <error@plt>
   1c3cc:	bl	11294 <abort@plt>
   1c3d0:	orr	r1, r1, #512	; 0x200
   1c3d4:	str	r4, [sp, #-8]!
   1c3d8:	str	lr, [sp, #4]
   1c3dc:	bl	15040 <__assert_fail@plt+0x3d70>
   1c3e0:	cmp	r0, #0
   1c3e4:	beq	1c3f4 <__assert_fail@plt+0xb124>
   1c3e8:	ldr	r4, [sp]
   1c3ec:	add	sp, sp, #4
   1c3f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3f4:	bl	11180 <__errno_location@plt>
   1c3f8:	ldr	r3, [r0]
   1c3fc:	cmp	r3, #22
   1c400:	beq	1c408 <__assert_fail@plt+0xb138>
   1c404:	bl	1c38c <__assert_fail@plt+0xb0bc>
   1c408:	movw	r3, #58520	; 0xe498
   1c40c:	movt	r3, #1
   1c410:	movw	r1, #58532	; 0xe4a4
   1c414:	movt	r1, #1
   1c418:	movw	r0, #58544	; 0xe4b0
   1c41c:	movt	r0, #1
   1c420:	mov	r2, #41	; 0x29
   1c424:	bl	112d0 <__assert_fail@plt>
   1c428:	ldr	r3, [r0, #48]	; 0x30
   1c42c:	and	r3, r3, #17
   1c430:	cmp	r3, #16
   1c434:	beq	1c458 <__assert_fail@plt+0xb188>
   1c438:	cmp	r3, #17
   1c43c:	beq	1c448 <__assert_fail@plt+0xb178>
   1c440:	mov	r0, #0
   1c444:	bx	lr
   1c448:	ldr	r0, [r1, #48]	; 0x30
   1c44c:	adds	r0, r0, #0
   1c450:	movne	r0, #1
   1c454:	bx	lr
   1c458:	mov	r0, #1
   1c45c:	bx	lr
   1c460:	movw	r3, #61840	; 0xf190
   1c464:	movt	r3, #2
   1c468:	str	r4, [sp, #-8]!
   1c46c:	mov	r4, #0
   1c470:	ldr	r3, [r3]
   1c474:	mov	r2, #10
   1c478:	str	lr, [sp, #4]
   1c47c:	sub	sp, sp, #8
   1c480:	add	r1, sp, #4
   1c484:	mov	r0, sp
   1c488:	str	r4, [sp]
   1c48c:	str	r4, [sp, #4]
   1c490:	bl	10fd0 <__getdelim@plt>
   1c494:	subs	r3, r0, #0
   1c498:	ble	1c4c4 <__assert_fail@plt+0xb1f4>
   1c49c:	ldr	r0, [sp]
   1c4a0:	sub	r3, r3, #1
   1c4a4:	ldrb	r2, [r0, r3]
   1c4a8:	cmp	r2, #10
   1c4ac:	strbeq	r4, [r0, r3]
   1c4b0:	ldreq	r0, [sp]
   1c4b4:	bl	111ec <rpmatch@plt>
   1c4b8:	cmp	r0, #0
   1c4bc:	movle	r4, #0
   1c4c0:	movgt	r4, #1
   1c4c4:	ldr	r0, [sp]
   1c4c8:	bl	13a30 <__assert_fail@plt+0x2760>
   1c4cc:	mov	r0, r4
   1c4d0:	add	sp, sp, #8
   1c4d4:	ldr	r4, [sp]
   1c4d8:	add	sp, sp, #4
   1c4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4e0:	cmp	r1, #0
   1c4e4:	cmpne	r0, #0
   1c4e8:	beq	1c534 <__assert_fail@plt+0xb264>
   1c4ec:	strd	r4, [sp, #-16]!
   1c4f0:	umull	r4, r5, r0, r1
   1c4f4:	str	r6, [sp, #8]
   1c4f8:	str	lr, [sp, #12]
   1c4fc:	adds	r3, r5, #0
   1c500:	movne	r3, #1
   1c504:	cmp	r4, #0
   1c508:	blt	1c514 <__assert_fail@plt+0xb244>
   1c50c:	cmp	r3, #0
   1c510:	beq	1c540 <__assert_fail@plt+0xb270>
   1c514:	bl	11180 <__errno_location@plt>
   1c518:	mov	r3, #12
   1c51c:	ldrd	r4, [sp]
   1c520:	ldr	r6, [sp, #8]
   1c524:	add	sp, sp, #12
   1c528:	str	r3, [r0]
   1c52c:	mov	r0, #0
   1c530:	pop	{pc}		; (ldr pc, [sp], #4)
   1c534:	mov	r1, #1
   1c538:	mov	r0, r1
   1c53c:	b	10fac <calloc@plt>
   1c540:	ldrd	r4, [sp]
   1c544:	ldr	r6, [sp, #8]
   1c548:	ldr	lr, [sp, #12]
   1c54c:	add	sp, sp, #16
   1c550:	b	10fac <calloc@plt>
   1c554:	cmp	r0, #0
   1c558:	beq	1c564 <__assert_fail@plt+0xb294>
   1c55c:	blt	1c56c <__assert_fail@plt+0xb29c>
   1c560:	b	11108 <malloc@plt>
   1c564:	mov	r0, #1
   1c568:	b	11108 <malloc@plt>
   1c56c:	str	r4, [sp, #-8]!
   1c570:	str	lr, [sp, #4]
   1c574:	bl	11180 <__errno_location@plt>
   1c578:	mov	r3, #12
   1c57c:	ldr	r4, [sp]
   1c580:	add	sp, sp, #4
   1c584:	str	r3, [r0]
   1c588:	mov	r0, #0
   1c58c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c590:	cmp	r0, #0
   1c594:	beq	1c5bc <__assert_fail@plt+0xb2ec>
   1c598:	cmp	r1, #0
   1c59c:	str	r4, [sp, #-8]!
   1c5a0:	str	lr, [sp, #4]
   1c5a4:	beq	1c5c4 <__assert_fail@plt+0xb2f4>
   1c5a8:	blt	1c5d8 <__assert_fail@plt+0xb308>
   1c5ac:	ldr	r4, [sp]
   1c5b0:	ldr	lr, [sp, #4]
   1c5b4:	add	sp, sp, #8
   1c5b8:	b	1106c <realloc@plt>
   1c5bc:	mov	r0, r1
   1c5c0:	b	1c554 <__assert_fail@plt+0xb284>
   1c5c4:	bl	13a30 <__assert_fail@plt+0x2760>
   1c5c8:	ldr	r4, [sp]
   1c5cc:	add	sp, sp, #4
   1c5d0:	mov	r0, #0
   1c5d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5d8:	bl	11180 <__errno_location@plt>
   1c5dc:	mov	r3, #12
   1c5e0:	str	r3, [r0]
   1c5e4:	b	1c5c8 <__assert_fail@plt+0xb2f8>
   1c5e8:	strd	r4, [sp, #-16]!
   1c5ec:	mov	r4, r0
   1c5f0:	str	r6, [sp, #8]
   1c5f4:	str	lr, [sp, #12]
   1c5f8:	bl	110d8 <__fpending@plt>
   1c5fc:	ldr	r5, [r4]
   1c600:	mov	r6, r0
   1c604:	mov	r0, r4
   1c608:	bl	1c790 <__assert_fail@plt+0xb4c0>
   1c60c:	mov	r4, r0
   1c610:	and	r5, r5, #32
   1c614:	cmp	r5, #0
   1c618:	bne	1c650 <__assert_fail@plt+0xb380>
   1c61c:	cmp	r0, #0
   1c620:	beq	1c63c <__assert_fail@plt+0xb36c>
   1c624:	cmp	r6, #0
   1c628:	bne	1c668 <__assert_fail@plt+0xb398>
   1c62c:	bl	11180 <__errno_location@plt>
   1c630:	ldr	r4, [r0]
   1c634:	subs	r4, r4, #9
   1c638:	mvnne	r4, #0
   1c63c:	mov	r0, r4
   1c640:	ldrd	r4, [sp]
   1c644:	ldr	r6, [sp, #8]
   1c648:	add	sp, sp, #12
   1c64c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c650:	cmp	r0, #0
   1c654:	bne	1c668 <__assert_fail@plt+0xb398>
   1c658:	bl	11180 <__errno_location@plt>
   1c65c:	str	r4, [r0]
   1c660:	mvn	r4, #0
   1c664:	b	1c63c <__assert_fail@plt+0xb36c>
   1c668:	mvn	r4, #0
   1c66c:	b	1c63c <__assert_fail@plt+0xb36c>
   1c670:	movw	r3, #62998	; 0xf616
   1c674:	movt	r3, #149	; 0x95
   1c678:	strd	r4, [sp, #-8]!
   1c67c:	mov	r4, #0
   1c680:	mov	r5, #0
   1c684:	strd	r4, [r0, #16]
   1c688:	str	r3, [r0, #24]
   1c68c:	ldrd	r4, [sp]
   1c690:	add	sp, sp, #8
   1c694:	bx	lr
   1c698:	ldr	r2, [r0, #24]
   1c69c:	movw	r3, #62998	; 0xf616
   1c6a0:	movt	r3, #149	; 0x95
   1c6a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c6a8:	strd	r6, [sp, #8]
   1c6ac:	strd	r8, [sp, #16]
   1c6b0:	strd	sl, [sp, #24]
   1c6b4:	cmp	r2, r3
   1c6b8:	str	lr, [sp, #32]
   1c6bc:	sub	sp, sp, #4
   1c6c0:	bne	1c770 <__assert_fail@plt+0xb4a0>
   1c6c4:	ldrd	r6, [r0, #16]
   1c6c8:	ldrd	sl, [r1, #96]	; 0x60
   1c6cc:	orrs	r3, r6, r7
   1c6d0:	beq	1c724 <__assert_fail@plt+0xb454>
   1c6d4:	ldrd	r2, [r0]
   1c6d8:	cmp	r3, fp
   1c6dc:	cmpeq	r2, sl
   1c6e0:	beq	1c744 <__assert_fail@plt+0xb474>
   1c6e4:	adds	r8, r6, #1
   1c6e8:	adc	r9, r7, #0
   1c6ec:	and	r2, r6, r8
   1c6f0:	and	r3, r7, r9
   1c6f4:	orrs	r3, r2, r3
   1c6f8:	strd	r8, [r0, #16]
   1c6fc:	movne	r1, #0
   1c700:	beq	1c760 <__assert_fail@plt+0xb490>
   1c704:	mov	r0, r1
   1c708:	add	sp, sp, #4
   1c70c:	ldrd	r4, [sp]
   1c710:	ldrd	r6, [sp, #8]
   1c714:	ldrd	r8, [sp, #16]
   1c718:	ldrd	sl, [sp, #24]
   1c71c:	add	sp, sp, #32
   1c720:	pop	{pc}		; (ldr pc, [sp], #4)
   1c724:	mov	r2, #1
   1c728:	mov	r3, #0
   1c72c:	strd	r2, [r0, #16]
   1c730:	ldrd	r2, [r1]
   1c734:	mov	r1, #0
   1c738:	strd	sl, [r0]
   1c73c:	strd	r2, [r0, #8]
   1c740:	b	1c704 <__assert_fail@plt+0xb434>
   1c744:	ldrd	r4, [r1]
   1c748:	ldrd	r2, [r0, #8]
   1c74c:	cmp	r5, r3
   1c750:	cmpeq	r4, r2
   1c754:	bne	1c6e4 <__assert_fail@plt+0xb414>
   1c758:	mov	r1, #1
   1c75c:	b	1c704 <__assert_fail@plt+0xb434>
   1c760:	orrs	r3, r8, r9
   1c764:	bne	1c730 <__assert_fail@plt+0xb460>
   1c768:	mov	r1, #1
   1c76c:	b	1c704 <__assert_fail@plt+0xb434>
   1c770:	movw	r3, #58560	; 0xe4c0
   1c774:	movt	r3, #1
   1c778:	movw	r1, #58572	; 0xe4cc
   1c77c:	movt	r1, #1
   1c780:	movw	r0, #58592	; 0xe4e0
   1c784:	movt	r0, #1
   1c788:	mov	r2, #60	; 0x3c
   1c78c:	bl	112d0 <__assert_fail@plt>
   1c790:	strd	r4, [sp, #-12]!
   1c794:	mov	r4, r0
   1c798:	str	lr, [sp, #8]
   1c79c:	sub	sp, sp, #12
   1c7a0:	bl	111b0 <fileno@plt>
   1c7a4:	cmp	r0, #0
   1c7a8:	mov	r0, r4
   1c7ac:	blt	1c830 <__assert_fail@plt+0xb560>
   1c7b0:	bl	11120 <__freading@plt>
   1c7b4:	cmp	r0, #0
   1c7b8:	bne	1c7fc <__assert_fail@plt+0xb52c>
   1c7bc:	mov	r0, r4
   1c7c0:	bl	13770 <__assert_fail@plt+0x24a0>
   1c7c4:	cmp	r0, #0
   1c7c8:	beq	1c82c <__assert_fail@plt+0xb55c>
   1c7cc:	bl	11180 <__errno_location@plt>
   1c7d0:	mov	r5, r0
   1c7d4:	mov	r0, r4
   1c7d8:	ldr	r4, [r5]
   1c7dc:	bl	111c8 <fclose@plt>
   1c7e0:	cmp	r4, #0
   1c7e4:	mvnne	r0, #0
   1c7e8:	strne	r4, [r5]
   1c7ec:	add	sp, sp, #12
   1c7f0:	ldrd	r4, [sp]
   1c7f4:	add	sp, sp, #8
   1c7f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7fc:	mov	r0, r4
   1c800:	bl	111b0 <fileno@plt>
   1c804:	mov	r1, #1
   1c808:	mov	r2, #0
   1c80c:	mov	r3, #0
   1c810:	str	r1, [sp]
   1c814:	bl	110c0 <lseek64@plt>
   1c818:	mvn	r3, #0
   1c81c:	mvn	r2, #0
   1c820:	cmp	r1, r3
   1c824:	cmpeq	r0, r2
   1c828:	bne	1c7bc <__assert_fail@plt+0xb4ec>
   1c82c:	mov	r0, r4
   1c830:	add	sp, sp, #12
   1c834:	ldrd	r4, [sp]
   1c838:	ldr	lr, [sp, #8]
   1c83c:	add	sp, sp, #12
   1c840:	b	111c8 <fclose@plt>
   1c844:	push	{r1, r2, r3}
   1c848:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c84c:	strd	r6, [sp, #8]
   1c850:	str	lr, [sp, #16]
   1c854:	sub	sp, sp, #8
   1c858:	ldr	r1, [sp, #28]
   1c85c:	add	r2, sp, #32
   1c860:	str	r2, [sp, #4]
   1c864:	cmp	r1, #0
   1c868:	beq	1c944 <__assert_fail@plt+0xb674>
   1c86c:	movw	r3, #1030	; 0x406
   1c870:	mov	r6, r0
   1c874:	cmp	r1, r3
   1c878:	beq	1c954 <__assert_fail@plt+0xb684>
   1c87c:	cmp	r1, #11
   1c880:	beq	1c8fc <__assert_fail@plt+0xb62c>
   1c884:	ble	1c8dc <__assert_fail@plt+0xb60c>
   1c888:	movw	r2, #1031	; 0x407
   1c88c:	cmp	r1, r2
   1c890:	bgt	1c918 <__assert_fail@plt+0xb648>
   1c894:	cmp	r1, r3
   1c898:	bge	1c8a8 <__assert_fail@plt+0xb5d8>
   1c89c:	movw	r3, #1025	; 0x401
   1c8a0:	cmp	r1, r3
   1c8a4:	beq	1c8fc <__assert_fail@plt+0xb62c>
   1c8a8:	ldr	r3, [sp, #4]
   1c8ac:	mov	r0, r6
   1c8b0:	ldr	r2, [r3]
   1c8b4:	bl	111e0 <fcntl64@plt>
   1c8b8:	mov	r4, r0
   1c8bc:	mov	r0, r4
   1c8c0:	add	sp, sp, #8
   1c8c4:	ldrd	r4, [sp]
   1c8c8:	ldrd	r6, [sp, #8]
   1c8cc:	ldr	lr, [sp, #16]
   1c8d0:	add	sp, sp, #20
   1c8d4:	add	sp, sp, #12
   1c8d8:	bx	lr
   1c8dc:	cmp	r1, #4
   1c8e0:	beq	1c8a8 <__assert_fail@plt+0xb5d8>
   1c8e4:	bgt	1c90c <__assert_fail@plt+0xb63c>
   1c8e8:	cmp	r1, #2
   1c8ec:	beq	1c8a8 <__assert_fail@plt+0xb5d8>
   1c8f0:	bgt	1c8fc <__assert_fail@plt+0xb62c>
   1c8f4:	cmp	r1, #1
   1c8f8:	bne	1c8a8 <__assert_fail@plt+0xb5d8>
   1c8fc:	mov	r0, r6
   1c900:	bl	111e0 <fcntl64@plt>
   1c904:	mov	r4, r0
   1c908:	b	1c8bc <__assert_fail@plt+0xb5ec>
   1c90c:	cmp	r1, #9
   1c910:	bne	1c8a8 <__assert_fail@plt+0xb5d8>
   1c914:	b	1c8fc <__assert_fail@plt+0xb62c>
   1c918:	movw	r3, #1033	; 0x409
   1c91c:	cmp	r1, r3
   1c920:	beq	1c8a8 <__assert_fail@plt+0xb5d8>
   1c924:	blt	1c8fc <__assert_fail@plt+0xb62c>
   1c928:	movw	r3, #1034	; 0x40a
   1c92c:	cmp	r1, r3
   1c930:	bne	1c8a8 <__assert_fail@plt+0xb5d8>
   1c934:	mov	r0, r6
   1c938:	bl	111e0 <fcntl64@plt>
   1c93c:	mov	r4, r0
   1c940:	b	1c8bc <__assert_fail@plt+0xb5ec>
   1c944:	ldr	r2, [sp, #32]
   1c948:	bl	111e0 <fcntl64@plt>
   1c94c:	mov	r4, r0
   1c950:	b	1c8bc <__assert_fail@plt+0xb5ec>
   1c954:	movw	r5, #62196	; 0xf2f4
   1c958:	movt	r5, #2
   1c95c:	ldr	r7, [r2]
   1c960:	add	r2, sp, #36	; 0x24
   1c964:	ldr	r3, [r5]
   1c968:	str	r2, [sp, #4]
   1c96c:	mov	r2, r7
   1c970:	cmp	r3, #0
   1c974:	blt	1c990 <__assert_fail@plt+0xb6c0>
   1c978:	bl	111e0 <fcntl64@plt>
   1c97c:	subs	r4, r0, #0
   1c980:	blt	1c9f8 <__assert_fail@plt+0xb728>
   1c984:	mov	r3, #1
   1c988:	str	r3, [r5]
   1c98c:	b	1c8bc <__assert_fail@plt+0xb5ec>
   1c990:	mov	r1, #0
   1c994:	bl	111e0 <fcntl64@plt>
   1c998:	subs	r4, r0, #0
   1c99c:	blt	1c8bc <__assert_fail@plt+0xb5ec>
   1c9a0:	ldr	r3, [r5]
   1c9a4:	cmn	r3, #1
   1c9a8:	bne	1c8bc <__assert_fail@plt+0xb5ec>
   1c9ac:	mov	r1, #1
   1c9b0:	mov	r0, r4
   1c9b4:	bl	111e0 <fcntl64@plt>
   1c9b8:	subs	r2, r0, #0
   1c9bc:	blt	1c9d8 <__assert_fail@plt+0xb708>
   1c9c0:	orr	r2, r2, #1
   1c9c4:	mov	r1, #2
   1c9c8:	mov	r0, r4
   1c9cc:	bl	111e0 <fcntl64@plt>
   1c9d0:	cmn	r0, #1
   1c9d4:	bne	1c8bc <__assert_fail@plt+0xb5ec>
   1c9d8:	bl	11180 <__errno_location@plt>
   1c9dc:	mov	r5, r0
   1c9e0:	mov	r0, r4
   1c9e4:	ldr	r6, [r5]
   1c9e8:	mvn	r4, #0
   1c9ec:	bl	112a0 <close@plt>
   1c9f0:	str	r6, [r5]
   1c9f4:	b	1c8bc <__assert_fail@plt+0xb5ec>
   1c9f8:	bl	11180 <__errno_location@plt>
   1c9fc:	ldr	r3, [r0]
   1ca00:	cmp	r3, #22
   1ca04:	bne	1c984 <__assert_fail@plt+0xb6b4>
   1ca08:	mov	r2, r7
   1ca0c:	mov	r0, r6
   1ca10:	mov	r1, #0
   1ca14:	bl	111e0 <fcntl64@plt>
   1ca18:	subs	r4, r0, #0
   1ca1c:	mvnge	r3, #0
   1ca20:	strge	r3, [r5]
   1ca24:	bge	1c9ac <__assert_fail@plt+0xb6dc>
   1ca28:	b	1c8bc <__assert_fail@plt+0xb5ec>
   1ca2c:	push	{r1, r2, r3}
   1ca30:	push	{lr}		; (str lr, [sp, #-4]!)
   1ca34:	sub	sp, sp, #8
   1ca38:	ldr	r1, [sp, #12]
   1ca3c:	ands	r2, r1, #64	; 0x40
   1ca40:	bne	1ca5c <__assert_fail@plt+0xb78c>
   1ca44:	bl	110fc <open64@plt>
   1ca48:	bl	1b5e8 <__assert_fail@plt+0xa318>
   1ca4c:	add	sp, sp, #8
   1ca50:	pop	{lr}		; (ldr lr, [sp], #4)
   1ca54:	add	sp, sp, #12
   1ca58:	bx	lr
   1ca5c:	add	r3, sp, #16
   1ca60:	ldr	r2, [sp, #16]
   1ca64:	str	r3, [sp, #4]
   1ca68:	b	1ca44 <__assert_fail@plt+0xb774>
   1ca6c:	mov	r0, #14
   1ca70:	str	r4, [sp, #-8]!
   1ca74:	str	lr, [sp, #4]
   1ca78:	bl	1121c <nl_langinfo@plt>
   1ca7c:	cmp	r0, #0
   1ca80:	beq	1caa4 <__assert_fail@plt+0xb7d4>
   1ca84:	ldrb	r2, [r0]
   1ca88:	movw	r3, #58616	; 0xe4f8
   1ca8c:	movt	r3, #1
   1ca90:	ldr	r4, [sp]
   1ca94:	add	sp, sp, #4
   1ca98:	cmp	r2, #0
   1ca9c:	moveq	r0, r3
   1caa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1caa4:	ldr	r4, [sp]
   1caa8:	add	sp, sp, #4
   1caac:	movw	r0, #58616	; 0xe4f8
   1cab0:	movt	r0, #1
   1cab4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cab8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cabc:	mov	r5, r2
   1cac0:	strd	r6, [sp, #8]
   1cac4:	subs	r6, r0, #0
   1cac8:	mov	r7, r1
   1cacc:	str	lr, [sp, #16]
   1cad0:	sub	sp, sp, #12
   1cad4:	addeq	r6, sp, #4
   1cad8:	mov	r0, r6
   1cadc:	bl	110e4 <mbrtowc@plt>
   1cae0:	cmp	r5, #0
   1cae4:	cmnne	r0, #3
   1cae8:	mov	r4, r0
   1caec:	bhi	1cb08 <__assert_fail@plt+0xb838>
   1caf0:	mov	r0, r4
   1caf4:	add	sp, sp, #12
   1caf8:	ldrd	r4, [sp]
   1cafc:	ldrd	r6, [sp, #8]
   1cb00:	add	sp, sp, #16
   1cb04:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb08:	mov	r0, #0
   1cb0c:	bl	1cb6c <__assert_fail@plt+0xb89c>
   1cb10:	cmp	r0, #0
   1cb14:	bne	1caf0 <__assert_fail@plt+0xb820>
   1cb18:	ldrb	r3, [r7]
   1cb1c:	mov	r4, #1
   1cb20:	str	r3, [r6]
   1cb24:	b	1caf0 <__assert_fail@plt+0xb820>
   1cb28:	umull	r2, r3, r1, r2
   1cb2c:	cmp	r3, #0
   1cb30:	bne	1cb3c <__assert_fail@plt+0xb86c>
   1cb34:	mov	r1, r2
   1cb38:	b	1c590 <__assert_fail@plt+0xb2c0>
   1cb3c:	str	r4, [sp, #-8]!
   1cb40:	str	lr, [sp, #4]
   1cb44:	bl	11180 <__errno_location@plt>
   1cb48:	mov	r3, #12
   1cb4c:	ldr	r4, [sp]
   1cb50:	add	sp, sp, #4
   1cb54:	str	r3, [r0]
   1cb58:	mov	r0, #0
   1cb5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb60:	mov	r2, #3
   1cb64:	mov	r1, #0
   1cb68:	b	1c844 <__assert_fail@plt+0xb574>
   1cb6c:	push	{lr}		; (str lr, [sp, #-4]!)
   1cb70:	sub	sp, sp, #268	; 0x10c
   1cb74:	movw	r2, #257	; 0x101
   1cb78:	add	r1, sp, #4
   1cb7c:	bl	1cbc4 <__assert_fail@plt+0xb8f4>
   1cb80:	cmp	r0, #0
   1cb84:	movne	r0, #0
   1cb88:	bne	1cbbc <__assert_fail@plt+0xb8ec>
   1cb8c:	movw	r1, #58624	; 0xe500
   1cb90:	movt	r1, #1
   1cb94:	add	r0, sp, #4
   1cb98:	bl	10fdc <strcmp@plt>
   1cb9c:	cmp	r0, #0
   1cba0:	beq	1cbbc <__assert_fail@plt+0xb8ec>
   1cba4:	add	r0, sp, #4
   1cba8:	movw	r1, #58628	; 0xe504
   1cbac:	movt	r1, #1
   1cbb0:	bl	10fdc <strcmp@plt>
   1cbb4:	adds	r0, r0, #0
   1cbb8:	movne	r0, #1
   1cbbc:	add	sp, sp, #268	; 0x10c
   1cbc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbc4:	strd	r4, [sp, #-16]!
   1cbc8:	mov	r5, r1
   1cbcc:	mov	r1, #0
   1cbd0:	mov	r4, r2
   1cbd4:	str	r6, [sp, #8]
   1cbd8:	str	lr, [sp, #12]
   1cbdc:	bl	11204 <setlocale@plt>
   1cbe0:	subs	r6, r0, #0
   1cbe4:	beq	1cc64 <__assert_fail@plt+0xb994>
   1cbe8:	bl	11168 <strlen@plt>
   1cbec:	cmp	r4, r0
   1cbf0:	bhi	1cc10 <__assert_fail@plt+0xb940>
   1cbf4:	cmp	r4, #0
   1cbf8:	moveq	r0, #34	; 0x22
   1cbfc:	bne	1cc34 <__assert_fail@plt+0xb964>
   1cc00:	ldrd	r4, [sp]
   1cc04:	ldr	r6, [sp, #8]
   1cc08:	add	sp, sp, #12
   1cc0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc10:	add	r2, r0, #1
   1cc14:	mov	r1, r6
   1cc18:	mov	r0, r5
   1cc1c:	bl	11030 <memcpy@plt>
   1cc20:	ldrd	r4, [sp]
   1cc24:	mov	r0, #0
   1cc28:	ldr	r6, [sp, #8]
   1cc2c:	add	sp, sp, #12
   1cc30:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc34:	sub	r4, r4, #1
   1cc38:	mov	r1, r6
   1cc3c:	mov	r2, r4
   1cc40:	mov	r0, r5
   1cc44:	bl	11030 <memcpy@plt>
   1cc48:	mov	r3, #0
   1cc4c:	mov	r0, #34	; 0x22
   1cc50:	strb	r3, [r5, r4]
   1cc54:	ldrd	r4, [sp]
   1cc58:	ldr	r6, [sp, #8]
   1cc5c:	add	sp, sp, #12
   1cc60:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc64:	cmp	r4, #0
   1cc68:	mov	r0, #22
   1cc6c:	strbne	r6, [r5]
   1cc70:	ldrd	r4, [sp]
   1cc74:	ldr	r6, [sp, #8]
   1cc78:	add	sp, sp, #12
   1cc7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc80:	mov	r1, #0
   1cc84:	b	11204 <setlocale@plt>
   1cc88:	cmp	r3, #0
   1cc8c:	cmpeq	r2, #0
   1cc90:	bne	1cca8 <__assert_fail@plt+0xb9d8>
   1cc94:	cmp	r1, #0
   1cc98:	cmpeq	r0, #0
   1cc9c:	mvnne	r1, #0
   1cca0:	mvnne	r0, #0
   1cca4:	b	1ccc4 <__assert_fail@plt+0xb9f4>
   1cca8:	sub	sp, sp, #8
   1ccac:	push	{sp, lr}
   1ccb0:	bl	1ccd4 <__assert_fail@plt+0xba04>
   1ccb4:	ldr	lr, [sp, #4]
   1ccb8:	add	sp, sp, #8
   1ccbc:	pop	{r2, r3}
   1ccc0:	bx	lr
   1ccc4:	push	{r1, lr}
   1ccc8:	mov	r0, #8
   1cccc:	bl	10fc4 <raise@plt>
   1ccd0:	pop	{r1, pc}
   1ccd4:	cmp	r1, r3
   1ccd8:	cmpeq	r0, r2
   1ccdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cce0:	mov	r4, r0
   1cce4:	movcc	r0, #0
   1cce8:	mov	r5, r1
   1ccec:	ldr	lr, [sp, #36]	; 0x24
   1ccf0:	movcc	r1, r0
   1ccf4:	bcc	1cdf0 <__assert_fail@plt+0xbb20>
   1ccf8:	cmp	r3, #0
   1ccfc:	clzeq	ip, r2
   1cd00:	clzne	ip, r3
   1cd04:	addeq	ip, ip, #32
   1cd08:	cmp	r5, #0
   1cd0c:	clzeq	r1, r4
   1cd10:	addeq	r1, r1, #32
   1cd14:	clzne	r1, r5
   1cd18:	sub	ip, ip, r1
   1cd1c:	sub	sl, ip, #32
   1cd20:	lsl	r9, r3, ip
   1cd24:	rsb	fp, ip, #32
   1cd28:	orr	r9, r9, r2, lsl sl
   1cd2c:	orr	r9, r9, r2, lsr fp
   1cd30:	lsl	r8, r2, ip
   1cd34:	cmp	r5, r9
   1cd38:	cmpeq	r4, r8
   1cd3c:	movcc	r0, #0
   1cd40:	movcc	r1, r0
   1cd44:	bcc	1cd60 <__assert_fail@plt+0xba90>
   1cd48:	mov	r0, #1
   1cd4c:	subs	r4, r4, r8
   1cd50:	lsl	r1, r0, sl
   1cd54:	orr	r1, r1, r0, lsr fp
   1cd58:	lsl	r0, r0, ip
   1cd5c:	sbc	r5, r5, r9
   1cd60:	cmp	ip, #0
   1cd64:	beq	1cdf0 <__assert_fail@plt+0xbb20>
   1cd68:	lsr	r6, r8, #1
   1cd6c:	orr	r6, r6, r9, lsl #31
   1cd70:	lsr	r7, r9, #1
   1cd74:	mov	r2, ip
   1cd78:	b	1cd9c <__assert_fail@plt+0xbacc>
   1cd7c:	subs	r3, r4, r6
   1cd80:	sbc	r8, r5, r7
   1cd84:	adds	r3, r3, r3
   1cd88:	adc	r8, r8, r8
   1cd8c:	adds	r4, r3, #1
   1cd90:	adc	r5, r8, #0
   1cd94:	subs	r2, r2, #1
   1cd98:	beq	1cdb8 <__assert_fail@plt+0xbae8>
   1cd9c:	cmp	r5, r7
   1cda0:	cmpeq	r4, r6
   1cda4:	bcs	1cd7c <__assert_fail@plt+0xbaac>
   1cda8:	adds	r4, r4, r4
   1cdac:	adc	r5, r5, r5
   1cdb0:	subs	r2, r2, #1
   1cdb4:	bne	1cd9c <__assert_fail@plt+0xbacc>
   1cdb8:	lsr	r3, r4, ip
   1cdbc:	orr	r3, r3, r5, lsl fp
   1cdc0:	lsr	r2, r5, ip
   1cdc4:	orr	r3, r3, r5, lsr sl
   1cdc8:	adds	r0, r0, r4
   1cdcc:	mov	r4, r3
   1cdd0:	lsl	r3, r2, ip
   1cdd4:	orr	r3, r3, r4, lsl sl
   1cdd8:	lsl	ip, r4, ip
   1cddc:	orr	r3, r3, r4, lsr fp
   1cde0:	adc	r1, r1, r5
   1cde4:	subs	r0, r0, ip
   1cde8:	mov	r5, r2
   1cdec:	sbc	r1, r1, r3
   1cdf0:	cmp	lr, #0
   1cdf4:	strdne	r4, [lr]
   1cdf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdfc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ce00:	mov	r7, r0
   1ce04:	ldr	r6, [pc, #72]	; 1ce54 <__assert_fail@plt+0xbb84>
   1ce08:	ldr	r5, [pc, #72]	; 1ce58 <__assert_fail@plt+0xbb88>
   1ce0c:	add	r6, pc, r6
   1ce10:	add	r5, pc, r5
   1ce14:	sub	r6, r6, r5
   1ce18:	mov	r8, r1
   1ce1c:	mov	r9, r2
   1ce20:	bl	10f80 <fstatfs64@plt-0x20>
   1ce24:	asrs	r6, r6, #2
   1ce28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce2c:	mov	r4, #0
   1ce30:	add	r4, r4, #1
   1ce34:	ldr	r3, [r5], #4
   1ce38:	mov	r2, r9
   1ce3c:	mov	r1, r8
   1ce40:	mov	r0, r7
   1ce44:	blx	r3
   1ce48:	cmp	r6, r4
   1ce4c:	bne	1ce30 <__assert_fail@plt+0xbb60>
   1ce50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce54:	andeq	r2, r1, r0, lsl #2
   1ce58:	strdeq	r2, [r1], -r8
   1ce5c:	bx	lr
   1ce60:	ldr	r3, [pc, #12]	; 1ce74 <__assert_fail@plt+0xbba4>
   1ce64:	mov	r1, #0
   1ce68:	add	r3, pc, r3
   1ce6c:	ldr	r2, [r3]
   1ce70:	b	1118c <__cxa_atexit@plt>
   1ce74:			; <UNDEFINED> instruction: 0x000122b8

Disassembly of section .fini:

0001ce78 <.fini>:
   1ce78:	push	{r3, lr}
   1ce7c:	pop	{r3, pc}
