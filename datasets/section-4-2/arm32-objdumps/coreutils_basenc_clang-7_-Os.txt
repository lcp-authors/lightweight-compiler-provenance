
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010e60 <.init>:
   10e60:	push	{r3, lr}
   10e64:	bl	11144 <__assert_fail@plt+0x48>
   10e68:	pop	{r3, pc}

Disassembly of section .plt:

00010e6c <calloc@plt-0x14>:
   10e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e70:	ldr	lr, [pc, #4]	; 10e7c <calloc@plt-0x4>
   10e74:	add	lr, pc, lr
   10e78:	ldr	pc, [lr, #8]!
   10e7c:	andeq	r8, r1, r4, lsl #3

00010e80 <calloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #388]!	; 0x184

00010e8c <fputs_unlocked@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #380]!	; 0x17c

00010e98 <raise@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #372]!	; 0x174

00010ea4 <strcmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #364]!	; 0x16c

00010eb0 <posix_fadvise64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #356]!	; 0x164

00010ebc <fflush@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #348]!	; 0x15c

00010ec8 <memmove@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #340]!	; 0x154

00010ed4 <free@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #332]!	; 0x14c

00010ee0 <_exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #324]!	; 0x144

00010eec <memcpy@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #316]!	; 0x13c

00010ef8 <mbsinit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #308]!	; 0x134

00010f04 <fwrite_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #300]!	; 0x12c

00010f10 <memcmp@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #24, 20	; 0x18000
   10f18:	ldr	pc, [ip, #292]!	; 0x124

00010f1c <fputc_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #24, 20	; 0x18000
   10f24:	ldr	pc, [ip, #284]!	; 0x11c

00010f28 <dcgettext@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #24, 20	; 0x18000
   10f30:	ldr	pc, [ip, #276]!	; 0x114

00010f34 <realloc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #268]!	; 0x10c

00010f40 <textdomain@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #260]!	; 0x104

00010f4c <iswprint@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #252]!	; 0xfc

00010f58 <lseek64@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #244]!	; 0xf4

00010f64 <__ctype_get_mb_cur_max@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #24, 20	; 0x18000
   10f6c:	ldr	pc, [ip, #236]!	; 0xec

00010f70 <__fpending@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #24, 20	; 0x18000
   10f78:	ldr	pc, [ip, #228]!	; 0xe4

00010f7c <ferror_unlocked@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #24, 20	; 0x18000
   10f84:	ldr	pc, [ip, #220]!	; 0xdc

00010f88 <mbrtowc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #24, 20	; 0x18000
   10f90:	ldr	pc, [ip, #212]!	; 0xd4

00010f94 <error@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #24, 20	; 0x18000
   10f9c:	ldr	pc, [ip, #204]!	; 0xcc

00010fa0 <malloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #24, 20	; 0x18000
   10fa8:	ldr	pc, [ip, #196]!	; 0xc4

00010fac <__libc_start_main@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #24, 20	; 0x18000
   10fb4:	ldr	pc, [ip, #188]!	; 0xbc

00010fb8 <__freading@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #24, 20	; 0x18000
   10fc0:	ldr	pc, [ip, #180]!	; 0xb4

00010fc4 <__gmon_start__@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #24, 20	; 0x18000
   10fcc:	ldr	pc, [ip, #172]!	; 0xac

00010fd0 <getopt_long@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #24, 20	; 0x18000
   10fd8:	ldr	pc, [ip, #164]!	; 0xa4

00010fdc <__ctype_b_loc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #24, 20	; 0x18000
   10fe4:	ldr	pc, [ip, #156]!	; 0x9c

00010fe8 <exit@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #24, 20	; 0x18000
   10ff0:	ldr	pc, [ip, #148]!	; 0x94

00010ff4 <strlen@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #24, 20	; 0x18000
   10ffc:	ldr	pc, [ip, #140]!	; 0x8c

00011000 <strchr@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #24, 20	; 0x18000
   11008:	ldr	pc, [ip, #132]!	; 0x84

0001100c <__errno_location@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #24, 20	; 0x18000
   11014:	ldr	pc, [ip, #124]!	; 0x7c

00011018 <__cxa_atexit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #24, 20	; 0x18000
   11020:	ldr	pc, [ip, #116]!	; 0x74

00011024 <memset@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #24, 20	; 0x18000
   1102c:	ldr	pc, [ip, #108]!	; 0x6c

00011030 <__printf_chk@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #24, 20	; 0x18000
   11038:	ldr	pc, [ip, #100]!	; 0x64

0001103c <fileno@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #24, 20	; 0x18000
   11044:	ldr	pc, [ip, #92]!	; 0x5c

00011048 <__fprintf_chk@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #24, 20	; 0x18000
   11050:	ldr	pc, [ip, #84]!	; 0x54

00011054 <memchr@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #24, 20	; 0x18000
   1105c:	ldr	pc, [ip, #76]!	; 0x4c

00011060 <strtoimax@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #24, 20	; 0x18000
   11068:	ldr	pc, [ip, #68]!	; 0x44

0001106c <fclose@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #24, 20	; 0x18000
   11074:	ldr	pc, [ip, #60]!	; 0x3c

00011078 <fseeko64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #24, 20	; 0x18000
   11080:	ldr	pc, [ip, #52]!	; 0x34

00011084 <setlocale@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #24, 20	; 0x18000
   1108c:	ldr	pc, [ip, #44]!	; 0x2c

00011090 <strrchr@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #24, 20	; 0x18000
   11098:	ldr	pc, [ip, #36]!	; 0x24

0001109c <nl_langinfo@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #24, 20	; 0x18000
   110a4:	ldr	pc, [ip, #28]!

000110a8 <fopen64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #24, 20	; 0x18000
   110b0:	ldr	pc, [ip, #20]!

000110b4 <bindtextdomain@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #24, 20	; 0x18000
   110bc:	ldr	pc, [ip, #12]!

000110c0 <fread_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #4]!

000110cc <fputs@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #94208	; 0x17000
   110d4:	ldr	pc, [ip, #4092]!	; 0xffc

000110d8 <strncmp@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #94208	; 0x17000
   110e0:	ldr	pc, [ip, #4084]!	; 0xff4

000110e4 <abort@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #94208	; 0x17000
   110ec:	ldr	pc, [ip, #4076]!	; 0xfec

000110f0 <feof_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #94208	; 0x17000
   110f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #94208	; 0x17000
   11104:	ldr	pc, [ip, #4060]!	; 0xfdc

Disassembly of section .text:

00011108 <.text>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <__assert_fail@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <__assert_fail@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <__assert_fail@plt+0x44>
   11130:	bl	10fac <__libc_start_main@plt>
   11134:	bl	110e4 <abort@plt>
   11138:			; <UNDEFINED> instruction: 0x00016cbc
   1113c:	andeq	r1, r1, ip, ror #10
   11140:	andeq	r6, r1, ip, asr ip
   11144:	ldr	r3, [pc, #20]	; 11160 <__assert_fail@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <__assert_fail@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	10fc4 <__gmon_start__@plt>
   11160:	andeq	r7, r1, ip, lsr #29
   11164:	andeq	r0, r0, r4, ror #1
   11168:	ldr	r0, [pc, #24]	; 11188 <__assert_fail@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <__assert_fail@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r9, r2, r8, lsr r1
   1118c:	andeq	r9, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <__assert_fail@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <__assert_fail@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <__assert_fail@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r9, r2, r8, lsr r1
   111c4:	andeq	r9, r2, r8, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <__assert_fail@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <__assert_fail@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r9, r2, ip, asr r1
   111f4:	b	11194 <__assert_fail@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	sub	sp, sp, #56	; 0x38
   11204:	mov	r8, r0
   11208:	cmp	r0, #0
   1120c:	bne	1152c <__assert_fail@plt+0x430>
   11210:	movw	r1, #27915	; 0x6d0b
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10f28 <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #37244	; 0x917c
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11030 <__printf_chk@plt>
   1123c:	movw	r1, #27945	; 0x6d29
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10f28 <dcgettext@plt>
   11250:	movw	r9, #37204	; 0x9154
   11254:	movt	r9, #2
   11258:	ldr	r1, [r9]
   1125c:	bl	10e8c <fputs_unlocked@plt>
   11260:	movw	r1, #29414	; 0x72e6
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f28 <dcgettext@plt>
   11274:	ldr	r1, [r9]
   11278:	bl	10e8c <fputs_unlocked@plt>
   1127c:	movw	r1, #29470	; 0x731e
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	movt	r1, #1
   1128c:	bl	10f28 <dcgettext@plt>
   11290:	ldr	r1, [r9]
   11294:	bl	10e8c <fputs_unlocked@plt>
   11298:	movw	r1, #28015	; 0x6d6f
   1129c:	mov	r0, #0
   112a0:	mov	r2, #5
   112a4:	movt	r1, #1
   112a8:	bl	10f28 <dcgettext@plt>
   112ac:	ldr	r1, [r9]
   112b0:	bl	10e8c <fputs_unlocked@plt>
   112b4:	movw	r1, #28085	; 0x6db5
   112b8:	mov	r0, #0
   112bc:	mov	r2, #5
   112c0:	movt	r1, #1
   112c4:	bl	10f28 <dcgettext@plt>
   112c8:	ldr	r1, [r9]
   112cc:	bl	10e8c <fputs_unlocked@plt>
   112d0:	movw	r1, #28156	; 0x6dfc
   112d4:	mov	r0, #0
   112d8:	mov	r2, #5
   112dc:	movt	r1, #1
   112e0:	bl	10f28 <dcgettext@plt>
   112e4:	ldr	r1, [r9]
   112e8:	bl	10e8c <fputs_unlocked@plt>
   112ec:	movw	r1, #28226	; 0x6e42
   112f0:	mov	r0, #0
   112f4:	mov	r2, #5
   112f8:	movt	r1, #1
   112fc:	bl	10f28 <dcgettext@plt>
   11300:	ldr	r1, [r9]
   11304:	bl	10e8c <fputs_unlocked@plt>
   11308:	movw	r1, #28300	; 0x6e8c
   1130c:	mov	r0, #0
   11310:	mov	r2, #5
   11314:	movt	r1, #1
   11318:	bl	10f28 <dcgettext@plt>
   1131c:	ldr	r1, [r9]
   11320:	bl	10e8c <fputs_unlocked@plt>
   11324:	movw	r1, #28358	; 0x6ec6
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	movt	r1, #1
   11334:	bl	10f28 <dcgettext@plt>
   11338:	ldr	r1, [r9]
   1133c:	bl	10e8c <fputs_unlocked@plt>
   11340:	movw	r1, #28432	; 0x6f10
   11344:	mov	r0, #0
   11348:	mov	r2, #5
   1134c:	movt	r1, #1
   11350:	bl	10f28 <dcgettext@plt>
   11354:	ldr	r1, [r9]
   11358:	bl	10e8c <fputs_unlocked@plt>
   1135c:	movw	r1, #28507	; 0x6f5b
   11360:	mov	r0, #0
   11364:	mov	r2, #5
   11368:	movt	r1, #1
   1136c:	bl	10f28 <dcgettext@plt>
   11370:	ldr	r1, [r9]
   11374:	bl	10e8c <fputs_unlocked@plt>
   11378:	movw	r1, #28749	; 0x704d
   1137c:	mov	r0, #0
   11380:	mov	r2, #5
   11384:	movt	r1, #1
   11388:	bl	10f28 <dcgettext@plt>
   1138c:	ldr	r1, [r9]
   11390:	bl	10e8c <fputs_unlocked@plt>
   11394:	movw	r1, #28971	; 0x712b
   11398:	mov	r0, #0
   1139c:	mov	r2, #5
   113a0:	movt	r1, #1
   113a4:	bl	10f28 <dcgettext@plt>
   113a8:	ldr	r1, [r9]
   113ac:	bl	10e8c <fputs_unlocked@plt>
   113b0:	movw	r1, #29016	; 0x7158
   113b4:	mov	r0, #0
   113b8:	mov	r2, #5
   113bc:	movt	r1, #1
   113c0:	bl	10f28 <dcgettext@plt>
   113c4:	ldr	r1, [r9]
   113c8:	bl	10e8c <fputs_unlocked@plt>
   113cc:	movw	r1, #29070	; 0x718e
   113d0:	mov	r0, #0
   113d4:	mov	r2, #5
   113d8:	movt	r1, #1
   113dc:	bl	10f28 <dcgettext@plt>
   113e0:	ldr	r1, [r9]
   113e4:	bl	10e8c <fputs_unlocked@plt>
   113e8:	movw	r0, #30448	; 0x76f0
   113ec:	mov	r6, sp
   113f0:	movt	r0, #1
   113f4:	mov	r1, r6
   113f8:	ldm	r0!, {r2, r3, r4, r5}
   113fc:	stmia	r1!, {r2, r3, r4, r5}
   11400:	ldm	r0!, {r2, r3, r4, r5, r7}
   11404:	stmia	r1!, {r2, r3, r4, r5, r7}
   11408:	ldm	r0, {r2, r3, r4, r5, r7}
   1140c:	stm	r1, {r2, r3, r4, r5, r7}
   11410:	movw	r1, #29545	; 0x7369
   11414:	movw	r5, #29268	; 0x7254
   11418:	movt	r1, #1
   1141c:	movt	r5, #1
   11420:	mov	r0, r5
   11424:	bl	10ea4 <strcmp@plt>
   11428:	cmp	r0, #0
   1142c:	ldrne	r1, [r6, #8]!
   11430:	cmpne	r1, #0
   11434:	bne	11420 <__assert_fail@plt+0x324>
   11438:	ldr	r6, [r6, #4]
   1143c:	movw	r1, #29640	; 0x73c8
   11440:	mov	r0, #0
   11444:	mov	r2, #5
   11448:	movt	r1, #1
   1144c:	bl	10f28 <dcgettext@plt>
   11450:	movw	r2, #29329	; 0x7291
   11454:	movw	r3, #29663	; 0x73df
   11458:	mov	r1, r0
   1145c:	mov	r0, #1
   11460:	movt	r2, #1
   11464:	movt	r3, #1
   11468:	bl	11030 <__printf_chk@plt>
   1146c:	cmp	r6, #0
   11470:	mov	r0, #5
   11474:	mov	r1, #0
   11478:	moveq	r6, r5
   1147c:	bl	11084 <setlocale@plt>
   11480:	cmp	r0, #0
   11484:	beq	114bc <__assert_fail@plt+0x3c0>
   11488:	movw	r1, #29703	; 0x7407
   1148c:	mov	r2, #3
   11490:	movt	r1, #1
   11494:	bl	110d8 <strncmp@plt>
   11498:	cmp	r0, #0
   1149c:	beq	114bc <__assert_fail@plt+0x3c0>
   114a0:	movw	r1, #29707	; 0x740b
   114a4:	mov	r0, #0
   114a8:	mov	r2, #5
   114ac:	movt	r1, #1
   114b0:	bl	10f28 <dcgettext@plt>
   114b4:	ldr	r1, [r9]
   114b8:	bl	10e8c <fputs_unlocked@plt>
   114bc:	movw	r1, #29778	; 0x7452
   114c0:	mov	r0, #0
   114c4:	mov	r2, #5
   114c8:	movt	r1, #1
   114cc:	bl	10f28 <dcgettext@plt>
   114d0:	movw	r2, #29663	; 0x73df
   114d4:	mov	r1, r0
   114d8:	mov	r0, #1
   114dc:	mov	r3, r5
   114e0:	movt	r2, #1
   114e4:	bl	11030 <__printf_chk@plt>
   114e8:	movw	r1, #29805	; 0x746d
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	movt	r1, #1
   114f8:	bl	10f28 <dcgettext@plt>
   114fc:	movw	r3, #29855	; 0x749f
   11500:	mov	r1, r0
   11504:	movw	r0, #29573	; 0x7385
   11508:	cmp	r6, r5
   1150c:	mov	r2, r6
   11510:	movt	r0, #1
   11514:	movt	r3, #1
   11518:	moveq	r3, r0
   1151c:	mov	r0, #1
   11520:	bl	11030 <__printf_chk@plt>
   11524:	mov	r0, r8
   11528:	bl	10fe8 <exit@plt>
   1152c:	movw	r0, #37192	; 0x9148
   11530:	movw	r1, #27876	; 0x6ce4
   11534:	mov	r2, #5
   11538:	movt	r0, #2
   1153c:	movt	r1, #1
   11540:	ldr	r5, [r0]
   11544:	mov	r0, #0
   11548:	bl	10f28 <dcgettext@plt>
   1154c:	mov	r2, r0
   11550:	movw	r0, #37244	; 0x917c
   11554:	mov	r1, #1
   11558:	movt	r0, #2
   1155c:	ldr	r3, [r0]
   11560:	mov	r0, r5
   11564:	bl	11048 <__fprintf_chk@plt>
   11568:	b	11524 <__assert_fail@plt+0x428>
   1156c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11570:	add	fp, sp, #28
   11574:	sub	sp, sp, #36	; 0x24
   11578:	mov	r5, r0
   1157c:	ldr	r0, [r1]
   11580:	mov	r4, r1
   11584:	bl	13c38 <__assert_fail@plt+0x2b3c>
   11588:	movw	r1, #29855	; 0x749f
   1158c:	mov	r0, #6
   11590:	movt	r1, #1
   11594:	bl	11084 <setlocale@plt>
   11598:	movw	r6, #29333	; 0x7295
   1159c:	movw	r1, #29275	; 0x725b
   115a0:	movt	r6, #1
   115a4:	movt	r1, #1
   115a8:	mov	r0, r6
   115ac:	bl	110b4 <bindtextdomain@plt>
   115b0:	mov	r0, r6
   115b4:	bl	10f40 <textdomain@plt>
   115b8:	movw	r0, #14668	; 0x394c
   115bc:	movt	r0, #1
   115c0:	bl	16cc0 <__assert_fail@plt+0x5bc4>
   115c4:	mov	r0, #0
   115c8:	movw	r7, #29299	; 0x7273
   115cc:	movw	r6, #30224	; 0x7610
   115d0:	mov	sl, #0
   115d4:	mov	r9, #76	; 0x4c
   115d8:	str	r0, [sp, #20]
   115dc:	mov	r0, #0
   115e0:	movt	r7, #1
   115e4:	movt	r6, #1
   115e8:	str	r0, [sp, #16]
   115ec:	mov	r0, #0
   115f0:	b	11680 <__assert_fail@plt+0x584>
   115f4:	cmp	r0, #100	; 0x64
   115f8:	beq	11668 <__assert_fail@plt+0x56c>
   115fc:	cmp	r0, #105	; 0x69
   11600:	beq	11674 <__assert_fail@plt+0x578>
   11604:	cmp	r0, #119	; 0x77
   11608:	bne	11824 <__assert_fail@plt+0x728>
   1160c:	movw	r0, #37208	; 0x9158
   11610:	movw	r1, #29855	; 0x749f
   11614:	mov	r2, #10
   11618:	add	r3, sp, #24
   1161c:	movt	r0, #2
   11620:	movt	r1, #1
   11624:	ldr	r0, [r0]
   11628:	str	r1, [sp]
   1162c:	mov	r1, #0
   11630:	bl	160c4 <__assert_fail@plt+0x4fc8>
   11634:	cmp	r0, #1
   11638:	bhi	118f8 <__assert_fail@plt+0x7fc>
   1163c:	ldr	r1, [sp, #28]
   11640:	cmn	r1, #1
   11644:	ble	118f8 <__assert_fail@plt+0x7fc>
   11648:	ldr	r2, [sp, #24]
   1164c:	mvn	r3, #-2147483648	; 0x80000000
   11650:	subs	r3, r3, r2
   11654:	rscs	r1, r1, #0
   11658:	movwlt	r2, #0
   1165c:	subs	r9, r0, #1
   11660:	movne	r9, r2
   11664:	b	1167c <__assert_fail@plt+0x580>
   11668:	mov	r0, #1
   1166c:	str	r0, [sp, #20]
   11670:	b	1167c <__assert_fail@plt+0x580>
   11674:	mov	r0, #1
   11678:	str	r0, [sp, #16]
   1167c:	mov	r0, r8
   11680:	mov	r8, r0
   11684:	mov	r0, r5
   11688:	mov	r1, r4
   1168c:	mov	r2, r7
   11690:	mov	r3, r6
   11694:	str	sl, [sp]
   11698:	bl	10fd0 <getopt_long@plt>
   1169c:	sub	r1, r0, #256	; 0x100
   116a0:	cmp	r1, #8
   116a4:	bcc	11680 <__assert_fail@plt+0x584>
   116a8:	cmp	r0, #99	; 0x63
   116ac:	bgt	115f4 <__assert_fail@plt+0x4f8>
   116b0:	cmn	r0, #3
   116b4:	beq	117a4 <__assert_fail@plt+0x6a8>
   116b8:	cmn	r0, #2
   116bc:	beq	117f8 <__assert_fail@plt+0x6fc>
   116c0:	cmn	r0, #1
   116c4:	bne	11824 <__assert_fail@plt+0x728>
   116c8:	sub	r0, r8, #256	; 0x100
   116cc:	cmp	r0, #8
   116d0:	bcs	11800 <__assert_fail@plt+0x704>
   116d4:	movw	r1, #30800	; 0x7850
   116d8:	movw	r2, #37220	; 0x9164
   116dc:	movw	r6, #37184	; 0x9140
   116e0:	movt	r1, #1
   116e4:	movt	r2, #2
   116e8:	movt	r6, #2
   116ec:	ldr	r1, [r1, r0, lsl #2]
   116f0:	str	r1, [r2]
   116f4:	movw	r1, #30768	; 0x7830
   116f8:	movw	r2, #37216	; 0x9160
   116fc:	movt	r1, #1
   11700:	movt	r2, #2
   11704:	ldr	r1, [r1, r0, lsl #2]
   11708:	str	r1, [r2]
   1170c:	movw	r1, #30832	; 0x7870
   11710:	movw	r2, #37224	; 0x9168
   11714:	movt	r1, #1
   11718:	movt	r2, #2
   1171c:	ldr	r1, [r1, r0, lsl #2]
   11720:	str	r1, [r2]
   11724:	movw	r1, #30864	; 0x7890
   11728:	movw	r2, #37228	; 0x916c
   1172c:	movt	r1, #1
   11730:	movt	r2, #2
   11734:	ldr	r1, [r1, r0, lsl #2]
   11738:	str	r1, [r2]
   1173c:	movw	r1, #30896	; 0x78b0
   11740:	movt	r1, #1
   11744:	ldr	r0, [r1, r0, lsl #2]
   11748:	movw	r1, #37232	; 0x9170
   1174c:	movt	r1, #2
   11750:	str	r0, [r1]
   11754:	ldr	r0, [r6]
   11758:	sub	r1, r5, r0
   1175c:	cmp	r1, #2
   11760:	blt	1182c <__assert_fail@plt+0x730>
   11764:	movw	r1, #29394	; 0x72d2
   11768:	mov	r0, #0
   1176c:	mov	r2, #5
   11770:	movt	r1, #1
   11774:	bl	10f28 <dcgettext@plt>
   11778:	mov	r5, r0
   1177c:	ldr	r0, [r6]
   11780:	add	r0, r4, r0, lsl #2
   11784:	ldr	r0, [r0, #4]
   11788:	bl	1563c <__assert_fail@plt+0x4540>
   1178c:	mov	r3, r0
   11790:	mov	r0, #0
   11794:	mov	r1, #0
   11798:	mov	r2, r5
   1179c:	bl	10f94 <error@plt>
   117a0:	b	11824 <__assert_fail@plt+0x728>
   117a4:	movw	r0, #37104	; 0x90f0
   117a8:	movw	r2, #29359	; 0x72af
   117ac:	mov	r1, #0
   117b0:	movw	r7, #29343	; 0x729f
   117b4:	movt	r0, #2
   117b8:	movt	r2, #1
   117bc:	str	r1, [sp, #8]
   117c0:	movw	r1, #29268	; 0x7254
   117c4:	movt	r7, #1
   117c8:	ldr	r3, [r0]
   117cc:	movw	r0, #37204	; 0x9154
   117d0:	str	r2, [sp, #4]
   117d4:	movw	r2, #29329	; 0x7291
   117d8:	movt	r1, #1
   117dc:	str	r7, [sp]
   117e0:	movt	r0, #2
   117e4:	movt	r2, #1
   117e8:	ldr	r0, [r0]
   117ec:	bl	15b28 <__assert_fail@plt+0x4a2c>
   117f0:	mov	r0, #0
   117f4:	bl	10fe8 <exit@plt>
   117f8:	mov	r0, #0
   117fc:	bl	111f8 <__assert_fail@plt+0xfc>
   11800:	movw	r1, #29372	; 0x72bc
   11804:	mov	r0, #0
   11808:	mov	r2, #5
   1180c:	movt	r1, #1
   11810:	bl	10f28 <dcgettext@plt>
   11814:	mov	r2, r0
   11818:	mov	r0, #0
   1181c:	mov	r1, #0
   11820:	bl	10f94 <error@plt>
   11824:	mov	r0, #1
   11828:	bl	111f8 <__assert_fail@plt+0xfc>
   1182c:	cmp	r0, r5
   11830:	movw	r1, #31633	; 0x7b91
   11834:	ldrlt	r4, [r4, r0, lsl #2]
   11838:	movt	r1, #1
   1183c:	movwge	r4, #31633	; 0x7b91
   11840:	movtge	r4, #1
   11844:	mov	r0, r4
   11848:	bl	10ea4 <strcmp@plt>
   1184c:	cmp	r0, #0
   11850:	bne	11864 <__assert_fail@plt+0x768>
   11854:	movw	r0, #37200	; 0x9150
   11858:	movt	r0, #2
   1185c:	ldr	r5, [r0]
   11860:	b	118b0 <__assert_fail@plt+0x7b4>
   11864:	movw	r1, #29411	; 0x72e3
   11868:	mov	r0, r4
   1186c:	movt	r1, #1
   11870:	bl	110a8 <fopen64@plt>
   11874:	mov	r5, r0
   11878:	cmp	r0, #0
   1187c:	bne	118b0 <__assert_fail@plt+0x7b4>
   11880:	bl	1100c <__errno_location@plt>
   11884:	ldr	r5, [r0]
   11888:	mov	r0, #0
   1188c:	mov	r1, #3
   11890:	mov	r2, r4
   11894:	bl	154a8 <__assert_fail@plt+0x43ac>
   11898:	movw	r2, #29308	; 0x727c
   1189c:	mov	r3, r0
   118a0:	mov	r0, #1
   118a4:	mov	r1, r5
   118a8:	movt	r2, #1
   118ac:	bl	10f94 <error@plt>
   118b0:	mov	r0, r5
   118b4:	mov	r1, #2
   118b8:	bl	13a38 <__assert_fail@plt+0x293c>
   118bc:	movw	r0, #37204	; 0x9154
   118c0:	movt	r0, #2
   118c4:	ldr	r2, [r0]
   118c8:	ldr	r0, [sp, #20]
   118cc:	tst	r0, #1
   118d0:	beq	118e8 <__assert_fail@plt+0x7ec>
   118d4:	ldr	r0, [sp, #16]
   118d8:	mov	r1, r4
   118dc:	and	r3, r0, #1
   118e0:	mov	r0, r5
   118e4:	bl	123b4 <__assert_fail@plt+0x12b8>
   118e8:	mov	r0, r5
   118ec:	mov	r1, r4
   118f0:	mov	r3, r9
   118f4:	bl	12620 <__assert_fail@plt+0x1524>
   118f8:	movw	r1, #29311	; 0x727f
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	10f28 <dcgettext@plt>
   1190c:	mov	r4, r0
   11910:	movw	r0, #37208	; 0x9158
   11914:	movt	r0, #2
   11918:	ldr	r0, [r0]
   1191c:	bl	1563c <__assert_fail@plt+0x4540>
   11920:	movw	r2, #29304	; 0x7278
   11924:	str	r0, [sp]
   11928:	mov	r0, #1
   1192c:	mov	r1, #0
   11930:	mov	r3, r4
   11934:	movt	r2, #1
   11938:	bl	10f94 <error@plt>
   1193c:	movw	r1, #21846	; 0x5556
   11940:	add	r0, r0, #2
   11944:	movt	r1, #21845	; 0x5555
   11948:	smmul	r0, r0, r1
   1194c:	add	r0, r0, r0, lsr #31
   11950:	lsl	r0, r0, #2
   11954:	bx	lr
   11958:	add	r0, r0, #4
   1195c:	b	1331c <__assert_fail@plt+0x2220>
   11960:	push	{r4, sl, fp, lr}
   11964:	add	fp, sp, #8
   11968:	sub	sp, sp, #8
   1196c:	mov	r4, r0
   11970:	ldr	r0, [fp, #8]
   11974:	str	r0, [sp]
   11978:	add	r0, r4, #4
   1197c:	bl	13328 <__assert_fail@plt+0x222c>
   11980:	ldr	r1, [r4, #4]
   11984:	str	r1, [r4]
   11988:	sub	sp, fp, #8
   1198c:	pop	{r4, sl, fp, pc}
   11990:	mov	r1, r0
   11994:	mov	r0, #1
   11998:	cmp	r1, #46	; 0x2e
   1199c:	bgt	119b4 <__assert_fail@plt+0x8b8>
   119a0:	cmp	r1, #43	; 0x2b
   119a4:	beq	119cc <__assert_fail@plt+0x8d0>
   119a8:	cmp	r1, #45	; 0x2d
   119ac:	bne	119c4 <__assert_fail@plt+0x8c8>
   119b0:	bx	lr
   119b4:	cmp	r1, #47	; 0x2f
   119b8:	beq	119cc <__assert_fail@plt+0x8d0>
   119bc:	cmp	r1, #95	; 0x5f
   119c0:	bxeq	lr
   119c4:	mov	r0, r1
   119c8:	b	132fc <__assert_fail@plt+0x2200>
   119cc:	mov	r0, #0
   119d0:	bx	lr
   119d4:	push	{r4, r5, fp, lr}
   119d8:	add	fp, sp, #8
   119dc:	mov	r4, r3
   119e0:	mov	r5, r2
   119e4:	bl	130bc <__assert_fail@plt+0x1fc0>
   119e8:	cmp	r4, #0
   119ec:	popeq	{r4, r5, fp, pc}
   119f0:	ldrb	r0, [r5]
   119f4:	sub	r4, r4, #1
   119f8:	cmp	r0, #43	; 0x2b
   119fc:	beq	11a10 <__assert_fail@plt+0x914>
   11a00:	cmp	r0, #47	; 0x2f
   11a04:	bne	11a18 <__assert_fail@plt+0x91c>
   11a08:	mov	r0, #95	; 0x5f
   11a0c:	b	11a14 <__assert_fail@plt+0x918>
   11a10:	mov	r0, #45	; 0x2d
   11a14:	strb	r0, [r5]
   11a18:	add	r5, r5, #1
   11a1c:	b	119e8 <__assert_fail@plt+0x8ec>
   11a20:	push	{r4, sl, fp, lr}
   11a24:	add	fp, sp, #8
   11a28:	mov	r4, r0
   11a2c:	add	r0, r0, #4
   11a30:	bl	1331c <__assert_fail@plt+0x2220>
   11a34:	movw	r0, #4200	; 0x1068
   11a38:	str	r0, [r4, #20]
   11a3c:	movw	r0, #4200	; 0x1068
   11a40:	bl	15c60 <__assert_fail@plt+0x4b64>
   11a44:	str	r0, [r4, #16]
   11a48:	pop	{r4, sl, fp, pc}
   11a4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11a50:	add	fp, sp, #24
   11a54:	sub	sp, sp, #8
   11a58:	mov	r5, r0
   11a5c:	ldr	r0, [r0, #20]
   11a60:	mov	r8, r3
   11a64:	mov	r6, r2
   11a68:	mov	r7, r1
   11a6c:	mov	r4, r5
   11a70:	cmp	r0, r2
   11a74:	bge	11a94 <__assert_fail@plt+0x998>
   11a78:	ldr	r0, [r4, #16]!
   11a7c:	lsl	r1, r6, #1
   11a80:	mov	r2, #1
   11a84:	str	r1, [r4, #4]
   11a88:	bl	15bf4 <__assert_fail@plt+0x4af8>
   11a8c:	str	r0, [r4]
   11a90:	b	11a98 <__assert_fail@plt+0x99c>
   11a94:	ldr	r0, [r4, #16]!
   11a98:	ldr	r9, [fp, #8]
   11a9c:	mov	r1, r7
   11aa0:	mov	r2, r6
   11aa4:	bl	10eec <memcpy@plt>
   11aa8:	ldr	r1, [r4]
   11aac:	cmp	r6, #0
   11ab0:	beq	11b1c <__assert_fail@plt+0xa20>
   11ab4:	mov	r0, r6
   11ab8:	ldrb	r2, [r1]
   11abc:	cmp	r2, #46	; 0x2e
   11ac0:	bgt	11adc <__assert_fail@plt+0x9e0>
   11ac4:	mov	r3, #43	; 0x2b
   11ac8:	cmp	r2, #45	; 0x2d
   11acc:	beq	11ae8 <__assert_fail@plt+0x9ec>
   11ad0:	cmp	r2, #43	; 0x2b
   11ad4:	bne	11aec <__assert_fail@plt+0x9f0>
   11ad8:	b	11b04 <__assert_fail@plt+0xa08>
   11adc:	cmp	r2, #95	; 0x5f
   11ae0:	bne	11afc <__assert_fail@plt+0xa00>
   11ae4:	mov	r3, #47	; 0x2f
   11ae8:	strb	r3, [r1]
   11aec:	subs	r0, r0, #1
   11af0:	add	r1, r1, #1
   11af4:	bne	11ab8 <__assert_fail@plt+0x9bc>
   11af8:	b	11b18 <__assert_fail@plt+0xa1c>
   11afc:	cmp	r2, #47	; 0x2f
   11b00:	bne	11aec <__assert_fail@plt+0x9f0>
   11b04:	mov	r0, #0
   11b08:	str	r0, [r9]
   11b0c:	mov	r0, #0
   11b10:	sub	sp, fp, #24
   11b14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11b18:	ldr	r1, [r4]
   11b1c:	add	r0, r5, #4
   11b20:	mov	r2, r6
   11b24:	mov	r3, r8
   11b28:	str	r9, [sp]
   11b2c:	bl	13328 <__assert_fail@plt+0x222c>
   11b30:	ldr	r1, [r5, #4]
   11b34:	str	r1, [r5]
   11b38:	sub	sp, fp, #24
   11b3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11b40:	movw	r1, #26215	; 0x6667
   11b44:	add	r0, r0, #4
   11b48:	movt	r1, #26214	; 0x6666
   11b4c:	smmul	r0, r0, r1
   11b50:	lsr	r1, r0, #1
   11b54:	add	r0, r1, r0, lsr #31
   11b58:	lsl	r0, r0, #3
   11b5c:	bx	lr
   11b60:	add	r0, r0, #4
   11b64:	b	12bb0 <__assert_fail@plt+0x1ab4>
   11b68:	push	{r4, sl, fp, lr}
   11b6c:	add	fp, sp, #8
   11b70:	sub	sp, sp, #8
   11b74:	mov	r4, r0
   11b78:	ldr	r0, [fp, #8]
   11b7c:	str	r0, [sp]
   11b80:	add	r0, r4, #4
   11b84:	bl	12bbc <__assert_fail@plt+0x1ac0>
   11b88:	ldr	r1, [r4, #4]
   11b8c:	str	r1, [r4]
   11b90:	sub	sp, fp, #8
   11b94:	pop	{r4, sl, fp, pc}
   11b98:	sub	r1, r0, #65	; 0x41
   11b9c:	sub	r0, r0, #48	; 0x30
   11ba0:	mov	r2, #0
   11ba4:	uxtb	r1, r1
   11ba8:	uxtb	r0, r0
   11bac:	cmp	r1, #22
   11bb0:	mov	r1, #0
   11bb4:	movwcc	r1, #1
   11bb8:	cmp	r0, #10
   11bbc:	movwcc	r2, #1
   11bc0:	orr	r0, r2, r1
   11bc4:	bx	lr
   11bc8:	push	{r4, r5, fp, lr}
   11bcc:	add	fp, sp, #8
   11bd0:	mov	r4, r3
   11bd4:	mov	r5, r2
   11bd8:	bl	128e8 <__assert_fail@plt+0x17ec>
   11bdc:	cmp	r4, #0
   11be0:	popeq	{r4, r5, fp, pc}
   11be4:	movw	r0, #30504	; 0x7728
   11be8:	movt	r0, #1
   11bec:	ldrb	r1, [r5]
   11bf0:	sub	r2, r1, #50	; 0x32
   11bf4:	uxtb	r2, r2
   11bf8:	cmp	r2, #41	; 0x29
   11bfc:	bcs	11c18 <__assert_fail@plt+0xb1c>
   11c00:	add	r1, r0, r1
   11c04:	subs	r4, r4, #1
   11c08:	ldrb	r1, [r1, #-50]	; 0xffffffce
   11c0c:	strb	r1, [r5], #1
   11c10:	bne	11bec <__assert_fail@plt+0xaf0>
   11c14:	pop	{r4, r5, fp, pc}
   11c18:	movw	r0, #29961	; 0x7509
   11c1c:	movw	r1, #29986	; 0x7522
   11c20:	movw	r3, #29999	; 0x752f
   11c24:	mov	r2, #452	; 0x1c4
   11c28:	movt	r0, #1
   11c2c:	movt	r1, #1
   11c30:	movt	r3, #1
   11c34:	bl	110fc <__assert_fail@plt>
   11c38:	push	{r4, sl, fp, lr}
   11c3c:	add	fp, sp, #8
   11c40:	mov	r4, r0
   11c44:	add	r0, r0, #4
   11c48:	bl	12bb0 <__assert_fail@plt+0x1ab4>
   11c4c:	movw	r0, #4200	; 0x1068
   11c50:	str	r0, [r4, #20]
   11c54:	movw	r0, #4200	; 0x1068
   11c58:	bl	15c60 <__assert_fail@plt+0x4b64>
   11c5c:	str	r0, [r4, #16]
   11c60:	pop	{r4, sl, fp, pc}
   11c64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c68:	add	fp, sp, #24
   11c6c:	sub	sp, sp, #8
   11c70:	mov	r4, r0
   11c74:	ldr	r0, [r0, #20]
   11c78:	mov	r8, r3
   11c7c:	mov	r9, r2
   11c80:	mov	r7, r1
   11c84:	mov	r5, r4
   11c88:	cmp	r0, r2
   11c8c:	bge	11cb0 <__assert_fail@plt+0xbb4>
   11c90:	ldr	r0, [r5, #16]!
   11c94:	lsl	r1, r9, #1
   11c98:	mov	r2, #1
   11c9c:	str	r1, [r5, #4]
   11ca0:	bl	15bf4 <__assert_fail@plt+0x4af8>
   11ca4:	mov	r1, r0
   11ca8:	str	r0, [r5]
   11cac:	b	11cb4 <__assert_fail@plt+0xbb8>
   11cb0:	ldr	r1, [r5, #16]!
   11cb4:	ldr	ip, [fp, #8]
   11cb8:	cmp	r9, #0
   11cbc:	beq	11d0c <__assert_fail@plt+0xc10>
   11cc0:	movw	r2, #30545	; 0x7751
   11cc4:	mov	r3, r9
   11cc8:	movt	r2, #1
   11ccc:	ldrb	r0, [r7]
   11cd0:	sub	r3, r3, #1
   11cd4:	sub	r6, r0, #48	; 0x30
   11cd8:	uxtb	r6, r6
   11cdc:	cmp	r6, #10
   11ce0:	subcs	r6, r0, #65	; 0x41
   11ce4:	uxtbcs	r6, r6
   11ce8:	cmpcs	r6, #21
   11cec:	bhi	11cf8 <__assert_fail@plt+0xbfc>
   11cf0:	add	r0, r2, r0
   11cf4:	ldrb	r0, [r0, #-48]	; 0xffffffd0
   11cf8:	strb	r0, [r1], #1
   11cfc:	add	r7, r7, #1
   11d00:	cmp	r3, #0
   11d04:	bne	11ccc <__assert_fail@plt+0xbd0>
   11d08:	ldr	r1, [r5]
   11d0c:	add	r0, r4, #4
   11d10:	mov	r2, r9
   11d14:	mov	r3, r8
   11d18:	str	ip, [sp]
   11d1c:	bl	12bbc <__assert_fail@plt+0x1ac0>
   11d20:	ldr	r1, [r4, #4]
   11d24:	str	r1, [r4]
   11d28:	sub	sp, fp, #24
   11d2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d30:	lsl	r0, r0, #1
   11d34:	bx	lr
   11d38:	sub	r1, r0, #65	; 0x41
   11d3c:	sub	r0, r0, #48	; 0x30
   11d40:	mov	r2, #0
   11d44:	uxtb	r1, r1
   11d48:	uxtb	r0, r0
   11d4c:	cmp	r1, #6
   11d50:	mov	r1, #0
   11d54:	movwcc	r1, #1
   11d58:	cmp	r0, #10
   11d5c:	movwcc	r2, #1
   11d60:	orr	r0, r2, r1
   11d64:	bx	lr
   11d68:	push	{fp, lr}
   11d6c:	mov	fp, sp
   11d70:	cmp	r1, #0
   11d74:	popeq	{fp, pc}
   11d78:	movw	ip, #30928	; 0x78d0
   11d7c:	movt	ip, #1
   11d80:	ldrb	lr, [r0], #1
   11d84:	subs	r1, r1, #1
   11d88:	ldrb	r3, [ip, lr, lsr #4]
   11d8c:	strb	r3, [r2]
   11d90:	and	r3, lr, #15
   11d94:	ldrb	r3, [ip, r3]
   11d98:	strb	r3, [r2, #1]
   11d9c:	add	r2, r2, #2
   11da0:	bne	11d80 <__assert_fail@plt+0xc84>
   11da4:	pop	{fp, pc}
   11da8:	push	{r4, sl, fp, lr}
   11dac:	add	fp, sp, #8
   11db0:	mov	r4, r0
   11db4:	movw	r0, #4200	; 0x1068
   11db8:	str	r0, [r4, #20]
   11dbc:	movw	r0, #4200	; 0x1068
   11dc0:	bl	15c60 <__assert_fail@plt+0x4b64>
   11dc4:	str	r0, [r4, #16]
   11dc8:	mov	r0, #0
   11dcc:	strb	r0, [r4, #5]
   11dd0:	mov	r0, #1
   11dd4:	str	r0, [r4]
   11dd8:	pop	{r4, sl, fp, pc}
   11ddc:	push	{r4, r5, fp, lr}
   11de0:	add	fp, sp, #8
   11de4:	ldr	ip, [fp, #8]
   11de8:	mov	r4, #0
   11dec:	cmp	r2, #0
   11df0:	str	r4, [ip]
   11df4:	beq	11e84 <__assert_fail@plt+0xd88>
   11df8:	cmp	r2, #0
   11dfc:	moveq	r0, #1
   11e00:	popeq	{r4, r5, fp, pc}
   11e04:	ldrb	lr, [r1], #1
   11e08:	sub	r2, r2, #1
   11e0c:	cmp	lr, #10
   11e10:	beq	11df8 <__assert_fail@plt+0xcfc>
   11e14:	sub	r4, lr, #48	; 0x30
   11e18:	uxtb	r5, r4
   11e1c:	mvn	r4, #47	; 0x2f
   11e20:	cmp	r5, #10
   11e24:	bcc	11e40 <__assert_fail@plt+0xd44>
   11e28:	sub	r4, lr, #65	; 0x41
   11e2c:	uxtb	r5, r4
   11e30:	mvn	r4, #54	; 0x36
   11e34:	cmp	r5, #5
   11e38:	movhi	r0, #0
   11e3c:	pophi	{r4, r5, fp, pc}
   11e40:	ldrb	r5, [r0, #5]
   11e44:	add	r4, r4, lr
   11e48:	cmp	r5, #0
   11e4c:	beq	11e70 <__assert_fail@plt+0xd74>
   11e50:	ldrb	r5, [r0, #4]
   11e54:	add	r5, r4, r5, lsl #4
   11e58:	strb	r5, [r3], #1
   11e5c:	ldr	r5, [ip]
   11e60:	add	r5, r5, #1
   11e64:	str	r5, [ip]
   11e68:	ldrb	r4, [r0, #5]
   11e6c:	b	11e78 <__assert_fail@plt+0xd7c>
   11e70:	strb	r4, [r0, #4]
   11e74:	mov	r4, #0
   11e78:	eor	r5, r4, #1
   11e7c:	strb	r5, [r0, #5]
   11e80:	b	11df8 <__assert_fail@plt+0xcfc>
   11e84:	ldrb	r0, [r0, #5]
   11e88:	clz	r0, r0
   11e8c:	lsr	r0, r0, #5
   11e90:	pop	{r4, r5, fp, pc}
   11e94:	lsl	r0, r0, #3
   11e98:	bx	lr
   11e9c:	orr	r0, r0, #1
   11ea0:	sub	r0, r0, #49	; 0x31
   11ea4:	clz	r0, r0
   11ea8:	lsr	r0, r0, #5
   11eac:	bx	lr
   11eb0:	push	{fp, lr}
   11eb4:	mov	fp, sp
   11eb8:	cmp	r1, #0
   11ebc:	popeq	{fp, pc}
   11ec0:	ldrb	ip, [r0]
   11ec4:	mov	lr, #0
   11ec8:	sxtb	r3, ip
   11ecc:	lsl	ip, ip, #1
   11ed0:	cmn	r3, #1
   11ed4:	mov	r3, #49	; 0x31
   11ed8:	movwgt	r3, #48	; 0x30
   11edc:	strb	r3, [r2, lr]
   11ee0:	add	lr, lr, #1
   11ee4:	cmp	lr, #8
   11ee8:	bne	11ec8 <__assert_fail@plt+0xdcc>
   11eec:	add	r0, r0, #1
   11ef0:	add	r2, r2, #8
   11ef4:	subs	r1, r1, #1
   11ef8:	bne	11ec0 <__assert_fail@plt+0xdc4>
   11efc:	pop	{fp, pc}
   11f00:	push	{r4, sl, fp, lr}
   11f04:	add	fp, sp, #8
   11f08:	mov	r4, r0
   11f0c:	movw	r0, #4200	; 0x1068
   11f10:	str	r0, [r4, #20]
   11f14:	movw	r0, #4200	; 0x1068
   11f18:	bl	15c60 <__assert_fail@plt+0x4b64>
   11f1c:	str	r0, [r4, #16]
   11f20:	mov	r0, #0
   11f24:	strb	r0, [r4, #4]
   11f28:	str	r0, [r4]
   11f2c:	pop	{r4, sl, fp, pc}
   11f30:	push	{r4, r5, r6, sl, fp, lr}
   11f34:	add	fp, sp, #16
   11f38:	ldr	ip, [fp, #8]
   11f3c:	mov	lr, #0
   11f40:	cmp	r2, #0
   11f44:	str	lr, [ip]
   11f48:	beq	11fe4 <__assert_fail@plt+0xee8>
   11f4c:	add	r1, r1, #1
   11f50:	rsb	r4, r2, #1
   11f54:	ldrb	r2, [r1, #-1]
   11f58:	cmp	r2, #10
   11f5c:	bne	11f74 <__assert_fail@plt+0xe78>
   11f60:	add	r4, r4, #1
   11f64:	add	r1, r1, #1
   11f68:	cmp	r4, #1
   11f6c:	bne	11f54 <__assert_fail@plt+0xe58>
   11f70:	b	11fdc <__assert_fail@plt+0xee0>
   11f74:	orr	r5, r2, #1
   11f78:	cmp	r5, #49	; 0x31
   11f7c:	movne	r0, #0
   11f80:	popne	{r4, r5, r6, sl, fp, pc}
   11f84:	ldr	r5, [r0]
   11f88:	sub	r2, r2, #49	; 0x31
   11f8c:	clz	r2, r2
   11f90:	lsr	r2, r2, #5
   11f94:	cmp	r5, #0
   11f98:	moveq	r5, #8
   11f9c:	streq	r5, [r0]
   11fa0:	subs	r5, r5, #1
   11fa4:	str	r5, [r0]
   11fa8:	ldrb	r6, [r0, #4]
   11fac:	orr	r2, r6, r2, lsl r5
   11fb0:	strb	r2, [r0, #4]
   11fb4:	bne	11fd0 <__assert_fail@plt+0xed4>
   11fb8:	strb	r2, [r3], #1
   11fbc:	strb	lr, [r0, #4]
   11fc0:	ldr	r2, [ip]
   11fc4:	add	r2, r2, #1
   11fc8:	str	r2, [ip]
   11fcc:	str	lr, [r0]
   11fd0:	rsb	r2, r4, #0
   11fd4:	cmp	r4, #0
   11fd8:	bne	11f4c <__assert_fail@plt+0xe50>
   11fdc:	mov	r0, #1
   11fe0:	pop	{r4, r5, r6, sl, fp, pc}
   11fe4:	ldr	r0, [r0]
   11fe8:	clz	r0, r0
   11fec:	lsr	r0, r0, #5
   11ff0:	pop	{r4, r5, r6, sl, fp, pc}
   11ff4:	push	{r4, sl, fp, lr}
   11ff8:	add	fp, sp, #8
   11ffc:	cmp	r1, #0
   12000:	popeq	{r4, sl, fp, pc}
   12004:	mov	ip, #24
   12008:	ldrb	lr, [r0]
   1200c:	mov	r3, #0
   12010:	mov	r4, lr
   12014:	bfi	r4, ip, #1, #31
   12018:	strb	r4, [r2, r3]
   1201c:	add	r3, r3, #1
   12020:	ubfx	lr, lr, #1, #7
   12024:	cmp	r3, #8
   12028:	bne	12010 <__assert_fail@plt+0xf14>
   1202c:	add	r0, r0, #1
   12030:	add	r2, r2, #8
   12034:	subs	r1, r1, #1
   12038:	bne	12008 <__assert_fail@plt+0xf0c>
   1203c:	pop	{r4, sl, fp, pc}
   12040:	push	{r4, r5, r6, sl, fp, lr}
   12044:	add	fp, sp, #16
   12048:	ldr	ip, [fp, #8]
   1204c:	mov	lr, #0
   12050:	cmp	r2, #0
   12054:	str	lr, [ip]
   12058:	beq	120ec <__assert_fail@plt+0xff0>
   1205c:	add	r1, r1, #1
   12060:	rsb	r4, r2, #1
   12064:	ldrb	r2, [r1, #-1]
   12068:	cmp	r2, #10
   1206c:	bne	12084 <__assert_fail@plt+0xf88>
   12070:	add	r4, r4, #1
   12074:	add	r1, r1, #1
   12078:	cmp	r4, #1
   1207c:	bne	12064 <__assert_fail@plt+0xf68>
   12080:	b	120e4 <__assert_fail@plt+0xfe8>
   12084:	orr	r5, r2, #1
   12088:	cmp	r5, #49	; 0x31
   1208c:	movne	r0, #0
   12090:	popne	{r4, r5, r6, sl, fp, pc}
   12094:	ldr	r5, [r0]
   12098:	ldrb	r6, [r0, #4]
   1209c:	sub	r2, r2, #49	; 0x31
   120a0:	clz	r2, r2
   120a4:	lsr	r2, r2, #5
   120a8:	orr	r2, r6, r2, lsl r5
   120ac:	add	r5, r5, #1
   120b0:	cmp	r5, #8
   120b4:	strb	r2, [r0, #4]
   120b8:	str	r5, [r0]
   120bc:	bne	120d8 <__assert_fail@plt+0xfdc>
   120c0:	strb	r2, [r3], #1
   120c4:	strb	lr, [r0, #4]
   120c8:	ldr	r2, [ip]
   120cc:	add	r2, r2, #1
   120d0:	str	r2, [ip]
   120d4:	str	lr, [r0]
   120d8:	rsb	r2, r4, #0
   120dc:	cmp	r4, #0
   120e0:	bne	1205c <__assert_fail@plt+0xf60>
   120e4:	mov	r0, #1
   120e8:	pop	{r4, r5, r6, sl, fp, pc}
   120ec:	ldr	r0, [r0]
   120f0:	clz	r0, r0
   120f4:	lsr	r0, r0, #5
   120f8:	pop	{r4, r5, r6, sl, fp, pc}
   120fc:	add	r0, r0, r0, lsl #2
   12100:	asr	r1, r0, #31
   12104:	add	r0, r0, r1, lsr #30
   12108:	asr	r0, r0, #2
   1210c:	bx	lr
   12110:	push	{r4, sl, fp, lr}
   12114:	add	fp, sp, #8
   12118:	mov	r4, r0
   1211c:	bl	13758 <__assert_fail@plt+0x265c>
   12120:	mov	r1, r0
   12124:	mov	r0, #1
   12128:	cmp	r1, #0
   1212c:	popne	{r4, sl, fp, pc}
   12130:	movw	r0, #30073	; 0x7579
   12134:	mov	r1, r4
   12138:	mov	r2, #24
   1213c:	movt	r0, #1
   12140:	bl	11054 <memchr@plt>
   12144:	cmp	r0, #0
   12148:	movwne	r0, #1
   1214c:	pop	{r4, sl, fp, pc}
   12150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12154:	add	fp, sp, #28
   12158:	sub	sp, sp, #12
   1215c:	cmp	r1, #0
   12160:	beq	12208 <__assert_fail@plt+0x110c>
   12164:	movw	r8, #30586	; 0x777a
   12168:	mov	r4, r3
   1216c:	mov	r5, r2
   12170:	mov	r6, #0
   12174:	add	r7, sp, #8
   12178:	mov	sl, #85	; 0x55
   1217c:	mov	r3, #0
   12180:	movt	r8, #1
   12184:	ldrb	r2, [r0], #1
   12188:	sub	r1, r1, #1
   1218c:	strb	r2, [r7, r3]
   12190:	add	r3, r3, #1
   12194:	cmp	r3, #4
   12198:	bne	121f8 <__assert_fail@plt+0x10fc>
   1219c:	stm	sp, {r0, r1}
   121a0:	mov	r1, #0
   121a4:	mov	r9, #4
   121a8:	ldr	r0, [sp, #8]
   121ac:	rev	r7, r0
   121b0:	mov	r0, r7
   121b4:	mov	r2, #85	; 0x55
   121b8:	mov	r3, #0
   121bc:	bl	16a50 <__assert_fail@plt+0x5954>
   121c0:	add	r2, r6, r9
   121c4:	cmp	r2, r4
   121c8:	mlslt	r2, r0, sl, r7
   121cc:	mov	r7, r0
   121d0:	ldrblt	r2, [r8, r2]
   121d4:	strblt	r2, [r5, r9]
   121d8:	sub	r9, r9, #1
   121dc:	cmn	r9, #1
   121e0:	bne	121b0 <__assert_fail@plt+0x10b4>
   121e4:	ldm	sp, {r0, r1}
   121e8:	add	r6, r6, #5
   121ec:	add	r5, r5, #5
   121f0:	mov	r3, #0
   121f4:	add	r7, sp, #8
   121f8:	cmp	r1, #0
   121fc:	bne	12184 <__assert_fail@plt+0x1088>
   12200:	cmp	r3, #0
   12204:	bne	12210 <__assert_fail@plt+0x1114>
   12208:	sub	sp, fp, #28
   1220c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12210:	movw	r1, #30097	; 0x7591
   12214:	mov	r0, #0
   12218:	mov	r2, #5
   1221c:	movt	r1, #1
   12220:	bl	10f28 <dcgettext@plt>
   12224:	mov	r2, r0
   12228:	mov	r0, #1
   1222c:	mov	r1, #0
   12230:	bl	10f94 <error@plt>
   12234:	push	{r4, sl, fp, lr}
   12238:	add	fp, sp, #8
   1223c:	mov	r4, r0
   12240:	movw	r0, #4200	; 0x1068
   12244:	str	r0, [r4, #20]
   12248:	movw	r0, #4200	; 0x1068
   1224c:	bl	15c60 <__assert_fail@plt+0x4b64>
   12250:	str	r0, [r4, #16]
   12254:	mov	r1, #1
   12258:	mov	r0, #0
   1225c:	str	r1, [r4]
   12260:	str	r0, [r4, #4]
   12264:	pop	{r4, sl, fp, pc}
   12268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1226c:	add	fp, sp, #28
   12270:	ldr	lr, [fp, #8]
   12274:	mov	ip, #0
   12278:	cmp	r2, #0
   1227c:	str	ip, [lr]
   12280:	beq	123a0 <__assert_fail@plt+0x12a4>
   12284:	movw	r9, #30671	; 0x77cf
   12288:	movw	r8, #33969	; 0x84b1
   1228c:	movt	r9, #1
   12290:	movt	r8, #796	; 0x31c
   12294:	add	r1, r1, #1
   12298:	rsb	r6, r2, #1
   1229c:	ldrb	r2, [r1, #-1]
   122a0:	cmp	r2, #10
   122a4:	bne	122bc <__assert_fail@plt+0x11c0>
   122a8:	add	r6, r6, #1
   122ac:	add	r1, r1, #1
   122b0:	cmp	r6, #1
   122b4:	bne	1229c <__assert_fail@plt+0x11a0>
   122b8:	b	12390 <__assert_fail@plt+0x1294>
   122bc:	sub	r7, r2, #33	; 0x21
   122c0:	mov	ip, #0
   122c4:	uxtb	r7, r7
   122c8:	cmp	r7, #92	; 0x5c
   122cc:	bhi	123ac <__assert_fail@plt+0x12b0>
   122d0:	add	r2, r9, r2
   122d4:	ldrsb	r2, [r2, #-33]	; 0xffffffdf
   122d8:	cmp	r2, #0
   122dc:	blt	123ac <__assert_fail@plt+0x12b0>
   122e0:	mov	r4, r0
   122e4:	ldr	r5, [r4, #4]!
   122e8:	add	ip, r5, #1
   122ec:	mov	r7, r4
   122f0:	str	ip, [r7], r5
   122f4:	strb	r2, [r7, #4]
   122f8:	ldr	r7, [r4]
   122fc:	cmp	r7, #5
   12300:	bne	12380 <__assert_fail@plt+0x1284>
   12304:	ldrb	r2, [r0, #9]
   12308:	ldrb	r7, [r0, #10]
   1230c:	movw	r4, #24301	; 0x5eed
   12310:	ldrb	r5, [r0, #11]
   12314:	ldrb	sl, [r0, #8]
   12318:	mov	ip, #0
   1231c:	movt	r4, #9
   12320:	mul	r2, r2, r4
   12324:	movw	r4, #7225	; 0x1c39
   12328:	smlabb	r2, r7, r4, r2
   1232c:	mov	r7, #85	; 0x55
   12330:	smlabb	r2, r5, r7, r2
   12334:	ldrb	r7, [r0, #12]
   12338:	mov	r5, #0
   1233c:	add	r2, r2, r7
   12340:	umlal	r2, r5, sl, r8
   12344:	tst	r5, #7
   12348:	bne	123ac <__assert_fail@plt+0x12b0>
   1234c:	lsr	r7, r2, #16
   12350:	strb	r2, [r3, #3]
   12354:	strb	r7, [r3, #1]
   12358:	lsr	r7, r2, #24
   1235c:	lsr	r2, r2, #8
   12360:	strb	r7, [r3]
   12364:	strb	r2, [r3, #2]
   12368:	mov	r7, #0
   1236c:	add	r3, r3, #4
   12370:	ldr	r2, [lr]
   12374:	add	r2, r2, #4
   12378:	str	r2, [lr]
   1237c:	str	r7, [r0, #4]
   12380:	rsb	r2, r6, #0
   12384:	cmp	r6, #0
   12388:	bne	12294 <__assert_fail@plt+0x1198>
   1238c:	b	12394 <__assert_fail@plt+0x1298>
   12390:	ldr	r7, [r0, #4]
   12394:	mov	ip, #1
   12398:	str	r7, [r0]
   1239c:	b	123ac <__assert_fail@plt+0x12b0>
   123a0:	ldr	r0, [r0, #4]
   123a4:	cmp	r0, #1
   123a8:	movwlt	ip, #1
   123ac:	mov	r0, ip
   123b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123b4:	push	{fp, lr}
   123b8:	mov	fp, sp
   123bc:	sub	sp, sp, #48	; 0x30
   123c0:	movw	r5, #37216	; 0x9160
   123c4:	stmib	sp, {r1, r2, r3}
   123c8:	mov	r8, r0
   123cc:	movw	r0, #4200	; 0x1068
   123d0:	movt	r5, #2
   123d4:	ldr	r1, [r5]
   123d8:	blx	r1
   123dc:	bl	15c30 <__assert_fail@plt+0x4b34>
   123e0:	mov	r4, r0
   123e4:	movw	r0, #4200	; 0x1068
   123e8:	bl	15c30 <__assert_fail@plt+0x4b34>
   123ec:	mov	r9, r0
   123f0:	movw	r0, #37228	; 0x916c
   123f4:	mov	sl, #0
   123f8:	movt	r0, #2
   123fc:	str	sl, [sp, #40]	; 0x28
   12400:	ldr	r1, [r0]
   12404:	add	r0, sp, #24
   12408:	blx	r1
   1240c:	str	r8, [sp, #16]
   12410:	ldr	r1, [r5]
   12414:	movw	r0, #4200	; 0x1068
   12418:	blx	r1
   1241c:	add	r1, r4, sl
   12420:	sub	r2, r0, sl
   12424:	mov	r3, r8
   12428:	mov	r5, r1
   1242c:	mov	r0, r1
   12430:	mov	r1, #1
   12434:	bl	110c0 <fread_unlocked@plt>
   12438:	mov	r8, r0
   1243c:	cmp	r0, #1
   12440:	blt	124ac <__assert_fail@plt+0x13b0>
   12444:	ldr	r0, [sp, #12]
   12448:	cmp	r0, #0
   1244c:	beq	124ac <__assert_fail@plt+0x13b0>
   12450:	mov	r6, #0
   12454:	movw	r1, #37220	; 0x9164
   12458:	add	r7, r6, sl
   1245c:	movt	r1, #2
   12460:	ldrb	r0, [r4, r7]
   12464:	ldr	r1, [r1]
   12468:	blx	r1
   1246c:	cmp	r0, #0
   12470:	bne	12480 <__assert_fail@plt+0x1384>
   12474:	ldrb	r0, [r4, r7]
   12478:	cmp	r0, #61	; 0x3d
   1247c:	bne	12488 <__assert_fail@plt+0x138c>
   12480:	add	r6, r6, #1
   12484:	b	1249c <__assert_fail@plt+0x13a0>
   12488:	sub	r8, r8, #1
   1248c:	add	r0, r5, r6
   12490:	sub	r2, r8, r6
   12494:	add	r1, r0, #1
   12498:	bl	10ec8 <memmove@plt>
   1249c:	cmp	r8, #1
   124a0:	blt	124ac <__assert_fail@plt+0x13b0>
   124a4:	cmp	r6, r8
   124a8:	blt	12454 <__assert_fail@plt+0x1358>
   124ac:	ldr	r0, [sp, #16]
   124b0:	bl	10f7c <ferror_unlocked@plt>
   124b4:	cmp	r0, #0
   124b8:	bne	1260c <__assert_fail@plt+0x1510>
   124bc:	movw	r5, #37216	; 0x9160
   124c0:	movw	r0, #4200	; 0x1068
   124c4:	add	sl, r8, sl
   124c8:	movt	r5, #2
   124cc:	ldr	r1, [r5]
   124d0:	blx	r1
   124d4:	ldr	r8, [sp, #16]
   124d8:	cmp	sl, r0
   124dc:	bge	124f0 <__assert_fail@plt+0x13f4>
   124e0:	mov	r0, r8
   124e4:	bl	110f0 <feof_unlocked@plt>
   124e8:	cmp	r0, #0
   124ec:	beq	12410 <__assert_fail@plt+0x1314>
   124f0:	mov	r0, r8
   124f4:	bl	110f0 <feof_unlocked@plt>
   124f8:	ldr	r5, [sp, #8]
   124fc:	mov	r6, #0
   12500:	cmp	r6, #1
   12504:	ldreq	r0, [sp, #24]
   12508:	cmpeq	r0, #0
   1250c:	beq	12594 <__assert_fail@plt+0x1498>
   12510:	movw	r0, #4200	; 0x1068
   12514:	cmp	r6, #0
   12518:	mov	r2, #0
   1251c:	mov	r1, r4
   12520:	mov	r3, r9
   12524:	str	r0, [sp, #20]
   12528:	movw	r0, #37232	; 0x9170
   1252c:	moveq	r2, sl
   12530:	movt	r0, #2
   12534:	ldr	r7, [r0]
   12538:	add	r0, sp, #20
   1253c:	str	r0, [sp]
   12540:	add	r0, sp, #24
   12544:	blx	r7
   12548:	ldr	r2, [sp, #20]
   1254c:	mov	r7, r0
   12550:	mov	r0, r9
   12554:	mov	r1, #1
   12558:	mov	r3, r5
   1255c:	bl	10f04 <fwrite_unlocked@plt>
   12560:	ldr	r1, [sp, #20]
   12564:	cmp	r0, r1
   12568:	bcc	125bc <__assert_fail@plt+0x14c0>
   1256c:	cmp	r7, #0
   12570:	beq	125e8 <__assert_fail@plt+0x14ec>
   12574:	mov	r0, r8
   12578:	bl	110f0 <feof_unlocked@plt>
   1257c:	cmp	r0, #0
   12580:	mov	r0, #2
   12584:	add	r6, r6, #1
   12588:	movweq	r0, #1
   1258c:	cmp	r6, r0
   12590:	bcc	12500 <__assert_fail@plt+0x1404>
   12594:	mov	r0, r8
   12598:	bl	110f0 <feof_unlocked@plt>
   1259c:	movw	r5, #37216	; 0x9160
   125a0:	mov	sl, #0
   125a4:	cmp	r0, #0
   125a8:	movt	r5, #2
   125ac:	beq	12410 <__assert_fail@plt+0x1314>
   125b0:	ldr	r1, [sp, #4]
   125b4:	mov	r0, r8
   125b8:	bl	12858 <__assert_fail@plt+0x175c>
   125bc:	bl	1100c <__errno_location@plt>
   125c0:	ldr	r4, [r0]
   125c4:	movw	r1, #30164	; 0x75d4
   125c8:	movt	r1, #1
   125cc:	mov	r0, #0
   125d0:	mov	r2, #5
   125d4:	bl	10f28 <dcgettext@plt>
   125d8:	mov	r2, r0
   125dc:	mov	r0, #1
   125e0:	mov	r1, r4
   125e4:	bl	10f94 <error@plt>
   125e8:	movw	r1, #30176	; 0x75e0
   125ec:	mov	r0, #0
   125f0:	mov	r2, #5
   125f4:	movt	r1, #1
   125f8:	bl	10f28 <dcgettext@plt>
   125fc:	mov	r2, r0
   12600:	mov	r0, #1
   12604:	mov	r1, #0
   12608:	bl	10f94 <error@plt>
   1260c:	bl	1100c <__errno_location@plt>
   12610:	ldr	r4, [r0]
   12614:	movw	r1, #30153	; 0x75c9
   12618:	movt	r1, #1
   1261c:	b	125cc <__assert_fail@plt+0x14d0>
   12620:	push	{fp, lr}
   12624:	mov	fp, sp
   12628:	sub	sp, sp, #16
   1262c:	mov	r5, r0
   12630:	mov	r0, #30720	; 0x7800
   12634:	str	r3, [fp, #-4]
   12638:	stm	sp, {r1, r2}
   1263c:	bl	15c30 <__assert_fail@plt+0x4b34>
   12640:	mov	r4, r0
   12644:	movw	r0, #37216	; 0x9160
   12648:	movt	r0, #2
   1264c:	ldr	r1, [r0]
   12650:	mov	r0, #30720	; 0x7800
   12654:	blx	r1
   12658:	bl	15c30 <__assert_fail@plt+0x4b34>
   1265c:	mov	r9, r0
   12660:	mov	sl, #0
   12664:	str	r0, [sp, #8]
   12668:	mov	r6, #0
   1266c:	add	r0, r4, r6
   12670:	rsb	r2, r6, #30720	; 0x7800
   12674:	mov	r1, #1
   12678:	mov	r3, r5
   1267c:	bl	110c0 <fread_unlocked@plt>
   12680:	add	r6, r0, r6
   12684:	mov	r0, r5
   12688:	bl	110f0 <feof_unlocked@plt>
   1268c:	cmp	r0, #0
   12690:	bne	126ac <__assert_fail@plt+0x15b0>
   12694:	mov	r0, r5
   12698:	bl	10f7c <ferror_unlocked@plt>
   1269c:	cmp	r6, #30720	; 0x7800
   126a0:	bge	126ac <__assert_fail@plt+0x15b0>
   126a4:	cmp	r0, #0
   126a8:	beq	1266c <__assert_fail@plt+0x1570>
   126ac:	cmp	r6, #1
   126b0:	blt	127ac <__assert_fail@plt+0x16b0>
   126b4:	movw	r0, #37224	; 0x9168
   126b8:	movt	r0, #2
   126bc:	ldr	r7, [r0]
   126c0:	movw	r0, #37216	; 0x9160
   126c4:	movt	r0, #2
   126c8:	ldr	r1, [r0]
   126cc:	mov	r8, r0
   126d0:	mov	r0, r6
   126d4:	blx	r1
   126d8:	mov	r3, r0
   126dc:	mov	r0, r4
   126e0:	mov	r1, r6
   126e4:	mov	r2, r9
   126e8:	blx	r7
   126ec:	ldr	r1, [r8]
   126f0:	mov	r0, r6
   126f4:	blx	r1
   126f8:	mov	r8, r0
   126fc:	ldr	r0, [fp, #-4]
   12700:	cmp	r0, #0
   12704:	beq	12788 <__assert_fail@plt+0x168c>
   12708:	cmp	r8, #1
   1270c:	blt	127ac <__assert_fail@plt+0x16b0>
   12710:	mov	r7, #0
   12714:	ldr	r0, [fp, #-4]
   12718:	sub	r9, r8, r7
   1271c:	sub	r0, r0, sl
   12720:	cmp	r0, r9
   12724:	movlt	r9, r0
   12728:	cmp	r9, #0
   1272c:	beq	12764 <__assert_fail@plt+0x1668>
   12730:	movw	r1, #37204	; 0x9154
   12734:	ldr	r0, [sp, #8]
   12738:	mov	r2, r9
   1273c:	movt	r1, #2
   12740:	ldr	r3, [r1]
   12744:	mov	r1, #1
   12748:	add	r0, r0, r7
   1274c:	bl	10f04 <fwrite_unlocked@plt>
   12750:	cmp	r0, r9
   12754:	bcc	127fc <__assert_fail@plt+0x1700>
   12758:	add	r7, r9, r7
   1275c:	add	sl, r9, sl
   12760:	b	1277c <__assert_fail@plt+0x1680>
   12764:	ldr	r1, [sp, #4]
   12768:	mov	r0, #10
   1276c:	bl	10f1c <fputc_unlocked@plt>
   12770:	mov	sl, #0
   12774:	cmn	r0, #1
   12778:	beq	127fc <__assert_fail@plt+0x1700>
   1277c:	cmp	r7, r8
   12780:	blt	12714 <__assert_fail@plt+0x1618>
   12784:	b	127ac <__assert_fail@plt+0x16b0>
   12788:	movw	r0, #37204	; 0x9154
   1278c:	mov	r1, #1
   12790:	mov	r2, r8
   12794:	movt	r0, #2
   12798:	ldr	r3, [r0]
   1279c:	mov	r0, r9
   127a0:	bl	10f04 <fwrite_unlocked@plt>
   127a4:	cmp	r0, r8
   127a8:	bcc	127fc <__assert_fail@plt+0x1700>
   127ac:	mov	r0, r5
   127b0:	bl	110f0 <feof_unlocked@plt>
   127b4:	ldr	r9, [sp, #8]
   127b8:	cmp	r0, #0
   127bc:	bne	127d4 <__assert_fail@plt+0x16d8>
   127c0:	mov	r0, r5
   127c4:	bl	10f7c <ferror_unlocked@plt>
   127c8:	cmp	r6, #30720	; 0x7800
   127cc:	cmpeq	r0, #0
   127d0:	beq	12668 <__assert_fail@plt+0x156c>
   127d4:	ldr	r0, [fp, #-4]
   127d8:	cmp	r0, #0
   127dc:	beq	12828 <__assert_fail@plt+0x172c>
   127e0:	cmp	sl, #1
   127e4:	blt	12828 <__assert_fail@plt+0x172c>
   127e8:	ldr	r1, [sp, #4]
   127ec:	mov	r0, #10
   127f0:	bl	10f1c <fputc_unlocked@plt>
   127f4:	cmn	r0, #1
   127f8:	bne	12828 <__assert_fail@plt+0x172c>
   127fc:	bl	1100c <__errno_location@plt>
   12800:	ldr	r4, [r0]
   12804:	movw	r1, #30164	; 0x75d4
   12808:	movt	r1, #1
   1280c:	mov	r0, #0
   12810:	mov	r2, #5
   12814:	bl	10f28 <dcgettext@plt>
   12818:	mov	r2, r0
   1281c:	mov	r0, #1
   12820:	mov	r1, r4
   12824:	bl	10f94 <error@plt>
   12828:	mov	r0, r5
   1282c:	bl	10f7c <ferror_unlocked@plt>
   12830:	cmp	r0, #0
   12834:	bne	12844 <__assert_fail@plt+0x1748>
   12838:	ldr	r1, [sp]
   1283c:	mov	r0, r5
   12840:	bl	12858 <__assert_fail@plt+0x175c>
   12844:	bl	1100c <__errno_location@plt>
   12848:	ldr	r4, [r0]
   1284c:	movw	r1, #30153	; 0x75c9
   12850:	movt	r1, #1
   12854:	b	1280c <__assert_fail@plt+0x1710>
   12858:	push	{fp, lr}
   1285c:	mov	fp, sp
   12860:	mov	r5, r1
   12864:	bl	13a74 <__assert_fail@plt+0x2978>
   12868:	cmp	r0, #0
   1286c:	bne	12878 <__assert_fail@plt+0x177c>
   12870:	mov	r0, #0
   12874:	bl	10fe8 <exit@plt>
   12878:	movw	r1, #31633	; 0x7b91
   1287c:	mov	r0, r5
   12880:	movt	r1, #1
   12884:	bl	10ea4 <strcmp@plt>
   12888:	mov	r6, r0
   1288c:	bl	1100c <__errno_location@plt>
   12890:	ldr	r4, [r0]
   12894:	cmp	r6, #0
   12898:	bne	128c0 <__assert_fail@plt+0x17c4>
   1289c:	movw	r1, #30190	; 0x75ee
   128a0:	mov	r0, #0
   128a4:	mov	r2, #5
   128a8:	movt	r1, #1
   128ac:	bl	10f28 <dcgettext@plt>
   128b0:	mov	r2, r0
   128b4:	mov	r0, #1
   128b8:	mov	r1, r4
   128bc:	bl	10f94 <error@plt>
   128c0:	mov	r0, #0
   128c4:	mov	r1, #3
   128c8:	mov	r2, r5
   128cc:	bl	154a8 <__assert_fail@plt+0x43ac>
   128d0:	movw	r2, #29308	; 0x727c
   128d4:	mov	r3, r0
   128d8:	mov	r0, #1
   128dc:	mov	r1, r4
   128e0:	movt	r2, #1
   128e4:	bl	10f94 <error@plt>
   128e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   128ec:	add	fp, sp, #24
   128f0:	cmp	r1, #0
   128f4:	cmpne	r3, #0
   128f8:	bne	12910 <__assert_fail@plt+0x1814>
   128fc:	cmp	r3, #0
   12900:	beq	1290c <__assert_fail@plt+0x1810>
   12904:	mov	r0, #0
   12908:	strb	r0, [r2]
   1290c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12910:	movw	lr, #30959	; 0x78ef
   12914:	add	r0, r0, #2
   12918:	rsb	ip, r3, #0
   1291c:	mov	r8, #0
   12920:	movt	lr, #1
   12924:	ldrb	r3, [r0, #-2]
   12928:	add	r5, ip, r8
   1292c:	mov	r4, r2
   12930:	cmn	r5, #1
   12934:	ldrb	r3, [lr, r3, lsr #3]
   12938:	strb	r3, [r4, r8]!
   1293c:	beq	1290c <__assert_fail@plt+0x1810>
   12940:	ldrb	r3, [r0, #-2]
   12944:	cmp	r1, #1
   12948:	add	r6, r5, #2
   1294c:	lsl	r7, r3, #2
   12950:	mov	r3, #0
   12954:	ldrbne	r3, [r0, #-1]
   12958:	lsrne	r3, r3, #6
   1295c:	cmp	r6, #0
   12960:	add	r3, r3, r7
   12964:	and	r3, r3, #31
   12968:	ldrb	r3, [lr, r3]
   1296c:	strb	r3, [r4, #1]
   12970:	beq	1290c <__assert_fail@plt+0x1810>
   12974:	cmp	r1, #1
   12978:	mov	r7, #61	; 0x3d
   1297c:	add	r6, r5, #3
   12980:	ldrbne	r3, [r0, #-1]
   12984:	ubfxne	r3, r3, #1, #5
   12988:	ldrbne	r7, [lr, r3]
   1298c:	cmp	r6, #0
   12990:	strb	r7, [r4, #2]
   12994:	beq	1290c <__assert_fail@plt+0x1810>
   12998:	add	r6, r5, #4
   1299c:	cmp	r1, #1
   129a0:	beq	129cc <__assert_fail@plt+0x18d0>
   129a4:	ldrb	r3, [r0, #-1]
   129a8:	subs	r1, r1, #2
   129ac:	lsl	r7, r3, #4
   129b0:	ldrbne	r3, [r0]
   129b4:	lsrne	r3, r3, #4
   129b8:	moveq	r3, #0
   129bc:	add	r3, r3, r7
   129c0:	and	r3, r3, #31
   129c4:	ldrb	r7, [lr, r3]
   129c8:	b	129d4 <__assert_fail@plt+0x18d8>
   129cc:	mov	r7, #61	; 0x3d
   129d0:	mov	r1, #0
   129d4:	cmp	r6, #0
   129d8:	strb	r7, [r4, #3]
   129dc:	beq	1290c <__assert_fail@plt+0x1810>
   129e0:	add	r6, r5, #5
   129e4:	cmp	r1, #0
   129e8:	beq	12a14 <__assert_fail@plt+0x1918>
   129ec:	ldrb	r3, [r0]
   129f0:	subs	r1, r1, #1
   129f4:	lsl	r7, r3, #1
   129f8:	ldrbne	r3, [r0, #1]
   129fc:	lsrne	r3, r3, #7
   12a00:	moveq	r3, #0
   12a04:	add	r3, r3, r7
   12a08:	and	r3, r3, #31
   12a0c:	ldrb	r7, [lr, r3]
   12a10:	b	12a1c <__assert_fail@plt+0x1920>
   12a14:	mov	r7, #61	; 0x3d
   12a18:	mov	r1, #0
   12a1c:	cmp	r6, #0
   12a20:	strb	r7, [r4, #4]
   12a24:	beq	1290c <__assert_fail@plt+0x1810>
   12a28:	add	r6, r5, #6
   12a2c:	cmp	r1, #0
   12a30:	beq	12a44 <__assert_fail@plt+0x1948>
   12a34:	ldrb	r3, [r0, #1]
   12a38:	ubfx	r3, r3, #2, #5
   12a3c:	ldrb	r3, [lr, r3]
   12a40:	b	12a48 <__assert_fail@plt+0x194c>
   12a44:	mov	r3, #61	; 0x3d
   12a48:	cmp	r6, #0
   12a4c:	strb	r3, [r4, #5]
   12a50:	beq	1290c <__assert_fail@plt+0x1810>
   12a54:	add	r7, r5, #7
   12a58:	cmp	r1, #0
   12a5c:	beq	12a88 <__assert_fail@plt+0x198c>
   12a60:	subs	r6, r1, #1
   12a64:	ldrb	r1, [r0, #1]
   12a68:	ldrbne	r3, [r0, #2]
   12a6c:	lsl	r1, r1, #3
   12a70:	lsrne	r3, r3, #5
   12a74:	moveq	r3, #0
   12a78:	add	r1, r3, r1
   12a7c:	and	r1, r1, #31
   12a80:	ldrb	r1, [lr, r1]
   12a84:	b	12a90 <__assert_fail@plt+0x1994>
   12a88:	mov	r1, #61	; 0x3d
   12a8c:	mov	r6, #0
   12a90:	cmp	r7, #0
   12a94:	strb	r1, [r4, #6]
   12a98:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12a9c:	cmp	r6, #0
   12aa0:	beq	12ab4 <__assert_fail@plt+0x19b8>
   12aa4:	ldrb	r1, [r0, #2]
   12aa8:	and	r1, r1, #31
   12aac:	ldrb	r1, [lr, r1]
   12ab0:	b	12ab8 <__assert_fail@plt+0x19bc>
   12ab4:	mov	r1, #61	; 0x3d
   12ab8:	cmn	r5, #8
   12abc:	strb	r1, [r4, #7]
   12ac0:	beq	1290c <__assert_fail@plt+0x1810>
   12ac4:	subs	r1, r6, #1
   12ac8:	add	r8, r8, #8
   12acc:	addne	r0, r0, #5
   12ad0:	cmpne	r6, #0
   12ad4:	bne	12924 <__assert_fail@plt+0x1828>
   12ad8:	add	r2, r2, r8
   12adc:	b	12904 <__assert_fail@plt+0x1808>
   12ae0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ae4:	add	fp, sp, #24
   12ae8:	mov	r8, r0
   12aec:	movw	r0, #26215	; 0x6667
   12af0:	mov	r4, r1
   12af4:	mov	r6, r2
   12af8:	movt	r0, #26214	; 0x6666
   12afc:	smmul	r0, r1, r0
   12b00:	asr	r1, r0, #1
   12b04:	add	r0, r1, r0, lsr #31
   12b08:	add	r1, r0, r0, lsl #2
   12b0c:	subs	r1, r4, r1
   12b10:	addne	r0, r0, #1
   12b14:	cmn	r0, #1
   12b18:	ble	12b28 <__assert_fail@plt+0x1a2c>
   12b1c:	cmn	r0, #-268435455	; 0xf0000001
   12b20:	ble	12b3c <__assert_fail@plt+0x1a40>
   12b24:	b	12b78 <__assert_fail@plt+0x1a7c>
   12b28:	beq	12b3c <__assert_fail@plt+0x1a40>
   12b2c:	mov	r1, #-2147483648	; 0x80000000
   12b30:	sdiv	r1, r1, r0
   12b34:	cmp	r1, #8
   12b38:	blt	12b78 <__assert_fail@plt+0x1a7c>
   12b3c:	cmn	r4, #1
   12b40:	ble	12b78 <__assert_fail@plt+0x1a7c>
   12b44:	lsl	r7, r0, #3
   12b48:	orr	r5, r7, #1
   12b4c:	mov	r0, r5
   12b50:	bl	16784 <__assert_fail@plt+0x5688>
   12b54:	cmp	r0, #0
   12b58:	str	r0, [r6]
   12b5c:	beq	12b88 <__assert_fail@plt+0x1a8c>
   12b60:	mov	r2, r0
   12b64:	mov	r0, r8
   12b68:	mov	r1, r4
   12b6c:	mov	r3, r5
   12b70:	bl	128e8 <__assert_fail@plt+0x17ec>
   12b74:	b	12b80 <__assert_fail@plt+0x1a84>
   12b78:	mov	r7, #0
   12b7c:	str	r7, [r6]
   12b80:	mov	r0, r7
   12b84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12b88:	mov	r7, r5
   12b8c:	b	12b80 <__assert_fail@plt+0x1a84>
   12b90:	movw	r1, #30991	; 0x790f
   12b94:	movt	r1, #1
   12b98:	add	r0, r1, r0
   12b9c:	ldrsb	r1, [r0]
   12ba0:	mov	r0, #0
   12ba4:	cmn	r1, #1
   12ba8:	movwgt	r0, #1
   12bac:	bx	lr
   12bb0:	mov	r1, #0
   12bb4:	str	r1, [r0]
   12bb8:	bx	lr
   12bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bc0:	add	fp, sp, #28
   12bc4:	sub	sp, sp, #28
   12bc8:	mov	r6, r2
   12bcc:	mov	r2, r0
   12bd0:	ldr	r0, [fp, #8]
   12bd4:	str	r3, [sp, #24]
   12bd8:	mov	r5, r1
   12bdc:	mov	r8, #0
   12be0:	cmp	r2, #0
   12be4:	ldr	r7, [r0]
   12be8:	mov	r0, #0
   12bec:	str	r7, [sp, #20]
   12bf0:	beq	12c08 <__assert_fail@plt+0x1b0c>
   12bf4:	clz	r0, r6
   12bf8:	lsr	r8, r0, #5
   12bfc:	ldr	r0, [r2]
   12c00:	cmp	r0, #0
   12c04:	movwne	r0, #1
   12c08:	orr	r0, r0, r8
   12c0c:	add	sl, sp, #24
   12c10:	add	r4, sp, #20
   12c14:	str	r2, [sp, #16]
   12c18:	str	r0, [sp, #8]
   12c1c:	add	r0, r2, #4
   12c20:	str	r0, [sp, #4]
   12c24:	clz	r0, r2
   12c28:	lsr	r0, r0, #5
   12c2c:	str	r0, [sp, #12]
   12c30:	ldr	r0, [sp, #8]
   12c34:	cmp	r0, #0
   12c38:	beq	12c4c <__assert_fail@plt+0x1b50>
   12c3c:	b	12c6c <__assert_fail@plt+0x1b70>
   12c40:	ldr	r7, [sp, #20]
   12c44:	add	r5, r5, #8
   12c48:	sub	r6, r6, #8
   12c4c:	mov	r0, r5
   12c50:	mov	r1, r6
   12c54:	mov	r2, sl
   12c58:	mov	r3, r4
   12c5c:	bl	12e1c <__assert_fail@plt+0x1d20>
   12c60:	cmp	r0, #0
   12c64:	bne	12c40 <__assert_fail@plt+0x1b44>
   12c68:	ldr	r2, [sp, #16]
   12c6c:	cmp	r6, #0
   12c70:	mov	r0, r6
   12c74:	movwne	r0, #1
   12c78:	orr	r0, r8, r0
   12c7c:	cmp	r0, #1
   12c80:	bne	12df0 <__assert_fail@plt+0x1cf4>
   12c84:	cmp	r6, #0
   12c88:	beq	12ca4 <__assert_fail@plt+0x1ba8>
   12c8c:	ldrb	r0, [r5]
   12c90:	ldr	r1, [sp, #12]
   12c94:	subs	r0, r0, #10
   12c98:	movwne	r0, #1
   12c9c:	orrs	r0, r0, r1
   12ca0:	beq	12d68 <__assert_fail@plt+0x1c6c>
   12ca4:	ldr	r0, [sp, #20]
   12ca8:	ldr	r1, [sp, #24]
   12cac:	add	r9, r5, r6
   12cb0:	cmp	r2, #0
   12cb4:	str	r7, [sp, #20]
   12cb8:	sub	r0, r0, r7
   12cbc:	add	r0, r1, r0
   12cc0:	str	r0, [sp, #24]
   12cc4:	beq	12d74 <__assert_fail@plt+0x1c78>
   12cc8:	ldr	r7, [r2]
   12ccc:	cmp	r7, #0
   12cd0:	beq	12ce4 <__assert_fail@plt+0x1be8>
   12cd4:	cmp	r7, #8
   12cd8:	bne	12d10 <__assert_fail@plt+0x1c14>
   12cdc:	mov	r0, #0
   12ce0:	str	r0, [r2]
   12ce4:	sub	r0, r9, r5
   12ce8:	mov	r7, #0
   12cec:	cmp	r0, #8
   12cf0:	blt	12d10 <__assert_fail@plt+0x1c14>
   12cf4:	mov	r0, r5
   12cf8:	mov	r1, #10
   12cfc:	mov	r2, #8
   12d00:	bl	11054 <memchr@plt>
   12d04:	ldr	r2, [sp, #16]
   12d08:	cmp	r0, #0
   12d0c:	beq	12ddc <__assert_fail@plt+0x1ce0>
   12d10:	cmp	r6, #1
   12d14:	blt	12d7c <__assert_fail@plt+0x1c80>
   12d18:	mov	r6, r7
   12d1c:	mov	r0, r5
   12d20:	ldrb	r1, [r5], #1
   12d24:	cmp	r1, #10
   12d28:	bne	12d38 <__assert_fail@plt+0x1c3c>
   12d2c:	cmp	r5, r9
   12d30:	bcc	12d1c <__assert_fail@plt+0x1c20>
   12d34:	b	12d60 <__assert_fail@plt+0x1c64>
   12d38:	add	r7, r6, #1
   12d3c:	mov	r3, r2
   12d40:	add	r5, r0, #1
   12d44:	str	r7, [r3], r6
   12d48:	cmp	r5, r9
   12d4c:	strb	r1, [r3, #4]
   12d50:	ldr	r6, [r2]
   12d54:	bcs	12d60 <__assert_fail@plt+0x1c64>
   12d58:	cmp	r6, #8
   12d5c:	bne	12d1c <__assert_fail@plt+0x1c20>
   12d60:	add	r5, r0, #1
   12d64:	b	12d80 <__assert_fail@plt+0x1c84>
   12d68:	sub	r6, r6, #1
   12d6c:	add	r5, r5, #1
   12d70:	b	12dd4 <__assert_fail@plt+0x1cd8>
   12d74:	mov	r0, r5
   12d78:	b	12d84 <__assert_fail@plt+0x1c88>
   12d7c:	mov	r6, r7
   12d80:	ldr	r0, [sp, #4]
   12d84:	mov	r1, #0
   12d88:	cmp	r6, #0
   12d8c:	beq	12df4 <__assert_fail@plt+0x1cf8>
   12d90:	ldr	r3, [sp, #12]
   12d94:	cmp	r6, #7
   12d98:	mov	r2, #0
   12d9c:	movwgt	r2, #1
   12da0:	orr	r2, r8, r2
   12da4:	orr	r2, r2, r3
   12da8:	cmp	r2, #1
   12dac:	bne	12df4 <__assert_fail@plt+0x1cf8>
   12db0:	mov	r1, r6
   12db4:	mov	r2, sl
   12db8:	mov	r3, r4
   12dbc:	bl	12e1c <__assert_fail@plt+0x1d20>
   12dc0:	cmp	r0, #0
   12dc4:	mov	r1, r6
   12dc8:	beq	12df4 <__assert_fail@plt+0x1cf8>
   12dcc:	ldr	r2, [sp, #16]
   12dd0:	sub	r6, r9, r5
   12dd4:	ldr	r7, [sp, #20]
   12dd8:	b	12c30 <__assert_fail@plt+0x1b34>
   12ddc:	add	r1, r5, #8
   12de0:	mov	r0, r5
   12de4:	mov	r6, #8
   12de8:	mov	r5, r1
   12dec:	b	12db0 <__assert_fail@plt+0x1cb4>
   12df0:	mov	r1, r6
   12df4:	ldr	r0, [fp, #8]
   12df8:	ldr	r2, [sp, #20]
   12dfc:	mov	r3, r0
   12e00:	ldr	r0, [r0]
   12e04:	sub	r0, r0, r2
   12e08:	str	r0, [r3]
   12e0c:	clz	r0, r1
   12e10:	lsr	r0, r0, #5
   12e14:	sub	sp, fp, #28
   12e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e1c:	push	{r4, r5, r6, sl, fp, lr}
   12e20:	add	fp, sp, #16
   12e24:	mov	ip, #0
   12e28:	cmp	r1, #8
   12e2c:	blt	12f84 <__assert_fail@plt+0x1e88>
   12e30:	ldrb	r1, [r0]
   12e34:	movw	lr, #30991	; 0x790f
   12e38:	movt	lr, #1
   12e3c:	add	r1, lr, r1
   12e40:	ldrsb	r4, [r1]
   12e44:	cmp	r4, #0
   12e48:	blt	12f84 <__assert_fail@plt+0x1e88>
   12e4c:	ldrb	r1, [r0, #1]
   12e50:	add	r1, lr, r1
   12e54:	ldrsb	r1, [r1]
   12e58:	cmp	r1, #0
   12e5c:	blt	12f84 <__assert_fail@plt+0x1e88>
   12e60:	ldr	r5, [r3]
   12e64:	ldr	ip, [r2]
   12e68:	cmp	r5, #0
   12e6c:	beq	12e8c <__assert_fail@plt+0x1d90>
   12e70:	ubfx	r5, r1, #2, #6
   12e74:	orr	r4, r5, r4, lsl #3
   12e78:	strb	r4, [ip], #1
   12e7c:	ldr	r4, [r3]
   12e80:	sub	r5, r4, #1
   12e84:	str	r5, [r3]
   12e88:	b	12e90 <__assert_fail@plt+0x1d94>
   12e8c:	mov	r5, #0
   12e90:	ldrb	r4, [r0, #2]
   12e94:	cmp	r4, #61	; 0x3d
   12e98:	bne	12eb4 <__assert_fail@plt+0x1db8>
   12e9c:	ldrb	r1, [r0, #3]
   12ea0:	cmp	r1, #61	; 0x3d
   12ea4:	ldrbeq	r1, [r0, #4]
   12ea8:	cmpeq	r1, #61	; 0x3d
   12eac:	bne	12f7c <__assert_fail@plt+0x1e80>
   12eb0:	b	12f14 <__assert_fail@plt+0x1e18>
   12eb4:	add	r4, lr, r4
   12eb8:	ldrsb	r6, [r4]
   12ebc:	cmp	r6, #0
   12ec0:	blt	12f7c <__assert_fail@plt+0x1e80>
   12ec4:	ldrb	r4, [r0, #3]
   12ec8:	add	r4, lr, r4
   12ecc:	ldrsb	r4, [r4]
   12ed0:	cmn	r4, #1
   12ed4:	ble	12f7c <__assert_fail@plt+0x1e80>
   12ed8:	cmp	r5, #0
   12edc:	beq	12f04 <__assert_fail@plt+0x1e08>
   12ee0:	lsl	r5, r6, #1
   12ee4:	orr	r1, r5, r1, lsl #6
   12ee8:	and	r5, r4, #240	; 0xf0
   12eec:	orr	r1, r1, r5, lsr #4
   12ef0:	strb	r1, [ip], #1
   12ef4:	ldr	r1, [r3]
   12ef8:	sub	r5, r1, #1
   12efc:	str	r5, [r3]
   12f00:	b	12f08 <__assert_fail@plt+0x1e0c>
   12f04:	mov	r5, #0
   12f08:	ldrb	r1, [r0, #4]
   12f0c:	cmp	r1, #61	; 0x3d
   12f10:	bne	12f24 <__assert_fail@plt+0x1e28>
   12f14:	ldrb	r1, [r0, #5]
   12f18:	cmp	r1, #61	; 0x3d
   12f1c:	beq	12f68 <__assert_fail@plt+0x1e6c>
   12f20:	b	12f7c <__assert_fail@plt+0x1e80>
   12f24:	add	r1, lr, r1
   12f28:	ldrsb	r1, [r1]
   12f2c:	cmn	r1, #1
   12f30:	ble	12f7c <__assert_fail@plt+0x1e80>
   12f34:	cmp	r5, #0
   12f38:	beq	12f58 <__assert_fail@plt+0x1e5c>
   12f3c:	ubfx	r5, r1, #1, #7
   12f40:	orr	r4, r5, r4, lsl #4
   12f44:	strb	r4, [ip], #1
   12f48:	ldr	r4, [r3]
   12f4c:	sub	r4, r4, #1
   12f50:	str	r4, [r3]
   12f54:	b	12f5c <__assert_fail@plt+0x1e60>
   12f58:	mov	r4, #0
   12f5c:	ldrb	r5, [r0, #5]
   12f60:	cmp	r5, #61	; 0x3d
   12f64:	bne	12f8c <__assert_fail@plt+0x1e90>
   12f68:	ldrb	r1, [r0, #6]
   12f6c:	cmp	r1, #61	; 0x3d
   12f70:	ldrbeq	r0, [r0, #7]
   12f74:	cmpeq	r0, #61	; 0x3d
   12f78:	beq	1301c <__assert_fail@plt+0x1f20>
   12f7c:	str	ip, [r2]
   12f80:	mov	ip, #0
   12f84:	mov	r0, ip
   12f88:	pop	{r4, r5, r6, sl, fp, pc}
   12f8c:	add	r5, lr, r5
   12f90:	ldrsb	r5, [r5]
   12f94:	cmp	r5, #0
   12f98:	blt	12f7c <__assert_fail@plt+0x1e80>
   12f9c:	ldrb	r6, [r0, #6]
   12fa0:	add	r6, lr, r6
   12fa4:	ldrsb	r6, [r6]
   12fa8:	cmn	r6, #1
   12fac:	ble	12f7c <__assert_fail@plt+0x1e80>
   12fb0:	cmp	r4, #0
   12fb4:	beq	12fd8 <__assert_fail@plt+0x1edc>
   12fb8:	ubfx	r4, r6, #3, #5
   12fbc:	orr	r4, r4, r5, lsl #2
   12fc0:	orr	r1, r4, r1, lsl #7
   12fc4:	strb	r1, [ip], #1
   12fc8:	ldr	r1, [r3]
   12fcc:	sub	r1, r1, #1
   12fd0:	str	r1, [r3]
   12fd4:	b	12fdc <__assert_fail@plt+0x1ee0>
   12fd8:	mov	r1, #0
   12fdc:	ldrb	r4, [r0, #7]
   12fe0:	cmp	r4, #61	; 0x3d
   12fe4:	beq	1301c <__assert_fail@plt+0x1f20>
   12fe8:	add	r4, lr, r4
   12fec:	ldrsb	r4, [r4]
   12ff0:	cmn	r4, #1
   12ff4:	ble	12f7c <__assert_fail@plt+0x1e80>
   12ff8:	cmp	r1, #0
   12ffc:	beq	1301c <__assert_fail@plt+0x1f20>
   13000:	ldrb	r0, [r0, #6]
   13004:	ldrb	r0, [lr, r0]
   13008:	orr	r0, r4, r0, lsl #5
   1300c:	strb	r0, [ip], #1
   13010:	ldr	r0, [r3]
   13014:	sub	r0, r0, #1
   13018:	str	r0, [r3]
   1301c:	str	ip, [r2]
   13020:	mov	ip, #1
   13024:	b	12f84 <__assert_fail@plt+0x1e88>
   13028:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1302c:	add	fp, sp, #24
   13030:	sub	sp, sp, #8
   13034:	mov	r7, r0
   13038:	asr	r0, r2, #3
   1303c:	mov	r4, r3
   13040:	mov	r6, r2
   13044:	mov	r8, r1
   13048:	add	r0, r0, r0, lsl #2
   1304c:	add	r0, r0, #5
   13050:	str	r0, [sp, #4]
   13054:	bl	16784 <__assert_fail@plt+0x5688>
   13058:	mov	r5, #1
   1305c:	cmp	r0, #0
   13060:	str	r0, [r4]
   13064:	beq	130b0 <__assert_fail@plt+0x1fb4>
   13068:	mov	r3, r0
   1306c:	add	r0, sp, #4
   13070:	mov	r1, r8
   13074:	mov	r2, r6
   13078:	str	r0, [sp]
   1307c:	mov	r0, r7
   13080:	bl	12bbc <__assert_fail@plt+0x1ac0>
   13084:	cmp	r0, #0
   13088:	beq	130a0 <__assert_fail@plt+0x1fa4>
   1308c:	ldr	r0, [fp, #8]
   13090:	cmp	r0, #0
   13094:	ldrne	r1, [sp, #4]
   13098:	strne	r1, [r0]
   1309c:	b	130b0 <__assert_fail@plt+0x1fb4>
   130a0:	ldr	r0, [r4]
   130a4:	bl	13b6c <__assert_fail@plt+0x2a70>
   130a8:	mov	r5, #0
   130ac:	str	r5, [r4]
   130b0:	mov	r0, r5
   130b4:	sub	sp, fp, #24
   130b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130c0:	add	fp, sp, #24
   130c4:	tst	r3, #3
   130c8:	bne	13140 <__assert_fail@plt+0x2044>
   130cc:	asr	r7, r3, #2
   130d0:	add	r7, r7, r7, lsl #1
   130d4:	cmp	r7, r1
   130d8:	bne	13140 <__assert_fail@plt+0x2044>
   130dc:	cmp	r1, #0
   130e0:	beq	1315c <__assert_fail@plt+0x2060>
   130e4:	movw	r3, #31247	; 0x7a0f
   130e8:	movt	r3, #1
   130ec:	ldrb	r7, [r0]
   130f0:	subs	r1, r1, #3
   130f4:	ldrb	r6, [r3, r7, lsr #2]
   130f8:	strb	r6, [r2]
   130fc:	ldrb	r6, [r0, #1]
   13100:	lsr	r5, r6, #4
   13104:	bfi	r5, r7, #4, #2
   13108:	ldrb	r7, [r3, r5]
   1310c:	strb	r7, [r2, #1]
   13110:	ldrb	r7, [r0, #2]
   13114:	add	r0, r0, #3
   13118:	and	r5, r7, #63	; 0x3f
   1311c:	lsr	r7, r7, #6
   13120:	bfi	r7, r6, #2, #4
   13124:	ldrb	r5, [r3, r5]
   13128:	ldrb	r7, [r3, r7]
   1312c:	strb	r5, [r2, #3]
   13130:	strb	r7, [r2, #2]
   13134:	add	r2, r2, #4
   13138:	bne	130ec <__assert_fail@plt+0x1ff0>
   1313c:	b	1315c <__assert_fail@plt+0x2060>
   13140:	cmp	r1, #0
   13144:	cmpne	r3, #0
   13148:	bne	13160 <__assert_fail@plt+0x2064>
   1314c:	cmp	r3, #0
   13150:	beq	1315c <__assert_fail@plt+0x2060>
   13154:	mov	r0, #0
   13158:	strb	r0, [r2]
   1315c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13160:	movw	r6, #31247	; 0x7a0f
   13164:	add	r0, r0, #1
   13168:	sub	ip, r3, #3
   1316c:	sub	lr, r3, #2
   13170:	sub	r9, r3, #1
   13174:	sub	r8, r3, #4
   13178:	mov	r3, #0
   1317c:	movt	r6, #1
   13180:	ldrb	r4, [r0, #-1]
   13184:	mov	r7, r2
   13188:	cmp	r9, r3
   1318c:	ldrb	r4, [r6, r4, lsr #2]
   13190:	strb	r4, [r7, r3]!
   13194:	beq	1315c <__assert_fail@plt+0x2060>
   13198:	ldrb	r4, [r0, #-1]
   1319c:	cmp	r1, #1
   131a0:	lsl	r5, r4, #4
   131a4:	mov	r4, #0
   131a8:	ldrbne	r4, [r0]
   131ac:	lsrne	r4, r4, #4
   131b0:	cmp	lr, r3
   131b4:	add	r4, r4, r5
   131b8:	and	r4, r4, #63	; 0x3f
   131bc:	ldrb	r4, [r6, r4]
   131c0:	strb	r4, [r7, #1]
   131c4:	beq	1315c <__assert_fail@plt+0x2060>
   131c8:	cmp	r1, #1
   131cc:	beq	131f8 <__assert_fail@plt+0x20fc>
   131d0:	subs	r5, r1, #2
   131d4:	ldrb	r1, [r0]
   131d8:	ldrbne	r4, [r0, #1]
   131dc:	lsl	r1, r1, #2
   131e0:	lsrne	r4, r4, #6
   131e4:	moveq	r4, #0
   131e8:	add	r1, r4, r1
   131ec:	and	r1, r1, #63	; 0x3f
   131f0:	ldrb	r1, [r6, r1]
   131f4:	b	13200 <__assert_fail@plt+0x2104>
   131f8:	mov	r1, #61	; 0x3d
   131fc:	mov	r5, #0
   13200:	cmp	ip, r3
   13204:	strb	r1, [r7, #2]
   13208:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1320c:	cmp	r5, #0
   13210:	beq	13224 <__assert_fail@plt+0x2128>
   13214:	ldrb	r1, [r0, #1]
   13218:	and	r1, r1, #63	; 0x3f
   1321c:	ldrb	r1, [r6, r1]
   13220:	b	13228 <__assert_fail@plt+0x212c>
   13224:	mov	r1, #61	; 0x3d
   13228:	cmp	r8, r3
   1322c:	strb	r1, [r7, #3]
   13230:	beq	1315c <__assert_fail@plt+0x2060>
   13234:	subs	r1, r5, #1
   13238:	add	r3, r3, #4
   1323c:	addne	r0, r0, #3
   13240:	cmpne	r5, #0
   13244:	bne	13180 <__assert_fail@plt+0x2084>
   13248:	add	r2, r2, r3
   1324c:	b	13154 <__assert_fail@plt+0x2058>
   13250:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13254:	add	fp, sp, #24
   13258:	mov	r8, r0
   1325c:	movw	r0, #21846	; 0x5556
   13260:	mov	r4, r1
   13264:	mov	r6, r2
   13268:	movt	r0, #21845	; 0x5555
   1326c:	smmul	r0, r1, r0
   13270:	add	r0, r0, r0, lsr #31
   13274:	add	r1, r0, r0, lsl #1
   13278:	subs	r1, r4, r1
   1327c:	addne	r0, r0, #1
   13280:	cmn	r0, #1
   13284:	ble	13294 <__assert_fail@plt+0x2198>
   13288:	cmn	r0, #-536870911	; 0xe0000001
   1328c:	ble	132a8 <__assert_fail@plt+0x21ac>
   13290:	b	132e4 <__assert_fail@plt+0x21e8>
   13294:	beq	132a8 <__assert_fail@plt+0x21ac>
   13298:	mov	r1, #-2147483648	; 0x80000000
   1329c:	sdiv	r1, r1, r0
   132a0:	cmp	r1, #4
   132a4:	blt	132e4 <__assert_fail@plt+0x21e8>
   132a8:	cmn	r4, #1
   132ac:	ble	132e4 <__assert_fail@plt+0x21e8>
   132b0:	lsl	r7, r0, #2
   132b4:	orr	r5, r7, #1
   132b8:	mov	r0, r5
   132bc:	bl	16784 <__assert_fail@plt+0x5688>
   132c0:	cmp	r0, #0
   132c4:	str	r0, [r6]
   132c8:	beq	132f4 <__assert_fail@plt+0x21f8>
   132cc:	mov	r2, r0
   132d0:	mov	r0, r8
   132d4:	mov	r1, r4
   132d8:	mov	r3, r5
   132dc:	bl	130bc <__assert_fail@plt+0x1fc0>
   132e0:	b	132ec <__assert_fail@plt+0x21f0>
   132e4:	mov	r7, #0
   132e8:	str	r7, [r6]
   132ec:	mov	r0, r7
   132f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   132f4:	mov	r7, r5
   132f8:	b	132ec <__assert_fail@plt+0x21f0>
   132fc:	movw	r1, #31311	; 0x7a4f
   13300:	movt	r1, #1
   13304:	add	r0, r1, r0
   13308:	ldrsb	r1, [r0]
   1330c:	mov	r0, #0
   13310:	cmn	r1, #1
   13314:	movwgt	r0, #1
   13318:	bx	lr
   1331c:	mov	r1, #0
   13320:	str	r1, [r0]
   13324:	bx	lr
   13328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1332c:	add	fp, sp, #28
   13330:	sub	sp, sp, #28
   13334:	mov	r6, r2
   13338:	mov	r2, r0
   1333c:	ldr	r0, [fp, #8]
   13340:	str	r3, [sp, #24]
   13344:	mov	r5, r1
   13348:	mov	r8, #0
   1334c:	cmp	r2, #0
   13350:	ldr	r7, [r0]
   13354:	mov	r0, #0
   13358:	str	r7, [sp, #20]
   1335c:	beq	13374 <__assert_fail@plt+0x2278>
   13360:	clz	r0, r6
   13364:	lsr	r8, r0, #5
   13368:	ldr	r0, [r2]
   1336c:	cmp	r0, #0
   13370:	movwne	r0, #1
   13374:	orr	r0, r0, r8
   13378:	add	sl, sp, #24
   1337c:	add	r4, sp, #20
   13380:	str	r2, [sp, #16]
   13384:	str	r0, [sp, #8]
   13388:	add	r0, r2, #4
   1338c:	str	r0, [sp, #4]
   13390:	clz	r0, r2
   13394:	lsr	r0, r0, #5
   13398:	str	r0, [sp, #12]
   1339c:	ldr	r0, [sp, #8]
   133a0:	cmp	r0, #0
   133a4:	beq	133b8 <__assert_fail@plt+0x22bc>
   133a8:	b	133d8 <__assert_fail@plt+0x22dc>
   133ac:	ldr	r7, [sp, #20]
   133b0:	add	r5, r5, #4
   133b4:	sub	r6, r6, #4
   133b8:	mov	r0, r5
   133bc:	mov	r1, r6
   133c0:	mov	r2, sl
   133c4:	mov	r3, r4
   133c8:	bl	13588 <__assert_fail@plt+0x248c>
   133cc:	cmp	r0, #0
   133d0:	bne	133ac <__assert_fail@plt+0x22b0>
   133d4:	ldr	r2, [sp, #16]
   133d8:	cmp	r6, #0
   133dc:	mov	r0, r6
   133e0:	movwne	r0, #1
   133e4:	orr	r0, r8, r0
   133e8:	cmp	r0, #1
   133ec:	bne	1355c <__assert_fail@plt+0x2460>
   133f0:	cmp	r6, #0
   133f4:	beq	13410 <__assert_fail@plt+0x2314>
   133f8:	ldrb	r0, [r5]
   133fc:	ldr	r1, [sp, #12]
   13400:	subs	r0, r0, #10
   13404:	movwne	r0, #1
   13408:	orrs	r0, r0, r1
   1340c:	beq	134d4 <__assert_fail@plt+0x23d8>
   13410:	ldr	r0, [sp, #20]
   13414:	ldr	r1, [sp, #24]
   13418:	add	r9, r5, r6
   1341c:	cmp	r2, #0
   13420:	str	r7, [sp, #20]
   13424:	sub	r0, r0, r7
   13428:	add	r0, r1, r0
   1342c:	str	r0, [sp, #24]
   13430:	beq	134e0 <__assert_fail@plt+0x23e4>
   13434:	ldr	r7, [r2]
   13438:	cmp	r7, #0
   1343c:	beq	13450 <__assert_fail@plt+0x2354>
   13440:	cmp	r7, #4
   13444:	bne	1347c <__assert_fail@plt+0x2380>
   13448:	mov	r0, #0
   1344c:	str	r0, [r2]
   13450:	sub	r0, r9, r5
   13454:	mov	r7, #0
   13458:	cmp	r0, #4
   1345c:	blt	1347c <__assert_fail@plt+0x2380>
   13460:	mov	r0, r5
   13464:	mov	r1, #10
   13468:	mov	r2, #4
   1346c:	bl	11054 <memchr@plt>
   13470:	ldr	r2, [sp, #16]
   13474:	cmp	r0, #0
   13478:	beq	13548 <__assert_fail@plt+0x244c>
   1347c:	cmp	r6, #1
   13480:	blt	134e8 <__assert_fail@plt+0x23ec>
   13484:	mov	r6, r7
   13488:	mov	r0, r5
   1348c:	ldrb	r1, [r5], #1
   13490:	cmp	r1, #10
   13494:	bne	134a4 <__assert_fail@plt+0x23a8>
   13498:	cmp	r5, r9
   1349c:	bcc	13488 <__assert_fail@plt+0x238c>
   134a0:	b	134cc <__assert_fail@plt+0x23d0>
   134a4:	add	r7, r6, #1
   134a8:	mov	r3, r2
   134ac:	add	r5, r0, #1
   134b0:	str	r7, [r3], r6
   134b4:	cmp	r5, r9
   134b8:	strb	r1, [r3, #4]
   134bc:	ldr	r6, [r2]
   134c0:	bcs	134cc <__assert_fail@plt+0x23d0>
   134c4:	cmp	r6, #4
   134c8:	bne	13488 <__assert_fail@plt+0x238c>
   134cc:	add	r5, r0, #1
   134d0:	b	134ec <__assert_fail@plt+0x23f0>
   134d4:	sub	r6, r6, #1
   134d8:	add	r5, r5, #1
   134dc:	b	13540 <__assert_fail@plt+0x2444>
   134e0:	mov	r0, r5
   134e4:	b	134f0 <__assert_fail@plt+0x23f4>
   134e8:	mov	r6, r7
   134ec:	ldr	r0, [sp, #4]
   134f0:	mov	r1, #0
   134f4:	cmp	r6, #0
   134f8:	beq	13560 <__assert_fail@plt+0x2464>
   134fc:	ldr	r3, [sp, #12]
   13500:	cmp	r6, #3
   13504:	mov	r2, #0
   13508:	movwgt	r2, #1
   1350c:	orr	r2, r8, r2
   13510:	orr	r2, r2, r3
   13514:	cmp	r2, #1
   13518:	bne	13560 <__assert_fail@plt+0x2464>
   1351c:	mov	r1, r6
   13520:	mov	r2, sl
   13524:	mov	r3, r4
   13528:	bl	13588 <__assert_fail@plt+0x248c>
   1352c:	cmp	r0, #0
   13530:	mov	r1, r6
   13534:	beq	13560 <__assert_fail@plt+0x2464>
   13538:	ldr	r2, [sp, #16]
   1353c:	sub	r6, r9, r5
   13540:	ldr	r7, [sp, #20]
   13544:	b	1339c <__assert_fail@plt+0x22a0>
   13548:	add	r1, r5, #4
   1354c:	mov	r0, r5
   13550:	mov	r6, #4
   13554:	mov	r5, r1
   13558:	b	1351c <__assert_fail@plt+0x2420>
   1355c:	mov	r1, r6
   13560:	ldr	r0, [fp, #8]
   13564:	ldr	r2, [sp, #20]
   13568:	mov	r3, r0
   1356c:	ldr	r0, [r0]
   13570:	sub	r0, r0, r2
   13574:	str	r0, [r3]
   13578:	clz	r0, r1
   1357c:	lsr	r0, r0, #5
   13580:	sub	sp, fp, #28
   13584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13588:	push	{r4, r5, r6, sl, fp, lr}
   1358c:	add	fp, sp, #16
   13590:	mov	ip, #0
   13594:	cmp	r1, #2
   13598:	blt	1360c <__assert_fail@plt+0x2510>
   1359c:	ldrb	r4, [r0]
   135a0:	movw	lr, #31311	; 0x7a4f
   135a4:	movt	lr, #1
   135a8:	add	r4, lr, r4
   135ac:	ldrsb	r5, [r4]
   135b0:	cmp	r5, #0
   135b4:	blt	1360c <__assert_fail@plt+0x2510>
   135b8:	ldrb	r4, [r0, #1]
   135bc:	add	r4, lr, r4
   135c0:	ldrsb	r4, [r4]
   135c4:	cmp	r4, #0
   135c8:	blt	1360c <__assert_fail@plt+0x2510>
   135cc:	ldr	r6, [r3]
   135d0:	ldr	ip, [r2]
   135d4:	cmp	r6, #0
   135d8:	beq	135f8 <__assert_fail@plt+0x24fc>
   135dc:	ubfx	r6, r4, #4, #4
   135e0:	orr	r5, r6, r5, lsl #2
   135e4:	strb	r5, [ip], #1
   135e8:	ldr	r5, [r3]
   135ec:	sub	r6, r5, #1
   135f0:	str	r6, [r3]
   135f4:	b	135fc <__assert_fail@plt+0x2500>
   135f8:	mov	r6, #0
   135fc:	cmp	r1, #2
   13600:	bne	13614 <__assert_fail@plt+0x2518>
   13604:	str	ip, [r2]
   13608:	mov	ip, #0
   1360c:	mov	r0, ip
   13610:	pop	{r4, r5, r6, sl, fp, pc}
   13614:	ldrb	r5, [r0, #2]
   13618:	cmp	r5, #61	; 0x3d
   1361c:	bne	13638 <__assert_fail@plt+0x253c>
   13620:	cmp	r1, #4
   13624:	bne	13604 <__assert_fail@plt+0x2508>
   13628:	ldrb	r0, [r0, #3]
   1362c:	cmp	r0, #61	; 0x3d
   13630:	bne	13604 <__assert_fail@plt+0x2508>
   13634:	b	136b8 <__assert_fail@plt+0x25bc>
   13638:	add	r5, lr, r5
   1363c:	ldrsb	r5, [r5]
   13640:	cmn	r5, #1
   13644:	ble	13604 <__assert_fail@plt+0x2508>
   13648:	cmp	r6, #0
   1364c:	beq	1366c <__assert_fail@plt+0x2570>
   13650:	ubfx	r6, r5, #2, #6
   13654:	orr	r4, r6, r4, lsl #4
   13658:	strb	r4, [ip], #1
   1365c:	ldr	r4, [r3]
   13660:	sub	r4, r4, #1
   13664:	str	r4, [r3]
   13668:	b	13670 <__assert_fail@plt+0x2574>
   1366c:	mov	r4, #0
   13670:	cmp	r1, #3
   13674:	beq	13604 <__assert_fail@plt+0x2508>
   13678:	ldrb	r0, [r0, #3]
   1367c:	cmp	r0, #61	; 0x3d
   13680:	bne	13690 <__assert_fail@plt+0x2594>
   13684:	cmp	r1, #4
   13688:	bne	13604 <__assert_fail@plt+0x2508>
   1368c:	b	136b8 <__assert_fail@plt+0x25bc>
   13690:	add	r0, lr, r0
   13694:	ldrsb	r0, [r0]
   13698:	cmn	r0, #1
   1369c:	ble	13604 <__assert_fail@plt+0x2508>
   136a0:	cmp	r4, #0
   136a4:	orrne	r0, r0, r5, lsl #6
   136a8:	strbne	r0, [ip], #1
   136ac:	ldrne	r0, [r3]
   136b0:	subne	r0, r0, #1
   136b4:	strne	r0, [r3]
   136b8:	str	ip, [r2]
   136bc:	mov	ip, #1
   136c0:	b	1360c <__assert_fail@plt+0x2510>
   136c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136c8:	add	fp, sp, #24
   136cc:	sub	sp, sp, #8
   136d0:	mov	r7, r0
   136d4:	asr	r0, r2, #2
   136d8:	mov	r4, r3
   136dc:	mov	r6, r2
   136e0:	mov	r8, r1
   136e4:	add	r0, r0, r0, lsl #1
   136e8:	add	r0, r0, #3
   136ec:	str	r0, [sp, #4]
   136f0:	bl	16784 <__assert_fail@plt+0x5688>
   136f4:	mov	r5, #1
   136f8:	cmp	r0, #0
   136fc:	str	r0, [r4]
   13700:	beq	1374c <__assert_fail@plt+0x2650>
   13704:	mov	r3, r0
   13708:	add	r0, sp, #4
   1370c:	mov	r1, r8
   13710:	mov	r2, r6
   13714:	str	r0, [sp]
   13718:	mov	r0, r7
   1371c:	bl	13328 <__assert_fail@plt+0x222c>
   13720:	cmp	r0, #0
   13724:	beq	1373c <__assert_fail@plt+0x2640>
   13728:	ldr	r0, [fp, #8]
   1372c:	cmp	r0, #0
   13730:	ldrne	r1, [sp, #4]
   13734:	strne	r1, [r0]
   13738:	b	1374c <__assert_fail@plt+0x2650>
   1373c:	ldr	r0, [r4]
   13740:	bl	13b6c <__assert_fail@plt+0x2a70>
   13744:	mov	r5, #0
   13748:	str	r5, [r4]
   1374c:	mov	r0, r5
   13750:	sub	sp, fp, #24
   13754:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13758:	sub	r2, r0, #65	; 0x41
   1375c:	mov	r1, r0
   13760:	mov	r0, #1
   13764:	cmp	r2, #26
   13768:	subcs	r2, r1, #97	; 0x61
   1376c:	cmpcs	r2, #26
   13770:	bcs	13778 <__assert_fail@plt+0x267c>
   13774:	bx	lr
   13778:	sub	r1, r1, #48	; 0x30
   1377c:	cmp	r1, #10
   13780:	movcs	r0, #0
   13784:	bx	lr
   13788:	sub	r2, r0, #65	; 0x41
   1378c:	mov	r1, r0
   13790:	mov	r0, #1
   13794:	cmp	r2, #26
   13798:	subcs	r1, r1, #97	; 0x61
   1379c:	cmpcs	r1, #26
   137a0:	movcs	r0, #0
   137a4:	bx	lr
   137a8:	mov	r1, #0
   137ac:	cmp	r0, #128	; 0x80
   137b0:	movwcc	r1, #1
   137b4:	mov	r0, r1
   137b8:	bx	lr
   137bc:	sub	r1, r0, #9
   137c0:	sub	r0, r0, #32
   137c4:	clz	r1, r1
   137c8:	clz	r0, r0
   137cc:	lsr	r1, r1, #5
   137d0:	lsr	r0, r0, #5
   137d4:	orr	r0, r0, r1
   137d8:	bx	lr
   137dc:	mov	r1, r0
   137e0:	mov	r0, #1
   137e4:	cmp	r1, #32
   137e8:	bxcc	lr
   137ec:	cmp	r1, #127	; 0x7f
   137f0:	movne	r0, #0
   137f4:	bx	lr
   137f8:	sub	r1, r0, #48	; 0x30
   137fc:	mov	r0, #0
   13800:	cmp	r1, #10
   13804:	movwcc	r0, #1
   13808:	bx	lr
   1380c:	sub	r1, r0, #33	; 0x21
   13810:	mov	r0, #0
   13814:	cmp	r1, #94	; 0x5e
   13818:	movwcc	r0, #1
   1381c:	bx	lr
   13820:	sub	r1, r0, #97	; 0x61
   13824:	mov	r0, #0
   13828:	cmp	r1, #26
   1382c:	movwcc	r0, #1
   13830:	bx	lr
   13834:	sub	r1, r0, #32
   13838:	mov	r0, #0
   1383c:	cmp	r1, #95	; 0x5f
   13840:	movwcc	r0, #1
   13844:	bx	lr
   13848:	sub	r2, r0, #33	; 0x21
   1384c:	mov	r1, r0
   13850:	mov	r0, #1
   13854:	cmp	r2, #31
   13858:	bhi	13870 <__assert_fail@plt+0x2774>
   1385c:	movw	r3, #32767	; 0x7fff
   13860:	mov	ip, #1
   13864:	movt	r3, #65024	; 0xfe00
   13868:	tst	r3, ip, lsl r2
   1386c:	bxne	lr
   13870:	sub	r2, r1, #91	; 0x5b
   13874:	cmp	r2, #6
   13878:	bcs	13880 <__assert_fail@plt+0x2784>
   1387c:	bx	lr
   13880:	sub	r1, r1, #123	; 0x7b
   13884:	cmp	r1, #4
   13888:	movcs	r0, #0
   1388c:	bxcs	lr
   13890:	bx	lr
   13894:	sub	r0, r0, #9
   13898:	cmp	r0, #23
   1389c:	movhi	r0, #0
   138a0:	bxhi	lr
   138a4:	movw	r1, #31
   138a8:	bic	r0, r0, #-16777216	; 0xff000000
   138ac:	mov	r2, #1
   138b0:	movt	r1, #128	; 0x80
   138b4:	and	r0, r2, r1, lsr r0
   138b8:	bx	lr
   138bc:	sub	r1, r0, #65	; 0x41
   138c0:	mov	r0, #0
   138c4:	cmp	r1, #26
   138c8:	movwcc	r0, #1
   138cc:	bx	lr
   138d0:	sub	r2, r0, #48	; 0x30
   138d4:	mov	r1, r0
   138d8:	mov	r0, #1
   138dc:	cmp	r2, #22
   138e0:	bhi	138f8 <__assert_fail@plt+0x27fc>
   138e4:	movw	r3, #1023	; 0x3ff
   138e8:	mov	ip, #1
   138ec:	movt	r3, #126	; 0x7e
   138f0:	tst	r3, ip, lsl r2
   138f4:	bxne	lr
   138f8:	sub	r1, r1, #97	; 0x61
   138fc:	cmp	r1, #6
   13900:	movcs	r0, #0
   13904:	bxcs	lr
   13908:	bx	lr
   1390c:	sub	r1, r0, #65	; 0x41
   13910:	cmp	r1, #26
   13914:	addcc	r0, r0, #32
   13918:	bx	lr
   1391c:	sub	r1, r0, #97	; 0x61
   13920:	cmp	r1, #26
   13924:	subcc	r0, r0, #32
   13928:	bx	lr
   1392c:	movw	r1, #37236	; 0x9174
   13930:	movt	r1, #2
   13934:	str	r0, [r1]
   13938:	bx	lr
   1393c:	movw	r1, #37240	; 0x9178
   13940:	movt	r1, #2
   13944:	strb	r0, [r1]
   13948:	bx	lr
   1394c:	push	{r4, r5, r6, sl, fp, lr}
   13950:	add	fp, sp, #16
   13954:	sub	sp, sp, #8
   13958:	movw	r0, #37204	; 0x9154
   1395c:	movt	r0, #2
   13960:	ldr	r0, [r0]
   13964:	bl	16804 <__assert_fail@plt+0x5708>
   13968:	cmp	r0, #0
   1396c:	beq	13994 <__assert_fail@plt+0x2898>
   13970:	movw	r0, #37240	; 0x9178
   13974:	movt	r0, #2
   13978:	ldrb	r0, [r0]
   1397c:	cmp	r0, #0
   13980:	beq	139b4 <__assert_fail@plt+0x28b8>
   13984:	bl	1100c <__errno_location@plt>
   13988:	ldr	r0, [r0]
   1398c:	cmp	r0, #32
   13990:	bne	139b4 <__assert_fail@plt+0x28b8>
   13994:	movw	r0, #37192	; 0x9148
   13998:	movt	r0, #2
   1399c:	ldr	r0, [r0]
   139a0:	bl	16804 <__assert_fail@plt+0x5708>
   139a4:	cmp	r0, #0
   139a8:	subeq	sp, fp, #16
   139ac:	popeq	{r4, r5, r6, sl, fp, pc}
   139b0:	b	13a24 <__assert_fail@plt+0x2928>
   139b4:	movw	r1, #30164	; 0x75d4
   139b8:	mov	r0, #0
   139bc:	mov	r2, #5
   139c0:	movt	r1, #1
   139c4:	bl	10f28 <dcgettext@plt>
   139c8:	mov	r4, r0
   139cc:	movw	r0, #37236	; 0x9174
   139d0:	movt	r0, #2
   139d4:	ldr	r6, [r0]
   139d8:	bl	1100c <__errno_location@plt>
   139dc:	ldr	r5, [r0]
   139e0:	cmp	r6, #0
   139e4:	bne	13a00 <__assert_fail@plt+0x2904>
   139e8:	movw	r2, #29308	; 0x727c
   139ec:	mov	r0, #0
   139f0:	mov	r1, r5
   139f4:	mov	r3, r4
   139f8:	movt	r2, #1
   139fc:	b	13a20 <__assert_fail@plt+0x2924>
   13a00:	mov	r0, r6
   13a04:	bl	153fc <__assert_fail@plt+0x4300>
   13a08:	movw	r2, #29304	; 0x7278
   13a0c:	mov	r3, r0
   13a10:	str	r4, [sp]
   13a14:	mov	r0, #0
   13a18:	mov	r1, r5
   13a1c:	movt	r2, #1
   13a20:	bl	10f94 <error@plt>
   13a24:	movw	r0, #37108	; 0x90f4
   13a28:	movt	r0, #2
   13a2c:	ldr	r0, [r0]
   13a30:	bl	10ee0 <_exit@plt>
   13a34:	b	10eb0 <posix_fadvise64@plt>
   13a38:	cmp	r0, #0
   13a3c:	bxeq	lr
   13a40:	push	{r4, sl, fp, lr}
   13a44:	add	fp, sp, #8
   13a48:	sub	sp, sp, #16
   13a4c:	mov	r4, r1
   13a50:	bl	1103c <fileno@plt>
   13a54:	mov	r1, #0
   13a58:	mov	r2, #0
   13a5c:	mov	r3, #0
   13a60:	str	r1, [sp]
   13a64:	stmib	sp, {r1, r4}
   13a68:	bl	10eb0 <posix_fadvise64@plt>
   13a6c:	sub	sp, fp, #8
   13a70:	pop	{r4, sl, fp, pc}
   13a74:	push	{r4, r5, r6, sl, fp, lr}
   13a78:	add	fp, sp, #16
   13a7c:	sub	sp, sp, #8
   13a80:	mov	r4, r0
   13a84:	bl	1103c <fileno@plt>
   13a88:	cmn	r0, #1
   13a8c:	ble	13b00 <__assert_fail@plt+0x2a04>
   13a90:	mov	r0, r4
   13a94:	bl	10fb8 <__freading@plt>
   13a98:	cmp	r0, #0
   13a9c:	beq	13ac8 <__assert_fail@plt+0x29cc>
   13aa0:	mov	r0, r4
   13aa4:	bl	1103c <fileno@plt>
   13aa8:	mov	r1, #1
   13aac:	mov	r2, #0
   13ab0:	mov	r3, #0
   13ab4:	str	r1, [sp]
   13ab8:	bl	10f58 <lseek64@plt>
   13abc:	and	r0, r0, r1
   13ac0:	cmn	r0, #1
   13ac4:	beq	13b00 <__assert_fail@plt+0x2a04>
   13ac8:	mov	r0, r4
   13acc:	bl	13b10 <__assert_fail@plt+0x2a14>
   13ad0:	cmp	r0, #0
   13ad4:	beq	13b00 <__assert_fail@plt+0x2a04>
   13ad8:	bl	1100c <__errno_location@plt>
   13adc:	ldr	r6, [r0]
   13ae0:	mov	r5, r0
   13ae4:	mov	r0, r4
   13ae8:	bl	1106c <fclose@plt>
   13aec:	cmp	r6, #0
   13af0:	strne	r6, [r5]
   13af4:	mvnne	r0, #0
   13af8:	sub	sp, fp, #16
   13afc:	pop	{r4, r5, r6, sl, fp, pc}
   13b00:	mov	r0, r4
   13b04:	sub	sp, fp, #16
   13b08:	pop	{r4, r5, r6, sl, fp, lr}
   13b0c:	b	1106c <fclose@plt>
   13b10:	push	{r4, sl, fp, lr}
   13b14:	add	fp, sp, #8
   13b18:	sub	sp, sp, #8
   13b1c:	mov	r4, r0
   13b20:	cmp	r0, #0
   13b24:	beq	13b40 <__assert_fail@plt+0x2a44>
   13b28:	mov	r0, r4
   13b2c:	bl	10fb8 <__freading@plt>
   13b30:	cmp	r0, #0
   13b34:	ldrbne	r0, [r4, #1]
   13b38:	tstne	r0, #1
   13b3c:	bne	13b50 <__assert_fail@plt+0x2a54>
   13b40:	mov	r0, r4
   13b44:	sub	sp, fp, #8
   13b48:	pop	{r4, sl, fp, lr}
   13b4c:	b	10ebc <fflush@plt>
   13b50:	mov	r0, #1
   13b54:	mov	r2, #0
   13b58:	mov	r3, #0
   13b5c:	str	r0, [sp]
   13b60:	mov	r0, r4
   13b64:	bl	13b94 <__assert_fail@plt+0x2a98>
   13b68:	b	13b40 <__assert_fail@plt+0x2a44>
   13b6c:	push	{r4, r5, r6, sl, fp, lr}
   13b70:	add	fp, sp, #16
   13b74:	mov	r4, r0
   13b78:	bl	1100c <__errno_location@plt>
   13b7c:	ldr	r6, [r0]
   13b80:	mov	r5, r0
   13b84:	mov	r0, r4
   13b88:	bl	10ed4 <free@plt>
   13b8c:	str	r6, [r5]
   13b90:	pop	{r4, r5, r6, sl, fp, pc}
   13b94:	push	{r4, r5, r6, r7, fp, lr}
   13b98:	add	fp, sp, #16
   13b9c:	sub	sp, sp, #8
   13ba0:	mov	r4, r0
   13ba4:	ldr	r0, [r0, #4]
   13ba8:	mov	r5, r3
   13bac:	mov	r6, r2
   13bb0:	ldr	r1, [r4, #8]
   13bb4:	cmp	r1, r0
   13bb8:	bne	13bd4 <__assert_fail@plt+0x2ad8>
   13bbc:	ldrd	r0, [r4, #16]
   13bc0:	cmp	r1, r0
   13bc4:	bne	13bd4 <__assert_fail@plt+0x2ad8>
   13bc8:	ldr	r0, [r4, #36]	; 0x24
   13bcc:	cmp	r0, #0
   13bd0:	beq	13bec <__assert_fail@plt+0x2af0>
   13bd4:	mov	r0, r4
   13bd8:	mov	r2, r6
   13bdc:	mov	r3, r5
   13be0:	sub	sp, fp, #16
   13be4:	pop	{r4, r5, r6, r7, fp, lr}
   13be8:	b	11078 <fseeko64@plt>
   13bec:	ldr	r7, [fp, #8]
   13bf0:	mov	r0, r4
   13bf4:	bl	1103c <fileno@plt>
   13bf8:	mov	r2, r6
   13bfc:	mov	r3, r5
   13c00:	str	r7, [sp]
   13c04:	bl	10f58 <lseek64@plt>
   13c08:	and	r2, r0, r1
   13c0c:	cmn	r2, #1
   13c10:	beq	13c2c <__assert_fail@plt+0x2b30>
   13c14:	strd	r0, [r4, #80]	; 0x50
   13c18:	ldr	r0, [r4]
   13c1c:	bic	r0, r0, #16
   13c20:	str	r0, [r4]
   13c24:	mov	r0, #0
   13c28:	b	13c30 <__assert_fail@plt+0x2b34>
   13c2c:	mvn	r0, #0
   13c30:	sub	sp, fp, #16
   13c34:	pop	{r4, r5, r6, r7, fp, pc}
   13c38:	push	{r4, r5, fp, lr}
   13c3c:	add	fp, sp, #8
   13c40:	cmp	r0, #0
   13c44:	beq	13cd8 <__assert_fail@plt+0x2bdc>
   13c48:	mov	r1, #47	; 0x2f
   13c4c:	mov	r4, r0
   13c50:	bl	11090 <strrchr@plt>
   13c54:	cmp	r0, #0
   13c58:	mov	r5, r4
   13c5c:	addne	r5, r0, #1
   13c60:	sub	r0, r5, r4
   13c64:	cmp	r0, #7
   13c68:	blt	13cbc <__assert_fail@plt+0x2bc0>
   13c6c:	movw	r1, #31623	; 0x7b87
   13c70:	sub	r0, r5, #7
   13c74:	mov	r2, #7
   13c78:	movt	r1, #1
   13c7c:	bl	110d8 <strncmp@plt>
   13c80:	cmp	r0, #0
   13c84:	bne	13cbc <__assert_fail@plt+0x2bc0>
   13c88:	movw	r1, #31631	; 0x7b8f
   13c8c:	mov	r0, r5
   13c90:	mov	r2, #3
   13c94:	movt	r1, #1
   13c98:	bl	110d8 <strncmp@plt>
   13c9c:	cmp	r0, #0
   13ca0:	beq	13cac <__assert_fail@plt+0x2bb0>
   13ca4:	mov	r4, r5
   13ca8:	b	13cbc <__assert_fail@plt+0x2bc0>
   13cac:	movw	r0, #37176	; 0x9138
   13cb0:	add	r4, r5, #3
   13cb4:	movt	r0, #2
   13cb8:	str	r4, [r0]
   13cbc:	movw	r0, #37180	; 0x913c
   13cc0:	movt	r0, #2
   13cc4:	str	r4, [r0]
   13cc8:	movw	r0, #37244	; 0x917c
   13ccc:	movt	r0, #2
   13cd0:	str	r4, [r0]
   13cd4:	pop	{r4, r5, fp, pc}
   13cd8:	movw	r0, #37192	; 0x9148
   13cdc:	movt	r0, #2
   13ce0:	ldr	r1, [r0]
   13ce4:	movw	r0, #31567	; 0x7b4f
   13ce8:	movt	r0, #1
   13cec:	bl	110cc <fputs@plt>
   13cf0:	bl	110e4 <abort@plt>
   13cf4:	push	{r4, r5, r6, sl, fp, lr}
   13cf8:	add	fp, sp, #16
   13cfc:	mov	r4, r0
   13d00:	movw	r0, #37248	; 0x9180
   13d04:	movt	r0, #2
   13d08:	cmp	r4, #0
   13d0c:	moveq	r4, r0
   13d10:	bl	1100c <__errno_location@plt>
   13d14:	ldr	r6, [r0]
   13d18:	mov	r5, r0
   13d1c:	mov	r0, r4
   13d20:	mov	r1, #48	; 0x30
   13d24:	bl	15f80 <__assert_fail@plt+0x4e84>
   13d28:	str	r6, [r5]
   13d2c:	pop	{r4, r5, r6, sl, fp, pc}
   13d30:	movw	r1, #37248	; 0x9180
   13d34:	cmp	r0, #0
   13d38:	movt	r1, #2
   13d3c:	movne	r1, r0
   13d40:	ldr	r0, [r1]
   13d44:	bx	lr
   13d48:	movw	r2, #37248	; 0x9180
   13d4c:	cmp	r0, #0
   13d50:	movt	r2, #2
   13d54:	movne	r2, r0
   13d58:	str	r1, [r2]
   13d5c:	bx	lr
   13d60:	movw	r3, #37248	; 0x9180
   13d64:	cmp	r0, #0
   13d68:	movt	r3, #2
   13d6c:	movne	r3, r0
   13d70:	ubfx	r0, r1, #5, #3
   13d74:	and	r1, r1, #31
   13d78:	add	r0, r3, r0, lsl #2
   13d7c:	ldr	r3, [r0, #8]
   13d80:	eor	r2, r2, r3, lsr r1
   13d84:	and	r2, r2, #1
   13d88:	eor	r2, r3, r2, lsl r1
   13d8c:	str	r2, [r0, #8]
   13d90:	mov	r0, #1
   13d94:	and	r0, r0, r3, lsr r1
   13d98:	bx	lr
   13d9c:	movw	r2, #37248	; 0x9180
   13da0:	cmp	r0, #0
   13da4:	movt	r2, #2
   13da8:	movne	r2, r0
   13dac:	ldr	r0, [r2, #4]
   13db0:	str	r1, [r2, #4]
   13db4:	bx	lr
   13db8:	movw	r3, #37248	; 0x9180
   13dbc:	cmp	r0, #0
   13dc0:	movt	r3, #2
   13dc4:	movne	r3, r0
   13dc8:	cmp	r1, #0
   13dcc:	mov	r0, #10
   13dd0:	cmpne	r2, #0
   13dd4:	str	r0, [r3]
   13dd8:	bne	13de8 <__assert_fail@plt+0x2cec>
   13ddc:	push	{fp, lr}
   13de0:	mov	fp, sp
   13de4:	bl	110e4 <abort@plt>
   13de8:	str	r1, [r3, #40]	; 0x28
   13dec:	str	r2, [r3, #44]	; 0x2c
   13df0:	bx	lr
   13df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13df8:	add	fp, sp, #28
   13dfc:	sub	sp, sp, #20
   13e00:	mov	r7, r0
   13e04:	ldr	r0, [fp, #8]
   13e08:	movw	r5, #37248	; 0x9180
   13e0c:	mov	r8, r3
   13e10:	mov	r9, r2
   13e14:	mov	sl, r1
   13e18:	movt	r5, #2
   13e1c:	cmp	r0, #0
   13e20:	movne	r5, r0
   13e24:	bl	1100c <__errno_location@plt>
   13e28:	mov	r4, r0
   13e2c:	ldm	r5, {r0, r1}
   13e30:	ldr	r2, [r5, #40]	; 0x28
   13e34:	ldr	r3, [r5, #44]	; 0x2c
   13e38:	add	r5, r5, #8
   13e3c:	ldr	r6, [r4]
   13e40:	stm	sp, {r0, r1, r5}
   13e44:	str	r2, [sp, #12]
   13e48:	str	r3, [sp, #16]
   13e4c:	mov	r0, r7
   13e50:	mov	r1, sl
   13e54:	mov	r2, r9
   13e58:	mov	r3, r8
   13e5c:	bl	13e6c <__assert_fail@plt+0x2d70>
   13e60:	str	r6, [r4]
   13e64:	sub	sp, fp, #28
   13e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e70:	add	fp, sp, #28
   13e74:	sub	sp, sp, #156	; 0x9c
   13e78:	str	r0, [fp, #-56]	; 0xffffffc8
   13e7c:	ldr	r0, [fp, #12]
   13e80:	mov	r4, r1
   13e84:	str	r3, [sp, #80]	; 0x50
   13e88:	str	r2, [fp, #-84]	; 0xffffffac
   13e8c:	and	r1, r0, #4
   13e90:	str	r1, [sp, #24]
   13e94:	and	r1, r0, #1
   13e98:	str	r1, [sp, #28]
   13e9c:	ubfx	r7, r0, #1, #1
   13ea0:	bl	10f64 <__ctype_get_mb_cur_max@plt>
   13ea4:	str	r0, [sp, #32]
   13ea8:	ldr	r0, [fp, #24]
   13eac:	ldr	r9, [fp, #8]
   13eb0:	mov	r2, #0
   13eb4:	mov	r1, #0
   13eb8:	mov	r5, #0
   13ebc:	str	r2, [sp, #52]	; 0x34
   13ec0:	mov	r2, #1
   13ec4:	str	r0, [sp, #72]	; 0x48
   13ec8:	ldr	r0, [fp, #20]
   13ecc:	str	r0, [sp, #64]	; 0x40
   13ed0:	mov	r0, #0
   13ed4:	str	r0, [sp, #92]	; 0x5c
   13ed8:	mov	r0, #0
   13edc:	str	r0, [fp, #-76]	; 0xffffffb4
   13ee0:	mov	r0, #0
   13ee4:	cmp	r9, #10
   13ee8:	str	r1, [sp, #68]	; 0x44
   13eec:	bhi	14eec <__assert_fail@plt+0x3df0>
   13ef0:	add	r1, pc, #28
   13ef4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ef8:	ldr	lr, [sp, #80]	; 0x50
   13efc:	mov	r6, r4
   13f00:	mov	r8, #0
   13f04:	mov	r3, #1
   13f08:	mov	sl, #0
   13f0c:	mov	r4, r2
   13f10:	ldr	pc, [r1, r9, lsl #2]
   13f14:	andeq	r3, r1, r4, ror #31
   13f18:	andeq	r4, r1, r0, lsr #32
   13f1c:	strdeq	r3, [r1], -r4
   13f20:	ldrdeq	r3, [r1], -ip
   13f24:	andeq	r4, r1, r4, lsl r0
   13f28:	andeq	r4, r1, ip, rrx
   13f2c:	andeq	r4, r1, r4
   13f30:	andeq	r4, r1, ip, asr #1
   13f34:	andeq	r3, r1, r0, asr #30
   13f38:	andeq	r3, r1, r0, asr #30
   13f3c:	andeq	r3, r1, r8, ror #30
   13f40:	movw	r0, #31713	; 0x7be1
   13f44:	mov	r1, r9
   13f48:	movt	r0, #1
   13f4c:	bl	15654 <__assert_fail@plt+0x4558>
   13f50:	str	r0, [sp, #64]	; 0x40
   13f54:	movw	r0, #31715	; 0x7be3
   13f58:	mov	r1, r9
   13f5c:	movt	r0, #1
   13f60:	bl	15654 <__assert_fail@plt+0x4558>
   13f64:	str	r0, [sp, #72]	; 0x48
   13f68:	mov	r8, #0
   13f6c:	mov	sl, r7
   13f70:	tst	r7, #1
   13f74:	str	r5, [fp, #-48]	; 0xffffffd0
   13f78:	bne	13fb4 <__assert_fail@plt+0x2eb8>
   13f7c:	ldr	r0, [sp, #64]	; 0x40
   13f80:	ldrb	r0, [r0]
   13f84:	cmp	r0, #0
   13f88:	beq	13fb4 <__assert_fail@plt+0x2eb8>
   13f8c:	ldr	r1, [sp, #64]	; 0x40
   13f90:	mov	r8, #0
   13f94:	add	r1, r1, #1
   13f98:	cmp	r8, r6
   13f9c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13fa0:	strbcc	r0, [r2, r8]
   13fa4:	ldrb	r0, [r1, r8]
   13fa8:	add	r8, r8, #1
   13fac:	cmp	r0, #0
   13fb0:	bne	13f98 <__assert_fail@plt+0x2e9c>
   13fb4:	ldr	r7, [sp, #72]	; 0x48
   13fb8:	mov	r0, r7
   13fbc:	bl	10ff4 <strlen@plt>
   13fc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13fc4:	ldr	lr, [sp, #80]	; 0x50
   13fc8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13fcc:	str	r0, [fp, #-76]	; 0xffffffb4
   13fd0:	str	r7, [sp, #92]	; 0x5c
   13fd4:	mov	r3, #1
   13fd8:	b	140cc <__assert_fail@plt+0x2fd0>
   13fdc:	mov	r0, #1
   13fe0:	b	14020 <__assert_fail@plt+0x2f24>
   13fe4:	mov	r9, #0
   13fe8:	mov	r8, #0
   13fec:	mov	r3, r0
   13ff0:	b	140c8 <__assert_fail@plt+0x2fcc>
   13ff4:	tst	r7, #1
   13ff8:	bne	14020 <__assert_fail@plt+0x2f24>
   13ffc:	mov	r3, r0
   14000:	b	14048 <__assert_fail@plt+0x2f4c>
   14004:	mov	r0, #1
   14008:	mov	r8, #0
   1400c:	mov	r9, #5
   14010:	b	14080 <__assert_fail@plt+0x2f84>
   14014:	mov	r3, #1
   14018:	tst	r7, #1
   1401c:	beq	14048 <__assert_fail@plt+0x2f4c>
   14020:	mov	r1, #1
   14024:	mov	r8, #0
   14028:	mov	r9, #2
   1402c:	mov	r3, r0
   14030:	mov	sl, #1
   14034:	str	r1, [fp, #-76]	; 0xffffffb4
   14038:	movw	r1, #31715	; 0x7be3
   1403c:	movt	r1, #1
   14040:	str	r1, [sp, #92]	; 0x5c
   14044:	b	140cc <__assert_fail@plt+0x2fd0>
   14048:	cmp	r6, #0
   1404c:	mov	r8, #1
   14050:	mov	r9, #2
   14054:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   14058:	movne	r0, #39	; 0x27
   1405c:	strbne	r0, [r1]
   14060:	movw	r0, #31715	; 0x7be3
   14064:	movt	r0, #1
   14068:	b	140bc <__assert_fail@plt+0x2fc0>
   1406c:	mov	r9, #5
   14070:	tst	r7, #1
   14074:	beq	1409c <__assert_fail@plt+0x2fa0>
   14078:	mov	r0, #1
   1407c:	mov	r8, #0
   14080:	str	r0, [fp, #-76]	; 0xffffffb4
   14084:	movw	r0, #31711	; 0x7bdf
   14088:	mov	r3, #1
   1408c:	mov	sl, #1
   14090:	movt	r0, #1
   14094:	str	r0, [sp, #92]	; 0x5c
   14098:	b	140cc <__assert_fail@plt+0x2fd0>
   1409c:	cmp	r6, #0
   140a0:	mov	r8, #1
   140a4:	mov	r3, #1
   140a8:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   140ac:	movne	r0, #34	; 0x22
   140b0:	strbne	r0, [r1]
   140b4:	movw	r0, #31711	; 0x7bdf
   140b8:	movt	r0, #1
   140bc:	str	r0, [sp, #92]	; 0x5c
   140c0:	mov	r0, #1
   140c4:	str	r0, [fp, #-76]	; 0xffffffb4
   140c8:	mov	sl, #0
   140cc:	ldr	r0, [fp, #16]
   140d0:	mov	r7, #0
   140d4:	str	r9, [fp, #-64]	; 0xffffffc0
   140d8:	str	sl, [fp, #-72]	; 0xffffffb8
   140dc:	str	r3, [sp, #84]	; 0x54
   140e0:	cmp	r0, #0
   140e4:	movwne	r0, #1
   140e8:	and	r0, r0, sl
   140ec:	str	r0, [fp, #-88]	; 0xffffffa8
   140f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   140f4:	cmp	r0, #0
   140f8:	movwne	r0, #1
   140fc:	subs	r2, r9, #2
   14100:	and	r1, r0, sl
   14104:	str	r2, [fp, #-80]	; 0xffffffb0
   14108:	and	r1, r3, r1
   1410c:	str	r1, [sp, #44]	; 0x2c
   14110:	clz	r1, r2
   14114:	lsr	r1, r1, #5
   14118:	and	r1, r1, sl
   1411c:	str	r1, [sp, #56]	; 0x38
   14120:	mov	r1, r2
   14124:	eor	r2, sl, #1
   14128:	movwne	r1, #1
   1412c:	str	r2, [sp, #88]	; 0x58
   14130:	orr	r2, r1, r2
   14134:	and	r1, r1, r3
   14138:	and	r0, r0, r1
   1413c:	str	r2, [sp, #60]	; 0x3c
   14140:	str	r1, [fp, #-68]	; 0xffffffbc
   14144:	str	r0, [fp, #-60]	; 0xffffffc4
   14148:	eor	r0, r3, #1
   1414c:	str	r0, [sp, #48]	; 0x30
   14150:	cmn	lr, #1
   14154:	beq	14164 <__assert_fail@plt+0x3068>
   14158:	cmp	r7, lr
   1415c:	bne	14170 <__assert_fail@plt+0x3074>
   14160:	b	14d1c <__assert_fail@plt+0x3c20>
   14164:	ldrb	r0, [ip, r7]
   14168:	cmp	r0, #0
   1416c:	beq	14d24 <__assert_fail@plt+0x3c28>
   14170:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14174:	mov	r9, #0
   14178:	str	r5, [fp, #-48]	; 0xffffffd0
   1417c:	str	r6, [fp, #-52]	; 0xffffffcc
   14180:	cmp	r0, #0
   14184:	beq	141c4 <__assert_fail@plt+0x30c8>
   14188:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1418c:	mov	r5, r4
   14190:	add	r4, r7, r0
   14194:	cmp	r0, #2
   14198:	bcc	141b4 <__assert_fail@plt+0x30b8>
   1419c:	cmn	lr, #1
   141a0:	bne	141b4 <__assert_fail@plt+0x30b8>
   141a4:	mov	r0, ip
   141a8:	bl	10ff4 <strlen@plt>
   141ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   141b0:	mov	lr, r0
   141b4:	cmp	r4, lr
   141b8:	bls	141cc <__assert_fail@plt+0x30d0>
   141bc:	mov	r6, #0
   141c0:	b	1420c <__assert_fail@plt+0x3110>
   141c4:	mov	r6, #0
   141c8:	b	14210 <__assert_fail@plt+0x3114>
   141cc:	ldr	r1, [sp, #92]	; 0x5c
   141d0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   141d4:	add	r0, ip, r7
   141d8:	mov	r4, lr
   141dc:	bl	10f10 <memcmp@plt>
   141e0:	ldr	r2, [sp, #88]	; 0x58
   141e4:	cmp	r0, #0
   141e8:	mov	r1, r0
   141ec:	movwne	r1, #1
   141f0:	orr	r1, r1, r2
   141f4:	tst	r1, #1
   141f8:	beq	14db8 <__assert_fail@plt+0x3cbc>
   141fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14200:	clz	r0, r0
   14204:	mov	lr, r4
   14208:	lsr	r6, r0, #5
   1420c:	mov	r4, r5
   14210:	ldrb	r5, [ip, r7]
   14214:	cmp	r5, #126	; 0x7e
   14218:	bhi	145e0 <__assert_fail@plt+0x34e4>
   1421c:	add	r3, pc, #16
   14220:	mov	sl, #1
   14224:	mov	r2, #110	; 0x6e
   14228:	mov	r0, #97	; 0x61
   1422c:	mov	r1, #0
   14230:	ldr	pc, [r3, r5, lsl #2]
   14234:	andeq	r4, r1, r4, asr #9
   14238:	andeq	r4, r1, r0, ror #11
   1423c:	andeq	r4, r1, r0, ror #11
   14240:	andeq	r4, r1, r0, ror #11
   14244:	andeq	r4, r1, r0, ror #11
   14248:	andeq	r4, r1, r0, ror #11
   1424c:	andeq	r4, r1, r0, ror #11
   14250:	andeq	r4, r1, r4, lsl #13
   14254:	andeq	r4, r1, r4, lsr #9
   14258:	muleq	r1, ip, r4
   1425c:			; <UNDEFINED> instruction: 0x000144b0
   14260:	andeq	r4, r1, r4, lsr r5
   14264:	muleq	r1, r4, r4
   14268:	andeq	r4, r1, ip, lsr #9
   1426c:	andeq	r4, r1, r0, ror #11
   14270:	andeq	r4, r1, r0, ror #11
   14274:	andeq	r4, r1, r0, ror #11
   14278:	andeq	r4, r1, r0, ror #11
   1427c:	andeq	r4, r1, r0, ror #11
   14280:	andeq	r4, r1, r0, ror #11
   14284:	andeq	r4, r1, r0, ror #11
   14288:	andeq	r4, r1, r0, ror #11
   1428c:	andeq	r4, r1, r0, ror #11
   14290:	andeq	r4, r1, r0, ror #11
   14294:	andeq	r4, r1, r0, ror #11
   14298:	andeq	r4, r1, r0, ror #11
   1429c:	andeq	r4, r1, r0, ror #11
   142a0:	andeq	r4, r1, r0, ror #11
   142a4:	andeq	r4, r1, r0, ror #11
   142a8:	andeq	r4, r1, r0, ror #11
   142ac:	andeq	r4, r1, r0, ror #11
   142b0:	andeq	r4, r1, r0, ror #11
   142b4:	andeq	r4, r1, r4, asr #12
   142b8:	andeq	r4, r1, r8, asr #12
   142bc:	andeq	r4, r1, r8, asr #12
   142c0:	andeq	r4, r1, r4, asr #8
   142c4:	andeq	r4, r1, r8, asr #12
   142c8:	andeq	r4, r1, r0, lsr r4
   142cc:	andeq	r4, r1, r8, asr #12
   142d0:	andeq	r4, r1, ip, lsr r5
   142d4:	andeq	r4, r1, r8, asr #12
   142d8:	andeq	r4, r1, r8, asr #12
   142dc:	andeq	r4, r1, r8, asr #12
   142e0:	andeq	r4, r1, r0, lsr r4
   142e4:	andeq	r4, r1, r0, lsr r4
   142e8:	andeq	r4, r1, r0, lsr r4
   142ec:	andeq	r4, r1, r0, lsr r4
   142f0:	andeq	r4, r1, r0, lsr r4
   142f4:	andeq	r4, r1, r0, lsr r4
   142f8:	andeq	r4, r1, r0, lsr r4
   142fc:	andeq	r4, r1, r0, lsr r4
   14300:	andeq	r4, r1, r0, lsr r4
   14304:	andeq	r4, r1, r0, lsr r4
   14308:	andeq	r4, r1, r0, lsr r4
   1430c:	andeq	r4, r1, r0, lsr r4
   14310:	andeq	r4, r1, r0, lsr r4
   14314:	andeq	r4, r1, r0, lsr r4
   14318:	andeq	r4, r1, r0, lsr r4
   1431c:	andeq	r4, r1, r0, lsr r4
   14320:	andeq	r4, r1, r8, asr #12
   14324:	andeq	r4, r1, r8, asr #12
   14328:	andeq	r4, r1, r8, asr #12
   1432c:	andeq	r4, r1, r8, asr #12
   14330:	andeq	r4, r1, r8, lsl #10
   14334:	andeq	r4, r1, r0, ror #11
   14338:	andeq	r4, r1, r0, lsr r4
   1433c:	andeq	r4, r1, r0, lsr r4
   14340:	andeq	r4, r1, r0, lsr r4
   14344:	andeq	r4, r1, r0, lsr r4
   14348:	andeq	r4, r1, r0, lsr r4
   1434c:	andeq	r4, r1, r0, lsr r4
   14350:	andeq	r4, r1, r0, lsr r4
   14354:	andeq	r4, r1, r0, lsr r4
   14358:	andeq	r4, r1, r0, lsr r4
   1435c:	andeq	r4, r1, r0, lsr r4
   14360:	andeq	r4, r1, r0, lsr r4
   14364:	andeq	r4, r1, r0, lsr r4
   14368:	andeq	r4, r1, r0, lsr r4
   1436c:	andeq	r4, r1, r0, lsr r4
   14370:	andeq	r4, r1, r0, lsr r4
   14374:	andeq	r4, r1, r0, lsr r4
   14378:	andeq	r4, r1, r0, lsr r4
   1437c:	andeq	r4, r1, r0, lsr r4
   14380:	andeq	r4, r1, r0, lsr r4
   14384:	andeq	r4, r1, r0, lsr r4
   14388:	andeq	r4, r1, r0, lsr r4
   1438c:	andeq	r4, r1, r0, lsr r4
   14390:	andeq	r4, r1, r0, lsr r4
   14394:	andeq	r4, r1, r0, lsr r4
   14398:	andeq	r4, r1, r0, lsr r4
   1439c:	andeq	r4, r1, r0, lsr r4
   143a0:	andeq	r4, r1, r8, asr #12
   143a4:	andeq	r4, r1, r0, ror r4
   143a8:	andeq	r4, r1, r0, lsr r4
   143ac:	andeq	r4, r1, r8, asr #12
   143b0:	andeq	r4, r1, r0, lsr r4
   143b4:	andeq	r4, r1, r8, asr #12
   143b8:	andeq	r4, r1, r0, lsr r4
   143bc:	andeq	r4, r1, r0, lsr r4
   143c0:	andeq	r4, r1, r0, lsr r4
   143c4:	andeq	r4, r1, r0, lsr r4
   143c8:	andeq	r4, r1, r0, lsr r4
   143cc:	andeq	r4, r1, r0, lsr r4
   143d0:	andeq	r4, r1, r0, lsr r4
   143d4:	andeq	r4, r1, r0, lsr r4
   143d8:	andeq	r4, r1, r0, lsr r4
   143dc:	andeq	r4, r1, r0, lsr r4
   143e0:	andeq	r4, r1, r0, lsr r4
   143e4:	andeq	r4, r1, r0, lsr r4
   143e8:	andeq	r4, r1, r0, lsr r4
   143ec:	andeq	r4, r1, r0, lsr r4
   143f0:	andeq	r4, r1, r0, lsr r4
   143f4:	andeq	r4, r1, r0, lsr r4
   143f8:	andeq	r4, r1, r0, lsr r4
   143fc:	andeq	r4, r1, r0, lsr r4
   14400:	andeq	r4, r1, r0, lsr r4
   14404:	andeq	r4, r1, r0, lsr r4
   14408:	andeq	r4, r1, r0, lsr r4
   1440c:	andeq	r4, r1, r0, lsr r4
   14410:	andeq	r4, r1, r0, lsr r4
   14414:	andeq	r4, r1, r0, lsr r4
   14418:	andeq	r4, r1, r0, lsr r4
   1441c:	andeq	r4, r1, r0, lsr r4
   14420:	andeq	r4, r1, r4, asr r4
   14424:	andeq	r4, r1, r8, asr #12
   14428:	andeq	r4, r1, r4, asr r4
   1442c:	andeq	r4, r1, r4, asr #8
   14430:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14434:	cmp	r0, #0
   14438:	beq	14698 <__assert_fail@plt+0x359c>
   1443c:	ldr	r0, [fp, #16]
   14440:	b	1469c <__assert_fail@plt+0x35a0>
   14444:	mov	sl, #0
   14448:	cmp	r7, #0
   1444c:	bne	148b4 <__assert_fail@plt+0x37b8>
   14450:	b	14644 <__assert_fail@plt+0x3548>
   14454:	mov	sl, #0
   14458:	cmn	lr, #1
   1445c:	beq	14630 <__assert_fail@plt+0x3534>
   14460:	cmp	r7, #0
   14464:	cmpeq	lr, #1
   14468:	bne	148b4 <__assert_fail@plt+0x37b8>
   1446c:	b	14644 <__assert_fail@plt+0x3548>
   14470:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14474:	cmp	r0, #2
   14478:	bne	14668 <__assert_fail@plt+0x356c>
   1447c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14480:	tst	r0, #1
   14484:	bne	14dd4 <__assert_fail@plt+0x3cd8>
   14488:	mov	r9, #0
   1448c:	mov	r0, #92	; 0x5c
   14490:	b	1467c <__assert_fail@plt+0x3580>
   14494:	mov	r0, #102	; 0x66
   14498:	b	14684 <__assert_fail@plt+0x3588>
   1449c:	mov	r2, #116	; 0x74
   144a0:	b	144b0 <__assert_fail@plt+0x33b4>
   144a4:	mov	r0, #98	; 0x62
   144a8:	b	14684 <__assert_fail@plt+0x3588>
   144ac:	mov	r2, #114	; 0x72
   144b0:	ldr	r0, [sp, #60]	; 0x3c
   144b4:	tst	r0, #1
   144b8:	mov	r0, r2
   144bc:	bne	14684 <__assert_fail@plt+0x3588>
   144c0:	b	14dd4 <__assert_fail@plt+0x3cd8>
   144c4:	ldr	r0, [sp, #84]	; 0x54
   144c8:	tst	r0, #1
   144cc:	beq	14770 <__assert_fail@plt+0x3674>
   144d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   144d4:	tst	r0, #1
   144d8:	bne	14edc <__assert_fail@plt+0x3de0>
   144dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   144e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   144e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   144e8:	cmp	r0, #2
   144ec:	ldr	r0, [fp, #-80]	; 0xffffffb0
   144f0:	movwne	r0, #1
   144f4:	orr	r0, r0, r3
   144f8:	tst	r0, #1
   144fc:	beq	14bf0 <__assert_fail@plt+0x3af4>
   14500:	mov	r0, r8
   14504:	b	14c30 <__assert_fail@plt+0x3b34>
   14508:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1450c:	mov	r9, #0
   14510:	mov	r5, #63	; 0x3f
   14514:	cmp	r0, #5
   14518:	beq	148bc <__assert_fail@plt+0x37c0>
   1451c:	cmp	r0, #2
   14520:	bne	1497c <__assert_fail@plt+0x3880>
   14524:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14528:	tst	r0, #1
   1452c:	beq	14980 <__assert_fail@plt+0x3884>
   14530:	b	14dd4 <__assert_fail@plt+0x3cd8>
   14534:	mov	r0, #118	; 0x76
   14538:	b	14684 <__assert_fail@plt+0x3588>
   1453c:	mov	r0, #1
   14540:	mov	r5, #39	; 0x27
   14544:	str	r0, [sp, #52]	; 0x34
   14548:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1454c:	cmp	r0, #2
   14550:	bne	145d8 <__assert_fail@plt+0x34dc>
   14554:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14558:	tst	r0, #1
   1455c:	bne	14dd4 <__assert_fail@plt+0x3cd8>
   14560:	ldr	r3, [sp, #68]	; 0x44
   14564:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14568:	mov	r9, #0
   1456c:	clz	r1, r2
   14570:	cmp	r3, #0
   14574:	mov	r0, r3
   14578:	movwne	r0, #1
   1457c:	lsr	r1, r1, #5
   14580:	orrs	r0, r0, r1
   14584:	moveq	r3, r2
   14588:	moveq	r2, r0
   1458c:	cmp	r8, r2
   14590:	str	r3, [sp, #68]	; 0x44
   14594:	str	r2, [fp, #-52]	; 0xffffffcc
   14598:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1459c:	movcc	r0, #39	; 0x27
   145a0:	strbcc	r0, [r1, r8]
   145a4:	add	r0, r8, #1
   145a8:	cmp	r0, r2
   145ac:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   145b0:	movcc	r1, #92	; 0x5c
   145b4:	strbcc	r1, [r3, r0]
   145b8:	add	r0, r8, #2
   145bc:	add	r8, r8, #3
   145c0:	cmp	r0, r2
   145c4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   145c8:	movcc	r1, #39	; 0x27
   145cc:	strbcc	r1, [r2, r0]
   145d0:	mov	r0, #0
   145d4:	str	r0, [fp, #-48]	; 0xffffffd0
   145d8:	mov	sl, #1
   145dc:	b	14430 <__assert_fail@plt+0x3334>
   145e0:	ldr	r0, [sp, #32]
   145e4:	cmp	r0, #1
   145e8:	bne	14794 <__assert_fail@plt+0x3698>
   145ec:	str	lr, [sp, #80]	; 0x50
   145f0:	bl	10fdc <__ctype_b_loc@plt>
   145f4:	ldr	r0, [r0]
   145f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   145fc:	mov	r1, #1
   14600:	add	r0, r0, r5, lsl #1
   14604:	ldrb	r0, [r0, #1]
   14608:	ubfx	sl, r0, #6, #1
   1460c:	ldr	r0, [sp, #48]	; 0x30
   14610:	mov	r2, r1
   14614:	cmp	r1, #1
   14618:	orr	r0, sl, r0
   1461c:	bhi	14988 <__assert_fail@plt+0x388c>
   14620:	tst	r0, #1
   14624:	beq	14988 <__assert_fail@plt+0x388c>
   14628:	ldr	lr, [sp, #80]	; 0x50
   1462c:	b	14430 <__assert_fail@plt+0x3334>
   14630:	cmp	r7, #0
   14634:	bne	148b0 <__assert_fail@plt+0x37b4>
   14638:	ldrb	r0, [ip, #1]
   1463c:	cmp	r0, #0
   14640:	bne	148b0 <__assert_fail@plt+0x37b4>
   14644:	mov	r1, #1
   14648:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1464c:	cmp	r0, #2
   14650:	bne	14660 <__assert_fail@plt+0x3564>
   14654:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14658:	tst	r0, #1
   1465c:	bne	14dd4 <__assert_fail@plt+0x3cd8>
   14660:	mov	sl, r1
   14664:	b	14430 <__assert_fail@plt+0x3334>
   14668:	ldr	r1, [sp, #44]	; 0x2c
   1466c:	mov	r9, #0
   14670:	mov	r0, #92	; 0x5c
   14674:	cmp	r1, #0
   14678:	beq	14684 <__assert_fail@plt+0x3588>
   1467c:	mov	sl, #0
   14680:	b	14b9c <__assert_fail@plt+0x3aa0>
   14684:	ldr	r1, [sp, #84]	; 0x54
   14688:	mov	sl, #0
   1468c:	mov	r9, #0
   14690:	tst	r1, #1
   14694:	bne	146d0 <__assert_fail@plt+0x35d4>
   14698:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1469c:	cmp	r0, #0
   146a0:	mov	r0, r5
   146a4:	beq	146c8 <__assert_fail@plt+0x35cc>
   146a8:	ldr	r1, [fp, #16]
   146ac:	ubfx	r0, r5, #5, #3
   146b0:	mov	r2, #1
   146b4:	ldr	r0, [r1, r0, lsl #2]
   146b8:	and	r1, r5, #31
   146bc:	tst	r0, r2, lsl r1
   146c0:	mov	r0, r5
   146c4:	bne	146d0 <__assert_fail@plt+0x35d4>
   146c8:	cmp	r6, #0
   146cc:	beq	14b9c <__assert_fail@plt+0x3aa0>
   146d0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   146d4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   146d8:	tst	r1, #1
   146dc:	bne	14db0 <__assert_fail@plt+0x3cb4>
   146e0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   146e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   146e8:	cmp	r1, #2
   146ec:	ldr	r1, [fp, #-80]	; 0xffffffb0
   146f0:	movwne	r1, #1
   146f4:	orr	r1, r1, r5
   146f8:	tst	r1, #1
   146fc:	bne	14740 <__assert_fail@plt+0x3644>
   14700:	cmp	r8, r6
   14704:	mov	r5, #1
   14708:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1470c:	movcc	r1, #39	; 0x27
   14710:	strbcc	r1, [r2, r8]
   14714:	add	r1, r8, #1
   14718:	cmp	r1, r6
   1471c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14720:	movcc	r2, #36	; 0x24
   14724:	strbcc	r2, [r3, r1]
   14728:	add	r1, r8, #2
   1472c:	add	r8, r8, #3
   14730:	cmp	r1, r6
   14734:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14738:	movcc	r2, #39	; 0x27
   1473c:	strbcc	r2, [r3, r1]
   14740:	cmp	r8, r6
   14744:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14748:	movcc	r1, #92	; 0x5c
   1474c:	strbcc	r1, [r2, r8]
   14750:	add	r8, r8, #1
   14754:	cmp	r8, r6
   14758:	and	r4, r4, sl
   1475c:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   14760:	strbcc	r0, [r1, r8]
   14764:	add	r8, r8, #1
   14768:	add	r7, r7, #1
   1476c:	b	14150 <__assert_fail@plt+0x3054>
   14770:	ldr	r0, [sp, #28]
   14774:	mov	sl, #0
   14778:	mov	r9, #0
   1477c:	mov	r5, #0
   14780:	cmp	r0, #0
   14784:	beq	14698 <__assert_fail@plt+0x359c>
   14788:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1478c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14790:	b	14768 <__assert_fail@plt+0x366c>
   14794:	mov	r0, #0
   14798:	cmn	lr, #1
   1479c:	str	r6, [sp, #76]	; 0x4c
   147a0:	str	r4, [sp, #20]
   147a4:	str	r0, [fp, #-36]	; 0xffffffdc
   147a8:	str	r0, [fp, #-40]	; 0xffffffd8
   147ac:	bne	147c0 <__assert_fail@plt+0x36c4>
   147b0:	mov	r0, ip
   147b4:	bl	10ff4 <strlen@plt>
   147b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   147bc:	mov	lr, r0
   147c0:	add	r0, ip, r7
   147c4:	mov	sl, #1
   147c8:	mov	r6, #0
   147cc:	sub	r4, fp, #40	; 0x28
   147d0:	str	lr, [sp, #80]	; 0x50
   147d4:	str	r0, [sp, #36]	; 0x24
   147d8:	str	r6, [sp, #40]	; 0x28
   147dc:	add	r6, r6, r7
   147e0:	sub	r0, fp, #44	; 0x2c
   147e4:	mov	r3, r4
   147e8:	add	r1, ip, r6
   147ec:	sub	r2, lr, r6
   147f0:	bl	168bc <__assert_fail@plt+0x57c0>
   147f4:	cmp	r0, #0
   147f8:	beq	14d04 <__assert_fail@plt+0x3c08>
   147fc:	cmn	r0, #1
   14800:	beq	14cc4 <__assert_fail@plt+0x3bc8>
   14804:	ldr	lr, [sp, #80]	; 0x50
   14808:	cmn	r0, #2
   1480c:	beq	14ccc <__assert_fail@plt+0x3bd0>
   14810:	ldr	r2, [sp, #56]	; 0x38
   14814:	cmp	r0, #2
   14818:	mov	r1, #0
   1481c:	movwcc	r1, #1
   14820:	eor	r2, r2, #1
   14824:	orrs	r1, r2, r1
   14828:	bne	14874 <__assert_fail@plt+0x3778>
   1482c:	ldr	r1, [sp, #40]	; 0x28
   14830:	ldr	r2, [sp, #36]	; 0x24
   14834:	add	ip, r2, r1
   14838:	mov	r2, #1
   1483c:	ldrb	r3, [ip, r2]
   14840:	sub	r6, r3, #94	; 0x5e
   14844:	cmp	r6, #30
   14848:	bhi	1485c <__assert_fail@plt+0x3760>
   1484c:	mov	r4, #1
   14850:	mov	r1, #1073741829	; 0x40000005
   14854:	tst	r1, r4, lsl r6
   14858:	bne	14dd0 <__assert_fail@plt+0x3cd4>
   1485c:	sub	r3, r3, #91	; 0x5b
   14860:	cmp	r3, #2
   14864:	bcc	14dd0 <__assert_fail@plt+0x3cd4>
   14868:	add	r2, r2, #1
   1486c:	cmp	r2, r0
   14870:	bcc	1483c <__assert_fail@plt+0x3740>
   14874:	ldr	r6, [sp, #40]	; 0x28
   14878:	add	r6, r0, r6
   1487c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14880:	bl	10f4c <iswprint@plt>
   14884:	cmp	r0, #0
   14888:	sub	r4, fp, #40	; 0x28
   1488c:	movwne	r0, #1
   14890:	and	sl, sl, r0
   14894:	mov	r0, r4
   14898:	bl	10ef8 <mbsinit@plt>
   1489c:	ldr	lr, [sp, #80]	; 0x50
   148a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   148a4:	cmp	r0, #0
   148a8:	beq	147d8 <__assert_fail@plt+0x36dc>
   148ac:	b	14d0c <__assert_fail@plt+0x3c10>
   148b0:	mvn	lr, #0
   148b4:	mov	r9, #0
   148b8:	b	14430 <__assert_fail@plt+0x3334>
   148bc:	ldr	r0, [sp, #24]
   148c0:	cmp	r0, #0
   148c4:	beq	1497c <__assert_fail@plt+0x3880>
   148c8:	add	r0, r7, #2
   148cc:	cmp	r0, lr
   148d0:	bcs	1497c <__assert_fail@plt+0x3880>
   148d4:	add	r1, ip, r7
   148d8:	ldrb	r1, [r1, #1]
   148dc:	cmp	r1, #63	; 0x3f
   148e0:	bne	1497c <__assert_fail@plt+0x3880>
   148e4:	ldrb	r5, [ip, r0]
   148e8:	sub	r1, r5, #33	; 0x21
   148ec:	cmp	r1, #29
   148f0:	bhi	1497c <__assert_fail@plt+0x3880>
   148f4:	movw	r3, #20929	; 0x51c1
   148f8:	mov	r2, #1
   148fc:	movt	r3, #14336	; 0x3800
   14900:	tst	r3, r2, lsl r1
   14904:	beq	1497c <__assert_fail@plt+0x3880>
   14908:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1490c:	tst	r1, #1
   14910:	bne	14ee4 <__assert_fail@plt+0x3de8>
   14914:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14918:	mov	r7, r0
   1491c:	cmp	r8, r1
   14920:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14924:	movcc	r1, #63	; 0x3f
   14928:	strbcc	r1, [r2, r8]
   1492c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14930:	add	r1, r8, #1
   14934:	cmp	r1, r2
   14938:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1493c:	movcc	r2, #34	; 0x22
   14940:	strbcc	r2, [r3, r1]
   14944:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14948:	add	r1, r8, #2
   1494c:	cmp	r1, r2
   14950:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14954:	movcc	r2, #34	; 0x22
   14958:	strbcc	r2, [r3, r1]
   1495c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14960:	add	r1, r8, #3
   14964:	add	r8, r8, #4
   14968:	cmp	r1, r2
   1496c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14970:	movcc	r2, #63	; 0x3f
   14974:	strbcc	r2, [r3, r1]
   14978:	b	14980 <__assert_fail@plt+0x3884>
   1497c:	mov	r5, #63	; 0x3f
   14980:	mov	sl, #0
   14984:	b	14430 <__assert_fail@plt+0x3334>
   14988:	str	r0, [sp, #40]	; 0x28
   1498c:	add	r0, r2, r7
   14990:	str	r6, [sp, #76]	; 0x4c
   14994:	add	r1, r7, #1
   14998:	ldr	lr, [sp, #80]	; 0x50
   1499c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   149a0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   149a4:	mov	r3, #0
   149a8:	str	r0, [sp, #36]	; 0x24
   149ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   149b0:	b	14a44 <__assert_fail@plt+0x3948>
   149b4:	str	r0, [sp, #76]	; 0x4c
   149b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   149bc:	cmp	r9, #0
   149c0:	movwne	r9, #1
   149c4:	mvn	r7, r0
   149c8:	orr	r7, r7, r9
   149cc:	tst	r7, #1
   149d0:	bne	14a20 <__assert_fail@plt+0x3924>
   149d4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   149d8:	cmp	r8, r6
   149dc:	bcs	149f4 <__assert_fail@plt+0x38f8>
   149e0:	ldr	r7, [fp, #-56]	; 0xffffffc8
   149e4:	mov	r2, r4
   149e8:	mov	r4, #39	; 0x27
   149ec:	strb	r4, [r7, r8]
   149f0:	mov	r4, r2
   149f4:	add	r7, r8, #1
   149f8:	cmp	r7, r6
   149fc:	bcs	14a14 <__assert_fail@plt+0x3918>
   14a00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14a04:	mov	r2, r4
   14a08:	mov	r4, #39	; 0x27
   14a0c:	strb	r4, [r0, r7]
   14a10:	mov	r4, r2
   14a14:	add	r8, r8, #2
   14a18:	mov	r0, #0
   14a1c:	b	14a28 <__assert_fail@plt+0x392c>
   14a20:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14a24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14a28:	cmp	r8, r6
   14a2c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14a30:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14a34:	strbcc	r5, [r2, r8]
   14a38:	add	r8, r8, #1
   14a3c:	ldrb	r5, [ip, r1]
   14a40:	add	r1, r1, #1
   14a44:	ldr	r2, [sp, #40]	; 0x28
   14a48:	tst	r2, #1
   14a4c:	beq	14a88 <__assert_fail@plt+0x398c>
   14a50:	ldr	r2, [sp, #76]	; 0x4c
   14a54:	str	r0, [fp, #-48]	; 0xffffffd0
   14a58:	tst	r2, #1
   14a5c:	beq	14a80 <__assert_fail@plt+0x3984>
   14a60:	cmp	r8, r6
   14a64:	bcs	14a7c <__assert_fail@plt+0x3980>
   14a68:	ldr	r6, [fp, #-56]	; 0xffffffc8
   14a6c:	mov	r2, r4
   14a70:	mov	r4, #92	; 0x5c
   14a74:	strb	r4, [r6, r8]
   14a78:	mov	r4, r2
   14a7c:	add	r8, r8, #1
   14a80:	mov	r0, #0
   14a84:	b	14b7c <__assert_fail@plt+0x3a80>
   14a88:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14a8c:	tst	r2, #1
   14a90:	bne	14ddc <__assert_fail@plt+0x3ce0>
   14a94:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14a98:	cmp	r7, #2
   14a9c:	movwne	r3, #1
   14aa0:	orr	r3, r3, r0
   14aa4:	tst	r3, #1
   14aa8:	bne	14b04 <__assert_fail@plt+0x3a08>
   14aac:	cmp	r8, r6
   14ab0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14ab4:	movcc	r3, #39	; 0x27
   14ab8:	strbcc	r3, [r2, r8]
   14abc:	add	r3, r8, #1
   14ac0:	cmp	r3, r6
   14ac4:	bcs	14adc <__assert_fail@plt+0x39e0>
   14ac8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14acc:	mov	r7, r4
   14ad0:	mov	r4, #36	; 0x24
   14ad4:	strb	r4, [r2, r3]
   14ad8:	mov	r4, r7
   14adc:	add	r3, r8, #2
   14ae0:	cmp	r3, r6
   14ae4:	bcs	14afc <__assert_fail@plt+0x3a00>
   14ae8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14aec:	mov	r7, r4
   14af0:	mov	r4, #39	; 0x27
   14af4:	strb	r4, [r2, r3]
   14af8:	mov	r4, r7
   14afc:	add	r8, r8, #3
   14b00:	mov	r0, #1
   14b04:	cmp	r8, r6
   14b08:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14b0c:	movcc	r3, #92	; 0x5c
   14b10:	strbcc	r3, [r2, r8]
   14b14:	add	r3, r8, #1
   14b18:	cmp	r3, r6
   14b1c:	bcs	14b3c <__assert_fail@plt+0x3a40>
   14b20:	mov	r2, r4
   14b24:	and	r7, r5, #192	; 0xc0
   14b28:	mov	r4, #48	; 0x30
   14b2c:	orr	r7, r4, r7, lsr #6
   14b30:	mov	r4, r2
   14b34:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b38:	strb	r7, [r2, r3]
   14b3c:	add	r3, r8, #2
   14b40:	cmp	r3, r6
   14b44:	bcs	14b64 <__assert_fail@plt+0x3a68>
   14b48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b4c:	mov	r6, r4
   14b50:	lsr	r7, r5, #3
   14b54:	mov	r4, #6
   14b58:	bfi	r7, r4, #3, #29
   14b5c:	mov	r4, r6
   14b60:	strb	r7, [r2, r3]
   14b64:	str	r0, [fp, #-48]	; 0xffffffd0
   14b68:	ldr	r0, [sp, #76]	; 0x4c
   14b6c:	mov	r3, #6
   14b70:	add	r8, r8, #3
   14b74:	bfi	r5, r3, #3, #29
   14b78:	mov	r3, #1
   14b7c:	ldr	r2, [sp, #36]	; 0x24
   14b80:	and	r9, r3, #1
   14b84:	cmp	r2, r1
   14b88:	bhi	149b4 <__assert_fail@plt+0x38b8>
   14b8c:	cmp	r9, #0
   14b90:	sub	r7, r1, #1
   14b94:	mov	r0, r5
   14b98:	movwne	r9, #1
   14b9c:	cmp	r9, #0
   14ba0:	bne	14be4 <__assert_fail@plt+0x3ae8>
   14ba4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14ba8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14bac:	tst	r5, #1
   14bb0:	beq	14754 <__assert_fail@plt+0x3658>
   14bb4:	cmp	r8, r6
   14bb8:	mov	r5, #0
   14bbc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14bc0:	movcc	r1, #39	; 0x27
   14bc4:	strbcc	r1, [r2, r8]
   14bc8:	add	r1, r8, #1
   14bcc:	add	r8, r8, #2
   14bd0:	cmp	r1, r6
   14bd4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14bd8:	movcc	r2, #39	; 0x27
   14bdc:	strbcc	r2, [r3, r1]
   14be0:	b	14754 <__assert_fail@plt+0x3658>
   14be4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14be8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14bec:	b	14754 <__assert_fail@plt+0x3658>
   14bf0:	cmp	r8, r1
   14bf4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14bf8:	movcc	r0, #39	; 0x27
   14bfc:	strbcc	r0, [r2, r8]
   14c00:	add	r0, r8, #1
   14c04:	cmp	r0, r1
   14c08:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14c0c:	movcc	r2, #36	; 0x24
   14c10:	strbcc	r2, [r3, r0]
   14c14:	add	r0, r8, #2
   14c18:	cmp	r0, r1
   14c1c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14c20:	movcc	r2, #39	; 0x27
   14c24:	strbcc	r2, [r3, r0]
   14c28:	add	r0, r8, #3
   14c2c:	mov	r3, #1
   14c30:	cmp	r0, r1
   14c34:	add	r8, r0, #1
   14c38:	str	r3, [fp, #-48]	; 0xffffffd0
   14c3c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14c40:	movcc	r1, #92	; 0x5c
   14c44:	strbcc	r1, [r2, r0]
   14c48:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14c4c:	cmp	r1, #2
   14c50:	beq	14cb4 <__assert_fail@plt+0x3bb8>
   14c54:	add	r1, r7, #1
   14c58:	mov	sl, #0
   14c5c:	mov	r9, #1
   14c60:	mov	r5, #48	; 0x30
   14c64:	cmp	r1, lr
   14c68:	bcs	14430 <__assert_fail@plt+0x3334>
   14c6c:	ldrb	r1, [ip, r1]
   14c70:	sub	r1, r1, #48	; 0x30
   14c74:	uxtb	r1, r1
   14c78:	cmp	r1, #9
   14c7c:	bhi	14430 <__assert_fail@plt+0x3334>
   14c80:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14c84:	cmp	r8, r1
   14c88:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14c8c:	movcc	r1, #48	; 0x30
   14c90:	strbcc	r1, [r2, r8]
   14c94:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14c98:	add	r1, r0, #2
   14c9c:	add	r8, r0, #3
   14ca0:	cmp	r1, r2
   14ca4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14ca8:	movcc	r2, #48	; 0x30
   14cac:	strbcc	r2, [r3, r1]
   14cb0:	b	14430 <__assert_fail@plt+0x3334>
   14cb4:	mov	r0, #48	; 0x30
   14cb8:	mov	r9, #1
   14cbc:	mov	sl, #0
   14cc0:	b	146c8 <__assert_fail@plt+0x35cc>
   14cc4:	mov	sl, #0
   14cc8:	b	14d04 <__assert_fail@plt+0x3c08>
   14ccc:	mov	sl, #0
   14cd0:	cmp	lr, r6
   14cd4:	bls	14d04 <__assert_fail@plt+0x3c08>
   14cd8:	ldr	ip, [fp, #-84]	; 0xffffffac
   14cdc:	ldr	r6, [sp, #40]	; 0x28
   14ce0:	ldr	r0, [sp, #36]	; 0x24
   14ce4:	ldrb	r0, [r0, r6]
   14ce8:	cmp	r0, #0
   14cec:	beq	14d0c <__assert_fail@plt+0x3c10>
   14cf0:	add	r6, r6, #1
   14cf4:	add	r0, r7, r6
   14cf8:	cmp	r0, lr
   14cfc:	bcc	14ce0 <__assert_fail@plt+0x3be4>
   14d00:	b	14d0c <__assert_fail@plt+0x3c10>
   14d04:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d08:	ldr	r6, [sp, #40]	; 0x28
   14d0c:	mov	r1, r6
   14d10:	ldr	r4, [sp, #20]
   14d14:	ldr	r6, [sp, #76]	; 0x4c
   14d18:	b	1460c <__assert_fail@plt+0x3510>
   14d1c:	mov	lr, r7
   14d20:	b	14d28 <__assert_fail@plt+0x3c2c>
   14d24:	mvn	lr, #0
   14d28:	ldr	r9, [fp, #-64]	; 0xffffffc0
   14d2c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14d30:	eor	r0, r9, #2
   14d34:	orr	r0, r0, r8
   14d38:	clz	r0, r0
   14d3c:	lsr	r0, r0, #5
   14d40:	tst	r1, r0
   14d44:	bne	14e40 <__assert_fail@plt+0x3d44>
   14d48:	mov	r0, r1
   14d4c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14d50:	cmp	r9, #2
   14d54:	movwne	r1, #1
   14d58:	orr	r0, r0, r1
   14d5c:	tst	r0, #1
   14d60:	bne	14e80 <__assert_fail@plt+0x3d84>
   14d64:	ldr	r0, [sp, #52]	; 0x34
   14d68:	ldr	r1, [sp, #68]	; 0x44
   14d6c:	str	lr, [sp, #80]	; 0x50
   14d70:	eor	r0, r0, #1
   14d74:	tst	r0, #1
   14d78:	bne	14e80 <__assert_fail@plt+0x3d84>
   14d7c:	tst	r4, #1
   14d80:	bne	14e48 <__assert_fail@plt+0x3d4c>
   14d84:	mov	r7, #0
   14d88:	cmp	r1, #0
   14d8c:	beq	14e78 <__assert_fail@plt+0x3d7c>
   14d90:	ldr	r0, [sp, #84]	; 0x54
   14d94:	mov	r3, #0
   14d98:	cmp	r6, #0
   14d9c:	mov	r2, #0
   14da0:	mov	r4, r1
   14da4:	str	r3, [fp, #-72]	; 0xffffffb8
   14da8:	beq	13ee4 <__assert_fail@plt+0x2de8>
   14dac:	b	14e80 <__assert_fail@plt+0x3d84>
   14db0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14db4:	b	14ddc <__assert_fail@plt+0x3ce0>
   14db8:	ldr	ip, [fp, #-84]	; 0xffffffac
   14dbc:	mov	r2, #1
   14dc0:	mov	lr, r4
   14dc4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14dc8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14dcc:	b	14de0 <__assert_fail@plt+0x3ce4>
   14dd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14dd4:	mov	r7, #2
   14dd8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14ddc:	ldr	r2, [sp, #84]	; 0x54
   14de0:	mov	r0, #0
   14de4:	ldr	r1, [fp, #12]
   14de8:	tst	r2, #1
   14dec:	mov	r2, r7
   14df0:	mov	r3, lr
   14df4:	str	r0, [sp, #8]
   14df8:	ldr	r0, [sp, #64]	; 0x40
   14dfc:	movwne	r2, #4
   14e00:	cmp	r7, #2
   14e04:	movne	r2, r7
   14e08:	str	r2, [sp]
   14e0c:	mov	r2, ip
   14e10:	bic	r1, r1, #2
   14e14:	str	r0, [sp, #12]
   14e18:	ldr	r0, [sp, #72]	; 0x48
   14e1c:	str	r1, [sp, #4]
   14e20:	mov	r1, r6
   14e24:	str	r0, [sp, #16]
   14e28:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14e2c:	bl	13e6c <__assert_fail@plt+0x2d70>
   14e30:	mov	r8, r0
   14e34:	mov	r0, r8
   14e38:	sub	sp, fp, #28
   14e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e40:	mov	r7, #2
   14e44:	b	14ddc <__assert_fail@plt+0x3ce0>
   14e48:	mov	r0, #5
   14e4c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14e50:	ldr	r3, [sp, #80]	; 0x50
   14e54:	str	r0, [sp]
   14e58:	ldr	r0, [fp, #12]
   14e5c:	str	r0, [sp, #4]
   14e60:	ldr	r0, [fp, #16]
   14e64:	str	r0, [sp, #8]
   14e68:	ldr	r0, [sp, #64]	; 0x40
   14e6c:	str	r0, [sp, #12]
   14e70:	ldr	r0, [sp, #72]	; 0x48
   14e74:	b	14e24 <__assert_fail@plt+0x3d28>
   14e78:	mov	r0, #0
   14e7c:	str	r0, [fp, #-72]	; 0xffffffb8
   14e80:	ldr	r1, [sp, #92]	; 0x5c
   14e84:	cmp	r1, #0
   14e88:	beq	14ec8 <__assert_fail@plt+0x3dcc>
   14e8c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14e90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14e94:	tst	r0, #1
   14e98:	bne	14ecc <__assert_fail@plt+0x3dd0>
   14e9c:	ldrb	r0, [r1]
   14ea0:	cmp	r0, #0
   14ea4:	beq	14ecc <__assert_fail@plt+0x3dd0>
   14ea8:	add	r1, r1, #1
   14eac:	cmp	r8, r6
   14eb0:	strbcc	r0, [r2, r8]
   14eb4:	add	r8, r8, #1
   14eb8:	ldrb	r0, [r1], #1
   14ebc:	cmp	r0, #0
   14ec0:	bne	14eac <__assert_fail@plt+0x3db0>
   14ec4:	b	14ecc <__assert_fail@plt+0x3dd0>
   14ec8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14ecc:	cmp	r8, r6
   14ed0:	movcc	r0, #0
   14ed4:	strbcc	r0, [r2, r8]
   14ed8:	b	14e34 <__assert_fail@plt+0x3d38>
   14edc:	mov	r2, #1
   14ee0:	b	14dc4 <__assert_fail@plt+0x3cc8>
   14ee4:	mov	r7, #5
   14ee8:	b	14dd8 <__assert_fail@plt+0x3cdc>
   14eec:	bl	110e4 <abort@plt>
   14ef0:	mov	r3, r2
   14ef4:	mov	r2, #0
   14ef8:	b	14efc <__assert_fail@plt+0x3e00>
   14efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f00:	add	fp, sp, #28
   14f04:	sub	sp, sp, #36	; 0x24
   14f08:	movw	r8, #37248	; 0x9180
   14f0c:	cmp	r3, #0
   14f10:	mov	r4, r2
   14f14:	str	r2, [sp, #24]
   14f18:	mov	r5, r1
   14f1c:	mov	r6, r0
   14f20:	str	r0, [sp, #20]
   14f24:	movt	r8, #2
   14f28:	movne	r8, r3
   14f2c:	bl	1100c <__errno_location@plt>
   14f30:	str	r0, [sp, #28]
   14f34:	cmp	r4, #0
   14f38:	add	sl, r8, #8
   14f3c:	ldm	r8, {r3, r9}
   14f40:	ldr	r7, [r0]
   14f44:	ldr	r1, [r8, #40]	; 0x28
   14f48:	ldr	r2, [r8, #44]	; 0x2c
   14f4c:	mov	r0, #0
   14f50:	orreq	r9, r9, #1
   14f54:	str	r7, [sp, #32]
   14f58:	mov	r7, r5
   14f5c:	stm	sp, {r3, r9, sl}
   14f60:	str	r1, [sp, #12]
   14f64:	str	r2, [sp, #16]
   14f68:	mov	r1, #0
   14f6c:	mov	r2, r6
   14f70:	mov	r3, r5
   14f74:	bl	13e6c <__assert_fail@plt+0x2d70>
   14f78:	add	r4, r0, #1
   14f7c:	mov	r5, r0
   14f80:	mov	r0, r4
   14f84:	bl	15c60 <__assert_fail@plt+0x4b64>
   14f88:	mov	r6, r0
   14f8c:	ldr	r0, [r8]
   14f90:	ldr	r2, [r8, #44]	; 0x2c
   14f94:	ldr	r1, [r8, #40]	; 0x28
   14f98:	mov	r3, r7
   14f9c:	stm	sp, {r0, r9, sl}
   14fa0:	str	r2, [sp, #16]
   14fa4:	str	r1, [sp, #12]
   14fa8:	mov	r0, r6
   14fac:	mov	r1, r4
   14fb0:	ldr	r2, [sp, #20]
   14fb4:	bl	13e6c <__assert_fail@plt+0x2d70>
   14fb8:	ldr	r0, [sp, #24]
   14fbc:	ldr	r1, [sp, #32]
   14fc0:	ldr	r2, [sp, #28]
   14fc4:	cmp	r0, #0
   14fc8:	str	r1, [r2]
   14fcc:	strne	r5, [r0]
   14fd0:	mov	r0, r6
   14fd4:	sub	sp, fp, #28
   14fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fe0:	add	fp, sp, #24
   14fe4:	movw	r5, #37116	; 0x90fc
   14fe8:	movw	r8, #37112	; 0x90f8
   14fec:	movt	r5, #2
   14ff0:	movt	r8, #2
   14ff4:	ldr	r0, [r5]
   14ff8:	ldr	r4, [r8]
   14ffc:	cmp	r0, #2
   15000:	blt	1502c <__assert_fail@plt+0x3f30>
   15004:	add	r7, r4, #12
   15008:	mov	r6, #0
   1500c:	ldr	r0, [r7, r6, lsl #3]
   15010:	bl	13b6c <__assert_fail@plt+0x2a70>
   15014:	ldr	r1, [r5]
   15018:	add	r2, r6, #2
   1501c:	add	r0, r6, #1
   15020:	mov	r6, r0
   15024:	cmp	r2, r1
   15028:	blt	1500c <__assert_fail@plt+0x3f10>
   1502c:	ldr	r0, [r4, #4]
   15030:	movw	r7, #37296	; 0x91b0
   15034:	movt	r7, #2
   15038:	cmp	r0, r7
   1503c:	beq	15054 <__assert_fail@plt+0x3f58>
   15040:	bl	13b6c <__assert_fail@plt+0x2a70>
   15044:	movw	r0, #37120	; 0x9100
   15048:	mov	r6, #256	; 0x100
   1504c:	movt	r0, #2
   15050:	strd	r6, [r0]
   15054:	movw	r6, #37120	; 0x9100
   15058:	movt	r6, #2
   1505c:	cmp	r4, r6
   15060:	beq	15070 <__assert_fail@plt+0x3f74>
   15064:	mov	r0, r4
   15068:	bl	13b6c <__assert_fail@plt+0x2a70>
   1506c:	str	r6, [r8]
   15070:	mov	r0, #1
   15074:	str	r0, [r5]
   15078:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1507c:	movw	r3, #37248	; 0x9180
   15080:	mvn	r2, #0
   15084:	movt	r3, #2
   15088:	b	1508c <__assert_fail@plt+0x3f90>
   1508c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15090:	add	fp, sp, #28
   15094:	sub	sp, sp, #44	; 0x2c
   15098:	mov	r7, r3
   1509c:	str	r2, [sp, #36]	; 0x24
   150a0:	str	r1, [sp, #32]
   150a4:	mov	r5, r0
   150a8:	bl	1100c <__errno_location@plt>
   150ac:	cmp	r5, #0
   150b0:	blt	1521c <__assert_fail@plt+0x4120>
   150b4:	cmn	r5, #-2147483647	; 0x80000001
   150b8:	beq	1521c <__assert_fail@plt+0x4120>
   150bc:	movw	r8, #37116	; 0x90fc
   150c0:	movw	r4, #37112	; 0x90f8
   150c4:	str	r0, [sp, #28]
   150c8:	ldr	r0, [r0]
   150cc:	movt	r8, #2
   150d0:	movt	r4, #2
   150d4:	ldr	r1, [r8]
   150d8:	ldr	r6, [r4]
   150dc:	str	r0, [sp, #24]
   150e0:	cmp	r1, r5
   150e4:	ble	150f0 <__assert_fail@plt+0x3ff4>
   150e8:	mov	sl, r6
   150ec:	b	15158 <__assert_fail@plt+0x405c>
   150f0:	movw	r9, #37120	; 0x9100
   150f4:	mov	r0, #8
   150f8:	add	r2, r5, #1
   150fc:	str	r1, [fp, #-32]	; 0xffffffe0
   15100:	mvn	r3, #-2147483648	; 0x80000000
   15104:	movt	r9, #2
   15108:	str	r0, [sp]
   1510c:	sub	r2, r2, r1
   15110:	sub	r1, fp, #32
   15114:	subs	r0, r6, r9
   15118:	movne	r0, r6
   1511c:	bl	15d90 <__assert_fail@plt+0x4c94>
   15120:	cmp	r6, r9
   15124:	mov	sl, r0
   15128:	str	r0, [r4]
   1512c:	ldrdeq	r0, [r9]
   15130:	stmeq	sl, {r0, r1}
   15134:	ldr	r1, [r8]
   15138:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1513c:	add	r0, sl, r1, lsl #3
   15140:	sub	r1, r2, r1
   15144:	lsl	r2, r1, #3
   15148:	mov	r1, #0
   1514c:	bl	11024 <memset@plt>
   15150:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15154:	str	r0, [r8]
   15158:	mov	r9, sl
   1515c:	ldr	r6, [r9, r5, lsl #3]!
   15160:	ldr	r4, [r9, #4]!
   15164:	ldm	r7, {r0, r1}
   15168:	ldr	r2, [r7, #40]	; 0x28
   1516c:	ldr	r3, [r7, #44]	; 0x2c
   15170:	orr	r8, r1, #1
   15174:	add	r1, r7, #8
   15178:	stm	sp, {r0, r8}
   1517c:	add	r0, sp, #8
   15180:	str	r1, [sp, #20]
   15184:	stm	r0, {r1, r2, r3}
   15188:	mov	r0, r4
   1518c:	mov	r1, r6
   15190:	ldr	r2, [sp, #32]
   15194:	ldr	r3, [sp, #36]	; 0x24
   15198:	bl	13e6c <__assert_fail@plt+0x2d70>
   1519c:	cmp	r6, r0
   151a0:	bhi	15204 <__assert_fail@plt+0x4108>
   151a4:	add	r6, r0, #1
   151a8:	movw	r0, #37296	; 0x91b0
   151ac:	movt	r0, #2
   151b0:	str	r6, [sl, r5, lsl #3]
   151b4:	cmp	r4, r0
   151b8:	beq	151c4 <__assert_fail@plt+0x40c8>
   151bc:	mov	r0, r4
   151c0:	bl	13b6c <__assert_fail@plt+0x2a70>
   151c4:	mov	r0, r6
   151c8:	bl	15c60 <__assert_fail@plt+0x4b64>
   151cc:	str	r0, [r9]
   151d0:	mov	r4, r0
   151d4:	add	r3, sp, #8
   151d8:	ldr	r0, [r7]
   151dc:	ldr	r1, [r7, #40]	; 0x28
   151e0:	ldr	r2, [r7, #44]	; 0x2c
   151e4:	stm	sp, {r0, r8}
   151e8:	ldr	r0, [sp, #20]
   151ec:	stm	r3, {r0, r1, r2}
   151f0:	mov	r0, r4
   151f4:	mov	r1, r6
   151f8:	ldr	r2, [sp, #32]
   151fc:	ldr	r3, [sp, #36]	; 0x24
   15200:	bl	13e6c <__assert_fail@plt+0x2d70>
   15204:	ldr	r0, [sp, #28]
   15208:	ldr	r1, [sp, #24]
   1520c:	str	r1, [r0]
   15210:	mov	r0, r4
   15214:	sub	sp, fp, #28
   15218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1521c:	bl	110e4 <abort@plt>
   15220:	movw	r3, #37248	; 0x9180
   15224:	movt	r3, #2
   15228:	b	1508c <__assert_fail@plt+0x3f90>
   1522c:	movw	r3, #37248	; 0x9180
   15230:	mov	r1, r0
   15234:	mov	r0, #0
   15238:	mvn	r2, #0
   1523c:	movt	r3, #2
   15240:	b	1508c <__assert_fail@plt+0x3f90>
   15244:	movw	r3, #37248	; 0x9180
   15248:	mov	r2, r1
   1524c:	mov	r1, r0
   15250:	mov	r0, #0
   15254:	movt	r3, #2
   15258:	b	1508c <__assert_fail@plt+0x3f90>
   1525c:	push	{fp, lr}
   15260:	mov	fp, sp
   15264:	sub	sp, sp, #48	; 0x30
   15268:	vmov.i32	q8, #0	; 0x00000000
   1526c:	mov	ip, #32
   15270:	mov	r3, sp
   15274:	mov	lr, r2
   15278:	cmp	r1, #10
   1527c:	add	r2, r3, #16
   15280:	vst1.64	{d16-d17}, [r3], ip
   15284:	vst1.64	{d16-d17}, [r3]
   15288:	vst1.64	{d16-d17}, [r2]
   1528c:	beq	152ac <__assert_fail@plt+0x41b0>
   15290:	str	r1, [sp]
   15294:	mov	r3, sp
   15298:	mov	r1, lr
   1529c:	mvn	r2, #0
   152a0:	bl	1508c <__assert_fail@plt+0x3f90>
   152a4:	mov	sp, fp
   152a8:	pop	{fp, pc}
   152ac:	bl	110e4 <abort@plt>
   152b0:	push	{r4, sl, fp, lr}
   152b4:	add	fp, sp, #8
   152b8:	sub	sp, sp, #48	; 0x30
   152bc:	mov	ip, r3
   152c0:	mov	r3, sp
   152c4:	vmov.i32	q8, #0	; 0x00000000
   152c8:	mov	lr, #32
   152cc:	cmp	r1, #10
   152d0:	add	r4, r3, #16
   152d4:	vst1.64	{d16-d17}, [r3], lr
   152d8:	vst1.64	{d16-d17}, [r3]
   152dc:	vst1.64	{d16-d17}, [r4]
   152e0:	beq	15300 <__assert_fail@plt+0x4204>
   152e4:	str	r1, [sp]
   152e8:	mov	r1, r2
   152ec:	mov	r3, sp
   152f0:	mov	r2, ip
   152f4:	bl	1508c <__assert_fail@plt+0x3f90>
   152f8:	sub	sp, fp, #8
   152fc:	pop	{r4, sl, fp, pc}
   15300:	bl	110e4 <abort@plt>
   15304:	mov	r2, r1
   15308:	mov	r1, r0
   1530c:	mov	r0, #0
   15310:	b	1525c <__assert_fail@plt+0x4160>
   15314:	mov	r3, r2
   15318:	mov	r2, r1
   1531c:	mov	r1, r0
   15320:	mov	r0, #0
   15324:	b	152b0 <__assert_fail@plt+0x41b4>
   15328:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1532c:	add	fp, sp, #24
   15330:	sub	sp, sp, #48	; 0x30
   15334:	movw	r8, #37248	; 0x9180
   15338:	mov	lr, r0
   1533c:	mov	r3, sp
   15340:	mov	ip, r1
   15344:	movt	r8, #2
   15348:	mov	r1, r3
   1534c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   15350:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   15354:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   15358:	stm	r1, {r0, r4, r5, r6, r7, r9}
   1535c:	ubfx	r0, r2, #5, #3
   15360:	and	r2, r2, #31
   15364:	mov	r4, #1
   15368:	add	r0, r3, r0, lsl #2
   1536c:	ldr	r1, [r0, #8]
   15370:	bic	r4, r4, r1, lsr r2
   15374:	eor	r1, r1, r4, lsl r2
   15378:	mov	r2, ip
   1537c:	str	r1, [r0, #8]
   15380:	mov	r0, #0
   15384:	mov	r1, lr
   15388:	bl	1508c <__assert_fail@plt+0x3f90>
   1538c:	sub	sp, fp, #24
   15390:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15394:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15398:	add	fp, sp, #24
   1539c:	sub	sp, sp, #48	; 0x30
   153a0:	movw	lr, #37248	; 0x9180
   153a4:	mov	ip, r0
   153a8:	mov	r3, sp
   153ac:	movt	lr, #2
   153b0:	mov	r2, r3
   153b4:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   153b8:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   153bc:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   153c0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   153c4:	ubfx	r0, r1, #5, #3
   153c8:	and	r1, r1, #31
   153cc:	mov	r7, #1
   153d0:	add	r0, r3, r0, lsl #2
   153d4:	ldr	r2, [r0, #8]
   153d8:	bic	r7, r7, r2, lsr r1
   153dc:	eor	r1, r2, r7, lsl r1
   153e0:	mvn	r2, #0
   153e4:	str	r1, [r0, #8]
   153e8:	mov	r0, #0
   153ec:	mov	r1, ip
   153f0:	bl	1508c <__assert_fail@plt+0x3f90>
   153f4:	sub	sp, fp, #24
   153f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153fc:	push	{r4, r5, r6, r7, fp, lr}
   15400:	add	fp, sp, #16
   15404:	sub	sp, sp, #48	; 0x30
   15408:	movw	lr, #37248	; 0x9180
   1540c:	mov	ip, r0
   15410:	mov	r3, sp
   15414:	movt	lr, #2
   15418:	mov	r2, r3
   1541c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   15420:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15424:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   15428:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1542c:	mov	r1, ip
   15430:	mvn	r2, #0
   15434:	ldr	r0, [sp, #12]
   15438:	orr	r0, r0, #67108864	; 0x4000000
   1543c:	str	r0, [sp, #12]
   15440:	mov	r0, #0
   15444:	bl	1508c <__assert_fail@plt+0x3f90>
   15448:	sub	sp, fp, #16
   1544c:	pop	{r4, r5, r6, r7, fp, pc}
   15450:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15454:	add	fp, sp, #24
   15458:	sub	sp, sp, #48	; 0x30
   1545c:	movw	r8, #37248	; 0x9180
   15460:	mov	ip, r1
   15464:	mov	lr, r0
   15468:	mov	r3, sp
   1546c:	movt	r8, #2
   15470:	mov	r2, r3
   15474:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   15478:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1547c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   15480:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15484:	mov	r1, lr
   15488:	mov	r2, ip
   1548c:	ldr	r0, [sp, #12]
   15490:	orr	r0, r0, #67108864	; 0x4000000
   15494:	str	r0, [sp, #12]
   15498:	mov	r0, #0
   1549c:	bl	1508c <__assert_fail@plt+0x3f90>
   154a0:	sub	sp, fp, #24
   154a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154ac:	add	fp, sp, #24
   154b0:	sub	sp, sp, #96	; 0x60
   154b4:	mov	lr, sp
   154b8:	vmov.i32	q8, #0	; 0x00000000
   154bc:	mov	ip, r2
   154c0:	cmp	r1, #10
   154c4:	add	r3, lr, #16
   154c8:	mov	r2, lr
   154cc:	vst1.64	{d16-d17}, [r3]
   154d0:	mov	r3, #28
   154d4:	vst1.64	{d16-d17}, [r2], r3
   154d8:	vst1.32	{d16-d17}, [r2]
   154dc:	beq	1551c <__assert_fail@plt+0x4420>
   154e0:	str	r1, [sp, #48]	; 0x30
   154e4:	add	r3, sp, #48	; 0x30
   154e8:	ldm	lr!, {r2, r4, r5, r6, r7}
   154ec:	add	r1, r3, #4
   154f0:	stmia	r1!, {r2, r4, r5, r6, r7}
   154f4:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   154f8:	stm	r1, {r2, r4, r5, r6, r7, r8}
   154fc:	mvn	r2, #0
   15500:	ldr	r1, [sp, #60]	; 0x3c
   15504:	orr	r1, r1, #67108864	; 0x4000000
   15508:	str	r1, [sp, #60]	; 0x3c
   1550c:	mov	r1, ip
   15510:	bl	1508c <__assert_fail@plt+0x3f90>
   15514:	sub	sp, fp, #24
   15518:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1551c:	bl	110e4 <abort@plt>
   15520:	push	{fp, lr}
   15524:	mov	fp, sp
   15528:	sub	sp, sp, #8
   1552c:	mvn	ip, #0
   15530:	str	ip, [sp]
   15534:	bl	15540 <__assert_fail@plt+0x4444>
   15538:	mov	sp, fp
   1553c:	pop	{fp, pc}
   15540:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15544:	add	fp, sp, #24
   15548:	sub	sp, sp, #48	; 0x30
   1554c:	movw	ip, #37248	; 0x9180
   15550:	mov	lr, r3
   15554:	mov	r3, sp
   15558:	cmp	r1, #0
   1555c:	movt	ip, #2
   15560:	cmpne	r2, #0
   15564:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   15568:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1556c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   15570:	stm	r3, {r4, r5, r6, r7, r8, r9}
   15574:	mov	r3, #10
   15578:	str	r3, [sp]
   1557c:	bne	15584 <__assert_fail@plt+0x4488>
   15580:	bl	110e4 <abort@plt>
   15584:	ldr	ip, [fp, #8]
   15588:	str	r2, [sp, #44]	; 0x2c
   1558c:	str	r1, [sp, #40]	; 0x28
   15590:	mov	r3, sp
   15594:	mov	r1, lr
   15598:	mov	r2, ip
   1559c:	bl	1508c <__assert_fail@plt+0x3f90>
   155a0:	sub	sp, fp, #24
   155a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155a8:	push	{fp, lr}
   155ac:	mov	fp, sp
   155b0:	sub	sp, sp, #8
   155b4:	mov	r3, r2
   155b8:	mov	r2, r1
   155bc:	mov	r1, r0
   155c0:	mvn	r0, #0
   155c4:	str	r0, [sp]
   155c8:	mov	r0, #0
   155cc:	bl	15540 <__assert_fail@plt+0x4444>
   155d0:	mov	sp, fp
   155d4:	pop	{fp, pc}
   155d8:	push	{fp, lr}
   155dc:	mov	fp, sp
   155e0:	sub	sp, sp, #8
   155e4:	mov	ip, r2
   155e8:	mov	r2, r1
   155ec:	mov	r1, r0
   155f0:	str	r3, [sp]
   155f4:	mov	r0, #0
   155f8:	mov	r3, ip
   155fc:	bl	15540 <__assert_fail@plt+0x4444>
   15600:	mov	sp, fp
   15604:	pop	{fp, pc}
   15608:	movw	r3, #37128	; 0x9108
   1560c:	movt	r3, #2
   15610:	b	1508c <__assert_fail@plt+0x3f90>
   15614:	movw	r3, #37128	; 0x9108
   15618:	mov	r2, r1
   1561c:	mov	r1, r0
   15620:	mov	r0, #0
   15624:	movt	r3, #2
   15628:	b	1508c <__assert_fail@plt+0x3f90>
   1562c:	movw	r3, #37128	; 0x9108
   15630:	mvn	r2, #0
   15634:	movt	r3, #2
   15638:	b	1508c <__assert_fail@plt+0x3f90>
   1563c:	movw	r3, #37128	; 0x9108
   15640:	mov	r1, r0
   15644:	mov	r0, #0
   15648:	mvn	r2, #0
   1564c:	movt	r3, #2
   15650:	b	1508c <__assert_fail@plt+0x3f90>
   15654:	push	{r4, r5, fp, lr}
   15658:	add	fp, sp, #8
   1565c:	mov	r5, r0
   15660:	mov	r4, r1
   15664:	mov	r0, #0
   15668:	mov	r2, #5
   1566c:	mov	r1, r5
   15670:	bl	10f28 <dcgettext@plt>
   15674:	cmp	r0, r5
   15678:	popne	{r4, r5, fp, pc}
   1567c:	bl	16884 <__assert_fail@plt+0x5788>
   15680:	ldrb	r1, [r0]
   15684:	and	r1, r1, #223	; 0xdf
   15688:	cmp	r1, #71	; 0x47
   1568c:	beq	156f4 <__assert_fail@plt+0x45f8>
   15690:	cmp	r1, #85	; 0x55
   15694:	bne	15718 <__assert_fail@plt+0x461c>
   15698:	ldrb	r1, [r0, #1]
   1569c:	and	r1, r1, #223	; 0xdf
   156a0:	cmp	r1, #84	; 0x54
   156a4:	bne	15718 <__assert_fail@plt+0x461c>
   156a8:	ldrb	r1, [r0, #2]
   156ac:	and	r1, r1, #223	; 0xdf
   156b0:	cmp	r1, #70	; 0x46
   156b4:	ldrbeq	r1, [r0, #3]
   156b8:	cmpeq	r1, #45	; 0x2d
   156bc:	bne	15718 <__assert_fail@plt+0x461c>
   156c0:	ldrb	r1, [r0, #4]
   156c4:	cmp	r1, #56	; 0x38
   156c8:	ldrbeq	r0, [r0, #5]
   156cc:	cmpeq	r0, #0
   156d0:	bne	15718 <__assert_fail@plt+0x461c>
   156d4:	ldrb	r1, [r5]
   156d8:	movw	r2, #31717	; 0x7be5
   156dc:	movw	r0, #31721	; 0x7be9
   156e0:	movt	r2, #1
   156e4:	movt	r0, #1
   156e8:	cmp	r1, #96	; 0x60
   156ec:	moveq	r0, r2
   156f0:	pop	{r4, r5, fp, pc}
   156f4:	ldrb	r1, [r0, #1]
   156f8:	and	r1, r1, #223	; 0xdf
   156fc:	cmp	r1, #66	; 0x42
   15700:	bne	15718 <__assert_fail@plt+0x461c>
   15704:	ldrb	r1, [r0, #2]
   15708:	cmp	r1, #49	; 0x31
   1570c:	ldrbeq	r1, [r0, #3]
   15710:	cmpeq	r1, #56	; 0x38
   15714:	beq	15734 <__assert_fail@plt+0x4638>
   15718:	movw	r1, #31711	; 0x7bdf
   1571c:	movw	r0, #31715	; 0x7be3
   15720:	cmp	r4, #9
   15724:	movt	r1, #1
   15728:	movt	r0, #1
   1572c:	moveq	r0, r1
   15730:	pop	{r4, r5, fp, pc}
   15734:	ldrb	r1, [r0, #4]
   15738:	cmp	r1, #48	; 0x30
   1573c:	ldrbeq	r1, [r0, #5]
   15740:	cmpeq	r1, #51	; 0x33
   15744:	bne	15718 <__assert_fail@plt+0x461c>
   15748:	ldrb	r1, [r0, #6]
   1574c:	cmp	r1, #48	; 0x30
   15750:	ldrbeq	r0, [r0, #7]
   15754:	cmpeq	r0, #0
   15758:	bne	15718 <__assert_fail@plt+0x461c>
   1575c:	ldrb	r1, [r5]
   15760:	movw	r2, #31725	; 0x7bed
   15764:	movw	r0, #31729	; 0x7bf1
   15768:	movt	r2, #1
   1576c:	movt	r0, #1
   15770:	b	156e8 <__assert_fail@plt+0x45ec>
   15774:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15778:	add	fp, sp, #24
   1577c:	sub	sp, sp, #32
   15780:	ldr	r6, [fp, #12]
   15784:	ldr	r7, [fp, #8]
   15788:	mov	r4, r2
   1578c:	mov	r8, r0
   15790:	cmp	r1, #0
   15794:	beq	157bc <__assert_fail@plt+0x46c0>
   15798:	movw	r2, #31816	; 0x7c48
   1579c:	mov	r5, r1
   157a0:	str	r3, [sp, #4]
   157a4:	str	r4, [sp]
   157a8:	mov	r0, r8
   157ac:	mov	r1, #1
   157b0:	movt	r2, #1
   157b4:	mov	r3, r5
   157b8:	b	157d4 <__assert_fail@plt+0x46d8>
   157bc:	movw	r2, #31828	; 0x7c54
   157c0:	str	r3, [sp]
   157c4:	mov	r0, r8
   157c8:	mov	r1, #1
   157cc:	mov	r3, r4
   157d0:	movt	r2, #1
   157d4:	bl	11048 <__fprintf_chk@plt>
   157d8:	movw	r1, #31835	; 0x7c5b
   157dc:	mov	r0, #0
   157e0:	mov	r2, #5
   157e4:	movt	r1, #1
   157e8:	bl	10f28 <dcgettext@plt>
   157ec:	movw	r2, #32553	; 0x7f29
   157f0:	mov	r3, r0
   157f4:	movw	r0, #2022	; 0x7e6
   157f8:	mov	r1, #1
   157fc:	str	r0, [sp]
   15800:	movt	r2, #1
   15804:	mov	r0, r8
   15808:	bl	11048 <__fprintf_chk@plt>
   1580c:	movw	r4, #29854	; 0x749e
   15810:	mov	r1, r8
   15814:	movt	r4, #1
   15818:	mov	r0, r4
   1581c:	bl	10e8c <fputs_unlocked@plt>
   15820:	movw	r1, #31839	; 0x7c5f
   15824:	mov	r0, #0
   15828:	mov	r2, #5
   1582c:	movt	r1, #1
   15830:	bl	10f28 <dcgettext@plt>
   15834:	movw	r3, #32010	; 0x7d0a
   15838:	mov	r2, r0
   1583c:	mov	r0, r8
   15840:	mov	r1, #1
   15844:	movt	r3, #1
   15848:	bl	11048 <__fprintf_chk@plt>
   1584c:	mov	r0, r4
   15850:	mov	r1, r8
   15854:	bl	10e8c <fputs_unlocked@plt>
   15858:	cmp	r6, #9
   1585c:	bhi	158c0 <__assert_fail@plt+0x47c4>
   15860:	add	r0, pc, #0
   15864:	ldr	pc, [r0, r6, lsl #2]
   15868:	muleq	r1, r8, sl
   1586c:	muleq	r1, r0, r8
   15870:	andeq	r5, r1, ip, asr #17
   15874:	strdeq	r5, [r1], -r4
   15878:	andeq	r5, r1, ip, lsl r9
   1587c:	andeq	r5, r1, r4, asr #18
   15880:	andeq	r5, r1, ip, ror #18
   15884:	andeq	r5, r1, r4, lsr #19
   15888:	andeq	r5, r1, r4, asr #20
   1588c:	andeq	r5, r1, ip, ror #19
   15890:	movw	r1, #32044	; 0x7d2c
   15894:	mov	r0, #0
   15898:	mov	r2, #5
   1589c:	movt	r1, #1
   158a0:	bl	10f28 <dcgettext@plt>
   158a4:	ldr	r3, [r7]
   158a8:	mov	r2, r0
   158ac:	mov	r0, r8
   158b0:	mov	r1, #1
   158b4:	sub	sp, fp, #24
   158b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   158bc:	b	11048 <__fprintf_chk@plt>
   158c0:	movw	r1, #32363	; 0x7e6b
   158c4:	movt	r1, #1
   158c8:	b	159f4 <__assert_fail@plt+0x48f8>
   158cc:	movw	r1, #32060	; 0x7d3c
   158d0:	mov	r0, #0
   158d4:	mov	r2, #5
   158d8:	movt	r1, #1
   158dc:	bl	10f28 <dcgettext@plt>
   158e0:	mov	r2, r0
   158e4:	ldr	r3, [r7]
   158e8:	ldr	r0, [r7, #4]
   158ec:	str	r0, [sp]
   158f0:	b	159e0 <__assert_fail@plt+0x48e4>
   158f4:	movw	r1, #32083	; 0x7d53
   158f8:	mov	r0, #0
   158fc:	mov	r2, #5
   15900:	movt	r1, #1
   15904:	bl	10f28 <dcgettext@plt>
   15908:	ldr	r3, [r7]
   1590c:	mov	r2, r0
   15910:	ldmib	r7, {r0, r1}
   15914:	stm	sp, {r0, r1}
   15918:	b	159e0 <__assert_fail@plt+0x48e4>
   1591c:	movw	r1, #32111	; 0x7d6f
   15920:	mov	r0, #0
   15924:	mov	r2, #5
   15928:	movt	r1, #1
   1592c:	bl	10f28 <dcgettext@plt>
   15930:	ldr	r3, [r7]
   15934:	mov	r2, r0
   15938:	ldmib	r7, {r0, r1, r7}
   1593c:	stm	sp, {r0, r1, r7}
   15940:	b	159e0 <__assert_fail@plt+0x48e4>
   15944:	movw	r1, #32143	; 0x7d8f
   15948:	mov	r0, #0
   1594c:	mov	r2, #5
   15950:	movt	r1, #1
   15954:	bl	10f28 <dcgettext@plt>
   15958:	ldr	r3, [r7]
   1595c:	mov	r2, r0
   15960:	ldmib	r7, {r0, r1, r6, r7}
   15964:	stm	sp, {r0, r1, r6, r7}
   15968:	b	159e0 <__assert_fail@plt+0x48e4>
   1596c:	movw	r1, #32179	; 0x7db3
   15970:	mov	r0, #0
   15974:	mov	r2, #5
   15978:	movt	r1, #1
   1597c:	bl	10f28 <dcgettext@plt>
   15980:	ldr	r3, [r7]
   15984:	mov	r2, r0
   15988:	ldmib	r7, {r0, r1, r6}
   1598c:	ldr	r5, [r7, #16]
   15990:	ldr	r7, [r7, #20]
   15994:	stm	sp, {r0, r1, r6}
   15998:	str	r5, [sp, #12]
   1599c:	str	r7, [sp, #16]
   159a0:	b	159e0 <__assert_fail@plt+0x48e4>
   159a4:	movw	r1, #32219	; 0x7ddb
   159a8:	mov	r0, #0
   159ac:	mov	r2, #5
   159b0:	movt	r1, #1
   159b4:	bl	10f28 <dcgettext@plt>
   159b8:	ldr	r3, [r7]
   159bc:	mov	r2, r0
   159c0:	ldmib	r7, {r0, r1, r6}
   159c4:	ldr	r5, [r7, #16]
   159c8:	ldr	r4, [r7, #20]
   159cc:	ldr	r7, [r7, #24]
   159d0:	stm	sp, {r0, r1, r6}
   159d4:	str	r5, [sp, #12]
   159d8:	str	r4, [sp, #16]
   159dc:	str	r7, [sp, #20]
   159e0:	mov	r0, r8
   159e4:	mov	r1, #1
   159e8:	b	15a94 <__assert_fail@plt+0x4998>
   159ec:	movw	r1, #32311	; 0x7e37
   159f0:	movt	r1, #1
   159f4:	mov	r0, #0
   159f8:	mov	r2, #5
   159fc:	bl	10f28 <dcgettext@plt>
   15a00:	mov	ip, r0
   15a04:	ldr	r3, [r7]
   15a08:	ldr	r0, [r7, #4]
   15a0c:	ldr	r1, [r7, #8]
   15a10:	ldr	r6, [r7, #12]
   15a14:	ldr	r5, [r7, #16]
   15a18:	ldr	r4, [r7, #20]
   15a1c:	ldr	r2, [r7, #24]
   15a20:	ldr	lr, [r7, #28]
   15a24:	ldr	r7, [r7, #32]
   15a28:	stm	sp, {r0, r1, r6}
   15a2c:	str	r5, [sp, #12]
   15a30:	str	r4, [sp, #16]
   15a34:	str	r2, [sp, #20]
   15a38:	str	lr, [sp, #24]
   15a3c:	str	r7, [sp, #28]
   15a40:	b	15a88 <__assert_fail@plt+0x498c>
   15a44:	movw	r1, #32263	; 0x7e07
   15a48:	mov	r0, #0
   15a4c:	mov	r2, #5
   15a50:	movt	r1, #1
   15a54:	bl	10f28 <dcgettext@plt>
   15a58:	mov	ip, r0
   15a5c:	ldr	r3, [r7]
   15a60:	ldmib	r7, {r0, r1, r6}
   15a64:	ldr	r5, [r7, #16]
   15a68:	ldr	r4, [r7, #20]
   15a6c:	ldr	r2, [r7, #24]
   15a70:	ldr	r7, [r7, #28]
   15a74:	stm	sp, {r0, r1, r6}
   15a78:	str	r5, [sp, #12]
   15a7c:	str	r4, [sp, #16]
   15a80:	str	r2, [sp, #20]
   15a84:	str	r7, [sp, #24]
   15a88:	mov	r0, r8
   15a8c:	mov	r1, #1
   15a90:	mov	r2, ip
   15a94:	bl	11048 <__fprintf_chk@plt>
   15a98:	sub	sp, fp, #24
   15a9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15aa0:	push	{r4, sl, fp, lr}
   15aa4:	add	fp, sp, #8
   15aa8:	sub	sp, sp, #8
   15aac:	ldr	ip, [fp, #8]
   15ab0:	mov	lr, #0
   15ab4:	ldr	r4, [ip, lr, lsl #2]
   15ab8:	add	lr, lr, #1
   15abc:	cmp	r4, #0
   15ac0:	bne	15ab4 <__assert_fail@plt+0x49b8>
   15ac4:	sub	r4, lr, #1
   15ac8:	str	ip, [sp]
   15acc:	str	r4, [sp, #4]
   15ad0:	bl	15774 <__assert_fail@plt+0x4678>
   15ad4:	sub	sp, fp, #8
   15ad8:	pop	{r4, sl, fp, pc}
   15adc:	push	{r4, r5, fp, lr}
   15ae0:	add	fp, sp, #8
   15ae4:	sub	sp, sp, #48	; 0x30
   15ae8:	ldr	r4, [fp, #8]
   15aec:	mov	ip, #0
   15af0:	add	lr, sp, #8
   15af4:	ldr	r5, [r4]
   15af8:	cmp	r5, #0
   15afc:	str	r5, [lr, ip, lsl #2]
   15b00:	beq	15b14 <__assert_fail@plt+0x4a18>
   15b04:	add	ip, ip, #1
   15b08:	add	r4, r4, #4
   15b0c:	cmp	ip, #10
   15b10:	bcc	15af4 <__assert_fail@plt+0x49f8>
   15b14:	str	lr, [sp]
   15b18:	str	ip, [sp, #4]
   15b1c:	bl	15774 <__assert_fail@plt+0x4678>
   15b20:	sub	sp, fp, #8
   15b24:	pop	{r4, r5, fp, pc}
   15b28:	push	{fp, lr}
   15b2c:	mov	fp, sp
   15b30:	sub	sp, sp, #8
   15b34:	add	ip, fp, #8
   15b38:	str	ip, [sp, #4]
   15b3c:	str	ip, [sp]
   15b40:	bl	15adc <__assert_fail@plt+0x49e0>
   15b44:	mov	sp, fp
   15b48:	pop	{fp, pc}
   15b4c:	push	{fp, lr}
   15b50:	mov	fp, sp
   15b54:	movw	r0, #37204	; 0x9154
   15b58:	movt	r0, #2
   15b5c:	ldr	r1, [r0]
   15b60:	movw	r0, #29854	; 0x749e
   15b64:	movt	r0, #1
   15b68:	bl	10e8c <fputs_unlocked@plt>
   15b6c:	movw	r1, #32423	; 0x7ea7
   15b70:	mov	r0, #0
   15b74:	mov	r2, #5
   15b78:	movt	r1, #1
   15b7c:	bl	10f28 <dcgettext@plt>
   15b80:	movw	r2, #32443	; 0x7ebb
   15b84:	mov	r1, r0
   15b88:	mov	r0, #1
   15b8c:	movt	r2, #1
   15b90:	bl	11030 <__printf_chk@plt>
   15b94:	movw	r1, #32465	; 0x7ed1
   15b98:	mov	r0, #0
   15b9c:	mov	r2, #5
   15ba0:	movt	r1, #1
   15ba4:	bl	10f28 <dcgettext@plt>
   15ba8:	movw	r2, #29329	; 0x7291
   15bac:	movw	r3, #29663	; 0x73df
   15bb0:	mov	r1, r0
   15bb4:	mov	r0, #1
   15bb8:	movt	r2, #1
   15bbc:	movt	r3, #1
   15bc0:	bl	11030 <__printf_chk@plt>
   15bc4:	movw	r1, #32485	; 0x7ee5
   15bc8:	mov	r0, #0
   15bcc:	mov	r2, #5
   15bd0:	movt	r1, #1
   15bd4:	bl	10f28 <dcgettext@plt>
   15bd8:	movw	r2, #32524	; 0x7f0c
   15bdc:	mov	r1, r0
   15be0:	mov	r0, #1
   15be4:	movt	r2, #1
   15be8:	pop	{fp, lr}
   15bec:	b	11030 <__printf_chk@plt>
   15bf0:	b	15bf4 <__assert_fail@plt+0x4af8>
   15bf4:	push	{r4, r5, r6, sl, fp, lr}
   15bf8:	add	fp, sp, #16
   15bfc:	mov	r4, r2
   15c00:	mov	r5, r1
   15c04:	mov	r6, r0
   15c08:	bl	1691c <__assert_fail@plt+0x5820>
   15c0c:	cmp	r0, #0
   15c10:	popne	{r4, r5, r6, sl, fp, pc}
   15c14:	cmp	r6, #0
   15c18:	beq	15c2c <__assert_fail@plt+0x4b30>
   15c1c:	cmp	r5, #0
   15c20:	cmpne	r4, #0
   15c24:	bne	15c2c <__assert_fail@plt+0x4b30>
   15c28:	pop	{r4, r5, r6, sl, fp, pc}
   15c2c:	bl	16080 <__assert_fail@plt+0x4f84>
   15c30:	push	{fp, lr}
   15c34:	mov	fp, sp
   15c38:	bl	16784 <__assert_fail@plt+0x5688>
   15c3c:	cmp	r0, #0
   15c40:	popne	{fp, pc}
   15c44:	bl	16080 <__assert_fail@plt+0x4f84>
   15c48:	push	{fp, lr}
   15c4c:	mov	fp, sp
   15c50:	bl	16784 <__assert_fail@plt+0x5688>
   15c54:	cmp	r0, #0
   15c58:	popne	{fp, pc}
   15c5c:	bl	16080 <__assert_fail@plt+0x4f84>
   15c60:	push	{fp, lr}
   15c64:	mov	fp, sp
   15c68:	bl	16784 <__assert_fail@plt+0x5688>
   15c6c:	cmp	r0, #0
   15c70:	popne	{fp, pc}
   15c74:	bl	16080 <__assert_fail@plt+0x4f84>
   15c78:	push	{r4, r5, fp, lr}
   15c7c:	add	fp, sp, #8
   15c80:	mov	r4, r1
   15c84:	mov	r5, r0
   15c88:	bl	167b4 <__assert_fail@plt+0x56b8>
   15c8c:	cmp	r0, #0
   15c90:	popne	{r4, r5, fp, pc}
   15c94:	cmp	r5, #0
   15c98:	beq	15ca8 <__assert_fail@plt+0x4bac>
   15c9c:	cmp	r4, #0
   15ca0:	bne	15ca8 <__assert_fail@plt+0x4bac>
   15ca4:	pop	{r4, r5, fp, pc}
   15ca8:	bl	16080 <__assert_fail@plt+0x4f84>
   15cac:	push	{fp, lr}
   15cb0:	mov	fp, sp
   15cb4:	cmp	r1, #0
   15cb8:	orreq	r1, r1, #1
   15cbc:	bl	167b4 <__assert_fail@plt+0x56b8>
   15cc0:	cmp	r0, #0
   15cc4:	popne	{fp, pc}
   15cc8:	bl	16080 <__assert_fail@plt+0x4f84>
   15ccc:	push	{fp, lr}
   15cd0:	mov	fp, sp
   15cd4:	clz	r3, r2
   15cd8:	lsr	ip, r3, #5
   15cdc:	clz	r3, r1
   15ce0:	lsr	r3, r3, #5
   15ce4:	orrs	r3, r3, ip
   15ce8:	movwne	r1, #1
   15cec:	movwne	r2, #1
   15cf0:	bl	1691c <__assert_fail@plt+0x5820>
   15cf4:	cmp	r0, #0
   15cf8:	popne	{fp, pc}
   15cfc:	bl	16080 <__assert_fail@plt+0x4f84>
   15d00:	push	{fp, lr}
   15d04:	mov	fp, sp
   15d08:	mov	r2, r1
   15d0c:	mov	r1, r0
   15d10:	mov	r0, #0
   15d14:	bl	1691c <__assert_fail@plt+0x5820>
   15d18:	cmp	r0, #0
   15d1c:	popne	{fp, pc}
   15d20:	bl	16080 <__assert_fail@plt+0x4f84>
   15d24:	mov	r2, r1
   15d28:	mov	r1, r0
   15d2c:	mov	r0, #0
   15d30:	b	15ccc <__assert_fail@plt+0x4bd0>
   15d34:	mov	r2, #1
   15d38:	b	15d3c <__assert_fail@plt+0x4c40>
   15d3c:	push	{r4, r5, fp, lr}
   15d40:	add	fp, sp, #8
   15d44:	ldr	r5, [r1]
   15d48:	mov	r4, r1
   15d4c:	cmp	r0, #0
   15d50:	beq	15d68 <__assert_fail@plt+0x4c6c>
   15d54:	mov	r1, #1
   15d58:	add	r1, r1, r5, lsr #1
   15d5c:	adds	r5, r5, r1
   15d60:	bcc	15d80 <__assert_fail@plt+0x4c84>
   15d64:	bl	16080 <__assert_fail@plt+0x4f84>
   15d68:	cmp	r5, #0
   15d6c:	bne	15d80 <__assert_fail@plt+0x4c84>
   15d70:	mov	r1, #64	; 0x40
   15d74:	cmp	r2, #64	; 0x40
   15d78:	udiv	r5, r1, r2
   15d7c:	addhi	r5, r5, #1
   15d80:	mov	r1, r5
   15d84:	bl	15bf4 <__assert_fail@plt+0x4af8>
   15d88:	str	r5, [r4]
   15d8c:	pop	{r4, r5, fp, pc}
   15d90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d94:	add	fp, sp, #24
   15d98:	ldr	r6, [r1]
   15d9c:	mov	r8, r1
   15da0:	ldr	r4, [fp, #8]
   15da4:	add	r1, r6, r6, asr #1
   15da8:	cmp	r1, r6
   15dac:	mvnvs	r1, #-2147483648	; 0x80000000
   15db0:	cmp	r1, r3
   15db4:	mov	r5, r1
   15db8:	movgt	r5, r3
   15dbc:	cmn	r3, #1
   15dc0:	movle	r5, r1
   15dc4:	cmn	r4, #1
   15dc8:	ble	15de8 <__assert_fail@plt+0x4cec>
   15dcc:	cmp	r4, #0
   15dd0:	beq	15e3c <__assert_fail@plt+0x4d40>
   15dd4:	cmn	r5, #1
   15dd8:	ble	15e10 <__assert_fail@plt+0x4d14>
   15ddc:	mvn	r7, #-2147483648	; 0x80000000
   15de0:	udiv	r1, r7, r4
   15de4:	b	15e04 <__assert_fail@plt+0x4d08>
   15de8:	cmn	r5, #1
   15dec:	ble	15e2c <__assert_fail@plt+0x4d30>
   15df0:	cmn	r4, #1
   15df4:	beq	15e3c <__assert_fail@plt+0x4d40>
   15df8:	mov	r1, #-2147483648	; 0x80000000
   15dfc:	mvn	r7, #-2147483648	; 0x80000000
   15e00:	sdiv	r1, r1, r4
   15e04:	cmp	r1, r5
   15e08:	bge	15e3c <__assert_fail@plt+0x4d40>
   15e0c:	b	15e4c <__assert_fail@plt+0x4d50>
   15e10:	beq	15e3c <__assert_fail@plt+0x4d40>
   15e14:	mov	r1, #-2147483648	; 0x80000000
   15e18:	mvn	r7, #-2147483648	; 0x80000000
   15e1c:	sdiv	r1, r1, r5
   15e20:	cmp	r1, r4
   15e24:	bge	15e3c <__assert_fail@plt+0x4d40>
   15e28:	b	15e4c <__assert_fail@plt+0x4d50>
   15e2c:	mvn	r7, #-2147483648	; 0x80000000
   15e30:	sdiv	r1, r7, r4
   15e34:	cmp	r5, r1
   15e38:	blt	15e4c <__assert_fail@plt+0x4d50>
   15e3c:	mul	r1, r5, r4
   15e40:	mov	r7, #64	; 0x40
   15e44:	cmp	r1, #63	; 0x3f
   15e48:	bgt	15e54 <__assert_fail@plt+0x4d58>
   15e4c:	sdiv	r5, r7, r4
   15e50:	mul	r1, r5, r4
   15e54:	cmp	r0, #0
   15e58:	moveq	r7, #0
   15e5c:	streq	r7, [r8]
   15e60:	sub	r7, r5, r6
   15e64:	cmp	r7, r2
   15e68:	bge	15f0c <__assert_fail@plt+0x4e10>
   15e6c:	add	r5, r6, r2
   15e70:	mov	r2, #0
   15e74:	mov	r1, #0
   15e78:	cmp	r5, r3
   15e7c:	movwgt	r2, #1
   15e80:	cmn	r3, #1
   15e84:	movwgt	r1, #1
   15e88:	cmp	r5, r6
   15e8c:	bvs	15ef4 <__assert_fail@plt+0x4df8>
   15e90:	ands	r1, r1, r2
   15e94:	bne	15ef4 <__assert_fail@plt+0x4df8>
   15e98:	cmn	r4, #1
   15e9c:	ble	15ebc <__assert_fail@plt+0x4dc0>
   15ea0:	cmp	r4, #0
   15ea4:	beq	15f08 <__assert_fail@plt+0x4e0c>
   15ea8:	cmn	r5, #1
   15eac:	ble	15ee0 <__assert_fail@plt+0x4de4>
   15eb0:	mvn	r1, #-2147483648	; 0x80000000
   15eb4:	udiv	r1, r1, r4
   15eb8:	b	15ed4 <__assert_fail@plt+0x4dd8>
   15ebc:	cmn	r5, #1
   15ec0:	ble	15ef8 <__assert_fail@plt+0x4dfc>
   15ec4:	cmn	r4, #1
   15ec8:	beq	15f08 <__assert_fail@plt+0x4e0c>
   15ecc:	mov	r1, #-2147483648	; 0x80000000
   15ed0:	sdiv	r1, r1, r4
   15ed4:	cmp	r1, r5
   15ed8:	bge	15f08 <__assert_fail@plt+0x4e0c>
   15edc:	b	15ef4 <__assert_fail@plt+0x4df8>
   15ee0:	beq	15f08 <__assert_fail@plt+0x4e0c>
   15ee4:	mov	r1, #-2147483648	; 0x80000000
   15ee8:	sdiv	r1, r1, r5
   15eec:	cmp	r1, r4
   15ef0:	bge	15f08 <__assert_fail@plt+0x4e0c>
   15ef4:	bl	16080 <__assert_fail@plt+0x4f84>
   15ef8:	mvn	r1, #-2147483648	; 0x80000000
   15efc:	sdiv	r1, r1, r4
   15f00:	cmp	r5, r1
   15f04:	blt	15ef4 <__assert_fail@plt+0x4df8>
   15f08:	mul	r1, r5, r4
   15f0c:	bl	15c78 <__assert_fail@plt+0x4b7c>
   15f10:	str	r5, [r8]
   15f14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f18:	push	{fp, lr}
   15f1c:	mov	fp, sp
   15f20:	mov	r1, #1
   15f24:	bl	16730 <__assert_fail@plt+0x5634>
   15f28:	cmp	r0, #0
   15f2c:	popne	{fp, pc}
   15f30:	bl	16080 <__assert_fail@plt+0x4f84>
   15f34:	push	{fp, lr}
   15f38:	mov	fp, sp
   15f3c:	bl	16730 <__assert_fail@plt+0x5634>
   15f40:	cmp	r0, #0
   15f44:	popne	{fp, pc}
   15f48:	bl	16080 <__assert_fail@plt+0x4f84>
   15f4c:	push	{fp, lr}
   15f50:	mov	fp, sp
   15f54:	mov	r1, #1
   15f58:	bl	16730 <__assert_fail@plt+0x5634>
   15f5c:	cmp	r0, #0
   15f60:	popne	{fp, pc}
   15f64:	bl	16080 <__assert_fail@plt+0x4f84>
   15f68:	push	{fp, lr}
   15f6c:	mov	fp, sp
   15f70:	bl	16730 <__assert_fail@plt+0x5634>
   15f74:	cmp	r0, #0
   15f78:	popne	{fp, pc}
   15f7c:	bl	16080 <__assert_fail@plt+0x4f84>
   15f80:	push	{r4, r5, r6, sl, fp, lr}
   15f84:	add	fp, sp, #16
   15f88:	mov	r5, r0
   15f8c:	mov	r0, r1
   15f90:	mov	r4, r1
   15f94:	bl	16784 <__assert_fail@plt+0x5688>
   15f98:	cmp	r0, #0
   15f9c:	beq	15fb8 <__assert_fail@plt+0x4ebc>
   15fa0:	mov	r1, r5
   15fa4:	mov	r2, r4
   15fa8:	mov	r6, r0
   15fac:	bl	10eec <memcpy@plt>
   15fb0:	mov	r0, r6
   15fb4:	pop	{r4, r5, r6, sl, fp, pc}
   15fb8:	bl	16080 <__assert_fail@plt+0x4f84>
   15fbc:	push	{r4, r5, r6, sl, fp, lr}
   15fc0:	add	fp, sp, #16
   15fc4:	mov	r5, r0
   15fc8:	mov	r0, r1
   15fcc:	mov	r4, r1
   15fd0:	bl	16784 <__assert_fail@plt+0x5688>
   15fd4:	cmp	r0, #0
   15fd8:	beq	15ff4 <__assert_fail@plt+0x4ef8>
   15fdc:	mov	r1, r5
   15fe0:	mov	r2, r4
   15fe4:	mov	r6, r0
   15fe8:	bl	10eec <memcpy@plt>
   15fec:	mov	r0, r6
   15ff0:	pop	{r4, r5, r6, sl, fp, pc}
   15ff4:	bl	16080 <__assert_fail@plt+0x4f84>
   15ff8:	push	{r4, r5, r6, sl, fp, lr}
   15ffc:	add	fp, sp, #16
   16000:	mov	r5, r0
   16004:	add	r0, r1, #1
   16008:	mov	r4, r1
   1600c:	bl	16784 <__assert_fail@plt+0x5688>
   16010:	cmp	r0, #0
   16014:	beq	1603c <__assert_fail@plt+0x4f40>
   16018:	mov	r6, r0
   1601c:	mov	r0, #0
   16020:	mov	r1, r5
   16024:	mov	r2, r4
   16028:	strb	r0, [r6, r4]
   1602c:	mov	r0, r6
   16030:	bl	10eec <memcpy@plt>
   16034:	mov	r0, r6
   16038:	pop	{r4, r5, r6, sl, fp, pc}
   1603c:	bl	16080 <__assert_fail@plt+0x4f84>
   16040:	push	{r4, r5, r6, sl, fp, lr}
   16044:	add	fp, sp, #16
   16048:	mov	r4, r0
   1604c:	bl	10ff4 <strlen@plt>
   16050:	add	r5, r0, #1
   16054:	mov	r0, r5
   16058:	bl	16784 <__assert_fail@plt+0x5688>
   1605c:	cmp	r0, #0
   16060:	beq	1607c <__assert_fail@plt+0x4f80>
   16064:	mov	r1, r4
   16068:	mov	r2, r5
   1606c:	mov	r6, r0
   16070:	bl	10eec <memcpy@plt>
   16074:	mov	r0, r6
   16078:	pop	{r4, r5, r6, sl, fp, pc}
   1607c:	bl	16080 <__assert_fail@plt+0x4f84>
   16080:	push	{fp, lr}
   16084:	mov	fp, sp
   16088:	movw	r0, #37108	; 0x90f4
   1608c:	movw	r1, #32600	; 0x7f58
   16090:	mov	r2, #5
   16094:	movt	r0, #2
   16098:	movt	r1, #1
   1609c:	ldr	r4, [r0]
   160a0:	mov	r0, #0
   160a4:	bl	10f28 <dcgettext@plt>
   160a8:	movw	r2, #29308	; 0x727c
   160ac:	mov	r3, r0
   160b0:	mov	r0, r4
   160b4:	mov	r1, #0
   160b8:	movt	r2, #1
   160bc:	bl	10f94 <error@plt>
   160c0:	bl	110e4 <abort@plt>
   160c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160c8:	add	fp, sp, #28
   160cc:	sub	sp, sp, #28
   160d0:	cmp	r2, #37	; 0x25
   160d4:	str	r3, [sp, #12]
   160d8:	bcs	165e8 <__assert_fail@plt+0x54ec>
   160dc:	ldr	sl, [fp, #8]
   160e0:	mov	r4, r2
   160e4:	mov	r6, r1
   160e8:	mov	r5, r0
   160ec:	bl	1100c <__errno_location@plt>
   160f0:	add	r8, sp, #24
   160f4:	cmp	r6, #0
   160f8:	mov	r7, r0
   160fc:	mov	r0, #0
   16100:	mov	r2, r4
   16104:	movne	r8, r6
   16108:	str	r0, [r7]
   1610c:	mov	r0, r5
   16110:	mov	r1, r8
   16114:	bl	11060 <strtoimax@plt>
   16118:	str	r1, [sp, #20]
   1611c:	str	r0, [sp, #16]
   16120:	ldr	r4, [r8]
   16124:	cmp	r4, r5
   16128:	beq	16154 <__assert_fail@plt+0x5058>
   1612c:	mov	r6, r0
   16130:	ldr	r0, [r7]
   16134:	mov	r9, r1
   16138:	cmp	r0, #0
   1613c:	beq	16190 <__assert_fail@plt+0x5094>
   16140:	mov	r7, #4
   16144:	cmp	r0, #34	; 0x22
   16148:	bne	165dc <__assert_fail@plt+0x54e0>
   1614c:	mov	r7, #1
   16150:	b	16194 <__assert_fail@plt+0x5098>
   16154:	cmp	sl, #0
   16158:	mov	r7, #4
   1615c:	ldrbne	r1, [r5]
   16160:	cmpne	r1, #0
   16164:	beq	165dc <__assert_fail@plt+0x54e0>
   16168:	mov	r0, sl
   1616c:	bl	11000 <strchr@plt>
   16170:	cmp	r0, #0
   16174:	beq	165dc <__assert_fail@plt+0x54e0>
   16178:	mov	r9, #0
   1617c:	mov	r6, #1
   16180:	mov	r7, #0
   16184:	str	r9, [sp, #20]
   16188:	str	r6, [sp, #16]
   1618c:	b	1619c <__assert_fail@plt+0x50a0>
   16190:	mov	r7, r0
   16194:	cmp	sl, #0
   16198:	beq	16240 <__assert_fail@plt+0x5144>
   1619c:	ldrb	r5, [r4]
   161a0:	cmp	r5, #0
   161a4:	beq	16248 <__assert_fail@plt+0x514c>
   161a8:	mov	r0, sl
   161ac:	mov	r1, r5
   161b0:	bl	11000 <strchr@plt>
   161b4:	cmp	r0, #0
   161b8:	beq	16250 <__assert_fail@plt+0x5154>
   161bc:	sub	r0, r5, #69	; 0x45
   161c0:	str	r7, [sp, #4]
   161c4:	mov	r1, #1
   161c8:	mov	r7, #1024	; 0x400
   161cc:	cmp	r0, #21
   161d0:	str	r1, [sp, #8]
   161d4:	bhi	161ec <__assert_fail@plt+0x50f0>
   161d8:	movw	r2, #35141	; 0x8945
   161dc:	mov	r1, #1
   161e0:	movt	r2, #48	; 0x30
   161e4:	tst	r2, r1, lsl r0
   161e8:	bne	16208 <__assert_fail@plt+0x510c>
   161ec:	sub	r0, r5, #103	; 0x67
   161f0:	cmp	r0, #13
   161f4:	bhi	16260 <__assert_fail@plt+0x5164>
   161f8:	mov	r1, #1
   161fc:	movw	r2, #8273	; 0x2051
   16200:	tst	r2, r1, lsl r0
   16204:	beq	16260 <__assert_fail@plt+0x5164>
   16208:	ldr	r0, [fp, #8]
   1620c:	mov	r1, #48	; 0x30
   16210:	bl	11000 <strchr@plt>
   16214:	cmp	r0, #0
   16218:	beq	16260 <__assert_fail@plt+0x5164>
   1621c:	ldrb	r0, [r4, #1]
   16220:	ldr	sl, [sp, #12]
   16224:	cmp	r0, #66	; 0x42
   16228:	cmpne	r0, #68	; 0x44
   1622c:	bne	16334 <__assert_fail@plt+0x5238>
   16230:	mov	r0, #2
   16234:	mov	r7, #1000	; 0x3e8
   16238:	str	r0, [sp, #8]
   1623c:	b	16264 <__assert_fail@plt+0x5168>
   16240:	ldr	r0, [sp, #12]
   16244:	b	16258 <__assert_fail@plt+0x515c>
   16248:	ldr	sl, [sp, #12]
   1624c:	b	165d8 <__assert_fail@plt+0x54dc>
   16250:	ldr	r0, [sp, #12]
   16254:	orr	r7, r7, #2
   16258:	stm	r0, {r6, r9}
   1625c:	b	165dc <__assert_fail@plt+0x54e0>
   16260:	ldr	sl, [sp, #12]
   16264:	cmp	r5, #89	; 0x59
   16268:	bgt	162d0 <__assert_fail@plt+0x51d4>
   1626c:	sub	r0, r5, #66	; 0x42
   16270:	cmp	r0, #14
   16274:	bhi	16354 <__assert_fail@plt+0x5258>
   16278:	add	r1, pc, #0
   1627c:	ldr	pc, [r1, r0, lsl #2]
   16280:			; <UNDEFINED> instruction: 0x000162bc
   16284:	andeq	r6, r1, ip, ror #8
   16288:	andeq	r6, r1, ip, ror #8
   1628c:	andeq	r6, r1, ip, ror r4
   16290:	andeq	r6, r1, ip, ror #8
   16294:			; <UNDEFINED> instruction: 0x000163b0
   16298:	andeq	r6, r1, ip, ror #8
   1629c:	andeq	r6, r1, ip, ror #8
   162a0:	andeq	r6, r1, ip, ror #8
   162a4:	ldrdeq	r6, [r1], -r8
   162a8:	andeq	r6, r1, ip, ror #8
   162ac:	andeq	r6, r1, ip, ror #7
   162b0:	andeq	r6, r1, ip, ror #8
   162b4:	andeq	r6, r1, ip, ror #8
   162b8:	andeq	r6, r1, r4, lsr #9
   162bc:	cmn	r9, #1
   162c0:	ble	164cc <__assert_fail@plt+0x53d0>
   162c4:	cmp	r9, #2097152	; 0x200000
   162c8:	blt	164f8 <__assert_fail@plt+0x53fc>
   162cc:	b	16578 <__assert_fail@plt+0x547c>
   162d0:	cmp	r5, #115	; 0x73
   162d4:	bgt	1638c <__assert_fail@plt+0x5290>
   162d8:	sub	r0, r5, #98	; 0x62
   162dc:	cmp	r0, #11
   162e0:	bhi	1643c <__assert_fail@plt+0x5340>
   162e4:	add	r1, pc, #4
   162e8:	mov	r4, #0
   162ec:	ldr	pc, [r1, r0, lsl #2]
   162f0:	andeq	r6, r1, r0, lsr #6
   162f4:	andeq	r6, r1, ip, lsr #11
   162f8:	andeq	r6, r1, ip, ror #8
   162fc:	andeq	r6, r1, ip, ror #8
   16300:	andeq	r6, r1, ip, ror #8
   16304:			; <UNDEFINED> instruction: 0x000163b0
   16308:	andeq	r6, r1, ip, ror #8
   1630c:	andeq	r6, r1, ip, ror #8
   16310:	andeq	r6, r1, ip, ror #8
   16314:	ldrdeq	r6, [r1], -r8
   16318:	andeq	r6, r1, ip, ror #8
   1631c:	andeq	r6, r1, ip, ror #7
   16320:	cmn	r9, #1
   16324:	ble	1650c <__assert_fail@plt+0x5410>
   16328:	cmp	r9, #4194304	; 0x400000
   1632c:	blt	16538 <__assert_fail@plt+0x543c>
   16330:	b	16578 <__assert_fail@plt+0x547c>
   16334:	cmp	r0, #105	; 0x69
   16338:	bne	16264 <__assert_fail@plt+0x5168>
   1633c:	ldrb	r0, [r4, #2]
   16340:	mov	r1, #1
   16344:	cmp	r0, #66	; 0x42
   16348:	movweq	r1, #3
   1634c:	str	r1, [sp, #8]
   16350:	b	16264 <__assert_fail@plt+0x5168>
   16354:	cmp	r5, #84	; 0x54
   16358:	beq	16414 <__assert_fail@plt+0x5318>
   1635c:	cmp	r5, #89	; 0x59
   16360:	bne	1646c <__assert_fail@plt+0x5370>
   16364:	mov	r4, #0
   16368:	mvn	r6, #7
   1636c:	add	r5, sp, #16
   16370:	mov	r0, r5
   16374:	mov	r1, r7
   16378:	bl	16608 <__assert_fail@plt+0x550c>
   1637c:	orr	r4, r0, r4
   16380:	adds	r6, r6, #1
   16384:	bne	16370 <__assert_fail@plt+0x5274>
   16388:	b	165ac <__assert_fail@plt+0x54b0>
   1638c:	cmp	r5, #116	; 0x74
   16390:	beq	16414 <__assert_fail@plt+0x5318>
   16394:	cmp	r5, #119	; 0x77
   16398:	bne	1646c <__assert_fail@plt+0x5370>
   1639c:	cmn	r9, #1
   163a0:	ble	1654c <__assert_fail@plt+0x5450>
   163a4:	cmp	r9, #1073741824	; 0x40000000
   163a8:	bge	16578 <__assert_fail@plt+0x547c>
   163ac:	b	16594 <__assert_fail@plt+0x5498>
   163b0:	mov	r4, #0
   163b4:	mvn	r6, #2
   163b8:	add	r5, sp, #16
   163bc:	mov	r0, r5
   163c0:	mov	r1, r7
   163c4:	bl	16608 <__assert_fail@plt+0x550c>
   163c8:	orr	r4, r0, r4
   163cc:	adds	r6, r6, #1
   163d0:	bne	163bc <__assert_fail@plt+0x52c0>
   163d4:	b	165ac <__assert_fail@plt+0x54b0>
   163d8:	add	r0, sp, #16
   163dc:	mov	r1, r7
   163e0:	bl	16608 <__assert_fail@plt+0x550c>
   163e4:	mov	r4, r0
   163e8:	b	165ac <__assert_fail@plt+0x54b0>
   163ec:	mov	r4, #0
   163f0:	mvn	r6, #1
   163f4:	add	r5, sp, #16
   163f8:	mov	r0, r5
   163fc:	mov	r1, r7
   16400:	bl	16608 <__assert_fail@plt+0x550c>
   16404:	orr	r4, r0, r4
   16408:	adds	r6, r6, #1
   1640c:	bne	163f8 <__assert_fail@plt+0x52fc>
   16410:	b	165ac <__assert_fail@plt+0x54b0>
   16414:	mov	r4, #0
   16418:	mvn	r6, #3
   1641c:	add	r5, sp, #16
   16420:	mov	r0, r5
   16424:	mov	r1, r7
   16428:	bl	16608 <__assert_fail@plt+0x550c>
   1642c:	orr	r4, r0, r4
   16430:	adds	r6, r6, #1
   16434:	bne	16420 <__assert_fail@plt+0x5324>
   16438:	b	165ac <__assert_fail@plt+0x54b0>
   1643c:	cmp	r5, #90	; 0x5a
   16440:	bne	1646c <__assert_fail@plt+0x5370>
   16444:	mov	r4, #0
   16448:	mvn	r6, #6
   1644c:	add	r5, sp, #16
   16450:	mov	r0, r5
   16454:	mov	r1, r7
   16458:	bl	16608 <__assert_fail@plt+0x550c>
   1645c:	orr	r4, r0, r4
   16460:	adds	r6, r6, #1
   16464:	bne	16450 <__assert_fail@plt+0x5354>
   16468:	b	165ac <__assert_fail@plt+0x54b0>
   1646c:	stm	sl, {r6, r9}
   16470:	ldr	r7, [sp, #4]
   16474:	orr	r7, r7, #2
   16478:	b	165dc <__assert_fail@plt+0x54e0>
   1647c:	mov	r4, #0
   16480:	mvn	r6, #5
   16484:	add	r5, sp, #16
   16488:	mov	r0, r5
   1648c:	mov	r1, r7
   16490:	bl	16608 <__assert_fail@plt+0x550c>
   16494:	orr	r4, r0, r4
   16498:	adds	r6, r6, #1
   1649c:	bne	16488 <__assert_fail@plt+0x538c>
   164a0:	b	165ac <__assert_fail@plt+0x54b0>
   164a4:	mov	r4, #0
   164a8:	mvn	r6, #4
   164ac:	add	r5, sp, #16
   164b0:	mov	r0, r5
   164b4:	mov	r1, r7
   164b8:	bl	16608 <__assert_fail@plt+0x550c>
   164bc:	orr	r4, r0, r4
   164c0:	adds	r6, r6, #1
   164c4:	bne	164b0 <__assert_fail@plt+0x53b4>
   164c8:	b	165ac <__assert_fail@plt+0x54b0>
   164cc:	and	r0, r6, r9
   164d0:	cmn	r0, #1
   164d4:	beq	164f8 <__assert_fail@plt+0x53fc>
   164d8:	mov	r0, #0
   164dc:	mov	r1, #-2147483648	; 0x80000000
   164e0:	mov	r2, r6
   164e4:	mov	r3, r9
   164e8:	bl	16a50 <__assert_fail@plt+0x5954>
   164ec:	subs	r0, r0, #1024	; 0x400
   164f0:	sbcs	r0, r1, #0
   164f4:	blt	16578 <__assert_fail@plt+0x547c>
   164f8:	lsl	r0, r9, #10
   164fc:	lsl	r1, r6, #10
   16500:	mov	r4, #0
   16504:	orr	r0, r0, r6, lsr #22
   16508:	b	165a4 <__assert_fail@plt+0x54a8>
   1650c:	and	r0, r6, r9
   16510:	cmn	r0, #1
   16514:	beq	16538 <__assert_fail@plt+0x543c>
   16518:	mov	r0, #0
   1651c:	mov	r1, #-2147483648	; 0x80000000
   16520:	mov	r2, r6
   16524:	mov	r3, r9
   16528:	bl	16a50 <__assert_fail@plt+0x5954>
   1652c:	subs	r0, r0, #512	; 0x200
   16530:	sbcs	r0, r1, #0
   16534:	blt	16578 <__assert_fail@plt+0x547c>
   16538:	lsl	r0, r9, #9
   1653c:	lsl	r1, r6, #9
   16540:	mov	r4, #0
   16544:	orr	r0, r0, r6, lsr #23
   16548:	b	165a4 <__assert_fail@plt+0x54a8>
   1654c:	and	r0, r6, r9
   16550:	cmn	r0, #1
   16554:	beq	16594 <__assert_fail@plt+0x5498>
   16558:	mov	r0, #0
   1655c:	mov	r1, #-2147483648	; 0x80000000
   16560:	mov	r2, r6
   16564:	mov	r3, r9
   16568:	bl	16a50 <__assert_fail@plt+0x5954>
   1656c:	subs	r0, r0, #2
   16570:	sbcs	r0, r1, #0
   16574:	bge	16594 <__assert_fail@plt+0x5498>
   16578:	mvn	r0, #-2147483648	; 0x80000000
   1657c:	cmp	r9, #0
   16580:	mvn	r1, #0
   16584:	mov	r4, #1
   16588:	movlt	r0, #-2147483648	; 0x80000000
   1658c:	movwlt	r1, #0
   16590:	b	165a4 <__assert_fail@plt+0x54a8>
   16594:	lsl	r0, r9, #1
   16598:	lsl	r1, r6, #1
   1659c:	mov	r4, #0
   165a0:	orr	r0, r0, r6, lsr #31
   165a4:	str	r1, [sp, #16]
   165a8:	str	r0, [sp, #20]
   165ac:	ldr	r0, [r8]
   165b0:	ldr	r2, [sp, #8]
   165b4:	ldr	r7, [sp, #4]
   165b8:	add	r1, r0, r2
   165bc:	orr	r7, r4, r7
   165c0:	str	r1, [r8]
   165c4:	ldrb	r0, [r0, r2]
   165c8:	ldr	r6, [sp, #16]
   165cc:	ldr	r9, [sp, #20]
   165d0:	cmp	r0, #0
   165d4:	orrne	r7, r7, #2
   165d8:	stm	sl, {r6, r9}
   165dc:	mov	r0, r7
   165e0:	sub	sp, fp, #28
   165e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165e8:	movw	r0, #32617	; 0x7f69
   165ec:	movw	r1, #32655	; 0x7f8f
   165f0:	movw	r3, #32671	; 0x7f9f
   165f4:	mov	r2, #85	; 0x55
   165f8:	movt	r0, #1
   165fc:	movt	r1, #1
   16600:	movt	r3, #1
   16604:	bl	110fc <__assert_fail@plt>
   16608:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1660c:	add	fp, sp, #24
   16610:	mov	r5, r1
   16614:	mov	r4, r0
   16618:	cmn	r1, #1
   1661c:	ble	16654 <__assert_fail@plt+0x5558>
   16620:	ldrd	r8, [r4]
   16624:	cmp	r5, #0
   16628:	beq	1668c <__assert_fail@plt+0x5590>
   1662c:	cmn	r9, #1
   16630:	ble	16698 <__assert_fail@plt+0x559c>
   16634:	asr	r3, r5, #31
   16638:	mvn	r0, #0
   1663c:	mvn	r1, #-2147483648	; 0x80000000
   16640:	mov	r2, r5
   16644:	bl	16a50 <__assert_fail@plt+0x5954>
   16648:	subs	r0, r0, r8
   1664c:	sbcs	r0, r1, r9
   16650:	b	166c8 <__assert_fail@plt+0x55cc>
   16654:	ldrd	r6, [r4]
   16658:	cmn	r7, #1
   1665c:	ble	166f0 <__assert_fail@plt+0x55f4>
   16660:	cmn	r5, #1
   16664:	beq	16710 <__assert_fail@plt+0x5614>
   16668:	asr	r3, r5, #31
   1666c:	mov	r0, #0
   16670:	mov	r1, #-2147483648	; 0x80000000
   16674:	mov	r2, r5
   16678:	bl	16a50 <__assert_fail@plt+0x5954>
   1667c:	subs	r0, r0, r6
   16680:	sbcs	r0, r1, r7
   16684:	blt	166d4 <__assert_fail@plt+0x55d8>
   16688:	b	16710 <__assert_fail@plt+0x5614>
   1668c:	mov	r6, r8
   16690:	mov	r7, r9
   16694:	b	16710 <__assert_fail@plt+0x5614>
   16698:	and	r0, r8, r9
   1669c:	mvn	r6, #0
   166a0:	mvn	r7, #0
   166a4:	cmn	r0, #1
   166a8:	beq	16710 <__assert_fail@plt+0x5614>
   166ac:	mov	r0, #0
   166b0:	mov	r1, #-2147483648	; 0x80000000
   166b4:	mov	r2, r8
   166b8:	mov	r3, r9
   166bc:	bl	16a50 <__assert_fail@plt+0x5954>
   166c0:	subs	r0, r0, r5
   166c4:	sbcs	r0, r1, r5, asr #31
   166c8:	mov	r7, r9
   166cc:	mov	r6, r8
   166d0:	bge	16710 <__assert_fail@plt+0x5614>
   166d4:	mvn	r1, #-2147483648	; 0x80000000
   166d8:	cmp	r7, #0
   166dc:	mvn	r2, #0
   166e0:	mov	r0, #1
   166e4:	movlt	r1, #-2147483648	; 0x80000000
   166e8:	movwlt	r2, #0
   166ec:	b	16724 <__assert_fail@plt+0x5628>
   166f0:	asr	r3, r5, #31
   166f4:	mvn	r0, #0
   166f8:	mvn	r1, #-2147483648	; 0x80000000
   166fc:	mov	r2, r5
   16700:	bl	16a50 <__assert_fail@plt+0x5954>
   16704:	subs	r0, r6, r0
   16708:	sbcs	r0, r7, r1
   1670c:	blt	166d4 <__assert_fail@plt+0x55d8>
   16710:	umull	r2, r0, r6, r5
   16714:	asr	r1, r5, #31
   16718:	mla	r0, r6, r1, r0
   1671c:	mla	r1, r7, r5, r0
   16720:	mov	r0, #0
   16724:	str	r2, [r4]
   16728:	str	r1, [r4, #4]
   1672c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16730:	clz	r2, r1
   16734:	clz	r3, r0
   16738:	lsr	r2, r2, #5
   1673c:	lsr	r3, r3, #5
   16740:	orrs	r2, r3, r2
   16744:	movwne	r1, #1
   16748:	movwne	r0, #1
   1674c:	cmp	r1, #0
   16750:	beq	16780 <__assert_fail@plt+0x5684>
   16754:	mvn	r2, #-2147483648	; 0x80000000
   16758:	udiv	r2, r2, r1
   1675c:	cmp	r2, r0
   16760:	bcs	16780 <__assert_fail@plt+0x5684>
   16764:	push	{fp, lr}
   16768:	mov	fp, sp
   1676c:	bl	1100c <__errno_location@plt>
   16770:	mov	r1, #12
   16774:	str	r1, [r0]
   16778:	mov	r0, #0
   1677c:	pop	{fp, pc}
   16780:	b	10e80 <calloc@plt>
   16784:	cmp	r0, #0
   16788:	movweq	r0, #1
   1678c:	cmn	r0, #1
   16790:	ble	16798 <__assert_fail@plt+0x569c>
   16794:	b	10fa0 <malloc@plt>
   16798:	push	{fp, lr}
   1679c:	mov	fp, sp
   167a0:	bl	1100c <__errno_location@plt>
   167a4:	mov	r1, #12
   167a8:	str	r1, [r0]
   167ac:	mov	r0, #0
   167b0:	pop	{fp, pc}
   167b4:	push	{fp, lr}
   167b8:	mov	fp, sp
   167bc:	cmp	r0, #0
   167c0:	beq	167dc <__assert_fail@plt+0x56e0>
   167c4:	cmp	r1, #0
   167c8:	beq	167e8 <__assert_fail@plt+0x56ec>
   167cc:	cmn	r1, #1
   167d0:	ble	167f0 <__assert_fail@plt+0x56f4>
   167d4:	pop	{fp, lr}
   167d8:	b	10f34 <realloc@plt>
   167dc:	mov	r0, r1
   167e0:	pop	{fp, lr}
   167e4:	b	16784 <__assert_fail@plt+0x5688>
   167e8:	bl	13b6c <__assert_fail@plt+0x2a70>
   167ec:	b	167fc <__assert_fail@plt+0x5700>
   167f0:	bl	1100c <__errno_location@plt>
   167f4:	mov	r1, #12
   167f8:	str	r1, [r0]
   167fc:	mov	r0, #0
   16800:	pop	{fp, pc}
   16804:	push	{r4, r5, r6, sl, fp, lr}
   16808:	add	fp, sp, #16
   1680c:	mov	r4, r0
   16810:	bl	10f70 <__fpending@plt>
   16814:	mov	r5, r0
   16818:	mov	r0, r4
   1681c:	bl	10f7c <ferror_unlocked@plt>
   16820:	mov	r6, r0
   16824:	mov	r0, r4
   16828:	bl	13a74 <__assert_fail@plt+0x2978>
   1682c:	cmp	r6, #0
   16830:	beq	16850 <__assert_fail@plt+0x5754>
   16834:	mvn	r4, #0
   16838:	cmp	r0, #0
   1683c:	bne	1687c <__assert_fail@plt+0x5780>
   16840:	bl	1100c <__errno_location@plt>
   16844:	mov	r1, #0
   16848:	str	r1, [r0]
   1684c:	b	1687c <__assert_fail@plt+0x5780>
   16850:	cmp	r0, #0
   16854:	mov	r4, r0
   16858:	mvnne	r4, #0
   1685c:	cmp	r5, #0
   16860:	bne	1687c <__assert_fail@plt+0x5780>
   16864:	cmp	r0, #0
   16868:	beq	1687c <__assert_fail@plt+0x5780>
   1686c:	bl	1100c <__errno_location@plt>
   16870:	ldr	r0, [r0]
   16874:	subs	r4, r0, #9
   16878:	mvnne	r4, #0
   1687c:	mov	r0, r4
   16880:	pop	{r4, r5, r6, sl, fp, pc}
   16884:	push	{fp, lr}
   16888:	mov	fp, sp
   1688c:	mov	r0, #14
   16890:	bl	1109c <nl_langinfo@plt>
   16894:	movw	r1, #29855	; 0x749f
   16898:	cmp	r0, #0
   1689c:	movt	r1, #1
   168a0:	movne	r1, r0
   168a4:	movw	r0, #32749	; 0x7fed
   168a8:	ldrb	r2, [r1]
   168ac:	movt	r0, #1
   168b0:	cmp	r2, #0
   168b4:	movne	r0, r1
   168b8:	pop	{fp, pc}
   168bc:	push	{r4, r5, r6, r7, fp, lr}
   168c0:	add	fp, sp, #16
   168c4:	sub	sp, sp, #8
   168c8:	add	r5, sp, #4
   168cc:	cmp	r0, #0
   168d0:	mov	r7, r2
   168d4:	mov	r4, r1
   168d8:	movne	r5, r0
   168dc:	mov	r0, r5
   168e0:	bl	10f88 <mbrtowc@plt>
   168e4:	mov	r6, r0
   168e8:	cmp	r7, #0
   168ec:	beq	16910 <__assert_fail@plt+0x5814>
   168f0:	cmn	r6, #2
   168f4:	bcc	16910 <__assert_fail@plt+0x5814>
   168f8:	mov	r0, #0
   168fc:	bl	16958 <__assert_fail@plt+0x585c>
   16900:	cmp	r0, #0
   16904:	ldrbeq	r0, [r4]
   16908:	moveq	r6, #1
   1690c:	streq	r0, [r5]
   16910:	mov	r0, r6
   16914:	sub	sp, fp, #16
   16918:	pop	{r4, r5, r6, r7, fp, pc}
   1691c:	cmp	r2, #0
   16920:	beq	16950 <__assert_fail@plt+0x5854>
   16924:	mvn	r3, #0
   16928:	udiv	r3, r3, r2
   1692c:	cmp	r3, r1
   16930:	bcs	16950 <__assert_fail@plt+0x5854>
   16934:	push	{fp, lr}
   16938:	mov	fp, sp
   1693c:	bl	1100c <__errno_location@plt>
   16940:	mov	r1, #12
   16944:	str	r1, [r0]
   16948:	mov	r0, #0
   1694c:	pop	{fp, pc}
   16950:	mul	r1, r2, r1
   16954:	b	167b4 <__assert_fail@plt+0x56b8>
   16958:	push	{r4, sl, fp, lr}
   1695c:	add	fp, sp, #8
   16960:	sub	sp, sp, #264	; 0x108
   16964:	add	r1, sp, #7
   16968:	movw	r2, #257	; 0x101
   1696c:	bl	169bc <__assert_fail@plt+0x58c0>
   16970:	mov	r4, #0
   16974:	cmp	r0, #0
   16978:	bne	169b0 <__assert_fail@plt+0x58b4>
   1697c:	movw	r1, #32755	; 0x7ff3
   16980:	add	r0, sp, #7
   16984:	movt	r1, #1
   16988:	bl	10ea4 <strcmp@plt>
   1698c:	cmp	r0, #0
   16990:	beq	169b0 <__assert_fail@plt+0x58b4>
   16994:	movw	r1, #32757	; 0x7ff5
   16998:	add	r0, sp, #7
   1699c:	movt	r1, #1
   169a0:	bl	10ea4 <strcmp@plt>
   169a4:	mov	r4, r0
   169a8:	cmp	r0, #0
   169ac:	movwne	r4, #1
   169b0:	mov	r0, r4
   169b4:	sub	sp, fp, #8
   169b8:	pop	{r4, sl, fp, pc}
   169bc:	push	{r4, r5, r6, r7, fp, lr}
   169c0:	add	fp, sp, #16
   169c4:	mov	r4, r1
   169c8:	mov	r1, #0
   169cc:	mov	r6, r2
   169d0:	bl	11084 <setlocale@plt>
   169d4:	cmp	r0, #0
   169d8:	beq	16a04 <__assert_fail@plt+0x5908>
   169dc:	mov	r7, r0
   169e0:	bl	10ff4 <strlen@plt>
   169e4:	cmp	r0, r6
   169e8:	bcs	16a18 <__assert_fail@plt+0x591c>
   169ec:	add	r2, r0, #1
   169f0:	mov	r0, r4
   169f4:	mov	r1, r7
   169f8:	bl	10eec <memcpy@plt>
   169fc:	mov	r5, #0
   16a00:	b	16a40 <__assert_fail@plt+0x5944>
   16a04:	cmp	r6, #0
   16a08:	mov	r5, #22
   16a0c:	movne	r0, #0
   16a10:	strbne	r0, [r4]
   16a14:	b	16a40 <__assert_fail@plt+0x5944>
   16a18:	mov	r5, #34	; 0x22
   16a1c:	cmp	r6, #0
   16a20:	beq	16a40 <__assert_fail@plt+0x5944>
   16a24:	sub	r6, r6, #1
   16a28:	mov	r0, r4
   16a2c:	mov	r1, r7
   16a30:	mov	r2, r6
   16a34:	bl	10eec <memcpy@plt>
   16a38:	mov	r0, #0
   16a3c:	strb	r0, [r4, r6]
   16a40:	mov	r0, r5
   16a44:	pop	{r4, r5, r6, r7, fp, pc}
   16a48:	mov	r1, #0
   16a4c:	b	11084 <setlocale@plt>
   16a50:	cmp	r3, #0
   16a54:	cmpeq	r2, #0
   16a58:	bne	16a7c <__assert_fail@plt+0x5980>
   16a5c:	cmp	r1, #0
   16a60:	movlt	r1, #-2147483648	; 0x80000000
   16a64:	movlt	r0, #0
   16a68:	blt	16a78 <__assert_fail@plt+0x597c>
   16a6c:	cmpeq	r0, #0
   16a70:	mvnne	r1, #-2147483648	; 0x80000000
   16a74:	mvnne	r0, #0
   16a78:	b	16b24 <__assert_fail@plt+0x5a28>
   16a7c:	sub	sp, sp, #8
   16a80:	push	{sp, lr}
   16a84:	cmp	r1, #0
   16a88:	blt	16aa8 <__assert_fail@plt+0x59ac>
   16a8c:	cmp	r3, #0
   16a90:	blt	16adc <__assert_fail@plt+0x59e0>
   16a94:	bl	16b34 <__assert_fail@plt+0x5a38>
   16a98:	ldr	lr, [sp, #4]
   16a9c:	add	sp, sp, #8
   16aa0:	pop	{r2, r3}
   16aa4:	bx	lr
   16aa8:	rsbs	r0, r0, #0
   16aac:	sbc	r1, r1, r1, lsl #1
   16ab0:	cmp	r3, #0
   16ab4:	blt	16b00 <__assert_fail@plt+0x5a04>
   16ab8:	bl	16b34 <__assert_fail@plt+0x5a38>
   16abc:	ldr	lr, [sp, #4]
   16ac0:	add	sp, sp, #8
   16ac4:	pop	{r2, r3}
   16ac8:	rsbs	r0, r0, #0
   16acc:	sbc	r1, r1, r1, lsl #1
   16ad0:	rsbs	r2, r2, #0
   16ad4:	sbc	r3, r3, r3, lsl #1
   16ad8:	bx	lr
   16adc:	rsbs	r2, r2, #0
   16ae0:	sbc	r3, r3, r3, lsl #1
   16ae4:	bl	16b34 <__assert_fail@plt+0x5a38>
   16ae8:	ldr	lr, [sp, #4]
   16aec:	add	sp, sp, #8
   16af0:	pop	{r2, r3}
   16af4:	rsbs	r0, r0, #0
   16af8:	sbc	r1, r1, r1, lsl #1
   16afc:	bx	lr
   16b00:	rsbs	r2, r2, #0
   16b04:	sbc	r3, r3, r3, lsl #1
   16b08:	bl	16b34 <__assert_fail@plt+0x5a38>
   16b0c:	ldr	lr, [sp, #4]
   16b10:	add	sp, sp, #8
   16b14:	pop	{r2, r3}
   16b18:	rsbs	r2, r2, #0
   16b1c:	sbc	r3, r3, r3, lsl #1
   16b20:	bx	lr
   16b24:	push	{r1, lr}
   16b28:	mov	r0, #8
   16b2c:	bl	10e98 <raise@plt>
   16b30:	pop	{r1, pc}
   16b34:	cmp	r1, r3
   16b38:	cmpeq	r0, r2
   16b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b40:	mov	r4, r0
   16b44:	movcc	r0, #0
   16b48:	mov	r5, r1
   16b4c:	ldr	lr, [sp, #36]	; 0x24
   16b50:	movcc	r1, r0
   16b54:	bcc	16c50 <__assert_fail@plt+0x5b54>
   16b58:	cmp	r3, #0
   16b5c:	clzeq	ip, r2
   16b60:	clzne	ip, r3
   16b64:	addeq	ip, ip, #32
   16b68:	cmp	r5, #0
   16b6c:	clzeq	r1, r4
   16b70:	addeq	r1, r1, #32
   16b74:	clzne	r1, r5
   16b78:	sub	ip, ip, r1
   16b7c:	sub	sl, ip, #32
   16b80:	lsl	r9, r3, ip
   16b84:	rsb	fp, ip, #32
   16b88:	orr	r9, r9, r2, lsl sl
   16b8c:	orr	r9, r9, r2, lsr fp
   16b90:	lsl	r8, r2, ip
   16b94:	cmp	r5, r9
   16b98:	cmpeq	r4, r8
   16b9c:	movcc	r0, #0
   16ba0:	movcc	r1, r0
   16ba4:	bcc	16bc0 <__assert_fail@plt+0x5ac4>
   16ba8:	mov	r0, #1
   16bac:	subs	r4, r4, r8
   16bb0:	lsl	r1, r0, sl
   16bb4:	orr	r1, r1, r0, lsr fp
   16bb8:	lsl	r0, r0, ip
   16bbc:	sbc	r5, r5, r9
   16bc0:	cmp	ip, #0
   16bc4:	beq	16c50 <__assert_fail@plt+0x5b54>
   16bc8:	lsr	r6, r8, #1
   16bcc:	orr	r6, r6, r9, lsl #31
   16bd0:	lsr	r7, r9, #1
   16bd4:	mov	r2, ip
   16bd8:	b	16bfc <__assert_fail@plt+0x5b00>
   16bdc:	subs	r3, r4, r6
   16be0:	sbc	r8, r5, r7
   16be4:	adds	r3, r3, r3
   16be8:	adc	r8, r8, r8
   16bec:	adds	r4, r3, #1
   16bf0:	adc	r5, r8, #0
   16bf4:	subs	r2, r2, #1
   16bf8:	beq	16c18 <__assert_fail@plt+0x5b1c>
   16bfc:	cmp	r5, r7
   16c00:	cmpeq	r4, r6
   16c04:	bcs	16bdc <__assert_fail@plt+0x5ae0>
   16c08:	adds	r4, r4, r4
   16c0c:	adc	r5, r5, r5
   16c10:	subs	r2, r2, #1
   16c14:	bne	16bfc <__assert_fail@plt+0x5b00>
   16c18:	lsr	r3, r4, ip
   16c1c:	orr	r3, r3, r5, lsl fp
   16c20:	lsr	r2, r5, ip
   16c24:	orr	r3, r3, r5, lsr sl
   16c28:	adds	r0, r0, r4
   16c2c:	mov	r4, r3
   16c30:	lsl	r3, r2, ip
   16c34:	orr	r3, r3, r4, lsl sl
   16c38:	lsl	ip, r4, ip
   16c3c:	orr	r3, r3, r4, lsr fp
   16c40:	adc	r1, r1, r5
   16c44:	subs	r0, r0, ip
   16c48:	mov	r5, r2
   16c4c:	sbc	r1, r1, r3
   16c50:	cmp	lr, #0
   16c54:	strdne	r4, [lr]
   16c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c60:	mov	r7, r0
   16c64:	ldr	r6, [pc, #72]	; 16cb4 <__assert_fail@plt+0x5bb8>
   16c68:	ldr	r5, [pc, #72]	; 16cb8 <__assert_fail@plt+0x5bbc>
   16c6c:	add	r6, pc, r6
   16c70:	add	r5, pc, r5
   16c74:	sub	r6, r6, r5
   16c78:	mov	r8, r1
   16c7c:	mov	r9, r2
   16c80:	bl	10e60 <calloc@plt-0x20>
   16c84:	asrs	r6, r6, #2
   16c88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c8c:	mov	r4, #0
   16c90:	add	r4, r4, #1
   16c94:	ldr	r3, [r5], #4
   16c98:	mov	r2, r9
   16c9c:	mov	r1, r8
   16ca0:	mov	r0, r7
   16ca4:	blx	r3
   16ca8:	cmp	r6, r4
   16cac:	bne	16c90 <__assert_fail@plt+0x5b94>
   16cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cb4:	muleq	r1, r8, r2
   16cb8:	muleq	r1, r0, r2
   16cbc:	bx	lr
   16cc0:	ldr	r3, [pc, #12]	; 16cd4 <__assert_fail@plt+0x5bd8>
   16cc4:	mov	r1, #0
   16cc8:	add	r3, pc, r3
   16ccc:	ldr	r2, [r3]
   16cd0:	b	11018 <__cxa_atexit@plt>
   16cd4:	andeq	r2, r1, ip, lsl r4

Disassembly of section .fini:

00016cd8 <.fini>:
   16cd8:	push	{r3, lr}
   16cdc:	pop	{r3, pc}
