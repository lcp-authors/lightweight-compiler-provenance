
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010b40 <.init>:
   10b40:	push	{r3, lr}
   10b44:	bl	10d64 <__assert_fail@plt+0x48>
   10b48:	pop	{r3, pc}

Disassembly of section .plt:

00010b4c <calloc@plt-0x14>:
   10b4c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b50:	ldr	lr, [pc, #4]	; 10b5c <calloc@plt-0x4>
   10b54:	add	lr, pc, lr
   10b58:	ldr	pc, [lr, #8]!
   10b5c:	andeq	r7, r1, r4, lsr #9

00010b60 <calloc@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #94208	; 0x17000
   10b68:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b6c <strcmp@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #94208	; 0x17000
   10b74:	ldr	pc, [ip, #1180]!	; 0x49c

00010b78 <strtol@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1172]!	; 0x494

00010b84 <printf@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1164]!	; 0x48c

00010b90 <fopen@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1156]!	; 0x484

00010b9c <free@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1148]!	; 0x47c

00010ba8 <utf8proc_get_property@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1140]!	; 0x474

00010bb4 <fgets@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1132]!	; 0x46c

00010bc0 <utf8proc_encode_char@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1124]!	; 0x464

00010bcc <strdup@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1116]!	; 0x45c

00010bd8 <rewind@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1108]!	; 0x454

00010be4 <unlink@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1100]!	; 0x44c

00010bf0 <utf8proc_tolower@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1092]!	; 0x444

00010bfc <__xstat@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1084]!	; 0x43c

00010c08 <fwrite@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1076]!	; 0x434

00010c14 <fread@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1068]!	; 0x42c

00010c20 <utf8proc_iterate@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1060]!	; 0x424

00010c2c <puts@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1052]!	; 0x41c

00010c38 <malloc@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1044]!	; 0x414

00010c44 <__libc_start_main@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c50 <__sysv_signal@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #1028]!	; 0x404

00010c5c <__gmon_start__@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c68 <getpid@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c74 <exit@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c80 <utf8proc_category@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #996]!	; 0x3e4

00010c8c <strlen@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #988]!	; 0x3dc

00010c98 <fprintf@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #980]!	; 0x3d4

00010ca4 <__isoc99_sscanf@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #972]!	; 0x3cc

00010cb0 <fclose@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #964]!	; 0x3c4

00010cbc <utf8proc_NFC@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #956]!	; 0x3bc

00010cc8 <fputc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #948]!	; 0x3b4

00010cd4 <sprintf@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #940]!	; 0x3ac

00010ce0 <utf8proc_errmsg@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #932]!	; 0x3a4

00010cec <fputs@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #924]!	; 0x39c

00010cf8 <strncmp@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #916]!	; 0x394

00010d04 <abort@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #908]!	; 0x38c

00010d10 <getc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #900]!	; 0x384

00010d1c <__assert_fail@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #892]!	; 0x37c

Disassembly of section .text:

00010d28 <error@@Base-0x2450>:
   10d28:	mov	fp, #0
   10d2c:	mov	lr, #0
   10d30:	pop	{r1}		; (ldr r1, [sp], #4)
   10d34:	mov	r2, sp
   10d38:	push	{r2}		; (str r2, [sp, #-4]!)
   10d3c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d40:	ldr	ip, [pc, #16]	; 10d58 <__assert_fail@plt+0x3c>
   10d44:	push	{ip}		; (str ip, [sp, #-4]!)
   10d48:	ldr	r0, [pc, #12]	; 10d5c <__assert_fail@plt+0x40>
   10d4c:	ldr	r3, [pc, #12]	; 10d60 <__assert_fail@plt+0x44>
   10d50:	bl	10c44 <__libc_start_main@plt>
   10d54:	bl	10d04 <abort@plt>
   10d58:	andeq	r3, r1, r4, ror #21
   10d5c:	andeq	r1, r1, r8, asr #1
   10d60:	andeq	r3, r1, r4, lsl #21
   10d64:	ldr	r3, [pc, #20]	; 10d80 <__assert_fail@plt+0x64>
   10d68:	ldr	r2, [pc, #20]	; 10d84 <__assert_fail@plt+0x68>
   10d6c:	add	r3, pc, r3
   10d70:	ldr	r2, [r3, r2]
   10d74:	cmp	r2, #0
   10d78:	bxeq	lr
   10d7c:	b	10c5c <__gmon_start__@plt>
   10d80:	andeq	r7, r1, ip, lsl #5
   10d84:	andeq	r0, r0, r4, lsr #1
   10d88:	ldr	r0, [pc, #24]	; 10da8 <__assert_fail@plt+0x8c>
   10d8c:	ldr	r3, [pc, #24]	; 10dac <__assert_fail@plt+0x90>
   10d90:	cmp	r3, r0
   10d94:	bxeq	lr
   10d98:	ldr	r3, [pc, #16]	; 10db0 <__assert_fail@plt+0x94>
   10d9c:	cmp	r3, #0
   10da0:	bxeq	lr
   10da4:	bx	r3
   10da8:	andeq	r8, r2, r4, asr #1
   10dac:	andeq	r8, r2, r4, asr #1
   10db0:	andeq	r0, r0, r0
   10db4:	ldr	r0, [pc, #36]	; 10de0 <__assert_fail@plt+0xc4>
   10db8:	ldr	r1, [pc, #36]	; 10de4 <__assert_fail@plt+0xc8>
   10dbc:	sub	r1, r1, r0
   10dc0:	asr	r1, r1, #2
   10dc4:	add	r1, r1, r1, lsr #31
   10dc8:	asrs	r1, r1, #1
   10dcc:	bxeq	lr
   10dd0:	ldr	r3, [pc, #16]	; 10de8 <__assert_fail@plt+0xcc>
   10dd4:	cmp	r3, #0
   10dd8:	bxeq	lr
   10ddc:	bx	r3
   10de0:	andeq	r8, r2, r4, asr #1
   10de4:	andeq	r8, r2, r4, asr #1
   10de8:	andeq	r0, r0, r0
   10dec:	push	{r4, lr}
   10df0:	ldr	r4, [pc, #24]	; 10e10 <__assert_fail@plt+0xf4>
   10df4:	ldrb	r3, [r4]
   10df8:	cmp	r3, #0
   10dfc:	popne	{r4, pc}
   10e00:	bl	10d88 <__assert_fail@plt+0x6c>
   10e04:	mov	r3, #1
   10e08:	strb	r3, [r4]
   10e0c:	pop	{r4, pc}
   10e10:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   10e14:	b	10db4 <__assert_fail@plt+0x98>
   10e18:	push	{r4, r5, fp, lr}
   10e1c:	add	fp, sp, #8
   10e20:	movw	r4, #33100	; 0x814c
   10e24:	movw	r2, #32944	; 0x80b0
   10e28:	mov	r1, r0
   10e2c:	movt	r4, #2
   10e30:	movt	r2, #2
   10e34:	mov	r0, r4
   10e38:	bl	13388 <error@@Base+0x210>
   10e3c:	movw	r5, #33116	; 0x815c
   10e40:	mov	r1, r4
   10e44:	movt	r5, #2
   10e48:	mov	r0, r5
   10e4c:	bl	123b8 <__assert_fail@plt+0x169c>
   10e50:	ldr	r5, [r5]
   10e54:	cmp	r5, #0
   10e58:	beq	10e84 <__assert_fail@plt+0x168>
   10e5c:	movw	r4, #33132	; 0x816c
   10e60:	movt	r4, #2
   10e64:	ldr	r1, [r5, #8]
   10e68:	mov	r0, r4
   10e6c:	mov	r2, #1
   10e70:	mov	r3, #0
   10e74:	bl	11574 <__assert_fail@plt+0x858>
   10e78:	ldr	r5, [r5, #4]
   10e7c:	cmp	r5, #0
   10e80:	bne	10e64 <__assert_fail@plt+0x148>
   10e84:	movw	r0, #33100	; 0x814c
   10e88:	movw	r1, #2972	; 0xb9c
   10e8c:	movt	r0, #2
   10e90:	movt	r1, #1
   10e94:	bl	113d4 <__assert_fail@plt+0x6b8>
   10e98:	movw	r0, #33116	; 0x815c
   10e9c:	movw	r1, #11340	; 0x2c4c
   10ea0:	movt	r0, #2
   10ea4:	movt	r1, #1
   10ea8:	pop	{r4, r5, fp, lr}
   10eac:	b	113d4 <__assert_fail@plt+0x6b8>
   10eb0:	ldr	r1, [r1, #8]
   10eb4:	ldr	r0, [r0, #8]
   10eb8:	b	12c8c <__assert_fail@plt+0x1f70>
   10ebc:	ldr	r2, [r1, #12]
   10ec0:	ldr	r3, [r0, #12]
   10ec4:	cmp	r2, r3
   10ec8:	subne	r0, r2, r3
   10ecc:	bxne	lr
   10ed0:	ldr	r1, [r1, #8]
   10ed4:	ldr	r0, [r0, #8]
   10ed8:	b	12c8c <__assert_fail@plt+0x1f70>
   10edc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10ee0:	add	fp, sp, #24
   10ee4:	movw	r0, #15177	; 0x3b49
   10ee8:	movt	r0, #1
   10eec:	bl	10c2c <puts@plt>
   10ef0:	movw	r7, #33132	; 0x816c
   10ef4:	movw	r8, #8052	; 0x1f74
   10ef8:	movt	r7, #2
   10efc:	ldr	r0, [r7, r8]
   10f00:	cmp	r0, #1
   10f04:	blt	10f58 <__assert_fail@plt+0x23c>
   10f08:	movw	r9, #8048	; 0x1f70
   10f0c:	movw	r5, #15092	; 0x3af4
   10f10:	mov	r4, #0
   10f14:	mov	r6, #0
   10f18:	ldr	r0, [r7, r9]
   10f1c:	movt	r5, #1
   10f20:	ldr	r0, [r0, r6, lsl #2]
   10f24:	ldr	r2, [r0, #8]
   10f28:	ldr	r1, [r0, #12]
   10f2c:	mov	r0, r5
   10f30:	bl	10b84 <printf@plt>
   10f34:	ldr	r0, [r7, r9]
   10f38:	ldr	r1, [r7, r8]
   10f3c:	ldr	r2, [r0, r6, lsl #2]
   10f40:	add	r6, r6, #1
   10f44:	cmp	r6, r1
   10f48:	ldr	r2, [r2, #12]
   10f4c:	add	r4, r2, r4
   10f50:	blt	10f20 <__assert_fail@plt+0x204>
   10f54:	b	10f5c <__assert_fail@plt+0x240>
   10f58:	mov	r4, #0
   10f5c:	movw	r0, #15103	; 0x3aff
   10f60:	mov	r1, r4
   10f64:	movt	r0, #1
   10f68:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   10f6c:	b	10b84 <printf@plt>
   10f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f74:	add	fp, sp, #28
   10f78:	sub	sp, sp, #4
   10f7c:	movw	r4, #33132	; 0x816c
   10f80:	movt	r4, #2
   10f84:	mov	r0, r4
   10f88:	bl	122dc <__assert_fail@plt+0x15c0>
   10f8c:	movw	r8, #8052	; 0x1f74
   10f90:	mov	r5, r4
   10f94:	movw	r2, #3760	; 0xeb0
   10f98:	ldr	r0, [r5, r8]!
   10f9c:	movt	r2, #1
   10fa0:	ldr	r1, [r5, #-4]
   10fa4:	bl	11454 <__assert_fail@plt+0x738>
   10fa8:	movw	r0, #15177	; 0x3b49
   10fac:	movt	r0, #1
   10fb0:	bl	10c2c <puts@plt>
   10fb4:	ldr	r0, [r5]
   10fb8:	mov	r5, #0
   10fbc:	mov	r6, #0
   10fc0:	cmp	r0, #1
   10fc4:	blt	11014 <__assert_fail@plt+0x2f8>
   10fc8:	movw	r9, #8048	; 0x1f70
   10fcc:	movw	sl, #15092	; 0x3af4
   10fd0:	mov	r6, #0
   10fd4:	mov	r7, #0
   10fd8:	ldr	r0, [r4, r9]
   10fdc:	movt	sl, #1
   10fe0:	ldr	r0, [r0, r7, lsl #2]
   10fe4:	ldr	r2, [r0, #8]
   10fe8:	ldr	r1, [r0, #12]
   10fec:	mov	r0, sl
   10ff0:	bl	10b84 <printf@plt>
   10ff4:	ldr	r0, [r4, r9]
   10ff8:	ldr	r1, [r4, r8]
   10ffc:	ldr	r2, [r0, r7, lsl #2]
   11000:	add	r7, r7, #1
   11004:	cmp	r7, r1
   11008:	ldr	r2, [r2, #12]
   1100c:	add	r6, r2, r6
   11010:	blt	10fe0 <__assert_fail@plt+0x2c4>
   11014:	movw	r0, #15103	; 0x3aff
   11018:	mov	r1, r6
   1101c:	movt	r0, #1
   11020:	bl	10b84 <printf@plt>
   11024:	movw	r0, #28755	; 0x7053
   11028:	movt	r0, #1
   1102c:	bl	10c2c <puts@plt>
   11030:	mov	r6, r4
   11034:	movw	r2, #3772	; 0xebc
   11038:	ldr	r0, [r6, r8]!
   1103c:	movt	r2, #1
   11040:	ldr	r1, [r6, #-4]
   11044:	bl	11454 <__assert_fail@plt+0x738>
   11048:	movw	r0, #15177	; 0x3b49
   1104c:	movt	r0, #1
   11050:	bl	10c2c <puts@plt>
   11054:	ldr	r0, [r6]
   11058:	cmp	r0, #1
   1105c:	blt	110b0 <__assert_fail@plt+0x394>
   11060:	movw	r8, #8048	; 0x1f70
   11064:	movw	r9, #15092	; 0x3af4
   11068:	mov	r5, #0
   1106c:	movw	r7, #8052	; 0x1f74
   11070:	mov	r6, #0
   11074:	ldr	r0, [r4, r8]
   11078:	movt	r9, #1
   1107c:	ldr	r0, [r0, r6, lsl #2]
   11080:	ldr	r2, [r0, #8]
   11084:	ldr	r1, [r0, #12]
   11088:	mov	r0, r9
   1108c:	bl	10b84 <printf@plt>
   11090:	ldr	r0, [r4, r8]
   11094:	ldr	r1, [r4, r7]
   11098:	ldr	r2, [r0, r6, lsl #2]
   1109c:	add	r6, r6, #1
   110a0:	cmp	r6, r1
   110a4:	ldr	r2, [r2, #12]
   110a8:	add	r5, r2, r5
   110ac:	blt	1107c <__assert_fail@plt+0x360>
   110b0:	movw	r0, #15103	; 0x3aff
   110b4:	mov	r1, r5
   110b8:	movt	r0, #1
   110bc:	sub	sp, fp, #28
   110c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110c4:	b	10b84 <printf@plt>
   110c8:	push	{fp, lr}
   110cc:	mov	fp, sp
   110d0:	sub	sp, sp, #8
   110d4:	movw	r2, #15117	; 0x3b0d
   110d8:	str	r0, [sp, #4]
   110dc:	add	r0, sp, #4
   110e0:	mov	r3, #0
   110e4:	mov	r4, r1
   110e8:	movt	r2, #1
   110ec:	bl	12e7c <__assert_fail@plt+0x2160>
   110f0:	ldr	r0, [sp, #4]
   110f4:	cmp	r0, #0
   110f8:	beq	111a8 <__assert_fail@plt+0x48c>
   110fc:	cmp	r0, #1
   11100:	blt	111a0 <__assert_fail@plt+0x484>
   11104:	movw	r5, #33100	; 0x814c
   11108:	movw	r7, #33116	; 0x815c
   1110c:	movw	sl, #11340	; 0x2c4c
   11110:	movw	r6, #33132	; 0x816c
   11114:	mov	r8, #0
   11118:	movt	r5, #2
   1111c:	movt	r7, #2
   11120:	movt	sl, #1
   11124:	movt	r6, #2
   11128:	ldr	r1, [r4, r8, lsl #2]
   1112c:	movw	r2, #32944	; 0x80b0
   11130:	mov	r0, r5
   11134:	movt	r2, #2
   11138:	bl	13388 <error@@Base+0x210>
   1113c:	mov	r0, r7
   11140:	mov	r1, r5
   11144:	bl	123b8 <__assert_fail@plt+0x169c>
   11148:	ldr	r9, [r7]
   1114c:	cmp	r9, #0
   11150:	beq	11174 <__assert_fail@plt+0x458>
   11154:	ldr	r1, [r9, #8]
   11158:	mov	r0, r6
   1115c:	mov	r2, #1
   11160:	mov	r3, #0
   11164:	bl	11574 <__assert_fail@plt+0x858>
   11168:	ldr	r9, [r9, #4]
   1116c:	cmp	r9, #0
   11170:	bne	11154 <__assert_fail@plt+0x438>
   11174:	movw	r1, #2972	; 0xb9c
   11178:	mov	r0, r5
   1117c:	movt	r1, #1
   11180:	bl	113d4 <__assert_fail@plt+0x6b8>
   11184:	mov	r0, r7
   11188:	mov	r1, sl
   1118c:	bl	113d4 <__assert_fail@plt+0x6b8>
   11190:	ldr	r0, [sp, #4]
   11194:	add	r8, r8, #1
   11198:	cmp	r8, r0
   1119c:	blt	11128 <__assert_fail@plt+0x40c>
   111a0:	bl	10f70 <__assert_fail@plt+0x254>
   111a4:	bl	13138 <__assert_fail@plt+0x241c>
   111a8:	movw	r0, #15153	; 0x3b31
   111ac:	movt	r0, #1
   111b0:	bl	13178 <error@@Base>
   111b4:	vmov.i32	q8, #0	; 0x00000000
   111b8:	vst1.32	{d16-d17}, [r0]
   111bc:	bx	lr
   111c0:	push	{r4, r5, fp, lr}
   111c4:	add	fp, sp, #8
   111c8:	mov	r4, r0
   111cc:	ldr	r0, [r0]
   111d0:	mov	r5, #0
   111d4:	str	r5, [r1]
   111d8:	cmp	r0, #0
   111dc:	str	r0, [r1, #4]
   111e0:	str	r1, [r4]
   111e4:	addeq	r0, r4, #4
   111e8:	str	r1, [r0]
   111ec:	ldr	r0, [r4, #8]
   111f0:	cmp	r0, #0
   111f4:	beq	11200 <__assert_fail@plt+0x4e4>
   111f8:	bl	10b9c <free@plt>
   111fc:	str	r5, [r4, #8]
   11200:	ldr	r0, [r4, #12]
   11204:	add	r0, r0, #1
   11208:	str	r0, [r4, #12]
   1120c:	pop	{r4, r5, fp, pc}
   11210:	push	{r4, r5, fp, lr}
   11214:	add	fp, sp, #8
   11218:	mov	r4, r0
   1121c:	ldr	r0, [r0, #4]
   11220:	mov	r5, #0
   11224:	mov	r2, r4
   11228:	cmp	r0, #0
   1122c:	stm	r1, {r0, r5}
   11230:	addne	r2, r0, #4
   11234:	str	r1, [r2]
   11238:	str	r1, [r4, #4]
   1123c:	ldr	r0, [r4, #8]
   11240:	cmp	r0, #0
   11244:	beq	11250 <__assert_fail@plt+0x534>
   11248:	bl	10b9c <free@plt>
   1124c:	str	r5, [r4, #8]
   11250:	ldr	r0, [r4, #12]
   11254:	add	r0, r0, #1
   11258:	str	r0, [r4, #12]
   1125c:	pop	{r4, r5, fp, pc}
   11260:	push	{r4, sl, fp, lr}
   11264:	add	fp, sp, #8
   11268:	mov	r4, r0
   1126c:	ldr	r0, [r2]
   11270:	mov	r3, r4
   11274:	cmp	r0, #0
   11278:	stm	r1, {r0, r2}
   1127c:	addne	r3, r0, #4
   11280:	str	r1, [r3]
   11284:	str	r1, [r2]
   11288:	ldr	r0, [r4, #8]
   1128c:	cmp	r0, #0
   11290:	beq	112a0 <__assert_fail@plt+0x584>
   11294:	bl	10b9c <free@plt>
   11298:	mov	r0, #0
   1129c:	str	r0, [r4, #8]
   112a0:	ldr	r0, [r4, #12]
   112a4:	add	r0, r0, #1
   112a8:	str	r0, [r4, #12]
   112ac:	pop	{r4, sl, fp, pc}
   112b0:	push	{r4, sl, fp, lr}
   112b4:	add	fp, sp, #8
   112b8:	mov	r4, r0
   112bc:	mov	r0, r1
   112c0:	cmp	r1, #0
   112c4:	ldr	r3, [r0, #4]!
   112c8:	moveq	r0, r4
   112cc:	cmp	r3, #0
   112d0:	stm	r2, {r1, r3}
   112d4:	addeq	r3, r4, #4
   112d8:	str	r2, [r0]
   112dc:	str	r2, [r3]
   112e0:	ldr	r0, [r4, #8]
   112e4:	cmp	r0, #0
   112e8:	beq	112f8 <__assert_fail@plt+0x5dc>
   112ec:	bl	10b9c <free@plt>
   112f0:	mov	r0, #0
   112f4:	str	r0, [r4, #8]
   112f8:	ldr	r0, [r4, #12]
   112fc:	add	r0, r0, #1
   11300:	str	r0, [r4, #12]
   11304:	pop	{r4, sl, fp, pc}
   11308:	push	{r4, r5, fp, lr}
   1130c:	add	fp, sp, #8
   11310:	mov	r4, r0
   11314:	ldm	r1, {r0, r2}
   11318:	mov	r5, #0
   1131c:	cmp	r0, #0
   11320:	streq	r2, [r4]
   11324:	strne	r2, [r0, #4]
   11328:	ldrne	r2, [r1, #4]
   1132c:	cmp	r2, #0
   11330:	addeq	r2, r4, #4
   11334:	str	r0, [r2]
   11338:	str	r5, [r1]
   1133c:	str	r5, [r1, #4]
   11340:	ldr	r0, [r4, #8]
   11344:	cmp	r0, #0
   11348:	beq	11354 <__assert_fail@plt+0x638>
   1134c:	bl	10b9c <free@plt>
   11350:	str	r5, [r4, #8]
   11354:	ldr	r0, [r4, #12]
   11358:	sub	r0, r0, #1
   1135c:	str	r0, [r4, #12]
   11360:	pop	{r4, r5, fp, pc}
   11364:	push	{r4, sl, fp, lr}
   11368:	add	fp, sp, #8
   1136c:	mov	r4, r0
   11370:	ldr	r0, [r0, #8]
   11374:	cmp	r0, #0
   11378:	beq	11380 <__assert_fail@plt+0x664>
   1137c:	pop	{r4, sl, fp, pc}
   11380:	ldr	r0, [r4, #12]
   11384:	cmp	r0, #0
   11388:	beq	1137c <__assert_fail@plt+0x660>
   1138c:	mov	r1, #4
   11390:	bl	12c6c <__assert_fail@plt+0x1f50>
   11394:	str	r0, [r4, #8]
   11398:	ldr	r1, [r4]
   1139c:	cmp	r1, #0
   113a0:	beq	1137c <__assert_fail@plt+0x660>
   113a4:	str	r1, [r0]
   113a8:	ldr	r0, [r1, #4]
   113ac:	cmp	r0, #0
   113b0:	popeq	{r4, sl, fp, pc}
   113b4:	mov	r1, #4
   113b8:	ldr	r2, [r4, #8]
   113bc:	str	r0, [r2, r1]
   113c0:	add	r1, r1, #4
   113c4:	ldr	r0, [r0, #4]
   113c8:	cmp	r0, #0
   113cc:	bne	113b8 <__assert_fail@plt+0x69c>
   113d0:	b	1137c <__assert_fail@plt+0x660>
   113d4:	push	{r4, r5, r6, r7, fp, lr}
   113d8:	add	fp, sp, #16
   113dc:	ldr	r6, [r0]
   113e0:	cmp	r6, #0
   113e4:	popeq	{r4, r5, r6, r7, fp, pc}
   113e8:	mov	r4, r1
   113ec:	mov	r5, r0
   113f0:	mov	r7, #0
   113f4:	ldm	r6, {r0, r1}
   113f8:	cmp	r0, #0
   113fc:	streq	r1, [r5]
   11400:	strne	r1, [r0, #4]
   11404:	ldrne	r1, [r6, #4]
   11408:	cmp	r1, #0
   1140c:	addeq	r1, r5, #4
   11410:	str	r0, [r1]
   11414:	str	r7, [r6]
   11418:	str	r7, [r6, #4]
   1141c:	ldr	r0, [r5, #8]
   11420:	cmp	r0, #0
   11424:	beq	11430 <__assert_fail@plt+0x714>
   11428:	bl	10b9c <free@plt>
   1142c:	str	r7, [r5, #8]
   11430:	ldr	r0, [r5, #12]
   11434:	sub	r0, r0, #1
   11438:	str	r0, [r5, #12]
   1143c:	mov	r0, r6
   11440:	blx	r4
   11444:	ldr	r6, [r5]
   11448:	cmp	r6, #0
   1144c:	bne	113f4 <__assert_fail@plt+0x6d8>
   11450:	pop	{r4, r5, r6, r7, fp, pc}
   11454:	cmp	r0, #2
   11458:	bxlt	lr
   1145c:	movw	r3, #32988	; 0x80dc
   11460:	movt	r3, #2
   11464:	stm	r3, {r1, r2}
   11468:	sub	r1, r0, #1
   1146c:	mov	r0, #0
   11470:	b	11474 <__assert_fail@plt+0x758>
   11474:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11478:	add	fp, sp, #24
   1147c:	movw	r7, #32988	; 0x80dc
   11480:	mov	r8, r1
   11484:	mov	r9, r0
   11488:	movt	r7, #2
   1148c:	b	114b0 <__assert_fail@plt+0x794>
   11490:	sub	r1, r4, #1
   11494:	str	r6, [r0, r4, lsl #2]
   11498:	cmp	r1, r9
   1149c:	movgt	r0, r9
   114a0:	blgt	11474 <__assert_fail@plt+0x758>
   114a4:	add	r9, r5, #1
   114a8:	cmp	r9, r8
   114ac:	popge	{r4, r5, r6, r7, r8, r9, fp, pc}
   114b0:	ldr	r0, [r7]
   114b4:	cmp	r9, r8
   114b8:	mov	r4, r8
   114bc:	mov	r5, r9
   114c0:	ldr	r6, [r0, r9, lsl #2]
   114c4:	bge	11490 <__assert_fail@plt+0x774>
   114c8:	mov	r5, r9
   114cc:	mov	r4, r8
   114d0:	cmp	r5, r4
   114d4:	blt	114e8 <__assert_fail@plt+0x7cc>
   114d8:	b	11500 <__assert_fail@plt+0x7e4>
   114dc:	sub	r4, r4, #1
   114e0:	cmp	r5, r4
   114e4:	bge	11500 <__assert_fail@plt+0x7e4>
   114e8:	ldm	r7, {r0, r2}
   114ec:	ldr	r1, [r0, r4, lsl #2]
   114f0:	mov	r0, r6
   114f4:	blx	r2
   114f8:	cmn	r0, #1
   114fc:	ble	114dc <__assert_fail@plt+0x7c0>
   11500:	cmp	r5, r4
   11504:	beq	11518 <__assert_fail@plt+0x7fc>
   11508:	ldr	r0, [r7]
   1150c:	ldr	r1, [r0, r4, lsl #2]
   11510:	str	r1, [r0, r5, lsl #2]
   11514:	add	r5, r5, #1
   11518:	cmp	r5, r4
   1151c:	bge	11538 <__assert_fail@plt+0x81c>
   11520:	ldm	r7, {r0, r2}
   11524:	ldr	r1, [r0, r5, lsl #2]
   11528:	mov	r0, r6
   1152c:	blx	r2
   11530:	cmp	r0, #1
   11534:	bge	11514 <__assert_fail@plt+0x7f8>
   11538:	cmp	r5, r4
   1153c:	ldrne	r0, [r7]
   11540:	ldrne	r1, [r0, r5, lsl #2]
   11544:	strne	r1, [r0, r4, lsl #2]
   11548:	subne	r4, r4, #1
   1154c:	cmp	r5, r4
   11550:	blt	114e0 <__assert_fail@plt+0x7c4>
   11554:	ldr	r0, [r7]
   11558:	b	11490 <__assert_fail@plt+0x774>
   1155c:	andeq	r0, r0, r0
   11560:	ldm	r0, {r3, ip}
   11564:	add	r1, r3, r1
   11568:	add	r2, ip, r2
   1156c:	stm	r0, {r1, r2}
   11570:	bx	lr
   11574:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11578:	add	fp, sp, #24
   1157c:	mov	r8, r3
   11580:	mov	r5, r2
   11584:	mov	r4, r1
   11588:	mov	r6, r0
   1158c:	bl	1212c <__assert_fail@plt+0x1410>
   11590:	mov	r7, r0
   11594:	cmp	r0, #0
   11598:	bne	115c4 <__assert_fail@plt+0x8a8>
   1159c:	mov	r0, #1
   115a0:	mov	r1, #20
   115a4:	bl	12c6c <__assert_fail@plt+0x1f50>
   115a8:	mov	r7, r0
   115ac:	mov	r0, r4
   115b0:	bl	10bcc <strdup@plt>
   115b4:	str	r0, [r7, #8]
   115b8:	mov	r0, r6
   115bc:	mov	r1, r7
   115c0:	bl	121bc <__assert_fail@plt+0x14a0>
   115c4:	ldr	r0, [r7, #12]
   115c8:	ldr	r1, [r7, #16]
   115cc:	add	r0, r0, r5
   115d0:	add	r1, r1, r8
   115d4:	str	r0, [r7, #12]
   115d8:	str	r1, [r7, #16]
   115dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   115e0:	push	{r4, r5, r6, r7, fp, lr}
   115e4:	add	fp, sp, #16
   115e8:	sub	sp, sp, #8
   115ec:	mov	r6, r1
   115f0:	movw	r1, #29041	; 0x7171
   115f4:	mov	r5, r0
   115f8:	movt	r1, #1
   115fc:	mov	r0, r6
   11600:	bl	12d08 <__assert_fail@plt+0x1fec>
   11604:	mov	r4, r0
   11608:	movw	r0, #32996	; 0x80e4
   1160c:	mov	r1, #99	; 0x63
   11610:	movt	r0, #2
   11614:	mov	r2, r4
   11618:	bl	10bb4 <fgets@plt>
   1161c:	cmp	r0, #0
   11620:	beq	117c4 <__assert_fail@plt+0xaa8>
   11624:	movw	r0, #32996	; 0x80e4
   11628:	movw	r1, #15186	; 0x3b52
   1162c:	mov	r2, #45	; 0x2d
   11630:	movt	r0, #2
   11634:	movt	r1, #1
   11638:	bl	10cf8 <strncmp@plt>
   1163c:	cmp	r0, #0
   11640:	bne	117c4 <__assert_fail@plt+0xaa8>
   11644:	movw	r0, #32996	; 0x80e4
   11648:	mov	r1, #99	; 0x63
   1164c:	mov	r2, r4
   11650:	movt	r0, #2
   11654:	bl	10bb4 <fgets@plt>
   11658:	cmp	r0, #0
   1165c:	beq	117c4 <__assert_fail@plt+0xaa8>
   11660:	movw	r0, #32996	; 0x80e4
   11664:	movw	r1, #28971	; 0x712b
   11668:	movt	r0, #2
   1166c:	movt	r1, #1
   11670:	bl	10b6c <strcmp@plt>
   11674:	cmp	r0, #0
   11678:	bne	117c4 <__assert_fail@plt+0xaa8>
   1167c:	movw	r0, #32996	; 0x80e4
   11680:	mov	r1, #99	; 0x63
   11684:	mov	r2, r4
   11688:	movt	r0, #2
   1168c:	bl	10bb4 <fgets@plt>
   11690:	cmp	r0, #0
   11694:	beq	117c4 <__assert_fail@plt+0xaa8>
   11698:	movw	r0, #32996	; 0x80e4
   1169c:	movw	r1, #15359	; 0x3bff
   116a0:	add	r2, sp, #4
   116a4:	movt	r0, #2
   116a8:	movt	r1, #1
   116ac:	bl	10ca4 <__isoc99_sscanf@plt>
   116b0:	cmp	r0, #1
   116b4:	bne	117c4 <__assert_fail@plt+0xaa8>
   116b8:	movw	r0, #32996	; 0x80e4
   116bc:	mov	r1, #99	; 0x63
   116c0:	mov	r2, r4
   116c4:	movt	r0, #2
   116c8:	bl	10bb4 <fgets@plt>
   116cc:	cmp	r0, #0
   116d0:	beq	117c4 <__assert_fail@plt+0xaa8>
   116d4:	movw	r0, #32996	; 0x80e4
   116d8:	movw	r1, #15359	; 0x3bff
   116dc:	mov	r2, sp
   116e0:	movt	r0, #2
   116e4:	movt	r1, #1
   116e8:	bl	10ca4 <__isoc99_sscanf@plt>
   116ec:	cmp	r0, #1
   116f0:	bne	117c4 <__assert_fail@plt+0xaa8>
   116f4:	movw	r0, #32996	; 0x80e4
   116f8:	mov	r1, #99	; 0x63
   116fc:	mov	r2, r4
   11700:	movt	r0, #2
   11704:	bl	10bb4 <fgets@plt>
   11708:	cmp	r0, #0
   1170c:	beq	117c4 <__assert_fail@plt+0xaa8>
   11710:	movw	r0, #32996	; 0x80e4
   11714:	mov	r1, #99	; 0x63
   11718:	mov	r2, r4
   1171c:	movt	r0, #2
   11720:	bl	10bb4 <fgets@plt>
   11724:	cmp	r0, #0
   11728:	beq	117c4 <__assert_fail@plt+0xaa8>
   1172c:	ldm	r5, {r0, r1}
   11730:	ldr	r2, [sp, #4]
   11734:	add	r0, r0, r2
   11738:	ldr	r2, [sp]
   1173c:	add	r1, r1, r2
   11740:	stm	r5, {r0, r1}
   11744:	add	r1, r5, #8
   11748:	mov	r0, r4
   1174c:	bl	117e0 <__assert_fail@plt+0xac4>
   11750:	mov	r7, r0
   11754:	add	r1, r5, #416	; 0x1a0
   11758:	mov	r0, r4
   1175c:	bl	117e0 <__assert_fail@plt+0xac4>
   11760:	mov	r6, r0
   11764:	add	r1, r5, #824	; 0x338
   11768:	mov	r0, r4
   1176c:	bl	117e0 <__assert_fail@plt+0xac4>
   11770:	ldr	r0, [sp, #4]
   11774:	cmp	r0, #1
   11778:	blt	117b4 <__assert_fail@plt+0xa98>
   1177c:	add	r1, r5, #920	; 0x398
   11780:	mov	r0, r4
   11784:	bl	117e0 <__assert_fail@plt+0xac4>
   11788:	cmp	r7, #1
   1178c:	blt	1179c <__assert_fail@plt+0xa80>
   11790:	add	r1, r5, #992	; 0x3e0
   11794:	mov	r0, r4
   11798:	bl	11904 <__assert_fail@plt+0xbe8>
   1179c:	cmp	r6, #1
   117a0:	blt	117b4 <__assert_fail@plt+0xa98>
   117a4:	movw	r0, #9048	; 0x2358
   117a8:	add	r1, r5, r0
   117ac:	mov	r0, r4
   117b0:	bl	11904 <__assert_fail@plt+0xbe8>
   117b4:	mov	r0, r4
   117b8:	bl	12d80 <__assert_fail@plt+0x2064>
   117bc:	sub	sp, fp, #16
   117c0:	pop	{r4, r5, r6, r7, fp, pc}
   117c4:	movw	r1, #15252	; 0x3b94
   117c8:	movw	r0, #15234	; 0x3b82
   117cc:	cmp	r6, #0
   117d0:	movt	r1, #1
   117d4:	movt	r0, #1
   117d8:	movne	r1, r6
   117dc:	bl	131b8 <error@@Base+0x40>
   117e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117e4:	add	fp, sp, #28
   117e8:	sub	sp, sp, #12
   117ec:	mov	r5, r0
   117f0:	movw	r0, #32996	; 0x80e4
   117f4:	mov	r4, r1
   117f8:	mov	r1, #99	; 0x63
   117fc:	movt	r0, #2
   11800:	mov	r2, r5
   11804:	bl	10bb4 <fgets@plt>
   11808:	mov	r6, #0
   1180c:	cmp	r0, #0
   11810:	beq	118f8 <__assert_fail@plt+0xbdc>
   11814:	movw	r0, #32996	; 0x80e4
   11818:	mov	r1, #99	; 0x63
   1181c:	mov	r2, r5
   11820:	movt	r0, #2
   11824:	bl	10bb4 <fgets@plt>
   11828:	cmp	r0, #0
   1182c:	beq	118f8 <__assert_fail@plt+0xbdc>
   11830:	movw	r7, #32996	; 0x80e4
   11834:	mov	r1, #99	; 0x63
   11838:	mov	r2, r5
   1183c:	movt	r7, #2
   11840:	mov	r0, r7
   11844:	bl	10bb4 <fgets@plt>
   11848:	cmp	r0, #0
   1184c:	beq	118f8 <__assert_fail@plt+0xbdc>
   11850:	mov	r6, #0
   11854:	add	r9, sp, #8
   11858:	add	sl, sp, #4
   1185c:	add	r8, r7, #29
   11860:	movw	r1, #15355	; 0x3bfb
   11864:	mov	r0, r7
   11868:	mov	r2, r9
   1186c:	mov	r3, sl
   11870:	movt	r1, #1
   11874:	bl	10ca4 <__isoc99_sscanf@plt>
   11878:	cmp	r0, #2
   1187c:	bne	118f8 <__assert_fail@plt+0xbdc>
   11880:	mov	r0, r8
   11884:	mov	r1, #0
   11888:	mov	r2, #10
   1188c:	bl	10b78 <strtol@plt>
   11890:	cmp	r0, #0
   11894:	beq	118a0 <__assert_fail@plt+0xb84>
   11898:	ldr	r1, [sp, #8]
   1189c:	b	118c0 <__assert_fail@plt+0xba4>
   118a0:	movw	r1, #15109	; 0x3b05
   118a4:	mov	r0, r8
   118a8:	movt	r1, #1
   118ac:	bl	10b6c <strcmp@plt>
   118b0:	ldr	r1, [sp, #8]
   118b4:	cmp	r0, #0
   118b8:	movwne	r0, #11
   118bc:	moveq	r6, r1
   118c0:	mov	r2, r4
   118c4:	ldr	r0, [r2, r0, lsl #3]!
   118c8:	add	r0, r0, r1
   118cc:	ldr	r1, [sp, #4]
   118d0:	str	r0, [r2]
   118d4:	ldr	r0, [r2, #4]
   118d8:	add	r0, r0, r1
   118dc:	mov	r1, #99	; 0x63
   118e0:	str	r0, [r2, #4]
   118e4:	mov	r0, r7
   118e8:	mov	r2, r5
   118ec:	bl	10bb4 <fgets@plt>
   118f0:	cmp	r0, #0
   118f4:	bne	11860 <__assert_fail@plt+0xb44>
   118f8:	mov	r0, r6
   118fc:	sub	sp, fp, #28
   11900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11908:	add	fp, sp, #28
   1190c:	sub	sp, sp, #12
   11910:	mov	r5, r0
   11914:	movw	r0, #32996	; 0x80e4
   11918:	mov	r4, r1
   1191c:	mov	r1, #99	; 0x63
   11920:	movt	r0, #2
   11924:	mov	r2, r5
   11928:	bl	10bb4 <fgets@plt>
   1192c:	cmp	r0, #0
   11930:	beq	11a20 <__assert_fail@plt+0xd04>
   11934:	movw	r0, #32996	; 0x80e4
   11938:	mov	r1, #99	; 0x63
   1193c:	mov	r2, r5
   11940:	movt	r0, #2
   11944:	bl	10bb4 <fgets@plt>
   11948:	cmp	r0, #0
   1194c:	beq	11a20 <__assert_fail@plt+0xd04>
   11950:	movw	r6, #32996	; 0x80e4
   11954:	mov	r1, #99	; 0x63
   11958:	mov	r2, r5
   1195c:	movt	r6, #2
   11960:	mov	r0, r6
   11964:	bl	10bb4 <fgets@plt>
   11968:	cmp	r0, #0
   1196c:	beq	11a20 <__assert_fail@plt+0xd04>
   11970:	add	r7, r6, #29
   11974:	movw	r1, #15355	; 0x3bfb
   11978:	mov	r0, r6
   1197c:	add	r2, sp, #8
   11980:	add	r3, sp, #4
   11984:	movt	r1, #1
   11988:	bl	10ca4 <__isoc99_sscanf@plt>
   1198c:	cmp	r0, #2
   11990:	bne	11a20 <__assert_fail@plt+0xd04>
   11994:	mov	r0, r6
   11998:	bl	10c8c <strlen@plt>
   1199c:	ldr	r9, [sp, #8]
   119a0:	ldr	sl, [sp, #4]
   119a4:	add	r0, r6, r0
   119a8:	mov	r1, #0
   119ac:	strb	r1, [r0, #-1]
   119b0:	mov	r0, r4
   119b4:	mov	r1, r7
   119b8:	bl	1212c <__assert_fail@plt+0x1410>
   119bc:	mov	r8, r0
   119c0:	cmp	r0, #0
   119c4:	bne	119f0 <__assert_fail@plt+0xcd4>
   119c8:	mov	r0, #1
   119cc:	mov	r1, #20
   119d0:	bl	12c6c <__assert_fail@plt+0x1f50>
   119d4:	mov	r8, r0
   119d8:	mov	r0, r7
   119dc:	bl	10bcc <strdup@plt>
   119e0:	str	r0, [r8, #8]
   119e4:	mov	r0, r4
   119e8:	mov	r1, r8
   119ec:	bl	121bc <__assert_fail@plt+0x14a0>
   119f0:	ldr	r0, [r8, #12]
   119f4:	ldr	r1, [r8, #16]
   119f8:	mov	r2, r5
   119fc:	add	r0, r0, r9
   11a00:	add	r1, r1, sl
   11a04:	str	r0, [r8, #12]
   11a08:	str	r1, [r8, #16]
   11a0c:	mov	r0, r6
   11a10:	mov	r1, #99	; 0x63
   11a14:	bl	10bb4 <fgets@plt>
   11a18:	cmp	r0, #0
   11a1c:	bne	11974 <__assert_fail@plt+0xc58>
   11a20:	sub	sp, fp, #28
   11a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11a2c:	add	fp, sp, #24
   11a30:	sub	sp, sp, #8
   11a34:	mov	r2, r1
   11a38:	movw	r1, #15258	; 0x3b9a
   11a3c:	mov	r5, r0
   11a40:	movt	r1, #1
   11a44:	mov	r0, r2
   11a48:	bl	12d08 <__assert_fail@plt+0x1fec>
   11a4c:	movw	r1, #15260	; 0x3b9c
   11a50:	movw	r2, #15186	; 0x3b52
   11a54:	movw	r3, #28971	; 0x712b
   11a58:	mov	r4, r0
   11a5c:	movt	r1, #1
   11a60:	movt	r2, #1
   11a64:	movt	r3, #1
   11a68:	bl	10c98 <fprintf@plt>
   11a6c:	ldr	r2, [r5]
   11a70:	movw	r1, #15265	; 0x3ba1
   11a74:	mov	r0, r4
   11a78:	movt	r1, #1
   11a7c:	bl	10c98 <fprintf@plt>
   11a80:	ldr	r2, [r5, #4]
   11a84:	movw	r1, #15279	; 0x3baf
   11a88:	mov	r0, r4
   11a8c:	movt	r1, #1
   11a90:	bl	10c98 <fprintf@plt>
   11a94:	ldr	r0, [r5]
   11a98:	cmp	r0, #0
   11a9c:	beq	11adc <__assert_fail@plt+0xdc0>
   11aa0:	ldr	r1, [r5, #4]
   11aa4:	vldr	d16, [pc, #332]	; 11bf8 <__assert_fail@plt+0xedc>
   11aa8:	vmov	s2, r0
   11aac:	sub	r1, r0, r1
   11ab0:	mov	r0, r4
   11ab4:	vmov	s0, r1
   11ab8:	movw	r1, #15372	; 0x3c0c
   11abc:	vcvt.f64.s32	d17, s0
   11ac0:	vcvt.f64.s32	d18, s2
   11ac4:	movt	r1, #1
   11ac8:	vmul.f64	d16, d17, d16
   11acc:	vdiv.f64	d16, d16, d18
   11ad0:	vmov	r2, r3, d16
   11ad4:	bl	10c98 <fprintf@plt>
   11ad8:	b	11af4 <__assert_fail@plt+0xdd8>
   11adc:	movw	r0, #15363	; 0x3c03
   11ae0:	mov	r1, #8
   11ae4:	mov	r2, #1
   11ae8:	mov	r3, r4
   11aec:	movt	r0, #1
   11af0:	bl	10c08 <fwrite@plt>
   11af4:	movw	r0, #15301	; 0x3bc5
   11af8:	mov	r1, #12
   11afc:	mov	r2, #1
   11b00:	mov	r3, r4
   11b04:	mov	r7, #1
   11b08:	movt	r0, #1
   11b0c:	bl	10c08 <fwrite@plt>
   11b10:	movw	r3, #15314	; 0x3bd2
   11b14:	mov	r8, #0
   11b18:	add	r1, r5, #8
   11b1c:	mov	r0, r4
   11b20:	mov	r2, #50	; 0x32
   11b24:	str	r7, [sp, #4]
   11b28:	movt	r3, #1
   11b2c:	str	r8, [sp]
   11b30:	bl	11c00 <__assert_fail@plt+0xee4>
   11b34:	movw	r3, #15333	; 0x3be5
   11b38:	add	r6, r5, #416	; 0x1a0
   11b3c:	mov	r0, r4
   11b40:	mov	r2, #50	; 0x32
   11b44:	str	r8, [sp]
   11b48:	str	r7, [sp, #4]
   11b4c:	movt	r3, #1
   11b50:	mov	r1, r6
   11b54:	bl	11c00 <__assert_fail@plt+0xee4>
   11b58:	movw	r3, #15324	; 0x3bdc
   11b5c:	add	r1, r5, #824	; 0x338
   11b60:	mov	r0, r4
   11b64:	mov	r2, #10
   11b68:	str	r7, [sp]
   11b6c:	str	r7, [sp, #4]
   11b70:	movt	r3, #1
   11b74:	bl	11c00 <__assert_fail@plt+0xee4>
   11b78:	ldr	r0, [r5]
   11b7c:	cmp	r0, #1
   11b80:	blt	11be8 <__assert_fail@plt+0xecc>
   11b84:	movw	r3, #15347	; 0x3bf3
   11b88:	add	r1, r5, #920	; 0x398
   11b8c:	mov	r0, r4
   11b90:	mov	r2, #8
   11b94:	str	r8, [sp]
   11b98:	str	r8, [sp, #4]
   11b9c:	movt	r3, #1
   11ba0:	bl	11c00 <__assert_fail@plt+0xee4>
   11ba4:	ldr	r0, [r5, #8]
   11ba8:	cmp	r0, #1
   11bac:	blt	11bc4 <__assert_fail@plt+0xea8>
   11bb0:	movw	r2, #15314	; 0x3bd2
   11bb4:	add	r1, r5, #992	; 0x3e0
   11bb8:	mov	r0, r4
   11bbc:	movt	r2, #1
   11bc0:	bl	11f60 <__assert_fail@plt+0x1244>
   11bc4:	ldr	r0, [r6]
   11bc8:	cmp	r0, #1
   11bcc:	blt	11be8 <__assert_fail@plt+0xecc>
   11bd0:	movw	r2, #15333	; 0x3be5
   11bd4:	movw	r0, #9048	; 0x2358
   11bd8:	add	r1, r5, r0
   11bdc:	movt	r2, #1
   11be0:	mov	r0, r4
   11be4:	bl	11f60 <__assert_fail@plt+0x1244>
   11be8:	mov	r0, r4
   11bec:	sub	sp, fp, #24
   11bf0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11bf4:	b	12d80 <__assert_fail@plt+0x2064>
   11bf8:	andeq	r0, r0, r0
   11bfc:	subsmi	r0, r9, r0
   11c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c04:	add	fp, sp, #28
   11c08:	sub	sp, sp, #4
   11c0c:	vpush	{d8}
   11c10:	sub	sp, sp, #8
   11c14:	mov	r5, r1
   11c18:	movw	r1, #15378	; 0x3c12
   11c1c:	mov	r8, r2
   11c20:	mov	r2, r3
   11c24:	mov	r4, r0
   11c28:	movt	r1, #1
   11c2c:	bl	10c98 <fprintf@plt>
   11c30:	movw	r0, #15426	; 0x3c42
   11c34:	mov	r1, #26
   11c38:	mov	r2, #1
   11c3c:	mov	r3, r4
   11c40:	mov	r7, #1
   11c44:	movt	r0, #1
   11c48:	bl	10c08 <fwrite@plt>
   11c4c:	movw	r0, #15453	; 0x3c5d
   11c50:	mov	r1, #3
   11c54:	mov	r2, #1
   11c58:	mov	r3, r4
   11c5c:	movt	r0, #1
   11c60:	bl	10c08 <fwrite@plt>
   11c64:	ldrb	r1, [fp, #8]
   11c68:	movw	r0, #15383	; 0x3c17
   11c6c:	movw	r2, #15390	; 0x3c1e
   11c70:	movt	r0, #1
   11c74:	movt	r2, #1
   11c78:	cmp	r1, #0
   11c7c:	str	r1, [sp]
   11c80:	movw	r1, #15379	; 0x3c13
   11c84:	movne	r2, r0
   11c88:	movt	r1, #1
   11c8c:	mov	r0, r4
   11c90:	bl	10c98 <fprintf@plt>
   11c94:	ldr	r1, [fp, #12]
   11c98:	lsl	r0, r8, #16
   11c9c:	sxth	r6, r8
   11ca0:	cmp	r0, #65536	; 0x10000
   11ca4:	str	r1, [sp, #4]
   11ca8:	blt	11d90 <__assert_fail@plt+0x1074>
   11cac:	vldr	d8, [pc, #676]	; 11f58 <__assert_fail@plt+0x123c>
   11cb0:	movw	sl, #15397	; 0x3c25
   11cb4:	mov	r8, #1
   11cb8:	movt	sl, #1
   11cbc:	mov	r0, r5
   11cc0:	ldr	r2, [r0, r7, lsl #3]!
   11cc4:	cmp	r2, #1
   11cc8:	blt	11d80 <__assert_fail@plt+0x1064>
   11ccc:	cmp	r0, #0
   11cd0:	beq	11d30 <__assert_fail@plt+0x1014>
   11cd4:	add	r9, r5, r7, lsl #3
   11cd8:	movw	r1, #15415	; 0x3c37
   11cdc:	mov	r0, r4
   11ce0:	ldr	r3, [r9, #4]!
   11ce4:	movt	r1, #1
   11ce8:	bl	10c98 <fprintf@plt>
   11cec:	ldr	r0, [r5, r7, lsl #3]
   11cf0:	cmp	r0, #0
   11cf4:	beq	11d40 <__assert_fail@plt+0x1024>
   11cf8:	ldr	r1, [r9]
   11cfc:	vmov	s2, r0
   11d00:	sub	r1, r0, r1
   11d04:	mov	r0, r4
   11d08:	vmov	s0, r1
   11d0c:	movw	r1, #15372	; 0x3c0c
   11d10:	vcvt.f64.s32	d16, s0
   11d14:	vcvt.f64.s32	d17, s2
   11d18:	movt	r1, #1
   11d1c:	vmul.f64	d16, d16, d8
   11d20:	vdiv.f64	d16, d16, d17
   11d24:	vmov	r2, r3, d16
   11d28:	bl	10c98 <fprintf@plt>
   11d2c:	b	11d58 <__assert_fail@plt+0x103c>
   11d30:	movw	r0, #15426	; 0x3c42
   11d34:	mov	r1, #26
   11d38:	movt	r0, #1
   11d3c:	b	11d4c <__assert_fail@plt+0x1030>
   11d40:	movw	r0, #15363	; 0x3c03
   11d44:	mov	r1, #8
   11d48:	movt	r0, #1
   11d4c:	mov	r2, #1
   11d50:	mov	r3, r4
   11d54:	bl	10c08 <fwrite@plt>
   11d58:	movw	r0, #15453	; 0x3c5d
   11d5c:	mov	r1, #3
   11d60:	mov	r2, #1
   11d64:	mov	r3, r4
   11d68:	movt	r0, #1
   11d6c:	bl	10c08 <fwrite@plt>
   11d70:	mov	r0, r4
   11d74:	mov	r1, sl
   11d78:	mov	r2, r7
   11d7c:	bl	10c98 <fprintf@plt>
   11d80:	add	r8, r8, #1
   11d84:	sxth	r7, r8
   11d88:	cmp	r6, r7
   11d8c:	bge	11cbc <__assert_fail@plt+0xfa0>
   11d90:	ldr	r0, [sp]
   11d94:	cmp	r0, #0
   11d98:	beq	11e6c <__assert_fail@plt+0x1150>
   11d9c:	add	r7, r6, #1
   11da0:	mov	r0, r5
   11da4:	ldr	r2, [r0, r7, lsl #3]!
   11da8:	cmp	r2, #1
   11dac:	blt	11e6c <__assert_fail@plt+0x1150>
   11db0:	cmp	r0, #0
   11db4:	beq	11e18 <__assert_fail@plt+0x10fc>
   11db8:	add	r8, r5, r7, lsl #3
   11dbc:	movw	r1, #15415	; 0x3c37
   11dc0:	mov	r0, r4
   11dc4:	ldr	r3, [r8, #4]!
   11dc8:	movt	r1, #1
   11dcc:	bl	10c98 <fprintf@plt>
   11dd0:	ldr	r0, [r5, r7, lsl #3]
   11dd4:	cmp	r0, #0
   11dd8:	beq	11e28 <__assert_fail@plt+0x110c>
   11ddc:	ldr	r1, [r8]
   11de0:	vldr	d16, [pc, #368]	; 11f58 <__assert_fail@plt+0x123c>
   11de4:	vmov	s2, r0
   11de8:	sub	r1, r0, r1
   11dec:	mov	r0, r4
   11df0:	vmov	s0, r1
   11df4:	movw	r1, #15372	; 0x3c0c
   11df8:	vcvt.f64.s32	d17, s0
   11dfc:	vcvt.f64.s32	d18, s2
   11e00:	movt	r1, #1
   11e04:	vmul.f64	d16, d17, d16
   11e08:	vdiv.f64	d16, d16, d18
   11e0c:	vmov	r2, r3, d16
   11e10:	bl	10c98 <fprintf@plt>
   11e14:	b	11e40 <__assert_fail@plt+0x1124>
   11e18:	movw	r0, #15426	; 0x3c42
   11e1c:	mov	r1, #26
   11e20:	movt	r0, #1
   11e24:	b	11e34 <__assert_fail@plt+0x1118>
   11e28:	movw	r0, #15363	; 0x3c03
   11e2c:	mov	r1, #8
   11e30:	movt	r0, #1
   11e34:	mov	r2, #1
   11e38:	mov	r3, r4
   11e3c:	bl	10c08 <fwrite@plt>
   11e40:	movw	r0, #15453	; 0x3c5d
   11e44:	mov	r1, #3
   11e48:	mov	r2, #1
   11e4c:	mov	r3, r4
   11e50:	movt	r0, #1
   11e54:	bl	10c08 <fwrite@plt>
   11e58:	movw	r1, #15406	; 0x3c2e
   11e5c:	mov	r0, r4
   11e60:	mov	r2, r6
   11e64:	movt	r1, #1
   11e68:	bl	10c98 <fprintf@plt>
   11e6c:	ldr	r0, [sp, #4]
   11e70:	tst	r0, #255	; 0xff
   11e74:	beq	11edc <__assert_fail@plt+0x11c0>
   11e78:	cmp	r5, #0
   11e7c:	beq	11eec <__assert_fail@plt+0x11d0>
   11e80:	ldm	r5, {r2, r3}
   11e84:	movw	r1, #15415	; 0x3c37
   11e88:	mov	r0, r4
   11e8c:	movt	r1, #1
   11e90:	bl	10c98 <fprintf@plt>
   11e94:	ldr	r0, [r5]
   11e98:	cmp	r0, #0
   11e9c:	beq	11efc <__assert_fail@plt+0x11e0>
   11ea0:	ldr	r1, [r5, #4]
   11ea4:	vldr	d16, [pc, #172]	; 11f58 <__assert_fail@plt+0x123c>
   11ea8:	vmov	s2, r0
   11eac:	sub	r1, r0, r1
   11eb0:	mov	r0, r4
   11eb4:	vmov	s0, r1
   11eb8:	movw	r1, #15372	; 0x3c0c
   11ebc:	vcvt.f64.s32	d17, s0
   11ec0:	vcvt.f64.s32	d18, s2
   11ec4:	movt	r1, #1
   11ec8:	vmul.f64	d16, d17, d16
   11ecc:	vdiv.f64	d16, d16, d18
   11ed0:	vmov	r2, r3, d16
   11ed4:	bl	10c98 <fprintf@plt>
   11ed8:	b	11f14 <__assert_fail@plt+0x11f8>
   11edc:	sub	sp, fp, #40	; 0x28
   11ee0:	vpop	{d8}
   11ee4:	add	sp, sp, #4
   11ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eec:	movw	r0, #15426	; 0x3c42
   11ef0:	mov	r1, #26
   11ef4:	movt	r0, #1
   11ef8:	b	11f08 <__assert_fail@plt+0x11ec>
   11efc:	movw	r0, #15363	; 0x3c03
   11f00:	mov	r1, #8
   11f04:	movt	r0, #1
   11f08:	mov	r2, #1
   11f0c:	mov	r3, r4
   11f10:	bl	10c08 <fwrite@plt>
   11f14:	movw	r0, #15453	; 0x3c5d
   11f18:	mov	r1, #3
   11f1c:	mov	r2, #1
   11f20:	mov	r3, r4
   11f24:	movt	r0, #1
   11f28:	bl	10c08 <fwrite@plt>
   11f2c:	movw	r0, #15109	; 0x3b05
   11f30:	mov	r1, #7
   11f34:	mov	r2, #1
   11f38:	mov	r3, r4
   11f3c:	movt	r0, #1
   11f40:	sub	sp, fp, #40	; 0x28
   11f44:	vpop	{d8}
   11f48:	add	sp, sp, #4
   11f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f50:	b	10c08 <fwrite@plt>
   11f54:	nop	{0}
   11f58:	andeq	r0, r0, r0
   11f5c:	subsmi	r0, r9, r0
   11f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f64:	add	fp, sp, #28
   11f68:	sub	sp, sp, #4
   11f6c:	vpush	{d8}
   11f70:	mov	r5, r0
   11f74:	mov	r0, r1
   11f78:	mov	r6, r2
   11f7c:	mov	r8, r1
   11f80:	bl	122dc <__assert_fail@plt+0x15c0>
   11f84:	movw	r0, #8052	; 0x1f74
   11f88:	movw	r2, #8416	; 0x20e0
   11f8c:	ldr	r0, [r8, r0]!
   11f90:	movt	r2, #1
   11f94:	mov	r4, r8
   11f98:	ldr	r1, [r4, #-4]!
   11f9c:	bl	11454 <__assert_fail@plt+0x738>
   11fa0:	movw	r1, #15378	; 0x3c12
   11fa4:	mov	r0, r5
   11fa8:	mov	r2, r6
   11fac:	movt	r1, #1
   11fb0:	bl	10c98 <fprintf@plt>
   11fb4:	movw	r0, #15426	; 0x3c42
   11fb8:	mov	r1, #26
   11fbc:	mov	r2, #1
   11fc0:	mov	r3, r5
   11fc4:	movt	r0, #1
   11fc8:	bl	10c08 <fwrite@plt>
   11fcc:	movw	r0, #15453	; 0x3c5d
   11fd0:	mov	r1, #3
   11fd4:	mov	r2, #1
   11fd8:	mov	r3, r5
   11fdc:	movt	r0, #1
   11fe0:	bl	10c08 <fwrite@plt>
   11fe4:	mov	r0, #10
   11fe8:	mov	r1, r5
   11fec:	bl	10cc8 <fputc@plt>
   11ff0:	ldr	r0, [r8]
   11ff4:	cmp	r0, #1
   11ff8:	blt	120cc <__assert_fail@plt+0x13b0>
   11ffc:	vldr	d8, [pc, #212]	; 120d8 <__assert_fail@plt+0x13bc>
   12000:	movw	r7, #15453	; 0x3c5d
   12004:	movw	r6, #15379	; 0x3c13
   12008:	mov	sl, #0
   1200c:	movt	r7, #1
   12010:	movt	r6, #1
   12014:	ldr	r0, [r4]
   12018:	movw	r1, #15415	; 0x3c37
   1201c:	movt	r1, #1
   12020:	ldr	r9, [r0, sl, lsl #2]
   12024:	mov	r0, r5
   12028:	ldr	r2, [r9, #12]
   1202c:	ldr	r3, [r9, #16]
   12030:	bl	10c98 <fprintf@plt>
   12034:	ldr	r0, [r9, #12]
   12038:	cmp	r0, #0
   1203c:	beq	12078 <__assert_fail@plt+0x135c>
   12040:	ldr	r1, [r9, #16]
   12044:	vmov	s2, r0
   12048:	sub	r1, r0, r1
   1204c:	mov	r0, r5
   12050:	vmov	s0, r1
   12054:	movw	r1, #15372	; 0x3c0c
   12058:	vcvt.f64.s32	d16, s0
   1205c:	vcvt.f64.s32	d17, s2
   12060:	movt	r1, #1
   12064:	vmul.f64	d16, d16, d8
   12068:	vdiv.f64	d16, d16, d17
   1206c:	vmov	r2, r3, d16
   12070:	bl	10c98 <fprintf@plt>
   12074:	b	12090 <__assert_fail@plt+0x1374>
   12078:	movw	r0, #15363	; 0x3c03
   1207c:	mov	r1, #8
   12080:	mov	r2, #1
   12084:	mov	r3, r5
   12088:	movt	r0, #1
   1208c:	bl	10c08 <fwrite@plt>
   12090:	mov	r0, r7
   12094:	mov	r1, #3
   12098:	mov	r2, #1
   1209c:	mov	r3, r5
   120a0:	bl	10c08 <fwrite@plt>
   120a4:	ldr	r0, [r4]
   120a8:	mov	r1, r6
   120ac:	ldr	r0, [r0, sl, lsl #2]
   120b0:	ldr	r2, [r0, #8]
   120b4:	mov	r0, r5
   120b8:	bl	10c98 <fprintf@plt>
   120bc:	ldr	r0, [r8]
   120c0:	add	sl, sl, #1
   120c4:	cmp	sl, r0
   120c8:	blt	12014 <__assert_fail@plt+0x12f8>
   120cc:	vpop	{d8}
   120d0:	add	sp, sp, #4
   120d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120d8:	andeq	r0, r0, r0
   120dc:	subsmi	r0, r9, r0
   120e0:	ldr	r1, [r1, #8]
   120e4:	ldr	r0, [r0, #8]
   120e8:	b	12c8c <__assert_fail@plt+0x1f70>
   120ec:	push	{r4, r5, r6, sl, fp, lr}
   120f0:	add	fp, sp, #16
   120f4:	mov	r4, r0
   120f8:	movw	r6, #503	; 0x1f7
   120fc:	mov	r5, r0
   12100:	mov	r0, r5
   12104:	bl	111b4 <__assert_fail@plt+0x498>
   12108:	subs	r6, r6, #1
   1210c:	add	r5, r5, #16
   12110:	bne	12100 <__assert_fail@plt+0x13e4>
   12114:	movw	r0, #8052	; 0x1f74
   12118:	mov	r1, #0
   1211c:	str	r1, [r4, r0]
   12120:	movw	r0, #8048	; 0x1f70
   12124:	str	r1, [r4, r0]
   12128:	pop	{r4, r5, r6, sl, fp, pc}
   1212c:	push	{r4, r5, r6, sl, fp, lr}
   12130:	add	fp, sp, #16
   12134:	mov	r5, r1
   12138:	ldrb	r1, [r1]
   1213c:	mov	r4, #0
   12140:	mov	r2, #0
   12144:	cmp	r1, #0
   12148:	beq	1217c <__assert_fail@plt+0x1460>
   1214c:	add	r3, r5, #1
   12150:	mov	r2, #0
   12154:	uxtab	r2, r2, r1
   12158:	ldrb	r1, [r3], #1
   1215c:	cmp	r1, #0
   12160:	bne	12154 <__assert_fail@plt+0x1438>
   12164:	movw	r1, #20065	; 0x4e61
   12168:	movt	r1, #33354	; 0x824a
   1216c:	umull	r1, r3, r2, r1
   12170:	lsr	r1, r3, #8
   12174:	movw	r3, #503	; 0x1f7
   12178:	mls	r2, r1, r3, r2
   1217c:	ldr	r6, [r0, r2, lsl #4]
   12180:	cmp	r6, #0
   12184:	bne	1219c <__assert_fail@plt+0x1480>
   12188:	mov	r0, r4
   1218c:	pop	{r4, r5, r6, sl, fp, pc}
   12190:	ldr	r6, [r6, #4]
   12194:	cmp	r6, #0
   12198:	beq	12188 <__assert_fail@plt+0x146c>
   1219c:	ldr	r1, [r6, #8]
   121a0:	mov	r0, r5
   121a4:	bl	10b6c <strcmp@plt>
   121a8:	cmp	r0, #0
   121ac:	bne	12190 <__assert_fail@plt+0x1474>
   121b0:	mov	r4, r6
   121b4:	mov	r0, r4
   121b8:	pop	{r4, r5, r6, sl, fp, pc}
   121bc:	push	{r4, r5, fp, lr}
   121c0:	add	fp, sp, #8
   121c4:	mov	r4, r0
   121c8:	ldr	r0, [r1, #8]
   121cc:	ldrb	r2, [r0]
   121d0:	cmp	r2, #0
   121d4:	beq	1220c <__assert_fail@plt+0x14f0>
   121d8:	add	r3, r0, #1
   121dc:	mov	r0, #0
   121e0:	uxtab	r0, r0, r2
   121e4:	ldrb	r2, [r3], #1
   121e8:	cmp	r2, #0
   121ec:	bne	121e0 <__assert_fail@plt+0x14c4>
   121f0:	movw	r2, #20065	; 0x4e61
   121f4:	movt	r2, #33354	; 0x824a
   121f8:	umull	r2, r3, r0, r2
   121fc:	lsr	r2, r3, #8
   12200:	movw	r3, #503	; 0x1f7
   12204:	mls	r0, r2, r3, r0
   12208:	b	12210 <__assert_fail@plt+0x14f4>
   1220c:	mov	r0, #0
   12210:	add	r0, r4, r0, lsl #4
   12214:	bl	111c0 <__assert_fail@plt+0x4a4>
   12218:	movw	r0, #8048	; 0x1f70
   1221c:	mov	r5, r4
   12220:	ldr	r0, [r5, r0]!
   12224:	cmp	r0, #0
   12228:	beq	12238 <__assert_fail@plt+0x151c>
   1222c:	bl	10b9c <free@plt>
   12230:	mov	r0, #0
   12234:	str	r0, [r5]
   12238:	movw	r0, #8052	; 0x1f74
   1223c:	ldr	r0, [r4, r0]!
   12240:	add	r0, r0, #1
   12244:	str	r0, [r4]
   12248:	pop	{r4, r5, fp, pc}
   1224c:	push	{r4, r5, fp, lr}
   12250:	add	fp, sp, #8
   12254:	mov	r4, r0
   12258:	ldr	r0, [r1, #8]
   1225c:	ldrb	r2, [r0]
   12260:	cmp	r2, #0
   12264:	beq	1229c <__assert_fail@plt+0x1580>
   12268:	add	r3, r0, #1
   1226c:	mov	r0, #0
   12270:	uxtab	r0, r0, r2
   12274:	ldrb	r2, [r3], #1
   12278:	cmp	r2, #0
   1227c:	bne	12270 <__assert_fail@plt+0x1554>
   12280:	movw	r2, #20065	; 0x4e61
   12284:	movt	r2, #33354	; 0x824a
   12288:	umull	r2, r3, r0, r2
   1228c:	lsr	r2, r3, #8
   12290:	movw	r3, #503	; 0x1f7
   12294:	mls	r0, r2, r3, r0
   12298:	b	122a0 <__assert_fail@plt+0x1584>
   1229c:	mov	r0, #0
   122a0:	add	r0, r4, r0, lsl #4
   122a4:	bl	11308 <__assert_fail@plt+0x5ec>
   122a8:	movw	r0, #8048	; 0x1f70
   122ac:	mov	r5, r4
   122b0:	ldr	r0, [r5, r0]!
   122b4:	cmp	r0, #0
   122b8:	beq	122c8 <__assert_fail@plt+0x15ac>
   122bc:	bl	10b9c <free@plt>
   122c0:	mov	r0, #0
   122c4:	str	r0, [r5]
   122c8:	movw	r0, #8052	; 0x1f74
   122cc:	ldr	r0, [r4, r0]!
   122d0:	sub	r0, r0, #1
   122d4:	str	r0, [r4]
   122d8:	pop	{r4, r5, fp, pc}
   122dc:	push	{r4, r5, fp, lr}
   122e0:	add	fp, sp, #8
   122e4:	mov	r4, r0
   122e8:	movw	r0, #8048	; 0x1f70
   122ec:	mov	r5, r4
   122f0:	ldr	r0, [r5, r0]!
   122f4:	cmp	r0, #0
   122f8:	bne	12354 <__assert_fail@plt+0x1638>
   122fc:	movw	r0, #8052	; 0x1f74
   12300:	ldr	r0, [r4, r0]
   12304:	cmp	r0, #0
   12308:	popeq	{r4, r5, fp, pc}
   1230c:	mov	r1, #4
   12310:	bl	12c6c <__assert_fail@plt+0x1f50>
   12314:	str	r0, [r5]
   12318:	mov	r0, #0
   1231c:	movw	ip, #503	; 0x1f7
   12320:	mov	r2, #0
   12324:	ldr	r3, [r4, r2, lsl #4]
   12328:	cmp	r3, #0
   1232c:	beq	12348 <__assert_fail@plt+0x162c>
   12330:	ldr	r1, [r5]
   12334:	str	r3, [r1, r0, lsl #2]
   12338:	add	r0, r0, #1
   1233c:	ldr	r3, [r3, #4]
   12340:	cmp	r3, #0
   12344:	bne	12330 <__assert_fail@plt+0x1614>
   12348:	add	r2, r2, #1
   1234c:	cmp	r2, ip
   12350:	bne	12324 <__assert_fail@plt+0x1608>
   12354:	pop	{r4, r5, fp, pc}
   12358:	push	{r4, r5, r6, r7, fp, lr}
   1235c:	add	fp, sp, #16
   12360:	mov	r5, r1
   12364:	mov	r4, r0
   12368:	movw	r7, #503	; 0x1f7
   1236c:	mov	r6, r0
   12370:	mov	r0, r6
   12374:	mov	r1, r5
   12378:	bl	113d4 <__assert_fail@plt+0x6b8>
   1237c:	subs	r7, r7, #1
   12380:	add	r6, r6, #16
   12384:	bne	12370 <__assert_fail@plt+0x1654>
   12388:	movw	r0, #8048	; 0x1f70
   1238c:	mov	r5, r4
   12390:	ldr	r0, [r5, r0]!
   12394:	cmp	r0, #0
   12398:	beq	123a8 <__assert_fail@plt+0x168c>
   1239c:	bl	10b9c <free@plt>
   123a0:	mov	r0, #0
   123a4:	str	r0, [r5]
   123a8:	movw	r0, #8052	; 0x1f74
   123ac:	mov	r1, #0
   123b0:	str	r1, [r4, r0]
   123b4:	pop	{r4, r5, r6, r7, fp, pc}
   123b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123bc:	add	fp, sp, #28
   123c0:	sub	sp, sp, #28
   123c4:	ldr	r8, [r1]
   123c8:	str	r0, [sp, #4]
   123cc:	cmp	r8, #0
   123d0:	str	r8, [sp, #16]
   123d4:	beq	12be4 <__assert_fail@plt+0x1ec8>
   123d8:	movw	sl, #15460	; 0x3c64
   123dc:	add	r9, sp, #12
   123e0:	movt	sl, #1
   123e4:	mov	r0, #17
   123e8:	mov	r1, r8
   123ec:	mov	r5, r9
   123f0:	mov	lr, r0
   123f4:	mov	r9, #18
   123f8:	cmp	r5, #0
   123fc:	beq	12568 <__assert_fail@plt+0x184c>
   12400:	mov	r5, r1
   12404:	ldr	r0, [r5, #12]
   12408:	mov	r2, #0
   1240c:	movw	r1, #1092	; 0x444
   12410:	sub	r3, r1, r2
   12414:	add	r3, r2, r3, lsr #1
   12418:	add	r7, r3, r3, lsl #1
   1241c:	ldr	r6, [sl, r7, lsl #2]
   12420:	cmp	r6, r0
   12424:	bls	12438 <__assert_fail@plt+0x171c>
   12428:	sub	r1, r3, #1
   1242c:	cmp	r1, r2
   12430:	bcs	12410 <__assert_fail@plt+0x16f4>
   12434:	b	12484 <__assert_fail@plt+0x1768>
   12438:	add	r2, sl, r7, lsl #2
   1243c:	ldr	r7, [r2, #4]
   12440:	cmp	r7, r0
   12444:	bcs	12458 <__assert_fail@plt+0x173c>
   12448:	add	r2, r3, #1
   1244c:	cmp	r1, r2
   12450:	bcs	12410 <__assert_fail@plt+0x16f4>
   12454:	b	12484 <__assert_fail@plt+0x1768>
   12458:	ldr	r1, [r2, #8]
   1245c:	orr	r1, r1, #2
   12460:	cmp	r1, #6
   12464:	bne	12484 <__assert_fail@plt+0x1768>
   12468:	ldr	r5, [r5, #4]
   1246c:	cmp	r5, #0
   12470:	bne	12404 <__assert_fail@plt+0x16e8>
   12474:	mov	r2, #18
   12478:	mov	ip, #18
   1247c:	mov	r5, #0
   12480:	b	127b0 <__assert_fail@plt+0x1a94>
   12484:	cmp	r5, #0
   12488:	beq	12568 <__assert_fail@plt+0x184c>
   1248c:	mov	r2, #0
   12490:	movw	r1, #1092	; 0x444
   12494:	sub	r3, r1, r2
   12498:	add	r3, r2, r3, lsr #1
   1249c:	add	r7, r3, r3, lsl #1
   124a0:	ldr	r6, [sl, r7, lsl #2]
   124a4:	cmp	r6, r0
   124a8:	bls	124bc <__assert_fail@plt+0x17a0>
   124ac:	sub	r1, r3, #1
   124b0:	cmp	r1, r2
   124b4:	bcs	12494 <__assert_fail@plt+0x1778>
   124b8:	b	124d8 <__assert_fail@plt+0x17bc>
   124bc:	add	r2, sl, r7, lsl #2
   124c0:	ldr	r7, [r2, #4]
   124c4:	cmp	r7, r0
   124c8:	bcs	1279c <__assert_fail@plt+0x1a80>
   124cc:	add	r2, r3, #1
   124d0:	cmp	r1, r2
   124d4:	bcs	12494 <__assert_fail@plt+0x1778>
   124d8:	mov	ip, #0
   124dc:	ldr	r6, [r5, #4]
   124e0:	cmp	r6, #0
   124e4:	beq	127ac <__assert_fail@plt+0x1a90>
   124e8:	mov	r2, r6
   124ec:	str	r5, [sp, #8]
   124f0:	ldr	r0, [r2, #12]
   124f4:	mov	r4, #0
   124f8:	movw	r3, #1092	; 0x444
   124fc:	sub	r7, r3, r4
   12500:	add	r7, r4, r7, lsr #1
   12504:	add	r5, r7, r7, lsl #1
   12508:	ldr	r1, [sl, r5, lsl #2]
   1250c:	cmp	r1, r0
   12510:	bls	12524 <__assert_fail@plt+0x1808>
   12514:	sub	r3, r7, #1
   12518:	cmp	r3, r4
   1251c:	bcs	124fc <__assert_fail@plt+0x17e0>
   12520:	b	12578 <__assert_fail@plt+0x185c>
   12524:	add	r5, sl, r5, lsl #2
   12528:	ldr	r1, [r5, #4]
   1252c:	cmp	r1, r0
   12530:	bcs	12544 <__assert_fail@plt+0x1828>
   12534:	add	r4, r7, #1
   12538:	cmp	r3, r4
   1253c:	bcs	124fc <__assert_fail@plt+0x17e0>
   12540:	b	12578 <__assert_fail@plt+0x185c>
   12544:	ldr	r1, [r5, #8]
   12548:	orr	r1, r1, #2
   1254c:	cmp	r1, #6
   12550:	bne	12578 <__assert_fail@plt+0x185c>
   12554:	ldr	r2, [r2, #4]
   12558:	cmp	r2, #0
   1255c:	bne	124f0 <__assert_fail@plt+0x17d4>
   12560:	mov	r2, #18
   12564:	b	125e0 <__assert_fail@plt+0x18c4>
   12568:	mov	r5, #0
   1256c:	mov	r2, #18
   12570:	mov	ip, #18
   12574:	b	127b0 <__assert_fail@plt+0x1a94>
   12578:	cmp	r2, #0
   1257c:	beq	125dc <__assert_fail@plt+0x18c0>
   12580:	mov	r3, #0
   12584:	movw	r2, #1092	; 0x444
   12588:	sub	r1, r2, r3
   1258c:	add	r7, r3, r1, lsr #1
   12590:	add	r5, r7, r7, lsl #1
   12594:	ldr	r1, [sl, r5, lsl #2]
   12598:	cmp	r1, r0
   1259c:	bls	125b0 <__assert_fail@plt+0x1894>
   125a0:	sub	r2, r7, #1
   125a4:	cmp	r2, r3
   125a8:	bcs	12588 <__assert_fail@plt+0x186c>
   125ac:	b	125d4 <__assert_fail@plt+0x18b8>
   125b0:	add	r3, sl, r5, lsl #2
   125b4:	ldr	r1, [r3, #4]
   125b8:	cmp	r1, r0
   125bc:	bcs	12940 <__assert_fail@plt+0x1c24>
   125c0:	add	r3, r7, #1
   125c4:	cmp	r2, r3
   125c8:	bcs	12588 <__assert_fail@plt+0x186c>
   125cc:	mov	r2, #0
   125d0:	b	125e0 <__assert_fail@plt+0x18c4>
   125d4:	mov	r2, #0
   125d8:	b	125e0 <__assert_fail@plt+0x18c4>
   125dc:	mov	r2, #18
   125e0:	ldr	r0, [r6, #12]
   125e4:	mov	r4, #0
   125e8:	movw	r3, #1092	; 0x444
   125ec:	sub	r1, r3, r4
   125f0:	add	r7, r4, r1, lsr #1
   125f4:	add	r5, r7, r7, lsl #1
   125f8:	ldr	r1, [sl, r5, lsl #2]
   125fc:	cmp	r1, r0
   12600:	bls	12614 <__assert_fail@plt+0x18f8>
   12604:	sub	r3, r7, #1
   12608:	cmp	r3, r4
   1260c:	bcs	125ec <__assert_fail@plt+0x18d0>
   12610:	b	1266c <__assert_fail@plt+0x1950>
   12614:	add	r5, sl, r5, lsl #2
   12618:	ldr	r1, [r5, #4]
   1261c:	cmp	r1, r0
   12620:	bcs	12634 <__assert_fail@plt+0x1918>
   12624:	add	r4, r7, #1
   12628:	cmp	r3, r4
   1262c:	bcs	125ec <__assert_fail@plt+0x18d0>
   12630:	b	1266c <__assert_fail@plt+0x1950>
   12634:	ldr	r0, [r5, #8]
   12638:	orr	r0, r0, #2
   1263c:	cmp	r0, #6
   12640:	bne	1266c <__assert_fail@plt+0x1950>
   12644:	ldr	r6, [r6, #4]
   12648:	cmp	r6, #0
   1264c:	bne	125e0 <__assert_fail@plt+0x18c4>
   12650:	ldr	r5, [sp, #8]
   12654:	mov	r9, #18
   12658:	cmp	ip, #1
   1265c:	moveq	r0, #1
   12660:	cmpeq	r2, #2
   12664:	bne	127b0 <__assert_fail@plt+0x1a94>
   12668:	b	128c0 <__assert_fail@plt+0x1ba4>
   1266c:	mov	r9, #18
   12670:	cmp	r6, #0
   12674:	beq	1276c <__assert_fail@plt+0x1a50>
   12678:	ldr	r6, [r6, #4]
   1267c:	cmp	r6, #0
   12680:	beq	126f4 <__assert_fail@plt+0x19d8>
   12684:	ldr	r0, [r6, #12]
   12688:	mov	r3, #0
   1268c:	movw	r4, #1092	; 0x444
   12690:	sub	r1, r4, r3
   12694:	add	r7, r3, r1, lsr #1
   12698:	add	r5, r7, r7, lsl #1
   1269c:	ldr	r1, [sl, r5, lsl #2]
   126a0:	cmp	r1, r0
   126a4:	bls	126b8 <__assert_fail@plt+0x199c>
   126a8:	sub	r4, r7, #1
   126ac:	cmp	r4, r3
   126b0:	bcs	12690 <__assert_fail@plt+0x1974>
   126b4:	b	1270c <__assert_fail@plt+0x19f0>
   126b8:	add	r3, sl, r5, lsl #2
   126bc:	ldr	r1, [r3, #4]
   126c0:	cmp	r1, r0
   126c4:	bcs	126d8 <__assert_fail@plt+0x19bc>
   126c8:	add	r3, r7, #1
   126cc:	cmp	r4, r3
   126d0:	bcs	12690 <__assert_fail@plt+0x1974>
   126d4:	b	1270c <__assert_fail@plt+0x19f0>
   126d8:	ldr	r1, [r3, #8]
   126dc:	orr	r1, r1, #2
   126e0:	cmp	r1, #6
   126e4:	bne	1270c <__assert_fail@plt+0x19f0>
   126e8:	ldr	r6, [r6, #4]
   126ec:	cmp	r6, #0
   126f0:	bne	12684 <__assert_fail@plt+0x1968>
   126f4:	ldr	r5, [sp, #8]
   126f8:	cmp	ip, #1
   126fc:	moveq	r0, #1
   12700:	cmpeq	r2, #2
   12704:	bne	127b0 <__assert_fail@plt+0x1a94>
   12708:	b	128c0 <__assert_fail@plt+0x1ba4>
   1270c:	ldr	r5, [sp, #8]
   12710:	cmp	r6, #0
   12714:	beq	12770 <__assert_fail@plt+0x1a54>
   12718:	mov	r4, #0
   1271c:	movw	r6, #1092	; 0x444
   12720:	sub	r1, r6, r4
   12724:	add	r3, r4, r1, lsr #1
   12728:	add	r7, r3, r3, lsl #1
   1272c:	ldr	r1, [sl, r7, lsl #2]
   12730:	cmp	r1, r0
   12734:	bls	12748 <__assert_fail@plt+0x1a2c>
   12738:	sub	r6, r3, #1
   1273c:	cmp	r6, r4
   12740:	bcs	12720 <__assert_fail@plt+0x1a04>
   12744:	b	12784 <__assert_fail@plt+0x1a68>
   12748:	add	r7, sl, r7, lsl #2
   1274c:	ldr	r1, [r7, #4]
   12750:	cmp	r1, r0
   12754:	bcs	12a00 <__assert_fail@plt+0x1ce4>
   12758:	add	r4, r3, #1
   1275c:	mov	r9, #0
   12760:	cmp	r6, r4
   12764:	bcs	12720 <__assert_fail@plt+0x1a04>
   12768:	b	12770 <__assert_fail@plt+0x1a54>
   1276c:	ldr	r5, [sp, #8]
   12770:	cmp	ip, #1
   12774:	moveq	r0, #1
   12778:	cmpeq	r2, #2
   1277c:	bne	127b0 <__assert_fail@plt+0x1a94>
   12780:	b	128c0 <__assert_fail@plt+0x1ba4>
   12784:	mov	r9, #0
   12788:	cmp	ip, #1
   1278c:	moveq	r0, #1
   12790:	cmpeq	r2, #2
   12794:	bne	127b0 <__assert_fail@plt+0x1a94>
   12798:	b	128c0 <__assert_fail@plt+0x1ba4>
   1279c:	ldr	ip, [r2, #8]
   127a0:	ldr	r6, [r5, #4]
   127a4:	cmp	r6, #0
   127a8:	bne	124e8 <__assert_fail@plt+0x17cc>
   127ac:	mov	r2, #18
   127b0:	sub	r0, r2, #1
   127b4:	cmp	r0, #3
   127b8:	subcs	r0, ip, #1
   127bc:	cmpcs	r0, #3
   127c0:	bcc	12a28 <__assert_fail@plt+0x1d0c>
   127c4:	orr	r6, r2, #1
   127c8:	orr	r4, ip, #1
   127cc:	cmp	r6, #9
   127d0:	cmpeq	r4, #9
   127d4:	beq	128bc <__assert_fail@plt+0x1ba0>
   127d8:	cmp	r4, #9
   127dc:	bne	12818 <__assert_fail@plt+0x1afc>
   127e0:	cmp	r2, #13
   127e4:	bhi	12818 <__assert_fail@plt+0x1afc>
   127e8:	mov	r0, #1
   127ec:	mov	r1, #13312	; 0x3400
   127f0:	tst	r1, r0, lsl r2
   127f4:	beq	12818 <__assert_fail@plt+0x1afc>
   127f8:	orr	r0, r9, #1
   127fc:	cmp	r0, #9
   12800:	bne	12818 <__assert_fail@plt+0x1afc>
   12804:	mov	r0, ip
   12808:	ldr	r1, [r5, #4]
   1280c:	cmp	r1, #0
   12810:	bne	123f0 <__assert_fail@plt+0x16d4>
   12814:	b	12a28 <__assert_fail@plt+0x1d0c>
   12818:	orr	r0, lr, #1
   1281c:	cmp	r0, #9
   12820:	bne	12858 <__assert_fail@plt+0x1b3c>
   12824:	cmp	ip, #13
   12828:	bhi	12858 <__assert_fail@plt+0x1b3c>
   1282c:	mov	r0, #1
   12830:	mov	r1, #13312	; 0x3400
   12834:	tst	r1, r0, lsl ip
   12838:	beq	12858 <__assert_fail@plt+0x1b3c>
   1283c:	cmp	r6, #9
   12840:	bne	12858 <__assert_fail@plt+0x1b3c>
   12844:	mov	r0, ip
   12848:	ldr	r1, [r5, #4]
   1284c:	cmp	r1, #0
   12850:	bne	123f0 <__assert_fail@plt+0x16d4>
   12854:	b	12a28 <__assert_fail@plt+0x1d0c>
   12858:	cmp	r2, #10
   1285c:	mov	r0, #8
   12860:	cmpeq	ip, #8
   12864:	beq	128c0 <__assert_fail@plt+0x1ba4>
   12868:	cmp	r9, #8
   1286c:	cmpeq	r2, #11
   12870:	beq	128d0 <__assert_fail@plt+0x1bb4>
   12874:	cmp	r2, #8
   12878:	cmpeq	lr, #8
   1287c:	beq	128dc <__assert_fail@plt+0x1bc0>
   12880:	sub	r0, r4, #9
   12884:	cmp	r2, #15
   12888:	clz	r0, r0
   1288c:	lsr	r1, r0, #5
   12890:	bne	128ec <__assert_fail@plt+0x1bd0>
   12894:	sub	r0, ip, #15
   12898:	clz	r0, r0
   1289c:	lsr	r0, r0, #5
   128a0:	orrs	r0, r0, r1
   128a4:	beq	128ec <__assert_fail@plt+0x1bd0>
   128a8:	mov	r0, ip
   128ac:	ldr	r1, [r5, #4]
   128b0:	cmp	r1, #0
   128b4:	bne	123f0 <__assert_fail@plt+0x16d4>
   128b8:	b	12a28 <__assert_fail@plt+0x1d0c>
   128bc:	mov	r0, ip
   128c0:	ldr	r1, [r5, #4]
   128c4:	cmp	r1, #0
   128c8:	bne	123f0 <__assert_fail@plt+0x16d4>
   128cc:	b	12a28 <__assert_fail@plt+0x1d0c>
   128d0:	cmp	ip, #8
   128d4:	beq	128c0 <__assert_fail@plt+0x1ba4>
   128d8:	b	12874 <__assert_fail@plt+0x1b58>
   128dc:	mov	r0, #11
   128e0:	cmp	ip, #11
   128e4:	beq	128c0 <__assert_fail@plt+0x1ba4>
   128e8:	b	12880 <__assert_fail@plt+0x1b64>
   128ec:	cmp	ip, #15
   128f0:	mov	r0, #15
   128f4:	cmpeq	r6, #9
   128f8:	beq	128c0 <__assert_fail@plt+0x1ba4>
   128fc:	cmp	lr, #15
   12900:	cmpeq	r2, #15
   12904:	beq	1299c <__assert_fail@plt+0x1c80>
   12908:	cmp	ip, #15
   1290c:	bne	12948 <__assert_fail@plt+0x1c2c>
   12910:	cmp	r9, #15
   12914:	bne	12958 <__assert_fail@plt+0x1c3c>
   12918:	orr	r7, r2, #2
   1291c:	sub	r3, r2, #10
   12920:	sub	r7, r7, #14
   12924:	clz	r3, r3
   12928:	clz	r7, r7
   1292c:	lsr	r3, r3, #5
   12930:	lsr	r7, r7, #5
   12934:	orrs	r3, r3, r7
   12938:	bne	128c0 <__assert_fail@plt+0x1ba4>
   1293c:	b	12958 <__assert_fail@plt+0x1c3c>
   12940:	ldr	r2, [r3, #8]
   12944:	b	125e0 <__assert_fail@plt+0x18c4>
   12948:	cmp	r2, #7
   1294c:	moveq	r0, #7
   12950:	cmpeq	ip, #7
   12954:	beq	128c0 <__assert_fail@plt+0x1ba4>
   12958:	cmp	r2, #16
   1295c:	bne	129d4 <__assert_fail@plt+0x1cb8>
   12960:	orr	r0, ip, #8
   12964:	sub	r0, r0, #15
   12968:	clz	r0, r0
   1296c:	lsr	r0, r0, #5
   12970:	orr	r0, r0, r1
   12974:	sub	r1, ip, #16
   12978:	clz	r1, r1
   1297c:	lsr	r1, r1, #5
   12980:	orrs	r0, r1, r0
   12984:	beq	129d4 <__assert_fail@plt+0x1cb8>
   12988:	mov	r0, ip
   1298c:	ldr	r1, [r5, #4]
   12990:	cmp	r1, #0
   12994:	bne	123f0 <__assert_fail@plt+0x16d4>
   12998:	b	12a28 <__assert_fail@plt+0x1d0c>
   1299c:	orr	r7, ip, #2
   129a0:	sub	r3, ip, #10
   129a4:	sub	r7, r7, #14
   129a8:	clz	r3, r3
   129ac:	clz	r7, r7
   129b0:	lsr	r3, r3, #5
   129b4:	lsr	r7, r7, #5
   129b8:	orrs	r3, r3, r7
   129bc:	beq	12908 <__assert_fail@plt+0x1bec>
   129c0:	mov	r0, ip
   129c4:	ldr	r1, [r5, #4]
   129c8:	cmp	r1, #0
   129cc:	bne	123f0 <__assert_fail@plt+0x16d4>
   129d0:	b	12a28 <__assert_fail@plt+0x1d0c>
   129d4:	cmp	ip, #16
   129d8:	bne	12a18 <__assert_fail@plt+0x1cfc>
   129dc:	cmp	r2, #16
   129e0:	bhi	12a28 <__assert_fail@plt+0x1d0c>
   129e4:	movw	r3, #33664	; 0x8380
   129e8:	mov	r1, #1
   129ec:	mov	r0, #16
   129f0:	movt	r3, #1
   129f4:	tst	r3, r1, lsl r2
   129f8:	bne	128c0 <__assert_fail@plt+0x1ba4>
   129fc:	b	12a28 <__assert_fail@plt+0x1d0c>
   12a00:	ldr	r9, [r7, #8]
   12a04:	cmp	ip, #1
   12a08:	moveq	r0, #1
   12a0c:	cmpeq	r2, #2
   12a10:	bne	127b0 <__assert_fail@plt+0x1a94>
   12a14:	b	128c0 <__assert_fail@plt+0x1ba4>
   12a18:	cmp	r2, #5
   12a1c:	moveq	r0, #5
   12a20:	cmpeq	ip, #5
   12a24:	beq	128c0 <__assert_fail@plt+0x1ba4>
   12a28:	cmp	r5, #0
   12a2c:	add	r9, sp, #12
   12a30:	beq	12be4 <__assert_fail@plt+0x1ec8>
   12a34:	ldr	r1, [r5, #4]
   12a38:	cmp	r1, #0
   12a3c:	beq	12ad0 <__assert_fail@plt+0x1db4>
   12a40:	mov	r0, r1
   12a44:	ldr	r1, [r1, #12]
   12a48:	mov	r4, r5
   12a4c:	mov	r3, #0
   12a50:	movw	r2, #1092	; 0x444
   12a54:	sub	r7, r2, r3
   12a58:	add	r7, r3, r7, lsr #1
   12a5c:	add	r6, r7, r7, lsl #1
   12a60:	ldr	r5, [sl, r6, lsl #2]
   12a64:	cmp	r5, r1
   12a68:	bls	12a7c <__assert_fail@plt+0x1d60>
   12a6c:	sub	r2, r7, #1
   12a70:	cmp	r2, r3
   12a74:	bcs	12a54 <__assert_fail@plt+0x1d38>
   12a78:	b	12ac0 <__assert_fail@plt+0x1da4>
   12a7c:	add	r3, sl, r6, lsl #2
   12a80:	ldr	r6, [r3, #4]
   12a84:	cmp	r6, r1
   12a88:	bcs	12a9c <__assert_fail@plt+0x1d80>
   12a8c:	add	r3, r7, #1
   12a90:	cmp	r2, r3
   12a94:	bcs	12a54 <__assert_fail@plt+0x1d38>
   12a98:	b	12ac0 <__assert_fail@plt+0x1da4>
   12a9c:	ldr	r1, [r3, #8]
   12aa0:	orr	r1, r1, #2
   12aa4:	cmp	r1, #6
   12aa8:	bne	12ac0 <__assert_fail@plt+0x1da4>
   12aac:	ldr	r1, [r0, #4]
   12ab0:	mov	r5, r0
   12ab4:	cmp	r1, #0
   12ab8:	bne	12a40 <__assert_fail@plt+0x1d24>
   12abc:	b	12ad4 <__assert_fail@plt+0x1db8>
   12ac0:	mov	r5, r4
   12ac4:	cmp	r4, #0
   12ac8:	bne	12ad8 <__assert_fail@plt+0x1dbc>
   12acc:	b	12be4 <__assert_fail@plt+0x1ec8>
   12ad0:	mov	r0, r5
   12ad4:	mov	r5, r0
   12ad8:	ldr	r0, [r8, #12]
   12adc:	bl	10ba8 <utf8proc_get_property@plt>
   12ae0:	ldrsh	r0, [r0]
   12ae4:	sub	r1, r0, #1
   12ae8:	cmp	r1, #12
   12aec:	bcs	12bc8 <__assert_fail@plt+0x1eac>
   12af0:	ldr	r4, [r5, #4]!
   12af4:	cmp	r8, r4
   12af8:	beq	12b68 <__assert_fail@plt+0x1e4c>
   12afc:	mov	r6, #0
   12b00:	mov	r7, r8
   12b04:	cmp	r7, #0
   12b08:	beq	12bec <__assert_fail@plt+0x1ed0>
   12b0c:	ldr	r0, [r7, #12]
   12b10:	mov	r1, r9
   12b14:	bl	10bc0 <utf8proc_encode_char@plt>
   12b18:	cmp	r0, #0
   12b1c:	beq	12c0c <__assert_fail@plt+0x1ef0>
   12b20:	ldr	r7, [r7, #4]
   12b24:	add	r6, r0, r6
   12b28:	cmp	r7, r4
   12b2c:	bne	12b04 <__assert_fail@plt+0x1de8>
   12b30:	add	r0, r6, #1
   12b34:	bl	10c38 <malloc@plt>
   12b38:	mov	r6, r0
   12b3c:	mov	r9, #0
   12b40:	cmp	r8, #0
   12b44:	beq	12c2c <__assert_fail@plt+0x1f10>
   12b48:	ldr	r0, [r8, #12]
   12b4c:	add	r1, r6, r9
   12b50:	bl	10bc0 <utf8proc_encode_char@plt>
   12b54:	ldr	r8, [r8, #4]
   12b58:	add	r9, r0, r9
   12b5c:	cmp	r8, r4
   12b60:	bne	12b40 <__assert_fail@plt+0x1e24>
   12b64:	b	12b78 <__assert_fail@plt+0x1e5c>
   12b68:	mov	r0, #1
   12b6c:	bl	10c38 <malloc@plt>
   12b70:	mov	r6, r0
   12b74:	mov	r9, #0
   12b78:	mov	r0, #0
   12b7c:	mov	r1, #12
   12b80:	strb	r0, [r6, r9]
   12b84:	mov	r0, #1
   12b88:	bl	12c6c <__assert_fail@plt+0x1f50>
   12b8c:	mov	r7, r0
   12b90:	mov	r0, r6
   12b94:	bl	10cbc <utf8proc_NFC@plt>
   12b98:	str	r0, [r7, #8]
   12b9c:	ldr	r0, [sp, #4]
   12ba0:	mov	r1, r7
   12ba4:	bl	11210 <__assert_fail@plt+0x4f4>
   12ba8:	mov	r0, r6
   12bac:	bl	10b9c <free@plt>
   12bb0:	add	r9, sp, #12
   12bb4:	ldr	r8, [r5]
   12bb8:	cmp	r8, #0
   12bbc:	str	r8, [sp, #16]
   12bc0:	bne	123e4 <__assert_fail@plt+0x16c8>
   12bc4:	b	12be4 <__assert_fail@plt+0x1ec8>
   12bc8:	cmp	r0, #29
   12bcc:	beq	12af0 <__assert_fail@plt+0x1dd4>
   12bd0:	add	r5, r5, #4
   12bd4:	ldr	r8, [r5]
   12bd8:	cmp	r8, #0
   12bdc:	str	r8, [sp, #16]
   12be0:	bne	123e4 <__assert_fail@plt+0x16c8>
   12be4:	sub	sp, fp, #28
   12be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bec:	movw	r0, #28583	; 0x6fa7
   12bf0:	movw	r1, #28576	; 0x6fa0
   12bf4:	movw	r3, #28599	; 0x6fb7
   12bf8:	mov	r2, #249	; 0xf9
   12bfc:	movt	r0, #1
   12c00:	movt	r1, #1
   12c04:	movt	r3, #1
   12c08:	bl	10d1c <__assert_fail@plt>
   12c0c:	movw	r0, #28625	; 0x6fd1
   12c10:	movw	r1, #28576	; 0x6fa0
   12c14:	movw	r3, #28599	; 0x6fb7
   12c18:	mov	r2, #253	; 0xfd
   12c1c:	movt	r0, #1
   12c20:	movt	r1, #1
   12c24:	movt	r3, #1
   12c28:	bl	10d1c <__assert_fail@plt>
   12c2c:	movw	r0, #28583	; 0x6fa7
   12c30:	movw	r1, #28576	; 0x6fa0
   12c34:	movw	r3, #28644	; 0x6fe4
   12c38:	movw	r2, #269	; 0x10d
   12c3c:	movt	r0, #1
   12c40:	movt	r1, #1
   12c44:	movt	r3, #1
   12c48:	bl	10d1c <__assert_fail@plt>
   12c4c:	push	{r4, sl, fp, lr}
   12c50:	add	fp, sp, #8
   12c54:	mov	r4, r0
   12c58:	ldr	r0, [r0, #8]
   12c5c:	bl	10b9c <free@plt>
   12c60:	mov	r0, r4
   12c64:	pop	{r4, sl, fp, lr}
   12c68:	b	10b9c <free@plt>
   12c6c:	push	{fp, lr}
   12c70:	mov	fp, sp
   12c74:	bl	10b60 <calloc@plt>
   12c78:	cmp	r0, #0
   12c7c:	popne	{fp, pc}
   12c80:	movw	r0, #28668	; 0x6ffc
   12c84:	movt	r0, #1
   12c88:	bl	13178 <error@@Base>
   12c8c:	push	{r4, r5, r6, sl, fp, lr}
   12c90:	add	fp, sp, #16
   12c94:	ldrb	r3, [r0]
   12c98:	ldrb	ip, [r1]
   12c9c:	mov	r2, r0
   12ca0:	mov	r0, #0
   12ca4:	cmp	r3, #0
   12ca8:	beq	12ce0 <__assert_fail@plt+0x1fc4>
   12cac:	add	r6, r2, #1
   12cb0:	add	lr, r1, #1
   12cb4:	mov	r2, #0
   12cb8:	uxtb	r4, ip
   12cbc:	uxtb	r5, r3
   12cc0:	cmp	r5, r4
   12cc4:	bne	12cf0 <__assert_fail@plt+0x1fd4>
   12cc8:	ldrb	r3, [r6, r2]
   12ccc:	ldrb	ip, [lr, r2]
   12cd0:	add	r2, r2, #1
   12cd4:	cmp	r3, #0
   12cd8:	bne	12cb8 <__assert_fail@plt+0x1f9c>
   12cdc:	b	12ce4 <__assert_fail@plt+0x1fc8>
   12ce0:	mov	r2, #0
   12ce4:	cmp	ip, #0
   12ce8:	popeq	{r4, r5, r6, sl, fp, pc}
   12cec:	mov	r3, #0
   12cf0:	ldrb	r1, [r1, r2]
   12cf4:	uxtb	r2, r3
   12cf8:	mov	r0, #1
   12cfc:	cmp	r2, r1
   12d00:	mvncc	r0, #0
   12d04:	pop	{r4, r5, r6, sl, fp, pc}
   12d08:	push	{r4, r5, fp, lr}
   12d0c:	add	fp, sp, #8
   12d10:	mov	r5, r1
   12d14:	cmp	r0, #0
   12d18:	beq	12d4c <__assert_fail@plt+0x2030>
   12d1c:	mov	r1, r5
   12d20:	mov	r4, r0
   12d24:	bl	10b90 <fopen@plt>
   12d28:	cmp	r0, #0
   12d2c:	popne	{r4, r5, fp, pc}
   12d30:	ldrb	r0, [r5]
   12d34:	cmp	r0, #119	; 0x77
   12d38:	bne	12d70 <__assert_fail@plt+0x2054>
   12d3c:	movw	r0, #28694	; 0x7016
   12d40:	mov	r1, r4
   12d44:	movt	r0, #1
   12d48:	bl	131b8 <error@@Base+0x40>
   12d4c:	ldrb	r0, [r5]
   12d50:	movw	r1, #32976	; 0x80d0
   12d54:	movw	r2, #32980	; 0x80d4
   12d58:	movt	r1, #2
   12d5c:	movt	r2, #2
   12d60:	cmp	r0, #114	; 0x72
   12d64:	moveq	r2, r1
   12d68:	ldr	r0, [r2]
   12d6c:	pop	{r4, r5, fp, pc}
   12d70:	movw	r0, #28716	; 0x702c
   12d74:	mov	r1, r4
   12d78:	movt	r0, #1
   12d7c:	bl	131b8 <error@@Base+0x40>
   12d80:	movw	r1, #32976	; 0x80d0
   12d84:	movt	r1, #2
   12d88:	ldr	r1, [r1]
   12d8c:	cmp	r1, r0
   12d90:	movwne	r1, #32980	; 0x80d4
   12d94:	movtne	r1, #2
   12d98:	ldrne	r1, [r1]
   12d9c:	cmpne	r1, r0
   12da0:	bxeq	lr
   12da4:	b	10cb0 <fclose@plt>
   12da8:	push	{fp, lr}
   12dac:	mov	fp, sp
   12db0:	sub	sp, sp, #88	; 0x58
   12db4:	mov	r1, r0
   12db8:	mov	r2, sp
   12dbc:	mov	r0, #3
   12dc0:	bl	10bfc <__xstat@plt>
   12dc4:	clz	r0, r0
   12dc8:	lsr	r0, r0, #5
   12dcc:	mov	sp, fp
   12dd0:	pop	{fp, pc}
   12dd4:	push	{r4, r5, fp, lr}
   12dd8:	add	fp, sp, #8
   12ddc:	sub	sp, sp, #104	; 0x68
   12de0:	movw	r0, #33096	; 0x8148
   12de4:	movt	r0, #2
   12de8:	ldrh	r1, [r0]
   12dec:	add	r5, r1, #1
   12df0:	strh	r5, [r0]
   12df4:	movw	r0, #41192	; 0xa0e8
   12df8:	movt	r0, #2
   12dfc:	ldr	r4, [r0]
   12e00:	bl	10c68 <getpid@plt>
   12e04:	movw	r1, #28757	; 0x7055
   12e08:	mov	r3, r0
   12e0c:	sxth	r0, r5
   12e10:	add	r5, sp, #4
   12e14:	mov	r2, r4
   12e18:	str	r0, [sp]
   12e1c:	movt	r1, #1
   12e20:	mov	r0, r5
   12e24:	bl	10cd4 <sprintf@plt>
   12e28:	mov	r0, r5
   12e2c:	bl	10bcc <strdup@plt>
   12e30:	mov	r4, r0
   12e34:	bl	10be4 <unlink@plt>
   12e38:	mov	r0, r4
   12e3c:	sub	sp, fp, #8
   12e40:	pop	{r4, r5, fp, pc}
   12e44:	push	{r4, sl, fp, lr}
   12e48:	add	fp, sp, #8
   12e4c:	mov	r4, r0
   12e50:	bl	10c8c <strlen@plt>
   12e54:	sub	r0, r0, #1
   12e58:	sxth	r0, r0
   12e5c:	cmp	r0, #0
   12e60:	blt	12e70 <__assert_fail@plt+0x2154>
   12e64:	ldrb	r1, [r4, r0]
   12e68:	cmp	r1, #47	; 0x2f
   12e6c:	bne	12e54 <__assert_fail@plt+0x2138>
   12e70:	add	r0, r4, r0
   12e74:	add	r0, r0, #1
   12e78:	pop	{r4, sl, fp, pc}
   12e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e80:	add	fp, sp, #28
   12e84:	sub	sp, sp, #12
   12e88:	ldr	r4, [r1]
   12e8c:	str	r0, [sp, #8]
   12e90:	mov	r7, r3
   12e94:	str	r2, [sp]
   12e98:	str	r1, [sp, #4]
   12e9c:	mov	r0, r4
   12ea0:	bl	10c8c <strlen@plt>
   12ea4:	sub	r0, r0, #1
   12ea8:	sxth	r0, r0
   12eac:	cmp	r0, #0
   12eb0:	blt	12ec0 <__assert_fail@plt+0x21a4>
   12eb4:	ldrb	r1, [r4, r0]
   12eb8:	cmp	r1, #47	; 0x2f
   12ebc:	bne	12ea4 <__assert_fail@plt+0x2188>
   12ec0:	add	r0, r4, r0
   12ec4:	movw	r1, #41192	; 0xa0e8
   12ec8:	movw	r4, #12864	; 0x3240
   12ecc:	add	r0, r0, #1
   12ed0:	movt	r1, #2
   12ed4:	movt	r4, #1
   12ed8:	str	r0, [r1]
   12edc:	mov	r0, #2
   12ee0:	mov	r1, r4
   12ee4:	bl	10c50 <__sysv_signal@plt>
   12ee8:	mov	r0, #15
   12eec:	mov	r1, r4
   12ef0:	bl	10c50 <__sysv_signal@plt>
   12ef4:	ldr	r0, [sp, #8]
   12ef8:	ldr	r6, [r0]
   12efc:	cmp	r6, #1
   12f00:	bne	12f18 <__assert_fail@plt+0x21fc>
   12f04:	movw	r0, #32956	; 0x80bc
   12f08:	movt	r0, #2
   12f0c:	ldrb	r0, [r0]
   12f10:	cmp	r0, #0
   12f14:	bne	13120 <__assert_fail@plt+0x2404>
   12f18:	ldr	ip, [sp, #4]
   12f1c:	mov	r8, #0
   12f20:	cmp	r6, #2
   12f24:	blt	130d8 <__assert_fail@plt+0x23bc>
   12f28:	cmp	r7, #0
   12f2c:	beq	13094 <__assert_fail@plt+0x2378>
   12f30:	mov	r8, #0
   12f34:	mov	r5, #1
   12f38:	mov	r9, #1
   12f3c:	ldr	r4, [ip, r5, lsl #2]
   12f40:	ldrb	r0, [r4]
   12f44:	cmp	r0, #45	; 0x2d
   12f48:	bne	1302c <__assert_fail@plt+0x2310>
   12f4c:	ldrb	sl, [r4, #1]
   12f50:	cmp	sl, #0
   12f54:	beq	1302c <__assert_fail@plt+0x2310>
   12f58:	mov	r0, r4
   12f5c:	bl	10c8c <strlen@plt>
   12f60:	mov	r2, r0
   12f64:	movw	r0, #28786	; 0x7072
   12f68:	mov	r1, r4
   12f6c:	movt	r0, #1
   12f70:	bl	10cf8 <strncmp@plt>
   12f74:	cmp	r0, #0
   12f78:	beq	13120 <__assert_fail@plt+0x2404>
   12f7c:	ldr	ip, [sp, #4]
   12f80:	add	r1, r5, #1
   12f84:	mov	r0, #0
   12f88:	ldrb	r2, [r7]
   12f8c:	cmp	r1, r6
   12f90:	ldrlt	r0, [ip, r1, lsl #2]
   12f94:	cmp	r2, #0
   12f98:	beq	13128 <__assert_fail@plt+0x240c>
   12f9c:	mov	r1, #0
   12fa0:	cmp	sl, r2
   12fa4:	beq	12fcc <__assert_fail@plt+0x22b0>
   12fa8:	mov	r2, #1
   12fac:	sxth	r1, r2
   12fb0:	add	r3, r1, r1, lsl #1
   12fb4:	ldrb	r3, [r7, r3, lsl #2]
   12fb8:	cmp	r3, #0
   12fbc:	beq	13128 <__assert_fail@plt+0x240c>
   12fc0:	add	r2, r2, #1
   12fc4:	cmp	sl, r3
   12fc8:	bne	12fac <__assert_fail@plt+0x2290>
   12fcc:	add	r1, r1, r1, lsl #1
   12fd0:	add	r3, r7, r1, lsl #2
   12fd4:	ldr	r1, [r3, #4]
   12fd8:	cmp	r1, #0
   12fdc:	beq	1304c <__assert_fail@plt+0x2330>
   12fe0:	mov	r2, r4
   12fe4:	cmp	r0, #0
   12fe8:	ldrb	r5, [r2, #2]!
   12fec:	cmpeq	r5, #0
   12ff0:	beq	1304c <__assert_fail@plt+0x2330>
   12ff4:	ldr	r3, [r1]
   12ff8:	cmp	r3, #0
   12ffc:	bne	130ec <__assert_fail@plt+0x23d0>
   13000:	cmp	r5, #0
   13004:	movne	r0, r2
   13008:	str	r0, [r1]
   1300c:	ldrb	r0, [r2]
   13010:	cmp	r0, #0
   13014:	addeq	r9, r9, #1
   13018:	add	r9, r9, #1
   1301c:	sxth	r5, r9
   13020:	cmp	r6, r5
   13024:	bgt	12f3c <__assert_fail@plt+0x2220>
   13028:	b	130d8 <__assert_fail@plt+0x23bc>
   1302c:	sxth	r0, r8
   13030:	add	r8, r8, #1
   13034:	str	r4, [ip, r0, lsl #2]
   13038:	add	r9, r9, #1
   1303c:	sxth	r5, r9
   13040:	cmp	r6, r5
   13044:	bgt	12f3c <__assert_fail@plt+0x2220>
   13048:	b	130d8 <__assert_fail@plt+0x23bc>
   1304c:	ldr	r0, [r3, #8]
   13050:	cmp	r0, #0
   13054:	beq	13128 <__assert_fail@plt+0x240c>
   13058:	ldrb	r1, [r4, #2]
   1305c:	cmp	r1, #0
   13060:	bne	13128 <__assert_fail@plt+0x240c>
   13064:	ldrb	r1, [r0]
   13068:	cmp	r1, #0
   1306c:	bne	130ec <__assert_fail@plt+0x23d0>
   13070:	mov	r1, #1
   13074:	strb	r1, [r0]
   13078:	ldr	r0, [sp, #8]
   1307c:	ldr	r6, [r0]
   13080:	add	r9, r9, #1
   13084:	sxth	r5, r9
   13088:	cmp	r6, r5
   1308c:	bgt	12f3c <__assert_fail@plt+0x2220>
   13090:	b	130d8 <__assert_fail@plt+0x23bc>
   13094:	mov	r1, #1
   13098:	mov	r8, #0
   1309c:	mov	r0, #1
   130a0:	ldr	r4, [ip, r1, lsl #2]
   130a4:	ldrb	r1, [r4]
   130a8:	cmp	r1, #45	; 0x2d
   130ac:	bne	130bc <__assert_fail@plt+0x23a0>
   130b0:	ldrb	r1, [r4, #1]
   130b4:	cmp	r1, #0
   130b8:	bne	130fc <__assert_fail@plt+0x23e0>
   130bc:	sxth	r1, r8
   130c0:	add	r0, r0, #1
   130c4:	add	r8, r8, #1
   130c8:	str	r4, [ip, r1, lsl #2]
   130cc:	sxth	r1, r0
   130d0:	cmp	r6, r1
   130d4:	bgt	130a0 <__assert_fail@plt+0x2384>
   130d8:	ldr	r1, [sp, #8]
   130dc:	sxth	r0, r8
   130e0:	str	r0, [r1]
   130e4:	sub	sp, fp, #28
   130e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130ec:	movw	r0, #28822	; 0x7096
   130f0:	mov	r1, r4
   130f4:	movt	r0, #1
   130f8:	bl	131b8 <error@@Base+0x40>
   130fc:	mov	r0, r4
   13100:	bl	10c8c <strlen@plt>
   13104:	mov	r2, r0
   13108:	movw	r0, #28786	; 0x7072
   1310c:	mov	r1, r4
   13110:	movt	r0, #1
   13114:	bl	10cf8 <strncmp@plt>
   13118:	cmp	r0, #0
   1311c:	bne	13128 <__assert_fail@plt+0x240c>
   13120:	ldr	r0, [sp]
   13124:	bl	13270 <error@@Base+0xf8>
   13128:	movw	r0, #28807	; 0x7087
   1312c:	mov	r1, r4
   13130:	movt	r0, #1
   13134:	bl	131b8 <error@@Base+0x40>
   13138:	push	{fp, lr}
   1313c:	mov	fp, sp
   13140:	mov	r0, #0
   13144:	bl	13148 <__assert_fail@plt+0x242c>
   13148:	push	{fp, lr}
   1314c:	mov	fp, sp
   13150:	mov	r4, r0
   13154:	movw	r0, #41196	; 0xa0ec
   13158:	movt	r0, #2
   1315c:	ldr	r0, [r0]
   13160:	cmp	r0, #0
   13164:	beq	1316c <__assert_fail@plt+0x2450>
   13168:	blx	r0
   1316c:	bl	132c0 <error@@Base+0x148>
   13170:	mov	r0, r4
   13174:	bl	10c74 <exit@plt>

00013178 <error@@Base>:
   13178:	push	{fp, lr}
   1317c:	mov	fp, sp
   13180:	mov	r3, r0
   13184:	movw	r0, #41192	; 0xa0e8
   13188:	movw	r1, #28736	; 0x7040
   1318c:	movt	r0, #2
   13190:	movt	r1, #1
   13194:	ldr	r2, [r0]
   13198:	movw	r0, #32968	; 0x80c8
   1319c:	movt	r0, #2
   131a0:	ldr	r0, [r0]
   131a4:	bl	10c98 <fprintf@plt>
   131a8:	movw	r0, #32960	; 0x80c0
   131ac:	movt	r0, #2
   131b0:	ldr	r0, [r0]
   131b4:	bl	13148 <__assert_fail@plt+0x242c>
   131b8:	push	{fp, lr}
   131bc:	mov	fp, sp
   131c0:	sub	sp, sp, #8
   131c4:	mov	r3, r0
   131c8:	movw	r0, #41192	; 0xa0e8
   131cc:	str	r1, [sp]
   131d0:	movw	r1, #28744	; 0x7048
   131d4:	movt	r0, #2
   131d8:	movt	r1, #1
   131dc:	ldr	r2, [r0]
   131e0:	movw	r0, #32968	; 0x80c8
   131e4:	movt	r0, #2
   131e8:	ldr	r0, [r0]
   131ec:	bl	10c98 <fprintf@plt>
   131f0:	movw	r0, #32960	; 0x80c0
   131f4:	movt	r0, #2
   131f8:	ldr	r0, [r0]
   131fc:	bl	13148 <__assert_fail@plt+0x242c>
   13200:	push	{fp, lr}
   13204:	mov	fp, sp
   13208:	sub	sp, sp, #8
   1320c:	mov	r3, r0
   13210:	movw	r0, #41192	; 0xa0e8
   13214:	str	r1, [sp]
   13218:	movw	r1, #28744	; 0x7048
   1321c:	movt	r0, #2
   13220:	movt	r1, #1
   13224:	ldr	r2, [r0]
   13228:	movw	r0, #32968	; 0x80c8
   1322c:	movt	r0, #2
   13230:	ldr	r0, [r0]
   13234:	bl	10c98 <fprintf@plt>
   13238:	mov	sp, fp
   1323c:	pop	{fp, pc}
   13240:	movw	r0, #33098	; 0x814a
   13244:	movt	r0, #2
   13248:	ldrb	r1, [r0]
   1324c:	cmp	r1, #1
   13250:	bxeq	lr
   13254:	push	{fp, lr}
   13258:	mov	fp, sp
   1325c:	mov	r1, #1
   13260:	strb	r1, [r0]
   13264:	movw	r0, #28771	; 0x7063
   13268:	movt	r0, #1
   1326c:	bl	13178 <error@@Base>
   13270:	push	{fp, lr}
   13274:	mov	fp, sp
   13278:	mov	r3, r0
   1327c:	movw	r0, #41188	; 0xa0e4
   13280:	movt	r0, #2
   13284:	ldr	r0, [r0]
   13288:	cmp	r0, #0
   1328c:	bne	132b8 <error@@Base+0x140>
   13290:	movw	r0, #41192	; 0xa0e8
   13294:	movw	r1, #28792	; 0x7078
   13298:	movt	r0, #2
   1329c:	movt	r1, #1
   132a0:	ldr	r2, [r0]
   132a4:	movw	r0, #32968	; 0x80c8
   132a8:	movt	r0, #2
   132ac:	ldr	r0, [r0]
   132b0:	bl	10c98 <fprintf@plt>
   132b4:	bl	13138 <__assert_fail@plt+0x241c>
   132b8:	blx	r0
   132bc:	bl	13138 <__assert_fail@plt+0x241c>
   132c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   132c4:	add	fp, sp, #24
   132c8:	sub	sp, sp, #104	; 0x68
   132cc:	movw	r8, #33096	; 0x8148
   132d0:	movt	r8, #2
   132d4:	ldrsh	r0, [r8]
   132d8:	cmp	r0, #1
   132dc:	blt	13348 <error@@Base+0x1d0>
   132e0:	movw	r9, #41192	; 0xa0e8
   132e4:	movw	r5, #28757	; 0x7055
   132e8:	mov	r7, #1
   132ec:	add	r4, sp, #4
   132f0:	movt	r9, #2
   132f4:	movt	r5, #1
   132f8:	ldr	r6, [r9]
   132fc:	bl	10c68 <getpid@plt>
   13300:	mov	r3, r0
   13304:	sxth	r0, r7
   13308:	mov	r1, r5
   1330c:	mov	r2, r6
   13310:	str	r0, [sp]
   13314:	mov	r0, r4
   13318:	bl	10cd4 <sprintf@plt>
   1331c:	mov	r0, r4
   13320:	bl	10bcc <strdup@plt>
   13324:	mov	r6, r0
   13328:	bl	10be4 <unlink@plt>
   1332c:	mov	r0, r6
   13330:	bl	10b9c <free@plt>
   13334:	add	r0, r7, #1
   13338:	sxth	r7, r0
   1333c:	ldrsh	r0, [r8]
   13340:	cmp	r7, r0
   13344:	ble	132f8 <error@@Base+0x180>
   13348:	sub	sp, fp, #24
   1334c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13350:	push	{r4, r5, r6, sl, fp, lr}
   13354:	add	fp, sp, #16
   13358:	mov	r5, r1
   1335c:	mov	r6, r0
   13360:	mov	r0, #1
   13364:	mov	r1, #16
   13368:	mov	r4, r2
   1336c:	bl	12c6c <__assert_fail@plt+0x1f50>
   13370:	strb	r5, [r0, #8]
   13374:	mov	r1, r0
   13378:	str	r4, [r0, #12]
   1337c:	mov	r0, r6
   13380:	pop	{r4, r5, r6, sl, fp, lr}
   13384:	b	11210 <__assert_fail@plt+0x4f4>
   13388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1338c:	add	fp, sp, #28
   13390:	sub	sp, sp, #124	; 0x7c
   13394:	mov	r5, r2
   13398:	mov	r2, r1
   1339c:	cmp	r1, #0
   133a0:	str	r0, [sp, #16]
   133a4:	bne	133b4 <error@@Base+0x23c>
   133a8:	ldrb	r0, [r5]
   133ac:	cmp	r0, #0
   133b0:	bne	137a4 <error@@Base+0x62c>
   133b4:	ldr	r0, [sp, #16]
   133b8:	movw	r1, #29041	; 0x7171
   133bc:	movt	r1, #1
   133c0:	ldr	r0, [r0, #4]
   133c4:	str	r0, [sp, #4]
   133c8:	mov	r0, r2
   133cc:	bl	12d08 <__assert_fail@plt+0x1fec>
   133d0:	mov	r6, r0
   133d4:	ldrb	r0, [r5]
   133d8:	cmp	r0, #0
   133dc:	beq	13424 <error@@Base+0x2ac>
   133e0:	add	r0, sp, #20
   133e4:	mov	r1, #99	; 0x63
   133e8:	mov	r2, r6
   133ec:	bl	10bb4 <fgets@plt>
   133f0:	cmp	r0, #0
   133f4:	beq	13414 <error@@Base+0x29c>
   133f8:	movw	r1, #28907	; 0x70eb
   133fc:	add	r0, sp, #20
   13400:	mov	r2, #51	; 0x33
   13404:	movt	r1, #1
   13408:	bl	10cf8 <strncmp@plt>
   1340c:	cmp	r0, #0
   13410:	beq	13734 <error@@Base+0x5bc>
   13414:	mov	r0, r6
   13418:	bl	10bd8 <rewind@plt>
   1341c:	mov	r7, #0
   13420:	strb	r7, [r5, #11]
   13424:	ldr	r8, [r5, #4]
   13428:	ldrb	r4, [r5, #1]
   1342c:	mov	r0, r6
   13430:	str	r5, [sp, #8]
   13434:	cmp	r8, #0
   13438:	movweq	r8, #94	; 0x5e
   1343c:	bl	10d10 <getc@plt>
   13440:	cmn	r0, #1
   13444:	beq	135a4 <error@@Base+0x42c>
   13448:	add	r1, sp, #20
   1344c:	cmp	r4, #0
   13450:	add	r1, r1, #1
   13454:	str	r1, [sp, #12]
   13458:	beq	13508 <error@@Base+0x390>
   1345c:	mov	sl, #0
   13460:	sub	r7, fp, #32
   13464:	movw	r1, #32256	; 0x7e00
   13468:	movt	r1, #2
   1346c:	add	r1, r1, r0
   13470:	ldrsb	r9, [r1]
   13474:	cmp	r9, #1
   13478:	blt	13784 <error@@Base+0x60c>
   1347c:	strb	r0, [sp, #20]
   13480:	beq	134a4 <error@@Base+0x32c>
   13484:	ldr	r0, [sp, #12]
   13488:	sub	r4, r9, #1
   1348c:	mov	r1, #1
   13490:	mov	r3, r6
   13494:	mov	r2, r4
   13498:	bl	10c14 <fread@plt>
   1349c:	cmp	r0, r4
   134a0:	bne	13798 <error@@Base+0x620>
   134a4:	add	r0, sp, #20
   134a8:	mov	r1, #4
   134ac:	mov	r2, r7
   134b0:	bl	10c20 <utf8proc_iterate@plt>
   134b4:	cmp	r0, r9
   134b8:	bne	13790 <error@@Base+0x618>
   134bc:	ldr	r5, [fp, #-32]	; 0xffffffe0
   134c0:	mov	r4, #1
   134c4:	cmp	r5, r8
   134c8:	beq	134f0 <error@@Base+0x378>
   134cc:	mov	r0, #1
   134d0:	mov	r1, #16
   134d4:	bl	12c6c <__assert_fail@plt+0x1f50>
   134d8:	strb	sl, [r0, #8]
   134dc:	mov	r1, r0
   134e0:	str	r5, [r0, #12]
   134e4:	ldr	r0, [sp, #16]
   134e8:	bl	11210 <__assert_fail@plt+0x4f4>
   134ec:	mov	r4, #0
   134f0:	mov	r0, r6
   134f4:	bl	10d10 <getc@plt>
   134f8:	cmn	r0, #1
   134fc:	mov	sl, r4
   13500:	bne	13464 <error@@Base+0x2ec>
   13504:	b	135a4 <error@@Base+0x42c>
   13508:	movw	r8, #32256	; 0x7e00
   1350c:	add	r9, sp, #20
   13510:	sub	sl, fp, #32
   13514:	mov	r5, #0
   13518:	movt	r8, #2
   1351c:	add	r1, r8, r0
   13520:	ldrsb	r7, [r1]
   13524:	cmp	r7, #0
   13528:	ble	13784 <error@@Base+0x60c>
   1352c:	cmp	r7, #1
   13530:	strb	r0, [sp, #20]
   13534:	beq	13558 <error@@Base+0x3e0>
   13538:	ldr	r0, [sp, #12]
   1353c:	sub	r4, r7, #1
   13540:	mov	r1, #1
   13544:	mov	r3, r6
   13548:	mov	r2, r4
   1354c:	bl	10c14 <fread@plt>
   13550:	cmp	r0, r4
   13554:	bne	13798 <error@@Base+0x620>
   13558:	mov	r0, r9
   1355c:	mov	r1, #4
   13560:	mov	r2, sl
   13564:	bl	10c20 <utf8proc_iterate@plt>
   13568:	cmp	r0, r7
   1356c:	bne	13790 <error@@Base+0x618>
   13570:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13574:	mov	r0, #1
   13578:	mov	r1, #16
   1357c:	bl	12c6c <__assert_fail@plt+0x1f50>
   13580:	strb	r5, [r0, #8]
   13584:	mov	r1, r0
   13588:	str	r4, [r0, #12]
   1358c:	ldr	r0, [sp, #16]
   13590:	bl	11210 <__assert_fail@plt+0x4f4>
   13594:	mov	r0, r6
   13598:	bl	10d10 <getc@plt>
   1359c:	cmn	r0, #1
   135a0:	bne	1351c <error@@Base+0x3a4>
   135a4:	mov	r0, r6
   135a8:	bl	12d80 <__assert_fail@plt+0x2064>
   135ac:	ldr	r8, [sp, #8]
   135b0:	ldr	r9, [sp, #4]
   135b4:	ldrb	r0, [r8, #9]
   135b8:	cmp	r0, #0
   135bc:	beq	136f0 <error@@Base+0x578>
   135c0:	ldr	r0, [sp, #16]
   135c4:	cmp	r9, #0
   135c8:	addne	r0, r9, #4
   135cc:	ldr	r6, [r0]
   135d0:	cmp	r6, #0
   135d4:	beq	136f0 <error@@Base+0x578>
   135d8:	mov	r4, #32
   135dc:	mov	r7, r6
   135e0:	ldr	r5, [r7, #12]
   135e4:	mov	r0, r5
   135e8:	bl	10ba8 <utf8proc_get_property@plt>
   135ec:	cmp	r5, #10
   135f0:	ble	1360c <error@@Base+0x494>
   135f4:	sub	r1, r5, #11
   135f8:	cmp	r1, #3
   135fc:	bcc	1362c <error@@Base+0x4b4>
   13600:	cmp	r5, #160	; 0xa0
   13604:	beq	1362c <error@@Base+0x4b4>
   13608:	b	13640 <error@@Base+0x4c8>
   1360c:	cmp	r5, #9
   13610:	beq	1362c <error@@Base+0x4b4>
   13614:	cmp	r5, #10
   13618:	bne	13640 <error@@Base+0x4c8>
   1361c:	ldr	r7, [r7, #4]
   13620:	cmp	r7, #0
   13624:	bne	135e0 <error@@Base+0x468>
   13628:	b	1365c <error@@Base+0x4e4>
   1362c:	str	r4, [r7, #12]
   13630:	ldr	r7, [r7, #4]
   13634:	cmp	r7, #0
   13638:	bne	135e0 <error@@Base+0x468>
   1363c:	b	1365c <error@@Base+0x4e4>
   13640:	ldrsh	r0, [r0]
   13644:	sub	r0, r0, #23
   13648:	cmp	r0, #2
   1364c:	strls	r4, [r7, #12]
   13650:	ldr	r7, [r7, #4]
   13654:	cmp	r7, #0
   13658:	bne	135e0 <error@@Base+0x468>
   1365c:	mov	r4, #0
   13660:	ldr	r1, [r6, #12]
   13664:	ldr	r5, [r6, #4]
   13668:	cmp	r1, #32
   1366c:	bne	136a8 <error@@Base+0x530>
   13670:	tst	r4, #255	; 0xff
   13674:	beq	136d0 <error@@Base+0x558>
   13678:	cmp	r5, #0
   1367c:	ldrne	r1, [r5, #12]
   13680:	cmpne	r1, #10
   13684:	beq	136d0 <error@@Base+0x558>
   13688:	mov	r0, #1
   1368c:	cmp	r1, #32
   13690:	bne	136bc <error@@Base+0x544>
   13694:	ldrb	r0, [r6, #8]
   13698:	ldrb	r1, [r5, #8]
   1369c:	orr	r0, r1, r0
   136a0:	strb	r0, [r5, #8]
   136a4:	b	136d0 <error@@Base+0x558>
   136a8:	subs	r0, r1, #10
   136ac:	movwne	r0, #1
   136b0:	tst	r4, #255	; 0xff
   136b4:	cmpeq	r1, #10
   136b8:	beq	136d0 <error@@Base+0x558>
   136bc:	mov	r4, r0
   136c0:	cmp	r5, #0
   136c4:	mov	r6, r5
   136c8:	bne	13660 <error@@Base+0x4e8>
   136cc:	b	136f0 <error@@Base+0x578>
   136d0:	ldr	r0, [sp, #16]
   136d4:	mov	r1, r6
   136d8:	bl	11308 <__assert_fail@plt+0x5ec>
   136dc:	mov	r0, r6
   136e0:	bl	10b9c <free@plt>
   136e4:	cmp	r5, #0
   136e8:	mov	r6, r5
   136ec:	bne	13660 <error@@Base+0x4e8>
   136f0:	ldrb	r0, [r8, #10]
   136f4:	cmp	r0, #0
   136f8:	beq	1372c <error@@Base+0x5b4>
   136fc:	ldr	r0, [sp, #16]
   13700:	cmp	r9, #0
   13704:	addne	r0, r9, #4
   13708:	ldr	r4, [r0]
   1370c:	cmp	r4, #0
   13710:	beq	1372c <error@@Base+0x5b4>
   13714:	ldr	r0, [r4, #12]
   13718:	bl	10bf0 <utf8proc_tolower@plt>
   1371c:	str	r0, [r4, #12]
   13720:	ldr	r4, [r4, #4]
   13724:	cmp	r4, #0
   13728:	bne	13714 <error@@Base+0x59c>
   1372c:	sub	sp, fp, #28
   13730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13734:	movw	r8, #28963	; 0x7123
   13738:	mov	r4, #0
   1373c:	add	r9, sp, #20
   13740:	mov	r7, #1
   13744:	movt	r8, #1
   13748:	mov	r0, r9
   1374c:	mov	r1, #99	; 0x63
   13750:	mov	r2, r6
   13754:	bl	10bb4 <fgets@plt>
   13758:	cmp	r0, #0
   1375c:	beq	13420 <error@@Base+0x2a8>
   13760:	mov	r0, r9
   13764:	mov	r1, r8
   13768:	bl	10b6c <strcmp@plt>
   1376c:	cmp	r0, #0
   13770:	addeq	r4, r4, #1
   13774:	sxth	r4, r4
   13778:	cmp	r4, #2
   1377c:	blt	13748 <error@@Base+0x5d0>
   13780:	b	13420 <error@@Base+0x2a8>
   13784:	movw	r0, #29019	; 0x715b
   13788:	movt	r0, #1
   1378c:	bl	13178 <error@@Base>
   13790:	bl	10ce0 <utf8proc_errmsg@plt>
   13794:	bl	13178 <error@@Base>
   13798:	movw	r0, #29043	; 0x7173
   1379c:	movt	r0, #1
   137a0:	bl	13178 <error@@Base>
   137a4:	movw	r0, #28839	; 0x70a7
   137a8:	movw	r1, #28855	; 0x70b7
   137ac:	movt	r0, #1
   137b0:	movt	r1, #1
   137b4:	bl	131b8 <error@@Base+0x40>
   137b8:	push	{fp, lr}
   137bc:	mov	fp, sp
   137c0:	bl	10bc0 <utf8proc_encode_char@plt>
   137c4:	cmp	r0, #0
   137c8:	sxtbgt	r0, r0
   137cc:	popgt	{fp, pc}
   137d0:	movw	r0, #28865	; 0x70c1
   137d4:	movt	r0, #1
   137d8:	bl	13178 <error@@Base>
   137dc:	push	{r4, r5, r6, r7, fp, lr}
   137e0:	add	fp, sp, #16
   137e4:	mov	r6, r3
   137e8:	mov	r4, r2
   137ec:	mov	r5, r1
   137f0:	tst	r0, #255	; 0xff
   137f4:	beq	1383c <error@@Base+0x6c4>
   137f8:	mov	r0, #94	; 0x5e
   137fc:	mov	r1, r4
   13800:	bl	10bc0 <utf8proc_encode_char@plt>
   13804:	cmp	r0, #0
   13808:	ble	138c4 <error@@Base+0x74c>
   1380c:	sxtb	r7, r0
   13810:	cmp	r5, #10
   13814:	bne	13848 <error@@Base+0x6d0>
   13818:	movw	r0, #28755	; 0x7053
   1381c:	movw	r1, #28888	; 0x70d8
   13820:	tst	r6, #255	; 0xff
   13824:	movt	r0, #1
   13828:	movt	r1, #1
   1382c:	moveq	r1, r0
   13830:	add	r0, r4, r7
   13834:	pop	{r4, r5, r6, r7, fp, lr}
   13838:	b	10cd4 <sprintf@plt>
   1383c:	mov	r7, #0
   13840:	cmp	r5, #10
   13844:	beq	13818 <error@@Base+0x6a0>
   13848:	mov	r0, r5
   1384c:	bl	10ba8 <utf8proc_get_property@plt>
   13850:	cmp	r5, #32
   13854:	beq	13868 <error@@Base+0x6f0>
   13858:	ldrsh	r0, [r0]
   1385c:	sub	r1, r0, #1
   13860:	cmp	r1, #22
   13864:	bcs	138d0 <error@@Base+0x758>
   13868:	mov	r0, r5
   1386c:	add	r6, r4, r7
   13870:	bl	10c80 <utf8proc_category@plt>
   13874:	sub	r0, r0, #6
   13878:	cmp	r0, #3
   1387c:	bcc	1388c <error@@Base+0x714>
   13880:	mov	r0, r5
   13884:	mov	r1, r6
   13888:	b	138ac <error@@Base+0x734>
   1388c:	movw	r0, #9676	; 0x25cc
   13890:	mov	r1, r6
   13894:	bl	10bc0 <utf8proc_encode_char@plt>
   13898:	cmp	r0, #0
   1389c:	ble	138c4 <error@@Base+0x74c>
   138a0:	sxtab	r7, r7, r0
   138a4:	mov	r0, r5
   138a8:	add	r1, r4, r7
   138ac:	bl	10bc0 <utf8proc_encode_char@plt>
   138b0:	cmp	r0, #0
   138b4:	sxtabgt	r0, r7, r0
   138b8:	movgt	r1, #0
   138bc:	strbgt	r1, [r4, r0]
   138c0:	popgt	{r4, r5, r6, r7, fp, pc}
   138c4:	movw	r0, #28865	; 0x70c1
   138c8:	movt	r0, #1
   138cc:	bl	13178 <error@@Base>
   138d0:	cmp	r0, #29
   138d4:	beq	13868 <error@@Base+0x6f0>
   138d8:	add	r0, r4, r7
   138dc:	cmp	r5, #255	; 0xff
   138e0:	bhi	138f8 <error@@Base+0x780>
   138e4:	movw	r1, #28893	; 0x70dd
   138e8:	movt	r1, #1
   138ec:	mov	r2, r5
   138f0:	pop	{r4, r5, r6, r7, fp, lr}
   138f4:	b	10cd4 <sprintf@plt>
   138f8:	movw	r1, #28900	; 0x70e4
   138fc:	movt	r1, #1
   13900:	mov	r2, r5
   13904:	pop	{r4, r5, r6, r7, fp, lr}
   13908:	b	10cd4 <sprintf@plt>
   1390c:	push	{r4, r5, r6, r7, fp, lr}
   13910:	add	fp, sp, #16
   13914:	sub	sp, sp, #16
   13918:	mov	r6, r2
   1391c:	mov	r2, r1
   13920:	movw	r1, #15258	; 0x3b9a
   13924:	mov	r5, r0
   13928:	movt	r1, #1
   1392c:	mov	r0, r2
   13930:	bl	12d08 <__assert_fail@plt+0x1fec>
   13934:	mov	r4, r0
   13938:	cmp	r6, #0
   1393c:	beq	13990 <error@@Base+0x818>
   13940:	movw	r0, #28907	; 0x70eb
   13944:	mov	r1, #55	; 0x37
   13948:	mov	r2, #1
   1394c:	mov	r3, r4
   13950:	movt	r0, #1
   13954:	bl	10c08 <fwrite@plt>
   13958:	movw	r7, #28963	; 0x7123
   1395c:	mov	r1, #55	; 0x37
   13960:	mov	r2, #1
   13964:	mov	r3, r4
   13968:	movt	r7, #1
   1396c:	mov	r0, r7
   13970:	bl	10c08 <fwrite@plt>
   13974:	mov	r0, r4
   13978:	blx	r6
   1397c:	mov	r0, r7
   13980:	mov	r1, #55	; 0x37
   13984:	mov	r2, #1
   13988:	mov	r3, r4
   1398c:	bl	10c08 <fwrite@plt>
   13990:	ldr	r6, [r5]
   13994:	cmp	r6, #0
   13998:	beq	139cc <error@@Base+0x854>
   1399c:	add	r5, sp, #7
   139a0:	ldr	r1, [r6, #12]
   139a4:	ldrb	r0, [r6, #8]
   139a8:	mov	r2, r5
   139ac:	mov	r3, #0
   139b0:	bl	137dc <error@@Base+0x664>
   139b4:	mov	r0, r5
   139b8:	mov	r1, r4
   139bc:	bl	10cec <fputs@plt>
   139c0:	ldr	r6, [r6, #4]
   139c4:	cmp	r6, #0
   139c8:	bne	139a0 <error@@Base+0x828>
   139cc:	mov	r0, r4
   139d0:	bl	12d80 <__assert_fail@plt+0x2064>
   139d4:	sub	sp, fp, #16
   139d8:	pop	{r4, r5, r6, r7, fp, pc}
   139dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139e0:	add	fp, sp, #28
   139e4:	sub	sp, sp, #4
   139e8:	mov	r9, #0
   139ec:	mov	sl, r0
   139f0:	str	r9, [sp]
   139f4:	ldrb	r0, [r1]
   139f8:	cmp	r0, #0
   139fc:	beq	13a64 <error@@Base+0x8ec>
   13a00:	mov	r4, r1
   13a04:	mov	r8, sp
   13a08:	mov	r7, #1
   13a0c:	mov	r0, r4
   13a10:	mvn	r1, #0
   13a14:	mov	r2, r8
   13a18:	bl	10c20 <utf8proc_iterate@plt>
   13a1c:	cmp	r0, #1
   13a20:	blt	13a74 <error@@Base+0x8fc>
   13a24:	ldr	r5, [sp]
   13a28:	mov	r6, r0
   13a2c:	mov	r0, #1
   13a30:	mov	r1, #16
   13a34:	bl	12c6c <__assert_fail@plt+0x1f50>
   13a38:	strb	r9, [r0, #8]
   13a3c:	mov	r1, r0
   13a40:	str	r5, [r0, #12]
   13a44:	mov	r0, sl
   13a48:	bl	11210 <__assert_fail@plt+0x4f4>
   13a4c:	ldrb	r0, [r4, r6]!
   13a50:	cmp	r0, #0
   13a54:	bne	13a0c <error@@Base+0x894>
   13a58:	mov	r0, r7
   13a5c:	sub	sp, fp, #28
   13a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a64:	mov	r7, #1
   13a68:	mov	r0, r7
   13a6c:	sub	sp, fp, #28
   13a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a74:	mov	r7, #0
   13a78:	mov	r0, r7
   13a7c:	sub	sp, fp, #28
   13a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a88:	mov	r7, r0
   13a8c:	ldr	r6, [pc, #72]	; 13adc <error@@Base+0x964>
   13a90:	ldr	r5, [pc, #72]	; 13ae0 <error@@Base+0x968>
   13a94:	add	r6, pc, r6
   13a98:	add	r5, pc, r5
   13a9c:	sub	r6, r6, r5
   13aa0:	mov	r8, r1
   13aa4:	mov	r9, r2
   13aa8:	bl	10b40 <calloc@plt-0x20>
   13aac:	asrs	r6, r6, #2
   13ab0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ab4:	mov	r4, #0
   13ab8:	add	r4, r4, #1
   13abc:	ldr	r3, [r5], #4
   13ac0:	mov	r2, r9
   13ac4:	mov	r1, r8
   13ac8:	mov	r0, r7
   13acc:	blx	r3
   13ad0:	cmp	r6, r4
   13ad4:	bne	13ab8 <error@@Base+0x940>
   13ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13adc:	andeq	r4, r1, r0, ror #6
   13ae0:	andeq	r4, r1, r8, asr r3
   13ae4:	bx	lr

Disassembly of section .fini:

00013ae8 <.fini>:
   13ae8:	push	{r3, lr}
   13aec:	pop	{r3, pc}
