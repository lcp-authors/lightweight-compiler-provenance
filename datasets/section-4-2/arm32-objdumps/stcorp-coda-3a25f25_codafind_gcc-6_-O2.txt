
../repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

000108b8 <.init>:
   108b8:	push	{r3, lr}
   108bc:	bl	10e44 <_start@@Base+0x3c>
   108c0:	pop	{r3, pc}

Disassembly of section .plt:

000108c4 <coda_match_filefilter@plt-0x14>:
   108c4:	push	{lr}		; (str lr, [sp, #-4]!)
   108c8:	ldr	lr, [pc, #4]	; 108d4 <coda_match_filefilter@plt-0x4>
   108cc:	add	lr, pc, lr
   108d0:	ldr	pc, [lr, #8]!
   108d4:	andeq	r1, r1, ip, lsr #14

000108d8 <coda_match_filefilter@plt>:
   108d8:	add	ip, pc, #0, 12
   108dc:	add	ip, ip, #69632	; 0x11000
   108e0:	ldr	pc, [ip, #1836]!	; 0x72c

000108e4 <strcmp@plt>:
   108e4:	add	ip, pc, #0, 12
   108e8:	add	ip, ip, #69632	; 0x11000
   108ec:	ldr	pc, [ip, #1828]!	; 0x724

000108f0 <printf@plt>:
   108f0:	add	ip, pc, #0, 12
   108f4:	add	ip, ip, #69632	; 0x11000
   108f8:	ldr	pc, [ip, #1820]!	; 0x71c

000108fc <coda_set_definition_path_conditional@plt>:
   108fc:	add	ip, pc, #0, 12
   10900:	add	ip, ip, #69632	; 0x11000
   10904:	ldr	pc, [ip, #1812]!	; 0x714

00010908 <coda_set_definition_path@plt>:
   10908:	add	ip, pc, #0, 12
   1090c:	add	ip, ip, #69632	; 0x11000
   10910:	ldr	pc, [ip, #1804]!	; 0x70c

00010914 <fwrite@plt>:
   10914:	add	ip, pc, #0, 12
   10918:	add	ip, ip, #69632	; 0x11000
   1091c:	ldr	pc, [ip, #1796]!	; 0x704

00010920 <coda_done@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #69632	; 0x11000
   10928:	ldr	pc, [ip, #1788]!	; 0x6fc

0001092c <puts@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #69632	; 0x11000
   10934:	ldr	pc, [ip, #1780]!	; 0x6f4

00010938 <__libc_start_main@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #69632	; 0x11000
   10940:	ldr	pc, [ip, #1772]!	; 0x6ec

00010944 <__gmon_start__@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #69632	; 0x11000
   1094c:	ldr	pc, [ip, #1764]!	; 0x6e4

00010950 <exit@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #69632	; 0x11000
   10958:	ldr	pc, [ip, #1756]!	; 0x6dc

0001095c <fprintf@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #69632	; 0x11000
   10964:	ldr	pc, [ip, #1748]!	; 0x6d4

00010968 <coda_init@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #69632	; 0x11000
   10970:	ldr	pc, [ip, #1740]!	; 0x6cc

00010974 <coda_set_option_perform_conversions@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #69632	; 0x11000
   1097c:	ldr	pc, [ip, #1732]!	; 0x6c4

00010980 <putchar@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #69632	; 0x11000
   10988:	ldr	pc, [ip, #1724]!	; 0x6bc

0001098c <coda_errno_to_string@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #69632	; 0x11000
   10994:	ldr	pc, [ip, #1716]!	; 0x6b4

00010998 <coda_get_libcoda_version@plt>:
   10998:	add	ip, pc, #0, 12
   1099c:	add	ip, ip, #69632	; 0x11000
   109a0:	ldr	pc, [ip, #1708]!	; 0x6ac

000109a4 <coda_get_errno@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #69632	; 0x11000
   109ac:	ldr	pc, [ip, #1700]!	; 0x6a4

000109b0 <abort@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #69632	; 0x11000
   109b8:	ldr	pc, [ip, #1692]!	; 0x69c

000109bc <__assert_fail@plt>:
   109bc:	add	ip, pc, #0, 12
   109c0:	add	ip, ip, #69632	; 0x11000
   109c4:	ldr	pc, [ip, #1684]!	; 0x694

Disassembly of section .text:

000109c8 <main@@Base>:
   109c8:	ldr	r3, [pc, #984]	; 10da8 <main@@Base+0x3e0>
   109cc:	mov	r2, #0
   109d0:	add	r3, pc, r3
   109d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109d8:	sub	sp, sp, #44	; 0x2c
   109dc:	str	r2, [r3]
   109e0:	ldr	r3, [pc, #964]	; 10dac <main@@Base+0x3e4>
   109e4:	cmp	r0, #1
   109e8:	add	r3, pc, r3
   109ec:	str	r3, [sp, #36]	; 0x24
   109f0:	beq	10ca4 <main@@Base+0x2dc>
   109f4:	ldr	r4, [r1, #4]
   109f8:	mov	r6, r1
   109fc:	ldr	r1, [pc, #940]	; 10db0 <main@@Base+0x3e8>
   10a00:	mov	r5, r0
   10a04:	add	r1, pc, r1
   10a08:	mov	r0, r4
   10a0c:	bl	108e4 <strcmp@plt>
   10a10:	cmp	r0, #0
   10a14:	beq	10ca4 <main@@Base+0x2dc>
   10a18:	ldr	r1, [pc, #916]	; 10db4 <main@@Base+0x3ec>
   10a1c:	mov	r0, r4
   10a20:	add	r1, pc, r1
   10a24:	bl	108e4 <strcmp@plt>
   10a28:	cmp	r0, #0
   10a2c:	beq	10ca4 <main@@Base+0x2dc>
   10a30:	ldr	r1, [pc, #896]	; 10db8 <main@@Base+0x3f0>
   10a34:	mov	r0, r4
   10a38:	add	r1, pc, r1
   10a3c:	bl	108e4 <strcmp@plt>
   10a40:	cmp	r0, #0
   10a44:	beq	10cd0 <main@@Base+0x308>
   10a48:	ldr	r1, [pc, #876]	; 10dbc <main@@Base+0x3f4>
   10a4c:	mov	r0, r4
   10a50:	add	r1, pc, r1
   10a54:	bl	108e4 <strcmp@plt>
   10a58:	cmp	r0, #0
   10a5c:	beq	10cd0 <main@@Base+0x308>
   10a60:	cmp	r5, #2
   10a64:	ble	10a80 <main@@Base+0xb8>
   10a68:	ldr	r1, [pc, #848]	; 10dc0 <main@@Base+0x3f8>
   10a6c:	mov	r0, r4
   10a70:	add	r1, pc, r1
   10a74:	bl	108e4 <strcmp@plt>
   10a78:	subs	r4, r0, #0
   10a7c:	beq	10c44 <main@@Base+0x27c>
   10a80:	ldr	r2, [pc, #828]	; 10dc4 <main@@Base+0x3fc>
   10a84:	mov	r1, #0
   10a88:	add	r2, pc, r2
   10a8c:	ldr	r0, [r6]
   10a90:	bl	108fc <coda_set_definition_path_conditional@plt>
   10a94:	cmp	r0, #0
   10a98:	bne	10d00 <main@@Base+0x338>
   10a9c:	cmp	r5, #1
   10aa0:	movle	r9, #1
   10aa4:	strle	r0, [sp, #28]
   10aa8:	movle	fp, r9
   10aac:	ble	10bbc <main@@Base+0x1f4>
   10ab0:	mov	fp, #1
   10ab4:	ldr	r2, [pc, #780]	; 10dc8 <main@@Base+0x400>
   10ab8:	ldr	r8, [pc, #780]	; 10dcc <main@@Base+0x404>
   10abc:	add	r2, pc, r2
   10ac0:	str	r2, [sp, #8]
   10ac4:	ldr	r2, [pc, #772]	; 10dd0 <main@@Base+0x408>
   10ac8:	mov	r3, #0
   10acc:	add	r2, pc, r2
   10ad0:	str	r2, [sp, #12]
   10ad4:	ldr	r2, [pc, #760]	; 10dd4 <main@@Base+0x40c>
   10ad8:	mov	r9, #1
   10adc:	add	r2, pc, r2
   10ae0:	str	r2, [sp, #16]
   10ae4:	ldr	r2, [pc, #748]	; 10dd8 <main@@Base+0x410>
   10ae8:	str	r3, [sp, #28]
   10aec:	add	r2, pc, r2
   10af0:	str	r2, [sp, #20]
   10af4:	ldr	r2, [pc, #736]	; 10ddc <main@@Base+0x414>
   10af8:	add	r8, pc, r8
   10afc:	add	r2, pc, r2
   10b00:	str	r2, [sp, #32]
   10b04:	ldr	r2, [pc, #724]	; 10de0 <main@@Base+0x418>
   10b08:	mov	sl, r3
   10b0c:	add	r2, pc, r2
   10b10:	str	r2, [sp, #24]
   10b14:	b	10b88 <main@@Base+0x1c0>
   10b18:	ldr	r1, [sp, #8]
   10b1c:	mov	r0, r4
   10b20:	bl	108e4 <strcmp@plt>
   10b24:	cmp	r0, #0
   10b28:	beq	10ba4 <main@@Base+0x1dc>
   10b2c:	ldr	r1, [sp, #12]
   10b30:	mov	r0, r4
   10b34:	bl	108e4 <strcmp@plt>
   10b38:	cmp	r0, #0
   10b3c:	beq	10b54 <main@@Base+0x18c>
   10b40:	ldr	r1, [sp, #24]
   10b44:	mov	r0, r4
   10b48:	bl	108e4 <strcmp@plt>
   10b4c:	cmp	r0, #0
   10b50:	bne	10c0c <main@@Base+0x244>
   10b54:	add	r2, fp, #1
   10b58:	cmp	r5, r2
   10b5c:	ble	10c0c <main@@Base+0x244>
   10b60:	add	r7, r6, r7
   10b64:	ldr	r1, [r7, #4]
   10b68:	ldrb	r0, [r1]
   10b6c:	cmp	r0, #45	; 0x2d
   10b70:	movne	fp, r2
   10b74:	strne	r1, [sp, #28]
   10b78:	beq	10c0c <main@@Base+0x244>
   10b7c:	add	fp, fp, #1
   10b80:	cmp	r5, fp
   10b84:	ble	10bb4 <main@@Base+0x1ec>
   10b88:	ldr	r4, [r6, fp, lsl #2]
   10b8c:	mov	r1, r8
   10b90:	mov	r0, r4
   10b94:	bl	108e4 <strcmp@plt>
   10b98:	lsl	r7, fp, #2
   10b9c:	cmp	r0, #0
   10ba0:	bne	10b18 <main@@Base+0x150>
   10ba4:	add	fp, fp, #1
   10ba8:	cmp	r5, fp
   10bac:	mov	r9, sl
   10bb0:	bgt	10b88 <main@@Base+0x1c0>
   10bb4:	cmp	r5, fp
   10bb8:	beq	10cb0 <main@@Base+0x2e8>
   10bbc:	bl	10968 <coda_init@plt>
   10bc0:	subs	r4, r0, #0
   10bc4:	bne	10d70 <main@@Base+0x3a8>
   10bc8:	mov	r0, r9
   10bcc:	bl	10974 <coda_set_option_perform_conversions@plt>
   10bd0:	ldr	r0, [pc, #524]	; 10de4 <main@@Base+0x41c>
   10bd4:	add	r2, r6, fp, lsl #2
   10bd8:	mov	r3, r0
   10bdc:	ldr	r0, [sp, #36]	; 0x24
   10be0:	sub	r1, r5, fp
   10be4:	ldr	r3, [r0, r3]
   10be8:	str	r4, [sp]
   10bec:	ldr	r0, [sp, #28]
   10bf0:	bl	108d8 <coda_match_filefilter@plt>
   10bf4:	subs	r4, r0, #0
   10bf8:	bne	10d38 <main@@Base+0x370>
   10bfc:	bl	10920 <coda_done@plt>
   10c00:	mov	r0, r4
   10c04:	add	sp, sp, #44	; 0x2c
   10c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c0c:	ldr	r1, [sp, #16]
   10c10:	mov	r0, r4
   10c14:	bl	108e4 <strcmp@plt>
   10c18:	cmp	r0, #0
   10c1c:	beq	10c34 <main@@Base+0x26c>
   10c20:	ldr	r1, [sp, #32]
   10c24:	mov	r0, r4
   10c28:	bl	108e4 <strcmp@plt>
   10c2c:	cmp	r0, #0
   10c30:	bne	10c68 <main@@Base+0x2a0>
   10c34:	ldr	r3, [sp, #20]
   10c38:	mov	r2, #1
   10c3c:	str	r2, [r3]
   10c40:	b	10b7c <main@@Base+0x1b4>
   10c44:	ldr	r0, [r6, #8]
   10c48:	bl	10908 <coda_set_definition_path@plt>
   10c4c:	cmp	r5, #3
   10c50:	streq	r4, [sp, #28]
   10c54:	moveq	fp, r5
   10c58:	moveq	r9, #1
   10c5c:	beq	10bb4 <main@@Base+0x1ec>
   10c60:	mov	fp, #3
   10c64:	b	10ab4 <main@@Base+0xec>
   10c68:	ldrb	r2, [r4]
   10c6c:	cmp	r2, #45	; 0x2d
   10c70:	bne	10bb4 <main@@Base+0x1ec>
   10c74:	ldr	r0, [sp, #36]	; 0x24
   10c78:	ldr	r3, [pc, #360]	; 10de8 <main@@Base+0x420>
   10c7c:	mov	r2, #25
   10c80:	mov	r1, #1
   10c84:	ldr	r3, [r0, r3]
   10c88:	ldr	r0, [pc, #348]	; 10dec <main@@Base+0x424>
   10c8c:	add	r0, pc, r0
   10c90:	ldr	r3, [r3]
   10c94:	bl	10914 <fwrite@plt>
   10c98:	bl	10f30 <_start@@Base+0x128>
   10c9c:	mov	r0, #1
   10ca0:	bl	10950 <exit@plt>
   10ca4:	bl	10f30 <_start@@Base+0x128>
   10ca8:	mov	r0, #0
   10cac:	bl	10950 <exit@plt>
   10cb0:	ldr	r0, [sp, #36]	; 0x24
   10cb4:	ldr	r3, [pc, #300]	; 10de8 <main@@Base+0x420>
   10cb8:	mov	r2, #25
   10cbc:	mov	r1, #1
   10cc0:	ldr	r3, [r0, r3]
   10cc4:	ldr	r0, [pc, #292]	; 10df0 <main@@Base+0x428>
   10cc8:	add	r0, pc, r0
   10ccc:	b	10c90 <main@@Base+0x2c8>
   10cd0:	bl	10998 <coda_get_libcoda_version@plt>
   10cd4:	mov	r1, r0
   10cd8:	ldr	r0, [pc, #276]	; 10df4 <main@@Base+0x42c>
   10cdc:	add	r0, pc, r0
   10ce0:	bl	108f0 <printf@plt>
   10ce4:	ldr	r0, [pc, #268]	; 10df8 <main@@Base+0x430>
   10ce8:	add	r0, pc, r0
   10cec:	bl	1092c <puts@plt>
   10cf0:	mov	r0, #10
   10cf4:	bl	10980 <putchar@plt>
   10cf8:	mov	r0, #0
   10cfc:	bl	10950 <exit@plt>
   10d00:	ldr	r2, [sp, #36]	; 0x24
   10d04:	ldr	r3, [pc, #220]	; 10de8 <main@@Base+0x420>
   10d08:	ldr	r3, [r2, r3]
   10d0c:	ldr	r4, [r3]
   10d10:	bl	109a4 <coda_get_errno@plt>
   10d14:	ldr	r0, [r0]
   10d18:	bl	1098c <coda_errno_to_string@plt>
   10d1c:	ldr	r1, [pc, #216]	; 10dfc <main@@Base+0x434>
   10d20:	add	r1, pc, r1
   10d24:	mov	r2, r0
   10d28:	mov	r0, r4
   10d2c:	bl	1095c <fprintf@plt>
   10d30:	mov	r0, #1
   10d34:	bl	10950 <exit@plt>
   10d38:	ldr	r2, [sp, #36]	; 0x24
   10d3c:	ldr	r3, [pc, #164]	; 10de8 <main@@Base+0x420>
   10d40:	ldr	r3, [r2, r3]
   10d44:	ldr	r4, [r3]
   10d48:	bl	109a4 <coda_get_errno@plt>
   10d4c:	ldr	r0, [r0]
   10d50:	bl	1098c <coda_errno_to_string@plt>
   10d54:	ldr	r1, [pc, #164]	; 10e00 <main@@Base+0x438>
   10d58:	add	r1, pc, r1
   10d5c:	mov	r2, r0
   10d60:	mov	r0, r4
   10d64:	bl	1095c <fprintf@plt>
   10d68:	mov	r0, #1
   10d6c:	bl	10950 <exit@plt>
   10d70:	ldr	r2, [sp, #36]	; 0x24
   10d74:	ldr	r3, [pc, #108]	; 10de8 <main@@Base+0x420>
   10d78:	ldr	r3, [r2, r3]
   10d7c:	ldr	r4, [r3]
   10d80:	bl	109a4 <coda_get_errno@plt>
   10d84:	ldr	r0, [r0]
   10d88:	bl	1098c <coda_errno_to_string@plt>
   10d8c:	ldr	r1, [pc, #112]	; 10e04 <main@@Base+0x43c>
   10d90:	add	r1, pc, r1
   10d94:	mov	r2, r0
   10d98:	mov	r0, r4
   10d9c:	bl	1095c <fprintf@plt>
   10da0:	mov	r0, #1
   10da4:	bl	10950 <exit@plt>
   10da8:	muleq	r1, ip, r6
   10dac:	andeq	r1, r1, r0, lsl r6
   10db0:	andeq	r0, r0, r4, ror lr
   10db4:	andeq	r0, r0, ip, asr lr
   10db8:	andeq	r0, r0, ip, asr #28
   10dbc:	andeq	r0, r0, r8, lsr lr
   10dc0:	andeq	r0, r0, r4, ror #28
   10dc4:	andeq	r0, r0, r0, asr lr
   10dc8:	andeq	r0, r0, r4, ror #17
   10dcc:	andeq	r0, r0, r8, lsl #28
   10dd0:	andeq	r0, r0, r8, lsr lr
   10dd4:	andeq	r0, r0, r8, lsr lr
   10dd8:	andeq	r1, r1, r0, lsl #11
   10ddc:	andeq	r0, r0, ip, lsl lr
   10de0:	strdeq	r0, [r0], -ip
   10de4:	andeq	r0, r0, r4, rrx
   10de8:	andeq	r0, r0, ip, asr r0
   10dec:	muleq	r0, r8, ip
   10df0:	andeq	r0, r0, ip, asr ip
   10df4:			; <UNDEFINED> instruction: 0x00000bb8
   10df8:			; <UNDEFINED> instruction: 0x00000bbc
   10dfc:	ldrdeq	r0, [r0], -r4
   10e00:	muleq	r0, ip, fp
   10e04:	andeq	r0, r0, r4, ror #22

00010e08 <_start@@Base>:
   10e08:	mov	fp, #0
   10e0c:	mov	lr, #0
   10e10:	pop	{r1}		; (ldr r1, [sp], #4)
   10e14:	mov	r2, sp
   10e18:	push	{r2}		; (str r2, [sp, #-4]!)
   10e1c:	push	{r0}		; (str r0, [sp, #-4]!)
   10e20:	ldr	ip, [pc, #16]	; 10e38 <_start@@Base+0x30>
   10e24:	push	{ip}		; (str ip, [sp, #-4]!)
   10e28:	ldr	r0, [pc, #12]	; 10e3c <_start@@Base+0x34>
   10e2c:	ldr	r3, [pc, #12]	; 10e40 <_start@@Base+0x38>
   10e30:	bl	10938 <__libc_start_main@plt>
   10e34:	bl	109b0 <abort@plt>
   10e38:			; <UNDEFINED> instruction: 0x000112b4
   10e3c:	andeq	r0, r1, r8, asr #19
   10e40:	andeq	r1, r1, r4, asr r2
   10e44:	ldr	r3, [pc, #20]	; 10e60 <_start@@Base+0x58>
   10e48:	ldr	r2, [pc, #20]	; 10e64 <_start@@Base+0x5c>
   10e4c:	add	r3, pc, r3
   10e50:	ldr	r2, [r3, r2]
   10e54:	cmp	r2, #0
   10e58:	bxeq	lr
   10e5c:	b	10944 <__gmon_start__@plt>
   10e60:	andeq	r1, r1, ip, lsr #3
   10e64:	andeq	r0, r0, r0, rrx
   10e68:	ldr	r3, [pc, #28]	; 10e8c <_start@@Base+0x84>
   10e6c:	ldr	r0, [pc, #28]	; 10e90 <_start@@Base+0x88>
   10e70:	sub	r3, r3, r0
   10e74:	cmp	r3, #6
   10e78:	bxls	lr
   10e7c:	ldr	r3, [pc, #16]	; 10e94 <_start@@Base+0x8c>
   10e80:	cmp	r3, #0
   10e84:	bxeq	lr
   10e88:	bx	r3
   10e8c:	andeq	r2, r2, r3, ror r0
   10e90:	andeq	r2, r2, r0, ror r0
   10e94:	andeq	r0, r0, r0
   10e98:	ldr	r1, [pc, #36]	; 10ec4 <_start@@Base+0xbc>
   10e9c:	ldr	r0, [pc, #36]	; 10ec8 <_start@@Base+0xc0>
   10ea0:	sub	r1, r1, r0
   10ea4:	asr	r1, r1, #2
   10ea8:	add	r1, r1, r1, lsr #31
   10eac:	asrs	r1, r1, #1
   10eb0:	bxeq	lr
   10eb4:	ldr	r3, [pc, #16]	; 10ecc <_start@@Base+0xc4>
   10eb8:	cmp	r3, #0
   10ebc:	bxeq	lr
   10ec0:	bx	r3
   10ec4:	andeq	r2, r2, r0, ror r0
   10ec8:	andeq	r2, r2, r0, ror r0
   10ecc:	andeq	r0, r0, r0
   10ed0:	push	{r4, lr}
   10ed4:	ldr	r4, [pc, #24]	; 10ef4 <_start@@Base+0xec>
   10ed8:	ldrb	r3, [r4]
   10edc:	cmp	r3, #0
   10ee0:	popne	{r4, pc}
   10ee4:	bl	10e68 <_start@@Base+0x60>
   10ee8:	mov	r3, #1
   10eec:	strb	r3, [r4]
   10ef0:	pop	{r4, pc}
   10ef4:	andeq	r2, r2, r0, ror r0
   10ef8:	ldr	r0, [pc, #40]	; 10f28 <_start@@Base+0x120>
   10efc:	ldr	r3, [r0]
   10f00:	cmp	r3, #0
   10f04:	bne	10f0c <_start@@Base+0x104>
   10f08:	b	10e98 <_start@@Base+0x90>
   10f0c:	ldr	r3, [pc, #24]	; 10f2c <_start@@Base+0x124>
   10f10:	cmp	r3, #0
   10f14:	beq	10f08 <_start@@Base+0x100>
   10f18:	push	{r4, lr}
   10f1c:	blx	r3
   10f20:	pop	{r4, lr}
   10f24:	b	10e98 <_start@@Base+0x90>
   10f28:	strdeq	r1, [r2], -ip
   10f2c:	andeq	r0, r0, r0
   10f30:	ldr	r0, [pc, #328]	; 11080 <_start@@Base+0x278>
   10f34:	push	{r4, lr}
   10f38:	add	r0, pc, r0
   10f3c:	bl	1092c <puts@plt>
   10f40:	ldr	r0, [pc, #316]	; 11084 <_start@@Base+0x27c>
   10f44:	add	r0, pc, r0
   10f48:	bl	1092c <puts@plt>
   10f4c:	ldr	r0, [pc, #308]	; 11088 <_start@@Base+0x280>
   10f50:	add	r0, pc, r0
   10f54:	bl	1092c <puts@plt>
   10f58:	ldr	r0, [pc, #300]	; 1108c <_start@@Base+0x284>
   10f5c:	add	r0, pc, r0
   10f60:	bl	1092c <puts@plt>
   10f64:	mov	r0, #10
   10f68:	bl	10980 <putchar@plt>
   10f6c:	ldr	r0, [pc, #284]	; 11090 <_start@@Base+0x288>
   10f70:	add	r0, pc, r0
   10f74:	bl	1092c <puts@plt>
   10f78:	ldr	r0, [pc, #276]	; 11094 <_start@@Base+0x28c>
   10f7c:	add	r0, pc, r0
   10f80:	bl	1092c <puts@plt>
   10f84:	ldr	r0, [pc, #268]	; 11098 <_start@@Base+0x290>
   10f88:	add	r0, pc, r0
   10f8c:	bl	1092c <puts@plt>
   10f90:	ldr	r0, [pc, #260]	; 1109c <_start@@Base+0x294>
   10f94:	add	r0, pc, r0
   10f98:	bl	1092c <puts@plt>
   10f9c:	ldr	r0, [pc, #252]	; 110a0 <_start@@Base+0x298>
   10fa0:	add	r0, pc, r0
   10fa4:	bl	1092c <puts@plt>
   10fa8:	ldr	r0, [pc, #244]	; 110a4 <_start@@Base+0x29c>
   10fac:	add	r0, pc, r0
   10fb0:	bl	1092c <puts@plt>
   10fb4:	ldr	r0, [pc, #236]	; 110a8 <_start@@Base+0x2a0>
   10fb8:	add	r0, pc, r0
   10fbc:	bl	1092c <puts@plt>
   10fc0:	ldr	r0, [pc, #228]	; 110ac <_start@@Base+0x2a4>
   10fc4:	add	r0, pc, r0
   10fc8:	bl	1092c <puts@plt>
   10fcc:	ldr	r0, [pc, #220]	; 110b0 <_start@@Base+0x2a8>
   10fd0:	add	r0, pc, r0
   10fd4:	bl	1092c <puts@plt>
   10fd8:	mov	r0, #10
   10fdc:	bl	10980 <putchar@plt>
   10fe0:	ldr	r0, [pc, #204]	; 110b4 <_start@@Base+0x2ac>
   10fe4:	add	r0, pc, r0
   10fe8:	bl	1092c <puts@plt>
   10fec:	ldr	r0, [pc, #196]	; 110b8 <_start@@Base+0x2b0>
   10ff0:	add	r0, pc, r0
   10ff4:	bl	1092c <puts@plt>
   10ff8:	mov	r0, #10
   10ffc:	bl	10980 <putchar@plt>
   11000:	ldr	r0, [pc, #180]	; 110bc <_start@@Base+0x2b4>
   11004:	add	r0, pc, r0
   11008:	bl	1092c <puts@plt>
   1100c:	ldr	r0, [pc, #172]	; 110c0 <_start@@Base+0x2b8>
   11010:	add	r0, pc, r0
   11014:	bl	1092c <puts@plt>
   11018:	mov	r0, #10
   1101c:	bl	10980 <putchar@plt>
   11020:	ldr	r0, [pc, #156]	; 110c4 <_start@@Base+0x2bc>
   11024:	add	r0, pc, r0
   11028:	bl	1092c <puts@plt>
   1102c:	ldr	r0, [pc, #148]	; 110c8 <_start@@Base+0x2c0>
   11030:	add	r0, pc, r0
   11034:	bl	1092c <puts@plt>
   11038:	ldr	r0, [pc, #140]	; 110cc <_start@@Base+0x2c4>
   1103c:	add	r0, pc, r0
   11040:	bl	1092c <puts@plt>
   11044:	ldr	r0, [pc, #132]	; 110d0 <_start@@Base+0x2c8>
   11048:	add	r0, pc, r0
   1104c:	bl	1092c <puts@plt>
   11050:	ldr	r0, [pc, #124]	; 110d4 <_start@@Base+0x2cc>
   11054:	add	r0, pc, r0
   11058:	bl	1092c <puts@plt>
   1105c:	ldr	r0, [pc, #116]	; 110d8 <_start@@Base+0x2d0>
   11060:	add	r0, pc, r0
   11064:	bl	1092c <puts@plt>
   11068:	ldr	r0, [pc, #108]	; 110dc <_start@@Base+0x2d4>
   1106c:	add	r0, pc, r0
   11070:	bl	1092c <puts@plt>
   11074:	mov	r0, #10
   11078:	pop	{r4, lr}
   1107c:	b	10980 <putchar@plt>
   11080:	muleq	r0, r0, r3
   11084:	andeq	r0, r0, ip, lsl #7
   11088:	andeq	r0, r0, r4, asr #7
   1108c:	andeq	r0, r0, r8, lsl #8
   11090:	andeq	r0, r0, ip, lsl #8
   11094:	andeq	r0, r0, r4, lsl r4
   11098:	andeq	r0, r0, r0, lsr r4
   1109c:	andeq	r0, r0, r0, ror #8
   110a0:	andeq	r0, r0, r4, lsl #9
   110a4:	andeq	r0, r0, r0, asr #9
   110a8:	andeq	r0, r0, r4, lsl #10
   110ac:	andeq	r0, r0, r4, lsr #10
   110b0:	andeq	r0, r0, r4, lsr r5
   110b4:	andeq	r0, r0, r8, asr r5
   110b8:	andeq	r0, r0, r4, ror #10
   110bc:	andeq	r0, r0, r0, ror r5
   110c0:	andeq	r0, r0, r0, lsl #11
   110c4:	andeq	r0, r0, r0, lsr #11
   110c8:	andeq	r0, r0, r4, ror #11
   110cc:	andeq	r0, r0, r4, lsr #12
   110d0:	andeq	r0, r0, r4, asr #12
   110d4:	andeq	r0, r0, r4, lsl #13
   110d8:	andeq	r0, r0, r0, asr #13
   110dc:	strdeq	r0, [r0], -r4

000110e0 <callback@@Base>:
   110e0:	ldr	ip, [pc, #312]	; 11220 <callback@@Base+0x140>
   110e4:	push	{r4, lr}
   110e8:	subs	r4, r1, #0
   110ec:	add	ip, pc, ip
   110f0:	mov	r1, r0
   110f4:	beq	1112c <callback@@Base+0x4c>
   110f8:	cmp	r4, #2
   110fc:	beq	1118c <callback@@Base+0xac>
   11100:	cmp	r4, #1
   11104:	beq	111ac <callback@@Base+0xcc>
   11108:	ldr	r3, [pc, #276]	; 11224 <callback@@Base+0x144>
   1110c:	add	r3, pc, r3
   11110:	ldr	r3, [r3]
   11114:	cmp	r3, #0
   11118:	bne	11154 <callback@@Base+0x74>
   1111c:	cmp	r4, #4
   11120:	beq	11184 <callback@@Base+0xa4>
   11124:	mov	r0, #0
   11128:	pop	{r4, pc}
   1112c:	ldr	r0, [pc, #244]	; 11228 <callback@@Base+0x148>
   11130:	mov	r3, r2
   11134:	mov	r2, r1
   11138:	ldr	r0, [ip, r0]
   1113c:	ldr	r1, [pc, #232]	; 1122c <callback@@Base+0x14c>
   11140:	ldr	r0, [r0]
   11144:	add	r1, pc, r1
   11148:	bl	1095c <fprintf@plt>
   1114c:	mov	r0, #0
   11150:	pop	{r4, pc}
   11154:	ldr	r0, [pc, #212]	; 11230 <callback@@Base+0x150>
   11158:	add	r0, pc, r0
   1115c:	bl	108f0 <printf@plt>
   11160:	cmp	r4, #5
   11164:	addls	pc, pc, r4, lsl #2
   11168:	b	11124 <callback@@Base+0x44>
   1116c:	b	11200 <callback@@Base+0x120>
   11170:	b	11200 <callback@@Base+0x120>
   11174:	b	11200 <callback@@Base+0x120>
   11178:	b	111f0 <callback@@Base+0x110>
   1117c:	b	111e0 <callback@@Base+0x100>
   11180:	b	111d0 <callback@@Base+0xf0>
   11184:	bl	1092c <puts@plt>
   11188:	b	11124 <callback@@Base+0x44>
   1118c:	ldr	r3, [pc, #148]	; 11228 <callback@@Base+0x148>
   11190:	ldr	r1, [pc, #156]	; 11234 <callback@@Base+0x154>
   11194:	mov	r2, r0
   11198:	ldr	r3, [ip, r3]
   1119c:	add	r1, pc, r1
   111a0:	ldr	r0, [r3]
   111a4:	bl	1095c <fprintf@plt>
   111a8:	b	11124 <callback@@Base+0x44>
   111ac:	ldr	r0, [pc, #116]	; 11228 <callback@@Base+0x148>
   111b0:	mov	r3, r2
   111b4:	mov	r2, r1
   111b8:	ldr	r0, [ip, r0]
   111bc:	ldr	r1, [pc, #116]	; 11238 <callback@@Base+0x158>
   111c0:	ldr	r0, [r0]
   111c4:	add	r1, pc, r1
   111c8:	bl	1095c <fprintf@plt>
   111cc:	b	11124 <callback@@Base+0x44>
   111d0:	ldr	r0, [pc, #100]	; 1123c <callback@@Base+0x15c>
   111d4:	add	r0, pc, r0
   111d8:	bl	1092c <puts@plt>
   111dc:	b	11124 <callback@@Base+0x44>
   111e0:	ldr	r0, [pc, #88]	; 11240 <callback@@Base+0x160>
   111e4:	add	r0, pc, r0
   111e8:	bl	1092c <puts@plt>
   111ec:	b	11124 <callback@@Base+0x44>
   111f0:	ldr	r0, [pc, #76]	; 11244 <callback@@Base+0x164>
   111f4:	add	r0, pc, r0
   111f8:	bl	1092c <puts@plt>
   111fc:	b	11124 <callback@@Base+0x44>
   11200:	ldr	r3, [pc, #64]	; 11248 <callback@@Base+0x168>
   11204:	ldr	r1, [pc, #64]	; 1124c <callback@@Base+0x16c>
   11208:	ldr	r0, [pc, #64]	; 11250 <callback@@Base+0x170>
   1120c:	add	r3, pc, r3
   11210:	mov	r2, #110	; 0x6e
   11214:	add	r1, pc, r1
   11218:	add	r0, pc, r0
   1121c:	bl	109bc <__assert_fail@plt>
   11220:	andeq	r0, r1, ip, lsl #30
   11224:	andeq	r0, r1, r0, ror #30
   11228:	andeq	r0, r0, ip, asr r0
   1122c:	andeq	r0, r0, ip, asr r6
   11230:	muleq	r0, r0, r6
   11234:	andeq	r0, r0, ip, lsl #12
   11238:	andeq	r0, r0, r4, lsl #12
   1123c:	muleq	r0, r0, r6
   11240:	andeq	r0, r0, ip, lsl #13
   11244:	andeq	r0, r0, ip, asr r6
   11248:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1124c:	ldrdeq	r0, [r0], -ip
   11250:	andeq	r0, r0, r4, lsr r6

00011254 <__libc_csu_init@@Base>:
   11254:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11258:	mov	r7, r0
   1125c:	ldr	r6, [pc, #72]	; 112ac <__libc_csu_init@@Base+0x58>
   11260:	ldr	r5, [pc, #72]	; 112b0 <__libc_csu_init@@Base+0x5c>
   11264:	add	r6, pc, r6
   11268:	add	r5, pc, r5
   1126c:	sub	r6, r6, r5
   11270:	mov	r8, r1
   11274:	mov	r9, r2
   11278:	bl	108b8 <coda_match_filefilter@plt-0x20>
   1127c:	asrs	r6, r6, #2
   11280:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11284:	mov	r4, #0
   11288:	add	r4, r4, #1
   1128c:	ldr	r3, [r5], #4
   11290:	mov	r2, r9
   11294:	mov	r1, r8
   11298:	mov	r0, r7
   1129c:	blx	r3
   112a0:	cmp	r6, r4
   112a4:	bne	11288 <__libc_csu_init@@Base+0x34>
   112a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   112ac:	andeq	r0, r1, ip, lsl #25
   112b0:	andeq	r0, r1, r4, lsl #25

000112b4 <__libc_csu_fini@@Base>:
   112b4:	bx	lr

Disassembly of section .fini:

000112b8 <.fini>:
   112b8:	push	{r3, lr}
   112bc:	pop	{r3, pc}
