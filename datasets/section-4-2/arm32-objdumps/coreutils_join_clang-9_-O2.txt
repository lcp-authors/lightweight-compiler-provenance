
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00011030 <.init>:
   11030:	push	{r3, lr}
   11034:	bl	11350 <__assert_fail@plt+0x48>
   11038:	pop	{r3, pc}

Disassembly of section .plt:

0001103c <fdopen@plt-0x14>:
   1103c:	push	{lr}		; (str lr, [sp, #-4]!)
   11040:	ldr	lr, [pc, #4]	; 1104c <fdopen@plt-0x4>
   11044:	add	lr, pc, lr
   11048:	ldr	pc, [lr, #8]!
   1104c:			; <UNDEFINED> instruction: 0x00019fb4

00011050 <fdopen@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #102400	; 0x19000
   11058:	ldr	pc, [ip, #4020]!	; 0xfb4

0001105c <calloc@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #102400	; 0x19000
   11064:	ldr	pc, [ip, #4012]!	; 0xfac

00011068 <fputs_unlocked@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #102400	; 0x19000
   11070:	ldr	pc, [ip, #4004]!	; 0xfa4

00011074 <raise@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #102400	; 0x19000
   1107c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011080 <strcmp@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #102400	; 0x19000
   11088:	ldr	pc, [ip, #3988]!	; 0xf94

0001108c <posix_fadvise64@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #102400	; 0x19000
   11094:	ldr	pc, [ip, #3980]!	; 0xf8c

00011098 <fflush@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #102400	; 0x19000
   110a0:	ldr	pc, [ip, #3972]!	; 0xf84

000110a4 <free@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #102400	; 0x19000
   110ac:	ldr	pc, [ip, #3964]!	; 0xf7c

000110b0 <_exit@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #102400	; 0x19000
   110b8:	ldr	pc, [ip, #3956]!	; 0xf74

000110bc <memcpy@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #102400	; 0x19000
   110c4:	ldr	pc, [ip, #3948]!	; 0xf6c

000110c8 <__strtoull_internal@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #102400	; 0x19000
   110d0:	ldr	pc, [ip, #3940]!	; 0xf64

000110d4 <mbsinit@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #102400	; 0x19000
   110dc:	ldr	pc, [ip, #3932]!	; 0xf5c

000110e0 <fwrite_unlocked@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #102400	; 0x19000
   110e8:	ldr	pc, [ip, #3924]!	; 0xf54

000110ec <memcmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #3916]!	; 0xf4c

000110f8 <dcgettext@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #3908]!	; 0xf44

00011104 <realloc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011110 <textdomain@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #102400	; 0x19000
   11118:	ldr	pc, [ip, #3892]!	; 0xf34

0001111c <iswprint@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #3884]!	; 0xf2c

00011128 <fwrite@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #3876]!	; 0xf24

00011134 <lseek64@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011140 <__ctype_get_mb_cur_max@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3860]!	; 0xf14

0001114c <__fpending@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3852]!	; 0xf0c

00011158 <mbrtowc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3844]!	; 0xf04

00011164 <error@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3836]!	; 0xefc

00011170 <strcoll@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3828]!	; 0xef4

0001117c <malloc@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3820]!	; 0xeec

00011188 <__libc_start_main@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3812]!	; 0xee4

00011194 <__freading@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3804]!	; 0xedc

000111a0 <__ctype_toupper_loc@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3796]!	; 0xed4

000111ac <__gmon_start__@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3788]!	; 0xecc

000111b8 <getopt_long@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #102400	; 0x19000
   111c0:	ldr	pc, [ip, #3780]!	; 0xec4

000111c4 <__ctype_b_loc@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #102400	; 0x19000
   111cc:	ldr	pc, [ip, #3772]!	; 0xebc

000111d0 <exit@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #102400	; 0x19000
   111d8:	ldr	pc, [ip, #3764]!	; 0xeb4

000111dc <bcmp@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #102400	; 0x19000
   111e4:	ldr	pc, [ip, #3756]!	; 0xeac

000111e8 <strtoul@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #102400	; 0x19000
   111f0:	ldr	pc, [ip, #3748]!	; 0xea4

000111f4 <strlen@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #102400	; 0x19000
   111fc:	ldr	pc, [ip, #3740]!	; 0xe9c

00011200 <strchr@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #102400	; 0x19000
   11208:	ldr	pc, [ip, #3732]!	; 0xe94

0001120c <__errno_location@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #102400	; 0x19000
   11214:	ldr	pc, [ip, #3724]!	; 0xe8c

00011218 <__cxa_atexit@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #102400	; 0x19000
   11220:	ldr	pc, [ip, #3716]!	; 0xe84

00011224 <memset@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #102400	; 0x19000
   1122c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011230 <__printf_chk@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #102400	; 0x19000
   11238:	ldr	pc, [ip, #3700]!	; 0xe74

0001123c <fileno@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #102400	; 0x19000
   11244:	ldr	pc, [ip, #3692]!	; 0xe6c

00011248 <__fprintf_chk@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #102400	; 0x19000
   11250:	ldr	pc, [ip, #3684]!	; 0xe64

00011254 <memchr@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #102400	; 0x19000
   1125c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011260 <fclose@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #102400	; 0x19000
   11268:	ldr	pc, [ip, #3668]!	; 0xe54

0001126c <fseeko64@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #102400	; 0x19000
   11274:	ldr	pc, [ip, #3660]!	; 0xe4c

00011278 <fcntl64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #102400	; 0x19000
   11280:	ldr	pc, [ip, #3652]!	; 0xe44

00011284 <__uflow@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #102400	; 0x19000
   1128c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011290 <__overflow@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #102400	; 0x19000
   11298:	ldr	pc, [ip, #3636]!	; 0xe34

0001129c <setlocale@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #102400	; 0x19000
   112a4:	ldr	pc, [ip, #3628]!	; 0xe2c

000112a8 <strrchr@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #102400	; 0x19000
   112b0:	ldr	pc, [ip, #3620]!	; 0xe24

000112b4 <nl_langinfo@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #102400	; 0x19000
   112bc:	ldr	pc, [ip, #3612]!	; 0xe1c

000112c0 <fopen64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #102400	; 0x19000
   112c8:	ldr	pc, [ip, #3604]!	; 0xe14

000112cc <strpbrk@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #102400	; 0x19000
   112d4:	ldr	pc, [ip, #3596]!	; 0xe0c

000112d8 <bindtextdomain@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #102400	; 0x19000
   112e0:	ldr	pc, [ip, #3588]!	; 0xe04

000112e4 <strncmp@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #102400	; 0x19000
   112ec:	ldr	pc, [ip, #3580]!	; 0xdfc

000112f0 <abort@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #102400	; 0x19000
   112f8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112fc <close@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #102400	; 0x19000
   11304:	ldr	pc, [ip, #3564]!	; 0xdec

00011308 <__assert_fail@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #102400	; 0x19000
   11310:	ldr	pc, [ip, #3556]!	; 0xde4

Disassembly of section .text:

00011314 <.text>:
   11314:	mov	fp, #0
   11318:	mov	lr, #0
   1131c:	pop	{r1}		; (ldr r1, [sp], #4)
   11320:	mov	r2, sp
   11324:	push	{r2}		; (str r2, [sp, #-4]!)
   11328:	push	{r0}		; (str r0, [sp, #-4]!)
   1132c:	ldr	ip, [pc, #16]	; 11344 <__assert_fail@plt+0x3c>
   11330:	push	{ip}		; (str ip, [sp, #-4]!)
   11334:	ldr	r0, [pc, #12]	; 11348 <__assert_fail@plt+0x40>
   11338:	ldr	r3, [pc, #12]	; 1134c <__assert_fail@plt+0x44>
   1133c:	bl	11188 <__libc_start_main@plt>
   11340:	bl	112f0 <abort@plt>
   11344:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11348:	strdeq	r1, [r1], -r0
   1134c:	andeq	r8, r1, r8, lsr pc
   11350:	ldr	r3, [pc, #20]	; 1136c <__assert_fail@plt+0x64>
   11354:	ldr	r2, [pc, #20]	; 11370 <__assert_fail@plt+0x68>
   11358:	add	r3, pc, r3
   1135c:	ldr	r2, [r3, r2]
   11360:	cmp	r2, #0
   11364:	bxeq	lr
   11368:	b	111ac <__gmon_start__@plt>
   1136c:	andeq	r9, r1, r0, lsr #25
   11370:	strdeq	r0, [r0], -r8
   11374:	ldr	r0, [pc, #24]	; 11394 <__assert_fail@plt+0x8c>
   11378:	ldr	r3, [pc, #24]	; 11398 <__assert_fail@plt+0x90>
   1137c:	cmp	r3, r0
   11380:	bxeq	lr
   11384:	ldr	r3, [pc, #16]	; 1139c <__assert_fail@plt+0x94>
   11388:	cmp	r3, #0
   1138c:	bxeq	lr
   11390:	bx	r3
   11394:	andeq	fp, r2, r0, ror #2
   11398:	andeq	fp, r2, r0, ror #2
   1139c:	andeq	r0, r0, r0
   113a0:	ldr	r0, [pc, #36]	; 113cc <__assert_fail@plt+0xc4>
   113a4:	ldr	r1, [pc, #36]	; 113d0 <__assert_fail@plt+0xc8>
   113a8:	sub	r1, r1, r0
   113ac:	asr	r1, r1, #2
   113b0:	add	r1, r1, r1, lsr #31
   113b4:	asrs	r1, r1, #1
   113b8:	bxeq	lr
   113bc:	ldr	r3, [pc, #16]	; 113d4 <__assert_fail@plt+0xcc>
   113c0:	cmp	r3, #0
   113c4:	bxeq	lr
   113c8:	bx	r3
   113cc:	andeq	fp, r2, r0, ror #2
   113d0:	andeq	fp, r2, r0, ror #2
   113d4:	andeq	r0, r0, r0
   113d8:	push	{r4, lr}
   113dc:	ldr	r4, [pc, #24]	; 113fc <__assert_fail@plt+0xf4>
   113e0:	ldrb	r3, [r4]
   113e4:	cmp	r3, #0
   113e8:	popne	{r4, pc}
   113ec:	bl	11374 <__assert_fail@plt+0x6c>
   113f0:	mov	r3, #1
   113f4:	strb	r3, [r4]
   113f8:	pop	{r4, pc}
   113fc:	andeq	fp, r2, r4, lsl #3
   11400:	b	113a0 <__assert_fail@plt+0x98>
   11404:	push	{fp, lr}
   11408:	mov	fp, sp
   1140c:	sub	sp, sp, #56	; 0x38
   11410:	mov	r4, r0
   11414:	cmp	r0, #0
   11418:	bne	116ac <__assert_fail@plt+0x3a4>
   1141c:	movw	r1, #36843	; 0x8feb
   11420:	mov	r0, #0
   11424:	mov	r2, #5
   11428:	movt	r1, #1
   1142c:	bl	110f8 <dcgettext@plt>
   11430:	mov	r1, r0
   11434:	movw	r0, #45568	; 0xb200
   11438:	movt	r0, #2
   1143c:	ldr	r2, [r0]
   11440:	mov	r0, #1
   11444:	bl	11230 <__printf_chk@plt>
   11448:	movw	r1, #36878	; 0x900e
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	110f8 <dcgettext@plt>
   1145c:	movw	r7, #45436	; 0xb17c
   11460:	movt	r7, #2
   11464:	ldr	r1, [r7]
   11468:	bl	11068 <fputs_unlocked@plt>
   1146c:	movw	r1, #37028	; 0x90a4
   11470:	mov	r0, #0
   11474:	mov	r2, #5
   11478:	movt	r1, #1
   1147c:	bl	110f8 <dcgettext@plt>
   11480:	ldr	r1, [r7]
   11484:	bl	11068 <fputs_unlocked@plt>
   11488:	movw	r1, #37088	; 0x90e0
   1148c:	mov	r0, #0
   11490:	mov	r2, #5
   11494:	movt	r1, #1
   11498:	bl	110f8 <dcgettext@plt>
   1149c:	ldr	r1, [r7]
   114a0:	bl	11068 <fputs_unlocked@plt>
   114a4:	movw	r1, #37311	; 0x91bf
   114a8:	mov	r0, #0
   114ac:	mov	r2, #5
   114b0:	movt	r1, #1
   114b4:	bl	110f8 <dcgettext@plt>
   114b8:	ldr	r1, [r7]
   114bc:	bl	11068 <fputs_unlocked@plt>
   114c0:	movw	r1, #37583	; 0x92cf
   114c4:	mov	r0, #0
   114c8:	mov	r2, #5
   114cc:	movt	r1, #1
   114d0:	bl	110f8 <dcgettext@plt>
   114d4:	ldr	r1, [r7]
   114d8:	bl	11068 <fputs_unlocked@plt>
   114dc:	movw	r1, #38114	; 0x94e2
   114e0:	mov	r0, #0
   114e4:	mov	r2, #5
   114e8:	movt	r1, #1
   114ec:	bl	110f8 <dcgettext@plt>
   114f0:	ldr	r1, [r7]
   114f4:	bl	11068 <fputs_unlocked@plt>
   114f8:	movw	r1, #38175	; 0x951f
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	110f8 <dcgettext@plt>
   1150c:	ldr	r1, [r7]
   11510:	bl	11068 <fputs_unlocked@plt>
   11514:	movw	r1, #38220	; 0x954c
   11518:	mov	r0, #0
   1151c:	mov	r2, #5
   11520:	movt	r1, #1
   11524:	bl	110f8 <dcgettext@plt>
   11528:	ldr	r1, [r7]
   1152c:	bl	11068 <fputs_unlocked@plt>
   11530:	movw	r1, #38274	; 0x9582
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	movt	r1, #1
   11540:	bl	110f8 <dcgettext@plt>
   11544:	ldr	r1, [r7]
   11548:	bl	11068 <fputs_unlocked@plt>
   1154c:	movw	r0, #40056	; 0x9c78
   11550:	mov	r2, #48	; 0x30
   11554:	mov	r6, sp
   11558:	movw	r5, #39092	; 0x98b4
   1155c:	movt	r0, #1
   11560:	movt	r5, #1
   11564:	add	r1, r0, #32
   11568:	add	r3, r0, #16
   1156c:	vld1.64	{d18-d19}, [r0], r2
   11570:	vld1.64	{d16-d17}, [r1]
   11574:	vld1.64	{d20-d21}, [r3]
   11578:	vldr	d22, [r0]
   1157c:	add	r1, r6, #32
   11580:	add	r0, r6, #16
   11584:	vst1.64	{d16-d17}, [r1]
   11588:	movw	r1, #39392	; 0x99e0
   1158c:	vst1.64	{d20-d21}, [r0]
   11590:	mov	r0, r6
   11594:	movt	r1, #1
   11598:	vst1.64	{d18-d19}, [r0], r2
   1159c:	vstr	d22, [r0]
   115a0:	mov	r0, r5
   115a4:	bl	11080 <strcmp@plt>
   115a8:	cmp	r0, #0
   115ac:	ldrne	r1, [r6, #8]!
   115b0:	cmpne	r1, #0
   115b4:	bne	115a0 <__assert_fail@plt+0x298>
   115b8:	movw	r1, #39487	; 0x9a3f
   115bc:	ldr	r6, [r6, #4]
   115c0:	mov	r0, #0
   115c4:	mov	r2, #5
   115c8:	movt	r1, #1
   115cc:	bl	110f8 <dcgettext@plt>
   115d0:	movw	r2, #39259	; 0x995b
   115d4:	movw	r3, #39510	; 0x9a56
   115d8:	mov	r1, r0
   115dc:	mov	r0, #1
   115e0:	movt	r2, #1
   115e4:	movt	r3, #1
   115e8:	bl	11230 <__printf_chk@plt>
   115ec:	cmp	r6, #0
   115f0:	mov	r0, #5
   115f4:	mov	r1, #0
   115f8:	moveq	r6, r5
   115fc:	bl	1129c <setlocale@plt>
   11600:	cmp	r0, #0
   11604:	beq	1163c <__assert_fail@plt+0x334>
   11608:	movw	r1, #39550	; 0x9a7e
   1160c:	mov	r2, #3
   11610:	movt	r1, #1
   11614:	bl	112e4 <strncmp@plt>
   11618:	cmp	r0, #0
   1161c:	beq	1163c <__assert_fail@plt+0x334>
   11620:	movw	r1, #39554	; 0x9a82
   11624:	mov	r0, #0
   11628:	mov	r2, #5
   1162c:	movt	r1, #1
   11630:	bl	110f8 <dcgettext@plt>
   11634:	ldr	r1, [r7]
   11638:	bl	11068 <fputs_unlocked@plt>
   1163c:	movw	r1, #39625	; 0x9ac9
   11640:	mov	r0, #0
   11644:	mov	r2, #5
   11648:	movt	r1, #1
   1164c:	bl	110f8 <dcgettext@plt>
   11650:	movw	r2, #39510	; 0x9a56
   11654:	mov	r1, r0
   11658:	mov	r0, #1
   1165c:	mov	r3, r5
   11660:	movt	r2, #1
   11664:	bl	11230 <__printf_chk@plt>
   11668:	movw	r1, #39652	; 0x9ae4
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	110f8 <dcgettext@plt>
   1167c:	mov	r1, r0
   11680:	movw	r0, #39420	; 0x99fc
   11684:	movw	r3, #39802	; 0x9b7a
   11688:	cmp	r6, r5
   1168c:	mov	r2, r6
   11690:	movt	r0, #1
   11694:	movt	r3, #1
   11698:	moveq	r3, r0
   1169c:	mov	r0, #1
   116a0:	bl	11230 <__printf_chk@plt>
   116a4:	mov	r0, r4
   116a8:	bl	111d0 <exit@plt>
   116ac:	movw	r0, #45424	; 0xb170
   116b0:	movw	r1, #36804	; 0x8fc4
   116b4:	mov	r2, #5
   116b8:	movt	r0, #2
   116bc:	movt	r1, #1
   116c0:	ldr	r5, [r0]
   116c4:	mov	r0, #0
   116c8:	bl	110f8 <dcgettext@plt>
   116cc:	mov	r2, r0
   116d0:	movw	r0, #45568	; 0xb200
   116d4:	mov	r1, #1
   116d8:	movt	r0, #2
   116dc:	ldr	r3, [r0]
   116e0:	mov	r0, r5
   116e4:	bl	11248 <__fprintf_chk@plt>
   116e8:	mov	r0, r4
   116ec:	bl	111d0 <exit@plt>
   116f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116f4:	add	fp, sp, #28
   116f8:	sub	sp, sp, #76	; 0x4c
   116fc:	mov	r6, #0
   11700:	mov	r9, r0
   11704:	mov	r8, r1
   11708:	str	r6, [sp, #40]	; 0x28
   1170c:	str	r6, [sp, #28]
   11710:	str	r6, [sp, #24]
   11714:	str	r6, [sp, #20]
   11718:	ldr	r0, [r1]
   1171c:	bl	14694 <__assert_fail@plt+0x338c>
   11720:	movw	r1, #39802	; 0x9b7a
   11724:	mov	r0, #6
   11728:	movt	r1, #1
   1172c:	bl	1129c <setlocale@plt>
   11730:	movw	r5, #39263	; 0x995f
   11734:	movw	r1, #39097	; 0x98b9
   11738:	movt	r5, #1
   1173c:	movt	r1, #1
   11740:	mov	r0, r5
   11744:	bl	112d8 <bindtextdomain@plt>
   11748:	mov	r0, r5
   1174c:	bl	11110 <textdomain@plt>
   11750:	mov	r0, #3
   11754:	bl	143dc <__assert_fail@plt+0x30d4>
   11758:	movw	r1, #45448	; 0xb188
   1175c:	movt	r1, #2
   11760:	strb	r0, [r1]
   11764:	movw	r0, #16444	; 0x403c
   11768:	movt	r0, #1
   1176c:	bl	18f9c <__assert_fail@plt+0x7c94>
   11770:	movw	r0, #12780	; 0x31ec
   11774:	movt	r0, #1
   11778:	bl	18f9c <__assert_fail@plt+0x7c94>
   1177c:	movw	r0, #45449	; 0xb189
   11780:	mov	r1, #1
   11784:	movw	r2, #39121	; 0x98d1
   11788:	movw	r3, #39928	; 0x9bf8
   1178c:	str	r6, [sp]
   11790:	movt	r0, #2
   11794:	movt	r2, #1
   11798:	movt	r3, #1
   1179c:	strb	r1, [r0]
   117a0:	movw	r0, #45450	; 0xb18a
   117a4:	mov	r1, r8
   117a8:	movt	r0, #2
   117ac:	strb	r6, [r0]
   117b0:	movw	r0, #45451	; 0xb18b
   117b4:	movt	r0, #2
   117b8:	strh	r6, [r0]
   117bc:	movw	r0, #45456	; 0xb190
   117c0:	movt	r0, #2
   117c4:	str	r6, [r0]
   117c8:	mov	r0, r9
   117cc:	bl	111b8 <getopt_long@plt>
   117d0:	movw	r5, #45416	; 0xb168
   117d4:	movw	r4, #45320	; 0xb108
   117d8:	movw	sl, #45461	; 0xb195
   117dc:	cmn	r0, #1
   117e0:	movt	r5, #2
   117e4:	movt	r4, #2
   117e8:	movt	sl, #2
   117ec:	beq	11ee4 <__assert_fail@plt+0xbdc>
   117f0:	movw	r7, #39121	; 0x98d1
   117f4:	movt	r7, #1
   117f8:	b	11874 <__assert_fail@plt+0x56c>
   117fc:	mvn	r5, #0
   11800:	str	r6, [fp, #-36]	; 0xffffffdc
   11804:	str	r5, [fp, #-40]	; 0xffffffd8
   11808:	movw	r1, #45324	; 0xb10c
   1180c:	sub	r0, r5, #1
   11810:	movt	r1, #2
   11814:	ldr	r4, [r1]
   11818:	cmn	r4, #1
   1181c:	cmpne	r4, r0
   11820:	bne	130f4 <__assert_fail@plt+0x1dec>
   11824:	movw	r1, #45324	; 0xb10c
   11828:	movw	r4, #45320	; 0xb108
   1182c:	movt	r1, #2
   11830:	movt	r4, #2
   11834:	str	r0, [r1]
   11838:	mov	r0, #0
   1183c:	movw	r5, #45416	; 0xb168
   11840:	movt	r5, #2
   11844:	movw	r7, #39121	; 0x98d1
   11848:	movt	r7, #1
   1184c:	movw	r3, #39928	; 0x9bf8
   11850:	str	r0, [sp, #40]	; 0x28
   11854:	mov	r0, r9
   11858:	mov	r1, r8
   1185c:	mov	r2, r7
   11860:	str	r6, [sp]
   11864:	movt	r3, #1
   11868:	bl	111b8 <getopt_long@plt>
   1186c:	cmn	r0, #1
   11870:	beq	11ee4 <__assert_fail@plt+0xbdc>
   11874:	cmp	r0, #255	; 0xff
   11878:	str	r6, [sp, #44]	; 0x2c
   1187c:	bgt	11ac0 <__assert_fail@plt+0x7b8>
   11880:	add	r0, r0, #3
   11884:	cmp	r0, #125	; 0x7d
   11888:	bhi	131e4 <__assert_fail@plt+0x1edc>
   1188c:	add	r1, pc, #0
   11890:	ldr	pc, [r1, r0, lsl #2]
   11894:	andeq	r2, r1, r4, lsr #31
   11898:	andeq	r2, r1, ip, ror #31
   1189c:	andeq	r3, r1, r4, ror #3
   118a0:	andeq	r3, r1, r4, ror #3
   118a4:	andeq	r1, r1, ip, lsl #21
   118a8:	andeq	r3, r1, r4, ror #3
   118ac:	andeq	r3, r1, r4, ror #3
   118b0:	andeq	r3, r1, r4, ror #3
   118b4:	andeq	r3, r1, r4, ror #3
   118b8:	andeq	r3, r1, r4, ror #3
   118bc:	andeq	r3, r1, r4, ror #3
   118c0:	andeq	r3, r1, r4, ror #3
   118c4:	andeq	r3, r1, r4, ror #3
   118c8:	andeq	r3, r1, r4, ror #3
   118cc:	andeq	r3, r1, r4, ror #3
   118d0:	andeq	r3, r1, r4, ror #3
   118d4:	andeq	r3, r1, r4, ror #3
   118d8:	andeq	r3, r1, r4, ror #3
   118dc:	andeq	r3, r1, r4, ror #3
   118e0:	andeq	r3, r1, r4, ror #3
   118e4:	andeq	r3, r1, r4, ror #3
   118e8:	andeq	r3, r1, r4, ror #3
   118ec:	andeq	r3, r1, r4, ror #3
   118f0:	andeq	r3, r1, r4, ror #3
   118f4:	andeq	r3, r1, r4, ror #3
   118f8:	andeq	r3, r1, r4, ror #3
   118fc:	andeq	r3, r1, r4, ror #3
   11900:	andeq	r3, r1, r4, ror #3
   11904:	andeq	r3, r1, r4, ror #3
   11908:	andeq	r3, r1, r4, ror #3
   1190c:	andeq	r3, r1, r4, ror #3
   11910:	andeq	r3, r1, r4, ror #3
   11914:	andeq	r3, r1, r4, ror #3
   11918:	andeq	r3, r1, r4, ror #3
   1191c:	andeq	r3, r1, r4, ror #3
   11920:	andeq	r3, r1, r4, ror #3
   11924:	andeq	r3, r1, r4, ror #3
   11928:	andeq	r3, r1, r4, ror #3
   1192c:	andeq	r3, r1, r4, ror #3
   11930:	andeq	r3, r1, r4, ror #3
   11934:	andeq	r3, r1, r4, ror #3
   11938:	andeq	r3, r1, r4, ror #3
   1193c:	andeq	r3, r1, r4, ror #3
   11940:	andeq	r3, r1, r4, ror #3
   11944:	andeq	r3, r1, r4, ror #3
   11948:	andeq	r3, r1, r4, ror #3
   1194c:	andeq	r3, r1, r4, ror #3
   11950:	andeq	r3, r1, r4, ror #3
   11954:	andeq	r3, r1, r4, ror #3
   11958:	andeq	r3, r1, r4, ror #3
   1195c:	andeq	r3, r1, r4, ror #3
   11960:	andeq	r3, r1, r4, ror #3
   11964:	andeq	r1, r1, r8, asr #23
   11968:	andeq	r1, r1, r4, lsr #24
   1196c:	andeq	r3, r1, r4, ror #3
   11970:	andeq	r3, r1, r4, ror #3
   11974:	andeq	r3, r1, r4, ror #3
   11978:	andeq	r3, r1, r4, ror #3
   1197c:	andeq	r3, r1, r4, ror #3
   11980:	andeq	r3, r1, r4, ror #3
   11984:	andeq	r3, r1, r4, ror #3
   11988:	andeq	r3, r1, r4, ror #3
   1198c:	andeq	r3, r1, r4, ror #3
   11990:	andeq	r3, r1, r4, ror #3
   11994:	andeq	r3, r1, r4, ror #3
   11998:	andeq	r3, r1, r4, ror #3
   1199c:	andeq	r3, r1, r4, ror #3
   119a0:	andeq	r3, r1, r4, ror #3
   119a4:	andeq	r3, r1, r4, ror #3
   119a8:	andeq	r3, r1, r4, ror #3
   119ac:	andeq	r3, r1, r4, ror #3
   119b0:	andeq	r3, r1, r4, ror #3
   119b4:	andeq	r3, r1, r4, ror #3
   119b8:	andeq	r3, r1, r4, ror #3
   119bc:	andeq	r3, r1, r4, ror #3
   119c0:	andeq	r3, r1, r4, ror #3
   119c4:	andeq	r3, r1, r4, ror #3
   119c8:	andeq	r3, r1, r4, ror #3
   119cc:	andeq	r3, r1, r4, ror #3
   119d0:	andeq	r3, r1, r4, ror #3
   119d4:	andeq	r3, r1, r4, ror #3
   119d8:	andeq	r3, r1, r4, ror #3
   119dc:	andeq	r3, r1, r4, ror #3
   119e0:	andeq	r3, r1, r4, ror #3
   119e4:	andeq	r3, r1, r4, ror #3
   119e8:	andeq	r3, r1, r4, ror #3
   119ec:	andeq	r3, r1, r4, ror #3
   119f0:	andeq	r3, r1, r4, ror #3
   119f4:	andeq	r3, r1, r4, ror #3
   119f8:	andeq	r3, r1, r4, ror #3
   119fc:	andeq	r3, r1, r4, ror #3
   11a00:	andeq	r3, r1, r4, ror #3
   11a04:	andeq	r3, r1, r4, ror #3
   11a08:	andeq	r3, r1, r4, ror #3
   11a0c:	andeq	r3, r1, r4, ror #3
   11a10:	andeq	r3, r1, r4, ror #3
   11a14:	andeq	r3, r1, r4, ror #3
   11a18:	andeq	r3, r1, r4, ror #3
   11a1c:	andeq	r3, r1, r4, ror #3
   11a20:	andeq	r3, r1, r4, ror #3
   11a24:	andeq	r1, r1, ip, lsr sp
   11a28:	andeq	r3, r1, r4, ror #3
   11a2c:	andeq	r3, r1, r4, ror #3
   11a30:	andeq	r3, r1, r4, ror #3
   11a34:	andeq	r1, r1, ip, lsr #25
   11a38:	andeq	r3, r1, r4, ror #3
   11a3c:	andeq	r3, r1, r4, ror #3
   11a40:	andeq	r3, r1, r4, ror #3
   11a44:	andeq	r1, r1, r0, ror #25
   11a48:	andeq	r1, r1, r4, ror #21
   11a4c:	andeq	r3, r1, r4, ror #3
   11a50:	andeq	r3, r1, r4, ror #3
   11a54:	andeq	r3, r1, r4, ror #3
   11a58:	andeq	r3, r1, r4, ror #3
   11a5c:	strdeq	r1, [r1], -r8
   11a60:	andeq	r3, r1, r4, ror #3
   11a64:	andeq	r3, r1, r4, ror #3
   11a68:	andeq	r3, r1, r4, ror #3
   11a6c:	andeq	r3, r1, r4, ror #3
   11a70:	andeq	r1, r1, r8, lsl #23
   11a74:	andeq	r3, r1, r4, ror #3
   11a78:	andeq	r1, r1, r0, lsr sp
   11a7c:	andeq	r3, r1, r4, ror #3
   11a80:	andeq	r3, r1, r4, ror #3
   11a84:	andeq	r3, r1, r4, ror #3
   11a88:	andeq	r1, r1, r4, lsl #25
   11a8c:	movw	r0, #45440	; 0xb180
   11a90:	add	r1, sp, #40	; 0x28
   11a94:	add	r2, sp, #24
   11a98:	add	r3, sp, #20
   11a9c:	movt	r0, #2
   11aa0:	str	r1, [sp]
   11aa4:	add	r1, sp, #44	; 0x2c
   11aa8:	str	r1, [sp, #4]
   11aac:	add	r1, sp, #32
   11ab0:	ldr	r0, [r0]
   11ab4:	bl	133c0 <__assert_fail@plt+0x20b8>
   11ab8:	ldr	r0, [sp, #44]	; 0x2c
   11abc:	b	1184c <__assert_fail@plt+0x544>
   11ac0:	cmp	r0, #256	; 0x100
   11ac4:	beq	11b78 <__assert_fail@plt+0x870>
   11ac8:	movw	r1, #257	; 0x101
   11acc:	cmp	r0, r1
   11ad0:	bne	11c94 <__assert_fail@plt+0x98c>
   11ad4:	movw	r0, #45456	; 0xb190
   11ad8:	mov	r1, #2
   11adc:	movt	r0, #2
   11ae0:	b	11dc8 <__assert_fail@plt+0xac0>
   11ae4:	movw	r0, #45440	; 0xb180
   11ae8:	movt	r0, #2
   11aec:	ldr	sl, [r0]
   11af0:	ldrb	r0, [sl]
   11af4:	sub	r1, r0, #49	; 0x31
   11af8:	uxtb	r1, r1
   11afc:	cmp	r1, #1
   11b00:	bhi	11b28 <__assert_fail@plt+0x820>
   11b04:	ldrb	r1, [sl, #1]
   11b08:	cmp	r1, #0
   11b0c:	bne	11b28 <__assert_fail@plt+0x820>
   11b10:	ldr	r1, [r5]
   11b14:	add	r1, r8, r1, lsl #2
   11b18:	ldr	r1, [r1, #-4]
   11b1c:	add	r1, r1, #2
   11b20:	cmp	sl, r1
   11b24:	beq	11eac <__assert_fail@plt+0xba4>
   11b28:	movw	r0, #39802	; 0x9b7a
   11b2c:	mov	r1, #0
   11b30:	mov	r2, #10
   11b34:	sub	r3, fp, #40	; 0x28
   11b38:	movt	r0, #1
   11b3c:	str	r0, [sp]
   11b40:	mov	r0, sl
   11b44:	bl	17b24 <__assert_fail@plt+0x681c>
   11b48:	cmp	r0, #1
   11b4c:	beq	11b68 <__assert_fail@plt+0x860>
   11b50:	ldr	r7, [fp, #-40]	; 0xffffffd8
   11b54:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11b58:	cmp	r0, #0
   11b5c:	bne	11e40 <__assert_fail@plt+0xb38>
   11b60:	cmp	r1, #0
   11b64:	beq	11e40 <__assert_fail@plt+0xb38>
   11b68:	mvn	r7, #0
   11b6c:	str	r6, [fp, #-36]	; 0xffffffdc
   11b70:	str	r7, [fp, #-40]	; 0xffffffd8
   11b74:	b	11e50 <__assert_fail@plt+0xb48>
   11b78:	movw	r0, #45456	; 0xb190
   11b7c:	mov	r1, #1
   11b80:	movt	r0, #2
   11b84:	b	11dc8 <__assert_fail@plt+0xac0>
   11b88:	movw	r0, #45440	; 0xb180
   11b8c:	movt	r0, #2
   11b90:	ldr	r0, [r0]
   11b94:	ldrb	r1, [r0]
   11b98:	cmp	r1, #0
   11b9c:	beq	11da0 <__assert_fail@plt+0xa98>
   11ba0:	ldrb	r2, [r0, #1]
   11ba4:	cmp	r2, #0
   11ba8:	beq	11da4 <__assert_fail@plt+0xa9c>
   11bac:	movw	r1, #39215	; 0x992f
   11bb0:	movt	r1, #1
   11bb4:	bl	11080 <strcmp@plt>
   11bb8:	mov	r1, #0
   11bbc:	cmp	r0, #0
   11bc0:	beq	11da4 <__assert_fail@plt+0xa9c>
   11bc4:	b	13084 <__assert_fail@plt+0x1d7c>
   11bc8:	movw	r0, #45440	; 0xb180
   11bcc:	mov	r1, #0
   11bd0:	mov	r2, #10
   11bd4:	sub	r3, fp, #40	; 0x28
   11bd8:	movt	r0, #2
   11bdc:	ldr	r7, [r0]
   11be0:	movw	r0, #39802	; 0x9b7a
   11be4:	movt	r0, #1
   11be8:	str	r0, [sp]
   11bec:	mov	r0, r7
   11bf0:	bl	17b24 <__assert_fail@plt+0x681c>
   11bf4:	cmp	r0, #1
   11bf8:	beq	11c14 <__assert_fail@plt+0x90c>
   11bfc:	ldr	r5, [fp, #-40]	; 0xffffffd8
   11c00:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11c04:	cmp	r0, #0
   11c08:	bne	11e0c <__assert_fail@plt+0xb04>
   11c0c:	cmp	r1, #0
   11c10:	beq	11e0c <__assert_fail@plt+0xb04>
   11c14:	mvn	r5, #0
   11c18:	str	r6, [fp, #-36]	; 0xffffffdc
   11c1c:	str	r5, [fp, #-40]	; 0xffffffd8
   11c20:	b	11e1c <__assert_fail@plt+0xb14>
   11c24:	movw	r0, #45440	; 0xb180
   11c28:	mov	r1, #0
   11c2c:	mov	r2, #10
   11c30:	sub	r3, fp, #40	; 0x28
   11c34:	movt	r0, #2
   11c38:	ldr	r7, [r0]
   11c3c:	movw	r0, #39802	; 0x9b7a
   11c40:	movt	r0, #1
   11c44:	str	r0, [sp]
   11c48:	mov	r0, r7
   11c4c:	bl	17b24 <__assert_fail@plt+0x681c>
   11c50:	cmp	r0, #1
   11c54:	beq	117fc <__assert_fail@plt+0x4f4>
   11c58:	ldr	r5, [fp, #-40]	; 0xffffffd8
   11c5c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11c60:	cmp	r0, #0
   11c64:	bne	11c70 <__assert_fail@plt+0x968>
   11c68:	cmp	r1, #0
   11c6c:	bne	117fc <__assert_fail@plt+0x4f4>
   11c70:	cmp	r0, #0
   11c74:	bne	130a8 <__assert_fail@plt+0x1da0>
   11c78:	orrs	r0, r5, r1
   11c7c:	bne	11808 <__assert_fail@plt+0x500>
   11c80:	b	130a8 <__assert_fail@plt+0x1da0>
   11c84:	movw	r1, #45470	; 0xb19e
   11c88:	mov	r0, #1
   11c8c:	movt	r1, #2
   11c90:	b	11cec <__assert_fail@plt+0x9e4>
   11c94:	movw	r1, #258	; 0x102
   11c98:	cmp	r0, r1
   11c9c:	bne	131e4 <__assert_fail@plt+0x1edc>
   11ca0:	movw	r0, #45480	; 0xb1a8
   11ca4:	movt	r0, #2
   11ca8:	b	11d90 <__assert_fail@plt+0xa88>
   11cac:	movw	r0, #45464	; 0xb198
   11cb0:	movt	r0, #2
   11cb4:	ldr	r0, [r0]
   11cb8:	cmp	r0, #0
   11cbc:	beq	11dd4 <__assert_fail@plt+0xacc>
   11cc0:	movw	r1, #45440	; 0xb180
   11cc4:	movt	r1, #2
   11cc8:	ldr	r7, [r1]
   11ccc:	mov	r1, r7
   11cd0:	bl	11080 <strcmp@plt>
   11cd4:	cmp	r0, #0
   11cd8:	beq	11de0 <__assert_fail@plt+0xad8>
   11cdc:	b	13090 <__assert_fail@plt+0x1d88>
   11ce0:	movw	r1, #45468	; 0xb19c
   11ce4:	mov	r0, #1
   11ce8:	movt	r1, #2
   11cec:	strb	r0, [r1]
   11cf0:	mov	r0, #0
   11cf4:	b	1184c <__assert_fail@plt+0x544>
   11cf8:	movw	r0, #45440	; 0xb180
   11cfc:	movw	r1, #39210	; 0x992a
   11d00:	movt	r0, #2
   11d04:	movt	r1, #1
   11d08:	ldr	r7, [r0]
   11d0c:	mov	r0, r7
   11d10:	bl	11080 <strcmp@plt>
   11d14:	cmp	r0, #0
   11d18:	beq	11df4 <__assert_fail@plt+0xaec>
   11d1c:	mov	r0, r7
   11d20:	bl	13264 <__assert_fail@plt+0x1f5c>
   11d24:	mov	r0, #3
   11d28:	str	r0, [sp, #44]	; 0x2c
   11d2c:	b	11844 <__assert_fail@plt+0x53c>
   11d30:	movw	r0, #45449	; 0xb189
   11d34:	movt	r0, #2
   11d38:	strb	r6, [r0]
   11d3c:	movw	r0, #45440	; 0xb180
   11d40:	movw	r1, #39802	; 0x9b7a
   11d44:	mov	r2, #10
   11d48:	sub	r3, fp, #40	; 0x28
   11d4c:	movt	r0, #2
   11d50:	movt	r1, #1
   11d54:	ldr	r0, [r0]
   11d58:	str	r1, [sp]
   11d5c:	mov	r1, #0
   11d60:	bl	172f8 <__assert_fail@plt+0x5ff0>
   11d64:	cmp	r0, #0
   11d68:	bne	12ff4 <__assert_fail@plt+0x1cec>
   11d6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11d70:	sub	r1, r0, #1
   11d74:	cmp	r1, #2
   11d78:	bcs	12ff4 <__assert_fail@plt+0x1cec>
   11d7c:	movw	r1, #45460	; 0xb194
   11d80:	cmp	r0, #1
   11d84:	mov	r0, sl
   11d88:	movt	r1, #2
   11d8c:	moveq	r0, r1
   11d90:	mov	r1, #1
   11d94:	strb	r1, [r0]
   11d98:	mov	r0, #0
   11d9c:	b	1184c <__assert_fail@plt+0x544>
   11da0:	mov	r1, #10
   11da4:	movw	r0, #45328	; 0xb110
   11da8:	movt	r0, #2
   11dac:	ldr	r0, [r0]
   11db0:	cmp	r0, #0
   11db4:	bmi	11dc0 <__assert_fail@plt+0xab8>
   11db8:	cmp	r0, r1
   11dbc:	bne	1309c <__assert_fail@plt+0x1d94>
   11dc0:	movw	r0, #45328	; 0xb110
   11dc4:	movt	r0, #2
   11dc8:	str	r1, [r0]
   11dcc:	mov	r0, #0
   11dd0:	b	1184c <__assert_fail@plt+0x544>
   11dd4:	movw	r0, #45440	; 0xb180
   11dd8:	movt	r0, #2
   11ddc:	ldr	r7, [r0]
   11de0:	movw	r0, #45464	; 0xb198
   11de4:	movt	r0, #2
   11de8:	str	r7, [r0]
   11dec:	mov	r0, #0
   11df0:	b	11844 <__assert_fail@plt+0x53c>
   11df4:	movw	r0, #45469	; 0xb19d
   11df8:	mov	r1, #1
   11dfc:	movt	r0, #2
   11e00:	strb	r1, [r0]
   11e04:	mov	r0, #0
   11e08:	b	11844 <__assert_fail@plt+0x53c>
   11e0c:	cmp	r0, #0
   11e10:	bne	130a8 <__assert_fail@plt+0x1da0>
   11e14:	orrs	r0, r5, r1
   11e18:	beq	130a8 <__assert_fail@plt+0x1da0>
   11e1c:	ldr	r4, [r4]
   11e20:	sub	r0, r5, #1
   11e24:	cmn	r4, #1
   11e28:	cmpne	r4, r0
   11e2c:	bne	130f4 <__assert_fail@plt+0x1dec>
   11e30:	movw	r4, #45320	; 0xb108
   11e34:	movt	r4, #2
   11e38:	str	r0, [r4]
   11e3c:	b	11838 <__assert_fail@plt+0x530>
   11e40:	cmp	r0, #0
   11e44:	bne	130c8 <__assert_fail@plt+0x1dc0>
   11e48:	orrs	r0, r7, r1
   11e4c:	beq	130c8 <__assert_fail@plt+0x1dc0>
   11e50:	ldr	r4, [r4]
   11e54:	sub	r0, r7, #1
   11e58:	cmn	r4, #1
   11e5c:	cmpne	r4, r0
   11e60:	bne	13030 <__assert_fail@plt+0x1d28>
   11e64:	movw	r1, #45320	; 0xb108
   11e68:	movw	sl, #45461	; 0xb195
   11e6c:	movt	r1, #2
   11e70:	movt	sl, #2
   11e74:	str	r0, [r1]
   11e78:	movw	r1, #45324	; 0xb10c
   11e7c:	movt	r1, #2
   11e80:	ldr	r4, [r1]
   11e84:	cmn	r4, #1
   11e88:	cmpne	r4, r0
   11e8c:	bne	13030 <__assert_fail@plt+0x1d28>
   11e90:	movw	r1, #45324	; 0xb10c
   11e94:	movw	r4, #45320	; 0xb108
   11e98:	movt	r1, #2
   11e9c:	movt	r4, #2
   11ea0:	str	r0, [r1]
   11ea4:	mov	r0, #0
   11ea8:	b	11844 <__assert_fail@plt+0x53c>
   11eac:	subs	r0, r0, #50	; 0x32
   11eb0:	add	r1, sp, #24
   11eb4:	movw	sl, #45461	; 0xb195
   11eb8:	clz	r0, r0
   11ebc:	movt	sl, #2
   11ec0:	lsr	r0, r0, #5
   11ec4:	orr	r0, r1, r0, lsl #2
   11ec8:	ldr	r1, [r0]
   11ecc:	add	r1, r1, #1
   11ed0:	str	r1, [r0]
   11ed4:	mov	r0, #1
   11ed8:	movweq	r0, #2
   11edc:	str	r0, [sp, #44]	; 0x2c
   11ee0:	b	1184c <__assert_fail@plt+0x544>
   11ee4:	ldr	r0, [r5]
   11ee8:	str	r6, [sp, #40]	; 0x28
   11eec:	cmp	r0, r9
   11ef0:	bge	11f38 <__assert_fail@plt+0xc30>
   11ef4:	add	r4, sp, #40	; 0x28
   11ef8:	add	r6, sp, #32
   11efc:	add	r7, sp, #24
   11f00:	add	sl, sp, #20
   11f04:	add	r1, r0, #1
   11f08:	mov	r2, r7
   11f0c:	mov	r3, sl
   11f10:	str	r1, [r5]
   11f14:	add	r1, sp, #44	; 0x2c
   11f18:	ldr	r0, [r8, r0, lsl #2]
   11f1c:	str	r1, [sp, #4]
   11f20:	mov	r1, r6
   11f24:	str	r4, [sp]
   11f28:	bl	133c0 <__assert_fail@plt+0x20b8>
   11f2c:	ldr	r0, [r5]
   11f30:	cmp	r0, r9
   11f34:	blt	11f04 <__assert_fail@plt+0xbfc>
   11f38:	ldr	r0, [sp, #20]
   11f3c:	cmp	r0, #2
   11f40:	bne	13050 <__assert_fail@plt+0x1d48>
   11f44:	ldr	r0, [sp, #24]
   11f48:	movw	r1, #45320	; 0xb108
   11f4c:	movw	r2, #45324	; 0xb10c
   11f50:	movt	r1, #2
   11f54:	movt	r2, #2
   11f58:	cmp	r0, #0
   11f5c:	beq	11f94 <__assert_fail@plt+0xc8c>
   11f60:	ldr	r4, [r1]
   11f64:	add	r0, r4, #1
   11f68:	cmp	r0, #2
   11f6c:	bcs	130e8 <__assert_fail@plt+0x1de0>
   11f70:	ldr	r4, [r2]
   11f74:	mov	r0, #0
   11f78:	str	r0, [r1]
   11f7c:	add	r1, r4, #1
   11f80:	cmp	r1, #2
   11f84:	bcs	130e8 <__assert_fail@plt+0x1de0>
   11f88:	movw	r1, #45320	; 0xb108
   11f8c:	str	r0, [r2]
   11f90:	movt	r1, #2
   11f94:	ldr	r0, [sp, #28]
   11f98:	ldr	r4, [r1]
   11f9c:	cmp	r0, #0
   11fa0:	beq	11fd8 <__assert_fail@plt+0xcd0>
   11fa4:	cmp	r4, #1
   11fa8:	cmnne	r4, #1
   11fac:	bne	130f0 <__assert_fail@plt+0x1de8>
   11fb0:	ldr	r4, [r2]
   11fb4:	movw	r1, #45320	; 0xb108
   11fb8:	mov	r0, #1
   11fbc:	movt	r1, #2
   11fc0:	str	r0, [r1]
   11fc4:	cmn	r4, #1
   11fc8:	cmpne	r4, #1
   11fcc:	bne	130f0 <__assert_fail@plt+0x1de8>
   11fd0:	str	r0, [r2]
   11fd4:	b	11ffc <__assert_fail@plt+0xcf4>
   11fd8:	cmn	r4, #1
   11fdc:	bne	11ff0 <__assert_fail@plt+0xce8>
   11fe0:	movw	r1, #45320	; 0xb108
   11fe4:	mov	r0, #0
   11fe8:	movt	r1, #2
   11fec:	str	r0, [r1]
   11ff0:	ldr	r0, [r2]
   11ff4:	cmn	r0, #1
   11ff8:	beq	12460 <__assert_fail@plt+0x1158>
   11ffc:	movw	r6, #45472	; 0xb1a0
   12000:	movw	r1, #40220	; 0x9d1c
   12004:	movt	r6, #2
   12008:	movt	r1, #1
   1200c:	ldr	r4, [r6]
   12010:	mov	r0, r4
   12014:	bl	11080 <strcmp@plt>
   12018:	cmp	r0, #0
   1201c:	beq	12038 <__assert_fail@plt+0xd30>
   12020:	movw	r1, #39750	; 0x9b46
   12024:	mov	r0, r4
   12028:	movt	r1, #1
   1202c:	bl	1425c <__assert_fail@plt+0x2f54>
   12030:	mov	r8, r0
   12034:	b	12044 <__assert_fail@plt+0xd3c>
   12038:	movw	r0, #45432	; 0xb178
   1203c:	movt	r0, #2
   12040:	ldr	r8, [r0]
   12044:	movw	r4, #45320	; 0xb108
   12048:	cmp	r8, #0
   1204c:	movt	r4, #2
   12050:	beq	13120 <__assert_fail@plt+0x1e18>
   12054:	ldr	r5, [r6, #4]
   12058:	movw	r1, #40220	; 0x9d1c
   1205c:	movt	r1, #1
   12060:	mov	r0, r5
   12064:	bl	11080 <strcmp@plt>
   12068:	cmp	r0, #0
   1206c:	beq	12238 <__assert_fail@plt+0xf30>
   12070:	movw	r1, #39750	; 0x9b46
   12074:	mov	r0, r5
   12078:	movt	r1, #1
   1207c:	bl	1425c <__assert_fail@plt+0x2f54>
   12080:	mov	r5, r0
   12084:	cmp	r5, #0
   12088:	beq	1224c <__assert_fail@plt+0xf44>
   1208c:	cmp	r8, r5
   12090:	beq	13130 <__assert_fail@plt+0x1e28>
   12094:	mov	r0, r8
   12098:	mov	r1, #2
   1209c:	bl	14128 <__assert_fail@plt+0x2e20>
   120a0:	mov	r0, r5
   120a4:	mov	r1, #2
   120a8:	bl	14128 <__assert_fail@plt+0x2e20>
   120ac:	sub	r0, fp, #40	; 0x28
   120b0:	mov	r6, #0
   120b4:	mov	r2, #4
   120b8:	add	r1, r0, #4
   120bc:	mov	r0, #0
   120c0:	str	r6, [fp, #-32]	; 0xffffffe0
   120c4:	str	r6, [fp, #-36]	; 0xffffffdc
   120c8:	str	r6, [fp, #-40]	; 0xffffffd8
   120cc:	str	r1, [sp, #12]
   120d0:	bl	16d44 <__assert_fail@plt+0x5a3c>
   120d4:	str	r0, [fp, #-32]	; 0xffffffe0
   120d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   120dc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   120e0:	cmp	r1, r2
   120e4:	strcc	r6, [r0, r1, lsl #2]
   120e8:	addcc	r0, r1, #1
   120ec:	cmpcc	r0, r2
   120f0:	bcc	1225c <__assert_fail@plt+0xf54>
   120f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   120f8:	mov	r2, #1
   120fc:	add	r1, r0, r1, lsl #2
   12100:	mov	r0, r8
   12104:	bl	13b04 <__assert_fail@plt+0x27fc>
   12108:	cmp	r0, #0
   1210c:	beq	1211c <__assert_fail@plt+0xe14>
   12110:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12114:	add	r0, r0, #1
   12118:	str	r0, [fp, #-40]	; 0xffffffd8
   1211c:	add	r0, sp, #52	; 0x34
   12120:	mov	r6, #0
   12124:	mov	r2, #4
   12128:	add	r1, r0, #4
   1212c:	mov	r0, #0
   12130:	str	r6, [sp, #60]	; 0x3c
   12134:	str	r6, [sp, #56]	; 0x38
   12138:	str	r6, [sp, #52]	; 0x34
   1213c:	str	r1, [sp, #16]
   12140:	bl	16d44 <__assert_fail@plt+0x5a3c>
   12144:	str	r0, [sp, #60]	; 0x3c
   12148:	ldr	r1, [sp, #52]	; 0x34
   1214c:	ldr	r2, [sp, #56]	; 0x38
   12150:	cmp	r1, r2
   12154:	strcc	r6, [r0, r1, lsl #2]
   12158:	addcc	r0, r1, #1
   1215c:	cmpcc	r0, r2
   12160:	bcc	122f8 <__assert_fail@plt+0xff0>
   12164:	ldr	r0, [sp, #60]	; 0x3c
   12168:	mov	r2, #2
   1216c:	add	r1, r0, r1, lsl #2
   12170:	mov	r0, r5
   12174:	bl	13b04 <__assert_fail@plt+0x27fc>
   12178:	cmp	r0, #0
   1217c:	beq	1218c <__assert_fail@plt+0xe84>
   12180:	ldr	r0, [sp, #52]	; 0x34
   12184:	add	r0, r0, #1
   12188:	str	r0, [sp, #52]	; 0x34
   1218c:	movw	r0, #45469	; 0xb19d
   12190:	movw	r6, #45324	; 0xb10c
   12194:	movt	r0, #2
   12198:	movt	r6, #2
   1219c:	ldrb	r0, [r0]
   121a0:	cmp	r0, #1
   121a4:	bne	121f8 <__assert_fail@plt+0xef0>
   121a8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   121ac:	mov	r0, #0
   121b0:	cmp	r1, #0
   121b4:	mov	r1, #0
   121b8:	beq	121c8 <__assert_fail@plt+0xec0>
   121bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   121c0:	ldr	r1, [r1]
   121c4:	ldr	r1, [r1, #12]
   121c8:	movw	r2, #45504	; 0xb1c0
   121cc:	movt	r2, #2
   121d0:	str	r1, [r2]
   121d4:	ldr	r1, [sp, #52]	; 0x34
   121d8:	cmp	r1, #0
   121dc:	beq	121ec <__assert_fail@plt+0xee4>
   121e0:	ldr	r0, [sp, #60]	; 0x3c
   121e4:	ldr	r0, [r0]
   121e8:	ldr	r0, [r0, #12]
   121ec:	movw	r1, #45508	; 0xb1c4
   121f0:	movt	r1, #2
   121f4:	str	r0, [r1]
   121f8:	movw	r0, #45480	; 0xb1a8
   121fc:	movt	r0, #2
   12200:	ldrb	r0, [r0]
   12204:	cmp	r0, #1
   12208:	bne	12624 <__assert_fail@plt+0x131c>
   1220c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12210:	cmp	r0, #0
   12214:	beq	12394 <__assert_fail@plt+0x108c>
   12218:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1221c:	ldr	r1, [sp, #52]	; 0x34
   12220:	ldr	r0, [r0]
   12224:	cmp	r1, #0
   12228:	bne	123a8 <__assert_fail@plt+0x10a0>
   1222c:	movw	r1, #45512	; 0xb1c8
   12230:	movt	r1, #2
   12234:	b	123b0 <__assert_fail@plt+0x10a8>
   12238:	movw	r0, #45432	; 0xb178
   1223c:	movt	r0, #2
   12240:	ldr	r5, [r0]
   12244:	cmp	r5, #0
   12248:	bne	1208c <__assert_fail@plt+0xd84>
   1224c:	bl	1120c <__errno_location@plt>
   12250:	ldr	r4, [r0]
   12254:	ldr	r2, [r6, #4]
   12258:	b	13188 <__assert_fail@plt+0x1e80>
   1225c:	mvn	r7, r1
   12260:	sub	r3, r2, r1
   12264:	add	r7, r2, r7
   12268:	sub	r3, r3, #2
   1226c:	ands	r7, r7, #3
   12270:	beq	1228c <__assert_fail@plt+0xf84>
   12274:	mov	r6, #0
   12278:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1227c:	subs	r7, r7, #1
   12280:	str	r6, [r4, r0, lsl #2]
   12284:	add	r0, r0, #1
   12288:	bne	12278 <__assert_fail@plt+0xf70>
   1228c:	movw	r4, #45320	; 0xb108
   12290:	cmp	r3, #3
   12294:	movt	r4, #2
   12298:	bcc	120f4 <__assert_fail@plt+0xdec>
   1229c:	sub	r2, r0, r2
   122a0:	lsl	r0, r0, #2
   122a4:	mov	r3, #0
   122a8:	mov	r7, #0
   122ac:	ldr	r6, [fp, #-32]	; 0xffffffe0
   122b0:	add	r6, r6, r0
   122b4:	str	r3, [r6, -r7, lsl #2]
   122b8:	ldr	r6, [fp, #-32]	; 0xffffffe0
   122bc:	add	r6, r6, r0
   122c0:	sub	r6, r6, r7, lsl #2
   122c4:	str	r3, [r6, #4]
   122c8:	ldr	r6, [fp, #-32]	; 0xffffffe0
   122cc:	add	r6, r6, r0
   122d0:	sub	r6, r6, r7, lsl #2
   122d4:	str	r3, [r6, #8]
   122d8:	ldr	r6, [fp, #-32]	; 0xffffffe0
   122dc:	add	r6, r6, r0
   122e0:	sub	r6, r6, r7, lsl #2
   122e4:	sub	r7, r7, #4
   122e8:	cmp	r2, r7
   122ec:	str	r3, [r6, #12]
   122f0:	bne	122ac <__assert_fail@plt+0xfa4>
   122f4:	b	120f4 <__assert_fail@plt+0xdec>
   122f8:	mvn	r7, r1
   122fc:	sub	r3, r2, r1
   12300:	add	r7, r2, r7
   12304:	sub	r3, r3, #2
   12308:	ands	r7, r7, #3
   1230c:	beq	12328 <__assert_fail@plt+0x1020>
   12310:	mov	r6, #0
   12314:	ldr	r4, [sp, #60]	; 0x3c
   12318:	subs	r7, r7, #1
   1231c:	str	r6, [r4, r0, lsl #2]
   12320:	add	r0, r0, #1
   12324:	bne	12314 <__assert_fail@plt+0x100c>
   12328:	movw	r4, #45320	; 0xb108
   1232c:	cmp	r3, #3
   12330:	movt	r4, #2
   12334:	bcc	12164 <__assert_fail@plt+0xe5c>
   12338:	sub	r2, r0, r2
   1233c:	lsl	r0, r0, #2
   12340:	mov	r3, #0
   12344:	mov	r7, #0
   12348:	ldr	r6, [sp, #60]	; 0x3c
   1234c:	add	r6, r6, r0
   12350:	str	r3, [r6, -r7, lsl #2]
   12354:	ldr	r6, [sp, #60]	; 0x3c
   12358:	add	r6, r6, r0
   1235c:	sub	r6, r6, r7, lsl #2
   12360:	str	r3, [r6, #4]
   12364:	ldr	r6, [sp, #60]	; 0x3c
   12368:	add	r6, r6, r0
   1236c:	sub	r6, r6, r7, lsl #2
   12370:	str	r3, [r6, #8]
   12374:	ldr	r6, [sp, #60]	; 0x3c
   12378:	add	r6, r6, r0
   1237c:	sub	r6, r6, r7, lsl #2
   12380:	sub	r7, r7, #4
   12384:	cmp	r2, r7
   12388:	str	r3, [r6, #12]
   1238c:	bne	12348 <__assert_fail@plt+0x1040>
   12390:	b	12164 <__assert_fail@plt+0xe5c>
   12394:	ldr	r0, [sp, #52]	; 0x34
   12398:	cmp	r0, #0
   1239c:	beq	12624 <__assert_fail@plt+0x131c>
   123a0:	movw	r0, #45512	; 0xb1c8
   123a4:	movt	r0, #2
   123a8:	ldr	r1, [sp, #60]	; 0x3c
   123ac:	ldr	r1, [r1]
   123b0:	bl	13630 <__assert_fail@plt+0x2328>
   123b4:	movw	r0, #45536	; 0xb1e0
   123b8:	mov	r1, #0
   123bc:	movt	r0, #2
   123c0:	str	r1, [r0]
   123c4:	str	r1, [r0, #4]
   123c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   123cc:	cmp	r0, #0
   123d0:	beq	124f8 <__assert_fail@plt+0x11f0>
   123d4:	str	r1, [fp, #-40]	; 0xffffffd8
   123d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   123dc:	cmp	r0, #0
   123e0:	bne	124d0 <__assert_fail@plt+0x11c8>
   123e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   123e8:	ldr	r1, [sp, #12]
   123ec:	mov	r2, #4
   123f0:	bl	16d44 <__assert_fail@plt+0x5a3c>
   123f4:	str	r0, [fp, #-32]	; 0xffffffe0
   123f8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   123fc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12400:	cmp	r1, r2
   12404:	bcs	124d0 <__assert_fail@plt+0x11c8>
   12408:	mov	r3, #0
   1240c:	str	r3, [r0, r1, lsl #2]
   12410:	add	r0, r1, #1
   12414:	cmp	r0, r2
   12418:	bcs	124d0 <__assert_fail@plt+0x11c8>
   1241c:	mvn	r7, r1
   12420:	sub	r3, r2, r1
   12424:	add	r7, r2, r7
   12428:	sub	r3, r3, #2
   1242c:	ands	r7, r7, #3
   12430:	beq	1244c <__assert_fail@plt+0x1144>
   12434:	mov	r6, #0
   12438:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1243c:	subs	r7, r7, #1
   12440:	str	r6, [r4, r0, lsl #2]
   12444:	add	r0, r0, #1
   12448:	bne	12438 <__assert_fail@plt+0x1130>
   1244c:	cmp	r3, #3
   12450:	bcs	12468 <__assert_fail@plt+0x1160>
   12454:	movw	r4, #45320	; 0xb108
   12458:	movt	r4, #2
   1245c:	b	124c8 <__assert_fail@plt+0x11c0>
   12460:	mov	r0, #0
   12464:	b	11fd0 <__assert_fail@plt+0xcc8>
   12468:	movw	r4, #45320	; 0xb108
   1246c:	sub	r2, r0, r2
   12470:	lsl	r0, r0, #2
   12474:	mov	r3, #0
   12478:	mov	r7, #0
   1247c:	movt	r4, #2
   12480:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12484:	add	r6, r6, r0
   12488:	str	r3, [r6, -r7, lsl #2]
   1248c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12490:	add	r6, r6, r0
   12494:	sub	r6, r6, r7, lsl #2
   12498:	str	r3, [r6, #4]
   1249c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   124a0:	add	r6, r6, r0
   124a4:	sub	r6, r6, r7, lsl #2
   124a8:	str	r3, [r6, #8]
   124ac:	ldr	r6, [fp, #-32]	; 0xffffffe0
   124b0:	add	r6, r6, r0
   124b4:	sub	r6, r6, r7, lsl #2
   124b8:	sub	r7, r7, #4
   124bc:	cmp	r2, r7
   124c0:	str	r3, [r6, #12]
   124c4:	bne	12480 <__assert_fail@plt+0x1178>
   124c8:	movw	r6, #45324	; 0xb10c
   124cc:	movt	r6, #2
   124d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   124d4:	mov	r2, #1
   124d8:	add	r1, r0, r1, lsl #2
   124dc:	mov	r0, r8
   124e0:	bl	13b04 <__assert_fail@plt+0x27fc>
   124e4:	cmp	r0, #0
   124e8:	beq	124f8 <__assert_fail@plt+0x11f0>
   124ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   124f0:	add	r0, r0, #1
   124f4:	str	r0, [fp, #-40]	; 0xffffffd8
   124f8:	ldr	r0, [sp, #52]	; 0x34
   124fc:	cmp	r0, #0
   12500:	beq	12624 <__assert_fail@plt+0x131c>
   12504:	mov	r1, #0
   12508:	str	r1, [sp, #52]	; 0x34
   1250c:	ldr	r0, [sp, #56]	; 0x38
   12510:	cmp	r0, #0
   12514:	bne	125fc <__assert_fail@plt+0x12f4>
   12518:	ldr	r0, [sp, #60]	; 0x3c
   1251c:	ldr	r1, [sp, #16]
   12520:	mov	r2, #4
   12524:	bl	16d44 <__assert_fail@plt+0x5a3c>
   12528:	str	r0, [sp, #60]	; 0x3c
   1252c:	ldr	r1, [sp, #52]	; 0x34
   12530:	ldr	r2, [sp, #56]	; 0x38
   12534:	cmp	r1, r2
   12538:	bcs	125fc <__assert_fail@plt+0x12f4>
   1253c:	mov	r3, #0
   12540:	str	r3, [r0, r1, lsl #2]
   12544:	add	r0, r1, #1
   12548:	cmp	r0, r2
   1254c:	bcs	125fc <__assert_fail@plt+0x12f4>
   12550:	mvn	r7, r1
   12554:	sub	r3, r2, r1
   12558:	add	r7, r2, r7
   1255c:	sub	r3, r3, #2
   12560:	ands	r7, r7, #3
   12564:	beq	12580 <__assert_fail@plt+0x1278>
   12568:	mov	r6, #0
   1256c:	ldr	r4, [sp, #60]	; 0x3c
   12570:	subs	r7, r7, #1
   12574:	str	r6, [r4, r0, lsl #2]
   12578:	add	r0, r0, #1
   1257c:	bne	1256c <__assert_fail@plt+0x1264>
   12580:	cmp	r3, #3
   12584:	bcs	12594 <__assert_fail@plt+0x128c>
   12588:	movw	r4, #45320	; 0xb108
   1258c:	movt	r4, #2
   12590:	b	125f4 <__assert_fail@plt+0x12ec>
   12594:	movw	r4, #45320	; 0xb108
   12598:	sub	r2, r0, r2
   1259c:	lsl	r0, r0, #2
   125a0:	mov	r3, #0
   125a4:	mov	r7, #0
   125a8:	movt	r4, #2
   125ac:	ldr	r6, [sp, #60]	; 0x3c
   125b0:	add	r6, r6, r0
   125b4:	str	r3, [r6, -r7, lsl #2]
   125b8:	ldr	r6, [sp, #60]	; 0x3c
   125bc:	add	r6, r6, r0
   125c0:	sub	r6, r6, r7, lsl #2
   125c4:	str	r3, [r6, #4]
   125c8:	ldr	r6, [sp, #60]	; 0x3c
   125cc:	add	r6, r6, r0
   125d0:	sub	r6, r6, r7, lsl #2
   125d4:	str	r3, [r6, #8]
   125d8:	ldr	r6, [sp, #60]	; 0x3c
   125dc:	add	r6, r6, r0
   125e0:	sub	r6, r6, r7, lsl #2
   125e4:	sub	r7, r7, #4
   125e8:	cmp	r2, r7
   125ec:	str	r3, [r6, #12]
   125f0:	bne	125ac <__assert_fail@plt+0x12a4>
   125f4:	movw	r6, #45324	; 0xb10c
   125f8:	movt	r6, #2
   125fc:	ldr	r0, [sp, #60]	; 0x3c
   12600:	mov	r2, #2
   12604:	add	r1, r0, r1, lsl #2
   12608:	mov	r0, r5
   1260c:	bl	13b04 <__assert_fail@plt+0x27fc>
   12610:	cmp	r0, #0
   12614:	beq	12624 <__assert_fail@plt+0x131c>
   12618:	ldr	r0, [sp, #52]	; 0x34
   1261c:	add	r0, r0, #1
   12620:	str	r0, [sp, #52]	; 0x34
   12624:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12628:	ldr	r0, [sp, #52]	; 0x34
   1262c:	cmp	r1, #0
   12630:	cmpne	r0, #0
   12634:	beq	12c74 <__assert_fail@plt+0x196c>
   12638:	mov	sl, #0
   1263c:	b	12664 <__assert_fail@plt+0x135c>
   12640:	movw	r0, #45450	; 0xb18a
   12644:	mov	r1, #1
   12648:	movt	r0, #2
   1264c:	strb	r1, [r0]
   12650:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12654:	ldr	r0, [sp, #52]	; 0x34
   12658:	cmp	r1, #0
   1265c:	cmpne	r0, #0
   12660:	beq	12c74 <__assert_fail@plt+0x196c>
   12664:	ldr	r0, [sp, #60]	; 0x3c
   12668:	ldr	r3, [r6]
   1266c:	ldr	r2, [r4]
   12670:	ldr	r1, [r0]
   12674:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12678:	ldr	r0, [r0]
   1267c:	bl	13a0c <__assert_fail@plt+0x2704>
   12680:	cmn	r0, #1
   12684:	ble	1298c <__assert_fail@plt+0x1684>
   12688:	cmp	r0, #0
   1268c:	beq	127c8 <__assert_fail@plt+0x14c0>
   12690:	movw	r0, #45461	; 0xb195
   12694:	movt	r0, #2
   12698:	ldrb	r0, [r0]
   1269c:	cmp	r0, #1
   126a0:	bne	126b8 <__assert_fail@plt+0x13b0>
   126a4:	ldr	r0, [sp, #60]	; 0x3c
   126a8:	ldr	r1, [r0]
   126ac:	movw	r0, #45512	; 0xb1c8
   126b0:	movt	r0, #2
   126b4:	bl	13630 <__assert_fail@plt+0x2328>
   126b8:	mov	r1, #0
   126bc:	str	r1, [sp, #52]	; 0x34
   126c0:	ldr	r0, [sp, #56]	; 0x38
   126c4:	cmp	r0, #0
   126c8:	bne	126fc <__assert_fail@plt+0x13f4>
   126cc:	ldr	r0, [sp, #60]	; 0x3c
   126d0:	ldr	r1, [sp, #16]
   126d4:	mov	r2, #4
   126d8:	bl	16d44 <__assert_fail@plt+0x5a3c>
   126dc:	str	r0, [sp, #60]	; 0x3c
   126e0:	ldr	r1, [sp, #52]	; 0x34
   126e4:	ldr	r2, [sp, #56]	; 0x38
   126e8:	cmp	r1, r2
   126ec:	strcc	sl, [r0, r1, lsl #2]
   126f0:	addcc	r0, r1, #1
   126f4:	cmpcc	r0, r2
   126f8:	bcc	12b34 <__assert_fail@plt+0x182c>
   126fc:	ldr	r0, [sp, #60]	; 0x3c
   12700:	mov	r2, #2
   12704:	add	r1, r0, r1, lsl #2
   12708:	mov	r0, r5
   1270c:	bl	13b04 <__assert_fail@plt+0x27fc>
   12710:	cmp	r0, #0
   12714:	beq	12640 <__assert_fail@plt+0x1338>
   12718:	ldr	r0, [sp, #52]	; 0x34
   1271c:	add	r0, r0, #1
   12720:	str	r0, [sp, #52]	; 0x34
   12724:	b	12640 <__assert_fail@plt+0x1338>
   12728:	mvn	r7, r1
   1272c:	sub	r3, r2, r1
   12730:	add	r7, r2, r7
   12734:	sub	r3, r3, #2
   12738:	ands	r7, r7, #3
   1273c:	beq	12754 <__assert_fail@plt+0x144c>
   12740:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12744:	subs	r7, r7, #1
   12748:	str	sl, [r6, r0, lsl #2]
   1274c:	add	r0, r0, #1
   12750:	bne	12740 <__assert_fail@plt+0x1438>
   12754:	cmp	r3, #3
   12758:	bcs	12768 <__assert_fail@plt+0x1460>
   1275c:	movw	r6, #45324	; 0xb10c
   12760:	movt	r6, #2
   12764:	b	12808 <__assert_fail@plt+0x1500>
   12768:	movw	r6, #45324	; 0xb10c
   1276c:	sub	r2, r0, r2
   12770:	lsl	r0, r0, #2
   12774:	mov	r3, #0
   12778:	movt	r6, #2
   1277c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12780:	add	r7, r7, r0
   12784:	str	sl, [r7, -r3, lsl #2]
   12788:	ldr	r7, [fp, #-32]	; 0xffffffe0
   1278c:	add	r7, r7, r0
   12790:	sub	r7, r7, r3, lsl #2
   12794:	str	sl, [r7, #4]
   12798:	ldr	r7, [fp, #-32]	; 0xffffffe0
   1279c:	add	r7, r7, r0
   127a0:	sub	r7, r7, r3, lsl #2
   127a4:	str	sl, [r7, #8]
   127a8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   127ac:	add	r7, r7, r0
   127b0:	sub	r7, r7, r3, lsl #2
   127b4:	sub	r3, r3, #4
   127b8:	cmp	r2, r3
   127bc:	str	sl, [r7, #12]
   127c0:	bne	1277c <__assert_fail@plt+0x1474>
   127c4:	b	12808 <__assert_fail@plt+0x1500>
   127c8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   127cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   127d0:	cmp	r1, r0
   127d4:	bne	12808 <__assert_fail@plt+0x1500>
   127d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127dc:	ldr	r1, [sp, #12]
   127e0:	mov	r2, #4
   127e4:	bl	16d44 <__assert_fail@plt+0x5a3c>
   127e8:	str	r0, [fp, #-32]	; 0xffffffe0
   127ec:	ldr	r1, [fp, #-40]	; 0xffffffd8
   127f0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   127f4:	cmp	r1, r2
   127f8:	strcc	sl, [r0, r1, lsl #2]
   127fc:	addcc	r0, r1, #1
   12800:	cmpcc	r0, r2
   12804:	bcc	12728 <__assert_fail@plt+0x1420>
   12808:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1280c:	mov	r2, #1
   12810:	mov	r9, #1
   12814:	add	r1, r0, r1, lsl #2
   12818:	mov	r0, r8
   1281c:	bl	13b04 <__assert_fail@plt+0x27fc>
   12820:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12824:	cmp	r0, #0
   12828:	add	r2, r1, #1
   1282c:	str	r2, [fp, #-40]	; 0xffffffd8
   12830:	beq	1285c <__assert_fail@plt+0x1554>
   12834:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12838:	ldr	r3, [r6]
   1283c:	ldr	r2, [r4]
   12840:	ldr	r0, [r0, r1, lsl #2]
   12844:	ldr	r1, [sp, #60]	; 0x3c
   12848:	ldr	r1, [r1]
   1284c:	bl	13a0c <__assert_fail@plt+0x2704>
   12850:	cmp	r0, #0
   12854:	beq	127c8 <__assert_fail@plt+0x14c0>
   12858:	mov	r9, #0
   1285c:	ldr	r1, [sp, #52]	; 0x34
   12860:	ldr	r0, [sp, #56]	; 0x38
   12864:	cmp	r1, r0
   12868:	bne	1289c <__assert_fail@plt+0x1594>
   1286c:	ldr	r0, [sp, #60]	; 0x3c
   12870:	ldr	r1, [sp, #16]
   12874:	mov	r2, #4
   12878:	bl	16d44 <__assert_fail@plt+0x5a3c>
   1287c:	str	r0, [sp, #60]	; 0x3c
   12880:	ldr	r1, [sp, #52]	; 0x34
   12884:	ldr	r2, [sp, #56]	; 0x38
   12888:	cmp	r1, r2
   1288c:	strcc	sl, [r0, r1, lsl #2]
   12890:	addcc	r0, r1, #1
   12894:	cmpcc	r0, r2
   12898:	bcc	128ec <__assert_fail@plt+0x15e4>
   1289c:	ldr	r0, [sp, #60]	; 0x3c
   128a0:	mov	r2, #2
   128a4:	add	r1, r0, r1, lsl #2
   128a8:	mov	r0, r5
   128ac:	bl	13b04 <__assert_fail@plt+0x27fc>
   128b0:	ldr	r1, [sp, #52]	; 0x34
   128b4:	cmp	r0, #0
   128b8:	add	r2, r1, #1
   128bc:	str	r2, [sp, #52]	; 0x34
   128c0:	beq	12a24 <__assert_fail@plt+0x171c>
   128c4:	ldr	r0, [sp, #60]	; 0x3c
   128c8:	ldr	r3, [r6]
   128cc:	ldr	r2, [r4]
   128d0:	ldr	r1, [r0, r1, lsl #2]
   128d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   128d8:	ldr	r0, [r0]
   128dc:	bl	13a0c <__assert_fail@plt+0x2704>
   128e0:	cmp	r0, #0
   128e4:	beq	1285c <__assert_fail@plt+0x1554>
   128e8:	b	12a2c <__assert_fail@plt+0x1724>
   128ec:	mvn	r7, r1
   128f0:	sub	r3, r2, r1
   128f4:	add	r7, r2, r7
   128f8:	sub	r3, r3, #2
   128fc:	ands	r7, r7, #3
   12900:	beq	12918 <__assert_fail@plt+0x1610>
   12904:	ldr	r6, [sp, #60]	; 0x3c
   12908:	subs	r7, r7, #1
   1290c:	str	sl, [r6, r0, lsl #2]
   12910:	add	r0, r0, #1
   12914:	bne	12904 <__assert_fail@plt+0x15fc>
   12918:	cmp	r3, #3
   1291c:	bcs	1292c <__assert_fail@plt+0x1624>
   12920:	movw	r6, #45324	; 0xb10c
   12924:	movt	r6, #2
   12928:	b	1289c <__assert_fail@plt+0x1594>
   1292c:	movw	r6, #45324	; 0xb10c
   12930:	sub	r2, r0, r2
   12934:	lsl	r0, r0, #2
   12938:	mov	r3, #0
   1293c:	movt	r6, #2
   12940:	ldr	r7, [sp, #60]	; 0x3c
   12944:	add	r7, r7, r0
   12948:	str	sl, [r7, -r3, lsl #2]
   1294c:	ldr	r7, [sp, #60]	; 0x3c
   12950:	add	r7, r7, r0
   12954:	sub	r7, r7, r3, lsl #2
   12958:	str	sl, [r7, #4]
   1295c:	ldr	r7, [sp, #60]	; 0x3c
   12960:	add	r7, r7, r0
   12964:	sub	r7, r7, r3, lsl #2
   12968:	str	sl, [r7, #8]
   1296c:	ldr	r7, [sp, #60]	; 0x3c
   12970:	add	r7, r7, r0
   12974:	sub	r7, r7, r3, lsl #2
   12978:	sub	r3, r3, #4
   1297c:	cmp	r2, r3
   12980:	str	sl, [r7, #12]
   12984:	bne	12940 <__assert_fail@plt+0x1638>
   12988:	b	1289c <__assert_fail@plt+0x1594>
   1298c:	movw	r0, #45460	; 0xb194
   12990:	movt	r0, #2
   12994:	ldrb	r0, [r0]
   12998:	cmp	r0, #1
   1299c:	bne	129b4 <__assert_fail@plt+0x16ac>
   129a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   129a4:	movw	r1, #45512	; 0xb1c8
   129a8:	movt	r1, #2
   129ac:	ldr	r0, [r0]
   129b0:	bl	13630 <__assert_fail@plt+0x2328>
   129b4:	mov	r1, #0
   129b8:	str	r1, [fp, #-40]	; 0xffffffd8
   129bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   129c0:	cmp	r0, #0
   129c4:	bne	129f8 <__assert_fail@plt+0x16f0>
   129c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   129cc:	ldr	r1, [sp, #12]
   129d0:	mov	r2, #4
   129d4:	bl	16d44 <__assert_fail@plt+0x5a3c>
   129d8:	str	r0, [fp, #-32]	; 0xffffffe0
   129dc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   129e0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   129e4:	cmp	r1, r2
   129e8:	strcc	sl, [r0, r1, lsl #2]
   129ec:	addcc	r0, r1, #1
   129f0:	cmpcc	r0, r2
   129f4:	bcc	12b74 <__assert_fail@plt+0x186c>
   129f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   129fc:	mov	r2, #1
   12a00:	add	r1, r0, r1, lsl #2
   12a04:	mov	r0, r8
   12a08:	bl	13b04 <__assert_fail@plt+0x27fc>
   12a0c:	cmp	r0, #0
   12a10:	beq	12640 <__assert_fail@plt+0x1338>
   12a14:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12a18:	add	r0, r0, #1
   12a1c:	str	r0, [fp, #-40]	; 0xffffffd8
   12a20:	b	12640 <__assert_fail@plt+0x1338>
   12a24:	mov	r6, #1
   12a28:	b	12a30 <__assert_fail@plt+0x1728>
   12a2c:	mov	r6, #0
   12a30:	movw	r0, #45449	; 0xb189
   12a34:	movt	r0, #2
   12a38:	ldrb	r0, [r0]
   12a3c:	cmp	r0, #1
   12a40:	bne	12ab8 <__assert_fail@plt+0x17b0>
   12a44:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12a48:	cmp	r0, #1
   12a4c:	beq	12ab8 <__assert_fail@plt+0x17b0>
   12a50:	ldr	r2, [sp, #52]	; 0x34
   12a54:	mov	r7, #0
   12a58:	b	12a70 <__assert_fail@plt+0x1768>
   12a5c:	add	r7, r7, #1
   12a60:	sub	r2, r0, #1
   12a64:	cmp	r7, r2
   12a68:	mov	r2, r1
   12a6c:	bcs	12ab8 <__assert_fail@plt+0x17b0>
   12a70:	mov	r1, #1
   12a74:	cmp	r2, #1
   12a78:	beq	12a5c <__assert_fail@plt+0x1754>
   12a7c:	mov	r4, #0
   12a80:	ldr	r0, [sp, #60]	; 0x3c
   12a84:	ldr	r1, [r0, r4, lsl #2]
   12a88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12a8c:	ldr	r0, [r0, r7, lsl #2]
   12a90:	bl	13630 <__assert_fail@plt+0x2328>
   12a94:	ldr	r1, [sp, #52]	; 0x34
   12a98:	add	r4, r4, #1
   12a9c:	sub	r0, r1, #1
   12aa0:	cmp	r4, r0
   12aa4:	bcc	12a80 <__assert_fail@plt+0x1778>
   12aa8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12aac:	movw	r4, #45320	; 0xb108
   12ab0:	movt	r4, #2
   12ab4:	b	12a5c <__assert_fail@plt+0x1754>
   12ab8:	mov	r0, #0
   12abc:	cmp	r9, #0
   12ac0:	mov	r1, #0
   12ac4:	bne	12af0 <__assert_fail@plt+0x17e8>
   12ac8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12acc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12ad0:	mvn	r3, #3
   12ad4:	add	r1, r3, r1, lsl #2
   12ad8:	ldr	r7, [r2]
   12adc:	ldr	r3, [r2, r1]
   12ae0:	str	r3, [r2]
   12ae4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12ae8:	str	r7, [r2, r1]
   12aec:	mov	r1, #1
   12af0:	cmp	r6, #0
   12af4:	str	r1, [fp, #-40]	; 0xffffffd8
   12af8:	bne	12b24 <__assert_fail@plt+0x181c>
   12afc:	ldr	r0, [sp, #52]	; 0x34
   12b00:	ldr	r1, [sp, #60]	; 0x3c
   12b04:	mvn	r2, #3
   12b08:	add	r0, r2, r0, lsl #2
   12b0c:	ldr	r3, [r1]
   12b10:	ldr	r2, [r1, r0]
   12b14:	str	r2, [r1]
   12b18:	ldr	r1, [sp, #60]	; 0x3c
   12b1c:	str	r3, [r1, r0]
   12b20:	mov	r0, #1
   12b24:	movw	r6, #45324	; 0xb10c
   12b28:	str	r0, [sp, #52]	; 0x34
   12b2c:	movt	r6, #2
   12b30:	b	12650 <__assert_fail@plt+0x1348>
   12b34:	mvn	r7, r1
   12b38:	sub	r3, r2, r1
   12b3c:	add	r7, r2, r7
   12b40:	sub	r3, r3, #2
   12b44:	ands	r7, r7, #3
   12b48:	beq	12b60 <__assert_fail@plt+0x1858>
   12b4c:	ldr	r6, [sp, #60]	; 0x3c
   12b50:	subs	r7, r7, #1
   12b54:	str	sl, [r6, r0, lsl #2]
   12b58:	add	r0, r0, #1
   12b5c:	bne	12b4c <__assert_fail@plt+0x1844>
   12b60:	cmp	r3, #3
   12b64:	bcs	12bb4 <__assert_fail@plt+0x18ac>
   12b68:	movw	r6, #45324	; 0xb10c
   12b6c:	movt	r6, #2
   12b70:	b	126fc <__assert_fail@plt+0x13f4>
   12b74:	mvn	r7, r1
   12b78:	sub	r3, r2, r1
   12b7c:	add	r7, r2, r7
   12b80:	sub	r3, r3, #2
   12b84:	ands	r7, r7, #3
   12b88:	beq	12ba0 <__assert_fail@plt+0x1898>
   12b8c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12b90:	subs	r7, r7, #1
   12b94:	str	sl, [r6, r0, lsl #2]
   12b98:	add	r0, r0, #1
   12b9c:	bne	12b8c <__assert_fail@plt+0x1884>
   12ba0:	cmp	r3, #3
   12ba4:	bcs	12c14 <__assert_fail@plt+0x190c>
   12ba8:	movw	r6, #45324	; 0xb10c
   12bac:	movt	r6, #2
   12bb0:	b	129f8 <__assert_fail@plt+0x16f0>
   12bb4:	movw	r6, #45324	; 0xb10c
   12bb8:	sub	r2, r0, r2
   12bbc:	lsl	r0, r0, #2
   12bc0:	mov	r3, #0
   12bc4:	movt	r6, #2
   12bc8:	ldr	r7, [sp, #60]	; 0x3c
   12bcc:	add	r7, r7, r0
   12bd0:	str	sl, [r7, -r3, lsl #2]
   12bd4:	ldr	r7, [sp, #60]	; 0x3c
   12bd8:	add	r7, r7, r0
   12bdc:	sub	r7, r7, r3, lsl #2
   12be0:	str	sl, [r7, #4]
   12be4:	ldr	r7, [sp, #60]	; 0x3c
   12be8:	add	r7, r7, r0
   12bec:	sub	r7, r7, r3, lsl #2
   12bf0:	str	sl, [r7, #8]
   12bf4:	ldr	r7, [sp, #60]	; 0x3c
   12bf8:	add	r7, r7, r0
   12bfc:	sub	r7, r7, r3, lsl #2
   12c00:	sub	r3, r3, #4
   12c04:	cmp	r2, r3
   12c08:	str	sl, [r7, #12]
   12c0c:	bne	12bc8 <__assert_fail@plt+0x18c0>
   12c10:	b	126fc <__assert_fail@plt+0x13f4>
   12c14:	movw	r6, #45324	; 0xb10c
   12c18:	sub	r2, r0, r2
   12c1c:	lsl	r0, r0, #2
   12c20:	mov	r3, #0
   12c24:	movt	r6, #2
   12c28:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12c2c:	add	r7, r7, r0
   12c30:	str	sl, [r7, -r3, lsl #2]
   12c34:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12c38:	add	r7, r7, r0
   12c3c:	sub	r7, r7, r3, lsl #2
   12c40:	str	sl, [r7, #4]
   12c44:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12c48:	add	r7, r7, r0
   12c4c:	sub	r7, r7, r3, lsl #2
   12c50:	str	sl, [r7, #8]
   12c54:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12c58:	add	r7, r7, r0
   12c5c:	sub	r7, r7, r3, lsl #2
   12c60:	sub	r3, r3, #4
   12c64:	cmp	r2, r3
   12c68:	str	sl, [r7, #12]
   12c6c:	bne	12c28 <__assert_fail@plt+0x1920>
   12c70:	b	129f8 <__assert_fail@plt+0x16f0>
   12c74:	movw	r2, #45456	; 0xb190
   12c78:	movw	r9, #45451	; 0xb18b
   12c7c:	mov	r6, #0
   12c80:	movt	r2, #2
   12c84:	movt	r9, #2
   12c88:	str	r6, [sp, #48]	; 0x30
   12c8c:	ldr	r2, [r2]
   12c90:	cmp	r2, #2
   12c94:	beq	12cb4 <__assert_fail@plt+0x19ac>
   12c98:	ldrb	r2, [r9]
   12c9c:	ldrb	r3, [r9, #1]
   12ca0:	clz	r3, r3
   12ca4:	clz	r2, r2
   12ca8:	lsr	r3, r3, #5
   12cac:	lsr	r2, r2, #5
   12cb0:	orr	r6, r2, r3
   12cb4:	cmp	r1, #0
   12cb8:	movw	r4, #45461	; 0xb195
   12cbc:	movwne	r1, #45460	; 0xb194
   12cc0:	movt	r4, #2
   12cc4:	movtne	r1, #2
   12cc8:	ldrbne	r1, [r1]
   12ccc:	orrsne	r2, r6, r1
   12cd0:	bne	12e44 <__assert_fail@plt+0x1b3c>
   12cd4:	ldr	r0, [sp, #52]	; 0x34
   12cd8:	cmp	r0, #0
   12cdc:	ldrbne	r0, [r4]
   12ce0:	orrsne	r1, r6, r0
   12ce4:	bne	12efc <__assert_fail@plt+0x1bf4>
   12ce8:	ldr	r6, [sp, #48]	; 0x30
   12cec:	cmp	r6, #0
   12cf0:	beq	12d10 <__assert_fail@plt+0x1a08>
   12cf4:	ldr	r0, [r6, #20]
   12cf8:	bl	1430c <__assert_fail@plt+0x3004>
   12cfc:	mov	r4, #0
   12d00:	str	r4, [r6, #20]
   12d04:	ldr	r0, [r6, #8]
   12d08:	bl	1430c <__assert_fail@plt+0x3004>
   12d0c:	str	r4, [r6, #8]
   12d10:	mov	r0, r6
   12d14:	bl	1430c <__assert_fail@plt+0x3004>
   12d18:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12d1c:	cmp	r0, #0
   12d20:	beq	12d78 <__assert_fail@plt+0x1a70>
   12d24:	mov	r6, #0
   12d28:	mov	r7, #0
   12d2c:	b	12d48 <__assert_fail@plt+0x1a40>
   12d30:	ldr	r0, [r0, r7, lsl #2]
   12d34:	bl	1430c <__assert_fail@plt+0x3004>
   12d38:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12d3c:	add	r7, r7, #1
   12d40:	cmp	r7, r0
   12d44:	bcs	12d78 <__assert_fail@plt+0x1a70>
   12d48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d4c:	ldr	r4, [r0, r7, lsl #2]
   12d50:	cmp	r4, #0
   12d54:	beq	12d30 <__assert_fail@plt+0x1a28>
   12d58:	ldr	r0, [r4, #20]
   12d5c:	bl	1430c <__assert_fail@plt+0x3004>
   12d60:	str	r6, [r4, #20]
   12d64:	ldr	r0, [r4, #8]
   12d68:	bl	1430c <__assert_fail@plt+0x3004>
   12d6c:	str	r6, [r4, #8]
   12d70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d74:	b	12d30 <__assert_fail@plt+0x1a28>
   12d78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d7c:	bl	1430c <__assert_fail@plt+0x3004>
   12d80:	ldr	r0, [sp, #56]	; 0x38
   12d84:	cmp	r0, #0
   12d88:	beq	12de0 <__assert_fail@plt+0x1ad8>
   12d8c:	mov	r6, #0
   12d90:	mov	r7, #0
   12d94:	b	12db0 <__assert_fail@plt+0x1aa8>
   12d98:	ldr	r0, [r0, r7, lsl #2]
   12d9c:	bl	1430c <__assert_fail@plt+0x3004>
   12da0:	ldr	r0, [sp, #56]	; 0x38
   12da4:	add	r7, r7, #1
   12da8:	cmp	r7, r0
   12dac:	bcs	12de0 <__assert_fail@plt+0x1ad8>
   12db0:	ldr	r0, [sp, #60]	; 0x3c
   12db4:	ldr	r4, [r0, r7, lsl #2]
   12db8:	cmp	r4, #0
   12dbc:	beq	12d98 <__assert_fail@plt+0x1a90>
   12dc0:	ldr	r0, [r4, #20]
   12dc4:	bl	1430c <__assert_fail@plt+0x3004>
   12dc8:	str	r6, [r4, #20]
   12dcc:	ldr	r0, [r4, #8]
   12dd0:	bl	1430c <__assert_fail@plt+0x3004>
   12dd4:	str	r6, [r4, #8]
   12dd8:	ldr	r0, [sp, #60]	; 0x3c
   12ddc:	b	12d98 <__assert_fail@plt+0x1a90>
   12de0:	ldr	r0, [sp, #60]	; 0x3c
   12de4:	bl	1430c <__assert_fail@plt+0x3004>
   12de8:	mov	r0, r8
   12dec:	bl	14164 <__assert_fail@plt+0x2e5c>
   12df0:	cmp	r0, #0
   12df4:	bne	1315c <__assert_fail@plt+0x1e54>
   12df8:	mov	r0, r5
   12dfc:	bl	14164 <__assert_fail@plt+0x2e5c>
   12e00:	cmp	r0, #0
   12e04:	bne	13174 <__assert_fail@plt+0x1e6c>
   12e08:	ldrb	r0, [r9]
   12e0c:	ldrb	r1, [r9, #1]
   12e10:	orrs	r0, r1, r0
   12e14:	moveq	r0, #0
   12e18:	subeq	sp, fp, #28
   12e1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e20:	movw	r1, #39363	; 0x99c3
   12e24:	movt	r1, #1
   12e28:	mov	r0, #0
   12e2c:	mov	r2, #5
   12e30:	bl	110f8 <dcgettext@plt>
   12e34:	mov	r2, r0
   12e38:	mov	r0, #1
   12e3c:	mov	r1, #0
   12e40:	bl	11164 <error@plt>
   12e44:	cmp	r1, #0
   12e48:	beq	12e64 <__assert_fail@plt+0x1b5c>
   12e4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12e50:	movw	r1, #45512	; 0xb1c8
   12e54:	movt	r1, #2
   12e58:	ldr	r0, [r0]
   12e5c:	bl	13630 <__assert_fail@plt+0x2328>
   12e60:	ldr	r0, [sp, #52]	; 0x34
   12e64:	cmp	r0, #0
   12e68:	mov	r2, #1
   12e6c:	movwne	r1, #45450	; 0xb18a
   12e70:	movne	r0, #1
   12e74:	movtne	r1, #2
   12e78:	strbne	r0, [r1]
   12e7c:	add	r1, sp, #48	; 0x30
   12e80:	mov	r0, r8
   12e84:	bl	13b04 <__assert_fail@plt+0x27fc>
   12e88:	cmp	r0, #0
   12e8c:	beq	12cd4 <__assert_fail@plt+0x19cc>
   12e90:	movw	sl, #45512	; 0xb1c8
   12e94:	add	r7, sp, #48	; 0x30
   12e98:	movt	sl, #2
   12e9c:	b	12eb8 <__assert_fail@plt+0x1bb0>
   12ea0:	mov	r0, r8
   12ea4:	mov	r1, r7
   12ea8:	mov	r2, #1
   12eac:	bl	13b04 <__assert_fail@plt+0x27fc>
   12eb0:	cmp	r0, #0
   12eb4:	beq	12cd4 <__assert_fail@plt+0x19cc>
   12eb8:	movw	r0, #45460	; 0xb194
   12ebc:	movt	r0, #2
   12ec0:	ldrb	r0, [r0]
   12ec4:	cmp	r0, #1
   12ec8:	bne	12ed8 <__assert_fail@plt+0x1bd0>
   12ecc:	ldr	r0, [sp, #48]	; 0x30
   12ed0:	mov	r1, sl
   12ed4:	bl	13630 <__assert_fail@plt+0x2328>
   12ed8:	ldrb	r0, [r9]
   12edc:	cmp	r0, #0
   12ee0:	beq	12ea0 <__assert_fail@plt+0x1b98>
   12ee4:	movw	r0, #45460	; 0xb194
   12ee8:	movt	r0, #2
   12eec:	ldrb	r0, [r0]
   12ef0:	cmp	r0, #1
   12ef4:	beq	12ea0 <__assert_fail@plt+0x1b98>
   12ef8:	b	12cd4 <__assert_fail@plt+0x19cc>
   12efc:	cmp	r0, #0
   12f00:	beq	12f18 <__assert_fail@plt+0x1c10>
   12f04:	ldr	r0, [sp, #60]	; 0x3c
   12f08:	ldr	r1, [r0]
   12f0c:	movw	r0, #45512	; 0xb1c8
   12f10:	movt	r0, #2
   12f14:	bl	13630 <__assert_fail@plt+0x2328>
   12f18:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12f1c:	mov	r2, #2
   12f20:	cmp	r0, #0
   12f24:	movwne	r1, #45450	; 0xb18a
   12f28:	movne	r0, #1
   12f2c:	movtne	r1, #2
   12f30:	strbne	r0, [r1]
   12f34:	add	r1, sp, #48	; 0x30
   12f38:	mov	r0, r5
   12f3c:	bl	13b04 <__assert_fail@plt+0x27fc>
   12f40:	cmp	r0, #0
   12f44:	beq	12ce8 <__assert_fail@plt+0x19e0>
   12f48:	movw	r6, #45512	; 0xb1c8
   12f4c:	add	r7, sp, #48	; 0x30
   12f50:	movt	r6, #2
   12f54:	b	12f70 <__assert_fail@plt+0x1c68>
   12f58:	mov	r0, r5
   12f5c:	mov	r1, r7
   12f60:	mov	r2, #2
   12f64:	bl	13b04 <__assert_fail@plt+0x27fc>
   12f68:	cmp	r0, #0
   12f6c:	beq	12ce8 <__assert_fail@plt+0x19e0>
   12f70:	ldrb	r0, [r4]
   12f74:	cmp	r0, #1
   12f78:	bne	12f88 <__assert_fail@plt+0x1c80>
   12f7c:	ldr	r1, [sp, #48]	; 0x30
   12f80:	mov	r0, r6
   12f84:	bl	13630 <__assert_fail@plt+0x2328>
   12f88:	ldrb	r0, [r9, #1]
   12f8c:	cmp	r0, #0
   12f90:	beq	12f58 <__assert_fail@plt+0x1c50>
   12f94:	ldrb	r0, [r4]
   12f98:	cmp	r0, #1
   12f9c:	beq	12f58 <__assert_fail@plt+0x1c50>
   12fa0:	b	12ce8 <__assert_fail@plt+0x19e0>
   12fa4:	movw	r0, #45336	; 0xb118
   12fa8:	movw	r2, #39273	; 0x9969
   12fac:	mov	r1, #0
   12fb0:	movt	r0, #2
   12fb4:	movt	r2, #1
   12fb8:	str	r1, [sp, #4]
   12fbc:	movw	r1, #39092	; 0x98b4
   12fc0:	movt	r1, #1
   12fc4:	ldr	r3, [r0]
   12fc8:	movw	r0, #45436	; 0xb17c
   12fcc:	str	r2, [sp]
   12fd0:	movw	r2, #39259	; 0x995b
   12fd4:	movt	r0, #2
   12fd8:	movt	r2, #1
   12fdc:	ldr	r0, [r0]
   12fe0:	bl	16964 <__assert_fail@plt+0x565c>
   12fe4:	mov	r0, #0
   12fe8:	bl	111d0 <exit@plt>
   12fec:	mov	r0, #0
   12ff0:	bl	11404 <__assert_fail@plt+0xfc>
   12ff4:	movw	r1, #39141	; 0x98e5
   12ff8:	movt	r1, #1
   12ffc:	mov	r0, #0
   13000:	mov	r2, #5
   13004:	bl	110f8 <dcgettext@plt>
   13008:	mov	r4, r0
   1300c:	movw	r0, #45440	; 0xb180
   13010:	movt	r0, #2
   13014:	ldr	r0, [r0]
   13018:	bl	162e8 <__assert_fail@plt+0x4fe0>
   1301c:	mov	r3, r0
   13020:	mov	r0, #1
   13024:	mov	r1, #0
   13028:	mov	r2, r4
   1302c:	bl	11164 <error@plt>
   13030:	movw	r1, #39765	; 0x9b55
   13034:	mov	r0, #0
   13038:	mov	r2, #5
   1303c:	movt	r1, #1
   13040:	bl	110f8 <dcgettext@plt>
   13044:	mov	r2, r0
   13048:	str	r7, [sp]
   1304c:	b	13110 <__assert_fail@plt+0x1e08>
   13050:	cmp	r0, #0
   13054:	bne	131ac <__assert_fail@plt+0x1ea4>
   13058:	movw	r1, #39286	; 0x9976
   1305c:	mov	r0, #0
   13060:	mov	r2, #5
   13064:	movt	r1, #1
   13068:	bl	110f8 <dcgettext@plt>
   1306c:	mov	r2, r0
   13070:	mov	r0, #0
   13074:	mov	r1, #0
   13078:	bl	11164 <error@plt>
   1307c:	mov	r0, #1
   13080:	bl	11404 <__assert_fail@plt+0xfc>
   13084:	movw	r1, #39218	; 0x9932
   13088:	movt	r1, #1
   1308c:	b	12ffc <__assert_fail@plt+0x1cf4>
   13090:	movw	r1, #39166	; 0x98fe
   13094:	movt	r1, #1
   13098:	b	12e28 <__assert_fail@plt+0x1b20>
   1309c:	movw	r1, #39241	; 0x9949
   130a0:	movt	r1, #1
   130a4:	b	12e28 <__assert_fail@plt+0x1b20>
   130a8:	movw	r1, #39141	; 0x98e5
   130ac:	mov	r0, #0
   130b0:	mov	r2, #5
   130b4:	movt	r1, #1
   130b8:	bl	110f8 <dcgettext@plt>
   130bc:	mov	r4, r0
   130c0:	mov	r0, r7
   130c4:	b	13018 <__assert_fail@plt+0x1d10>
   130c8:	movw	r1, #39141	; 0x98e5
   130cc:	mov	r0, #0
   130d0:	mov	r2, #5
   130d4:	movt	r1, #1
   130d8:	bl	110f8 <dcgettext@plt>
   130dc:	mov	r4, r0
   130e0:	mov	r0, sl
   130e4:	b	13018 <__assert_fail@plt+0x1d10>
   130e8:	mov	r5, #1
   130ec:	b	130f4 <__assert_fail@plt+0x1dec>
   130f0:	mov	r5, #2
   130f4:	movw	r1, #39765	; 0x9b55
   130f8:	mov	r0, #0
   130fc:	mov	r2, #5
   13100:	movt	r1, #1
   13104:	bl	110f8 <dcgettext@plt>
   13108:	mov	r2, r0
   1310c:	str	r5, [sp]
   13110:	add	r3, r4, #1
   13114:	mov	r0, #1
   13118:	mov	r1, #0
   1311c:	bl	11164 <error@plt>
   13120:	bl	1120c <__errno_location@plt>
   13124:	ldr	r4, [r0]
   13128:	ldr	r2, [r6]
   1312c:	b	13188 <__assert_fail@plt+0x1e80>
   13130:	bl	1120c <__errno_location@plt>
   13134:	movw	r1, #39327	; 0x999f
   13138:	ldr	r4, [r0]
   1313c:	mov	r0, #0
   13140:	mov	r2, #5
   13144:	movt	r1, #1
   13148:	bl	110f8 <dcgettext@plt>
   1314c:	mov	r2, r0
   13150:	mov	r0, #1
   13154:	mov	r1, r4
   13158:	bl	11164 <error@plt>
   1315c:	bl	1120c <__errno_location@plt>
   13160:	ldr	r4, [r0]
   13164:	movw	r0, #45472	; 0xb1a0
   13168:	movt	r0, #2
   1316c:	ldr	r2, [r0]
   13170:	b	13188 <__assert_fail@plt+0x1e80>
   13174:	bl	1120c <__errno_location@plt>
   13178:	ldr	r4, [r0]
   1317c:	movw	r0, #45472	; 0xb1a0
   13180:	movt	r0, #2
   13184:	ldr	r2, [r0, #4]
   13188:	mov	r0, #0
   1318c:	mov	r1, #3
   13190:	bl	1603c <__assert_fail@plt+0x4d34>
   13194:	movw	r2, #39866	; 0x9bba
   13198:	mov	r3, r0
   1319c:	mov	r0, #1
   131a0:	mov	r1, r4
   131a4:	movt	r2, #1
   131a8:	bl	11164 <error@plt>
   131ac:	movw	r1, #39302	; 0x9986
   131b0:	mov	r0, #0
   131b4:	mov	r2, #5
   131b8:	movt	r1, #1
   131bc:	bl	110f8 <dcgettext@plt>
   131c0:	mov	r5, r0
   131c4:	add	r0, r8, r9, lsl #2
   131c8:	ldr	r0, [r0, #-4]
   131cc:	bl	162e8 <__assert_fail@plt+0x4fe0>
   131d0:	mov	r3, r0
   131d4:	mov	r0, #0
   131d8:	mov	r1, #0
   131dc:	mov	r2, r5
   131e0:	bl	11164 <error@plt>
   131e4:	mov	r0, #1
   131e8:	bl	11404 <__assert_fail@plt+0xfc>
   131ec:	push	{r4, r5, r6, sl, fp, lr}
   131f0:	add	fp, sp, #16
   131f4:	movw	r4, #45484	; 0xb1ac
   131f8:	movt	r4, #2
   131fc:	ldr	r5, [r4]
   13200:	cmp	r5, #0
   13204:	beq	1322c <__assert_fail@plt+0x1f24>
   13208:	ldr	r0, [r5, #20]
   1320c:	bl	1430c <__assert_fail@plt+0x3004>
   13210:	mov	r6, #0
   13214:	str	r6, [r5, #20]
   13218:	ldr	r0, [r5, #8]
   1321c:	bl	1430c <__assert_fail@plt+0x3004>
   13220:	str	r6, [r5, #8]
   13224:	ldr	r0, [r4]
   13228:	bl	1430c <__assert_fail@plt+0x3004>
   1322c:	ldr	r5, [r4, #4]
   13230:	cmp	r5, #0
   13234:	beq	13260 <__assert_fail@plt+0x1f58>
   13238:	ldr	r0, [r5, #20]
   1323c:	bl	1430c <__assert_fail@plt+0x3004>
   13240:	mov	r6, #0
   13244:	str	r6, [r5, #20]
   13248:	ldr	r0, [r5, #8]
   1324c:	bl	1430c <__assert_fail@plt+0x3004>
   13250:	str	r6, [r5, #8]
   13254:	ldr	r0, [r4, #4]
   13258:	pop	{r4, r5, r6, sl, fp, lr}
   1325c:	b	1430c <__assert_fail@plt+0x3004>
   13260:	pop	{r4, r5, r6, sl, fp, pc}
   13264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13268:	add	fp, sp, #28
   1326c:	sub	sp, sp, #20
   13270:	movw	r9, #45332	; 0xb114
   13274:	mov	r6, r0
   13278:	mov	sl, #0
   1327c:	movt	r9, #2
   13280:	b	132bc <__assert_fail@plt+0x1fb4>
   13284:	mvn	r1, #0
   13288:	str	sl, [sp, #12]
   1328c:	str	r1, [sp, #8]
   13290:	sub	r5, r8, #48	; 0x30
   13294:	sub	r7, r1, #1
   13298:	mov	r0, #12
   1329c:	bl	16b98 <__assert_fail@plt+0x5890>
   132a0:	ldr	r1, [r9]
   132a4:	cmp	r4, #0
   132a8:	mov	r6, r4
   132ac:	stm	r0, {r5, r7, sl}
   132b0:	str	r0, [r1, #8]
   132b4:	str	r0, [r9]
   132b8:	beq	13378 <__assert_fail@plt+0x2070>
   132bc:	movw	r1, #39799	; 0x9b77
   132c0:	mov	r0, r6
   132c4:	movt	r1, #1
   132c8:	bl	112cc <strpbrk@plt>
   132cc:	cmp	r0, #0
   132d0:	mov	r4, #0
   132d4:	strbne	sl, [r0], #1
   132d8:	ldrb	r8, [r6]
   132dc:	movne	r4, r0
   132e0:	sub	r0, r8, #49	; 0x31
   132e4:	cmp	r0, #2
   132e8:	bcs	13350 <__assert_fail@plt+0x2048>
   132ec:	ldrb	r0, [r6, #1]
   132f0:	cmp	r0, #46	; 0x2e
   132f4:	bne	1336c <__assert_fail@plt+0x2064>
   132f8:	movw	r0, #39802	; 0x9b7a
   132fc:	add	r6, r6, #2
   13300:	mov	r1, #0
   13304:	mov	r2, #10
   13308:	add	r3, sp, #8
   1330c:	movt	r0, #1
   13310:	str	r0, [sp]
   13314:	mov	r0, r6
   13318:	bl	17b24 <__assert_fail@plt+0x681c>
   1331c:	cmp	r0, #1
   13320:	beq	13284 <__assert_fail@plt+0x1f7c>
   13324:	ldr	r1, [sp, #8]
   13328:	ldr	r2, [sp, #12]
   1332c:	cmp	r0, #0
   13330:	bne	1333c <__assert_fail@plt+0x2034>
   13334:	cmp	r2, #0
   13338:	bne	13284 <__assert_fail@plt+0x1f7c>
   1333c:	cmp	r0, #0
   13340:	bne	1338c <__assert_fail@plt+0x2084>
   13344:	orrs	r0, r1, r2
   13348:	bne	13290 <__assert_fail@plt+0x1f88>
   1334c:	b	1338c <__assert_fail@plt+0x2084>
   13350:	cmp	r8, #48	; 0x30
   13354:	bne	13380 <__assert_fail@plt+0x2078>
   13358:	ldrb	r0, [r6, #1]
   1335c:	mov	r5, #0
   13360:	mov	r7, #0
   13364:	cmp	r0, #0
   13368:	beq	13298 <__assert_fail@plt+0x1f90>
   1336c:	movw	r1, #39803	; 0x9b7b
   13370:	movt	r1, #1
   13374:	b	13394 <__assert_fail@plt+0x208c>
   13378:	sub	sp, fp, #28
   1337c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13380:	movw	r1, #39831	; 0x9b97
   13384:	movt	r1, #1
   13388:	b	13394 <__assert_fail@plt+0x208c>
   1338c:	movw	r1, #39141	; 0x98e5
   13390:	movt	r1, #1
   13394:	mov	r0, #0
   13398:	mov	r2, #5
   1339c:	bl	110f8 <dcgettext@plt>
   133a0:	mov	r4, r0
   133a4:	mov	r0, r6
   133a8:	bl	162e8 <__assert_fail@plt+0x4fe0>
   133ac:	mov	r3, r0
   133b0:	mov	r0, #1
   133b4:	mov	r1, #0
   133b8:	mov	r2, r4
   133bc:	bl	11164 <error@plt>
   133c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133c4:	add	fp, sp, #28
   133c8:	sub	sp, sp, #20
   133cc:	mov	r4, r0
   133d0:	ldr	r0, [r3]
   133d4:	movw	r9, #45472	; 0xb1a0
   133d8:	mov	r5, r3
   133dc:	mov	r6, r1
   133e0:	movt	r9, #2
   133e4:	cmp	r0, #2
   133e8:	bne	13558 <__assert_fail@plt+0x2250>
   133ec:	ldr	r7, [r6]
   133f0:	clz	r0, r7
   133f4:	lsr	r1, r0, #5
   133f8:	ldr	r0, [r6, r1, lsl #2]
   133fc:	cmp	r0, #3
   13400:	bhi	1353c <__assert_fail@plt+0x2234>
   13404:	ldr	r8, [r9, r1, lsl #2]
   13408:	add	r1, pc, #0
   1340c:	ldr	pc, [r1, r0, lsl #2]
   13410:	muleq	r1, r0, r5
   13414:	andeq	r3, r1, r0, lsr #8
   13418:	andeq	r3, r1, r0, lsl #9
   1341c:	andeq	r3, r1, r0, ror #9
   13420:	ldr	r0, [r2]
   13424:	add	r3, sp, #8
   13428:	mov	r1, #0
   1342c:	sub	r0, r0, #1
   13430:	str	r0, [r2]
   13434:	movw	r0, #39802	; 0x9b7a
   13438:	mov	r2, #10
   1343c:	movt	r0, #1
   13440:	str	r0, [sp]
   13444:	mov	r0, r8
   13448:	bl	17b24 <__assert_fail@plt+0x681c>
   1344c:	cmp	r0, #1
   13450:	beq	1346c <__assert_fail@plt+0x2164>
   13454:	ldr	sl, [sp, #8]
   13458:	ldr	r1, [sp, #12]
   1345c:	cmp	r0, #0
   13460:	bne	134ec <__assert_fail@plt+0x21e4>
   13464:	cmp	r1, #0
   13468:	beq	134ec <__assert_fail@plt+0x21e4>
   1346c:	mov	r0, #0
   13470:	mvn	sl, #0
   13474:	str	r0, [sp, #12]
   13478:	str	sl, [sp, #8]
   1347c:	b	134fc <__assert_fail@plt+0x21f4>
   13480:	ldr	r0, [r2, #4]
   13484:	add	r3, sp, #8
   13488:	mov	r1, #0
   1348c:	sub	r0, r0, #1
   13490:	str	r0, [r2, #4]
   13494:	movw	r0, #39802	; 0x9b7a
   13498:	mov	r2, #10
   1349c:	movt	r0, #1
   134a0:	str	r0, [sp]
   134a4:	mov	r0, r8
   134a8:	bl	17b24 <__assert_fail@plt+0x681c>
   134ac:	cmp	r0, #1
   134b0:	beq	134cc <__assert_fail@plt+0x21c4>
   134b4:	ldr	sl, [sp, #8]
   134b8:	ldr	r1, [sp, #12]
   134bc:	cmp	r0, #0
   134c0:	bne	1350c <__assert_fail@plt+0x2204>
   134c4:	cmp	r1, #0
   134c8:	beq	1350c <__assert_fail@plt+0x2204>
   134cc:	mov	r0, #0
   134d0:	mvn	sl, #0
   134d4:	str	r0, [sp, #12]
   134d8:	str	sl, [sp, #8]
   134dc:	b	1351c <__assert_fail@plt+0x2214>
   134e0:	mov	r0, r8
   134e4:	bl	13264 <__assert_fail@plt+0x1f5c>
   134e8:	b	1353c <__assert_fail@plt+0x2234>
   134ec:	cmp	r0, #0
   134f0:	bne	135fc <__assert_fail@plt+0x22f4>
   134f4:	orrs	r0, sl, r1
   134f8:	beq	135fc <__assert_fail@plt+0x22f4>
   134fc:	movw	r1, #45320	; 0xb108
   13500:	sub	r0, sl, #1
   13504:	movt	r1, #2
   13508:	b	13528 <__assert_fail@plt+0x2220>
   1350c:	cmp	r0, #0
   13510:	bne	135fc <__assert_fail@plt+0x22f4>
   13514:	orrs	r0, sl, r1
   13518:	beq	135fc <__assert_fail@plt+0x22f4>
   1351c:	movw	r1, #45324	; 0xb10c
   13520:	sub	r0, sl, #1
   13524:	movt	r1, #2
   13528:	ldr	r8, [r1]
   1352c:	cmn	r8, #1
   13530:	cmpne	r8, r0
   13534:	bne	135d0 <__assert_fail@plt+0x22c8>
   13538:	str	r0, [r1]
   1353c:	mov	r0, #1
   13540:	cmp	r7, #0
   13544:	beq	13558 <__assert_fail@plt+0x2250>
   13548:	ldr	r1, [r6, #4]
   1354c:	str	r1, [r6]
   13550:	ldr	r1, [r9, #4]
   13554:	str	r1, [r9]
   13558:	ldr	r1, [fp, #8]
   1355c:	ldr	r2, [r1]
   13560:	str	r2, [r6, r0, lsl #2]
   13564:	str	r4, [r9, r0, lsl #2]
   13568:	add	r0, r0, #1
   1356c:	str	r0, [r5]
   13570:	ldr	r0, [r1]
   13574:	cmp	r0, #3
   13578:	bne	13588 <__assert_fail@plt+0x2280>
   1357c:	ldr	r0, [fp, #12]
   13580:	mov	r1, #3
   13584:	str	r1, [r0]
   13588:	sub	sp, fp, #28
   1358c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13590:	movw	r1, #39869	; 0x9bbd
   13594:	mov	r0, #0
   13598:	mov	r2, #5
   1359c:	movt	r1, #1
   135a0:	bl	110f8 <dcgettext@plt>
   135a4:	mov	r5, r0
   135a8:	mov	r0, #4
   135ac:	mov	r1, r4
   135b0:	bl	15dc0 <__assert_fail@plt+0x4ab8>
   135b4:	mov	r3, r0
   135b8:	mov	r0, #0
   135bc:	mov	r1, #0
   135c0:	mov	r2, r5
   135c4:	bl	11164 <error@plt>
   135c8:	mov	r0, #1
   135cc:	bl	11404 <__assert_fail@plt+0xfc>
   135d0:	movw	r1, #39765	; 0x9b55
   135d4:	mov	r0, #0
   135d8:	mov	r2, #5
   135dc:	movt	r1, #1
   135e0:	bl	110f8 <dcgettext@plt>
   135e4:	mov	r2, r0
   135e8:	add	r3, r8, #1
   135ec:	mov	r0, #1
   135f0:	mov	r1, #0
   135f4:	str	sl, [sp]
   135f8:	bl	11164 <error@plt>
   135fc:	movw	r1, #39141	; 0x98e5
   13600:	mov	r0, #0
   13604:	mov	r2, #5
   13608:	movt	r1, #1
   1360c:	bl	110f8 <dcgettext@plt>
   13610:	mov	r4, r0
   13614:	mov	r0, r8
   13618:	bl	162e8 <__assert_fail@plt+0x4fe0>
   1361c:	mov	r3, r0
   13620:	mov	r0, #1
   13624:	mov	r1, #0
   13628:	mov	r2, r4
   1362c:	bl	11164 <error@plt>
   13630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13634:	add	fp, sp, #28
   13638:	sub	sp, sp, #12
   1363c:	mov	r8, r0
   13640:	movw	r0, #45492	; 0xb1b4
   13644:	movw	r7, #45328	; 0xb110
   13648:	mov	sl, r1
   1364c:	movt	r0, #2
   13650:	movt	r7, #2
   13654:	ldr	r5, [r0, #8]
   13658:	cmp	r5, #0
   1365c:	beq	13760 <__assert_fail@plt+0x2458>
   13660:	movw	r0, #45512	; 0xb1c8
   13664:	ldr	r2, [r5]
   13668:	movw	r3, #45324	; 0xb10c
   1366c:	mov	r4, r8
   13670:	mov	r1, sl
   13674:	ldr	r9, [r7]
   13678:	movw	r7, #45320	; 0xb108
   1367c:	movt	r0, #2
   13680:	movt	r3, #2
   13684:	movt	r7, #2
   13688:	cmp	r8, r0
   1368c:	moveq	r4, sl
   13690:	cmp	r2, #1
   13694:	moveq	r1, r8
   13698:	cmp	r2, #0
   1369c:	moveq	r1, r4
   136a0:	cmp	r8, r0
   136a4:	moveq	r7, r3
   136a8:	cmp	r2, #0
   136ac:	mov	r0, r7
   136b0:	addne	r0, r5, #4
   136b4:	ldr	r0, [r0]
   136b8:	bl	13fc0 <__assert_fail@plt+0x2cb8>
   136bc:	ldr	r5, [r5, #8]
   136c0:	uxtb	r6, r9
   136c4:	cmp	r9, #0
   136c8:	movw	r9, #45436	; 0xb17c
   136cc:	movt	r9, #2
   136d0:	movwmi	r6, #32
   136d4:	cmp	r5, #0
   136d8:	beq	13740 <__assert_fail@plt+0x2438>
   136dc:	ldr	r0, [r9]
   136e0:	ldr	r1, [r0, #20]
   136e4:	ldr	r2, [r0, #24]
   136e8:	cmp	r1, r2
   136ec:	bcs	13734 <__assert_fail@plt+0x242c>
   136f0:	add	r2, r1, #1
   136f4:	str	r2, [r0, #20]
   136f8:	strb	r6, [r1]
   136fc:	ldr	r0, [r5]
   13700:	mov	r1, sl
   13704:	cmp	r0, #1
   13708:	moveq	r1, r8
   1370c:	cmp	r0, #0
   13710:	mov	r0, r7
   13714:	addne	r0, r5, #4
   13718:	moveq	r1, r4
   1371c:	ldr	r0, [r0]
   13720:	bl	13fc0 <__assert_fail@plt+0x2cb8>
   13724:	ldr	r5, [r5, #8]
   13728:	cmp	r5, #0
   1372c:	bne	136dc <__assert_fail@plt+0x23d4>
   13730:	b	13740 <__assert_fail@plt+0x2438>
   13734:	mov	r1, r6
   13738:	bl	11290 <__overflow@plt>
   1373c:	b	136fc <__assert_fail@plt+0x23f4>
   13740:	movw	r0, #45470	; 0xb19e
   13744:	mov	r1, #10
   13748:	movt	r0, #2
   1374c:	ldrb	r0, [r0]
   13750:	cmp	r0, #0
   13754:	ldr	r0, [r9]
   13758:	movwne	r1, #0
   1375c:	b	1390c <__assert_fail@plt+0x2604>
   13760:	movw	r0, #45512	; 0xb1c8
   13764:	movw	r1, #45324	; 0xb10c
   13768:	movw	r4, #45320	; 0xb108
   1376c:	movt	r0, #2
   13770:	movt	r1, #2
   13774:	movt	r4, #2
   13778:	cmp	r8, r0
   1377c:	mov	r0, r4
   13780:	moveq	r0, r1
   13784:	mov	r1, r8
   13788:	moveq	r1, sl
   1378c:	ldr	r0, [r0]
   13790:	str	sl, [sp, #8]
   13794:	bl	13fc0 <__assert_fail@plt+0x2cb8>
   13798:	movw	r0, #45469	; 0xb19d
   1379c:	movw	r1, #45504	; 0xb1c0
   137a0:	ldr	sl, [r7]
   137a4:	ldr	r6, [r4]
   137a8:	movt	r0, #2
   137ac:	movt	r1, #2
   137b0:	ldrb	r0, [r0]
   137b4:	cmp	r0, #0
   137b8:	addeq	r1, r8, #12
   137bc:	cmp	sl, #0
   137c0:	ldr	r9, [r1]
   137c4:	movwmi	sl, #32
   137c8:	cmp	r6, #0
   137cc:	cmpne	r9, #0
   137d0:	bne	13938 <__assert_fail@plt+0x2630>
   137d4:	add	r6, r6, #1
   137d8:	cmp	r6, r9
   137dc:	bcs	13834 <__assert_fail@plt+0x252c>
   137e0:	movw	r4, #45436	; 0xb17c
   137e4:	uxtb	r7, sl
   137e8:	movt	r4, #2
   137ec:	ldr	r0, [r4]
   137f0:	ldr	r1, [r0, #20]
   137f4:	ldr	r2, [r0, #24]
   137f8:	cmp	r1, r2
   137fc:	bcs	13828 <__assert_fail@plt+0x2520>
   13800:	add	r2, r1, #1
   13804:	str	r2, [r0, #20]
   13808:	strb	sl, [r1]
   1380c:	mov	r0, r6
   13810:	mov	r1, r8
   13814:	bl	13fc0 <__assert_fail@plt+0x2cb8>
   13818:	add	r6, r6, #1
   1381c:	cmp	r9, r6
   13820:	bne	137ec <__assert_fail@plt+0x24e4>
   13824:	b	13834 <__assert_fail@plt+0x252c>
   13828:	mov	r1, r7
   1382c:	bl	11290 <__overflow@plt>
   13830:	b	1380c <__assert_fail@plt+0x2504>
   13834:	movw	r0, #45469	; 0xb19d
   13838:	movw	r1, #45508	; 0xb1c4
   1383c:	movt	r0, #2
   13840:	movt	r1, #2
   13844:	ldrb	r0, [r0]
   13848:	cmp	r0, #0
   1384c:	ldr	r0, [sp, #8]
   13850:	addeq	r1, r0, #12
   13854:	movw	r0, #45324	; 0xb10c
   13858:	movt	r0, #2
   1385c:	ldr	r7, [r1]
   13860:	ldr	r8, [r0]
   13864:	movw	r0, #45328	; 0xb110
   13868:	movt	r0, #2
   1386c:	ldr	r4, [r0]
   13870:	cmp	r4, #0
   13874:	movwmi	r4, #32
   13878:	cmp	r8, #0
   1387c:	cmpne	r7, #0
   13880:	bne	139a4 <__assert_fail@plt+0x269c>
   13884:	ldr	r6, [sp, #8]
   13888:	add	r5, r8, #1
   1388c:	cmp	r5, r7
   13890:	bcs	138e8 <__assert_fail@plt+0x25e0>
   13894:	movw	r9, #45436	; 0xb17c
   13898:	uxtb	r8, r4
   1389c:	movt	r9, #2
   138a0:	ldr	r0, [r9]
   138a4:	ldr	r1, [r0, #20]
   138a8:	ldr	r2, [r0, #24]
   138ac:	cmp	r1, r2
   138b0:	bcs	138dc <__assert_fail@plt+0x25d4>
   138b4:	add	r2, r1, #1
   138b8:	str	r2, [r0, #20]
   138bc:	strb	r4, [r1]
   138c0:	mov	r0, r5
   138c4:	mov	r1, r6
   138c8:	bl	13fc0 <__assert_fail@plt+0x2cb8>
   138cc:	add	r5, r5, #1
   138d0:	cmp	r7, r5
   138d4:	bne	138a0 <__assert_fail@plt+0x2598>
   138d8:	b	138e8 <__assert_fail@plt+0x25e0>
   138dc:	mov	r1, r8
   138e0:	bl	11290 <__overflow@plt>
   138e4:	b	138c0 <__assert_fail@plt+0x25b8>
   138e8:	movw	r0, #45470	; 0xb19e
   138ec:	mov	r1, #10
   138f0:	movt	r0, #2
   138f4:	ldrb	r0, [r0]
   138f8:	cmp	r0, #0
   138fc:	movw	r0, #45436	; 0xb17c
   13900:	movt	r0, #2
   13904:	movwne	r1, #0
   13908:	ldr	r0, [r0]
   1390c:	ldr	r2, [r0, #20]
   13910:	ldr	r3, [r0, #24]
   13914:	cmp	r2, r3
   13918:	addcc	r3, r2, #1
   1391c:	strcc	r3, [r0, #20]
   13920:	strbcc	r1, [r2]
   13924:	subcc	sp, fp, #28
   13928:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1392c:	sub	sp, fp, #28
   13930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13934:	b	11290 <__overflow@plt>
   13938:	movw	r4, #45436	; 0xb17c
   1393c:	uxtb	r0, sl
   13940:	mov	r5, #1
   13944:	movt	r4, #2
   13948:	str	r0, [sp, #4]
   1394c:	ldr	r0, [r4]
   13950:	sub	r7, r5, #1
   13954:	ldr	r1, [r0, #20]
   13958:	ldr	r2, [r0, #24]
   1395c:	cmp	r1, r2
   13960:	bcs	13998 <__assert_fail@plt+0x2690>
   13964:	add	r2, r1, #1
   13968:	str	r2, [r0, #20]
   1396c:	strb	sl, [r1]
   13970:	mov	r0, r7
   13974:	mov	r1, r8
   13978:	bl	13fc0 <__assert_fail@plt+0x2cb8>
   1397c:	cmp	r5, r6
   13980:	bcs	137d4 <__assert_fail@plt+0x24cc>
   13984:	add	r0, r5, #1
   13988:	cmp	r5, r9
   1398c:	mov	r5, r0
   13990:	bcc	1394c <__assert_fail@plt+0x2644>
   13994:	b	137d4 <__assert_fail@plt+0x24cc>
   13998:	ldr	r1, [sp, #4]
   1399c:	bl	11290 <__overflow@plt>
   139a0:	b	13970 <__assert_fail@plt+0x2668>
   139a4:	movw	sl, #45436	; 0xb17c
   139a8:	uxtb	r9, r4
   139ac:	mov	r5, #1
   139b0:	movt	sl, #2
   139b4:	ldr	r0, [sl]
   139b8:	sub	r6, r5, #1
   139bc:	ldr	r1, [r0, #20]
   139c0:	ldr	r2, [r0, #24]
   139c4:	cmp	r1, r2
   139c8:	bcs	13a00 <__assert_fail@plt+0x26f8>
   139cc:	add	r2, r1, #1
   139d0:	str	r2, [r0, #20]
   139d4:	strb	r4, [r1]
   139d8:	ldr	r1, [sp, #8]
   139dc:	mov	r0, r6
   139e0:	bl	13fc0 <__assert_fail@plt+0x2cb8>
   139e4:	cmp	r5, r8
   139e8:	bcs	13884 <__assert_fail@plt+0x257c>
   139ec:	add	r0, r5, #1
   139f0:	cmp	r5, r7
   139f4:	mov	r5, r0
   139f8:	bcc	139b4 <__assert_fail@plt+0x26ac>
   139fc:	b	13884 <__assert_fail@plt+0x257c>
   13a00:	mov	r1, r9
   13a04:	bl	11290 <__overflow@plt>
   13a08:	b	139d8 <__assert_fail@plt+0x26d0>
   13a0c:	push	{r4, r5, fp, lr}
   13a10:	add	fp, sp, #8
   13a14:	mov	r5, r0
   13a18:	ldr	r0, [r0, #12]
   13a1c:	mov	ip, #0
   13a20:	mov	r4, #0
   13a24:	cmp	r0, r2
   13a28:	mov	r0, #0
   13a2c:	bls	13a3c <__assert_fail@plt+0x2734>
   13a30:	ldr	r5, [r5, #20]
   13a34:	ldr	r0, [r5, r2, lsl #3]!
   13a38:	ldr	r4, [r5, #4]
   13a3c:	ldr	r2, [r1, #12]
   13a40:	mov	r5, #0
   13a44:	cmp	r2, r3
   13a48:	bls	13a58 <__assert_fail@plt+0x2750>
   13a4c:	ldr	r1, [r1, #20]
   13a50:	ldr	ip, [r1, r3, lsl #3]!
   13a54:	ldr	r5, [r1, #4]
   13a58:	cmp	r4, #0
   13a5c:	beq	13a94 <__assert_fail@plt+0x278c>
   13a60:	cmp	r5, #0
   13a64:	beq	13aa4 <__assert_fail@plt+0x279c>
   13a68:	movw	r1, #45468	; 0xb19c
   13a6c:	movt	r1, #2
   13a70:	ldrb	r1, [r1]
   13a74:	cmp	r1, #1
   13a78:	bne	13aac <__assert_fail@plt+0x27a4>
   13a7c:	cmp	r4, r5
   13a80:	mov	r2, r5
   13a84:	mov	r1, ip
   13a88:	movcc	r2, r4
   13a8c:	bl	14640 <__assert_fail@plt+0x3338>
   13a90:	b	13ae8 <__assert_fail@plt+0x27e0>
   13a94:	cmp	r5, #0
   13a98:	mvnne	r5, #0
   13a9c:	mov	r0, r5
   13aa0:	pop	{r4, r5, fp, pc}
   13aa4:	mov	r0, #1
   13aa8:	pop	{r4, r5, fp, pc}
   13aac:	movw	r1, #45448	; 0xb188
   13ab0:	movt	r1, #2
   13ab4:	ldrb	r1, [r1]
   13ab8:	cmp	r1, #0
   13abc:	beq	13ad4 <__assert_fail@plt+0x27cc>
   13ac0:	mov	r1, r4
   13ac4:	mov	r2, ip
   13ac8:	mov	r3, r5
   13acc:	pop	{r4, r5, fp, lr}
   13ad0:	b	17118 <__assert_fail@plt+0x5e10>
   13ad4:	cmp	r4, r5
   13ad8:	mov	r2, r5
   13adc:	mov	r1, ip
   13ae0:	movcc	r2, r4
   13ae4:	bl	110ec <memcmp@plt>
   13ae8:	cmp	r0, #0
   13aec:	popne	{r4, r5, fp, pc}
   13af0:	subs	r0, r4, r5
   13af4:	movwne	r0, #1
   13af8:	cmp	r4, r5
   13afc:	mvncc	r0, #0
   13b00:	pop	{r4, r5, fp, pc}
   13b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b08:	add	fp, sp, #28
   13b0c:	sub	sp, sp, #44	; 0x2c
   13b10:	movw	r9, #45536	; 0xb1e0
   13b14:	mov	r5, r1
   13b18:	sub	r8, r2, #1
   13b1c:	mov	r4, r0
   13b20:	mov	r6, r2
   13b24:	movt	r9, #2
   13b28:	ldr	r0, [r5]
   13b2c:	ldr	r1, [r9, r8, lsl #2]
   13b30:	cmp	r0, r1
   13b34:	beq	13b50 <__assert_fail@plt+0x2848>
   13b38:	mov	sl, r0
   13b3c:	cmp	sl, #0
   13b40:	beq	13b6c <__assert_fail@plt+0x2864>
   13b44:	mov	r0, #0
   13b48:	str	r0, [sl, #12]
   13b4c:	b	13b80 <__assert_fail@plt+0x2878>
   13b50:	movw	r1, #45484	; 0xb1ac
   13b54:	movt	r1, #2
   13b58:	ldr	sl, [r1, r8, lsl #2]
   13b5c:	str	r0, [r1, r8, lsl #2]
   13b60:	str	sl, [r5]
   13b64:	cmp	sl, #0
   13b68:	bne	13b44 <__assert_fail@plt+0x283c>
   13b6c:	mov	r0, #1
   13b70:	mov	r1, #24
   13b74:	bl	16fac <__assert_fail@plt+0x5ca4>
   13b78:	mov	sl, r0
   13b7c:	str	r0, [r5]
   13b80:	movw	r0, #45470	; 0xb19e
   13b84:	mov	r2, #10
   13b88:	mov	r1, r4
   13b8c:	movt	r0, #2
   13b90:	ldrb	r0, [r0]
   13b94:	cmp	r0, #0
   13b98:	mov	r0, sl
   13b9c:	movwne	r2, #0
   13ba0:	bl	14548 <__assert_fail@plt+0x3240>
   13ba4:	cmp	r0, #0
   13ba8:	beq	13ca8 <__assert_fail@plt+0x29a0>
   13bac:	movw	r1, #45544	; 0xb1e8
   13bb0:	str	r6, [sp, #32]
   13bb4:	movt	r1, #2
   13bb8:	ldr	r0, [r1, r8, lsl #3]!
   13bbc:	str	r1, [sp, #28]
   13bc0:	adds	r0, r0, #1
   13bc4:	str	r0, [r1]
   13bc8:	ldr	r0, [r1, #4]
   13bcc:	adc	r0, r0, #0
   13bd0:	str	r0, [r1, #4]
   13bd4:	ldmib	sl, {r0, r6}
   13bd8:	add	r4, r6, r0
   13bdc:	sub	r1, r4, #1
   13be0:	cmp	r6, r1
   13be4:	str	r1, [fp, #-32]	; 0xffffffe0
   13be8:	beq	13e6c <__assert_fail@plt+0x2b64>
   13bec:	movw	r1, #45328	; 0xb110
   13bf0:	str	r8, [sp, #36]	; 0x24
   13bf4:	movt	r1, #2
   13bf8:	ldr	r7, [r1]
   13bfc:	cmp	r7, #0
   13c00:	bmi	13cd4 <__assert_fail@plt+0x29cc>
   13c04:	cmp	r7, #10
   13c08:	beq	13cd4 <__assert_fail@plt+0x29cc>
   13c0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c10:	mov	r1, r7
   13c14:	sub	r2, r0, r6
   13c18:	mov	r0, r6
   13c1c:	bl	11254 <memchr@plt>
   13c20:	cmp	r0, #0
   13c24:	beq	13e18 <__assert_fail@plt+0x2b10>
   13c28:	ldr	r8, [sl, #12]
   13c2c:	mov	r4, r0
   13c30:	add	r5, sl, #16
   13c34:	b	13c90 <__assert_fail@plt+0x2988>
   13c38:	ldr	r0, [sl, #20]
   13c3c:	mov	r1, r5
   13c40:	mov	r2, #8
   13c44:	bl	16d44 <__assert_fail@plt+0x5a3c>
   13c48:	movw	r1, #45328	; 0xb110
   13c4c:	str	r0, [sl, #20]
   13c50:	movt	r1, #2
   13c54:	ldr	r8, [sl, #12]
   13c58:	ldr	r7, [r1]
   13c5c:	str	r6, [r0, r8, lsl #3]!
   13c60:	add	r6, r4, #1
   13c64:	add	r8, r8, #1
   13c68:	mov	r1, r7
   13c6c:	str	r9, [r0, #4]
   13c70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c74:	str	r8, [sl, #12]
   13c78:	sub	r2, r0, r6
   13c7c:	mov	r0, r6
   13c80:	bl	11254 <memchr@plt>
   13c84:	mov	r4, r0
   13c88:	cmp	r0, #0
   13c8c:	beq	13e18 <__assert_fail@plt+0x2b10>
   13c90:	ldr	r0, [r5]
   13c94:	sub	r9, r4, r6
   13c98:	cmp	r8, r0
   13c9c:	bcs	13c38 <__assert_fail@plt+0x2930>
   13ca0:	ldr	r0, [sl, #20]
   13ca4:	b	13c5c <__assert_fail@plt+0x2954>
   13ca8:	ldrb	r0, [r4]
   13cac:	tst	r0, #32
   13cb0:	bne	13f94 <__assert_fail@plt+0x2c8c>
   13cb4:	ldr	r0, [sl, #20]
   13cb8:	bl	1430c <__assert_fail@plt+0x3004>
   13cbc:	mov	r4, #0
   13cc0:	str	r4, [sl, #20]
   13cc4:	ldr	r0, [sl, #8]
   13cc8:	bl	1430c <__assert_fail@plt+0x3004>
   13ccc:	str	r4, [sl, #8]
   13cd0:	b	13f88 <__assert_fail@plt+0x2c80>
   13cd4:	cmn	r7, #1
   13cd8:	bgt	13e18 <__assert_fail@plt+0x2b10>
   13cdc:	sub	r5, r0, #1
   13ce0:	bl	111c4 <__ctype_b_loc@plt>
   13ce4:	mov	ip, r0
   13ce8:	ldr	r0, [r0]
   13cec:	b	13cfc <__assert_fail@plt+0x29f4>
   13cf0:	subs	r5, r5, #1
   13cf4:	add	r6, r6, #1
   13cf8:	beq	13e6c <__assert_fail@plt+0x2b64>
   13cfc:	ldrb	r1, [r6]
   13d00:	cmp	r1, #10
   13d04:	beq	13cf0 <__assert_fail@plt+0x29e8>
   13d08:	add	r1, r0, r1, lsl #1
   13d0c:	ldrh	r1, [r1]
   13d10:	ands	r1, r1, #1
   13d14:	bne	13cf0 <__assert_fail@plt+0x29e8>
   13d18:	sub	r5, r4, #3
   13d1c:	sub	r4, r4, #2
   13d20:	add	r1, sl, #16
   13d24:	mov	r3, r6
   13d28:	mov	r7, r3
   13d2c:	cmp	r4, r3
   13d30:	beq	13d5c <__assert_fail@plt+0x2a54>
   13d34:	ldrb	r2, [r7, #1]
   13d38:	add	r3, r7, #1
   13d3c:	mov	r8, #0
   13d40:	cmp	r2, #10
   13d44:	beq	13d64 <__assert_fail@plt+0x2a5c>
   13d48:	add	r2, r0, r2, lsl #1
   13d4c:	ldrh	r2, [r2]
   13d50:	ands	r2, r2, #1
   13d54:	beq	13d28 <__assert_fail@plt+0x2a20>
   13d58:	b	13d64 <__assert_fail@plt+0x2a5c>
   13d5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13d60:	mov	r8, #1
   13d64:	ldr	r2, [sl, #12]
   13d68:	ldr	r0, [sl, #16]
   13d6c:	sub	r3, r3, r6
   13d70:	cmp	r2, r0
   13d74:	bcs	13d80 <__assert_fail@plt+0x2a78>
   13d78:	ldr	r0, [sl, #20]
   13d7c:	b	13dac <__assert_fail@plt+0x2aa4>
   13d80:	ldr	r0, [sl, #20]
   13d84:	mov	r2, #8
   13d88:	str	ip, [sp, #24]
   13d8c:	mov	r9, r1
   13d90:	str	r3, [sp, #20]
   13d94:	bl	16d44 <__assert_fail@plt+0x5a3c>
   13d98:	str	r0, [sl, #20]
   13d9c:	ldr	r3, [sp, #20]
   13da0:	ldr	ip, [sp, #24]
   13da4:	mov	r1, r9
   13da8:	ldr	r2, [sl, #12]
   13dac:	str	r6, [r0, r2, lsl #3]!
   13db0:	cmp	r8, #0
   13db4:	movw	r9, #45536	; 0xb1e0
   13db8:	ldr	r8, [sp, #36]	; 0x24
   13dbc:	movt	r9, #2
   13dc0:	str	r3, [r0, #4]
   13dc4:	add	r0, r2, #1
   13dc8:	str	r0, [sl, #12]
   13dcc:	bne	13e6c <__assert_fail@plt+0x2b64>
   13dd0:	cmp	r5, r7
   13dd4:	beq	13e14 <__assert_fail@plt+0x2b0c>
   13dd8:	ldr	r0, [ip]
   13ddc:	b	13dec <__assert_fail@plt+0x2ae4>
   13de0:	add	r7, r7, #1
   13de4:	cmp	r5, r7
   13de8:	beq	13e14 <__assert_fail@plt+0x2b0c>
   13dec:	ldrb	r2, [r7, #2]
   13df0:	cmp	r2, #10
   13df4:	beq	13de0 <__assert_fail@plt+0x2ad8>
   13df8:	add	r2, r0, r2, lsl #1
   13dfc:	ldrh	r2, [r2]
   13e00:	ands	r2, r2, #1
   13e04:	bne	13de0 <__assert_fail@plt+0x2ad8>
   13e08:	add	r6, r7, #2
   13e0c:	cmp	r5, r7
   13e10:	bne	13d24 <__assert_fail@plt+0x2a1c>
   13e14:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13e18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13e1c:	mov	r1, sl
   13e20:	sub	r4, r0, r6
   13e24:	ldr	r0, [r1, #16]!
   13e28:	ldr	r2, [r1, #-4]
   13e2c:	cmp	r2, r0
   13e30:	bcs	13e3c <__assert_fail@plt+0x2b34>
   13e34:	ldr	r0, [sl, #20]
   13e38:	b	13e50 <__assert_fail@plt+0x2b48>
   13e3c:	ldr	r0, [sl, #20]
   13e40:	mov	r2, #8
   13e44:	bl	16d44 <__assert_fail@plt+0x5a3c>
   13e48:	str	r0, [sl, #20]
   13e4c:	ldr	r2, [sl, #12]
   13e50:	ldr	r8, [sp, #36]	; 0x24
   13e54:	movw	r9, #45536	; 0xb1e0
   13e58:	str	r6, [r0, r2, lsl #3]!
   13e5c:	movt	r9, #2
   13e60:	str	r4, [r0, #4]
   13e64:	add	r0, r2, #1
   13e68:	str	r0, [sl, #12]
   13e6c:	ldr	r0, [r9, r8, lsl #2]
   13e70:	cmp	r0, #0
   13e74:	beq	13f80 <__assert_fail@plt+0x2c78>
   13e78:	movw	r5, #45456	; 0xb190
   13e7c:	movt	r5, #2
   13e80:	ldr	r1, [r5]
   13e84:	cmp	r1, #1
   13e88:	beq	13ea8 <__assert_fail@plt+0x2ba0>
   13e8c:	cmp	r1, #2
   13e90:	beq	13f80 <__assert_fail@plt+0x2c78>
   13e94:	movw	r1, #45450	; 0xb18a
   13e98:	movt	r1, #2
   13e9c:	ldrb	r1, [r1]
   13ea0:	cmp	r1, #1
   13ea4:	bne	13f80 <__assert_fail@plt+0x2c78>
   13ea8:	movw	r4, #45451	; 0xb18b
   13eac:	movt	r4, #2
   13eb0:	ldrb	r1, [r4, r8]
   13eb4:	cmp	r1, #0
   13eb8:	bne	13f80 <__assert_fail@plt+0x2c78>
   13ebc:	ldr	r3, [sp, #32]
   13ec0:	movw	r1, #45320	; 0xb108
   13ec4:	movw	r2, #45324	; 0xb10c
   13ec8:	movt	r1, #2
   13ecc:	movt	r2, #2
   13ed0:	cmp	r3, #1
   13ed4:	moveq	r2, r1
   13ed8:	mov	r1, sl
   13edc:	ldr	r2, [r2]
   13ee0:	mov	r3, r2
   13ee4:	bl	13a0c <__assert_fail@plt+0x2704>
   13ee8:	cmp	r0, #1
   13eec:	blt	13f80 <__assert_fail@plt+0x2c78>
   13ef0:	ldr	r0, [sl, #4]
   13ef4:	cmp	r0, #0
   13ef8:	beq	13f24 <__assert_fail@plt+0x2c1c>
   13efc:	ldr	r1, [sl, #8]
   13f00:	sub	r2, r0, #1
   13f04:	ldr	r7, [sp, #28]
   13f08:	mvn	r6, #-2147483648	; 0x80000000
   13f0c:	ldrb	r1, [r1, r2]
   13f10:	cmp	r1, #10
   13f14:	moveq	r0, r2
   13f18:	cmn	r0, #-2147483646	; 0x80000002
   13f1c:	movls	r6, r0
   13f20:	b	13f30 <__assert_fail@plt+0x2c28>
   13f24:	ldr	r7, [sp, #28]
   13f28:	mov	r0, #0
   13f2c:	mov	r6, r0
   13f30:	movw	r1, #39897	; 0x9bd9
   13f34:	ldr	r5, [r5]
   13f38:	mov	r0, #0
   13f3c:	mov	r2, #5
   13f40:	movt	r1, #1
   13f44:	bl	110f8 <dcgettext@plt>
   13f48:	mov	r2, r0
   13f4c:	movw	r0, #45472	; 0xb1a0
   13f50:	movt	r0, #2
   13f54:	ldr	r3, [r0, r8, lsl #2]
   13f58:	ldrd	r0, [r7]
   13f5c:	ldr	r7, [sl, #8]
   13f60:	stm	sp, {r0, r1, r6, r7}
   13f64:	sub	r0, r5, #1
   13f68:	mov	r1, #0
   13f6c:	clz	r0, r0
   13f70:	lsr	r0, r0, #5
   13f74:	bl	11164 <error@plt>
   13f78:	mov	r0, #1
   13f7c:	strb	r0, [r4, r8]
   13f80:	mov	r4, #1
   13f84:	str	sl, [r9, r8, lsl #2]
   13f88:	mov	r0, r4
   13f8c:	sub	sp, fp, #28
   13f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f94:	bl	1120c <__errno_location@plt>
   13f98:	movw	r1, #39886	; 0x9bce
   13f9c:	ldr	r4, [r0]
   13fa0:	mov	r0, #0
   13fa4:	mov	r2, #5
   13fa8:	movt	r1, #1
   13fac:	bl	110f8 <dcgettext@plt>
   13fb0:	mov	r2, r0
   13fb4:	mov	r0, #1
   13fb8:	mov	r1, r4
   13fbc:	bl	11164 <error@plt>
   13fc0:	ldr	r2, [r1, #12]
   13fc4:	cmp	r2, r0
   13fc8:	bls	13ff8 <__assert_fail@plt+0x2cf0>
   13fcc:	ldr	r1, [r1, #20]
   13fd0:	add	r2, r1, r0, lsl #3
   13fd4:	ldr	r2, [r2, #4]
   13fd8:	cmp	r2, #0
   13fdc:	beq	13ff8 <__assert_fail@plt+0x2cf0>
   13fe0:	ldr	r0, [r1, r0, lsl #3]
   13fe4:	movw	r1, #45436	; 0xb17c
   13fe8:	movt	r1, #2
   13fec:	ldr	r3, [r1]
   13ff0:	mov	r1, #1
   13ff4:	b	110e0 <fwrite_unlocked@plt>
   13ff8:	movw	r0, #45464	; 0xb198
   13ffc:	movt	r0, #2
   14000:	ldr	r0, [r0]
   14004:	cmp	r0, #0
   14008:	bxeq	lr
   1400c:	movw	r1, #45436	; 0xb17c
   14010:	movt	r1, #2
   14014:	ldr	r1, [r1]
   14018:	b	11068 <fputs_unlocked@plt>
   1401c:	movw	r1, #45560	; 0xb1f8
   14020:	movt	r1, #2
   14024:	str	r0, [r1]
   14028:	bx	lr
   1402c:	movw	r1, #45564	; 0xb1fc
   14030:	movt	r1, #2
   14034:	strb	r0, [r1]
   14038:	bx	lr
   1403c:	push	{r4, r5, r6, sl, fp, lr}
   14040:	add	fp, sp, #16
   14044:	sub	sp, sp, #8
   14048:	movw	r0, #45436	; 0xb17c
   1404c:	movt	r0, #2
   14050:	ldr	r0, [r0]
   14054:	bl	1889c <__assert_fail@plt+0x7594>
   14058:	cmp	r0, #0
   1405c:	beq	14084 <__assert_fail@plt+0x2d7c>
   14060:	movw	r0, #45564	; 0xb1fc
   14064:	movt	r0, #2
   14068:	ldrb	r0, [r0]
   1406c:	cmp	r0, #0
   14070:	beq	140a4 <__assert_fail@plt+0x2d9c>
   14074:	bl	1120c <__errno_location@plt>
   14078:	ldr	r0, [r0]
   1407c:	cmp	r0, #32
   14080:	bne	140a4 <__assert_fail@plt+0x2d9c>
   14084:	movw	r0, #45424	; 0xb170
   14088:	movt	r0, #2
   1408c:	ldr	r0, [r0]
   14090:	bl	1889c <__assert_fail@plt+0x7594>
   14094:	cmp	r0, #0
   14098:	subeq	sp, fp, #16
   1409c:	popeq	{r4, r5, r6, sl, fp, pc}
   140a0:	b	14114 <__assert_fail@plt+0x2e0c>
   140a4:	movw	r1, #40127	; 0x9cbf
   140a8:	mov	r0, #0
   140ac:	mov	r2, #5
   140b0:	movt	r1, #1
   140b4:	bl	110f8 <dcgettext@plt>
   140b8:	mov	r4, r0
   140bc:	movw	r0, #45560	; 0xb1f8
   140c0:	movt	r0, #2
   140c4:	ldr	r6, [r0]
   140c8:	bl	1120c <__errno_location@plt>
   140cc:	ldr	r5, [r0]
   140d0:	cmp	r6, #0
   140d4:	bne	140f0 <__assert_fail@plt+0x2de8>
   140d8:	movw	r2, #39866	; 0x9bba
   140dc:	mov	r0, #0
   140e0:	mov	r1, r5
   140e4:	mov	r3, r4
   140e8:	movt	r2, #1
   140ec:	b	14110 <__assert_fail@plt+0x2e08>
   140f0:	mov	r0, r6
   140f4:	bl	15f60 <__assert_fail@plt+0x4c58>
   140f8:	movw	r2, #40139	; 0x9ccb
   140fc:	mov	r3, r0
   14100:	str	r4, [sp]
   14104:	mov	r0, #0
   14108:	mov	r1, r5
   1410c:	movt	r2, #1
   14110:	bl	11164 <error@plt>
   14114:	movw	r0, #45340	; 0xb11c
   14118:	movt	r0, #2
   1411c:	ldr	r0, [r0]
   14120:	bl	110b0 <_exit@plt>
   14124:	b	1108c <posix_fadvise64@plt>
   14128:	cmp	r0, #0
   1412c:	bxeq	lr
   14130:	push	{r4, sl, fp, lr}
   14134:	add	fp, sp, #8
   14138:	sub	sp, sp, #16
   1413c:	mov	r4, r1
   14140:	bl	1123c <fileno@plt>
   14144:	mov	r1, #0
   14148:	mov	r2, #0
   1414c:	mov	r3, #0
   14150:	str	r1, [sp]
   14154:	stmib	sp, {r1, r4}
   14158:	bl	1108c <posix_fadvise64@plt>
   1415c:	sub	sp, fp, #8
   14160:	pop	{r4, sl, fp, pc}
   14164:	push	{r4, r5, r6, sl, fp, lr}
   14168:	add	fp, sp, #16
   1416c:	sub	sp, sp, #8
   14170:	mov	r4, r0
   14174:	bl	1123c <fileno@plt>
   14178:	cmn	r0, #1
   1417c:	ble	141f0 <__assert_fail@plt+0x2ee8>
   14180:	mov	r0, r4
   14184:	bl	11194 <__freading@plt>
   14188:	cmp	r0, #0
   1418c:	beq	141b8 <__assert_fail@plt+0x2eb0>
   14190:	mov	r0, r4
   14194:	bl	1123c <fileno@plt>
   14198:	mov	r1, #1
   1419c:	mov	r2, #0
   141a0:	mov	r3, #0
   141a4:	str	r1, [sp]
   141a8:	bl	11134 <lseek64@plt>
   141ac:	and	r0, r0, r1
   141b0:	cmn	r0, #1
   141b4:	beq	141f0 <__assert_fail@plt+0x2ee8>
   141b8:	mov	r0, r4
   141bc:	bl	14200 <__assert_fail@plt+0x2ef8>
   141c0:	cmp	r0, #0
   141c4:	beq	141f0 <__assert_fail@plt+0x2ee8>
   141c8:	bl	1120c <__errno_location@plt>
   141cc:	ldr	r6, [r0]
   141d0:	mov	r5, r0
   141d4:	mov	r0, r4
   141d8:	bl	11260 <fclose@plt>
   141dc:	cmp	r6, #0
   141e0:	strne	r6, [r5]
   141e4:	mvnne	r0, #0
   141e8:	sub	sp, fp, #16
   141ec:	pop	{r4, r5, r6, sl, fp, pc}
   141f0:	mov	r0, r4
   141f4:	sub	sp, fp, #16
   141f8:	pop	{r4, r5, r6, sl, fp, lr}
   141fc:	b	11260 <fclose@plt>
   14200:	push	{r4, sl, fp, lr}
   14204:	add	fp, sp, #8
   14208:	sub	sp, sp, #8
   1420c:	mov	r4, r0
   14210:	cmp	r0, #0
   14214:	beq	1424c <__assert_fail@plt+0x2f44>
   14218:	mov	r0, r4
   1421c:	bl	11194 <__freading@plt>
   14220:	cmp	r0, #0
   14224:	beq	1424c <__assert_fail@plt+0x2f44>
   14228:	ldrb	r0, [r4, #1]
   1422c:	tst	r0, #1
   14230:	beq	1424c <__assert_fail@plt+0x2f44>
   14234:	mov	r0, #1
   14238:	mov	r2, #0
   1423c:	mov	r3, #0
   14240:	str	r0, [sp]
   14244:	mov	r0, r4
   14248:	bl	14334 <__assert_fail@plt+0x302c>
   1424c:	mov	r0, r4
   14250:	sub	sp, fp, #8
   14254:	pop	{r4, sl, fp, lr}
   14258:	b	11098 <fflush@plt>
   1425c:	push	{r4, r5, r6, r7, fp, lr}
   14260:	add	fp, sp, #16
   14264:	mov	r5, r1
   14268:	bl	112c0 <fopen64@plt>
   1426c:	mov	r4, #0
   14270:	cmp	r0, #0
   14274:	beq	142dc <__assert_fail@plt+0x2fd4>
   14278:	mov	r6, r0
   1427c:	bl	1123c <fileno@plt>
   14280:	cmp	r0, #2
   14284:	bhi	142e4 <__assert_fail@plt+0x2fdc>
   14288:	bl	164d4 <__assert_fail@plt+0x51cc>
   1428c:	cmn	r0, #1
   14290:	ble	142ec <__assert_fail@plt+0x2fe4>
   14294:	mov	r7, r0
   14298:	mov	r0, r6
   1429c:	bl	14164 <__assert_fail@plt+0x2e5c>
   142a0:	cmp	r0, #0
   142a4:	bne	142c0 <__assert_fail@plt+0x2fb8>
   142a8:	mov	r0, r7
   142ac:	mov	r1, r5
   142b0:	bl	11050 <fdopen@plt>
   142b4:	mov	r4, r0
   142b8:	cmp	r0, #0
   142bc:	bne	142dc <__assert_fail@plt+0x2fd4>
   142c0:	bl	1120c <__errno_location@plt>
   142c4:	ldr	r5, [r0]
   142c8:	mov	r4, r0
   142cc:	mov	r0, r7
   142d0:	bl	112fc <close@plt>
   142d4:	str	r5, [r4]
   142d8:	mov	r4, #0
   142dc:	mov	r0, r4
   142e0:	pop	{r4, r5, r6, r7, fp, pc}
   142e4:	mov	r0, r6
   142e8:	pop	{r4, r5, r6, r7, fp, pc}
   142ec:	bl	1120c <__errno_location@plt>
   142f0:	ldr	r7, [r0]
   142f4:	mov	r5, r0
   142f8:	mov	r0, r6
   142fc:	bl	14164 <__assert_fail@plt+0x2e5c>
   14300:	mov	r0, r4
   14304:	str	r7, [r5]
   14308:	pop	{r4, r5, r6, r7, fp, pc}
   1430c:	push	{r4, r5, r6, sl, fp, lr}
   14310:	add	fp, sp, #16
   14314:	mov	r4, r0
   14318:	bl	1120c <__errno_location@plt>
   1431c:	ldr	r6, [r0]
   14320:	mov	r5, r0
   14324:	mov	r0, r4
   14328:	bl	110a4 <free@plt>
   1432c:	str	r6, [r5]
   14330:	pop	{r4, r5, r6, sl, fp, pc}
   14334:	push	{r4, r5, r6, r7, fp, lr}
   14338:	add	fp, sp, #16
   1433c:	sub	sp, sp, #8
   14340:	mov	r4, r0
   14344:	ldr	r0, [r0, #4]
   14348:	mov	r5, r3
   1434c:	mov	r6, r2
   14350:	ldr	r1, [r4, #8]
   14354:	cmp	r1, r0
   14358:	bne	14374 <__assert_fail@plt+0x306c>
   1435c:	ldrd	r0, [r4, #16]
   14360:	cmp	r1, r0
   14364:	bne	14374 <__assert_fail@plt+0x306c>
   14368:	ldr	r0, [r4, #36]	; 0x24
   1436c:	cmp	r0, #0
   14370:	beq	1438c <__assert_fail@plt+0x3084>
   14374:	mov	r0, r4
   14378:	mov	r2, r6
   1437c:	mov	r3, r5
   14380:	sub	sp, fp, #16
   14384:	pop	{r4, r5, r6, r7, fp, lr}
   14388:	b	1126c <fseeko64@plt>
   1438c:	ldr	r7, [fp, #8]
   14390:	mov	r0, r4
   14394:	bl	1123c <fileno@plt>
   14398:	mov	r2, r6
   1439c:	mov	r3, r5
   143a0:	str	r7, [sp]
   143a4:	bl	11134 <lseek64@plt>
   143a8:	and	r2, r0, r1
   143ac:	cmn	r2, #1
   143b0:	beq	143d0 <__assert_fail@plt+0x30c8>
   143b4:	strd	r0, [r4, #80]	; 0x50
   143b8:	ldr	r0, [r4]
   143bc:	bic	r0, r0, #16
   143c0:	str	r0, [r4]
   143c4:	mov	r0, #0
   143c8:	sub	sp, fp, #16
   143cc:	pop	{r4, r5, r6, r7, fp, pc}
   143d0:	mvn	r0, #0
   143d4:	sub	sp, fp, #16
   143d8:	pop	{r4, r5, r6, r7, fp, pc}
   143dc:	push	{r4, sl, fp, lr}
   143e0:	add	fp, sp, #8
   143e4:	sub	sp, sp, #264	; 0x108
   143e8:	add	r1, sp, #7
   143ec:	movw	r2, #257	; 0x101
   143f0:	bl	16434 <__assert_fail@plt+0x512c>
   143f4:	mov	r4, #0
   143f8:	cmp	r0, #0
   143fc:	bne	1443c <__assert_fail@plt+0x3134>
   14400:	movw	r1, #40146	; 0x9cd2
   14404:	add	r0, sp, #7
   14408:	mov	r2, #2
   1440c:	movt	r1, #1
   14410:	bl	111dc <bcmp@plt>
   14414:	cmp	r0, #0
   14418:	beq	1443c <__assert_fail@plt+0x3134>
   1441c:	movw	r1, #40148	; 0x9cd4
   14420:	add	r0, sp, #7
   14424:	mov	r2, #6
   14428:	movt	r1, #1
   1442c:	bl	111dc <bcmp@plt>
   14430:	cmp	r0, #0
   14434:	mov	r4, r0
   14438:	movwne	r4, #1
   1443c:	mov	r0, r4
   14440:	sub	sp, fp, #8
   14444:	pop	{r4, sl, fp, pc}
   14448:	mov	r1, #0
   1444c:	str	r1, [r0]
   14450:	str	r1, [r0, #4]
   14454:	str	r1, [r0, #8]
   14458:	bx	lr
   1445c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14460:	add	fp, sp, #28
   14464:	sub	sp, sp, #4
   14468:	mov	r9, r0
   1446c:	ldrb	r0, [r1]
   14470:	tst	r0, #16
   14474:	bne	14538 <__assert_fail@plt+0x3230>
   14478:	ldr	r4, [r9, #8]
   1447c:	ldr	r0, [r9]
   14480:	mov	r5, r1
   14484:	mov	r8, #1
   14488:	add	sl, r4, r0
   1448c:	mov	r6, r4
   14490:	b	144a0 <__assert_fail@plt+0x3198>
   14494:	strb	r7, [r6], #1
   14498:	cmp	r7, #10
   1449c:	beq	1452c <__assert_fail@plt+0x3224>
   144a0:	ldmib	r5, {r0, r1}
   144a4:	cmp	r0, r1
   144a8:	bcs	144f4 <__assert_fail@plt+0x31ec>
   144ac:	add	r1, r0, #1
   144b0:	str	r1, [r5, #4]
   144b4:	ldrb	r7, [r0]
   144b8:	cmp	r6, sl
   144bc:	bne	14494 <__assert_fail@plt+0x318c>
   144c0:	ldr	r6, [r9]
   144c4:	mov	r0, r4
   144c8:	mov	r1, r9
   144cc:	mov	r2, #1
   144d0:	mvn	r3, #0
   144d4:	str	r8, [sp]
   144d8:	bl	16dc8 <__assert_fail@plt+0x5ac0>
   144dc:	str	r0, [r9, #8]
   144e0:	mov	r4, r0
   144e4:	add	r6, r0, r6
   144e8:	ldr	r0, [r9]
   144ec:	add	sl, r4, r0
   144f0:	b	14494 <__assert_fail@plt+0x318c>
   144f4:	mov	r0, r5
   144f8:	bl	11284 <__uflow@plt>
   144fc:	mov	r7, r0
   14500:	cmn	r0, #1
   14504:	bne	144b8 <__assert_fail@plt+0x31b0>
   14508:	cmp	r6, r4
   1450c:	beq	14538 <__assert_fail@plt+0x3230>
   14510:	ldrb	r0, [r5]
   14514:	tst	r0, #32
   14518:	bne	14538 <__assert_fail@plt+0x3230>
   1451c:	ldrb	r0, [r6, #-1]
   14520:	mov	r7, #10
   14524:	cmp	r0, #10
   14528:	bne	144b8 <__assert_fail@plt+0x31b0>
   1452c:	sub	r0, r6, r4
   14530:	str	r0, [r9, #4]
   14534:	b	1453c <__assert_fail@plt+0x3234>
   14538:	mov	r9, #0
   1453c:	mov	r0, r9
   14540:	sub	sp, fp, #28
   14544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1454c:	add	fp, sp, #28
   14550:	sub	sp, sp, #4
   14554:	mov	sl, r0
   14558:	ldrb	r0, [r1]
   1455c:	tst	r0, #16
   14560:	bne	14628 <__assert_fail@plt+0x3320>
   14564:	ldr	r4, [sl, #8]
   14568:	ldr	r0, [sl]
   1456c:	mov	r8, r2
   14570:	mov	r6, r1
   14574:	add	r9, r4, r0
   14578:	mov	r7, r4
   1457c:	b	1458c <__assert_fail@plt+0x3284>
   14580:	strb	r5, [r7], #1
   14584:	cmp	r5, r8
   14588:	beq	1461c <__assert_fail@plt+0x3314>
   1458c:	ldmib	r6, {r0, r1}
   14590:	cmp	r0, r1
   14594:	bcs	145e4 <__assert_fail@plt+0x32dc>
   14598:	add	r1, r0, #1
   1459c:	str	r1, [r6, #4]
   145a0:	ldrb	r5, [r0]
   145a4:	cmp	r7, r9
   145a8:	bne	14580 <__assert_fail@plt+0x3278>
   145ac:	ldr	r7, [sl]
   145b0:	mov	r0, #1
   145b4:	mov	r1, sl
   145b8:	mov	r2, #1
   145bc:	mvn	r3, #0
   145c0:	str	r0, [sp]
   145c4:	mov	r0, r4
   145c8:	bl	16dc8 <__assert_fail@plt+0x5ac0>
   145cc:	str	r0, [sl, #8]
   145d0:	mov	r4, r0
   145d4:	add	r7, r0, r7
   145d8:	ldr	r0, [sl]
   145dc:	add	r9, r4, r0
   145e0:	b	14580 <__assert_fail@plt+0x3278>
   145e4:	mov	r0, r6
   145e8:	bl	11284 <__uflow@plt>
   145ec:	mov	r5, r0
   145f0:	cmn	r0, #1
   145f4:	bne	145a4 <__assert_fail@plt+0x329c>
   145f8:	cmp	r7, r4
   145fc:	beq	14628 <__assert_fail@plt+0x3320>
   14600:	ldrb	r0, [r6]
   14604:	tst	r0, #32
   14608:	bne	14628 <__assert_fail@plt+0x3320>
   1460c:	ldrb	r0, [r7, #-1]
   14610:	mov	r5, r8
   14614:	cmp	r0, r8
   14618:	bne	145a4 <__assert_fail@plt+0x329c>
   1461c:	sub	r0, r7, r4
   14620:	str	r0, [sl, #4]
   14624:	b	1462c <__assert_fail@plt+0x3324>
   14628:	mov	sl, #0
   1462c:	mov	r0, sl
   14630:	sub	sp, fp, #28
   14634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14638:	ldr	r0, [r0, #8]
   1463c:	b	1430c <__assert_fail@plt+0x3004>
   14640:	push	{r4, r5, r6, sl, fp, lr}
   14644:	add	fp, sp, #16
   14648:	cmp	r2, #0
   1464c:	beq	1468c <__assert_fail@plt+0x3384>
   14650:	mov	r4, r2
   14654:	mov	r5, r1
   14658:	mov	r6, r0
   1465c:	bl	111a0 <__ctype_toupper_loc@plt>
   14660:	ldr	r1, [r0]
   14664:	ldrb	r0, [r5]
   14668:	ldrb	r2, [r6]
   1466c:	ldr	r0, [r1, r0, lsl #2]
   14670:	ldr	r2, [r1, r2, lsl #2]
   14674:	subs	r0, r2, r0
   14678:	bne	14690 <__assert_fail@plt+0x3388>
   1467c:	add	r6, r6, #1
   14680:	add	r5, r5, #1
   14684:	subs	r4, r4, #1
   14688:	bne	14664 <__assert_fail@plt+0x335c>
   1468c:	mov	r0, #0
   14690:	pop	{r4, r5, r6, sl, fp, pc}
   14694:	push	{r4, r5, fp, lr}
   14698:	add	fp, sp, #8
   1469c:	cmp	r0, #0
   146a0:	beq	14734 <__assert_fail@plt+0x342c>
   146a4:	mov	r1, #47	; 0x2f
   146a8:	mov	r4, r0
   146ac:	bl	112a8 <strrchr@plt>
   146b0:	cmp	r0, #0
   146b4:	mov	r5, r4
   146b8:	addne	r5, r0, #1
   146bc:	sub	r0, r5, r4
   146c0:	cmp	r0, #7
   146c4:	blt	14718 <__assert_fail@plt+0x3410>
   146c8:	movw	r1, #40210	; 0x9d12
   146cc:	sub	r0, r5, #7
   146d0:	mov	r2, #7
   146d4:	movt	r1, #1
   146d8:	bl	112e4 <strncmp@plt>
   146dc:	cmp	r0, #0
   146e0:	bne	14718 <__assert_fail@plt+0x3410>
   146e4:	movw	r1, #40218	; 0x9d1a
   146e8:	mov	r0, r5
   146ec:	mov	r2, #3
   146f0:	movt	r1, #1
   146f4:	bl	112e4 <strncmp@plt>
   146f8:	cmp	r0, #0
   146fc:	beq	14708 <__assert_fail@plt+0x3400>
   14700:	mov	r4, r5
   14704:	b	14718 <__assert_fail@plt+0x3410>
   14708:	movw	r0, #45408	; 0xb160
   1470c:	add	r4, r5, #3
   14710:	movt	r0, #2
   14714:	str	r4, [r0]
   14718:	movw	r0, #45412	; 0xb164
   1471c:	movt	r0, #2
   14720:	str	r4, [r0]
   14724:	movw	r0, #45568	; 0xb200
   14728:	movt	r0, #2
   1472c:	str	r4, [r0]
   14730:	pop	{r4, r5, fp, pc}
   14734:	movw	r0, #45424	; 0xb170
   14738:	mov	r1, #55	; 0x37
   1473c:	mov	r2, #1
   14740:	movt	r0, #2
   14744:	ldr	r3, [r0]
   14748:	movw	r0, #40154	; 0x9cda
   1474c:	movt	r0, #1
   14750:	bl	11128 <fwrite@plt>
   14754:	bl	112f0 <abort@plt>
   14758:	push	{r4, r5, r6, sl, fp, lr}
   1475c:	add	fp, sp, #16
   14760:	mov	r4, r0
   14764:	movw	r0, #45576	; 0xb208
   14768:	movt	r0, #2
   1476c:	cmp	r4, #0
   14770:	moveq	r4, r0
   14774:	bl	1120c <__errno_location@plt>
   14778:	ldr	r6, [r0]
   1477c:	mov	r5, r0
   14780:	mov	r0, r4
   14784:	mov	r1, #48	; 0x30
   14788:	bl	16ff8 <__assert_fail@plt+0x5cf0>
   1478c:	str	r6, [r5]
   14790:	pop	{r4, r5, r6, sl, fp, pc}
   14794:	movw	r1, #45576	; 0xb208
   14798:	cmp	r0, #0
   1479c:	movt	r1, #2
   147a0:	movne	r1, r0
   147a4:	ldr	r0, [r1]
   147a8:	bx	lr
   147ac:	movw	r2, #45576	; 0xb208
   147b0:	cmp	r0, #0
   147b4:	movt	r2, #2
   147b8:	movne	r2, r0
   147bc:	str	r1, [r2]
   147c0:	bx	lr
   147c4:	movw	r3, #45576	; 0xb208
   147c8:	cmp	r0, #0
   147cc:	and	r2, r2, #1
   147d0:	movt	r3, #2
   147d4:	movne	r3, r0
   147d8:	ubfx	r0, r1, #5, #3
   147dc:	and	r1, r1, #31
   147e0:	add	ip, r3, r0, lsl #2
   147e4:	mov	r0, #1
   147e8:	ldr	r3, [ip, #8]
   147ec:	and	r0, r0, r3, lsr r1
   147f0:	eor	r2, r0, r2
   147f4:	eor	r1, r3, r2, lsl r1
   147f8:	str	r1, [ip, #8]
   147fc:	bx	lr
   14800:	movw	r2, #45576	; 0xb208
   14804:	cmp	r0, #0
   14808:	movt	r2, #2
   1480c:	movne	r2, r0
   14810:	ldr	r0, [r2, #4]
   14814:	str	r1, [r2, #4]
   14818:	bx	lr
   1481c:	push	{fp, lr}
   14820:	mov	fp, sp
   14824:	movw	r3, #45576	; 0xb208
   14828:	cmp	r0, #0
   1482c:	movt	r3, #2
   14830:	movne	r3, r0
   14834:	cmp	r1, #0
   14838:	mov	r0, #10
   1483c:	cmpne	r2, #0
   14840:	str	r0, [r3]
   14844:	bne	1484c <__assert_fail@plt+0x3544>
   14848:	bl	112f0 <abort@plt>
   1484c:	str	r1, [r3, #40]	; 0x28
   14850:	str	r2, [r3, #44]	; 0x2c
   14854:	pop	{fp, pc}
   14858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1485c:	add	fp, sp, #28
   14860:	sub	sp, sp, #20
   14864:	mov	r7, r0
   14868:	ldr	r0, [fp, #8]
   1486c:	movw	r5, #45576	; 0xb208
   14870:	mov	r8, r3
   14874:	mov	r9, r2
   14878:	mov	sl, r1
   1487c:	movt	r5, #2
   14880:	cmp	r0, #0
   14884:	movne	r5, r0
   14888:	bl	1120c <__errno_location@plt>
   1488c:	ldr	r2, [r5, #40]	; 0x28
   14890:	ldr	r3, [r5, #44]	; 0x2c
   14894:	mov	r4, r0
   14898:	ldm	r5, {r0, r1}
   1489c:	add	r5, r5, #8
   148a0:	ldr	r6, [r4]
   148a4:	stm	sp, {r0, r1, r5}
   148a8:	mov	r0, r7
   148ac:	mov	r1, sl
   148b0:	str	r2, [sp, #12]
   148b4:	str	r3, [sp, #16]
   148b8:	mov	r2, r9
   148bc:	mov	r3, r8
   148c0:	bl	148d0 <__assert_fail@plt+0x35c8>
   148c4:	str	r6, [r4]
   148c8:	sub	sp, fp, #28
   148cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148d4:	add	fp, sp, #28
   148d8:	sub	sp, sp, #156	; 0x9c
   148dc:	mov	r5, r0
   148e0:	add	r0, r2, #1
   148e4:	mov	r6, r1
   148e8:	mov	sl, r3
   148ec:	str	r2, [fp, #-80]	; 0xffffffb0
   148f0:	str	r0, [sp, #72]	; 0x48
   148f4:	ldr	r0, [fp, #12]
   148f8:	and	r1, r0, #1
   148fc:	str	r1, [sp, #36]	; 0x24
   14900:	and	r1, r0, #4
   14904:	str	r1, [sp, #32]
   14908:	ubfx	r9, r0, #1, #1
   1490c:	bl	11140 <__ctype_get_mb_cur_max@plt>
   14910:	str	r0, [sp, #40]	; 0x28
   14914:	ldr	r0, [fp, #24]
   14918:	ldr	r7, [fp, #8]
   1491c:	mov	r1, #0
   14920:	str	r5, [fp, #-84]	; 0xffffffac
   14924:	str	r1, [fp, #-56]	; 0xffffffc8
   14928:	mov	r1, #0
   1492c:	str	r1, [sp, #60]	; 0x3c
   14930:	mov	r1, #1
   14934:	str	r1, [fp, #-48]	; 0xffffffd0
   14938:	str	r0, [sp, #80]	; 0x50
   1493c:	ldr	r0, [fp, #20]
   14940:	str	r0, [sp, #76]	; 0x4c
   14944:	mov	r0, #0
   14948:	str	r0, [sp, #56]	; 0x38
   1494c:	mov	r0, #0
   14950:	str	r0, [fp, #-88]	; 0xffffffa8
   14954:	mov	r0, #0
   14958:	str	r0, [fp, #-72]	; 0xffffffb8
   1495c:	mov	r0, #0
   14960:	cmp	r7, #10
   14964:	bhi	158f8 <__assert_fail@plt+0x45f0>
   14968:	add	r1, pc, #24
   1496c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14970:	mov	r4, r6
   14974:	mov	r8, #0
   14978:	mov	r2, #1
   1497c:	mov	r3, #0
   14980:	mov	lr, sl
   14984:	ldr	pc, [r1, r7, lsl #2]
   14988:	andeq	r4, r1, ip, asr #20
   1498c:	andeq	r4, r1, r0, lsr #21
   14990:	andeq	r4, r1, r0, ror #20
   14994:	andeq	r4, r1, r4, asr #20
   14998:	muleq	r1, r4, sl
   1499c:	andeq	r4, r1, r8, asr #21
   149a0:	andeq	r4, r1, r0, ror sl
   149a4:	andeq	r4, r1, ip, asr #22
   149a8:			; <UNDEFINED> instruction: 0x000149b4
   149ac:			; <UNDEFINED> instruction: 0x000149b4
   149b0:	ldrdeq	r4, [r1], -ip
   149b4:	movw	r0, #40300	; 0x9d6c
   149b8:	mov	r1, r7
   149bc:	movt	r0, #1
   149c0:	bl	16300 <__assert_fail@plt+0x4ff8>
   149c4:	str	r0, [sp, #76]	; 0x4c
   149c8:	movw	r0, #40302	; 0x9d6e
   149cc:	mov	r1, r7
   149d0:	movt	r0, #1
   149d4:	bl	16300 <__assert_fail@plt+0x4ff8>
   149d8:	str	r0, [sp, #80]	; 0x50
   149dc:	mov	r8, #0
   149e0:	tst	r9, #1
   149e4:	bne	14a1c <__assert_fail@plt+0x3714>
   149e8:	ldr	r0, [sp, #76]	; 0x4c
   149ec:	ldrb	r0, [r0]
   149f0:	cmp	r0, #0
   149f4:	beq	14a1c <__assert_fail@plt+0x3714>
   149f8:	ldr	r1, [sp, #76]	; 0x4c
   149fc:	mov	r8, #0
   14a00:	add	r1, r1, #1
   14a04:	cmp	r8, r4
   14a08:	strbcc	r0, [r5, r8]
   14a0c:	ldrb	r0, [r1, r8]
   14a10:	add	r8, r8, #1
   14a14:	cmp	r0, #0
   14a18:	bne	14a04 <__assert_fail@plt+0x36fc>
   14a1c:	ldr	r6, [sp, #80]	; 0x50
   14a20:	mov	r0, r6
   14a24:	bl	111f4 <strlen@plt>
   14a28:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14a2c:	str	r0, [fp, #-72]	; 0xffffffb8
   14a30:	str	r6, [fp, #-88]	; 0xffffffa8
   14a34:	mov	r2, #1
   14a38:	mov	r3, r9
   14a3c:	mov	lr, sl
   14a40:	b	14b4c <__assert_fail@plt+0x3844>
   14a44:	mov	r0, #1
   14a48:	b	14aa0 <__assert_fail@plt+0x3798>
   14a4c:	mov	r7, #0
   14a50:	mov	r8, #0
   14a54:	mov	r2, r0
   14a58:	mov	r3, #0
   14a5c:	b	14b4c <__assert_fail@plt+0x3844>
   14a60:	tst	r9, #1
   14a64:	bne	14aa0 <__assert_fail@plt+0x3798>
   14a68:	mov	r2, r0
   14a6c:	b	14af8 <__assert_fail@plt+0x37f0>
   14a70:	mov	r0, #1
   14a74:	mov	r8, #0
   14a78:	mov	r7, #5
   14a7c:	mov	r2, #1
   14a80:	str	r0, [fp, #-72]	; 0xffffffb8
   14a84:	movw	r0, #40298	; 0x9d6a
   14a88:	movt	r0, #1
   14a8c:	str	r0, [fp, #-88]	; 0xffffffa8
   14a90:	b	14ac0 <__assert_fail@plt+0x37b8>
   14a94:	mov	r2, #1
   14a98:	tst	r9, #1
   14a9c:	beq	14af8 <__assert_fail@plt+0x37f0>
   14aa0:	mov	r1, #1
   14aa4:	mov	r8, #0
   14aa8:	mov	r7, #2
   14aac:	mov	r2, r0
   14ab0:	str	r1, [fp, #-72]	; 0xffffffb8
   14ab4:	movw	r1, #40302	; 0x9d6e
   14ab8:	movt	r1, #1
   14abc:	str	r1, [fp, #-88]	; 0xffffffa8
   14ac0:	mov	r3, #1
   14ac4:	b	14b4c <__assert_fail@plt+0x3844>
   14ac8:	tst	r9, #1
   14acc:	beq	14b1c <__assert_fail@plt+0x3814>
   14ad0:	mov	r0, #1
   14ad4:	mov	r8, #0
   14ad8:	mov	r2, #1
   14adc:	mov	r3, #1
   14ae0:	mov	r7, #5
   14ae4:	str	r0, [fp, #-72]	; 0xffffffb8
   14ae8:	movw	r0, #40298	; 0x9d6a
   14aec:	movt	r0, #1
   14af0:	str	r0, [fp, #-88]	; 0xffffffa8
   14af4:	b	14b4c <__assert_fail@plt+0x3844>
   14af8:	cmp	r4, #0
   14afc:	mov	r8, #1
   14b00:	mov	r3, #0
   14b04:	mov	r7, #2
   14b08:	movne	r0, #39	; 0x27
   14b0c:	strbne	r0, [r5]
   14b10:	movw	r0, #40302	; 0x9d6e
   14b14:	movt	r0, #1
   14b18:	b	14b40 <__assert_fail@plt+0x3838>
   14b1c:	cmp	r4, #0
   14b20:	mov	r8, #1
   14b24:	mov	r2, #1
   14b28:	mov	r7, #5
   14b2c:	mov	r3, #0
   14b30:	movne	r0, #34	; 0x22
   14b34:	strbne	r0, [r5]
   14b38:	movw	r0, #40298	; 0x9d6a
   14b3c:	movt	r0, #1
   14b40:	str	r0, [fp, #-88]	; 0xffffffa8
   14b44:	mov	r0, #1
   14b48:	str	r0, [fp, #-72]	; 0xffffffb8
   14b4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14b50:	eor	r6, r3, #1
   14b54:	str	r7, [fp, #-68]	; 0xffffffbc
   14b58:	str	r3, [fp, #-76]	; 0xffffffb4
   14b5c:	str	r2, [sp, #84]	; 0x54
   14b60:	str	r6, [sp, #92]	; 0x5c
   14b64:	cmp	r0, #0
   14b68:	movwne	r0, #1
   14b6c:	and	r1, r0, r3
   14b70:	and	r1, r2, r1
   14b74:	str	r1, [sp, #48]	; 0x30
   14b78:	sub	r1, r7, #2
   14b7c:	clz	r1, r1
   14b80:	lsr	r1, r1, #5
   14b84:	and	r1, r1, r3
   14b88:	str	r1, [sp, #64]	; 0x40
   14b8c:	subs	r1, r7, #2
   14b90:	mov	r7, #0
   14b94:	movwne	r1, #1
   14b98:	orr	r6, r1, r6
   14b9c:	and	r1, r1, r2
   14ba0:	and	r0, r0, r1
   14ba4:	str	r6, [sp, #68]	; 0x44
   14ba8:	str	r0, [fp, #-60]	; 0xffffffc4
   14bac:	orr	r0, r1, r3
   14bb0:	ldr	r1, [fp, #16]
   14bb4:	eor	r0, r0, #1
   14bb8:	clz	r1, r1
   14bbc:	lsr	r1, r1, #5
   14bc0:	orr	r0, r1, r0
   14bc4:	str	r0, [fp, #-64]	; 0xffffffc0
   14bc8:	eor	r0, r2, #1
   14bcc:	str	r0, [sp, #52]	; 0x34
   14bd0:	cmn	lr, #1
   14bd4:	beq	14be4 <__assert_fail@plt+0x38dc>
   14bd8:	cmp	r7, lr
   14bdc:	bne	14bf0 <__assert_fail@plt+0x38e8>
   14be0:	b	15738 <__assert_fail@plt+0x4430>
   14be4:	ldrb	r0, [ip, r7]
   14be8:	cmp	r0, #0
   14bec:	beq	15740 <__assert_fail@plt+0x4438>
   14bf0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14bf4:	mov	sl, #0
   14bf8:	cmp	r0, #0
   14bfc:	beq	14c34 <__assert_fail@plt+0x392c>
   14c00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14c04:	add	r5, r7, r0
   14c08:	cmp	r0, #2
   14c0c:	bcc	14c28 <__assert_fail@plt+0x3920>
   14c10:	cmn	lr, #1
   14c14:	bne	14c28 <__assert_fail@plt+0x3920>
   14c18:	mov	r0, ip
   14c1c:	bl	111f4 <strlen@plt>
   14c20:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14c24:	mov	lr, r0
   14c28:	cmp	r5, lr
   14c2c:	bls	14c3c <__assert_fail@plt+0x3934>
   14c30:	ldr	r5, [fp, #-84]	; 0xffffffac
   14c34:	mov	r0, #0
   14c38:	b	14c88 <__assert_fail@plt+0x3980>
   14c3c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14c40:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14c44:	add	r0, ip, r7
   14c48:	mov	r6, r4
   14c4c:	mov	r4, lr
   14c50:	bl	111dc <bcmp@plt>
   14c54:	ldr	r2, [sp, #92]	; 0x5c
   14c58:	cmp	r0, #0
   14c5c:	ldr	r5, [fp, #-84]	; 0xffffffac
   14c60:	mov	r1, r0
   14c64:	movwne	r1, #1
   14c68:	orr	r1, r1, r2
   14c6c:	tst	r1, #1
   14c70:	beq	157c8 <__assert_fail@plt+0x44c0>
   14c74:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14c78:	clz	r0, r0
   14c7c:	mov	lr, r4
   14c80:	mov	r4, r6
   14c84:	lsr	r0, r0, #5
   14c88:	str	r0, [fp, #-52]	; 0xffffffcc
   14c8c:	ldrb	r6, [ip, r7]
   14c90:	cmp	r6, #126	; 0x7e
   14c94:	bhi	151c4 <__assert_fail@plt+0x3ebc>
   14c98:	add	r3, pc, #16
   14c9c:	mov	r9, #1
   14ca0:	mov	r2, #110	; 0x6e
   14ca4:	mov	r0, #97	; 0x61
   14ca8:	mov	r1, #0
   14cac:	ldr	pc, [r3, r6, lsl #2]
   14cb0:	andeq	r5, r1, r4, lsr #32
   14cb4:	andeq	r5, r1, r4, asr #3
   14cb8:	andeq	r5, r1, r4, asr #3
   14cbc:	andeq	r5, r1, r4, asr #3
   14cc0:	andeq	r5, r1, r4, asr #3
   14cc4:	andeq	r5, r1, r4, asr #3
   14cc8:	andeq	r5, r1, r4, asr #3
   14ccc:	andeq	r5, r1, r0, lsr #5
   14cd0:	andeq	r5, r1, r4
   14cd4:	strdeq	r4, [r1], -ip
   14cd8:	andeq	r5, r1, r0, lsl r0
   14cdc:	andeq	r5, r1, ip, lsr #2
   14ce0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ce4:	andeq	r5, r1, ip
   14ce8:	andeq	r5, r1, r4, asr #3
   14cec:	andeq	r5, r1, r4, asr #3
   14cf0:	andeq	r5, r1, r4, asr #3
   14cf4:	andeq	r5, r1, r4, asr #3
   14cf8:	andeq	r5, r1, r4, asr #3
   14cfc:	andeq	r5, r1, r4, asr #3
   14d00:	andeq	r5, r1, r4, asr #3
   14d04:	andeq	r5, r1, r4, asr #3
   14d08:	andeq	r5, r1, r4, asr #3
   14d0c:	andeq	r5, r1, r4, asr #3
   14d10:	andeq	r5, r1, r4, asr #3
   14d14:	andeq	r5, r1, r4, asr #3
   14d18:	andeq	r5, r1, r4, asr #3
   14d1c:	andeq	r5, r1, r4, asr #3
   14d20:	andeq	r5, r1, r4, asr #3
   14d24:	andeq	r5, r1, r4, asr #3
   14d28:	andeq	r5, r1, r4, asr #3
   14d2c:	andeq	r5, r1, r4, asr #3
   14d30:	andeq	r4, r1, r8, lsr #31
   14d34:	andeq	r4, r1, ip, lsr #31
   14d38:	andeq	r4, r1, ip, lsr #31
   14d3c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14d40:	andeq	r4, r1, ip, lsr #31
   14d44:	andeq	r4, r1, ip, lsr #29
   14d48:	andeq	r4, r1, ip, lsr #31
   14d4c:	andeq	r5, r1, r4, lsr r1
   14d50:	andeq	r4, r1, ip, lsr #31
   14d54:	andeq	r4, r1, ip, lsr #31
   14d58:	andeq	r4, r1, ip, lsr #31
   14d5c:	andeq	r4, r1, ip, lsr #29
   14d60:	andeq	r4, r1, ip, lsr #29
   14d64:	andeq	r4, r1, ip, lsr #29
   14d68:	andeq	r4, r1, ip, lsr #29
   14d6c:	andeq	r4, r1, ip, lsr #29
   14d70:	andeq	r4, r1, ip, lsr #29
   14d74:	andeq	r4, r1, ip, lsr #29
   14d78:	andeq	r4, r1, ip, lsr #29
   14d7c:	andeq	r4, r1, ip, lsr #29
   14d80:	andeq	r4, r1, ip, lsr #29
   14d84:	andeq	r4, r1, ip, lsr #29
   14d88:	andeq	r4, r1, ip, lsr #29
   14d8c:	andeq	r4, r1, ip, lsr #29
   14d90:	andeq	r4, r1, ip, lsr #29
   14d94:	andeq	r4, r1, ip, lsr #29
   14d98:	andeq	r4, r1, ip, lsr #29
   14d9c:	andeq	r4, r1, ip, lsr #31
   14da0:	andeq	r4, r1, ip, lsr #31
   14da4:	andeq	r4, r1, ip, lsr #31
   14da8:	andeq	r4, r1, ip, lsr #31
   14dac:	strdeq	r5, [r1], -ip
   14db0:	andeq	r5, r1, r4, asr #3
   14db4:	andeq	r4, r1, ip, lsr #29
   14db8:	andeq	r4, r1, ip, lsr #29
   14dbc:	andeq	r4, r1, ip, lsr #29
   14dc0:	andeq	r4, r1, ip, lsr #29
   14dc4:	andeq	r4, r1, ip, lsr #29
   14dc8:	andeq	r4, r1, ip, lsr #29
   14dcc:	andeq	r4, r1, ip, lsr #29
   14dd0:	andeq	r4, r1, ip, lsr #29
   14dd4:	andeq	r4, r1, ip, lsr #29
   14dd8:	andeq	r4, r1, ip, lsr #29
   14ddc:	andeq	r4, r1, ip, lsr #29
   14de0:	andeq	r4, r1, ip, lsr #29
   14de4:	andeq	r4, r1, ip, lsr #29
   14de8:	andeq	r4, r1, ip, lsr #29
   14dec:	andeq	r4, r1, ip, lsr #29
   14df0:	andeq	r4, r1, ip, lsr #29
   14df4:	andeq	r4, r1, ip, lsr #29
   14df8:	andeq	r4, r1, ip, lsr #29
   14dfc:	andeq	r4, r1, ip, lsr #29
   14e00:	andeq	r4, r1, ip, lsr #29
   14e04:	andeq	r4, r1, ip, lsr #29
   14e08:	andeq	r4, r1, ip, lsr #29
   14e0c:	andeq	r4, r1, ip, lsr #29
   14e10:	andeq	r4, r1, ip, lsr #29
   14e14:	andeq	r4, r1, ip, lsr #29
   14e18:	andeq	r4, r1, ip, lsr #29
   14e1c:	andeq	r4, r1, ip, lsr #31
   14e20:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e24:	andeq	r4, r1, ip, lsr #29
   14e28:	andeq	r4, r1, ip, lsr #31
   14e2c:	andeq	r4, r1, ip, lsr #29
   14e30:	andeq	r4, r1, ip, lsr #31
   14e34:	andeq	r4, r1, ip, lsr #29
   14e38:	andeq	r4, r1, ip, lsr #29
   14e3c:	andeq	r4, r1, ip, lsr #29
   14e40:	andeq	r4, r1, ip, lsr #29
   14e44:	andeq	r4, r1, ip, lsr #29
   14e48:	andeq	r4, r1, ip, lsr #29
   14e4c:	andeq	r4, r1, ip, lsr #29
   14e50:	andeq	r4, r1, ip, lsr #29
   14e54:	andeq	r4, r1, ip, lsr #29
   14e58:	andeq	r4, r1, ip, lsr #29
   14e5c:	andeq	r4, r1, ip, lsr #29
   14e60:	andeq	r4, r1, ip, lsr #29
   14e64:	andeq	r4, r1, ip, lsr #29
   14e68:	andeq	r4, r1, ip, lsr #29
   14e6c:	andeq	r4, r1, ip, lsr #29
   14e70:	andeq	r4, r1, ip, lsr #29
   14e74:	andeq	r4, r1, ip, lsr #29
   14e78:	andeq	r4, r1, ip, lsr #29
   14e7c:	andeq	r4, r1, ip, lsr #29
   14e80:	andeq	r4, r1, ip, lsr #29
   14e84:	andeq	r4, r1, ip, lsr #29
   14e88:	andeq	r4, r1, ip, lsr #29
   14e8c:	andeq	r4, r1, ip, lsr #29
   14e90:	andeq	r4, r1, ip, lsr #29
   14e94:	andeq	r4, r1, ip, lsr #29
   14e98:	andeq	r4, r1, ip, lsr #29
   14e9c:	andeq	r4, r1, r8, ror #30
   14ea0:	andeq	r4, r1, ip, lsr #31
   14ea4:	andeq	r4, r1, r8, ror #30
   14ea8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14eac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14eb0:	tst	r0, #1
   14eb4:	bne	14ee0 <__assert_fail@plt+0x3bd8>
   14eb8:	ldr	r1, [fp, #16]
   14ebc:	ubfx	r0, r6, #5, #3
   14ec0:	mov	r2, #1
   14ec4:	ldr	r0, [r1, r0, lsl #2]
   14ec8:	and	r1, r6, #31
   14ecc:	tst	r0, r2, lsl r1
   14ed0:	beq	14ee0 <__assert_fail@plt+0x3bd8>
   14ed4:	mov	r0, r6
   14ed8:	mov	r1, r9
   14edc:	b	14ef4 <__assert_fail@plt+0x3bec>
   14ee0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14ee4:	mov	r1, r9
   14ee8:	cmp	r0, #0
   14eec:	mov	r0, r6
   14ef0:	beq	15234 <__assert_fail@plt+0x3f2c>
   14ef4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ef8:	tst	r2, #1
   14efc:	bne	15804 <__assert_fail@plt+0x44fc>
   14f00:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14f04:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14f08:	subs	r2, r2, #2
   14f0c:	movwne	r2, #1
   14f10:	orr	r2, r2, r3
   14f14:	tst	r2, #1
   14f18:	bne	14f54 <__assert_fail@plt+0x3c4c>
   14f1c:	cmp	r8, r4
   14f20:	movcc	r2, #39	; 0x27
   14f24:	strbcc	r2, [r5, r8]
   14f28:	add	r2, r8, #1
   14f2c:	cmp	r2, r4
   14f30:	movcc	r3, #36	; 0x24
   14f34:	strbcc	r3, [r5, r2]
   14f38:	add	r2, r8, #2
   14f3c:	add	r8, r8, #3
   14f40:	cmp	r2, r4
   14f44:	movcc	r3, #39	; 0x27
   14f48:	strbcc	r3, [r5, r2]
   14f4c:	mov	r2, #1
   14f50:	str	r2, [fp, #-56]	; 0xffffffc8
   14f54:	cmp	r8, r4
   14f58:	movcc	r2, #92	; 0x5c
   14f5c:	strbcc	r2, [r5, r8]
   14f60:	add	r8, r8, #1
   14f64:	b	15278 <__assert_fail@plt+0x3f70>
   14f68:	cmp	lr, #1
   14f6c:	beq	14f94 <__assert_fail@plt+0x3c8c>
   14f70:	mov	r9, #0
   14f74:	cmn	lr, #1
   14f78:	bne	14fa0 <__assert_fail@plt+0x3c98>
   14f7c:	ldrb	r0, [ip, #1]
   14f80:	cmp	r0, #0
   14f84:	beq	14f94 <__assert_fail@plt+0x3c8c>
   14f88:	mvn	lr, #0
   14f8c:	mov	sl, #0
   14f90:	b	14eac <__assert_fail@plt+0x3ba4>
   14f94:	mov	r9, #0
   14f98:	cmp	r7, #0
   14f9c:	beq	14fa8 <__assert_fail@plt+0x3ca0>
   14fa0:	mov	sl, #0
   14fa4:	b	14eac <__assert_fail@plt+0x3ba4>
   14fa8:	mov	r1, #1
   14fac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fb0:	cmp	r0, #2
   14fb4:	bne	14fcc <__assert_fail@plt+0x3cc4>
   14fb8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14fbc:	mov	r9, r1
   14fc0:	tst	r0, #1
   14fc4:	beq	14eac <__assert_fail@plt+0x3ba4>
   14fc8:	b	15804 <__assert_fail@plt+0x44fc>
   14fcc:	mov	r9, r1
   14fd0:	b	14eac <__assert_fail@plt+0x3ba4>
   14fd4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fd8:	cmp	r0, #2
   14fdc:	bne	15218 <__assert_fail@plt+0x3f10>
   14fe0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14fe4:	tst	r0, #1
   14fe8:	bne	15804 <__assert_fail@plt+0x44fc>
   14fec:	mov	sl, #0
   14ff0:	b	1522c <__assert_fail@plt+0x3f24>
   14ff4:	mov	r0, #102	; 0x66
   14ff8:	b	152a0 <__assert_fail@plt+0x3f98>
   14ffc:	mov	r2, #116	; 0x74
   15000:	b	15010 <__assert_fail@plt+0x3d08>
   15004:	mov	r0, #98	; 0x62
   15008:	b	152a0 <__assert_fail@plt+0x3f98>
   1500c:	mov	r2, #114	; 0x72
   15010:	ldr	r0, [sp, #68]	; 0x44
   15014:	tst	r0, #1
   15018:	mov	r0, r2
   1501c:	bne	152a0 <__assert_fail@plt+0x3f98>
   15020:	b	15804 <__assert_fail@plt+0x44fc>
   15024:	ldr	r0, [sp, #84]	; 0x54
   15028:	tst	r0, #1
   1502c:	beq	152bc <__assert_fail@plt+0x3fb4>
   15030:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15034:	tst	r0, #1
   15038:	bne	158f0 <__assert_fail@plt+0x45e8>
   1503c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15040:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15044:	subs	r0, r0, #2
   15048:	movwne	r0, #1
   1504c:	orr	r0, r0, r1
   15050:	tst	r0, #1
   15054:	bne	15090 <__assert_fail@plt+0x3d88>
   15058:	cmp	r8, r4
   1505c:	movcc	r0, #39	; 0x27
   15060:	strbcc	r0, [r5, r8]
   15064:	add	r0, r8, #1
   15068:	cmp	r0, r4
   1506c:	movcc	r1, #36	; 0x24
   15070:	strbcc	r1, [r5, r0]
   15074:	add	r0, r8, #2
   15078:	add	r8, r8, #3
   1507c:	cmp	r0, r4
   15080:	movcc	r1, #39	; 0x27
   15084:	strbcc	r1, [r5, r0]
   15088:	mov	r0, #1
   1508c:	str	r0, [fp, #-56]	; 0xffffffc8
   15090:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15094:	cmp	r8, r4
   15098:	mov	r9, #0
   1509c:	mov	sl, #1
   150a0:	mov	r6, #48	; 0x30
   150a4:	movcc	r0, #92	; 0x5c
   150a8:	strbcc	r0, [r5, r8]
   150ac:	add	r0, r8, #1
   150b0:	cmp	r1, #2
   150b4:	beq	15484 <__assert_fail@plt+0x417c>
   150b8:	add	r1, r7, #1
   150bc:	cmp	r1, lr
   150c0:	bcs	15484 <__assert_fail@plt+0x417c>
   150c4:	ldrb	r1, [ip, r1]
   150c8:	sub	r1, r1, #48	; 0x30
   150cc:	uxtb	r1, r1
   150d0:	cmp	r1, #9
   150d4:	bhi	15484 <__assert_fail@plt+0x417c>
   150d8:	cmp	r0, r4
   150dc:	movcc	r1, #48	; 0x30
   150e0:	strbcc	r1, [r5, r0]
   150e4:	add	r0, r8, #2
   150e8:	add	r8, r8, #3
   150ec:	cmp	r0, r4
   150f0:	movcc	r1, #48	; 0x30
   150f4:	strbcc	r1, [r5, r0]
   150f8:	b	14eac <__assert_fail@plt+0x3ba4>
   150fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15100:	mov	sl, #0
   15104:	mov	r6, #63	; 0x3f
   15108:	cmp	r0, #5
   1510c:	beq	1548c <__assert_fail@plt+0x4184>
   15110:	cmp	r0, #2
   15114:	bne	15534 <__assert_fail@plt+0x422c>
   15118:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1511c:	mov	r9, #0
   15120:	tst	r0, #1
   15124:	beq	14eac <__assert_fail@plt+0x3ba4>
   15128:	b	15804 <__assert_fail@plt+0x44fc>
   1512c:	mov	r0, #118	; 0x76
   15130:	b	152a0 <__assert_fail@plt+0x3f98>
   15134:	mov	r0, #1
   15138:	mov	r6, #39	; 0x27
   1513c:	str	r0, [sp, #60]	; 0x3c
   15140:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15144:	cmp	r0, #2
   15148:	bne	152d8 <__assert_fail@plt+0x3fd0>
   1514c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15150:	tst	r0, #1
   15154:	bne	15804 <__assert_fail@plt+0x44fc>
   15158:	ldr	r2, [sp, #56]	; 0x38
   1515c:	clz	r1, r4
   15160:	mov	sl, #0
   15164:	mov	r9, #1
   15168:	lsr	r1, r1, #5
   1516c:	cmp	r2, #0
   15170:	mov	r0, r2
   15174:	movwne	r0, #1
   15178:	orrs	r0, r0, r1
   1517c:	moveq	r2, r4
   15180:	moveq	r4, r0
   15184:	cmp	r8, r4
   15188:	str	r2, [sp, #56]	; 0x38
   1518c:	movcc	r0, #39	; 0x27
   15190:	strbcc	r0, [r5, r8]
   15194:	add	r0, r8, #1
   15198:	cmp	r0, r4
   1519c:	movcc	r1, #92	; 0x5c
   151a0:	strbcc	r1, [r5, r0]
   151a4:	add	r0, r8, #2
   151a8:	add	r8, r8, #3
   151ac:	cmp	r0, r4
   151b0:	movcc	r1, #39	; 0x27
   151b4:	strbcc	r1, [r5, r0]
   151b8:	mov	r0, #0
   151bc:	str	r0, [fp, #-56]	; 0xffffffc8
   151c0:	b	14eac <__assert_fail@plt+0x3ba4>
   151c4:	ldr	r0, [sp, #40]	; 0x28
   151c8:	str	r4, [sp, #88]	; 0x58
   151cc:	cmp	r0, #1
   151d0:	bne	152e0 <__assert_fail@plt+0x3fd8>
   151d4:	str	lr, [sp, #28]
   151d8:	bl	111c4 <__ctype_b_loc@plt>
   151dc:	ldr	r0, [r0]
   151e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   151e4:	mov	r2, #1
   151e8:	add	r0, r0, r6, lsl #1
   151ec:	ldrb	r0, [r0, #1]
   151f0:	ubfx	r9, r0, #6, #1
   151f4:	ldr	r0, [sp, #52]	; 0x34
   151f8:	cmp	r2, #1
   151fc:	orr	r0, r9, r0
   15200:	bhi	1553c <__assert_fail@plt+0x4234>
   15204:	tst	r0, #1
   15208:	beq	1553c <__assert_fail@plt+0x4234>
   1520c:	ldr	lr, [sp, #28]
   15210:	ldr	r4, [sp, #88]	; 0x58
   15214:	b	14eac <__assert_fail@plt+0x3ba4>
   15218:	ldr	r1, [sp, #48]	; 0x30
   1521c:	mov	sl, #0
   15220:	mov	r0, #92	; 0x5c
   15224:	cmp	r1, #0
   15228:	beq	152a0 <__assert_fail@plt+0x3f98>
   1522c:	mov	r6, #92	; 0x5c
   15230:	mov	r9, #0
   15234:	cmp	sl, #0
   15238:	bne	15270 <__assert_fail@plt+0x3f68>
   1523c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15240:	tst	r0, #1
   15244:	beq	15270 <__assert_fail@plt+0x3f68>
   15248:	cmp	r8, r4
   1524c:	movcc	r0, #39	; 0x27
   15250:	strbcc	r0, [r5, r8]
   15254:	add	r0, r8, #1
   15258:	add	r8, r8, #2
   1525c:	cmp	r0, r4
   15260:	movcc	r1, #39	; 0x27
   15264:	strbcc	r1, [r5, r0]
   15268:	mov	r0, #0
   1526c:	str	r0, [fp, #-56]	; 0xffffffc8
   15270:	mov	r1, r9
   15274:	mov	r0, r6
   15278:	cmp	r8, r4
   1527c:	strbcc	r0, [r5, r8]
   15280:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15284:	add	r8, r8, #1
   15288:	and	r0, r0, r1
   1528c:	str	r0, [fp, #-48]	; 0xffffffd0
   15290:	add	r7, r7, #1
   15294:	cmn	lr, #1
   15298:	bne	14bd8 <__assert_fail@plt+0x38d0>
   1529c:	b	14be4 <__assert_fail@plt+0x38dc>
   152a0:	ldr	r1, [sp, #84]	; 0x54
   152a4:	mov	sl, #0
   152a8:	mov	r9, #0
   152ac:	tst	r1, #1
   152b0:	mov	r1, #0
   152b4:	beq	14eac <__assert_fail@plt+0x3ba4>
   152b8:	b	14ef4 <__assert_fail@plt+0x3bec>
   152bc:	ldr	r0, [sp, #36]	; 0x24
   152c0:	mov	r6, #0
   152c4:	mov	sl, #0
   152c8:	mov	r9, #0
   152cc:	cmp	r0, #0
   152d0:	beq	14eac <__assert_fail@plt+0x3ba4>
   152d4:	b	15290 <__assert_fail@plt+0x3f88>
   152d8:	mov	r9, #1
   152dc:	b	14eac <__assert_fail@plt+0x3ba4>
   152e0:	mov	r0, #0
   152e4:	cmn	lr, #1
   152e8:	sub	r4, fp, #40	; 0x28
   152ec:	str	r0, [fp, #-36]	; 0xffffffdc
   152f0:	str	r0, [fp, #-40]	; 0xffffffd8
   152f4:	bne	15308 <__assert_fail@plt+0x4000>
   152f8:	mov	r0, ip
   152fc:	bl	111f4 <strlen@plt>
   15300:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15304:	mov	lr, r0
   15308:	ldr	r0, [sp, #72]	; 0x48
   1530c:	mov	r9, #1
   15310:	mov	r2, #0
   15314:	str	lr, [sp, #28]
   15318:	add	r0, r0, r7
   1531c:	str	r0, [sp, #20]
   15320:	b	15364 <__assert_fail@plt+0x405c>
   15324:	ldr	r5, [sp, #44]	; 0x2c
   15328:	add	r5, r0, r5
   1532c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15330:	bl	1111c <iswprint@plt>
   15334:	cmp	r0, #0
   15338:	sub	r4, fp, #40	; 0x28
   1533c:	movwne	r0, #1
   15340:	and	r9, r9, r0
   15344:	mov	r0, r4
   15348:	bl	110d4 <mbsinit@plt>
   1534c:	mov	r2, r5
   15350:	ldr	lr, [sp, #28]
   15354:	ldr	r5, [fp, #-84]	; 0xffffffac
   15358:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1535c:	cmp	r0, #0
   15360:	bne	151f4 <__assert_fail@plt+0x3eec>
   15364:	add	r0, r2, r7
   15368:	str	r2, [sp, #44]	; 0x2c
   1536c:	mov	r3, r4
   15370:	add	r1, ip, r0
   15374:	str	r0, [sp, #24]
   15378:	sub	r2, lr, r0
   1537c:	sub	r0, fp, #44	; 0x2c
   15380:	bl	18b38 <__assert_fail@plt+0x7830>
   15384:	cmp	r0, #0
   15388:	beq	1572c <__assert_fail@plt+0x4424>
   1538c:	cmn	r0, #1
   15390:	beq	156e8 <__assert_fail@plt+0x43e0>
   15394:	ldr	lr, [sp, #28]
   15398:	cmn	r0, #2
   1539c:	beq	156f0 <__assert_fail@plt+0x43e8>
   153a0:	ldr	r2, [sp, #64]	; 0x40
   153a4:	ldr	r4, [sp, #88]	; 0x58
   153a8:	ldr	ip, [sp, #84]	; 0x54
   153ac:	cmp	r0, #2
   153b0:	mov	r1, #0
   153b4:	movwcc	r1, #1
   153b8:	eor	r2, r2, #1
   153bc:	orrs	r1, r2, r1
   153c0:	bne	15324 <__assert_fail@plt+0x401c>
   153c4:	ldr	r1, [sp, #44]	; 0x2c
   153c8:	ldr	r2, [sp, #20]
   153cc:	add	r1, r2, r1
   153d0:	sub	r2, r0, #1
   153d4:	b	153e4 <__assert_fail@plt+0x40dc>
   153d8:	add	r1, r1, #1
   153dc:	subs	r2, r2, #1
   153e0:	beq	15324 <__assert_fail@plt+0x401c>
   153e4:	ldrb	r3, [r1]
   153e8:	sub	r3, r3, #91	; 0x5b
   153ec:	cmp	r3, #33	; 0x21
   153f0:	bhi	153d8 <__assert_fail@plt+0x40d0>
   153f4:	add	r5, pc, #0
   153f8:	ldr	pc, [r5, r3, lsl #2]
   153fc:	andeq	r5, r1, r0, ror #15
   15400:	andeq	r5, r1, r0, ror #15
   15404:	ldrdeq	r5, [r1], -r8
   15408:	andeq	r5, r1, r0, ror #15
   1540c:	ldrdeq	r5, [r1], -r8
   15410:	andeq	r5, r1, r0, ror #15
   15414:	ldrdeq	r5, [r1], -r8
   15418:	ldrdeq	r5, [r1], -r8
   1541c:	ldrdeq	r5, [r1], -r8
   15420:	ldrdeq	r5, [r1], -r8
   15424:	ldrdeq	r5, [r1], -r8
   15428:	ldrdeq	r5, [r1], -r8
   1542c:	ldrdeq	r5, [r1], -r8
   15430:	ldrdeq	r5, [r1], -r8
   15434:	ldrdeq	r5, [r1], -r8
   15438:	ldrdeq	r5, [r1], -r8
   1543c:	ldrdeq	r5, [r1], -r8
   15440:	ldrdeq	r5, [r1], -r8
   15444:	ldrdeq	r5, [r1], -r8
   15448:	ldrdeq	r5, [r1], -r8
   1544c:	ldrdeq	r5, [r1], -r8
   15450:	ldrdeq	r5, [r1], -r8
   15454:	ldrdeq	r5, [r1], -r8
   15458:	ldrdeq	r5, [r1], -r8
   1545c:	ldrdeq	r5, [r1], -r8
   15460:	ldrdeq	r5, [r1], -r8
   15464:	ldrdeq	r5, [r1], -r8
   15468:	ldrdeq	r5, [r1], -r8
   1546c:	ldrdeq	r5, [r1], -r8
   15470:	ldrdeq	r5, [r1], -r8
   15474:	ldrdeq	r5, [r1], -r8
   15478:	ldrdeq	r5, [r1], -r8
   1547c:	ldrdeq	r5, [r1], -r8
   15480:	andeq	r5, r1, r0, ror #15
   15484:	mov	r8, r0
   15488:	b	14eac <__assert_fail@plt+0x3ba4>
   1548c:	ldr	r0, [sp, #32]
   15490:	cmp	r0, #0
   15494:	beq	15534 <__assert_fail@plt+0x422c>
   15498:	add	r0, r7, #2
   1549c:	cmp	r0, lr
   154a0:	bcs	15534 <__assert_fail@plt+0x422c>
   154a4:	add	r1, r7, ip
   154a8:	ldrb	r1, [r1, #1]
   154ac:	cmp	r1, #63	; 0x3f
   154b0:	bne	15534 <__assert_fail@plt+0x422c>
   154b4:	ldrb	r9, [ip, r0]
   154b8:	sub	r2, r9, #33	; 0x21
   154bc:	cmp	r2, #29
   154c0:	bhi	15534 <__assert_fail@plt+0x422c>
   154c4:	movw	r1, #20929	; 0x51c1
   154c8:	mov	r3, #1
   154cc:	movt	r1, #14336	; 0x3800
   154d0:	tst	r1, r3, lsl r2
   154d4:	beq	15534 <__assert_fail@plt+0x422c>
   154d8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   154dc:	tst	r1, #1
   154e0:	bne	15804 <__assert_fail@plt+0x44fc>
   154e4:	cmp	r8, r4
   154e8:	add	r2, r8, #1
   154ec:	mov	r6, r9
   154f0:	mov	r7, r0
   154f4:	mov	r9, #0
   154f8:	movcc	r1, #63	; 0x3f
   154fc:	strbcc	r1, [r5, r8]
   15500:	cmp	r2, r4
   15504:	movcc	r1, #34	; 0x22
   15508:	strbcc	r1, [r5, r2]
   1550c:	add	r2, r8, #2
   15510:	cmp	r2, r4
   15514:	movcc	r1, #34	; 0x22
   15518:	strbcc	r1, [r5, r2]
   1551c:	add	r2, r8, #3
   15520:	add	r8, r8, #4
   15524:	cmp	r2, r4
   15528:	movcc	r1, #63	; 0x3f
   1552c:	strbcc	r1, [r5, r2]
   15530:	b	14eac <__assert_fail@plt+0x3ba4>
   15534:	mov	r9, #0
   15538:	b	14eac <__assert_fail@plt+0x3ba4>
   1553c:	ldr	lr, [sp, #28]
   15540:	ldr	r4, [fp, #-56]	; 0xffffffc8
   15544:	add	r1, r2, r7
   15548:	mov	r2, #0
   1554c:	str	r1, [sp, #44]	; 0x2c
   15550:	tst	r0, #1
   15554:	bne	15670 <__assert_fail@plt+0x4368>
   15558:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1555c:	tst	r1, #1
   15560:	bne	15800 <__assert_fail@plt+0x44f8>
   15564:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15568:	subs	r2, r1, #2
   1556c:	movwne	r2, #1
   15570:	orr	r2, r2, r4
   15574:	tst	r2, #1
   15578:	bne	155bc <__assert_fail@plt+0x42b4>
   1557c:	ldr	r1, [sp, #88]	; 0x58
   15580:	add	r2, r8, #1
   15584:	mov	r4, #1
   15588:	cmp	r8, r1
   1558c:	movcc	r1, #39	; 0x27
   15590:	strbcc	r1, [r5, r8]
   15594:	ldr	r1, [sp, #88]	; 0x58
   15598:	cmp	r2, r1
   1559c:	movcc	r1, #36	; 0x24
   155a0:	strbcc	r1, [r5, r2]
   155a4:	ldr	r1, [sp, #88]	; 0x58
   155a8:	add	r2, r8, #2
   155ac:	add	r8, r8, #3
   155b0:	cmp	r2, r1
   155b4:	movcc	r1, #39	; 0x27
   155b8:	strbcc	r1, [r5, r2]
   155bc:	ldr	r1, [sp, #88]	; 0x58
   155c0:	add	r2, r8, #1
   155c4:	cmp	r8, r1
   155c8:	movcc	r1, #92	; 0x5c
   155cc:	strbcc	r1, [r5, r8]
   155d0:	ldr	r1, [sp, #88]	; 0x58
   155d4:	cmp	r2, r1
   155d8:	bcs	155ec <__assert_fail@plt+0x42e4>
   155dc:	uxtb	r3, r6
   155e0:	mov	r1, #48	; 0x30
   155e4:	orr	r3, r1, r3, lsr #6
   155e8:	strb	r3, [r5, r2]
   155ec:	ldr	r1, [sp, #88]	; 0x58
   155f0:	add	r2, r8, #2
   155f4:	add	r8, r8, #3
   155f8:	cmp	r2, r1
   155fc:	lsrcc	r3, r6, #3
   15600:	movcc	r1, #6
   15604:	bficc	r3, r1, #3, #29
   15608:	mov	r1, #6
   1560c:	bfi	r6, r1, #3, #29
   15610:	strbcc	r3, [r5, r2]
   15614:	mov	r2, #1
   15618:	b	15698 <__assert_fail@plt+0x4390>
   1561c:	ldr	r1, [sp, #88]	; 0x58
   15620:	ldr	r5, [fp, #-84]	; 0xffffffac
   15624:	ldr	r4, [sp, #88]	; 0x58
   15628:	cmp	r8, r1
   1562c:	movcc	r1, #39	; 0x27
   15630:	strbcc	r1, [r5, r8]
   15634:	add	r1, r8, #1
   15638:	add	r8, r8, #2
   1563c:	cmp	r1, r4
   15640:	movcc	r4, #39	; 0x27
   15644:	strbcc	r4, [r5, r1]
   15648:	mov	r4, #0
   1564c:	ldr	r1, [sp, #88]	; 0x58
   15650:	cmp	r8, r1
   15654:	ldr	r1, [sp, #72]	; 0x48
   15658:	strbcc	r6, [r5, r8]
   1565c:	add	r8, r8, #1
   15660:	ldrb	r6, [r1, r7]
   15664:	mov	r7, r3
   15668:	tst	r0, #1
   1566c:	beq	15558 <__assert_fail@plt+0x4250>
   15670:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15674:	tst	r1, #1
   15678:	beq	15690 <__assert_fail@plt+0x4388>
   1567c:	ldr	r1, [sp, #88]	; 0x58
   15680:	cmp	r8, r1
   15684:	movcc	r1, #92	; 0x5c
   15688:	strbcc	r1, [r5, r8]
   1568c:	add	r8, r8, #1
   15690:	mov	r1, #0
   15694:	str	r1, [fp, #-52]	; 0xffffffcc
   15698:	ldr	r1, [sp, #44]	; 0x2c
   1569c:	add	r3, r7, #1
   156a0:	and	sl, r2, #1
   156a4:	cmp	r1, r3
   156a8:	bls	156cc <__assert_fail@plt+0x43c4>
   156ac:	cmp	sl, #0
   156b0:	mvn	r5, r4
   156b4:	movwne	sl, #1
   156b8:	orr	r5, r5, sl
   156bc:	tst	r5, #1
   156c0:	beq	1561c <__assert_fail@plt+0x4314>
   156c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   156c8:	b	1564c <__assert_fail@plt+0x4344>
   156cc:	str	r4, [fp, #-56]	; 0xffffffc8
   156d0:	ldr	r4, [sp, #88]	; 0x58
   156d4:	cmp	sl, #0
   156d8:	movwne	sl, #1
   156dc:	cmp	sl, #0
   156e0:	beq	1523c <__assert_fail@plt+0x3f34>
   156e4:	b	15270 <__assert_fail@plt+0x3f68>
   156e8:	mov	r9, #0
   156ec:	b	1572c <__assert_fail@plt+0x4424>
   156f0:	ldr	r0, [sp, #24]
   156f4:	mov	r9, #0
   156f8:	cmp	lr, r0
   156fc:	bls	1572c <__assert_fail@plt+0x4424>
   15700:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15704:	ldr	r2, [sp, #44]	; 0x2c
   15708:	add	r0, ip, r7
   1570c:	ldrb	r1, [r0, r2]
   15710:	cmp	r1, #0
   15714:	beq	151f4 <__assert_fail@plt+0x3eec>
   15718:	add	r2, r2, #1
   1571c:	add	r1, r7, r2
   15720:	cmp	r1, lr
   15724:	bcc	1570c <__assert_fail@plt+0x4404>
   15728:	b	151f4 <__assert_fail@plt+0x3eec>
   1572c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15730:	ldr	r2, [sp, #44]	; 0x2c
   15734:	b	151f4 <__assert_fail@plt+0x3eec>
   15738:	mov	lr, r7
   1573c:	b	15744 <__assert_fail@plt+0x443c>
   15740:	mvn	lr, #0
   15744:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15748:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1574c:	eor	r0, r1, #2
   15750:	orr	r0, r0, r8
   15754:	clz	r0, r0
   15758:	lsr	r0, r0, #5
   1575c:	tst	r2, r0
   15760:	bne	15804 <__assert_fail@plt+0x44fc>
   15764:	subs	r0, r1, #2
   15768:	movwne	r0, #1
   1576c:	orr	r0, r2, r0
   15770:	tst	r0, #1
   15774:	ldreq	r0, [sp, #60]	; 0x3c
   15778:	eoreq	r0, r0, #1
   1577c:	tsteq	r0, #1
   15780:	bne	15898 <__assert_fail@plt+0x4590>
   15784:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15788:	mov	sl, lr
   1578c:	tst	r0, #1
   15790:	bne	15864 <__assert_fail@plt+0x455c>
   15794:	ldr	r6, [sp, #56]	; 0x38
   15798:	mov	r9, #0
   1579c:	cmp	r6, #0
   157a0:	beq	15890 <__assert_fail@plt+0x4588>
   157a4:	ldr	r0, [sp, #84]	; 0x54
   157a8:	mov	r1, #0
   157ac:	mov	r7, #2
   157b0:	cmp	r4, #0
   157b4:	str	r1, [fp, #-48]	; 0xffffffd0
   157b8:	mov	r1, #0
   157bc:	str	r1, [fp, #-76]	; 0xffffffb4
   157c0:	beq	14960 <__assert_fail@plt+0x3658>
   157c4:	b	15898 <__assert_fail@plt+0x4590>
   157c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   157cc:	ldr	r1, [fp, #12]
   157d0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   157d4:	mov	lr, r4
   157d8:	mov	r4, r6
   157dc:	b	15824 <__assert_fail@plt+0x451c>
   157e0:	tst	ip, #1
   157e4:	ldr	r5, [fp, #-84]	; 0xffffffac
   157e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   157ec:	ldr	r1, [fp, #12]
   157f0:	mov	r0, #2
   157f4:	movwne	r0, #4
   157f8:	mov	r2, r0
   157fc:	b	15824 <__assert_fail@plt+0x451c>
   15800:	ldr	r4, [sp, #88]	; 0x58
   15804:	ldr	r1, [sp, #84]	; 0x54
   15808:	mov	r0, #2
   1580c:	tst	r1, #1
   15810:	movwne	r0, #4
   15814:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15818:	ldr	r1, [fp, #12]
   1581c:	cmp	r2, #2
   15820:	moveq	r2, r0
   15824:	mov	r0, #0
   15828:	bic	r1, r1, #2
   1582c:	str	r2, [sp]
   15830:	mov	r2, ip
   15834:	mov	r3, lr
   15838:	str	r0, [sp, #8]
   1583c:	ldr	r0, [sp, #76]	; 0x4c
   15840:	str	r1, [sp, #4]
   15844:	mov	r1, r4
   15848:	str	r0, [sp, #12]
   1584c:	ldr	r0, [sp, #80]	; 0x50
   15850:	str	r0, [sp, #16]
   15854:	mov	r0, r5
   15858:	bl	148d0 <__assert_fail@plt+0x35c8>
   1585c:	mov	r8, r0
   15860:	b	158e4 <__assert_fail@plt+0x45dc>
   15864:	mov	r0, #5
   15868:	ldr	r1, [sp, #56]	; 0x38
   1586c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15870:	mov	r3, sl
   15874:	str	r0, [sp]
   15878:	ldr	r0, [fp, #12]
   1587c:	str	r0, [sp, #4]
   15880:	ldr	r0, [fp, #16]
   15884:	str	r0, [sp, #8]
   15888:	ldr	r0, [sp, #76]	; 0x4c
   1588c:	b	15848 <__assert_fail@plt+0x4540>
   15890:	mov	r0, #0
   15894:	str	r0, [fp, #-76]	; 0xffffffb4
   15898:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1589c:	cmp	r1, #0
   158a0:	beq	158d8 <__assert_fail@plt+0x45d0>
   158a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   158a8:	tst	r0, #1
   158ac:	bne	158d8 <__assert_fail@plt+0x45d0>
   158b0:	ldrb	r0, [r1]
   158b4:	cmp	r0, #0
   158b8:	beq	158d8 <__assert_fail@plt+0x45d0>
   158bc:	add	r1, r1, #1
   158c0:	cmp	r8, r4
   158c4:	strbcc	r0, [r5, r8]
   158c8:	add	r8, r8, #1
   158cc:	ldrb	r0, [r1], #1
   158d0:	cmp	r0, #0
   158d4:	bne	158c0 <__assert_fail@plt+0x45b8>
   158d8:	cmp	r8, r4
   158dc:	movcc	r0, #0
   158e0:	strbcc	r0, [r5, r8]
   158e4:	mov	r0, r8
   158e8:	sub	sp, fp, #28
   158ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f0:	mov	r0, #4
   158f4:	b	15814 <__assert_fail@plt+0x450c>
   158f8:	bl	112f0 <abort@plt>
   158fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15900:	add	fp, sp, #28
   15904:	sub	sp, sp, #28
   15908:	movw	r5, #45576	; 0xb208
   1590c:	cmp	r2, #0
   15910:	mov	r4, r1
   15914:	mov	r7, r0
   15918:	str	r0, [sp, #20]
   1591c:	movt	r5, #2
   15920:	movne	r5, r2
   15924:	bl	1120c <__errno_location@plt>
   15928:	mov	sl, r0
   1592c:	ldr	r2, [r5, #40]	; 0x28
   15930:	ldr	r3, [r5, #44]	; 0x2c
   15934:	ldm	r5, {r0, r1}
   15938:	orr	r8, r1, #1
   1593c:	add	r9, r5, #8
   15940:	mov	r1, #0
   15944:	ldr	r6, [sl]
   15948:	stm	sp, {r0, r8, r9}
   1594c:	mov	r0, #0
   15950:	str	r2, [sp, #12]
   15954:	str	r3, [sp, #16]
   15958:	mov	r2, r7
   1595c:	mov	r3, r4
   15960:	str	r6, [sp, #24]
   15964:	mov	r6, r4
   15968:	bl	148d0 <__assert_fail@plt+0x35c8>
   1596c:	add	r7, r0, #1
   15970:	mov	r0, r7
   15974:	bl	16bc8 <__assert_fail@plt+0x58c0>
   15978:	mov	r4, r0
   1597c:	ldr	r0, [r5]
   15980:	ldr	r2, [r5, #44]	; 0x2c
   15984:	ldr	r1, [r5, #40]	; 0x28
   15988:	mov	r3, r6
   1598c:	stm	sp, {r0, r8, r9}
   15990:	str	r2, [sp, #16]
   15994:	ldr	r2, [sp, #20]
   15998:	str	r1, [sp, #12]
   1599c:	mov	r0, r4
   159a0:	mov	r1, r7
   159a4:	bl	148d0 <__assert_fail@plt+0x35c8>
   159a8:	ldr	r0, [sp, #24]
   159ac:	str	r0, [sl]
   159b0:	mov	r0, r4
   159b4:	sub	sp, fp, #28
   159b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159c0:	add	fp, sp, #28
   159c4:	sub	sp, sp, #36	; 0x24
   159c8:	movw	r8, #45576	; 0xb208
   159cc:	cmp	r3, #0
   159d0:	mov	r4, r2
   159d4:	str	r2, [sp, #24]
   159d8:	mov	r5, r1
   159dc:	mov	r6, r0
   159e0:	str	r0, [sp, #20]
   159e4:	movt	r8, #2
   159e8:	movne	r8, r3
   159ec:	bl	1120c <__errno_location@plt>
   159f0:	str	r0, [sp, #28]
   159f4:	ldr	r1, [r8, #40]	; 0x28
   159f8:	ldr	r2, [r8, #44]	; 0x2c
   159fc:	ldr	r7, [r0]
   15a00:	cmp	r4, #0
   15a04:	add	sl, r8, #8
   15a08:	mov	r0, #0
   15a0c:	ldm	r8, {r3, r9}
   15a10:	orreq	r9, r9, #1
   15a14:	stm	sp, {r3, r9, sl}
   15a18:	str	r1, [sp, #12]
   15a1c:	str	r2, [sp, #16]
   15a20:	mov	r1, #0
   15a24:	mov	r2, r6
   15a28:	mov	r3, r5
   15a2c:	str	r7, [sp, #32]
   15a30:	mov	r7, r5
   15a34:	bl	148d0 <__assert_fail@plt+0x35c8>
   15a38:	add	r4, r0, #1
   15a3c:	mov	r5, r0
   15a40:	mov	r0, r4
   15a44:	bl	16bc8 <__assert_fail@plt+0x58c0>
   15a48:	mov	r6, r0
   15a4c:	ldr	r0, [r8]
   15a50:	ldr	r2, [r8, #44]	; 0x2c
   15a54:	ldr	r1, [r8, #40]	; 0x28
   15a58:	mov	r3, r7
   15a5c:	stm	sp, {r0, r9, sl}
   15a60:	str	r2, [sp, #16]
   15a64:	ldr	r2, [sp, #20]
   15a68:	str	r1, [sp, #12]
   15a6c:	mov	r0, r6
   15a70:	mov	r1, r4
   15a74:	bl	148d0 <__assert_fail@plt+0x35c8>
   15a78:	ldr	r0, [sp, #24]
   15a7c:	ldr	r1, [sp, #32]
   15a80:	ldr	r2, [sp, #28]
   15a84:	cmp	r0, #0
   15a88:	str	r1, [r2]
   15a8c:	strne	r5, [r0]
   15a90:	mov	r0, r6
   15a94:	sub	sp, fp, #28
   15a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15aa0:	add	fp, sp, #24
   15aa4:	movw	r5, #45348	; 0xb124
   15aa8:	movw	r8, #45344	; 0xb120
   15aac:	movt	r5, #2
   15ab0:	movt	r8, #2
   15ab4:	ldr	r0, [r5]
   15ab8:	ldr	r4, [r8]
   15abc:	cmp	r0, #2
   15ac0:	blt	15aec <__assert_fail@plt+0x47e4>
   15ac4:	add	r7, r4, #12
   15ac8:	mov	r6, #0
   15acc:	ldr	r0, [r7, r6, lsl #3]
   15ad0:	bl	1430c <__assert_fail@plt+0x3004>
   15ad4:	ldr	r1, [r5]
   15ad8:	add	r2, r6, #2
   15adc:	add	r0, r6, #1
   15ae0:	mov	r6, r0
   15ae4:	cmp	r2, r1
   15ae8:	blt	15acc <__assert_fail@plt+0x47c4>
   15aec:	ldr	r0, [r4, #4]
   15af0:	movw	r9, #45624	; 0xb238
   15af4:	movw	r7, #45352	; 0xb128
   15af8:	movt	r9, #2
   15afc:	movt	r7, #2
   15b00:	cmp	r0, r9
   15b04:	beq	15b14 <__assert_fail@plt+0x480c>
   15b08:	bl	1430c <__assert_fail@plt+0x3004>
   15b0c:	mov	r0, #256	; 0x100
   15b10:	stm	r7, {r0, r9}
   15b14:	cmp	r4, r7
   15b18:	beq	15b28 <__assert_fail@plt+0x4820>
   15b1c:	mov	r0, r4
   15b20:	bl	1430c <__assert_fail@plt+0x3004>
   15b24:	str	r7, [r8]
   15b28:	mov	r0, #1
   15b2c:	str	r0, [r5]
   15b30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b34:	movw	r3, #45576	; 0xb208
   15b38:	mvn	r2, #0
   15b3c:	movt	r3, #2
   15b40:	b	15b44 <__assert_fail@plt+0x483c>
   15b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b48:	add	fp, sp, #28
   15b4c:	sub	sp, sp, #44	; 0x2c
   15b50:	mov	r7, r3
   15b54:	str	r2, [sp, #36]	; 0x24
   15b58:	str	r1, [sp, #32]
   15b5c:	mov	r5, r0
   15b60:	bl	1120c <__errno_location@plt>
   15b64:	cmp	r5, #0
   15b68:	bmi	15cd8 <__assert_fail@plt+0x49d0>
   15b6c:	cmn	r5, #-2147483647	; 0x80000001
   15b70:	beq	15cd8 <__assert_fail@plt+0x49d0>
   15b74:	movw	r8, #45348	; 0xb124
   15b78:	movw	r4, #45344	; 0xb120
   15b7c:	str	r0, [sp, #28]
   15b80:	ldr	r0, [r0]
   15b84:	movt	r8, #2
   15b88:	movt	r4, #2
   15b8c:	ldr	r1, [r8]
   15b90:	ldr	r6, [r4]
   15b94:	str	r0, [sp, #24]
   15b98:	cmp	r1, r5
   15b9c:	ble	15ba8 <__assert_fail@plt+0x48a0>
   15ba0:	mov	sl, r6
   15ba4:	b	15c14 <__assert_fail@plt+0x490c>
   15ba8:	movw	r9, #45352	; 0xb128
   15bac:	mov	r0, #8
   15bb0:	str	r1, [fp, #-32]	; 0xffffffe0
   15bb4:	sub	r1, r5, r1
   15bb8:	mvn	r3, #-2147483648	; 0x80000000
   15bbc:	movt	r9, #2
   15bc0:	str	r0, [sp]
   15bc4:	add	r2, r1, #1
   15bc8:	sub	r1, fp, #32
   15bcc:	subs	r0, r6, r9
   15bd0:	movne	r0, r6
   15bd4:	bl	16dc8 <__assert_fail@plt+0x5ac0>
   15bd8:	mov	sl, r0
   15bdc:	cmp	r6, r9
   15be0:	str	r0, [r4]
   15be4:	bne	15bf0 <__assert_fail@plt+0x48e8>
   15be8:	ldrd	r0, [r9]
   15bec:	stm	sl, {r0, r1}
   15bf0:	ldr	r1, [r8]
   15bf4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15bf8:	add	r0, sl, r1, lsl #3
   15bfc:	sub	r1, r2, r1
   15c00:	lsl	r2, r1, #3
   15c04:	mov	r1, #0
   15c08:	bl	11224 <memset@plt>
   15c0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15c10:	str	r0, [r8]
   15c14:	mov	r9, sl
   15c18:	ldm	r7, {r0, r1}
   15c1c:	orr	r8, r1, #1
   15c20:	add	r1, r7, #8
   15c24:	ldr	r2, [r7, #40]	; 0x28
   15c28:	ldr	r3, [r7, #44]	; 0x2c
   15c2c:	ldr	r6, [r9, r5, lsl #3]!
   15c30:	str	r1, [sp, #20]
   15c34:	ldr	r4, [r9, #4]!
   15c38:	stm	sp, {r0, r8}
   15c3c:	add	r0, sp, #8
   15c40:	stm	r0, {r1, r2, r3}
   15c44:	ldr	r2, [sp, #32]
   15c48:	ldr	r3, [sp, #36]	; 0x24
   15c4c:	mov	r1, r6
   15c50:	mov	r0, r4
   15c54:	bl	148d0 <__assert_fail@plt+0x35c8>
   15c58:	cmp	r6, r0
   15c5c:	bhi	15cc0 <__assert_fail@plt+0x49b8>
   15c60:	add	r6, r0, #1
   15c64:	movw	r0, #45624	; 0xb238
   15c68:	movt	r0, #2
   15c6c:	str	r6, [sl, r5, lsl #3]
   15c70:	cmp	r4, r0
   15c74:	beq	15c80 <__assert_fail@plt+0x4978>
   15c78:	mov	r0, r4
   15c7c:	bl	1430c <__assert_fail@plt+0x3004>
   15c80:	mov	r0, r6
   15c84:	bl	16bc8 <__assert_fail@plt+0x58c0>
   15c88:	str	r0, [r9]
   15c8c:	mov	r4, r0
   15c90:	add	r3, sp, #8
   15c94:	ldr	r0, [r7]
   15c98:	ldr	r1, [r7, #40]	; 0x28
   15c9c:	ldr	r2, [r7, #44]	; 0x2c
   15ca0:	stm	sp, {r0, r8}
   15ca4:	ldr	r0, [sp, #20]
   15ca8:	stm	r3, {r0, r1, r2}
   15cac:	ldr	r2, [sp, #32]
   15cb0:	ldr	r3, [sp, #36]	; 0x24
   15cb4:	mov	r0, r4
   15cb8:	mov	r1, r6
   15cbc:	bl	148d0 <__assert_fail@plt+0x35c8>
   15cc0:	ldr	r0, [sp, #28]
   15cc4:	ldr	r1, [sp, #24]
   15cc8:	str	r1, [r0]
   15ccc:	mov	r0, r4
   15cd0:	sub	sp, fp, #28
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd8:	bl	112f0 <abort@plt>
   15cdc:	movw	r3, #45576	; 0xb208
   15ce0:	movt	r3, #2
   15ce4:	b	15b44 <__assert_fail@plt+0x483c>
   15ce8:	movw	r3, #45576	; 0xb208
   15cec:	mov	r1, r0
   15cf0:	mov	r0, #0
   15cf4:	mvn	r2, #0
   15cf8:	movt	r3, #2
   15cfc:	b	15b44 <__assert_fail@plt+0x483c>
   15d00:	movw	r3, #45576	; 0xb208
   15d04:	mov	r2, r1
   15d08:	mov	r1, r0
   15d0c:	mov	r0, #0
   15d10:	movt	r3, #2
   15d14:	b	15b44 <__assert_fail@plt+0x483c>
   15d18:	push	{fp, lr}
   15d1c:	mov	fp, sp
   15d20:	sub	sp, sp, #48	; 0x30
   15d24:	vmov.i32	q8, #0	; 0x00000000
   15d28:	mov	ip, #32
   15d2c:	mov	r3, sp
   15d30:	mov	lr, r2
   15d34:	cmp	r1, #10
   15d38:	add	r2, r3, #16
   15d3c:	vst1.64	{d16-d17}, [r3], ip
   15d40:	vst1.64	{d16-d17}, [r2]
   15d44:	vst1.64	{d16-d17}, [r3]
   15d48:	beq	15d68 <__assert_fail@plt+0x4a60>
   15d4c:	str	r1, [sp]
   15d50:	mov	r3, sp
   15d54:	mov	r1, lr
   15d58:	mvn	r2, #0
   15d5c:	bl	15b44 <__assert_fail@plt+0x483c>
   15d60:	mov	sp, fp
   15d64:	pop	{fp, pc}
   15d68:	bl	112f0 <abort@plt>
   15d6c:	push	{r4, sl, fp, lr}
   15d70:	add	fp, sp, #8
   15d74:	sub	sp, sp, #48	; 0x30
   15d78:	vmov.i32	q8, #0	; 0x00000000
   15d7c:	mov	ip, r3
   15d80:	mov	r3, sp
   15d84:	mov	lr, #32
   15d88:	cmp	r1, #10
   15d8c:	add	r4, r3, #16
   15d90:	vst1.64	{d16-d17}, [r3], lr
   15d94:	vst1.64	{d16-d17}, [r4]
   15d98:	vst1.64	{d16-d17}, [r3]
   15d9c:	beq	15dbc <__assert_fail@plt+0x4ab4>
   15da0:	str	r1, [sp]
   15da4:	mov	r1, r2
   15da8:	mov	r3, sp
   15dac:	mov	r2, ip
   15db0:	bl	15b44 <__assert_fail@plt+0x483c>
   15db4:	sub	sp, fp, #8
   15db8:	pop	{r4, sl, fp, pc}
   15dbc:	bl	112f0 <abort@plt>
   15dc0:	push	{fp, lr}
   15dc4:	mov	fp, sp
   15dc8:	sub	sp, sp, #48	; 0x30
   15dcc:	vmov.i32	q8, #0	; 0x00000000
   15dd0:	mov	r3, sp
   15dd4:	mov	ip, #32
   15dd8:	cmp	r0, #10
   15ddc:	add	r2, r3, #16
   15de0:	vst1.64	{d16-d17}, [r3], ip
   15de4:	vst1.64	{d16-d17}, [r2]
   15de8:	vst1.64	{d16-d17}, [r3]
   15dec:	beq	15e0c <__assert_fail@plt+0x4b04>
   15df0:	str	r0, [sp]
   15df4:	mov	r3, sp
   15df8:	mov	r0, #0
   15dfc:	mvn	r2, #0
   15e00:	bl	15b44 <__assert_fail@plt+0x483c>
   15e04:	mov	sp, fp
   15e08:	pop	{fp, pc}
   15e0c:	bl	112f0 <abort@plt>
   15e10:	push	{fp, lr}
   15e14:	mov	fp, sp
   15e18:	sub	sp, sp, #48	; 0x30
   15e1c:	vmov.i32	q8, #0	; 0x00000000
   15e20:	mov	r3, sp
   15e24:	mov	ip, #32
   15e28:	cmp	r0, #10
   15e2c:	add	lr, r3, #16
   15e30:	vst1.64	{d16-d17}, [r3], ip
   15e34:	vst1.64	{d16-d17}, [lr]
   15e38:	vst1.64	{d16-d17}, [r3]
   15e3c:	beq	15e58 <__assert_fail@plt+0x4b50>
   15e40:	str	r0, [sp]
   15e44:	mov	r3, sp
   15e48:	mov	r0, #0
   15e4c:	bl	15b44 <__assert_fail@plt+0x483c>
   15e50:	mov	sp, fp
   15e54:	pop	{fp, pc}
   15e58:	bl	112f0 <abort@plt>
   15e5c:	push	{r4, sl, fp, lr}
   15e60:	add	fp, sp, #8
   15e64:	sub	sp, sp, #48	; 0x30
   15e68:	mov	lr, r0
   15e6c:	movw	r0, #45576	; 0xb208
   15e70:	mov	ip, r1
   15e74:	mov	r1, #32
   15e78:	mov	r4, #1
   15e7c:	movt	r0, #2
   15e80:	add	r3, r0, #16
   15e84:	vld1.64	{d16-d17}, [r0], r1
   15e88:	vld1.64	{d20-d21}, [r0]
   15e8c:	vld1.64	{d18-d19}, [r3]
   15e90:	mov	r3, sp
   15e94:	add	r0, r3, #32
   15e98:	add	r1, r3, #16
   15e9c:	vst1.64	{d20-d21}, [r0]
   15ea0:	mov	r0, #28
   15ea4:	vst1.64	{d18-d19}, [r1]
   15ea8:	mov	r1, r3
   15eac:	and	r0, r0, r2, lsr #3
   15eb0:	and	r2, r2, #31
   15eb4:	vst1.64	{d16-d17}, [r1], r0
   15eb8:	ldr	r0, [r1, #8]
   15ebc:	bic	r4, r4, r0, lsr r2
   15ec0:	eor	r0, r0, r4, lsl r2
   15ec4:	mov	r2, ip
   15ec8:	str	r0, [r1, #8]
   15ecc:	mov	r0, #0
   15ed0:	mov	r1, lr
   15ed4:	bl	15b44 <__assert_fail@plt+0x483c>
   15ed8:	sub	sp, fp, #8
   15edc:	pop	{r4, sl, fp, pc}
   15ee0:	push	{fp, lr}
   15ee4:	mov	fp, sp
   15ee8:	sub	sp, sp, #48	; 0x30
   15eec:	mov	ip, r0
   15ef0:	movw	r0, #45576	; 0xb208
   15ef4:	mov	r2, #32
   15ef8:	movt	r0, #2
   15efc:	add	r3, r0, #16
   15f00:	vld1.64	{d16-d17}, [r0], r2
   15f04:	vld1.64	{d20-d21}, [r0]
   15f08:	vld1.64	{d18-d19}, [r3]
   15f0c:	mov	r3, sp
   15f10:	add	r0, r3, #32
   15f14:	add	r2, r3, #16
   15f18:	vst1.64	{d20-d21}, [r0]
   15f1c:	mov	r0, #28
   15f20:	vst1.64	{d18-d19}, [r2]
   15f24:	mov	r2, r3
   15f28:	and	r0, r0, r1, lsr #3
   15f2c:	and	r1, r1, #31
   15f30:	vst1.64	{d16-d17}, [r2], r0
   15f34:	mov	r0, #1
   15f38:	ldr	lr, [r2, #8]
   15f3c:	bic	r0, r0, lr, lsr r1
   15f40:	eor	r0, lr, r0, lsl r1
   15f44:	mov	r1, ip
   15f48:	str	r0, [r2, #8]
   15f4c:	mov	r0, #0
   15f50:	mvn	r2, #0
   15f54:	bl	15b44 <__assert_fail@plt+0x483c>
   15f58:	mov	sp, fp
   15f5c:	pop	{fp, pc}
   15f60:	push	{fp, lr}
   15f64:	mov	fp, sp
   15f68:	sub	sp, sp, #48	; 0x30
   15f6c:	mov	r1, r0
   15f70:	movw	r0, #45576	; 0xb208
   15f74:	mov	r3, #32
   15f78:	movt	r0, #2
   15f7c:	add	r2, r0, #16
   15f80:	vld1.64	{d16-d17}, [r0], r3
   15f84:	mov	r3, sp
   15f88:	vld1.64	{d18-d19}, [r2]
   15f8c:	vld1.64	{d20-d21}, [r0]
   15f90:	add	r2, r3, #16
   15f94:	add	r0, r3, #32
   15f98:	vst1.64	{d18-d19}, [r2]
   15f9c:	vst1.64	{d20-d21}, [r0]
   15fa0:	mov	r0, #12
   15fa4:	mov	r2, r3
   15fa8:	vst1.64	{d16-d17}, [r2], r0
   15fac:	ldr	r0, [r2]
   15fb0:	orr	r0, r0, #67108864	; 0x4000000
   15fb4:	str	r0, [r2]
   15fb8:	mov	r0, #0
   15fbc:	mvn	r2, #0
   15fc0:	bl	15b44 <__assert_fail@plt+0x483c>
   15fc4:	mov	sp, fp
   15fc8:	pop	{fp, pc}
   15fcc:	push	{fp, lr}
   15fd0:	mov	fp, sp
   15fd4:	sub	sp, sp, #48	; 0x30
   15fd8:	mov	ip, r1
   15fdc:	mov	r1, r0
   15fe0:	movw	r0, #45576	; 0xb208
   15fe4:	mov	r2, #32
   15fe8:	movt	r0, #2
   15fec:	add	r3, r0, #16
   15ff0:	vld1.64	{d16-d17}, [r0], r2
   15ff4:	vld1.64	{d18-d19}, [r3]
   15ff8:	vld1.64	{d20-d21}, [r0]
   15ffc:	mov	r3, sp
   16000:	add	r2, r3, #16
   16004:	add	r0, r3, #32
   16008:	vst1.64	{d18-d19}, [r2]
   1600c:	vst1.64	{d20-d21}, [r0]
   16010:	mov	r0, #12
   16014:	mov	r2, r3
   16018:	vst1.64	{d16-d17}, [r2], r0
   1601c:	ldr	r0, [r2]
   16020:	orr	r0, r0, #67108864	; 0x4000000
   16024:	str	r0, [r2]
   16028:	mov	r0, #0
   1602c:	mov	r2, ip
   16030:	bl	15b44 <__assert_fail@plt+0x483c>
   16034:	mov	sp, fp
   16038:	pop	{fp, pc}
   1603c:	push	{r4, sl, fp, lr}
   16040:	add	fp, sp, #8
   16044:	sub	sp, sp, #96	; 0x60
   16048:	vmov.i32	q8, #0	; 0x00000000
   1604c:	mov	ip, r2
   16050:	mov	r2, sp
   16054:	mov	r4, #28
   16058:	cmp	r1, #10
   1605c:	mov	r3, r2
   16060:	add	lr, r2, #16
   16064:	vst1.64	{d16-d17}, [r3], r4
   16068:	vst1.64	{d16-d17}, [lr]
   1606c:	vst1.32	{d16-d17}, [r3]
   16070:	beq	160c0 <__assert_fail@plt+0x4db8>
   16074:	vld1.64	{d16-d17}, [r2], r4
   16078:	vld1.64	{d18-d19}, [lr]
   1607c:	add	r3, sp, #48	; 0x30
   16080:	vld1.32	{d20-d21}, [r2]
   16084:	add	r2, r3, #20
   16088:	add	r4, r3, #4
   1608c:	vst1.32	{d18-d19}, [r2]
   16090:	add	r2, r3, #32
   16094:	vst1.32	{d16-d17}, [r4]
   16098:	vst1.32	{d20-d21}, [r2]
   1609c:	str	r1, [sp, #48]	; 0x30
   160a0:	mvn	r2, #0
   160a4:	ldr	r1, [sp, #60]	; 0x3c
   160a8:	orr	r1, r1, #67108864	; 0x4000000
   160ac:	str	r1, [sp, #60]	; 0x3c
   160b0:	mov	r1, ip
   160b4:	bl	15b44 <__assert_fail@plt+0x483c>
   160b8:	sub	sp, fp, #8
   160bc:	pop	{r4, sl, fp, pc}
   160c0:	bl	112f0 <abort@plt>
   160c4:	push	{r4, r5, r6, sl, fp, lr}
   160c8:	add	fp, sp, #16
   160cc:	sub	sp, sp, #48	; 0x30
   160d0:	mov	ip, r3
   160d4:	movw	r3, #45576	; 0xb208
   160d8:	mov	r6, #32
   160dc:	cmp	r1, #0
   160e0:	mov	r4, sp
   160e4:	movt	r3, #2
   160e8:	cmpne	r2, #0
   160ec:	add	r5, r4, #16
   160f0:	add	lr, r3, #16
   160f4:	vld1.64	{d16-d17}, [r3], r6
   160f8:	vld1.64	{d18-d19}, [lr]
   160fc:	vld1.64	{d20-d21}, [r3]
   16100:	mov	r3, #10
   16104:	vst1.64	{d16-d17}, [r4], r6
   16108:	vst1.64	{d18-d19}, [r5]
   1610c:	vst1.64	{d20-d21}, [r4]
   16110:	str	r3, [sp]
   16114:	bne	1611c <__assert_fail@plt+0x4e14>
   16118:	bl	112f0 <abort@plt>
   1611c:	str	r2, [sp, #44]	; 0x2c
   16120:	str	r1, [sp, #40]	; 0x28
   16124:	mov	r3, sp
   16128:	mov	r1, ip
   1612c:	mvn	r2, #0
   16130:	bl	15b44 <__assert_fail@plt+0x483c>
   16134:	sub	sp, fp, #16
   16138:	pop	{r4, r5, r6, sl, fp, pc}
   1613c:	push	{r4, r5, r6, sl, fp, lr}
   16140:	add	fp, sp, #16
   16144:	sub	sp, sp, #48	; 0x30
   16148:	mov	lr, r3
   1614c:	movw	r3, #45576	; 0xb208
   16150:	mov	r6, #32
   16154:	cmp	r1, #0
   16158:	mov	r4, sp
   1615c:	movt	r3, #2
   16160:	cmpne	r2, #0
   16164:	add	r5, r4, #16
   16168:	add	ip, r3, #16
   1616c:	vld1.64	{d16-d17}, [r3], r6
   16170:	vld1.64	{d18-d19}, [ip]
   16174:	vld1.64	{d20-d21}, [r3]
   16178:	mov	r3, #10
   1617c:	vst1.64	{d16-d17}, [r4], r6
   16180:	vst1.64	{d18-d19}, [r5]
   16184:	vst1.64	{d20-d21}, [r4]
   16188:	str	r3, [sp]
   1618c:	bne	16194 <__assert_fail@plt+0x4e8c>
   16190:	bl	112f0 <abort@plt>
   16194:	ldr	ip, [fp, #8]
   16198:	str	r2, [sp, #44]	; 0x2c
   1619c:	str	r1, [sp, #40]	; 0x28
   161a0:	mov	r3, sp
   161a4:	mov	r1, lr
   161a8:	mov	r2, ip
   161ac:	bl	15b44 <__assert_fail@plt+0x483c>
   161b0:	sub	sp, fp, #16
   161b4:	pop	{r4, r5, r6, sl, fp, pc}
   161b8:	push	{r4, sl, fp, lr}
   161bc:	add	fp, sp, #8
   161c0:	sub	sp, sp, #48	; 0x30
   161c4:	movw	r3, #45576	; 0xb208
   161c8:	mov	lr, #32
   161cc:	mov	ip, r2
   161d0:	cmp	r0, #0
   161d4:	movt	r3, #2
   161d8:	cmpne	r1, #0
   161dc:	add	r2, r3, #16
   161e0:	vld1.64	{d16-d17}, [r3], lr
   161e4:	vld1.64	{d20-d21}, [r3]
   161e8:	vld1.64	{d18-d19}, [r2]
   161ec:	mov	r2, sp
   161f0:	add	r4, r2, #16
   161f4:	vst1.64	{d16-d17}, [r2], lr
   161f8:	vst1.64	{d20-d21}, [r2]
   161fc:	mov	r2, #10
   16200:	vst1.64	{d18-d19}, [r4]
   16204:	str	r2, [sp]
   16208:	bne	16210 <__assert_fail@plt+0x4f08>
   1620c:	bl	112f0 <abort@plt>
   16210:	str	r1, [sp, #44]	; 0x2c
   16214:	str	r0, [sp, #40]	; 0x28
   16218:	mov	r3, sp
   1621c:	mov	r0, #0
   16220:	mov	r1, ip
   16224:	mvn	r2, #0
   16228:	bl	15b44 <__assert_fail@plt+0x483c>
   1622c:	sub	sp, fp, #8
   16230:	pop	{r4, sl, fp, pc}
   16234:	push	{r4, r5, fp, lr}
   16238:	add	fp, sp, #8
   1623c:	sub	sp, sp, #48	; 0x30
   16240:	mov	ip, r3
   16244:	movw	r3, #45576	; 0xb208
   16248:	mov	r4, #32
   1624c:	mov	lr, r2
   16250:	cmp	r0, #0
   16254:	movt	r3, #2
   16258:	cmpne	r1, #0
   1625c:	add	r2, r3, #16
   16260:	vld1.64	{d16-d17}, [r3], r4
   16264:	vld1.64	{d20-d21}, [r3]
   16268:	vld1.64	{d18-d19}, [r2]
   1626c:	mov	r2, sp
   16270:	add	r5, r2, #16
   16274:	vst1.64	{d16-d17}, [r2], r4
   16278:	vst1.64	{d20-d21}, [r2]
   1627c:	mov	r2, #10
   16280:	vst1.64	{d18-d19}, [r5]
   16284:	str	r2, [sp]
   16288:	bne	16290 <__assert_fail@plt+0x4f88>
   1628c:	bl	112f0 <abort@plt>
   16290:	str	r1, [sp, #44]	; 0x2c
   16294:	str	r0, [sp, #40]	; 0x28
   16298:	mov	r3, sp
   1629c:	mov	r0, #0
   162a0:	mov	r1, lr
   162a4:	mov	r2, ip
   162a8:	bl	15b44 <__assert_fail@plt+0x483c>
   162ac:	sub	sp, fp, #8
   162b0:	pop	{r4, r5, fp, pc}
   162b4:	movw	r3, #45360	; 0xb130
   162b8:	movt	r3, #2
   162bc:	b	15b44 <__assert_fail@plt+0x483c>
   162c0:	movw	r3, #45360	; 0xb130
   162c4:	mov	r2, r1
   162c8:	mov	r1, r0
   162cc:	mov	r0, #0
   162d0:	movt	r3, #2
   162d4:	b	15b44 <__assert_fail@plt+0x483c>
   162d8:	movw	r3, #45360	; 0xb130
   162dc:	mvn	r2, #0
   162e0:	movt	r3, #2
   162e4:	b	15b44 <__assert_fail@plt+0x483c>
   162e8:	movw	r3, #45360	; 0xb130
   162ec:	mov	r1, r0
   162f0:	mov	r0, #0
   162f4:	mvn	r2, #0
   162f8:	movt	r3, #2
   162fc:	b	15b44 <__assert_fail@plt+0x483c>
   16300:	push	{r4, r5, fp, lr}
   16304:	add	fp, sp, #8
   16308:	mov	r5, r0
   1630c:	mov	r4, r1
   16310:	mov	r0, #0
   16314:	mov	r2, #5
   16318:	mov	r1, r5
   1631c:	bl	110f8 <dcgettext@plt>
   16320:	cmp	r0, r5
   16324:	popne	{r4, r5, fp, pc}
   16328:	bl	18b00 <__assert_fail@plt+0x77f8>
   1632c:	ldrb	r1, [r0]
   16330:	and	r1, r1, #223	; 0xdf
   16334:	cmp	r1, #71	; 0x47
   16338:	beq	163a0 <__assert_fail@plt+0x5098>
   1633c:	cmp	r1, #85	; 0x55
   16340:	bne	163f8 <__assert_fail@plt+0x50f0>
   16344:	ldrb	r1, [r0, #1]
   16348:	and	r1, r1, #223	; 0xdf
   1634c:	cmp	r1, #84	; 0x54
   16350:	bne	163f8 <__assert_fail@plt+0x50f0>
   16354:	ldrb	r1, [r0, #2]
   16358:	and	r1, r1, #223	; 0xdf
   1635c:	cmp	r1, #70	; 0x46
   16360:	bne	163f8 <__assert_fail@plt+0x50f0>
   16364:	ldrb	r1, [r0, #3]
   16368:	cmp	r1, #45	; 0x2d
   1636c:	bne	163f8 <__assert_fail@plt+0x50f0>
   16370:	ldrb	r1, [r0, #4]
   16374:	cmp	r1, #56	; 0x38
   16378:	bne	163f8 <__assert_fail@plt+0x50f0>
   1637c:	ldrb	r0, [r0, #5]
   16380:	cmp	r0, #0
   16384:	bne	163f8 <__assert_fail@plt+0x50f0>
   16388:	ldrb	r1, [r5]
   1638c:	movw	r2, #40304	; 0x9d70
   16390:	movw	r0, #40308	; 0x9d74
   16394:	movt	r2, #1
   16398:	movt	r0, #1
   1639c:	b	16428 <__assert_fail@plt+0x5120>
   163a0:	ldrb	r1, [r0, #1]
   163a4:	and	r1, r1, #223	; 0xdf
   163a8:	cmp	r1, #66	; 0x42
   163ac:	bne	163f8 <__assert_fail@plt+0x50f0>
   163b0:	ldrb	r1, [r0, #2]
   163b4:	cmp	r1, #49	; 0x31
   163b8:	bne	163f8 <__assert_fail@plt+0x50f0>
   163bc:	ldrb	r1, [r0, #3]
   163c0:	cmp	r1, #56	; 0x38
   163c4:	bne	163f8 <__assert_fail@plt+0x50f0>
   163c8:	ldrb	r1, [r0, #4]
   163cc:	cmp	r1, #48	; 0x30
   163d0:	bne	163f8 <__assert_fail@plt+0x50f0>
   163d4:	ldrb	r1, [r0, #5]
   163d8:	cmp	r1, #51	; 0x33
   163dc:	bne	163f8 <__assert_fail@plt+0x50f0>
   163e0:	ldrb	r1, [r0, #6]
   163e4:	cmp	r1, #48	; 0x30
   163e8:	bne	163f8 <__assert_fail@plt+0x50f0>
   163ec:	ldrb	r0, [r0, #7]
   163f0:	cmp	r0, #0
   163f4:	beq	16414 <__assert_fail@plt+0x510c>
   163f8:	movw	r1, #40298	; 0x9d6a
   163fc:	movw	r0, #40302	; 0x9d6e
   16400:	cmp	r4, #9
   16404:	movt	r1, #1
   16408:	movt	r0, #1
   1640c:	moveq	r0, r1
   16410:	pop	{r4, r5, fp, pc}
   16414:	ldrb	r1, [r5]
   16418:	movw	r2, #40312	; 0x9d78
   1641c:	movw	r0, #40316	; 0x9d7c
   16420:	movt	r2, #1
   16424:	movt	r0, #1
   16428:	cmp	r1, #96	; 0x60
   1642c:	moveq	r0, r2
   16430:	pop	{r4, r5, fp, pc}
   16434:	push	{r4, r5, r6, r7, fp, lr}
   16438:	add	fp, sp, #16
   1643c:	mov	r4, r1
   16440:	mov	r1, #0
   16444:	mov	r6, r2
   16448:	bl	1129c <setlocale@plt>
   1644c:	cmp	r0, #0
   16450:	beq	16480 <__assert_fail@plt+0x5178>
   16454:	mov	r7, r0
   16458:	bl	111f4 <strlen@plt>
   1645c:	cmp	r0, r6
   16460:	bcs	1649c <__assert_fail@plt+0x5194>
   16464:	add	r2, r0, #1
   16468:	mov	r0, r4
   1646c:	mov	r1, r7
   16470:	bl	110bc <memcpy@plt>
   16474:	mov	r5, #0
   16478:	mov	r0, r5
   1647c:	pop	{r4, r5, r6, r7, fp, pc}
   16480:	mov	r5, #22
   16484:	cmp	r6, #0
   16488:	beq	164c4 <__assert_fail@plt+0x51bc>
   1648c:	mov	r0, #0
   16490:	strb	r0, [r4]
   16494:	mov	r0, r5
   16498:	pop	{r4, r5, r6, r7, fp, pc}
   1649c:	mov	r5, #34	; 0x22
   164a0:	cmp	r6, #0
   164a4:	beq	164c4 <__assert_fail@plt+0x51bc>
   164a8:	sub	r6, r6, #1
   164ac:	mov	r0, r4
   164b0:	mov	r1, r7
   164b4:	mov	r2, r6
   164b8:	bl	110bc <memcpy@plt>
   164bc:	mov	r0, #0
   164c0:	strb	r0, [r4, r6]
   164c4:	mov	r0, r5
   164c8:	pop	{r4, r5, r6, r7, fp, pc}
   164cc:	mov	r1, #0
   164d0:	b	1129c <setlocale@plt>
   164d4:	mov	r1, #0
   164d8:	mov	r2, #3
   164dc:	b	18920 <__assert_fail@plt+0x7618>
   164e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   164e4:	add	fp, sp, #24
   164e8:	sub	sp, sp, #32
   164ec:	ldr	r6, [fp, #12]
   164f0:	ldr	r7, [fp, #8]
   164f4:	mov	r4, r2
   164f8:	mov	r8, r0
   164fc:	cmp	r1, #0
   16500:	beq	16528 <__assert_fail@plt+0x5220>
   16504:	movw	r2, #40404	; 0x9dd4
   16508:	mov	r5, r1
   1650c:	str	r3, [sp, #4]
   16510:	str	r4, [sp]
   16514:	mov	r0, r8
   16518:	mov	r1, #1
   1651c:	movt	r2, #1
   16520:	mov	r3, r5
   16524:	b	16540 <__assert_fail@plt+0x5238>
   16528:	movw	r2, #40416	; 0x9de0
   1652c:	str	r3, [sp]
   16530:	mov	r0, r8
   16534:	mov	r1, #1
   16538:	mov	r3, r4
   1653c:	movt	r2, #1
   16540:	bl	11248 <__fprintf_chk@plt>
   16544:	movw	r1, #40423	; 0x9de7
   16548:	mov	r0, #0
   1654c:	mov	r2, #5
   16550:	movt	r1, #1
   16554:	bl	110f8 <dcgettext@plt>
   16558:	movw	r2, #41141	; 0xa0b5
   1655c:	mov	r3, r0
   16560:	movw	r0, #2022	; 0x7e6
   16564:	mov	r1, #1
   16568:	movt	r2, #1
   1656c:	str	r0, [sp]
   16570:	mov	r0, r8
   16574:	bl	11248 <__fprintf_chk@plt>
   16578:	movw	r4, #39701	; 0x9b15
   1657c:	mov	r1, r8
   16580:	movt	r4, #1
   16584:	mov	r0, r4
   16588:	bl	11068 <fputs_unlocked@plt>
   1658c:	movw	r1, #40427	; 0x9deb
   16590:	mov	r0, #0
   16594:	mov	r2, #5
   16598:	movt	r1, #1
   1659c:	bl	110f8 <dcgettext@plt>
   165a0:	movw	r3, #40598	; 0x9e96
   165a4:	mov	r2, r0
   165a8:	mov	r0, r8
   165ac:	mov	r1, #1
   165b0:	movt	r3, #1
   165b4:	bl	11248 <__fprintf_chk@plt>
   165b8:	mov	r0, r4
   165bc:	mov	r1, r8
   165c0:	bl	11068 <fputs_unlocked@plt>
   165c4:	cmp	r6, #9
   165c8:	bhi	16604 <__assert_fail@plt+0x52fc>
   165cc:	add	r0, pc, #0
   165d0:	ldr	pc, [r0, r6, lsl #2]
   165d4:	strdeq	r6, [r1], -ip
   165d8:	andeq	r6, r1, r0, lsl r6
   165dc:	andeq	r6, r1, r0, asr #12
   165e0:	andeq	r6, r1, r8, ror #12
   165e4:	muleq	r1, r0, r6
   165e8:			; <UNDEFINED> instruction: 0x000166b8
   165ec:	andeq	r6, r1, r0, ror #13
   165f0:	andeq	r6, r1, r8, lsl r7
   165f4:			; <UNDEFINED> instruction: 0x000167b8
   165f8:	andeq	r6, r1, r0, ror #14
   165fc:	sub	sp, fp, #24
   16600:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16604:	movw	r1, #40951	; 0x9ff7
   16608:	movt	r1, #1
   1660c:	b	16768 <__assert_fail@plt+0x5460>
   16610:	movw	r1, #40632	; 0x9eb8
   16614:	mov	r0, #0
   16618:	mov	r2, #5
   1661c:	movt	r1, #1
   16620:	bl	110f8 <dcgettext@plt>
   16624:	ldr	r3, [r7]
   16628:	mov	r2, r0
   1662c:	mov	r0, r8
   16630:	mov	r1, #1
   16634:	sub	sp, fp, #24
   16638:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1663c:	b	11248 <__fprintf_chk@plt>
   16640:	movw	r1, #40648	; 0x9ec8
   16644:	mov	r0, #0
   16648:	mov	r2, #5
   1664c:	movt	r1, #1
   16650:	bl	110f8 <dcgettext@plt>
   16654:	mov	r2, r0
   16658:	ldr	r3, [r7]
   1665c:	ldr	r0, [r7, #4]
   16660:	str	r0, [sp]
   16664:	b	16754 <__assert_fail@plt+0x544c>
   16668:	movw	r1, #40671	; 0x9edf
   1666c:	mov	r0, #0
   16670:	mov	r2, #5
   16674:	movt	r1, #1
   16678:	bl	110f8 <dcgettext@plt>
   1667c:	mov	r2, r0
   16680:	ldr	r3, [r7]
   16684:	ldmib	r7, {r0, r1}
   16688:	stm	sp, {r0, r1}
   1668c:	b	16754 <__assert_fail@plt+0x544c>
   16690:	movw	r1, #40699	; 0x9efb
   16694:	mov	r0, #0
   16698:	mov	r2, #5
   1669c:	movt	r1, #1
   166a0:	bl	110f8 <dcgettext@plt>
   166a4:	ldr	r3, [r7]
   166a8:	mov	r2, r0
   166ac:	ldmib	r7, {r0, r1, r7}
   166b0:	stm	sp, {r0, r1, r7}
   166b4:	b	16754 <__assert_fail@plt+0x544c>
   166b8:	movw	r1, #40731	; 0x9f1b
   166bc:	mov	r0, #0
   166c0:	mov	r2, #5
   166c4:	movt	r1, #1
   166c8:	bl	110f8 <dcgettext@plt>
   166cc:	ldr	r3, [r7]
   166d0:	mov	r2, r0
   166d4:	ldmib	r7, {r0, r1, r6, r7}
   166d8:	stm	sp, {r0, r1, r6, r7}
   166dc:	b	16754 <__assert_fail@plt+0x544c>
   166e0:	movw	r1, #40767	; 0x9f3f
   166e4:	mov	r0, #0
   166e8:	mov	r2, #5
   166ec:	movt	r1, #1
   166f0:	bl	110f8 <dcgettext@plt>
   166f4:	mov	r2, r0
   166f8:	ldr	r3, [r7]
   166fc:	ldmib	r7, {r0, r1, r6}
   16700:	ldr	r5, [r7, #16]
   16704:	ldr	r7, [r7, #20]
   16708:	stm	sp, {r0, r1, r6}
   1670c:	str	r5, [sp, #12]
   16710:	str	r7, [sp, #16]
   16714:	b	16754 <__assert_fail@plt+0x544c>
   16718:	movw	r1, #40807	; 0x9f67
   1671c:	mov	r0, #0
   16720:	mov	r2, #5
   16724:	movt	r1, #1
   16728:	bl	110f8 <dcgettext@plt>
   1672c:	mov	r2, r0
   16730:	ldr	r3, [r7]
   16734:	ldmib	r7, {r0, r1, r6}
   16738:	ldr	r5, [r7, #16]
   1673c:	ldr	r4, [r7, #20]
   16740:	ldr	r7, [r7, #24]
   16744:	stm	sp, {r0, r1, r6}
   16748:	str	r5, [sp, #12]
   1674c:	str	r4, [sp, #16]
   16750:	str	r7, [sp, #20]
   16754:	mov	r0, r8
   16758:	mov	r1, #1
   1675c:	b	16808 <__assert_fail@plt+0x5500>
   16760:	movw	r1, #40899	; 0x9fc3
   16764:	movt	r1, #1
   16768:	mov	r0, #0
   1676c:	mov	r2, #5
   16770:	bl	110f8 <dcgettext@plt>
   16774:	mov	ip, r0
   16778:	ldr	r3, [r7]
   1677c:	ldr	r0, [r7, #4]
   16780:	ldr	r1, [r7, #8]
   16784:	ldr	r6, [r7, #12]
   16788:	ldr	r5, [r7, #16]
   1678c:	ldr	r4, [r7, #20]
   16790:	ldr	r2, [r7, #24]
   16794:	ldr	lr, [r7, #28]
   16798:	ldr	r7, [r7, #32]
   1679c:	stm	sp, {r0, r1, r6}
   167a0:	str	r5, [sp, #12]
   167a4:	str	r4, [sp, #16]
   167a8:	str	r2, [sp, #20]
   167ac:	str	lr, [sp, #24]
   167b0:	str	r7, [sp, #28]
   167b4:	b	167fc <__assert_fail@plt+0x54f4>
   167b8:	movw	r1, #40851	; 0x9f93
   167bc:	mov	r0, #0
   167c0:	mov	r2, #5
   167c4:	movt	r1, #1
   167c8:	bl	110f8 <dcgettext@plt>
   167cc:	mov	ip, r0
   167d0:	ldr	r3, [r7]
   167d4:	ldmib	r7, {r0, r1, r6}
   167d8:	ldr	r5, [r7, #16]
   167dc:	ldr	r4, [r7, #20]
   167e0:	ldr	r2, [r7, #24]
   167e4:	ldr	r7, [r7, #28]
   167e8:	stm	sp, {r0, r1, r6}
   167ec:	str	r5, [sp, #12]
   167f0:	str	r4, [sp, #16]
   167f4:	str	r2, [sp, #20]
   167f8:	str	r7, [sp, #24]
   167fc:	mov	r0, r8
   16800:	mov	r1, #1
   16804:	mov	r2, ip
   16808:	bl	11248 <__fprintf_chk@plt>
   1680c:	sub	sp, fp, #24
   16810:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16814:	push	{r4, sl, fp, lr}
   16818:	add	fp, sp, #8
   1681c:	sub	sp, sp, #8
   16820:	ldr	ip, [fp, #8]
   16824:	mov	lr, #0
   16828:	ldr	r4, [ip, lr, lsl #2]
   1682c:	add	lr, lr, #1
   16830:	cmp	r4, #0
   16834:	bne	16828 <__assert_fail@plt+0x5520>
   16838:	sub	r4, lr, #1
   1683c:	str	ip, [sp]
   16840:	str	r4, [sp, #4]
   16844:	bl	164e0 <__assert_fail@plt+0x51d8>
   16848:	sub	sp, fp, #8
   1684c:	pop	{r4, sl, fp, pc}
   16850:	push	{fp, lr}
   16854:	mov	fp, sp
   16858:	sub	sp, sp, #48	; 0x30
   1685c:	ldr	ip, [fp, #8]
   16860:	ldr	lr, [ip]
   16864:	cmp	lr, #0
   16868:	str	lr, [sp, #8]
   1686c:	beq	16908 <__assert_fail@plt+0x5600>
   16870:	ldr	lr, [ip, #4]
   16874:	cmp	lr, #0
   16878:	str	lr, [sp, #12]
   1687c:	beq	16910 <__assert_fail@plt+0x5608>
   16880:	ldr	lr, [ip, #8]
   16884:	cmp	lr, #0
   16888:	str	lr, [sp, #16]
   1688c:	beq	16918 <__assert_fail@plt+0x5610>
   16890:	ldr	lr, [ip, #12]
   16894:	cmp	lr, #0
   16898:	str	lr, [sp, #20]
   1689c:	beq	16920 <__assert_fail@plt+0x5618>
   168a0:	ldr	lr, [ip, #16]
   168a4:	cmp	lr, #0
   168a8:	str	lr, [sp, #24]
   168ac:	beq	16928 <__assert_fail@plt+0x5620>
   168b0:	ldr	lr, [ip, #20]
   168b4:	cmp	lr, #0
   168b8:	str	lr, [sp, #28]
   168bc:	beq	16930 <__assert_fail@plt+0x5628>
   168c0:	ldr	lr, [ip, #24]
   168c4:	cmp	lr, #0
   168c8:	str	lr, [sp, #32]
   168cc:	beq	16938 <__assert_fail@plt+0x5630>
   168d0:	ldr	lr, [ip, #28]
   168d4:	cmp	lr, #0
   168d8:	str	lr, [sp, #36]	; 0x24
   168dc:	beq	16940 <__assert_fail@plt+0x5638>
   168e0:	ldr	lr, [ip, #32]
   168e4:	cmp	lr, #0
   168e8:	str	lr, [sp, #40]	; 0x28
   168ec:	beq	16948 <__assert_fail@plt+0x5640>
   168f0:	ldr	lr, [ip, #36]	; 0x24
   168f4:	mov	ip, #10
   168f8:	cmp	lr, #0
   168fc:	str	lr, [sp, #44]	; 0x2c
   16900:	movweq	ip, #9
   16904:	b	1694c <__assert_fail@plt+0x5644>
   16908:	mov	ip, #0
   1690c:	b	1694c <__assert_fail@plt+0x5644>
   16910:	mov	ip, #1
   16914:	b	1694c <__assert_fail@plt+0x5644>
   16918:	mov	ip, #2
   1691c:	b	1694c <__assert_fail@plt+0x5644>
   16920:	mov	ip, #3
   16924:	b	1694c <__assert_fail@plt+0x5644>
   16928:	mov	ip, #4
   1692c:	b	1694c <__assert_fail@plt+0x5644>
   16930:	mov	ip, #5
   16934:	b	1694c <__assert_fail@plt+0x5644>
   16938:	mov	ip, #6
   1693c:	b	1694c <__assert_fail@plt+0x5644>
   16940:	mov	ip, #7
   16944:	b	1694c <__assert_fail@plt+0x5644>
   16948:	mov	ip, #8
   1694c:	add	lr, sp, #8
   16950:	str	ip, [sp, #4]
   16954:	str	lr, [sp]
   16958:	bl	164e0 <__assert_fail@plt+0x51d8>
   1695c:	mov	sp, fp
   16960:	pop	{fp, pc}
   16964:	push	{fp, lr}
   16968:	mov	fp, sp
   1696c:	sub	sp, sp, #56	; 0x38
   16970:	add	ip, fp, #8
   16974:	str	ip, [sp, #12]
   16978:	ldr	lr, [fp, #8]
   1697c:	cmp	lr, #0
   16980:	str	lr, [sp, #16]
   16984:	beq	16a20 <__assert_fail@plt+0x5718>
   16988:	ldr	lr, [ip, #4]
   1698c:	cmp	lr, #0
   16990:	str	lr, [sp, #20]
   16994:	beq	16a28 <__assert_fail@plt+0x5720>
   16998:	ldr	lr, [ip, #8]
   1699c:	cmp	lr, #0
   169a0:	str	lr, [sp, #24]
   169a4:	beq	16a30 <__assert_fail@plt+0x5728>
   169a8:	ldr	lr, [ip, #12]
   169ac:	cmp	lr, #0
   169b0:	str	lr, [sp, #28]
   169b4:	beq	16a38 <__assert_fail@plt+0x5730>
   169b8:	ldr	lr, [ip, #16]
   169bc:	cmp	lr, #0
   169c0:	str	lr, [sp, #32]
   169c4:	beq	16a40 <__assert_fail@plt+0x5738>
   169c8:	ldr	lr, [ip, #20]
   169cc:	cmp	lr, #0
   169d0:	str	lr, [sp, #36]	; 0x24
   169d4:	beq	16a48 <__assert_fail@plt+0x5740>
   169d8:	ldr	lr, [ip, #24]
   169dc:	cmp	lr, #0
   169e0:	str	lr, [sp, #40]	; 0x28
   169e4:	beq	16a50 <__assert_fail@plt+0x5748>
   169e8:	ldr	lr, [ip, #28]
   169ec:	cmp	lr, #0
   169f0:	str	lr, [sp, #44]	; 0x2c
   169f4:	beq	16a58 <__assert_fail@plt+0x5750>
   169f8:	ldr	lr, [ip, #32]
   169fc:	cmp	lr, #0
   16a00:	str	lr, [sp, #48]	; 0x30
   16a04:	beq	16a60 <__assert_fail@plt+0x5758>
   16a08:	ldr	lr, [ip, #36]	; 0x24
   16a0c:	mov	ip, #10
   16a10:	cmp	lr, #0
   16a14:	str	lr, [sp, #52]	; 0x34
   16a18:	movweq	ip, #9
   16a1c:	b	16a64 <__assert_fail@plt+0x575c>
   16a20:	mov	ip, #0
   16a24:	b	16a64 <__assert_fail@plt+0x575c>
   16a28:	mov	ip, #1
   16a2c:	b	16a64 <__assert_fail@plt+0x575c>
   16a30:	mov	ip, #2
   16a34:	b	16a64 <__assert_fail@plt+0x575c>
   16a38:	mov	ip, #3
   16a3c:	b	16a64 <__assert_fail@plt+0x575c>
   16a40:	mov	ip, #4
   16a44:	b	16a64 <__assert_fail@plt+0x575c>
   16a48:	mov	ip, #5
   16a4c:	b	16a64 <__assert_fail@plt+0x575c>
   16a50:	mov	ip, #6
   16a54:	b	16a64 <__assert_fail@plt+0x575c>
   16a58:	mov	ip, #7
   16a5c:	b	16a64 <__assert_fail@plt+0x575c>
   16a60:	mov	ip, #8
   16a64:	add	lr, sp, #16
   16a68:	str	ip, [sp, #4]
   16a6c:	str	lr, [sp]
   16a70:	bl	164e0 <__assert_fail@plt+0x51d8>
   16a74:	mov	sp, fp
   16a78:	pop	{fp, pc}
   16a7c:	push	{fp, lr}
   16a80:	mov	fp, sp
   16a84:	movw	r0, #45436	; 0xb17c
   16a88:	movt	r0, #2
   16a8c:	ldr	r1, [r0]
   16a90:	movw	r0, #39701	; 0x9b15
   16a94:	movt	r0, #1
   16a98:	bl	11068 <fputs_unlocked@plt>
   16a9c:	movw	r1, #41011	; 0xa033
   16aa0:	mov	r0, #0
   16aa4:	mov	r2, #5
   16aa8:	movt	r1, #1
   16aac:	bl	110f8 <dcgettext@plt>
   16ab0:	movw	r2, #41031	; 0xa047
   16ab4:	mov	r1, r0
   16ab8:	mov	r0, #1
   16abc:	movt	r2, #1
   16ac0:	bl	11230 <__printf_chk@plt>
   16ac4:	movw	r1, #41053	; 0xa05d
   16ac8:	mov	r0, #0
   16acc:	mov	r2, #5
   16ad0:	movt	r1, #1
   16ad4:	bl	110f8 <dcgettext@plt>
   16ad8:	movw	r2, #39259	; 0x995b
   16adc:	movw	r3, #39510	; 0x9a56
   16ae0:	mov	r1, r0
   16ae4:	mov	r0, #1
   16ae8:	movt	r2, #1
   16aec:	movt	r3, #1
   16af0:	bl	11230 <__printf_chk@plt>
   16af4:	movw	r1, #41073	; 0xa071
   16af8:	mov	r0, #0
   16afc:	mov	r2, #5
   16b00:	movt	r1, #1
   16b04:	bl	110f8 <dcgettext@plt>
   16b08:	movw	r2, #41112	; 0xa098
   16b0c:	mov	r1, r0
   16b10:	mov	r0, #1
   16b14:	movt	r2, #1
   16b18:	pop	{fp, lr}
   16b1c:	b	11230 <__printf_chk@plt>
   16b20:	push	{r4, r5, r6, sl, fp, lr}
   16b24:	add	fp, sp, #16
   16b28:	mov	r4, r2
   16b2c:	mov	r5, r1
   16b30:	mov	r6, r0
   16b34:	bl	18d88 <__assert_fail@plt+0x7a80>
   16b38:	cmp	r0, #0
   16b3c:	popne	{r4, r5, r6, sl, fp, pc}
   16b40:	cmp	r6, #0
   16b44:	beq	16b58 <__assert_fail@plt+0x5850>
   16b48:	cmp	r5, #0
   16b4c:	cmpne	r4, #0
   16b50:	bne	16b58 <__assert_fail@plt+0x5850>
   16b54:	pop	{r4, r5, r6, sl, fp, pc}
   16b58:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16b5c:	push	{r4, r5, r6, sl, fp, lr}
   16b60:	add	fp, sp, #16
   16b64:	mov	r4, r2
   16b68:	mov	r5, r1
   16b6c:	mov	r6, r0
   16b70:	bl	18d88 <__assert_fail@plt+0x7a80>
   16b74:	cmp	r0, #0
   16b78:	popne	{r4, r5, r6, sl, fp, pc}
   16b7c:	cmp	r6, #0
   16b80:	beq	16b94 <__assert_fail@plt+0x588c>
   16b84:	cmp	r5, #0
   16b88:	cmpne	r4, #0
   16b8c:	bne	16b94 <__assert_fail@plt+0x588c>
   16b90:	pop	{r4, r5, r6, sl, fp, pc}
   16b94:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16b98:	push	{fp, lr}
   16b9c:	mov	fp, sp
   16ba0:	bl	18818 <__assert_fail@plt+0x7510>
   16ba4:	cmp	r0, #0
   16ba8:	popne	{fp, pc}
   16bac:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16bb0:	push	{fp, lr}
   16bb4:	mov	fp, sp
   16bb8:	bl	18818 <__assert_fail@plt+0x7510>
   16bbc:	cmp	r0, #0
   16bc0:	popne	{fp, pc}
   16bc4:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16bc8:	push	{fp, lr}
   16bcc:	mov	fp, sp
   16bd0:	bl	18818 <__assert_fail@plt+0x7510>
   16bd4:	cmp	r0, #0
   16bd8:	popne	{fp, pc}
   16bdc:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16be0:	push	{r4, r5, fp, lr}
   16be4:	add	fp, sp, #8
   16be8:	mov	r4, r1
   16bec:	mov	r5, r0
   16bf0:	bl	18848 <__assert_fail@plt+0x7540>
   16bf4:	cmp	r0, #0
   16bf8:	popne	{r4, r5, fp, pc}
   16bfc:	cmp	r5, #0
   16c00:	beq	16c10 <__assert_fail@plt+0x5908>
   16c04:	cmp	r4, #0
   16c08:	bne	16c10 <__assert_fail@plt+0x5908>
   16c0c:	pop	{r4, r5, fp, pc}
   16c10:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16c14:	push	{fp, lr}
   16c18:	mov	fp, sp
   16c1c:	cmp	r1, #0
   16c20:	orreq	r1, r1, #1
   16c24:	bl	18848 <__assert_fail@plt+0x7540>
   16c28:	cmp	r0, #0
   16c2c:	popne	{fp, pc}
   16c30:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16c34:	push	{fp, lr}
   16c38:	mov	fp, sp
   16c3c:	clz	r3, r2
   16c40:	lsr	ip, r3, #5
   16c44:	clz	r3, r1
   16c48:	lsr	r3, r3, #5
   16c4c:	orrs	r3, r3, ip
   16c50:	movwne	r1, #1
   16c54:	movwne	r2, #1
   16c58:	bl	18d88 <__assert_fail@plt+0x7a80>
   16c5c:	cmp	r0, #0
   16c60:	popne	{fp, pc}
   16c64:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16c68:	push	{fp, lr}
   16c6c:	mov	fp, sp
   16c70:	mov	r2, r1
   16c74:	mov	r1, r0
   16c78:	mov	r0, #0
   16c7c:	bl	18d88 <__assert_fail@plt+0x7a80>
   16c80:	cmp	r0, #0
   16c84:	popne	{fp, pc}
   16c88:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16c8c:	push	{fp, lr}
   16c90:	mov	fp, sp
   16c94:	mov	r2, r1
   16c98:	mov	r1, r0
   16c9c:	clz	r0, r2
   16ca0:	clz	r3, r1
   16ca4:	lsr	r0, r0, #5
   16ca8:	lsr	r3, r3, #5
   16cac:	orrs	r0, r3, r0
   16cb0:	mov	r0, #0
   16cb4:	movwne	r1, #1
   16cb8:	movwne	r2, #1
   16cbc:	bl	18d88 <__assert_fail@plt+0x7a80>
   16cc0:	cmp	r0, #0
   16cc4:	popne	{fp, pc}
   16cc8:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16ccc:	push	{r4, r5, r6, sl, fp, lr}
   16cd0:	add	fp, sp, #16
   16cd4:	ldr	r5, [r1]
   16cd8:	mov	r4, r1
   16cdc:	mov	r6, r0
   16ce0:	cmp	r0, #0
   16ce4:	beq	16cfc <__assert_fail@plt+0x59f4>
   16ce8:	mov	r0, #1
   16cec:	add	r0, r0, r5, lsr #1
   16cf0:	adds	r5, r5, r0
   16cf4:	bcc	16d04 <__assert_fail@plt+0x59fc>
   16cf8:	b	16d40 <__assert_fail@plt+0x5a38>
   16cfc:	cmp	r5, #0
   16d00:	movweq	r5, #64	; 0x40
   16d04:	mov	r0, r6
   16d08:	mov	r1, r5
   16d0c:	mov	r2, #1
   16d10:	bl	18d88 <__assert_fail@plt+0x7a80>
   16d14:	cmp	r5, #0
   16d18:	mov	r1, r5
   16d1c:	movwne	r1, #1
   16d20:	cmp	r0, #0
   16d24:	bne	16d38 <__assert_fail@plt+0x5a30>
   16d28:	clz	r2, r6
   16d2c:	lsr	r2, r2, #5
   16d30:	orrs	r1, r2, r1
   16d34:	bne	16d40 <__assert_fail@plt+0x5a38>
   16d38:	str	r5, [r4]
   16d3c:	pop	{r4, r5, r6, sl, fp, pc}
   16d40:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16d44:	push	{r4, r5, r6, r7, fp, lr}
   16d48:	add	fp, sp, #16
   16d4c:	ldr	r5, [r1]
   16d50:	mov	r6, r2
   16d54:	mov	r4, r1
   16d58:	mov	r7, r0
   16d5c:	cmp	r0, #0
   16d60:	beq	16d78 <__assert_fail@plt+0x5a70>
   16d64:	mov	r0, #1
   16d68:	add	r0, r0, r5, lsr #1
   16d6c:	adds	r5, r5, r0
   16d70:	bcc	16d90 <__assert_fail@plt+0x5a88>
   16d74:	b	16dc4 <__assert_fail@plt+0x5abc>
   16d78:	cmp	r5, #0
   16d7c:	bne	16d90 <__assert_fail@plt+0x5a88>
   16d80:	mov	r0, #64	; 0x40
   16d84:	cmp	r6, #64	; 0x40
   16d88:	udiv	r5, r0, r6
   16d8c:	addhi	r5, r5, #1
   16d90:	mov	r0, r7
   16d94:	mov	r1, r5
   16d98:	mov	r2, r6
   16d9c:	bl	18d88 <__assert_fail@plt+0x7a80>
   16da0:	cmp	r0, #0
   16da4:	bne	16dbc <__assert_fail@plt+0x5ab4>
   16da8:	cmp	r7, #0
   16dac:	beq	16dc4 <__assert_fail@plt+0x5abc>
   16db0:	cmp	r6, #0
   16db4:	cmpne	r5, #0
   16db8:	bne	16dc4 <__assert_fail@plt+0x5abc>
   16dbc:	str	r5, [r4]
   16dc0:	pop	{r4, r5, r6, r7, fp, pc}
   16dc4:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16dc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16dcc:	add	fp, sp, #24
   16dd0:	mov	r8, r1
   16dd4:	ldr	r1, [r1]
   16dd8:	mov	r5, r0
   16ddc:	add	r0, r1, r1, asr #1
   16de0:	cmp	r0, r1
   16de4:	mvnvs	r0, #-2147483648	; 0x80000000
   16de8:	cmp	r0, r3
   16dec:	mov	r7, r0
   16df0:	movgt	r7, r3
   16df4:	cmn	r3, #1
   16df8:	movle	r7, r0
   16dfc:	ldr	r0, [fp, #8]
   16e00:	cmn	r0, #1
   16e04:	ble	16e2c <__assert_fail@plt+0x5b24>
   16e08:	cmp	r0, #0
   16e0c:	beq	16e80 <__assert_fail@plt+0x5b78>
   16e10:	cmn	r7, #1
   16e14:	ble	16e54 <__assert_fail@plt+0x5b4c>
   16e18:	mvn	r4, #-2147483648	; 0x80000000
   16e1c:	udiv	r6, r4, r0
   16e20:	cmp	r6, r7
   16e24:	bge	16e80 <__assert_fail@plt+0x5b78>
   16e28:	b	16e90 <__assert_fail@plt+0x5b88>
   16e2c:	cmn	r7, #1
   16e30:	ble	16e70 <__assert_fail@plt+0x5b68>
   16e34:	cmn	r0, #1
   16e38:	beq	16e80 <__assert_fail@plt+0x5b78>
   16e3c:	mov	r6, #-2147483648	; 0x80000000
   16e40:	mvn	r4, #-2147483648	; 0x80000000
   16e44:	sdiv	r6, r6, r0
   16e48:	cmp	r6, r7
   16e4c:	bge	16e80 <__assert_fail@plt+0x5b78>
   16e50:	b	16e90 <__assert_fail@plt+0x5b88>
   16e54:	beq	16e80 <__assert_fail@plt+0x5b78>
   16e58:	mov	r6, #-2147483648	; 0x80000000
   16e5c:	mvn	r4, #-2147483648	; 0x80000000
   16e60:	sdiv	r6, r6, r7
   16e64:	cmp	r6, r0
   16e68:	bge	16e80 <__assert_fail@plt+0x5b78>
   16e6c:	b	16e90 <__assert_fail@plt+0x5b88>
   16e70:	mvn	r4, #-2147483648	; 0x80000000
   16e74:	sdiv	r6, r4, r0
   16e78:	cmp	r7, r6
   16e7c:	blt	16e90 <__assert_fail@plt+0x5b88>
   16e80:	mul	r6, r7, r0
   16e84:	mov	r4, #64	; 0x40
   16e88:	cmp	r6, #63	; 0x3f
   16e8c:	bgt	16e98 <__assert_fail@plt+0x5b90>
   16e90:	sdiv	r7, r4, r0
   16e94:	mul	r6, r7, r0
   16e98:	cmp	r5, #0
   16e9c:	moveq	r4, #0
   16ea0:	streq	r4, [r8]
   16ea4:	sub	r4, r7, r1
   16ea8:	cmp	r4, r2
   16eac:	bge	16f58 <__assert_fail@plt+0x5c50>
   16eb0:	add	r7, r1, r2
   16eb4:	mov	r6, #0
   16eb8:	mov	r2, #0
   16ebc:	cmp	r7, r3
   16ec0:	movwgt	r6, #1
   16ec4:	cmn	r3, #1
   16ec8:	movwgt	r2, #1
   16ecc:	cmp	r7, r1
   16ed0:	bvs	16f8c <__assert_fail@plt+0x5c84>
   16ed4:	ands	r1, r2, r6
   16ed8:	bne	16f8c <__assert_fail@plt+0x5c84>
   16edc:	cmn	r0, #1
   16ee0:	ble	16f08 <__assert_fail@plt+0x5c00>
   16ee4:	cmp	r0, #0
   16ee8:	beq	16f54 <__assert_fail@plt+0x5c4c>
   16eec:	cmn	r7, #1
   16ef0:	ble	16f2c <__assert_fail@plt+0x5c24>
   16ef4:	mvn	r1, #-2147483648	; 0x80000000
   16ef8:	udiv	r1, r1, r0
   16efc:	cmp	r1, r7
   16f00:	bge	16f54 <__assert_fail@plt+0x5c4c>
   16f04:	b	16f8c <__assert_fail@plt+0x5c84>
   16f08:	cmn	r7, #1
   16f0c:	ble	16f44 <__assert_fail@plt+0x5c3c>
   16f10:	cmn	r0, #1
   16f14:	beq	16f54 <__assert_fail@plt+0x5c4c>
   16f18:	mov	r1, #-2147483648	; 0x80000000
   16f1c:	sdiv	r1, r1, r0
   16f20:	cmp	r1, r7
   16f24:	bge	16f54 <__assert_fail@plt+0x5c4c>
   16f28:	b	16f8c <__assert_fail@plt+0x5c84>
   16f2c:	beq	16f54 <__assert_fail@plt+0x5c4c>
   16f30:	mov	r1, #-2147483648	; 0x80000000
   16f34:	sdiv	r1, r1, r7
   16f38:	cmp	r1, r0
   16f3c:	bge	16f54 <__assert_fail@plt+0x5c4c>
   16f40:	b	16f8c <__assert_fail@plt+0x5c84>
   16f44:	mvn	r1, #-2147483648	; 0x80000000
   16f48:	sdiv	r1, r1, r0
   16f4c:	cmp	r7, r1
   16f50:	blt	16f8c <__assert_fail@plt+0x5c84>
   16f54:	mul	r6, r7, r0
   16f58:	mov	r0, r5
   16f5c:	mov	r1, r6
   16f60:	bl	18848 <__assert_fail@plt+0x7540>
   16f64:	cmp	r6, #0
   16f68:	movwne	r6, #1
   16f6c:	cmp	r0, #0
   16f70:	bne	16f84 <__assert_fail@plt+0x5c7c>
   16f74:	clz	r1, r5
   16f78:	lsr	r1, r1, #5
   16f7c:	orrs	r1, r1, r6
   16f80:	bne	16f8c <__assert_fail@plt+0x5c84>
   16f84:	str	r7, [r8]
   16f88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16f8c:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16f90:	push	{fp, lr}
   16f94:	mov	fp, sp
   16f98:	mov	r1, #1
   16f9c:	bl	187c4 <__assert_fail@plt+0x74bc>
   16fa0:	cmp	r0, #0
   16fa4:	popne	{fp, pc}
   16fa8:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16fac:	push	{fp, lr}
   16fb0:	mov	fp, sp
   16fb4:	bl	187c4 <__assert_fail@plt+0x74bc>
   16fb8:	cmp	r0, #0
   16fbc:	popne	{fp, pc}
   16fc0:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16fc4:	push	{fp, lr}
   16fc8:	mov	fp, sp
   16fcc:	mov	r1, #1
   16fd0:	bl	187c4 <__assert_fail@plt+0x74bc>
   16fd4:	cmp	r0, #0
   16fd8:	popne	{fp, pc}
   16fdc:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16fe0:	push	{fp, lr}
   16fe4:	mov	fp, sp
   16fe8:	bl	187c4 <__assert_fail@plt+0x74bc>
   16fec:	cmp	r0, #0
   16ff0:	popne	{fp, pc}
   16ff4:	bl	170d4 <__assert_fail@plt+0x5dcc>
   16ff8:	push	{r4, r5, fp, lr}
   16ffc:	add	fp, sp, #8
   17000:	mov	r5, r0
   17004:	mov	r0, r1
   17008:	mov	r4, r1
   1700c:	bl	18818 <__assert_fail@plt+0x7510>
   17010:	cmp	r0, #0
   17014:	beq	17028 <__assert_fail@plt+0x5d20>
   17018:	mov	r1, r5
   1701c:	mov	r2, r4
   17020:	pop	{r4, r5, fp, lr}
   17024:	b	110bc <memcpy@plt>
   17028:	bl	170d4 <__assert_fail@plt+0x5dcc>
   1702c:	push	{r4, r5, fp, lr}
   17030:	add	fp, sp, #8
   17034:	mov	r5, r0
   17038:	mov	r0, r1
   1703c:	mov	r4, r1
   17040:	bl	18818 <__assert_fail@plt+0x7510>
   17044:	cmp	r0, #0
   17048:	beq	1705c <__assert_fail@plt+0x5d54>
   1704c:	mov	r1, r5
   17050:	mov	r2, r4
   17054:	pop	{r4, r5, fp, lr}
   17058:	b	110bc <memcpy@plt>
   1705c:	bl	170d4 <__assert_fail@plt+0x5dcc>
   17060:	push	{r4, r5, fp, lr}
   17064:	add	fp, sp, #8
   17068:	mov	r5, r0
   1706c:	add	r0, r1, #1
   17070:	mov	r4, r1
   17074:	bl	18818 <__assert_fail@plt+0x7510>
   17078:	cmp	r0, #0
   1707c:	beq	17098 <__assert_fail@plt+0x5d90>
   17080:	mov	r1, #0
   17084:	mov	r2, r4
   17088:	strb	r1, [r0, r4]
   1708c:	mov	r1, r5
   17090:	pop	{r4, r5, fp, lr}
   17094:	b	110bc <memcpy@plt>
   17098:	bl	170d4 <__assert_fail@plt+0x5dcc>
   1709c:	push	{r4, r5, fp, lr}
   170a0:	add	fp, sp, #8
   170a4:	mov	r4, r0
   170a8:	bl	111f4 <strlen@plt>
   170ac:	add	r5, r0, #1
   170b0:	mov	r0, r5
   170b4:	bl	18818 <__assert_fail@plt+0x7510>
   170b8:	cmp	r0, #0
   170bc:	beq	170d0 <__assert_fail@plt+0x5dc8>
   170c0:	mov	r1, r4
   170c4:	mov	r2, r5
   170c8:	pop	{r4, r5, fp, lr}
   170cc:	b	110bc <memcpy@plt>
   170d0:	bl	170d4 <__assert_fail@plt+0x5dcc>
   170d4:	push	{fp, lr}
   170d8:	mov	fp, sp
   170dc:	movw	r0, #45340	; 0xb11c
   170e0:	movw	r1, #41188	; 0xa0e4
   170e4:	mov	r2, #5
   170e8:	movt	r0, #2
   170ec:	movt	r1, #1
   170f0:	ldr	r4, [r0]
   170f4:	mov	r0, #0
   170f8:	bl	110f8 <dcgettext@plt>
   170fc:	movw	r2, #39866	; 0x9bba
   17100:	mov	r3, r0
   17104:	mov	r0, r4
   17108:	mov	r1, #0
   1710c:	movt	r2, #1
   17110:	bl	11164 <error@plt>
   17114:	bl	112f0 <abort@plt>
   17118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1711c:	add	fp, sp, #28
   17120:	sub	sp, sp, #4
   17124:	mov	r9, r3
   17128:	mov	r6, r2
   1712c:	mov	r7, r1
   17130:	mov	r4, r0
   17134:	bl	18b9c <__assert_fail@plt+0x7894>
   17138:	mov	r8, r0
   1713c:	bl	1120c <__errno_location@plt>
   17140:	ldr	r5, [r0]
   17144:	cmp	r5, #0
   17148:	beq	171fc <__assert_fail@plt+0x5ef4>
   1714c:	movw	r1, #41205	; 0xa0f5
   17150:	mov	r0, #0
   17154:	mov	r2, #5
   17158:	movt	r1, #1
   1715c:	bl	110f8 <dcgettext@plt>
   17160:	mov	r2, r0
   17164:	mov	r0, #0
   17168:	mov	r1, r5
   1716c:	bl	11164 <error@plt>
   17170:	movw	r1, #41230	; 0xa10e
   17174:	mov	r0, #0
   17178:	mov	r2, #5
   1717c:	movt	r1, #1
   17180:	bl	110f8 <dcgettext@plt>
   17184:	mov	r2, r0
   17188:	mov	r0, #0
   1718c:	mov	r1, #0
   17190:	bl	11164 <error@plt>
   17194:	movw	r0, #45340	; 0xb11c
   17198:	movw	r1, #41273	; 0xa139
   1719c:	mov	r2, #5
   171a0:	movt	r0, #2
   171a4:	movt	r1, #1
   171a8:	ldr	sl, [r0]
   171ac:	mov	r0, #0
   171b0:	bl	110f8 <dcgettext@plt>
   171b4:	mov	r5, r0
   171b8:	mov	r0, #0
   171bc:	mov	r1, #8
   171c0:	mov	r2, r4
   171c4:	mov	r3, r7
   171c8:	bl	15d6c <__assert_fail@plt+0x4a64>
   171cc:	mov	r4, r0
   171d0:	mov	r0, #1
   171d4:	mov	r1, #8
   171d8:	mov	r2, r6
   171dc:	mov	r3, r9
   171e0:	bl	15d6c <__assert_fail@plt+0x4a64>
   171e4:	str	r0, [sp]
   171e8:	mov	r0, sl
   171ec:	mov	r1, #0
   171f0:	mov	r2, r5
   171f4:	mov	r3, r4
   171f8:	bl	11164 <error@plt>
   171fc:	mov	r0, r8
   17200:	sub	sp, fp, #28
   17204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1720c:	add	fp, sp, #28
   17210:	sub	sp, sp, #4
   17214:	mov	r6, r3
   17218:	mov	r9, r2
   1721c:	mov	r4, r1
   17220:	mov	r7, r0
   17224:	bl	18cb8 <__assert_fail@plt+0x79b0>
   17228:	mov	r8, r0
   1722c:	bl	1120c <__errno_location@plt>
   17230:	ldr	r5, [r0]
   17234:	cmp	r5, #0
   17238:	beq	172ec <__assert_fail@plt+0x5fe4>
   1723c:	movw	r1, #41205	; 0xa0f5
   17240:	mov	r0, #0
   17244:	mov	r2, #5
   17248:	movt	r1, #1
   1724c:	bl	110f8 <dcgettext@plt>
   17250:	mov	r2, r0
   17254:	mov	r0, #0
   17258:	mov	r1, r5
   1725c:	bl	11164 <error@plt>
   17260:	movw	r1, #41230	; 0xa10e
   17264:	mov	r0, #0
   17268:	mov	r2, #5
   1726c:	movt	r1, #1
   17270:	bl	110f8 <dcgettext@plt>
   17274:	mov	r2, r0
   17278:	mov	r0, #0
   1727c:	mov	r1, #0
   17280:	bl	11164 <error@plt>
   17284:	movw	r0, #45340	; 0xb11c
   17288:	movw	r1, #41273	; 0xa139
   1728c:	mov	r2, #5
   17290:	movt	r0, #2
   17294:	movt	r1, #1
   17298:	ldr	sl, [r0]
   1729c:	mov	r0, #0
   172a0:	bl	110f8 <dcgettext@plt>
   172a4:	mov	r5, r0
   172a8:	sub	r3, r4, #1
   172ac:	mov	r0, #0
   172b0:	mov	r1, #8
   172b4:	mov	r2, r7
   172b8:	bl	15d6c <__assert_fail@plt+0x4a64>
   172bc:	mov	r4, r0
   172c0:	sub	r3, r6, #1
   172c4:	mov	r0, #1
   172c8:	mov	r1, #8
   172cc:	mov	r2, r9
   172d0:	bl	15d6c <__assert_fail@plt+0x4a64>
   172d4:	str	r0, [sp]
   172d8:	mov	r0, sl
   172dc:	mov	r1, #0
   172e0:	mov	r2, r5
   172e4:	mov	r3, r4
   172e8:	bl	11164 <error@plt>
   172ec:	mov	r0, r8
   172f0:	sub	sp, fp, #28
   172f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172fc:	add	fp, sp, #28
   17300:	sub	sp, sp, #20
   17304:	cmp	r2, #37	; 0x25
   17308:	bcs	17b04 <__assert_fail@plt+0x67fc>
   1730c:	ldr	r9, [fp, #8]
   17310:	mov	r5, r2
   17314:	mov	r4, r1
   17318:	mov	r7, r0
   1731c:	str	r3, [sp, #12]
   17320:	bl	1120c <__errno_location@plt>
   17324:	mov	r8, r0
   17328:	mov	r0, #0
   1732c:	str	r0, [r8]
   17330:	bl	111c4 <__ctype_b_loc@plt>
   17334:	ldr	r1, [r0]
   17338:	mov	r2, r7
   1733c:	ldrb	r0, [r2], #1
   17340:	add	r3, r1, r0, lsl #1
   17344:	ldrb	r3, [r3, #1]
   17348:	tst	r3, #32
   1734c:	bne	1733c <__assert_fail@plt+0x6034>
   17350:	cmp	r4, #0
   17354:	add	r6, sp, #16
   17358:	mov	sl, #4
   1735c:	movne	r6, r4
   17360:	cmp	r0, #45	; 0x2d
   17364:	beq	179c4 <__assert_fail@plt+0x66bc>
   17368:	mov	r0, r7
   1736c:	mov	r1, r6
   17370:	mov	r2, r5
   17374:	bl	111e8 <strtoul@plt>
   17378:	ldr	r5, [r6]
   1737c:	cmp	r5, r7
   17380:	beq	173ac <__assert_fail@plt+0x60a4>
   17384:	mov	r4, r0
   17388:	ldr	r0, [r8]
   1738c:	cmp	r0, #0
   17390:	beq	173dc <__assert_fail@plt+0x60d4>
   17394:	cmp	r0, #34	; 0x22
   17398:	bne	179c4 <__assert_fail@plt+0x66bc>
   1739c:	mov	sl, #1
   173a0:	cmp	r9, #0
   173a4:	bne	173e8 <__assert_fail@plt+0x60e0>
   173a8:	b	179bc <__assert_fail@plt+0x66b4>
   173ac:	cmp	r9, #0
   173b0:	beq	179c4 <__assert_fail@plt+0x66bc>
   173b4:	ldrb	r1, [r7]
   173b8:	cmp	r1, #0
   173bc:	beq	179c4 <__assert_fail@plt+0x66bc>
   173c0:	mov	r0, r9
   173c4:	bl	11200 <strchr@plt>
   173c8:	cmp	r0, #0
   173cc:	beq	179c4 <__assert_fail@plt+0x66bc>
   173d0:	mov	r4, #1
   173d4:	mov	sl, #0
   173d8:	b	173e8 <__assert_fail@plt+0x60e0>
   173dc:	mov	sl, r0
   173e0:	cmp	r9, #0
   173e4:	beq	179bc <__assert_fail@plt+0x66b4>
   173e8:	ldrb	r7, [r5]
   173ec:	cmp	r7, #0
   173f0:	beq	179bc <__assert_fail@plt+0x66b4>
   173f4:	mov	r0, r9
   173f8:	mov	r1, r7
   173fc:	bl	11200 <strchr@plt>
   17400:	cmp	r0, #0
   17404:	beq	17680 <__assert_fail@plt+0x6378>
   17408:	sub	r0, r7, #69	; 0x45
   1740c:	mov	lr, #1
   17410:	mov	r8, #1024	; 0x400
   17414:	cmp	r0, #47	; 0x2f
   17418:	bhi	17534 <__assert_fail@plt+0x622c>
   1741c:	add	r1, pc, #0
   17420:	ldr	pc, [r1, r0, lsl #2]
   17424:	andeq	r7, r1, r4, ror #9
   17428:	andeq	r7, r1, r4, lsr r5
   1742c:	andeq	r7, r1, r4, ror #9
   17430:	andeq	r7, r1, r4, lsr r5
   17434:	andeq	r7, r1, r4, lsr r5
   17438:	andeq	r7, r1, r4, lsr r5
   1743c:	andeq	r7, r1, r4, ror #9
   17440:	andeq	r7, r1, r4, lsr r5
   17444:	andeq	r7, r1, r4, ror #9
   17448:	andeq	r7, r1, r4, lsr r5
   1744c:	andeq	r7, r1, r4, lsr r5
   17450:	andeq	r7, r1, r4, ror #9
   17454:	andeq	r7, r1, r4, lsr r5
   17458:	andeq	r7, r1, r4, lsr r5
   1745c:	andeq	r7, r1, r4, lsr r5
   17460:	andeq	r7, r1, r4, ror #9
   17464:	andeq	r7, r1, r4, lsr r5
   17468:	andeq	r7, r1, r4, lsr r5
   1746c:	andeq	r7, r1, r4, lsr r5
   17470:	andeq	r7, r1, r4, lsr r5
   17474:	andeq	r7, r1, r4, ror #9
   17478:	andeq	r7, r1, r4, ror #9
   1747c:	andeq	r7, r1, r4, lsr r5
   17480:	andeq	r7, r1, r4, lsr r5
   17484:	andeq	r7, r1, r4, lsr r5
   17488:	andeq	r7, r1, r4, lsr r5
   1748c:	andeq	r7, r1, r4, lsr r5
   17490:	andeq	r7, r1, r4, lsr r5
   17494:	andeq	r7, r1, r4, lsr r5
   17498:	andeq	r7, r1, r4, lsr r5
   1749c:	andeq	r7, r1, r4, lsr r5
   174a0:	andeq	r7, r1, r4, lsr r5
   174a4:	andeq	r7, r1, r4, lsr r5
   174a8:	andeq	r7, r1, r4, lsr r5
   174ac:	andeq	r7, r1, r4, ror #9
   174b0:	andeq	r7, r1, r4, lsr r5
   174b4:	andeq	r7, r1, r4, lsr r5
   174b8:	andeq	r7, r1, r4, lsr r5
   174bc:	andeq	r7, r1, r4, ror #9
   174c0:	andeq	r7, r1, r4, lsr r5
   174c4:	andeq	r7, r1, r4, ror #9
   174c8:	andeq	r7, r1, r4, lsr r5
   174cc:	andeq	r7, r1, r4, lsr r5
   174d0:	andeq	r7, r1, r4, lsr r5
   174d4:	andeq	r7, r1, r4, lsr r5
   174d8:	andeq	r7, r1, r4, lsr r5
   174dc:	andeq	r7, r1, r4, lsr r5
   174e0:	andeq	r7, r1, r4, ror #9
   174e4:	mov	r0, r9
   174e8:	mov	r1, #48	; 0x30
   174ec:	bl	11200 <strchr@plt>
   174f0:	cmp	r0, #0
   174f4:	beq	17530 <__assert_fail@plt+0x6228>
   174f8:	ldrb	r0, [r5, #1]
   174fc:	cmp	r0, #66	; 0x42
   17500:	cmpne	r0, #68	; 0x44
   17504:	bne	17514 <__assert_fail@plt+0x620c>
   17508:	mov	lr, #2
   1750c:	mov	r8, #1000	; 0x3e8
   17510:	b	17534 <__assert_fail@plt+0x622c>
   17514:	cmp	r0, #105	; 0x69
   17518:	bne	17530 <__assert_fail@plt+0x6228>
   1751c:	ldrb	r0, [r5, #2]
   17520:	mov	lr, #1
   17524:	cmp	r0, #66	; 0x42
   17528:	movweq	lr, #3
   1752c:	b	17534 <__assert_fail@plt+0x622c>
   17530:	mov	lr, #1
   17534:	sub	r1, r7, #66	; 0x42
   17538:	cmp	r1, #53	; 0x35
   1753c:	bhi	17680 <__assert_fail@plt+0x6378>
   17540:	add	r2, pc, #4
   17544:	mov	r0, #0
   17548:	ldr	pc, [r2, r1, lsl #2]
   1754c:	andeq	r7, r1, r8, lsr r8
   17550:	andeq	r7, r1, r0, lsl #13
   17554:	andeq	r7, r1, r0, lsl #13
   17558:	andeq	r7, r1, r4, asr r8
   1755c:	andeq	r7, r1, r0, lsl #13
   17560:	andeq	r7, r1, r4, lsr #12
   17564:	andeq	r7, r1, r0, lsl #13
   17568:	andeq	r7, r1, r0, lsl #13
   1756c:	andeq	r7, r1, r0, lsl #13
   17570:	andeq	r7, r1, ip, lsl #13
   17574:	andeq	r7, r1, r0, lsl #13
   17578:			; <UNDEFINED> instruction: 0x000176b0
   1757c:	andeq	r7, r1, r0, lsl #13
   17580:	andeq	r7, r1, r0, lsl #13
   17584:	andeq	r7, r1, ip, lsl #18
   17588:	andeq	r7, r1, r0, lsl #13
   1758c:	andeq	r7, r1, r0, lsl #13
   17590:	andeq	r7, r1, r0, lsl #13
   17594:	strdeq	r7, [r1], -r0
   17598:	andeq	r7, r1, r0, lsl #13
   1759c:	andeq	r7, r1, r0, lsl #13
   175a0:	andeq	r7, r1, r0, lsl #13
   175a4:	andeq	r7, r1, r0, lsl #13
   175a8:	ldrdeq	r7, [r1], -r0
   175ac:	andeq	r7, r1, r4, ror #14
   175b0:	andeq	r7, r1, r0, lsl #13
   175b4:	andeq	r7, r1, r0, lsl #13
   175b8:	andeq	r7, r1, r0, lsl #13
   175bc:	andeq	r7, r1, r0, lsl #13
   175c0:	andeq	r7, r1, r0, lsl #13
   175c4:	andeq	r7, r1, r0, lsl #13
   175c8:	andeq	r7, r1, r0, lsl #13
   175cc:	andeq	r7, r1, r8, asr #21
   175d0:	andeq	r7, r1, r4, lsr #19
   175d4:	andeq	r7, r1, r0, lsl #13
   175d8:	andeq	r7, r1, r0, lsl #13
   175dc:	andeq	r7, r1, r0, lsl #13
   175e0:	andeq	r7, r1, r4, lsr #12
   175e4:	andeq	r7, r1, r0, lsl #13
   175e8:	andeq	r7, r1, r0, lsl #13
   175ec:	andeq	r7, r1, r0, lsl #13
   175f0:	andeq	r7, r1, ip, lsl #13
   175f4:	andeq	r7, r1, r0, lsl #13
   175f8:			; <UNDEFINED> instruction: 0x000176b0
   175fc:	andeq	r7, r1, r0, lsl #13
   17600:	andeq	r7, r1, r0, lsl #13
   17604:	andeq	r7, r1, r0, lsl #13
   17608:	andeq	r7, r1, r0, lsl #13
   1760c:	andeq	r7, r1, r0, lsl #13
   17610:	andeq	r7, r1, r0, lsl #13
   17614:	strdeq	r7, [r1], -r0
   17618:	andeq	r7, r1, r0, lsl #13
   1761c:	andeq	r7, r1, r0, lsl #13
   17620:	andeq	r7, r1, ip, ror #21
   17624:	mvn	r0, #0
   17628:	mul	r1, r4, r8
   1762c:	mov	r7, #0
   17630:	udiv	r0, r0, r8
   17634:	cmp	r0, r4
   17638:	mvncc	r1, #0
   1763c:	cmp	r0, r1
   17640:	mul	r2, r1, r8
   17644:	mvncc	r2, #0
   17648:	cmp	r0, r2
   1764c:	mul	r3, r2, r8
   17650:	mov	r2, #0
   17654:	mvncc	r3, #0
   17658:	movwcc	r7, #1
   1765c:	cmp	r0, r1
   17660:	mov	r1, #0
   17664:	movwcc	r1, #1
   17668:	cmp	r0, r4
   1766c:	mov	r4, r3
   17670:	movwcc	r2, #1
   17674:	orr	r0, r2, r1
   17678:	orr	r0, r0, r7
   1767c:	b	179a4 <__assert_fail@plt+0x669c>
   17680:	ldr	r0, [sp, #12]
   17684:	orr	sl, sl, #2
   17688:	b	179c0 <__assert_fail@plt+0x66b8>
   1768c:	mvn	r0, #0
   17690:	mul	r1, r4, r8
   17694:	udiv	r0, r0, r8
   17698:	cmp	r0, r4
   1769c:	mov	r0, #0
   176a0:	mvncc	r1, #0
   176a4:	movwcc	r0, #1
   176a8:	mov	r4, r1
   176ac:	b	179a4 <__assert_fail@plt+0x669c>
   176b0:	mvn	r0, #0
   176b4:	mul	r1, r4, r8
   176b8:	mov	r3, #0
   176bc:	udiv	r0, r0, r8
   176c0:	cmp	r0, r4
   176c4:	mvncc	r1, #0
   176c8:	cmp	r0, r1
   176cc:	mul	r2, r1, r8
   176d0:	mov	r1, #0
   176d4:	mvncc	r2, #0
   176d8:	movwcc	r3, #1
   176dc:	cmp	r0, r4
   176e0:	movwcc	r1, #1
   176e4:	mov	r4, r2
   176e8:	orr	r0, r1, r3
   176ec:	b	179a4 <__assert_fail@plt+0x669c>
   176f0:	mvn	r0, #0
   176f4:	mul	r1, r4, r8
   176f8:	mov	r7, #0
   176fc:	udiv	r0, r0, r8
   17700:	cmp	r0, r4
   17704:	mvncc	r1, #0
   17708:	cmp	r0, r1
   1770c:	mul	r2, r1, r8
   17710:	mvncc	r2, #0
   17714:	cmp	r0, r2
   17718:	mul	r3, r2, r8
   1771c:	mvncc	r3, #0
   17720:	cmp	r0, r3
   17724:	mul	ip, r3, r8
   17728:	mov	r3, #0
   1772c:	mvncc	ip, #0
   17730:	movwcc	r7, #1
   17734:	cmp	r0, r2
   17738:	mov	r2, #0
   1773c:	movwcc	r2, #1
   17740:	cmp	r0, r1
   17744:	mov	r1, #0
   17748:	movwcc	r1, #1
   1774c:	cmp	r0, r4
   17750:	movwcc	r3, #1
   17754:	orr	r0, r3, r1
   17758:	orr	r0, r0, r2
   1775c:	orr	r0, r0, r7
   17760:	b	179a0 <__assert_fail@plt+0x6698>
   17764:	mvn	r0, #0
   17768:	str	lr, [sp, #8]
   1776c:	mul	lr, r4, r8
   17770:	udiv	r0, r0, r8
   17774:	cmp	r0, r4
   17778:	mvncc	lr, #0
   1777c:	cmp	r0, lr
   17780:	mul	r9, lr, r8
   17784:	mvncc	r9, #0
   17788:	cmp	r0, r9
   1778c:	mul	r7, r9, r8
   17790:	mvncc	r7, #0
   17794:	cmp	r0, r7
   17798:	mul	r3, r7, r8
   1779c:	mvncc	r3, #0
   177a0:	cmp	r0, r3
   177a4:	mul	r1, r3, r8
   177a8:	mvncc	r1, #0
   177ac:	cmp	r0, r1
   177b0:	mul	r2, r1, r8
   177b4:	mvncc	r2, #0
   177b8:	cmp	r0, r2
   177bc:	mul	ip, r2, r8
   177c0:	mov	r8, #0
   177c4:	mov	r2, #0
   177c8:	mvncc	ip, #0
   177cc:	movwcc	r8, #1
   177d0:	cmp	r0, r1
   177d4:	mov	r1, #0
   177d8:	movwcc	r1, #1
   177dc:	cmp	r0, r3
   177e0:	mov	r3, #0
   177e4:	movwcc	r3, #1
   177e8:	cmp	r0, r7
   177ec:	mov	r7, #0
   177f0:	movwcc	r7, #1
   177f4:	cmp	r0, r9
   177f8:	mov	r9, #0
   177fc:	movwcc	r9, #1
   17800:	cmp	r0, lr
   17804:	mov	lr, #0
   17808:	movwcc	lr, #1
   1780c:	cmp	r0, r4
   17810:	movwcc	r2, #1
   17814:	orr	r0, r2, lr
   17818:	ldr	lr, [sp, #8]
   1781c:	orr	r0, r0, r9
   17820:	orr	r0, r0, r7
   17824:	orr	r0, r0, r3
   17828:	orr	r0, r0, r1
   1782c:	orr	r0, r0, r8
   17830:	and	r0, r0, #1
   17834:	b	179a0 <__assert_fail@plt+0x6698>
   17838:	mov	r1, #0
   1783c:	lsr	r0, r4, #22
   17840:	cmp	r1, r4, lsr #22
   17844:	lsl	r4, r4, #10
   17848:	movwne	r0, #1
   1784c:	mvnne	r4, #0
   17850:	b	179a4 <__assert_fail@plt+0x669c>
   17854:	mvn	r0, #0
   17858:	mul	ip, r4, r8
   1785c:	str	lr, [sp, #8]
   17860:	mov	r9, #0
   17864:	udiv	r0, r0, r8
   17868:	cmp	r0, r4
   1786c:	mvncc	ip, #0
   17870:	cmp	r0, ip
   17874:	mul	r2, ip, r8
   17878:	mvncc	r2, #0
   1787c:	cmp	r0, r2
   17880:	mul	r3, r2, r8
   17884:	mvncc	r3, #0
   17888:	cmp	r0, r3
   1788c:	mul	r7, r3, r8
   17890:	mvncc	r7, #0
   17894:	cmp	r0, r7
   17898:	mul	r1, r7, r8
   1789c:	mvncc	r1, #0
   178a0:	cmp	r0, r1
   178a4:	mul	lr, r1, r8
   178a8:	mov	r8, #0
   178ac:	mov	r1, #0
   178b0:	mvncc	lr, #0
   178b4:	movwcc	r8, #1
   178b8:	cmp	r0, r7
   178bc:	mov	r7, #0
   178c0:	movwcc	r7, #1
   178c4:	cmp	r0, r3
   178c8:	mov	r3, #0
   178cc:	movwcc	r3, #1
   178d0:	cmp	r0, r2
   178d4:	mov	r2, #0
   178d8:	movwcc	r2, #1
   178dc:	cmp	r0, ip
   178e0:	movwcc	r1, #1
   178e4:	cmp	r0, r4
   178e8:	mov	r4, lr
   178ec:	ldr	lr, [sp, #8]
   178f0:	movwcc	r9, #1
   178f4:	orr	r0, r9, r1
   178f8:	orr	r0, r0, r2
   178fc:	orr	r0, r0, r3
   17900:	orr	r0, r0, r7
   17904:	orr	r0, r0, r8
   17908:	b	179a4 <__assert_fail@plt+0x669c>
   1790c:	mvn	r0, #0
   17910:	mul	r1, r4, r8
   17914:	udiv	r0, r0, r8
   17918:	cmp	r0, r4
   1791c:	mvncc	r1, #0
   17920:	cmp	r0, r1
   17924:	mul	r2, r1, r8
   17928:	mvncc	r2, #0
   1792c:	cmp	r0, r2
   17930:	mul	r3, r2, r8
   17934:	mvncc	r3, #0
   17938:	cmp	r0, r3
   1793c:	mul	r7, r3, r8
   17940:	mvncc	r7, #0
   17944:	cmp	r0, r7
   17948:	mul	ip, r7, r8
   1794c:	mov	r8, lr
   17950:	mov	lr, #0
   17954:	mov	r7, #0
   17958:	mvncc	ip, #0
   1795c:	movwcc	lr, #1
   17960:	cmp	r0, r3
   17964:	mov	r3, #0
   17968:	movwcc	r3, #1
   1796c:	cmp	r0, r2
   17970:	mov	r2, #0
   17974:	movwcc	r2, #1
   17978:	cmp	r0, r1
   1797c:	mov	r1, #0
   17980:	movwcc	r1, #1
   17984:	cmp	r0, r4
   17988:	movwcc	r7, #1
   1798c:	orr	r0, r7, r1
   17990:	orr	r0, r0, r2
   17994:	orr	r0, r0, r3
   17998:	orr	r0, r0, lr
   1799c:	mov	lr, r8
   179a0:	mov	r4, ip
   179a4:	add	r1, r5, lr
   179a8:	orr	sl, r0, sl
   179ac:	str	r1, [r6]
   179b0:	ldrb	r1, [r5, lr]
   179b4:	cmp	r1, #0
   179b8:	orrne	sl, sl, #2
   179bc:	ldr	r0, [sp, #12]
   179c0:	str	r4, [r0]
   179c4:	mov	r0, sl
   179c8:	sub	sp, fp, #28
   179cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179d0:	mvn	r0, #0
   179d4:	str	lr, [sp, #8]
   179d8:	mul	lr, r4, r8
   179dc:	udiv	r0, r0, r8
   179e0:	cmp	r0, r4
   179e4:	mvncc	lr, #0
   179e8:	cmp	r0, lr
   179ec:	mul	r9, lr, r8
   179f0:	mvncc	r9, #0
   179f4:	cmp	r0, r9
   179f8:	mul	r7, r9, r8
   179fc:	mvncc	r7, #0
   17a00:	cmp	r0, r7
   17a04:	mul	r3, r7, r8
   17a08:	mvncc	r3, #0
   17a0c:	cmp	r0, r3
   17a10:	mul	r1, r3, r8
   17a14:	mvncc	r1, #0
   17a18:	cmp	r0, r1
   17a1c:	mul	r2, r1, r8
   17a20:	mvncc	r2, #0
   17a24:	cmp	r0, r2
   17a28:	mul	ip, r2, r8
   17a2c:	mvncc	ip, #0
   17a30:	cmp	r0, ip
   17a34:	mul	r8, ip, r8
   17a38:	mov	ip, #0
   17a3c:	mvncc	r8, #0
   17a40:	str	r8, [sp, #4]
   17a44:	mov	r8, #0
   17a48:	movwcc	r8, #1
   17a4c:	cmp	r0, r2
   17a50:	mov	r2, #0
   17a54:	movwcc	r2, #1
   17a58:	cmp	r0, r1
   17a5c:	mov	r1, #0
   17a60:	movwcc	r1, #1
   17a64:	cmp	r0, r3
   17a68:	mov	r3, #0
   17a6c:	movwcc	r3, #1
   17a70:	cmp	r0, r7
   17a74:	mov	r7, #0
   17a78:	movwcc	r7, #1
   17a7c:	cmp	r0, r9
   17a80:	mov	r9, #0
   17a84:	movwcc	r9, #1
   17a88:	cmp	r0, lr
   17a8c:	mov	lr, #0
   17a90:	movwcc	lr, #1
   17a94:	cmp	r0, r4
   17a98:	ldr	r4, [sp, #4]
   17a9c:	movwcc	ip, #1
   17aa0:	orr	r0, ip, lr
   17aa4:	ldr	lr, [sp, #8]
   17aa8:	orr	r0, r0, r9
   17aac:	orr	r0, r0, r7
   17ab0:	orr	r0, r0, r3
   17ab4:	orr	r0, r0, r1
   17ab8:	orr	r0, r0, r2
   17abc:	orr	r0, r0, r8
   17ac0:	and	r0, r0, #1
   17ac4:	b	179a4 <__assert_fail@plt+0x669c>
   17ac8:	movw	r0, #65535	; 0xffff
   17acc:	movt	r0, #63	; 0x3f
   17ad0:	orr	r1, r0, #4194304	; 0x400000
   17ad4:	mov	r0, #0
   17ad8:	cmp	r4, r1
   17adc:	lsl	r4, r4, #9
   17ae0:	movwhi	r0, #1
   17ae4:	mvnhi	r4, #0
   17ae8:	b	179a4 <__assert_fail@plt+0x669c>
   17aec:	cmp	r4, #0
   17af0:	lsl	r1, r4, #1
   17af4:	lsr	r0, r4, #31
   17af8:	mvnmi	r1, #0
   17afc:	mov	r4, r1
   17b00:	b	179a4 <__assert_fail@plt+0x669c>
   17b04:	movw	r0, #41310	; 0xa15e
   17b08:	movw	r1, #41348	; 0xa184
   17b0c:	movw	r3, #41364	; 0xa194
   17b10:	mov	r2, #85	; 0x55
   17b14:	movt	r0, #1
   17b18:	movt	r1, #1
   17b1c:	movt	r3, #1
   17b20:	bl	11308 <__assert_fail@plt>
   17b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b28:	add	fp, sp, #28
   17b2c:	sub	sp, sp, #44	; 0x2c
   17b30:	cmp	r2, #37	; 0x25
   17b34:	bcs	187a4 <__assert_fail@plt+0x749c>
   17b38:	ldr	sl, [fp, #8]
   17b3c:	mov	r6, r2
   17b40:	mov	r7, r1
   17b44:	mov	r4, r0
   17b48:	str	r3, [sp, #36]	; 0x24
   17b4c:	bl	1120c <__errno_location@plt>
   17b50:	mov	r5, r0
   17b54:	mov	r0, #0
   17b58:	str	r0, [r5]
   17b5c:	bl	111c4 <__ctype_b_loc@plt>
   17b60:	ldr	r1, [r0]
   17b64:	mov	r2, r4
   17b68:	ldrb	r0, [r2], #1
   17b6c:	add	r3, r1, r0, lsl #1
   17b70:	ldrb	r3, [r3, #1]
   17b74:	tst	r3, #32
   17b78:	bne	17b68 <__assert_fail@plt+0x6860>
   17b7c:	cmp	r7, #0
   17b80:	sub	r9, fp, #32
   17b84:	mov	r8, #4
   17b88:	movne	r9, r7
   17b8c:	cmp	r0, #45	; 0x2d
   17b90:	beq	18798 <__assert_fail@plt+0x7490>
   17b94:	mov	r0, r4
   17b98:	mov	r1, r9
   17b9c:	mov	r2, r6
   17ba0:	mov	r3, #0
   17ba4:	bl	110c8 <__strtoull_internal@plt>
   17ba8:	mov	r7, r1
   17bac:	ldr	r1, [r9]
   17bb0:	cmp	r1, r4
   17bb4:	beq	17be0 <__assert_fail@plt+0x68d8>
   17bb8:	mov	r6, r0
   17bbc:	ldr	r0, [r5]
   17bc0:	cmp	r0, #0
   17bc4:	beq	17c1c <__assert_fail@plt+0x6914>
   17bc8:	cmp	r0, #34	; 0x22
   17bcc:	bne	18798 <__assert_fail@plt+0x7490>
   17bd0:	mov	r8, #1
   17bd4:	cmp	sl, #0
   17bd8:	bne	17c28 <__assert_fail@plt+0x6920>
   17bdc:	b	18790 <__assert_fail@plt+0x7488>
   17be0:	cmp	sl, #0
   17be4:	beq	18798 <__assert_fail@plt+0x7490>
   17be8:	mov	r5, r1
   17bec:	ldrb	r1, [r4]
   17bf0:	cmp	r1, #0
   17bf4:	beq	18798 <__assert_fail@plt+0x7490>
   17bf8:	mov	r0, sl
   17bfc:	bl	11200 <strchr@plt>
   17c00:	cmp	r0, #0
   17c04:	beq	18798 <__assert_fail@plt+0x7490>
   17c08:	mov	r1, r5
   17c0c:	mov	r8, #0
   17c10:	mov	r6, #1
   17c14:	mov	r7, #0
   17c18:	b	17c28 <__assert_fail@plt+0x6920>
   17c1c:	mov	r8, r0
   17c20:	cmp	sl, #0
   17c24:	beq	18790 <__assert_fail@plt+0x7488>
   17c28:	ldrb	r4, [r1]
   17c2c:	cmp	r4, #0
   17c30:	beq	18790 <__assert_fail@plt+0x7488>
   17c34:	str	r1, [sp, #32]
   17c38:	mov	r0, sl
   17c3c:	mov	r1, r4
   17c40:	bl	11200 <strchr@plt>
   17c44:	cmp	r0, #0
   17c48:	beq	17f10 <__assert_fail@plt+0x6c08>
   17c4c:	sub	r0, r4, #69	; 0x45
   17c50:	mov	r1, #1
   17c54:	mov	r3, #0
   17c58:	mov	r5, #1024	; 0x400
   17c5c:	cmp	r0, #47	; 0x2f
   17c60:	str	r1, [sp, #28]
   17c64:	bhi	17d68 <__assert_fail@plt+0x6a60>
   17c68:	add	r1, pc, #0
   17c6c:	ldr	pc, [r1, r0, lsl #2]
   17c70:	andeq	r7, r1, r0, lsr sp
   17c74:	andeq	r7, r1, r8, ror #26
   17c78:	andeq	r7, r1, r0, lsr sp
   17c7c:	andeq	r7, r1, r8, ror #26
   17c80:	andeq	r7, r1, r8, ror #26
   17c84:	andeq	r7, r1, r8, ror #26
   17c88:	andeq	r7, r1, r0, lsr sp
   17c8c:	andeq	r7, r1, r8, ror #26
   17c90:	andeq	r7, r1, r0, lsr sp
   17c94:	andeq	r7, r1, r8, ror #26
   17c98:	andeq	r7, r1, r8, ror #26
   17c9c:	andeq	r7, r1, r0, lsr sp
   17ca0:	andeq	r7, r1, r8, ror #26
   17ca4:	andeq	r7, r1, r8, ror #26
   17ca8:	andeq	r7, r1, r8, ror #26
   17cac:	andeq	r7, r1, r0, lsr sp
   17cb0:	andeq	r7, r1, r8, ror #26
   17cb4:	andeq	r7, r1, r8, ror #26
   17cb8:	andeq	r7, r1, r8, ror #26
   17cbc:	andeq	r7, r1, r8, ror #26
   17cc0:	andeq	r7, r1, r0, lsr sp
   17cc4:	andeq	r7, r1, r0, lsr sp
   17cc8:	andeq	r7, r1, r8, ror #26
   17ccc:	andeq	r7, r1, r8, ror #26
   17cd0:	andeq	r7, r1, r8, ror #26
   17cd4:	andeq	r7, r1, r8, ror #26
   17cd8:	andeq	r7, r1, r8, ror #26
   17cdc:	andeq	r7, r1, r8, ror #26
   17ce0:	andeq	r7, r1, r8, ror #26
   17ce4:	andeq	r7, r1, r8, ror #26
   17ce8:	andeq	r7, r1, r8, ror #26
   17cec:	andeq	r7, r1, r8, ror #26
   17cf0:	andeq	r7, r1, r8, ror #26
   17cf4:	andeq	r7, r1, r8, ror #26
   17cf8:	andeq	r7, r1, r0, lsr sp
   17cfc:	andeq	r7, r1, r8, ror #26
   17d00:	andeq	r7, r1, r8, ror #26
   17d04:	andeq	r7, r1, r8, ror #26
   17d08:	andeq	r7, r1, r0, lsr sp
   17d0c:	andeq	r7, r1, r8, ror #26
   17d10:	andeq	r7, r1, r0, lsr sp
   17d14:	andeq	r7, r1, r8, ror #26
   17d18:	andeq	r7, r1, r8, ror #26
   17d1c:	andeq	r7, r1, r8, ror #26
   17d20:	andeq	r7, r1, r8, ror #26
   17d24:	andeq	r7, r1, r8, ror #26
   17d28:	andeq	r7, r1, r8, ror #26
   17d2c:	andeq	r7, r1, r0, lsr sp
   17d30:	mov	r0, sl
   17d34:	mov	r1, #48	; 0x30
   17d38:	bl	11200 <strchr@plt>
   17d3c:	cmp	r0, #0
   17d40:	beq	17d64 <__assert_fail@plt+0x6a5c>
   17d44:	ldr	r1, [sp, #32]
   17d48:	ldrb	r0, [r1, #1]
   17d4c:	cmp	r0, #66	; 0x42
   17d50:	cmpne	r0, #68	; 0x44
   17d54:	bne	17f1c <__assert_fail@plt+0x6c14>
   17d58:	mov	r5, #1000	; 0x3e8
   17d5c:	mov	r0, #2
   17d60:	str	r0, [sp, #28]
   17d64:	mov	r3, #0
   17d68:	sub	r0, r4, #66	; 0x42
   17d6c:	cmp	r0, #53	; 0x35
   17d70:	bhi	17f10 <__assert_fail@plt+0x6c08>
   17d74:	add	r1, pc, #0
   17d78:	ldr	pc, [r1, r0, lsl #2]
   17d7c:	muleq	r1, r8, r2
   17d80:	andeq	r7, r1, r0, lsl pc
   17d84:	andeq	r7, r1, r0, lsl pc
   17d88:	andeq	r8, r1, r0, asr #5
   17d8c:	andeq	r7, r1, r0, lsl pc
   17d90:	andeq	r7, r1, r4, asr lr
   17d94:	andeq	r7, r1, r0, lsl pc
   17d98:	andeq	r7, r1, r0, lsl pc
   17d9c:	andeq	r7, r1, r0, lsl pc
   17da0:	andeq	r7, r1, r0, asr #30
   17da4:	andeq	r7, r1, r0, lsl pc
   17da8:	andeq	r7, r1, r8, lsl #31
   17dac:	andeq	r7, r1, r0, lsl pc
   17db0:	andeq	r7, r1, r0, lsl pc
   17db4:	andeq	r8, r1, r8, lsl r4
   17db8:	andeq	r7, r1, r0, lsl pc
   17dbc:	andeq	r7, r1, r0, lsl pc
   17dc0:	andeq	r7, r1, r0, lsl pc
   17dc4:	andeq	r8, r1, r4, lsl r0
   17dc8:	andeq	r7, r1, r0, lsl pc
   17dcc:	andeq	r7, r1, r0, lsl pc
   17dd0:	andeq	r7, r1, r0, lsl pc
   17dd4:	andeq	r7, r1, r0, lsl pc
   17dd8:	andeq	r8, r1, r0, asr #10
   17ddc:	strdeq	r8, [r1], -ip
   17de0:	andeq	r7, r1, r0, lsl pc
   17de4:	andeq	r7, r1, r0, lsl pc
   17de8:	andeq	r7, r1, r0, lsl pc
   17dec:	andeq	r7, r1, r0, lsl pc
   17df0:	andeq	r7, r1, r0, lsl pc
   17df4:	andeq	r7, r1, r0, lsl pc
   17df8:	andeq	r7, r1, r0, lsl pc
   17dfc:	andeq	r8, r1, r8, lsl r7
   17e00:	andeq	r8, r1, r0, ror r7
   17e04:	andeq	r7, r1, r0, lsl pc
   17e08:	andeq	r7, r1, r0, lsl pc
   17e0c:	andeq	r7, r1, r0, lsl pc
   17e10:	andeq	r7, r1, r4, asr lr
   17e14:	andeq	r7, r1, r0, lsl pc
   17e18:	andeq	r7, r1, r0, lsl pc
   17e1c:	andeq	r7, r1, r0, lsl pc
   17e20:	andeq	r7, r1, r0, asr #30
   17e24:	andeq	r7, r1, r0, lsl pc
   17e28:	andeq	r7, r1, r8, lsl #31
   17e2c:	andeq	r7, r1, r0, lsl pc
   17e30:	andeq	r7, r1, r0, lsl pc
   17e34:	andeq	r7, r1, r0, lsl pc
   17e38:	andeq	r7, r1, r0, lsl pc
   17e3c:	andeq	r7, r1, r0, lsl pc
   17e40:	andeq	r7, r1, r0, lsl pc
   17e44:	andeq	r8, r1, r4, lsl r0
   17e48:	andeq	r7, r1, r0, lsl pc
   17e4c:	andeq	r7, r1, r0, lsl pc
   17e50:	andeq	r8, r1, ip, asr #14
   17e54:	mvn	r0, #0
   17e58:	mvn	r1, #0
   17e5c:	mov	r2, r5
   17e60:	mov	sl, r3
   17e64:	bl	18dc4 <__assert_fail@plt+0x7abc>
   17e68:	subs	r3, r0, r6
   17e6c:	umull	r4, r2, r6, r5
   17e70:	mov	lr, #0
   17e74:	str	r1, [sp, #20]
   17e78:	sbcs	r3, r1, r7
   17e7c:	movwcc	lr, #1
   17e80:	mla	ip, r6, sl, r2
   17e84:	mov	r2, r1
   17e88:	mov	r2, #0
   17e8c:	cmp	lr, #0
   17e90:	mla	r7, r7, r5, ip
   17e94:	mvnne	r4, #0
   17e98:	mvnne	r7, #0
   17e9c:	subs	r6, r0, r4
   17ea0:	sbcs	r6, r1, r7
   17ea4:	umull	r3, r6, r4, r5
   17ea8:	movwcc	r2, #1
   17eac:	cmp	r2, #0
   17eb0:	mvnne	r3, #0
   17eb4:	cmp	r2, #0
   17eb8:	str	r6, [sp, #16]
   17ebc:	umull	r6, ip, r3, r5
   17ec0:	mla	r1, r3, sl, ip
   17ec4:	ldr	ip, [sp, #16]
   17ec8:	str	r1, [sp, #12]
   17ecc:	mla	r4, r4, sl, ip
   17ed0:	mla	r4, r7, r5, r4
   17ed4:	mvnne	r4, #0
   17ed8:	subs	r0, r0, r3
   17edc:	ldr	r0, [sp, #20]
   17ee0:	ldr	r7, [sp, #12]
   17ee4:	sbcs	r0, r0, r4
   17ee8:	mov	r0, #0
   17eec:	mla	r7, r4, r5, r7
   17ef0:	movwcc	r0, #1
   17ef4:	cmp	r0, #0
   17ef8:	mov	r1, r0
   17efc:	orr	r0, lr, r2
   17f00:	mvnne	r7, #0
   17f04:	mvnne	r6, #0
   17f08:	orr	r3, r0, r1
   17f0c:	b	18770 <__assert_fail@plt+0x7468>
   17f10:	ldr	r0, [sp, #36]	; 0x24
   17f14:	orr	r8, r8, #2
   17f18:	b	18794 <__assert_fail@plt+0x748c>
   17f1c:	cmp	r0, #105	; 0x69
   17f20:	mov	r3, #0
   17f24:	bne	17d68 <__assert_fail@plt+0x6a60>
   17f28:	ldrb	r0, [r1, #2]
   17f2c:	mov	r1, #1
   17f30:	cmp	r0, #66	; 0x42
   17f34:	movweq	r1, #3
   17f38:	str	r1, [sp, #28]
   17f3c:	b	17d68 <__assert_fail@plt+0x6a60>
   17f40:	mvn	r0, #0
   17f44:	mvn	r1, #0
   17f48:	mov	r2, r5
   17f4c:	mov	r4, r3
   17f50:	bl	18dc4 <__assert_fail@plt+0x7abc>
   17f54:	subs	r0, r0, r6
   17f58:	mov	r2, #0
   17f5c:	sbcs	r0, r1, r7
   17f60:	umull	r0, r1, r6, r5
   17f64:	movwcc	r2, #1
   17f68:	cmp	r2, #0
   17f6c:	mla	r1, r6, r4, r1
   17f70:	mov	r3, r2
   17f74:	mvnne	r0, #0
   17f78:	mla	r7, r7, r5, r1
   17f7c:	mvnne	r7, #0
   17f80:	mov	r6, r0
   17f84:	b	18770 <__assert_fail@plt+0x7468>
   17f88:	mvn	r0, #0
   17f8c:	mvn	r1, #0
   17f90:	mov	r2, r5
   17f94:	str	r3, [sp, #24]
   17f98:	bl	18dc4 <__assert_fail@plt+0x7abc>
   17f9c:	subs	r3, r0, r6
   17fa0:	mov	ip, r0
   17fa4:	umull	r4, r0, r6, r5
   17fa8:	mov	sl, #0
   17fac:	sbcs	r3, r1, r7
   17fb0:	mov	r3, #0
   17fb4:	movwcc	r3, #1
   17fb8:	cmp	r3, #0
   17fbc:	str	r0, [sp, #20]
   17fc0:	ldr	r0, [sp, #24]
   17fc4:	mvnne	r4, #0
   17fc8:	cmp	r3, #0
   17fcc:	umull	lr, r2, r4, r5
   17fd0:	mla	r2, r4, r0, r2
   17fd4:	str	r2, [sp, #16]
   17fd8:	ldr	r2, [sp, #20]
   17fdc:	mla	r6, r6, r0, r2
   17fe0:	ldr	r0, [sp, #16]
   17fe4:	mla	r6, r7, r5, r6
   17fe8:	mvnne	r6, #0
   17fec:	mla	r7, r6, r5, r0
   17ff0:	subs	r0, ip, r4
   17ff4:	sbcs	r0, r1, r6
   17ff8:	movwcc	sl, #1
   17ffc:	cmp	sl, #0
   18000:	orr	r3, r3, sl
   18004:	mvnne	lr, #0
   18008:	mvnne	r7, #0
   1800c:	mov	r6, lr
   18010:	b	18770 <__assert_fail@plt+0x7468>
   18014:	mvn	r0, #0
   18018:	mvn	r1, #0
   1801c:	mov	r2, r5
   18020:	mov	sl, r3
   18024:	bl	18dc4 <__assert_fail@plt+0x7abc>
   18028:	subs	r3, r0, r6
   1802c:	mov	ip, r1
   18030:	umull	r2, lr, r6, r5
   18034:	str	r0, [sp, #20]
   18038:	sbcs	r3, r1, r7
   1803c:	mov	r1, #0
   18040:	str	ip, [sp, #16]
   18044:	movwcc	r1, #1
   18048:	mla	r6, r6, sl, lr
   1804c:	mov	lr, #0
   18050:	cmp	r1, #0
   18054:	mla	r7, r7, r5, r6
   18058:	mvnne	r2, #0
   1805c:	cmp	r1, #0
   18060:	umull	r3, r4, r2, r5
   18064:	mvnne	r7, #0
   18068:	mla	r4, r2, sl, r4
   1806c:	subs	r2, r0, r2
   18070:	sbcs	r2, ip, r7
   18074:	mla	r4, r7, r5, r4
   18078:	mov	r2, #0
   1807c:	movwcc	lr, #1
   18080:	cmp	lr, #0
   18084:	mvnne	r3, #0
   18088:	mvnne	r4, #0
   1808c:	subs	r7, r0, r3
   18090:	mov	r0, r5
   18094:	sbcs	r7, ip, r4
   18098:	umull	r5, r7, r3, r5
   1809c:	movwcc	r2, #1
   180a0:	cmp	r2, #0
   180a4:	mla	r3, r3, sl, r7
   180a8:	mvnne	r5, #0
   180ac:	cmp	r2, #0
   180b0:	mla	r3, r4, r0, r3
   180b4:	umull	r6, ip, r5, r0
   180b8:	mvnne	r3, #0
   180bc:	mla	ip, r5, sl, ip
   180c0:	mla	r7, r3, r0, ip
   180c4:	ldr	r0, [sp, #20]
   180c8:	subs	r0, r0, r5
   180cc:	ldr	r0, [sp, #16]
   180d0:	sbcs	r0, r0, r3
   180d4:	mov	r0, #0
   180d8:	movwcc	r0, #1
   180dc:	cmp	r0, #0
   180e0:	mov	r3, r0
   180e4:	orr	r0, r1, lr
   180e8:	orr	r0, r0, r2
   180ec:	mvnne	r7, #0
   180f0:	mvnne	r6, #0
   180f4:	orr	r3, r0, r3
   180f8:	b	18770 <__assert_fail@plt+0x7468>
   180fc:	mvn	r0, #0
   18100:	mvn	r1, #0
   18104:	mov	r2, r5
   18108:	mov	r4, r3
   1810c:	str	r3, [sp, #24]
   18110:	bl	18dc4 <__assert_fail@plt+0x7abc>
   18114:	umull	r3, r2, r6, r5
   18118:	mla	r2, r6, r4, r2
   1811c:	subs	r6, r0, r6
   18120:	sbcs	r6, r1, r7
   18124:	mov	r6, #0
   18128:	mla	ip, r7, r5, r2
   1812c:	ldr	r2, [sp, #24]
   18130:	movwcc	r6, #1
   18134:	cmp	r6, #0
   18138:	str	r6, [sp, #20]
   1813c:	mov	r6, #0
   18140:	mvnne	r3, #0
   18144:	mvnne	ip, #0
   18148:	subs	r4, r0, r3
   1814c:	umull	r7, lr, r3, r5
   18150:	sbcs	r4, r1, ip
   18154:	movwcc	r6, #1
   18158:	mla	r3, r3, r2, lr
   1815c:	cmp	r6, #0
   18160:	str	r6, [sp, #16]
   18164:	mvnne	r7, #0
   18168:	cmp	r6, #0
   1816c:	umull	sl, r4, r7, r5
   18170:	mla	r4, r7, r2, r4
   18174:	mla	r2, ip, r5, r3
   18178:	mvnne	r2, #0
   1817c:	subs	r3, r0, r7
   18180:	mov	ip, #0
   18184:	mla	r6, r2, r5, r4
   18188:	sbcs	r2, r1, r2
   1818c:	mov	r4, r0
   18190:	mov	r0, #0
   18194:	movwcc	r0, #1
   18198:	mov	r3, r4
   1819c:	cmp	r0, #0
   181a0:	str	r0, [sp, #12]
   181a4:	mov	r0, r1
   181a8:	str	r3, [sp, #4]
   181ac:	mvnne	sl, #0
   181b0:	mvnne	r6, #0
   181b4:	str	r0, [sp, #8]
   181b8:	subs	r2, r4, sl
   181bc:	ldr	r4, [sp, #24]
   181c0:	sbcs	r2, r1, r6
   181c4:	umull	r7, r2, sl, r5
   181c8:	movwcc	ip, #1
   181cc:	cmp	ip, #0
   181d0:	mvnne	r7, #0
   181d4:	mla	r2, sl, r4, r2
   181d8:	cmp	ip, #0
   181dc:	mov	sl, #0
   181e0:	umull	r1, lr, r7, r5
   181e4:	mla	r2, r6, r5, r2
   181e8:	mvnne	r2, #0
   181ec:	subs	r6, r3, r7
   181f0:	mla	lr, r7, r4, lr
   181f4:	mla	lr, r2, r5, lr
   181f8:	sbcs	r2, r0, r2
   181fc:	mov	r2, #0
   18200:	movwcc	sl, #1
   18204:	cmp	sl, #0
   18208:	mvnne	r1, #0
   1820c:	mvnne	lr, #0
   18210:	subs	r6, r3, r1
   18214:	ldr	r3, [sp, #24]
   18218:	sbcs	r6, r0, lr
   1821c:	umull	r0, r7, r1, r5
   18220:	movwcc	r2, #1
   18224:	cmp	r2, #0
   18228:	mvnne	r0, #0
   1822c:	mla	r1, r1, r3, r7
   18230:	cmp	r2, #0
   18234:	umull	r6, r4, r0, r5
   18238:	mla	r1, lr, r5, r1
   1823c:	mvnne	r1, #0
   18240:	mla	r4, r0, r3, r4
   18244:	ldr	r3, [sp, #4]
   18248:	mla	r7, r1, r5, r4
   1824c:	ldr	r5, [sp, #16]
   18250:	subs	r0, r3, r0
   18254:	ldr	r0, [sp, #8]
   18258:	sbcs	r0, r0, r1
   1825c:	mov	r0, #0
   18260:	movwcc	r0, #1
   18264:	cmp	r0, #0
   18268:	mov	r1, r0
   1826c:	ldr	r0, [sp, #20]
   18270:	mvnne	r7, #0
   18274:	mvnne	r6, #0
   18278:	orr	r0, r0, r5
   1827c:	ldr	r5, [sp, #12]
   18280:	orr	r0, r0, r5
   18284:	orr	r0, r0, ip
   18288:	orr	r0, r0, sl
   1828c:	orr	r0, r0, r2
   18290:	orr	r0, r0, r1
   18294:	b	18710 <__assert_fail@plt+0x7408>
   18298:	mov	r1, #0
   1829c:	lsl	r2, r7, #10
   182a0:	lsl	r0, r6, #10
   182a4:	lsr	r3, r7, #22
   182a8:	cmp	r1, r7, lsr #22
   182ac:	orr	r2, r2, r6, lsr #22
   182b0:	mvnne	r0, #0
   182b4:	movwne	r3, #1
   182b8:	cmp	r1, r7, lsr #22
   182bc:	b	1873c <__assert_fail@plt+0x7434>
   182c0:	mvn	r0, #0
   182c4:	mvn	r1, #0
   182c8:	mov	r2, r5
   182cc:	mov	sl, r3
   182d0:	bl	18dc4 <__assert_fail@plt+0x7abc>
   182d4:	subs	r2, r0, r6
   182d8:	mov	ip, r0
   182dc:	mov	r0, #0
   182e0:	sbcs	r2, r1, r7
   182e4:	umull	r4, r2, r6, r5
   182e8:	movwcc	r0, #1
   182ec:	cmp	r0, #0
   182f0:	mla	r2, r6, sl, r2
   182f4:	str	r0, [sp, #20]
   182f8:	mvnne	r4, #0
   182fc:	cmp	r0, #0
   18300:	mla	r2, r7, r5, r2
   18304:	mov	r0, #0
   18308:	umull	lr, r3, r4, r5
   1830c:	mvnne	r2, #0
   18310:	mla	r3, r4, sl, r3
   18314:	mla	r6, r2, r5, r3
   18318:	subs	r3, ip, r4
   1831c:	mov	r3, r1
   18320:	sbcs	r2, r1, r2
   18324:	str	r3, [sp, #8]
   18328:	movwcc	r0, #1
   1832c:	cmp	r0, #0
   18330:	str	r0, [sp, #16]
   18334:	mov	r0, ip
   18338:	mvnne	lr, #0
   1833c:	mvnne	r6, #0
   18340:	str	r0, [sp, #12]
   18344:	subs	r2, ip, lr
   18348:	umull	r7, r4, lr, r5
   1834c:	sbcs	r2, r1, r6
   18350:	mov	r2, #0
   18354:	movwcc	r2, #1
   18358:	mla	r4, lr, sl, r4
   1835c:	cmp	r2, #0
   18360:	mla	r6, r6, r5, r4
   18364:	mov	r4, #0
   18368:	mvnne	r7, #0
   1836c:	cmp	r2, #0
   18370:	umull	r1, ip, r7, r5
   18374:	mvnne	r6, #0
   18378:	mla	ip, r7, sl, ip
   1837c:	subs	r7, r0, r7
   18380:	sbcs	r7, r3, r6
   18384:	mla	lr, r6, r5, ip
   18388:	mov	ip, #0
   1838c:	movwcc	ip, #1
   18390:	cmp	ip, #0
   18394:	mvnne	r1, #0
   18398:	mvnne	lr, #0
   1839c:	subs	r7, r0, r1
   183a0:	sbcs	r7, r3, lr
   183a4:	umull	r0, r7, r1, r5
   183a8:	movwcc	r4, #1
   183ac:	cmp	r4, #0
   183b0:	mla	r1, r1, sl, r7
   183b4:	mvnne	r0, #0
   183b8:	cmp	r4, #0
   183bc:	mla	r1, lr, r5, r1
   183c0:	umull	r6, r3, r0, r5
   183c4:	mvnne	r1, #0
   183c8:	mla	r3, r0, sl, r3
   183cc:	mla	r7, r1, r5, r3
   183d0:	ldr	r3, [sp, #12]
   183d4:	subs	r0, r3, r0
   183d8:	ldr	r0, [sp, #8]
   183dc:	ldr	r3, [sp, #16]
   183e0:	sbcs	r0, r0, r1
   183e4:	mov	r0, #0
   183e8:	movwcc	r0, #1
   183ec:	cmp	r0, #0
   183f0:	mov	r1, r0
   183f4:	ldr	r0, [sp, #20]
   183f8:	mvnne	r7, #0
   183fc:	mvnne	r6, #0
   18400:	orr	r0, r0, r3
   18404:	orr	r0, r0, r2
   18408:	orr	r0, r0, ip
   1840c:	orr	r0, r0, r4
   18410:	orr	r3, r0, r1
   18414:	b	18770 <__assert_fail@plt+0x7468>
   18418:	mvn	r0, #0
   1841c:	mvn	r1, #0
   18420:	mov	r2, r5
   18424:	mov	sl, r3
   18428:	bl	18dc4 <__assert_fail@plt+0x7abc>
   1842c:	umull	r3, r2, r6, r5
   18430:	mov	lr, r1
   18434:	mov	r1, r0
   18438:	mla	r2, r6, sl, r2
   1843c:	subs	r6, r0, r6
   18440:	mov	r0, #0
   18444:	sbcs	r6, lr, r7
   18448:	mla	r2, r7, r5, r2
   1844c:	movwcc	r0, #1
   18450:	cmp	r0, #0
   18454:	str	r0, [sp, #20]
   18458:	mov	r0, r1
   1845c:	mvnne	r3, #0
   18460:	mvnne	r2, #0
   18464:	str	r0, [sp, #16]
   18468:	subs	r4, r1, r3
   1846c:	umull	r7, ip, r3, r5
   18470:	sbcs	r4, lr, r2
   18474:	mov	r4, #0
   18478:	movwcc	r4, #1
   1847c:	mla	r3, r3, sl, ip
   18480:	mov	ip, #0
   18484:	cmp	r4, #0
   18488:	mla	r2, r2, r5, r3
   1848c:	mvnne	r7, #0
   18490:	cmp	r4, #0
   18494:	umull	r1, r6, r7, r5
   18498:	mvnne	r2, #0
   1849c:	mla	r6, r7, sl, r6
   184a0:	mla	r3, r2, r5, r6
   184a4:	subs	r6, r0, r7
   184a8:	sbcs	r2, lr, r2
   184ac:	mov	r2, #0
   184b0:	movwcc	ip, #1
   184b4:	cmp	ip, #0
   184b8:	mvnne	r1, #0
   184bc:	mvnne	r3, #0
   184c0:	subs	r6, r0, r1
   184c4:	sbcs	r6, lr, r3
   184c8:	umull	r0, r6, r1, r5
   184cc:	movwcc	r2, #1
   184d0:	cmp	r2, #0
   184d4:	mvnne	r0, #0
   184d8:	cmp	r2, #0
   184dc:	str	r6, [sp, #12]
   184e0:	umull	r6, r7, r0, r5
   184e4:	mla	r7, r0, sl, r7
   184e8:	str	r7, [sp, #8]
   184ec:	ldr	r7, [sp, #12]
   184f0:	mla	r1, r1, sl, r7
   184f4:	mla	r1, r3, r5, r1
   184f8:	ldr	r3, [sp, #8]
   184fc:	mvnne	r1, #0
   18500:	mla	r7, r1, r5, r3
   18504:	ldr	r3, [sp, #16]
   18508:	subs	r0, r3, r0
   1850c:	sbcs	r0, lr, r1
   18510:	mov	r0, #0
   18514:	movwcc	r0, #1
   18518:	cmp	r0, #0
   1851c:	mov	r1, r0
   18520:	ldr	r0, [sp, #20]
   18524:	mvnne	r7, #0
   18528:	mvnne	r6, #0
   1852c:	orr	r0, r0, r4
   18530:	orr	r0, r0, ip
   18534:	orr	r0, r0, r2
   18538:	orr	r3, r0, r1
   1853c:	b	18770 <__assert_fail@plt+0x7468>
   18540:	mvn	r0, #0
   18544:	mvn	r1, #0
   18548:	mov	r2, r5
   1854c:	mov	sl, r3
   18550:	bl	18dc4 <__assert_fail@plt+0x7abc>
   18554:	mov	lr, r0
   18558:	subs	r0, r0, r6
   1855c:	mov	r2, #0
   18560:	mov	ip, r1
   18564:	str	sl, [sp, #24]
   18568:	sbcs	r0, r1, r7
   1856c:	umull	r3, r1, r6, r5
   18570:	str	lr, [sp, #4]
   18574:	movwcc	r2, #1
   18578:	cmp	r2, #0
   1857c:	mla	r6, r6, sl, r1
   18580:	mov	r1, #0
   18584:	str	r2, [sp, #20]
   18588:	mvnne	r3, #0
   1858c:	cmp	r2, #0
   18590:	mla	r7, r7, r5, r6
   18594:	mov	r2, #0
   18598:	umull	r0, r4, r3, r5
   1859c:	mvnne	r7, #0
   185a0:	mla	r4, r3, sl, r4
   185a4:	subs	r3, lr, r3
   185a8:	sbcs	r3, ip, r7
   185ac:	mla	r4, r7, r5, r4
   185b0:	movwcc	r1, #1
   185b4:	cmp	r1, #0
   185b8:	str	r1, [sp, #16]
   185bc:	mvnne	r0, #0
   185c0:	mvnne	r4, #0
   185c4:	subs	r3, lr, r0
   185c8:	sbcs	r3, ip, r4
   185cc:	umull	r6, r3, r0, r5
   185d0:	movwcc	r2, #1
   185d4:	cmp	r2, #0
   185d8:	mla	r0, r0, sl, r3
   185dc:	str	r2, [sp, #12]
   185e0:	mvnne	r6, #0
   185e4:	cmp	r2, #0
   185e8:	mla	r0, r4, r5, r0
   185ec:	ldr	r4, [sp, #24]
   185f0:	umull	r1, r7, r6, r5
   185f4:	mvnne	r0, #0
   185f8:	subs	r3, lr, r6
   185fc:	mov	r3, ip
   18600:	str	r3, [sp]
   18604:	mla	r7, r6, sl, r7
   18608:	mla	r7, r0, r5, r7
   1860c:	sbcs	r0, ip, r0
   18610:	mov	r0, #0
   18614:	movwcc	r0, #1
   18618:	cmp	r0, #0
   1861c:	str	r0, [sp, #8]
   18620:	mvnne	r1, #0
   18624:	mvnne	r7, #0
   18628:	subs	r0, lr, r1
   1862c:	sbcs	r0, ip, r7
   18630:	mov	ip, #0
   18634:	umull	r6, r0, r1, r5
   18638:	movwcc	ip, #1
   1863c:	cmp	ip, #0
   18640:	mla	r1, r1, r4, r0
   18644:	mov	r0, lr
   18648:	mvnne	r6, #0
   1864c:	cmp	ip, #0
   18650:	mla	r1, r7, r5, r1
   18654:	umull	r2, sl, r6, r5
   18658:	mvnne	r1, #0
   1865c:	mla	sl, r6, r4, sl
   18660:	subs	r6, lr, r6
   18664:	mov	lr, #0
   18668:	mla	r7, r1, r5, sl
   1866c:	sbcs	r1, r3, r1
   18670:	ldr	r1, [sp, #24]
   18674:	movwcc	lr, #1
   18678:	cmp	lr, #0
   1867c:	mvnne	r2, #0
   18680:	mvnne	r7, #0
   18684:	subs	r6, r0, r2
   18688:	umull	r0, sl, r2, r5
   1868c:	sbcs	r6, r3, r7
   18690:	mov	r3, #0
   18694:	movwcc	r3, #1
   18698:	mla	r2, r2, r1, sl
   1869c:	cmp	r3, #0
   186a0:	mla	r2, r7, r5, r2
   186a4:	mvnne	r0, #0
   186a8:	cmp	r3, #0
   186ac:	umull	r6, r4, r0, r5
   186b0:	mvnne	r2, #0
   186b4:	mla	r4, r0, r1, r4
   186b8:	ldr	r1, [sp, #4]
   186bc:	mla	r7, r2, r5, r4
   186c0:	ldr	r5, [sp, #16]
   186c4:	subs	r0, r1, r0
   186c8:	ldr	r0, [sp]
   186cc:	sbcs	r0, r0, r2
   186d0:	mov	r0, #0
   186d4:	movwcc	r0, #1
   186d8:	cmp	r0, #0
   186dc:	mov	r2, r0
   186e0:	ldr	r0, [sp, #20]
   186e4:	mvnne	r7, #0
   186e8:	mvnne	r6, #0
   186ec:	orr	r0, r0, r5
   186f0:	ldr	r5, [sp, #12]
   186f4:	orr	r0, r0, r5
   186f8:	ldr	r5, [sp, #8]
   186fc:	orr	r0, r0, r5
   18700:	orr	r0, r0, ip
   18704:	orr	r0, r0, lr
   18708:	orr	r0, r0, r3
   1870c:	orr	r0, r0, r2
   18710:	and	r3, r0, #1
   18714:	b	18770 <__assert_fail@plt+0x7468>
   18718:	mov	r1, #0
   1871c:	lsl	r2, r7, #9
   18720:	lsl	r0, r6, #9
   18724:	lsr	r3, r7, #23
   18728:	cmp	r1, r7, lsr #23
   1872c:	orr	r2, r2, r6, lsr #23
   18730:	mvnne	r0, #0
   18734:	movwne	r3, #1
   18738:	cmp	r1, r7, lsr #23
   1873c:	mvnne	r2, #0
   18740:	mov	r6, r0
   18744:	mov	r7, r2
   18748:	b	18770 <__assert_fail@plt+0x7468>
   1874c:	lsl	r1, r7, #1
   18750:	cmp	r7, #0
   18754:	lsl	r0, r6, #1
   18758:	lsr	r3, r7, #31
   1875c:	orr	r1, r1, r6, lsr #31
   18760:	mvnmi	r0, #0
   18764:	mvnmi	r1, #0
   18768:	mov	r6, r0
   1876c:	mov	r7, r1
   18770:	ldr	r1, [sp, #32]
   18774:	ldr	r2, [sp, #28]
   18778:	orr	r8, r3, r8
   1877c:	add	r0, r1, r2
   18780:	str	r0, [r9]
   18784:	ldrb	r0, [r1, r2]
   18788:	cmp	r0, #0
   1878c:	orrne	r8, r8, #2
   18790:	ldr	r0, [sp, #36]	; 0x24
   18794:	strd	r6, [r0]
   18798:	mov	r0, r8
   1879c:	sub	sp, fp, #28
   187a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187a4:	movw	r0, #41310	; 0xa15e
   187a8:	movw	r1, #41348	; 0xa184
   187ac:	movw	r3, #41445	; 0xa1e5
   187b0:	mov	r2, #85	; 0x55
   187b4:	movt	r0, #1
   187b8:	movt	r1, #1
   187bc:	movt	r3, #1
   187c0:	bl	11308 <__assert_fail@plt>
   187c4:	clz	r2, r1
   187c8:	clz	r3, r0
   187cc:	lsr	r2, r2, #5
   187d0:	lsr	r3, r3, #5
   187d4:	orrs	r2, r3, r2
   187d8:	movwne	r1, #1
   187dc:	movwne	r0, #1
   187e0:	cmp	r1, #0
   187e4:	beq	18814 <__assert_fail@plt+0x750c>
   187e8:	mvn	r2, #-2147483648	; 0x80000000
   187ec:	udiv	r2, r2, r1
   187f0:	cmp	r2, r0
   187f4:	bcs	18814 <__assert_fail@plt+0x750c>
   187f8:	push	{fp, lr}
   187fc:	mov	fp, sp
   18800:	bl	1120c <__errno_location@plt>
   18804:	mov	r1, #12
   18808:	str	r1, [r0]
   1880c:	mov	r0, #0
   18810:	pop	{fp, pc}
   18814:	b	1105c <calloc@plt>
   18818:	cmp	r0, #0
   1881c:	movweq	r0, #1
   18820:	cmn	r0, #1
   18824:	ble	1882c <__assert_fail@plt+0x7524>
   18828:	b	1117c <malloc@plt>
   1882c:	push	{fp, lr}
   18830:	mov	fp, sp
   18834:	bl	1120c <__errno_location@plt>
   18838:	mov	r1, #12
   1883c:	str	r1, [r0]
   18840:	mov	r0, #0
   18844:	pop	{fp, pc}
   18848:	push	{fp, lr}
   1884c:	mov	fp, sp
   18850:	cmp	r0, #0
   18854:	beq	18870 <__assert_fail@plt+0x7568>
   18858:	cmp	r1, #0
   1885c:	beq	1887c <__assert_fail@plt+0x7574>
   18860:	cmn	r1, #1
   18864:	ble	18888 <__assert_fail@plt+0x7580>
   18868:	pop	{fp, lr}
   1886c:	b	11104 <realloc@plt>
   18870:	mov	r0, r1
   18874:	pop	{fp, lr}
   18878:	b	18818 <__assert_fail@plt+0x7510>
   1887c:	bl	1430c <__assert_fail@plt+0x3004>
   18880:	mov	r0, #0
   18884:	pop	{fp, pc}
   18888:	bl	1120c <__errno_location@plt>
   1888c:	mov	r1, #12
   18890:	str	r1, [r0]
   18894:	mov	r0, #0
   18898:	pop	{fp, pc}
   1889c:	push	{r4, r5, r6, sl, fp, lr}
   188a0:	add	fp, sp, #16
   188a4:	mov	r4, r0
   188a8:	bl	1114c <__fpending@plt>
   188ac:	ldr	r6, [r4]
   188b0:	mov	r5, r0
   188b4:	mov	r0, r4
   188b8:	bl	14164 <__assert_fail@plt+0x2e5c>
   188bc:	tst	r6, #32
   188c0:	bne	188f8 <__assert_fail@plt+0x75f0>
   188c4:	cmp	r0, #0
   188c8:	mov	r4, r0
   188cc:	mvnne	r4, #0
   188d0:	cmp	r5, #0
   188d4:	bne	18904 <__assert_fail@plt+0x75fc>
   188d8:	cmp	r0, #0
   188dc:	beq	18904 <__assert_fail@plt+0x75fc>
   188e0:	bl	1120c <__errno_location@plt>
   188e4:	ldr	r0, [r0]
   188e8:	subs	r4, r0, #9
   188ec:	mvnne	r4, #0
   188f0:	mov	r0, r4
   188f4:	pop	{r4, r5, r6, sl, fp, pc}
   188f8:	mvn	r4, #0
   188fc:	cmp	r0, #0
   18900:	beq	1890c <__assert_fail@plt+0x7604>
   18904:	mov	r0, r4
   18908:	pop	{r4, r5, r6, sl, fp, pc}
   1890c:	bl	1120c <__errno_location@plt>
   18910:	mov	r1, #0
   18914:	str	r1, [r0]
   18918:	mov	r0, r4
   1891c:	pop	{r4, r5, r6, sl, fp, pc}
   18920:	sub	sp, sp, #8
   18924:	push	{r4, r5, r6, r7, fp, lr}
   18928:	add	fp, sp, #16
   1892c:	sub	sp, sp, #8
   18930:	mov	r5, r0
   18934:	add	r0, fp, #8
   18938:	cmp	r1, #11
   1893c:	str	r2, [fp, #8]
   18940:	str	r3, [fp, #12]
   18944:	str	r0, [sp, #4]
   18948:	bhi	18984 <__assert_fail@plt+0x767c>
   1894c:	mov	r0, #1
   18950:	movw	r2, #1300	; 0x514
   18954:	tst	r2, r0, lsl r1
   18958:	bne	18a44 <__assert_fail@plt+0x773c>
   1895c:	movw	r2, #2570	; 0xa0a
   18960:	tst	r2, r0, lsl r1
   18964:	bne	189ac <__assert_fail@plt+0x76a4>
   18968:	cmp	r1, #0
   1896c:	bne	18984 <__assert_fail@plt+0x767c>
   18970:	ldr	r0, [sp, #4]
   18974:	add	r1, r0, #4
   18978:	str	r1, [sp, #4]
   1897c:	mov	r1, #0
   18980:	b	18a50 <__assert_fail@plt+0x7748>
   18984:	sub	r0, r1, #1024	; 0x400
   18988:	cmp	r0, #10
   1898c:	bhi	18a44 <__assert_fail@plt+0x773c>
   18990:	mov	r2, #1
   18994:	movw	r3, #645	; 0x285
   18998:	tst	r3, r2, lsl r0
   1899c:	bne	18a44 <__assert_fail@plt+0x773c>
   189a0:	movw	r3, #1282	; 0x502
   189a4:	tst	r3, r2, lsl r0
   189a8:	beq	189b8 <__assert_fail@plt+0x76b0>
   189ac:	mov	r0, r5
   189b0:	bl	11278 <fcntl64@plt>
   189b4:	b	18a5c <__assert_fail@plt+0x7754>
   189b8:	cmp	r0, #6
   189bc:	bne	18a44 <__assert_fail@plt+0x773c>
   189c0:	ldr	r0, [sp, #4]
   189c4:	movw	r7, #45880	; 0xb338
   189c8:	movt	r7, #2
   189cc:	add	r1, r0, #4
   189d0:	str	r1, [sp, #4]
   189d4:	ldr	r6, [r0]
   189d8:	ldr	r0, [r7]
   189dc:	cmp	r0, #0
   189e0:	bmi	18a80 <__assert_fail@plt+0x7778>
   189e4:	mov	r0, r5
   189e8:	movw	r1, #1030	; 0x406
   189ec:	mov	r2, r6
   189f0:	bl	11278 <fcntl64@plt>
   189f4:	mov	r4, r0
   189f8:	cmn	r0, #1
   189fc:	bgt	18a74 <__assert_fail@plt+0x776c>
   18a00:	bl	1120c <__errno_location@plt>
   18a04:	ldr	r0, [r0]
   18a08:	cmp	r0, #22
   18a0c:	bne	18a74 <__assert_fail@plt+0x776c>
   18a10:	mov	r0, r5
   18a14:	mov	r1, #0
   18a18:	mov	r2, r6
   18a1c:	bl	11278 <fcntl64@plt>
   18a20:	mov	r4, r0
   18a24:	cmp	r0, #0
   18a28:	bmi	18a60 <__assert_fail@plt+0x7758>
   18a2c:	mvn	r0, #0
   18a30:	str	r0, [r7]
   18a34:	mov	r0, #1
   18a38:	cmp	r0, #0
   18a3c:	bne	18aac <__assert_fail@plt+0x77a4>
   18a40:	b	18a60 <__assert_fail@plt+0x7758>
   18a44:	ldr	r0, [sp, #4]
   18a48:	add	r2, r0, #4
   18a4c:	str	r2, [sp, #4]
   18a50:	ldr	r2, [r0]
   18a54:	mov	r0, r5
   18a58:	bl	11278 <fcntl64@plt>
   18a5c:	mov	r4, r0
   18a60:	mov	r0, r4
   18a64:	sub	sp, fp, #16
   18a68:	pop	{r4, r5, r6, r7, fp, lr}
   18a6c:	add	sp, sp, #8
   18a70:	bx	lr
   18a74:	mov	r0, #1
   18a78:	str	r0, [r7]
   18a7c:	b	18a60 <__assert_fail@plt+0x7758>
   18a80:	mov	r0, r5
   18a84:	mov	r1, #0
   18a88:	mov	r2, r6
   18a8c:	bl	11278 <fcntl64@plt>
   18a90:	mov	r4, r0
   18a94:	ldr	r0, [r7]
   18a98:	add	r0, r0, #1
   18a9c:	clz	r0, r0
   18aa0:	lsr	r0, r0, #5
   18aa4:	cmp	r0, #0
   18aa8:	beq	18a60 <__assert_fail@plt+0x7758>
   18aac:	cmp	r4, #0
   18ab0:	bmi	18a60 <__assert_fail@plt+0x7758>
   18ab4:	mov	r0, r4
   18ab8:	mov	r1, #1
   18abc:	bl	11278 <fcntl64@plt>
   18ac0:	cmp	r0, #0
   18ac4:	bmi	18ae0 <__assert_fail@plt+0x77d8>
   18ac8:	orr	r2, r0, #1
   18acc:	mov	r0, r4
   18ad0:	mov	r1, #2
   18ad4:	bl	11278 <fcntl64@plt>
   18ad8:	cmn	r0, #1
   18adc:	bne	18a60 <__assert_fail@plt+0x7758>
   18ae0:	bl	1120c <__errno_location@plt>
   18ae4:	ldr	r6, [r0]
   18ae8:	mov	r5, r0
   18aec:	mov	r0, r4
   18af0:	bl	112fc <close@plt>
   18af4:	str	r6, [r5]
   18af8:	mvn	r4, #0
   18afc:	b	18a60 <__assert_fail@plt+0x7758>
   18b00:	push	{fp, lr}
   18b04:	mov	fp, sp
   18b08:	mov	r0, #14
   18b0c:	bl	112b4 <nl_langinfo@plt>
   18b10:	movw	r1, #39802	; 0x9b7a
   18b14:	cmp	r0, #0
   18b18:	movt	r1, #1
   18b1c:	movne	r1, r0
   18b20:	movw	r0, #41524	; 0xa234
   18b24:	ldrb	r2, [r1]
   18b28:	movt	r0, #1
   18b2c:	cmp	r2, #0
   18b30:	movne	r0, r1
   18b34:	pop	{fp, pc}
   18b38:	push	{r4, r5, r6, r7, fp, lr}
   18b3c:	add	fp, sp, #16
   18b40:	sub	sp, sp, #8
   18b44:	cmp	r0, #0
   18b48:	add	r5, sp, #4
   18b4c:	mov	r7, r2
   18b50:	mov	r4, r1
   18b54:	movne	r5, r0
   18b58:	mov	r0, r5
   18b5c:	bl	11158 <mbrtowc@plt>
   18b60:	mov	r6, r0
   18b64:	cmp	r7, #0
   18b68:	beq	18b90 <__assert_fail@plt+0x7888>
   18b6c:	cmn	r6, #2
   18b70:	bcc	18b90 <__assert_fail@plt+0x7888>
   18b74:	mov	r0, #0
   18b78:	bl	143dc <__assert_fail@plt+0x30d4>
   18b7c:	cmp	r0, #0
   18b80:	bne	18b90 <__assert_fail@plt+0x7888>
   18b84:	ldrb	r0, [r4]
   18b88:	mov	r6, #1
   18b8c:	str	r0, [r5]
   18b90:	mov	r0, r6
   18b94:	sub	sp, fp, #16
   18b98:	pop	{r4, r5, r6, r7, fp, pc}
   18b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ba0:	add	fp, sp, #28
   18ba4:	sub	sp, sp, #28
   18ba8:	mov	r4, r3
   18bac:	mov	r6, r2
   18bb0:	mov	r5, r1
   18bb4:	mov	r7, r0
   18bb8:	cmp	r1, r3
   18bbc:	bne	18bd8 <__assert_fail@plt+0x78d0>
   18bc0:	mov	r0, r7
   18bc4:	mov	r1, r6
   18bc8:	mov	r2, r5
   18bcc:	bl	111dc <bcmp@plt>
   18bd0:	cmp	r0, #0
   18bd4:	beq	18ca0 <__assert_fail@plt+0x7998>
   18bd8:	ldrb	r0, [r6, r4]
   18bdc:	mov	r9, #0
   18be0:	str	r4, [sp, #24]
   18be4:	add	r8, r4, #1
   18be8:	str	r5, [sp, #16]
   18bec:	add	sl, r5, #1
   18bf0:	str	r0, [sp, #8]
   18bf4:	ldrb	r0, [r7, r5]
   18bf8:	strb	r9, [r7, r5]
   18bfc:	strb	r9, [r6, r4]
   18c00:	str	r0, [sp, #4]
   18c04:	bl	1120c <__errno_location@plt>
   18c08:	mov	r4, r7
   18c0c:	mov	r5, r0
   18c10:	mov	r7, r6
   18c14:	str	r6, [sp, #20]
   18c18:	str	r4, [sp, #12]
   18c1c:	mov	r0, r4
   18c20:	mov	r1, r7
   18c24:	str	r9, [r5]
   18c28:	bl	11170 <strcoll@plt>
   18c2c:	cmp	r0, #0
   18c30:	bne	18c80 <__assert_fail@plt+0x7978>
   18c34:	mov	r0, r4
   18c38:	bl	111f4 <strlen@plt>
   18c3c:	add	r6, r0, #1
   18c40:	mov	r0, r7
   18c44:	sub	sl, sl, r6
   18c48:	bl	111f4 <strlen@plt>
   18c4c:	add	r0, r0, #1
   18c50:	cmp	sl, #0
   18c54:	sub	r8, r8, r0
   18c58:	beq	18c74 <__assert_fail@plt+0x796c>
   18c5c:	add	r4, r4, r6
   18c60:	add	r7, r7, r0
   18c64:	cmp	r8, #0
   18c68:	bne	18c1c <__assert_fail@plt+0x7914>
   18c6c:	mov	r0, #1
   18c70:	b	18c80 <__assert_fail@plt+0x7978>
   18c74:	cmp	r8, #0
   18c78:	mvnne	r8, #0
   18c7c:	mov	r0, r8
   18c80:	ldr	r1, [sp, #24]
   18c84:	ldr	r2, [sp, #20]
   18c88:	ldr	r3, [sp, #16]
   18c8c:	ldmib	sp, {r5, r6, r7}
   18c90:	strb	r5, [r7, r3]
   18c94:	strb	r6, [r2, r1]
   18c98:	sub	sp, fp, #28
   18c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ca0:	bl	1120c <__errno_location@plt>
   18ca4:	mov	r1, r0
   18ca8:	mov	r0, #0
   18cac:	str	r0, [r1]
   18cb0:	sub	sp, fp, #28
   18cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cbc:	add	fp, sp, #28
   18cc0:	sub	sp, sp, #4
   18cc4:	mov	sl, r3
   18cc8:	mov	r5, r2
   18ccc:	mov	r6, r1
   18cd0:	mov	r7, r0
   18cd4:	cmp	r1, r3
   18cd8:	bne	18cf4 <__assert_fail@plt+0x79ec>
   18cdc:	mov	r0, r7
   18ce0:	mov	r1, r5
   18ce4:	mov	r2, r6
   18ce8:	bl	111dc <bcmp@plt>
   18cec:	cmp	r0, #0
   18cf0:	beq	18d70 <__assert_fail@plt+0x7a68>
   18cf4:	bl	1120c <__errno_location@plt>
   18cf8:	mov	r8, r0
   18cfc:	mov	r9, #0
   18d00:	mov	r0, r7
   18d04:	mov	r1, r5
   18d08:	str	r9, [r8]
   18d0c:	bl	11170 <strcoll@plt>
   18d10:	cmp	r0, #0
   18d14:	bne	18d54 <__assert_fail@plt+0x7a4c>
   18d18:	mov	r0, r7
   18d1c:	bl	111f4 <strlen@plt>
   18d20:	add	r4, r0, #1
   18d24:	mov	r0, r5
   18d28:	sub	r6, r6, r4
   18d2c:	bl	111f4 <strlen@plt>
   18d30:	add	r0, r0, #1
   18d34:	cmp	r6, #0
   18d38:	sub	sl, sl, r0
   18d3c:	beq	18d5c <__assert_fail@plt+0x7a54>
   18d40:	add	r7, r7, r4
   18d44:	add	r5, r5, r0
   18d48:	cmp	sl, #0
   18d4c:	bne	18d00 <__assert_fail@plt+0x79f8>
   18d50:	mov	r0, #1
   18d54:	sub	sp, fp, #28
   18d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d5c:	cmp	sl, #0
   18d60:	mvnne	sl, #0
   18d64:	mov	r0, sl
   18d68:	sub	sp, fp, #28
   18d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d70:	bl	1120c <__errno_location@plt>
   18d74:	mov	r1, r0
   18d78:	mov	r0, #0
   18d7c:	str	r0, [r1]
   18d80:	sub	sp, fp, #28
   18d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d88:	cmp	r2, #0
   18d8c:	beq	18dbc <__assert_fail@plt+0x7ab4>
   18d90:	mvn	r3, #0
   18d94:	udiv	r3, r3, r2
   18d98:	cmp	r3, r1
   18d9c:	bcs	18dbc <__assert_fail@plt+0x7ab4>
   18da0:	push	{fp, lr}
   18da4:	mov	fp, sp
   18da8:	bl	1120c <__errno_location@plt>
   18dac:	mov	r1, #12
   18db0:	str	r1, [r0]
   18db4:	mov	r0, #0
   18db8:	pop	{fp, pc}
   18dbc:	mul	r1, r2, r1
   18dc0:	b	18848 <__assert_fail@plt+0x7540>
   18dc4:	cmp	r3, #0
   18dc8:	cmpeq	r2, #0
   18dcc:	bne	18de4 <__assert_fail@plt+0x7adc>
   18dd0:	cmp	r1, #0
   18dd4:	cmpeq	r0, #0
   18dd8:	mvnne	r1, #0
   18ddc:	mvnne	r0, #0
   18de0:	b	18e00 <__assert_fail@plt+0x7af8>
   18de4:	sub	sp, sp, #8
   18de8:	push	{sp, lr}
   18dec:	bl	18e10 <__assert_fail@plt+0x7b08>
   18df0:	ldr	lr, [sp, #4]
   18df4:	add	sp, sp, #8
   18df8:	pop	{r2, r3}
   18dfc:	bx	lr
   18e00:	push	{r1, lr}
   18e04:	mov	r0, #8
   18e08:	bl	11074 <raise@plt>
   18e0c:	pop	{r1, pc}
   18e10:	cmp	r1, r3
   18e14:	cmpeq	r0, r2
   18e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e1c:	mov	r4, r0
   18e20:	movcc	r0, #0
   18e24:	mov	r5, r1
   18e28:	ldr	lr, [sp, #36]	; 0x24
   18e2c:	movcc	r1, r0
   18e30:	bcc	18f2c <__assert_fail@plt+0x7c24>
   18e34:	cmp	r3, #0
   18e38:	clzeq	ip, r2
   18e3c:	clzne	ip, r3
   18e40:	addeq	ip, ip, #32
   18e44:	cmp	r5, #0
   18e48:	clzeq	r1, r4
   18e4c:	addeq	r1, r1, #32
   18e50:	clzne	r1, r5
   18e54:	sub	ip, ip, r1
   18e58:	sub	sl, ip, #32
   18e5c:	lsl	r9, r3, ip
   18e60:	rsb	fp, ip, #32
   18e64:	orr	r9, r9, r2, lsl sl
   18e68:	orr	r9, r9, r2, lsr fp
   18e6c:	lsl	r8, r2, ip
   18e70:	cmp	r5, r9
   18e74:	cmpeq	r4, r8
   18e78:	movcc	r0, #0
   18e7c:	movcc	r1, r0
   18e80:	bcc	18e9c <__assert_fail@plt+0x7b94>
   18e84:	mov	r0, #1
   18e88:	subs	r4, r4, r8
   18e8c:	lsl	r1, r0, sl
   18e90:	orr	r1, r1, r0, lsr fp
   18e94:	lsl	r0, r0, ip
   18e98:	sbc	r5, r5, r9
   18e9c:	cmp	ip, #0
   18ea0:	beq	18f2c <__assert_fail@plt+0x7c24>
   18ea4:	lsr	r6, r8, #1
   18ea8:	orr	r6, r6, r9, lsl #31
   18eac:	lsr	r7, r9, #1
   18eb0:	mov	r2, ip
   18eb4:	b	18ed8 <__assert_fail@plt+0x7bd0>
   18eb8:	subs	r3, r4, r6
   18ebc:	sbc	r8, r5, r7
   18ec0:	adds	r3, r3, r3
   18ec4:	adc	r8, r8, r8
   18ec8:	adds	r4, r3, #1
   18ecc:	adc	r5, r8, #0
   18ed0:	subs	r2, r2, #1
   18ed4:	beq	18ef4 <__assert_fail@plt+0x7bec>
   18ed8:	cmp	r5, r7
   18edc:	cmpeq	r4, r6
   18ee0:	bcs	18eb8 <__assert_fail@plt+0x7bb0>
   18ee4:	adds	r4, r4, r4
   18ee8:	adc	r5, r5, r5
   18eec:	subs	r2, r2, #1
   18ef0:	bne	18ed8 <__assert_fail@plt+0x7bd0>
   18ef4:	lsr	r3, r4, ip
   18ef8:	orr	r3, r3, r5, lsl fp
   18efc:	lsr	r2, r5, ip
   18f00:	orr	r3, r3, r5, lsr sl
   18f04:	adds	r0, r0, r4
   18f08:	mov	r4, r3
   18f0c:	lsl	r3, r2, ip
   18f10:	orr	r3, r3, r4, lsl sl
   18f14:	lsl	ip, r4, ip
   18f18:	orr	r3, r3, r4, lsr fp
   18f1c:	adc	r1, r1, r5
   18f20:	subs	r0, r0, ip
   18f24:	mov	r5, r2
   18f28:	sbc	r1, r1, r3
   18f2c:	cmp	lr, #0
   18f30:	strdne	r4, [lr]
   18f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f3c:	mov	r7, r0
   18f40:	ldr	r6, [pc, #72]	; 18f90 <__assert_fail@plt+0x7c88>
   18f44:	ldr	r5, [pc, #72]	; 18f94 <__assert_fail@plt+0x7c8c>
   18f48:	add	r6, pc, r6
   18f4c:	add	r5, pc, r5
   18f50:	sub	r6, r6, r5
   18f54:	mov	r8, r1
   18f58:	mov	r9, r2
   18f5c:	bl	11030 <fdopen@plt-0x20>
   18f60:	asrs	r6, r6, #2
   18f64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f68:	mov	r4, #0
   18f6c:	add	r4, r4, #1
   18f70:	ldr	r3, [r5], #4
   18f74:	mov	r2, r9
   18f78:	mov	r1, r8
   18f7c:	mov	r0, r7
   18f80:	blx	r3
   18f84:	cmp	r6, r4
   18f88:	bne	18f6c <__assert_fail@plt+0x7c64>
   18f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f90:			; <UNDEFINED> instruction: 0x00011fbc
   18f94:			; <UNDEFINED> instruction: 0x00011fb4
   18f98:	bx	lr
   18f9c:	ldr	r3, [pc, #12]	; 18fb0 <__assert_fail@plt+0x7ca8>
   18fa0:	mov	r1, #0
   18fa4:	add	r3, pc, r3
   18fa8:	ldr	r2, [r3]
   18fac:	b	11218 <__cxa_atexit@plt>
   18fb0:	andeq	r2, r1, r8, asr r1

Disassembly of section .fini:

00018fb4 <.fini>:
   18fb4:	push	{r3, lr}
   18fb8:	pop	{r3, pc}
