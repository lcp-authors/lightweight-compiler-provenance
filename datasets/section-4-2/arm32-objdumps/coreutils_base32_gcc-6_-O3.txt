
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	11634 <__assert_fail@plt+0x704>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r9, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #102400	; 0x19000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #102400	; 0x19000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #102400	; 0x19000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #102400	; 0x19000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #102400	; 0x19000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #102400	; 0x19000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #102400	; 0x19000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #102400	; 0x19000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #102400	; 0x19000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #102400	; 0x19000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #102400	; 0x19000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #102400	; 0x19000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #102400	; 0x19000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #102400	; 0x19000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #102400	; 0x19000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #102400	; 0x19000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #102400	; 0x19000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #102400	; 0x19000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #102400	; 0x19000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #102400	; 0x19000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #102400	; 0x19000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #102400	; 0x19000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #102400	; 0x19000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #102400	; 0x19000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #102400	; 0x19000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #102400	; 0x19000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #102400	; 0x19000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #102400	; 0x19000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #102400	; 0x19000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #102400	; 0x19000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #102400	; 0x19000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #102400	; 0x19000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #102400	; 0x19000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #102400	; 0x19000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #102400	; 0x19000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #102400	; 0x19000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #102400	; 0x19000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #102400	; 0x19000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #102400	; 0x19000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #102400	; 0x19000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #102400	; 0x19000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #102400	; 0x19000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #102400	; 0x19000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #102400	; 0x19000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f40 <.text>:
   10f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f44:	mov	r7, r0
   10f48:	sub	sp, sp, #60	; 0x3c
   10f4c:	ldr	r0, [r1]
   10f50:	mov	r5, r1
   10f54:	bl	1271c <__assert_fail@plt+0x17ec>
   10f58:	ldr	r1, [pc, #1588]	; 11594 <__assert_fail@plt+0x664>
   10f5c:	mov	r0, #6
   10f60:	bl	10ec4 <setlocale@plt>
   10f64:	ldr	r1, [pc, #1580]	; 11598 <__assert_fail@plt+0x668>
   10f68:	ldr	r0, [pc, #1580]	; 1159c <__assert_fail@plt+0x66c>
   10f6c:	bl	10f00 <bindtextdomain@plt>
   10f70:	ldr	r0, [pc, #1572]	; 1159c <__assert_fail@plt+0x66c>
   10f74:	bl	10d80 <textdomain@plt>
   10f78:	ldr	r0, [pc, #1568]	; 115a0 <__assert_fail@plt+0x670>
   10f7c:	bl	18d94 <__assert_fail@plt+0x7e64>
   10f80:	mov	fp, #0
   10f84:	ldr	r9, [pc, #1560]	; 115a4 <__assert_fail@plt+0x674>
   10f88:	ldr	r8, [pc, #1560]	; 115a8 <__assert_fail@plt+0x678>
   10f8c:	mov	r6, fp
   10f90:	mov	sl, #76	; 0x4c
   10f94:	mov	r4, #0
   10f98:	str	r4, [sp]
   10f9c:	mov	r3, r9
   10fa0:	mov	r2, r8
   10fa4:	mov	r1, r5
   10fa8:	mov	r0, r7
   10fac:	bl	10e10 <getopt_long@plt>
   10fb0:	cmn	r0, #1
   10fb4:	beq	11088 <__assert_fail@plt+0x158>
   10fb8:	cmp	r0, #100	; 0x64
   10fbc:	beq	110dc <__assert_fail@plt+0x1ac>
   10fc0:	bgt	10fdc <__assert_fail@plt+0xac>
   10fc4:	cmn	r0, #3
   10fc8:	beq	11050 <__assert_fail@plt+0x120>
   10fcc:	cmn	r0, #2
   10fd0:	bne	110d4 <__assert_fail@plt+0x1a4>
   10fd4:	mov	r0, r4
   10fd8:	bl	117ac <__assert_fail@plt+0x87c>
   10fdc:	cmp	r0, #105	; 0x69
   10fe0:	beq	11080 <__assert_fail@plt+0x150>
   10fe4:	cmp	r0, #119	; 0x77
   10fe8:	bne	110d4 <__assert_fail@plt+0x1a4>
   10fec:	ldr	r0, [pc, #1464]	; 115ac <__assert_fail@plt+0x67c>
   10ff0:	ldr	r3, [pc, #1436]	; 11594 <__assert_fail@plt+0x664>
   10ff4:	mov	r1, r4
   10ff8:	str	r3, [sp]
   10ffc:	mov	r2, #10
   11000:	add	r3, sp, #40	; 0x28
   11004:	ldr	r0, [r0]
   11008:	bl	17830 <__assert_fail@plt+0x6900>
   1100c:	cmp	r0, #1
   11010:	bhi	112c8 <__assert_fail@plt+0x398>
   11014:	ldrd	r2, [sp, #40]	; 0x28
   11018:	cmp	r2, #0
   1101c:	sbcs	r1, r3, #0
   11020:	blt	112c8 <__assert_fail@plt+0x398>
   11024:	eor	ip, r0, #1
   11028:	mvn	r0, #-2147483648	; 0x80000000
   1102c:	cmp	r0, r2
   11030:	mov	r1, #0
   11034:	sbcs	r1, r1, r3
   11038:	movlt	r0, #0
   1103c:	andge	r0, ip, #1
   11040:	cmp	r0, #0
   11044:	moveq	r2, #0
   11048:	mov	sl, r2
   1104c:	b	10f94 <__assert_fail@plt+0x64>
   11050:	ldr	r1, [pc, #1368]	; 115b0 <__assert_fail@plt+0x680>
   11054:	ldr	r3, [pc, #1368]	; 115b4 <__assert_fail@plt+0x684>
   11058:	ldr	r2, [pc, #1368]	; 115b8 <__assert_fail@plt+0x688>
   1105c:	str	r4, [sp, #4]
   11060:	ldr	r0, [r1]
   11064:	ldr	r3, [r3]
   11068:	ldr	r1, [pc, #1356]	; 115bc <__assert_fail@plt+0x68c>
   1106c:	str	r2, [sp]
   11070:	ldr	r2, [pc, #1352]	; 115c0 <__assert_fail@plt+0x690>
   11074:	bl	16fbc <__assert_fail@plt+0x608c>
   11078:	mov	r0, r4
   1107c:	bl	10e28 <exit@plt>
   11080:	mov	fp, #1
   11084:	b	10f94 <__assert_fail@plt+0x64>
   11088:	ldr	r8, [pc, #1332]	; 115c4 <__assert_fail@plt+0x694>
   1108c:	ldr	r3, [r8]
   11090:	sub	r2, r7, r3
   11094:	cmp	r2, #1
   11098:	ble	110e4 <__assert_fail@plt+0x1b4>
   1109c:	mov	r2, #5
   110a0:	ldr	r1, [pc, #1312]	; 115c8 <__assert_fail@plt+0x698>
   110a4:	mov	r0, r4
   110a8:	bl	10d68 <dcgettext@plt>
   110ac:	ldr	r3, [r8]
   110b0:	add	r3, r3, #1
   110b4:	mov	r6, r0
   110b8:	ldr	r0, [r5, r3, lsl #2]
   110bc:	bl	165e8 <__assert_fail@plt+0x56b8>
   110c0:	mov	r2, r6
   110c4:	mov	r1, r4
   110c8:	mov	r3, r0
   110cc:	mov	r0, r4
   110d0:	bl	10dd4 <error@plt>
   110d4:	mov	r0, #1
   110d8:	bl	117ac <__assert_fail@plt+0x87c>
   110dc:	mov	r6, #1
   110e0:	b	10f94 <__assert_fail@plt+0x64>
   110e4:	cmp	r7, r3
   110e8:	ble	112b4 <__assert_fail@plt+0x384>
   110ec:	ldr	r3, [r5, r3, lsl #2]
   110f0:	ldr	r1, [pc, #1236]	; 115cc <__assert_fail@plt+0x69c>
   110f4:	mov	r0, r3
   110f8:	str	r3, [sp, #28]
   110fc:	bl	10ce4 <strcmp@plt>
   11100:	cmp	r0, #0
   11104:	beq	112bc <__assert_fail@plt+0x38c>
   11108:	ldr	r1, [pc, #1216]	; 115d0 <__assert_fail@plt+0x6a0>
   1110c:	ldr	r0, [sp, #28]
   11110:	bl	10ef4 <fopen64@plt>
   11114:	subs	r8, r0, #0
   11118:	beq	11540 <__assert_fail@plt+0x610>
   1111c:	mov	r1, #2
   11120:	mov	r0, r8
   11124:	bl	124f0 <__assert_fail@plt+0x15c0>
   11128:	cmp	r6, #0
   1112c:	beq	11300 <__assert_fail@plt+0x3d0>
   11130:	ldr	r3, [pc, #1144]	; 115b0 <__assert_fail@plt+0x680>
   11134:	mov	r0, #8192	; 0x2000
   11138:	ldr	r3, [r3]
   1113c:	str	r3, [sp, #16]
   11140:	bl	171a4 <__assert_fail@plt+0x6274>
   11144:	mov	r5, r0
   11148:	mov	r0, #5120	; 0x1400
   1114c:	bl	171a4 <__assert_fail@plt+0x6274>
   11150:	str	r0, [sp, #20]
   11154:	add	r0, sp, #40	; 0x28
   11158:	bl	11df0 <__assert_fail@plt+0xec0>
   1115c:	str	fp, [sp, #12]
   11160:	ldr	fp, [sp, #12]
   11164:	mov	r4, #0
   11168:	mov	r3, r8
   1116c:	rsb	r2, r4, #8192	; 0x2000
   11170:	mov	r1, #1
   11174:	add	r0, r5, r4
   11178:	bl	10f0c <fread_unlocked@plt>
   1117c:	cmp	fp, #0
   11180:	mov	r9, r0
   11184:	beq	111d8 <__assert_fail@plt+0x2a8>
   11188:	cmp	r0, #0
   1118c:	ble	111d8 <__assert_fail@plt+0x2a8>
   11190:	mov	r7, #0
   11194:	mov	sl, r5
   11198:	ldrb	r6, [sl, r4]
   1119c:	mov	r0, r6
   111a0:	bl	11dd4 <__assert_fail@plt+0xea4>
   111a4:	cmp	r6, #61	; 0x3d
   111a8:	orreq	r0, r0, #1
   111ac:	tst	r0, #255	; 0xff
   111b0:	bne	112a0 <__assert_fail@plt+0x370>
   111b4:	add	r0, r7, r4
   111b8:	sub	r9, r9, #1
   111bc:	add	r1, r0, #1
   111c0:	add	r1, r5, r1
   111c4:	add	r0, r5, r0
   111c8:	sub	r2, r9, r7
   111cc:	bl	10d08 <memmove@plt>
   111d0:	cmp	r7, r9
   111d4:	blt	11198 <__assert_fail@plt+0x268>
   111d8:	ldr	r3, [r8]
   111dc:	add	r4, r4, r9
   111e0:	ands	sl, r3, #32
   111e4:	bne	114f8 <__assert_fail@plt+0x5c8>
   111e8:	ldr	r2, [pc, #996]	; 115d4 <__assert_fail@plt+0x6a4>
   111ec:	cmp	r4, r2
   111f0:	bgt	111fc <__assert_fail@plt+0x2cc>
   111f4:	tst	r3, #16
   111f8:	beq	11168 <__assert_fail@plt+0x238>
   111fc:	mov	r6, sl
   11200:	ldr	fp, [sp, #16]
   11204:	ldr	r7, [sp, #20]
   11208:	b	1126c <__assert_fail@plt+0x33c>
   1120c:	cmp	r6, #0
   11210:	bne	11160 <__assert_fail@plt+0x230>
   11214:	mov	r2, r4
   11218:	mov	r3, #5120	; 0x1400
   1121c:	str	r3, [sp, #36]	; 0x24
   11220:	add	r3, sp, #36	; 0x24
   11224:	str	r3, [sp]
   11228:	mov	r1, r5
   1122c:	mov	r3, r7
   11230:	add	r0, sp, #40	; 0x28
   11234:	bl	11dfc <__assert_fail@plt+0xecc>
   11238:	mov	r3, fp
   1123c:	ldr	r2, [sp, #36]	; 0x24
   11240:	mov	r1, #1
   11244:	mov	r9, r0
   11248:	mov	r0, r7
   1124c:	bl	10d44 <fwrite_unlocked@plt>
   11250:	ldr	r3, [sp, #36]	; 0x24
   11254:	cmp	r0, r3
   11258:	bcc	114d0 <__assert_fail@plt+0x5a0>
   1125c:	cmp	r9, #0
   11260:	beq	11508 <__assert_fail@plt+0x5d8>
   11264:	ldr	r3, [r8]
   11268:	add	r6, r6, #1
   1126c:	tst	r3, #16
   11270:	beq	1120c <__assert_fail@plt+0x2dc>
   11274:	cmp	r6, #2
   11278:	beq	113a8 <__assert_fail@plt+0x478>
   1127c:	cmp	r6, #1
   11280:	bne	11214 <__assert_fail@plt+0x2e4>
   11284:	ldr	r3, [sp, #40]	; 0x28
   11288:	cmp	r3, #0
   1128c:	beq	113a8 <__assert_fail@plt+0x478>
   11290:	mov	r3, #5120	; 0x1400
   11294:	str	r3, [sp, #36]	; 0x24
   11298:	mov	r2, sl
   1129c:	b	11220 <__assert_fail@plt+0x2f0>
   112a0:	add	r7, r7, #1
   112a4:	cmp	r7, r9
   112a8:	bge	111d8 <__assert_fail@plt+0x2a8>
   112ac:	add	sl, r5, r7
   112b0:	b	11198 <__assert_fail@plt+0x268>
   112b4:	ldr	r3, [pc, #784]	; 115cc <__assert_fail@plt+0x69c>
   112b8:	str	r3, [sp, #28]
   112bc:	ldr	r3, [pc, #788]	; 115d8 <__assert_fail@plt+0x6a8>
   112c0:	ldr	r8, [r3]
   112c4:	b	1111c <__assert_fail@plt+0x1ec>
   112c8:	mov	r2, #5
   112cc:	ldr	r1, [pc, #776]	; 115dc <__assert_fail@plt+0x6ac>
   112d0:	mov	r0, #0
   112d4:	bl	10d68 <dcgettext@plt>
   112d8:	ldr	r3, [pc, #716]	; 115ac <__assert_fail@plt+0x67c>
   112dc:	mov	r4, r0
   112e0:	ldr	r0, [r3]
   112e4:	bl	165e8 <__assert_fail@plt+0x56b8>
   112e8:	mov	r3, r4
   112ec:	ldr	r2, [pc, #748]	; 115e0 <__assert_fail@plt+0x6b0>
   112f0:	mov	r1, #0
   112f4:	str	r0, [sp]
   112f8:	mov	r0, #1
   112fc:	bl	10dd4 <error@plt>
   11300:	ldr	r3, [pc, #680]	; 115b0 <__assert_fail@plt+0x680>
   11304:	mov	r0, #30720	; 0x7800
   11308:	ldr	fp, [r3]
   1130c:	bl	171a4 <__assert_fail@plt+0x6274>
   11310:	mov	r4, r0
   11314:	mov	r0, #49152	; 0xc000
   11318:	bl	171a4 <__assert_fail@plt+0x6274>
   1131c:	str	sl, [sp, #16]
   11320:	mov	sl, r4
   11324:	str	r0, [sp, #12]
   11328:	mov	r5, #0
   1132c:	mov	r4, #1
   11330:	b	11340 <__assert_fail@plt+0x410>
   11334:	ldr	r3, [pc, #680]	; 115e4 <__assert_fail@plt+0x6b4>
   11338:	cmp	r5, r3
   1133c:	bgt	113b4 <__assert_fail@plt+0x484>
   11340:	mov	r3, r8
   11344:	rsb	r2, r5, #30720	; 0x7800
   11348:	add	r0, sl, r5
   1134c:	mov	r1, r4
   11350:	bl	10f0c <fread_unlocked@plt>
   11354:	ldr	r3, [r8]
   11358:	tst	r3, #48	; 0x30
   1135c:	add	r5, r5, r0
   11360:	beq	11334 <__assert_fail@plt+0x404>
   11364:	cmp	r5, #0
   11368:	bgt	113b4 <__assert_fail@plt+0x484>
   1136c:	ldr	sl, [sp, #16]
   11370:	cmp	sl, #0
   11374:	cmpne	r6, #0
   11378:	ble	113a0 <__assert_fail@plt+0x470>
   1137c:	ldr	r3, [fp, #20]
   11380:	ldr	r2, [fp, #24]
   11384:	cmp	r3, r2
   11388:	addcc	r1, r3, #1
   1138c:	movcc	r2, #10
   11390:	strcc	r1, [fp, #20]
   11394:	strbcc	r2, [r3]
   11398:	bcs	11528 <__assert_fail@plt+0x5f8>
   1139c:	ldr	r3, [r8]
   113a0:	tst	r3, #32
   113a4:	bne	114f8 <__assert_fail@plt+0x5c8>
   113a8:	ldr	r1, [sp, #28]
   113ac:	mov	r0, r8
   113b0:	bl	11720 <__assert_fail@plt+0x7f0>
   113b4:	mov	r1, #5
   113b8:	add	r0, r5, #4
   113bc:	bl	188e4 <__assert_fail@plt+0x79b4>
   113c0:	ldr	r2, [sp, #12]
   113c4:	mov	r1, r5
   113c8:	lsl	r9, r0, #3
   113cc:	mov	r3, r9
   113d0:	mov	r0, sl
   113d4:	bl	11af8 <__assert_fail@plt+0xbc8>
   113d8:	ldr	r3, [sp, #16]
   113dc:	cmp	r3, #0
   113e0:	beq	114b0 <__assert_fail@plt+0x580>
   113e4:	cmp	r9, #0
   113e8:	ble	1147c <__assert_fail@plt+0x54c>
   113ec:	str	r8, [sp, #20]
   113f0:	str	sl, [sp, #24]
   113f4:	mov	r7, #0
   113f8:	ldr	r8, [sp, #16]
   113fc:	ldr	sl, [sp, #12]
   11400:	b	11430 <__assert_fail@plt+0x500>
   11404:	ldr	r3, [fp, #20]
   11408:	ldr	r2, [fp, #24]
   1140c:	cmp	r3, r2
   11410:	bcs	11494 <__assert_fail@plt+0x564>
   11414:	add	r2, r3, #1
   11418:	mov	r6, r4
   1141c:	str	r2, [fp, #20]
   11420:	mov	r2, #10
   11424:	strb	r2, [r3]
   11428:	cmp	r7, r9
   1142c:	bge	11474 <__assert_fail@plt+0x544>
   11430:	sub	r4, r9, r7
   11434:	sub	r3, r8, r6
   11438:	cmp	r4, r3
   1143c:	movge	r4, r3
   11440:	cmp	r4, #0
   11444:	beq	11404 <__assert_fail@plt+0x4d4>
   11448:	ldr	r3, [pc, #352]	; 115b0 <__assert_fail@plt+0x680>
   1144c:	mov	r2, r4
   11450:	mov	r1, #1
   11454:	ldr	r3, [r3]
   11458:	add	r0, sl, r7
   1145c:	bl	10d44 <fwrite_unlocked@plt>
   11460:	cmp	r4, r0
   11464:	bhi	114d0 <__assert_fail@plt+0x5a0>
   11468:	add	r6, r6, r4
   1146c:	add	r7, r7, r4
   11470:	b	11428 <__assert_fail@plt+0x4f8>
   11474:	ldr	r8, [sp, #20]
   11478:	ldr	sl, [sp, #24]
   1147c:	ldr	r3, [r8]
   11480:	and	r2, r3, #48	; 0x30
   11484:	cmp	r5, #30720	; 0x7800
   11488:	cmpeq	r2, #0
   1148c:	beq	11328 <__assert_fail@plt+0x3f8>
   11490:	b	1136c <__assert_fail@plt+0x43c>
   11494:	mov	r1, #10
   11498:	mov	r0, fp
   1149c:	bl	10eb8 <__overflow@plt>
   114a0:	cmn	r0, #1
   114a4:	beq	1156c <__assert_fail@plt+0x63c>
   114a8:	mov	r6, r4
   114ac:	b	11428 <__assert_fail@plt+0x4f8>
   114b0:	ldr	r3, [pc, #248]	; 115b0 <__assert_fail@plt+0x680>
   114b4:	mov	r2, r9
   114b8:	mov	r1, #1
   114bc:	ldr	r3, [r3]
   114c0:	ldr	r0, [sp, #12]
   114c4:	bl	10d44 <fwrite_unlocked@plt>
   114c8:	cmp	r9, r0
   114cc:	bls	1147c <__assert_fail@plt+0x54c>
   114d0:	bl	10e4c <__errno_location@plt>
   114d4:	ldr	r1, [pc, #268]	; 115e8 <__assert_fail@plt+0x6b8>
   114d8:	mov	r2, #5
   114dc:	ldr	r4, [r0]
   114e0:	mov	r0, #0
   114e4:	bl	10d68 <dcgettext@plt>
   114e8:	mov	r1, r4
   114ec:	mov	r2, r0
   114f0:	mov	r0, #1
   114f4:	bl	10dd4 <error@plt>
   114f8:	bl	10e4c <__errno_location@plt>
   114fc:	mov	r2, #5
   11500:	ldr	r1, [pc, #228]	; 115ec <__assert_fail@plt+0x6bc>
   11504:	b	114dc <__assert_fail@plt+0x5ac>
   11508:	mov	r2, #5
   1150c:	ldr	r1, [pc, #220]	; 115f0 <__assert_fail@plt+0x6c0>
   11510:	mov	r0, r9
   11514:	bl	10d68 <dcgettext@plt>
   11518:	mov	r1, r9
   1151c:	mov	r2, r0
   11520:	mov	r0, #1
   11524:	bl	10dd4 <error@plt>
   11528:	mov	r0, fp
   1152c:	mov	r1, #10
   11530:	bl	10eb8 <__overflow@plt>
   11534:	cmn	r0, #1
   11538:	beq	114d0 <__assert_fail@plt+0x5a0>
   1153c:	b	1139c <__assert_fail@plt+0x46c>
   11540:	bl	10e4c <__errno_location@plt>
   11544:	ldr	r2, [sp, #28]
   11548:	mov	r1, #3
   1154c:	ldr	r4, [r0]
   11550:	mov	r0, r8
   11554:	bl	156f4 <__assert_fail@plt+0x47c4>
   11558:	mov	r1, r4
   1155c:	ldr	r2, [pc, #144]	; 115f4 <__assert_fail@plt+0x6c4>
   11560:	mov	r3, r0
   11564:	mov	r0, #1
   11568:	bl	10dd4 <error@plt>
   1156c:	bl	10e4c <__errno_location@plt>
   11570:	mov	r2, #5
   11574:	ldr	r1, [pc, #108]	; 115e8 <__assert_fail@plt+0x6b8>
   11578:	ldr	r5, [r0]
   1157c:	mov	r0, r4
   11580:	bl	10d68 <dcgettext@plt>
   11584:	mov	r1, r5
   11588:	mov	r2, r0
   1158c:	mov	r0, #1
   11590:	bl	10dd4 <error@plt>
   11594:	andeq	r9, r1, r8, lsr #1
   11598:	ldrdeq	r9, [r1], -ip
   1159c:	andeq	r9, r1, r4, lsr r2
   115a0:	andeq	r2, r1, r0, lsl #8
   115a4:	strdeq	r8, [r1], -r0
   115a8:	andeq	r9, r1, r0, lsr #6
   115ac:	andeq	sl, r2, r8, asr r1
   115b0:	andeq	sl, r2, r4, asr r1
   115b4:	andeq	sl, r2, ip, ror #1
   115b8:	andeq	r9, r1, r0, lsl r3
   115bc:	andeq	r8, r1, ip, ror #28
   115c0:	andeq	r9, r1, r0, lsr r2
   115c4:	andeq	sl, r2, r0, asr #2
   115c8:	andeq	r9, r1, r8, lsr #6
   115cc:	andeq	r8, r1, r0, asr lr
   115d0:	andeq	r9, r1, ip, lsr r3
   115d4:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   115d8:	andeq	sl, r2, r0, asr r1
   115dc:	strdeq	r9, [r1], -r4
   115e0:	andeq	r9, r1, r8, lsl #6
   115e4:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   115e8:	andeq	r9, r1, ip, asr #6
   115ec:	andeq	r9, r1, r0, asr #6
   115f0:	andeq	r9, r1, r8, asr r3
   115f4:	andeq	r9, r1, ip, lsl #6
   115f8:	mov	fp, #0
   115fc:	mov	lr, #0
   11600:	pop	{r1}		; (ldr r1, [sp], #4)
   11604:	mov	r2, sp
   11608:	push	{r2}		; (str r2, [sp, #-4]!)
   1160c:	push	{r0}		; (str r0, [sp, #-4]!)
   11610:	ldr	ip, [pc, #16]	; 11628 <__assert_fail@plt+0x6f8>
   11614:	push	{ip}		; (str ip, [sp, #-4]!)
   11618:	ldr	r0, [pc, #12]	; 1162c <__assert_fail@plt+0x6fc>
   1161c:	ldr	r3, [pc, #12]	; 11630 <__assert_fail@plt+0x700>
   11620:	bl	10dec <__libc_start_main@plt>
   11624:	bl	10f24 <abort@plt>
   11628:	muleq	r1, r0, sp
   1162c:	andeq	r0, r1, r0, asr #30
   11630:	andeq	r8, r1, r0, lsr sp
   11634:	ldr	r3, [pc, #20]	; 11650 <__assert_fail@plt+0x720>
   11638:	ldr	r2, [pc, #20]	; 11654 <__assert_fail@plt+0x724>
   1163c:	add	r3, pc, r3
   11640:	ldr	r2, [r3, r2]
   11644:	cmp	r2, #0
   11648:	bxeq	lr
   1164c:	b	10e04 <__gmon_start__@plt>
   11650:			; <UNDEFINED> instruction: 0x000189bc
   11654:	andeq	r0, r0, r0, ror #1
   11658:	ldr	r3, [pc, #28]	; 1167c <__assert_fail@plt+0x74c>
   1165c:	ldr	r0, [pc, #28]	; 11680 <__assert_fail@plt+0x750>
   11660:	sub	r3, r3, r0
   11664:	cmp	r3, #6
   11668:	bxls	lr
   1166c:	ldr	r3, [pc, #16]	; 11684 <__assert_fail@plt+0x754>
   11670:	cmp	r3, #0
   11674:	bxeq	lr
   11678:	bx	r3
   1167c:	andeq	sl, r2, r7, lsr r1
   11680:	andeq	sl, r2, r4, lsr r1
   11684:	andeq	r0, r0, r0
   11688:	ldr	r1, [pc, #36]	; 116b4 <__assert_fail@plt+0x784>
   1168c:	ldr	r0, [pc, #36]	; 116b8 <__assert_fail@plt+0x788>
   11690:	sub	r1, r1, r0
   11694:	asr	r1, r1, #2
   11698:	add	r1, r1, r1, lsr #31
   1169c:	asrs	r1, r1, #1
   116a0:	bxeq	lr
   116a4:	ldr	r3, [pc, #16]	; 116bc <__assert_fail@plt+0x78c>
   116a8:	cmp	r3, #0
   116ac:	bxeq	lr
   116b0:	bx	r3
   116b4:	andeq	sl, r2, r4, lsr r1
   116b8:	andeq	sl, r2, r4, lsr r1
   116bc:	andeq	r0, r0, r0
   116c0:	push	{r4, lr}
   116c4:	ldr	r4, [pc, #24]	; 116e4 <__assert_fail@plt+0x7b4>
   116c8:	ldrb	r3, [r4]
   116cc:	cmp	r3, #0
   116d0:	popne	{r4, pc}
   116d4:	bl	11658 <__assert_fail@plt+0x728>
   116d8:	mov	r3, #1
   116dc:	strb	r3, [r4]
   116e0:	pop	{r4, pc}
   116e4:	andeq	sl, r2, ip, asr r1
   116e8:	ldr	r0, [pc, #40]	; 11718 <__assert_fail@plt+0x7e8>
   116ec:	ldr	r3, [r0]
   116f0:	cmp	r3, #0
   116f4:	bne	116fc <__assert_fail@plt+0x7cc>
   116f8:	b	11688 <__assert_fail@plt+0x758>
   116fc:	ldr	r3, [pc, #24]	; 1171c <__assert_fail@plt+0x7ec>
   11700:	cmp	r3, #0
   11704:	beq	116f8 <__assert_fail@plt+0x7c8>
   11708:	push	{r4, lr}
   1170c:	blx	r3
   11710:	pop	{r4, lr}
   11714:	b	11688 <__assert_fail@plt+0x758>
   11718:	andeq	r9, r2, r4, lsl pc
   1171c:	andeq	r0, r0, r0
   11720:	push	{r4, lr}
   11724:	mov	r4, r1
   11728:	bl	12524 <__assert_fail@plt+0x15f4>
   1172c:	cmp	r0, #0
   11730:	beq	1179c <__assert_fail@plt+0x86c>
   11734:	ldr	r1, [pc, #100]	; 117a0 <__assert_fail@plt+0x870>
   11738:	mov	r0, r4
   1173c:	bl	10ce4 <strcmp@plt>
   11740:	subs	r5, r0, #0
   11744:	bne	11770 <__assert_fail@plt+0x840>
   11748:	bl	10e4c <__errno_location@plt>
   1174c:	mov	r2, #5
   11750:	ldr	r1, [pc, #76]	; 117a4 <__assert_fail@plt+0x874>
   11754:	ldr	r4, [r0]
   11758:	mov	r0, r5
   1175c:	bl	10d68 <dcgettext@plt>
   11760:	mov	r1, r4
   11764:	mov	r2, r0
   11768:	mov	r0, #1
   1176c:	bl	10dd4 <error@plt>
   11770:	bl	10e4c <__errno_location@plt>
   11774:	mov	r2, r4
   11778:	mov	r1, #3
   1177c:	ldr	r4, [r0]
   11780:	mov	r0, #0
   11784:	bl	156f4 <__assert_fail@plt+0x47c4>
   11788:	mov	r1, r4
   1178c:	ldr	r2, [pc, #20]	; 117a8 <__assert_fail@plt+0x878>
   11790:	mov	r3, r0
   11794:	mov	r0, #1
   11798:	bl	10dd4 <error@plt>
   1179c:	bl	10e28 <exit@plt>
   117a0:	andeq	r8, r1, r0, asr lr
   117a4:	andeq	r8, r1, r4, asr lr
   117a8:	andeq	r9, r1, ip, lsl #6
   117ac:	subs	r6, r0, #0
   117b0:	push	{r7, lr}
   117b4:	sub	sp, sp, #56	; 0x38
   117b8:	beq	117f4 <__assert_fail@plt+0x8c4>
   117bc:	ldr	r3, [pc, #728]	; 11a9c <__assert_fail@plt+0xb6c>
   117c0:	mov	r2, #5
   117c4:	ldr	r1, [pc, #724]	; 11aa0 <__assert_fail@plt+0xb70>
   117c8:	mov	r0, #0
   117cc:	ldr	r4, [r3]
   117d0:	bl	10d68 <dcgettext@plt>
   117d4:	ldr	r3, [pc, #712]	; 11aa4 <__assert_fail@plt+0xb74>
   117d8:	mov	r1, #1
   117dc:	ldr	r3, [r3]
   117e0:	mov	r2, r0
   117e4:	mov	r0, r4
   117e8:	bl	10e88 <__fprintf_chk@plt>
   117ec:	mov	r0, r6
   117f0:	bl	10e28 <exit@plt>
   117f4:	mov	r2, #5
   117f8:	ldr	r1, [pc, #680]	; 11aa8 <__assert_fail@plt+0xb78>
   117fc:	bl	10d68 <dcgettext@plt>
   11800:	ldr	r3, [pc, #668]	; 11aa4 <__assert_fail@plt+0xb74>
   11804:	ldr	r7, [pc, #672]	; 11aac <__assert_fail@plt+0xb7c>
   11808:	ldr	r4, [pc, #672]	; 11ab0 <__assert_fail@plt+0xb80>
   1180c:	ldr	r2, [r3]
   11810:	mov	r1, r0
   11814:	mov	r0, #1
   11818:	bl	10e70 <__printf_chk@plt>
   1181c:	mov	r2, #5
   11820:	ldr	r1, [pc, #652]	; 11ab4 <__assert_fail@plt+0xb84>
   11824:	mov	r0, r6
   11828:	bl	10d68 <dcgettext@plt>
   1182c:	mov	r2, #32
   11830:	mov	r1, r0
   11834:	mov	r0, #1
   11838:	bl	10e70 <__printf_chk@plt>
   1183c:	mov	r2, #5
   11840:	ldr	r1, [pc, #624]	; 11ab8 <__assert_fail@plt+0xb88>
   11844:	mov	r0, r6
   11848:	bl	10d68 <dcgettext@plt>
   1184c:	ldr	r1, [r7]
   11850:	bl	10ccc <fputs_unlocked@plt>
   11854:	mov	r2, #5
   11858:	ldr	r1, [pc, #604]	; 11abc <__assert_fail@plt+0xb8c>
   1185c:	mov	r0, r6
   11860:	bl	10d68 <dcgettext@plt>
   11864:	ldr	r1, [r7]
   11868:	bl	10ccc <fputs_unlocked@plt>
   1186c:	mov	r2, #5
   11870:	ldr	r1, [pc, #584]	; 11ac0 <__assert_fail@plt+0xb90>
   11874:	mov	r0, r6
   11878:	bl	10d68 <dcgettext@plt>
   1187c:	ldr	r1, [r7]
   11880:	bl	10ccc <fputs_unlocked@plt>
   11884:	mov	r2, #5
   11888:	ldr	r1, [pc, #564]	; 11ac4 <__assert_fail@plt+0xb94>
   1188c:	mov	r0, r6
   11890:	bl	10d68 <dcgettext@plt>
   11894:	ldr	r1, [r7]
   11898:	bl	10ccc <fputs_unlocked@plt>
   1189c:	mov	r2, #5
   118a0:	ldr	r1, [pc, #544]	; 11ac8 <__assert_fail@plt+0xb98>
   118a4:	mov	r0, r6
   118a8:	bl	10d68 <dcgettext@plt>
   118ac:	ldr	r1, [r7]
   118b0:	bl	10ccc <fputs_unlocked@plt>
   118b4:	mov	r2, #5
   118b8:	ldr	r1, [pc, #524]	; 11acc <__assert_fail@plt+0xb9c>
   118bc:	mov	r0, r6
   118c0:	bl	10d68 <dcgettext@plt>
   118c4:	ldr	r3, [pc, #516]	; 11ad0 <__assert_fail@plt+0xba0>
   118c8:	mov	r2, r3
   118cc:	mov	r1, r0
   118d0:	mov	r0, #1
   118d4:	bl	10e70 <__printf_chk@plt>
   118d8:	ldm	r4!, {r0, r1, r2, r3}
   118dc:	mov	lr, sp
   118e0:	stmia	lr!, {r0, r1, r2, r3}
   118e4:	ldm	r4!, {r0, r1, r2, r3}
   118e8:	ldr	ip, [sp]
   118ec:	stmia	lr!, {r0, r1, r2, r3}
   118f0:	cmp	ip, #0
   118f4:	ldm	r4!, {r0, r1, r2, r3}
   118f8:	stmia	lr!, {r0, r1, r2, r3}
   118fc:	ldm	r4, {r0, r1}
   11900:	moveq	r4, sp
   11904:	stm	lr, {r0, r1}
   11908:	beq	11938 <__assert_fail@plt+0xa08>
   1190c:	ldr	r5, [pc, #444]	; 11ad0 <__assert_fail@plt+0xba0>
   11910:	mov	r4, sp
   11914:	b	11924 <__assert_fail@plt+0x9f4>
   11918:	ldr	ip, [r4, #8]!
   1191c:	cmp	ip, #0
   11920:	beq	11938 <__assert_fail@plt+0xa08>
   11924:	mov	r1, ip
   11928:	mov	r0, r5
   1192c:	bl	10ce4 <strcmp@plt>
   11930:	cmp	r0, #0
   11934:	bne	11918 <__assert_fail@plt+0x9e8>
   11938:	ldr	r4, [r4, #4]
   1193c:	mov	r2, #5
   11940:	cmp	r4, #0
   11944:	ldr	r1, [pc, #392]	; 11ad4 <__assert_fail@plt+0xba4>
   11948:	beq	119f0 <__assert_fail@plt+0xac0>
   1194c:	mov	r0, #0
   11950:	bl	10d68 <dcgettext@plt>
   11954:	ldr	r3, [pc, #380]	; 11ad8 <__assert_fail@plt+0xba8>
   11958:	ldr	r2, [pc, #380]	; 11adc <__assert_fail@plt+0xbac>
   1195c:	mov	r1, r0
   11960:	mov	r0, #1
   11964:	bl	10e70 <__printf_chk@plt>
   11968:	mov	r1, #0
   1196c:	mov	r0, #5
   11970:	bl	10ec4 <setlocale@plt>
   11974:	cmp	r0, #0
   11978:	ldreq	r5, [pc, #336]	; 11ad0 <__assert_fail@plt+0xba0>
   1197c:	beq	11998 <__assert_fail@plt+0xa68>
   11980:	mov	r2, #3
   11984:	ldr	r1, [pc, #340]	; 11ae0 <__assert_fail@plt+0xbb0>
   11988:	bl	10f18 <strncmp@plt>
   1198c:	ldr	r5, [pc, #316]	; 11ad0 <__assert_fail@plt+0xba0>
   11990:	cmp	r0, #0
   11994:	bne	11a80 <__assert_fail@plt+0xb50>
   11998:	mov	r2, #5
   1199c:	ldr	r1, [pc, #320]	; 11ae4 <__assert_fail@plt+0xbb4>
   119a0:	mov	r0, #0
   119a4:	bl	10d68 <dcgettext@plt>
   119a8:	ldr	r3, [pc, #288]	; 11ad0 <__assert_fail@plt+0xba0>
   119ac:	ldr	r2, [pc, #292]	; 11ad8 <__assert_fail@plt+0xba8>
   119b0:	mov	r1, r0
   119b4:	mov	r0, #1
   119b8:	bl	10e70 <__printf_chk@plt>
   119bc:	mov	r2, #5
   119c0:	ldr	r1, [pc, #288]	; 11ae8 <__assert_fail@plt+0xbb8>
   119c4:	mov	r0, #0
   119c8:	bl	10d68 <dcgettext@plt>
   119cc:	ldr	r2, [pc, #280]	; 11aec <__assert_fail@plt+0xbbc>
   119d0:	cmp	r4, r5
   119d4:	ldr	r3, [pc, #276]	; 11af0 <__assert_fail@plt+0xbc0>
   119d8:	movne	r3, r2
   119dc:	mov	r1, r0
   119e0:	mov	r2, r4
   119e4:	mov	r0, #1
   119e8:	bl	10e70 <__printf_chk@plt>
   119ec:	b	117ec <__assert_fail@plt+0x8bc>
   119f0:	mov	r0, r4
   119f4:	bl	10d68 <dcgettext@plt>
   119f8:	ldr	r3, [pc, #216]	; 11ad8 <__assert_fail@plt+0xba8>
   119fc:	ldr	r2, [pc, #216]	; 11adc <__assert_fail@plt+0xbac>
   11a00:	mov	r1, r0
   11a04:	mov	r0, #1
   11a08:	bl	10e70 <__printf_chk@plt>
   11a0c:	mov	r1, r4
   11a10:	mov	r0, #5
   11a14:	bl	10ec4 <setlocale@plt>
   11a18:	cmp	r0, #0
   11a1c:	beq	11a34 <__assert_fail@plt+0xb04>
   11a20:	mov	r2, #3
   11a24:	ldr	r1, [pc, #180]	; 11ae0 <__assert_fail@plt+0xbb0>
   11a28:	bl	10f18 <strncmp@plt>
   11a2c:	cmp	r0, #0
   11a30:	bne	11a78 <__assert_fail@plt+0xb48>
   11a34:	mov	r2, #5
   11a38:	ldr	r1, [pc, #164]	; 11ae4 <__assert_fail@plt+0xbb4>
   11a3c:	mov	r0, #0
   11a40:	bl	10d68 <dcgettext@plt>
   11a44:	ldr	r3, [pc, #132]	; 11ad0 <__assert_fail@plt+0xba0>
   11a48:	ldr	r2, [pc, #136]	; 11ad8 <__assert_fail@plt+0xba8>
   11a4c:	mov	r4, r3
   11a50:	mov	r1, r0
   11a54:	mov	r0, #1
   11a58:	bl	10e70 <__printf_chk@plt>
   11a5c:	ldr	r1, [pc, #132]	; 11ae8 <__assert_fail@plt+0xbb8>
   11a60:	mov	r2, #5
   11a64:	mov	r0, #0
   11a68:	bl	10d68 <dcgettext@plt>
   11a6c:	ldr	r3, [pc, #124]	; 11af0 <__assert_fail@plt+0xbc0>
   11a70:	mov	r1, r0
   11a74:	b	119e0 <__assert_fail@plt+0xab0>
   11a78:	ldr	r5, [pc, #80]	; 11ad0 <__assert_fail@plt+0xba0>
   11a7c:	mov	r4, r5
   11a80:	mov	r2, #5
   11a84:	ldr	r1, [pc, #104]	; 11af4 <__assert_fail@plt+0xbc4>
   11a88:	mov	r0, #0
   11a8c:	bl	10d68 <dcgettext@plt>
   11a90:	ldr	r1, [r7]
   11a94:	bl	10ccc <fputs_unlocked@plt>
   11a98:	b	11998 <__assert_fail@plt+0xa68>
   11a9c:	andeq	sl, r2, r8, asr #2
   11aa0:	andeq	r8, r1, r4, ror lr
   11aa4:	andeq	sl, r2, r8, ror #2
   11aa8:	muleq	r1, ip, lr
   11aac:	andeq	sl, r2, r4, asr r1
   11ab0:			; <UNDEFINED> instruction: 0x00018db8
   11ab4:			; <UNDEFINED> instruction: 0x00018ebc
   11ab8:	andeq	r8, r1, r4, lsl #30
   11abc:	andeq	r8, r1, ip, lsr pc
   11ac0:	andeq	r8, r1, r8, lsl #31
   11ac4:	andeq	r9, r1, ip, ror r0
   11ac8:	andeq	r9, r1, ip, lsr #1
   11acc:	andeq	r9, r1, r4, ror #1
   11ad0:	andeq	r8, r1, ip, ror #28
   11ad4:	strdeq	r9, [r1], -r0
   11ad8:	andeq	r9, r1, r8, lsl #4
   11adc:	andeq	r9, r1, r0, lsr r2
   11ae0:	andeq	r9, r1, r0, asr #4
   11ae4:	andeq	r9, r1, ip, lsl #5
   11ae8:	andeq	r9, r1, r8, lsr #5
   11aec:	andeq	r9, r1, r8, lsr #1
   11af0:	andeq	r9, r1, r0, ror r3
   11af4:	andeq	r9, r1, r4, asr #4
   11af8:	push	{r4, r5, r6, lr}
   11afc:	add	r2, r2, #8
   11b00:	sub	r6, r3, #8
   11b04:	ldr	lr, [pc, #528]	; 11d1c <__assert_fail@plt+0xdec>
   11b08:	mov	r5, #61	; 0x3d
   11b0c:	b	11bfc <__assert_fail@plt+0xccc>
   11b10:	ldrb	r4, [r0, #1]
   11b14:	cmp	r3, #2
   11b18:	add	ip, ip, r4, lsr #6
   11b1c:	and	ip, ip, #31
   11b20:	ldrb	ip, [lr, ip]
   11b24:	strb	ip, [r2, #-7]
   11b28:	beq	11cf0 <__assert_fail@plt+0xdc0>
   11b2c:	lsr	ip, r4, #1
   11b30:	and	ip, ip, #31
   11b34:	cmp	r3, #3
   11b38:	ldrb	ip, [lr, ip]
   11b3c:	strb	ip, [r2, #-6]
   11b40:	beq	11cfc <__assert_fail@plt+0xdcc>
   11b44:	cmp	r1, #2
   11b48:	lsl	r4, r4, #4
   11b4c:	beq	11c94 <__assert_fail@plt+0xd64>
   11b50:	ldrb	ip, [r0, #2]
   11b54:	cmp	r3, #4
   11b58:	add	r4, r4, ip, lsr #4
   11b5c:	and	r4, r4, #31
   11b60:	ldrb	r4, [lr, r4]
   11b64:	strb	r4, [r2, #-5]
   11b68:	beq	11d10 <__assert_fail@plt+0xde0>
   11b6c:	cmp	r1, #3
   11b70:	lsl	r4, ip, #1
   11b74:	beq	11cac <__assert_fail@plt+0xd7c>
   11b78:	ldrb	ip, [r0, #3]
   11b7c:	cmp	r3, #5
   11b80:	add	r4, r4, ip, lsr #7
   11b84:	and	r4, r4, #31
   11b88:	ldrb	r4, [lr, r4]
   11b8c:	strb	r4, [r2, #-4]
   11b90:	beq	11d14 <__assert_fail@plt+0xde4>
   11b94:	lsr	r4, ip, #2
   11b98:	and	r4, r4, #31
   11b9c:	cmp	r3, #6
   11ba0:	ldrb	r4, [lr, r4]
   11ba4:	strb	r4, [r2, #-3]
   11ba8:	beq	11d04 <__assert_fail@plt+0xdd4>
   11bac:	cmp	r1, #4
   11bb0:	lsl	ip, ip, #3
   11bb4:	beq	11cc4 <__assert_fail@plt+0xd94>
   11bb8:	ldrb	r4, [r0, #4]
   11bbc:	cmp	r3, #7
   11bc0:	add	ip, ip, r4, lsr #5
   11bc4:	and	ip, ip, #31
   11bc8:	ldrb	ip, [lr, ip]
   11bcc:	strb	ip, [r2, #-2]
   11bd0:	beq	11d18 <__assert_fail@plt+0xde8>
   11bd4:	and	r4, r4, #31
   11bd8:	cmp	r6, #0
   11bdc:	ldrb	ip, [lr, r4]
   11be0:	strb	ip, [r2, #-1]
   11be4:	beq	11d0c <__assert_fail@plt+0xddc>
   11be8:	subs	r1, r1, #5
   11bec:	addne	r0, r0, #5
   11bf0:	sub	r3, r3, #8
   11bf4:	sub	r6, r6, #8
   11bf8:	add	r2, r2, #8
   11bfc:	cmp	r1, #0
   11c00:	cmpne	r3, #0
   11c04:	movne	r4, #1
   11c08:	moveq	r4, #0
   11c0c:	beq	11cdc <__assert_fail@plt+0xdac>
   11c10:	ldrb	ip, [r0]
   11c14:	cmp	r3, #1
   11c18:	ldrb	r4, [lr, ip, lsr #3]
   11c1c:	strb	r4, [r2, #-8]
   11c20:	popeq	{r4, r5, r6, pc}
   11c24:	cmp	r1, #1
   11c28:	lsl	ip, ip, #2
   11c2c:	bne	11b10 <__assert_fail@plt+0xbe0>
   11c30:	and	ip, ip, #31
   11c34:	cmp	r3, #2
   11c38:	ldrb	r1, [lr, ip]
   11c3c:	strb	r1, [r2, #-7]
   11c40:	beq	11cf4 <__assert_fail@plt+0xdc4>
   11c44:	cmp	r3, #3
   11c48:	strb	r5, [r2, #-6]
   11c4c:	beq	11cf8 <__assert_fail@plt+0xdc8>
   11c50:	cmp	r3, #4
   11c54:	strb	r5, [r2, #-5]
   11c58:	beq	11d00 <__assert_fail@plt+0xdd0>
   11c5c:	cmp	r3, #5
   11c60:	strb	r5, [r2, #-4]
   11c64:	beq	11ce8 <__assert_fail@plt+0xdb8>
   11c68:	cmp	r3, #6
   11c6c:	strb	r5, [r2, #-3]
   11c70:	beq	11cec <__assert_fail@plt+0xdbc>
   11c74:	cmp	r3, #7
   11c78:	strb	r5, [r2, #-2]
   11c7c:	beq	11d08 <__assert_fail@plt+0xdd8>
   11c80:	cmp	r6, #0
   11c84:	strb	r5, [r2, #-1]
   11c88:	popeq	{r4, r5, r6, pc}
   11c8c:	mov	r1, #0
   11c90:	b	11bf0 <__assert_fail@plt+0xcc0>
   11c94:	and	r4, r4, #31
   11c98:	cmp	r3, #4
   11c9c:	ldrb	r1, [lr, r4]
   11ca0:	strb	r1, [r2, #-5]
   11ca4:	bne	11c5c <__assert_fail@plt+0xd2c>
   11ca8:	pop	{r4, r5, r6, pc}
   11cac:	and	ip, r4, #31
   11cb0:	cmp	r3, #5
   11cb4:	ldrb	r1, [lr, ip]
   11cb8:	strb	r1, [r2, #-4]
   11cbc:	bne	11c68 <__assert_fail@plt+0xd38>
   11cc0:	pop	{r4, r5, r6, pc}
   11cc4:	and	ip, ip, #31
   11cc8:	cmp	r3, #7
   11ccc:	ldrb	r1, [lr, ip]
   11cd0:	strb	r1, [r2, #-2]
   11cd4:	bne	11c80 <__assert_fail@plt+0xd50>
   11cd8:	pop	{r4, r5, r6, pc}
   11cdc:	cmp	r3, #0
   11ce0:	strbne	r4, [r2, #-8]
   11ce4:	pop	{r4, r5, r6, pc}
   11ce8:	pop	{r4, r5, r6, pc}
   11cec:	pop	{r4, r5, r6, pc}
   11cf0:	pop	{r4, r5, r6, pc}
   11cf4:	pop	{r4, r5, r6, pc}
   11cf8:	pop	{r4, r5, r6, pc}
   11cfc:	pop	{r4, r5, r6, pc}
   11d00:	pop	{r4, r5, r6, pc}
   11d04:	pop	{r4, r5, r6, pc}
   11d08:	pop	{r4, r5, r6, pc}
   11d0c:	pop	{r4, r5, r6, pc}
   11d10:	pop	{r4, r5, r6, pc}
   11d14:	pop	{r4, r5, r6, pc}
   11d18:	pop	{r4, r5, r6, pc}
   11d1c:	andeq	r9, r1, r4, lsl r4
   11d20:	ldr	r3, [pc, #168]	; 11dd0 <__assert_fail@plt+0xea0>
   11d24:	push	{r4, r5, r6, r7, r8, lr}
   11d28:	mov	r5, r1
   11d2c:	smull	r3, r1, r3, r1
   11d30:	asr	r3, r5, #31
   11d34:	rsb	r3, r3, r1, asr #1
   11d38:	mov	r6, r0
   11d3c:	add	r4, r3, r3, lsl #2
   11d40:	cmp	r5, r4
   11d44:	moveq	r4, r3
   11d48:	addne	r4, r3, #1
   11d4c:	cmp	r4, #0
   11d50:	mov	r7, r2
   11d54:	blt	11da4 <__assert_fail@plt+0xe74>
   11d58:	cmn	r4, #-268435455	; 0xf0000001
   11d5c:	bgt	11dc0 <__assert_fail@plt+0xe90>
   11d60:	cmp	r5, #0
   11d64:	blt	11dc0 <__assert_fail@plt+0xe90>
   11d68:	lsl	r4, r4, #3
   11d6c:	add	r8, r4, #1
   11d70:	mov	r0, r8
   11d74:	bl	1840c <__assert_fail@plt+0x74dc>
   11d78:	cmp	r0, #0
   11d7c:	str	r0, [r7]
   11d80:	moveq	r4, r8
   11d84:	beq	11dc8 <__assert_fail@plt+0xe98>
   11d88:	mov	r2, r0
   11d8c:	mov	r3, r8
   11d90:	mov	r0, r6
   11d94:	mov	r1, r5
   11d98:	bl	11af8 <__assert_fail@plt+0xbc8>
   11d9c:	mov	r0, r4
   11da0:	pop	{r4, r5, r6, r7, r8, pc}
   11da4:	cmn	r4, #1
   11da8:	beq	11d60 <__assert_fail@plt+0xe30>
   11dac:	mov	r1, r4
   11db0:	mov	r0, #-2147483648	; 0x80000000
   11db4:	bl	188e4 <__assert_fail@plt+0x79b4>
   11db8:	cmp	r0, #7
   11dbc:	bgt	11d60 <__assert_fail@plt+0xe30>
   11dc0:	mov	r4, #0
   11dc4:	str	r4, [r7]
   11dc8:	mov	r0, r4
   11dcc:	pop	{r4, r5, r6, r7, r8, pc}
   11dd0:	strbtvs	r6, [r6], -r7, ror #12
   11dd4:	ldr	r3, [pc, #16]	; 11dec <__assert_fail@plt+0xebc>
   11dd8:	add	r0, r3, r0
   11ddc:	ldrb	r0, [r0, #32]
   11de0:	eor	r0, r0, #128	; 0x80
   11de4:	lsr	r0, r0, #7
   11de8:	bx	lr
   11dec:	andeq	r9, r1, r4, lsl r4
   11df0:	mov	r3, #0
   11df4:	str	r3, [r0]
   11df8:	bx	lr
   11dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e00:	subs	sl, r0, #0
   11e04:	sub	sp, sp, #20
   11e08:	mov	r5, r3
   11e0c:	movne	r3, #1
   11e10:	moveq	r3, #0
   11e14:	str	r3, [sp, #4]
   11e18:	ldr	r3, [sp, #56]	; 0x38
   11e1c:	mov	r4, r1
   11e20:	ldr	r8, [r3]
   11e24:	beq	12328 <__assert_fail@plt+0x13f8>
   11e28:	adds	r3, r2, #0
   11e2c:	ldr	fp, [sl]
   11e30:	movne	r3, #1
   11e34:	cmp	fp, #0
   11e38:	movne	fp, #0
   11e3c:	andeq	fp, r3, #1
   11e40:	ldr	r7, [pc, #1260]	; 12334 <__assert_fail@plt+0x1404>
   11e44:	add	r1, sl, #4
   11e48:	str	r1, [sp, #8]
   11e4c:	cmp	fp, #0
   11e50:	beq	11fec <__assert_fail@plt+0x10bc>
   11e54:	cmp	r2, #7
   11e58:	ble	11fec <__assert_fail@plt+0x10bc>
   11e5c:	ldrb	r1, [r4]
   11e60:	add	r1, r7, r1
   11e64:	ldrsb	r0, [r1, #32]
   11e68:	cmp	r0, #0
   11e6c:	blt	120c0 <__assert_fail@plt+0x1190>
   11e70:	ldrb	r1, [r4, #1]
   11e74:	add	r1, r7, r1
   11e78:	ldrsb	r1, [r1, #32]
   11e7c:	cmp	r1, #0
   11e80:	bge	11eb4 <__assert_fail@plt+0xf84>
   11e84:	b	120c0 <__assert_fail@plt+0x1190>
   11e88:	ldrb	r0, [r4, #8]
   11e8c:	add	r0, r7, r0
   11e90:	ldrsb	r0, [r0, #32]
   11e94:	cmp	r0, #0
   11e98:	blt	120bc <__assert_fail@plt+0x118c>
   11e9c:	ldrb	ip, [r1, #1]
   11ea0:	mov	r4, r1
   11ea4:	add	r1, r7, ip
   11ea8:	ldrsb	r1, [r1, #32]
   11eac:	cmp	r1, #0
   11eb0:	blt	120c0 <__assert_fail@plt+0x1190>
   11eb4:	cmp	r8, #0
   11eb8:	asrne	ip, r1, #2
   11ebc:	orrne	r0, ip, r0, lsl #3
   11ec0:	strbne	r0, [r5]
   11ec4:	ldrb	r0, [r4, #2]
   11ec8:	addne	r5, r5, #1
   11ecc:	subne	ip, r8, #1
   11ed0:	moveq	ip, r8
   11ed4:	cmp	r0, #61	; 0x3d
   11ed8:	beq	12118 <__assert_fail@plt+0x11e8>
   11edc:	add	r0, r7, r0
   11ee0:	ldrsb	lr, [r0, #32]
   11ee4:	cmp	lr, #0
   11ee8:	blt	120c4 <__assert_fail@plt+0x1194>
   11eec:	ldrb	r0, [r4, #3]
   11ef0:	add	r0, r7, r0
   11ef4:	ldrsb	r0, [r0, #32]
   11ef8:	cmp	r0, #0
   11efc:	blt	120c4 <__assert_fail@plt+0x1194>
   11f00:	cmp	ip, #0
   11f04:	beq	11f20 <__assert_fail@plt+0xff0>
   11f08:	asr	r6, r0, #4
   11f0c:	orr	r1, r6, r1, lsl #6
   11f10:	orr	lr, r1, lr, lsl #1
   11f14:	strb	lr, [r5]
   11f18:	sub	ip, ip, #1
   11f1c:	add	r5, r5, #1
   11f20:	ldrb	r1, [r4, #4]
   11f24:	cmp	r1, #61	; 0x3d
   11f28:	beq	12130 <__assert_fail@plt+0x1200>
   11f2c:	add	r1, r7, r1
   11f30:	ldrsb	lr, [r1, #32]
   11f34:	cmp	lr, #0
   11f38:	blt	120c4 <__assert_fail@plt+0x1194>
   11f3c:	cmp	ip, #0
   11f40:	asrne	r1, lr, #1
   11f44:	orrne	r0, r1, r0, lsl #4
   11f48:	ldrb	r1, [r4, #5]
   11f4c:	strbne	r0, [r5]
   11f50:	subne	ip, ip, #1
   11f54:	addne	r5, r5, #1
   11f58:	cmp	r1, #61	; 0x3d
   11f5c:	beq	1213c <__assert_fail@plt+0x120c>
   11f60:	add	r1, r7, r1
   11f64:	ldrsb	r1, [r1, #32]
   11f68:	cmp	r1, #0
   11f6c:	blt	120c4 <__assert_fail@plt+0x1194>
   11f70:	ldrb	r0, [r4, #6]
   11f74:	add	r0, r7, r0
   11f78:	ldrsb	r0, [r0, #32]
   11f7c:	cmp	r0, #0
   11f80:	blt	120c4 <__assert_fail@plt+0x1194>
   11f84:	cmp	ip, #0
   11f88:	beq	11fa4 <__assert_fail@plt+0x1074>
   11f8c:	lsl	r1, r1, #2
   11f90:	orr	lr, r1, lr, lsl #7
   11f94:	orr	lr, lr, r0, asr #3
   11f98:	strb	lr, [r5]
   11f9c:	sub	ip, ip, #1
   11fa0:	add	r5, r5, #1
   11fa4:	ldrb	r1, [r4, #7]
   11fa8:	cmp	r1, #61	; 0x3d
   11fac:	beq	12154 <__assert_fail@plt+0x1224>
   11fb0:	add	r1, r7, r1
   11fb4:	ldrsb	r1, [r1, #32]
   11fb8:	cmp	r1, #0
   11fbc:	blt	120c4 <__assert_fail@plt+0x1194>
   11fc0:	cmp	ip, #0
   11fc4:	beq	12154 <__assert_fail@plt+0x1224>
   11fc8:	orr	r1, r1, r0, lsl #5
   11fcc:	strb	r1, [r5]
   11fd0:	sub	r8, ip, #1
   11fd4:	add	r5, r5, #1
   11fd8:	sub	r2, r2, #8
   11fdc:	cmp	r2, #7
   11fe0:	add	r1, r4, #8
   11fe4:	bgt	11e88 <__assert_fail@plt+0xf58>
   11fe8:	mov	r4, r1
   11fec:	cmp	r2, #0
   11ff0:	movne	r0, #0
   11ff4:	andeq	r0, r3, #1
   11ff8:	cmp	r0, #0
   11ffc:	mov	ip, r8
   12000:	bne	120fc <__assert_fail@plt+0x11cc>
   12004:	cmp	r2, #0
   12008:	bne	120c4 <__assert_fail@plt+0x1194>
   1200c:	cmp	sl, #0
   12010:	beq	12320 <__assert_fail@plt+0x13f0>
   12014:	mov	r9, r4
   12018:	ldr	r6, [sl]
   1201c:	cmp	r6, #8
   12020:	moveq	r6, #0
   12024:	clzne	r1, r6
   12028:	moveq	r0, r6
   1202c:	lsrne	r1, r1, #5
   12030:	moveq	r1, #1
   12034:	streq	r0, [sl]
   12038:	cmp	r2, #7
   1203c:	movle	r2, #0
   12040:	andgt	r2, r1, #1
   12044:	cmp	r2, #0
   12048:	beq	12074 <__assert_fail@plt+0x1144>
   1204c:	mov	r2, #8
   12050:	mov	r0, r4
   12054:	mov	r1, #10
   12058:	str	r3, [sp, #12]
   1205c:	bl	10e94 <memchr@plt>
   12060:	ldr	r3, [sp, #12]
   12064:	cmp	r0, #0
   12068:	moveq	r2, r4
   1206c:	addeq	r4, r4, #8
   12070:	beq	12160 <__assert_fail@plt+0x1230>
   12074:	cmp	r9, r4
   12078:	bls	120ac <__assert_fail@plt+0x117c>
   1207c:	ldrb	r0, [r4], #1
   12080:	add	r1, r6, #1
   12084:	mov	r2, sl
   12088:	cmp	r0, #10
   1208c:	beq	120a4 <__assert_fail@plt+0x1174>
   12090:	cmp	r1, #8
   12094:	str	r1, [r2], r6
   12098:	mov	r6, r1
   1209c:	strb	r0, [r2, #4]
   120a0:	beq	1215c <__assert_fail@plt+0x122c>
   120a4:	cmp	r9, r4
   120a8:	bne	1207c <__assert_fail@plt+0x114c>
   120ac:	cmp	r6, #0
   120b0:	beq	12320 <__assert_fail@plt+0x13f0>
   120b4:	ldr	r2, [sp, #8]
   120b8:	b	120ec <__assert_fail@plt+0x11bc>
   120bc:	mov	r4, r1
   120c0:	mov	ip, r8
   120c4:	ldrb	r1, [r4]
   120c8:	cmp	r1, #10
   120cc:	beq	122cc <__assert_fail@plt+0x139c>
   120d0:	sub	ip, r8, ip
   120d4:	cmp	sl, #0
   120d8:	sub	r5, r5, ip
   120dc:	add	r9, r4, r2
   120e0:	bne	12018 <__assert_fail@plt+0x10e8>
   120e4:	mov	r6, r2
   120e8:	mov	r2, r4
   120ec:	cmp	r6, #7
   120f0:	bgt	12160 <__assert_fail@plt+0x1230>
   120f4:	ldr	r0, [sp, #4]
   120f8:	and	r0, r0, r3
   120fc:	ldr	r3, [sp, #56]	; 0x38
   12100:	ldr	r3, [r3]
   12104:	sub	r8, r3, r8
   12108:	ldr	r3, [sp, #56]	; 0x38
   1210c:	str	r8, [r3]
   12110:	add	sp, sp, #20
   12114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12118:	ldrb	r1, [r4, #3]
   1211c:	cmp	r1, #61	; 0x3d
   12120:	bne	120c4 <__assert_fail@plt+0x1194>
   12124:	ldrb	r1, [r4, #4]
   12128:	cmp	r1, #61	; 0x3d
   1212c:	bne	120c4 <__assert_fail@plt+0x1194>
   12130:	ldrb	r1, [r4, #5]
   12134:	cmp	r1, #61	; 0x3d
   12138:	bne	120c4 <__assert_fail@plt+0x1194>
   1213c:	ldrb	r1, [r4, #6]
   12140:	cmp	r1, #61	; 0x3d
   12144:	bne	120c4 <__assert_fail@plt+0x1194>
   12148:	ldrb	r1, [r4, #7]
   1214c:	cmp	r1, #61	; 0x3d
   12150:	bne	120c4 <__assert_fail@plt+0x1194>
   12154:	mov	r8, ip
   12158:	b	11fd8 <__assert_fail@plt+0x10a8>
   1215c:	ldr	r2, [sp, #8]
   12160:	ldrb	r1, [r2]
   12164:	add	r1, r7, r1
   12168:	ldrsb	r0, [r1, #32]
   1216c:	cmp	r0, #0
   12170:	blt	122c4 <__assert_fail@plt+0x1394>
   12174:	ldrb	r1, [r2, #1]
   12178:	add	r1, r7, r1
   1217c:	ldrsb	ip, [r1, #32]
   12180:	cmp	ip, #0
   12184:	blt	122c4 <__assert_fail@plt+0x1394>
   12188:	cmp	r8, #0
   1218c:	asrne	r1, ip, #2
   12190:	orrne	r0, r1, r0, lsl #3
   12194:	ldrb	r1, [r2, #2]
   12198:	strbne	r0, [r5]
   1219c:	subne	r8, r8, #1
   121a0:	addne	r5, r5, #1
   121a4:	cmp	r1, #61	; 0x3d
   121a8:	beq	122ac <__assert_fail@plt+0x137c>
   121ac:	add	r1, r7, r1
   121b0:	ldrsb	r1, [r1, #32]
   121b4:	cmp	r1, #0
   121b8:	blt	122c4 <__assert_fail@plt+0x1394>
   121bc:	ldrb	r0, [r2, #3]
   121c0:	add	r0, r7, r0
   121c4:	ldrsb	r0, [r0, #32]
   121c8:	cmp	r0, #0
   121cc:	blt	122c4 <__assert_fail@plt+0x1394>
   121d0:	cmp	r8, #0
   121d4:	beq	121f0 <__assert_fail@plt+0x12c0>
   121d8:	lsl	r1, r1, #1
   121dc:	orr	r1, r1, ip, lsl #6
   121e0:	orr	r1, r1, r0, asr #4
   121e4:	strb	r1, [r5]
   121e8:	sub	r8, r8, #1
   121ec:	add	r5, r5, #1
   121f0:	ldrb	r1, [r2, #4]
   121f4:	cmp	r1, #61	; 0x3d
   121f8:	beq	122e4 <__assert_fail@plt+0x13b4>
   121fc:	add	r1, r7, r1
   12200:	ldrsb	ip, [r1, #32]
   12204:	cmp	ip, #0
   12208:	blt	122c4 <__assert_fail@plt+0x1394>
   1220c:	cmp	r8, #0
   12210:	asrne	r1, ip, #1
   12214:	orrne	r0, r1, r0, lsl #4
   12218:	ldrb	r1, [r2, #5]
   1221c:	strbne	r0, [r5]
   12220:	subne	r8, r8, #1
   12224:	addne	r5, r5, #1
   12228:	cmp	r1, #61	; 0x3d
   1222c:	beq	122f0 <__assert_fail@plt+0x13c0>
   12230:	add	r1, r7, r1
   12234:	ldrsb	r1, [r1, #32]
   12238:	cmp	r1, #0
   1223c:	blt	122c4 <__assert_fail@plt+0x1394>
   12240:	ldrb	r0, [r2, #6]
   12244:	add	r0, r7, r0
   12248:	ldrsb	r0, [r0, #32]
   1224c:	cmp	r0, #0
   12250:	blt	122c4 <__assert_fail@plt+0x1394>
   12254:	cmp	r8, #0
   12258:	beq	12274 <__assert_fail@plt+0x1344>
   1225c:	lsl	r1, r1, #2
   12260:	orr	r1, r1, ip, lsl #7
   12264:	orr	r1, r1, r0, asr #3
   12268:	strb	r1, [r5]
   1226c:	sub	r8, r8, #1
   12270:	add	r5, r5, #1
   12274:	ldrb	r2, [r2, #7]
   12278:	cmp	r2, #61	; 0x3d
   1227c:	beq	122a4 <__assert_fail@plt+0x1374>
   12280:	add	r2, r7, r2
   12284:	ldrsb	r2, [r2, #32]
   12288:	cmp	r2, #0
   1228c:	blt	122c4 <__assert_fail@plt+0x1394>
   12290:	cmp	r8, #0
   12294:	orrne	r2, r2, r0, lsl #5
   12298:	strbne	r2, [r5]
   1229c:	subne	r8, r8, #1
   122a0:	addne	r5, r5, #1
   122a4:	sub	r2, r9, r4
   122a8:	b	11e4c <__assert_fail@plt+0xf1c>
   122ac:	ldrb	r1, [r2, #3]
   122b0:	cmp	r1, #61	; 0x3d
   122b4:	bne	122c4 <__assert_fail@plt+0x1394>
   122b8:	ldrb	r1, [r2, #4]
   122bc:	cmp	r1, #61	; 0x3d
   122c0:	beq	122e4 <__assert_fail@plt+0x13b4>
   122c4:	mov	r0, #0
   122c8:	b	120fc <__assert_fail@plt+0x11cc>
   122cc:	cmp	sl, #0
   122d0:	beq	12310 <__assert_fail@plt+0x13e0>
   122d4:	sub	r2, r2, #1
   122d8:	mov	r8, ip
   122dc:	add	r4, r4, #1
   122e0:	b	11e4c <__assert_fail@plt+0xf1c>
   122e4:	ldrb	r1, [r2, #5]
   122e8:	cmp	r1, #61	; 0x3d
   122ec:	bne	122c4 <__assert_fail@plt+0x1394>
   122f0:	ldrb	r1, [r2, #6]
   122f4:	cmp	r1, #61	; 0x3d
   122f8:	bne	122c4 <__assert_fail@plt+0x1394>
   122fc:	ldrb	r2, [r2, #7]
   12300:	cmp	r2, #61	; 0x3d
   12304:	beq	122a4 <__assert_fail@plt+0x1374>
   12308:	mov	r0, #0
   1230c:	b	120fc <__assert_fail@plt+0x11cc>
   12310:	sub	ip, r8, ip
   12314:	sub	r5, r5, ip
   12318:	add	r9, r4, r2
   1231c:	b	120e4 <__assert_fail@plt+0x11b4>
   12320:	mov	r0, #1
   12324:	b	120fc <__assert_fail@plt+0x11cc>
   12328:	mov	fp, #1
   1232c:	mov	r3, fp
   12330:	b	11e40 <__assert_fail@plt+0xf10>
   12334:	andeq	r9, r1, r4, lsl r4
   12338:	asr	ip, r2, #3
   1233c:	add	ip, ip, #1
   12340:	push	{r4, r5, r6, r7, r8, lr}
   12344:	add	ip, ip, ip, lsl #2
   12348:	sub	sp, sp, #16
   1234c:	mov	r7, r0
   12350:	mov	r0, ip
   12354:	mov	r5, r3
   12358:	mov	r4, r2
   1235c:	mov	r8, r1
   12360:	str	ip, [sp, #12]
   12364:	ldr	r6, [sp, #40]	; 0x28
   12368:	bl	1840c <__assert_fail@plt+0x74dc>
   1236c:	cmp	r0, #0
   12370:	str	r0, [r5]
   12374:	beq	123b8 <__assert_fail@plt+0x1488>
   12378:	add	ip, sp, #12
   1237c:	mov	r3, r0
   12380:	mov	r2, r4
   12384:	mov	r1, r8
   12388:	mov	r0, r7
   1238c:	str	ip, [sp]
   12390:	bl	11dfc <__assert_fail@plt+0xecc>
   12394:	subs	r4, r0, #0
   12398:	beq	123c8 <__assert_fail@plt+0x1498>
   1239c:	cmp	r6, #0
   123a0:	beq	123b8 <__assert_fail@plt+0x1488>
   123a4:	ldr	r3, [sp, #12]
   123a8:	mov	r0, r4
   123ac:	str	r3, [r6]
   123b0:	add	sp, sp, #16
   123b4:	pop	{r4, r5, r6, r7, r8, pc}
   123b8:	mov	r4, #1
   123bc:	mov	r0, r4
   123c0:	add	sp, sp, #16
   123c4:	pop	{r4, r5, r6, r7, r8, pc}
   123c8:	ldr	r0, [r5]
   123cc:	bl	12624 <__assert_fail@plt+0x16f4>
   123d0:	mov	r0, r4
   123d4:	str	r4, [r5]
   123d8:	add	sp, sp, #16
   123dc:	pop	{r4, r5, r6, r7, r8, pc}
   123e0:	ldr	r3, [pc, #4]	; 123ec <__assert_fail@plt+0x14bc>
   123e4:	str	r0, [r3]
   123e8:	bx	lr
   123ec:	andeq	sl, r2, r0, ror #2
   123f0:	ldr	r3, [pc, #4]	; 123fc <__assert_fail@plt+0x14cc>
   123f4:	strb	r0, [r3, #4]
   123f8:	bx	lr
   123fc:	andeq	sl, r2, r0, ror #2
   12400:	ldr	r3, [pc, #192]	; 124c8 <__assert_fail@plt+0x1598>
   12404:	push	{r4, r5, r6, lr}
   12408:	sub	sp, sp, #8
   1240c:	ldr	r0, [r3]
   12410:	bl	18494 <__assert_fail@plt+0x7564>
   12414:	cmp	r0, #0
   12418:	beq	1243c <__assert_fail@plt+0x150c>
   1241c:	ldr	r4, [pc, #168]	; 124cc <__assert_fail@plt+0x159c>
   12420:	ldrb	r3, [r4, #4]
   12424:	cmp	r3, #0
   12428:	beq	12458 <__assert_fail@plt+0x1528>
   1242c:	bl	10e4c <__errno_location@plt>
   12430:	ldr	r3, [r0]
   12434:	cmp	r3, #32
   12438:	bne	12458 <__assert_fail@plt+0x1528>
   1243c:	ldr	r3, [pc, #140]	; 124d0 <__assert_fail@plt+0x15a0>
   12440:	ldr	r0, [r3]
   12444:	bl	18494 <__assert_fail@plt+0x7564>
   12448:	cmp	r0, #0
   1244c:	bne	124a0 <__assert_fail@plt+0x1570>
   12450:	add	sp, sp, #8
   12454:	pop	{r4, r5, r6, pc}
   12458:	mov	r2, #5
   1245c:	ldr	r1, [pc, #112]	; 124d4 <__assert_fail@plt+0x15a4>
   12460:	mov	r0, #0
   12464:	bl	10d68 <dcgettext@plt>
   12468:	ldr	r4, [r4]
   1246c:	cmp	r4, #0
   12470:	mov	r5, r0
   12474:	beq	124ac <__assert_fail@plt+0x157c>
   12478:	bl	10e4c <__errno_location@plt>
   1247c:	ldr	r6, [r0]
   12480:	mov	r0, r4
   12484:	bl	15388 <__assert_fail@plt+0x4458>
   12488:	mov	r1, r6
   1248c:	str	r5, [sp]
   12490:	ldr	r2, [pc, #64]	; 124d8 <__assert_fail@plt+0x15a8>
   12494:	mov	r3, r0
   12498:	mov	r0, #0
   1249c:	bl	10dd4 <error@plt>
   124a0:	ldr	r3, [pc, #52]	; 124dc <__assert_fail@plt+0x15ac>
   124a4:	ldr	r0, [r3]
   124a8:	bl	10d20 <_exit@plt>
   124ac:	bl	10e4c <__errno_location@plt>
   124b0:	mov	r3, r5
   124b4:	ldr	r2, [pc, #36]	; 124e0 <__assert_fail@plt+0x15b0>
   124b8:	ldr	r1, [r0]
   124bc:	mov	r0, r4
   124c0:	bl	10dd4 <error@plt>
   124c4:	b	124a0 <__assert_fail@plt+0x1570>
   124c8:	andeq	sl, r2, r4, asr r1
   124cc:	andeq	sl, r2, r0, ror #2
   124d0:	andeq	sl, r2, r8, asr #2
   124d4:	andeq	r9, r1, ip, asr #6
   124d8:	andeq	r9, r1, r8, lsl #6
   124dc:	strdeq	sl, [r2], -r0
   124e0:	andeq	r9, r1, ip, lsl #6
   124e4:	push	{r4, r5}
   124e8:	pop	{r4, r5}
   124ec:	b	10cf0 <posix_fadvise64@plt>
   124f0:	cmp	r0, #0
   124f4:	bxeq	lr
   124f8:	push	{r4, lr}
   124fc:	sub	sp, sp, #16
   12500:	mov	r4, r1
   12504:	bl	10e7c <fileno@plt>
   12508:	mov	r2, #0
   1250c:	mov	r3, #0
   12510:	str	r4, [sp, #8]
   12514:	strd	r2, [sp]
   12518:	bl	10cf0 <posix_fadvise64@plt>
   1251c:	add	sp, sp, #16
   12520:	pop	{r4, pc}
   12524:	push	{r4, r5, lr}
   12528:	sub	sp, sp, #12
   1252c:	mov	r4, r0
   12530:	bl	10e7c <fileno@plt>
   12534:	cmp	r0, #0
   12538:	mov	r0, r4
   1253c:	blt	125b8 <__assert_fail@plt+0x1688>
   12540:	bl	10df8 <__freading@plt>
   12544:	cmp	r0, #0
   12548:	bne	12584 <__assert_fail@plt+0x1654>
   1254c:	mov	r0, r4
   12550:	bl	125c4 <__assert_fail@plt+0x1694>
   12554:	cmp	r0, #0
   12558:	beq	125b4 <__assert_fail@plt+0x1684>
   1255c:	bl	10e4c <__errno_location@plt>
   12560:	mov	r5, r0
   12564:	mov	r0, r4
   12568:	ldr	r4, [r5]
   1256c:	bl	10ea0 <fclose@plt>
   12570:	cmp	r4, #0
   12574:	mvnne	r0, #0
   12578:	strne	r4, [r5]
   1257c:	add	sp, sp, #12
   12580:	pop	{r4, r5, pc}
   12584:	mov	r0, r4
   12588:	bl	10e7c <fileno@plt>
   1258c:	mov	r3, #1
   12590:	str	r3, [sp]
   12594:	mov	r2, #0
   12598:	mov	r3, #0
   1259c:	bl	10da4 <lseek64@plt>
   125a0:	mvn	r3, #0
   125a4:	mvn	r2, #0
   125a8:	cmp	r1, r3
   125ac:	cmpeq	r0, r2
   125b0:	bne	1254c <__assert_fail@plt+0x161c>
   125b4:	mov	r0, r4
   125b8:	add	sp, sp, #12
   125bc:	pop	{r4, r5, lr}
   125c0:	b	10ea0 <fclose@plt>
   125c4:	push	{r4, lr}
   125c8:	subs	r4, r0, #0
   125cc:	sub	sp, sp, #8
   125d0:	beq	125ec <__assert_fail@plt+0x16bc>
   125d4:	bl	10df8 <__freading@plt>
   125d8:	cmp	r0, #0
   125dc:	beq	125ec <__assert_fail@plt+0x16bc>
   125e0:	ldr	r3, [r4]
   125e4:	tst	r3, #256	; 0x100
   125e8:	bne	125fc <__assert_fail@plt+0x16cc>
   125ec:	mov	r0, r4
   125f0:	add	sp, sp, #8
   125f4:	pop	{r4, lr}
   125f8:	b	10cfc <fflush@plt>
   125fc:	mov	r3, #1
   12600:	str	r3, [sp]
   12604:	mov	r2, #0
   12608:	mov	r3, #0
   1260c:	mov	r0, r4
   12610:	bl	1267c <__assert_fail@plt+0x174c>
   12614:	mov	r0, r4
   12618:	add	sp, sp, #8
   1261c:	pop	{r4, lr}
   12620:	b	10cfc <fflush@plt>
   12624:	push	{r4, r5, lr}
   12628:	sub	sp, sp, #12
   1262c:	mov	r5, r0
   12630:	bl	10e4c <__errno_location@plt>
   12634:	mov	r2, #0
   12638:	mov	r4, r0
   1263c:	ldr	r3, [r0]
   12640:	str	r2, [r4]
   12644:	mov	r0, r5
   12648:	str	r3, [sp]
   1264c:	str	r3, [sp, #4]
   12650:	bl	10d14 <free@plt>
   12654:	ldr	r3, [r4]
   12658:	add	r2, sp, #8
   1265c:	cmp	r3, #0
   12660:	moveq	r3, #4
   12664:	movne	r3, #0
   12668:	add	r3, r2, r3
   1266c:	ldr	r3, [r3, #-8]
   12670:	str	r3, [r4]
   12674:	add	sp, sp, #12
   12678:	pop	{r4, r5, pc}
   1267c:	push	{r4, r5, r6, r7, r8, lr}
   12680:	sub	sp, sp, #8
   12684:	ldmib	r0, {ip, lr}
   12688:	mov	r4, r0
   1268c:	ldr	r5, [sp, #32]
   12690:	cmp	lr, ip
   12694:	beq	126ac <__assert_fail@plt+0x177c>
   12698:	str	r5, [sp, #32]
   1269c:	mov	r0, r4
   126a0:	add	sp, sp, #8
   126a4:	pop	{r4, r5, r6, r7, r8, lr}
   126a8:	b	10eac <fseeko64@plt>
   126ac:	ldr	lr, [r0, #20]
   126b0:	ldr	ip, [r0, #16]
   126b4:	cmp	lr, ip
   126b8:	bne	12698 <__assert_fail@plt+0x1768>
   126bc:	ldr	r8, [r0, #36]	; 0x24
   126c0:	cmp	r8, #0
   126c4:	bne	12698 <__assert_fail@plt+0x1768>
   126c8:	mov	r6, r2
   126cc:	mov	r7, r3
   126d0:	bl	10e7c <fileno@plt>
   126d4:	mov	r2, r6
   126d8:	mov	r3, r7
   126dc:	str	r5, [sp]
   126e0:	bl	10da4 <lseek64@plt>
   126e4:	mvn	r3, #0
   126e8:	mvn	r2, #0
   126ec:	cmp	r1, r3
   126f0:	cmpeq	r0, r2
   126f4:	beq	12714 <__assert_fail@plt+0x17e4>
   126f8:	ldr	r3, [r4]
   126fc:	strd	r0, [r4, #80]	; 0x50
   12700:	mov	r0, r8
   12704:	bic	r3, r3, #16
   12708:	str	r3, [r4]
   1270c:	add	sp, sp, #8
   12710:	pop	{r4, r5, r6, r7, r8, pc}
   12714:	mvn	r0, #0
   12718:	b	1270c <__assert_fail@plt+0x17dc>
   1271c:	push	{r4, r5, r6, lr}
   12720:	subs	r4, r0, #0
   12724:	beq	12798 <__assert_fail@plt+0x1868>
   12728:	mov	r1, #47	; 0x2f
   1272c:	bl	10ed0 <strrchr@plt>
   12730:	subs	r5, r0, #0
   12734:	beq	12784 <__assert_fail@plt+0x1854>
   12738:	add	r6, r5, #1
   1273c:	sub	r3, r6, r4
   12740:	cmp	r3, #6
   12744:	ble	12784 <__assert_fail@plt+0x1854>
   12748:	mov	r2, #7
   1274c:	ldr	r1, [pc, #96]	; 127b4 <__assert_fail@plt+0x1884>
   12750:	sub	r0, r5, #6
   12754:	bl	10f18 <strncmp@plt>
   12758:	cmp	r0, #0
   1275c:	bne	12784 <__assert_fail@plt+0x1854>
   12760:	mov	r2, #3
   12764:	ldr	r1, [pc, #76]	; 127b8 <__assert_fail@plt+0x1888>
   12768:	mov	r0, r6
   1276c:	bl	10f18 <strncmp@plt>
   12770:	cmp	r0, #0
   12774:	movne	r4, r6
   12778:	ldreq	r3, [pc, #60]	; 127bc <__assert_fail@plt+0x188c>
   1277c:	addeq	r4, r5, #4
   12780:	streq	r4, [r3]
   12784:	ldr	r2, [pc, #52]	; 127c0 <__assert_fail@plt+0x1890>
   12788:	ldr	r3, [pc, #52]	; 127c4 <__assert_fail@plt+0x1894>
   1278c:	str	r4, [r2]
   12790:	str	r4, [r3]
   12794:	pop	{r4, r5, r6, pc}
   12798:	ldr	r3, [pc, #40]	; 127c8 <__assert_fail@plt+0x1898>
   1279c:	mov	r2, #55	; 0x37
   127a0:	mov	r1, #1
   127a4:	ldr	r3, [r3]
   127a8:	ldr	r0, [pc, #28]	; 127cc <__assert_fail@plt+0x189c>
   127ac:	bl	10d98 <fwrite@plt>
   127b0:	bl	10f24 <abort@plt>
   127b4:	andeq	r9, r1, ip, ror #10
   127b8:	andeq	r9, r1, r4, ror r5
   127bc:	andeq	sl, r2, r8, lsr r1
   127c0:	andeq	sl, r2, r8, ror #2
   127c4:	andeq	sl, r2, ip, lsr r1
   127c8:	andeq	sl, r2, r8, asr #2
   127cc:	andeq	r9, r1, r4, lsr r5
   127d0:	push	{r4, r5, r6, lr}
   127d4:	mov	r4, r0
   127d8:	mov	r5, r1
   127dc:	bl	18510 <__assert_fail@plt+0x75e0>
   127e0:	ldrb	r3, [r0]
   127e4:	bic	r3, r3, #32
   127e8:	cmp	r3, #85	; 0x55
   127ec:	bne	1284c <__assert_fail@plt+0x191c>
   127f0:	ldrb	r3, [r0, #1]
   127f4:	bic	r3, r3, #32
   127f8:	cmp	r3, #84	; 0x54
   127fc:	bne	12888 <__assert_fail@plt+0x1958>
   12800:	ldrb	r3, [r0, #2]
   12804:	bic	r3, r3, #32
   12808:	cmp	r3, #70	; 0x46
   1280c:	bne	12888 <__assert_fail@plt+0x1958>
   12810:	ldrb	r3, [r0, #3]
   12814:	cmp	r3, #45	; 0x2d
   12818:	bne	12888 <__assert_fail@plt+0x1958>
   1281c:	ldrb	r3, [r0, #4]
   12820:	cmp	r3, #56	; 0x38
   12824:	bne	12888 <__assert_fail@plt+0x1958>
   12828:	ldrb	r3, [r0, #5]
   1282c:	cmp	r3, #0
   12830:	bne	12888 <__assert_fail@plt+0x1958>
   12834:	ldrb	r2, [r4]
   12838:	ldr	r3, [pc, #152]	; 128d8 <__assert_fail@plt+0x19a8>
   1283c:	ldr	r0, [pc, #152]	; 128dc <__assert_fail@plt+0x19ac>
   12840:	cmp	r2, #96	; 0x60
   12844:	movne	r0, r3
   12848:	pop	{r4, r5, r6, pc}
   1284c:	cmp	r3, #71	; 0x47
   12850:	bne	12888 <__assert_fail@plt+0x1958>
   12854:	ldrb	r3, [r0, #1]
   12858:	bic	r3, r3, #32
   1285c:	cmp	r3, #66	; 0x42
   12860:	bne	12888 <__assert_fail@plt+0x1958>
   12864:	ldrb	r3, [r0, #2]
   12868:	cmp	r3, #49	; 0x31
   1286c:	bne	12888 <__assert_fail@plt+0x1958>
   12870:	ldrb	r3, [r0, #3]
   12874:	cmp	r3, #56	; 0x38
   12878:	bne	12888 <__assert_fail@plt+0x1958>
   1287c:	ldrb	r3, [r0, #4]
   12880:	cmp	r3, #48	; 0x30
   12884:	beq	1289c <__assert_fail@plt+0x196c>
   12888:	ldr	r3, [pc, #80]	; 128e0 <__assert_fail@plt+0x19b0>
   1288c:	cmp	r5, #9
   12890:	ldr	r0, [pc, #76]	; 128e4 <__assert_fail@plt+0x19b4>
   12894:	movne	r0, r3
   12898:	pop	{r4, r5, r6, pc}
   1289c:	ldrb	r3, [r0, #5]
   128a0:	cmp	r3, #51	; 0x33
   128a4:	bne	12888 <__assert_fail@plt+0x1958>
   128a8:	ldrb	r3, [r0, #6]
   128ac:	cmp	r3, #48	; 0x30
   128b0:	bne	12888 <__assert_fail@plt+0x1958>
   128b4:	ldrb	r3, [r0, #7]
   128b8:	cmp	r3, #0
   128bc:	bne	12888 <__assert_fail@plt+0x1958>
   128c0:	ldrb	r2, [r4]
   128c4:	ldr	r3, [pc, #28]	; 128e8 <__assert_fail@plt+0x19b8>
   128c8:	ldr	r0, [pc, #28]	; 128ec <__assert_fail@plt+0x19bc>
   128cc:	cmp	r2, #96	; 0x60
   128d0:	movne	r0, r3
   128d4:	pop	{r4, r5, r6, pc}
   128d8:	ldrdeq	r9, [r1], -r0
   128dc:	andeq	r9, r1, ip, asr #11
   128e0:	andeq	r9, r1, r0, ror #11
   128e4:	ldrdeq	r9, [r1], -ip
   128e8:	ldrdeq	r9, [r1], -r8
   128ec:	ldrdeq	r9, [r1], -r4
   128f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128f4:	sub	sp, sp, #140	; 0x8c
   128f8:	mov	r9, r1
   128fc:	str	r3, [sp, #24]
   12900:	mov	r3, #1
   12904:	mov	sl, r0
   12908:	str	r2, [sp, #44]	; 0x2c
   1290c:	str	r3, [sp, #28]
   12910:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   12914:	ldr	r3, [sp, #180]	; 0xb4
   12918:	mov	fp, r9
   1291c:	mov	r9, sl
   12920:	lsr	r3, r3, #1
   12924:	and	r3, r3, #1
   12928:	str	r3, [sp, #40]	; 0x28
   1292c:	ldr	r3, [sp, #180]	; 0xb4
   12930:	mov	r2, #0
   12934:	and	r3, r3, #4
   12938:	str	r3, [sp, #100]	; 0x64
   1293c:	ldr	r3, [sp, #180]	; 0xb4
   12940:	str	r2, [sp, #76]	; 0x4c
   12944:	and	r3, r3, #1
   12948:	str	r3, [sp, #96]	; 0x60
   1294c:	str	r2, [sp, #36]	; 0x24
   12950:	str	r2, [sp, #56]	; 0x38
   12954:	str	r2, [sp, #68]	; 0x44
   12958:	str	r2, [sp, #72]	; 0x48
   1295c:	str	r2, [sp, #84]	; 0x54
   12960:	str	r0, [sp, #80]	; 0x50
   12964:	ldr	r3, [sp, #176]	; 0xb0
   12968:	cmp	r3, #10
   1296c:	ldrls	pc, [pc, r3, lsl #2]
   12970:	b	13b48 <__assert_fail@plt+0x2c18>
   12974:	andeq	r2, r1, r0, lsr #19
   12978:	andeq	r2, r1, r0, asr #25
   1297c:	andeq	r2, r1, r8, lsl lr
   12980:	strdeq	r2, [r1], -r4
   12984:	andeq	r2, r1, ip, ror #28
   12988:	andeq	r2, r1, ip, asr #28
   1298c:	andeq	r2, r1, r4, lsl sp
   12990:	andeq	r2, r1, r8, lsr sp
   12994:	andeq	r2, r1, r0, ror #26
   12998:	andeq	r2, r1, r0, ror #26
   1299c:	andeq	r2, r1, r0, ror #26
   129a0:	mov	r3, #0
   129a4:	ldr	r1, [sp, #56]	; 0x38
   129a8:	ldr	r2, [sp, #176]	; 0xb0
   129ac:	ldr	lr, [sp, #176]	; 0xb0
   129b0:	mov	r8, r3
   129b4:	mov	ip, r3
   129b8:	str	r3, [sp, #40]	; 0x28
   129bc:	mov	r3, r1
   129c0:	cmp	r2, #2
   129c4:	moveq	r3, #0
   129c8:	andne	r3, r3, #1
   129cc:	mov	r0, r3
   129d0:	str	r3, [sp, #92]	; 0x5c
   129d4:	ldr	r3, [sp, #68]	; 0x44
   129d8:	sub	lr, lr, #2
   129dc:	adds	r2, r3, #0
   129e0:	movne	r2, #1
   129e4:	and	r3, r1, ip
   129e8:	and	r3, r2, r3
   129ec:	clz	lr, lr
   129f0:	str	r3, [sp, #88]	; 0x58
   129f4:	lsr	lr, lr, #5
   129f8:	mov	r3, ip
   129fc:	and	r3, r3, lr
   12a00:	mov	sl, #0
   12a04:	and	r0, r2, r0
   12a08:	str	r3, [sp, #64]	; 0x40
   12a0c:	eor	r3, r1, #1
   12a10:	str	lr, [sp, #52]	; 0x34
   12a14:	str	r0, [sp, #48]	; 0x30
   12a18:	str	r3, [sp, #60]	; 0x3c
   12a1c:	ldr	r3, [sp, #24]
   12a20:	cmn	r3, #1
   12a24:	beq	12f54 <__assert_fail@plt+0x2024>
   12a28:	subs	r7, r3, sl
   12a2c:	movne	r7, #1
   12a30:	cmp	r7, #0
   12a34:	beq	12f6c <__assert_fail@plt+0x203c>
   12a38:	ldr	r3, [sp, #48]	; 0x30
   12a3c:	cmp	r3, #0
   12a40:	beq	132d8 <__assert_fail@plt+0x23a8>
   12a44:	ldr	r2, [sp, #68]	; 0x44
   12a48:	ldr	r1, [sp, #24]
   12a4c:	cmp	r2, #1
   12a50:	mov	r3, r2
   12a54:	movls	r3, #0
   12a58:	movhi	r3, #1
   12a5c:	cmn	r1, #1
   12a60:	movne	r3, #0
   12a64:	cmp	r3, #0
   12a68:	add	r4, sl, r2
   12a6c:	beq	12a7c <__assert_fail@plt+0x1b4c>
   12a70:	ldr	r0, [sp, #44]	; 0x2c
   12a74:	bl	10e34 <strlen@plt>
   12a78:	str	r0, [sp, #24]
   12a7c:	ldr	r3, [sp, #24]
   12a80:	cmp	r3, r4
   12a84:	ldr	r3, [sp, #44]	; 0x2c
   12a88:	add	r5, r3, sl
   12a8c:	bcc	132e0 <__assert_fail@plt+0x23b0>
   12a90:	mov	r0, r5
   12a94:	ldr	r2, [sp, #68]	; 0x44
   12a98:	ldr	r1, [sp, #72]	; 0x48
   12a9c:	bl	10d50 <memcmp@plt>
   12aa0:	cmp	r0, #0
   12aa4:	bne	132e0 <__assert_fail@plt+0x23b0>
   12aa8:	ldr	r3, [sp, #40]	; 0x28
   12aac:	cmp	r3, #0
   12ab0:	bne	13c9c <__assert_fail@plt+0x2d6c>
   12ab4:	ldrb	r4, [r5]
   12ab8:	cmp	r4, #126	; 0x7e
   12abc:	ldrls	pc, [pc, r4, lsl #2]
   12ac0:	b	13bd8 <__assert_fail@plt+0x2ca8>
   12ac4:	muleq	r1, r8, r1
   12ac8:	ldrdeq	r3, [r1], -r8
   12acc:	ldrdeq	r3, [r1], -r8
   12ad0:	ldrdeq	r3, [r1], -r8
   12ad4:	ldrdeq	r3, [r1], -r8
   12ad8:	ldrdeq	r3, [r1], -r8
   12adc:	ldrdeq	r3, [r1], -r8
   12ae0:	andeq	r3, r1, r4, lsl #3
   12ae4:	andeq	r3, r1, r0, ror r1
   12ae8:	andeq	r3, r1, ip, asr #2
   12aec:	andeq	r3, r1, ip, lsr #2
   12af0:	andeq	r3, r1, ip, asr r1
   12af4:	muleq	r1, r4, r0
   12af8:	andeq	r3, r1, r8, asr #5
   12afc:	ldrdeq	r3, [r1], -r8
   12b00:	ldrdeq	r3, [r1], -r8
   12b04:	ldrdeq	r3, [r1], -r8
   12b08:	ldrdeq	r3, [r1], -r8
   12b0c:	ldrdeq	r3, [r1], -r8
   12b10:	ldrdeq	r3, [r1], -r8
   12b14:	ldrdeq	r3, [r1], -r8
   12b18:	ldrdeq	r3, [r1], -r8
   12b1c:	ldrdeq	r3, [r1], -r8
   12b20:	ldrdeq	r3, [r1], -r8
   12b24:	ldrdeq	r3, [r1], -r8
   12b28:	ldrdeq	r3, [r1], -r8
   12b2c:	ldrdeq	r3, [r1], -r8
   12b30:	ldrdeq	r3, [r1], -r8
   12b34:	ldrdeq	r3, [r1], -r8
   12b38:	ldrdeq	r3, [r1], -r8
   12b3c:	ldrdeq	r3, [r1], -r8
   12b40:	ldrdeq	r3, [r1], -r8
   12b44:			; <UNDEFINED> instruction: 0x000132b8
   12b48:	muleq	r1, r8, r2
   12b4c:	muleq	r1, r8, r2
   12b50:	andeq	r3, r1, r8, ror r2
   12b54:	muleq	r1, r8, r2
   12b58:	andeq	r3, r1, r4, lsl #1
   12b5c:	muleq	r1, r8, r2
   12b60:	andeq	r3, r1, r0, rrx
   12b64:	muleq	r1, r8, r2
   12b68:	muleq	r1, r8, r2
   12b6c:	muleq	r1, r8, r2
   12b70:	andeq	r3, r1, r4, lsl #1
   12b74:	andeq	r3, r1, r4, lsl #1
   12b78:	andeq	r3, r1, r4, lsl #1
   12b7c:	andeq	r3, r1, r4, lsl #1
   12b80:	andeq	r3, r1, r4, lsl #1
   12b84:	andeq	r3, r1, r4, lsl #1
   12b88:	andeq	r3, r1, r4, lsl #1
   12b8c:	andeq	r3, r1, r4, lsl #1
   12b90:	andeq	r3, r1, r4, lsl #1
   12b94:	andeq	r3, r1, r4, lsl #1
   12b98:	andeq	r3, r1, r4, lsl #1
   12b9c:	andeq	r3, r1, r4, lsl #1
   12ba0:	andeq	r3, r1, r4, lsl #1
   12ba4:	andeq	r3, r1, r4, lsl #1
   12ba8:	andeq	r3, r1, r4, lsl #1
   12bac:	andeq	r3, r1, r4, lsl #1
   12bb0:	muleq	r1, r8, r2
   12bb4:	muleq	r1, r8, r2
   12bb8:	muleq	r1, r8, r2
   12bbc:	muleq	r1, r8, r2
   12bc0:	andeq	r3, r1, r0, lsl r0
   12bc4:	ldrdeq	r3, [r1], -r8
   12bc8:	andeq	r3, r1, r4, lsl #1
   12bcc:	andeq	r3, r1, r4, lsl #1
   12bd0:	andeq	r3, r1, r4, lsl #1
   12bd4:	andeq	r3, r1, r4, lsl #1
   12bd8:	andeq	r3, r1, r4, lsl #1
   12bdc:	andeq	r3, r1, r4, lsl #1
   12be0:	andeq	r3, r1, r4, lsl #1
   12be4:	andeq	r3, r1, r4, lsl #1
   12be8:	andeq	r3, r1, r4, lsl #1
   12bec:	andeq	r3, r1, r4, lsl #1
   12bf0:	andeq	r3, r1, r4, lsl #1
   12bf4:	andeq	r3, r1, r4, lsl #1
   12bf8:	andeq	r3, r1, r4, lsl #1
   12bfc:	andeq	r3, r1, r4, lsl #1
   12c00:	andeq	r3, r1, r4, lsl #1
   12c04:	andeq	r3, r1, r4, lsl #1
   12c08:	andeq	r3, r1, r4, lsl #1
   12c0c:	andeq	r3, r1, r4, lsl #1
   12c10:	andeq	r3, r1, r4, lsl #1
   12c14:	andeq	r3, r1, r4, lsl #1
   12c18:	andeq	r3, r1, r4, lsl #1
   12c1c:	andeq	r3, r1, r4, lsl #1
   12c20:	andeq	r3, r1, r4, lsl #1
   12c24:	andeq	r3, r1, r4, lsl #1
   12c28:	andeq	r3, r1, r4, lsl #1
   12c2c:	andeq	r3, r1, r4, lsl #1
   12c30:	muleq	r1, r8, r2
   12c34:	ldrdeq	r2, [r1], -ip
   12c38:	andeq	r3, r1, r4, lsl #1
   12c3c:	muleq	r1, r8, r2
   12c40:	andeq	r3, r1, r4, lsl #1
   12c44:	muleq	r1, r8, r2
   12c48:	andeq	r3, r1, r4, lsl #1
   12c4c:	andeq	r3, r1, r4, lsl #1
   12c50:	andeq	r3, r1, r4, lsl #1
   12c54:	andeq	r3, r1, r4, lsl #1
   12c58:	andeq	r3, r1, r4, lsl #1
   12c5c:	andeq	r3, r1, r4, lsl #1
   12c60:	andeq	r3, r1, r4, lsl #1
   12c64:	andeq	r3, r1, r4, lsl #1
   12c68:	andeq	r3, r1, r4, lsl #1
   12c6c:	andeq	r3, r1, r4, lsl #1
   12c70:	andeq	r3, r1, r4, lsl #1
   12c74:	andeq	r3, r1, r4, lsl #1
   12c78:	andeq	r3, r1, r4, lsl #1
   12c7c:	andeq	r3, r1, r4, lsl #1
   12c80:	andeq	r3, r1, r4, lsl #1
   12c84:	andeq	r3, r1, r4, lsl #1
   12c88:	andeq	r3, r1, r4, lsl #1
   12c8c:	andeq	r3, r1, r4, lsl #1
   12c90:	andeq	r3, r1, r4, lsl #1
   12c94:	andeq	r3, r1, r4, lsl #1
   12c98:	andeq	r3, r1, r4, lsl #1
   12c9c:	andeq	r3, r1, r4, lsl #1
   12ca0:	andeq	r3, r1, r4, lsl #1
   12ca4:	andeq	r3, r1, r4, lsl #1
   12ca8:	andeq	r3, r1, r4, lsl #1
   12cac:	andeq	r3, r1, r4, lsl #1
   12cb0:	muleq	r1, r4, lr
   12cb4:	muleq	r1, r8, r2
   12cb8:	muleq	r1, r4, lr
   12cbc:	andeq	r3, r1, r8, ror r2
   12cc0:	mov	r3, #1
   12cc4:	str	r3, [sp, #40]	; 0x28
   12cc8:	str	r3, [sp, #68]	; 0x44
   12ccc:	mov	r8, #0
   12cd0:	ldr	r3, [pc, #4056]	; 13cb0 <__assert_fail@plt+0x2d80>
   12cd4:	str	r3, [sp, #72]	; 0x48
   12cd8:	mov	r3, #2
   12cdc:	str	r3, [sp, #176]	; 0xb0
   12ce0:	ldr	r1, [sp, #56]	; 0x38
   12ce4:	mov	r2, r3
   12ce8:	ldr	ip, [sp, #40]	; 0x28
   12cec:	mov	lr, r3
   12cf0:	b	129bc <__assert_fail@plt+0x1a8c>
   12cf4:	mov	r3, #1
   12cf8:	str	r3, [sp, #56]	; 0x38
   12cfc:	str	r3, [sp, #68]	; 0x44
   12d00:	str	r3, [sp, #40]	; 0x28
   12d04:	ldr	r3, [pc, #4004]	; 13cb0 <__assert_fail@plt+0x2d80>
   12d08:	mov	r8, #0
   12d0c:	str	r3, [sp, #72]	; 0x48
   12d10:	b	12cd8 <__assert_fail@plt+0x1da8>
   12d14:	mov	r3, #1
   12d18:	str	r3, [sp, #56]	; 0x38
   12d1c:	str	r3, [sp, #68]	; 0x44
   12d20:	str	r3, [sp, #40]	; 0x28
   12d24:	ldr	r3, [pc, #3976]	; 13cb4 <__assert_fail@plt+0x2d84>
   12d28:	mov	r8, #0
   12d2c:	str	r3, [sp, #72]	; 0x48
   12d30:	mov	r3, #5
   12d34:	b	12cdc <__assert_fail@plt+0x1dac>
   12d38:	mov	r3, #0
   12d3c:	str	r3, [sp, #40]	; 0x28
   12d40:	mov	r3, #1
   12d44:	str	r3, [sp, #56]	; 0x38
   12d48:	mov	r8, #0
   12d4c:	mov	r1, r3
   12d50:	ldr	r2, [sp, #176]	; 0xb0
   12d54:	ldr	ip, [sp, #40]	; 0x28
   12d58:	ldr	lr, [sp, #176]	; 0xb0
   12d5c:	b	129bc <__assert_fail@plt+0x1a8c>
   12d60:	ldr	r3, [sp, #176]	; 0xb0
   12d64:	cmp	r3, #10
   12d68:	beq	12dac <__assert_fail@plt+0x1e7c>
   12d6c:	mov	r2, #5
   12d70:	ldr	r1, [pc, #3904]	; 13cb8 <__assert_fail@plt+0x2d88>
   12d74:	mov	r0, #0
   12d78:	bl	10d68 <dcgettext@plt>
   12d7c:	ldr	r2, [pc, #3892]	; 13cb8 <__assert_fail@plt+0x2d88>
   12d80:	cmp	r0, r2
   12d84:	str	r0, [sp, #188]	; 0xbc
   12d88:	beq	13e44 <__assert_fail@plt+0x2f14>
   12d8c:	mov	r2, #5
   12d90:	ldr	r1, [pc, #3864]	; 13cb0 <__assert_fail@plt+0x2d80>
   12d94:	mov	r0, #0
   12d98:	bl	10d68 <dcgettext@plt>
   12d9c:	ldr	r2, [pc, #3852]	; 13cb0 <__assert_fail@plt+0x2d80>
   12da0:	cmp	r0, r2
   12da4:	str	r0, [sp, #192]	; 0xc0
   12da8:	beq	13e34 <__assert_fail@plt+0x2f04>
   12dac:	ldr	r8, [sp, #40]	; 0x28
   12db0:	cmp	r8, #0
   12db4:	movne	r8, #0
   12db8:	bne	12de8 <__assert_fail@plt+0x1eb8>
   12dbc:	ldr	r3, [sp, #188]	; 0xbc
   12dc0:	ldrb	r3, [r3]
   12dc4:	cmp	r3, #0
   12dc8:	beq	12de8 <__assert_fail@plt+0x1eb8>
   12dcc:	ldr	r2, [sp, #188]	; 0xbc
   12dd0:	cmp	fp, r8
   12dd4:	strbhi	r3, [r9, r8]
   12dd8:	ldrb	r3, [r2, #1]!
   12ddc:	add	r8, r8, #1
   12de0:	cmp	r3, #0
   12de4:	bne	12dd0 <__assert_fail@plt+0x1ea0>
   12de8:	ldr	r0, [sp, #192]	; 0xc0
   12dec:	bl	10e34 <strlen@plt>
   12df0:	ldr	r3, [sp, #192]	; 0xc0
   12df4:	ldr	r2, [sp, #176]	; 0xb0
   12df8:	str	r3, [sp, #72]	; 0x48
   12dfc:	mov	r3, #1
   12e00:	str	r3, [sp, #56]	; 0x38
   12e04:	mov	r1, r3
   12e08:	ldr	ip, [sp, #40]	; 0x28
   12e0c:	ldr	lr, [sp, #176]	; 0xb0
   12e10:	str	r0, [sp, #68]	; 0x44
   12e14:	b	129bc <__assert_fail@plt+0x1a8c>
   12e18:	ldr	r3, [sp, #40]	; 0x28
   12e1c:	cmp	r3, #0
   12e20:	beq	13ac8 <__assert_fail@plt+0x2b98>
   12e24:	mov	r3, #1
   12e28:	str	r3, [sp, #68]	; 0x44
   12e2c:	ldr	r3, [pc, #3708]	; 13cb0 <__assert_fail@plt+0x2d80>
   12e30:	str	r3, [sp, #72]	; 0x48
   12e34:	mov	r8, #0
   12e38:	ldr	r1, [sp, #56]	; 0x38
   12e3c:	ldr	r2, [sp, #176]	; 0xb0
   12e40:	ldr	ip, [sp, #40]	; 0x28
   12e44:	ldr	lr, [sp, #176]	; 0xb0
   12e48:	b	129bc <__assert_fail@plt+0x1a8c>
   12e4c:	ldr	r3, [sp, #40]	; 0x28
   12e50:	cmp	r3, #0
   12e54:	beq	13b4c <__assert_fail@plt+0x2c1c>
   12e58:	str	r3, [sp, #56]	; 0x38
   12e5c:	mov	r3, #1
   12e60:	str	r3, [sp, #68]	; 0x44
   12e64:	ldr	r3, [pc, #3656]	; 13cb4 <__assert_fail@plt+0x2d84>
   12e68:	b	12e30 <__assert_fail@plt+0x1f00>
   12e6c:	ldr	r3, [sp, #40]	; 0x28
   12e70:	cmp	r3, #0
   12e74:	mov	r3, #1
   12e78:	streq	r3, [sp, #56]	; 0x38
   12e7c:	beq	13ac8 <__assert_fail@plt+0x2b98>
   12e80:	str	r3, [sp, #68]	; 0x44
   12e84:	ldr	r3, [pc, #3620]	; 13cb0 <__assert_fail@plt+0x2d80>
   12e88:	mov	r8, #0
   12e8c:	str	r3, [sp, #72]	; 0x48
   12e90:	b	12cd8 <__assert_fail@plt+0x1da8>
   12e94:	ldr	r3, [sp, #24]
   12e98:	ldr	r6, [sp, #48]	; 0x30
   12e9c:	cmn	r3, #1
   12ea0:	beq	134fc <__assert_fail@plt+0x25cc>
   12ea4:	subs	r3, r3, #1
   12ea8:	movne	r3, #1
   12eac:	cmp	r3, #0
   12eb0:	beq	1327c <__assert_fail@plt+0x234c>
   12eb4:	ldr	r1, [sp, #52]	; 0x34
   12eb8:	mov	r7, r3
   12ebc:	mov	r3, #0
   12ec0:	str	r3, [sp, #32]
   12ec4:	ldr	r3, [sp, #60]	; 0x3c
   12ec8:	orr	r2, r1, r3
   12ecc:	ldr	r3, [sp, #40]	; 0x28
   12ed0:	eor	r2, r2, #1
   12ed4:	orr	r2, r3, r2
   12ed8:	tst	r2, #255	; 0xff
   12edc:	bne	13800 <__assert_fail@plt+0x28d0>
   12ee0:	cmp	r6, #0
   12ee4:	bne	130c0 <__assert_fail@plt+0x2190>
   12ee8:	ldr	r3, [sp, #36]	; 0x24
   12eec:	add	sl, sl, #1
   12ef0:	and	r3, r3, r7
   12ef4:	uxtb	r6, r3
   12ef8:	cmp	r6, #0
   12efc:	beq	12f28 <__assert_fail@plt+0x1ff8>
   12f00:	cmp	fp, r8
   12f04:	movhi	r3, #39	; 0x27
   12f08:	strbhi	r3, [r9, r8]
   12f0c:	add	r3, r8, #1
   12f10:	cmp	fp, r3
   12f14:	movhi	r2, #39	; 0x27
   12f18:	add	r8, r8, #2
   12f1c:	strbhi	r2, [r9, r3]
   12f20:	mov	r3, #0
   12f24:	str	r3, [sp, #36]	; 0x24
   12f28:	ldr	r2, [sp, #32]
   12f2c:	cmp	r8, fp
   12f30:	ldr	r3, [sp, #28]
   12f34:	strbcc	r4, [r9, r8]
   12f38:	cmp	r2, #0
   12f3c:	moveq	r3, #0
   12f40:	str	r3, [sp, #28]
   12f44:	ldr	r3, [sp, #24]
   12f48:	add	r8, r8, #1
   12f4c:	cmn	r3, #1
   12f50:	bne	12a28 <__assert_fail@plt+0x1af8>
   12f54:	ldr	r3, [sp, #44]	; 0x2c
   12f58:	ldrb	r3, [r3, sl]
   12f5c:	adds	r7, r3, #0
   12f60:	movne	r7, #1
   12f64:	cmp	r7, #0
   12f68:	bne	12a38 <__assert_fail@plt+0x1b08>
   12f6c:	ldr	r3, [sp, #64]	; 0x40
   12f70:	cmp	r8, #0
   12f74:	movne	r3, #0
   12f78:	andeq	r3, r3, #1
   12f7c:	cmp	r3, #0
   12f80:	str	r3, [sp, #64]	; 0x40
   12f84:	bne	13a28 <__assert_fail@plt+0x2af8>
   12f88:	ldr	r3, [sp, #40]	; 0x28
   12f8c:	ldr	r2, [sp, #52]	; 0x34
   12f90:	eor	r3, r3, #1
   12f94:	ands	r2, r2, r3
   12f98:	beq	13e54 <__assert_fail@plt+0x2f24>
   12f9c:	ldr	r3, [sp, #76]	; 0x4c
   12fa0:	cmp	r3, #0
   12fa4:	beq	13e24 <__assert_fail@plt+0x2ef4>
   12fa8:	ldr	r3, [sp, #28]
   12fac:	cmp	r3, #0
   12fb0:	bne	13de0 <__assert_fail@plt+0x2eb0>
   12fb4:	ldr	r2, [sp, #84]	; 0x54
   12fb8:	clz	r3, fp
   12fbc:	cmp	r2, #0
   12fc0:	lsr	r3, r3, #5
   12fc4:	moveq	r3, #0
   12fc8:	cmp	r3, #0
   12fcc:	beq	13d80 <__assert_fail@plt+0x2e50>
   12fd0:	mov	fp, r2
   12fd4:	str	r3, [sp, #76]	; 0x4c
   12fd8:	b	12964 <__assert_fail@plt+0x1a34>
   12fdc:	ldr	r3, [sp, #176]	; 0xb0
   12fe0:	ldr	r6, [sp, #48]	; 0x30
   12fe4:	cmp	r3, #2
   12fe8:	beq	13520 <__assert_fail@plt+0x25f0>
   12fec:	ldr	r3, [sp, #88]	; 0x58
   12ff0:	cmp	r3, #0
   12ff4:	beq	13aa4 <__assert_fail@plt+0x2b74>
   12ff8:	mov	r3, #0
   12ffc:	add	sl, sl, #1
   13000:	ldr	r6, [sp, #36]	; 0x24
   13004:	str	r3, [sp, #32]
   13008:	mov	r4, #92	; 0x5c
   1300c:	b	12ef8 <__assert_fail@plt+0x1fc8>
   13010:	ldr	r3, [sp, #176]	; 0xb0
   13014:	ldr	r6, [sp, #48]	; 0x30
   13018:	cmp	r3, #2
   1301c:	beq	13550 <__assert_fail@plt+0x2620>
   13020:	cmp	r3, #5
   13024:	bne	13ab4 <__assert_fail@plt+0x2b84>
   13028:	ldr	r3, [sp, #100]	; 0x64
   1302c:	cmp	r3, #0
   13030:	beq	13b18 <__assert_fail@plt+0x2be8>
   13034:	ldr	r2, [sp, #24]
   13038:	add	r3, sl, #2
   1303c:	cmp	r2, r3
   13040:	bls	13050 <__assert_fail@plt+0x2120>
   13044:	ldrb	r4, [r5, #1]
   13048:	cmp	r4, #63	; 0x3f
   1304c:	beq	13cc0 <__assert_fail@plt+0x2d90>
   13050:	mov	r1, #0
   13054:	str	r1, [sp, #32]
   13058:	mov	r4, #63	; 0x3f
   1305c:	b	12ec4 <__assert_fail@plt+0x1f94>
   13060:	ldr	r3, [sp, #176]	; 0xb0
   13064:	ldr	r6, [sp, #48]	; 0x30
   13068:	cmp	r3, #2
   1306c:	beq	1357c <__assert_fail@plt+0x264c>
   13070:	str	r7, [sp, #32]
   13074:	str	r7, [sp, #76]	; 0x4c
   13078:	mov	r1, #0
   1307c:	mov	r4, #39	; 0x27
   13080:	b	12ec4 <__assert_fail@plt+0x1f94>
   13084:	ldr	r6, [sp, #48]	; 0x30
   13088:	ldr	r1, [sp, #52]	; 0x34
   1308c:	str	r7, [sp, #32]
   13090:	b	12ec4 <__assert_fail@plt+0x1f94>
   13094:	ldr	r6, [sp, #48]	; 0x30
   13098:	ldr	r1, [sp, #52]	; 0x34
   1309c:	mov	r4, #12
   130a0:	mov	r3, #102	; 0x66
   130a4:	ldr	r2, [sp, #56]	; 0x38
   130a8:	cmp	r2, #0
   130ac:	streq	r2, [sp, #32]
   130b0:	beq	12ec4 <__assert_fail@plt+0x1f94>
   130b4:	mov	r4, r3
   130b8:	mov	r3, #0
   130bc:	str	r3, [sp, #32]
   130c0:	ldr	r3, [sp, #40]	; 0x28
   130c4:	cmp	r3, #0
   130c8:	bne	13838 <__assert_fail@plt+0x2908>
   130cc:	ldr	r3, [sp, #36]	; 0x24
   130d0:	eor	r3, r3, #1
   130d4:	and	r3, r3, r1
   130d8:	ands	r3, r3, #255	; 0xff
   130dc:	beq	13114 <__assert_fail@plt+0x21e4>
   130e0:	cmp	fp, r8
   130e4:	movhi	r2, #39	; 0x27
   130e8:	strbhi	r2, [r9, r8]
   130ec:	add	r2, r8, #1
   130f0:	cmp	fp, r2
   130f4:	movhi	r1, #36	; 0x24
   130f8:	strbhi	r1, [r9, r2]
   130fc:	add	r2, r8, #2
   13100:	cmp	fp, r2
   13104:	add	r8, r8, #3
   13108:	movhi	r1, #39	; 0x27
   1310c:	strbhi	r1, [r9, r2]
   13110:	str	r3, [sp, #36]	; 0x24
   13114:	cmp	fp, r8
   13118:	movhi	r3, #92	; 0x5c
   1311c:	strbhi	r3, [r9, r8]
   13120:	add	sl, sl, #1
   13124:	add	r8, r8, #1
   13128:	b	12f28 <__assert_fail@plt+0x1ff8>
   1312c:	ldr	r6, [sp, #48]	; 0x30
   13130:	mov	r4, #10
   13134:	mov	r3, #110	; 0x6e
   13138:	ldr	r2, [sp, #64]	; 0x40
   1313c:	cmp	r2, #0
   13140:	bne	13bc0 <__assert_fail@plt+0x2c90>
   13144:	ldr	r1, [sp, #52]	; 0x34
   13148:	b	130a4 <__assert_fail@plt+0x2174>
   1314c:	ldr	r6, [sp, #48]	; 0x30
   13150:	ldr	r1, [sp, #52]	; 0x34
   13154:	mov	r3, #116	; 0x74
   13158:	b	130a4 <__assert_fail@plt+0x2174>
   1315c:	ldr	r6, [sp, #48]	; 0x30
   13160:	ldr	r1, [sp, #52]	; 0x34
   13164:	mov	r4, #11
   13168:	mov	r3, #118	; 0x76
   1316c:	b	130a4 <__assert_fail@plt+0x2174>
   13170:	ldr	r6, [sp, #48]	; 0x30
   13174:	ldr	r1, [sp, #52]	; 0x34
   13178:	mov	r4, #8
   1317c:	mov	r3, #98	; 0x62
   13180:	b	130a4 <__assert_fail@plt+0x2174>
   13184:	ldr	r6, [sp, #48]	; 0x30
   13188:	ldr	r1, [sp, #52]	; 0x34
   1318c:	mov	r4, #7
   13190:	mov	r3, #97	; 0x61
   13194:	b	130a4 <__assert_fail@plt+0x2174>
   13198:	ldr	r3, [sp, #56]	; 0x38
   1319c:	ldr	r6, [sp, #48]	; 0x30
   131a0:	cmp	r3, #0
   131a4:	beq	13668 <__assert_fail@plt+0x2738>
   131a8:	ldr	r3, [sp, #40]	; 0x28
   131ac:	cmp	r3, #0
   131b0:	bne	13c9c <__assert_fail@plt+0x2d6c>
   131b4:	ldr	r3, [sp, #36]	; 0x24
   131b8:	ldr	r2, [sp, #52]	; 0x34
   131bc:	eor	r3, r3, #1
   131c0:	ands	r3, r2, r3
   131c4:	moveq	r2, r8
   131c8:	beq	13200 <__assert_fail@plt+0x22d0>
   131cc:	cmp	fp, r8
   131d0:	movhi	r2, #39	; 0x27
   131d4:	strbhi	r2, [r9, r8]
   131d8:	add	r2, r8, #1
   131dc:	cmp	fp, r2
   131e0:	movhi	r1, #36	; 0x24
   131e4:	strbhi	r1, [r9, r2]
   131e8:	add	r2, r8, #2
   131ec:	cmp	fp, r2
   131f0:	movhi	r1, #39	; 0x27
   131f4:	strbhi	r1, [r9, r2]
   131f8:	add	r2, r8, #3
   131fc:	str	r3, [sp, #36]	; 0x24
   13200:	cmp	fp, r2
   13204:	movhi	r3, #92	; 0x5c
   13208:	strbhi	r3, [r9, r2]
   1320c:	ldr	r3, [sp, #92]	; 0x5c
   13210:	add	r8, r2, #1
   13214:	cmp	r3, #0
   13218:	beq	13b9c <__assert_fail@plt+0x2c6c>
   1321c:	ldr	r1, [sp, #24]
   13220:	add	r3, sl, #1
   13224:	cmp	r1, r3
   13228:	bls	13260 <__assert_fail@plt+0x2330>
   1322c:	ldr	r1, [sp, #44]	; 0x2c
   13230:	ldrb	r3, [r1, r3]
   13234:	sub	r3, r3, #48	; 0x30
   13238:	cmp	r3, #9
   1323c:	bhi	13260 <__assert_fail@plt+0x2330>
   13240:	cmp	fp, r8
   13244:	movhi	r3, #48	; 0x30
   13248:	strbhi	r3, [r9, r8]
   1324c:	add	r3, r2, #2
   13250:	cmp	fp, r3
   13254:	add	r8, r2, #3
   13258:	movhi	r1, #48	; 0x30
   1325c:	strbhi	r1, [r9, r3]
   13260:	ldr	r3, [sp, #40]	; 0x28
   13264:	ldr	r1, [sp, #52]	; 0x34
   13268:	mov	r7, r3
   1326c:	str	r3, [sp, #32]
   13270:	mov	r4, #48	; 0x30
   13274:	b	12ec4 <__assert_fail@plt+0x1f94>
   13278:	ldr	r6, [sp, #48]	; 0x30
   1327c:	cmp	sl, #0
   13280:	streq	r7, [sp, #32]
   13284:	beq	132a4 <__assert_fail@plt+0x2374>
   13288:	mov	r3, #0
   1328c:	ldr	r1, [sp, #52]	; 0x34
   13290:	str	r3, [sp, #32]
   13294:	b	12ec4 <__assert_fail@plt+0x1f94>
   13298:	ldr	r6, [sp, #48]	; 0x30
   1329c:	mov	r3, #0
   132a0:	str	r3, [sp, #32]
   132a4:	ldr	r3, [sp, #64]	; 0x40
   132a8:	cmp	r3, #0
   132ac:	bne	13a28 <__assert_fail@plt+0x2af8>
   132b0:	ldr	r1, [sp, #52]	; 0x34
   132b4:	b	12ec4 <__assert_fail@plt+0x1f94>
   132b8:	ldr	r3, [sp, #48]	; 0x30
   132bc:	mov	r6, r3
   132c0:	str	r3, [sp, #32]
   132c4:	b	132a4 <__assert_fail@plt+0x2374>
   132c8:	ldr	r6, [sp, #48]	; 0x30
   132cc:	mov	r4, #13
   132d0:	mov	r3, #114	; 0x72
   132d4:	b	13138 <__assert_fail@plt+0x2208>
   132d8:	ldr	r3, [sp, #44]	; 0x2c
   132dc:	add	r5, r3, sl
   132e0:	ldrb	r4, [r5]
   132e4:	cmp	r4, #126	; 0x7e
   132e8:	ldrls	pc, [pc, r4, lsl #2]
   132ec:	b	13688 <__assert_fail@plt+0x2758>
   132f0:	andeq	r3, r1, r8, asr r6
   132f4:	andeq	r3, r1, r8, lsl #13
   132f8:	andeq	r3, r1, r8, lsl #13
   132fc:	andeq	r3, r1, r8, lsl #13
   13300:	andeq	r3, r1, r8, lsl #13
   13304:	andeq	r3, r1, r8, lsl #13
   13308:	andeq	r3, r1, r8, lsl #13
   1330c:	andeq	r3, r1, r0, asr r6
   13310:	andeq	r3, r1, r8, asr #12
   13314:	andeq	r3, r1, ip, lsr r6
   13318:	andeq	r3, r1, r4, lsr r6
   1331c:	andeq	r3, r1, ip, lsr #12
   13320:	andeq	r3, r1, r4, lsr #12
   13324:	andeq	r3, r1, ip, lsl r6
   13328:	andeq	r3, r1, r8, lsl #13
   1332c:	andeq	r3, r1, r8, lsl #13
   13330:	andeq	r3, r1, r8, lsl #13
   13334:	andeq	r3, r1, r8, lsl #13
   13338:	andeq	r3, r1, r8, lsl #13
   1333c:	andeq	r3, r1, r8, lsl #13
   13340:	andeq	r3, r1, r8, lsl #13
   13344:	andeq	r3, r1, r8, lsl #13
   13348:	andeq	r3, r1, r8, lsl #13
   1334c:	andeq	r3, r1, r8, lsl #13
   13350:	andeq	r3, r1, r8, lsl #13
   13354:	andeq	r3, r1, r8, lsl #13
   13358:	andeq	r3, r1, r8, lsl #13
   1335c:	andeq	r3, r1, r8, lsl #13
   13360:	andeq	r3, r1, r8, lsl #13
   13364:	andeq	r3, r1, r8, lsl #13
   13368:	andeq	r3, r1, r8, lsl #13
   1336c:	andeq	r3, r1, r8, lsl #13
   13370:	andeq	r3, r1, r0, lsl r6
   13374:	andeq	r3, r1, r8, lsl #12
   13378:	andeq	r3, r1, r8, lsl #12
   1337c:	andeq	r3, r1, r0, lsl #12
   13380:	andeq	r3, r1, r8, lsl #12
   13384:	strdeq	r3, [r1], -r8
   13388:	andeq	r3, r1, r8, lsl #12
   1338c:	andeq	r3, r1, ip, ror #10
   13390:	andeq	r3, r1, r8, lsl #12
   13394:	andeq	r3, r1, r8, lsl #12
   13398:	andeq	r3, r1, r8, lsl #12
   1339c:	strdeq	r3, [r1], -r8
   133a0:	strdeq	r3, [r1], -r8
   133a4:	strdeq	r3, [r1], -r8
   133a8:	strdeq	r3, [r1], -r8
   133ac:	strdeq	r3, [r1], -r8
   133b0:	strdeq	r3, [r1], -r8
   133b4:	strdeq	r3, [r1], -r8
   133b8:	strdeq	r3, [r1], -r8
   133bc:	strdeq	r3, [r1], -r8
   133c0:	strdeq	r3, [r1], -r8
   133c4:	strdeq	r3, [r1], -r8
   133c8:	strdeq	r3, [r1], -r8
   133cc:	strdeq	r3, [r1], -r8
   133d0:	strdeq	r3, [r1], -r8
   133d4:	strdeq	r3, [r1], -r8
   133d8:	strdeq	r3, [r1], -r8
   133dc:	andeq	r3, r1, r8, lsl #12
   133e0:	andeq	r3, r1, r8, lsl #12
   133e4:	andeq	r3, r1, r8, lsl #12
   133e8:	andeq	r3, r1, r8, lsl #12
   133ec:	andeq	r3, r1, r0, asr #10
   133f0:	andeq	r3, r1, r8, lsl #13
   133f4:	strdeq	r3, [r1], -r8
   133f8:	strdeq	r3, [r1], -r8
   133fc:	strdeq	r3, [r1], -r8
   13400:	strdeq	r3, [r1], -r8
   13404:	strdeq	r3, [r1], -r8
   13408:	strdeq	r3, [r1], -r8
   1340c:	strdeq	r3, [r1], -r8
   13410:	strdeq	r3, [r1], -r8
   13414:	strdeq	r3, [r1], -r8
   13418:	strdeq	r3, [r1], -r8
   1341c:	strdeq	r3, [r1], -r8
   13420:	strdeq	r3, [r1], -r8
   13424:	strdeq	r3, [r1], -r8
   13428:	strdeq	r3, [r1], -r8
   1342c:	strdeq	r3, [r1], -r8
   13430:	strdeq	r3, [r1], -r8
   13434:	strdeq	r3, [r1], -r8
   13438:	strdeq	r3, [r1], -r8
   1343c:	strdeq	r3, [r1], -r8
   13440:	strdeq	r3, [r1], -r8
   13444:	strdeq	r3, [r1], -r8
   13448:	strdeq	r3, [r1], -r8
   1344c:	strdeq	r3, [r1], -r8
   13450:	strdeq	r3, [r1], -r8
   13454:	strdeq	r3, [r1], -r8
   13458:	strdeq	r3, [r1], -r8
   1345c:	andeq	r3, r1, r8, lsl #12
   13460:	andeq	r3, r1, r0, lsl r5
   13464:	strdeq	r3, [r1], -r8
   13468:	andeq	r3, r1, r8, lsl #12
   1346c:	strdeq	r3, [r1], -r8
   13470:	andeq	r3, r1, r8, lsl #12
   13474:	strdeq	r3, [r1], -r8
   13478:	strdeq	r3, [r1], -r8
   1347c:	strdeq	r3, [r1], -r8
   13480:	strdeq	r3, [r1], -r8
   13484:	strdeq	r3, [r1], -r8
   13488:	strdeq	r3, [r1], -r8
   1348c:	strdeq	r3, [r1], -r8
   13490:	strdeq	r3, [r1], -r8
   13494:	strdeq	r3, [r1], -r8
   13498:	strdeq	r3, [r1], -r8
   1349c:	strdeq	r3, [r1], -r8
   134a0:	strdeq	r3, [r1], -r8
   134a4:	strdeq	r3, [r1], -r8
   134a8:	strdeq	r3, [r1], -r8
   134ac:	strdeq	r3, [r1], -r8
   134b0:	strdeq	r3, [r1], -r8
   134b4:	strdeq	r3, [r1], -r8
   134b8:	strdeq	r3, [r1], -r8
   134bc:	strdeq	r3, [r1], -r8
   134c0:	strdeq	r3, [r1], -r8
   134c4:	strdeq	r3, [r1], -r8
   134c8:	strdeq	r3, [r1], -r8
   134cc:	strdeq	r3, [r1], -r8
   134d0:	strdeq	r3, [r1], -r8
   134d4:	strdeq	r3, [r1], -r8
   134d8:	strdeq	r3, [r1], -r8
   134dc:	andeq	r3, r1, ip, ror #9
   134e0:	andeq	r3, r1, r8, lsl #12
   134e4:	andeq	r3, r1, ip, ror #9
   134e8:	andeq	r3, r1, r0, lsl #12
   134ec:	ldr	r3, [sp, #24]
   134f0:	mov	r6, #0
   134f4:	cmn	r3, #1
   134f8:	bne	12ea4 <__assert_fail@plt+0x1f74>
   134fc:	ldr	r3, [sp, #44]	; 0x2c
   13500:	ldrb	r3, [r3, #1]
   13504:	adds	r3, r3, #0
   13508:	movne	r3, #1
   1350c:	b	12eac <__assert_fail@plt+0x1f7c>
   13510:	ldr	r3, [sp, #176]	; 0xb0
   13514:	mov	r6, #0
   13518:	cmp	r3, #2
   1351c:	bne	12fec <__assert_fail@plt+0x20bc>
   13520:	ldr	r3, [sp, #64]	; 0x40
   13524:	cmp	r3, #0
   13528:	bne	13d60 <__assert_fail@plt+0x2e30>
   1352c:	add	sl, sl, #1
   13530:	ldr	r6, [sp, #36]	; 0x24
   13534:	str	r3, [sp, #32]
   13538:	mov	r4, #92	; 0x5c
   1353c:	b	12ef8 <__assert_fail@plt+0x1fc8>
   13540:	ldr	r3, [sp, #176]	; 0xb0
   13544:	mov	r6, #0
   13548:	cmp	r3, #2
   1354c:	bne	13020 <__assert_fail@plt+0x20f0>
   13550:	ldr	r3, [sp, #40]	; 0x28
   13554:	cmp	r3, #0
   13558:	bne	1383c <__assert_fail@plt+0x290c>
   1355c:	mov	r1, r7
   13560:	str	r3, [sp, #32]
   13564:	mov	r4, #63	; 0x3f
   13568:	b	12ec4 <__assert_fail@plt+0x1f94>
   1356c:	ldr	r3, [sp, #176]	; 0xb0
   13570:	mov	r6, #0
   13574:	cmp	r3, #2
   13578:	bne	13070 <__assert_fail@plt+0x2140>
   1357c:	ldr	r3, [sp, #64]	; 0x40
   13580:	cmp	r3, #0
   13584:	bne	13d60 <__assert_fail@plt+0x2e30>
   13588:	ldr	r2, [sp, #84]	; 0x54
   1358c:	adds	r3, fp, #0
   13590:	movne	r3, #1
   13594:	cmp	r2, #0
   13598:	movne	r3, #0
   1359c:	cmp	r3, #0
   135a0:	strne	fp, [sp, #84]	; 0x54
   135a4:	movne	fp, #0
   135a8:	bne	135d8 <__assert_fail@plt+0x26a8>
   135ac:	cmp	fp, r8
   135b0:	movhi	r3, #39	; 0x27
   135b4:	strbhi	r3, [r9, r8]
   135b8:	add	r3, r8, #1
   135bc:	cmp	fp, r3
   135c0:	movhi	r2, #92	; 0x5c
   135c4:	strbhi	r2, [r9, r3]
   135c8:	add	r3, r8, #2
   135cc:	cmp	fp, r3
   135d0:	movhi	r2, #39	; 0x27
   135d4:	strbhi	r2, [r9, r3]
   135d8:	ldr	r3, [sp, #64]	; 0x40
   135dc:	add	r8, r8, #3
   135e0:	mov	r1, r7
   135e4:	str	r7, [sp, #32]
   135e8:	str	r7, [sp, #76]	; 0x4c
   135ec:	str	r3, [sp, #36]	; 0x24
   135f0:	mov	r4, #39	; 0x27
   135f4:	b	12ec4 <__assert_fail@plt+0x1f94>
   135f8:	mov	r6, #0
   135fc:	b	13088 <__assert_fail@plt+0x2158>
   13600:	mov	r6, #0
   13604:	b	1327c <__assert_fail@plt+0x234c>
   13608:	mov	r6, #0
   1360c:	b	1329c <__assert_fail@plt+0x236c>
   13610:	str	r7, [sp, #32]
   13614:	mov	r6, #0
   13618:	b	132a4 <__assert_fail@plt+0x2374>
   1361c:	mov	r6, #0
   13620:	b	132cc <__assert_fail@plt+0x239c>
   13624:	mov	r6, #0
   13628:	b	13098 <__assert_fail@plt+0x2168>
   1362c:	mov	r6, #0
   13630:	b	13160 <__assert_fail@plt+0x2230>
   13634:	mov	r6, #0
   13638:	b	13130 <__assert_fail@plt+0x2200>
   1363c:	mov	r6, #0
   13640:	mov	r3, #116	; 0x74
   13644:	b	13138 <__assert_fail@plt+0x2208>
   13648:	mov	r6, #0
   1364c:	b	13174 <__assert_fail@plt+0x2244>
   13650:	mov	r6, #0
   13654:	b	13188 <__assert_fail@plt+0x2258>
   13658:	ldr	r3, [sp, #56]	; 0x38
   1365c:	mov	r6, #0
   13660:	cmp	r3, #0
   13664:	bne	131a8 <__assert_fail@plt+0x2278>
   13668:	ldr	r3, [sp, #96]	; 0x60
   1366c:	cmp	r3, #0
   13670:	addne	sl, sl, #1
   13674:	bne	12a1c <__assert_fail@plt+0x1aec>
   13678:	ldr	r1, [sp, #52]	; 0x34
   1367c:	str	r3, [sp, #32]
   13680:	mov	r4, r3
   13684:	b	12ec4 <__assert_fail@plt+0x1f94>
   13688:	mov	r6, #0
   1368c:	ldr	r3, [sp, #80]	; 0x50
   13690:	cmp	r3, #1
   13694:	bne	13884 <__assert_fail@plt+0x2954>
   13698:	bl	10e1c <__ctype_b_loc@plt>
   1369c:	ldr	r2, [sp, #80]	; 0x50
   136a0:	sxth	r3, r4
   136a4:	mov	r1, r2
   136a8:	lsl	r3, r3, #1
   136ac:	ldr	r2, [r0]
   136b0:	ldrh	r3, [r2, r3]
   136b4:	and	r3, r3, #16384	; 0x4000
   136b8:	cmp	r3, #0
   136bc:	movne	r3, #1
   136c0:	moveq	r3, #0
   136c4:	str	r3, [sp, #32]
   136c8:	moveq	r3, #1
   136cc:	movne	r3, #0
   136d0:	ldr	r2, [sp, #56]	; 0x38
   136d4:	and	r3, r3, r2
   136d8:	ands	r3, r3, #255	; 0xff
   136dc:	beq	132b0 <__assert_fail@plt+0x2380>
   136e0:	add	r1, sl, r1
   136e4:	mov	r0, #0
   136e8:	ldr	r7, [sp, #40]	; 0x28
   136ec:	ldr	r2, [sp, #36]	; 0x24
   136f0:	ldr	lr, [sp, #52]	; 0x34
   136f4:	b	137a4 <__assert_fail@plt+0x2874>
   136f8:	cmp	r7, #0
   136fc:	bne	13af8 <__assert_fail@plt+0x2bc8>
   13700:	eor	r0, r2, #1
   13704:	ands	r0, lr, r0
   13708:	beq	13740 <__assert_fail@plt+0x2810>
   1370c:	cmp	fp, r8
   13710:	movhi	r2, #39	; 0x27
   13714:	strbhi	r2, [r9, r8]
   13718:	add	r2, r8, #1
   1371c:	cmp	fp, r2
   13720:	movhi	ip, #36	; 0x24
   13724:	strbhi	ip, [r9, r2]
   13728:	add	r2, r8, #2
   1372c:	cmp	fp, r2
   13730:	movhi	ip, #39	; 0x27
   13734:	strbhi	ip, [r9, r2]
   13738:	add	r8, r8, #3
   1373c:	mov	r2, r0
   13740:	cmp	fp, r8
   13744:	movhi	r0, #92	; 0x5c
   13748:	strbhi	r0, [r9, r8]
   1374c:	add	r0, r8, #1
   13750:	cmp	fp, r0
   13754:	lsrhi	ip, r4, #6
   13758:	addhi	ip, ip, #48	; 0x30
   1375c:	strbhi	ip, [r9, r0]
   13760:	add	ip, r8, #2
   13764:	cmp	fp, ip
   13768:	lsrhi	r0, r4, #3
   1376c:	andhi	r0, r0, #7
   13770:	addhi	r0, r0, #48	; 0x30
   13774:	add	sl, sl, #1
   13778:	strbhi	r0, [r9, ip]
   1377c:	and	r4, r4, #7
   13780:	cmp	sl, r1
   13784:	add	r4, r4, #48	; 0x30
   13788:	add	r8, r8, #3
   1378c:	bcs	13b10 <__assert_fail@plt+0x2be0>
   13790:	mov	r0, r3
   13794:	cmp	fp, r8
   13798:	strbhi	r4, [r9, r8]
   1379c:	ldrb	r4, [r5, #1]!
   137a0:	add	r8, r8, #1
   137a4:	cmp	r3, #0
   137a8:	bne	136f8 <__assert_fail@plt+0x27c8>
   137ac:	cmp	r6, #0
   137b0:	bne	13854 <__assert_fail@plt+0x2924>
   137b4:	eor	r6, r0, #1
   137b8:	and	r6, r6, r2
   137bc:	add	sl, sl, #1
   137c0:	cmp	r1, sl
   137c4:	uxtb	r6, r6
   137c8:	bls	1387c <__assert_fail@plt+0x294c>
   137cc:	cmp	r6, #0
   137d0:	beq	13794 <__assert_fail@plt+0x2864>
   137d4:	cmp	fp, r8
   137d8:	movhi	r2, #39	; 0x27
   137dc:	strbhi	r2, [r9, r8]
   137e0:	add	r2, r8, #1
   137e4:	cmp	fp, r2
   137e8:	movhi	ip, #39	; 0x27
   137ec:	strbhi	ip, [r9, r2]
   137f0:	add	r8, r8, #2
   137f4:	mov	r6, r3
   137f8:	mov	r2, r3
   137fc:	b	13794 <__assert_fail@plt+0x2864>
   13800:	ldr	r3, [sp, #184]	; 0xb8
   13804:	cmp	r3, #0
   13808:	beq	12ee0 <__assert_fail@plt+0x1fb0>
   1380c:	lsr	r2, r4, #5
   13810:	mov	r0, r3
   13814:	uxtb	r2, r2
   13818:	and	r3, r4, #31
   1381c:	ldr	r2, [r0, r2, lsl #2]
   13820:	lsr	r3, r2, r3
   13824:	tst	r3, #1
   13828:	beq	12ee0 <__assert_fail@plt+0x1fb0>
   1382c:	ldr	r3, [sp, #40]	; 0x28
   13830:	cmp	r3, #0
   13834:	beq	130cc <__assert_fail@plt+0x219c>
   13838:	mov	r3, r1
   1383c:	str	r3, [sp, #64]	; 0x40
   13840:	mov	sl, r9
   13844:	ldr	r3, [sp, #56]	; 0x38
   13848:	mov	r9, fp
   1384c:	ldr	r2, [sp, #64]	; 0x40
   13850:	b	13a40 <__assert_fail@plt+0x2b10>
   13854:	cmp	fp, r8
   13858:	eor	r6, r0, #1
   1385c:	movhi	ip, #92	; 0x5c
   13860:	and	r6, r6, r2
   13864:	add	sl, sl, #1
   13868:	strbhi	ip, [r9, r8]
   1386c:	cmp	r1, sl
   13870:	add	r8, r8, #1
   13874:	uxtb	r6, r6
   13878:	bhi	137cc <__assert_fail@plt+0x289c>
   1387c:	str	r2, [sp, #36]	; 0x24
   13880:	b	12ef8 <__assert_fail@plt+0x1fc8>
   13884:	ldr	r3, [sp, #24]
   13888:	cmn	r3, #1
   1388c:	mov	r3, #0
   13890:	str	r3, [sp, #128]	; 0x80
   13894:	str	r3, [sp, #132]	; 0x84
   13898:	beq	13b8c <__assert_fail@plt+0x2c5c>
   1389c:	mov	r2, r7
   138a0:	mov	r3, #0
   138a4:	str	r7, [sp, #104]	; 0x68
   138a8:	str	r5, [sp, #116]	; 0x74
   138ac:	mov	r7, r3
   138b0:	mov	r5, r2
   138b4:	str	r4, [sp, #32]
   138b8:	str	r6, [sp, #108]	; 0x6c
   138bc:	str	r8, [sp, #112]	; 0x70
   138c0:	ldr	r3, [sp, #44]	; 0x2c
   138c4:	add	r6, sl, r7
   138c8:	add	r4, r3, r6
   138cc:	ldr	r3, [sp, #24]
   138d0:	mov	r1, r4
   138d4:	sub	r2, r3, r6
   138d8:	add	r0, sp, #124	; 0x7c
   138dc:	add	r3, sp, #128	; 0x80
   138e0:	bl	18544 <__assert_fail@plt+0x7614>
   138e4:	subs	r8, r0, #0
   138e8:	beq	13c70 <__assert_fail@plt+0x2d40>
   138ec:	cmn	r8, #1
   138f0:	beq	13c48 <__assert_fail@plt+0x2d18>
   138f4:	cmn	r8, #2
   138f8:	beq	13be0 <__assert_fail@plt+0x2cb0>
   138fc:	ldr	r3, [sp, #64]	; 0x40
   13900:	cmp	r3, #0
   13904:	beq	139c4 <__assert_fail@plt+0x2a94>
   13908:	cmp	r8, #1
   1390c:	beq	139c4 <__assert_fail@plt+0x2a94>
   13910:	sub	r3, r8, #1
   13914:	add	r6, r3, r6
   13918:	ldr	r3, [sp, #44]	; 0x2c
   1391c:	add	r6, r3, r6
   13920:	ldrb	r3, [r4, #1]!
   13924:	sub	r3, r3, #91	; 0x5b
   13928:	cmp	r3, #33	; 0x21
   1392c:	ldrls	pc, [pc, r3, lsl #2]
   13930:	b	139bc <__assert_fail@plt+0x2a8c>
   13934:	andeq	r3, r1, r8, lsr #20
   13938:	andeq	r3, r1, r8, lsr #20
   1393c:			; <UNDEFINED> instruction: 0x000139bc
   13940:	andeq	r3, r1, r8, lsr #20
   13944:			; <UNDEFINED> instruction: 0x000139bc
   13948:	andeq	r3, r1, r8, lsr #20
   1394c:			; <UNDEFINED> instruction: 0x000139bc
   13950:			; <UNDEFINED> instruction: 0x000139bc
   13954:			; <UNDEFINED> instruction: 0x000139bc
   13958:			; <UNDEFINED> instruction: 0x000139bc
   1395c:			; <UNDEFINED> instruction: 0x000139bc
   13960:			; <UNDEFINED> instruction: 0x000139bc
   13964:			; <UNDEFINED> instruction: 0x000139bc
   13968:			; <UNDEFINED> instruction: 0x000139bc
   1396c:			; <UNDEFINED> instruction: 0x000139bc
   13970:			; <UNDEFINED> instruction: 0x000139bc
   13974:			; <UNDEFINED> instruction: 0x000139bc
   13978:			; <UNDEFINED> instruction: 0x000139bc
   1397c:			; <UNDEFINED> instruction: 0x000139bc
   13980:			; <UNDEFINED> instruction: 0x000139bc
   13984:			; <UNDEFINED> instruction: 0x000139bc
   13988:			; <UNDEFINED> instruction: 0x000139bc
   1398c:			; <UNDEFINED> instruction: 0x000139bc
   13990:			; <UNDEFINED> instruction: 0x000139bc
   13994:			; <UNDEFINED> instruction: 0x000139bc
   13998:			; <UNDEFINED> instruction: 0x000139bc
   1399c:			; <UNDEFINED> instruction: 0x000139bc
   139a0:			; <UNDEFINED> instruction: 0x000139bc
   139a4:			; <UNDEFINED> instruction: 0x000139bc
   139a8:			; <UNDEFINED> instruction: 0x000139bc
   139ac:			; <UNDEFINED> instruction: 0x000139bc
   139b0:			; <UNDEFINED> instruction: 0x000139bc
   139b4:			; <UNDEFINED> instruction: 0x000139bc
   139b8:	andeq	r3, r1, r8, lsr #20
   139bc:	cmp	r6, r4
   139c0:	bne	13920 <__assert_fail@plt+0x29f0>
   139c4:	ldr	r0, [sp, #124]	; 0x7c
   139c8:	bl	10d8c <iswprint@plt>
   139cc:	add	r7, r7, r8
   139d0:	cmp	r0, #0
   139d4:	add	r0, sp, #128	; 0x80
   139d8:	moveq	r5, #0
   139dc:	bl	10d38 <mbsinit@plt>
   139e0:	cmp	r0, #0
   139e4:	beq	138c0 <__assert_fail@plt+0x2990>
   139e8:	ldr	r4, [sp, #32]
   139ec:	str	r5, [sp, #32]
   139f0:	ldr	r3, [sp, #32]
   139f4:	mov	r1, r7
   139f8:	eor	r3, r3, #1
   139fc:	ldr	r7, [sp, #104]	; 0x68
   13a00:	ldr	r6, [sp, #108]	; 0x6c
   13a04:	ldr	r8, [sp, #112]	; 0x70
   13a08:	ldr	r5, [sp, #116]	; 0x74
   13a0c:	uxtb	r3, r3
   13a10:	cmp	r1, #1
   13a14:	bls	136d0 <__assert_fail@plt+0x27a0>
   13a18:	ldr	r2, [sp, #56]	; 0x38
   13a1c:	and	r3, r3, r2
   13a20:	uxtb	r3, r3
   13a24:	b	136e0 <__assert_fail@plt+0x27b0>
   13a28:	mov	r3, #2
   13a2c:	str	r3, [sp, #176]	; 0xb0
   13a30:	ldr	r2, [sp, #64]	; 0x40
   13a34:	ldr	r3, [sp, #56]	; 0x38
   13a38:	mov	sl, r9
   13a3c:	mov	r9, fp
   13a40:	and	r3, r3, r2
   13a44:	tst	r3, #255	; 0xff
   13a48:	ldr	r3, [sp, #176]	; 0xb0
   13a4c:	movne	r3, #4
   13a50:	str	r3, [sp, #176]	; 0xb0
   13a54:	ldr	r3, [sp, #180]	; 0xb4
   13a58:	mov	ip, #0
   13a5c:	bic	r3, r3, #2
   13a60:	str	r3, [sp, #4]
   13a64:	ldr	r3, [sp, #192]	; 0xc0
   13a68:	ldr	r2, [sp, #44]	; 0x2c
   13a6c:	str	r3, [sp, #16]
   13a70:	ldr	r3, [sp, #188]	; 0xbc
   13a74:	mov	r1, r9
   13a78:	str	r3, [sp, #12]
   13a7c:	ldr	r3, [sp, #176]	; 0xb0
   13a80:	mov	r0, sl
   13a84:	str	r3, [sp]
   13a88:	str	ip, [sp, #8]
   13a8c:	ldr	r3, [sp, #24]
   13a90:	bl	128f0 <__assert_fail@plt+0x19c0>
   13a94:	mov	fp, r0
   13a98:	mov	r0, fp
   13a9c:	add	sp, sp, #140	; 0x8c
   13aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa4:	mov	r4, #92	; 0x5c
   13aa8:	mov	r1, #0
   13aac:	mov	r3, r4
   13ab0:	b	130a4 <__assert_fail@plt+0x2174>
   13ab4:	mov	r3, #0
   13ab8:	ldr	r1, [sp, #52]	; 0x34
   13abc:	str	r3, [sp, #32]
   13ac0:	mov	r4, #63	; 0x3f
   13ac4:	b	12ec4 <__assert_fail@plt+0x1f94>
   13ac8:	cmp	fp, #0
   13acc:	beq	13b28 <__assert_fail@plt+0x2bf8>
   13ad0:	mov	r3, #39	; 0x27
   13ad4:	strb	r3, [r9]
   13ad8:	mov	r3, #0
   13adc:	str	r3, [sp, #40]	; 0x28
   13ae0:	mov	r3, #1
   13ae4:	str	r3, [sp, #68]	; 0x44
   13ae8:	ldr	r3, [pc, #448]	; 13cb0 <__assert_fail@plt+0x2d80>
   13aec:	mov	r8, #1
   13af0:	str	r3, [sp, #72]	; 0x48
   13af4:	b	12cd8 <__assert_fail@plt+0x1da8>
   13af8:	ldr	r3, [sp, #40]	; 0x28
   13afc:	mov	sl, r9
   13b00:	str	r3, [sp, #56]	; 0x38
   13b04:	mov	r9, fp
   13b08:	ldr	r2, [sp, #64]	; 0x40
   13b0c:	b	13a40 <__assert_fail@plt+0x2b10>
   13b10:	str	r2, [sp, #36]	; 0x24
   13b14:	b	12f28 <__assert_fail@plt+0x1ff8>
   13b18:	mov	r1, #0
   13b1c:	str	r3, [sp, #32]
   13b20:	mov	r4, #63	; 0x3f
   13b24:	b	12ec4 <__assert_fail@plt+0x1f94>
   13b28:	ldr	r3, [pc, #384]	; 13cb0 <__assert_fail@plt+0x2d80>
   13b2c:	str	r3, [sp, #72]	; 0x48
   13b30:	mov	r3, #0
   13b34:	str	r3, [sp, #40]	; 0x28
   13b38:	mov	r3, #1
   13b3c:	str	r3, [sp, #68]	; 0x44
   13b40:	mov	r8, r3
   13b44:	b	12cd8 <__assert_fail@plt+0x1da8>
   13b48:	bl	10f24 <abort@plt>
   13b4c:	cmp	fp, #0
   13b50:	beq	13bb0 <__assert_fail@plt+0x2c80>
   13b54:	mov	r2, #1
   13b58:	mov	r3, #34	; 0x22
   13b5c:	strb	r3, [r9]
   13b60:	mov	r8, r2
   13b64:	mov	r3, r2
   13b68:	str	r2, [sp, #68]	; 0x44
   13b6c:	str	r3, [sp, #56]	; 0x38
   13b70:	ldr	r3, [pc, #316]	; 13cb4 <__assert_fail@plt+0x2d84>
   13b74:	ldr	r1, [sp, #56]	; 0x38
   13b78:	str	r3, [sp, #72]	; 0x48
   13b7c:	ldr	r2, [sp, #176]	; 0xb0
   13b80:	ldr	ip, [sp, #40]	; 0x28
   13b84:	ldr	lr, [sp, #176]	; 0xb0
   13b88:	b	129bc <__assert_fail@plt+0x1a8c>
   13b8c:	ldr	r0, [sp, #44]	; 0x2c
   13b90:	bl	10e34 <strlen@plt>
   13b94:	str	r0, [sp, #24]
   13b98:	b	1389c <__assert_fail@plt+0x296c>
   13b9c:	mov	r7, #0
   13ba0:	ldr	r1, [sp, #52]	; 0x34
   13ba4:	str	r3, [sp, #32]
   13ba8:	mov	r4, #48	; 0x30
   13bac:	b	12ec4 <__assert_fail@plt+0x1f94>
   13bb0:	mov	r3, #1
   13bb4:	str	r3, [sp, #68]	; 0x44
   13bb8:	mov	r8, r3
   13bbc:	b	13b6c <__assert_fail@plt+0x2c3c>
   13bc0:	mov	r3, #2
   13bc4:	mov	sl, r9
   13bc8:	str	r3, [sp, #176]	; 0xb0
   13bcc:	mov	r9, fp
   13bd0:	ldr	r3, [sp, #56]	; 0x38
   13bd4:	b	13a40 <__assert_fail@plt+0x2b10>
   13bd8:	ldr	r6, [sp, #48]	; 0x30
   13bdc:	b	1368c <__assert_fail@plt+0x275c>
   13be0:	ldr	r0, [sp, #24]
   13be4:	mov	ip, r6
   13be8:	cmp	r0, ip
   13bec:	mov	r1, r7
   13bf0:	mov	r2, r4
   13bf4:	ldr	r7, [sp, #104]	; 0x68
   13bf8:	ldr	r4, [sp, #32]
   13bfc:	ldr	r6, [sp, #108]	; 0x6c
   13c00:	ldr	r8, [sp, #112]	; 0x70
   13c04:	ldr	r5, [sp, #116]	; 0x74
   13c08:	bls	13c38 <__assert_fail@plt+0x2d08>
   13c0c:	ldrb	r3, [r2]
   13c10:	cmp	r3, #0
   13c14:	bne	13c28 <__assert_fail@plt+0x2cf8>
   13c18:	b	13d48 <__assert_fail@plt+0x2e18>
   13c1c:	ldrb	r3, [r2, #1]!
   13c20:	cmp	r3, #0
   13c24:	beq	13d48 <__assert_fail@plt+0x2e18>
   13c28:	add	r1, r1, #1
   13c2c:	add	r3, sl, r1
   13c30:	cmp	r0, r3
   13c34:	bhi	13c1c <__assert_fail@plt+0x2cec>
   13c38:	mov	r2, #0
   13c3c:	mov	r3, r7
   13c40:	str	r2, [sp, #32]
   13c44:	b	13a10 <__assert_fail@plt+0x2ae0>
   13c48:	mov	r1, r7
   13c4c:	ldr	r7, [sp, #104]	; 0x68
   13c50:	mov	r2, #0
   13c54:	ldr	r4, [sp, #32]
   13c58:	ldr	r6, [sp, #108]	; 0x6c
   13c5c:	ldr	r8, [sp, #112]	; 0x70
   13c60:	ldr	r5, [sp, #116]	; 0x74
   13c64:	mov	r3, r7
   13c68:	str	r2, [sp, #32]
   13c6c:	b	13a10 <__assert_fail@plt+0x2ae0>
   13c70:	mov	r3, r5
   13c74:	eor	r3, r3, #1
   13c78:	ldr	r4, [sp, #32]
   13c7c:	mov	r1, r7
   13c80:	str	r5, [sp, #32]
   13c84:	ldr	r7, [sp, #104]	; 0x68
   13c88:	ldr	r6, [sp, #108]	; 0x6c
   13c8c:	ldr	r8, [sp, #112]	; 0x70
   13c90:	ldr	r5, [sp, #116]	; 0x74
   13c94:	uxtb	r3, r3
   13c98:	b	13a10 <__assert_fail@plt+0x2ae0>
   13c9c:	mov	sl, r9
   13ca0:	str	r3, [sp, #56]	; 0x38
   13ca4:	mov	r9, fp
   13ca8:	ldr	r2, [sp, #64]	; 0x40
   13cac:	b	13a40 <__assert_fail@plt+0x2b10>
   13cb0:	andeq	r9, r1, r0, ror #11
   13cb4:	ldrdeq	r9, [r1], -ip
   13cb8:	andeq	r9, r1, r4, ror #11
   13cbc:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13cc0:	ldr	r2, [sp, #44]	; 0x2c
   13cc4:	ldrb	r1, [r2, r3]
   13cc8:	sub	r2, r1, #33	; 0x21
   13ccc:	uxtb	r2, r2
   13cd0:	cmp	r2, #29
   13cd4:	bhi	13d54 <__assert_fail@plt+0x2e24>
   13cd8:	ldr	r0, [pc, #-36]	; 13cbc <__assert_fail@plt+0x2d8c>
   13cdc:	mov	ip, #1
   13ce0:	ands	r2, r0, ip, lsl r2
   13ce4:	beq	13d74 <__assert_fail@plt+0x2e44>
   13ce8:	ldr	r2, [sp, #40]	; 0x28
   13cec:	cmp	r2, #0
   13cf0:	bne	13e68 <__assert_fail@plt+0x2f38>
   13cf4:	add	r2, r8, #1
   13cf8:	cmp	fp, r8
   13cfc:	strbhi	r4, [r9, r8]
   13d00:	cmp	fp, r2
   13d04:	movhi	r0, #34	; 0x22
   13d08:	strbhi	r0, [r9, r2]
   13d0c:	add	r2, r8, #2
   13d10:	cmp	fp, r2
   13d14:	movhi	r0, #34	; 0x22
   13d18:	strbhi	r0, [r9, r2]
   13d1c:	add	r2, r8, #3
   13d20:	cmp	fp, r2
   13d24:	mov	sl, r3
   13d28:	ldr	r3, [sp, #40]	; 0x28
   13d2c:	movhi	r0, #63	; 0x3f
   13d30:	mov	r4, r1
   13d34:	strbhi	r0, [r9, r2]
   13d38:	add	r8, r8, #4
   13d3c:	mov	r1, r3
   13d40:	str	r3, [sp, #32]
   13d44:	b	12ec4 <__assert_fail@plt+0x1f94>
   13d48:	str	r3, [sp, #32]
   13d4c:	mov	r3, r7
   13d50:	b	13a10 <__assert_fail@plt+0x2ae0>
   13d54:	mov	r1, #0
   13d58:	str	r1, [sp, #32]
   13d5c:	b	12ec4 <__assert_fail@plt+0x1f94>
   13d60:	mov	sl, r9
   13d64:	ldr	r3, [sp, #56]	; 0x38
   13d68:	mov	r9, fp
   13d6c:	ldr	r2, [sp, #64]	; 0x40
   13d70:	b	13a40 <__assert_fail@plt+0x2b10>
   13d74:	str	r2, [sp, #32]
   13d78:	mov	r1, #0
   13d7c:	b	12ec4 <__assert_fail@plt+0x1f94>
   13d80:	ldr	r2, [sp, #76]	; 0x4c
   13d84:	mov	sl, r9
   13d88:	mov	r9, fp
   13d8c:	mov	fp, r8
   13d90:	ldr	r1, [sp, #72]	; 0x48
   13d94:	cmp	r1, #0
   13d98:	moveq	r3, #0
   13d9c:	andne	r3, r2, #1
   13da0:	cmp	r3, #0
   13da4:	beq	13dd0 <__assert_fail@plt+0x2ea0>
   13da8:	ldrb	r3, [r1]
   13dac:	cmp	r3, #0
   13db0:	beq	13dd0 <__assert_fail@plt+0x2ea0>
   13db4:	mov	r2, r1
   13db8:	cmp	r9, fp
   13dbc:	strbhi	r3, [sl, fp]
   13dc0:	ldrb	r3, [r2, #1]!
   13dc4:	add	fp, fp, #1
   13dc8:	cmp	r3, #0
   13dcc:	bne	13db8 <__assert_fail@plt+0x2e88>
   13dd0:	cmp	r9, fp
   13dd4:	movhi	r3, #0
   13dd8:	strbhi	r3, [sl, fp]
   13ddc:	b	13a98 <__assert_fail@plt+0x2b68>
   13de0:	ldr	r3, [sp, #192]	; 0xc0
   13de4:	mov	ip, #5
   13de8:	str	r3, [sp, #16]
   13dec:	ldr	r3, [sp, #188]	; 0xbc
   13df0:	ldr	r2, [sp, #44]	; 0x2c
   13df4:	str	r3, [sp, #12]
   13df8:	ldr	r3, [sp, #184]	; 0xb8
   13dfc:	ldr	r1, [sp, #84]	; 0x54
   13e00:	str	r3, [sp, #8]
   13e04:	ldr	r3, [sp, #180]	; 0xb4
   13e08:	mov	r0, r9
   13e0c:	str	r3, [sp, #4]
   13e10:	str	ip, [sp]
   13e14:	ldr	r3, [sp, #24]
   13e18:	bl	128f0 <__assert_fail@plt+0x19c0>
   13e1c:	mov	fp, r0
   13e20:	b	13a98 <__assert_fail@plt+0x2b68>
   13e24:	mov	sl, r9
   13e28:	mov	r9, fp
   13e2c:	mov	fp, r8
   13e30:	b	13d90 <__assert_fail@plt+0x2e60>
   13e34:	ldr	r1, [sp, #176]	; 0xb0
   13e38:	bl	127d0 <__assert_fail@plt+0x18a0>
   13e3c:	str	r0, [sp, #192]	; 0xc0
   13e40:	b	12dac <__assert_fail@plt+0x1e7c>
   13e44:	ldr	r1, [sp, #176]	; 0xb0
   13e48:	bl	127d0 <__assert_fail@plt+0x18a0>
   13e4c:	str	r0, [sp, #188]	; 0xbc
   13e50:	b	12d8c <__assert_fail@plt+0x1e5c>
   13e54:	mov	sl, r9
   13e58:	mov	r2, r3
   13e5c:	mov	r9, fp
   13e60:	mov	fp, r8
   13e64:	b	13d90 <__assert_fail@plt+0x2e60>
   13e68:	mov	sl, r9
   13e6c:	mov	r9, fp
   13e70:	b	13a54 <__assert_fail@plt+0x2b24>
   13e74:	push	{r4, r5, r6, lr}
   13e78:	mov	r5, r0
   13e7c:	bl	10e4c <__errno_location@plt>
   13e80:	cmp	r5, #0
   13e84:	mov	r1, #48	; 0x30
   13e88:	mov	r4, r0
   13e8c:	ldr	r0, [pc, #16]	; 13ea4 <__assert_fail@plt+0x2f74>
   13e90:	ldr	r6, [r4]
   13e94:	movne	r0, r5
   13e98:	bl	17710 <__assert_fail@plt+0x67e0>
   13e9c:	str	r6, [r4]
   13ea0:	pop	{r4, r5, r6, pc}
   13ea4:	andeq	sl, r2, ip, ror #2
   13ea8:	ldr	r3, [pc, #12]	; 13ebc <__assert_fail@plt+0x2f8c>
   13eac:	cmp	r0, #0
   13eb0:	moveq	r0, r3
   13eb4:	ldr	r0, [r0]
   13eb8:	bx	lr
   13ebc:	andeq	sl, r2, ip, ror #2
   13ec0:	ldr	r3, [pc, #12]	; 13ed4 <__assert_fail@plt+0x2fa4>
   13ec4:	cmp	r0, #0
   13ec8:	moveq	r0, r3
   13ecc:	str	r1, [r0]
   13ed0:	bx	lr
   13ed4:	andeq	sl, r2, ip, ror #2
   13ed8:	ldr	r3, [pc, #52]	; 13f14 <__assert_fail@plt+0x2fe4>
   13edc:	cmp	r0, #0
   13ee0:	moveq	r0, r3
   13ee4:	add	r3, r0, #8
   13ee8:	push	{lr}		; (str lr, [sp, #-4]!)
   13eec:	lsr	lr, r1, #5
   13ef0:	and	r1, r1, #31
   13ef4:	ldr	ip, [r3, lr, lsl #2]
   13ef8:	lsr	r0, ip, r1
   13efc:	eor	r2, r2, r0
   13f00:	and	r2, r2, #1
   13f04:	and	r0, r0, #1
   13f08:	eor	r1, ip, r2, lsl r1
   13f0c:	str	r1, [r3, lr, lsl #2]
   13f10:	pop	{pc}		; (ldr pc, [sp], #4)
   13f14:	andeq	sl, r2, ip, ror #2
   13f18:	ldr	r3, [pc, #16]	; 13f30 <__assert_fail@plt+0x3000>
   13f1c:	cmp	r0, #0
   13f20:	movne	r3, r0
   13f24:	ldr	r0, [r3, #4]
   13f28:	str	r1, [r3, #4]
   13f2c:	bx	lr
   13f30:	andeq	sl, r2, ip, ror #2
   13f34:	ldr	r3, [pc, #44]	; 13f68 <__assert_fail@plt+0x3038>
   13f38:	cmp	r0, #0
   13f3c:	moveq	r0, r3
   13f40:	mov	ip, #10
   13f44:	cmp	r2, #0
   13f48:	cmpne	r1, #0
   13f4c:	str	ip, [r0]
   13f50:	beq	13f60 <__assert_fail@plt+0x3030>
   13f54:	str	r1, [r0, #40]	; 0x28
   13f58:	str	r2, [r0, #44]	; 0x2c
   13f5c:	bx	lr
   13f60:	push	{r4, lr}
   13f64:	bl	10f24 <abort@plt>
   13f68:	andeq	sl, r2, ip, ror #2
   13f6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f70:	sub	sp, sp, #24
   13f74:	ldr	ip, [pc, #108]	; 13fe8 <__assert_fail@plt+0x30b8>
   13f78:	ldr	r4, [sp, #56]	; 0x38
   13f7c:	mov	r9, r2
   13f80:	cmp	r4, #0
   13f84:	moveq	r4, ip
   13f88:	mov	sl, r3
   13f8c:	mov	r7, r0
   13f90:	mov	r8, r1
   13f94:	bl	10e4c <__errno_location@plt>
   13f98:	ldr	r3, [r4, #44]	; 0x2c
   13f9c:	mov	r1, r8
   13fa0:	ldr	r6, [r0]
   13fa4:	str	r3, [sp, #16]
   13fa8:	ldr	r2, [r4, #40]	; 0x28
   13fac:	add	r3, r4, #8
   13fb0:	str	r3, [sp, #8]
   13fb4:	str	r2, [sp, #12]
   13fb8:	ldr	r2, [r4, #4]
   13fbc:	mov	r5, r0
   13fc0:	str	r2, [sp, #4]
   13fc4:	ldr	ip, [r4]
   13fc8:	mov	r3, sl
   13fcc:	mov	r2, r9
   13fd0:	mov	r0, r7
   13fd4:	str	ip, [sp]
   13fd8:	bl	128f0 <__assert_fail@plt+0x19c0>
   13fdc:	str	r6, [r5]
   13fe0:	add	sp, sp, #24
   13fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fe8:	andeq	sl, r2, ip, ror #2
   13fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ff0:	cmp	r2, #0
   13ff4:	sub	sp, sp, #36	; 0x24
   13ff8:	ldr	r4, [pc, #164]	; 140a4 <__assert_fail@plt+0x3174>
   13ffc:	mov	r8, r1
   14000:	movne	r4, r2
   14004:	mov	r7, r0
   14008:	bl	10e4c <__errno_location@plt>
   1400c:	ldr	r3, [r4, #44]	; 0x2c
   14010:	ldr	r5, [r4, #4]
   14014:	add	r9, r4, #8
   14018:	orr	r5, r5, #1
   1401c:	mov	r1, #0
   14020:	mov	r2, r7
   14024:	ldr	fp, [r0]
   14028:	str	r3, [sp, #16]
   1402c:	ldr	r3, [r4, #40]	; 0x28
   14030:	stmib	sp, {r5, r9}
   14034:	str	r3, [sp, #12]
   14038:	ldr	r3, [r4]
   1403c:	mov	r6, r0
   14040:	str	r3, [sp]
   14044:	mov	r0, r1
   14048:	mov	r3, r8
   1404c:	bl	128f0 <__assert_fail@plt+0x19c0>
   14050:	add	r1, r0, #1
   14054:	mov	r0, r1
   14058:	str	r1, [sp, #28]
   1405c:	bl	171cc <__assert_fail@plt+0x629c>
   14060:	ldr	r3, [r4, #44]	; 0x2c
   14064:	ldr	r1, [sp, #28]
   14068:	str	r3, [sp, #16]
   1406c:	ldr	r3, [r4, #40]	; 0x28
   14070:	str	r5, [sp, #4]
   14074:	str	r3, [sp, #12]
   14078:	str	r9, [sp, #8]
   1407c:	ldr	ip, [r4]
   14080:	mov	r3, r8
   14084:	mov	r2, r7
   14088:	str	ip, [sp]
   1408c:	mov	sl, r0
   14090:	bl	128f0 <__assert_fail@plt+0x19c0>
   14094:	mov	r0, sl
   14098:	str	fp, [r6]
   1409c:	add	sp, sp, #36	; 0x24
   140a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140a4:	andeq	sl, r2, ip, ror #2
   140a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ac:	cmp	r3, #0
   140b0:	sub	sp, sp, #44	; 0x2c
   140b4:	ldr	r4, [pc, #192]	; 1417c <__assert_fail@plt+0x324c>
   140b8:	mov	r6, r2
   140bc:	movne	r4, r3
   140c0:	mov	r9, r1
   140c4:	mov	r8, r0
   140c8:	bl	10e4c <__errno_location@plt>
   140cc:	ldr	r3, [r4, #44]	; 0x2c
   140d0:	ldr	r5, [r4, #4]
   140d4:	add	sl, r4, #8
   140d8:	cmp	r6, #0
   140dc:	orreq	r5, r5, #1
   140e0:	mov	r1, #0
   140e4:	ldr	r2, [r0]
   140e8:	str	r3, [sp, #16]
   140ec:	ldr	r3, [r4, #40]	; 0x28
   140f0:	stmib	sp, {r5, sl}
   140f4:	str	r3, [sp, #12]
   140f8:	ldr	r3, [r4]
   140fc:	mov	r7, r0
   14100:	str	r2, [sp, #28]
   14104:	str	r3, [sp]
   14108:	mov	r2, r8
   1410c:	mov	r3, r9
   14110:	mov	r0, r1
   14114:	bl	128f0 <__assert_fail@plt+0x19c0>
   14118:	add	r1, r0, #1
   1411c:	mov	fp, r0
   14120:	mov	r0, r1
   14124:	str	r1, [sp, #36]	; 0x24
   14128:	bl	171cc <__assert_fail@plt+0x629c>
   1412c:	ldr	r3, [r4, #44]	; 0x2c
   14130:	mov	r2, r8
   14134:	str	r3, [sp, #16]
   14138:	ldr	r3, [r4, #40]	; 0x28
   1413c:	str	r5, [sp, #4]
   14140:	str	r3, [sp, #12]
   14144:	str	sl, [sp, #8]
   14148:	ldr	ip, [r4]
   1414c:	ldr	r1, [sp, #36]	; 0x24
   14150:	mov	r3, r9
   14154:	str	ip, [sp]
   14158:	str	r0, [sp, #32]
   1415c:	bl	128f0 <__assert_fail@plt+0x19c0>
   14160:	ldr	r2, [sp, #28]
   14164:	cmp	r6, #0
   14168:	str	r2, [r7]
   1416c:	ldr	r0, [sp, #32]
   14170:	strne	fp, [r6]
   14174:	add	sp, sp, #44	; 0x2c
   14178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1417c:	andeq	sl, r2, ip, ror #2
   14180:	push	{r4, r5, r6, r7, r8, lr}
   14184:	ldr	r6, [pc, #116]	; 14200 <__assert_fail@plt+0x32d0>
   14188:	ldr	r3, [r6, #4]
   1418c:	ldr	r7, [r6]
   14190:	cmp	r3, #1
   14194:	movgt	r5, r7
   14198:	movgt	r4, #1
   1419c:	ble	141bc <__assert_fail@plt+0x328c>
   141a0:	ldr	r0, [r5, #12]
   141a4:	bl	12624 <__assert_fail@plt+0x16f4>
   141a8:	ldr	r3, [r6, #4]
   141ac:	add	r4, r4, #1
   141b0:	cmp	r3, r4
   141b4:	add	r5, r5, #8
   141b8:	bgt	141a0 <__assert_fail@plt+0x3270>
   141bc:	ldr	r0, [r7, #4]
   141c0:	ldr	r4, [pc, #60]	; 14204 <__assert_fail@plt+0x32d4>
   141c4:	cmp	r0, r4
   141c8:	beq	141dc <__assert_fail@plt+0x32ac>
   141cc:	bl	12624 <__assert_fail@plt+0x16f4>
   141d0:	mov	r3, #256	; 0x100
   141d4:	str	r4, [r6, #12]
   141d8:	str	r3, [r6, #8]
   141dc:	ldr	r4, [pc, #36]	; 14208 <__assert_fail@plt+0x32d8>
   141e0:	cmp	r7, r4
   141e4:	beq	141f4 <__assert_fail@plt+0x32c4>
   141e8:	mov	r0, r7
   141ec:	bl	12624 <__assert_fail@plt+0x16f4>
   141f0:	str	r4, [r6]
   141f4:	mov	r3, #1
   141f8:	str	r3, [r6, #4]
   141fc:	pop	{r4, r5, r6, r7, r8, pc}
   14200:	strdeq	sl, [r2], -r4
   14204:	muleq	r2, ip, r1
   14208:	strdeq	sl, [r2], -ip
   1420c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14210:	sub	sp, sp, #44	; 0x2c
   14214:	mov	r5, r0
   14218:	mov	sl, r1
   1421c:	bl	10e4c <__errno_location@plt>
   14220:	ldr	r4, [pc, #400]	; 143b8 <__assert_fail@plt+0x3488>
   14224:	cmn	r5, #-2147483647	; 0x80000001
   14228:	ldr	r6, [r4]
   1422c:	mov	r8, r0
   14230:	movne	r0, #0
   14234:	moveq	r0, #1
   14238:	ldr	r3, [r8]
   1423c:	orrs	r0, r0, r5, lsr #31
   14240:	str	r3, [sp, #24]
   14244:	bne	143b4 <__assert_fail@plt+0x3484>
   14248:	ldr	r2, [r4, #4]
   1424c:	cmp	r5, r2
   14250:	blt	142b0 <__assert_fail@plt+0x3380>
   14254:	add	r7, r4, #8
   14258:	cmp	r6, r7
   1425c:	str	r2, [sp, #36]	; 0x24
   14260:	beq	14384 <__assert_fail@plt+0x3454>
   14264:	mov	r3, #8
   14268:	sub	r2, r5, r2
   1426c:	mov	r0, r6
   14270:	str	r3, [sp]
   14274:	add	r2, r2, #1
   14278:	mvn	r3, #-2147483648	; 0x80000000
   1427c:	add	r1, sp, #36	; 0x24
   14280:	bl	173e8 <__assert_fail@plt+0x64b8>
   14284:	mov	r6, r0
   14288:	str	r0, [r4]
   1428c:	ldr	r0, [r4, #4]
   14290:	ldr	r2, [sp, #36]	; 0x24
   14294:	mov	r1, #0
   14298:	sub	r2, r2, r0
   1429c:	add	r0, r6, r0, lsl #3
   142a0:	lsl	r2, r2, #3
   142a4:	bl	10e64 <memset@plt>
   142a8:	ldr	r3, [sp, #36]	; 0x24
   142ac:	str	r3, [r4, #4]
   142b0:	ldr	r4, [pc, #260]	; 143bc <__assert_fail@plt+0x348c>
   142b4:	add	fp, r6, r5, lsl #3
   142b8:	ldr	r9, [r6, r5, lsl #3]
   142bc:	ldr	r0, [r4, #4]
   142c0:	ldr	r3, [r4]
   142c4:	ldr	r7, [fp, #4]
   142c8:	ldr	r1, [r4, #44]	; 0x2c
   142cc:	ldr	r2, [r4, #40]	; 0x28
   142d0:	orr	r0, r0, #1
   142d4:	str	r3, [sp]
   142d8:	add	r3, r4, #8
   142dc:	str	r0, [sp, #28]
   142e0:	str	r0, [sp, #4]
   142e4:	str	r1, [sp, #16]
   142e8:	str	r2, [sp, #12]
   142ec:	str	r3, [sp, #8]
   142f0:	mov	r0, r7
   142f4:	mov	r1, r9
   142f8:	mvn	r3, #0
   142fc:	mov	r2, sl
   14300:	bl	128f0 <__assert_fail@plt+0x19c0>
   14304:	cmp	r9, r0
   14308:	bhi	14370 <__assert_fail@plt+0x3440>
   1430c:	add	r3, r4, #48	; 0x30
   14310:	add	r9, r0, #1
   14314:	cmp	r7, r3
   14318:	str	r9, [r6, r5, lsl #3]
   1431c:	beq	14328 <__assert_fail@plt+0x33f8>
   14320:	mov	r0, r7
   14324:	bl	12624 <__assert_fail@plt+0x16f4>
   14328:	mov	r0, r9
   1432c:	bl	171cc <__assert_fail@plt+0x629c>
   14330:	ldr	ip, [r4, #44]	; 0x2c
   14334:	ldr	r3, [r4]
   14338:	ldr	lr, [r4, #40]	; 0x28
   1433c:	ldr	r4, [pc, #124]	; 143c0 <__assert_fail@plt+0x3490>
   14340:	mov	r2, sl
   14344:	mov	r1, r9
   14348:	str	r0, [fp, #4]
   1434c:	str	r4, [sp, #8]
   14350:	ldr	r4, [sp, #28]
   14354:	str	r3, [sp]
   14358:	str	r4, [sp, #4]
   1435c:	str	ip, [sp, #16]
   14360:	str	lr, [sp, #12]
   14364:	mvn	r3, #0
   14368:	mov	r7, r0
   1436c:	bl	128f0 <__assert_fail@plt+0x19c0>
   14370:	ldr	r3, [sp, #24]
   14374:	mov	r0, r7
   14378:	str	r3, [r8]
   1437c:	add	sp, sp, #44	; 0x2c
   14380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14384:	mov	r3, #8
   14388:	sub	r2, r5, r2
   1438c:	str	r3, [sp]
   14390:	add	r1, sp, #36	; 0x24
   14394:	add	r2, r2, #1
   14398:	mvn	r3, #-2147483648	; 0x80000000
   1439c:	bl	173e8 <__assert_fail@plt+0x64b8>
   143a0:	mov	r6, r0
   143a4:	ldm	r7, {r0, r1}
   143a8:	str	r6, [r4]
   143ac:	stm	r6, {r0, r1}
   143b0:	b	1428c <__assert_fail@plt+0x335c>
   143b4:	bl	10f24 <abort@plt>
   143b8:	strdeq	sl, [r2], -r4
   143bc:	andeq	sl, r2, ip, ror #2
   143c0:	andeq	sl, r2, r4, ror r1
   143c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143c8:	sub	sp, sp, #52	; 0x34
   143cc:	mov	r5, r0
   143d0:	mov	sl, r1
   143d4:	mov	fp, r2
   143d8:	bl	10e4c <__errno_location@plt>
   143dc:	ldr	r4, [pc, #408]	; 1457c <__assert_fail@plt+0x364c>
   143e0:	cmn	r5, #-2147483647	; 0x80000001
   143e4:	ldr	r6, [r4]
   143e8:	mov	r8, r0
   143ec:	movne	r0, #0
   143f0:	moveq	r0, #1
   143f4:	ldr	r3, [r8]
   143f8:	orrs	r0, r0, r5, lsr #31
   143fc:	str	r3, [sp, #28]
   14400:	bne	14578 <__assert_fail@plt+0x3648>
   14404:	ldr	r2, [r4, #4]
   14408:	cmp	r5, r2
   1440c:	blt	1446c <__assert_fail@plt+0x353c>
   14410:	add	r7, r4, #8
   14414:	cmp	r6, r7
   14418:	str	r2, [sp, #44]	; 0x2c
   1441c:	beq	14548 <__assert_fail@plt+0x3618>
   14420:	mov	r3, #8
   14424:	sub	r2, r5, r2
   14428:	mov	r0, r6
   1442c:	str	r3, [sp]
   14430:	add	r2, r2, #1
   14434:	mvn	r3, #-2147483648	; 0x80000000
   14438:	add	r1, sp, #44	; 0x2c
   1443c:	bl	173e8 <__assert_fail@plt+0x64b8>
   14440:	mov	r6, r0
   14444:	str	r0, [r4]
   14448:	ldr	r0, [r4, #4]
   1444c:	ldr	r2, [sp, #44]	; 0x2c
   14450:	mov	r1, #0
   14454:	sub	r2, r2, r0
   14458:	add	r0, r6, r0, lsl #3
   1445c:	lsl	r2, r2, #3
   14460:	bl	10e64 <memset@plt>
   14464:	ldr	r3, [sp, #44]	; 0x2c
   14468:	str	r3, [r4, #4]
   1446c:	ldr	r4, [pc, #268]	; 14580 <__assert_fail@plt+0x3650>
   14470:	add	r3, r6, r5, lsl #3
   14474:	str	r3, [sp, #32]
   14478:	ldr	r7, [r3, #4]
   1447c:	ldr	r0, [r4, #4]
   14480:	ldr	r3, [r4]
   14484:	ldr	r9, [r6, r5, lsl #3]
   14488:	ldr	r1, [r4, #44]	; 0x2c
   1448c:	ldr	r2, [r4, #40]	; 0x28
   14490:	orr	r0, r0, #1
   14494:	str	r3, [sp]
   14498:	add	r3, r4, #8
   1449c:	str	r0, [sp, #36]	; 0x24
   144a0:	str	r0, [sp, #4]
   144a4:	str	r1, [sp, #16]
   144a8:	str	r2, [sp, #12]
   144ac:	str	r3, [sp, #8]
   144b0:	mov	r0, r7
   144b4:	mov	r1, r9
   144b8:	mov	r3, fp
   144bc:	mov	r2, sl
   144c0:	bl	128f0 <__assert_fail@plt+0x19c0>
   144c4:	cmp	r9, r0
   144c8:	bhi	14534 <__assert_fail@plt+0x3604>
   144cc:	add	r3, r4, #48	; 0x30
   144d0:	add	r9, r0, #1
   144d4:	cmp	r7, r3
   144d8:	str	r9, [r6, r5, lsl #3]
   144dc:	beq	144e8 <__assert_fail@plt+0x35b8>
   144e0:	mov	r0, r7
   144e4:	bl	12624 <__assert_fail@plt+0x16f4>
   144e8:	mov	r0, r9
   144ec:	bl	171cc <__assert_fail@plt+0x629c>
   144f0:	ldr	ip, [sp, #32]
   144f4:	ldr	lr, [r4, #44]	; 0x2c
   144f8:	ldr	r5, [r4, #40]	; 0x28
   144fc:	mov	r3, fp
   14500:	mov	r2, sl
   14504:	mov	r1, r9
   14508:	str	r0, [ip, #4]
   1450c:	ldr	ip, [r4]
   14510:	ldr	r4, [pc, #108]	; 14584 <__assert_fail@plt+0x3654>
   14514:	str	lr, [sp, #16]
   14518:	str	r4, [sp, #8]
   1451c:	ldr	r4, [sp, #36]	; 0x24
   14520:	str	r5, [sp, #12]
   14524:	str	r4, [sp, #4]
   14528:	str	ip, [sp]
   1452c:	mov	r7, r0
   14530:	bl	128f0 <__assert_fail@plt+0x19c0>
   14534:	ldr	r3, [sp, #28]
   14538:	mov	r0, r7
   1453c:	str	r3, [r8]
   14540:	add	sp, sp, #52	; 0x34
   14544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14548:	mov	r3, #8
   1454c:	sub	r2, r5, r2
   14550:	str	r3, [sp]
   14554:	add	r1, sp, #44	; 0x2c
   14558:	add	r2, r2, #1
   1455c:	mvn	r3, #-2147483648	; 0x80000000
   14560:	bl	173e8 <__assert_fail@plt+0x64b8>
   14564:	mov	r6, r0
   14568:	ldm	r7, {r0, r1}
   1456c:	str	r6, [r4]
   14570:	stm	r6, {r0, r1}
   14574:	b	14448 <__assert_fail@plt+0x3518>
   14578:	bl	10f24 <abort@plt>
   1457c:	strdeq	sl, [r2], -r4
   14580:	andeq	sl, r2, ip, ror #2
   14584:	andeq	sl, r2, r4, ror r1
   14588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1458c:	sub	sp, sp, #44	; 0x2c
   14590:	mov	sl, r0
   14594:	bl	10e4c <__errno_location@plt>
   14598:	ldr	r4, [pc, #352]	; 14700 <__assert_fail@plt+0x37d0>
   1459c:	ldr	r2, [r4, #4]
   145a0:	ldr	r5, [r4]
   145a4:	cmp	r2, #0
   145a8:	ldr	r3, [r0]
   145ac:	mov	r8, r0
   145b0:	str	r3, [sp, #28]
   145b4:	bgt	14610 <__assert_fail@plt+0x36e0>
   145b8:	add	r6, r4, #8
   145bc:	cmp	r5, r6
   145c0:	str	r2, [sp, #36]	; 0x24
   145c4:	beq	146d0 <__assert_fail@plt+0x37a0>
   145c8:	mov	r3, #8
   145cc:	mov	r0, r5
   145d0:	str	r3, [sp]
   145d4:	rsb	r2, r2, #1
   145d8:	mvn	r3, #-2147483648	; 0x80000000
   145dc:	add	r1, sp, #36	; 0x24
   145e0:	bl	173e8 <__assert_fail@plt+0x64b8>
   145e4:	mov	r5, r0
   145e8:	str	r0, [r4]
   145ec:	ldr	r0, [r4, #4]
   145f0:	ldr	r2, [sp, #36]	; 0x24
   145f4:	mov	r1, #0
   145f8:	sub	r2, r2, r0
   145fc:	add	r0, r5, r0, lsl #3
   14600:	lsl	r2, r2, #3
   14604:	bl	10e64 <memset@plt>
   14608:	ldr	r3, [sp, #36]	; 0x24
   1460c:	str	r3, [r4, #4]
   14610:	ldr	r4, [pc, #236]	; 14704 <__assert_fail@plt+0x37d4>
   14614:	ldr	r9, [r5]
   14618:	ldr	r6, [r5, #4]
   1461c:	ldr	r7, [r4, #4]
   14620:	ldr	r1, [r4, #44]	; 0x2c
   14624:	ldr	r2, [r4, #40]	; 0x28
   14628:	ldr	r3, [r4]
   1462c:	orr	r7, r7, #1
   14630:	add	fp, r4, #8
   14634:	str	r1, [sp, #16]
   14638:	str	r2, [sp, #12]
   1463c:	str	r3, [sp]
   14640:	str	r7, [sp, #4]
   14644:	str	fp, [sp, #8]
   14648:	mov	r1, r9
   1464c:	mov	r0, r6
   14650:	mvn	r3, #0
   14654:	mov	r2, sl
   14658:	bl	128f0 <__assert_fail@plt+0x19c0>
   1465c:	cmp	r9, r0
   14660:	bhi	146bc <__assert_fail@plt+0x378c>
   14664:	add	r3, r4, #48	; 0x30
   14668:	add	r9, r0, #1
   1466c:	cmp	r6, r3
   14670:	str	r9, [r5]
   14674:	beq	14680 <__assert_fail@plt+0x3750>
   14678:	mov	r0, r6
   1467c:	bl	12624 <__assert_fail@plt+0x16f4>
   14680:	mov	r0, r9
   14684:	bl	171cc <__assert_fail@plt+0x629c>
   14688:	ldr	ip, [r4, #44]	; 0x2c
   1468c:	ldr	r3, [r4]
   14690:	ldr	lr, [r4, #40]	; 0x28
   14694:	mov	r2, sl
   14698:	mov	r1, r9
   1469c:	str	r0, [r5, #4]
   146a0:	str	r3, [sp]
   146a4:	stmib	sp, {r7, fp}
   146a8:	str	ip, [sp, #16]
   146ac:	str	lr, [sp, #12]
   146b0:	mvn	r3, #0
   146b4:	mov	r6, r0
   146b8:	bl	128f0 <__assert_fail@plt+0x19c0>
   146bc:	ldr	r3, [sp, #28]
   146c0:	mov	r0, r6
   146c4:	str	r3, [r8]
   146c8:	add	sp, sp, #44	; 0x2c
   146cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d0:	mov	r3, #8
   146d4:	str	r3, [sp]
   146d8:	add	r1, sp, #36	; 0x24
   146dc:	rsb	r2, r2, #1
   146e0:	mvn	r3, #-2147483648	; 0x80000000
   146e4:	mov	r0, #0
   146e8:	bl	173e8 <__assert_fail@plt+0x64b8>
   146ec:	mov	r5, r0
   146f0:	ldm	r6, {r0, r1}
   146f4:	str	r5, [r4]
   146f8:	stm	r5, {r0, r1}
   146fc:	b	145ec <__assert_fail@plt+0x36bc>
   14700:	strdeq	sl, [r2], -r4
   14704:	andeq	sl, r2, ip, ror #2
   14708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1470c:	sub	sp, sp, #44	; 0x2c
   14710:	mov	r9, r0
   14714:	mov	sl, r1
   14718:	bl	10e4c <__errno_location@plt>
   1471c:	ldr	r4, [pc, #364]	; 14890 <__assert_fail@plt+0x3960>
   14720:	ldr	r2, [r4, #4]
   14724:	ldr	r5, [r4]
   14728:	cmp	r2, #0
   1472c:	ldr	r3, [r0]
   14730:	mov	r7, r0
   14734:	str	r3, [sp, #24]
   14738:	bgt	14794 <__assert_fail@plt+0x3864>
   1473c:	add	r6, r4, #8
   14740:	cmp	r5, r6
   14744:	str	r2, [sp, #36]	; 0x24
   14748:	beq	14860 <__assert_fail@plt+0x3930>
   1474c:	mov	r3, #8
   14750:	mov	r0, r5
   14754:	str	r3, [sp]
   14758:	rsb	r2, r2, #1
   1475c:	mvn	r3, #-2147483648	; 0x80000000
   14760:	add	r1, sp, #36	; 0x24
   14764:	bl	173e8 <__assert_fail@plt+0x64b8>
   14768:	mov	r5, r0
   1476c:	str	r0, [r4]
   14770:	ldr	r0, [r4, #4]
   14774:	ldr	r2, [sp, #36]	; 0x24
   14778:	mov	r1, #0
   1477c:	sub	r2, r2, r0
   14780:	add	r0, r5, r0, lsl #3
   14784:	lsl	r2, r2, #3
   14788:	bl	10e64 <memset@plt>
   1478c:	ldr	r3, [sp, #36]	; 0x24
   14790:	str	r3, [r4, #4]
   14794:	ldr	r4, [pc, #248]	; 14894 <__assert_fail@plt+0x3964>
   14798:	ldr	r8, [r5]
   1479c:	ldr	r6, [r5, #4]
   147a0:	ldr	r0, [r4, #4]
   147a4:	ldr	r1, [r4, #44]	; 0x2c
   147a8:	ldr	r2, [r4, #40]	; 0x28
   147ac:	ldr	r3, [r4]
   147b0:	orr	r0, r0, #1
   147b4:	add	fp, r4, #8
   147b8:	str	r0, [sp, #28]
   147bc:	str	r0, [sp, #4]
   147c0:	str	r1, [sp, #16]
   147c4:	str	r2, [sp, #12]
   147c8:	str	r3, [sp]
   147cc:	str	fp, [sp, #8]
   147d0:	mov	r1, r8
   147d4:	mov	r0, r6
   147d8:	mov	r3, sl
   147dc:	mov	r2, r9
   147e0:	bl	128f0 <__assert_fail@plt+0x19c0>
   147e4:	cmp	r8, r0
   147e8:	bhi	1484c <__assert_fail@plt+0x391c>
   147ec:	add	r3, r4, #48	; 0x30
   147f0:	add	r8, r0, #1
   147f4:	cmp	r6, r3
   147f8:	str	r8, [r5]
   147fc:	beq	14808 <__assert_fail@plt+0x38d8>
   14800:	mov	r0, r6
   14804:	bl	12624 <__assert_fail@plt+0x16f4>
   14808:	mov	r0, r8
   1480c:	bl	171cc <__assert_fail@plt+0x629c>
   14810:	ldr	lr, [r4, #44]	; 0x2c
   14814:	ldr	ip, [r4]
   14818:	mov	r3, sl
   1481c:	mov	r2, r9
   14820:	mov	r1, r8
   14824:	str	r0, [r5, #4]
   14828:	ldr	r5, [r4, #40]	; 0x28
   1482c:	ldr	r4, [sp, #28]
   14830:	str	fp, [sp, #8]
   14834:	str	r4, [sp, #4]
   14838:	str	lr, [sp, #16]
   1483c:	str	r5, [sp, #12]
   14840:	str	ip, [sp]
   14844:	mov	r6, r0
   14848:	bl	128f0 <__assert_fail@plt+0x19c0>
   1484c:	ldr	r3, [sp, #24]
   14850:	mov	r0, r6
   14854:	str	r3, [r7]
   14858:	add	sp, sp, #44	; 0x2c
   1485c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14860:	mov	r3, #8
   14864:	str	r3, [sp]
   14868:	add	r1, sp, #36	; 0x24
   1486c:	rsb	r2, r2, #1
   14870:	mvn	r3, #-2147483648	; 0x80000000
   14874:	mov	r0, #0
   14878:	bl	173e8 <__assert_fail@plt+0x64b8>
   1487c:	mov	r5, r0
   14880:	ldm	r6, {r0, r1}
   14884:	str	r5, [r4]
   14888:	stm	r5, {r0, r1}
   1488c:	b	14770 <__assert_fail@plt+0x3840>
   14890:	strdeq	sl, [r2], -r4
   14894:	andeq	sl, r2, ip, ror #2
   14898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1489c:	sub	sp, sp, #132	; 0x84
   148a0:	mov	r5, r1
   148a4:	mov	r4, r0
   148a8:	mov	r9, r2
   148ac:	add	r0, sp, #80	; 0x50
   148b0:	mov	r2, #48	; 0x30
   148b4:	mov	r1, #0
   148b8:	bl	10e64 <memset@plt>
   148bc:	cmp	r5, #10
   148c0:	beq	14a78 <__assert_fail@plt+0x3b48>
   148c4:	add	lr, sp, #80	; 0x50
   148c8:	str	r5, [sp, #80]	; 0x50
   148cc:	ldm	lr!, {r0, r1, r2, r3}
   148d0:	add	ip, sp, #32
   148d4:	ldr	r6, [pc, #416]	; 14a7c <__assert_fail@plt+0x3b4c>
   148d8:	stmia	ip!, {r0, r1, r2, r3}
   148dc:	ldm	lr!, {r0, r1, r2, r3}
   148e0:	stmia	ip!, {r0, r1, r2, r3}
   148e4:	ldm	lr, {r0, r1, r2, r3}
   148e8:	stm	ip, {r0, r1, r2, r3}
   148ec:	bl	10e4c <__errno_location@plt>
   148f0:	cmn	r4, #-2147483647	; 0x80000001
   148f4:	ldr	r5, [r6]
   148f8:	mov	r7, r0
   148fc:	movne	r0, #0
   14900:	moveq	r0, #1
   14904:	ldr	r3, [r7]
   14908:	orrs	r0, r0, r4, lsr #31
   1490c:	str	r3, [sp, #24]
   14910:	bne	14a78 <__assert_fail@plt+0x3b48>
   14914:	ldr	r2, [r6, #4]
   14918:	cmp	r4, r2
   1491c:	blt	1497c <__assert_fail@plt+0x3a4c>
   14920:	add	r8, r6, #8
   14924:	cmp	r5, r8
   14928:	str	r2, [sp, #80]	; 0x50
   1492c:	beq	14a48 <__assert_fail@plt+0x3b18>
   14930:	mov	r3, #8
   14934:	sub	r2, r4, r2
   14938:	mov	r0, r5
   1493c:	str	r3, [sp]
   14940:	add	r2, r2, #1
   14944:	add	r1, sp, #80	; 0x50
   14948:	mvn	r3, #-2147483648	; 0x80000000
   1494c:	bl	173e8 <__assert_fail@plt+0x64b8>
   14950:	mov	r5, r0
   14954:	str	r0, [r6]
   14958:	ldr	r0, [r6, #4]
   1495c:	ldr	r2, [sp, #80]	; 0x50
   14960:	mov	r1, #0
   14964:	sub	r2, r2, r0
   14968:	add	r0, r5, r0, lsl #3
   1496c:	lsl	r2, r2, #3
   14970:	bl	10e64 <memset@plt>
   14974:	ldr	r3, [sp, #80]	; 0x50
   14978:	str	r3, [r6, #4]
   1497c:	add	fp, r5, r4, lsl #3
   14980:	ldr	r1, [sp, #36]	; 0x24
   14984:	ldr	r8, [r5, r4, lsl #3]
   14988:	ldr	r6, [fp, #4]
   1498c:	ldr	r2, [sp, #72]	; 0x48
   14990:	ldr	r3, [sp, #32]
   14994:	ldr	ip, [sp, #76]	; 0x4c
   14998:	orr	r1, r1, #1
   1499c:	add	sl, sp, #40	; 0x28
   149a0:	str	r1, [sp, #28]
   149a4:	str	r1, [sp, #4]
   149a8:	str	r2, [sp, #12]
   149ac:	str	r3, [sp]
   149b0:	mov	r0, r6
   149b4:	mov	r1, r8
   149b8:	str	ip, [sp, #16]
   149bc:	str	sl, [sp, #8]
   149c0:	mvn	r3, #0
   149c4:	mov	r2, r9
   149c8:	bl	128f0 <__assert_fail@plt+0x19c0>
   149cc:	cmp	r8, r0
   149d0:	bhi	14a34 <__assert_fail@plt+0x3b04>
   149d4:	ldr	r3, [pc, #164]	; 14a80 <__assert_fail@plt+0x3b50>
   149d8:	add	r8, r0, #1
   149dc:	cmp	r6, r3
   149e0:	str	r8, [r5, r4, lsl #3]
   149e4:	beq	149f0 <__assert_fail@plt+0x3ac0>
   149e8:	mov	r0, r6
   149ec:	bl	12624 <__assert_fail@plt+0x16f4>
   149f0:	mov	r0, r8
   149f4:	bl	171cc <__assert_fail@plt+0x629c>
   149f8:	ldr	lr, [sp, #76]	; 0x4c
   149fc:	ldr	r3, [sp, #32]
   14a00:	ldr	ip, [sp, #72]	; 0x48
   14a04:	ldr	r4, [sp, #28]
   14a08:	mov	r2, r9
   14a0c:	mov	r1, r8
   14a10:	str	r0, [fp, #4]
   14a14:	str	r3, [sp]
   14a18:	str	sl, [sp, #8]
   14a1c:	str	r4, [sp, #4]
   14a20:	str	lr, [sp, #16]
   14a24:	str	ip, [sp, #12]
   14a28:	mvn	r3, #0
   14a2c:	mov	r6, r0
   14a30:	bl	128f0 <__assert_fail@plt+0x19c0>
   14a34:	ldr	r3, [sp, #24]
   14a38:	mov	r0, r6
   14a3c:	str	r3, [r7]
   14a40:	add	sp, sp, #132	; 0x84
   14a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a48:	mov	r3, #8
   14a4c:	sub	r2, r4, r2
   14a50:	add	r1, sp, #80	; 0x50
   14a54:	str	r3, [sp]
   14a58:	add	r2, r2, #1
   14a5c:	mvn	r3, #-2147483648	; 0x80000000
   14a60:	bl	173e8 <__assert_fail@plt+0x64b8>
   14a64:	mov	r5, r0
   14a68:	ldm	r8, {r0, r1}
   14a6c:	str	r5, [r6]
   14a70:	stm	r5, {r0, r1}
   14a74:	b	14958 <__assert_fail@plt+0x3a28>
   14a78:	bl	10f24 <abort@plt>
   14a7c:	strdeq	sl, [r2], -r4
   14a80:	muleq	r2, ip, r1
   14a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a88:	sub	sp, sp, #132	; 0x84
   14a8c:	mov	r5, r1
   14a90:	mov	r4, r0
   14a94:	mov	r9, r2
   14a98:	add	r0, sp, #80	; 0x50
   14a9c:	mov	r2, #48	; 0x30
   14aa0:	mov	r1, #0
   14aa4:	mov	sl, r3
   14aa8:	bl	10e64 <memset@plt>
   14aac:	cmp	r5, #10
   14ab0:	beq	14c6c <__assert_fail@plt+0x3d3c>
   14ab4:	add	lr, sp, #80	; 0x50
   14ab8:	str	r5, [sp, #80]	; 0x50
   14abc:	ldm	lr!, {r0, r1, r2, r3}
   14ac0:	add	ip, sp, #32
   14ac4:	ldr	r6, [pc, #420]	; 14c70 <__assert_fail@plt+0x3d40>
   14ac8:	stmia	ip!, {r0, r1, r2, r3}
   14acc:	ldm	lr!, {r0, r1, r2, r3}
   14ad0:	stmia	ip!, {r0, r1, r2, r3}
   14ad4:	ldm	lr, {r0, r1, r2, r3}
   14ad8:	stm	ip, {r0, r1, r2, r3}
   14adc:	bl	10e4c <__errno_location@plt>
   14ae0:	cmn	r4, #-2147483647	; 0x80000001
   14ae4:	ldr	r5, [r6]
   14ae8:	mov	r7, r0
   14aec:	movne	r0, #0
   14af0:	moveq	r0, #1
   14af4:	ldr	r3, [r7]
   14af8:	orrs	r0, r0, r4, lsr #31
   14afc:	str	r3, [sp, #24]
   14b00:	bne	14c6c <__assert_fail@plt+0x3d3c>
   14b04:	ldr	r2, [r6, #4]
   14b08:	cmp	r4, r2
   14b0c:	blt	14b6c <__assert_fail@plt+0x3c3c>
   14b10:	add	r8, r6, #8
   14b14:	cmp	r5, r8
   14b18:	str	r2, [sp, #80]	; 0x50
   14b1c:	beq	14c3c <__assert_fail@plt+0x3d0c>
   14b20:	mov	r3, #8
   14b24:	sub	r2, r4, r2
   14b28:	mov	r0, r5
   14b2c:	str	r3, [sp]
   14b30:	add	r2, r2, #1
   14b34:	add	r1, sp, #80	; 0x50
   14b38:	mvn	r3, #-2147483648	; 0x80000000
   14b3c:	bl	173e8 <__assert_fail@plt+0x64b8>
   14b40:	mov	r5, r0
   14b44:	str	r0, [r6]
   14b48:	ldr	r0, [r6, #4]
   14b4c:	ldr	r2, [sp, #80]	; 0x50
   14b50:	mov	r1, #0
   14b54:	sub	r2, r2, r0
   14b58:	add	r0, r5, r0, lsl #3
   14b5c:	lsl	r2, r2, #3
   14b60:	bl	10e64 <memset@plt>
   14b64:	ldr	r3, [sp, #80]	; 0x50
   14b68:	str	r3, [r6, #4]
   14b6c:	add	fp, r5, r4, lsl #3
   14b70:	ldr	r3, [sp, #32]
   14b74:	ldr	r1, [sp, #36]	; 0x24
   14b78:	ldr	r8, [r5, r4, lsl #3]
   14b7c:	ldr	r6, [fp, #4]
   14b80:	ldr	r2, [sp, #72]	; 0x48
   14b84:	ldr	ip, [sp, #76]	; 0x4c
   14b88:	orr	r1, r1, #1
   14b8c:	str	r3, [sp]
   14b90:	add	r3, sp, #40	; 0x28
   14b94:	str	r1, [sp, #28]
   14b98:	str	r1, [sp, #4]
   14b9c:	str	r2, [sp, #12]
   14ba0:	str	r3, [sp, #8]
   14ba4:	mov	r0, r6
   14ba8:	mov	r1, r8
   14bac:	str	ip, [sp, #16]
   14bb0:	mov	r3, sl
   14bb4:	mov	r2, r9
   14bb8:	bl	128f0 <__assert_fail@plt+0x19c0>
   14bbc:	cmp	r8, r0
   14bc0:	bhi	14c28 <__assert_fail@plt+0x3cf8>
   14bc4:	ldr	r3, [pc, #168]	; 14c74 <__assert_fail@plt+0x3d44>
   14bc8:	add	r8, r0, #1
   14bcc:	cmp	r6, r3
   14bd0:	str	r8, [r5, r4, lsl #3]
   14bd4:	beq	14be0 <__assert_fail@plt+0x3cb0>
   14bd8:	mov	r0, r6
   14bdc:	bl	12624 <__assert_fail@plt+0x16f4>
   14be0:	mov	r0, r8
   14be4:	bl	171cc <__assert_fail@plt+0x629c>
   14be8:	add	lr, sp, #40	; 0x28
   14bec:	ldr	ip, [sp, #76]	; 0x4c
   14bf0:	ldr	r4, [sp, #72]	; 0x48
   14bf4:	ldr	r5, [sp, #28]
   14bf8:	mov	r3, sl
   14bfc:	mov	r2, r9
   14c00:	mov	r1, r8
   14c04:	str	r0, [fp, #4]
   14c08:	str	lr, [sp, #8]
   14c0c:	ldr	lr, [sp, #32]
   14c10:	str	r5, [sp, #4]
   14c14:	str	ip, [sp, #16]
   14c18:	str	r4, [sp, #12]
   14c1c:	str	lr, [sp]
   14c20:	mov	r6, r0
   14c24:	bl	128f0 <__assert_fail@plt+0x19c0>
   14c28:	ldr	r3, [sp, #24]
   14c2c:	mov	r0, r6
   14c30:	str	r3, [r7]
   14c34:	add	sp, sp, #132	; 0x84
   14c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c3c:	mov	r3, #8
   14c40:	sub	r2, r4, r2
   14c44:	add	r1, sp, #80	; 0x50
   14c48:	str	r3, [sp]
   14c4c:	add	r2, r2, #1
   14c50:	mvn	r3, #-2147483648	; 0x80000000
   14c54:	bl	173e8 <__assert_fail@plt+0x64b8>
   14c58:	mov	r5, r0
   14c5c:	ldm	r8, {r0, r1}
   14c60:	str	r5, [r6]
   14c64:	stm	r5, {r0, r1}
   14c68:	b	14b48 <__assert_fail@plt+0x3c18>
   14c6c:	bl	10f24 <abort@plt>
   14c70:	strdeq	sl, [r2], -r4
   14c74:	muleq	r2, ip, r1
   14c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c7c:	sub	sp, sp, #124	; 0x7c
   14c80:	mov	r4, r0
   14c84:	mov	r9, r1
   14c88:	add	r0, sp, #72	; 0x48
   14c8c:	mov	r2, #48	; 0x30
   14c90:	mov	r1, #0
   14c94:	bl	10e64 <memset@plt>
   14c98:	cmp	r4, #10
   14c9c:	beq	14e28 <__assert_fail@plt+0x3ef8>
   14ca0:	add	lr, sp, #72	; 0x48
   14ca4:	str	r4, [sp, #72]	; 0x48
   14ca8:	ldm	lr!, {r0, r1, r2, r3}
   14cac:	add	ip, sp, #24
   14cb0:	ldr	r5, [pc, #372]	; 14e2c <__assert_fail@plt+0x3efc>
   14cb4:	stmia	ip!, {r0, r1, r2, r3}
   14cb8:	ldm	lr!, {r0, r1, r2, r3}
   14cbc:	stmia	ip!, {r0, r1, r2, r3}
   14cc0:	ldm	lr, {r0, r1, r2, r3}
   14cc4:	stm	ip, {r0, r1, r2, r3}
   14cc8:	bl	10e4c <__errno_location@plt>
   14ccc:	ldr	r2, [r5, #4]
   14cd0:	ldr	r4, [r5]
   14cd4:	cmp	r2, #0
   14cd8:	mov	r7, r0
   14cdc:	ldr	fp, [r0]
   14ce0:	bgt	14d3c <__assert_fail@plt+0x3e0c>
   14ce4:	add	r6, r5, #8
   14ce8:	cmp	r4, r6
   14cec:	str	r2, [sp, #72]	; 0x48
   14cf0:	beq	14df8 <__assert_fail@plt+0x3ec8>
   14cf4:	mov	r3, #8
   14cf8:	mov	r0, r4
   14cfc:	str	r3, [sp]
   14d00:	rsb	r2, r2, #1
   14d04:	add	r1, sp, #72	; 0x48
   14d08:	mvn	r3, #-2147483648	; 0x80000000
   14d0c:	bl	173e8 <__assert_fail@plt+0x64b8>
   14d10:	mov	r4, r0
   14d14:	str	r0, [r5]
   14d18:	ldr	r0, [r5, #4]
   14d1c:	ldr	r2, [sp, #72]	; 0x48
   14d20:	mov	r1, #0
   14d24:	sub	r2, r2, r0
   14d28:	add	r0, r4, r0, lsl #3
   14d2c:	lsl	r2, r2, #3
   14d30:	bl	10e64 <memset@plt>
   14d34:	ldr	r3, [sp, #72]	; 0x48
   14d38:	str	r3, [r5, #4]
   14d3c:	ldr	r6, [sp, #28]
   14d40:	ldr	r8, [r4]
   14d44:	ldr	r5, [r4, #4]
   14d48:	ldr	r2, [sp, #64]	; 0x40
   14d4c:	ldr	r3, [sp, #24]
   14d50:	ldr	ip, [sp, #68]	; 0x44
   14d54:	orr	r6, r6, #1
   14d58:	add	sl, sp, #32
   14d5c:	str	r2, [sp, #12]
   14d60:	str	r3, [sp]
   14d64:	str	r6, [sp, #4]
   14d68:	mov	r1, r8
   14d6c:	mov	r0, r5
   14d70:	str	ip, [sp, #16]
   14d74:	str	sl, [sp, #8]
   14d78:	mvn	r3, #0
   14d7c:	mov	r2, r9
   14d80:	bl	128f0 <__assert_fail@plt+0x19c0>
   14d84:	cmp	r8, r0
   14d88:	bhi	14de8 <__assert_fail@plt+0x3eb8>
   14d8c:	ldr	r3, [pc, #156]	; 14e30 <__assert_fail@plt+0x3f00>
   14d90:	add	r8, r0, #1
   14d94:	cmp	r5, r3
   14d98:	str	r8, [r4]
   14d9c:	beq	14da8 <__assert_fail@plt+0x3e78>
   14da0:	mov	r0, r5
   14da4:	bl	12624 <__assert_fail@plt+0x16f4>
   14da8:	mov	r0, r8
   14dac:	bl	171cc <__assert_fail@plt+0x629c>
   14db0:	ldr	lr, [sp, #68]	; 0x44
   14db4:	ldr	r3, [sp, #24]
   14db8:	ldr	ip, [sp, #64]	; 0x40
   14dbc:	mov	r2, r9
   14dc0:	mov	r1, r8
   14dc4:	str	r0, [r4, #4]
   14dc8:	str	r3, [sp]
   14dcc:	str	sl, [sp, #8]
   14dd0:	str	r6, [sp, #4]
   14dd4:	str	lr, [sp, #16]
   14dd8:	str	ip, [sp, #12]
   14ddc:	mvn	r3, #0
   14de0:	mov	r5, r0
   14de4:	bl	128f0 <__assert_fail@plt+0x19c0>
   14de8:	mov	r0, r5
   14dec:	str	fp, [r7]
   14df0:	add	sp, sp, #124	; 0x7c
   14df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14df8:	mov	r3, #8
   14dfc:	add	r1, sp, #72	; 0x48
   14e00:	str	r3, [sp]
   14e04:	rsb	r2, r2, #1
   14e08:	mvn	r3, #-2147483648	; 0x80000000
   14e0c:	mov	r0, #0
   14e10:	bl	173e8 <__assert_fail@plt+0x64b8>
   14e14:	mov	r4, r0
   14e18:	ldm	r6, {r0, r1}
   14e1c:	str	r4, [r5]
   14e20:	stm	r4, {r0, r1}
   14e24:	b	14d18 <__assert_fail@plt+0x3de8>
   14e28:	bl	10f24 <abort@plt>
   14e2c:	strdeq	sl, [r2], -r4
   14e30:	muleq	r2, ip, r1
   14e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e38:	sub	sp, sp, #132	; 0x84
   14e3c:	mov	r4, r0
   14e40:	mov	r9, r1
   14e44:	mov	sl, r2
   14e48:	add	r0, sp, #80	; 0x50
   14e4c:	mov	r2, #48	; 0x30
   14e50:	mov	r1, #0
   14e54:	bl	10e64 <memset@plt>
   14e58:	cmp	r4, #10
   14e5c:	beq	14ff0 <__assert_fail@plt+0x40c0>
   14e60:	add	lr, sp, #80	; 0x50
   14e64:	str	r4, [sp, #80]	; 0x50
   14e68:	ldm	lr!, {r0, r1, r2, r3}
   14e6c:	add	ip, sp, #32
   14e70:	ldr	r5, [pc, #380]	; 14ff4 <__assert_fail@plt+0x40c4>
   14e74:	stmia	ip!, {r0, r1, r2, r3}
   14e78:	ldm	lr!, {r0, r1, r2, r3}
   14e7c:	stmia	ip!, {r0, r1, r2, r3}
   14e80:	ldm	lr, {r0, r1, r2, r3}
   14e84:	stm	ip, {r0, r1, r2, r3}
   14e88:	bl	10e4c <__errno_location@plt>
   14e8c:	ldr	r2, [r5, #4]
   14e90:	ldr	r4, [r5]
   14e94:	cmp	r2, #0
   14e98:	ldr	r3, [r0]
   14e9c:	mov	r7, r0
   14ea0:	str	r3, [sp, #28]
   14ea4:	bgt	14f00 <__assert_fail@plt+0x3fd0>
   14ea8:	add	r6, r5, #8
   14eac:	cmp	r4, r6
   14eb0:	str	r2, [sp, #80]	; 0x50
   14eb4:	beq	14fc0 <__assert_fail@plt+0x4090>
   14eb8:	mov	r3, #8
   14ebc:	mov	r0, r4
   14ec0:	str	r3, [sp]
   14ec4:	rsb	r2, r2, #1
   14ec8:	add	r1, sp, #80	; 0x50
   14ecc:	mvn	r3, #-2147483648	; 0x80000000
   14ed0:	bl	173e8 <__assert_fail@plt+0x64b8>
   14ed4:	mov	r4, r0
   14ed8:	str	r0, [r5]
   14edc:	ldr	r0, [r5, #4]
   14ee0:	ldr	r2, [sp, #80]	; 0x50
   14ee4:	mov	r1, #0
   14ee8:	sub	r2, r2, r0
   14eec:	add	r0, r4, r0, lsl #3
   14ef0:	lsl	r2, r2, #3
   14ef4:	bl	10e64 <memset@plt>
   14ef8:	ldr	r3, [sp, #80]	; 0x50
   14efc:	str	r3, [r5, #4]
   14f00:	ldr	r6, [sp, #36]	; 0x24
   14f04:	ldr	r8, [r4]
   14f08:	ldr	r5, [r4, #4]
   14f0c:	ldr	r2, [sp, #72]	; 0x48
   14f10:	ldr	r3, [sp, #32]
   14f14:	ldr	ip, [sp, #76]	; 0x4c
   14f18:	orr	r6, r6, #1
   14f1c:	add	fp, sp, #40	; 0x28
   14f20:	str	r2, [sp, #12]
   14f24:	str	r3, [sp]
   14f28:	str	r6, [sp, #4]
   14f2c:	mov	r1, r8
   14f30:	mov	r0, r5
   14f34:	str	ip, [sp, #16]
   14f38:	str	fp, [sp, #8]
   14f3c:	mov	r3, sl
   14f40:	mov	r2, r9
   14f44:	bl	128f0 <__assert_fail@plt+0x19c0>
   14f48:	cmp	r8, r0
   14f4c:	bhi	14fac <__assert_fail@plt+0x407c>
   14f50:	ldr	r3, [pc, #160]	; 14ff8 <__assert_fail@plt+0x40c8>
   14f54:	add	r8, r0, #1
   14f58:	cmp	r5, r3
   14f5c:	str	r8, [r4]
   14f60:	beq	14f6c <__assert_fail@plt+0x403c>
   14f64:	mov	r0, r5
   14f68:	bl	12624 <__assert_fail@plt+0x16f4>
   14f6c:	mov	r0, r8
   14f70:	bl	171cc <__assert_fail@plt+0x629c>
   14f74:	ldr	ip, [sp, #76]	; 0x4c
   14f78:	ldr	lr, [sp, #32]
   14f7c:	mov	r3, sl
   14f80:	mov	r2, r9
   14f84:	mov	r1, r8
   14f88:	str	r0, [r4, #4]
   14f8c:	ldr	r4, [sp, #72]	; 0x48
   14f90:	str	fp, [sp, #8]
   14f94:	str	r6, [sp, #4]
   14f98:	str	ip, [sp, #16]
   14f9c:	str	r4, [sp, #12]
   14fa0:	str	lr, [sp]
   14fa4:	mov	r5, r0
   14fa8:	bl	128f0 <__assert_fail@plt+0x19c0>
   14fac:	ldr	r3, [sp, #28]
   14fb0:	mov	r0, r5
   14fb4:	str	r3, [r7]
   14fb8:	add	sp, sp, #132	; 0x84
   14fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fc0:	mov	r3, #8
   14fc4:	add	r1, sp, #80	; 0x50
   14fc8:	str	r3, [sp]
   14fcc:	rsb	r2, r2, #1
   14fd0:	mvn	r3, #-2147483648	; 0x80000000
   14fd4:	mov	r0, #0
   14fd8:	bl	173e8 <__assert_fail@plt+0x64b8>
   14fdc:	mov	r4, r0
   14fe0:	ldm	r6, {r0, r1}
   14fe4:	str	r4, [r5]
   14fe8:	stm	r4, {r0, r1}
   14fec:	b	14edc <__assert_fail@plt+0x3fac>
   14ff0:	bl	10f24 <abort@plt>
   14ff4:	strdeq	sl, [r2], -r4
   14ff8:	muleq	r2, ip, r1
   14ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15000:	mov	r4, r2
   15004:	ldr	lr, [pc, #432]	; 151bc <__assert_fail@plt+0x428c>
   15008:	mov	sl, r0
   1500c:	mov	fp, r1
   15010:	ldm	lr!, {r0, r1, r2, r3}
   15014:	sub	sp, sp, #92	; 0x5c
   15018:	add	ip, sp, #40	; 0x28
   1501c:	lsr	r7, r4, #5
   15020:	stmia	ip!, {r0, r1, r2, r3}
   15024:	add	r6, sp, #48	; 0x30
   15028:	ldm	lr!, {r0, r1, r2, r3}
   1502c:	and	r4, r4, #31
   15030:	ldr	r5, [pc, #392]	; 151c0 <__assert_fail@plt+0x4290>
   15034:	stmia	ip!, {r0, r1, r2, r3}
   15038:	ldm	lr, {r0, r1, r2, r3}
   1503c:	stm	ip, {r0, r1, r2, r3}
   15040:	ldr	r2, [r6, r7, lsl #2]
   15044:	lsr	r3, r2, r4
   15048:	eor	r3, r3, #1
   1504c:	and	r3, r3, #1
   15050:	eor	r4, r2, r3, lsl r4
   15054:	str	r4, [r6, r7, lsl #2]
   15058:	bl	10e4c <__errno_location@plt>
   1505c:	ldr	r2, [r5, #4]
   15060:	ldr	r4, [r5]
   15064:	cmp	r2, #0
   15068:	ldr	r3, [r0]
   1506c:	mov	r8, r0
   15070:	str	r3, [sp, #28]
   15074:	bgt	150d0 <__assert_fail@plt+0x41a0>
   15078:	add	r7, r5, #8
   1507c:	cmp	r4, r7
   15080:	str	r2, [sp, #36]	; 0x24
   15084:	beq	1518c <__assert_fail@plt+0x425c>
   15088:	mov	r3, #8
   1508c:	mov	r0, r4
   15090:	str	r3, [sp]
   15094:	rsb	r2, r2, #1
   15098:	mvn	r3, #-2147483648	; 0x80000000
   1509c:	add	r1, sp, #36	; 0x24
   150a0:	bl	173e8 <__assert_fail@plt+0x64b8>
   150a4:	mov	r4, r0
   150a8:	str	r0, [r5]
   150ac:	ldr	r0, [r5, #4]
   150b0:	ldr	r2, [sp, #36]	; 0x24
   150b4:	mov	r1, #0
   150b8:	sub	r2, r2, r0
   150bc:	add	r0, r4, r0, lsl #3
   150c0:	lsl	r2, r2, #3
   150c4:	bl	10e64 <memset@plt>
   150c8:	ldr	r3, [sp, #36]	; 0x24
   150cc:	str	r3, [r5, #4]
   150d0:	ldr	r7, [sp, #44]	; 0x2c
   150d4:	ldr	r9, [r4]
   150d8:	ldr	r5, [r4, #4]
   150dc:	ldr	r2, [sp, #80]	; 0x50
   150e0:	ldr	r3, [sp, #40]	; 0x28
   150e4:	ldr	ip, [sp, #84]	; 0x54
   150e8:	orr	r7, r7, #1
   150ec:	str	r2, [sp, #12]
   150f0:	str	r3, [sp]
   150f4:	str	r7, [sp, #4]
   150f8:	str	r6, [sp, #8]
   150fc:	mov	r1, r9
   15100:	mov	r0, r5
   15104:	str	ip, [sp, #16]
   15108:	mov	r3, fp
   1510c:	mov	r2, sl
   15110:	bl	128f0 <__assert_fail@plt+0x19c0>
   15114:	cmp	r9, r0
   15118:	bhi	15178 <__assert_fail@plt+0x4248>
   1511c:	ldr	r3, [pc, #160]	; 151c4 <__assert_fail@plt+0x4294>
   15120:	add	r9, r0, #1
   15124:	cmp	r5, r3
   15128:	str	r9, [r4]
   1512c:	beq	15138 <__assert_fail@plt+0x4208>
   15130:	mov	r0, r5
   15134:	bl	12624 <__assert_fail@plt+0x16f4>
   15138:	mov	r0, r9
   1513c:	bl	171cc <__assert_fail@plt+0x629c>
   15140:	ldr	ip, [sp, #84]	; 0x54
   15144:	ldr	lr, [sp, #40]	; 0x28
   15148:	mov	r3, fp
   1514c:	mov	r2, sl
   15150:	mov	r1, r9
   15154:	str	r0, [r4, #4]
   15158:	ldr	r4, [sp, #80]	; 0x50
   1515c:	str	r6, [sp, #8]
   15160:	str	r7, [sp, #4]
   15164:	str	ip, [sp, #16]
   15168:	str	r4, [sp, #12]
   1516c:	str	lr, [sp]
   15170:	mov	r5, r0
   15174:	bl	128f0 <__assert_fail@plt+0x19c0>
   15178:	ldr	r3, [sp, #28]
   1517c:	mov	r0, r5
   15180:	str	r3, [r8]
   15184:	add	sp, sp, #92	; 0x5c
   15188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1518c:	mov	r3, #8
   15190:	str	r3, [sp]
   15194:	add	r1, sp, #36	; 0x24
   15198:	rsb	r2, r2, #1
   1519c:	mvn	r3, #-2147483648	; 0x80000000
   151a0:	mov	r0, #0
   151a4:	bl	173e8 <__assert_fail@plt+0x64b8>
   151a8:	mov	r4, r0
   151ac:	ldm	r7, {r0, r1}
   151b0:	str	r4, [r5]
   151b4:	stm	r4, {r0, r1}
   151b8:	b	150ac <__assert_fail@plt+0x417c>
   151bc:	andeq	sl, r2, ip, ror #2
   151c0:	strdeq	sl, [r2], -r4
   151c4:	muleq	r2, ip, r1
   151c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151cc:	mov	r4, r1
   151d0:	ldr	lr, [pc, #420]	; 1537c <__assert_fail@plt+0x444c>
   151d4:	mov	r6, r0
   151d8:	sub	sp, sp, #84	; 0x54
   151dc:	ldm	lr!, {r0, r1, r2, r3}
   151e0:	add	ip, sp, #32
   151e4:	lsr	r8, r4, #5
   151e8:	add	r5, sp, #40	; 0x28
   151ec:	stmia	ip!, {r0, r1, r2, r3}
   151f0:	and	r4, r4, #31
   151f4:	ldm	lr!, {r0, r1, r2, r3}
   151f8:	ldr	r7, [pc, #384]	; 15380 <__assert_fail@plt+0x4450>
   151fc:	stmia	ip!, {r0, r1, r2, r3}
   15200:	ldm	lr, {r0, r1, r2, r3}
   15204:	stm	ip, {r0, r1, r2, r3}
   15208:	ldr	r2, [r5, r8, lsl #2]
   1520c:	lsr	r3, r2, r4
   15210:	eor	r3, r3, #1
   15214:	and	r3, r3, #1
   15218:	eor	r4, r2, r3, lsl r4
   1521c:	str	r4, [r5, r8, lsl #2]
   15220:	bl	10e4c <__errno_location@plt>
   15224:	ldr	r2, [r7, #4]
   15228:	ldr	r4, [r7]
   1522c:	cmp	r2, #0
   15230:	mov	r9, r0
   15234:	ldr	sl, [r0]
   15238:	bgt	15294 <__assert_fail@plt+0x4364>
   1523c:	add	r8, r7, #8
   15240:	cmp	r4, r8
   15244:	str	r2, [sp, #28]
   15248:	beq	1534c <__assert_fail@plt+0x441c>
   1524c:	mov	r3, #8
   15250:	mov	r0, r4
   15254:	str	r3, [sp]
   15258:	rsb	r2, r2, #1
   1525c:	mvn	r3, #-2147483648	; 0x80000000
   15260:	add	r1, sp, #28
   15264:	bl	173e8 <__assert_fail@plt+0x64b8>
   15268:	mov	r4, r0
   1526c:	str	r0, [r7]
   15270:	ldr	r0, [r7, #4]
   15274:	ldr	r2, [sp, #28]
   15278:	mov	r1, #0
   1527c:	sub	r2, r2, r0
   15280:	add	r0, r4, r0, lsl #3
   15284:	lsl	r2, r2, #3
   15288:	bl	10e64 <memset@plt>
   1528c:	ldr	r3, [sp, #28]
   15290:	str	r3, [r7, #4]
   15294:	ldr	r8, [sp, #36]	; 0x24
   15298:	ldr	fp, [r4]
   1529c:	ldr	r7, [r4, #4]
   152a0:	ldr	r2, [sp, #72]	; 0x48
   152a4:	ldr	r3, [sp, #32]
   152a8:	ldr	ip, [sp, #76]	; 0x4c
   152ac:	orr	r8, r8, #1
   152b0:	str	r2, [sp, #12]
   152b4:	str	r3, [sp]
   152b8:	str	r8, [sp, #4]
   152bc:	str	r5, [sp, #8]
   152c0:	mov	r1, fp
   152c4:	mov	r0, r7
   152c8:	str	ip, [sp, #16]
   152cc:	mvn	r3, #0
   152d0:	mov	r2, r6
   152d4:	bl	128f0 <__assert_fail@plt+0x19c0>
   152d8:	cmp	fp, r0
   152dc:	bhi	1533c <__assert_fail@plt+0x440c>
   152e0:	ldr	r3, [pc, #156]	; 15384 <__assert_fail@plt+0x4454>
   152e4:	add	fp, r0, #1
   152e8:	cmp	r7, r3
   152ec:	str	fp, [r4]
   152f0:	beq	152fc <__assert_fail@plt+0x43cc>
   152f4:	mov	r0, r7
   152f8:	bl	12624 <__assert_fail@plt+0x16f4>
   152fc:	mov	r0, fp
   15300:	bl	171cc <__assert_fail@plt+0x629c>
   15304:	ldr	lr, [sp, #76]	; 0x4c
   15308:	ldr	r3, [sp, #32]
   1530c:	ldr	ip, [sp, #72]	; 0x48
   15310:	mov	r2, r6
   15314:	mov	r1, fp
   15318:	str	r0, [r4, #4]
   1531c:	str	r3, [sp]
   15320:	str	r5, [sp, #8]
   15324:	str	r8, [sp, #4]
   15328:	str	lr, [sp, #16]
   1532c:	str	ip, [sp, #12]
   15330:	mvn	r3, #0
   15334:	mov	r7, r0
   15338:	bl	128f0 <__assert_fail@plt+0x19c0>
   1533c:	mov	r0, r7
   15340:	str	sl, [r9]
   15344:	add	sp, sp, #84	; 0x54
   15348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1534c:	mov	r3, #8
   15350:	str	r3, [sp]
   15354:	add	r1, sp, #28
   15358:	rsb	r2, r2, #1
   1535c:	mvn	r3, #-2147483648	; 0x80000000
   15360:	mov	r0, #0
   15364:	bl	173e8 <__assert_fail@plt+0x64b8>
   15368:	mov	r4, r0
   1536c:	ldm	r8, {r0, r1}
   15370:	str	r4, [r7]
   15374:	stm	r4, {r0, r1}
   15378:	b	15270 <__assert_fail@plt+0x4340>
   1537c:	andeq	sl, r2, ip, ror #2
   15380:	strdeq	sl, [r2], -r4
   15384:	muleq	r2, ip, r1
   15388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1538c:	mov	r6, r0
   15390:	ldr	lr, [pc, #404]	; 1552c <__assert_fail@plt+0x45fc>
   15394:	sub	sp, sp, #84	; 0x54
   15398:	add	ip, sp, #32
   1539c:	ldm	lr!, {r0, r1, r2, r3}
   153a0:	ldr	r5, [pc, #392]	; 15530 <__assert_fail@plt+0x4600>
   153a4:	stmia	ip!, {r0, r1, r2, r3}
   153a8:	ldm	lr!, {r0, r1, r2, r3}
   153ac:	ldr	r4, [sp, #44]	; 0x2c
   153b0:	stmia	ip!, {r0, r1, r2, r3}
   153b4:	ldm	lr, {r0, r1, r2, r3}
   153b8:	mvn	lr, r4
   153bc:	and	lr, lr, #67108864	; 0x4000000
   153c0:	eor	lr, lr, r4
   153c4:	stm	ip, {r0, r1, r2, r3}
   153c8:	str	lr, [sp, #44]	; 0x2c
   153cc:	bl	10e4c <__errno_location@plt>
   153d0:	ldr	r2, [r5, #4]
   153d4:	ldr	r4, [r5]
   153d8:	cmp	r2, #0
   153dc:	mov	r8, r0
   153e0:	ldr	sl, [r0]
   153e4:	bgt	15440 <__assert_fail@plt+0x4510>
   153e8:	add	r7, r5, #8
   153ec:	cmp	r4, r7
   153f0:	str	r2, [sp, #28]
   153f4:	beq	154fc <__assert_fail@plt+0x45cc>
   153f8:	mov	r3, #8
   153fc:	mov	r0, r4
   15400:	str	r3, [sp]
   15404:	rsb	r2, r2, #1
   15408:	mvn	r3, #-2147483648	; 0x80000000
   1540c:	add	r1, sp, #28
   15410:	bl	173e8 <__assert_fail@plt+0x64b8>
   15414:	mov	r4, r0
   15418:	str	r0, [r5]
   1541c:	ldr	r0, [r5, #4]
   15420:	ldr	r2, [sp, #28]
   15424:	mov	r1, #0
   15428:	sub	r2, r2, r0
   1542c:	add	r0, r4, r0, lsl #3
   15430:	lsl	r2, r2, #3
   15434:	bl	10e64 <memset@plt>
   15438:	ldr	r3, [sp, #28]
   1543c:	str	r3, [r5, #4]
   15440:	ldr	r7, [sp, #36]	; 0x24
   15444:	ldr	r9, [r4]
   15448:	ldr	r5, [r4, #4]
   1544c:	ldr	r2, [sp, #72]	; 0x48
   15450:	ldr	r3, [sp, #32]
   15454:	ldr	ip, [sp, #76]	; 0x4c
   15458:	orr	r7, r7, #1
   1545c:	add	fp, sp, #40	; 0x28
   15460:	str	r2, [sp, #12]
   15464:	str	r3, [sp]
   15468:	str	r7, [sp, #4]
   1546c:	mov	r1, r9
   15470:	mov	r0, r5
   15474:	str	ip, [sp, #16]
   15478:	str	fp, [sp, #8]
   1547c:	mvn	r3, #0
   15480:	mov	r2, r6
   15484:	bl	128f0 <__assert_fail@plt+0x19c0>
   15488:	cmp	r9, r0
   1548c:	bhi	154ec <__assert_fail@plt+0x45bc>
   15490:	ldr	r3, [pc, #156]	; 15534 <__assert_fail@plt+0x4604>
   15494:	add	r9, r0, #1
   15498:	cmp	r5, r3
   1549c:	str	r9, [r4]
   154a0:	beq	154ac <__assert_fail@plt+0x457c>
   154a4:	mov	r0, r5
   154a8:	bl	12624 <__assert_fail@plt+0x16f4>
   154ac:	mov	r0, r9
   154b0:	bl	171cc <__assert_fail@plt+0x629c>
   154b4:	ldr	lr, [sp, #76]	; 0x4c
   154b8:	ldr	r3, [sp, #32]
   154bc:	ldr	ip, [sp, #72]	; 0x48
   154c0:	mov	r2, r6
   154c4:	mov	r1, r9
   154c8:	str	r0, [r4, #4]
   154cc:	str	r3, [sp]
   154d0:	str	fp, [sp, #8]
   154d4:	str	r7, [sp, #4]
   154d8:	str	lr, [sp, #16]
   154dc:	str	ip, [sp, #12]
   154e0:	mvn	r3, #0
   154e4:	mov	r5, r0
   154e8:	bl	128f0 <__assert_fail@plt+0x19c0>
   154ec:	mov	r0, r5
   154f0:	str	sl, [r8]
   154f4:	add	sp, sp, #84	; 0x54
   154f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154fc:	mov	r3, #8
   15500:	str	r3, [sp]
   15504:	add	r1, sp, #28
   15508:	rsb	r2, r2, #1
   1550c:	mvn	r3, #-2147483648	; 0x80000000
   15510:	mov	r0, #0
   15514:	bl	173e8 <__assert_fail@plt+0x64b8>
   15518:	mov	r4, r0
   1551c:	ldm	r7, {r0, r1}
   15520:	str	r4, [r5]
   15524:	stm	r4, {r0, r1}
   15528:	b	1541c <__assert_fail@plt+0x44ec>
   1552c:	andeq	sl, r2, ip, ror #2
   15530:	strdeq	sl, [r2], -r4
   15534:	muleq	r2, ip, r1
   15538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1553c:	mov	r9, r0
   15540:	ldr	lr, [pc, #416]	; 156e8 <__assert_fail@plt+0x47b8>
   15544:	mov	sl, r1
   15548:	sub	sp, sp, #92	; 0x5c
   1554c:	ldm	lr!, {r0, r1, r2, r3}
   15550:	add	ip, sp, #40	; 0x28
   15554:	ldr	r5, [pc, #400]	; 156ec <__assert_fail@plt+0x47bc>
   15558:	stmia	ip!, {r0, r1, r2, r3}
   1555c:	ldm	lr!, {r0, r1, r2, r3}
   15560:	ldr	r4, [sp, #52]	; 0x34
   15564:	stmia	ip!, {r0, r1, r2, r3}
   15568:	ldm	lr, {r0, r1, r2, r3}
   1556c:	mvn	lr, r4
   15570:	and	lr, lr, #67108864	; 0x4000000
   15574:	eor	lr, lr, r4
   15578:	stm	ip, {r0, r1, r2, r3}
   1557c:	str	lr, [sp, #52]	; 0x34
   15580:	bl	10e4c <__errno_location@plt>
   15584:	ldr	r2, [r5, #4]
   15588:	ldr	r4, [r5]
   1558c:	cmp	r2, #0
   15590:	ldr	r3, [r0]
   15594:	mov	r7, r0
   15598:	str	r3, [sp, #28]
   1559c:	bgt	155f8 <__assert_fail@plt+0x46c8>
   155a0:	add	r6, r5, #8
   155a4:	cmp	r4, r6
   155a8:	str	r2, [sp, #36]	; 0x24
   155ac:	beq	156b8 <__assert_fail@plt+0x4788>
   155b0:	mov	r3, #8
   155b4:	mov	r0, r4
   155b8:	str	r3, [sp]
   155bc:	rsb	r2, r2, #1
   155c0:	mvn	r3, #-2147483648	; 0x80000000
   155c4:	add	r1, sp, #36	; 0x24
   155c8:	bl	173e8 <__assert_fail@plt+0x64b8>
   155cc:	mov	r4, r0
   155d0:	str	r0, [r5]
   155d4:	ldr	r0, [r5, #4]
   155d8:	ldr	r2, [sp, #36]	; 0x24
   155dc:	mov	r1, #0
   155e0:	sub	r2, r2, r0
   155e4:	add	r0, r4, r0, lsl #3
   155e8:	lsl	r2, r2, #3
   155ec:	bl	10e64 <memset@plt>
   155f0:	ldr	r3, [sp, #36]	; 0x24
   155f4:	str	r3, [r5, #4]
   155f8:	ldr	r6, [sp, #44]	; 0x2c
   155fc:	ldr	r8, [r4]
   15600:	ldr	r5, [r4, #4]
   15604:	ldr	r2, [sp, #80]	; 0x50
   15608:	ldr	r3, [sp, #40]	; 0x28
   1560c:	ldr	ip, [sp, #84]	; 0x54
   15610:	orr	r6, r6, #1
   15614:	add	fp, sp, #48	; 0x30
   15618:	str	r2, [sp, #12]
   1561c:	str	r3, [sp]
   15620:	str	r6, [sp, #4]
   15624:	mov	r1, r8
   15628:	mov	r0, r5
   1562c:	str	ip, [sp, #16]
   15630:	str	fp, [sp, #8]
   15634:	mov	r3, sl
   15638:	mov	r2, r9
   1563c:	bl	128f0 <__assert_fail@plt+0x19c0>
   15640:	cmp	r8, r0
   15644:	bhi	156a4 <__assert_fail@plt+0x4774>
   15648:	ldr	r3, [pc, #160]	; 156f0 <__assert_fail@plt+0x47c0>
   1564c:	add	r8, r0, #1
   15650:	cmp	r5, r3
   15654:	str	r8, [r4]
   15658:	beq	15664 <__assert_fail@plt+0x4734>
   1565c:	mov	r0, r5
   15660:	bl	12624 <__assert_fail@plt+0x16f4>
   15664:	mov	r0, r8
   15668:	bl	171cc <__assert_fail@plt+0x629c>
   1566c:	ldr	ip, [sp, #84]	; 0x54
   15670:	ldr	lr, [sp, #40]	; 0x28
   15674:	mov	r3, sl
   15678:	mov	r2, r9
   1567c:	mov	r1, r8
   15680:	str	r0, [r4, #4]
   15684:	ldr	r4, [sp, #80]	; 0x50
   15688:	str	fp, [sp, #8]
   1568c:	str	r6, [sp, #4]
   15690:	str	ip, [sp, #16]
   15694:	str	r4, [sp, #12]
   15698:	str	lr, [sp]
   1569c:	mov	r5, r0
   156a0:	bl	128f0 <__assert_fail@plt+0x19c0>
   156a4:	ldr	r3, [sp, #28]
   156a8:	mov	r0, r5
   156ac:	str	r3, [r7]
   156b0:	add	sp, sp, #92	; 0x5c
   156b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156b8:	mov	r3, #8
   156bc:	str	r3, [sp]
   156c0:	add	r1, sp, #36	; 0x24
   156c4:	rsb	r2, r2, #1
   156c8:	mvn	r3, #-2147483648	; 0x80000000
   156cc:	mov	r0, #0
   156d0:	bl	173e8 <__assert_fail@plt+0x64b8>
   156d4:	mov	r4, r0
   156d8:	ldm	r6, {r0, r1}
   156dc:	str	r4, [r5]
   156e0:	stm	r4, {r0, r1}
   156e4:	b	155d4 <__assert_fail@plt+0x46a4>
   156e8:	andeq	sl, r2, ip, ror #2
   156ec:	strdeq	sl, [r2], -r4
   156f0:	muleq	r2, ip, r1
   156f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156f8:	sub	sp, sp, #180	; 0xb4
   156fc:	mov	r6, r1
   15700:	mov	r4, r0
   15704:	mov	r9, r2
   15708:	add	r0, sp, #80	; 0x50
   1570c:	mov	r2, #48	; 0x30
   15710:	mov	r1, #0
   15714:	bl	10e64 <memset@plt>
   15718:	cmp	r6, #10
   1571c:	beq	158fc <__assert_fail@plt+0x49cc>
   15720:	add	r5, sp, #80	; 0x50
   15724:	str	r6, [sp, #80]	; 0x50
   15728:	ldm	r5!, {r0, r1, r2, r3}
   1572c:	add	ip, sp, #128	; 0x80
   15730:	mov	r7, ip
   15734:	add	lr, sp, #32
   15738:	stmia	ip!, {r0, r1, r2, r3}
   1573c:	mov	r8, #67108864	; 0x4000000
   15740:	ldm	r5!, {r0, r1, r2, r3}
   15744:	ldr	r6, [pc, #436]	; 15900 <__assert_fail@plt+0x49d0>
   15748:	stmia	ip!, {r0, r1, r2, r3}
   1574c:	ldm	r5, {r0, r1, r2, r3}
   15750:	stm	ip, {r0, r1, r2, r3}
   15754:	ldm	r7!, {r0, r1, r2, r3}
   15758:	stmia	lr!, {r0, r1, r2, r3}
   1575c:	ldm	r7!, {r0, r1, r2, r3}
   15760:	str	r8, [sp, #44]	; 0x2c
   15764:	stmia	lr!, {r0, r1, r2, r3}
   15768:	ldm	ip, {r0, r1, r2, r3}
   1576c:	stm	lr, {r0, r1, r2, r3}
   15770:	bl	10e4c <__errno_location@plt>
   15774:	cmn	r4, #-2147483647	; 0x80000001
   15778:	ldr	r5, [r6]
   1577c:	mov	r7, r0
   15780:	movne	r0, #0
   15784:	moveq	r0, #1
   15788:	ldr	r3, [r7]
   1578c:	orrs	r0, r0, r4, lsr #31
   15790:	str	r3, [sp, #24]
   15794:	bne	158fc <__assert_fail@plt+0x49cc>
   15798:	ldr	r2, [r6, #4]
   1579c:	cmp	r4, r2
   157a0:	blt	15800 <__assert_fail@plt+0x48d0>
   157a4:	add	r8, r6, #8
   157a8:	cmp	r5, r8
   157ac:	str	r2, [sp, #80]	; 0x50
   157b0:	beq	158cc <__assert_fail@plt+0x499c>
   157b4:	mov	r3, #8
   157b8:	sub	r2, r4, r2
   157bc:	mov	r0, r5
   157c0:	str	r3, [sp]
   157c4:	add	r2, r2, #1
   157c8:	add	r1, sp, #80	; 0x50
   157cc:	mvn	r3, #-2147483648	; 0x80000000
   157d0:	bl	173e8 <__assert_fail@plt+0x64b8>
   157d4:	mov	r5, r0
   157d8:	str	r0, [r6]
   157dc:	ldr	r0, [r6, #4]
   157e0:	ldr	r2, [sp, #80]	; 0x50
   157e4:	mov	r1, #0
   157e8:	sub	r2, r2, r0
   157ec:	add	r0, r5, r0, lsl #3
   157f0:	lsl	r2, r2, #3
   157f4:	bl	10e64 <memset@plt>
   157f8:	ldr	r3, [sp, #80]	; 0x50
   157fc:	str	r3, [r6, #4]
   15800:	add	fp, r5, r4, lsl #3
   15804:	ldr	r1, [sp, #36]	; 0x24
   15808:	ldr	r8, [r5, r4, lsl #3]
   1580c:	ldr	r6, [fp, #4]
   15810:	ldr	r2, [sp, #72]	; 0x48
   15814:	ldr	r3, [sp, #32]
   15818:	ldr	ip, [sp, #76]	; 0x4c
   1581c:	orr	r1, r1, #1
   15820:	add	sl, sp, #40	; 0x28
   15824:	str	r1, [sp, #28]
   15828:	str	r1, [sp, #4]
   1582c:	str	r2, [sp, #12]
   15830:	str	r3, [sp]
   15834:	mov	r0, r6
   15838:	mov	r1, r8
   1583c:	str	ip, [sp, #16]
   15840:	str	sl, [sp, #8]
   15844:	mvn	r3, #0
   15848:	mov	r2, r9
   1584c:	bl	128f0 <__assert_fail@plt+0x19c0>
   15850:	cmp	r8, r0
   15854:	bhi	158b8 <__assert_fail@plt+0x4988>
   15858:	ldr	r3, [pc, #164]	; 15904 <__assert_fail@plt+0x49d4>
   1585c:	add	r8, r0, #1
   15860:	cmp	r6, r3
   15864:	str	r8, [r5, r4, lsl #3]
   15868:	beq	15874 <__assert_fail@plt+0x4944>
   1586c:	mov	r0, r6
   15870:	bl	12624 <__assert_fail@plt+0x16f4>
   15874:	mov	r0, r8
   15878:	bl	171cc <__assert_fail@plt+0x629c>
   1587c:	ldr	lr, [sp, #76]	; 0x4c
   15880:	ldr	r3, [sp, #32]
   15884:	ldr	ip, [sp, #72]	; 0x48
   15888:	ldr	r4, [sp, #28]
   1588c:	mov	r2, r9
   15890:	mov	r1, r8
   15894:	str	r0, [fp, #4]
   15898:	str	r3, [sp]
   1589c:	str	sl, [sp, #8]
   158a0:	str	r4, [sp, #4]
   158a4:	str	lr, [sp, #16]
   158a8:	str	ip, [sp, #12]
   158ac:	mvn	r3, #0
   158b0:	mov	r6, r0
   158b4:	bl	128f0 <__assert_fail@plt+0x19c0>
   158b8:	ldr	r3, [sp, #24]
   158bc:	mov	r0, r6
   158c0:	str	r3, [r7]
   158c4:	add	sp, sp, #180	; 0xb4
   158c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158cc:	mov	r3, #8
   158d0:	sub	r2, r4, r2
   158d4:	add	r1, sp, #80	; 0x50
   158d8:	str	r3, [sp]
   158dc:	add	r2, r2, #1
   158e0:	mvn	r3, #-2147483648	; 0x80000000
   158e4:	bl	173e8 <__assert_fail@plt+0x64b8>
   158e8:	mov	r5, r0
   158ec:	ldm	r8, {r0, r1}
   158f0:	str	r5, [r6]
   158f4:	stm	r5, {r0, r1}
   158f8:	b	157dc <__assert_fail@plt+0x48ac>
   158fc:	bl	10f24 <abort@plt>
   15900:	strdeq	sl, [r2], -r4
   15904:	muleq	r2, ip, r1
   15908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1590c:	mov	r7, r1
   15910:	ldr	lr, [pc, #492]	; 15b04 <__assert_fail@plt+0x4bd4>
   15914:	mov	r8, r2
   15918:	mov	r4, r0
   1591c:	mov	fp, r3
   15920:	ldm	lr!, {r0, r1, r2, r3}
   15924:	sub	sp, sp, #100	; 0x64
   15928:	add	ip, sp, #48	; 0x30
   1592c:	mov	sl, #10
   15930:	stmia	ip!, {r0, r1, r2, r3}
   15934:	cmp	r8, #0
   15938:	cmpne	r7, #0
   1593c:	ldm	lr!, {r0, r1, r2, r3}
   15940:	str	sl, [sp, #48]	; 0x30
   15944:	stmia	ip!, {r0, r1, r2, r3}
   15948:	ldm	lr, {r0, r1, r2, r3}
   1594c:	stm	ip, {r0, r1, r2, r3}
   15950:	beq	15b00 <__assert_fail@plt+0x4bd0>
   15954:	str	r7, [sp, #88]	; 0x58
   15958:	str	r8, [sp, #92]	; 0x5c
   1595c:	bl	10e4c <__errno_location@plt>
   15960:	ldr	r6, [pc, #416]	; 15b08 <__assert_fail@plt+0x4bd8>
   15964:	cmn	r4, #-2147483647	; 0x80000001
   15968:	ldr	r5, [r6]
   1596c:	mov	r9, r0
   15970:	movne	r0, #0
   15974:	moveq	r0, #1
   15978:	ldr	r3, [r9]
   1597c:	orrs	r0, r0, r4, lsr #31
   15980:	str	r3, [sp, #28]
   15984:	bne	15b00 <__assert_fail@plt+0x4bd0>
   15988:	ldr	r2, [r6, #4]
   1598c:	cmp	r4, r2
   15990:	movlt	r3, sl
   15994:	blt	15a00 <__assert_fail@plt+0x4ad0>
   15998:	add	r7, r6, #8
   1599c:	cmp	r5, r7
   159a0:	str	r2, [sp, #44]	; 0x2c
   159a4:	beq	15ad0 <__assert_fail@plt+0x4ba0>
   159a8:	mov	r3, #8
   159ac:	sub	r2, r4, r2
   159b0:	mov	r0, r5
   159b4:	str	r3, [sp]
   159b8:	add	r2, r2, #1
   159bc:	mvn	r3, #-2147483648	; 0x80000000
   159c0:	add	r1, sp, #44	; 0x2c
   159c4:	bl	173e8 <__assert_fail@plt+0x64b8>
   159c8:	mov	r5, r0
   159cc:	str	r0, [r6]
   159d0:	ldr	r0, [r6, #4]
   159d4:	ldr	r2, [sp, #44]	; 0x2c
   159d8:	mov	r1, #0
   159dc:	sub	r2, r2, r0
   159e0:	add	r0, r5, r0, lsl #3
   159e4:	lsl	r2, r2, #3
   159e8:	bl	10e64 <memset@plt>
   159ec:	ldr	r3, [sp, #48]	; 0x30
   159f0:	ldr	r7, [sp, #88]	; 0x58
   159f4:	ldr	r8, [sp, #92]	; 0x5c
   159f8:	ldr	r2, [sp, #44]	; 0x2c
   159fc:	str	r2, [r6, #4]
   15a00:	add	r2, r5, r4, lsl #3
   15a04:	mov	r1, r2
   15a08:	str	r2, [sp, #32]
   15a0c:	ldr	r2, [sp, #52]	; 0x34
   15a10:	ldr	r6, [r1, #4]
   15a14:	ldr	sl, [r5, r4, lsl #3]
   15a18:	orr	r2, r2, #1
   15a1c:	str	r3, [sp]
   15a20:	add	r3, sp, #56	; 0x38
   15a24:	str	r2, [sp, #36]	; 0x24
   15a28:	str	r2, [sp, #4]
   15a2c:	str	r3, [sp, #8]
   15a30:	mov	r0, r6
   15a34:	str	r8, [sp, #16]
   15a38:	str	r7, [sp, #12]
   15a3c:	mov	r1, sl
   15a40:	mvn	r3, #0
   15a44:	mov	r2, fp
   15a48:	bl	128f0 <__assert_fail@plt+0x19c0>
   15a4c:	cmp	sl, r0
   15a50:	bhi	15abc <__assert_fail@plt+0x4b8c>
   15a54:	ldr	r3, [pc, #176]	; 15b0c <__assert_fail@plt+0x4bdc>
   15a58:	add	r7, r0, #1
   15a5c:	cmp	r6, r3
   15a60:	str	r7, [r5, r4, lsl #3]
   15a64:	beq	15a70 <__assert_fail@plt+0x4b40>
   15a68:	mov	r0, r6
   15a6c:	bl	12624 <__assert_fail@plt+0x16f4>
   15a70:	mov	r0, r7
   15a74:	bl	171cc <__assert_fail@plt+0x629c>
   15a78:	ldr	r3, [sp, #32]
   15a7c:	ldr	lr, [sp, #92]	; 0x5c
   15a80:	ldr	ip, [sp, #88]	; 0x58
   15a84:	ldr	r4, [sp, #36]	; 0x24
   15a88:	mov	r2, fp
   15a8c:	mov	r1, r7
   15a90:	str	r0, [r3, #4]
   15a94:	add	r3, sp, #56	; 0x38
   15a98:	str	r3, [sp, #8]
   15a9c:	ldr	r3, [sp, #48]	; 0x30
   15aa0:	str	r4, [sp, #4]
   15aa4:	str	r3, [sp]
   15aa8:	str	lr, [sp, #16]
   15aac:	str	ip, [sp, #12]
   15ab0:	mvn	r3, #0
   15ab4:	mov	r6, r0
   15ab8:	bl	128f0 <__assert_fail@plt+0x19c0>
   15abc:	ldr	r3, [sp, #28]
   15ac0:	mov	r0, r6
   15ac4:	str	r3, [r9]
   15ac8:	add	sp, sp, #100	; 0x64
   15acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad0:	mov	r3, #8
   15ad4:	sub	r2, r4, r2
   15ad8:	str	r3, [sp]
   15adc:	add	r1, sp, #44	; 0x2c
   15ae0:	add	r2, r2, #1
   15ae4:	mvn	r3, #-2147483648	; 0x80000000
   15ae8:	bl	173e8 <__assert_fail@plt+0x64b8>
   15aec:	mov	r5, r0
   15af0:	ldm	r7, {r0, r1}
   15af4:	str	r5, [r6]
   15af8:	stm	r5, {r0, r1}
   15afc:	b	159d0 <__assert_fail@plt+0x4aa0>
   15b00:	bl	10f24 <abort@plt>
   15b04:	andeq	sl, r2, ip, ror #2
   15b08:	strdeq	sl, [r2], -r4
   15b0c:	muleq	r2, ip, r1
   15b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b14:	mov	r7, r1
   15b18:	ldr	lr, [pc, #492]	; 15d0c <__assert_fail@plt+0x4ddc>
   15b1c:	mov	r8, r2
   15b20:	mov	r4, r0
   15b24:	mov	fp, r3
   15b28:	ldm	lr!, {r0, r1, r2, r3}
   15b2c:	sub	sp, sp, #100	; 0x64
   15b30:	add	ip, sp, #48	; 0x30
   15b34:	mov	sl, #10
   15b38:	stmia	ip!, {r0, r1, r2, r3}
   15b3c:	cmp	r8, #0
   15b40:	cmpne	r7, #0
   15b44:	ldm	lr!, {r0, r1, r2, r3}
   15b48:	str	sl, [sp, #48]	; 0x30
   15b4c:	stmia	ip!, {r0, r1, r2, r3}
   15b50:	ldm	lr, {r0, r1, r2, r3}
   15b54:	stm	ip, {r0, r1, r2, r3}
   15b58:	beq	15d08 <__assert_fail@plt+0x4dd8>
   15b5c:	str	r7, [sp, #88]	; 0x58
   15b60:	str	r8, [sp, #92]	; 0x5c
   15b64:	bl	10e4c <__errno_location@plt>
   15b68:	ldr	r6, [pc, #416]	; 15d10 <__assert_fail@plt+0x4de0>
   15b6c:	cmn	r4, #-2147483647	; 0x80000001
   15b70:	ldr	r5, [r6]
   15b74:	mov	r9, r0
   15b78:	movne	r0, #0
   15b7c:	moveq	r0, #1
   15b80:	ldr	r3, [r9]
   15b84:	orrs	r0, r0, r4, lsr #31
   15b88:	str	r3, [sp, #28]
   15b8c:	bne	15d08 <__assert_fail@plt+0x4dd8>
   15b90:	ldr	r2, [r6, #4]
   15b94:	cmp	r4, r2
   15b98:	movlt	r3, sl
   15b9c:	blt	15c08 <__assert_fail@plt+0x4cd8>
   15ba0:	add	r7, r6, #8
   15ba4:	cmp	r5, r7
   15ba8:	str	r2, [sp, #44]	; 0x2c
   15bac:	beq	15cd8 <__assert_fail@plt+0x4da8>
   15bb0:	mov	r3, #8
   15bb4:	sub	r2, r4, r2
   15bb8:	mov	r0, r5
   15bbc:	str	r3, [sp]
   15bc0:	add	r2, r2, #1
   15bc4:	mvn	r3, #-2147483648	; 0x80000000
   15bc8:	add	r1, sp, #44	; 0x2c
   15bcc:	bl	173e8 <__assert_fail@plt+0x64b8>
   15bd0:	mov	r5, r0
   15bd4:	str	r0, [r6]
   15bd8:	ldr	r0, [r6, #4]
   15bdc:	ldr	r2, [sp, #44]	; 0x2c
   15be0:	mov	r1, #0
   15be4:	sub	r2, r2, r0
   15be8:	add	r0, r5, r0, lsl #3
   15bec:	lsl	r2, r2, #3
   15bf0:	bl	10e64 <memset@plt>
   15bf4:	ldr	r3, [sp, #48]	; 0x30
   15bf8:	ldr	r7, [sp, #88]	; 0x58
   15bfc:	ldr	r8, [sp, #92]	; 0x5c
   15c00:	ldr	r2, [sp, #44]	; 0x2c
   15c04:	str	r2, [r6, #4]
   15c08:	add	r2, r5, r4, lsl #3
   15c0c:	mov	r1, r2
   15c10:	str	r2, [sp, #32]
   15c14:	ldr	r2, [sp, #52]	; 0x34
   15c18:	ldr	r6, [r1, #4]
   15c1c:	ldr	sl, [r5, r4, lsl #3]
   15c20:	orr	r2, r2, #1
   15c24:	str	r3, [sp]
   15c28:	add	r3, sp, #56	; 0x38
   15c2c:	str	r2, [sp, #36]	; 0x24
   15c30:	str	r2, [sp, #4]
   15c34:	str	r3, [sp, #8]
   15c38:	mov	r0, r6
   15c3c:	str	r8, [sp, #16]
   15c40:	str	r7, [sp, #12]
   15c44:	mov	r1, sl
   15c48:	ldr	r3, [sp, #136]	; 0x88
   15c4c:	mov	r2, fp
   15c50:	bl	128f0 <__assert_fail@plt+0x19c0>
   15c54:	cmp	sl, r0
   15c58:	bhi	15cc4 <__assert_fail@plt+0x4d94>
   15c5c:	ldr	r3, [pc, #176]	; 15d14 <__assert_fail@plt+0x4de4>
   15c60:	add	r7, r0, #1
   15c64:	cmp	r6, r3
   15c68:	str	r7, [r5, r4, lsl #3]
   15c6c:	beq	15c78 <__assert_fail@plt+0x4d48>
   15c70:	mov	r0, r6
   15c74:	bl	12624 <__assert_fail@plt+0x16f4>
   15c78:	mov	r0, r7
   15c7c:	bl	171cc <__assert_fail@plt+0x629c>
   15c80:	ldr	r3, [sp, #32]
   15c84:	ldr	lr, [sp, #92]	; 0x5c
   15c88:	ldr	ip, [sp, #88]	; 0x58
   15c8c:	ldr	r4, [sp, #36]	; 0x24
   15c90:	mov	r2, fp
   15c94:	mov	r1, r7
   15c98:	str	r0, [r3, #4]
   15c9c:	add	r3, sp, #56	; 0x38
   15ca0:	str	r3, [sp, #8]
   15ca4:	ldr	r3, [sp, #48]	; 0x30
   15ca8:	str	r4, [sp, #4]
   15cac:	str	r3, [sp]
   15cb0:	str	lr, [sp, #16]
   15cb4:	str	ip, [sp, #12]
   15cb8:	ldr	r3, [sp, #136]	; 0x88
   15cbc:	mov	r6, r0
   15cc0:	bl	128f0 <__assert_fail@plt+0x19c0>
   15cc4:	ldr	r3, [sp, #28]
   15cc8:	mov	r0, r6
   15ccc:	str	r3, [r9]
   15cd0:	add	sp, sp, #100	; 0x64
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd8:	mov	r3, #8
   15cdc:	sub	r2, r4, r2
   15ce0:	str	r3, [sp]
   15ce4:	add	r1, sp, #44	; 0x2c
   15ce8:	add	r2, r2, #1
   15cec:	mvn	r3, #-2147483648	; 0x80000000
   15cf0:	bl	173e8 <__assert_fail@plt+0x64b8>
   15cf4:	mov	r5, r0
   15cf8:	ldm	r7, {r0, r1}
   15cfc:	str	r5, [r6]
   15d00:	stm	r5, {r0, r1}
   15d04:	b	15bd8 <__assert_fail@plt+0x4ca8>
   15d08:	bl	10f24 <abort@plt>
   15d0c:	andeq	sl, r2, ip, ror #2
   15d10:	strdeq	sl, [r2], -r4
   15d14:	muleq	r2, ip, r1
   15d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d1c:	mov	r5, r0
   15d20:	ldr	lr, [pc, #452]	; 15eec <__assert_fail@plt+0x4fbc>
   15d24:	mov	r6, r1
   15d28:	mov	sl, r2
   15d2c:	ldm	lr!, {r0, r1, r2, r3}
   15d30:	sub	sp, sp, #92	; 0x5c
   15d34:	add	ip, sp, #40	; 0x28
   15d38:	cmp	r6, #0
   15d3c:	cmpne	r5, #0
   15d40:	stmia	ip!, {r0, r1, r2, r3}
   15d44:	mov	r9, #10
   15d48:	ldm	lr!, {r0, r1, r2, r3}
   15d4c:	moveq	fp, #1
   15d50:	movne	fp, #0
   15d54:	str	r9, [sp, #40]	; 0x28
   15d58:	stmia	ip!, {r0, r1, r2, r3}
   15d5c:	ldm	lr, {r0, r1, r2, r3}
   15d60:	stm	ip, {r0, r1, r2, r3}
   15d64:	beq	15ee8 <__assert_fail@plt+0x4fb8>
   15d68:	str	r5, [sp, #80]	; 0x50
   15d6c:	str	r6, [sp, #84]	; 0x54
   15d70:	bl	10e4c <__errno_location@plt>
   15d74:	ldr	r7, [pc, #372]	; 15ef0 <__assert_fail@plt+0x4fc0>
   15d78:	ldr	r2, [r7, #4]
   15d7c:	ldr	r4, [r7]
   15d80:	cmp	r2, #0
   15d84:	ldr	r3, [r0]
   15d88:	mov	r8, r0
   15d8c:	str	r3, [sp, #24]
   15d90:	movgt	r3, r9
   15d94:	bgt	15dfc <__assert_fail@plt+0x4ecc>
   15d98:	add	r5, r7, #8
   15d9c:	cmp	r4, r5
   15da0:	str	r2, [sp, #36]	; 0x24
   15da4:	beq	15eb8 <__assert_fail@plt+0x4f88>
   15da8:	mov	r3, #8
   15dac:	mov	r0, r4
   15db0:	str	r3, [sp]
   15db4:	rsb	r2, r2, #1
   15db8:	mvn	r3, #-2147483648	; 0x80000000
   15dbc:	add	r1, sp, #36	; 0x24
   15dc0:	bl	173e8 <__assert_fail@plt+0x64b8>
   15dc4:	mov	r4, r0
   15dc8:	str	r0, [r7]
   15dcc:	ldr	r0, [r7, #4]
   15dd0:	ldr	r2, [sp, #36]	; 0x24
   15dd4:	mov	r1, #0
   15dd8:	sub	r2, r2, r0
   15ddc:	add	r0, r4, r0, lsl #3
   15de0:	lsl	r2, r2, #3
   15de4:	bl	10e64 <memset@plt>
   15de8:	ldr	r3, [sp, #40]	; 0x28
   15dec:	ldr	r5, [sp, #80]	; 0x50
   15df0:	ldr	r6, [sp, #84]	; 0x54
   15df4:	ldr	r2, [sp, #36]	; 0x24
   15df8:	str	r2, [r7, #4]
   15dfc:	ldr	r2, [sp, #44]	; 0x2c
   15e00:	ldr	r9, [r4]
   15e04:	ldr	r7, [r4, #4]
   15e08:	orr	r2, r2, #1
   15e0c:	add	fp, sp, #48	; 0x30
   15e10:	str	r2, [sp, #28]
   15e14:	str	r2, [sp, #4]
   15e18:	str	r3, [sp]
   15e1c:	str	r6, [sp, #16]
   15e20:	str	r5, [sp, #12]
   15e24:	mov	r1, r9
   15e28:	mov	r0, r7
   15e2c:	str	fp, [sp, #8]
   15e30:	mvn	r3, #0
   15e34:	mov	r2, sl
   15e38:	bl	128f0 <__assert_fail@plt+0x19c0>
   15e3c:	cmp	r9, r0
   15e40:	bhi	15ea4 <__assert_fail@plt+0x4f74>
   15e44:	ldr	r3, [pc, #168]	; 15ef4 <__assert_fail@plt+0x4fc4>
   15e48:	add	r5, r0, #1
   15e4c:	cmp	r7, r3
   15e50:	str	r5, [r4]
   15e54:	beq	15e60 <__assert_fail@plt+0x4f30>
   15e58:	mov	r0, r7
   15e5c:	bl	12624 <__assert_fail@plt+0x16f4>
   15e60:	mov	r0, r5
   15e64:	bl	171cc <__assert_fail@plt+0x629c>
   15e68:	ldr	lr, [sp, #84]	; 0x54
   15e6c:	ldr	r3, [sp, #40]	; 0x28
   15e70:	ldr	ip, [sp, #80]	; 0x50
   15e74:	mov	r2, sl
   15e78:	mov	r1, r5
   15e7c:	str	r0, [r4, #4]
   15e80:	ldr	r4, [sp, #28]
   15e84:	str	r3, [sp]
   15e88:	str	fp, [sp, #8]
   15e8c:	str	r4, [sp, #4]
   15e90:	str	lr, [sp, #16]
   15e94:	str	ip, [sp, #12]
   15e98:	mvn	r3, #0
   15e9c:	mov	r7, r0
   15ea0:	bl	128f0 <__assert_fail@plt+0x19c0>
   15ea4:	ldr	r3, [sp, #24]
   15ea8:	mov	r0, r7
   15eac:	str	r3, [r8]
   15eb0:	add	sp, sp, #92	; 0x5c
   15eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb8:	mov	r3, #8
   15ebc:	str	r3, [sp]
   15ec0:	add	r1, sp, #36	; 0x24
   15ec4:	rsb	r2, r2, #1
   15ec8:	mov	r0, fp
   15ecc:	mvn	r3, #-2147483648	; 0x80000000
   15ed0:	bl	173e8 <__assert_fail@plt+0x64b8>
   15ed4:	mov	r4, r0
   15ed8:	ldm	r5, {r0, r1}
   15edc:	str	r4, [r7]
   15ee0:	stm	r4, {r0, r1}
   15ee4:	b	15dcc <__assert_fail@plt+0x4e9c>
   15ee8:	bl	10f24 <abort@plt>
   15eec:	andeq	sl, r2, ip, ror #2
   15ef0:	strdeq	sl, [r2], -r4
   15ef4:	muleq	r2, ip, r1
   15ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15efc:	mov	r5, r0
   15f00:	ldr	lr, [pc, #464]	; 160d8 <__assert_fail@plt+0x51a8>
   15f04:	mov	r6, r1
   15f08:	mov	sl, r2
   15f0c:	mov	fp, r3
   15f10:	ldm	lr!, {r0, r1, r2, r3}
   15f14:	sub	sp, sp, #92	; 0x5c
   15f18:	add	ip, sp, #40	; 0x28
   15f1c:	cmp	r6, #0
   15f20:	cmpne	r5, #0
   15f24:	stmia	ip!, {r0, r1, r2, r3}
   15f28:	moveq	r4, #1
   15f2c:	ldm	lr!, {r0, r1, r2, r3}
   15f30:	movne	r4, #0
   15f34:	mov	r9, #10
   15f38:	str	r4, [sp, #28]
   15f3c:	stmia	ip!, {r0, r1, r2, r3}
   15f40:	ldm	lr, {r0, r1, r2, r3}
   15f44:	str	r9, [sp, #40]	; 0x28
   15f48:	stm	ip, {r0, r1, r2, r3}
   15f4c:	beq	160d4 <__assert_fail@plt+0x51a4>
   15f50:	str	r5, [sp, #80]	; 0x50
   15f54:	str	r6, [sp, #84]	; 0x54
   15f58:	bl	10e4c <__errno_location@plt>
   15f5c:	ldr	r7, [pc, #376]	; 160dc <__assert_fail@plt+0x51ac>
   15f60:	ldr	r2, [r7, #4]
   15f64:	ldr	r4, [r7]
   15f68:	cmp	r2, #0
   15f6c:	ldr	r3, [r0]
   15f70:	mov	r8, r0
   15f74:	str	r3, [sp, #24]
   15f78:	movgt	r3, r9
   15f7c:	bgt	15fe4 <__assert_fail@plt+0x50b4>
   15f80:	add	r5, r7, #8
   15f84:	cmp	r4, r5
   15f88:	str	r2, [sp, #36]	; 0x24
   15f8c:	beq	160a4 <__assert_fail@plt+0x5174>
   15f90:	mov	r3, #8
   15f94:	mov	r0, r4
   15f98:	str	r3, [sp]
   15f9c:	rsb	r2, r2, #1
   15fa0:	mvn	r3, #-2147483648	; 0x80000000
   15fa4:	add	r1, sp, #36	; 0x24
   15fa8:	bl	173e8 <__assert_fail@plt+0x64b8>
   15fac:	mov	r4, r0
   15fb0:	str	r0, [r7]
   15fb4:	ldr	r0, [r7, #4]
   15fb8:	ldr	r2, [sp, #36]	; 0x24
   15fbc:	mov	r1, #0
   15fc0:	sub	r2, r2, r0
   15fc4:	add	r0, r4, r0, lsl #3
   15fc8:	lsl	r2, r2, #3
   15fcc:	bl	10e64 <memset@plt>
   15fd0:	ldr	r3, [sp, #40]	; 0x28
   15fd4:	ldr	r5, [sp, #80]	; 0x50
   15fd8:	ldr	r6, [sp, #84]	; 0x54
   15fdc:	ldr	r2, [sp, #36]	; 0x24
   15fe0:	str	r2, [r7, #4]
   15fe4:	ldr	r2, [sp, #44]	; 0x2c
   15fe8:	ldr	r9, [r4]
   15fec:	ldr	r7, [r4, #4]
   15ff0:	orr	r2, r2, #1
   15ff4:	str	r3, [sp]
   15ff8:	add	r3, sp, #48	; 0x30
   15ffc:	str	r2, [sp, #28]
   16000:	str	r2, [sp, #4]
   16004:	str	r3, [sp, #8]
   16008:	str	r6, [sp, #16]
   1600c:	str	r5, [sp, #12]
   16010:	mov	r1, r9
   16014:	mov	r0, r7
   16018:	mov	r3, fp
   1601c:	mov	r2, sl
   16020:	bl	128f0 <__assert_fail@plt+0x19c0>
   16024:	cmp	r9, r0
   16028:	bhi	16090 <__assert_fail@plt+0x5160>
   1602c:	ldr	r3, [pc, #172]	; 160e0 <__assert_fail@plt+0x51b0>
   16030:	add	r5, r0, #1
   16034:	cmp	r7, r3
   16038:	str	r5, [r4]
   1603c:	beq	16048 <__assert_fail@plt+0x5118>
   16040:	mov	r0, r7
   16044:	bl	12624 <__assert_fail@plt+0x16f4>
   16048:	mov	r0, r5
   1604c:	bl	171cc <__assert_fail@plt+0x629c>
   16050:	add	lr, sp, #48	; 0x30
   16054:	ldr	ip, [sp, #84]	; 0x54
   16058:	mov	r1, r5
   1605c:	ldr	r5, [sp, #28]
   16060:	mov	r3, fp
   16064:	mov	r2, sl
   16068:	str	r0, [r4, #4]
   1606c:	ldr	r4, [sp, #80]	; 0x50
   16070:	str	lr, [sp, #8]
   16074:	ldr	lr, [sp, #40]	; 0x28
   16078:	str	r5, [sp, #4]
   1607c:	str	ip, [sp, #16]
   16080:	str	r4, [sp, #12]
   16084:	str	lr, [sp]
   16088:	mov	r7, r0
   1608c:	bl	128f0 <__assert_fail@plt+0x19c0>
   16090:	ldr	r3, [sp, #24]
   16094:	mov	r0, r7
   16098:	str	r3, [r8]
   1609c:	add	sp, sp, #92	; 0x5c
   160a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160a4:	mov	r3, #8
   160a8:	str	r3, [sp]
   160ac:	add	r1, sp, #36	; 0x24
   160b0:	rsb	r2, r2, #1
   160b4:	ldr	r0, [sp, #28]
   160b8:	mvn	r3, #-2147483648	; 0x80000000
   160bc:	bl	173e8 <__assert_fail@plt+0x64b8>
   160c0:	mov	r4, r0
   160c4:	ldm	r5, {r0, r1}
   160c8:	str	r4, [r7]
   160cc:	stm	r4, {r0, r1}
   160d0:	b	15fb4 <__assert_fail@plt+0x5084>
   160d4:	bl	10f24 <abort@plt>
   160d8:	andeq	sl, r2, ip, ror #2
   160dc:	strdeq	sl, [r2], -r4
   160e0:	muleq	r2, ip, r1
   160e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e8:	sub	sp, sp, #52	; 0x34
   160ec:	mov	r5, r0
   160f0:	mov	sl, r1
   160f4:	mov	fp, r2
   160f8:	bl	10e4c <__errno_location@plt>
   160fc:	ldr	r4, [pc, #404]	; 16298 <__assert_fail@plt+0x5368>
   16100:	cmn	r5, #-2147483647	; 0x80000001
   16104:	ldr	r6, [r4]
   16108:	mov	r8, r0
   1610c:	movne	r0, #0
   16110:	moveq	r0, #1
   16114:	ldr	r3, [r8]
   16118:	orrs	r0, r0, r5, lsr #31
   1611c:	str	r3, [sp, #28]
   16120:	bne	16294 <__assert_fail@plt+0x5364>
   16124:	ldr	r2, [r4, #4]
   16128:	cmp	r5, r2
   1612c:	blt	1618c <__assert_fail@plt+0x525c>
   16130:	add	r7, r4, #8
   16134:	cmp	r6, r7
   16138:	str	r2, [sp, #44]	; 0x2c
   1613c:	beq	16264 <__assert_fail@plt+0x5334>
   16140:	mov	r3, #8
   16144:	sub	r2, r5, r2
   16148:	mov	r0, r6
   1614c:	str	r3, [sp]
   16150:	add	r2, r2, #1
   16154:	mvn	r3, #-2147483648	; 0x80000000
   16158:	add	r1, sp, #44	; 0x2c
   1615c:	bl	173e8 <__assert_fail@plt+0x64b8>
   16160:	mov	r6, r0
   16164:	str	r0, [r4]
   16168:	ldr	r0, [r4, #4]
   1616c:	ldr	r2, [sp, #44]	; 0x2c
   16170:	mov	r1, #0
   16174:	sub	r2, r2, r0
   16178:	add	r0, r6, r0, lsl #3
   1617c:	lsl	r2, r2, #3
   16180:	bl	10e64 <memset@plt>
   16184:	ldr	r3, [sp, #44]	; 0x2c
   16188:	str	r3, [r4, #4]
   1618c:	ldr	r2, [r4, #56]	; 0x38
   16190:	add	r3, r6, r5, lsl #3
   16194:	ldr	r1, [r4, #20]
   16198:	ldr	r7, [r3, #4]
   1619c:	ldr	r9, [r6, r5, lsl #3]
   161a0:	ldr	ip, [r4, #60]	; 0x3c
   161a4:	str	r3, [sp, #32]
   161a8:	ldr	r3, [r4, #16]
   161ac:	str	r2, [sp, #12]
   161b0:	ldr	r2, [pc, #228]	; 1629c <__assert_fail@plt+0x536c>
   161b4:	orr	r1, r1, #1
   161b8:	str	r1, [sp, #36]	; 0x24
   161bc:	str	r1, [sp, #4]
   161c0:	str	r2, [sp, #8]
   161c4:	str	r3, [sp]
   161c8:	mov	r0, r7
   161cc:	mov	r1, r9
   161d0:	str	ip, [sp, #16]
   161d4:	mov	r3, fp
   161d8:	mov	r2, sl
   161dc:	bl	128f0 <__assert_fail@plt+0x19c0>
   161e0:	cmp	r9, r0
   161e4:	bhi	16250 <__assert_fail@plt+0x5320>
   161e8:	ldr	r3, [pc, #176]	; 162a0 <__assert_fail@plt+0x5370>
   161ec:	add	r9, r0, #1
   161f0:	cmp	r7, r3
   161f4:	str	r9, [r6, r5, lsl #3]
   161f8:	beq	16204 <__assert_fail@plt+0x52d4>
   161fc:	mov	r0, r7
   16200:	bl	12624 <__assert_fail@plt+0x16f4>
   16204:	mov	r0, r9
   16208:	bl	171cc <__assert_fail@plt+0x629c>
   1620c:	ldr	ip, [sp, #32]
   16210:	ldr	lr, [r4, #60]	; 0x3c
   16214:	ldr	r5, [r4, #56]	; 0x38
   16218:	mov	r3, fp
   1621c:	mov	r2, sl
   16220:	mov	r1, r9
   16224:	str	r0, [ip, #4]
   16228:	ldr	ip, [r4, #16]
   1622c:	ldr	r4, [pc, #104]	; 1629c <__assert_fail@plt+0x536c>
   16230:	str	lr, [sp, #16]
   16234:	str	r4, [sp, #8]
   16238:	ldr	r4, [sp, #36]	; 0x24
   1623c:	str	r5, [sp, #12]
   16240:	str	r4, [sp, #4]
   16244:	str	ip, [sp]
   16248:	mov	r7, r0
   1624c:	bl	128f0 <__assert_fail@plt+0x19c0>
   16250:	ldr	r3, [sp, #28]
   16254:	mov	r0, r7
   16258:	str	r3, [r8]
   1625c:	add	sp, sp, #52	; 0x34
   16260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16264:	mov	r3, #8
   16268:	sub	r2, r5, r2
   1626c:	str	r3, [sp]
   16270:	add	r1, sp, #44	; 0x2c
   16274:	add	r2, r2, #1
   16278:	mvn	r3, #-2147483648	; 0x80000000
   1627c:	bl	173e8 <__assert_fail@plt+0x64b8>
   16280:	mov	r6, r0
   16284:	ldm	r7, {r0, r1}
   16288:	str	r6, [r4]
   1628c:	stm	r6, {r0, r1}
   16290:	b	16168 <__assert_fail@plt+0x5238>
   16294:	bl	10f24 <abort@plt>
   16298:	strdeq	sl, [r2], -r4
   1629c:	andeq	sl, r2, ip, lsl #2
   162a0:	muleq	r2, ip, r1
   162a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162a8:	sub	sp, sp, #44	; 0x2c
   162ac:	mov	r9, r0
   162b0:	mov	sl, r1
   162b4:	bl	10e4c <__errno_location@plt>
   162b8:	ldr	r4, [pc, #360]	; 16428 <__assert_fail@plt+0x54f8>
   162bc:	ldr	r2, [r4, #4]
   162c0:	ldr	r5, [r4]
   162c4:	cmp	r2, #0
   162c8:	ldr	r3, [r0]
   162cc:	mov	r7, r0
   162d0:	str	r3, [sp, #24]
   162d4:	bgt	16330 <__assert_fail@plt+0x5400>
   162d8:	add	r6, r4, #8
   162dc:	cmp	r5, r6
   162e0:	str	r2, [sp, #36]	; 0x24
   162e4:	beq	163f8 <__assert_fail@plt+0x54c8>
   162e8:	mov	r3, #8
   162ec:	mov	r0, r5
   162f0:	str	r3, [sp]
   162f4:	rsb	r2, r2, #1
   162f8:	mvn	r3, #-2147483648	; 0x80000000
   162fc:	add	r1, sp, #36	; 0x24
   16300:	bl	173e8 <__assert_fail@plt+0x64b8>
   16304:	mov	r5, r0
   16308:	str	r0, [r4]
   1630c:	ldr	r0, [r4, #4]
   16310:	ldr	r2, [sp, #36]	; 0x24
   16314:	mov	r1, #0
   16318:	sub	r2, r2, r0
   1631c:	add	r0, r5, r0, lsl #3
   16320:	lsl	r2, r2, #3
   16324:	bl	10e64 <memset@plt>
   16328:	ldr	r3, [sp, #36]	; 0x24
   1632c:	str	r3, [r4, #4]
   16330:	ldr	r1, [r4, #20]
   16334:	ldr	r8, [r5]
   16338:	ldr	r6, [r5, #4]
   1633c:	ldr	r2, [r4, #56]	; 0x38
   16340:	ldr	r3, [r4, #16]
   16344:	ldr	ip, [r4, #60]	; 0x3c
   16348:	ldr	fp, [pc, #220]	; 1642c <__assert_fail@plt+0x54fc>
   1634c:	orr	r1, r1, #1
   16350:	str	r1, [sp, #28]
   16354:	str	r1, [sp, #4]
   16358:	str	r2, [sp, #12]
   1635c:	str	r3, [sp]
   16360:	mov	r1, r8
   16364:	mov	r0, r6
   16368:	str	ip, [sp, #16]
   1636c:	str	fp, [sp, #8]
   16370:	mov	r3, sl
   16374:	mov	r2, r9
   16378:	bl	128f0 <__assert_fail@plt+0x19c0>
   1637c:	cmp	r8, r0
   16380:	bhi	163e4 <__assert_fail@plt+0x54b4>
   16384:	ldr	r3, [pc, #164]	; 16430 <__assert_fail@plt+0x5500>
   16388:	add	r8, r0, #1
   1638c:	cmp	r6, r3
   16390:	str	r8, [r5]
   16394:	beq	163a0 <__assert_fail@plt+0x5470>
   16398:	mov	r0, r6
   1639c:	bl	12624 <__assert_fail@plt+0x16f4>
   163a0:	mov	r0, r8
   163a4:	bl	171cc <__assert_fail@plt+0x629c>
   163a8:	ldr	lr, [r4, #60]	; 0x3c
   163ac:	ldr	ip, [r4, #16]
   163b0:	mov	r3, sl
   163b4:	mov	r2, r9
   163b8:	mov	r1, r8
   163bc:	str	r0, [r5, #4]
   163c0:	ldr	r5, [r4, #56]	; 0x38
   163c4:	ldr	r4, [sp, #28]
   163c8:	str	fp, [sp, #8]
   163cc:	str	r4, [sp, #4]
   163d0:	str	lr, [sp, #16]
   163d4:	str	r5, [sp, #12]
   163d8:	str	ip, [sp]
   163dc:	mov	r6, r0
   163e0:	bl	128f0 <__assert_fail@plt+0x19c0>
   163e4:	ldr	r3, [sp, #24]
   163e8:	mov	r0, r6
   163ec:	str	r3, [r7]
   163f0:	add	sp, sp, #44	; 0x2c
   163f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163f8:	mov	r3, #8
   163fc:	str	r3, [sp]
   16400:	add	r1, sp, #36	; 0x24
   16404:	rsb	r2, r2, #1
   16408:	mvn	r3, #-2147483648	; 0x80000000
   1640c:	mov	r0, #0
   16410:	bl	173e8 <__assert_fail@plt+0x64b8>
   16414:	mov	r5, r0
   16418:	ldm	r6, {r0, r1}
   1641c:	str	r5, [r4]
   16420:	stm	r5, {r0, r1}
   16424:	b	1630c <__assert_fail@plt+0x53dc>
   16428:	strdeq	sl, [r2], -r4
   1642c:	andeq	sl, r2, ip, lsl #2
   16430:	muleq	r2, ip, r1
   16434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16438:	sub	sp, sp, #44	; 0x2c
   1643c:	mov	r5, r0
   16440:	mov	sl, r1
   16444:	bl	10e4c <__errno_location@plt>
   16448:	ldr	r4, [pc, #396]	; 165dc <__assert_fail@plt+0x56ac>
   1644c:	cmn	r5, #-2147483647	; 0x80000001
   16450:	ldr	r6, [r4]
   16454:	mov	r8, r0
   16458:	movne	r0, #0
   1645c:	moveq	r0, #1
   16460:	ldr	r3, [r8]
   16464:	orrs	r0, r0, r5, lsr #31
   16468:	str	r3, [sp, #24]
   1646c:	bne	165d8 <__assert_fail@plt+0x56a8>
   16470:	ldr	r2, [r4, #4]
   16474:	cmp	r5, r2
   16478:	blt	164d8 <__assert_fail@plt+0x55a8>
   1647c:	add	r7, r4, #8
   16480:	cmp	r6, r7
   16484:	str	r2, [sp, #36]	; 0x24
   16488:	beq	165a8 <__assert_fail@plt+0x5678>
   1648c:	mov	r3, #8
   16490:	sub	r2, r5, r2
   16494:	mov	r0, r6
   16498:	str	r3, [sp]
   1649c:	add	r2, r2, #1
   164a0:	mvn	r3, #-2147483648	; 0x80000000
   164a4:	add	r1, sp, #36	; 0x24
   164a8:	bl	173e8 <__assert_fail@plt+0x64b8>
   164ac:	mov	r6, r0
   164b0:	str	r0, [r4]
   164b4:	ldr	r0, [r4, #4]
   164b8:	ldr	r2, [sp, #36]	; 0x24
   164bc:	mov	r1, #0
   164c0:	sub	r2, r2, r0
   164c4:	add	r0, r6, r0, lsl #3
   164c8:	lsl	r2, r2, #3
   164cc:	bl	10e64 <memset@plt>
   164d0:	ldr	r3, [sp, #36]	; 0x24
   164d4:	str	r3, [r4, #4]
   164d8:	ldr	r2, [r4, #56]	; 0x38
   164dc:	add	fp, r6, r5, lsl #3
   164e0:	ldr	r1, [r4, #20]
   164e4:	ldr	r9, [r6, r5, lsl #3]
   164e8:	ldr	r7, [fp, #4]
   164ec:	ldr	r3, [r4, #16]
   164f0:	ldr	ip, [r4, #60]	; 0x3c
   164f4:	str	r2, [sp, #12]
   164f8:	ldr	r2, [pc, #224]	; 165e0 <__assert_fail@plt+0x56b0>
   164fc:	orr	r1, r1, #1
   16500:	str	r1, [sp, #28]
   16504:	str	r1, [sp, #4]
   16508:	str	r2, [sp, #8]
   1650c:	str	r3, [sp]
   16510:	mov	r0, r7
   16514:	mov	r1, r9
   16518:	str	ip, [sp, #16]
   1651c:	mvn	r3, #0
   16520:	mov	r2, sl
   16524:	bl	128f0 <__assert_fail@plt+0x19c0>
   16528:	cmp	r9, r0
   1652c:	bhi	16594 <__assert_fail@plt+0x5664>
   16530:	ldr	r3, [pc, #172]	; 165e4 <__assert_fail@plt+0x56b4>
   16534:	add	r9, r0, #1
   16538:	cmp	r7, r3
   1653c:	str	r9, [r6, r5, lsl #3]
   16540:	beq	1654c <__assert_fail@plt+0x561c>
   16544:	mov	r0, r7
   16548:	bl	12624 <__assert_fail@plt+0x16f4>
   1654c:	mov	r0, r9
   16550:	bl	171cc <__assert_fail@plt+0x629c>
   16554:	ldr	ip, [r4, #60]	; 0x3c
   16558:	ldr	r3, [r4, #16]
   1655c:	ldr	lr, [r4, #56]	; 0x38
   16560:	ldr	r4, [pc, #120]	; 165e0 <__assert_fail@plt+0x56b0>
   16564:	mov	r2, sl
   16568:	mov	r1, r9
   1656c:	str	r0, [fp, #4]
   16570:	str	r4, [sp, #8]
   16574:	ldr	r4, [sp, #28]
   16578:	str	r3, [sp]
   1657c:	str	r4, [sp, #4]
   16580:	str	ip, [sp, #16]
   16584:	str	lr, [sp, #12]
   16588:	mvn	r3, #0
   1658c:	mov	r7, r0
   16590:	bl	128f0 <__assert_fail@plt+0x19c0>
   16594:	ldr	r3, [sp, #24]
   16598:	mov	r0, r7
   1659c:	str	r3, [r8]
   165a0:	add	sp, sp, #44	; 0x2c
   165a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165a8:	mov	r3, #8
   165ac:	sub	r2, r5, r2
   165b0:	str	r3, [sp]
   165b4:	add	r1, sp, #36	; 0x24
   165b8:	add	r2, r2, #1
   165bc:	mvn	r3, #-2147483648	; 0x80000000
   165c0:	bl	173e8 <__assert_fail@plt+0x64b8>
   165c4:	mov	r6, r0
   165c8:	ldm	r7, {r0, r1}
   165cc:	str	r6, [r4]
   165d0:	stm	r6, {r0, r1}
   165d4:	b	164b4 <__assert_fail@plt+0x5584>
   165d8:	bl	10f24 <abort@plt>
   165dc:	strdeq	sl, [r2], -r4
   165e0:	andeq	sl, r2, ip, lsl #2
   165e4:	muleq	r2, ip, r1
   165e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165ec:	sub	sp, sp, #44	; 0x2c
   165f0:	mov	sl, r0
   165f4:	bl	10e4c <__errno_location@plt>
   165f8:	ldr	r4, [pc, #348]	; 1675c <__assert_fail@plt+0x582c>
   165fc:	ldr	r2, [r4, #4]
   16600:	ldr	r5, [r4]
   16604:	cmp	r2, #0
   16608:	ldr	r3, [r0]
   1660c:	mov	r8, r0
   16610:	str	r3, [sp, #28]
   16614:	bgt	16670 <__assert_fail@plt+0x5740>
   16618:	add	r6, r4, #8
   1661c:	cmp	r5, r6
   16620:	str	r2, [sp, #36]	; 0x24
   16624:	beq	1672c <__assert_fail@plt+0x57fc>
   16628:	mov	r3, #8
   1662c:	mov	r0, r5
   16630:	str	r3, [sp]
   16634:	rsb	r2, r2, #1
   16638:	mvn	r3, #-2147483648	; 0x80000000
   1663c:	add	r1, sp, #36	; 0x24
   16640:	bl	173e8 <__assert_fail@plt+0x64b8>
   16644:	mov	r5, r0
   16648:	str	r0, [r4]
   1664c:	ldr	r0, [r4, #4]
   16650:	ldr	r2, [sp, #36]	; 0x24
   16654:	mov	r1, #0
   16658:	sub	r2, r2, r0
   1665c:	add	r0, r5, r0, lsl #3
   16660:	lsl	r2, r2, #3
   16664:	bl	10e64 <memset@plt>
   16668:	ldr	r3, [sp, #36]	; 0x24
   1666c:	str	r3, [r4, #4]
   16670:	ldr	r7, [r4, #20]
   16674:	ldr	r9, [r5]
   16678:	ldr	r6, [r5, #4]
   1667c:	ldr	r2, [r4, #56]	; 0x38
   16680:	ldr	r3, [r4, #16]
   16684:	ldr	ip, [r4, #60]	; 0x3c
   16688:	ldr	fp, [pc, #208]	; 16760 <__assert_fail@plt+0x5830>
   1668c:	orr	r7, r7, #1
   16690:	str	r2, [sp, #12]
   16694:	str	r3, [sp]
   16698:	str	r7, [sp, #4]
   1669c:	mov	r1, r9
   166a0:	mov	r0, r6
   166a4:	str	ip, [sp, #16]
   166a8:	str	fp, [sp, #8]
   166ac:	mvn	r3, #0
   166b0:	mov	r2, sl
   166b4:	bl	128f0 <__assert_fail@plt+0x19c0>
   166b8:	cmp	r9, r0
   166bc:	bhi	16718 <__assert_fail@plt+0x57e8>
   166c0:	ldr	r3, [pc, #156]	; 16764 <__assert_fail@plt+0x5834>
   166c4:	add	r9, r0, #1
   166c8:	cmp	r6, r3
   166cc:	str	r9, [r5]
   166d0:	beq	166dc <__assert_fail@plt+0x57ac>
   166d4:	mov	r0, r6
   166d8:	bl	12624 <__assert_fail@plt+0x16f4>
   166dc:	mov	r0, r9
   166e0:	bl	171cc <__assert_fail@plt+0x629c>
   166e4:	ldr	ip, [r4, #60]	; 0x3c
   166e8:	ldr	r3, [r4, #16]
   166ec:	ldr	lr, [r4, #56]	; 0x38
   166f0:	mov	r2, sl
   166f4:	mov	r1, r9
   166f8:	str	r0, [r5, #4]
   166fc:	str	r3, [sp]
   16700:	stmib	sp, {r7, fp}
   16704:	str	ip, [sp, #16]
   16708:	str	lr, [sp, #12]
   1670c:	mvn	r3, #0
   16710:	mov	r6, r0
   16714:	bl	128f0 <__assert_fail@plt+0x19c0>
   16718:	ldr	r3, [sp, #28]
   1671c:	mov	r0, r6
   16720:	str	r3, [r8]
   16724:	add	sp, sp, #44	; 0x2c
   16728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1672c:	mov	r3, #8
   16730:	str	r3, [sp]
   16734:	add	r1, sp, #36	; 0x24
   16738:	rsb	r2, r2, #1
   1673c:	mvn	r3, #-2147483648	; 0x80000000
   16740:	mov	r0, #0
   16744:	bl	173e8 <__assert_fail@plt+0x64b8>
   16748:	mov	r5, r0
   1674c:	ldm	r6, {r0, r1}
   16750:	str	r5, [r4]
   16754:	stm	r5, {r0, r1}
   16758:	b	1664c <__assert_fail@plt+0x571c>
   1675c:	strdeq	sl, [r2], -r4
   16760:	andeq	sl, r2, ip, lsl #2
   16764:	muleq	r2, ip, r1
   16768:	push	{r4, r5, r6, lr}
   1676c:	sub	sp, sp, #32
   16770:	cmp	r1, #0
   16774:	mov	r4, r0
   16778:	ldr	r5, [sp, #48]	; 0x30
   1677c:	ldr	r6, [sp, #52]	; 0x34
   16780:	beq	16a98 <__assert_fail@plt+0x5b68>
   16784:	stm	sp, {r2, r3}
   16788:	mov	r3, r1
   1678c:	ldr	r2, [pc, #808]	; 16abc <__assert_fail@plt+0x5b8c>
   16790:	mov	r1, #1
   16794:	bl	10e88 <__fprintf_chk@plt>
   16798:	mov	r2, #5
   1679c:	ldr	r1, [pc, #796]	; 16ac0 <__assert_fail@plt+0x5b90>
   167a0:	mov	r0, #0
   167a4:	bl	10d68 <dcgettext@plt>
   167a8:	ldr	r3, [pc, #788]	; 16ac4 <__assert_fail@plt+0x5b94>
   167ac:	ldr	r2, [pc, #788]	; 16ac8 <__assert_fail@plt+0x5b98>
   167b0:	str	r3, [sp]
   167b4:	mov	r1, #1
   167b8:	mov	r3, r0
   167bc:	mov	r0, r4
   167c0:	bl	10e88 <__fprintf_chk@plt>
   167c4:	mov	r1, r4
   167c8:	mov	r0, #10
   167cc:	bl	10d5c <fputc_unlocked@plt>
   167d0:	mov	r2, #5
   167d4:	ldr	r1, [pc, #752]	; 16acc <__assert_fail@plt+0x5b9c>
   167d8:	mov	r0, #0
   167dc:	bl	10d68 <dcgettext@plt>
   167e0:	mov	r1, #1
   167e4:	ldr	r3, [pc, #740]	; 16ad0 <__assert_fail@plt+0x5ba0>
   167e8:	mov	r2, r0
   167ec:	mov	r0, r4
   167f0:	bl	10e88 <__fprintf_chk@plt>
   167f4:	mov	r1, r4
   167f8:	mov	r0, #10
   167fc:	bl	10d5c <fputc_unlocked@plt>
   16800:	cmp	r6, #9
   16804:	ldrls	pc, [pc, r6, lsl #2]
   16808:	b	16ab0 <__assert_fail@plt+0x5b80>
   1680c:	muleq	r1, r0, r8
   16810:	muleq	r1, r8, r8
   16814:	andeq	r6, r1, r4, asr #17
   16818:	strdeq	r6, [r1], -r8
   1681c:	andeq	r6, r1, r4, lsr r9
   16820:	andeq	r6, r1, r0, ror r9
   16824:	andeq	r6, r1, ip, lsr #19
   16828:	strdeq	r6, [r1], -r0
   1682c:	andeq	r6, r1, r0, asr #20
   16830:	andeq	r6, r1, r4, lsr r8
   16834:	ldr	r1, [pc, #664]	; 16ad4 <__assert_fail@plt+0x5ba4>
   16838:	mov	r2, #5
   1683c:	mov	r0, #0
   16840:	bl	10d68 <dcgettext@plt>
   16844:	ldr	ip, [r5, #32]
   16848:	ldr	r1, [r5, #28]
   1684c:	ldr	r2, [r5, #24]
   16850:	ldr	r3, [r5]
   16854:	ldr	r6, [r5, #20]
   16858:	str	ip, [sp, #28]
   1685c:	ldr	lr, [r5, #16]
   16860:	str	r1, [sp, #24]
   16864:	ldr	ip, [r5, #12]
   16868:	str	r2, [sp, #20]
   1686c:	ldr	r1, [r5, #8]
   16870:	ldr	r2, [r5, #4]
   16874:	str	r6, [sp, #16]
   16878:	stmib	sp, {r1, ip, lr}
   1687c:	mov	r1, #1
   16880:	str	r2, [sp]
   16884:	mov	r2, r0
   16888:	mov	r0, r4
   1688c:	bl	10e88 <__fprintf_chk@plt>
   16890:	add	sp, sp, #32
   16894:	pop	{r4, r5, r6, pc}
   16898:	mov	r2, #5
   1689c:	ldr	r1, [pc, #564]	; 16ad8 <__assert_fail@plt+0x5ba8>
   168a0:	mov	r0, #0
   168a4:	bl	10d68 <dcgettext@plt>
   168a8:	ldr	r3, [r5]
   168ac:	mov	r1, #1
   168b0:	mov	r2, r0
   168b4:	mov	r0, r4
   168b8:	add	sp, sp, #32
   168bc:	pop	{r4, r5, r6, lr}
   168c0:	b	10e88 <__fprintf_chk@plt>
   168c4:	mov	r2, #5
   168c8:	ldr	r1, [pc, #524]	; 16adc <__assert_fail@plt+0x5bac>
   168cc:	mov	r0, #0
   168d0:	bl	10d68 <dcgettext@plt>
   168d4:	ldr	r2, [r5, #4]
   168d8:	ldr	r3, [r5]
   168dc:	mov	r1, #1
   168e0:	str	r2, [sp, #48]	; 0x30
   168e4:	mov	r2, r0
   168e8:	mov	r0, r4
   168ec:	add	sp, sp, #32
   168f0:	pop	{r4, r5, r6, lr}
   168f4:	b	10e88 <__fprintf_chk@plt>
   168f8:	mov	r2, #5
   168fc:	ldr	r1, [pc, #476]	; 16ae0 <__assert_fail@plt+0x5bb0>
   16900:	mov	r0, #0
   16904:	bl	10d68 <dcgettext@plt>
   16908:	ldr	r1, [r5, #8]
   1690c:	ldr	r2, [r5, #4]
   16910:	ldr	r3, [r5]
   16914:	str	r1, [sp, #52]	; 0x34
   16918:	str	r2, [sp, #48]	; 0x30
   1691c:	mov	r1, #1
   16920:	mov	r2, r0
   16924:	mov	r0, r4
   16928:	add	sp, sp, #32
   1692c:	pop	{r4, r5, r6, lr}
   16930:	b	10e88 <__fprintf_chk@plt>
   16934:	mov	r2, #5
   16938:	ldr	r1, [pc, #420]	; 16ae4 <__assert_fail@plt+0x5bb4>
   1693c:	mov	r0, #0
   16940:	bl	10d68 <dcgettext@plt>
   16944:	ldr	r1, [r5, #8]
   16948:	ldr	ip, [r5, #12]
   1694c:	ldr	r2, [r5, #4]
   16950:	ldr	r3, [r5]
   16954:	stmib	sp, {r1, ip}
   16958:	str	r2, [sp]
   1695c:	mov	r1, #1
   16960:	mov	r2, r0
   16964:	mov	r0, r4
   16968:	bl	10e88 <__fprintf_chk@plt>
   1696c:	b	16890 <__assert_fail@plt+0x5960>
   16970:	mov	r2, #5
   16974:	ldr	r1, [pc, #364]	; 16ae8 <__assert_fail@plt+0x5bb8>
   16978:	mov	r0, #0
   1697c:	bl	10d68 <dcgettext@plt>
   16980:	add	r1, r5, #8
   16984:	ldr	r2, [r5, #4]
   16988:	ldm	r1, {r1, ip, lr}
   1698c:	ldr	r3, [r5]
   16990:	str	r2, [sp]
   16994:	stmib	sp, {r1, ip, lr}
   16998:	mov	r1, #1
   1699c:	mov	r2, r0
   169a0:	mov	r0, r4
   169a4:	bl	10e88 <__fprintf_chk@plt>
   169a8:	b	16890 <__assert_fail@plt+0x5960>
   169ac:	mov	r2, #5
   169b0:	ldr	r1, [pc, #308]	; 16aec <__assert_fail@plt+0x5bbc>
   169b4:	mov	r0, #0
   169b8:	bl	10d68 <dcgettext@plt>
   169bc:	add	r1, r5, #8
   169c0:	ldr	r2, [r5, #4]
   169c4:	ldm	r1, {r1, ip, lr}
   169c8:	ldr	r6, [r5, #20]
   169cc:	ldr	r3, [r5]
   169d0:	stmib	sp, {r1, ip, lr}
   169d4:	mov	r1, #1
   169d8:	str	r2, [sp]
   169dc:	str	r6, [sp, #16]
   169e0:	mov	r2, r0
   169e4:	mov	r0, r4
   169e8:	bl	10e88 <__fprintf_chk@plt>
   169ec:	b	16890 <__assert_fail@plt+0x5960>
   169f0:	mov	r2, #5
   169f4:	ldr	r1, [pc, #244]	; 16af0 <__assert_fail@plt+0x5bc0>
   169f8:	mov	r0, #0
   169fc:	bl	10d68 <dcgettext@plt>
   16a00:	ldr	r2, [r5, #24]
   16a04:	ldr	r3, [r5]
   16a08:	ldr	r6, [r5, #20]
   16a0c:	ldr	lr, [r5, #16]
   16a10:	ldr	ip, [r5, #12]
   16a14:	str	r2, [sp, #20]
   16a18:	ldr	r1, [r5, #8]
   16a1c:	ldr	r2, [r5, #4]
   16a20:	str	r6, [sp, #16]
   16a24:	stmib	sp, {r1, ip, lr}
   16a28:	mov	r1, #1
   16a2c:	str	r2, [sp]
   16a30:	mov	r2, r0
   16a34:	mov	r0, r4
   16a38:	bl	10e88 <__fprintf_chk@plt>
   16a3c:	b	16890 <__assert_fail@plt+0x5960>
   16a40:	mov	r2, #5
   16a44:	ldr	r1, [pc, #168]	; 16af4 <__assert_fail@plt+0x5bc4>
   16a48:	mov	r0, #0
   16a4c:	bl	10d68 <dcgettext@plt>
   16a50:	ldr	r1, [r5, #28]
   16a54:	ldr	r2, [r5, #24]
   16a58:	ldr	r3, [r5]
   16a5c:	ldr	r6, [r5, #20]
   16a60:	ldr	lr, [r5, #16]
   16a64:	str	r1, [sp, #24]
   16a68:	ldr	ip, [r5, #12]
   16a6c:	str	r2, [sp, #20]
   16a70:	ldr	r1, [r5, #8]
   16a74:	ldr	r2, [r5, #4]
   16a78:	str	r6, [sp, #16]
   16a7c:	stmib	sp, {r1, ip, lr}
   16a80:	mov	r1, #1
   16a84:	str	r2, [sp]
   16a88:	mov	r2, r0
   16a8c:	mov	r0, r4
   16a90:	bl	10e88 <__fprintf_chk@plt>
   16a94:	b	16890 <__assert_fail@plt+0x5960>
   16a98:	str	r3, [sp]
   16a9c:	mov	r1, #1
   16aa0:	mov	r3, r2
   16aa4:	ldr	r2, [pc, #76]	; 16af8 <__assert_fail@plt+0x5bc8>
   16aa8:	bl	10e88 <__fprintf_chk@plt>
   16aac:	b	16798 <__assert_fail@plt+0x5868>
   16ab0:	mov	r2, #5
   16ab4:	ldr	r1, [pc, #64]	; 16afc <__assert_fail@plt+0x5bcc>
   16ab8:	b	1683c <__assert_fail@plt+0x590c>
   16abc:	andeq	r9, r1, ip, asr #12
   16ac0:	andeq	r9, r1, r0, ror #12
   16ac4:	andeq	r0, r0, r6, ror #15
   16ac8:	andeq	r9, r1, r8, lsr r9
   16acc:	andeq	r9, r1, r4, ror #12
   16ad0:	andeq	r9, r1, r0, lsl r7
   16ad4:	andeq	r9, r1, r0, asr #16
   16ad8:	andeq	r9, r1, r4, lsr r7
   16adc:	andeq	r9, r1, r4, asr #14
   16ae0:	andeq	r9, r1, ip, asr r7
   16ae4:	andeq	r9, r1, r8, ror r7
   16ae8:	muleq	r1, r8, r7
   16aec:			; <UNDEFINED> instruction: 0x000197bc
   16af0:	andeq	r9, r1, r4, ror #15
   16af4:	andeq	r9, r1, r0, lsl r8
   16af8:	andeq	r9, r1, r8, asr r6
   16afc:	andeq	r9, r1, r4, ror r8
   16b00:	push	{r4, r5, lr}
   16b04:	sub	sp, sp, #12
   16b08:	ldr	r5, [sp, #24]
   16b0c:	ldr	ip, [r5]
   16b10:	cmp	ip, #0
   16b14:	beq	16b30 <__assert_fail@plt+0x5c00>
   16b18:	mov	lr, r5
   16b1c:	mov	ip, #0
   16b20:	ldr	r4, [lr, #4]!
   16b24:	add	ip, ip, #1
   16b28:	cmp	r4, #0
   16b2c:	bne	16b20 <__assert_fail@plt+0x5bf0>
   16b30:	stm	sp, {r5, ip}
   16b34:	bl	16768 <__assert_fail@plt+0x5838>
   16b38:	add	sp, sp, #12
   16b3c:	pop	{r4, r5, pc}
   16b40:	push	{r4, r5, lr}
   16b44:	sub	sp, sp, #76	; 0x4c
   16b48:	mov	r5, r0
   16b4c:	ldr	ip, [sp, #88]	; 0x58
   16b50:	ldr	r0, [ip]
   16b54:	cmp	r0, #0
   16b58:	str	r0, [sp, #32]
   16b5c:	beq	16f30 <__assert_fail@plt+0x6000>
   16b60:	ldr	r0, [ip, #4]
   16b64:	cmp	r0, #0
   16b68:	str	r0, [sp, #36]	; 0x24
   16b6c:	beq	16f38 <__assert_fail@plt+0x6008>
   16b70:	ldr	r0, [ip, #8]
   16b74:	cmp	r0, #0
   16b78:	str	r0, [sp, #40]	; 0x28
   16b7c:	beq	16f40 <__assert_fail@plt+0x6010>
   16b80:	ldr	r0, [ip, #12]
   16b84:	cmp	r0, #0
   16b88:	str	r0, [sp, #44]	; 0x2c
   16b8c:	beq	16f48 <__assert_fail@plt+0x6018>
   16b90:	ldr	r0, [ip, #16]
   16b94:	cmp	r0, #0
   16b98:	str	r0, [sp, #48]	; 0x30
   16b9c:	beq	16f50 <__assert_fail@plt+0x6020>
   16ba0:	ldr	r0, [ip, #20]
   16ba4:	cmp	r0, #0
   16ba8:	str	r0, [sp, #52]	; 0x34
   16bac:	beq	16f58 <__assert_fail@plt+0x6028>
   16bb0:	ldr	r0, [ip, #24]
   16bb4:	cmp	r0, #0
   16bb8:	str	r0, [sp, #56]	; 0x38
   16bbc:	beq	16f60 <__assert_fail@plt+0x6030>
   16bc0:	ldr	r0, [ip, #28]
   16bc4:	cmp	r0, #0
   16bc8:	str	r0, [sp, #60]	; 0x3c
   16bcc:	beq	16f68 <__assert_fail@plt+0x6038>
   16bd0:	ldr	r0, [ip, #32]
   16bd4:	cmp	r0, #0
   16bd8:	str	r0, [sp, #64]	; 0x40
   16bdc:	beq	16f70 <__assert_fail@plt+0x6040>
   16be0:	ldr	r0, [ip, #36]	; 0x24
   16be4:	cmp	r0, #0
   16be8:	movne	r4, #10
   16bec:	moveq	r4, #9
   16bf0:	cmp	r1, #0
   16bf4:	beq	16f08 <__assert_fail@plt+0x5fd8>
   16bf8:	stm	sp, {r2, r3}
   16bfc:	mov	r0, r5
   16c00:	mov	r3, r1
   16c04:	ldr	r2, [pc, #876]	; 16f78 <__assert_fail@plt+0x6048>
   16c08:	mov	r1, #1
   16c0c:	bl	10e88 <__fprintf_chk@plt>
   16c10:	mov	r2, #5
   16c14:	ldr	r1, [pc, #864]	; 16f7c <__assert_fail@plt+0x604c>
   16c18:	mov	r0, #0
   16c1c:	bl	10d68 <dcgettext@plt>
   16c20:	ldr	r3, [pc, #856]	; 16f80 <__assert_fail@plt+0x6050>
   16c24:	ldr	r2, [pc, #856]	; 16f84 <__assert_fail@plt+0x6054>
   16c28:	str	r3, [sp]
   16c2c:	mov	r1, #1
   16c30:	mov	r3, r0
   16c34:	mov	r0, r5
   16c38:	bl	10e88 <__fprintf_chk@plt>
   16c3c:	mov	r1, r5
   16c40:	mov	r0, #10
   16c44:	bl	10d5c <fputc_unlocked@plt>
   16c48:	mov	r2, #5
   16c4c:	ldr	r1, [pc, #820]	; 16f88 <__assert_fail@plt+0x6058>
   16c50:	mov	r0, #0
   16c54:	bl	10d68 <dcgettext@plt>
   16c58:	mov	r1, #1
   16c5c:	ldr	r3, [pc, #808]	; 16f8c <__assert_fail@plt+0x605c>
   16c60:	mov	r2, r0
   16c64:	mov	r0, r5
   16c68:	bl	10e88 <__fprintf_chk@plt>
   16c6c:	mov	r1, r5
   16c70:	mov	r0, #10
   16c74:	bl	10d5c <fputc_unlocked@plt>
   16c78:	cmp	r4, #9
   16c7c:	ldrls	pc, [pc, r4, lsl #2]
   16c80:	b	16f24 <__assert_fail@plt+0x5ff4>
   16c84:	andeq	r6, r1, r8, lsl #26
   16c88:	andeq	r6, r1, r0, lsl sp
   16c8c:	andeq	r6, r1, ip, lsr sp
   16c90:	andeq	r6, r1, r0, ror sp
   16c94:	andeq	r6, r1, r8, lsr #27
   16c98:	andeq	r6, r1, r4, ror #27
   16c9c:	andeq	r6, r1, r0, lsr #28
   16ca0:	andeq	r6, r1, r4, ror #28
   16ca4:			; <UNDEFINED> instruction: 0x00016eb0
   16ca8:	andeq	r6, r1, ip, lsr #25
   16cac:	ldr	r1, [pc, #732]	; 16f90 <__assert_fail@plt+0x6060>
   16cb0:	mov	r2, #5
   16cb4:	mov	r0, #0
   16cb8:	bl	10d68 <dcgettext@plt>
   16cbc:	ldr	ip, [sp, #64]	; 0x40
   16cc0:	ldr	r1, [sp, #60]	; 0x3c
   16cc4:	ldr	r2, [sp, #56]	; 0x38
   16cc8:	ldr	lr, [sp, #48]	; 0x30
   16ccc:	str	ip, [sp, #28]
   16cd0:	str	r1, [sp, #24]
   16cd4:	ldr	ip, [sp, #44]	; 0x2c
   16cd8:	ldr	r1, [sp, #40]	; 0x28
   16cdc:	ldr	r4, [sp, #52]	; 0x34
   16ce0:	str	r2, [sp, #20]
   16ce4:	ldr	r2, [sp, #36]	; 0x24
   16ce8:	stmib	sp, {r1, ip, lr}
   16cec:	mov	r1, #1
   16cf0:	str	r2, [sp]
   16cf4:	ldr	r3, [sp, #32]
   16cf8:	str	r4, [sp, #16]
   16cfc:	mov	r2, r0
   16d00:	mov	r0, r5
   16d04:	bl	10e88 <__fprintf_chk@plt>
   16d08:	add	sp, sp, #76	; 0x4c
   16d0c:	pop	{r4, r5, pc}
   16d10:	mov	r2, #5
   16d14:	ldr	r1, [pc, #632]	; 16f94 <__assert_fail@plt+0x6064>
   16d18:	mov	r0, #0
   16d1c:	bl	10d68 <dcgettext@plt>
   16d20:	ldr	r3, [sp, #32]
   16d24:	mov	r1, #1
   16d28:	mov	r2, r0
   16d2c:	mov	r0, r5
   16d30:	add	sp, sp, #76	; 0x4c
   16d34:	pop	{r4, r5, lr}
   16d38:	b	10e88 <__fprintf_chk@plt>
   16d3c:	mov	r2, #5
   16d40:	ldr	r1, [pc, #592]	; 16f98 <__assert_fail@plt+0x6068>
   16d44:	mov	r0, #0
   16d48:	bl	10d68 <dcgettext@plt>
   16d4c:	ldr	r2, [sp, #36]	; 0x24
   16d50:	ldr	r3, [sp, #32]
   16d54:	str	r2, [sp, #88]	; 0x58
   16d58:	mov	r1, #1
   16d5c:	mov	r2, r0
   16d60:	mov	r0, r5
   16d64:	add	sp, sp, #76	; 0x4c
   16d68:	pop	{r4, r5, lr}
   16d6c:	b	10e88 <__fprintf_chk@plt>
   16d70:	mov	r2, #5
   16d74:	ldr	r1, [pc, #544]	; 16f9c <__assert_fail@plt+0x606c>
   16d78:	mov	r0, #0
   16d7c:	bl	10d68 <dcgettext@plt>
   16d80:	ldr	r1, [sp, #40]	; 0x28
   16d84:	ldr	r2, [sp, #36]	; 0x24
   16d88:	str	r1, [sp, #4]
   16d8c:	str	r2, [sp]
   16d90:	ldr	r3, [sp, #32]
   16d94:	mov	r1, #1
   16d98:	mov	r2, r0
   16d9c:	mov	r0, r5
   16da0:	bl	10e88 <__fprintf_chk@plt>
   16da4:	b	16d08 <__assert_fail@plt+0x5dd8>
   16da8:	mov	r2, #5
   16dac:	ldr	r1, [pc, #492]	; 16fa0 <__assert_fail@plt+0x6070>
   16db0:	mov	r0, #0
   16db4:	bl	10d68 <dcgettext@plt>
   16db8:	ldr	r1, [sp, #40]	; 0x28
   16dbc:	ldr	ip, [sp, #44]	; 0x2c
   16dc0:	ldr	r2, [sp, #36]	; 0x24
   16dc4:	ldr	r3, [sp, #32]
   16dc8:	stmib	sp, {r1, ip}
   16dcc:	str	r2, [sp]
   16dd0:	mov	r1, #1
   16dd4:	mov	r2, r0
   16dd8:	mov	r0, r5
   16ddc:	bl	10e88 <__fprintf_chk@plt>
   16de0:	b	16d08 <__assert_fail@plt+0x5dd8>
   16de4:	mov	r2, #5
   16de8:	ldr	r1, [pc, #436]	; 16fa4 <__assert_fail@plt+0x6074>
   16dec:	mov	r0, #0
   16df0:	bl	10d68 <dcgettext@plt>
   16df4:	add	r1, sp, #40	; 0x28
   16df8:	ldr	r2, [sp, #36]	; 0x24
   16dfc:	ldm	r1, {r1, ip, lr}
   16e00:	ldr	r3, [sp, #32]
   16e04:	str	r2, [sp]
   16e08:	stmib	sp, {r1, ip, lr}
   16e0c:	mov	r1, #1
   16e10:	mov	r2, r0
   16e14:	mov	r0, r5
   16e18:	bl	10e88 <__fprintf_chk@plt>
   16e1c:	b	16d08 <__assert_fail@plt+0x5dd8>
   16e20:	mov	r2, #5
   16e24:	ldr	r1, [pc, #380]	; 16fa8 <__assert_fail@plt+0x6078>
   16e28:	mov	r0, #0
   16e2c:	bl	10d68 <dcgettext@plt>
   16e30:	add	r1, sp, #40	; 0x28
   16e34:	ldr	r2, [sp, #36]	; 0x24
   16e38:	ldm	r1, {r1, ip, lr}
   16e3c:	ldr	r4, [sp, #52]	; 0x34
   16e40:	str	r2, [sp]
   16e44:	stmib	sp, {r1, ip, lr}
   16e48:	mov	r1, #1
   16e4c:	ldr	r3, [sp, #32]
   16e50:	str	r4, [sp, #16]
   16e54:	mov	r2, r0
   16e58:	mov	r0, r5
   16e5c:	bl	10e88 <__fprintf_chk@plt>
   16e60:	b	16d08 <__assert_fail@plt+0x5dd8>
   16e64:	mov	r2, #5
   16e68:	ldr	r1, [pc, #316]	; 16fac <__assert_fail@plt+0x607c>
   16e6c:	mov	r0, #0
   16e70:	bl	10d68 <dcgettext@plt>
   16e74:	add	r1, sp, #40	; 0x28
   16e78:	ldr	r2, [sp, #56]	; 0x38
   16e7c:	ldm	r1, {r1, ip, lr}
   16e80:	ldr	r4, [sp, #52]	; 0x34
   16e84:	str	r2, [sp, #20]
   16e88:	ldr	r2, [sp, #36]	; 0x24
   16e8c:	stmib	sp, {r1, ip, lr}
   16e90:	mov	r1, #1
   16e94:	str	r2, [sp]
   16e98:	ldr	r3, [sp, #32]
   16e9c:	str	r4, [sp, #16]
   16ea0:	mov	r2, r0
   16ea4:	mov	r0, r5
   16ea8:	bl	10e88 <__fprintf_chk@plt>
   16eac:	b	16d08 <__assert_fail@plt+0x5dd8>
   16eb0:	mov	r2, #5
   16eb4:	ldr	r1, [pc, #244]	; 16fb0 <__assert_fail@plt+0x6080>
   16eb8:	mov	r0, #0
   16ebc:	bl	10d68 <dcgettext@plt>
   16ec0:	ldr	r1, [sp, #60]	; 0x3c
   16ec4:	ldr	r2, [sp, #56]	; 0x38
   16ec8:	ldr	lr, [sp, #48]	; 0x30
   16ecc:	ldr	ip, [sp, #44]	; 0x2c
   16ed0:	str	r1, [sp, #24]
   16ed4:	ldr	r1, [sp, #40]	; 0x28
   16ed8:	ldr	r4, [sp, #52]	; 0x34
   16edc:	str	r2, [sp, #20]
   16ee0:	ldr	r2, [sp, #36]	; 0x24
   16ee4:	stmib	sp, {r1, ip, lr}
   16ee8:	mov	r1, #1
   16eec:	str	r2, [sp]
   16ef0:	ldr	r3, [sp, #32]
   16ef4:	str	r4, [sp, #16]
   16ef8:	mov	r2, r0
   16efc:	mov	r0, r5
   16f00:	bl	10e88 <__fprintf_chk@plt>
   16f04:	b	16d08 <__assert_fail@plt+0x5dd8>
   16f08:	str	r3, [sp]
   16f0c:	mov	r1, #1
   16f10:	mov	r3, r2
   16f14:	mov	r0, r5
   16f18:	ldr	r2, [pc, #148]	; 16fb4 <__assert_fail@plt+0x6084>
   16f1c:	bl	10e88 <__fprintf_chk@plt>
   16f20:	b	16c10 <__assert_fail@plt+0x5ce0>
   16f24:	mov	r2, #5
   16f28:	ldr	r1, [pc, #136]	; 16fb8 <__assert_fail@plt+0x6088>
   16f2c:	b	16cb4 <__assert_fail@plt+0x5d84>
   16f30:	mov	r4, r0
   16f34:	b	16bf0 <__assert_fail@plt+0x5cc0>
   16f38:	mov	r4, #1
   16f3c:	b	16bf0 <__assert_fail@plt+0x5cc0>
   16f40:	mov	r4, #2
   16f44:	b	16bf0 <__assert_fail@plt+0x5cc0>
   16f48:	mov	r4, #3
   16f4c:	b	16bf0 <__assert_fail@plt+0x5cc0>
   16f50:	mov	r4, #4
   16f54:	b	16bf0 <__assert_fail@plt+0x5cc0>
   16f58:	mov	r4, #5
   16f5c:	b	16bf0 <__assert_fail@plt+0x5cc0>
   16f60:	mov	r4, #6
   16f64:	b	16bf0 <__assert_fail@plt+0x5cc0>
   16f68:	mov	r4, #7
   16f6c:	b	16bf0 <__assert_fail@plt+0x5cc0>
   16f70:	mov	r4, #8
   16f74:	b	16bf0 <__assert_fail@plt+0x5cc0>
   16f78:	andeq	r9, r1, ip, asr #12
   16f7c:	andeq	r9, r1, r0, ror #12
   16f80:	andeq	r0, r0, r6, ror #15
   16f84:	andeq	r9, r1, r8, lsr r9
   16f88:	andeq	r9, r1, r4, ror #12
   16f8c:	andeq	r9, r1, r0, lsl r7
   16f90:	andeq	r9, r1, r0, asr #16
   16f94:	andeq	r9, r1, r4, lsr r7
   16f98:	andeq	r9, r1, r4, asr #14
   16f9c:	andeq	r9, r1, ip, asr r7
   16fa0:	andeq	r9, r1, r8, ror r7
   16fa4:	muleq	r1, r8, r7
   16fa8:			; <UNDEFINED> instruction: 0x000197bc
   16fac:	andeq	r9, r1, r4, ror #15
   16fb0:	andeq	r9, r1, r0, lsl r8
   16fb4:	andeq	r9, r1, r8, asr r6
   16fb8:	andeq	r9, r1, r4, ror r8
   16fbc:	push	{r3}		; (str r3, [sp, #-4]!)
   16fc0:	push	{lr}		; (str lr, [sp, #-4]!)
   16fc4:	sub	sp, sp, #56	; 0x38
   16fc8:	add	r3, sp, #64	; 0x40
   16fcc:	ldr	ip, [sp, #64]	; 0x40
   16fd0:	str	r3, [sp, #12]
   16fd4:	cmp	ip, #0
   16fd8:	str	ip, [sp, #16]
   16fdc:	beq	17074 <__assert_fail@plt+0x6144>
   16fe0:	ldr	ip, [sp, #68]	; 0x44
   16fe4:	cmp	ip, #0
   16fe8:	str	ip, [sp, #20]
   16fec:	beq	17094 <__assert_fail@plt+0x6164>
   16ff0:	ldr	ip, [sp, #72]	; 0x48
   16ff4:	cmp	ip, #0
   16ff8:	str	ip, [sp, #24]
   16ffc:	beq	1709c <__assert_fail@plt+0x616c>
   17000:	ldr	ip, [sp, #76]	; 0x4c
   17004:	cmp	ip, #0
   17008:	str	ip, [sp, #28]
   1700c:	beq	170a4 <__assert_fail@plt+0x6174>
   17010:	ldr	ip, [sp, #80]	; 0x50
   17014:	cmp	ip, #0
   17018:	str	ip, [sp, #32]
   1701c:	beq	170ac <__assert_fail@plt+0x617c>
   17020:	ldr	ip, [sp, #84]	; 0x54
   17024:	cmp	ip, #0
   17028:	str	ip, [sp, #36]	; 0x24
   1702c:	beq	170b4 <__assert_fail@plt+0x6184>
   17030:	ldr	ip, [sp, #88]	; 0x58
   17034:	cmp	ip, #0
   17038:	str	ip, [sp, #40]	; 0x28
   1703c:	beq	170bc <__assert_fail@plt+0x618c>
   17040:	ldr	ip, [sp, #92]	; 0x5c
   17044:	cmp	ip, #0
   17048:	str	ip, [sp, #44]	; 0x2c
   1704c:	beq	170c4 <__assert_fail@plt+0x6194>
   17050:	ldr	ip, [sp, #96]	; 0x60
   17054:	cmp	ip, #0
   17058:	str	ip, [sp, #48]	; 0x30
   1705c:	beq	170cc <__assert_fail@plt+0x619c>
   17060:	ldr	ip, [sp, #100]	; 0x64
   17064:	cmp	ip, #0
   17068:	str	ip, [sp, #52]	; 0x34
   1706c:	movne	ip, #10
   17070:	moveq	ip, #9
   17074:	add	r3, sp, #16
   17078:	stm	sp, {r3, ip}
   1707c:	ldr	r3, [sp, #60]	; 0x3c
   17080:	bl	16768 <__assert_fail@plt+0x5838>
   17084:	add	sp, sp, #56	; 0x38
   17088:	pop	{lr}		; (ldr lr, [sp], #4)
   1708c:	add	sp, sp, #4
   17090:	bx	lr
   17094:	mov	ip, #1
   17098:	b	17074 <__assert_fail@plt+0x6144>
   1709c:	mov	ip, #2
   170a0:	b	17074 <__assert_fail@plt+0x6144>
   170a4:	mov	ip, #3
   170a8:	b	17074 <__assert_fail@plt+0x6144>
   170ac:	mov	ip, #4
   170b0:	b	17074 <__assert_fail@plt+0x6144>
   170b4:	mov	ip, #5
   170b8:	b	17074 <__assert_fail@plt+0x6144>
   170bc:	mov	ip, #6
   170c0:	b	17074 <__assert_fail@plt+0x6144>
   170c4:	mov	ip, #7
   170c8:	b	17074 <__assert_fail@plt+0x6144>
   170cc:	mov	ip, #8
   170d0:	b	17074 <__assert_fail@plt+0x6144>
   170d4:	ldr	r3, [pc, #116]	; 17150 <__assert_fail@plt+0x6220>
   170d8:	push	{r4, lr}
   170dc:	mov	r0, #10
   170e0:	ldr	r1, [r3]
   170e4:	bl	10d5c <fputc_unlocked@plt>
   170e8:	mov	r2, #5
   170ec:	ldr	r1, [pc, #96]	; 17154 <__assert_fail@plt+0x6224>
   170f0:	mov	r0, #0
   170f4:	bl	10d68 <dcgettext@plt>
   170f8:	ldr	r2, [pc, #88]	; 17158 <__assert_fail@plt+0x6228>
   170fc:	mov	r1, r0
   17100:	mov	r0, #1
   17104:	bl	10e70 <__printf_chk@plt>
   17108:	mov	r2, #5
   1710c:	ldr	r1, [pc, #72]	; 1715c <__assert_fail@plt+0x622c>
   17110:	mov	r0, #0
   17114:	bl	10d68 <dcgettext@plt>
   17118:	ldr	r3, [pc, #64]	; 17160 <__assert_fail@plt+0x6230>
   1711c:	ldr	r2, [pc, #64]	; 17164 <__assert_fail@plt+0x6234>
   17120:	mov	r1, r0
   17124:	mov	r0, #1
   17128:	bl	10e70 <__printf_chk@plt>
   1712c:	mov	r2, #5
   17130:	ldr	r1, [pc, #48]	; 17168 <__assert_fail@plt+0x6238>
   17134:	mov	r0, #0
   17138:	bl	10d68 <dcgettext@plt>
   1713c:	ldr	r2, [pc, #40]	; 1716c <__assert_fail@plt+0x623c>
   17140:	pop	{r4, lr}
   17144:	mov	r1, r0
   17148:	mov	r0, #1
   1714c:	b	10e70 <__printf_chk@plt>
   17150:	andeq	sl, r2, r4, asr r1
   17154:			; <UNDEFINED> instruction: 0x000198b0
   17158:	andeq	r9, r1, r4, asr #17
   1715c:	ldrdeq	r9, [r1], -ip
   17160:	andeq	r9, r1, r8, lsl #4
   17164:	andeq	r9, r1, r0, lsr r2
   17168:	strdeq	r9, [r1], -r0
   1716c:	andeq	r9, r1, r8, lsl r9
   17170:	push	{r4, r5, r6, lr}
   17174:	mov	r6, r0
   17178:	mov	r5, r1
   1717c:	mov	r4, r2
   17180:	bl	18598 <__assert_fail@plt+0x7668>
   17184:	cmp	r0, #0
   17188:	popne	{r4, r5, r6, pc}
   1718c:	cmp	r6, #0
   17190:	beq	171a0 <__assert_fail@plt+0x6270>
   17194:	cmp	r5, #0
   17198:	cmpne	r4, #0
   1719c:	popeq	{r4, r5, r6, pc}
   171a0:	bl	177ec <__assert_fail@plt+0x68bc>
   171a4:	push	{r4, lr}
   171a8:	bl	1840c <__assert_fail@plt+0x74dc>
   171ac:	cmp	r0, #0
   171b0:	popne	{r4, pc}
   171b4:	bl	177ec <__assert_fail@plt+0x68bc>
   171b8:	push	{r4, lr}
   171bc:	bl	1840c <__assert_fail@plt+0x74dc>
   171c0:	cmp	r0, #0
   171c4:	popne	{r4, pc}
   171c8:	bl	177ec <__assert_fail@plt+0x68bc>
   171cc:	push	{r4, lr}
   171d0:	bl	1840c <__assert_fail@plt+0x74dc>
   171d4:	cmp	r0, #0
   171d8:	popne	{r4, pc}
   171dc:	bl	177ec <__assert_fail@plt+0x68bc>
   171e0:	push	{r4, r5, r6, lr}
   171e4:	mov	r5, r0
   171e8:	mov	r4, r1
   171ec:	bl	18438 <__assert_fail@plt+0x7508>
   171f0:	cmp	r0, #0
   171f4:	popne	{r4, r5, r6, pc}
   171f8:	adds	r4, r4, #0
   171fc:	movne	r4, #1
   17200:	cmp	r5, #0
   17204:	orreq	r4, r4, #1
   17208:	cmp	r4, #0
   1720c:	popeq	{r4, r5, r6, pc}
   17210:	bl	177ec <__assert_fail@plt+0x68bc>
   17214:	push	{r4, lr}
   17218:	cmp	r1, #0
   1721c:	orreq	r1, r1, #1
   17220:	bl	18438 <__assert_fail@plt+0x7508>
   17224:	cmp	r0, #0
   17228:	popne	{r4, pc}
   1722c:	bl	177ec <__assert_fail@plt+0x68bc>
   17230:	push	{r4, r5, r6, lr}
   17234:	mov	r6, r0
   17238:	mov	r5, r1
   1723c:	mov	r4, r2
   17240:	bl	18598 <__assert_fail@plt+0x7668>
   17244:	cmp	r0, #0
   17248:	popne	{r4, r5, r6, pc}
   1724c:	cmp	r6, #0
   17250:	beq	17260 <__assert_fail@plt+0x6330>
   17254:	cmp	r5, #0
   17258:	cmpne	r4, #0
   1725c:	popeq	{r4, r5, r6, pc}
   17260:	bl	177ec <__assert_fail@plt+0x68bc>
   17264:	cmp	r2, #0
   17268:	cmpne	r1, #0
   1726c:	moveq	r2, #1
   17270:	moveq	r1, r2
   17274:	push	{r4, lr}
   17278:	bl	18598 <__assert_fail@plt+0x7668>
   1727c:	cmp	r0, #0
   17280:	popne	{r4, pc}
   17284:	bl	177ec <__assert_fail@plt+0x68bc>
   17288:	push	{r4, lr}
   1728c:	mov	r2, r1
   17290:	mov	r1, r0
   17294:	mov	r0, #0
   17298:	bl	18598 <__assert_fail@plt+0x7668>
   1729c:	cmp	r0, #0
   172a0:	popne	{r4, pc}
   172a4:	bl	177ec <__assert_fail@plt+0x68bc>
   172a8:	cmp	r1, #0
   172ac:	cmpne	r0, #0
   172b0:	moveq	r2, #1
   172b4:	movne	r2, r1
   172b8:	moveq	r1, r2
   172bc:	movne	r1, r0
   172c0:	push	{r4, lr}
   172c4:	mov	r0, #0
   172c8:	bl	18598 <__assert_fail@plt+0x7668>
   172cc:	cmp	r0, #0
   172d0:	popne	{r4, pc}
   172d4:	bl	177ec <__assert_fail@plt+0x68bc>
   172d8:	cmp	r0, #0
   172dc:	push	{r4, r5, r6, lr}
   172e0:	mov	r5, r1
   172e4:	ldr	r4, [r1]
   172e8:	beq	17324 <__assert_fail@plt+0x63f4>
   172ec:	lsr	r2, r4, #1
   172f0:	add	r3, r2, #1
   172f4:	mvn	r3, r3
   172f8:	cmp	r4, r3
   172fc:	bhi	17340 <__assert_fail@plt+0x6410>
   17300:	add	r4, r4, #1
   17304:	add	r4, r4, r2
   17308:	mov	r1, r4
   1730c:	mov	r2, #1
   17310:	bl	18598 <__assert_fail@plt+0x7668>
   17314:	cmp	r0, #0
   17318:	beq	17344 <__assert_fail@plt+0x6414>
   1731c:	str	r4, [r5]
   17320:	pop	{r4, r5, r6, pc}
   17324:	cmp	r4, #0
   17328:	moveq	r4, #64	; 0x40
   1732c:	mov	r1, r4
   17330:	mov	r2, #1
   17334:	bl	18598 <__assert_fail@plt+0x7668>
   17338:	cmp	r0, #0
   1733c:	bne	1731c <__assert_fail@plt+0x63ec>
   17340:	bl	177ec <__assert_fail@plt+0x68bc>
   17344:	cmp	r4, #0
   17348:	bne	17340 <__assert_fail@plt+0x6410>
   1734c:	str	r4, [r5]
   17350:	pop	{r4, r5, r6, pc}
   17354:	cmp	r0, #0
   17358:	push	{r4, r5, r6, lr}
   1735c:	mov	r5, r1
   17360:	ldr	r4, [r1]
   17364:	mov	r6, r2
   17368:	beq	173ac <__assert_fail@plt+0x647c>
   1736c:	lsr	r1, r4, #1
   17370:	add	r3, r1, #1
   17374:	mvn	r3, r3
   17378:	cmp	r4, r3
   1737c:	bhi	173e4 <__assert_fail@plt+0x64b4>
   17380:	add	r4, r4, #1
   17384:	add	r4, r4, r1
   17388:	mov	r1, r4
   1738c:	bl	18598 <__assert_fail@plt+0x7668>
   17390:	cmp	r0, #0
   17394:	bne	173a4 <__assert_fail@plt+0x6474>
   17398:	cmp	r4, #0
   1739c:	cmpne	r6, #0
   173a0:	bne	173e4 <__assert_fail@plt+0x64b4>
   173a4:	str	r4, [r5]
   173a8:	pop	{r4, r5, r6, pc}
   173ac:	cmp	r4, #0
   173b0:	bne	173cc <__assert_fail@plt+0x649c>
   173b4:	mov	r1, r2
   173b8:	mov	r0, #64	; 0x40
   173bc:	bl	186d8 <__assert_fail@plt+0x77a8>
   173c0:	cmp	r0, #0
   173c4:	movne	r4, r0
   173c8:	addeq	r4, r0, #1
   173cc:	mov	r2, r6
   173d0:	mov	r1, r4
   173d4:	mov	r0, #0
   173d8:	bl	18598 <__assert_fail@plt+0x7668>
   173dc:	cmp	r0, #0
   173e0:	bne	173a4 <__assert_fail@plt+0x6474>
   173e4:	bl	177ec <__assert_fail@plt+0x68bc>
   173e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173ec:	sub	sp, sp, #12
   173f0:	ldr	r6, [r1]
   173f4:	mov	r8, r1
   173f8:	mov	r9, r0
   173fc:	asrs	r4, r6, #1
   17400:	mov	sl, r2
   17404:	mov	fp, r3
   17408:	ldr	r7, [sp, #48]	; 0x30
   1740c:	bmi	17588 <__assert_fail@plt+0x6658>
   17410:	mvn	r1, #-2147483648	; 0x80000000
   17414:	sub	r1, r1, r4
   17418:	cmp	r6, r1
   1741c:	movle	r1, #0
   17420:	movgt	r1, #1
   17424:	mvn	r3, fp
   17428:	cmp	r1, #0
   1742c:	addeq	r4, r4, r6
   17430:	mvnne	r4, #-2147483648	; 0x80000000
   17434:	lsr	r3, r3, #31
   17438:	cmp	fp, r4
   1743c:	movge	r2, #0
   17440:	andlt	r2, r3, #1
   17444:	cmp	r2, #0
   17448:	beq	17538 <__assert_fail@plt+0x6608>
   1744c:	cmp	r7, #0
   17450:	blt	17620 <__assert_fail@plt+0x66f0>
   17454:	bne	17618 <__assert_fail@plt+0x66e8>
   17458:	mov	r5, #64	; 0x40
   1745c:	mov	r1, r7
   17460:	mov	r0, r5
   17464:	str	r3, [sp, #4]
   17468:	bl	188e4 <__assert_fail@plt+0x79b4>
   1746c:	mov	r1, r7
   17470:	mov	r4, r0
   17474:	mov	r0, r5
   17478:	bl	18b04 <__assert_fail@plt+0x7bd4>
   1747c:	ldr	r3, [sp, #4]
   17480:	sub	r5, r5, r1
   17484:	cmp	r9, #0
   17488:	sub	r2, r4, r6
   1748c:	streq	r9, [r8]
   17490:	cmp	r2, sl
   17494:	bge	17518 <__assert_fail@plt+0x65e8>
   17498:	cmp	sl, #0
   1749c:	blt	175b8 <__assert_fail@plt+0x6688>
   174a0:	cmp	r6, #0
   174a4:	blt	174c4 <__assert_fail@plt+0x6594>
   174a8:	mvn	r2, #-2147483648	; 0x80000000
   174ac:	sub	r2, r2, sl
   174b0:	cmp	r6, r2
   174b4:	movle	r2, #0
   174b8:	movgt	r2, #1
   174bc:	cmp	r2, #0
   174c0:	bne	175b4 <__assert_fail@plt+0x6684>
   174c4:	add	r6, r6, sl
   174c8:	cmp	fp, r6
   174cc:	movge	r3, #0
   174d0:	andlt	r3, r3, #1
   174d4:	cmp	r3, #0
   174d8:	mov	r4, r6
   174dc:	bne	175b4 <__assert_fail@plt+0x6684>
   174e0:	cmp	r7, #0
   174e4:	blt	175cc <__assert_fail@plt+0x669c>
   174e8:	beq	17514 <__assert_fail@plt+0x65e4>
   174ec:	cmp	r6, #0
   174f0:	blt	17670 <__assert_fail@plt+0x6740>
   174f4:	mov	r1, r7
   174f8:	mvn	r0, #-2147483648	; 0x80000000
   174fc:	bl	188e4 <__assert_fail@plt+0x79b4>
   17500:	cmp	r6, r0
   17504:	movle	r0, #0
   17508:	movgt	r0, #1
   1750c:	cmp	r0, #0
   17510:	bne	175b4 <__assert_fail@plt+0x6684>
   17514:	mul	r5, r6, r7
   17518:	mov	r1, r5
   1751c:	mov	r0, r9
   17520:	bl	18438 <__assert_fail@plt+0x7508>
   17524:	cmp	r0, #0
   17528:	beq	1759c <__assert_fail@plt+0x666c>
   1752c:	str	r4, [r8]
   17530:	add	sp, sp, #12
   17534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17538:	cmp	r7, #0
   1753c:	blt	175f8 <__assert_fail@plt+0x66c8>
   17540:	beq	17458 <__assert_fail@plt+0x6528>
   17544:	cmp	r4, #0
   17548:	blt	17628 <__assert_fail@plt+0x66f8>
   1754c:	mov	r1, r7
   17550:	mvn	r0, #-2147483648	; 0x80000000
   17554:	str	r3, [sp, #4]
   17558:	bl	188e4 <__assert_fail@plt+0x79b4>
   1755c:	ldr	r3, [sp, #4]
   17560:	cmp	r0, r4
   17564:	movge	r0, #0
   17568:	movlt	r0, #1
   1756c:	cmp	r0, #0
   17570:	mvnne	r5, #-2147483648	; 0x80000000
   17574:	bne	1745c <__assert_fail@plt+0x652c>
   17578:	mul	r5, r7, r4
   1757c:	cmp	r5, #63	; 0x3f
   17580:	bgt	17484 <__assert_fail@plt+0x6554>
   17584:	b	17458 <__assert_fail@plt+0x6528>
   17588:	rsb	r1, r4, #-2147483648	; 0x80000000
   1758c:	cmp	r6, r1
   17590:	movge	r1, #0
   17594:	movlt	r1, #1
   17598:	b	17424 <__assert_fail@plt+0x64f4>
   1759c:	adds	r5, r5, #0
   175a0:	movne	r5, #1
   175a4:	cmp	r9, #0
   175a8:	orreq	r5, r5, #1
   175ac:	cmp	r5, #0
   175b0:	beq	1752c <__assert_fail@plt+0x65fc>
   175b4:	bl	177ec <__assert_fail@plt+0x68bc>
   175b8:	rsb	r2, sl, #-2147483648	; 0x80000000
   175bc:	cmp	r6, r2
   175c0:	movge	r2, #0
   175c4:	movlt	r2, #1
   175c8:	b	174bc <__assert_fail@plt+0x658c>
   175cc:	cmp	r6, #0
   175d0:	blt	17654 <__assert_fail@plt+0x6724>
   175d4:	cmn	r7, #1
   175d8:	beq	17514 <__assert_fail@plt+0x65e4>
   175dc:	mov	r1, r7
   175e0:	mov	r0, #-2147483648	; 0x80000000
   175e4:	bl	188e4 <__assert_fail@plt+0x79b4>
   175e8:	cmp	r6, r0
   175ec:	movle	r0, #0
   175f0:	movgt	r0, #1
   175f4:	b	1750c <__assert_fail@plt+0x65dc>
   175f8:	cmp	r4, #0
   175fc:	blt	17694 <__assert_fail@plt+0x6764>
   17600:	cmn	r7, #1
   17604:	beq	17578 <__assert_fail@plt+0x6648>
   17608:	str	r3, [sp, #4]
   1760c:	mov	r1, r7
   17610:	mov	r0, #-2147483648	; 0x80000000
   17614:	b	17558 <__assert_fail@plt+0x6628>
   17618:	mov	r4, fp
   1761c:	b	1754c <__assert_fail@plt+0x661c>
   17620:	mov	r4, fp
   17624:	b	17600 <__assert_fail@plt+0x66d0>
   17628:	cmn	r4, #1
   1762c:	beq	17578 <__assert_fail@plt+0x6648>
   17630:	mov	r1, r4
   17634:	mov	r0, #-2147483648	; 0x80000000
   17638:	str	r3, [sp, #4]
   1763c:	bl	188e4 <__assert_fail@plt+0x79b4>
   17640:	ldr	r3, [sp, #4]
   17644:	cmp	r7, r0
   17648:	movle	r0, #0
   1764c:	movgt	r0, #1
   17650:	b	1756c <__assert_fail@plt+0x663c>
   17654:	mov	r1, r7
   17658:	mvn	r0, #-2147483648	; 0x80000000
   1765c:	bl	188e4 <__assert_fail@plt+0x79b4>
   17660:	cmp	r6, r0
   17664:	movge	r0, #0
   17668:	movlt	r0, #1
   1766c:	b	1750c <__assert_fail@plt+0x65dc>
   17670:	cmn	r6, #1
   17674:	beq	17514 <__assert_fail@plt+0x65e4>
   17678:	mov	r1, r6
   1767c:	mov	r0, #-2147483648	; 0x80000000
   17680:	bl	188e4 <__assert_fail@plt+0x79b4>
   17684:	cmp	r7, r0
   17688:	movle	r0, #0
   1768c:	movgt	r0, #1
   17690:	b	1750c <__assert_fail@plt+0x65dc>
   17694:	mov	r1, r7
   17698:	mvn	r0, #-2147483648	; 0x80000000
   1769c:	str	r3, [sp, #4]
   176a0:	bl	188e4 <__assert_fail@plt+0x79b4>
   176a4:	ldr	r3, [sp, #4]
   176a8:	cmp	r0, r4
   176ac:	movle	r0, #0
   176b0:	movgt	r0, #1
   176b4:	b	1756c <__assert_fail@plt+0x663c>
   176b8:	push	{r4, lr}
   176bc:	mov	r1, #1
   176c0:	bl	183c4 <__assert_fail@plt+0x7494>
   176c4:	cmp	r0, #0
   176c8:	popne	{r4, pc}
   176cc:	bl	177ec <__assert_fail@plt+0x68bc>
   176d0:	push	{r4, lr}
   176d4:	mov	r1, #1
   176d8:	bl	183c4 <__assert_fail@plt+0x7494>
   176dc:	cmp	r0, #0
   176e0:	popne	{r4, pc}
   176e4:	bl	177ec <__assert_fail@plt+0x68bc>
   176e8:	push	{r4, lr}
   176ec:	bl	183c4 <__assert_fail@plt+0x7494>
   176f0:	cmp	r0, #0
   176f4:	popne	{r4, pc}
   176f8:	bl	177ec <__assert_fail@plt+0x68bc>
   176fc:	push	{r4, lr}
   17700:	bl	183c4 <__assert_fail@plt+0x7494>
   17704:	cmp	r0, #0
   17708:	popne	{r4, pc}
   1770c:	bl	177ec <__assert_fail@plt+0x68bc>
   17710:	push	{r4, r5, r6, lr}
   17714:	mov	r6, r0
   17718:	mov	r0, r1
   1771c:	mov	r4, r1
   17720:	bl	1840c <__assert_fail@plt+0x74dc>
   17724:	subs	r5, r0, #0
   17728:	beq	17740 <__assert_fail@plt+0x6810>
   1772c:	mov	r2, r4
   17730:	mov	r1, r6
   17734:	bl	10d2c <memcpy@plt>
   17738:	mov	r0, r5
   1773c:	pop	{r4, r5, r6, pc}
   17740:	bl	177ec <__assert_fail@plt+0x68bc>
   17744:	push	{r4, r5, r6, lr}
   17748:	mov	r6, r0
   1774c:	mov	r0, r1
   17750:	mov	r4, r1
   17754:	bl	1840c <__assert_fail@plt+0x74dc>
   17758:	subs	r5, r0, #0
   1775c:	beq	17774 <__assert_fail@plt+0x6844>
   17760:	mov	r2, r4
   17764:	mov	r1, r6
   17768:	bl	10d2c <memcpy@plt>
   1776c:	mov	r0, r5
   17770:	pop	{r4, r5, r6, pc}
   17774:	bl	177ec <__assert_fail@plt+0x68bc>
   17778:	push	{r4, r5, r6, lr}
   1777c:	mov	r6, r0
   17780:	add	r0, r1, #1
   17784:	mov	r4, r1
   17788:	bl	1840c <__assert_fail@plt+0x74dc>
   1778c:	subs	r5, r0, #0
   17790:	beq	177b0 <__assert_fail@plt+0x6880>
   17794:	mov	r3, #0
   17798:	mov	r1, r6
   1779c:	strb	r3, [r5, r4]
   177a0:	mov	r2, r4
   177a4:	bl	10d2c <memcpy@plt>
   177a8:	mov	r0, r5
   177ac:	pop	{r4, r5, r6, pc}
   177b0:	bl	177ec <__assert_fail@plt+0x68bc>
   177b4:	push	{r4, r5, r6, lr}
   177b8:	mov	r6, r0
   177bc:	bl	10e34 <strlen@plt>
   177c0:	add	r4, r0, #1
   177c4:	mov	r0, r4
   177c8:	bl	1840c <__assert_fail@plt+0x74dc>
   177cc:	subs	r5, r0, #0
   177d0:	beq	177e8 <__assert_fail@plt+0x68b8>
   177d4:	mov	r2, r4
   177d8:	mov	r1, r6
   177dc:	bl	10d2c <memcpy@plt>
   177e0:	mov	r0, r5
   177e4:	pop	{r4, r5, r6, pc}
   177e8:	bl	177ec <__assert_fail@plt+0x68bc>
   177ec:	ldr	r3, [pc, #44]	; 17820 <__assert_fail@plt+0x68f0>
   177f0:	push	{r4, lr}
   177f4:	mov	r2, #5
   177f8:	ldr	r1, [pc, #36]	; 17824 <__assert_fail@plt+0x68f4>
   177fc:	mov	r0, #0
   17800:	ldr	r4, [r3]
   17804:	bl	10d68 <dcgettext@plt>
   17808:	ldr	r2, [pc, #24]	; 17828 <__assert_fail@plt+0x68f8>
   1780c:	mov	r1, #0
   17810:	mov	r3, r0
   17814:	mov	r0, r4
   17818:	bl	10dd4 <error@plt>
   1781c:	bl	10f24 <abort@plt>
   17820:	strdeq	sl, [r2], -r0
   17824:	andeq	r9, r1, r8, ror #18
   17828:	andeq	r9, r1, ip, lsl #6
   1782c:	andeq	r0, r0, r0
   17830:	cmp	r2, #36	; 0x24
   17834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17838:	sub	sp, sp, #52	; 0x34
   1783c:	bhi	183b0 <__assert_fail@plt+0x7480>
   17840:	cmp	r1, #0
   17844:	mov	r5, r1
   17848:	mov	r6, r2
   1784c:	addeq	r5, sp, #44	; 0x2c
   17850:	mov	sl, r0
   17854:	mov	r9, r3
   17858:	bl	10e4c <__errno_location@plt>
   1785c:	mov	r4, #0
   17860:	mov	r2, r6
   17864:	mov	r3, r4
   17868:	mov	r1, r5
   1786c:	str	r4, [r0]
   17870:	mov	fp, r0
   17874:	mov	r0, sl
   17878:	bl	10ee8 <__strtoll_internal@plt>
   1787c:	ldr	r8, [r5]
   17880:	cmp	sl, r8
   17884:	mov	r6, r0
   17888:	mov	r7, r1
   1788c:	beq	178dc <__assert_fail@plt+0x69ac>
   17890:	ldr	r4, [fp]
   17894:	cmp	r4, #0
   17898:	bne	178c4 <__assert_fail@plt+0x6994>
   1789c:	ldr	r3, [sp, #88]	; 0x58
   178a0:	cmp	r3, #0
   178a4:	beq	178b4 <__assert_fail@plt+0x6984>
   178a8:	ldrb	sl, [r8]
   178ac:	cmp	sl, #0
   178b0:	bne	17910 <__assert_fail@plt+0x69e0>
   178b4:	strd	r6, [r9]
   178b8:	mov	r0, r4
   178bc:	add	sp, sp, #52	; 0x34
   178c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178c4:	cmp	r4, #34	; 0x22
   178c8:	beq	17b70 <__assert_fail@plt+0x6c40>
   178cc:	mov	r4, #4
   178d0:	mov	r0, r4
   178d4:	add	sp, sp, #52	; 0x34
   178d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178dc:	ldr	r3, [sp, #88]	; 0x58
   178e0:	cmp	r3, r4
   178e4:	beq	178cc <__assert_fail@plt+0x699c>
   178e8:	ldrb	sl, [sl]
   178ec:	cmp	sl, r4
   178f0:	beq	178cc <__assert_fail@plt+0x699c>
   178f4:	mov	r1, sl
   178f8:	mov	r0, r3
   178fc:	bl	10e40 <strchr@plt>
   17900:	cmp	r0, r4
   17904:	movne	r6, #1
   17908:	movne	r7, #0
   1790c:	beq	178cc <__assert_fail@plt+0x699c>
   17910:	mov	r1, sl
   17914:	ldr	r0, [sp, #88]	; 0x58
   17918:	bl	10e40 <strchr@plt>
   1791c:	cmp	r0, #0
   17920:	beq	17f28 <__assert_fail@plt+0x6ff8>
   17924:	sub	r3, sl, #69	; 0x45
   17928:	cmp	r3, #47	; 0x2f
   1792c:	ldrls	pc, [pc, r3, lsl #2]
   17930:	b	179f4 <__assert_fail@plt+0x6ac4>
   17934:	andeq	r7, r1, ip, lsl #22
   17938:	strdeq	r7, [r1], -r4
   1793c:	andeq	r7, r1, ip, lsl #22
   17940:	strdeq	r7, [r1], -r4
   17944:	strdeq	r7, [r1], -r4
   17948:	strdeq	r7, [r1], -r4
   1794c:	andeq	r7, r1, ip, lsl #22
   17950:	strdeq	r7, [r1], -r4
   17954:	andeq	r7, r1, ip, lsl #22
   17958:	strdeq	r7, [r1], -r4
   1795c:	strdeq	r7, [r1], -r4
   17960:	andeq	r7, r1, ip, lsl #22
   17964:	strdeq	r7, [r1], -r4
   17968:	strdeq	r7, [r1], -r4
   1796c:	strdeq	r7, [r1], -r4
   17970:	andeq	r7, r1, ip, lsl #22
   17974:	strdeq	r7, [r1], -r4
   17978:	strdeq	r7, [r1], -r4
   1797c:	strdeq	r7, [r1], -r4
   17980:	strdeq	r7, [r1], -r4
   17984:	andeq	r7, r1, ip, lsl #22
   17988:	andeq	r7, r1, ip, lsl #22
   1798c:	strdeq	r7, [r1], -r4
   17990:	strdeq	r7, [r1], -r4
   17994:	strdeq	r7, [r1], -r4
   17998:	strdeq	r7, [r1], -r4
   1799c:	strdeq	r7, [r1], -r4
   179a0:	strdeq	r7, [r1], -r4
   179a4:	strdeq	r7, [r1], -r4
   179a8:	strdeq	r7, [r1], -r4
   179ac:	strdeq	r7, [r1], -r4
   179b0:	strdeq	r7, [r1], -r4
   179b4:	strdeq	r7, [r1], -r4
   179b8:	strdeq	r7, [r1], -r4
   179bc:	andeq	r7, r1, ip, lsl #22
   179c0:	strdeq	r7, [r1], -r4
   179c4:	strdeq	r7, [r1], -r4
   179c8:	strdeq	r7, [r1], -r4
   179cc:	andeq	r7, r1, ip, lsl #22
   179d0:	strdeq	r7, [r1], -r4
   179d4:	andeq	r7, r1, ip, lsl #22
   179d8:	strdeq	r7, [r1], -r4
   179dc:	strdeq	r7, [r1], -r4
   179e0:	strdeq	r7, [r1], -r4
   179e4:	strdeq	r7, [r1], -r4
   179e8:	strdeq	r7, [r1], -r4
   179ec:	strdeq	r7, [r1], -r4
   179f0:	andeq	r7, r1, ip, lsl #22
   179f4:	mov	r3, #1024	; 0x400
   179f8:	str	r3, [sp, #12]
   179fc:	mov	r3, #0
   17a00:	str	r3, [sp, #8]
   17a04:	ldr	r3, [pc, #1292]	; 17f18 <__assert_fail@plt+0x6fe8>
   17a08:	mvn	r2, #0
   17a0c:	strd	r2, [sp, #16]
   17a10:	mov	r3, #0
   17a14:	mov	r2, #1024	; 0x400
   17a18:	strd	r2, [sp, #24]
   17a1c:	mov	r3, #1
   17a20:	str	r3, [sp, #4]
   17a24:	sub	sl, sl, #66	; 0x42
   17a28:	cmp	sl, #53	; 0x35
   17a2c:	ldrls	pc, [pc, sl, lsl #2]
   17a30:	b	17f28 <__assert_fail@plt+0x6ff8>
   17a34:	andeq	r7, r1, ip, lsl #29
   17a38:	andeq	r7, r1, r8, lsr #30
   17a3c:	andeq	r7, r1, r8, lsr #30
   17a40:	andeq	r7, r1, r0, lsr #25
   17a44:	andeq	r7, r1, r8, lsr #30
   17a48:	andeq	r7, r1, r0, asr #24
   17a4c:	andeq	r7, r1, r8, lsr #30
   17a50:	andeq	r7, r1, r8, lsr #30
   17a54:	andeq	r7, r1, r8, lsr #30
   17a58:	andeq	r7, r1, r4, lsr pc
   17a5c:	andeq	r7, r1, r8, lsr #30
   17a60:	andeq	r7, r1, r0, ror #23
   17a64:	andeq	r7, r1, r8, lsr #30
   17a68:	andeq	r7, r1, r8, lsr #30
   17a6c:			; <UNDEFINED> instruction: 0x00017db0
   17a70:	andeq	r7, r1, r8, lsr #30
   17a74:	andeq	r7, r1, r8, lsr #30
   17a78:	andeq	r7, r1, r8, lsr #30
   17a7c:	andeq	r7, r1, ip, asr sp
   17a80:	andeq	r7, r1, r8, lsr #30
   17a84:	andeq	r7, r1, r8, lsr #30
   17a88:	andeq	r7, r1, r8, lsr #30
   17a8c:	andeq	r7, r1, r8, lsr #30
   17a90:	andeq	r7, r1, r4, lsl #28
   17a94:	andeq	r7, r1, r4, lsl #26
   17a98:	andeq	r7, r1, r8, lsr #30
   17a9c:	andeq	r7, r1, r8, lsr #30
   17aa0:	andeq	r7, r1, r8, lsr #30
   17aa4:	andeq	r7, r1, r8, lsr #30
   17aa8:	andeq	r7, r1, r8, lsr #30
   17aac:	andeq	r7, r1, r8, lsr #30
   17ab0:	andeq	r7, r1, r8, lsr #30
   17ab4:			; <UNDEFINED> instruction: 0x00017eb4
   17ab8:			; <UNDEFINED> instruction: 0x00017bbc
   17abc:	andeq	r7, r1, r8, lsr #30
   17ac0:	andeq	r7, r1, r8, lsr #30
   17ac4:	andeq	r7, r1, r8, lsr #30
   17ac8:	andeq	r7, r1, r0, asr #24
   17acc:	andeq	r7, r1, r8, lsr #30
   17ad0:	andeq	r7, r1, r8, lsr #30
   17ad4:	andeq	r7, r1, r8, lsr #30
   17ad8:	andeq	r7, r1, r4, lsr pc
   17adc:	andeq	r7, r1, r8, lsr #30
   17ae0:	andeq	r7, r1, r0, ror #23
   17ae4:	andeq	r7, r1, r8, lsr #30
   17ae8:	andeq	r7, r1, r8, lsr #30
   17aec:	andeq	r7, r1, r8, lsr #30
   17af0:	andeq	r7, r1, r8, lsr #30
   17af4:	andeq	r7, r1, r8, lsr #30
   17af8:	andeq	r7, r1, r8, lsr #30
   17afc:	andeq	r7, r1, ip, asr sp
   17b00:	andeq	r7, r1, r8, lsr #30
   17b04:	andeq	r7, r1, r8, lsr #30
   17b08:	andeq	r7, r1, r8, ror #29
   17b0c:	mov	r1, #48	; 0x30
   17b10:	ldr	r0, [sp, #88]	; 0x58
   17b14:	bl	10e40 <strchr@plt>
   17b18:	cmp	r0, #0
   17b1c:	beq	17f70 <__assert_fail@plt+0x7040>
   17b20:	ldrb	r3, [r8, #1]
   17b24:	cmp	r3, #68	; 0x44
   17b28:	beq	17b3c <__assert_fail@plt+0x6c0c>
   17b2c:	cmp	r3, #105	; 0x69
   17b30:	beq	17b78 <__assert_fail@plt+0x6c48>
   17b34:	cmp	r3, #66	; 0x42
   17b38:	bne	179f4 <__assert_fail@plt+0x6ac4>
   17b3c:	mov	r3, #1000	; 0x3e8
   17b40:	str	r3, [sp, #12]
   17b44:	mov	r3, #0
   17b48:	str	r3, [sp, #8]
   17b4c:	add	r3, pc, #956	; 0x3bc
   17b50:	ldrd	r2, [r3]
   17b54:	strd	r2, [sp, #16]
   17b58:	mov	r3, #0
   17b5c:	mov	r2, #1000	; 0x3e8
   17b60:	strd	r2, [sp, #24]
   17b64:	mov	r3, #2
   17b68:	str	r3, [sp, #4]
   17b6c:	b	17a24 <__assert_fail@plt+0x6af4>
   17b70:	mov	r4, #1
   17b74:	b	1789c <__assert_fail@plt+0x696c>
   17b78:	ldrb	r3, [r8, #2]
   17b7c:	mvn	r2, #0
   17b80:	cmp	r3, #66	; 0x42
   17b84:	mov	r3, #1024	; 0x400
   17b88:	str	r3, [sp, #12]
   17b8c:	mov	r3, #0
   17b90:	str	r3, [sp, #8]
   17b94:	ldr	r3, [pc, #892]	; 17f18 <__assert_fail@plt+0x6fe8>
   17b98:	strd	r2, [sp, #16]
   17b9c:	mov	r3, #0
   17ba0:	mov	r2, #1024	; 0x400
   17ba4:	strd	r2, [sp, #24]
   17ba8:	moveq	r3, #3
   17bac:	streq	r3, [sp, #4]
   17bb0:	movne	r3, #1
   17bb4:	strne	r3, [sp, #4]
   17bb8:	b	17a24 <__assert_fail@plt+0x6af4>
   17bbc:	mov	sl, #0
   17bc0:	ldr	r2, [sp, #4]
   17bc4:	orr	r4, r4, sl
   17bc8:	add	r3, r8, r2
   17bcc:	str	r3, [r5]
   17bd0:	ldrb	r3, [r8, r2]
   17bd4:	cmp	r3, #0
   17bd8:	orrne	r4, r4, #2
   17bdc:	b	178b4 <__assert_fail@plt+0x6984>
   17be0:	mov	sl, #0
   17be4:	mov	r3, r9
   17be8:	mov	fp, #1
   17bec:	mov	r9, r5
   17bf0:	mov	r5, r4
   17bf4:	mov	r4, sl
   17bf8:	mov	sl, r3
   17bfc:	cmp	r6, #0
   17c00:	sbcs	r3, r7, #0
   17c04:	blt	1832c <__assert_fail@plt+0x73fc>
   17c08:	ldrd	r2, [sp, #16]
   17c0c:	cmp	r2, r6
   17c10:	sbcs	r1, r3, r7
   17c14:	bge	1823c <__assert_fail@plt+0x730c>
   17c18:	sub	fp, fp, #1
   17c1c:	cmn	fp, #1
   17c20:	mov	r4, #1
   17c24:	mvn	r6, #0
   17c28:	mvn	r7, #-2147483648	; 0x80000000
   17c2c:	bne	17c0c <__assert_fail@plt+0x6cdc>
   17c30:	mov	r4, r5
   17c34:	mov	r5, r9
   17c38:	mov	r9, sl
   17c3c:	b	17ea4 <__assert_fail@plt+0x6f74>
   17c40:	mov	sl, #0
   17c44:	str	r9, [sp, #32]
   17c48:	mov	r9, r5
   17c4c:	mov	r5, r4
   17c50:	mov	r4, sl
   17c54:	ldr	sl, [sp, #12]
   17c58:	mov	fp, #2
   17c5c:	cmp	r6, #0
   17c60:	sbcs	r3, r7, #0
   17c64:	blt	18278 <__assert_fail@plt+0x7348>
   17c68:	ldrd	r2, [sp, #16]
   17c6c:	cmp	r2, r6
   17c70:	sbcs	r1, r3, r7
   17c74:	bge	182e0 <__assert_fail@plt+0x73b0>
   17c78:	sub	fp, fp, #1
   17c7c:	cmn	fp, #1
   17c80:	mvn	r6, #0
   17c84:	mvn	r7, #-2147483648	; 0x80000000
   17c88:	mov	r4, #1
   17c8c:	bne	17c6c <__assert_fail@plt+0x6d3c>
   17c90:	mov	r4, r5
   17c94:	mov	r5, r9
   17c98:	ldr	r9, [sp, #32]
   17c9c:	b	17ea4 <__assert_fail@plt+0x6f74>
   17ca0:	mov	sl, #0
   17ca4:	str	r4, [sp, #32]
   17ca8:	str	r9, [sp, #36]	; 0x24
   17cac:	mov	r4, sl
   17cb0:	mov	r9, r5
   17cb4:	ldr	sl, [sp, #12]
   17cb8:	ldr	r5, [sp, #8]
   17cbc:	mov	fp, #5
   17cc0:	cmp	r6, #0
   17cc4:	sbcs	r3, r7, #0
   17cc8:	blt	180ec <__assert_fail@plt+0x71bc>
   17ccc:	ldrd	r2, [sp, #16]
   17cd0:	cmp	r2, r6
   17cd4:	sbcs	r1, r3, r7
   17cd8:	bge	18124 <__assert_fail@plt+0x71f4>
   17cdc:	sub	fp, fp, #1
   17ce0:	cmn	fp, #1
   17ce4:	mvn	r6, #0
   17ce8:	mvn	r7, #-2147483648	; 0x80000000
   17cec:	mov	r4, #1
   17cf0:	bne	17cd0 <__assert_fail@plt+0x6da0>
   17cf4:	mov	r5, r9
   17cf8:	ldr	r4, [sp, #32]
   17cfc:	ldr	r9, [sp, #36]	; 0x24
   17d00:	b	17ea4 <__assert_fail@plt+0x6f74>
   17d04:	mov	sl, #0
   17d08:	str	r4, [sp, #32]
   17d0c:	str	r9, [sp, #36]	; 0x24
   17d10:	mov	r4, sl
   17d14:	mov	r9, r5
   17d18:	ldr	sl, [sp, #12]
   17d1c:	ldr	r5, [sp, #8]
   17d20:	mov	fp, #6
   17d24:	cmp	r6, #0
   17d28:	sbcs	r3, r7, #0
   17d2c:	blt	17fa0 <__assert_fail@plt+0x7070>
   17d30:	ldrd	r2, [sp, #16]
   17d34:	cmp	r2, r6
   17d38:	sbcs	r1, r3, r7
   17d3c:	bge	17f80 <__assert_fail@plt+0x7050>
   17d40:	sub	fp, fp, #1
   17d44:	cmn	fp, #1
   17d48:	mov	r4, #1
   17d4c:	mvn	r6, #0
   17d50:	mvn	r7, #-2147483648	; 0x80000000
   17d54:	bne	17d34 <__assert_fail@plt+0x6e04>
   17d58:	b	17cf4 <__assert_fail@plt+0x6dc4>
   17d5c:	mov	sl, #0
   17d60:	str	r9, [sp, #32]
   17d64:	mov	r9, r5
   17d68:	mov	r5, r4
   17d6c:	mov	r4, sl
   17d70:	ldr	sl, [sp, #12]
   17d74:	mov	fp, #3
   17d78:	cmp	r6, #0
   17d7c:	sbcs	r3, r7, #0
   17d80:	blt	18080 <__assert_fail@plt+0x7150>
   17d84:	ldrd	r2, [sp, #16]
   17d88:	cmp	r2, r6
   17d8c:	sbcs	r1, r3, r7
   17d90:	bge	180b8 <__assert_fail@plt+0x7188>
   17d94:	sub	fp, fp, #1
   17d98:	cmn	fp, #1
   17d9c:	mov	r4, #1
   17da0:	mvn	r6, #0
   17da4:	mvn	r7, #-2147483648	; 0x80000000
   17da8:	bne	17d88 <__assert_fail@plt+0x6e58>
   17dac:	b	17c90 <__assert_fail@plt+0x6d60>
   17db0:	mov	sl, #0
   17db4:	str	r9, [sp, #32]
   17db8:	mov	r9, r5
   17dbc:	mov	r5, r4
   17dc0:	mov	r4, sl
   17dc4:	ldr	sl, [sp, #12]
   17dc8:	mov	fp, #4
   17dcc:	cmp	r6, #0
   17dd0:	sbcs	r3, r7, #0
   17dd4:	blt	181f4 <__assert_fail@plt+0x72c4>
   17dd8:	ldrd	r2, [sp, #16]
   17ddc:	cmp	r2, r6
   17de0:	sbcs	r1, r3, r7
   17de4:	bge	181d0 <__assert_fail@plt+0x72a0>
   17de8:	sub	fp, fp, #1
   17dec:	cmn	fp, #1
   17df0:	mvn	r6, #0
   17df4:	mvn	r7, #-2147483648	; 0x80000000
   17df8:	mov	r4, #1
   17dfc:	bne	17ddc <__assert_fail@plt+0x6eac>
   17e00:	b	17c90 <__assert_fail@plt+0x6d60>
   17e04:	mov	sl, #0
   17e08:	str	r4, [sp, #32]
   17e0c:	str	r9, [sp, #36]	; 0x24
   17e10:	mov	r4, sl
   17e14:	mov	r9, r5
   17e18:	ldr	sl, [sp, #12]
   17e1c:	ldr	r5, [sp, #8]
   17e20:	mov	fp, #7
   17e24:	cmp	r6, #0
   17e28:	sbcs	r3, r7, #0
   17e2c:	blt	18044 <__assert_fail@plt+0x7114>
   17e30:	ldrd	r2, [sp, #16]
   17e34:	b	17e50 <__assert_fail@plt+0x6f20>
   17e38:	sub	fp, fp, #1
   17e3c:	cmn	fp, #1
   17e40:	mvn	r6, #0
   17e44:	mvn	r7, #-2147483648	; 0x80000000
   17e48:	mov	r4, #1
   17e4c:	beq	17cf4 <__assert_fail@plt+0x6dc4>
   17e50:	cmp	r2, r6
   17e54:	sbcs	r1, r3, r7
   17e58:	blt	17e38 <__assert_fail@plt+0x6f08>
   17e5c:	mul	r3, r6, r5
   17e60:	cmp	fp, #0
   17e64:	mla	r3, sl, r7, r3
   17e68:	umull	r6, r7, r6, sl
   17e6c:	sub	fp, fp, #1
   17e70:	add	r7, r3, r7
   17e74:	bne	17e24 <__assert_fail@plt+0x6ef4>
   17e78:	mov	sl, r4
   17e7c:	mov	r5, r9
   17e80:	ldr	r4, [sp, #32]
   17e84:	ldr	r9, [sp, #36]	; 0x24
   17e88:	b	17bc0 <__assert_fail@plt+0x6c90>
   17e8c:	cmp	r6, #0
   17e90:	sbcs	r3, r7, #0
   17e94:	blt	17ff4 <__assert_fail@plt+0x70c4>
   17e98:	cmp	r6, #0
   17e9c:	sbcs	r3, r7, #2097152	; 0x200000
   17ea0:	blt	18028 <__assert_fail@plt+0x70f8>
   17ea4:	mvn	r6, #0
   17ea8:	mvn	r7, #-2147483648	; 0x80000000
   17eac:	mov	sl, #1
   17eb0:	b	17bc0 <__assert_fail@plt+0x6c90>
   17eb4:	cmp	r6, #0
   17eb8:	sbcs	r3, r7, #0
   17ebc:	blt	18198 <__assert_fail@plt+0x7268>
   17ec0:	cmp	r6, #0
   17ec4:	sbcs	r3, r7, #4194304	; 0x400000
   17ec8:	bge	17ea4 <__assert_fail@plt+0x6f74>
   17ecc:	lsl	r3, r7, #9
   17ed0:	orr	r3, r3, r6, lsr #23
   17ed4:	lsl	r2, r6, #9
   17ed8:	mov	r6, r2
   17edc:	mov	r7, r3
   17ee0:	mov	sl, #0
   17ee4:	b	17bc0 <__assert_fail@plt+0x6c90>
   17ee8:	cmp	r6, #0
   17eec:	sbcs	r3, r7, #0
   17ef0:	blt	18160 <__assert_fail@plt+0x7230>
   17ef4:	cmp	r6, #0
   17ef8:	sbcs	r3, r7, #1073741824	; 0x40000000
   17efc:	bge	17ea4 <__assert_fail@plt+0x6f74>
   17f00:	adds	r6, r6, r6
   17f04:	adc	r7, r7, r7
   17f08:	mov	sl, #0
   17f0c:	b	17bc0 <__assert_fail@plt+0x6c90>
   17f10:	strbge	r5, [r3, #1015]!	; 0x3f7
   17f14:	mlaeq	r0, fp, r4, ip
   17f18:			; <UNDEFINED> instruction: 0x001fffff
   17f1c:	andeq	r9, r1, ip, ror r9
   17f20:	andeq	r9, r1, r8, lsl #19
   17f24:	muleq	r1, r8, r9
   17f28:	strd	r6, [r9]
   17f2c:	orr	r4, r4, #2
   17f30:	b	178b8 <__assert_fail@plt+0x6988>
   17f34:	cmp	r6, #0
   17f38:	sbcs	r3, r7, #0
   17f3c:	blt	18374 <__assert_fail@plt+0x7444>
   17f40:	ldrd	r2, [sp, #16]
   17f44:	cmp	r2, r6
   17f48:	sbcs	r3, r3, r7
   17f4c:	blt	17ea4 <__assert_fail@plt+0x6f74>
   17f50:	ldr	r3, [sp, #8]
   17f54:	ldr	r2, [sp, #12]
   17f58:	mov	sl, #0
   17f5c:	mul	r3, r6, r3
   17f60:	mla	r3, r2, r7, r3
   17f64:	umull	r6, r7, r6, r2
   17f68:	add	r7, r3, r7
   17f6c:	b	17bc0 <__assert_fail@plt+0x6c90>
   17f70:	mov	r3, #1024	; 0x400
   17f74:	str	r0, [sp, #8]
   17f78:	str	r3, [sp, #12]
   17f7c:	b	17a04 <__assert_fail@plt+0x6ad4>
   17f80:	mul	r3, r6, r5
   17f84:	cmp	fp, #0
   17f88:	mla	r3, sl, r7, r3
   17f8c:	umull	r6, r7, r6, sl
   17f90:	sub	fp, fp, #1
   17f94:	add	r7, r3, r7
   17f98:	bne	17d24 <__assert_fail@plt+0x6df4>
   17f9c:	b	17e78 <__assert_fail@plt+0x6f48>
   17fa0:	mvn	r3, #0
   17fa4:	mvn	r2, #0
   17fa8:	cmp	r7, r3
   17fac:	cmpeq	r6, r2
   17fb0:	beq	17f80 <__assert_fail@plt+0x7050>
   17fb4:	mov	r2, r6
   17fb8:	mov	r3, r7
   17fbc:	mov	r0, #0
   17fc0:	mov	r1, #-2147483648	; 0x80000000
   17fc4:	bl	18b24 <__assert_fail@plt+0x7bf4>
   17fc8:	ldrd	r2, [sp, #24]
   17fcc:	cmp	r0, r2
   17fd0:	sbcs	r3, r1, r3
   17fd4:	bge	17f80 <__assert_fail@plt+0x7050>
   17fd8:	mov	r5, r9
   17fdc:	ldr	r4, [sp, #32]
   17fe0:	ldr	r9, [sp, #36]	; 0x24
   17fe4:	mov	r6, #0
   17fe8:	mov	r7, #-2147483648	; 0x80000000
   17fec:	mov	sl, #1
   17ff0:	b	17bc0 <__assert_fail@plt+0x6c90>
   17ff4:	mvn	r3, #0
   17ff8:	mvn	r2, #0
   17ffc:	cmp	r7, r3
   18000:	cmpeq	r6, r2
   18004:	beq	18028 <__assert_fail@plt+0x70f8>
   18008:	mov	r3, r7
   1800c:	mov	r2, r6
   18010:	mov	r0, #0
   18014:	mov	r1, #-2147483648	; 0x80000000
   18018:	bl	18b24 <__assert_fail@plt+0x7bf4>
   1801c:	cmp	r0, #1024	; 0x400
   18020:	sbcs	r3, r1, #0
   18024:	blt	17fe4 <__assert_fail@plt+0x70b4>
   18028:	lsl	r3, r7, #10
   1802c:	orr	r3, r3, r6, lsr #22
   18030:	lsl	r2, r6, #10
   18034:	mov	r6, r2
   18038:	mov	r7, r3
   1803c:	mov	sl, #0
   18040:	b	17bc0 <__assert_fail@plt+0x6c90>
   18044:	mvn	r3, #0
   18048:	mvn	r2, #0
   1804c:	cmp	r7, r3
   18050:	cmpeq	r6, r2
   18054:	beq	17e5c <__assert_fail@plt+0x6f2c>
   18058:	mov	r2, r6
   1805c:	mov	r3, r7
   18060:	mov	r0, #0
   18064:	mov	r1, #-2147483648	; 0x80000000
   18068:	bl	18b24 <__assert_fail@plt+0x7bf4>
   1806c:	ldrd	r2, [sp, #24]
   18070:	cmp	r0, r2
   18074:	sbcs	r3, r1, r3
   18078:	bge	17e5c <__assert_fail@plt+0x6f2c>
   1807c:	b	17fd8 <__assert_fail@plt+0x70a8>
   18080:	mvn	r3, #0
   18084:	mvn	r2, #0
   18088:	cmp	r7, r3
   1808c:	cmpeq	r6, r2
   18090:	beq	180b8 <__assert_fail@plt+0x7188>
   18094:	mov	r2, r6
   18098:	mov	r3, r7
   1809c:	mov	r0, #0
   180a0:	mov	r1, #-2147483648	; 0x80000000
   180a4:	bl	18b24 <__assert_fail@plt+0x7bf4>
   180a8:	ldrd	r2, [sp, #24]
   180ac:	cmp	r0, r2
   180b0:	sbcs	r3, r1, r3
   180b4:	blt	1822c <__assert_fail@plt+0x72fc>
   180b8:	ldr	r3, [sp, #8]
   180bc:	cmp	fp, #0
   180c0:	sub	fp, fp, #1
   180c4:	mul	r3, r6, r3
   180c8:	mla	r3, sl, r7, r3
   180cc:	umull	r6, r7, r6, sl
   180d0:	add	r7, r3, r7
   180d4:	bne	17d78 <__assert_fail@plt+0x6e48>
   180d8:	mov	sl, r4
   180dc:	mov	r4, r5
   180e0:	mov	r5, r9
   180e4:	ldr	r9, [sp, #32]
   180e8:	b	17bc0 <__assert_fail@plt+0x6c90>
   180ec:	mvn	r3, #0
   180f0:	mvn	r2, #0
   180f4:	cmp	r7, r3
   180f8:	cmpeq	r6, r2
   180fc:	beq	18124 <__assert_fail@plt+0x71f4>
   18100:	mov	r2, r6
   18104:	mov	r3, r7
   18108:	mov	r0, #0
   1810c:	mov	r1, #-2147483648	; 0x80000000
   18110:	bl	18b24 <__assert_fail@plt+0x7bf4>
   18114:	ldrd	r2, [sp, #24]
   18118:	cmp	r0, r2
   1811c:	sbcs	r3, r1, r3
   18120:	blt	18144 <__assert_fail@plt+0x7214>
   18124:	mul	r3, r6, r5
   18128:	cmp	fp, #0
   1812c:	mla	r3, sl, r7, r3
   18130:	umull	r6, r7, r6, sl
   18134:	sub	fp, fp, #1
   18138:	add	r7, r3, r7
   1813c:	bne	17cc0 <__assert_fail@plt+0x6d90>
   18140:	b	17e78 <__assert_fail@plt+0x6f48>
   18144:	sub	fp, fp, #1
   18148:	cmn	fp, #1
   1814c:	mov	r6, #0
   18150:	mov	r7, #-2147483648	; 0x80000000
   18154:	mov	r4, #1
   18158:	bne	18100 <__assert_fail@plt+0x71d0>
   1815c:	b	17fd8 <__assert_fail@plt+0x70a8>
   18160:	mvn	r3, #0
   18164:	mvn	r2, #0
   18168:	cmp	r7, r3
   1816c:	cmpeq	r6, r2
   18170:	beq	17f00 <__assert_fail@plt+0x6fd0>
   18174:	mov	r2, r6
   18178:	mov	r3, r7
   1817c:	mov	r0, #0
   18180:	mov	r1, #-2147483648	; 0x80000000
   18184:	bl	18b24 <__assert_fail@plt+0x7bf4>
   18188:	cmp	r1, #0
   1818c:	cmpeq	r0, #1
   18190:	beq	17fe4 <__assert_fail@plt+0x70b4>
   18194:	b	17f00 <__assert_fail@plt+0x6fd0>
   18198:	mvn	r3, #0
   1819c:	mvn	r2, #0
   181a0:	cmp	r7, r3
   181a4:	cmpeq	r6, r2
   181a8:	beq	17ecc <__assert_fail@plt+0x6f9c>
   181ac:	mov	r3, r7
   181b0:	mov	r2, r6
   181b4:	mov	r0, #0
   181b8:	mov	r1, #-2147483648	; 0x80000000
   181bc:	bl	18b24 <__assert_fail@plt+0x7bf4>
   181c0:	cmp	r0, #512	; 0x200
   181c4:	sbcs	r3, r1, #0
   181c8:	blt	17fe4 <__assert_fail@plt+0x70b4>
   181cc:	b	17ecc <__assert_fail@plt+0x6f9c>
   181d0:	ldr	r3, [sp, #8]
   181d4:	cmp	fp, #0
   181d8:	sub	fp, fp, #1
   181dc:	mul	r3, r6, r3
   181e0:	mla	r3, sl, r7, r3
   181e4:	umull	r6, r7, r6, sl
   181e8:	add	r7, r3, r7
   181ec:	bne	17dcc <__assert_fail@plt+0x6e9c>
   181f0:	b	180d8 <__assert_fail@plt+0x71a8>
   181f4:	mvn	r3, #0
   181f8:	mvn	r2, #0
   181fc:	cmp	r7, r3
   18200:	cmpeq	r6, r2
   18204:	beq	181d0 <__assert_fail@plt+0x72a0>
   18208:	mov	r2, r6
   1820c:	mov	r3, r7
   18210:	mov	r0, #0
   18214:	mov	r1, #-2147483648	; 0x80000000
   18218:	bl	18b24 <__assert_fail@plt+0x7bf4>
   1821c:	ldrd	r2, [sp, #24]
   18220:	cmp	r0, r2
   18224:	sbcs	r3, r1, r3
   18228:	bge	181d0 <__assert_fail@plt+0x72a0>
   1822c:	mov	r4, r5
   18230:	mov	r5, r9
   18234:	ldr	r9, [sp, #32]
   18238:	b	17fe4 <__assert_fail@plt+0x70b4>
   1823c:	ldr	r3, [sp, #8]
   18240:	ldr	r2, [sp, #12]
   18244:	cmp	fp, #0
   18248:	mul	r3, r6, r3
   1824c:	sub	fp, fp, #1
   18250:	mla	r3, r2, r7, r3
   18254:	umull	r6, r7, r6, r2
   18258:	add	r7, r3, r7
   1825c:	bne	17bfc <__assert_fail@plt+0x6ccc>
   18260:	mov	r3, sl
   18264:	mov	sl, r4
   18268:	mov	r4, r5
   1826c:	mov	r5, r9
   18270:	mov	r9, r3
   18274:	b	17bc0 <__assert_fail@plt+0x6c90>
   18278:	mvn	r3, #0
   1827c:	mvn	r2, #0
   18280:	cmp	r7, r3
   18284:	cmpeq	r6, r2
   18288:	beq	182e0 <__assert_fail@plt+0x73b0>
   1828c:	mov	r3, sl
   18290:	mov	sl, r9
   18294:	mov	r9, r5
   18298:	mov	r5, r4
   1829c:	mov	r4, fp
   182a0:	mov	fp, r3
   182a4:	mov	r2, r6
   182a8:	mov	r3, r7
   182ac:	mov	r0, #0
   182b0:	mov	r1, #-2147483648	; 0x80000000
   182b4:	bl	18b24 <__assert_fail@plt+0x7bf4>
   182b8:	ldrd	r2, [sp, #24]
   182bc:	cmp	r0, r2
   182c0:	sbcs	r3, r1, r3
   182c4:	blt	18304 <__assert_fail@plt+0x73d4>
   182c8:	mov	r3, fp
   182cc:	mov	fp, r4
   182d0:	mov	r4, r5
   182d4:	mov	r5, r9
   182d8:	mov	r9, sl
   182dc:	mov	sl, r3
   182e0:	ldr	r3, [sp, #8]
   182e4:	cmp	fp, #0
   182e8:	sub	fp, fp, #1
   182ec:	mul	r3, r6, r3
   182f0:	mla	r3, sl, r7, r3
   182f4:	umull	r6, r7, r6, sl
   182f8:	add	r7, r3, r7
   182fc:	bne	17c5c <__assert_fail@plt+0x6d2c>
   18300:	b	180d8 <__assert_fail@plt+0x71a8>
   18304:	sub	r4, r4, #1
   18308:	cmn	r4, #1
   1830c:	mov	r6, #0
   18310:	mov	r7, #-2147483648	; 0x80000000
   18314:	mov	r5, #1
   18318:	bne	182a4 <__assert_fail@plt+0x7374>
   1831c:	mov	r4, r9
   18320:	mov	r5, sl
   18324:	ldr	r9, [sp, #32]
   18328:	b	17fe4 <__assert_fail@plt+0x70b4>
   1832c:	mvn	r3, #0
   18330:	mvn	r2, #0
   18334:	cmp	r7, r3
   18338:	cmpeq	r6, r2
   1833c:	beq	1823c <__assert_fail@plt+0x730c>
   18340:	mov	r2, r6
   18344:	mov	r3, r7
   18348:	mov	r0, #0
   1834c:	mov	r1, #-2147483648	; 0x80000000
   18350:	bl	18b24 <__assert_fail@plt+0x7bf4>
   18354:	ldrd	r2, [sp, #24]
   18358:	cmp	r0, r2
   1835c:	sbcs	r3, r1, r3
   18360:	bge	1823c <__assert_fail@plt+0x730c>
   18364:	mov	r4, r5
   18368:	mov	r5, r9
   1836c:	mov	r9, sl
   18370:	b	17fe4 <__assert_fail@plt+0x70b4>
   18374:	mvn	r3, #0
   18378:	mvn	r2, #0
   1837c:	cmp	r7, r3
   18380:	cmpeq	r6, r2
   18384:	beq	17f50 <__assert_fail@plt+0x7020>
   18388:	mov	r2, r6
   1838c:	mov	r3, r7
   18390:	mov	r0, #0
   18394:	mov	r1, #-2147483648	; 0x80000000
   18398:	bl	18b24 <__assert_fail@plt+0x7bf4>
   1839c:	ldrd	r2, [sp, #24]
   183a0:	cmp	r0, r2
   183a4:	sbcs	r3, r1, r3
   183a8:	blt	17fe4 <__assert_fail@plt+0x70b4>
   183ac:	b	17f50 <__assert_fail@plt+0x7020>
   183b0:	ldr	r3, [pc, #-1180]	; 17f1c <__assert_fail@plt+0x6fec>
   183b4:	mov	r2, #85	; 0x55
   183b8:	ldr	r1, [pc, #-1184]	; 17f20 <__assert_fail@plt+0x6ff0>
   183bc:	ldr	r0, [pc, #-1184]	; 17f24 <__assert_fail@plt+0x6ff4>
   183c0:	bl	10f30 <__assert_fail@plt>
   183c4:	cmp	r1, #0
   183c8:	cmpne	r0, #0
   183cc:	moveq	r1, #1
   183d0:	moveq	r0, r1
   183d4:	umull	r2, r3, r0, r1
   183d8:	adds	r3, r3, #0
   183dc:	movne	r3, #1
   183e0:	cmp	r2, #0
   183e4:	blt	183f4 <__assert_fail@plt+0x74c4>
   183e8:	cmp	r3, #0
   183ec:	bne	183f4 <__assert_fail@plt+0x74c4>
   183f0:	b	10cc0 <calloc@plt>
   183f4:	push	{r4, lr}
   183f8:	bl	10e4c <__errno_location@plt>
   183fc:	mov	r3, #12
   18400:	str	r3, [r0]
   18404:	mov	r0, #0
   18408:	pop	{r4, pc}
   1840c:	cmp	r0, #0
   18410:	moveq	r0, #1
   18414:	cmp	r0, #0
   18418:	blt	18420 <__assert_fail@plt+0x74f0>
   1841c:	b	10de0 <malloc@plt>
   18420:	push	{r4, lr}
   18424:	bl	10e4c <__errno_location@plt>
   18428:	mov	r3, #12
   1842c:	str	r3, [r0]
   18430:	mov	r0, #0
   18434:	pop	{r4, pc}
   18438:	cmp	r0, #0
   1843c:	beq	18460 <__assert_fail@plt+0x7530>
   18440:	cmp	r1, #0
   18444:	push	{lr}		; (str lr, [sp, #-4]!)
   18448:	sub	sp, sp, #12
   1844c:	beq	18468 <__assert_fail@plt+0x7538>
   18450:	blt	18480 <__assert_fail@plt+0x7550>
   18454:	add	sp, sp, #12
   18458:	pop	{lr}		; (ldr lr, [sp], #4)
   1845c:	b	10d74 <realloc@plt>
   18460:	mov	r0, r1
   18464:	b	1840c <__assert_fail@plt+0x74dc>
   18468:	str	r1, [sp, #4]
   1846c:	bl	12624 <__assert_fail@plt+0x16f4>
   18470:	ldr	r3, [sp, #4]
   18474:	mov	r0, r3
   18478:	add	sp, sp, #12
   1847c:	pop	{pc}		; (ldr pc, [sp], #4)
   18480:	bl	10e4c <__errno_location@plt>
   18484:	mov	r2, #12
   18488:	mov	r3, #0
   1848c:	str	r2, [r0]
   18490:	b	18474 <__assert_fail@plt+0x7544>
   18494:	push	{r4, r5, r6, lr}
   18498:	mov	r4, r0
   1849c:	bl	10dbc <__fpending@plt>
   184a0:	ldr	r5, [r4]
   184a4:	and	r5, r5, #32
   184a8:	mov	r6, r0
   184ac:	mov	r0, r4
   184b0:	bl	12524 <__assert_fail@plt+0x15f4>
   184b4:	cmp	r5, #0
   184b8:	mov	r4, r0
   184bc:	bne	184dc <__assert_fail@plt+0x75ac>
   184c0:	cmp	r0, #0
   184c4:	beq	184d4 <__assert_fail@plt+0x75a4>
   184c8:	cmp	r6, #0
   184cc:	beq	184f8 <__assert_fail@plt+0x75c8>
   184d0:	mvn	r4, #0
   184d4:	mov	r0, r4
   184d8:	pop	{r4, r5, r6, pc}
   184dc:	cmp	r0, #0
   184e0:	bne	184d0 <__assert_fail@plt+0x75a0>
   184e4:	bl	10e4c <__errno_location@plt>
   184e8:	str	r4, [r0]
   184ec:	mvn	r4, #0
   184f0:	mov	r0, r4
   184f4:	pop	{r4, r5, r6, pc}
   184f8:	bl	10e4c <__errno_location@plt>
   184fc:	ldr	r4, [r0]
   18500:	subs	r4, r4, #9
   18504:	mvnne	r4, #0
   18508:	mov	r0, r4
   1850c:	pop	{r4, r5, r6, pc}
   18510:	push	{r4, lr}
   18514:	mov	r0, #14
   18518:	bl	10edc <nl_langinfo@plt>
   1851c:	cmp	r0, #0
   18520:	beq	18538 <__assert_fail@plt+0x7608>
   18524:	ldrb	r2, [r0]
   18528:	ldr	r3, [pc, #16]	; 18540 <__assert_fail@plt+0x7610>
   1852c:	cmp	r2, #0
   18530:	moveq	r0, r3
   18534:	pop	{r4, pc}
   18538:	ldr	r0, [pc]	; 18540 <__assert_fail@plt+0x7610>
   1853c:	pop	{r4, pc}
   18540:	andeq	r9, r1, r0, asr #19
   18544:	push	{r4, r5, r6, r7, lr}
   18548:	subs	r6, r0, #0
   1854c:	sub	sp, sp, #12
   18550:	addeq	r6, sp, #4
   18554:	mov	r0, r6
   18558:	mov	r5, r2
   1855c:	mov	r7, r1
   18560:	bl	10dc8 <mbrtowc@plt>
   18564:	cmp	r5, #0
   18568:	cmnne	r0, #3
   1856c:	mov	r4, r0
   18570:	bls	1858c <__assert_fail@plt+0x765c>
   18574:	mov	r0, #0
   18578:	bl	185e4 <__assert_fail@plt+0x76b4>
   1857c:	cmp	r0, #0
   18580:	moveq	r4, #1
   18584:	ldrbeq	r3, [r7]
   18588:	streq	r3, [r6]
   1858c:	mov	r0, r4
   18590:	add	sp, sp, #12
   18594:	pop	{r4, r5, r6, r7, pc}
   18598:	push	{r4, r5, r6, lr}
   1859c:	subs	r4, r2, #0
   185a0:	mov	r6, r0
   185a4:	mov	r5, r1
   185a8:	beq	185d4 <__assert_fail@plt+0x76a4>
   185ac:	mov	r1, r4
   185b0:	mvn	r0, #0
   185b4:	bl	186d8 <__assert_fail@plt+0x77a8>
   185b8:	cmp	r0, r5
   185bc:	bcs	185d4 <__assert_fail@plt+0x76a4>
   185c0:	bl	10e4c <__errno_location@plt>
   185c4:	mov	r3, #12
   185c8:	str	r3, [r0]
   185cc:	mov	r0, #0
   185d0:	pop	{r4, r5, r6, pc}
   185d4:	mul	r1, r5, r4
   185d8:	mov	r0, r6
   185dc:	pop	{r4, r5, r6, lr}
   185e0:	b	18438 <__assert_fail@plt+0x7508>
   185e4:	push	{lr}		; (str lr, [sp, #-4]!)
   185e8:	sub	sp, sp, #268	; 0x10c
   185ec:	add	r1, sp, #4
   185f0:	ldr	r2, [pc, #60]	; 18634 <__assert_fail@plt+0x7704>
   185f4:	bl	18640 <__assert_fail@plt+0x7710>
   185f8:	cmp	r0, #0
   185fc:	movne	r0, #0
   18600:	bne	1862c <__assert_fail@plt+0x76fc>
   18604:	ldr	r1, [pc, #44]	; 18638 <__assert_fail@plt+0x7708>
   18608:	add	r0, sp, #4
   1860c:	bl	10ce4 <strcmp@plt>
   18610:	cmp	r0, #0
   18614:	beq	1862c <__assert_fail@plt+0x76fc>
   18618:	add	r0, sp, #4
   1861c:	ldr	r1, [pc, #24]	; 1863c <__assert_fail@plt+0x770c>
   18620:	bl	10ce4 <strcmp@plt>
   18624:	adds	r0, r0, #0
   18628:	movne	r0, #1
   1862c:	add	sp, sp, #268	; 0x10c
   18630:	pop	{pc}		; (ldr pc, [sp], #4)
   18634:	andeq	r0, r0, r1, lsl #2
   18638:	andeq	r9, r1, r8, asr #19
   1863c:	andeq	r9, r1, ip, asr #19
   18640:	push	{r4, r5, r6, lr}
   18644:	mov	r5, r1
   18648:	mov	r1, #0
   1864c:	mov	r4, r2
   18650:	bl	10ec4 <setlocale@plt>
   18654:	subs	r6, r0, #0
   18658:	beq	186b4 <__assert_fail@plt+0x7784>
   1865c:	bl	10e34 <strlen@plt>
   18660:	cmp	r4, r0
   18664:	bhi	1869c <__assert_fail@plt+0x776c>
   18668:	cmp	r4, #0
   1866c:	bne	18678 <__assert_fail@plt+0x7748>
   18670:	mov	r0, #34	; 0x22
   18674:	pop	{r4, r5, r6, pc}
   18678:	sub	r4, r4, #1
   1867c:	mov	r1, r6
   18680:	mov	r2, r4
   18684:	mov	r0, r5
   18688:	bl	10d2c <memcpy@plt>
   1868c:	mov	r3, #0
   18690:	strb	r3, [r5, r4]
   18694:	mov	r0, #34	; 0x22
   18698:	pop	{r4, r5, r6, pc}
   1869c:	add	r2, r0, #1
   186a0:	mov	r1, r6
   186a4:	mov	r0, r5
   186a8:	bl	10d2c <memcpy@plt>
   186ac:	mov	r0, #0
   186b0:	pop	{r4, r5, r6, pc}
   186b4:	cmp	r4, #0
   186b8:	beq	186c8 <__assert_fail@plt+0x7798>
   186bc:	strb	r6, [r5]
   186c0:	mov	r0, #22
   186c4:	pop	{r4, r5, r6, pc}
   186c8:	mov	r0, #22
   186cc:	pop	{r4, r5, r6, pc}
   186d0:	mov	r1, #0
   186d4:	b	10ec4 <setlocale@plt>
   186d8:	subs	r2, r1, #1
   186dc:	bxeq	lr
   186e0:	bcc	188b8 <__assert_fail@plt+0x7988>
   186e4:	cmp	r0, r1
   186e8:	bls	1889c <__assert_fail@plt+0x796c>
   186ec:	tst	r1, r2
   186f0:	beq	188a8 <__assert_fail@plt+0x7978>
   186f4:	clz	r3, r0
   186f8:	clz	r2, r1
   186fc:	sub	r3, r2, r3
   18700:	rsbs	r3, r3, #31
   18704:	addne	r3, r3, r3, lsl #1
   18708:	mov	r2, #0
   1870c:	addne	pc, pc, r3, lsl #2
   18710:	nop			; (mov r0, r0)
   18714:	cmp	r0, r1, lsl #31
   18718:	adc	r2, r2, r2
   1871c:	subcs	r0, r0, r1, lsl #31
   18720:	cmp	r0, r1, lsl #30
   18724:	adc	r2, r2, r2
   18728:	subcs	r0, r0, r1, lsl #30
   1872c:	cmp	r0, r1, lsl #29
   18730:	adc	r2, r2, r2
   18734:	subcs	r0, r0, r1, lsl #29
   18738:	cmp	r0, r1, lsl #28
   1873c:	adc	r2, r2, r2
   18740:	subcs	r0, r0, r1, lsl #28
   18744:	cmp	r0, r1, lsl #27
   18748:	adc	r2, r2, r2
   1874c:	subcs	r0, r0, r1, lsl #27
   18750:	cmp	r0, r1, lsl #26
   18754:	adc	r2, r2, r2
   18758:	subcs	r0, r0, r1, lsl #26
   1875c:	cmp	r0, r1, lsl #25
   18760:	adc	r2, r2, r2
   18764:	subcs	r0, r0, r1, lsl #25
   18768:	cmp	r0, r1, lsl #24
   1876c:	adc	r2, r2, r2
   18770:	subcs	r0, r0, r1, lsl #24
   18774:	cmp	r0, r1, lsl #23
   18778:	adc	r2, r2, r2
   1877c:	subcs	r0, r0, r1, lsl #23
   18780:	cmp	r0, r1, lsl #22
   18784:	adc	r2, r2, r2
   18788:	subcs	r0, r0, r1, lsl #22
   1878c:	cmp	r0, r1, lsl #21
   18790:	adc	r2, r2, r2
   18794:	subcs	r0, r0, r1, lsl #21
   18798:	cmp	r0, r1, lsl #20
   1879c:	adc	r2, r2, r2
   187a0:	subcs	r0, r0, r1, lsl #20
   187a4:	cmp	r0, r1, lsl #19
   187a8:	adc	r2, r2, r2
   187ac:	subcs	r0, r0, r1, lsl #19
   187b0:	cmp	r0, r1, lsl #18
   187b4:	adc	r2, r2, r2
   187b8:	subcs	r0, r0, r1, lsl #18
   187bc:	cmp	r0, r1, lsl #17
   187c0:	adc	r2, r2, r2
   187c4:	subcs	r0, r0, r1, lsl #17
   187c8:	cmp	r0, r1, lsl #16
   187cc:	adc	r2, r2, r2
   187d0:	subcs	r0, r0, r1, lsl #16
   187d4:	cmp	r0, r1, lsl #15
   187d8:	adc	r2, r2, r2
   187dc:	subcs	r0, r0, r1, lsl #15
   187e0:	cmp	r0, r1, lsl #14
   187e4:	adc	r2, r2, r2
   187e8:	subcs	r0, r0, r1, lsl #14
   187ec:	cmp	r0, r1, lsl #13
   187f0:	adc	r2, r2, r2
   187f4:	subcs	r0, r0, r1, lsl #13
   187f8:	cmp	r0, r1, lsl #12
   187fc:	adc	r2, r2, r2
   18800:	subcs	r0, r0, r1, lsl #12
   18804:	cmp	r0, r1, lsl #11
   18808:	adc	r2, r2, r2
   1880c:	subcs	r0, r0, r1, lsl #11
   18810:	cmp	r0, r1, lsl #10
   18814:	adc	r2, r2, r2
   18818:	subcs	r0, r0, r1, lsl #10
   1881c:	cmp	r0, r1, lsl #9
   18820:	adc	r2, r2, r2
   18824:	subcs	r0, r0, r1, lsl #9
   18828:	cmp	r0, r1, lsl #8
   1882c:	adc	r2, r2, r2
   18830:	subcs	r0, r0, r1, lsl #8
   18834:	cmp	r0, r1, lsl #7
   18838:	adc	r2, r2, r2
   1883c:	subcs	r0, r0, r1, lsl #7
   18840:	cmp	r0, r1, lsl #6
   18844:	adc	r2, r2, r2
   18848:	subcs	r0, r0, r1, lsl #6
   1884c:	cmp	r0, r1, lsl #5
   18850:	adc	r2, r2, r2
   18854:	subcs	r0, r0, r1, lsl #5
   18858:	cmp	r0, r1, lsl #4
   1885c:	adc	r2, r2, r2
   18860:	subcs	r0, r0, r1, lsl #4
   18864:	cmp	r0, r1, lsl #3
   18868:	adc	r2, r2, r2
   1886c:	subcs	r0, r0, r1, lsl #3
   18870:	cmp	r0, r1, lsl #2
   18874:	adc	r2, r2, r2
   18878:	subcs	r0, r0, r1, lsl #2
   1887c:	cmp	r0, r1, lsl #1
   18880:	adc	r2, r2, r2
   18884:	subcs	r0, r0, r1, lsl #1
   18888:	cmp	r0, r1
   1888c:	adc	r2, r2, r2
   18890:	subcs	r0, r0, r1
   18894:	mov	r0, r2
   18898:	bx	lr
   1889c:	moveq	r0, #1
   188a0:	movne	r0, #0
   188a4:	bx	lr
   188a8:	clz	r2, r1
   188ac:	rsb	r2, r2, #31
   188b0:	lsr	r0, r0, r2
   188b4:	bx	lr
   188b8:	cmp	r0, #0
   188bc:	mvnne	r0, #0
   188c0:	b	18bf8 <__assert_fail@plt+0x7cc8>
   188c4:	cmp	r1, #0
   188c8:	beq	188b8 <__assert_fail@plt+0x7988>
   188cc:	push	{r0, r1, lr}
   188d0:	bl	186d8 <__assert_fail@plt+0x77a8>
   188d4:	pop	{r1, r2, lr}
   188d8:	mul	r3, r2, r0
   188dc:	sub	r1, r1, r3
   188e0:	bx	lr
   188e4:	cmp	r1, #0
   188e8:	beq	18af4 <__assert_fail@plt+0x7bc4>
   188ec:	eor	ip, r0, r1
   188f0:	rsbmi	r1, r1, #0
   188f4:	subs	r2, r1, #1
   188f8:	beq	18ac0 <__assert_fail@plt+0x7b90>
   188fc:	movs	r3, r0
   18900:	rsbmi	r3, r0, #0
   18904:	cmp	r3, r1
   18908:	bls	18acc <__assert_fail@plt+0x7b9c>
   1890c:	tst	r1, r2
   18910:	beq	18adc <__assert_fail@plt+0x7bac>
   18914:	clz	r2, r3
   18918:	clz	r0, r1
   1891c:	sub	r2, r0, r2
   18920:	rsbs	r2, r2, #31
   18924:	addne	r2, r2, r2, lsl #1
   18928:	mov	r0, #0
   1892c:	addne	pc, pc, r2, lsl #2
   18930:	nop			; (mov r0, r0)
   18934:	cmp	r3, r1, lsl #31
   18938:	adc	r0, r0, r0
   1893c:	subcs	r3, r3, r1, lsl #31
   18940:	cmp	r3, r1, lsl #30
   18944:	adc	r0, r0, r0
   18948:	subcs	r3, r3, r1, lsl #30
   1894c:	cmp	r3, r1, lsl #29
   18950:	adc	r0, r0, r0
   18954:	subcs	r3, r3, r1, lsl #29
   18958:	cmp	r3, r1, lsl #28
   1895c:	adc	r0, r0, r0
   18960:	subcs	r3, r3, r1, lsl #28
   18964:	cmp	r3, r1, lsl #27
   18968:	adc	r0, r0, r0
   1896c:	subcs	r3, r3, r1, lsl #27
   18970:	cmp	r3, r1, lsl #26
   18974:	adc	r0, r0, r0
   18978:	subcs	r3, r3, r1, lsl #26
   1897c:	cmp	r3, r1, lsl #25
   18980:	adc	r0, r0, r0
   18984:	subcs	r3, r3, r1, lsl #25
   18988:	cmp	r3, r1, lsl #24
   1898c:	adc	r0, r0, r0
   18990:	subcs	r3, r3, r1, lsl #24
   18994:	cmp	r3, r1, lsl #23
   18998:	adc	r0, r0, r0
   1899c:	subcs	r3, r3, r1, lsl #23
   189a0:	cmp	r3, r1, lsl #22
   189a4:	adc	r0, r0, r0
   189a8:	subcs	r3, r3, r1, lsl #22
   189ac:	cmp	r3, r1, lsl #21
   189b0:	adc	r0, r0, r0
   189b4:	subcs	r3, r3, r1, lsl #21
   189b8:	cmp	r3, r1, lsl #20
   189bc:	adc	r0, r0, r0
   189c0:	subcs	r3, r3, r1, lsl #20
   189c4:	cmp	r3, r1, lsl #19
   189c8:	adc	r0, r0, r0
   189cc:	subcs	r3, r3, r1, lsl #19
   189d0:	cmp	r3, r1, lsl #18
   189d4:	adc	r0, r0, r0
   189d8:	subcs	r3, r3, r1, lsl #18
   189dc:	cmp	r3, r1, lsl #17
   189e0:	adc	r0, r0, r0
   189e4:	subcs	r3, r3, r1, lsl #17
   189e8:	cmp	r3, r1, lsl #16
   189ec:	adc	r0, r0, r0
   189f0:	subcs	r3, r3, r1, lsl #16
   189f4:	cmp	r3, r1, lsl #15
   189f8:	adc	r0, r0, r0
   189fc:	subcs	r3, r3, r1, lsl #15
   18a00:	cmp	r3, r1, lsl #14
   18a04:	adc	r0, r0, r0
   18a08:	subcs	r3, r3, r1, lsl #14
   18a0c:	cmp	r3, r1, lsl #13
   18a10:	adc	r0, r0, r0
   18a14:	subcs	r3, r3, r1, lsl #13
   18a18:	cmp	r3, r1, lsl #12
   18a1c:	adc	r0, r0, r0
   18a20:	subcs	r3, r3, r1, lsl #12
   18a24:	cmp	r3, r1, lsl #11
   18a28:	adc	r0, r0, r0
   18a2c:	subcs	r3, r3, r1, lsl #11
   18a30:	cmp	r3, r1, lsl #10
   18a34:	adc	r0, r0, r0
   18a38:	subcs	r3, r3, r1, lsl #10
   18a3c:	cmp	r3, r1, lsl #9
   18a40:	adc	r0, r0, r0
   18a44:	subcs	r3, r3, r1, lsl #9
   18a48:	cmp	r3, r1, lsl #8
   18a4c:	adc	r0, r0, r0
   18a50:	subcs	r3, r3, r1, lsl #8
   18a54:	cmp	r3, r1, lsl #7
   18a58:	adc	r0, r0, r0
   18a5c:	subcs	r3, r3, r1, lsl #7
   18a60:	cmp	r3, r1, lsl #6
   18a64:	adc	r0, r0, r0
   18a68:	subcs	r3, r3, r1, lsl #6
   18a6c:	cmp	r3, r1, lsl #5
   18a70:	adc	r0, r0, r0
   18a74:	subcs	r3, r3, r1, lsl #5
   18a78:	cmp	r3, r1, lsl #4
   18a7c:	adc	r0, r0, r0
   18a80:	subcs	r3, r3, r1, lsl #4
   18a84:	cmp	r3, r1, lsl #3
   18a88:	adc	r0, r0, r0
   18a8c:	subcs	r3, r3, r1, lsl #3
   18a90:	cmp	r3, r1, lsl #2
   18a94:	adc	r0, r0, r0
   18a98:	subcs	r3, r3, r1, lsl #2
   18a9c:	cmp	r3, r1, lsl #1
   18aa0:	adc	r0, r0, r0
   18aa4:	subcs	r3, r3, r1, lsl #1
   18aa8:	cmp	r3, r1
   18aac:	adc	r0, r0, r0
   18ab0:	subcs	r3, r3, r1
   18ab4:	cmp	ip, #0
   18ab8:	rsbmi	r0, r0, #0
   18abc:	bx	lr
   18ac0:	teq	ip, r0
   18ac4:	rsbmi	r0, r0, #0
   18ac8:	bx	lr
   18acc:	movcc	r0, #0
   18ad0:	asreq	r0, ip, #31
   18ad4:	orreq	r0, r0, #1
   18ad8:	bx	lr
   18adc:	clz	r2, r1
   18ae0:	rsb	r2, r2, #31
   18ae4:	cmp	ip, #0
   18ae8:	lsr	r0, r3, r2
   18aec:	rsbmi	r0, r0, #0
   18af0:	bx	lr
   18af4:	cmp	r0, #0
   18af8:	mvngt	r0, #-2147483648	; 0x80000000
   18afc:	movlt	r0, #-2147483648	; 0x80000000
   18b00:	b	18bf8 <__assert_fail@plt+0x7cc8>
   18b04:	cmp	r1, #0
   18b08:	beq	18af4 <__assert_fail@plt+0x7bc4>
   18b0c:	push	{r0, r1, lr}
   18b10:	bl	188ec <__assert_fail@plt+0x79bc>
   18b14:	pop	{r1, r2, lr}
   18b18:	mul	r3, r2, r0
   18b1c:	sub	r1, r1, r3
   18b20:	bx	lr
   18b24:	cmp	r3, #0
   18b28:	cmpeq	r2, #0
   18b2c:	bne	18b50 <__assert_fail@plt+0x7c20>
   18b30:	cmp	r1, #0
   18b34:	movlt	r1, #-2147483648	; 0x80000000
   18b38:	movlt	r0, #0
   18b3c:	blt	18b4c <__assert_fail@plt+0x7c1c>
   18b40:	cmpeq	r0, #0
   18b44:	mvnne	r1, #-2147483648	; 0x80000000
   18b48:	mvnne	r0, #0
   18b4c:	b	18bf8 <__assert_fail@plt+0x7cc8>
   18b50:	sub	sp, sp, #8
   18b54:	push	{sp, lr}
   18b58:	cmp	r1, #0
   18b5c:	blt	18b7c <__assert_fail@plt+0x7c4c>
   18b60:	cmp	r3, #0
   18b64:	blt	18bb0 <__assert_fail@plt+0x7c80>
   18b68:	bl	18c08 <__assert_fail@plt+0x7cd8>
   18b6c:	ldr	lr, [sp, #4]
   18b70:	add	sp, sp, #8
   18b74:	pop	{r2, r3}
   18b78:	bx	lr
   18b7c:	rsbs	r0, r0, #0
   18b80:	sbc	r1, r1, r1, lsl #1
   18b84:	cmp	r3, #0
   18b88:	blt	18bd4 <__assert_fail@plt+0x7ca4>
   18b8c:	bl	18c08 <__assert_fail@plt+0x7cd8>
   18b90:	ldr	lr, [sp, #4]
   18b94:	add	sp, sp, #8
   18b98:	pop	{r2, r3}
   18b9c:	rsbs	r0, r0, #0
   18ba0:	sbc	r1, r1, r1, lsl #1
   18ba4:	rsbs	r2, r2, #0
   18ba8:	sbc	r3, r3, r3, lsl #1
   18bac:	bx	lr
   18bb0:	rsbs	r2, r2, #0
   18bb4:	sbc	r3, r3, r3, lsl #1
   18bb8:	bl	18c08 <__assert_fail@plt+0x7cd8>
   18bbc:	ldr	lr, [sp, #4]
   18bc0:	add	sp, sp, #8
   18bc4:	pop	{r2, r3}
   18bc8:	rsbs	r0, r0, #0
   18bcc:	sbc	r1, r1, r1, lsl #1
   18bd0:	bx	lr
   18bd4:	rsbs	r2, r2, #0
   18bd8:	sbc	r3, r3, r3, lsl #1
   18bdc:	bl	18c08 <__assert_fail@plt+0x7cd8>
   18be0:	ldr	lr, [sp, #4]
   18be4:	add	sp, sp, #8
   18be8:	pop	{r2, r3}
   18bec:	rsbs	r2, r2, #0
   18bf0:	sbc	r3, r3, r3, lsl #1
   18bf4:	bx	lr
   18bf8:	push	{r1, lr}
   18bfc:	mov	r0, #8
   18c00:	bl	10cd8 <raise@plt>
   18c04:	pop	{r1, pc}
   18c08:	cmp	r1, r3
   18c0c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18c10:	cmpeq	r0, r2
   18c14:	mov	r4, r0
   18c18:	mov	r5, r1
   18c1c:	ldr	r9, [sp, #28]
   18c20:	movcc	r0, #0
   18c24:	movcc	r1, #0
   18c28:	bcc	18d20 <__assert_fail@plt+0x7df0>
   18c2c:	cmp	r3, #0
   18c30:	clzeq	ip, r2
   18c34:	clzne	ip, r3
   18c38:	addeq	ip, ip, #32
   18c3c:	cmp	r5, #0
   18c40:	clzeq	r1, r4
   18c44:	addeq	r1, r1, #32
   18c48:	clzne	r1, r5
   18c4c:	sub	ip, ip, r1
   18c50:	sub	lr, ip, #32
   18c54:	lsl	r7, r3, ip
   18c58:	rsb	r8, ip, #32
   18c5c:	orr	r7, r7, r2, lsl lr
   18c60:	orr	r7, r7, r2, lsr r8
   18c64:	lsl	r6, r2, ip
   18c68:	cmp	r5, r7
   18c6c:	cmpeq	r4, r6
   18c70:	movcc	r0, #0
   18c74:	movcc	r1, #0
   18c78:	bcc	18c94 <__assert_fail@plt+0x7d64>
   18c7c:	mov	r3, #1
   18c80:	subs	r4, r4, r6
   18c84:	lsl	r1, r3, lr
   18c88:	lsl	r0, r3, ip
   18c8c:	orr	r1, r1, r3, lsr r8
   18c90:	sbc	r5, r5, r7
   18c94:	cmp	ip, #0
   18c98:	beq	18d20 <__assert_fail@plt+0x7df0>
   18c9c:	lsrs	r3, r7, #1
   18ca0:	rrx	r2, r6
   18ca4:	mov	r6, ip
   18ca8:	b	18ccc <__assert_fail@plt+0x7d9c>
   18cac:	subs	r4, r4, r2
   18cb0:	sbc	r5, r5, r3
   18cb4:	adds	r4, r4, r4
   18cb8:	adc	r5, r5, r5
   18cbc:	adds	r4, r4, #1
   18cc0:	adc	r5, r5, #0
   18cc4:	subs	r6, r6, #1
   18cc8:	beq	18ce8 <__assert_fail@plt+0x7db8>
   18ccc:	cmp	r5, r3
   18cd0:	cmpeq	r4, r2
   18cd4:	bcs	18cac <__assert_fail@plt+0x7d7c>
   18cd8:	adds	r4, r4, r4
   18cdc:	adc	r5, r5, r5
   18ce0:	subs	r6, r6, #1
   18ce4:	bne	18ccc <__assert_fail@plt+0x7d9c>
   18ce8:	lsr	r6, r4, ip
   18cec:	lsr	r7, r5, ip
   18cf0:	orr	r6, r6, r5, lsl r8
   18cf4:	adds	r2, r0, r4
   18cf8:	orr	r6, r6, r5, lsr lr
   18cfc:	adc	r3, r1, r5
   18d00:	lsl	r1, r7, ip
   18d04:	orr	r1, r1, r6, lsl lr
   18d08:	lsl	r0, r6, ip
   18d0c:	orr	r1, r1, r6, lsr r8
   18d10:	subs	r0, r2, r0
   18d14:	mov	r4, r6
   18d18:	mov	r5, r7
   18d1c:	sbc	r1, r3, r1
   18d20:	cmp	r9, #0
   18d24:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18d28:	strd	r4, [r9]
   18d2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18d30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d34:	mov	r7, r0
   18d38:	ldr	r6, [pc, #72]	; 18d88 <__assert_fail@plt+0x7e58>
   18d3c:	ldr	r5, [pc, #72]	; 18d8c <__assert_fail@plt+0x7e5c>
   18d40:	add	r6, pc, r6
   18d44:	add	r5, pc, r5
   18d48:	sub	r6, r6, r5
   18d4c:	mov	r8, r1
   18d50:	mov	r9, r2
   18d54:	bl	10ca0 <calloc@plt-0x20>
   18d58:	asrs	r6, r6, #2
   18d5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d60:	mov	r4, #0
   18d64:	add	r4, r4, #1
   18d68:	ldr	r3, [r5], #4
   18d6c:	mov	r2, r9
   18d70:	mov	r1, r8
   18d74:	mov	r0, r7
   18d78:	blx	r3
   18d7c:	cmp	r6, r4
   18d80:	bne	18d64 <__assert_fail@plt+0x7e34>
   18d84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d88:	andeq	r1, r1, r8, asr #3
   18d8c:	andeq	r1, r1, r0, asr #3
   18d90:	bx	lr
   18d94:	ldr	r3, [pc, #12]	; 18da8 <__assert_fail@plt+0x7e78>
   18d98:	mov	r1, #0
   18d9c:	add	r3, pc, r3
   18da0:	ldr	r2, [r3]
   18da4:	b	10e58 <__cxa_atexit@plt>
   18da8:	andeq	r1, r1, r4, asr #6

Disassembly of section .fini:

00018dac <.fini>:
   18dac:	push	{r3, lr}
   18db0:	pop	{r3, pc}
