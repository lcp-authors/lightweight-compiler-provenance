
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

000119d0 <.init>:
   119d0:	push	{r3, lr}
   119d4:	bl	14fe0 <__assert_fail@plt+0x3098>
   119d8:	pop	{r3, pc}

Disassembly of section .plt:

000119dc <pthread_mutex_unlock@plt-0x14>:
   119dc:	push	{lr}		; (str lr, [sp, #-4]!)
   119e0:	ldr	lr, [pc, #4]	; 119ec <pthread_mutex_unlock@plt-0x4>
   119e4:	add	lr, pc, lr
   119e8:	ldr	pc, [lr, #8]!
   119ec:	andeq	r8, r2, r4, lsl r6

000119f0 <pthread_mutex_unlock@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #40, 20	; 0x28000
   119f8:	ldr	pc, [ip, #1556]!	; 0x614

000119fc <fdopen@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #40, 20	; 0x28000
   11a04:	ldr	pc, [ip, #1548]!	; 0x60c

00011a08 <calloc@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #40, 20	; 0x28000
   11a10:	ldr	pc, [ip, #1540]!	; 0x604

00011a14 <fputs_unlocked@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #40, 20	; 0x28000
   11a1c:	ldr	pc, [ip, #1532]!	; 0x5fc

00011a20 <raise@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #40, 20	; 0x28000
   11a28:	ldr	pc, [ip, #1524]!	; 0x5f4

00011a2c <strcmp@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #40, 20	; 0x28000
   11a34:	ldr	pc, [ip, #1516]!	; 0x5ec

00011a38 <strtol@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #40, 20	; 0x28000
   11a40:	ldr	pc, [ip, #1508]!	; 0x5e4

00011a44 <posix_fadvise64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #40, 20	; 0x28000
   11a4c:	ldr	pc, [ip, #1500]!	; 0x5dc

00011a50 <pause@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #40, 20	; 0x28000
   11a58:	ldr	pc, [ip, #1492]!	; 0x5d4

00011a5c <pthread_mutex_destroy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #40, 20	; 0x28000
   11a64:	ldr	pc, [ip, #1484]!	; 0x5cc

00011a68 <fflush@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #40, 20	; 0x28000
   11a70:	ldr	pc, [ip, #1476]!	; 0x5c4

00011a74 <wcwidth@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #40, 20	; 0x28000
   11a7c:	ldr	pc, [ip, #1468]!	; 0x5bc

00011a80 <memmove@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #40, 20	; 0x28000
   11a88:	ldr	pc, [ip, #1460]!	; 0x5b4

00011a8c <free@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #40, 20	; 0x28000
   11a94:	ldr	pc, [ip, #1452]!	; 0x5ac

00011a98 <pthread_mutex_lock@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #40, 20	; 0x28000
   11aa0:	ldr	pc, [ip, #1444]!	; 0x5a4

00011aa4 <nanosleep@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #40, 20	; 0x28000
   11aac:	ldr	pc, [ip, #1436]!	; 0x59c

00011ab0 <ferror@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #40, 20	; 0x28000
   11ab8:	ldr	pc, [ip, #1428]!	; 0x594

00011abc <_exit@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #40, 20	; 0x28000
   11ac4:	ldr	pc, [ip, #1420]!	; 0x58c

00011ac8 <memcpy@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #40, 20	; 0x28000
   11ad0:	ldr	pc, [ip, #1412]!	; 0x584

00011ad4 <execlp@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #40, 20	; 0x28000
   11adc:	ldr	pc, [ip, #1404]!	; 0x57c

00011ae0 <pthread_mutex_init@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #40, 20	; 0x28000
   11ae8:	ldr	pc, [ip, #1396]!	; 0x574

00011aec <__strtoull_internal@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #40, 20	; 0x28000
   11af4:	ldr	pc, [ip, #1388]!	; 0x56c

00011af8 <mbsinit@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #40, 20	; 0x28000
   11b00:	ldr	pc, [ip, #1380]!	; 0x564

00011b04 <signal@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #40, 20	; 0x28000
   11b0c:	ldr	pc, [ip, #1372]!	; 0x55c

00011b10 <__sched_cpucount@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #40, 20	; 0x28000
   11b18:	ldr	pc, [ip, #1364]!	; 0x554

00011b1c <strtold@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #40, 20	; 0x28000
   11b24:	ldr	pc, [ip, #1356]!	; 0x54c

00011b28 <ftruncate64@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #40, 20	; 0x28000
   11b30:	ldr	pc, [ip, #1348]!	; 0x544

00011b34 <fwrite_unlocked@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #40, 20	; 0x28000
   11b3c:	ldr	pc, [ip, #1340]!	; 0x53c

00011b40 <memcmp@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #40, 20	; 0x28000
   11b48:	ldr	pc, [ip, #1332]!	; 0x534

00011b4c <fputc_unlocked@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #40, 20	; 0x28000
   11b54:	ldr	pc, [ip, #1324]!	; 0x52c

00011b58 <dcgettext@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #40, 20	; 0x28000
   11b60:	ldr	pc, [ip, #1316]!	; 0x524

00011b64 <pthread_cond_init@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #40, 20	; 0x28000
   11b6c:	ldr	pc, [ip, #1308]!	; 0x51c

00011b70 <sysconf@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #40, 20	; 0x28000
   11b78:	ldr	pc, [ip, #1300]!	; 0x514

00011b7c <unlink@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #40, 20	; 0x28000
   11b84:	ldr	pc, [ip, #1292]!	; 0x50c

00011b88 <dup2@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #40, 20	; 0x28000
   11b90:	ldr	pc, [ip, #1284]!	; 0x504

00011b94 <getrlimit64@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #40, 20	; 0x28000
   11b9c:	ldr	pc, [ip, #1276]!	; 0x4fc

00011ba0 <realloc@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #40, 20	; 0x28000
   11ba8:	ldr	pc, [ip, #1268]!	; 0x4f4

00011bac <sigismember@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #40, 20	; 0x28000
   11bb4:	ldr	pc, [ip, #1260]!	; 0x4ec

00011bb8 <textdomain@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #40, 20	; 0x28000
   11bc0:	ldr	pc, [ip, #1252]!	; 0x4e4

00011bc4 <iswcntrl@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #40, 20	; 0x28000
   11bcc:	ldr	pc, [ip, #1244]!	; 0x4dc

00011bd0 <pthread_cond_destroy@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #40, 20	; 0x28000
   11bd8:	ldr	pc, [ip, #1236]!	; 0x4d4

00011bdc <fflush_unlocked@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #40, 20	; 0x28000
   11be4:	ldr	pc, [ip, #1228]!	; 0x4cc

00011be8 <iswprint@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #40, 20	; 0x28000
   11bf0:	ldr	pc, [ip, #1220]!	; 0x4c4

00011bf4 <__fxstat64@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #40, 20	; 0x28000
   11bfc:	ldr	pc, [ip, #1212]!	; 0x4bc

00011c00 <sigaction@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #40, 20	; 0x28000
   11c08:	ldr	pc, [ip, #1204]!	; 0x4b4

00011c0c <mkostemp64@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #40, 20	; 0x28000
   11c14:	ldr	pc, [ip, #1196]!	; 0x4ac

00011c18 <fwrite@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #40, 20	; 0x28000
   11c20:	ldr	pc, [ip, #1188]!	; 0x4a4

00011c24 <lseek64@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #40, 20	; 0x28000
   11c2c:	ldr	pc, [ip, #1180]!	; 0x49c

00011c30 <__stpcpy_chk@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #40, 20	; 0x28000
   11c38:	ldr	pc, [ip, #1172]!	; 0x494

00011c3c <waitpid@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #40, 20	; 0x28000
   11c44:	ldr	pc, [ip, #1164]!	; 0x48c

00011c48 <__ctype_get_mb_cur_max@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #40, 20	; 0x28000
   11c50:	ldr	pc, [ip, #1156]!	; 0x484

00011c54 <strcpy@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #40, 20	; 0x28000
   11c5c:	ldr	pc, [ip, #1148]!	; 0x47c

00011c60 <pthread_sigmask@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #40, 20	; 0x28000
   11c68:	ldr	pc, [ip, #1140]!	; 0x474

00011c6c <pthread_create@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #40, 20	; 0x28000
   11c74:	ldr	pc, [ip, #1132]!	; 0x46c

00011c78 <__fpending@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #40, 20	; 0x28000
   11c80:	ldr	pc, [ip, #1124]!	; 0x464

00011c84 <mbrtowc@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #40, 20	; 0x28000
   11c8c:	ldr	pc, [ip, #1116]!	; 0x45c

00011c90 <error@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #40, 20	; 0x28000
   11c98:	ldr	pc, [ip, #1108]!	; 0x454

00011c9c <open64@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #40, 20	; 0x28000
   11ca4:	ldr	pc, [ip, #1100]!	; 0x44c

00011ca8 <strcoll@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #40, 20	; 0x28000
   11cb0:	ldr	pc, [ip, #1092]!	; 0x444

00011cb4 <getenv@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #40, 20	; 0x28000
   11cbc:	ldr	pc, [ip, #1084]!	; 0x43c

00011cc0 <mkstemp64@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #40, 20	; 0x28000
   11cc8:	ldr	pc, [ip, #1076]!	; 0x434

00011ccc <sysinfo@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #40, 20	; 0x28000
   11cd4:	ldr	pc, [ip, #1068]!	; 0x42c

00011cd8 <malloc@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #40, 20	; 0x28000
   11ce0:	ldr	pc, [ip, #1060]!	; 0x424

00011ce4 <sigaddset@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #40, 20	; 0x28000
   11cec:	ldr	pc, [ip, #1052]!	; 0x41c

00011cf0 <__libc_start_main@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #40, 20	; 0x28000
   11cf8:	ldr	pc, [ip, #1044]!	; 0x414

00011cfc <__freading@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #40, 20	; 0x28000
   11d04:	ldr	pc, [ip, #1036]!	; 0x40c

00011d08 <__ctype_toupper_loc@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #40, 20	; 0x28000
   11d10:	ldr	pc, [ip, #1028]!	; 0x404

00011d14 <__gmon_start__@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #40, 20	; 0x28000
   11d1c:	ldr	pc, [ip, #1020]!	; 0x3fc

00011d20 <getopt_long@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #40, 20	; 0x28000
   11d28:	ldr	pc, [ip, #1012]!	; 0x3f4

00011d2c <__ctype_b_loc@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #40, 20	; 0x28000
   11d34:	ldr	pc, [ip, #1004]!	; 0x3ec

00011d38 <exit@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #40, 20	; 0x28000
   11d40:	ldr	pc, [ip, #996]!	; 0x3e4

00011d44 <strtoul@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #40, 20	; 0x28000
   11d4c:	ldr	pc, [ip, #988]!	; 0x3dc

00011d50 <strlen@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #40, 20	; 0x28000
   11d58:	ldr	pc, [ip, #980]!	; 0x3d4

00011d5c <strchr@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #40, 20	; 0x28000
   11d64:	ldr	pc, [ip, #972]!	; 0x3cc

00011d68 <strxfrm@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #40, 20	; 0x28000
   11d70:	ldr	pc, [ip, #964]!	; 0x3c4

00011d74 <__errno_location@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #40, 20	; 0x28000
   11d7c:	ldr	pc, [ip, #956]!	; 0x3bc

00011d80 <__cxa_atexit@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #40, 20	; 0x28000
   11d88:	ldr	pc, [ip, #948]!	; 0x3b4

00011d8c <setvbuf@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #40, 20	; 0x28000
   11d94:	ldr	pc, [ip, #940]!	; 0x3ac

00011d98 <memset@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #40, 20	; 0x28000
   11da0:	ldr	pc, [ip, #932]!	; 0x3a4

00011da4 <fgetc@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #40, 20	; 0x28000
   11dac:	ldr	pc, [ip, #924]!	; 0x39c

00011db0 <__printf_chk@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #40, 20	; 0x28000
   11db8:	ldr	pc, [ip, #916]!	; 0x394

00011dbc <write@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #40, 20	; 0x28000
   11dc4:	ldr	pc, [ip, #908]!	; 0x38c

00011dc8 <fileno@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #40, 20	; 0x28000
   11dd0:	ldr	pc, [ip, #900]!	; 0x384

00011dd4 <__fprintf_chk@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #40, 20	; 0x28000
   11ddc:	ldr	pc, [ip, #892]!	; 0x37c

00011de0 <memchr@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #40, 20	; 0x28000
   11de8:	ldr	pc, [ip, #884]!	; 0x374

00011dec <fclose@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #40, 20	; 0x28000
   11df4:	ldr	pc, [ip, #876]!	; 0x36c

00011df8 <pipe@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #40, 20	; 0x28000
   11e00:	ldr	pc, [ip, #868]!	; 0x364

00011e04 <fseeko64@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #40, 20	; 0x28000
   11e0c:	ldr	pc, [ip, #860]!	; 0x35c

00011e10 <fcntl64@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #40, 20	; 0x28000
   11e18:	ldr	pc, [ip, #852]!	; 0x354

00011e1c <__overflow@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #40, 20	; 0x28000
   11e24:	ldr	pc, [ip, #844]!	; 0x34c

00011e28 <setlocale@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #40, 20	; 0x28000
   11e30:	ldr	pc, [ip, #836]!	; 0x344

00011e34 <sigemptyset@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #40, 20	; 0x28000
   11e3c:	ldr	pc, [ip, #828]!	; 0x33c

00011e40 <fork@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #40, 20	; 0x28000
   11e48:	ldr	pc, [ip, #820]!	; 0x334

00011e4c <__explicit_bzero_chk@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #40, 20	; 0x28000
   11e54:	ldr	pc, [ip, #812]!	; 0x32c

00011e58 <strrchr@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #40, 20	; 0x28000
   11e60:	ldr	pc, [ip, #804]!	; 0x324

00011e64 <pthread_join@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #40, 20	; 0x28000
   11e6c:	ldr	pc, [ip, #796]!	; 0x31c

00011e70 <nl_langinfo@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #40, 20	; 0x28000
   11e78:	ldr	pc, [ip, #788]!	; 0x314

00011e7c <localeconv@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #40, 20	; 0x28000
   11e84:	ldr	pc, [ip, #780]!	; 0x30c

00011e88 <clearerr_unlocked@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #40, 20	; 0x28000
   11e90:	ldr	pc, [ip, #772]!	; 0x304

00011e94 <fopen64@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #40, 20	; 0x28000
   11e9c:	ldr	pc, [ip, #764]!	; 0x2fc

00011ea0 <qsort@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #40, 20	; 0x28000
   11ea8:	ldr	pc, [ip, #756]!	; 0x2f4

00011eac <pipe2@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #40, 20	; 0x28000
   11eb4:	ldr	pc, [ip, #748]!	; 0x2ec

00011eb8 <pthread_cond_wait@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #40, 20	; 0x28000
   11ec0:	ldr	pc, [ip, #740]!	; 0x2e4

00011ec4 <euidaccess@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #40, 20	; 0x28000
   11ecc:	ldr	pc, [ip, #732]!	; 0x2dc

00011ed0 <sched_getaffinity@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #40, 20	; 0x28000
   11ed8:	ldr	pc, [ip, #724]!	; 0x2d4

00011edc <bindtextdomain@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #40, 20	; 0x28000
   11ee4:	ldr	pc, [ip, #716]!	; 0x2cc

00011ee8 <fread_unlocked@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #40, 20	; 0x28000
   11ef0:	ldr	pc, [ip, #708]!	; 0x2c4

00011ef4 <getrandom@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #40, 20	; 0x28000
   11efc:	ldr	pc, [ip, #700]!	; 0x2bc

00011f00 <__xstat64@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #40, 20	; 0x28000
   11f08:	ldr	pc, [ip, #692]!	; 0x2b4

00011f0c <strncmp@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #40, 20	; 0x28000
   11f14:	ldr	pc, [ip, #684]!	; 0x2ac

00011f18 <pthread_cond_signal@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #40, 20	; 0x28000
   11f20:	ldr	pc, [ip, #676]!	; 0x2a4

00011f24 <abort@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #40, 20	; 0x28000
   11f2c:	ldr	pc, [ip, #668]!	; 0x29c

00011f30 <close@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #40, 20	; 0x28000
   11f38:	ldr	pc, [ip, #660]!	; 0x294

00011f3c <dcngettext@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #40, 20	; 0x28000
   11f44:	ldr	pc, [ip, #652]!	; 0x28c

00011f48 <__assert_fail@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #40, 20	; 0x28000
   11f50:	ldr	pc, [ip, #644]!	; 0x284

Disassembly of section .text:

00011f58 <_obstack_begin@@Base-0x14b74>:
   11f58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f5c:	mov	r4, #2
   11f60:	strd	r6, [sp, #8]
   11f64:	mov	r7, r1
   11f68:	strd	r8, [sp, #16]
   11f6c:	strd	sl, [sp, #24]
   11f70:	movw	fp, #41696	; 0xa2e0
   11f74:	movt	fp, #3
   11f78:	str	lr, [sp, #32]
   11f7c:	vpush	{d8-d10}
   11f80:	sub	sp, sp, #548	; 0x224
   11f84:	str	r0, [sp, #36]	; 0x24
   11f88:	movw	r0, #35924	; 0x8c54
   11f8c:	movt	r0, #2
   11f90:	bl	11cb4 <getenv@plt>
   11f94:	adds	r3, r0, #0
   11f98:	str	r0, [sp, #76]	; 0x4c
   11f9c:	movne	r3, #1
   11fa0:	str	r3, [sp, #24]
   11fa4:	bl	1f728 <__assert_fail@plt+0xd7e0>
   11fa8:	sub	r3, r0, #199680	; 0x30c00
   11fac:	ldr	r0, [r7]
   11fb0:	sub	r3, r3, #432	; 0x1b0
   11fb4:	cmp	r3, #696	; 0x2b8
   11fb8:	movls	r3, #0
   11fbc:	movhi	r3, #1
   11fc0:	str	r3, [sp, #40]	; 0x28
   11fc4:	bl	1f78c <__assert_fail@plt+0xd844>
   11fc8:	movw	r1, #33096	; 0x8148
   11fcc:	movt	r1, #2
   11fd0:	mov	r0, #6
   11fd4:	bl	11e28 <setlocale@plt>
   11fd8:	movw	r1, #35940	; 0x8c64
   11fdc:	movt	r1, #2
   11fe0:	str	r0, [sp, #80]	; 0x50
   11fe4:	movw	r0, #35744	; 0x8ba0
   11fe8:	movt	r0, #2
   11fec:	bl	11edc <bindtextdomain@plt>
   11ff0:	movw	r0, #35744	; 0x8ba0
   11ff4:	movt	r0, #2
   11ff8:	bl	11bb8 <textdomain@plt>
   11ffc:	movw	r3, #41584	; 0xa270
   12000:	movt	r3, #3
   12004:	mov	r0, #3
   12008:	str	r4, [r3]
   1200c:	bl	1d3cc <__assert_fail@plt+0xb484>
   12010:	strb	r0, [fp, #1280]	; 0x500
   12014:	mov	r0, r4
   12018:	bl	1d3cc <__assert_fail@plt+0xb484>
   1201c:	mov	r4, r0
   12020:	strb	r0, [fp, #1488]	; 0x5d0
   12024:	bl	11e7c <localeconv@plt>
   12028:	ldr	r2, [r0]
   1202c:	ldrb	r3, [r2]
   12030:	cmp	r3, #0
   12034:	strb	r3, [fp, #1308]	; 0x51c
   12038:	beq	12110 <__assert_fail@plt+0x1c8>
   1203c:	ldrb	r3, [r2, #1]
   12040:	cmp	r3, #0
   12044:	bne	12110 <__assert_fail@plt+0x1c8>
   12048:	ldr	r2, [r0, #4]
   1204c:	ldrb	r3, [r2]
   12050:	cmp	r3, #0
   12054:	str	r3, [fp, #1304]	; 0x518
   12058:	beq	12988 <__assert_fail@plt+0xa40>
   1205c:	ldrb	r3, [r2, #1]
   12060:	cmp	r3, #0
   12064:	bne	12980 <__assert_fail@plt+0xa38>
   12068:	mov	r5, #0
   1206c:	ldr	r6, [pc, #884]	; 123e8 <__assert_fail@plt+0x4a0>
   12070:	mov	r9, #1
   12074:	strb	r5, [fp, #1311]	; 0x51f
   12078:	bl	11d2c <__ctype_b_loc@plt>
   1207c:	mov	sl, r0
   12080:	str	r0, [sp, #56]	; 0x38
   12084:	bl	11d08 <__ctype_toupper_loc@plt>
   12088:	ldr	lr, [pc, #860]	; 123ec <__assert_fail@plt+0x4a4>
   1208c:	add	r8, r6, #512	; 0x200
   12090:	mov	r1, r5
   12094:	mov	r2, sl
   12098:	sub	ip, lr, #528	; 0x210
   1209c:	b	120e4 <__assert_fail@plt+0x19c>
   120a0:	cmp	r1, #10
   120a4:	beq	1211c <__assert_fail@plt+0x1d4>
   120a8:	eor	sl, r3, #16384	; 0x4000
   120ac:	eor	r3, r3, #8
   120b0:	strb	r5, [lr]
   120b4:	ubfx	sl, sl, #14, #1
   120b8:	ubfx	r5, r3, #3, #1
   120bc:	strb	sl, [ip]
   120c0:	ldr	r3, [r0]
   120c4:	add	lr, lr, #1
   120c8:	add	ip, ip, #1
   120cc:	strb	r5, [r6, #1]!
   120d0:	ldr	r3, [r3, r1, lsl #2]
   120d4:	add	r1, r1, #1
   120d8:	cmp	r1, #256	; 0x100
   120dc:	strb	r3, [r8, #1]!
   120e0:	beq	12134 <__assert_fail@plt+0x1ec>
   120e4:	ldr	sl, [r2]
   120e8:	lsl	r3, r1, #1
   120ec:	ldrh	r3, [sl, r3]
   120f0:	ands	r5, r3, #1
   120f4:	beq	120a0 <__assert_fail@plt+0x158>
   120f8:	eor	r3, r3, #16384	; 0x4000
   120fc:	mov	r5, #0
   12100:	strb	r9, [lr]
   12104:	ubfx	r3, r3, #14, #1
   12108:	strb	r3, [ip]
   1210c:	b	120c0 <__assert_fail@plt+0x178>
   12110:	mov	r3, #46	; 0x2e
   12114:	strb	r3, [fp, #1308]	; 0x51c
   12118:	b	12048 <__assert_fail@plt+0x100>
   1211c:	ldrh	r3, [sl, #20]
   12120:	strb	r9, [fp, #794]	; 0x31a
   12124:	eor	r3, r3, #16384	; 0x4000
   12128:	ubfx	r3, r3, #14, #1
   1212c:	strb	r3, [fp, #266]	; 0x10a
   12130:	b	120c0 <__assert_fail@plt+0x178>
   12134:	cmp	r4, #0
   12138:	beq	12200 <__assert_fail@plt+0x2b8>
   1213c:	ldr	r9, [pc, #684]	; 123f0 <__assert_fail@plt+0x4a8>
   12140:	mov	r8, #0
   12144:	mov	r5, r8
   12148:	str	r7, [sp, #44]	; 0x2c
   1214c:	ldr	r4, [sp, #56]	; 0x38
   12150:	add	r0, r8, #131072	; 0x20000
   12154:	add	r0, r0, #14
   12158:	bl	11e70 <nl_langinfo@plt>
   1215c:	mov	r7, r0
   12160:	bl	11d50 <strlen@plt>
   12164:	mov	r6, r0
   12168:	add	r0, r0, #1
   1216c:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   12170:	str	r0, [r9, r8, lsl #3]
   12174:	add	r8, r8, #1
   12178:	cmp	r6, #0
   1217c:	add	r3, r9, r8, lsl #3
   12180:	str	r8, [r3, #-4]
   12184:	beq	12994 <__assert_fail@plt+0xa4c>
   12188:	ldr	sl, [r4]
   1218c:	sub	r6, r6, #1
   12190:	sub	r1, r7, #1
   12194:	mov	ip, #0
   12198:	add	r7, r7, r6
   1219c:	mov	r2, r0
   121a0:	ldrb	r3, [r1, #1]!
   121a4:	mov	lr, r2
   121a8:	lsl	r6, r3, #1
   121ac:	ldrh	r6, [sl, r6]
   121b0:	tst	r6, #1
   121b4:	bne	121d0 <__assert_fail@plt+0x288>
   121b8:	add	r3, fp, r3
   121bc:	add	ip, ip, #1
   121c0:	ldrb	r3, [r3, #512]	; 0x200
   121c4:	strb	r3, [r2]
   121c8:	add	r2, r0, ip
   121cc:	mov	lr, r2
   121d0:	cmp	r7, r1
   121d4:	bne	121a0 <__assert_fail@plt+0x258>
   121d8:	cmp	r8, #12
   121dc:	strb	r5, [lr]
   121e0:	bne	12150 <__assert_fail@plt+0x208>
   121e4:	movw	r3, #22344	; 0x5748
   121e8:	movt	r3, #1
   121ec:	ldr	r0, [pc, #508]	; 123f0 <__assert_fail@plt+0x4a8>
   121f0:	mov	r1, r8
   121f4:	mov	r2, #8
   121f8:	ldr	r7, [sp, #44]	; 0x2c
   121fc:	bl	11ea0 <qsort@plt>
   12200:	ldr	r8, [pc, #492]	; 123f4 <__assert_fail@plt+0x4ac>
   12204:	ldr	r4, [pc, #492]	; 123f8 <__assert_fail@plt+0x4b0>
   12208:	mov	r0, r8
   1220c:	add	r6, r4, #44	; 0x2c
   12210:	mov	r5, r4
   12214:	bl	11e34 <sigemptyset@plt>
   12218:	ldr	r9, [r5], #4
   1221c:	add	r2, sp, #400	; 0x190
   12220:	mov	r1, #0
   12224:	mov	r0, r9
   12228:	bl	11c00 <sigaction@plt>
   1222c:	ldr	r3, [sp, #400]	; 0x190
   12230:	cmp	r3, #1
   12234:	beq	12244 <__assert_fail@plt+0x2fc>
   12238:	mov	r1, r9
   1223c:	mov	r0, r8
   12240:	bl	11ce4 <sigaddset@plt>
   12244:	cmp	r6, r5
   12248:	bne	12218 <__assert_fail@plt+0x2d0>
   1224c:	ldr	r5, [pc, #416]	; 123f4 <__assert_fail@plt+0x4ac>
   12250:	movw	r3, #22500	; 0x57e4
   12254:	movt	r3, #1
   12258:	mov	r2, #128	; 0x80
   1225c:	add	r0, sp, #404	; 0x194
   12260:	str	r3, [sp, #400]	; 0x190
   12264:	mov	r1, r5
   12268:	bl	11ac8 <memcpy@plt>
   1226c:	mov	r3, #0
   12270:	str	r3, [sp, #532]	; 0x214
   12274:	b	12280 <__assert_fail@plt+0x338>
   12278:	cmp	r6, r4
   1227c:	beq	122b0 <__assert_fail@plt+0x368>
   12280:	ldr	r8, [r4], #4
   12284:	mov	r0, r5
   12288:	mov	r1, r8
   1228c:	bl	11bac <sigismember@plt>
   12290:	cmp	r0, #0
   12294:	beq	12278 <__assert_fail@plt+0x330>
   12298:	mov	r0, r8
   1229c:	mov	r2, #0
   122a0:	add	r1, sp, #400	; 0x190
   122a4:	bl	11c00 <sigaction@plt>
   122a8:	cmp	r6, r4
   122ac:	bne	12280 <__assert_fail@plt+0x338>
   122b0:	mov	r1, #0
   122b4:	mov	r0, #17
   122b8:	vldr	d9, [pc, #280]	; 123d8 <__assert_fail@plt+0x490>
   122bc:	bl	11b04 <signal@plt>
   122c0:	movw	r0, #28308	; 0x6e94
   122c4:	movt	r0, #1
   122c8:	vldr	d8, [pc, #272]	; 123e0 <__assert_fail@plt+0x498>
   122cc:	bl	2752c <_obstack_memory_used@@Base+0x654>
   122d0:	mvn	r2, #0
   122d4:	ldr	r8, [sp, #36]	; 0x24
   122d8:	mov	r3, #0
   122dc:	mov	r1, #4
   122e0:	mov	r6, r3
   122e4:	mov	r5, r3
   122e8:	str	r3, [sp, #36]	; 0x24
   122ec:	str	r2, [sp, #256]	; 0x100
   122f0:	str	r2, [sp, #264]	; 0x108
   122f4:	ldr	r2, [pc, #268]	; 12408 <__assert_fail@plt+0x4c0>
   122f8:	mov	r0, r8
   122fc:	str	r3, [sp, #48]	; 0x30
   12300:	str	r3, [sp, #52]	; 0x34
   12304:	str	r3, [sp, #60]	; 0x3c
   12308:	str	r3, [sp, #64]	; 0x40
   1230c:	add	r2, r2, #572	; 0x23c
   12310:	str	r3, [sp, #68]	; 0x44
   12314:	str	r2, [sp, #72]	; 0x48
   12318:	str	r3, [sp, #260]	; 0x104
   1231c:	str	r3, [sp, #268]	; 0x10c
   12320:	str	r3, [sp, #272]	; 0x110
   12324:	str	r3, [sp, #276]	; 0x114
   12328:	str	r3, [sp, #280]	; 0x118
   1232c:	str	r3, [sp, #284]	; 0x11c
   12330:	str	r3, [sp, #288]	; 0x120
   12334:	str	r3, [sp, #292]	; 0x124
   12338:	bl	24d54 <__assert_fail@plt+0x12e0c>
   1233c:	mov	r4, r0
   12340:	str	fp, [sp, #44]	; 0x2c
   12344:	mov	fp, r8
   12348:	b	123b8 <__assert_fail@plt+0x470>
   1234c:	ldr	r3, [sp, #24]
   12350:	cmp	r5, #0
   12354:	moveq	r3, #0
   12358:	cmp	r3, #0
   1235c:	beq	12430 <__assert_fail@plt+0x4e8>
   12360:	ldrd	r2, [sp, #36]	; 0x24
   12364:	movw	sl, #41664	; 0xa2c0
   12368:	movt	sl, #3
   1236c:	eor	r3, r3, #1
   12370:	cmp	r2, #0
   12374:	orrne	r3, r3, #1
   12378:	cmp	r3, #0
   1237c:	ldr	r3, [sl]
   12380:	bne	1239c <__assert_fail@plt+0x454>
   12384:	cmp	fp, r3
   12388:	beq	12898 <__assert_fail@plt+0x950>
   1238c:	ldr	r2, [r7, r3, lsl #2]
   12390:	ldrb	r1, [r2]
   12394:	cmp	r1, #45	; 0x2d
   12398:	beq	1240c <__assert_fail@plt+0x4c4>
   1239c:	cmp	fp, r3
   123a0:	ble	14bd4 <__assert_fail@plt+0x2c8c>
   123a4:	ldr	r2, [r7, r3, lsl #2]
   123a8:	add	r3, r3, #1
   123ac:	str	r3, [sl]
   123b0:	str	r2, [r4, r5, lsl #2]
   123b4:	add	r5, r5, #1
   123b8:	mvn	r3, #0
   123bc:	cmp	r6, r3
   123c0:	str	r3, [sp, #152]	; 0x98
   123c4:	bne	1234c <__assert_fail@plt+0x404>
   123c8:	movw	sl, #41664	; 0xa2c0
   123cc:	movt	sl, #3
   123d0:	ldr	r3, [sl]
   123d4:	b	1239c <__assert_fail@plt+0x454>
   123d8:	andeq	r0, r0, r0
   123dc:	subsmi	r0, r9, r0
   123e0:	andeq	r0, r0, r0
   123e4:	mvnsmi	r0, #0
   123e8:	ldrdeq	sl, [r3], -pc	; <UNPREDICTABLE>
   123ec:	strdeq	sl, [r3], -r0
   123f0:	strdeq	sl, [r3], -r0
   123f4:	strdeq	sl, [r3], -r4
   123f8:	muleq	r2, r4, r6
   123fc:	ldrdeq	r7, [r2], -r8
   12400:	andeq	r7, r2, r0, lsl #18
   12404:	strdeq	sl, [r3], -r4
   12408:	andeq	r7, r2, r0, asr #13
   1240c:	ldrb	r1, [r2, #1]
   12410:	cmp	r1, #111	; 0x6f
   12414:	bne	1239c <__assert_fail@plt+0x454>
   12418:	ldrb	r2, [r2, #2]
   1241c:	cmp	r2, #0
   12420:	bne	12430 <__assert_fail@plt+0x4e8>
   12424:	add	r2, r3, #1
   12428:	cmp	r2, fp
   1242c:	beq	1239c <__assert_fail@plt+0x454>
   12430:	ldr	r3, [pc, #-48]	; 12408 <__assert_fail@plt+0x4c0>
   12434:	add	ip, sp, #152	; 0x98
   12438:	mov	r1, r7
   1243c:	mov	r0, fp
   12440:	str	ip, [sp]
   12444:	add	r2, r3, #496	; 0x1f0
   12448:	bl	11d20 <getopt_long@plt>
   1244c:	cmn	r0, #1
   12450:	mov	r6, r0
   12454:	beq	123c8 <__assert_fail@plt+0x480>
   12458:	add	r3, r0, #3
   1245c:	movw	r2, #266	; 0x10a
   12460:	cmp	r3, r2
   12464:	ldrls	pc, [pc, r3, lsl #2]
   12468:	b	12aec <__assert_fail@plt+0xba4>
   1246c:	andeq	r2, r1, r4, asr #28
   12470:	andeq	r3, r1, ip, lsr #2
   12474:	andeq	r2, r1, ip, ror #21
   12478:	andeq	r2, r1, ip, ror #21
   1247c:	andeq	r3, r1, r4, lsr r1
   12480:	andeq	r2, r1, ip, ror #21
   12484:	andeq	r2, r1, ip, ror #21
   12488:	andeq	r2, r1, ip, ror #21
   1248c:	andeq	r2, r1, ip, ror #21
   12490:	andeq	r2, r1, ip, ror #21
   12494:	andeq	r2, r1, ip, ror #21
   12498:	andeq	r2, r1, ip, ror #21
   1249c:	andeq	r2, r1, ip, ror #21
   124a0:	andeq	r2, r1, ip, ror #21
   124a4:	andeq	r2, r1, ip, ror #21
   124a8:	andeq	r2, r1, ip, ror #21
   124ac:	andeq	r2, r1, ip, ror #21
   124b0:	andeq	r2, r1, ip, ror #21
   124b4:	andeq	r2, r1, ip, ror #21
   124b8:	andeq	r2, r1, ip, ror #21
   124bc:	andeq	r2, r1, ip, ror #21
   124c0:	andeq	r2, r1, ip, ror #21
   124c4:	andeq	r2, r1, ip, ror #21
   124c8:	andeq	r2, r1, ip, ror #21
   124cc:	andeq	r2, r1, ip, ror #21
   124d0:	andeq	r2, r1, ip, ror #21
   124d4:	andeq	r2, r1, ip, ror #21
   124d8:	andeq	r2, r1, ip, ror #21
   124dc:	andeq	r2, r1, ip, ror #21
   124e0:	andeq	r2, r1, ip, ror #21
   124e4:	andeq	r2, r1, ip, ror #21
   124e8:	andeq	r2, r1, ip, ror #21
   124ec:	andeq	r2, r1, ip, ror #21
   124f0:	andeq	r2, r1, ip, ror #21
   124f4:	andeq	r2, r1, ip, ror #21
   124f8:	andeq	r2, r1, ip, ror #21
   124fc:	andeq	r2, r1, ip, ror #21
   12500:	andeq	r2, r1, ip, ror #21
   12504:	andeq	r2, r1, ip, ror #21
   12508:	andeq	r2, r1, ip, ror #21
   1250c:	andeq	r2, r1, ip, ror #21
   12510:	andeq	r2, r1, ip, ror #21
   12514:	andeq	r2, r1, ip, ror #21
   12518:	andeq	r2, r1, ip, ror #21
   1251c:	andeq	r2, r1, ip, ror #21
   12520:	andeq	r2, r1, ip, ror #21
   12524:	andeq	r2, r1, ip, ror #21
   12528:	andeq	r2, r1, ip, ror #21
   1252c:	andeq	r2, r1, ip, ror #21
   12530:	andeq	r2, r1, ip, ror #21
   12534:	andeq	r2, r1, ip, ror #21
   12538:	andeq	r2, r1, ip, ror #21
   1253c:	andeq	r2, r1, ip, ror #21
   12540:	andeq	r2, r1, ip, ror #21
   12544:	andeq	r2, r1, ip, ror #21
   12548:	andeq	r2, r1, ip, ror #21
   1254c:	andeq	r2, r1, ip, ror #21
   12550:	andeq	r2, r1, ip, ror #21
   12554:	andeq	r2, r1, ip, ror #21
   12558:	andeq	r2, r1, ip, ror #21
   1255c:	andeq	r2, r1, ip, ror #21
   12560:	andeq	r2, r1, ip, ror #21
   12564:	andeq	r2, r1, ip, ror #21
   12568:	andeq	r2, r1, ip, ror #21
   1256c:	andeq	r2, r1, ip, ror #21
   12570:	andeq	r2, r1, ip, ror #21
   12574:	andeq	r2, r1, ip, ror #21
   12578:	andeq	r2, r1, ip, ror #21
   1257c:	andeq	r2, r1, ip, ror #21
   12580:	andeq	r2, r1, ip, ror #21
   12584:	andeq	r2, r1, ip, asr sl
   12588:	andeq	r2, r1, ip, ror #21
   1258c:	andeq	r2, r1, ip, ror #21
   12590:	andeq	r2, r1, ip, ror #21
   12594:	andeq	r2, r1, ip, ror #21
   12598:	andeq	r2, r1, ip, ror #21
   1259c:	andeq	r2, r1, ip, ror #21
   125a0:	andeq	r2, r1, ip, ror #21
   125a4:	andeq	r2, r1, ip, ror #21
   125a8:	andeq	r2, r1, ip, ror #21
   125ac:	andeq	r2, r1, r8, ror #19
   125b0:	andeq	r2, r1, ip, ror #21
   125b4:	andeq	r2, r1, ip, ror #21
   125b8:	andeq	r2, r1, ip, ror #21
   125bc:	andeq	r2, r1, ip, ror #21
   125c0:	andeq	r2, r1, r8, ror #19
   125c4:	ldrdeq	r2, [r1], -r0
   125c8:	andeq	r2, r1, r4, lsl #27
   125cc:	andeq	r2, r1, ip, ror #21
   125d0:	andeq	r2, r1, r8, ror #19
   125d4:	andeq	r2, r1, ip, ror #21
   125d8:	andeq	r2, r1, ip, ror #21
   125dc:	andeq	r2, r1, ip, ror #21
   125e0:	andeq	r2, r1, ip, ror #21
   125e4:	andeq	r2, r1, ip, ror #21
   125e8:	andeq	r2, r1, ip, ror #21
   125ec:	andeq	r2, r1, ip, ror #21
   125f0:	andeq	r2, r1, ip, ror #21
   125f4:	andeq	r2, r1, ip, ror #21
   125f8:	andeq	r2, r1, ip, ror #21
   125fc:	andeq	r2, r1, ip, ror #21
   12600:	andeq	r2, r1, r8, ror #19
   12604:	andeq	r2, r1, ip, asr sl
   12608:	andeq	r2, r1, r8, ror #19
   1260c:	andeq	r2, r1, ip, ror #21
   12610:	andeq	r2, r1, r8, ror #19
   12614:	andeq	r2, r1, r8, ror #19
   12618:	andeq	r2, r1, r8, ror #19
   1261c:	andeq	r2, r1, r8, ror #19
   12620:	andeq	r2, r1, ip, ror #21
   12624:	andeq	r2, r1, r0, ror #23
   12628:	andeq	r2, r1, ip, ror #21
   1262c:	ldrdeq	r2, [r1], -r4
   12630:	andeq	r2, r1, r8, ror #19
   12634:	muleq	r1, r8, sp
   12638:	andeq	r2, r1, ip, ror #21
   1263c:	andeq	r2, r1, ip, ror #21
   12640:	andeq	r2, r1, r8, ror #19
   12644:	andeq	r2, r1, r8, asr #27
   12648:	ldrdeq	r2, [r1], -r8
   1264c:	andeq	r2, r1, r4, lsr lr
   12650:	andeq	r2, r1, ip, ror #21
   12654:	andeq	r2, r1, ip, ror #21
   12658:	andeq	r2, r1, ip, ror #21
   1265c:	andeq	r2, r1, r4, lsl #30
   12660:	andeq	r2, r1, r8, asr pc
   12664:	andeq	r2, r1, ip, ror #21
   12668:	andeq	r2, r1, ip, ror #21
   1266c:	andeq	r2, r1, ip, ror #21
   12670:	andeq	r2, r1, ip, ror #21
   12674:	andeq	r2, r1, ip, ror #21
   12678:	andeq	r2, r1, ip, ror #21
   1267c:	andeq	r2, r1, ip, ror #21
   12680:	andeq	r2, r1, ip, ror #21
   12684:	andeq	r2, r1, ip, ror #21
   12688:	andeq	r2, r1, ip, ror #21
   1268c:	andeq	r2, r1, ip, ror #21
   12690:	andeq	r2, r1, ip, ror #21
   12694:	andeq	r2, r1, ip, ror #21
   12698:	andeq	r2, r1, ip, ror #21
   1269c:	andeq	r2, r1, ip, ror #21
   126a0:	andeq	r2, r1, ip, ror #21
   126a4:	andeq	r2, r1, ip, ror #21
   126a8:	andeq	r2, r1, ip, ror #21
   126ac:	andeq	r2, r1, ip, ror #21
   126b0:	andeq	r2, r1, ip, ror #21
   126b4:	andeq	r2, r1, ip, ror #21
   126b8:	andeq	r2, r1, ip, ror #21
   126bc:	andeq	r2, r1, ip, ror #21
   126c0:	andeq	r2, r1, ip, ror #21
   126c4:	andeq	r2, r1, ip, ror #21
   126c8:	andeq	r2, r1, ip, ror #21
   126cc:	andeq	r2, r1, ip, ror #21
   126d0:	andeq	r2, r1, ip, ror #21
   126d4:	andeq	r2, r1, ip, ror #21
   126d8:	andeq	r2, r1, ip, ror #21
   126dc:	andeq	r2, r1, ip, ror #21
   126e0:	andeq	r2, r1, ip, ror #21
   126e4:	andeq	r2, r1, ip, ror #21
   126e8:	andeq	r2, r1, ip, ror #21
   126ec:	andeq	r2, r1, ip, ror #21
   126f0:	andeq	r2, r1, ip, ror #21
   126f4:	andeq	r2, r1, ip, ror #21
   126f8:	andeq	r2, r1, ip, ror #21
   126fc:	andeq	r2, r1, ip, ror #21
   12700:	andeq	r2, r1, ip, ror #21
   12704:	andeq	r2, r1, ip, ror #21
   12708:	andeq	r2, r1, ip, ror #21
   1270c:	andeq	r2, r1, ip, ror #21
   12710:	andeq	r2, r1, ip, ror #21
   12714:	andeq	r2, r1, ip, ror #21
   12718:	andeq	r2, r1, ip, ror #21
   1271c:	andeq	r2, r1, ip, ror #21
   12720:	andeq	r2, r1, ip, ror #21
   12724:	andeq	r2, r1, ip, ror #21
   12728:	andeq	r2, r1, ip, ror #21
   1272c:	andeq	r2, r1, ip, ror #21
   12730:	andeq	r2, r1, ip, ror #21
   12734:	andeq	r2, r1, ip, ror #21
   12738:	andeq	r2, r1, ip, ror #21
   1273c:	andeq	r2, r1, ip, ror #21
   12740:	andeq	r2, r1, ip, ror #21
   12744:	andeq	r2, r1, ip, ror #21
   12748:	andeq	r2, r1, ip, ror #21
   1274c:	andeq	r2, r1, ip, ror #21
   12750:	andeq	r2, r1, ip, ror #21
   12754:	andeq	r2, r1, ip, ror #21
   12758:	andeq	r2, r1, ip, ror #21
   1275c:	andeq	r2, r1, ip, ror #21
   12760:	andeq	r2, r1, ip, ror #21
   12764:	andeq	r2, r1, ip, ror #21
   12768:	andeq	r2, r1, ip, ror #21
   1276c:	andeq	r2, r1, ip, ror #21
   12770:	andeq	r2, r1, ip, ror #21
   12774:	andeq	r2, r1, ip, ror #21
   12778:	andeq	r2, r1, ip, ror #21
   1277c:	andeq	r2, r1, ip, ror #21
   12780:	andeq	r2, r1, ip, ror #21
   12784:	andeq	r2, r1, ip, ror #21
   12788:	andeq	r2, r1, ip, ror #21
   1278c:	andeq	r2, r1, ip, ror #21
   12790:	andeq	r2, r1, ip, ror #21
   12794:	andeq	r2, r1, ip, ror #21
   12798:	andeq	r2, r1, ip, ror #21
   1279c:	andeq	r2, r1, ip, ror #21
   127a0:	andeq	r2, r1, ip, ror #21
   127a4:	andeq	r2, r1, ip, ror #21
   127a8:	andeq	r2, r1, ip, ror #21
   127ac:	andeq	r2, r1, ip, ror #21
   127b0:	andeq	r2, r1, ip, ror #21
   127b4:	andeq	r2, r1, ip, ror #21
   127b8:	andeq	r2, r1, ip, ror #21
   127bc:	andeq	r2, r1, ip, ror #21
   127c0:	andeq	r2, r1, ip, ror #21
   127c4:	andeq	r2, r1, ip, ror #21
   127c8:	andeq	r2, r1, ip, ror #21
   127cc:	andeq	r2, r1, ip, ror #21
   127d0:	andeq	r2, r1, ip, ror #21
   127d4:	andeq	r2, r1, ip, ror #21
   127d8:	andeq	r2, r1, ip, ror #21
   127dc:	andeq	r2, r1, ip, ror #21
   127e0:	andeq	r2, r1, ip, ror #21
   127e4:	andeq	r2, r1, ip, ror #21
   127e8:	andeq	r2, r1, ip, ror #21
   127ec:	andeq	r2, r1, ip, ror #21
   127f0:	andeq	r2, r1, ip, ror #21
   127f4:	andeq	r2, r1, ip, ror #21
   127f8:	andeq	r2, r1, ip, ror #21
   127fc:	andeq	r2, r1, ip, ror #21
   12800:	andeq	r2, r1, ip, ror #21
   12804:	andeq	r2, r1, ip, ror #21
   12808:	andeq	r2, r1, ip, ror #21
   1280c:	andeq	r2, r1, ip, ror #21
   12810:	andeq	r2, r1, ip, ror #21
   12814:	andeq	r2, r1, ip, ror #21
   12818:	andeq	r2, r1, ip, ror #21
   1281c:	andeq	r2, r1, ip, ror #21
   12820:	andeq	r2, r1, ip, ror #21
   12824:	andeq	r2, r1, ip, ror #21
   12828:	andeq	r2, r1, ip, ror #21
   1282c:	andeq	r2, r1, ip, ror #21
   12830:	andeq	r2, r1, ip, ror #21
   12834:	andeq	r2, r1, ip, ror #21
   12838:	andeq	r2, r1, ip, ror #21
   1283c:	andeq	r2, r1, ip, ror #21
   12840:	andeq	r2, r1, ip, ror #21
   12844:	andeq	r2, r1, ip, ror #21
   12848:	andeq	r2, r1, ip, ror #21
   1284c:	andeq	r2, r1, ip, ror #21
   12850:	andeq	r2, r1, ip, ror #21
   12854:	andeq	r2, r1, ip, ror #21
   12858:	andeq	r2, r1, ip, ror #21
   1285c:	andeq	r2, r1, ip, ror #21
   12860:	andeq	r2, r1, ip, ror #21
   12864:	andeq	r2, r1, ip, ror #21
   12868:	andeq	r2, r1, ip, ror #21
   1286c:	andeq	r2, r1, ip, ror #21
   12870:	andeq	r2, r1, ip, ror #21
   12874:	andeq	r2, r1, ip, ror #21
   12878:	andeq	r2, r1, r8, lsl #20
   1287c:	andeq	r2, r1, ip, ror #30
   12880:	andeq	r2, r1, r4, lsr #31
   12884:			; <UNDEFINED> instruction: 0x00012fb4
   12888:	andeq	r2, r1, r8, asr #31
   1288c:	strdeq	r3, [r1], -ip
   12890:	muleq	r1, ip, r9
   12894:	muleq	r1, r4, lr
   12898:	mov	sl, r4
   1289c:	ldr	fp, [sp, #44]	; 0x2c
   128a0:	ldr	r3, [sp, #48]	; 0x30
   128a4:	cmp	r3, #0
   128a8:	bne	12a7c <__assert_fail@plt+0xb34>
   128ac:	str	r3, [sp, #36]	; 0x24
   128b0:	ldr	r4, [fp, #1300]	; 0x514
   128b4:	cmp	r4, #0
   128b8:	beq	1315c <__assert_fail@plt+0x1214>
   128bc:	mov	r3, r4
   128c0:	mov	r9, #0
   128c4:	b	128d8 <__assert_fail@plt+0x990>
   128c8:	ldr	r3, [r3, #36]	; 0x24
   128cc:	orr	r9, r9, r2
   128d0:	cmp	r3, #0
   128d4:	beq	12af4 <__assert_fail@plt+0xbac>
   128d8:	ldr	r1, [r3, #16]
   128dc:	ldrb	r2, [r3, #27]
   128e0:	cmp	r1, #0
   128e4:	bne	128c8 <__assert_fail@plt+0x980>
   128e8:	ldr	r1, [r3, #20]
   128ec:	cmp	r1, #0
   128f0:	bne	128c8 <__assert_fail@plt+0x980>
   128f4:	ldrb	r1, [r3, #24]
   128f8:	cmp	r1, #0
   128fc:	bne	128c8 <__assert_fail@plt+0x980>
   12900:	ldrb	r1, [r3, #25]
   12904:	cmp	r1, #0
   12908:	bne	128c8 <__assert_fail@plt+0x980>
   1290c:	ldrb	r1, [r3, #26]
   12910:	cmp	r1, #0
   12914:	bne	128c8 <__assert_fail@plt+0x980>
   12918:	ldrh	r1, [r3, #28]
   1291c:	cmp	r1, #0
   12920:	bne	128c8 <__assert_fail@plt+0x980>
   12924:	ldrb	r1, [r3, #30]
   12928:	cmp	r1, #0
   1292c:	bne	128c8 <__assert_fail@plt+0x980>
   12930:	ldrb	r1, [r3, #32]
   12934:	cmp	r1, #0
   12938:	bne	128c8 <__assert_fail@plt+0x980>
   1293c:	cmp	r2, #0
   12940:	bne	128c8 <__assert_fail@plt+0x980>
   12944:	ldrb	r1, [r3, #31]
   12948:	cmp	r1, #0
   1294c:	bne	128c8 <__assert_fail@plt+0x980>
   12950:	ldr	r1, [sp, #272]	; 0x110
   12954:	ldr	r2, [sp, #276]	; 0x114
   12958:	str	r1, [r3, #16]
   1295c:	str	r2, [r3, #20]
   12960:	ldrb	r2, [sp, #288]	; 0x120
   12964:	ldr	r0, [sp, #280]	; 0x118
   12968:	ldr	r1, [sp, #284]	; 0x11c
   1296c:	str	r1, [r3, #28]
   12970:	strb	r2, [r3, #32]
   12974:	ldrb	r2, [sp, #283]	; 0x11b
   12978:	str	r0, [r3, #24]
   1297c:	b	128c8 <__assert_fail@plt+0x980>
   12980:	mov	r3, #1
   12984:	strb	r3, [fp, #1489]	; 0x5d1
   12988:	mov	r3, #256	; 0x100
   1298c:	str	r3, [fp, #1304]	; 0x518
   12990:	b	12068 <__assert_fail@plt+0x120>
   12994:	mov	lr, r0
   12998:	b	121d8 <__assert_fail@plt+0x290>
   1299c:	movw	r1, #41580	; 0xa26c
   129a0:	movt	r1, #3
   129a4:	ldr	r3, [pc, #-1456]	; 123fc <__assert_fail@plt+0x4b4>
   129a8:	mov	ip, #1
   129ac:	movw	r2, #41688	; 0xa2d8
   129b0:	movt	r2, #3
   129b4:	ldr	lr, [r1]
   129b8:	movw	r0, #36052	; 0x8cd4
   129bc:	movt	r0, #2
   129c0:	str	ip, [sp]
   129c4:	str	ip, [sp, #8]
   129c8:	ldr	r1, [r2]
   129cc:	add	r2, r3, #8
   129d0:	str	lr, [sp, #4]
   129d4:	bl	1b848 <__assert_fail@plt+0x9900>
   129d8:	movw	r3, #30032	; 0x7550
   129dc:	movt	r3, #2
   129e0:	add	r0, r3, r0
   129e4:	ldrb	r6, [r0, #904]	; 0x388
   129e8:	mov	r3, #0
   129ec:	mov	r2, #2
   129f0:	strb	r6, [sp, #400]	; 0x190
   129f4:	add	r1, sp, #256	; 0x100
   129f8:	add	r0, sp, #400	; 0x190
   129fc:	strb	r3, [sp, #401]	; 0x191
   12a00:	bl	15200 <__assert_fail@plt+0x32b8>
   12a04:	b	123b8 <__assert_fail@plt+0x470>
   12a08:	movw	r3, #41688	; 0xa2d8
   12a0c:	movt	r3, #3
   12a10:	ldr	r1, [r3]
   12a14:	cmp	r1, #0
   12a18:	moveq	r6, #99	; 0x63
   12a1c:	beq	12a5c <__assert_fail@plt+0xb14>
   12a20:	movw	r3, #41580	; 0xa26c
   12a24:	movt	r3, #3
   12a28:	ldr	r2, [pc, #-1584]	; 12400 <__assert_fail@plt+0x4b8>
   12a2c:	mov	ip, #1
   12a30:	movw	r0, #36060	; 0x8cdc
   12a34:	movt	r0, #2
   12a38:	ldr	lr, [r3]
   12a3c:	ldr	r3, [sp, #72]	; 0x48
   12a40:	stm	sp, {ip, lr}
   12a44:	str	ip, [sp, #8]
   12a48:	bl	1b848 <__assert_fail@plt+0x9900>
   12a4c:	movw	r3, #30032	; 0x7550
   12a50:	movt	r3, #2
   12a54:	add	r0, r3, r0
   12a58:	ldrb	r6, [r0, #940]	; 0x3ac
   12a5c:	ldr	r3, [sp, #36]	; 0x24
   12a60:	cmp	r3, #0
   12a64:	beq	12a70 <__assert_fail@plt+0xb28>
   12a68:	cmp	r3, r6
   12a6c:	bne	13d30 <__assert_fail@plt+0x1de8>
   12a70:	uxtb	r3, r6
   12a74:	str	r3, [sp, #36]	; 0x24
   12a78:	b	123b8 <__assert_fail@plt+0x470>
   12a7c:	mov	r2, #5
   12a80:	movw	r1, #36568	; 0x8ed8
   12a84:	movt	r1, #2
   12a88:	mov	r0, #0
   12a8c:	bl	11b58 <dcgettext@plt>
   12a90:	mov	r4, r0
   12a94:	mov	r0, #4
   12a98:	ldr	r1, [sl]
   12a9c:	bl	21dd0 <__assert_fail@plt+0xfe88>
   12aa0:	mov	r1, #0
   12aa4:	mov	r3, r0
   12aa8:	mov	r2, r4
   12aac:	mov	r0, r1
   12ab0:	bl	11c90 <error@plt>
   12ab4:	movw	r3, #41672	; 0xa2c8
   12ab8:	movt	r3, #3
   12abc:	ldr	r4, [r3]
   12ac0:	mov	r2, #5
   12ac4:	movw	r1, #36588	; 0x8eec
   12ac8:	movt	r1, #2
   12acc:	mov	r0, #0
   12ad0:	bl	11b58 <dcgettext@plt>
   12ad4:	mov	r3, r0
   12ad8:	movw	r2, #39036	; 0x987c
   12adc:	movt	r2, #2
   12ae0:	mov	r1, #1
   12ae4:	mov	r0, r4
   12ae8:	bl	11dd4 <__fprintf_chk@plt>
   12aec:	mov	r0, #2
   12af0:	bl	1af84 <__assert_fail@plt+0x903c>
   12af4:	mov	r8, r3
   12af8:	ldrb	r0, [r4, #28]
   12afc:	ldrb	r3, [r4, #26]
   12b00:	ldrb	r1, [r4, #29]
   12b04:	ldrb	r2, [r4, #32]
   12b08:	add	r3, r3, r0
   12b0c:	ldrb	ip, [r4, #27]
   12b10:	add	r3, r3, r1
   12b14:	ldrb	r0, [r4, #30]
   12b18:	ldr	r1, [r4, #16]
   12b1c:	orr	r2, r2, ip
   12b20:	add	r3, r3, r0
   12b24:	cmp	r1, #0
   12b28:	orrne	r2, r2, #1
   12b2c:	add	r3, r3, r2
   12b30:	cmp	r3, #1
   12b34:	bgt	14b80 <__assert_fail@plt+0x2c38>
   12b38:	ldr	r4, [r4, #36]	; 0x24
   12b3c:	cmp	r4, #0
   12b40:	bne	12af8 <__assert_fail@plt+0xbb0>
   12b44:	ldrb	r3, [fp, #1296]	; 0x510
   12b48:	cmp	r3, #0
   12b4c:	bne	13180 <__assert_fail@plt+0x1238>
   12b50:	ldrb	r3, [sp, #287]	; 0x11f
   12b54:	cmp	r9, #0
   12b58:	strb	r3, [fp, #1281]	; 0x501
   12b5c:	bne	13a94 <__assert_fail@plt+0x1b4c>
   12b60:	ldr	r3, [fp, #772]	; 0x304
   12b64:	cmp	r3, #0
   12b68:	beq	13a70 <__assert_fail@plt+0x1b28>
   12b6c:	cmp	r5, #0
   12b70:	beq	13574 <__assert_fail@plt+0x162c>
   12b74:	ldr	r2, [fp, #1484]	; 0x5cc
   12b78:	cmp	r2, #0
   12b7c:	beq	12ba0 <__assert_fail@plt+0xc58>
   12b80:	movw	r3, #41444	; 0xa1e4
   12b84:	movt	r3, #3
   12b88:	ldr	r1, [r3, #8]
   12b8c:	mov	r3, #18
   12b90:	mul	r3, r3, r1
   12b94:	cmp	r3, r2
   12b98:	movcc	r3, r2
   12b9c:	str	r3, [fp, #1484]	; 0x5cc
   12ba0:	ldr	r3, [sp, #36]	; 0x24
   12ba4:	cmp	r3, #0
   12ba8:	beq	13244 <__assert_fail@plt+0x12fc>
   12bac:	cmp	r5, #1
   12bb0:	bhi	14dc4 <__assert_fail@plt+0x2e7c>
   12bb4:	ldr	r3, [sp, #52]	; 0x34
   12bb8:	cmp	r3, #0
   12bbc:	beq	140a8 <__assert_fail@plt+0x2160>
   12bc0:	ldr	r3, [sp, #36]	; 0x24
   12bc4:	movw	r0, #41444	; 0xa1e4
   12bc8:	movt	r0, #3
   12bcc:	strb	r3, [r0, #128]!	; 0x80
   12bd0:	bl	15754 <__assert_fail@plt+0x380c>
   12bd4:	mov	r3, #1
   12bd8:	str	r3, [sp, #68]	; 0x44
   12bdc:	b	123b8 <__assert_fail@plt+0x470>
   12be0:	mov	r2, #0
   12be4:	mov	r3, #0
   12be8:	mvn	r0, #0
   12bec:	mov	r8, r2
   12bf0:	mov	r9, r3
   12bf4:	add	ip, sp, #216	; 0xd8
   12bf8:	movw	lr, #41688	; 0xa2d8
   12bfc:	movt	lr, #3
   12c00:	mov	r1, ip
   12c04:	strd	r2, [sp, #216]	; 0xd8
   12c08:	strd	r2, [sp, #224]	; 0xe0
   12c0c:	movw	r2, #36112	; 0x8d10
   12c10:	movt	r2, #2
   12c14:	str	ip, [sp, #84]	; 0x54
   12c18:	str	r0, [sp, #224]	; 0xe0
   12c1c:	ldr	r0, [lr]
   12c20:	str	lr, [sp, #104]	; 0x68
   12c24:	strd	r8, [sp, #232]	; 0xe8
   12c28:	strd	r8, [sp, #240]	; 0xf0
   12c2c:	strd	r8, [sp, #248]	; 0xf8
   12c30:	bl	16124 <__assert_fail@plt+0x41dc>
   12c34:	ldr	lr, [sp, #104]	; 0x68
   12c38:	ldr	r2, [sp, #216]	; 0xd8
   12c3c:	mov	r1, r2
   12c40:	sub	r2, r2, #1
   12c44:	cmp	r1, #0
   12c48:	str	r2, [sp, #216]	; 0xd8
   12c4c:	beq	14b48 <__assert_fail@plt+0x2c00>
   12c50:	ldrb	r1, [r0]
   12c54:	cmp	r1, #46	; 0x2e
   12c58:	ldrne	r1, [sp, #220]	; 0xdc
   12c5c:	beq	1444c <__assert_fail@plt+0x2504>
   12c60:	orrs	r3, r2, r1
   12c64:	str	lr, [sp, #104]	; 0x68
   12c68:	mvneq	r2, #0
   12c6c:	ldr	r1, [sp, #84]	; 0x54
   12c70:	streq	r2, [sp, #216]	; 0xd8
   12c74:	mov	r2, #0
   12c78:	bl	15200 <__assert_fail@plt+0x32b8>
   12c7c:	ldrb	r2, [r0]
   12c80:	ldr	lr, [sp, #104]	; 0x68
   12c84:	cmp	r2, #44	; 0x2c
   12c88:	beq	143f8 <__assert_fail@plt+0x24b0>
   12c8c:	mvn	r2, #0
   12c90:	mov	r3, #0
   12c94:	strd	r2, [sp, #224]	; 0xe0
   12c98:	ldrb	r2, [r0]
   12c9c:	cmp	r2, #0
   12ca0:	bne	14af8 <__assert_fail@plt+0x2bb0>
   12ca4:	mov	r1, #40	; 0x28
   12ca8:	ldr	r0, [sp, #84]	; 0x54
   12cac:	bl	2507c <__assert_fail@plt+0x13134>
   12cb0:	ldr	r8, [sp, #44]	; 0x2c
   12cb4:	ldr	r2, [pc, #-2232]	; 12404 <__assert_fail@plt+0x4bc>
   12cb8:	ldr	r3, [r8, #1300]	; 0x514
   12cbc:	cmp	r3, #0
   12cc0:	beq	131ac <__assert_fail@plt+0x1264>
   12cc4:	add	r2, r3, #36	; 0x24
   12cc8:	ldr	r3, [r3, #36]	; 0x24
   12ccc:	b	12cbc <__assert_fail@plt+0xd74>
   12cd0:	movw	r3, #41688	; 0xa2d8
   12cd4:	movt	r3, #3
   12cd8:	ldr	r2, [sp, #152]	; 0x98
   12cdc:	movw	r1, #36428	; 0x8e4c
   12ce0:	movt	r1, #2
   12ce4:	ldr	sl, [r3]
   12ce8:	add	r3, sp, #400	; 0x190
   12cec:	str	r1, [sp]
   12cf0:	add	r1, sp, #296	; 0x128
   12cf4:	str	r2, [sp, #84]	; 0x54
   12cf8:	mov	r2, #10
   12cfc:	mov	r0, sl
   12d00:	bl	25500 <__assert_fail@plt+0x135b8>
   12d04:	cmp	r0, #0
   12d08:	bne	131bc <__assert_fail@plt+0x1274>
   12d0c:	ldr	r3, [sp, #296]	; 0x128
   12d10:	ldrb	r3, [r3, #-1]
   12d14:	sub	r3, r3, #48	; 0x30
   12d18:	cmp	r3, #9
   12d1c:	bls	13c7c <__assert_fail@plt+0x1d34>
   12d20:	ldr	ip, [sp, #44]	; 0x2c
   12d24:	add	r3, sp, #400	; 0x190
   12d28:	ldrd	r0, [r3]
   12d2c:	mov	r3, #0
   12d30:	ldr	r2, [ip, #1484]	; 0x5cc
   12d34:	cmp	r3, r1
   12d38:	cmpeq	r2, r0
   12d3c:	bhi	123b8 <__assert_fail@plt+0x470>
   12d40:	mov	r3, #0
   12d44:	str	r0, [sp, #96]	; 0x60
   12d48:	str	r0, [ip, #1484]	; 0x5cc
   12d4c:	str	r3, [sp, #100]	; 0x64
   12d50:	ldrd	r8, [sp, #96]	; 0x60
   12d54:	cmp	r1, r9
   12d58:	cmpeq	r0, r8
   12d5c:	bne	14798 <__assert_fail@plt+0x2850>
   12d60:	movw	r2, #41444	; 0xa1e4
   12d64:	movt	r2, #3
   12d68:	ldr	r2, [r2, #8]
   12d6c:	mov	r3, #18
   12d70:	mul	r3, r3, r2
   12d74:	cmp	r3, r8
   12d78:	movcc	r3, r8
   12d7c:	str	r3, [ip, #1484]	; 0x5cc
   12d80:	b	123b8 <__assert_fail@plt+0x470>
   12d84:	movw	r3, #41688	; 0xa2d8
   12d88:	movt	r3, #3
   12d8c:	ldr	r0, [r3]
   12d90:	bl	158b0 <__assert_fail@plt+0x3968>
   12d94:	b	123b8 <__assert_fail@plt+0x470>
   12d98:	ldr	r0, [sp, #52]	; 0x34
   12d9c:	movw	r3, #41688	; 0xa2d8
   12da0:	movt	r3, #3
   12da4:	ldr	sl, [r3]
   12da8:	cmp	r0, #0
   12dac:	beq	12dc0 <__assert_fail@plt+0xe78>
   12db0:	mov	r1, sl
   12db4:	bl	11a2c <strcmp@plt>
   12db8:	cmp	r0, #0
   12dbc:	bne	14f38 <__assert_fail@plt+0x2ff0>
   12dc0:	str	sl, [sp, #52]	; 0x34
   12dc4:	b	123b8 <__assert_fail@plt+0x470>
   12dc8:	ldr	r2, [sp, #44]	; 0x2c
   12dcc:	mov	r3, #1
   12dd0:	strb	r3, [r2, #1310]	; 0x51e
   12dd4:	b	123b8 <__assert_fail@plt+0x470>
   12dd8:	movw	sl, #41688	; 0xa2d8
   12ddc:	movt	sl, #3
   12de0:	ldr	r0, [sl]
   12de4:	ldrb	r3, [r0]
   12de8:	cmp	r3, #0
   12dec:	beq	14f2c <__assert_fail@plt+0x2fe4>
   12df0:	ldrb	r2, [r0, #1]
   12df4:	cmp	r2, #0
   12df8:	beq	12e10 <__assert_fail@plt+0xec8>
   12dfc:	movw	r1, #36456	; 0x8e68
   12e00:	movt	r1, #2
   12e04:	bl	11a2c <strcmp@plt>
   12e08:	subs	r3, r0, #0
   12e0c:	bne	14f74 <__assert_fail@plt+0x302c>
   12e10:	movw	r2, #41444	; 0xa1e4
   12e14:	movt	r2, #3
   12e18:	ldr	r1, [r2]
   12e1c:	cmp	r1, #256	; 0x100
   12e20:	beq	12e2c <__assert_fail@plt+0xee4>
   12e24:	cmp	r1, r3
   12e28:	bne	14f68 <__assert_fail@plt+0x3020>
   12e2c:	str	r3, [r2]
   12e30:	b	123b8 <__assert_fail@plt+0x470>
   12e34:	ldr	r2, [sp, #44]	; 0x2c
   12e38:	mov	r3, #1
   12e3c:	strb	r3, [r2, #1309]	; 0x51d
   12e40:	b	123b8 <__assert_fail@plt+0x470>
   12e44:	mov	r4, #0
   12e48:	movw	r1, #36540	; 0x8ebc
   12e4c:	movt	r1, #2
   12e50:	movw	r2, #36552	; 0x8ec8
   12e54:	movt	r2, #2
   12e58:	movw	r3, #41576	; 0xa268
   12e5c:	movt	r3, #3
   12e60:	movw	r0, #41684	; 0xa2d4
   12e64:	movt	r0, #3
   12e68:	str	r2, [sp]
   12e6c:	movw	r2, #35740	; 0x8b9c
   12e70:	movt	r2, #2
   12e74:	stmib	sp, {r1, r4}
   12e78:	movw	r1, #38036	; 0x9494
   12e7c:	movt	r1, #2
   12e80:	ldr	r0, [r0]
   12e84:	ldr	r3, [r3]
   12e88:	bl	249e0 <__assert_fail@plt+0x12a98>
   12e8c:	mov	r0, r4
   12e90:	bl	11d38 <exit@plt>
   12e94:	movw	r3, #41688	; 0xa2d8
   12e98:	movt	r3, #3
   12e9c:	ldr	r2, [sp, #152]	; 0x98
   12ea0:	movw	r1, #33096	; 0x8148
   12ea4:	movt	r1, #2
   12ea8:	ldr	sl, [r3]
   12eac:	add	r3, sp, #400	; 0x190
   12eb0:	str	r1, [sp]
   12eb4:	mov	r1, #0
   12eb8:	mov	r9, r2
   12ebc:	mov	r2, #10
   12ec0:	mov	r0, sl
   12ec4:	bl	25500 <__assert_fail@plt+0x135b8>
   12ec8:	cmp	r0, #1
   12ecc:	beq	147a8 <__assert_fail@plt+0x2860>
   12ed0:	cmp	r0, #0
   12ed4:	bne	14f54 <__assert_fail@plt+0x300c>
   12ed8:	add	r3, sp, #400	; 0x190
   12edc:	mov	r9, #0
   12ee0:	ldrd	r2, [r3]
   12ee4:	mvn	r8, #0
   12ee8:	cmp	r3, r9
   12eec:	cmpeq	r2, r8
   12ef0:	bhi	1323c <__assert_fail@plt+0x12f4>
   12ef4:	orrs	ip, r2, r3
   12ef8:	beq	14ba0 <__assert_fail@plt+0x2c58>
   12efc:	str	r2, [sp, #64]	; 0x40
   12f00:	b	123b8 <__assert_fail@plt+0x470>
   12f04:	movw	sl, #41664	; 0xa2c0
   12f08:	movt	sl, #3
   12f0c:	ldr	r2, [sl]
   12f10:	movw	r3, #41688	; 0xa2d8
   12f14:	movt	r3, #3
   12f18:	ldr	r1, [r3]
   12f1c:	sub	r3, r2, #-1073741823	; 0xc0000001
   12f20:	ldr	r3, [r7, r3, lsl #2]
   12f24:	cmp	r3, r1
   12f28:	bne	123b8 <__assert_fail@plt+0x470>
   12f2c:	ldr	r8, [sp, #44]	; 0x2c
   12f30:	sub	r3, r3, #1
   12f34:	ldrb	r1, [r3, #1]!
   12f38:	sub	r0, r1, #48	; 0x30
   12f3c:	cmp	r0, #9
   12f40:	bls	12f34 <__assert_fail@plt+0xfec>
   12f44:	cmp	r1, #0
   12f48:	subne	r2, r2, #1
   12f4c:	str	r8, [sp, #44]	; 0x2c
   12f50:	str	r2, [sl]
   12f54:	b	123b8 <__assert_fail@plt+0x470>
   12f58:	movw	r2, #41444	; 0xa1e4
   12f5c:	movt	r2, #3
   12f60:	mov	r3, #0
   12f64:	strb	r3, [r2, #108]	; 0x6c
   12f68:	b	123b8 <__assert_fail@plt+0x470>
   12f6c:	ldr	r3, [sp, #44]	; 0x2c
   12f70:	ldr	r0, [r3, #1284]	; 0x504
   12f74:	movw	r3, #41688	; 0xa2d8
   12f78:	movt	r3, #3
   12f7c:	ldr	sl, [r3]
   12f80:	cmp	r0, #0
   12f84:	beq	12f98 <__assert_fail@plt+0x1050>
   12f88:	mov	r1, sl
   12f8c:	bl	11a2c <strcmp@plt>
   12f90:	cmp	r0, #0
   12f94:	bne	14bc0 <__assert_fail@plt+0x2c78>
   12f98:	ldr	r3, [sp, #44]	; 0x2c
   12f9c:	str	sl, [r3, #1284]	; 0x504
   12fa0:	b	123b8 <__assert_fail@plt+0x470>
   12fa4:	ldr	r2, [sp, #44]	; 0x2c
   12fa8:	mov	r3, #1
   12fac:	strb	r3, [r2, #1296]	; 0x510
   12fb0:	b	123b8 <__assert_fail@plt+0x470>
   12fb4:	movw	r3, #41688	; 0xa2d8
   12fb8:	movt	r3, #3
   12fbc:	ldr	r3, [r3]
   12fc0:	str	r3, [sp, #48]	; 0x30
   12fc4:	b	123b8 <__assert_fail@plt+0x470>
   12fc8:	movw	r3, #41688	; 0xa2d8
   12fcc:	movt	r3, #3
   12fd0:	ldr	r2, [sp, #152]	; 0x98
   12fd4:	movw	r1, #33096	; 0x8148
   12fd8:	movt	r1, #2
   12fdc:	ldr	sl, [r3]
   12fe0:	add	r3, sp, #184	; 0xb8
   12fe4:	str	r1, [sp]
   12fe8:	mov	r1, #0
   12fec:	str	r2, [sp, #104]	; 0x68
   12ff0:	mov	r2, #10
   12ff4:	mov	r0, sl
   12ff8:	bl	25500 <__assert_fail@plt+0x135b8>
   12ffc:	mov	r3, r0
   13000:	add	r1, sp, #400	; 0x190
   13004:	mov	r0, #7
   13008:	str	r3, [sp, #84]	; 0x54
   1300c:	bl	11b94 <getrlimit64@plt>
   13010:	cmp	r0, #0
   13014:	ldr	r3, [sp, #84]	; 0x54
   13018:	movne	ip, #17
   1301c:	ldreq	ip, [sp, #400]	; 0x190
   13020:	subeq	ip, ip, #3
   13024:	cmp	r3, #0
   13028:	bne	13214 <__assert_fail@plt+0x12cc>
   1302c:	ldrd	r0, [sp, #184]	; 0xb8
   13030:	movw	r2, #41444	; 0xa1e4
   13034:	movt	r2, #3
   13038:	str	r0, [sp, #88]	; 0x58
   1303c:	str	r3, [sp, #92]	; 0x5c
   13040:	ldrd	r8, [sp, #88]	; 0x58
   13044:	str	r0, [r2, #8]
   13048:	cmp	r1, r9
   1304c:	cmpeq	r0, r8
   13050:	bne	1306c <__assert_fail@plt+0x1124>
   13054:	ldr	r2, [sp, #88]	; 0x58
   13058:	cmp	r2, #1
   1305c:	bls	14e8c <__assert_fail@plt+0x2f44>
   13060:	ldr	r3, [sp, #88]	; 0x58
   13064:	cmp	r3, ip
   13068:	bls	123b8 <__assert_fail@plt+0x470>
   1306c:	mov	r8, sl
   13070:	mov	r6, ip
   13074:	mov	r2, #5
   13078:	movw	r1, #36224	; 0x8d80
   1307c:	movt	r1, #2
   13080:	mov	r0, #0
   13084:	bl	11b58 <dcgettext@plt>
   13088:	ldr	r2, [sp, #104]	; 0x68
   1308c:	movw	r3, #30032	; 0x7550
   13090:	movt	r3, #2
   13094:	mov	r5, r0
   13098:	mov	r0, r8
   1309c:	add	r3, r3, r2, lsl #4
   130a0:	ldr	r4, [r3, #368]	; 0x170
   130a4:	bl	230fc <__assert_fail@plt+0x111b4>
   130a8:	mov	r1, #0
   130ac:	mov	r2, r5
   130b0:	str	r0, [sp]
   130b4:	mov	r0, r1
   130b8:	mov	r3, r4
   130bc:	bl	11c90 <error@plt>
   130c0:	mov	r2, #5
   130c4:	movw	r1, #36252	; 0x8d9c
   130c8:	movt	r1, #2
   130cc:	mov	r0, #0
   130d0:	bl	11b58 <dcgettext@plt>
   130d4:	mov	r5, r0
   130d8:	add	r1, sp, #296	; 0x128
   130dc:	mov	r0, r6
   130e0:	bl	1ee18 <__assert_fail@plt+0xced0>
   130e4:	mov	r3, r4
   130e8:	mov	r2, r5
   130ec:	str	r0, [sp]
   130f0:	mov	r1, #0
   130f4:	mov	r0, #2
   130f8:	bl	11c90 <error@plt>
   130fc:	ldr	r0, [sp, #60]	; 0x3c
   13100:	movw	r3, #41688	; 0xa2d8
   13104:	movt	r3, #3
   13108:	ldr	sl, [r3]
   1310c:	cmp	r0, #0
   13110:	beq	13124 <__assert_fail@plt+0x11dc>
   13114:	mov	r1, sl
   13118:	bl	11a2c <strcmp@plt>
   1311c:	cmp	r0, #0
   13120:	bne	14e80 <__assert_fail@plt+0x2f38>
   13124:	str	sl, [sp, #60]	; 0x3c
   13128:	b	123b8 <__assert_fail@plt+0x470>
   1312c:	mov	r0, #0
   13130:	bl	1af84 <__assert_fail@plt+0x903c>
   13134:	movw	lr, #41688	; 0xa2d8
   13138:	movt	lr, #3
   1313c:	ldr	r0, [lr]
   13140:	ldrb	r2, [r0]
   13144:	cmp	r2, #43	; 0x2b
   13148:	beq	13ae8 <__assert_fail@plt+0x1ba0>
   1314c:	ldr	r3, [lr]
   13150:	str	r3, [r4, r5, lsl #2]
   13154:	add	r5, r5, #1
   13158:	b	123b8 <__assert_fail@plt+0x470>
   1315c:	add	r0, sp, #256	; 0x100
   13160:	bl	150c0 <__assert_fail@plt+0x3178>
   13164:	cmp	r0, #0
   13168:	beq	146f8 <__assert_fail@plt+0x27b0>
   1316c:	ldrb	r3, [fp, #1296]	; 0x510
   13170:	cmp	r3, #0
   13174:	beq	13ce4 <__assert_fail@plt+0x1d9c>
   13178:	mov	r8, r4
   1317c:	mov	r9, r4
   13180:	ldr	r3, [sp, #36]	; 0x24
   13184:	ldr	r2, [sp, #52]	; 0x34
   13188:	cmp	r2, #0
   1318c:	cmpeq	r3, #0
   13190:	beq	1359c <__assert_fail@plt+0x1654>
   13194:	cmp	r3, #0
   13198:	movw	r0, #41444	; 0xa1e4
   1319c:	movt	r0, #3
   131a0:	moveq	r3, #111	; 0x6f
   131a4:	strb	r3, [r0, #116]!	; 0x74
   131a8:	bl	15754 <__assert_fail@plt+0x380c>
   131ac:	str	r8, [sp, #44]	; 0x2c
   131b0:	str	r0, [r2]
   131b4:	str	r3, [r0, #36]	; 0x24
   131b8:	b	123b8 <__assert_fail@plt+0x470>
   131bc:	cmp	r0, #2
   131c0:	bne	131f8 <__assert_fail@plt+0x12b0>
   131c4:	ldr	r3, [sp, #296]	; 0x128
   131c8:	ldrb	r2, [r3, #-1]
   131cc:	sub	r2, r2, #48	; 0x30
   131d0:	cmp	r2, #9
   131d4:	bhi	131f8 <__assert_fail@plt+0x12b0>
   131d8:	ldrb	r2, [r3, #1]
   131dc:	cmp	r2, #0
   131e0:	bne	131f8 <__assert_fail@plt+0x12b0>
   131e4:	ldrb	r3, [r3]
   131e8:	cmp	r3, #37	; 0x25
   131ec:	beq	14b08 <__assert_fail@plt+0x2bc0>
   131f0:	cmp	r3, #98	; 0x62
   131f4:	beq	12d20 <__assert_fail@plt+0xdd8>
   131f8:	ldr	r8, [sp, #84]	; 0x54
   131fc:	mov	r4, sl
   13200:	mov	r1, r8
   13204:	mov	r2, #83	; 0x53
   13208:	str	r4, [sp]
   1320c:	ldr	r3, [pc, #-3596]	; 12408 <__assert_fail@plt+0x4c0>
   13210:	bl	25470 <__assert_fail@plt+0x13528>
   13214:	cmp	r3, #1
   13218:	mov	r8, sl
   1321c:	mov	r6, ip
   13220:	beq	13074 <__assert_fail@plt+0x112c>
   13224:	mov	r0, r3
   13228:	mov	r2, #4
   1322c:	ldr	r3, [pc, #-3628]	; 12408 <__assert_fail@plt+0x4c0>
   13230:	str	sl, [sp]
   13234:	ldr	r1, [sp, #104]	; 0x68
   13238:	bl	25470 <__assert_fail@plt+0x13528>
   1323c:	mvn	r2, #0
   13240:	b	12efc <__assert_fail@plt+0xfb4>
   13244:	movw	r6, #31572	; 0x7b54
   13248:	movt	r6, #2
   1324c:	str	sl, [sp, #88]	; 0x58
   13250:	mov	r8, sl
   13254:	ldr	r4, [sp, #36]	; 0x24
   13258:	b	13260 <__assert_fail@plt+0x1318>
   1325c:	mov	r4, r9
   13260:	mov	r7, r8
   13264:	ldr	r9, [r8], #4
   13268:	mov	r1, r6
   1326c:	mov	r0, r9
   13270:	bl	11a2c <strcmp@plt>
   13274:	cmp	r0, #0
   13278:	beq	13290 <__assert_fail@plt+0x1348>
   1327c:	mov	r0, r9
   13280:	mov	r1, #4
   13284:	bl	11ec4 <euidaccess@plt>
   13288:	cmp	r0, #0
   1328c:	bne	14e0c <__assert_fail@plt+0x2ec4>
   13290:	add	r9, r4, #1
   13294:	cmp	r5, r9
   13298:	bne	1325c <__assert_fail@plt+0x1314>
   1329c:	ldr	r3, [sp, #52]	; 0x34
   132a0:	cmp	r3, #0
   132a4:	beq	132d4 <__assert_fail@plt+0x138c>
   132a8:	mov	r0, r3
   132ac:	mov	r1, #65	; 0x41
   132b0:	movt	r1, #8
   132b4:	movw	r2, #438	; 0x1b6
   132b8:	bl	11c9c <open64@plt>
   132bc:	subs	r3, r0, #0
   132c0:	blt	14e64 <__assert_fail@plt+0x2f1c>
   132c4:	cmp	r3, #1
   132c8:	beq	132d4 <__assert_fail@plt+0x138c>
   132cc:	mov	r1, #1
   132d0:	bl	16484 <__assert_fail@plt+0x453c>
   132d4:	ldr	r3, [sp, #68]	; 0x44
   132d8:	cmp	r3, #0
   132dc:	bne	13cf0 <__assert_fail@plt+0x1da8>
   132e0:	ldr	r3, [sp, #64]	; 0x40
   132e4:	cmp	r3, #0
   132e8:	beq	147b4 <__assert_fail@plt+0x286c>
   132ec:	ldr	r1, [sp, #64]	; 0x40
   132f0:	movw	r3, #7281	; 0x1c71
   132f4:	movt	r3, #455	; 0x1c7
   132f8:	mov	r2, #144	; 0x90
   132fc:	movw	ip, #31568	; 0x7b50
   13300:	movt	ip, #2
   13304:	vldr	d10, [pc, #924]	; 136a8 <__assert_fail@plt+0x1760>
   13308:	str	r9, [sp, #24]
   1330c:	vldr	d9, [pc, #924]	; 136b0 <__assert_fail@plt+0x1768>
   13310:	cmp	r1, r3
   13314:	str	ip, [sp, #104]	; 0x68
   13318:	movcs	r1, r3
   1331c:	mov	r3, #0
   13320:	lsl	r0, r1, #1
   13324:	mov	sl, r3
   13328:	mul	r2, r2, r1
   1332c:	str	r0, [sp, #44]	; 0x2c
   13330:	str	r1, [sp, #72]	; 0x48
   13334:	str	r2, [sp, #76]	; 0x4c
   13338:	sub	r2, r0, #1
   1333c:	str	r2, [sp, #80]	; 0x50
   13340:	str	r3, [sp, #196]	; 0xc4
   13344:	ldr	r3, [sp, #88]	; 0x58
   13348:	ldr	r1, [sp, #104]	; 0x68
   1334c:	str	r3, [sp, #48]	; 0x30
   13350:	ldr	r0, [r3], #4
   13354:	str	r0, [sp, #40]	; 0x28
   13358:	str	r3, [sp, #88]	; 0x58
   1335c:	bl	17a60 <__assert_fail@plt+0x5b18>
   13360:	subs	r3, r0, #0
   13364:	str	r3, [sp, #36]	; 0x24
   13368:	beq	14f24 <__assert_fail@plt+0x2fdc>
   1336c:	ldr	r3, [sp, #64]	; 0x40
   13370:	cmp	r3, #1
   13374:	bhi	1428c <__assert_fail@plt+0x2344>
   13378:	mov	r3, #24
   1337c:	str	r3, [sp, #84]	; 0x54
   13380:	ldr	r5, [sp, #196]	; 0xc4
   13384:	cmp	r5, #0
   13388:	beq	14488 <__assert_fail@plt+0x2540>
   1338c:	ldr	r2, [sp, #24]
   13390:	mov	r3, #0
   13394:	strb	r3, [sp, #208]	; 0xd0
   13398:	sub	r2, r2, #1
   1339c:	str	r2, [sp, #24]
   133a0:	movw	r2, #24348	; 0x5f1c
   133a4:	movt	r2, #1
   133a8:	str	r2, [sp, #68]	; 0x44
   133ac:	add	r2, sp, #184	; 0xb8
   133b0:	str	r2, [sp, #60]	; 0x3c
   133b4:	ldr	r1, [sp, #36]	; 0x24
   133b8:	ldr	r2, [sp, #40]	; 0x28
   133bc:	ldr	r0, [sp, #60]	; 0x3c
   133c0:	bl	171c8 <__assert_fail@plt+0x5280>
   133c4:	cmp	r0, #0
   133c8:	beq	14030 <__assert_fail@plt+0x20e8>
   133cc:	ldrb	r7, [sp, #208]	; 0xd0
   133d0:	ldr	r6, [sp, #196]	; 0xc4
   133d4:	cmp	r7, #0
   133d8:	bne	13d3c <__assert_fail@plt+0x1df4>
   133dc:	ldr	r3, [sp, #184]	; 0xb8
   133e0:	str	r7, [fp, #1468]	; 0x5bc
   133e4:	add	r6, r3, r6
   133e8:	add	r0, sp, #152	; 0x98
   133ec:	add	sl, sl, #1
   133f0:	bl	1a46c <__assert_fail@plt+0x8524>
   133f4:	add	r8, r0, #9
   133f8:	mov	r7, #0
   133fc:	ldr	r3, [sp, #192]	; 0xc0
   13400:	cmp	r3, #1
   13404:	bls	13d78 <__assert_fail@plt+0x1e30>
   13408:	ldr	r1, [sp, #44]	; 0x2c
   1340c:	mov	r9, #0
   13410:	ldr	r0, [sp, #68]	; 0x44
   13414:	bl	1eb38 <__assert_fail@plt+0xcbf0>
   13418:	mov	r1, #0
   1341c:	str	r0, [sp, #296]	; 0x128
   13420:	add	r0, sp, #300	; 0x12c
   13424:	bl	11ae0 <pthread_mutex_init@plt>
   13428:	mov	r1, #0
   1342c:	add	r0, sp, #328	; 0x148
   13430:	bl	11b64 <pthread_cond_init@plt>
   13434:	ldr	r0, [sp, #76]	; 0x4c
   13438:	ldr	r4, [sp, #192]	; 0xc0
   1343c:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   13440:	mov	r5, r0
   13444:	add	r2, r0, #48	; 0x30
   13448:	add	ip, sp, #296	; 0x128
   1344c:	mov	r1, r9
   13450:	mov	r0, r2
   13454:	str	r9, [r5]
   13458:	str	r9, [r5, #4]
   1345c:	str	r9, [r5, #8]
   13460:	str	r9, [r5, #12]
   13464:	str	r9, [r5, #16]
   13468:	str	r4, [r5, #20]
   1346c:	str	r4, [r5, #24]
   13470:	str	r9, [r5, #28]
   13474:	str	r9, [r5, #40]	; 0x28
   13478:	strb	r9, [r5, #44]	; 0x2c
   1347c:	str	ip, [sp, #48]	; 0x30
   13480:	str	r2, [sp, #56]	; 0x38
   13484:	bl	11ae0 <pthread_mutex_init@plt>
   13488:	stm	sp, {r4, r9}
   1348c:	add	r1, r5, #72	; 0x48
   13490:	mov	r2, r6
   13494:	ldr	r4, [sp, #72]	; 0x48
   13498:	mov	r0, r5
   1349c:	mov	r3, r4
   134a0:	bl	15a7c <__assert_fail@plt+0x3b34>
   134a4:	ldr	lr, [sp, #48]	; 0x30
   134a8:	add	r3, r5, #72	; 0x48
   134ac:	mov	r0, r6
   134b0:	mov	r1, r4
   134b4:	ldr	ip, [sp, #152]	; 0x98
   134b8:	ldr	r2, [sp, #192]	; 0xc0
   134bc:	str	lr, [sp]
   134c0:	str	ip, [sp, #4]
   134c4:	str	r8, [sp, #8]
   134c8:	bl	190fc <__assert_fail@plt+0x71b4>
   134cc:	ldr	r3, [sp, #44]	; 0x2c
   134d0:	cmp	r3, r9
   134d4:	beq	134f8 <__assert_fail@plt+0x15b0>
   134d8:	ldr	r4, [sp, #56]	; 0x38
   134dc:	ldr	r6, [sp, #80]	; 0x50
   134e0:	mov	r0, r4
   134e4:	sub	r6, r6, #1
   134e8:	bl	11a5c <pthread_mutex_destroy@plt>
   134ec:	cmn	r6, #1
   134f0:	add	r4, r4, #72	; 0x48
   134f4:	bne	134e0 <__assert_fail@plt+0x1598>
   134f8:	mov	r0, r5
   134fc:	bl	1d29c <__assert_fail@plt+0xb354>
   13500:	ldr	r0, [sp, #296]	; 0x128
   13504:	bl	1eba8 <__assert_fail@plt+0xcc60>
   13508:	add	r0, sp, #328	; 0x148
   1350c:	bl	11bd0 <pthread_cond_destroy@plt>
   13510:	add	r0, sp, #300	; 0x12c
   13514:	bl	11a5c <pthread_mutex_destroy@plt>
   13518:	mov	r1, r8
   1351c:	ldr	r0, [sp, #152]	; 0x98
   13520:	bl	16328 <__assert_fail@plt+0x43e0>
   13524:	cmp	r7, #0
   13528:	beq	133b4 <__assert_fail@plt+0x146c>
   1352c:	ldr	r0, [sp, #184]	; 0xb8
   13530:	bl	1d29c <__assert_fail@plt+0xb354>
   13534:	b	1353c <__assert_fail@plt+0x15f4>
   13538:	bl	165b4 <__assert_fail@plt+0x466c>
   1353c:	ldr	r3, [fp, #1292]	; 0x50c
   13540:	cmp	r3, #0
   13544:	bgt	13538 <__assert_fail@plt+0x15f0>
   13548:	ldrb	r3, [fp, #1311]	; 0x51f
   1354c:	cmp	r3, #0
   13550:	beq	1356c <__assert_fail@plt+0x1624>
   13554:	movw	r3, #41680	; 0xa2d0
   13558:	movt	r3, #3
   1355c:	ldr	r0, [r3]
   13560:	bl	1cafc <__assert_fail@plt+0xabb4>
   13564:	cmn	r0, #1
   13568:	beq	14a54 <__assert_fail@plt+0x2b0c>
   1356c:	mov	r0, #0
   13570:	bl	11d38 <exit@plt>
   13574:	mov	r0, sl
   13578:	mov	r5, #1
   1357c:	bl	1d29c <__assert_fail@plt+0xb354>
   13580:	mov	r0, #4
   13584:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   13588:	movw	r3, #31572	; 0x7b54
   1358c:	movt	r3, #2
   13590:	mov	sl, r0
   13594:	str	r3, [r0]
   13598:	b	12b74 <__assert_fail@plt+0xc2c>
   1359c:	ldr	r3, [sp, #80]	; 0x50
   135a0:	cmp	r3, #0
   135a4:	beq	13cb4 <__assert_fail@plt+0x1d6c>
   135a8:	movw	r1, #33096	; 0x8148
   135ac:	movt	r1, #2
   135b0:	mov	r0, #3
   135b4:	bl	11e28 <setlocale@plt>
   135b8:	cmp	r0, #0
   135bc:	beq	13cb4 <__assert_fail@plt+0x1d6c>
   135c0:	ldrb	r4, [fp, #1280]	; 0x500
   135c4:	cmp	r4, #0
   135c8:	beq	14330 <__assert_fail@plt+0x23e8>
   135cc:	mov	r2, #5
   135d0:	movw	r1, #36820	; 0x8fd4
   135d4:	movt	r1, #2
   135d8:	mov	r0, #0
   135dc:	bl	11b58 <dcgettext@plt>
   135e0:	mov	r4, r0
   135e4:	mov	r1, #0
   135e8:	mov	r0, #3
   135ec:	bl	11e28 <setlocale@plt>
   135f0:	bl	230fc <__assert_fail@plt+0x111b4>
   135f4:	mov	r1, #0
   135f8:	mov	r3, r0
   135fc:	mov	r2, r4
   13600:	mov	r0, r1
   13604:	bl	11c90 <error@plt>
   13608:	mov	r1, #0
   1360c:	add	r3, sp, #256	; 0x100
   13610:	ldr	r4, [fp, #1300]	; 0x514
   13614:	mov	lr, r1
   13618:	add	ip, sp, #296	; 0x128
   1361c:	str	r1, [sp, #24]
   13620:	add	r6, sp, #272	; 0x110
   13624:	ldrd	r2, [r3]
   13628:	str	r1, [sp, #72]	; 0x48
   1362c:	str	r1, [sp, #80]	; 0x50
   13630:	add	r1, sp, #153	; 0x99
   13634:	ldrd	r6, [r6]
   13638:	str	ip, [sp, #40]	; 0x28
   1363c:	str	r1, [sp, #44]	; 0x2c
   13640:	add	r1, sp, #264	; 0x108
   13644:	ldrd	r0, [r1]
   13648:	strd	r2, [ip]
   1364c:	add	r3, sp, #280	; 0x118
   13650:	ldrd	r2, [r3]
   13654:	strd	r6, [ip, #16]
   13658:	mov	r6, r8
   1365c:	mov	r7, lr
   13660:	strd	r0, [sp, #16]
   13664:	ldrd	r0, [sp, #16]
   13668:	str	r5, [sp, #84]	; 0x54
   1366c:	str	sl, [sp, #88]	; 0x58
   13670:	str	fp, [sp, #96]	; 0x60
   13674:	str	r9, [sp, #104]	; 0x68
   13678:	strd	r0, [ip, #8]
   1367c:	add	r1, sp, #288	; 0x120
   13680:	ldrd	r0, [r1]
   13684:	strd	r2, [ip, #24]
   13688:	movw	r3, #27437	; 0x6b2d
   1368c:	movt	r3, #32
   13690:	str	r3, [sp, #48]	; 0x30
   13694:	mov	r3, #1
   13698:	mov	r5, r3
   1369c:	strd	r0, [ip, #32]
   136a0:	b	13808 <__assert_fail@plt+0x18c0>
   136a4:	nop	{0}
   136a8:	andeq	r0, r0, r0
   136ac:	svccc	0x00c00000
   136b0:	andeq	r0, r0, r0
   136b4:	svccc	0x00e80000
   136b8:	andeq	sl, r3, r0, lsl #16
   136bc:	strdeq	sl, [r3], -r4
   136c0:	muleq	r3, ip, r8
   136c4:	ldr	r1, [r4, #12]
   136c8:	cmp	r1, #0
   136cc:	beq	13a04 <__assert_fail@plt+0x1abc>
   136d0:	cmp	r2, #0
   136d4:	bne	13e58 <__assert_fail@plt+0x1f10>
   136d8:	cmp	r3, #0
   136dc:	bne	136ec <__assert_fail@plt+0x17a4>
   136e0:	ldrh	r2, [r4, #28]
   136e4:	cmp	r2, #0
   136e8:	beq	13718 <__assert_fail@plt+0x17d0>
   136ec:	ldr	r2, [r4]
   136f0:	ldr	r1, [r4, #8]
   136f4:	adds	r2, r2, #1
   136f8:	moveq	r2, #1
   136fc:	adds	r1, r1, #1
   13700:	moveq	r8, #1
   13704:	movne	r8, #0
   13708:	cmp	r1, r2
   1370c:	orrhi	r8, r8, #1
   13710:	cmp	r8, #0
   13714:	bne	13ff0 <__assert_fail@plt+0x20a8>
   13718:	ldrb	r1, [r4, #28]
   1371c:	ldr	r2, [sp, #312]	; 0x138
   13720:	cmp	r2, #0
   13724:	beq	13738 <__assert_fail@plt+0x17f0>
   13728:	ldr	r0, [r4, #16]
   1372c:	cmp	r2, r0
   13730:	moveq	r2, #0
   13734:	streq	r2, [sp, #312]	; 0x138
   13738:	ldr	r2, [sp, #316]	; 0x13c
   1373c:	cmp	r2, #0
   13740:	beq	13754 <__assert_fail@plt+0x180c>
   13744:	ldr	r0, [r4, #20]
   13748:	cmp	r2, r0
   1374c:	moveq	r2, #0
   13750:	streq	r2, [sp, #316]	; 0x13c
   13754:	ldrb	lr, [r4, #24]
   13758:	eor	r3, r3, #1
   1375c:	eor	r1, r1, #1
   13760:	add	r5, r5, #1
   13764:	ldrb	r2, [sp, #322]	; 0x142
   13768:	ldrb	r9, [sp, #320]	; 0x140
   1376c:	eor	lr, lr, #1
   13770:	ldrb	sl, [r4, #25]
   13774:	and	r3, r3, r2
   13778:	ldrb	fp, [r4, #30]
   1377c:	and	lr, lr, r9
   13780:	ldrb	r8, [r4, #29]
   13784:	eor	r0, sl, #1
   13788:	ldrb	ip, [r4, #27]
   1378c:	eor	fp, fp, #1
   13790:	ldrb	r2, [r4, #32]
   13794:	strb	r3, [sp, #322]	; 0x142
   13798:	eor	r8, r8, #1
   1379c:	ldrb	r3, [r4, #31]
   137a0:	eor	ip, ip, #1
   137a4:	ldrb	sl, [sp, #321]	; 0x141
   137a8:	eor	r2, r2, #1
   137ac:	ldr	r4, [r4, #36]	; 0x24
   137b0:	strb	lr, [sp, #320]	; 0x140
   137b4:	eor	r3, r3, #1
   137b8:	ldrb	lr, [sp, #324]	; 0x144
   137bc:	and	sl, sl, r0
   137c0:	ldrb	r9, [sp, #326]	; 0x146
   137c4:	strb	sl, [sp, #321]	; 0x141
   137c8:	ldrb	r0, [sp, #325]	; 0x145
   137cc:	and	r1, r1, lr
   137d0:	ldrb	sl, [sp, #323]	; 0x143
   137d4:	strb	r1, [sp, #324]	; 0x144
   137d8:	and	r9, r9, fp
   137dc:	ldrb	lr, [sp, #328]	; 0x148
   137e0:	and	r0, r0, r8
   137e4:	ldrb	r1, [sp, #327]	; 0x147
   137e8:	and	ip, ip, sl
   137ec:	strb	r9, [sp, #326]	; 0x146
   137f0:	and	r2, r2, lr
   137f4:	strb	ip, [sp, #323]	; 0x143
   137f8:	strb	r0, [sp, #325]	; 0x145
   137fc:	and	r3, r3, r1
   13800:	strb	r3, [sp, #327]	; 0x147
   13804:	strb	r2, [sp, #328]	; 0x148
   13808:	cmp	r4, #0
   1380c:	beq	13e64 <__assert_fail@plt+0x1f1c>
   13810:	ldrb	r3, [r4, #26]
   13814:	cmp	r3, #0
   13818:	bne	13828 <__assert_fail@plt+0x18e0>
   1381c:	ldrh	r3, [r4, #28]
   13820:	cmp	r3, #0
   13824:	beq	13840 <__assert_fail@plt+0x18f8>
   13828:	ldrb	r1, [r4, #28]
   1382c:	ldr	r3, [sp, #24]
   13830:	cmp	r1, #0
   13834:	moveq	r3, #1
   13838:	movne	r7, r1
   1383c:	str	r3, [sp, #24]
   13840:	ldrb	r3, [r4, #33]	; 0x21
   13844:	cmp	r3, #0
   13848:	beq	13990 <__assert_fail@plt+0x1a48>
   1384c:	ldr	r9, [r4]
   13850:	mov	r1, #0
   13854:	mov	r3, #43	; 0x2b
   13858:	add	r2, sp, #128	; 0x80
   1385c:	add	r8, sp, #184	; 0xb8
   13860:	ldr	sl, [r4, #8]
   13864:	strh	r3, [sp, #152]	; 0x98
   13868:	cmn	r9, #1
   1386c:	moveq	r9, r1
   13870:	mov	r0, r9
   13874:	bl	1ee5c <__assert_fail@plt+0xcf14>
   13878:	mov	r1, r0
   1387c:	mov	r2, #25
   13880:	ldr	r0, [sp, #44]	; 0x2c
   13884:	bl	11c30 <__stpcpy_chk@plt>
   13888:	ldr	r3, [sp, #48]	; 0x30
   1388c:	add	r2, sp, #128	; 0x80
   13890:	mov	r1, #0
   13894:	mov	fp, r0
   13898:	add	r0, r9, #1
   1389c:	str	r3, [sp, #184]	; 0xb8
   138a0:	bl	1ee5c <__assert_fail@plt+0xcf14>
   138a4:	mov	r1, r0
   138a8:	mov	r2, #24
   138ac:	add	r0, r8, #3
   138b0:	bl	11c30 <__stpcpy_chk@plt>
   138b4:	ldr	r3, [r4, #8]
   138b8:	cmn	r3, #1
   138bc:	beq	13944 <__assert_fail@plt+0x19fc>
   138c0:	movw	r2, #36924	; 0x903c
   138c4:	movt	r2, #2
   138c8:	ldrh	ip, [r2]
   138cc:	mov	r3, fp
   138d0:	add	sl, sl, #1
   138d4:	mov	r9, r0
   138d8:	mov	r1, #0
   138dc:	ldrb	lr, [r2, #2]
   138e0:	mov	r0, sl
   138e4:	add	r2, sp, #128	; 0x80
   138e8:	strh	ip, [fp]
   138ec:	strb	lr, [r3, #2]!
   138f0:	str	r3, [sp, #76]	; 0x4c
   138f4:	bl	1ee5c <__assert_fail@plt+0xcf14>
   138f8:	ldr	r3, [sp, #76]	; 0x4c
   138fc:	mov	r1, r0
   13900:	mov	r0, r3
   13904:	bl	11c54 <strcpy@plt>
   13908:	movw	r3, #36928	; 0x9040
   1390c:	movt	r3, #2
   13910:	ldrh	r3, [r3]
   13914:	mov	r1, #0
   13918:	add	r2, sp, #128	; 0x80
   1391c:	strh	r3, [r9], #1
   13920:	ldr	r0, [r4, #12]
   13924:	cmn	r0, #1
   13928:	movne	r0, #0
   1392c:	moveq	r0, #1
   13930:	add	r0, r0, sl
   13934:	bl	1ee5c <__assert_fail@plt+0xcf14>
   13938:	mov	r1, r0
   1393c:	mov	r0, r9
   13940:	bl	11c54 <strcpy@plt>
   13944:	mov	r2, #5
   13948:	movw	r1, #36932	; 0x9044
   1394c:	movt	r1, #2
   13950:	mov	r0, #0
   13954:	bl	11b58 <dcgettext@plt>
   13958:	mov	r9, r0
   1395c:	add	r1, sp, #152	; 0x98
   13960:	mov	r0, #0
   13964:	bl	230ec <__assert_fail@plt+0x111a4>
   13968:	mov	sl, r0
   1396c:	mov	r1, r8
   13970:	mov	r0, #1
   13974:	bl	230ec <__assert_fail@plt+0x111a4>
   13978:	mov	r1, #0
   1397c:	mov	r3, sl
   13980:	str	r0, [sp]
   13984:	mov	r2, r9
   13988:	mov	r0, r1
   1398c:	bl	11c90 <error@plt>
   13990:	ldr	r3, [r4]
   13994:	ldr	r1, [r4, #8]
   13998:	cmn	r3, #1
   1399c:	beq	13e50 <__assert_fail@plt+0x1f08>
   139a0:	cmp	r3, r1
   139a4:	bls	13e50 <__assert_fail@plt+0x1f08>
   139a8:	mov	r2, #5
   139ac:	movw	r1, #37688	; 0x9338
   139b0:	movt	r1, #2
   139b4:	mov	r0, #0
   139b8:	bl	11b58 <dcgettext@plt>
   139bc:	mov	r1, #0
   139c0:	mov	r2, r0
   139c4:	mov	r3, r5
   139c8:	mov	r0, r1
   139cc:	bl	11c90 <error@plt>
   139d0:	ldr	r1, [r4, #8]
   139d4:	mov	r2, #1
   139d8:	ldrb	r3, [r4, #26]
   139dc:	cmp	r3, #0
   139e0:	bne	139f4 <__assert_fail@plt+0x1aac>
   139e4:	ldrh	r0, [r4, #28]
   139e8:	cmp	r0, #0
   139ec:	ldrbeq	r0, [r4, #30]
   139f0:	beq	139f8 <__assert_fail@plt+0x1ab0>
   139f4:	mov	r0, #1
   139f8:	cmp	r1, #0
   139fc:	orr	r2, r2, r6
   13a00:	beq	136c4 <__assert_fail@plt+0x177c>
   13a04:	cmp	r2, #0
   13a08:	bne	13e58 <__assert_fail@plt+0x1f10>
   13a0c:	movw	r2, #41444	; 0xa1e4
   13a10:	movt	r2, #3
   13a14:	ldr	r2, [r2]
   13a18:	cmp	r2, #256	; 0x100
   13a1c:	bne	136d8 <__assert_fail@plt+0x1790>
   13a20:	ldrb	r2, [r4, #24]
   13a24:	cmp	r2, #0
   13a28:	bne	146dc <__assert_fail@plt+0x2794>
   13a2c:	cmp	r0, #0
   13a30:	beq	13a40 <__assert_fail@plt+0x1af8>
   13a34:	ldr	r2, [r4, #4]
   13a38:	cmp	r2, #0
   13a3c:	beq	146dc <__assert_fail@plt+0x2794>
   13a40:	mov	r2, #5
   13a44:	movw	r1, #36980	; 0x9074
   13a48:	movt	r1, #2
   13a4c:	mov	r0, #0
   13a50:	bl	11b58 <dcgettext@plt>
   13a54:	mov	r1, #0
   13a58:	mov	r3, r5
   13a5c:	mov	r2, r0
   13a60:	mov	r0, r1
   13a64:	bl	11c90 <error@plt>
   13a68:	ldrb	r3, [r4, #26]
   13a6c:	b	136d8 <__assert_fail@plt+0x1790>
   13a70:	movw	r0, #37576	; 0x92c8
   13a74:	movt	r0, #2
   13a78:	bl	11cb4 <getenv@plt>
   13a7c:	cmp	r0, #0
   13a80:	movw	r3, #34664	; 0x8768
   13a84:	movt	r3, #2
   13a88:	moveq	r0, r3
   13a8c:	bl	158b0 <__assert_fail@plt+0x3968>
   13a90:	b	12b6c <__assert_fail@plt+0xc24>
   13a94:	mov	r1, #16
   13a98:	ldr	r0, [sp, #60]	; 0x3c
   13a9c:	bl	23310 <__assert_fail@plt+0x113c8>
   13aa0:	subs	r4, r0, #0
   13aa4:	beq	14d8c <__assert_fail@plt+0x2e44>
   13aa8:	add	r3, sp, #296	; 0x128
   13aac:	mov	r2, #16
   13ab0:	mov	r1, r3
   13ab4:	str	r3, [sp, #40]	; 0x28
   13ab8:	bl	23494 <__assert_fail@plt+0x1154c>
   13abc:	mov	r0, r4
   13ac0:	bl	235e0 <__assert_fail@plt+0x11698>
   13ac4:	cmp	r0, #0
   13ac8:	bne	14e48 <__assert_fail@plt+0x2f00>
   13acc:	ldr	r0, [pc, #-1052]	; 136b8 <__assert_fail@plt+0x1770>
   13ad0:	bl	1baf8 <__assert_fail@plt+0x9bb0>
   13ad4:	ldr	r2, [pc, #-1060]	; 136b8 <__assert_fail@plt+0x1770>
   13ad8:	mov	r1, #16
   13adc:	ldr	r0, [sp, #40]	; 0x28
   13ae0:	bl	1c7b4 <__assert_fail@plt+0xa86c>
   13ae4:	b	12b60 <__assert_fail@plt+0xc18>
   13ae8:	movw	sl, #41664	; 0xa2c0
   13aec:	movt	sl, #3
   13af0:	ldr	r2, [sl]
   13af4:	cmp	r2, fp
   13af8:	beq	13b0c <__assert_fail@plt+0x1bc4>
   13afc:	ldr	r2, [r7, r2, lsl #2]
   13b00:	ldrb	r1, [r2]
   13b04:	cmp	r1, #45	; 0x2d
   13b08:	beq	148fc <__assert_fail@plt+0x29b4>
   13b0c:	mov	r3, #0
   13b10:	str	r3, [sp, #104]	; 0x68
   13b14:	ldr	r3, [sp, #76]	; 0x4c
   13b18:	ldr	r2, [sp, #104]	; 0x68
   13b1c:	cmp	r3, #0
   13b20:	ldr	r3, [sp, #40]	; 0x28
   13b24:	movne	r2, #0
   13b28:	orrs	r3, r3, r2
   13b2c:	str	r3, [sp, #40]	; 0x28
   13b30:	beq	1314c <__assert_fail@plt+0x1204>
   13b34:	mov	r8, #0
   13b38:	mov	r9, #0
   13b3c:	str	lr, [sp, #108]	; 0x6c
   13b40:	add	r3, sp, #216	; 0xd8
   13b44:	mvn	ip, #0
   13b48:	add	r0, r0, #1
   13b4c:	mov	r1, r3
   13b50:	mov	r2, #0
   13b54:	str	r3, [sp, #84]	; 0x54
   13b58:	strd	r8, [sp, #216]	; 0xd8
   13b5c:	strd	r8, [sp, #224]	; 0xe0
   13b60:	str	ip, [sp, #224]	; 0xe0
   13b64:	strd	r8, [sp, #232]	; 0xe8
   13b68:	strd	r8, [sp, #240]	; 0xf0
   13b6c:	strd	r8, [sp, #248]	; 0xf8
   13b70:	bl	16124 <__assert_fail@plt+0x41dc>
   13b74:	cmp	r0, #0
   13b78:	ldr	lr, [sp, #108]	; 0x6c
   13b7c:	beq	14ab0 <__assert_fail@plt+0x2b68>
   13b80:	ldrb	r2, [r0]
   13b84:	cmp	r2, #46	; 0x2e
   13b88:	beq	14b58 <__assert_fail@plt+0x2c10>
   13b8c:	ldr	r2, [sp, #216]	; 0xd8
   13b90:	ldr	r1, [sp, #220]	; 0xdc
   13b94:	orrs	r3, r1, r2
   13b98:	bne	13bac <__assert_fail@plt+0x1c64>
   13b9c:	mvn	r2, #0
   13ba0:	str	r2, [sp, #216]	; 0xd8
   13ba4:	cmp	r0, #0
   13ba8:	beq	1314c <__assert_fail@plt+0x1204>
   13bac:	mov	r2, #0
   13bb0:	ldr	r1, [sp, #84]	; 0x54
   13bb4:	str	lr, [sp, #108]	; 0x6c
   13bb8:	bl	15200 <__assert_fail@plt+0x32b8>
   13bbc:	ldrb	r2, [r0]
   13bc0:	ldr	lr, [sp, #108]	; 0x6c
   13bc4:	cmp	r2, #0
   13bc8:	bne	1314c <__assert_fail@plt+0x1204>
   13bcc:	ldr	r3, [sp, #104]	; 0x68
   13bd0:	cmp	r3, #0
   13bd4:	beq	13c48 <__assert_fail@plt+0x1d00>
   13bd8:	ldr	r3, [sl]
   13bdc:	movw	r2, #35964	; 0x8c7c
   13be0:	movt	r2, #2
   13be4:	add	r1, sp, #224	; 0xe0
   13be8:	ldr	r0, [r7, r3, lsl #2]
   13bec:	add	r3, r3, #1
   13bf0:	str	r3, [sl]
   13bf4:	mov	r8, r0
   13bf8:	add	r0, r0, #1
   13bfc:	bl	16124 <__assert_fail@plt+0x41dc>
   13c00:	cmp	r0, #0
   13c04:	beq	14d70 <__assert_fail@plt+0x2e28>
   13c08:	ldrb	r3, [r0]
   13c0c:	cmp	r3, #46	; 0x2e
   13c10:	beq	14d58 <__assert_fail@plt+0x2e10>
   13c14:	ldr	r3, [sp, #228]	; 0xe4
   13c18:	cmp	r3, #0
   13c1c:	bne	13c30 <__assert_fail@plt+0x1ce8>
   13c20:	ldr	r3, [sp, #224]	; 0xe0
   13c24:	cmp	r3, #0
   13c28:	subne	r3, r3, #1
   13c2c:	strne	r3, [sp, #224]	; 0xe0
   13c30:	mov	r2, #1
   13c34:	ldr	r1, [sp, #84]	; 0x54
   13c38:	bl	15200 <__assert_fail@plt+0x32b8>
   13c3c:	ldrb	r3, [r0]
   13c40:	cmp	r3, #0
   13c44:	bne	14d48 <__assert_fail@plt+0x2e00>
   13c48:	mov	r3, #1
   13c4c:	mov	r1, #40	; 0x28
   13c50:	ldr	r0, [sp, #84]	; 0x54
   13c54:	strb	r3, [sp, #249]	; 0xf9
   13c58:	bl	2507c <__assert_fail@plt+0x13134>
   13c5c:	ldr	r8, [sp, #44]	; 0x2c
   13c60:	ldr	r2, [pc, #-1452]	; 136bc <__assert_fail@plt+0x1774>
   13c64:	ldr	r3, [r8, #1300]	; 0x514
   13c68:	cmp	r3, #0
   13c6c:	beq	131ac <__assert_fail@plt+0x1264>
   13c70:	add	r2, r3, #36	; 0x24
   13c74:	ldr	r3, [r3, #36]	; 0x24
   13c78:	b	13c68 <__assert_fail@plt+0x1d20>
   13c7c:	add	r3, sp, #400	; 0x190
   13c80:	mvn	r2, #0
   13c84:	ldrd	r8, [r3]
   13c88:	movw	r3, #65535	; 0xffff
   13c8c:	movt	r3, #63	; 0x3f
   13c90:	cmp	r9, r3
   13c94:	cmpeq	r8, r2
   13c98:	bhi	14798 <__assert_fail@plt+0x2850>
   13c9c:	lsl	r3, r9, #10
   13ca0:	lsl	r1, r8, #10
   13ca4:	orr	r3, r3, r8, lsr #22
   13ca8:	str	r1, [sp, #400]	; 0x190
   13cac:	str	r3, [sp, #404]	; 0x194
   13cb0:	b	12d20 <__assert_fail@plt+0xdd8>
   13cb4:	mov	r2, #5
   13cb8:	movw	r1, #36796	; 0x8fbc
   13cbc:	movt	r1, #2
   13cc0:	mov	r0, #0
   13cc4:	bl	11b58 <dcgettext@plt>
   13cc8:	mov	r1, #0
   13ccc:	mov	r3, r0
   13cd0:	movw	r2, #31468	; 0x7aec
   13cd4:	movt	r2, #2
   13cd8:	mov	r0, r1
   13cdc:	bl	11c90 <error@plt>
   13ce0:	b	135c0 <__assert_fail@plt+0x1678>
   13ce4:	ldrb	r3, [sp, #287]	; 0x11f
   13ce8:	strb	r3, [fp, #1281]	; 0x501
   13cec:	b	12b60 <__assert_fail@plt+0xc18>
   13cf0:	mov	r1, #8
   13cf4:	mov	r0, r9
   13cf8:	bl	25034 <__assert_fail@plt+0x130ec>
   13cfc:	mov	r3, #0
   13d00:	b	13d08 <__assert_fail@plt+0x1dc0>
   13d04:	mov	r3, r1
   13d08:	ldr	r2, [sl, r3, lsl #2]
   13d0c:	cmp	r3, r4
   13d10:	add	r1, r3, #1
   13d14:	str	r2, [r0, r3, lsl #3]
   13d18:	bne	13d04 <__assert_fail@plt+0x1dbc>
   13d1c:	mov	r2, r9
   13d20:	mov	r1, #0
   13d24:	ldr	r3, [sp, #52]	; 0x34
   13d28:	bl	1a5dc <__assert_fail@plt+0x8694>
   13d2c:	b	13548 <__assert_fail@plt+0x1600>
   13d30:	movw	r0, #36068	; 0x8ce4
   13d34:	movt	r0, #2
   13d38:	bl	15754 <__assert_fail@plt+0x380c>
   13d3c:	ldr	r3, [sp, #24]
   13d40:	cmp	r3, #0
   13d44:	beq	13e0c <__assert_fail@plt+0x1ec4>
   13d48:	ldr	ip, [sp, #84]	; 0x54
   13d4c:	ldrd	r2, [sp, #188]	; 0xbc
   13d50:	add	r1, ip, #1
   13d54:	sub	r0, r6, r2
   13d58:	mls	r3, r3, ip, r0
   13d5c:	cmp	r1, r3
   13d60:	bcc	147d0 <__assert_fail@plt+0x2888>
   13d64:	ldr	r3, [sp, #184]	; 0xb8
   13d68:	mov	r2, #0
   13d6c:	str	r2, [fp, #1468]	; 0x5bc
   13d70:	add	r6, r3, r6
   13d74:	b	133e8 <__assert_fail@plt+0x14a0>
   13d78:	ldrb	r3, [fp, #1309]	; 0x51d
   13d7c:	sub	r6, r6, #16
   13d80:	ldr	r4, [sp, #152]	; 0x98
   13d84:	cmp	r3, #0
   13d88:	beq	13df8 <__assert_fail@plt+0x1eb0>
   13d8c:	ldr	r3, [fp, #1468]	; 0x5bc
   13d90:	cmp	r3, #0
   13d94:	beq	13de4 <__assert_fail@plt+0x1e9c>
   13d98:	ldr	r3, [fp, #1300]	; 0x514
   13d9c:	cmp	r3, #0
   13da0:	beq	13dd0 <__assert_fail@plt+0x1e88>
   13da4:	ldr	r1, [pc, #-1772]	; 136c0 <__assert_fail@plt+0x1778>
   13da8:	mov	r0, r6
   13dac:	bl	17bfc <__assert_fail@plt+0x5cb4>
   13db0:	cmp	r0, #0
   13db4:	bne	13de4 <__assert_fail@plt+0x1e9c>
   13db8:	ldrb	r3, [fp, #1309]	; 0x51d
   13dbc:	cmp	r3, #0
   13dc0:	bne	13518 <__assert_fail@plt+0x15d0>
   13dc4:	ldrb	r3, [fp, #1310]	; 0x51e
   13dc8:	cmp	r3, #0
   13dcc:	bne	13518 <__assert_fail@plt+0x15d0>
   13dd0:	ldr	r1, [pc, #-1816]	; 136c0 <__assert_fail@plt+0x1778>
   13dd4:	mov	r0, r6
   13dd8:	bl	163c0 <__assert_fail@plt+0x4478>
   13ddc:	cmp	r0, #0
   13de0:	beq	13518 <__assert_fail@plt+0x15d0>
   13de4:	ldr	r1, [pc, #-1836]	; 136c0 <__assert_fail@plt+0x1778>
   13de8:	ldrd	r2, [r6]
   13dec:	strd	r2, [r1]
   13df0:	ldrd	r2, [r6, #8]
   13df4:	strd	r2, [r1, #8]
   13df8:	mov	r1, r4
   13dfc:	mov	r0, r6
   13e00:	mov	r2, r8
   13e04:	bl	16874 <__assert_fail@plt+0x492c>
   13e08:	b	13518 <__assert_fail@plt+0x15d0>
   13e0c:	ldr	r3, [sp, #24]
   13e10:	ldr	r2, [sp, #200]	; 0xc8
   13e14:	str	r3, [fp, #1468]	; 0x5bc
   13e18:	ldr	r3, [sp, #184]	; 0xb8
   13e1c:	orrs	r2, sl, r2
   13e20:	add	r6, r3, r6
   13e24:	bne	133e8 <__assert_fail@plt+0x14a0>
   13e28:	ldrd	r0, [sp, #36]	; 0x24
   13e2c:	bl	16328 <__assert_fail@plt+0x43e0>
   13e30:	ldr	r0, [sp, #52]	; 0x34
   13e34:	bl	1796c <__assert_fail@plt+0x5a24>
   13e38:	cmp	r0, #0
   13e3c:	beq	14dbc <__assert_fail@plt+0x2e74>
   13e40:	str	r0, [sp, #152]	; 0x98
   13e44:	ldr	sl, [sp, #24]
   13e48:	ldr	r8, [sp, #52]	; 0x34
   13e4c:	b	133fc <__assert_fail@plt+0x14b4>
   13e50:	mov	r2, #0
   13e54:	b	139d8 <__assert_fail@plt+0x1a90>
   13e58:	cmp	r6, #0
   13e5c:	bne	13718 <__assert_fail@plt+0x17d0>
   13e60:	b	136d8 <__assert_fail@plt+0x1790>
   13e64:	ldr	r3, [sp, #24]
   13e68:	ldr	r2, [sp, #72]	; 0x48
   13e6c:	ldr	r5, [sp, #84]	; 0x54
   13e70:	orr	r3, r3, r7
   13e74:	uxtb	r3, r3
   13e78:	ldr	sl, [sp, #88]	; 0x58
   13e7c:	cmp	r2, #0
   13e80:	str	r3, [sp, #44]	; 0x2c
   13e84:	ldr	fp, [sp, #96]	; 0x60
   13e88:	ldr	r9, [sp, #104]	; 0x68
   13e8c:	beq	14360 <__assert_fail@plt+0x2418>
   13e90:	movw	r8, #41444	; 0xa1e4
   13e94:	movt	r8, #3
   13e98:	ldr	r6, [r8]
   13e9c:	ldr	r7, [fp, #1304]	; 0x518
   13ea0:	cmp	r6, #256	; 0x100
   13ea4:	beq	14808 <__assert_fail@plt+0x28c0>
   13ea8:	cmp	r6, r7
   13eac:	strne	r4, [sp, #72]	; 0x48
   13eb0:	beq	148ac <__assert_fail@plt+0x2964>
   13eb4:	ldrb	r3, [fp, #1308]	; 0x51c
   13eb8:	cmp	r3, r6
   13ebc:	beq	14858 <__assert_fail@plt+0x2910>
   13ec0:	cmp	r6, #45	; 0x2d
   13ec4:	beq	14a74 <__assert_fail@plt+0x2b2c>
   13ec8:	ldr	r3, [sp, #80]	; 0x50
   13ecc:	cmp	r6, #43	; 0x2b
   13ed0:	movne	r3, #0
   13ed4:	andeq	r3, r3, #1
   13ed8:	cmp	r3, #0
   13edc:	bne	14ac8 <__assert_fail@plt+0x2b80>
   13ee0:	ldr	r3, [sp, #44]	; 0x2c
   13ee4:	cmp	r3, #0
   13ee8:	beq	13f10 <__assert_fail@plt+0x1fc8>
   13eec:	ldr	r3, [sp, #72]	; 0x48
   13ef0:	cmp	r3, #0
   13ef4:	beq	14380 <__assert_fail@plt+0x2438>
   13ef8:	ldr	r3, [sp, #24]
   13efc:	cmp	r3, #0
   13f00:	beq	13f10 <__assert_fail@plt+0x1fc8>
   13f04:	ldrb	r3, [fp, #1489]	; 0x5d1
   13f08:	cmp	r3, #0
   13f0c:	bne	147e0 <__assert_fail@plt+0x2898>
   13f10:	ldr	r0, [sp, #40]	; 0x28
   13f14:	bl	150c0 <__assert_fail@plt+0x3178>
   13f18:	cmp	r0, #0
   13f1c:	ldrb	r6, [sp, #327]	; 0x147
   13f20:	beq	142b8 <__assert_fail@plt+0x2370>
   13f24:	cmp	r6, #0
   13f28:	beq	12b50 <__assert_fail@plt+0xc08>
   13f2c:	ldrb	r7, [fp, #1310]	; 0x51e
   13f30:	cmp	r7, #0
   13f34:	bne	14918 <__assert_fail@plt+0x29d0>
   13f38:	ldrb	r3, [fp, #1309]	; 0x51d
   13f3c:	cmp	r3, #0
   13f40:	beq	13fb0 <__assert_fail@plt+0x2068>
   13f44:	ldr	r3, [fp, #1300]	; 0x514
   13f48:	cmp	r3, #0
   13f4c:	beq	13fb0 <__assert_fail@plt+0x2068>
   13f50:	add	r4, sp, #184	; 0xb8
   13f54:	ldr	r0, [sp, #40]	; 0x28
   13f58:	mov	r1, r4
   13f5c:	bl	15134 <__assert_fail@plt+0x31ec>
   13f60:	mov	r0, r4
   13f64:	bl	11d50 <strlen@plt>
   13f68:	mov	ip, #5
   13f6c:	mov	r3, r0
   13f70:	movw	r2, #37472	; 0x9260
   13f74:	movt	r2, #2
   13f78:	movw	r1, #37500	; 0x927c
   13f7c:	movt	r1, #2
   13f80:	str	ip, [sp]
   13f84:	mov	r0, r7
   13f88:	bl	11f3c <dcngettext@plt>
   13f8c:	mov	r2, r0
   13f90:	mov	r3, r4
   13f94:	mov	r1, r7
   13f98:	mov	r0, r7
   13f9c:	bl	11c90 <error@plt>
   13fa0:	strb	r6, [sp, #327]	; 0x147
   13fa4:	ldrb	r3, [fp, #1310]	; 0x51e
   13fa8:	cmp	r3, #0
   13fac:	bne	12b50 <__assert_fail@plt+0xc08>
   13fb0:	ldrb	r4, [fp, #1309]	; 0x51d
   13fb4:	cmp	r4, #0
   13fb8:	bne	12b50 <__assert_fail@plt+0xc08>
   13fbc:	ldr	r3, [fp, #1300]	; 0x514
   13fc0:	cmp	r3, #0
   13fc4:	beq	12b50 <__assert_fail@plt+0xc08>
   13fc8:	mov	r2, #5
   13fcc:	mov	r0, r4
   13fd0:	movw	r1, #37524	; 0x9294
   13fd4:	movt	r1, #2
   13fd8:	bl	11b58 <dcgettext@plt>
   13fdc:	mov	r2, r0
   13fe0:	mov	r1, r4
   13fe4:	mov	r0, r4
   13fe8:	bl	11c90 <error@plt>
   13fec:	b	12b50 <__assert_fail@plt+0xc08>
   13ff0:	mov	r2, #5
   13ff4:	movw	r1, #37052	; 0x90bc
   13ff8:	movt	r1, #2
   13ffc:	mov	r0, #0
   14000:	bl	11b58 <dcgettext@plt>
   14004:	mov	r1, #0
   14008:	mov	r3, r5
   1400c:	mov	r2, r0
   14010:	mov	r0, r1
   14014:	bl	11c90 <error@plt>
   14018:	ldrb	r1, [r4, #28]
   1401c:	ldrb	r3, [r4, #26]
   14020:	cmp	r1, #0
   14024:	streq	r8, [sp, #72]	; 0x48
   14028:	strne	r1, [sp, #80]	; 0x50
   1402c:	b	1371c <__assert_fail@plt+0x17d4>
   14030:	ldrd	r0, [sp, #36]	; 0x24
   14034:	bl	16328 <__assert_fail@plt+0x43e0>
   14038:	ldr	r3, [sp, #24]
   1403c:	cmp	r3, #0
   14040:	bne	13344 <__assert_fail@plt+0x13fc>
   14044:	ldr	r0, [sp, #184]	; 0xb8
   14048:	mov	r6, sl
   1404c:	bl	1d29c <__assert_fail@plt+0xb354>
   14050:	mov	r1, #8
   14054:	mov	r0, sl
   14058:	ldr	r4, [fp, #768]	; 0x300
   1405c:	bl	24d54 <__assert_fail@plt+0x12e0c>
   14060:	mov	r5, r0
   14064:	mov	r3, r0
   14068:	b	1407c <__assert_fail@plt+0x2134>
   1406c:	add	r2, r4, #9
   14070:	str	r4, [r3, #-4]
   14074:	ldr	r4, [r4]
   14078:	str	r2, [r3, #-8]
   1407c:	cmp	r4, #0
   14080:	add	r3, r3, #8
   14084:	bne	1406c <__assert_fail@plt+0x2124>
   14088:	mov	r0, r5
   1408c:	mov	r2, r6
   14090:	ldr	r3, [sp, #52]	; 0x34
   14094:	mov	r1, r6
   14098:	bl	1a5dc <__assert_fail@plt+0x8694>
   1409c:	mov	r0, r5
   140a0:	bl	1d29c <__assert_fail@plt+0xb354>
   140a4:	b	1353c <__assert_fail@plt+0x15f4>
   140a8:	ldr	r8, [sl]
   140ac:	movw	r1, #31568	; 0x7b50
   140b0:	movt	r1, #2
   140b4:	mov	r0, r8
   140b8:	bl	17a60 <__assert_fail@plt+0x5b18>
   140bc:	subs	r9, r0, #0
   140c0:	beq	14e04 <__assert_fail@plt+0x2ebc>
   140c4:	movw	r3, #41444	; 0xa1e4
   140c8:	movt	r3, #3
   140cc:	ldrb	r6, [fp, #1309]	; 0x51d
   140d0:	ldr	r3, [r3, #112]	; 0x70
   140d4:	ldr	r4, [fp, #1484]	; 0x5cc
   140d8:	eor	r6, r6, #1
   140dc:	ldr	sl, [fp, #1300]	; 0x514
   140e0:	cmp	r4, r3
   140e4:	movcc	r4, r3
   140e8:	b	140f8 <__assert_fail@plt+0x21b0>
   140ec:	cmp	r4, #35	; 0x23
   140f0:	lsr	r4, r4, #1
   140f4:	bls	14db8 <__assert_fail@plt+0x2e70>
   140f8:	bic	r4, r4, #15
   140fc:	add	r4, r4, #16
   14100:	mov	r0, r4
   14104:	bl	262d0 <__assert_fail@plt+0x14388>
   14108:	cmp	r0, #0
   1410c:	str	r0, [sp, #296]	; 0x128
   14110:	beq	140ec <__assert_fail@plt+0x21a4>
   14114:	mov	r1, #0
   14118:	mov	r0, #0
   1411c:	mov	r3, #0
   14120:	mov	r2, #16
   14124:	mov	r7, r3
   14128:	strd	r0, [sp, #24]
   1412c:	add	r1, sp, #296	; 0x128
   14130:	str	r4, [sp, #308]	; 0x134
   14134:	str	r1, [sp, #40]	; 0x28
   14138:	str	r3, [sp, #152]	; 0x98
   1413c:	str	r3, [sp, #300]	; 0x12c
   14140:	str	r3, [sp, #304]	; 0x130
   14144:	str	r3, [sp, #312]	; 0x138
   14148:	str	r2, [sp, #316]	; 0x13c
   1414c:	strb	r3, [sp, #320]	; 0x140
   14150:	mov	r2, r8
   14154:	mov	r1, r9
   14158:	ldr	r0, [sp, #40]	; 0x28
   1415c:	bl	171c8 <__assert_fail@plt+0x5280>
   14160:	cmp	r0, #0
   14164:	beq	14af0 <__assert_fail@plt+0x2ba8>
   14168:	ldr	r4, [sp, #296]	; 0x128
   1416c:	cmp	r7, #0
   14170:	ldr	r5, [sp, #304]	; 0x130
   14174:	ldr	r3, [sp, #308]	; 0x134
   14178:	add	r4, r4, r3
   1417c:	sub	r5, r4, r5, lsl #4
   14180:	sub	r4, r4, #16
   14184:	beq	141a0 <__assert_fail@plt+0x2258>
   14188:	b	14244 <__assert_fail@plt+0x22fc>
   1418c:	sub	r4, r4, #16
   14190:	mov	r1, r4
   14194:	bl	18cc0 <__assert_fail@plt+0x6d78>
   14198:	cmp	r6, r0
   1419c:	ble	14258 <__assert_fail@plt+0x2310>
   141a0:	cmp	r5, r4
   141a4:	mov	r0, r4
   141a8:	bcc	1418c <__assert_fail@plt+0x2244>
   141ac:	ldrd	r0, [sp, #24]
   141b0:	ldr	r3, [sp, #304]	; 0x130
   141b4:	ldr	r2, [r4, #4]
   141b8:	adds	r0, r0, r3
   141bc:	adc	r1, r1, #0
   141c0:	cmp	r7, r2
   141c4:	strd	r0, [sp, #24]
   141c8:	bcc	1421c <__assert_fail@plt+0x22d4>
   141cc:	ldr	r1, [r4]
   141d0:	ldr	r0, [sp, #152]	; 0x98
   141d4:	bl	11ac8 <memcpy@plt>
   141d8:	ldr	r3, [r4, #4]
   141dc:	cmp	sl, #0
   141e0:	str	r3, [sp, #156]	; 0x9c
   141e4:	beq	14150 <__assert_fail@plt+0x2208>
   141e8:	ldr	r0, [r4]
   141ec:	ldr	r3, [r4, #8]
   141f0:	ldr	r1, [r4, #12]
   141f4:	ldr	r2, [sp, #152]	; 0x98
   141f8:	sub	r3, r3, r0
   141fc:	sub	r1, r1, r0
   14200:	add	r3, r2, r3
   14204:	add	r2, r2, r1
   14208:	str	r3, [sp, #160]	; 0xa0
   1420c:	str	r2, [sp, #164]	; 0xa4
   14210:	b	14150 <__assert_fail@plt+0x2208>
   14214:	cmp	r2, r7
   14218:	bls	14228 <__assert_fail@plt+0x22e0>
   1421c:	lsls	r7, r7, #1
   14220:	bne	14214 <__assert_fail@plt+0x22cc>
   14224:	mov	r7, r2
   14228:	ldr	r0, [sp, #152]	; 0x98
   1422c:	bl	1d29c <__assert_fail@plt+0xb354>
   14230:	mov	r0, r7
   14234:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   14238:	ldr	r2, [r4, #4]
   1423c:	str	r0, [sp, #152]	; 0x98
   14240:	b	141cc <__assert_fail@plt+0x2284>
   14244:	add	r0, sp, #152	; 0x98
   14248:	mov	r1, r4
   1424c:	bl	18cc0 <__assert_fail@plt+0x6d78>
   14250:	cmp	r6, r0
   14254:	bgt	141a0 <__assert_fail@plt+0x2258>
   14258:	ldr	r3, [sp, #36]	; 0x24
   1425c:	cmp	r3, #99	; 0x63
   14260:	movne	sl, #0
   14264:	beq	14980 <__assert_fail@plt+0x2a38>
   14268:	mov	r1, r8
   1426c:	mov	r0, r9
   14270:	bl	16328 <__assert_fail@plt+0x43e0>
   14274:	ldr	r0, [sp, #296]	; 0x128
   14278:	bl	1d29c <__assert_fail@plt+0xb354>
   1427c:	ldr	r0, [sp, #152]	; 0x98
   14280:	bl	1d29c <__assert_fail@plt+0xb354>
   14284:	eor	r0, sl, #1
   14288:	bl	11d38 <exit@plt>
   1428c:	mov	r2, #1
   14290:	ldr	r1, [sp, #72]	; 0x48
   14294:	mov	r3, r2
   14298:	b	142a4 <__assert_fail@plt+0x235c>
   1429c:	lsl	r3, r3, #1
   142a0:	add	r2, r2, #1
   142a4:	cmp	r1, r3
   142a8:	bhi	1429c <__assert_fail@plt+0x2354>
   142ac:	lsl	r3, r2, #4
   142b0:	str	r3, [sp, #84]	; 0x54
   142b4:	b	13380 <__assert_fail@plt+0x1438>
   142b8:	ldrb	r3, [fp, #1310]	; 0x51e
   142bc:	cmp	r3, #0
   142c0:	bne	142d0 <__assert_fail@plt+0x2388>
   142c4:	ldrb	r3, [fp, #1309]	; 0x51d
   142c8:	cmp	r3, #0
   142cc:	strbeq	r3, [sp, #327]	; 0x147
   142d0:	add	r4, sp, #184	; 0xb8
   142d4:	ldr	r0, [sp, #40]	; 0x28
   142d8:	mov	r1, r4
   142dc:	bl	15134 <__assert_fail@plt+0x31ec>
   142e0:	mov	r0, r4
   142e4:	bl	11d50 <strlen@plt>
   142e8:	mov	ip, #5
   142ec:	mov	r3, r0
   142f0:	movw	r2, #37472	; 0x9260
   142f4:	movt	r2, #2
   142f8:	movw	r1, #37500	; 0x927c
   142fc:	movt	r1, #2
   14300:	str	ip, [sp]
   14304:	mov	r0, #0
   14308:	bl	11f3c <dcngettext@plt>
   1430c:	mov	r1, #0
   14310:	mov	r2, r0
   14314:	mov	r3, r4
   14318:	mov	r0, r1
   1431c:	bl	11c90 <error@plt>
   14320:	cmp	r6, #0
   14324:	strb	r6, [sp, #327]	; 0x147
   14328:	bne	13fa4 <__assert_fail@plt+0x205c>
   1432c:	b	12b50 <__assert_fail@plt+0xc08>
   14330:	mov	r2, #5
   14334:	mov	r0, r4
   14338:	movw	r1, #36868	; 0x9004
   1433c:	movt	r1, #2
   14340:	bl	11b58 <dcgettext@plt>
   14344:	mov	r3, r0
   14348:	movw	r2, #31468	; 0x7aec
   1434c:	movt	r2, #2
   14350:	mov	r1, r4
   14354:	mov	r0, r4
   14358:	bl	11c90 <error@plt>
   1435c:	b	13608 <__assert_fail@plt+0x16c0>
   14360:	ldr	r3, [sp, #80]	; 0x50
   14364:	cmp	r3, #0
   14368:	bne	14f18 <__assert_fail@plt+0x2fd0>
   1436c:	ldr	r3, [sp, #44]	; 0x2c
   14370:	cmp	r3, #0
   14374:	movwne	r8, #41444	; 0xa1e4
   14378:	movtne	r8, #3
   1437c:	beq	13f10 <__assert_fail@plt+0x1fc8>
   14380:	movw	r1, #37340	; 0x91dc
   14384:	movt	r1, #2
   14388:	mov	r2, #5
   1438c:	mov	r0, #0
   14390:	bl	11b58 <dcgettext@plt>
   14394:	ldrb	r6, [fp, #1308]	; 0x51c
   14398:	mov	r4, r0
   1439c:	ldr	r3, [r8]
   143a0:	cmp	r6, r3
   143a4:	movweq	r8, #33096	; 0x8148
   143a8:	movteq	r8, #2
   143ac:	beq	143c8 <__assert_fail@plt+0x2480>
   143b0:	movw	r1, #37392	; 0x9210
   143b4:	movt	r1, #2
   143b8:	mov	r2, #5
   143bc:	mov	r0, #0
   143c0:	bl	11b58 <dcgettext@plt>
   143c4:	mov	r8, r0
   143c8:	mov	r7, #0
   143cc:	add	r0, sp, #112	; 0x70
   143d0:	strb	r6, [sp, #112]	; 0x70
   143d4:	strb	r7, [sp, #113]	; 0x71
   143d8:	bl	230fc <__assert_fail@plt+0x111b4>
   143dc:	mov	r3, r8
   143e0:	mov	r2, r4
   143e4:	str	r0, [sp]
   143e8:	mov	r1, r7
   143ec:	mov	r0, r7
   143f0:	bl	11c90 <error@plt>
   143f4:	b	13ef8 <__assert_fail@plt+0x1fb0>
   143f8:	add	r1, sp, #224	; 0xe0
   143fc:	add	r0, r0, #1
   14400:	str	lr, [sp, #104]	; 0x68
   14404:	movw	r2, #36196	; 0x8d64
   14408:	movt	r2, #2
   1440c:	bl	16124 <__assert_fail@plt+0x41dc>
   14410:	ldr	lr, [sp, #104]	; 0x68
   14414:	ldr	r2, [sp, #224]	; 0xe0
   14418:	sub	r1, r2, #1
   1441c:	cmp	r2, #0
   14420:	str	r1, [sp, #224]	; 0xe0
   14424:	beq	14b48 <__assert_fail@plt+0x2c00>
   14428:	ldrb	r2, [r0]
   1442c:	cmp	r2, #46	; 0x2e
   14430:	beq	14a34 <__assert_fail@plt+0x2aec>
   14434:	mov	r2, #1
   14438:	ldr	r1, [sp, #84]	; 0x54
   1443c:	str	lr, [sp, #104]	; 0x68
   14440:	bl	15200 <__assert_fail@plt+0x32b8>
   14444:	ldr	lr, [sp, #104]	; 0x68
   14448:	b	12c98 <__assert_fail@plt+0xd50>
   1444c:	add	r1, sp, #220	; 0xdc
   14450:	add	r0, r0, #1
   14454:	str	lr, [sp, #104]	; 0x68
   14458:	movw	r2, #35992	; 0x8c98
   1445c:	movt	r2, #2
   14460:	bl	16124 <__assert_fail@plt+0x41dc>
   14464:	ldr	lr, [sp, #104]	; 0x68
   14468:	ldr	r1, [sp, #220]	; 0xdc
   1446c:	mov	r2, r1
   14470:	sub	r1, r1, #1
   14474:	cmp	r2, #0
   14478:	str	r1, [sp, #220]	; 0xdc
   1447c:	beq	14f44 <__assert_fail@plt+0x2ffc>
   14480:	ldr	r2, [sp, #216]	; 0xd8
   14484:	b	12c60 <__assert_fail@plt+0xd18>
   14488:	movw	r3, #31572	; 0x7b54
   1448c:	movt	r3, #2
   14490:	add	r8, sp, #296	; 0x128
   14494:	str	r3, [sp, #56]	; 0x38
   14498:	ldr	r3, [sp, #84]	; 0x54
   1449c:	str	sl, [sp, #60]	; 0x3c
   144a0:	mov	sl, r8
   144a4:	add	r9, r3, #1
   144a8:	add	r4, r3, #2
   144ac:	b	14510 <__assert_fail@plt+0x25c8>
   144b0:	ldr	r0, [fp, #1484]	; 0x5cc
   144b4:	cmp	r0, #0
   144b8:	bne	14744 <__assert_fail@plt+0x27fc>
   144bc:	ldr	r3, [fp, #1492]	; 0x5d4
   144c0:	mov	r6, #131072	; 0x20000
   144c4:	mov	r7, #0
   144c8:	cmp	r3, #0
   144cc:	beq	14584 <__assert_fail@plt+0x263c>
   144d0:	mul	r1, r6, r9
   144d4:	mov	r3, #0
   144d8:	ldr	r0, [fp, #1492]	; 0x5d4
   144dc:	cmp	r3, r7
   144e0:	add	r1, r1, #1
   144e4:	udiv	r2, r1, r9
   144e8:	cmpeq	r2, r6
   144ec:	bne	14744 <__assert_fail@plt+0x27fc>
   144f0:	sub	r3, r0, r4
   144f4:	cmp	r1, r3
   144f8:	bcs	14744 <__assert_fail@plt+0x27fc>
   144fc:	ldr	r3, [sp, #24]
   14500:	add	r5, r5, #1
   14504:	add	r4, r4, r1
   14508:	cmp	r5, r3
   1450c:	bcs	14a2c <__assert_fail@plt+0x2ae4>
   14510:	cmp	r5, #0
   14514:	beq	146b8 <__assert_fail@plt+0x2770>
   14518:	ldr	r3, [sp, #48]	; 0x30
   1451c:	ldr	r1, [sp, #56]	; 0x38
   14520:	ldr	r6, [r3, r5, lsl #2]
   14524:	mov	r0, r6
   14528:	bl	11a2c <strcmp@plt>
   1452c:	subs	r1, r0, #0
   14530:	bne	1469c <__assert_fail@plt+0x2754>
   14534:	mov	r2, sl
   14538:	mov	r0, #3
   1453c:	bl	11bf4 <__fxstat64@plt>
   14540:	adds	r0, r0, #0
   14544:	movne	r0, #1
   14548:	cmp	r0, #0
   1454c:	bne	14e28 <__assert_fail@plt+0x2ee0>
   14550:	ldr	r3, [sp, #312]	; 0x138
   14554:	and	r3, r3, #61440	; 0xf000
   14558:	cmp	r3, #32768	; 0x8000
   1455c:	bne	144b0 <__assert_fail@plt+0x2568>
   14560:	ldr	r3, [fp, #1492]	; 0x5d4
   14564:	add	r2, sp, #344	; 0x158
   14568:	ldrd	r6, [r2]
   1456c:	cmp	r3, #0
   14570:	bne	144d0 <__assert_fail@plt+0x2588>
   14574:	ldr	r3, [fp, #1484]	; 0x5cc
   14578:	cmp	r3, #0
   1457c:	str	r3, [fp, #1492]	; 0x5d4
   14580:	bne	144d0 <__assert_fail@plt+0x2588>
   14584:	mov	r0, #2
   14588:	add	r1, sp, #152	; 0x98
   1458c:	bl	11b94 <getrlimit64@plt>
   14590:	cmp	r0, #0
   14594:	mvnne	r8, #0
   14598:	bne	145b8 <__assert_fail@plt+0x2670>
   1459c:	ldrd	r2, [sp, #152]	; 0x98
   145a0:	mov	r1, #0
   145a4:	mvn	r0, #1
   145a8:	cmp	r3, r1
   145ac:	cmpeq	r2, r0
   145b0:	movls	r8, r2
   145b4:	mvnhi	r8, #0
   145b8:	add	r1, sp, #152	; 0x98
   145bc:	mov	r0, #9
   145c0:	bl	11b94 <getrlimit64@plt>
   145c4:	cmp	r0, #0
   145c8:	bne	145e0 <__assert_fail@plt+0x2698>
   145cc:	ldrd	r0, [sp, #152]	; 0x98
   145d0:	mov	r3, #0
   145d4:	cmp	r1, r3
   145d8:	cmpeq	r0, r8
   145dc:	movcc	r8, r0
   145e0:	add	r1, sp, #152	; 0x98
   145e4:	mov	r0, #5
   145e8:	lsr	r8, r8, #1
   145ec:	bl	11b94 <getrlimit64@plt>
   145f0:	cmp	r0, #0
   145f4:	bne	14628 <__assert_fail@plt+0x26e0>
   145f8:	ldr	ip, [sp, #152]	; 0x98
   145fc:	mov	r2, #15
   14600:	ldr	r3, [sp, #156]	; 0x9c
   14604:	lsr	ip, ip, #4
   14608:	orr	ip, ip, r3, lsl #28
   1460c:	lsr	r3, r3, #4
   14610:	umull	r0, r1, ip, r2
   14614:	mla	r1, r2, r3, r1
   14618:	mov	r3, #0
   1461c:	cmp	r1, r3
   14620:	cmpeq	r0, r8
   14624:	rsbcc	r8, ip, ip, lsl #4
   14628:	bl	1f438 <__assert_fail@plt+0xd4f0>
   1462c:	vmov.f64	d8, d0
   14630:	bl	1f398 <__assert_fail@plt+0xd450>
   14634:	vmov	s15, r8
   14638:	vmul.f64	d6, d0, d10
   1463c:	vmul.f64	d0, d0, d9
   14640:	vcmpe.f64	d8, d6
   14644:	vcvt.f64.u32	d7, s15
   14648:	vmrs	APSR_nzcv, fpscr
   1464c:	vcmpe.f64	d0, d7
   14650:	vmovle.f64	d8, d6
   14654:	vmrs	APSR_nzcv, fpscr
   14658:	bpl	14668 <__assert_fail@plt+0x2720>
   1465c:	vcvt.u32.f64	s15, d0
   14660:	vmov	r8, s15
   14664:	vcvt.f64.u32	d7, s15
   14668:	vcmpe.f64	d7, d8
   1466c:	movw	r3, #41444	; 0xa1e4
   14670:	movt	r3, #3
   14674:	ldr	r2, [r3, #8]
   14678:	mov	r3, #18
   1467c:	vmrs	APSR_nzcv, fpscr
   14680:	mul	r3, r3, r2
   14684:	vcvtgt.u32.f64	s15, d8
   14688:	vmovgt	r8, s15
   1468c:	cmp	r3, r8
   14690:	movcs	r8, r3
   14694:	str	r8, [fp, #1492]	; 0x5d4
   14698:	b	144d0 <__assert_fail@plt+0x2588>
   1469c:	mov	r1, r6
   146a0:	mov	r2, sl
   146a4:	mov	r0, #3
   146a8:	bl	11f00 <__xstat64@plt>
   146ac:	adds	r0, r0, #0
   146b0:	movne	r0, #1
   146b4:	b	14548 <__assert_fail@plt+0x2600>
   146b8:	ldr	r0, [sp, #36]	; 0x24
   146bc:	bl	11dc8 <fileno@plt>
   146c0:	mov	r1, r0
   146c4:	mov	r2, sl
   146c8:	mov	r0, #3
   146cc:	bl	11bf4 <__fxstat64@plt>
   146d0:	adds	r0, r0, #0
   146d4:	movne	r0, #1
   146d8:	b	14548 <__assert_fail@plt+0x2600>
   146dc:	ldrb	r2, [r4, #25]
   146e0:	cmp	r2, #0
   146e4:	bne	136d8 <__assert_fail@plt+0x1790>
   146e8:	ldr	r2, [r4, #12]
   146ec:	cmp	r2, #0
   146f0:	beq	136d8 <__assert_fail@plt+0x1790>
   146f4:	b	13a40 <__assert_fail@plt+0x1af8>
   146f8:	add	r0, sp, #256	; 0x100
   146fc:	mov	r1, #40	; 0x28
   14700:	bl	2507c <__assert_fail@plt+0x13134>
   14704:	ldr	r2, [pc, #2188]	; 14f98 <__assert_fail@plt+0x3050>
   14708:	ldr	r3, [fp, #1300]	; 0x514
   1470c:	cmp	r3, #0
   14710:	beq	14720 <__assert_fail@plt+0x27d8>
   14714:	add	r2, r3, #36	; 0x24
   14718:	ldr	r3, [r3, #36]	; 0x24
   1471c:	b	1470c <__assert_fail@plt+0x27c4>
   14720:	ldrb	r9, [sp, #283]	; 0x11b
   14724:	str	r0, [r2]
   14728:	ldr	r4, [fp, #1300]	; 0x514
   1472c:	str	r3, [r0, #36]	; 0x24
   14730:	mov	r3, #1
   14734:	mov	r8, r3
   14738:	cmp	r4, #0
   1473c:	bne	12af8 <__assert_fail@plt+0xbb0>
   14740:	b	12b44 <__assert_fail@plt+0xbfc>
   14744:	mov	r4, r0
   14748:	ldr	sl, [sp, #60]	; 0x3c
   1474c:	b	1475c <__assert_fail@plt+0x2814>
   14750:	lsr	r4, r4, #1
   14754:	cmp	r4, r9
   14758:	bls	14db8 <__assert_fail@plt+0x2e70>
   1475c:	bic	r4, r4, #15
   14760:	add	r4, r4, #16
   14764:	mov	r0, r4
   14768:	bl	262d0 <__assert_fail@plt+0x14388>
   1476c:	cmp	r0, #0
   14770:	str	r0, [sp, #184]	; 0xb8
   14774:	beq	14750 <__assert_fail@plt+0x2808>
   14778:	ldr	r2, [sp, #84]	; 0x54
   1477c:	mov	r3, #0
   14780:	str	r3, [sp, #188]	; 0xbc
   14784:	str	r3, [sp, #192]	; 0xc0
   14788:	str	r4, [sp, #196]	; 0xc4
   1478c:	str	r3, [sp, #200]	; 0xc8
   14790:	str	r2, [sp, #204]	; 0xcc
   14794:	b	1338c <__assert_fail@plt+0x1444>
   14798:	mov	r4, sl
   1479c:	mov	r0, #1
   147a0:	ldr	r8, [sp, #84]	; 0x54
   147a4:	b	13200 <__assert_fail@plt+0x12b8>
   147a8:	mvn	r3, #0
   147ac:	str	r3, [sp, #64]	; 0x40
   147b0:	b	123b8 <__assert_fail@plt+0x470>
   147b4:	mov	r0, #2
   147b8:	bl	1f234 <__assert_fail@plt+0xd2ec>
   147bc:	cmp	r0, #8
   147c0:	movcc	r3, r0
   147c4:	movcs	r3, #8
   147c8:	str	r3, [sp, #64]	; 0x40
   147cc:	b	132ec <__assert_fail@plt+0x13a4>
   147d0:	ldrd	r0, [sp, #36]	; 0x24
   147d4:	str	r2, [sp, #200]	; 0xc8
   147d8:	bl	16328 <__assert_fail@plt+0x43e0>
   147dc:	b	13344 <__assert_fail@plt+0x13fc>
   147e0:	mov	r2, #5
   147e4:	movw	r1, #37400	; 0x9218
   147e8:	movt	r1, #2
   147ec:	mov	r0, #0
   147f0:	bl	11b58 <dcgettext@plt>
   147f4:	mov	r1, #0
   147f8:	mov	r2, r0
   147fc:	mov	r0, r1
   14800:	bl	11c90 <error@plt>
   14804:	b	13f10 <__assert_fail@plt+0x1fc8>
   14808:	cmp	r7, #256	; 0x100
   1480c:	beq	1482c <__assert_fail@plt+0x28e4>
   14810:	ldr	r3, [sp, #56]	; 0x38
   14814:	ldr	r2, [r3]
   14818:	uxtb	r3, r7
   1481c:	lsl	r3, r3, #1
   14820:	ldrh	r3, [r2, r3]
   14824:	tst	r3, #1
   14828:	bne	148ac <__assert_fail@plt+0x2964>
   1482c:	str	r4, [sp, #72]	; 0x48
   14830:	ldr	r3, [fp, #1304]	; 0x518
   14834:	cmp	r3, #256	; 0x100
   14838:	beq	13ee0 <__assert_fail@plt+0x1f98>
   1483c:	ldr	r2, [sp, #56]	; 0x38
   14840:	ldrb	r3, [fp, #1308]	; 0x51c
   14844:	ldr	r2, [r2]
   14848:	lsl	r3, r3, #1
   1484c:	ldrh	r3, [r2, r3]
   14850:	tst	r3, #1
   14854:	beq	13ee0 <__assert_fail@plt+0x1f98>
   14858:	mov	r2, #5
   1485c:	movw	r1, #37164	; 0x912c
   14860:	movt	r1, #2
   14864:	mov	r0, #0
   14868:	bl	11b58 <dcgettext@plt>
   1486c:	ldrb	r3, [fp, #1308]	; 0x51c
   14870:	mov	r4, #0
   14874:	mov	r6, r0
   14878:	add	r0, sp, #124	; 0x7c
   1487c:	strb	r3, [sp, #124]	; 0x7c
   14880:	strb	r4, [sp, #125]	; 0x7d
   14884:	bl	230fc <__assert_fail@plt+0x111b4>
   14888:	mov	r3, r0
   1488c:	mov	r2, r6
   14890:	mov	r1, r4
   14894:	mov	r0, r4
   14898:	bl	11c90 <error@plt>
   1489c:	ldr	r3, [sp, #44]	; 0x2c
   148a0:	cmp	r3, r4
   148a4:	bne	13ef8 <__assert_fail@plt+0x1fb0>
   148a8:	b	13f10 <__assert_fail@plt+0x1fc8>
   148ac:	mov	r2, #5
   148b0:	mov	r0, #0
   148b4:	movw	r1, #37100	; 0x90ec
   148b8:	movt	r1, #2
   148bc:	mov	r4, r0
   148c0:	bl	11b58 <dcgettext@plt>
   148c4:	mov	r6, r0
   148c8:	add	r0, sp, #128	; 0x80
   148cc:	strb	r7, [sp, #128]	; 0x80
   148d0:	strb	r4, [sp, #129]	; 0x81
   148d4:	bl	230fc <__assert_fail@plt+0x111b4>
   148d8:	mov	r3, r0
   148dc:	mov	r2, r6
   148e0:	mov	r1, r4
   148e4:	mov	r0, r4
   148e8:	bl	11c90 <error@plt>
   148ec:	ldr	r6, [r8]
   148f0:	cmp	r6, #256	; 0x100
   148f4:	bne	13eb4 <__assert_fail@plt+0x1f6c>
   148f8:	b	14830 <__assert_fail@plt+0x28e8>
   148fc:	ldrb	r2, [r2, #1]
   14900:	sub	r2, r2, #48	; 0x30
   14904:	cmp	r2, #9
   14908:	movhi	r3, #0
   1490c:	movls	r3, #1
   14910:	str	r3, [sp, #104]	; 0x68
   14914:	b	13b14 <__assert_fail@plt+0x1bcc>
   14918:	ldr	r3, [fp, #1300]	; 0x514
   1491c:	cmp	r3, #0
   14920:	beq	12b50 <__assert_fail@plt+0xc08>
   14924:	add	r4, sp, #184	; 0xb8
   14928:	ldr	r0, [sp, #40]	; 0x28
   1492c:	mov	r1, r4
   14930:	bl	15134 <__assert_fail@plt+0x31ec>
   14934:	mov	r0, r4
   14938:	bl	11d50 <strlen@plt>
   1493c:	mov	ip, #5
   14940:	mov	r3, r0
   14944:	movw	r2, #37472	; 0x9260
   14948:	movt	r2, #2
   1494c:	movw	r1, #37500	; 0x927c
   14950:	movt	r1, #2
   14954:	str	ip, [sp]
   14958:	mov	r0, #0
   1495c:	bl	11f3c <dcngettext@plt>
   14960:	mov	r1, #0
   14964:	mov	r3, r4
   14968:	mov	r2, r0
   1496c:	mov	r0, r1
   14970:	bl	11c90 <error@plt>
   14974:	mov	r3, #1
   14978:	strb	r3, [sp, #327]	; 0x147
   1497c:	b	13fa4 <__assert_fail@plt+0x205c>
   14980:	ldrd	r6, [sp, #24]
   14984:	mov	r2, #5
   14988:	mov	r0, #0
   1498c:	movw	r5, #41672	; 0xa2c8
   14990:	movt	r5, #3
   14994:	ldr	r3, [sp, #296]	; 0x128
   14998:	movw	r1, #37624	; 0x92f8
   1499c:	movt	r1, #2
   149a0:	mov	sl, r0
   149a4:	ldr	ip, [sp, #308]	; 0x134
   149a8:	ldr	fp, [r5]
   149ac:	add	r3, r3, ip
   149b0:	sub	r3, r3, r4
   149b4:	asr	r3, r3, #4
   149b8:	adds	r6, r6, r3
   149bc:	adc	r7, r7, r3, asr #31
   149c0:	bl	11b58 <dcgettext@plt>
   149c4:	movw	r3, #43204	; 0xa8c4
   149c8:	movt	r3, #3
   149cc:	str	r0, [sp, #24]
   149d0:	mov	r0, r6
   149d4:	ldr	r6, [r3]
   149d8:	mov	r1, r7
   149dc:	add	r2, sp, #184	; 0xb8
   149e0:	bl	1ee5c <__assert_fail@plt+0xcf14>
   149e4:	mov	r1, #1
   149e8:	str	r8, [sp]
   149ec:	str	r0, [sp, #4]
   149f0:	mov	r0, fp
   149f4:	mov	r3, r6
   149f8:	ldr	r2, [sp, #24]
   149fc:	bl	11dd4 <__fprintf_chk@plt>
   14a00:	ldr	r5, [r5]
   14a04:	mov	r2, #5
   14a08:	mov	r0, sl
   14a0c:	movw	r1, #37648	; 0x9310
   14a10:	movt	r1, #2
   14a14:	bl	11b58 <dcgettext@plt>
   14a18:	mov	r2, r0
   14a1c:	mov	r0, r4
   14a20:	mov	r1, r5
   14a24:	bl	16874 <__assert_fail@plt+0x492c>
   14a28:	b	14268 <__assert_fail@plt+0x2320>
   14a2c:	ldr	sl, [sp, #60]	; 0x3c
   14a30:	b	1475c <__assert_fail@plt+0x2814>
   14a34:	add	r0, r0, #1
   14a38:	movw	r2, #35992	; 0x8c98
   14a3c:	movt	r2, #2
   14a40:	add	r1, sp, #228	; 0xe4
   14a44:	str	lr, [sp, #104]	; 0x68
   14a48:	bl	16124 <__assert_fail@plt+0x41dc>
   14a4c:	ldr	lr, [sp, #104]	; 0x68
   14a50:	b	14434 <__assert_fail@plt+0x24ec>
   14a54:	movw	r1, #31340	; 0x7a6c
   14a58:	movt	r1, #2
   14a5c:	mov	r2, #5
   14a60:	mov	r0, #0
   14a64:	bl	11b58 <dcgettext@plt>
   14a68:	movw	r1, #31572	; 0x7b54
   14a6c:	movt	r1, #2
   14a70:	bl	15848 <__assert_fail@plt+0x3900>
   14a74:	movw	r1, #37224	; 0x9168
   14a78:	movt	r1, #2
   14a7c:	mov	r2, #5
   14a80:	mov	r0, #0
   14a84:	bl	11b58 <dcgettext@plt>
   14a88:	mov	r4, r0
   14a8c:	add	r0, sp, #120	; 0x78
   14a90:	strh	r6, [sp, #120]	; 0x78
   14a94:	bl	230fc <__assert_fail@plt+0x111b4>
   14a98:	mov	r1, #0
   14a9c:	mov	r3, r0
   14aa0:	mov	r2, r4
   14aa4:	mov	r0, r1
   14aa8:	bl	11c90 <error@plt>
   14aac:	b	13ee0 <__assert_fail@plt+0x1f98>
   14ab0:	ldr	r2, [sp, #216]	; 0xd8
   14ab4:	ldr	r1, [sp, #220]	; 0xdc
   14ab8:	orrs	r3, r1, r2
   14abc:	mvneq	r3, #0
   14ac0:	streq	r3, [sp, #216]	; 0xd8
   14ac4:	b	1314c <__assert_fail@plt+0x1204>
   14ac8:	movw	r1, #37284	; 0x91a4
   14acc:	movt	r1, #2
   14ad0:	mov	r2, #5
   14ad4:	mov	r0, #0
   14ad8:	bl	11b58 <dcgettext@plt>
   14adc:	mov	r3, #43	; 0x2b
   14ae0:	mov	r4, r0
   14ae4:	add	r0, sp, #116	; 0x74
   14ae8:	strh	r3, [sp, #116]	; 0x74
   14aec:	b	14a94 <__assert_fail@plt+0x2b4c>
   14af0:	mov	sl, #1
   14af4:	b	14268 <__assert_fail@plt+0x2320>
   14af8:	movw	r1, #36020	; 0x8cb4
   14afc:	movt	r1, #2
   14b00:	ldr	r0, [lr]
   14b04:	bl	15788 <__assert_fail@plt+0x3840>
   14b08:	bl	1f398 <__assert_fail@plt+0xd450>
   14b0c:	add	r3, sp, #400	; 0x190
   14b10:	vmov.f64	d10, d0
   14b14:	ldrd	r0, [r3]
   14b18:	bl	2729c <_obstack_memory_used@@Base+0x3c4>
   14b1c:	vmov	d7, r0, r1
   14b20:	vmul.f64	d10, d7, d10
   14b24:	vdiv.f64	d7, d10, d9
   14b28:	vcmpe.f64	d7, d8
   14b2c:	vmrs	APSR_nzcv, fpscr
   14b30:	bpl	14798 <__assert_fail@plt+0x2850>
   14b34:	vmov	r0, r1, d7
   14b38:	bl	27360 <_obstack_memory_used@@Base+0x488>
   14b3c:	add	r3, sp, #400	; 0x190
   14b40:	strd	r0, [r3]
   14b44:	b	12d20 <__assert_fail@plt+0xdd8>
   14b48:	movw	r1, #36144	; 0x8d30
   14b4c:	movt	r1, #2
   14b50:	ldr	r0, [lr]
   14b54:	bl	15788 <__assert_fail@plt+0x3840>
   14b58:	mov	r2, #0
   14b5c:	add	r1, sp, #220	; 0xdc
   14b60:	add	r0, r0, #1
   14b64:	bl	16124 <__assert_fail@plt+0x41dc>
   14b68:	ldr	lr, [sp, #108]	; 0x6c
   14b6c:	ldr	r1, [sp, #216]	; 0xd8
   14b70:	ldr	r2, [sp, #220]	; 0xdc
   14b74:	orrs	r3, r1, r2
   14b78:	beq	13b9c <__assert_fail@plt+0x1c54>
   14b7c:	b	13ba4 <__assert_fail@plt+0x1c5c>
   14b80:	mov	r3, #0
   14b84:	mov	r0, r4
   14b88:	add	r1, sp, #296	; 0x128
   14b8c:	strh	r3, [r4, #24]
   14b90:	strb	r3, [r4, #31]
   14b94:	bl	15134 <__assert_fail@plt+0x31ec>
   14b98:	add	r0, sp, #296	; 0x128
   14b9c:	bl	15754 <__assert_fail@plt+0x380c>
   14ba0:	movw	r1, #36504	; 0x8e98
   14ba4:	movt	r1, #2
   14ba8:	mov	r2, #5
   14bac:	bl	11b58 <dcgettext@plt>
   14bb0:	mov	r2, r0
   14bb4:	mov	r1, #0
   14bb8:	mov	r0, #2
   14bbc:	bl	11c90 <error@plt>
   14bc0:	movw	r1, #36072	; 0x8ce8
   14bc4:	movt	r1, #2
   14bc8:	mov	r2, #5
   14bcc:	mov	r0, #0
   14bd0:	b	14bac <__assert_fail@plt+0x2c64>
   14bd4:	mov	sl, r4
   14bd8:	ldr	fp, [sp, #44]	; 0x2c
   14bdc:	ldr	r3, [sp, #48]	; 0x30
   14be0:	cmp	r3, #0
   14be4:	beq	128b0 <__assert_fail@plt+0x968>
   14be8:	cmp	r5, #0
   14bec:	bne	12a7c <__assert_fail@plt+0xb34>
   14bf0:	movw	r1, #31568	; 0x7b50
   14bf4:	movt	r1, #2
   14bf8:	ldr	r0, [sp, #48]	; 0x30
   14bfc:	bl	17a60 <__assert_fail@plt+0x5b18>
   14c00:	subs	r4, r0, #0
   14c04:	beq	14d40 <__assert_fail@plt+0x2df8>
   14c08:	add	r0, sp, #400	; 0x190
   14c0c:	bl	23b78 <__assert_fail@plt+0x11c30>
   14c10:	add	r1, sp, #400	; 0x190
   14c14:	mov	r0, r4
   14c18:	bl	23c44 <__assert_fail@plt+0x11cfc>
   14c1c:	cmp	r0, #0
   14c20:	movweq	r1, #36640	; 0x8f20
   14c24:	moveq	r2, #5
   14c28:	movteq	r1, #2
   14c2c:	beq	14d28 <__assert_fail@plt+0x2de0>
   14c30:	mov	r0, r4
   14c34:	ldr	r1, [sp, #48]	; 0x30
   14c38:	bl	16328 <__assert_fail@plt+0x43e0>
   14c3c:	ldr	r3, [sp, #400]	; 0x190
   14c40:	cmp	r3, #0
   14c44:	beq	14d18 <__assert_fail@plt+0x2dd0>
   14c48:	mov	r0, sl
   14c4c:	bl	1d29c <__assert_fail@plt+0xb354>
   14c50:	ldr	r6, [sp, #400]	; 0x190
   14c54:	ldr	sl, [sp, #404]	; 0x194
   14c58:	cmp	r6, #0
   14c5c:	beq	128b0 <__assert_fail@plt+0x968>
   14c60:	movw	r4, #31572	; 0x7b54
   14c64:	movt	r4, #2
   14c68:	mov	r9, sl
   14c6c:	b	14c88 <__assert_fail@plt+0x2d40>
   14c70:	ldrb	r7, [r7]
   14c74:	add	r5, r5, #1
   14c78:	cmp	r7, #0
   14c7c:	beq	14cd8 <__assert_fail@plt+0x2d90>
   14c80:	cmp	r6, r5
   14c84:	beq	128b0 <__assert_fail@plt+0x968>
   14c88:	mov	r8, r9
   14c8c:	ldr	r7, [r9], #4
   14c90:	mov	r1, r4
   14c94:	mov	r0, r7
   14c98:	bl	11a2c <strcmp@plt>
   14c9c:	subs	r3, r0, #0
   14ca0:	bne	14c70 <__assert_fail@plt+0x2d28>
   14ca4:	movw	r1, #36672	; 0x8f40
   14ca8:	movt	r1, #2
   14cac:	mov	r2, #5
   14cb0:	bl	11b58 <dcgettext@plt>
   14cb4:	mov	r4, r0
   14cb8:	mov	r0, #4
   14cbc:	ldr	r1, [r8]
   14cc0:	bl	21dd0 <__assert_fail@plt+0xfe88>
   14cc4:	mov	r3, r0
   14cc8:	mov	r2, r4
   14ccc:	mov	r1, #0
   14cd0:	mov	r0, #2
   14cd4:	bl	11c90 <error@plt>
   14cd8:	mov	r2, #5
   14cdc:	movw	r1, #36736	; 0x8f80
   14ce0:	movt	r1, #2
   14ce4:	mov	r0, r7
   14ce8:	bl	11b58 <dcgettext@plt>
   14cec:	mov	r4, r0
   14cf0:	mov	r1, #3
   14cf4:	ldr	r2, [sp, #48]	; 0x30
   14cf8:	mov	r0, r7
   14cfc:	bl	22950 <__assert_fail@plt+0x10a08>
   14d00:	mov	r3, r0
   14d04:	mov	r2, r4
   14d08:	str	r5, [sp]
   14d0c:	mov	r1, r7
   14d10:	mov	r0, #2
   14d14:	bl	11c90 <error@plt>
   14d18:	movw	r1, #36776	; 0x8fa8
   14d1c:	movt	r1, #2
   14d20:	mov	r2, #5
   14d24:	mov	r0, r5
   14d28:	bl	11b58 <dcgettext@plt>
   14d2c:	mov	r4, r0
   14d30:	mov	r0, #4
   14d34:	ldr	r1, [sp, #48]	; 0x30
   14d38:	bl	21dd0 <__assert_fail@plt+0xfe88>
   14d3c:	b	14cc4 <__assert_fail@plt+0x2d7c>
   14d40:	ldr	r0, [sp, #48]	; 0x30
   14d44:	bl	16300 <__assert_fail@plt+0x43b8>
   14d48:	movw	r1, #36020	; 0x8cb4
   14d4c:	movt	r1, #2
   14d50:	mov	r0, r8
   14d54:	bl	15788 <__assert_fail@plt+0x3840>
   14d58:	movw	r2, #35992	; 0x8c98
   14d5c:	movt	r2, #2
   14d60:	add	r1, sp, #228	; 0xe4
   14d64:	add	r0, r0, #1
   14d68:	bl	16124 <__assert_fail@plt+0x41dc>
   14d6c:	b	13c14 <__assert_fail@plt+0x1ccc>
   14d70:	movw	r1, #31576	; 0x7b58
   14d74:	movt	r1, #2
   14d78:	ldr	r3, [pc, #540]	; 14f9c <__assert_fail@plt+0x3054>
   14d7c:	movw	r0, #36500	; 0x8e94
   14d80:	movt	r0, #2
   14d84:	movw	r2, #4449	; 0x1161
   14d88:	bl	11f48 <__assert_fail@plt>
   14d8c:	movw	r1, #31312	; 0x7a50
   14d90:	movt	r1, #2
   14d94:	mov	r2, #5
   14d98:	bl	11b58 <dcgettext@plt>
   14d9c:	ldr	r3, [sp, #60]	; 0x3c
   14da0:	movw	r1, #35912	; 0x8c48
   14da4:	movt	r1, #2
   14da8:	cmp	r3, #0
   14dac:	moveq	r3, r1
   14db0:	mov	r1, r3
   14db4:	bl	15848 <__assert_fail@plt+0x3900>
   14db8:	bl	251a8 <__assert_fail@plt+0x13260>
   14dbc:	ldr	r0, [sp, #52]	; 0x34
   14dc0:	bl	16300 <__assert_fail@plt+0x43b8>
   14dc4:	mov	r2, #5
   14dc8:	movw	r1, #37584	; 0x92d0
   14dcc:	movt	r1, #2
   14dd0:	mov	r0, #0
   14dd4:	bl	11b58 <dcgettext@plt>
   14dd8:	mov	r4, r0
   14ddc:	mov	r0, #4
   14de0:	ldr	r1, [sl, #4]
   14de4:	bl	21dd0 <__assert_fail@plt+0xfe88>
   14de8:	ldr	r1, [sp, #36]	; 0x24
   14dec:	mov	r3, r0
   14df0:	mov	r2, r4
   14df4:	mov	r0, #2
   14df8:	str	r1, [sp]
   14dfc:	mov	r1, #0
   14e00:	bl	11c90 <error@plt>
   14e04:	mov	r0, r8
   14e08:	bl	16300 <__assert_fail@plt+0x43b8>
   14e0c:	movw	r1, #37664	; 0x9320
   14e10:	movt	r1, #2
   14e14:	mov	r2, #5
   14e18:	mov	r0, #0
   14e1c:	bl	11b58 <dcgettext@plt>
   14e20:	ldr	r1, [r7]
   14e24:	bl	15848 <__assert_fail@plt+0x3900>
   14e28:	movw	r1, #37676	; 0x932c
   14e2c:	movt	r1, #2
   14e30:	mov	r2, #5
   14e34:	mov	r0, #0
   14e38:	bl	11b58 <dcgettext@plt>
   14e3c:	ldr	r3, [sp, #48]	; 0x30
   14e40:	ldr	r1, [r3, r5, lsl #2]
   14e44:	bl	15848 <__assert_fail@plt+0x3900>
   14e48:	movw	r1, #31340	; 0x7a6c
   14e4c:	movt	r1, #2
   14e50:	mov	r2, #5
   14e54:	mov	r0, #0
   14e58:	bl	11b58 <dcgettext@plt>
   14e5c:	ldr	r1, [sp, #60]	; 0x3c
   14e60:	bl	15848 <__assert_fail@plt+0x3900>
   14e64:	movw	r1, #31312	; 0x7a50
   14e68:	movt	r1, #2
   14e6c:	mov	r2, #5
   14e70:	mov	r0, #0
   14e74:	bl	11b58 <dcgettext@plt>
   14e78:	ldr	r1, [sp, #52]	; 0x34
   14e7c:	bl	15848 <__assert_fail@plt+0x3900>
   14e80:	movw	r1, #36392	; 0x8e28
   14e84:	movt	r1, #2
   14e88:	b	14bc8 <__assert_fail@plt+0x2c80>
   14e8c:	mov	r2, #5
   14e90:	mov	r0, r3
   14e94:	movw	r1, #36300	; 0x8dcc
   14e98:	movt	r1, #2
   14e9c:	mov	r4, r3
   14ea0:	bl	11b58 <dcgettext@plt>
   14ea4:	ldr	r2, [sp, #104]	; 0x68
   14ea8:	movw	r3, #30032	; 0x7550
   14eac:	movt	r3, #2
   14eb0:	mov	r6, r0
   14eb4:	mov	r0, sl
   14eb8:	add	r3, r3, r2, lsl #4
   14ebc:	ldr	r5, [r3, #368]	; 0x170
   14ec0:	bl	230fc <__assert_fail@plt+0x111b4>
   14ec4:	mov	r2, r6
   14ec8:	mov	r1, r4
   14ecc:	str	r0, [sp]
   14ed0:	mov	r0, r4
   14ed4:	mov	r3, r5
   14ed8:	bl	11c90 <error@plt>
   14edc:	mov	r2, #5
   14ee0:	movw	r1, #36328	; 0x8de8
   14ee4:	movt	r1, #2
   14ee8:	mov	r0, r4
   14eec:	bl	11b58 <dcgettext@plt>
   14ef0:	mov	r6, r0
   14ef4:	movw	r0, #36356	; 0x8e04
   14ef8:	movt	r0, #2
   14efc:	bl	230fc <__assert_fail@plt+0x111b4>
   14f00:	mov	r3, r5
   14f04:	mov	r2, r6
   14f08:	str	r0, [sp]
   14f0c:	mov	r1, r4
   14f10:	mov	r0, #2
   14f14:	bl	11c90 <error@plt>
   14f18:	movw	r8, #41444	; 0xa1e4
   14f1c:	movt	r8, #3
   14f20:	b	148ec <__assert_fail@plt+0x29a4>
   14f24:	ldr	r0, [sp, #40]	; 0x28
   14f28:	bl	16300 <__assert_fail@plt+0x43b8>
   14f2c:	movw	r1, #36444	; 0x8e5c
   14f30:	movt	r1, #2
   14f34:	b	14bc8 <__assert_fail@plt+0x2c80>
   14f38:	movw	r1, #36360	; 0x8e08
   14f3c:	movt	r1, #2
   14f40:	b	14bc8 <__assert_fail@plt+0x2c80>
   14f44:	movw	r1, #36168	; 0x8d48
   14f48:	movt	r1, #2
   14f4c:	ldr	r0, [lr]
   14f50:	bl	15788 <__assert_fail@plt+0x3840>
   14f54:	mov	r1, r9
   14f58:	ldr	r3, [pc, #64]	; 14fa0 <__assert_fail@plt+0x3058>
   14f5c:	mov	r2, #7
   14f60:	str	sl, [sp]
   14f64:	bl	25470 <__assert_fail@plt+0x13528>
   14f68:	movw	r1, #36484	; 0x8e84
   14f6c:	movt	r1, #2
   14f70:	b	14bc8 <__assert_fail@plt+0x2c80>
   14f74:	mov	r2, #5
   14f78:	movw	r1, #36460	; 0x8e6c
   14f7c:	movt	r1, #2
   14f80:	mov	r0, #0
   14f84:	bl	11b58 <dcgettext@plt>
   14f88:	mov	r4, r0
   14f8c:	ldr	r0, [sl]
   14f90:	bl	230fc <__assert_fail@plt+0x111b4>
   14f94:	b	14cc4 <__assert_fail@plt+0x2d7c>
   14f98:	strdeq	sl, [r3], -r4
   14f9c:	ldrdeq	r7, [r2], -r0
   14fa0:	andeq	r7, r2, r0, asr #13
   14fa4:	mov	fp, #0
   14fa8:	mov	lr, #0
   14fac:	pop	{r1}		; (ldr r1, [sp], #4)
   14fb0:	mov	r2, sp
   14fb4:	push	{r2}		; (str r2, [sp, #-4]!)
   14fb8:	push	{r0}		; (str r0, [sp, #-4]!)
   14fbc:	ldr	ip, [pc, #16]	; 14fd4 <__assert_fail@plt+0x308c>
   14fc0:	push	{ip}		; (str ip, [sp, #-4]!)
   14fc4:	ldr	r0, [pc, #12]	; 14fd8 <__assert_fail@plt+0x3090>
   14fc8:	ldr	r3, [pc, #12]	; 14fdc <__assert_fail@plt+0x3094>
   14fcc:	bl	11cf0 <__libc_start_main@plt>
   14fd0:	bl	11f24 <abort@plt>
   14fd4:	andeq	r7, r2, r8, lsr #10
   14fd8:	andeq	r1, r1, r8, asr pc
   14fdc:	andeq	r7, r2, r8, asr #9
   14fe0:	ldr	r3, [pc, #20]	; 14ffc <__assert_fail@plt+0x30b4>
   14fe4:	ldr	r2, [pc, #20]	; 15000 <__assert_fail@plt+0x30b8>
   14fe8:	add	r3, pc, r3
   14fec:	ldr	r2, [r3, r2]
   14ff0:	cmp	r2, #0
   14ff4:	bxeq	lr
   14ff8:	b	11d14 <__gmon_start__@plt>
   14ffc:	andeq	r5, r2, r0, lsl r0
   15000:	ldrdeq	r0, [r0], -r8
   15004:	ldr	r0, [pc, #24]	; 15024 <__assert_fail@plt+0x30dc>
   15008:	ldr	r3, [pc, #24]	; 15028 <__assert_fail@plt+0x30e0>
   1500c:	cmp	r3, r0
   15010:	bxeq	lr
   15014:	ldr	r3, [pc, #16]	; 1502c <__assert_fail@plt+0x30e4>
   15018:	cmp	r3, #0
   1501c:	bxeq	lr
   15020:	bx	r3
   15024:			; <UNDEFINED> instruction: 0x0003a2b8
   15028:			; <UNDEFINED> instruction: 0x0003a2b8
   1502c:	andeq	r0, r0, r0
   15030:	ldr	r0, [pc, #36]	; 1505c <__assert_fail@plt+0x3114>
   15034:	ldr	r1, [pc, #36]	; 15060 <__assert_fail@plt+0x3118>
   15038:	sub	r1, r1, r0
   1503c:	asr	r1, r1, #2
   15040:	add	r1, r1, r1, lsr #31
   15044:	asrs	r1, r1, #1
   15048:	bxeq	lr
   1504c:	ldr	r3, [pc, #16]	; 15064 <__assert_fail@plt+0x311c>
   15050:	cmp	r3, #0
   15054:	bxeq	lr
   15058:	bx	r3
   1505c:			; <UNDEFINED> instruction: 0x0003a2b8
   15060:			; <UNDEFINED> instruction: 0x0003a2b8
   15064:	andeq	r0, r0, r0
   15068:	push	{r4, lr}
   1506c:	ldr	r4, [pc, #24]	; 1508c <__assert_fail@plt+0x3144>
   15070:	ldrb	r3, [r4]
   15074:	cmp	r3, #0
   15078:	popne	{r4, pc}
   1507c:	bl	15004 <__assert_fail@plt+0x30bc>
   15080:	mov	r3, #1
   15084:	strb	r3, [r4]
   15088:	pop	{r4, pc}
   1508c:	ldrdeq	sl, [r3], -ip
   15090:	b	15030 <__assert_fail@plt+0x30e8>
   15094:	andeq	r0, r0, r0
   15098:	ldr	r3, [r0, #4]
   1509c:	udiv	r0, r3, r1
   150a0:	mls	r0, r0, r1, r3
   150a4:	bx	lr
   150a8:	ldr	r0, [r0, #4]
   150ac:	ldr	r3, [r1, #4]
   150b0:	sub	r0, r0, r3
   150b4:	clz	r0, r0
   150b8:	lsr	r0, r0, #5
   150bc:	bx	lr
   150c0:	ldr	r3, [r0, #16]
   150c4:	cmp	r3, #0
   150c8:	beq	150d8 <__assert_fail@plt+0x3190>
   150cc:	mov	r3, #0
   150d0:	mov	r0, r3
   150d4:	bx	lr
   150d8:	ldr	r2, [r0, #20]
   150dc:	cmp	r2, #0
   150e0:	bne	150d0 <__assert_fail@plt+0x3188>
   150e4:	ldrb	r3, [r0, #24]
   150e8:	cmp	r3, #0
   150ec:	bne	150cc <__assert_fail@plt+0x3184>
   150f0:	ldrb	r2, [r0, #25]
   150f4:	cmp	r2, #0
   150f8:	bne	150d0 <__assert_fail@plt+0x3188>
   150fc:	ldrb	r3, [r0, #26]
   15100:	cmp	r3, #0
   15104:	bne	150cc <__assert_fail@plt+0x3184>
   15108:	ldrh	r2, [r0, #28]
   1510c:	cmp	r2, #0
   15110:	bne	150d0 <__assert_fail@plt+0x3188>
   15114:	ldrb	r2, [r0, #30]
   15118:	cmp	r2, #0
   1511c:	bne	150d0 <__assert_fail@plt+0x3188>
   15120:	ldrb	r2, [r0, #32]
   15124:	cmp	r2, #0
   15128:	ldrbeq	r3, [r0, #27]
   1512c:	eoreq	r3, r3, #1
   15130:	b	150d0 <__assert_fail@plt+0x3188>
   15134:	ldrh	r3, [r0, #24]
   15138:	cmp	r3, #0
   1513c:	movne	r3, #98	; 0x62
   15140:	strbne	r3, [r1], #1
   15144:	movw	r3, #41696	; 0xa2e0
   15148:	movt	r3, #3
   1514c:	ldr	r2, [r0, #16]
   15150:	cmp	r2, r3
   15154:	moveq	r3, #100	; 0x64
   15158:	strbeq	r3, [r1], #1
   1515c:	ldr	r3, [r0, #20]
   15160:	cmp	r3, #0
   15164:	movne	r3, #102	; 0x66
   15168:	strbne	r3, [r1], #1
   1516c:	ldrb	r3, [r0, #28]
   15170:	cmp	r3, #0
   15174:	movne	r3, #103	; 0x67
   15178:	strbne	r3, [r1], #1
   1517c:	ldrb	r3, [r0, #29]
   15180:	cmp	r3, #0
   15184:	movne	r3, #104	; 0x68
   15188:	strbne	r3, [r1], #1
   1518c:	ldr	r3, [pc, #104]	; 151fc <__assert_fail@plt+0x32b4>
   15190:	ldr	r2, [r0, #16]
   15194:	cmp	r2, r3
   15198:	moveq	r3, #105	; 0x69
   1519c:	strbeq	r3, [r1], #1
   151a0:	ldrb	r3, [r0, #30]
   151a4:	cmp	r3, #0
   151a8:	movne	r3, #77	; 0x4d
   151ac:	strbne	r3, [r1], #1
   151b0:	ldrb	r3, [r0, #26]
   151b4:	cmp	r3, #0
   151b8:	movne	r3, #110	; 0x6e
   151bc:	strbne	r3, [r1], #1
   151c0:	ldrb	r3, [r0, #27]
   151c4:	cmp	r3, #0
   151c8:	movne	r3, #82	; 0x52
   151cc:	strbne	r3, [r1], #1
   151d0:	ldrb	r3, [r0, #31]
   151d4:	cmp	r3, #0
   151d8:	movne	r3, #114	; 0x72
   151dc:	strbne	r3, [r1], #1
   151e0:	ldrb	r3, [r0, #32]
   151e4:	cmp	r3, #0
   151e8:	movne	r3, #86	; 0x56
   151ec:	strbne	r3, [r1], #1
   151f0:	mov	r3, #0
   151f4:	strb	r3, [r1]
   151f8:	bx	lr
   151fc:	andeq	sl, r3, r0, ror #7
   15200:	ldrb	r3, [r0]
   15204:	cmp	r3, #0
   15208:	bxeq	lr
   1520c:	sub	ip, r2, #1
   15210:	bic	r2, r2, #2
   15214:	strd	r4, [sp, #-12]!
   15218:	cmp	ip, #1
   1521c:	str	lr, [sp, #8]
   15220:	bls	153bc <__assert_fail@plt+0x3474>
   15224:	cmp	r2, #0
   15228:	beq	152e4 <__assert_fail@plt+0x339c>
   1522c:	ldr	ip, [pc, #1296]	; 15744 <__assert_fail@plt+0x37fc>
   15230:	mov	r2, #1
   15234:	add	r4, ip, #256	; 0x100
   15238:	sub	lr, ip, #256	; 0x100
   1523c:	sub	r3, r3, #77	; 0x4d
   15240:	cmp	r3, #37	; 0x25
   15244:	ldrls	pc, [pc, r3, lsl #2]
   15248:	b	153b0 <__assert_fail@plt+0x3468>
   1524c:	andeq	r5, r1, r4, ror #11
   15250:			; <UNDEFINED> instruction: 0x000153b0
   15254:			; <UNDEFINED> instruction: 0x000153b0
   15258:			; <UNDEFINED> instruction: 0x000153b0
   1525c:			; <UNDEFINED> instruction: 0x000153b0
   15260:	ldrdeq	r5, [r1], -r0
   15264:			; <UNDEFINED> instruction: 0x000153b0
   15268:			; <UNDEFINED> instruction: 0x000153b0
   1526c:			; <UNDEFINED> instruction: 0x000153b0
   15270:	andeq	r5, r1, r0, lsr #7
   15274:			; <UNDEFINED> instruction: 0x000153b0
   15278:			; <UNDEFINED> instruction: 0x000153b0
   1527c:			; <UNDEFINED> instruction: 0x000153b0
   15280:			; <UNDEFINED> instruction: 0x000153b0
   15284:			; <UNDEFINED> instruction: 0x000153b0
   15288:			; <UNDEFINED> instruction: 0x000153b0
   1528c:			; <UNDEFINED> instruction: 0x000153b0
   15290:			; <UNDEFINED> instruction: 0x000153b0
   15294:			; <UNDEFINED> instruction: 0x000153b0
   15298:			; <UNDEFINED> instruction: 0x000153b0
   1529c:			; <UNDEFINED> instruction: 0x000153b0
   152a0:	andeq	r5, r1, r4, lsr #7
   152a4:			; <UNDEFINED> instruction: 0x000153b0
   152a8:			; <UNDEFINED> instruction: 0x000155bc
   152ac:			; <UNDEFINED> instruction: 0x000153b0
   152b0:	andeq	r5, r1, r8, lsr #11
   152b4:	muleq	r1, r4, r5
   152b8:	andeq	r5, r1, r0, lsl #11
   152bc:	andeq	r5, r1, r4, ror #10
   152c0:			; <UNDEFINED> instruction: 0x000153b0
   152c4:			; <UNDEFINED> instruction: 0x000153b0
   152c8:			; <UNDEFINED> instruction: 0x000153b0
   152cc:			; <UNDEFINED> instruction: 0x000153b0
   152d0:	andeq	r5, r1, r0, asr r5
   152d4:			; <UNDEFINED> instruction: 0x000153b0
   152d8:			; <UNDEFINED> instruction: 0x000153b0
   152dc:			; <UNDEFINED> instruction: 0x000153b0
   152e0:	andeq	r5, r1, ip, lsr r5
   152e4:	movw	ip, #41696	; 0xa2e0
   152e8:	movt	ip, #3
   152ec:	add	lr, ip, #512	; 0x200
   152f0:	add	r4, ip, #256	; 0x100
   152f4:	mov	r2, #1
   152f8:	sub	r3, r3, #77	; 0x4d
   152fc:	cmp	r3, #37	; 0x25
   15300:	ldrls	pc, [pc, r3, lsl #2]
   15304:	b	153b0 <__assert_fail@plt+0x3468>
   15308:	andeq	r5, r1, r4, ror #12
   1530c:			; <UNDEFINED> instruction: 0x000153b0
   15310:			; <UNDEFINED> instruction: 0x000153b0
   15314:			; <UNDEFINED> instruction: 0x000153b0
   15318:			; <UNDEFINED> instruction: 0x000153b0
   1531c:	andeq	r5, r1, ip, asr r6
   15320:			; <UNDEFINED> instruction: 0x000153b0
   15324:			; <UNDEFINED> instruction: 0x000153b0
   15328:			; <UNDEFINED> instruction: 0x000153b0
   1532c:	andeq	r5, r1, r4, asr r6
   15330:			; <UNDEFINED> instruction: 0x000153b0
   15334:			; <UNDEFINED> instruction: 0x000153b0
   15338:			; <UNDEFINED> instruction: 0x000153b0
   1533c:			; <UNDEFINED> instruction: 0x000153b0
   15340:			; <UNDEFINED> instruction: 0x000153b0
   15344:			; <UNDEFINED> instruction: 0x000153b0
   15348:			; <UNDEFINED> instruction: 0x000153b0
   1534c:			; <UNDEFINED> instruction: 0x000153b0
   15350:			; <UNDEFINED> instruction: 0x000153b0
   15354:			; <UNDEFINED> instruction: 0x000153b0
   15358:			; <UNDEFINED> instruction: 0x000153b0
   1535c:	andeq	r5, r1, ip, asr #12
   15360:			; <UNDEFINED> instruction: 0x000153b0
   15364:	andeq	r5, r1, r4, asr #12
   15368:			; <UNDEFINED> instruction: 0x000153b0
   1536c:	andeq	r5, r1, ip, lsr r6
   15370:	andeq	r5, r1, r4, lsr r6
   15374:	andeq	r5, r1, ip, lsr #12
   15378:	andeq	r5, r1, ip, lsl r6
   1537c:			; <UNDEFINED> instruction: 0x000153b0
   15380:			; <UNDEFINED> instruction: 0x000153b0
   15384:			; <UNDEFINED> instruction: 0x000153b0
   15388:			; <UNDEFINED> instruction: 0x000153b0
   1538c:	andeq	r5, r1, r4, lsl r6
   15390:			; <UNDEFINED> instruction: 0x000153b0
   15394:			; <UNDEFINED> instruction: 0x000153b0
   15398:			; <UNDEFINED> instruction: 0x000153b0
   1539c:	strdeq	r5, [r1], -r8
   153a0:	strb	r2, [r1, #32]
   153a4:	ldrb	r3, [r0, #1]!
   153a8:	cmp	r3, #0
   153ac:	bne	1523c <__assert_fail@plt+0x32f4>
   153b0:	ldrd	r4, [sp]
   153b4:	add	sp, sp, #8
   153b8:	pop	{pc}		; (ldr pc, [sp], #4)
   153bc:	cmp	r2, #0
   153c0:	beq	15480 <__assert_fail@plt+0x3538>
   153c4:	movw	ip, #41696	; 0xa2e0
   153c8:	movt	ip, #3
   153cc:	add	lr, ip, #512	; 0x200
   153d0:	add	r4, ip, #256	; 0x100
   153d4:	mov	r2, #1
   153d8:	sub	r3, r3, #77	; 0x4d
   153dc:	cmp	r3, #37	; 0x25
   153e0:	ldrls	pc, [pc, r3, lsl #2]
   153e4:	b	153b0 <__assert_fail@plt+0x3468>
   153e8:	andeq	r5, r1, ip, lsr r7
   153ec:			; <UNDEFINED> instruction: 0x000153b0
   153f0:			; <UNDEFINED> instruction: 0x000153b0
   153f4:			; <UNDEFINED> instruction: 0x000153b0
   153f8:			; <UNDEFINED> instruction: 0x000153b0
   153fc:	andeq	r5, r1, r4, lsr r7
   15400:			; <UNDEFINED> instruction: 0x000153b0
   15404:			; <UNDEFINED> instruction: 0x000153b0
   15408:			; <UNDEFINED> instruction: 0x000153b0
   1540c:	andeq	r5, r1, ip, lsr #14
   15410:			; <UNDEFINED> instruction: 0x000153b0
   15414:			; <UNDEFINED> instruction: 0x000153b0
   15418:			; <UNDEFINED> instruction: 0x000153b0
   1541c:			; <UNDEFINED> instruction: 0x000153b0
   15420:			; <UNDEFINED> instruction: 0x000153b0
   15424:			; <UNDEFINED> instruction: 0x000153b0
   15428:			; <UNDEFINED> instruction: 0x000153b0
   1542c:			; <UNDEFINED> instruction: 0x000153b0
   15430:			; <UNDEFINED> instruction: 0x000153b0
   15434:			; <UNDEFINED> instruction: 0x000153b0
   15438:			; <UNDEFINED> instruction: 0x000153b0
   1543c:	andeq	r5, r1, r4, lsr #14
   15440:			; <UNDEFINED> instruction: 0x000153b0
   15444:	andeq	r5, r1, ip, lsl r7
   15448:			; <UNDEFINED> instruction: 0x000153b0
   1544c:	andeq	r5, r1, r4, lsl r7
   15450:	andeq	r5, r1, ip, lsl #14
   15454:	andeq	r5, r1, r4, lsl #14
   15458:	strdeq	r5, [r1], -r4
   1545c:			; <UNDEFINED> instruction: 0x000153b0
   15460:			; <UNDEFINED> instruction: 0x000153b0
   15464:			; <UNDEFINED> instruction: 0x000153b0
   15468:			; <UNDEFINED> instruction: 0x000153b0
   1546c:	andeq	r5, r1, ip, ror #13
   15470:			; <UNDEFINED> instruction: 0x000153b0
   15474:			; <UNDEFINED> instruction: 0x000153b0
   15478:			; <UNDEFINED> instruction: 0x000153b0
   1547c:	ldrdeq	r5, [r1], -r8
   15480:	ldr	ip, [pc, #700]	; 15744 <__assert_fail@plt+0x37fc>
   15484:	mov	r2, #1
   15488:	movw	r5, #257	; 0x101
   1548c:	add	r4, ip, #256	; 0x100
   15490:	sub	lr, ip, #256	; 0x100
   15494:	sub	r3, r3, #77	; 0x4d
   15498:	cmp	r3, #37	; 0x25
   1549c:	ldrls	pc, [pc, r3, lsl #2]
   154a0:	b	153b0 <__assert_fail@plt+0x3468>
   154a4:	andeq	r5, r1, r8, lsr #13
   154a8:			; <UNDEFINED> instruction: 0x000153b0
   154ac:			; <UNDEFINED> instruction: 0x000153b0
   154b0:			; <UNDEFINED> instruction: 0x000153b0
   154b4:			; <UNDEFINED> instruction: 0x000153b0
   154b8:	andeq	r5, r1, r0, lsr #13
   154bc:			; <UNDEFINED> instruction: 0x000153b0
   154c0:			; <UNDEFINED> instruction: 0x000153b0
   154c4:			; <UNDEFINED> instruction: 0x000153b0
   154c8:	muleq	r1, r8, r6
   154cc:			; <UNDEFINED> instruction: 0x000153b0
   154d0:			; <UNDEFINED> instruction: 0x000153b0
   154d4:			; <UNDEFINED> instruction: 0x000153b0
   154d8:			; <UNDEFINED> instruction: 0x000153b0
   154dc:			; <UNDEFINED> instruction: 0x000153b0
   154e0:			; <UNDEFINED> instruction: 0x000153b0
   154e4:			; <UNDEFINED> instruction: 0x000153b0
   154e8:			; <UNDEFINED> instruction: 0x000153b0
   154ec:			; <UNDEFINED> instruction: 0x000153b0
   154f0:			; <UNDEFINED> instruction: 0x000153b0
   154f4:			; <UNDEFINED> instruction: 0x000153b0
   154f8:	muleq	r1, r0, r6
   154fc:			; <UNDEFINED> instruction: 0x000153b0
   15500:	andeq	r5, r1, r8, asr #13
   15504:			; <UNDEFINED> instruction: 0x000153b0
   15508:	andeq	r5, r1, r0, asr #13
   1550c:			; <UNDEFINED> instruction: 0x000156b8
   15510:			; <UNDEFINED> instruction: 0x000156b0
   15514:	andeq	r5, r1, r0, lsl #13
   15518:			; <UNDEFINED> instruction: 0x000153b0
   1551c:			; <UNDEFINED> instruction: 0x000153b0
   15520:			; <UNDEFINED> instruction: 0x000153b0
   15524:			; <UNDEFINED> instruction: 0x000153b0
   15528:	andeq	r5, r1, ip, ror #12
   1552c:			; <UNDEFINED> instruction: 0x000153b0
   15530:			; <UNDEFINED> instruction: 0x000153b0
   15534:			; <UNDEFINED> instruction: 0x000153b0
   15538:	ldrdeq	r5, [r1], -r0
   1553c:	strb	r2, [r1, #31]
   15540:	ldrb	r3, [r0, #1]!
   15544:	cmp	r3, #0
   15548:	bne	1523c <__assert_fail@plt+0x32f4>
   1554c:	b	153b0 <__assert_fail@plt+0x3468>
   15550:	strb	r2, [r1, #26]
   15554:	ldrb	r3, [r0, #1]!
   15558:	cmp	r3, #0
   1555c:	bne	1523c <__assert_fail@plt+0x32f4>
   15560:	b	153b0 <__assert_fail@plt+0x3468>
   15564:	ldr	r3, [r1, #16]
   15568:	cmp	r3, #0
   1556c:	streq	ip, [r1, #16]
   15570:	ldrb	r3, [r0, #1]!
   15574:	cmp	r3, #0
   15578:	bne	1523c <__assert_fail@plt+0x32f4>
   1557c:	b	153b0 <__assert_fail@plt+0x3468>
   15580:	strb	r2, [r1, #29]
   15584:	ldrb	r3, [r0, #1]!
   15588:	cmp	r3, #0
   1558c:	bne	1523c <__assert_fail@plt+0x32f4>
   15590:	b	153b0 <__assert_fail@plt+0x3468>
   15594:	strb	r2, [r1, #28]
   15598:	ldrb	r3, [r0, #1]!
   1559c:	cmp	r3, #0
   155a0:	bne	1523c <__assert_fail@plt+0x32f4>
   155a4:	b	153b0 <__assert_fail@plt+0x3468>
   155a8:	str	r4, [r1, #20]
   155ac:	ldrb	r3, [r0, #1]!
   155b0:	cmp	r3, #0
   155b4:	bne	1523c <__assert_fail@plt+0x32f4>
   155b8:	b	153b0 <__assert_fail@plt+0x3468>
   155bc:	str	lr, [r1, #16]
   155c0:	ldrb	r3, [r0, #1]!
   155c4:	cmp	r3, #0
   155c8:	bne	1523c <__assert_fail@plt+0x32f4>
   155cc:	b	153b0 <__assert_fail@plt+0x3468>
   155d0:	strb	r2, [r1, #27]
   155d4:	ldrb	r3, [r0, #1]!
   155d8:	cmp	r3, #0
   155dc:	bne	1523c <__assert_fail@plt+0x32f4>
   155e0:	b	153b0 <__assert_fail@plt+0x3468>
   155e4:	strb	r2, [r1, #30]
   155e8:	ldrb	r3, [r0, #1]!
   155ec:	cmp	r3, #0
   155f0:	bne	1523c <__assert_fail@plt+0x32f4>
   155f4:	b	153b0 <__assert_fail@plt+0x3468>
   155f8:	strb	r2, [r1, #31]
   155fc:	ldrb	r3, [r0, #1]!
   15600:	cmp	r3, #0
   15604:	bne	152f8 <__assert_fail@plt+0x33b0>
   15608:	ldrd	r4, [sp]
   1560c:	add	sp, sp, #8
   15610:	pop	{pc}		; (ldr pc, [sp], #4)
   15614:	strb	r2, [r1, #26]
   15618:	b	155fc <__assert_fail@plt+0x36b4>
   1561c:	ldr	r3, [r1, #16]
   15620:	cmp	r3, #0
   15624:	streq	r4, [r1, #16]
   15628:	b	155fc <__assert_fail@plt+0x36b4>
   1562c:	strb	r2, [r1, #29]
   15630:	b	155fc <__assert_fail@plt+0x36b4>
   15634:	strb	r2, [r1, #28]
   15638:	b	155fc <__assert_fail@plt+0x36b4>
   1563c:	str	lr, [r1, #20]
   15640:	b	155fc <__assert_fail@plt+0x36b4>
   15644:	str	ip, [r1, #16]
   15648:	b	155fc <__assert_fail@plt+0x36b4>
   1564c:	strb	r2, [r1, #24]
   15650:	b	155fc <__assert_fail@plt+0x36b4>
   15654:	strb	r2, [r1, #32]
   15658:	b	155fc <__assert_fail@plt+0x36b4>
   1565c:	strb	r2, [r1, #27]
   15660:	b	155fc <__assert_fail@plt+0x36b4>
   15664:	strb	r2, [r1, #30]
   15668:	b	155fc <__assert_fail@plt+0x36b4>
   1566c:	strb	r2, [r1, #26]
   15670:	ldrb	r3, [r0, #1]!
   15674:	cmp	r3, #0
   15678:	bne	15494 <__assert_fail@plt+0x354c>
   1567c:	b	153b0 <__assert_fail@plt+0x3468>
   15680:	ldr	r3, [r1, #16]
   15684:	cmp	r3, #0
   15688:	streq	ip, [r1, #16]
   1568c:	b	15670 <__assert_fail@plt+0x3728>
   15690:	strh	r5, [r1, #24]
   15694:	b	15670 <__assert_fail@plt+0x3728>
   15698:	strb	r2, [r1, #32]
   1569c:	b	15670 <__assert_fail@plt+0x3728>
   156a0:	strb	r2, [r1, #27]
   156a4:	b	15670 <__assert_fail@plt+0x3728>
   156a8:	strb	r2, [r1, #30]
   156ac:	b	15670 <__assert_fail@plt+0x3728>
   156b0:	strb	r2, [r1, #29]
   156b4:	b	15670 <__assert_fail@plt+0x3728>
   156b8:	strb	r2, [r1, #28]
   156bc:	b	15670 <__assert_fail@plt+0x3728>
   156c0:	str	r4, [r1, #20]
   156c4:	b	15670 <__assert_fail@plt+0x3728>
   156c8:	str	lr, [r1, #16]
   156cc:	b	15670 <__assert_fail@plt+0x3728>
   156d0:	strb	r2, [r1, #31]
   156d4:	b	15670 <__assert_fail@plt+0x3728>
   156d8:	strb	r2, [r1, #31]
   156dc:	ldrb	r3, [r0, #1]!
   156e0:	cmp	r3, #0
   156e4:	bne	153d8 <__assert_fail@plt+0x3490>
   156e8:	b	153b0 <__assert_fail@plt+0x3468>
   156ec:	strb	r2, [r1, #26]
   156f0:	b	156dc <__assert_fail@plt+0x3794>
   156f4:	ldr	r3, [r1, #16]
   156f8:	cmp	r3, #0
   156fc:	streq	r4, [r1, #16]
   15700:	b	156dc <__assert_fail@plt+0x3794>
   15704:	strb	r2, [r1, #29]
   15708:	b	156dc <__assert_fail@plt+0x3794>
   1570c:	strb	r2, [r1, #28]
   15710:	b	156dc <__assert_fail@plt+0x3794>
   15714:	str	lr, [r1, #20]
   15718:	b	156dc <__assert_fail@plt+0x3794>
   1571c:	str	ip, [r1, #16]
   15720:	b	156dc <__assert_fail@plt+0x3794>
   15724:	strb	r2, [r1, #25]
   15728:	b	156dc <__assert_fail@plt+0x3794>
   1572c:	strb	r2, [r1, #32]
   15730:	b	156dc <__assert_fail@plt+0x3794>
   15734:	strb	r2, [r1, #27]
   15738:	b	156dc <__assert_fail@plt+0x3794>
   1573c:	strb	r2, [r1, #30]
   15740:	b	156dc <__assert_fail@plt+0x3794>
   15744:	andeq	sl, r3, r0, ror #7
   15748:	ldr	r0, [r0]
   1574c:	ldr	r1, [r1]
   15750:	b	11a2c <strcmp@plt>
   15754:	mov	r2, #5
   15758:	movw	r1, #30992	; 0x7910
   1575c:	movt	r1, #2
   15760:	str	r4, [sp, #-8]!
   15764:	mov	r4, r0
   15768:	mov	r0, #0
   1576c:	str	lr, [sp, #4]
   15770:	bl	11b58 <dcgettext@plt>
   15774:	mov	r2, r0
   15778:	mov	r3, r4
   1577c:	mov	r1, #0
   15780:	mov	r0, #2
   15784:	bl	11c90 <error@plt>
   15788:	mov	r5, r1
   1578c:	mov	r6, r0
   15790:	push	{lr}		; (str lr, [sp, #-4]!)
   15794:	mov	r2, #5
   15798:	sub	sp, sp, #12
   1579c:	movw	r1, #31024	; 0x7930
   157a0:	movt	r1, #2
   157a4:	mov	r0, #0
   157a8:	bl	11b58 <dcgettext@plt>
   157ac:	mov	r4, r0
   157b0:	mov	r1, r5
   157b4:	mov	r2, #5
   157b8:	mov	r0, #0
   157bc:	bl	11b58 <dcgettext@plt>
   157c0:	mov	r5, r0
   157c4:	mov	r0, r6
   157c8:	bl	230fc <__assert_fail@plt+0x111b4>
   157cc:	mov	r3, r5
   157d0:	mov	r2, r4
   157d4:	str	r0, [sp]
   157d8:	mov	r1, #0
   157dc:	mov	r0, #2
   157e0:	bl	11c90 <error@plt>
   157e4:	strd	r4, [sp, #-16]!
   157e8:	movw	r5, #41696	; 0xa2e0
   157ec:	movt	r5, #3
   157f0:	ldr	r4, [r5, #768]	; 0x300
   157f4:	str	r6, [sp, #8]
   157f8:	mov	r6, r0
   157fc:	str	lr, [sp, #12]
   15800:	cmp	r4, #0
   15804:	beq	1581c <__assert_fail@plt+0x38d4>
   15808:	add	r0, r4, #9
   1580c:	bl	11b7c <unlink@plt>
   15810:	ldr	r4, [r4]
   15814:	cmp	r4, #0
   15818:	bne	15808 <__assert_fail@plt+0x38c0>
   1581c:	mov	r3, #0
   15820:	mov	r0, r6
   15824:	mov	r1, r3
   15828:	str	r3, [r5, #768]	; 0x300
   1582c:	bl	11b04 <signal@plt>
   15830:	mov	r0, r6
   15834:	ldrd	r4, [sp]
   15838:	ldr	r6, [sp, #8]
   1583c:	ldr	lr, [sp, #12]
   15840:	add	sp, sp, #16
   15844:	b	11a20 <raise@plt>
   15848:	mov	r4, r1
   1584c:	push	{lr}		; (str lr, [sp, #-4]!)
   15850:	sub	sp, sp, #12
   15854:	mov	r6, r0
   15858:	bl	11d74 <__errno_location@plt>
   1585c:	cmp	r4, #0
   15860:	ldr	r5, [r0]
   15864:	beq	15894 <__assert_fail@plt+0x394c>
   15868:	mov	r2, r4
   1586c:	mov	r1, #3
   15870:	mov	r0, #0
   15874:	bl	22950 <__assert_fail@plt+0x10a08>
   15878:	movw	r2, #31076	; 0x7964
   1587c:	movt	r2, #2
   15880:	str	r0, [sp]
   15884:	mov	r3, r6
   15888:	mov	r1, r5
   1588c:	mov	r0, #2
   15890:	bl	11c90 <error@plt>
   15894:	mov	r0, r4
   15898:	movw	r1, #31060	; 0x7954
   1589c:	movt	r1, #2
   158a0:	mov	r2, #5
   158a4:	bl	11b58 <dcgettext@plt>
   158a8:	mov	r4, r0
   158ac:	b	15868 <__assert_fail@plt+0x3920>
   158b0:	strd	r4, [sp, #-16]!
   158b4:	movw	r4, #41696	; 0xa2e0
   158b8:	movt	r4, #3
   158bc:	ldr	r3, [r4, #772]	; 0x304
   158c0:	mov	r5, r0
   158c4:	str	r6, [sp, #8]
   158c8:	str	lr, [sp, #12]
   158cc:	ldr	r2, [r4, #780]	; 0x30c
   158d0:	ldr	r0, [r4, #776]	; 0x308
   158d4:	cmp	r3, r2
   158d8:	beq	158f8 <__assert_fail@plt+0x39b0>
   158dc:	add	r2, r3, #1
   158e0:	str	r5, [r0, r3, lsl #2]
   158e4:	ldr	r6, [sp, #8]
   158e8:	str	r2, [r4, #772]	; 0x304
   158ec:	ldrd	r4, [sp]
   158f0:	add	sp, sp, #12
   158f4:	pop	{pc}		; (ldr pc, [sp], #4)
   158f8:	mov	r2, #4
   158fc:	add	r1, r4, #780	; 0x30c
   15900:	bl	24e44 <__assert_fail@plt+0x12efc>
   15904:	str	r0, [r4, #776]	; 0x308
   15908:	ldr	r3, [r4, #772]	; 0x304
   1590c:	b	158dc <__assert_fail@plt+0x3994>
   15910:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15914:	mov	r5, #0
   15918:	strd	r6, [sp, #8]
   1591c:	mov	r7, r0
   15920:	mov	r6, r1
   15924:	str	r8, [sp, #16]
   15928:	mov	r8, r2
   1592c:	str	lr, [sp, #20]
   15930:	bl	11d74 <__errno_location@plt>
   15934:	mov	r4, r0
   15938:	mov	r2, r8
   1593c:	mov	r0, r7
   15940:	mov	r1, r6
   15944:	str	r5, [r4]
   15948:	bl	11d68 <strxfrm@plt>
   1594c:	ldr	r4, [r4]
   15950:	cmp	r4, r5
   15954:	bne	1596c <__assert_fail@plt+0x3a24>
   15958:	ldrd	r4, [sp]
   1595c:	ldrd	r6, [sp, #8]
   15960:	ldr	r8, [sp, #16]
   15964:	add	sp, sp, #20
   15968:	pop	{pc}		; (ldr pc, [sp], #4)
   1596c:	mov	r2, #5
   15970:	movw	r1, #31084	; 0x796c
   15974:	movt	r1, #2
   15978:	mov	r0, r5
   1597c:	bl	11b58 <dcgettext@plt>
   15980:	mov	r2, r0
   15984:	mov	r1, r4
   15988:	mov	r0, r5
   1598c:	bl	11c90 <error@plt>
   15990:	mov	r2, #5
   15994:	movw	r1, #31116	; 0x798c
   15998:	movt	r1, #2
   1599c:	mov	r0, r5
   159a0:	bl	11b58 <dcgettext@plt>
   159a4:	mov	r2, r0
   159a8:	mov	r1, r5
   159ac:	mov	r0, r5
   159b0:	bl	11c90 <error@plt>
   159b4:	mov	r2, #5
   159b8:	movw	r1, #31160	; 0x79b8
   159bc:	movt	r1, #2
   159c0:	mov	r0, r5
   159c4:	bl	11b58 <dcgettext@plt>
   159c8:	mov	r4, r0
   159cc:	mov	r2, r6
   159d0:	mov	r1, #8
   159d4:	mov	r0, r5
   159d8:	bl	21cf4 <__assert_fail@plt+0xfdac>
   159dc:	mov	r3, r0
   159e0:	mov	r2, r4
   159e4:	mov	r1, r5
   159e8:	mov	r0, #2
   159ec:	bl	11c90 <error@plt>
   159f0:	mov	r5, r0
   159f4:	mov	r0, r1
   159f8:	push	{lr}		; (str lr, [sp, #-4]!)
   159fc:	sub	sp, sp, #20
   15a00:	mov	r4, r1
   15a04:	bl	11d50 <strlen@plt>
   15a08:	mov	r2, r0
   15a0c:	mov	r1, r4
   15a10:	mov	r0, #2
   15a14:	bl	11dbc <write@plt>
   15a18:	cmp	r5, #0
   15a1c:	bne	15a3c <__assert_fail@plt+0x3af4>
   15a20:	movw	r1, #33076	; 0x8134
   15a24:	movt	r1, #2
   15a28:	mov	r2, #1
   15a2c:	mov	r0, #2
   15a30:	bl	11dbc <write@plt>
   15a34:	mov	r0, #2
   15a38:	bl	11abc <_exit@plt>
   15a3c:	add	r1, sp, #4
   15a40:	mov	r0, r5
   15a44:	bl	1ed8c <__assert_fail@plt+0xce44>
   15a48:	mov	r4, r0
   15a4c:	mov	r2, #8
   15a50:	movw	r1, #31192	; 0x79d8
   15a54:	movt	r1, #2
   15a58:	mov	r0, #2
   15a5c:	bl	11dbc <write@plt>
   15a60:	mov	r0, r4
   15a64:	bl	11d50 <strlen@plt>
   15a68:	mov	r2, r0
   15a6c:	mov	r1, r4
   15a70:	mov	r0, #2
   15a74:	bl	11dbc <write@plt>
   15a78:	b	15a20 <__assert_fail@plt+0x3ad8>
   15a7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a80:	mov	r5, r3
   15a84:	mov	ip, r0
   15a88:	strd	r6, [sp, #8]
   15a8c:	mov	r6, r2
   15a90:	mov	r4, r1
   15a94:	strd	r8, [sp, #16]
   15a98:	add	r1, ip, #12
   15a9c:	mov	r8, #0
   15aa0:	strd	sl, [sp, #24]
   15aa4:	mov	fp, #1
   15aa8:	str	lr, [sp, #32]
   15aac:	sub	sp, sp, #12
   15ab0:	ldr	r2, [sp, #48]	; 0x30
   15ab4:	ldrb	r3, [sp, #52]	; 0x34
   15ab8:	lsl	r9, r2, #4
   15abc:	cmp	r3, #0
   15ac0:	rsb	r9, r9, #0
   15ac4:	add	sl, r6, r9
   15ac8:	beq	15b70 <__assert_fail@plt+0x3c28>
   15acc:	ldr	r3, [ip, #20]
   15ad0:	add	r1, ip, #8
   15ad4:	lsr	r0, r3, #1
   15ad8:	sub	r6, sl, r0, lsl #4
   15adc:	sub	r3, r3, r0
   15ae0:	ldr	lr, [ip, #40]	; 0x28
   15ae4:	add	r7, r4, #72	; 0x48
   15ae8:	str	sl, [r4]
   15aec:	stmib	r4, {r6, sl}
   15af0:	str	r6, [r4, #12]
   15af4:	str	r1, [r4, #16]
   15af8:	mov	r1, #0
   15afc:	add	lr, lr, #1
   15b00:	str	r0, [r4, #20]
   15b04:	add	r0, r4, #48	; 0x30
   15b08:	str	r3, [r4, #24]
   15b0c:	str	ip, [r4, #28]
   15b10:	str	lr, [r4, #40]	; 0x28
   15b14:	strb	r8, [r4, #44]	; 0x2c
   15b18:	bl	11ae0 <pthread_mutex_init@plt>
   15b1c:	lsr	ip, r5, #1
   15b20:	cmp	r5, #1
   15b24:	mov	r0, r4
   15b28:	mov	r2, sl
   15b2c:	mov	r1, r7
   15b30:	mov	r3, ip
   15b34:	sub	r5, r5, ip
   15b38:	bls	15b84 <__assert_fail@plt+0x3c3c>
   15b3c:	ldr	ip, [sp, #48]	; 0x30
   15b40:	add	sl, r6, r9
   15b44:	str	r7, [r4, #32]
   15b48:	str	ip, [sp]
   15b4c:	str	fp, [sp, #4]
   15b50:	bl	15a7c <__assert_fail@plt+0x3b34>
   15b54:	mov	r3, #0
   15b58:	mov	ip, r4
   15b5c:	str	r0, [r4, #36]	; 0x24
   15b60:	cmp	r3, #0
   15b64:	mov	r4, r0
   15b68:	add	r1, ip, #12
   15b6c:	bne	15acc <__assert_fail@plt+0x3b84>
   15b70:	ldr	r3, [ip, #24]
   15b74:	lsr	r0, r3, #1
   15b78:	sub	r6, sl, r0, lsl #4
   15b7c:	sub	r3, r3, r0
   15b80:	b	15ae0 <__assert_fail@plt+0x3b98>
   15b84:	mov	r0, r7
   15b88:	str	r8, [r4, #32]
   15b8c:	str	r8, [r4, #36]	; 0x24
   15b90:	add	sp, sp, #12
   15b94:	ldrd	r4, [sp]
   15b98:	ldrd	r6, [sp, #8]
   15b9c:	ldrd	r8, [sp, #16]
   15ba0:	ldrd	sl, [sp, #24]
   15ba4:	add	sp, sp, #32
   15ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bac:	movw	r3, #41444	; 0xa1e4
   15bb0:	movt	r3, #3
   15bb4:	strd	r4, [sp, #-12]!
   15bb8:	ldr	r5, [r2]
   15bbc:	sub	r1, r1, #1
   15bc0:	add	r1, r0, r1
   15bc4:	ldr	r4, [r2, #4]
   15bc8:	str	lr, [sp, #8]
   15bcc:	ldr	lr, [r3]
   15bd0:	cmp	lr, #256	; 0x100
   15bd4:	beq	15c94 <__assert_fail@plt+0x3d4c>
   15bd8:	cmp	r1, r0
   15bdc:	bls	15c0c <__assert_fail@plt+0x3cc4>
   15be0:	cmp	r5, #0
   15be4:	sub	r5, r5, #1
   15be8:	beq	15c40 <__assert_fail@plt+0x3cf8>
   15bec:	mov	r3, r0
   15bf0:	mov	r0, r3
   15bf4:	ldrb	ip, [r3], #1
   15bf8:	cmp	lr, ip
   15bfc:	beq	15c24 <__assert_fail@plt+0x3cdc>
   15c00:	cmp	r1, r3
   15c04:	mov	r0, r3
   15c08:	bhi	15bf0 <__assert_fail@plt+0x3ca8>
   15c0c:	add	r0, r0, r4
   15c10:	ldrd	r4, [sp]
   15c14:	add	sp, sp, #8
   15c18:	cmp	r1, r0
   15c1c:	movcc	r0, r1
   15c20:	pop	{pc}		; (ldr pc, [sp], #4)
   15c24:	cmp	r1, r0
   15c28:	bls	15c0c <__assert_fail@plt+0x3cc4>
   15c2c:	cmp	r1, r3
   15c30:	mov	r0, r3
   15c34:	bls	15c0c <__assert_fail@plt+0x3cc4>
   15c38:	subs	r5, r5, #1
   15c3c:	bcs	15bec <__assert_fail@plt+0x3ca4>
   15c40:	ldrb	r3, [r2, #24]
   15c44:	cmp	r3, #0
   15c48:	beq	15c0c <__assert_fail@plt+0x3cc4>
   15c4c:	ldrb	r3, [r0]
   15c50:	movw	lr, #41696	; 0xa2e0
   15c54:	movt	lr, #3
   15c58:	add	r3, lr, r3
   15c5c:	ldrb	r3, [r3, #784]	; 0x310
   15c60:	cmp	r3, #0
   15c64:	addne	r3, r0, #1
   15c68:	beq	15c0c <__assert_fail@plt+0x3cc4>
   15c6c:	cmp	r1, r3
   15c70:	mov	r0, r3
   15c74:	bls	15c0c <__assert_fail@plt+0x3cc4>
   15c78:	ldrb	r2, [r3]
   15c7c:	add	r3, r3, #1
   15c80:	add	r2, lr, r2
   15c84:	ldrb	r2, [r2, #784]	; 0x310
   15c88:	cmp	r2, #0
   15c8c:	bne	15c6c <__assert_fail@plt+0x3d24>
   15c90:	b	15c0c <__assert_fail@plt+0x3cc4>
   15c94:	cmp	r1, r0
   15c98:	bls	15c0c <__assert_fail@plt+0x3cc4>
   15c9c:	cmp	r5, #0
   15ca0:	sub	r5, r5, #1
   15ca4:	beq	15c40 <__assert_fail@plt+0x3cf8>
   15ca8:	ldrb	r3, [r0]
   15cac:	movw	lr, #41696	; 0xa2e0
   15cb0:	movt	lr, #3
   15cb4:	add	r3, lr, r3
   15cb8:	ldrb	r3, [r3, #784]	; 0x310
   15cbc:	cmp	r3, #0
   15cc0:	beq	15d00 <__assert_fail@plt+0x3db8>
   15cc4:	add	r0, r0, #1
   15cc8:	cmp	r1, r0
   15ccc:	bls	15c0c <__assert_fail@plt+0x3cc4>
   15cd0:	mov	r3, r0
   15cd4:	mov	r0, r3
   15cd8:	add	r3, r3, #1
   15cdc:	ldrb	ip, [r0]
   15ce0:	add	ip, lr, ip
   15ce4:	ldrb	ip, [ip, #784]	; 0x310
   15ce8:	cmp	ip, #0
   15cec:	beq	15d00 <__assert_fail@plt+0x3db8>
   15cf0:	cmp	r3, r1
   15cf4:	mov	r0, r3
   15cf8:	bne	15cd4 <__assert_fail@plt+0x3d8c>
   15cfc:	b	15c0c <__assert_fail@plt+0x3cc4>
   15d00:	cmp	r1, r0
   15d04:	addhi	r3, r0, #1
   15d08:	bhi	15d24 <__assert_fail@plt+0x3ddc>
   15d0c:	b	15c0c <__assert_fail@plt+0x3cc4>
   15d10:	ldrb	ip, [r3], #1
   15d14:	add	ip, lr, ip
   15d18:	ldrb	ip, [ip, #784]	; 0x310
   15d1c:	cmp	ip, #0
   15d20:	bne	15d34 <__assert_fail@plt+0x3dec>
   15d24:	cmp	r1, r3
   15d28:	mov	r0, r3
   15d2c:	bne	15d10 <__assert_fail@plt+0x3dc8>
   15d30:	b	15c0c <__assert_fail@plt+0x3cc4>
   15d34:	subs	r5, r5, #1
   15d38:	bcs	15cc4 <__assert_fail@plt+0x3d7c>
   15d3c:	b	15c40 <__assert_fail@plt+0x3cf8>
   15d40:	movw	r3, #41444	; 0xa1e4
   15d44:	movt	r3, #3
   15d48:	strd	r4, [sp, #-16]!
   15d4c:	ldr	r4, [r2, #12]
   15d50:	sub	r1, r1, #1
   15d54:	str	r6, [sp, #8]
   15d58:	add	r1, r0, r1
   15d5c:	ldr	r5, [r3]
   15d60:	str	lr, [sp, #12]
   15d64:	ldr	r6, [r2, #8]
   15d68:	cmp	r4, #0
   15d6c:	addeq	r6, r6, #1
   15d70:	cmp	r5, #256	; 0x100
   15d74:	beq	15e60 <__assert_fail@plt+0x3f18>
   15d78:	cmp	r1, r0
   15d7c:	bls	15db0 <__assert_fail@plt+0x3e68>
   15d80:	cmp	r6, #0
   15d84:	sub	r6, r6, #1
   15d88:	beq	15db0 <__assert_fail@plt+0x3e68>
   15d8c:	mov	r3, r0
   15d90:	mov	ip, r3
   15d94:	add	r3, r3, #1
   15d98:	ldrb	lr, [ip]
   15d9c:	mov	r0, r3
   15da0:	cmp	r5, lr
   15da4:	beq	15e28 <__assert_fail@plt+0x3ee0>
   15da8:	cmp	r1, r3
   15dac:	bhi	15d90 <__assert_fail@plt+0x3e48>
   15db0:	cmp	r4, #0
   15db4:	beq	15f0c <__assert_fail@plt+0x3fc4>
   15db8:	ldrb	r3, [r2, #25]
   15dbc:	cmp	r3, #0
   15dc0:	beq	15e14 <__assert_fail@plt+0x3ecc>
   15dc4:	cmp	r1, r0
   15dc8:	bls	15e14 <__assert_fail@plt+0x3ecc>
   15dcc:	ldrb	r3, [r0]
   15dd0:	movw	lr, #41696	; 0xa2e0
   15dd4:	movt	lr, #3
   15dd8:	add	r3, lr, r3
   15ddc:	ldrb	r3, [r3, #784]	; 0x310
   15de0:	cmp	r3, #0
   15de4:	beq	15e14 <__assert_fail@plt+0x3ecc>
   15de8:	add	r3, r0, #1
   15dec:	b	15e08 <__assert_fail@plt+0x3ec0>
   15df0:	ldrb	r2, [r3]
   15df4:	add	r3, r3, #1
   15df8:	add	r2, lr, r2
   15dfc:	ldrb	r2, [r2, #784]	; 0x310
   15e00:	cmp	r2, #0
   15e04:	beq	15e14 <__assert_fail@plt+0x3ecc>
   15e08:	cmp	r1, r3
   15e0c:	mov	r0, r3
   15e10:	bne	15df0 <__assert_fail@plt+0x3ea8>
   15e14:	add	r0, r0, r4
   15e18:	cmp	r1, r0
   15e1c:	movcc	ip, r1
   15e20:	movcs	ip, r0
   15e24:	b	15e38 <__assert_fail@plt+0x3ef0>
   15e28:	cmp	r1, ip
   15e2c:	bls	15f14 <__assert_fail@plt+0x3fcc>
   15e30:	orrs	r3, r4, r6
   15e34:	bne	15e4c <__assert_fail@plt+0x3f04>
   15e38:	ldrd	r4, [sp]
   15e3c:	mov	r0, ip
   15e40:	ldr	r6, [sp, #8]
   15e44:	add	sp, sp, #12
   15e48:	pop	{pc}		; (ldr pc, [sp], #4)
   15e4c:	cmp	r1, r0
   15e50:	bls	15db0 <__assert_fail@plt+0x3e68>
   15e54:	subs	r6, r6, #1
   15e58:	bcc	15db0 <__assert_fail@plt+0x3e68>
   15e5c:	b	15d8c <__assert_fail@plt+0x3e44>
   15e60:	cmp	r1, r0
   15e64:	bls	15db0 <__assert_fail@plt+0x3e68>
   15e68:	cmp	r6, #0
   15e6c:	sub	r5, r6, #1
   15e70:	beq	15db0 <__assert_fail@plt+0x3e68>
   15e74:	ldrb	r3, [r0]
   15e78:	movw	lr, #41696	; 0xa2e0
   15e7c:	movt	lr, #3
   15e80:	add	r3, lr, r3
   15e84:	ldrb	r3, [r3, #784]	; 0x310
   15e88:	cmp	r3, #0
   15e8c:	beq	15ecc <__assert_fail@plt+0x3f84>
   15e90:	add	r0, r0, #1
   15e94:	cmp	r1, r0
   15e98:	bls	15db0 <__assert_fail@plt+0x3e68>
   15e9c:	mov	r3, r0
   15ea0:	mov	r0, r3
   15ea4:	add	r3, r3, #1
   15ea8:	ldrb	ip, [r0]
   15eac:	add	ip, lr, ip
   15eb0:	ldrb	ip, [ip, #784]	; 0x310
   15eb4:	cmp	ip, #0
   15eb8:	beq	15ecc <__assert_fail@plt+0x3f84>
   15ebc:	cmp	r3, r1
   15ec0:	mov	r0, r3
   15ec4:	bne	15ea0 <__assert_fail@plt+0x3f58>
   15ec8:	b	15db0 <__assert_fail@plt+0x3e68>
   15ecc:	cmp	r1, r0
   15ed0:	addhi	r3, r0, #1
   15ed4:	bhi	15ef0 <__assert_fail@plt+0x3fa8>
   15ed8:	b	15db0 <__assert_fail@plt+0x3e68>
   15edc:	ldrb	ip, [r3], #1
   15ee0:	add	ip, lr, ip
   15ee4:	ldrb	ip, [ip, #784]	; 0x310
   15ee8:	cmp	ip, #0
   15eec:	bne	15f00 <__assert_fail@plt+0x3fb8>
   15ef0:	cmp	r3, r1
   15ef4:	mov	r0, r3
   15ef8:	bne	15edc <__assert_fail@plt+0x3f94>
   15efc:	b	15db0 <__assert_fail@plt+0x3e68>
   15f00:	subs	r5, r5, #1
   15f04:	bcs	15e90 <__assert_fail@plt+0x3f48>
   15f08:	b	15db0 <__assert_fail@plt+0x3e68>
   15f0c:	mov	ip, r0
   15f10:	b	15e38 <__assert_fail@plt+0x3ef0>
   15f14:	mov	r0, ip
   15f18:	b	15db0 <__assert_fail@plt+0x3e68>
   15f1c:	ldr	r2, [r0, #40]	; 0x28
   15f20:	ldr	r3, [r1, #40]	; 0x28
   15f24:	cmp	r2, r3
   15f28:	beq	15f38 <__assert_fail@plt+0x3ff0>
   15f2c:	movcc	r0, #1
   15f30:	movcs	r0, #0
   15f34:	bx	lr
   15f38:	ldr	r3, [r0, #20]
   15f3c:	ldr	r2, [r1, #20]
   15f40:	ldr	ip, [r0, #24]
   15f44:	ldr	r0, [r1, #24]
   15f48:	add	r3, r3, ip
   15f4c:	add	r0, r2, r0
   15f50:	cmp	r3, r0
   15f54:	movcs	r0, #0
   15f58:	movcc	r0, #1
   15f5c:	bx	lr
   15f60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15f64:	movw	r4, #41696	; 0xa2e0
   15f68:	movt	r4, #3
   15f6c:	ldr	r3, [r4, #776]	; 0x308
   15f70:	ldr	r2, [r4, #1040]	; 0x410
   15f74:	strd	r6, [sp, #8]
   15f78:	mov	r7, r1
   15f7c:	strd	r8, [sp, #16]
   15f80:	mov	r8, #0
   15f84:	strd	sl, [sp, #24]
   15f88:	mov	sl, r0
   15f8c:	str	lr, [sp, #32]
   15f90:	sub	sp, sp, #140	; 0x8c
   15f94:	ldr	r9, [r3, r2, lsl #2]
   15f98:	mov	r0, r9
   15f9c:	bl	11d50 <strlen@plt>
   15fa0:	mov	fp, r0
   15fa4:	add	r0, r0, #24
   15fa8:	bic	r0, r0, #3
   15fac:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   15fb0:	add	r6, r0, #9
   15fb4:	mov	r2, fp
   15fb8:	mov	r5, r0
   15fbc:	mov	r1, r9
   15fc0:	mov	r0, r6
   15fc4:	bl	11ac8 <memcpy@plt>
   15fc8:	ldr	lr, [r4, #772]	; 0x304
   15fcc:	movw	ip, #31240	; 0x7a08
   15fd0:	movt	ip, #2
   15fd4:	ldm	ip, {r0, r2, ip}
   15fd8:	add	r1, r6, fp
   15fdc:	ldr	r3, [r4, #1040]	; 0x410
   15fe0:	str	r0, [r6, fp]
   15fe4:	mov	r0, r8
   15fe8:	str	r2, [r1, #4]
   15fec:	add	r2, sp, #8
   15ff0:	str	ip, [r1, #8]
   15ff4:	ldr	r1, [pc, #292]	; 16120 <__assert_fail@plt+0x41d8>
   15ff8:	add	r3, r3, #1
   15ffc:	str	r8, [r5]
   16000:	cmp	r3, lr
   16004:	moveq	r3, r8
   16008:	str	r3, [r4, #1040]	; 0x410
   1600c:	bl	11c60 <pthread_sigmask@plt>
   16010:	clz	r3, r0
   16014:	mov	r1, #524288	; 0x80000
   16018:	lsr	r3, r3, #5
   1601c:	mov	r0, r6
   16020:	strb	r3, [sp, #4]
   16024:	bl	23ef0 <__assert_fail@plt+0x11fa8>
   16028:	mov	r4, r0
   1602c:	bl	11d74 <__errno_location@plt>
   16030:	cmp	r4, r8
   16034:	mov	fp, r0
   16038:	blt	16080 <__assert_fail@plt+0x4138>
   1603c:	ldrb	r1, [sp, #4]
   16040:	movw	r3, #41444	; 0xa1e4
   16044:	movt	r3, #3
   16048:	ldr	r2, [r3, #4]
   1604c:	str	r5, [r3, #4]
   16050:	cmp	r1, r8
   16054:	str	r5, [r2]
   16058:	bne	160b4 <__assert_fail@plt+0x416c>
   1605c:	mov	r0, r5
   16060:	str	r4, [sl]
   16064:	add	sp, sp, #140	; 0x8c
   16068:	ldrd	r4, [sp]
   1606c:	ldrd	r6, [sp, #8]
   16070:	ldrd	r8, [sp, #16]
   16074:	ldrd	sl, [sp, #24]
   16078:	add	sp, sp, #32
   1607c:	pop	{pc}		; (ldr pc, [sp], #4)
   16080:	ldrb	r3, [sp, #4]
   16084:	ldr	r6, [r0]
   16088:	cmp	r3, #0
   1608c:	bne	160d0 <__assert_fail@plt+0x4188>
   16090:	eor	r7, r7, #1
   16094:	cmp	r6, #24
   16098:	orrne	r7, r7, #1
   1609c:	cmp	r7, #0
   160a0:	bne	160e8 <__assert_fail@plt+0x41a0>
   160a4:	mov	r0, r5
   160a8:	mov	r5, r7
   160ac:	bl	1d29c <__assert_fail@plt+0xb354>
   160b0:	b	1605c <__assert_fail@plt+0x4114>
   160b4:	ldr	r6, [fp]
   160b8:	mov	r2, r8
   160bc:	add	r1, sp, #8
   160c0:	mov	r0, #2
   160c4:	bl	11c60 <pthread_sigmask@plt>
   160c8:	str	r6, [fp]
   160cc:	b	1605c <__assert_fail@plt+0x4114>
   160d0:	mov	r2, r8
   160d4:	add	r1, sp, #8
   160d8:	mov	r0, #2
   160dc:	bl	11c60 <pthread_sigmask@plt>
   160e0:	str	r6, [fp]
   160e4:	b	16090 <__assert_fail@plt+0x4148>
   160e8:	mov	r2, #5
   160ec:	movw	r1, #31204	; 0x79e4
   160f0:	movt	r1, #2
   160f4:	mov	r0, #0
   160f8:	bl	11b58 <dcgettext@plt>
   160fc:	mov	r4, r0
   16100:	mov	r1, r9
   16104:	mov	r0, #4
   16108:	bl	21dd0 <__assert_fail@plt+0xfe88>
   1610c:	mov	r3, r0
   16110:	mov	r2, r4
   16114:	mov	r1, r6
   16118:	mov	r0, #2
   1611c:	bl	11c90 <error@plt>
   16120:	strdeq	sl, [r3], -r4
   16124:	movw	ip, #33096	; 0x8148
   16128:	movt	ip, #2
   1612c:	strd	r4, [sp, #-16]!
   16130:	str	r6, [sp, #8]
   16134:	mov	r5, r1
   16138:	mov	r4, r2
   1613c:	str	lr, [sp, #12]
   16140:	sub	sp, sp, #24
   16144:	mov	r2, #10
   16148:	add	r3, sp, #16
   1614c:	add	r1, sp, #12
   16150:	str	ip, [sp]
   16154:	mov	r6, r0
   16158:	bl	25500 <__assert_fail@plt+0x135b8>
   1615c:	cmp	r0, #4
   16160:	ldrls	pc, [pc, r0, lsl #2]
   16164:	b	1619c <__assert_fail@plt+0x4254>
   16168:	andeq	r6, r1, ip, ror r1
   1616c:	muleq	r1, r4, r1
   16170:	andeq	r6, r1, ip, ror r1
   16174:	muleq	r1, r4, r1
   16178:			; <UNDEFINED> instruction: 0x000161b4
   1617c:	ldrd	r0, [sp, #16]
   16180:	mov	r3, #0
   16184:	cmp	r1, r3
   16188:	str	r0, [r5]
   1618c:	cmpeq	r0, r0
   16190:	beq	1619c <__assert_fail@plt+0x4254>
   16194:	mvn	r3, #0
   16198:	str	r3, [r5]
   1619c:	ldr	r0, [sp, #12]
   161a0:	add	sp, sp, #24
   161a4:	ldrd	r4, [sp]
   161a8:	ldr	r6, [sp, #8]
   161ac:	add	sp, sp, #12
   161b0:	pop	{pc}		; (ldr pc, [sp], #4)
   161b4:	cmp	r4, #0
   161b8:	moveq	r0, r4
   161bc:	beq	161a0 <__assert_fail@plt+0x4258>
   161c0:	mov	r2, #5
   161c4:	movw	r1, #31252	; 0x7a14
   161c8:	movt	r1, #2
   161cc:	mov	r0, #0
   161d0:	bl	11b58 <dcgettext@plt>
   161d4:	mov	r5, r0
   161d8:	mov	r1, r4
   161dc:	mov	r2, #5
   161e0:	mov	r0, #0
   161e4:	bl	11b58 <dcgettext@plt>
   161e8:	mov	r4, r0
   161ec:	mov	r0, r6
   161f0:	bl	230fc <__assert_fail@plt+0x111b4>
   161f4:	mov	r3, r4
   161f8:	mov	r2, r5
   161fc:	str	r0, [sp]
   16200:	mov	r1, #0
   16204:	mov	r0, #2
   16208:	bl	11c90 <error@plt>
   1620c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16210:	subs	r4, r0, #0
   16214:	strd	r6, [sp, #8]
   16218:	str	r8, [sp, #16]
   1621c:	str	lr, [sp, #20]
   16220:	beq	1623c <__assert_fail@plt+0x42f4>
   16224:	mov	r2, #0
   16228:	mov	r3, #0
   1622c:	mov	r0, #1
   16230:	bl	11b28 <ftruncate64@plt>
   16234:	cmp	r0, #0
   16238:	bne	1625c <__assert_fail@plt+0x4314>
   1623c:	movw	r3, #41684	; 0xa2d4
   16240:	movt	r3, #3
   16244:	ldrd	r4, [sp]
   16248:	ldrd	r6, [sp, #8]
   1624c:	ldr	r8, [sp, #16]
   16250:	add	sp, sp, #20
   16254:	ldr	r0, [r3]
   16258:	pop	{pc}		; (ldr pc, [sp], #4)
   1625c:	movw	r5, #41696	; 0xa2e0
   16260:	movt	r5, #3
   16264:	bl	11d74 <__errno_location@plt>
   16268:	ldr	r3, [r5, #1172]	; 0x494
   1626c:	mov	r6, r0
   16270:	ldr	r7, [r0]
   16274:	cmp	r3, #0
   16278:	beq	162d0 <__assert_fail@plt+0x4388>
   1627c:	cmp	r3, #0
   16280:	bge	16294 <__assert_fail@plt+0x434c>
   16284:	ldr	r3, [r5, #1192]	; 0x4a8
   16288:	and	r3, r3, #61440	; 0xf000
   1628c:	cmp	r3, #32768	; 0x8000
   16290:	bne	1623c <__assert_fail@plt+0x42f4>
   16294:	mov	r2, #5
   16298:	movw	r1, #31288	; 0x7a38
   1629c:	movt	r1, #2
   162a0:	mov	r0, #0
   162a4:	bl	11b58 <dcgettext@plt>
   162a8:	mov	r5, r0
   162ac:	mov	r2, r4
   162b0:	mov	r1, #3
   162b4:	mov	r0, #0
   162b8:	bl	22950 <__assert_fail@plt+0x10a08>
   162bc:	mov	r3, r0
   162c0:	mov	r2, r5
   162c4:	mov	r1, r7
   162c8:	mov	r0, #2
   162cc:	bl	11c90 <error@plt>
   162d0:	ldr	r2, [pc, #36]	; 162fc <__assert_fail@plt+0x43b4>
   162d4:	mov	r1, #1
   162d8:	mov	r0, #3
   162dc:	bl	11bf4 <__fxstat64@plt>
   162e0:	cmp	r0, #0
   162e4:	mvneq	r3, #0
   162e8:	streq	r3, [r5, #1172]	; 0x494
   162ec:	beq	16284 <__assert_fail@plt+0x433c>
   162f0:	ldr	r3, [r6]
   162f4:	str	r3, [r5, #1172]	; 0x494
   162f8:	b	1627c <__assert_fail@plt+0x4334>
   162fc:	andeq	sl, r3, r8, ror r7
   16300:	movw	r1, #31312	; 0x7a50
   16304:	movt	r1, #2
   16308:	str	r4, [sp, #-8]!
   1630c:	mov	r2, #5
   16310:	mov	r4, r0
   16314:	str	lr, [sp, #4]
   16318:	mov	r0, #0
   1631c:	bl	11b58 <dcgettext@plt>
   16320:	mov	r1, r4
   16324:	bl	15848 <__assert_fail@plt+0x3900>
   16328:	strd	r4, [sp, #-16]!
   1632c:	mov	r5, r1
   16330:	mov	r4, r0
   16334:	str	r6, [sp, #8]
   16338:	str	lr, [sp, #12]
   1633c:	bl	11dc8 <fileno@plt>
   16340:	cmp	r0, #0
   16344:	beq	16370 <__assert_fail@plt+0x4428>
   16348:	cmp	r0, #1
   1634c:	beq	16388 <__assert_fail@plt+0x4440>
   16350:	mov	r0, r4
   16354:	bl	1cafc <__assert_fail@plt+0xabb4>
   16358:	cmp	r0, #0
   1635c:	bne	163b4 <__assert_fail@plt+0x446c>
   16360:	ldrd	r4, [sp]
   16364:	ldr	r6, [sp, #8]
   16368:	add	sp, sp, #12
   1636c:	pop	{pc}		; (ldr pc, [sp], #4)
   16370:	mov	r0, r4
   16374:	ldrd	r4, [sp]
   16378:	ldr	r6, [sp, #8]
   1637c:	ldr	lr, [sp, #12]
   16380:	add	sp, sp, #16
   16384:	b	11e88 <clearerr_unlocked@plt>
   16388:	mov	r0, r4
   1638c:	bl	11bdc <fflush_unlocked@plt>
   16390:	cmp	r0, #0
   16394:	movwne	r1, #31324	; 0x7a5c
   16398:	movtne	r1, #2
   1639c:	beq	16360 <__assert_fail@plt+0x4418>
   163a0:	mov	r2, #5
   163a4:	mov	r0, #0
   163a8:	bl	11b58 <dcgettext@plt>
   163ac:	mov	r1, r5
   163b0:	bl	15848 <__assert_fail@plt+0x3900>
   163b4:	movw	r1, #31340	; 0x7a6c
   163b8:	movt	r1, #2
   163bc:	b	163a0 <__assert_fail@plt+0x4458>
   163c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   163c4:	ldr	r5, [r0, #4]
   163c8:	strd	r6, [sp, #8]
   163cc:	ldr	r7, [r1, #4]
   163d0:	str	r8, [sp, #16]
   163d4:	str	lr, [sp, #20]
   163d8:	subs	r8, r5, #1
   163dc:	sub	r6, r7, #1
   163e0:	bne	16418 <__assert_fail@plt+0x44d0>
   163e4:	adds	r0, r6, #0
   163e8:	movw	r4, #41696	; 0xa2e0
   163ec:	movt	r4, #3
   163f0:	movne	r0, #1
   163f4:	rsb	r0, r0, #0
   163f8:	ldrb	r3, [r4, #1281]	; 0x501
   163fc:	ldrd	r4, [sp]
   16400:	ldrd	r6, [sp, #8]
   16404:	cmp	r3, #0
   16408:	ldr	r8, [sp, #16]
   1640c:	add	sp, sp, #20
   16410:	rsbne	r0, r0, #0
   16414:	pop	{pc}		; (ldr pc, [sp], #4)
   16418:	cmp	r6, #0
   1641c:	movw	r4, #41696	; 0xa2e0
   16420:	movt	r4, #3
   16424:	moveq	r0, #1
   16428:	beq	163f8 <__assert_fail@plt+0x44b0>
   1642c:	ldrb	r3, [r4, #1280]	; 0x500
   16430:	ldr	r0, [r0]
   16434:	ldr	r1, [r1]
   16438:	cmp	r3, #0
   1643c:	bne	16470 <__assert_fail@plt+0x4528>
   16440:	cmp	r8, r6
   16444:	movcc	r2, r8
   16448:	movcs	r2, r6
   1644c:	bl	11b40 <memcmp@plt>
   16450:	cmp	r0, #0
   16454:	bne	163f8 <__assert_fail@plt+0x44b0>
   16458:	cmp	r8, r6
   1645c:	mvncc	r0, #0
   16460:	bcc	163f8 <__assert_fail@plt+0x44b0>
   16464:	subs	r0, r5, r7
   16468:	movne	r0, #1
   1646c:	b	163f8 <__assert_fail@plt+0x44b0>
   16470:	mov	r2, r1
   16474:	mov	r3, r7
   16478:	mov	r1, r5
   1647c:	bl	2534c <__assert_fail@plt+0x13404>
   16480:	b	163f8 <__assert_fail@plt+0x44b0>
   16484:	str	r4, [sp, #-8]!
   16488:	mov	r4, r0
   1648c:	str	lr, [sp, #4]
   16490:	bl	11b88 <dup2@plt>
   16494:	mov	r0, r4
   16498:	ldr	r4, [sp]
   1649c:	ldr	lr, [sp, #4]
   164a0:	add	sp, sp, #8
   164a4:	b	11f30 <close@plt>
   164a8:	strd	r4, [sp, #-16]!
   164ac:	mov	r2, #1
   164b0:	mvn	r0, #0
   164b4:	str	r6, [sp, #8]
   164b8:	str	lr, [sp, #12]
   164bc:	sub	sp, sp, #16
   164c0:	mov	r1, sp
   164c4:	bl	11c3c <waitpid@plt>
   164c8:	subs	r4, r0, #0
   164cc:	blt	16534 <__assert_fail@plt+0x45ec>
   164d0:	beq	1651c <__assert_fail@plt+0x45d4>
   164d4:	movw	r5, #41696	; 0xa2e0
   164d8:	movt	r5, #3
   164dc:	str	r4, [sp, #8]
   164e0:	add	r1, sp, #4
   164e4:	ldr	r0, [r5, #1288]	; 0x508
   164e8:	bl	1e7f0 <__assert_fail@plt+0xc8a8>
   164ec:	cmp	r0, #0
   164f0:	beq	1651c <__assert_fail@plt+0x45d4>
   164f4:	ldr	r3, [sp]
   164f8:	mov	r6, #2
   164fc:	strb	r6, [r0, #8]
   16500:	ubfx	r2, r3, #8, #8
   16504:	and	r3, r3, #127	; 0x7f
   16508:	orrs	r3, r2, r3
   1650c:	bne	1657c <__assert_fail@plt+0x4634>
   16510:	ldr	r3, [r5, #1292]	; 0x50c
   16514:	sub	r3, r3, #1
   16518:	str	r3, [r5, #1292]	; 0x50c
   1651c:	mov	r0, r4
   16520:	add	sp, sp, #16
   16524:	ldrd	r4, [sp]
   16528:	ldr	r6, [sp, #8]
   1652c:	add	sp, sp, #12
   16530:	pop	{pc}		; (ldr pc, [sp], #4)
   16534:	bl	11d74 <__errno_location@plt>
   16538:	ldr	r4, [r0]
   1653c:	mov	r2, #5
   16540:	movw	r1, #31356	; 0x7a7c
   16544:	movt	r1, #2
   16548:	mov	r0, #0
   1654c:	bl	11b58 <dcgettext@plt>
   16550:	movw	r3, #41696	; 0xa2e0
   16554:	movt	r3, #3
   16558:	mov	r5, r0
   1655c:	mov	r0, #4
   16560:	ldr	r1, [r3, #1284]	; 0x504
   16564:	bl	21dd0 <__assert_fail@plt+0xfe88>
   16568:	mov	r3, r0
   1656c:	mov	r2, r5
   16570:	mov	r1, r4
   16574:	mov	r0, #2
   16578:	bl	11c90 <error@plt>
   1657c:	mov	r2, #5
   16580:	movw	r1, #31376	; 0x7a90
   16584:	movt	r1, #2
   16588:	mov	r0, #0
   1658c:	bl	11b58 <dcgettext@plt>
   16590:	mov	r4, r0
   16594:	mov	r0, #4
   16598:	ldr	r1, [r5, #1284]	; 0x504
   1659c:	bl	21dd0 <__assert_fail@plt+0xfe88>
   165a0:	mov	r3, r0
   165a4:	mov	r2, r4
   165a8:	mov	r0, r6
   165ac:	mov	r1, #0
   165b0:	bl	11c90 <error@plt>
   165b4:	strd	r4, [sp, #-16]!
   165b8:	mov	r2, #0
   165bc:	mvn	r0, #0
   165c0:	str	r6, [sp, #8]
   165c4:	str	lr, [sp, #12]
   165c8:	sub	sp, sp, #16
   165cc:	mov	r1, sp
   165d0:	bl	11c3c <waitpid@plt>
   165d4:	subs	r4, r0, #0
   165d8:	blt	16640 <__assert_fail@plt+0x46f8>
   165dc:	beq	16628 <__assert_fail@plt+0x46e0>
   165e0:	movw	r5, #41696	; 0xa2e0
   165e4:	movt	r5, #3
   165e8:	str	r4, [sp, #8]
   165ec:	add	r1, sp, #4
   165f0:	ldr	r0, [r5, #1288]	; 0x508
   165f4:	bl	1e7f0 <__assert_fail@plt+0xc8a8>
   165f8:	cmp	r0, #0
   165fc:	beq	16628 <__assert_fail@plt+0x46e0>
   16600:	ldr	r3, [sp]
   16604:	mov	r6, #2
   16608:	strb	r6, [r0, #8]
   1660c:	ubfx	r2, r3, #8, #8
   16610:	and	r3, r3, #127	; 0x7f
   16614:	orrs	r3, r2, r3
   16618:	bne	16688 <__assert_fail@plt+0x4740>
   1661c:	ldr	r3, [r5, #1292]	; 0x50c
   16620:	sub	r3, r3, #1
   16624:	str	r3, [r5, #1292]	; 0x50c
   16628:	mov	r0, r4
   1662c:	add	sp, sp, #16
   16630:	ldrd	r4, [sp]
   16634:	ldr	r6, [sp, #8]
   16638:	add	sp, sp, #12
   1663c:	pop	{pc}		; (ldr pc, [sp], #4)
   16640:	bl	11d74 <__errno_location@plt>
   16644:	ldr	r4, [r0]
   16648:	mov	r2, #5
   1664c:	movw	r1, #31356	; 0x7a7c
   16650:	movt	r1, #2
   16654:	mov	r0, #0
   16658:	bl	11b58 <dcgettext@plt>
   1665c:	movw	r3, #41696	; 0xa2e0
   16660:	movt	r3, #3
   16664:	mov	r5, r0
   16668:	mov	r0, #4
   1666c:	ldr	r1, [r3, #1284]	; 0x504
   16670:	bl	21dd0 <__assert_fail@plt+0xfe88>
   16674:	mov	r3, r0
   16678:	mov	r2, r5
   1667c:	mov	r1, r4
   16680:	mov	r0, #2
   16684:	bl	11c90 <error@plt>
   16688:	mov	r2, #5
   1668c:	movw	r1, #31376	; 0x7a90
   16690:	movt	r1, #2
   16694:	mov	r0, #0
   16698:	bl	11b58 <dcgettext@plt>
   1669c:	mov	r4, r0
   166a0:	mov	r0, #4
   166a4:	ldr	r1, [r5, #1284]	; 0x504
   166a8:	bl	21dd0 <__assert_fail@plt+0xfe88>
   166ac:	mov	r3, r0
   166b0:	mov	r2, r4
   166b4:	mov	r0, r6
   166b8:	mov	r1, #0
   166bc:	bl	11c90 <error@plt>
   166c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166c4:	mov	r5, r1
   166c8:	mov	r1, #524288	; 0x80000
   166cc:	strd	r6, [sp, #8]
   166d0:	strd	r8, [sp, #16]
   166d4:	strd	sl, [sp, #24]
   166d8:	str	lr, [sp, #32]
   166dc:	vpush	{d8}
   166e0:	sub	sp, sp, #148	; 0x94
   166e4:	str	r0, [sp, #4]
   166e8:	bl	1f568 <__assert_fail@plt+0xd620>
   166ec:	cmp	r0, #0
   166f0:	blt	16860 <__assert_fail@plt+0x4918>
   166f4:	movw	r3, #41444	; 0xa1e4
   166f8:	movt	r3, #3
   166fc:	movw	r4, #41696	; 0xa2e0
   16700:	movt	r4, #3
   16704:	ldr	r3, [r3, #8]
   16708:	ldr	r2, [r4, #1292]	; 0x50c
   1670c:	add	r3, r3, #1
   16710:	cmp	r3, r2
   16714:	bcc	16840 <__assert_fail@plt+0x48f8>
   16718:	bl	11d74 <__errno_location@plt>
   1671c:	sub	r5, r5, #1
   16720:	vldr	d8, [pc, #320]	; 16868 <__assert_fail@plt+0x4920>
   16724:	mov	r6, r0
   16728:	mov	r8, #0
   1672c:	ldr	sl, [pc, #316]	; 16870 <__assert_fail@plt+0x4928>
   16730:	b	16780 <__assert_fail@plt+0x4838>
   16734:	cmp	r2, #0
   16738:	str	r7, [r4, #768]	; 0x300
   1673c:	bne	167c0 <__assert_fail@plt+0x4878>
   16740:	cmp	fp, #0
   16744:	str	r9, [r6]
   16748:	bge	167d4 <__assert_fail@plt+0x488c>
   1674c:	cmp	r9, #11
   16750:	bne	1680c <__assert_fail@plt+0x48c4>
   16754:	vmov.f64	d0, d8
   16758:	bl	253c0 <__assert_fail@plt+0x13478>
   1675c:	vadd.f64	d8, d8, d8
   16760:	ldr	r3, [r4, #1292]	; 0x50c
   16764:	cmp	r3, #0
   16768:	ble	16778 <__assert_fail@plt+0x4830>
   1676c:	bl	164a8 <__assert_fail@plt+0x4560>
   16770:	cmp	r0, #0
   16774:	bne	16760 <__assert_fail@plt+0x4818>
   16778:	subs	r5, r5, #1
   1677c:	bcc	16808 <__assert_fail@plt+0x48c0>
   16780:	add	r2, sp, #16
   16784:	mov	r1, sl
   16788:	mov	r0, #0
   1678c:	bl	11c60 <pthread_sigmask@plt>
   16790:	clz	r0, r0
   16794:	ldr	r7, [r4, #768]	; 0x300
   16798:	lsr	r0, r0, #5
   1679c:	str	r8, [r4, #768]	; 0x300
   167a0:	strb	r0, [sp, #12]
   167a4:	bl	11e40 <fork@plt>
   167a8:	subs	fp, r0, #0
   167ac:	ldrb	r2, [sp, #12]
   167b0:	ldr	r9, [r6]
   167b4:	bne	16734 <__assert_fail@plt+0x47ec>
   167b8:	cmp	r2, #0
   167bc:	beq	16828 <__assert_fail@plt+0x48e0>
   167c0:	mov	r2, #0
   167c4:	add	r1, sp, #16
   167c8:	mov	r0, #2
   167cc:	bl	11c60 <pthread_sigmask@plt>
   167d0:	b	16740 <__assert_fail@plt+0x47f8>
   167d4:	beq	16828 <__assert_fail@plt+0x48e0>
   167d8:	ldr	r3, [r4, #1292]	; 0x50c
   167dc:	add	r3, r3, #1
   167e0:	str	r3, [r4, #1292]	; 0x50c
   167e4:	mov	r0, fp
   167e8:	add	sp, sp, #148	; 0x94
   167ec:	vpop	{d8}
   167f0:	ldrd	r4, [sp]
   167f4:	ldrd	r6, [sp, #8]
   167f8:	ldrd	r8, [sp, #16]
   167fc:	ldrd	sl, [sp, #24]
   16800:	add	sp, sp, #32
   16804:	pop	{pc}		; (ldr pc, [sp], #4)
   16808:	ldr	r9, [r6]
   1680c:	ldr	r4, [sp, #4]
   16810:	ldr	r0, [r4]
   16814:	bl	11f30 <close@plt>
   16818:	ldr	r0, [r4, #4]
   1681c:	bl	11f30 <close@plt>
   16820:	str	r9, [r6]
   16824:	b	167e4 <__assert_fail@plt+0x489c>
   16828:	mov	r0, #0
   1682c:	mov	fp, r0
   16830:	bl	11f30 <close@plt>
   16834:	mov	r0, #1
   16838:	bl	11f30 <close@plt>
   1683c:	b	167e4 <__assert_fail@plt+0x489c>
   16840:	bl	165b4 <__assert_fail@plt+0x466c>
   16844:	ldr	r3, [r4, #1292]	; 0x50c
   16848:	cmp	r3, #0
   1684c:	ble	16718 <__assert_fail@plt+0x47d0>
   16850:	bl	164a8 <__assert_fail@plt+0x4560>
   16854:	cmp	r0, #0
   16858:	beq	16718 <__assert_fail@plt+0x47d0>
   1685c:	b	16844 <__assert_fail@plt+0x48fc>
   16860:	mvn	fp, #0
   16864:	b	167e4 <__assert_fail@plt+0x489c>
   16868:	andeq	r0, r0, r0
   1686c:	svccc	0x00d00000
   16870:	strdeq	sl, [r3], -r4
   16874:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16878:	mov	r4, r1
   1687c:	ldr	r5, [r0]
   16880:	strd	r6, [sp, #8]
   16884:	subs	r7, r2, #0
   16888:	strd	r8, [sp, #16]
   1688c:	ldr	r8, [r0, #4]
   16890:	strd	sl, [sp, #24]
   16894:	str	lr, [sp, #32]
   16898:	sub	sp, sp, #28
   1689c:	add	r6, r5, r8
   168a0:	beq	168f4 <__assert_fail@plt+0x49ac>
   168a4:	movw	r3, #41444	; 0xa1e4
   168a8:	movt	r3, #3
   168ac:	ldrb	ip, [r3, #108]	; 0x6c
   168b0:	mov	r0, r5
   168b4:	mov	r3, r4
   168b8:	mov	r2, r8
   168bc:	mov	r1, #1
   168c0:	strb	ip, [r6, #-1]
   168c4:	bl	11b34 <fwrite_unlocked@plt>
   168c8:	cmp	r8, r0
   168cc:	moveq	r3, #0
   168d0:	strbeq	r3, [r6, #-1]
   168d4:	bne	16e78 <__assert_fail@plt+0x4f30>
   168d8:	add	sp, sp, #28
   168dc:	ldrd	r4, [sp]
   168e0:	ldrd	r6, [sp, #8]
   168e4:	ldrd	r8, [sp, #16]
   168e8:	ldrd	sl, [sp, #24]
   168ec:	add	sp, sp, #32
   168f0:	pop	{pc}		; (ldr pc, [sp], #4)
   168f4:	movw	fp, #41696	; 0xa2e0
   168f8:	movt	fp, #3
   168fc:	ldrb	r3, [fp, #1296]	; 0x510
   16900:	cmp	r3, #0
   16904:	beq	168a4 <__assert_fail@plt+0x495c>
   16908:	cmp	r5, r6
   1690c:	mov	sl, r0
   16910:	bcc	16948 <__assert_fail@plt+0x4a00>
   16914:	b	1699c <__assert_fail@plt+0x4a54>
   16918:	cmp	r6, r5
   1691c:	movne	r1, r3
   16920:	beq	16960 <__assert_fail@plt+0x4a18>
   16924:	ldr	r2, [r4, #20]
   16928:	ldr	r0, [r4, #24]
   1692c:	cmp	r2, r0
   16930:	addcc	r1, r2, #1
   16934:	strcc	r1, [r4, #20]
   16938:	strbcc	r3, [r2]
   1693c:	bcs	1696c <__assert_fail@plt+0x4a24>
   16940:	cmp	r6, r5
   16944:	beq	16998 <__assert_fail@plt+0x4a50>
   16948:	ldrb	r3, [r5], #1
   1694c:	cmp	r3, #9
   16950:	bne	16918 <__assert_fail@plt+0x49d0>
   16954:	mov	r1, #62	; 0x3e
   16958:	mov	r3, r1
   1695c:	b	16924 <__assert_fail@plt+0x49dc>
   16960:	mov	r1, #10
   16964:	mov	r3, r1
   16968:	b	16924 <__assert_fail@plt+0x49dc>
   1696c:	mov	r0, r4
   16970:	bl	11e1c <__overflow@plt>
   16974:	cmn	r0, #1
   16978:	bne	16940 <__assert_fail@plt+0x49f8>
   1697c:	movw	r1, #31408	; 0x7ab0
   16980:	movt	r1, #2
   16984:	mov	r2, #5
   16988:	mov	r0, #0
   1698c:	bl	11b58 <dcgettext@plt>
   16990:	mov	r1, #0
   16994:	bl	15848 <__assert_fail@plt+0x3900>
   16998:	ldm	sl, {r5, r8}
   1699c:	movw	r3, #41684	; 0xa2d4
   169a0:	movt	r3, #3
   169a4:	str	sl, [sp, #4]
   169a8:	ldr	r7, [fp, #1300]	; 0x514
   169ac:	sub	r6, r8, #1
   169b0:	mov	sl, r3
   169b4:	add	r6, r5, r6
   169b8:	cmp	r7, #0
   169bc:	beq	16c90 <__assert_fail@plt+0x4d48>
   169c0:	ldr	r9, [r7]
   169c4:	ldr	r3, [r7, #8]
   169c8:	cmn	r9, #1
   169cc:	beq	16d08 <__assert_fail@plt+0x4dc0>
   169d0:	mov	r2, r7
   169d4:	mov	r1, r8
   169d8:	str	r3, [sp, #8]
   169dc:	mov	r0, r5
   169e0:	bl	15bac <__assert_fail@plt+0x3c64>
   169e4:	ldr	r3, [sp, #8]
   169e8:	mov	r4, r0
   169ec:	cmn	r3, #1
   169f0:	beq	16a20 <__assert_fail@plt+0x4ad8>
   169f4:	mov	r1, r8
   169f8:	mov	r2, r7
   169fc:	mov	r0, r5
   16a00:	bl	15d40 <__assert_fail@plt+0x3df8>
   16a04:	mov	r6, r0
   16a08:	ldrb	r3, [r7, #24]
   16a0c:	cmn	r9, #1
   16a10:	movne	r9, #0
   16a14:	moveq	r9, #1
   16a18:	tst	r9, r3
   16a1c:	bne	16a44 <__assert_fail@plt+0x4afc>
   16a20:	ldrb	r3, [r7, #30]
   16a24:	cmp	r3, #0
   16a28:	bne	16a44 <__assert_fail@plt+0x4afc>
   16a2c:	ldrb	r3, [r7, #26]
   16a30:	cmp	r3, #0
   16a34:	bne	16a44 <__assert_fail@plt+0x4afc>
   16a38:	ldrh	r3, [r7, #28]
   16a3c:	cmp	r3, #0
   16a40:	beq	16b6c <__assert_fail@plt+0x4c24>
   16a44:	mov	r3, #0
   16a48:	ldrb	r9, [r6]
   16a4c:	strb	r3, [r6]
   16a50:	ldrb	r3, [r4]
   16a54:	add	r3, fp, r3
   16a58:	ldrb	r3, [r3, #784]	; 0x310
   16a5c:	cmp	r3, #0
   16a60:	beq	16a78 <__assert_fail@plt+0x4b30>
   16a64:	ldrb	r3, [r4, #1]!
   16a68:	add	r3, fp, r3
   16a6c:	ldrb	r3, [r3, #784]	; 0x310
   16a70:	cmp	r3, #0
   16a74:	bne	16a64 <__assert_fail@plt+0x4b1c>
   16a78:	cmp	r6, r4
   16a7c:	str	r4, [sp, #20]
   16a80:	bcc	16cd0 <__assert_fail@plt+0x4d88>
   16a84:	ldrb	r3, [r7, #30]
   16a88:	cmp	r3, #0
   16a8c:	bne	16d18 <__assert_fail@plt+0x4dd0>
   16a90:	ldrb	r3, [r7, #28]
   16a94:	cmp	r3, #0
   16a98:	bne	16e50 <__assert_fail@plt+0x4f08>
   16a9c:	ldrb	r3, [r7, #26]
   16aa0:	cmp	r3, #0
   16aa4:	bne	16ab4 <__assert_fail@plt+0x4b6c>
   16aa8:	ldrb	r3, [r7, #29]
   16aac:	cmp	r3, #0
   16ab0:	beq	16cd0 <__assert_fail@plt+0x4d88>
   16ab4:	cmp	r6, r4
   16ab8:	ldrb	r3, [r4]
   16abc:	bls	16ac8 <__assert_fail@plt+0x4b80>
   16ac0:	cmp	r3, #45	; 0x2d
   16ac4:	beq	16e60 <__assert_fail@plt+0x4f18>
   16ac8:	mov	r0, r4
   16acc:	sub	r2, r3, #48	; 0x30
   16ad0:	add	r1, r0, #1
   16ad4:	ldr	lr, [fp, #1304]	; 0x518
   16ad8:	cmp	r2, #9
   16adc:	bhi	16e00 <__assert_fail@plt+0x4eb8>
   16ae0:	mov	r2, #0
   16ae4:	b	16b00 <__assert_fail@plt+0x4bb8>
   16ae8:	sub	r0, r3, #48	; 0x30
   16aec:	add	ip, r1, #1
   16af0:	cmp	r0, #9
   16af4:	bhi	16e0c <__assert_fail@plt+0x4ec4>
   16af8:	mov	r0, r1
   16afc:	mov	r1, ip
   16b00:	cmp	r3, r2
   16b04:	movcs	r2, r3
   16b08:	ldrb	r3, [r0, #1]
   16b0c:	cmp	r3, lr
   16b10:	bne	16ae8 <__assert_fail@plt+0x4ba0>
   16b14:	ldrb	r3, [r0, #2]
   16b18:	add	r1, r0, #2
   16b1c:	add	ip, r0, #3
   16b20:	sub	r8, r3, #48	; 0x30
   16b24:	cmp	r8, #9
   16b28:	bls	16af8 <__assert_fail@plt+0x4bb0>
   16b2c:	mov	ip, r1
   16b30:	add	r1, r0, #1
   16b34:	cmp	r2, #47	; 0x2f
   16b38:	bls	16b64 <__assert_fail@plt+0x4c1c>
   16b3c:	ldrb	r3, [r7, #29]
   16b40:	cmp	r3, #0
   16b44:	beq	16b60 <__assert_fail@plt+0x4c18>
   16b48:	ldrb	r2, [r1]
   16b4c:	movw	r3, #30032	; 0x7550
   16b50:	movt	r3, #2
   16b54:	ldrb	r3, [r3, r2]
   16b58:	cmp	r3, #0
   16b5c:	movne	r1, ip
   16b60:	str	r1, [sp, #20]
   16b64:	strb	r9, [r6]
   16b68:	ldr	r6, [sp, #20]
   16b6c:	movw	r8, #31424	; 0x7ac0
   16b70:	movt	r8, #2
   16b74:	mov	r2, #0
   16b78:	sub	r1, r4, r5
   16b7c:	mov	r0, r5
   16b80:	bl	1eed4 <__assert_fail@plt+0xcf8c>
   16b84:	cmp	r4, r5
   16b88:	mov	r9, r0
   16b8c:	bls	16ba4 <__assert_fail@plt+0x4c5c>
   16b90:	ldrb	r3, [r5], #1
   16b94:	cmp	r3, #9
   16b98:	addeq	r9, r9, #1
   16b9c:	cmp	r4, r5
   16ba0:	bne	16b90 <__assert_fail@plt+0x4c48>
   16ba4:	mov	r2, #0
   16ba8:	sub	r1, r6, r4
   16bac:	mov	r0, r4
   16bb0:	bl	1eed4 <__assert_fail@plt+0xcf8c>
   16bb4:	cmp	r4, r6
   16bb8:	mov	r5, r0
   16bbc:	bcs	16bd4 <__assert_fail@plt+0x4c8c>
   16bc0:	ldrb	r3, [r4], #1
   16bc4:	cmp	r3, #9
   16bc8:	addeq	r5, r5, #1
   16bcc:	cmp	r6, r4
   16bd0:	bne	16bc0 <__assert_fail@plt+0x4c78>
   16bd4:	cmp	r9, #0
   16bd8:	sub	r9, r9, #1
   16bdc:	beq	16c0c <__assert_fail@plt+0x4cc4>
   16be0:	mov	r4, #32
   16be4:	ldr	r0, [sl]
   16be8:	ldr	r3, [r0, #20]
   16bec:	ldr	r2, [r0, #24]
   16bf0:	cmp	r3, r2
   16bf4:	addcc	r2, r3, #1
   16bf8:	strcc	r2, [r0, #20]
   16bfc:	strbcc	r4, [r3]
   16c00:	bcs	16c98 <__assert_fail@plt+0x4d50>
   16c04:	subs	r9, r9, #1
   16c08:	bcs	16be4 <__assert_fail@plt+0x4c9c>
   16c0c:	cmp	r5, #0
   16c10:	movne	r4, #95	; 0x5f
   16c14:	beq	16cb0 <__assert_fail@plt+0x4d68>
   16c18:	ldr	r0, [sl]
   16c1c:	ldr	r3, [r0, #20]
   16c20:	ldr	r2, [r0, #24]
   16c24:	cmp	r3, r2
   16c28:	addcc	r2, r3, #1
   16c2c:	strcc	r2, [r0, #20]
   16c30:	strbcc	r4, [r3]
   16c34:	bcs	16ca4 <__assert_fail@plt+0x4d5c>
   16c38:	subs	r5, r5, #1
   16c3c:	bne	16c18 <__assert_fail@plt+0x4cd0>
   16c40:	ldr	r0, [sl]
   16c44:	ldr	r3, [r0, #20]
   16c48:	ldr	r2, [r0, #24]
   16c4c:	cmp	r3, r2
   16c50:	addcc	r1, r3, #1
   16c54:	movcc	r2, #10
   16c58:	strcc	r1, [r0, #20]
   16c5c:	strbcc	r2, [r3]
   16c60:	bcs	16df4 <__assert_fail@plt+0x4eac>
   16c64:	cmp	r7, #0
   16c68:	beq	168d8 <__assert_fail@plt+0x4990>
   16c6c:	ldr	r7, [r7, #36]	; 0x24
   16c70:	cmp	r7, #0
   16c74:	beq	16cd8 <__assert_fail@plt+0x4d90>
   16c78:	ldr	r3, [sp, #4]
   16c7c:	cmp	r7, #0
   16c80:	ldm	r3, {r5, r8}
   16c84:	sub	r6, r8, #1
   16c88:	add	r6, r5, r6
   16c8c:	bne	169c0 <__assert_fail@plt+0x4a78>
   16c90:	mov	r4, r5
   16c94:	b	16b6c <__assert_fail@plt+0x4c24>
   16c98:	mov	r1, #32
   16c9c:	bl	11e1c <__overflow@plt>
   16ca0:	b	16c04 <__assert_fail@plt+0x4cbc>
   16ca4:	mov	r1, #95	; 0x5f
   16ca8:	bl	11e1c <__overflow@plt>
   16cac:	b	16c38 <__assert_fail@plt+0x4cf0>
   16cb0:	mov	r1, r8
   16cb4:	mov	r0, r5
   16cb8:	mov	r2, #5
   16cbc:	bl	11b58 <dcgettext@plt>
   16cc0:	mov	r1, r0
   16cc4:	mov	r0, #1
   16cc8:	bl	11db0 <__printf_chk@plt>
   16ccc:	b	16c64 <__assert_fail@plt+0x4d1c>
   16cd0:	str	r6, [sp, #20]
   16cd4:	b	16b64 <__assert_fail@plt+0x4c1c>
   16cd8:	ldrb	r3, [fp, #1309]	; 0x51d
   16cdc:	cmp	r3, #0
   16ce0:	bne	168d8 <__assert_fail@plt+0x4990>
   16ce4:	ldrb	r3, [fp, #1310]	; 0x51e
   16ce8:	cmp	r3, #0
   16cec:	bne	168d8 <__assert_fail@plt+0x4990>
   16cf0:	ldr	r3, [sp, #4]
   16cf4:	ldm	r3, {r5, r6}
   16cf8:	sub	r6, r6, #1
   16cfc:	mov	r4, r5
   16d00:	add	r6, r5, r6
   16d04:	b	16b74 <__assert_fail@plt+0x4c2c>
   16d08:	cmn	r3, #1
   16d0c:	mov	r4, r5
   16d10:	bne	169f4 <__assert_fail@plt+0x4aac>
   16d14:	b	16a08 <__assert_fail@plt+0x4ac0>
   16d18:	ldrb	r3, [r4]
   16d1c:	mov	ip, r4
   16d20:	add	r3, fp, r3
   16d24:	ldrb	r3, [r3, #784]	; 0x310
   16d28:	cmp	r3, #0
   16d2c:	beq	16d44 <__assert_fail@plt+0x4dfc>
   16d30:	ldrb	r3, [ip, #1]!
   16d34:	add	r3, fp, r3
   16d38:	ldrb	r3, [r3, #784]	; 0x310
   16d3c:	cmp	r3, #0
   16d40:	bne	16d30 <__assert_fail@plt+0x4de8>
   16d44:	movw	r3, #41444	; 0xa1e4
   16d48:	movt	r3, #3
   16d4c:	mov	r8, #12
   16d50:	str	r3, [sp, #8]
   16d54:	mov	r3, #0
   16d58:	str	r4, [sp, #12]
   16d5c:	mov	r4, r3
   16d60:	ldr	r3, [sp, #8]
   16d64:	add	lr, r4, r8
   16d68:	lsr	lr, lr, #1
   16d6c:	add	r3, r3, lr, lsl #3
   16d70:	ldr	r0, [r3, #12]
   16d74:	ldrb	r2, [r0]
   16d78:	cmp	r2, #0
   16d7c:	beq	16e6c <__assert_fail@plt+0x4f24>
   16d80:	ldrb	r3, [ip]
   16d84:	add	r3, fp, r3
   16d88:	ldrb	r3, [r3, #512]	; 0x200
   16d8c:	cmp	r2, r3
   16d90:	bhi	16dd8 <__assert_fail@plt+0x4e90>
   16d94:	addcs	r2, ip, #1
   16d98:	bcs	16dbc <__assert_fail@plt+0x4e74>
   16d9c:	b	16dec <__assert_fail@plt+0x4ea4>
   16da0:	ldrb	r3, [r3]
   16da4:	add	r2, r2, #1
   16da8:	add	r3, fp, r3
   16dac:	ldrb	r3, [r3, #512]	; 0x200
   16db0:	cmp	r1, r3
   16db4:	bhi	16dd8 <__assert_fail@plt+0x4e90>
   16db8:	bcc	16dec <__assert_fail@plt+0x4ea4>
   16dbc:	ldrb	r1, [r0, #1]!
   16dc0:	mov	r3, r2
   16dc4:	cmp	r1, #0
   16dc8:	bne	16da0 <__assert_fail@plt+0x4e58>
   16dcc:	ldr	r4, [sp, #12]
   16dd0:	str	r3, [sp, #20]
   16dd4:	b	16b64 <__assert_fail@plt+0x4c1c>
   16dd8:	mov	r8, lr
   16ddc:	cmp	r4, r8
   16de0:	bcc	16d60 <__assert_fail@plt+0x4e18>
   16de4:	ldr	r4, [sp, #12]
   16de8:	b	16b64 <__assert_fail@plt+0x4c1c>
   16dec:	add	r4, lr, #1
   16df0:	b	16ddc <__assert_fail@plt+0x4e94>
   16df4:	mov	r1, #10
   16df8:	bl	11e1c <__overflow@plt>
   16dfc:	b	16c64 <__assert_fail@plt+0x4d1c>
   16e00:	mov	ip, r1
   16e04:	mov	r2, #0
   16e08:	mov	r1, r0
   16e0c:	ldrb	r0, [fp, #1308]	; 0x51c
   16e10:	cmp	r0, r3
   16e14:	bne	16b34 <__assert_fail@plt+0x4bec>
   16e18:	ldrb	r3, [r1, #1]
   16e1c:	add	ip, r1, #2
   16e20:	sub	r0, r3, #48	; 0x30
   16e24:	cmp	r0, #9
   16e28:	addhi	r1, r1, #1
   16e2c:	bhi	16b34 <__assert_fail@plt+0x4bec>
   16e30:	cmp	r2, r3
   16e34:	mov	r1, ip
   16e38:	movcc	r2, r3
   16e3c:	ldrb	r3, [ip], #1
   16e40:	sub	r0, r3, #48	; 0x30
   16e44:	cmp	r0, #9
   16e48:	bls	16e30 <__assert_fail@plt+0x4ee8>
   16e4c:	b	16b34 <__assert_fail@plt+0x4bec>
   16e50:	add	r1, sp, #20
   16e54:	mov	r0, r4
   16e58:	bl	11b1c <strtold@plt>
   16e5c:	b	16b64 <__assert_fail@plt+0x4c1c>
   16e60:	add	r0, r4, #1
   16e64:	ldrb	r3, [r4, #1]
   16e68:	b	16acc <__assert_fail@plt+0x4b84>
   16e6c:	mov	r3, ip
   16e70:	ldr	r4, [sp, #12]
   16e74:	b	16dd0 <__assert_fail@plt+0x4e88>
   16e78:	movw	r1, #31408	; 0x7ab0
   16e7c:	movt	r1, #2
   16e80:	mov	r2, #5
   16e84:	mov	r0, #0
   16e88:	bl	11b58 <dcgettext@plt>
   16e8c:	mov	r1, r7
   16e90:	bl	15848 <__assert_fail@plt+0x3900>
   16e94:	strd	r4, [sp, #-12]!
   16e98:	movw	r5, #41696	; 0xa2e0
   16e9c:	movt	r5, #3
   16ea0:	ldr	r3, [r5, #768]	; 0x300
   16ea4:	str	lr, [sp, #8]
   16ea8:	sub	sp, sp, #140	; 0x8c
   16eac:	cmp	r3, #0
   16eb0:	beq	16f04 <__assert_fail@plt+0x4fbc>
   16eb4:	ldr	r1, [pc, #108]	; 16f28 <__assert_fail@plt+0x4fe0>
   16eb8:	mov	r0, #0
   16ebc:	add	r2, sp, #8
   16ec0:	bl	11c60 <pthread_sigmask@plt>
   16ec4:	ldr	r4, [r5, #768]	; 0x300
   16ec8:	clz	r0, r0
   16ecc:	lsr	r0, r0, #5
   16ed0:	strb	r0, [sp, #4]
   16ed4:	cmp	r4, #0
   16ed8:	beq	16ef4 <__assert_fail@plt+0x4fac>
   16edc:	add	r0, r4, #9
   16ee0:	bl	11b7c <unlink@plt>
   16ee4:	ldr	r4, [r4]
   16ee8:	cmp	r4, #0
   16eec:	bne	16edc <__assert_fail@plt+0x4f94>
   16ef0:	ldrb	r0, [sp, #4]
   16ef4:	mov	r2, #0
   16ef8:	cmp	r0, r2
   16efc:	str	r2, [r5, #768]	; 0x300
   16f00:	bne	16f18 <__assert_fail@plt+0x4fd0>
   16f04:	bl	1ba08 <__assert_fail@plt+0x9ac0>
   16f08:	add	sp, sp, #140	; 0x8c
   16f0c:	ldrd	r4, [sp]
   16f10:	add	sp, sp, #8
   16f14:	pop	{pc}		; (ldr pc, [sp], #4)
   16f18:	add	r1, sp, #8
   16f1c:	mov	r0, #2
   16f20:	bl	11c60 <pthread_sigmask@plt>
   16f24:	b	16f04 <__assert_fail@plt+0x4fbc>
   16f28:	strdeq	sl, [r3], -r4
   16f2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16f30:	mov	r5, r0
   16f34:	movw	r4, #41696	; 0xa2e0
   16f38:	movt	r4, #3
   16f3c:	strd	r6, [sp, #8]
   16f40:	str	lr, [sp, #16]
   16f44:	sub	sp, sp, #20
   16f48:	add	r1, sp, #4
   16f4c:	ldr	r0, [r4, #1288]	; 0x508
   16f50:	str	r5, [sp, #8]
   16f54:	bl	1e7f0 <__assert_fail@plt+0xc8a8>
   16f58:	subs	r3, r0, #0
   16f5c:	beq	16fb8 <__assert_fail@plt+0x5070>
   16f60:	mov	r6, #2
   16f64:	cmp	r5, #0
   16f68:	moveq	r2, #1
   16f6c:	movne	r2, #0
   16f70:	movne	r0, r5
   16f74:	mvneq	r0, #0
   16f78:	strb	r6, [r3, #8]
   16f7c:	mov	r1, sp
   16f80:	bl	11c3c <waitpid@plt>
   16f84:	subs	r3, r0, #0
   16f88:	blt	17024 <__assert_fail@plt+0x50dc>
   16f8c:	beq	16fb8 <__assert_fail@plt+0x5070>
   16f90:	cmp	r5, #0
   16f94:	ble	16fcc <__assert_fail@plt+0x5084>
   16f98:	ldr	r3, [sp]
   16f9c:	ubfx	r2, r3, #8, #8
   16fa0:	and	r3, r3, #127	; 0x7f
   16fa4:	orrs	r3, r2, r3
   16fa8:	bne	16fec <__assert_fail@plt+0x50a4>
   16fac:	ldr	r3, [r4, #1292]	; 0x50c
   16fb0:	sub	r3, r3, #1
   16fb4:	str	r3, [r4, #1292]	; 0x50c
   16fb8:	add	sp, sp, #20
   16fbc:	ldrd	r4, [sp]
   16fc0:	ldrd	r6, [sp, #8]
   16fc4:	add	sp, sp, #16
   16fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fcc:	add	r1, sp, #4
   16fd0:	ldr	r0, [r4, #1288]	; 0x508
   16fd4:	str	r3, [sp, #8]
   16fd8:	bl	1e7f0 <__assert_fail@plt+0xc8a8>
   16fdc:	cmp	r0, #0
   16fe0:	beq	16fb8 <__assert_fail@plt+0x5070>
   16fe4:	strb	r6, [r0, #8]
   16fe8:	b	16f98 <__assert_fail@plt+0x5050>
   16fec:	mov	r2, #5
   16ff0:	movw	r1, #31376	; 0x7a90
   16ff4:	movt	r1, #2
   16ff8:	mov	r0, #0
   16ffc:	bl	11b58 <dcgettext@plt>
   17000:	mov	r5, r0
   17004:	mov	r0, #4
   17008:	ldr	r1, [r4, #1284]	; 0x504
   1700c:	bl	21dd0 <__assert_fail@plt+0xfe88>
   17010:	mov	r3, r0
   17014:	mov	r2, r5
   17018:	mov	r1, #0
   1701c:	mov	r0, #2
   17020:	bl	11c90 <error@plt>
   17024:	bl	11d74 <__errno_location@plt>
   17028:	ldr	r5, [r0]
   1702c:	mov	r2, #5
   17030:	movw	r1, #31356	; 0x7a7c
   17034:	movt	r1, #2
   17038:	mov	r0, #0
   1703c:	bl	11b58 <dcgettext@plt>
   17040:	mov	r7, r0
   17044:	mov	r0, #4
   17048:	ldr	r1, [r4, #1284]	; 0x504
   1704c:	bl	21dd0 <__assert_fail@plt+0xfe88>
   17050:	mov	r3, r0
   17054:	mov	r2, r7
   17058:	mov	r1, r5
   1705c:	mov	r0, r6
   17060:	bl	11c90 <error@plt>
   17064:	movw	r3, #41696	; 0xa2e0
   17068:	movt	r3, #3
   1706c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17070:	ldr	r4, [r3, #768]	; 0x300
   17074:	strd	r6, [sp, #8]
   17078:	mov	r6, r0
   1707c:	strd	r8, [sp, #16]
   17080:	str	lr, [sp, #24]
   17084:	sub	sp, sp, #140	; 0x8c
   17088:	add	r2, r4, #9
   1708c:	cmp	r0, r2
   17090:	beq	17140 <__assert_fail@plt+0x51f8>
   17094:	ldr	r3, [r4]
   17098:	add	r2, r3, #9
   1709c:	cmp	r2, r6
   170a0:	beq	170b8 <__assert_fail@plt+0x5170>
   170a4:	mov	r4, r3
   170a8:	ldr	r3, [r4]
   170ac:	add	r2, r3, #9
   170b0:	cmp	r2, r6
   170b4:	bne	170a4 <__assert_fail@plt+0x515c>
   170b8:	mov	r5, r4
   170bc:	mov	r4, r3
   170c0:	ldrb	r3, [r4, #8]
   170c4:	cmp	r3, #1
   170c8:	beq	17150 <__assert_fail@plt+0x5208>
   170cc:	ldr	r1, [pc, #240]	; 171c4 <__assert_fail@plt+0x527c>
   170d0:	add	r2, sp, #8
   170d4:	mov	r0, #0
   170d8:	ldr	r7, [r4]
   170dc:	bl	11c60 <pthread_sigmask@plt>
   170e0:	clz	r3, r0
   170e4:	mov	r0, r6
   170e8:	lsr	r3, r3, #5
   170ec:	strb	r3, [sp, #4]
   170f0:	bl	11b7c <unlink@plt>
   170f4:	mov	r8, r0
   170f8:	bl	11d74 <__errno_location@plt>
   170fc:	ldrb	r3, [sp, #4]
   17100:	ldr	r9, [r0]
   17104:	str	r7, [r5]
   17108:	cmp	r3, #0
   1710c:	bne	171b0 <__assert_fail@plt+0x5268>
   17110:	cmp	r8, #0
   17114:	bne	1715c <__assert_fail@plt+0x5214>
   17118:	cmp	r7, #0
   1711c:	beq	171a0 <__assert_fail@plt+0x5258>
   17120:	mov	r0, r4
   17124:	bl	1d29c <__assert_fail@plt+0xb354>
   17128:	add	sp, sp, #140	; 0x8c
   1712c:	ldrd	r4, [sp]
   17130:	ldrd	r6, [sp, #8]
   17134:	ldrd	r8, [sp, #16]
   17138:	add	sp, sp, #24
   1713c:	pop	{pc}		; (ldr pc, [sp], #4)
   17140:	add	r5, r3, #768	; 0x300
   17144:	ldrb	r3, [r4, #8]
   17148:	cmp	r3, #1
   1714c:	bne	170cc <__assert_fail@plt+0x5184>
   17150:	ldr	r0, [r4, #4]
   17154:	bl	16f2c <__assert_fail@plt+0x4fe4>
   17158:	b	170cc <__assert_fail@plt+0x5184>
   1715c:	mov	r2, #5
   17160:	movw	r1, #31444	; 0x7ad4
   17164:	movt	r1, #2
   17168:	mov	r0, #0
   1716c:	bl	11b58 <dcgettext@plt>
   17170:	mov	r8, r0
   17174:	mov	r2, r6
   17178:	mov	r1, #3
   1717c:	mov	r0, #0
   17180:	bl	22950 <__assert_fail@plt+0x10a08>
   17184:	mov	r3, r0
   17188:	mov	r2, r8
   1718c:	mov	r1, r9
   17190:	mov	r0, #0
   17194:	bl	11c90 <error@plt>
   17198:	cmp	r7, #0
   1719c:	bne	17120 <__assert_fail@plt+0x51d8>
   171a0:	movw	r3, #41444	; 0xa1e4
   171a4:	movt	r3, #3
   171a8:	str	r5, [r3, #4]
   171ac:	b	17120 <__assert_fail@plt+0x51d8>
   171b0:	add	r1, sp, #8
   171b4:	mov	r2, #0
   171b8:	mov	r0, #2
   171bc:	bl	11c60 <pthread_sigmask@plt>
   171c0:	b	17110 <__assert_fail@plt+0x51c8>
   171c4:	strdeq	sl, [r3], -r4
   171c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   171cc:	strd	r6, [sp, #8]
   171d0:	strd	r8, [sp, #16]
   171d4:	ldrb	r8, [r0, #24]
   171d8:	strd	sl, [sp, #24]
   171dc:	str	lr, [sp, #32]
   171e0:	sub	sp, sp, #52	; 0x34
   171e4:	cmp	r8, #0
   171e8:	bne	17404 <__assert_fail@plt+0x54bc>
   171ec:	str	r1, [sp, #24]
   171f0:	movw	r1, #41444	; 0xa1e4
   171f4:	movt	r1, #3
   171f8:	mov	r3, r0
   171fc:	str	r0, [sp, #28]
   17200:	movw	r6, #41696	; 0xa2e0
   17204:	movt	r6, #3
   17208:	ldrd	r4, [r0]
   1720c:	str	r1, [sp, #32]
   17210:	ldrb	r0, [r1, #108]	; 0x6c
   17214:	str	r2, [sp, #36]	; 0x24
   17218:	ldr	r2, [r3, #16]
   1721c:	ldr	fp, [r1, #112]	; 0x70
   17220:	str	r0, [sp, #12]
   17224:	ldr	r0, [r3, #20]
   17228:	cmp	r5, r2
   1722c:	ldr	r7, [r6, #1300]	; 0x514
   17230:	str	r0, [sp, #16]
   17234:	bne	17424 <__assert_fail@plt+0x54dc>
   17238:	ldr	r2, [r3, #8]
   1723c:	sub	fp, fp, #18
   17240:	ldr	r1, [sp, #16]
   17244:	ldr	r3, [r3, #12]
   17248:	add	r1, r1, #1
   1724c:	str	r1, [sp, #20]
   17250:	ldr	r1, [sp, #16]
   17254:	add	r3, r4, r3
   17258:	add	r5, r4, r5
   1725c:	sub	sl, r3, r2, lsl #4
   17260:	cmp	r2, #0
   17264:	mls	r3, r2, r1, r3
   17268:	sub	r8, r3, r5
   1726c:	beq	17278 <__assert_fail@plt+0x5330>
   17270:	ldm	sl, {r3, r4}
   17274:	add	r4, r4, r3
   17278:	ldr	r3, [sp, #20]
   1727c:	cmp	r8, r3
   17280:	strls	r5, [sp, #8]
   17284:	bls	1758c <__assert_fail@plt+0x5644>
   17288:	ldrd	r2, [sp, #20]
   1728c:	sub	r9, r8, #1
   17290:	mov	r1, #1
   17294:	mov	r0, r5
   17298:	udiv	r9, r9, r2
   1729c:	mov	r2, r9
   172a0:	bl	11ee8 <fread_unlocked@plt>
   172a4:	add	r2, r5, r0
   172a8:	cmp	r9, r0
   172ac:	sub	r8, r8, r0
   172b0:	str	r2, [sp, #8]
   172b4:	beq	1730c <__assert_fail@plt+0x53c4>
   172b8:	ldr	r3, [sp, #24]
   172bc:	ldr	r3, [r3]
   172c0:	tst	r3, #32
   172c4:	bne	17640 <__assert_fail@plt+0x56f8>
   172c8:	tst	r3, #16
   172cc:	beq	1730c <__assert_fail@plt+0x53c4>
   172d0:	mov	r0, r2
   172d4:	ldr	r2, [sp, #28]
   172d8:	mov	r1, #1
   172dc:	ldr	r3, [r2]
   172e0:	strb	r1, [r2, #24]
   172e4:	cmp	r3, r0
   172e8:	beq	17404 <__assert_fail@plt+0x54bc>
   172ec:	cmp	r0, r4
   172f0:	beq	1730c <__assert_fail@plt+0x53c4>
   172f4:	ldrb	r3, [r0, #-1]
   172f8:	ldr	r2, [sp, #12]
   172fc:	cmp	r3, r2
   17300:	beq	1730c <__assert_fail@plt+0x53c4>
   17304:	strb	r2, [r0], #1
   17308:	str	r0, [sp, #8]
   1730c:	ldr	r3, [sp, #32]
   17310:	mov	r9, sl
   17314:	ldr	r3, [r3]
   17318:	str	r3, [sp, #4]
   1731c:	ldr	r3, [sp, #8]
   17320:	mov	r0, r5
   17324:	mov	sl, r9
   17328:	ldr	r1, [sp, #12]
   1732c:	sub	r2, r3, r5
   17330:	bl	11de0 <memchr@plt>
   17334:	cmp	r0, #0
   17338:	beq	1756c <__assert_fail@plt+0x5624>
   1733c:	ldr	r3, [sp, #16]
   17340:	mov	r5, r0
   17344:	sub	r8, r8, r3
   17348:	mov	r3, #0
   1734c:	strb	r3, [r5], #1
   17350:	sub	sl, r5, r4
   17354:	cmp	fp, sl
   17358:	str	r4, [r9, #-16]
   1735c:	movcc	fp, sl
   17360:	cmp	r7, #0
   17364:	str	sl, [r9, #-12]
   17368:	beq	173f8 <__assert_fail@plt+0x54b0>
   1736c:	ldr	r2, [r7, #8]
   17370:	cmn	r2, #1
   17374:	beq	17388 <__assert_fail@plt+0x5440>
   17378:	mov	r2, r7
   1737c:	mov	r1, sl
   17380:	mov	r0, r4
   17384:	bl	15d40 <__assert_fail@plt+0x3df8>
   17388:	ldr	r1, [r7]
   1738c:	str	r0, [r9, #-4]
   17390:	cmn	r1, #1
   17394:	beq	174b4 <__assert_fail@plt+0x556c>
   17398:	ldr	r3, [sp, #4]
   1739c:	sub	sl, sl, #1
   173a0:	add	sl, r4, sl
   173a4:	ldr	r0, [r7, #4]
   173a8:	cmp	r3, #256	; 0x100
   173ac:	beq	174c8 <__assert_fail@plt+0x5580>
   173b0:	cmp	r4, sl
   173b4:	bcs	173e8 <__assert_fail@plt+0x54a0>
   173b8:	cmp	r1, #0
   173bc:	sub	r1, r1, #1
   173c0:	beq	17468 <__assert_fail@plt+0x5520>
   173c4:	mov	r3, r4
   173c8:	mov	r4, r3
   173cc:	ldrb	r2, [r3], #1
   173d0:	ldr	ip, [sp, #4]
   173d4:	cmp	ip, r2
   173d8:	beq	1744c <__assert_fail@plt+0x5504>
   173dc:	cmp	sl, r3
   173e0:	mov	r4, r3
   173e4:	bhi	173c8 <__assert_fail@plt+0x5480>
   173e8:	add	r4, r4, r0
   173ec:	cmp	sl, r4
   173f0:	movcc	r4, sl
   173f4:	str	r4, [r9, #-8]
   173f8:	sub	r9, r9, #16
   173fc:	mov	r4, r5
   17400:	b	1731c <__assert_fail@plt+0x53d4>
   17404:	mov	r0, #0
   17408:	add	sp, sp, #52	; 0x34
   1740c:	ldrd	r4, [sp]
   17410:	ldrd	r6, [sp, #8]
   17414:	ldrd	r8, [sp, #16]
   17418:	ldrd	sl, [sp, #24]
   1741c:	add	sp, sp, #32
   17420:	pop	{pc}		; (ldr pc, [sp], #4)
   17424:	sub	r5, r5, r2
   17428:	mov	r0, r4
   1742c:	add	r1, r4, r5
   17430:	bl	11a80 <memmove@plt>
   17434:	ldr	r3, [sp, #28]
   17438:	mov	r2, r8
   1743c:	ldr	r4, [r3]
   17440:	ldr	r5, [r3, #16]
   17444:	stmib	r3, {r5, r8}
   17448:	b	1723c <__assert_fail@plt+0x52f4>
   1744c:	cmp	sl, r4
   17450:	bls	173e8 <__assert_fail@plt+0x54a0>
   17454:	cmp	sl, r3
   17458:	mov	r4, r3
   1745c:	bls	173e8 <__assert_fail@plt+0x54a0>
   17460:	subs	r1, r1, #1
   17464:	bcs	173c4 <__assert_fail@plt+0x547c>
   17468:	ldrb	r2, [r7, #24]
   1746c:	cmp	r2, #0
   17470:	beq	173e8 <__assert_fail@plt+0x54a0>
   17474:	ldrb	r2, [r4]
   17478:	add	r2, r6, r2
   1747c:	ldrb	r2, [r2, #784]	; 0x310
   17480:	cmp	r2, #0
   17484:	addne	r2, r4, #1
   17488:	beq	173e8 <__assert_fail@plt+0x54a0>
   1748c:	cmp	sl, r2
   17490:	mov	r4, r2
   17494:	bls	173e8 <__assert_fail@plt+0x54a0>
   17498:	ldrb	r3, [r2]
   1749c:	add	r2, r2, #1
   174a0:	add	r3, r6, r3
   174a4:	ldrb	r3, [r3, #784]	; 0x310
   174a8:	cmp	r3, #0
   174ac:	bne	1748c <__assert_fail@plt+0x5544>
   174b0:	b	173e8 <__assert_fail@plt+0x54a0>
   174b4:	ldrb	r2, [r7, #24]
   174b8:	cmp	r2, #0
   174bc:	bne	175f4 <__assert_fail@plt+0x56ac>
   174c0:	str	r4, [r9, #-8]
   174c4:	b	173f8 <__assert_fail@plt+0x54b0>
   174c8:	cmp	r4, sl
   174cc:	bcs	173e8 <__assert_fail@plt+0x54a0>
   174d0:	cmp	r1, #0
   174d4:	sub	r1, r1, #1
   174d8:	beq	17468 <__assert_fail@plt+0x5520>
   174dc:	ldrb	r2, [r4]
   174e0:	add	r2, r6, r2
   174e4:	ldrb	r2, [r2, #784]	; 0x310
   174e8:	cmp	r2, #0
   174ec:	beq	1752c <__assert_fail@plt+0x55e4>
   174f0:	add	r4, r4, #1
   174f4:	cmp	sl, r4
   174f8:	bls	173e8 <__assert_fail@plt+0x54a0>
   174fc:	mov	r2, r4
   17500:	mov	r4, r2
   17504:	add	r2, r2, #1
   17508:	ldrb	r3, [r4]
   1750c:	add	r3, r6, r3
   17510:	ldrb	r3, [r3, #784]	; 0x310
   17514:	cmp	r3, #0
   17518:	beq	1752c <__assert_fail@plt+0x55e4>
   1751c:	cmp	sl, r2
   17520:	mov	r4, r2
   17524:	bne	17500 <__assert_fail@plt+0x55b8>
   17528:	b	173e8 <__assert_fail@plt+0x54a0>
   1752c:	cmp	sl, r4
   17530:	addhi	r2, r4, #1
   17534:	bhi	17550 <__assert_fail@plt+0x5608>
   17538:	b	173e8 <__assert_fail@plt+0x54a0>
   1753c:	ldrb	r3, [r2], #1
   17540:	add	r3, r6, r3
   17544:	ldrb	r3, [r3, #784]	; 0x310
   17548:	cmp	r3, #0
   1754c:	bne	17560 <__assert_fail@plt+0x5618>
   17550:	cmp	sl, r2
   17554:	mov	r4, r2
   17558:	bne	1753c <__assert_fail@plt+0x55f4>
   1755c:	b	173e8 <__assert_fail@plt+0x54a0>
   17560:	subs	r1, r1, #1
   17564:	bcs	174f0 <__assert_fail@plt+0x55a8>
   17568:	b	17468 <__assert_fail@plt+0x5520>
   1756c:	ldr	r3, [sp, #28]
   17570:	ldrb	r3, [r3, #24]
   17574:	cmp	r3, #0
   17578:	bne	1758c <__assert_fail@plt+0x5644>
   1757c:	ldr	r5, [sp, #8]
   17580:	ldr	r3, [sp, #20]
   17584:	cmp	r8, r3
   17588:	bhi	17288 <__assert_fail@plt+0x5340>
   1758c:	ldr	r3, [sp, #8]
   17590:	ldr	ip, [sp, #28]
   17594:	ldr	r0, [ip]
   17598:	ldr	r2, [ip, #12]
   1759c:	sub	r1, r3, r0
   175a0:	add	r3, r0, r2
   175a4:	sub	r3, r3, sl
   175a8:	asr	r3, r3, #4
   175ac:	cmp	r3, #0
   175b0:	stmib	ip, {r1, r3}
   175b4:	bne	17620 <__assert_fail@plt+0x56d8>
   175b8:	lsr	r3, r2, #4
   175bc:	add	r1, sp, #44	; 0x2c
   175c0:	mov	r2, #16
   175c4:	str	r3, [sp, #44]	; 0x2c
   175c8:	bl	24e44 <__assert_fail@plt+0x12efc>
   175cc:	ldr	r1, [sp, #28]
   175d0:	mov	r4, r0
   175d4:	ldr	r3, [sp, #44]	; 0x2c
   175d8:	mov	r2, r1
   175dc:	ldr	r5, [r1, #4]
   175e0:	lsl	r3, r3, #4
   175e4:	str	r0, [r2]
   175e8:	ldr	r2, [r1, #8]
   175ec:	str	r3, [r1, #12]
   175f0:	b	17250 <__assert_fail@plt+0x5308>
   175f4:	ldrb	r2, [r4]
   175f8:	add	r2, r6, r2
   175fc:	ldrb	r2, [r2, #784]	; 0x310
   17600:	cmp	r2, #0
   17604:	beq	174c0 <__assert_fail@plt+0x5578>
   17608:	ldrb	r3, [r4, #1]!
   1760c:	add	r3, r6, r3
   17610:	ldrb	r3, [r3, #784]	; 0x310
   17614:	cmp	r3, #0
   17618:	bne	17608 <__assert_fail@plt+0x56c0>
   1761c:	b	174c0 <__assert_fail@plt+0x5578>
   17620:	ldr	r3, [sp, #8]
   17624:	mov	r0, #1
   17628:	ldr	r2, [sp, #32]
   1762c:	sub	r4, r3, r4
   17630:	add	r3, fp, #18
   17634:	str	r4, [ip, #16]
   17638:	str	r3, [r2, #112]	; 0x70
   1763c:	b	17408 <__assert_fail@plt+0x54c0>
   17640:	movw	r1, #31472	; 0x7af0
   17644:	movt	r1, #2
   17648:	mov	r2, #5
   1764c:	mov	r0, #0
   17650:	bl	11b58 <dcgettext@plt>
   17654:	ldr	r1, [sp, #36]	; 0x24
   17658:	bl	15848 <__assert_fail@plt+0x3900>
   1765c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17660:	mov	r4, r2
   17664:	mov	r5, r0
   17668:	strd	r6, [sp, #8]
   1766c:	strd	r8, [sp, #16]
   17670:	mov	r9, r1
   17674:	mov	r1, #4
   17678:	mov	r0, r9
   1767c:	strd	sl, [sp, #24]
   17680:	str	lr, [sp, #32]
   17684:	sub	sp, sp, #28
   17688:	bl	24d54 <__assert_fail@plt+0x12e0c>
   1768c:	cmp	r9, #0
   17690:	str	r0, [r4]
   17694:	beq	178b8 <__assert_fail@plt+0x5970>
   17698:	movw	r3, #31568	; 0x7b50
   1769c:	movt	r3, #2
   176a0:	movw	sl, #31572	; 0x7b54
   176a4:	movt	sl, #2
   176a8:	movw	fp, #41696	; 0xa2e0
   176ac:	movt	fp, #3
   176b0:	str	r3, [sp, #12]
   176b4:	mov	r8, r0
   176b8:	mov	r4, #0
   176bc:	b	17718 <__assert_fail@plt+0x57d0>
   176c0:	ldr	r6, [r5]
   176c4:	mov	r1, sl
   176c8:	mov	r0, r6
   176cc:	bl	11a2c <strcmp@plt>
   176d0:	cmp	r0, #0
   176d4:	bne	17814 <__assert_fail@plt+0x58cc>
   176d8:	movw	r3, #41680	; 0xa2d0
   176dc:	movt	r3, #3
   176e0:	ldr	r6, [r3]
   176e4:	mov	r2, #1
   176e8:	strb	r2, [fp, #1311]	; 0x51f
   176ec:	mov	r1, #2
   176f0:	mov	r0, r6
   176f4:	bl	1caac <__assert_fail@plt+0xab64>
   176f8:	cmp	r6, #0
   176fc:	str	r6, [r8, r4, lsl #2]
   17700:	beq	17790 <__assert_fail@plt+0x5848>
   17704:	add	r4, r4, #1
   17708:	add	r5, r5, #8
   1770c:	cmp	r4, r9
   17710:	mov	r7, r4
   17714:	beq	17790 <__assert_fail@plt+0x5848>
   17718:	ldr	r6, [r5, #4]
   1771c:	mov	r7, r4
   17720:	cmp	r6, #0
   17724:	beq	176c0 <__assert_fail@plt+0x5778>
   17728:	ldrb	r3, [r6, #8]
   1772c:	cmp	r3, #0
   17730:	beq	176c0 <__assert_fail@plt+0x5778>
   17734:	cmp	r3, #1
   17738:	beq	17850 <__assert_fail@plt+0x5908>
   1773c:	mov	r1, #0
   17740:	add	r0, r6, #9
   17744:	bl	11c9c <open64@plt>
   17748:	subs	r3, r0, #0
   1774c:	str	r3, [sp, #8]
   17750:	blt	17834 <__assert_fail@plt+0x58ec>
   17754:	mov	r1, #9
   17758:	add	r0, sp, #16
   1775c:	bl	166c0 <__assert_fail@plt+0x4778>
   17760:	cmn	r0, #1
   17764:	bne	177b0 <__assert_fail@plt+0x5868>
   17768:	bl	11d74 <__errno_location@plt>
   1776c:	ldr	r5, [r0]
   17770:	mov	r6, r0
   17774:	cmp	r5, #24
   17778:	bne	1792c <__assert_fail@plt+0x59e4>
   1777c:	ldr	r0, [sp, #8]
   17780:	bl	11f30 <close@plt>
   17784:	mov	r3, #0
   17788:	str	r5, [r6]
   1778c:	str	r3, [r8, r4, lsl #2]
   17790:	mov	r0, r7
   17794:	add	sp, sp, #28
   17798:	ldrd	r4, [sp]
   1779c:	ldrd	r6, [sp, #8]
   177a0:	ldrd	r8, [sp, #16]
   177a4:	ldrd	sl, [sp, #24]
   177a8:	add	sp, sp, #32
   177ac:	pop	{pc}		; (ldr pc, [sp], #4)
   177b0:	cmp	r0, #0
   177b4:	beq	178c0 <__assert_fail@plt+0x5978>
   177b8:	ldr	ip, [fp, #1288]	; 0x508
   177bc:	str	r0, [r6, #4]
   177c0:	cmp	ip, #0
   177c4:	beq	1785c <__assert_fail@plt+0x5914>
   177c8:	mov	r3, #1
   177cc:	mov	r0, ip
   177d0:	mov	r1, r6
   177d4:	strb	r3, [r6, #8]
   177d8:	bl	1e5cc <__assert_fail@plt+0xc684>
   177dc:	cmp	r0, #0
   177e0:	beq	1788c <__assert_fail@plt+0x5944>
   177e4:	ldr	r0, [sp, #8]
   177e8:	add	r6, r8, r4, lsl #2
   177ec:	bl	11f30 <close@plt>
   177f0:	ldr	r0, [sp, #20]
   177f4:	bl	11f30 <close@plt>
   177f8:	ldr	r1, [sp, #12]
   177fc:	ldr	r0, [sp, #16]
   17800:	bl	119fc <fdopen@plt>
   17804:	cmp	r0, #0
   17808:	beq	17890 <__assert_fail@plt+0x5948>
   1780c:	str	r0, [r8, r4, lsl #2]
   17810:	b	17704 <__assert_fail@plt+0x57bc>
   17814:	mov	r0, r6
   17818:	mov	r1, #524288	; 0x80000
   1781c:	bl	11c9c <open64@plt>
   17820:	cmp	r0, #0
   17824:	bge	17840 <__assert_fail@plt+0x58f8>
   17828:	mov	r1, #2
   1782c:	mov	r0, #0
   17830:	bl	1caac <__assert_fail@plt+0xab64>
   17834:	mov	r3, #0
   17838:	str	r3, [r8, r4, lsl #2]
   1783c:	b	17790 <__assert_fail@plt+0x5848>
   17840:	ldr	r1, [sp, #12]
   17844:	bl	119fc <fdopen@plt>
   17848:	mov	r6, r0
   1784c:	b	176ec <__assert_fail@plt+0x57a4>
   17850:	ldr	r0, [r6, #4]
   17854:	bl	16f2c <__assert_fail@plt+0x4fe4>
   17858:	b	1773c <__assert_fail@plt+0x57f4>
   1785c:	mov	r1, ip
   17860:	movw	r3, #20648	; 0x50a8
   17864:	movt	r3, #1
   17868:	movw	r2, #20632	; 0x5098
   1786c:	movt	r2, #1
   17870:	mov	r0, #47	; 0x2f
   17874:	str	ip, [sp]
   17878:	bl	1dd64 <__assert_fail@plt+0xbe1c>
   1787c:	cmp	r0, #0
   17880:	mov	ip, r0
   17884:	str	r0, [fp, #1288]	; 0x508
   17888:	bne	177c8 <__assert_fail@plt+0x5880>
   1788c:	bl	251a8 <__assert_fail@plt+0x13260>
   17890:	str	r0, [sp, #8]
   17894:	bl	11d74 <__errno_location@plt>
   17898:	mov	r4, r0
   1789c:	ldr	r5, [r0]
   178a0:	ldr	r0, [sp, #16]
   178a4:	bl	11f30 <close@plt>
   178a8:	ldr	r3, [sp, #8]
   178ac:	str	r5, [r4]
   178b0:	str	r3, [r6]
   178b4:	b	17790 <__assert_fail@plt+0x5848>
   178b8:	mov	r7, r9
   178bc:	b	17790 <__assert_fail@plt+0x5848>
   178c0:	mov	r1, r0
   178c4:	ldr	r0, [sp, #16]
   178c8:	str	r1, [sp, #12]
   178cc:	bl	11f30 <close@plt>
   178d0:	ldr	r0, [sp, #8]
   178d4:	cmp	r0, #0
   178d8:	beq	178e4 <__assert_fail@plt+0x599c>
   178dc:	ldr	r1, [sp, #12]
   178e0:	bl	16484 <__assert_fail@plt+0x453c>
   178e4:	ldr	r0, [sp, #20]
   178e8:	cmp	r0, #1
   178ec:	beq	178f8 <__assert_fail@plt+0x59b0>
   178f0:	mov	r1, #1
   178f4:	bl	16484 <__assert_fail@plt+0x453c>
   178f8:	movw	r3, #41696	; 0xa2e0
   178fc:	movt	r3, #3
   17900:	ldr	r1, [r3, #1284]	; 0x504
   17904:	movw	r2, #31520	; 0x7b20
   17908:	movt	r2, #2
   1790c:	mov	r3, #0
   17910:	mov	r0, r1
   17914:	bl	11ad4 <execlp@plt>
   17918:	bl	11d74 <__errno_location@plt>
   1791c:	movw	r1, #31524	; 0x7b24
   17920:	movt	r1, #2
   17924:	ldr	r0, [r0]
   17928:	bl	159f0 <__assert_fail@plt+0x3aa8>
   1792c:	mov	r2, #5
   17930:	movw	r1, #31484	; 0x7afc
   17934:	movt	r1, #2
   17938:	mov	r0, #0
   1793c:	bl	11b58 <dcgettext@plt>
   17940:	movw	r3, #41696	; 0xa2e0
   17944:	movt	r3, #3
   17948:	mov	r4, r0
   1794c:	mov	r0, #4
   17950:	ldr	r1, [r3, #1284]	; 0x504
   17954:	bl	21dd0 <__assert_fail@plt+0xfe88>
   17958:	mov	r3, r0
   1795c:	mov	r2, r4
   17960:	mov	r1, r5
   17964:	mov	r0, #2
   17968:	bl	11c90 <error@plt>
   1796c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17970:	subs	r4, r0, #0
   17974:	strd	r6, [sp, #8]
   17978:	str	r8, [sp, #16]
   1797c:	str	lr, [sp, #20]
   17980:	beq	1799c <__assert_fail@plt+0x5a54>
   17984:	mov	r2, #0
   17988:	mov	r3, #0
   1798c:	mov	r0, #1
   17990:	bl	11b28 <ftruncate64@plt>
   17994:	cmp	r0, #0
   17998:	bne	179bc <__assert_fail@plt+0x5a74>
   1799c:	movw	r3, #41684	; 0xa2d4
   179a0:	movt	r3, #3
   179a4:	ldrd	r4, [sp]
   179a8:	ldrd	r6, [sp, #8]
   179ac:	ldr	r8, [sp, #16]
   179b0:	add	sp, sp, #20
   179b4:	ldr	r0, [r3]
   179b8:	pop	{pc}		; (ldr pc, [sp], #4)
   179bc:	movw	r5, #41696	; 0xa2e0
   179c0:	movt	r5, #3
   179c4:	bl	11d74 <__errno_location@plt>
   179c8:	ldr	r3, [r5, #1172]	; 0x494
   179cc:	mov	r6, r0
   179d0:	ldr	r7, [r0]
   179d4:	cmp	r3, #0
   179d8:	beq	17a30 <__assert_fail@plt+0x5ae8>
   179dc:	cmp	r3, #0
   179e0:	bge	179f4 <__assert_fail@plt+0x5aac>
   179e4:	ldr	r3, [r5, #1192]	; 0x4a8
   179e8:	and	r3, r3, #61440	; 0xf000
   179ec:	cmp	r3, #32768	; 0x8000
   179f0:	bne	1799c <__assert_fail@plt+0x5a54>
   179f4:	mov	r2, #5
   179f8:	movw	r1, #31288	; 0x7a38
   179fc:	movt	r1, #2
   17a00:	mov	r0, #0
   17a04:	bl	11b58 <dcgettext@plt>
   17a08:	mov	r5, r0
   17a0c:	mov	r2, r4
   17a10:	mov	r1, #3
   17a14:	mov	r0, #0
   17a18:	bl	22950 <__assert_fail@plt+0x10a08>
   17a1c:	mov	r3, r0
   17a20:	mov	r2, r5
   17a24:	mov	r1, r7
   17a28:	mov	r0, #2
   17a2c:	bl	11c90 <error@plt>
   17a30:	ldr	r2, [pc, #36]	; 17a5c <__assert_fail@plt+0x5b14>
   17a34:	mov	r1, #1
   17a38:	mov	r0, #3
   17a3c:	bl	11bf4 <__fxstat64@plt>
   17a40:	cmp	r0, #0
   17a44:	mvneq	r3, #0
   17a48:	streq	r3, [r5, #1172]	; 0x494
   17a4c:	beq	179e4 <__assert_fail@plt+0x5a9c>
   17a50:	ldr	r3, [r6]
   17a54:	str	r3, [r5, #1172]	; 0x494
   17a58:	b	179dc <__assert_fail@plt+0x5a94>
   17a5c:	andeq	sl, r3, r8, ror r7
   17a60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17a64:	mov	r5, r0
   17a68:	strd	r6, [sp, #8]
   17a6c:	str	r8, [sp, #16]
   17a70:	str	lr, [sp, #20]
   17a74:	ldrb	r3, [r1]
   17a78:	cmp	r3, #114	; 0x72
   17a7c:	beq	17acc <__assert_fail@plt+0x5b84>
   17a80:	cmp	r3, #119	; 0x77
   17a84:	bne	17bd8 <__assert_fail@plt+0x5c90>
   17a88:	cmp	r0, #0
   17a8c:	beq	17aa8 <__assert_fail@plt+0x5b60>
   17a90:	mov	r2, #0
   17a94:	mov	r3, #0
   17a98:	mov	r0, #1
   17a9c:	bl	11b28 <ftruncate64@plt>
   17aa0:	cmp	r0, #0
   17aa4:	bne	17b10 <__assert_fail@plt+0x5bc8>
   17aa8:	movw	r3, #41684	; 0xa2d4
   17aac:	movt	r3, #3
   17ab0:	ldr	r4, [r3]
   17ab4:	mov	r0, r4
   17ab8:	ldrd	r4, [sp]
   17abc:	ldrd	r6, [sp, #8]
   17ac0:	ldr	r8, [sp, #16]
   17ac4:	add	sp, sp, #20
   17ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   17acc:	mov	r4, r1
   17ad0:	movw	r1, #31572	; 0x7b54
   17ad4:	movt	r1, #2
   17ad8:	bl	11a2c <strcmp@plt>
   17adc:	cmp	r0, #0
   17ae0:	bne	17b84 <__assert_fail@plt+0x5c3c>
   17ae4:	movw	r3, #41680	; 0xa2d0
   17ae8:	movt	r3, #3
   17aec:	ldr	r4, [r3]
   17af0:	movw	r2, #41696	; 0xa2e0
   17af4:	movt	r2, #3
   17af8:	mov	r1, #1
   17afc:	strb	r1, [r2, #1311]	; 0x51f
   17b00:	mov	r1, #2
   17b04:	mov	r0, r4
   17b08:	bl	1caac <__assert_fail@plt+0xab64>
   17b0c:	b	17ab4 <__assert_fail@plt+0x5b6c>
   17b10:	movw	r4, #41696	; 0xa2e0
   17b14:	movt	r4, #3
   17b18:	bl	11d74 <__errno_location@plt>
   17b1c:	ldr	r3, [r4, #1172]	; 0x494
   17b20:	mov	r6, r0
   17b24:	ldr	r7, [r0]
   17b28:	cmp	r3, #0
   17b2c:	beq	17bac <__assert_fail@plt+0x5c64>
   17b30:	cmp	r3, #0
   17b34:	bge	17b48 <__assert_fail@plt+0x5c00>
   17b38:	ldr	r3, [r4, #1192]	; 0x4a8
   17b3c:	and	r3, r3, #61440	; 0xf000
   17b40:	cmp	r3, #32768	; 0x8000
   17b44:	bne	17aa8 <__assert_fail@plt+0x5b60>
   17b48:	mov	r2, #5
   17b4c:	movw	r1, #31288	; 0x7a38
   17b50:	movt	r1, #2
   17b54:	mov	r0, #0
   17b58:	bl	11b58 <dcgettext@plt>
   17b5c:	mov	r4, r0
   17b60:	mov	r2, r5
   17b64:	mov	r1, #3
   17b68:	mov	r0, #0
   17b6c:	bl	22950 <__assert_fail@plt+0x10a08>
   17b70:	mov	r3, r0
   17b74:	mov	r2, r4
   17b78:	mov	r1, r7
   17b7c:	mov	r0, #2
   17b80:	bl	11c90 <error@plt>
   17b84:	mov	r0, r5
   17b88:	mov	r1, #524288	; 0x80000
   17b8c:	bl	11c9c <open64@plt>
   17b90:	cmp	r0, #0
   17b94:	movlt	r4, #0
   17b98:	blt	17b00 <__assert_fail@plt+0x5bb8>
   17b9c:	mov	r1, r4
   17ba0:	bl	119fc <fdopen@plt>
   17ba4:	mov	r4, r0
   17ba8:	b	17b00 <__assert_fail@plt+0x5bb8>
   17bac:	ldr	r2, [pc, #64]	; 17bf4 <__assert_fail@plt+0x5cac>
   17bb0:	mov	r1, #1
   17bb4:	mov	r0, #3
   17bb8:	bl	11bf4 <__fxstat64@plt>
   17bbc:	cmp	r0, #0
   17bc0:	mvneq	r3, #0
   17bc4:	streq	r3, [r4, #1172]	; 0x494
   17bc8:	beq	17b38 <__assert_fail@plt+0x5bf0>
   17bcc:	ldr	r3, [r6]
   17bd0:	str	r3, [r4, #1172]	; 0x494
   17bd4:	b	17b30 <__assert_fail@plt+0x5be8>
   17bd8:	movw	r1, #31576	; 0x7b58
   17bdc:	movt	r1, #2
   17be0:	ldr	r3, [pc, #16]	; 17bf8 <__assert_fail@plt+0x5cb0>
   17be4:	movw	r0, #31588	; 0x7b64
   17be8:	movt	r0, #2
   17bec:	movw	r2, #981	; 0x3d5
   17bf0:	bl	11f48 <__assert_fail@plt>
   17bf4:	andeq	sl, r3, r8, ror r7
   17bf8:	andeq	r7, r2, r0, asr r6
   17bfc:	mov	r2, r1
   17c00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17c04:	mov	r1, #0
   17c08:	ldr	r4, [r2, #12]
   17c0c:	mov	r3, r0
   17c10:	ldr	r5, [r0, #12]
   17c14:	strd	r6, [sp, #8]
   17c18:	strd	sl, [sp, #24]
   17c1c:	movw	sl, #41696	; 0xa2e0
   17c20:	movt	sl, #3
   17c24:	strd	r8, [sp, #16]
   17c28:	str	lr, [sp, #32]
   17c2c:	vpush	{d8}
   17c30:	sub	sp, sp, #8384	; 0x20c0
   17c34:	ldr	r7, [r2, #8]
   17c38:	sub	sp, sp, #36	; 0x24
   17c3c:	ldr	r8, [r0, #8]
   17c40:	str	r1, [sp, #8]
   17c44:	ldr	fp, [sl, #1300]	; 0x514
   17c48:	str	r1, [sp, #12]
   17c4c:	movw	r1, #21844	; 0x5554
   17c50:	movt	r1, #21845	; 0x5555
   17c54:	str	r0, [sp, #16]
   17c58:	str	r2, [sp, #20]
   17c5c:	str	r1, [sp, #52]	; 0x34
   17c60:	ldrb	r1, [sl, #1280]	; 0x500
   17c64:	cmp	r8, r5
   17c68:	movcc	r3, r5
   17c6c:	movcs	r3, r8
   17c70:	cmp	r7, r4
   17c74:	sub	r9, r3, r8
   17c78:	ldr	r2, [fp, #20]
   17c7c:	movcs	r4, r7
   17c80:	str	r3, [sp]
   17c84:	sub	r5, r4, r7
   17c88:	ldr	r3, [fp, #16]
   17c8c:	cmp	r1, #0
   17c90:	bne	17d7c <__assert_fail@plt+0x5e34>
   17c94:	ldrb	r1, [fp, #26]
   17c98:	cmp	r1, #0
   17c9c:	bne	17d7c <__assert_fail@plt+0x5e34>
   17ca0:	ldrh	r1, [fp, #28]
   17ca4:	cmp	r1, #0
   17ca8:	bne	17d7c <__assert_fail@plt+0x5e34>
   17cac:	ldrb	r1, [fp, #30]
   17cb0:	cmp	r1, #0
   17cb4:	bne	17d7c <__assert_fail@plt+0x5e34>
   17cb8:	ldrb	r1, [fp, #27]
   17cbc:	cmp	r1, #0
   17cc0:	bne	17d7c <__assert_fail@plt+0x5e34>
   17cc4:	ldrb	r1, [fp, #32]
   17cc8:	cmp	r1, #0
   17ccc:	bne	17d7c <__assert_fail@plt+0x5e34>
   17cd0:	cmp	r3, #0
   17cd4:	beq	18afc <__assert_fail@plt+0x6bb4>
   17cd8:	cmp	r2, #0
   17cdc:	beq	18b80 <__assert_fail@plt+0x6c38>
   17ce0:	ldr	lr, [sp]
   17ce4:	cmp	r8, lr
   17ce8:	bcs	17cfc <__assert_fail@plt+0x5db4>
   17cec:	ldrb	r1, [r8]
   17cf0:	ldrb	r1, [r3, r1]
   17cf4:	cmp	r1, #0
   17cf8:	bne	189a8 <__assert_fail@plt+0x6a60>
   17cfc:	cmp	r7, r4
   17d00:	bcs	17d3c <__assert_fail@plt+0x5df4>
   17d04:	ldrb	r0, [r7]
   17d08:	ldrb	r1, [r3, r0]
   17d0c:	cmp	r1, #0
   17d10:	addne	r1, r7, #1
   17d14:	bne	17d30 <__assert_fail@plt+0x5de8>
   17d18:	b	18984 <__assert_fail@plt+0x6a3c>
   17d1c:	ldrb	r0, [r1]
   17d20:	add	r1, r1, #1
   17d24:	ldrb	ip, [r3, r0]
   17d28:	cmp	ip, #0
   17d2c:	beq	18984 <__assert_fail@plt+0x6a3c>
   17d30:	cmp	r4, r1
   17d34:	mov	r7, r1
   17d38:	bne	17d1c <__assert_fail@plt+0x5dd4>
   17d3c:	ldr	r3, [sp]
   17d40:	cmp	r4, r7
   17d44:	movls	r4, #0
   17d48:	movhi	r4, #1
   17d4c:	cmp	r3, r8
   17d50:	rsbls	r6, r4, #0
   17d54:	rsbhi	r6, r4, #1
   17d58:	cmp	r6, #0
   17d5c:	beq	17e44 <__assert_fail@plt+0x5efc>
   17d60:	mov	r2, r6
   17d64:	ldrb	r3, [fp, #31]
   17d68:	cmp	r3, #0
   17d6c:	beq	18a54 <__assert_fail@plt+0x6b0c>
   17d70:	rsb	r3, r2, #0
   17d74:	mov	r2, r3
   17d78:	b	18a54 <__assert_fail@plt+0x6b0c>
   17d7c:	orrs	r1, r2, r3
   17d80:	str	r1, [sp, #4]
   17d84:	bne	18150 <__assert_fail@plt+0x6208>
   17d88:	ldr	r3, [sp]
   17d8c:	ldrb	r2, [r3]
   17d90:	str	r2, [sp, #8]
   17d94:	ldr	r2, [sp, #4]
   17d98:	strb	r2, [r3]
   17d9c:	ldrb	r3, [r4]
   17da0:	strb	r2, [r4]
   17da4:	str	r3, [sp, #12]
   17da8:	ldrb	r6, [fp, #26]
   17dac:	cmp	r6, #0
   17db0:	beq	17ed0 <__assert_fail@plt+0x5f88>
   17db4:	ldrb	r3, [r8]
   17db8:	add	r3, sl, r3
   17dbc:	ldrb	r3, [r3, #784]	; 0x310
   17dc0:	cmp	r3, #0
   17dc4:	beq	17ddc <__assert_fail@plt+0x5e94>
   17dc8:	ldrb	r3, [r8, #1]!
   17dcc:	add	r3, sl, r3
   17dd0:	ldrb	r3, [r3, #784]	; 0x310
   17dd4:	cmp	r3, #0
   17dd8:	bne	17dc8 <__assert_fail@plt+0x5e80>
   17ddc:	ldrb	r3, [r7]
   17de0:	add	r3, sl, r3
   17de4:	ldrb	r3, [r3, #784]	; 0x310
   17de8:	cmp	r3, #0
   17dec:	beq	17e04 <__assert_fail@plt+0x5ebc>
   17df0:	ldrb	r3, [r7, #1]!
   17df4:	add	r3, sl, r3
   17df8:	ldrb	r3, [r3, #784]	; 0x310
   17dfc:	cmp	r3, #0
   17e00:	bne	17df0 <__assert_fail@plt+0x5ea8>
   17e04:	mov	r1, r7
   17e08:	mov	r0, r8
   17e0c:	ldrb	r2, [sl, #1308]	; 0x51c
   17e10:	ldr	r3, [sl, #1304]	; 0x518
   17e14:	bl	23f14 <__assert_fail@plt+0x11fcc>
   17e18:	mov	r6, r0
   17e1c:	ldr	r3, [sp, #4]
   17e20:	cmp	r3, #0
   17e24:	bne	18090 <__assert_fail@plt+0x6148>
   17e28:	ldr	r3, [sp]
   17e2c:	ldr	r2, [sp, #8]
   17e30:	strb	r2, [r3]
   17e34:	ldr	r3, [sp, #12]
   17e38:	strb	r3, [r4]
   17e3c:	cmp	r6, #0
   17e40:	bne	17d60 <__assert_fail@plt+0x5e18>
   17e44:	ldr	fp, [fp, #36]	; 0x24
   17e48:	cmp	fp, #0
   17e4c:	beq	18a50 <__assert_fail@plt+0x6b08>
   17e50:	ldr	r3, [fp, #8]
   17e54:	ldr	r2, [sp, #16]
   17e58:	ldr	r1, [sp, #20]
   17e5c:	cmn	r3, #1
   17e60:	ldrd	r8, [r2]
   17e64:	ldr	r7, [r1]
   17e68:	ldr	r6, [r1, #4]
   17e6c:	beq	1813c <__assert_fail@plt+0x61f4>
   17e70:	mov	r2, fp
   17e74:	mov	r1, r9
   17e78:	mov	r0, r8
   17e7c:	bl	15d40 <__assert_fail@plt+0x3df8>
   17e80:	mov	r5, r0
   17e84:	mov	r2, fp
   17e88:	mov	r1, r6
   17e8c:	mov	r0, r7
   17e90:	bl	15d40 <__assert_fail@plt+0x3df8>
   17e94:	mov	r4, r0
   17e98:	ldr	r3, [fp]
   17e9c:	cmn	r3, #1
   17ea0:	beq	1809c <__assert_fail@plt+0x6154>
   17ea4:	mov	r1, r9
   17ea8:	mov	r0, r8
   17eac:	mov	r2, fp
   17eb0:	bl	15bac <__assert_fail@plt+0x3c64>
   17eb4:	mov	r8, r0
   17eb8:	mov	r2, fp
   17ebc:	mov	r0, r7
   17ec0:	mov	r1, r6
   17ec4:	bl	15bac <__assert_fail@plt+0x3c64>
   17ec8:	mov	r7, r0
   17ecc:	b	17c60 <__assert_fail@plt+0x5d18>
   17ed0:	ldrb	r3, [fp, #28]
   17ed4:	cmp	r3, #0
   17ed8:	bne	1826c <__assert_fail@plt+0x6324>
   17edc:	ldrb	r3, [fp, #29]
   17ee0:	cmp	r3, #0
   17ee4:	beq	18234 <__assert_fail@plt+0x62ec>
   17ee8:	ldrb	r5, [r8]
   17eec:	add	r3, sl, r5
   17ef0:	ldrb	r3, [r3, #784]	; 0x310
   17ef4:	cmp	r3, #0
   17ef8:	beq	17f10 <__assert_fail@plt+0x5fc8>
   17efc:	ldrb	r5, [r8, #1]!
   17f00:	add	r3, sl, r5
   17f04:	ldrb	r3, [r3, #784]	; 0x310
   17f08:	cmp	r3, #0
   17f0c:	bne	17efc <__assert_fail@plt+0x5fb4>
   17f10:	ldrb	ip, [r7]
   17f14:	add	r3, sl, ip
   17f18:	ldrb	r3, [r3, #784]	; 0x310
   17f1c:	cmp	r3, #0
   17f20:	beq	17f38 <__assert_fail@plt+0x5ff0>
   17f24:	ldrb	ip, [r7, #1]!
   17f28:	add	r3, sl, ip
   17f2c:	ldrb	r3, [r3, #784]	; 0x310
   17f30:	cmp	r3, #0
   17f34:	bne	17f24 <__assert_fail@plt+0x5fdc>
   17f38:	sub	r2, r5, #45	; 0x2d
   17f3c:	ldr	r3, [sl, #1304]	; 0x518
   17f40:	clz	r2, r2
   17f44:	lsr	r2, r2, #5
   17f48:	add	lr, r8, r2
   17f4c:	ldrb	r2, [r8, r2]
   17f50:	add	r0, lr, #1
   17f54:	sub	r1, r2, #48	; 0x30
   17f58:	cmp	r1, #9
   17f5c:	bhi	18a90 <__assert_fail@plt+0x6b48>
   17f60:	mov	r1, #0
   17f64:	b	17f78 <__assert_fail@plt+0x6030>
   17f68:	cmp	r9, #9
   17f6c:	bhi	182dc <__assert_fail@plt+0x6394>
   17f70:	mov	lr, r0
   17f74:	mov	r0, r6
   17f78:	cmp	r1, r2
   17f7c:	add	r6, r0, #1
   17f80:	movcc	r1, r2
   17f84:	ldrb	r2, [lr, #1]
   17f88:	cmp	r2, r3
   17f8c:	sub	r9, r2, #48	; 0x30
   17f90:	bne	17f68 <__assert_fail@plt+0x6020>
   17f94:	ldrb	r2, [lr, #2]
   17f98:	add	r0, lr, #2
   17f9c:	add	r6, lr, #3
   17fa0:	sub	r9, r2, #48	; 0x30
   17fa4:	cmp	r9, #9
   17fa8:	bls	17f70 <__assert_fail@plt+0x6028>
   17fac:	add	r0, lr, #1
   17fb0:	cmp	r1, #48	; 0x30
   17fb4:	bls	1832c <__assert_fail@plt+0x63e4>
   17fb8:	ldrb	r1, [r0]
   17fbc:	movw	r2, #30032	; 0x7550
   17fc0:	movt	r2, #2
   17fc4:	cmp	r5, #45	; 0x2d
   17fc8:	ldrb	r6, [r2, r1]
   17fcc:	rsbeq	r6, r6, #0
   17fd0:	sub	lr, ip, #45	; 0x2d
   17fd4:	clz	lr, lr
   17fd8:	lsr	lr, lr, #5
   17fdc:	ldrb	r2, [r7, lr]
   17fe0:	add	lr, r7, lr
   17fe4:	add	r0, lr, #1
   17fe8:	sub	r1, r2, #48	; 0x30
   17fec:	cmp	r1, #9
   17ff0:	bhi	18a7c <__assert_fail@plt+0x6b34>
   17ff4:	mov	r1, #0
   17ff8:	b	1800c <__assert_fail@plt+0x60c4>
   17ffc:	cmp	r9, #9
   18000:	bhi	18334 <__assert_fail@plt+0x63ec>
   18004:	mov	lr, r0
   18008:	mov	r0, r5
   1800c:	cmp	r1, r2
   18010:	add	r5, r0, #1
   18014:	movcc	r1, r2
   18018:	ldrb	r2, [lr, #1]
   1801c:	cmp	r3, r2
   18020:	sub	r9, r2, #48	; 0x30
   18024:	bne	17ffc <__assert_fail@plt+0x60b4>
   18028:	ldrb	r2, [lr, #2]
   1802c:	add	r0, lr, #2
   18030:	add	r5, lr, #3
   18034:	sub	r9, r2, #48	; 0x30
   18038:	cmp	r9, #9
   1803c:	bls	18004 <__assert_fail@plt+0x60bc>
   18040:	add	r0, lr, #1
   18044:	cmp	r1, #48	; 0x30
   18048:	bls	18068 <__assert_fail@plt+0x6120>
   1804c:	ldrb	r1, [r0]
   18050:	movw	r2, #30032	; 0x7550
   18054:	movt	r2, #2
   18058:	cmp	ip, #45	; 0x2d
   1805c:	ldrb	r2, [r2, r1]
   18060:	subne	r6, r6, r2
   18064:	addeq	r6, r6, r2
   18068:	cmp	r6, #0
   1806c:	bne	17e1c <__assert_fail@plt+0x5ed4>
   18070:	mov	r1, r7
   18074:	ldrb	r2, [sl, #1308]	; 0x51c
   18078:	mov	r0, r8
   1807c:	bl	23f14 <__assert_fail@plt+0x11fcc>
   18080:	ldr	r3, [sp, #4]
   18084:	mov	r6, r0
   18088:	cmp	r3, #0
   1808c:	beq	17e28 <__assert_fail@plt+0x5ee0>
   18090:	ldr	r0, [sp, #28]
   18094:	bl	1d29c <__assert_fail@plt+0xb354>
   18098:	b	17e3c <__assert_fail@plt+0x5ef4>
   1809c:	ldrb	r3, [fp, #24]
   180a0:	cmp	r3, #0
   180a4:	beq	17c60 <__assert_fail@plt+0x5d18>
   180a8:	cmp	r5, r8
   180ac:	bls	180f0 <__assert_fail@plt+0x61a8>
   180b0:	ldrb	r3, [r8]
   180b4:	add	r3, sl, r3
   180b8:	ldrb	r3, [r3, #784]	; 0x310
   180bc:	cmp	r3, #0
   180c0:	beq	180f0 <__assert_fail@plt+0x61a8>
   180c4:	add	r3, r8, #1
   180c8:	b	180e4 <__assert_fail@plt+0x619c>
   180cc:	ldrb	r2, [r3]
   180d0:	add	r3, r3, #1
   180d4:	add	r2, sl, r2
   180d8:	ldrb	r2, [r2, #784]	; 0x310
   180dc:	cmp	r2, #0
   180e0:	beq	180f0 <__assert_fail@plt+0x61a8>
   180e4:	cmp	r5, r3
   180e8:	mov	r8, r3
   180ec:	bne	180cc <__assert_fail@plt+0x6184>
   180f0:	cmp	r4, r7
   180f4:	bls	17c60 <__assert_fail@plt+0x5d18>
   180f8:	ldrb	r3, [r7]
   180fc:	add	r3, sl, r3
   18100:	ldrb	r3, [r3, #784]	; 0x310
   18104:	cmp	r3, #0
   18108:	addne	r3, r7, #1
   1810c:	bne	1812c <__assert_fail@plt+0x61e4>
   18110:	b	17c60 <__assert_fail@plt+0x5d18>
   18114:	ldrb	r2, [r3]
   18118:	add	r3, r3, #1
   1811c:	add	r2, sl, r2
   18120:	ldrb	r2, [r2, #784]	; 0x310
   18124:	cmp	r2, #0
   18128:	beq	17c60 <__assert_fail@plt+0x5d18>
   1812c:	cmp	r4, r3
   18130:	mov	r7, r3
   18134:	bne	18114 <__assert_fail@plt+0x61cc>
   18138:	b	17c60 <__assert_fail@plt+0x5d18>
   1813c:	sub	r5, r9, #1
   18140:	sub	r4, r6, #1
   18144:	add	r5, r8, r5
   18148:	add	r4, r7, r4
   1814c:	b	17e98 <__assert_fail@plt+0x5f50>
   18150:	add	r0, r9, r5
   18154:	add	r0, r0, #2
   18158:	cmp	r0, #4000	; 0xfa0
   1815c:	movls	r1, #0
   18160:	addls	ip, sp, #416	; 0x1a0
   18164:	strls	r1, [sp, #28]
   18168:	bhi	18380 <__assert_fail@plt+0x6438>
   1816c:	add	r0, r9, #1
   18170:	cmp	r9, #0
   18174:	add	r0, ip, r0
   18178:	beq	183ac <__assert_fail@plt+0x6464>
   1817c:	cmp	r3, #0
   18180:	sub	r8, r8, #1
   18184:	beq	18520 <__assert_fail@plt+0x65d8>
   18188:	cmp	r2, #0
   1818c:	movne	r1, #0
   18190:	addne	r6, r8, r9
   18194:	beq	18598 <__assert_fail@plt+0x6650>
   18198:	ldrb	lr, [r8, #1]!
   1819c:	ldrb	r4, [r3, lr]
   181a0:	cmp	r4, #0
   181a4:	bne	181b4 <__assert_fail@plt+0x626c>
   181a8:	ldrb	lr, [r2, lr]
   181ac:	strb	lr, [ip, r1]
   181b0:	add	r1, r1, #1
   181b4:	cmp	r6, r8
   181b8:	bne	18198 <__assert_fail@plt+0x6250>
   181bc:	add	lr, ip, r1
   181c0:	mov	r4, lr
   181c4:	str	lr, [sp]
   181c8:	mov	lr, #0
   181cc:	cmp	r5, lr
   181d0:	strb	lr, [r4]
   181d4:	beq	183c8 <__assert_fail@plt+0x6480>
   181d8:	cmp	r3, lr
   181dc:	sub	r7, r7, #1
   181e0:	beq	18574 <__assert_fail@plt+0x662c>
   181e4:	cmp	r2, lr
   181e8:	addne	r4, r7, r5
   181ec:	movne	r5, lr
   181f0:	beq	18548 <__assert_fail@plt+0x6600>
   181f4:	ldrb	lr, [r7, #1]!
   181f8:	ldrb	r6, [r3, lr]
   181fc:	cmp	r6, #0
   18200:	bne	18210 <__assert_fail@plt+0x62c8>
   18204:	ldrb	lr, [r2, lr]
   18208:	strb	lr, [r0, r5]
   1820c:	add	r5, r5, #1
   18210:	cmp	r4, r7
   18214:	bne	181f4 <__assert_fail@plt+0x62ac>
   18218:	add	r4, r0, r5
   1821c:	mov	r3, #0
   18220:	mov	r9, r1
   18224:	mov	r7, r0
   18228:	mov	r8, ip
   1822c:	strb	r3, [r4]
   18230:	b	17da8 <__assert_fail@plt+0x5e60>
   18234:	ldrb	r6, [fp, #30]
   18238:	cmp	r6, #0
   1823c:	bne	183d0 <__assert_fail@plt+0x6488>
   18240:	ldrb	r3, [fp, #27]
   18244:	cmp	r3, #0
   18248:	bne	18618 <__assert_fail@plt+0x66d0>
   1824c:	ldrb	r3, [fp, #32]
   18250:	cmp	r3, #0
   18254:	beq	18600 <__assert_fail@plt+0x66b8>
   18258:	mov	r1, r7
   1825c:	mov	r0, r8
   18260:	bl	1cc10 <__assert_fail@plt+0xacc8>
   18264:	mov	r6, r0
   18268:	b	17e1c <__assert_fail@plt+0x5ed4>
   1826c:	mov	r0, r8
   18270:	add	r1, sp, #68	; 0x44
   18274:	bl	11b1c <strtold@plt>
   18278:	add	r1, sp, #72	; 0x48
   1827c:	mov	r0, r7
   18280:	vmov.f64	d8, d0
   18284:	bl	11b1c <strtold@plt>
   18288:	ldr	r3, [sp, #68]	; 0x44
   1828c:	cmp	r8, r3
   18290:	beq	188ac <__assert_fail@plt+0x6964>
   18294:	ldr	r3, [sp, #72]	; 0x48
   18298:	cmp	r7, r3
   1829c:	beq	182d4 <__assert_fail@plt+0x638c>
   182a0:	vcmpe.f64	d8, d0
   182a4:	vmrs	APSR_nzcv, fpscr
   182a8:	bmi	18c60 <__assert_fail@plt+0x6d18>
   182ac:	bgt	182d4 <__assert_fail@plt+0x638c>
   182b0:	vcmp.f64	d8, d0
   182b4:	vmrs	APSR_nzcv, fpscr
   182b8:	beq	17e1c <__assert_fail@plt+0x5ed4>
   182bc:	vcmp.f64	d0, d0
   182c0:	vmrs	APSR_nzcv, fpscr
   182c4:	beq	18c60 <__assert_fail@plt+0x6d18>
   182c8:	vcmp.f64	d8, d8
   182cc:	vmrs	APSR_nzcv, fpscr
   182d0:	bne	18b40 <__assert_fail@plt+0x6bf8>
   182d4:	mov	r6, #1
   182d8:	b	17e1c <__assert_fail@plt+0x5ed4>
   182dc:	ldrb	lr, [sl, #1308]	; 0x51c
   182e0:	cmp	lr, r2
   182e4:	bne	17fb0 <__assert_fail@plt+0x6068>
   182e8:	mov	lr, r0
   182ec:	ldrb	r2, [lr, #1]
   182f0:	add	r0, lr, #2
   182f4:	sub	r6, r2, #48	; 0x30
   182f8:	cmp	r6, #9
   182fc:	bls	18308 <__assert_fail@plt+0x63c0>
   18300:	b	17fac <__assert_fail@plt+0x6064>
   18304:	mov	r0, lr
   18308:	cmp	r1, r2
   1830c:	mov	lr, r0
   18310:	movcc	r1, r2
   18314:	ldrb	r2, [lr], #1
   18318:	sub	r6, r2, #48	; 0x30
   1831c:	cmp	r6, #9
   18320:	bls	18304 <__assert_fail@plt+0x63bc>
   18324:	cmp	r1, #48	; 0x30
   18328:	bhi	17fb8 <__assert_fail@plt+0x6070>
   1832c:	mov	r6, #0
   18330:	b	17fd0 <__assert_fail@plt+0x6088>
   18334:	ldrb	lr, [sl, #1308]	; 0x51c
   18338:	cmp	lr, r2
   1833c:	bne	18044 <__assert_fail@plt+0x60fc>
   18340:	mov	lr, r0
   18344:	ldrb	r2, [lr, #1]
   18348:	add	r0, lr, #2
   1834c:	sub	r5, r2, #48	; 0x30
   18350:	cmp	r5, #9
   18354:	bls	18360 <__assert_fail@plt+0x6418>
   18358:	b	18040 <__assert_fail@plt+0x60f8>
   1835c:	mov	r0, lr
   18360:	cmp	r1, r2
   18364:	mov	lr, r0
   18368:	movcc	r1, r2
   1836c:	ldrb	r2, [lr], #1
   18370:	sub	r5, r2, #48	; 0x30
   18374:	cmp	r5, #9
   18378:	bls	1835c <__assert_fail@plt+0x6414>
   1837c:	b	18044 <__assert_fail@plt+0x60fc>
   18380:	str	r2, [sp]
   18384:	str	r3, [sp, #24]
   18388:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   1838c:	mov	ip, r0
   18390:	cmp	r9, #0
   18394:	str	r0, [sp, #28]
   18398:	add	r0, r9, #1
   1839c:	ldr	r2, [sp]
   183a0:	add	r0, ip, r0
   183a4:	ldr	r3, [sp, #24]
   183a8:	bne	1817c <__assert_fail@plt+0x6234>
   183ac:	mov	lr, #0
   183b0:	mov	r4, ip
   183b4:	str	ip, [sp]
   183b8:	cmp	r5, lr
   183bc:	mov	r1, r9
   183c0:	strb	lr, [r4]
   183c4:	bne	181d8 <__assert_fail@plt+0x6290>
   183c8:	mov	r4, r0
   183cc:	b	1821c <__assert_fail@plt+0x62d4>
   183d0:	ldrb	r3, [r8]
   183d4:	add	r2, sl, r3
   183d8:	ldrb	r2, [r2, #784]	; 0x310
   183dc:	cmp	r2, #0
   183e0:	beq	183f8 <__assert_fail@plt+0x64b0>
   183e4:	ldrb	r3, [r8, #1]!
   183e8:	add	r2, sl, r3
   183ec:	ldrb	r2, [r2, #784]	; 0x310
   183f0:	cmp	r2, #0
   183f4:	bne	183e4 <__assert_fail@plt+0x649c>
   183f8:	add	r3, sl, r3
   183fc:	movw	r9, #41444	; 0xa1e4
   18400:	movt	r9, #3
   18404:	mov	r5, #12
   18408:	mov	r6, #0
   1840c:	str	r3, [sp, #24]
   18410:	add	ip, r6, r5
   18414:	lsr	ip, ip, #1
   18418:	lsl	lr, ip, #3
   1841c:	add	r3, r9, lr
   18420:	ldr	r1, [r3, #12]
   18424:	ldrb	r3, [r1]
   18428:	cmp	r3, #0
   1842c:	beq	18470 <__assert_fail@plt+0x6528>
   18430:	ldr	r2, [sp, #24]
   18434:	ldrb	r2, [r2, #512]	; 0x200
   18438:	cmp	r2, r3
   1843c:	bcc	185cc <__assert_fail@plt+0x6684>
   18440:	movls	r0, r8
   18444:	bls	18464 <__assert_fail@plt+0x651c>
   18448:	b	185f8 <__assert_fail@plt+0x66b0>
   1844c:	ldrb	r3, [r0, #1]!
   18450:	add	r3, sl, r3
   18454:	ldrb	r3, [r3, #512]	; 0x200
   18458:	cmp	r2, r3
   1845c:	bhi	185cc <__assert_fail@plt+0x6684>
   18460:	bcc	185f8 <__assert_fail@plt+0x66b0>
   18464:	ldrb	r2, [r1, #1]!
   18468:	cmp	r2, #0
   1846c:	bne	1844c <__assert_fail@plt+0x6504>
   18470:	add	lr, r9, lr
   18474:	ldr	r6, [lr, #16]
   18478:	ldrb	r3, [r7]
   1847c:	add	r2, sl, r3
   18480:	ldrb	r2, [r2, #784]	; 0x310
   18484:	cmp	r2, #0
   18488:	beq	184a0 <__assert_fail@plt+0x6558>
   1848c:	ldrb	r3, [r7, #1]!
   18490:	add	r2, sl, r3
   18494:	ldrb	r2, [r2, #784]	; 0x310
   18498:	cmp	r2, #0
   1849c:	bne	1848c <__assert_fail@plt+0x6544>
   184a0:	add	r3, sl, r3
   184a4:	mov	r5, #12
   184a8:	mov	r8, #0
   184ac:	str	r3, [sp, #24]
   184b0:	add	ip, r8, r5
   184b4:	lsr	ip, ip, #1
   184b8:	lsl	lr, ip, #3
   184bc:	add	r3, r9, lr
   184c0:	ldr	r1, [r3, #12]
   184c4:	ldrb	r3, [r1]
   184c8:	cmp	r3, #0
   184cc:	beq	18510 <__assert_fail@plt+0x65c8>
   184d0:	ldr	r2, [sp, #24]
   184d4:	ldrb	r2, [r2, #512]	; 0x200
   184d8:	cmp	r3, r2
   184dc:	bhi	185e0 <__assert_fail@plt+0x6698>
   184e0:	movcs	r0, r7
   184e4:	bcs	18504 <__assert_fail@plt+0x65bc>
   184e8:	b	185f0 <__assert_fail@plt+0x66a8>
   184ec:	ldrb	r3, [r0, #1]!
   184f0:	add	r3, sl, r3
   184f4:	ldrb	r3, [r3, #512]	; 0x200
   184f8:	cmp	r2, r3
   184fc:	bhi	185e0 <__assert_fail@plt+0x6698>
   18500:	bcc	185f0 <__assert_fail@plt+0x66a8>
   18504:	ldrb	r2, [r1, #1]!
   18508:	cmp	r2, #0
   1850c:	bne	184ec <__assert_fail@plt+0x65a4>
   18510:	add	lr, r9, lr
   18514:	ldr	r3, [lr, #16]
   18518:	sub	r6, r6, r3
   1851c:	b	17e1c <__assert_fail@plt+0x5ed4>
   18520:	ldr	r6, [sp, #4]
   18524:	sub	r1, ip, #1
   18528:	add	r4, r8, r9
   1852c:	ldrb	lr, [r8, #1]!
   18530:	ldrb	lr, [r6, lr]
   18534:	cmp	r4, r8
   18538:	strb	lr, [r1, #1]!
   1853c:	bne	1852c <__assert_fail@plt+0x65e4>
   18540:	mov	r1, r9
   18544:	b	181bc <__assert_fail@plt+0x6274>
   18548:	ldr	r4, [sp, #4]
   1854c:	add	lr, r7, r5
   18550:	mov	r5, r2
   18554:	ldrb	r3, [r7, #1]!
   18558:	ldrb	r2, [r4, r3]
   1855c:	cmp	r2, #0
   18560:	strbeq	r3, [r0, r5]
   18564:	addeq	r5, r5, #1
   18568:	cmp	lr, r7
   1856c:	bne	18554 <__assert_fail@plt+0x660c>
   18570:	b	18218 <__assert_fail@plt+0x62d0>
   18574:	ldr	lr, [sp, #4]
   18578:	add	r9, ip, r9
   1857c:	add	r2, r7, r5
   18580:	ldrb	r3, [r7, #1]!
   18584:	ldrb	r3, [lr, r3]
   18588:	cmp	r2, r7
   1858c:	strb	r3, [r9, #1]!
   18590:	bne	18580 <__assert_fail@plt+0x6638>
   18594:	b	18218 <__assert_fail@plt+0x62d0>
   18598:	add	r6, r8, r9
   1859c:	str	r9, [sp]
   185a0:	mov	r1, r2
   185a4:	ldr	r9, [sp, #4]
   185a8:	ldrb	lr, [r8, #1]!
   185ac:	ldrb	r4, [r9, lr]
   185b0:	cmp	r4, #0
   185b4:	strbeq	lr, [ip, r1]
   185b8:	addeq	r1, r1, #1
   185bc:	cmp	r6, r8
   185c0:	bne	185a8 <__assert_fail@plt+0x6660>
   185c4:	ldr	r9, [sp]
   185c8:	b	181bc <__assert_fail@plt+0x6274>
   185cc:	mov	r5, ip
   185d0:	cmp	r6, r5
   185d4:	bcc	18410 <__assert_fail@plt+0x64c8>
   185d8:	mov	r6, #0
   185dc:	b	18478 <__assert_fail@plt+0x6530>
   185e0:	mov	r5, ip
   185e4:	cmp	r8, r5
   185e8:	bcc	184b0 <__assert_fail@plt+0x6568>
   185ec:	b	17e1c <__assert_fail@plt+0x5ed4>
   185f0:	add	r8, ip, #1
   185f4:	b	185e4 <__assert_fail@plt+0x669c>
   185f8:	add	r6, ip, #1
   185fc:	b	185d0 <__assert_fail@plt+0x6688>
   18600:	cmp	r9, #0
   18604:	bne	188bc <__assert_fail@plt+0x6974>
   18608:	adds	r5, r5, #0
   1860c:	movne	r5, #1
   18610:	rsb	r6, r5, #0
   18614:	b	17e1c <__assert_fail@plt+0x5ed4>
   18618:	add	r3, sp, #260	; 0x104
   1861c:	mov	r2, #156	; 0x9c
   18620:	ldr	r1, [pc, #1684]	; 18cbc <__assert_fail@plt+0x6d74>
   18624:	mov	r0, r3
   18628:	bl	11ac8 <memcpy@plt>
   1862c:	mov	r1, r0
   18630:	mov	r2, #156	; 0x9c
   18634:	add	r0, sp, #104	; 0x68
   18638:	bl	11ac8 <memcpy@plt>
   1863c:	ldrb	r3, [sl, #1280]	; 0x500
   18640:	cmp	r3, #0
   18644:	beq	188e0 <__assert_fail@plt+0x6998>
   18648:	add	r5, r9, r5
   1864c:	add	r3, sp, #4416	; 0x1140
   18650:	str	r6, [sp, #24]
   18654:	add	r5, r5, r5, lsl #1
   18658:	str	r3, [sp, #32]
   1865c:	mov	r3, #4000	; 0xfa0
   18660:	add	r2, r5, #2
   18664:	str	sl, [sp, #60]	; 0x3c
   18668:	mov	sl, r3
   1866c:	str	r2, [sp, #40]	; 0x28
   18670:	add	r2, sp, #160	; 0xa0
   18674:	str	r2, [sp, #48]	; 0x30
   18678:	add	r2, sp, #104	; 0x68
   1867c:	str	fp, [sp, #56]	; 0x38
   18680:	str	r2, [sp, #44]	; 0x2c
   18684:	ldr	r3, [sp, #40]	; 0x28
   18688:	cmp	r3, sl
   1868c:	bhi	18750 <__assert_fail@plt+0x6808>
   18690:	ldr	r3, [sp]
   18694:	cmp	r8, r3
   18698:	bcc	18790 <__assert_fail@plt+0x6848>
   1869c:	cmp	r7, r4
   186a0:	bcc	189d0 <__assert_fail@plt+0x6a88>
   186a4:	ldr	r3, [sp, #32]
   186a8:	mov	r9, #0
   186ac:	mov	r5, r9
   186b0:	str	r3, [sp, #36]	; 0x24
   186b4:	cmp	r7, r4
   186b8:	bcs	18cac <__assert_fail@plt+0x6d64>
   186bc:	mov	r0, r7
   186c0:	bl	11d50 <strlen@plt>
   186c4:	add	r0, r0, #1
   186c8:	add	r7, r7, r0
   186cc:	ldr	r3, [sp]
   186d0:	cmp	r8, r3
   186d4:	cmpcs	r7, r4
   186d8:	bcs	18cac <__assert_fail@plt+0x6d64>
   186dc:	mov	r1, r9
   186e0:	ldr	r0, [sp, #32]
   186e4:	ldr	r2, [sp, #44]	; 0x2c
   186e8:	bl	1c7b4 <__assert_fail@plt+0xa86c>
   186ec:	ldr	fp, [sp, #36]	; 0x24
   186f0:	mov	r1, r5
   186f4:	ldr	r3, [sp, #48]	; 0x30
   186f8:	mov	r0, fp
   186fc:	add	r2, r3, #100	; 0x64
   18700:	bl	1c7b4 <__assert_fail@plt+0xa86c>
   18704:	cmp	r6, #0
   18708:	bne	18684 <__assert_fail@plt+0x673c>
   1870c:	cmp	r9, r5
   18710:	mov	r1, fp
   18714:	ldr	r0, [sp, #32]
   18718:	movcc	r2, r9
   1871c:	movcs	r2, r5
   18720:	bl	11b40 <memcmp@plt>
   18724:	subs	r6, r0, #0
   18728:	bne	18684 <__assert_fail@plt+0x673c>
   1872c:	ldr	r3, [sp, #40]	; 0x28
   18730:	cmp	r9, r5
   18734:	movcs	r6, #0
   18738:	movcc	r6, #1
   1873c:	cmp	r9, r5
   18740:	rsbls	r6, r6, #0
   18744:	rsbhi	r6, r6, #1
   18748:	cmp	r3, sl
   1874c:	bls	18690 <__assert_fail@plt+0x6748>
   18750:	add	sl, sl, sl, lsl #1
   18754:	ldr	r0, [sp, #24]
   18758:	lsr	sl, sl, #1
   1875c:	cmp	r3, sl
   18760:	movcs	sl, r3
   18764:	bl	1d29c <__assert_fail@plt+0xb354>
   18768:	mov	r0, sl
   1876c:	bl	262d0 <__assert_fail@plt+0x14388>
   18770:	subs	r3, r0, #0
   18774:	moveq	sl, #4000	; 0xfa0
   18778:	str	r3, [sp, #24]
   1877c:	addeq	r3, sp, #4416	; 0x1140
   18780:	str	r3, [sp, #32]
   18784:	ldr	r3, [sp]
   18788:	cmp	r8, r3
   1878c:	bcs	1869c <__assert_fail@plt+0x6754>
   18790:	mov	r2, sl
   18794:	mov	r1, r8
   18798:	ldr	r0, [sp, #32]
   1879c:	bl	15910 <__assert_fail@plt+0x39c8>
   187a0:	cmp	r7, r4
   187a4:	add	r9, r0, #1
   187a8:	bcs	18aa8 <__assert_fail@plt+0x6b60>
   187ac:	cmp	sl, r9
   187b0:	ldrcs	r3, [sp, #32]
   187b4:	subcs	r2, sl, r9
   187b8:	addcs	r0, r3, r9
   187bc:	bcs	187c8 <__assert_fail@plt+0x6880>
   187c0:	mov	r0, #0
   187c4:	mov	r2, r0
   187c8:	mov	r1, r7
   187cc:	bl	15910 <__assert_fail@plt+0x39c8>
   187d0:	add	r5, r0, #1
   187d4:	cmp	sl, r9
   187d8:	add	fp, r5, r9
   187dc:	bcs	18ab8 <__assert_fail@plt+0x6b70>
   187e0:	ldr	r0, [sp, #24]
   187e4:	ldr	r3, [sp, #52]	; 0x34
   187e8:	cmp	fp, r3
   187ec:	addls	r3, fp, fp, lsl #1
   187f0:	lsrls	fp, r3, #1
   187f4:	bl	1d29c <__assert_fail@plt+0xb354>
   187f8:	mov	r0, fp
   187fc:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   18800:	ldr	r3, [sp]
   18804:	str	r0, [sp, #24]
   18808:	cmp	r8, r3
   1880c:	bcc	189e0 <__assert_fail@plt+0x6a98>
   18810:	add	r3, r0, r9
   18814:	cmp	r7, r4
   18818:	str	r3, [sp, #36]	; 0x24
   1881c:	bcc	18a30 <__assert_fail@plt+0x6ae8>
   18820:	ldr	r3, [sp]
   18824:	cmp	r8, r3
   18828:	bcc	189b0 <__assert_fail@plt+0x6a68>
   1882c:	ldr	r8, [sp, #24]
   18830:	ldr	fp, [sp, #56]	; 0x38
   18834:	ldr	sl, [sp, #60]	; 0x3c
   18838:	mov	r1, r9
   1883c:	mov	r0, r8
   18840:	ldr	r7, [sp, #44]	; 0x2c
   18844:	ldr	r3, [sp, #48]	; 0x30
   18848:	mov	r2, r7
   1884c:	add	r3, r3, #100	; 0x64
   18850:	str	r3, [sp, #32]
   18854:	bl	1c7b4 <__assert_fail@plt+0xa86c>
   18858:	mov	r0, r7
   1885c:	add	r1, sp, #72	; 0x48
   18860:	bl	1c6e0 <__assert_fail@plt+0xa798>
   18864:	add	r7, sp, #88	; 0x58
   18868:	mov	r1, r5
   1886c:	ldr	r2, [sp, #32]
   18870:	ldr	r0, [sp, #36]	; 0x24
   18874:	bl	1c7b4 <__assert_fail@plt+0xa86c>
   18878:	mov	r1, r7
   1887c:	ldr	r0, [sp, #32]
   18880:	bl	1c6e0 <__assert_fail@plt+0xa798>
   18884:	mov	r1, r7
   18888:	add	r0, sp, #72	; 0x48
   1888c:	mov	r2, #16
   18890:	bl	11b40 <memcmp@plt>
   18894:	cmp	r0, #0
   18898:	movne	r6, r0
   1889c:	beq	18b14 <__assert_fail@plt+0x6bcc>
   188a0:	ldr	r0, [sp, #24]
   188a4:	bl	1d29c <__assert_fail@plt+0xb354>
   188a8:	b	17e1c <__assert_fail@plt+0x5ed4>
   188ac:	ldr	r6, [sp, #72]	; 0x48
   188b0:	subs	r6, r6, r7
   188b4:	mvnne	r6, #0
   188b8:	b	17e1c <__assert_fail@plt+0x5ed4>
   188bc:	cmp	r5, #0
   188c0:	beq	182d4 <__assert_fail@plt+0x638c>
   188c4:	add	r3, r5, #1
   188c8:	mov	r2, r7
   188cc:	add	r1, r9, #1
   188d0:	mov	r0, r8
   188d4:	bl	2534c <__assert_fail@plt+0x13404>
   188d8:	mov	r6, r0
   188dc:	b	17e1c <__assert_fail@plt+0x5ed4>
   188e0:	add	r6, sp, #104	; 0x68
   188e4:	str	r3, [sp, #32]
   188e8:	add	r3, sp, #260	; 0x104
   188ec:	mov	r2, r6
   188f0:	mov	r1, r9
   188f4:	mov	r0, r8
   188f8:	str	r3, [sp, #24]
   188fc:	bl	1c7b4 <__assert_fail@plt+0xa86c>
   18900:	mov	r0, r6
   18904:	add	r1, sp, #72	; 0x48
   18908:	bl	1c6e0 <__assert_fail@plt+0xa798>
   1890c:	add	r6, sp, #88	; 0x58
   18910:	mov	r1, r5
   18914:	ldr	r2, [sp, #24]
   18918:	mov	r0, r7
   1891c:	bl	1c7b4 <__assert_fail@plt+0xa86c>
   18920:	mov	r1, r6
   18924:	ldr	r0, [sp, #24]
   18928:	bl	1c6e0 <__assert_fail@plt+0xa798>
   1892c:	mov	r1, r6
   18930:	add	r0, sp, #72	; 0x48
   18934:	mov	r2, #16
   18938:	bl	11b40 <memcmp@plt>
   1893c:	subs	r6, r0, #0
   18940:	streq	r6, [sp, #24]
   18944:	bne	18b2c <__assert_fail@plt+0x6be4>
   18948:	cmp	r9, r5
   1894c:	mov	r1, r7
   18950:	movcc	r2, r9
   18954:	movcs	r2, r5
   18958:	mov	r0, r8
   1895c:	bl	11b40 <memcmp@plt>
   18960:	subs	r6, r0, #0
   18964:	bne	188a0 <__assert_fail@plt+0x6958>
   18968:	cmp	r9, r5
   1896c:	movcs	r6, #0
   18970:	movcc	r6, #1
   18974:	cmp	r9, r5
   18978:	rsbls	r6, r6, #0
   1897c:	rsbhi	r6, r6, #1
   18980:	b	188a0 <__assert_fail@plt+0x6958>
   18984:	cmp	r4, r7
   18988:	cmphi	lr, r8
   1898c:	bls	17d3c <__assert_fail@plt+0x5df4>
   18990:	ldrb	r1, [r8]
   18994:	ldrb	r0, [r2, r0]
   18998:	ldrb	r1, [r2, r1]
   1899c:	subs	r1, r1, r0
   189a0:	bne	18af4 <__assert_fail@plt+0x6bac>
   189a4:	add	r7, r7, #1
   189a8:	add	r8, r8, #1
   189ac:	b	17ce4 <__assert_fail@plt+0x5d9c>
   189b0:	mov	r0, r8
   189b4:	mov	sl, fp
   189b8:	bl	11d50 <strlen@plt>
   189bc:	ldr	r3, [sp, #24]
   189c0:	add	r0, r0, #1
   189c4:	add	r8, r8, r0
   189c8:	str	r3, [sp, #32]
   189cc:	b	186cc <__assert_fail@plt+0x6784>
   189d0:	mov	r2, sl
   189d4:	mov	r9, #0
   189d8:	ldr	r0, [sp, #32]
   189dc:	b	187c8 <__assert_fail@plt+0x6880>
   189e0:	mov	r2, r9
   189e4:	mov	r1, r8
   189e8:	bl	11d68 <strxfrm@plt>
   189ec:	ldr	r3, [sp, #24]
   189f0:	cmp	r7, r4
   189f4:	add	r3, r3, r9
   189f8:	str	r3, [sp, #36]	; 0x24
   189fc:	bcs	18820 <__assert_fail@plt+0x68d8>
   18a00:	mov	r0, r3
   18a04:	mov	r2, r5
   18a08:	mov	r1, r7
   18a0c:	mov	sl, fp
   18a10:	bl	11d68 <strxfrm@plt>
   18a14:	ldr	r3, [sp, #24]
   18a18:	mov	r0, r8
   18a1c:	str	r3, [sp, #32]
   18a20:	bl	11d50 <strlen@plt>
   18a24:	add	r0, r0, #1
   18a28:	add	r8, r8, r0
   18a2c:	b	186bc <__assert_fail@plt+0x6774>
   18a30:	mov	r0, r3
   18a34:	mov	r2, r5
   18a38:	mov	r1, r7
   18a3c:	mov	sl, fp
   18a40:	bl	11d68 <strxfrm@plt>
   18a44:	ldr	r3, [sp, #24]
   18a48:	str	r3, [sp, #32]
   18a4c:	b	186bc <__assert_fail@plt+0x6774>
   18a50:	mov	r2, r6
   18a54:	mov	r0, r2
   18a58:	add	sp, sp, #8384	; 0x20c0
   18a5c:	add	sp, sp, #36	; 0x24
   18a60:	vpop	{d8}
   18a64:	ldrd	r4, [sp]
   18a68:	ldrd	r6, [sp, #8]
   18a6c:	ldrd	r8, [sp, #16]
   18a70:	ldrd	sl, [sp, #24]
   18a74:	add	sp, sp, #32
   18a78:	pop	{pc}		; (ldr pc, [sp], #4)
   18a7c:	ldrb	r1, [sl, #1308]	; 0x51c
   18a80:	cmp	r1, r2
   18a84:	moveq	r1, #0
   18a88:	bne	18068 <__assert_fail@plt+0x6120>
   18a8c:	b	18344 <__assert_fail@plt+0x63fc>
   18a90:	ldrb	r1, [sl, #1308]	; 0x51c
   18a94:	cmp	r1, r2
   18a98:	moveq	r1, #0
   18a9c:	beq	182ec <__assert_fail@plt+0x63a4>
   18aa0:	mov	r6, #0
   18aa4:	b	17fd0 <__assert_fail@plt+0x6088>
   18aa8:	cmp	sl, r9
   18aac:	mov	fp, r9
   18ab0:	mov	r5, #0
   18ab4:	bcc	187e0 <__assert_fail@plt+0x6898>
   18ab8:	cmp	sl, fp
   18abc:	bcc	187e0 <__assert_fail@plt+0x6898>
   18ac0:	ldr	r3, [sp]
   18ac4:	cmp	r8, r3
   18ac8:	ldr	r3, [sp, #32]
   18acc:	add	r3, r3, r9
   18ad0:	str	r3, [sp, #36]	; 0x24
   18ad4:	bcs	186b4 <__assert_fail@plt+0x676c>
   18ad8:	mov	r0, r8
   18adc:	bl	11d50 <strlen@plt>
   18ae0:	add	r0, r0, #1
   18ae4:	cmp	r7, r4
   18ae8:	add	r8, r8, r0
   18aec:	bcs	186cc <__assert_fail@plt+0x6784>
   18af0:	b	186bc <__assert_fail@plt+0x6774>
   18af4:	mov	r2, r1
   18af8:	b	17d64 <__assert_fail@plt+0x5e1c>
   18afc:	cmp	r9, #0
   18b00:	bne	18c1c <__assert_fail@plt+0x6cd4>
   18b04:	adds	r5, r5, #0
   18b08:	movne	r5, #1
   18b0c:	rsb	r6, r5, #0
   18b10:	b	17e3c <__assert_fail@plt+0x5ef4>
   18b14:	cmp	r6, #0
   18b18:	ldreq	r7, [sp, #36]	; 0x24
   18b1c:	beq	18948 <__assert_fail@plt+0x6a00>
   18b20:	ldr	r0, [sp, #24]
   18b24:	bl	1d29c <__assert_fail@plt+0xb354>
   18b28:	b	17e1c <__assert_fail@plt+0x5ed4>
   18b2c:	ldr	r3, [sp, #32]
   18b30:	str	r3, [sp, #24]
   18b34:	ldr	r0, [sp, #24]
   18b38:	bl	1d29c <__assert_fail@plt+0xb354>
   18b3c:	b	17e1c <__assert_fail@plt+0x5ed4>
   18b40:	mov	r1, r6
   18b44:	mov	r0, r8
   18b48:	add	r5, sp, #160	; 0xa0
   18b4c:	bl	11b1c <strtold@plt>
   18b50:	mov	r1, r6
   18b54:	mov	r0, r7
   18b58:	vstr	d0, [r5, #-56]	; 0xffffffc8
   18b5c:	bl	11b1c <strtold@plt>
   18b60:	add	r3, sp, #4416	; 0x1140
   18b64:	sub	r0, r5, #56	; 0x38
   18b68:	mov	r1, r3
   18b6c:	mov	r2, #8
   18b70:	vstr	d0, [r3]
   18b74:	bl	11b40 <memcmp@plt>
   18b78:	mov	r6, r0
   18b7c:	b	17e1c <__assert_fail@plt+0x5ed4>
   18b80:	ldr	ip, [sp]
   18b84:	cmp	r8, ip
   18b88:	bcs	18b9c <__assert_fail@plt+0x6c54>
   18b8c:	ldrb	r2, [r8]
   18b90:	ldrb	r2, [r3, r2]
   18b94:	cmp	r2, #0
   18b98:	bne	18c14 <__assert_fail@plt+0x6ccc>
   18b9c:	cmp	r7, r4
   18ba0:	bcs	18bd8 <__assert_fail@plt+0x6c90>
   18ba4:	ldrb	r1, [r7]
   18ba8:	ldrb	r2, [r3, r1]
   18bac:	cmp	r2, #0
   18bb0:	addne	r2, r7, #1
   18bb4:	bne	18bcc <__assert_fail@plt+0x6c84>
   18bb8:	b	18bf8 <__assert_fail@plt+0x6cb0>
   18bbc:	ldrb	r1, [r2], #1
   18bc0:	ldrb	r0, [r3, r1]
   18bc4:	cmp	r0, #0
   18bc8:	beq	18bf8 <__assert_fail@plt+0x6cb0>
   18bcc:	cmp	r4, r2
   18bd0:	mov	r7, r2
   18bd4:	bne	18bbc <__assert_fail@plt+0x6c74>
   18bd8:	ldr	r3, [sp]
   18bdc:	cmp	r7, r4
   18be0:	movcs	r4, #0
   18be4:	movcc	r4, #1
   18be8:	cmp	r3, r8
   18bec:	rsbls	r6, r4, #0
   18bf0:	rsbhi	r6, r4, #1
   18bf4:	b	17e3c <__assert_fail@plt+0x5ef4>
   18bf8:	cmp	r4, r7
   18bfc:	cmphi	ip, r8
   18c00:	bls	18bd8 <__assert_fail@plt+0x6c90>
   18c04:	ldrb	r2, [r8]
   18c08:	subs	r1, r2, r1
   18c0c:	bne	18af4 <__assert_fail@plt+0x6bac>
   18c10:	add	r7, r7, #1
   18c14:	add	r8, r8, #1
   18c18:	b	18b84 <__assert_fail@plt+0x6c3c>
   18c1c:	cmp	r5, #0
   18c20:	beq	18ca0 <__assert_fail@plt+0x6d58>
   18c24:	cmp	r2, #0
   18c28:	bne	18c68 <__assert_fail@plt+0x6d20>
   18c2c:	cmp	r9, r5
   18c30:	mov	r1, r7
   18c34:	movcc	r2, r9
   18c38:	movcs	r2, r5
   18c3c:	mov	r0, r8
   18c40:	bl	11b40 <memcmp@plt>
   18c44:	subs	r6, r0, #0
   18c48:	bne	17d60 <__assert_fail@plt+0x5e18>
   18c4c:	cmp	r9, r5
   18c50:	bcc	18c94 <__assert_fail@plt+0x6d4c>
   18c54:	movne	r6, #1
   18c58:	moveq	r6, #0
   18c5c:	b	17e3c <__assert_fail@plt+0x5ef4>
   18c60:	mvn	r6, #0
   18c64:	b	17e1c <__assert_fail@plt+0x5ed4>
   18c68:	ldr	r0, [sp]
   18c6c:	cmp	r8, r0
   18c70:	cmpcc	r7, r4
   18c74:	bcs	18c4c <__assert_fail@plt+0x6d04>
   18c78:	ldrb	r3, [r8], #1
   18c7c:	ldrb	r1, [r7], #1
   18c80:	ldrb	r3, [r2, r3]
   18c84:	ldrb	r6, [r2, r1]
   18c88:	subs	r6, r3, r6
   18c8c:	beq	18c6c <__assert_fail@plt+0x6d24>
   18c90:	b	17d60 <__assert_fail@plt+0x5e18>
   18c94:	mvn	r3, #0
   18c98:	mov	r2, r3
   18c9c:	b	17d64 <__assert_fail@plt+0x5e1c>
   18ca0:	mov	r3, #1
   18ca4:	mov	r2, r3
   18ca8:	b	17d64 <__assert_fail@plt+0x5e1c>
   18cac:	ldr	r8, [sp, #32]
   18cb0:	ldr	fp, [sp, #56]	; 0x38
   18cb4:	ldr	sl, [sp, #60]	; 0x3c
   18cb8:	b	18838 <__assert_fail@plt+0x68f0>
   18cbc:	andeq	sl, r3, r0, lsl #16
   18cc0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18cc4:	movw	r4, #41696	; 0xa2e0
   18cc8:	movt	r4, #3
   18ccc:	ldr	r3, [r4, #1300]	; 0x514
   18cd0:	strd	r6, [sp, #8]
   18cd4:	mov	r7, r0
   18cd8:	mov	r6, r1
   18cdc:	strd	r8, [sp, #16]
   18ce0:	str	sl, [sp, #24]
   18ce4:	str	lr, [sp, #28]
   18ce8:	cmp	r3, #0
   18cec:	beq	18d14 <__assert_fail@plt+0x6dcc>
   18cf0:	bl	17bfc <__assert_fail@plt+0x5cb4>
   18cf4:	cmp	r0, #0
   18cf8:	bne	18d40 <__assert_fail@plt+0x6df8>
   18cfc:	ldrb	r3, [r4, #1309]	; 0x51d
   18d00:	cmp	r3, #0
   18d04:	bne	18d40 <__assert_fail@plt+0x6df8>
   18d08:	ldrb	r3, [r4, #1310]	; 0x51e
   18d0c:	cmp	r3, #0
   18d10:	bne	18d40 <__assert_fail@plt+0x6df8>
   18d14:	ldr	r5, [r7, #4]
   18d18:	ldr	r9, [r6, #4]
   18d1c:	subs	sl, r5, #1
   18d20:	sub	r8, r9, #1
   18d24:	bne	18d58 <__assert_fail@plt+0x6e10>
   18d28:	adds	r0, r8, #0
   18d2c:	movne	r0, #1
   18d30:	rsb	r0, r0, #0
   18d34:	ldrb	r3, [r4, #1281]	; 0x501
   18d38:	cmp	r3, #0
   18d3c:	rsbne	r0, r0, #0
   18d40:	ldrd	r4, [sp]
   18d44:	ldrd	r6, [sp, #8]
   18d48:	ldrd	r8, [sp, #16]
   18d4c:	ldr	sl, [sp, #24]
   18d50:	add	sp, sp, #28
   18d54:	pop	{pc}		; (ldr pc, [sp], #4)
   18d58:	cmp	r8, #0
   18d5c:	moveq	r0, #1
   18d60:	beq	18d34 <__assert_fail@plt+0x6dec>
   18d64:	ldrb	r3, [r4, #1280]	; 0x500
   18d68:	ldr	r1, [r6]
   18d6c:	ldr	r0, [r7]
   18d70:	cmp	r3, #0
   18d74:	bne	18da8 <__assert_fail@plt+0x6e60>
   18d78:	cmp	sl, r8
   18d7c:	movcc	r2, sl
   18d80:	movcs	r2, r8
   18d84:	bl	11b40 <memcmp@plt>
   18d88:	cmp	r0, #0
   18d8c:	bne	18d34 <__assert_fail@plt+0x6dec>
   18d90:	cmp	sl, r8
   18d94:	mvncc	r0, #0
   18d98:	bcc	18d34 <__assert_fail@plt+0x6dec>
   18d9c:	subs	r0, r5, r9
   18da0:	movne	r0, #1
   18da4:	b	18d34 <__assert_fail@plt+0x6dec>
   18da8:	mov	r2, r1
   18dac:	mov	r3, r9
   18db0:	mov	r1, r5
   18db4:	bl	2534c <__assert_fail@plt+0x13404>
   18db8:	b	18d34 <__assert_fail@plt+0x6dec>
   18dbc:	cmp	r1, #2
   18dc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18dc4:	mov	r4, r0
   18dc8:	mov	r5, r2
   18dcc:	strd	r6, [sp, #8]
   18dd0:	strd	r8, [sp, #16]
   18dd4:	mov	r9, r3
   18dd8:	strd	sl, [sp, #24]
   18ddc:	str	lr, [sp, #32]
   18de0:	sub	sp, sp, #20
   18de4:	beq	18fb0 <__assert_fail@plt+0x7068>
   18de8:	lsr	r6, r1, #1
   18dec:	mov	r8, r1
   18df0:	cmp	r3, #0
   18df4:	lsl	r1, r6, #4
   18df8:	sub	r0, r8, r6
   18dfc:	rsb	r1, r1, #0
   18e00:	str	r0, [sp]
   18e04:	add	r7, r4, r1
   18e08:	bne	18f2c <__assert_fail@plt+0x6fe4>
   18e0c:	sub	r1, r8, r6
   18e10:	mov	r0, r7
   18e14:	bl	18dbc <__assert_fail@plt+0x6e74>
   18e18:	cmp	r8, #3
   18e1c:	bhi	190d4 <__assert_fail@plt+0x718c>
   18e20:	ldrd	r2, [r4, #-16]
   18e24:	mov	ip, r5
   18e28:	mov	sl, r7
   18e2c:	ldrd	r0, [r4, #-8]
   18e30:	strd	r2, [r5, #-16]
   18e34:	strd	r0, [r5, #-8]
   18e38:	mov	r5, r4
   18e3c:	mov	r4, ip
   18e40:	sub	fp, r5, #16
   18e44:	sub	r8, r4, #16
   18e48:	movw	r5, #41696	; 0xa2e0
   18e4c:	movt	r5, #3
   18e50:	sub	r7, sl, #16
   18e54:	b	18ea0 <__assert_fail@plt+0x6f58>
   18e58:	ldrb	r3, [r5, #1281]	; 0x501
   18e5c:	cmp	r3, #0
   18e60:	beq	18f08 <__assert_fail@plt+0x6fc0>
   18e64:	adds	r0, r9, #0
   18e68:	movne	r0, #1
   18e6c:	cmp	r0, #0
   18e70:	ble	18f08 <__assert_fail@plt+0x6fc0>
   18e74:	ldrd	r2, [r7]
   18e78:	ldr	r1, [sp]
   18e7c:	strd	r2, [fp]
   18e80:	ldrd	r2, [r7, #8]
   18e84:	subs	r1, r1, #1
   18e88:	str	r1, [sp]
   18e8c:	strd	r2, [fp, #8]
   18e90:	beq	19050 <__assert_fail@plt+0x7108>
   18e94:	mov	sl, r7
   18e98:	sub	r7, r7, #16
   18e9c:	sub	fp, fp, #16
   18ea0:	ldr	r3, [r5, #1300]	; 0x514
   18ea4:	cmp	r3, #0
   18ea8:	beq	18ed8 <__assert_fail@plt+0x6f90>
   18eac:	mov	r1, r7
   18eb0:	mov	r0, r8
   18eb4:	bl	17bfc <__assert_fail@plt+0x5cb4>
   18eb8:	cmp	r0, #0
   18ebc:	bne	18e6c <__assert_fail@plt+0x6f24>
   18ec0:	ldrb	r3, [r5, #1309]	; 0x51d
   18ec4:	cmp	r3, #0
   18ec8:	bne	18f08 <__assert_fail@plt+0x6fc0>
   18ecc:	ldrb	r3, [r5, #1310]	; 0x51e
   18ed0:	cmp	r3, #0
   18ed4:	bne	18f08 <__assert_fail@plt+0x6fc0>
   18ed8:	ldr	r3, [r4, #-12]
   18edc:	ldr	r2, [sl, #-12]
   18ee0:	str	r3, [sp, #4]
   18ee4:	subs	r3, r3, #1
   18ee8:	sub	r9, r2, #1
   18eec:	str	r2, [sp, #8]
   18ef0:	beq	18e58 <__assert_fail@plt+0x6f10>
   18ef4:	cmp	r9, #0
   18ef8:	bne	18f64 <__assert_fail@plt+0x701c>
   18efc:	ldrb	r3, [r5, #1281]	; 0x501
   18f00:	cmp	r3, #0
   18f04:	beq	18e74 <__assert_fail@plt+0x6f2c>
   18f08:	ldrd	r2, [r8]
   18f0c:	subs	r6, r6, #1
   18f10:	strd	r2, [fp]
   18f14:	ldrd	r2, [r8, #8]
   18f18:	strd	r2, [fp, #8]
   18f1c:	beq	18ffc <__assert_fail@plt+0x70b4>
   18f20:	mov	r4, r8
   18f24:	sub	r8, r8, #16
   18f28:	b	18e9c <__assert_fail@plt+0x6f54>
   18f2c:	add	sl, r2, r1
   18f30:	mov	r0, r7
   18f34:	mov	r2, sl
   18f38:	mov	r3, #1
   18f3c:	sub	r1, r8, r6
   18f40:	bl	18dbc <__assert_fail@plt+0x6e74>
   18f44:	cmp	r8, #3
   18f48:	bls	18e40 <__assert_fail@plt+0x6ef8>
   18f4c:	mov	r3, #0
   18f50:	mov	r2, r5
   18f54:	mov	r1, r6
   18f58:	mov	r0, r4
   18f5c:	bl	18dbc <__assert_fail@plt+0x6e74>
   18f60:	b	18e40 <__assert_fail@plt+0x6ef8>
   18f64:	ldrb	r2, [r5, #1280]	; 0x500
   18f68:	ldr	r0, [r4, #-16]
   18f6c:	ldr	r1, [sl, #-16]
   18f70:	cmp	r2, #0
   18f74:	bne	19034 <__assert_fail@plt+0x70ec>
   18f78:	cmp	r3, r9
   18f7c:	str	r3, [sp, #12]
   18f80:	movcc	r2, r3
   18f84:	movcs	r2, r9
   18f88:	bl	11b40 <memcmp@plt>
   18f8c:	cmp	r0, #0
   18f90:	ldrb	r2, [r5, #1281]	; 0x501
   18f94:	bne	19028 <__assert_fail@plt+0x70e0>
   18f98:	ldr	r3, [sp, #12]
   18f9c:	cmp	r3, r9
   18fa0:	bcs	19018 <__assert_fail@plt+0x70d0>
   18fa4:	cmp	r2, #0
   18fa8:	bne	18e74 <__assert_fail@plt+0x6f2c>
   18fac:	b	18f08 <__assert_fail@plt+0x6fc0>
   18fb0:	sub	r6, r0, #32
   18fb4:	sub	r7, r0, #16
   18fb8:	mov	r1, r6
   18fbc:	mov	r0, r7
   18fc0:	bl	18cc0 <__assert_fail@plt+0x6d78>
   18fc4:	cmp	r9, #0
   18fc8:	bne	1908c <__assert_fail@plt+0x7144>
   18fcc:	cmp	r0, #0
   18fd0:	ble	18ffc <__assert_fail@plt+0x70b4>
   18fd4:	ldrd	r2, [r6]
   18fd8:	ldrd	r8, [r7]
   18fdc:	ldrd	r0, [r7, #8]
   18fe0:	strd	r2, [r7]
   18fe4:	ldrd	r2, [r6, #8]
   18fe8:	strd	r8, [r5, #-16]
   18fec:	strd	r0, [r5, #-8]
   18ff0:	strd	r2, [r7, #8]
   18ff4:	strd	r8, [r6]
   18ff8:	strd	r0, [r6, #8]
   18ffc:	add	sp, sp, #20
   19000:	ldrd	r4, [sp]
   19004:	ldrd	r6, [sp, #8]
   19008:	ldrd	r8, [sp, #16]
   1900c:	ldrd	sl, [sp, #24]
   19010:	add	sp, sp, #32
   19014:	pop	{pc}		; (ldr pc, [sp], #4)
   19018:	ldr	r3, [sp, #4]
   1901c:	ldr	r1, [sp, #8]
   19020:	subs	r0, r3, r1
   19024:	movne	r0, #1
   19028:	cmp	r2, #0
   1902c:	rsbne	r0, r0, #0
   19030:	b	18e6c <__assert_fail@plt+0x6f24>
   19034:	mov	r2, r1
   19038:	ldmib	sp, {r1, r3}
   1903c:	bl	2534c <__assert_fail@plt+0x13404>
   19040:	ldrb	r2, [r5, #1281]	; 0x501
   19044:	cmp	r2, #0
   19048:	rsbne	r0, r0, #0
   1904c:	b	18e6c <__assert_fail@plt+0x6f24>
   19050:	lsl	r2, r6, #4
   19054:	rsb	r3, r2, #0
   19058:	sub	r3, r3, #16
   1905c:	add	r4, r4, r3
   19060:	add	r3, fp, r3
   19064:	ldrd	r0, [r4, r2]
   19068:	add	lr, r4, r2
   1906c:	add	ip, r3, r2
   19070:	subs	r6, r6, #1
   19074:	strd	r0, [r3, r2]
   19078:	lsl	r2, r6, #4
   1907c:	ldrd	r0, [lr, #8]
   19080:	strd	r0, [ip, #8]
   19084:	bne	19064 <__assert_fail@plt+0x711c>
   19088:	b	18ffc <__assert_fail@plt+0x70b4>
   1908c:	cmp	r0, #0
   19090:	movle	r0, #0
   19094:	movgt	r0, #1
   19098:	mvn	r3, r0
   1909c:	sub	r0, r0, #2
   190a0:	lsl	r3, r3, #4
   190a4:	lsl	r0, r0, #4
   190a8:	add	lr, r4, r3
   190ac:	ldrd	r2, [r3, r4]
   190b0:	add	ip, r4, r0
   190b4:	ldrd	r0, [r0, r4]
   190b8:	ldrd	r6, [lr, #8]
   190bc:	strd	r2, [r5, #-16]
   190c0:	ldrd	r2, [ip, #8]
   190c4:	strd	r0, [r5, #-32]	; 0xffffffe0
   190c8:	strd	r2, [r5, #-24]	; 0xffffffe8
   190cc:	strd	r6, [r5, #-8]
   190d0:	b	18ffc <__assert_fail@plt+0x70b4>
   190d4:	mov	r3, #1
   190d8:	mov	r2, r5
   190dc:	mov	r0, r4
   190e0:	mov	r1, r6
   190e4:	bl	18dbc <__assert_fail@plt+0x6e74>
   190e8:	mov	r3, r5
   190ec:	mov	sl, r7
   190f0:	mov	r5, r4
   190f4:	mov	r4, r3
   190f8:	b	18e40 <__assert_fail@plt+0x6ef8>
   190fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19100:	mov	r4, r3
   19104:	strd	r6, [sp, #8]
   19108:	mov	r6, r0
   1910c:	strd	r8, [sp, #16]
   19110:	lsr	r9, r1, #1
   19114:	ldr	r7, [r3, #20]
   19118:	strd	sl, [sp, #24]
   1911c:	ldr	r8, [r3, #24]
   19120:	str	lr, [sp, #32]
   19124:	sub	sp, sp, #76	; 0x4c
   19128:	ldr	r3, [sp, #112]	; 0x70
   1912c:	str	r2, [sp, #32]
   19130:	str	r0, [sp, #44]	; 0x2c
   19134:	str	r2, [sp, #52]	; 0x34
   19138:	add	r2, r7, r8
   1913c:	cmp	r2, #131072	; 0x20000
   19140:	cmpcs	r1, #1
   19144:	ldr	r2, [sp, #116]	; 0x74
   19148:	str	r9, [sp, #48]	; 0x30
   1914c:	str	r3, [sp, #60]	; 0x3c
   19150:	ldr	r3, [r4, #32]
   19154:	str	r2, [sp, #64]	; 0x40
   19158:	ldr	r2, [sp, #120]	; 0x78
   1915c:	str	r3, [sp, #56]	; 0x38
   19160:	str	r2, [sp, #68]	; 0x44
   19164:	bhi	19b14 <__assert_fail@plt+0x7bcc>
   19168:	ldr	r3, [sp, #32]
   1916c:	lsl	r5, r7, #4
   19170:	cmp	r8, #1
   19174:	rsb	r5, r5, #0
   19178:	add	r9, r6, r5
   1917c:	sub	sl, r6, r3, lsl #4
   19180:	bls	1919c <__assert_fail@plt+0x7254>
   19184:	lsr	r2, r7, #1
   19188:	mov	r3, #0
   1918c:	mov	r1, r8
   19190:	mov	r0, r9
   19194:	sub	r2, sl, r2, lsl #4
   19198:	bl	18dbc <__assert_fail@plt+0x6e74>
   1919c:	cmp	r7, #1
   191a0:	bls	191b8 <__assert_fail@plt+0x7270>
   191a4:	mov	r2, sl
   191a8:	mov	r1, r7
   191ac:	mov	r3, #0
   191b0:	mov	r0, r6
   191b4:	bl	18dbc <__assert_fail@plt+0x6e74>
   191b8:	ldr	r3, [sp, #112]	; 0x70
   191bc:	sub	r5, r5, r8, lsl #4
   191c0:	movw	r8, #41696	; 0xa2e0
   191c4:	movt	r8, #3
   191c8:	stm	r4, {r6, r9}
   191cc:	add	r6, r6, r5
   191d0:	str	r9, [r4, #8]
   191d4:	str	r6, [r4, #12]
   191d8:	add	r7, r3, #4
   191dc:	mov	r5, r3
   191e0:	mov	r0, r7
   191e4:	str	r7, [sp, #20]
   191e8:	bl	11a98 <pthread_mutex_lock@plt>
   191ec:	mov	r3, r5
   191f0:	mov	r1, r4
   191f4:	ldr	r0, [r3], #32
   191f8:	mov	r5, r3
   191fc:	str	r3, [sp, #24]
   19200:	bl	1ebd0 <__assert_fail@plt+0xcc88>
   19204:	mov	r3, #1
   19208:	mov	r0, r5
   1920c:	strb	r3, [r4, #44]	; 0x2c
   19210:	bl	11f18 <pthread_cond_signal@plt>
   19214:	mov	r0, r7
   19218:	bl	119f0 <pthread_mutex_unlock@plt>
   1921c:	ldr	r0, [sp, #20]
   19220:	bl	11a98 <pthread_mutex_lock@plt>
   19224:	b	1922c <__assert_fail@plt+0x72e4>
   19228:	bl	11eb8 <pthread_cond_wait@plt>
   1922c:	ldr	r3, [sp, #112]	; 0x70
   19230:	ldr	r0, [r3]
   19234:	bl	1ec88 <__assert_fail@plt+0xcd40>
   19238:	subs	fp, r0, #0
   1923c:	ldr	r1, [sp, #20]
   19240:	ldr	r0, [sp, #24]
   19244:	beq	19228 <__assert_fail@plt+0x72e0>
   19248:	add	r3, fp, #48	; 0x30
   1924c:	mov	r0, r1
   19250:	mov	r4, r3
   19254:	str	r3, [sp, #36]	; 0x24
   19258:	bl	119f0 <pthread_mutex_unlock@plt>
   1925c:	mov	r0, r4
   19260:	bl	11a98 <pthread_mutex_lock@plt>
   19264:	ldr	r3, [fp, #40]	; 0x28
   19268:	mov	r2, #0
   1926c:	strb	r2, [fp, #44]	; 0x2c
   19270:	cmp	r3, r2
   19274:	beq	19a8c <__assert_fail@plt+0x7b44>
   19278:	add	r7, r3, #1
   1927c:	cmp	r3, #1
   19280:	ldr	r3, [sp, #32]
   19284:	lsl	r7, r7, #1
   19288:	ldr	r5, [fp]
   1928c:	ldr	r4, [fp, #4]
   19290:	lsr	r7, r3, r7
   19294:	add	r6, r7, #1
   19298:	str	r5, [sp, #28]
   1929c:	mov	sl, r4
   192a0:	bls	195d0 <__assert_fail@plt+0x7688>
   192a4:	ldr	r3, [fp, #16]
   192a8:	mov	r1, r4
   192ac:	mov	r0, r5
   192b0:	ldr	r7, [r3]
   192b4:	b	192dc <__assert_fail@plt+0x7394>
   192b8:	ldrd	r2, [r1, #-16]
   192bc:	sub	r1, r1, #16
   192c0:	sub	ip, r7, #16
   192c4:	str	r1, [fp, #4]
   192c8:	strd	r2, [r7, #-16]
   192cc:	ldrd	r2, [r1, #8]
   192d0:	strd	r2, [r7, #-8]
   192d4:	mov	r7, ip
   192d8:	sub	r6, r6, #1
   192dc:	ldr	r9, [fp, #8]
   192e0:	mov	sl, r7
   192e4:	cmp	r9, r0
   192e8:	beq	19478 <__assert_fail@plt+0x7530>
   192ec:	ldr	r3, [fp, #12]
   192f0:	cmp	r3, r1
   192f4:	beq	198c0 <__assert_fail@plt+0x7978>
   192f8:	cmp	r6, #0
   192fc:	beq	1937c <__assert_fail@plt+0x7434>
   19300:	ldr	r3, [r8, #1300]	; 0x514
   19304:	sub	r9, r0, #16
   19308:	sub	sl, r1, #16
   1930c:	cmp	r3, #0
   19310:	beq	19340 <__assert_fail@plt+0x73f8>
   19314:	mov	r1, sl
   19318:	mov	r0, r9
   1931c:	bl	17bfc <__assert_fail@plt+0x5cb4>
   19320:	cmp	r0, #0
   19324:	bne	1934c <__assert_fail@plt+0x7404>
   19328:	ldrb	r3, [r8, #1309]	; 0x51d
   1932c:	cmp	r3, #0
   19330:	bne	1993c <__assert_fail@plt+0x79f4>
   19334:	ldrb	r3, [r8, #1310]	; 0x51e
   19338:	cmp	r3, #0
   1933c:	bne	1993c <__assert_fail@plt+0x79f4>
   19340:	mov	r1, sl
   19344:	mov	r0, r9
   19348:	bl	163c0 <__assert_fail@plt+0x4478>
   1934c:	cmp	r0, #0
   19350:	ldrd	r0, [fp]
   19354:	bgt	192b8 <__assert_fail@plt+0x7370>
   19358:	ldrd	r2, [r0, #-16]
   1935c:	sub	lr, r0, #16
   19360:	sub	ip, r7, #16
   19364:	mov	r0, lr
   19368:	str	lr, [fp]
   1936c:	strd	r2, [r7, #-16]
   19370:	ldrd	r2, [lr, #8]
   19374:	strd	r2, [ip, #8]
   19378:	b	192d4 <__assert_fail@plt+0x738c>
   1937c:	ldr	r2, [fp, #20]
   19380:	sub	r3, r4, r1
   19384:	sub	ip, r5, r0
   19388:	asr	r3, r3, #4
   1938c:	ldr	lr, [fp, #24]
   19390:	asr	ip, ip, #4
   19394:	str	r2, [sp, #16]
   19398:	cmp	lr, r3
   1939c:	mvnne	r6, #0
   193a0:	bne	1949c <__assert_fail@plt+0x7554>
   193a4:	mvn	r4, #1
   193a8:	mvn	r6, #0
   193ac:	sub	r6, r0, r6, lsl #4
   193b0:	sub	r7, r0, #16
   193b4:	b	193c0 <__assert_fail@plt+0x7478>
   193b8:	cmn	r4, #1
   193bc:	beq	193f0 <__assert_fail@plt+0x74a8>
   193c0:	lsl	ip, r4, #4
   193c4:	mov	r0, r7
   193c8:	cmp	r9, r7
   193cc:	sub	r4, r4, #1
   193d0:	sub	r7, r7, #16
   193d4:	ldrd	r2, [r6, ip]
   193d8:	add	ip, r6, ip
   193dc:	str	r0, [fp]
   193e0:	strd	r2, [sl, #-16]!
   193e4:	ldrd	r2, [ip, #8]
   193e8:	strd	r2, [sl, #8]
   193ec:	bne	193b8 <__assert_fail@plt+0x7470>
   193f0:	sub	r5, r5, r0
   193f4:	mov	r3, lr
   193f8:	asr	ip, r5, #4
   193fc:	ldr	r2, [fp, #16]
   19400:	str	sl, [r2]
   19404:	ldr	r4, [sp, #16]
   19408:	sub	lr, lr, r3
   1940c:	ldrb	r2, [fp, #44]	; 0x2c
   19410:	str	lr, [fp, #24]
   19414:	sub	ip, r4, ip
   19418:	cmp	r2, #0
   1941c:	str	ip, [fp, #20]
   19420:	bne	19450 <__assert_fail@plt+0x7508>
   19424:	ldr	r6, [fp, #8]
   19428:	ldr	r2, [fp, #12]
   1942c:	subs	r1, r2, r1
   19430:	movne	r1, #1
   19434:	cmp	r6, r0
   19438:	beq	1992c <__assert_fail@plt+0x79e4>
   1943c:	cmp	lr, #0
   19440:	movne	ip, r1
   19444:	moveq	ip, #1
   19448:	cmp	ip, #0
   1944c:	bne	198f4 <__assert_fail@plt+0x79ac>
   19450:	ldr	r3, [fp, #40]	; 0x28
   19454:	cmp	r3, #1
   19458:	bhi	19558 <__assert_fail@plt+0x7610>
   1945c:	ldr	r3, [fp, #20]
   19460:	ldr	r2, [fp, #24]
   19464:	cmn	r3, r2
   19468:	beq	1951c <__assert_fail@plt+0x75d4>
   1946c:	ldr	r0, [sp, #36]	; 0x24
   19470:	bl	119f0 <pthread_mutex_unlock@plt>
   19474:	b	1921c <__assert_fail@plt+0x72d4>
   19478:	ldr	r2, [fp, #20]
   1947c:	sub	r3, r4, r1
   19480:	sub	r5, r5, r0
   19484:	asr	r3, r3, #4
   19488:	ldr	lr, [fp, #24]
   1948c:	asr	ip, r5, #4
   19490:	str	r2, [sp, #16]
   19494:	cmp	lr, r3
   19498:	beq	193fc <__assert_fail@plt+0x74b4>
   1949c:	ldr	r2, [sp, #16]
   194a0:	cmp	ip, r2
   194a4:	bne	193fc <__assert_fail@plt+0x74b4>
   194a8:	ldr	r9, [fp, #12]
   194ac:	cmp	r9, r1
   194b0:	beq	193fc <__assert_fail@plt+0x74b4>
   194b4:	cmp	r6, #0
   194b8:	sub	r7, r6, #1
   194bc:	beq	193fc <__assert_fail@plt+0x74b4>
   194c0:	sub	r6, r1, r6, lsl #4
   194c4:	sub	r3, r1, #16
   194c8:	str	r4, [sp, #28]
   194cc:	b	194d8 <__assert_fail@plt+0x7590>
   194d0:	cmn	r7, #1
   194d4:	beq	19b04 <__assert_fail@plt+0x7bbc>
   194d8:	lsl	r2, r7, #4
   194dc:	mov	r1, r3
   194e0:	cmp	r3, r9
   194e4:	sub	r7, r7, #1
   194e8:	sub	r3, r3, #16
   194ec:	ldrd	r4, [r6, r2]
   194f0:	add	r2, r6, r2
   194f4:	str	r1, [fp, #4]
   194f8:	strd	r4, [sl, #-16]!
   194fc:	ldrd	r4, [r2, #8]
   19500:	strd	r4, [sl, #8]
   19504:	bne	194d0 <__assert_fail@plt+0x7588>
   19508:	ldr	r4, [sp, #28]
   1950c:	mov	r1, r9
   19510:	sub	r4, r4, r9
   19514:	asr	r3, r4, #4
   19518:	b	193fc <__assert_fail@plt+0x74b4>
   1951c:	ldr	r5, [sp, #20]
   19520:	ldr	r4, [fp, #28]
   19524:	mov	r0, r5
   19528:	bl	11a98 <pthread_mutex_lock@plt>
   1952c:	ldr	r3, [sp, #112]	; 0x70
   19530:	mov	r1, r4
   19534:	ldr	r0, [r3]
   19538:	bl	1ebd0 <__assert_fail@plt+0xcc88>
   1953c:	mov	r3, #1
   19540:	ldr	r0, [sp, #24]
   19544:	strb	r3, [r4, #44]	; 0x2c
   19548:	bl	11f18 <pthread_cond_signal@plt>
   1954c:	mov	r0, r5
   19550:	bl	119f0 <pthread_mutex_unlock@plt>
   19554:	b	1946c <__assert_fail@plt+0x7524>
   19558:	ldr	r0, [fp, #28]
   1955c:	add	r0, r0, #48	; 0x30
   19560:	bl	11a98 <pthread_mutex_lock@plt>
   19564:	ldr	r4, [fp, #28]
   19568:	ldrb	r3, [r4, #44]	; 0x2c
   1956c:	cmp	r3, #0
   19570:	bne	195c4 <__assert_fail@plt+0x767c>
   19574:	ldm	r4, {r1, r2, r3}
   19578:	cmp	r1, r3
   1957c:	ldr	r3, [r4, #12]
   19580:	beq	19ae4 <__assert_fail@plt+0x7b9c>
   19584:	cmp	r2, r3
   19588:	beq	19b54 <__assert_fail@plt+0x7c0c>
   1958c:	ldr	r5, [sp, #20]
   19590:	mov	r0, r5
   19594:	bl	11a98 <pthread_mutex_lock@plt>
   19598:	ldr	r3, [sp, #112]	; 0x70
   1959c:	mov	r1, r4
   195a0:	ldr	r0, [r3]
   195a4:	bl	1ebd0 <__assert_fail@plt+0xcc88>
   195a8:	mov	r3, #1
   195ac:	ldr	r0, [sp, #24]
   195b0:	strb	r3, [r4, #44]	; 0x2c
   195b4:	bl	11f18 <pthread_cond_signal@plt>
   195b8:	mov	r0, r5
   195bc:	bl	119f0 <pthread_mutex_unlock@plt>
   195c0:	ldr	r4, [fp, #28]
   195c4:	add	r0, r4, #48	; 0x30
   195c8:	bl	119f0 <pthread_mutex_unlock@plt>
   195cc:	b	1946c <__assert_fail@plt+0x7524>
   195d0:	ldr	r3, [fp, #8]
   195d4:	cmp	r5, r3
   195d8:	beq	197c0 <__assert_fail@plt+0x7878>
   195dc:	ldr	r3, [fp, #12]
   195e0:	cmp	r4, r3
   195e4:	beq	19958 <__assert_fail@plt+0x7a10>
   195e8:	cmp	r6, #0
   195ec:	moveq	r1, r4
   195f0:	moveq	r0, r5
   195f4:	bne	196c0 <__assert_fail@plt+0x7778>
   195f8:	b	19994 <__assert_fail@plt+0x7a4c>
   195fc:	ldr	r5, [fp, #4]
   19600:	cmp	r3, #0
   19604:	sub	r4, r5, #16
   19608:	str	r4, [fp, #4]
   1960c:	beq	1967c <__assert_fail@plt+0x7734>
   19610:	ldr	r3, [r8, #1468]	; 0x5bc
   19614:	cmp	r3, #0
   19618:	beq	19668 <__assert_fail@plt+0x7720>
   1961c:	ldr	r3, [r8, #1300]	; 0x514
   19620:	cmp	r3, #0
   19624:	beq	19654 <__assert_fail@plt+0x770c>
   19628:	ldr	r1, [pc, #1444]	; 19bd4 <__assert_fail@plt+0x7c8c>
   1962c:	mov	r0, r4
   19630:	bl	17bfc <__assert_fail@plt+0x5cb4>
   19634:	cmp	r0, #0
   19638:	bne	19668 <__assert_fail@plt+0x7720>
   1963c:	ldrb	r3, [r8, #1309]	; 0x51d
   19640:	cmp	r3, #0
   19644:	bne	1968c <__assert_fail@plt+0x7744>
   19648:	ldrb	r3, [r8, #1310]	; 0x51e
   1964c:	cmp	r3, #0
   19650:	bne	1968c <__assert_fail@plt+0x7744>
   19654:	ldr	r1, [pc, #1400]	; 19bd4 <__assert_fail@plt+0x7c8c>
   19658:	mov	r0, r4
   1965c:	bl	163c0 <__assert_fail@plt+0x4478>
   19660:	cmp	r0, #0
   19664:	beq	1968c <__assert_fail@plt+0x7744>
   19668:	ldr	r1, [pc, #1380]	; 19bd4 <__assert_fail@plt+0x7c8c>
   1966c:	ldrd	r2, [r5, #-16]
   19670:	strd	r2, [r1]
   19674:	ldrd	r2, [r4, #8]
   19678:	strd	r2, [r1, #8]
   1967c:	mov	r0, r4
   19680:	ldr	r1, [sp, #116]	; 0x74
   19684:	ldr	r2, [sp, #120]	; 0x78
   19688:	bl	16874 <__assert_fail@plt+0x492c>
   1968c:	ldr	r5, [fp]
   19690:	ldr	r4, [fp, #4]
   19694:	ldr	r3, [fp, #8]
   19698:	mov	r0, r5
   1969c:	mov	r1, r4
   196a0:	cmp	r3, r5
   196a4:	beq	197cc <__assert_fail@plt+0x7884>
   196a8:	ldr	r3, [fp, #12]
   196ac:	cmp	r3, r4
   196b0:	beq	19964 <__assert_fail@plt+0x7a1c>
   196b4:	cmp	r7, #0
   196b8:	sub	r7, r7, #1
   196bc:	beq	19994 <__assert_fail@plt+0x7a4c>
   196c0:	ldr	r3, [r8, #1300]	; 0x514
   196c4:	sub	r5, r5, #16
   196c8:	sub	r4, r4, #16
   196cc:	cmp	r3, #0
   196d0:	beq	19700 <__assert_fail@plt+0x77b8>
   196d4:	mov	r1, r4
   196d8:	mov	r0, r5
   196dc:	bl	17bfc <__assert_fail@plt+0x5cb4>
   196e0:	cmp	r0, #0
   196e4:	bne	1970c <__assert_fail@plt+0x77c4>
   196e8:	ldrb	r3, [r8, #1309]	; 0x51d
   196ec:	cmp	r3, #0
   196f0:	bne	19944 <__assert_fail@plt+0x79fc>
   196f4:	ldrb	r3, [r8, #1310]	; 0x51e
   196f8:	cmp	r3, #0
   196fc:	bne	197b0 <__assert_fail@plt+0x7868>
   19700:	mov	r1, r4
   19704:	mov	r0, r5
   19708:	bl	163c0 <__assert_fail@plt+0x4478>
   1970c:	cmp	r0, #0
   19710:	ldrb	r3, [r8, #1309]	; 0x51d
   19714:	bgt	195fc <__assert_fail@plt+0x76b4>
   19718:	ldr	r4, [fp]
   1971c:	cmp	r3, #0
   19720:	sub	r4, r4, #16
   19724:	mov	r5, r4
   19728:	str	r4, [fp]
   1972c:	beq	1979c <__assert_fail@plt+0x7854>
   19730:	ldr	r3, [r8, #1468]	; 0x5bc
   19734:	cmp	r3, #0
   19738:	beq	19788 <__assert_fail@plt+0x7840>
   1973c:	ldr	r3, [r8, #1300]	; 0x514
   19740:	cmp	r3, #0
   19744:	beq	19774 <__assert_fail@plt+0x782c>
   19748:	ldr	r1, [pc, #1156]	; 19bd4 <__assert_fail@plt+0x7c8c>
   1974c:	mov	r0, r4
   19750:	bl	17bfc <__assert_fail@plt+0x5cb4>
   19754:	cmp	r0, #0
   19758:	bne	19788 <__assert_fail@plt+0x7840>
   1975c:	ldrb	r3, [r8, #1309]	; 0x51d
   19760:	cmp	r3, #0
   19764:	bne	1968c <__assert_fail@plt+0x7744>
   19768:	ldrb	r3, [r8, #1310]	; 0x51e
   1976c:	cmp	r3, #0
   19770:	bne	1968c <__assert_fail@plt+0x7744>
   19774:	ldr	r1, [pc, #1112]	; 19bd4 <__assert_fail@plt+0x7c8c>
   19778:	mov	r0, r4
   1977c:	bl	163c0 <__assert_fail@plt+0x4478>
   19780:	cmp	r0, #0
   19784:	beq	1968c <__assert_fail@plt+0x7744>
   19788:	ldr	r1, [pc, #1092]	; 19bd4 <__assert_fail@plt+0x7c8c>
   1978c:	ldrd	r2, [r4]
   19790:	strd	r2, [r1]
   19794:	ldrd	r2, [r4, #8]
   19798:	strd	r2, [r1, #8]
   1979c:	mov	r0, r5
   197a0:	ldr	r1, [sp, #116]	; 0x74
   197a4:	ldr	r2, [sp, #120]	; 0x78
   197a8:	bl	16874 <__assert_fail@plt+0x492c>
   197ac:	b	1968c <__assert_fail@plt+0x7744>
   197b0:	ldr	r5, [fp]
   197b4:	sub	r5, r5, #16
   197b8:	str	r5, [fp]
   197bc:	b	1979c <__assert_fail@plt+0x7854>
   197c0:	mov	r7, r6
   197c4:	mov	r1, r4
   197c8:	mov	r0, r5
   197cc:	ldr	r3, [sp, #28]
   197d0:	sub	r6, sl, r4
   197d4:	ldr	r9, [fp, #20]
   197d8:	ldr	r2, [fp, #24]
   197dc:	sub	ip, r3, r5
   197e0:	asr	r3, r6, #4
   197e4:	asr	ip, ip, #4
   197e8:	str	r9, [sp, #16]
   197ec:	cmp	r3, r2
   197f0:	mov	lr, r2
   197f4:	beq	19404 <__assert_fail@plt+0x74bc>
   197f8:	cmp	ip, r9
   197fc:	bne	19404 <__assert_fail@plt+0x74bc>
   19800:	ldr	r3, [fp, #12]
   19804:	cmp	r3, r4
   19808:	beq	198a0 <__assert_fail@plt+0x7958>
   1980c:	cmp	r7, #0
   19810:	sub	r7, r7, #1
   19814:	bne	19824 <__assert_fail@plt+0x78dc>
   19818:	b	198a0 <__assert_fail@plt+0x7958>
   1981c:	cmn	r7, #1
   19820:	beq	19890 <__assert_fail@plt+0x7948>
   19824:	ldrb	r3, [r8, #1309]	; 0x51d
   19828:	sub	r4, r1, #16
   1982c:	str	r4, [fp, #4]
   19830:	cmp	r3, #0
   19834:	beq	1986c <__assert_fail@plt+0x7924>
   19838:	ldr	r3, [r8, #1468]	; 0x5bc
   1983c:	mov	r0, r4
   19840:	ldr	r1, [pc, #908]	; 19bd4 <__assert_fail@plt+0x7c8c>
   19844:	cmp	r3, #0
   19848:	beq	19858 <__assert_fail@plt+0x7910>
   1984c:	bl	18cc0 <__assert_fail@plt+0x6d78>
   19850:	cmp	r0, #0
   19854:	beq	1987c <__assert_fail@plt+0x7934>
   19858:	ldr	r1, [pc, #884]	; 19bd4 <__assert_fail@plt+0x7c8c>
   1985c:	ldrd	r2, [r4]
   19860:	strd	r2, [r1]
   19864:	ldrd	r2, [r4, #8]
   19868:	strd	r2, [r1, #8]
   1986c:	mov	r0, r4
   19870:	ldr	r1, [sp, #116]	; 0x74
   19874:	ldr	r2, [sp, #120]	; 0x78
   19878:	bl	16874 <__assert_fail@plt+0x492c>
   1987c:	ldr	r1, [fp, #4]
   19880:	sub	r7, r7, #1
   19884:	ldr	r3, [fp, #12]
   19888:	cmp	r3, r1
   1988c:	bne	1981c <__assert_fail@plt+0x78d4>
   19890:	ldr	r5, [fp]
   19894:	sub	r6, sl, r1
   19898:	ldr	r9, [fp, #20]
   1989c:	ldr	r2, [fp, #24]
   198a0:	mov	r0, r5
   198a4:	asr	r3, r6, #4
   198a8:	mov	lr, r2
   198ac:	ldr	ip, [sp, #28]
   198b0:	str	r9, [sp, #16]
   198b4:	sub	ip, ip, r5
   198b8:	asr	ip, ip, #4
   198bc:	b	19404 <__assert_fail@plt+0x74bc>
   198c0:	ldr	r2, [fp, #20]
   198c4:	sub	r3, r4, r1
   198c8:	sub	ip, r5, r0
   198cc:	asr	r3, r3, #4
   198d0:	ldr	lr, [fp, #24]
   198d4:	asr	ip, ip, #4
   198d8:	str	r2, [sp, #16]
   198dc:	cmp	r3, lr
   198e0:	bne	1949c <__assert_fail@plt+0x7554>
   198e4:	cmp	r6, #0
   198e8:	sub	r4, r6, #1
   198ec:	bne	193ac <__assert_fail@plt+0x7464>
   198f0:	b	193fc <__assert_fail@plt+0x74b4>
   198f4:	ldr	r4, [sp, #20]
   198f8:	mov	r0, r4
   198fc:	bl	11a98 <pthread_mutex_lock@plt>
   19900:	ldr	r3, [sp, #112]	; 0x70
   19904:	mov	r1, fp
   19908:	ldr	r0, [r3]
   1990c:	bl	1ebd0 <__assert_fail@plt+0xcc88>
   19910:	mov	r3, #1
   19914:	ldr	r0, [sp, #24]
   19918:	strb	r3, [fp, #44]	; 0x2c
   1991c:	bl	11f18 <pthread_cond_signal@plt>
   19920:	mov	r0, r4
   19924:	bl	119f0 <pthread_mutex_unlock@plt>
   19928:	b	19450 <__assert_fail@plt+0x7508>
   1992c:	cmp	ip, #0
   19930:	moveq	ip, r1
   19934:	movne	ip, #0
   19938:	b	19448 <__assert_fail@plt+0x7500>
   1993c:	ldrd	r0, [fp]
   19940:	b	19358 <__assert_fail@plt+0x7410>
   19944:	ldr	r4, [fp]
   19948:	sub	r4, r4, #16
   1994c:	mov	r5, r4
   19950:	str	r4, [fp]
   19954:	b	19730 <__assert_fail@plt+0x77e8>
   19958:	mov	r7, r6
   1995c:	mov	r1, r4
   19960:	mov	r0, r5
   19964:	ldr	r2, [fp, #24]
   19968:	sub	r6, sl, r4
   1996c:	asr	r3, r6, #4
   19970:	cmp	r2, r3
   19974:	mov	lr, r2
   19978:	beq	19b44 <__assert_fail@plt+0x7bfc>
   1997c:	ldr	ip, [sp, #28]
   19980:	ldr	r9, [fp, #20]
   19984:	sub	ip, ip, r5
   19988:	asr	ip, ip, #4
   1998c:	str	r9, [sp, #16]
   19990:	b	197f8 <__assert_fail@plt+0x78b0>
   19994:	ldr	r2, [fp, #24]
   19998:	sub	r6, sl, r4
   1999c:	asr	r3, r6, #4
   199a0:	cmp	r2, r3
   199a4:	mov	lr, r2
   199a8:	mvnne	r7, #0
   199ac:	bne	1997c <__assert_fail@plt+0x7a34>
   199b0:	mvn	r7, #1
   199b4:	ldrb	r3, [r8, #1309]	; 0x51d
   199b8:	sub	r4, r0, #16
   199bc:	str	r4, [fp]
   199c0:	cmp	r3, #0
   199c4:	beq	19a34 <__assert_fail@plt+0x7aec>
   199c8:	ldr	r3, [r8, #1468]	; 0x5bc
   199cc:	cmp	r3, #0
   199d0:	beq	19a20 <__assert_fail@plt+0x7ad8>
   199d4:	ldr	r3, [r8, #1300]	; 0x514
   199d8:	cmp	r3, #0
   199dc:	beq	19a0c <__assert_fail@plt+0x7ac4>
   199e0:	ldr	r1, [pc, #492]	; 19bd4 <__assert_fail@plt+0x7c8c>
   199e4:	mov	r0, r4
   199e8:	bl	17bfc <__assert_fail@plt+0x5cb4>
   199ec:	cmp	r0, #0
   199f0:	bne	19a20 <__assert_fail@plt+0x7ad8>
   199f4:	ldrb	r3, [r8, #1309]	; 0x51d
   199f8:	cmp	r3, #0
   199fc:	bne	19a44 <__assert_fail@plt+0x7afc>
   19a00:	ldrb	r3, [r8, #1310]	; 0x51e
   19a04:	cmp	r3, #0
   19a08:	bne	19a44 <__assert_fail@plt+0x7afc>
   19a0c:	ldr	r1, [pc, #448]	; 19bd4 <__assert_fail@plt+0x7c8c>
   19a10:	mov	r0, r4
   19a14:	bl	163c0 <__assert_fail@plt+0x4478>
   19a18:	cmp	r0, #0
   19a1c:	beq	19a44 <__assert_fail@plt+0x7afc>
   19a20:	ldr	r1, [pc, #428]	; 19bd4 <__assert_fail@plt+0x7c8c>
   19a24:	ldrd	r2, [r4]
   19a28:	strd	r2, [r1]
   19a2c:	ldrd	r2, [r4, #8]
   19a30:	strd	r2, [r1, #8]
   19a34:	mov	r0, r4
   19a38:	ldr	r1, [sp, #116]	; 0x74
   19a3c:	ldr	r2, [sp, #120]	; 0x78
   19a40:	bl	16874 <__assert_fail@plt+0x492c>
   19a44:	ldr	r0, [fp]
   19a48:	ldr	r3, [fp, #8]
   19a4c:	cmp	r0, r3
   19a50:	beq	19b6c <__assert_fail@plt+0x7c24>
   19a54:	subs	r7, r7, #1
   19a58:	bcs	199b4 <__assert_fail@plt+0x7a6c>
   19a5c:	ldr	r4, [fp, #4]
   19a60:	ldr	r2, [fp, #24]
   19a64:	mov	lr, r2
   19a68:	mov	r1, r4
   19a6c:	ldr	r3, [sp, #28]
   19a70:	ldr	r2, [fp, #20]
   19a74:	sub	ip, r3, r0
   19a78:	sub	r3, sl, r4
   19a7c:	asr	ip, ip, #4
   19a80:	asr	r3, r3, #4
   19a84:	str	r2, [sp, #16]
   19a88:	b	19404 <__assert_fail@plt+0x74bc>
   19a8c:	ldr	r0, [sp, #36]	; 0x24
   19a90:	bl	119f0 <pthread_mutex_unlock@plt>
   19a94:	ldr	r4, [sp, #20]
   19a98:	mov	r0, r4
   19a9c:	bl	11a98 <pthread_mutex_lock@plt>
   19aa0:	ldr	r3, [sp, #112]	; 0x70
   19aa4:	mov	r1, fp
   19aa8:	ldr	r0, [r3]
   19aac:	bl	1ebd0 <__assert_fail@plt+0xcc88>
   19ab0:	mov	r3, #1
   19ab4:	ldr	r0, [sp, #24]
   19ab8:	strb	r3, [fp, #44]	; 0x2c
   19abc:	bl	11f18 <pthread_cond_signal@plt>
   19ac0:	mov	r0, r4
   19ac4:	bl	119f0 <pthread_mutex_unlock@plt>
   19ac8:	add	sp, sp, #76	; 0x4c
   19acc:	ldrd	r4, [sp]
   19ad0:	ldrd	r6, [sp, #8]
   19ad4:	ldrd	r8, [sp, #16]
   19ad8:	ldrd	sl, [sp, #24]
   19adc:	add	sp, sp, #32
   19ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ae4:	cmp	r2, r3
   19ae8:	beq	195c4 <__assert_fail@plt+0x767c>
   19aec:	ldr	r3, [r4, #20]
   19af0:	cmp	r3, #0
   19af4:	beq	1958c <__assert_fail@plt+0x7644>
   19af8:	add	r0, r4, #48	; 0x30
   19afc:	bl	119f0 <pthread_mutex_unlock@plt>
   19b00:	b	1946c <__assert_fail@plt+0x7524>
   19b04:	ldr	r4, [sp, #28]
   19b08:	sub	r4, r4, r1
   19b0c:	asr	r3, r4, #4
   19b10:	b	193fc <__assert_fail@plt+0x74b4>
   19b14:	mov	r5, r1
   19b18:	movw	r2, #39896	; 0x9bd8
   19b1c:	movt	r2, #1
   19b20:	add	r3, sp, #44	; 0x2c
   19b24:	mov	r1, #0
   19b28:	add	r0, sp, #40	; 0x28
   19b2c:	bl	11c6c <pthread_create@plt>
   19b30:	subs	r7, r0, #0
   19b34:	beq	19b94 <__assert_fail@plt+0x7c4c>
   19b38:	ldr	r7, [r4, #20]
   19b3c:	ldr	r8, [r4, #24]
   19b40:	b	19168 <__assert_fail@plt+0x7220>
   19b44:	cmp	r7, #0
   19b48:	sub	r7, r7, #1
   19b4c:	bne	199b4 <__assert_fail@plt+0x7a6c>
   19b50:	b	19a64 <__assert_fail@plt+0x7b1c>
   19b54:	ldr	r3, [r4, #24]
   19b58:	cmp	r3, #0
   19b5c:	beq	1958c <__assert_fail@plt+0x7644>
   19b60:	add	r0, r4, #48	; 0x30
   19b64:	bl	119f0 <pthread_mutex_unlock@plt>
   19b68:	b	1946c <__assert_fail@plt+0x7524>
   19b6c:	ldr	r3, [sp, #28]
   19b70:	ldr	r1, [fp, #4]
   19b74:	ldr	lr, [fp, #24]
   19b78:	sub	ip, r3, r0
   19b7c:	ldr	r3, [fp, #20]
   19b80:	asr	ip, ip, #4
   19b84:	str	r3, [sp, #16]
   19b88:	sub	r3, sl, r1
   19b8c:	asr	r3, r3, #4
   19b90:	b	19404 <__assert_fail@plt+0x74bc>
   19b94:	ldr	r0, [r4, #20]
   19b98:	sub	r1, r5, r9
   19b9c:	ldr	r3, [sp, #112]	; 0x70
   19ba0:	ldr	r2, [sp, #32]
   19ba4:	sub	r0, r6, r0, lsl #4
   19ba8:	str	r3, [sp]
   19bac:	ldr	r3, [sp, #116]	; 0x74
   19bb0:	str	r3, [sp, #4]
   19bb4:	ldr	r3, [sp, #120]	; 0x78
   19bb8:	str	r3, [sp, #8]
   19bbc:	ldr	r3, [r4, #36]	; 0x24
   19bc0:	bl	190fc <__assert_fail@plt+0x71b4>
   19bc4:	mov	r1, r7
   19bc8:	ldr	r0, [sp, #40]	; 0x28
   19bcc:	bl	11e64 <pthread_join@plt>
   19bd0:	b	19ac8 <__assert_fail@plt+0x7b80>
   19bd4:	muleq	r3, ip, r8
   19bd8:	mov	r3, r0
   19bdc:	ldrd	r0, [r0, #16]
   19be0:	push	{lr}		; (str lr, [sp, #-4]!)
   19be4:	sub	sp, sp, #20
   19be8:	ldr	r2, [r3, #24]
   19bec:	str	r0, [sp]
   19bf0:	ldr	r0, [r3]
   19bf4:	str	r1, [sp, #4]
   19bf8:	ldr	r1, [r3, #4]
   19bfc:	str	r2, [sp, #8]
   19c00:	ldrd	r2, [r3, #8]
   19c04:	bl	190fc <__assert_fail@plt+0x71b4>
   19c08:	mov	r0, #0
   19c0c:	add	sp, sp, #20
   19c10:	pop	{pc}		; (ldr pc, [sp], #4)
   19c14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19c18:	mov	r4, r2
   19c1c:	strd	r6, [sp, #8]
   19c20:	mov	r7, r0
   19c24:	mov	r6, #0
   19c28:	strd	r8, [sp, #16]
   19c2c:	movw	r8, #41696	; 0xa2e0
   19c30:	movt	r8, #3
   19c34:	strd	sl, [sp, #24]
   19c38:	str	lr, [sp, #32]
   19c3c:	sub	sp, sp, #76	; 0x4c
   19c40:	str	r2, [sp, #12]
   19c44:	str	r0, [sp, #32]
   19c48:	mov	r0, r2
   19c4c:	str	r1, [sp, #40]	; 0x28
   19c50:	mov	r1, #28
   19c54:	str	r3, [sp, #36]	; 0x24
   19c58:	bl	24d54 <__assert_fail@plt+0x12e0c>
   19c5c:	mov	r1, #4
   19c60:	str	r0, [sp, #16]
   19c64:	mov	r0, r4
   19c68:	bl	24d54 <__assert_fail@plt+0x12e0c>
   19c6c:	mov	fp, r0
   19c70:	mov	r1, #4
   19c74:	mov	r0, r4
   19c78:	bl	24d54 <__assert_fail@plt+0x12e0c>
   19c7c:	mov	r1, #4
   19c80:	str	r0, [sp, #24]
   19c84:	mov	r0, r4
   19c88:	bl	24d54 <__assert_fail@plt+0x12e0c>
   19c8c:	ldr	r3, [r8, #1300]	; 0x514
   19c90:	cmp	r4, r6
   19c94:	mov	r5, r0
   19c98:	str	r3, [sp, #48]	; 0x30
   19c9c:	str	r6, [sp, #56]	; 0x38
   19ca0:	beq	19e78 <__assert_fail@plt+0x7f30>
   19ca4:	movw	r3, #41444	; 0xa1e4
   19ca8:	movt	r3, #3
   19cac:	mov	sl, r6
   19cb0:	mov	r9, r6
   19cb4:	str	r3, [sp, #8]
   19cb8:	sub	r3, r7, #8
   19cbc:	str	fp, [sp, #20]
   19cc0:	mov	fp, r7
   19cc4:	str	r3, [sp, #44]	; 0x2c
   19cc8:	str	r0, [sp, #52]	; 0x34
   19ccc:	ldr	r1, [sp, #12]
   19cd0:	sub	r7, sl, r6
   19cd4:	ldr	r2, [sp, #16]
   19cd8:	ldr	r3, [r8, #1484]	; 0x5cc
   19cdc:	add	r4, r2, r7, lsl #2
   19ce0:	ldr	r2, [sp, #8]
   19ce4:	udiv	r3, r3, r1
   19ce8:	ldr	r2, [r2, #112]	; 0x70
   19cec:	cmp	r3, r2
   19cf0:	movcc	r3, r2
   19cf4:	mov	r5, r3
   19cf8:	b	19d08 <__assert_fail@plt+0x7dc0>
   19cfc:	cmp	r5, #35	; 0x23
   19d00:	lsr	r5, r5, #1
   19d04:	bls	1a45c <__assert_fail@plt+0x8514>
   19d08:	bic	r5, r5, #15
   19d0c:	add	r5, r5, #16
   19d10:	mov	r0, r5
   19d14:	bl	262d0 <__assert_fail@plt+0x14388>
   19d18:	cmp	r0, #0
   19d1c:	str	r0, [r4]
   19d20:	beq	19cfc <__assert_fail@plt+0x7db4>
   19d24:	ldr	r3, [sp, #116]	; 0x74
   19d28:	mov	r0, r4
   19d2c:	str	r9, [r4, #4]
   19d30:	str	r9, [r4, #8]
   19d34:	str	r5, [r4, #12]
   19d38:	str	r9, [r4, #16]
   19d3c:	add	r3, r3, r6, lsl #2
   19d40:	strb	r9, [r4, #24]
   19d44:	ldr	r2, [fp, sl]
   19d48:	str	r3, [sp, #4]
   19d4c:	ldr	r3, [sp, #116]	; 0x74
   19d50:	ldr	r1, [r3, r6, lsl #2]
   19d54:	mov	r3, #16
   19d58:	str	r3, [r4, #20]
   19d5c:	bl	171c8 <__assert_fail@plt+0x5280>
   19d60:	cmp	r0, #0
   19d64:	add	r3, fp, sl
   19d68:	beq	19db0 <__assert_fail@plt+0x7e68>
   19d6c:	ldr	r3, [sp, #16]
   19d70:	ldr	r1, [r4, #8]
   19d74:	ldr	r2, [r4, #12]
   19d78:	ldr	r3, [r3, r7, lsl #2]
   19d7c:	add	r3, r3, r2
   19d80:	sub	r2, r3, #16
   19d84:	sub	r3, r3, r1, lsl #4
   19d88:	ldr	r1, [sp, #20]
   19d8c:	str	r2, [r1, r6, lsl #2]
   19d90:	ldr	r2, [sp, #24]
   19d94:	str	r3, [r2, r6, lsl #2]
   19d98:	add	r6, r6, #1
   19d9c:	ldr	r3, [sp, #12]
   19da0:	cmp	r6, r3
   19da4:	bcs	19ec8 <__assert_fail@plt+0x7f80>
   19da8:	lsl	sl, r6, #3
   19dac:	b	19ccc <__assert_fail@plt+0x7d84>
   19db0:	str	r3, [sp, #28]
   19db4:	ldr	r3, [sp, #116]	; 0x74
   19db8:	ldr	r1, [fp, sl]
   19dbc:	ldr	r0, [r3, r6, lsl #2]
   19dc0:	bl	16328 <__assert_fail@plt+0x43e0>
   19dc4:	ldr	r3, [sp, #40]	; 0x28
   19dc8:	cmp	r6, r3
   19dcc:	ldr	r3, [sp, #28]
   19dd0:	bcc	1a420 <__assert_fail@plt+0x84d8>
   19dd4:	ldr	r3, [sp, #12]
   19dd8:	sub	lr, r3, #1
   19ddc:	ldr	r3, [sp, #16]
   19de0:	mov	r4, lr
   19de4:	str	lr, [sp, #12]
   19de8:	ldr	r0, [r3, r7, lsl #2]
   19dec:	bl	1d29c <__assert_fail@plt+0xb354>
   19df0:	cmp	r4, r6
   19df4:	mov	lr, r4
   19df8:	bls	19ec8 <__assert_fail@plt+0x7f80>
   19dfc:	ldr	r5, [sp, #4]
   19e00:	mov	r1, r6
   19e04:	ldr	r4, [sp, #44]	; 0x2c
   19e08:	add	r1, r1, #1
   19e0c:	lsl	r0, r1, #3
   19e10:	ldr	ip, [r5, #4]
   19e14:	cmp	r1, lr
   19e18:	ldrd	r2, [fp, r0]
   19e1c:	strd	r2, [r4, r0]
   19e20:	str	ip, [r5], #4
   19e24:	bne	19e08 <__assert_fail@plt+0x7ec0>
   19e28:	b	19ccc <__assert_fail@plt+0x7d84>
   19e2c:	cmp	r9, #0
   19e30:	str	sl, [fp]
   19e34:	bne	1a460 <__assert_fail@plt+0x8518>
   19e38:	mov	r3, r5
   19e3c:	mov	r5, fp
   19e40:	ldr	r2, [sp, #28]
   19e44:	mov	fp, r3
   19e48:	ldrb	r3, [r8, #1309]	; 0x51d
   19e4c:	cmp	r2, #0
   19e50:	moveq	r3, #0
   19e54:	andne	r3, r3, #1
   19e58:	cmp	r3, #0
   19e5c:	beq	19e78 <__assert_fail@plt+0x7f30>
   19e60:	add	r0, sp, #56	; 0x38
   19e64:	ldr	r1, [sp, #36]	; 0x24
   19e68:	ldr	r2, [sp, #112]	; 0x70
   19e6c:	bl	16874 <__assert_fail@plt+0x492c>
   19e70:	ldr	r0, [sp, #56]	; 0x38
   19e74:	bl	1d29c <__assert_fail@plt+0xb354>
   19e78:	ldr	r0, [sp, #36]	; 0x24
   19e7c:	ldr	r1, [sp, #112]	; 0x70
   19e80:	bl	16328 <__assert_fail@plt+0x43e0>
   19e84:	ldr	r0, [sp, #116]	; 0x74
   19e88:	bl	1d29c <__assert_fail@plt+0xb354>
   19e8c:	ldr	r0, [sp, #16]
   19e90:	bl	1d29c <__assert_fail@plt+0xb354>
   19e94:	mov	r0, r5
   19e98:	bl	1d29c <__assert_fail@plt+0xb354>
   19e9c:	ldr	r0, [sp, #24]
   19ea0:	bl	1d29c <__assert_fail@plt+0xb354>
   19ea4:	mov	r0, fp
   19ea8:	bl	1d29c <__assert_fail@plt+0xb354>
   19eac:	add	sp, sp, #76	; 0x4c
   19eb0:	ldrd	r4, [sp]
   19eb4:	ldrd	r6, [sp, #8]
   19eb8:	ldrd	r8, [sp, #16]
   19ebc:	ldrd	sl, [sp, #24]
   19ec0:	add	sp, sp, #32
   19ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ec8:	ldr	r3, [sp, #12]
   19ecc:	ldr	fp, [sp, #20]
   19ed0:	ldr	r5, [sp, #52]	; 0x34
   19ed4:	cmp	r3, #0
   19ed8:	beq	19e78 <__assert_fail@plt+0x7f30>
   19edc:	sub	r3, r3, #1
   19ee0:	ubfx	r0, r5, #2, #1
   19ee4:	cmp	r3, #4
   19ee8:	bls	1a440 <__assert_fail@plt+0x84f8>
   19eec:	cmp	r0, #0
   19ef0:	mov	r1, r0
   19ef4:	movne	r3, #0
   19ef8:	add	r2, r0, #1
   19efc:	strne	r3, [r5]
   19f00:	ldr	r3, [sp, #12]
   19f04:	sub	lr, r3, r0
   19f08:	add	r3, r5, r0, lsl #2
   19f0c:	lsr	ip, lr, #1
   19f10:	add	ip, r3, ip, lsl #3
   19f14:	stm	r3, {r1, r2}
   19f18:	add	r3, r3, #8
   19f1c:	add	r1, r1, #2
   19f20:	cmp	r3, ip
   19f24:	add	r2, r2, #2
   19f28:	bne	19f14 <__assert_fail@plt+0x7fcc>
   19f2c:	bic	r3, lr, #1
   19f30:	cmp	lr, r3
   19f34:	add	r0, r0, r3
   19f38:	beq	19f84 <__assert_fail@plt+0x803c>
   19f3c:	ldr	r2, [sp, #12]
   19f40:	add	r3, r0, #1
   19f44:	str	r0, [r5, r0, lsl #2]
   19f48:	cmp	r2, r3
   19f4c:	bls	19f84 <__assert_fail@plt+0x803c>
   19f50:	ldr	r0, [sp, #12]
   19f54:	add	r2, r3, #1
   19f58:	str	r3, [r5, r3, lsl #2]
   19f5c:	cmp	r2, r0
   19f60:	bcs	19f84 <__assert_fail@plt+0x803c>
   19f64:	add	r1, r3, #2
   19f68:	str	r2, [r5, r2, lsl #2]
   19f6c:	cmp	r0, r1
   19f70:	bls	19f84 <__assert_fail@plt+0x803c>
   19f74:	add	r3, r3, #3
   19f78:	str	r1, [r5, r1, lsl #2]
   19f7c:	cmp	r0, r3
   19f80:	strhi	r3, [r5, r3, lsl #2]
   19f84:	mov	sl, #1
   19f88:	sub	r4, sl, #-1073741823	; 0xc0000001
   19f8c:	lsl	r3, r4, #2
   19f90:	ldr	r2, [r5, r4, lsl #2]
   19f94:	add	r6, r3, #4
   19f98:	add	r7, r5, r3
   19f9c:	ldr	r3, [r5, r6]
   19fa0:	add	r9, r5, r6
   19fa4:	ldr	r0, [fp, r2, lsl #2]
   19fa8:	ldr	r1, [fp, r3, lsl #2]
   19fac:	bl	18cc0 <__assert_fail@plt+0x6d78>
   19fb0:	cmp	r0, #0
   19fb4:	ble	19fd0 <__assert_fail@plt+0x8088>
   19fb8:	ldr	r3, [r9, #-4]
   19fbc:	mov	sl, #1
   19fc0:	ldr	r2, [r5, r6]
   19fc4:	str	r2, [r5, r4, lsl #2]
   19fc8:	str	r3, [r7, #4]
   19fcc:	b	19f88 <__assert_fail@plt+0x8040>
   19fd0:	ldr	r3, [sp, #12]
   19fd4:	add	sl, sl, #1
   19fd8:	cmp	sl, r3
   19fdc:	bcc	19f88 <__assert_fail@plt+0x8040>
   19fe0:	mov	r3, #0
   19fe4:	str	r3, [sp, #28]
   19fe8:	str	r3, [sp, #44]	; 0x2c
   19fec:	mov	r3, fp
   19ff0:	mov	fp, r5
   19ff4:	mov	r5, r3
   19ff8:	ldrb	r1, [r8, #1309]	; 0x51d
   19ffc:	ldr	r2, [fp]
   1a000:	cmp	r1, #0
   1a004:	ldr	r7, [r5, r2, lsl #2]
   1a008:	beq	1a1c8 <__assert_fail@plt+0x8280>
   1a00c:	ldr	r3, [sp, #28]
   1a010:	cmp	r3, #0
   1a014:	beq	1a1ec <__assert_fail@plt+0x82a4>
   1a018:	mov	r1, r7
   1a01c:	mov	r0, r3
   1a020:	bl	18cc0 <__assert_fail@plt+0x6d78>
   1a024:	cmp	r0, #0
   1a028:	bne	1a1dc <__assert_fail@plt+0x8294>
   1a02c:	ldr	sl, [fp]
   1a030:	ldr	r3, [sp, #24]
   1a034:	ldr	r2, [r3, sl, lsl #2]
   1a038:	lsl	r3, sl, #2
   1a03c:	cmp	r2, r7
   1a040:	bcc	1a1b4 <__assert_fail@plt+0x826c>
   1a044:	ldr	r3, [sp, #32]
   1a048:	rsb	r0, sl, sl, lsl #3
   1a04c:	ldr	r2, [r3, sl, lsl #3]
   1a050:	ldr	r3, [sp, #16]
   1a054:	add	r0, r3, r0, lsl #2
   1a058:	ldr	r3, [sp, #116]	; 0x74
   1a05c:	ldr	r1, [r3, sl, lsl #2]
   1a060:	bl	171c8 <__assert_fail@plt+0x5280>
   1a064:	cmp	r0, #0
   1a068:	beq	1a250 <__assert_fail@plt+0x8308>
   1a06c:	ldr	sl, [fp]
   1a070:	add	r3, r5, sl, lsl #2
   1a074:	rsb	r2, sl, sl, lsl #3
   1a078:	str	r3, [sp, #8]
   1a07c:	ldr	r3, [sp, #16]
   1a080:	add	r1, r3, r2, lsl #2
   1a084:	ldr	r2, [r3, r2, lsl #2]
   1a088:	ldr	r0, [r1, #12]
   1a08c:	ldr	r1, [r1, #8]
   1a090:	ldr	r3, [sp, #24]
   1a094:	add	r2, r2, r0
   1a098:	sub	r7, r2, #16
   1a09c:	sub	r2, r2, r1, lsl #4
   1a0a0:	str	r7, [r5, sl, lsl #2]
   1a0a4:	str	r2, [r3, sl, lsl #2]
   1a0a8:	ldr	r9, [sp, #12]
   1a0ac:	cmp	r9, #1
   1a0b0:	bls	19e2c <__assert_fail@plt+0x7ee4>
   1a0b4:	mov	r4, #1
   1a0b8:	str	r5, [sp, #4]
   1a0bc:	mov	r5, r7
   1a0c0:	mov	r6, r4
   1a0c4:	str	sl, [sp, #20]
   1a0c8:	mov	sl, r8
   1a0cc:	b	1a0f0 <__assert_fail@plt+0x81a8>
   1a0d0:	beq	1a190 <__assert_fail@plt+0x8248>
   1a0d4:	add	r6, r4, #1
   1a0d8:	add	r4, r6, r9
   1a0dc:	cmp	r6, r9
   1a0e0:	lsr	r4, r4, #1
   1a0e4:	bcs	1a160 <__assert_fail@plt+0x8218>
   1a0e8:	ldr	r3, [sp, #8]
   1a0ec:	ldr	r5, [r3]
   1a0f0:	lsl	r8, r4, #2
   1a0f4:	ldr	r0, [sl, #1300]	; 0x514
   1a0f8:	ldr	r1, [fp, r4, lsl #2]
   1a0fc:	ldr	r3, [sp, #4]
   1a100:	cmp	r0, #0
   1a104:	ldr	r7, [r3, r1, lsl #2]
   1a108:	beq	1a138 <__assert_fail@plt+0x81f0>
   1a10c:	mov	r1, r7
   1a110:	mov	r0, r5
   1a114:	bl	17bfc <__assert_fail@plt+0x5cb4>
   1a118:	cmp	r0, #0
   1a11c:	bne	1a1a8 <__assert_fail@plt+0x8260>
   1a120:	ldrb	r1, [sl, #1309]	; 0x51d
   1a124:	cmp	r1, #0
   1a128:	bne	1a190 <__assert_fail@plt+0x8248>
   1a12c:	ldrb	r1, [sl, #1310]	; 0x51e
   1a130:	cmp	r1, #0
   1a134:	bne	1a190 <__assert_fail@plt+0x8248>
   1a138:	mov	r1, r7
   1a13c:	mov	r0, r5
   1a140:	bl	163c0 <__assert_fail@plt+0x4478>
   1a144:	cmp	r0, #0
   1a148:	bge	1a0d0 <__assert_fail@plt+0x8188>
   1a14c:	mov	r9, r4
   1a150:	add	r4, r6, r9
   1a154:	cmp	r6, r9
   1a158:	lsr	r4, r4, #1
   1a15c:	bcc	1a0e8 <__assert_fail@plt+0x81a0>
   1a160:	subs	r4, r6, #1
   1a164:	mov	r8, sl
   1a168:	ldr	r5, [sp, #4]
   1a16c:	ldr	sl, [sp, #20]
   1a170:	beq	1a188 <__assert_fail@plt+0x8240>
   1a174:	sub	r2, r6, #-1073741823	; 0xc0000001
   1a178:	add	r1, fp, #4
   1a17c:	lsl	r2, r2, #2
   1a180:	mov	r0, fp
   1a184:	bl	11a80 <memmove@plt>
   1a188:	str	sl, [fp, r4, lsl #2]
   1a18c:	b	19ff8 <__assert_fail@plt+0x80b0>
   1a190:	ldr	r1, [fp, r8]
   1a194:	ldr	r3, [sp, #20]
   1a198:	cmp	r1, r3
   1a19c:	bls	1a0d4 <__assert_fail@plt+0x818c>
   1a1a0:	mov	r9, r4
   1a1a4:	b	1a150 <__assert_fail@plt+0x8208>
   1a1a8:	bge	1a0d4 <__assert_fail@plt+0x818c>
   1a1ac:	mov	r9, r4
   1a1b0:	b	1a150 <__assert_fail@plt+0x8208>
   1a1b4:	sub	r7, r7, #16
   1a1b8:	add	r3, r5, r3
   1a1bc:	str	r7, [r5, sl, lsl #2]
   1a1c0:	str	r3, [sp, #8]
   1a1c4:	b	1a0a8 <__assert_fail@plt+0x8160>
   1a1c8:	mov	r0, r7
   1a1cc:	ldr	r1, [sp, #36]	; 0x24
   1a1d0:	ldr	r2, [sp, #112]	; 0x70
   1a1d4:	bl	16874 <__assert_fail@plt+0x492c>
   1a1d8:	b	1a02c <__assert_fail@plt+0x80e4>
   1a1dc:	add	r0, sp, #56	; 0x38
   1a1e0:	ldr	r1, [sp, #36]	; 0x24
   1a1e4:	ldr	r2, [sp, #112]	; 0x70
   1a1e8:	bl	16874 <__assert_fail@plt+0x492c>
   1a1ec:	ldr	r4, [r7, #4]
   1a1f0:	ldr	r3, [sp, #44]	; 0x2c
   1a1f4:	ldr	r0, [sp, #56]	; 0x38
   1a1f8:	cmp	r4, r3
   1a1fc:	bhi	1a3a4 <__assert_fail@plt+0x845c>
   1a200:	mov	r2, r4
   1a204:	ldr	r1, [r7]
   1a208:	str	r4, [sp, #60]	; 0x3c
   1a20c:	bl	11ac8 <memcpy@plt>
   1a210:	ldr	r3, [sp, #48]	; 0x30
   1a214:	cmp	r3, #0
   1a218:	beq	1a398 <__assert_fail@plt+0x8450>
   1a21c:	ldr	ip, [r7]
   1a220:	add	r3, sp, #56	; 0x38
   1a224:	ldr	r2, [r7, #8]
   1a228:	str	r3, [sp, #28]
   1a22c:	ldr	r0, [r7, #12]
   1a230:	ldr	r1, [sp, #56]	; 0x38
   1a234:	sub	r2, r2, ip
   1a238:	sub	r0, r0, ip
   1a23c:	add	r2, r1, r2
   1a240:	add	r1, r1, r0
   1a244:	str	r2, [sp, #64]	; 0x40
   1a248:	str	r1, [sp, #68]	; 0x44
   1a24c:	b	1a02c <__assert_fail@plt+0x80e4>
   1a250:	ldr	r3, [sp, #12]
   1a254:	ldr	r0, [fp]
   1a258:	cmp	r3, #1
   1a25c:	addhi	ip, fp, r3, lsl #2
   1a260:	addhi	r2, fp, #4
   1a264:	bls	1a288 <__assert_fail@plt+0x8340>
   1a268:	ldr	r3, [r2], #4
   1a26c:	cmp	r3, r0
   1a270:	bls	1a280 <__assert_fail@plt+0x8338>
   1a274:	sub	r3, r3, #1
   1a278:	str	r3, [r2, #-4]
   1a27c:	ldr	r0, [fp]
   1a280:	cmp	ip, r2
   1a284:	bne	1a268 <__assert_fail@plt+0x8320>
   1a288:	ldr	r3, [sp, #32]
   1a28c:	ldr	r1, [r3, r0, lsl #3]
   1a290:	ldr	r3, [sp, #12]
   1a294:	sub	r9, r3, #1
   1a298:	ldr	r3, [sp, #116]	; 0x74
   1a29c:	ldr	r0, [r3, r0, lsl #2]
   1a2a0:	bl	16328 <__assert_fail@plt+0x43e0>
   1a2a4:	ldr	r2, [fp]
   1a2a8:	ldr	r3, [sp, #40]	; 0x28
   1a2ac:	cmp	r2, r3
   1a2b0:	bcc	1a400 <__assert_fail@plt+0x84b8>
   1a2b4:	ldr	r3, [sp, #16]
   1a2b8:	rsb	r2, r2, r2, lsl #3
   1a2bc:	ldr	r0, [r3, r2, lsl #2]
   1a2c0:	bl	1d29c <__assert_fail@plt+0xb354>
   1a2c4:	ldr	r4, [fp]
   1a2c8:	cmp	r9, r4
   1a2cc:	bls	1a38c <__assert_fail@plt+0x8444>
   1a2d0:	ldr	sl, [sp, #32]
   1a2d4:	lsl	r7, r4, #2
   1a2d8:	mov	r2, r4
   1a2dc:	ldr	r3, [sp, #116]	; 0x74
   1a2e0:	sub	r6, sl, #8
   1a2e4:	add	ip, r3, r7
   1a2e8:	add	r2, r2, #1
   1a2ec:	ldr	lr, [ip, #4]
   1a2f0:	lsl	r3, r2, #3
   1a2f4:	cmp	r9, r2
   1a2f8:	ldrd	r0, [sl, r3]
   1a2fc:	str	lr, [ip], #4
   1a300:	strd	r0, [r6, r3]
   1a304:	bne	1a2e8 <__assert_fail@plt+0x83a0>
   1a308:	ldr	sl, [sp, #12]
   1a30c:	rsb	r0, r4, r4, lsl #3
   1a310:	add	r6, r7, #4
   1a314:	ldr	r3, [sp, #16]
   1a318:	lsl	r0, r0, #2
   1a31c:	add	r1, r0, #28
   1a320:	sub	r2, sl, r4
   1a324:	sub	r4, sl, r4
   1a328:	rsb	r2, r2, r2, lsl #3
   1a32c:	sub	r4, r4, #-1073741823	; 0xc0000001
   1a330:	lsl	r4, r4, #2
   1a334:	add	r1, r3, r1
   1a338:	add	r0, r3, r0
   1a33c:	lsl	r2, r2, #2
   1a340:	sub	r2, r2, #28
   1a344:	bl	11a80 <memmove@plt>
   1a348:	add	r1, r5, r6
   1a34c:	mov	r2, r4
   1a350:	add	r0, r5, r7
   1a354:	bl	11a80 <memmove@plt>
   1a358:	ldr	r3, [sp, #24]
   1a35c:	mov	r2, r4
   1a360:	add	r1, r3, r6
   1a364:	add	r0, r3, r7
   1a368:	bl	11a80 <memmove@plt>
   1a36c:	ldr	r3, [sp, #12]
   1a370:	add	r1, fp, #4
   1a374:	mov	r0, fp
   1a378:	str	r9, [sp, #12]
   1a37c:	sub	r2, r3, #-1073741823	; 0xc0000001
   1a380:	lsl	r2, r2, #2
   1a384:	bl	11a80 <memmove@plt>
   1a388:	b	19ff8 <__assert_fail@plt+0x80b0>
   1a38c:	cmp	r9, #0
   1a390:	bne	1a36c <__assert_fail@plt+0x8424>
   1a394:	b	19e38 <__assert_fail@plt+0x7ef0>
   1a398:	add	r3, sp, #56	; 0x38
   1a39c:	str	r3, [sp, #28]
   1a3a0:	b	1a02c <__assert_fail@plt+0x80e4>
   1a3a4:	cmp	r3, #0
   1a3a8:	beq	1a3e4 <__assert_fail@plt+0x849c>
   1a3ac:	lsl	r2, r3, #1
   1a3b0:	cmp	r4, r2
   1a3b4:	bls	1a438 <__assert_fail@plt+0x84f0>
   1a3b8:	cmp	r2, #0
   1a3bc:	beq	1a3e4 <__assert_fail@plt+0x849c>
   1a3c0:	lsl	r2, r3, #2
   1a3c4:	cmp	r4, r2
   1a3c8:	bhi	1a3dc <__assert_fail@plt+0x8494>
   1a3cc:	b	1a438 <__assert_fail@plt+0x84f0>
   1a3d0:	lsl	r2, r2, #1
   1a3d4:	cmp	r4, r2
   1a3d8:	bls	1a438 <__assert_fail@plt+0x84f0>
   1a3dc:	cmp	r2, #0
   1a3e0:	bne	1a3d0 <__assert_fail@plt+0x8488>
   1a3e4:	str	r4, [sp, #44]	; 0x2c
   1a3e8:	bl	1d29c <__assert_fail@plt+0xb354>
   1a3ec:	mov	r0, r4
   1a3f0:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   1a3f4:	str	r0, [sp, #56]	; 0x38
   1a3f8:	ldr	r4, [r7, #4]
   1a3fc:	b	1a200 <__assert_fail@plt+0x82b8>
   1a400:	ldr	r3, [sp, #32]
   1a404:	ldr	r0, [r3, r2, lsl #3]
   1a408:	ldr	r3, [sp, #40]	; 0x28
   1a40c:	sub	r3, r3, #1
   1a410:	str	r3, [sp, #40]	; 0x28
   1a414:	bl	17064 <__assert_fail@plt+0x511c>
   1a418:	ldr	r2, [fp]
   1a41c:	b	1a2b4 <__assert_fail@plt+0x836c>
   1a420:	ldr	r0, [r3]
   1a424:	ldr	r3, [sp, #40]	; 0x28
   1a428:	sub	r3, r3, #1
   1a42c:	str	r3, [sp, #40]	; 0x28
   1a430:	bl	17064 <__assert_fail@plt+0x511c>
   1a434:	b	19dd4 <__assert_fail@plt+0x7e8c>
   1a438:	mov	r4, r2
   1a43c:	b	1a3e4 <__assert_fail@plt+0x849c>
   1a440:	ldr	r2, [sp, #12]
   1a444:	mov	r3, #0
   1a448:	str	r3, [r5]
   1a44c:	cmp	r2, #1
   1a450:	beq	19fe0 <__assert_fail@plt+0x8098>
   1a454:	mov	r3, #1
   1a458:	b	19f50 <__assert_fail@plt+0x8008>
   1a45c:	bl	251a8 <__assert_fail@plt+0x13260>
   1a460:	mov	r3, #1
   1a464:	str	r3, [sp, #12]
   1a468:	b	19ff8 <__assert_fail@plt+0x80b0>
   1a46c:	strd	r4, [sp, #-16]!
   1a470:	mov	r1, #0
   1a474:	str	r6, [sp, #8]
   1a478:	mov	r6, r0
   1a47c:	str	lr, [sp, #12]
   1a480:	sub	sp, sp, #24
   1a484:	add	r0, sp, #12
   1a488:	bl	15f60 <__assert_fail@plt+0x4018>
   1a48c:	subs	r4, r0, #0
   1a490:	beq	1a4e8 <__assert_fail@plt+0x85a0>
   1a494:	movw	r5, #41696	; 0xa2e0
   1a498:	movt	r5, #3
   1a49c:	ldr	r3, [r5, #1284]	; 0x504
   1a4a0:	mov	r2, #0
   1a4a4:	strb	r2, [r4, #8]
   1a4a8:	cmp	r3, r2
   1a4ac:	beq	1a4cc <__assert_fail@plt+0x8584>
   1a4b0:	mov	r1, #4
   1a4b4:	add	r0, sp, #16
   1a4b8:	bl	166c0 <__assert_fail@plt+0x4778>
   1a4bc:	cmp	r0, #0
   1a4c0:	str	r0, [r4, #4]
   1a4c4:	bgt	1a500 <__assert_fail@plt+0x85b8>
   1a4c8:	beq	1a588 <__assert_fail@plt+0x8640>
   1a4cc:	movw	r1, #31668	; 0x7bb4
   1a4d0:	movt	r1, #2
   1a4d4:	ldr	r0, [sp, #12]
   1a4d8:	bl	119fc <fdopen@plt>
   1a4dc:	cmp	r0, #0
   1a4e0:	str	r0, [r6]
   1a4e4:	beq	1a570 <__assert_fail@plt+0x8628>
   1a4e8:	mov	r0, r4
   1a4ec:	add	sp, sp, #24
   1a4f0:	ldrd	r4, [sp]
   1a4f4:	ldr	r6, [sp, #8]
   1a4f8:	add	sp, sp, #12
   1a4fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a500:	ldr	r0, [sp, #12]
   1a504:	bl	11f30 <close@plt>
   1a508:	ldr	r0, [sp, #16]
   1a50c:	bl	11f30 <close@plt>
   1a510:	ldr	r0, [r5, #1288]	; 0x508
   1a514:	ldr	r3, [sp, #20]
   1a518:	cmp	r0, #0
   1a51c:	str	r3, [sp, #12]
   1a520:	beq	1a540 <__assert_fail@plt+0x85f8>
   1a524:	mov	r3, #1
   1a528:	mov	r1, r4
   1a52c:	strb	r3, [r4, #8]
   1a530:	bl	1e5cc <__assert_fail@plt+0xc684>
   1a534:	cmp	r0, #0
   1a538:	bne	1a4cc <__assert_fail@plt+0x8584>
   1a53c:	bl	251a8 <__assert_fail@plt+0x13260>
   1a540:	mov	r1, r0
   1a544:	movw	r3, #20648	; 0x50a8
   1a548:	movt	r3, #1
   1a54c:	movw	r2, #20632	; 0x5098
   1a550:	movt	r2, #1
   1a554:	str	r0, [sp]
   1a558:	mov	r0, #47	; 0x2f
   1a55c:	bl	1dd64 <__assert_fail@plt+0xbe1c>
   1a560:	cmp	r0, #0
   1a564:	str	r0, [r5, #1288]	; 0x508
   1a568:	bne	1a524 <__assert_fail@plt+0x85dc>
   1a56c:	b	1a53c <__assert_fail@plt+0x85f4>
   1a570:	movw	r1, #31672	; 0x7bb8
   1a574:	movt	r1, #2
   1a578:	mov	r2, #5
   1a57c:	bl	11b58 <dcgettext@plt>
   1a580:	add	r1, r4, #9
   1a584:	bl	15848 <__assert_fail@plt+0x3900>
   1a588:	ldr	r0, [sp, #20]
   1a58c:	bl	11f30 <close@plt>
   1a590:	ldr	r0, [sp, #12]
   1a594:	cmp	r0, #1
   1a598:	beq	1a5a4 <__assert_fail@plt+0x865c>
   1a59c:	mov	r1, #1
   1a5a0:	bl	16484 <__assert_fail@plt+0x453c>
   1a5a4:	ldr	r0, [sp, #16]
   1a5a8:	cmp	r0, #0
   1a5ac:	beq	1a5b8 <__assert_fail@plt+0x8670>
   1a5b0:	mov	r1, #0
   1a5b4:	bl	16484 <__assert_fail@plt+0x453c>
   1a5b8:	ldr	r1, [r5, #1284]	; 0x504
   1a5bc:	mov	r2, #0
   1a5c0:	mov	r0, r1
   1a5c4:	bl	11ad4 <execlp@plt>
   1a5c8:	bl	11d74 <__errno_location@plt>
   1a5cc:	movw	r1, #31632	; 0x7b90
   1a5d0:	movt	r1, #2
   1a5d4:	ldr	r0, [r0]
   1a5d8:	bl	159f0 <__assert_fail@plt+0x3aa8>
   1a5dc:	movw	ip, #41444	; 0xa1e4
   1a5e0:	movt	ip, #3
   1a5e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a5e8:	ldr	r4, [ip, #8]
   1a5ec:	mov	r5, r0
   1a5f0:	strd	r6, [sp, #8]
   1a5f4:	strd	r8, [sp, #16]
   1a5f8:	strd	sl, [sp, #24]
   1a5fc:	mov	sl, r1
   1a600:	str	lr, [sp, #32]
   1a604:	sub	sp, sp, #172	; 0xac
   1a608:	cmp	r2, r4
   1a60c:	str	r2, [sp, #8]
   1a610:	str	ip, [sp, #12]
   1a614:	str	r3, [sp, #28]
   1a618:	bls	1a744 <__assert_fail@plt+0x87fc>
   1a61c:	add	r3, r0, #4
   1a620:	mov	r6, r0
   1a624:	str	r3, [sp, #24]
   1a628:	ldr	r3, [sp, #8]
   1a62c:	cmp	r4, r3
   1a630:	movls	r5, #0
   1a634:	movls	r9, r6
   1a638:	movls	r7, r5
   1a63c:	bhi	1ad30 <__assert_fail@plt+0x8de8>
   1a640:	add	r0, sp, #56	; 0x38
   1a644:	add	fp, r9, r7, lsl #3
   1a648:	bl	1a46c <__assert_fail@plt+0x8524>
   1a64c:	ldr	r3, [sp, #12]
   1a650:	mov	r6, r0
   1a654:	add	r2, sp, #64	; 0x40
   1a658:	mov	r0, fp
   1a65c:	add	r8, r6, #9
   1a660:	ldr	r4, [r3, #8]
   1a664:	ldr	r3, [sp, #56]	; 0x38
   1a668:	cmp	r4, sl
   1a66c:	mov	r1, r4
   1a670:	str	r3, [sp, #20]
   1a674:	movcc	r3, r4
   1a678:	movcs	r3, sl
   1a67c:	str	r3, [sp, #16]
   1a680:	bl	1765c <__assert_fail@plt+0x5714>
   1a684:	cmp	r4, r0
   1a688:	mov	ip, r0
   1a68c:	ldr	r3, [sp, #20]
   1a690:	movhi	r4, #1
   1a694:	movls	r4, #0
   1a698:	cmp	r0, #1
   1a69c:	movhi	r4, #0
   1a6a0:	cmp	r4, #0
   1a6a4:	bne	1af44 <__assert_fail@plt+0x8ffc>
   1a6a8:	cmp	ip, sl
   1a6ac:	mov	r2, ip
   1a6b0:	ldr	r1, [sp, #16]
   1a6b4:	mov	r0, fp
   1a6b8:	add	r7, r7, ip
   1a6bc:	ldr	lr, [sp, #64]	; 0x40
   1a6c0:	subls	sl, sl, ip
   1a6c4:	subhi	sl, sl, sl
   1a6c8:	stm	sp, {r8, lr}
   1a6cc:	bl	19c14 <__assert_fail@plt+0x7ccc>
   1a6d0:	ldr	r3, [sp, #12]
   1a6d4:	str	r8, [r9, r5, lsl #3]
   1a6d8:	ldr	r4, [r3, #8]
   1a6dc:	ldr	r3, [sp, #8]
   1a6e0:	sub	r2, r3, r7
   1a6e4:	ldr	r3, [sp, #24]
   1a6e8:	cmp	r2, r4
   1a6ec:	str	r6, [r3, r5, lsl #3]
   1a6f0:	add	r5, r5, #1
   1a6f4:	bcs	1a640 <__assert_fail@plt+0x86f8>
   1a6f8:	udiv	r3, r5, r4
   1a6fc:	mov	r6, r9
   1a700:	add	fp, r9, r7, lsl #3
   1a704:	mls	r3, r4, r3, r5
   1a708:	sub	r1, r4, r3
   1a70c:	cmp	r2, r1
   1a710:	bhi	1aa9c <__assert_fail@plt+0x8b54>
   1a714:	add	r0, r6, r5, lsl #3
   1a718:	mov	r1, fp
   1a71c:	add	sl, sl, r5
   1a720:	lsl	r2, r2, #3
   1a724:	sub	r5, r5, r7
   1a728:	bl	11a80 <memmove@plt>
   1a72c:	ldr	r3, [sp, #8]
   1a730:	add	r3, r3, r5
   1a734:	cmp	r3, r4
   1a738:	str	r3, [sp, #8]
   1a73c:	bhi	1a628 <__assert_fail@plt+0x86e0>
   1a740:	mov	r5, r6
   1a744:	ldr	r3, [sp, #8]
   1a748:	cmp	sl, r3
   1a74c:	bcs	1a870 <__assert_fail@plt+0x8928>
   1a750:	movw	r3, #31572	; 0x7b54
   1a754:	movt	r3, #2
   1a758:	add	r6, r5, sl, lsl #3
   1a75c:	movw	r9, #41696	; 0xa2e0
   1a760:	movt	r9, #3
   1a764:	str	r3, [sp, #12]
   1a768:	mov	r3, #0
   1a76c:	mov	r4, sl
   1a770:	str	sl, [sp, #24]
   1a774:	mov	sl, r3
   1a778:	b	1a7c0 <__assert_fail@plt+0x8878>
   1a77c:	mov	r1, r7
   1a780:	add	r2, sp, #64	; 0x40
   1a784:	mov	r0, #3
   1a788:	bl	11bf4 <__fxstat64@plt>
   1a78c:	cmp	r0, #0
   1a790:	bne	1a7ac <__assert_fail@plt+0x8864>
   1a794:	ldr	r3, [pc, #2016]	; 1af7c <__assert_fail@plt+0x9034>
   1a798:	ldrd	r0, [sp, #160]	; 0xa0
   1a79c:	ldrd	r2, [r3, #88]	; 0x58
   1a7a0:	cmp	r1, r3
   1a7a4:	cmpeq	r0, r2
   1a7a8:	beq	1a83c <__assert_fail@plt+0x88f4>
   1a7ac:	ldr	r3, [sp, #8]
   1a7b0:	add	r4, r4, #1
   1a7b4:	add	r6, r6, #8
   1a7b8:	cmp	r3, r4
   1a7bc:	beq	1a86c <__assert_fail@plt+0x8924>
   1a7c0:	ldr	r8, [r5, r4, lsl #3]
   1a7c4:	ldr	r1, [sp, #12]
   1a7c8:	mov	r0, r8
   1a7cc:	bl	11a2c <strcmp@plt>
   1a7d0:	ldr	r3, [sp, #28]
   1a7d4:	mov	r7, r0
   1a7d8:	cmp	r3, #0
   1a7dc:	beq	1a804 <__assert_fail@plt+0x88bc>
   1a7e0:	mov	r0, r3
   1a7e4:	mov	r1, r8
   1a7e8:	bl	11a2c <strcmp@plt>
   1a7ec:	adds	r3, r7, #0
   1a7f0:	movne	r3, #1
   1a7f4:	cmp	r0, #0
   1a7f8:	movne	r3, #0
   1a7fc:	cmp	r3, #0
   1a800:	bne	1a854 <__assert_fail@plt+0x890c>
   1a804:	ldr	r3, [r9, #1172]	; 0x494
   1a808:	cmp	r3, #0
   1a80c:	beq	1ab54 <__assert_fail@plt+0x8c0c>
   1a810:	cmp	r3, #0
   1a814:	bge	1a86c <__assert_fail@plt+0x8924>
   1a818:	cmp	r7, #0
   1a81c:	beq	1a77c <__assert_fail@plt+0x8834>
   1a820:	add	r2, sp, #64	; 0x40
   1a824:	mov	r0, #3
   1a828:	ldr	r1, [r5, r4, lsl #3]
   1a82c:	bl	11f00 <__xstat64@plt>
   1a830:	cmp	r0, #0
   1a834:	beq	1a794 <__assert_fail@plt+0x884c>
   1a838:	b	1a7ac <__assert_fail@plt+0x8864>
   1a83c:	ldr	r3, [pc, #1848]	; 1af7c <__assert_fail@plt+0x9034>
   1a840:	ldrd	r0, [sp, #64]	; 0x40
   1a844:	ldrd	r2, [r3, #-8]
   1a848:	cmp	r1, r3
   1a84c:	cmpeq	r0, r2
   1a850:	bne	1a7ac <__assert_fail@plt+0x8864>
   1a854:	cmp	sl, #0
   1a858:	addne	r7, sl, #9
   1a85c:	beq	1ab84 <__assert_fail@plt+0x8c3c>
   1a860:	str	r7, [r5, r4, lsl #3]
   1a864:	str	sl, [r6, #4]
   1a868:	b	1a7ac <__assert_fail@plt+0x8864>
   1a86c:	ldr	sl, [sp, #24]
   1a870:	movw	fp, #41696	; 0xa2e0
   1a874:	movt	fp, #3
   1a878:	b	1a94c <__assert_fail@plt+0x8a04>
   1a87c:	mov	r0, r7
   1a880:	bl	1cafc <__assert_fail@plt+0xabb4>
   1a884:	cmp	r0, #0
   1a888:	bne	1adf4 <__assert_fail@plt+0x8eac>
   1a88c:	cmp	r4, #2
   1a890:	add	r0, sp, #44	; 0x2c
   1a894:	movls	r1, #0
   1a898:	movhi	r1, #1
   1a89c:	bl	15f60 <__assert_fail@plt+0x4018>
   1a8a0:	cmp	r0, #0
   1a8a4:	beq	1a974 <__assert_fail@plt+0x8a2c>
   1a8a8:	ldr	r3, [fp, #1284]	; 0x504
   1a8ac:	mov	r2, #0
   1a8b0:	mov	r6, r0
   1a8b4:	str	r8, [sp, #12]
   1a8b8:	strb	r2, [r0, #8]
   1a8bc:	cmp	r3, r2
   1a8c0:	beq	1a8e0 <__assert_fail@plt+0x8998>
   1a8c4:	mov	r1, #4
   1a8c8:	add	r0, sp, #56	; 0x38
   1a8cc:	bl	166c0 <__assert_fail@plt+0x4778>
   1a8d0:	cmp	r0, #0
   1a8d4:	str	r0, [r6, #4]
   1a8d8:	bgt	1a9d8 <__assert_fail@plt+0x8a90>
   1a8dc:	beq	1ae00 <__assert_fail@plt+0x8eb8>
   1a8e0:	movw	r1, #31668	; 0x7bb4
   1a8e4:	movt	r1, #2
   1a8e8:	ldr	r0, [sp, #44]	; 0x2c
   1a8ec:	bl	119fc <fdopen@plt>
   1a8f0:	subs	r3, r0, #0
   1a8f4:	add	r8, r6, #9
   1a8f8:	beq	1addc <__assert_fail@plt+0x8e94>
   1a8fc:	ldr	r2, [sp, #8]
   1a900:	cmp	sl, r4
   1a904:	mov	r0, r5
   1a908:	movcc	r7, sl
   1a90c:	movcs	r7, r4
   1a910:	ldr	ip, [sp, #36]	; 0x24
   1a914:	mov	r1, r7
   1a918:	rsb	r7, r7, #1
   1a91c:	add	sl, sl, r7
   1a920:	sub	r9, r2, r4
   1a924:	mov	r2, r4
   1a928:	add	lr, r9, #1
   1a92c:	stm	sp, {r8, ip, lr}
   1a930:	bl	19c14 <__assert_fail@plt+0x7ccc>
   1a934:	lsl	r2, r9, #3
   1a938:	add	r0, r5, #8
   1a93c:	str	r8, [r5]
   1a940:	str	r6, [r5, #4]
   1a944:	ldr	r1, [sp, #12]
   1a948:	bl	11a80 <memmove@plt>
   1a94c:	ldr	r6, [sp, #8]
   1a950:	add	r2, sp, #36	; 0x24
   1a954:	mov	r0, r5
   1a958:	mov	r1, r6
   1a95c:	bl	1765c <__assert_fail@plt+0x5714>
   1a960:	cmp	r6, r0
   1a964:	mov	r4, r0
   1a968:	beq	1aa48 <__assert_fail@plt+0x8b00>
   1a96c:	cmp	r0, #2
   1a970:	bls	1aec0 <__assert_fail@plt+0x8f78>
   1a974:	ldr	r3, [sp, #36]	; 0x24
   1a978:	sub	r4, r4, #1
   1a97c:	add	r8, r5, r4, lsl #3
   1a980:	ldr	r6, [r5, r4, lsl #3]
   1a984:	ldr	r7, [r3, r4, lsl #2]
   1a988:	mov	r0, r7
   1a98c:	bl	11dc8 <fileno@plt>
   1a990:	cmp	r0, #0
   1a994:	beq	1a9cc <__assert_fail@plt+0x8a84>
   1a998:	cmp	r0, #1
   1a99c:	bne	1a87c <__assert_fail@plt+0x8934>
   1a9a0:	mov	r0, r7
   1a9a4:	bl	11bdc <fflush_unlocked@plt>
   1a9a8:	cmp	r0, #0
   1a9ac:	beq	1a88c <__assert_fail@plt+0x8944>
   1a9b0:	movw	r1, #31324	; 0x7a5c
   1a9b4:	movt	r1, #2
   1a9b8:	mov	r2, #5
   1a9bc:	mov	r0, #0
   1a9c0:	bl	11b58 <dcgettext@plt>
   1a9c4:	mov	r1, r6
   1a9c8:	bl	15848 <__assert_fail@plt+0x3900>
   1a9cc:	mov	r0, r7
   1a9d0:	bl	11e88 <clearerr_unlocked@plt>
   1a9d4:	b	1a88c <__assert_fail@plt+0x8944>
   1a9d8:	ldr	r0, [sp, #44]	; 0x2c
   1a9dc:	bl	11f30 <close@plt>
   1a9e0:	ldr	r0, [sp, #56]	; 0x38
   1a9e4:	bl	11f30 <close@plt>
   1a9e8:	ldr	r0, [fp, #1288]	; 0x508
   1a9ec:	ldr	r3, [sp, #60]	; 0x3c
   1a9f0:	cmp	r0, #0
   1a9f4:	str	r3, [sp, #44]	; 0x2c
   1a9f8:	beq	1aa18 <__assert_fail@plt+0x8ad0>
   1a9fc:	mov	r3, #1
   1aa00:	mov	r1, r6
   1aa04:	strb	r3, [r6, #8]
   1aa08:	bl	1e5cc <__assert_fail@plt+0xc684>
   1aa0c:	cmp	r0, #0
   1aa10:	bne	1a8e0 <__assert_fail@plt+0x8998>
   1aa14:	bl	251a8 <__assert_fail@plt+0x13260>
   1aa18:	mov	r1, r0
   1aa1c:	movw	r3, #20648	; 0x50a8
   1aa20:	movt	r3, #1
   1aa24:	movw	r2, #20632	; 0x5098
   1aa28:	movt	r2, #1
   1aa2c:	str	r0, [sp]
   1aa30:	mov	r0, #47	; 0x2f
   1aa34:	bl	1dd64 <__assert_fail@plt+0xbe1c>
   1aa38:	cmp	r0, #0
   1aa3c:	str	r0, [fp, #1288]	; 0x508
   1aa40:	bne	1a9fc <__assert_fail@plt+0x8ab4>
   1aa44:	b	1aa14 <__assert_fail@plt+0x8acc>
   1aa48:	ldr	r0, [sp, #28]
   1aa4c:	bl	1796c <__assert_fail@plt+0x5a24>
   1aa50:	subs	r6, r0, #0
   1aa54:	bne	1ad6c <__assert_fail@plt+0x8e24>
   1aa58:	bl	11d74 <__errno_location@plt>
   1aa5c:	ldr	r3, [sp, #8]
   1aa60:	ldr	r2, [r0]
   1aa64:	cmp	r3, #2
   1aa68:	movhi	r3, #0
   1aa6c:	movls	r3, #1
   1aa70:	cmp	r2, #24
   1aa74:	orrne	r3, r3, #1
   1aa78:	cmp	r3, #0
   1aa7c:	beq	1a974 <__assert_fail@plt+0x8a2c>
   1aa80:	mov	r0, r6
   1aa84:	movw	r1, #31312	; 0x7a50
   1aa88:	movt	r1, #2
   1aa8c:	mov	r2, #5
   1aa90:	bl	11b58 <dcgettext@plt>
   1aa94:	ldr	r1, [sp, #28]
   1aa98:	bl	15848 <__assert_fail@plt+0x3900>
   1aa9c:	add	r0, sp, #56	; 0x38
   1aaa0:	add	r8, r2, r3
   1aaa4:	bl	1a46c <__assert_fail@plt+0x8524>
   1aaa8:	ldr	r3, [sp, #56]	; 0x38
   1aaac:	add	r8, r8, #1
   1aab0:	mov	r9, r0
   1aab4:	sub	r8, r8, r4
   1aab8:	add	r2, sp, #64	; 0x40
   1aabc:	cmp	r8, sl
   1aac0:	mov	r1, r8
   1aac4:	mov	r0, fp
   1aac8:	movcc	r4, r8
   1aacc:	movcs	r4, sl
   1aad0:	str	r3, [sp, #16]
   1aad4:	bl	1765c <__assert_fail@plt+0x5714>
   1aad8:	cmp	r8, r0
   1aadc:	add	r3, r9, #9
   1aae0:	movhi	r8, #1
   1aae4:	movls	r8, #0
   1aae8:	cmp	r0, #1
   1aaec:	mov	r2, r3
   1aaf0:	ldr	r3, [sp, #16]
   1aaf4:	movhi	r8, #0
   1aaf8:	mov	ip, r0
   1aafc:	cmp	r8, #0
   1ab00:	bne	1af44 <__assert_fail@plt+0x8ffc>
   1ab04:	ldr	lr, [sp, #64]	; 0x40
   1ab08:	mov	r8, r2
   1ab0c:	cmp	ip, sl
   1ab10:	mov	r1, r4
   1ab14:	mov	r0, fp
   1ab18:	mov	r2, ip
   1ab1c:	add	r7, r7, ip
   1ab20:	subls	sl, sl, ip
   1ab24:	subhi	sl, sl, sl
   1ab28:	add	fp, r6, r7, lsl #3
   1ab2c:	stm	sp, {r8, lr}
   1ab30:	bl	19c14 <__assert_fail@plt+0x7ccc>
   1ab34:	ldrd	r2, [sp, #8]
   1ab38:	str	r8, [r6, r5, lsl #3]
   1ab3c:	ldr	r4, [r3, #8]
   1ab40:	add	r3, r6, r5, lsl #3
   1ab44:	sub	r2, r2, r7
   1ab48:	add	r5, r5, #1
   1ab4c:	str	r9, [r3, #4]
   1ab50:	b	1a714 <__assert_fail@plt+0x87cc>
   1ab54:	ldr	r2, [pc, #1060]	; 1af80 <__assert_fail@plt+0x9038>
   1ab58:	mov	r1, #1
   1ab5c:	mov	r0, #3
   1ab60:	bl	11bf4 <__fxstat64@plt>
   1ab64:	cmp	r0, #0
   1ab68:	mvneq	r3, #0
   1ab6c:	streq	r3, [r9, #1172]	; 0x494
   1ab70:	beq	1a818 <__assert_fail@plt+0x88d0>
   1ab74:	bl	11d74 <__errno_location@plt>
   1ab78:	ldr	r3, [r0]
   1ab7c:	str	r3, [r9, #1172]	; 0x494
   1ab80:	b	1a810 <__assert_fail@plt+0x88c8>
   1ab84:	add	r0, sp, #40	; 0x28
   1ab88:	bl	1a46c <__assert_fail@plt+0x8524>
   1ab8c:	ldr	r3, [sp, #40]	; 0x28
   1ab90:	mov	sl, r0
   1ab94:	mov	r1, #4
   1ab98:	mov	r0, #1
   1ab9c:	add	r7, sl, #9
   1aba0:	str	r3, [sp, #16]
   1aba4:	bl	24d54 <__assert_fail@plt+0x12e0c>
   1aba8:	ldr	r8, [r6, #4]
   1abac:	mov	fp, r0
   1abb0:	cmp	r8, #0
   1abb4:	beq	1abc4 <__assert_fail@plt+0x8c7c>
   1abb8:	ldrb	r3, [r8, #8]
   1abbc:	cmp	r3, #0
   1abc0:	bne	1ac24 <__assert_fail@plt+0x8cdc>
   1abc4:	ldr	r8, [r5, r4, lsl #3]
   1abc8:	ldr	r1, [sp, #12]
   1abcc:	mov	r0, r8
   1abd0:	bl	11a2c <strcmp@plt>
   1abd4:	cmp	r0, #0
   1abd8:	bne	1ad04 <__assert_fail@plt+0x8dbc>
   1abdc:	movw	r3, #41680	; 0xa2d0
   1abe0:	movt	r3, #3
   1abe4:	ldr	r8, [r3]
   1abe8:	mov	r2, #1
   1abec:	strb	r2, [r9, #1311]	; 0x51f
   1abf0:	mov	r1, #2
   1abf4:	mov	r0, r8
   1abf8:	bl	1caac <__assert_fail@plt+0xab64>
   1abfc:	cmp	r8, #0
   1ac00:	str	r8, [fp]
   1ac04:	beq	1ac84 <__assert_fail@plt+0x8d3c>
   1ac08:	mov	r2, #1
   1ac0c:	mov	r1, #0
   1ac10:	stm	sp, {r7, fp}
   1ac14:	mov	r0, r6
   1ac18:	ldr	r3, [sp, #16]
   1ac1c:	bl	19c14 <__assert_fail@plt+0x7ccc>
   1ac20:	b	1a860 <__assert_fail@plt+0x8918>
   1ac24:	cmp	r3, #1
   1ac28:	beq	1ad60 <__assert_fail@plt+0x8e18>
   1ac2c:	mov	r1, #0
   1ac30:	add	r0, r8, #9
   1ac34:	bl	11c9c <open64@plt>
   1ac38:	subs	r3, r0, #0
   1ac3c:	str	r3, [sp, #20]
   1ac40:	blt	1ad24 <__assert_fail@plt+0x8ddc>
   1ac44:	mov	r1, #9
   1ac48:	add	r0, sp, #48	; 0x30
   1ac4c:	bl	166c0 <__assert_fail@plt+0x4778>
   1ac50:	cmn	r0, #1
   1ac54:	mov	r1, r0
   1ac58:	bne	1aca0 <__assert_fail@plt+0x8d58>
   1ac5c:	bl	11d74 <__errno_location@plt>
   1ac60:	ldr	r4, [r0]
   1ac64:	mov	r5, r0
   1ac68:	cmp	r4, #24
   1ac6c:	bne	1ae80 <__assert_fail@plt+0x8f38>
   1ac70:	ldr	r0, [sp, #20]
   1ac74:	bl	11f30 <close@plt>
   1ac78:	mov	r3, #0
   1ac7c:	str	r4, [r5]
   1ac80:	str	r3, [fp]
   1ac84:	movw	r1, #31312	; 0x7a50
   1ac88:	movt	r1, #2
   1ac8c:	mov	r2, #5
   1ac90:	mov	r0, #0
   1ac94:	bl	11b58 <dcgettext@plt>
   1ac98:	ldr	r1, [r6]
   1ac9c:	bl	15848 <__assert_fail@plt+0x3900>
   1aca0:	cmp	r0, #0
   1aca4:	beq	1aedc <__assert_fail@plt+0x8f94>
   1aca8:	ldr	r0, [r9, #1288]	; 0x508
   1acac:	str	r1, [r8, #4]
   1acb0:	cmp	r0, #0
   1acb4:	beq	1adac <__assert_fail@plt+0x8e64>
   1acb8:	mov	r3, #1
   1acbc:	mov	r1, r8
   1acc0:	ldr	r0, [r9, #1288]	; 0x508
   1acc4:	strb	r3, [r8, #8]
   1acc8:	bl	1e5cc <__assert_fail@plt+0xc684>
   1accc:	cmp	r0, #0
   1acd0:	beq	1aa14 <__assert_fail@plt+0x8acc>
   1acd4:	ldr	r0, [sp, #20]
   1acd8:	bl	11f30 <close@plt>
   1acdc:	ldr	r0, [sp, #52]	; 0x34
   1ace0:	bl	11f30 <close@plt>
   1ace4:	movw	r1, #31568	; 0x7b50
   1ace8:	movt	r1, #2
   1acec:	ldr	r0, [sp, #48]	; 0x30
   1acf0:	bl	119fc <fdopen@plt>
   1acf4:	cmp	r0, #0
   1acf8:	beq	1ae44 <__assert_fail@plt+0x8efc>
   1acfc:	str	r0, [fp]
   1ad00:	b	1ac08 <__assert_fail@plt+0x8cc0>
   1ad04:	mov	r0, r8
   1ad08:	mov	r1, #524288	; 0x80000
   1ad0c:	bl	11c9c <open64@plt>
   1ad10:	cmp	r0, #0
   1ad14:	bge	1ad4c <__assert_fail@plt+0x8e04>
   1ad18:	mov	r1, #2
   1ad1c:	mov	r0, #0
   1ad20:	bl	1caac <__assert_fail@plt+0xab64>
   1ad24:	mov	r3, #0
   1ad28:	str	r3, [fp]
   1ad2c:	b	1ac84 <__assert_fail@plt+0x8d3c>
   1ad30:	mov	r2, r3
   1ad34:	mov	r3, #0
   1ad38:	mov	r1, r4
   1ad3c:	mov	r5, r3
   1ad40:	mov	r7, r3
   1ad44:	mov	fp, r6
   1ad48:	b	1a70c <__assert_fail@plt+0x87c4>
   1ad4c:	movw	r1, #31568	; 0x7b50
   1ad50:	movt	r1, #2
   1ad54:	bl	119fc <fdopen@plt>
   1ad58:	mov	r8, r0
   1ad5c:	b	1abf0 <__assert_fail@plt+0x8ca8>
   1ad60:	ldr	r0, [r8, #4]
   1ad64:	bl	16f2c <__assert_fail@plt+0x4fe4>
   1ad68:	b	1ac2c <__assert_fail@plt+0x8ce4>
   1ad6c:	ldr	r2, [sp, #8]
   1ad70:	mov	r3, r6
   1ad74:	mov	r1, sl
   1ad78:	mov	r0, r5
   1ad7c:	ldr	lr, [sp, #28]
   1ad80:	ldr	ip, [sp, #36]	; 0x24
   1ad84:	str	lr, [sp]
   1ad88:	str	ip, [sp, #4]
   1ad8c:	bl	19c14 <__assert_fail@plt+0x7ccc>
   1ad90:	add	sp, sp, #172	; 0xac
   1ad94:	ldrd	r4, [sp]
   1ad98:	ldrd	r6, [sp, #8]
   1ad9c:	ldrd	r8, [sp, #16]
   1ada0:	ldrd	sl, [sp, #24]
   1ada4:	add	sp, sp, #32
   1ada8:	pop	{pc}		; (ldr pc, [sp], #4)
   1adac:	mov	r1, r0
   1adb0:	movw	r3, #20648	; 0x50a8
   1adb4:	movt	r3, #1
   1adb8:	movw	r2, #20632	; 0x5098
   1adbc:	movt	r2, #1
   1adc0:	str	r0, [sp]
   1adc4:	mov	r0, #47	; 0x2f
   1adc8:	bl	1dd64 <__assert_fail@plt+0xbe1c>
   1adcc:	cmp	r0, #0
   1add0:	str	r0, [r9, #1288]	; 0x508
   1add4:	bne	1acb8 <__assert_fail@plt+0x8d70>
   1add8:	b	1aa14 <__assert_fail@plt+0x8acc>
   1addc:	movw	r1, #31672	; 0x7bb8
   1ade0:	movt	r1, #2
   1ade4:	mov	r2, #5
   1ade8:	bl	11b58 <dcgettext@plt>
   1adec:	mov	r1, r8
   1adf0:	bl	15848 <__assert_fail@plt+0x3900>
   1adf4:	movw	r1, #31340	; 0x7a6c
   1adf8:	movt	r1, #2
   1adfc:	b	1a9b8 <__assert_fail@plt+0x8a70>
   1ae00:	ldr	r0, [sp, #60]	; 0x3c
   1ae04:	bl	11f30 <close@plt>
   1ae08:	ldr	r4, [sp, #44]	; 0x2c
   1ae0c:	cmp	r4, #1
   1ae10:	bne	1ae68 <__assert_fail@plt+0x8f20>
   1ae14:	ldr	r4, [sp, #56]	; 0x38
   1ae18:	cmp	r4, #0
   1ae1c:	bne	1af64 <__assert_fail@plt+0x901c>
   1ae20:	ldr	r1, [fp, #1284]	; 0x504
   1ae24:	mov	r2, #0
   1ae28:	mov	r0, r1
   1ae2c:	bl	11ad4 <execlp@plt>
   1ae30:	bl	11d74 <__errno_location@plt>
   1ae34:	movw	r1, #31632	; 0x7b90
   1ae38:	movt	r1, #2
   1ae3c:	ldr	r0, [r0]
   1ae40:	bl	159f0 <__assert_fail@plt+0x3aa8>
   1ae44:	mov	r8, r0
   1ae48:	bl	11d74 <__errno_location@plt>
   1ae4c:	ldr	r5, [r0]
   1ae50:	mov	r4, r0
   1ae54:	ldr	r0, [sp, #48]	; 0x30
   1ae58:	bl	11f30 <close@plt>
   1ae5c:	str	r8, [fp]
   1ae60:	str	r5, [r4]
   1ae64:	b	1ac84 <__assert_fail@plt+0x8d3c>
   1ae68:	mov	r1, #1
   1ae6c:	mov	r0, r4
   1ae70:	bl	11b88 <dup2@plt>
   1ae74:	mov	r0, r4
   1ae78:	bl	11f30 <close@plt>
   1ae7c:	b	1ae14 <__assert_fail@plt+0x8ecc>
   1ae80:	mov	r2, #5
   1ae84:	movw	r1, #31484	; 0x7afc
   1ae88:	movt	r1, #2
   1ae8c:	mov	r0, #0
   1ae90:	bl	11b58 <dcgettext@plt>
   1ae94:	movw	r3, #41696	; 0xa2e0
   1ae98:	movt	r3, #3
   1ae9c:	mov	r5, r0
   1aea0:	mov	r0, #4
   1aea4:	ldr	r1, [r3, #1284]	; 0x504
   1aea8:	bl	21dd0 <__assert_fail@plt+0xfe88>
   1aeac:	mov	r3, r0
   1aeb0:	mov	r2, r5
   1aeb4:	mov	r1, r4
   1aeb8:	mov	r0, #2
   1aebc:	bl	11c90 <error@plt>
   1aec0:	movw	r1, #31312	; 0x7a50
   1aec4:	movt	r1, #2
   1aec8:	mov	r2, #5
   1aecc:	mov	r0, #0
   1aed0:	bl	11b58 <dcgettext@plt>
   1aed4:	ldr	r1, [r5, r4, lsl #3]
   1aed8:	bl	15848 <__assert_fail@plt+0x3900>
   1aedc:	ldr	r0, [sp, #48]	; 0x30
   1aee0:	str	r1, [sp, #8]
   1aee4:	bl	11f30 <close@plt>
   1aee8:	ldr	r0, [sp, #20]
   1aeec:	cmp	r0, #0
   1aef0:	beq	1aefc <__assert_fail@plt+0x8fb4>
   1aef4:	ldr	r1, [sp, #8]
   1aef8:	bl	16484 <__assert_fail@plt+0x453c>
   1aefc:	ldr	r0, [sp, #52]	; 0x34
   1af00:	cmp	r0, #1
   1af04:	beq	1af10 <__assert_fail@plt+0x8fc8>
   1af08:	mov	r1, #1
   1af0c:	bl	16484 <__assert_fail@plt+0x453c>
   1af10:	movw	r3, #41696	; 0xa2e0
   1af14:	movt	r3, #3
   1af18:	ldr	r1, [r3, #1284]	; 0x504
   1af1c:	movw	r2, #31520	; 0x7b20
   1af20:	movt	r2, #2
   1af24:	mov	r3, #0
   1af28:	mov	r0, r1
   1af2c:	bl	11ad4 <execlp@plt>
   1af30:	bl	11d74 <__errno_location@plt>
   1af34:	movw	r1, #31524	; 0x7b24
   1af38:	movt	r1, #2
   1af3c:	ldr	r0, [r0]
   1af40:	bl	159f0 <__assert_fail@plt+0x3aa8>
   1af44:	mov	r6, ip
   1af48:	movw	r1, #31312	; 0x7a50
   1af4c:	movt	r1, #2
   1af50:	mov	r2, #5
   1af54:	mov	r0, #0
   1af58:	bl	11b58 <dcgettext@plt>
   1af5c:	ldr	r1, [fp, r6, lsl #3]
   1af60:	bl	15848 <__assert_fail@plt+0x3900>
   1af64:	mov	r1, #0
   1af68:	mov	r0, r4
   1af6c:	bl	11b88 <dup2@plt>
   1af70:	mov	r0, r4
   1af74:	bl	11f30 <close@plt>
   1af78:	b	1ae20 <__assert_fail@plt+0x8ed8>
   1af7c:	andeq	sl, r3, r0, lsl #15
   1af80:	andeq	sl, r3, r8, ror r7
   1af84:	subs	r6, r0, #0
   1af88:	str	r7, [sp, #-8]!
   1af8c:	str	lr, [sp, #4]
   1af90:	sub	sp, sp, #56	; 0x38
   1af94:	beq	1afdc <__assert_fail@plt+0x9094>
   1af98:	movw	r3, #41672	; 0xa2c8
   1af9c:	movt	r3, #3
   1afa0:	ldr	r4, [r3]
   1afa4:	mov	r2, #5
   1afa8:	movw	r1, #31704	; 0x7bd8
   1afac:	movt	r1, #2
   1afb0:	mov	r0, #0
   1afb4:	bl	11b58 <dcgettext@plt>
   1afb8:	movw	r3, #43204	; 0xa8c4
   1afbc:	movt	r3, #3
   1afc0:	mov	r2, r0
   1afc4:	mov	r1, #1
   1afc8:	ldr	r3, [r3]
   1afcc:	mov	r0, r4
   1afd0:	bl	11dd4 <__fprintf_chk@plt>
   1afd4:	mov	r0, r6
   1afd8:	bl	11d38 <exit@plt>
   1afdc:	mov	r2, #5
   1afe0:	movw	r1, #31744	; 0x7c00
   1afe4:	movt	r1, #2
   1afe8:	movw	r7, #41684	; 0xa2d4
   1afec:	movt	r7, #3
   1aff0:	bl	11b58 <dcgettext@plt>
   1aff4:	movw	r3, #43204	; 0xa8c4
   1aff8:	movt	r3, #3
   1affc:	ldr	r3, [r3]
   1b000:	mov	r1, r0
   1b004:	mov	r0, #1
   1b008:	mov	r2, r3
   1b00c:	bl	11db0 <__printf_chk@plt>
   1b010:	mov	r2, #5
   1b014:	movw	r1, #31816	; 0x7c48
   1b018:	movt	r1, #2
   1b01c:	mov	r0, r6
   1b020:	bl	11b58 <dcgettext@plt>
   1b024:	ldr	r1, [r7]
   1b028:	bl	11a14 <fputs_unlocked@plt>
   1b02c:	mov	r2, #5
   1b030:	movw	r1, #31880	; 0x7c88
   1b034:	movt	r1, #2
   1b038:	mov	r0, r6
   1b03c:	bl	11b58 <dcgettext@plt>
   1b040:	ldr	r1, [r7]
   1b044:	bl	11a14 <fputs_unlocked@plt>
   1b048:	mov	r2, #5
   1b04c:	movw	r1, #31936	; 0x7cc0
   1b050:	movt	r1, #2
   1b054:	mov	r0, r6
   1b058:	bl	11b58 <dcgettext@plt>
   1b05c:	ldr	r1, [r7]
   1b060:	bl	11a14 <fputs_unlocked@plt>
   1b064:	mov	r2, #5
   1b068:	movw	r1, #32012	; 0x7d0c
   1b06c:	movt	r1, #2
   1b070:	mov	r0, r6
   1b074:	bl	11b58 <dcgettext@plt>
   1b078:	ldr	r1, [r7]
   1b07c:	bl	11a14 <fputs_unlocked@plt>
   1b080:	mov	r2, #5
   1b084:	movw	r1, #32032	; 0x7d20
   1b088:	movt	r1, #2
   1b08c:	mov	r0, r6
   1b090:	bl	11b58 <dcgettext@plt>
   1b094:	ldr	r1, [r7]
   1b098:	bl	11a14 <fputs_unlocked@plt>
   1b09c:	mov	r2, #5
   1b0a0:	movw	r1, #32236	; 0x7dec
   1b0a4:	movt	r1, #2
   1b0a8:	mov	r0, r6
   1b0ac:	bl	11b58 <dcgettext@plt>
   1b0b0:	ldr	r1, [r7]
   1b0b4:	bl	11a14 <fputs_unlocked@plt>
   1b0b8:	mov	r2, #5
   1b0bc:	movw	r1, #32448	; 0x7ec0
   1b0c0:	movt	r1, #2
   1b0c4:	mov	r0, r6
   1b0c8:	bl	11b58 <dcgettext@plt>
   1b0cc:	ldr	r1, [r7]
   1b0d0:	bl	11a14 <fputs_unlocked@plt>
   1b0d4:	mov	r2, #5
   1b0d8:	movw	r1, #32524	; 0x7f0c
   1b0dc:	movt	r1, #2
   1b0e0:	mov	r0, r6
   1b0e4:	bl	11b58 <dcgettext@plt>
   1b0e8:	ldr	r1, [r7]
   1b0ec:	bl	11a14 <fputs_unlocked@plt>
   1b0f0:	mov	r2, #5
   1b0f4:	movw	r1, #32800	; 0x8020
   1b0f8:	movt	r1, #2
   1b0fc:	mov	r0, r6
   1b100:	bl	11b58 <dcgettext@plt>
   1b104:	ldr	r1, [r7]
   1b108:	bl	11a14 <fputs_unlocked@plt>
   1b10c:	mov	r2, #5
   1b110:	movw	r1, #33080	; 0x8138
   1b114:	movt	r1, #2
   1b118:	mov	r0, r6
   1b11c:	bl	11b58 <dcgettext@plt>
   1b120:	ldr	r1, [r7]
   1b124:	bl	11a14 <fputs_unlocked@plt>
   1b128:	mov	r2, #5
   1b12c:	movw	r1, #33100	; 0x814c
   1b130:	movt	r1, #2
   1b134:	mov	r0, r6
   1b138:	bl	11b58 <dcgettext@plt>
   1b13c:	ldr	r1, [r7]
   1b140:	bl	11a14 <fputs_unlocked@plt>
   1b144:	mov	r2, #5
   1b148:	movw	r1, #33220	; 0x81c4
   1b14c:	movt	r1, #2
   1b150:	mov	r0, r6
   1b154:	bl	11b58 <dcgettext@plt>
   1b158:	ldr	r1, [r7]
   1b15c:	bl	11a14 <fputs_unlocked@plt>
   1b160:	mov	r2, #5
   1b164:	movw	r1, #33500	; 0x82dc
   1b168:	movt	r1, #2
   1b16c:	mov	r0, r6
   1b170:	bl	11b58 <dcgettext@plt>
   1b174:	ldr	r1, [r7]
   1b178:	bl	11a14 <fputs_unlocked@plt>
   1b17c:	mov	r2, #5
   1b180:	movw	r1, #33848	; 0x8438
   1b184:	movt	r1, #2
   1b188:	mov	r0, r6
   1b18c:	bl	11b58 <dcgettext@plt>
   1b190:	ldr	r1, [r7]
   1b194:	bl	11a14 <fputs_unlocked@plt>
   1b198:	mov	r2, #5
   1b19c:	movw	r1, #33992	; 0x84c8
   1b1a0:	movt	r1, #2
   1b1a4:	mov	r0, r6
   1b1a8:	bl	11b58 <dcgettext@plt>
   1b1ac:	ldr	r1, [r7]
   1b1b0:	bl	11a14 <fputs_unlocked@plt>
   1b1b4:	mov	r2, #5
   1b1b8:	movw	r1, #34208	; 0x85a0
   1b1bc:	movt	r1, #2
   1b1c0:	mov	r0, r6
   1b1c4:	bl	11b58 <dcgettext@plt>
   1b1c8:	mov	r1, r0
   1b1cc:	movw	r2, #34664	; 0x8768
   1b1d0:	movt	r2, #2
   1b1d4:	mov	r0, #1
   1b1d8:	bl	11db0 <__printf_chk@plt>
   1b1dc:	mov	r2, #5
   1b1e0:	movw	r1, #34672	; 0x8770
   1b1e4:	movt	r1, #2
   1b1e8:	mov	r0, r6
   1b1ec:	bl	11b58 <dcgettext@plt>
   1b1f0:	ldr	r1, [r7]
   1b1f4:	bl	11a14 <fputs_unlocked@plt>
   1b1f8:	mov	r2, #5
   1b1fc:	movw	r1, #34736	; 0x87b0
   1b200:	movt	r1, #2
   1b204:	mov	r0, r6
   1b208:	bl	11b58 <dcgettext@plt>
   1b20c:	ldr	r1, [r7]
   1b210:	bl	11a14 <fputs_unlocked@plt>
   1b214:	mov	r2, #5
   1b218:	movw	r1, #34784	; 0x87e0
   1b21c:	movt	r1, #2
   1b220:	mov	r0, r6
   1b224:	bl	11b58 <dcgettext@plt>
   1b228:	ldr	r1, [r7]
   1b22c:	bl	11a14 <fputs_unlocked@plt>
   1b230:	mov	r2, #5
   1b234:	movw	r1, #34840	; 0x8818
   1b238:	movt	r1, #2
   1b23c:	mov	r0, r6
   1b240:	bl	11b58 <dcgettext@plt>
   1b244:	ldr	r1, [r7]
   1b248:	bl	11a14 <fputs_unlocked@plt>
   1b24c:	mov	r2, #5
   1b250:	movw	r1, #35444	; 0x8a74
   1b254:	movt	r1, #2
   1b258:	mov	r0, r6
   1b25c:	bl	11b58 <dcgettext@plt>
   1b260:	ldr	r1, [r7]
   1b264:	bl	11a14 <fputs_unlocked@plt>
   1b268:	ldr	lr, [pc, #560]	; 1b4a0 <__assert_fail@plt+0x9558>
   1b26c:	ldr	ip, [lr]
   1b270:	ldr	r4, [lr, #4]
   1b274:	ldrd	r8, [lr, #8]
   1b278:	subs	r1, ip, #0
   1b27c:	str	ip, [sp]
   1b280:	ldrd	r2, [lr, #16]
   1b284:	str	r4, [sp, #4]
   1b288:	ldrd	r4, [lr, #24]
   1b28c:	strd	r8, [sp, #8]
   1b290:	ldrd	r8, [lr, #32]
   1b294:	strd	r2, [sp, #16]
   1b298:	ldrd	r2, [lr, #40]	; 0x28
   1b29c:	strd	r4, [sp, #24]
   1b2a0:	ldrd	r4, [lr, #48]	; 0x30
   1b2a4:	strd	r8, [sp, #32]
   1b2a8:	strd	r2, [sp, #40]	; 0x28
   1b2ac:	strd	r4, [sp, #48]	; 0x30
   1b2b0:	movwne	r5, #38036	; 0x9494
   1b2b4:	mov	r4, sp
   1b2b8:	movtne	r5, #2
   1b2bc:	bne	1b3b4 <__assert_fail@plt+0x946c>
   1b2c0:	ldr	r4, [r4, #4]
   1b2c4:	movw	r1, #35676	; 0x8b5c
   1b2c8:	movt	r1, #2
   1b2cc:	mov	r2, #5
   1b2d0:	cmp	r4, #0
   1b2d4:	beq	1b3c8 <__assert_fail@plt+0x9480>
   1b2d8:	mov	r0, #0
   1b2dc:	bl	11b58 <dcgettext@plt>
   1b2e0:	mov	r1, r0
   1b2e4:	movw	r3, #35700	; 0x8b74
   1b2e8:	movt	r3, #2
   1b2ec:	movw	r2, #35740	; 0x8b9c
   1b2f0:	movt	r2, #2
   1b2f4:	mov	r0, #1
   1b2f8:	bl	11db0 <__printf_chk@plt>
   1b2fc:	mov	r1, #0
   1b300:	mov	r0, #5
   1b304:	bl	11e28 <setlocale@plt>
   1b308:	cmp	r0, #0
   1b30c:	movweq	r5, #38036	; 0x9494
   1b310:	movteq	r5, #2
   1b314:	beq	1b338 <__assert_fail@plt+0x93f0>
   1b318:	movw	r1, #35756	; 0x8bac
   1b31c:	movt	r1, #2
   1b320:	mov	r2, #3
   1b324:	movw	r5, #38036	; 0x9494
   1b328:	movt	r5, #2
   1b32c:	bl	11f0c <strncmp@plt>
   1b330:	cmp	r0, #0
   1b334:	bne	1b480 <__assert_fail@plt+0x9538>
   1b338:	mov	r2, #5
   1b33c:	movw	r1, #35832	; 0x8bf8
   1b340:	movt	r1, #2
   1b344:	mov	r0, #0
   1b348:	bl	11b58 <dcgettext@plt>
   1b34c:	mov	r1, r0
   1b350:	movw	r3, #38036	; 0x9494
   1b354:	movt	r3, #2
   1b358:	movw	r2, #35700	; 0x8b74
   1b35c:	movt	r2, #2
   1b360:	mov	r0, #1
   1b364:	bl	11db0 <__printf_chk@plt>
   1b368:	mov	r2, #5
   1b36c:	movw	r1, #35860	; 0x8c14
   1b370:	movt	r1, #2
   1b374:	mov	r0, #0
   1b378:	bl	11b58 <dcgettext@plt>
   1b37c:	movw	r2, #37740	; 0x936c
   1b380:	movt	r2, #2
   1b384:	cmp	r4, r5
   1b388:	movw	r3, #33096	; 0x8148
   1b38c:	movt	r3, #2
   1b390:	mov	r1, r0
   1b394:	moveq	r3, r2
   1b398:	mov	r2, r4
   1b39c:	mov	r0, #1
   1b3a0:	bl	11db0 <__printf_chk@plt>
   1b3a4:	b	1afd4 <__assert_fail@plt+0x908c>
   1b3a8:	ldr	r1, [r4, #8]!
   1b3ac:	cmp	r1, #0
   1b3b0:	beq	1b2c0 <__assert_fail@plt+0x9378>
   1b3b4:	mov	r0, r5
   1b3b8:	bl	11a2c <strcmp@plt>
   1b3bc:	cmp	r0, #0
   1b3c0:	bne	1b3a8 <__assert_fail@plt+0x9460>
   1b3c4:	b	1b2c0 <__assert_fail@plt+0x9378>
   1b3c8:	mov	r0, r4
   1b3cc:	bl	11b58 <dcgettext@plt>
   1b3d0:	mov	r1, r0
   1b3d4:	movw	r3, #35700	; 0x8b74
   1b3d8:	movt	r3, #2
   1b3dc:	movw	r2, #35740	; 0x8b9c
   1b3e0:	movt	r2, #2
   1b3e4:	mov	r0, #1
   1b3e8:	bl	11db0 <__printf_chk@plt>
   1b3ec:	mov	r1, r4
   1b3f0:	mov	r0, #5
   1b3f4:	bl	11e28 <setlocale@plt>
   1b3f8:	cmp	r0, #0
   1b3fc:	beq	1b418 <__assert_fail@plt+0x94d0>
   1b400:	movw	r1, #35756	; 0x8bac
   1b404:	movt	r1, #2
   1b408:	mov	r2, #3
   1b40c:	bl	11f0c <strncmp@plt>
   1b410:	cmp	r0, #0
   1b414:	bne	1b474 <__assert_fail@plt+0x952c>
   1b418:	mov	r2, #5
   1b41c:	movw	r1, #35832	; 0x8bf8
   1b420:	movt	r1, #2
   1b424:	mov	r0, #0
   1b428:	bl	11b58 <dcgettext@plt>
   1b42c:	mov	r1, r0
   1b430:	movw	r3, #38036	; 0x9494
   1b434:	movt	r3, #2
   1b438:	movw	r2, #35700	; 0x8b74
   1b43c:	movt	r2, #2
   1b440:	mov	r0, #1
   1b444:	bl	11db0 <__printf_chk@plt>
   1b448:	movw	r1, #35860	; 0x8c14
   1b44c:	movt	r1, #2
   1b450:	mov	r2, #5
   1b454:	mov	r0, #0
   1b458:	bl	11b58 <dcgettext@plt>
   1b45c:	movw	r4, #38036	; 0x9494
   1b460:	movt	r4, #2
   1b464:	movw	r3, #37740	; 0x936c
   1b468:	movt	r3, #2
   1b46c:	mov	r1, r0
   1b470:	b	1b398 <__assert_fail@plt+0x9450>
   1b474:	movw	r5, #38036	; 0x9494
   1b478:	movt	r5, #2
   1b47c:	mov	r4, r5
   1b480:	mov	r2, #5
   1b484:	movw	r1, #35760	; 0x8bb0
   1b488:	movt	r1, #2
   1b48c:	mov	r0, #0
   1b490:	bl	11b58 <dcgettext@plt>
   1b494:	ldr	r1, [r7]
   1b498:	bl	11a14 <fputs_unlocked@plt>
   1b49c:	b	1b338 <__assert_fail@plt+0x93f0>
   1b4a0:	andeq	r7, r2, ip, asr r6
   1b4a4:	mov	r0, #1
   1b4a8:	b	1af84 <__assert_fail@plt+0x903c>
   1b4ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b4b0:	mov	r4, r1
   1b4b4:	strd	r6, [sp, #8]
   1b4b8:	mov	r6, r2
   1b4bc:	strd	r8, [sp, #16]
   1b4c0:	mov	r8, r3
   1b4c4:	strd	sl, [sp, #24]
   1b4c8:	mov	sl, r0
   1b4cc:	str	lr, [sp, #32]
   1b4d0:	sub	sp, sp, #12
   1b4d4:	str	r2, [sp]
   1b4d8:	bl	11d50 <strlen@plt>
   1b4dc:	ldr	fp, [r4]
   1b4e0:	cmp	fp, #0
   1b4e4:	beq	1b5f4 <__assert_fail@plt+0x96ac>
   1b4e8:	cmp	r6, #0
   1b4ec:	mov	r7, r0
   1b4f0:	beq	1b5a0 <__assert_fail@plt+0x9658>
   1b4f4:	mov	r5, #0
   1b4f8:	mvn	r9, #0
   1b4fc:	str	r5, [sp, #4]
   1b500:	mov	r2, r7
   1b504:	mov	r1, sl
   1b508:	mov	r0, fp
   1b50c:	bl	11f0c <strncmp@plt>
   1b510:	cmp	r0, #0
   1b514:	mov	r0, fp
   1b518:	bne	1b558 <__assert_fail@plt+0x9610>
   1b51c:	bl	11d50 <strlen@plt>
   1b520:	ldr	r3, [sp]
   1b524:	cmp	r0, r7
   1b528:	mov	r2, r8
   1b52c:	mov	r1, r6
   1b530:	mla	r0, r8, r9, r3
   1b534:	beq	1b598 <__assert_fail@plt+0x9650>
   1b538:	cmn	r9, #1
   1b53c:	moveq	r9, r5
   1b540:	beq	1b558 <__assert_fail@plt+0x9610>
   1b544:	bl	11b40 <memcmp@plt>
   1b548:	ldr	r3, [sp, #4]
   1b54c:	cmp	r0, #0
   1b550:	movne	r3, #1
   1b554:	str	r3, [sp, #4]
   1b558:	ldr	fp, [r4, #4]!
   1b55c:	add	r5, r5, #1
   1b560:	add	r6, r6, r8
   1b564:	cmp	fp, #0
   1b568:	bne	1b500 <__assert_fail@plt+0x95b8>
   1b56c:	ldr	r3, [sp, #4]
   1b570:	cmp	r3, #0
   1b574:	mvnne	r9, #1
   1b578:	mov	r0, r9
   1b57c:	add	sp, sp, #12
   1b580:	ldrd	r4, [sp]
   1b584:	ldrd	r6, [sp, #8]
   1b588:	ldrd	r8, [sp, #16]
   1b58c:	ldrd	sl, [sp, #24]
   1b590:	add	sp, sp, #32
   1b594:	pop	{pc}		; (ldr pc, [sp], #4)
   1b598:	mov	r9, r5
   1b59c:	b	1b578 <__assert_fail@plt+0x9630>
   1b5a0:	mov	r5, r6
   1b5a4:	mvn	r9, #0
   1b5a8:	mov	r2, r7
   1b5ac:	mov	r1, sl
   1b5b0:	mov	r0, fp
   1b5b4:	bl	11f0c <strncmp@plt>
   1b5b8:	cmp	r0, #0
   1b5bc:	mov	r0, fp
   1b5c0:	bne	1b5dc <__assert_fail@plt+0x9694>
   1b5c4:	bl	11d50 <strlen@plt>
   1b5c8:	cmp	r0, r7
   1b5cc:	beq	1b598 <__assert_fail@plt+0x9650>
   1b5d0:	cmn	r9, #1
   1b5d4:	moveq	r9, r5
   1b5d8:	movne	r6, #1
   1b5dc:	ldr	fp, [r4, #4]!
   1b5e0:	add	r5, r5, #1
   1b5e4:	cmp	fp, #0
   1b5e8:	bne	1b5a8 <__assert_fail@plt+0x9660>
   1b5ec:	str	r6, [sp, #4]
   1b5f0:	b	1b56c <__assert_fail@plt+0x9624>
   1b5f4:	mvn	r9, #0
   1b5f8:	b	1b578 <__assert_fail@plt+0x9630>
   1b5fc:	strd	r4, [sp, #-16]!
   1b600:	str	r6, [sp, #8]
   1b604:	mov	r6, r0
   1b608:	ldr	r0, [r1]
   1b60c:	str	lr, [sp, #12]
   1b610:	cmp	r0, #0
   1b614:	beq	1b658 <__assert_fail@plt+0x9710>
   1b618:	mov	r4, r1
   1b61c:	mov	r5, #0
   1b620:	b	1b634 <__assert_fail@plt+0x96ec>
   1b624:	ldr	r0, [r4, #4]!
   1b628:	add	r5, r5, #1
   1b62c:	cmp	r0, #0
   1b630:	beq	1b658 <__assert_fail@plt+0x9710>
   1b634:	mov	r1, r6
   1b638:	bl	11a2c <strcmp@plt>
   1b63c:	cmp	r0, #0
   1b640:	bne	1b624 <__assert_fail@plt+0x96dc>
   1b644:	mov	r0, r5
   1b648:	ldrd	r4, [sp]
   1b64c:	ldr	r6, [sp, #8]
   1b650:	add	sp, sp, #12
   1b654:	pop	{pc}		; (ldr pc, [sp], #4)
   1b658:	ldrd	r4, [sp]
   1b65c:	mvn	r0, #0
   1b660:	ldr	r6, [sp, #8]
   1b664:	add	sp, sp, #12
   1b668:	pop	{pc}		; (ldr pc, [sp], #4)
   1b66c:	cmn	r2, #1
   1b670:	strd	r4, [sp, #-16]!
   1b674:	mov	r5, r1
   1b678:	movweq	r1, #38344	; 0x95c8
   1b67c:	movwne	r1, #38372	; 0x95e4
   1b680:	str	r6, [sp, #8]
   1b684:	movteq	r1, #2
   1b688:	movtne	r1, #2
   1b68c:	str	lr, [sp, #12]
   1b690:	mov	r6, r0
   1b694:	sub	sp, sp, #8
   1b698:	mov	r2, #5
   1b69c:	mov	r0, #0
   1b6a0:	bl	11b58 <dcgettext@plt>
   1b6a4:	mov	r4, r0
   1b6a8:	mov	r2, r5
   1b6ac:	mov	r1, #8
   1b6b0:	mov	r0, #0
   1b6b4:	bl	21cf4 <__assert_fail@plt+0xfdac>
   1b6b8:	mov	r5, r0
   1b6bc:	mov	r1, r6
   1b6c0:	mov	r0, #1
   1b6c4:	bl	230ec <__assert_fail@plt+0x111a4>
   1b6c8:	mov	r1, #0
   1b6cc:	mov	r3, r5
   1b6d0:	str	r0, [sp]
   1b6d4:	mov	r2, r4
   1b6d8:	mov	r0, r1
   1b6dc:	bl	11c90 <error@plt>
   1b6e0:	add	sp, sp, #8
   1b6e4:	ldrd	r4, [sp]
   1b6e8:	ldr	r6, [sp, #8]
   1b6ec:	add	sp, sp, #12
   1b6f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b6f8:	mov	r4, r1
   1b6fc:	movw	r1, #38404	; 0x9604
   1b700:	movt	r1, #2
   1b704:	strd	r6, [sp, #8]
   1b708:	mov	r6, r0
   1b70c:	mov	r7, r2
   1b710:	mov	r0, #0
   1b714:	strd	r8, [sp, #16]
   1b718:	mov	r2, #5
   1b71c:	strd	sl, [sp, #24]
   1b720:	movw	sl, #41672	; 0xa2c8
   1b724:	movt	sl, #3
   1b728:	str	lr, [sp, #32]
   1b72c:	sub	sp, sp, #12
   1b730:	bl	11b58 <dcgettext@plt>
   1b734:	ldr	r1, [sl]
   1b738:	bl	11a14 <fputs_unlocked@plt>
   1b73c:	ldr	fp, [r6]
   1b740:	cmp	fp, #0
   1b744:	beq	1b7e4 <__assert_fail@plt+0x989c>
   1b748:	movw	r3, #38428	; 0x961c
   1b74c:	movt	r3, #2
   1b750:	mov	r9, #0
   1b754:	str	r3, [sp]
   1b758:	movw	r3, #38436	; 0x9624
   1b75c:	movt	r3, #2
   1b760:	mov	r5, r9
   1b764:	str	r3, [sp, #4]
   1b768:	b	1b7a0 <__assert_fail@plt+0x9858>
   1b76c:	mov	r0, fp
   1b770:	mov	r9, r4
   1b774:	bl	230fc <__assert_fail@plt+0x111b4>
   1b778:	mov	r3, r0
   1b77c:	mov	r1, #1
   1b780:	ldr	r2, [sp]
   1b784:	mov	r0, r8
   1b788:	bl	11dd4 <__fprintf_chk@plt>
   1b78c:	ldr	fp, [r6, #4]!
   1b790:	add	r5, r5, #1
   1b794:	add	r4, r4, r7
   1b798:	cmp	fp, #0
   1b79c:	beq	1b7e4 <__assert_fail@plt+0x989c>
   1b7a0:	cmp	r5, #0
   1b7a4:	mov	r1, r4
   1b7a8:	ldr	r8, [sl]
   1b7ac:	mov	r2, r7
   1b7b0:	mov	r0, r9
   1b7b4:	beq	1b76c <__assert_fail@plt+0x9824>
   1b7b8:	bl	11b40 <memcmp@plt>
   1b7bc:	cmp	r0, #0
   1b7c0:	bne	1b76c <__assert_fail@plt+0x9824>
   1b7c4:	mov	r0, fp
   1b7c8:	bl	230fc <__assert_fail@plt+0x111b4>
   1b7cc:	mov	r3, r0
   1b7d0:	mov	r1, #1
   1b7d4:	ldr	r2, [sp, #4]
   1b7d8:	mov	r0, r8
   1b7dc:	bl	11dd4 <__fprintf_chk@plt>
   1b7e0:	b	1b78c <__assert_fail@plt+0x9844>
   1b7e4:	ldr	r0, [sl]
   1b7e8:	ldr	r3, [r0, #20]
   1b7ec:	ldr	r2, [r0, #24]
   1b7f0:	cmp	r3, r2
   1b7f4:	bcs	1b824 <__assert_fail@plt+0x98dc>
   1b7f8:	add	r1, r3, #1
   1b7fc:	mov	r2, #10
   1b800:	str	r1, [r0, #20]
   1b804:	strb	r2, [r3]
   1b808:	add	sp, sp, #12
   1b80c:	ldrd	r4, [sp]
   1b810:	ldrd	r6, [sp, #8]
   1b814:	ldrd	r8, [sp, #16]
   1b818:	ldrd	sl, [sp, #24]
   1b81c:	add	sp, sp, #32
   1b820:	pop	{pc}		; (ldr pc, [sp], #4)
   1b824:	mov	r1, #10
   1b828:	add	sp, sp, #12
   1b82c:	ldrd	r4, [sp]
   1b830:	ldrd	r6, [sp, #8]
   1b834:	ldrd	r8, [sp, #16]
   1b838:	ldrd	sl, [sp, #24]
   1b83c:	ldr	lr, [sp, #32]
   1b840:	add	sp, sp, #36	; 0x24
   1b844:	b	11e1c <__overflow@plt>
   1b848:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1b84c:	mov	r5, r1
   1b850:	strd	r6, [sp, #8]
   1b854:	mov	r6, r2
   1b858:	mov	r7, r3
   1b85c:	strd	r8, [sp, #16]
   1b860:	mov	r8, r0
   1b864:	str	lr, [sp, #24]
   1b868:	sub	sp, sp, #12
   1b86c:	ldrb	r4, [sp, #48]	; 0x30
   1b870:	cmp	r4, #0
   1b874:	bne	1b920 <__assert_fail@plt+0x99d8>
   1b878:	ldr	r0, [r2]
   1b87c:	cmp	r0, #0
   1b880:	movne	r9, r2
   1b884:	bne	1b908 <__assert_fail@plt+0x99c0>
   1b888:	movw	r1, #38344	; 0x95c8
   1b88c:	movt	r1, #2
   1b890:	mov	r2, #5
   1b894:	mov	r0, #0
   1b898:	bl	11b58 <dcgettext@plt>
   1b89c:	mov	r9, r0
   1b8a0:	mov	r2, r5
   1b8a4:	mov	r1, #8
   1b8a8:	mov	r0, #0
   1b8ac:	bl	21cf4 <__assert_fail@plt+0xfdac>
   1b8b0:	mov	r4, r0
   1b8b4:	mov	r1, r8
   1b8b8:	mov	r0, #1
   1b8bc:	bl	230ec <__assert_fail@plt+0x111a4>
   1b8c0:	mov	r1, #0
   1b8c4:	mov	r3, r4
   1b8c8:	str	r0, [sp]
   1b8cc:	mov	r2, r9
   1b8d0:	mov	r0, r1
   1b8d4:	bl	11c90 <error@plt>
   1b8d8:	mov	r0, r6
   1b8dc:	mov	r1, r7
   1b8e0:	ldr	r2, [sp, #40]	; 0x28
   1b8e4:	bl	1b6f4 <__assert_fail@plt+0x97ac>
   1b8e8:	ldr	r3, [sp, #44]	; 0x2c
   1b8ec:	blx	r3
   1b8f0:	mvn	r0, #0
   1b8f4:	b	1b93c <__assert_fail@plt+0x99f4>
   1b8f8:	ldr	r0, [r9, #4]!
   1b8fc:	add	r4, r4, #1
   1b900:	cmp	r0, #0
   1b904:	beq	1b888 <__assert_fail@plt+0x9940>
   1b908:	mov	r1, r5
   1b90c:	bl	11a2c <strcmp@plt>
   1b910:	cmp	r0, #0
   1b914:	bne	1b8f8 <__assert_fail@plt+0x99b0>
   1b918:	mov	r0, r4
   1b91c:	b	1b93c <__assert_fail@plt+0x99f4>
   1b920:	mov	r2, r3
   1b924:	mov	r1, r6
   1b928:	ldr	r3, [sp, #40]	; 0x28
   1b92c:	mov	r0, r5
   1b930:	bl	1b4ac <__assert_fail@plt+0x9564>
   1b934:	cmp	r0, #0
   1b938:	blt	1b954 <__assert_fail@plt+0x9a0c>
   1b93c:	add	sp, sp, #12
   1b940:	ldrd	r4, [sp]
   1b944:	ldrd	r6, [sp, #8]
   1b948:	ldrd	r8, [sp, #16]
   1b94c:	add	sp, sp, #24
   1b950:	pop	{pc}		; (ldr pc, [sp], #4)
   1b954:	cmn	r0, #1
   1b958:	beq	1b888 <__assert_fail@plt+0x9940>
   1b95c:	movw	r1, #38372	; 0x95e4
   1b960:	movt	r1, #2
   1b964:	mov	r2, #5
   1b968:	mov	r0, #0
   1b96c:	bl	11b58 <dcgettext@plt>
   1b970:	mov	r9, r0
   1b974:	b	1b8a0 <__assert_fail@plt+0x9958>
   1b978:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b97c:	strd	r6, [sp, #8]
   1b980:	ldr	r7, [r1]
   1b984:	str	r8, [sp, #16]
   1b988:	str	lr, [sp, #20]
   1b98c:	cmp	r7, #0
   1b990:	beq	1b9d0 <__assert_fail@plt+0x9a88>
   1b994:	mov	r6, r3
   1b998:	mov	r8, r0
   1b99c:	mov	r4, r2
   1b9a0:	mov	r5, r1
   1b9a4:	b	1b9b4 <__assert_fail@plt+0x9a6c>
   1b9a8:	ldr	r7, [r5, #4]!
   1b9ac:	cmp	r7, #0
   1b9b0:	beq	1b9d0 <__assert_fail@plt+0x9a88>
   1b9b4:	mov	r1, r4
   1b9b8:	mov	r2, r6
   1b9bc:	mov	r0, r8
   1b9c0:	add	r4, r4, r6
   1b9c4:	bl	11b40 <memcmp@plt>
   1b9c8:	cmp	r0, #0
   1b9cc:	bne	1b9a8 <__assert_fail@plt+0x9a60>
   1b9d0:	mov	r0, r7
   1b9d4:	ldrd	r4, [sp]
   1b9d8:	ldrd	r6, [sp, #8]
   1b9dc:	ldr	r8, [sp, #16]
   1b9e0:	add	sp, sp, #20
   1b9e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9e8:	movw	r3, #43192	; 0xa8b8
   1b9ec:	movt	r3, #3
   1b9f0:	str	r0, [r3]
   1b9f4:	bx	lr
   1b9f8:	movw	r3, #43192	; 0xa8b8
   1b9fc:	movt	r3, #3
   1ba00:	strb	r0, [r3, #4]
   1ba04:	bx	lr
   1ba08:	movw	r3, #41684	; 0xa2d4
   1ba0c:	movt	r3, #3
   1ba10:	strd	r4, [sp, #-16]!
   1ba14:	ldr	r0, [r3]
   1ba18:	str	r6, [sp, #8]
   1ba1c:	str	lr, [sp, #12]
   1ba20:	sub	sp, sp, #8
   1ba24:	bl	26364 <__assert_fail@plt+0x1441c>
   1ba28:	cmp	r0, #0
   1ba2c:	beq	1ba58 <__assert_fail@plt+0x9b10>
   1ba30:	movw	r4, #43192	; 0xa8b8
   1ba34:	movt	r4, #3
   1ba38:	ldrb	r6, [r4, #4]
   1ba3c:	bl	11d74 <__errno_location@plt>
   1ba40:	mov	r5, r0
   1ba44:	cmp	r6, #0
   1ba48:	beq	1ba84 <__assert_fail@plt+0x9b3c>
   1ba4c:	ldr	r3, [r0]
   1ba50:	cmp	r3, #32
   1ba54:	bne	1ba84 <__assert_fail@plt+0x9b3c>
   1ba58:	movw	r3, #41672	; 0xa2c8
   1ba5c:	movt	r3, #3
   1ba60:	ldr	r0, [r3]
   1ba64:	bl	26364 <__assert_fail@plt+0x1441c>
   1ba68:	cmp	r0, #0
   1ba6c:	bne	1bacc <__assert_fail@plt+0x9b84>
   1ba70:	add	sp, sp, #8
   1ba74:	ldrd	r4, [sp]
   1ba78:	ldr	r6, [sp, #8]
   1ba7c:	add	sp, sp, #12
   1ba80:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba84:	movw	r1, #38444	; 0x962c
   1ba88:	movt	r1, #2
   1ba8c:	mov	r2, #5
   1ba90:	mov	r0, #0
   1ba94:	bl	11b58 <dcgettext@plt>
   1ba98:	mov	r6, r0
   1ba9c:	ldr	r0, [r4]
   1baa0:	cmp	r0, #0
   1baa4:	beq	1badc <__assert_fail@plt+0x9b94>
   1baa8:	ldr	r4, [r5]
   1baac:	bl	22580 <__assert_fail@plt+0x10638>
   1bab0:	mov	r3, r0
   1bab4:	movw	r2, #31076	; 0x7964
   1bab8:	movt	r2, #2
   1babc:	mov	r0, #0
   1bac0:	str	r6, [sp]
   1bac4:	mov	r1, r4
   1bac8:	bl	11c90 <error@plt>
   1bacc:	movw	r3, #41584	; 0xa270
   1bad0:	movt	r3, #3
   1bad4:	ldr	r0, [r3]
   1bad8:	bl	11abc <_exit@plt>
   1badc:	mov	r3, r6
   1bae0:	movw	r2, #31468	; 0x7aec
   1bae4:	movt	r2, #2
   1bae8:	ldr	r1, [r5]
   1baec:	bl	11c90 <error@plt>
   1baf0:	b	1bacc <__assert_fail@plt+0x9b84>
   1baf4:	andeq	r0, r0, r0
   1baf8:	mov	r3, #0
   1bafc:	movw	ip, #43913	; 0xab89
   1bb00:	movt	ip, #61389	; 0xefcd
   1bb04:	movw	r1, #56574	; 0xdcfe
   1bb08:	movt	r1, #39098	; 0x98ba
   1bb0c:	movw	r2, #21622	; 0x5476
   1bb10:	movt	r2, #4146	; 0x1032
   1bb14:	push	{lr}		; (str lr, [sp, #-4]!)
   1bb18:	movw	lr, #8961	; 0x2301
   1bb1c:	movt	lr, #26437	; 0x6745
   1bb20:	str	r3, [r0, #20]
   1bb24:	str	lr, [r0]
   1bb28:	str	ip, [r0, #4]
   1bb2c:	str	r1, [r0, #8]
   1bb30:	strd	r2, [r0, #12]
   1bb34:	str	r3, [r0, #24]
   1bb38:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb3c:	mov	r3, r0
   1bb40:	mov	r0, r1
   1bb44:	ldr	r2, [r3]
   1bb48:	str	r2, [r1]
   1bb4c:	ldr	r2, [r3, #4]
   1bb50:	str	r2, [r1, #4]
   1bb54:	ldr	r2, [r3, #8]
   1bb58:	str	r2, [r1, #8]
   1bb5c:	ldr	r3, [r3, #12]
   1bb60:	str	r3, [r1, #12]
   1bb64:	bx	lr
   1bb68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bb6c:	mov	r4, r2
   1bb70:	bic	r3, r1, #3
   1bb74:	ldr	r5, [r2]
   1bb78:	ldr	ip, [r2, #20]
   1bb7c:	strd	r6, [sp, #8]
   1bb80:	strd	r8, [sp, #16]
   1bb84:	strd	sl, [sp, #24]
   1bb88:	str	lr, [sp, #32]
   1bb8c:	sub	sp, sp, #124	; 0x7c
   1bb90:	add	lr, r0, r3
   1bb94:	str	r5, [sp, #68]	; 0x44
   1bb98:	str	r2, [sp, #116]	; 0x74
   1bb9c:	ldr	r2, [r2, #16]
   1bba0:	adds	r2, r2, r1
   1bba4:	movcs	r1, #1
   1bba8:	movcc	r1, #0
   1bbac:	cmp	r0, lr
   1bbb0:	mov	lr, r4
   1bbb4:	ldr	r4, [r4, #4]
   1bbb8:	add	ip, ip, r1
   1bbbc:	str	r2, [lr, #16]
   1bbc0:	ldr	r2, [lr, #8]
   1bbc4:	str	ip, [lr, #20]
   1bbc8:	str	r4, [sp, #24]
   1bbcc:	str	r2, [sp, #28]
   1bbd0:	ldr	r2, [lr, #12]
   1bbd4:	str	r2, [sp, #32]
   1bbd8:	bcs	1c6a0 <__assert_fail@plt+0xa758>
   1bbdc:	sub	r3, r3, #1
   1bbe0:	add	r2, r0, #128	; 0x80
   1bbe4:	bic	r3, r3, #63	; 0x3f
   1bbe8:	add	r8, r0, #64	; 0x40
   1bbec:	add	r3, r3, r2
   1bbf0:	str	r8, [sp, #4]
   1bbf4:	str	r3, [sp, #76]	; 0x4c
   1bbf8:	movw	r3, #42104	; 0xa478
   1bbfc:	movt	r3, #55146	; 0xd76a
   1bc00:	str	r3, [sp, #80]	; 0x50
   1bc04:	movw	r3, #46934	; 0xb756
   1bc08:	movt	r3, #59591	; 0xe8c7
   1bc0c:	str	r3, [sp, #84]	; 0x54
   1bc10:	movw	r3, #28891	; 0x70db
   1bc14:	movt	r3, #9248	; 0x2420
   1bc18:	str	r3, [sp, #88]	; 0x58
   1bc1c:	movw	r3, #52974	; 0xceee
   1bc20:	movt	r3, #49597	; 0xc1bd
   1bc24:	str	r3, [sp, #92]	; 0x5c
   1bc28:	movw	r3, #50730	; 0xc62a
   1bc2c:	movt	r3, #18311	; 0x4787
   1bc30:	str	r3, [sp, #96]	; 0x60
   1bc34:	movw	r3, #17939	; 0x4613
   1bc38:	movt	r3, #43056	; 0xa830
   1bc3c:	str	r3, [sp, #100]	; 0x64
   1bc40:	movw	r3, #38145	; 0x9501
   1bc44:	movt	r3, #64838	; 0xfd46
   1bc48:	str	r3, [sp, #104]	; 0x68
   1bc4c:	movw	r3, #39128	; 0x98d8
   1bc50:	movt	r3, #27008	; 0x6980
   1bc54:	str	r3, [sp, #108]	; 0x6c
   1bc58:	movw	r3, #55230	; 0xd7be
   1bc5c:	movt	r3, #35164	; 0x895c
   1bc60:	str	r3, [sp, #112]	; 0x70
   1bc64:	ldr	r0, [sp, #4]
   1bc68:	ldr	r1, [sp, #68]	; 0x44
   1bc6c:	ldr	lr, [sp, #80]	; 0x50
   1bc70:	ldr	r2, [sp, #32]
   1bc74:	ldr	r7, [sp, #24]
   1bc78:	add	sl, r1, lr
   1bc7c:	ldr	r6, [sp, #28]
   1bc80:	ldr	lr, [sp, #84]	; 0x54
   1bc84:	ldr	r4, [r0, #-64]	; 0xffffffc0
   1bc88:	eor	ip, r6, r2
   1bc8c:	eor	r9, r7, r6
   1bc90:	and	ip, ip, r7
   1bc94:	ldr	r8, [r0, #-60]	; 0xffffffc4
   1bc98:	add	r3, r2, lr
   1bc9c:	eor	ip, ip, r2
   1bca0:	ldr	lr, [sp, #88]	; 0x58
   1bca4:	add	sl, sl, r4
   1bca8:	add	sl, ip, sl
   1bcac:	add	sl, r7, sl, ror #25
   1bcb0:	add	r3, r3, r8
   1bcb4:	str	r8, [sp, #36]	; 0x24
   1bcb8:	str	r4, [sp, #72]	; 0x48
   1bcbc:	movw	r4, #63407	; 0xf7af
   1bcc0:	movt	r4, #35652	; 0x8b44
   1bcc4:	add	r1, r6, lr
   1bcc8:	ldr	lr, [sp, #92]	; 0x5c
   1bccc:	and	r9, r9, sl
   1bcd0:	eor	r9, r9, r6
   1bcd4:	eor	r6, sl, r7
   1bcd8:	str	r4, [sp, #60]	; 0x3c
   1bcdc:	add	r9, r9, r3
   1bce0:	movw	r4, #4386	; 0x1122
   1bce4:	movt	r4, #27536	; 0x6b90
   1bce8:	add	r9, sl, r9, ror #20
   1bcec:	add	r2, r7, lr
   1bcf0:	mov	lr, r0
   1bcf4:	mov	ip, lr
   1bcf8:	ldr	fp, [lr, #-56]	; 0xffffffc8
   1bcfc:	and	r6, r6, r9
   1bd00:	eor	r6, r6, r7
   1bd04:	movw	r0, #4015	; 0xfaf
   1bd08:	movt	r0, #62844	; 0xf57c
   1bd0c:	ldr	r5, [lr, #-44]	; 0xffffffd4
   1bd10:	ldr	lr, [lr, #-52]	; 0xffffffcc
   1bd14:	add	r1, r1, fp
   1bd18:	add	r6, r6, r1
   1bd1c:	ldr	r7, [sp, #100]	; 0x64
   1bd20:	add	r6, r9, r6, ror #15
   1bd24:	str	lr, [sp, #8]
   1bd28:	ldr	r3, [sp, #8]
   1bd2c:	str	fp, [sp, #40]	; 0x28
   1bd30:	ldr	lr, [ip, #-48]	; 0xffffffd0
   1bd34:	str	r5, [sp, #48]	; 0x30
   1bd38:	add	r2, r2, r3
   1bd3c:	mov	r3, ip
   1bd40:	ldr	ip, [ip, #-40]	; 0xffffffd8
   1bd44:	ldr	r1, [r3, #-32]	; 0xffffffe0
   1bd48:	mov	r8, lr
   1bd4c:	movw	lr, #29075	; 0x7193
   1bd50:	movt	lr, #64920	; 0xfd98
   1bd54:	add	r0, r8, r0
   1bd58:	add	r0, r0, sl
   1bd5c:	mov	fp, ip
   1bd60:	ldr	ip, [r3, #-36]	; 0xffffffdc
   1bd64:	str	r1, [sp, #16]
   1bd68:	ldr	r1, [sp, #96]	; 0x60
   1bd6c:	str	ip, [sp, #12]
   1bd70:	eor	ip, sl, r9
   1bd74:	and	ip, ip, r6
   1bd78:	str	r8, [sp, #44]	; 0x2c
   1bd7c:	movw	r8, #17294	; 0x438e
   1bd80:	movt	r8, #42617	; 0xa679
   1bd84:	eor	sl, sl, ip
   1bd88:	str	fp, [sp, #52]	; 0x34
   1bd8c:	add	sl, sl, r2
   1bd90:	add	fp, fp, r7
   1bd94:	add	r1, r5, r1
   1bd98:	ldr	r5, [r3, #-28]	; 0xffffffe4
   1bd9c:	add	fp, fp, r6
   1bda0:	add	r1, r1, r9
   1bda4:	movw	r7, #2081	; 0x821
   1bda8:	movt	r7, #18868	; 0x49b4
   1bdac:	ldr	ip, [r3, #-24]	; 0xffffffe8
   1bdb0:	eor	r3, r9, r6
   1bdb4:	ldr	r2, [sp, #60]	; 0x3c
   1bdb8:	str	ip, [sp, #20]
   1bdbc:	add	ip, r6, sl, ror #10
   1bdc0:	ldr	sl, [sp, #12]
   1bdc4:	and	r3, r3, ip
   1bdc8:	str	r5, [sp, #56]	; 0x38
   1bdcc:	add	r5, r5, r2
   1bdd0:	eor	r9, r9, r3
   1bdd4:	eor	r3, r6, ip
   1bdd8:	ldr	r2, [sp, #108]	; 0x6c
   1bddc:	add	r0, r9, r0
   1bde0:	ldr	r9, [sp, #104]	; 0x68
   1bde4:	add	r0, ip, r0, ror #25
   1bde8:	and	r3, r3, r0
   1bdec:	eor	r6, r6, r3
   1bdf0:	add	r1, r6, r1
   1bdf4:	ldr	r6, [sp, #20]
   1bdf8:	add	sl, sl, r9
   1bdfc:	add	r1, r0, r1, ror #20
   1be00:	ldr	r9, [sp, #16]
   1be04:	add	sl, sl, ip
   1be08:	eor	r3, r0, r1
   1be0c:	add	r5, r5, r1
   1be10:	sub	r6, r6, #41984	; 0xa400
   1be14:	sub	r6, r6, #79	; 0x4f
   1be18:	add	r9, r9, r2
   1be1c:	eor	r2, ip, r0
   1be20:	and	r2, r2, r1
   1be24:	add	r9, r9, r0
   1be28:	eor	r2, r2, ip
   1be2c:	add	fp, r2, fp
   1be30:	ldr	r2, [sp, #4]
   1be34:	add	fp, r1, fp, ror #15
   1be38:	and	r3, r3, fp
   1be3c:	add	r6, r6, fp
   1be40:	eor	r3, r3, r0
   1be44:	movw	r0, #9570	; 0x2562
   1be48:	movt	r0, #63006	; 0xf61e
   1be4c:	add	sl, r3, sl
   1be50:	ldr	ip, [r2, #-20]	; 0xffffffec
   1be54:	add	sl, fp, sl, ror #10
   1be58:	eor	r2, r1, fp
   1be5c:	ldr	r3, [sp, #112]	; 0x70
   1be60:	and	r2, r2, sl
   1be64:	eor	r1, r1, r2
   1be68:	add	r9, r1, r9
   1be6c:	str	ip, [sp, #60]	; 0x3c
   1be70:	add	r9, sl, r9, ror #25
   1be74:	ldr	r1, [sp, #4]
   1be78:	add	ip, ip, r3
   1be7c:	eor	r3, fp, sl
   1be80:	and	r3, r3, r9
   1be84:	add	ip, ip, sl
   1be88:	eor	fp, fp, r3
   1be8c:	eor	r3, sl, r9
   1be90:	add	r5, fp, r5
   1be94:	add	r5, r9, r5, ror #20
   1be98:	ldr	r2, [r1, #-16]
   1be9c:	and	r3, r3, r5
   1bea0:	eor	sl, sl, r3
   1bea4:	eor	r3, r9, r5
   1bea8:	add	r6, sl, r6
   1beac:	mov	sl, r1
   1beb0:	add	r6, r5, r6, ror #15
   1beb4:	add	r4, r2, r4
   1beb8:	ldr	sl, [sl, #-8]
   1bebc:	add	r4, r4, r9
   1bec0:	and	r3, r3, r6
   1bec4:	eor	r3, r3, r9
   1bec8:	ldr	r9, [sp, #52]	; 0x34
   1becc:	add	r3, r3, ip
   1bed0:	mov	ip, r1
   1bed4:	ldr	r1, [r1, #-12]
   1bed8:	add	r3, r6, r3, ror #10
   1bedc:	add	r8, sl, r8
   1bee0:	mov	fp, r1
   1bee4:	add	lr, r1, lr
   1bee8:	ldr	r1, [sp, #36]	; 0x24
   1beec:	add	lr, lr, r5
   1bef0:	str	fp, [sp, #64]	; 0x40
   1bef4:	movw	fp, #4189	; 0x105d
   1bef8:	movt	fp, #54831	; 0xd62f
   1befc:	add	r0, r1, r0
   1bf00:	eor	r1, r5, r6
   1bf04:	and	r1, r1, r3
   1bf08:	eor	r5, r5, r1
   1bf0c:	eor	r1, r6, r3
   1bf10:	add	r4, r5, r4
   1bf14:	movw	r5, #45888	; 0xb340
   1bf18:	movt	r5, #49216	; 0xc040
   1bf1c:	add	r4, r3, r4, ror #25
   1bf20:	add	r5, r9, r5
   1bf24:	ldr	r9, [sp, #76]	; 0x4c
   1bf28:	and	r1, r1, r4
   1bf2c:	add	r0, r0, r4
   1bf30:	eor	r1, r1, r6
   1bf34:	add	r6, r8, r6
   1bf38:	add	lr, r1, lr
   1bf3c:	eor	r1, r3, r4
   1bf40:	add	lr, r4, lr, ror #20
   1bf44:	mov	r8, ip
   1bf48:	ldr	ip, [ip, #-4]
   1bf4c:	add	r8, r8, #64	; 0x40
   1bf50:	and	r1, r1, lr
   1bf54:	cmp	r9, r8
   1bf58:	eor	r1, r1, r3
   1bf5c:	movw	r9, #23121	; 0x5a51
   1bf60:	movt	r9, #9822	; 0x265e
   1bf64:	add	r6, r1, r6
   1bf68:	str	r8, [sp, #4]
   1bf6c:	add	r6, lr, r6, ror #15
   1bf70:	eor	r1, r4, lr
   1bf74:	add	r7, ip, r7
   1bf78:	add	r7, r7, r3
   1bf7c:	add	r5, r5, lr
   1bf80:	and	r1, r1, r6
   1bf84:	movw	r8, #5203	; 0x1453
   1bf88:	movt	r8, #580	; 0x244
   1bf8c:	eor	r4, r4, r1
   1bf90:	ldr	r1, [sp, #60]	; 0x3c
   1bf94:	add	r7, r4, r7
   1bf98:	add	r7, r6, r7, ror #10
   1bf9c:	ldr	r4, [sp, #72]	; 0x48
   1bfa0:	eor	r3, r6, r7
   1bfa4:	and	r3, r3, lr
   1bfa8:	add	r9, r1, r9
   1bfac:	eor	r3, r3, r6
   1bfb0:	add	r9, r9, r6
   1bfb4:	add	r0, r3, r0
   1bfb8:	movw	lr, #51114	; 0xc7aa
   1bfbc:	movt	lr, #59830	; 0xe9b6
   1bfc0:	add	r0, r7, r0, ror #27
   1bfc4:	add	lr, r4, lr
   1bfc8:	ldr	r4, [sp, #48]	; 0x30
   1bfcc:	eor	r1, r7, r0
   1bfd0:	add	lr, lr, r7
   1bfd4:	and	r6, r6, r1
   1bfd8:	ldr	r1, [sp, #20]
   1bfdc:	eor	r6, r6, r7
   1bfe0:	add	r5, r6, r5
   1bfe4:	movw	r6, #59009	; 0xe681
   1bfe8:	movt	r6, #55457	; 0xd8a1
   1bfec:	add	r5, r0, r5, ror #23
   1bff0:	add	fp, r4, fp
   1bff4:	add	fp, fp, r0
   1bff8:	add	r6, ip, r6
   1bffc:	eor	r3, r0, r5
   1c000:	add	r8, r1, r8
   1c004:	and	r3, r3, r7
   1c008:	add	r8, r8, r5
   1c00c:	eor	r3, r3, r0
   1c010:	movw	r7, #64456	; 0xfbc8
   1c014:	movt	r7, #59347	; 0xe7d3
   1c018:	add	r4, r3, r9
   1c01c:	add	r4, r5, r4, ror #18
   1c020:	movw	r9, #2006	; 0x7d6
   1c024:	movt	r9, #49975	; 0xc337
   1c028:	add	r9, sl, r9
   1c02c:	eor	r3, r5, r4
   1c030:	add	r6, r6, r4
   1c034:	and	r0, r0, r3
   1c038:	eor	r0, r0, r5
   1c03c:	add	lr, r0, lr
   1c040:	ldr	r0, [sp, #44]	; 0x2c
   1c044:	add	lr, r4, lr, ror #12
   1c048:	eor	r3, r4, lr
   1c04c:	and	r3, r3, r5
   1c050:	movw	r5, #52710	; 0xcde6
   1c054:	movt	r5, #8673	; 0x21e1
   1c058:	eor	r3, r3, r4
   1c05c:	add	r3, r3, fp
   1c060:	add	r7, r0, r7
   1c064:	ldr	r0, [sp, #56]	; 0x38
   1c068:	add	r3, lr, r3, ror #27
   1c06c:	add	r7, r7, lr
   1c070:	eor	r1, lr, r3
   1c074:	and	r1, r1, r4
   1c078:	movw	r4, #3463	; 0xd87
   1c07c:	movt	r4, #62677	; 0xf4d5
   1c080:	eor	r1, r1, lr
   1c084:	add	r8, r1, r8
   1c088:	add	r5, r0, r5
   1c08c:	ldr	r0, [sp, #16]
   1c090:	add	r8, r3, r8, ror #23
   1c094:	add	r5, r5, r3
   1c098:	eor	r1, r3, r8
   1c09c:	add	r9, r9, r8
   1c0a0:	and	r1, r1, lr
   1c0a4:	ldr	lr, [sp, #8]
   1c0a8:	eor	r1, r1, r3
   1c0ac:	add	r1, r1, r6
   1c0b0:	movw	r6, #5357	; 0x14ed
   1c0b4:	movt	r6, #17754	; 0x455a
   1c0b8:	add	r1, r8, r1, ror #18
   1c0bc:	add	r6, r0, r6
   1c0c0:	add	r4, lr, r4
   1c0c4:	eor	lr, r8, r1
   1c0c8:	and	lr, lr, r3
   1c0cc:	add	r4, r4, r1
   1c0d0:	eor	lr, lr, r8
   1c0d4:	add	r7, lr, r7
   1c0d8:	add	r7, r1, r7, ror #12
   1c0dc:	eor	r3, r1, r7
   1c0e0:	add	r6, r6, r7
   1c0e4:	and	r8, r8, r3
   1c0e8:	ldr	r3, [sp, #64]	; 0x40
   1c0ec:	eor	r8, r8, r1
   1c0f0:	add	lr, r8, r5
   1c0f4:	movw	r5, #59653	; 0xe905
   1c0f8:	movt	r5, #43491	; 0xa9e3
   1c0fc:	add	lr, r7, lr, ror #27
   1c100:	ldr	fp, [sp, #40]	; 0x28
   1c104:	movw	r8, #41976	; 0xa3f8
   1c108:	movt	r8, #64751	; 0xfcef
   1c10c:	eor	r0, r7, lr
   1c110:	add	r5, r3, r5
   1c114:	and	r0, r0, r1
   1c118:	ldr	r1, [sp, #12]
   1c11c:	add	r5, r5, lr
   1c120:	eor	r0, r0, r7
   1c124:	add	r9, r0, r9
   1c128:	add	r8, fp, r8
   1c12c:	add	r9, lr, r9, ror #23
   1c130:	movw	fp, #59972	; 0xea44
   1c134:	movt	fp, #42174	; 0xa4be
   1c138:	eor	r3, lr, r9
   1c13c:	add	r8, r8, r9
   1c140:	and	r7, r7, r3
   1c144:	eor	r7, r7, lr
   1c148:	add	r0, r7, r4
   1c14c:	movw	r4, #729	; 0x2d9
   1c150:	movt	r4, #26479	; 0x676f
   1c154:	add	r0, r9, r0, ror #18
   1c158:	movw	r7, #19594	; 0x4c8a
   1c15c:	movt	r7, #36138	; 0x8d2a
   1c160:	add	r4, r1, r4
   1c164:	eor	r3, r9, r0
   1c168:	add	r4, r4, r0
   1c16c:	and	r3, r3, lr
   1c170:	movw	lr, #14658	; 0x3942
   1c174:	movt	lr, #65530	; 0xfffa
   1c178:	eor	r3, r3, r9
   1c17c:	add	r6, r3, r6
   1c180:	add	r7, r2, r7
   1c184:	add	r6, r0, r6, ror #12
   1c188:	eor	r3, r0, r6
   1c18c:	add	r7, r7, r6
   1c190:	and	r3, r3, r9
   1c194:	ldr	r9, [sp, #60]	; 0x3c
   1c198:	eor	r3, r3, r0
   1c19c:	add	r3, r3, r5
   1c1a0:	ldr	r5, [sp, #48]	; 0x30
   1c1a4:	add	r3, r6, r3, ror #27
   1c1a8:	eor	r1, r6, r3
   1c1ac:	and	r1, r1, r0
   1c1b0:	movw	r0, #63105	; 0xf681
   1c1b4:	movt	r0, #34673	; 0x8771
   1c1b8:	eor	r1, r1, r6
   1c1bc:	add	r8, r1, r8
   1c1c0:	add	lr, r5, lr
   1c1c4:	ldr	r5, [sp, #16]
   1c1c8:	add	r8, r3, r8, ror #23
   1c1cc:	add	lr, lr, r3
   1c1d0:	eor	r1, r3, r8
   1c1d4:	and	r1, r1, r6
   1c1d8:	movw	r6, #14348	; 0x380c
   1c1dc:	movt	r6, #64997	; 0xfde5
   1c1e0:	eor	r1, r1, r3
   1c1e4:	add	r1, r1, r4
   1c1e8:	add	r0, r5, r0
   1c1ec:	add	r1, r8, r1, ror #18
   1c1f0:	movw	r5, #24866	; 0x6122
   1c1f4:	movt	r5, #28061	; 0x6d9d
   1c1f8:	add	r5, r9, r5
   1c1fc:	add	r0, r0, r8
   1c200:	eor	r4, r8, r1
   1c204:	add	r5, r5, r1
   1c208:	and	r3, r3, r4
   1c20c:	add	r6, sl, r6
   1c210:	eor	r3, r3, r8
   1c214:	ldr	r8, [sp, #36]	; 0x24
   1c218:	movw	r9, #53161	; 0xcfa9
   1c21c:	movt	r9, #19422	; 0x4bde
   1c220:	add	r7, r3, r7
   1c224:	add	r7, r1, r7, ror #12
   1c228:	eor	r4, r4, r7
   1c22c:	eor	r1, r1, r7
   1c230:	add	lr, r4, lr
   1c234:	add	r6, r6, r7
   1c238:	add	lr, r7, lr, ror #28
   1c23c:	add	fp, r8, fp
   1c240:	movw	r8, #19296	; 0x4b60
   1c244:	movt	r8, #63163	; 0xf6bb
   1c248:	movw	r4, #48240	; 0xbc70
   1c24c:	movt	r4, #48831	; 0xbebf
   1c250:	eor	r1, r1, lr
   1c254:	add	r0, r1, r0
   1c258:	ldr	r1, [sp, #44]	; 0x2c
   1c25c:	eor	r7, r7, lr
   1c260:	add	r0, lr, r0, ror #21
   1c264:	add	fp, fp, lr
   1c268:	eor	r7, r7, r0
   1c26c:	eor	lr, lr, r0
   1c270:	add	r3, r7, r5
   1c274:	ldr	r5, [sp, #64]	; 0x40
   1c278:	add	r9, r1, r9
   1c27c:	add	r3, r0, r3, ror #16
   1c280:	ldr	r1, [sp, #12]
   1c284:	add	r9, r9, r0
   1c288:	eor	r0, r0, r3
   1c28c:	add	r8, r1, r8
   1c290:	eor	r1, lr, r3
   1c294:	ldr	lr, [sp, #20]
   1c298:	add	r1, r1, r6
   1c29c:	add	r8, r8, r3
   1c2a0:	add	r1, r3, r1, ror #9
   1c2a4:	eor	r0, r0, r1
   1c2a8:	eor	r3, r3, r1
   1c2ac:	add	r4, lr, r4
   1c2b0:	add	lr, r0, fp
   1c2b4:	ldr	fp, [sp, #40]	; 0x28
   1c2b8:	add	lr, r1, lr, ror #28
   1c2bc:	add	r4, r4, r1
   1c2c0:	movw	r0, #32454	; 0x7ec6
   1c2c4:	movt	r0, #10395	; 0x289b
   1c2c8:	eor	r3, r3, lr
   1c2cc:	eor	r1, r1, lr
   1c2d0:	add	r3, r3, r9
   1c2d4:	ldr	r9, [sp, #72]	; 0x48
   1c2d8:	add	r0, r5, r0
   1c2dc:	add	r3, lr, r3, ror #21
   1c2e0:	movw	r5, #10234	; 0x27fa
   1c2e4:	movt	r5, #60065	; 0xeaa1
   1c2e8:	add	r0, r0, lr
   1c2ec:	eor	r1, r1, r3
   1c2f0:	eor	lr, lr, r3
   1c2f4:	add	r6, r1, r8
   1c2f8:	ldr	r1, [sp, #8]
   1c2fc:	movw	r8, #12421	; 0x3085
   1c300:	movt	r8, #54511	; 0xd4ef
   1c304:	add	r6, r3, r6, ror #16
   1c308:	add	r5, r9, r5
   1c30c:	add	r5, r5, r3
   1c310:	eor	lr, lr, r6
   1c314:	add	lr, lr, r4
   1c318:	movw	r4, #7429	; 0x1d05
   1c31c:	movt	r4, #1160	; 0x488
   1c320:	add	r8, r1, r8
   1c324:	add	lr, r6, lr, ror #9
   1c328:	eor	r1, r3, r6
   1c32c:	ldr	r3, [sp, #52]	; 0x34
   1c330:	add	r8, r8, r6
   1c334:	eor	r1, r1, lr
   1c338:	eor	r6, r6, lr
   1c33c:	add	r1, r1, r0
   1c340:	movw	r0, #53305	; 0xd039
   1c344:	movt	r0, #55764	; 0xd9d4
   1c348:	add	r1, lr, r1, ror #28
   1c34c:	add	r4, r3, r4
   1c350:	ldr	r3, [sp, #56]	; 0x38
   1c354:	add	r4, r4, lr
   1c358:	eor	lr, lr, r1
   1c35c:	add	r0, r3, r0
   1c360:	eor	r3, r6, r1
   1c364:	add	r6, r3, r5
   1c368:	movw	r5, #39397	; 0x99e5
   1c36c:	movt	r5, #59099	; 0xe6db
   1c370:	add	r6, r1, r6, ror #21
   1c374:	add	r0, r0, r1
   1c378:	add	r5, r2, r5
   1c37c:	eor	lr, lr, r6
   1c380:	eor	r3, r1, r6
   1c384:	add	r7, lr, r8
   1c388:	add	r5, r5, r6
   1c38c:	add	r7, r6, r7, ror #16
   1c390:	movw	lr, #31992	; 0x7cf8
   1c394:	movt	lr, #8098	; 0x1fa2
   1c398:	add	lr, ip, lr
   1c39c:	eor	r3, r3, r7
   1c3a0:	eor	r6, r6, r7
   1c3a4:	add	r3, r3, r4
   1c3a8:	add	lr, lr, r7
   1c3ac:	add	r3, r7, r3, ror #9
   1c3b0:	movw	r4, #22117	; 0x5665
   1c3b4:	movt	r4, #50348	; 0xc4ac
   1c3b8:	add	r4, fp, r4
   1c3bc:	movw	fp, #65431	; 0xff97
   1c3c0:	movt	fp, #17194	; 0x432a
   1c3c4:	eor	r6, r6, r3
   1c3c8:	add	r6, r6, r0
   1c3cc:	eor	r7, r7, r3
   1c3d0:	add	r6, r3, r6, ror #28
   1c3d4:	add	r4, r4, r3
   1c3d8:	movw	r0, #8772	; 0x2244
   1c3dc:	movt	r0, #62505	; 0xf429
   1c3e0:	eor	r7, r7, r6
   1c3e4:	eor	r3, r3, r6
   1c3e8:	add	r7, r7, r5
   1c3ec:	add	r0, r9, r0
   1c3f0:	ldr	r9, [sp, #12]
   1c3f4:	add	r7, r6, r7, ror #21
   1c3f8:	add	r0, r0, r6
   1c3fc:	movw	r5, #9127	; 0x23a7
   1c400:	movt	r5, #43924	; 0xab94
   1c404:	eor	r3, r3, r7
   1c408:	eor	r6, r6, r7
   1c40c:	add	r1, r3, lr
   1c410:	add	r5, sl, r5
   1c414:	add	r1, r7, r1, ror #16
   1c418:	add	fp, r9, fp
   1c41c:	mvn	r9, r7
   1c420:	movw	lr, #41017	; 0xa039
   1c424:	movt	lr, #64659	; 0xfc93
   1c428:	eor	sl, r6, r1
   1c42c:	mvn	r3, r1
   1c430:	add	sl, sl, r4
   1c434:	ldr	r4, [sp, #48]	; 0x30
   1c438:	add	fp, fp, r7
   1c43c:	add	sl, r1, sl, ror #9
   1c440:	add	r5, r5, r1
   1c444:	movw	r6, #22979	; 0x59c3
   1c448:	movt	r6, #25947	; 0x655b
   1c44c:	orr	r8, r9, sl
   1c450:	mvn	r9, sl
   1c454:	eor	r8, r8, r1
   1c458:	ldr	r1, [sp, #8]
   1c45c:	add	r6, r2, r6
   1c460:	add	r8, r8, r0
   1c464:	add	lr, r4, lr
   1c468:	add	r8, sl, r8, ror #26
   1c46c:	add	lr, lr, sl
   1c470:	movw	r4, #52370	; 0xcc92
   1c474:	movt	r4, #36620	; 0x8f0c
   1c478:	movw	r0, #62589	; 0xf47d
   1c47c:	movt	r0, #65519	; 0xffef
   1c480:	orr	r3, r3, r8
   1c484:	eor	sl, sl, r3
   1c488:	add	r6, r6, r8
   1c48c:	add	sl, sl, fp
   1c490:	ldr	fp, [sp, #20]
   1c494:	add	r4, r1, r4
   1c498:	add	r7, r8, sl, ror #22
   1c49c:	mvn	r1, r8
   1c4a0:	ldr	sl, [sp, #36]	; 0x24
   1c4a4:	orr	r9, r9, r7
   1c4a8:	mvn	r2, r7
   1c4ac:	eor	r8, r8, r9
   1c4b0:	movw	r9, #59104	; 0xe6e0
   1c4b4:	movt	r9, #65068	; 0xfe2c
   1c4b8:	add	r5, r8, r5
   1c4bc:	ldr	r8, [sp, #16]
   1c4c0:	add	r9, ip, r9
   1c4c4:	add	r0, fp, r0
   1c4c8:	add	r5, r7, r5, ror #17
   1c4cc:	ldr	ip, [sp, #52]	; 0x34
   1c4d0:	movw	fp, #24017	; 0x5dd1
   1c4d4:	movt	fp, #34180	; 0x8584
   1c4d8:	add	fp, sl, fp
   1c4dc:	movw	sl, #32335	; 0x7e4f
   1c4e0:	movt	sl, #28584	; 0x6fa8
   1c4e4:	orr	r1, r1, r5
   1c4e8:	add	sl, r8, sl
   1c4ec:	movw	r8, #17172	; 0x4314
   1c4f0:	movt	r8, #41729	; 0xa301
   1c4f4:	add	r4, r4, r7
   1c4f8:	add	r8, ip, r8
   1c4fc:	ldr	ip, [sp, #64]	; 0x40
   1c500:	eor	r7, r7, r1
   1c504:	add	lr, r7, lr
   1c508:	movw	r7, #4513	; 0x11a1
   1c50c:	movt	r7, #19976	; 0x4e08
   1c510:	add	lr, r5, lr, ror #11
   1c514:	mvn	r1, r5
   1c518:	add	r0, r0, r5
   1c51c:	orr	r3, r2, lr
   1c520:	mvn	r2, lr
   1c524:	add	r7, ip, r7
   1c528:	ldr	ip, [sp, #44]	; 0x2c
   1c52c:	eor	r5, r5, r3
   1c530:	add	r5, r5, r6
   1c534:	movw	r6, #32386	; 0x7e82
   1c538:	movt	r6, #63315	; 0xf753
   1c53c:	add	r3, lr, r5, ror #26
   1c540:	add	fp, fp, lr
   1c544:	movw	r5, #62005	; 0xf235
   1c548:	movt	r5, #48442	; 0xbd3a
   1c54c:	add	sl, sl, r3
   1c550:	add	r6, ip, r6
   1c554:	orr	ip, r1, r3
   1c558:	eor	ip, ip, lr
   1c55c:	mvn	r1, r3
   1c560:	ldr	lr, [sp, #60]	; 0x3c
   1c564:	add	ip, ip, r4
   1c568:	movw	r4, #53947	; 0xd2bb
   1c56c:	movt	r4, #10967	; 0x2ad7
   1c570:	add	ip, r3, ip, ror #22
   1c574:	orr	r2, r2, ip
   1c578:	add	r9, r9, ip
   1c57c:	eor	r3, r3, r2
   1c580:	mvn	r2, ip
   1c584:	add	r0, r3, r0
   1c588:	ldr	r3, [sp, #40]	; 0x28
   1c58c:	add	r5, lr, r5
   1c590:	add	r0, ip, r0, ror #17
   1c594:	movw	lr, #54161	; 0xd391
   1c598:	movt	lr, #60294	; 0xeb86
   1c59c:	orr	r1, r1, r0
   1c5a0:	add	r8, r8, r0
   1c5a4:	eor	r1, r1, ip
   1c5a8:	add	r1, r1, fp
   1c5ac:	add	r4, r3, r4
   1c5b0:	ldr	r3, [sp, #56]	; 0x38
   1c5b4:	add	r1, r0, r1, ror #11
   1c5b8:	orr	r2, r2, r1
   1c5bc:	mvn	ip, r1
   1c5c0:	eor	r2, r2, r0
   1c5c4:	add	r7, r7, r1
   1c5c8:	add	r2, r2, sl
   1c5cc:	add	lr, r3, lr
   1c5d0:	add	r2, r1, r2, ror #26
   1c5d4:	mvn	r3, r0
   1c5d8:	orr	r3, r3, r2
   1c5dc:	mvn	r0, r2
   1c5e0:	eor	r3, r3, r1
   1c5e4:	add	r6, r6, r2
   1c5e8:	add	r3, r3, r9
   1c5ec:	add	r3, r2, r3, ror #22
   1c5f0:	orr	ip, ip, r3
   1c5f4:	mvn	fp, r3
   1c5f8:	eor	ip, ip, r2
   1c5fc:	add	r5, r5, r3
   1c600:	add	ip, ip, r8
   1c604:	add	ip, r3, ip, ror #17
   1c608:	orr	r0, r0, ip
   1c60c:	mvn	sl, ip
   1c610:	eor	r0, r0, r3
   1c614:	ldr	r3, [sp, #32]
   1c618:	add	r4, r4, ip
   1c61c:	add	r0, r0, r7
   1c620:	add	r0, ip, r0, ror #11
   1c624:	orr	fp, fp, r0
   1c628:	mvn	r1, r0
   1c62c:	eor	fp, fp, ip
   1c630:	add	lr, lr, r0
   1c634:	add	fp, fp, r6
   1c638:	ldr	r6, [sp, #28]
   1c63c:	add	fp, r0, fp, ror #26
   1c640:	orr	sl, sl, fp
   1c644:	mvn	r2, fp
   1c648:	eor	sl, sl, r0
   1c64c:	ldr	r0, [sp, #68]	; 0x44
   1c650:	add	sl, sl, r5
   1c654:	add	sl, fp, sl, ror #22
   1c658:	orr	r1, r1, sl
   1c65c:	add	r3, r3, sl
   1c660:	eor	r1, r1, fp
   1c664:	add	r0, r0, fp
   1c668:	add	r1, r1, r4
   1c66c:	str	r3, [sp, #32]
   1c670:	add	r1, sl, r1, ror #17
   1c674:	str	r0, [sp, #68]	; 0x44
   1c678:	add	r3, r6, r1
   1c67c:	orr	r2, r2, r1
   1c680:	eor	r2, r2, sl
   1c684:	str	r3, [sp, #28]
   1c688:	add	r2, r2, lr
   1c68c:	ldr	r7, [sp, #24]
   1c690:	add	r2, r1, r2, ror #11
   1c694:	add	r3, r7, r2
   1c698:	str	r3, [sp, #24]
   1c69c:	bne	1bc64 <__assert_fail@plt+0x9d1c>
   1c6a0:	ldr	r2, [sp, #68]	; 0x44
   1c6a4:	ldr	r3, [sp, #116]	; 0x74
   1c6a8:	str	r2, [r3]
   1c6ac:	ldr	r2, [sp, #24]
   1c6b0:	str	r2, [r3, #4]
   1c6b4:	ldr	r2, [sp, #28]
   1c6b8:	str	r2, [r3, #8]
   1c6bc:	ldr	r2, [sp, #32]
   1c6c0:	str	r2, [r3, #12]
   1c6c4:	add	sp, sp, #124	; 0x7c
   1c6c8:	ldrd	r4, [sp]
   1c6cc:	ldrd	r6, [sp, #8]
   1c6d0:	ldrd	r8, [sp, #16]
   1c6d4:	ldrd	sl, [sp, #24]
   1c6d8:	add	sp, sp, #32
   1c6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c6e4:	mov	r4, r0
   1c6e8:	mov	r5, r1
   1c6ec:	ldr	r0, [r0, #24]
   1c6f0:	ldr	r3, [r4, #16]
   1c6f4:	ldr	r1, [r4, #20]
   1c6f8:	cmp	r0, #56	; 0x38
   1c6fc:	strd	r6, [sp, #8]
   1c700:	add	r7, r4, #28
   1c704:	movcc	r6, #64	; 0x40
   1c708:	movcs	r6, #128	; 0x80
   1c70c:	str	r8, [sp, #16]
   1c710:	movcc	r2, #56	; 0x38
   1c714:	movcs	r2, #120	; 0x78
   1c718:	str	lr, [sp, #20]
   1c71c:	movcc	ip, #15
   1c720:	movcs	ip, #31
   1c724:	movcc	r8, #14
   1c728:	movcs	r8, #30
   1c72c:	add	ip, r4, ip, lsl #2
   1c730:	adds	r3, r3, r0
   1c734:	add	r8, r4, r8, lsl #2
   1c738:	sub	r2, r2, r0
   1c73c:	lsr	lr, r3, #29
   1c740:	addcs	r1, r1, #1
   1c744:	add	r0, r7, r0
   1c748:	str	r3, [r4, #16]
   1c74c:	lsl	r3, r3, #3
   1c750:	orr	lr, lr, r1, lsl #3
   1c754:	strcs	r1, [r4, #20]
   1c758:	movw	r1, #38456	; 0x9638
   1c75c:	movt	r1, #2
   1c760:	str	r3, [r8, #28]
   1c764:	str	lr, [ip, #28]
   1c768:	bl	11ac8 <memcpy@plt>
   1c76c:	mov	r0, r7
   1c770:	mov	r2, r4
   1c774:	mov	r1, r6
   1c778:	bl	1bb68 <__assert_fail@plt+0x9c20>
   1c77c:	ldr	r3, [r4]
   1c780:	mov	r0, r5
   1c784:	str	r3, [r5]
   1c788:	ldr	r3, [r4, #4]
   1c78c:	str	r3, [r5, #4]
   1c790:	ldr	r3, [r4, #8]
   1c794:	str	r3, [r5, #8]
   1c798:	ldr	r3, [r4, #12]
   1c79c:	str	r3, [r5, #12]
   1c7a0:	ldrd	r4, [sp]
   1c7a4:	ldrd	r6, [sp, #8]
   1c7a8:	ldr	r8, [sp, #16]
   1c7ac:	add	sp, sp, #20
   1c7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c7b8:	mov	r5, r2
   1c7bc:	mov	r4, r0
   1c7c0:	strd	r6, [sp, #8]
   1c7c4:	mov	r6, r1
   1c7c8:	strd	r8, [sp, #16]
   1c7cc:	ldr	r8, [r2, #24]
   1c7d0:	str	sl, [sp, #24]
   1c7d4:	str	lr, [sp, #28]
   1c7d8:	cmp	r8, #0
   1c7dc:	bne	1c8d4 <__assert_fail@plt+0xa98c>
   1c7e0:	cmp	r6, #63	; 0x3f
   1c7e4:	bls	1c8ac <__assert_fail@plt+0xa964>
   1c7e8:	tst	r4, #3
   1c7ec:	beq	1c894 <__assert_fail@plt+0xa94c>
   1c7f0:	cmp	r6, #64	; 0x40
   1c7f4:	add	r7, r5, #28
   1c7f8:	beq	1c974 <__assert_fail@plt+0xaa2c>
   1c7fc:	sub	r9, r6, #65	; 0x41
   1c800:	lsr	r9, r9, #6
   1c804:	add	r8, r9, #1
   1c808:	add	r8, r4, r8, lsl #6
   1c80c:	mov	r3, r4
   1c810:	mov	r2, r7
   1c814:	add	r4, r4, #64	; 0x40
   1c818:	ldr	lr, [r3]
   1c81c:	add	r3, r3, #16
   1c820:	add	r2, r2, #16
   1c824:	ldr	ip, [r3, #-12]
   1c828:	ldr	r0, [r3, #-8]
   1c82c:	ldr	r1, [r3, #-4]
   1c830:	cmp	r3, r4
   1c834:	str	lr, [r2, #-16]
   1c838:	str	ip, [r2, #-12]
   1c83c:	str	r0, [r2, #-8]
   1c840:	str	r1, [r2, #-4]
   1c844:	bne	1c818 <__assert_fail@plt+0xa8d0>
   1c848:	mov	r4, r3
   1c84c:	mov	r2, r5
   1c850:	mov	r1, #64	; 0x40
   1c854:	mov	r0, r7
   1c858:	bl	1bb68 <__assert_fail@plt+0x9c20>
   1c85c:	cmp	r8, r4
   1c860:	bne	1c80c <__assert_fail@plt+0xa8c4>
   1c864:	sub	r6, r6, #64	; 0x40
   1c868:	sub	r6, r6, r9, lsl #6
   1c86c:	ldr	r4, [r5, #24]
   1c870:	mov	r1, r8
   1c874:	mov	r2, r6
   1c878:	add	r0, r7, r4
   1c87c:	add	r4, r4, r6
   1c880:	bl	11ac8 <memcpy@plt>
   1c884:	cmp	r4, #63	; 0x3f
   1c888:	bhi	1c914 <__assert_fail@plt+0xa9cc>
   1c88c:	str	r4, [r5, #24]
   1c890:	b	1c8bc <__assert_fail@plt+0xa974>
   1c894:	bic	r1, r6, #63	; 0x3f
   1c898:	mov	r0, r4
   1c89c:	mov	r2, r5
   1c8a0:	and	r6, r6, #63	; 0x3f
   1c8a4:	add	r4, r4, r1
   1c8a8:	bl	1bb68 <__assert_fail@plt+0x9c20>
   1c8ac:	cmp	r6, #0
   1c8b0:	movne	r8, r4
   1c8b4:	addne	r7, r5, #28
   1c8b8:	bne	1c86c <__assert_fail@plt+0xa924>
   1c8bc:	ldrd	r4, [sp]
   1c8c0:	ldrd	r6, [sp, #8]
   1c8c4:	ldrd	r8, [sp, #16]
   1c8c8:	ldr	sl, [sp, #24]
   1c8cc:	add	sp, sp, #28
   1c8d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8d4:	rsb	r7, r8, #128	; 0x80
   1c8d8:	add	r9, r2, #28
   1c8dc:	cmp	r7, r1
   1c8e0:	add	r0, r9, r8
   1c8e4:	movcs	r7, r1
   1c8e8:	mov	r1, r4
   1c8ec:	mov	r2, r7
   1c8f0:	bl	11ac8 <memcpy@plt>
   1c8f4:	ldr	r1, [r5, #24]
   1c8f8:	add	r1, r7, r1
   1c8fc:	cmp	r1, #64	; 0x40
   1c900:	str	r1, [r5, #24]
   1c904:	bhi	1c93c <__assert_fail@plt+0xa9f4>
   1c908:	add	r4, r4, r7
   1c90c:	sub	r6, r6, r7
   1c910:	b	1c7e0 <__assert_fail@plt+0xa898>
   1c914:	mov	r2, r5
   1c918:	mov	r0, r7
   1c91c:	sub	r4, r4, #64	; 0x40
   1c920:	mov	r1, #64	; 0x40
   1c924:	bl	1bb68 <__assert_fail@plt+0x9c20>
   1c928:	mov	r0, r7
   1c92c:	mov	r2, r4
   1c930:	add	r1, r5, #92	; 0x5c
   1c934:	bl	11ac8 <memcpy@plt>
   1c938:	b	1c88c <__assert_fail@plt+0xa944>
   1c93c:	mov	r2, r5
   1c940:	mov	r0, r9
   1c944:	bic	r1, r1, #63	; 0x3f
   1c948:	bl	1bb68 <__assert_fail@plt+0x9c20>
   1c94c:	ldr	r3, [r5, #24]
   1c950:	add	r1, r8, r7
   1c954:	mov	r0, r9
   1c958:	bic	r1, r1, #63	; 0x3f
   1c95c:	add	r1, r9, r1
   1c960:	and	r3, r3, #63	; 0x3f
   1c964:	mov	r2, r3
   1c968:	str	r3, [r5, #24]
   1c96c:	bl	11ac8 <memcpy@plt>
   1c970:	b	1c908 <__assert_fail@plt+0xa9c0>
   1c974:	mov	r8, r4
   1c978:	b	1c86c <__assert_fail@plt+0xa924>
   1c97c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c980:	mov	r3, #0
   1c984:	mov	r4, r2
   1c988:	strd	r6, [sp, #8]
   1c98c:	add	r7, pc, #260	; 0x104
   1c990:	ldrd	r6, [r7]
   1c994:	strd	r8, [sp, #16]
   1c998:	add	r9, pc, #256	; 0x100
   1c99c:	ldrd	r8, [r9]
   1c9a0:	strd	sl, [sp, #24]
   1c9a4:	mov	sl, #0
   1c9a8:	mov	fp, #0
   1c9ac:	str	lr, [sp, #32]
   1c9b0:	sub	sp, sp, #164	; 0xa4
   1c9b4:	mov	r2, sp
   1c9b8:	strd	r8, [sp]
   1c9bc:	strd	r6, [sp, #8]
   1c9c0:	add	r7, sp, #160	; 0xa0
   1c9c4:	strd	sl, [sp, #16]
   1c9c8:	str	r3, [sp, #24]
   1c9cc:	bl	1c7b4 <__assert_fail@plt+0xa86c>
   1c9d0:	ldr	r3, [sp, #16]
   1c9d4:	ldr	r0, [sp, #24]
   1c9d8:	ldr	r1, [sp, #20]
   1c9dc:	cmp	r0, #56	; 0x38
   1c9e0:	movcc	r5, #64	; 0x40
   1c9e4:	movcs	r5, #128	; 0x80
   1c9e8:	movcc	r2, #56	; 0x38
   1c9ec:	movcs	r2, #120	; 0x78
   1c9f0:	movcc	ip, #15
   1c9f4:	movcs	ip, #31
   1c9f8:	movcc	r6, #14
   1c9fc:	movcs	r6, #30
   1ca00:	adds	r3, r0, r3
   1ca04:	add	r6, r7, r6, lsl #2
   1ca08:	add	r7, sp, #28
   1ca0c:	lsr	lr, r3, #29
   1ca10:	addcs	r1, r1, #1
   1ca14:	sub	r2, r2, r0
   1ca18:	add	r0, r7, r0
   1ca1c:	add	r7, sp, #160	; 0xa0
   1ca20:	str	r3, [sp, #16]
   1ca24:	orr	lr, lr, r1, lsl #3
   1ca28:	strcs	r1, [sp, #20]
   1ca2c:	movw	r1, #38456	; 0x9638
   1ca30:	movt	r1, #2
   1ca34:	add	ip, r7, ip, lsl #2
   1ca38:	lsl	r3, r3, #3
   1ca3c:	str	r3, [r6, #-132]	; 0xffffff7c
   1ca40:	str	lr, [ip, #-132]	; 0xffffff7c
   1ca44:	bl	11ac8 <memcpy@plt>
   1ca48:	mov	r2, sp
   1ca4c:	mov	r1, r5
   1ca50:	add	r0, sp, #28
   1ca54:	bl	1bb68 <__assert_fail@plt+0x9c20>
   1ca58:	ldr	r3, [sp]
   1ca5c:	mov	r0, r4
   1ca60:	ldmib	sp, {r1, r2}
   1ca64:	str	r3, [r4]
   1ca68:	ldr	r3, [sp, #12]
   1ca6c:	str	r1, [r4, #4]
   1ca70:	str	r2, [r4, #8]
   1ca74:	str	r3, [r4, #12]
   1ca78:	add	sp, sp, #164	; 0xa4
   1ca7c:	ldrd	r4, [sp]
   1ca80:	ldrd	r6, [sp, #8]
   1ca84:	ldrd	r8, [sp, #16]
   1ca88:	ldrd	sl, [sp, #24]
   1ca8c:	add	sp, sp, #32
   1ca90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca94:	nop	{0}
   1ca98:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1ca9c:	eorsne	r5, r2, r6, ror r4
   1caa0:	strbvs	r2, [r5, -r1, lsl #6]
   1caa4:	svc	0x00cdab89
   1caa8:	b	11a44 <posix_fadvise64@plt>
   1caac:	cmp	r0, #0
   1cab0:	bxeq	lr
   1cab4:	str	r4, [sp, #-16]!
   1cab8:	mov	r4, r1
   1cabc:	strd	r6, [sp, #4]
   1cac0:	mov	r6, #0
   1cac4:	mov	r7, #0
   1cac8:	str	lr, [sp, #12]
   1cacc:	sub	sp, sp, #16
   1cad0:	bl	11dc8 <fileno@plt>
   1cad4:	mov	r2, r6
   1cad8:	mov	r3, r7
   1cadc:	strd	r6, [sp]
   1cae0:	str	r4, [sp, #8]
   1cae4:	bl	11a44 <posix_fadvise64@plt>
   1cae8:	add	sp, sp, #16
   1caec:	ldr	r4, [sp]
   1caf0:	ldrd	r6, [sp, #4]
   1caf4:	add	sp, sp, #12
   1caf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cafc:	strd	r4, [sp, #-12]!
   1cb00:	mov	r4, r0
   1cb04:	str	lr, [sp, #8]
   1cb08:	sub	sp, sp, #12
   1cb0c:	bl	11dc8 <fileno@plt>
   1cb10:	cmp	r0, #0
   1cb14:	mov	r0, r4
   1cb18:	blt	1cb9c <__assert_fail@plt+0xac54>
   1cb1c:	bl	11cfc <__freading@plt>
   1cb20:	cmp	r0, #0
   1cb24:	bne	1cb68 <__assert_fail@plt+0xac20>
   1cb28:	mov	r0, r4
   1cb2c:	bl	1cbb0 <__assert_fail@plt+0xac68>
   1cb30:	cmp	r0, #0
   1cb34:	beq	1cb98 <__assert_fail@plt+0xac50>
   1cb38:	bl	11d74 <__errno_location@plt>
   1cb3c:	mov	r5, r0
   1cb40:	mov	r0, r4
   1cb44:	ldr	r4, [r5]
   1cb48:	bl	11dec <fclose@plt>
   1cb4c:	cmp	r4, #0
   1cb50:	mvnne	r0, #0
   1cb54:	strne	r4, [r5]
   1cb58:	add	sp, sp, #12
   1cb5c:	ldrd	r4, [sp]
   1cb60:	add	sp, sp, #8
   1cb64:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb68:	mov	r0, r4
   1cb6c:	bl	11dc8 <fileno@plt>
   1cb70:	mov	r1, #1
   1cb74:	mov	r2, #0
   1cb78:	mov	r3, #0
   1cb7c:	str	r1, [sp]
   1cb80:	bl	11c24 <lseek64@plt>
   1cb84:	mvn	r3, #0
   1cb88:	mvn	r2, #0
   1cb8c:	cmp	r1, r3
   1cb90:	cmpeq	r0, r2
   1cb94:	bne	1cb28 <__assert_fail@plt+0xabe0>
   1cb98:	mov	r0, r4
   1cb9c:	add	sp, sp, #12
   1cba0:	ldrd	r4, [sp]
   1cba4:	ldr	lr, [sp, #8]
   1cba8:	add	sp, sp, #12
   1cbac:	b	11dec <fclose@plt>
   1cbb0:	str	r4, [sp, #-8]!
   1cbb4:	subs	r4, r0, #0
   1cbb8:	str	lr, [sp, #4]
   1cbbc:	sub	sp, sp, #8
   1cbc0:	beq	1cbdc <__assert_fail@plt+0xac94>
   1cbc4:	bl	11cfc <__freading@plt>
   1cbc8:	cmp	r0, #0
   1cbcc:	beq	1cbdc <__assert_fail@plt+0xac94>
   1cbd0:	ldr	r3, [r4]
   1cbd4:	tst	r3, #256	; 0x100
   1cbd8:	bne	1cbf4 <__assert_fail@plt+0xacac>
   1cbdc:	mov	r0, r4
   1cbe0:	add	sp, sp, #8
   1cbe4:	ldr	r4, [sp]
   1cbe8:	ldr	lr, [sp, #4]
   1cbec:	add	sp, sp, #8
   1cbf0:	b	11a68 <fflush@plt>
   1cbf4:	mov	r1, #1
   1cbf8:	mov	r2, #0
   1cbfc:	mov	r3, #0
   1cc00:	mov	r0, r4
   1cc04:	str	r1, [sp]
   1cc08:	bl	1d2fc <__assert_fail@plt+0xb3b4>
   1cc0c:	b	1cbdc <__assert_fail@plt+0xac94>
   1cc10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cc14:	mov	r4, r0
   1cc18:	mov	r5, r1
   1cc1c:	strd	r6, [sp, #8]
   1cc20:	strd	r8, [sp, #16]
   1cc24:	strd	sl, [sp, #24]
   1cc28:	str	lr, [sp, #32]
   1cc2c:	sub	sp, sp, #20
   1cc30:	bl	11a2c <strcmp@plt>
   1cc34:	subs	r6, r0, #0
   1cc38:	beq	1cf0c <__assert_fail@plt+0xafc4>
   1cc3c:	ldrb	r7, [r4]
   1cc40:	cmp	r7, #0
   1cc44:	beq	1d0b8 <__assert_fail@plt+0xb170>
   1cc48:	ldrb	r8, [r5]
   1cc4c:	cmp	r8, #0
   1cc50:	beq	1cf08 <__assert_fail@plt+0xafc0>
   1cc54:	movw	r0, #38520	; 0x9678
   1cc58:	movt	r0, #2
   1cc5c:	mov	r1, r4
   1cc60:	bl	11a2c <strcmp@plt>
   1cc64:	cmp	r0, #0
   1cc68:	beq	1d0b8 <__assert_fail@plt+0xb170>
   1cc6c:	movw	r0, #38520	; 0x9678
   1cc70:	movt	r0, #2
   1cc74:	mov	r1, r5
   1cc78:	bl	11a2c <strcmp@plt>
   1cc7c:	cmp	r0, #0
   1cc80:	beq	1cf08 <__assert_fail@plt+0xafc0>
   1cc84:	movw	r0, #38524	; 0x967c
   1cc88:	movt	r0, #2
   1cc8c:	mov	r1, r4
   1cc90:	bl	11a2c <strcmp@plt>
   1cc94:	cmp	r0, #0
   1cc98:	beq	1d0b8 <__assert_fail@plt+0xb170>
   1cc9c:	movw	r0, #38524	; 0x967c
   1cca0:	movt	r0, #2
   1cca4:	mov	r1, r5
   1cca8:	bl	11a2c <strcmp@plt>
   1ccac:	cmp	r0, #0
   1ccb0:	beq	1cf08 <__assert_fail@plt+0xafc0>
   1ccb4:	sub	r3, r7, #46	; 0x2e
   1ccb8:	clz	r3, r3
   1ccbc:	lsr	r3, r3, #5
   1ccc0:	cmp	r8, #46	; 0x2e
   1ccc4:	moveq	r2, #0
   1ccc8:	andne	r2, r3, #1
   1cccc:	cmp	r2, #0
   1ccd0:	bne	1d0b8 <__assert_fail@plt+0xb170>
   1ccd4:	sub	r2, r8, #46	; 0x2e
   1ccd8:	clz	r2, r2
   1ccdc:	lsr	r2, r2, #5
   1cce0:	cmp	r7, #46	; 0x2e
   1cce4:	moveq	r1, #0
   1cce8:	andne	r1, r2, #1
   1ccec:	cmp	r1, #0
   1ccf0:	bne	1cf08 <__assert_fail@plt+0xafc0>
   1ccf4:	tst	r3, r2
   1ccf8:	ldrb	r3, [r4, #1]
   1ccfc:	bne	1d0e0 <__assert_fail@plt+0xb198>
   1cd00:	cmp	r7, #46	; 0x2e
   1cd04:	mov	r9, r4
   1cd08:	mov	r2, #0
   1cd0c:	beq	1cf4c <__assert_fail@plt+0xb004>
   1cd10:	sub	r1, r7, #48	; 0x30
   1cd14:	sub	r3, r7, #97	; 0x61
   1cd18:	cmp	r7, #90	; 0x5a
   1cd1c:	mov	r0, r9
   1cd20:	uxtb	r1, r1
   1cd24:	uxtb	r3, r3
   1cd28:	add	r9, r9, #1
   1cd2c:	bhi	1cf2c <__assert_fail@plt+0xafe4>
   1cd30:	cmp	r7, #65	; 0x41
   1cd34:	bcs	1cf34 <__assert_fail@plt+0xafec>
   1cd38:	cmp	r1, #9
   1cd3c:	bls	1cf34 <__assert_fail@plt+0xafec>
   1cd40:	cmp	r7, #126	; 0x7e
   1cd44:	beq	1cf34 <__assert_fail@plt+0xafec>
   1cd48:	ldrb	r7, [r9]
   1cd4c:	mov	r2, #0
   1cd50:	cmp	r7, r2
   1cd54:	beq	1d0f8 <__assert_fail@plt+0xb1b0>
   1cd58:	cmp	r7, #46	; 0x2e
   1cd5c:	bne	1cd10 <__assert_fail@plt+0xadc8>
   1cd60:	mov	r2, r9
   1cd64:	add	r1, r0, #2
   1cd68:	ldrb	r3, [r0, #2]
   1cd6c:	b	1cfac <__assert_fail@plt+0xb064>
   1cd70:	cmp	r0, #0
   1cd74:	add	lr, sl, #1
   1cd78:	ldrb	r3, [sl, #1]
   1cd7c:	beq	1d248 <__assert_fail@plt+0xb300>
   1cd80:	cmp	r3, #0
   1cd84:	beq	1d1ec <__assert_fail@plt+0xb2a4>
   1cd88:	mov	sl, lr
   1cd8c:	cmp	r3, #65	; 0x41
   1cd90:	ldrb	r8, [sl, #1]!
   1cd94:	bcc	1cdac <__assert_fail@plt+0xae64>
   1cd98:	cmp	r3, #90	; 0x5a
   1cd9c:	bls	1d0a4 <__assert_fail@plt+0xb15c>
   1cda0:	sub	r1, r3, #97	; 0x61
   1cda4:	cmp	r1, #25
   1cda8:	bls	1d0a4 <__assert_fail@plt+0xb15c>
   1cdac:	cmp	r3, #126	; 0x7e
   1cdb0:	beq	1d0a4 <__assert_fail@plt+0xb15c>
   1cdb4:	cmp	r8, #0
   1cdb8:	beq	1d1b0 <__assert_fail@plt+0xb268>
   1cdbc:	cmp	r8, #46	; 0x2e
   1cdc0:	movne	r0, #0
   1cdc4:	bne	1cfd0 <__assert_fail@plt+0xb088>
   1cdc8:	ldrb	r3, [lr, #2]
   1cdcc:	mov	r0, sl
   1cdd0:	add	lr, lr, #2
   1cdd4:	cmp	r3, #0
   1cdd8:	bne	1cd88 <__assert_fail@plt+0xae40>
   1cddc:	mov	sl, lr
   1cde0:	cmp	r2, #0
   1cde4:	beq	1d230 <__assert_fail@plt+0xb2e8>
   1cde8:	cmp	r0, #0
   1cdec:	sub	r7, r2, r4
   1cdf0:	beq	1d280 <__assert_fail@plt+0xb338>
   1cdf4:	sub	fp, r0, r5
   1cdf8:	cmp	r7, fp
   1cdfc:	beq	1d1d0 <__assert_fail@plt+0xb288>
   1ce00:	mov	r3, #0
   1ce04:	rsb	ip, r4, #1
   1ce08:	mov	r2, r3
   1ce0c:	rsb	sl, r5, #1
   1ce10:	cmp	fp, r3
   1ce14:	cmpls	r7, r2
   1ce18:	bls	1cf0c <__assert_fail@plt+0xafc4>
   1ce1c:	cmp	r7, r2
   1ce20:	sub	r8, r3, r2
   1ce24:	bls	1ce9c <__assert_fail@plt+0xaf54>
   1ce28:	ldrb	r0, [r4, r2]
   1ce2c:	sub	r1, r0, #48	; 0x30
   1ce30:	cmp	r1, #9
   1ce34:	bls	1ce9c <__assert_fail@plt+0xaf54>
   1ce38:	cmp	r0, #65	; 0x41
   1ce3c:	mov	lr, r0
   1ce40:	bcc	1ce58 <__assert_fail@plt+0xaf10>
   1ce44:	cmp	r0, #90	; 0x5a
   1ce48:	bls	1d0d0 <__assert_fail@plt+0xb188>
   1ce4c:	sub	r1, r0, #97	; 0x61
   1ce50:	cmp	r1, #25
   1ce54:	bls	1d0d0 <__assert_fail@plt+0xb188>
   1ce58:	cmp	r0, #126	; 0x7e
   1ce5c:	beq	1d26c <__assert_fail@plt+0xb324>
   1ce60:	add	lr, r0, #256	; 0x100
   1ce64:	add	r1, r2, r8
   1ce68:	cmp	fp, r1
   1ce6c:	beq	1d228 <__assert_fail@plt+0xb2e0>
   1ce70:	ldrb	r1, [r5, r3]
   1ce74:	sub	r0, r1, #48	; 0x30
   1ce78:	cmp	r0, #9
   1ce7c:	bhi	1d074 <__assert_fail@plt+0xb12c>
   1ce80:	mov	r0, #0
   1ce84:	cmp	r0, lr
   1ce88:	bne	1d274 <__assert_fail@plt+0xb32c>
   1ce8c:	add	r2, r2, #1
   1ce90:	add	r3, r3, #1
   1ce94:	cmp	r7, r2
   1ce98:	bhi	1ce28 <__assert_fail@plt+0xaee0>
   1ce9c:	cmp	fp, r3
   1cea0:	ldrb	r1, [r5, r3]
   1cea4:	bls	1ceb4 <__assert_fail@plt+0xaf6c>
   1cea8:	sub	r0, r1, #48	; 0x30
   1ceac:	cmp	r0, #9
   1ceb0:	bhi	1d058 <__assert_fail@plt+0xb110>
   1ceb4:	ldrb	r0, [r4, r2]
   1ceb8:	add	lr, r4, r2
   1cebc:	cmp	r0, #48	; 0x30
   1cec0:	bne	1ced4 <__assert_fail@plt+0xaf8c>
   1cec4:	add	r2, ip, lr
   1cec8:	ldrb	r0, [lr, #1]!
   1cecc:	cmp	r0, #48	; 0x30
   1ced0:	beq	1cec4 <__assert_fail@plt+0xaf7c>
   1ced4:	cmp	r1, #48	; 0x30
   1ced8:	bne	1cef0 <__assert_fail@plt+0xafa8>
   1cedc:	add	lr, r5, r3
   1cee0:	add	r3, sl, lr
   1cee4:	ldrb	r1, [lr, #1]!
   1cee8:	cmp	r1, #48	; 0x30
   1ceec:	beq	1cee0 <__assert_fail@plt+0xaf98>
   1cef0:	sub	lr, r0, #48	; 0x30
   1cef4:	sub	r8, r1, #48	; 0x30
   1cef8:	cmp	lr, #9
   1cefc:	bhi	1d0b0 <__assert_fail@plt+0xb168>
   1cf00:	cmp	r8, #9
   1cf04:	bls	1d110 <__assert_fail@plt+0xb1c8>
   1cf08:	mov	r6, #1
   1cf0c:	mov	r0, r6
   1cf10:	add	sp, sp, #20
   1cf14:	ldrd	r4, [sp]
   1cf18:	ldrd	r6, [sp, #8]
   1cf1c:	ldrd	r8, [sp, #16]
   1cf20:	ldrd	sl, [sp, #24]
   1cf24:	add	sp, sp, #32
   1cf28:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf2c:	cmp	r3, #25
   1cf30:	bhi	1cd40 <__assert_fail@plt+0xadf8>
   1cf34:	ldrb	r7, [r0, #1]
   1cf38:	cmp	r7, #0
   1cf3c:	beq	1d1a4 <__assert_fail@plt+0xb25c>
   1cf40:	cmp	r7, #46	; 0x2e
   1cf44:	ldrb	r3, [r9, #1]
   1cf48:	bne	1cd10 <__assert_fail@plt+0xadc8>
   1cf4c:	cmp	r2, #0
   1cf50:	add	r1, r9, #1
   1cf54:	beq	1d240 <__assert_fail@plt+0xb2f8>
   1cf58:	cmp	r3, #0
   1cf5c:	beq	1d208 <__assert_fail@plt+0xb2c0>
   1cf60:	cmp	r3, #65	; 0x41
   1cf64:	add	r9, r1, #1
   1cf68:	ldrb	r7, [r1, #1]
   1cf6c:	bcc	1cf84 <__assert_fail@plt+0xb03c>
   1cf70:	cmp	r3, #90	; 0x5a
   1cf74:	bls	1d034 <__assert_fail@plt+0xb0ec>
   1cf78:	sub	r0, r3, #97	; 0x61
   1cf7c:	cmp	r0, #25
   1cf80:	bls	1d034 <__assert_fail@plt+0xb0ec>
   1cf84:	cmp	r3, #126	; 0x7e
   1cf88:	beq	1d034 <__assert_fail@plt+0xb0ec>
   1cf8c:	cmp	r7, #0
   1cf90:	beq	1d0f8 <__assert_fail@plt+0xb1b0>
   1cf94:	cmp	r7, #46	; 0x2e
   1cf98:	movne	r2, #0
   1cf9c:	bne	1cd10 <__assert_fail@plt+0xadc8>
   1cfa0:	ldrb	r3, [r1, #2]
   1cfa4:	mov	r2, r9
   1cfa8:	add	r1, r1, #2
   1cfac:	cmp	r3, #0
   1cfb0:	bne	1cf60 <__assert_fail@plt+0xb018>
   1cfb4:	mov	r9, r1
   1cfb8:	cmp	r8, #0
   1cfbc:	beq	1d190 <__assert_fail@plt+0xb248>
   1cfc0:	mov	sl, r5
   1cfc4:	mov	r0, #0
   1cfc8:	cmp	r8, #46	; 0x2e
   1cfcc:	beq	1cd70 <__assert_fail@plt+0xae28>
   1cfd0:	sub	r1, r8, #48	; 0x30
   1cfd4:	sub	r3, r8, #97	; 0x61
   1cfd8:	cmp	r8, #90	; 0x5a
   1cfdc:	mov	ip, sl
   1cfe0:	uxtb	r1, r1
   1cfe4:	uxtb	r3, r3
   1cfe8:	add	sl, sl, #1
   1cfec:	bhi	1d040 <__assert_fail@plt+0xb0f8>
   1cff0:	cmp	r8, #65	; 0x41
   1cff4:	bcs	1d048 <__assert_fail@plt+0xb100>
   1cff8:	cmp	r1, #9
   1cffc:	bls	1d048 <__assert_fail@plt+0xb100>
   1d000:	cmp	r8, #126	; 0x7e
   1d004:	ldrb	r3, [sl]
   1d008:	beq	1d0c0 <__assert_fail@plt+0xb178>
   1d00c:	mov	r0, #0
   1d010:	mov	r8, r3
   1d014:	cmp	r3, r0
   1d018:	beq	1d1b0 <__assert_fail@plt+0xb268>
   1d01c:	cmp	r3, #46	; 0x2e
   1d020:	bne	1cfd0 <__assert_fail@plt+0xb088>
   1d024:	mov	r0, sl
   1d028:	add	lr, ip, #2
   1d02c:	ldrb	r3, [ip, #2]
   1d030:	b	1cdd4 <__assert_fail@plt+0xae8c>
   1d034:	cmp	r7, #0
   1d038:	bne	1cf40 <__assert_fail@plt+0xaff8>
   1d03c:	b	1cfb8 <__assert_fail@plt+0xb070>
   1d040:	cmp	r3, #25
   1d044:	bhi	1d000 <__assert_fail@plt+0xb0b8>
   1d048:	ldrb	r8, [ip, #1]
   1d04c:	cmp	r8, #0
   1d050:	bne	1cfc8 <__assert_fail@plt+0xb080>
   1d054:	b	1cde0 <__assert_fail@plt+0xae98>
   1d058:	cmp	r7, r2
   1d05c:	beq	1d070 <__assert_fail@plt+0xb128>
   1d060:	ldrb	r0, [r4, r2]
   1d064:	sub	lr, r0, #48	; 0x30
   1d068:	cmp	lr, #9
   1d06c:	bhi	1ce38 <__assert_fail@plt+0xaef0>
   1d070:	mov	lr, #0
   1d074:	cmp	r1, #65	; 0x41
   1d078:	mov	r0, r1
   1d07c:	bcc	1d094 <__assert_fail@plt+0xb14c>
   1d080:	cmp	r1, #90	; 0x5a
   1d084:	bls	1ce84 <__assert_fail@plt+0xaf3c>
   1d088:	sub	r9, r1, #97	; 0x61
   1d08c:	cmp	r9, #25
   1d090:	bls	1ce84 <__assert_fail@plt+0xaf3c>
   1d094:	cmp	r1, #126	; 0x7e
   1d098:	beq	1d264 <__assert_fail@plt+0xb31c>
   1d09c:	add	r0, r1, #256	; 0x100
   1d0a0:	b	1ce84 <__assert_fail@plt+0xaf3c>
   1d0a4:	cmp	r8, #0
   1d0a8:	bne	1cfc8 <__assert_fail@plt+0xb080>
   1d0ac:	b	1cde0 <__assert_fail@plt+0xae98>
   1d0b0:	cmp	r8, #9
   1d0b4:	bhi	1ce10 <__assert_fail@plt+0xaec8>
   1d0b8:	mvn	r6, #0
   1d0bc:	b	1cf0c <__assert_fail@plt+0xafc4>
   1d0c0:	cmp	r3, #0
   1d0c4:	beq	1cde0 <__assert_fail@plt+0xae98>
   1d0c8:	mov	r8, r3
   1d0cc:	b	1cfc8 <__assert_fail@plt+0xb080>
   1d0d0:	add	r1, r2, r8
   1d0d4:	cmp	fp, r1
   1d0d8:	bne	1ce70 <__assert_fail@plt+0xaf28>
   1d0dc:	b	1ce80 <__assert_fail@plt+0xaf38>
   1d0e0:	cmp	r3, #0
   1d0e4:	ldrb	r8, [r5, #1]
   1d0e8:	add	r9, r4, #1
   1d0ec:	add	r5, r5, #1
   1d0f0:	bne	1d250 <__assert_fail@plt+0xb308>
   1d0f4:	mov	r4, r9
   1d0f8:	cmp	r8, #0
   1d0fc:	subeq	r7, r9, r4
   1d100:	moveq	fp, r8
   1d104:	beq	1ce00 <__assert_fail@plt+0xaeb8>
   1d108:	mov	r2, #0
   1d10c:	b	1cfc0 <__assert_fail@plt+0xb078>
   1d110:	add	lr, r4, r2
   1d114:	mov	r8, #0
   1d118:	str	lr, [sp, #8]
   1d11c:	add	lr, r5, r3
   1d120:	str	lr, [sp, #4]
   1d124:	mov	lr, r2
   1d128:	str	r8, [sp, #12]
   1d12c:	ldr	r9, [sp, #4]
   1d130:	add	lr, lr, #1
   1d134:	ldr	r8, [sp, #12]
   1d138:	cmp	r8, #0
   1d13c:	sub	r8, lr, r2
   1d140:	subeq	r1, r0, r1
   1d144:	add	r8, r8, r3
   1d148:	streq	r1, [sp, #12]
   1d14c:	ldr	r1, [sp, #8]
   1d150:	ldrb	r0, [r1, #1]!
   1d154:	str	r1, [sp, #8]
   1d158:	ldrb	r1, [r9, #1]!
   1d15c:	str	r9, [sp, #4]
   1d160:	sub	r9, r0, #48	; 0x30
   1d164:	cmp	r9, #9
   1d168:	sub	r9, r1, #48	; 0x30
   1d16c:	bls	1d1c4 <__assert_fail@plt+0xb27c>
   1d170:	cmp	r9, #9
   1d174:	bls	1d0b8 <__assert_fail@plt+0xb170>
   1d178:	ldr	r3, [sp, #12]
   1d17c:	cmp	r3, #0
   1d180:	bne	1d288 <__assert_fail@plt+0xb340>
   1d184:	mov	r2, lr
   1d188:	mov	r3, r8
   1d18c:	b	1ce10 <__assert_fail@plt+0xaec8>
   1d190:	cmp	r2, #0
   1d194:	sub	r7, r2, r4
   1d198:	bne	1d290 <__assert_fail@plt+0xb348>
   1d19c:	mov	fp, r2
   1d1a0:	b	1ce00 <__assert_fail@plt+0xaeb8>
   1d1a4:	cmp	r8, #0
   1d1a8:	bne	1cfc0 <__assert_fail@plt+0xb078>
   1d1ac:	mov	sl, r5
   1d1b0:	cmp	r2, #0
   1d1b4:	bne	1d27c <__assert_fail@plt+0xb334>
   1d1b8:	sub	r7, r9, r4
   1d1bc:	sub	fp, sl, r5
   1d1c0:	b	1ce00 <__assert_fail@plt+0xaeb8>
   1d1c4:	cmp	r9, #9
   1d1c8:	bhi	1cf08 <__assert_fail@plt+0xafc0>
   1d1cc:	b	1d12c <__assert_fail@plt+0xb1e4>
   1d1d0:	mov	r2, r7
   1d1d4:	mov	r1, r5
   1d1d8:	mov	r0, r4
   1d1dc:	bl	11f0c <strncmp@plt>
   1d1e0:	cmp	r0, #0
   1d1e4:	bne	1ce00 <__assert_fail@plt+0xaeb8>
   1d1e8:	b	1d1b8 <__assert_fail@plt+0xb270>
   1d1ec:	cmp	r2, #0
   1d1f0:	subne	r7, r2, r4
   1d1f4:	movne	sl, lr
   1d1f8:	bne	1cdf4 <__assert_fail@plt+0xaeac>
   1d1fc:	mov	sl, lr
   1d200:	sub	r7, r9, r4
   1d204:	b	1cdf4 <__assert_fail@plt+0xaeac>
   1d208:	cmp	r8, #0
   1d20c:	movne	r9, r1
   1d210:	bne	1cfc0 <__assert_fail@plt+0xb078>
   1d214:	sub	r7, r2, r4
   1d218:	mov	r9, r1
   1d21c:	mov	fp, r8
   1d220:	mov	sl, r5
   1d224:	b	1cdf8 <__assert_fail@plt+0xaeb0>
   1d228:	mov	r6, lr
   1d22c:	b	1cf0c <__assert_fail@plt+0xafc4>
   1d230:	cmp	r0, #0
   1d234:	sub	r7, r9, r4
   1d238:	bne	1cdf4 <__assert_fail@plt+0xaeac>
   1d23c:	b	1d1bc <__assert_fail@plt+0xb274>
   1d240:	mov	r2, r9
   1d244:	b	1cfac <__assert_fail@plt+0xb064>
   1d248:	mov	r0, sl
   1d24c:	b	1cdd4 <__assert_fail@plt+0xae8c>
   1d250:	ldrb	r2, [r4, #2]
   1d254:	mov	r7, r3
   1d258:	mov	r4, r9
   1d25c:	mov	r3, r2
   1d260:	b	1cd00 <__assert_fail@plt+0xadb8>
   1d264:	mvn	r0, #0
   1d268:	b	1ce84 <__assert_fail@plt+0xaf3c>
   1d26c:	mvn	lr, #0
   1d270:	b	1ce64 <__assert_fail@plt+0xaf1c>
   1d274:	sub	r6, lr, r0
   1d278:	b	1cf0c <__assert_fail@plt+0xafc4>
   1d27c:	sub	r7, r2, r4
   1d280:	sub	fp, sl, r5
   1d284:	b	1cdf8 <__assert_fail@plt+0xaeb0>
   1d288:	ldr	r6, [sp, #12]
   1d28c:	b	1cf0c <__assert_fail@plt+0xafc4>
   1d290:	mov	fp, r8
   1d294:	mov	sl, r5
   1d298:	b	1cdf8 <__assert_fail@plt+0xaeb0>
   1d29c:	strd	r4, [sp, #-12]!
   1d2a0:	mov	r5, r0
   1d2a4:	str	lr, [sp, #8]
   1d2a8:	sub	sp, sp, #12
   1d2ac:	bl	11d74 <__errno_location@plt>
   1d2b0:	mov	r4, r0
   1d2b4:	mov	r2, #0
   1d2b8:	ldr	r3, [r4]
   1d2bc:	mov	r0, r5
   1d2c0:	str	r2, [r4]
   1d2c4:	str	r3, [sp]
   1d2c8:	str	r3, [sp, #4]
   1d2cc:	bl	11a8c <free@plt>
   1d2d0:	ldr	r3, [r4]
   1d2d4:	add	r2, sp, #8
   1d2d8:	clz	r3, r3
   1d2dc:	lsr	r3, r3, #5
   1d2e0:	add	r3, r2, r3, lsl #2
   1d2e4:	ldr	r3, [r3, #-8]
   1d2e8:	str	r3, [r4]
   1d2ec:	add	sp, sp, #12
   1d2f0:	ldrd	r4, [sp]
   1d2f4:	add	sp, sp, #8
   1d2f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d300:	mov	r4, r0
   1d304:	ldr	ip, [r0, #4]
   1d308:	strd	r6, [sp, #8]
   1d30c:	str	lr, [sp, #20]
   1d310:	ldr	lr, [r0, #8]
   1d314:	str	r8, [sp, #16]
   1d318:	sub	sp, sp, #8
   1d31c:	ldr	r5, [sp, #32]
   1d320:	cmp	lr, ip
   1d324:	beq	1d34c <__assert_fail@plt+0xb404>
   1d328:	mov	r0, r4
   1d32c:	str	r5, [sp, #32]
   1d330:	add	sp, sp, #8
   1d334:	ldrd	r4, [sp]
   1d338:	ldrd	r6, [sp, #8]
   1d33c:	ldr	r8, [sp, #16]
   1d340:	ldr	lr, [sp, #20]
   1d344:	add	sp, sp, #24
   1d348:	b	11e04 <fseeko64@plt>
   1d34c:	ldr	ip, [r0, #16]
   1d350:	ldr	lr, [r0, #20]
   1d354:	cmp	lr, ip
   1d358:	bne	1d328 <__assert_fail@plt+0xb3e0>
   1d35c:	ldr	r8, [r0, #36]	; 0x24
   1d360:	cmp	r8, #0
   1d364:	bne	1d328 <__assert_fail@plt+0xb3e0>
   1d368:	mov	r6, r2
   1d36c:	mov	r7, r3
   1d370:	bl	11dc8 <fileno@plt>
   1d374:	mov	r2, r6
   1d378:	mov	r3, r7
   1d37c:	str	r5, [sp]
   1d380:	bl	11c24 <lseek64@plt>
   1d384:	mvn	r3, #0
   1d388:	mvn	r2, #0
   1d38c:	cmp	r1, r3
   1d390:	cmpeq	r0, r2
   1d394:	beq	1d3c4 <__assert_fail@plt+0xb47c>
   1d398:	ldr	r3, [r4]
   1d39c:	strd	r0, [r4, #80]	; 0x50
   1d3a0:	bic	r3, r3, #16
   1d3a4:	str	r3, [r4]
   1d3a8:	mov	r0, r8
   1d3ac:	add	sp, sp, #8
   1d3b0:	ldrd	r4, [sp]
   1d3b4:	ldrd	r6, [sp, #8]
   1d3b8:	ldr	r8, [sp, #16]
   1d3bc:	add	sp, sp, #20
   1d3c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3c4:	mvn	r8, #0
   1d3c8:	b	1d3a8 <__assert_fail@plt+0xb460>
   1d3cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1d3d0:	sub	sp, sp, #268	; 0x10c
   1d3d4:	movw	r2, #257	; 0x101
   1d3d8:	add	r1, sp, #4
   1d3dc:	bl	23e10 <__assert_fail@plt+0x11ec8>
   1d3e0:	cmp	r0, #0
   1d3e4:	movne	r0, #0
   1d3e8:	bne	1d41c <__assert_fail@plt+0xb4d4>
   1d3ec:	movw	r1, #38528	; 0x9680
   1d3f0:	movt	r1, #2
   1d3f4:	add	r0, sp, #4
   1d3f8:	bl	11a2c <strcmp@plt>
   1d3fc:	cmp	r0, #0
   1d400:	beq	1d41c <__assert_fail@plt+0xb4d4>
   1d404:	add	r0, sp, #4
   1d408:	movw	r1, #38532	; 0x9684
   1d40c:	movt	r1, #2
   1d410:	bl	11a2c <strcmp@plt>
   1d414:	adds	r0, r0, #0
   1d418:	movne	r0, #1
   1d41c:	add	sp, sp, #268	; 0x10c
   1d420:	pop	{pc}		; (ldr pc, [sp], #4)
   1d424:	andeq	r0, r0, r0
   1d428:	ror	r0, r0, #3
   1d42c:	udiv	r3, r0, r1
   1d430:	mls	r0, r3, r1, r0
   1d434:	bx	lr
   1d438:	sub	r0, r1, r0
   1d43c:	clz	r0, r0
   1d440:	lsr	r0, r0, #5
   1d444:	bx	lr
   1d448:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d44c:	mov	r5, r1
   1d450:	strd	r6, [sp, #8]
   1d454:	mov	r6, r0
   1d458:	mov	r7, r3
   1d45c:	mov	r0, r1
   1d460:	strd	r8, [sp, #16]
   1d464:	strd	sl, [sp, #24]
   1d468:	mov	fp, r2
   1d46c:	str	lr, [sp, #32]
   1d470:	sub	sp, sp, #4
   1d474:	ldr	r1, [r6, #8]
   1d478:	ldr	r3, [r6, #24]
   1d47c:	blx	r3
   1d480:	ldr	r3, [r6, #8]
   1d484:	cmp	r0, r3
   1d488:	bcs	1d5a4 <__assert_fail@plt+0xb65c>
   1d48c:	ldr	r8, [r6]
   1d490:	lsl	r9, r0, #3
   1d494:	mov	sl, r0
   1d498:	add	r4, r8, r9
   1d49c:	str	r4, [fp]
   1d4a0:	ldr	r1, [r8, r0, lsl #3]
   1d4a4:	cmp	r1, #0
   1d4a8:	beq	1d59c <__assert_fail@plt+0xb654>
   1d4ac:	cmp	r1, r5
   1d4b0:	beq	1d564 <__assert_fail@plt+0xb61c>
   1d4b4:	mov	r0, r5
   1d4b8:	ldr	r3, [r6, #28]
   1d4bc:	blx	r3
   1d4c0:	cmp	r0, #0
   1d4c4:	bne	1d560 <__assert_fail@plt+0xb618>
   1d4c8:	ldr	r3, [r4, #4]
   1d4cc:	cmp	r3, #0
   1d4d0:	beq	1d59c <__assert_fail@plt+0xb654>
   1d4d4:	ldr	r1, [r3]
   1d4d8:	cmp	r5, r1
   1d4dc:	bne	1d500 <__assert_fail@plt+0xb5b8>
   1d4e0:	b	1d51c <__assert_fail@plt+0xb5d4>
   1d4e4:	ldr	r4, [r4, #4]
   1d4e8:	ldr	r3, [r4, #4]
   1d4ec:	cmp	r3, #0
   1d4f0:	beq	1d59c <__assert_fail@plt+0xb654>
   1d4f4:	ldr	r1, [r3]
   1d4f8:	cmp	r1, r5
   1d4fc:	beq	1d51c <__assert_fail@plt+0xb5d4>
   1d500:	mov	r0, r5
   1d504:	ldr	r3, [r6, #28]
   1d508:	blx	r3
   1d50c:	cmp	r0, #0
   1d510:	beq	1d4e4 <__assert_fail@plt+0xb59c>
   1d514:	ldr	r3, [r4, #4]
   1d518:	ldr	r1, [r3]
   1d51c:	cmp	r7, #0
   1d520:	beq	1d540 <__assert_fail@plt+0xb5f8>
   1d524:	ldr	r0, [r3, #4]
   1d528:	mov	r2, #0
   1d52c:	str	r0, [r4, #4]
   1d530:	str	r2, [r3]
   1d534:	ldr	r2, [r6, #36]	; 0x24
   1d538:	str	r2, [r3, #4]
   1d53c:	str	r3, [r6, #36]	; 0x24
   1d540:	mov	r0, r1
   1d544:	add	sp, sp, #4
   1d548:	ldrd	r4, [sp]
   1d54c:	ldrd	r6, [sp, #8]
   1d550:	ldrd	r8, [sp, #16]
   1d554:	ldrd	sl, [sp, #24]
   1d558:	add	sp, sp, #32
   1d55c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d560:	ldr	r1, [r8, sl, lsl #3]
   1d564:	cmp	r7, #0
   1d568:	beq	1d540 <__assert_fail@plt+0xb5f8>
   1d56c:	ldr	r0, [r4, #4]
   1d570:	cmp	r0, #0
   1d574:	streq	r0, [r8, sl, lsl #3]
   1d578:	beq	1d540 <__assert_fail@plt+0xb5f8>
   1d57c:	ldrd	r2, [r0]
   1d580:	mov	ip, #0
   1d584:	strd	r2, [r8, r9]
   1d588:	str	ip, [r0]
   1d58c:	ldr	r3, [r6, #36]	; 0x24
   1d590:	str	r3, [r0, #4]
   1d594:	str	r0, [r6, #36]	; 0x24
   1d598:	b	1d540 <__assert_fail@plt+0xb5f8>
   1d59c:	mov	r1, #0
   1d5a0:	b	1d540 <__assert_fail@plt+0xb5f8>
   1d5a4:	bl	11f24 <abort@plt>
   1d5a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d5ac:	ldr	r3, [r1, #4]
   1d5b0:	strd	r6, [sp, #8]
   1d5b4:	ldr	r6, [r1]
   1d5b8:	strd	r8, [sp, #16]
   1d5bc:	str	sl, [sp, #24]
   1d5c0:	str	lr, [sp, #28]
   1d5c4:	cmp	r6, r3
   1d5c8:	bcs	1d6a8 <__assert_fail@plt+0xb760>
   1d5cc:	mov	r8, r2
   1d5d0:	mov	r5, r0
   1d5d4:	mov	r7, r1
   1d5d8:	add	r6, r6, #8
   1d5dc:	mov	r9, #0
   1d5e0:	b	1d5f0 <__assert_fail@plt+0xb6a8>
   1d5e4:	cmp	r3, r6
   1d5e8:	add	r6, r6, #8
   1d5ec:	bls	1d6a8 <__assert_fail@plt+0xb760>
   1d5f0:	ldr	sl, [r6, #-8]
   1d5f4:	cmp	sl, #0
   1d5f8:	beq	1d5e4 <__assert_fail@plt+0xb69c>
   1d5fc:	ldr	r4, [r6, #-4]
   1d600:	cmp	r4, #0
   1d604:	beq	1d68c <__assert_fail@plt+0xb744>
   1d608:	ldr	r1, [r5, #8]
   1d60c:	b	1d628 <__assert_fail@plt+0xb6e0>
   1d610:	ldr	r3, [ip, #4]
   1d614:	cmp	r2, #0
   1d618:	str	r3, [r4, #4]
   1d61c:	str	r4, [ip, #4]
   1d620:	mov	r4, r2
   1d624:	beq	1d688 <__assert_fail@plt+0xb740>
   1d628:	ldr	sl, [r4]
   1d62c:	ldr	r3, [r5, #24]
   1d630:	mov	r0, sl
   1d634:	blx	r3
   1d638:	ldr	r1, [r5, #8]
   1d63c:	cmp	r0, r1
   1d640:	bcs	1d75c <__assert_fail@plt+0xb814>
   1d644:	ldr	r3, [r5]
   1d648:	ldr	r2, [r4, #4]
   1d64c:	ldr	lr, [r3, r0, lsl #3]
   1d650:	add	ip, r3, r0, lsl #3
   1d654:	cmp	lr, #0
   1d658:	bne	1d610 <__assert_fail@plt+0xb6c8>
   1d65c:	ldr	ip, [r5, #12]
   1d660:	cmp	r2, #0
   1d664:	str	sl, [r3, r0, lsl #3]
   1d668:	add	ip, ip, #1
   1d66c:	str	ip, [r5, #12]
   1d670:	str	lr, [r4]
   1d674:	ldr	r3, [r5, #36]	; 0x24
   1d678:	str	r3, [r4, #4]
   1d67c:	str	r4, [r5, #36]	; 0x24
   1d680:	mov	r4, r2
   1d684:	bne	1d628 <__assert_fail@plt+0xb6e0>
   1d688:	ldr	sl, [r6, #-8]
   1d68c:	cmp	r8, #0
   1d690:	str	r9, [r6, #-4]
   1d694:	beq	1d6c4 <__assert_fail@plt+0xb77c>
   1d698:	ldr	r3, [r7, #4]
   1d69c:	cmp	r3, r6
   1d6a0:	add	r6, r6, #8
   1d6a4:	bhi	1d5f0 <__assert_fail@plt+0xb6a8>
   1d6a8:	mov	r0, #1
   1d6ac:	ldrd	r4, [sp]
   1d6b0:	ldrd	r6, [sp, #8]
   1d6b4:	ldrd	r8, [sp, #16]
   1d6b8:	ldr	sl, [sp, #24]
   1d6bc:	add	sp, sp, #28
   1d6c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6c4:	mov	r0, sl
   1d6c8:	ldr	r1, [r5, #8]
   1d6cc:	ldr	r3, [r5, #24]
   1d6d0:	blx	r3
   1d6d4:	ldr	r3, [r5, #8]
   1d6d8:	cmp	r0, r3
   1d6dc:	bcs	1d75c <__assert_fail@plt+0xb814>
   1d6e0:	ldr	r3, [r5]
   1d6e4:	ldr	r2, [r3, r0, lsl #3]
   1d6e8:	add	r4, r3, r0, lsl #3
   1d6ec:	cmp	r2, #0
   1d6f0:	beq	1d730 <__assert_fail@plt+0xb7e8>
   1d6f4:	ldr	r0, [r5, #36]	; 0x24
   1d6f8:	cmp	r0, #0
   1d6fc:	beq	1d744 <__assert_fail@plt+0xb7fc>
   1d700:	ldr	r3, [r0, #4]
   1d704:	str	r3, [r5, #36]	; 0x24
   1d708:	ldr	r3, [r4, #4]
   1d70c:	str	sl, [r0]
   1d710:	str	r3, [r0, #4]
   1d714:	str	r0, [r4, #4]
   1d718:	ldr	r2, [r7, #12]
   1d71c:	str	r9, [r6, #-8]
   1d720:	ldr	r3, [r7, #4]
   1d724:	sub	r2, r2, #1
   1d728:	str	r2, [r7, #12]
   1d72c:	b	1d5e4 <__assert_fail@plt+0xb69c>
   1d730:	ldr	r2, [r5, #12]
   1d734:	str	sl, [r3, r0, lsl #3]
   1d738:	add	r2, r2, #1
   1d73c:	str	r2, [r5, #12]
   1d740:	b	1d718 <__assert_fail@plt+0xb7d0>
   1d744:	mov	r0, #8
   1d748:	bl	262d0 <__assert_fail@plt+0x14388>
   1d74c:	cmp	r0, #0
   1d750:	bne	1d708 <__assert_fail@plt+0xb7c0>
   1d754:	mov	r0, r8
   1d758:	b	1d6ac <__assert_fail@plt+0xb764>
   1d75c:	bl	11f24 <abort@plt>
   1d760:	ldr	r0, [r0, #8]
   1d764:	bx	lr
   1d768:	ldr	r0, [r0, #12]
   1d76c:	bx	lr
   1d770:	ldr	r0, [r0, #16]
   1d774:	bx	lr
   1d778:	ldm	r0, {r1, r3}
   1d77c:	cmp	r1, r3
   1d780:	bcs	1d7f4 <__assert_fail@plt+0xb8ac>
   1d784:	sub	ip, r3, #1
   1d788:	add	r3, r1, #16
   1d78c:	sub	ip, ip, r1
   1d790:	mov	r0, #0
   1d794:	bic	ip, ip, #7
   1d798:	add	r1, r1, #8
   1d79c:	add	ip, ip, r3
   1d7a0:	b	1d7b0 <__assert_fail@plt+0xb868>
   1d7a4:	add	r1, r1, #8
   1d7a8:	cmp	r1, ip
   1d7ac:	beq	1d7f0 <__assert_fail@plt+0xb8a8>
   1d7b0:	ldr	r3, [r1, #-8]
   1d7b4:	cmp	r3, #0
   1d7b8:	beq	1d7a4 <__assert_fail@plt+0xb85c>
   1d7bc:	ldr	r3, [r1, #-4]
   1d7c0:	mov	r2, #1
   1d7c4:	cmp	r3, #0
   1d7c8:	beq	1d7dc <__assert_fail@plt+0xb894>
   1d7cc:	ldr	r3, [r3, #4]
   1d7d0:	add	r2, r2, #1
   1d7d4:	cmp	r3, #0
   1d7d8:	bne	1d7cc <__assert_fail@plt+0xb884>
   1d7dc:	cmp	r0, r2
   1d7e0:	add	r1, r1, #8
   1d7e4:	movcc	r0, r2
   1d7e8:	cmp	r1, ip
   1d7ec:	bne	1d7b0 <__assert_fail@plt+0xb868>
   1d7f0:	bx	lr
   1d7f4:	mov	r0, #0
   1d7f8:	bx	lr
   1d7fc:	ldm	r0, {r1, r3}
   1d800:	push	{lr}		; (str lr, [sp, #-4]!)
   1d804:	cmp	r1, r3
   1d808:	bcs	1d89c <__assert_fail@plt+0xb954>
   1d80c:	sub	ip, r3, #1
   1d810:	mov	r2, #0
   1d814:	sub	ip, ip, r1
   1d818:	add	r3, r1, #16
   1d81c:	bic	ip, ip, #7
   1d820:	add	r1, r1, #8
   1d824:	add	ip, ip, r3
   1d828:	mov	lr, r2
   1d82c:	b	1d83c <__assert_fail@plt+0xb8f4>
   1d830:	add	r1, r1, #8
   1d834:	cmp	r1, ip
   1d838:	beq	1d878 <__assert_fail@plt+0xb930>
   1d83c:	ldr	r3, [r1, #-8]
   1d840:	cmp	r3, #0
   1d844:	beq	1d830 <__assert_fail@plt+0xb8e8>
   1d848:	ldr	r3, [r1, #-4]
   1d84c:	add	lr, lr, #1
   1d850:	add	r2, r2, #1
   1d854:	cmp	r3, #0
   1d858:	beq	1d830 <__assert_fail@plt+0xb8e8>
   1d85c:	ldr	r3, [r3, #4]
   1d860:	add	r2, r2, #1
   1d864:	cmp	r3, #0
   1d868:	bne	1d85c <__assert_fail@plt+0xb914>
   1d86c:	add	r1, r1, #8
   1d870:	cmp	r1, ip
   1d874:	bne	1d83c <__assert_fail@plt+0xb8f4>
   1d878:	ldr	r3, [r0, #12]
   1d87c:	cmp	r3, lr
   1d880:	movne	r0, #0
   1d884:	bne	1d898 <__assert_fail@plt+0xb950>
   1d888:	ldr	r0, [r0, #16]
   1d88c:	sub	r0, r0, r2
   1d890:	clz	r0, r0
   1d894:	lsr	r0, r0, #5
   1d898:	pop	{pc}		; (ldr pc, [sp], #4)
   1d89c:	mov	r2, #0
   1d8a0:	mov	lr, r2
   1d8a4:	b	1d878 <__assert_fail@plt+0xb930>
   1d8a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d8ac:	mov	r4, r1
   1d8b0:	ldr	r2, [r0]
   1d8b4:	ldr	r1, [r0, #4]
   1d8b8:	ldr	r3, [r0, #16]
   1d8bc:	strd	r6, [sp, #8]
   1d8c0:	str	lr, [sp, #16]
   1d8c4:	sub	sp, sp, #12
   1d8c8:	cmp	r2, r1
   1d8cc:	ldrd	r6, [r0, #8]
   1d8d0:	bcs	1d9d0 <__assert_fail@plt+0xba88>
   1d8d4:	sub	ip, r1, #1
   1d8d8:	add	r1, r2, #16
   1d8dc:	sub	ip, ip, r2
   1d8e0:	add	r0, r2, #8
   1d8e4:	bic	ip, ip, #7
   1d8e8:	mov	r5, #0
   1d8ec:	add	ip, ip, r1
   1d8f0:	b	1d900 <__assert_fail@plt+0xb9b8>
   1d8f4:	add	r0, r0, #8
   1d8f8:	cmp	r0, ip
   1d8fc:	beq	1d940 <__assert_fail@plt+0xb9f8>
   1d900:	ldr	r2, [r0, #-8]
   1d904:	cmp	r2, #0
   1d908:	beq	1d8f4 <__assert_fail@plt+0xb9ac>
   1d90c:	ldr	r2, [r0, #-4]
   1d910:	mov	r1, #1
   1d914:	cmp	r2, #0
   1d918:	beq	1d92c <__assert_fail@plt+0xb9e4>
   1d91c:	ldr	r2, [r2, #4]
   1d920:	add	r1, r1, #1
   1d924:	cmp	r2, #0
   1d928:	bne	1d91c <__assert_fail@plt+0xb9d4>
   1d92c:	cmp	r5, r1
   1d930:	add	r0, r0, #8
   1d934:	movcc	r5, r1
   1d938:	cmp	r0, ip
   1d93c:	bne	1d900 <__assert_fail@plt+0xb9b8>
   1d940:	mov	r1, #1
   1d944:	mov	r0, r4
   1d948:	movw	r2, #38560	; 0x96a0
   1d94c:	movt	r2, #2
   1d950:	bl	11dd4 <__fprintf_chk@plt>
   1d954:	mov	r3, r6
   1d958:	mov	r1, #1
   1d95c:	mov	r0, r4
   1d960:	movw	r2, #38584	; 0x96b8
   1d964:	movt	r2, #2
   1d968:	bl	11dd4 <__fprintf_chk@plt>
   1d96c:	vmov	s15, r7
   1d970:	mov	r3, r7
   1d974:	mov	r1, #1
   1d978:	vldr	d5, [pc, #88]	; 1d9d8 <__assert_fail@plt+0xba90>
   1d97c:	mov	r0, r4
   1d980:	movw	r2, #38608	; 0x96d0
   1d984:	movt	r2, #2
   1d988:	vcvt.f64.u32	d6, s15
   1d98c:	vmov	s15, r6
   1d990:	vmul.f64	d6, d6, d5
   1d994:	vcvt.f64.u32	d7, s15
   1d998:	vdiv.f64	d5, d6, d7
   1d99c:	vstr	d5, [sp]
   1d9a0:	bl	11dd4 <__fprintf_chk@plt>
   1d9a4:	mov	r3, r5
   1d9a8:	mov	r0, r4
   1d9ac:	movw	r2, #38644	; 0x96f4
   1d9b0:	movt	r2, #2
   1d9b4:	mov	r1, #1
   1d9b8:	add	sp, sp, #12
   1d9bc:	ldrd	r4, [sp]
   1d9c0:	ldrd	r6, [sp, #8]
   1d9c4:	ldr	lr, [sp, #16]
   1d9c8:	add	sp, sp, #20
   1d9cc:	b	11dd4 <__fprintf_chk@plt>
   1d9d0:	mov	r5, #0
   1d9d4:	b	1d940 <__assert_fail@plt+0xb9f8>
   1d9d8:	andeq	r0, r0, r0
   1d9dc:	subsmi	r0, r9, r0
   1d9e0:	strd	r4, [sp, #-16]!
   1d9e4:	mov	r5, r1
   1d9e8:	str	r6, [sp, #8]
   1d9ec:	mov	r6, r0
   1d9f0:	mov	r0, r1
   1d9f4:	str	lr, [sp, #12]
   1d9f8:	ldr	r1, [r6, #8]
   1d9fc:	ldr	r3, [r6, #24]
   1da00:	blx	r3
   1da04:	ldr	r3, [r6, #8]
   1da08:	cmp	r0, r3
   1da0c:	bcs	1da7c <__assert_fail@plt+0xbb34>
   1da10:	ldr	r4, [r6]
   1da14:	ldr	r1, [r4, r0, lsl #3]
   1da18:	add	r4, r4, r0, lsl #3
   1da1c:	cmp	r1, #0
   1da20:	beq	1da5c <__assert_fail@plt+0xbb14>
   1da24:	cmp	r1, r5
   1da28:	bne	1da3c <__assert_fail@plt+0xbaf4>
   1da2c:	b	1da60 <__assert_fail@plt+0xbb18>
   1da30:	ldr	r1, [r4]
   1da34:	cmp	r5, r1
   1da38:	beq	1da60 <__assert_fail@plt+0xbb18>
   1da3c:	mov	r0, r5
   1da40:	ldr	r3, [r6, #28]
   1da44:	blx	r3
   1da48:	cmp	r0, #0
   1da4c:	bne	1da74 <__assert_fail@plt+0xbb2c>
   1da50:	ldr	r4, [r4, #4]
   1da54:	cmp	r4, #0
   1da58:	bne	1da30 <__assert_fail@plt+0xbae8>
   1da5c:	mov	r1, #0
   1da60:	ldrd	r4, [sp]
   1da64:	mov	r0, r1
   1da68:	ldr	r6, [sp, #8]
   1da6c:	add	sp, sp, #12
   1da70:	pop	{pc}		; (ldr pc, [sp], #4)
   1da74:	ldr	r1, [r4]
   1da78:	b	1da60 <__assert_fail@plt+0xbb18>
   1da7c:	bl	11f24 <abort@plt>
   1da80:	ldr	r3, [r0, #16]
   1da84:	cmp	r3, #0
   1da88:	beq	1dadc <__assert_fail@plt+0xbb94>
   1da8c:	ldr	r3, [r0]
   1da90:	ldr	r2, [r0, #4]
   1da94:	cmp	r3, r2
   1da98:	bcs	1dad0 <__assert_fail@plt+0xbb88>
   1da9c:	ldr	r0, [r3]
   1daa0:	cmp	r0, #0
   1daa4:	bxne	lr
   1daa8:	sub	r2, r2, #1
   1daac:	sub	r2, r2, r3
   1dab0:	bic	r2, r2, #7
   1dab4:	add	r2, r3, r2
   1dab8:	b	1dac8 <__assert_fail@plt+0xbb80>
   1dabc:	ldr	r0, [r3, #8]!
   1dac0:	cmp	r0, #0
   1dac4:	bxne	lr
   1dac8:	cmp	r3, r2
   1dacc:	bne	1dabc <__assert_fail@plt+0xbb74>
   1dad0:	str	r4, [sp, #-8]!
   1dad4:	str	lr, [sp, #4]
   1dad8:	bl	11f24 <abort@plt>
   1dadc:	mov	r0, r3
   1dae0:	bx	lr
   1dae4:	strd	r4, [sp, #-16]!
   1dae8:	mov	r5, r0
   1daec:	mov	r4, r1
   1daf0:	mov	r0, r1
   1daf4:	ldr	r1, [r5, #8]
   1daf8:	ldr	r3, [r5, #24]
   1dafc:	str	r6, [sp, #8]
   1db00:	str	lr, [sp, #12]
   1db04:	blx	r3
   1db08:	ldr	r3, [r5, #8]
   1db0c:	cmp	r0, r3
   1db10:	bcs	1db78 <__assert_fail@plt+0xbc30>
   1db14:	ldr	r2, [r5]
   1db18:	add	r2, r2, r0, lsl #3
   1db1c:	mov	r3, r2
   1db20:	b	1db2c <__assert_fail@plt+0xbbe4>
   1db24:	cmp	r3, #0
   1db28:	beq	1db44 <__assert_fail@plt+0xbbfc>
   1db2c:	ldm	r3, {r1, r3}
   1db30:	cmp	r1, r4
   1db34:	bne	1db24 <__assert_fail@plt+0xbbdc>
   1db38:	cmp	r3, #0
   1db3c:	ldrne	r0, [r3]
   1db40:	bne	1db68 <__assert_fail@plt+0xbc20>
   1db44:	ldr	r3, [r5, #4]
   1db48:	b	1db58 <__assert_fail@plt+0xbc10>
   1db4c:	ldr	r0, [r2]
   1db50:	cmp	r0, #0
   1db54:	bne	1db68 <__assert_fail@plt+0xbc20>
   1db58:	add	r2, r2, #8
   1db5c:	cmp	r3, r2
   1db60:	bhi	1db4c <__assert_fail@plt+0xbc04>
   1db64:	mov	r0, #0
   1db68:	ldrd	r4, [sp]
   1db6c:	ldr	r6, [sp, #8]
   1db70:	add	sp, sp, #12
   1db74:	pop	{pc}		; (ldr pc, [sp], #4)
   1db78:	bl	11f24 <abort@plt>
   1db7c:	strd	r4, [sp, #-16]!
   1db80:	mov	r3, #0
   1db84:	ldr	r5, [r0]
   1db88:	str	r6, [sp, #8]
   1db8c:	str	lr, [sp, #12]
   1db90:	ldr	lr, [r0, #4]
   1db94:	cmp	lr, r5
   1db98:	bls	1dbb4 <__assert_fail@plt+0xbc6c>
   1db9c:	ldr	ip, [r5]
   1dba0:	cmp	ip, #0
   1dba4:	bne	1dbc8 <__assert_fail@plt+0xbc80>
   1dba8:	add	r5, r5, #8
   1dbac:	cmp	r5, lr
   1dbb0:	bcc	1db9c <__assert_fail@plt+0xbc54>
   1dbb4:	ldrd	r4, [sp]
   1dbb8:	mov	r0, r3
   1dbbc:	ldr	r6, [sp, #8]
   1dbc0:	add	sp, sp, #12
   1dbc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbc8:	cmp	r2, r3
   1dbcc:	bls	1dbb4 <__assert_fail@plt+0xbc6c>
   1dbd0:	str	ip, [r1, r3, lsl #2]
   1dbd4:	add	r4, r3, #1
   1dbd8:	lsl	lr, r3, #2
   1dbdc:	ldr	ip, [r5, #4]
   1dbe0:	cmp	ip, #0
   1dbe4:	beq	1dc44 <__assert_fail@plt+0xbcfc>
   1dbe8:	cmp	r2, r4
   1dbec:	bls	1dc38 <__assert_fail@plt+0xbcf0>
   1dbf0:	ldr	r6, [ip]
   1dbf4:	add	r3, r3, #2
   1dbf8:	str	r6, [r1, r4, lsl #2]
   1dbfc:	ldr	ip, [ip, #4]
   1dc00:	cmp	ip, #0
   1dc04:	beq	1dc30 <__assert_fail@plt+0xbce8>
   1dc08:	add	lr, lr, #4
   1dc0c:	add	lr, r1, lr
   1dc10:	cmp	r2, r3
   1dc14:	add	r3, r3, #1
   1dc18:	beq	1dc3c <__assert_fail@plt+0xbcf4>
   1dc1c:	ldr	r4, [ip]
   1dc20:	str	r4, [lr, #4]!
   1dc24:	ldr	ip, [ip, #4]
   1dc28:	cmp	ip, #0
   1dc2c:	bne	1dc10 <__assert_fail@plt+0xbcc8>
   1dc30:	ldr	lr, [r0, #4]
   1dc34:	b	1dba8 <__assert_fail@plt+0xbc60>
   1dc38:	mov	r2, r4
   1dc3c:	mov	r3, r2
   1dc40:	b	1dbb4 <__assert_fail@plt+0xbc6c>
   1dc44:	mov	r3, r4
   1dc48:	ldr	lr, [r0, #4]
   1dc4c:	b	1dba8 <__assert_fail@plt+0xbc60>
   1dc50:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1dc54:	ldr	r3, [r0, #4]
   1dc58:	strd	r6, [sp, #8]
   1dc5c:	strd	r8, [sp, #16]
   1dc60:	ldr	r8, [r0]
   1dc64:	str	sl, [sp, #24]
   1dc68:	str	lr, [sp, #28]
   1dc6c:	cmp	r3, r8
   1dc70:	bls	1dcec <__assert_fail@plt+0xbda4>
   1dc74:	mov	r7, r2
   1dc78:	mov	r6, r1
   1dc7c:	mov	r9, r0
   1dc80:	mov	r5, #0
   1dc84:	ldr	r0, [r8]
   1dc88:	cmp	r0, #0
   1dc8c:	bne	1dcb8 <__assert_fail@plt+0xbd70>
   1dc90:	add	r8, r8, #8
   1dc94:	cmp	r8, r3
   1dc98:	bcc	1dc84 <__assert_fail@plt+0xbd3c>
   1dc9c:	mov	r0, r5
   1dca0:	ldrd	r4, [sp]
   1dca4:	ldrd	r6, [sp, #8]
   1dca8:	ldrd	r8, [sp, #16]
   1dcac:	ldr	sl, [sp, #24]
   1dcb0:	add	sp, sp, #28
   1dcb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dcb8:	mov	r4, r8
   1dcbc:	b	1dcc4 <__assert_fail@plt+0xbd7c>
   1dcc0:	ldr	r0, [r4]
   1dcc4:	mov	r1, r7
   1dcc8:	blx	r6
   1dccc:	cmp	r0, #0
   1dcd0:	beq	1dc9c <__assert_fail@plt+0xbd54>
   1dcd4:	ldr	r4, [r4, #4]
   1dcd8:	add	r5, r5, #1
   1dcdc:	cmp	r4, #0
   1dce0:	bne	1dcc0 <__assert_fail@plt+0xbd78>
   1dce4:	ldr	r3, [r9, #4]
   1dce8:	b	1dc90 <__assert_fail@plt+0xbd48>
   1dcec:	mov	r5, #0
   1dcf0:	b	1dc9c <__assert_fail@plt+0xbd54>
   1dcf4:	ldrb	r2, [r0]
   1dcf8:	cmp	r2, #0
   1dcfc:	beq	1dd28 <__assert_fail@plt+0xbde0>
   1dd00:	mov	r3, #0
   1dd04:	rsb	r3, r3, r3, lsl #5
   1dd08:	add	r3, r3, r2
   1dd0c:	ldrb	r2, [r0, #1]!
   1dd10:	udiv	ip, r3, r1
   1dd14:	cmp	r2, #0
   1dd18:	mls	r3, r1, ip, r3
   1dd1c:	bne	1dd04 <__assert_fail@plt+0xbdbc>
   1dd20:	mov	r0, r3
   1dd24:	bx	lr
   1dd28:	mov	r3, r2
   1dd2c:	mov	r0, r3
   1dd30:	bx	lr
   1dd34:	movw	r3, #38540	; 0x968c
   1dd38:	movt	r3, #2
   1dd3c:	strd	r4, [sp, #-8]!
   1dd40:	ldrd	r4, [r3]
   1dd44:	ldr	r1, [r3, #16]
   1dd48:	ldrd	r2, [r3, #8]
   1dd4c:	strd	r4, [r0]
   1dd50:	ldrd	r4, [sp]
   1dd54:	add	sp, sp, #8
   1dd58:	strd	r2, [r0, #8]
   1dd5c:	str	r1, [r0, #16]
   1dd60:	bx	lr
   1dd64:	cmp	r2, #0
   1dd68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1dd6c:	movw	r4, #54312	; 0xd428
   1dd70:	movt	r4, #1
   1dd74:	movne	r4, r2
   1dd78:	strd	r6, [sp, #8]
   1dd7c:	cmp	r3, #0
   1dd80:	str	r8, [sp, #16]
   1dd84:	mov	r8, r0
   1dd88:	mov	r0, #40	; 0x28
   1dd8c:	movw	r5, #54328	; 0xd438
   1dd90:	movt	r5, #1
   1dd94:	mov	r7, r1
   1dd98:	str	lr, [sp, #20]
   1dd9c:	movne	r5, r3
   1dda0:	bl	262d0 <__assert_fail@plt+0x14388>
   1dda4:	subs	r6, r0, #0
   1dda8:	beq	1ddec <__assert_fail@plt+0xbea4>
   1ddac:	cmp	r7, #0
   1ddb0:	movw	r3, #38540	; 0x968c
   1ddb4:	movt	r3, #2
   1ddb8:	beq	1de78 <__assert_fail@plt+0xbf30>
   1ddbc:	cmp	r7, r3
   1ddc0:	str	r7, [r6, #20]
   1ddc4:	beq	1de7c <__assert_fail@plt+0xbf34>
   1ddc8:	vldr	s14, [pc, #456]	; 1df98 <__assert_fail@plt+0xc050>
   1ddcc:	vldr	s15, [r7, #8]
   1ddd0:	vcmpe.f32	s15, s14
   1ddd4:	vmrs	APSR_nzcv, fpscr
   1ddd8:	bgt	1de04 <__assert_fail@plt+0xbebc>
   1dddc:	str	r3, [r6, #20]
   1dde0:	mov	r0, r6
   1dde4:	mov	r6, #0
   1dde8:	bl	1d29c <__assert_fail@plt+0xb354>
   1ddec:	mov	r0, r6
   1ddf0:	ldrd	r4, [sp]
   1ddf4:	ldrd	r6, [sp, #8]
   1ddf8:	ldr	r8, [sp, #16]
   1ddfc:	add	sp, sp, #20
   1de00:	pop	{pc}		; (ldr pc, [sp], #4)
   1de04:	vldr	s13, [pc, #400]	; 1df9c <__assert_fail@plt+0xc054>
   1de08:	vcmpe.f32	s15, s13
   1de0c:	vmrs	APSR_nzcv, fpscr
   1de10:	bpl	1dddc <__assert_fail@plt+0xbe94>
   1de14:	vldr	s13, [pc, #388]	; 1dfa0 <__assert_fail@plt+0xc058>
   1de18:	vldr	s12, [r7, #12]
   1de1c:	vcmpe.f32	s12, s13
   1de20:	vmrs	APSR_nzcv, fpscr
   1de24:	ble	1dddc <__assert_fail@plt+0xbe94>
   1de28:	vldr	s13, [r7]
   1de2c:	vcmpe.f32	s13, #0.0
   1de30:	vmrs	APSR_nzcv, fpscr
   1de34:	blt	1dddc <__assert_fail@plt+0xbe94>
   1de38:	vadd.f32	s14, s13, s14
   1de3c:	vldr	s13, [r7, #4]
   1de40:	vcmpe.f32	s14, s13
   1de44:	vmrs	APSR_nzcv, fpscr
   1de48:	bpl	1dddc <__assert_fail@plt+0xbe94>
   1de4c:	vldr	s12, [pc, #336]	; 1dfa4 <__assert_fail@plt+0xc05c>
   1de50:	vcmpe.f32	s13, s12
   1de54:	vmrs	APSR_nzcv, fpscr
   1de58:	bhi	1dddc <__assert_fail@plt+0xbe94>
   1de5c:	vcmpe.f32	s15, s14
   1de60:	vmrs	APSR_nzcv, fpscr
   1de64:	ble	1dddc <__assert_fail@plt+0xbe94>
   1de68:	ldrb	r3, [r7, #16]
   1de6c:	cmp	r3, #0
   1de70:	bne	1dea4 <__assert_fail@plt+0xbf5c>
   1de74:	b	1de80 <__assert_fail@plt+0xbf38>
   1de78:	str	r3, [r6, #20]
   1de7c:	vldr	s15, [pc, #292]	; 1dfa8 <__assert_fail@plt+0xc060>
   1de80:	vmov	s14, r8
   1de84:	vldr	s13, [pc, #288]	; 1dfac <__assert_fail@plt+0xc064>
   1de88:	vcvt.f32.u32	s12, s14
   1de8c:	vdiv.f32	s14, s12, s15
   1de90:	vcmpe.f32	s14, s13
   1de94:	vmrs	APSR_nzcv, fpscr
   1de98:	bge	1df2c <__assert_fail@plt+0xbfe4>
   1de9c:	vcvt.u32.f32	s15, s14
   1dea0:	vmov	r8, s15
   1dea4:	cmp	r8, #10
   1dea8:	movcs	r3, r8
   1deac:	movcc	r3, #10
   1deb0:	orr	r3, r3, #1
   1deb4:	cmn	r3, #1
   1deb8:	beq	1df2c <__assert_fail@plt+0xbfe4>
   1debc:	movw	lr, #43691	; 0xaaab
   1dec0:	movt	lr, #43690	; 0xaaaa
   1dec4:	umull	r1, r2, lr, r3
   1dec8:	cmp	r3, #9
   1decc:	lsr	r2, r2, #1
   1ded0:	add	r2, r2, r2, lsl #1
   1ded4:	sub	r2, r3, r2
   1ded8:	bls	1df18 <__assert_fail@plt+0xbfd0>
   1dedc:	cmp	r2, #0
   1dee0:	beq	1df20 <__assert_fail@plt+0xbfd8>
   1dee4:	mov	ip, #16
   1dee8:	mov	r0, #9
   1deec:	mov	r1, #3
   1def0:	b	1defc <__assert_fail@plt+0xbfb4>
   1def4:	cmp	r2, #0
   1def8:	beq	1df20 <__assert_fail@plt+0xbfd8>
   1defc:	add	r1, r1, #2
   1df00:	add	r0, r0, ip
   1df04:	cmp	r0, r3
   1df08:	add	ip, ip, #8
   1df0c:	udiv	r2, r3, r1
   1df10:	mls	r2, r1, r2, r3
   1df14:	bcc	1def4 <__assert_fail@plt+0xbfac>
   1df18:	cmp	r2, #0
   1df1c:	bne	1df38 <__assert_fail@plt+0xbff0>
   1df20:	add	r3, r3, #2
   1df24:	cmn	r3, #1
   1df28:	bne	1dec4 <__assert_fail@plt+0xbf7c>
   1df2c:	mov	r3, #0
   1df30:	str	r3, [r6, #8]
   1df34:	b	1dde0 <__assert_fail@plt+0xbe98>
   1df38:	lsrs	r2, r3, #30
   1df3c:	movne	r7, #1
   1df40:	moveq	r7, #0
   1df44:	tst	r3, #536870912	; 0x20000000
   1df48:	bne	1df2c <__assert_fail@plt+0xbfe4>
   1df4c:	cmp	r7, #0
   1df50:	bne	1df2c <__assert_fail@plt+0xbfe4>
   1df54:	mov	r0, r3
   1df58:	mov	r1, #8
   1df5c:	str	r3, [r6, #8]
   1df60:	bl	2625c <__assert_fail@plt+0x14314>
   1df64:	cmp	r0, #0
   1df68:	str	r0, [r6]
   1df6c:	beq	1dde0 <__assert_fail@plt+0xbe98>
   1df70:	ldr	r3, [r6, #8]
   1df74:	str	r7, [r6, #12]
   1df78:	str	r7, [r6, #16]
   1df7c:	strd	r4, [r6, #24]
   1df80:	str	r7, [r6, #36]	; 0x24
   1df84:	add	r0, r0, r3, lsl #3
   1df88:	ldr	r3, [sp, #24]
   1df8c:	str	r0, [r6, #4]
   1df90:	str	r3, [r6, #32]
   1df94:	b	1ddec <__assert_fail@plt+0xbea4>
   1df98:	stclcc	12, cr12, [ip, #820]	; 0x334
   1df9c:	svccc	0x00666666
   1dfa0:	svccc	0x008ccccd
   1dfa4:	svccc	0x00800000
   1dfa8:	svccc	0x004ccccd
   1dfac:	svcmi	0x00800000
   1dfb0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1dfb4:	mov	r5, r0
   1dfb8:	ldr	r2, [r0, #4]
   1dfbc:	strd	r6, [sp, #8]
   1dfc0:	ldr	r6, [r0]
   1dfc4:	str	r8, [sp, #16]
   1dfc8:	str	lr, [sp, #20]
   1dfcc:	cmp	r6, r2
   1dfd0:	addcc	r6, r6, #8
   1dfd4:	movcc	r7, #0
   1dfd8:	bcc	1dfec <__assert_fail@plt+0xc0a4>
   1dfdc:	b	1e060 <__assert_fail@plt+0xc118>
   1dfe0:	cmp	r2, r6
   1dfe4:	add	r6, r6, #8
   1dfe8:	bls	1e060 <__assert_fail@plt+0xc118>
   1dfec:	ldr	r3, [r6, #-8]
   1dff0:	cmp	r3, #0
   1dff4:	beq	1dfe0 <__assert_fail@plt+0xc098>
   1dff8:	ldr	r4, [r6, #-4]
   1dffc:	ldr	r3, [r5, #32]
   1e000:	cmp	r4, #0
   1e004:	beq	1e038 <__assert_fail@plt+0xc0f0>
   1e008:	cmp	r3, #0
   1e00c:	beq	1e080 <__assert_fail@plt+0xc138>
   1e010:	ldr	r0, [r4]
   1e014:	blx	r3
   1e018:	ldr	r1, [r4, #4]
   1e01c:	ldr	r3, [r5, #32]
   1e020:	ldr	r2, [r5, #36]	; 0x24
   1e024:	str	r7, [r4]
   1e028:	str	r2, [r4, #4]
   1e02c:	str	r4, [r5, #36]	; 0x24
   1e030:	subs	r4, r1, #0
   1e034:	bne	1e008 <__assert_fail@plt+0xc0c0>
   1e038:	cmp	r3, #0
   1e03c:	beq	1e048 <__assert_fail@plt+0xc100>
   1e040:	ldr	r0, [r6, #-8]
   1e044:	blx	r3
   1e048:	str	r7, [r6, #-8]
   1e04c:	str	r7, [r6, #-4]
   1e050:	ldr	r2, [r5, #4]
   1e054:	cmp	r2, r6
   1e058:	add	r6, r6, #8
   1e05c:	bhi	1dfec <__assert_fail@plt+0xc0a4>
   1e060:	mov	r3, #0
   1e064:	ldrd	r6, [sp, #8]
   1e068:	ldr	r8, [sp, #16]
   1e06c:	str	r3, [r5, #12]
   1e070:	str	r3, [r5, #16]
   1e074:	ldrd	r4, [sp]
   1e078:	add	sp, sp, #20
   1e07c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e080:	ldr	r2, [r5, #36]	; 0x24
   1e084:	str	r7, [r4]
   1e088:	ldr	r3, [r4, #4]
   1e08c:	str	r2, [r4, #4]
   1e090:	mov	r2, r4
   1e094:	str	r2, [r5, #36]	; 0x24
   1e098:	subs	r4, r3, #0
   1e09c:	bne	1e084 <__assert_fail@plt+0xc13c>
   1e0a0:	b	1e048 <__assert_fail@plt+0xc100>
   1e0a4:	strd	r4, [sp, #-16]!
   1e0a8:	ldr	r2, [r0, #32]
   1e0ac:	ldr	r5, [r0]
   1e0b0:	ldr	r3, [r0, #4]
   1e0b4:	cmp	r2, #0
   1e0b8:	str	r6, [sp, #8]
   1e0bc:	mov	r6, r0
   1e0c0:	str	lr, [sp, #12]
   1e0c4:	beq	1e12c <__assert_fail@plt+0xc1e4>
   1e0c8:	ldr	r2, [r0, #16]
   1e0cc:	cmp	r2, #0
   1e0d0:	beq	1e12c <__assert_fail@plt+0xc1e4>
   1e0d4:	cmp	r5, r3
   1e0d8:	bcc	1e0ec <__assert_fail@plt+0xc1a4>
   1e0dc:	b	1e160 <__assert_fail@plt+0xc218>
   1e0e0:	add	r5, r5, #8
   1e0e4:	cmp	r5, r3
   1e0e8:	bcs	1e128 <__assert_fail@plt+0xc1e0>
   1e0ec:	ldr	r0, [r5]
   1e0f0:	cmp	r0, #0
   1e0f4:	beq	1e0e0 <__assert_fail@plt+0xc198>
   1e0f8:	mov	r4, r5
   1e0fc:	b	1e104 <__assert_fail@plt+0xc1bc>
   1e100:	ldr	r0, [r4]
   1e104:	ldr	r3, [r6, #32]
   1e108:	blx	r3
   1e10c:	ldr	r4, [r4, #4]
   1e110:	cmp	r4, #0
   1e114:	bne	1e100 <__assert_fail@plt+0xc1b8>
   1e118:	ldr	r3, [r6, #4]
   1e11c:	add	r5, r5, #8
   1e120:	cmp	r5, r3
   1e124:	bcc	1e0ec <__assert_fail@plt+0xc1a4>
   1e128:	ldr	r5, [r6]
   1e12c:	cmp	r3, r5
   1e130:	bls	1e160 <__assert_fail@plt+0xc218>
   1e134:	ldr	r0, [r5, #4]
   1e138:	cmp	r0, #0
   1e13c:	beq	1e154 <__assert_fail@plt+0xc20c>
   1e140:	ldr	r4, [r0, #4]
   1e144:	bl	1d29c <__assert_fail@plt+0xb354>
   1e148:	subs	r0, r4, #0
   1e14c:	bne	1e140 <__assert_fail@plt+0xc1f8>
   1e150:	ldr	r3, [r6, #4]
   1e154:	add	r5, r5, #8
   1e158:	cmp	r5, r3
   1e15c:	bcc	1e134 <__assert_fail@plt+0xc1ec>
   1e160:	ldr	r0, [r6, #36]	; 0x24
   1e164:	cmp	r0, #0
   1e168:	beq	1e17c <__assert_fail@plt+0xc234>
   1e16c:	ldr	r4, [r0, #4]
   1e170:	bl	1d29c <__assert_fail@plt+0xb354>
   1e174:	subs	r0, r4, #0
   1e178:	bne	1e16c <__assert_fail@plt+0xc224>
   1e17c:	ldr	r0, [r6]
   1e180:	bl	1d29c <__assert_fail@plt+0xb354>
   1e184:	mov	r0, r6
   1e188:	ldrd	r4, [sp]
   1e18c:	ldr	r6, [sp, #8]
   1e190:	ldr	lr, [sp, #12]
   1e194:	add	sp, sp, #16
   1e198:	b	1d29c <__assert_fail@plt+0xb354>
   1e19c:	ldr	r3, [r0, #20]
   1e1a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e1a4:	mov	r5, r0
   1e1a8:	ldrb	r2, [r3, #16]
   1e1ac:	strd	r6, [sp, #8]
   1e1b0:	str	lr, [sp, #16]
   1e1b4:	sub	sp, sp, #44	; 0x2c
   1e1b8:	cmp	r2, #0
   1e1bc:	bne	1e1e8 <__assert_fail@plt+0xc2a0>
   1e1c0:	vmov	s15, r1
   1e1c4:	vldr	s12, [r3, #8]
   1e1c8:	vldr	s13, [pc, #444]	; 1e38c <__assert_fail@plt+0xc444>
   1e1cc:	vcvt.f32.u32	s15, s15
   1e1d0:	vdiv.f32	s14, s15, s12
   1e1d4:	vcmpe.f32	s14, s13
   1e1d8:	vmrs	APSR_nzcv, fpscr
   1e1dc:	vcvtlt.u32.f32	s15, s14
   1e1e0:	vmovlt	r1, s15
   1e1e4:	bge	1e26c <__assert_fail@plt+0xc324>
   1e1e8:	cmp	r1, #10
   1e1ec:	movcc	r1, #10
   1e1f0:	orr	r4, r1, #1
   1e1f4:	cmn	r4, #1
   1e1f8:	beq	1e26c <__assert_fail@plt+0xc324>
   1e1fc:	movw	ip, #43691	; 0xaaab
   1e200:	movt	ip, #43690	; 0xaaaa
   1e204:	umull	r2, r3, ip, r4
   1e208:	cmp	r4, #9
   1e20c:	lsr	r3, r3, #1
   1e210:	add	r3, r3, r3, lsl #1
   1e214:	sub	r3, r4, r3
   1e218:	bls	1e258 <__assert_fail@plt+0xc310>
   1e21c:	cmp	r3, #0
   1e220:	beq	1e260 <__assert_fail@plt+0xc318>
   1e224:	mov	r0, #16
   1e228:	mov	r1, #9
   1e22c:	mov	r2, #3
   1e230:	b	1e240 <__assert_fail@plt+0xc2f8>
   1e234:	cmp	r3, #0
   1e238:	add	r0, r0, #8
   1e23c:	beq	1e260 <__assert_fail@plt+0xc318>
   1e240:	add	r2, r2, #2
   1e244:	add	r1, r1, r0
   1e248:	cmp	r1, r4
   1e24c:	udiv	r3, r4, r2
   1e250:	mls	r3, r2, r3, r4
   1e254:	bcc	1e234 <__assert_fail@plt+0xc2ec>
   1e258:	cmp	r3, #0
   1e25c:	bne	1e288 <__assert_fail@plt+0xc340>
   1e260:	add	r4, r4, #2
   1e264:	cmn	r4, #1
   1e268:	bne	1e204 <__assert_fail@plt+0xc2bc>
   1e26c:	mov	r4, #0
   1e270:	mov	r0, r4
   1e274:	add	sp, sp, #44	; 0x2c
   1e278:	ldrd	r4, [sp]
   1e27c:	ldrd	r6, [sp, #8]
   1e280:	add	sp, sp, #16
   1e284:	pop	{pc}		; (ldr pc, [sp], #4)
   1e288:	lsrs	r3, r4, #30
   1e28c:	movne	r6, #1
   1e290:	moveq	r6, #0
   1e294:	tst	r4, #536870912	; 0x20000000
   1e298:	bne	1e26c <__assert_fail@plt+0xc324>
   1e29c:	cmp	r6, #0
   1e2a0:	bne	1e26c <__assert_fail@plt+0xc324>
   1e2a4:	ldr	r3, [r5, #8]
   1e2a8:	cmp	r3, r4
   1e2ac:	beq	1e354 <__assert_fail@plt+0xc40c>
   1e2b0:	mov	r1, #8
   1e2b4:	mov	r0, r4
   1e2b8:	bl	2625c <__assert_fail@plt+0x14314>
   1e2bc:	cmp	r0, #0
   1e2c0:	str	r0, [sp]
   1e2c4:	beq	1e26c <__assert_fail@plt+0xc324>
   1e2c8:	add	r3, r0, r4, lsl #3
   1e2cc:	ldr	r7, [r5, #20]
   1e2d0:	mov	r2, r6
   1e2d4:	mov	r0, sp
   1e2d8:	mov	r1, r5
   1e2dc:	ldr	lr, [r5, #28]
   1e2e0:	stmib	sp, {r3, r4, r6}
   1e2e4:	ldr	r4, [r5, #24]
   1e2e8:	strd	r6, [sp, #16]
   1e2ec:	ldr	ip, [r5, #32]
   1e2f0:	ldr	r3, [r5, #36]	; 0x24
   1e2f4:	str	r4, [sp, #24]
   1e2f8:	str	lr, [sp, #28]
   1e2fc:	str	ip, [sp, #32]
   1e300:	str	r3, [sp, #36]	; 0x24
   1e304:	bl	1d5a8 <__assert_fail@plt+0xb660>
   1e308:	subs	r4, r0, #0
   1e30c:	bne	1e35c <__assert_fail@plt+0xc414>
   1e310:	ldr	r3, [sp, #36]	; 0x24
   1e314:	mov	r2, #1
   1e318:	mov	r1, sp
   1e31c:	mov	r0, r5
   1e320:	str	r3, [r5, #36]	; 0x24
   1e324:	bl	1d5a8 <__assert_fail@plt+0xb660>
   1e328:	cmp	r0, #0
   1e32c:	beq	1e388 <__assert_fail@plt+0xc440>
   1e330:	mov	r1, sp
   1e334:	mov	r0, r5
   1e338:	mov	r2, r4
   1e33c:	bl	1d5a8 <__assert_fail@plt+0xb660>
   1e340:	cmp	r0, #0
   1e344:	beq	1e388 <__assert_fail@plt+0xc440>
   1e348:	ldr	r0, [sp]
   1e34c:	bl	1d29c <__assert_fail@plt+0xb354>
   1e350:	b	1e270 <__assert_fail@plt+0xc328>
   1e354:	mov	r4, #1
   1e358:	b	1e270 <__assert_fail@plt+0xc328>
   1e35c:	ldr	r0, [r5]
   1e360:	bl	1d29c <__assert_fail@plt+0xb354>
   1e364:	ldrd	r2, [sp]
   1e368:	ldr	r1, [sp, #8]
   1e36c:	strd	r2, [r5]
   1e370:	ldr	r2, [sp, #12]
   1e374:	str	r1, [r5, #8]
   1e378:	ldr	r3, [sp, #36]	; 0x24
   1e37c:	str	r2, [r5, #12]
   1e380:	str	r3, [r5, #36]	; 0x24
   1e384:	b	1e270 <__assert_fail@plt+0xc328>
   1e388:	bl	11f24 <abort@plt>
   1e38c:	svcmi	0x00800000
   1e390:	strd	r4, [sp, #-16]!
   1e394:	str	r6, [sp, #8]
   1e398:	subs	r6, r1, #0
   1e39c:	str	lr, [sp, #12]
   1e3a0:	sub	sp, sp, #8
   1e3a4:	beq	1e530 <__assert_fail@plt+0xc5e8>
   1e3a8:	mov	r3, #0
   1e3ac:	mov	r5, r2
   1e3b0:	add	r2, sp, #4
   1e3b4:	mov	r4, r0
   1e3b8:	bl	1d448 <__assert_fail@plt+0xb500>
   1e3bc:	subs	r3, r0, #0
   1e3c0:	beq	1e3ec <__assert_fail@plt+0xc4a4>
   1e3c4:	cmp	r5, #0
   1e3c8:	moveq	r0, r5
   1e3cc:	beq	1e3d8 <__assert_fail@plt+0xc490>
   1e3d0:	mov	r0, #0
   1e3d4:	str	r3, [r5]
   1e3d8:	add	sp, sp, #8
   1e3dc:	ldrd	r4, [sp]
   1e3e0:	ldr	r6, [sp, #8]
   1e3e4:	add	sp, sp, #12
   1e3e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e3ec:	vldr	s15, [r4, #8]
   1e3f0:	vldr	s14, [r4, #12]
   1e3f4:	ldr	r3, [r4, #20]
   1e3f8:	vcvt.f32.u32	s15, s15
   1e3fc:	vcvt.f32.u32	s14, s14
   1e400:	vldr	s13, [r3, #8]
   1e404:	vmul.f32	s12, s13, s15
   1e408:	vcmpe.f32	s14, s12
   1e40c:	vmrs	APSR_nzcv, fpscr
   1e410:	bgt	1e458 <__assert_fail@plt+0xc510>
   1e414:	ldr	r2, [sp, #4]
   1e418:	ldr	r3, [r2]
   1e41c:	cmp	r3, #0
   1e420:	beq	1e55c <__assert_fail@plt+0xc614>
   1e424:	ldr	r3, [r4, #36]	; 0x24
   1e428:	cmp	r3, #0
   1e42c:	beq	1e580 <__assert_fail@plt+0xc638>
   1e430:	ldr	r1, [r3, #4]
   1e434:	str	r1, [r4, #36]	; 0x24
   1e438:	ldr	r1, [r4, #16]
   1e43c:	mov	r0, #1
   1e440:	ldr	ip, [r2, #4]
   1e444:	add	r1, r1, r0
   1e448:	stm	r3, {r6, ip}
   1e44c:	str	r3, [r2, #4]
   1e450:	str	r1, [r4, #16]
   1e454:	b	1e3d8 <__assert_fail@plt+0xc490>
   1e458:	movw	r2, #38540	; 0x968c
   1e45c:	movt	r2, #2
   1e460:	cmp	r3, r2
   1e464:	beq	1e598 <__assert_fail@plt+0xc650>
   1e468:	vldr	s12, [pc, #320]	; 1e5b0 <__assert_fail@plt+0xc668>
   1e46c:	vcmpe.f32	s13, s12
   1e470:	vmrs	APSR_nzcv, fpscr
   1e474:	ble	1e534 <__assert_fail@plt+0xc5ec>
   1e478:	vldr	s11, [pc, #308]	; 1e5b4 <__assert_fail@plt+0xc66c>
   1e47c:	vcmpe.f32	s13, s11
   1e480:	vmrs	APSR_nzcv, fpscr
   1e484:	bpl	1e534 <__assert_fail@plt+0xc5ec>
   1e488:	vldr	s10, [pc, #296]	; 1e5b8 <__assert_fail@plt+0xc670>
   1e48c:	vldr	s11, [r3, #12]
   1e490:	vcmpe.f32	s11, s10
   1e494:	vmrs	APSR_nzcv, fpscr
   1e498:	ble	1e534 <__assert_fail@plt+0xc5ec>
   1e49c:	vldr	s10, [r3]
   1e4a0:	vcmpe.f32	s10, #0.0
   1e4a4:	vmrs	APSR_nzcv, fpscr
   1e4a8:	blt	1e534 <__assert_fail@plt+0xc5ec>
   1e4ac:	vadd.f32	s12, s10, s12
   1e4b0:	vldr	s10, [r3, #4]
   1e4b4:	vcmpe.f32	s12, s10
   1e4b8:	vmrs	APSR_nzcv, fpscr
   1e4bc:	bpl	1e534 <__assert_fail@plt+0xc5ec>
   1e4c0:	vldr	s9, [pc, #244]	; 1e5bc <__assert_fail@plt+0xc674>
   1e4c4:	vcmpe.f32	s10, s9
   1e4c8:	vmrs	APSR_nzcv, fpscr
   1e4cc:	bhi	1e534 <__assert_fail@plt+0xc5ec>
   1e4d0:	vcmpe.f32	s13, s12
   1e4d4:	vmrs	APSR_nzcv, fpscr
   1e4d8:	ble	1e534 <__assert_fail@plt+0xc5ec>
   1e4dc:	ldrb	r3, [r3, #16]
   1e4e0:	vmul.f32	s15, s15, s11
   1e4e4:	cmp	r3, #0
   1e4e8:	beq	1e554 <__assert_fail@plt+0xc60c>
   1e4ec:	vldr	s14, [pc, #204]	; 1e5c0 <__assert_fail@plt+0xc678>
   1e4f0:	vcmpe.f32	s15, s14
   1e4f4:	vmrs	APSR_nzcv, fpscr
   1e4f8:	bge	1e590 <__assert_fail@plt+0xc648>
   1e4fc:	vcvt.u32.f32	s15, s15
   1e500:	mov	r0, r4
   1e504:	vmov	r1, s15
   1e508:	bl	1e19c <__assert_fail@plt+0xc254>
   1e50c:	cmp	r0, #0
   1e510:	beq	1e590 <__assert_fail@plt+0xc648>
   1e514:	add	r2, sp, #4
   1e518:	mov	r3, #0
   1e51c:	mov	r1, r6
   1e520:	mov	r0, r4
   1e524:	bl	1d448 <__assert_fail@plt+0xb500>
   1e528:	cmp	r0, #0
   1e52c:	beq	1e414 <__assert_fail@plt+0xc4cc>
   1e530:	bl	11f24 <abort@plt>
   1e534:	vldr	s13, [pc, #136]	; 1e5c4 <__assert_fail@plt+0xc67c>
   1e538:	str	r2, [r4, #20]
   1e53c:	vmul.f32	s12, s15, s13
   1e540:	vcmpe.f32	s14, s12
   1e544:	vmrs	APSR_nzcv, fpscr
   1e548:	ble	1e414 <__assert_fail@plt+0xc4cc>
   1e54c:	vldr	s14, [pc, #116]	; 1e5c8 <__assert_fail@plt+0xc680>
   1e550:	vmul.f32	s15, s15, s14
   1e554:	vmul.f32	s15, s15, s13
   1e558:	b	1e4ec <__assert_fail@plt+0xc5a4>
   1e55c:	ldr	r1, [r4, #12]
   1e560:	mov	r0, #1
   1e564:	ldr	r3, [r4, #16]
   1e568:	str	r6, [r2]
   1e56c:	add	r2, r1, r0
   1e570:	add	r3, r3, r0
   1e574:	str	r2, [r4, #12]
   1e578:	str	r3, [r4, #16]
   1e57c:	b	1e3d8 <__assert_fail@plt+0xc490>
   1e580:	mov	r0, #8
   1e584:	bl	262d0 <__assert_fail@plt+0x14388>
   1e588:	subs	r3, r0, #0
   1e58c:	bne	1e5a8 <__assert_fail@plt+0xc660>
   1e590:	mvn	r0, #0
   1e594:	b	1e3d8 <__assert_fail@plt+0xc490>
   1e598:	vldr	s14, [pc, #40]	; 1e5c8 <__assert_fail@plt+0xc680>
   1e59c:	vldr	s13, [pc, #32]	; 1e5c4 <__assert_fail@plt+0xc67c>
   1e5a0:	vmul.f32	s15, s15, s14
   1e5a4:	b	1e554 <__assert_fail@plt+0xc60c>
   1e5a8:	ldr	r2, [sp, #4]
   1e5ac:	b	1e438 <__assert_fail@plt+0xc4f0>
   1e5b0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e5b4:	svccc	0x00666666
   1e5b8:	svccc	0x008ccccd
   1e5bc:	svccc	0x00800000
   1e5c0:	svcmi	0x00800000
   1e5c4:	svccc	0x004ccccd
   1e5c8:	svccc	0x00b4fdf4
   1e5cc:	strd	r4, [sp, #-16]!
   1e5d0:	str	r6, [sp, #8]
   1e5d4:	subs	r6, r1, #0
   1e5d8:	str	lr, [sp, #12]
   1e5dc:	sub	sp, sp, #8
   1e5e0:	beq	1e75c <__assert_fail@plt+0xc814>
   1e5e4:	mov	r3, #0
   1e5e8:	add	r2, sp, #4
   1e5ec:	mov	r4, r0
   1e5f0:	bl	1d448 <__assert_fail@plt+0xb500>
   1e5f4:	subs	r5, r0, #0
   1e5f8:	beq	1e614 <__assert_fail@plt+0xc6cc>
   1e5fc:	mov	r0, r5
   1e600:	add	sp, sp, #8
   1e604:	ldrd	r4, [sp]
   1e608:	ldr	r6, [sp, #8]
   1e60c:	add	sp, sp, #12
   1e610:	pop	{pc}		; (ldr pc, [sp], #4)
   1e614:	vldr	s15, [r4, #8]
   1e618:	vldr	s14, [r4, #12]
   1e61c:	ldr	r3, [r4, #20]
   1e620:	vcvt.f32.u32	s15, s15
   1e624:	vcvt.f32.u32	s14, s14
   1e628:	vldr	s13, [r3, #8]
   1e62c:	vmul.f32	s12, s13, s15
   1e630:	vcmpe.f32	s14, s12
   1e634:	vmrs	APSR_nzcv, fpscr
   1e638:	bgt	1e684 <__assert_fail@plt+0xc73c>
   1e63c:	ldr	r3, [sp, #4]
   1e640:	ldr	r2, [r3]
   1e644:	cmp	r2, #0
   1e648:	beq	1e788 <__assert_fail@plt+0xc840>
   1e64c:	ldr	r0, [r4, #36]	; 0x24
   1e650:	cmp	r0, #0
   1e654:	beq	1e7ac <__assert_fail@plt+0xc864>
   1e658:	ldr	r2, [r0, #4]
   1e65c:	str	r2, [r4, #36]	; 0x24
   1e660:	ldr	r2, [r4, #16]
   1e664:	mov	r5, r6
   1e668:	ldr	r1, [r3, #4]
   1e66c:	str	r6, [r0]
   1e670:	add	r2, r2, #1
   1e674:	str	r1, [r0, #4]
   1e678:	str	r0, [r3, #4]
   1e67c:	str	r2, [r4, #16]
   1e680:	b	1e5fc <__assert_fail@plt+0xc6b4>
   1e684:	movw	r2, #38540	; 0x968c
   1e688:	movt	r2, #2
   1e68c:	cmp	r3, r2
   1e690:	beq	1e7c4 <__assert_fail@plt+0xc87c>
   1e694:	vldr	s12, [pc, #312]	; 1e7d4 <__assert_fail@plt+0xc88c>
   1e698:	vcmpe.f32	s13, s12
   1e69c:	vmrs	APSR_nzcv, fpscr
   1e6a0:	ble	1e760 <__assert_fail@plt+0xc818>
   1e6a4:	vldr	s11, [pc, #300]	; 1e7d8 <__assert_fail@plt+0xc890>
   1e6a8:	vcmpe.f32	s13, s11
   1e6ac:	vmrs	APSR_nzcv, fpscr
   1e6b0:	bpl	1e760 <__assert_fail@plt+0xc818>
   1e6b4:	vldr	s10, [pc, #288]	; 1e7dc <__assert_fail@plt+0xc894>
   1e6b8:	vldr	s11, [r3, #12]
   1e6bc:	vcmpe.f32	s11, s10
   1e6c0:	vmrs	APSR_nzcv, fpscr
   1e6c4:	ble	1e760 <__assert_fail@plt+0xc818>
   1e6c8:	vldr	s10, [r3]
   1e6cc:	vcmpe.f32	s10, #0.0
   1e6d0:	vmrs	APSR_nzcv, fpscr
   1e6d4:	blt	1e760 <__assert_fail@plt+0xc818>
   1e6d8:	vadd.f32	s12, s10, s12
   1e6dc:	vldr	s10, [r3, #4]
   1e6e0:	vcmpe.f32	s12, s10
   1e6e4:	vmrs	APSR_nzcv, fpscr
   1e6e8:	bpl	1e760 <__assert_fail@plt+0xc818>
   1e6ec:	vldr	s9, [pc, #236]	; 1e7e0 <__assert_fail@plt+0xc898>
   1e6f0:	vcmpe.f32	s10, s9
   1e6f4:	vmrs	APSR_nzcv, fpscr
   1e6f8:	bhi	1e760 <__assert_fail@plt+0xc818>
   1e6fc:	vcmpe.f32	s13, s12
   1e700:	vmrs	APSR_nzcv, fpscr
   1e704:	ble	1e760 <__assert_fail@plt+0xc818>
   1e708:	ldrb	r3, [r3, #16]
   1e70c:	vmul.f32	s15, s15, s11
   1e710:	cmp	r3, #0
   1e714:	beq	1e780 <__assert_fail@plt+0xc838>
   1e718:	vldr	s14, [pc, #196]	; 1e7e4 <__assert_fail@plt+0xc89c>
   1e71c:	vcmpe.f32	s15, s14
   1e720:	vmrs	APSR_nzcv, fpscr
   1e724:	bge	1e5fc <__assert_fail@plt+0xc6b4>
   1e728:	vcvt.u32.f32	s15, s15
   1e72c:	mov	r0, r4
   1e730:	vmov	r1, s15
   1e734:	bl	1e19c <__assert_fail@plt+0xc254>
   1e738:	cmp	r0, #0
   1e73c:	beq	1e5fc <__assert_fail@plt+0xc6b4>
   1e740:	add	r2, sp, #4
   1e744:	mov	r3, #0
   1e748:	mov	r1, r6
   1e74c:	mov	r0, r4
   1e750:	bl	1d448 <__assert_fail@plt+0xb500>
   1e754:	cmp	r0, #0
   1e758:	beq	1e63c <__assert_fail@plt+0xc6f4>
   1e75c:	bl	11f24 <abort@plt>
   1e760:	vldr	s13, [pc, #128]	; 1e7e8 <__assert_fail@plt+0xc8a0>
   1e764:	str	r2, [r4, #20]
   1e768:	vmul.f32	s12, s15, s13
   1e76c:	vcmpe.f32	s14, s12
   1e770:	vmrs	APSR_nzcv, fpscr
   1e774:	ble	1e63c <__assert_fail@plt+0xc6f4>
   1e778:	vldr	s14, [pc, #108]	; 1e7ec <__assert_fail@plt+0xc8a4>
   1e77c:	vmul.f32	s15, s15, s14
   1e780:	vmul.f32	s15, s15, s13
   1e784:	b	1e718 <__assert_fail@plt+0xc7d0>
   1e788:	ldr	r2, [r4, #12]
   1e78c:	mov	r5, r6
   1e790:	str	r6, [r3]
   1e794:	ldr	r3, [r4, #16]
   1e798:	add	r2, r2, #1
   1e79c:	add	r3, r3, #1
   1e7a0:	str	r2, [r4, #12]
   1e7a4:	str	r3, [r4, #16]
   1e7a8:	b	1e5fc <__assert_fail@plt+0xc6b4>
   1e7ac:	mov	r0, #8
   1e7b0:	bl	262d0 <__assert_fail@plt+0x14388>
   1e7b4:	cmp	r0, #0
   1e7b8:	beq	1e5fc <__assert_fail@plt+0xc6b4>
   1e7bc:	ldr	r3, [sp, #4]
   1e7c0:	b	1e660 <__assert_fail@plt+0xc718>
   1e7c4:	vldr	s14, [pc, #32]	; 1e7ec <__assert_fail@plt+0xc8a4>
   1e7c8:	vldr	s13, [pc, #24]	; 1e7e8 <__assert_fail@plt+0xc8a0>
   1e7cc:	vmul.f32	s15, s15, s14
   1e7d0:	b	1e780 <__assert_fail@plt+0xc838>
   1e7d4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e7d8:	svccc	0x00666666
   1e7dc:	svccc	0x008ccccd
   1e7e0:	svccc	0x00800000
   1e7e4:	svcmi	0x00800000
   1e7e8:	svccc	0x004ccccd
   1e7ec:	svccc	0x00b4fdf4
   1e7f0:	strd	r4, [sp, #-16]!
   1e7f4:	mov	r3, #1
   1e7f8:	mov	r4, r0
   1e7fc:	str	r6, [sp, #8]
   1e800:	str	lr, [sp, #12]
   1e804:	sub	sp, sp, #8
   1e808:	add	r2, sp, #4
   1e80c:	bl	1d448 <__assert_fail@plt+0xb500>
   1e810:	subs	r5, r0, #0
   1e814:	beq	1e834 <__assert_fail@plt+0xc8ec>
   1e818:	ldr	r2, [sp, #4]
   1e81c:	ldr	r3, [r4, #16]
   1e820:	ldr	r2, [r2]
   1e824:	sub	r3, r3, #1
   1e828:	str	r3, [r4, #16]
   1e82c:	cmp	r2, #0
   1e830:	beq	1e84c <__assert_fail@plt+0xc904>
   1e834:	mov	r0, r5
   1e838:	add	sp, sp, #8
   1e83c:	ldrd	r4, [sp]
   1e840:	ldr	r6, [sp, #8]
   1e844:	add	sp, sp, #12
   1e848:	pop	{pc}		; (ldr pc, [sp], #4)
   1e84c:	vldr	s15, [r4, #8]
   1e850:	ldr	r3, [r4, #12]
   1e854:	ldr	r2, [r4, #20]
   1e858:	vcvt.f32.u32	s15, s15
   1e85c:	sub	r3, r3, #1
   1e860:	vmov	s14, r3
   1e864:	vldr	s13, [r2]
   1e868:	str	r3, [r4, #12]
   1e86c:	vmul.f32	s12, s13, s15
   1e870:	vcvt.f32.u32	s14, s14
   1e874:	vcmpe.f32	s14, s12
   1e878:	vmrs	APSR_nzcv, fpscr
   1e87c:	bpl	1e834 <__assert_fail@plt+0xc8ec>
   1e880:	movw	r3, #38540	; 0x968c
   1e884:	movt	r3, #2
   1e888:	cmp	r2, r3
   1e88c:	beq	1e96c <__assert_fail@plt+0xca24>
   1e890:	vldr	s11, [pc, #224]	; 1e978 <__assert_fail@plt+0xca30>
   1e894:	vldr	s12, [r2, #8]
   1e898:	vcmpe.f32	s12, s11
   1e89c:	vmrs	APSR_nzcv, fpscr
   1e8a0:	ble	1e954 <__assert_fail@plt+0xca0c>
   1e8a4:	vldr	s10, [pc, #208]	; 1e97c <__assert_fail@plt+0xca34>
   1e8a8:	vcmpe.f32	s12, s10
   1e8ac:	vmrs	APSR_nzcv, fpscr
   1e8b0:	bpl	1e954 <__assert_fail@plt+0xca0c>
   1e8b4:	vldr	s10, [pc, #196]	; 1e980 <__assert_fail@plt+0xca38>
   1e8b8:	vldr	s9, [r2, #12]
   1e8bc:	vcmpe.f32	s9, s10
   1e8c0:	vmrs	APSR_nzcv, fpscr
   1e8c4:	ble	1e954 <__assert_fail@plt+0xca0c>
   1e8c8:	vcmpe.f32	s13, #0.0
   1e8cc:	vmrs	APSR_nzcv, fpscr
   1e8d0:	blt	1e954 <__assert_fail@plt+0xca0c>
   1e8d4:	vadd.f32	s13, s13, s11
   1e8d8:	vldr	s11, [r2, #4]
   1e8dc:	vcmpe.f32	s13, s11
   1e8e0:	vmrs	APSR_nzcv, fpscr
   1e8e4:	bpl	1e954 <__assert_fail@plt+0xca0c>
   1e8e8:	vldr	s10, [pc, #148]	; 1e984 <__assert_fail@plt+0xca3c>
   1e8ec:	vcmpe.f32	s11, s10
   1e8f0:	vmrs	APSR_nzcv, fpscr
   1e8f4:	bhi	1e954 <__assert_fail@plt+0xca0c>
   1e8f8:	vcmpe.f32	s12, s13
   1e8fc:	vmrs	APSR_nzcv, fpscr
   1e900:	ble	1e954 <__assert_fail@plt+0xca0c>
   1e904:	ldrb	r3, [r2, #16]
   1e908:	vmul.f32	s15, s15, s11
   1e90c:	cmp	r3, #0
   1e910:	beq	1e970 <__assert_fail@plt+0xca28>
   1e914:	vcvt.u32.f32	s15, s15
   1e918:	mov	r0, r4
   1e91c:	vmov	r1, s15
   1e920:	bl	1e19c <__assert_fail@plt+0xc254>
   1e924:	cmp	r0, #0
   1e928:	bne	1e834 <__assert_fail@plt+0xc8ec>
   1e92c:	ldr	r0, [r4, #36]	; 0x24
   1e930:	cmp	r0, #0
   1e934:	beq	1e948 <__assert_fail@plt+0xca00>
   1e938:	ldr	r6, [r0, #4]
   1e93c:	bl	1d29c <__assert_fail@plt+0xb354>
   1e940:	subs	r0, r6, #0
   1e944:	bne	1e938 <__assert_fail@plt+0xc9f0>
   1e948:	mov	r3, #0
   1e94c:	str	r3, [r4, #36]	; 0x24
   1e950:	b	1e834 <__assert_fail@plt+0xc8ec>
   1e954:	vldr	s13, [pc, #44]	; 1e988 <__assert_fail@plt+0xca40>
   1e958:	str	r3, [r4, #20]
   1e95c:	vmul.f32	s13, s15, s13
   1e960:	vcmpe.f32	s14, s13
   1e964:	vmrs	APSR_nzcv, fpscr
   1e968:	bpl	1e834 <__assert_fail@plt+0xc8ec>
   1e96c:	vldr	s12, [pc, #24]	; 1e98c <__assert_fail@plt+0xca44>
   1e970:	vmul.f32	s15, s15, s12
   1e974:	b	1e914 <__assert_fail@plt+0xc9cc>
   1e978:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e97c:	svccc	0x00666666
   1e980:	svccc	0x008ccccd
   1e984:	svccc	0x00800000
   1e988:	andeq	r0, r0, r0
   1e98c:	svccc	0x004ccccd
   1e990:	strd	r4, [sp, #-16]!
   1e994:	mov	r3, #1
   1e998:	mov	r4, r0
   1e99c:	str	r6, [sp, #8]
   1e9a0:	str	lr, [sp, #12]
   1e9a4:	sub	sp, sp, #8
   1e9a8:	add	r2, sp, #4
   1e9ac:	bl	1d448 <__assert_fail@plt+0xb500>
   1e9b0:	subs	r5, r0, #0
   1e9b4:	beq	1e9d4 <__assert_fail@plt+0xca8c>
   1e9b8:	ldr	r2, [sp, #4]
   1e9bc:	ldr	r3, [r4, #16]
   1e9c0:	ldr	r2, [r2]
   1e9c4:	sub	r3, r3, #1
   1e9c8:	str	r3, [r4, #16]
   1e9cc:	cmp	r2, #0
   1e9d0:	beq	1e9ec <__assert_fail@plt+0xcaa4>
   1e9d4:	mov	r0, r5
   1e9d8:	add	sp, sp, #8
   1e9dc:	ldrd	r4, [sp]
   1e9e0:	ldr	r6, [sp, #8]
   1e9e4:	add	sp, sp, #12
   1e9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9ec:	vldr	s15, [r4, #8]
   1e9f0:	ldr	r3, [r4, #12]
   1e9f4:	ldr	r2, [r4, #20]
   1e9f8:	vcvt.f32.u32	s15, s15
   1e9fc:	sub	r3, r3, #1
   1ea00:	vmov	s14, r3
   1ea04:	vldr	s13, [r2]
   1ea08:	str	r3, [r4, #12]
   1ea0c:	vmul.f32	s12, s13, s15
   1ea10:	vcvt.f32.u32	s14, s14
   1ea14:	vcmpe.f32	s14, s12
   1ea18:	vmrs	APSR_nzcv, fpscr
   1ea1c:	bpl	1e9d4 <__assert_fail@plt+0xca8c>
   1ea20:	movw	r3, #38540	; 0x968c
   1ea24:	movt	r3, #2
   1ea28:	cmp	r2, r3
   1ea2c:	beq	1eb0c <__assert_fail@plt+0xcbc4>
   1ea30:	vldr	s11, [pc, #224]	; 1eb18 <__assert_fail@plt+0xcbd0>
   1ea34:	vldr	s12, [r2, #8]
   1ea38:	vcmpe.f32	s12, s11
   1ea3c:	vmrs	APSR_nzcv, fpscr
   1ea40:	ble	1eaf4 <__assert_fail@plt+0xcbac>
   1ea44:	vldr	s10, [pc, #208]	; 1eb1c <__assert_fail@plt+0xcbd4>
   1ea48:	vcmpe.f32	s12, s10
   1ea4c:	vmrs	APSR_nzcv, fpscr
   1ea50:	bpl	1eaf4 <__assert_fail@plt+0xcbac>
   1ea54:	vldr	s10, [pc, #196]	; 1eb20 <__assert_fail@plt+0xcbd8>
   1ea58:	vldr	s9, [r2, #12]
   1ea5c:	vcmpe.f32	s9, s10
   1ea60:	vmrs	APSR_nzcv, fpscr
   1ea64:	ble	1eaf4 <__assert_fail@plt+0xcbac>
   1ea68:	vcmpe.f32	s13, #0.0
   1ea6c:	vmrs	APSR_nzcv, fpscr
   1ea70:	blt	1eaf4 <__assert_fail@plt+0xcbac>
   1ea74:	vadd.f32	s13, s13, s11
   1ea78:	vldr	s11, [r2, #4]
   1ea7c:	vcmpe.f32	s13, s11
   1ea80:	vmrs	APSR_nzcv, fpscr
   1ea84:	bpl	1eaf4 <__assert_fail@plt+0xcbac>
   1ea88:	vldr	s10, [pc, #148]	; 1eb24 <__assert_fail@plt+0xcbdc>
   1ea8c:	vcmpe.f32	s11, s10
   1ea90:	vmrs	APSR_nzcv, fpscr
   1ea94:	bhi	1eaf4 <__assert_fail@plt+0xcbac>
   1ea98:	vcmpe.f32	s12, s13
   1ea9c:	vmrs	APSR_nzcv, fpscr
   1eaa0:	ble	1eaf4 <__assert_fail@plt+0xcbac>
   1eaa4:	ldrb	r3, [r2, #16]
   1eaa8:	vmul.f32	s15, s15, s11
   1eaac:	cmp	r3, #0
   1eab0:	beq	1eb10 <__assert_fail@plt+0xcbc8>
   1eab4:	vcvt.u32.f32	s15, s15
   1eab8:	mov	r0, r4
   1eabc:	vmov	r1, s15
   1eac0:	bl	1e19c <__assert_fail@plt+0xc254>
   1eac4:	cmp	r0, #0
   1eac8:	bne	1e9d4 <__assert_fail@plt+0xca8c>
   1eacc:	ldr	r0, [r4, #36]	; 0x24
   1ead0:	cmp	r0, #0
   1ead4:	beq	1eae8 <__assert_fail@plt+0xcba0>
   1ead8:	ldr	r6, [r0, #4]
   1eadc:	bl	1d29c <__assert_fail@plt+0xb354>
   1eae0:	subs	r0, r6, #0
   1eae4:	bne	1ead8 <__assert_fail@plt+0xcb90>
   1eae8:	mov	r3, #0
   1eaec:	str	r3, [r4, #36]	; 0x24
   1eaf0:	b	1e9d4 <__assert_fail@plt+0xca8c>
   1eaf4:	vldr	s13, [pc, #44]	; 1eb28 <__assert_fail@plt+0xcbe0>
   1eaf8:	str	r3, [r4, #20]
   1eafc:	vmul.f32	s13, s15, s13
   1eb00:	vcmpe.f32	s14, s13
   1eb04:	vmrs	APSR_nzcv, fpscr
   1eb08:	bpl	1e9d4 <__assert_fail@plt+0xca8c>
   1eb0c:	vldr	s12, [pc, #24]	; 1eb2c <__assert_fail@plt+0xcbe4>
   1eb10:	vmul.f32	s15, s15, s12
   1eb14:	b	1eab4 <__assert_fail@plt+0xcb6c>
   1eb18:	stclcc	12, cr12, [ip, #820]	; 0x334
   1eb1c:	svccc	0x00666666
   1eb20:	svccc	0x008ccccd
   1eb24:	svccc	0x00800000
   1eb28:	andeq	r0, r0, r0
   1eb2c:	svccc	0x004ccccd
   1eb30:	mov	r0, #0
   1eb34:	bx	lr
   1eb38:	strd	r4, [sp, #-16]!
   1eb3c:	mov	r5, r1
   1eb40:	str	r6, [sp, #8]
   1eb44:	mov	r6, r0
   1eb48:	mov	r0, #16
   1eb4c:	str	lr, [sp, #12]
   1eb50:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   1eb54:	cmp	r5, #0
   1eb58:	mov	r4, r0
   1eb5c:	moveq	r5, #1
   1eb60:	mov	r1, #4
   1eb64:	mov	r0, r5
   1eb68:	bl	24d54 <__assert_fail@plt+0x12e0c>
   1eb6c:	mov	r2, #0
   1eb70:	movw	r3, #60208	; 0xeb30
   1eb74:	movt	r3, #1
   1eb78:	cmp	r6, r2
   1eb7c:	mov	r1, r0
   1eb80:	moveq	r6, r3
   1eb84:	mov	r0, r4
   1eb88:	stm	r4, {r1, r5}
   1eb8c:	str	r2, [r4, #8]
   1eb90:	str	r6, [r4, #12]
   1eb94:	ldrd	r4, [sp]
   1eb98:	str	r2, [r1]
   1eb9c:	ldr	r6, [sp, #8]
   1eba0:	add	sp, sp, #12
   1eba4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eba8:	str	r4, [sp, #-8]!
   1ebac:	mov	r4, r0
   1ebb0:	ldr	r0, [r0]
   1ebb4:	str	lr, [sp, #4]
   1ebb8:	bl	1d29c <__assert_fail@plt+0xb354>
   1ebbc:	mov	r0, r4
   1ebc0:	ldr	r4, [sp]
   1ebc4:	ldr	lr, [sp, #4]
   1ebc8:	add	sp, sp, #8
   1ebcc:	b	1d29c <__assert_fail@plt+0xb354>
   1ebd0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ebd4:	mov	r5, r0
   1ebd8:	ldm	r0, {r0, r3, r4}
   1ebdc:	strd	r6, [sp, #8]
   1ebe0:	mov	r6, r1
   1ebe4:	str	r8, [sp, #16]
   1ebe8:	sub	r3, r3, #1
   1ebec:	str	lr, [sp, #20]
   1ebf0:	cmp	r3, r4
   1ebf4:	bls	1ec70 <__assert_fail@plt+0xcd28>
   1ebf8:	add	r4, r4, #1
   1ebfc:	cmp	r4, #1
   1ec00:	str	r4, [r5, #8]
   1ec04:	str	r6, [r0, r4, lsl #2]
   1ec08:	ldr	r6, [r5]
   1ec0c:	ldr	r8, [r5, #12]
   1ec10:	ldr	r7, [r6, r4, lsl #2]
   1ec14:	bne	1ec30 <__assert_fail@plt+0xcce8>
   1ec18:	b	1ec68 <__assert_fail@plt+0xcd20>
   1ec1c:	ldr	r3, [r6, r5, lsl #2]
   1ec20:	cmp	r5, #1
   1ec24:	str	r3, [r6, r4, lsl #2]
   1ec28:	mov	r4, r5
   1ec2c:	beq	1ec68 <__assert_fail@plt+0xcd20>
   1ec30:	lsr	r5, r4, #1
   1ec34:	mov	r1, r7
   1ec38:	ldr	r0, [r6, r5, lsl #2]
   1ec3c:	blx	r8
   1ec40:	cmp	r0, #0
   1ec44:	add	r3, r6, r4, lsl #2
   1ec48:	ble	1ec1c <__assert_fail@plt+0xccd4>
   1ec4c:	ldrd	r4, [sp]
   1ec50:	mov	r0, #0
   1ec54:	ldr	r8, [sp, #16]
   1ec58:	str	r7, [r3]
   1ec5c:	ldrd	r6, [sp, #8]
   1ec60:	add	sp, sp, #20
   1ec64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec68:	add	r3, r6, #4
   1ec6c:	b	1ec4c <__assert_fail@plt+0xcd04>
   1ec70:	mov	r2, #4
   1ec74:	add	r1, r5, r2
   1ec78:	bl	24e44 <__assert_fail@plt+0x12efc>
   1ec7c:	str	r0, [r5]
   1ec80:	ldr	r4, [r5, #8]
   1ec84:	b	1ebf8 <__assert_fail@plt+0xccb0>
   1ec88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ec8c:	strd	r6, [sp, #8]
   1ec90:	strd	r8, [sp, #16]
   1ec94:	ldr	r8, [r0, #8]
   1ec98:	strd	sl, [sp, #24]
   1ec9c:	str	lr, [sp, #32]
   1eca0:	sub	sp, sp, #20
   1eca4:	cmp	r8, #0
   1eca8:	beq	1ed58 <__assert_fail@plt+0xce10>
   1ecac:	ldr	r3, [r0]
   1ecb0:	sub	r9, r8, #1
   1ecb4:	lsrs	r2, r9, #1
   1ecb8:	str	r2, [sp, #4]
   1ecbc:	ldr	r2, [r3, r8, lsl #2]
   1ecc0:	ldr	r8, [r3, #4]
   1ecc4:	str	r9, [r0, #8]
   1ecc8:	str	r2, [r3, #4]
   1eccc:	ldr	r4, [r0]
   1ecd0:	ldr	sl, [r0, #12]
   1ecd4:	ldr	fp, [r4, #4]
   1ecd8:	beq	1ed84 <__assert_fail@plt+0xce3c>
   1ecdc:	mov	r5, #1
   1ece0:	str	r9, [sp, #8]
   1ece4:	str	r8, [sp, #12]
   1ece8:	b	1ed04 <__assert_fail@plt+0xcdbc>
   1ecec:	ldr	r2, [sp, #4]
   1ecf0:	ldr	r3, [r7]
   1ecf4:	cmp	r6, r2
   1ecf8:	str	r3, [r4, r5, lsl #2]
   1ecfc:	mov	r5, r6
   1ed00:	bhi	1ed78 <__assert_fail@plt+0xce30>
   1ed04:	ldr	r3, [sp, #8]
   1ed08:	lsl	r6, r5, #1
   1ed0c:	add	r7, r4, r5, lsl #3
   1ed10:	add	r8, r6, #1
   1ed14:	add	r9, r4, r8, lsl #2
   1ed18:	cmp	r3, r6
   1ed1c:	bls	1ed38 <__assert_fail@plt+0xcdf0>
   1ed20:	ldr	r1, [r4, r8, lsl #2]
   1ed24:	ldr	r0, [r4, r5, lsl #3]
   1ed28:	blx	sl
   1ed2c:	cmp	r0, #0
   1ed30:	movlt	r7, r9
   1ed34:	movlt	r6, r8
   1ed38:	mov	r1, fp
   1ed3c:	ldr	r0, [r7]
   1ed40:	blx	sl
   1ed44:	cmp	r0, #0
   1ed48:	add	r3, r4, r5, lsl #2
   1ed4c:	bgt	1ecec <__assert_fail@plt+0xcda4>
   1ed50:	ldr	r8, [sp, #12]
   1ed54:	str	fp, [r3]
   1ed58:	mov	r0, r8
   1ed5c:	add	sp, sp, #20
   1ed60:	ldrd	r4, [sp]
   1ed64:	ldrd	r6, [sp, #8]
   1ed68:	ldrd	r8, [sp, #16]
   1ed6c:	ldrd	sl, [sp, #24]
   1ed70:	add	sp, sp, #32
   1ed74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed78:	mov	r3, r7
   1ed7c:	ldr	r8, [sp, #12]
   1ed80:	b	1ed54 <__assert_fail@plt+0xce0c>
   1ed84:	add	r3, r4, #4
   1ed88:	b	1ed54 <__assert_fail@plt+0xce0c>
   1ed8c:	mov	r3, #0
   1ed90:	subs	ip, r0, #0
   1ed94:	add	r0, r1, #11
   1ed98:	strb	r3, [r1, #11]
   1ed9c:	movwge	r1, #52429	; 0xcccd
   1eda0:	movtge	r1, #52428	; 0xcccc
   1eda4:	blt	1edcc <__assert_fail@plt+0xce84>
   1eda8:	umull	r2, r3, r1, ip
   1edac:	lsr	r3, r3, #3
   1edb0:	add	r2, r3, r3, lsl #2
   1edb4:	sub	r2, ip, r2, lsl #1
   1edb8:	subs	ip, r3, #0
   1edbc:	add	r3, r2, #48	; 0x30
   1edc0:	strb	r3, [r0, #-1]!
   1edc4:	bne	1eda8 <__assert_fail@plt+0xce60>
   1edc8:	bx	lr
   1edcc:	push	{lr}		; (str lr, [sp, #-4]!)
   1edd0:	movw	lr, #26215	; 0x6667
   1edd4:	movt	lr, #26214	; 0x6666
   1edd8:	b	1ede0 <__assert_fail@plt+0xce98>
   1eddc:	mov	r0, r1
   1ede0:	smull	r3, r2, lr, ip
   1ede4:	sub	r1, r0, #1
   1ede8:	asr	r3, ip, #31
   1edec:	rsb	r3, r3, r2, asr #2
   1edf0:	add	r2, r3, r3, lsl #2
   1edf4:	sub	r2, ip, r2, lsl #1
   1edf8:	subs	ip, r3, #0
   1edfc:	rsb	r3, r2, #48	; 0x30
   1ee00:	strb	r3, [r0, #-1]
   1ee04:	bne	1eddc <__assert_fail@plt+0xce94>
   1ee08:	mov	r3, #45	; 0x2d
   1ee0c:	sub	r0, r0, #2
   1ee10:	strb	r3, [r1, #-1]
   1ee14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee18:	mov	r3, #0
   1ee1c:	add	ip, r1, #10
   1ee20:	push	{lr}		; (str lr, [sp, #-4]!)
   1ee24:	movw	lr, #52429	; 0xcccd
   1ee28:	movt	lr, #52428	; 0xcccc
   1ee2c:	strb	r3, [r1, #10]
   1ee30:	umull	r3, r2, lr, r0
   1ee34:	cmp	r0, #9
   1ee38:	lsr	r2, r2, #3
   1ee3c:	add	r3, r2, r2, lsl #2
   1ee40:	sub	r3, r0, r3, lsl #1
   1ee44:	mov	r0, r2
   1ee48:	add	r3, r3, #48	; 0x30
   1ee4c:	strb	r3, [ip, #-1]!
   1ee50:	bhi	1ee30 <__assert_fail@plt+0xcee8>
   1ee54:	mov	r0, ip
   1ee58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee5c:	mov	r3, #0
   1ee60:	strd	r4, [sp, #-16]!
   1ee64:	mov	r4, r0
   1ee68:	mov	r5, r1
   1ee6c:	str	r6, [sp, #8]
   1ee70:	add	r6, r2, #20
   1ee74:	str	lr, [sp, #12]
   1ee78:	strb	r3, [r2, #20]
   1ee7c:	mov	r0, r4
   1ee80:	mov	r1, r5
   1ee84:	mov	r2, #10
   1ee88:	mov	r3, #0
   1ee8c:	bl	27310 <_obstack_memory_used@@Base+0x438>
   1ee90:	add	ip, r2, #48	; 0x30
   1ee94:	mov	r0, r4
   1ee98:	mov	r1, r5
   1ee9c:	mov	r2, #10
   1eea0:	mov	r3, #0
   1eea4:	strb	ip, [r6, #-1]!
   1eea8:	bl	27310 <_obstack_memory_used@@Base+0x438>
   1eeac:	cmp	r5, #0
   1eeb0:	mov	r5, r1
   1eeb4:	cmpeq	r4, #9
   1eeb8:	mov	r4, r0
   1eebc:	bhi	1ee7c <__assert_fail@plt+0xcf34>
   1eec0:	mov	r0, r6
   1eec4:	ldrd	r4, [sp]
   1eec8:	ldr	r6, [sp, #8]
   1eecc:	add	sp, sp, #12
   1eed0:	pop	{pc}		; (ldr pc, [sp], #4)
   1eed4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1eed8:	mov	r4, r0
   1eedc:	strd	r6, [sp, #8]
   1eee0:	add	r6, r0, r1
   1eee4:	strd	r8, [sp, #16]
   1eee8:	mov	r9, r2
   1eeec:	strd	sl, [sp, #24]
   1eef0:	str	lr, [sp, #32]
   1eef4:	sub	sp, sp, #20
   1eef8:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1eefc:	cmp	r0, #1
   1ef00:	bls	1f098 <__assert_fail@plt+0xd150>
   1ef04:	cmp	r4, r6
   1ef08:	bcs	1f104 <__assert_fail@plt+0xd1bc>
   1ef0c:	and	sl, r9, #2
   1ef10:	mov	r5, #0
   1ef14:	and	r9, r9, #1
   1ef18:	mvn	r8, #-2147483648	; 0x80000000
   1ef1c:	b	1ef44 <__assert_fail@plt+0xcffc>
   1ef20:	cmp	r3, #37	; 0x25
   1ef24:	bcs	1ef34 <__assert_fail@plt+0xcfec>
   1ef28:	sub	r3, r3, #32
   1ef2c:	cmp	r3, #3
   1ef30:	bhi	1ef6c <__assert_fail@plt+0xd024>
   1ef34:	add	r4, r4, #1
   1ef38:	add	r5, r5, #1
   1ef3c:	cmp	r4, r6
   1ef40:	bcs	1f00c <__assert_fail@plt+0xd0c4>
   1ef44:	ldrb	r3, [r4]
   1ef48:	cmp	r3, #63	; 0x3f
   1ef4c:	bls	1ef20 <__assert_fail@plt+0xcfd8>
   1ef50:	cmp	r3, #65	; 0x41
   1ef54:	bcc	1ef6c <__assert_fail@plt+0xd024>
   1ef58:	cmp	r3, #95	; 0x5f
   1ef5c:	bls	1ef34 <__assert_fail@plt+0xcfec>
   1ef60:	sub	r3, r3, #97	; 0x61
   1ef64:	cmp	r3, #29
   1ef68:	bls	1ef34 <__assert_fail@plt+0xcfec>
   1ef6c:	mov	r2, #0
   1ef70:	mov	r3, #0
   1ef74:	cmp	sl, #0
   1ef78:	add	fp, sp, #4
   1ef7c:	strd	r2, [sp, #8]
   1ef80:	beq	1efa8 <__assert_fail@plt+0xd060>
   1ef84:	b	1f044 <__assert_fail@plt+0xd0fc>
   1ef88:	cmp	r3, r0
   1ef8c:	add	r5, r5, r0
   1ef90:	blt	1f008 <__assert_fail@plt+0xd0c0>
   1ef94:	add	r0, sp, #8
   1ef98:	add	r4, r4, r7
   1ef9c:	bl	11af8 <mbsinit@plt>
   1efa0:	cmp	r0, #0
   1efa4:	bne	1ef3c <__assert_fail@plt+0xcff4>
   1efa8:	add	r3, sp, #8
   1efac:	sub	r2, r6, r4
   1efb0:	mov	r1, r4
   1efb4:	mov	r0, fp
   1efb8:	bl	26810 <__assert_fail@plt+0x148c8>
   1efbc:	cmn	r0, #1
   1efc0:	mov	r7, r0
   1efc4:	beq	1f0e4 <__assert_fail@plt+0xd19c>
   1efc8:	cmn	r0, #2
   1efcc:	beq	1f0f0 <__assert_fail@plt+0xd1a8>
   1efd0:	cmp	r0, #0
   1efd4:	ldr	r0, [sp, #4]
   1efd8:	moveq	r7, #1
   1efdc:	bl	11a74 <wcwidth@plt>
   1efe0:	cmp	r0, #0
   1efe4:	sub	r3, r8, r5
   1efe8:	bge	1ef88 <__assert_fail@plt+0xd040>
   1efec:	ldr	r0, [sp, #4]
   1eff0:	bl	11bc4 <iswcntrl@plt>
   1eff4:	cmp	r0, #0
   1eff8:	bne	1ef94 <__assert_fail@plt+0xd04c>
   1effc:	cmn	r5, #-2147483647	; 0x80000001
   1f000:	add	r5, r5, #1
   1f004:	bne	1ef94 <__assert_fail@plt+0xd04c>
   1f008:	mvn	r5, #-2147483648	; 0x80000000
   1f00c:	mov	r0, r5
   1f010:	add	sp, sp, #20
   1f014:	ldrd	r4, [sp]
   1f018:	ldrd	r6, [sp, #8]
   1f01c:	ldrd	r8, [sp, #16]
   1f020:	ldrd	sl, [sp, #24]
   1f024:	add	sp, sp, #32
   1f028:	pop	{pc}		; (ldr pc, [sp], #4)
   1f02c:	cmp	r3, r2
   1f030:	add	r4, r4, r7
   1f034:	bgt	1f008 <__assert_fail@plt+0xd0c0>
   1f038:	bl	11af8 <mbsinit@plt>
   1f03c:	cmp	r0, #0
   1f040:	bne	1ef3c <__assert_fail@plt+0xcff4>
   1f044:	add	r3, sp, #8
   1f048:	sub	r2, r6, r4
   1f04c:	mov	r1, r4
   1f050:	mov	r0, fp
   1f054:	bl	26810 <__assert_fail@plt+0x148c8>
   1f058:	cmn	r0, #1
   1f05c:	mov	r7, r0
   1f060:	beq	1f0e4 <__assert_fail@plt+0xd19c>
   1f064:	cmn	r0, #2
   1f068:	beq	1f0f0 <__assert_fail@plt+0xd1a8>
   1f06c:	cmp	r0, #0
   1f070:	ldr	r0, [sp, #4]
   1f074:	moveq	r7, #1
   1f078:	bl	11a74 <wcwidth@plt>
   1f07c:	subs	r3, r0, #0
   1f080:	sub	r2, r8, r5
   1f084:	add	r0, sp, #8
   1f088:	add	r5, r5, r3
   1f08c:	bge	1f02c <__assert_fail@plt+0xd0e4>
   1f090:	mvn	r5, #0
   1f094:	b	1f00c <__assert_fail@plt+0xd0c4>
   1f098:	cmp	r4, r6
   1f09c:	bcs	1f104 <__assert_fail@plt+0xd1bc>
   1f0a0:	bl	11d2c <__ctype_b_loc@plt>
   1f0a4:	ands	r5, r9, #2
   1f0a8:	ldr	r2, [r0]
   1f0ac:	bne	1f10c <__assert_fail@plt+0xd1c4>
   1f0b0:	ldrb	r3, [r4], #1
   1f0b4:	lsl	r3, r3, #1
   1f0b8:	ldrh	r3, [r2, r3]
   1f0bc:	tst	r3, #16384	; 0x4000
   1f0c0:	bne	1f0cc <__assert_fail@plt+0xd184>
   1f0c4:	tst	r3, #2
   1f0c8:	bne	1f0d8 <__assert_fail@plt+0xd190>
   1f0cc:	cmn	r5, #-2147483647	; 0x80000001
   1f0d0:	beq	1f00c <__assert_fail@plt+0xd0c4>
   1f0d4:	add	r5, r5, #1
   1f0d8:	cmp	r6, r4
   1f0dc:	bne	1f0b0 <__assert_fail@plt+0xd168>
   1f0e0:	b	1f00c <__assert_fail@plt+0xd0c4>
   1f0e4:	cmp	r9, #0
   1f0e8:	beq	1ef34 <__assert_fail@plt+0xcfec>
   1f0ec:	b	1f090 <__assert_fail@plt+0xd148>
   1f0f0:	cmp	r9, #0
   1f0f4:	bne	1f090 <__assert_fail@plt+0xd148>
   1f0f8:	add	r5, r5, #1
   1f0fc:	mov	r4, r6
   1f100:	b	1ef3c <__assert_fail@plt+0xcff4>
   1f104:	mov	r5, #0
   1f108:	b	1f00c <__assert_fail@plt+0xd0c4>
   1f10c:	mov	r5, #0
   1f110:	b	1f128 <__assert_fail@plt+0xd1e0>
   1f114:	cmn	r5, #-2147483647	; 0x80000001
   1f118:	beq	1f00c <__assert_fail@plt+0xd0c4>
   1f11c:	cmp	r6, r4
   1f120:	add	r5, r5, #1
   1f124:	beq	1f00c <__assert_fail@plt+0xd0c4>
   1f128:	ldrb	r3, [r4], #1
   1f12c:	lsl	r3, r3, #1
   1f130:	ldrh	r3, [r2, r3]
   1f134:	tst	r3, #16384	; 0x4000
   1f138:	beq	1f090 <__assert_fail@plt+0xd148>
   1f13c:	b	1f114 <__assert_fail@plt+0xd1cc>
   1f140:	strd	r4, [sp, #-16]!
   1f144:	mov	r5, r1
   1f148:	mov	r4, r0
   1f14c:	str	r6, [sp, #8]
   1f150:	str	lr, [sp, #12]
   1f154:	bl	11d50 <strlen@plt>
   1f158:	mov	r1, r0
   1f15c:	mov	r2, r5
   1f160:	ldr	r6, [sp, #8]
   1f164:	mov	r0, r4
   1f168:	ldrd	r4, [sp]
   1f16c:	ldr	lr, [sp, #12]
   1f170:	add	sp, sp, #16
   1f174:	b	1eed4 <__assert_fail@plt+0xcf8c>
   1f178:	ldrb	r3, [r0]
   1f17c:	cmp	r3, #0
   1f180:	beq	1f1a8 <__assert_fail@plt+0xd260>
   1f184:	cmp	r3, #9
   1f188:	bcc	1f1b0 <__assert_fail@plt+0xd268>
   1f18c:	cmp	r3, #13
   1f190:	bls	1f19c <__assert_fail@plt+0xd254>
   1f194:	cmp	r3, #32
   1f198:	bne	1f1b0 <__assert_fail@plt+0xd268>
   1f19c:	ldrb	r3, [r0, #1]!
   1f1a0:	cmp	r3, #0
   1f1a4:	bne	1f184 <__assert_fail@plt+0xd23c>
   1f1a8:	mov	r0, #0
   1f1ac:	bx	lr
   1f1b0:	sub	r3, r3, #48	; 0x30
   1f1b4:	cmp	r3, #9
   1f1b8:	bhi	1f1a8 <__assert_fail@plt+0xd260>
   1f1bc:	mov	r3, #0
   1f1c0:	push	{lr}		; (str lr, [sp, #-4]!)
   1f1c4:	sub	sp, sp, #12
   1f1c8:	mov	r2, #10
   1f1cc:	add	r1, sp, #4
   1f1d0:	str	r3, [sp, #4]
   1f1d4:	bl	11d44 <strtoul@plt>
   1f1d8:	ldr	r2, [sp, #4]
   1f1dc:	cmp	r2, #0
   1f1e0:	beq	1f214 <__assert_fail@plt+0xd2cc>
   1f1e4:	ldrb	r3, [r2]
   1f1e8:	cmp	r3, #0
   1f1ec:	beq	1f218 <__assert_fail@plt+0xd2d0>
   1f1f0:	cmp	r3, #9
   1f1f4:	add	r2, r2, #1
   1f1f8:	bcc	1f20c <__assert_fail@plt+0xd2c4>
   1f1fc:	cmp	r3, #13
   1f200:	bls	1f220 <__assert_fail@plt+0xd2d8>
   1f204:	cmp	r3, #32
   1f208:	beq	1f220 <__assert_fail@plt+0xd2d8>
   1f20c:	cmp	r3, #44	; 0x2c
   1f210:	beq	1f218 <__assert_fail@plt+0xd2d0>
   1f214:	mov	r0, #0
   1f218:	add	sp, sp, #12
   1f21c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f220:	str	r2, [sp, #4]
   1f224:	ldrb	r3, [r2]
   1f228:	cmp	r3, #0
   1f22c:	bne	1f1f0 <__assert_fail@plt+0xd2a8>
   1f230:	b	1f218 <__assert_fail@plt+0xd2d0>
   1f234:	cmp	r0, #2
   1f238:	strd	r4, [sp, #-12]!
   1f23c:	str	lr, [sp, #8]
   1f240:	sub	sp, sp, #132	; 0x84
   1f244:	beq	1f288 <__assert_fail@plt+0xd340>
   1f248:	cmp	r0, #1
   1f24c:	beq	1f38c <__assert_fail@plt+0xd444>
   1f250:	mov	r0, #83	; 0x53
   1f254:	bl	11b70 <sysconf@plt>
   1f258:	sub	r3, r0, #1
   1f25c:	mov	r4, r0
   1f260:	cmp	r3, #1
   1f264:	bls	1f308 <__assert_fail@plt+0xd3c0>
   1f268:	cmp	r0, #0
   1f26c:	movgt	r4, r0
   1f270:	movle	r4, #1
   1f274:	mov	r0, r4
   1f278:	add	sp, sp, #132	; 0x84
   1f27c:	ldrd	r4, [sp]
   1f280:	add	sp, sp, #8
   1f284:	pop	{pc}		; (ldr pc, [sp], #4)
   1f288:	movw	r0, #38668	; 0x970c
   1f28c:	movt	r0, #2
   1f290:	bl	11cb4 <getenv@plt>
   1f294:	cmp	r0, #0
   1f298:	beq	1f36c <__assert_fail@plt+0xd424>
   1f29c:	bl	1f178 <__assert_fail@plt+0xd230>
   1f2a0:	mov	r5, r0
   1f2a4:	movw	r0, #38684	; 0x971c
   1f2a8:	movt	r0, #2
   1f2ac:	bl	11cb4 <getenv@plt>
   1f2b0:	cmp	r0, #0
   1f2b4:	mvneq	r4, #0
   1f2b8:	beq	1f2c8 <__assert_fail@plt+0xd380>
   1f2bc:	bl	1f178 <__assert_fail@plt+0xd230>
   1f2c0:	subs	r4, r0, #0
   1f2c4:	mvneq	r4, #0
   1f2c8:	cmp	r5, #0
   1f2cc:	bne	1f340 <__assert_fail@plt+0xd3f8>
   1f2d0:	mov	r1, #128	; 0x80
   1f2d4:	mov	r2, sp
   1f2d8:	mov	r0, #0
   1f2dc:	bl	11ed0 <sched_getaffinity@plt>
   1f2e0:	cmp	r0, #0
   1f2e4:	beq	1f34c <__assert_fail@plt+0xd404>
   1f2e8:	mov	r0, #84	; 0x54
   1f2ec:	bl	11b70 <sysconf@plt>
   1f2f0:	cmp	r0, #0
   1f2f4:	movle	r4, #1
   1f2f8:	ble	1f274 <__assert_fail@plt+0xd32c>
   1f2fc:	cmp	r0, r4
   1f300:	movcc	r4, r0
   1f304:	b	1f274 <__assert_fail@plt+0xd32c>
   1f308:	mov	r1, #128	; 0x80
   1f30c:	mov	r2, sp
   1f310:	mov	r0, #0
   1f314:	bl	11ed0 <sched_getaffinity@plt>
   1f318:	cmp	r0, #0
   1f31c:	bne	1f274 <__assert_fail@plt+0xd32c>
   1f320:	mov	r1, sp
   1f324:	mov	r0, #128	; 0x80
   1f328:	bl	11b10 <__sched_cpucount@plt>
   1f32c:	cmp	r0, #0
   1f330:	beq	1f274 <__assert_fail@plt+0xd32c>
   1f334:	cmp	r4, r0
   1f338:	bcc	1f268 <__assert_fail@plt+0xd320>
   1f33c:	b	1f274 <__assert_fail@plt+0xd32c>
   1f340:	cmp	r4, r5
   1f344:	movcs	r4, r5
   1f348:	b	1f274 <__assert_fail@plt+0xd32c>
   1f34c:	mov	r1, sp
   1f350:	mov	r0, #128	; 0x80
   1f354:	bl	11b10 <__sched_cpucount@plt>
   1f358:	cmp	r0, #0
   1f35c:	beq	1f2e8 <__assert_fail@plt+0xd3a0>
   1f360:	cmp	r4, r0
   1f364:	movcs	r4, r0
   1f368:	b	1f274 <__assert_fail@plt+0xd32c>
   1f36c:	movw	r0, #38684	; 0x971c
   1f370:	movt	r0, #2
   1f374:	bl	11cb4 <getenv@plt>
   1f378:	cmp	r0, #0
   1f37c:	beq	1f38c <__assert_fail@plt+0xd444>
   1f380:	bl	1f178 <__assert_fail@plt+0xd230>
   1f384:	subs	r4, r0, #0
   1f388:	bne	1f2d0 <__assert_fail@plt+0xd388>
   1f38c:	mvn	r4, #0
   1f390:	b	1f2d0 <__assert_fail@plt+0xd388>
   1f394:	andeq	r0, r0, r0
   1f398:	mov	r0, #85	; 0x55
   1f39c:	str	r4, [sp, #-8]!
   1f3a0:	str	lr, [sp, #4]
   1f3a4:	sub	sp, sp, #64	; 0x40
   1f3a8:	bl	11b70 <sysconf@plt>
   1f3ac:	mov	r4, r0
   1f3b0:	mov	r0, #30
   1f3b4:	bl	11b70 <sysconf@plt>
   1f3b8:	cmp	r4, #0
   1f3bc:	cmpge	r0, #0
   1f3c0:	bge	1f40c <__assert_fail@plt+0xd4c4>
   1f3c4:	mov	r0, sp
   1f3c8:	bl	11ccc <sysinfo@plt>
   1f3cc:	cmp	r0, #0
   1f3d0:	beq	1f3e8 <__assert_fail@plt+0xd4a0>
   1f3d4:	vldr	d0, [pc, #84]	; 1f430 <__assert_fail@plt+0xd4e8>
   1f3d8:	add	sp, sp, #64	; 0x40
   1f3dc:	ldr	r4, [sp]
   1f3e0:	add	sp, sp, #4
   1f3e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3e8:	vldr	s15, [sp, #16]
   1f3ec:	vcvt.f64.u32	d0, s15
   1f3f0:	vldr	s15, [sp, #52]	; 0x34
   1f3f4:	vcvt.f64.u32	d7, s15
   1f3f8:	vmul.f64	d0, d0, d7
   1f3fc:	add	sp, sp, #64	; 0x40
   1f400:	ldr	r4, [sp]
   1f404:	add	sp, sp, #4
   1f408:	pop	{pc}		; (ldr pc, [sp], #4)
   1f40c:	vmov	s15, r4
   1f410:	vcvt.f64.s32	d0, s15
   1f414:	vmov	s15, r0
   1f418:	vcvt.f64.s32	d7, s15
   1f41c:	vmul.f64	d0, d0, d7
   1f420:	add	sp, sp, #64	; 0x40
   1f424:	ldr	r4, [sp]
   1f428:	add	sp, sp, #4
   1f42c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f430:	andeq	r0, r0, r0
   1f434:	orrsmi	r0, r0, r0
   1f438:	mov	r0, #86	; 0x56
   1f43c:	str	r4, [sp, #-8]!
   1f440:	str	lr, [sp, #4]
   1f444:	sub	sp, sp, #64	; 0x40
   1f448:	bl	11b70 <sysconf@plt>
   1f44c:	mov	r4, r0
   1f450:	mov	r0, #30
   1f454:	bl	11b70 <sysconf@plt>
   1f458:	cmp	r4, #0
   1f45c:	cmpge	r0, #0
   1f460:	bge	1f4e8 <__assert_fail@plt+0xd5a0>
   1f464:	mov	r0, sp
   1f468:	bl	11ccc <sysinfo@plt>
   1f46c:	cmp	r0, #0
   1f470:	bne	1f4a4 <__assert_fail@plt+0xd55c>
   1f474:	vldr	s15, [sp, #20]
   1f478:	vcvt.f64.u32	d0, s15
   1f47c:	vldr	s15, [sp, #28]
   1f480:	vcvt.f64.u32	d6, s15
   1f484:	vldr	s15, [sp, #52]	; 0x34
   1f488:	vadd.f64	d0, d0, d6
   1f48c:	vcvt.f64.u32	d7, s15
   1f490:	vmul.f64	d0, d0, d7
   1f494:	add	sp, sp, #64	; 0x40
   1f498:	ldr	r4, [sp]
   1f49c:	add	sp, sp, #4
   1f4a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4a4:	mov	r0, #85	; 0x55
   1f4a8:	bl	11b70 <sysconf@plt>
   1f4ac:	mov	r4, r0
   1f4b0:	mov	r0, #30
   1f4b4:	bl	11b70 <sysconf@plt>
   1f4b8:	cmp	r0, #0
   1f4bc:	cmpge	r4, #0
   1f4c0:	bge	1f52c <__assert_fail@plt+0xd5e4>
   1f4c4:	mov	r0, sp
   1f4c8:	bl	11ccc <sysinfo@plt>
   1f4cc:	cmp	r0, #0
   1f4d0:	beq	1f50c <__assert_fail@plt+0xd5c4>
   1f4d4:	vldr	d0, [pc, #124]	; 1f558 <__assert_fail@plt+0xd610>
   1f4d8:	add	sp, sp, #64	; 0x40
   1f4dc:	ldr	r4, [sp]
   1f4e0:	add	sp, sp, #4
   1f4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4e8:	vmov	s15, r4
   1f4ec:	vcvt.f64.s32	d0, s15
   1f4f0:	vmov	s15, r0
   1f4f4:	vcvt.f64.s32	d7, s15
   1f4f8:	vmul.f64	d0, d0, d7
   1f4fc:	add	sp, sp, #64	; 0x40
   1f500:	ldr	r4, [sp]
   1f504:	add	sp, sp, #4
   1f508:	pop	{pc}		; (ldr pc, [sp], #4)
   1f50c:	vldr	s15, [sp, #16]
   1f510:	vldr	d6, [pc, #72]	; 1f560 <__assert_fail@plt+0xd618>
   1f514:	vcvt.f64.u32	d0, s15
   1f518:	vldr	s15, [sp, #52]	; 0x34
   1f51c:	vcvt.f64.u32	d7, s15
   1f520:	vmul.f64	d0, d0, d7
   1f524:	vmul.f64	d0, d0, d6
   1f528:	b	1f494 <__assert_fail@plt+0xd54c>
   1f52c:	vmov	s15, r4
   1f530:	vldr	d6, [pc, #40]	; 1f560 <__assert_fail@plt+0xd618>
   1f534:	vcvt.f64.s32	d0, s15
   1f538:	vmov	s15, r0
   1f53c:	vcvt.f64.s32	d7, s15
   1f540:	vmul.f64	d0, d0, d7
   1f544:	vmul.f64	d0, d0, d6
   1f548:	add	sp, sp, #64	; 0x40
   1f54c:	ldr	r4, [sp]
   1f550:	add	sp, sp, #4
   1f554:	pop	{pc}		; (ldr pc, [sp], #4)
   1f558:	andeq	r0, r0, r0
   1f55c:	cmnmi	r0, r0
   1f560:	andeq	r0, r0, r0
   1f564:	svccc	0x00d00000
   1f568:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f56c:	mov	r4, r0
   1f570:	strd	r6, [sp, #8]
   1f574:	movw	r6, #43200	; 0xa8c0
   1f578:	movt	r6, #3
   1f57c:	ldr	r3, [r6]
   1f580:	mov	r7, r1
   1f584:	strd	r8, [sp, #16]
   1f588:	str	sl, [sp, #24]
   1f58c:	str	lr, [sp, #28]
   1f590:	ldrd	r8, [r0]
   1f594:	cmp	r3, #0
   1f598:	bge	1f6d8 <__assert_fail@plt+0xd790>
   1f59c:	bic	r5, r7, #524288	; 0x80000
   1f5a0:	bic	r5, r5, #2048	; 0x800
   1f5a4:	cmp	r5, #0
   1f5a8:	bne	1f70c <__assert_fail@plt+0xd7c4>
   1f5ac:	mov	r0, r4
   1f5b0:	bl	11df8 <pipe@plt>
   1f5b4:	cmp	r0, #0
   1f5b8:	blt	1f720 <__assert_fail@plt+0xd7d8>
   1f5bc:	tst	r7, #2048	; 0x800
   1f5c0:	bne	1f5e8 <__assert_fail@plt+0xd6a0>
   1f5c4:	tst	r7, #524288	; 0x80000
   1f5c8:	bne	1f674 <__assert_fail@plt+0xd72c>
   1f5cc:	mov	r0, r5
   1f5d0:	ldrd	r4, [sp]
   1f5d4:	ldrd	r6, [sp, #8]
   1f5d8:	ldrd	r8, [sp, #16]
   1f5dc:	ldr	sl, [sp, #24]
   1f5e0:	add	sp, sp, #28
   1f5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5e8:	mov	r2, r5
   1f5ec:	mov	r1, #3
   1f5f0:	ldr	r0, [r4, #4]
   1f5f4:	bl	264c0 <__assert_fail@plt+0x14578>
   1f5f8:	cmp	r0, #0
   1f5fc:	blt	1f648 <__assert_fail@plt+0xd700>
   1f600:	orr	r2, r0, #2048	; 0x800
   1f604:	mov	r1, #4
   1f608:	ldr	r0, [r4, #4]
   1f60c:	bl	264c0 <__assert_fail@plt+0x14578>
   1f610:	cmn	r0, #1
   1f614:	beq	1f648 <__assert_fail@plt+0xd700>
   1f618:	mov	r2, r5
   1f61c:	mov	r1, #3
   1f620:	ldr	r0, [r4]
   1f624:	bl	264c0 <__assert_fail@plt+0x14578>
   1f628:	subs	r2, r0, #0
   1f62c:	blt	1f648 <__assert_fail@plt+0xd700>
   1f630:	orr	r2, r2, #2048	; 0x800
   1f634:	mov	r1, #4
   1f638:	ldr	r0, [r4]
   1f63c:	bl	264c0 <__assert_fail@plt+0x14578>
   1f640:	cmn	r0, #1
   1f644:	bne	1f5c4 <__assert_fail@plt+0xd67c>
   1f648:	bl	11d74 <__errno_location@plt>
   1f64c:	mov	r6, r0
   1f650:	ldr	r0, [r4]
   1f654:	mvn	r5, #0
   1f658:	ldr	r7, [r6]
   1f65c:	bl	11f30 <close@plt>
   1f660:	ldr	r0, [r4, #4]
   1f664:	bl	11f30 <close@plt>
   1f668:	strd	r8, [r4]
   1f66c:	str	r7, [r6]
   1f670:	b	1f5cc <__assert_fail@plt+0xd684>
   1f674:	mov	r2, #0
   1f678:	mov	r1, #1
   1f67c:	ldr	r0, [r4, #4]
   1f680:	bl	264c0 <__assert_fail@plt+0x14578>
   1f684:	subs	r2, r0, #0
   1f688:	blt	1f648 <__assert_fail@plt+0xd700>
   1f68c:	orr	r2, r2, #1
   1f690:	mov	r1, #2
   1f694:	ldr	r0, [r4, #4]
   1f698:	bl	264c0 <__assert_fail@plt+0x14578>
   1f69c:	cmn	r0, #1
   1f6a0:	beq	1f648 <__assert_fail@plt+0xd700>
   1f6a4:	mov	r2, #0
   1f6a8:	mov	r1, #1
   1f6ac:	ldr	r0, [r4]
   1f6b0:	bl	264c0 <__assert_fail@plt+0x14578>
   1f6b4:	cmp	r0, #0
   1f6b8:	blt	1f648 <__assert_fail@plt+0xd700>
   1f6bc:	orr	r2, r0, #1
   1f6c0:	mov	r1, #2
   1f6c4:	ldr	r0, [r4]
   1f6c8:	bl	264c0 <__assert_fail@plt+0x14578>
   1f6cc:	cmn	r0, #1
   1f6d0:	bne	1f5cc <__assert_fail@plt+0xd684>
   1f6d4:	b	1f648 <__assert_fail@plt+0xd700>
   1f6d8:	bl	11eac <pipe2@plt>
   1f6dc:	subs	r5, r0, #0
   1f6e0:	bge	1f6f4 <__assert_fail@plt+0xd7ac>
   1f6e4:	bl	11d74 <__errno_location@plt>
   1f6e8:	ldr	r3, [r0]
   1f6ec:	cmp	r3, #38	; 0x26
   1f6f0:	beq	1f700 <__assert_fail@plt+0xd7b8>
   1f6f4:	mov	r3, #1
   1f6f8:	str	r3, [r6]
   1f6fc:	b	1f5cc <__assert_fail@plt+0xd684>
   1f700:	mvn	r3, #0
   1f704:	str	r3, [r6]
   1f708:	b	1f59c <__assert_fail@plt+0xd654>
   1f70c:	bl	11d74 <__errno_location@plt>
   1f710:	mov	r3, #22
   1f714:	mvn	r5, #0
   1f718:	str	r3, [r0]
   1f71c:	b	1f5cc <__assert_fail@plt+0xd684>
   1f720:	mvn	r5, #0
   1f724:	b	1f5cc <__assert_fail@plt+0xd684>
   1f728:	movw	r0, #38704	; 0x9730
   1f72c:	movt	r0, #2
   1f730:	push	{lr}		; (str lr, [sp, #-4]!)
   1f734:	sub	sp, sp, #12
   1f738:	bl	11cb4 <getenv@plt>
   1f73c:	subs	r3, r0, #0
   1f740:	beq	1f750 <__assert_fail@plt+0xd808>
   1f744:	ldrb	r3, [r3]
   1f748:	cmp	r3, #0
   1f74c:	bne	1f760 <__assert_fail@plt+0xd818>
   1f750:	movw	r0, #4201	; 0x1069
   1f754:	movt	r0, #3
   1f758:	add	sp, sp, #12
   1f75c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f760:	mov	r2, #10
   1f764:	add	r1, sp, #4
   1f768:	bl	11a38 <strtol@plt>
   1f76c:	ldr	r2, [sp, #4]
   1f770:	movw	r3, #4201	; 0x1069
   1f774:	movt	r3, #3
   1f778:	ldrb	r2, [r2]
   1f77c:	cmp	r2, #0
   1f780:	movne	r0, r3
   1f784:	add	sp, sp, #12
   1f788:	pop	{pc}		; (ldr pc, [sp], #4)
   1f78c:	strd	r4, [sp, #-16]!
   1f790:	subs	r4, r0, #0
   1f794:	str	r6, [sp, #8]
   1f798:	str	lr, [sp, #12]
   1f79c:	beq	1f834 <__assert_fail@plt+0xd8ec>
   1f7a0:	mov	r1, #47	; 0x2f
   1f7a4:	bl	11e58 <strrchr@plt>
   1f7a8:	subs	r5, r0, #0
   1f7ac:	beq	1f80c <__assert_fail@plt+0xd8c4>
   1f7b0:	add	r6, r5, #1
   1f7b4:	sub	r3, r6, r4
   1f7b8:	cmp	r3, #6
   1f7bc:	ble	1f80c <__assert_fail@plt+0xd8c4>
   1f7c0:	movw	r1, #38776	; 0x9778
   1f7c4:	movt	r1, #2
   1f7c8:	mov	r2, #7
   1f7cc:	sub	r0, r5, #6
   1f7d0:	bl	11f0c <strncmp@plt>
   1f7d4:	cmp	r0, #0
   1f7d8:	bne	1f80c <__assert_fail@plt+0xd8c4>
   1f7dc:	movw	r1, #38784	; 0x9780
   1f7e0:	movt	r1, #2
   1f7e4:	mov	r2, #3
   1f7e8:	mov	r0, r6
   1f7ec:	bl	11f0c <strncmp@plt>
   1f7f0:	cmp	r0, #0
   1f7f4:	movne	r4, r6
   1f7f8:	bne	1f80c <__assert_fail@plt+0xd8c4>
   1f7fc:	add	r4, r5, #4
   1f800:	movw	r3, #41656	; 0xa2b8
   1f804:	movt	r3, #3
   1f808:	str	r4, [r3]
   1f80c:	movw	r2, #43204	; 0xa8c4
   1f810:	movt	r2, #3
   1f814:	ldr	r6, [sp, #8]
   1f818:	movw	r3, #41660	; 0xa2bc
   1f81c:	movt	r3, #3
   1f820:	str	r4, [r2]
   1f824:	str	r4, [r3]
   1f828:	ldrd	r4, [sp]
   1f82c:	add	sp, sp, #12
   1f830:	pop	{pc}		; (ldr pc, [sp], #4)
   1f834:	movw	r3, #41672	; 0xa2c8
   1f838:	movt	r3, #3
   1f83c:	movw	r0, #38720	; 0x9740
   1f840:	movt	r0, #2
   1f844:	ldr	r3, [r3]
   1f848:	mov	r2, #55	; 0x37
   1f84c:	mov	r1, #1
   1f850:	bl	11c18 <fwrite@plt>
   1f854:	bl	11f24 <abort@plt>
   1f858:	mov	r2, #5
   1f85c:	strd	r4, [sp, #-16]!
   1f860:	mov	r5, r0
   1f864:	str	r6, [sp, #8]
   1f868:	mov	r6, r1
   1f86c:	mov	r1, r0
   1f870:	mov	r0, #0
   1f874:	str	lr, [sp, #12]
   1f878:	bl	11b58 <dcgettext@plt>
   1f87c:	cmp	r5, r0
   1f880:	mov	r4, r0
   1f884:	beq	1f89c <__assert_fail@plt+0xd954>
   1f888:	mov	r0, r4
   1f88c:	ldrd	r4, [sp]
   1f890:	ldr	r6, [sp, #8]
   1f894:	add	sp, sp, #12
   1f898:	pop	{pc}		; (ldr pc, [sp], #4)
   1f89c:	bl	267c4 <__assert_fail@plt+0x1487c>
   1f8a0:	ldrb	r3, [r0]
   1f8a4:	bic	r3, r3, #32
   1f8a8:	cmp	r3, #85	; 0x55
   1f8ac:	bne	1f914 <__assert_fail@plt+0xd9cc>
   1f8b0:	ldrb	r3, [r0, #1]
   1f8b4:	bic	r3, r3, #32
   1f8b8:	cmp	r3, #84	; 0x54
   1f8bc:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f8c0:	ldrb	r3, [r0, #2]
   1f8c4:	bic	r3, r3, #32
   1f8c8:	cmp	r3, #70	; 0x46
   1f8cc:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f8d0:	ldrb	r3, [r0, #3]
   1f8d4:	cmp	r3, #45	; 0x2d
   1f8d8:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f8dc:	ldrb	r3, [r0, #4]
   1f8e0:	cmp	r3, #56	; 0x38
   1f8e4:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f8e8:	ldrb	r3, [r0, #5]
   1f8ec:	cmp	r3, #0
   1f8f0:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f8f4:	ldrb	r2, [r4]
   1f8f8:	movw	r3, #38876	; 0x97dc
   1f8fc:	movt	r3, #2
   1f900:	movw	r4, #38888	; 0x97e8
   1f904:	movt	r4, #2
   1f908:	cmp	r2, #96	; 0x60
   1f90c:	movne	r4, r3
   1f910:	b	1f888 <__assert_fail@plt+0xd940>
   1f914:	cmp	r3, #71	; 0x47
   1f918:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f91c:	ldrb	r3, [r0, #1]
   1f920:	bic	r3, r3, #32
   1f924:	cmp	r3, #66	; 0x42
   1f928:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f92c:	ldrb	r3, [r0, #2]
   1f930:	cmp	r3, #49	; 0x31
   1f934:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f938:	ldrb	r3, [r0, #3]
   1f93c:	cmp	r3, #56	; 0x38
   1f940:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f944:	ldrb	r3, [r0, #4]
   1f948:	cmp	r3, #48	; 0x30
   1f94c:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f950:	ldrb	r3, [r0, #5]
   1f954:	cmp	r3, #51	; 0x33
   1f958:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f95c:	ldrb	r3, [r0, #6]
   1f960:	cmp	r3, #48	; 0x30
   1f964:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f968:	ldrb	r3, [r0, #7]
   1f96c:	cmp	r3, #0
   1f970:	bne	1f994 <__assert_fail@plt+0xda4c>
   1f974:	ldrb	r2, [r4]
   1f978:	movw	r3, #38880	; 0x97e0
   1f97c:	movt	r3, #2
   1f980:	movw	r4, #38884	; 0x97e4
   1f984:	movt	r4, #2
   1f988:	cmp	r2, #96	; 0x60
   1f98c:	movne	r4, r3
   1f990:	b	1f888 <__assert_fail@plt+0xd940>
   1f994:	movw	r3, #38892	; 0x97ec
   1f998:	movt	r3, #2
   1f99c:	cmp	r6, #9
   1f9a0:	movw	r4, #38872	; 0x97d8
   1f9a4:	movt	r4, #2
   1f9a8:	movne	r4, r3
   1f9ac:	b	1f888 <__assert_fail@plt+0xd940>
   1f9b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f9b4:	strd	r6, [sp, #8]
   1f9b8:	strd	r8, [sp, #16]
   1f9bc:	mov	r8, r3
   1f9c0:	strd	sl, [sp, #24]
   1f9c4:	mov	fp, r0
   1f9c8:	mov	sl, r1
   1f9cc:	str	lr, [sp, #32]
   1f9d0:	sub	sp, sp, #140	; 0x8c
   1f9d4:	ldr	r3, [sp, #180]	; 0xb4
   1f9d8:	str	r2, [sp, #28]
   1f9dc:	and	r4, r3, #2
   1f9e0:	ubfx	r3, r3, #1, #1
   1f9e4:	str	r3, [sp, #44]	; 0x2c
   1f9e8:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1f9ec:	ldr	r3, [sp, #176]	; 0xb0
   1f9f0:	str	r0, [sp, #76]	; 0x4c
   1f9f4:	cmp	r3, #10
   1f9f8:	ldrls	pc, [pc, r3, lsl #2]
   1f9fc:	b	21398 <__assert_fail@plt+0xf450>
   1fa00:	andeq	pc, r1, r0, lsl #29
   1fa04:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1fa08:	andeq	r0, r2, r8, lsl r5
   1fa0c:	andeq	r0, r2, r8
   1fa10:	andeq	pc, r1, r8, lsl #27
   1fa14:	andeq	pc, r1, r4, lsl #28
   1fa18:	ldrdeq	pc, [r1], -ip
   1fa1c:	andeq	pc, r1, r4, asr #30
   1fa20:	andeq	pc, r1, ip, lsr #20
   1fa24:	andeq	pc, r1, ip, lsr #20
   1fa28:	andeq	pc, r1, ip, lsr #20
   1fa2c:	ldr	r3, [sp, #176]	; 0xb0
   1fa30:	cmp	r3, #10
   1fa34:	beq	1fa60 <__assert_fail@plt+0xdb18>
   1fa38:	mov	r1, r3
   1fa3c:	movw	r0, #38896	; 0x97f0
   1fa40:	movt	r0, #2
   1fa44:	bl	1f858 <__assert_fail@plt+0xd910>
   1fa48:	str	r0, [sp, #188]	; 0xbc
   1fa4c:	movw	r0, #38892	; 0x97ec
   1fa50:	movt	r0, #2
   1fa54:	ldr	r1, [sp, #176]	; 0xb0
   1fa58:	bl	1f858 <__assert_fail@plt+0xd910>
   1fa5c:	str	r0, [sp, #192]	; 0xc0
   1fa60:	cmp	r4, #0
   1fa64:	movne	r4, #0
   1fa68:	beq	21124 <__assert_fail@plt+0xf1dc>
   1fa6c:	mov	r5, #0
   1fa70:	ldr	r0, [sp, #192]	; 0xc0
   1fa74:	mov	r9, r5
   1fa78:	str	r5, [sp, #64]	; 0x40
   1fa7c:	bl	11d50 <strlen@plt>
   1fa80:	mov	r3, #1
   1fa84:	ldr	r2, [sp, #44]	; 0x2c
   1fa88:	cmp	r0, r5
   1fa8c:	moveq	r2, r5
   1fa90:	str	r3, [sp, #32]
   1fa94:	str	r3, [sp, #48]	; 0x30
   1fa98:	str	r5, [sp, #52]	; 0x34
   1fa9c:	str	r3, [sp, #60]	; 0x3c
   1faa0:	ldr	r3, [sp, #180]	; 0xb4
   1faa4:	str	r0, [sp, #56]	; 0x38
   1faa8:	str	r5, [sp, #68]	; 0x44
   1faac:	str	r5, [sp, #80]	; 0x50
   1fab0:	str	r5, [sp, #84]	; 0x54
   1fab4:	and	r3, r3, #1
   1fab8:	str	r2, [sp, #88]	; 0x58
   1fabc:	str	r3, [sp, #92]	; 0x5c
   1fac0:	ldr	r3, [sp, #180]	; 0xb4
   1fac4:	and	r3, r3, #4
   1fac8:	str	r3, [sp, #96]	; 0x60
   1facc:	ldr	r3, [sp, #192]	; 0xc0
   1fad0:	str	r3, [sp, #72]	; 0x48
   1fad4:	mov	r3, fp
   1fad8:	mov	r7, #0
   1fadc:	mov	fp, r9
   1fae0:	mov	r9, r3
   1fae4:	cmn	r8, #1
   1fae8:	beq	200ec <__assert_fail@plt+0xe1a4>
   1faec:	subs	r6, r8, r7
   1faf0:	movne	r6, #1
   1faf4:	cmp	r6, #0
   1faf8:	beq	20104 <__assert_fail@plt+0xe1bc>
   1fafc:	ldr	r0, [sp, #28]
   1fb00:	ldr	r3, [sp, #48]	; 0x30
   1fb04:	cmp	r3, #0
   1fb08:	add	r3, r0, r7
   1fb0c:	str	r3, [sp, #36]	; 0x24
   1fb10:	beq	20590 <__assert_fail@plt+0xe648>
   1fb14:	ldr	r2, [sp, #56]	; 0x38
   1fb18:	cmp	r2, #0
   1fb1c:	beq	20a90 <__assert_fail@plt+0xeb48>
   1fb20:	cmp	r2, #1
   1fb24:	mov	r3, r2
   1fb28:	movls	r3, #0
   1fb2c:	movhi	r3, #1
   1fb30:	cmn	r8, #1
   1fb34:	add	r5, r7, r2
   1fb38:	movne	r3, #0
   1fb3c:	cmp	r3, #0
   1fb40:	beq	1fb4c <__assert_fail@plt+0xdc04>
   1fb44:	bl	11d50 <strlen@plt>
   1fb48:	mov	r8, r0
   1fb4c:	cmp	r5, r8
   1fb50:	bhi	20a90 <__assert_fail@plt+0xeb48>
   1fb54:	ldr	r0, [sp, #36]	; 0x24
   1fb58:	ldr	r2, [sp, #56]	; 0x38
   1fb5c:	ldr	r1, [sp, #72]	; 0x48
   1fb60:	bl	11b40 <memcmp@plt>
   1fb64:	cmp	r0, #0
   1fb68:	bne	20a90 <__assert_fail@plt+0xeb48>
   1fb6c:	ldr	r3, [sp, #44]	; 0x2c
   1fb70:	cmp	r3, #0
   1fb74:	bne	2123c <__assert_fail@plt+0xf2f4>
   1fb78:	ldr	r3, [sp, #36]	; 0x24
   1fb7c:	ldrb	r5, [r3]
   1fb80:	cmp	r5, #126	; 0x7e
   1fb84:	ldrls	pc, [pc, r5, lsl #2]
   1fb88:	b	21024 <__assert_fail@plt+0xf0dc>
   1fb8c:	andeq	r0, r2, r0, ror #4
   1fb90:	andeq	r1, r2, r4, lsr #32
   1fb94:	andeq	r1, r2, r4, lsr #32
   1fb98:	andeq	r1, r2, r4, lsr #32
   1fb9c:	andeq	r1, r2, r4, lsr #32
   1fba0:	andeq	r1, r2, r4, lsr #32
   1fba4:	andeq	r1, r2, r4, lsr #32
   1fba8:			; <UNDEFINED> instruction: 0x000201b8
   1fbac:			; <UNDEFINED> instruction: 0x000201b0
   1fbb0:	andeq	r0, r2, r0, asr #3
   1fbb4:	andeq	r0, r2, r4, asr #6
   1fbb8:	andeq	r0, r2, r4, lsr r3
   1fbbc:	andeq	r0, r2, ip, asr r0
   1fbc0:	andeq	r0, r2, r0, lsl r3
   1fbc4:	andeq	r1, r2, r4, lsr #32
   1fbc8:	andeq	r1, r2, r4, lsr #32
   1fbcc:	andeq	r1, r2, r4, lsr #32
   1fbd0:	andeq	r1, r2, r4, lsr #32
   1fbd4:	andeq	r1, r2, r4, lsr #32
   1fbd8:	andeq	r1, r2, r4, lsr #32
   1fbdc:	andeq	r1, r2, r4, lsr #32
   1fbe0:	andeq	r1, r2, r4, lsr #32
   1fbe4:	andeq	r1, r2, r4, lsr #32
   1fbe8:	andeq	r1, r2, r4, lsr #32
   1fbec:	andeq	r1, r2, r4, lsr #32
   1fbf0:	andeq	r1, r2, r4, lsr #32
   1fbf4:	andeq	r1, r2, r4, lsr #32
   1fbf8:	andeq	r1, r2, r4, lsr #32
   1fbfc:	andeq	r1, r2, r4, lsr #32
   1fc00:	andeq	r1, r2, r4, lsr #32
   1fc04:	andeq	r1, r2, r4, lsr #32
   1fc08:	andeq	r1, r2, r4, lsr #32
   1fc0c:			; <UNDEFINED> instruction: 0x000203bc
   1fc10:			; <UNDEFINED> instruction: 0x000203b0
   1fc14:			; <UNDEFINED> instruction: 0x000203b0
   1fc18:	andeq	r0, r2, r4, lsr #7
   1fc1c:			; <UNDEFINED> instruction: 0x000203b0
   1fc20:	andeq	r0, r2, r8, lsl #9
   1fc24:			; <UNDEFINED> instruction: 0x000203b0
   1fc28:	strdeq	r0, [r2], -r8
   1fc2c:			; <UNDEFINED> instruction: 0x000203b0
   1fc30:			; <UNDEFINED> instruction: 0x000203b0
   1fc34:			; <UNDEFINED> instruction: 0x000203b0
   1fc38:	andeq	r0, r2, r8, lsl #9
   1fc3c:	andeq	r0, r2, r8, lsl #9
   1fc40:	andeq	r0, r2, r8, lsl #9
   1fc44:	andeq	r0, r2, r8, lsl #9
   1fc48:	andeq	r0, r2, r8, lsl #9
   1fc4c:	andeq	r0, r2, r8, lsl #9
   1fc50:	andeq	r0, r2, r8, lsl #9
   1fc54:	andeq	r0, r2, r8, lsl #9
   1fc58:	andeq	r0, r2, r8, lsl #9
   1fc5c:	andeq	r0, r2, r8, lsl #9
   1fc60:	andeq	r0, r2, r8, lsl #9
   1fc64:	andeq	r0, r2, r8, lsl #9
   1fc68:	andeq	r0, r2, r8, lsl #9
   1fc6c:	andeq	r0, r2, r8, lsl #9
   1fc70:	andeq	r0, r2, r8, lsl #9
   1fc74:	andeq	r0, r2, r8, lsl #9
   1fc78:			; <UNDEFINED> instruction: 0x000203b0
   1fc7c:			; <UNDEFINED> instruction: 0x000203b0
   1fc80:			; <UNDEFINED> instruction: 0x000203b0
   1fc84:			; <UNDEFINED> instruction: 0x000203b0
   1fc88:	andeq	r0, r2, r8, lsr #9
   1fc8c:	andeq	r1, r2, r4, lsr #32
   1fc90:	andeq	r0, r2, r8, lsl #9
   1fc94:	andeq	r0, r2, r8, lsl #9
   1fc98:	andeq	r0, r2, r8, lsl #9
   1fc9c:	andeq	r0, r2, r8, lsl #9
   1fca0:	andeq	r0, r2, r8, lsl #9
   1fca4:	andeq	r0, r2, r8, lsl #9
   1fca8:	andeq	r0, r2, r8, lsl #9
   1fcac:	andeq	r0, r2, r8, lsl #9
   1fcb0:	andeq	r0, r2, r8, lsl #9
   1fcb4:	andeq	r0, r2, r8, lsl #9
   1fcb8:	andeq	r0, r2, r8, lsl #9
   1fcbc:	andeq	r0, r2, r8, lsl #9
   1fcc0:	andeq	r0, r2, r8, lsl #9
   1fcc4:	andeq	r0, r2, r8, lsl #9
   1fcc8:	andeq	r0, r2, r8, lsl #9
   1fccc:	andeq	r0, r2, r8, lsl #9
   1fcd0:	andeq	r0, r2, r8, lsl #9
   1fcd4:	andeq	r0, r2, r8, lsl #9
   1fcd8:	andeq	r0, r2, r8, lsl #9
   1fcdc:	andeq	r0, r2, r8, lsl #9
   1fce0:	andeq	r0, r2, r8, lsl #9
   1fce4:	andeq	r0, r2, r8, lsl #9
   1fce8:	andeq	r0, r2, r8, lsl #9
   1fcec:	andeq	r0, r2, r8, lsl #9
   1fcf0:	andeq	r0, r2, r8, lsl #9
   1fcf4:	andeq	r0, r2, r8, lsl #9
   1fcf8:			; <UNDEFINED> instruction: 0x000203b0
   1fcfc:	andeq	r0, r2, ip, asr #8
   1fd00:	andeq	r0, r2, r8, lsl #9
   1fd04:			; <UNDEFINED> instruction: 0x000203b0
   1fd08:	andeq	r0, r2, r8, lsl #9
   1fd0c:			; <UNDEFINED> instruction: 0x000203b0
   1fd10:	andeq	r0, r2, r8, lsl #9
   1fd14:	andeq	r0, r2, r8, lsl #9
   1fd18:	andeq	r0, r2, r8, lsl #9
   1fd1c:	andeq	r0, r2, r8, lsl #9
   1fd20:	andeq	r0, r2, r8, lsl #9
   1fd24:	andeq	r0, r2, r8, lsl #9
   1fd28:	andeq	r0, r2, r8, lsl #9
   1fd2c:	andeq	r0, r2, r8, lsl #9
   1fd30:	andeq	r0, r2, r8, lsl #9
   1fd34:	andeq	r0, r2, r8, lsl #9
   1fd38:	andeq	r0, r2, r8, lsl #9
   1fd3c:	andeq	r0, r2, r8, lsl #9
   1fd40:	andeq	r0, r2, r8, lsl #9
   1fd44:	andeq	r0, r2, r8, lsl #9
   1fd48:	andeq	r0, r2, r8, lsl #9
   1fd4c:	andeq	r0, r2, r8, lsl #9
   1fd50:	andeq	r0, r2, r8, lsl #9
   1fd54:	andeq	r0, r2, r8, lsl #9
   1fd58:	andeq	r0, r2, r8, lsl #9
   1fd5c:	andeq	r0, r2, r8, lsl #9
   1fd60:	andeq	r0, r2, r8, lsl #9
   1fd64:	andeq	r0, r2, r8, lsl #9
   1fd68:	andeq	r0, r2, r8, lsl #9
   1fd6c:	andeq	r0, r2, r8, lsl #9
   1fd70:	andeq	r0, r2, r8, lsl #9
   1fd74:	andeq	r0, r2, r8, lsl #9
   1fd78:	andeq	r0, r2, r8, asr r3
   1fd7c:			; <UNDEFINED> instruction: 0x000203b0
   1fd80:	andeq	r0, r2, r8, asr r3
   1fd84:	andeq	r0, r2, r4, lsr #7
   1fd88:	ldr	r3, [sp, #180]	; 0xb4
   1fd8c:	cmp	r4, #0
   1fd90:	and	r3, r3, #1
   1fd94:	str	r3, [sp, #92]	; 0x5c
   1fd98:	ldr	r3, [sp, #180]	; 0xb4
   1fd9c:	and	r3, r3, #4
   1fda0:	str	r3, [sp, #96]	; 0x60
   1fda4:	moveq	r3, #1
   1fda8:	streq	r3, [sp, #60]	; 0x3c
   1fdac:	beq	2053c <__assert_fail@plt+0xe5f4>
   1fdb0:	mov	r3, #0
   1fdb4:	mov	r2, #1
   1fdb8:	mov	r4, r3
   1fdbc:	mov	r9, r3
   1fdc0:	str	r2, [sp, #32]
   1fdc4:	str	r2, [sp, #44]	; 0x2c
   1fdc8:	str	r3, [sp, #48]	; 0x30
   1fdcc:	str	r2, [sp, #52]	; 0x34
   1fdd0:	str	r2, [sp, #56]	; 0x38
   1fdd4:	str	r3, [sp, #60]	; 0x3c
   1fdd8:	str	r2, [sp, #64]	; 0x40
   1fddc:	str	r2, [sp, #68]	; 0x44
   1fde0:	str	r3, [sp, #80]	; 0x50
   1fde4:	str	r3, [sp, #84]	; 0x54
   1fde8:	str	r3, [sp, #88]	; 0x58
   1fdec:	movw	r3, #38892	; 0x97ec
   1fdf0:	movt	r3, #2
   1fdf4:	str	r3, [sp, #72]	; 0x48
   1fdf8:	mov	r3, #2
   1fdfc:	str	r3, [sp, #176]	; 0xb0
   1fe00:	b	1fad4 <__assert_fail@plt+0xdb8c>
   1fe04:	ldr	r3, [sp, #180]	; 0xb4
   1fe08:	cmp	r4, #0
   1fe0c:	and	r3, r3, #1
   1fe10:	str	r3, [sp, #92]	; 0x5c
   1fe14:	ldr	r3, [sp, #180]	; 0xb4
   1fe18:	and	r3, r3, #4
   1fe1c:	str	r3, [sp, #96]	; 0x60
   1fe20:	bne	211f4 <__assert_fail@plt+0xf2ac>
   1fe24:	cmp	sl, #0
   1fe28:	beq	20fa0 <__assert_fail@plt+0xf058>
   1fe2c:	mov	r3, #34	; 0x22
   1fe30:	mov	r2, r4
   1fe34:	mov	r1, #1
   1fe38:	mov	r9, r2
   1fe3c:	strb	r3, [fp]
   1fe40:	movw	r3, #38872	; 0x97d8
   1fe44:	movt	r3, #2
   1fe48:	mov	r4, r1
   1fe4c:	str	r1, [sp, #32]
   1fe50:	str	r2, [sp, #44]	; 0x2c
   1fe54:	str	r1, [sp, #48]	; 0x30
   1fe58:	str	r2, [sp, #52]	; 0x34
   1fe5c:	str	r1, [sp, #56]	; 0x38
   1fe60:	str	r1, [sp, #60]	; 0x3c
   1fe64:	str	r2, [sp, #64]	; 0x40
   1fe68:	str	r2, [sp, #68]	; 0x44
   1fe6c:	str	r3, [sp, #72]	; 0x48
   1fe70:	str	r2, [sp, #80]	; 0x50
   1fe74:	str	r2, [sp, #84]	; 0x54
   1fe78:	str	r2, [sp, #88]	; 0x58
   1fe7c:	b	1fad4 <__assert_fail@plt+0xdb8c>
   1fe80:	mov	r3, #0
   1fe84:	mov	r2, #1
   1fe88:	mov	r9, r3
   1fe8c:	str	r2, [sp, #32]
   1fe90:	str	r3, [sp, #44]	; 0x2c
   1fe94:	str	r3, [sp, #48]	; 0x30
   1fe98:	str	r3, [sp, #52]	; 0x34
   1fe9c:	str	r3, [sp, #60]	; 0x3c
   1fea0:	strd	r2, [sp, #64]	; 0x40
   1fea4:	str	r3, [sp, #72]	; 0x48
   1fea8:	str	r3, [sp, #80]	; 0x50
   1feac:	str	r3, [sp, #88]	; 0x58
   1feb0:	ldr	r3, [sp, #180]	; 0xb4
   1feb4:	and	r3, r3, r2
   1feb8:	str	r3, [sp, #92]	; 0x5c
   1febc:	ldr	r3, [sp, #180]	; 0xb4
   1fec0:	and	r3, r3, #4
   1fec4:	str	r3, [sp, #96]	; 0x60
   1fec8:	ldr	r3, [sp, #176]	; 0xb0
   1fecc:	mov	r4, r3
   1fed0:	str	r3, [sp, #56]	; 0x38
   1fed4:	str	r3, [sp, #84]	; 0x54
   1fed8:	b	1fad4 <__assert_fail@plt+0xdb8c>
   1fedc:	mov	r3, #1
   1fee0:	mov	r4, #0
   1fee4:	mov	r9, r4
   1fee8:	str	r3, [sp, #32]
   1feec:	str	r3, [sp, #44]	; 0x2c
   1fef0:	str	r3, [sp, #48]	; 0x30
   1fef4:	str	r4, [sp, #52]	; 0x34
   1fef8:	str	r3, [sp, #56]	; 0x38
   1fefc:	str	r3, [sp, #60]	; 0x3c
   1ff00:	str	r3, [sp, #88]	; 0x58
   1ff04:	movw	r3, #38872	; 0x97d8
   1ff08:	movt	r3, #2
   1ff0c:	str	r4, [sp, #64]	; 0x40
   1ff10:	str	r4, [sp, #68]	; 0x44
   1ff14:	str	r3, [sp, #72]	; 0x48
   1ff18:	ldr	r3, [sp, #180]	; 0xb4
   1ff1c:	str	r4, [sp, #80]	; 0x50
   1ff20:	str	r4, [sp, #84]	; 0x54
   1ff24:	and	r3, r3, #1
   1ff28:	str	r3, [sp, #92]	; 0x5c
   1ff2c:	ldr	r3, [sp, #180]	; 0xb4
   1ff30:	and	r3, r3, #4
   1ff34:	str	r3, [sp, #96]	; 0x60
   1ff38:	mov	r3, #5
   1ff3c:	str	r3, [sp, #176]	; 0xb0
   1ff40:	b	1fad4 <__assert_fail@plt+0xdb8c>
   1ff44:	mov	r3, #1
   1ff48:	mov	r4, #0
   1ff4c:	mov	r9, r4
   1ff50:	str	r3, [sp, #32]
   1ff54:	str	r4, [sp, #44]	; 0x2c
   1ff58:	str	r3, [sp, #48]	; 0x30
   1ff5c:	str	r3, [sp, #60]	; 0x3c
   1ff60:	ldr	r3, [sp, #180]	; 0xb4
   1ff64:	str	r4, [sp, #52]	; 0x34
   1ff68:	str	r4, [sp, #56]	; 0x38
   1ff6c:	str	r4, [sp, #64]	; 0x40
   1ff70:	str	r4, [sp, #68]	; 0x44
   1ff74:	and	r3, r3, #1
   1ff78:	str	r4, [sp, #72]	; 0x48
   1ff7c:	str	r4, [sp, #80]	; 0x50
   1ff80:	str	r4, [sp, #84]	; 0x54
   1ff84:	str	r3, [sp, #92]	; 0x5c
   1ff88:	ldr	r3, [sp, #180]	; 0xb4
   1ff8c:	str	r4, [sp, #88]	; 0x58
   1ff90:	and	r3, r3, #4
   1ff94:	str	r3, [sp, #96]	; 0x60
   1ff98:	b	1fad4 <__assert_fail@plt+0xdb8c>
   1ff9c:	mov	r3, #0
   1ffa0:	mov	r2, #1
   1ffa4:	ldr	r1, [sp, #176]	; 0xb0
   1ffa8:	mov	r4, r3
   1ffac:	mov	r9, r3
   1ffb0:	movw	r3, #38892	; 0x97ec
   1ffb4:	movt	r3, #2
   1ffb8:	str	r2, [sp, #32]
   1ffbc:	str	r2, [sp, #44]	; 0x2c
   1ffc0:	str	r4, [sp, #48]	; 0x30
   1ffc4:	strd	r2, [sp, #68]	; 0x44
   1ffc8:	ldr	r3, [sp, #180]	; 0xb4
   1ffcc:	str	r2, [sp, #52]	; 0x34
   1ffd0:	str	r1, [sp, #56]	; 0x38
   1ffd4:	str	r4, [sp, #60]	; 0x3c
   1ffd8:	str	r2, [sp, #64]	; 0x40
   1ffdc:	and	r3, r3, r2
   1ffe0:	str	r4, [sp, #80]	; 0x50
   1ffe4:	str	r4, [sp, #84]	; 0x54
   1ffe8:	str	r4, [sp, #88]	; 0x58
   1ffec:	str	r3, [sp, #92]	; 0x5c
   1fff0:	ldr	r3, [sp, #180]	; 0xb4
   1fff4:	and	r3, r3, #4
   1fff8:	str	r3, [sp, #96]	; 0x60
   1fffc:	mov	r3, #2
   20000:	str	r3, [sp, #176]	; 0xb0
   20004:	b	1fad4 <__assert_fail@plt+0xdb8c>
   20008:	mov	r3, #1
   2000c:	mov	r2, #0
   20010:	mov	r4, r2
   20014:	mov	r9, r2
   20018:	str	r3, [sp, #32]
   2001c:	str	r3, [sp, #44]	; 0x2c
   20020:	str	r2, [sp, #48]	; 0x30
   20024:	str	r3, [sp, #52]	; 0x34
   20028:	str	r3, [sp, #56]	; 0x38
   2002c:	str	r3, [sp, #60]	; 0x3c
   20030:	str	r3, [sp, #64]	; 0x40
   20034:	str	r3, [sp, #68]	; 0x44
   20038:	str	r3, [sp, #88]	; 0x58
   2003c:	movw	r3, #38892	; 0x97ec
   20040:	movt	r3, #2
   20044:	str	r3, [sp, #72]	; 0x48
   20048:	ldr	r3, [sp, #180]	; 0xb4
   2004c:	str	r2, [sp, #80]	; 0x50
   20050:	str	r2, [sp, #84]	; 0x54
   20054:	and	r3, r3, #1
   20058:	b	1ffec <__assert_fail@plt+0xe0a4>
   2005c:	mov	r5, #102	; 0x66
   20060:	mov	r6, #0
   20064:	ldr	r3, [sp, #44]	; 0x2c
   20068:	cmp	r3, #0
   2006c:	bne	20f1c <__assert_fail@plt+0xefd4>
   20070:	ldr	r2, [sp, #52]	; 0x34
   20074:	eor	r3, fp, #1
   20078:	ands	r3, r2, r3
   2007c:	beq	200b4 <__assert_fail@plt+0xe16c>
   20080:	cmp	sl, r4
   20084:	mov	fp, r3
   20088:	movhi	r2, #39	; 0x27
   2008c:	strbhi	r2, [r9, r4]
   20090:	add	r2, r4, #1
   20094:	cmp	sl, r2
   20098:	movhi	r1, #36	; 0x24
   2009c:	strbhi	r1, [r9, r2]
   200a0:	add	r2, r4, #2
   200a4:	add	r4, r4, #3
   200a8:	cmp	sl, r2
   200ac:	movhi	r1, #39	; 0x27
   200b0:	strbhi	r1, [r9, r2]
   200b4:	cmp	sl, r4
   200b8:	add	r7, r7, #1
   200bc:	movhi	r3, #92	; 0x5c
   200c0:	strbhi	r3, [r9, r4]
   200c4:	add	r4, r4, #1
   200c8:	cmp	r4, sl
   200cc:	ldr	r3, [sp, #32]
   200d0:	strbcc	r5, [r9, r4]
   200d4:	cmp	r6, #0
   200d8:	add	r4, r4, #1
   200dc:	moveq	r3, #0
   200e0:	cmn	r8, #1
   200e4:	str	r3, [sp, #32]
   200e8:	bne	1faec <__assert_fail@plt+0xdba4>
   200ec:	ldr	r3, [sp, #28]
   200f0:	ldrb	r6, [r3, r7]
   200f4:	adds	r6, r6, #0
   200f8:	movne	r6, #1
   200fc:	cmp	r6, #0
   20100:	bne	1fafc <__assert_fail@plt+0xdbb4>
   20104:	mov	r3, r9
   20108:	mov	r9, fp
   2010c:	mov	fp, r3
   20110:	ldr	r3, [sp, #68]	; 0x44
   20114:	cmp	r4, #0
   20118:	movne	r3, #0
   2011c:	cmp	r3, #0
   20120:	bne	21314 <__assert_fail@plt+0xf3cc>
   20124:	ldr	r3, [sp, #44]	; 0x2c
   20128:	ldr	r2, [sp, #52]	; 0x34
   2012c:	eor	r3, r3, #1
   20130:	ands	r2, r3, r2
   20134:	beq	2124c <__assert_fail@plt+0xf304>
   20138:	ldr	r3, [sp, #80]	; 0x50
   2013c:	cmp	r3, #0
   20140:	beq	21250 <__assert_fail@plt+0xf308>
   20144:	ldr	r3, [sp, #32]
   20148:	cmp	r3, #0
   2014c:	bne	212c4 <__assert_fail@plt+0xf37c>
   20150:	ldr	r3, [sp, #84]	; 0x54
   20154:	adds	r3, r3, #0
   20158:	movne	r3, #1
   2015c:	cmp	sl, #0
   20160:	movne	r3, #0
   20164:	cmp	r3, #0
   20168:	ldreq	r2, [sp, #80]	; 0x50
   2016c:	beq	21250 <__assert_fail@plt+0xf308>
   20170:	ldr	r2, [sp, #84]	; 0x54
   20174:	mov	sl, r2
   20178:	mov	r0, #0
   2017c:	mov	r4, #1
   20180:	mov	r1, #39	; 0x27
   20184:	str	r0, [sp, #44]	; 0x2c
   20188:	strb	r1, [fp]
   2018c:	str	r0, [sp, #48]	; 0x30
   20190:	str	r4, [sp, #52]	; 0x34
   20194:	str	r4, [sp, #56]	; 0x38
   20198:	str	r4, [sp, #64]	; 0x40
   2019c:	str	r0, [sp, #68]	; 0x44
   201a0:	str	r3, [sp, #80]	; 0x50
   201a4:	str	r2, [sp, #84]	; 0x54
   201a8:	str	r0, [sp, #88]	; 0x58
   201ac:	b	1fdec <__assert_fail@plt+0xdea4>
   201b0:	mov	r5, #98	; 0x62
   201b4:	b	20060 <__assert_fail@plt+0xe118>
   201b8:	mov	r5, #97	; 0x61
   201bc:	b	20060 <__assert_fail@plt+0xe118>
   201c0:	ldr	r3, [sp, #48]	; 0x30
   201c4:	str	r3, [sp, #40]	; 0x28
   201c8:	mov	r3, #116	; 0x74
   201cc:	ldr	r2, [sp, #68]	; 0x44
   201d0:	cmp	r2, #0
   201d4:	bne	203d0 <__assert_fail@plt+0xe488>
   201d8:	ldr	r2, [sp, #60]	; 0x3c
   201dc:	cmp	r2, #0
   201e0:	bne	2032c <__assert_fail@plt+0xe3e4>
   201e4:	ldr	r3, [sp, #44]	; 0x2c
   201e8:	mov	r6, #0
   201ec:	cmp	r3, #0
   201f0:	beq	2039c <__assert_fail@plt+0xe454>
   201f4:	mov	r3, fp
   201f8:	ldr	r2, [sp, #184]	; 0xb8
   201fc:	cmp	r2, #0
   20200:	beq	20220 <__assert_fail@plt+0xe2d8>
   20204:	ubfx	r1, r5, #5, #8
   20208:	mov	r0, r2
   2020c:	and	r2, r5, #31
   20210:	ldr	r1, [r0, r1, lsl #2]
   20214:	lsr	r2, r1, r2
   20218:	tst	r2, #1
   2021c:	bne	20064 <__assert_fail@plt+0xe11c>
   20220:	ldr	r2, [sp, #40]	; 0x28
   20224:	cmp	r2, #0
   20228:	addeq	r7, r7, #1
   2022c:	bne	20064 <__assert_fail@plt+0xe11c>
   20230:	cmp	r3, #0
   20234:	beq	200c8 <__assert_fail@plt+0xe180>
   20238:	cmp	sl, r4
   2023c:	mov	fp, #0
   20240:	movhi	r3, #39	; 0x27
   20244:	strbhi	r3, [r9, r4]
   20248:	add	r3, r4, #1
   2024c:	add	r4, r4, #2
   20250:	cmp	sl, r3
   20254:	movhi	r2, #39	; 0x27
   20258:	strbhi	r2, [r9, r3]
   2025c:	b	200c8 <__assert_fail@plt+0xe180>
   20260:	ldr	r3, [sp, #48]	; 0x30
   20264:	str	r3, [sp, #40]	; 0x28
   20268:	eor	r3, fp, #1
   2026c:	ldr	r2, [sp, #52]	; 0x34
   20270:	ands	r2, r2, r3
   20274:	beq	20f34 <__assert_fail@plt+0xefec>
   20278:	cmp	sl, r4
   2027c:	movhi	r3, #39	; 0x27
   20280:	strbhi	r3, [r9, r4]
   20284:	add	r3, r4, #1
   20288:	cmp	sl, r3
   2028c:	movhi	r1, #36	; 0x24
   20290:	strbhi	r1, [r9, r3]
   20294:	add	r3, r4, #2
   20298:	cmp	sl, r3
   2029c:	movhi	r1, #39	; 0x27
   202a0:	strbhi	r1, [r9, r3]
   202a4:	add	r3, r4, #3
   202a8:	cmp	sl, r3
   202ac:	bls	20f80 <__assert_fail@plt+0xf038>
   202b0:	mov	r4, r3
   202b4:	mov	r3, #92	; 0x5c
   202b8:	mov	fp, r2
   202bc:	mov	r2, r4
   202c0:	strb	r3, [r9, r4]
   202c4:	ldr	r3, [sp, #176]	; 0xb0
   202c8:	add	r4, r4, #1
   202cc:	cmp	r3, #2
   202d0:	beq	20fe8 <__assert_fail@plt+0xf0a0>
   202d4:	add	r3, r7, #1
   202d8:	cmp	r3, r8
   202dc:	bcs	202f4 <__assert_fail@plt+0xe3ac>
   202e0:	ldr	r1, [sp, #28]
   202e4:	ldrb	r3, [r1, r3]
   202e8:	sub	r3, r3, #48	; 0x30
   202ec:	cmp	r3, #9
   202f0:	bls	20ff8 <__assert_fail@plt+0xf0b0>
   202f4:	mov	r3, #0
   202f8:	mov	r5, #48	; 0x30
   202fc:	ldr	r6, [sp, #64]	; 0x40
   20300:	cmp	r6, #0
   20304:	beq	201f8 <__assert_fail@plt+0xe2b0>
   20308:	mov	r6, #0
   2030c:	b	20220 <__assert_fail@plt+0xe2d8>
   20310:	ldr	r3, [sp, #48]	; 0x30
   20314:	str	r3, [sp, #40]	; 0x28
   20318:	ldr	r2, [sp, #60]	; 0x3c
   2031c:	mov	r5, #13
   20320:	mov	r3, #114	; 0x72
   20324:	cmp	r2, #0
   20328:	beq	201e4 <__assert_fail@plt+0xe29c>
   2032c:	mov	r5, r3
   20330:	b	20060 <__assert_fail@plt+0xe118>
   20334:	ldr	r3, [sp, #48]	; 0x30
   20338:	str	r3, [sp, #40]	; 0x28
   2033c:	mov	r3, #118	; 0x76
   20340:	b	201d8 <__assert_fail@plt+0xe290>
   20344:	ldr	r3, [sp, #48]	; 0x30
   20348:	str	r3, [sp, #40]	; 0x28
   2034c:	mov	r5, #10
   20350:	mov	r3, #110	; 0x6e
   20354:	b	201d8 <__assert_fail@plt+0xe290>
   20358:	ldr	r3, [sp, #48]	; 0x30
   2035c:	cmn	r8, #1
   20360:	str	r3, [sp, #40]	; 0x28
   20364:	beq	207ac <__assert_fail@plt+0xe864>
   20368:	subs	r3, r8, #1
   2036c:	movne	r3, #1
   20370:	cmp	r3, #0
   20374:	bne	20380 <__assert_fail@plt+0xe438>
   20378:	cmp	r7, #0
   2037c:	beq	203c4 <__assert_fail@plt+0xe47c>
   20380:	mov	r6, #0
   20384:	ldr	r3, [sp, #64]	; 0x40
   20388:	cmp	r3, #0
   2038c:	beq	201f4 <__assert_fail@plt+0xe2ac>
   20390:	ldr	r3, [sp, #44]	; 0x2c
   20394:	cmp	r3, #0
   20398:	bne	201f4 <__assert_fail@plt+0xe2ac>
   2039c:	mov	r3, fp
   203a0:	b	20220 <__assert_fail@plt+0xe2d8>
   203a4:	ldr	r3, [sp, #48]	; 0x30
   203a8:	str	r3, [sp, #40]	; 0x28
   203ac:	b	20378 <__assert_fail@plt+0xe430>
   203b0:	ldr	r3, [sp, #48]	; 0x30
   203b4:	str	r3, [sp, #40]	; 0x28
   203b8:	b	20380 <__assert_fail@plt+0xe438>
   203bc:	ldr	r6, [sp, #48]	; 0x30
   203c0:	str	r6, [sp, #40]	; 0x28
   203c4:	ldr	r3, [sp, #68]	; 0x44
   203c8:	cmp	r3, #0
   203cc:	beq	20384 <__assert_fail@plt+0xe43c>
   203d0:	mov	r3, #2
   203d4:	mov	fp, r9
   203d8:	str	r3, [sp, #176]	; 0xb0
   203dc:	ldr	r3, [sp, #60]	; 0x3c
   203e0:	cmp	r3, #0
   203e4:	ldr	r3, [sp, #176]	; 0xb0
   203e8:	movne	r3, #4
   203ec:	str	r3, [sp, #176]	; 0xb0
   203f0:	mov	lr, #0
   203f4:	mov	r0, fp
   203f8:	ldr	r2, [sp, #28]
   203fc:	ldr	r3, [sp, #180]	; 0xb4
   20400:	ldr	r1, [sp, #188]	; 0xbc
   20404:	bic	ip, r3, #2
   20408:	ldr	r3, [sp, #176]	; 0xb0
   2040c:	stm	sp, {r3, ip, lr}
   20410:	mov	r3, r8
   20414:	ldr	ip, [sp, #192]	; 0xc0
   20418:	str	r1, [sp, #12]
   2041c:	mov	r1, sl
   20420:	str	ip, [sp, #16]
   20424:	bl	1f9b0 <__assert_fail@plt+0xda68>
   20428:	mov	r4, r0
   2042c:	mov	r0, r4
   20430:	add	sp, sp, #140	; 0x8c
   20434:	ldrd	r4, [sp]
   20438:	ldrd	r6, [sp, #8]
   2043c:	ldrd	r8, [sp, #16]
   20440:	ldrd	sl, [sp, #24]
   20444:	add	sp, sp, #32
   20448:	pop	{pc}		; (ldr pc, [sp], #4)
   2044c:	ldr	r3, [sp, #48]	; 0x30
   20450:	str	r3, [sp, #40]	; 0x28
   20454:	ldr	r3, [sp, #176]	; 0xb0
   20458:	cmp	r3, #2
   2045c:	beq	207d4 <__assert_fail@plt+0xe88c>
   20460:	ldr	r3, [sp, #88]	; 0x58
   20464:	cmp	r3, #0
   20468:	moveq	r5, #92	; 0x5c
   2046c:	moveq	r3, r5
   20470:	beq	201d8 <__assert_fail@plt+0xe290>
   20474:	add	r7, r7, #1
   20478:	mov	r3, fp
   2047c:	mov	r6, #0
   20480:	mov	r5, #92	; 0x5c
   20484:	b	20230 <__assert_fail@plt+0xe2e8>
   20488:	ldr	r3, [sp, #64]	; 0x40
   2048c:	cmp	r3, #0
   20490:	bne	21308 <__assert_fail@plt+0xf3c0>
   20494:	ldr	r2, [sp, #48]	; 0x30
   20498:	mov	r3, fp
   2049c:	mov	r6, r2
   204a0:	str	r2, [sp, #40]	; 0x28
   204a4:	b	201f8 <__assert_fail@plt+0xe2b0>
   204a8:	ldr	r3, [sp, #176]	; 0xb0
   204ac:	cmp	r3, #2
   204b0:	beq	21244 <__assert_fail@plt+0xf2fc>
   204b4:	cmp	r3, #5
   204b8:	ldr	r3, [sp, #48]	; 0x30
   204bc:	str	r3, [sp, #40]	; 0x28
   204c0:	bne	204ec <__assert_fail@plt+0xe5a4>
   204c4:	ldr	r3, [sp, #96]	; 0x60
   204c8:	cmp	r3, #0
   204cc:	beq	20f48 <__assert_fail@plt+0xf000>
   204d0:	add	r3, r7, #2
   204d4:	cmp	r3, r8
   204d8:	bcs	204ec <__assert_fail@plt+0xe5a4>
   204dc:	ldr	r2, [sp, #36]	; 0x24
   204e0:	ldrb	r5, [r2, #1]
   204e4:	cmp	r5, #63	; 0x3f
   204e8:	beq	21030 <__assert_fail@plt+0xf0e8>
   204ec:	mov	r6, #0
   204f0:	mov	r5, #63	; 0x3f
   204f4:	b	20384 <__assert_fail@plt+0xe43c>
   204f8:	ldr	r3, [sp, #176]	; 0xb0
   204fc:	cmp	r3, #2
   20500:	ldr	r3, [sp, #48]	; 0x30
   20504:	beq	20cec <__assert_fail@plt+0xeda4>
   20508:	mov	r5, #39	; 0x27
   2050c:	str	r3, [sp, #40]	; 0x28
   20510:	str	r6, [sp, #80]	; 0x50
   20514:	b	20384 <__assert_fail@plt+0xe43c>
   20518:	ldr	r3, [sp, #180]	; 0xb4
   2051c:	cmp	r4, #0
   20520:	and	r3, r3, #1
   20524:	str	r3, [sp, #92]	; 0x5c
   20528:	ldr	r3, [sp, #180]	; 0xb4
   2052c:	and	r3, r3, #4
   20530:	str	r3, [sp, #96]	; 0x60
   20534:	bne	21354 <__assert_fail@plt+0xf40c>
   20538:	str	r4, [sp, #60]	; 0x3c
   2053c:	cmp	sl, #0
   20540:	bne	21338 <__assert_fail@plt+0xf3f0>
   20544:	mov	r3, #1
   20548:	movw	r2, #38892	; 0x97ec
   2054c:	movt	r2, #2
   20550:	mov	r4, r3
   20554:	mov	r3, #2
   20558:	mov	r9, sl
   2055c:	str	r4, [sp, #32]
   20560:	str	sl, [sp, #44]	; 0x2c
   20564:	str	sl, [sp, #48]	; 0x30
   20568:	str	r4, [sp, #52]	; 0x34
   2056c:	str	r4, [sp, #56]	; 0x38
   20570:	str	r4, [sp, #64]	; 0x40
   20574:	str	sl, [sp, #68]	; 0x44
   20578:	str	r2, [sp, #72]	; 0x48
   2057c:	str	sl, [sp, #80]	; 0x50
   20580:	str	sl, [sp, #84]	; 0x54
   20584:	str	sl, [sp, #88]	; 0x58
   20588:	str	r3, [sp, #176]	; 0xb0
   2058c:	b	1fad4 <__assert_fail@plt+0xdb8c>
   20590:	ldrb	r5, [r0, r7]
   20594:	cmp	r5, #126	; 0x7e
   20598:	ldrls	pc, [pc, r5, lsl #2]
   2059c:	b	20900 <__assert_fail@plt+0xe9b8>
   205a0:	andeq	r0, r2, ip, asr #17
   205a4:	andeq	r0, r2, r0, lsl #18
   205a8:	andeq	r0, r2, r0, lsl #18
   205ac:	andeq	r0, r2, r0, lsl #18
   205b0:	andeq	r0, r2, r0, lsl #18
   205b4:	andeq	r0, r2, r0, lsl #18
   205b8:	andeq	r0, r2, r0, lsl #18
   205bc:			; <UNDEFINED> instruction: 0x000208bc
   205c0:	andeq	r0, r2, ip, lsr #17
   205c4:	andeq	r0, r2, r0, lsr r8
   205c8:	muleq	r2, ip, r8
   205cc:	andeq	r0, r2, r0, lsl r8
   205d0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   205d4:	andeq	r0, r2, ip, ror r8
   205d8:	andeq	r0, r2, r0, lsl #18
   205dc:	andeq	r0, r2, r0, lsl #18
   205e0:	andeq	r0, r2, r0, lsl #18
   205e4:	andeq	r0, r2, r0, lsl #18
   205e8:	andeq	r0, r2, r0, lsl #18
   205ec:	andeq	r0, r2, r0, lsl #18
   205f0:	andeq	r0, r2, r0, lsl #18
   205f4:	andeq	r0, r2, r0, lsl #18
   205f8:	andeq	r0, r2, r0, lsl #18
   205fc:	andeq	r0, r2, r0, lsl #18
   20600:	andeq	r0, r2, r0, lsl #18
   20604:	andeq	r0, r2, r0, lsl #18
   20608:	andeq	r0, r2, r0, lsl #18
   2060c:	andeq	r0, r2, r0, lsl #18
   20610:	andeq	r0, r2, r0, lsl #18
   20614:	andeq	r0, r2, r0, lsl #18
   20618:	andeq	r0, r2, r0, lsl #18
   2061c:	andeq	r0, r2, r0, lsl #18
   20620:	andeq	r0, r2, r4, lsr #16
   20624:	andeq	r0, r2, ip, lsl #17
   20628:	andeq	r0, r2, ip, lsl #17
   2062c:	andeq	r0, r2, r4, lsl #16
   20630:	andeq	r0, r2, ip, lsl #17
   20634:	strdeq	r0, [r2], -r8
   20638:	andeq	r0, r2, ip, lsl #17
   2063c:	andeq	r0, r2, r8, ror #16
   20640:	andeq	r0, r2, ip, lsl #17
   20644:	andeq	r0, r2, ip, lsl #17
   20648:	andeq	r0, r2, ip, lsl #17
   2064c:	strdeq	r0, [r2], -r8
   20650:	strdeq	r0, [r2], -r8
   20654:	strdeq	r0, [r2], -r8
   20658:	strdeq	r0, [r2], -r8
   2065c:	strdeq	r0, [r2], -r8
   20660:	strdeq	r0, [r2], -r8
   20664:	strdeq	r0, [r2], -r8
   20668:	strdeq	r0, [r2], -r8
   2066c:	strdeq	r0, [r2], -r8
   20670:	strdeq	r0, [r2], -r8
   20674:	strdeq	r0, [r2], -r8
   20678:	strdeq	r0, [r2], -r8
   2067c:	strdeq	r0, [r2], -r8
   20680:	strdeq	r0, [r2], -r8
   20684:	strdeq	r0, [r2], -r8
   20688:	strdeq	r0, [r2], -r8
   2068c:	andeq	r0, r2, ip, lsl #17
   20690:	andeq	r0, r2, ip, lsl #17
   20694:	andeq	r0, r2, ip, lsl #17
   20698:	andeq	r0, r2, ip, lsl #17
   2069c:	andeq	r0, r2, r0, asr #16
   206a0:	andeq	r0, r2, r0, lsl #18
   206a4:	strdeq	r0, [r2], -r8
   206a8:	strdeq	r0, [r2], -r8
   206ac:	strdeq	r0, [r2], -r8
   206b0:	strdeq	r0, [r2], -r8
   206b4:	strdeq	r0, [r2], -r8
   206b8:	strdeq	r0, [r2], -r8
   206bc:	strdeq	r0, [r2], -r8
   206c0:	strdeq	r0, [r2], -r8
   206c4:	strdeq	r0, [r2], -r8
   206c8:	strdeq	r0, [r2], -r8
   206cc:	strdeq	r0, [r2], -r8
   206d0:	strdeq	r0, [r2], -r8
   206d4:	strdeq	r0, [r2], -r8
   206d8:	strdeq	r0, [r2], -r8
   206dc:	strdeq	r0, [r2], -r8
   206e0:	strdeq	r0, [r2], -r8
   206e4:	strdeq	r0, [r2], -r8
   206e8:	strdeq	r0, [r2], -r8
   206ec:	strdeq	r0, [r2], -r8
   206f0:	strdeq	r0, [r2], -r8
   206f4:	strdeq	r0, [r2], -r8
   206f8:	strdeq	r0, [r2], -r8
   206fc:	strdeq	r0, [r2], -r8
   20700:	strdeq	r0, [r2], -r8
   20704:	strdeq	r0, [r2], -r8
   20708:	strdeq	r0, [r2], -r8
   2070c:	andeq	r0, r2, ip, lsl #17
   20710:	andeq	r0, r2, r0, asr #15
   20714:	strdeq	r0, [r2], -r8
   20718:	andeq	r0, r2, ip, lsl #17
   2071c:	strdeq	r0, [r2], -r8
   20720:	andeq	r0, r2, ip, lsl #17
   20724:	strdeq	r0, [r2], -r8
   20728:	strdeq	r0, [r2], -r8
   2072c:	strdeq	r0, [r2], -r8
   20730:	strdeq	r0, [r2], -r8
   20734:	strdeq	r0, [r2], -r8
   20738:	strdeq	r0, [r2], -r8
   2073c:	strdeq	r0, [r2], -r8
   20740:	strdeq	r0, [r2], -r8
   20744:	strdeq	r0, [r2], -r8
   20748:	strdeq	r0, [r2], -r8
   2074c:	strdeq	r0, [r2], -r8
   20750:	strdeq	r0, [r2], -r8
   20754:	strdeq	r0, [r2], -r8
   20758:	strdeq	r0, [r2], -r8
   2075c:	strdeq	r0, [r2], -r8
   20760:	strdeq	r0, [r2], -r8
   20764:	strdeq	r0, [r2], -r8
   20768:	strdeq	r0, [r2], -r8
   2076c:	strdeq	r0, [r2], -r8
   20770:	strdeq	r0, [r2], -r8
   20774:	strdeq	r0, [r2], -r8
   20778:	strdeq	r0, [r2], -r8
   2077c:	strdeq	r0, [r2], -r8
   20780:	strdeq	r0, [r2], -r8
   20784:	strdeq	r0, [r2], -r8
   20788:	strdeq	r0, [r2], -r8
   2078c:	muleq	r2, ip, r7
   20790:	andeq	r0, r2, ip, lsl #17
   20794:	muleq	r2, ip, r7
   20798:	andeq	r0, r2, r4, lsl #16
   2079c:	mov	r3, #0
   207a0:	cmn	r8, #1
   207a4:	str	r3, [sp, #40]	; 0x28
   207a8:	bne	20368 <__assert_fail@plt+0xe420>
   207ac:	ldr	r3, [sp, #28]
   207b0:	ldrb	r3, [r3, #1]
   207b4:	adds	r3, r3, #0
   207b8:	movne	r3, #1
   207bc:	b	20370 <__assert_fail@plt+0xe428>
   207c0:	mov	r3, #0
   207c4:	str	r3, [sp, #40]	; 0x28
   207c8:	ldr	r3, [sp, #176]	; 0xb0
   207cc:	cmp	r3, #2
   207d0:	bne	20460 <__assert_fail@plt+0xe518>
   207d4:	ldr	r3, [sp, #44]	; 0x2c
   207d8:	cmp	r3, #0
   207dc:	bne	2111c <__assert_fail@plt+0xf1d4>
   207e0:	mov	r6, r3
   207e4:	add	r7, r7, #1
   207e8:	mov	r3, fp
   207ec:	mov	r5, #92	; 0x5c
   207f0:	b	20230 <__assert_fail@plt+0xe2e8>
   207f4:	ldr	r6, [sp, #48]	; 0x30
   207f8:	mov	r3, #0
   207fc:	str	r3, [sp, #40]	; 0x28
   20800:	b	20384 <__assert_fail@plt+0xe43c>
   20804:	mov	r3, #0
   20808:	str	r3, [sp, #40]	; 0x28
   2080c:	b	20378 <__assert_fail@plt+0xe430>
   20810:	mov	r3, #0
   20814:	str	r3, [sp, #40]	; 0x28
   20818:	mov	r3, #118	; 0x76
   2081c:	b	201d8 <__assert_fail@plt+0xe290>
   20820:	ldr	r6, [sp, #48]	; 0x30
   20824:	mov	r3, #0
   20828:	str	r3, [sp, #40]	; 0x28
   2082c:	b	203c4 <__assert_fail@plt+0xe47c>
   20830:	mov	r3, #0
   20834:	str	r3, [sp, #40]	; 0x28
   20838:	mov	r3, #116	; 0x74
   2083c:	b	201cc <__assert_fail@plt+0xe284>
   20840:	ldr	r3, [sp, #176]	; 0xb0
   20844:	cmp	r3, #2
   20848:	beq	20d58 <__assert_fail@plt+0xee10>
   2084c:	cmp	r3, #5
   20850:	mov	r3, #0
   20854:	str	r3, [sp, #40]	; 0x28
   20858:	beq	204c4 <__assert_fail@plt+0xe57c>
   2085c:	mov	r6, #0
   20860:	mov	r5, #63	; 0x3f
   20864:	b	20384 <__assert_fail@plt+0xe43c>
   20868:	ldr	r3, [sp, #176]	; 0xb0
   2086c:	cmp	r3, #2
   20870:	beq	20ce0 <__assert_fail@plt+0xed98>
   20874:	mov	r3, #0
   20878:	b	20508 <__assert_fail@plt+0xe5c0>
   2087c:	mov	r3, #0
   20880:	str	r3, [sp, #40]	; 0x28
   20884:	mov	r3, #114	; 0x72
   20888:	b	201cc <__assert_fail@plt+0xe284>
   2088c:	mov	r3, #0
   20890:	mov	r6, r3
   20894:	str	r3, [sp, #40]	; 0x28
   20898:	b	203c4 <__assert_fail@plt+0xe47c>
   2089c:	mov	r3, #0
   208a0:	str	r3, [sp, #40]	; 0x28
   208a4:	mov	r3, #110	; 0x6e
   208a8:	b	201cc <__assert_fail@plt+0xe284>
   208ac:	mov	r3, #0
   208b0:	str	r3, [sp, #40]	; 0x28
   208b4:	mov	r3, #98	; 0x62
   208b8:	b	201d8 <__assert_fail@plt+0xe290>
   208bc:	mov	r3, #0
   208c0:	str	r3, [sp, #40]	; 0x28
   208c4:	mov	r3, #97	; 0x61
   208c8:	b	201d8 <__assert_fail@plt+0xe290>
   208cc:	ldr	r3, [sp, #60]	; 0x3c
   208d0:	cmp	r3, #0
   208d4:	bne	20cc4 <__assert_fail@plt+0xed7c>
   208d8:	ldr	r3, [sp, #92]	; 0x5c
   208dc:	cmp	r3, #0
   208e0:	addne	r7, r7, #1
   208e4:	bne	1fae4 <__assert_fail@plt+0xdb9c>
   208e8:	str	r3, [sp, #40]	; 0x28
   208ec:	b	201e4 <__assert_fail@plt+0xe29c>
   208f0:	mov	r3, #0
   208f4:	str	r3, [sp, #40]	; 0x28
   208f8:	mov	r3, #102	; 0x66
   208fc:	b	201d8 <__assert_fail@plt+0xe290>
   20900:	mov	r3, #0
   20904:	str	r3, [sp, #40]	; 0x28
   20908:	ldr	r3, [sp, #76]	; 0x4c
   2090c:	cmp	r3, #1
   20910:	bne	20d78 <__assert_fail@plt+0xee30>
   20914:	bl	11d2c <__ctype_b_loc@plt>
   20918:	ldr	r2, [r0]
   2091c:	sxth	r3, r5
   20920:	lsl	r3, r3, #1
   20924:	ldr	r1, [sp, #76]	; 0x4c
   20928:	ldrh	r3, [r2, r3]
   2092c:	mov	r0, r1
   20930:	and	r3, r3, #16384	; 0x4000
   20934:	cmp	r3, #0
   20938:	ldr	r3, [sp, #60]	; 0x3c
   2093c:	movne	r6, #1
   20940:	moveq	r6, #0
   20944:	movne	r2, #0
   20948:	andeq	r2, r3, #1
   2094c:	cmp	r2, #0
   20950:	beq	20384 <__assert_fail@plt+0xe43c>
   20954:	ldr	r2, [sp, #60]	; 0x3c
   20958:	mov	r6, #0
   2095c:	add	r1, r0, r7
   20960:	mov	ip, #39	; 0x27
   20964:	str	r6, [sp, #100]	; 0x64
   20968:	mov	r0, #0
   2096c:	ldr	lr, [sp, #36]	; 0x24
   20970:	str	r8, [sp, #36]	; 0x24
   20974:	ldr	r6, [sp, #40]	; 0x28
   20978:	ldr	r8, [sp, #44]	; 0x2c
   2097c:	b	20a2c <__assert_fail@plt+0xeae4>
   20980:	cmp	r8, #0
   20984:	bne	20f60 <__assert_fail@plt+0xf018>
   20988:	ldr	r0, [sp, #52]	; 0x34
   2098c:	eor	r3, fp, #1
   20990:	ands	r3, r0, r3
   20994:	beq	209c4 <__assert_fail@plt+0xea7c>
   20998:	cmp	sl, r4
   2099c:	add	r0, r4, #1
   209a0:	strbhi	ip, [r9, r4]
   209a4:	cmp	sl, r0
   209a8:	movhi	fp, #36	; 0x24
   209ac:	strbhi	fp, [r9, r0]
   209b0:	add	r0, r4, #2
   209b4:	mov	fp, r3
   209b8:	cmp	sl, r0
   209bc:	add	r4, r4, #3
   209c0:	strbhi	ip, [r9, r0]
   209c4:	cmp	sl, r4
   209c8:	movhi	r3, #92	; 0x5c
   209cc:	strbhi	r3, [r9, r4]
   209d0:	add	r3, r4, #1
   209d4:	cmp	sl, r3
   209d8:	bls	209e8 <__assert_fail@plt+0xeaa0>
   209dc:	lsr	r0, r5, #6
   209e0:	add	r0, r0, #48	; 0x30
   209e4:	strb	r0, [r9, r3]
   209e8:	add	r3, r4, #2
   209ec:	cmp	sl, r3
   209f0:	bls	20a00 <__assert_fail@plt+0xeab8>
   209f4:	ubfx	r0, r5, #3, #3
   209f8:	add	r0, r0, #48	; 0x30
   209fc:	strb	r0, [r9, r3]
   20a00:	add	r7, r7, #1
   20a04:	and	r5, r5, #7
   20a08:	cmp	r1, r7
   20a0c:	add	r5, r5, #48	; 0x30
   20a10:	add	r4, r4, #3
   20a14:	bls	20f74 <__assert_fail@plt+0xf02c>
   20a18:	mov	r0, r2
   20a1c:	cmp	sl, r4
   20a20:	strbhi	r5, [r9, r4]
   20a24:	add	r4, r4, #1
   20a28:	ldrb	r5, [lr, #1]!
   20a2c:	cmp	r2, #0
   20a30:	bne	20980 <__assert_fail@plt+0xea38>
   20a34:	eor	r3, r0, #1
   20a38:	cmp	r6, #0
   20a3c:	and	r3, r3, fp
   20a40:	uxtb	r3, r3
   20a44:	beq	20a58 <__assert_fail@plt+0xeb10>
   20a48:	cmp	sl, r4
   20a4c:	movhi	r6, #92	; 0x5c
   20a50:	strbhi	r6, [r9, r4]
   20a54:	add	r4, r4, #1
   20a58:	add	r7, r7, #1
   20a5c:	cmp	r7, r1
   20a60:	bcs	20f54 <__assert_fail@plt+0xf00c>
   20a64:	cmp	r3, #0
   20a68:	beq	20f98 <__assert_fail@plt+0xf050>
   20a6c:	cmp	sl, r4
   20a70:	add	r3, r4, #1
   20a74:	mov	r6, #0
   20a78:	strbhi	ip, [r9, r4]
   20a7c:	cmp	sl, r3
   20a80:	add	r4, r4, #2
   20a84:	mov	fp, r6
   20a88:	strbhi	ip, [r9, r3]
   20a8c:	b	20a1c <__assert_fail@plt+0xead4>
   20a90:	ldr	r3, [sp, #36]	; 0x24
   20a94:	ldrb	r5, [r3]
   20a98:	cmp	r5, #126	; 0x7e
   20a9c:	ldrls	pc, [pc, r5, lsl #2]
   20aa0:	b	20900 <__assert_fail@plt+0xe9b8>
   20aa4:	andeq	r0, r2, r4, asr #25
   20aa8:	andeq	r0, r2, r0, lsl #18
   20aac:	andeq	r0, r2, r0, lsl #18
   20ab0:	andeq	r0, r2, r0, lsl #18
   20ab4:	andeq	r0, r2, r0, lsl #18
   20ab8:	andeq	r0, r2, r0, lsl #18
   20abc:	andeq	r0, r2, r0, lsl #18
   20ac0:			; <UNDEFINED> instruction: 0x000201b8
   20ac4:			; <UNDEFINED> instruction: 0x000201b0
   20ac8:	andeq	r0, r2, r0, lsr r8
   20acc:			; <UNDEFINED> instruction: 0x00020cb8
   20ad0:	andeq	r0, r2, r0, lsl r8
   20ad4:	andeq	r0, r2, ip, asr r0
   20ad8:	andeq	r0, r2, ip, lsr #25
   20adc:	andeq	r0, r2, r0, lsl #18
   20ae0:	andeq	r0, r2, r0, lsl #18
   20ae4:	andeq	r0, r2, r0, lsl #18
   20ae8:	andeq	r0, r2, r0, lsl #18
   20aec:	andeq	r0, r2, r0, lsl #18
   20af0:	andeq	r0, r2, r0, lsl #18
   20af4:	andeq	r0, r2, r0, lsl #18
   20af8:	andeq	r0, r2, r0, lsl #18
   20afc:	andeq	r0, r2, r0, lsl #18
   20b00:	andeq	r0, r2, r0, lsl #18
   20b04:	andeq	r0, r2, r0, lsl #18
   20b08:	andeq	r0, r2, r0, lsl #18
   20b0c:	andeq	r0, r2, r0, lsl #18
   20b10:	andeq	r0, r2, r0, lsl #18
   20b14:	andeq	r0, r2, r0, lsl #18
   20b18:	andeq	r0, r2, r0, lsl #18
   20b1c:	andeq	r0, r2, r0, lsl #18
   20b20:	andeq	r0, r2, r0, lsl #18
   20b24:	andeq	r0, r2, r0, lsr #16
   20b28:	andeq	r0, r2, r0, lsr #25
   20b2c:	andeq	r0, r2, r0, lsr #25
   20b30:	andeq	r0, r2, r4, lsl #16
   20b34:	andeq	r0, r2, r0, lsr #25
   20b38:	strdeq	r0, [r2], -r4
   20b3c:	andeq	r0, r2, r0, lsr #25
   20b40:	andeq	r0, r2, r8, ror #16
   20b44:	andeq	r0, r2, r0, lsr #25
   20b48:	andeq	r0, r2, r0, lsr #25
   20b4c:	andeq	r0, r2, r0, lsr #25
   20b50:	strdeq	r0, [r2], -r4
   20b54:	strdeq	r0, [r2], -r4
   20b58:	strdeq	r0, [r2], -r4
   20b5c:	strdeq	r0, [r2], -r4
   20b60:	strdeq	r0, [r2], -r4
   20b64:	strdeq	r0, [r2], -r4
   20b68:	strdeq	r0, [r2], -r4
   20b6c:	strdeq	r0, [r2], -r4
   20b70:	strdeq	r0, [r2], -r4
   20b74:	strdeq	r0, [r2], -r4
   20b78:	strdeq	r0, [r2], -r4
   20b7c:	strdeq	r0, [r2], -r4
   20b80:	strdeq	r0, [r2], -r4
   20b84:	strdeq	r0, [r2], -r4
   20b88:	strdeq	r0, [r2], -r4
   20b8c:	strdeq	r0, [r2], -r4
   20b90:	andeq	r0, r2, r0, lsr #25
   20b94:	andeq	r0, r2, r0, lsr #25
   20b98:	andeq	r0, r2, r0, lsr #25
   20b9c:	andeq	r0, r2, r0, lsr #25
   20ba0:	andeq	r0, r2, r0, asr #16
   20ba4:	andeq	r0, r2, r0, lsl #18
   20ba8:	strdeq	r0, [r2], -r4
   20bac:	strdeq	r0, [r2], -r4
   20bb0:	strdeq	r0, [r2], -r4
   20bb4:	strdeq	r0, [r2], -r4
   20bb8:	strdeq	r0, [r2], -r4
   20bbc:	strdeq	r0, [r2], -r4
   20bc0:	strdeq	r0, [r2], -r4
   20bc4:	strdeq	r0, [r2], -r4
   20bc8:	strdeq	r0, [r2], -r4
   20bcc:	strdeq	r0, [r2], -r4
   20bd0:	strdeq	r0, [r2], -r4
   20bd4:	strdeq	r0, [r2], -r4
   20bd8:	strdeq	r0, [r2], -r4
   20bdc:	strdeq	r0, [r2], -r4
   20be0:	strdeq	r0, [r2], -r4
   20be4:	strdeq	r0, [r2], -r4
   20be8:	strdeq	r0, [r2], -r4
   20bec:	strdeq	r0, [r2], -r4
   20bf0:	strdeq	r0, [r2], -r4
   20bf4:	strdeq	r0, [r2], -r4
   20bf8:	strdeq	r0, [r2], -r4
   20bfc:	strdeq	r0, [r2], -r4
   20c00:	strdeq	r0, [r2], -r4
   20c04:	strdeq	r0, [r2], -r4
   20c08:	strdeq	r0, [r2], -r4
   20c0c:	strdeq	r0, [r2], -r4
   20c10:	andeq	r0, r2, r0, lsr #25
   20c14:	andeq	r0, r2, r0, asr #15
   20c18:	strdeq	r0, [r2], -r4
   20c1c:	andeq	r0, r2, r0, lsr #25
   20c20:	strdeq	r0, [r2], -r4
   20c24:	andeq	r0, r2, r0, lsr #25
   20c28:	strdeq	r0, [r2], -r4
   20c2c:	strdeq	r0, [r2], -r4
   20c30:	strdeq	r0, [r2], -r4
   20c34:	strdeq	r0, [r2], -r4
   20c38:	strdeq	r0, [r2], -r4
   20c3c:	strdeq	r0, [r2], -r4
   20c40:	strdeq	r0, [r2], -r4
   20c44:	strdeq	r0, [r2], -r4
   20c48:	strdeq	r0, [r2], -r4
   20c4c:	strdeq	r0, [r2], -r4
   20c50:	strdeq	r0, [r2], -r4
   20c54:	strdeq	r0, [r2], -r4
   20c58:	strdeq	r0, [r2], -r4
   20c5c:	strdeq	r0, [r2], -r4
   20c60:	strdeq	r0, [r2], -r4
   20c64:	strdeq	r0, [r2], -r4
   20c68:	strdeq	r0, [r2], -r4
   20c6c:	strdeq	r0, [r2], -r4
   20c70:	strdeq	r0, [r2], -r4
   20c74:	strdeq	r0, [r2], -r4
   20c78:	strdeq	r0, [r2], -r4
   20c7c:	strdeq	r0, [r2], -r4
   20c80:	strdeq	r0, [r2], -r4
   20c84:	strdeq	r0, [r2], -r4
   20c88:	strdeq	r0, [r2], -r4
   20c8c:	strdeq	r0, [r2], -r4
   20c90:	muleq	r2, ip, r7
   20c94:	andeq	r0, r2, r0, lsr #25
   20c98:	muleq	r2, ip, r7
   20c9c:	andeq	r0, r2, r4, lsl #16
   20ca0:	mov	r3, #0
   20ca4:	str	r3, [sp, #40]	; 0x28
   20ca8:	b	20380 <__assert_fail@plt+0xe438>
   20cac:	mov	r3, #0
   20cb0:	str	r3, [sp, #40]	; 0x28
   20cb4:	b	20318 <__assert_fail@plt+0xe3d0>
   20cb8:	mov	r3, #0
   20cbc:	str	r3, [sp, #40]	; 0x28
   20cc0:	b	2034c <__assert_fail@plt+0xe404>
   20cc4:	ldr	r3, [sp, #44]	; 0x2c
   20cc8:	cmp	r3, #0
   20ccc:	beq	20264 <__assert_fail@plt+0xe31c>
   20cd0:	ldr	r3, [sp, #52]	; 0x34
   20cd4:	mov	fp, r9
   20cd8:	str	r3, [sp, #60]	; 0x3c
   20cdc:	b	203dc <__assert_fail@plt+0xe494>
   20ce0:	ldr	r3, [sp, #44]	; 0x2c
   20ce4:	cmp	r3, #0
   20ce8:	bne	2111c <__assert_fail@plt+0xf1d4>
   20cec:	str	r3, [sp, #40]	; 0x28
   20cf0:	cmp	sl, #0
   20cf4:	ldr	r3, [sp, #84]	; 0x54
   20cf8:	clz	r3, r3
   20cfc:	lsr	r3, r3, #5
   20d00:	moveq	r3, #0
   20d04:	cmp	r3, #0
   20d08:	strne	sl, [sp, #84]	; 0x54
   20d0c:	movne	sl, #0
   20d10:	bne	20d40 <__assert_fail@plt+0xedf8>
   20d14:	cmp	sl, r4
   20d18:	movhi	r3, #39	; 0x27
   20d1c:	strbhi	r3, [r9, r4]
   20d20:	add	r3, r4, #1
   20d24:	cmp	sl, r3
   20d28:	movhi	r2, #92	; 0x5c
   20d2c:	strbhi	r2, [r9, r3]
   20d30:	add	r3, r4, #2
   20d34:	cmp	sl, r3
   20d38:	movhi	r2, #39	; 0x27
   20d3c:	strbhi	r2, [r9, r3]
   20d40:	mov	r3, #0
   20d44:	add	r4, r4, #3
   20d48:	str	r6, [sp, #80]	; 0x50
   20d4c:	mov	fp, r3
   20d50:	mov	r5, #39	; 0x27
   20d54:	b	20220 <__assert_fail@plt+0xe2d8>
   20d58:	ldr	r3, [sp, #44]	; 0x2c
   20d5c:	cmp	r3, #0
   20d60:	bne	2111c <__assert_fail@plt+0xf1d4>
   20d64:	mov	r6, #0
   20d68:	mov	r5, #63	; 0x3f
   20d6c:	str	r3, [sp, #40]	; 0x28
   20d70:	mov	r3, fp
   20d74:	b	20220 <__assert_fail@plt+0xe2d8>
   20d78:	mov	r2, #0
   20d7c:	mov	r3, #0
   20d80:	cmn	r8, #1
   20d84:	strd	r2, [sp, #128]	; 0x80
   20d88:	bne	20d98 <__assert_fail@plt+0xee50>
   20d8c:	ldr	r0, [sp, #28]
   20d90:	bl	11d50 <strlen@plt>
   20d94:	mov	r8, r0
   20d98:	str	r9, [sp, #100]	; 0x64
   20d9c:	mov	r3, #0
   20da0:	strd	sl, [sp, #104]	; 0x68
   20da4:	ldr	sl, [sp, #28]
   20da8:	str	r5, [sp, #112]	; 0x70
   20dac:	mov	r5, r3
   20db0:	ldr	r9, [sp, #68]	; 0x44
   20db4:	str	r4, [sp, #116]	; 0x74
   20db8:	add	r4, r7, r5
   20dbc:	add	r3, sp, #128	; 0x80
   20dc0:	add	fp, sl, r4
   20dc4:	sub	r2, r8, r4
   20dc8:	mov	r1, fp
   20dcc:	add	r0, sp, #124	; 0x7c
   20dd0:	bl	26810 <__assert_fail@plt+0x148c8>
   20dd4:	subs	r1, r0, #0
   20dd8:	beq	20e18 <__assert_fail@plt+0xeed0>
   20ddc:	cmn	r1, #1
   20de0:	beq	21170 <__assert_fail@plt+0xf228>
   20de4:	cmn	r1, #2
   20de8:	beq	21190 <__assert_fail@plt+0xf248>
   20dec:	cmp	r9, #0
   20df0:	bne	20e48 <__assert_fail@plt+0xef00>
   20df4:	ldr	r0, [sp, #124]	; 0x7c
   20df8:	add	r5, r5, r1
   20dfc:	bl	11be8 <iswprint@plt>
   20e00:	cmp	r0, #0
   20e04:	add	r0, sp, #128	; 0x80
   20e08:	moveq	r6, #0
   20e0c:	bl	11af8 <mbsinit@plt>
   20e10:	cmp	r0, #0
   20e14:	beq	20db8 <__assert_fail@plt+0xee70>
   20e18:	ldr	r3, [sp, #60]	; 0x3c
   20e1c:	add	r9, sp, #100	; 0x64
   20e20:	mov	r0, r5
   20e24:	ldm	r9, {r9, sl, fp}
   20e28:	eor	r2, r6, #1
   20e2c:	ldr	r5, [sp, #112]	; 0x70
   20e30:	and	r2, r2, r3
   20e34:	uxtb	r2, r2
   20e38:	ldr	r4, [sp, #116]	; 0x74
   20e3c:	cmp	r0, #1
   20e40:	bhi	2095c <__assert_fail@plt+0xea14>
   20e44:	b	2094c <__assert_fail@plt+0xea04>
   20e48:	cmp	r1, #1
   20e4c:	beq	20df4 <__assert_fail@plt+0xeeac>
   20e50:	add	r2, r4, #1
   20e54:	add	r3, sl, r1
   20e58:	add	r2, sl, r2
   20e5c:	add	r4, r3, r4
   20e60:	ldrb	r3, [r2], #1
   20e64:	sub	r3, r3, #91	; 0x5b
   20e68:	cmp	r3, #33	; 0x21
   20e6c:	ldrls	pc, [pc, r3, lsl #2]
   20e70:	b	20efc <__assert_fail@plt+0xefb4>
   20e74:	andeq	r0, r2, r8, lsl #30
   20e78:	andeq	r0, r2, r8, lsl #30
   20e7c:	strdeq	r0, [r2], -ip
   20e80:	andeq	r0, r2, r8, lsl #30
   20e84:	strdeq	r0, [r2], -ip
   20e88:	andeq	r0, r2, r8, lsl #30
   20e8c:	strdeq	r0, [r2], -ip
   20e90:	strdeq	r0, [r2], -ip
   20e94:	strdeq	r0, [r2], -ip
   20e98:	strdeq	r0, [r2], -ip
   20e9c:	strdeq	r0, [r2], -ip
   20ea0:	strdeq	r0, [r2], -ip
   20ea4:	strdeq	r0, [r2], -ip
   20ea8:	strdeq	r0, [r2], -ip
   20eac:	strdeq	r0, [r2], -ip
   20eb0:	strdeq	r0, [r2], -ip
   20eb4:	strdeq	r0, [r2], -ip
   20eb8:	strdeq	r0, [r2], -ip
   20ebc:	strdeq	r0, [r2], -ip
   20ec0:	strdeq	r0, [r2], -ip
   20ec4:	strdeq	r0, [r2], -ip
   20ec8:	strdeq	r0, [r2], -ip
   20ecc:	strdeq	r0, [r2], -ip
   20ed0:	strdeq	r0, [r2], -ip
   20ed4:	strdeq	r0, [r2], -ip
   20ed8:	strdeq	r0, [r2], -ip
   20edc:	strdeq	r0, [r2], -ip
   20ee0:	strdeq	r0, [r2], -ip
   20ee4:	strdeq	r0, [r2], -ip
   20ee8:	strdeq	r0, [r2], -ip
   20eec:	strdeq	r0, [r2], -ip
   20ef0:	strdeq	r0, [r2], -ip
   20ef4:	strdeq	r0, [r2], -ip
   20ef8:	andeq	r0, r2, r8, lsl #30
   20efc:	cmp	r4, r2
   20f00:	bne	20e60 <__assert_fail@plt+0xef18>
   20f04:	b	20df4 <__assert_fail@plt+0xeeac>
   20f08:	mov	r3, #2
   20f0c:	ldr	fp, [sp, #100]	; 0x64
   20f10:	str	r3, [sp, #176]	; 0xb0
   20f14:	ldr	sl, [sp, #104]	; 0x68
   20f18:	b	203dc <__assert_fail@plt+0xe494>
   20f1c:	ldr	r2, [sp, #52]	; 0x34
   20f20:	mov	fp, r9
   20f24:	ldr	r3, [sp, #60]	; 0x3c
   20f28:	and	r3, r3, r2
   20f2c:	str	r3, [sp, #60]	; 0x3c
   20f30:	b	203dc <__assert_fail@plt+0xe494>
   20f34:	cmp	sl, r4
   20f38:	movhi	r2, fp
   20f3c:	bhi	202b4 <__assert_fail@plt+0xe36c>
   20f40:	mov	r2, r4
   20f44:	b	202c4 <__assert_fail@plt+0xe37c>
   20f48:	mov	r6, r3
   20f4c:	mov	r5, #63	; 0x3f
   20f50:	b	20384 <__assert_fail@plt+0xe43c>
   20f54:	ldr	r8, [sp, #36]	; 0x24
   20f58:	ldr	r6, [sp, #100]	; 0x64
   20f5c:	b	20230 <__assert_fail@plt+0xe2e8>
   20f60:	mov	fp, r9
   20f64:	ldr	r8, [sp, #36]	; 0x24
   20f68:	ldr	r3, [sp, #52]	; 0x34
   20f6c:	str	r3, [sp, #60]	; 0x3c
   20f70:	b	203dc <__assert_fail@plt+0xe494>
   20f74:	ldr	r8, [sp, #36]	; 0x24
   20f78:	ldr	r6, [sp, #100]	; 0x64
   20f7c:	b	200c8 <__assert_fail@plt+0xe180>
   20f80:	mov	r3, #0
   20f84:	add	r4, r4, #4
   20f88:	mov	fp, r2
   20f8c:	mov	r6, r3
   20f90:	mov	r5, #48	; 0x30
   20f94:	b	20220 <__assert_fail@plt+0xe2d8>
   20f98:	mov	r6, r3
   20f9c:	b	20a1c <__assert_fail@plt+0xead4>
   20fa0:	mov	r3, #1
   20fa4:	movw	r2, #38872	; 0x97d8
   20fa8:	movt	r2, #2
   20fac:	mov	r4, r3
   20fb0:	mov	r9, sl
   20fb4:	str	r3, [sp, #32]
   20fb8:	str	sl, [sp, #44]	; 0x2c
   20fbc:	str	r3, [sp, #48]	; 0x30
   20fc0:	str	sl, [sp, #52]	; 0x34
   20fc4:	str	r3, [sp, #56]	; 0x38
   20fc8:	str	r3, [sp, #60]	; 0x3c
   20fcc:	str	sl, [sp, #64]	; 0x40
   20fd0:	str	sl, [sp, #68]	; 0x44
   20fd4:	str	r2, [sp, #72]	; 0x48
   20fd8:	str	sl, [sp, #80]	; 0x50
   20fdc:	str	sl, [sp, #84]	; 0x54
   20fe0:	str	sl, [sp, #88]	; 0x58
   20fe4:	b	1fad4 <__assert_fail@plt+0xdb8c>
   20fe8:	mov	r3, #0
   20fec:	mov	r5, #48	; 0x30
   20ff0:	mov	r6, r3
   20ff4:	b	20220 <__assert_fail@plt+0xe2d8>
   20ff8:	cmp	sl, r4
   20ffc:	mov	r5, #48	; 0x30
   21000:	movhi	r3, #48	; 0x30
   21004:	strbhi	r3, [r9, r4]
   21008:	add	r3, r2, #2
   2100c:	add	r4, r2, #3
   21010:	cmp	sl, r3
   21014:	movhi	r1, #48	; 0x30
   21018:	strbhi	r1, [r9, r3]
   2101c:	mov	r3, #0
   21020:	b	202fc <__assert_fail@plt+0xe3b4>
   21024:	ldr	r3, [sp, #48]	; 0x30
   21028:	str	r3, [sp, #40]	; 0x28
   2102c:	b	20908 <__assert_fail@plt+0xe9c0>
   21030:	ldr	r2, [sp, #28]
   21034:	ldrb	r2, [r2, r3]
   21038:	sub	r1, r2, #33	; 0x21
   2103c:	cmp	r1, #29
   21040:	ldrls	pc, [pc, r1, lsl #2]
   21044:	b	20380 <__assert_fail@plt+0xe438>
   21048:	andeq	r1, r2, r0, asr #1
   2104c:	andeq	r0, r2, r0, lsl #7
   21050:	andeq	r0, r2, r0, lsl #7
   21054:	andeq	r0, r2, r0, lsl #7
   21058:	andeq	r0, r2, r0, lsl #7
   2105c:	andeq	r0, r2, r0, lsl #7
   21060:	andeq	r1, r2, r0, asr #1
   21064:	andeq	r1, r2, r0, asr #1
   21068:	andeq	r1, r2, r0, asr #1
   2106c:	andeq	r0, r2, r0, lsl #7
   21070:	andeq	r0, r2, r0, lsl #7
   21074:	andeq	r0, r2, r0, lsl #7
   21078:	andeq	r1, r2, r0, asr #1
   2107c:	andeq	r0, r2, r0, lsl #7
   21080:	andeq	r1, r2, r0, asr #1
   21084:	andeq	r0, r2, r0, lsl #7
   21088:	andeq	r0, r2, r0, lsl #7
   2108c:	andeq	r0, r2, r0, lsl #7
   21090:	andeq	r0, r2, r0, lsl #7
   21094:	andeq	r0, r2, r0, lsl #7
   21098:	andeq	r0, r2, r0, lsl #7
   2109c:	andeq	r0, r2, r0, lsl #7
   210a0:	andeq	r0, r2, r0, lsl #7
   210a4:	andeq	r0, r2, r0, lsl #7
   210a8:	andeq	r0, r2, r0, lsl #7
   210ac:	andeq	r0, r2, r0, lsl #7
   210b0:	andeq	r0, r2, r0, lsl #7
   210b4:	andeq	r1, r2, r0, asr #1
   210b8:	andeq	r1, r2, r0, asr #1
   210bc:	andeq	r1, r2, r0, asr #1
   210c0:	ldr	r1, [sp, #44]	; 0x2c
   210c4:	cmp	r1, #0
   210c8:	bne	21328 <__assert_fail@plt+0xf3e0>
   210cc:	cmp	sl, r4
   210d0:	mov	r7, r3
   210d4:	movhi	r1, #63	; 0x3f
   210d8:	mov	r5, r2
   210dc:	mov	r3, fp
   210e0:	strbhi	r1, [r9, r4]
   210e4:	add	r1, r4, #1
   210e8:	cmp	sl, r1
   210ec:	movhi	r0, #34	; 0x22
   210f0:	strbhi	r0, [r9, r1]
   210f4:	add	r1, r4, #2
   210f8:	cmp	sl, r1
   210fc:	movhi	r0, #34	; 0x22
   21100:	strbhi	r0, [r9, r1]
   21104:	add	r1, r4, #3
   21108:	add	r4, r4, #4
   2110c:	cmp	sl, r1
   21110:	movhi	r0, #63	; 0x3f
   21114:	strbhi	r0, [r9, r1]
   21118:	b	202fc <__assert_fail@plt+0xe3b4>
   2111c:	mov	fp, r9
   21120:	b	203dc <__assert_fail@plt+0xe494>
   21124:	ldr	r3, [sp, #188]	; 0xbc
   21128:	ldrb	r3, [r3]
   2112c:	cmp	r3, #0
   21130:	beq	1fa6c <__assert_fail@plt+0xdb24>
   21134:	ldr	r2, [sp, #188]	; 0xbc
   21138:	cmp	sl, r4
   2113c:	bls	2115c <__assert_fail@plt+0xf214>
   21140:	strb	r3, [fp, r4]
   21144:	add	r4, r4, #1
   21148:	ldrb	r3, [r2, #1]!
   2114c:	cmp	r3, #0
   21150:	beq	1fa6c <__assert_fail@plt+0xdb24>
   21154:	cmp	sl, r4
   21158:	bhi	21140 <__assert_fail@plt+0xf1f8>
   2115c:	ldrb	r3, [r2, #1]!
   21160:	add	r4, r4, #1
   21164:	cmp	r3, #0
   21168:	bne	21138 <__assert_fail@plt+0xf1f0>
   2116c:	b	1fa6c <__assert_fail@plt+0xdb24>
   21170:	add	r9, sp, #100	; 0x64
   21174:	mov	r0, r5
   21178:	ldr	r2, [sp, #60]	; 0x3c
   2117c:	mov	r6, #0
   21180:	ldm	r9, {r9, sl, fp}
   21184:	ldr	r5, [sp, #112]	; 0x70
   21188:	ldr	r4, [sp, #116]	; 0x74
   2118c:	b	20e3c <__assert_fail@plt+0xeef4>
   21190:	cmp	r4, r8
   21194:	add	r9, sp, #100	; 0x64
   21198:	mov	r1, r4
   2119c:	mov	r2, fp
   211a0:	ldm	r9, {r9, sl, fp}
   211a4:	mov	r3, r5
   211a8:	mov	r0, r5
   211ac:	ldr	r5, [sp, #112]	; 0x70
   211b0:	ldr	r4, [sp, #116]	; 0x74
   211b4:	bcs	211e8 <__assert_fail@plt+0xf2a0>
   211b8:	ldrb	r6, [r2]
   211bc:	cmp	r6, #0
   211c0:	bne	211d4 <__assert_fail@plt+0xf28c>
   211c4:	b	21320 <__assert_fail@plt+0xf3d8>
   211c8:	ldrb	r6, [r2, #1]!
   211cc:	cmp	r6, #0
   211d0:	beq	212b8 <__assert_fail@plt+0xf370>
   211d4:	add	r3, r3, #1
   211d8:	add	r1, r7, r3
   211dc:	cmp	r8, r1
   211e0:	bhi	211c8 <__assert_fail@plt+0xf280>
   211e4:	mov	r0, r3
   211e8:	mov	r6, #0
   211ec:	ldr	r2, [sp, #60]	; 0x3c
   211f0:	b	20e3c <__assert_fail@plt+0xeef4>
   211f4:	mov	r3, #1
   211f8:	mov	r4, #0
   211fc:	mov	r9, r4
   21200:	str	r3, [sp, #32]
   21204:	str	r3, [sp, #44]	; 0x2c
   21208:	str	r3, [sp, #48]	; 0x30
   2120c:	str	r4, [sp, #52]	; 0x34
   21210:	str	r3, [sp, #56]	; 0x38
   21214:	str	r3, [sp, #60]	; 0x3c
   21218:	str	r3, [sp, #88]	; 0x58
   2121c:	movw	r3, #38872	; 0x97d8
   21220:	movt	r3, #2
   21224:	str	r4, [sp, #64]	; 0x40
   21228:	str	r4, [sp, #68]	; 0x44
   2122c:	str	r3, [sp, #72]	; 0x48
   21230:	str	r4, [sp, #80]	; 0x50
   21234:	str	r4, [sp, #84]	; 0x54
   21238:	b	1fad4 <__assert_fail@plt+0xdb8c>
   2123c:	mov	fp, r9
   21240:	b	203f0 <__assert_fail@plt+0xe4a8>
   21244:	ldr	r3, [sp, #48]	; 0x30
   21248:	b	20d64 <__assert_fail@plt+0xee1c>
   2124c:	mov	r2, r3
   21250:	ldr	r3, [sp, #72]	; 0x48
   21254:	cmp	r3, #0
   21258:	moveq	r2, #0
   2125c:	andne	r2, r2, #1
   21260:	cmp	r2, #0
   21264:	beq	21294 <__assert_fail@plt+0xf34c>
   21268:	mov	r2, r3
   2126c:	ldrb	r3, [r3]
   21270:	cmp	r3, #0
   21274:	beq	21294 <__assert_fail@plt+0xf34c>
   21278:	cmp	sl, r4
   2127c:	bls	212a4 <__assert_fail@plt+0xf35c>
   21280:	strb	r3, [fp, r4]
   21284:	add	r4, r4, #1
   21288:	ldrb	r3, [r2, #1]!
   2128c:	cmp	r3, #0
   21290:	bne	21278 <__assert_fail@plt+0xf330>
   21294:	cmp	sl, r4
   21298:	movhi	r3, #0
   2129c:	strbhi	r3, [fp, r4]
   212a0:	b	2042c <__assert_fail@plt+0xe4e4>
   212a4:	ldrb	r3, [r2, #1]!
   212a8:	add	r4, r4, #1
   212ac:	cmp	r3, #0
   212b0:	bne	21278 <__assert_fail@plt+0xf330>
   212b4:	b	21294 <__assert_fail@plt+0xf34c>
   212b8:	mov	r0, r3
   212bc:	ldr	r2, [sp, #60]	; 0x3c
   212c0:	b	20e3c <__assert_fail@plt+0xeef4>
   212c4:	mov	ip, #5
   212c8:	mov	r3, r8
   212cc:	ldr	r1, [sp, #84]	; 0x54
   212d0:	str	ip, [sp]
   212d4:	ldr	r2, [sp, #180]	; 0xb4
   212d8:	ldr	ip, [sp, #188]	; 0xbc
   212dc:	ldr	r0, [sp, #184]	; 0xb8
   212e0:	str	r2, [sp, #4]
   212e4:	ldr	r2, [sp, #28]
   212e8:	str	ip, [sp, #12]
   212ec:	ldr	ip, [sp, #192]	; 0xc0
   212f0:	str	r0, [sp, #8]
   212f4:	mov	r0, fp
   212f8:	str	ip, [sp, #16]
   212fc:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21300:	mov	r4, r0
   21304:	b	2042c <__assert_fail@plt+0xe4e4>
   21308:	mov	r6, r3
   2130c:	str	r3, [sp, #40]	; 0x28
   21310:	b	2039c <__assert_fail@plt+0xe454>
   21314:	mov	r3, #2
   21318:	str	r3, [sp, #176]	; 0xb0
   2131c:	b	203dc <__assert_fail@plt+0xe494>
   21320:	ldr	r2, [sp, #60]	; 0x3c
   21324:	b	20e3c <__assert_fail@plt+0xeef4>
   21328:	mov	r3, #5
   2132c:	mov	fp, r9
   21330:	str	r3, [sp, #176]	; 0xb0
   21334:	b	203f0 <__assert_fail@plt+0xe4a8>
   21338:	mov	r1, #1
   2133c:	mov	r9, #0
   21340:	mov	r3, r9
   21344:	mov	r2, r9
   21348:	str	r1, [sp, #32]
   2134c:	str	sl, [sp, #84]	; 0x54
   21350:	b	20178 <__assert_fail@plt+0xe230>
   21354:	mov	r3, #0
   21358:	mov	r2, #1
   2135c:	mov	r9, r3
   21360:	mov	r4, r3
   21364:	str	r2, [sp, #32]
   21368:	strd	r2, [sp, #44]	; 0x2c
   2136c:	strd	r2, [sp, #56]	; 0x38
   21370:	str	r3, [sp, #80]	; 0x50
   21374:	str	r3, [sp, #84]	; 0x54
   21378:	str	r3, [sp, #88]	; 0x58
   2137c:	movw	r3, #38892	; 0x97ec
   21380:	movt	r3, #2
   21384:	str	r2, [sp, #52]	; 0x34
   21388:	str	r2, [sp, #64]	; 0x40
   2138c:	str	r2, [sp, #68]	; 0x44
   21390:	str	r3, [sp, #72]	; 0x48
   21394:	b	1fad4 <__assert_fail@plt+0xdb8c>
   21398:	bl	11f24 <abort@plt>
   2139c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   213a0:	mov	r4, r0
   213a4:	mov	r5, r3
   213a8:	strd	r6, [sp, #8]
   213ac:	movw	r7, #41588	; 0xa274
   213b0:	movt	r7, #3
   213b4:	strd	r8, [sp, #16]
   213b8:	strd	sl, [sp, #24]
   213bc:	mov	sl, r1
   213c0:	mov	fp, r2
   213c4:	str	lr, [sp, #32]
   213c8:	sub	sp, sp, #60	; 0x3c
   213cc:	bl	11d74 <__errno_location@plt>
   213d0:	mov	r8, r0
   213d4:	cmn	r4, #-2147483647	; 0x80000001
   213d8:	ldr	r6, [r7]
   213dc:	movne	r0, #0
   213e0:	moveq	r0, #1
   213e4:	ldr	r3, [r8]
   213e8:	orrs	r0, r0, r4, lsr #31
   213ec:	str	r3, [sp, #28]
   213f0:	bne	21580 <__assert_fail@plt+0xf638>
   213f4:	ldr	r3, [r7, #4]
   213f8:	cmp	r3, r4
   213fc:	bgt	2145c <__assert_fail@plt+0xf514>
   21400:	add	r1, r7, #8
   21404:	sub	r2, r4, r3
   21408:	str	r3, [sp, #52]	; 0x34
   2140c:	cmp	r6, r1
   21410:	add	r2, r2, #1
   21414:	beq	21558 <__assert_fail@plt+0xf610>
   21418:	mov	r1, #8
   2141c:	mov	r0, r6
   21420:	mvn	r3, #-2147483648	; 0x80000000
   21424:	str	r1, [sp]
   21428:	add	r1, sp, #52	; 0x34
   2142c:	bl	24edc <__assert_fail@plt+0x12f94>
   21430:	mov	r6, r0
   21434:	str	r0, [r7]
   21438:	ldr	r0, [r7, #4]
   2143c:	mov	r1, #0
   21440:	ldr	r2, [sp, #52]	; 0x34
   21444:	sub	r2, r2, r0
   21448:	add	r0, r6, r0, lsl #3
   2144c:	lsl	r2, r2, #3
   21450:	bl	11d98 <memset@plt>
   21454:	ldr	r3, [sp, #52]	; 0x34
   21458:	str	r3, [r7, #4]
   2145c:	ldr	r1, [r5, #4]
   21460:	add	r0, r6, r4, lsl #3
   21464:	add	ip, r5, #8
   21468:	mov	r3, fp
   2146c:	mov	r2, sl
   21470:	ldr	r7, [r0, #4]
   21474:	str	r0, [sp, #36]	; 0x24
   21478:	str	ip, [sp, #40]	; 0x28
   2147c:	orr	r0, r1, #1
   21480:	ldr	r9, [r6, r4, lsl #3]
   21484:	str	ip, [sp, #8]
   21488:	ldr	lr, [r5, #44]	; 0x2c
   2148c:	str	r0, [sp, #4]
   21490:	ldr	ip, [r5]
   21494:	mov	r1, r9
   21498:	str	ip, [sp, #32]
   2149c:	ldr	ip, [r5, #40]	; 0x28
   214a0:	str	ip, [sp, #12]
   214a4:	ldr	ip, [sp, #32]
   214a8:	str	lr, [sp, #16]
   214ac:	str	r0, [sp, #44]	; 0x2c
   214b0:	mov	r0, r7
   214b4:	str	ip, [sp]
   214b8:	bl	1f9b0 <__assert_fail@plt+0xda68>
   214bc:	cmp	r9, r0
   214c0:	bhi	21530 <__assert_fail@plt+0xf5e8>
   214c4:	add	r9, r0, #1
   214c8:	movw	r3, #43208	; 0xa8c8
   214cc:	movt	r3, #3
   214d0:	cmp	r7, r3
   214d4:	str	r9, [r6, r4, lsl #3]
   214d8:	beq	214e4 <__assert_fail@plt+0xf59c>
   214dc:	mov	r0, r7
   214e0:	bl	1d29c <__assert_fail@plt+0xb354>
   214e4:	mov	r0, r9
   214e8:	bl	24c38 <__assert_fail@plt+0x12cf0>
   214ec:	ldr	ip, [r5]
   214f0:	mov	r3, fp
   214f4:	mov	r2, sl
   214f8:	mov	r1, r9
   214fc:	mov	r7, r0
   21500:	ldr	lr, [sp, #36]	; 0x24
   21504:	ldr	r4, [r5, #40]	; 0x28
   21508:	str	r0, [lr, #4]
   2150c:	ldr	lr, [r5, #44]	; 0x2c
   21510:	str	ip, [sp]
   21514:	ldr	ip, [sp, #44]	; 0x2c
   21518:	str	ip, [sp, #4]
   2151c:	ldr	ip, [sp, #40]	; 0x28
   21520:	str	r4, [sp, #12]
   21524:	str	lr, [sp, #16]
   21528:	str	ip, [sp, #8]
   2152c:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21530:	ldr	r3, [sp, #28]
   21534:	mov	r0, r7
   21538:	str	r3, [r8]
   2153c:	add	sp, sp, #60	; 0x3c
   21540:	ldrd	r4, [sp]
   21544:	ldrd	r6, [sp, #8]
   21548:	ldrd	r8, [sp, #16]
   2154c:	ldrd	sl, [sp, #24]
   21550:	add	sp, sp, #32
   21554:	pop	{pc}		; (ldr pc, [sp], #4)
   21558:	mov	r1, #8
   2155c:	mvn	r3, #-2147483648	; 0x80000000
   21560:	str	r1, [sp]
   21564:	add	r1, sp, #52	; 0x34
   21568:	bl	24edc <__assert_fail@plt+0x12f94>
   2156c:	ldrd	r2, [r7, #8]
   21570:	mov	r6, r0
   21574:	str	r0, [r7]
   21578:	strd	r2, [r0]
   2157c:	b	21438 <__assert_fail@plt+0xf4f0>
   21580:	bl	11f24 <abort@plt>
   21584:	strd	r4, [sp, #-16]!
   21588:	mov	r5, r0
   2158c:	str	r6, [sp, #8]
   21590:	str	lr, [sp, #12]
   21594:	bl	11d74 <__errno_location@plt>
   21598:	mov	r4, r0
   2159c:	cmp	r5, #0
   215a0:	ldr	r0, [pc, #32]	; 215c8 <__assert_fail@plt+0xf680>
   215a4:	mov	r1, #48	; 0x30
   215a8:	movne	r0, r5
   215ac:	ldr	r6, [r4]
   215b0:	bl	2507c <__assert_fail@plt+0x13134>
   215b4:	str	r6, [r4]
   215b8:	ldrd	r4, [sp]
   215bc:	ldr	r6, [sp, #8]
   215c0:	add	sp, sp, #12
   215c4:	pop	{pc}		; (ldr pc, [sp], #4)
   215c8:	andeq	sl, r3, r8, asr #19
   215cc:	ldr	r3, [pc, #12]	; 215e0 <__assert_fail@plt+0xf698>
   215d0:	cmp	r0, #0
   215d4:	moveq	r0, r3
   215d8:	ldr	r0, [r0]
   215dc:	bx	lr
   215e0:	andeq	sl, r3, r8, asr #19
   215e4:	ldr	r3, [pc, #12]	; 215f8 <__assert_fail@plt+0xf6b0>
   215e8:	cmp	r0, #0
   215ec:	moveq	r0, r3
   215f0:	str	r1, [r0]
   215f4:	bx	lr
   215f8:	andeq	sl, r3, r8, asr #19
   215fc:	ldr	r3, [pc, #52]	; 21638 <__assert_fail@plt+0xf6f0>
   21600:	cmp	r0, #0
   21604:	push	{lr}		; (str lr, [sp, #-4]!)
   21608:	lsr	lr, r1, #5
   2160c:	and	r1, r1, #31
   21610:	moveq	r0, r3
   21614:	add	r3, r0, #8
   21618:	ldr	ip, [r3, lr, lsl #2]
   2161c:	lsr	r0, ip, r1
   21620:	eor	r2, r2, r0
   21624:	and	r0, r0, #1
   21628:	and	r2, r2, #1
   2162c:	eor	r1, ip, r2, lsl r1
   21630:	str	r1, [r3, lr, lsl #2]
   21634:	pop	{pc}		; (ldr pc, [sp], #4)
   21638:	andeq	sl, r3, r8, asr #19
   2163c:	ldr	r3, [pc, #16]	; 21654 <__assert_fail@plt+0xf70c>
   21640:	cmp	r0, #0
   21644:	movne	r3, r0
   21648:	ldr	r0, [r3, #4]
   2164c:	str	r1, [r3, #4]
   21650:	bx	lr
   21654:	andeq	sl, r3, r8, asr #19
   21658:	ldr	r3, [pc, #48]	; 21690 <__assert_fail@plt+0xf748>
   2165c:	cmp	r0, #0
   21660:	mov	ip, #10
   21664:	moveq	r0, r3
   21668:	cmp	r2, #0
   2166c:	cmpne	r1, #0
   21670:	str	ip, [r0]
   21674:	beq	21684 <__assert_fail@plt+0xf73c>
   21678:	str	r1, [r0, #40]	; 0x28
   2167c:	str	r2, [r0, #44]	; 0x2c
   21680:	bx	lr
   21684:	str	r4, [sp, #-8]!
   21688:	str	lr, [sp, #4]
   2168c:	bl	11f24 <abort@plt>
   21690:	andeq	sl, r3, r8, asr #19
   21694:	strd	r4, [sp, #-28]!	; 0xffffffe4
   21698:	strd	r6, [sp, #8]
   2169c:	mov	r7, r0
   216a0:	mov	r6, r1
   216a4:	strd	r8, [sp, #16]
   216a8:	mov	r8, r2
   216ac:	mov	r9, r3
   216b0:	str	lr, [sp, #24]
   216b4:	sub	sp, sp, #28
   216b8:	ldr	r4, [sp, #56]	; 0x38
   216bc:	ldr	ip, [pc, #104]	; 2172c <__assert_fail@plt+0xf7e4>
   216c0:	cmp	r4, #0
   216c4:	moveq	r4, ip
   216c8:	bl	11d74 <__errno_location@plt>
   216cc:	ldr	ip, [r4, #44]	; 0x2c
   216d0:	mov	r5, r0
   216d4:	mov	r1, r6
   216d8:	add	lr, r4, #8
   216dc:	mov	r3, r9
   216e0:	ldr	r6, [r5]
   216e4:	mov	r2, r8
   216e8:	mov	r0, r7
   216ec:	str	ip, [sp, #16]
   216f0:	ldr	ip, [r4, #40]	; 0x28
   216f4:	str	lr, [sp, #8]
   216f8:	str	ip, [sp, #12]
   216fc:	ldr	ip, [r4, #4]
   21700:	str	ip, [sp, #4]
   21704:	ldr	ip, [r4]
   21708:	str	ip, [sp]
   2170c:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21710:	str	r6, [r5]
   21714:	add	sp, sp, #28
   21718:	ldrd	r4, [sp]
   2171c:	ldrd	r6, [sp, #8]
   21720:	ldrd	r8, [sp, #16]
   21724:	add	sp, sp, #24
   21728:	pop	{pc}		; (ldr pc, [sp], #4)
   2172c:	andeq	sl, r3, r8, asr #19
   21730:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21734:	cmp	r2, #0
   21738:	ldr	r4, [pc, #192]	; 21800 <__assert_fail@plt+0xf8b8>
   2173c:	movne	r4, r2
   21740:	strd	r6, [sp, #8]
   21744:	strd	r8, [sp, #16]
   21748:	mov	r9, r1
   2174c:	mov	r8, r0
   21750:	strd	sl, [sp, #24]
   21754:	str	lr, [sp, #32]
   21758:	sub	sp, sp, #36	; 0x24
   2175c:	bl	11d74 <__errno_location@plt>
   21760:	ldr	r5, [r4, #4]
   21764:	mov	r6, r0
   21768:	add	r7, r4, #8
   2176c:	mov	r1, #0
   21770:	mov	r3, r9
   21774:	ldr	ip, [r4, #44]	; 0x2c
   21778:	mov	r2, r8
   2177c:	mov	r0, r1
   21780:	ldr	sl, [r6]
   21784:	orr	r5, r5, #1
   21788:	str	ip, [sp, #16]
   2178c:	ldr	ip, [r4, #40]	; 0x28
   21790:	stmib	sp, {r5, r7, ip}
   21794:	ldr	ip, [r4]
   21798:	str	ip, [sp]
   2179c:	bl	1f9b0 <__assert_fail@plt+0xda68>
   217a0:	add	r1, r0, #1
   217a4:	mov	r0, r1
   217a8:	str	r1, [sp, #28]
   217ac:	bl	24c38 <__assert_fail@plt+0x12cf0>
   217b0:	ldr	ip, [r4, #44]	; 0x2c
   217b4:	mov	fp, r0
   217b8:	mov	r3, r9
   217bc:	mov	r2, r8
   217c0:	ldr	r1, [sp, #28]
   217c4:	str	ip, [sp, #16]
   217c8:	ldr	ip, [r4, #40]	; 0x28
   217cc:	stmib	sp, {r5, r7, ip}
   217d0:	ldr	ip, [r4]
   217d4:	str	ip, [sp]
   217d8:	bl	1f9b0 <__assert_fail@plt+0xda68>
   217dc:	mov	r0, fp
   217e0:	str	sl, [r6]
   217e4:	add	sp, sp, #36	; 0x24
   217e8:	ldrd	r4, [sp]
   217ec:	ldrd	r6, [sp, #8]
   217f0:	ldrd	r8, [sp, #16]
   217f4:	ldrd	sl, [sp, #24]
   217f8:	add	sp, sp, #32
   217fc:	pop	{pc}		; (ldr pc, [sp], #4)
   21800:	andeq	sl, r3, r8, asr #19
   21804:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21808:	cmp	r3, #0
   2180c:	ldr	r4, [pc, #220]	; 218f0 <__assert_fail@plt+0xf9a8>
   21810:	movne	r4, r3
   21814:	strd	r6, [sp, #8]
   21818:	mov	r6, r2
   2181c:	strd	r8, [sp, #16]
   21820:	mov	r9, r0
   21824:	strd	sl, [sp, #24]
   21828:	mov	sl, r1
   2182c:	str	lr, [sp, #32]
   21830:	sub	sp, sp, #44	; 0x2c
   21834:	bl	11d74 <__errno_location@plt>
   21838:	ldr	r5, [r4, #4]
   2183c:	mov	r7, r0
   21840:	mov	r1, #0
   21844:	add	r8, r4, #8
   21848:	mov	r3, sl
   2184c:	ldr	ip, [r4, #44]	; 0x2c
   21850:	mov	r2, r9
   21854:	mov	r0, r1
   21858:	ldr	lr, [r7]
   2185c:	cmp	r6, r1
   21860:	orreq	r5, r5, #1
   21864:	str	ip, [sp, #16]
   21868:	ldr	ip, [r4, #40]	; 0x28
   2186c:	stmib	sp, {r5, r8, ip}
   21870:	ldr	ip, [r4]
   21874:	str	lr, [sp, #28]
   21878:	str	ip, [sp]
   2187c:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21880:	add	r1, r0, #1
   21884:	mov	fp, r0
   21888:	mov	r0, r1
   2188c:	str	r1, [sp, #36]	; 0x24
   21890:	bl	24c38 <__assert_fail@plt+0x12cf0>
   21894:	ldr	ip, [r4, #44]	; 0x2c
   21898:	mov	r3, sl
   2189c:	mov	r2, r9
   218a0:	ldr	r1, [sp, #36]	; 0x24
   218a4:	str	ip, [sp, #16]
   218a8:	ldr	ip, [r4, #40]	; 0x28
   218ac:	str	r0, [sp, #32]
   218b0:	stmib	sp, {r5, r8, ip}
   218b4:	ldr	ip, [r4]
   218b8:	str	ip, [sp]
   218bc:	bl	1f9b0 <__assert_fail@plt+0xda68>
   218c0:	ldr	lr, [sp, #28]
   218c4:	cmp	r6, #0
   218c8:	ldr	r0, [sp, #32]
   218cc:	str	lr, [r7]
   218d0:	strne	fp, [r6]
   218d4:	add	sp, sp, #44	; 0x2c
   218d8:	ldrd	r4, [sp]
   218dc:	ldrd	r6, [sp, #8]
   218e0:	ldrd	r8, [sp, #16]
   218e4:	ldrd	sl, [sp, #24]
   218e8:	add	sp, sp, #32
   218ec:	pop	{pc}		; (ldr pc, [sp], #4)
   218f0:	andeq	sl, r3, r8, asr #19
   218f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   218f8:	movw	r5, #41588	; 0xa274
   218fc:	movt	r5, #3
   21900:	ldr	r3, [r5, #4]
   21904:	strd	r6, [sp, #8]
   21908:	str	r8, [sp, #16]
   2190c:	str	lr, [sp, #20]
   21910:	ldr	r7, [r5]
   21914:	cmp	r3, #1
   21918:	ble	2193c <__assert_fail@plt+0xf9f4>
   2191c:	mov	r4, #1
   21920:	add	r6, r7, #4
   21924:	ldr	r0, [r6, r4, lsl #3]
   21928:	add	r4, r4, #1
   2192c:	bl	1d29c <__assert_fail@plt+0xb354>
   21930:	ldr	r3, [r5, #4]
   21934:	cmp	r3, r4
   21938:	bgt	21924 <__assert_fail@plt+0xf9dc>
   2193c:	ldr	r0, [r7, #4]
   21940:	movw	r4, #43208	; 0xa8c8
   21944:	movt	r4, #3
   21948:	cmp	r0, r4
   2194c:	beq	21960 <__assert_fail@plt+0xfa18>
   21950:	bl	1d29c <__assert_fail@plt+0xb354>
   21954:	mov	r3, #256	; 0x100
   21958:	str	r3, [r5, #8]
   2195c:	str	r4, [r5, #12]
   21960:	ldr	r4, [pc, #44]	; 21994 <__assert_fail@plt+0xfa4c>
   21964:	cmp	r7, r4
   21968:	beq	21978 <__assert_fail@plt+0xfa30>
   2196c:	mov	r0, r7
   21970:	bl	1d29c <__assert_fail@plt+0xb354>
   21974:	str	r4, [r5]
   21978:	mov	r3, #1
   2197c:	ldrd	r6, [sp, #8]
   21980:	str	r3, [r5, #4]
   21984:	ldrd	r4, [sp]
   21988:	ldr	r8, [sp, #16]
   2198c:	add	sp, sp, #20
   21990:	pop	{pc}		; (ldr pc, [sp], #4)
   21994:	andeq	sl, r3, ip, ror r2
   21998:	ldr	r3, [pc, #4]	; 219a4 <__assert_fail@plt+0xfa5c>
   2199c:	mvn	r2, #0
   219a0:	b	2139c <__assert_fail@plt+0xf454>
   219a4:	andeq	sl, r3, r8, asr #19
   219a8:	ldr	r3, [pc]	; 219b0 <__assert_fail@plt+0xfa68>
   219ac:	b	2139c <__assert_fail@plt+0xf454>
   219b0:	andeq	sl, r3, r8, asr #19
   219b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   219b8:	movw	r4, #41588	; 0xa274
   219bc:	movt	r4, #3
   219c0:	strd	r6, [sp, #8]
   219c4:	strd	r8, [sp, #16]
   219c8:	strd	sl, [sp, #24]
   219cc:	mov	sl, r0
   219d0:	str	lr, [sp, #32]
   219d4:	sub	sp, sp, #44	; 0x2c
   219d8:	bl	11d74 <__errno_location@plt>
   219dc:	ldr	r3, [r0]
   219e0:	mov	r8, r0
   219e4:	ldr	r2, [r4, #4]
   219e8:	ldr	r5, [r4]
   219ec:	str	r3, [sp, #28]
   219f0:	cmp	r2, #0
   219f4:	bgt	21a50 <__assert_fail@plt+0xfb08>
   219f8:	add	r3, r4, #8
   219fc:	str	r2, [sp, #36]	; 0x24
   21a00:	rsb	r2, r2, #1
   21a04:	cmp	r5, r3
   21a08:	beq	21b1c <__assert_fail@plt+0xfbd4>
   21a0c:	mov	r1, #8
   21a10:	mov	r0, r5
   21a14:	mvn	r3, #-2147483648	; 0x80000000
   21a18:	str	r1, [sp]
   21a1c:	add	r1, sp, #36	; 0x24
   21a20:	bl	24edc <__assert_fail@plt+0x12f94>
   21a24:	mov	r5, r0
   21a28:	str	r0, [r4]
   21a2c:	ldr	r0, [r4, #4]
   21a30:	mov	r1, #0
   21a34:	ldr	r2, [sp, #36]	; 0x24
   21a38:	sub	r2, r2, r0
   21a3c:	add	r0, r5, r0, lsl #3
   21a40:	lsl	r2, r2, #3
   21a44:	bl	11d98 <memset@plt>
   21a48:	ldr	r3, [sp, #36]	; 0x24
   21a4c:	str	r3, [r4, #4]
   21a50:	movw	r4, #43208	; 0xa8c8
   21a54:	movt	r4, #3
   21a58:	ldr	r9, [r5]
   21a5c:	add	fp, r4, #264	; 0x108
   21a60:	mvn	r3, #0
   21a64:	ldr	r7, [r4, #260]	; 0x104
   21a68:	mov	r2, sl
   21a6c:	ldr	r6, [r5, #4]
   21a70:	str	fp, [sp, #8]
   21a74:	mov	r1, r9
   21a78:	ldr	ip, [r4, #256]	; 0x100
   21a7c:	orr	r7, r7, #1
   21a80:	ldr	lr, [r4, #300]	; 0x12c
   21a84:	mov	r0, r6
   21a88:	str	ip, [sp]
   21a8c:	str	r7, [sp, #4]
   21a90:	str	lr, [sp, #16]
   21a94:	ldr	ip, [r4, #296]	; 0x128
   21a98:	str	ip, [sp, #12]
   21a9c:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21aa0:	cmp	r9, r0
   21aa4:	bhi	21af4 <__assert_fail@plt+0xfbac>
   21aa8:	add	r9, r0, #1
   21aac:	cmp	r6, r4
   21ab0:	str	r9, [r5]
   21ab4:	beq	21ac0 <__assert_fail@plt+0xfb78>
   21ab8:	mov	r0, r6
   21abc:	bl	1d29c <__assert_fail@plt+0xb354>
   21ac0:	mov	r0, r9
   21ac4:	bl	24c38 <__assert_fail@plt+0x12cf0>
   21ac8:	ldr	r3, [r4, #256]	; 0x100
   21acc:	mov	r2, sl
   21ad0:	mov	r1, r9
   21ad4:	mov	r6, r0
   21ad8:	ldr	lr, [r4, #296]	; 0x128
   21adc:	ldr	ip, [r4, #300]	; 0x12c
   21ae0:	str	r0, [r5, #4]
   21ae4:	stm	sp, {r3, r7, fp, lr}
   21ae8:	mvn	r3, #0
   21aec:	str	ip, [sp, #16]
   21af0:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21af4:	ldr	r3, [sp, #28]
   21af8:	mov	r0, r6
   21afc:	str	r3, [r8]
   21b00:	add	sp, sp, #44	; 0x2c
   21b04:	ldrd	r4, [sp]
   21b08:	ldrd	r6, [sp, #8]
   21b0c:	ldrd	r8, [sp, #16]
   21b10:	ldrd	sl, [sp, #24]
   21b14:	add	sp, sp, #32
   21b18:	pop	{pc}		; (ldr pc, [sp], #4)
   21b1c:	mov	r0, #8
   21b20:	mvn	r3, #-2147483648	; 0x80000000
   21b24:	add	r1, sp, #36	; 0x24
   21b28:	str	r0, [sp]
   21b2c:	mov	r0, #0
   21b30:	bl	24edc <__assert_fail@plt+0x12f94>
   21b34:	ldrd	r2, [r4, #8]
   21b38:	mov	r5, r0
   21b3c:	str	r0, [r4]
   21b40:	strd	r2, [r0]
   21b44:	b	21a2c <__assert_fail@plt+0xfae4>
   21b48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21b4c:	movw	r4, #41588	; 0xa274
   21b50:	movt	r4, #3
   21b54:	strd	r6, [sp, #8]
   21b58:	strd	r8, [sp, #16]
   21b5c:	strd	sl, [sp, #24]
   21b60:	mov	sl, r0
   21b64:	mov	fp, r1
   21b68:	str	lr, [sp, #32]
   21b6c:	sub	sp, sp, #44	; 0x2c
   21b70:	bl	11d74 <__errno_location@plt>
   21b74:	ldr	r3, [r0]
   21b78:	mov	r8, r0
   21b7c:	ldr	r2, [r4, #4]
   21b80:	ldr	r5, [r4]
   21b84:	str	r3, [sp, #28]
   21b88:	cmp	r2, #0
   21b8c:	bgt	21be8 <__assert_fail@plt+0xfca0>
   21b90:	add	r3, r4, #8
   21b94:	str	r2, [sp, #36]	; 0x24
   21b98:	rsb	r2, r2, #1
   21b9c:	cmp	r5, r3
   21ba0:	beq	21cc4 <__assert_fail@plt+0xfd7c>
   21ba4:	mov	r1, #8
   21ba8:	mov	r0, r5
   21bac:	mvn	r3, #-2147483648	; 0x80000000
   21bb0:	str	r1, [sp]
   21bb4:	add	r1, sp, #36	; 0x24
   21bb8:	bl	24edc <__assert_fail@plt+0x12f94>
   21bbc:	mov	r5, r0
   21bc0:	str	r0, [r4]
   21bc4:	ldr	r0, [r4, #4]
   21bc8:	mov	r1, #0
   21bcc:	ldr	r2, [sp, #36]	; 0x24
   21bd0:	sub	r2, r2, r0
   21bd4:	add	r0, r5, r0, lsl #3
   21bd8:	lsl	r2, r2, #3
   21bdc:	bl	11d98 <memset@plt>
   21be0:	ldr	r3, [sp, #36]	; 0x24
   21be4:	str	r3, [r4, #4]
   21be8:	movw	r4, #43208	; 0xa8c8
   21bec:	movt	r4, #3
   21bf0:	ldr	r9, [r5]
   21bf4:	add	r0, r4, #264	; 0x108
   21bf8:	mov	r3, fp
   21bfc:	ldr	r7, [r4, #260]	; 0x104
   21c00:	mov	r2, sl
   21c04:	ldr	r6, [r5, #4]
   21c08:	str	r0, [sp, #8]
   21c0c:	mov	r1, r9
   21c10:	ldr	ip, [r4, #256]	; 0x100
   21c14:	orr	r7, r7, #1
   21c18:	ldr	lr, [r4, #300]	; 0x12c
   21c1c:	mov	r0, r6
   21c20:	str	ip, [sp]
   21c24:	str	r7, [sp, #4]
   21c28:	str	lr, [sp, #16]
   21c2c:	ldr	ip, [r4, #296]	; 0x128
   21c30:	str	ip, [sp, #12]
   21c34:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21c38:	cmp	r9, r0
   21c3c:	bhi	21c9c <__assert_fail@plt+0xfd54>
   21c40:	add	r9, r0, #1
   21c44:	cmp	r6, r4
   21c48:	str	r9, [r5]
   21c4c:	beq	21c58 <__assert_fail@plt+0xfd10>
   21c50:	mov	r0, r6
   21c54:	bl	1d29c <__assert_fail@plt+0xb354>
   21c58:	mov	r0, r9
   21c5c:	bl	24c38 <__assert_fail@plt+0x12cf0>
   21c60:	ldr	ip, [r4, #256]	; 0x100
   21c64:	mov	r1, r9
   21c68:	mov	r3, fp
   21c6c:	mov	r2, sl
   21c70:	mov	r6, r0
   21c74:	ldr	r9, [r4, #296]	; 0x128
   21c78:	ldr	lr, [r4, #300]	; 0x12c
   21c7c:	str	r0, [r5, #4]
   21c80:	str	ip, [sp]
   21c84:	ldr	ip, [pc, #100]	; 21cf0 <__assert_fail@plt+0xfda8>
   21c88:	str	r7, [sp, #4]
   21c8c:	str	ip, [sp, #8]
   21c90:	str	r9, [sp, #12]
   21c94:	str	lr, [sp, #16]
   21c98:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21c9c:	ldr	r3, [sp, #28]
   21ca0:	mov	r0, r6
   21ca4:	str	r3, [r8]
   21ca8:	add	sp, sp, #44	; 0x2c
   21cac:	ldrd	r4, [sp]
   21cb0:	ldrd	r6, [sp, #8]
   21cb4:	ldrd	r8, [sp, #16]
   21cb8:	ldrd	sl, [sp, #24]
   21cbc:	add	sp, sp, #32
   21cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   21cc4:	mov	r0, #8
   21cc8:	mvn	r3, #-2147483648	; 0x80000000
   21ccc:	add	r1, sp, #36	; 0x24
   21cd0:	str	r0, [sp]
   21cd4:	mov	r0, #0
   21cd8:	bl	24edc <__assert_fail@plt+0x12f94>
   21cdc:	ldrd	r2, [r4, #8]
   21ce0:	mov	r5, r0
   21ce4:	str	r0, [r4]
   21ce8:	strd	r2, [r0]
   21cec:	b	21bc4 <__assert_fail@plt+0xfc7c>
   21cf0:	ldrdeq	sl, [r3], -r0
   21cf4:	strd	r4, [sp, #-20]!	; 0xffffffec
   21cf8:	mov	r4, #0
   21cfc:	mov	r5, #0
   21d00:	strd	r6, [sp, #8]
   21d04:	cmp	r1, #10
   21d08:	str	lr, [sp, #16]
   21d0c:	sub	sp, sp, #100	; 0x64
   21d10:	strd	r4, [sp, #48]	; 0x30
   21d14:	beq	21d5c <__assert_fail@plt+0xfe14>
   21d18:	mov	r3, sp
   21d1c:	strd	r4, [sp, #8]
   21d20:	str	r1, [sp, #48]	; 0x30
   21d24:	mov	r1, r2
   21d28:	mvn	r2, #0
   21d2c:	ldrd	r6, [sp, #48]	; 0x30
   21d30:	strd	r6, [sp]
   21d34:	strd	r4, [sp, #16]
   21d38:	strd	r4, [sp, #24]
   21d3c:	strd	r4, [sp, #32]
   21d40:	strd	r4, [sp, #40]	; 0x28
   21d44:	bl	2139c <__assert_fail@plt+0xf454>
   21d48:	add	sp, sp, #100	; 0x64
   21d4c:	ldrd	r4, [sp]
   21d50:	ldrd	r6, [sp, #8]
   21d54:	add	sp, sp, #16
   21d58:	pop	{pc}		; (ldr pc, [sp], #4)
   21d5c:	bl	11f24 <abort@plt>
   21d60:	strd	r4, [sp, #-20]!	; 0xffffffec
   21d64:	mov	r4, #0
   21d68:	mov	r5, #0
   21d6c:	strd	r6, [sp, #8]
   21d70:	cmp	r1, #10
   21d74:	str	lr, [sp, #16]
   21d78:	sub	sp, sp, #100	; 0x64
   21d7c:	strd	r4, [sp, #48]	; 0x30
   21d80:	beq	21dcc <__assert_fail@plt+0xfe84>
   21d84:	mov	ip, r2
   21d88:	mov	r2, r3
   21d8c:	strd	r4, [sp, #8]
   21d90:	str	r1, [sp, #48]	; 0x30
   21d94:	mov	r3, sp
   21d98:	mov	r1, ip
   21d9c:	ldrd	r6, [sp, #48]	; 0x30
   21da0:	strd	r6, [sp]
   21da4:	strd	r4, [sp, #16]
   21da8:	strd	r4, [sp, #24]
   21dac:	strd	r4, [sp, #32]
   21db0:	strd	r4, [sp, #40]	; 0x28
   21db4:	bl	2139c <__assert_fail@plt+0xf454>
   21db8:	add	sp, sp, #100	; 0x64
   21dbc:	ldrd	r4, [sp]
   21dc0:	ldrd	r6, [sp, #8]
   21dc4:	add	sp, sp, #16
   21dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   21dcc:	bl	11f24 <abort@plt>
   21dd0:	mov	r2, #0
   21dd4:	mov	r3, #0
   21dd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21ddc:	strd	r6, [sp, #8]
   21de0:	cmp	r0, #10
   21de4:	strd	r8, [sp, #16]
   21de8:	strd	sl, [sp, #24]
   21dec:	str	lr, [sp, #32]
   21df0:	sub	sp, sp, #124	; 0x7c
   21df4:	strd	r2, [sp, #72]	; 0x48
   21df8:	strd	r2, [sp, #80]	; 0x50
   21dfc:	strd	r2, [sp, #88]	; 0x58
   21e00:	strd	r2, [sp, #96]	; 0x60
   21e04:	strd	r2, [sp, #104]	; 0x68
   21e08:	strd	r2, [sp, #112]	; 0x70
   21e0c:	beq	21fb0 <__assert_fail@plt+0x10068>
   21e10:	mov	r6, r1
   21e14:	movw	r4, #41588	; 0xa274
   21e18:	movt	r4, #3
   21e1c:	str	r0, [sp, #72]	; 0x48
   21e20:	ldrd	r0, [sp, #72]	; 0x48
   21e24:	strd	r0, [sp, #24]
   21e28:	strd	r2, [sp, #32]
   21e2c:	strd	r2, [sp, #40]	; 0x28
   21e30:	strd	r2, [sp, #48]	; 0x30
   21e34:	strd	r2, [sp, #56]	; 0x38
   21e38:	strd	r2, [sp, #64]	; 0x40
   21e3c:	bl	11d74 <__errno_location@plt>
   21e40:	mov	r8, r0
   21e44:	ldr	r5, [r4]
   21e48:	ldr	r2, [r4, #4]
   21e4c:	ldr	r9, [r0]
   21e50:	cmp	r2, #0
   21e54:	bgt	21eb0 <__assert_fail@plt+0xff68>
   21e58:	add	r3, r4, #8
   21e5c:	str	r2, [sp, #72]	; 0x48
   21e60:	rsb	r2, r2, #1
   21e64:	cmp	r5, r3
   21e68:	beq	21f84 <__assert_fail@plt+0x1003c>
   21e6c:	mov	r3, #8
   21e70:	mov	r0, r5
   21e74:	add	r1, sp, #72	; 0x48
   21e78:	str	r3, [sp]
   21e7c:	mvn	r3, #-2147483648	; 0x80000000
   21e80:	bl	24edc <__assert_fail@plt+0x12f94>
   21e84:	mov	r5, r0
   21e88:	str	r0, [r4]
   21e8c:	ldr	r0, [r4, #4]
   21e90:	mov	r1, #0
   21e94:	ldr	r2, [sp, #72]	; 0x48
   21e98:	sub	r2, r2, r0
   21e9c:	add	r0, r5, r0, lsl #3
   21ea0:	lsl	r2, r2, #3
   21ea4:	bl	11d98 <memset@plt>
   21ea8:	ldr	r3, [sp, #72]	; 0x48
   21eac:	str	r3, [r4, #4]
   21eb0:	ldr	sl, [r5]
   21eb4:	add	r0, sp, #32
   21eb8:	mvn	r3, #0
   21ebc:	mov	r2, r6
   21ec0:	ldr	r7, [sp, #28]
   21ec4:	ldr	r4, [r5, #4]
   21ec8:	mov	r1, sl
   21ecc:	str	r0, [sp, #8]
   21ed0:	ldr	lr, [sp, #24]
   21ed4:	orr	r7, r7, #1
   21ed8:	ldr	ip, [sp, #64]	; 0x40
   21edc:	mov	r0, r4
   21ee0:	ldr	fp, [sp, #68]	; 0x44
   21ee4:	str	lr, [sp]
   21ee8:	str	r7, [sp, #4]
   21eec:	str	ip, [sp, #12]
   21ef0:	str	fp, [sp, #16]
   21ef4:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21ef8:	cmp	sl, r0
   21efc:	bhi	21f60 <__assert_fail@plt+0x10018>
   21f00:	add	sl, r0, #1
   21f04:	movw	r3, #43208	; 0xa8c8
   21f08:	movt	r3, #3
   21f0c:	cmp	r4, r3
   21f10:	str	sl, [r5]
   21f14:	beq	21f20 <__assert_fail@plt+0xffd8>
   21f18:	mov	r0, r4
   21f1c:	bl	1d29c <__assert_fail@plt+0xb354>
   21f20:	mov	r0, sl
   21f24:	bl	24c38 <__assert_fail@plt+0x12cf0>
   21f28:	ldr	r3, [sp, #24]
   21f2c:	mov	r2, r6
   21f30:	mov	r1, sl
   21f34:	mov	r4, r0
   21f38:	ldr	lr, [sp, #64]	; 0x40
   21f3c:	ldr	ip, [sp, #68]	; 0x44
   21f40:	str	r0, [r5, #4]
   21f44:	add	r5, sp, #32
   21f48:	stm	sp, {r3, r7}
   21f4c:	mvn	r3, #0
   21f50:	str	r5, [sp, #8]
   21f54:	str	lr, [sp, #12]
   21f58:	str	ip, [sp, #16]
   21f5c:	bl	1f9b0 <__assert_fail@plt+0xda68>
   21f60:	mov	r0, r4
   21f64:	str	r9, [r8]
   21f68:	add	sp, sp, #124	; 0x7c
   21f6c:	ldrd	r4, [sp]
   21f70:	ldrd	r6, [sp, #8]
   21f74:	ldrd	r8, [sp, #16]
   21f78:	ldrd	sl, [sp, #24]
   21f7c:	add	sp, sp, #32
   21f80:	pop	{pc}		; (ldr pc, [sp], #4)
   21f84:	mov	r0, #8
   21f88:	mvn	r3, #-2147483648	; 0x80000000
   21f8c:	add	r1, sp, #72	; 0x48
   21f90:	str	r0, [sp]
   21f94:	mov	r0, #0
   21f98:	bl	24edc <__assert_fail@plt+0x12f94>
   21f9c:	ldrd	r2, [r4, #8]
   21fa0:	mov	r5, r0
   21fa4:	str	r0, [r4]
   21fa8:	strd	r2, [r0]
   21fac:	b	21e8c <__assert_fail@plt+0xff44>
   21fb0:	bl	11f24 <abort@plt>
   21fb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21fb8:	cmp	r0, #10
   21fbc:	strd	r6, [sp, #8]
   21fc0:	mov	r6, #0
   21fc4:	mov	r7, #0
   21fc8:	strd	r8, [sp, #16]
   21fcc:	strd	sl, [sp, #24]
   21fd0:	str	lr, [sp, #32]
   21fd4:	sub	sp, sp, #124	; 0x7c
   21fd8:	strd	r6, [sp, #72]	; 0x48
   21fdc:	strd	r6, [sp, #80]	; 0x50
   21fe0:	strd	r6, [sp, #88]	; 0x58
   21fe4:	strd	r6, [sp, #96]	; 0x60
   21fe8:	strd	r6, [sp, #104]	; 0x68
   21fec:	strd	r6, [sp, #112]	; 0x70
   21ff0:	beq	2219c <__assert_fail@plt+0x10254>
   21ff4:	mov	sl, r2
   21ff8:	movw	r5, #41588	; 0xa274
   21ffc:	movt	r5, #3
   22000:	str	r0, [sp, #72]	; 0x48
   22004:	mov	r9, r1
   22008:	ldrd	r2, [sp, #72]	; 0x48
   2200c:	strd	r2, [sp, #24]
   22010:	strd	r6, [sp, #32]
   22014:	strd	r6, [sp, #40]	; 0x28
   22018:	strd	r6, [sp, #48]	; 0x30
   2201c:	strd	r6, [sp, #56]	; 0x38
   22020:	strd	r6, [sp, #64]	; 0x40
   22024:	bl	11d74 <__errno_location@plt>
   22028:	mov	r7, r0
   2202c:	ldr	r4, [r5]
   22030:	ldr	r2, [r5, #4]
   22034:	ldr	fp, [r0]
   22038:	cmp	r2, #0
   2203c:	bgt	22098 <__assert_fail@plt+0x10150>
   22040:	add	r3, r5, #8
   22044:	str	r2, [sp, #72]	; 0x48
   22048:	rsb	r2, r2, #1
   2204c:	cmp	r4, r3
   22050:	beq	22170 <__assert_fail@plt+0x10228>
   22054:	mov	r3, #8
   22058:	mov	r0, r4
   2205c:	add	r1, sp, #72	; 0x48
   22060:	str	r3, [sp]
   22064:	mvn	r3, #-2147483648	; 0x80000000
   22068:	bl	24edc <__assert_fail@plt+0x12f94>
   2206c:	mov	r4, r0
   22070:	str	r0, [r5]
   22074:	ldr	r0, [r5, #4]
   22078:	mov	r1, #0
   2207c:	ldr	r2, [sp, #72]	; 0x48
   22080:	sub	r2, r2, r0
   22084:	add	r0, r4, r0, lsl #3
   22088:	lsl	r2, r2, #3
   2208c:	bl	11d98 <memset@plt>
   22090:	ldr	r3, [sp, #72]	; 0x48
   22094:	str	r3, [r5, #4]
   22098:	ldr	ip, [sp, #24]
   2209c:	add	r0, sp, #32
   220a0:	mov	r3, sl
   220a4:	mov	r2, r9
   220a8:	ldr	r6, [sp, #28]
   220ac:	ldr	r8, [r4]
   220b0:	ldr	r5, [r4, #4]
   220b4:	str	ip, [sp]
   220b8:	orr	r6, r6, #1
   220bc:	ldr	ip, [sp, #64]	; 0x40
   220c0:	mov	r1, r8
   220c4:	str	r6, [sp, #4]
   220c8:	ldr	lr, [sp, #68]	; 0x44
   220cc:	str	r0, [sp, #8]
   220d0:	mov	r0, r5
   220d4:	str	ip, [sp, #12]
   220d8:	str	lr, [sp, #16]
   220dc:	bl	1f9b0 <__assert_fail@plt+0xda68>
   220e0:	cmp	r8, r0
   220e4:	bhi	2214c <__assert_fail@plt+0x10204>
   220e8:	add	r8, r0, #1
   220ec:	movw	r3, #43208	; 0xa8c8
   220f0:	movt	r3, #3
   220f4:	cmp	r5, r3
   220f8:	str	r8, [r4]
   220fc:	beq	22108 <__assert_fail@plt+0x101c0>
   22100:	mov	r0, r5
   22104:	bl	1d29c <__assert_fail@plt+0xb354>
   22108:	mov	r0, r8
   2210c:	bl	24c38 <__assert_fail@plt+0x12cf0>
   22110:	ldr	lr, [sp, #24]
   22114:	mov	r1, r8
   22118:	mov	r3, sl
   2211c:	mov	r2, r9
   22120:	mov	r5, r0
   22124:	ldr	r8, [sp, #64]	; 0x40
   22128:	ldr	ip, [sp, #68]	; 0x44
   2212c:	str	r0, [r4, #4]
   22130:	str	lr, [sp]
   22134:	add	lr, sp, #32
   22138:	str	r6, [sp, #4]
   2213c:	str	lr, [sp, #8]
   22140:	str	r8, [sp, #12]
   22144:	str	ip, [sp, #16]
   22148:	bl	1f9b0 <__assert_fail@plt+0xda68>
   2214c:	mov	r0, r5
   22150:	str	fp, [r7]
   22154:	add	sp, sp, #124	; 0x7c
   22158:	ldrd	r4, [sp]
   2215c:	ldrd	r6, [sp, #8]
   22160:	ldrd	r8, [sp, #16]
   22164:	ldrd	sl, [sp, #24]
   22168:	add	sp, sp, #32
   2216c:	pop	{pc}		; (ldr pc, [sp], #4)
   22170:	mov	r0, #8
   22174:	mvn	r3, #-2147483648	; 0x80000000
   22178:	add	r1, sp, #72	; 0x48
   2217c:	str	r0, [sp]
   22180:	mov	r0, #0
   22184:	bl	24edc <__assert_fail@plt+0x12f94>
   22188:	ldrd	r2, [r5, #8]
   2218c:	mov	r4, r0
   22190:	str	r0, [r5]
   22194:	strd	r2, [r0]
   22198:	b	22074 <__assert_fail@plt+0x1012c>
   2219c:	bl	11f24 <abort@plt>
   221a0:	ldr	r3, [pc, #492]	; 22394 <__assert_fail@plt+0x1044c>
   221a4:	lsr	ip, r2, #5
   221a8:	and	r2, r2, #31
   221ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   221b0:	movw	r5, #41588	; 0xa274
   221b4:	movt	r5, #3
   221b8:	strd	r6, [sp, #8]
   221bc:	strd	r8, [sp, #16]
   221c0:	strd	sl, [sp, #24]
   221c4:	mov	sl, r0
   221c8:	mov	fp, r1
   221cc:	ldrd	r0, [r3]
   221d0:	str	lr, [sp, #32]
   221d4:	sub	sp, sp, #92	; 0x5c
   221d8:	ldrd	r8, [r3, #8]
   221dc:	add	r6, sp, #48	; 0x30
   221e0:	strd	r0, [sp, #40]	; 0x28
   221e4:	ldrd	r0, [r3, #16]
   221e8:	strd	r8, [sp, #48]	; 0x30
   221ec:	ldrd	r8, [r3, #24]
   221f0:	strd	r0, [sp, #56]	; 0x38
   221f4:	ldrd	r0, [r3, #32]
   221f8:	strd	r8, [sp, #64]	; 0x40
   221fc:	ldrd	r8, [r3, #40]	; 0x28
   22200:	strd	r0, [sp, #72]	; 0x48
   22204:	strd	r8, [sp, #80]	; 0x50
   22208:	ldr	r3, [r6, ip, lsl #2]
   2220c:	mvn	r1, r3, lsr r2
   22210:	and	r1, r1, #1
   22214:	eor	r2, r3, r1, lsl r2
   22218:	str	r2, [r6, ip, lsl #2]
   2221c:	bl	11d74 <__errno_location@plt>
   22220:	ldr	r3, [r0]
   22224:	mov	r8, r0
   22228:	ldr	r2, [r5, #4]
   2222c:	ldr	r4, [r5]
   22230:	str	r3, [sp, #28]
   22234:	cmp	r2, #0
   22238:	bgt	22294 <__assert_fail@plt+0x1034c>
   2223c:	add	r3, r5, #8
   22240:	str	r2, [sp, #36]	; 0x24
   22244:	rsb	r2, r2, #1
   22248:	cmp	r4, r3
   2224c:	beq	22368 <__assert_fail@plt+0x10420>
   22250:	mov	r1, #8
   22254:	mov	r0, r4
   22258:	mvn	r3, #-2147483648	; 0x80000000
   2225c:	str	r1, [sp]
   22260:	add	r1, sp, #36	; 0x24
   22264:	bl	24edc <__assert_fail@plt+0x12f94>
   22268:	mov	r4, r0
   2226c:	str	r0, [r5]
   22270:	ldr	r0, [r5, #4]
   22274:	mov	r1, #0
   22278:	ldr	r2, [sp, #36]	; 0x24
   2227c:	sub	r2, r2, r0
   22280:	add	r0, r4, r0, lsl #3
   22284:	lsl	r2, r2, #3
   22288:	bl	11d98 <memset@plt>
   2228c:	ldr	r3, [sp, #36]	; 0x24
   22290:	str	r3, [r5, #4]
   22294:	ldr	ip, [sp, #40]	; 0x28
   22298:	mov	r3, fp
   2229c:	mov	r2, sl
   222a0:	ldr	r7, [sp, #44]	; 0x2c
   222a4:	ldr	r9, [r4]
   222a8:	ldr	r5, [r4, #4]
   222ac:	str	ip, [sp]
   222b0:	orr	r7, r7, #1
   222b4:	ldr	ip, [sp, #80]	; 0x50
   222b8:	mov	r1, r9
   222bc:	str	r7, [sp, #4]
   222c0:	ldr	lr, [sp, #84]	; 0x54
   222c4:	mov	r0, r5
   222c8:	str	r6, [sp, #8]
   222cc:	str	ip, [sp, #12]
   222d0:	str	lr, [sp, #16]
   222d4:	bl	1f9b0 <__assert_fail@plt+0xda68>
   222d8:	cmp	r9, r0
   222dc:	bhi	22340 <__assert_fail@plt+0x103f8>
   222e0:	add	r9, r0, #1
   222e4:	movw	r3, #43208	; 0xa8c8
   222e8:	movt	r3, #3
   222ec:	cmp	r5, r3
   222f0:	str	r9, [r4]
   222f4:	beq	22300 <__assert_fail@plt+0x103b8>
   222f8:	mov	r0, r5
   222fc:	bl	1d29c <__assert_fail@plt+0xb354>
   22300:	mov	r0, r9
   22304:	bl	24c38 <__assert_fail@plt+0x12cf0>
   22308:	mov	r1, r9
   2230c:	ldr	ip, [sp, #40]	; 0x28
   22310:	mov	r3, fp
   22314:	mov	r2, sl
   22318:	mov	r5, r0
   2231c:	ldr	r9, [sp, #80]	; 0x50
   22320:	ldr	lr, [sp, #84]	; 0x54
   22324:	str	r0, [r4, #4]
   22328:	str	ip, [sp]
   2232c:	str	r7, [sp, #4]
   22330:	str	r6, [sp, #8]
   22334:	str	r9, [sp, #12]
   22338:	str	lr, [sp, #16]
   2233c:	bl	1f9b0 <__assert_fail@plt+0xda68>
   22340:	ldr	r3, [sp, #28]
   22344:	mov	r0, r5
   22348:	str	r3, [r8]
   2234c:	add	sp, sp, #92	; 0x5c
   22350:	ldrd	r4, [sp]
   22354:	ldrd	r6, [sp, #8]
   22358:	ldrd	r8, [sp, #16]
   2235c:	ldrd	sl, [sp, #24]
   22360:	add	sp, sp, #32
   22364:	pop	{pc}		; (ldr pc, [sp], #4)
   22368:	mov	r0, #8
   2236c:	mvn	r3, #-2147483648	; 0x80000000
   22370:	add	r1, sp, #36	; 0x24
   22374:	str	r0, [sp]
   22378:	mov	r0, #0
   2237c:	bl	24edc <__assert_fail@plt+0x12f94>
   22380:	ldrd	r2, [r5, #8]
   22384:	mov	r4, r0
   22388:	str	r0, [r5]
   2238c:	strd	r2, [r0]
   22390:	b	22270 <__assert_fail@plt+0x10328>
   22394:	andeq	sl, r3, r8, asr #19
   22398:	ldr	ip, [pc, #476]	; 2257c <__assert_fail@plt+0x10634>
   2239c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   223a0:	movw	r4, #41588	; 0xa274
   223a4:	movt	r4, #3
   223a8:	ldrd	r2, [ip, #8]
   223ac:	strd	r6, [sp, #8]
   223b0:	lsr	r7, r1, #5
   223b4:	mov	r6, r0
   223b8:	strd	r8, [sp, #16]
   223bc:	str	lr, [sp, #32]
   223c0:	and	lr, r1, #31
   223c4:	ldrd	r0, [ip]
   223c8:	strd	sl, [sp, #24]
   223cc:	sub	sp, sp, #84	; 0x54
   223d0:	add	r5, sp, #40	; 0x28
   223d4:	strd	r0, [sp, #32]
   223d8:	strd	r2, [sp, #40]	; 0x28
   223dc:	ldrd	r0, [ip, #16]
   223e0:	ldrd	r2, [ip, #24]
   223e4:	strd	r0, [sp, #48]	; 0x30
   223e8:	ldrd	r0, [ip, #32]
   223ec:	strd	r2, [sp, #56]	; 0x38
   223f0:	ldrd	r2, [ip, #40]	; 0x28
   223f4:	strd	r0, [sp, #64]	; 0x40
   223f8:	strd	r2, [sp, #72]	; 0x48
   223fc:	ldr	r1, [r5, r7, lsl #2]
   22400:	mvn	r3, r1, lsr lr
   22404:	and	r3, r3, #1
   22408:	eor	r1, r1, r3, lsl lr
   2240c:	str	r1, [r5, r7, lsl #2]
   22410:	bl	11d74 <__errno_location@plt>
   22414:	mov	r9, r0
   22418:	ldr	sl, [r0]
   2241c:	ldr	r2, [r4, #4]
   22420:	ldr	r7, [r4]
   22424:	cmp	r2, #0
   22428:	bgt	22484 <__assert_fail@plt+0x1053c>
   2242c:	add	r3, r4, #8
   22430:	str	r2, [sp, #28]
   22434:	rsb	r2, r2, #1
   22438:	cmp	r7, r3
   2243c:	beq	22550 <__assert_fail@plt+0x10608>
   22440:	mov	r1, #8
   22444:	mov	r0, r7
   22448:	mvn	r3, #-2147483648	; 0x80000000
   2244c:	str	r1, [sp]
   22450:	add	r1, sp, #28
   22454:	bl	24edc <__assert_fail@plt+0x12f94>
   22458:	mov	r7, r0
   2245c:	str	r0, [r4]
   22460:	ldr	r0, [r4, #4]
   22464:	mov	r1, #0
   22468:	ldr	r2, [sp, #28]
   2246c:	sub	r2, r2, r0
   22470:	add	r0, r7, r0, lsl #3
   22474:	lsl	r2, r2, #3
   22478:	bl	11d98 <memset@plt>
   2247c:	ldr	r3, [sp, #28]
   22480:	str	r3, [r4, #4]
   22484:	ldr	ip, [sp, #32]
   22488:	mvn	r3, #0
   2248c:	mov	r2, r6
   22490:	ldr	r8, [sp, #36]	; 0x24
   22494:	ldr	fp, [r7]
   22498:	ldr	r4, [r7, #4]
   2249c:	str	ip, [sp]
   224a0:	orr	r8, r8, #1
   224a4:	ldr	ip, [sp, #72]	; 0x48
   224a8:	mov	r1, fp
   224ac:	str	r8, [sp, #4]
   224b0:	ldr	lr, [sp, #76]	; 0x4c
   224b4:	mov	r0, r4
   224b8:	str	r5, [sp, #8]
   224bc:	str	ip, [sp, #12]
   224c0:	str	lr, [sp, #16]
   224c4:	bl	1f9b0 <__assert_fail@plt+0xda68>
   224c8:	cmp	fp, r0
   224cc:	bhi	2252c <__assert_fail@plt+0x105e4>
   224d0:	add	fp, r0, #1
   224d4:	movw	r3, #43208	; 0xa8c8
   224d8:	movt	r3, #3
   224dc:	cmp	r4, r3
   224e0:	str	fp, [r7]
   224e4:	beq	224f0 <__assert_fail@plt+0x105a8>
   224e8:	mov	r0, r4
   224ec:	bl	1d29c <__assert_fail@plt+0xb354>
   224f0:	mov	r0, fp
   224f4:	bl	24c38 <__assert_fail@plt+0x12cf0>
   224f8:	ldr	r3, [sp, #32]
   224fc:	mov	r2, r6
   22500:	mov	r1, fp
   22504:	mov	r4, r0
   22508:	ldr	lr, [sp, #72]	; 0x48
   2250c:	ldr	ip, [sp, #76]	; 0x4c
   22510:	str	r0, [r7, #4]
   22514:	stm	sp, {r3, r8}
   22518:	mvn	r3, #0
   2251c:	str	r5, [sp, #8]
   22520:	str	lr, [sp, #12]
   22524:	str	ip, [sp, #16]
   22528:	bl	1f9b0 <__assert_fail@plt+0xda68>
   2252c:	mov	r0, r4
   22530:	str	sl, [r9]
   22534:	add	sp, sp, #84	; 0x54
   22538:	ldrd	r4, [sp]
   2253c:	ldrd	r6, [sp, #8]
   22540:	ldrd	r8, [sp, #16]
   22544:	ldrd	sl, [sp, #24]
   22548:	add	sp, sp, #32
   2254c:	pop	{pc}		; (ldr pc, [sp], #4)
   22550:	mov	r0, #8
   22554:	mvn	r3, #-2147483648	; 0x80000000
   22558:	add	r1, sp, #28
   2255c:	str	r0, [sp]
   22560:	mov	r0, #0
   22564:	bl	24edc <__assert_fail@plt+0x12f94>
   22568:	ldrd	r2, [r4, #8]
   2256c:	mov	r7, r0
   22570:	str	r0, [r4]
   22574:	strd	r2, [r0]
   22578:	b	22460 <__assert_fail@plt+0x10518>
   2257c:	andeq	sl, r3, r8, asr #19
   22580:	ldr	ip, [pc, #472]	; 22760 <__assert_fail@plt+0x10818>
   22584:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22588:	mov	r5, r0
   2258c:	movw	r4, #41588	; 0xa274
   22590:	movt	r4, #3
   22594:	ldrd	r2, [ip]
   22598:	ldrd	r0, [ip, #8]
   2259c:	strd	r6, [sp, #8]
   225a0:	strd	r8, [sp, #16]
   225a4:	strd	sl, [sp, #24]
   225a8:	str	lr, [sp, #32]
   225ac:	sub	sp, sp, #84	; 0x54
   225b0:	strd	r2, [sp, #32]
   225b4:	strd	r0, [sp, #40]	; 0x28
   225b8:	ldr	r6, [sp, #44]	; 0x2c
   225bc:	ldrd	r2, [ip, #16]
   225c0:	ldrd	r0, [ip, #24]
   225c4:	mvn	lr, r6
   225c8:	and	lr, lr, #67108864	; 0x4000000
   225cc:	eor	lr, lr, r6
   225d0:	ldrd	r6, [ip, #40]	; 0x28
   225d4:	strd	r2, [sp, #48]	; 0x30
   225d8:	ldrd	r2, [ip, #32]
   225dc:	str	lr, [sp, #44]	; 0x2c
   225e0:	strd	r0, [sp, #56]	; 0x38
   225e4:	strd	r2, [sp, #64]	; 0x40
   225e8:	strd	r6, [sp, #72]	; 0x48
   225ec:	bl	11d74 <__errno_location@plt>
   225f0:	mov	r8, r0
   225f4:	ldr	r9, [r0]
   225f8:	ldr	r2, [r4, #4]
   225fc:	ldr	r6, [r4]
   22600:	cmp	r2, #0
   22604:	bgt	22660 <__assert_fail@plt+0x10718>
   22608:	add	r3, r4, #8
   2260c:	str	r2, [sp, #28]
   22610:	rsb	r2, r2, #1
   22614:	cmp	r6, r3
   22618:	beq	22734 <__assert_fail@plt+0x107ec>
   2261c:	mov	r1, #8
   22620:	mov	r0, r6
   22624:	mvn	r3, #-2147483648	; 0x80000000
   22628:	str	r1, [sp]
   2262c:	add	r1, sp, #28
   22630:	bl	24edc <__assert_fail@plt+0x12f94>
   22634:	mov	r6, r0
   22638:	str	r0, [r4]
   2263c:	ldr	r0, [r4, #4]
   22640:	mov	r1, #0
   22644:	ldr	r2, [sp, #28]
   22648:	sub	r2, r2, r0
   2264c:	add	r0, r6, r0, lsl #3
   22650:	lsl	r2, r2, #3
   22654:	bl	11d98 <memset@plt>
   22658:	ldr	r3, [sp, #28]
   2265c:	str	r3, [r4, #4]
   22660:	ldr	sl, [r6]
   22664:	add	r0, sp, #40	; 0x28
   22668:	mvn	r3, #0
   2266c:	mov	r2, r5
   22670:	ldr	r7, [sp, #36]	; 0x24
   22674:	ldr	r4, [r6, #4]
   22678:	mov	r1, sl
   2267c:	str	r0, [sp, #8]
   22680:	ldr	lr, [sp, #32]
   22684:	orr	r7, r7, #1
   22688:	ldr	ip, [sp, #72]	; 0x48
   2268c:	mov	r0, r4
   22690:	ldr	fp, [sp, #76]	; 0x4c
   22694:	str	lr, [sp]
   22698:	str	r7, [sp, #4]
   2269c:	str	ip, [sp, #12]
   226a0:	str	fp, [sp, #16]
   226a4:	bl	1f9b0 <__assert_fail@plt+0xda68>
   226a8:	cmp	sl, r0
   226ac:	bhi	22710 <__assert_fail@plt+0x107c8>
   226b0:	add	sl, r0, #1
   226b4:	movw	r3, #43208	; 0xa8c8
   226b8:	movt	r3, #3
   226bc:	cmp	r4, r3
   226c0:	str	sl, [r6]
   226c4:	beq	226d0 <__assert_fail@plt+0x10788>
   226c8:	mov	r0, r4
   226cc:	bl	1d29c <__assert_fail@plt+0xb354>
   226d0:	mov	r0, sl
   226d4:	bl	24c38 <__assert_fail@plt+0x12cf0>
   226d8:	ldr	r3, [sp, #32]
   226dc:	mov	r2, r5
   226e0:	add	r5, sp, #40	; 0x28
   226e4:	mov	r1, sl
   226e8:	mov	r4, r0
   226ec:	ldr	lr, [sp, #72]	; 0x48
   226f0:	ldr	ip, [sp, #76]	; 0x4c
   226f4:	str	r0, [r6, #4]
   226f8:	stm	sp, {r3, r7}
   226fc:	mvn	r3, #0
   22700:	str	r5, [sp, #8]
   22704:	str	lr, [sp, #12]
   22708:	str	ip, [sp, #16]
   2270c:	bl	1f9b0 <__assert_fail@plt+0xda68>
   22710:	mov	r0, r4
   22714:	str	r9, [r8]
   22718:	add	sp, sp, #84	; 0x54
   2271c:	ldrd	r4, [sp]
   22720:	ldrd	r6, [sp, #8]
   22724:	ldrd	r8, [sp, #16]
   22728:	ldrd	sl, [sp, #24]
   2272c:	add	sp, sp, #32
   22730:	pop	{pc}		; (ldr pc, [sp], #4)
   22734:	mov	r0, #8
   22738:	mvn	r3, #-2147483648	; 0x80000000
   2273c:	add	r1, sp, #28
   22740:	str	r0, [sp]
   22744:	mov	r0, #0
   22748:	bl	24edc <__assert_fail@plt+0x12f94>
   2274c:	ldrd	r2, [r4, #8]
   22750:	mov	r6, r0
   22754:	str	r0, [r4]
   22758:	strd	r2, [r0]
   2275c:	b	2263c <__assert_fail@plt+0x106f4>
   22760:	andeq	sl, r3, r8, asr #19
   22764:	ldr	ip, [pc, #480]	; 2294c <__assert_fail@plt+0x10a04>
   22768:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2276c:	mov	r5, r0
   22770:	movw	r4, #41588	; 0xa274
   22774:	movt	r4, #3
   22778:	ldrd	r2, [ip]
   2277c:	strd	r6, [sp, #8]
   22780:	mov	r6, r1
   22784:	ldrd	r0, [ip, #8]
   22788:	strd	r8, [sp, #16]
   2278c:	strd	sl, [sp, #24]
   22790:	str	lr, [sp, #32]
   22794:	sub	sp, sp, #84	; 0x54
   22798:	ldrd	r8, [ip, #40]	; 0x28
   2279c:	strd	r2, [sp, #32]
   227a0:	strd	r0, [sp, #40]	; 0x28
   227a4:	ldrd	r2, [ip, #16]
   227a8:	ldr	r7, [sp, #44]	; 0x2c
   227ac:	ldrd	r0, [ip, #24]
   227b0:	strd	r2, [sp, #48]	; 0x30
   227b4:	ldrd	r2, [ip, #32]
   227b8:	mvn	lr, r7
   227bc:	and	lr, lr, #67108864	; 0x4000000
   227c0:	eor	lr, lr, r7
   227c4:	str	lr, [sp, #44]	; 0x2c
   227c8:	strd	r0, [sp, #56]	; 0x38
   227cc:	strd	r2, [sp, #64]	; 0x40
   227d0:	strd	r8, [sp, #72]	; 0x48
   227d4:	bl	11d74 <__errno_location@plt>
   227d8:	mov	r9, r0
   227dc:	ldr	sl, [r0]
   227e0:	ldr	r2, [r4, #4]
   227e4:	ldr	r7, [r4]
   227e8:	cmp	r2, #0
   227ec:	bgt	22848 <__assert_fail@plt+0x10900>
   227f0:	add	r3, r4, #8
   227f4:	str	r2, [sp, #28]
   227f8:	rsb	r2, r2, #1
   227fc:	cmp	r7, r3
   22800:	beq	22920 <__assert_fail@plt+0x109d8>
   22804:	mov	r1, #8
   22808:	mov	r0, r7
   2280c:	mvn	r3, #-2147483648	; 0x80000000
   22810:	str	r1, [sp]
   22814:	add	r1, sp, #28
   22818:	bl	24edc <__assert_fail@plt+0x12f94>
   2281c:	mov	r7, r0
   22820:	str	r0, [r4]
   22824:	ldr	r0, [r4, #4]
   22828:	mov	r1, #0
   2282c:	ldr	r2, [sp, #28]
   22830:	sub	r2, r2, r0
   22834:	add	r0, r7, r0, lsl #3
   22838:	lsl	r2, r2, #3
   2283c:	bl	11d98 <memset@plt>
   22840:	ldr	r3, [sp, #28]
   22844:	str	r3, [r4, #4]
   22848:	ldr	ip, [sp, #32]
   2284c:	add	r0, sp, #40	; 0x28
   22850:	mov	r3, r6
   22854:	mov	r2, r5
   22858:	ldr	r8, [sp, #36]	; 0x24
   2285c:	ldr	fp, [r7]
   22860:	ldr	r4, [r7, #4]
   22864:	str	ip, [sp]
   22868:	orr	r8, r8, #1
   2286c:	ldr	ip, [sp, #72]	; 0x48
   22870:	mov	r1, fp
   22874:	str	r8, [sp, #4]
   22878:	ldr	lr, [sp, #76]	; 0x4c
   2287c:	str	r0, [sp, #8]
   22880:	mov	r0, r4
   22884:	str	ip, [sp, #12]
   22888:	str	lr, [sp, #16]
   2288c:	bl	1f9b0 <__assert_fail@plt+0xda68>
   22890:	cmp	fp, r0
   22894:	bhi	228fc <__assert_fail@plt+0x109b4>
   22898:	add	fp, r0, #1
   2289c:	movw	r3, #43208	; 0xa8c8
   228a0:	movt	r3, #3
   228a4:	cmp	r4, r3
   228a8:	str	fp, [r7]
   228ac:	beq	228b8 <__assert_fail@plt+0x10970>
   228b0:	mov	r0, r4
   228b4:	bl	1d29c <__assert_fail@plt+0xb354>
   228b8:	mov	r0, fp
   228bc:	bl	24c38 <__assert_fail@plt+0x12cf0>
   228c0:	ldr	lr, [sp, #32]
   228c4:	mov	r2, r5
   228c8:	mov	r3, r6
   228cc:	mov	r1, fp
   228d0:	mov	r4, r0
   228d4:	ldr	r5, [sp, #72]	; 0x48
   228d8:	ldr	ip, [sp, #76]	; 0x4c
   228dc:	str	r0, [r7, #4]
   228e0:	str	lr, [sp]
   228e4:	add	lr, sp, #40	; 0x28
   228e8:	str	r8, [sp, #4]
   228ec:	str	lr, [sp, #8]
   228f0:	str	r5, [sp, #12]
   228f4:	str	ip, [sp, #16]
   228f8:	bl	1f9b0 <__assert_fail@plt+0xda68>
   228fc:	mov	r0, r4
   22900:	str	sl, [r9]
   22904:	add	sp, sp, #84	; 0x54
   22908:	ldrd	r4, [sp]
   2290c:	ldrd	r6, [sp, #8]
   22910:	ldrd	r8, [sp, #16]
   22914:	ldrd	sl, [sp, #24]
   22918:	add	sp, sp, #32
   2291c:	pop	{pc}		; (ldr pc, [sp], #4)
   22920:	mov	r0, #8
   22924:	mvn	r3, #-2147483648	; 0x80000000
   22928:	add	r1, sp, #28
   2292c:	str	r0, [sp]
   22930:	mov	r0, #0
   22934:	bl	24edc <__assert_fail@plt+0x12f94>
   22938:	ldrd	r2, [r4, #8]
   2293c:	mov	r7, r0
   22940:	str	r0, [r4]
   22944:	strd	r2, [r0]
   22948:	b	22824 <__assert_fail@plt+0x108dc>
   2294c:	andeq	sl, r3, r8, asr #19
   22950:	strd	r4, [sp, #-12]!
   22954:	mov	r4, #0
   22958:	mov	r5, #0
   2295c:	str	lr, [sp, #8]
   22960:	sub	sp, sp, #100	; 0x64
   22964:	cmp	r1, #10
   22968:	strd	r4, [sp]
   2296c:	strd	r4, [sp, #8]
   22970:	strd	r4, [sp, #16]
   22974:	strd	r4, [sp, #24]
   22978:	strd	r4, [sp, #32]
   2297c:	strd	r4, [sp, #40]	; 0x28
   22980:	beq	229b0 <__assert_fail@plt+0x10a68>
   22984:	mov	ip, #67108864	; 0x4000000
   22988:	mov	r3, sp
   2298c:	str	r1, [sp]
   22990:	mov	r1, r2
   22994:	mvn	r2, #0
   22998:	str	ip, [sp, #12]
   2299c:	bl	2139c <__assert_fail@plt+0xf454>
   229a0:	add	sp, sp, #100	; 0x64
   229a4:	ldrd	r4, [sp]
   229a8:	add	sp, sp, #8
   229ac:	pop	{pc}		; (ldr pc, [sp], #4)
   229b0:	bl	11f24 <abort@plt>
   229b4:	ldr	ip, [pc, #156]	; 22a58 <__assert_fail@plt+0x10b10>
   229b8:	cmp	r2, #0
   229bc:	cmpne	r1, #0
   229c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   229c4:	strd	r6, [sp, #8]
   229c8:	mov	r6, r2
   229cc:	str	r8, [sp, #16]
   229d0:	mov	r8, r3
   229d4:	strd	sl, [sp, #20]
   229d8:	ldrd	r4, [ip]
   229dc:	str	lr, [sp, #28]
   229e0:	sub	sp, sp, #48	; 0x30
   229e4:	mov	lr, #10
   229e8:	ldrd	r2, [ip, #8]
   229ec:	ldrd	sl, [ip, #16]
   229f0:	strd	r4, [sp]
   229f4:	ldrd	r4, [ip, #32]
   229f8:	str	lr, [sp]
   229fc:	strd	r2, [sp, #8]
   22a00:	strd	sl, [sp, #16]
   22a04:	ldrd	r2, [ip, #24]
   22a08:	ldrd	sl, [ip, #40]	; 0x28
   22a0c:	strd	r2, [sp, #24]
   22a10:	strd	r4, [sp, #32]
   22a14:	strd	sl, [sp, #40]	; 0x28
   22a18:	beq	22a54 <__assert_fail@plt+0x10b0c>
   22a1c:	mov	r7, r1
   22a20:	mov	r3, sp
   22a24:	mov	r1, r8
   22a28:	mvn	r2, #0
   22a2c:	str	r7, [sp, #40]	; 0x28
   22a30:	str	r6, [sp, #44]	; 0x2c
   22a34:	bl	2139c <__assert_fail@plt+0xf454>
   22a38:	add	sp, sp, #48	; 0x30
   22a3c:	ldrd	r4, [sp]
   22a40:	ldrd	r6, [sp, #8]
   22a44:	ldr	r8, [sp, #16]
   22a48:	ldrd	sl, [sp, #20]
   22a4c:	add	sp, sp, #28
   22a50:	pop	{pc}		; (ldr pc, [sp], #4)
   22a54:	bl	11f24 <abort@plt>
   22a58:	andeq	sl, r3, r8, asr #19
   22a5c:	ldr	ip, [pc, #156]	; 22b00 <__assert_fail@plt+0x10bb8>
   22a60:	cmp	r2, #0
   22a64:	cmpne	r1, #0
   22a68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22a6c:	strd	r6, [sp, #8]
   22a70:	mov	r6, r2
   22a74:	str	r8, [sp, #16]
   22a78:	mov	r8, r3
   22a7c:	strd	sl, [sp, #20]
   22a80:	ldrd	r4, [ip]
   22a84:	str	lr, [sp, #28]
   22a88:	sub	sp, sp, #48	; 0x30
   22a8c:	mov	lr, #10
   22a90:	ldrd	r2, [ip, #8]
   22a94:	ldrd	sl, [ip, #16]
   22a98:	strd	r4, [sp]
   22a9c:	ldrd	r4, [ip, #32]
   22aa0:	str	lr, [sp]
   22aa4:	strd	r2, [sp, #8]
   22aa8:	strd	sl, [sp, #16]
   22aac:	ldrd	r2, [ip, #24]
   22ab0:	ldrd	sl, [ip, #40]	; 0x28
   22ab4:	strd	r2, [sp, #24]
   22ab8:	strd	r4, [sp, #32]
   22abc:	strd	sl, [sp, #40]	; 0x28
   22ac0:	beq	22afc <__assert_fail@plt+0x10bb4>
   22ac4:	ldr	r2, [sp, #80]	; 0x50
   22ac8:	mov	r7, r1
   22acc:	mov	r3, sp
   22ad0:	mov	r1, r8
   22ad4:	str	r7, [sp, #40]	; 0x28
   22ad8:	str	r6, [sp, #44]	; 0x2c
   22adc:	bl	2139c <__assert_fail@plt+0xf454>
   22ae0:	add	sp, sp, #48	; 0x30
   22ae4:	ldrd	r4, [sp]
   22ae8:	ldrd	r6, [sp, #8]
   22aec:	ldr	r8, [sp, #16]
   22af0:	ldrd	sl, [sp, #20]
   22af4:	add	sp, sp, #28
   22af8:	pop	{pc}		; (ldr pc, [sp], #4)
   22afc:	bl	11f24 <abort@plt>
   22b00:	andeq	sl, r3, r8, asr #19
   22b04:	ldr	ip, [pc, #512]	; 22d0c <__assert_fail@plt+0x10dc4>
   22b08:	cmp	r0, #0
   22b0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22b10:	ldrd	r4, [ip, #16]
   22b14:	strd	r6, [sp, #8]
   22b18:	clz	r6, r1
   22b1c:	mov	r7, r1
   22b20:	strd	r8, [sp, #16]
   22b24:	mov	r8, r0
   22b28:	lsr	r6, r6, #5
   22b2c:	strd	sl, [sp, #24]
   22b30:	mov	fp, r2
   22b34:	mov	sl, #10
   22b38:	ldrd	r2, [ip]
   22b3c:	moveq	r6, #1
   22b40:	str	lr, [sp, #32]
   22b44:	sub	sp, sp, #92	; 0x5c
   22b48:	cmp	r6, #0
   22b4c:	ldrd	r0, [ip, #8]
   22b50:	strd	r2, [sp, #40]	; 0x28
   22b54:	strd	r4, [sp, #56]	; 0x38
   22b58:	ldrd	r2, [ip, #24]
   22b5c:	strd	r0, [sp, #48]	; 0x30
   22b60:	ldrd	r0, [ip, #32]
   22b64:	str	sl, [sp, #40]	; 0x28
   22b68:	ldrd	r4, [ip, #40]	; 0x28
   22b6c:	strd	r2, [sp, #64]	; 0x40
   22b70:	strd	r0, [sp, #72]	; 0x48
   22b74:	strd	r4, [sp, #80]	; 0x50
   22b78:	bne	22d08 <__assert_fail@plt+0x10dc0>
   22b7c:	movw	r5, #41588	; 0xa274
   22b80:	movt	r5, #3
   22b84:	str	r8, [sp, #80]	; 0x50
   22b88:	str	r7, [sp, #84]	; 0x54
   22b8c:	bl	11d74 <__errno_location@plt>
   22b90:	ldr	r3, [r0]
   22b94:	mov	r9, r0
   22b98:	ldr	r2, [r5, #4]
   22b9c:	ldr	r4, [r5]
   22ba0:	str	r3, [sp, #28]
   22ba4:	cmp	r2, #0
   22ba8:	movgt	r1, sl
   22bac:	bgt	22c14 <__assert_fail@plt+0x10ccc>
   22bb0:	add	r3, r5, #8
   22bb4:	str	r2, [sp, #36]	; 0x24
   22bb8:	rsb	r2, r2, #1
   22bbc:	cmp	r4, r3
   22bc0:	beq	22cdc <__assert_fail@plt+0x10d94>
   22bc4:	mov	r1, #8
   22bc8:	mov	r0, r4
   22bcc:	mvn	r3, #-2147483648	; 0x80000000
   22bd0:	str	r1, [sp]
   22bd4:	add	r1, sp, #36	; 0x24
   22bd8:	bl	24edc <__assert_fail@plt+0x12f94>
   22bdc:	mov	r4, r0
   22be0:	str	r0, [r5]
   22be4:	ldr	r0, [r5, #4]
   22be8:	mov	r1, #0
   22bec:	ldr	r2, [sp, #36]	; 0x24
   22bf0:	sub	r2, r2, r0
   22bf4:	add	r0, r4, r0, lsl #3
   22bf8:	lsl	r2, r2, #3
   22bfc:	bl	11d98 <memset@plt>
   22c00:	ldr	r3, [sp, #36]	; 0x24
   22c04:	ldr	r1, [sp, #40]	; 0x28
   22c08:	ldr	r8, [sp, #80]	; 0x50
   22c0c:	str	r3, [r5, #4]
   22c10:	ldr	r7, [sp, #84]	; 0x54
   22c14:	mvn	r3, #0
   22c18:	mov	r2, fp
   22c1c:	ldr	r6, [sp, #44]	; 0x2c
   22c20:	ldr	sl, [r4]
   22c24:	ldr	r5, [r4, #4]
   22c28:	orr	r6, r6, #1
   22c2c:	stm	sp, {r1, r6}
   22c30:	add	r1, sp, #48	; 0x30
   22c34:	str	r8, [sp, #12]
   22c38:	mov	r0, r5
   22c3c:	str	r1, [sp, #8]
   22c40:	mov	r1, sl
   22c44:	str	r7, [sp, #16]
   22c48:	bl	1f9b0 <__assert_fail@plt+0xda68>
   22c4c:	cmp	sl, r0
   22c50:	bhi	22cb4 <__assert_fail@plt+0x10d6c>
   22c54:	add	r7, r0, #1
   22c58:	movw	r3, #43208	; 0xa8c8
   22c5c:	movt	r3, #3
   22c60:	cmp	r5, r3
   22c64:	str	r7, [r4]
   22c68:	beq	22c74 <__assert_fail@plt+0x10d2c>
   22c6c:	mov	r0, r5
   22c70:	bl	1d29c <__assert_fail@plt+0xb354>
   22c74:	mov	r0, r7
   22c78:	bl	24c38 <__assert_fail@plt+0x12cf0>
   22c7c:	ldr	r3, [sp, #40]	; 0x28
   22c80:	mov	r2, fp
   22c84:	mov	r1, r7
   22c88:	mov	r5, r0
   22c8c:	ldr	lr, [sp, #80]	; 0x50
   22c90:	ldr	ip, [sp, #84]	; 0x54
   22c94:	str	r0, [r4, #4]
   22c98:	add	r4, sp, #48	; 0x30
   22c9c:	stm	sp, {r3, r6}
   22ca0:	mvn	r3, #0
   22ca4:	str	r4, [sp, #8]
   22ca8:	str	lr, [sp, #12]
   22cac:	str	ip, [sp, #16]
   22cb0:	bl	1f9b0 <__assert_fail@plt+0xda68>
   22cb4:	ldr	r3, [sp, #28]
   22cb8:	mov	r0, r5
   22cbc:	str	r3, [r9]
   22cc0:	add	sp, sp, #92	; 0x5c
   22cc4:	ldrd	r4, [sp]
   22cc8:	ldrd	r6, [sp, #8]
   22ccc:	ldrd	r8, [sp, #16]
   22cd0:	ldrd	sl, [sp, #24]
   22cd4:	add	sp, sp, #32
   22cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   22cdc:	mov	r1, #8
   22ce0:	mvn	r3, #-2147483648	; 0x80000000
   22ce4:	mov	r0, r6
   22ce8:	str	r1, [sp]
   22cec:	add	r1, sp, #36	; 0x24
   22cf0:	bl	24edc <__assert_fail@plt+0x12f94>
   22cf4:	ldrd	r2, [r5, #8]
   22cf8:	mov	r4, r0
   22cfc:	str	r0, [r5]
   22d00:	strd	r2, [r0]
   22d04:	b	22be4 <__assert_fail@plt+0x10c9c>
   22d08:	bl	11f24 <abort@plt>
   22d0c:	andeq	sl, r3, r8, asr #19
   22d10:	ldr	ip, [pc, #536]	; 22f30 <__assert_fail@plt+0x10fe8>
   22d14:	cmp	r0, #0
   22d18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22d1c:	ldrd	r4, [ip, #16]
   22d20:	strd	r6, [sp, #8]
   22d24:	mov	r6, r1
   22d28:	mov	r7, r0
   22d2c:	strd	r8, [sp, #16]
   22d30:	mov	r9, #10
   22d34:	strd	sl, [sp, #24]
   22d38:	mov	sl, r2
   22d3c:	mov	fp, r3
   22d40:	str	lr, [sp, #32]
   22d44:	clz	lr, r1
   22d48:	sub	sp, sp, #92	; 0x5c
   22d4c:	ldrd	r2, [ip]
   22d50:	lsr	lr, lr, #5
   22d54:	moveq	lr, #1
   22d58:	ldrd	r0, [ip, #8]
   22d5c:	cmp	lr, #0
   22d60:	strd	r4, [sp, #56]	; 0x38
   22d64:	ldrd	r4, [ip, #40]	; 0x28
   22d68:	str	lr, [sp, #28]
   22d6c:	strd	r2, [sp, #40]	; 0x28
   22d70:	ldrd	r2, [ip, #24]
   22d74:	strd	r0, [sp, #48]	; 0x30
   22d78:	ldrd	r0, [ip, #32]
   22d7c:	str	r9, [sp, #40]	; 0x28
   22d80:	strd	r2, [sp, #64]	; 0x40
   22d84:	strd	r4, [sp, #80]	; 0x50
   22d88:	strd	r0, [sp, #72]	; 0x48
   22d8c:	bne	22f2c <__assert_fail@plt+0x10fe4>
   22d90:	movw	r5, #41588	; 0xa274
   22d94:	movt	r5, #3
   22d98:	str	r7, [sp, #80]	; 0x50
   22d9c:	str	r6, [sp, #84]	; 0x54
   22da0:	bl	11d74 <__errno_location@plt>
   22da4:	ldr	r3, [r0]
   22da8:	mov	r8, r0
   22dac:	ldr	r2, [r5, #4]
   22db0:	ldr	r4, [r5]
   22db4:	str	r3, [sp, #24]
   22db8:	cmp	r2, #0
   22dbc:	movgt	r1, r9
   22dc0:	bgt	22e28 <__assert_fail@plt+0x10ee0>
   22dc4:	add	r3, r5, #8
   22dc8:	str	r2, [sp, #36]	; 0x24
   22dcc:	rsb	r2, r2, #1
   22dd0:	cmp	r4, r3
   22dd4:	beq	22f00 <__assert_fail@plt+0x10fb8>
   22dd8:	mov	r1, #8
   22ddc:	mov	r0, r4
   22de0:	mvn	r3, #-2147483648	; 0x80000000
   22de4:	str	r1, [sp]
   22de8:	add	r1, sp, #36	; 0x24
   22dec:	bl	24edc <__assert_fail@plt+0x12f94>
   22df0:	mov	r4, r0
   22df4:	str	r0, [r5]
   22df8:	ldr	r0, [r5, #4]
   22dfc:	mov	r1, #0
   22e00:	ldr	r2, [sp, #36]	; 0x24
   22e04:	sub	r2, r2, r0
   22e08:	add	r0, r4, r0, lsl #3
   22e0c:	lsl	r2, r2, #3
   22e10:	bl	11d98 <memset@plt>
   22e14:	ldr	r3, [sp, #36]	; 0x24
   22e18:	ldr	r1, [sp, #40]	; 0x28
   22e1c:	ldr	r7, [sp, #80]	; 0x50
   22e20:	str	r3, [r5, #4]
   22e24:	ldr	r6, [sp, #84]	; 0x54
   22e28:	mov	r3, fp
   22e2c:	mov	r2, sl
   22e30:	ldr	r0, [sp, #44]	; 0x2c
   22e34:	ldr	r9, [r4]
   22e38:	ldr	r5, [r4, #4]
   22e3c:	orr	r0, r0, #1
   22e40:	str	r1, [sp]
   22e44:	add	r1, sp, #48	; 0x30
   22e48:	str	r0, [sp, #4]
   22e4c:	str	r1, [sp, #8]
   22e50:	mov	r1, r9
   22e54:	str	r7, [sp, #12]
   22e58:	str	r6, [sp, #16]
   22e5c:	str	r0, [sp, #28]
   22e60:	mov	r0, r5
   22e64:	bl	1f9b0 <__assert_fail@plt+0xda68>
   22e68:	cmp	r9, r0
   22e6c:	bhi	22ed8 <__assert_fail@plt+0x10f90>
   22e70:	add	r6, r0, #1
   22e74:	movw	r3, #43208	; 0xa8c8
   22e78:	movt	r3, #3
   22e7c:	cmp	r5, r3
   22e80:	str	r6, [r4]
   22e84:	beq	22e90 <__assert_fail@plt+0x10f48>
   22e88:	mov	r0, r5
   22e8c:	bl	1d29c <__assert_fail@plt+0xb354>
   22e90:	mov	r0, r6
   22e94:	bl	24c38 <__assert_fail@plt+0x12cf0>
   22e98:	ldr	lr, [sp, #40]	; 0x28
   22e9c:	mov	r1, r6
   22ea0:	mov	r3, fp
   22ea4:	mov	r2, sl
   22ea8:	mov	r5, r0
   22eac:	ldr	r6, [sp, #80]	; 0x50
   22eb0:	ldr	ip, [sp, #84]	; 0x54
   22eb4:	str	r0, [r4, #4]
   22eb8:	str	lr, [sp]
   22ebc:	ldr	lr, [sp, #28]
   22ec0:	str	lr, [sp, #4]
   22ec4:	add	lr, sp, #48	; 0x30
   22ec8:	str	r6, [sp, #12]
   22ecc:	str	lr, [sp, #8]
   22ed0:	str	ip, [sp, #16]
   22ed4:	bl	1f9b0 <__assert_fail@plt+0xda68>
   22ed8:	ldr	r3, [sp, #24]
   22edc:	mov	r0, r5
   22ee0:	str	r3, [r8]
   22ee4:	add	sp, sp, #92	; 0x5c
   22ee8:	ldrd	r4, [sp]
   22eec:	ldrd	r6, [sp, #8]
   22ef0:	ldrd	r8, [sp, #16]
   22ef4:	ldrd	sl, [sp, #24]
   22ef8:	add	sp, sp, #32
   22efc:	pop	{pc}		; (ldr pc, [sp], #4)
   22f00:	mov	r1, #8
   22f04:	mvn	r3, #-2147483648	; 0x80000000
   22f08:	ldr	r0, [sp, #28]
   22f0c:	str	r1, [sp]
   22f10:	add	r1, sp, #36	; 0x24
   22f14:	bl	24edc <__assert_fail@plt+0x12f94>
   22f18:	ldrd	r2, [r5, #8]
   22f1c:	mov	r4, r0
   22f20:	str	r0, [r5]
   22f24:	strd	r2, [r0]
   22f28:	b	22df8 <__assert_fail@plt+0x10eb0>
   22f2c:	bl	11f24 <abort@plt>
   22f30:	andeq	sl, r3, r8, asr #19
   22f34:	ldr	r3, [pc]	; 22f3c <__assert_fail@plt+0x10ff4>
   22f38:	b	2139c <__assert_fail@plt+0xf454>
   22f3c:	andeq	sl, r3, r4, lsl #5
   22f40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22f44:	movw	r4, #41588	; 0xa274
   22f48:	movt	r4, #3
   22f4c:	strd	r6, [sp, #8]
   22f50:	strd	r8, [sp, #16]
   22f54:	strd	sl, [sp, #24]
   22f58:	mov	sl, r0
   22f5c:	mov	fp, r1
   22f60:	str	lr, [sp, #32]
   22f64:	sub	sp, sp, #44	; 0x2c
   22f68:	bl	11d74 <__errno_location@plt>
   22f6c:	ldr	r3, [r0]
   22f70:	mov	r8, r0
   22f74:	ldr	r2, [r4, #4]
   22f78:	ldr	r5, [r4]
   22f7c:	str	r3, [sp, #28]
   22f80:	cmp	r2, #0
   22f84:	bgt	22fe0 <__assert_fail@plt+0x11098>
   22f88:	add	r3, r4, #8
   22f8c:	str	r2, [sp, #36]	; 0x24
   22f90:	rsb	r2, r2, #1
   22f94:	cmp	r5, r3
   22f98:	beq	230bc <__assert_fail@plt+0x11174>
   22f9c:	mov	r1, #8
   22fa0:	mov	r0, r5
   22fa4:	mvn	r3, #-2147483648	; 0x80000000
   22fa8:	str	r1, [sp]
   22fac:	add	r1, sp, #36	; 0x24
   22fb0:	bl	24edc <__assert_fail@plt+0x12f94>
   22fb4:	mov	r5, r0
   22fb8:	str	r0, [r4]
   22fbc:	ldr	r0, [r4, #4]
   22fc0:	mov	r1, #0
   22fc4:	ldr	r2, [sp, #36]	; 0x24
   22fc8:	sub	r2, r2, r0
   22fcc:	add	r0, r5, r0, lsl #3
   22fd0:	lsl	r2, r2, #3
   22fd4:	bl	11d98 <memset@plt>
   22fd8:	ldr	r3, [sp, #36]	; 0x24
   22fdc:	str	r3, [r4, #4]
   22fe0:	ldr	ip, [r4, #16]
   22fe4:	mov	r3, fp
   22fe8:	mov	r2, sl
   22fec:	ldr	r7, [r4, #20]
   22ff0:	ldr	r0, [pc, #240]	; 230e8 <__assert_fail@plt+0x111a0>
   22ff4:	ldr	r9, [r5]
   22ff8:	orr	r7, r7, #1
   22ffc:	ldr	r6, [r5, #4]
   23000:	str	ip, [sp]
   23004:	ldr	ip, [r4, #56]	; 0x38
   23008:	mov	r1, r9
   2300c:	str	r7, [sp, #4]
   23010:	ldr	lr, [r4, #60]	; 0x3c
   23014:	str	r0, [sp, #8]
   23018:	mov	r0, r6
   2301c:	str	ip, [sp, #12]
   23020:	str	lr, [sp, #16]
   23024:	bl	1f9b0 <__assert_fail@plt+0xda68>
   23028:	cmp	r9, r0
   2302c:	bhi	23094 <__assert_fail@plt+0x1114c>
   23030:	add	r9, r0, #1
   23034:	movw	r3, #43208	; 0xa8c8
   23038:	movt	r3, #3
   2303c:	cmp	r6, r3
   23040:	str	r9, [r5]
   23044:	beq	23050 <__assert_fail@plt+0x11108>
   23048:	mov	r0, r6
   2304c:	bl	1d29c <__assert_fail@plt+0xb354>
   23050:	mov	r0, r9
   23054:	bl	24c38 <__assert_fail@plt+0x12cf0>
   23058:	ldr	ip, [r4, #16]
   2305c:	mov	r1, r9
   23060:	mov	r3, fp
   23064:	mov	r2, sl
   23068:	mov	r6, r0
   2306c:	ldr	r9, [r4, #56]	; 0x38
   23070:	ldr	lr, [r4, #60]	; 0x3c
   23074:	str	r0, [r5, #4]
   23078:	str	ip, [sp]
   2307c:	ldr	ip, [pc, #100]	; 230e8 <__assert_fail@plt+0x111a0>
   23080:	str	r7, [sp, #4]
   23084:	str	ip, [sp, #8]
   23088:	str	r9, [sp, #12]
   2308c:	str	lr, [sp, #16]
   23090:	bl	1f9b0 <__assert_fail@plt+0xda68>
   23094:	ldr	r3, [sp, #28]
   23098:	mov	r0, r6
   2309c:	str	r3, [r8]
   230a0:	add	sp, sp, #44	; 0x2c
   230a4:	ldrd	r4, [sp]
   230a8:	ldrd	r6, [sp, #8]
   230ac:	ldrd	r8, [sp, #16]
   230b0:	ldrd	sl, [sp, #24]
   230b4:	add	sp, sp, #32
   230b8:	pop	{pc}		; (ldr pc, [sp], #4)
   230bc:	mov	r0, #8
   230c0:	mvn	r3, #-2147483648	; 0x80000000
   230c4:	add	r1, sp, #36	; 0x24
   230c8:	str	r0, [sp]
   230cc:	mov	r0, #0
   230d0:	bl	24edc <__assert_fail@plt+0x12f94>
   230d4:	ldrd	r2, [r4, #8]
   230d8:	mov	r5, r0
   230dc:	str	r0, [r4]
   230e0:	strd	r2, [r0]
   230e4:	b	22fbc <__assert_fail@plt+0x11074>
   230e8:	andeq	sl, r3, ip, lsl #5
   230ec:	ldr	r3, [pc, #4]	; 230f8 <__assert_fail@plt+0x111b0>
   230f0:	mvn	r2, #0
   230f4:	b	2139c <__assert_fail@plt+0xf454>
   230f8:	andeq	sl, r3, r4, lsl #5
   230fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23100:	movw	r4, #41588	; 0xa274
   23104:	movt	r4, #3
   23108:	strd	r6, [sp, #8]
   2310c:	strd	r8, [sp, #16]
   23110:	strd	sl, [sp, #24]
   23114:	mov	sl, r0
   23118:	str	lr, [sp, #32]
   2311c:	sub	sp, sp, #44	; 0x2c
   23120:	bl	11d74 <__errno_location@plt>
   23124:	ldr	r3, [r0]
   23128:	mov	r8, r0
   2312c:	ldr	r2, [r4, #4]
   23130:	ldr	r5, [r4]
   23134:	str	r3, [sp, #28]
   23138:	cmp	r2, #0
   2313c:	bgt	23198 <__assert_fail@plt+0x11250>
   23140:	add	r3, r4, #8
   23144:	str	r2, [sp, #36]	; 0x24
   23148:	rsb	r2, r2, #1
   2314c:	cmp	r5, r3
   23150:	beq	23260 <__assert_fail@plt+0x11318>
   23154:	mov	r1, #8
   23158:	mov	r0, r5
   2315c:	mvn	r3, #-2147483648	; 0x80000000
   23160:	str	r1, [sp]
   23164:	add	r1, sp, #36	; 0x24
   23168:	bl	24edc <__assert_fail@plt+0x12f94>
   2316c:	mov	r5, r0
   23170:	str	r0, [r4]
   23174:	ldr	r0, [r4, #4]
   23178:	mov	r1, #0
   2317c:	ldr	r2, [sp, #36]	; 0x24
   23180:	sub	r2, r2, r0
   23184:	add	r0, r5, r0, lsl #3
   23188:	lsl	r2, r2, #3
   2318c:	bl	11d98 <memset@plt>
   23190:	ldr	r3, [sp, #36]	; 0x24
   23194:	str	r3, [r4, #4]
   23198:	ldr	ip, [r4, #16]
   2319c:	mvn	r3, #0
   231a0:	mov	r2, sl
   231a4:	ldr	r7, [r4, #20]
   231a8:	ldr	fp, [pc, #220]	; 2328c <__assert_fail@plt+0x11344>
   231ac:	ldr	r9, [r5]
   231b0:	orr	r7, r7, #1
   231b4:	ldr	r6, [r5, #4]
   231b8:	str	ip, [sp]
   231bc:	ldr	ip, [r4, #56]	; 0x38
   231c0:	mov	r1, r9
   231c4:	stmib	sp, {r7, fp}
   231c8:	ldr	lr, [r4, #60]	; 0x3c
   231cc:	mov	r0, r6
   231d0:	str	ip, [sp, #12]
   231d4:	str	lr, [sp, #16]
   231d8:	bl	1f9b0 <__assert_fail@plt+0xda68>
   231dc:	cmp	r9, r0
   231e0:	bhi	23238 <__assert_fail@plt+0x112f0>
   231e4:	add	r9, r0, #1
   231e8:	movw	r3, #43208	; 0xa8c8
   231ec:	movt	r3, #3
   231f0:	cmp	r6, r3
   231f4:	str	r9, [r5]
   231f8:	beq	23204 <__assert_fail@plt+0x112bc>
   231fc:	mov	r0, r6
   23200:	bl	1d29c <__assert_fail@plt+0xb354>
   23204:	mov	r0, r9
   23208:	bl	24c38 <__assert_fail@plt+0x12cf0>
   2320c:	ldr	r3, [r4, #16]
   23210:	mov	r2, sl
   23214:	mov	r1, r9
   23218:	mov	r6, r0
   2321c:	ldr	lr, [r4, #56]	; 0x38
   23220:	ldr	ip, [r4, #60]	; 0x3c
   23224:	str	r0, [r5, #4]
   23228:	stm	sp, {r3, r7, fp, lr}
   2322c:	mvn	r3, #0
   23230:	str	ip, [sp, #16]
   23234:	bl	1f9b0 <__assert_fail@plt+0xda68>
   23238:	ldr	r3, [sp, #28]
   2323c:	mov	r0, r6
   23240:	str	r3, [r8]
   23244:	add	sp, sp, #44	; 0x2c
   23248:	ldrd	r4, [sp]
   2324c:	ldrd	r6, [sp, #8]
   23250:	ldrd	r8, [sp, #16]
   23254:	ldrd	sl, [sp, #24]
   23258:	add	sp, sp, #32
   2325c:	pop	{pc}		; (ldr pc, [sp], #4)
   23260:	mov	r0, #8
   23264:	mvn	r3, #-2147483648	; 0x80000000
   23268:	add	r1, sp, #36	; 0x24
   2326c:	str	r0, [sp]
   23270:	mov	r0, #0
   23274:	bl	24edc <__assert_fail@plt+0x12f94>
   23278:	ldrd	r2, [r4, #8]
   2327c:	mov	r5, r0
   23280:	str	r0, [r4]
   23284:	strd	r2, [r0]
   23288:	b	23174 <__assert_fail@plt+0x1122c>
   2328c:	andeq	sl, r3, ip, lsl #5
   23290:	subs	r5, r0, #0
   23294:	str	r7, [sp, #-8]!
   23298:	str	lr, [sp, #4]
   2329c:	beq	232f0 <__assert_fail@plt+0x113a8>
   232a0:	movw	r3, #41584	; 0xa270
   232a4:	movt	r3, #3
   232a8:	ldr	r6, [r3]
   232ac:	bl	11d74 <__errno_location@plt>
   232b0:	ldr	r4, [r0]
   232b4:	cmp	r4, #0
   232b8:	beq	232f4 <__assert_fail@plt+0x113ac>
   232bc:	movw	r1, #39008	; 0x9860
   232c0:	movt	r1, #2
   232c4:	mov	r2, #5
   232c8:	mov	r0, #0
   232cc:	bl	11b58 <dcgettext@plt>
   232d0:	mov	r7, r0
   232d4:	mov	r0, r5
   232d8:	bl	230fc <__assert_fail@plt+0x111b4>
   232dc:	mov	r3, r0
   232e0:	mov	r2, r7
   232e4:	mov	r1, r4
   232e8:	mov	r0, r6
   232ec:	bl	11c90 <error@plt>
   232f0:	bl	11f24 <abort@plt>
   232f4:	movw	r1, #38992	; 0x9850
   232f8:	movt	r1, #2
   232fc:	mov	r2, #5
   23300:	mov	r0, r4
   23304:	bl	11b58 <dcgettext@plt>
   23308:	mov	r7, r0
   2330c:	b	232d4 <__assert_fail@plt+0x1138c>
   23310:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23314:	strd	r6, [sp, #8]
   23318:	subs	r6, r1, #0
   2331c:	strd	r8, [sp, #16]
   23320:	str	sl, [sp, #24]
   23324:	str	lr, [sp, #28]
   23328:	beq	2345c <__assert_fail@plt+0x11514>
   2332c:	cmp	r0, #0
   23330:	mov	r5, r0
   23334:	beq	233a0 <__assert_fail@plt+0x11458>
   23338:	movw	r1, #39024	; 0x9870
   2333c:	movt	r1, #2
   23340:	bl	26718 <__assert_fail@plt+0x147d0>
   23344:	subs	r7, r0, #0
   23348:	beq	2347c <__assert_fail@plt+0x11534>
   2334c:	movw	r0, #2076	; 0x81c
   23350:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   23354:	mov	r4, r0
   23358:	movw	r2, #12944	; 0x3290
   2335c:	movt	r2, #2
   23360:	cmp	r6, #2048	; 0x800
   23364:	movcc	r3, r6
   23368:	movcs	r3, #2048	; 0x800
   2336c:	str	r7, [r4]
   23370:	mov	r0, r7
   23374:	add	r1, r4, #12
   23378:	stmib	r4, {r2, r5}
   2337c:	mov	r2, #0
   23380:	bl	11d8c <setvbuf@plt>
   23384:	mov	r0, r4
   23388:	ldrd	r4, [sp]
   2338c:	ldrd	r6, [sp, #8]
   23390:	ldrd	r8, [sp, #16]
   23394:	ldr	sl, [sp, #24]
   23398:	add	sp, sp, #28
   2339c:	pop	{pc}		; (ldr pc, [sp], #4)
   233a0:	movw	r0, #2076	; 0x81c
   233a4:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   233a8:	add	r9, r0, #16
   233ac:	movw	r3, #12944	; 0x3290
   233b0:	movt	r3, #2
   233b4:	cmp	r6, #1024	; 0x400
   233b8:	addls	r6, r9, r6
   233bc:	addhi	r6, r9, #1024	; 0x400
   233c0:	str	r5, [r0]
   233c4:	cmp	r9, r6
   233c8:	mov	r4, r0
   233cc:	stmib	r0, {r3, r5}
   233d0:	str	r5, [r0, #12]
   233d4:	movcc	r5, r9
   233d8:	bcc	233e8 <__assert_fail@plt+0x114a0>
   233dc:	b	23450 <__assert_fail@plt+0x11508>
   233e0:	cmp	r6, r5
   233e4:	bls	23450 <__assert_fail@plt+0x11508>
   233e8:	sub	r1, r6, r5
   233ec:	mov	r0, r5
   233f0:	mov	r2, #0
   233f4:	bl	11ef4 <getrandom@plt>
   233f8:	cmp	r0, #0
   233fc:	addge	r5, r5, r0
   23400:	bge	233e0 <__assert_fail@plt+0x11498>
   23404:	bl	11d74 <__errno_location@plt>
   23408:	ldr	r8, [r0]
   2340c:	mov	r7, r0
   23410:	cmp	r8, #4
   23414:	beq	233e0 <__assert_fail@plt+0x11498>
   23418:	ldr	r5, [r4]
   2341c:	movw	r2, #2076	; 0x81c
   23420:	mov	r0, r4
   23424:	mov	r1, r2
   23428:	bl	11e4c <__explicit_bzero_chk@plt>
   2342c:	mov	r0, r4
   23430:	bl	1d29c <__assert_fail@plt+0xb354>
   23434:	cmp	r5, #0
   23438:	beq	23444 <__assert_fail@plt+0x114fc>
   2343c:	mov	r0, r5
   23440:	bl	1cafc <__assert_fail@plt+0xabb4>
   23444:	mov	r4, #0
   23448:	str	r8, [r7]
   2344c:	b	23384 <__assert_fail@plt+0x1143c>
   23450:	mov	r0, r9
   23454:	bl	2386c <__assert_fail@plt+0x11924>
   23458:	b	23384 <__assert_fail@plt+0x1143c>
   2345c:	movw	r0, #2076	; 0x81c
   23460:	bl	24bf0 <__assert_fail@plt+0x12ca8>
   23464:	movw	r3, #12944	; 0x3290
   23468:	movt	r3, #2
   2346c:	str	r6, [r0]
   23470:	mov	r4, r0
   23474:	stmib	r0, {r3, r6}
   23478:	b	23384 <__assert_fail@plt+0x1143c>
   2347c:	mov	r4, r7
   23480:	b	23384 <__assert_fail@plt+0x1143c>
   23484:	str	r1, [r0, #4]
   23488:	bx	lr
   2348c:	str	r1, [r0, #8]
   23490:	bx	lr
   23494:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23498:	mov	r5, r1
   2349c:	mov	r4, r2
   234a0:	strd	r6, [sp, #8]
   234a4:	mov	r6, r0
   234a8:	ldr	r7, [r0]
   234ac:	strd	r8, [sp, #16]
   234b0:	str	sl, [sp, #24]
   234b4:	str	lr, [sp, #28]
   234b8:	cmp	r7, #0
   234bc:	beq	23528 <__assert_fail@plt+0x115e0>
   234c0:	bl	11d74 <__errno_location@plt>
   234c4:	mov	r8, r0
   234c8:	b	234ec <__assert_fail@plt+0x115a4>
   234cc:	ldm	r6, {r1, r2}
   234d0:	ldr	r0, [r6, #8]
   234d4:	ldr	r1, [r1]
   234d8:	tst	r1, #32
   234dc:	moveq	r3, #0
   234e0:	str	r3, [r8]
   234e4:	blx	r2
   234e8:	ldr	r7, [r6]
   234ec:	mov	r3, r7
   234f0:	mov	r2, r4
   234f4:	mov	r0, r5
   234f8:	mov	r1, #1
   234fc:	bl	11ee8 <fread_unlocked@plt>
   23500:	subs	r4, r4, r0
   23504:	add	r5, r5, r0
   23508:	ldr	r3, [r8]
   2350c:	bne	234cc <__assert_fail@plt+0x11584>
   23510:	ldrd	r4, [sp]
   23514:	ldrd	r6, [sp, #8]
   23518:	ldrd	r8, [sp, #16]
   2351c:	ldr	sl, [sp, #24]
   23520:	add	sp, sp, #28
   23524:	pop	{pc}		; (ldr pc, [sp], #4)
   23528:	mov	r8, r0
   2352c:	ldr	r7, [r8, #12]!
   23530:	cmp	r2, r7
   23534:	add	r8, r8, #1040	; 0x410
   23538:	addhi	r9, r0, #16
   2353c:	bls	235d4 <__assert_fail@plt+0x1168c>
   23540:	rsb	r1, r7, #1024	; 0x400
   23544:	mov	r2, r7
   23548:	add	r1, r8, r1
   2354c:	mov	r0, r5
   23550:	add	r5, r5, r7
   23554:	sub	r4, r4, r7
   23558:	bl	11ac8 <memcpy@plt>
   2355c:	tst	r5, #3
   23560:	mov	r1, r8
   23564:	mov	r0, r9
   23568:	mov	r7, #1024	; 0x400
   2356c:	beq	23598 <__assert_fail@plt+0x11650>
   23570:	bl	23634 <__assert_fail@plt+0x116ec>
   23574:	cmp	r4, #1024	; 0x400
   23578:	bhi	23540 <__assert_fail@plt+0x115f8>
   2357c:	b	235ac <__assert_fail@plt+0x11664>
   23580:	mov	r1, r5
   23584:	mov	r0, r9
   23588:	bl	23634 <__assert_fail@plt+0x116ec>
   2358c:	subs	r4, r4, #1024	; 0x400
   23590:	add	r5, r5, #1024	; 0x400
   23594:	beq	235cc <__assert_fail@plt+0x11684>
   23598:	cmp	r4, #1024	; 0x400
   2359c:	bcs	23580 <__assert_fail@plt+0x11638>
   235a0:	mov	r0, r9
   235a4:	mov	r1, r8
   235a8:	bl	23634 <__assert_fail@plt+0x116ec>
   235ac:	mov	r7, #1024	; 0x400
   235b0:	mov	r2, r4
   235b4:	sub	r4, r7, r4
   235b8:	mov	r1, r8
   235bc:	mov	r0, r5
   235c0:	bl	11ac8 <memcpy@plt>
   235c4:	str	r4, [r6, #12]
   235c8:	b	23510 <__assert_fail@plt+0x115c8>
   235cc:	str	r4, [r6, #12]
   235d0:	b	23510 <__assert_fail@plt+0x115c8>
   235d4:	rsb	r3, r7, #1024	; 0x400
   235d8:	add	r8, r8, r3
   235dc:	b	235b0 <__assert_fail@plt+0x11668>
   235e0:	strd	r4, [sp, #-16]!
   235e4:	mvn	r2, #0
   235e8:	mov	r4, r0
   235ec:	ldr	r5, [r0]
   235f0:	movw	r1, #2076	; 0x81c
   235f4:	str	r6, [sp, #8]
   235f8:	str	lr, [sp, #12]
   235fc:	bl	11e4c <__explicit_bzero_chk@plt>
   23600:	mov	r0, r4
   23604:	bl	1d29c <__assert_fail@plt+0xb354>
   23608:	subs	r0, r5, #0
   2360c:	beq	23624 <__assert_fail@plt+0x116dc>
   23610:	ldrd	r4, [sp]
   23614:	ldr	r6, [sp, #8]
   23618:	ldr	lr, [sp, #12]
   2361c:	add	sp, sp, #16
   23620:	b	1cafc <__assert_fail@plt+0xabb4>
   23624:	ldrd	r4, [sp]
   23628:	ldr	r6, [sp, #8]
   2362c:	add	sp, sp, #12
   23630:	pop	{pc}		; (ldr pc, [sp], #4)
   23634:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23638:	add	r2, r0, #16
   2363c:	add	r5, r1, #16
   23640:	ldr	r3, [r0, #1024]	; 0x400
   23644:	str	lr, [sp, #20]
   23648:	ldr	ip, [r0, #1028]	; 0x404
   2364c:	strd	r6, [sp, #8]
   23650:	add	r6, r1, #528	; 0x210
   23654:	ldr	lr, [r0, #1032]	; 0x408
   23658:	str	r8, [sp, #16]
   2365c:	add	lr, lr, #1
   23660:	add	ip, ip, lr
   23664:	str	lr, [r0, #1032]	; 0x408
   23668:	ldr	lr, [r2, #-16]
   2366c:	eor	r3, r3, r3, lsl #13
   23670:	add	r5, r5, #16
   23674:	add	r2, r2, #16
   23678:	ldr	r4, [r2, #480]	; 0x1e0
   2367c:	and	r7, lr, #1020	; 0x3fc
   23680:	ldr	r7, [r0, r7]
   23684:	add	r3, r3, r4
   23688:	eor	r4, r3, r3, lsr #6
   2368c:	add	r3, r3, r7
   23690:	add	r3, r3, ip
   23694:	lsr	ip, r3, #8
   23698:	str	r3, [r2, #-32]	; 0xffffffe0
   2369c:	and	r3, ip, #1020	; 0x3fc
   236a0:	ldr	r7, [r0, r3]
   236a4:	add	r7, lr, r7
   236a8:	str	r7, [r5, #-32]	; 0xffffffe0
   236ac:	ldr	ip, [r2, #-28]	; 0xffffffe4
   236b0:	ldr	lr, [r2, #484]	; 0x1e4
   236b4:	and	r3, ip, #1020	; 0x3fc
   236b8:	ldr	r8, [r0, r3]
   236bc:	add	lr, r4, lr
   236c0:	eor	r3, lr, lr, lsl #2
   236c4:	add	lr, lr, r8
   236c8:	add	lr, lr, r7
   236cc:	lsr	r4, lr, #8
   236d0:	str	lr, [r2, #-28]	; 0xffffffe4
   236d4:	and	lr, r4, #1020	; 0x3fc
   236d8:	ldr	r4, [r0, lr]
   236dc:	add	r4, ip, r4
   236e0:	str	r4, [r5, #-28]	; 0xffffffe4
   236e4:	ldr	lr, [r2, #-24]	; 0xffffffe8
   236e8:	ldr	ip, [r2, #488]	; 0x1e8
   236ec:	and	r7, lr, #1020	; 0x3fc
   236f0:	ldr	r8, [r0, r7]
   236f4:	add	ip, r3, ip
   236f8:	eor	r7, ip, ip, lsr #16
   236fc:	add	ip, ip, r8
   23700:	add	ip, ip, r4
   23704:	lsr	r3, ip, #8
   23708:	str	ip, [r2, #-24]	; 0xffffffe8
   2370c:	and	ip, r3, #1020	; 0x3fc
   23710:	ldr	r4, [r0, ip]
   23714:	add	r4, lr, r4
   23718:	str	r4, [r5, #-24]	; 0xffffffe8
   2371c:	ldr	ip, [r2, #-20]	; 0xffffffec
   23720:	ldr	r3, [r2, #492]	; 0x1ec
   23724:	and	lr, ip, #1020	; 0x3fc
   23728:	ldr	lr, [r0, lr]
   2372c:	add	r3, r7, r3
   23730:	add	lr, r3, lr
   23734:	add	lr, lr, r4
   23738:	lsr	r4, lr, #8
   2373c:	str	lr, [r2, #-20]	; 0xffffffec
   23740:	and	lr, r4, #1020	; 0x3fc
   23744:	ldr	lr, [r0, lr]
   23748:	add	ip, ip, lr
   2374c:	str	ip, [r5, #-20]	; 0xffffffec
   23750:	cmp	r6, r5
   23754:	bne	23668 <__assert_fail@plt+0x11720>
   23758:	add	r1, r1, #1040	; 0x410
   2375c:	add	r2, r0, #528	; 0x210
   23760:	ldr	r4, [r2, #-528]	; 0xfffffdf0
   23764:	eor	r3, r3, r3, lsl #13
   23768:	add	r6, r6, #16
   2376c:	add	r2, r2, #16
   23770:	ldr	lr, [r2, #-32]	; 0xffffffe0
   23774:	add	r3, r3, r4
   23778:	eor	r4, r3, r3, lsr #6
   2377c:	and	r5, lr, #1020	; 0x3fc
   23780:	ldr	r5, [r0, r5]
   23784:	add	r3, r3, r5
   23788:	add	r3, r3, ip
   2378c:	lsr	ip, r3, #8
   23790:	str	r3, [r2, #-32]	; 0xffffffe0
   23794:	and	r3, ip, #1020	; 0x3fc
   23798:	ldr	r5, [r0, r3]
   2379c:	add	r5, lr, r5
   237a0:	str	r5, [r6, #-32]	; 0xffffffe0
   237a4:	ldr	lr, [r2, #-540]	; 0xfffffde4
   237a8:	ldr	ip, [r2, #-28]	; 0xffffffe4
   237ac:	add	lr, r4, lr
   237b0:	and	r3, ip, #1020	; 0x3fc
   237b4:	ldr	r7, [r0, r3]
   237b8:	eor	r3, lr, lr, lsl #2
   237bc:	add	lr, lr, r7
   237c0:	add	lr, lr, r5
   237c4:	lsr	r4, lr, #8
   237c8:	str	lr, [r2, #-28]	; 0xffffffe4
   237cc:	and	lr, r4, #1020	; 0x3fc
   237d0:	ldr	r4, [r0, lr]
   237d4:	add	r4, ip, r4
   237d8:	str	r4, [r6, #-28]	; 0xffffffe4
   237dc:	ldr	ip, [r2, #-536]	; 0xfffffde8
   237e0:	ldr	lr, [r2, #-24]	; 0xffffffe8
   237e4:	add	ip, r3, ip
   237e8:	and	r5, lr, #1020	; 0x3fc
   237ec:	ldr	r7, [r0, r5]
   237f0:	eor	r5, ip, ip, lsr #16
   237f4:	add	ip, ip, r7
   237f8:	add	ip, ip, r4
   237fc:	lsr	r4, ip, #8
   23800:	str	ip, [r2, #-24]	; 0xffffffe8
   23804:	and	ip, r4, #1020	; 0x3fc
   23808:	ldr	r4, [r0, ip]
   2380c:	add	r4, lr, r4
   23810:	str	r4, [r6, #-24]	; 0xffffffe8
   23814:	ldr	r3, [r2, #-532]	; 0xfffffdec
   23818:	ldr	ip, [r2, #-20]	; 0xffffffec
   2381c:	add	r3, r5, r3
   23820:	and	lr, ip, #1020	; 0x3fc
   23824:	ldr	lr, [r0, lr]
   23828:	add	lr, r3, lr
   2382c:	add	lr, lr, r4
   23830:	lsr	r4, lr, #8
   23834:	str	lr, [r2, #-20]	; 0xffffffec
   23838:	and	lr, r4, #1020	; 0x3fc
   2383c:	ldr	lr, [r0, lr]
   23840:	add	ip, ip, lr
   23844:	str	ip, [r6, #-20]	; 0xffffffec
   23848:	cmp	r1, r6
   2384c:	bne	23760 <__assert_fail@plt+0x11818>
   23850:	ldrd	r4, [sp]
   23854:	str	r3, [r0, #1024]	; 0x400
   23858:	ldrd	r6, [sp, #8]
   2385c:	str	ip, [r0, #1028]	; 0x404
   23860:	ldr	r8, [sp, #16]
   23864:	add	sp, sp, #20
   23868:	pop	{pc}		; (ldr pc, [sp], #4)
   2386c:	mov	r1, #89	; 0x59
   23870:	movt	r1, #38361	; 0x95d9
   23874:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23878:	movw	r3, #57178	; 0xdf5a
   2387c:	movt	r3, #4967	; 0x1367
   23880:	strd	r6, [sp, #8]
   23884:	movw	r5, #59931	; 0xea1b
   23888:	movt	r5, #50415	; 0xc4ef
   2388c:	strd	r8, [sp, #16]
   23890:	movw	r4, #15433	; 0x3c49
   23894:	movt	r4, #42266	; 0xa51a
   23898:	strd	sl, [sp, #24]
   2389c:	movw	r6, #37145	; 0x9119
   238a0:	movt	r6, #12384	; 0x3060
   238a4:	str	lr, [sp, #32]
   238a8:	movw	r8, #6872	; 0x1ad8
   238ac:	movt	r8, #3906	; 0xf42
   238b0:	sub	sp, sp, #12
   238b4:	movw	lr, #19064	; 0x4a78
   238b8:	movt	lr, #55594	; 0xd92a
   238bc:	movw	r7, #15947	; 0x3e4b
   238c0:	movt	r7, #49942	; 0xc316
   238c4:	mov	sl, r0
   238c8:	str	r0, [sp, #4]
   238cc:	add	fp, r0, #1024	; 0x400
   238d0:	mov	r9, r0
   238d4:	ldr	r2, [r9]
   238d8:	ldr	r0, [r9, #8]
   238dc:	ldr	ip, [r9, #12]
   238e0:	add	r2, r3, r2
   238e4:	ldr	r3, [r9, #4]
   238e8:	add	r7, r7, r0
   238ec:	ldr	r0, [r9, #20]
   238f0:	add	r1, r1, r3
   238f4:	ldr	r3, [r9, #16]
   238f8:	eor	r2, r2, r1, lsl #11
   238fc:	add	r1, r1, r7
   23900:	eor	r1, r1, r7, lsr #2
   23904:	add	ip, r2, ip
   23908:	add	r8, ip, r8
   2390c:	ldr	ip, [r9, #24]
   23910:	add	r7, r7, r8
   23914:	add	r3, r1, r3
   23918:	eor	r7, r7, r8, lsl #8
   2391c:	add	r3, r3, lr
   23920:	add	r8, r8, r3
   23924:	add	lr, r7, r0
   23928:	eor	r8, r8, r3, lsr #16
   2392c:	add	r4, lr, r4
   23930:	add	r3, r3, r4
   23934:	add	ip, r8, ip
   23938:	eor	lr, r3, r4, lsl #10
   2393c:	ldr	r3, [r9, #28]
   23940:	add	ip, ip, r5
   23944:	add	r4, r4, ip
   23948:	eor	r4, r4, ip, lsr #4
   2394c:	add	r2, r2, r4
   23950:	add	r3, lr, r3
   23954:	add	r6, r3, r6
   23958:	add	ip, ip, r6
   2395c:	eor	r5, ip, r6, lsl #8
   23960:	add	r6, r6, r2
   23964:	eor	r6, r6, r2, lsr #9
   23968:	add	r1, r1, r5
   2396c:	add	r3, r2, r1
   23970:	add	r7, r7, r6
   23974:	str	r3, [r9]
   23978:	stmib	r9, {r1, r7, r8, lr}
   2397c:	add	r9, r9, #32
   23980:	strd	r4, [r9, #-12]
   23984:	str	r6, [r9, #-4]
   23988:	cmp	fp, r9
   2398c:	bne	238d4 <__assert_fail@plt+0x1198c>
   23990:	ldr	r0, [sp, #4]
   23994:	mov	r2, r1
   23998:	mov	ip, r8
   2399c:	mov	r1, r3
   239a0:	mov	r3, r7
   239a4:	ldrd	r8, [sl]
   239a8:	ldr	r7, [sl, #8]
   239ac:	add	r2, r2, r9
   239b0:	add	r1, r1, r8
   239b4:	ldrd	r8, [sl, #12]
   239b8:	eor	r1, r1, r2, lsl #11
   239bc:	add	r3, r3, r7
   239c0:	ldr	r7, [sl, #20]
   239c4:	add	r2, r2, r3
   239c8:	eor	r2, r2, r3, lsr #2
   239cc:	add	r8, r1, r8
   239d0:	add	ip, r8, ip
   239d4:	add	r9, r2, r9
   239d8:	ldr	r8, [sl, #24]
   239dc:	add	r3, r3, ip
   239e0:	add	r9, r9, lr
   239e4:	eor	r3, r3, ip, lsl #8
   239e8:	add	ip, ip, r9
   239ec:	eor	ip, ip, r9, lsr #16
   239f0:	add	r7, r3, r7
   239f4:	add	r7, r7, r4
   239f8:	ldr	r4, [sl, #28]
   239fc:	add	r8, ip, r8
   23a00:	add	r9, r9, r7
   23a04:	add	r5, r8, r5
   23a08:	eor	lr, r9, r7, lsl #10
   23a0c:	add	r7, r7, r5
   23a10:	add	r8, lr, r4
   23a14:	eor	r4, r7, r5, lsr #4
   23a18:	str	lr, [sl, #16]
   23a1c:	add	r6, r8, r6
   23a20:	add	r1, r1, r4
   23a24:	add	r5, r5, r6
   23a28:	eor	r5, r5, r6, lsl #8
   23a2c:	add	r6, r6, r1
   23a30:	eor	r6, r6, r1, lsr #9
   23a34:	add	r2, r2, r5
   23a38:	add	r1, r1, r2
   23a3c:	add	r3, r3, r6
   23a40:	stm	sl, {r1, r2, r3, ip}
   23a44:	add	sl, sl, #32
   23a48:	strd	r4, [sl, #-12]
   23a4c:	str	r6, [sl, #-4]
   23a50:	cmp	fp, sl
   23a54:	bne	239a4 <__assert_fail@plt+0x11a5c>
   23a58:	mov	r3, #0
   23a5c:	str	r3, [r0, #1024]	; 0x400
   23a60:	str	r3, [r0, #1028]	; 0x404
   23a64:	str	r3, [r0, #1032]	; 0x408
   23a68:	add	sp, sp, #12
   23a6c:	ldrd	r4, [sp]
   23a70:	ldrd	r6, [sp, #8]
   23a74:	ldrd	r8, [sp, #16]
   23a78:	ldrd	sl, [sp, #24]
   23a7c:	add	sp, sp, #32
   23a80:	pop	{pc}		; (ldr pc, [sp], #4)
   23a84:	strd	r4, [sp, #-16]!
   23a88:	mov	r4, r0
   23a8c:	ldr	r3, [r0, #24]
   23a90:	str	r6, [sp, #8]
   23a94:	ldr	r6, [r0, #20]
   23a98:	str	lr, [sp, #12]
   23a9c:	sub	r5, r3, r6
   23aa0:	cmp	r3, r6
   23aa4:	sub	r5, r5, #1
   23aa8:	beq	23b68 <__assert_fail@plt+0x11c20>
   23aac:	ldr	r2, [r4, #16]
   23ab0:	ldr	r0, [r4, #36]	; 0x24
   23ab4:	ldr	r1, [r4, #28]
   23ab8:	add	r3, r3, r0
   23abc:	bic	r3, r3, r0
   23ac0:	sub	r0, r3, r2
   23ac4:	sub	r2, r1, r2
   23ac8:	cmp	r0, r2
   23acc:	str	r3, [r4, #24]
   23ad0:	movhi	r3, r1
   23ad4:	ldr	r2, [r4, #68]	; 0x44
   23ad8:	strhi	r1, [r4, #24]
   23adc:	str	r3, [r4, #20]
   23ae0:	ldr	r3, [r4, #72]	; 0x48
   23ae4:	sub	r3, r3, r2
   23ae8:	cmp	r3, #3
   23aec:	bls	23b40 <__assert_fail@plt+0x11bf8>
   23af0:	str	r6, [r2]
   23af4:	ldr	r2, [r4, #68]	; 0x44
   23af8:	ldr	r1, [r4, #112]	; 0x70
   23afc:	ldr	r3, [r4, #116]	; 0x74
   23b00:	add	r2, r2, #4
   23b04:	str	r2, [r4, #68]	; 0x44
   23b08:	sub	r3, r3, r1
   23b0c:	cmp	r3, #3
   23b10:	bls	23b54 <__assert_fail@plt+0x11c0c>
   23b14:	str	r5, [r1]
   23b18:	ldr	r2, [r4]
   23b1c:	ldr	r3, [r4, #112]	; 0x70
   23b20:	ldr	r6, [sp, #8]
   23b24:	add	r2, r2, #1
   23b28:	add	r3, r3, #4
   23b2c:	str	r2, [r4]
   23b30:	str	r3, [r4, #112]	; 0x70
   23b34:	ldrd	r4, [sp]
   23b38:	add	sp, sp, #12
   23b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   23b40:	mov	r1, #4
   23b44:	add	r0, r4, #56	; 0x38
   23b48:	bl	26c90 <_obstack_newchunk@@Base>
   23b4c:	ldr	r2, [r4, #68]	; 0x44
   23b50:	b	23af0 <__assert_fail@plt+0x11ba8>
   23b54:	mov	r1, #4
   23b58:	add	r0, r4, #100	; 0x64
   23b5c:	bl	26c90 <_obstack_newchunk@@Base>
   23b60:	ldr	r1, [r4, #112]	; 0x70
   23b64:	b	23b14 <__assert_fail@plt+0x11bcc>
   23b68:	ldrb	r2, [r0, #52]	; 0x34
   23b6c:	orr	r2, r2, #2
   23b70:	strb	r2, [r0, #52]	; 0x34
   23b74:	b	23aac <__assert_fail@plt+0x11b64>
   23b78:	strd	r4, [sp, #-20]!	; 0xffffffec
   23b7c:	mov	r4, #0
   23b80:	mov	r5, r0
   23b84:	strd	r6, [sp, #8]
   23b88:	movw	r6, #53916	; 0xd29c
   23b8c:	movt	r6, #1
   23b90:	str	lr, [sp, #16]
   23b94:	sub	sp, sp, #12
   23b98:	movw	r7, #25296	; 0x62d0
   23b9c:	movt	r7, #2
   23ba0:	mov	r2, r4
   23ba4:	mov	r1, r4
   23ba8:	mov	r3, r7
   23bac:	str	r6, [sp]
   23bb0:	add	r0, r0, #12
   23bb4:	str	r4, [r5]
   23bb8:	str	r4, [r5, #4]
   23bbc:	str	r4, [r5, #8]
   23bc0:	bl	26acc <_obstack_begin@@Base>
   23bc4:	mov	r3, r7
   23bc8:	mov	r2, r4
   23bcc:	str	r6, [sp]
   23bd0:	mov	r1, r4
   23bd4:	add	r0, r5, #56	; 0x38
   23bd8:	bl	26acc <_obstack_begin@@Base>
   23bdc:	mov	r3, r7
   23be0:	add	r0, r5, #100	; 0x64
   23be4:	str	r6, [sp]
   23be8:	mov	r2, r4
   23bec:	mov	r1, r4
   23bf0:	bl	26acc <_obstack_begin@@Base>
   23bf4:	add	sp, sp, #12
   23bf8:	ldrd	r4, [sp]
   23bfc:	ldrd	r6, [sp, #8]
   23c00:	add	sp, sp, #16
   23c04:	pop	{pc}		; (ldr pc, [sp], #4)
   23c08:	mov	r1, #0
   23c0c:	str	r4, [sp, #-8]!
   23c10:	mov	r4, r0
   23c14:	add	r0, r0, #12
   23c18:	str	lr, [sp, #4]
   23c1c:	bl	26e38 <_obstack_free@@Base>
   23c20:	add	r0, r4, #56	; 0x38
   23c24:	mov	r1, #0
   23c28:	bl	26e38 <_obstack_free@@Base>
   23c2c:	add	r0, r4, #100	; 0x64
   23c30:	mov	r1, #0
   23c34:	ldr	r4, [sp]
   23c38:	ldr	lr, [sp, #4]
   23c3c:	add	sp, sp, #8
   23c40:	b	26e38 <_obstack_free@@Base>
   23c44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23c48:	mov	r4, r1
   23c4c:	strd	r6, [sp, #8]
   23c50:	mov	r6, r0
   23c54:	add	r7, r1, #12
   23c58:	str	r8, [sp, #16]
   23c5c:	str	lr, [sp, #20]
   23c60:	mov	r0, r6
   23c64:	bl	11da4 <fgetc@plt>
   23c68:	cmn	r0, #1
   23c6c:	mov	r5, r0
   23c70:	beq	23ccc <__assert_fail@plt+0x11d84>
   23c74:	ldr	r3, [r4, #24]
   23c78:	ldr	r2, [r4, #28]
   23c7c:	add	r1, r3, #1
   23c80:	cmp	r2, r3
   23c84:	beq	23ca4 <__assert_fail@plt+0x11d5c>
   23c88:	cmp	r0, #0
   23c8c:	str	r1, [r4, #24]
   23c90:	strb	r0, [r3]
   23c94:	bne	23c60 <__assert_fail@plt+0x11d18>
   23c98:	mov	r0, r4
   23c9c:	bl	23a84 <__assert_fail@plt+0x11b3c>
   23ca0:	b	23c60 <__assert_fail@plt+0x11d18>
   23ca4:	mov	r1, #1
   23ca8:	mov	r0, r7
   23cac:	bl	26c90 <_obstack_newchunk@@Base>
   23cb0:	ldr	r3, [r4, #24]
   23cb4:	cmp	r5, #0
   23cb8:	add	r2, r3, #1
   23cbc:	str	r2, [r4, #24]
   23cc0:	strb	r5, [r3]
   23cc4:	bne	23c60 <__assert_fail@plt+0x11d18>
   23cc8:	b	23c98 <__assert_fail@plt+0x11d50>
   23ccc:	ldrd	r2, [r4, #20]
   23cd0:	cmp	r3, r2
   23cd4:	beq	23cfc <__assert_fail@plt+0x11db4>
   23cd8:	ldr	r2, [r4, #28]
   23cdc:	cmp	r3, r2
   23ce0:	beq	23dfc <__assert_fail@plt+0x11eb4>
   23ce4:	add	r1, r3, #1
   23ce8:	mov	r2, #0
   23cec:	mov	r0, r4
   23cf0:	str	r1, [r4, #24]
   23cf4:	strb	r2, [r3]
   23cf8:	bl	23a84 <__assert_fail@plt+0x11b3c>
   23cfc:	ldrd	r2, [r4, #68]	; 0x44
   23d00:	sub	r3, r3, r2
   23d04:	cmp	r3, #3
   23d08:	bls	23dc8 <__assert_fail@plt+0x11e80>
   23d0c:	mov	r3, #0
   23d10:	str	r3, [r2]
   23d14:	ldr	r1, [r4, #64]	; 0x40
   23d18:	ldr	r3, [r4, #68]	; 0x44
   23d1c:	add	r3, r3, #4
   23d20:	cmp	r3, r1
   23d24:	str	r3, [r4, #68]	; 0x44
   23d28:	beq	23dec <__assert_fail@plt+0x11ea4>
   23d2c:	ldr	r2, [r4, #60]	; 0x3c
   23d30:	str	r1, [r4, #4]
   23d34:	ldr	r0, [r4, #80]	; 0x50
   23d38:	ldr	ip, [r4, #72]	; 0x48
   23d3c:	add	r3, r3, r0
   23d40:	bic	r3, r3, r0
   23d44:	sub	r0, r3, r2
   23d48:	sub	r2, ip, r2
   23d4c:	cmp	r0, r2
   23d50:	str	r3, [r4, #68]	; 0x44
   23d54:	movhi	r3, ip
   23d58:	ldr	r2, [r4, #112]	; 0x70
   23d5c:	strhi	ip, [r4, #68]	; 0x44
   23d60:	ldr	ip, [r4, #108]	; 0x6c
   23d64:	str	r3, [r4, #64]	; 0x40
   23d68:	cmp	r2, ip
   23d6c:	beq	23ddc <__assert_fail@plt+0x11e94>
   23d70:	ldr	r1, [r4, #104]	; 0x68
   23d74:	str	ip, [r4, #8]
   23d78:	ldr	r0, [r4, #124]	; 0x7c
   23d7c:	ldr	lr, [r4, #116]	; 0x74
   23d80:	add	r3, r2, r0
   23d84:	bic	r3, r3, r0
   23d88:	mov	r0, r6
   23d8c:	sub	r2, r3, r1
   23d90:	sub	r1, lr, r1
   23d94:	cmp	r2, r1
   23d98:	str	r3, [r4, #112]	; 0x70
   23d9c:	movhi	r3, lr
   23da0:	strhi	lr, [r4, #112]	; 0x70
   23da4:	str	r3, [r4, #108]	; 0x6c
   23da8:	bl	11ab0 <ferror@plt>
   23dac:	clz	r0, r0
   23db0:	ldrd	r4, [sp]
   23db4:	lsr	r0, r0, #5
   23db8:	ldrd	r6, [sp, #8]
   23dbc:	ldr	r8, [sp, #16]
   23dc0:	add	sp, sp, #20
   23dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   23dc8:	mov	r1, #4
   23dcc:	add	r0, r4, #56	; 0x38
   23dd0:	bl	26c90 <_obstack_newchunk@@Base>
   23dd4:	ldr	r2, [r4, #68]	; 0x44
   23dd8:	b	23d0c <__assert_fail@plt+0x11dc4>
   23ddc:	ldrb	r3, [r4, #140]	; 0x8c
   23de0:	orr	r3, r3, #2
   23de4:	strb	r3, [r4, #140]	; 0x8c
   23de8:	b	23d70 <__assert_fail@plt+0x11e28>
   23dec:	ldrb	r2, [r4, #96]	; 0x60
   23df0:	orr	r2, r2, #2
   23df4:	strb	r2, [r4, #96]	; 0x60
   23df8:	b	23d2c <__assert_fail@plt+0x11de4>
   23dfc:	mov	r1, #1
   23e00:	add	r0, r4, #12
   23e04:	bl	26c90 <_obstack_newchunk@@Base>
   23e08:	ldr	r3, [r4, #24]
   23e0c:	b	23ce4 <__assert_fail@plt+0x11d9c>
   23e10:	strd	r4, [sp, #-16]!
   23e14:	mov	r5, r1
   23e18:	mov	r1, #0
   23e1c:	mov	r4, r2
   23e20:	str	r6, [sp, #8]
   23e24:	str	lr, [sp, #12]
   23e28:	bl	11e28 <setlocale@plt>
   23e2c:	subs	r6, r0, #0
   23e30:	beq	23eb0 <__assert_fail@plt+0x11f68>
   23e34:	bl	11d50 <strlen@plt>
   23e38:	cmp	r4, r0
   23e3c:	bhi	23e5c <__assert_fail@plt+0x11f14>
   23e40:	cmp	r4, #0
   23e44:	moveq	r0, #34	; 0x22
   23e48:	bne	23e80 <__assert_fail@plt+0x11f38>
   23e4c:	ldrd	r4, [sp]
   23e50:	ldr	r6, [sp, #8]
   23e54:	add	sp, sp, #12
   23e58:	pop	{pc}		; (ldr pc, [sp], #4)
   23e5c:	add	r2, r0, #1
   23e60:	mov	r1, r6
   23e64:	mov	r0, r5
   23e68:	bl	11ac8 <memcpy@plt>
   23e6c:	ldrd	r4, [sp]
   23e70:	mov	r0, #0
   23e74:	ldr	r6, [sp, #8]
   23e78:	add	sp, sp, #12
   23e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   23e80:	sub	r4, r4, #1
   23e84:	mov	r1, r6
   23e88:	mov	r2, r4
   23e8c:	mov	r0, r5
   23e90:	bl	11ac8 <memcpy@plt>
   23e94:	mov	r3, #0
   23e98:	mov	r0, #34	; 0x22
   23e9c:	strb	r3, [r5, r4]
   23ea0:	ldrd	r4, [sp]
   23ea4:	ldr	r6, [sp, #8]
   23ea8:	add	sp, sp, #12
   23eac:	pop	{pc}		; (ldr pc, [sp], #4)
   23eb0:	cmp	r4, #0
   23eb4:	mov	r0, #22
   23eb8:	strbne	r6, [r5]
   23ebc:	ldrd	r4, [sp]
   23ec0:	ldr	r6, [sp, #8]
   23ec4:	add	sp, sp, #12
   23ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   23ecc:	mov	r1, #0
   23ed0:	b	11e28 <setlocale@plt>
   23ed4:	str	r4, [sp, #-8]!
   23ed8:	str	lr, [sp, #4]
   23edc:	bl	11cc0 <mkstemp64@plt>
   23ee0:	ldr	r4, [sp]
   23ee4:	ldr	lr, [sp, #4]
   23ee8:	add	sp, sp, #8
   23eec:	b	24454 <__assert_fail@plt+0x1250c>
   23ef0:	str	r4, [sp, #-8]!
   23ef4:	mov	r4, r1
   23ef8:	str	lr, [sp, #4]
   23efc:	bl	11c0c <mkostemp64@plt>
   23f00:	mov	r1, r4
   23f04:	ldr	r4, [sp]
   23f08:	ldr	lr, [sp, #4]
   23f0c:	add	sp, sp, #8
   23f10:	b	266a8 <__assert_fail@plt+0x14760>
   23f14:	strd	r4, [sp, #-12]!
   23f18:	str	lr, [sp, #8]
   23f1c:	ldrb	lr, [r0]
   23f20:	ldrb	ip, [r1]
   23f24:	cmp	lr, #45	; 0x2d
   23f28:	beq	23f70 <__assert_fail@plt+0x12028>
   23f2c:	cmp	ip, #45	; 0x2d
   23f30:	bne	23fe4 <__assert_fail@plt+0x1209c>
   23f34:	ldrb	r5, [r1, #1]!
   23f38:	cmp	r5, #48	; 0x30
   23f3c:	beq	23f34 <__assert_fail@plt+0x11fec>
   23f40:	cmp	r3, r5
   23f44:	beq	23f34 <__assert_fail@plt+0x11fec>
   23f48:	cmp	r2, r5
   23f4c:	beq	240b8 <__assert_fail@plt+0x12170>
   23f50:	sub	r5, r5, #48	; 0x30
   23f54:	cmp	r5, #9
   23f58:	bhi	240d8 <__assert_fail@plt+0x12190>
   23f5c:	mov	lr, #1
   23f60:	ldrd	r4, [sp]
   23f64:	add	sp, sp, #8
   23f68:	mov	r0, lr
   23f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   23f70:	ldrb	lr, [r0, #1]!
   23f74:	cmp	lr, #48	; 0x30
   23f78:	beq	23f70 <__assert_fail@plt+0x12028>
   23f7c:	cmp	r3, lr
   23f80:	beq	23f70 <__assert_fail@plt+0x12028>
   23f84:	cmp	ip, #45	; 0x2d
   23f88:	beq	2404c <__assert_fail@plt+0x12104>
   23f8c:	cmp	r2, lr
   23f90:	beq	2409c <__assert_fail@plt+0x12154>
   23f94:	sub	lr, lr, #48	; 0x30
   23f98:	cmp	lr, #9
   23f9c:	bhi	23fa8 <__assert_fail@plt+0x12060>
   23fa0:	b	241a4 <__assert_fail@plt+0x1225c>
   23fa4:	ldrb	ip, [r1, #1]!
   23fa8:	cmp	ip, #48	; 0x30
   23fac:	beq	23fa4 <__assert_fail@plt+0x1205c>
   23fb0:	cmp	r3, ip
   23fb4:	beq	23fa4 <__assert_fail@plt+0x1205c>
   23fb8:	cmp	r2, ip
   23fbc:	beq	24110 <__assert_fail@plt+0x121c8>
   23fc0:	sub	ip, ip, #48	; 0x30
   23fc4:	cmp	ip, #9
   23fc8:	movhi	lr, #0
   23fcc:	mvnls	lr, #0
   23fd0:	ldrd	r4, [sp]
   23fd4:	add	sp, sp, #8
   23fd8:	mov	r0, lr
   23fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   23fe0:	ldrb	lr, [r0, #1]!
   23fe4:	cmp	lr, #48	; 0x30
   23fe8:	beq	23fe0 <__assert_fail@plt+0x12098>
   23fec:	cmp	r3, lr
   23ff0:	beq	23fe0 <__assert_fail@plt+0x12098>
   23ff4:	cmp	ip, #48	; 0x30
   23ff8:	bne	24008 <__assert_fail@plt+0x120c0>
   23ffc:	ldrb	ip, [r1, #1]!
   24000:	cmp	ip, #48	; 0x30
   24004:	beq	23ffc <__assert_fail@plt+0x120b4>
   24008:	cmp	r3, ip
   2400c:	beq	23ffc <__assert_fail@plt+0x120b4>
   24010:	cmp	lr, ip
   24014:	bne	2412c <__assert_fail@plt+0x121e4>
   24018:	sub	r4, lr, #48	; 0x30
   2401c:	cmp	r4, #9
   24020:	bhi	2412c <__assert_fail@plt+0x121e4>
   24024:	ldrb	lr, [r0, #1]!
   24028:	cmp	r3, lr
   2402c:	beq	24024 <__assert_fail@plt+0x120dc>
   24030:	ldrb	ip, [r1, #1]!
   24034:	cmp	r3, ip
   24038:	bne	24010 <__assert_fail@plt+0x120c8>
   2403c:	ldrb	ip, [r1, #1]!
   24040:	cmp	r3, ip
   24044:	beq	24030 <__assert_fail@plt+0x120e8>
   24048:	b	24010 <__assert_fail@plt+0x120c8>
   2404c:	ldrb	r4, [r1, #1]!
   24050:	cmp	r4, #48	; 0x30
   24054:	beq	2404c <__assert_fail@plt+0x12104>
   24058:	cmp	r3, r4
   2405c:	beq	2404c <__assert_fail@plt+0x12104>
   24060:	cmp	lr, r4
   24064:	bne	241b8 <__assert_fail@plt+0x12270>
   24068:	sub	ip, lr, #48	; 0x30
   2406c:	cmp	ip, #9
   24070:	bhi	241b8 <__assert_fail@plt+0x12270>
   24074:	ldrb	lr, [r0, #1]!
   24078:	cmp	r3, lr
   2407c:	beq	24074 <__assert_fail@plt+0x1212c>
   24080:	ldrb	r4, [r1, #1]!
   24084:	cmp	r3, r4
   24088:	bne	24060 <__assert_fail@plt+0x12118>
   2408c:	ldrb	r4, [r1, #1]!
   24090:	cmp	r3, r4
   24094:	beq	24080 <__assert_fail@plt+0x12138>
   24098:	b	24060 <__assert_fail@plt+0x12118>
   2409c:	ldrb	lr, [r0, #1]!
   240a0:	cmp	lr, #48	; 0x30
   240a4:	bne	23f94 <__assert_fail@plt+0x1204c>
   240a8:	ldrb	lr, [r0, #1]!
   240ac:	cmp	lr, #48	; 0x30
   240b0:	beq	2409c <__assert_fail@plt+0x12154>
   240b4:	b	23f94 <__assert_fail@plt+0x1204c>
   240b8:	ldrb	r5, [r1, #1]!
   240bc:	cmp	r5, #48	; 0x30
   240c0:	bne	23f50 <__assert_fail@plt+0x12008>
   240c4:	ldrb	r5, [r1, #1]!
   240c8:	cmp	r5, #48	; 0x30
   240cc:	beq	240b8 <__assert_fail@plt+0x12170>
   240d0:	b	23f50 <__assert_fail@plt+0x12008>
   240d4:	ldrb	lr, [r0, #1]!
   240d8:	cmp	lr, #48	; 0x30
   240dc:	beq	240d4 <__assert_fail@plt+0x1218c>
   240e0:	cmp	r3, lr
   240e4:	beq	240d4 <__assert_fail@plt+0x1218c>
   240e8:	cmp	r2, lr
   240ec:	beq	24244 <__assert_fail@plt+0x122fc>
   240f0:	sub	lr, lr, #48	; 0x30
   240f4:	ldrd	r4, [sp]
   240f8:	add	sp, sp, #8
   240fc:	cmp	lr, #9
   24100:	movhi	lr, #0
   24104:	movls	lr, #1
   24108:	mov	r0, lr
   2410c:	pop	{pc}		; (ldr pc, [sp], #4)
   24110:	ldrb	ip, [r1, #1]!
   24114:	cmp	ip, #48	; 0x30
   24118:	bne	23fc0 <__assert_fail@plt+0x12078>
   2411c:	ldrb	ip, [r1, #1]!
   24120:	cmp	ip, #48	; 0x30
   24124:	beq	24110 <__assert_fail@plt+0x121c8>
   24128:	b	23fc0 <__assert_fail@plt+0x12078>
   2412c:	cmp	r2, lr
   24130:	beq	24260 <__assert_fail@plt+0x12318>
   24134:	cmp	r2, ip
   24138:	sub	r4, lr, #48	; 0x30
   2413c:	beq	24288 <__assert_fail@plt+0x12340>
   24140:	cmp	r4, #9
   24144:	sub	lr, lr, ip
   24148:	sub	ip, ip, #48	; 0x30
   2414c:	bhi	242f4 <__assert_fail@plt+0x123ac>
   24150:	mov	r4, #0
   24154:	ldrb	r2, [r0, #1]!
   24158:	cmp	r3, r2
   2415c:	beq	24154 <__assert_fail@plt+0x1220c>
   24160:	sub	r2, r2, #48	; 0x30
   24164:	add	r4, r4, #1
   24168:	cmp	r2, #9
   2416c:	bls	24154 <__assert_fail@plt+0x1220c>
   24170:	cmp	ip, #9
   24174:	bhi	24318 <__assert_fail@plt+0x123d0>
   24178:	mov	r0, #0
   2417c:	ldrb	r2, [r1, #1]!
   24180:	cmp	r3, r2
   24184:	beq	2417c <__assert_fail@plt+0x12234>
   24188:	sub	r2, r2, #48	; 0x30
   2418c:	add	r0, r0, #1
   24190:	cmp	r2, #9
   24194:	bls	2417c <__assert_fail@plt+0x12234>
   24198:	cmp	r0, r4
   2419c:	beq	2422c <__assert_fail@plt+0x122e4>
   241a0:	bls	23f5c <__assert_fail@plt+0x12014>
   241a4:	mvn	lr, #0
   241a8:	ldrd	r4, [sp]
   241ac:	add	sp, sp, #8
   241b0:	mov	r0, lr
   241b4:	pop	{pc}		; (ldr pc, [sp], #4)
   241b8:	cmp	r2, lr
   241bc:	beq	242a4 <__assert_fail@plt+0x1235c>
   241c0:	cmp	r2, r4
   241c4:	sub	ip, lr, #48	; 0x30
   241c8:	beq	24304 <__assert_fail@plt+0x123bc>
   241cc:	cmp	ip, #9
   241d0:	sub	lr, r4, lr
   241d4:	sub	r4, r4, #48	; 0x30
   241d8:	bhi	243ac <__assert_fail@plt+0x12464>
   241dc:	mov	ip, #0
   241e0:	ldrb	r2, [r0, #1]!
   241e4:	cmp	r3, r2
   241e8:	beq	241e0 <__assert_fail@plt+0x12298>
   241ec:	sub	r2, r2, #48	; 0x30
   241f0:	add	ip, ip, #1
   241f4:	cmp	r2, #9
   241f8:	bls	241e0 <__assert_fail@plt+0x12298>
   241fc:	cmp	r4, #9
   24200:	bhi	243bc <__assert_fail@plt+0x12474>
   24204:	mov	r0, #0
   24208:	ldrb	r2, [r1, #1]!
   2420c:	cmp	r3, r2
   24210:	beq	24208 <__assert_fail@plt+0x122c0>
   24214:	sub	r2, r2, #48	; 0x30
   24218:	add	r0, r0, #1
   2421c:	cmp	r2, #9
   24220:	bls	24208 <__assert_fail@plt+0x122c0>
   24224:	cmp	r0, ip
   24228:	bne	2429c <__assert_fail@plt+0x12354>
   2422c:	cmp	r0, #0
   24230:	ldrd	r4, [sp]
   24234:	add	sp, sp, #8
   24238:	moveq	lr, #0
   2423c:	mov	r0, lr
   24240:	pop	{pc}		; (ldr pc, [sp], #4)
   24244:	ldrb	lr, [r0, #1]!
   24248:	cmp	lr, #48	; 0x30
   2424c:	bne	240f0 <__assert_fail@plt+0x121a8>
   24250:	ldrb	lr, [r0, #1]!
   24254:	cmp	lr, #48	; 0x30
   24258:	beq	24244 <__assert_fail@plt+0x122fc>
   2425c:	b	240f0 <__assert_fail@plt+0x121a8>
   24260:	sub	r4, ip, #48	; 0x30
   24264:	cmp	r4, #9
   24268:	bls	24134 <__assert_fail@plt+0x121ec>
   2426c:	uxtb	r4, r2
   24270:	cmp	lr, r4
   24274:	beq	24324 <__assert_fail@plt+0x123dc>
   24278:	cmp	r4, ip
   2427c:	beq	24380 <__assert_fail@plt+0x12438>
   24280:	mov	lr, #0
   24284:	b	23fd0 <__assert_fail@plt+0x12088>
   24288:	cmp	r4, #9
   2428c:	subls	lr, lr, r2
   24290:	subls	ip, r2, #48	; 0x30
   24294:	bls	24150 <__assert_fail@plt+0x12208>
   24298:	b	2426c <__assert_fail@plt+0x12324>
   2429c:	bhi	23f5c <__assert_fail@plt+0x12014>
   242a0:	b	241a4 <__assert_fail@plt+0x1225c>
   242a4:	sub	ip, r4, #48	; 0x30
   242a8:	cmp	ip, #9
   242ac:	bls	241c0 <__assert_fail@plt+0x12278>
   242b0:	uxtb	ip, r2
   242b4:	cmp	ip, r4
   242b8:	beq	243cc <__assert_fail@plt+0x12484>
   242bc:	cmp	ip, lr
   242c0:	addeq	r0, r0, #1
   242c4:	bne	24280 <__assert_fail@plt+0x12338>
   242c8:	ldrb	r3, [r0]
   242cc:	cmp	r3, #48	; 0x30
   242d0:	bne	242e0 <__assert_fail@plt+0x12398>
   242d4:	ldrb	r3, [r0, #1]!
   242d8:	cmp	r3, #48	; 0x30
   242dc:	beq	242d4 <__assert_fail@plt+0x1238c>
   242e0:	sub	lr, r3, #48	; 0x30
   242e4:	cmp	lr, #9
   242e8:	movhi	lr, #0
   242ec:	mvnls	lr, #0
   242f0:	b	23fd0 <__assert_fail@plt+0x12088>
   242f4:	cmp	ip, #9
   242f8:	movls	r4, #0
   242fc:	bls	24178 <__assert_fail@plt+0x12230>
   24300:	b	24280 <__assert_fail@plt+0x12338>
   24304:	cmp	ip, #9
   24308:	subls	lr, r2, lr
   2430c:	subls	r4, r2, #48	; 0x30
   24310:	bls	241dc <__assert_fail@plt+0x12294>
   24314:	b	242b0 <__assert_fail@plt+0x12368>
   24318:	adds	lr, r4, #0
   2431c:	movne	lr, #1
   24320:	b	23fd0 <__assert_fail@plt+0x12088>
   24324:	cmp	lr, ip
   24328:	ldrb	lr, [r0, #1]
   2432c:	addne	r0, r0, #1
   24330:	bne	2433c <__assert_fail@plt+0x123f4>
   24334:	b	24350 <__assert_fail@plt+0x12408>
   24338:	ldrb	lr, [r0, #1]!
   2433c:	cmp	lr, #48	; 0x30
   24340:	beq	24338 <__assert_fail@plt+0x123f0>
   24344:	b	240f0 <__assert_fail@plt+0x121a8>
   24348:	cmp	r3, #9
   2434c:	bhi	24280 <__assert_fail@plt+0x12338>
   24350:	ldrb	lr, [r0, #1]!
   24354:	ldrb	ip, [r1, #1]!
   24358:	sub	r3, lr, #48	; 0x30
   2435c:	cmp	lr, ip
   24360:	beq	24348 <__assert_fail@plt+0x12400>
   24364:	cmp	r3, #9
   24368:	sub	r3, ip, #48	; 0x30
   2436c:	bhi	24438 <__assert_fail@plt+0x124f0>
   24370:	cmp	r3, #9
   24374:	bhi	2433c <__assert_fail@plt+0x123f4>
   24378:	sub	lr, lr, ip
   2437c:	b	23fd0 <__assert_fail@plt+0x12088>
   24380:	add	r3, r1, #1
   24384:	ldrb	ip, [r1, #1]
   24388:	b	24390 <__assert_fail@plt+0x12448>
   2438c:	ldrb	ip, [r3, #1]!
   24390:	cmp	ip, #48	; 0x30
   24394:	beq	2438c <__assert_fail@plt+0x12444>
   24398:	sub	lr, ip, #48	; 0x30
   2439c:	cmp	lr, #9
   243a0:	movhi	lr, #0
   243a4:	mvnls	lr, #0
   243a8:	b	23fd0 <__assert_fail@plt+0x12088>
   243ac:	cmp	r4, #9
   243b0:	movls	ip, #0
   243b4:	bls	24204 <__assert_fail@plt+0x122bc>
   243b8:	b	24280 <__assert_fail@plt+0x12338>
   243bc:	adds	lr, ip, #0
   243c0:	movne	lr, #1
   243c4:	rsb	lr, lr, #0
   243c8:	b	23fd0 <__assert_fail@plt+0x12088>
   243cc:	cmp	r4, lr
   243d0:	addne	r1, r1, #1
   243d4:	beq	2440c <__assert_fail@plt+0x124c4>
   243d8:	ldrb	r3, [r1]
   243dc:	cmp	r3, #48	; 0x30
   243e0:	bne	243f0 <__assert_fail@plt+0x124a8>
   243e4:	ldrb	r3, [r1, #1]!
   243e8:	cmp	r3, #48	; 0x30
   243ec:	beq	243e4 <__assert_fail@plt+0x1249c>
   243f0:	sub	lr, r3, #48	; 0x30
   243f4:	cmp	lr, #9
   243f8:	movhi	lr, #0
   243fc:	movls	lr, #1
   24400:	b	23fd0 <__assert_fail@plt+0x12088>
   24404:	cmp	r3, #9
   24408:	bhi	24280 <__assert_fail@plt+0x12338>
   2440c:	ldrb	lr, [r1, #1]!
   24410:	ldrb	ip, [r0, #1]!
   24414:	sub	r3, lr, #48	; 0x30
   24418:	cmp	lr, ip
   2441c:	beq	24404 <__assert_fail@plt+0x124bc>
   24420:	cmp	r3, #9
   24424:	sub	r3, ip, #48	; 0x30
   24428:	bhi	24448 <__assert_fail@plt+0x12500>
   2442c:	cmp	r3, #9
   24430:	bhi	243d8 <__assert_fail@plt+0x12490>
   24434:	b	24378 <__assert_fail@plt+0x12430>
   24438:	cmp	r3, #9
   2443c:	movls	r3, r1
   24440:	bhi	24280 <__assert_fail@plt+0x12338>
   24444:	b	24390 <__assert_fail@plt+0x12448>
   24448:	cmp	r3, #9
   2444c:	bhi	24280 <__assert_fail@plt+0x12338>
   24450:	b	242c8 <__assert_fail@plt+0x12380>
   24454:	cmp	r0, #2
   24458:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2445c:	mov	r4, r0
   24460:	strd	r6, [sp, #8]
   24464:	str	r8, [sp, #16]
   24468:	str	lr, [sp, #20]
   2446c:	bls	24488 <__assert_fail@plt+0x12540>
   24470:	mov	r0, r4
   24474:	ldrd	r4, [sp]
   24478:	ldrd	r6, [sp, #8]
   2447c:	ldr	r8, [sp, #16]
   24480:	add	sp, sp, #20
   24484:	pop	{pc}		; (ldr pc, [sp], #4)
   24488:	bl	26f44 <_obstack_memory_used@@Base+0x6c>
   2448c:	mov	r7, r0
   24490:	bl	11d74 <__errno_location@plt>
   24494:	mov	r5, r0
   24498:	mov	r0, r4
   2449c:	ldr	r6, [r5]
   244a0:	mov	r4, r7
   244a4:	bl	11f30 <close@plt>
   244a8:	str	r6, [r5]
   244ac:	b	24470 <__assert_fail@plt+0x12528>
   244b0:	cmp	r1, #0
   244b4:	strd	r4, [sp, #-16]!
   244b8:	mov	ip, r3
   244bc:	str	r6, [sp, #8]
   244c0:	mov	r4, r0
   244c4:	str	lr, [sp, #12]
   244c8:	sub	sp, sp, #32
   244cc:	ldr	r5, [sp, #48]	; 0x30
   244d0:	ldr	r6, [sp, #52]	; 0x34
   244d4:	beq	24618 <__assert_fail@plt+0x126d0>
   244d8:	mov	r3, r1
   244dc:	mov	r1, #1
   244e0:	stm	sp, {r2, ip}
   244e4:	movw	r2, #39028	; 0x9874
   244e8:	movt	r2, #2
   244ec:	bl	11dd4 <__fprintf_chk@plt>
   244f0:	mov	r2, #5
   244f4:	movw	r1, #39048	; 0x9888
   244f8:	movt	r1, #2
   244fc:	mov	r0, #0
   24500:	bl	11b58 <dcgettext@plt>
   24504:	movw	ip, #2022	; 0x7e6
   24508:	mov	r3, r0
   2450c:	mov	r1, #1
   24510:	movw	r2, #39776	; 0x9b60
   24514:	movt	r2, #2
   24518:	mov	r0, r4
   2451c:	str	ip, [sp]
   24520:	bl	11dd4 <__fprintf_chk@plt>
   24524:	mov	r1, r4
   24528:	mov	r0, #10
   2452c:	bl	11b4c <fputc_unlocked@plt>
   24530:	mov	r2, #5
   24534:	movw	r1, #39052	; 0x988c
   24538:	movt	r1, #2
   2453c:	mov	r0, #0
   24540:	bl	11b58 <dcgettext@plt>
   24544:	mov	r2, r0
   24548:	mov	r1, #1
   2454c:	movw	r3, #39224	; 0x9938
   24550:	movt	r3, #2
   24554:	mov	r0, r4
   24558:	bl	11dd4 <__fprintf_chk@plt>
   2455c:	mov	r1, r4
   24560:	mov	r0, #10
   24564:	bl	11b4c <fputc_unlocked@plt>
   24568:	cmp	r6, #9
   2456c:	ldrls	pc, [pc, r6, lsl #2]
   24570:	b	24884 <__assert_fail@plt+0x1293c>
   24574:	andeq	r4, r2, r4, lsl #12
   24578:	andeq	r4, r2, r4, lsr r6
   2457c:	andeq	r4, r2, r0, ror r6
   24580:			; <UNDEFINED> instruction: 0x000246b0
   24584:	strdeq	r4, [r2], -r8
   24588:	andeq	r4, r2, r0, lsr r7
   2458c:	andeq	r4, r2, r8, ror r7
   24590:	andeq	r4, r2, ip, asr #15
   24594:	andeq	r4, r2, r4, lsr #16
   24598:	muleq	r2, ip, r5
   2459c:	movw	r1, #39528	; 0x9a68
   245a0:	movt	r1, #2
   245a4:	mov	r2, #5
   245a8:	mov	r0, #0
   245ac:	bl	11b58 <dcgettext@plt>
   245b0:	ldr	lr, [r5, #4]
   245b4:	mov	r2, r0
   245b8:	mov	r1, #1
   245bc:	mov	r0, r4
   245c0:	ldr	r3, [r5, #8]
   245c4:	ldr	ip, [r5, #32]
   245c8:	str	lr, [sp]
   245cc:	ldr	lr, [r5, #12]
   245d0:	str	ip, [sp, #28]
   245d4:	ldr	ip, [r5, #28]
   245d8:	str	r3, [sp, #4]
   245dc:	ldr	r3, [r5, #16]
   245e0:	str	lr, [sp, #8]
   245e4:	ldr	lr, [r5, #20]
   245e8:	str	ip, [sp, #24]
   245ec:	ldr	ip, [r5, #24]
   245f0:	str	r3, [sp, #12]
   245f4:	ldr	r3, [r5]
   245f8:	str	lr, [sp, #16]
   245fc:	str	ip, [sp, #20]
   24600:	bl	11dd4 <__fprintf_chk@plt>
   24604:	add	sp, sp, #32
   24608:	ldrd	r4, [sp]
   2460c:	ldr	r6, [sp, #8]
   24610:	add	sp, sp, #12
   24614:	pop	{pc}		; (ldr pc, [sp], #4)
   24618:	mov	r3, r2
   2461c:	mov	r1, #1
   24620:	str	ip, [sp]
   24624:	movw	r2, #39040	; 0x9880
   24628:	movt	r2, #2
   2462c:	bl	11dd4 <__fprintf_chk@plt>
   24630:	b	244f0 <__assert_fail@plt+0x125a8>
   24634:	mov	r2, #5
   24638:	movw	r1, #39260	; 0x995c
   2463c:	movt	r1, #2
   24640:	mov	r0, #0
   24644:	bl	11b58 <dcgettext@plt>
   24648:	ldr	r3, [r5]
   2464c:	mov	r2, r0
   24650:	mov	r1, #1
   24654:	mov	r0, r4
   24658:	add	sp, sp, #32
   2465c:	ldrd	r4, [sp]
   24660:	ldr	r6, [sp, #8]
   24664:	ldr	lr, [sp, #12]
   24668:	add	sp, sp, #16
   2466c:	b	11dd4 <__fprintf_chk@plt>
   24670:	mov	r2, #5
   24674:	movw	r1, #39276	; 0x996c
   24678:	movt	r1, #2
   2467c:	mov	r0, #0
   24680:	bl	11b58 <dcgettext@plt>
   24684:	ldm	r5, {r3, ip}
   24688:	mov	r2, r0
   2468c:	mov	r1, #1
   24690:	mov	r0, r4
   24694:	str	ip, [sp, #48]	; 0x30
   24698:	add	sp, sp, #32
   2469c:	ldrd	r4, [sp]
   246a0:	ldr	r6, [sp, #8]
   246a4:	ldr	lr, [sp, #12]
   246a8:	add	sp, sp, #16
   246ac:	b	11dd4 <__fprintf_chk@plt>
   246b0:	mov	r2, #5
   246b4:	movw	r1, #39300	; 0x9984
   246b8:	movt	r1, #2
   246bc:	mov	r0, #0
   246c0:	bl	11b58 <dcgettext@plt>
   246c4:	ldm	r5, {r3, lr}
   246c8:	mov	r2, r0
   246cc:	mov	r1, #1
   246d0:	mov	r0, r4
   246d4:	ldr	ip, [r5, #8]
   246d8:	str	lr, [sp, #48]	; 0x30
   246dc:	str	ip, [sp, #52]	; 0x34
   246e0:	add	sp, sp, #32
   246e4:	ldrd	r4, [sp]
   246e8:	ldr	r6, [sp, #8]
   246ec:	ldr	lr, [sp, #12]
   246f0:	add	sp, sp, #16
   246f4:	b	11dd4 <__fprintf_chk@plt>
   246f8:	mov	r2, #5
   246fc:	movw	r1, #39328	; 0x99a0
   24700:	movt	r1, #2
   24704:	mov	r0, #0
   24708:	bl	11b58 <dcgettext@plt>
   2470c:	ldmib	r5, {r3, ip, lr}
   24710:	mov	r2, r0
   24714:	mov	r1, #1
   24718:	mov	r0, r4
   2471c:	str	r3, [sp]
   24720:	ldr	r3, [r5]
   24724:	stmib	sp, {ip, lr}
   24728:	bl	11dd4 <__fprintf_chk@plt>
   2472c:	b	24604 <__assert_fail@plt+0x126bc>
   24730:	mov	r2, #5
   24734:	movw	r1, #39360	; 0x99c0
   24738:	movt	r1, #2
   2473c:	mov	r0, #0
   24740:	bl	11b58 <dcgettext@plt>
   24744:	ldmib	r5, {ip, lr}
   24748:	mov	r2, r0
   2474c:	mov	r1, #1
   24750:	mov	r0, r4
   24754:	ldr	r3, [r5, #16]
   24758:	str	ip, [sp]
   2475c:	ldr	ip, [r5, #12]
   24760:	str	r3, [sp, #12]
   24764:	ldr	r3, [r5]
   24768:	str	lr, [sp, #4]
   2476c:	str	ip, [sp, #8]
   24770:	bl	11dd4 <__fprintf_chk@plt>
   24774:	b	24604 <__assert_fail@plt+0x126bc>
   24778:	mov	r2, #5
   2477c:	movw	r1, #39396	; 0x99e4
   24780:	movt	r1, #2
   24784:	mov	r0, #0
   24788:	bl	11b58 <dcgettext@plt>
   2478c:	ldr	lr, [r5, #4]
   24790:	mov	r2, r0
   24794:	mov	r1, #1
   24798:	mov	r0, r4
   2479c:	ldr	r3, [r5, #8]
   247a0:	ldr	ip, [r5, #20]
   247a4:	str	lr, [sp]
   247a8:	ldr	lr, [r5, #12]
   247ac:	str	ip, [sp, #16]
   247b0:	ldr	ip, [r5, #16]
   247b4:	str	r3, [sp, #4]
   247b8:	ldr	r3, [r5]
   247bc:	str	lr, [sp, #8]
   247c0:	str	ip, [sp, #12]
   247c4:	bl	11dd4 <__fprintf_chk@plt>
   247c8:	b	24604 <__assert_fail@plt+0x126bc>
   247cc:	mov	r2, #5
   247d0:	movw	r1, #39436	; 0x9a0c
   247d4:	movt	r1, #2
   247d8:	mov	r0, #0
   247dc:	bl	11b58 <dcgettext@plt>
   247e0:	ldmib	r5, {r3, ip}
   247e4:	mov	r2, r0
   247e8:	mov	r1, #1
   247ec:	mov	r0, r4
   247f0:	ldr	lr, [r5, #24]
   247f4:	str	r3, [sp]
   247f8:	ldr	r3, [r5, #12]
   247fc:	str	lr, [sp, #20]
   24800:	ldr	lr, [r5, #20]
   24804:	str	ip, [sp, #4]
   24808:	ldr	ip, [r5, #16]
   2480c:	str	r3, [sp, #8]
   24810:	ldr	r3, [r5]
   24814:	str	ip, [sp, #12]
   24818:	str	lr, [sp, #16]
   2481c:	bl	11dd4 <__fprintf_chk@plt>
   24820:	b	24604 <__assert_fail@plt+0x126bc>
   24824:	mov	r2, #5
   24828:	movw	r1, #39480	; 0x9a38
   2482c:	movt	r1, #2
   24830:	mov	r0, #0
   24834:	bl	11b58 <dcgettext@plt>
   24838:	ldmib	r5, {ip, lr}
   2483c:	mov	r2, r0
   24840:	mov	r1, #1
   24844:	mov	r0, r4
   24848:	ldr	r3, [r5, #28]
   2484c:	str	ip, [sp]
   24850:	ldr	ip, [r5, #12]
   24854:	str	r3, [sp, #24]
   24858:	ldr	r3, [r5, #24]
   2485c:	str	lr, [sp, #4]
   24860:	ldr	lr, [r5, #16]
   24864:	str	ip, [sp, #8]
   24868:	ldr	ip, [r5, #20]
   2486c:	str	r3, [sp, #20]
   24870:	ldr	r3, [r5]
   24874:	str	lr, [sp, #12]
   24878:	str	ip, [sp, #16]
   2487c:	bl	11dd4 <__fprintf_chk@plt>
   24880:	b	24604 <__assert_fail@plt+0x126bc>
   24884:	movw	r1, #39580	; 0x9a9c
   24888:	movt	r1, #2
   2488c:	b	245a4 <__assert_fail@plt+0x1265c>
   24890:	strd	r4, [sp, #-12]!
   24894:	str	lr, [sp, #8]
   24898:	sub	sp, sp, #12
   2489c:	ldr	r5, [sp, #24]
   248a0:	ldr	ip, [r5]
   248a4:	cmp	ip, #0
   248a8:	beq	248c4 <__assert_fail@plt+0x1297c>
   248ac:	mov	lr, r5
   248b0:	mov	ip, #0
   248b4:	ldr	r4, [lr, #4]!
   248b8:	add	ip, ip, #1
   248bc:	cmp	r4, #0
   248c0:	bne	248b4 <__assert_fail@plt+0x1296c>
   248c4:	stm	sp, {r5, ip}
   248c8:	bl	244b0 <__assert_fail@plt+0x12568>
   248cc:	add	sp, sp, #12
   248d0:	ldrd	r4, [sp]
   248d4:	add	sp, sp, #8
   248d8:	pop	{pc}		; (ldr pc, [sp], #4)
   248dc:	push	{lr}		; (str lr, [sp, #-4]!)
   248e0:	sub	sp, sp, #52	; 0x34
   248e4:	ldr	ip, [sp, #56]	; 0x38
   248e8:	ldr	lr, [ip]
   248ec:	cmp	lr, #0
   248f0:	str	lr, [sp, #8]
   248f4:	beq	2498c <__assert_fail@plt+0x12a44>
   248f8:	ldr	lr, [ip, #4]
   248fc:	cmp	lr, #0
   24900:	str	lr, [sp, #12]
   24904:	beq	249a0 <__assert_fail@plt+0x12a58>
   24908:	ldr	lr, [ip, #8]
   2490c:	cmp	lr, #0
   24910:	str	lr, [sp, #16]
   24914:	beq	249a8 <__assert_fail@plt+0x12a60>
   24918:	ldr	lr, [ip, #12]
   2491c:	cmp	lr, #0
   24920:	str	lr, [sp, #20]
   24924:	beq	249b0 <__assert_fail@plt+0x12a68>
   24928:	ldr	lr, [ip, #16]
   2492c:	cmp	lr, #0
   24930:	str	lr, [sp, #24]
   24934:	beq	249b8 <__assert_fail@plt+0x12a70>
   24938:	ldr	lr, [ip, #20]
   2493c:	cmp	lr, #0
   24940:	str	lr, [sp, #28]
   24944:	beq	249c0 <__assert_fail@plt+0x12a78>
   24948:	ldr	lr, [ip, #24]
   2494c:	cmp	lr, #0
   24950:	str	lr, [sp, #32]
   24954:	beq	249c8 <__assert_fail@plt+0x12a80>
   24958:	ldr	lr, [ip, #28]
   2495c:	cmp	lr, #0
   24960:	str	lr, [sp, #36]	; 0x24
   24964:	beq	249d0 <__assert_fail@plt+0x12a88>
   24968:	ldr	lr, [ip, #32]
   2496c:	cmp	lr, #0
   24970:	str	lr, [sp, #40]	; 0x28
   24974:	beq	249d8 <__assert_fail@plt+0x12a90>
   24978:	ldr	ip, [ip, #36]	; 0x24
   2497c:	cmp	ip, #0
   24980:	str	ip, [sp, #44]	; 0x2c
   24984:	movne	lr, #10
   24988:	moveq	lr, #9
   2498c:	add	ip, sp, #8
   24990:	stm	sp, {ip, lr}
   24994:	bl	244b0 <__assert_fail@plt+0x12568>
   24998:	add	sp, sp, #52	; 0x34
   2499c:	pop	{pc}		; (ldr pc, [sp], #4)
   249a0:	mov	lr, #1
   249a4:	b	2498c <__assert_fail@plt+0x12a44>
   249a8:	mov	lr, #2
   249ac:	b	2498c <__assert_fail@plt+0x12a44>
   249b0:	mov	lr, #3
   249b4:	b	2498c <__assert_fail@plt+0x12a44>
   249b8:	mov	lr, #4
   249bc:	b	2498c <__assert_fail@plt+0x12a44>
   249c0:	mov	lr, #5
   249c4:	b	2498c <__assert_fail@plt+0x12a44>
   249c8:	mov	lr, #6
   249cc:	b	2498c <__assert_fail@plt+0x12a44>
   249d0:	mov	lr, #7
   249d4:	b	2498c <__assert_fail@plt+0x12a44>
   249d8:	mov	lr, #8
   249dc:	b	2498c <__assert_fail@plt+0x12a44>
   249e0:	push	{r3}		; (str r3, [sp, #-4]!)
   249e4:	push	{lr}		; (str lr, [sp, #-4]!)
   249e8:	sub	sp, sp, #56	; 0x38
   249ec:	ldr	ip, [sp, #64]	; 0x40
   249f0:	add	r3, sp, #64	; 0x40
   249f4:	str	r3, [sp, #12]
   249f8:	cmp	ip, #0
   249fc:	str	ip, [sp, #16]
   24a00:	beq	24a98 <__assert_fail@plt+0x12b50>
   24a04:	ldr	ip, [sp, #68]	; 0x44
   24a08:	cmp	ip, #0
   24a0c:	str	ip, [sp, #20]
   24a10:	beq	24abc <__assert_fail@plt+0x12b74>
   24a14:	ldr	ip, [sp, #72]	; 0x48
   24a18:	cmp	ip, #0
   24a1c:	str	ip, [sp, #24]
   24a20:	beq	24ac4 <__assert_fail@plt+0x12b7c>
   24a24:	ldr	ip, [sp, #76]	; 0x4c
   24a28:	cmp	ip, #0
   24a2c:	str	ip, [sp, #28]
   24a30:	beq	24acc <__assert_fail@plt+0x12b84>
   24a34:	ldr	ip, [sp, #80]	; 0x50
   24a38:	cmp	ip, #0
   24a3c:	str	ip, [sp, #32]
   24a40:	beq	24ad4 <__assert_fail@plt+0x12b8c>
   24a44:	ldr	ip, [sp, #84]	; 0x54
   24a48:	cmp	ip, #0
   24a4c:	str	ip, [sp, #36]	; 0x24
   24a50:	beq	24adc <__assert_fail@plt+0x12b94>
   24a54:	ldr	ip, [sp, #88]	; 0x58
   24a58:	cmp	ip, #0
   24a5c:	str	ip, [sp, #40]	; 0x28
   24a60:	beq	24ae4 <__assert_fail@plt+0x12b9c>
   24a64:	ldr	ip, [sp, #92]	; 0x5c
   24a68:	cmp	ip, #0
   24a6c:	str	ip, [sp, #44]	; 0x2c
   24a70:	beq	24aec <__assert_fail@plt+0x12ba4>
   24a74:	ldr	ip, [sp, #96]	; 0x60
   24a78:	cmp	ip, #0
   24a7c:	str	ip, [sp, #48]	; 0x30
   24a80:	beq	24af4 <__assert_fail@plt+0x12bac>
   24a84:	ldr	r3, [sp, #100]	; 0x64
   24a88:	cmp	r3, #0
   24a8c:	str	r3, [sp, #52]	; 0x34
   24a90:	movne	ip, #10
   24a94:	moveq	ip, #9
   24a98:	ldr	r3, [sp, #60]	; 0x3c
   24a9c:	add	lr, sp, #16
   24aa0:	str	lr, [sp]
   24aa4:	str	ip, [sp, #4]
   24aa8:	bl	244b0 <__assert_fail@plt+0x12568>
   24aac:	add	sp, sp, #56	; 0x38
   24ab0:	pop	{lr}		; (ldr lr, [sp], #4)
   24ab4:	add	sp, sp, #4
   24ab8:	bx	lr
   24abc:	mov	ip, #1
   24ac0:	b	24a98 <__assert_fail@plt+0x12b50>
   24ac4:	mov	ip, #2
   24ac8:	b	24a98 <__assert_fail@plt+0x12b50>
   24acc:	mov	ip, #3
   24ad0:	b	24a98 <__assert_fail@plt+0x12b50>
   24ad4:	mov	ip, #4
   24ad8:	b	24a98 <__assert_fail@plt+0x12b50>
   24adc:	mov	ip, #5
   24ae0:	b	24a98 <__assert_fail@plt+0x12b50>
   24ae4:	mov	ip, #6
   24ae8:	b	24a98 <__assert_fail@plt+0x12b50>
   24aec:	mov	ip, #7
   24af0:	b	24a98 <__assert_fail@plt+0x12b50>
   24af4:	mov	ip, #8
   24af8:	b	24a98 <__assert_fail@plt+0x12b50>
   24afc:	movw	r3, #41684	; 0xa2d4
   24b00:	movt	r3, #3
   24b04:	str	r4, [sp, #-8]!
   24b08:	mov	r0, #10
   24b0c:	ldr	r1, [r3]
   24b10:	str	lr, [sp, #4]
   24b14:	bl	11b4c <fputc_unlocked@plt>
   24b18:	mov	r2, #5
   24b1c:	movw	r1, #39640	; 0x9ad8
   24b20:	movt	r1, #2
   24b24:	mov	r0, #0
   24b28:	bl	11b58 <dcgettext@plt>
   24b2c:	mov	r1, r0
   24b30:	movw	r2, #39660	; 0x9aec
   24b34:	movt	r2, #2
   24b38:	mov	r0, #1
   24b3c:	bl	11db0 <__printf_chk@plt>
   24b40:	mov	r2, #5
   24b44:	movw	r1, #39684	; 0x9b04
   24b48:	movt	r1, #2
   24b4c:	mov	r0, #0
   24b50:	bl	11b58 <dcgettext@plt>
   24b54:	mov	r1, r0
   24b58:	movw	r3, #35700	; 0x8b74
   24b5c:	movt	r3, #2
   24b60:	movw	r2, #35740	; 0x8b9c
   24b64:	movt	r2, #2
   24b68:	mov	r0, #1
   24b6c:	bl	11db0 <__printf_chk@plt>
   24b70:	mov	r2, #5
   24b74:	movw	r1, #39704	; 0x9b18
   24b78:	movt	r1, #2
   24b7c:	mov	r0, #0
   24b80:	bl	11b58 <dcgettext@plt>
   24b84:	mov	r1, r0
   24b88:	movw	r2, #39744	; 0x9b40
   24b8c:	movt	r2, #2
   24b90:	mov	r0, #1
   24b94:	ldr	r4, [sp]
   24b98:	ldr	lr, [sp, #4]
   24b9c:	add	sp, sp, #8
   24ba0:	b	11db0 <__printf_chk@plt>
   24ba4:	strd	r4, [sp, #-16]!
   24ba8:	mov	r4, r0
   24bac:	mov	r5, r2
   24bb0:	str	r6, [sp, #8]
   24bb4:	mov	r6, r1
   24bb8:	str	lr, [sp, #12]
   24bbc:	bl	26f0c <_obstack_memory_used@@Base+0x34>
   24bc0:	cmp	r0, #0
   24bc4:	beq	24bd8 <__assert_fail@plt+0x12c90>
   24bc8:	ldrd	r4, [sp]
   24bcc:	ldr	r6, [sp, #8]
   24bd0:	add	sp, sp, #12
   24bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   24bd8:	cmp	r4, #0
   24bdc:	beq	24bec <__assert_fail@plt+0x12ca4>
   24be0:	cmp	r6, #0
   24be4:	cmpne	r5, #0
   24be8:	beq	24bc8 <__assert_fail@plt+0x12c80>
   24bec:	bl	251a8 <__assert_fail@plt+0x13260>
   24bf0:	str	r4, [sp, #-8]!
   24bf4:	str	lr, [sp, #4]
   24bf8:	bl	262d0 <__assert_fail@plt+0x14388>
   24bfc:	cmp	r0, #0
   24c00:	beq	24c10 <__assert_fail@plt+0x12cc8>
   24c04:	ldr	r4, [sp]
   24c08:	add	sp, sp, #4
   24c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   24c10:	bl	251a8 <__assert_fail@plt+0x13260>
   24c14:	str	r4, [sp, #-8]!
   24c18:	str	lr, [sp, #4]
   24c1c:	bl	262d0 <__assert_fail@plt+0x14388>
   24c20:	cmp	r0, #0
   24c24:	beq	24c34 <__assert_fail@plt+0x12cec>
   24c28:	ldr	r4, [sp]
   24c2c:	add	sp, sp, #4
   24c30:	pop	{pc}		; (ldr pc, [sp], #4)
   24c34:	bl	251a8 <__assert_fail@plt+0x13260>
   24c38:	str	r4, [sp, #-8]!
   24c3c:	str	lr, [sp, #4]
   24c40:	bl	262d0 <__assert_fail@plt+0x14388>
   24c44:	cmp	r0, #0
   24c48:	beq	24c58 <__assert_fail@plt+0x12d10>
   24c4c:	ldr	r4, [sp]
   24c50:	add	sp, sp, #4
   24c54:	pop	{pc}		; (ldr pc, [sp], #4)
   24c58:	bl	251a8 <__assert_fail@plt+0x13260>
   24c5c:	strd	r4, [sp, #-16]!
   24c60:	mov	r5, r0
   24c64:	mov	r4, r1
   24c68:	str	r6, [sp, #8]
   24c6c:	str	lr, [sp, #12]
   24c70:	bl	2630c <__assert_fail@plt+0x143c4>
   24c74:	cmp	r0, #0
   24c78:	beq	24c8c <__assert_fail@plt+0x12d44>
   24c7c:	ldrd	r4, [sp]
   24c80:	ldr	r6, [sp, #8]
   24c84:	add	sp, sp, #12
   24c88:	pop	{pc}		; (ldr pc, [sp], #4)
   24c8c:	adds	r4, r4, #0
   24c90:	movne	r4, #1
   24c94:	cmp	r5, #0
   24c98:	moveq	r4, #1
   24c9c:	cmp	r4, #0
   24ca0:	beq	24c7c <__assert_fail@plt+0x12d34>
   24ca4:	bl	251a8 <__assert_fail@plt+0x13260>
   24ca8:	cmp	r1, #0
   24cac:	orreq	r1, r1, #1
   24cb0:	str	r4, [sp, #-8]!
   24cb4:	str	lr, [sp, #4]
   24cb8:	bl	2630c <__assert_fail@plt+0x143c4>
   24cbc:	cmp	r0, #0
   24cc0:	beq	24cd0 <__assert_fail@plt+0x12d88>
   24cc4:	ldr	r4, [sp]
   24cc8:	add	sp, sp, #4
   24ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   24cd0:	bl	251a8 <__assert_fail@plt+0x13260>
   24cd4:	strd	r4, [sp, #-16]!
   24cd8:	mov	r4, r0
   24cdc:	mov	r5, r2
   24ce0:	str	r6, [sp, #8]
   24ce4:	mov	r6, r1
   24ce8:	str	lr, [sp, #12]
   24cec:	bl	26f0c <_obstack_memory_used@@Base+0x34>
   24cf0:	cmp	r0, #0
   24cf4:	beq	24d08 <__assert_fail@plt+0x12dc0>
   24cf8:	ldrd	r4, [sp]
   24cfc:	ldr	r6, [sp, #8]
   24d00:	add	sp, sp, #12
   24d04:	pop	{pc}		; (ldr pc, [sp], #4)
   24d08:	cmp	r4, #0
   24d0c:	beq	24d1c <__assert_fail@plt+0x12dd4>
   24d10:	cmp	r6, #0
   24d14:	cmpne	r5, #0
   24d18:	beq	24cf8 <__assert_fail@plt+0x12db0>
   24d1c:	bl	251a8 <__assert_fail@plt+0x13260>
   24d20:	cmp	r2, #0
   24d24:	cmpne	r1, #0
   24d28:	str	r4, [sp, #-8]!
   24d2c:	moveq	r2, #1
   24d30:	str	lr, [sp, #4]
   24d34:	moveq	r1, r2
   24d38:	bl	26f0c <_obstack_memory_used@@Base+0x34>
   24d3c:	cmp	r0, #0
   24d40:	beq	24d50 <__assert_fail@plt+0x12e08>
   24d44:	ldr	r4, [sp]
   24d48:	add	sp, sp, #4
   24d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   24d50:	bl	251a8 <__assert_fail@plt+0x13260>
   24d54:	mov	r2, r1
   24d58:	mov	r1, r0
   24d5c:	str	r4, [sp, #-8]!
   24d60:	mov	r0, #0
   24d64:	str	lr, [sp, #4]
   24d68:	bl	26f0c <_obstack_memory_used@@Base+0x34>
   24d6c:	cmp	r0, #0
   24d70:	beq	24d80 <__assert_fail@plt+0x12e38>
   24d74:	ldr	r4, [sp]
   24d78:	add	sp, sp, #4
   24d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   24d80:	bl	251a8 <__assert_fail@plt+0x13260>
   24d84:	cmp	r1, #0
   24d88:	cmpne	r0, #0
   24d8c:	str	r4, [sp, #-8]!
   24d90:	moveq	r2, #1
   24d94:	movne	r2, r1
   24d98:	str	lr, [sp, #4]
   24d9c:	movne	r1, r0
   24da0:	moveq	r1, r2
   24da4:	mov	r0, #0
   24da8:	bl	26f0c <_obstack_memory_used@@Base+0x34>
   24dac:	cmp	r0, #0
   24db0:	beq	24dc0 <__assert_fail@plt+0x12e78>
   24db4:	ldr	r4, [sp]
   24db8:	add	sp, sp, #4
   24dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   24dc0:	bl	251a8 <__assert_fail@plt+0x13260>
   24dc4:	cmp	r0, #0
   24dc8:	strd	r4, [sp, #-16]!
   24dcc:	mov	r5, r1
   24dd0:	ldr	r4, [r1]
   24dd4:	str	r6, [sp, #8]
   24dd8:	str	lr, [sp, #12]
   24ddc:	beq	24e24 <__assert_fail@plt+0x12edc>
   24de0:	lsr	r3, r4, #1
   24de4:	add	r3, r3, #1
   24de8:	adds	r4, r4, r3
   24dec:	bcs	24e20 <__assert_fail@plt+0x12ed8>
   24df0:	mov	r2, #1
   24df4:	mov	r1, r4
   24df8:	bl	26f0c <_obstack_memory_used@@Base+0x34>
   24dfc:	cmp	r0, #0
   24e00:	beq	24e18 <__assert_fail@plt+0x12ed0>
   24e04:	ldr	r6, [sp, #8]
   24e08:	str	r4, [r5]
   24e0c:	ldrd	r4, [sp]
   24e10:	add	sp, sp, #12
   24e14:	pop	{pc}		; (ldr pc, [sp], #4)
   24e18:	cmp	r4, #0
   24e1c:	beq	24e04 <__assert_fail@plt+0x12ebc>
   24e20:	bl	251a8 <__assert_fail@plt+0x13260>
   24e24:	cmp	r4, #0
   24e28:	mov	r2, #1
   24e2c:	moveq	r4, #64	; 0x40
   24e30:	mov	r1, r4
   24e34:	bl	26f0c <_obstack_memory_used@@Base+0x34>
   24e38:	cmp	r0, #0
   24e3c:	bne	24e04 <__assert_fail@plt+0x12ebc>
   24e40:	b	24e20 <__assert_fail@plt+0x12ed8>
   24e44:	cmp	r0, #0
   24e48:	strd	r4, [sp, #-16]!
   24e4c:	mov	r5, r1
   24e50:	ldr	r4, [r1]
   24e54:	str	r6, [sp, #8]
   24e58:	mov	r6, r2
   24e5c:	str	lr, [sp, #12]
   24e60:	beq	24ea8 <__assert_fail@plt+0x12f60>
   24e64:	lsr	r3, r4, #1
   24e68:	add	r3, r3, #1
   24e6c:	adds	r4, r4, r3
   24e70:	bcs	24ea4 <__assert_fail@plt+0x12f5c>
   24e74:	mov	r1, r4
   24e78:	bl	26f0c <_obstack_memory_used@@Base+0x34>
   24e7c:	cmp	r0, #0
   24e80:	beq	24e98 <__assert_fail@plt+0x12f50>
   24e84:	ldr	r6, [sp, #8]
   24e88:	str	r4, [r5]
   24e8c:	ldrd	r4, [sp]
   24e90:	add	sp, sp, #12
   24e94:	pop	{pc}		; (ldr pc, [sp], #4)
   24e98:	cmp	r4, #0
   24e9c:	cmpne	r6, #0
   24ea0:	beq	24e84 <__assert_fail@plt+0x12f3c>
   24ea4:	bl	251a8 <__assert_fail@plt+0x13260>
   24ea8:	cmp	r4, #0
   24eac:	bne	24ec0 <__assert_fail@plt+0x12f78>
   24eb0:	mov	r4, #64	; 0x40
   24eb4:	udiv	r4, r4, r2
   24eb8:	cmp	r2, #64	; 0x40
   24ebc:	addhi	r4, r4, #1
   24ec0:	mov	r2, r6
   24ec4:	mov	r1, r4
   24ec8:	mov	r0, #0
   24ecc:	bl	26f0c <_obstack_memory_used@@Base+0x34>
   24ed0:	cmp	r0, #0
   24ed4:	bne	24e84 <__assert_fail@plt+0x12f3c>
   24ed8:	b	24ea4 <__assert_fail@plt+0x12f5c>
   24edc:	ldr	ip, [r1]
   24ee0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24ee4:	strd	r6, [sp, #8]
   24ee8:	mov	r7, r1
   24eec:	mov	r6, r0
   24ef0:	str	r8, [sp, #16]
   24ef4:	mvn	r8, r3
   24ef8:	lsr	r8, r8, #31
   24efc:	str	lr, [sp, #20]
   24f00:	asr	r1, ip, #1
   24f04:	ldr	lr, [sp, #24]
   24f08:	adds	r4, ip, r1
   24f0c:	mvnvs	r4, #-2147483648	; 0x80000000
   24f10:	cmp	r3, r4
   24f14:	movge	r1, #0
   24f18:	andlt	r1, r8, #1
   24f1c:	cmp	r1, #0
   24f20:	movne	r4, r3
   24f24:	smull	r0, r1, r4, lr
   24f28:	cmp	r1, r0, asr #31
   24f2c:	bne	24fdc <__assert_fail@plt+0x13094>
   24f30:	cmp	r0, #63	; 0x3f
   24f34:	mov	r5, r0
   24f38:	ble	24fa8 <__assert_fail@plt+0x13060>
   24f3c:	cmp	r6, #0
   24f40:	sub	r1, r4, ip
   24f44:	streq	r6, [r7]
   24f48:	cmp	r1, r2
   24f4c:	bge	24f7c <__assert_fail@plt+0x13034>
   24f50:	adds	r4, ip, r2
   24f54:	bvs	24fd8 <__assert_fail@plt+0x13090>
   24f58:	cmp	r4, r3
   24f5c:	movle	r3, #0
   24f60:	andgt	r3, r8, #1
   24f64:	cmp	r3, #0
   24f68:	bne	24fd8 <__assert_fail@plt+0x13090>
   24f6c:	smull	r0, r1, r4, lr
   24f70:	cmp	r1, r0, asr #31
   24f74:	mov	r5, r0
   24f78:	bne	24fd8 <__assert_fail@plt+0x13090>
   24f7c:	mov	r1, r5
   24f80:	mov	r0, r6
   24f84:	bl	2630c <__assert_fail@plt+0x143c4>
   24f88:	cmp	r0, #0
   24f8c:	beq	24fbc <__assert_fail@plt+0x13074>
   24f90:	ldr	r8, [sp, #16]
   24f94:	str	r4, [r7]
   24f98:	ldrd	r4, [sp]
   24f9c:	ldrd	r6, [sp, #8]
   24fa0:	add	sp, sp, #20
   24fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   24fa8:	mov	r0, #64	; 0x40
   24fac:	sdiv	r4, r0, lr
   24fb0:	mls	r5, lr, r4, r0
   24fb4:	sub	r5, r0, r5
   24fb8:	b	24f3c <__assert_fail@plt+0x12ff4>
   24fbc:	adds	r5, r5, #0
   24fc0:	movne	r5, #1
   24fc4:	cmp	r6, #0
   24fc8:	movne	r6, r5
   24fcc:	moveq	r6, #1
   24fd0:	cmp	r6, #0
   24fd4:	beq	24f90 <__assert_fail@plt+0x13048>
   24fd8:	bl	251a8 <__assert_fail@plt+0x13260>
   24fdc:	mvn	r0, #-2147483648	; 0x80000000
   24fe0:	b	24fac <__assert_fail@plt+0x13064>
   24fe4:	mov	r1, #1
   24fe8:	str	r4, [sp, #-8]!
   24fec:	str	lr, [sp, #4]
   24ff0:	bl	2625c <__assert_fail@plt+0x14314>
   24ff4:	cmp	r0, #0
   24ff8:	beq	25008 <__assert_fail@plt+0x130c0>
   24ffc:	ldr	r4, [sp]
   25000:	add	sp, sp, #4
   25004:	pop	{pc}		; (ldr pc, [sp], #4)
   25008:	bl	251a8 <__assert_fail@plt+0x13260>
   2500c:	mov	r1, #1
   25010:	str	r4, [sp, #-8]!
   25014:	str	lr, [sp, #4]
   25018:	bl	2625c <__assert_fail@plt+0x14314>
   2501c:	cmp	r0, #0
   25020:	beq	25030 <__assert_fail@plt+0x130e8>
   25024:	ldr	r4, [sp]
   25028:	add	sp, sp, #4
   2502c:	pop	{pc}		; (ldr pc, [sp], #4)
   25030:	bl	251a8 <__assert_fail@plt+0x13260>
   25034:	str	r4, [sp, #-8]!
   25038:	str	lr, [sp, #4]
   2503c:	bl	2625c <__assert_fail@plt+0x14314>
   25040:	cmp	r0, #0
   25044:	beq	25054 <__assert_fail@plt+0x1310c>
   25048:	ldr	r4, [sp]
   2504c:	add	sp, sp, #4
   25050:	pop	{pc}		; (ldr pc, [sp], #4)
   25054:	bl	251a8 <__assert_fail@plt+0x13260>
   25058:	str	r4, [sp, #-8]!
   2505c:	str	lr, [sp, #4]
   25060:	bl	2625c <__assert_fail@plt+0x14314>
   25064:	cmp	r0, #0
   25068:	beq	25078 <__assert_fail@plt+0x13130>
   2506c:	ldr	r4, [sp]
   25070:	add	sp, sp, #4
   25074:	pop	{pc}		; (ldr pc, [sp], #4)
   25078:	bl	251a8 <__assert_fail@plt+0x13260>
   2507c:	strd	r4, [sp, #-16]!
   25080:	mov	r4, r1
   25084:	str	r6, [sp, #8]
   25088:	mov	r6, r0
   2508c:	mov	r0, r1
   25090:	str	lr, [sp, #12]
   25094:	bl	262d0 <__assert_fail@plt+0x14388>
   25098:	subs	r5, r0, #0
   2509c:	beq	250c0 <__assert_fail@plt+0x13178>
   250a0:	mov	r2, r4
   250a4:	mov	r1, r6
   250a8:	bl	11ac8 <memcpy@plt>
   250ac:	mov	r0, r5
   250b0:	ldrd	r4, [sp]
   250b4:	ldr	r6, [sp, #8]
   250b8:	add	sp, sp, #12
   250bc:	pop	{pc}		; (ldr pc, [sp], #4)
   250c0:	bl	251a8 <__assert_fail@plt+0x13260>
   250c4:	strd	r4, [sp, #-16]!
   250c8:	mov	r4, r1
   250cc:	str	r6, [sp, #8]
   250d0:	mov	r6, r0
   250d4:	mov	r0, r1
   250d8:	str	lr, [sp, #12]
   250dc:	bl	262d0 <__assert_fail@plt+0x14388>
   250e0:	subs	r5, r0, #0
   250e4:	beq	25108 <__assert_fail@plt+0x131c0>
   250e8:	mov	r2, r4
   250ec:	mov	r1, r6
   250f0:	bl	11ac8 <memcpy@plt>
   250f4:	mov	r0, r5
   250f8:	ldrd	r4, [sp]
   250fc:	ldr	r6, [sp, #8]
   25100:	add	sp, sp, #12
   25104:	pop	{pc}		; (ldr pc, [sp], #4)
   25108:	bl	251a8 <__assert_fail@plt+0x13260>
   2510c:	strd	r4, [sp, #-16]!
   25110:	mov	r4, r1
   25114:	str	r6, [sp, #8]
   25118:	mov	r6, r0
   2511c:	add	r0, r1, #1
   25120:	str	lr, [sp, #12]
   25124:	bl	262d0 <__assert_fail@plt+0x14388>
   25128:	subs	r5, r0, #0
   2512c:	beq	25158 <__assert_fail@plt+0x13210>
   25130:	mov	r3, #0
   25134:	mov	r1, r6
   25138:	mov	r2, r4
   2513c:	strb	r3, [r5, r4]
   25140:	bl	11ac8 <memcpy@plt>
   25144:	mov	r0, r5
   25148:	ldrd	r4, [sp]
   2514c:	ldr	r6, [sp, #8]
   25150:	add	sp, sp, #12
   25154:	pop	{pc}		; (ldr pc, [sp], #4)
   25158:	bl	251a8 <__assert_fail@plt+0x13260>
   2515c:	strd	r4, [sp, #-16]!
   25160:	str	r6, [sp, #8]
   25164:	mov	r6, r0
   25168:	str	lr, [sp, #12]
   2516c:	bl	11d50 <strlen@plt>
   25170:	add	r4, r0, #1
   25174:	mov	r0, r4
   25178:	bl	262d0 <__assert_fail@plt+0x14388>
   2517c:	subs	r5, r0, #0
   25180:	beq	251a4 <__assert_fail@plt+0x1325c>
   25184:	mov	r2, r4
   25188:	mov	r1, r6
   2518c:	bl	11ac8 <memcpy@plt>
   25190:	mov	r0, r5
   25194:	ldrd	r4, [sp]
   25198:	ldr	r6, [sp, #8]
   2519c:	add	sp, sp, #12
   251a0:	pop	{pc}		; (ldr pc, [sp], #4)
   251a4:	bl	251a8 <__assert_fail@plt+0x13260>
   251a8:	movw	r3, #41584	; 0xa270
   251ac:	movt	r3, #3
   251b0:	str	r4, [sp, #-8]!
   251b4:	ldr	r4, [r3]
   251b8:	mov	r2, #5
   251bc:	movw	r1, #39824	; 0x9b90
   251c0:	movt	r1, #2
   251c4:	mov	r0, #0
   251c8:	str	lr, [sp, #4]
   251cc:	bl	11b58 <dcgettext@plt>
   251d0:	mov	r3, r0
   251d4:	movw	r2, #31468	; 0x7aec
   251d8:	movt	r2, #2
   251dc:	mov	r1, #0
   251e0:	mov	r0, r4
   251e4:	bl	11c90 <error@plt>
   251e8:	bl	11f24 <abort@plt>
   251ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   251f0:	mov	r4, r0
   251f4:	mov	r0, #0
   251f8:	strd	r6, [sp, #8]
   251fc:	mov	r6, r1
   25200:	movw	r1, #39844	; 0x9ba4
   25204:	movt	r1, #2
   25208:	strd	r8, [sp, #16]
   2520c:	mov	r9, r2
   25210:	mov	r2, #5
   25214:	mov	r7, r3
   25218:	str	sl, [sp, #24]
   2521c:	str	lr, [sp, #28]
   25220:	ldr	r8, [sp, #32]
   25224:	bl	11b58 <dcgettext@plt>
   25228:	mov	r2, r0
   2522c:	mov	r1, r4
   25230:	mov	r0, #0
   25234:	bl	11c90 <error@plt>
   25238:	mov	r2, #5
   2523c:	movw	r1, #39872	; 0x9bc0
   25240:	movt	r1, #2
   25244:	mov	r0, #0
   25248:	bl	11b58 <dcgettext@plt>
   2524c:	mov	r1, #0
   25250:	mov	r2, r0
   25254:	mov	r0, r1
   25258:	bl	11c90 <error@plt>
   2525c:	mov	r2, #5
   25260:	movw	r3, #41584	; 0xa270
   25264:	movt	r3, #3
   25268:	movw	r1, #39916	; 0x9bec
   2526c:	movt	r1, #2
   25270:	mov	r0, #0
   25274:	ldr	r4, [r3]
   25278:	bl	11b58 <dcgettext@plt>
   2527c:	mov	r5, r0
   25280:	mov	r3, r9
   25284:	mov	r2, r6
   25288:	mov	r1, #8
   2528c:	mov	r0, #0
   25290:	bl	21d60 <__assert_fail@plt+0xfe18>
   25294:	mov	r6, r0
   25298:	mov	r3, r8
   2529c:	mov	r2, r7
   252a0:	mov	r1, #8
   252a4:	mov	r0, #1
   252a8:	bl	21d60 <__assert_fail@plt+0xfe18>
   252ac:	mov	r3, r6
   252b0:	mov	r2, r5
   252b4:	str	r0, [sp, #32]
   252b8:	mov	r1, #0
   252bc:	mov	r0, r4
   252c0:	ldrd	r4, [sp]
   252c4:	ldrd	r6, [sp, #8]
   252c8:	ldrd	r8, [sp, #16]
   252cc:	ldr	sl, [sp, #24]
   252d0:	ldr	lr, [sp, #28]
   252d4:	add	sp, sp, #32
   252d8:	b	11c90 <error@plt>
   252dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   252e0:	mov	r5, r0
   252e4:	strd	r6, [sp, #8]
   252e8:	mov	r7, r1
   252ec:	mov	r6, r3
   252f0:	str	r8, [sp, #16]
   252f4:	mov	r8, r2
   252f8:	str	lr, [sp, #20]
   252fc:	sub	sp, sp, #8
   25300:	bl	26880 <__assert_fail@plt+0x14938>
   25304:	mov	r4, r0
   25308:	bl	11d74 <__errno_location@plt>
   2530c:	ldr	r0, [r0]
   25310:	cmp	r0, #0
   25314:	bne	25334 <__assert_fail@plt+0x133ec>
   25318:	mov	r0, r4
   2531c:	add	sp, sp, #8
   25320:	ldrd	r4, [sp]
   25324:	ldrd	r6, [sp, #8]
   25328:	ldr	r8, [sp, #16]
   2532c:	add	sp, sp, #20
   25330:	pop	{pc}		; (ldr pc, [sp], #4)
   25334:	mov	r3, r8
   25338:	mov	r2, r7
   2533c:	str	r6, [sp]
   25340:	mov	r1, r5
   25344:	bl	251ec <__assert_fail@plt+0x132a4>
   25348:	b	25318 <__assert_fail@plt+0x133d0>
   2534c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25350:	mov	r5, r3
   25354:	strd	r6, [sp, #8]
   25358:	mov	r7, r1
   2535c:	mov	r6, r0
   25360:	str	r8, [sp, #16]
   25364:	mov	r8, r2
   25368:	str	lr, [sp, #20]
   2536c:	sub	sp, sp, #8
   25370:	bl	269a4 <__assert_fail@plt+0x14a5c>
   25374:	mov	r4, r0
   25378:	bl	11d74 <__errno_location@plt>
   2537c:	ldr	r0, [r0]
   25380:	cmp	r0, #0
   25384:	bne	253a4 <__assert_fail@plt+0x1345c>
   25388:	mov	r0, r4
   2538c:	add	sp, sp, #8
   25390:	ldrd	r4, [sp]
   25394:	ldrd	r6, [sp, #8]
   25398:	ldr	r8, [sp, #16]
   2539c:	add	sp, sp, #20
   253a0:	pop	{pc}		; (ldr pc, [sp], #4)
   253a4:	sub	r5, r5, #1
   253a8:	mov	r3, r8
   253ac:	sub	r2, r7, #1
   253b0:	mov	r1, r6
   253b4:	str	r5, [sp]
   253b8:	bl	251ec <__assert_fail@plt+0x132a4>
   253bc:	b	25388 <__assert_fail@plt+0x13440>
   253c0:	strd	r4, [sp, #-12]!
   253c4:	str	lr, [sp, #8]
   253c8:	vpush	{d8}
   253cc:	sub	sp, sp, #12
   253d0:	vmov.f64	d8, d0
   253d4:	bl	11d74 <__errno_location@plt>
   253d8:	vldr	d7, [pc, #136]	; 25468 <__assert_fail@plt+0x13520>
   253dc:	mov	r4, r0
   253e0:	vcmpe.f64	d8, d7
   253e4:	vmrs	APSR_nzcv, fpscr
   253e8:	bge	25438 <__assert_fail@plt+0x134f0>
   253ec:	vmov.f64	d0, d8
   253f0:	mov	r0, sp
   253f4:	mov	r5, #0
   253f8:	bl	263f0 <__assert_fail@plt+0x144a8>
   253fc:	b	2540c <__assert_fail@plt+0x134c4>
   25400:	ldr	r3, [r4]
   25404:	bics	r3, r3, #4
   25408:	bne	2545c <__assert_fail@plt+0x13514>
   2540c:	mov	r1, sp
   25410:	mov	r0, sp
   25414:	str	r5, [r4]
   25418:	bl	11aa4 <nanosleep@plt>
   2541c:	cmp	r0, #0
   25420:	bne	25400 <__assert_fail@plt+0x134b8>
   25424:	add	sp, sp, #12
   25428:	vpop	{d8}
   2542c:	ldrd	r4, [sp]
   25430:	add	sp, sp, #8
   25434:	pop	{pc}		; (ldr pc, [sp], #4)
   25438:	bl	11a50 <pause@plt>
   2543c:	ldr	r3, [r4]
   25440:	cmp	r3, #4
   25444:	bne	253ec <__assert_fail@plt+0x134a4>
   25448:	bl	11a50 <pause@plt>
   2544c:	ldr	r3, [r4]
   25450:	cmp	r3, #4
   25454:	beq	25438 <__assert_fail@plt+0x134f0>
   25458:	b	253ec <__assert_fail@plt+0x134a4>
   2545c:	mvn	r0, #0
   25460:	b	25424 <__assert_fail@plt+0x134dc>
   25464:	nop	{0}
   25468:	andeq	r0, r0, r0
   2546c:	mvnmi	r0, r0
   25470:	sub	r0, r0, #1
   25474:	movw	ip, #41584	; 0xa270
   25478:	movt	ip, #3
   2547c:	cmp	r0, #3
   25480:	push	{lr}		; (str lr, [sp, #-4]!)
   25484:	sub	sp, sp, #20
   25488:	ldr	r5, [ip]
   2548c:	bhi	254dc <__assert_fail@plt+0x13594>
   25490:	movw	ip, #39956	; 0x9c14
   25494:	movt	ip, #2
   25498:	cmp	r1, #0
   2549c:	ldr	r0, [ip, r0, lsl #2]
   254a0:	blt	254e0 <__assert_fail@plt+0x13598>
   254a4:	ldr	r6, [r3, r1, lsl #4]
   254a8:	movw	r4, #39972	; 0x9c24
   254ac:	movt	r4, #2
   254b0:	mov	r1, r0
   254b4:	mov	r2, #5
   254b8:	mov	r0, #0
   254bc:	bl	11b58 <dcgettext@plt>
   254c0:	ldr	ip, [sp, #24]
   254c4:	mov	r2, r0
   254c8:	mov	r3, r4
   254cc:	mov	r0, r5
   254d0:	mov	r1, #0
   254d4:	stm	sp, {r6, ip}
   254d8:	bl	11c90 <error@plt>
   254dc:	bl	11f24 <abort@plt>
   254e0:	mov	r3, #0
   254e4:	movw	r4, #39972	; 0x9c24
   254e8:	movt	r4, #2
   254ec:	add	r6, sp, #12
   254f0:	strb	r2, [sp, #12]
   254f4:	sub	r4, r4, r1
   254f8:	strb	r3, [sp, #13]
   254fc:	b	254b0 <__assert_fail@plt+0x13568>
   25500:	cmp	r2, #36	; 0x24
   25504:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25508:	strd	r6, [sp, #8]
   2550c:	strd	r8, [sp, #16]
   25510:	strd	sl, [sp, #24]
   25514:	str	lr, [sp, #32]
   25518:	sub	sp, sp, #36	; 0x24
   2551c:	bhi	26194 <__assert_fail@plt+0x1424c>
   25520:	cmp	r1, #0
   25524:	mov	r6, r2
   25528:	mov	r5, r1
   2552c:	mov	sl, r0
   25530:	addeq	r5, sp, #28
   25534:	mov	r9, r3
   25538:	bl	11d74 <__errno_location@plt>
   2553c:	mov	r3, #0
   25540:	mov	fp, r0
   25544:	str	r3, [r0]
   25548:	ldrb	r4, [sl]
   2554c:	bl	11d2c <__ctype_b_loc@plt>
   25550:	ldr	r2, [r0]
   25554:	lsl	r3, r4, #1
   25558:	ldrh	r3, [r2, r3]
   2555c:	tst	r3, #8192	; 0x2000
   25560:	beq	2557c <__assert_fail@plt+0x13634>
   25564:	mov	r3, sl
   25568:	ldrb	r4, [r3, #1]!
   2556c:	lsl	r1, r4, #1
   25570:	ldrh	r1, [r2, r1]
   25574:	tst	r1, #8192	; 0x2000
   25578:	bne	25568 <__assert_fail@plt+0x13620>
   2557c:	cmp	r4, #45	; 0x2d
   25580:	beq	2561c <__assert_fail@plt+0x136d4>
   25584:	mov	r2, r6
   25588:	mov	r3, #0
   2558c:	mov	r1, r5
   25590:	mov	r0, sl
   25594:	bl	11aec <__strtoull_internal@plt>
   25598:	ldr	r8, [r5]
   2559c:	mov	r6, r0
   255a0:	mov	r7, r1
   255a4:	cmp	r8, sl
   255a8:	beq	25604 <__assert_fail@plt+0x136bc>
   255ac:	ldr	r4, [fp]
   255b0:	cmp	r4, #0
   255b4:	bne	255f4 <__assert_fail@plt+0x136ac>
   255b8:	ldr	r3, [sp, #72]	; 0x48
   255bc:	cmp	r3, #0
   255c0:	beq	255d0 <__assert_fail@plt+0x13688>
   255c4:	ldrb	sl, [r8]
   255c8:	cmp	sl, #0
   255cc:	bne	25988 <__assert_fail@plt+0x13a40>
   255d0:	strd	r6, [r9]
   255d4:	mov	r0, r4
   255d8:	add	sp, sp, #36	; 0x24
   255dc:	ldrd	r4, [sp]
   255e0:	ldrd	r6, [sp, #8]
   255e4:	ldrd	r8, [sp, #16]
   255e8:	ldrd	sl, [sp, #24]
   255ec:	add	sp, sp, #32
   255f0:	pop	{pc}		; (ldr pc, [sp], #4)
   255f4:	cmp	r4, #34	; 0x22
   255f8:	bne	2561c <__assert_fail@plt+0x136d4>
   255fc:	mov	r4, #1
   25600:	b	255b8 <__assert_fail@plt+0x13670>
   25604:	ldr	r3, [sp, #72]	; 0x48
   25608:	cmp	r3, #0
   2560c:	beq	2561c <__assert_fail@plt+0x136d4>
   25610:	ldrb	sl, [sl]
   25614:	cmp	sl, #0
   25618:	bne	25624 <__assert_fail@plt+0x136dc>
   2561c:	mov	r4, #4
   25620:	b	255d4 <__assert_fail@plt+0x1368c>
   25624:	mov	r1, sl
   25628:	mov	r0, r3
   2562c:	bl	11d5c <strchr@plt>
   25630:	cmp	r0, #0
   25634:	movne	r4, #0
   25638:	movne	r6, #1
   2563c:	movne	r7, r4
   25640:	beq	2561c <__assert_fail@plt+0x136d4>
   25644:	sub	r3, sl, #69	; 0x45
   25648:	cmp	r3, #47	; 0x2f
   2564c:	ldrls	pc, [pc, r3, lsl #2]
   25650:	b	25758 <__assert_fail@plt+0x13810>
   25654:	andeq	r5, r2, r4, lsl r7
   25658:	andeq	r5, r2, r8, asr r7
   2565c:	andeq	r5, r2, r4, lsl r7
   25660:	andeq	r5, r2, r8, asr r7
   25664:	andeq	r5, r2, r8, asr r7
   25668:	andeq	r5, r2, r8, asr r7
   2566c:	andeq	r5, r2, r4, lsl r7
   25670:	andeq	r5, r2, r8, asr r7
   25674:	andeq	r5, r2, r4, lsl r7
   25678:	andeq	r5, r2, r8, asr r7
   2567c:	andeq	r5, r2, r8, asr r7
   25680:	andeq	r5, r2, r4, lsl r7
   25684:	andeq	r5, r2, r8, asr r7
   25688:	andeq	r5, r2, r8, asr r7
   2568c:	andeq	r5, r2, r8, asr r7
   25690:	andeq	r5, r2, r4, lsl r7
   25694:	andeq	r5, r2, r8, asr r7
   25698:	andeq	r5, r2, r8, asr r7
   2569c:	andeq	r5, r2, r8, asr r7
   256a0:	andeq	r5, r2, r8, asr r7
   256a4:	andeq	r5, r2, r4, lsl r7
   256a8:	andeq	r5, r2, r4, lsl r7
   256ac:	andeq	r5, r2, r8, asr r7
   256b0:	andeq	r5, r2, r8, asr r7
   256b4:	andeq	r5, r2, r8, asr r7
   256b8:	andeq	r5, r2, r8, asr r7
   256bc:	andeq	r5, r2, r8, asr r7
   256c0:	andeq	r5, r2, r8, asr r7
   256c4:	andeq	r5, r2, r8, asr r7
   256c8:	andeq	r5, r2, r8, asr r7
   256cc:	andeq	r5, r2, r8, asr r7
   256d0:	andeq	r5, r2, r8, asr r7
   256d4:	andeq	r5, r2, r8, asr r7
   256d8:	andeq	r5, r2, r8, asr r7
   256dc:	andeq	r5, r2, r4, lsl r7
   256e0:	andeq	r5, r2, r8, asr r7
   256e4:	andeq	r5, r2, r8, asr r7
   256e8:	andeq	r5, r2, r8, asr r7
   256ec:	andeq	r5, r2, r4, lsl r7
   256f0:	andeq	r5, r2, r8, asr r7
   256f4:	andeq	r5, r2, r4, lsl r7
   256f8:	andeq	r5, r2, r8, asr r7
   256fc:	andeq	r5, r2, r8, asr r7
   25700:	andeq	r5, r2, r8, asr r7
   25704:	andeq	r5, r2, r8, asr r7
   25708:	andeq	r5, r2, r8, asr r7
   2570c:	andeq	r5, r2, r8, asr r7
   25710:	andeq	r5, r2, r4, lsl r7
   25714:	mov	r1, #48	; 0x30
   25718:	ldr	r0, [sp, #72]	; 0x48
   2571c:	bl	11d5c <strchr@plt>
   25720:	cmp	r0, #0
   25724:	beq	25758 <__assert_fail@plt+0x13810>
   25728:	ldrb	r3, [r8, #1]
   2572c:	cmp	r3, #68	; 0x44
   25730:	beq	25ce8 <__assert_fail@plt+0x13da0>
   25734:	cmp	r3, #105	; 0x69
   25738:	beq	259a0 <__assert_fail@plt+0x13a58>
   2573c:	cmp	r3, #66	; 0x42
   25740:	moveq	r3, #2
   25744:	movne	r3, #1
   25748:	moveq	ip, #1000	; 0x3e8
   2574c:	movne	ip, #1024	; 0x400
   25750:	str	r3, [sp, #12]
   25754:	b	25764 <__assert_fail@plt+0x1381c>
   25758:	mov	r3, #1
   2575c:	mov	ip, #1024	; 0x400
   25760:	str	r3, [sp, #12]
   25764:	sub	sl, sl, #66	; 0x42
   25768:	cmp	sl, #53	; 0x35
   2576c:	ldrls	pc, [pc, sl, lsl #2]
   25770:	b	2594c <__assert_fail@plt+0x13a04>
   25774:	andeq	r5, r2, r4, lsr ip
   25778:	andeq	r5, r2, ip, asr #18
   2577c:	andeq	r5, r2, ip, asr #18
   25780:	ldrdeq	r5, [r2], -r4
   25784:	andeq	r5, r2, ip, asr #18
   25788:	andeq	r5, r2, r0, asr ip
   2578c:	andeq	r5, r2, ip, asr #18
   25790:	andeq	r5, r2, ip, asr #18
   25794:	andeq	r5, r2, ip, asr #18
   25798:	andeq	r5, r2, r4, asr r9
   2579c:	andeq	r5, r2, ip, asr #18
   257a0:	andeq	r5, r2, ip, ror fp
   257a4:	andeq	r5, r2, ip, asr #18
   257a8:	andeq	r5, r2, ip, asr #18
   257ac:	andeq	r5, r2, r0, lsr #22
   257b0:	andeq	r5, r2, ip, asr #18
   257b4:	andeq	r5, r2, ip, asr #18
   257b8:	andeq	r5, r2, ip, asr #18
   257bc:	andeq	r5, r2, r0, asr #21
   257c0:	andeq	r5, r2, ip, asr #18
   257c4:	andeq	r5, r2, ip, asr #18
   257c8:	andeq	r5, r2, ip, asr #18
   257cc:	andeq	r5, r2, ip, asr #18
   257d0:	strdeq	r5, [r2], -r4
   257d4:	andeq	r5, r2, ip, asr #16
   257d8:	andeq	r5, r2, ip, asr #18
   257dc:	andeq	r5, r2, ip, asr #18
   257e0:	andeq	r5, r2, ip, asr #18
   257e4:	andeq	r5, r2, ip, asr #18
   257e8:	andeq	r5, r2, ip, asr #18
   257ec:	andeq	r5, r2, ip, asr #18
   257f0:	andeq	r5, r2, ip, asr #18
   257f4:	ldrdeq	r5, [r2], -r4
   257f8:	andeq	r5, r2, r4, lsr r9
   257fc:	andeq	r5, r2, ip, asr #18
   25800:	andeq	r5, r2, ip, asr #18
   25804:	andeq	r5, r2, ip, asr #18
   25808:	andeq	r5, r2, r0, asr ip
   2580c:	andeq	r5, r2, ip, asr #18
   25810:	andeq	r5, r2, ip, asr #18
   25814:	andeq	r5, r2, ip, asr #18
   25818:	andeq	r5, r2, r4, asr r9
   2581c:	andeq	r5, r2, ip, asr #18
   25820:	andeq	r5, r2, ip, ror fp
   25824:	andeq	r5, r2, ip, asr #18
   25828:	andeq	r5, r2, ip, asr #18
   2582c:	andeq	r5, r2, ip, asr #18
   25830:	andeq	r5, r2, ip, asr #18
   25834:	andeq	r5, r2, ip, asr #18
   25838:	andeq	r5, r2, ip, asr #18
   2583c:	andeq	r5, r2, r0, asr #21
   25840:	andeq	r5, r2, ip, asr #18
   25844:	andeq	r5, r2, ip, asr #18
   25848:			; <UNDEFINED> instruction: 0x000259bc
   2584c:	asr	r3, ip, #31
   25850:	mov	r2, ip
   25854:	cmp	r7, #0
   25858:	mov	r1, #0
   2585c:	strd	r2, [sp]
   25860:	bne	25da0 <__assert_fail@plt+0x13e58>
   25864:	umull	r6, r7, r6, ip
   25868:	mov	r2, r6
   2586c:	mov	r3, r7
   25870:	cmp	r1, #0
   25874:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25878:	cmp	r3, #0
   2587c:	mov	lr, r1
   25880:	bne	25ecc <__assert_fail@plt+0x13f84>
   25884:	umull	r2, r3, r2, ip
   25888:	mov	r0, r2
   2588c:	mov	r1, r3
   25890:	cmp	lr, #0
   25894:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25898:	cmp	r1, #0
   2589c:	bne	25ea8 <__assert_fail@plt+0x13f60>
   258a0:	umull	r0, r1, r0, ip
   258a4:	mov	r2, r0
   258a8:	mov	r3, r1
   258ac:	cmp	lr, #0
   258b0:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   258b4:	cmp	r3, #0
   258b8:	bne	25b58 <__assert_fail@plt+0x13c10>
   258bc:	umull	r2, r3, r2, ip
   258c0:	mov	r0, r2
   258c4:	mov	r1, r3
   258c8:	cmp	lr, #0
   258cc:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   258d0:	cmp	r1, #0
   258d4:	bne	25d58 <__assert_fail@plt+0x13e10>
   258d8:	umull	r0, r1, r0, ip
   258dc:	mov	r2, r0
   258e0:	mov	r3, r1
   258e4:	cmp	lr, #0
   258e8:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   258ec:	cmp	r3, #0
   258f0:	mov	r7, lr
   258f4:	bne	25d34 <__assert_fail@plt+0x13dec>
   258f8:	umull	r2, r3, r2, ip
   258fc:	mov	r6, r2
   25900:	mov	lr, r3
   25904:	cmp	r7, #0
   25908:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   2590c:	cmp	lr, #0
   25910:	bne	25cf8 <__assert_fail@plt+0x13db0>
   25914:	umull	r2, r3, r6, ip
   25918:	mov	r0, r2
   2591c:	mov	r2, r3
   25920:	subs	r3, r7, #0
   25924:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25928:	mov	r6, r0
   2592c:	mov	r7, r2
   25930:	orr	r4, r4, r3
   25934:	ldr	r2, [sp, #12]
   25938:	add	r3, r8, r2
   2593c:	str	r3, [r5]
   25940:	ldrb	r3, [r8, r2]
   25944:	cmp	r3, #0
   25948:	beq	255d0 <__assert_fail@plt+0x13688>
   2594c:	orr	r4, r4, #2
   25950:	b	255d0 <__assert_fail@plt+0x13688>
   25954:	cmp	r7, #0
   25958:	asr	r1, ip, #31
   2595c:	mov	lr, #0
   25960:	bne	25cc4 <__assert_fail@plt+0x13d7c>
   25964:	umull	r2, r3, r6, ip
   25968:	mov	r6, r2
   2596c:	mov	r7, r3
   25970:	cmp	lr, #0
   25974:	beq	25934 <__assert_fail@plt+0x139ec>
   25978:	mvn	r6, #0
   2597c:	mov	r4, #1
   25980:	mov	r7, r6
   25984:	b	25934 <__assert_fail@plt+0x139ec>
   25988:	mov	r0, r3
   2598c:	mov	r1, sl
   25990:	bl	11d5c <strchr@plt>
   25994:	cmp	r0, #0
   25998:	bne	25644 <__assert_fail@plt+0x136fc>
   2599c:	b	2594c <__assert_fail@plt+0x13a04>
   259a0:	ldrb	r3, [r8, #2]
   259a4:	mov	ip, #1024	; 0x400
   259a8:	cmp	r3, #66	; 0x42
   259ac:	movne	r3, #1
   259b0:	moveq	r3, #3
   259b4:	str	r3, [sp, #12]
   259b8:	b	25764 <__assert_fail@plt+0x1381c>
   259bc:	lsr	r3, r7, #31
   259c0:	adds	r6, r6, r6
   259c4:	adc	r7, r7, r7
   259c8:	cmp	r3, #0
   259cc:	beq	25934 <__assert_fail@plt+0x139ec>
   259d0:	b	25978 <__assert_fail@plt+0x13a30>
   259d4:	lsr	r3, r7, #23
   259d8:	lsl	r7, r7, #9
   259dc:	cmp	r3, #0
   259e0:	lsl	r3, r6, #9
   259e4:	orr	r7, r7, r6, lsr #23
   259e8:	bne	25978 <__assert_fail@plt+0x13a30>
   259ec:	mov	r6, r3
   259f0:	b	25934 <__assert_fail@plt+0x139ec>
   259f4:	asr	r3, ip, #31
   259f8:	mov	r2, ip
   259fc:	cmp	r7, #0
   25a00:	mov	r1, #0
   25a04:	strd	r2, [sp]
   25a08:	bne	25e14 <__assert_fail@plt+0x13ecc>
   25a0c:	umull	r6, r7, r6, ip
   25a10:	mov	r0, r6
   25a14:	mov	fp, r7
   25a18:	cmp	r1, #0
   25a1c:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25a20:	cmp	fp, #0
   25a24:	mov	lr, r1
   25a28:	bne	25fa4 <__assert_fail@plt+0x1405c>
   25a2c:	umull	r0, r1, r0, ip
   25a30:	mov	r2, r0
   25a34:	mov	r3, r1
   25a38:	cmp	lr, #0
   25a3c:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25a40:	cmp	r3, #0
   25a44:	bne	25fcc <__assert_fail@plt+0x14084>
   25a48:	umull	r2, r3, r2, ip
   25a4c:	mov	r0, r2
   25a50:	mov	r1, r3
   25a54:	cmp	lr, #0
   25a58:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25a5c:	cmp	r1, #0
   25a60:	bne	25f4c <__assert_fail@plt+0x14004>
   25a64:	umull	r0, r1, r0, ip
   25a68:	mov	r2, r0
   25a6c:	mov	r3, r1
   25a70:	cmp	lr, #0
   25a74:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25a78:	cmp	r3, #0
   25a7c:	bne	25d7c <__assert_fail@plt+0x13e34>
   25a80:	umull	r2, r3, r2, ip
   25a84:	mov	r0, r2
   25a88:	mov	r1, r3
   25a8c:	cmp	lr, #0
   25a90:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25a94:	cmp	r1, #0
   25a98:	beq	258d8 <__assert_fail@plt+0x13990>
   25a9c:	umull	r6, r7, r0, ip
   25aa0:	mov	fp, lr
   25aa4:	mov	sl, r7
   25aa8:	umlal	sl, fp, r1, ip
   25aac:	cmp	fp, #0
   25ab0:	bne	261b4 <__assert_fail@plt+0x1426c>
   25ab4:	mov	r2, r6
   25ab8:	mov	r3, sl
   25abc:	b	258e4 <__assert_fail@plt+0x1399c>
   25ac0:	asr	r3, ip, #31
   25ac4:	mov	r2, ip
   25ac8:	cmp	r7, #0
   25acc:	mov	r1, #0
   25ad0:	strd	r2, [sp]
   25ad4:	bne	25e38 <__assert_fail@plt+0x13ef0>
   25ad8:	umull	r6, r7, r6, ip
   25adc:	mov	r0, r6
   25ae0:	mov	fp, r7
   25ae4:	cmp	r1, #0
   25ae8:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25aec:	cmp	fp, #0
   25af0:	mov	lr, r1
   25af4:	beq	258d8 <__assert_fail@plt+0x13990>
   25af8:	umull	r6, r7, r0, ip
   25afc:	mov	r3, r1
   25b00:	mov	r2, r7
   25b04:	umlal	r2, r3, fp, ip
   25b08:	cmp	r3, #0
   25b0c:	strd	r2, [sp, #16]
   25b10:	bne	26098 <__assert_fail@plt+0x14150>
   25b14:	mov	r2, r6
   25b18:	ldr	r3, [sp, #16]
   25b1c:	b	258e4 <__assert_fail@plt+0x1399c>
   25b20:	asr	r3, ip, #31
   25b24:	mov	r2, ip
   25b28:	cmp	r7, #0
   25b2c:	mov	r1, #0
   25b30:	strd	r2, [sp]
   25b34:	bne	25e80 <__assert_fail@plt+0x13f38>
   25b38:	umull	r6, r7, r6, ip
   25b3c:	mov	r2, r6
   25b40:	mov	r3, r7
   25b44:	cmp	r1, #0
   25b48:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25b4c:	cmp	r3, #0
   25b50:	mov	lr, r1
   25b54:	beq	258bc <__assert_fail@plt+0x13974>
   25b58:	umull	r6, r7, r2, ip
   25b5c:	mov	fp, lr
   25b60:	mov	sl, r7
   25b64:	umlal	sl, fp, r3, ip
   25b68:	cmp	fp, #0
   25b6c:	bne	26178 <__assert_fail@plt+0x14230>
   25b70:	mov	r0, r6
   25b74:	mov	r1, sl
   25b78:	b	258c8 <__assert_fail@plt+0x13980>
   25b7c:	asr	r3, ip, #31
   25b80:	mov	r2, ip
   25b84:	cmp	r7, #0
   25b88:	mov	r1, #0
   25b8c:	strd	r2, [sp]
   25b90:	bne	25e5c <__assert_fail@plt+0x13f14>
   25b94:	umull	r6, r7, r6, ip
   25b98:	mov	sl, r6
   25b9c:	mov	lr, r7
   25ba0:	cmp	r1, #0
   25ba4:	bne	25978 <__assert_fail@plt+0x13a30>
   25ba8:	cmp	lr, #0
   25bac:	mov	r7, r1
   25bb0:	bne	25f70 <__assert_fail@plt+0x14028>
   25bb4:	umull	sl, fp, sl, ip
   25bb8:	mov	r0, sl
   25bbc:	mov	r2, fp
   25bc0:	cmp	r7, #0
   25bc4:	mov	r6, r0
   25bc8:	mov	r7, r2
   25bcc:	beq	25934 <__assert_fail@plt+0x139ec>
   25bd0:	b	25978 <__assert_fail@plt+0x13a30>
   25bd4:	asr	r3, ip, #31
   25bd8:	mov	r2, ip
   25bdc:	cmp	r7, #0
   25be0:	mov	r1, #0
   25be4:	strd	r2, [sp]
   25be8:	bne	25df0 <__assert_fail@plt+0x13ea8>
   25bec:	umull	r6, r7, r6, ip
   25bf0:	mov	r0, r6
   25bf4:	mov	fp, r7
   25bf8:	cmp	r1, #0
   25bfc:	bne	25cb4 <__assert_fail@plt+0x13d6c>
   25c00:	cmp	fp, #0
   25c04:	mov	lr, r1
   25c08:	beq	25a64 <__assert_fail@plt+0x13b1c>
   25c0c:	umull	r6, r7, r0, ip
   25c10:	mov	r3, r1
   25c14:	mov	r2, r7
   25c18:	umlal	r2, r3, fp, ip
   25c1c:	cmp	r3, #0
   25c20:	strd	r2, [sp, #16]
   25c24:	bne	26108 <__assert_fail@plt+0x141c0>
   25c28:	mov	r2, r6
   25c2c:	ldr	r3, [sp, #16]
   25c30:	b	25a70 <__assert_fail@plt+0x13b28>
   25c34:	lsr	r3, r7, #22
   25c38:	lsl	r7, r7, #10
   25c3c:	cmp	r3, #0
   25c40:	lsl	r3, r6, #10
   25c44:	orr	r7, r7, r6, lsr #22
   25c48:	beq	259ec <__assert_fail@plt+0x13aa4>
   25c4c:	b	25978 <__assert_fail@plt+0x13a30>
   25c50:	asr	r3, ip, #31
   25c54:	mov	r2, ip
   25c58:	cmp	r7, #0
   25c5c:	mov	r1, #0
   25c60:	strd	r2, [sp]
   25c64:	bne	25dc8 <__assert_fail@plt+0x13e80>
   25c68:	umull	r6, r7, r6, ip
   25c6c:	mov	r2, r6
   25c70:	mov	r3, r7
   25c74:	cmp	r1, #0
   25c78:	bne	25978 <__assert_fail@plt+0x13a30>
   25c7c:	cmp	r3, #0
   25c80:	mov	r7, r1
   25c84:	bne	25f2c <__assert_fail@plt+0x13fe4>
   25c88:	umull	r2, r3, r2, ip
   25c8c:	mov	r6, r2
   25c90:	mov	lr, r3
   25c94:	cmp	r7, #0
   25c98:	bne	25978 <__assert_fail@plt+0x13a30>
   25c9c:	cmp	lr, #0
   25ca0:	bne	25ef0 <__assert_fail@plt+0x13fa8>
   25ca4:	umull	r2, r3, r6, ip
   25ca8:	mov	r0, r2
   25cac:	mov	r2, r3
   25cb0:	b	25bc0 <__assert_fail@plt+0x13c78>
   25cb4:	mvn	r6, #0
   25cb8:	mov	r3, #1
   25cbc:	mov	r7, r6
   25cc0:	b	25930 <__assert_fail@plt+0x139e8>
   25cc4:	umull	sl, fp, r6, ip
   25cc8:	mov	r3, lr
   25ccc:	mov	r2, fp
   25cd0:	umlal	r2, r3, r7, ip
   25cd4:	cmp	r3, #0
   25cd8:	bne	260d0 <__assert_fail@plt+0x14188>
   25cdc:	mov	r6, sl
   25ce0:	mov	r7, r2
   25ce4:	b	25970 <__assert_fail@plt+0x13a28>
   25ce8:	mov	r3, #2
   25cec:	mov	ip, #1000	; 0x3e8
   25cf0:	str	r3, [sp, #12]
   25cf4:	b	25764 <__assert_fail@plt+0x1381c>
   25cf8:	umull	r0, r1, r6, ip
   25cfc:	mov	r3, r7
   25d00:	mov	r2, r1
   25d04:	strd	r0, [sp, #16]
   25d08:	umlal	r2, r3, lr, ip
   25d0c:	cmp	r3, #0
   25d10:	beq	25920 <__assert_fail@plt+0x139d8>
   25d14:	ldrd	sl, [sp]
   25d18:	mov	r7, #1
   25d1c:	ldr	r0, [sp, #16]
   25d20:	ldr	r3, [sp, #20]
   25d24:	mul	r2, r6, fp
   25d28:	mla	r2, lr, sl, r2
   25d2c:	add	r2, r2, r3
   25d30:	b	25920 <__assert_fail@plt+0x139d8>
   25d34:	umull	sl, fp, r2, ip
   25d38:	mov	r1, lr
   25d3c:	mov	r0, fp
   25d40:	umlal	r0, r1, r3, ip
   25d44:	cmp	r1, #0
   25d48:	bne	26028 <__assert_fail@plt+0x140e0>
   25d4c:	mov	r6, sl
   25d50:	mov	lr, r0
   25d54:	b	25904 <__assert_fail@plt+0x139bc>
   25d58:	umull	sl, fp, r0, ip
   25d5c:	mov	r7, lr
   25d60:	mov	r6, fp
   25d64:	umlal	r6, r7, r1, ip
   25d68:	cmp	r7, #0
   25d6c:	bne	261d0 <__assert_fail@plt+0x14288>
   25d70:	mov	r2, sl
   25d74:	mov	r3, r6
   25d78:	b	258e4 <__assert_fail@plt+0x1399c>
   25d7c:	umull	sl, fp, r2, ip
   25d80:	mov	r7, lr
   25d84:	mov	r6, fp
   25d88:	umlal	r6, r7, r3, ip
   25d8c:	cmp	r7, #0
   25d90:	bne	26060 <__assert_fail@plt+0x14118>
   25d94:	mov	r0, sl
   25d98:	mov	r1, r6
   25d9c:	b	25a8c <__assert_fail@plt+0x13b44>
   25da0:	umull	sl, fp, r6, ip
   25da4:	mov	r3, r1
   25da8:	mov	r2, fp
   25dac:	umlal	r2, r3, r7, ip
   25db0:	cmp	r3, #0
   25db4:	strd	r2, [sp, #16]
   25db8:	bne	26044 <__assert_fail@plt+0x140fc>
   25dbc:	mov	r2, sl
   25dc0:	ldr	r3, [sp, #16]
   25dc4:	b	25870 <__assert_fail@plt+0x13928>
   25dc8:	umull	sl, fp, r6, ip
   25dcc:	mov	r3, r1
   25dd0:	mov	r2, fp
   25dd4:	umlal	r2, r3, r7, ip
   25dd8:	cmp	r3, #0
   25ddc:	strd	r2, [sp, #16]
   25de0:	bne	26124 <__assert_fail@plt+0x141dc>
   25de4:	mov	r2, sl
   25de8:	ldr	r3, [sp, #16]
   25dec:	b	25c74 <__assert_fail@plt+0x13d2c>
   25df0:	umull	sl, fp, r6, ip
   25df4:	mov	r3, r1
   25df8:	mov	r2, fp
   25dfc:	umlal	r2, r3, r7, ip
   25e00:	cmp	r3, #0
   25e04:	bne	25ff0 <__assert_fail@plt+0x140a8>
   25e08:	mov	r0, sl
   25e0c:	mov	fp, r2
   25e10:	b	25bf8 <__assert_fail@plt+0x13cb0>
   25e14:	umull	sl, fp, r6, ip
   25e18:	mov	r3, r1
   25e1c:	mov	r2, fp
   25e20:	umlal	r2, r3, r7, ip
   25e24:	cmp	r3, #0
   25e28:	bne	260b4 <__assert_fail@plt+0x1416c>
   25e2c:	mov	r0, sl
   25e30:	mov	fp, r2
   25e34:	b	25a18 <__assert_fail@plt+0x13ad0>
   25e38:	umull	sl, fp, r6, ip
   25e3c:	mov	r3, r1
   25e40:	mov	r2, fp
   25e44:	umlal	r2, r3, r7, ip
   25e48:	cmp	r3, #0
   25e4c:	bne	26140 <__assert_fail@plt+0x141f8>
   25e50:	mov	r0, sl
   25e54:	mov	fp, r2
   25e58:	b	25ae4 <__assert_fail@plt+0x13b9c>
   25e5c:	umull	sl, fp, r6, ip
   25e60:	mov	r3, r1
   25e64:	mov	r2, fp
   25e68:	strd	sl, [sp, #16]
   25e6c:	umlal	r2, r3, r7, ip
   25e70:	cmp	r3, #0
   25e74:	bne	260e8 <__assert_fail@plt+0x141a0>
   25e78:	mov	lr, r2
   25e7c:	b	25ba0 <__assert_fail@plt+0x13c58>
   25e80:	umull	sl, fp, r6, ip
   25e84:	mov	r3, r1
   25e88:	mov	r2, fp
   25e8c:	umlal	r2, r3, r7, ip
   25e90:	cmp	r3, #0
   25e94:	strd	r2, [sp, #16]
   25e98:	bne	261ec <__assert_fail@plt+0x142a4>
   25e9c:	mov	r2, sl
   25ea0:	ldr	r3, [sp, #16]
   25ea4:	b	25b44 <__assert_fail@plt+0x13bfc>
   25ea8:	umull	sl, fp, r0, ip
   25eac:	mov	r7, lr
   25eb0:	mov	r6, fp
   25eb4:	umlal	r6, r7, r1, ip
   25eb8:	cmp	r7, #0
   25ebc:	bne	26208 <__assert_fail@plt+0x142c0>
   25ec0:	mov	r2, sl
   25ec4:	mov	r3, r6
   25ec8:	b	258ac <__assert_fail@plt+0x13964>
   25ecc:	umull	r6, r7, r2, ip
   25ed0:	mov	fp, r1
   25ed4:	mov	sl, r7
   25ed8:	umlal	sl, fp, r3, ip
   25edc:	cmp	fp, #0
   25ee0:	bne	2607c <__assert_fail@plt+0x14134>
   25ee4:	mov	r0, r6
   25ee8:	mov	r1, sl
   25eec:	b	25890 <__assert_fail@plt+0x13948>
   25ef0:	umull	r0, r1, r6, ip
   25ef4:	mov	r3, r7
   25ef8:	mov	r2, r1
   25efc:	strd	r0, [sp, #16]
   25f00:	umlal	r2, r3, lr, ip
   25f04:	cmp	r3, #0
   25f08:	beq	25bc0 <__assert_fail@plt+0x13c78>
   25f0c:	ldrd	sl, [sp]
   25f10:	mov	r7, #1
   25f14:	ldr	r0, [sp, #16]
   25f18:	ldr	r3, [sp, #20]
   25f1c:	mul	r2, r6, fp
   25f20:	mla	r2, lr, sl, r2
   25f24:	add	r2, r2, r3
   25f28:	b	25bc0 <__assert_fail@plt+0x13c78>
   25f2c:	umull	sl, fp, r2, ip
   25f30:	mov	r0, fp
   25f34:	umlal	r0, r1, r3, ip
   25f38:	cmp	r1, #0
   25f3c:	bne	26224 <__assert_fail@plt+0x142dc>
   25f40:	mov	r6, sl
   25f44:	mov	lr, r0
   25f48:	b	25c94 <__assert_fail@plt+0x13d4c>
   25f4c:	umull	r6, r7, r0, ip
   25f50:	mov	fp, lr
   25f54:	mov	sl, r7
   25f58:	umlal	sl, fp, r1, ip
   25f5c:	cmp	fp, #0
   25f60:	bne	2615c <__assert_fail@plt+0x14214>
   25f64:	mov	r2, r6
   25f68:	mov	r3, sl
   25f6c:	b	25a70 <__assert_fail@plt+0x13b28>
   25f70:	umull	r0, r1, sl, ip
   25f74:	mov	r3, r7
   25f78:	mov	r2, r1
   25f7c:	umlal	r2, r3, lr, ip
   25f80:	cmp	r3, #0
   25f84:	beq	25bc0 <__assert_fail@plt+0x13c78>
   25f88:	ldr	r3, [sp, #4]
   25f8c:	mov	r7, #1
   25f90:	mul	r2, sl, r3
   25f94:	ldr	r3, [sp]
   25f98:	mla	r2, lr, r3, r2
   25f9c:	add	r2, r2, r1
   25fa0:	b	25bc0 <__assert_fail@plt+0x13c78>
   25fa4:	umull	r6, r7, r0, ip
   25fa8:	mov	r3, r1
   25fac:	mov	r2, r7
   25fb0:	umlal	r2, r3, fp, ip
   25fb4:	cmp	r3, #0
   25fb8:	strd	r2, [sp, #16]
   25fbc:	bne	26240 <__assert_fail@plt+0x142f8>
   25fc0:	mov	r2, r6
   25fc4:	ldr	r3, [sp, #16]
   25fc8:	b	25a38 <__assert_fail@plt+0x13af0>
   25fcc:	umull	sl, fp, r2, ip
   25fd0:	mov	r7, lr
   25fd4:	mov	r6, fp
   25fd8:	umlal	r6, r7, r3, ip
   25fdc:	cmp	r7, #0
   25fe0:	bne	2600c <__assert_fail@plt+0x140c4>
   25fe4:	mov	r0, sl
   25fe8:	mov	r1, r6
   25fec:	b	25a54 <__assert_fail@plt+0x13b0c>
   25ff0:	ldrd	r2, [sp]
   25ff4:	mov	r0, sl
   25ff8:	mov	r1, #1
   25ffc:	mul	r6, r6, r3
   26000:	mla	r7, r2, r7, r6
   26004:	add	fp, r7, fp
   26008:	b	25bf8 <__assert_fail@plt+0x13cb0>
   2600c:	ldrd	r6, [sp]
   26010:	mov	r0, sl
   26014:	mov	lr, #1
   26018:	mul	r2, r2, r7
   2601c:	mla	r1, r3, r6, r2
   26020:	add	r1, r1, fp
   26024:	b	25a54 <__assert_fail@plt+0x13b0c>
   26028:	ldrd	r0, [sp]
   2602c:	mov	r6, sl
   26030:	mov	r7, #1
   26034:	mul	r2, r2, r1
   26038:	mla	lr, r3, r0, r2
   2603c:	add	lr, lr, fp
   26040:	b	25904 <__assert_fail@plt+0x139bc>
   26044:	ldm	sp, {r0, r3}
   26048:	mov	r2, sl
   2604c:	mov	r1, #1
   26050:	mul	r3, r6, r3
   26054:	mla	r3, r0, r7, r3
   26058:	add	r3, r3, fp
   2605c:	b	25870 <__assert_fail@plt+0x13928>
   26060:	ldrd	r6, [sp]
   26064:	mov	r0, sl
   26068:	mov	lr, #1
   2606c:	mul	r2, r2, r7
   26070:	mla	r1, r3, r6, r2
   26074:	add	r1, r1, fp
   26078:	b	25a8c <__assert_fail@plt+0x13b44>
   2607c:	ldrd	sl, [sp]
   26080:	mov	r0, r6
   26084:	mov	lr, #1
   26088:	mul	r2, r2, fp
   2608c:	mla	r1, r3, sl, r2
   26090:	add	r1, r1, r7
   26094:	b	25890 <__assert_fail@plt+0x13948>
   26098:	ldm	sp, {r1, r3}
   2609c:	mov	r2, r6
   260a0:	mov	lr, #1
   260a4:	mul	r3, r0, r3
   260a8:	mla	r3, fp, r1, r3
   260ac:	add	r3, r3, r7
   260b0:	b	258e4 <__assert_fail@plt+0x1399c>
   260b4:	ldrd	r2, [sp]
   260b8:	mov	r0, sl
   260bc:	mov	r1, #1
   260c0:	mul	r6, r6, r3
   260c4:	mla	r7, r2, r7, r6
   260c8:	add	fp, r7, fp
   260cc:	b	25a18 <__assert_fail@plt+0x13ad0>
   260d0:	mul	r3, r6, r1
   260d4:	mov	lr, #1
   260d8:	mov	r6, sl
   260dc:	mla	r7, ip, r7, r3
   260e0:	add	r7, r7, fp
   260e4:	b	25970 <__assert_fail@plt+0x13a28>
   260e8:	ldrd	r2, [sp]
   260ec:	mov	r1, #1
   260f0:	ldr	sl, [sp, #16]
   260f4:	mul	lr, r6, r3
   260f8:	ldr	r3, [sp, #20]
   260fc:	mla	lr, r2, r7, lr
   26100:	add	lr, lr, r3
   26104:	b	25ba0 <__assert_fail@plt+0x13c58>
   26108:	ldm	sp, {r1, r3}
   2610c:	mov	r2, r6
   26110:	mov	lr, #1
   26114:	mul	r3, r0, r3
   26118:	mla	r3, fp, r1, r3
   2611c:	add	r3, r3, r7
   26120:	b	25a70 <__assert_fail@plt+0x13b28>
   26124:	ldm	sp, {r0, r3}
   26128:	mov	r2, sl
   2612c:	mov	r1, #1
   26130:	mul	r3, r6, r3
   26134:	mla	r3, r0, r7, r3
   26138:	add	r3, r3, fp
   2613c:	b	25c74 <__assert_fail@plt+0x13d2c>
   26140:	ldrd	r2, [sp]
   26144:	mov	r0, sl
   26148:	mov	r1, #1
   2614c:	mul	r6, r6, r3
   26150:	mla	r7, r2, r7, r6
   26154:	add	fp, r7, fp
   26158:	b	25ae4 <__assert_fail@plt+0x13b9c>
   2615c:	ldrd	sl, [sp]
   26160:	mov	r2, r6
   26164:	mov	lr, #1
   26168:	mul	r3, r0, fp
   2616c:	mla	r3, r1, sl, r3
   26170:	add	r3, r3, r7
   26174:	b	25a70 <__assert_fail@plt+0x13b28>
   26178:	ldrd	sl, [sp]
   2617c:	mov	r0, r6
   26180:	mov	lr, #1
   26184:	mul	r2, r2, fp
   26188:	mla	r1, r3, sl, r2
   2618c:	add	r1, r1, r7
   26190:	b	258c8 <__assert_fail@plt+0x13980>
   26194:	movw	r3, #40076	; 0x9c8c
   26198:	movt	r3, #2
   2619c:	movw	r1, #40088	; 0x9c98
   261a0:	movt	r1, #2
   261a4:	movw	r0, #40104	; 0x9ca8
   261a8:	movt	r0, #2
   261ac:	mov	r2, #85	; 0x55
   261b0:	bl	11f48 <__assert_fail@plt>
   261b4:	ldrd	sl, [sp]
   261b8:	mov	r2, r6
   261bc:	mov	lr, #1
   261c0:	mul	r3, r0, fp
   261c4:	mla	r3, r1, sl, r3
   261c8:	add	r3, r3, r7
   261cc:	b	258e4 <__assert_fail@plt+0x1399c>
   261d0:	ldrd	r6, [sp]
   261d4:	mov	r2, sl
   261d8:	mov	lr, #1
   261dc:	mul	r3, r0, r7
   261e0:	mla	r3, r1, r6, r3
   261e4:	add	r3, r3, fp
   261e8:	b	258e4 <__assert_fail@plt+0x1399c>
   261ec:	ldm	sp, {r0, r3}
   261f0:	mov	r2, sl
   261f4:	mov	r1, #1
   261f8:	mul	r3, r6, r3
   261fc:	mla	r3, r0, r7, r3
   26200:	add	r3, r3, fp
   26204:	b	25b44 <__assert_fail@plt+0x13bfc>
   26208:	ldrd	r6, [sp]
   2620c:	mov	r2, sl
   26210:	mov	lr, #1
   26214:	mul	r3, r0, r7
   26218:	mla	r3, r1, r6, r3
   2621c:	add	r3, r3, fp
   26220:	b	258ac <__assert_fail@plt+0x13964>
   26224:	ldrd	r0, [sp]
   26228:	mov	r6, sl
   2622c:	mov	r7, #1
   26230:	mul	r2, r2, r1
   26234:	mla	lr, r3, r0, r2
   26238:	add	lr, lr, fp
   2623c:	b	25c94 <__assert_fail@plt+0x13d4c>
   26240:	ldm	sp, {r1, r3}
   26244:	mov	r2, r6
   26248:	mov	lr, #1
   2624c:	mul	r3, r0, r3
   26250:	mla	r3, fp, r1, r3
   26254:	add	r3, r3, r7
   26258:	b	25a38 <__assert_fail@plt+0x13af0>
   2625c:	cmp	r1, #0
   26260:	cmpne	r0, #0
   26264:	beq	262b0 <__assert_fail@plt+0x14368>
   26268:	strd	r4, [sp, #-16]!
   2626c:	umull	r4, r5, r0, r1
   26270:	str	r6, [sp, #8]
   26274:	str	lr, [sp, #12]
   26278:	adds	r3, r5, #0
   2627c:	movne	r3, #1
   26280:	cmp	r4, #0
   26284:	blt	26290 <__assert_fail@plt+0x14348>
   26288:	cmp	r3, #0
   2628c:	beq	262bc <__assert_fail@plt+0x14374>
   26290:	bl	11d74 <__errno_location@plt>
   26294:	mov	r3, #12
   26298:	ldrd	r4, [sp]
   2629c:	ldr	r6, [sp, #8]
   262a0:	add	sp, sp, #12
   262a4:	str	r3, [r0]
   262a8:	mov	r0, #0
   262ac:	pop	{pc}		; (ldr pc, [sp], #4)
   262b0:	mov	r1, #1
   262b4:	mov	r0, r1
   262b8:	b	11a08 <calloc@plt>
   262bc:	ldrd	r4, [sp]
   262c0:	ldr	r6, [sp, #8]
   262c4:	ldr	lr, [sp, #12]
   262c8:	add	sp, sp, #16
   262cc:	b	11a08 <calloc@plt>
   262d0:	cmp	r0, #0
   262d4:	beq	262e0 <__assert_fail@plt+0x14398>
   262d8:	blt	262e8 <__assert_fail@plt+0x143a0>
   262dc:	b	11cd8 <malloc@plt>
   262e0:	mov	r0, #1
   262e4:	b	11cd8 <malloc@plt>
   262e8:	str	r4, [sp, #-8]!
   262ec:	str	lr, [sp, #4]
   262f0:	bl	11d74 <__errno_location@plt>
   262f4:	mov	r3, #12
   262f8:	ldr	r4, [sp]
   262fc:	add	sp, sp, #4
   26300:	str	r3, [r0]
   26304:	mov	r0, #0
   26308:	pop	{pc}		; (ldr pc, [sp], #4)
   2630c:	cmp	r0, #0
   26310:	beq	26338 <__assert_fail@plt+0x143f0>
   26314:	cmp	r1, #0
   26318:	str	r4, [sp, #-8]!
   2631c:	str	lr, [sp, #4]
   26320:	beq	26340 <__assert_fail@plt+0x143f8>
   26324:	blt	26354 <__assert_fail@plt+0x1440c>
   26328:	ldr	r4, [sp]
   2632c:	ldr	lr, [sp, #4]
   26330:	add	sp, sp, #8
   26334:	b	11ba0 <realloc@plt>
   26338:	mov	r0, r1
   2633c:	b	262d0 <__assert_fail@plt+0x14388>
   26340:	bl	1d29c <__assert_fail@plt+0xb354>
   26344:	ldr	r4, [sp]
   26348:	add	sp, sp, #4
   2634c:	mov	r0, #0
   26350:	pop	{pc}		; (ldr pc, [sp], #4)
   26354:	bl	11d74 <__errno_location@plt>
   26358:	mov	r3, #12
   2635c:	str	r3, [r0]
   26360:	b	26344 <__assert_fail@plt+0x143fc>
   26364:	strd	r4, [sp, #-16]!
   26368:	mov	r4, r0
   2636c:	str	r6, [sp, #8]
   26370:	str	lr, [sp, #12]
   26374:	bl	11c78 <__fpending@plt>
   26378:	ldr	r5, [r4]
   2637c:	mov	r6, r0
   26380:	mov	r0, r4
   26384:	bl	1cafc <__assert_fail@plt+0xabb4>
   26388:	mov	r4, r0
   2638c:	and	r5, r5, #32
   26390:	cmp	r5, #0
   26394:	bne	263cc <__assert_fail@plt+0x14484>
   26398:	cmp	r0, #0
   2639c:	beq	263b8 <__assert_fail@plt+0x14470>
   263a0:	cmp	r6, #0
   263a4:	bne	263e4 <__assert_fail@plt+0x1449c>
   263a8:	bl	11d74 <__errno_location@plt>
   263ac:	ldr	r4, [r0]
   263b0:	subs	r4, r4, #9
   263b4:	mvnne	r4, #0
   263b8:	mov	r0, r4
   263bc:	ldrd	r4, [sp]
   263c0:	ldr	r6, [sp, #8]
   263c4:	add	sp, sp, #12
   263c8:	pop	{pc}		; (ldr pc, [sp], #4)
   263cc:	cmp	r0, #0
   263d0:	bne	263e4 <__assert_fail@plt+0x1449c>
   263d4:	bl	11d74 <__errno_location@plt>
   263d8:	str	r4, [r0]
   263dc:	mvn	r4, #0
   263e0:	b	263b8 <__assert_fail@plt+0x14470>
   263e4:	mvn	r4, #0
   263e8:	b	263b8 <__assert_fail@plt+0x14470>
   263ec:	andeq	r0, r0, r0
   263f0:	vldr	d7, [pc, #176]	; 264a8 <__assert_fail@plt+0x14560>
   263f4:	vcmpe.f64	d0, d7
   263f8:	vmrs	APSR_nzcv, fpscr
   263fc:	ble	26498 <__assert_fail@plt+0x14550>
   26400:	vldr	d7, [pc, #168]	; 264b0 <__assert_fail@plt+0x14568>
   26404:	vcmpe.f64	d0, d7
   26408:	vmrs	APSR_nzcv, fpscr
   2640c:	bmi	26424 <__assert_fail@plt+0x144dc>
   26410:	mvn	r2, #-2147483648	; 0x80000000
   26414:	movw	r3, #51711	; 0xc9ff
   26418:	movt	r3, #15258	; 0x3b9a
   2641c:	strd	r2, [r0]
   26420:	bx	lr
   26424:	vcvt.s32.f64	s15, d0
   26428:	vldr	d6, [pc, #136]	; 264b8 <__assert_fail@plt+0x14570>
   2642c:	movw	r1, #12193	; 0x2fa1
   26430:	movt	r1, #17592	; 0x44b8
   26434:	push	{lr}		; (str lr, [sp, #-4]!)
   26438:	mov	ip, #51712	; 0xca00
   2643c:	movt	ip, #15258	; 0x3b9a
   26440:	vcvt.f64.s32	d5, s15
   26444:	vsub.f64	d0, d0, d5
   26448:	vmul.f64	d0, d0, d6
   2644c:	vcvt.s32.f64	s14, d0
   26450:	vcvt.f64.s32	d6, s14
   26454:	vmov	r3, s14
   26458:	vcmpe.f64	d6, d0
   2645c:	vmrs	APSR_nzcv, fpscr
   26460:	movmi	r2, #1
   26464:	movpl	r2, #0
   26468:	add	r2, r2, r3
   2646c:	asr	r3, r2, #31
   26470:	smull	lr, r1, r1, r2
   26474:	rsb	r3, r3, r1, asr #28
   26478:	vmov	r1, s15
   2647c:	add	r1, r3, r1
   26480:	mls	r3, ip, r3, r2
   26484:	cmp	r3, #0
   26488:	sublt	r1, r1, #1
   2648c:	addlt	r3, r3, ip
   26490:	stm	r0, {r1, r3}
   26494:	pop	{pc}		; (ldr pc, [sp], #4)
   26498:	mov	r2, #-2147483648	; 0x80000000
   2649c:	mov	r3, #0
   264a0:	strd	r2, [r0]
   264a4:	bx	lr
   264a8:	andeq	r0, r0, r0
   264ac:	mvngt	r0, r0
   264b0:	andeq	r0, r0, r0
   264b4:	mvnmi	r0, r0
   264b8:	andeq	r0, r0, r0
   264bc:	bicmi	ip, sp, r5, ror #26
   264c0:	push	{r1, r2, r3}
   264c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   264c8:	strd	r6, [sp, #8]
   264cc:	str	lr, [sp, #16]
   264d0:	sub	sp, sp, #8
   264d4:	ldr	r1, [sp, #28]
   264d8:	add	r2, sp, #32
   264dc:	str	r2, [sp, #4]
   264e0:	cmp	r1, #0
   264e4:	beq	265c0 <__assert_fail@plt+0x14678>
   264e8:	movw	r3, #1030	; 0x406
   264ec:	mov	r6, r0
   264f0:	cmp	r1, r3
   264f4:	beq	265d0 <__assert_fail@plt+0x14688>
   264f8:	cmp	r1, #11
   264fc:	beq	26578 <__assert_fail@plt+0x14630>
   26500:	ble	26558 <__assert_fail@plt+0x14610>
   26504:	movw	r2, #1031	; 0x407
   26508:	cmp	r1, r2
   2650c:	bgt	26594 <__assert_fail@plt+0x1464c>
   26510:	cmp	r1, r3
   26514:	bge	26524 <__assert_fail@plt+0x145dc>
   26518:	movw	r3, #1025	; 0x401
   2651c:	cmp	r1, r3
   26520:	beq	26578 <__assert_fail@plt+0x14630>
   26524:	ldr	r3, [sp, #4]
   26528:	mov	r0, r6
   2652c:	ldr	r2, [r3]
   26530:	bl	11e10 <fcntl64@plt>
   26534:	mov	r4, r0
   26538:	mov	r0, r4
   2653c:	add	sp, sp, #8
   26540:	ldrd	r4, [sp]
   26544:	ldrd	r6, [sp, #8]
   26548:	ldr	lr, [sp, #16]
   2654c:	add	sp, sp, #20
   26550:	add	sp, sp, #12
   26554:	bx	lr
   26558:	cmp	r1, #4
   2655c:	beq	26524 <__assert_fail@plt+0x145dc>
   26560:	bgt	26588 <__assert_fail@plt+0x14640>
   26564:	cmp	r1, #2
   26568:	beq	26524 <__assert_fail@plt+0x145dc>
   2656c:	bgt	26578 <__assert_fail@plt+0x14630>
   26570:	cmp	r1, #1
   26574:	bne	26524 <__assert_fail@plt+0x145dc>
   26578:	mov	r0, r6
   2657c:	bl	11e10 <fcntl64@plt>
   26580:	mov	r4, r0
   26584:	b	26538 <__assert_fail@plt+0x145f0>
   26588:	cmp	r1, #9
   2658c:	bne	26524 <__assert_fail@plt+0x145dc>
   26590:	b	26578 <__assert_fail@plt+0x14630>
   26594:	movw	r3, #1033	; 0x409
   26598:	cmp	r1, r3
   2659c:	beq	26524 <__assert_fail@plt+0x145dc>
   265a0:	blt	26578 <__assert_fail@plt+0x14630>
   265a4:	movw	r3, #1034	; 0x40a
   265a8:	cmp	r1, r3
   265ac:	bne	26524 <__assert_fail@plt+0x145dc>
   265b0:	mov	r0, r6
   265b4:	bl	11e10 <fcntl64@plt>
   265b8:	mov	r4, r0
   265bc:	b	26538 <__assert_fail@plt+0x145f0>
   265c0:	ldr	r2, [sp, #32]
   265c4:	bl	11e10 <fcntl64@plt>
   265c8:	mov	r4, r0
   265cc:	b	26538 <__assert_fail@plt+0x145f0>
   265d0:	movw	r5, #43512	; 0xa9f8
   265d4:	movt	r5, #3
   265d8:	ldr	r7, [r2]
   265dc:	add	r2, sp, #36	; 0x24
   265e0:	ldr	r3, [r5]
   265e4:	str	r2, [sp, #4]
   265e8:	mov	r2, r7
   265ec:	cmp	r3, #0
   265f0:	blt	2660c <__assert_fail@plt+0x146c4>
   265f4:	bl	11e10 <fcntl64@plt>
   265f8:	subs	r4, r0, #0
   265fc:	blt	26674 <__assert_fail@plt+0x1472c>
   26600:	mov	r3, #1
   26604:	str	r3, [r5]
   26608:	b	26538 <__assert_fail@plt+0x145f0>
   2660c:	mov	r1, #0
   26610:	bl	11e10 <fcntl64@plt>
   26614:	subs	r4, r0, #0
   26618:	blt	26538 <__assert_fail@plt+0x145f0>
   2661c:	ldr	r3, [r5]
   26620:	cmn	r3, #1
   26624:	bne	26538 <__assert_fail@plt+0x145f0>
   26628:	mov	r1, #1
   2662c:	mov	r0, r4
   26630:	bl	11e10 <fcntl64@plt>
   26634:	subs	r2, r0, #0
   26638:	blt	26654 <__assert_fail@plt+0x1470c>
   2663c:	orr	r2, r2, #1
   26640:	mov	r1, #2
   26644:	mov	r0, r4
   26648:	bl	11e10 <fcntl64@plt>
   2664c:	cmn	r0, #1
   26650:	bne	26538 <__assert_fail@plt+0x145f0>
   26654:	bl	11d74 <__errno_location@plt>
   26658:	mov	r5, r0
   2665c:	mov	r0, r4
   26660:	ldr	r6, [r5]
   26664:	mvn	r4, #0
   26668:	bl	11f30 <close@plt>
   2666c:	str	r6, [r5]
   26670:	b	26538 <__assert_fail@plt+0x145f0>
   26674:	bl	11d74 <__errno_location@plt>
   26678:	ldr	r3, [r0]
   2667c:	cmp	r3, #22
   26680:	bne	26600 <__assert_fail@plt+0x146b8>
   26684:	mov	r2, r7
   26688:	mov	r0, r6
   2668c:	mov	r1, #0
   26690:	bl	11e10 <fcntl64@plt>
   26694:	subs	r4, r0, #0
   26698:	mvnge	r3, #0
   2669c:	strge	r3, [r5]
   266a0:	bge	26628 <__assert_fail@plt+0x146e0>
   266a4:	b	26538 <__assert_fail@plt+0x145f0>
   266a8:	cmp	r0, #2
   266ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   266b0:	mov	r4, r0
   266b4:	strd	r6, [sp, #8]
   266b8:	str	r8, [sp, #16]
   266bc:	str	lr, [sp, #20]
   266c0:	bls	266dc <__assert_fail@plt+0x14794>
   266c4:	mov	r0, r4
   266c8:	ldrd	r4, [sp]
   266cc:	ldrd	r6, [sp, #8]
   266d0:	ldr	r8, [sp, #16]
   266d4:	add	sp, sp, #20
   266d8:	pop	{pc}		; (ldr pc, [sp], #4)
   266dc:	bl	26704 <__assert_fail@plt+0x147bc>
   266e0:	mov	r7, r0
   266e4:	bl	11d74 <__errno_location@plt>
   266e8:	mov	r5, r0
   266ec:	mov	r0, r4
   266f0:	ldr	r6, [r5]
   266f4:	mov	r4, r7
   266f8:	bl	11f30 <close@plt>
   266fc:	str	r6, [r5]
   26700:	b	266c4 <__assert_fail@plt+0x1477c>
   26704:	ands	r1, r1, #524288	; 0x80000
   26708:	movw	r3, #1030	; 0x406
   2670c:	movne	r1, r3
   26710:	mov	r2, #3
   26714:	b	264c0 <__assert_fail@plt+0x14578>
   26718:	strd	r4, [sp, #-16]!
   2671c:	mov	r5, r1
   26720:	str	r6, [sp, #8]
   26724:	str	lr, [sp, #12]
   26728:	bl	11e94 <fopen64@plt>
   2672c:	subs	r4, r0, #0
   26730:	beq	26740 <__assert_fail@plt+0x147f8>
   26734:	bl	11dc8 <fileno@plt>
   26738:	cmp	r0, #2
   2673c:	bls	26754 <__assert_fail@plt+0x1480c>
   26740:	mov	r0, r4
   26744:	ldrd	r4, [sp]
   26748:	ldr	r6, [sp, #8]
   2674c:	add	sp, sp, #12
   26750:	pop	{pc}		; (ldr pc, [sp], #4)
   26754:	bl	26f44 <_obstack_memory_used@@Base+0x6c>
   26758:	subs	r6, r0, #0
   2675c:	blt	267a4 <__assert_fail@plt+0x1485c>
   26760:	mov	r0, r4
   26764:	bl	1cafc <__assert_fail@plt+0xabb4>
   26768:	cmp	r0, #0
   2676c:	bne	26784 <__assert_fail@plt+0x1483c>
   26770:	mov	r1, r5
   26774:	mov	r0, r6
   26778:	bl	119fc <fdopen@plt>
   2677c:	subs	r4, r0, #0
   26780:	bne	26740 <__assert_fail@plt+0x147f8>
   26784:	bl	11d74 <__errno_location@plt>
   26788:	mov	r5, r0
   2678c:	mov	r0, r6
   26790:	ldr	r6, [r5]
   26794:	mov	r4, #0
   26798:	bl	11f30 <close@plt>
   2679c:	str	r6, [r5]
   267a0:	b	26740 <__assert_fail@plt+0x147f8>
   267a4:	bl	11d74 <__errno_location@plt>
   267a8:	mov	r5, r0
   267ac:	mov	r0, r4
   267b0:	ldr	r6, [r5]
   267b4:	mov	r4, #0
   267b8:	bl	1cafc <__assert_fail@plt+0xabb4>
   267bc:	str	r6, [r5]
   267c0:	b	26740 <__assert_fail@plt+0x147f8>
   267c4:	mov	r0, #14
   267c8:	str	r4, [sp, #-8]!
   267cc:	str	lr, [sp, #4]
   267d0:	bl	11e70 <nl_langinfo@plt>
   267d4:	cmp	r0, #0
   267d8:	beq	267fc <__assert_fail@plt+0x148b4>
   267dc:	ldrb	r2, [r0]
   267e0:	movw	r3, #40144	; 0x9cd0
   267e4:	movt	r3, #2
   267e8:	ldr	r4, [sp]
   267ec:	add	sp, sp, #4
   267f0:	cmp	r2, #0
   267f4:	moveq	r0, r3
   267f8:	pop	{pc}		; (ldr pc, [sp], #4)
   267fc:	ldr	r4, [sp]
   26800:	add	sp, sp, #4
   26804:	movw	r0, #40144	; 0x9cd0
   26808:	movt	r0, #2
   2680c:	pop	{pc}		; (ldr pc, [sp], #4)
   26810:	strd	r4, [sp, #-20]!	; 0xffffffec
   26814:	mov	r5, r2
   26818:	strd	r6, [sp, #8]
   2681c:	subs	r6, r0, #0
   26820:	mov	r7, r1
   26824:	str	lr, [sp, #16]
   26828:	sub	sp, sp, #12
   2682c:	addeq	r6, sp, #4
   26830:	mov	r0, r6
   26834:	bl	11c84 <mbrtowc@plt>
   26838:	cmp	r5, #0
   2683c:	cmnne	r0, #3
   26840:	mov	r4, r0
   26844:	bhi	26860 <__assert_fail@plt+0x14918>
   26848:	mov	r0, r4
   2684c:	add	sp, sp, #12
   26850:	ldrd	r4, [sp]
   26854:	ldrd	r6, [sp, #8]
   26858:	add	sp, sp, #16
   2685c:	pop	{pc}		; (ldr pc, [sp], #4)
   26860:	mov	r0, #0
   26864:	bl	1d3cc <__assert_fail@plt+0xb484>
   26868:	cmp	r0, #0
   2686c:	bne	26848 <__assert_fail@plt+0x14900>
   26870:	ldrb	r3, [r7]
   26874:	mov	r4, #1
   26878:	str	r3, [r6]
   2687c:	b	26848 <__assert_fail@plt+0x14900>
   26880:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26884:	mov	r4, r3
   26888:	mov	r5, r2
   2688c:	strd	r6, [sp, #8]
   26890:	mov	r6, r1
   26894:	strd	r8, [sp, #16]
   26898:	strd	sl, [sp, #24]
   2689c:	mov	sl, r0
   268a0:	str	lr, [sp, #32]
   268a4:	sub	sp, sp, #20
   268a8:	bl	11d74 <__errno_location@plt>
   268ac:	cmp	r6, r4
   268b0:	mov	r8, r0
   268b4:	bne	268d4 <__assert_fail@plt+0x1498c>
   268b8:	mov	r2, r6
   268bc:	mov	r1, r5
   268c0:	mov	r0, sl
   268c4:	bl	11b40 <memcmp@plt>
   268c8:	subs	r2, r0, #0
   268cc:	streq	r2, [r8]
   268d0:	beq	2696c <__assert_fail@plt+0x14a24>
   268d4:	add	r3, sl, r6
   268d8:	mov	r2, #0
   268dc:	ldrb	fp, [sl, r6]
   268e0:	mov	r9, r2
   268e4:	add	r7, r6, #1
   268e8:	str	r3, [sp, #4]
   268ec:	ldrb	r3, [r5, r4]
   268f0:	strb	r2, [sl, r6]
   268f4:	strb	r2, [r5, r4]
   268f8:	str	r3, [sp, #12]
   268fc:	add	r3, r5, r4
   26900:	add	r4, r4, #1
   26904:	str	r3, [sp, #8]
   26908:	b	2693c <__assert_fail@plt+0x149f4>
   2690c:	bl	11d50 <strlen@plt>
   26910:	add	r6, r0, #1
   26914:	mov	r0, r5
   26918:	bl	11d50 <strlen@plt>
   2691c:	add	r0, r0, #1
   26920:	subs	r7, r7, r6
   26924:	add	sl, sl, r6
   26928:	add	r5, r5, r0
   2692c:	sub	r4, r4, r0
   26930:	beq	2698c <__assert_fail@plt+0x14a44>
   26934:	cmp	r4, #0
   26938:	beq	2699c <__assert_fail@plt+0x14a54>
   2693c:	mov	r1, r5
   26940:	mov	r0, sl
   26944:	str	r9, [r8]
   26948:	bl	11ca8 <strcoll@plt>
   2694c:	subs	r2, r0, #0
   26950:	mov	r0, sl
   26954:	beq	2690c <__assert_fail@plt+0x149c4>
   26958:	ldr	r3, [sp, #4]
   2695c:	ldr	r1, [sp, #12]
   26960:	strb	fp, [r3]
   26964:	ldr	r3, [sp, #8]
   26968:	strb	r1, [r3]
   2696c:	mov	r0, r2
   26970:	add	sp, sp, #20
   26974:	ldrd	r4, [sp]
   26978:	ldrd	r6, [sp, #8]
   2697c:	ldrd	r8, [sp, #16]
   26980:	ldrd	sl, [sp, #24]
   26984:	add	sp, sp, #32
   26988:	pop	{pc}		; (ldr pc, [sp], #4)
   2698c:	adds	r4, r4, #0
   26990:	movne	r4, #1
   26994:	rsb	r2, r4, #0
   26998:	b	26958 <__assert_fail@plt+0x14a10>
   2699c:	mov	r2, #1
   269a0:	b	26958 <__assert_fail@plt+0x14a10>
   269a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   269a8:	mov	r5, r1
   269ac:	mov	r4, r0
   269b0:	strd	r6, [sp, #8]
   269b4:	mov	r7, r3
   269b8:	mov	r6, r2
   269bc:	strd	r8, [sp, #16]
   269c0:	str	sl, [sp, #24]
   269c4:	str	lr, [sp, #28]
   269c8:	bl	11d74 <__errno_location@plt>
   269cc:	cmp	r5, r7
   269d0:	mov	r9, r0
   269d4:	bne	269f4 <__assert_fail@plt+0x14aac>
   269d8:	mov	r2, r5
   269dc:	mov	r1, r6
   269e0:	mov	r0, r4
   269e4:	bl	11b40 <memcmp@plt>
   269e8:	subs	r3, r0, #0
   269ec:	streq	r3, [r9]
   269f0:	beq	26a48 <__assert_fail@plt+0x14b00>
   269f4:	mov	sl, #0
   269f8:	b	26a2c <__assert_fail@plt+0x14ae4>
   269fc:	bl	11d50 <strlen@plt>
   26a00:	add	r8, r0, #1
   26a04:	mov	r0, r6
   26a08:	bl	11d50 <strlen@plt>
   26a0c:	add	r0, r0, #1
   26a10:	subs	r5, r5, r8
   26a14:	add	r4, r4, r8
   26a18:	add	r6, r6, r0
   26a1c:	sub	r7, r7, r0
   26a20:	beq	26a64 <__assert_fail@plt+0x14b1c>
   26a24:	cmp	r7, #0
   26a28:	beq	26a74 <__assert_fail@plt+0x14b2c>
   26a2c:	mov	r1, r6
   26a30:	mov	r0, r4
   26a34:	str	sl, [r9]
   26a38:	bl	11ca8 <strcoll@plt>
   26a3c:	subs	r3, r0, #0
   26a40:	mov	r0, r4
   26a44:	beq	269fc <__assert_fail@plt+0x14ab4>
   26a48:	ldrd	r4, [sp]
   26a4c:	mov	r0, r3
   26a50:	ldrd	r6, [sp, #8]
   26a54:	ldrd	r8, [sp, #16]
   26a58:	ldr	sl, [sp, #24]
   26a5c:	add	sp, sp, #28
   26a60:	pop	{pc}		; (ldr pc, [sp], #4)
   26a64:	adds	r7, r7, #0
   26a68:	movne	r7, #1
   26a6c:	rsb	r3, r7, #0
   26a70:	b	26a48 <__assert_fail@plt+0x14b00>
   26a74:	mov	r3, #1
   26a78:	b	26a48 <__assert_fail@plt+0x14b00>
   26a7c:	movw	r3, #41672	; 0xa2c8
   26a80:	movt	r3, #3
   26a84:	str	r4, [sp, #-8]!
   26a88:	ldr	r4, [r3]
   26a8c:	mov	r2, #5
   26a90:	movw	r1, #39824	; 0x9b90
   26a94:	movt	r1, #2
   26a98:	mov	r0, #0
   26a9c:	str	lr, [sp, #4]
   26aa0:	bl	11b58 <dcgettext@plt>
   26aa4:	mov	r3, r0
   26aa8:	movw	r2, #39036	; 0x987c
   26aac:	movt	r2, #2
   26ab0:	mov	r1, #1
   26ab4:	mov	r0, r4
   26ab8:	bl	11dd4 <__fprintf_chk@plt>
   26abc:	movw	r3, #41584	; 0xa270
   26ac0:	movt	r3, #3
   26ac4:	ldr	r0, [r3]
   26ac8:	bl	11d38 <exit@plt>

00026acc <_obstack_begin@@Base>:
   26acc:	strd	r4, [sp, #-16]!
   26ad0:	subs	r5, r2, #0
   26ad4:	mov	r4, r0
   26ad8:	ldrb	r2, [r0, #40]	; 0x28
   26adc:	moveq	r5, #8
   26ae0:	str	r6, [sp, #8]
   26ae4:	subne	r6, r5, #1
   26ae8:	moveq	r6, #7
   26aec:	ldr	r0, [sp, #16]
   26af0:	cmp	r1, #0
   26af4:	str	lr, [sp, #12]
   26af8:	str	r6, [r4, #24]
   26afc:	bfc	r2, #0, #1
   26b00:	str	r3, [r4, #28]
   26b04:	str	r0, [r4, #32]
   26b08:	movw	r0, #4072	; 0xfe8
   26b0c:	strb	r2, [r4, #40]	; 0x28
   26b10:	moveq	r1, r0
   26b14:	ldrb	r2, [r4, #40]	; 0x28
   26b18:	str	r1, [r4]
   26b1c:	tst	r2, #1
   26b20:	beq	26b8c <_obstack_begin@@Base+0xc0>
   26b24:	ldr	r0, [r4, #36]	; 0x24
   26b28:	blx	r3
   26b2c:	mov	r3, r0
   26b30:	cmp	r3, #0
   26b34:	str	r3, [r4, #4]
   26b38:	beq	26b9c <_obstack_begin@@Base+0xd0>
   26b3c:	ldrb	lr, [r4, #40]	; 0x28
   26b40:	add	r1, r3, #8
   26b44:	rsb	r2, r5, #0
   26b48:	add	r1, r1, r6
   26b4c:	mov	r5, #0
   26b50:	ldr	ip, [r4]
   26b54:	and	r2, r2, r1
   26b58:	mov	r0, #1
   26b5c:	ldr	r6, [sp, #8]
   26b60:	bic	lr, lr, #6
   26b64:	str	r2, [r4, #8]
   26b68:	str	r2, [r4, #12]
   26b6c:	add	r2, r3, ip
   26b70:	str	r2, [r3]
   26b74:	str	r2, [r4, #16]
   26b78:	str	r5, [r3, #4]
   26b7c:	strb	lr, [r4, #40]	; 0x28
   26b80:	ldrd	r4, [sp]
   26b84:	add	sp, sp, #12
   26b88:	pop	{pc}		; (ldr pc, [sp], #4)
   26b8c:	mov	r0, r1
   26b90:	blx	r3
   26b94:	mov	r3, r0
   26b98:	b	26b30 <_obstack_begin@@Base+0x64>
   26b9c:	movw	r3, #41652	; 0xa2b4
   26ba0:	movt	r3, #3
   26ba4:	ldr	r3, [r3]
   26ba8:	blx	r3

00026bac <_obstack_begin_1@@Base>:
   26bac:	strd	r4, [sp, #-16]!
   26bb0:	subs	r5, r2, #0
   26bb4:	mov	r4, r0
   26bb8:	ldrb	r2, [r0, #40]	; 0x28
   26bbc:	moveq	r5, #8
   26bc0:	str	r6, [sp, #8]
   26bc4:	subne	r6, r5, #1
   26bc8:	moveq	r6, #7
   26bcc:	ldr	ip, [sp, #16]
   26bd0:	cmp	r1, #0
   26bd4:	str	lr, [sp, #12]
   26bd8:	str	r3, [r0, #28]
   26bdc:	orr	r2, r2, #1
   26be0:	str	ip, [r0, #32]
   26be4:	movw	ip, #4072	; 0xfe8
   26be8:	strb	r2, [r0, #40]	; 0x28
   26bec:	moveq	r1, ip
   26bf0:	ldrb	r2, [r4, #40]	; 0x28
   26bf4:	str	r1, [r4]
   26bf8:	ldr	r0, [sp, #20]
   26bfc:	str	r6, [r4, #24]
   26c00:	tst	r2, #1
   26c04:	str	r0, [r4, #36]	; 0x24
   26c08:	beq	26c70 <_obstack_begin_1@@Base+0xc4>
   26c0c:	blx	r3
   26c10:	mov	r3, r0
   26c14:	cmp	r3, #0
   26c18:	str	r3, [r4, #4]
   26c1c:	beq	26c80 <_obstack_begin_1@@Base+0xd4>
   26c20:	ldrb	lr, [r4, #40]	; 0x28
   26c24:	add	r1, r3, #8
   26c28:	rsb	r2, r5, #0
   26c2c:	add	r1, r1, r6
   26c30:	mov	r5, #0
   26c34:	ldr	ip, [r4]
   26c38:	and	r2, r2, r1
   26c3c:	mov	r0, #1
   26c40:	ldr	r6, [sp, #8]
   26c44:	bic	lr, lr, #6
   26c48:	str	r2, [r4, #8]
   26c4c:	str	r2, [r4, #12]
   26c50:	add	r2, r3, ip
   26c54:	str	r2, [r3]
   26c58:	str	r2, [r4, #16]
   26c5c:	str	r5, [r3, #4]
   26c60:	strb	lr, [r4, #40]	; 0x28
   26c64:	ldrd	r4, [sp]
   26c68:	add	sp, sp, #12
   26c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   26c70:	mov	r0, r1
   26c74:	blx	r3
   26c78:	mov	r3, r0
   26c7c:	b	26c14 <_obstack_begin_1@@Base+0x68>
   26c80:	movw	r3, #41652	; 0xa2b4
   26c84:	movt	r3, #3
   26c88:	ldr	r3, [r3]
   26c8c:	blx	r3

00026c90 <_obstack_newchunk@@Base>:
   26c90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26c94:	mov	r4, r0
   26c98:	ldr	ip, [r0]
   26c9c:	ldr	r2, [r0, #8]
   26ca0:	ldr	r3, [r0, #24]
   26ca4:	strd	r6, [sp, #8]
   26ca8:	ldr	r7, [r0, #4]
   26cac:	str	r8, [sp, #16]
   26cb0:	ldr	r6, [r0, #12]
   26cb4:	str	lr, [sp, #20]
   26cb8:	sub	r6, r6, r2
   26cbc:	adds	r1, r6, r1
   26cc0:	movcs	r0, #1
   26cc4:	movcc	r0, #0
   26cc8:	adds	r3, r3, r1
   26ccc:	eor	r0, r0, #1
   26cd0:	add	r5, r3, r6, lsr #3
   26cd4:	movcs	r2, #1
   26cd8:	movcc	r2, #0
   26cdc:	cmp	r3, ip
   26ce0:	eor	r2, r2, #1
   26ce4:	add	r5, r5, #100	; 0x64
   26ce8:	movcc	r3, ip
   26cec:	cmp	r3, r5
   26cf0:	movcs	r5, r3
   26cf4:	tst	r0, r2
   26cf8:	beq	26dec <_obstack_newchunk@@Base+0x15c>
   26cfc:	ldrb	r3, [r4, #40]	; 0x28
   26d00:	ldr	r2, [r4, #28]
   26d04:	tst	r3, #1
   26d08:	bne	26da8 <_obstack_newchunk@@Base+0x118>
   26d0c:	mov	r0, r5
   26d10:	blx	r2
   26d14:	mov	r8, r0
   26d18:	cmp	r8, #0
   26d1c:	beq	26dec <_obstack_newchunk@@Base+0x15c>
   26d20:	add	r3, r8, r5
   26d24:	mov	r5, r8
   26d28:	str	r8, [r4, #4]
   26d2c:	ldr	r0, [r4, #24]
   26d30:	mov	r2, r6
   26d34:	ldr	r1, [r4, #8]
   26d38:	str	r7, [r8, #4]
   26d3c:	str	r3, [r4, #16]
   26d40:	str	r3, [r5], #8
   26d44:	add	r5, r5, r0
   26d48:	bic	r5, r5, r0
   26d4c:	mov	r0, r5
   26d50:	bl	11ac8 <memcpy@plt>
   26d54:	ldrb	r2, [r4, #40]	; 0x28
   26d58:	tst	r2, #2
   26d5c:	bne	26d7c <_obstack_newchunk@@Base+0xec>
   26d60:	ldr	r0, [r4, #8]
   26d64:	add	r3, r7, #8
   26d68:	ldr	r1, [r4, #24]
   26d6c:	add	r3, r3, r1
   26d70:	bic	r3, r3, r1
   26d74:	cmp	r0, r3
   26d78:	beq	26dbc <_obstack_newchunk@@Base+0x12c>
   26d7c:	ldrb	r3, [r4, #40]	; 0x28
   26d80:	add	r6, r5, r6
   26d84:	ldr	r8, [sp, #16]
   26d88:	str	r5, [r4, #8]
   26d8c:	str	r6, [r4, #12]
   26d90:	bfc	r3, #1, #1
   26d94:	ldrd	r6, [sp, #8]
   26d98:	strb	r3, [r4, #40]	; 0x28
   26d9c:	ldrd	r4, [sp]
   26da0:	add	sp, sp, #20
   26da4:	pop	{pc}		; (ldr pc, [sp], #4)
   26da8:	mov	r1, r5
   26dac:	ldr	r0, [r4, #36]	; 0x24
   26db0:	blx	r2
   26db4:	mov	r8, r0
   26db8:	b	26d18 <_obstack_newchunk@@Base+0x88>
   26dbc:	ldr	r3, [r7, #4]
   26dc0:	tst	r2, #1
   26dc4:	ldr	r2, [r4, #32]
   26dc8:	str	r3, [r8, #4]
   26dcc:	beq	26de0 <_obstack_newchunk@@Base+0x150>
   26dd0:	mov	r1, r7
   26dd4:	ldr	r0, [r4, #36]	; 0x24
   26dd8:	blx	r2
   26ddc:	b	26d7c <_obstack_newchunk@@Base+0xec>
   26de0:	mov	r0, r7
   26de4:	blx	r2
   26de8:	b	26d7c <_obstack_newchunk@@Base+0xec>
   26dec:	movw	r3, #41652	; 0xa2b4
   26df0:	movt	r3, #3
   26df4:	ldr	r3, [r3]
   26df8:	blx	r3

00026dfc <_obstack_allocated_p@@Base>:
   26dfc:	ldr	r0, [r0, #4]
   26e00:	cmp	r0, #0
   26e04:	beq	26e34 <_obstack_allocated_p@@Base+0x38>
   26e08:	cmp	r1, r0
   26e0c:	bls	26e1c <_obstack_allocated_p@@Base+0x20>
   26e10:	ldr	r3, [r0]
   26e14:	cmp	r3, r1
   26e18:	bcs	26e2c <_obstack_allocated_p@@Base+0x30>
   26e1c:	ldr	r0, [r0, #4]
   26e20:	cmp	r0, #0
   26e24:	bne	26e08 <_obstack_allocated_p@@Base+0xc>
   26e28:	bx	lr
   26e2c:	mov	r0, #1
   26e30:	bx	lr
   26e34:	bx	lr

00026e38 <_obstack_free@@Base>:
   26e38:	strd	r4, [sp, #-16]!
   26e3c:	str	r6, [sp, #8]
   26e40:	mov	r6, r1
   26e44:	ldr	r1, [r0, #4]
   26e48:	str	lr, [sp, #12]
   26e4c:	cmp	r1, #0
   26e50:	movne	r4, r0
   26e54:	bne	26e7c <_obstack_free@@Base+0x44>
   26e58:	b	26ecc <_obstack_free@@Base+0x94>
   26e5c:	ldr	r0, [r4, #36]	; 0x24
   26e60:	blx	r3
   26e64:	ldrb	r3, [r4, #40]	; 0x28
   26e68:	cmp	r5, #0
   26e6c:	orr	r3, r3, #2
   26e70:	strb	r3, [r4, #40]	; 0x28
   26e74:	beq	26ecc <_obstack_free@@Base+0x94>
   26e78:	mov	r1, r5
   26e7c:	cmp	r1, r6
   26e80:	bcs	26e90 <_obstack_free@@Base+0x58>
   26e84:	ldr	r3, [r1]
   26e88:	cmp	r3, r6
   26e8c:	bcs	26eb0 <_obstack_free@@Base+0x78>
   26e90:	ldrb	r2, [r4, #40]	; 0x28
   26e94:	ldr	r5, [r1, #4]
   26e98:	ldr	r3, [r4, #32]
   26e9c:	tst	r2, #1
   26ea0:	bne	26e5c <_obstack_free@@Base+0x24>
   26ea4:	mov	r0, r1
   26ea8:	blx	r3
   26eac:	b	26e64 <_obstack_free@@Base+0x2c>
   26eb0:	stmib	r4, {r1, r6}
   26eb4:	str	r6, [r4, #12]
   26eb8:	str	r3, [r4, #16]
   26ebc:	ldrd	r4, [sp]
   26ec0:	ldr	r6, [sp, #8]
   26ec4:	add	sp, sp, #12
   26ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   26ecc:	cmp	r6, #0
   26ed0:	beq	26ebc <_obstack_free@@Base+0x84>
   26ed4:	bl	11f24 <abort@plt>

00026ed8 <_obstack_memory_used@@Base>:
   26ed8:	ldr	r3, [r0, #4]
   26edc:	cmp	r3, #0
   26ee0:	beq	26f04 <_obstack_memory_used@@Base+0x2c>
   26ee4:	mov	r0, #0
   26ee8:	ldr	r2, [r3]
   26eec:	sub	r2, r2, r3
   26ef0:	ldr	r3, [r3, #4]
   26ef4:	add	r0, r0, r2
   26ef8:	cmp	r3, #0
   26efc:	bne	26ee8 <_obstack_memory_used@@Base+0x10>
   26f00:	bx	lr
   26f04:	mov	r0, r3
   26f08:	bx	lr
   26f0c:	umull	r2, r3, r1, r2
   26f10:	cmp	r3, #0
   26f14:	bne	26f20 <_obstack_memory_used@@Base+0x48>
   26f18:	mov	r1, r2
   26f1c:	b	2630c <__assert_fail@plt+0x143c4>
   26f20:	str	r4, [sp, #-8]!
   26f24:	str	lr, [sp, #4]
   26f28:	bl	11d74 <__errno_location@plt>
   26f2c:	mov	r3, #12
   26f30:	ldr	r4, [sp]
   26f34:	add	sp, sp, #4
   26f38:	str	r3, [r0]
   26f3c:	mov	r0, #0
   26f40:	pop	{pc}		; (ldr pc, [sp], #4)
   26f44:	mov	r2, #3
   26f48:	mov	r1, #0
   26f4c:	b	264c0 <__assert_fail@plt+0x14578>
   26f50:	eor	r1, r1, #-2147483648	; 0x80000000
   26f54:	b	26f5c <_obstack_memory_used@@Base+0x84>
   26f58:	eor	r3, r3, #-2147483648	; 0x80000000
   26f5c:	push	{r4, r5, lr}
   26f60:	lsl	r4, r1, #1
   26f64:	lsl	r5, r3, #1
   26f68:	teq	r4, r5
   26f6c:	teqeq	r0, r2
   26f70:	orrsne	ip, r4, r0
   26f74:	orrsne	ip, r5, r2
   26f78:	mvnsne	ip, r4, asr #21
   26f7c:	mvnsne	ip, r5, asr #21
   26f80:	beq	2716c <_obstack_memory_used@@Base+0x294>
   26f84:	lsr	r4, r4, #21
   26f88:	rsbs	r5, r4, r5, lsr #21
   26f8c:	rsblt	r5, r5, #0
   26f90:	ble	26fb0 <_obstack_memory_used@@Base+0xd8>
   26f94:	add	r4, r4, r5
   26f98:	eor	r2, r0, r2
   26f9c:	eor	r3, r1, r3
   26fa0:	eor	r0, r2, r0
   26fa4:	eor	r1, r3, r1
   26fa8:	eor	r2, r0, r2
   26fac:	eor	r3, r1, r3
   26fb0:	cmp	r5, #54	; 0x36
   26fb4:	pophi	{r4, r5, pc}
   26fb8:	tst	r1, #-2147483648	; 0x80000000
   26fbc:	lsl	r1, r1, #12
   26fc0:	mov	ip, #1048576	; 0x100000
   26fc4:	orr	r1, ip, r1, lsr #12
   26fc8:	beq	26fd4 <_obstack_memory_used@@Base+0xfc>
   26fcc:	rsbs	r0, r0, #0
   26fd0:	rsc	r1, r1, #0
   26fd4:	tst	r3, #-2147483648	; 0x80000000
   26fd8:	lsl	r3, r3, #12
   26fdc:	orr	r3, ip, r3, lsr #12
   26fe0:	beq	26fec <_obstack_memory_used@@Base+0x114>
   26fe4:	rsbs	r2, r2, #0
   26fe8:	rsc	r3, r3, #0
   26fec:	teq	r4, r5
   26ff0:	beq	27154 <_obstack_memory_used@@Base+0x27c>
   26ff4:	sub	r4, r4, #1
   26ff8:	rsbs	lr, r5, #32
   26ffc:	blt	27018 <_obstack_memory_used@@Base+0x140>
   27000:	lsl	ip, r2, lr
   27004:	adds	r0, r0, r2, lsr r5
   27008:	adc	r1, r1, #0
   2700c:	adds	r0, r0, r3, lsl lr
   27010:	adcs	r1, r1, r3, asr r5
   27014:	b	27034 <_obstack_memory_used@@Base+0x15c>
   27018:	sub	r5, r5, #32
   2701c:	add	lr, lr, #32
   27020:	cmp	r2, #1
   27024:	lsl	ip, r3, lr
   27028:	orrcs	ip, ip, #2
   2702c:	adds	r0, r0, r3, asr r5
   27030:	adcs	r1, r1, r3, asr #31
   27034:	and	r5, r1, #-2147483648	; 0x80000000
   27038:	bpl	27048 <_obstack_memory_used@@Base+0x170>
   2703c:	rsbs	ip, ip, #0
   27040:	rscs	r0, r0, #0
   27044:	rsc	r1, r1, #0
   27048:	cmp	r1, #1048576	; 0x100000
   2704c:	bcc	2708c <_obstack_memory_used@@Base+0x1b4>
   27050:	cmp	r1, #2097152	; 0x200000
   27054:	bcc	27074 <_obstack_memory_used@@Base+0x19c>
   27058:	lsrs	r1, r1, #1
   2705c:	rrxs	r0, r0
   27060:	rrx	ip, ip
   27064:	add	r4, r4, #1
   27068:	lsl	r2, r4, #21
   2706c:	cmn	r2, #4194304	; 0x400000
   27070:	bcs	271cc <_obstack_memory_used@@Base+0x2f4>
   27074:	cmp	ip, #-2147483648	; 0x80000000
   27078:	lsrseq	ip, r0, #1
   2707c:	adcs	r0, r0, #0
   27080:	adc	r1, r1, r4, lsl #20
   27084:	orr	r1, r1, r5
   27088:	pop	{r4, r5, pc}
   2708c:	lsls	ip, ip, #1
   27090:	adcs	r0, r0, r0
   27094:	adc	r1, r1, r1
   27098:	tst	r1, #1048576	; 0x100000
   2709c:	sub	r4, r4, #1
   270a0:	bne	27074 <_obstack_memory_used@@Base+0x19c>
   270a4:	teq	r1, #0
   270a8:	moveq	r1, r0
   270ac:	moveq	r0, #0
   270b0:	clz	r3, r1
   270b4:	addeq	r3, r3, #32
   270b8:	sub	r3, r3, #11
   270bc:	subs	r2, r3, #32
   270c0:	bge	270e4 <_obstack_memory_used@@Base+0x20c>
   270c4:	adds	r2, r2, #12
   270c8:	ble	270e0 <_obstack_memory_used@@Base+0x208>
   270cc:	add	ip, r2, #20
   270d0:	rsb	r2, r2, #12
   270d4:	lsl	r0, r1, ip
   270d8:	lsr	r1, r1, r2
   270dc:	b	270f4 <_obstack_memory_used@@Base+0x21c>
   270e0:	add	r2, r2, #20
   270e4:	rsble	ip, r2, #32
   270e8:	lsl	r1, r1, r2
   270ec:	orrle	r1, r1, r0, lsr ip
   270f0:	lslle	r0, r0, r2
   270f4:	subs	r4, r4, r3
   270f8:	addge	r1, r1, r4, lsl #20
   270fc:	orrge	r1, r1, r5
   27100:	popge	{r4, r5, pc}
   27104:	mvn	r4, r4
   27108:	subs	r4, r4, #31
   2710c:	bge	27148 <_obstack_memory_used@@Base+0x270>
   27110:	adds	r4, r4, #12
   27114:	bgt	27130 <_obstack_memory_used@@Base+0x258>
   27118:	add	r4, r4, #20
   2711c:	rsb	r2, r4, #32
   27120:	lsr	r0, r0, r4
   27124:	orr	r0, r0, r1, lsl r2
   27128:	orr	r1, r5, r1, lsr r4
   2712c:	pop	{r4, r5, pc}
   27130:	rsb	r4, r4, #12
   27134:	rsb	r2, r4, #32
   27138:	lsr	r0, r0, r2
   2713c:	orr	r0, r0, r1, lsl r4
   27140:	mov	r1, r5
   27144:	pop	{r4, r5, pc}
   27148:	lsr	r0, r1, r4
   2714c:	mov	r1, r5
   27150:	pop	{r4, r5, pc}
   27154:	teq	r4, #0
   27158:	eor	r3, r3, #1048576	; 0x100000
   2715c:	eoreq	r1, r1, #1048576	; 0x100000
   27160:	addeq	r4, r4, #1
   27164:	subne	r5, r5, #1
   27168:	b	26ff4 <_obstack_memory_used@@Base+0x11c>
   2716c:	mvns	ip, r4, asr #21
   27170:	mvnsne	ip, r5, asr #21
   27174:	beq	271dc <_obstack_memory_used@@Base+0x304>
   27178:	teq	r4, r5
   2717c:	teqeq	r0, r2
   27180:	beq	27194 <_obstack_memory_used@@Base+0x2bc>
   27184:	orrs	ip, r4, r0
   27188:	moveq	r1, r3
   2718c:	moveq	r0, r2
   27190:	pop	{r4, r5, pc}
   27194:	teq	r1, r3
   27198:	movne	r1, #0
   2719c:	movne	r0, #0
   271a0:	popne	{r4, r5, pc}
   271a4:	lsrs	ip, r4, #21
   271a8:	bne	271bc <_obstack_memory_used@@Base+0x2e4>
   271ac:	lsls	r0, r0, #1
   271b0:	adcs	r1, r1, r1
   271b4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   271b8:	pop	{r4, r5, pc}
   271bc:	adds	r4, r4, #4194304	; 0x400000
   271c0:	addcc	r1, r1, #1048576	; 0x100000
   271c4:	popcc	{r4, r5, pc}
   271c8:	and	r5, r1, #-2147483648	; 0x80000000
   271cc:	orr	r1, r5, #2130706432	; 0x7f000000
   271d0:	orr	r1, r1, #15728640	; 0xf00000
   271d4:	mov	r0, #0
   271d8:	pop	{r4, r5, pc}
   271dc:	mvns	ip, r4, asr #21
   271e0:	movne	r1, r3
   271e4:	movne	r0, r2
   271e8:	mvnseq	ip, r5, asr #21
   271ec:	movne	r3, r1
   271f0:	movne	r2, r0
   271f4:	orrs	r4, r0, r1, lsl #12
   271f8:	orrseq	r5, r2, r3, lsl #12
   271fc:	teqeq	r1, r3
   27200:	orrne	r1, r1, #524288	; 0x80000
   27204:	pop	{r4, r5, pc}
   27208:	teq	r0, #0
   2720c:	moveq	r1, #0
   27210:	bxeq	lr
   27214:	push	{r4, r5, lr}
   27218:	mov	r4, #1024	; 0x400
   2721c:	add	r4, r4, #50	; 0x32
   27220:	mov	r5, #0
   27224:	mov	r1, #0
   27228:	b	270a4 <_obstack_memory_used@@Base+0x1cc>
   2722c:	teq	r0, #0
   27230:	moveq	r1, #0
   27234:	bxeq	lr
   27238:	push	{r4, r5, lr}
   2723c:	mov	r4, #1024	; 0x400
   27240:	add	r4, r4, #50	; 0x32
   27244:	ands	r5, r0, #-2147483648	; 0x80000000
   27248:	rsbmi	r0, r0, #0
   2724c:	mov	r1, #0
   27250:	b	270a4 <_obstack_memory_used@@Base+0x1cc>
   27254:	lsls	r2, r0, #1
   27258:	asr	r1, r2, #3
   2725c:	rrx	r1, r1
   27260:	lsl	r0, r2, #28
   27264:	andsne	r3, r2, #-16777216	; 0xff000000
   27268:	teqne	r3, #-16777216	; 0xff000000
   2726c:	eorne	r1, r1, #939524096	; 0x38000000
   27270:	bxne	lr
   27274:	bics	r2, r2, #-16777216	; 0xff000000
   27278:	bxeq	lr
   2727c:	teq	r3, #-16777216	; 0xff000000
   27280:	orreq	r1, r1, #524288	; 0x80000
   27284:	bxeq	lr
   27288:	push	{r4, r5, lr}
   2728c:	mov	r4, #896	; 0x380
   27290:	and	r5, r1, #-2147483648	; 0x80000000
   27294:	bic	r1, r1, #-2147483648	; 0x80000000
   27298:	b	270a4 <_obstack_memory_used@@Base+0x1cc>
   2729c:	orrs	r2, r0, r1
   272a0:	bxeq	lr
   272a4:	push	{r4, r5, lr}
   272a8:	mov	r5, #0
   272ac:	b	272cc <_obstack_memory_used@@Base+0x3f4>
   272b0:	orrs	r2, r0, r1
   272b4:	bxeq	lr
   272b8:	push	{r4, r5, lr}
   272bc:	ands	r5, r1, #-2147483648	; 0x80000000
   272c0:	bpl	272cc <_obstack_memory_used@@Base+0x3f4>
   272c4:	rsbs	r0, r0, #0
   272c8:	rsc	r1, r1, #0
   272cc:	mov	r4, #1024	; 0x400
   272d0:	add	r4, r4, #50	; 0x32
   272d4:	lsrs	ip, r1, #22
   272d8:	beq	27048 <_obstack_memory_used@@Base+0x170>
   272dc:	mov	r2, #3
   272e0:	lsrs	ip, ip, #3
   272e4:	addne	r2, r2, #3
   272e8:	lsrs	ip, ip, #3
   272ec:	addne	r2, r2, #3
   272f0:	add	r2, r2, ip, lsr #3
   272f4:	rsb	r3, r2, #32
   272f8:	lsl	ip, r0, r3
   272fc:	lsr	r0, r0, r2
   27300:	orr	r0, r0, r1, lsl r3
   27304:	lsr	r1, r1, r2
   27308:	add	r4, r4, r2
   2730c:	b	27048 <_obstack_memory_used@@Base+0x170>
   27310:	cmp	r3, #0
   27314:	cmpeq	r2, #0
   27318:	bne	27330 <_obstack_memory_used@@Base+0x458>
   2731c:	cmp	r1, #0
   27320:	cmpeq	r0, #0
   27324:	mvnne	r1, #0
   27328:	mvnne	r0, #0
   2732c:	b	2734c <_obstack_memory_used@@Base+0x474>
   27330:	sub	sp, sp, #8
   27334:	push	{sp, lr}
   27338:	bl	273a0 <_obstack_memory_used@@Base+0x4c8>
   2733c:	ldr	lr, [sp, #4]
   27340:	add	sp, sp, #8
   27344:	pop	{r2, r3}
   27348:	bx	lr
   2734c:	push	{r1, lr}
   27350:	mov	r0, #8
   27354:	bl	11a20 <raise@plt>
   27358:	pop	{r1, pc}
   2735c:	andeq	r0, r0, r0
   27360:	vmov	d6, r0, r1
   27364:	vldr	d7, [pc, #36]	; 27390 <_obstack_memory_used@@Base+0x4b8>
   27368:	vldr	d5, [pc, #40]	; 27398 <_obstack_memory_used@@Base+0x4c0>
   2736c:	vmul.f64	d7, d6, d7
   27370:	vcvt.u32.f64	s14, d7
   27374:	vcvt.f64.u32	d4, s14
   27378:	vmov	r1, s14
   2737c:	vmls.f64	d6, d4, d5
   27380:	vcvt.u32.f64	s15, d6
   27384:	vmov	r0, s15
   27388:	bx	lr
   2738c:	nop			; (mov r0, r0)
   27390:	andeq	r0, r0, r0
   27394:	ldclcc	0, cr0, [r0]
   27398:	andeq	r0, r0, r0
   2739c:	mvnsmi	r0, r0
   273a0:	cmp	r1, r3
   273a4:	cmpeq	r0, r2
   273a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273ac:	mov	r4, r0
   273b0:	movcc	r0, #0
   273b4:	mov	r5, r1
   273b8:	ldr	lr, [sp, #36]	; 0x24
   273bc:	movcc	r1, r0
   273c0:	bcc	274bc <_obstack_memory_used@@Base+0x5e4>
   273c4:	cmp	r3, #0
   273c8:	clzeq	ip, r2
   273cc:	clzne	ip, r3
   273d0:	addeq	ip, ip, #32
   273d4:	cmp	r5, #0
   273d8:	clzeq	r1, r4
   273dc:	addeq	r1, r1, #32
   273e0:	clzne	r1, r5
   273e4:	sub	ip, ip, r1
   273e8:	sub	sl, ip, #32
   273ec:	lsl	r9, r3, ip
   273f0:	rsb	fp, ip, #32
   273f4:	orr	r9, r9, r2, lsl sl
   273f8:	orr	r9, r9, r2, lsr fp
   273fc:	lsl	r8, r2, ip
   27400:	cmp	r5, r9
   27404:	cmpeq	r4, r8
   27408:	movcc	r0, #0
   2740c:	movcc	r1, r0
   27410:	bcc	2742c <_obstack_memory_used@@Base+0x554>
   27414:	mov	r0, #1
   27418:	subs	r4, r4, r8
   2741c:	lsl	r1, r0, sl
   27420:	orr	r1, r1, r0, lsr fp
   27424:	lsl	r0, r0, ip
   27428:	sbc	r5, r5, r9
   2742c:	cmp	ip, #0
   27430:	beq	274bc <_obstack_memory_used@@Base+0x5e4>
   27434:	lsr	r6, r8, #1
   27438:	orr	r6, r6, r9, lsl #31
   2743c:	lsr	r7, r9, #1
   27440:	mov	r2, ip
   27444:	b	27468 <_obstack_memory_used@@Base+0x590>
   27448:	subs	r3, r4, r6
   2744c:	sbc	r8, r5, r7
   27450:	adds	r3, r3, r3
   27454:	adc	r8, r8, r8
   27458:	adds	r4, r3, #1
   2745c:	adc	r5, r8, #0
   27460:	subs	r2, r2, #1
   27464:	beq	27484 <_obstack_memory_used@@Base+0x5ac>
   27468:	cmp	r5, r7
   2746c:	cmpeq	r4, r6
   27470:	bcs	27448 <_obstack_memory_used@@Base+0x570>
   27474:	adds	r4, r4, r4
   27478:	adc	r5, r5, r5
   2747c:	subs	r2, r2, #1
   27480:	bne	27468 <_obstack_memory_used@@Base+0x590>
   27484:	lsr	r3, r4, ip
   27488:	orr	r3, r3, r5, lsl fp
   2748c:	lsr	r2, r5, ip
   27490:	orr	r3, r3, r5, lsr sl
   27494:	adds	r0, r0, r4
   27498:	mov	r4, r3
   2749c:	lsl	r3, r2, ip
   274a0:	orr	r3, r3, r4, lsl sl
   274a4:	lsl	ip, r4, ip
   274a8:	orr	r3, r3, r4, lsr fp
   274ac:	adc	r1, r1, r5
   274b0:	subs	r0, r0, ip
   274b4:	mov	r5, r2
   274b8:	sbc	r1, r1, r3
   274bc:	cmp	lr, #0
   274c0:	strdne	r4, [lr]
   274c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   274cc:	mov	r7, r0
   274d0:	ldr	r6, [pc, #72]	; 27520 <_obstack_memory_used@@Base+0x648>
   274d4:	ldr	r5, [pc, #72]	; 27524 <_obstack_memory_used@@Base+0x64c>
   274d8:	add	r6, pc, r6
   274dc:	add	r5, pc, r5
   274e0:	sub	r6, r6, r5
   274e4:	mov	r8, r1
   274e8:	mov	r9, r2
   274ec:	bl	119d0 <pthread_mutex_unlock@plt-0x20>
   274f0:	asrs	r6, r6, #2
   274f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   274f8:	mov	r4, #0
   274fc:	add	r4, r4, #1
   27500:	ldr	r3, [r5], #4
   27504:	mov	r2, r9
   27508:	mov	r1, r8
   2750c:	mov	r0, r7
   27510:	blx	r3
   27514:	cmp	r6, r4
   27518:	bne	274fc <_obstack_memory_used@@Base+0x624>
   2751c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27520:	andeq	r2, r1, ip, lsr #20
   27524:	andeq	r2, r1, r4, lsr #20
   27528:	bx	lr
   2752c:	ldr	r3, [pc, #12]	; 27540 <_obstack_memory_used@@Base+0x668>
   27530:	mov	r1, #0
   27534:	add	r3, pc, r3
   27538:	ldr	r2, [r3]
   2753c:	b	11d80 <__cxa_atexit@plt>
   27540:	andeq	r2, r1, r4, lsr #25

Disassembly of section .fini:

00027544 <.fini>:
   27544:	push	{r3, lr}
   27548:	pop	{r3, pc}
