
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

0001164c <.init>:
   1164c:	push	{r3, lr}
   11650:	bl	11ad4 <__assert_fail@plt+0x48>
   11654:	pop	{r3, pc}

Disassembly of section .plt:

00011658 <calloc@plt-0x14>:
   11658:	push	{lr}		; (str lr, [sp, #-4]!)
   1165c:	ldr	lr, [pc, #4]	; 11668 <calloc@plt-0x4>
   11660:	add	lr, pc, lr
   11664:	ldr	pc, [lr, #8]!
   11668:	muleq	r1, r8, r9

0001166c <calloc@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #122880	; 0x1e000
   11674:	ldr	pc, [ip, #2456]!	; 0x998

00011678 <fputs_unlocked@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #122880	; 0x1e000
   11680:	ldr	pc, [ip, #2448]!	; 0x990

00011684 <raise@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #122880	; 0x1e000
   1168c:	ldr	pc, [ip, #2440]!	; 0x988

00011690 <gmtime_r@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #122880	; 0x1e000
   11698:	ldr	pc, [ip, #2432]!	; 0x980

0001169c <__getdelim@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #122880	; 0x1e000
   116a4:	ldr	pc, [ip, #2424]!	; 0x978

000116a8 <is_selinux_enabled@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #122880	; 0x1e000
   116b0:	ldr	pc, [ip, #2416]!	; 0x970

000116b4 <strcmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #122880	; 0x1e000
   116bc:	ldr	pc, [ip, #2408]!	; 0x968

000116c0 <strtol@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #122880	; 0x1e000
   116c8:	ldr	pc, [ip, #2400]!	; 0x960

000116cc <getpwuid@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #122880	; 0x1e000
   116d4:	ldr	pc, [ip, #2392]!	; 0x958

000116d8 <mktime@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #122880	; 0x1e000
   116e0:	ldr	pc, [ip, #2384]!	; 0x950

000116e4 <fflush@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #122880	; 0x1e000
   116ec:	ldr	pc, [ip, #2376]!	; 0x948

000116f0 <free@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #122880	; 0x1e000
   116f8:	ldr	pc, [ip, #2368]!	; 0x940

000116fc <_exit@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #122880	; 0x1e000
   11704:	ldr	pc, [ip, #2360]!	; 0x938

00011708 <memcpy@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #122880	; 0x1e000
   11710:	ldr	pc, [ip, #2352]!	; 0x930

00011714 <mbsinit@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #122880	; 0x1e000
   1171c:	ldr	pc, [ip, #2344]!	; 0x928

00011720 <memcmp@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #122880	; 0x1e000
   11728:	ldr	pc, [ip, #2336]!	; 0x920

0001172c <dcgettext@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #122880	; 0x1e000
   11734:	ldr	pc, [ip, #2328]!	; 0x918

00011738 <realloc@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #122880	; 0x1e000
   11740:	ldr	pc, [ip, #2320]!	; 0x910

00011744 <fgetfilecon@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #122880	; 0x1e000
   1174c:	ldr	pc, [ip, #2312]!	; 0x908

00011750 <localtime_r@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #122880	; 0x1e000
   11758:	ldr	pc, [ip, #2304]!	; 0x900

0001175c <textdomain@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #122880	; 0x1e000
   11764:	ldr	pc, [ip, #2296]!	; 0x8f8

00011768 <chdir@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #122880	; 0x1e000
   11770:	ldr	pc, [ip, #2288]!	; 0x8f0

00011774 <iswprint@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #122880	; 0x1e000
   1177c:	ldr	pc, [ip, #2280]!	; 0x8e8

00011780 <tzset@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #122880	; 0x1e000
   11788:	ldr	pc, [ip, #2272]!	; 0x8e0

0001178c <readlink@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #122880	; 0x1e000
   11794:	ldr	pc, [ip, #2264]!	; 0x8d8

00011798 <fwrite@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #122880	; 0x1e000
   117a0:	ldr	pc, [ip, #2256]!	; 0x8d0

000117a4 <lseek64@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #122880	; 0x1e000
   117ac:	ldr	pc, [ip, #2248]!	; 0x8c8

000117b0 <__ctype_get_mb_cur_max@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #122880	; 0x1e000
   117b8:	ldr	pc, [ip, #2240]!	; 0x8c0

000117bc <hasmntopt@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #122880	; 0x1e000
   117c4:	ldr	pc, [ip, #2232]!	; 0x8b8

000117c8 <__fpending@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #122880	; 0x1e000
   117d0:	ldr	pc, [ip, #2224]!	; 0x8b0

000117d4 <mbrtowc@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #122880	; 0x1e000
   117dc:	ldr	pc, [ip, #2216]!	; 0x8a8

000117e0 <error@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #122880	; 0x1e000
   117e8:	ldr	pc, [ip, #2208]!	; 0x8a0

000117ec <getmntent@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #122880	; 0x1e000
   117f4:	ldr	pc, [ip, #2200]!	; 0x898

000117f8 <open64@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #122880	; 0x1e000
   11800:	ldr	pc, [ip, #2192]!	; 0x890

00011804 <getenv@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #122880	; 0x1e000
   1180c:	ldr	pc, [ip, #2184]!	; 0x888

00011810 <lgetfilecon@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #122880	; 0x1e000
   11818:	ldr	pc, [ip, #2176]!	; 0x880

0001181c <malloc@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #122880	; 0x1e000
   11824:	ldr	pc, [ip, #2168]!	; 0x878

00011828 <__libc_start_main@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #122880	; 0x1e000
   11830:	ldr	pc, [ip, #2160]!	; 0x870

00011834 <strftime@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #122880	; 0x1e000
   1183c:	ldr	pc, [ip, #2152]!	; 0x868

00011840 <__freading@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #122880	; 0x1e000
   11848:	ldr	pc, [ip, #2144]!	; 0x860

0001184c <__ctype_tolower_loc@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #122880	; 0x1e000
   11854:	ldr	pc, [ip, #2136]!	; 0x858

00011858 <__ctype_toupper_loc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #122880	; 0x1e000
   11860:	ldr	pc, [ip, #2128]!	; 0x850

00011864 <__gmon_start__@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #122880	; 0x1e000
   1186c:	ldr	pc, [ip, #2120]!	; 0x848

00011870 <getopt_long@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #122880	; 0x1e000
   11878:	ldr	pc, [ip, #2112]!	; 0x840

0001187c <__ctype_b_loc@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #122880	; 0x1e000
   11884:	ldr	pc, [ip, #2104]!	; 0x838

00011888 <getcwd@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #122880	; 0x1e000
   11890:	ldr	pc, [ip, #2096]!	; 0x830

00011894 <exit@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #122880	; 0x1e000
   1189c:	ldr	pc, [ip, #2088]!	; 0x828

000118a0 <getfilecon@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #122880	; 0x1e000
   118a8:	ldr	pc, [ip, #2080]!	; 0x820

000118ac <strlen@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #122880	; 0x1e000
   118b4:	ldr	pc, [ip, #2072]!	; 0x818

000118b8 <strchr@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #122880	; 0x1e000
   118c0:	ldr	pc, [ip, #2064]!	; 0x810

000118c4 <setenv@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #122880	; 0x1e000
   118cc:	ldr	pc, [ip, #2056]!	; 0x808

000118d0 <openat64@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #122880	; 0x1e000
   118d8:	ldr	pc, [ip, #2048]!	; 0x800

000118dc <memrchr@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #122880	; 0x1e000
   118e4:	ldr	pc, [ip, #2040]!	; 0x7f8

000118e8 <__errno_location@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #122880	; 0x1e000
   118f0:	ldr	pc, [ip, #2032]!	; 0x7f0

000118f4 <__sprintf_chk@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #122880	; 0x1e000
   118fc:	ldr	pc, [ip, #2024]!	; 0x7e8

00011900 <__cxa_atexit@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #122880	; 0x1e000
   11908:	ldr	pc, [ip, #2016]!	; 0x7e0

0001190c <__vasprintf_chk@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #122880	; 0x1e000
   11914:	ldr	pc, [ip, #2008]!	; 0x7d8

00011918 <memset@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #122880	; 0x1e000
   11920:	ldr	pc, [ip, #2000]!	; 0x7d0

00011924 <__printf_chk@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #122880	; 0x1e000
   1192c:	ldr	pc, [ip, #1992]!	; 0x7c8

00011930 <fileno@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #122880	; 0x1e000
   11938:	ldr	pc, [ip, #1984]!	; 0x7c0

0001193c <__fprintf_chk@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #122880	; 0x1e000
   11944:	ldr	pc, [ip, #1976]!	; 0x7b8

00011948 <memchr@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #122880	; 0x1e000
   11950:	ldr	pc, [ip, #1968]!	; 0x7b0

00011954 <fclose@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #122880	; 0x1e000
   1195c:	ldr	pc, [ip, #1960]!	; 0x7a8

00011960 <fseeko64@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #122880	; 0x1e000
   11968:	ldr	pc, [ip, #1952]!	; 0x7a0

0001196c <statx@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #122880	; 0x1e000
   11974:	ldr	pc, [ip, #1944]!	; 0x798

00011978 <endmntent@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #122880	; 0x1e000
   11980:	ldr	pc, [ip, #1936]!	; 0x790

00011984 <fcntl64@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #122880	; 0x1e000
   1198c:	ldr	pc, [ip, #1928]!	; 0x788

00011990 <__overflow@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #122880	; 0x1e000
   11998:	ldr	pc, [ip, #1920]!	; 0x780

0001199c <setlocale@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #122880	; 0x1e000
   119a4:	ldr	pc, [ip, #1912]!	; 0x778

000119a8 <strrchr@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #122880	; 0x1e000
   119b0:	ldr	pc, [ip, #1904]!	; 0x770

000119b4 <statfs64@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #122880	; 0x1e000
   119bc:	ldr	pc, [ip, #1896]!	; 0x768

000119c0 <nl_langinfo@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #122880	; 0x1e000
   119c8:	ldr	pc, [ip, #1888]!	; 0x760

000119cc <sscanf@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #122880	; 0x1e000
   119d4:	ldr	pc, [ip, #1880]!	; 0x758

000119d8 <localeconv@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #122880	; 0x1e000
   119e0:	ldr	pc, [ip, #1872]!	; 0x750

000119e4 <timegm@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #122880	; 0x1e000
   119ec:	ldr	pc, [ip, #1864]!	; 0x748

000119f0 <fchdir@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #122880	; 0x1e000
   119f8:	ldr	pc, [ip, #1856]!	; 0x740

000119fc <canonicalize_file_name@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #122880	; 0x1e000
   11a04:	ldr	pc, [ip, #1848]!	; 0x738

00011a08 <fopen64@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #122880	; 0x1e000
   11a10:	ldr	pc, [ip, #1840]!	; 0x730

00011a14 <freecon@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #122880	; 0x1e000
   11a1c:	ldr	pc, [ip, #1832]!	; 0x728

00011a20 <setmntent@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #122880	; 0x1e000
   11a28:	ldr	pc, [ip, #1824]!	; 0x720

00011a2c <bindtextdomain@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #122880	; 0x1e000
   11a34:	ldr	pc, [ip, #1816]!	; 0x718

00011a38 <__xstat64@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #122880	; 0x1e000
   11a40:	ldr	pc, [ip, #1808]!	; 0x710

00011a44 <unsetenv@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #122880	; 0x1e000
   11a4c:	ldr	pc, [ip, #1800]!	; 0x708

00011a50 <strncmp@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #122880	; 0x1e000
   11a58:	ldr	pc, [ip, #1792]!	; 0x700

00011a5c <abort@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #122880	; 0x1e000
   11a64:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a68 <close@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #122880	; 0x1e000
   11a70:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a74 <getgrgid@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #122880	; 0x1e000
   11a7c:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a80 <strspn@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #122880	; 0x1e000
   11a88:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a8c <__assert_fail@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #122880	; 0x1e000
   11a94:	ldr	pc, [ip, #1752]!	; 0x6d8

Disassembly of section .text:

00011a98 <.text>:
   11a98:	mov	fp, #0
   11a9c:	mov	lr, #0
   11aa0:	pop	{r1}		; (ldr r1, [sp], #4)
   11aa4:	mov	r2, sp
   11aa8:	push	{r2}		; (str r2, [sp, #-4]!)
   11aac:	push	{r0}		; (str r0, [sp, #-4]!)
   11ab0:	ldr	ip, [pc, #16]	; 11ac8 <__assert_fail@plt+0x3c>
   11ab4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ab8:	ldr	r0, [pc, #12]	; 11acc <__assert_fail@plt+0x40>
   11abc:	ldr	r3, [pc, #12]	; 11ad0 <__assert_fail@plt+0x44>
   11ac0:	bl	11828 <__libc_start_main@plt>
   11ac4:	bl	11a5c <abort@plt>
   11ac8:	andeq	sp, r1, r0, lsl #18
   11acc:	andeq	r1, r1, r4, ror pc
   11ad0:	andeq	sp, r1, r0, lsr #17
   11ad4:	ldr	r3, [pc, #20]	; 11af0 <__assert_fail@plt+0x64>
   11ad8:	ldr	r2, [pc, #20]	; 11af4 <__assert_fail@plt+0x68>
   11adc:	add	r3, pc, r3
   11ae0:	ldr	r2, [r3, r2]
   11ae4:	cmp	r2, #0
   11ae8:	bxeq	lr
   11aec:	b	11864 <__gmon_start__@plt>
   11af0:	andeq	lr, r1, ip, lsl r5
   11af4:	andeq	r0, r0, r0, ror r1
   11af8:	ldr	r0, [pc, #24]	; 11b18 <__assert_fail@plt+0x8c>
   11afc:	ldr	r3, [pc, #24]	; 11b1c <__assert_fail@plt+0x90>
   11b00:	cmp	r3, r0
   11b04:	bxeq	lr
   11b08:	ldr	r3, [pc, #16]	; 11b20 <__assert_fail@plt+0x94>
   11b0c:	cmp	r3, #0
   11b10:	bxeq	lr
   11b14:	bx	r3
   11b18:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   11b1c:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   11b20:	andeq	r0, r0, r0
   11b24:	ldr	r0, [pc, #36]	; 11b50 <__assert_fail@plt+0xc4>
   11b28:	ldr	r1, [pc, #36]	; 11b54 <__assert_fail@plt+0xc8>
   11b2c:	sub	r1, r1, r0
   11b30:	asr	r1, r1, #2
   11b34:	add	r1, r1, r1, lsr #31
   11b38:	asrs	r1, r1, #1
   11b3c:	bxeq	lr
   11b40:	ldr	r3, [pc, #16]	; 11b58 <__assert_fail@plt+0xcc>
   11b44:	cmp	r3, #0
   11b48:	bxeq	lr
   11b4c:	bx	r3
   11b50:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   11b54:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   11b58:	andeq	r0, r0, r0
   11b5c:	push	{r4, lr}
   11b60:	ldr	r4, [pc, #24]	; 11b80 <__assert_fail@plt+0xf4>
   11b64:	ldrb	r3, [r4]
   11b68:	cmp	r3, #0
   11b6c:	popne	{r4, pc}
   11b70:	bl	11af8 <__assert_fail@plt+0x6c>
   11b74:	mov	r3, #1
   11b78:	strb	r3, [r4]
   11b7c:	pop	{r4, pc}
   11b80:	andeq	r0, r3, ip, ror #3
   11b84:	b	11b24 <__assert_fail@plt+0x98>
   11b88:	push	{fp, lr}
   11b8c:	mov	fp, sp
   11b90:	sub	sp, sp, #56	; 0x38
   11b94:	mov	r4, r0
   11b98:	cmp	r0, #0
   11b9c:	bne	11f30 <__assert_fail@plt+0x4a4>
   11ba0:	movw	r1, #55635	; 0xd953
   11ba4:	mov	r0, #0
   11ba8:	mov	r2, #5
   11bac:	movt	r1, #1
   11bb0:	bl	1172c <dcgettext@plt>
   11bb4:	mov	r1, r0
   11bb8:	movw	r0, #624	; 0x270
   11bbc:	movt	r0, #3
   11bc0:	ldr	r2, [r0]
   11bc4:	mov	r0, #1
   11bc8:	bl	11924 <__printf_chk@plt>
   11bcc:	movw	r1, #55666	; 0xd972
   11bd0:	mov	r0, #0
   11bd4:	mov	r2, #5
   11bd8:	movt	r1, #1
   11bdc:	bl	1172c <dcgettext@plt>
   11be0:	movw	r7, #484	; 0x1e4
   11be4:	movt	r7, #3
   11be8:	ldr	r1, [r7]
   11bec:	bl	11678 <fputs_unlocked@plt>
   11bf0:	movw	r1, #59247	; 0xe76f
   11bf4:	mov	r0, #0
   11bf8:	mov	r2, #5
   11bfc:	movt	r1, #1
   11c00:	bl	1172c <dcgettext@plt>
   11c04:	ldr	r1, [r7]
   11c08:	bl	11678 <fputs_unlocked@plt>
   11c0c:	movw	r1, #55703	; 0xd997
   11c10:	mov	r0, #0
   11c14:	mov	r2, #5
   11c18:	movt	r1, #1
   11c1c:	bl	1172c <dcgettext@plt>
   11c20:	ldr	r1, [r7]
   11c24:	bl	11678 <fputs_unlocked@plt>
   11c28:	movw	r1, #55815	; 0xda07
   11c2c:	mov	r0, #0
   11c30:	mov	r2, #5
   11c34:	movt	r1, #1
   11c38:	bl	1172c <dcgettext@plt>
   11c3c:	ldr	r1, [r7]
   11c40:	bl	11678 <fputs_unlocked@plt>
   11c44:	movw	r1, #55950	; 0xda8e
   11c48:	mov	r0, #0
   11c4c:	mov	r2, #5
   11c50:	movt	r1, #1
   11c54:	bl	1172c <dcgettext@plt>
   11c58:	ldr	r1, [r7]
   11c5c:	bl	11678 <fputs_unlocked@plt>
   11c60:	movw	r1, #56368	; 0xdc30
   11c64:	mov	r0, #0
   11c68:	mov	r2, #5
   11c6c:	movt	r1, #1
   11c70:	bl	1172c <dcgettext@plt>
   11c74:	ldr	r1, [r7]
   11c78:	bl	11678 <fputs_unlocked@plt>
   11c7c:	movw	r1, #56413	; 0xdc5d
   11c80:	mov	r0, #0
   11c84:	mov	r2, #5
   11c88:	movt	r1, #1
   11c8c:	bl	1172c <dcgettext@plt>
   11c90:	ldr	r1, [r7]
   11c94:	bl	11678 <fputs_unlocked@plt>
   11c98:	movw	r1, #56467	; 0xdc93
   11c9c:	mov	r0, #0
   11ca0:	mov	r2, #5
   11ca4:	movt	r1, #1
   11ca8:	bl	1172c <dcgettext@plt>
   11cac:	ldr	r1, [r7]
   11cb0:	bl	11678 <fputs_unlocked@plt>
   11cb4:	movw	r1, #56712	; 0xdd88
   11cb8:	mov	r0, #0
   11cbc:	mov	r2, #5
   11cc0:	movt	r1, #1
   11cc4:	bl	1172c <dcgettext@plt>
   11cc8:	ldr	r1, [r7]
   11ccc:	bl	11678 <fputs_unlocked@plt>
   11cd0:	movw	r1, #57037	; 0xdecd
   11cd4:	mov	r0, #0
   11cd8:	mov	r2, #5
   11cdc:	movt	r1, #1
   11ce0:	bl	1172c <dcgettext@plt>
   11ce4:	ldr	r1, [r7]
   11ce8:	bl	11678 <fputs_unlocked@plt>
   11cec:	movw	r1, #57284	; 0xdfc4
   11cf0:	mov	r0, #0
   11cf4:	mov	r2, #5
   11cf8:	movt	r1, #1
   11cfc:	bl	1172c <dcgettext@plt>
   11d00:	ldr	r1, [r7]
   11d04:	bl	11678 <fputs_unlocked@plt>
   11d08:	movw	r1, #57873	; 0xe211
   11d0c:	mov	r0, #0
   11d10:	mov	r2, #5
   11d14:	movt	r1, #1
   11d18:	bl	1172c <dcgettext@plt>
   11d1c:	ldr	r1, [r7]
   11d20:	bl	11678 <fputs_unlocked@plt>
   11d24:	movw	r1, #58351	; 0xe3ef
   11d28:	mov	r0, #0
   11d2c:	mov	r2, #5
   11d30:	movt	r1, #1
   11d34:	bl	1172c <dcgettext@plt>
   11d38:	ldr	r1, [r7]
   11d3c:	bl	11678 <fputs_unlocked@plt>
   11d40:	movw	r1, #58591	; 0xe4df
   11d44:	mov	r0, #0
   11d48:	mov	r2, #5
   11d4c:	movt	r1, #1
   11d50:	bl	1172c <dcgettext@plt>
   11d54:	ldr	r1, [r7]
   11d58:	bl	11678 <fputs_unlocked@plt>
   11d5c:	movw	r1, #58841	; 0xe5d9
   11d60:	mov	r0, #0
   11d64:	mov	r2, #5
   11d68:	movt	r1, #1
   11d6c:	bl	1172c <dcgettext@plt>
   11d70:	movw	r2, #61552	; 0xf070
   11d74:	mov	r1, r0
   11d78:	mov	r0, #1
   11d7c:	movt	r2, #1
   11d80:	bl	11924 <__printf_chk@plt>
   11d84:	movw	r1, #58896	; 0xe610
   11d88:	mov	r0, #0
   11d8c:	mov	r2, #5
   11d90:	movt	r1, #1
   11d94:	bl	1172c <dcgettext@plt>
   11d98:	movw	r2, #61604	; 0xf0a4
   11d9c:	mov	r1, r0
   11da0:	mov	r0, #1
   11da4:	movt	r2, #1
   11da8:	bl	11924 <__printf_chk@plt>
   11dac:	movw	r1, #58964	; 0xe654
   11db0:	mov	r0, #0
   11db4:	mov	r2, #5
   11db8:	movt	r1, #1
   11dbc:	bl	1172c <dcgettext@plt>
   11dc0:	movw	r5, #59155	; 0xe713
   11dc4:	mov	r1, r0
   11dc8:	mov	r0, #1
   11dcc:	movt	r5, #1
   11dd0:	mov	r2, r5
   11dd4:	bl	11924 <__printf_chk@plt>
   11dd8:	movw	r0, #61816	; 0xf178
   11ddc:	mov	r2, #48	; 0x30
   11de0:	mov	r6, sp
   11de4:	movt	r0, #1
   11de8:	add	r1, r0, #32
   11dec:	add	r3, r0, #16
   11df0:	vld1.64	{d18-d19}, [r0], r2
   11df4:	vld1.64	{d16-d17}, [r1]
   11df8:	vld1.64	{d20-d21}, [r3]
   11dfc:	add	r1, r6, #32
   11e00:	vldr	d22, [r0]
   11e04:	add	r0, r6, #16
   11e08:	vst1.64	{d16-d17}, [r1]
   11e0c:	movw	r1, #59322	; 0xe7ba
   11e10:	vst1.64	{d20-d21}, [r0]
   11e14:	mov	r0, r6
   11e18:	vst1.64	{d18-d19}, [r0], r2
   11e1c:	movt	r1, #1
   11e20:	vstr	d22, [r0]
   11e24:	mov	r0, r5
   11e28:	bl	116b4 <strcmp@plt>
   11e2c:	cmp	r0, #0
   11e30:	ldrne	r1, [r6, #8]!
   11e34:	cmpne	r1, #0
   11e38:	bne	11e24 <__assert_fail@plt+0x398>
   11e3c:	ldr	r6, [r6, #4]
   11e40:	movw	r1, #59417	; 0xe819
   11e44:	mov	r0, #0
   11e48:	mov	r2, #5
   11e4c:	movt	r1, #1
   11e50:	bl	1172c <dcgettext@plt>
   11e54:	movw	r2, #59199	; 0xe73f
   11e58:	movw	r3, #59440	; 0xe830
   11e5c:	mov	r1, r0
   11e60:	mov	r0, #1
   11e64:	movt	r2, #1
   11e68:	movt	r3, #1
   11e6c:	bl	11924 <__printf_chk@plt>
   11e70:	cmp	r6, #0
   11e74:	mov	r0, #5
   11e78:	mov	r1, #0
   11e7c:	moveq	r6, r5
   11e80:	bl	1199c <setlocale@plt>
   11e84:	cmp	r0, #0
   11e88:	beq	11ec0 <__assert_fail@plt+0x434>
   11e8c:	movw	r1, #59480	; 0xe858
   11e90:	mov	r2, #3
   11e94:	movt	r1, #1
   11e98:	bl	11a50 <strncmp@plt>
   11e9c:	cmp	r0, #0
   11ea0:	beq	11ec0 <__assert_fail@plt+0x434>
   11ea4:	movw	r1, #59484	; 0xe85c
   11ea8:	mov	r0, #0
   11eac:	mov	r2, #5
   11eb0:	movt	r1, #1
   11eb4:	bl	1172c <dcgettext@plt>
   11eb8:	ldr	r1, [r7]
   11ebc:	bl	11678 <fputs_unlocked@plt>
   11ec0:	movw	r1, #59555	; 0xe8a3
   11ec4:	mov	r0, #0
   11ec8:	mov	r2, #5
   11ecc:	movt	r1, #1
   11ed0:	bl	1172c <dcgettext@plt>
   11ed4:	movw	r2, #59440	; 0xe830
   11ed8:	mov	r1, r0
   11edc:	mov	r0, #1
   11ee0:	mov	r3, r5
   11ee4:	movt	r2, #1
   11ee8:	bl	11924 <__printf_chk@plt>
   11eec:	movw	r1, #59582	; 0xe8be
   11ef0:	mov	r0, #0
   11ef4:	mov	r2, #5
   11ef8:	movt	r1, #1
   11efc:	bl	1172c <dcgettext@plt>
   11f00:	movw	r3, #58350	; 0xe3ee
   11f04:	mov	r1, r0
   11f08:	movw	r0, #59350	; 0xe7d6
   11f0c:	cmp	r6, r5
   11f10:	mov	r2, r6
   11f14:	movt	r0, #1
   11f18:	movt	r3, #1
   11f1c:	moveq	r3, r0
   11f20:	mov	r0, #1
   11f24:	bl	11924 <__printf_chk@plt>
   11f28:	mov	r0, r4
   11f2c:	bl	11894 <exit@plt>
   11f30:	movw	r0, #480	; 0x1e0
   11f34:	movw	r1, #55596	; 0xd92c
   11f38:	mov	r2, #5
   11f3c:	movt	r0, #3
   11f40:	movt	r1, #1
   11f44:	ldr	r5, [r0]
   11f48:	mov	r0, #0
   11f4c:	bl	1172c <dcgettext@plt>
   11f50:	mov	r2, r0
   11f54:	movw	r0, #624	; 0x270
   11f58:	mov	r1, #1
   11f5c:	movt	r0, #3
   11f60:	ldr	r3, [r0]
   11f64:	mov	r0, r5
   11f68:	bl	1193c <__fprintf_chk@plt>
   11f6c:	mov	r0, r4
   11f70:	bl	11894 <exit@plt>
   11f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f78:	add	fp, sp, #28
   11f7c:	sub	sp, sp, #492	; 0x1ec
   11f80:	str	r0, [sp, #112]	; 0x70
   11f84:	ldr	r0, [r1]
   11f88:	str	r1, [sp, #108]	; 0x6c
   11f8c:	bl	18d34 <__assert_fail@plt+0x72a8>
   11f90:	movw	r1, #58350	; 0xe3ee
   11f94:	mov	r0, #6
   11f98:	movt	r1, #1
   11f9c:	bl	1199c <setlocale@plt>
   11fa0:	movw	r4, #59203	; 0xe743
   11fa4:	movw	r1, #59160	; 0xe718
   11fa8:	movt	r4, #1
   11fac:	movt	r1, #1
   11fb0:	mov	r0, r4
   11fb4:	bl	11a2c <bindtextdomain@plt>
   11fb8:	mov	r0, r4
   11fbc:	bl	1175c <textdomain@plt>
   11fc0:	bl	119d8 <localeconv@plt>
   11fc4:	ldr	r1, [r0]
   11fc8:	movw	r0, #62039	; 0xf257
   11fcc:	movt	r0, #1
   11fd0:	ldrb	r2, [r1]
   11fd4:	cmp	r2, #0
   11fd8:	movne	r0, r1
   11fdc:	movw	r1, #496	; 0x1f0
   11fe0:	movt	r1, #3
   11fe4:	str	r0, [r1]
   11fe8:	bl	118ac <strlen@plt>
   11fec:	movw	r1, #500	; 0x1f4
   11ff0:	movt	r1, #3
   11ff4:	str	r0, [r1]
   11ff8:	movw	r0, #25136	; 0x6230
   11ffc:	movt	r0, #1
   12000:	bl	1d904 <__assert_fail@plt+0xbe78>
   12004:	movw	r6, #59184	; 0xe730
   12008:	movw	r5, #61640	; 0xf0c8
   1200c:	movw	r7, #488	; 0x1e8
   12010:	movw	r8, #504	; 0x1f8
   12014:	mov	r0, #0
   12018:	mov	r4, #0
   1201c:	mov	sl, #1
   12020:	mov	r9, #0
   12024:	str	r0, [sp, #104]	; 0x68
   12028:	movt	r6, #1
   1202c:	movt	r5, #1
   12030:	movt	r7, #3
   12034:	movt	r8, #3
   12038:	mov	r0, #0
   1203c:	b	1205c <__assert_fail@plt+0x5d0>
   12040:	movw	r0, #384	; 0x180
   12044:	movw	r1, #58349	; 0xe3ed
   12048:	strb	r4, [r8]
   1204c:	movt	r0, #3
   12050:	movt	r1, #1
   12054:	str	r1, [r0]
   12058:	ldr	r0, [r7]
   1205c:	str	r0, [sp, #92]	; 0x5c
   12060:	b	12078 <__assert_fail@plt+0x5ec>
   12064:	mov	r9, #1
   12068:	b	12078 <__assert_fail@plt+0x5ec>
   1206c:	cmp	r0, #116	; 0x74
   12070:	beq	12064 <__assert_fail@plt+0x5d8>
   12074:	b	121d8 <__assert_fail@plt+0x74c>
   12078:	ldr	r0, [sp, #112]	; 0x70
   1207c:	ldr	r1, [sp, #108]	; 0x6c
   12080:	mov	r2, r6
   12084:	mov	r3, r5
   12088:	str	r4, [sp]
   1208c:	bl	11870 <getopt_long@plt>
   12090:	cmp	r0, #98	; 0x62
   12094:	ble	120bc <__assert_fail@plt+0x630>
   12098:	cmp	r0, #115	; 0x73
   1209c:	bgt	1206c <__assert_fail@plt+0x5e0>
   120a0:	cmp	r0, #99	; 0x63
   120a4:	beq	12040 <__assert_fail@plt+0x5b4>
   120a8:	cmp	r0, #102	; 0x66
   120ac:	mov	r0, #1
   120b0:	str	r0, [sp, #104]	; 0x68
   120b4:	beq	12078 <__assert_fail@plt+0x5ec>
   120b8:	b	12aac <__assert_fail@plt+0x1020>
   120bc:	add	r1, r0, #3
   120c0:	cmp	r1, #3
   120c4:	bhi	12174 <__assert_fail@plt+0x6e8>
   120c8:	add	r0, pc, #0
   120cc:	ldr	pc, [r0, r1, lsl #2]
   120d0:	andeq	r2, r1, ip, asr sl
   120d4:	andeq	r2, r1, r4, lsr #21
   120d8:	andeq	r2, r1, r0, lsl #4
   120dc:	andeq	r2, r1, r0, ror #1
   120e0:	movw	r0, #392	; 0x188
   120e4:	mov	r2, #4
   120e8:	ldr	r1, [r7]
   120ec:	mov	r8, r9
   120f0:	mov	r9, r7
   120f4:	movt	r0, #3
   120f8:	str	r2, [sp]
   120fc:	movw	r2, #61796	; 0xf164
   12100:	ldr	r0, [r0]
   12104:	movt	r2, #1
   12108:	stmib	sp, {r0, sl}
   1210c:	movw	sl, #61784	; 0xf158
   12110:	movw	r0, #59190	; 0xe736
   12114:	movt	sl, #1
   12118:	movt	r0, #1
   1211c:	mov	r3, sl
   12120:	bl	15fa4 <__assert_fail@plt+0x4518>
   12124:	ldr	r0, [sl, r0, lsl #2]
   12128:	cmp	r0, #0
   1212c:	beq	1218c <__assert_fail@plt+0x700>
   12130:	cmp	r0, #2
   12134:	mov	r4, #0
   12138:	beq	121a8 <__assert_fail@plt+0x71c>
   1213c:	mov	r7, r9
   12140:	mov	r9, r8
   12144:	movw	r8, #504	; 0x1f8
   12148:	cmp	r0, #1
   1214c:	mov	sl, #1
   12150:	movt	r8, #3
   12154:	bne	12078 <__assert_fail@plt+0x5ec>
   12158:	movw	r0, #507	; 0x1fb
   1215c:	movt	r0, #3
   12160:	strb	r4, [r0]
   12164:	movw	r0, #506	; 0x1fa
   12168:	movt	r0, #3
   1216c:	strb	sl, [r0]
   12170:	b	12078 <__assert_fail@plt+0x5ec>
   12174:	cmp	r0, #76	; 0x4c
   12178:	bne	12aac <__assert_fail@plt+0x1020>
   1217c:	movw	r0, #505	; 0x1f9
   12180:	movt	r0, #3
   12184:	strb	sl, [r0]
   12188:	b	12078 <__assert_fail@plt+0x5ec>
   1218c:	movw	r0, #507	; 0x1fb
   12190:	mov	r4, #0
   12194:	mov	r7, r9
   12198:	mov	sl, #1
   1219c:	movt	r0, #3
   121a0:	strb	r4, [r0]
   121a4:	b	121bc <__assert_fail@plt+0x730>
   121a8:	movw	r0, #507	; 0x1fb
   121ac:	mov	sl, #1
   121b0:	mov	r7, r9
   121b4:	movt	r0, #3
   121b8:	strb	sl, [r0]
   121bc:	movw	r0, #506	; 0x1fa
   121c0:	movt	r0, #3
   121c4:	strb	r4, [r0]
   121c8:	mov	r9, r8
   121cc:	movw	r8, #504	; 0x1f8
   121d0:	movt	r8, #3
   121d4:	b	12078 <__assert_fail@plt+0x5ec>
   121d8:	cmp	r0, #256	; 0x100
   121dc:	bne	12aac <__assert_fail@plt+0x1020>
   121e0:	movw	r0, #58350	; 0xe3ee
   121e4:	movw	r1, #384	; 0x180
   121e8:	strb	sl, [r8]
   121ec:	movt	r0, #1
   121f0:	movt	r1, #3
   121f4:	str	r0, [r1]
   121f8:	ldr	r0, [r7]
   121fc:	b	1205c <__assert_fail@plt+0x5d0>
   12200:	movw	r6, #472	; 0x1d8
   12204:	ldr	r1, [sp, #112]	; 0x70
   12208:	movt	r6, #3
   1220c:	ldr	r0, [r6]
   12210:	cmp	r0, r1
   12214:	beq	12ab4 <__assert_fail@plt+0x1028>
   12218:	ldr	r8, [sp, #92]	; 0x5c
   1221c:	cmp	r8, #0
   12220:	beq	12284 <__assert_fail@plt+0x7f8>
   12224:	movw	r1, #59244	; 0xe76c
   12228:	mov	r0, r8
   1222c:	movt	r1, #1
   12230:	bl	1c054 <__assert_fail@plt+0xa5c8>
   12234:	cmp	r0, #0
   12238:	beq	1230c <__assert_fail@plt+0x880>
   1223c:	movw	r0, #59697	; 0xe931
   12240:	movt	r0, #1
   12244:	bl	11804 <getenv@plt>
   12248:	cmp	r0, #0
   1224c:	beq	122bc <__assert_fail@plt+0x830>
   12250:	movw	r5, #62700	; 0xf4ec
   12254:	movw	r1, #62656	; 0xf4c0
   12258:	mov	r3, #4
   1225c:	mov	r4, r0
   12260:	movt	r5, #1
   12264:	movt	r1, #1
   12268:	mov	r2, r5
   1226c:	bl	15cc4 <__assert_fail@plt+0x4238>
   12270:	cmp	r0, #0
   12274:	blt	122cc <__assert_fail@plt+0x840>
   12278:	ldr	r1, [r5, r0, lsl #2]
   1227c:	mov	r0, #0
   12280:	b	122c4 <__assert_fail@plt+0x838>
   12284:	ldr	r0, [sp, #104]	; 0x68
   12288:	and	r5, r9, #1
   1228c:	mov	r2, #0
   12290:	mov	r1, r5
   12294:	and	r4, r0, #1
   12298:	mov	r0, r4
   1229c:	bl	12ae0 <__assert_fail@plt+0x1054>
   122a0:	mov	r8, r0
   122a4:	mov	r0, r4
   122a8:	mov	r1, r5
   122ac:	mov	r2, #1
   122b0:	bl	12ae0 <__assert_fail@plt+0x1054>
   122b4:	str	r0, [sp, #24]
   122b8:	b	12310 <__assert_fail@plt+0x884>
   122bc:	mov	r0, #0
   122c0:	mov	r1, #4
   122c4:	bl	18e4c <__assert_fail@plt+0x73c0>
   122c8:	b	1230c <__assert_fail@plt+0x880>
   122cc:	mov	r0, #0
   122d0:	mov	r1, #4
   122d4:	bl	18e4c <__assert_fail@plt+0x73c0>
   122d8:	movw	r1, #59711	; 0xe93f
   122dc:	mov	r0, #0
   122e0:	mov	r2, #5
   122e4:	movt	r1, #1
   122e8:	bl	1172c <dcgettext@plt>
   122ec:	mov	r5, r0
   122f0:	mov	r0, r4
   122f4:	bl	1a968 <__assert_fail@plt+0x8edc>
   122f8:	mov	r3, r0
   122fc:	mov	r0, #0
   12300:	mov	r1, #0
   12304:	mov	r2, r5
   12308:	bl	117e0 <error@plt>
   1230c:	str	r8, [sp, #24]
   12310:	ldr	r9, [r6]
   12314:	ldr	r1, [sp, #112]	; 0x70
   12318:	mov	r0, #0
   1231c:	cmp	r9, r1
   12320:	bge	12a54 <__assert_fail@plt+0xfc8>
   12324:	add	r0, sp, #116	; 0x74
   12328:	add	r4, sp, #128	; 0x80
   1232c:	mov	sl, #1
   12330:	str	r8, [sp, #92]	; 0x5c
   12334:	add	r0, r0, #4
   12338:	str	r0, [sp, #20]
   1233c:	sub	r0, fp, #136	; 0x88
   12340:	add	r1, r0, #88	; 0x58
   12344:	str	r1, [sp, #88]	; 0x58
   12348:	add	r1, r0, #80	; 0x50
   1234c:	str	r1, [sp, #84]	; 0x54
   12350:	add	r1, r0, #72	; 0x48
   12354:	str	r1, [sp, #80]	; 0x50
   12358:	add	r1, r0, #64	; 0x40
   1235c:	str	r1, [sp, #76]	; 0x4c
   12360:	add	r1, r0, #48	; 0x30
   12364:	str	r1, [sp, #72]	; 0x48
   12368:	add	r1, r0, #32
   1236c:	add	r0, r0, #96	; 0x60
   12370:	str	r0, [sp, #64]	; 0x40
   12374:	add	r0, r4, #88	; 0x58
   12378:	str	r1, [sp, #68]	; 0x44
   1237c:	str	r0, [sp, #16]
   12380:	add	r0, r4, #80	; 0x50
   12384:	str	r0, [sp, #12]
   12388:	add	r0, r4, #104	; 0x68
   1238c:	str	r0, [sp, #60]	; 0x3c
   12390:	add	r0, r4, #96	; 0x60
   12394:	str	r0, [sp, #56]	; 0x38
   12398:	add	r0, r4, #120	; 0x78
   1239c:	str	r0, [sp, #52]	; 0x34
   123a0:	add	r0, r4, #112	; 0x70
   123a4:	str	r0, [sp, #48]	; 0x30
   123a8:	add	r0, r4, #72	; 0x48
   123ac:	str	r0, [sp, #44]	; 0x2c
   123b0:	add	r0, r4, #64	; 0x40
   123b4:	str	r0, [sp, #40]	; 0x28
   123b8:	add	r0, r4, #48	; 0x30
   123bc:	str	r0, [sp, #36]	; 0x24
   123c0:	add	r0, r4, #40	; 0x28
   123c4:	str	r0, [sp, #32]
   123c8:	add	r0, r4, #32
   123cc:	str	r0, [sp, #28]
   123d0:	ldr	r0, [sp, #108]	; 0x6c
   123d4:	ldr	r5, [r0, r9, lsl #2]
   123d8:	ldr	r0, [sp, #104]	; 0x68
   123dc:	tst	r0, #1
   123e0:	beq	12458 <__assert_fail@plt+0x9cc>
   123e4:	movw	r1, #62559	; 0xf45f
   123e8:	mov	r0, r5
   123ec:	movt	r1, #1
   123f0:	bl	116b4 <strcmp@plt>
   123f4:	cmp	r0, #0
   123f8:	beq	1295c <__assert_fail@plt+0xed0>
   123fc:	mov	r0, r5
   12400:	mov	r1, r4
   12404:	bl	119b4 <statfs64@plt>
   12408:	cmp	r0, #0
   1240c:	beq	129f4 <__assert_fail@plt+0xf68>
   12410:	bl	118e8 <__errno_location@plt>
   12414:	mov	r4, r5
   12418:	ldr	r5, [r0]
   1241c:	movw	r1, #60299	; 0xeb8b
   12420:	mov	r0, #0
   12424:	mov	r2, #5
   12428:	mov	r7, #0
   1242c:	movt	r1, #1
   12430:	bl	1172c <dcgettext@plt>
   12434:	mov	r6, r0
   12438:	mov	r0, #4
   1243c:	mov	r1, r4
   12440:	bl	1a440 <__assert_fail@plt+0x89b4>
   12444:	mov	r3, r0
   12448:	mov	r0, #0
   1244c:	mov	r1, r5
   12450:	mov	r2, r6
   12454:	b	12994 <__assert_fail@plt+0xf08>
   12458:	movw	r1, #62559	; 0xf45f
   1245c:	mov	r0, r5
   12460:	movt	r1, #1
   12464:	bl	116b4 <strcmp@plt>
   12468:	mov	r6, r0
   1246c:	mov	r0, r4
   12470:	mov	r1, #0
   12474:	mov	r2, #256	; 0x100
   12478:	bl	11918 <memset@plt>
   1247c:	mvn	r1, #0
   12480:	sub	r0, fp, #136	; 0x88
   12484:	mov	r7, #256	; 0x100
   12488:	str	r5, [sp, #96]	; 0x60
   1248c:	str	r1, [sp, #120]	; 0x78
   12490:	str	r0, [sp, #116]	; 0x74
   12494:	movw	r0, #505	; 0x1f9
   12498:	str	r1, [sp, #124]	; 0x7c
   1249c:	mov	r1, r5
   124a0:	movt	r0, #3
   124a4:	ldrb	r0, [r0]
   124a8:	cmp	r0, #0
   124ac:	movw	r0, #58350	; 0xe3ee
   124b0:	movwne	r7, #0
   124b4:	cmp	r6, #0
   124b8:	movt	r0, #1
   124bc:	moveq	r1, r0
   124c0:	movw	r0, #507	; 0x1fb
   124c4:	movweq	r7, #4096	; 0x1000
   124c8:	mvnne	r6, #99	; 0x63
   124cc:	movt	r0, #3
   124d0:	str	r1, [sp, #100]	; 0x64
   124d4:	ldrb	r0, [r0]
   124d8:	cmp	r0, #1
   124dc:	bne	124e8 <__assert_fail@plt+0xa5c>
   124e0:	orr	r7, r7, #16384	; 0x4000
   124e4:	b	124f8 <__assert_fail@plt+0xa6c>
   124e8:	movw	r0, #506	; 0x1fa
   124ec:	movt	r0, #3
   124f0:	ldrb	r0, [r0]
   124f4:	bfi	r7, r0, #13, #1
   124f8:	mov	r5, #0
   124fc:	b	12504 <__assert_fail@plt+0xa78>
   12500:	add	r8, r8, #1
   12504:	ldrb	r0, [r8]
   12508:	cmp	r0, #37	; 0x25
   1250c:	beq	1251c <__assert_fail@plt+0xa90>
   12510:	cmp	r0, #0
   12514:	bne	12500 <__assert_fail@plt+0xa74>
   12518:	b	127dc <__assert_fail@plt+0xd50>
   1251c:	movw	r1, #61921	; 0xf1e1
   12520:	add	r4, r8, #1
   12524:	mov	r0, r4
   12528:	movt	r1, #1
   1252c:	bl	11a80 <strspn@plt>
   12530:	add	r8, r4, r0
   12534:	movw	r4, #61929	; 0xf1e9
   12538:	movt	r4, #1
   1253c:	mov	r0, r8
   12540:	mov	r1, r4
   12544:	bl	11a80 <strspn@plt>
   12548:	ldrb	r1, [r8, r0]!
   1254c:	cmp	r1, #46	; 0x2e
   12550:	bne	12568 <__assert_fail@plt+0xadc>
   12554:	add	r0, r8, #1
   12558:	mov	r1, r4
   1255c:	bl	11a80 <strspn@plt>
   12560:	add	r8, r8, r0
   12564:	ldrb	r1, [r8, #1]!
   12568:	cmp	r1, #122	; 0x7a
   1256c:	bhi	127d0 <__assert_fail@plt+0xd44>
   12570:	add	r2, pc, #4
   12574:	mov	r0, #2
   12578:	ldr	pc, [r2, r1, lsl #2]
   1257c:	ldrdeq	r2, [r1], -ip
   12580:	ldrdeq	r2, [r1], -r0
   12584:	ldrdeq	r2, [r1], -r0
   12588:	ldrdeq	r2, [r1], -r0
   1258c:	ldrdeq	r2, [r1], -r0
   12590:	ldrdeq	r2, [r1], -r0
   12594:	ldrdeq	r2, [r1], -r0
   12598:	ldrdeq	r2, [r1], -r0
   1259c:	ldrdeq	r2, [r1], -r0
   125a0:	ldrdeq	r2, [r1], -r0
   125a4:	ldrdeq	r2, [r1], -r0
   125a8:	ldrdeq	r2, [r1], -r0
   125ac:	ldrdeq	r2, [r1], -r0
   125b0:	ldrdeq	r2, [r1], -r0
   125b4:	ldrdeq	r2, [r1], -r0
   125b8:	ldrdeq	r2, [r1], -r0
   125bc:	ldrdeq	r2, [r1], -r0
   125c0:	ldrdeq	r2, [r1], -r0
   125c4:	ldrdeq	r2, [r1], -r0
   125c8:	ldrdeq	r2, [r1], -r0
   125cc:	ldrdeq	r2, [r1], -r0
   125d0:	ldrdeq	r2, [r1], -r0
   125d4:	ldrdeq	r2, [r1], -r0
   125d8:	ldrdeq	r2, [r1], -r0
   125dc:	ldrdeq	r2, [r1], -r0
   125e0:	ldrdeq	r2, [r1], -r0
   125e4:	ldrdeq	r2, [r1], -r0
   125e8:	ldrdeq	r2, [r1], -r0
   125ec:	ldrdeq	r2, [r1], -r0
   125f0:	ldrdeq	r2, [r1], -r0
   125f4:	ldrdeq	r2, [r1], -r0
   125f8:	ldrdeq	r2, [r1], -r0
   125fc:	ldrdeq	r2, [r1], -r0
   12600:	ldrdeq	r2, [r1], -r0
   12604:	ldrdeq	r2, [r1], -r0
   12608:	ldrdeq	r2, [r1], -r0
   1260c:	ldrdeq	r2, [r1], -r0
   12610:	ldrdeq	r2, [r1], -r0
   12614:	ldrdeq	r2, [r1], -r0
   12618:	ldrdeq	r2, [r1], -r0
   1261c:	ldrdeq	r2, [r1], -r0
   12620:	ldrdeq	r2, [r1], -r0
   12624:	ldrdeq	r2, [r1], -r0
   12628:	ldrdeq	r2, [r1], -r0
   1262c:	ldrdeq	r2, [r1], -r0
   12630:	ldrdeq	r2, [r1], -r0
   12634:	ldrdeq	r2, [r1], -r0
   12638:	ldrdeq	r2, [r1], -r0
   1263c:	ldrdeq	r2, [r1], -r0
   12640:	ldrdeq	r2, [r1], -r0
   12644:	ldrdeq	r2, [r1], -r0
   12648:	ldrdeq	r2, [r1], -r0
   1264c:	ldrdeq	r2, [r1], -r0
   12650:	ldrdeq	r2, [r1], -r0
   12654:	ldrdeq	r2, [r1], -r0
   12658:	ldrdeq	r2, [r1], -r0
   1265c:	ldrdeq	r2, [r1], -r0
   12660:	ldrdeq	r2, [r1], -r0
   12664:	ldrdeq	r2, [r1], -r0
   12668:	ldrdeq	r2, [r1], -r0
   1266c:	ldrdeq	r2, [r1], -r0
   12670:	ldrdeq	r2, [r1], -r0
   12674:	ldrdeq	r2, [r1], -r0
   12678:	ldrdeq	r2, [r1], -r0
   1267c:	ldrdeq	r2, [r1], -r0
   12680:	ldrdeq	r2, [r1], -r4
   12684:	ldrdeq	r2, [r1], -r0
   12688:	ldrdeq	r2, [r1], -r0
   1268c:	ldrdeq	r2, [r1], -r4
   12690:	ldrdeq	r2, [r1], -r0
   12694:	andeq	r2, r1, r8, lsr #15
   12698:	andeq	r2, r1, r8, ror #14
   1269c:	ldrdeq	r2, [r1], -r0
   126a0:	ldrdeq	r2, [r1], -r0
   126a4:	ldrdeq	r2, [r1], -r0
   126a8:	ldrdeq	r2, [r1], -r0
   126ac:	ldrdeq	r2, [r1], -r0
   126b0:	ldrdeq	r2, [r1], -r0
   126b4:	ldrdeq	r2, [r1], -r4
   126b8:	ldrdeq	r2, [r1], -r0
   126bc:	ldrdeq	r2, [r1], -r0
   126c0:	ldrdeq	r2, [r1], -r0
   126c4:	ldrdeq	r2, [r1], -r0
   126c8:	ldrdeq	r2, [r1], -r0
   126cc:	ldrdeq	r2, [r1], -r4
   126d0:	andeq	r2, r1, r8, lsl #15
   126d4:	ldrdeq	r2, [r1], -r0
   126d8:	andeq	r2, r1, r0, lsl #15
   126dc:	muleq	r1, r0, r7
   126e0:	andeq	r2, r1, r0, ror r7
   126e4:	andeq	r2, r1, r8, ror r7
   126e8:	ldrdeq	r2, [r1], -r0
   126ec:	ldrdeq	r2, [r1], -r0
   126f0:	ldrdeq	r2, [r1], -r0
   126f4:	ldrdeq	r2, [r1], -r0
   126f8:	ldrdeq	r2, [r1], -r0
   126fc:	ldrdeq	r2, [r1], -r0
   12700:	ldrdeq	r2, [r1], -r4
   12704:	andeq	r2, r1, r8, asr #15
   12708:	ldrdeq	r2, [r1], -r0
   1270c:	ldrdeq	r2, [r1], -r4
   12710:	ldrdeq	r2, [r1], -r0
   12714:			; <UNDEFINED> instruction: 0x000127b8
   12718:	andeq	r2, r1, r8, ror #14
   1271c:	andeq	r2, r1, r0, asr #15
   12720:	andeq	r2, r1, r0, lsr #15
   12724:	ldrdeq	r2, [r1], -r0
   12728:	ldrdeq	r2, [r1], -r0
   1272c:	ldrdeq	r2, [r1], -r0
   12730:	muleq	r1, r8, r7
   12734:	ldrdeq	r2, [r1], -r0
   12738:	ldrdeq	r2, [r1], -r0
   1273c:	ldrdeq	r2, [r1], -r0
   12740:	ldrdeq	r2, [r1], -r0
   12744:	ldrdeq	r2, [r1], -r0
   12748:			; <UNDEFINED> instruction: 0x000127b0
   1274c:	ldrdeq	r2, [r1], -r4
   12750:	andeq	r2, r1, r8, lsl #15
   12754:	ldrdeq	r2, [r1], -r0
   12758:	andeq	r2, r1, r0, lsl #15
   1275c:	muleq	r1, r0, r7
   12760:	andeq	r2, r1, r0, ror r7
   12764:	andeq	r2, r1, r8, ror r7
   12768:	mov	r0, #16
   1276c:	b	127d4 <__assert_fail@plt+0xd48>
   12770:	mov	r0, #64	; 0x40
   12774:	b	127d4 <__assert_fail@plt+0xd48>
   12778:	mov	r0, #128	; 0x80
   1277c:	b	127d4 <__assert_fail@plt+0xd48>
   12780:	mov	r0, #2048	; 0x800
   12784:	b	127d4 <__assert_fail@plt+0xd48>
   12788:	mov	r0, #8
   1278c:	b	127d4 <__assert_fail@plt+0xd48>
   12790:	mov	r0, #32
   12794:	b	127d4 <__assert_fail@plt+0xd48>
   12798:	movw	r0, #258	; 0x102
   1279c:	b	127d4 <__assert_fail@plt+0xd48>
   127a0:	mov	r0, #256	; 0x100
   127a4:	b	127d4 <__assert_fail@plt+0xd48>
   127a8:	mov	r0, #1
   127ac:	b	127d4 <__assert_fail@plt+0xd48>
   127b0:	mov	r0, #512	; 0x200
   127b4:	b	127d4 <__assert_fail@plt+0xd48>
   127b8:	mov	r0, #3
   127bc:	b	127d4 <__assert_fail@plt+0xd48>
   127c0:	mov	r0, #4
   127c4:	b	127d4 <__assert_fail@plt+0xd48>
   127c8:	mov	r0, #1024	; 0x400
   127cc:	b	127d4 <__assert_fail@plt+0xd48>
   127d0:	mov	r0, #0
   127d4:	orr	r5, r0, r5
   127d8:	b	12500 <__assert_fail@plt+0xa74>
   127dc:	ldr	r1, [sp, #100]	; 0x64
   127e0:	add	r0, sp, #128	; 0x80
   127e4:	mov	r2, r7
   127e8:	mov	r3, r5
   127ec:	str	r0, [sp]
   127f0:	mov	r0, r6
   127f4:	bl	1196c <statx@plt>
   127f8:	cmn	r0, #1
   127fc:	ble	129a0 <__assert_fail@plt+0xf14>
   12800:	ldr	r7, [sp, #268]	; 0x10c
   12804:	ldr	r3, [sp, #264]	; 0x108
   12808:	movw	r5, #65280	; 0xff00
   1280c:	ldrh	r2, [sp, #156]	; 0x9c
   12810:	ldr	r8, [sp, #92]	; 0x5c
   12814:	mov	r1, r0
   12818:	sub	lr, fp, #116	; 0x74
   1281c:	movt	r5, #15
   12820:	mov	ip, r5
   12824:	and	r5, r5, r3, lsl #8
   12828:	bic	r6, r7, #255	; 0xff
   1282c:	bfc	r3, #0, #12
   12830:	and	r0, r2, #45056	; 0xb000
   12834:	orr	r3, r3, r6, lsr #20
   12838:	orr	r0, r0, #16384	; 0x4000
   1283c:	str	r3, [fp, #-132]	; 0xffffff7c
   12840:	uxtb	r3, r7
   12844:	cmp	r0, #24576	; 0x6000
   12848:	mov	r0, r8
   1284c:	add	r7, sp, #144	; 0x90
   12850:	orr	r3, r5, r3
   12854:	ldreq	r0, [sp, #24]
   12858:	orr	r3, r3, r6, lsl #12
   1285c:	str	r3, [fp, #-136]	; 0xffffff78
   12860:	ldr	r3, [sp, #28]
   12864:	ldrd	r4, [r3]
   12868:	ldr	r3, [sp, #64]	; 0x40
   1286c:	strd	r4, [r3]
   12870:	str	r2, [fp, #-120]	; 0xffffff88
   12874:	ldm	r7, {r2, r3, r7}
   12878:	ldr	r6, [sp, #256]	; 0x100
   1287c:	stm	lr, {r2, r3, r7}
   12880:	and	r7, ip, r6, lsl #8
   12884:	bfc	r6, #0, #12
   12888:	ldr	r2, [sp, #260]	; 0x104
   1288c:	bic	r3, r2, #255	; 0xff
   12890:	uxtb	r2, r2
   12894:	orr	r2, r7, r2
   12898:	orr	r5, r6, r3, lsr #20
   1289c:	ldr	r7, [sp, #72]	; 0x48
   128a0:	orr	r4, r2, r3, lsl #12
   128a4:	ldr	r2, [sp, #68]	; 0x44
   128a8:	strd	r4, [r2]
   128ac:	ldr	r2, [sp, #32]
   128b0:	ldrd	r2, [r2]
   128b4:	strd	r2, [r7]
   128b8:	ldr	r2, [sp, #132]	; 0x84
   128bc:	ldr	r7, [sp, #76]	; 0x4c
   128c0:	str	r2, [fp, #-80]	; 0xffffffb0
   128c4:	ldr	r2, [sp, #36]	; 0x24
   128c8:	ldrd	r2, [r2]
   128cc:	strd	r2, [r7]
   128d0:	ldr	r2, [sp, #40]	; 0x28
   128d4:	ldr	r3, [sp, #44]	; 0x2c
   128d8:	ldr	r7, [sp, #80]	; 0x50
   128dc:	ldr	r2, [r2]
   128e0:	ldr	r3, [r3]
   128e4:	strd	r2, [r7]
   128e8:	ldr	r2, [sp, #48]	; 0x30
   128ec:	ldr	r3, [sp, #52]	; 0x34
   128f0:	ldr	r7, [sp, #84]	; 0x54
   128f4:	ldr	r2, [r2]
   128f8:	ldr	r3, [r3]
   128fc:	strd	r2, [r7]
   12900:	ldr	r2, [sp, #56]	; 0x38
   12904:	ldr	r3, [sp, #60]	; 0x3c
   12908:	ldr	r7, [sp, #88]	; 0x58
   1290c:	ldr	r2, [r2]
   12910:	ldr	r3, [r3]
   12914:	strd	r2, [r7]
   12918:	ldrb	r2, [sp, #129]	; 0x81
   1291c:	tst	r2, #8
   12920:	beq	1293c <__assert_fail@plt+0xeb0>
   12924:	ldr	r2, [sp, #12]
   12928:	ldr	r3, [sp, #16]
   1292c:	ldr	r7, [sp, #20]
   12930:	ldr	r2, [r2]
   12934:	ldr	r3, [r3]
   12938:	stm	r7, {r2, r3}
   1293c:	add	r2, sp, #116	; 0x74
   12940:	movw	r3, #17892	; 0x45e4
   12944:	str	r2, [sp]
   12948:	ldr	r2, [sp, #96]	; 0x60
   1294c:	movt	r3, #1
   12950:	bl	12c68 <__assert_fail@plt+0x11dc>
   12954:	eor	r7, r0, #1
   12958:	b	12a38 <__assert_fail@plt+0xfac>
   1295c:	movw	r1, #60231	; 0xeb47
   12960:	mov	r0, #0
   12964:	mov	r2, #5
   12968:	mov	r7, #0
   1296c:	movt	r1, #1
   12970:	bl	1172c <dcgettext@plt>
   12974:	mov	r1, r5
   12978:	mov	r5, r0
   1297c:	mov	r0, #4
   12980:	bl	1a440 <__assert_fail@plt+0x89b4>
   12984:	mov	r3, r0
   12988:	mov	r0, #0
   1298c:	mov	r1, #0
   12990:	mov	r2, r5
   12994:	add	r4, sp, #128	; 0x80
   12998:	bl	117e0 <error@plt>
   1299c:	b	12a3c <__assert_fail@plt+0xfb0>
   129a0:	bl	118e8 <__errno_location@plt>
   129a4:	ldr	r5, [r0]
   129a8:	ldr	r8, [sp, #92]	; 0x5c
   129ac:	tst	r7, #4096	; 0x1000
   129b0:	mov	r7, #0
   129b4:	mov	r0, #0
   129b8:	bne	12a18 <__assert_fail@plt+0xf8c>
   129bc:	movw	r1, #61536	; 0xf060
   129c0:	mov	r2, #5
   129c4:	movt	r1, #1
   129c8:	bl	1172c <dcgettext@plt>
   129cc:	ldr	r1, [sp, #96]	; 0x60
   129d0:	mov	r4, r0
   129d4:	mov	r0, #4
   129d8:	bl	1a440 <__assert_fail@plt+0x89b4>
   129dc:	mov	r3, r0
   129e0:	mov	r0, #0
   129e4:	mov	r1, r5
   129e8:	mov	r2, r4
   129ec:	bl	117e0 <error@plt>
   129f0:	b	12a38 <__assert_fail@plt+0xfac>
   129f4:	movw	r3, #12980	; 0x32b4
   129f8:	mov	r0, r8
   129fc:	mvn	r1, #0
   12a00:	mov	r2, r5
   12a04:	str	r4, [sp]
   12a08:	movt	r3, #1
   12a0c:	bl	12c68 <__assert_fail@plt+0x11dc>
   12a10:	eor	r7, r0, #1
   12a14:	b	12a3c <__assert_fail@plt+0xfb0>
   12a18:	movw	r1, #61509	; 0xf045
   12a1c:	mov	r2, #5
   12a20:	movt	r1, #1
   12a24:	bl	1172c <dcgettext@plt>
   12a28:	mov	r2, r0
   12a2c:	mov	r0, #0
   12a30:	mov	r1, r5
   12a34:	bl	117e0 <error@plt>
   12a38:	add	r4, sp, #128	; 0x80
   12a3c:	ldr	r0, [sp, #112]	; 0x70
   12a40:	add	r9, r9, #1
   12a44:	and	sl, sl, r7
   12a48:	cmp	r9, r0
   12a4c:	bne	123d0 <__assert_fail@plt+0x944>
   12a50:	eor	r0, sl, #1
   12a54:	sub	sp, fp, #28
   12a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a5c:	movw	r0, #388	; 0x184
   12a60:	movw	r2, #59213	; 0xe74d
   12a64:	mov	r1, #0
   12a68:	movt	r0, #3
   12a6c:	movt	r2, #1
   12a70:	str	r1, [sp, #4]
   12a74:	movw	r1, #59155	; 0xe713
   12a78:	ldr	r3, [r0]
   12a7c:	movw	r0, #484	; 0x1e4
   12a80:	str	r2, [sp]
   12a84:	movw	r2, #59199	; 0xe73f
   12a88:	movt	r1, #1
   12a8c:	movt	r0, #3
   12a90:	movt	r2, #1
   12a94:	ldr	r0, [r0]
   12a98:	bl	1b734 <__assert_fail@plt+0x9ca8>
   12a9c:	mov	r0, #0
   12aa0:	bl	11894 <exit@plt>
   12aa4:	mov	r0, #0
   12aa8:	bl	11b88 <__assert_fail@plt+0xfc>
   12aac:	mov	r0, #1
   12ab0:	bl	11b88 <__assert_fail@plt+0xfc>
   12ab4:	movw	r1, #59228	; 0xe75c
   12ab8:	mov	r0, #0
   12abc:	mov	r2, #5
   12ac0:	movt	r1, #1
   12ac4:	bl	1172c <dcgettext@plt>
   12ac8:	mov	r2, r0
   12acc:	mov	r0, #0
   12ad0:	mov	r1, #0
   12ad4:	bl	117e0 <error@plt>
   12ad8:	mov	r0, #1
   12adc:	bl	11b88 <__assert_fail@plt+0xfc>
   12ae0:	push	{r4, r5, r6, sl, fp, lr}
   12ae4:	add	fp, sp, #16
   12ae8:	cmp	r0, #0
   12aec:	beq	12b08 <__assert_fail@plt+0x107c>
   12af0:	cmp	r1, #0
   12af4:	beq	12b30 <__assert_fail@plt+0x10a4>
   12af8:	movw	r0, #61604	; 0xf0a4
   12afc:	movt	r0, #1
   12b00:	bl	1be88 <__assert_fail@plt+0xa3fc>
   12b04:	pop	{r4, r5, r6, sl, fp, pc}
   12b08:	cmp	r1, #0
   12b0c:	beq	12b4c <__assert_fail@plt+0x10c0>
   12b10:	bl	116a8 <is_selinux_enabled@plt>
   12b14:	cmp	r0, #1
   12b18:	movwge	r0, #61552	; 0xf070
   12b1c:	movtge	r0, #1
   12b20:	movwlt	r0, #61872	; 0xf1b0
   12b24:	movtlt	r0, #1
   12b28:	bl	1be88 <__assert_fail@plt+0xa3fc>
   12b2c:	pop	{r4, r5, r6, sl, fp, pc}
   12b30:	movw	r1, #59776	; 0xe980
   12b34:	mov	r0, #0
   12b38:	mov	r2, #5
   12b3c:	movt	r1, #1
   12b40:	bl	1172c <dcgettext@plt>
   12b44:	bl	1be88 <__assert_fail@plt+0xa3fc>
   12b48:	pop	{r4, r5, r6, sl, fp, pc}
   12b4c:	movw	r1, #59948	; 0xea2c
   12b50:	mov	r4, r2
   12b54:	mov	r0, #0
   12b58:	mov	r2, #5
   12b5c:	movt	r1, #1
   12b60:	bl	1172c <dcgettext@plt>
   12b64:	bl	1be88 <__assert_fail@plt+0xa3fc>
   12b68:	movw	r1, #60075	; 0xeaab
   12b6c:	mov	r5, r0
   12b70:	movw	r0, #60011	; 0xea6b
   12b74:	cmp	r4, #0
   12b78:	mov	r2, #5
   12b7c:	movt	r0, #1
   12b80:	movt	r1, #1
   12b84:	movne	r1, r0
   12b88:	mov	r0, #0
   12b8c:	bl	1172c <dcgettext@plt>
   12b90:	movw	r4, #60006	; 0xea66
   12b94:	mov	r2, r0
   12b98:	mov	r1, r5
   12b9c:	movt	r4, #1
   12ba0:	mov	r0, r4
   12ba4:	bl	1bf48 <__assert_fail@plt+0xa4bc>
   12ba8:	mov	r6, r0
   12bac:	mov	r0, r5
   12bb0:	bl	16638 <__assert_fail@plt+0x4bac>
   12bb4:	movw	r1, #60116	; 0xead4
   12bb8:	mov	r0, #0
   12bbc:	mov	r2, #5
   12bc0:	movt	r1, #1
   12bc4:	bl	1172c <dcgettext@plt>
   12bc8:	mov	r2, r0
   12bcc:	mov	r0, r4
   12bd0:	mov	r1, r6
   12bd4:	bl	1bf48 <__assert_fail@plt+0xa4bc>
   12bd8:	mov	r4, r0
   12bdc:	mov	r0, r6
   12be0:	bl	16638 <__assert_fail@plt+0x4bac>
   12be4:	bl	116a8 <is_selinux_enabled@plt>
   12be8:	cmp	r0, #1
   12bec:	blt	12c28 <__assert_fail@plt+0x119c>
   12bf0:	movw	r1, #60173	; 0xeb0d
   12bf4:	mov	r0, #0
   12bf8:	mov	r2, #5
   12bfc:	movt	r1, #1
   12c00:	bl	1172c <dcgettext@plt>
   12c04:	mov	r2, r0
   12c08:	movw	r0, #60006	; 0xea66
   12c0c:	mov	r1, r4
   12c10:	movt	r0, #1
   12c14:	bl	1bf48 <__assert_fail@plt+0xa4bc>
   12c18:	mov	r5, r0
   12c1c:	mov	r0, r4
   12c20:	bl	16638 <__assert_fail@plt+0x4bac>
   12c24:	b	12c2c <__assert_fail@plt+0x11a0>
   12c28:	mov	r5, r4
   12c2c:	movw	r1, #60186	; 0xeb1a
   12c30:	mov	r0, #0
   12c34:	mov	r2, #5
   12c38:	movt	r1, #1
   12c3c:	bl	1172c <dcgettext@plt>
   12c40:	mov	r2, r0
   12c44:	movw	r0, #60006	; 0xea66
   12c48:	mov	r1, r5
   12c4c:	movt	r0, #1
   12c50:	bl	1bf48 <__assert_fail@plt+0xa4bc>
   12c54:	mov	r4, r0
   12c58:	mov	r0, r5
   12c5c:	bl	16638 <__assert_fail@plt+0x4bac>
   12c60:	mov	r0, r4
   12c64:	pop	{r4, r5, r6, sl, fp, pc}
   12c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c6c:	add	fp, sp, #28
   12c70:	sub	sp, sp, #28
   12c74:	add	ip, sp, #16
   12c78:	mov	sl, r0
   12c7c:	stm	ip, {r1, r2, r3}
   12c80:	bl	118ac <strlen@plt>
   12c84:	add	r0, r0, #4
   12c88:	bl	1b968 <__assert_fail@plt+0x9edc>
   12c8c:	movw	r5, #61929	; 0xf1e9
   12c90:	movw	r6, #484	; 0x1e4
   12c94:	mov	r4, r0
   12c98:	mov	r9, #0
   12c9c:	movt	r5, #1
   12ca0:	movt	r6, #3
   12ca4:	b	12cb0 <__assert_fail@plt+0x1224>
   12ca8:	movw	r5, #61929	; 0xf1e9
   12cac:	movt	r5, #1
   12cb0:	ldrb	r1, [sl]
   12cb4:	cmp	r1, #37	; 0x25
   12cb8:	beq	12d84 <__assert_fail@plt+0x12f8>
   12cbc:	cmp	r1, #92	; 0x5c
   12cc0:	beq	12cf4 <__assert_fail@plt+0x1268>
   12cc4:	cmp	r1, #0
   12cc8:	beq	13248 <__assert_fail@plt+0x17bc>
   12ccc:	ldr	r0, [r6]
   12cd0:	ldr	r2, [r0, #20]
   12cd4:	ldr	r3, [r0, #24]
   12cd8:	cmp	r2, r3
   12cdc:	bcs	13204 <__assert_fail@plt+0x1778>
   12ce0:	add	r3, r2, #1
   12ce4:	add	sl, sl, #1
   12ce8:	str	r3, [r0, #20]
   12cec:	strb	r1, [r2]
   12cf0:	b	12cb0 <__assert_fail@plt+0x1224>
   12cf4:	movw	r0, #504	; 0x1f8
   12cf8:	movt	r0, #3
   12cfc:	ldrb	r0, [r0]
   12d00:	cmp	r0, #0
   12d04:	beq	12dfc <__assert_fail@plt+0x1370>
   12d08:	mov	r5, sl
   12d0c:	ldrb	r7, [r5, #1]!
   12d10:	and	r0, r7, #248	; 0xf8
   12d14:	cmp	r0, #48	; 0x30
   12d18:	bne	12e7c <__assert_fail@plt+0x13f0>
   12d1c:	mov	r5, sl
   12d20:	sub	r1, r7, #48	; 0x30
   12d24:	ldrb	r0, [r5, #2]!
   12d28:	and	r2, r0, #248	; 0xf8
   12d2c:	cmp	r2, #48	; 0x30
   12d30:	bne	12d58 <__assert_fail@plt+0x12cc>
   12d34:	add	r0, r0, r1, lsl #3
   12d38:	mov	r5, sl
   12d3c:	sub	r1, r0, #48	; 0x30
   12d40:	ldrb	r0, [r5, #3]!
   12d44:	and	r2, r0, #248	; 0xf8
   12d48:	cmp	r2, #48	; 0x30
   12d4c:	addeq	r0, r0, r1, lsl #3
   12d50:	addeq	r5, sl, #4
   12d54:	subeq	r1, r0, #48	; 0x30
   12d58:	ldr	r0, [r6]
   12d5c:	ldr	r2, [r0, #20]
   12d60:	ldr	r3, [r0, #24]
   12d64:	cmp	r2, r3
   12d68:	bcs	1321c <__assert_fail@plt+0x1790>
   12d6c:	add	r3, r2, #1
   12d70:	str	r3, [r0, #20]
   12d74:	strb	r1, [r2]
   12d78:	sub	r0, r5, #1
   12d7c:	add	sl, r0, #1
   12d80:	b	12ca8 <__assert_fail@plt+0x121c>
   12d84:	movw	r1, #61921	; 0xf1e1
   12d88:	add	r7, sl, #1
   12d8c:	mov	r0, r7
   12d90:	movt	r1, #1
   12d94:	bl	11a80 <strspn@plt>
   12d98:	add	r8, r7, r0
   12d9c:	mov	r1, r5
   12da0:	mov	r0, r8
   12da4:	bl	11a80 <strspn@plt>
   12da8:	mov	r1, r5
   12dac:	ldrb	r5, [r8, r0]!
   12db0:	cmp	r5, #46	; 0x2e
   12db4:	bne	12dc8 <__assert_fail@plt+0x133c>
   12db8:	add	r0, r8, #1
   12dbc:	bl	11a80 <strspn@plt>
   12dc0:	add	r8, r8, r0
   12dc4:	ldrb	r5, [r8, #1]!
   12dc8:	sub	r7, r8, sl
   12dcc:	mov	r0, r4
   12dd0:	mov	r1, sl
   12dd4:	mov	r2, r7
   12dd8:	bl	11708 <memcpy@plt>
   12ddc:	mov	r2, #0
   12de0:	cmp	r5, #71	; 0x47
   12de4:	bgt	12e28 <__assert_fail@plt+0x139c>
   12de8:	cmp	r5, #0
   12dec:	beq	12ff4 <__assert_fail@plt+0x1568>
   12df0:	cmp	r5, #37	; 0x25
   12df4:	beq	12ff8 <__assert_fail@plt+0x156c>
   12df8:	b	12e48 <__assert_fail@plt+0x13bc>
   12dfc:	ldr	r0, [r6]
   12e00:	ldr	r1, [r0, #20]
   12e04:	ldr	r2, [r0, #24]
   12e08:	cmp	r1, r2
   12e0c:	bcs	13200 <__assert_fail@plt+0x1774>
   12e10:	add	r2, r1, #1
   12e14:	add	sl, sl, #1
   12e18:	str	r2, [r0, #20]
   12e1c:	mov	r0, #92	; 0x5c
   12e20:	strb	r0, [r1]
   12e24:	b	12cb0 <__assert_fail@plt+0x1224>
   12e28:	cmp	r5, #72	; 0x48
   12e2c:	cmpne	r5, #76	; 0x4c
   12e30:	bne	12e48 <__assert_fail@plt+0x13bc>
   12e34:	ldr	r0, [sp, #24]
   12e38:	movw	r1, #17892	; 0x45e4
   12e3c:	movt	r1, #1
   12e40:	cmp	r0, r1
   12e44:	beq	1302c <__assert_fail@plt+0x15a0>
   12e48:	mov	r3, r5
   12e4c:	ldr	r0, [sp, #16]
   12e50:	mov	r1, r7
   12e54:	ldr	r7, [sp, #24]
   12e58:	str	r0, [sp]
   12e5c:	ldr	r0, [sp, #20]
   12e60:	str	r0, [sp, #4]
   12e64:	ldr	r0, [fp, #8]
   12e68:	str	r0, [sp, #8]
   12e6c:	mov	r0, r4
   12e70:	blx	r7
   12e74:	orr	r9, r9, r0
   12e78:	b	13024 <__assert_fail@plt+0x1598>
   12e7c:	sub	r0, r7, #34	; 0x22
   12e80:	cmp	r0, #86	; 0x56
   12e84:	bhi	1304c <__assert_fail@plt+0x15c0>
   12e88:	add	r1, pc, #0
   12e8c:	ldr	pc, [r1, r0, lsl #2]
   12e90:	andeq	r3, r1, r4, lsr #2
   12e94:	strdeq	r3, [r1], -r4
   12e98:	strdeq	r3, [r1], -r4
   12e9c:	strdeq	r3, [r1], -r4
   12ea0:	strdeq	r3, [r1], -r4
   12ea4:	strdeq	r3, [r1], -r4
   12ea8:	strdeq	r3, [r1], -r4
   12eac:	strdeq	r3, [r1], -r4
   12eb0:	strdeq	r3, [r1], -r4
   12eb4:	strdeq	r3, [r1], -r4
   12eb8:	strdeq	r3, [r1], -r4
   12ebc:	strdeq	r3, [r1], -r4
   12ec0:	strdeq	r3, [r1], -r4
   12ec4:	strdeq	r3, [r1], -r4
   12ec8:	strdeq	r3, [r1], -r4
   12ecc:	strdeq	r3, [r1], -r4
   12ed0:	strdeq	r3, [r1], -r4
   12ed4:	strdeq	r3, [r1], -r4
   12ed8:	strdeq	r3, [r1], -r4
   12edc:	strdeq	r3, [r1], -r4
   12ee0:	strdeq	r3, [r1], -r4
   12ee4:	strdeq	r3, [r1], -r4
   12ee8:	strdeq	r3, [r1], -r4
   12eec:	strdeq	r3, [r1], -r4
   12ef0:	strdeq	r3, [r1], -r4
   12ef4:	strdeq	r3, [r1], -r4
   12ef8:	strdeq	r3, [r1], -r4
   12efc:	strdeq	r3, [r1], -r4
   12f00:	strdeq	r3, [r1], -r4
   12f04:	strdeq	r3, [r1], -r4
   12f08:	strdeq	r3, [r1], -r4
   12f0c:	strdeq	r3, [r1], -r4
   12f10:	strdeq	r3, [r1], -r4
   12f14:	strdeq	r3, [r1], -r4
   12f18:	strdeq	r3, [r1], -r4
   12f1c:	strdeq	r3, [r1], -r4
   12f20:	strdeq	r3, [r1], -r4
   12f24:	strdeq	r3, [r1], -r4
   12f28:	strdeq	r3, [r1], -r4
   12f2c:	strdeq	r3, [r1], -r4
   12f30:	strdeq	r3, [r1], -r4
   12f34:	strdeq	r3, [r1], -r4
   12f38:	strdeq	r3, [r1], -r4
   12f3c:	strdeq	r3, [r1], -r4
   12f40:	strdeq	r3, [r1], -r4
   12f44:	strdeq	r3, [r1], -r4
   12f48:	strdeq	r3, [r1], -r4
   12f4c:	strdeq	r3, [r1], -r4
   12f50:	strdeq	r3, [r1], -r4
   12f54:	strdeq	r3, [r1], -r4
   12f58:	strdeq	r3, [r1], -r4
   12f5c:	strdeq	r3, [r1], -r4
   12f60:	strdeq	r3, [r1], -r4
   12f64:	strdeq	r3, [r1], -r4
   12f68:	strdeq	r3, [r1], -r4
   12f6c:	strdeq	r3, [r1], -r4
   12f70:	strdeq	r3, [r1], -r4
   12f74:	strdeq	r3, [r1], -r4
   12f78:	andeq	r3, r1, r4, lsr #2
   12f7c:	strdeq	r3, [r1], -r4
   12f80:	strdeq	r3, [r1], -r4
   12f84:	strdeq	r3, [r1], -r4
   12f88:	strdeq	r3, [r1], -r4
   12f8c:	andeq	r2, r1, ip, ror #31
   12f90:	andeq	r3, r1, r4, asr #1
   12f94:	strdeq	r3, [r1], -r4
   12f98:	strdeq	r3, [r1], -r4
   12f9c:	andeq	r3, r1, ip, lsr #1
   12fa0:	strheq	r3, [r1], -r4
   12fa4:	strdeq	r3, [r1], -r4
   12fa8:	strdeq	r3, [r1], -r4
   12fac:	strdeq	r3, [r1], -r4
   12fb0:	strdeq	r3, [r1], -r4
   12fb4:	strdeq	r3, [r1], -r4
   12fb8:	strdeq	r3, [r1], -r4
   12fbc:	strdeq	r3, [r1], -r4
   12fc0:	strheq	r3, [r1], -ip
   12fc4:	strdeq	r3, [r1], -r4
   12fc8:	strdeq	r3, [r1], -r4
   12fcc:	strdeq	r3, [r1], -r4
   12fd0:	andeq	r3, r1, ip, asr #1
   12fd4:	strdeq	r3, [r1], -r4
   12fd8:	andeq	r3, r1, r4, lsr #1
   12fdc:	strdeq	r3, [r1], -r4
   12fe0:	andeq	r3, r1, r0, lsr #2
   12fe4:	strdeq	r3, [r1], -r4
   12fe8:	ldrdeq	r3, [r1], -r4
   12fec:	mov	r7, #7
   12ff0:	b	13124 <__assert_fail@plt+0x1698>
   12ff4:	sub	r8, r8, #1
   12ff8:	cmp	r7, #2
   12ffc:	bcs	13270 <__assert_fail@plt+0x17e4>
   13000:	ldr	r0, [r6]
   13004:	ldr	r1, [r0, #20]
   13008:	ldr	r2, [r0, #24]
   1300c:	cmp	r1, r2
   13010:	bcs	13210 <__assert_fail@plt+0x1784>
   13014:	add	r2, r1, #1
   13018:	str	r2, [r0, #20]
   1301c:	mov	r0, #37	; 0x25
   13020:	strb	r0, [r1]
   13024:	add	sl, r8, #1
   13028:	b	12ca8 <__assert_fail@plt+0x121c>
   1302c:	mov	r0, r8
   13030:	ldrb	r3, [r0, #1]!
   13034:	cmp	r3, #100	; 0x64
   13038:	cmpne	r3, #114	; 0x72
   1303c:	bne	12e48 <__assert_fail@plt+0x13bc>
   13040:	mov	r8, r0
   13044:	mov	r2, r5
   13048:	b	12e4c <__assert_fail@plt+0x13c0>
   1304c:	cmp	r7, #0
   13050:	bne	130f4 <__assert_fail@plt+0x1668>
   13054:	movw	r1, #60364	; 0xebcc
   13058:	mov	r0, #0
   1305c:	mov	r2, #5
   13060:	movt	r1, #1
   13064:	bl	1172c <dcgettext@plt>
   13068:	mov	r2, r0
   1306c:	mov	r0, #0
   13070:	mov	r1, #0
   13074:	bl	117e0 <error@plt>
   13078:	ldr	r0, [r6]
   1307c:	ldr	r1, [r0, #20]
   13080:	ldr	r2, [r0, #24]
   13084:	cmp	r1, r2
   13088:	bcs	13234 <__assert_fail@plt+0x17a8>
   1308c:	add	r2, r1, #1
   13090:	str	r2, [r0, #20]
   13094:	mov	r0, #92	; 0x5c
   13098:	strb	r0, [r1]
   1309c:	add	sl, sl, #1
   130a0:	b	12ca8 <__assert_fail@plt+0x121c>
   130a4:	mov	r7, #9
   130a8:	b	13124 <__assert_fail@plt+0x1698>
   130ac:	mov	r7, #27
   130b0:	b	13124 <__assert_fail@plt+0x1698>
   130b4:	mov	r7, #12
   130b8:	b	13124 <__assert_fail@plt+0x1698>
   130bc:	mov	r7, #10
   130c0:	b	13124 <__assert_fail@plt+0x1698>
   130c4:	mov	r7, #8
   130c8:	b	13124 <__assert_fail@plt+0x1698>
   130cc:	mov	r7, #13
   130d0:	b	13124 <__assert_fail@plt+0x1698>
   130d4:	bl	1187c <__ctype_b_loc@plt>
   130d8:	mov	r1, sl
   130dc:	ldr	r0, [r0]
   130e0:	ldrb	r2, [r1, #2]!
   130e4:	add	r3, r0, r2, lsl #1
   130e8:	ldrb	r3, [r3, #1]
   130ec:	tst	r3, #16
   130f0:	bne	1314c <__assert_fail@plt+0x16c0>
   130f4:	movw	r1, #60631	; 0xecd7
   130f8:	mov	r0, #0
   130fc:	mov	r2, #5
   13100:	movt	r1, #1
   13104:	bl	1172c <dcgettext@plt>
   13108:	mov	r2, r0
   1310c:	mov	r0, #0
   13110:	mov	r1, #0
   13114:	mov	r3, r7
   13118:	bl	117e0 <error@plt>
   1311c:	b	13124 <__assert_fail@plt+0x1698>
   13120:	mov	r7, #11
   13124:	ldr	r0, [r6]
   13128:	ldr	r1, [r0, #20]
   1312c:	ldr	r2, [r0, #24]
   13130:	cmp	r1, r2
   13134:	bcs	13228 <__assert_fail@plt+0x179c>
   13138:	add	r2, r1, #1
   1313c:	str	r2, [r0, #20]
   13140:	strb	r7, [r1]
   13144:	add	sl, r5, #1
   13148:	b	12ca8 <__assert_fail@plt+0x121c>
   1314c:	sub	r3, r2, #97	; 0x61
   13150:	uxtb	r7, r3
   13154:	mvn	r3, #86	; 0x56
   13158:	cmp	r7, #6
   1315c:	bcc	13174 <__assert_fail@plt+0x16e8>
   13160:	sub	r3, r2, #65	; 0x41
   13164:	uxtb	r3, r3
   13168:	cmp	r3, #6
   1316c:	mvn	r3, #47	; 0x2f
   13170:	mvncc	r3, #54	; 0x36
   13174:	add	r2, r3, r2
   13178:	ldrb	r3, [sl, #3]!
   1317c:	add	r0, r0, r3, lsl #1
   13180:	ldrb	r0, [r0, #1]
   13184:	tst	r0, #16
   13188:	bne	1319c <__assert_fail@plt+0x1710>
   1318c:	movw	r5, #61929	; 0xf1e9
   13190:	mov	sl, r1
   13194:	movt	r5, #1
   13198:	b	131d8 <__assert_fail@plt+0x174c>
   1319c:	sub	r1, r3, #97	; 0x61
   131a0:	movw	r5, #61929	; 0xf1e9
   131a4:	lsl	r0, r2, #4
   131a8:	uxtb	r2, r1
   131ac:	mvn	r1, #86	; 0x56
   131b0:	movt	r5, #1
   131b4:	cmp	r2, #6
   131b8:	bcc	131d0 <__assert_fail@plt+0x1744>
   131bc:	sub	r1, r3, #65	; 0x41
   131c0:	uxtb	r1, r1
   131c4:	cmp	r1, #6
   131c8:	mvn	r1, #47	; 0x2f
   131cc:	mvncc	r1, #54	; 0x36
   131d0:	add	r1, r1, r3
   131d4:	add	r2, r1, r0
   131d8:	ldr	r0, [r6]
   131dc:	ldr	r1, [r0, #20]
   131e0:	ldr	r3, [r0, #24]
   131e4:	cmp	r1, r3
   131e8:	bcs	13240 <__assert_fail@plt+0x17b4>
   131ec:	add	r3, r1, #1
   131f0:	add	sl, sl, #1
   131f4:	str	r3, [r0, #20]
   131f8:	strb	r2, [r1]
   131fc:	b	12cb0 <__assert_fail@plt+0x1224>
   13200:	mov	r1, #92	; 0x5c
   13204:	bl	11990 <__overflow@plt>
   13208:	add	sl, sl, #1
   1320c:	b	12cb0 <__assert_fail@plt+0x1224>
   13210:	mov	r1, #37	; 0x25
   13214:	bl	11990 <__overflow@plt>
   13218:	b	13024 <__assert_fail@plt+0x1598>
   1321c:	uxtb	r1, r1
   13220:	bl	11990 <__overflow@plt>
   13224:	b	12d78 <__assert_fail@plt+0x12ec>
   13228:	mov	r1, r7
   1322c:	bl	11990 <__overflow@plt>
   13230:	b	13144 <__assert_fail@plt+0x16b8>
   13234:	mov	r1, #92	; 0x5c
   13238:	bl	11990 <__overflow@plt>
   1323c:	b	1309c <__assert_fail@plt+0x1610>
   13240:	uxtb	r1, r2
   13244:	b	13204 <__assert_fail@plt+0x1778>
   13248:	mov	r0, r4
   1324c:	bl	16638 <__assert_fail@plt+0x4bac>
   13250:	movw	r0, #384	; 0x180
   13254:	ldr	r1, [r6]
   13258:	movt	r0, #3
   1325c:	ldr	r0, [r0]
   13260:	bl	11678 <fputs_unlocked@plt>
   13264:	and	r0, r9, #1
   13268:	sub	sp, fp, #28
   1326c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13270:	mov	r0, r4
   13274:	mov	r1, #0
   13278:	mov	r2, #5
   1327c:	strb	r5, [r0, r7]!
   13280:	strb	r1, [r0, #1]
   13284:	movw	r1, #60342	; 0xebb6
   13288:	mov	r0, #0
   1328c:	movt	r1, #1
   13290:	bl	1172c <dcgettext@plt>
   13294:	mov	r5, r0
   13298:	mov	r0, r4
   1329c:	bl	1a968 <__assert_fail@plt+0x8edc>
   132a0:	mov	r3, r0
   132a4:	mov	r0, #1
   132a8:	mov	r1, #0
   132ac:	mov	r2, r5
   132b0:	bl	117e0 <error@plt>
   132b4:	push	{r4, r5, r6, sl, fp, lr}
   132b8:	add	fp, sp, #16
   132bc:	sub	sp, sp, #8
   132c0:	mov	r4, r1
   132c4:	sub	r1, r3, #83	; 0x53
   132c8:	cmp	r1, #33	; 0x21
   132cc:	bhi	13414 <__assert_fail@plt+0x1988>
   132d0:	mov	r5, r0
   132d4:	ldr	r0, [fp, #16]
   132d8:	add	r2, pc, #0
   132dc:	ldr	pc, [r2, r1, lsl #2]
   132e0:	andeq	r3, r1, r8, ror #6
   132e4:	andeq	r3, r1, r8, ror r3
   132e8:	andeq	r3, r1, r4, lsl r4
   132ec:	andeq	r3, r1, r4, lsl r4
   132f0:	andeq	r3, r1, r4, lsl r4
   132f4:	andeq	r3, r1, r4, lsl r4
   132f8:	andeq	r3, r1, r4, lsl r4
   132fc:	andeq	r3, r1, r4, lsl r4
   13300:	andeq	r3, r1, r4, lsl r4
   13304:	andeq	r3, r1, r4, lsl r4
   13308:	andeq	r3, r1, r4, lsl r4
   1330c:	andeq	r3, r1, r4, lsl r4
   13310:	andeq	r3, r1, r4, lsl r4
   13314:	andeq	r3, r1, r4, lsl r4
   13318:	andeq	r3, r1, r4, asr #8
   1331c:	andeq	r3, r1, ip, asr #8
   13320:	andeq	r3, r1, r4, asr r4
   13324:	andeq	r3, r1, ip, asr r4
   13328:	andeq	r3, r1, r4, lsl r4
   1332c:	andeq	r3, r1, r4, ror #8
   13330:	andeq	r3, r1, r4, lsl r4
   13334:	andeq	r3, r1, r4, lsl r4
   13338:	andeq	r3, r1, r8, ror r4
   1333c:	andeq	r3, r1, r4, lsl r4
   13340:	andeq	r3, r1, r4, lsl r4
   13344:	andeq	r3, r1, r4, lsl #9
   13348:	andeq	r3, r1, r4, lsl r4
   1334c:	andeq	r3, r1, ip, lsl #9
   13350:	andeq	r3, r1, r4, lsl r4
   13354:	andeq	r3, r1, r4, lsl r4
   13358:	andeq	r3, r1, r4, lsl r4
   1335c:	andeq	r3, r1, r4, lsl r4
   13360:	muleq	r1, ip, r4
   13364:			; <UNDEFINED> instruction: 0x000134b4
   13368:	ldr	r2, [r0, #60]	; 0x3c
   1336c:	cmp	r2, #0
   13370:	ldreq	r2, [r0, #4]
   13374:	b	134a0 <__assert_fail@plt+0x1a14>
   13378:	ldr	r0, [r0]
   1337c:	movw	r1, #4519	; 0x11a7
   13380:	movt	r1, #305	; 0x131
   13384:	cmp	r0, r1
   13388:	bgt	134cc <__assert_fail@plt+0x1a40>
   1338c:	movw	r1, #16963	; 0x4243
   13390:	cmp	r0, r1
   13394:	bgt	13558 <__assert_fail@plt+0x1acc>
   13398:	movw	r1, #19777	; 0x4d41
   1339c:	movt	r1, #65363	; 0xff53
   133a0:	cmp	r0, r1
   133a4:	bgt	13634 <__assert_fail@plt+0x1ba8>
   133a8:	movw	r1, #5519	; 0x158f
   133ac:	movt	r1, #51031	; 0xc757
   133b0:	cmp	r0, r1
   133b4:	ble	13780 <__assert_fail@plt+0x1cf4>
   133b8:	movw	r1, #57825	; 0xe1e1
   133bc:	movt	r1, #57589	; 0xe0f5
   133c0:	cmp	r0, r1
   133c4:	ble	139b4 <__assert_fail@plt+0x1f28>
   133c8:	movw	r1, #65419	; 0xff8b
   133cc:	movt	r1, #63868	; 0xf97c
   133d0:	cmp	r0, r1
   133d4:	ble	13da8 <__assert_fail@plt+0x231c>
   133d8:	movw	r1, #65420	; 0xff8c
   133dc:	movt	r1, #63868	; 0xf97c
   133e0:	cmp	r0, r1
   133e4:	beq	14270 <__assert_fail@plt+0x27e4>
   133e8:	movw	r1, #59465	; 0xe849
   133ec:	movt	r1, #63893	; 0xf995
   133f0:	cmp	r0, r1
   133f4:	beq	1427c <__assert_fail@plt+0x27f0>
   133f8:	movw	r1, #19778	; 0x4d42
   133fc:	movt	r1, #65107	; 0xfe53
   13400:	cmp	r0, r1
   13404:	bne	14544 <__assert_fail@plt+0x2ab8>
   13408:	movw	r6, #61340	; 0xef9c
   1340c:	movt	r6, #1
   13410:	b	145bc <__assert_fail@plt+0x2b30>
   13414:	movw	r0, #484	; 0x1e4
   13418:	movt	r0, #3
   1341c:	ldr	r0, [r0]
   13420:	ldr	r1, [r0, #20]
   13424:	ldr	r2, [r0, #24]
   13428:	cmp	r1, r2
   1342c:	bcs	145d8 <__assert_fail@plt+0x2b4c>
   13430:	add	r2, r1, #1
   13434:	str	r2, [r0, #20]
   13438:	mov	r0, #63	; 0x3f
   1343c:	strb	r0, [r1]
   13440:	b	145cc <__assert_fail@plt+0x2b40>
   13444:	ldrd	r2, [r0, #24]
   13448:	b	13468 <__assert_fail@plt+0x19dc>
   1344c:	ldrd	r2, [r0, #8]
   13450:	b	13468 <__assert_fail@plt+0x19dc>
   13454:	ldrd	r2, [r0, #32]
   13458:	b	134a4 <__assert_fail@plt+0x1a18>
   1345c:	ldrd	r2, [r0, #40]	; 0x28
   13460:	b	13468 <__assert_fail@plt+0x19dc>
   13464:	ldrd	r2, [r0, #16]
   13468:	mov	r0, r5
   1346c:	mov	r1, r4
   13470:	bl	15128 <__assert_fail@plt+0x369c>
   13474:	b	145cc <__assert_fail@plt+0x2b40>
   13478:	ldr	r3, [r0, #48]	; 0x30
   1347c:	ldr	r2, [r0, #52]	; 0x34
   13480:	b	134bc <__assert_fail@plt+0x1a30>
   13484:	ldr	r2, [r0, #56]	; 0x38
   13488:	b	134a0 <__assert_fail@plt+0x1a14>
   1348c:	ldr	r2, [fp, #12]
   13490:	mov	r0, r5
   13494:	mov	r1, r4
   13498:	b	145c8 <__assert_fail@plt+0x2b3c>
   1349c:	ldr	r2, [r0, #4]
   134a0:	asr	r3, r2, #31
   134a4:	mov	r0, r5
   134a8:	mov	r1, r4
   134ac:	bl	14ec8 <__assert_fail@plt+0x343c>
   134b0:	b	145cc <__assert_fail@plt+0x2b40>
   134b4:	ldr	r2, [r0]
   134b8:	asr	r3, r2, #31
   134bc:	mov	r0, r5
   134c0:	mov	r1, r4
   134c4:	bl	14ff8 <__assert_fail@plt+0x356c>
   134c8:	b	145cc <__assert_fail@plt+0x2b40>
   134cc:	movw	r1, #255	; 0xff
   134d0:	movt	r1, #21529	; 0x5419
   134d4:	cmp	r0, r1
   134d8:	bgt	135b8 <__assert_fail@plt+0x1b2c>
   134dc:	movw	r1, #17993	; 0x4649
   134e0:	movt	r1, #12627	; 0x3153
   134e4:	cmp	r0, r1
   134e8:	ble	13678 <__assert_fail@plt+0x1bec>
   134ec:	movw	r1, #18002	; 0x4652
   134f0:	movt	r1, #18256	; 0x4750
   134f4:	cmp	r0, r1
   134f8:	ble	137cc <__assert_fail@plt+0x1d40>
   134fc:	movw	r1, #12620	; 0x314c
   13500:	movt	r1, #21318	; 0x5346
   13504:	cmp	r0, r1
   13508:	ble	139f0 <__assert_fail@plt+0x1f64>
   1350c:	movw	r1, #18501	; 0x4845
   13510:	movt	r1, #21318	; 0x5346
   13514:	cmp	r0, r1
   13518:	ble	13dd4 <__assert_fail@plt+0x2348>
   1351c:	movw	r1, #18502	; 0x4846
   13520:	movt	r1, #21318	; 0x5346
   13524:	cmp	r0, r1
   13528:	beq	14288 <__assert_fail@plt+0x27fc>
   1352c:	movw	r1, #21582	; 0x544e
   13530:	movt	r1, #21318	; 0x5346
   13534:	cmp	r0, r1
   13538:	beq	14294 <__assert_fail@plt+0x2808>
   1353c:	movw	r1, #17227	; 0x434b
   13540:	movt	r1, #21327	; 0x534f
   13544:	cmp	r0, r1
   13548:	bne	14544 <__assert_fail@plt+0x2ab8>
   1354c:	movw	r6, #61350	; 0xefa6
   13550:	movt	r6, #1
   13554:	b	145bc <__assert_fail@plt+0x2b30>
   13558:	movw	r1, #61264	; 0xef50
   1355c:	cmp	r0, r1
   13560:	bgt	136d4 <__assert_fail@plt+0x1c48>
   13564:	movw	r1, #26984	; 0x6968
   13568:	cmp	r0, r1
   1356c:	ble	13818 <__assert_fail@plt+0x1d8c>
   13570:	movw	r1, #40863	; 0x9f9f
   13574:	cmp	r0, r1
   13578:	ble	13a2c <__assert_fail@plt+0x1fa0>
   1357c:	movw	r1, #40865	; 0x9fa1
   13580:	cmp	r0, r1
   13584:	ble	13e00 <__assert_fail@plt+0x2374>
   13588:	movw	r1, #40866	; 0x9fa2
   1358c:	cmp	r0, r1
   13590:	beq	142a0 <__assert_fail@plt+0x2814>
   13594:	movw	r1, #44533	; 0xadf5
   13598:	cmp	r0, r1
   1359c:	beq	142ac <__assert_fail@plt+0x2820>
   135a0:	movw	r1, #44543	; 0xadff
   135a4:	cmp	r0, r1
   135a8:	bne	14544 <__assert_fail@plt+0x2ab8>
   135ac:	movw	r6, #60681	; 0xed09
   135b0:	movt	r6, #1
   135b4:	b	145bc <__assert_fail@plt+0x2b30>
   135b8:	movw	r1, #21826	; 0x5542
   135bc:	movt	r1, #25971	; 0x6573
   135c0:	cmp	r0, r1
   135c4:	ble	13724 <__assert_fail@plt+0x1c98>
   135c8:	movw	r1, #26226	; 0x6672
   135cc:	movt	r1, #29539	; 0x7363
   135d0:	cmp	r0, r1
   135d4:	ble	13854 <__assert_fail@plt+0x1dc8>
   135d8:	movw	r1, #25454	; 0x636e
   135dc:	movt	r1, #29793	; 0x7461
   135e0:	cmp	r0, r1
   135e4:	ble	13a5c <__assert_fail@plt+0x1fd0>
   135e8:	movw	r1, #16981	; 0x4255
   135ec:	movt	r1, #30831	; 0x786f
   135f0:	cmp	r0, r1
   135f4:	ble	13e24 <__assert_fail@plt+0x2398>
   135f8:	movw	r1, #16982	; 0x4256
   135fc:	movt	r1, #30831	; 0x786f
   13600:	cmp	r0, r1
   13604:	beq	142b8 <__assert_fail@plt+0x282c>
   13608:	movw	r1, #30256	; 0x7630
   1360c:	movt	r1, #31052	; 0x794c
   13610:	cmp	r0, r1
   13614:	beq	142c4 <__assert_fail@plt+0x2838>
   13618:	movw	r1, #26227	; 0x6673
   1361c:	movt	r1, #31868	; 0x7c7c
   13620:	cmp	r0, r1
   13624:	bne	14544 <__assert_fail@plt+0x2ab8>
   13628:	movw	r6, #61229	; 0xef2d
   1362c:	movt	r6, #1
   13630:	b	145bc <__assert_fail@plt+0x2b30>
   13634:	movw	r1, #7376	; 0x1cd0
   13638:	cmp	r0, r1
   1363c:	bgt	13984 <__assert_fail@plt+0x1ef8>
   13640:	movw	r1, #390	; 0x186
   13644:	cmp	r0, r1
   13648:	bgt	13a98 <__assert_fail@plt+0x200c>
   1364c:	movw	r1, #19778	; 0x4d42
   13650:	movt	r1, #65363	; 0xff53
   13654:	cmp	r0, r1
   13658:	beq	14220 <__assert_fail@plt+0x2794>
   1365c:	cmp	r0, #47	; 0x2f
   13660:	beq	1422c <__assert_fail@plt+0x27a0>
   13664:	cmp	r0, #51	; 0x33
   13668:	bne	14544 <__assert_fail@plt+0x2ab8>
   1366c:	movw	r6, #61468	; 0xf01c
   13670:	movt	r6, #1
   13674:	b	145bc <__assert_fail@plt+0x2b30>
   13678:	movw	r1, #513	; 0x201
   1367c:	movt	r1, #6528	; 0x1980
   13680:	cmp	r0, r1
   13684:	bgt	138a0 <__assert_fail@plt+0x1e14>
   13688:	movw	r1, #3023	; 0xbcf
   1368c:	movt	r1, #3024	; 0xbd0
   13690:	cmp	r0, r1
   13694:	bgt	13b30 <__assert_fail@plt+0x20a4>
   13698:	movw	r1, #6451	; 0x1933
   1369c:	movt	r1, #2308	; 0x904
   136a0:	cmp	r0, r1
   136a4:	bgt	13e50 <__assert_fail@plt+0x23c4>
   136a8:	movw	r1, #4520	; 0x11a8
   136ac:	movt	r1, #305	; 0x131
   136b0:	cmp	r0, r1
   136b4:	beq	142d0 <__assert_fail@plt+0x2844>
   136b8:	movw	r1, #22561	; 0x5821
   136bc:	movt	r1, #1893	; 0x765
   136c0:	cmp	r0, r1
   136c4:	bne	14544 <__assert_fail@plt+0x2ab8>
   136c8:	movw	r6, #61260	; 0xef4c
   136cc:	movt	r6, #1
   136d0:	b	145bc <__assert_fail@plt+0x2b30>
   136d4:	movw	r1, #6547	; 0x1993
   136d8:	movt	r1, #258	; 0x102
   136dc:	cmp	r0, r1
   136e0:	bgt	138ec <__assert_fail@plt+0x1e60>
   136e4:	movw	r1, #57578	; 0xe0ea
   136e8:	movt	r1, #39	; 0x27
   136ec:	cmp	r0, r1
   136f0:	bgt	13b6c <__assert_fail@plt+0x20e0>
   136f4:	movw	r1, #61790	; 0xf15e
   136f8:	cmp	r0, r1
   136fc:	bgt	13e7c <__assert_fail@plt+0x23f0>
   13700:	movw	r1, #61265	; 0xef51
   13704:	cmp	r0, r1
   13708:	beq	142dc <__assert_fail@plt+0x2850>
   1370c:	movw	r1, #61267	; 0xef53
   13710:	cmp	r0, r1
   13714:	bne	14544 <__assert_fail@plt+0x2ab8>
   13718:	movw	r6, #60922	; 0xedfa
   1371c:	movt	r6, #1
   13720:	b	145bc <__assert_fail@plt+0x2b30>
   13724:	movw	r1, #26475	; 0x676b
   13728:	movt	r1, #24933	; 0x6165
   1372c:	cmp	r0, r1
   13730:	bgt	13938 <__assert_fail@plt+0x1eac>
   13734:	movw	r1, #27119	; 0x69ef
   13738:	movt	r1, #23100	; 0x5a3c
   1373c:	cmp	r0, r1
   13740:	bgt	13ba8 <__assert_fail@plt+0x211c>
   13744:	movw	r1, #22568	; 0x5828
   13748:	movt	r1, #22569	; 0x5829
   1374c:	cmp	r0, r1
   13750:	bgt	13ea4 <__assert_fail@plt+0x2418>
   13754:	movw	r1, #256	; 0x100
   13758:	movt	r1, #21529	; 0x5419
   1375c:	cmp	r0, r1
   13760:	beq	13e98 <__assert_fail@plt+0x240c>
   13764:	movw	r1, #18003	; 0x4653
   13768:	movt	r1, #22106	; 0x565a
   1376c:	cmp	r0, r1
   13770:	bne	14544 <__assert_fail@plt+0x2ab8>
   13774:	movw	r6, #61441	; 0xf001
   13778:	movt	r6, #1
   1377c:	b	145bc <__assert_fail@plt+0x2b30>
   13780:	movw	r1, #43753	; 0xaae9
   13784:	movt	r1, #43735	; 0xaad7
   13788:	cmp	r0, r1
   1378c:	bgt	13be4 <__assert_fail@plt+0x2158>
   13790:	movw	r1, #22773	; 0x58f5
   13794:	movt	r1, #38276	; 0x9584
   13798:	cmp	r0, r1
   1379c:	bgt	13ed0 <__assert_fail@plt+0x2444>
   137a0:	movw	r1, #22774	; 0x58f6
   137a4:	movt	r1, #34180	; 0x8584
   137a8:	cmp	r0, r1
   137ac:	beq	142e8 <__assert_fail@plt+0x285c>
   137b0:	movw	r1, #26686	; 0x683e
   137b4:	movt	r1, #37155	; 0x9123
   137b8:	cmp	r0, r1
   137bc:	bne	14544 <__assert_fail@plt+0x2ab8>
   137c0:	movw	r6, #60760	; 0xed58
   137c4:	movt	r6, #1
   137c8:	b	145bc <__assert_fail@plt+0x2b30>
   137cc:	movw	r1, #16705	; 0x4141
   137d0:	movt	r1, #17485	; 0x444d
   137d4:	cmp	r0, r1
   137d8:	bgt	13c20 <__assert_fail@plt+0x2194>
   137dc:	movw	r1, #20044	; 0x4e4c
   137e0:	movt	r1, #16969	; 0x4249
   137e4:	cmp	r0, r1
   137e8:	bgt	13efc <__assert_fail@plt+0x2470>
   137ec:	movw	r1, #17994	; 0x464a
   137f0:	movt	r1, #12627	; 0x3153
   137f4:	cmp	r0, r1
   137f8:	beq	142f4 <__assert_fail@plt+0x2868>
   137fc:	movw	r1, #21297	; 0x5331
   13800:	movt	r1, #16966	; 0x4246
   13804:	cmp	r0, r1
   13808:	bne	14544 <__assert_fail@plt+0x2ab8>
   1380c:	movw	r6, #60727	; 0xed37
   13810:	movt	r6, #1
   13814:	b	145bc <__assert_fail@plt+0x2b30>
   13818:	movw	r1, #19801	; 0x4d59
   1381c:	cmp	r0, r1
   13820:	bgt	13c5c <__assert_fail@plt+0x21d0>
   13824:	movw	r1, #18519	; 0x4857
   13828:	cmp	r0, r1
   1382c:	bgt	13f28 <__assert_fail@plt+0x249c>
   13830:	movw	r1, #16964	; 0x4244
   13834:	cmp	r0, r1
   13838:	beq	14300 <__assert_fail@plt+0x2874>
   1383c:	movw	r1, #18475	; 0x482b
   13840:	cmp	r0, r1
   13844:	bne	14544 <__assert_fail@plt+0x2ab8>
   13848:	movw	r6, #60986	; 0xee3a
   1384c:	movt	r6, #1
   13850:	b	145bc <__assert_fail@plt+0x2b30>
   13854:	movw	r1, #18002	; 0x4652
   13858:	movt	r1, #27457	; 0x6b41
   1385c:	cmp	r0, r1
   13860:	bgt	13c8c <__assert_fail@plt+0x2200>
   13864:	movw	r1, #26984	; 0x6968
   13868:	movt	r1, #26457	; 0x6759
   1386c:	cmp	r0, r1
   13870:	bgt	13f4c <__assert_fail@plt+0x24c0>
   13874:	movw	r1, #21827	; 0x5543
   13878:	movt	r1, #25971	; 0x6573
   1387c:	cmp	r0, r1
   13880:	beq	1430c <__assert_fail@plt+0x2880>
   13884:	movw	r1, #21830	; 0x5546
   13888:	movt	r1, #25971	; 0x6573
   1388c:	cmp	r0, r1
   13890:	bne	14544 <__assert_fail@plt+0x2ab8>
   13894:	movw	r6, #60948	; 0xee14
   13898:	movt	r6, #1
   1389c:	b	145bc <__assert_fail@plt+0x2b30>
   138a0:	movw	r1, #6404	; 0x1904
   138a4:	movt	r1, #9221	; 0x2405
   138a8:	cmp	r0, r1
   138ac:	bgt	13cc8 <__assert_fail@plt+0x223c>
   138b0:	movw	r1, #64205	; 0xfacd
   138b4:	movt	r1, #7085	; 0x1bad
   138b8:	cmp	r0, r1
   138bc:	bgt	13f78 <__assert_fail@plt+0x24ec>
   138c0:	movw	r1, #514	; 0x202
   138c4:	movt	r1, #6528	; 0x1980
   138c8:	cmp	r0, r1
   138cc:	beq	14318 <__assert_fail@plt+0x288c>
   138d0:	movw	r1, #806	; 0x326
   138d4:	movt	r1, #6531	; 0x1983
   138d8:	cmp	r0, r1
   138dc:	bne	14544 <__assert_fail@plt+0x2ab8>
   138e0:	movw	r6, #60942	; 0xee0e
   138e4:	movt	r6, #1
   138e8:	b	145bc <__assert_fail@plt+0x2b30>
   138ec:	movw	r1, #53612	; 0xd16c
   138f0:	movt	r1, #303	; 0x12f
   138f4:	cmp	r0, r1
   138f8:	bgt	13d04 <__assert_fail@plt+0x2278>
   138fc:	movw	r1, #6548	; 0x1994
   13900:	movt	r1, #258	; 0x102
   13904:	cmp	r0, r1
   13908:	beq	14258 <__assert_fail@plt+0x27cc>
   1390c:	movw	r1, #6551	; 0x1997
   13910:	movt	r1, #258	; 0x102
   13914:	cmp	r0, r1
   13918:	beq	14264 <__assert_fail@plt+0x27d8>
   1391c:	movw	r1, #6512	; 0x1970
   13920:	movt	r1, #278	; 0x116
   13924:	cmp	r0, r1
   13928:	bne	14544 <__assert_fail@plt+0x2ab8>
   1392c:	movw	r6, #60972	; 0xee2c
   13930:	movt	r6, #1
   13934:	b	145bc <__assert_fail@plt+0x2b30>
   13938:	movw	r1, #25969	; 0x6571
   1393c:	movt	r1, #25189	; 0x6265
   13940:	cmp	r0, r1
   13944:	bgt	13d3c <__assert_fail@plt+0x22b0>
   13948:	movw	r1, #25973	; 0x6575
   1394c:	movt	r1, #25188	; 0x6264
   13950:	cmp	r0, r1
   13954:	bgt	13fa4 <__assert_fail@plt+0x2518>
   13958:	movw	r1, #26476	; 0x676c
   1395c:	movt	r1, #24933	; 0x6165
   13960:	cmp	r0, r1
   13964:	beq	14324 <__assert_fail@plt+0x2898>
   13968:	movw	r1, #26227	; 0x6673
   1396c:	movt	r1, #24949	; 0x6175
   13970:	cmp	r0, r1
   13974:	bne	14544 <__assert_fail@plt+0x2ab8>
   13978:	movw	r6, #60700	; 0xed1c
   1397c:	movt	r6, #1
   13980:	b	145bc <__assert_fail@plt+0x2b30>
   13984:	movw	r1, #13363	; 0x3433
   13988:	cmp	r0, r1
   1398c:	ble	13d78 <__assert_fail@plt+0x22ec>
   13990:	movw	r1, #16387	; 0x4003
   13994:	cmp	r0, r1
   13998:	bgt	13fd0 <__assert_fail@plt+0x2544>
   1399c:	movw	r1, #13364	; 0x3434
   139a0:	cmp	r0, r1
   139a4:	beq	14330 <__assert_fail@plt+0x28a4>
   139a8:	cmp	r0, #16384	; 0x4000
   139ac:	beq	14064 <__assert_fail@plt+0x25d8>
   139b0:	b	14544 <__assert_fail@plt+0x2ab8>
   139b4:	movw	r1, #18960	; 0x4a10
   139b8:	movt	r1, #51966	; 0xcafe
   139bc:	cmp	r0, r1
   139c0:	bgt	13ff4 <__assert_fail@plt+0x2568>
   139c4:	movw	r1, #5520	; 0x1590
   139c8:	movt	r1, #51031	; 0xc757
   139cc:	cmp	r0, r1
   139d0:	beq	1433c <__assert_fail@plt+0x28b0>
   139d4:	movw	r1, #33128	; 0x8168
   139d8:	movt	r1, #51582	; 0xc97e
   139dc:	cmp	r0, r1
   139e0:	bne	14544 <__assert_fail@plt+0x2ab8>
   139e4:	movw	r6, #61069	; 0xee8d
   139e8:	movt	r6, #1
   139ec:	b	145bc <__assert_fail@plt+0x2b30>
   139f0:	movw	r1, #18802	; 0x4972
   139f4:	movt	r1, #21093	; 0x5265
   139f8:	cmp	r0, r1
   139fc:	bgt	14020 <__assert_fail@plt+0x2594>
   13a00:	movw	r1, #18003	; 0x4653
   13a04:	movt	r1, #18256	; 0x4750
   13a08:	cmp	r0, r1
   13a0c:	beq	14348 <__assert_fail@plt+0x28bc>
   13a10:	movw	r1, #20549	; 0x5045
   13a14:	movt	r1, #20553	; 0x5049
   13a18:	cmp	r0, r1
   13a1c:	bne	14544 <__assert_fail@plt+0x2ab8>
   13a20:	movw	r6, #61283	; 0xef63
   13a24:	movt	r6, #1
   13a28:	b	145bc <__assert_fail@plt+0x2b30>
   13a2c:	movw	r1, #29365	; 0x72b5
   13a30:	cmp	r0, r1
   13a34:	bgt	1404c <__assert_fail@plt+0x25c0>
   13a38:	movw	r1, #26985	; 0x6969
   13a3c:	cmp	r0, r1
   13a40:	beq	14354 <__assert_fail@plt+0x28c8>
   13a44:	movw	r1, #29301	; 0x7275
   13a48:	cmp	r0, r1
   13a4c:	bne	14544 <__assert_fail@plt+0x2ab8>
   13a50:	movw	r6, #61273	; 0xef59
   13a54:	movt	r6, #1
   13a58:	b	145bc <__assert_fail@plt+0x2b30>
   13a5c:	movw	r1, #29304	; 0x7278
   13a60:	movt	r1, #29554	; 0x7372
   13a64:	cmp	r0, r1
   13a68:	bgt	14070 <__assert_fail@plt+0x25e4>
   13a6c:	movw	r1, #26227	; 0x6673
   13a70:	movt	r1, #29539	; 0x7363
   13a74:	cmp	r0, r1
   13a78:	beq	14360 <__assert_fail@plt+0x28d4>
   13a7c:	movw	r1, #29544	; 0x7368
   13a80:	movt	r1, #29553	; 0x7371
   13a84:	cmp	r0, r1
   13a88:	bne	14544 <__assert_fail@plt+0x2ab8>
   13a8c:	movw	r6, #61357	; 0xefad
   13a90:	movt	r6, #1
   13a94:	b	145bc <__assert_fail@plt+0x2b30>
   13a98:	movw	r1, #4979	; 0x1373
   13a9c:	sub	r1, r0, r1
   13aa0:	cmp	r1, #28
   13aa4:	bhi	14238 <__assert_fail@plt+0x27ac>
   13aa8:	add	r2, pc, #0
   13aac:	ldr	pc, [r2, r1, lsl #2]
   13ab0:	andeq	r3, r1, r4, lsr #22
   13ab4:	andeq	r4, r1, r4, asr #10
   13ab8:	andeq	r4, r1, r4, asr #10
   13abc:	andeq	r4, r1, r4, asr #10
   13ac0:	andeq	r4, r1, r4, asr #10
   13ac4:	andeq	r4, r1, r4, asr #10
   13ac8:	andeq	r4, r1, r4, asr #10
   13acc:	andeq	r4, r1, r4, asr #10
   13ad0:	andeq	r4, r1, r4, asr #10
   13ad4:	andeq	r4, r1, r4, asr #10
   13ad8:	muleq	r1, r0, r5
   13adc:	andeq	r4, r1, r4, asr #10
   13ae0:	muleq	r1, ip, r5
   13ae4:	andeq	r4, r1, r4, asr #10
   13ae8:	andeq	r4, r1, r4, asr #10
   13aec:	andeq	r4, r1, r4, asr #10
   13af0:	andeq	r4, r1, r4, asr #10
   13af4:	andeq	r4, r1, r4, asr #10
   13af8:	andeq	r4, r1, r4, asr #10
   13afc:	andeq	r4, r1, r4, asr #10
   13b00:	andeq	r4, r1, r4, asr #10
   13b04:	andeq	r4, r1, r4, asr #10
   13b08:	andeq	r4, r1, r4, asr #10
   13b0c:	andeq	r4, r1, r4, asr #10
   13b10:	andeq	r4, r1, r4, asr #10
   13b14:	andeq	r4, r1, r4, asr #10
   13b18:	andeq	r4, r1, r4, asr #10
   13b1c:	andeq	r4, r1, r4, asr #10
   13b20:	andeq	r4, r1, r8, lsr #11
   13b24:	movw	r6, #61411	; 0xefe3
   13b28:	movt	r6, #1
   13b2c:	b	145bc <__assert_fail@plt+0x2b30>
   13b30:	movw	r1, #4965	; 0x1365
   13b34:	movt	r1, #4966	; 0x1366
   13b38:	cmp	r0, r1
   13b3c:	bgt	1409c <__assert_fail@plt+0x2610>
   13b40:	movw	r1, #3024	; 0xbd0
   13b44:	movt	r1, #3024	; 0xbd0
   13b48:	cmp	r0, r1
   13b4c:	beq	1436c <__assert_fail@plt+0x28e0>
   13b50:	movw	r1, #30804	; 0x7854
   13b54:	movt	r1, #4400	; 0x1130
   13b58:	cmp	r0, r1
   13b5c:	bne	14544 <__assert_fail@plt+0x2ab8>
   13b60:	movw	r6, #61018	; 0xee5a
   13b64:	movt	r6, #1
   13b68:	b	145bc <__assert_fail@plt+0x2b30>
   13b6c:	movw	r1, #65517	; 0xffed
   13b70:	movt	r1, #192	; 0xc0
   13b74:	cmp	r0, r1
   13b78:	bgt	140c8 <__assert_fail@plt+0x263c>
   13b7c:	movw	r1, #57579	; 0xe0eb
   13b80:	movt	r1, #39	; 0x27
   13b84:	cmp	r0, r1
   13b88:	beq	14378 <__assert_fail@plt+0x28ec>
   13b8c:	movw	r1, #19027	; 0x4a53
   13b90:	movt	r1, #65	; 0x41
   13b94:	cmp	r0, r1
   13b98:	bne	14544 <__assert_fail@plt+0x2ab8>
   13b9c:	movw	r6, #60728	; 0xed38
   13ba0:	movt	r6, #1
   13ba4:	b	145bc <__assert_fail@plt+0x2b30>
   13ba8:	movw	r1, #11764	; 0x2df4
   13bac:	movt	r1, #24010	; 0x5dca
   13bb0:	cmp	r0, r1
   13bb4:	bgt	140f4 <__assert_fail@plt+0x2668>
   13bb8:	movw	r1, #27120	; 0x69f0
   13bbc:	movt	r1, #23100	; 0x5a3c
   13bc0:	cmp	r0, r1
   13bc4:	beq	14384 <__assert_fail@plt+0x28f8>
   13bc8:	movw	r1, #18003	; 0x4653
   13bcc:	movt	r1, #23119	; 0x5a4f
   13bd0:	cmp	r0, r1
   13bd4:	bne	14544 <__assert_fail@plt+0x2ab8>
   13bd8:	movw	r6, #61475	; 0xf023
   13bdc:	movt	r6, #1
   13be0:	b	145bc <__assert_fail@plt+0x2b30>
   13be4:	movw	r1, #44219	; 0xacbb
   13be8:	movt	r1, #47819	; 0xbacb
   13bec:	cmp	r0, r1
   13bf0:	bgt	14120 <__assert_fail@plt+0x2694>
   13bf4:	movw	r1, #43754	; 0xaaea
   13bf8:	movt	r1, #43735	; 0xaad7
   13bfc:	cmp	r0, r1
   13c00:	beq	14390 <__assert_fail@plt+0x2904>
   13c04:	movw	r1, #6516	; 0x1974
   13c08:	movt	r1, #43962	; 0xabba
   13c0c:	cmp	r0, r1
   13c10:	bne	14544 <__assert_fail@plt+0x2ab8>
   13c14:	movw	r6, #61452	; 0xf00c
   13c18:	movt	r6, #1
   13c1c:	b	145bc <__assert_fail@plt+0x2b30>
   13c20:	movw	r1, #17484	; 0x444c
   13c24:	movt	r1, #17741	; 0x454d
   13c28:	cmp	r0, r1
   13c2c:	bgt	1414c <__assert_fail@plt+0x26c0>
   13c30:	movw	r1, #16706	; 0x4142
   13c34:	movt	r1, #17485	; 0x444d
   13c38:	cmp	r0, r1
   13c3c:	beq	1439c <__assert_fail@plt+0x2910>
   13c40:	movw	r1, #52520	; 0xcd28
   13c44:	movt	r1, #17725	; 0x453d
   13c48:	cmp	r0, r1
   13c4c:	bne	14544 <__assert_fail@plt+0x2ab8>
   13c50:	movw	r6, #60831	; 0xed9f
   13c54:	movt	r6, #1
   13c58:	b	145bc <__assert_fail@plt+0x2b30>
   13c5c:	movw	r1, #22091	; 0x564b
   13c60:	cmp	r0, r1
   13c64:	bgt	14178 <__assert_fail@plt+0x26ec>
   13c68:	movw	r1, #19802	; 0x4d5a
   13c6c:	cmp	r0, r1
   13c70:	beq	143a8 <__assert_fail@plt+0x291c>
   13c74:	movw	r1, #20859	; 0x517b
   13c78:	cmp	r0, r1
   13c7c:	bne	14544 <__assert_fail@plt+0x2ab8>
   13c80:	movw	r6, #61336	; 0xef98
   13c84:	movt	r6, #1
   13c88:	b	145bc <__assert_fail@plt+0x2b30>
   13c8c:	movw	r1, #29539	; 0x7363
   13c90:	movt	r1, #28262	; 0x6e66
   13c94:	cmp	r0, r1
   13c98:	bgt	1419c <__assert_fail@plt+0x2710>
   13c9c:	movw	r1, #18003	; 0x4653
   13ca0:	movt	r1, #27457	; 0x6b41
   13ca4:	cmp	r0, r1
   13ca8:	beq	143b4 <__assert_fail@plt+0x2928>
   13cac:	movw	r1, #28528	; 0x6f70
   13cb0:	movt	r1, #27759	; 0x6c6f
   13cb4:	cmp	r0, r1
   13cb8:	bne	14544 <__assert_fail@plt+0x2ab8>
   13cbc:	movw	r6, #60732	; 0xed3c
   13cc0:	movt	r6, #1
   13cc4:	b	145bc <__assert_fail@plt+0x2b30>
   13cc8:	movw	r1, #7657	; 0x1de9
   13ccc:	movt	r1, #11181	; 0x2bad
   13cd0:	cmp	r0, r1
   13cd4:	bgt	141c8 <__assert_fail@plt+0x273c>
   13cd8:	movw	r1, #6405	; 0x1905
   13cdc:	movt	r1, #9221	; 0x2405
   13ce0:	cmp	r0, r1
   13ce4:	beq	143c0 <__assert_fail@plt+0x2934>
   13ce8:	movw	r1, #15685	; 0x3d45
   13cec:	movt	r1, #10445	; 0x28cd
   13cf0:	cmp	r0, r1
   13cf4:	bne	14544 <__assert_fail@plt+0x2ab8>
   13cf8:	movw	r6, #60824	; 0xed98
   13cfc:	movt	r6, #1
   13d00:	b	145bc <__assert_fail@plt+0x2b30>
   13d04:	movw	r1, #2124	; 0x84c
   13d08:	movt	r1, #65232	; 0xfed0
   13d0c:	add	r1, r0, r1
   13d10:	cmp	r1, #3
   13d14:	bhi	14528 <__assert_fail@plt+0x2a9c>
   13d18:	add	r0, pc, #0
   13d1c:	ldr	pc, [r0, r1, lsl #2]
   13d20:	andeq	r3, r1, r0, lsr sp
   13d24:	andeq	r4, r1, ip, ror #10
   13d28:	andeq	r4, r1, r8, ror r5
   13d2c:	andeq	r4, r1, r4, lsl #11
   13d30:	movw	r6, #61458	; 0xf012
   13d34:	movt	r6, #1
   13d38:	b	145bc <__assert_fail@plt+0x2b30>
   13d3c:	movw	r1, #26399	; 0x671f
   13d40:	movt	r1, #25698	; 0x6462
   13d44:	cmp	r0, r1
   13d48:	bgt	141f4 <__assert_fail@plt+0x2768>
   13d4c:	movw	r1, #25970	; 0x6572
   13d50:	movt	r1, #25189	; 0x6265
   13d54:	cmp	r0, r1
   13d58:	beq	143cc <__assert_fail@plt+0x2940>
   13d5c:	movw	r1, #29296	; 0x7270
   13d60:	movt	r1, #25447	; 0x6367
   13d64:	cmp	r0, r1
   13d68:	bne	14544 <__assert_fail@plt+0x2ab8>
   13d6c:	movw	r6, #60791	; 0xed77
   13d70:	movt	r6, #1
   13d74:	b	145bc <__assert_fail@plt+0x2b30>
   13d78:	movw	r1, #7377	; 0x1cd1
   13d7c:	cmp	r0, r1
   13d80:	beq	143d8 <__assert_fail@plt+0x294c>
   13d84:	movw	r1, #9320	; 0x2468
   13d88:	cmp	r0, r1
   13d8c:	beq	143e4 <__assert_fail@plt+0x2958>
   13d90:	movw	r1, #9336	; 0x2478
   13d94:	cmp	r0, r1
   13d98:	bne	14544 <__assert_fail@plt+0x2ab8>
   13d9c:	movw	r6, #61119	; 0xeebf
   13da0:	movt	r6, #1
   13da4:	b	145bc <__assert_fail@plt+0x2b30>
   13da8:	movw	r1, #57826	; 0xe1e2
   13dac:	movt	r1, #57589	; 0xe0f5
   13db0:	cmp	r0, r1
   13db4:	beq	143f0 <__assert_fail@plt+0x2964>
   13db8:	movw	r1, #8208	; 0x2010
   13dbc:	movt	r1, #62197	; 0xf2f5
   13dc0:	cmp	r0, r1
   13dc4:	bne	14544 <__assert_fail@plt+0x2ab8>
   13dc8:	movw	r6, #60937	; 0xee09
   13dcc:	movt	r6, #1
   13dd0:	b	145bc <__assert_fail@plt+0x2b30>
   13dd4:	movw	r1, #12621	; 0x314d
   13dd8:	movt	r1, #21318	; 0x5346
   13ddc:	cmp	r0, r1
   13de0:	beq	143fc <__assert_fail@plt+0x2970>
   13de4:	movw	r1, #16719	; 0x414f
   13de8:	movt	r1, #21318	; 0x5346
   13dec:	cmp	r0, r1
   13df0:	bne	14544 <__assert_fail@plt+0x2ab8>
   13df4:	movw	r6, #61065	; 0xee89
   13df8:	movt	r6, #1
   13dfc:	b	145bc <__assert_fail@plt+0x2b30>
   13e00:	movw	r1, #40864	; 0x9fa0
   13e04:	cmp	r0, r1
   13e08:	beq	14408 <__assert_fail@plt+0x297c>
   13e0c:	movw	r1, #40865	; 0x9fa1
   13e10:	cmp	r0, r1
   13e14:	bne	14544 <__assert_fail@plt+0x2ab8>
   13e18:	movw	r6, #61187	; 0xef03
   13e1c:	movt	r6, #1
   13e20:	b	145bc <__assert_fail@plt+0x2b30>
   13e24:	movw	r1, #25455	; 0x636f
   13e28:	movt	r1, #29793	; 0x7461
   13e2c:	cmp	r0, r1
   13e30:	beq	14414 <__assert_fail@plt+0x2988>
   13e34:	movw	r1, #24931	; 0x6163
   13e38:	movt	r1, #29810	; 0x7472
   13e3c:	cmp	r0, r1
   13e40:	bne	14544 <__assert_fail@plt+0x2ab8>
   13e44:	movw	r6, #61390	; 0xefce
   13e48:	movt	r6, #1
   13e4c:	b	145bc <__assert_fail@plt+0x2b30>
   13e50:	movw	r1, #6452	; 0x1934
   13e54:	movt	r1, #2308	; 0x904
   13e58:	cmp	r0, r1
   13e5c:	beq	14420 <__assert_fail@plt+0x2994>
   13e60:	movw	r1, #7658	; 0x1dea
   13e64:	movt	r1, #2989	; 0xbad
   13e68:	cmp	r0, r1
   13e6c:	bne	14544 <__assert_fail@plt+0x2ab8>
   13e70:	movw	r6, #60964	; 0xee24
   13e74:	movt	r6, #1
   13e78:	b	145bc <__assert_fail@plt+0x2b30>
   13e7c:	movw	r1, #61791	; 0xf15f
   13e80:	cmp	r0, r1
   13e84:	beq	1442c <__assert_fail@plt+0x29a0>
   13e88:	movw	r1, #6484	; 0x1954
   13e8c:	movt	r1, #1
   13e90:	cmp	r0, r1
   13e94:	bne	14544 <__assert_fail@plt+0x2ab8>
   13e98:	movw	r6, #60701	; 0xed1d
   13e9c:	movt	r6, #1
   13ea0:	b	145bc <__assert_fail@plt+0x2b30>
   13ea4:	movw	r1, #22569	; 0x5829
   13ea8:	movt	r1, #22569	; 0x5829
   13eac:	cmp	r0, r1
   13eb0:	beq	14438 <__assert_fail@plt+0x29ac>
   13eb4:	movw	r1, #21314	; 0x5342
   13eb8:	movt	r1, #22598	; 0x5846
   13ebc:	cmp	r0, r1
   13ec0:	bne	14544 <__assert_fail@plt+0x2ab8>
   13ec4:	movw	r6, #60845	; 0xedad
   13ec8:	movt	r6, #1
   13ecc:	b	145bc <__assert_fail@plt+0x2b30>
   13ed0:	movw	r1, #22774	; 0x58f6
   13ed4:	movt	r1, #38276	; 0x9584
   13ed8:	cmp	r0, r1
   13edc:	beq	14444 <__assert_fail@plt+0x29b8>
   13ee0:	movw	r1, #64757	; 0xfcf5
   13ee4:	movt	r1, #42241	; 0xa501
   13ee8:	cmp	r0, r1
   13eec:	bne	14544 <__assert_fail@plt+0x2ab8>
   13ef0:	movw	r6, #61436	; 0xeffc
   13ef4:	movt	r6, #1
   13ef8:	b	145bc <__assert_fail@plt+0x2b30>
   13efc:	movw	r1, #20045	; 0x4e4d
   13f00:	movt	r1, #16969	; 0x4249
   13f04:	cmp	r0, r1
   13f08:	beq	14450 <__assert_fail@plt+0x29c4>
   13f0c:	movw	r1, #23891	; 0x5d53
   13f10:	movt	r1, #17217	; 0x4341
   13f14:	cmp	r0, r1
   13f18:	bne	14544 <__assert_fail@plt+0x2ab8>
   13f1c:	movw	r6, #61328	; 0xef90
   13f20:	movt	r6, #1
   13f24:	b	145bc <__assert_fail@plt+0x2b30>
   13f28:	movw	r1, #18520	; 0x4858
   13f2c:	cmp	r0, r1
   13f30:	beq	1445c <__assert_fail@plt+0x29d0>
   13f34:	movw	r1, #19780	; 0x4d44
   13f38:	cmp	r0, r1
   13f3c:	bne	14544 <__assert_fail@plt+0x2ab8>
   13f40:	movw	r6, #61153	; 0xeee1
   13f44:	movt	r6, #1
   13f48:	b	145bc <__assert_fail@plt+0x2b30>
   13f4c:	movw	r1, #26985	; 0x6969
   13f50:	movt	r1, #26457	; 0x6759
   13f54:	cmp	r0, r1
   13f58:	beq	14468 <__assert_fail@plt+0x29dc>
   13f5c:	movw	r1, #4386	; 0x1122
   13f60:	movt	r1, #26649	; 0x6819
   13f64:	cmp	r0, r1
   13f68:	bne	14544 <__assert_fail@plt+0x2ab8>
   13f6c:	movw	r6, #61255	; 0xef47
   13f70:	movt	r6, #1
   13f74:	b	145bc <__assert_fail@plt+0x2b30>
   13f78:	movw	r1, #64206	; 0xface
   13f7c:	movt	r1, #7085	; 0x1bad
   13f80:	cmp	r0, r1
   13f84:	beq	14474 <__assert_fail@plt+0x29e8>
   13f88:	movw	r1, #47792	; 0xbab0
   13f8c:	movt	r1, #8209	; 0x2011
   13f90:	cmp	r0, r1
   13f94:	bne	14544 <__assert_fail@plt+0x2ab8>
   13f98:	movw	r6, #60906	; 0xedea
   13f9c:	movt	r6, #1
   13fa0:	b	145bc <__assert_fail@plt+0x2b30>
   13fa4:	movw	r1, #25974	; 0x6576
   13fa8:	movt	r1, #25188	; 0x6264
   13fac:	cmp	r0, r1
   13fb0:	beq	14480 <__assert_fail@plt+0x29f4>
   13fb4:	movw	r1, #25968	; 0x6570
   13fb8:	movt	r1, #25189	; 0x6265
   13fbc:	cmp	r0, r1
   13fc0:	bne	14544 <__assert_fail@plt+0x2ab8>
   13fc4:	movw	r6, #60815	; 0xed8f
   13fc8:	movt	r6, #1
   13fcc:	b	145bc <__assert_fail@plt+0x2b30>
   13fd0:	movw	r1, #16388	; 0x4004
   13fd4:	cmp	r0, r1
   13fd8:	beq	14064 <__assert_fail@plt+0x25d8>
   13fdc:	movw	r1, #16390	; 0x4006
   13fe0:	cmp	r0, r1
   13fe4:	bne	14544 <__assert_fail@plt+0x2ab8>
   13fe8:	movw	r6, #60908	; 0xedec
   13fec:	movt	r6, #1
   13ff0:	b	145bc <__assert_fail@plt+0x2b30>
   13ff4:	movw	r1, #18961	; 0x4a11
   13ff8:	movt	r1, #51966	; 0xcafe
   13ffc:	cmp	r0, r1
   14000:	beq	1448c <__assert_fail@plt+0x2a00>
   14004:	movw	r1, #33252	; 0x81e4
   14008:	movt	r1, #56926	; 0xde5e
   1400c:	cmp	r0, r1
   14010:	bne	14544 <__assert_fail@plt+0x2ab8>
   14014:	movw	r6, #60891	; 0xeddb
   14018:	movt	r6, #1
   1401c:	b	145bc <__assert_fail@plt+0x2b30>
   14020:	movw	r1, #18803	; 0x4973
   14024:	movt	r1, #21093	; 0x5265
   14028:	cmp	r0, r1
   1402c:	beq	14498 <__assert_fail@plt+0x2a0c>
   14030:	movw	r1, #17229	; 0x434d
   14034:	movt	r1, #21317	; 0x5345
   14038:	cmp	r0, r1
   1403c:	bne	14544 <__assert_fail@plt+0x2ab8>
   14040:	movw	r6, #61299	; 0xef73
   14044:	movt	r6, #1
   14048:	b	145bc <__assert_fail@plt+0x2b30>
   1404c:	movw	r1, #29366	; 0x72b6
   14050:	cmp	r0, r1
   14054:	beq	144a4 <__assert_fail@plt+0x2a18>
   14058:	movw	r1, #38496	; 0x9660
   1405c:	cmp	r0, r1
   14060:	bne	14544 <__assert_fail@plt+0x2ab8>
   14064:	movw	r6, #61042	; 0xee72
   14068:	movt	r6, #1
   1406c:	b	145bc <__assert_fail@plt+0x2b30>
   14070:	movw	r1, #29305	; 0x7279
   14074:	movt	r1, #29554	; 0x7372
   14078:	cmp	r0, r1
   1407c:	beq	144b0 <__assert_fail@plt+0x2a24>
   14080:	movw	r1, #29253	; 0x7245
   14084:	movt	r1, #29557	; 0x7375
   14088:	cmp	r0, r1
   1408c:	bne	14544 <__assert_fail@plt+0x2ab8>
   14090:	movw	r6, #60806	; 0xed86
   14094:	movt	r6, #1
   14098:	b	145bc <__assert_fail@plt+0x2b30>
   1409c:	movw	r1, #4966	; 0x1366
   140a0:	movt	r1, #4966	; 0x1366
   140a4:	cmp	r0, r1
   140a8:	beq	144bc <__assert_fail@plt+0x2a30>
   140ac:	movw	r1, #13126	; 0x3346
   140b0:	movt	r1, #5377	; 0x1501
   140b4:	cmp	r0, r1
   140b8:	bne	14544 <__assert_fail@plt+0x2ab8>
   140bc:	movw	r6, #61404	; 0xefdc
   140c0:	movt	r6, #1
   140c4:	b	145bc <__assert_fail@plt+0x2b30>
   140c8:	movw	r1, #65518	; 0xffee
   140cc:	movt	r1, #192	; 0xc0
   140d0:	cmp	r0, r1
   140d4:	beq	144c8 <__assert_fail@plt+0x2a3c>
   140d8:	movw	r1, #25600	; 0x6400
   140dc:	movt	r1, #195	; 0xc3
   140e0:	cmp	r0, r1
   140e4:	bne	14544 <__assert_fail@plt+0x2ab8>
   140e8:	movw	r6, #60777	; 0xed69
   140ec:	movt	r6, #1
   140f0:	b	145bc <__assert_fail@plt+0x2b30>
   140f4:	movw	r1, #11765	; 0x2df5
   140f8:	movt	r1, #24010	; 0x5dca
   140fc:	cmp	r0, r1
   14100:	beq	144d4 <__assert_fail@plt+0x2a48>
   14104:	movw	r1, #26227	; 0x6673
   14108:	movt	r1, #24931	; 0x6163
   1410c:	cmp	r0, r1
   14110:	bne	14544 <__assert_fail@plt+0x2ab8>
   14114:	movw	r6, #60671	; 0xecff
   14118:	movt	r6, #1
   1411c:	b	145bc <__assert_fail@plt+0x2b30>
   14120:	movw	r1, #44220	; 0xacbc
   14124:	movt	r1, #47819	; 0xbacb
   14128:	cmp	r0, r1
   1412c:	beq	144e0 <__assert_fail@plt+0x2a54>
   14130:	movw	r1, #57005	; 0xdead
   14134:	movt	r1, #48879	; 0xbeef
   14138:	cmp	r0, r1
   1413c:	bne	14544 <__assert_fail@plt+0x2ab8>
   14140:	movw	r6, #61345	; 0xefa1
   14144:	movt	r6, #1
   14148:	b	145bc <__assert_fail@plt+0x2b30>
   1414c:	movw	r1, #17485	; 0x444d
   14150:	movt	r1, #17741	; 0x454d
   14154:	cmp	r0, r1
   14158:	beq	144ec <__assert_fail@plt+0x2a60>
   1415c:	movw	r1, #18003	; 0x4653
   14160:	movt	r1, #17752	; 0x4558
   14164:	cmp	r0, r1
   14168:	bne	14544 <__assert_fail@plt+0x2ab8>
   1416c:	movw	r6, #60967	; 0xee27
   14170:	movt	r6, #1
   14174:	b	145bc <__assert_fail@plt+0x2b30>
   14178:	movw	r1, #22092	; 0x564c
   1417c:	cmp	r0, r1
   14180:	beq	144f8 <__assert_fail@plt+0x2a6c>
   14184:	movw	r1, #24053	; 0x5df5
   14188:	cmp	r0, r1
   1418c:	bne	14544 <__assert_fail@plt+0x2ab8>
   14190:	movw	r6, #60912	; 0xedf0
   14194:	movt	r6, #1
   14198:	b	145bc <__assert_fail@plt+0x2b30>
   1419c:	movw	r1, #29540	; 0x7364
   141a0:	movt	r1, #28262	; 0x6e66
   141a4:	cmp	r0, r1
   141a8:	beq	14504 <__assert_fail@plt+0x2a78>
   141ac:	movw	r1, #26227	; 0x6673
   141b0:	movt	r1, #28275	; 0x6e73
   141b4:	cmp	r0, r1
   141b8:	bne	14544 <__assert_fail@plt+0x2ab8>
   141bc:	movw	r6, #61177	; 0xeef9
   141c0:	movt	r6, #1
   141c4:	b	145bc <__assert_fail@plt+0x2b30>
   141c8:	movw	r1, #7658	; 0x1dea
   141cc:	movt	r1, #11181	; 0x2bad
   141d0:	cmp	r0, r1
   141d4:	beq	14510 <__assert_fail@plt+0x2a84>
   141d8:	movw	r1, #12225	; 0x2fc1
   141dc:	movt	r1, #12225	; 0x2fc1
   141e0:	cmp	r0, r1
   141e4:	bne	14544 <__assert_fail@plt+0x2ab8>
   141e8:	movw	r6, #61442	; 0xf002
   141ec:	movt	r6, #1
   141f0:	b	145bc <__assert_fail@plt+0x2b30>
   141f4:	movw	r1, #26400	; 0x6720
   141f8:	movt	r1, #25698	; 0x6462
   141fc:	cmp	r0, r1
   14200:	beq	1451c <__assert_fail@plt+0x2a90>
   14204:	movw	r1, #24952	; 0x6178
   14208:	movt	r1, #25700	; 0x6464
   1420c:	cmp	r0, r1
   14210:	bne	14544 <__assert_fail@plt+0x2ab8>
   14214:	movw	r6, #60843	; 0xedab
   14218:	movt	r6, #1
   1421c:	b	145bc <__assert_fail@plt+0x2b30>
   14220:	movw	r6, #60801	; 0xed81
   14224:	movt	r6, #1
   14228:	b	145bc <__assert_fail@plt+0x2b30>
   1422c:	movw	r6, #61250	; 0xef42
   14230:	movt	r6, #1
   14234:	b	145bc <__assert_fail@plt+0x2b30>
   14238:	movw	r1, #391	; 0x187
   1423c:	cmp	r0, r1
   14240:	beq	145b4 <__assert_fail@plt+0x2b28>
   14244:	cmp	r0, #1984	; 0x7c0
   14248:	bne	14544 <__assert_fail@plt+0x2ab8>
   1424c:	movw	r6, #61048	; 0xee78
   14250:	movt	r6, #1
   14254:	b	145bc <__assert_fail@plt+0x2b30>
   14258:	movw	r6, #61384	; 0xefc8
   1425c:	movt	r6, #1
   14260:	b	145bc <__assert_fail@plt+0x2b30>
   14264:	movw	r6, #61417	; 0xefe9
   14268:	movt	r6, #1
   1426c:	b	145bc <__assert_fail@plt+0x2b30>
   14270:	movw	r6, #61320	; 0xef88
   14274:	movt	r6, #1
   14278:	b	145bc <__assert_fail@plt+0x2b30>
   1427c:	movw	r6, #61003	; 0xee4b
   14280:	movt	r6, #1
   14284:	b	145bc <__assert_fail@plt+0x2b30>
   14288:	movw	r6, #61446	; 0xf006
   1428c:	movt	r6, #1
   14290:	b	145bc <__assert_fail@plt+0x2b30>
   14294:	movw	r6, #61182	; 0xeefe
   14298:	movt	r6, #1
   1429c:	b	145bc <__assert_fail@plt+0x2b30>
   142a0:	movw	r6, #61408	; 0xefe0
   142a4:	movt	r6, #1
   142a8:	b	145bc <__assert_fail@plt+0x2b30>
   142ac:	movw	r6, #60676	; 0xed04
   142b0:	movt	r6, #1
   142b4:	b	145bc <__assert_fail@plt+0x2b30>
   142b8:	movw	r6, #61422	; 0xefee
   142bc:	movt	r6, #1
   142c0:	b	145bc <__assert_fail@plt+0x2b30>
   142c4:	movw	r6, #61202	; 0xef12
   142c8:	movt	r6, #1
   142cc:	b	145bc <__assert_fail@plt+0x2b30>
   142d0:	movw	r6, #61026	; 0xee62
   142d4:	movt	r6, #1
   142d8:	b	145bc <__assert_fail@plt+0x2b30>
   142dc:	movw	r6, #60932	; 0xee04
   142e0:	movt	r6, #1
   142e4:	b	145bc <__assert_fail@plt+0x2b30>
   142e8:	movw	r6, #60825	; 0xed99
   142ec:	movt	r6, #1
   142f0:	b	145bc <__assert_fail@plt+0x2b30>
   142f4:	movw	r6, #61059	; 0xee83
   142f8:	movt	r6, #1
   142fc:	b	145bc <__assert_fail@plt+0x2b30>
   14300:	movw	r6, #61362	; 0xefb2
   14304:	movt	r6, #1
   14308:	b	145bc <__assert_fail@plt+0x2b30>
   1430c:	movw	r6, #60956	; 0xee1c
   14310:	movt	r6, #1
   14314:	b	145bc <__assert_fail@plt+0x2b30>
   14318:	movw	r6, #61146	; 0xeeda
   1431c:	movt	r6, #1
   14320:	b	145bc <__assert_fail@plt+0x2b30>
   14324:	movw	r6, #61241	; 0xef39
   14328:	movt	r6, #1
   1432c:	b	145bc <__assert_fail@plt+0x2b30>
   14330:	movw	r6, #61171	; 0xeef3
   14334:	movt	r6, #1
   14338:	b	145bc <__assert_fail@plt+0x2b30>
   1433c:	movw	r6, #61218	; 0xef22
   14340:	movt	r6, #1
   14344:	b	145bc <__assert_fail@plt+0x2b30>
   14348:	movw	r6, #60981	; 0xee35
   1434c:	movt	r6, #1
   14350:	b	145bc <__assert_fail@plt+0x2b30>
   14354:	movw	r6, #61214	; 0xef1e
   14358:	movt	r6, #1
   1435c:	b	145bc <__assert_fail@plt+0x2b30>
   14360:	movw	r6, #61309	; 0xef7d
   14364:	movt	r6, #1
   14368:	b	145bc <__assert_fail@plt+0x2b30>
   1436c:	movw	r6, #61075	; 0xee93
   14370:	movt	r6, #1
   14374:	b	145bc <__assert_fail@plt+0x2b30>
   14378:	movw	r6, #60782	; 0xed6e
   1437c:	movt	r6, #1
   14380:	b	145bc <__assert_fail@plt+0x2b30>
   14384:	movw	r6, #60666	; 0xecfa
   14388:	movt	r6, #1
   1438c:	b	145bc <__assert_fail@plt+0x2b30>
   14390:	movw	r6, #61212	; 0xef1c
   14394:	movt	r6, #1
   14398:	b	145bc <__assert_fail@plt+0x2b30>
   1439c:	movw	r6, #60871	; 0xedc7
   143a0:	movt	r6, #1
   143a4:	b	145bc <__assert_fail@plt+0x2b30>
   143a8:	movw	r6, #61139	; 0xeed3
   143ac:	movt	r6, #1
   143b0:	b	145bc <__assert_fail@plt+0x2b30>
   143b4:	movw	r6, #61063	; 0xee87
   143b8:	movt	r6, #1
   143bc:	b	145bc <__assert_fail@plt+0x2b30>
   143c0:	movw	r6, #61398	; 0xefd6
   143c4:	movt	r6, #1
   143c8:	b	145bc <__assert_fail@plt+0x2b30>
   143cc:	movw	r6, #61366	; 0xefb6
   143d0:	movt	r6, #1
   143d4:	b	145bc <__assert_fail@plt+0x2b30>
   143d8:	movw	r6, #60864	; 0xedc0
   143dc:	movt	r6, #1
   143e0:	b	145bc <__assert_fail@plt+0x2b30>
   143e4:	movw	r6, #61110	; 0xeeb6
   143e8:	movt	r6, #1
   143ec:	b	145bc <__assert_fail@plt+0x2b30>
   143f0:	movw	r6, #60900	; 0xede4
   143f4:	movt	r6, #1
   143f8:	b	145bc <__assert_fail@plt+0x2b30>
   143fc:	movw	r6, #61082	; 0xee9a
   14400:	movt	r6, #1
   14404:	b	145bc <__assert_fail@plt+0x2b30>
   14408:	movw	r6, #61236	; 0xef34
   1440c:	movt	r6, #1
   14410:	b	145bc <__assert_fail@plt+0x2b30>
   14414:	movw	r6, #61196	; 0xef0c
   14418:	movt	r6, #1
   1441c:	b	145bc <__assert_fail@plt+0x2b30>
   14420:	movw	r6, #60686	; 0xed0e
   14424:	movt	r6, #1
   14428:	b	145bc <__assert_fail@plt+0x2b30>
   1442c:	movw	r6, #60882	; 0xedd2
   14430:	movt	r6, #1
   14434:	b	145bc <__assert_fail@plt+0x2b30>
   14438:	movw	r6, #61482	; 0xf02a
   1443c:	movt	r6, #1
   14440:	b	145bc <__assert_fail@plt+0x2b30>
   14444:	movw	r6, #61008	; 0xee50
   14448:	movt	r6, #1
   1444c:	b	145bc <__assert_fail@plt+0x2b30>
   14450:	movw	r6, #60748	; 0xed4c
   14454:	movt	r6, #1
   14458:	b	145bc <__assert_fail@plt+0x2b30>
   1445c:	movw	r6, #60991	; 0xee3f
   14460:	movt	r6, #1
   14464:	b	145bc <__assert_fail@plt+0x2b30>
   14468:	movw	r6, #61279	; 0xef5f
   1446c:	movt	r6, #1
   14470:	b	145bc <__assert_fail@plt+0x2b30>
   14474:	movw	r6, #61014	; 0xee56
   14478:	movt	r6, #1
   1447c:	b	145bc <__assert_fail@plt+0x2b30>
   14480:	movw	r6, #61410	; 0xefe2
   14484:	movt	r6, #1
   14488:	b	145bc <__assert_fail@plt+0x2b30>
   1448c:	movw	r6, #60741	; 0xed45
   14490:	movt	r6, #1
   14494:	b	145bc <__assert_fail@plt+0x2b30>
   14498:	movw	r6, #61264	; 0xef50
   1449c:	movt	r6, #1
   144a0:	b	145bc <__assert_fail@plt+0x2b30>
   144a4:	movw	r6, #61053	; 0xee7d
   144a8:	movt	r6, #1
   144ac:	b	145bc <__assert_fail@plt+0x2b30>
   144b0:	movw	r6, #60766	; 0xed5e
   144b4:	movt	r6, #1
   144b8:	b	145bc <__assert_fail@plt+0x2b30>
   144bc:	movw	r6, #60712	; 0xed28
   144c0:	movt	r6, #1
   144c4:	b	145bc <__assert_fail@plt+0x2b30>
   144c8:	movw	r6, #60996	; 0xee44
   144cc:	movt	r6, #1
   144d0:	b	145bc <__assert_fail@plt+0x2b30>
   144d4:	movw	r6, #61290	; 0xef6a
   144d8:	movt	r6, #1
   144dc:	b	145bc <__assert_fail@plt+0x2b30>
   144e0:	movw	r6, #61429	; 0xeff5
   144e4:	movt	r6, #1
   144e8:	b	145bc <__assert_fail@plt+0x2b30>
   144ec:	movw	r6, #60857	; 0xedb9
   144f0:	movt	r6, #1
   144f4:	b	145bc <__assert_fail@plt+0x2b30>
   144f8:	movw	r6, #61159	; 0xeee7
   144fc:	movt	r6, #1
   14500:	b	145bc <__assert_fail@plt+0x2b30>
   14504:	movw	r6, #61166	; 0xeeee
   14508:	movt	r6, #1
   1450c:	b	145bc <__assert_fail@plt+0x2b30>
   14510:	movw	r6, #61032	; 0xee68
   14514:	movt	r6, #1
   14518:	b	145bc <__assert_fail@plt+0x2b30>
   1451c:	movw	r6, #60849	; 0xedb1
   14520:	movt	r6, #1
   14524:	b	145bc <__assert_fail@plt+0x2b30>
   14528:	movw	r1, #53613	; 0xd16d
   1452c:	movt	r1, #303	; 0x12f
   14530:	cmp	r0, r1
   14534:	bne	14544 <__assert_fail@plt+0x2ab8>
   14538:	movw	r6, #61464	; 0xf018
   1453c:	movt	r6, #1
   14540:	b	145bc <__assert_fail@plt+0x2b30>
   14544:	movw	r6, #592	; 0x250
   14548:	movw	r3, #61493	; 0xf035
   1454c:	str	r0, [sp]
   14550:	mov	r1, #1
   14554:	mov	r2, #21
   14558:	movt	r6, #3
   1455c:	movt	r3, #1
   14560:	mov	r0, r6
   14564:	bl	118f4 <__sprintf_chk@plt>
   14568:	b	145bc <__assert_fail@plt+0x2b30>
   1456c:	movw	r6, #61378	; 0xefc2
   14570:	movt	r6, #1
   14574:	b	145bc <__assert_fail@plt+0x2b30>
   14578:	movw	r6, #61372	; 0xefbc
   1457c:	movt	r6, #1
   14580:	b	145bc <__assert_fail@plt+0x2b30>
   14584:	movw	r6, #60811	; 0xed8b
   14588:	movt	r6, #1
   1458c:	b	145bc <__assert_fail@plt+0x2b30>
   14590:	movw	r6, #60918	; 0xedf6
   14594:	movt	r6, #1
   14598:	b	145bc <__assert_fail@plt+0x2b30>
   1459c:	movw	r6, #61087	; 0xee9f
   145a0:	movt	r6, #1
   145a4:	b	145bc <__assert_fail@plt+0x2b30>
   145a8:	movw	r6, #61093	; 0xeea5
   145ac:	movt	r6, #1
   145b0:	b	145bc <__assert_fail@plt+0x2b30>
   145b4:	movw	r6, #60705	; 0xed21
   145b8:	movt	r6, #1
   145bc:	mov	r0, r5
   145c0:	mov	r1, r4
   145c4:	mov	r2, r6
   145c8:	bl	14d9c <__assert_fail@plt+0x3310>
   145cc:	mov	r0, #0
   145d0:	sub	sp, fp, #16
   145d4:	pop	{r4, r5, r6, sl, fp, pc}
   145d8:	mov	r1, #63	; 0x3f
   145dc:	bl	11990 <__overflow@plt>
   145e0:	b	145cc <__assert_fail@plt+0x2b40>
   145e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145e8:	add	fp, sp, #28
   145ec:	sub	sp, sp, #12
   145f0:	mov	sl, r0
   145f4:	sub	r0, r3, #65	; 0x41
   145f8:	cmp	r0, #57	; 0x39
   145fc:	bhi	147cc <__assert_fail@plt+0x2d40>
   14600:	mov	r5, r1
   14604:	ldr	r1, [fp, #16]
   14608:	ldr	r8, [fp, #12]
   1460c:	ldr	r7, [r1]
   14610:	ldr	r4, [r1, #4]
   14614:	ldr	r3, [r1, #8]
   14618:	add	r1, pc, #0
   1461c:	ldr	pc, [r1, r0, lsl #2]
   14620:	andeq	r4, r1, r8, lsl #14
   14624:	andeq	r4, r1, r8, lsr r7
   14628:	andeq	r4, r1, ip, asr #14
   1462c:	andeq	r4, r1, r4, asr #15
   14630:	andeq	r4, r1, ip, asr #15
   14634:	strdeq	r4, [r1], -ip
   14638:	andeq	r4, r1, ip, lsl #16
   1463c:	andeq	r4, r1, ip, asr #15
   14640:	andeq	r4, r1, ip, asr #15
   14644:	andeq	r4, r1, ip, asr #15
   14648:	andeq	r4, r1, ip, asr #15
   1464c:	andeq	r4, r1, ip, asr #15
   14650:	andeq	r4, r1, ip, asr #15
   14654:	andeq	r4, r1, r4, lsr #16
   14658:	andeq	r4, r1, ip, asr #15
   1465c:	andeq	r4, r1, ip, asr #15
   14660:	andeq	r4, r1, ip, asr #15
   14664:	muleq	r1, ip, r8
   14668:	andeq	r4, r1, ip, asr #15
   1466c:			; <UNDEFINED> instruction: 0x000148b0
   14670:	andeq	r4, r1, r4, asr #17
   14674:	andeq	r4, r1, ip, asr #15
   14678:	andeq	r4, r1, r0, ror #17
   1467c:	andeq	r4, r1, r4, lsl #18
   14680:	andeq	r4, r1, ip, lsl #18
   14684:	andeq	r4, r1, r4, lsl r9
   14688:	andeq	r4, r1, ip, asr #15
   1468c:	andeq	r4, r1, ip, asr #15
   14690:	andeq	r4, r1, ip, asr #15
   14694:	andeq	r4, r1, ip, asr #15
   14698:	andeq	r4, r1, ip, asr #15
   1469c:	andeq	r4, r1, ip, asr #15
   146a0:	andeq	r4, r1, r8, lsr #18
   146a4:	muleq	r1, r4, r9
   146a8:	andeq	r4, r1, ip, asr #15
   146ac:	muleq	r1, ip, r9
   146b0:	andeq	r4, r1, ip, asr #15
   146b4:	andeq	r4, r1, ip, lsr #19
   146b8:			; <UNDEFINED> instruction: 0x000149b4
   146bc:			; <UNDEFINED> instruction: 0x000149bc
   146c0:	andeq	r4, r1, r4, asr #19
   146c4:	andeq	r4, r1, ip, asr #15
   146c8:	andeq	r4, r1, ip, asr #15
   146cc:	andeq	r4, r1, ip, asr #15
   146d0:	ldrdeq	r4, [r1], -r8
   146d4:	andeq	r4, r1, r0, lsr sl
   146d8:	andeq	r4, r1, r0, asr #20
   146dc:	andeq	r4, r1, ip, asr #15
   146e0:	andeq	r4, r1, ip, asr #15
   146e4:	andeq	r4, r1, r4, lsl #21
   146e8:	andeq	r4, r1, r0, lsr #21
   146ec:			; <UNDEFINED> instruction: 0x00014ab4
   146f0:	ldrdeq	r4, [r1], -ip
   146f4:	andeq	r4, r1, ip, asr #15
   146f8:	andeq	r4, r1, r4, ror #21
   146fc:	strdeq	r4, [r1], -r8
   14700:	andeq	r4, r1, r0, lsl #22
   14704:	andeq	r4, r1, r8, lsl #22
   14708:	movw	r4, #508	; 0x1fc
   1470c:	mov	r0, r7
   14710:	movt	r4, #3
   14714:	mov	r1, r4
   14718:	bl	16630 <__assert_fail@plt+0x4ba4>
   1471c:	mov	r6, #0
   14720:	mov	r0, sl
   14724:	mov	r1, r5
   14728:	mov	r2, r4
   1472c:	strb	r6, [r4, #10]
   14730:	bl	14d9c <__assert_fail@plt+0x3310>
   14734:	b	14c18 <__assert_fail@plt+0x318c>
   14738:	mov	r6, #0
   1473c:	mov	r0, sl
   14740:	mov	r1, r5
   14744:	mov	r2, #512	; 0x200
   14748:	b	14c10 <__assert_fail@plt+0x3184>
   1474c:	movw	r0, #505	; 0x1f9
   14750:	add	r1, sp, #8
   14754:	movt	r0, #3
   14758:	ldrb	r0, [r0]
   1475c:	cmp	r0, #1
   14760:	bne	14b2c <__assert_fail@plt+0x30a0>
   14764:	mov	r0, r8
   14768:	bl	1ab40 <__assert_fail@plt+0x90b4>
   1476c:	cmp	r0, #0
   14770:	bge	14b3c <__assert_fail@plt+0x30b0>
   14774:	bl	118e8 <__errno_location@plt>
   14778:	ldr	r4, [r0]
   1477c:	movw	r1, #60594	; 0xecb2
   14780:	mov	r0, #0
   14784:	mov	r2, #5
   14788:	mov	r7, #0
   1478c:	movt	r1, #1
   14790:	bl	1172c <dcgettext@plt>
   14794:	mov	r6, r0
   14798:	mov	r0, #4
   1479c:	mov	r1, r8
   147a0:	bl	1a440 <__assert_fail@plt+0x89b4>
   147a4:	mov	r3, r0
   147a8:	mov	r0, #0
   147ac:	mov	r1, r4
   147b0:	mov	r2, r6
   147b4:	bl	117e0 <error@plt>
   147b8:	mov	r6, #1
   147bc:	str	r7, [sp, #8]
   147c0:	b	14b44 <__assert_fail@plt+0x30b8>
   147c4:	ldrd	r2, [r7]
   147c8:	b	148a0 <__assert_fail@plt+0x2e14>
   147cc:	movw	r0, #484	; 0x1e4
   147d0:	movt	r0, #3
   147d4:	ldr	r0, [r0]
   147d8:	ldr	r1, [r0, #20]
   147dc:	ldr	r2, [r0, #24]
   147e0:	cmp	r1, r2
   147e4:	bcs	14d90 <__assert_fail@plt+0x3304>
   147e8:	add	r2, r1, #1
   147ec:	str	r2, [r0, #20]
   147f0:	mov	r0, #63	; 0x3f
   147f4:	strb	r0, [r1]
   147f8:	b	14b24 <__assert_fail@plt+0x3098>
   147fc:	mov	r0, r7
   14800:	bl	1640c <__assert_fail@plt+0x4980>
   14804:	mov	r2, r0
   14808:	b	14b18 <__assert_fail@plt+0x308c>
   1480c:	ldr	r0, [r7, #28]
   14810:	bl	11a74 <getgrgid@plt>
   14814:	cmp	r0, #0
   14818:	beq	148d4 <__assert_fail@plt+0x2e48>
   1481c:	ldr	r2, [r0]
   14820:	b	14b18 <__assert_fail@plt+0x308c>
   14824:	mov	r0, #0
   14828:	mov	r6, #0
   1482c:	bl	18e34 <__assert_fail@plt+0x73a8>
   14830:	mov	r1, r8
   14834:	bl	1a440 <__assert_fail@plt+0x89b4>
   14838:	mov	r2, r0
   1483c:	mov	r0, sl
   14840:	mov	r1, r5
   14844:	bl	14d9c <__assert_fail@plt+0x3310>
   14848:	ldr	r0, [r7, #16]
   1484c:	and	r0, r0, #61440	; 0xf000
   14850:	cmp	r0, #40960	; 0xa000
   14854:	bne	14c18 <__assert_fail@plt+0x318c>
   14858:	ldr	r1, [r7, #48]	; 0x30
   1485c:	mov	r0, r8
   14860:	bl	15b78 <__assert_fail@plt+0x40ec>
   14864:	cmp	r0, #0
   14868:	beq	14d0c <__assert_fail@plt+0x3280>
   1486c:	movw	r1, #60429	; 0xec0d
   14870:	mov	r7, r0
   14874:	mov	r0, #1
   14878:	movt	r1, #1
   1487c:	bl	11924 <__printf_chk@plt>
   14880:	mov	r0, #0
   14884:	mov	r6, #0
   14888:	bl	18e34 <__assert_fail@plt+0x73a8>
   1488c:	mov	r1, r7
   14890:	bl	1a440 <__assert_fail@plt+0x89b4>
   14894:	mov	r2, r0
   14898:	b	14d78 <__assert_fail@plt+0x32ec>
   1489c:	ldrd	r2, [r7, #32]
   148a0:	mov	r0, sl
   148a4:	mov	r1, r5
   148a8:	bl	14ff8 <__assert_fail@plt+0x356c>
   148ac:	b	14b24 <__assert_fail@plt+0x3098>
   148b0:	ldrd	r0, [r7, #32]
   148b4:	lsr	r2, r0, #12
   148b8:	orr	r2, r2, r1, lsl #20
   148bc:	bfi	r2, r0, #0, #8
   148c0:	b	14ac4 <__assert_fail@plt+0x3038>
   148c4:	ldr	r0, [r7, #24]
   148c8:	bl	116cc <getpwuid@plt>
   148cc:	cmp	r0, #0
   148d0:	bne	1481c <__assert_fail@plt+0x2d90>
   148d4:	movw	r2, #60434	; 0xec12
   148d8:	movt	r2, #1
   148dc:	b	14b18 <__assert_fail@plt+0x308c>
   148e0:	mov	r6, #0
   148e4:	cmn	r3, #1
   148e8:	mov	r0, sl
   148ec:	mov	r1, r5
   148f0:	movle	r4, r6
   148f4:	movle	r3, r6
   148f8:	mov	r2, r4
   148fc:	bl	15310 <__assert_fail@plt+0x3884>
   14900:	b	14c18 <__assert_fail@plt+0x318c>
   14904:	ldrd	r2, [r7, #72]	; 0x48
   14908:	b	14918 <__assert_fail@plt+0x2e8c>
   1490c:	ldrd	r2, [r7, #80]	; 0x50
   14910:	b	14918 <__assert_fail@plt+0x2e8c>
   14914:	ldrd	r2, [r7, #88]	; 0x58
   14918:	mov	r0, sl
   1491c:	mov	r1, r5
   14920:	bl	15310 <__assert_fail@plt+0x3884>
   14924:	b	14b24 <__assert_fail@plt+0x3098>
   14928:	ldr	r0, [r7, #16]
   1492c:	add	r8, sl, r5
   14930:	add	r9, sl, #1
   14934:	cmp	r5, #2
   14938:	str	r0, [sp, #4]
   1493c:	blt	14b80 <__assert_fail@plt+0x30f4>
   14940:	movw	r6, #61921	; 0xf1e1
   14944:	mov	r4, r9
   14948:	movt	r6, #1
   1494c:	ldrb	r7, [r4]
   14950:	mov	r0, r6
   14954:	mov	r2, #8
   14958:	mov	r1, r7
   1495c:	bl	11948 <memchr@plt>
   14960:	cmp	r0, #0
   14964:	beq	14b84 <__assert_fail@plt+0x30f8>
   14968:	movw	r0, #60450	; 0xec22
   1496c:	mov	r1, r7
   14970:	mov	r2, #4
   14974:	movt	r0, #1
   14978:	bl	11948 <memchr@plt>
   1497c:	cmp	r0, #0
   14980:	add	r4, r4, #1
   14984:	strbne	r7, [r9], #1
   14988:	cmp	r4, r8
   1498c:	bcc	1494c <__assert_fail@plt+0x2ec0>
   14990:	b	14b84 <__assert_fail@plt+0x30f8>
   14994:	ldrd	r2, [r7, #64]	; 0x40
   14998:	b	149c8 <__assert_fail@plt+0x2f3c>
   1499c:	cmp	r2, #72	; 0x48
   149a0:	bne	14be8 <__assert_fail@plt+0x315c>
   149a4:	ldrd	r0, [r7]
   149a8:	b	14a90 <__assert_fail@plt+0x3004>
   149ac:	ldr	r2, [r7, #16]
   149b0:	b	14ac4 <__assert_fail@plt+0x3038>
   149b4:	ldr	r2, [r7, #28]
   149b8:	b	14c04 <__assert_fail@plt+0x3178>
   149bc:	ldr	r2, [r7, #20]
   149c0:	b	14c04 <__assert_fail@plt+0x3178>
   149c4:	ldrd	r2, [r7, #96]	; 0x60
   149c8:	mov	r0, sl
   149cc:	mov	r1, r5
   149d0:	bl	14ec8 <__assert_fail@plt+0x343c>
   149d4:	b	14b24 <__assert_fail@plt+0x3098>
   149d8:	movw	r0, #505	; 0x1f9
   149dc:	movt	r0, #3
   149e0:	ldrb	r0, [r0]
   149e4:	cmp	r0, #0
   149e8:	bne	149fc <__assert_fail@plt+0x2f70>
   149ec:	ldr	r0, [r7, #16]
   149f0:	and	r0, r0, #61440	; 0xf000
   149f4:	cmp	r0, #40960	; 0xa000
   149f8:	beq	14c48 <__assert_fail@plt+0x31bc>
   149fc:	mov	r0, r8
   14a00:	bl	119fc <canonicalize_file_name@plt>
   14a04:	cmp	r0, #0
   14a08:	beq	14cc0 <__assert_fail@plt+0x3234>
   14a0c:	mov	r4, r0
   14a10:	bl	15738 <__assert_fail@plt+0x3cac>
   14a14:	mov	r9, r0
   14a18:	mov	r0, r4
   14a1c:	bl	16638 <__assert_fail@plt+0x4bac>
   14a20:	cmp	r9, #0
   14a24:	beq	14c48 <__assert_fail@plt+0x31bc>
   14a28:	mov	r7, #0
   14a2c:	b	14c68 <__assert_fail@plt+0x31dc>
   14a30:	mov	r0, sl
   14a34:	mov	r1, r5
   14a38:	mov	r2, r8
   14a3c:	b	14b20 <__assert_fail@plt+0x3094>
   14a40:	ldr	r0, [r7, #56]	; 0x38
   14a44:	mov	r6, #0
   14a48:	subs	r1, r0, #536870913	; 0x20000001
   14a4c:	rscs	r1, r6, r0, asr #31
   14a50:	mov	r1, #0
   14a54:	movwcc	r1, #1
   14a58:	rsbs	r2, r0, #0
   14a5c:	sbcs	r2, r6, r0, asr #31
   14a60:	mov	r2, #0
   14a64:	movwlt	r2, #1
   14a68:	ands	r3, r2, r1
   14a6c:	mov	r2, r0
   14a70:	mov	r1, r5
   14a74:	asrne	r3, r0, #31
   14a78:	moveq	r2, #512	; 0x200
   14a7c:	mov	r0, sl
   14a80:	b	14c14 <__assert_fail@plt+0x3188>
   14a84:	cmp	r2, #72	; 0x48
   14a88:	bne	14c24 <__assert_fail@plt+0x3198>
   14a8c:	ldrd	r0, [r7, #32]
   14a90:	lsr	r1, r1, #12
   14a94:	lsr	r2, r0, #8
   14a98:	bfi	r2, r1, #12, #20
   14a9c:	b	14c04 <__assert_fail@plt+0x3178>
   14aa0:	ldrd	r2, [r7, #48]	; 0x30
   14aa4:	mov	r0, sl
   14aa8:	mov	r1, r5
   14aac:	bl	15128 <__assert_fail@plt+0x369c>
   14ab0:	b	14b24 <__assert_fail@plt+0x3098>
   14ab4:	ldrd	r0, [r7, #32]
   14ab8:	lsr	r1, r1, #12
   14abc:	lsr	r2, r0, #8
   14ac0:	bfi	r2, r1, #12, #20
   14ac4:	mov	r0, sl
   14ac8:	mov	r1, r5
   14acc:	mov	r3, #0
   14ad0:	mov	r6, #0
   14ad4:	bl	14ff8 <__assert_fail@plt+0x356c>
   14ad8:	b	14c18 <__assert_fail@plt+0x318c>
   14adc:	ldr	r2, [r7, #24]
   14ae0:	b	14c04 <__assert_fail@plt+0x3178>
   14ae4:	cmn	r3, #1
   14ae8:	ble	14c70 <__assert_fail@plt+0x31e4>
   14aec:	mov	r0, r4
   14af0:	mov	r1, r3
   14af4:	b	14b0c <__assert_fail@plt+0x3080>
   14af8:	ldrd	r0, [r7, #72]	; 0x48
   14afc:	b	14b0c <__assert_fail@plt+0x3080>
   14b00:	ldrd	r0, [r7, #80]	; 0x50
   14b04:	b	14b0c <__assert_fail@plt+0x3080>
   14b08:	ldrd	r0, [r7, #88]	; 0x58
   14b0c:	bl	15258 <__assert_fail@plt+0x37cc>
   14b10:	movw	r2, #525	; 0x20d
   14b14:	movt	r2, #3
   14b18:	mov	r0, sl
   14b1c:	mov	r1, r5
   14b20:	bl	14d9c <__assert_fail@plt+0x3310>
   14b24:	mov	r6, #0
   14b28:	b	14c18 <__assert_fail@plt+0x318c>
   14b2c:	mov	r0, r8
   14b30:	bl	1abb4 <__assert_fail@plt+0x9128>
   14b34:	cmp	r0, #0
   14b38:	blt	14774 <__assert_fail@plt+0x2ce8>
   14b3c:	ldr	r7, [sp, #8]
   14b40:	mov	r6, #0
   14b44:	movw	r2, #60462	; 0xec2e
   14b48:	add	r0, sl, r5
   14b4c:	mov	r1, #115	; 0x73
   14b50:	cmp	r7, #0
   14b54:	movt	r2, #1
   14b58:	strh	r1, [r0]
   14b5c:	mov	r0, #1
   14b60:	mov	r1, sl
   14b64:	movne	r2, r7
   14b68:	bl	11924 <__printf_chk@plt>
   14b6c:	ldr	r0, [sp, #8]
   14b70:	cmp	r0, #0
   14b74:	beq	14c18 <__assert_fail@plt+0x318c>
   14b78:	bl	11a14 <freecon@plt>
   14b7c:	b	14c18 <__assert_fail@plt+0x318c>
   14b80:	mov	r4, r9
   14b84:	ldr	r0, [sp, #4]
   14b88:	cmp	r4, r8
   14b8c:	bfc	r0, #12, #20
   14b90:	str	r0, [sp, #4]
   14b94:	bcs	14c98 <__assert_fail@plt+0x320c>
   14b98:	sub	r0, r5, r4
   14b9c:	add	r0, sl, r0
   14ba0:	cmp	r0, #16
   14ba4:	bcc	14c7c <__assert_fail@plt+0x31f0>
   14ba8:	cmp	r9, r8
   14bac:	addcc	r1, r9, r0
   14bb0:	cmpcc	r4, r1
   14bb4:	bcc	14c7c <__assert_fail@plt+0x31f0>
   14bb8:	bic	r7, r0, #15
   14bbc:	mov	r6, r9
   14bc0:	add	r2, r4, r7
   14bc4:	add	r1, r9, r7
   14bc8:	mov	r3, r7
   14bcc:	vld1.8	{d16-d17}, [r4]!
   14bd0:	subs	r3, r3, #16
   14bd4:	vst1.8	{d16-d17}, [r6]!
   14bd8:	bne	14bcc <__assert_fail@plt+0x3140>
   14bdc:	cmp	r7, r0
   14be0:	bne	14c84 <__assert_fail@plt+0x31f8>
   14be4:	b	14c94 <__assert_fail@plt+0x3208>
   14be8:	ldr	r4, [r7]
   14bec:	ldr	r3, [r7, #4]
   14bf0:	cmp	r2, #76	; 0x4c
   14bf4:	bne	14c34 <__assert_fail@plt+0x31a8>
   14bf8:	lsr	r0, r4, #12
   14bfc:	orr	r2, r0, r3, lsl #20
   14c00:	bfi	r2, r4, #0, #8
   14c04:	mov	r6, #0
   14c08:	mov	r0, sl
   14c0c:	mov	r1, r5
   14c10:	mov	r3, #0
   14c14:	bl	14ec8 <__assert_fail@plt+0x343c>
   14c18:	mov	r0, r6
   14c1c:	sub	sp, fp, #28
   14c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c24:	ldr	r4, [r7, #32]
   14c28:	ldr	r3, [r7, #36]	; 0x24
   14c2c:	cmp	r2, #76	; 0x4c
   14c30:	beq	14bf8 <__assert_fail@plt+0x316c>
   14c34:	mov	r0, sl
   14c38:	mov	r1, r5
   14c3c:	mov	r2, r4
   14c40:	bl	14ec8 <__assert_fail@plt+0x343c>
   14c44:	b	14b24 <__assert_fail@plt+0x3098>
   14c48:	mov	r0, r8
   14c4c:	mov	r1, r7
   14c50:	bl	15890 <__assert_fail@plt+0x3e04>
   14c54:	cmp	r0, #0
   14c58:	beq	14d54 <__assert_fail@plt+0x32c8>
   14c5c:	mov	r7, r0
   14c60:	bl	15738 <__assert_fail@plt+0x3cac>
   14c64:	mov	r9, r0
   14c68:	mov	r6, #0
   14c6c:	b	14d60 <__assert_fail@plt+0x32d4>
   14c70:	movw	r2, #62559	; 0xf45f
   14c74:	movt	r2, #1
   14c78:	b	14b18 <__assert_fail@plt+0x308c>
   14c7c:	mov	r1, r9
   14c80:	mov	r2, r4
   14c84:	ldrb	r3, [r2], #1
   14c88:	strb	r3, [r1], #1
   14c8c:	cmp	r8, r2
   14c90:	bne	14c84 <__assert_fail@plt+0x31f8>
   14c94:	add	r9, r9, r0
   14c98:	ldr	r2, [sp, #4]
   14c9c:	movw	r0, #27756	; 0x6c6c
   14ca0:	mov	r1, sl
   14ca4:	mov	r3, #0
   14ca8:	mov	r6, #0
   14cac:	movt	r0, #111	; 0x6f
   14cb0:	str	r0, [r9]
   14cb4:	mov	r0, #1
   14cb8:	bl	11924 <__printf_chk@plt>
   14cbc:	b	14c18 <__assert_fail@plt+0x318c>
   14cc0:	bl	118e8 <__errno_location@plt>
   14cc4:	ldr	r4, [r0]
   14cc8:	movw	r1, #60464	; 0xec30
   14ccc:	mov	r0, #0
   14cd0:	mov	r2, #5
   14cd4:	mov	r9, #0
   14cd8:	movt	r1, #1
   14cdc:	bl	1172c <dcgettext@plt>
   14ce0:	mov	r6, r0
   14ce4:	mov	r0, #4
   14ce8:	mov	r1, r8
   14cec:	bl	1a440 <__assert_fail@plt+0x89b4>
   14cf0:	mov	r3, r0
   14cf4:	mov	r0, #0
   14cf8:	mov	r1, r4
   14cfc:	mov	r2, r6
   14d00:	bl	117e0 <error@plt>
   14d04:	mov	r6, #1
   14d08:	b	14d5c <__assert_fail@plt+0x32d0>
   14d0c:	bl	118e8 <__errno_location@plt>
   14d10:	ldr	r4, [r0]
   14d14:	movw	r1, #60400	; 0xebf0
   14d18:	mov	r0, #0
   14d1c:	mov	r2, #5
   14d20:	movt	r1, #1
   14d24:	bl	1172c <dcgettext@plt>
   14d28:	mov	r5, r0
   14d2c:	mov	r0, #4
   14d30:	mov	r1, r8
   14d34:	bl	1a440 <__assert_fail@plt+0x89b4>
   14d38:	mov	r3, r0
   14d3c:	mov	r0, #0
   14d40:	mov	r1, r4
   14d44:	mov	r2, r5
   14d48:	bl	117e0 <error@plt>
   14d4c:	mov	r6, #1
   14d50:	b	14c18 <__assert_fail@plt+0x318c>
   14d54:	mov	r6, #1
   14d58:	mov	r9, #0
   14d5c:	mov	r7, #0
   14d60:	movw	r2, #60462	; 0xec2e
   14d64:	cmp	r7, #0
   14d68:	movt	r2, #1
   14d6c:	movne	r2, r7
   14d70:	cmp	r9, #0
   14d74:	movne	r2, r9
   14d78:	mov	r0, sl
   14d7c:	mov	r1, r5
   14d80:	bl	14d9c <__assert_fail@plt+0x3310>
   14d84:	mov	r0, r7
   14d88:	bl	16638 <__assert_fail@plt+0x4bac>
   14d8c:	b	14c18 <__assert_fail@plt+0x318c>
   14d90:	mov	r1, #63	; 0x3f
   14d94:	bl	11990 <__overflow@plt>
   14d98:	b	14b24 <__assert_fail@plt+0x3098>
   14d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14da0:	add	fp, sp, #28
   14da4:	sub	sp, sp, #12
   14da8:	mov	r6, r1
   14dac:	add	r8, r0, r1
   14db0:	add	sl, r0, #1
   14db4:	cmp	r1, #2
   14db8:	str	r2, [sp, #4]
   14dbc:	str	r0, [sp, #8]
   14dc0:	blt	14e78 <__assert_fail@plt+0x33ec>
   14dc4:	movw	r7, #61921	; 0xf1e1
   14dc8:	movw	r4, #62559	; 0xf45f
   14dcc:	mov	r9, sl
   14dd0:	movt	r7, #1
   14dd4:	movt	r4, #1
   14dd8:	ldrb	r5, [r9]
   14ddc:	mov	r0, r7
   14de0:	mov	r2, #8
   14de4:	mov	r1, r5
   14de8:	bl	11948 <memchr@plt>
   14dec:	cmp	r0, #0
   14df0:	beq	14e18 <__assert_fail@plt+0x338c>
   14df4:	mov	r0, r4
   14df8:	mov	r1, r5
   14dfc:	mov	r2, #2
   14e00:	bl	11948 <memchr@plt>
   14e04:	cmp	r0, #0
   14e08:	add	r9, r9, #1
   14e0c:	strbne	r5, [sl], #1
   14e10:	cmp	r9, r8
   14e14:	bcc	14dd8 <__assert_fail@plt+0x334c>
   14e18:	cmp	r9, r8
   14e1c:	bcs	14e84 <__assert_fail@plt+0x33f8>
   14e20:	ldr	r1, [sp, #8]
   14e24:	sub	r0, r6, r9
   14e28:	add	r0, r1, r0
   14e2c:	cmp	r0, #16
   14e30:	bcc	14e90 <__assert_fail@plt+0x3404>
   14e34:	cmp	sl, r8
   14e38:	addcc	r2, sl, r0
   14e3c:	cmpcc	r9, r2
   14e40:	bcc	14e90 <__assert_fail@plt+0x3404>
   14e44:	bic	r7, r0, #15
   14e48:	mov	r5, sl
   14e4c:	add	r6, r9, r7
   14e50:	add	r4, sl, r7
   14e54:	mov	r3, r7
   14e58:	vld1.8	{d16-d17}, [r9]!
   14e5c:	subs	r3, r3, #16
   14e60:	vst1.8	{d16-d17}, [r5]!
   14e64:	bne	14e58 <__assert_fail@plt+0x33cc>
   14e68:	ldr	r2, [sp, #4]
   14e6c:	cmp	r7, r0
   14e70:	bne	14e9c <__assert_fail@plt+0x3410>
   14e74:	b	14eac <__assert_fail@plt+0x3420>
   14e78:	mov	r9, sl
   14e7c:	cmp	r9, r8
   14e80:	bcc	14e20 <__assert_fail@plt+0x3394>
   14e84:	ldr	r2, [sp, #4]
   14e88:	ldr	r1, [sp, #8]
   14e8c:	b	14eb0 <__assert_fail@plt+0x3424>
   14e90:	ldr	r2, [sp, #4]
   14e94:	mov	r4, sl
   14e98:	mov	r6, r9
   14e9c:	ldrb	r3, [r6], #1
   14ea0:	strb	r3, [r4], #1
   14ea4:	cmp	r8, r6
   14ea8:	bne	14e9c <__assert_fail@plt+0x3410>
   14eac:	add	sl, sl, r0
   14eb0:	mov	r0, #115	; 0x73
   14eb4:	strh	r0, [sl]
   14eb8:	mov	r0, #1
   14ebc:	sub	sp, fp, #28
   14ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ec4:	b	11924 <__printf_chk@plt>
   14ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ecc:	add	fp, sp, #28
   14ed0:	sub	sp, sp, #12
   14ed4:	mov	r7, r1
   14ed8:	add	r9, r0, r1
   14edc:	add	sl, r0, #1
   14ee0:	cmp	r1, #2
   14ee4:	stm	sp, {r2, r3}
   14ee8:	str	r0, [sp, #8]
   14eec:	blt	14fa4 <__assert_fail@plt+0x3518>
   14ef0:	movw	r4, #61921	; 0xf1e1
   14ef4:	movw	r5, #60442	; 0xec1a
   14ef8:	mov	r8, sl
   14efc:	movt	r4, #1
   14f00:	movt	r5, #1
   14f04:	ldrb	r6, [r8]
   14f08:	mov	r0, r4
   14f0c:	mov	r2, #8
   14f10:	mov	r1, r6
   14f14:	bl	11948 <memchr@plt>
   14f18:	cmp	r0, #0
   14f1c:	beq	14f44 <__assert_fail@plt+0x34b8>
   14f20:	mov	r0, r5
   14f24:	mov	r1, r6
   14f28:	mov	r2, #4
   14f2c:	bl	11948 <memchr@plt>
   14f30:	cmp	r0, #0
   14f34:	add	r8, r8, #1
   14f38:	strbne	r6, [sl], #1
   14f3c:	cmp	r8, r9
   14f40:	bcc	14f04 <__assert_fail@plt+0x3478>
   14f44:	cmp	r8, r9
   14f48:	bcs	14fb0 <__assert_fail@plt+0x3524>
   14f4c:	ldr	r1, [sp, #8]
   14f50:	sub	r0, r7, r8
   14f54:	add	r0, r1, r0
   14f58:	cmp	r0, #16
   14f5c:	bcc	14fbc <__assert_fail@plt+0x3530>
   14f60:	cmp	sl, r9
   14f64:	addcc	r2, sl, r0
   14f68:	cmpcc	r8, r2
   14f6c:	bcc	14fbc <__assert_fail@plt+0x3530>
   14f70:	bic	r7, r0, #15
   14f74:	mov	r6, sl
   14f78:	add	r5, r8, r7
   14f7c:	add	r4, sl, r7
   14f80:	mov	r3, r7
   14f84:	vld1.8	{d16-d17}, [r8]!
   14f88:	subs	r3, r3, #16
   14f8c:	vst1.8	{d16-d17}, [r6]!
   14f90:	bne	14f84 <__assert_fail@plt+0x34f8>
   14f94:	ldm	sp, {r2, r3}
   14f98:	cmp	r7, r0
   14f9c:	bne	14fc8 <__assert_fail@plt+0x353c>
   14fa0:	b	14fd8 <__assert_fail@plt+0x354c>
   14fa4:	mov	r8, sl
   14fa8:	cmp	r8, r9
   14fac:	bcc	14f4c <__assert_fail@plt+0x34c0>
   14fb0:	ldm	sp, {r2, r3}
   14fb4:	ldr	r1, [sp, #8]
   14fb8:	b	14fdc <__assert_fail@plt+0x3550>
   14fbc:	ldm	sp, {r2, r3}
   14fc0:	mov	r4, sl
   14fc4:	mov	r5, r8
   14fc8:	ldrb	r7, [r5], #1
   14fcc:	strb	r7, [r4], #1
   14fd0:	cmp	r9, r5
   14fd4:	bne	14fc8 <__assert_fail@plt+0x353c>
   14fd8:	add	sl, sl, r0
   14fdc:	movw	r0, #27756	; 0x6c6c
   14fe0:	movt	r0, #117	; 0x75
   14fe4:	str	r0, [sl]
   14fe8:	mov	r0, #1
   14fec:	sub	sp, fp, #28
   14ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ff4:	b	11924 <__printf_chk@plt>
   14ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ffc:	add	fp, sp, #28
   15000:	sub	sp, sp, #12
   15004:	mov	r7, r1
   15008:	add	r9, r0, r1
   1500c:	add	sl, r0, #1
   15010:	cmp	r1, #2
   15014:	stm	sp, {r2, r3}
   15018:	str	r0, [sp, #8]
   1501c:	blt	150d4 <__assert_fail@plt+0x3648>
   15020:	movw	r4, #61921	; 0xf1e1
   15024:	movw	r5, #60450	; 0xec22
   15028:	mov	r8, sl
   1502c:	movt	r4, #1
   15030:	movt	r5, #1
   15034:	ldrb	r6, [r8]
   15038:	mov	r0, r4
   1503c:	mov	r2, #8
   15040:	mov	r1, r6
   15044:	bl	11948 <memchr@plt>
   15048:	cmp	r0, #0
   1504c:	beq	15074 <__assert_fail@plt+0x35e8>
   15050:	mov	r0, r5
   15054:	mov	r1, r6
   15058:	mov	r2, #4
   1505c:	bl	11948 <memchr@plt>
   15060:	cmp	r0, #0
   15064:	add	r8, r8, #1
   15068:	strbne	r6, [sl], #1
   1506c:	cmp	r8, r9
   15070:	bcc	15034 <__assert_fail@plt+0x35a8>
   15074:	cmp	r8, r9
   15078:	bcs	150e0 <__assert_fail@plt+0x3654>
   1507c:	ldr	r1, [sp, #8]
   15080:	sub	r0, r7, r8
   15084:	add	r0, r1, r0
   15088:	cmp	r0, #16
   1508c:	bcc	150ec <__assert_fail@plt+0x3660>
   15090:	cmp	sl, r9
   15094:	addcc	r2, sl, r0
   15098:	cmpcc	r8, r2
   1509c:	bcc	150ec <__assert_fail@plt+0x3660>
   150a0:	bic	r7, r0, #15
   150a4:	mov	r6, sl
   150a8:	add	r5, r8, r7
   150ac:	add	r4, sl, r7
   150b0:	mov	r3, r7
   150b4:	vld1.8	{d16-d17}, [r8]!
   150b8:	subs	r3, r3, #16
   150bc:	vst1.8	{d16-d17}, [r6]!
   150c0:	bne	150b4 <__assert_fail@plt+0x3628>
   150c4:	ldm	sp, {r2, r3}
   150c8:	cmp	r7, r0
   150cc:	bne	150f8 <__assert_fail@plt+0x366c>
   150d0:	b	15108 <__assert_fail@plt+0x367c>
   150d4:	mov	r8, sl
   150d8:	cmp	r8, r9
   150dc:	bcc	1507c <__assert_fail@plt+0x35f0>
   150e0:	ldm	sp, {r2, r3}
   150e4:	ldr	r1, [sp, #8]
   150e8:	b	1510c <__assert_fail@plt+0x3680>
   150ec:	ldm	sp, {r2, r3}
   150f0:	mov	r4, sl
   150f4:	mov	r5, r8
   150f8:	ldrb	r7, [r5], #1
   150fc:	strb	r7, [r4], #1
   15100:	cmp	r9, r5
   15104:	bne	150f8 <__assert_fail@plt+0x366c>
   15108:	add	sl, sl, r0
   1510c:	movw	r0, #27756	; 0x6c6c
   15110:	movt	r0, #120	; 0x78
   15114:	str	r0, [sl]
   15118:	mov	r0, #1
   1511c:	sub	sp, fp, #28
   15120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15124:	b	11924 <__printf_chk@plt>
   15128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1512c:	add	fp, sp, #28
   15130:	sub	sp, sp, #12
   15134:	mov	r7, r1
   15138:	add	r9, r0, r1
   1513c:	add	sl, r0, #1
   15140:	cmp	r1, #2
   15144:	stm	sp, {r2, r3}
   15148:	str	r0, [sp, #8]
   1514c:	blt	15204 <__assert_fail@plt+0x3778>
   15150:	movw	r4, #61921	; 0xf1e1
   15154:	movw	r5, #60532	; 0xec74
   15158:	mov	r8, sl
   1515c:	movt	r4, #1
   15160:	movt	r5, #1
   15164:	ldrb	r6, [r8]
   15168:	mov	r0, r4
   1516c:	mov	r2, #8
   15170:	mov	r1, r6
   15174:	bl	11948 <memchr@plt>
   15178:	cmp	r0, #0
   1517c:	beq	151a4 <__assert_fail@plt+0x3718>
   15180:	mov	r0, r5
   15184:	mov	r1, r6
   15188:	mov	r2, #6
   1518c:	bl	11948 <memchr@plt>
   15190:	cmp	r0, #0
   15194:	add	r8, r8, #1
   15198:	strbne	r6, [sl], #1
   1519c:	cmp	r8, r9
   151a0:	bcc	15164 <__assert_fail@plt+0x36d8>
   151a4:	cmp	r8, r9
   151a8:	bcs	15210 <__assert_fail@plt+0x3784>
   151ac:	ldr	r1, [sp, #8]
   151b0:	sub	r0, r7, r8
   151b4:	add	r0, r1, r0
   151b8:	cmp	r0, #16
   151bc:	bcc	1521c <__assert_fail@plt+0x3790>
   151c0:	cmp	sl, r9
   151c4:	addcc	r2, sl, r0
   151c8:	cmpcc	r8, r2
   151cc:	bcc	1521c <__assert_fail@plt+0x3790>
   151d0:	bic	r7, r0, #15
   151d4:	mov	r6, sl
   151d8:	add	r5, r8, r7
   151dc:	add	r4, sl, r7
   151e0:	mov	r3, r7
   151e4:	vld1.8	{d16-d17}, [r8]!
   151e8:	subs	r3, r3, #16
   151ec:	vst1.8	{d16-d17}, [r6]!
   151f0:	bne	151e4 <__assert_fail@plt+0x3758>
   151f4:	ldm	sp, {r2, r3}
   151f8:	cmp	r7, r0
   151fc:	bne	15228 <__assert_fail@plt+0x379c>
   15200:	b	15238 <__assert_fail@plt+0x37ac>
   15204:	mov	r8, sl
   15208:	cmp	r8, r9
   1520c:	bcc	151ac <__assert_fail@plt+0x3720>
   15210:	ldm	sp, {r2, r3}
   15214:	ldr	r1, [sp, #8]
   15218:	b	1523c <__assert_fail@plt+0x37b0>
   1521c:	ldm	sp, {r2, r3}
   15220:	mov	r4, sl
   15224:	mov	r5, r8
   15228:	ldrb	r7, [r5], #1
   1522c:	strb	r7, [r4], #1
   15230:	cmp	r9, r5
   15234:	bne	15228 <__assert_fail@plt+0x379c>
   15238:	add	sl, sl, r0
   1523c:	movw	r0, #27756	; 0x6c6c
   15240:	movt	r0, #100	; 0x64
   15244:	str	r0, [sl]
   15248:	mov	r0, #1
   1524c:	sub	sp, fp, #28
   15250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15254:	b	11924 <__printf_chk@plt>
   15258:	push	{r4, r5, fp, lr}
   1525c:	add	fp, sp, #8
   15260:	sub	sp, sp, #88	; 0x58
   15264:	movw	r5, #588	; 0x24c
   15268:	str	r1, [fp, #-12]
   1526c:	str	r0, [fp, #-16]
   15270:	mov	r4, r1
   15274:	movt	r5, #3
   15278:	ldr	r0, [r5]
   1527c:	cmp	r0, #0
   15280:	bne	15298 <__assert_fail@plt+0x380c>
   15284:	movw	r0, #60542	; 0xec7e
   15288:	movt	r0, #1
   1528c:	bl	11804 <getenv@plt>
   15290:	bl	1ac9c <__assert_fail@plt+0x9210>
   15294:	str	r0, [r5]
   15298:	sub	r1, fp, #16
   1529c:	add	r2, sp, #36	; 0x24
   152a0:	bl	1ad50 <__assert_fail@plt+0x92c4>
   152a4:	cmp	r0, #0
   152a8:	beq	152d8 <__assert_fail@plt+0x384c>
   152ac:	ldr	r0, [r5]
   152b0:	movw	r2, #60545	; 0xec81
   152b4:	add	r3, sp, #36	; 0x24
   152b8:	mov	r1, #61	; 0x3d
   152bc:	movt	r2, #1
   152c0:	stm	sp, {r0, r4}
   152c4:	movw	r0, #525	; 0x20d
   152c8:	movt	r0, #3
   152cc:	bl	17394 <__assert_fail@plt+0x5908>
   152d0:	sub	sp, fp, #8
   152d4:	pop	{r4, r5, fp, pc}
   152d8:	ldr	r0, [fp, #-16]
   152dc:	add	r2, sp, #15
   152e0:	asr	r1, r0, #31
   152e4:	bl	16660 <__assert_fail@plt+0x4bd4>
   152e8:	movw	r3, #60569	; 0xec99
   152ec:	stm	sp, {r0, r4}
   152f0:	movw	r0, #525	; 0x20d
   152f4:	mov	r1, #1
   152f8:	mov	r2, #61	; 0x3d
   152fc:	movt	r0, #3
   15300:	movt	r3, #1
   15304:	bl	118f4 <__sprintf_chk@plt>
   15308:	sub	sp, fp, #8
   1530c:	pop	{r4, r5, fp, pc}
   15310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15314:	add	fp, sp, #28
   15318:	sub	sp, sp, #28
   1531c:	mov	r6, r1
   15320:	mov	sl, r2
   15324:	mov	r1, #46	; 0x2e
   15328:	mov	r9, r3
   1532c:	mov	r7, r0
   15330:	mov	r2, r6
   15334:	bl	11948 <memchr@plt>
   15338:	cmp	r0, #0
   1533c:	beq	15428 <__assert_fail@plt+0x399c>
   15340:	mov	r4, r0
   15344:	mov	r0, #0
   15348:	mov	r5, #9
   1534c:	strb	r0, [r7, r6]
   15350:	mov	r0, r4
   15354:	sub	r6, r4, r7
   15358:	ldrb	r1, [r0, #1]!
   1535c:	sub	r1, r1, #48	; 0x30
   15360:	cmp	r1, #9
   15364:	bhi	15384 <__assert_fail@plt+0x38f8>
   15368:	mov	r1, #0
   1536c:	mov	r2, #10
   15370:	mov	r8, #0
   15374:	bl	116c0 <strtol@plt>
   15378:	mov	r5, r0
   1537c:	cmp	r0, #0
   15380:	beq	1542c <__assert_fail@plt+0x39a0>
   15384:	ldrb	r0, [r4, #-1]
   15388:	sub	r0, r0, #48	; 0x30
   1538c:	cmp	r0, #9
   15390:	bhi	15438 <__assert_fail@plt+0x39ac>
   15394:	mov	r0, #0
   15398:	strb	r0, [r4]
   1539c:	ldrb	r0, [r4, #-2]
   153a0:	sub	r8, r4, #1
   153a4:	mov	r4, r8
   153a8:	sub	r0, r0, #48	; 0x30
   153ac:	cmp	r0, #10
   153b0:	bcc	1539c <__assert_fail@plt+0x3910>
   153b4:	mov	r0, r8
   153b8:	mov	r1, #0
   153bc:	mov	r2, #10
   153c0:	bl	116c0 <strtol@plt>
   153c4:	mov	r1, r0
   153c8:	cmp	r0, #2
   153cc:	blt	154c4 <__assert_fail@plt+0x3a38>
   153d0:	movw	r0, #500	; 0x1f4
   153d4:	mov	r3, r1
   153d8:	movt	r0, #3
   153dc:	ldr	r0, [r0]
   153e0:	cmp	r1, r0
   153e4:	movls	r1, r0
   153e8:	sub	r0, r1, r0
   153ec:	ldrb	r1, [r8]
   153f0:	cmp	r0, #2
   153f4:	subge	r2, r0, r5
   153f8:	cmpge	r2, #2
   153fc:	sub	r1, r1, #48	; 0x30
   15400:	clz	r1, r1
   15404:	lsr	r1, r1, #5
   15408:	add	r1, r8, r1
   1540c:	sub	r6, r1, r7
   15410:	bge	156bc <__assert_fail@plt+0x3c30>
   15414:	mov	r4, r9
   15418:	mov	r8, r3
   1541c:	cmp	r5, #8
   15420:	ble	15448 <__assert_fail@plt+0x39bc>
   15424:	b	154d4 <__assert_fail@plt+0x3a48>
   15428:	mov	r8, #0
   1542c:	mov	r5, #0
   15430:	mov	r4, r9
   15434:	b	15448 <__assert_fail@plt+0x39bc>
   15438:	mov	r8, #0
   1543c:	mov	r4, r9
   15440:	cmp	r5, #8
   15444:	bgt	154d4 <__assert_fail@plt+0x3a48>
   15448:	cmp	r5, #8
   1544c:	mov	r0, r5
   15450:	mov	r1, r5
   15454:	movle	r0, #8
   15458:	add	r0, r0, #1
   1545c:	sub	r2, r0, r5
   15460:	mov	r0, #1
   15464:	cmp	r2, #3
   15468:	bls	154a4 <__assert_fail@plt+0x3a18>
   1546c:	bic	r3, r2, #3
   15470:	vmov.i32	q8, #1	; 0x00000001
   15474:	vmov.i32	q9, #10	; 0x0000000a
   15478:	add	r1, r5, r3
   1547c:	mov	r0, r3
   15480:	subs	r0, r0, #4
   15484:	vmul.i32	q8, q8, q9
   15488:	bne	15480 <__assert_fail@plt+0x39f4>
   1548c:	vext.8	q9, q8, q8, #8
   15490:	cmp	r2, r3
   15494:	vmul.i32	q0, q8, q9
   15498:	vmul.i32	q8, q0, d0[1]
   1549c:	vmov.32	r0, d16[0]
   154a0:	beq	154bc <__assert_fail@plt+0x3a30>
   154a4:	sub	r1, r1, #1
   154a8:	add	r0, r0, r0, lsl #2
   154ac:	add	r1, r1, #1
   154b0:	lsl	r0, r0, #1
   154b4:	cmp	r1, #8
   154b8:	blt	154a8 <__assert_fail@plt+0x3a1c>
   154bc:	str	r5, [sp, #24]
   154c0:	b	154e0 <__assert_fail@plt+0x3a54>
   154c4:	mov	r4, r9
   154c8:	mov	r8, r1
   154cc:	cmp	r5, #8
   154d0:	ble	15448 <__assert_fail@plt+0x39bc>
   154d4:	mov	r1, #9
   154d8:	mov	r0, #1
   154dc:	str	r1, [sp, #24]
   154e0:	sdiv	r9, r4, r0
   154e4:	cmn	sl, #1
   154e8:	bgt	15520 <__assert_fail@plt+0x3a94>
   154ec:	cmp	r4, #0
   154f0:	beq	15520 <__assert_fail@plt+0x3a94>
   154f4:	movw	r2, #51712	; 0xca00
   154f8:	mls	r1, r9, r0, r4
   154fc:	movt	r2, #15258	; 0x3b9a
   15500:	cmp	r1, #0
   15504:	udiv	r0, r2, r0
   15508:	sub	r9, r0, r9
   1550c:	subne	r9, r9, #1
   15510:	cmp	r9, #0
   15514:	addne	sl, sl, #1
   15518:	cmp	sl, #0
   1551c:	beq	155ac <__assert_fail@plt+0x3b20>
   15520:	asr	r3, sl, #31
   15524:	mov	r0, r7
   15528:	mov	r1, r6
   1552c:	mov	r2, sl
   15530:	bl	15128 <__assert_fail@plt+0x369c>
   15534:	cmp	r5, #0
   15538:	beq	155a4 <__assert_fail@plt+0x3b18>
   1553c:	ldr	r3, [sp, #24]
   15540:	bic	r2, r0, r0, asr #31
   15544:	mov	r0, #0
   15548:	mov	r6, #0
   1554c:	cmp	r8, r2
   15550:	sub	r1, r5, r3
   15554:	ble	15578 <__assert_fail@plt+0x3aec>
   15558:	movw	r7, #500	; 0x1f4
   1555c:	sub	r2, r8, r2
   15560:	mov	r6, #0
   15564:	movt	r7, #3
   15568:	ldr	r7, [r7]
   1556c:	cmp	r2, r7
   15570:	subhi	r2, r2, r3
   15574:	subhi	r6, r2, r7
   15578:	movw	r2, #496	; 0x1f0
   1557c:	str	r1, [sp, #8]
   15580:	movw	r1, #60577	; 0xeca1
   15584:	str	r0, [sp, #12]
   15588:	mov	r0, #1
   1558c:	str	r9, [sp]
   15590:	str	r6, [sp, #4]
   15594:	movt	r2, #3
   15598:	movt	r1, #1
   1559c:	ldr	r2, [r2]
   155a0:	bl	11924 <__printf_chk@plt>
   155a4:	sub	sp, fp, #28
   155a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155ac:	add	sl, r7, #1
   155b0:	str	r8, [sp, #16]
   155b4:	add	r8, r7, r6
   155b8:	cmp	r6, #2
   155bc:	mov	r0, r6
   155c0:	str	r7, [sp, #20]
   155c4:	mov	r4, sl
   155c8:	blt	15614 <__assert_fail@plt+0x3b88>
   155cc:	ldrb	r7, [r4]
   155d0:	movw	r0, #61921	; 0xf1e1
   155d4:	mov	r2, #8
   155d8:	movt	r0, #1
   155dc:	mov	r1, r7
   155e0:	bl	11948 <memchr@plt>
   155e4:	cmp	r0, #0
   155e8:	beq	15614 <__assert_fail@plt+0x3b88>
   155ec:	movw	r0, #60532	; 0xec74
   155f0:	mov	r1, r7
   155f4:	mov	r2, #6
   155f8:	movt	r0, #1
   155fc:	bl	11948 <memchr@plt>
   15600:	cmp	r0, #0
   15604:	add	r4, r4, #1
   15608:	strbne	r7, [sl], #1
   1560c:	cmp	r4, r8
   15610:	bcc	155cc <__assert_fail@plt+0x3b40>
   15614:	cmp	r4, r8
   15618:	bcs	1568c <__assert_fail@plt+0x3c00>
   1561c:	ldr	r1, [sp, #20]
   15620:	sub	r0, r6, r4
   15624:	add	r0, r1, r0
   15628:	cmp	r0, #16
   1562c:	bcc	15670 <__assert_fail@plt+0x3be4>
   15630:	cmp	sl, r8
   15634:	addcc	r1, sl, r0
   15638:	cmpcc	r4, r1
   1563c:	bcc	15670 <__assert_fail@plt+0x3be4>
   15640:	bic	r7, r0, #15
   15644:	mov	r6, sl
   15648:	add	r2, r4, r7
   1564c:	add	r1, sl, r7
   15650:	mov	r3, r7
   15654:	vld1.8	{d16-d17}, [r4]!
   15658:	subs	r3, r3, #16
   1565c:	vst1.8	{d16-d17}, [r6]!
   15660:	bne	15654 <__assert_fail@plt+0x3bc8>
   15664:	cmp	r7, r0
   15668:	bne	15678 <__assert_fail@plt+0x3bec>
   1566c:	b	15688 <__assert_fail@plt+0x3bfc>
   15670:	mov	r1, sl
   15674:	mov	r2, r4
   15678:	ldrb	r3, [r2], #1
   1567c:	strb	r3, [r1], #1
   15680:	cmp	r8, r2
   15684:	bne	15678 <__assert_fail@plt+0x3bec>
   15688:	add	sl, sl, r0
   1568c:	ldr	r1, [sp, #20]
   15690:	movw	r0, #12334	; 0x302e
   15694:	vmov.f64	d16, #208	; 0xbe800000 -0.250
   15698:	movt	r0, #102	; 0x66
   1569c:	vmov	r2, r3, d16
   156a0:	str	r0, [sl]
   156a4:	mov	r0, #1
   156a8:	bl	11924 <__printf_chk@plt>
   156ac:	ldr	r8, [sp, #16]
   156b0:	cmp	r5, #0
   156b4:	bne	1553c <__assert_fail@plt+0x3ab0>
   156b8:	b	155a4 <__assert_fail@plt+0x3b18>
   156bc:	mov	r4, #0
   156c0:	cmp	r1, r7
   156c4:	mov	r0, r7
   156c8:	mov	r8, r3
   156cc:	bls	15714 <__assert_fail@plt+0x3c88>
   156d0:	mov	ip, r8
   156d4:	add	r1, r1, #1
   156d8:	add	r3, r7, #1
   156dc:	mov	r6, #0
   156e0:	mov	r0, r7
   156e4:	ldrb	r4, [r3, #-1]
   156e8:	add	r3, r3, #1
   156ec:	cmp	r4, #45	; 0x2d
   156f0:	strbne	r4, [r0], #1
   156f4:	moveq	r6, #1
   156f8:	cmp	r1, r3
   156fc:	bne	156e4 <__assert_fail@plt+0x3c58>
   15700:	sub	r4, r0, r7
   15704:	mov	r1, #0
   15708:	tst	r6, #1
   1570c:	mov	r8, ip
   15710:	bne	15730 <__assert_fail@plt+0x3ca4>
   15714:	movw	r3, #62475	; 0xf40b
   15718:	str	r2, [sp]
   1571c:	mov	r1, #1
   15720:	mvn	r2, #0
   15724:	movt	r3, #1
   15728:	bl	118f4 <__sprintf_chk@plt>
   1572c:	mov	r1, r0
   15730:	add	r6, r4, r1
   15734:	b	1543c <__assert_fail@plt+0x39b0>
   15738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1573c:	add	fp, sp, #28
   15740:	sub	sp, sp, #212	; 0xd4
   15744:	movw	r6, #524	; 0x20c
   15748:	mov	r4, r0
   1574c:	movt	r6, #3
   15750:	ldrb	r0, [r6]
   15754:	cmp	r0, #0
   15758:	bne	157b4 <__assert_fail@plt+0x3d28>
   1575c:	mov	r0, #0
   15760:	bl	16720 <__assert_fail@plt+0x4c94>
   15764:	movw	r1, #520	; 0x208
   15768:	cmp	r0, #0
   1576c:	movt	r1, #3
   15770:	str	r0, [r1]
   15774:	bne	157ac <__assert_fail@plt+0x3d20>
   15778:	bl	118e8 <__errno_location@plt>
   1577c:	ldr	r5, [r0]
   15780:	movw	r1, #60490	; 0xec4a
   15784:	mov	r0, #0
   15788:	mov	r2, #5
   1578c:	movt	r1, #1
   15790:	bl	1172c <dcgettext@plt>
   15794:	movw	r2, #58893	; 0xe60d
   15798:	mov	r3, r0
   1579c:	mov	r0, #0
   157a0:	mov	r1, r5
   157a4:	movt	r2, #1
   157a8:	bl	117e0 <error@plt>
   157ac:	mov	r0, #1
   157b0:	strb	r0, [r6]
   157b4:	add	r7, sp, #104	; 0x68
   157b8:	mov	r0, #3
   157bc:	mov	r1, r4
   157c0:	mov	r2, r7
   157c4:	bl	11a38 <__xstat64@plt>
   157c8:	mov	r5, #0
   157cc:	cmp	r0, #0
   157d0:	bne	1587c <__assert_fail@plt+0x3df0>
   157d4:	movw	r0, #520	; 0x208
   157d8:	movt	r0, #3
   157dc:	ldr	r6, [r0]
   157e0:	cmp	r6, #0
   157e4:	beq	1587c <__assert_fail@plt+0x3df0>
   157e8:	mov	r8, sp
   157ec:	add	sl, r7, #96	; 0x60
   157f0:	add	r9, r8, #96	; 0x60
   157f4:	ldrb	r0, [r6, #24]
   157f8:	tst	r0, #1
   157fc:	beq	15870 <__assert_fail@plt+0x3de4>
   15800:	ldr	r7, [r6]
   15804:	ldrb	r0, [r7]
   15808:	cmp	r0, #47	; 0x2f
   1580c:	bne	15870 <__assert_fail@plt+0x3de4>
   15810:	ldr	r0, [r6, #4]
   15814:	mov	r1, r4
   15818:	bl	116b4 <strcmp@plt>
   1581c:	cmp	r0, #0
   15820:	bne	15870 <__assert_fail@plt+0x3de4>
   15824:	mov	r0, #3
   15828:	mov	r1, r7
   1582c:	mov	r2, r8
   15830:	bl	11a38 <__xstat64@plt>
   15834:	cmp	r0, #0
   15838:	bne	15870 <__assert_fail@plt+0x3de4>
   1583c:	ldrd	r0, [r9]
   15840:	ldrd	r2, [sl]
   15844:	eor	r1, r3, r1
   15848:	eor	r0, r2, r0
   1584c:	orrs	r0, r0, r1
   15850:	bne	15870 <__assert_fail@plt+0x3de4>
   15854:	ldm	sp, {r0, r1}
   15858:	ldr	r2, [sp, #104]	; 0x68
   1585c:	ldr	r3, [sp, #108]	; 0x6c
   15860:	eor	r1, r3, r1
   15864:	eor	r0, r2, r0
   15868:	orrs	r0, r0, r1
   1586c:	beq	15888 <__assert_fail@plt+0x3dfc>
   15870:	ldr	r6, [r6, #28]
   15874:	cmp	r6, #0
   15878:	bne	157f4 <__assert_fail@plt+0x3d68>
   1587c:	mov	r0, r5
   15880:	sub	sp, fp, #28
   15884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15888:	ldr	r5, [r6]
   1588c:	b	1587c <__assert_fail@plt+0x3df0>
   15890:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15894:	add	fp, sp, #24
   15898:	sub	sp, sp, #216	; 0xd8
   1589c:	mov	r5, r0
   158a0:	sub	r0, fp, #32
   158a4:	mov	r4, r1
   158a8:	bl	1aaa0 <__assert_fail@plt+0x9014>
   158ac:	cmp	r0, #0
   158b0:	beq	158e8 <__assert_fail@plt+0x3e5c>
   158b4:	bl	118e8 <__errno_location@plt>
   158b8:	ldr	r5, [r0]
   158bc:	movw	r1, #61940	; 0xf1f4
   158c0:	mov	r0, #0
   158c4:	mov	r2, #5
   158c8:	mov	r4, #0
   158cc:	movt	r1, #1
   158d0:	bl	1172c <dcgettext@plt>
   158d4:	mov	r2, r0
   158d8:	mov	r0, #0
   158dc:	mov	r1, r5
   158e0:	bl	117e0 <error@plt>
   158e4:	b	15b44 <__assert_fail@plt+0x40b8>
   158e8:	ldr	r0, [r4, #16]
   158ec:	and	r0, r0, #61440	; 0xf000
   158f0:	cmp	r0, #16384	; 0x4000
   158f4:	bne	1591c <__assert_fail@plt+0x3e90>
   158f8:	sub	r0, fp, #136	; 0x88
   158fc:	mov	r1, r4
   15900:	mov	r2, #104	; 0x68
   15904:	bl	11708 <memcpy@plt>
   15908:	mov	r0, r5
   1590c:	bl	11768 <chdir@plt>
   15910:	cmn	r0, #1
   15914:	bgt	15980 <__assert_fail@plt+0x3ef4>
   15918:	b	15a3c <__assert_fail@plt+0x3fb0>
   1591c:	mov	r0, r5
   15920:	bl	16318 <__assert_fail@plt+0x488c>
   15924:	mov	r4, r0
   15928:	bl	118ac <strlen@plt>
   1592c:	add	r1, r0, #8
   15930:	bic	r1, r1, #7
   15934:	sub	r5, sp, r1
   15938:	mov	sp, r5
   1593c:	add	r2, r0, #1
   15940:	mov	r0, r5
   15944:	mov	r1, r4
   15948:	bl	11708 <memcpy@plt>
   1594c:	mov	r0, r4
   15950:	bl	16638 <__assert_fail@plt+0x4bac>
   15954:	mov	r0, r5
   15958:	bl	11768 <chdir@plt>
   1595c:	cmn	r0, #1
   15960:	ble	15a3c <__assert_fail@plt+0x3fb0>
   15964:	movw	r1, #62039	; 0xf257
   15968:	sub	r2, fp, #136	; 0x88
   1596c:	mov	r0, #3
   15970:	movt	r1, #1
   15974:	bl	11a38 <__xstat64@plt>
   15978:	cmn	r0, #1
   1597c:	ble	15a90 <__assert_fail@plt+0x4004>
   15980:	movw	r1, #62038	; 0xf256
   15984:	sub	r4, fp, #240	; 0xf0
   15988:	mov	r0, #3
   1598c:	movt	r1, #1
   15990:	mov	r2, r4
   15994:	bl	11a38 <__xstat64@plt>
   15998:	cmp	r0, #0
   1599c:	blt	15a24 <__assert_fail@plt+0x3f98>
   159a0:	movw	r6, #62038	; 0xf256
   159a4:	sub	r8, fp, #136	; 0x88
   159a8:	add	r5, r4, #96	; 0x60
   159ac:	add	r7, r8, #96	; 0x60
   159b0:	movt	r6, #1
   159b4:	ldr	r0, [fp, #-136]	; 0xffffff78
   159b8:	ldr	r2, [fp, #-240]	; 0xffffff10
   159bc:	ldr	r1, [fp, #-132]	; 0xffffff7c
   159c0:	ldr	r3, [fp, #-236]	; 0xffffff14
   159c4:	eor	r1, r3, r1
   159c8:	eor	r0, r2, r0
   159cc:	orrs	r0, r0, r1
   159d0:	bne	15a84 <__assert_fail@plt+0x3ff8>
   159d4:	ldrd	r0, [r7]
   159d8:	ldrd	r2, [r5]
   159dc:	eor	r1, r3, r1
   159e0:	eor	r0, r2, r0
   159e4:	orrs	r0, r0, r1
   159e8:	beq	15a84 <__assert_fail@plt+0x3ff8>
   159ec:	mov	r0, r6
   159f0:	bl	11768 <chdir@plt>
   159f4:	cmn	r0, #1
   159f8:	ble	15ad4 <__assert_fail@plt+0x4048>
   159fc:	mov	r0, r8
   15a00:	mov	r1, r4
   15a04:	mov	r2, #104	; 0x68
   15a08:	bl	11708 <memcpy@plt>
   15a0c:	mov	r0, #3
   15a10:	mov	r1, r6
   15a14:	mov	r2, r4
   15a18:	bl	11a38 <__xstat64@plt>
   15a1c:	cmp	r0, #0
   15a20:	bge	159b4 <__assert_fail@plt+0x3f28>
   15a24:	bl	118e8 <__errno_location@plt>
   15a28:	ldr	r5, [r0]
   15a2c:	movw	r1, #62041	; 0xf259
   15a30:	mov	r4, #0
   15a34:	movt	r1, #1
   15a38:	b	15ae8 <__assert_fail@plt+0x405c>
   15a3c:	bl	118e8 <__errno_location@plt>
   15a40:	ldr	r6, [r0]
   15a44:	movw	r1, #61969	; 0xf211
   15a48:	mov	r0, #0
   15a4c:	mov	r2, #5
   15a50:	mov	r4, #0
   15a54:	movt	r1, #1
   15a58:	bl	1172c <dcgettext@plt>
   15a5c:	mov	r7, r0
   15a60:	mov	r0, #4
   15a64:	mov	r1, r5
   15a68:	bl	1a440 <__assert_fail@plt+0x89b4>
   15a6c:	mov	r3, r0
   15a70:	mov	r0, #0
   15a74:	mov	r1, r6
   15a78:	mov	r2, r7
   15a7c:	bl	117e0 <error@plt>
   15a80:	b	15b44 <__assert_fail@plt+0x40b8>
   15a84:	bl	1bf0c <__assert_fail@plt+0xa480>
   15a88:	mov	r4, r0
   15a8c:	b	15b1c <__assert_fail@plt+0x4090>
   15a90:	bl	118e8 <__errno_location@plt>
   15a94:	ldr	r6, [r0]
   15a98:	movw	r1, #61999	; 0xf22f
   15a9c:	mov	r0, #0
   15aa0:	mov	r2, #5
   15aa4:	mov	r4, #0
   15aa8:	movt	r1, #1
   15aac:	bl	1172c <dcgettext@plt>
   15ab0:	mov	r7, r0
   15ab4:	mov	r0, #4
   15ab8:	mov	r1, r5
   15abc:	bl	1a440 <__assert_fail@plt+0x89b4>
   15ac0:	mov	r3, r0
   15ac4:	mov	r0, #0
   15ac8:	mov	r1, r6
   15acc:	mov	r2, r7
   15ad0:	b	15b18 <__assert_fail@plt+0x408c>
   15ad4:	bl	118e8 <__errno_location@plt>
   15ad8:	ldr	r5, [r0]
   15adc:	movw	r1, #61969	; 0xf211
   15ae0:	mov	r4, #0
   15ae4:	movt	r1, #1
   15ae8:	mov	r0, #0
   15aec:	mov	r2, #5
   15af0:	bl	1172c <dcgettext@plt>
   15af4:	movw	r1, #62038	; 0xf256
   15af8:	mov	r6, r0
   15afc:	mov	r0, #4
   15b00:	movt	r1, #1
   15b04:	bl	1a440 <__assert_fail@plt+0x89b4>
   15b08:	mov	r3, r0
   15b0c:	mov	r0, #0
   15b10:	mov	r1, r5
   15b14:	mov	r2, r6
   15b18:	bl	117e0 <error@plt>
   15b1c:	bl	118e8 <__errno_location@plt>
   15b20:	ldr	r6, [r0]
   15b24:	mov	r5, r0
   15b28:	sub	r0, fp, #32
   15b2c:	bl	1aafc <__assert_fail@plt+0x9070>
   15b30:	cmp	r0, #0
   15b34:	bne	15b50 <__assert_fail@plt+0x40c4>
   15b38:	sub	r0, fp, #32
   15b3c:	bl	1ab18 <__assert_fail@plt+0x908c>
   15b40:	str	r6, [r5]
   15b44:	mov	r0, r4
   15b48:	sub	sp, fp, #24
   15b4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b50:	ldr	r4, [r5]
   15b54:	movw	r1, #62056	; 0xf268
   15b58:	mov	r0, #0
   15b5c:	mov	r2, #5
   15b60:	movt	r1, #1
   15b64:	bl	1172c <dcgettext@plt>
   15b68:	mov	r2, r0
   15b6c:	mov	r0, #1
   15b70:	mov	r1, r4
   15b74:	bl	117e0 <error@plt>
   15b78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15b7c:	add	fp, sp, #24
   15b80:	sub	sp, sp, #128	; 0x80
   15b84:	mov	r4, r1
   15b88:	mov	r8, r0
   15b8c:	cmp	r1, #0
   15b90:	beq	15ba4 <__assert_fail@plt+0x4118>
   15b94:	movw	r6, #1025	; 0x401
   15b98:	cmp	r4, #1024	; 0x400
   15b9c:	addls	r6, r4, #1
   15ba0:	b	15ba8 <__assert_fail@plt+0x411c>
   15ba4:	mov	r6, #128	; 0x80
   15ba8:	mov	r9, sp
   15bac:	cmp	r4, #0
   15bb0:	beq	15bf0 <__assert_fail@plt+0x4164>
   15bb4:	b	15c00 <__assert_fail@plt+0x4174>
   15bb8:	cmp	r0, r6
   15bbc:	bcc	15c40 <__assert_fail@plt+0x41b4>
   15bc0:	mov	r0, r5
   15bc4:	bl	16638 <__assert_fail@plt+0x4bac>
   15bc8:	cmn	r6, #-1073741823	; 0xc0000001
   15bcc:	bhi	15bd8 <__assert_fail@plt+0x414c>
   15bd0:	lsl	r0, r6, #1
   15bd4:	b	15be4 <__assert_fail@plt+0x4158>
   15bd8:	mvn	r0, #-2147483648	; 0x80000000
   15bdc:	cmn	r6, #-2147483647	; 0x80000001
   15be0:	bcs	15c78 <__assert_fail@plt+0x41ec>
   15be4:	mov	r6, r0
   15be8:	cmp	r4, #0
   15bec:	bne	15c00 <__assert_fail@plt+0x4174>
   15bf0:	mov	r5, #0
   15bf4:	cmp	r6, #128	; 0x80
   15bf8:	mov	r7, r9
   15bfc:	beq	15c18 <__assert_fail@plt+0x418c>
   15c00:	mov	r0, r6
   15c04:	bl	1bfd0 <__assert_fail@plt+0xa544>
   15c08:	mov	r7, r0
   15c0c:	cmp	r0, #0
   15c10:	mov	r5, r0
   15c14:	beq	15c78 <__assert_fail@plt+0x41ec>
   15c18:	mov	r0, r8
   15c1c:	mov	r1, r7
   15c20:	mov	r2, r6
   15c24:	bl	1178c <readlink@plt>
   15c28:	cmn	r0, #1
   15c2c:	bgt	15bb8 <__assert_fail@plt+0x412c>
   15c30:	mov	r0, r5
   15c34:	bl	16638 <__assert_fail@plt+0x4bac>
   15c38:	mov	r4, #0
   15c3c:	b	15cb0 <__assert_fail@plt+0x4224>
   15c40:	mov	r4, #0
   15c44:	add	r8, r0, #1
   15c48:	cmp	r5, #0
   15c4c:	strb	r4, [r7, r0]
   15c50:	beq	15c8c <__assert_fail@plt+0x4200>
   15c54:	cmp	r8, r6
   15c58:	bcs	15cac <__assert_fail@plt+0x4220>
   15c5c:	mov	r0, r5
   15c60:	mov	r1, r8
   15c64:	bl	1c000 <__assert_fail@plt+0xa574>
   15c68:	mov	r4, r0
   15c6c:	cmp	r0, #0
   15c70:	moveq	r4, r5
   15c74:	b	15cb0 <__assert_fail@plt+0x4224>
   15c78:	bl	118e8 <__errno_location@plt>
   15c7c:	mov	r1, #12
   15c80:	mov	r4, #0
   15c84:	str	r1, [r0]
   15c88:	b	15cb0 <__assert_fail@plt+0x4224>
   15c8c:	mov	r0, r8
   15c90:	bl	1bfd0 <__assert_fail@plt+0xa544>
   15c94:	cmp	r0, #0
   15c98:	beq	15cb0 <__assert_fail@plt+0x4224>
   15c9c:	mov	r1, r7
   15ca0:	mov	r2, r8
   15ca4:	mov	r5, r0
   15ca8:	bl	11708 <memcpy@plt>
   15cac:	mov	r4, r5
   15cb0:	mov	r0, r4
   15cb4:	sub	sp, fp, #24
   15cb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15cbc:	mov	r0, #1
   15cc0:	b	11b88 <__assert_fail@plt+0xfc>
   15cc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cc8:	add	fp, sp, #28
   15ccc:	sub	sp, sp, #12
   15cd0:	mov	r4, r3
   15cd4:	mov	r6, r2
   15cd8:	mov	r5, r1
   15cdc:	mov	sl, r0
   15ce0:	bl	118ac <strlen@plt>
   15ce4:	ldr	r8, [r5]
   15ce8:	cmp	r8, #0
   15cec:	beq	15da8 <__assert_fail@plt+0x431c>
   15cf0:	mov	r7, r0
   15cf4:	mov	r0, #0
   15cf8:	add	r9, r5, #4
   15cfc:	mov	r5, #0
   15d00:	str	r6, [sp, #4]
   15d04:	str	r0, [sp]
   15d08:	mvn	r0, #0
   15d0c:	str	r0, [sp, #8]
   15d10:	mov	r0, r8
   15d14:	mov	r1, sl
   15d18:	mov	r2, r7
   15d1c:	bl	11a50 <strncmp@plt>
   15d20:	cmp	r0, #0
   15d24:	bne	15d7c <__assert_fail@plt+0x42f0>
   15d28:	mov	r0, r8
   15d2c:	bl	118ac <strlen@plt>
   15d30:	cmp	r0, r7
   15d34:	beq	15dac <__assert_fail@plt+0x4320>
   15d38:	ldr	r0, [sp, #8]
   15d3c:	cmn	r0, #1
   15d40:	beq	15d78 <__assert_fail@plt+0x42ec>
   15d44:	ldr	r0, [sp, #4]
   15d48:	cmp	r0, #0
   15d4c:	beq	15d6c <__assert_fail@plt+0x42e0>
   15d50:	ldr	r1, [sp, #8]
   15d54:	mov	r2, r4
   15d58:	mla	r0, r1, r4, r0
   15d5c:	mov	r1, r6
   15d60:	bl	11720 <memcmp@plt>
   15d64:	cmp	r0, #0
   15d68:	beq	15d7c <__assert_fail@plt+0x42f0>
   15d6c:	mov	r0, #1
   15d70:	str	r0, [sp]
   15d74:	b	15d7c <__assert_fail@plt+0x42f0>
   15d78:	str	r5, [sp, #8]
   15d7c:	ldr	r8, [r9, r5, lsl #2]
   15d80:	add	r6, r6, r4
   15d84:	add	r5, r5, #1
   15d88:	cmp	r8, #0
   15d8c:	bne	15d10 <__assert_fail@plt+0x4284>
   15d90:	ldr	r0, [sp]
   15d94:	tst	r0, #1
   15d98:	ldr	r0, [sp, #8]
   15d9c:	mvnne	r0, #1
   15da0:	sub	sp, fp, #28
   15da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15da8:	mvn	r5, #0
   15dac:	mov	r0, r5
   15db0:	sub	sp, fp, #28
   15db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15db8:	push	{r4, r5, r6, r7, fp, lr}
   15dbc:	add	fp, sp, #16
   15dc0:	mov	r5, r0
   15dc4:	ldr	r0, [r1]
   15dc8:	mvn	r4, #0
   15dcc:	cmp	r0, #0
   15dd0:	beq	15e00 <__assert_fail@plt+0x4374>
   15dd4:	add	r7, r1, #4
   15dd8:	mov	r6, #0
   15ddc:	mov	r1, r5
   15de0:	bl	116b4 <strcmp@plt>
   15de4:	cmp	r0, #0
   15de8:	moveq	r0, r6
   15dec:	popeq	{r4, r5, r6, r7, fp, pc}
   15df0:	ldr	r0, [r7, r6, lsl #2]
   15df4:	add	r6, r6, #1
   15df8:	cmp	r0, #0
   15dfc:	bne	15ddc <__assert_fail@plt+0x4350>
   15e00:	mov	r0, r4
   15e04:	pop	{r4, r5, r6, r7, fp, pc}
   15e08:	push	{r4, r5, r6, sl, fp, lr}
   15e0c:	add	fp, sp, #16
   15e10:	sub	sp, sp, #8
   15e14:	mov	r4, r1
   15e18:	movw	r1, #62144	; 0xf2c0
   15e1c:	mov	r5, r0
   15e20:	movw	r0, #62117	; 0xf2a5
   15e24:	cmn	r2, #1
   15e28:	mov	r2, #5
   15e2c:	movt	r0, #1
   15e30:	movt	r1, #1
   15e34:	moveq	r1, r0
   15e38:	mov	r0, #0
   15e3c:	bl	1172c <dcgettext@plt>
   15e40:	mov	r6, r0
   15e44:	mov	r0, #0
   15e48:	mov	r1, #8
   15e4c:	mov	r2, r4
   15e50:	bl	1a398 <__assert_fail@plt+0x890c>
   15e54:	mov	r4, r0
   15e58:	mov	r0, #1
   15e5c:	mov	r1, r5
   15e60:	bl	1a958 <__assert_fail@plt+0x8ecc>
   15e64:	str	r0, [sp]
   15e68:	mov	r0, #0
   15e6c:	mov	r1, #0
   15e70:	mov	r2, r6
   15e74:	mov	r3, r4
   15e78:	bl	117e0 <error@plt>
   15e7c:	sub	sp, fp, #16
   15e80:	pop	{r4, r5, r6, sl, fp, pc}
   15e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e88:	add	fp, sp, #28
   15e8c:	sub	sp, sp, #4
   15e90:	mov	r5, r1
   15e94:	movw	r1, #62173	; 0xf2dd
   15e98:	mov	sl, r2
   15e9c:	mov	r7, r0
   15ea0:	mov	r0, #0
   15ea4:	mov	r2, #5
   15ea8:	mov	r8, #0
   15eac:	movt	r1, #1
   15eb0:	bl	1172c <dcgettext@plt>
   15eb4:	movw	r4, #480	; 0x1e0
   15eb8:	movt	r4, #3
   15ebc:	ldr	r1, [r4]
   15ec0:	bl	11678 <fputs_unlocked@plt>
   15ec4:	ldr	r6, [r7]
   15ec8:	cmp	r6, #0
   15ecc:	beq	15f6c <__assert_fail@plt+0x44e0>
   15ed0:	add	r9, r7, #4
   15ed4:	mov	r7, #0
   15ed8:	str	sl, [sp]
   15edc:	cmp	r8, #0
   15ee0:	beq	15efc <__assert_fail@plt+0x4470>
   15ee4:	mov	r0, r7
   15ee8:	mov	r1, r5
   15eec:	mov	r2, sl
   15ef0:	bl	11720 <memcmp@plt>
   15ef4:	cmp	r0, #0
   15ef8:	beq	15f28 <__assert_fail@plt+0x449c>
   15efc:	ldr	r7, [r4]
   15f00:	mov	r0, r6
   15f04:	bl	1a968 <__assert_fail@plt+0x8edc>
   15f08:	movw	r2, #62194	; 0xf2f2
   15f0c:	mov	r3, r0
   15f10:	mov	r0, r7
   15f14:	mov	r1, #1
   15f18:	movt	r2, #1
   15f1c:	bl	1193c <__fprintf_chk@plt>
   15f20:	mov	r7, r5
   15f24:	b	15f58 <__assert_fail@plt+0x44cc>
   15f28:	mov	sl, r9
   15f2c:	ldr	r9, [r4]
   15f30:	mov	r0, r6
   15f34:	bl	1a968 <__assert_fail@plt+0x8edc>
   15f38:	mov	r3, r0
   15f3c:	mov	r0, r9
   15f40:	mov	r9, sl
   15f44:	ldr	sl, [sp]
   15f48:	movw	r2, #62202	; 0xf2fa
   15f4c:	mov	r1, #1
   15f50:	movt	r2, #1
   15f54:	bl	1193c <__fprintf_chk@plt>
   15f58:	ldr	r6, [r9, -r8, lsl #2]
   15f5c:	add	r5, r5, sl
   15f60:	sub	r8, r8, #1
   15f64:	cmp	r6, #0
   15f68:	bne	15edc <__assert_fail@plt+0x4450>
   15f6c:	ldr	r0, [r4]
   15f70:	ldr	r1, [r0, #20]
   15f74:	ldr	r2, [r0, #24]
   15f78:	cmp	r1, r2
   15f7c:	addcc	r2, r1, #1
   15f80:	strcc	r2, [r0, #20]
   15f84:	movcc	r0, #10
   15f88:	strbcc	r0, [r1]
   15f8c:	subcc	sp, fp, #28
   15f90:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f94:	mov	r1, #10
   15f98:	sub	sp, fp, #28
   15f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fa0:	b	11990 <__overflow@plt>
   15fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fa8:	add	fp, sp, #28
   15fac:	sub	sp, sp, #20
   15fb0:	mov	r9, r0
   15fb4:	ldr	r0, [fp, #16]
   15fb8:	mov	r8, r3
   15fbc:	mov	sl, r2
   15fc0:	mov	r7, r1
   15fc4:	cmp	r0, #0
   15fc8:	beq	160a0 <__assert_fail@plt+0x4614>
   15fcc:	mov	r0, r7
   15fd0:	str	r9, [sp, #8]
   15fd4:	str	r8, [sp, #16]
   15fd8:	bl	118ac <strlen@plt>
   15fdc:	ldr	r9, [sl]
   15fe0:	cmp	r9, #0
   15fe4:	beq	160e0 <__assert_fail@plt+0x4654>
   15fe8:	str	sl, [sp, #4]
   15fec:	add	r8, sl, #4
   15ff0:	ldr	sl, [sp, #16]
   15ff4:	mov	r4, r0
   15ff8:	mov	r0, #0
   15ffc:	mvn	r6, #0
   16000:	mov	r5, #0
   16004:	str	r0, [sp, #12]
   16008:	mov	r0, r9
   1600c:	mov	r1, r7
   16010:	mov	r2, r4
   16014:	bl	11a50 <strncmp@plt>
   16018:	cmp	r0, #0
   1601c:	bne	1606c <__assert_fail@plt+0x45e0>
   16020:	mov	r0, r9
   16024:	bl	118ac <strlen@plt>
   16028:	cmp	r0, r4
   1602c:	beq	160ec <__assert_fail@plt+0x4660>
   16030:	cmn	r6, #1
   16034:	beq	16068 <__assert_fail@plt+0x45dc>
   16038:	ldr	r0, [sp, #16]
   1603c:	cmp	r0, #0
   16040:	beq	1605c <__assert_fail@plt+0x45d0>
   16044:	ldr	r2, [fp, #8]
   16048:	mov	r1, sl
   1604c:	mla	r0, r6, r2, r0
   16050:	bl	11720 <memcmp@plt>
   16054:	cmp	r0, #0
   16058:	beq	1606c <__assert_fail@plt+0x45e0>
   1605c:	mov	r0, #1
   16060:	str	r0, [sp, #12]
   16064:	b	1606c <__assert_fail@plt+0x45e0>
   16068:	mov	r6, r5
   1606c:	ldr	r9, [r8, r5, lsl #2]
   16070:	ldr	r0, [fp, #8]
   16074:	add	r5, r5, #1
   16078:	add	sl, sl, r0
   1607c:	cmp	r9, #0
   16080:	bne	16008 <__assert_fail@plt+0x457c>
   16084:	ldr	r0, [sp, #12]
   16088:	ldr	r8, [sp, #16]
   1608c:	ldr	sl, [sp, #4]
   16090:	ldr	r9, [sp, #8]
   16094:	tst	r0, #1
   16098:	beq	160fc <__assert_fail@plt+0x4670>
   1609c:	b	16108 <__assert_fail@plt+0x467c>
   160a0:	ldr	r0, [sl]
   160a4:	movw	r4, #62117	; 0xf2a5
   160a8:	movt	r4, #1
   160ac:	cmp	r0, #0
   160b0:	beq	1611c <__assert_fail@plt+0x4690>
   160b4:	add	r5, sl, #4
   160b8:	mov	r6, #0
   160bc:	mov	r1, r7
   160c0:	bl	116b4 <strcmp@plt>
   160c4:	cmp	r0, #0
   160c8:	beq	160fc <__assert_fail@plt+0x4670>
   160cc:	ldr	r0, [r5, r6, lsl #2]
   160d0:	add	r6, r6, #1
   160d4:	cmp	r0, #0
   160d8:	bne	160bc <__assert_fail@plt+0x4630>
   160dc:	b	1611c <__assert_fail@plt+0x4690>
   160e0:	ldr	r8, [sp, #16]
   160e4:	ldr	r9, [sp, #8]
   160e8:	b	16114 <__assert_fail@plt+0x4688>
   160ec:	ldr	r8, [sp, #16]
   160f0:	ldr	sl, [sp, #4]
   160f4:	ldr	r9, [sp, #8]
   160f8:	mov	r6, r5
   160fc:	cmn	r6, #1
   16100:	bgt	16184 <__assert_fail@plt+0x46f8>
   16104:	beq	16114 <__assert_fail@plt+0x4688>
   16108:	movw	r4, #62144	; 0xf2c0
   1610c:	movt	r4, #1
   16110:	b	1611c <__assert_fail@plt+0x4690>
   16114:	movw	r4, #62117	; 0xf2a5
   16118:	movt	r4, #1
   1611c:	ldr	r6, [fp, #12]
   16120:	mov	r0, #0
   16124:	mov	r1, r4
   16128:	mov	r2, #5
   1612c:	bl	1172c <dcgettext@plt>
   16130:	mov	r4, r0
   16134:	mov	r0, #0
   16138:	mov	r1, #8
   1613c:	mov	r2, r7
   16140:	bl	1a398 <__assert_fail@plt+0x890c>
   16144:	mov	r5, r0
   16148:	mov	r0, #1
   1614c:	mov	r1, r9
   16150:	bl	1a958 <__assert_fail@plt+0x8ecc>
   16154:	str	r0, [sp]
   16158:	mov	r0, #0
   1615c:	mov	r1, #0
   16160:	mov	r2, r4
   16164:	mov	r3, r5
   16168:	bl	117e0 <error@plt>
   1616c:	ldr	r2, [fp, #8]
   16170:	mov	r0, sl
   16174:	mov	r1, r8
   16178:	bl	15e84 <__assert_fail@plt+0x43f8>
   1617c:	blx	r6
   16180:	mvn	r6, #0
   16184:	mov	r0, r6
   16188:	sub	sp, fp, #28
   1618c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16190:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16194:	add	fp, sp, #24
   16198:	ldr	r6, [r1]
   1619c:	cmp	r6, #0
   161a0:	beq	16204 <__assert_fail@plt+0x4778>
   161a4:	mov	r8, r1
   161a8:	mov	r7, r2
   161ac:	mov	r1, r2
   161b0:	mov	r2, r3
   161b4:	mov	r4, r3
   161b8:	mov	r9, r0
   161bc:	bl	11720 <memcmp@plt>
   161c0:	cmp	r0, #0
   161c4:	beq	161fc <__assert_fail@plt+0x4770>
   161c8:	add	r7, r7, r4
   161cc:	add	r5, r8, #4
   161d0:	ldr	r6, [r5]
   161d4:	cmp	r6, #0
   161d8:	beq	16204 <__assert_fail@plt+0x4778>
   161dc:	mov	r0, r9
   161e0:	mov	r1, r7
   161e4:	mov	r2, r4
   161e8:	bl	11720 <memcmp@plt>
   161ec:	add	r7, r7, r4
   161f0:	add	r5, r5, #4
   161f4:	cmp	r0, #0
   161f8:	bne	161d0 <__assert_fail@plt+0x4744>
   161fc:	mov	r0, r6
   16200:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16204:	mov	r6, #0
   16208:	mov	r0, r6
   1620c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16210:	movw	r1, #616	; 0x268
   16214:	movt	r1, #3
   16218:	str	r0, [r1]
   1621c:	bx	lr
   16220:	movw	r1, #620	; 0x26c
   16224:	movt	r1, #3
   16228:	strb	r0, [r1]
   1622c:	bx	lr
   16230:	push	{r4, r5, r6, sl, fp, lr}
   16234:	add	fp, sp, #16
   16238:	sub	sp, sp, #8
   1623c:	movw	r0, #484	; 0x1e4
   16240:	movt	r0, #3
   16244:	ldr	r0, [r0]
   16248:	bl	1ce9c <__assert_fail@plt+0xb410>
   1624c:	cmp	r0, #0
   16250:	beq	16278 <__assert_fail@plt+0x47ec>
   16254:	movw	r0, #620	; 0x26c
   16258:	movt	r0, #3
   1625c:	ldrb	r0, [r0]
   16260:	cmp	r0, #0
   16264:	beq	16298 <__assert_fail@plt+0x480c>
   16268:	bl	118e8 <__errno_location@plt>
   1626c:	ldr	r0, [r0]
   16270:	cmp	r0, #32
   16274:	bne	16298 <__assert_fail@plt+0x480c>
   16278:	movw	r0, #480	; 0x1e0
   1627c:	movt	r0, #3
   16280:	ldr	r0, [r0]
   16284:	bl	1ce9c <__assert_fail@plt+0xb410>
   16288:	cmp	r0, #0
   1628c:	subeq	sp, fp, #16
   16290:	popeq	{r4, r5, r6, sl, fp, pc}
   16294:	b	16308 <__assert_fail@plt+0x487c>
   16298:	movw	r1, #62207	; 0xf2ff
   1629c:	mov	r0, #0
   162a0:	mov	r2, #5
   162a4:	movt	r1, #1
   162a8:	bl	1172c <dcgettext@plt>
   162ac:	mov	r4, r0
   162b0:	movw	r0, #616	; 0x268
   162b4:	movt	r0, #3
   162b8:	ldr	r6, [r0]
   162bc:	bl	118e8 <__errno_location@plt>
   162c0:	ldr	r5, [r0]
   162c4:	cmp	r6, #0
   162c8:	bne	162e4 <__assert_fail@plt+0x4858>
   162cc:	movw	r2, #58893	; 0xe60d
   162d0:	mov	r0, #0
   162d4:	mov	r1, r5
   162d8:	mov	r3, r4
   162dc:	movt	r2, #1
   162e0:	b	16304 <__assert_fail@plt+0x4878>
   162e4:	mov	r0, r6
   162e8:	bl	1a5e0 <__assert_fail@plt+0x8b54>
   162ec:	movw	r2, #62219	; 0xf30b
   162f0:	mov	r3, r0
   162f4:	str	r4, [sp]
   162f8:	mov	r0, #0
   162fc:	mov	r1, r5
   16300:	movt	r2, #1
   16304:	bl	117e0 <error@plt>
   16308:	movw	r0, #396	; 0x18c
   1630c:	movt	r0, #3
   16310:	ldr	r0, [r0]
   16314:	bl	116fc <_exit@plt>
   16318:	push	{fp, lr}
   1631c:	mov	fp, sp
   16320:	bl	16378 <__assert_fail@plt+0x48ec>
   16324:	cmp	r0, #0
   16328:	popne	{fp, pc}
   1632c:	bl	1bec8 <__assert_fail@plt+0xa43c>
   16330:	push	{r4, r5, r6, sl, fp, lr}
   16334:	add	fp, sp, #16
   16338:	mov	r5, r0
   1633c:	mov	r4, r0
   16340:	ldrb	r6, [r5], #-1
   16344:	bl	1ca9c <__assert_fail@plt+0xb010>
   16348:	sub	r2, r0, r4
   1634c:	sub	r0, r6, #47	; 0x2f
   16350:	clz	r0, r0
   16354:	lsr	r1, r0, #5
   16358:	mov	r0, r2
   1635c:	cmp	r2, r1
   16360:	popls	{r4, r5, r6, sl, fp, pc}
   16364:	ldrb	r3, [r5, r0]
   16368:	sub	r2, r0, #1
   1636c:	cmp	r3, #47	; 0x2f
   16370:	beq	16358 <__assert_fail@plt+0x48cc>
   16374:	pop	{r4, r5, r6, sl, fp, pc}
   16378:	push	{r4, r5, r6, sl, fp, lr}
   1637c:	add	fp, sp, #16
   16380:	mov	r6, r0
   16384:	mov	r4, r0
   16388:	ldrb	r5, [r6], #-1
   1638c:	bl	1ca9c <__assert_fail@plt+0xb010>
   16390:	sub	r1, r0, r4
   16394:	sub	r0, r5, #47	; 0x2f
   16398:	clz	r0, r0
   1639c:	lsr	r0, r0, #5
   163a0:	mov	r5, r1
   163a4:	cmp	r1, r0
   163a8:	bls	163bc <__assert_fail@plt+0x4930>
   163ac:	ldrb	r2, [r6, r5]
   163b0:	sub	r1, r5, #1
   163b4:	cmp	r2, #47	; 0x2f
   163b8:	beq	163a0 <__assert_fail@plt+0x4914>
   163bc:	cmp	r5, #0
   163c0:	mov	r0, r5
   163c4:	addeq	r0, r0, #1
   163c8:	add	r0, r0, #1
   163cc:	bl	1bfd0 <__assert_fail@plt+0xa544>
   163d0:	mov	r6, r0
   163d4:	cmp	r0, #0
   163d8:	beq	16404 <__assert_fail@plt+0x4978>
   163dc:	mov	r0, r6
   163e0:	mov	r1, r4
   163e4:	mov	r2, r5
   163e8:	bl	11708 <memcpy@plt>
   163ec:	cmp	r5, #0
   163f0:	moveq	r0, #46	; 0x2e
   163f4:	moveq	r5, #1
   163f8:	strbeq	r0, [r6]
   163fc:	mov	r0, #0
   16400:	strb	r0, [r6, r5]
   16404:	mov	r0, r6
   16408:	pop	{r4, r5, r6, sl, fp, pc}
   1640c:	ldr	r1, [r0, #16]
   16410:	and	r1, r1, #61440	; 0xf000
   16414:	sub	r1, r1, #4096	; 0x1000
   16418:	lsr	r2, r1, #12
   1641c:	cmp	r2, #11
   16420:	bhi	1647c <__assert_fail@plt+0x49f0>
   16424:	movw	r1, #62092	; 0xf28c
   16428:	add	r3, pc, #4
   1642c:	movt	r1, #1
   16430:	ldr	pc, [r3, r2, lsl #2]
   16434:	andeq	r6, r1, r4, ror #8
   16438:	andeq	r6, r1, r0, ror r4
   1643c:	andeq	r6, r1, ip, ror r4
   16440:	andeq	r6, r1, r8, asr #9
   16444:	andeq	r6, r1, ip, ror r4
   16448:	andeq	r6, r1, r8, lsl #9
   1644c:	andeq	r6, r1, ip, ror r4
   16450:	andeq	r6, r1, ip, lsr #9
   16454:	andeq	r6, r1, ip, ror r4
   16458:	muleq	r1, r4, r4
   1645c:	andeq	r6, r1, ip, ror r4
   16460:	andeq	r6, r1, r0, lsr #9
   16464:	movw	r1, #62314	; 0xf36a
   16468:	movt	r1, #1
   1646c:	b	164c8 <__assert_fail@plt+0x4a3c>
   16470:	movw	r1, #62291	; 0xf353
   16474:	movt	r1, #1
   16478:	b	164c8 <__assert_fail@plt+0x4a3c>
   1647c:	movw	r1, #62326	; 0xf376
   16480:	movt	r1, #1
   16484:	b	164c8 <__assert_fail@plt+0x4a3c>
   16488:	movw	r1, #62272	; 0xf340
   1648c:	movt	r1, #1
   16490:	b	164c8 <__assert_fail@plt+0x4a3c>
   16494:	movw	r1, #62258	; 0xf332
   16498:	movt	r1, #1
   1649c:	b	164c8 <__assert_fail@plt+0x4a3c>
   164a0:	movw	r1, #62319	; 0xf36f
   164a4:	movt	r1, #1
   164a8:	b	164c8 <__assert_fail@plt+0x4a3c>
   164ac:	ldrd	r0, [r0, #48]	; 0x30
   164b0:	orrs	r0, r0, r1
   164b4:	movw	r1, #62245	; 0xf325
   164b8:	movw	r0, #62226	; 0xf312
   164bc:	movt	r1, #1
   164c0:	movt	r0, #1
   164c4:	moveq	r1, r0
   164c8:	mov	r0, #0
   164cc:	mov	r2, #5
   164d0:	b	1172c <dcgettext@plt>
   164d4:	and	r2, r0, #61440	; 0xf000
   164d8:	sub	r2, r2, #4096	; 0x1000
   164dc:	lsr	r3, r2, #12
   164e0:	cmp	r3, #11
   164e4:	bhi	16534 <__assert_fail@plt+0x4aa8>
   164e8:	add	r2, pc, #4
   164ec:	mov	ip, #45	; 0x2d
   164f0:	ldr	pc, [r2, r3, lsl #2]
   164f4:	andeq	r6, r1, r4, lsr #10
   164f8:	andeq	r6, r1, ip, lsr #10
   164fc:	andeq	r6, r1, r4, lsr r5
   16500:	andeq	r6, r1, ip, lsr r5
   16504:	andeq	r6, r1, r4, lsr r5
   16508:	andeq	r6, r1, r4, asr r5
   1650c:	andeq	r6, r1, r4, lsr r5
   16510:	andeq	r6, r1, r8, asr r5
   16514:	andeq	r6, r1, r4, lsr r5
   16518:	andeq	r6, r1, r4, asr #10
   1651c:	andeq	r6, r1, r4, lsr r5
   16520:	andeq	r6, r1, ip, asr #10
   16524:	mov	ip, #112	; 0x70
   16528:	b	16558 <__assert_fail@plt+0x4acc>
   1652c:	mov	ip, #99	; 0x63
   16530:	b	16558 <__assert_fail@plt+0x4acc>
   16534:	mov	ip, #63	; 0x3f
   16538:	b	16558 <__assert_fail@plt+0x4acc>
   1653c:	mov	ip, #100	; 0x64
   16540:	b	16558 <__assert_fail@plt+0x4acc>
   16544:	mov	ip, #108	; 0x6c
   16548:	b	16558 <__assert_fail@plt+0x4acc>
   1654c:	mov	ip, #115	; 0x73
   16550:	b	16558 <__assert_fail@plt+0x4acc>
   16554:	mov	ip, #98	; 0x62
   16558:	push	{fp, lr}
   1655c:	mov	fp, sp
   16560:	mov	r2, #32
   16564:	tst	r0, #256	; 0x100
   16568:	mov	r3, #114	; 0x72
   1656c:	strb	ip, [r1]
   16570:	mov	ip, #114	; 0x72
   16574:	mov	lr, #45	; 0x2d
   16578:	strh	r2, [r1, #10]
   1657c:	movweq	r3, #45	; 0x2d
   16580:	tst	r0, #128	; 0x80
   16584:	mov	r2, #119	; 0x77
   16588:	movweq	r2, #45	; 0x2d
   1658c:	strb	r3, [r1, #1]
   16590:	tst	r0, #32
   16594:	mov	r3, #119	; 0x77
   16598:	strb	r2, [r1, #2]
   1659c:	mov	r2, #114	; 0x72
   165a0:	movweq	r2, #45	; 0x2d
   165a4:	tst	r0, #16
   165a8:	strb	r2, [r1, #4]
   165ac:	mov	r2, #119	; 0x77
   165b0:	movweq	r2, #45	; 0x2d
   165b4:	tst	r0, #4
   165b8:	movweq	ip, #45	; 0x2d
   165bc:	tst	r0, #2
   165c0:	strb	r2, [r1, #5]
   165c4:	movweq	r3, #45	; 0x2d
   165c8:	strb	ip, [r1, #7]
   165cc:	ands	r2, r0, #64	; 0x40
   165d0:	mov	ip, #45	; 0x2d
   165d4:	strb	r3, [r1, #8]
   165d8:	mov	r3, #83	; 0x53
   165dc:	movwne	lr, #120	; 0x78
   165e0:	mov	r2, #83	; 0x53
   165e4:	movwne	r3, #115	; 0x73
   165e8:	tst	r0, #2048	; 0x800
   165ec:	moveq	r3, lr
   165f0:	strb	r3, [r1, #3]
   165f4:	ands	r3, r0, #8
   165f8:	mov	r3, #45	; 0x2d
   165fc:	movwne	r2, #115	; 0x73
   16600:	movwne	r3, #120	; 0x78
   16604:	tst	r0, #1024	; 0x400
   16608:	moveq	r2, r3
   1660c:	strb	r2, [r1, #6]
   16610:	ands	r2, r0, #1
   16614:	mov	r2, #84	; 0x54
   16618:	movwne	ip, #120	; 0x78
   1661c:	movwne	r2, #116	; 0x74
   16620:	tst	r0, #512	; 0x200
   16624:	moveq	r2, ip
   16628:	strb	r2, [r1, #9]
   1662c:	pop	{fp, pc}
   16630:	ldr	r0, [r0, #16]
   16634:	b	164d4 <__assert_fail@plt+0x4a48>
   16638:	push	{r4, r5, r6, sl, fp, lr}
   1663c:	add	fp, sp, #16
   16640:	mov	r4, r0
   16644:	bl	118e8 <__errno_location@plt>
   16648:	ldr	r6, [r0]
   1664c:	mov	r5, r0
   16650:	mov	r0, r4
   16654:	bl	116f0 <free@plt>
   16658:	str	r6, [r5]
   1665c:	pop	{r4, r5, r6, sl, fp, pc}
   16660:	push	{r4, r5, r6, sl, fp, lr}
   16664:	add	fp, sp, #16
   16668:	mov	r5, r0
   1666c:	mov	r0, #0
   16670:	mov	r4, r1
   16674:	add	r6, r2, #19
   16678:	cmp	r1, #0
   1667c:	strb	r0, [r2, #20]
   16680:	blt	166d0 <__assert_fail@plt+0x4c44>
   16684:	mov	r0, r5
   16688:	mov	r1, r4
   1668c:	mov	r2, #10
   16690:	mov	r3, #0
   16694:	bl	1d694 <__assert_fail@plt+0xbc08>
   16698:	add	r2, r0, r0, lsl #2
   1669c:	sub	r2, r5, r2, lsl #1
   166a0:	add	r2, r2, #48	; 0x30
   166a4:	strb	r2, [r6], #-1
   166a8:	adds	r2, r5, #9
   166ac:	mov	r5, r0
   166b0:	adc	r3, r4, #0
   166b4:	rsbs	r2, r2, #18
   166b8:	mov	r4, r1
   166bc:	rscs	r2, r3, #0
   166c0:	bcc	16684 <__assert_fail@plt+0x4bf8>
   166c4:	add	r6, r6, #1
   166c8:	mov	r0, r6
   166cc:	pop	{r4, r5, r6, sl, fp, pc}
   166d0:	mov	r0, r5
   166d4:	mov	r1, r4
   166d8:	mov	r2, #10
   166dc:	mov	r3, #0
   166e0:	bl	1d694 <__assert_fail@plt+0xbc08>
   166e4:	add	r2, r0, r0, lsl #2
   166e8:	rsb	r2, r5, r2, lsl #1
   166ec:	add	r2, r2, #48	; 0x30
   166f0:	strb	r2, [r6], #-1
   166f4:	adds	r2, r5, #9
   166f8:	mov	r5, r0
   166fc:	adc	r3, r4, #0
   16700:	rsbs	r2, r2, #18
   16704:	mov	r4, r1
   16708:	rscs	r2, r3, #0
   1670c:	bcc	166d0 <__assert_fail@plt+0x4c44>
   16710:	mov	r0, #45	; 0x2d
   16714:	strb	r0, [r6]
   16718:	mov	r0, r6
   1671c:	pop	{r4, r5, r6, sl, fp, pc}
   16720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16724:	add	fp, sp, #28
   16728:	sub	sp, sp, #36	; 0x24
   1672c:	movw	r0, #62337	; 0xf381
   16730:	movw	r1, #62408	; 0xf3c8
   16734:	movt	r0, #1
   16738:	movt	r1, #1
   1673c:	bl	11a08 <fopen64@plt>
   16740:	cmp	r0, #0
   16744:	beq	16e84 <__assert_fail@plt+0x53f8>
   16748:	mov	sl, r0
   1674c:	mov	r0, #0
   16750:	add	r1, sp, #24
   16754:	mov	r2, #10
   16758:	str	r0, [sp, #28]
   1675c:	str	r0, [sp, #24]
   16760:	add	r0, sp, #28
   16764:	mov	r3, sl
   16768:	bl	1169c <__getdelim@plt>
   1676c:	cmn	r0, #1
   16770:	beq	17258 <__assert_fail@plt+0x57cc>
   16774:	movw	r8, #62358	; 0xf396
   16778:	add	r0, sp, #32
   1677c:	add	r9, sp, #12
   16780:	add	r6, sp, #20
   16784:	add	r7, sp, #16
   16788:	add	r5, sp, #28
   1678c:	add	r4, sp, #24
   16790:	str	sl, [sp, #4]
   16794:	movt	r8, #1
   16798:	str	r0, [sp, #8]
   1679c:	b	16910 <__assert_fail@plt+0x4e84>
   167a0:	ldr	sl, [sp, #4]
   167a4:	movw	r8, #62358	; 0xf396
   167a8:	add	r9, sp, #12
   167ac:	add	r6, sp, #20
   167b0:	movt	r8, #1
   167b4:	b	16e58 <__assert_fail@plt+0x53cc>
   167b8:	ldrb	r0, [r4]
   167bc:	cmp	r0, #47	; 0x2f
   167c0:	ldrbeq	r0, [r4, #1]
   167c4:	cmpeq	r0, #47	; 0x2f
   167c8:	beq	168c4 <__assert_fail@plt+0x4e38>
   167cc:	movw	r1, #60671	; 0xecff
   167d0:	mov	r0, r6
   167d4:	movt	r1, #1
   167d8:	bl	116b4 <strcmp@plt>
   167dc:	cmp	r0, #0
   167e0:	beq	16e24 <__assert_fail@plt+0x5398>
   167e4:	movw	r1, #61065	; 0xee89
   167e8:	mov	r0, r6
   167ec:	movt	r1, #1
   167f0:	bl	116b4 <strcmp@plt>
   167f4:	cmp	r0, #0
   167f8:	beq	16e24 <__assert_fail@plt+0x5398>
   167fc:	movw	r1, #60806	; 0xed86
   16800:	mov	r0, r6
   16804:	movt	r1, #1
   16808:	bl	116b4 <strcmp@plt>
   1680c:	cmp	r0, #0
   16810:	beq	16e24 <__assert_fail@plt+0x5398>
   16814:	movw	r1, #62427	; 0xf3db
   16818:	mov	r0, r6
   1681c:	movt	r1, #1
   16820:	bl	116b4 <strcmp@plt>
   16824:	cmp	r0, #0
   16828:	beq	16e24 <__assert_fail@plt+0x5398>
   1682c:	movw	r1, #60942	; 0xee0e
   16830:	mov	r0, r6
   16834:	movt	r1, #1
   16838:	bl	116b4 <strcmp@plt>
   1683c:	cmp	r0, #0
   16840:	beq	16e24 <__assert_fail@plt+0x5398>
   16844:	movw	r1, #60981	; 0xee35
   16848:	mov	r0, r6
   1684c:	movt	r1, #1
   16850:	bl	116b4 <strcmp@plt>
   16854:	cmp	r0, #0
   16858:	beq	16e24 <__assert_fail@plt+0x5398>
   1685c:	movw	r1, #61026	; 0xee62
   16860:	mov	r0, r6
   16864:	movt	r1, #1
   16868:	bl	116b4 <strcmp@plt>
   1686c:	cmp	r0, #0
   16870:	beq	16e24 <__assert_fail@plt+0x5398>
   16874:	movw	r1, #61196	; 0xef0c
   16878:	mov	r0, r6
   1687c:	movt	r1, #1
   16880:	bl	116b4 <strcmp@plt>
   16884:	cmp	r0, #0
   16888:	beq	16e24 <__assert_fail@plt+0x5398>
   1688c:	movw	r1, #61436	; 0xeffc
   16890:	mov	r0, r6
   16894:	movt	r1, #1
   16898:	bl	116b4 <strcmp@plt>
   1689c:	cmp	r0, #0
   168a0:	add	r6, sp, #20
   168a4:	beq	16e28 <__assert_fail@plt+0x539c>
   168a8:	movw	r0, #62438	; 0xf3e6
   168ac:	mov	r1, r4
   168b0:	movt	r0, #1
   168b4:	bl	116b4 <strcmp@plt>
   168b8:	clz	r0, r0
   168bc:	lsr	r8, r0, #5
   168c0:	b	16e28 <__assert_fail@plt+0x539c>
   168c4:	movw	r1, #62416	; 0xf3d0
   168c8:	mov	r0, r6
   168cc:	movt	r1, #1
   168d0:	bl	116b4 <strcmp@plt>
   168d4:	cmp	r0, #0
   168d8:	beq	16e24 <__assert_fail@plt+0x5398>
   168dc:	movw	r1, #62422	; 0xf3d6
   168e0:	mov	r0, r6
   168e4:	movt	r1, #1
   168e8:	bl	116b4 <strcmp@plt>
   168ec:	cmp	r0, #0
   168f0:	beq	16e24 <__assert_fail@plt+0x5398>
   168f4:	movw	r1, #60801	; 0xed81
   168f8:	mov	r0, r6
   168fc:	movt	r1, #1
   16900:	bl	116b4 <strcmp@plt>
   16904:	cmp	r0, #0
   16908:	bne	167cc <__assert_fail@plt+0x4d40>
   1690c:	b	16e24 <__assert_fail@plt+0x5398>
   16910:	ldr	r0, [sp, #28]
   16914:	mov	r1, r8
   16918:	mov	r2, r6
   1691c:	mov	r3, r7
   16920:	str	r9, [sp]
   16924:	bl	119cc <sscanf@plt>
   16928:	orr	r0, r0, #1
   1692c:	cmp	r0, #3
   16930:	bne	16e64 <__assert_fail@plt+0x53d8>
   16934:	ldr	r0, [sp, #12]
   16938:	ldr	r1, [sp, #28]
   1693c:	add	r0, r1, r0
   16940:	mov	r1, #32
   16944:	mov	r5, r0
   16948:	bl	118b8 <strchr@plt>
   1694c:	cmp	r0, #0
   16950:	beq	16e54 <__assert_fail@plt+0x53c8>
   16954:	mov	r6, r0
   16958:	mov	r4, #0
   1695c:	mov	r1, #32
   16960:	strb	r4, [r6], #1
   16964:	mov	r0, r6
   16968:	bl	118b8 <strchr@plt>
   1696c:	cmp	r0, #0
   16970:	beq	16e54 <__assert_fail@plt+0x53c8>
   16974:	movw	r1, #62375	; 0xf3a7
   16978:	strb	r4, [r0], #1
   1697c:	movt	r1, #1
   16980:	bl	1c054 <__assert_fail@plt+0xa5c8>
   16984:	cmp	r0, #0
   16988:	beq	16e54 <__assert_fail@plt+0x53c8>
   1698c:	add	sl, r0, #3
   16990:	mov	r1, #32
   16994:	mov	r0, sl
   16998:	bl	118b8 <strchr@plt>
   1699c:	cmp	r0, #0
   169a0:	beq	167a0 <__assert_fail@plt+0x4d14>
   169a4:	mov	r9, r0
   169a8:	mov	r4, #0
   169ac:	mov	r1, #32
   169b0:	strb	r4, [r9], #1
   169b4:	mov	r0, r9
   169b8:	bl	118b8 <strchr@plt>
   169bc:	cmp	r0, #0
   169c0:	beq	167a0 <__assert_fail@plt+0x4d14>
   169c4:	strb	r4, [r0]
   169c8:	mov	r0, r9
   169cc:	bl	118ac <strlen@plt>
   169d0:	adds	r0, r0, #1
   169d4:	mov	r8, r5
   169d8:	beq	16a58 <__assert_fail@plt+0x4fcc>
   169dc:	mov	r2, #0
   169e0:	mov	r1, r9
   169e4:	ldrb	r3, [r9, r2]
   169e8:	add	r7, r2, #4
   169ec:	cmp	r7, r0
   169f0:	bcs	16a48 <__assert_fail@plt+0x4fbc>
   169f4:	cmp	r3, #92	; 0x5c
   169f8:	bne	16a48 <__assert_fail@plt+0x4fbc>
   169fc:	add	r7, r9, r2
   16a00:	ldrb	r5, [r7, #1]
   16a04:	and	r4, r5, #252	; 0xfc
   16a08:	cmp	r4, #48	; 0x30
   16a0c:	bne	16a48 <__assert_fail@plt+0x4fbc>
   16a10:	ldrb	r4, [r7, #2]
   16a14:	and	r7, r4, #248	; 0xf8
   16a18:	cmp	r7, #48	; 0x30
   16a1c:	bne	16a48 <__assert_fail@plt+0x4fbc>
   16a20:	add	ip, r2, #3
   16a24:	ldrb	lr, [r9, ip]
   16a28:	and	r7, lr, #248	; 0xf8
   16a2c:	cmp	r7, #48	; 0x30
   16a30:	bne	16a48 <__assert_fail@plt+0x4fbc>
   16a34:	lsl	r2, r5, #6
   16a38:	add	r2, r2, r4, lsl #3
   16a3c:	add	r2, r2, lr
   16a40:	add	r3, r2, #80	; 0x50
   16a44:	mov	r2, ip
   16a48:	add	r2, r2, #1
   16a4c:	strb	r3, [r1], #1
   16a50:	cmp	r2, r0
   16a54:	bcc	169e4 <__assert_fail@plt+0x4f58>
   16a58:	mov	r0, r6
   16a5c:	bl	118ac <strlen@plt>
   16a60:	adds	r0, r0, #1
   16a64:	beq	16ae4 <__assert_fail@plt+0x5058>
   16a68:	mov	r2, #0
   16a6c:	mov	r1, r6
   16a70:	ldrb	r3, [r6, r2]
   16a74:	add	r7, r2, #4
   16a78:	cmp	r7, r0
   16a7c:	bcs	16ad4 <__assert_fail@plt+0x5048>
   16a80:	cmp	r3, #92	; 0x5c
   16a84:	bne	16ad4 <__assert_fail@plt+0x5048>
   16a88:	add	r7, r6, r2
   16a8c:	ldrb	r5, [r7, #1]
   16a90:	and	r4, r5, #252	; 0xfc
   16a94:	cmp	r4, #48	; 0x30
   16a98:	bne	16ad4 <__assert_fail@plt+0x5048>
   16a9c:	ldrb	r4, [r7, #2]
   16aa0:	and	r7, r4, #248	; 0xf8
   16aa4:	cmp	r7, #48	; 0x30
   16aa8:	bne	16ad4 <__assert_fail@plt+0x5048>
   16aac:	add	ip, r2, #3
   16ab0:	ldrb	lr, [r6, ip]
   16ab4:	and	r7, lr, #248	; 0xf8
   16ab8:	cmp	r7, #48	; 0x30
   16abc:	bne	16ad4 <__assert_fail@plt+0x5048>
   16ac0:	lsl	r2, r5, #6
   16ac4:	add	r2, r2, r4, lsl #3
   16ac8:	add	r2, r2, lr
   16acc:	add	r3, r2, #80	; 0x50
   16ad0:	mov	r2, ip
   16ad4:	add	r2, r2, #1
   16ad8:	strb	r3, [r1], #1
   16adc:	cmp	r2, r0
   16ae0:	bcc	16a70 <__assert_fail@plt+0x4fe4>
   16ae4:	mov	r0, r8
   16ae8:	bl	118ac <strlen@plt>
   16aec:	adds	r0, r0, #1
   16af0:	beq	16b70 <__assert_fail@plt+0x50e4>
   16af4:	mov	r2, #0
   16af8:	mov	r1, r8
   16afc:	ldrb	r3, [r8, r2]
   16b00:	add	r7, r2, #4
   16b04:	cmp	r7, r0
   16b08:	bcs	16b60 <__assert_fail@plt+0x50d4>
   16b0c:	cmp	r3, #92	; 0x5c
   16b10:	bne	16b60 <__assert_fail@plt+0x50d4>
   16b14:	add	r7, r8, r2
   16b18:	ldrb	r5, [r7, #1]
   16b1c:	and	r4, r5, #252	; 0xfc
   16b20:	cmp	r4, #48	; 0x30
   16b24:	bne	16b60 <__assert_fail@plt+0x50d4>
   16b28:	ldrb	r4, [r7, #2]
   16b2c:	and	r7, r4, #248	; 0xf8
   16b30:	cmp	r7, #48	; 0x30
   16b34:	bne	16b60 <__assert_fail@plt+0x50d4>
   16b38:	add	ip, r2, #3
   16b3c:	ldrb	lr, [r8, ip]
   16b40:	and	r7, lr, #248	; 0xf8
   16b44:	cmp	r7, #48	; 0x30
   16b48:	bne	16b60 <__assert_fail@plt+0x50d4>
   16b4c:	lsl	r2, r5, #6
   16b50:	add	r2, r2, r4, lsl #3
   16b54:	add	r2, r2, lr
   16b58:	add	r3, r2, #80	; 0x50
   16b5c:	mov	r2, ip
   16b60:	add	r2, r2, #1
   16b64:	strb	r3, [r1], #1
   16b68:	cmp	r2, r0
   16b6c:	bcc	16afc <__assert_fail@plt+0x5070>
   16b70:	mov	r0, sl
   16b74:	bl	118ac <strlen@plt>
   16b78:	adds	r0, r0, #1
   16b7c:	beq	16bfc <__assert_fail@plt+0x5170>
   16b80:	mov	r2, #0
   16b84:	mov	r1, sl
   16b88:	ldrb	r3, [sl, r2]
   16b8c:	add	r7, r2, #4
   16b90:	cmp	r7, r0
   16b94:	bcs	16bec <__assert_fail@plt+0x5160>
   16b98:	cmp	r3, #92	; 0x5c
   16b9c:	bne	16bec <__assert_fail@plt+0x5160>
   16ba0:	add	r7, sl, r2
   16ba4:	ldrb	r5, [r7, #1]
   16ba8:	and	r4, r5, #252	; 0xfc
   16bac:	cmp	r4, #48	; 0x30
   16bb0:	bne	16bec <__assert_fail@plt+0x5160>
   16bb4:	ldrb	r4, [r7, #2]
   16bb8:	and	r7, r4, #248	; 0xf8
   16bbc:	cmp	r7, #48	; 0x30
   16bc0:	bne	16bec <__assert_fail@plt+0x5160>
   16bc4:	add	ip, r2, #3
   16bc8:	ldrb	lr, [sl, ip]
   16bcc:	and	r7, lr, #248	; 0xf8
   16bd0:	cmp	r7, #48	; 0x30
   16bd4:	bne	16bec <__assert_fail@plt+0x5160>
   16bd8:	lsl	r2, r5, #6
   16bdc:	add	r2, r2, r4, lsl #3
   16be0:	add	r2, r2, lr
   16be4:	add	r3, r2, #80	; 0x50
   16be8:	mov	r2, ip
   16bec:	add	r2, r2, #1
   16bf0:	strb	r3, [r1], #1
   16bf4:	cmp	r2, r0
   16bf8:	bcc	16b88 <__assert_fail@plt+0x50fc>
   16bfc:	mov	r0, #32
   16c00:	bl	1b968 <__assert_fail@plt+0x9edc>
   16c04:	mov	r7, r0
   16c08:	mov	r0, r9
   16c0c:	bl	1be88 <__assert_fail@plt+0xa3fc>
   16c10:	str	r0, [r7]
   16c14:	mov	r0, r6
   16c18:	bl	1be88 <__assert_fail@plt+0xa3fc>
   16c1c:	str	r0, [r7, #4]
   16c20:	mov	r0, r8
   16c24:	bl	1be88 <__assert_fail@plt+0xa3fc>
   16c28:	str	r0, [r7, #8]
   16c2c:	mov	r0, sl
   16c30:	bl	1be88 <__assert_fail@plt+0xa3fc>
   16c34:	str	r0, [r7, #12]
   16c38:	mov	r6, r0
   16c3c:	ldr	r2, [sp, #20]
   16c40:	ldrb	r0, [r7, #24]
   16c44:	mov	r3, r2
   16c48:	orr	r4, r0, #4
   16c4c:	ldr	r0, [sp, #16]
   16c50:	bfc	r3, #0, #12
   16c54:	strb	r4, [r7, #24]
   16c58:	bic	r1, r0, #255	; 0xff
   16c5c:	uxtb	r0, r0
   16c60:	bfi	r0, r2, #8, #12
   16c64:	orr	r3, r3, r1, lsr #20
   16c68:	orr	r0, r0, r1, lsl #12
   16c6c:	movw	r1, #60705	; 0xed21
   16c70:	str	r3, [r7, #20]
   16c74:	str	r0, [r7, #16]
   16c78:	mov	r0, r6
   16c7c:	movt	r1, #1
   16c80:	bl	116b4 <strcmp@plt>
   16c84:	cmp	r0, #0
   16c88:	mov	r8, #1
   16c8c:	mov	r0, #1
   16c90:	beq	16dfc <__assert_fail@plt+0x5370>
   16c94:	movw	r1, #61236	; 0xef34
   16c98:	mov	r0, r6
   16c9c:	movt	r1, #1
   16ca0:	bl	116b4 <strcmp@plt>
   16ca4:	cmp	r0, #0
   16ca8:	mov	r0, #1
   16cac:	beq	16dfc <__assert_fail@plt+0x5370>
   16cb0:	movw	r1, #62379	; 0xf3ab
   16cb4:	mov	r0, r6
   16cb8:	movt	r1, #1
   16cbc:	bl	116b4 <strcmp@plt>
   16cc0:	cmp	r0, #0
   16cc4:	mov	r0, #1
   16cc8:	beq	16dfc <__assert_fail@plt+0x5370>
   16ccc:	movw	r1, #60849	; 0xedb1
   16cd0:	mov	r0, r6
   16cd4:	movt	r1, #1
   16cd8:	bl	116b4 <strcmp@plt>
   16cdc:	cmp	r0, #0
   16ce0:	mov	r0, #1
   16ce4:	beq	16dfc <__assert_fail@plt+0x5370>
   16ce8:	movw	r1, #60864	; 0xedc0
   16cec:	mov	r0, r6
   16cf0:	movt	r1, #1
   16cf4:	bl	116b4 <strcmp@plt>
   16cf8:	cmp	r0, #0
   16cfc:	mov	r0, #1
   16d00:	beq	16dfc <__assert_fail@plt+0x5370>
   16d04:	movw	r1, #60956	; 0xee1c
   16d08:	mov	r0, r6
   16d0c:	movt	r1, #1
   16d10:	bl	116b4 <strcmp@plt>
   16d14:	cmp	r0, #0
   16d18:	mov	r0, #1
   16d1c:	beq	16dfc <__assert_fail@plt+0x5370>
   16d20:	movw	r1, #62385	; 0xf3b1
   16d24:	mov	r0, r6
   16d28:	movt	r1, #1
   16d2c:	bl	116b4 <strcmp@plt>
   16d30:	cmp	r0, #0
   16d34:	mov	r0, #1
   16d38:	beq	16dfc <__assert_fail@plt+0x5370>
   16d3c:	movw	r1, #61146	; 0xeeda
   16d40:	mov	r0, r6
   16d44:	movt	r1, #1
   16d48:	bl	116b4 <strcmp@plt>
   16d4c:	cmp	r0, #0
   16d50:	mov	r0, #1
   16d54:	beq	16dfc <__assert_fail@plt+0x5370>
   16d58:	movw	r1, #61279	; 0xef5f
   16d5c:	mov	r0, r6
   16d60:	movt	r1, #1
   16d64:	bl	116b4 <strcmp@plt>
   16d68:	cmp	r0, #0
   16d6c:	mov	r0, #1
   16d70:	beq	16dfc <__assert_fail@plt+0x5370>
   16d74:	movw	r1, #61366	; 0xefb6
   16d78:	mov	r0, r6
   16d7c:	movt	r1, #1
   16d80:	bl	116b4 <strcmp@plt>
   16d84:	cmp	r0, #0
   16d88:	mov	r0, #1
   16d8c:	beq	16dfc <__assert_fail@plt+0x5370>
   16d90:	movw	r1, #61411	; 0xefe3
   16d94:	mov	r0, r6
   16d98:	movt	r1, #1
   16d9c:	bl	116b4 <strcmp@plt>
   16da0:	cmp	r0, #0
   16da4:	mov	r0, #1
   16da8:	beq	16dfc <__assert_fail@plt+0x5370>
   16dac:	movw	r1, #62397	; 0xf3bd
   16db0:	mov	r0, r6
   16db4:	movt	r1, #1
   16db8:	bl	116b4 <strcmp@plt>
   16dbc:	cmp	r0, #0
   16dc0:	mov	r0, #1
   16dc4:	beq	16dfc <__assert_fail@plt+0x5370>
   16dc8:	movw	r1, #62404	; 0xf3c4
   16dcc:	mov	r0, r6
   16dd0:	movt	r1, #1
   16dd4:	bl	116b4 <strcmp@plt>
   16dd8:	cmp	r0, #0
   16ddc:	mov	r0, #1
   16de0:	beq	16dfc <__assert_fail@plt+0x5370>
   16de4:	movw	r1, #62411	; 0xf3cb
   16de8:	mov	r0, r6
   16dec:	movt	r1, #1
   16df0:	bl	116b4 <strcmp@plt>
   16df4:	clz	r0, r0
   16df8:	lsr	r0, r0, #5
   16dfc:	bic	r1, r4, #1
   16e00:	orr	r5, r1, r0
   16e04:	mov	r1, #58	; 0x3a
   16e08:	strb	r5, [r7, #24]
   16e0c:	ldr	r4, [r7]
   16e10:	mov	r0, r4
   16e14:	bl	118b8 <strchr@plt>
   16e18:	ldr	sl, [sp, #4]
   16e1c:	cmp	r0, #0
   16e20:	beq	167b8 <__assert_fail@plt+0x4d2c>
   16e24:	add	r6, sp, #20
   16e28:	and	r0, r5, #253	; 0xfd
   16e2c:	add	r9, sp, #12
   16e30:	orr	r0, r0, r8, lsl #1
   16e34:	movw	r8, #62358	; 0xf396
   16e38:	strb	r0, [r7, #24]
   16e3c:	ldr	r0, [sp, #8]
   16e40:	movt	r8, #1
   16e44:	str	r7, [r0]
   16e48:	add	r0, r7, #28
   16e4c:	str	r0, [sp, #8]
   16e50:	b	16e58 <__assert_fail@plt+0x53cc>
   16e54:	add	r6, sp, #20
   16e58:	add	r7, sp, #16
   16e5c:	add	r5, sp, #28
   16e60:	add	r4, sp, #24
   16e64:	mov	r0, r5
   16e68:	mov	r1, r4
   16e6c:	mov	r2, #10
   16e70:	mov	r3, sl
   16e74:	bl	1169c <__getdelim@plt>
   16e78:	cmn	r0, #1
   16e7c:	bne	16910 <__assert_fail@plt+0x4e84>
   16e80:	b	17260 <__assert_fail@plt+0x57d4>
   16e84:	movw	r0, #62445	; 0xf3ed
   16e88:	movw	r1, #59695	; 0xe92f
   16e8c:	movt	r0, #1
   16e90:	movt	r1, #1
   16e94:	bl	11a20 <setmntent@plt>
   16e98:	cmp	r0, #0
   16e9c:	beq	172ac <__assert_fail@plt+0x5820>
   16ea0:	mov	r8, r0
   16ea4:	bl	117ec <getmntent@plt>
   16ea8:	cmp	r0, #0
   16eac:	beq	172b4 <__assert_fail@plt+0x5828>
   16eb0:	mov	r5, r0
   16eb4:	add	sl, sp, #32
   16eb8:	b	17010 <__assert_fail@plt+0x5584>
   16ebc:	ldrb	r0, [r5]
   16ec0:	cmp	r0, #47	; 0x2f
   16ec4:	ldrbeq	r0, [r5, #1]
   16ec8:	cmpeq	r0, #47	; 0x2f
   16ecc:	beq	16fc4 <__assert_fail@plt+0x5538>
   16ed0:	movw	r1, #60671	; 0xecff
   16ed4:	mov	r0, r7
   16ed8:	movt	r1, #1
   16edc:	bl	116b4 <strcmp@plt>
   16ee0:	cmp	r0, #0
   16ee4:	beq	17220 <__assert_fail@plt+0x5794>
   16ee8:	movw	r1, #61065	; 0xee89
   16eec:	mov	r0, r7
   16ef0:	movt	r1, #1
   16ef4:	bl	116b4 <strcmp@plt>
   16ef8:	cmp	r0, #0
   16efc:	beq	17220 <__assert_fail@plt+0x5794>
   16f00:	movw	r1, #60806	; 0xed86
   16f04:	mov	r0, r7
   16f08:	movt	r1, #1
   16f0c:	bl	116b4 <strcmp@plt>
   16f10:	cmp	r0, #0
   16f14:	beq	17220 <__assert_fail@plt+0x5794>
   16f18:	movw	r1, #62427	; 0xf3db
   16f1c:	mov	r0, r7
   16f20:	movt	r1, #1
   16f24:	bl	116b4 <strcmp@plt>
   16f28:	cmp	r0, #0
   16f2c:	beq	17220 <__assert_fail@plt+0x5794>
   16f30:	movw	r1, #60942	; 0xee0e
   16f34:	mov	r0, r7
   16f38:	movt	r1, #1
   16f3c:	bl	116b4 <strcmp@plt>
   16f40:	cmp	r0, #0
   16f44:	beq	17220 <__assert_fail@plt+0x5794>
   16f48:	movw	r1, #60981	; 0xee35
   16f4c:	mov	r0, r7
   16f50:	movt	r1, #1
   16f54:	bl	116b4 <strcmp@plt>
   16f58:	cmp	r0, #0
   16f5c:	beq	17220 <__assert_fail@plt+0x5794>
   16f60:	movw	r1, #61026	; 0xee62
   16f64:	mov	r0, r7
   16f68:	movt	r1, #1
   16f6c:	bl	116b4 <strcmp@plt>
   16f70:	cmp	r0, #0
   16f74:	beq	17220 <__assert_fail@plt+0x5794>
   16f78:	movw	r1, #61196	; 0xef0c
   16f7c:	mov	r0, r7
   16f80:	movt	r1, #1
   16f84:	bl	116b4 <strcmp@plt>
   16f88:	cmp	r0, #0
   16f8c:	beq	17220 <__assert_fail@plt+0x5794>
   16f90:	movw	r1, #61436	; 0xeffc
   16f94:	mov	r0, r7
   16f98:	movt	r1, #1
   16f9c:	bl	116b4 <strcmp@plt>
   16fa0:	cmp	r0, #0
   16fa4:	beq	17220 <__assert_fail@plt+0x5794>
   16fa8:	movw	r0, #62438	; 0xf3e6
   16fac:	mov	r1, r5
   16fb0:	movt	r0, #1
   16fb4:	bl	116b4 <strcmp@plt>
   16fb8:	clz	r0, r0
   16fbc:	lsr	r6, r0, #5
   16fc0:	b	17220 <__assert_fail@plt+0x5794>
   16fc4:	movw	r1, #62416	; 0xf3d0
   16fc8:	mov	r0, r7
   16fcc:	movt	r1, #1
   16fd0:	bl	116b4 <strcmp@plt>
   16fd4:	cmp	r0, #0
   16fd8:	beq	17220 <__assert_fail@plt+0x5794>
   16fdc:	movw	r1, #62422	; 0xf3d6
   16fe0:	mov	r0, r7
   16fe4:	movt	r1, #1
   16fe8:	bl	116b4 <strcmp@plt>
   16fec:	cmp	r0, #0
   16ff0:	beq	17220 <__assert_fail@plt+0x5794>
   16ff4:	movw	r1, #60801	; 0xed81
   16ff8:	mov	r0, r7
   16ffc:	movt	r1, #1
   17000:	bl	116b4 <strcmp@plt>
   17004:	cmp	r0, #0
   17008:	bne	16ed0 <__assert_fail@plt+0x5444>
   1700c:	b	17220 <__assert_fail@plt+0x5794>
   17010:	movw	r1, #62455	; 0xf3f7
   17014:	mov	r0, r5
   17018:	movt	r1, #1
   1701c:	bl	117bc <hasmntopt@plt>
   17020:	str	r0, [sp, #8]
   17024:	mov	r0, #32
   17028:	bl	1b968 <__assert_fail@plt+0x9edc>
   1702c:	mov	r9, r0
   17030:	ldr	r0, [r5]
   17034:	bl	1be88 <__assert_fail@plt+0xa3fc>
   17038:	str	r0, [r9]
   1703c:	ldr	r0, [r5, #4]
   17040:	bl	1be88 <__assert_fail@plt+0xa3fc>
   17044:	str	r0, [r9, #4]
   17048:	mov	r0, #0
   1704c:	str	r0, [r9, #8]
   17050:	ldr	r0, [r5, #8]
   17054:	bl	1be88 <__assert_fail@plt+0xa3fc>
   17058:	str	r0, [r9, #12]
   1705c:	mov	r7, r0
   17060:	movw	r1, #60705	; 0xed21
   17064:	ldrb	r0, [r9, #24]
   17068:	movt	r1, #1
   1706c:	orr	r4, r0, #4
   17070:	mov	r0, r7
   17074:	strb	r4, [r9, #24]
   17078:	bl	116b4 <strcmp@plt>
   1707c:	cmp	r0, #0
   17080:	mov	r6, #1
   17084:	mov	r0, #1
   17088:	beq	171fc <__assert_fail@plt+0x5770>
   1708c:	movw	r1, #61236	; 0xef34
   17090:	mov	r0, r7
   17094:	movt	r1, #1
   17098:	bl	116b4 <strcmp@plt>
   1709c:	cmp	r0, #0
   170a0:	mov	r0, #1
   170a4:	beq	171fc <__assert_fail@plt+0x5770>
   170a8:	movw	r1, #62379	; 0xf3ab
   170ac:	mov	r0, r7
   170b0:	movt	r1, #1
   170b4:	bl	116b4 <strcmp@plt>
   170b8:	cmp	r0, #0
   170bc:	mov	r0, #1
   170c0:	beq	171fc <__assert_fail@plt+0x5770>
   170c4:	movw	r1, #60849	; 0xedb1
   170c8:	mov	r0, r7
   170cc:	movt	r1, #1
   170d0:	bl	116b4 <strcmp@plt>
   170d4:	cmp	r0, #0
   170d8:	mov	r0, #1
   170dc:	beq	171fc <__assert_fail@plt+0x5770>
   170e0:	movw	r1, #60864	; 0xedc0
   170e4:	mov	r0, r7
   170e8:	movt	r1, #1
   170ec:	bl	116b4 <strcmp@plt>
   170f0:	cmp	r0, #0
   170f4:	mov	r0, #1
   170f8:	beq	171fc <__assert_fail@plt+0x5770>
   170fc:	movw	r1, #60956	; 0xee1c
   17100:	mov	r0, r7
   17104:	movt	r1, #1
   17108:	bl	116b4 <strcmp@plt>
   1710c:	cmp	r0, #0
   17110:	mov	r0, #1
   17114:	beq	171fc <__assert_fail@plt+0x5770>
   17118:	movw	r1, #62385	; 0xf3b1
   1711c:	mov	r0, r7
   17120:	movt	r1, #1
   17124:	bl	116b4 <strcmp@plt>
   17128:	cmp	r0, #0
   1712c:	mov	r0, #1
   17130:	beq	171fc <__assert_fail@plt+0x5770>
   17134:	movw	r1, #61146	; 0xeeda
   17138:	mov	r0, r7
   1713c:	movt	r1, #1
   17140:	bl	116b4 <strcmp@plt>
   17144:	cmp	r0, #0
   17148:	mov	r0, #1
   1714c:	beq	171fc <__assert_fail@plt+0x5770>
   17150:	movw	r1, #61279	; 0xef5f
   17154:	mov	r0, r7
   17158:	movt	r1, #1
   1715c:	bl	116b4 <strcmp@plt>
   17160:	cmp	r0, #0
   17164:	mov	r0, #1
   17168:	beq	171fc <__assert_fail@plt+0x5770>
   1716c:	movw	r1, #61366	; 0xefb6
   17170:	mov	r0, r7
   17174:	movt	r1, #1
   17178:	bl	116b4 <strcmp@plt>
   1717c:	cmp	r0, #0
   17180:	mov	r0, #1
   17184:	beq	171fc <__assert_fail@plt+0x5770>
   17188:	movw	r1, #61411	; 0xefe3
   1718c:	mov	r0, r7
   17190:	movt	r1, #1
   17194:	bl	116b4 <strcmp@plt>
   17198:	cmp	r0, #0
   1719c:	mov	r0, #1
   171a0:	beq	171fc <__assert_fail@plt+0x5770>
   171a4:	movw	r1, #62397	; 0xf3bd
   171a8:	mov	r0, r7
   171ac:	movt	r1, #1
   171b0:	bl	116b4 <strcmp@plt>
   171b4:	cmp	r0, #0
   171b8:	mov	r0, #1
   171bc:	beq	171fc <__assert_fail@plt+0x5770>
   171c0:	movw	r1, #62404	; 0xf3c4
   171c4:	mov	r0, r7
   171c8:	movt	r1, #1
   171cc:	bl	116b4 <strcmp@plt>
   171d0:	cmp	r0, #0
   171d4:	mov	r0, #1
   171d8:	beq	171fc <__assert_fail@plt+0x5770>
   171dc:	movw	r1, #62411	; 0xf3cb
   171e0:	mov	r0, r7
   171e4:	movt	r1, #1
   171e8:	bl	116b4 <strcmp@plt>
   171ec:	ldr	r1, [sp, #8]
   171f0:	orr	r0, r1, r0
   171f4:	clz	r0, r0
   171f8:	lsr	r0, r0, #5
   171fc:	bic	r1, r4, #1
   17200:	orr	r4, r1, r0
   17204:	mov	r1, #58	; 0x3a
   17208:	strb	r4, [r9, #24]
   1720c:	ldr	r5, [r9]
   17210:	mov	r0, r5
   17214:	bl	118b8 <strchr@plt>
   17218:	cmp	r0, #0
   1721c:	beq	16ebc <__assert_fail@plt+0x5430>
   17220:	mvn	r0, #0
   17224:	str	r0, [r9, #16]
   17228:	str	r0, [r9, #20]
   1722c:	and	r0, r4, #253	; 0xfd
   17230:	orr	r0, r0, r6, lsl #1
   17234:	strb	r0, [r9, #24]
   17238:	mov	r0, r8
   1723c:	str	r9, [sl]
   17240:	add	sl, r9, #28
   17244:	bl	117ec <getmntent@plt>
   17248:	mov	r5, r0
   1724c:	cmp	r0, #0
   17250:	bne	17010 <__assert_fail@plt+0x5584>
   17254:	b	172b8 <__assert_fail@plt+0x582c>
   17258:	add	r0, sp, #32
   1725c:	str	r0, [sp, #8]
   17260:	ldr	r0, [sp, #28]
   17264:	bl	16638 <__assert_fail@plt+0x4bac>
   17268:	ldrb	r0, [sl]
   1726c:	tst	r0, #32
   17270:	bne	1728c <__assert_fail@plt+0x5800>
   17274:	mov	r0, sl
   17278:	bl	1cf20 <__assert_fail@plt+0xb494>
   1727c:	ldr	sl, [sp, #8]
   17280:	cmn	r0, #1
   17284:	bne	172c8 <__assert_fail@plt+0x583c>
   17288:	b	172d8 <__assert_fail@plt+0x584c>
   1728c:	bl	118e8 <__errno_location@plt>
   17290:	ldr	r6, [r0]
   17294:	mov	r5, r0
   17298:	mov	r0, sl
   1729c:	bl	1cf20 <__assert_fail@plt+0xb494>
   172a0:	ldr	sl, [sp, #8]
   172a4:	str	r6, [r5]
   172a8:	b	172d8 <__assert_fail@plt+0x584c>
   172ac:	mov	r4, #0
   172b0:	b	17344 <__assert_fail@plt+0x58b8>
   172b4:	add	sl, sp, #32
   172b8:	mov	r0, r8
   172bc:	bl	11978 <endmntent@plt>
   172c0:	cmp	r0, #0
   172c4:	beq	172d8 <__assert_fail@plt+0x584c>
   172c8:	mov	r0, #0
   172cc:	str	r0, [sl]
   172d0:	ldr	r4, [sp, #32]
   172d4:	b	17344 <__assert_fail@plt+0x58b8>
   172d8:	bl	118e8 <__errno_location@plt>
   172dc:	mov	r4, #0
   172e0:	ldr	r8, [r0]
   172e4:	mov	r5, r0
   172e8:	str	r4, [sl]
   172ec:	ldr	r6, [sp, #32]
   172f0:	cmp	r6, #0
   172f4:	beq	17340 <__assert_fail@plt+0x58b4>
   172f8:	ldr	r0, [r6]
   172fc:	ldr	r7, [r6, #28]
   17300:	bl	16638 <__assert_fail@plt+0x4bac>
   17304:	ldr	r0, [r6, #4]
   17308:	bl	16638 <__assert_fail@plt+0x4bac>
   1730c:	ldr	r0, [r6, #8]
   17310:	bl	16638 <__assert_fail@plt+0x4bac>
   17314:	ldrb	r0, [r6, #24]
   17318:	tst	r0, #4
   1731c:	beq	17328 <__assert_fail@plt+0x589c>
   17320:	ldr	r0, [r6, #12]
   17324:	bl	16638 <__assert_fail@plt+0x4bac>
   17328:	mov	r0, r6
   1732c:	bl	16638 <__assert_fail@plt+0x4bac>
   17330:	cmp	r7, #0
   17334:	mov	r6, r7
   17338:	str	r7, [sp, #32]
   1733c:	bne	172f8 <__assert_fail@plt+0x586c>
   17340:	str	r8, [r5]
   17344:	mov	r0, r4
   17348:	sub	sp, fp, #28
   1734c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17350:	push	{r4, sl, fp, lr}
   17354:	add	fp, sp, #8
   17358:	mov	r4, r0
   1735c:	ldr	r0, [r0]
   17360:	bl	16638 <__assert_fail@plt+0x4bac>
   17364:	ldr	r0, [r4, #4]
   17368:	bl	16638 <__assert_fail@plt+0x4bac>
   1736c:	ldr	r0, [r4, #8]
   17370:	bl	16638 <__assert_fail@plt+0x4bac>
   17374:	ldrb	r0, [r4, #24]
   17378:	tst	r0, #4
   1737c:	beq	17388 <__assert_fail@plt+0x58fc>
   17380:	ldr	r0, [r4, #12]
   17384:	bl	16638 <__assert_fail@plt+0x4bac>
   17388:	mov	r0, r4
   1738c:	pop	{r4, sl, fp, lr}
   17390:	b	16638 <__assert_fail@plt+0x4bac>
   17394:	push	{fp, lr}
   17398:	mov	fp, sp
   1739c:	sub	sp, sp, #24
   173a0:	mvn	ip, #0
   173a4:	str	ip, [sp, #8]
   173a8:	mov	ip, #0
   173ac:	str	ip, [sp, #4]
   173b0:	str	ip, [sp]
   173b4:	ldr	ip, [fp, #12]
   173b8:	str	ip, [sp, #16]
   173bc:	ldr	ip, [fp, #8]
   173c0:	str	ip, [sp, #12]
   173c4:	bl	173d0 <__assert_fail@plt+0x5944>
   173c8:	mov	sp, fp
   173cc:	pop	{fp, pc}
   173d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173d4:	add	fp, sp, #28
   173d8:	sub	sp, sp, #124	; 0x7c
   173dc:	sub	sp, sp, #1024	; 0x400
   173e0:	mov	r4, r3
   173e4:	mov	sl, r2
   173e8:	str	r1, [sp, #88]	; 0x58
   173ec:	mov	r5, r0
   173f0:	bl	118e8 <__errno_location@plt>
   173f4:	mov	r2, r4
   173f8:	ldrb	r3, [sl]
   173fc:	str	r0, [sp, #60]	; 0x3c
   17400:	ldr	r0, [r0]
   17404:	movw	r6, #58350	; 0xe3ee
   17408:	ldr	r1, [r2, #8]!
   1740c:	movt	r6, #1
   17410:	str	r0, [sp, #56]	; 0x38
   17414:	cmp	r1, #0
   17418:	mov	r7, r1
   1741c:	movweq	r7, #12
   17420:	cmp	r1, #12
   17424:	subgt	r7, r1, #12
   17428:	ldr	r1, [r2, #32]
   1742c:	cmp	r1, #0
   17430:	movne	r6, r1
   17434:	cmp	r3, #0
   17438:	beq	174b8 <__assert_fail@plt+0x5a2c>
   1743c:	sub	r0, fp, #48	; 0x30
   17440:	mvn	r1, #13
   17444:	ldr	r9, [fp, #16]
   17448:	sub	r8, r6, #1
   1744c:	str	r6, [sp, #36]	; 0x24
   17450:	movw	r6, #52428	; 0xcccc
   17454:	str	r4, [sp, #72]	; 0x48
   17458:	mov	lr, #0
   1745c:	mov	ip, r5
   17460:	str	r7, [sp, #44]	; 0x2c
   17464:	str	r2, [sp, #48]	; 0x30
   17468:	sub	r1, r1, r0
   1746c:	movt	r6, #3276	; 0xccc
   17470:	str	r8, [sp, #20]
   17474:	str	r1, [sp, #28]
   17478:	add	r1, r0, #13
   1747c:	add	r0, r0, #14
   17480:	str	r1, [sp, #24]
   17484:	add	r1, sp, #96	; 0x60
   17488:	str	r0, [sp, #64]	; 0x40
   1748c:	add	r1, r1, #1
   17490:	str	r1, [sp, #32]
   17494:	add	r1, r4, #12
   17498:	mov	r4, #-2147483648	; 0x80000000
   1749c:	str	r1, [sp, #40]	; 0x28
   174a0:	sub	r1, fp, #53	; 0x35
   174a4:	add	r0, r1, #3
   174a8:	str	r0, [sp, #52]	; 0x34
   174ac:	add	r0, r1, #2
   174b0:	str	r0, [sp, #68]	; 0x44
   174b4:	b	177e4 <__assert_fail@plt+0x5d58>
   174b8:	mov	lr, #0
   174bc:	mov	ip, r5
   174c0:	b	18cec <__assert_fail@plt+0x7260>
   174c4:	sub	r0, r9, #6
   174c8:	bic	r8, r0, r0, asr #31
   174cc:	b	17fd4 <__assert_fail@plt+0x6548>
   174d0:	movw	r6, #63636	; 0xf894
   174d4:	movt	r6, #65535	; 0xffff
   174d8:	sub	r6, r6, r3
   174dc:	add	r3, r7, #100	; 0x64
   174e0:	cmp	lr, r6
   174e4:	rsblt	r3, r7, #0
   174e8:	ldr	lr, [sp, #76]	; 0x4c
   174ec:	ldr	r7, [fp, #12]
   174f0:	cmp	r5, #0
   174f4:	mov	r4, #0
   174f8:	moveq	r5, r7
   174fc:	mov	r7, #0
   17500:	cmp	r5, #43	; 0x2b
   17504:	bne	18264 <__assert_fail@plt+0x67d8>
   17508:	ldr	r8, [sp, #80]	; 0x50
   1750c:	mov	r4, #0
   17510:	movw	r6, #9999	; 0x270f
   17514:	mov	ip, #0
   17518:	cmp	r8, r9
   1751c:	movwlt	r4, #1
   17520:	cmp	r8, #2
   17524:	movweq	r6, #99	; 0x63
   17528:	cmp	r6, r3
   1752c:	movwcc	ip, #1
   17530:	orr	r4, r4, ip
   17534:	ldr	ip, [sp, #84]	; 0x54
   17538:	b	18264 <__assert_fail@plt+0x67d8>
   1753c:	movw	r4, #63636	; 0xf894
   17540:	ldr	ip, [sp, #84]	; 0x54
   17544:	str	r3, [sp, #80]	; 0x50
   17548:	add	r3, r6, #100	; 0x64
   1754c:	movt	r4, #65535	; 0xffff
   17550:	cmp	r7, r4
   17554:	rsblt	r3, r6, #0
   17558:	b	174ec <__assert_fail@plt+0x5a60>
   1755c:	cmp	r7, #0
   17560:	beq	17744 <__assert_fail@plt+0x5cb8>
   17564:	movw	r6, #10000	; 0x2710
   17568:	mov	r4, #1
   1756c:	mla	r3, r3, r6, r7
   17570:	mov	r7, #100	; 0x64
   17574:	mla	r3, ip, r7, r3
   17578:	mov	r7, #9
   1757c:	str	r7, [sp, #80]	; 0x50
   17580:	mov	r7, #20
   17584:	b	17764 <__assert_fail@plt+0x5cd8>
   17588:	sub	r1, fp, #48	; 0x30
   1758c:	mov	r0, r6
   17590:	mov	r2, r4
   17594:	mov	r7, lr
   17598:	bl	11708 <memcpy@plt>
   1759c:	mov	lr, r7
   175a0:	add	ip, r6, r4
   175a4:	cmp	r5, #45	; 0x2d
   175a8:	mov	r6, #0
   175ac:	subne	r0, r9, r4
   175b0:	bicne	r6, r0, r0, asr #31
   175b4:	sub	r0, r8, r4
   175b8:	cmp	r6, r0
   175bc:	bcs	18d10 <__assert_fail@plt+0x7284>
   175c0:	cmp	ip, #0
   175c4:	cmpne	r6, #0
   175c8:	beq	17794 <__assert_fail@plt+0x5d08>
   175cc:	uxtb	r0, r5
   175d0:	cmp	r0, #48	; 0x30
   175d4:	cmpne	r0, #43	; 0x2b
   175d8:	bne	17770 <__assert_fail@plt+0x5ce4>
   175dc:	mov	r0, ip
   175e0:	mov	r7, ip
   175e4:	mov	r1, #48	; 0x30
   175e8:	b	1777c <__assert_fail@plt+0x5cf0>
   175ec:	mov	r1, #32
   175f0:	mov	r5, r2
   175f4:	bl	11918 <memset@plt>
   175f8:	ldr	r0, [sp, #84]	; 0x54
   175fc:	ldr	lr, [sp, #76]	; 0x4c
   17600:	add	ip, r0, r5
   17604:	tst	r7, #1
   17608:	beq	17658 <__assert_fail@plt+0x5bcc>
   1760c:	ldr	r8, [sp, #20]
   17610:	cmp	r9, #0
   17614:	beq	176d0 <__assert_fail@plt+0x5c44>
   17618:	cmp	r6, r9
   1761c:	movls	r6, r9
   17620:	add	r0, r0, r6
   17624:	mov	r6, ip
   17628:	sub	r5, r0, #1
   1762c:	bl	1184c <__ctype_tolower_loc@plt>
   17630:	ldr	lr, [sp, #76]	; 0x4c
   17634:	mov	ip, r6
   17638:	mov	r1, r9
   1763c:	ldrb	r2, [r8, r1]
   17640:	ldr	r3, [r0]
   17644:	subs	r1, r1, #1
   17648:	ldr	r2, [r3, r2, lsl #2]
   1764c:	strb	r2, [r5], #-1
   17650:	bne	1763c <__assert_fail@plt+0x5bb0>
   17654:	b	176d0 <__assert_fail@plt+0x5c44>
   17658:	eor	r1, r7, #1
   1765c:	and	r1, r8, r1
   17660:	tst	r1, #1
   17664:	beq	176b4 <__assert_fail@plt+0x5c28>
   17668:	ldr	r8, [sp, #20]
   1766c:	cmp	r9, #0
   17670:	beq	176d0 <__assert_fail@plt+0x5c44>
   17674:	cmp	r6, r9
   17678:	movls	r6, r9
   1767c:	add	r0, r0, r6
   17680:	mov	r6, ip
   17684:	sub	r5, r0, #1
   17688:	bl	11858 <__ctype_toupper_loc@plt>
   1768c:	ldr	lr, [sp, #76]	; 0x4c
   17690:	mov	ip, r6
   17694:	mov	r1, r9
   17698:	ldrb	r2, [r8, r1]
   1769c:	ldr	r3, [r0]
   176a0:	subs	r1, r1, #1
   176a4:	ldr	r2, [r3, r2, lsl #2]
   176a8:	strb	r2, [r5], #-1
   176ac:	bne	17698 <__assert_fail@plt+0x5c0c>
   176b0:	b	176d0 <__assert_fail@plt+0x5c44>
   176b4:	ldr	r1, [sp, #36]	; 0x24
   176b8:	mov	r0, ip
   176bc:	mov	r2, r9
   176c0:	mov	r5, ip
   176c4:	bl	11708 <memcpy@plt>
   176c8:	ldr	lr, [sp, #76]	; 0x4c
   176cc:	mov	ip, r5
   176d0:	add	ip, ip, r9
   176d4:	movw	r6, #52428	; 0xcccc
   176d8:	add	lr, r4, lr
   176dc:	b	18b58 <__assert_fail@plt+0x70cc>
   176e0:	mov	r0, ip
   176e4:	mov	r1, #32
   176e8:	mov	r2, r4
   176ec:	mov	r5, lr
   176f0:	mov	r7, ip
   176f4:	bl	11918 <memset@plt>
   176f8:	mov	ip, r7
   176fc:	mov	lr, r5
   17700:	add	ip, r7, r4
   17704:	mov	r4, #-2147483648	; 0x80000000
   17708:	mov	r0, #10
   1770c:	b	1773c <__assert_fail@plt+0x5cb0>
   17710:	mov	r0, ip
   17714:	mov	r1, #32
   17718:	mov	r2, r4
   1771c:	mov	r5, lr
   17720:	mov	r7, ip
   17724:	bl	11918 <memset@plt>
   17728:	mov	ip, r7
   1772c:	mov	lr, r5
   17730:	add	ip, r7, r4
   17734:	mov	r4, #-2147483648	; 0x80000000
   17738:	mov	r0, #9
   1773c:	strb	r0, [ip], #1
   17740:	b	18cd0 <__assert_fail@plt+0x7244>
   17744:	cmp	ip, #0
   17748:	beq	177dc <__assert_fail@plt+0x5d50>
   1774c:	mov	r7, #100	; 0x64
   17750:	mov	r4, #1
   17754:	mla	r3, r3, r7, ip
   17758:	mov	r7, #6
   1775c:	str	r7, [sp, #80]	; 0x50
   17760:	mov	r7, #4
   17764:	ldr	lr, [sp, #76]	; 0x4c
   17768:	mov	ip, r8
   1776c:	b	18264 <__assert_fail@plt+0x67d8>
   17770:	mov	r0, ip
   17774:	mov	r7, ip
   17778:	mov	r1, #32
   1777c:	mov	r2, r6
   17780:	mov	r5, lr
   17784:	bl	11918 <memset@plt>
   17788:	mov	lr, r5
   1778c:	add	ip, r7, r6
   17790:	mov	r0, r7
   17794:	add	r0, r6, lr
   17798:	movw	r6, #52428	; 0xcccc
   1779c:	add	lr, r0, r4
   177a0:	movt	r6, #3276	; 0xccc
   177a4:	mov	r4, #-2147483648	; 0x80000000
   177a8:	b	18cdc <__assert_fail@plt+0x7250>
   177ac:	mov	r0, ip
   177b0:	mov	r1, #32
   177b4:	mov	r2, r4
   177b8:	mov	r5, lr
   177bc:	mov	r7, ip
   177c0:	bl	11918 <memset@plt>
   177c4:	ldrb	r1, [sl]
   177c8:	mov	ip, r7
   177cc:	mov	lr, r5
   177d0:	add	ip, r7, r4
   177d4:	strb	r1, [ip], #1
   177d8:	b	18ccc <__assert_fail@plt+0x7240>
   177dc:	mov	r7, #3
   177e0:	b	18a8c <__assert_fail@plt+0x7000>
   177e4:	uxtb	r1, r3
   177e8:	cmp	r1, #37	; 0x25
   177ec:	bne	17808 <__assert_fail@plt+0x5d7c>
   177f0:	ldr	r0, [fp, #8]
   177f4:	mov	r7, #0
   177f8:	mov	r5, #0
   177fc:	str	sl, [sp, #80]	; 0x50
   17800:	str	r0, [sp, #92]	; 0x5c
   17804:	b	178f8 <__assert_fail@plt+0x5e6c>
   17808:	ldr	r0, [sp, #88]	; 0x58
   1780c:	bic	r1, r9, r9, asr #31
   17810:	cmp	r1, #1
   17814:	mov	r5, r1
   17818:	movls	r5, #1
   1781c:	sub	r2, r0, lr
   17820:	cmp	r5, r2
   17824:	bcs	18d10 <__assert_fail@plt+0x7284>
   17828:	cmp	ip, #0
   1782c:	beq	1798c <__assert_fail@plt+0x5f00>
   17830:	cmp	r1, #2
   17834:	bcc	17870 <__assert_fail@plt+0x5de4>
   17838:	sub	r4, r1, #1
   1783c:	mov	r0, ip
   17840:	mov	r1, #32
   17844:	mov	r6, lr
   17848:	mov	r7, ip
   1784c:	mov	r2, r4
   17850:	bl	11918 <memset@plt>
   17854:	ldrb	r3, [sl]
   17858:	mov	ip, r7
   1785c:	mov	lr, r6
   17860:	movw	r6, #52428	; 0xcccc
   17864:	add	ip, r7, r4
   17868:	movt	r6, #3276	; 0xccc
   1786c:	mov	r4, #-2147483648	; 0x80000000
   17870:	strb	r3, [ip], #1
   17874:	add	lr, r5, lr
   17878:	b	18cdc <__assert_fail@plt+0x7250>
   1787c:	mov	r7, #1
   17880:	b	178f8 <__assert_fail@plt+0x5e6c>
   17884:	add	r1, r1, #1
   17888:	add	sl, sl, #1
   1788c:	mov	r5, r0
   17890:	ldrb	r0, [sl]
   17894:	sub	r2, r0, #35	; 0x23
   17898:	cmp	r2, #13
   1789c:	bhi	178e0 <__assert_fail@plt+0x5e54>
   178a0:	add	r3, pc, #0
   178a4:	ldr	pc, [r3, r2, lsl #2]
   178a8:	andeq	r7, r1, ip, ror r8
   178ac:	andeq	r7, r1, r4, lsl #18
   178b0:	andeq	r7, r1, r4, lsl #18
   178b4:	andeq	r7, r1, r4, lsl #18
   178b8:	andeq	r7, r1, r4, lsl #18
   178bc:	andeq	r7, r1, r4, lsl #18
   178c0:	andeq	r7, r1, r4, lsl #18
   178c4:	andeq	r7, r1, r4, lsl #18
   178c8:	andeq	r7, r1, r4, lsl #17
   178cc:	andeq	r7, r1, r4, lsl #18
   178d0:	andeq	r7, r1, r4, lsl #17
   178d4:	andeq	r7, r1, r4, lsl #18
   178d8:	andeq	r7, r1, r4, lsl #18
   178dc:	andeq	r7, r1, r4, lsl #17
   178e0:	cmp	r0, #95	; 0x5f
   178e4:	beq	17884 <__assert_fail@plt+0x5df8>
   178e8:	cmp	r0, #94	; 0x5e
   178ec:	bne	17904 <__assert_fail@plt+0x5e78>
   178f0:	mov	r0, #1
   178f4:	str	r0, [sp, #92]	; 0x5c
   178f8:	add	r1, sl, #2
   178fc:	add	sl, sl, #1
   17900:	b	17890 <__assert_fail@plt+0x5e04>
   17904:	sub	r2, r0, #48	; 0x30
   17908:	cmp	r2, #9
   1790c:	bhi	1796c <__assert_fail@plt+0x5ee0>
   17910:	mov	r9, #0
   17914:	cmn	r9, #1
   17918:	ble	17928 <__assert_fail@plt+0x5e9c>
   1791c:	cmp	r9, r6
   17920:	bgt	17938 <__assert_fail@plt+0x5eac>
   17924:	b	17940 <__assert_fail@plt+0x5eb4>
   17928:	beq	17940 <__assert_fail@plt+0x5eb4>
   1792c:	sdiv	r2, r4, r9
   17930:	cmp	r2, #10
   17934:	bge	17940 <__assert_fail@plt+0x5eb4>
   17938:	mvn	r9, #-2147483648	; 0x80000000
   1793c:	b	17958 <__assert_fail@plt+0x5ecc>
   17940:	add	r2, r9, r9, lsl #2
   17944:	lsl	r3, r2, #1
   17948:	uxtab	r0, r3, r0
   1794c:	sub	r9, r0, #48	; 0x30
   17950:	cmp	r9, r2, lsl #1
   17954:	mvnvs	r9, #-2147483648	; 0x80000000
   17958:	ldrb	r0, [r1], #1
   1795c:	sub	r2, r0, #48	; 0x30
   17960:	cmp	r2, #10
   17964:	bcc	17914 <__assert_fail@plt+0x5e88>
   17968:	sub	sl, r1, #1
   1796c:	cmp	r0, #79	; 0x4f
   17970:	str	ip, [sp, #84]	; 0x54
   17974:	cmpne	r0, #69	; 0x45
   17978:	bne	17998 <__assert_fail@plt+0x5f0c>
   1797c:	ldrb	r1, [sl, #1]!
   17980:	cmp	r1, #122	; 0x7a
   17984:	bls	179a8 <__assert_fail@plt+0x5f1c>
   17988:	b	185a4 <__assert_fail@plt+0x6b18>
   1798c:	mov	ip, #0
   17990:	add	lr, r5, lr
   17994:	b	18cdc <__assert_fail@plt+0x7250>
   17998:	mov	r1, r0
   1799c:	mov	r0, #0
   179a0:	cmp	r1, #122	; 0x7a
   179a4:	bhi	185a4 <__assert_fail@plt+0x6b18>
   179a8:	movw	r4, #62478	; 0xf40e
   179ac:	add	r2, pc, #12
   179b0:	mov	r6, #0
   179b4:	mvn	r8, #0
   179b8:	movt	r4, #1
   179bc:	ldr	pc, [r2, r1, lsl #2]
   179c0:			; <UNDEFINED> instruction: 0x00017cbc
   179c4:	andeq	r8, r1, r4, lsr #11
   179c8:	andeq	r8, r1, r4, lsr #11
   179cc:	andeq	r8, r1, r4, lsr #11
   179d0:	andeq	r8, r1, r4, lsr #11
   179d4:	andeq	r8, r1, r4, lsr #11
   179d8:	andeq	r8, r1, r4, lsr #11
   179dc:	andeq	r8, r1, r4, lsr #11
   179e0:	andeq	r8, r1, r4, lsr #11
   179e4:	andeq	r8, r1, r4, lsr #11
   179e8:	andeq	r8, r1, r4, lsr #11
   179ec:	andeq	r8, r1, r4, lsr #11
   179f0:	andeq	r8, r1, r4, lsr #11
   179f4:	andeq	r8, r1, r4, lsr #11
   179f8:	andeq	r8, r1, r4, lsr #11
   179fc:	andeq	r8, r1, r4, lsr #11
   17a00:	andeq	r8, r1, r4, lsr #11
   17a04:	andeq	r8, r1, r4, lsr #11
   17a08:	andeq	r8, r1, r4, lsr #11
   17a0c:	andeq	r8, r1, r4, lsr #11
   17a10:	andeq	r8, r1, r4, lsr #11
   17a14:	andeq	r8, r1, r4, lsr #11
   17a18:	andeq	r8, r1, r4, lsr #11
   17a1c:	andeq	r8, r1, r4, lsr #11
   17a20:	andeq	r8, r1, r4, lsr #11
   17a24:	andeq	r8, r1, r4, lsr #11
   17a28:	andeq	r8, r1, r4, lsr #11
   17a2c:	andeq	r8, r1, r4, lsr #11
   17a30:	andeq	r8, r1, r4, lsr #11
   17a34:	andeq	r8, r1, r4, lsr #11
   17a38:	andeq	r8, r1, r4, lsr #11
   17a3c:	andeq	r8, r1, r4, lsr #11
   17a40:	andeq	r8, r1, r4, lsr #11
   17a44:	andeq	r8, r1, r4, lsr #11
   17a48:	andeq	r8, r1, r4, lsr #11
   17a4c:	andeq	r8, r1, r4, lsr #11
   17a50:	andeq	r8, r1, r4, lsr #11
   17a54:	andeq	r7, r1, r8, asr #25
   17a58:	andeq	r8, r1, r4, lsr #11
   17a5c:	andeq	r8, r1, r4, lsr #11
   17a60:	andeq	r8, r1, r4, lsr #11
   17a64:	andeq	r8, r1, r4, lsr #11
   17a68:	andeq	r8, r1, r4, lsr #11
   17a6c:	andeq	r8, r1, r4, lsr #11
   17a70:	andeq	r8, r1, r4, lsr #11
   17a74:	andeq	r8, r1, r4, lsr #11
   17a78:	andeq	r8, r1, r4, lsr #11
   17a7c:	andeq	r8, r1, r4, lsr #11
   17a80:	andeq	r8, r1, r4, lsr #11
   17a84:	andeq	r8, r1, r4, lsr #11
   17a88:	andeq	r8, r1, r4, lsr #11
   17a8c:	andeq	r8, r1, r4, lsr #11
   17a90:	andeq	r8, r1, r4, lsr #11
   17a94:	andeq	r8, r1, r4, lsr #11
   17a98:	andeq	r8, r1, r4, lsr #11
   17a9c:	andeq	r8, r1, r4, lsr #11
   17aa0:	andeq	r8, r1, r4, lsr #11
   17aa4:	andeq	r8, r1, r4, lsr #11
   17aa8:	andeq	r7, r1, r4, lsr sp
   17aac:	andeq	r8, r1, r4, lsr #11
   17ab0:	andeq	r8, r1, r4, lsr #11
   17ab4:	andeq	r8, r1, r4, lsr #11
   17ab8:	andeq	r8, r1, r4, lsr #11
   17abc:	andeq	r8, r1, r4, lsr #11
   17ac0:	andeq	r8, r1, r4, lsr #11
   17ac4:	andeq	r7, r1, r8, lsr #27
   17ac8:	andeq	r7, r1, r8, asr #27
   17acc:	andeq	r7, r1, r8, ror #27
   17ad0:	strdeq	r7, [r1], -ip
   17ad4:	andeq	r8, r1, r4, lsr #11
   17ad8:	andeq	r7, r1, r0, lsl lr
   17adc:	andeq	r7, r1, ip, lsr #23
   17ae0:	andeq	r7, r1, ip, lsr lr
   17ae4:	andeq	r7, r1, r0, asr lr
   17ae8:	andeq	r8, r1, r4, lsr #11
   17aec:	andeq	r8, r1, r4, lsr #11
   17af0:	andeq	r8, r1, r4, lsr #11
   17af4:	andeq	r7, r1, r0, ror #28
   17af8:	andeq	r7, r1, r4, ror lr
   17afc:	andeq	r8, r1, r4, lsr #11
   17b00:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17b04:	andeq	r8, r1, r4, lsr #11
   17b08:	ldrdeq	r7, [r1], -r4
   17b0c:			; <UNDEFINED> instruction: 0x00017fb8
   17b10:	andeq	r7, r1, ip, asr #31
   17b14:	andeq	r8, r1, r4, ror r0
   17b18:	andeq	r7, r1, ip, lsr #23
   17b1c:	andeq	r8, r1, r0, lsr #1
   17b20:	andeq	r8, r1, ip, ror #1
   17b24:	andeq	r8, r1, r0, lsl #2
   17b28:	andeq	r8, r1, ip, lsr r1
   17b2c:	andeq	r8, r1, r4, lsr #11
   17b30:	andeq	r8, r1, r4, lsr #11
   17b34:	andeq	r8, r1, r4, lsr #11
   17b38:	andeq	r8, r1, r4, lsr #11
   17b3c:	andeq	r8, r1, r4, lsr #11
   17b40:	andeq	r8, r1, r4, lsr #11
   17b44:	andeq	r8, r1, ip, lsr #3
   17b48:	andeq	r7, r1, r0, lsr #25
   17b4c:	andeq	r8, r1, ip, asr #3
   17b50:	andeq	r8, r1, r0, ror #3
   17b54:	strdeq	r8, [r1], -r4
   17b58:	andeq	r8, r1, r4, lsr #11
   17b5c:	andeq	r7, r1, ip, lsr #23
   17b60:	andeq	r7, r1, r0, lsr #25
   17b64:	andeq	r8, r1, r4, lsr #11
   17b68:	andeq	r8, r1, r4, lsl #4
   17b6c:	andeq	r8, r1, ip, lsl r2
   17b70:	andeq	r8, r1, r0, lsr r2
   17b74:	andeq	r8, r1, r8, ror r3
   17b78:	andeq	r8, r1, r8, lsr #7
   17b7c:	andeq	r8, r1, r4, lsr #11
   17b80:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17b84:	andeq	r8, r1, r4, lsl #8
   17b88:	andeq	r8, r1, r4, lsr #21
   17b8c:	andeq	r8, r1, r0, lsr r4
   17b90:	strdeq	r8, [r1], -r4
   17b94:	andeq	r8, r1, r0, asr r5
   17b98:	andeq	r8, r1, r4, lsr #11
   17b9c:	andeq	r8, r1, r4, lsl #11
   17ba0:	muleq	r1, ip, r5
   17ba4:	andeq	r8, r1, r8, asr #13
   17ba8:	andeq	r7, r1, r8, asr sp
   17bac:	cmp	r0, #69	; 0x45
   17bb0:	beq	185a4 <__assert_fail@plt+0x6b18>
   17bb4:	ldr	r2, [sp, #72]	; 0x48
   17bb8:	str	lr, [sp, #76]	; 0x4c
   17bbc:	movw	r6, #9363	; 0x2493
   17bc0:	movt	r6, #37449	; 0x9249
   17bc4:	add	lr, r2, #20
   17bc8:	movw	r2, #382	; 0x17e
   17bcc:	ldm	lr, {r3, r8, lr}
   17bd0:	add	r2, lr, r2
   17bd4:	cmp	r3, #0
   17bd8:	str	r3, [sp, #80]	; 0x50
   17bdc:	sub	r2, r2, r8
   17be0:	smmla	r4, r2, r6, r2
   17be4:	asr	r7, r4, #2
   17be8:	add	r4, r7, r4, lsr #31
   17bec:	rsb	r4, r4, r4, lsl #3
   17bf0:	sub	r2, r4, r2
   17bf4:	add	r2, lr, r2
   17bf8:	add	r4, r2, #3
   17bfc:	mvn	r2, #99	; 0x63
   17c00:	movwlt	r2, #300	; 0x12c
   17c04:	cmn	r4, #1
   17c08:	add	r2, r2, r3
   17c0c:	ble	18828 <__assert_fail@plt+0x6d9c>
   17c10:	movw	r7, #365	; 0x16d
   17c14:	tst	r2, #3
   17c18:	bne	17c5c <__assert_fail@plt+0x61d0>
   17c1c:	movw	r7, #34079	; 0x851f
   17c20:	mov	ip, #100	; 0x64
   17c24:	movt	r7, #20971	; 0x51eb
   17c28:	smmul	r7, r2, r7
   17c2c:	asr	r3, r7, #5
   17c30:	add	r3, r3, r7, lsr #31
   17c34:	mls	ip, r3, ip, r2
   17c38:	asr	r3, r7, #7
   17c3c:	add	r3, r3, r7, lsr #31
   17c40:	mov	r7, #400	; 0x190
   17c44:	mls	r2, r3, r7, r2
   17c48:	movw	r7, #365	; 0x16d
   17c4c:	cmp	r2, #0
   17c50:	movweq	r7, #366	; 0x16e
   17c54:	cmp	ip, #0
   17c58:	movwne	r7, #366	; 0x16e
   17c5c:	movw	r3, #382	; 0x17e
   17c60:	add	r2, r8, r7
   17c64:	mov	r7, r6
   17c68:	add	r3, lr, r3
   17c6c:	sub	r2, r3, r2
   17c70:	smmla	r2, r2, r6, r2
   17c74:	asr	r3, r2, #2
   17c78:	add	r2, r3, r2, lsr #31
   17c7c:	movw	r3, #379	; 0x17b
   17c80:	rsb	r2, r2, r2, lsl #3
   17c84:	add	r2, r2, r8
   17c88:	sub	r2, r2, r3
   17c8c:	mov	r3, #1
   17c90:	cmn	r2, #1
   17c94:	eor	r3, r3, r2, lsr #31
   17c98:	movgt	r4, r2
   17c9c:	b	188a8 <__assert_fail@plt+0x6e1c>
   17ca0:	ldr	r2, [sp, #92]	; 0x5c
   17ca4:	mov	r6, #0
   17ca8:	cmp	r0, #69	; 0x45
   17cac:	orr	r2, r7, r2
   17cb0:	str	r2, [sp, #92]	; 0x5c
   17cb4:	beq	185a4 <__assert_fail@plt+0x6b18>
   17cb8:	b	18aa4 <__assert_fail@plt+0x7018>
   17cbc:	ldr	ip, [sp, #84]	; 0x54
   17cc0:	sub	r8, sl, #1
   17cc4:	b	185ac <__assert_fail@plt+0x6b20>
   17cc8:	ldr	r0, [sp, #80]	; 0x50
   17ccc:	ldr	ip, [sp, #84]	; 0x54
   17cd0:	sub	r8, sl, #1
   17cd4:	cmp	r8, r0
   17cd8:	bne	185ac <__assert_fail@plt+0x6b20>
   17cdc:	ldr	r1, [sp, #88]	; 0x58
   17ce0:	subs	r0, r5, #45	; 0x2d
   17ce4:	bicne	r0, r9, r9, asr #31
   17ce8:	cmp	r0, #1
   17cec:	mov	r6, r0
   17cf0:	movls	r6, #1
   17cf4:	sub	r1, r1, lr
   17cf8:	cmp	r6, r1
   17cfc:	bcs	18d10 <__assert_fail@plt+0x7284>
   17d00:	cmp	ip, #0
   17d04:	beq	1877c <__assert_fail@plt+0x6cf0>
   17d08:	mov	r1, #37	; 0x25
   17d0c:	cmp	r0, #2
   17d10:	bcc	177d4 <__assert_fail@plt+0x5d48>
   17d14:	uxtb	r1, r5
   17d18:	sub	r4, r0, #1
   17d1c:	cmp	r1, #48	; 0x30
   17d20:	cmpne	r1, #43	; 0x2b
   17d24:	bne	177ac <__assert_fail@plt+0x5d20>
   17d28:	mov	r0, ip
   17d2c:	mov	r1, #48	; 0x30
   17d30:	b	177b4 <__assert_fail@plt+0x5d28>
   17d34:	mov	r6, #1
   17d38:	b	17d40 <__assert_fail@plt+0x62b4>
   17d3c:	add	r6, r6, #1
   17d40:	ldrb	r2, [sl, r6]
   17d44:	cmp	r2, #58	; 0x3a
   17d48:	beq	17d3c <__assert_fail@plt+0x62b0>
   17d4c:	cmp	r2, #122	; 0x7a
   17d50:	bne	185a4 <__assert_fail@plt+0x6b18>
   17d54:	add	sl, sl, r6
   17d58:	ldr	r3, [sp, #72]	; 0x48
   17d5c:	ldr	r2, [r3, #32]
   17d60:	cmp	r2, #0
   17d64:	blt	18b50 <__assert_fail@plt+0x70c4>
   17d68:	str	lr, [sp, #76]	; 0x4c
   17d6c:	ldr	lr, [r3, #36]	; 0x24
   17d70:	cmp	lr, #0
   17d74:	blt	18a10 <__assert_fail@plt+0x6f84>
   17d78:	ldr	ip, [sp, #84]	; 0x54
   17d7c:	mov	r2, #0
   17d80:	bne	18a18 <__assert_fail@plt+0x6f8c>
   17d84:	ldr	r2, [sp, #36]	; 0x24
   17d88:	ldrb	r2, [r2]
   17d8c:	sub	r2, r2, #45	; 0x2d
   17d90:	clz	r2, r2
   17d94:	lsr	r2, r2, #5
   17d98:	cmp	r6, #3
   17d9c:	bls	18a20 <__assert_fail@plt+0x6f94>
   17da0:	ldr	lr, [sp, #76]	; 0x4c
   17da4:	b	185a8 <__assert_fail@plt+0x6b1c>
   17da8:	cmp	r0, #0
   17dac:	bne	185a4 <__assert_fail@plt+0x6b18>
   17db0:	ldr	r1, [sp, #92]	; 0x5c
   17db4:	mov	r6, #0
   17db8:	orr	r1, r7, r1
   17dbc:	str	r1, [sp, #92]	; 0x5c
   17dc0:	mov	r1, #65	; 0x41
   17dc4:	b	18aa4 <__assert_fail@plt+0x7018>
   17dc8:	cmp	r0, #69	; 0x45
   17dcc:	beq	185a4 <__assert_fail@plt+0x6b18>
   17dd0:	ldr	r1, [sp, #92]	; 0x5c
   17dd4:	mov	r6, #0
   17dd8:	orr	r1, r7, r1
   17ddc:	str	r1, [sp, #92]	; 0x5c
   17de0:	mov	r1, #66	; 0x42
   17de4:	b	18aa4 <__assert_fail@plt+0x7018>
   17de8:	cmp	r0, #69	; 0x45
   17dec:	bne	1890c <__assert_fail@plt+0x6e80>
   17df0:	mov	r6, #0
   17df4:	mov	r1, #67	; 0x43
   17df8:	b	18aa4 <__assert_fail@plt+0x7018>
   17dfc:	cmp	r0, #0
   17e00:	bne	185a4 <__assert_fail@plt+0x6b18>
   17e04:	movw	r4, #62460	; 0xf3fc
   17e08:	movt	r4, #1
   17e0c:	b	17fd4 <__assert_fail@plt+0x6548>
   17e10:	cmp	r0, #0
   17e14:	bne	185a4 <__assert_fail@plt+0x6b18>
   17e18:	movw	r4, #62469	; 0xf405
   17e1c:	cmp	r5, #0
   17e20:	movt	r4, #1
   17e24:	bne	174c4 <__assert_fail@plt+0x5a38>
   17e28:	cmp	r9, #0
   17e2c:	bge	174c4 <__assert_fail@plt+0x5a38>
   17e30:	mov	r5, #43	; 0x2b
   17e34:	mov	r8, #4
   17e38:	b	17fd4 <__assert_fail@plt+0x6548>
   17e3c:	cmp	r0, #69	; 0x45
   17e40:	beq	185a4 <__assert_fail@plt+0x6b18>
   17e44:	ldr	r2, [sp, #48]	; 0x30
   17e48:	ldr	r3, [r2]
   17e4c:	b	18244 <__assert_fail@plt+0x67b8>
   17e50:	cmp	r0, #69	; 0x45
   17e54:	beq	185a4 <__assert_fail@plt+0x6b18>
   17e58:	ldr	r3, [sp, #44]	; 0x2c
   17e5c:	b	18244 <__assert_fail@plt+0x67b8>
   17e60:	cmp	r0, #69	; 0x45
   17e64:	beq	185a4 <__assert_fail@plt+0x6b18>
   17e68:	ldr	r2, [sp, #72]	; 0x48
   17e6c:	ldr	r3, [r2, #4]
   17e70:	b	18244 <__assert_fail@plt+0x67b8>
   17e74:	cmp	r0, #69	; 0x45
   17e78:	beq	185a4 <__assert_fail@plt+0x6b18>
   17e7c:	ldr	r0, [fp, #24]
   17e80:	cmp	r9, #1
   17e84:	mov	r4, #9
   17e88:	mov	r7, #8
   17e8c:	movwlt	r9, #9
   17e90:	cmp	r9, r4
   17e94:	bge	17ebc <__assert_fail@plt+0x6430>
   17e98:	movw	r1, #26215	; 0x6667
   17e9c:	sub	r7, r7, #1
   17ea0:	sub	r4, r4, #1
   17ea4:	movt	r1, #26214	; 0x6666
   17ea8:	smmul	r0, r0, r1
   17eac:	asr	r1, r0, #2
   17eb0:	add	r0, r1, r0, lsr #31
   17eb4:	cmp	r9, r4
   17eb8:	blt	17e98 <__assert_fail@plt+0x640c>
   17ebc:	movw	r1, #26215	; 0x6667
   17ec0:	cmp	r4, #2
   17ec4:	movt	r1, #26214	; 0x6666
   17ec8:	blt	17ee8 <__assert_fail@plt+0x645c>
   17ecc:	smmul	r2, r0, r1
   17ed0:	asr	r3, r2, #2
   17ed4:	add	r2, r3, r2, lsr #31
   17ed8:	add	r2, r2, r2, lsl #2
   17edc:	sub	r2, r0, r2, lsl #1
   17ee0:	cmp	r2, #0
   17ee4:	beq	17e98 <__assert_fail@plt+0x640c>
   17ee8:	cmp	r4, #1
   17eec:	mov	r2, r7
   17ef0:	sub	ip, fp, #48	; 0x30
   17ef4:	blt	17f2c <__assert_fail@plt+0x64a0>
   17ef8:	smmul	r3, r0, r1
   17efc:	asr	r6, r3, #2
   17f00:	add	r3, r6, r3, lsr #31
   17f04:	add	r6, r3, r3, lsl #2
   17f08:	sub	r0, r0, r6, lsl #1
   17f0c:	add	r0, r0, #48	; 0x30
   17f10:	strb	r0, [ip, r2]
   17f14:	sub	r0, r2, #1
   17f18:	add	r2, r2, #1
   17f1c:	cmp	r2, #1
   17f20:	mov	r2, r0
   17f24:	mov	r0, r3
   17f28:	bgt	17ef8 <__assert_fail@plt+0x646c>
   17f2c:	ldr	r0, [sp, #88]	; 0x58
   17f30:	cmp	r5, #0
   17f34:	movweq	r5, #48	; 0x30
   17f38:	sub	r8, r0, lr
   17f3c:	cmp	r4, r8
   17f40:	bcs	18d10 <__assert_fail@plt+0x7284>
   17f44:	ldr	r6, [sp, #84]	; 0x54
   17f48:	mov	ip, #0
   17f4c:	cmp	r6, #0
   17f50:	beq	175a4 <__assert_fail@plt+0x5b18>
   17f54:	ldr	r0, [sp, #92]	; 0x5c
   17f58:	tst	r0, #1
   17f5c:	beq	17588 <__assert_fail@plt+0x5afc>
   17f60:	cmp	r4, #0
   17f64:	beq	175a0 <__assert_fail@plt+0x5b14>
   17f68:	str	lr, [sp, #76]	; 0x4c
   17f6c:	bl	11858 <__ctype_toupper_loc@plt>
   17f70:	ldr	lr, [sp, #76]	; 0x4c
   17f74:	sub	r3, fp, #48	; 0x30
   17f78:	ldrb	r1, [r3, r7]
   17f7c:	ldr	r2, [r0]
   17f80:	ldr	r1, [r2, r1, lsl #2]
   17f84:	strb	r1, [r6, r7]
   17f88:	sub	r7, r7, #1
   17f8c:	cmn	r7, #1
   17f90:	bne	17f78 <__assert_fail@plt+0x64ec>
   17f94:	b	175a0 <__assert_fail@plt+0x5b14>
   17f98:	mov	r6, #1
   17f9c:	ldr	r2, [sp, #92]	; 0x5c
   17fa0:	eor	r1, r7, #1
   17fa4:	orr	r6, r7, r6
   17fa8:	and	r2, r2, r1
   17fac:	mov	r1, #112	; 0x70
   17fb0:	str	r2, [sp, #92]	; 0x5c
   17fb4:	b	18aa4 <__assert_fail@plt+0x7018>
   17fb8:	cmp	r0, #69	; 0x45
   17fbc:	beq	185a4 <__assert_fail@plt+0x6b18>
   17fc0:	ldr	r2, [sp, #72]	; 0x48
   17fc4:	ldr	r3, [r2]
   17fc8:	b	18244 <__assert_fail@plt+0x67b8>
   17fcc:	movw	r4, #62484	; 0xf414
   17fd0:	movt	r4, #1
   17fd4:	ldr	r0, [sp, #92]	; 0x5c
   17fd8:	mvn	r1, #0
   17fdc:	mov	r2, r4
   17fe0:	and	r0, r0, #1
   17fe4:	str	r0, [sp, #92]	; 0x5c
   17fe8:	stm	sp, {r0, r5, r8}
   17fec:	ldr	r0, [fp, #20]
   17ff0:	str	lr, [sp, #76]	; 0x4c
   17ff4:	ldr	r3, [sp, #72]	; 0x48
   17ff8:	str	r0, [sp, #12]
   17ffc:	ldr	r0, [fp, #24]
   18000:	str	r0, [sp, #16]
   18004:	mov	r0, #0
   18008:	bl	173d0 <__assert_fail@plt+0x5944>
   1800c:	mov	r7, r0
   18010:	subs	r0, r5, #45	; 0x2d
   18014:	ldr	lr, [sp, #76]	; 0x4c
   18018:	ldr	r1, [sp, #88]	; 0x58
   1801c:	movne	r0, r9
   18020:	cmp	r9, #0
   18024:	mov	r6, r7
   18028:	movwlt	r0, #0
   1802c:	cmp	r0, r7
   18030:	movhi	r6, r0
   18034:	sub	r9, r1, lr
   18038:	cmp	r6, r9
   1803c:	bcs	18d10 <__assert_fail@plt+0x7284>
   18040:	ldr	ip, [sp, #84]	; 0x54
   18044:	cmp	ip, #0
   18048:	beq	1877c <__assert_fail@plt+0x6cf0>
   1804c:	cmp	r0, r7
   18050:	bls	186dc <__assert_fail@plt+0x6c50>
   18054:	cmp	r5, #48	; 0x30
   18058:	sub	r2, r0, r7
   1805c:	cmpne	r5, #43	; 0x2b
   18060:	str	r2, [sp, #80]	; 0x50
   18064:	bne	18c74 <__assert_fail@plt+0x71e8>
   18068:	mov	r0, ip
   1806c:	mov	r1, #48	; 0x30
   18070:	b	18c7c <__assert_fail@plt+0x71f0>
   18074:	cmp	r0, #69	; 0x45
   18078:	beq	185a4 <__assert_fail@plt+0x6b18>
   1807c:	ldr	r3, [sp, #72]	; 0x48
   18080:	ldr	r2, [r3, #24]
   18084:	ldr	r3, [r3, #28]
   18088:	add	r3, r3, #7
   1808c:	sub	r2, r3, r2
   18090:	movw	r3, #9363	; 0x2493
   18094:	movt	r3, #37449	; 0x9249
   18098:	smmla	r2, r2, r3, r2
   1809c:	b	180e0 <__assert_fail@plt+0x6654>
   180a0:	cmp	r0, #69	; 0x45
   180a4:	beq	185a4 <__assert_fail@plt+0x6b18>
   180a8:	ldr	r3, [sp, #72]	; 0x48
   180ac:	movw	r7, #9363	; 0x2493
   180b0:	movt	r7, #37449	; 0x9249
   180b4:	ldr	r2, [r3, #24]
   180b8:	ldr	r3, [r3, #28]
   180bc:	add	r2, r2, #6
   180c0:	smmla	r6, r2, r7, r2
   180c4:	asr	r4, r6, #2
   180c8:	add	r6, r4, r6, lsr #31
   180cc:	rsb	r6, r6, r6, lsl #3
   180d0:	sub	r2, r6, r2
   180d4:	add	r2, r3, r2
   180d8:	add	r2, r2, #7
   180dc:	smmla	r2, r2, r7, r2
   180e0:	asr	r3, r2, #2
   180e4:	add	r3, r3, r2, lsr #31
   180e8:	b	18244 <__assert_fail@plt+0x67b8>
   180ec:	cmp	r0, #79	; 0x4f
   180f0:	beq	185a4 <__assert_fail@plt+0x6b18>
   180f4:	mov	r6, #0
   180f8:	mov	r1, #88	; 0x58
   180fc:	b	18aa4 <__assert_fail@plt+0x7018>
   18100:	cmp	r0, #69	; 0x45
   18104:	beq	18a9c <__assert_fail@plt+0x7010>
   18108:	cmp	r0, #79	; 0x4f
   1810c:	beq	185a4 <__assert_fail@plt+0x6b18>
   18110:	ldr	r2, [sp, #72]	; 0x48
   18114:	movw	r7, #63636	; 0xf894
   18118:	movt	r7, #65535	; 0xffff
   1811c:	ldr	r3, [r2, #20]
   18120:	mov	r2, #0
   18124:	cmp	r3, r7
   18128:	movw	r7, #1900	; 0x76c
   1812c:	add	r3, r3, r7
   18130:	movwlt	r2, #1
   18134:	mov	r7, #4
   18138:	b	1895c <__assert_fail@plt+0x6ed0>
   1813c:	ldr	r0, [sp, #36]	; 0x24
   18140:	ldr	r8, [sp, #92]	; 0x5c
   18144:	subs	r6, r5, #45	; 0x2d
   18148:	str	lr, [sp, #76]	; 0x4c
   1814c:	bicne	r6, r9, r9, asr #31
   18150:	bl	118ac <strlen@plt>
   18154:	ldr	lr, [sp, #76]	; 0x4c
   18158:	mov	r9, r0
   1815c:	cmp	r6, r0
   18160:	mov	r4, r0
   18164:	ldr	r0, [sp, #88]	; 0x58
   18168:	movhi	r4, r6
   1816c:	sub	r0, r0, lr
   18170:	cmp	r4, r0
   18174:	bcs	18d10 <__assert_fail@plt+0x7284>
   18178:	ldr	r0, [sp, #84]	; 0x54
   1817c:	cmp	r0, #0
   18180:	beq	18a08 <__assert_fail@plt+0x6f7c>
   18184:	cmp	r6, r9
   18188:	mov	ip, r0
   1818c:	bls	17604 <__assert_fail@plt+0x5b78>
   18190:	uxtb	r1, r5
   18194:	sub	r2, r6, r9
   18198:	cmp	r1, #48	; 0x30
   1819c:	cmpne	r1, #43	; 0x2b
   181a0:	bne	175ec <__assert_fail@plt+0x5b60>
   181a4:	mov	r1, #48	; 0x30
   181a8:	b	175f0 <__assert_fail@plt+0x5b64>
   181ac:	cmp	r0, #0
   181b0:	bne	185a4 <__assert_fail@plt+0x6b18>
   181b4:	ldr	r1, [sp, #92]	; 0x5c
   181b8:	mov	r6, #0
   181bc:	orr	r1, r7, r1
   181c0:	str	r1, [sp, #92]	; 0x5c
   181c4:	mov	r1, #97	; 0x61
   181c8:	b	18aa4 <__assert_fail@plt+0x7018>
   181cc:	cmp	r0, #79	; 0x4f
   181d0:	beq	185a4 <__assert_fail@plt+0x6b18>
   181d4:	mov	r6, #0
   181d8:	mov	r1, #99	; 0x63
   181dc:	b	18aa4 <__assert_fail@plt+0x7018>
   181e0:	cmp	r0, #69	; 0x45
   181e4:	beq	185a4 <__assert_fail@plt+0x6b18>
   181e8:	ldr	r2, [sp, #40]	; 0x28
   181ec:	ldr	r3, [r2]
   181f0:	b	18244 <__assert_fail@plt+0x67b8>
   181f4:	ldr	r2, [sp, #40]	; 0x28
   181f8:	cmp	r0, #69	; 0x45
   181fc:	bne	18228 <__assert_fail@plt+0x679c>
   18200:	b	185a4 <__assert_fail@plt+0x6b18>
   18204:	cmp	r0, #69	; 0x45
   18208:	beq	185a4 <__assert_fail@plt+0x6b18>
   1820c:	ldr	r2, [sp, #72]	; 0x48
   18210:	mov	r7, #3
   18214:	ldr	r3, [r2, #28]
   18218:	b	1838c <__assert_fail@plt+0x6900>
   1821c:	ldr	r2, [sp, #48]	; 0x30
   18220:	cmp	r0, #69	; 0x45
   18224:	beq	185a4 <__assert_fail@plt+0x6b18>
   18228:	ldr	r3, [r2]
   1822c:	b	1823c <__assert_fail@plt+0x67b0>
   18230:	ldr	r3, [sp, #44]	; 0x2c
   18234:	cmp	r0, #69	; 0x45
   18238:	beq	185a4 <__assert_fail@plt+0x6b18>
   1823c:	cmp	r5, #0
   18240:	movweq	r5, #95	; 0x5f
   18244:	mov	r2, #2
   18248:	str	r2, [sp, #80]	; 0x50
   1824c:	ldr	ip, [sp, #84]	; 0x54
   18250:	lsr	r2, r3, #31
   18254:	cmp	r2, #0
   18258:	mov	r7, #0
   1825c:	mov	r4, #0
   18260:	movwne	r2, #1
   18264:	cmp	r0, #79	; 0x4f
   18268:	moveq	r6, #0
   1826c:	cmpeq	r2, #0
   18270:	beq	18aa4 <__assert_fail@plt+0x7018>
   18274:	ldr	r8, [sp, #64]	; 0x40
   18278:	cmp	r2, #0
   1827c:	rsbne	r3, r3, #0
   18280:	tst	r7, #1
   18284:	asr	r7, r7, #1
   18288:	movne	r0, #58	; 0x3a
   1828c:	strbne	r0, [r8, #-1]!
   18290:	movw	r0, #52429	; 0xcccd
   18294:	cmp	r3, #9
   18298:	movt	r0, #52428	; 0xcccc
   1829c:	umull	r0, r1, r3, r0
   182a0:	lsr	r0, r1, #3
   182a4:	add	r1, r0, r0, lsl #2
   182a8:	sub	r1, r3, r1, lsl #1
   182ac:	mov	r3, r0
   182b0:	orr	r1, r1, #48	; 0x30
   182b4:	strb	r1, [r8, #-1]!
   182b8:	bhi	18280 <__assert_fail@plt+0x67f4>
   182bc:	cmp	r7, #0
   182c0:	mov	r3, r0
   182c4:	bne	18280 <__assert_fail@plt+0x67f4>
   182c8:	ldr	r3, [sp, #80]	; 0x50
   182cc:	cmp	r9, #0
   182d0:	movge	r3, r9
   182d4:	cmp	r4, #0
   182d8:	movwne	r4, #43	; 0x2b
   182dc:	cmp	r5, #0
   182e0:	movweq	r5, #48	; 0x30
   182e4:	ldr	r1, [sp, #64]	; 0x40
   182e8:	cmp	r2, #0
   182ec:	mov	r0, r3
   182f0:	movwne	r4, #45	; 0x2d
   182f4:	cmp	r4, #0
   182f8:	subne	r0, r0, #1
   182fc:	sub	r9, r1, r8
   18300:	sub	r6, r0, r9
   18304:	mov	r0, r4
   18308:	cmp	r6, #1
   1830c:	movwlt	r6, #0
   18310:	subs	r4, r5, #45	; 0x2d
   18314:	moveq	r6, r4
   18318:	cmp	r0, #0
   1831c:	beq	18368 <__assert_fail@plt+0x68dc>
   18320:	mov	r7, r0
   18324:	cmp	r5, #95	; 0x5f
   18328:	bne	18370 <__assert_fail@plt+0x68e4>
   1832c:	cmp	ip, #0
   18330:	beq	186e8 <__assert_fail@plt+0x6c5c>
   18334:	mov	r0, ip
   18338:	mov	r1, #32
   1833c:	mov	r2, r6
   18340:	str	sl, [sp, #80]	; 0x50
   18344:	str	lr, [sp, #76]	; 0x4c
   18348:	mov	sl, r3
   1834c:	bl	11918 <memset@plt>
   18350:	ldr	ip, [sp, #84]	; 0x54
   18354:	mov	r3, sl
   18358:	ldr	lr, [sp, #76]	; 0x4c
   1835c:	ldr	sl, [sp, #80]	; 0x50
   18360:	add	ip, ip, r6
   18364:	b	186ec <__assert_fail@plt+0x6c60>
   18368:	ldr	r1, [sp, #92]	; 0x5c
   1836c:	b	1871c <__assert_fail@plt+0x6c90>
   18370:	ldr	r1, [sp, #92]	; 0x5c
   18374:	b	186f8 <__assert_fail@plt+0x6c6c>
   18378:	cmp	r0, #69	; 0x45
   1837c:	beq	185a4 <__assert_fail@plt+0x6b18>
   18380:	ldr	r2, [sp, #72]	; 0x48
   18384:	mov	r7, #2
   18388:	ldr	r3, [r2, #16]
   1838c:	mov	r2, #0
   18390:	cmn	r3, #1
   18394:	add	r3, r3, #1
   18398:	movwlt	r2, #1
   1839c:	ldr	ip, [sp, #84]	; 0x54
   183a0:	str	r7, [sp, #80]	; 0x50
   183a4:	b	18254 <__assert_fail@plt+0x67c8>
   183a8:	ldr	r1, [sp, #88]	; 0x58
   183ac:	subs	r0, r5, #45	; 0x2d
   183b0:	bicne	r0, r9, r9, asr #31
   183b4:	cmp	r0, #1
   183b8:	mov	r6, r0
   183bc:	movls	r6, #1
   183c0:	sub	r1, r1, lr
   183c4:	cmp	r6, r1
   183c8:	bcs	18d10 <__assert_fail@plt+0x7284>
   183cc:	ldr	ip, [sp, #84]	; 0x54
   183d0:	mov	r4, #-2147483648	; 0x80000000
   183d4:	cmp	ip, #0
   183d8:	beq	18784 <__assert_fail@plt+0x6cf8>
   183dc:	cmp	r0, #2
   183e0:	bcc	17708 <__assert_fail@plt+0x5c7c>
   183e4:	uxtb	r1, r5
   183e8:	sub	r4, r0, #1
   183ec:	cmp	r1, #48	; 0x30
   183f0:	cmpne	r1, #43	; 0x2b
   183f4:	bne	176e0 <__assert_fail@plt+0x5c54>
   183f8:	mov	r0, ip
   183fc:	mov	r1, #48	; 0x30
   18400:	b	176e8 <__assert_fail@plt+0x5c5c>
   18404:	ldr	r2, [sp, #72]	; 0x48
   18408:	ldr	ip, [sp, #84]	; 0x54
   1840c:	mov	r3, #11
   18410:	mov	r7, #1
   18414:	ldr	r2, [r2, #16]
   18418:	mul	r2, r2, r3
   1841c:	mov	r3, #1
   18420:	str	r3, [sp, #80]	; 0x50
   18424:	add	r3, r7, r2, asr #5
   18428:	mov	r2, #0
   1842c:	b	18254 <__assert_fail@plt+0x67c8>
   18430:	ldr	r2, [sp, #72]	; 0x48
   18434:	mov	r0, #28
   18438:	add	r1, sp, #96	; 0x60
   1843c:	str	lr, [sp, #76]	; 0x4c
   18440:	mov	r4, r1
   18444:	mov	r3, r2
   18448:	add	r2, r2, #16
   1844c:	vld1.32	{d16-d17}, [r3], r0
   18450:	vld1.32	{d18-d19}, [r2]
   18454:	add	r2, r1, #16
   18458:	vld1.32	{d20-d21}, [r3]
   1845c:	vst1.64	{d16-d17}, [r4], r0
   18460:	mvn	r0, #0
   18464:	vst1.64	{d18-d19}, [r2]
   18468:	vst1.32	{d20-d21}, [r4]
   1846c:	str	r0, [r4]
   18470:	ldr	r0, [fp, #20]
   18474:	bl	1b124 <__assert_fail@plt+0x9698>
   18478:	ldr	r1, [r4]
   1847c:	cmp	r1, #0
   18480:	blt	18d2c <__assert_fail@plt+0x72a0>
   18484:	ldr	r1, [sp, #24]
   18488:	lsr	r2, r0, #31
   1848c:	mov	r3, r0
   18490:	movw	r7, #26215	; 0x6667
   18494:	cmp	r0, #0
   18498:	movt	r7, #26214	; 0x6666
   1849c:	smmul	r7, r3, r7
   184a0:	asr	r6, r7, #2
   184a4:	add	r7, r6, r7, lsr #31
   184a8:	add	r6, r7, r7, lsl #2
   184ac:	sub	r6, r3, r6, lsl #1
   184b0:	add	r3, r3, #9
   184b4:	rsblt	r6, r6, #0
   184b8:	cmp	r3, #18
   184bc:	mov	r3, r7
   184c0:	add	r6, r6, #48	; 0x30
   184c4:	strb	r6, [r1], #-1
   184c8:	bhi	18490 <__assert_fail@plt+0x6a04>
   184cc:	ldr	lr, [sp, #76]	; 0x4c
   184d0:	ldr	ip, [sp, #84]	; 0x54
   184d4:	cmp	r9, #0
   184d8:	add	r8, r1, #1
   184dc:	mov	r4, #0
   184e0:	movwlt	r9, #1
   184e4:	cmp	r5, #0
   184e8:	movweq	r5, #48	; 0x30
   184ec:	mov	r3, r9
   184f0:	b	182e4 <__assert_fail@plt+0x6858>
   184f4:	ldr	r1, [sp, #88]	; 0x58
   184f8:	subs	r0, r5, #45	; 0x2d
   184fc:	bicne	r0, r9, r9, asr #31
   18500:	cmp	r0, #1
   18504:	mov	r6, r0
   18508:	movls	r6, #1
   1850c:	sub	r1, r1, lr
   18510:	cmp	r6, r1
   18514:	bcs	18d10 <__assert_fail@plt+0x7284>
   18518:	ldr	ip, [sp, #84]	; 0x54
   1851c:	mov	r4, #-2147483648	; 0x80000000
   18520:	cmp	ip, #0
   18524:	beq	18784 <__assert_fail@plt+0x6cf8>
   18528:	cmp	r0, #2
   1852c:	bcc	17738 <__assert_fail@plt+0x5cac>
   18530:	uxtb	r1, r5
   18534:	sub	r4, r0, #1
   18538:	cmp	r1, #48	; 0x30
   1853c:	cmpne	r1, #43	; 0x2b
   18540:	bne	17710 <__assert_fail@plt+0x5c84>
   18544:	mov	r0, ip
   18548:	mov	r1, #48	; 0x30
   1854c:	b	17718 <__assert_fail@plt+0x5c8c>
   18550:	ldr	r2, [sp, #72]	; 0x48
   18554:	movw	r3, #9363	; 0x2493
   18558:	movt	r3, #37449	; 0x9249
   1855c:	ldr	r2, [r2, #24]
   18560:	add	r2, r2, #6
   18564:	smmla	r3, r2, r3, r2
   18568:	asr	r7, r3, #2
   1856c:	add	r3, r7, r3, lsr #31
   18570:	rsb	r3, r3, r3, lsl #3
   18574:	sub	r2, r2, r3
   18578:	add	r3, r2, #1
   1857c:	mov	r2, #1
   18580:	b	18248 <__assert_fail@plt+0x67bc>
   18584:	cmp	r0, #69	; 0x45
   18588:	beq	185a4 <__assert_fail@plt+0x6b18>
   1858c:	ldr	r2, [sp, #72]	; 0x48
   18590:	ldr	r3, [r2, #24]
   18594:	mov	r2, #1
   18598:	b	18248 <__assert_fail@plt+0x67bc>
   1859c:	cmp	r0, #79	; 0x4f
   185a0:	bne	18968 <__assert_fail@plt+0x6edc>
   185a4:	ldr	ip, [sp, #84]	; 0x54
   185a8:	mov	r8, sl
   185ac:	ldr	r1, [sp, #80]	; 0x50
   185b0:	subs	r7, r5, #45	; 0x2d
   185b4:	bicne	r7, r9, r9, asr #31
   185b8:	sub	r0, r8, r1
   185bc:	add	r6, r0, #1
   185c0:	ldr	r0, [sp, #88]	; 0x58
   185c4:	cmp	r7, r6
   185c8:	mov	r4, r6
   185cc:	movhi	r4, r7
   185d0:	sub	r0, r0, lr
   185d4:	cmp	r4, r0
   185d8:	bcs	18d10 <__assert_fail@plt+0x7284>
   185dc:	cmp	ip, #0
   185e0:	beq	18614 <__assert_fail@plt+0x6b88>
   185e4:	cmp	r7, r6
   185e8:	mov	r9, ip
   185ec:	bls	18640 <__assert_fail@plt+0x6bb4>
   185f0:	uxtb	r0, r5
   185f4:	mov	sl, lr
   185f8:	sub	r9, r7, r6
   185fc:	cmp	r0, #48	; 0x30
   18600:	cmpne	r0, #43	; 0x2b
   18604:	bne	1861c <__assert_fail@plt+0x6b90>
   18608:	mov	r0, ip
   1860c:	mov	r1, #48	; 0x30
   18610:	b	18624 <__assert_fail@plt+0x6b98>
   18614:	mov	ip, #0
   18618:	b	186b8 <__assert_fail@plt+0x6c2c>
   1861c:	mov	r0, ip
   18620:	mov	r1, #32
   18624:	mov	r2, r9
   18628:	mov	r5, ip
   1862c:	bl	11918 <memset@plt>
   18630:	ldr	r1, [sp, #80]	; 0x50
   18634:	add	r9, r5, r9
   18638:	mov	lr, sl
   1863c:	mov	ip, r5
   18640:	ldr	r0, [sp, #92]	; 0x5c
   18644:	tst	r0, #1
   18648:	beq	186a0 <__assert_fail@plt+0x6c14>
   1864c:	cmp	r6, #0
   18650:	beq	186b4 <__assert_fail@plt+0x6c28>
   18654:	add	r0, r8, #1
   18658:	sub	r5, r1, r8
   1865c:	mov	sl, lr
   18660:	sub	r0, r0, r1
   18664:	cmp	r7, r0
   18668:	movhi	r0, r7
   1866c:	add	r0, ip, r0
   18670:	sub	r7, r0, #1
   18674:	bl	11858 <__ctype_toupper_loc@plt>
   18678:	ldr	r3, [sp, #80]	; 0x50
   1867c:	mov	lr, sl
   18680:	ldrb	r1, [r3, -r5]
   18684:	ldr	r2, [r0]
   18688:	add	r5, r5, #1
   1868c:	cmp	r5, #1
   18690:	ldr	r1, [r2, r1, lsl #2]
   18694:	strb	r1, [r7], #-1
   18698:	bne	18680 <__assert_fail@plt+0x6bf4>
   1869c:	b	186b4 <__assert_fail@plt+0x6c28>
   186a0:	mov	r0, r9
   186a4:	mov	r2, r6
   186a8:	mov	r5, lr
   186ac:	bl	11708 <memcpy@plt>
   186b0:	mov	lr, r5
   186b4:	add	ip, r9, r6
   186b8:	add	lr, r4, lr
   186bc:	mov	sl, r8
   186c0:	mov	r4, #-2147483648	; 0x80000000
   186c4:	b	18cd4 <__assert_fail@plt+0x7248>
   186c8:	cmp	r0, #69	; 0x45
   186cc:	bne	18974 <__assert_fail@plt+0x6ee8>
   186d0:	mov	r6, #0
   186d4:	mov	r1, #121	; 0x79
   186d8:	b	18aa4 <__assert_fail@plt+0x7018>
   186dc:	ldr	r3, [sp, #72]	; 0x48
   186e0:	ldr	r0, [sp, #92]	; 0x5c
   186e4:	b	18c98 <__assert_fail@plt+0x720c>
   186e8:	mov	ip, #0
   186ec:	ldr	r1, [sp, #92]	; 0x5c
   186f0:	sub	r3, r3, r6
   186f4:	add	lr, r6, lr
   186f8:	ldr	r0, [sp, #88]	; 0x58
   186fc:	sub	r0, r0, lr
   18700:	cmp	r0, #2
   18704:	bcc	18d10 <__assert_fail@plt+0x7284>
   18708:	cmp	ip, #0
   1870c:	sub	r3, r3, #1
   18710:	add	lr, lr, #1
   18714:	strbne	r7, [ip], #1
   18718:	moveq	ip, #0
   1871c:	ldr	r0, [sp, #88]	; 0x58
   18720:	cmp	r5, #45	; 0x2d
   18724:	mov	r6, r9
   18728:	bicne	r4, r3, r3, asr #31
   1872c:	cmp	r4, r9
   18730:	movhi	r6, r4
   18734:	sub	r0, r0, lr
   18738:	cmp	r6, r0
   1873c:	bcs	18d10 <__assert_fail@plt+0x7284>
   18740:	cmp	ip, #0
   18744:	beq	1877c <__assert_fail@plt+0x6cf0>
   18748:	str	sl, [sp, #80]	; 0x50
   1874c:	cmp	r4, r9
   18750:	mov	sl, ip
   18754:	bls	187b0 <__assert_fail@plt+0x6d24>
   18758:	cmp	r5, #48	; 0x30
   1875c:	mov	r7, lr
   18760:	sub	sl, r4, r9
   18764:	str	r1, [sp, #92]	; 0x5c
   18768:	cmpne	r5, #43	; 0x2b
   1876c:	bne	1878c <__assert_fail@plt+0x6d00>
   18770:	mov	r0, ip
   18774:	mov	r1, #48	; 0x30
   18778:	b	18794 <__assert_fail@plt+0x6d08>
   1877c:	mov	ip, #0
   18780:	b	18ccc <__assert_fail@plt+0x7240>
   18784:	mov	ip, #0
   18788:	b	18cd0 <__assert_fail@plt+0x7244>
   1878c:	mov	r0, ip
   18790:	mov	r1, #32
   18794:	mov	r2, sl
   18798:	mov	r5, ip
   1879c:	bl	11918 <memset@plt>
   187a0:	ldr	r1, [sp, #92]	; 0x5c
   187a4:	add	sl, r5, sl
   187a8:	mov	lr, r7
   187ac:	mov	ip, r5
   187b0:	tst	r1, #1
   187b4:	beq	18804 <__assert_fail@plt+0x6d78>
   187b8:	cmp	r9, #0
   187bc:	beq	1881c <__assert_fail@plt+0x6d90>
   187c0:	ldr	r0, [sp, #28]
   187c4:	cmp	r4, r9
   187c8:	sub	r7, r8, #1
   187cc:	movls	r4, r9
   187d0:	add	r5, r0, r8
   187d4:	add	r0, ip, r4
   187d8:	mov	r8, lr
   187dc:	sub	r4, r0, #1
   187e0:	bl	11858 <__ctype_toupper_loc@plt>
   187e4:	mov	lr, r8
   187e8:	ldrb	r1, [r7, -r5]
   187ec:	ldr	r2, [r0]
   187f0:	adds	r5, r5, #1
   187f4:	ldr	r1, [r2, r1, lsl #2]
   187f8:	strb	r1, [r4], #-1
   187fc:	bne	187e8 <__assert_fail@plt+0x6d5c>
   18800:	b	1881c <__assert_fail@plt+0x6d90>
   18804:	mov	r0, sl
   18808:	mov	r1, r8
   1880c:	mov	r2, r9
   18810:	mov	r4, lr
   18814:	bl	11708 <memcpy@plt>
   18818:	mov	lr, r4
   1881c:	add	ip, sl, r9
   18820:	ldr	sl, [sp, #80]	; 0x50
   18824:	b	18ccc <__assert_fail@plt+0x7240>
   18828:	sub	r2, r2, #1
   1882c:	movw	r4, #365	; 0x16d
   18830:	tst	r2, #3
   18834:	bne	18878 <__assert_fail@plt+0x6dec>
   18838:	movw	r4, #34079	; 0x851f
   1883c:	movt	r4, #20971	; 0x51eb
   18840:	smmul	r4, r2, r4
   18844:	asr	r7, r4, #5
   18848:	add	r3, r7, r4, lsr #31
   1884c:	mov	r7, #100	; 0x64
   18850:	mls	r3, r3, r7, r2
   18854:	asr	r7, r4, #7
   18858:	add	r4, r7, r4, lsr #31
   1885c:	mov	r7, #400	; 0x190
   18860:	mls	r2, r4, r7, r2
   18864:	movw	r4, #365	; 0x16d
   18868:	cmp	r2, #0
   1886c:	movweq	r4, #366	; 0x16e
   18870:	cmp	r3, #0
   18874:	movwne	r4, #366	; 0x16e
   18878:	add	r2, r4, lr
   1887c:	movw	r4, #382	; 0x17e
   18880:	mov	r7, r6
   18884:	sub	r3, r4, r8
   18888:	add	r2, r3, r2
   1888c:	smmla	r2, r2, r6, r2
   18890:	asr	r4, r2, #2
   18894:	add	r2, r4, r2, lsr #31
   18898:	rsb	r2, r2, r2, lsl #3
   1889c:	sub	r2, r2, r3
   188a0:	mvn	r3, #0
   188a4:	add	r4, r2, #3
   188a8:	ldr	ip, [sp, #84]	; 0x54
   188ac:	ldr	lr, [sp, #80]	; 0x50
   188b0:	cmp	r1, #71	; 0x47
   188b4:	beq	189b8 <__assert_fail@plt+0x6f2c>
   188b8:	cmp	r1, #103	; 0x67
   188bc:	bne	189e8 <__assert_fail@plt+0x6f5c>
   188c0:	movw	r2, #34079	; 0x851f
   188c4:	movt	r2, #20971	; 0x51eb
   188c8:	smmul	r7, lr, r2
   188cc:	asr	r6, r7, #5
   188d0:	add	r7, r6, r7, lsr #31
   188d4:	mov	r6, #100	; 0x64
   188d8:	mls	r7, r7, r6, lr
   188dc:	add	r7, r3, r7
   188e0:	smmul	r2, r7, r2
   188e4:	asr	r4, r2, #5
   188e8:	add	r2, r4, r2, lsr #31
   188ec:	mls	r7, r2, r6, r7
   188f0:	mov	r2, #2
   188f4:	str	r2, [sp, #80]	; 0x50
   188f8:	mov	r2, #0
   188fc:	cmn	r7, #1
   18900:	ble	174d0 <__assert_fail@plt+0x5a44>
   18904:	mov	r3, r7
   18908:	b	174e8 <__assert_fail@plt+0x5a5c>
   1890c:	ldr	r2, [sp, #72]	; 0x48
   18910:	movw	r6, #63636	; 0xf894
   18914:	mov	r3, #0
   18918:	mvn	r4, #98	; 0x62
   1891c:	movt	r6, #65535	; 0xffff
   18920:	ldr	r7, [r2, #20]
   18924:	mov	r2, #0
   18928:	cmp	r7, r6
   1892c:	movwge	r3, #1
   18930:	cmp	r7, r6
   18934:	and	r3, r3, r7, lsr #31
   18938:	movwlt	r2, #1
   1893c:	smlabb	r3, r3, r4, r7
   18940:	movw	r4, #34079	; 0x851f
   18944:	mov	r7, #2
   18948:	movt	r4, #20971	; 0x51eb
   1894c:	smmul	r3, r3, r4
   18950:	asr	r4, r3, #5
   18954:	add	r3, r4, r3, lsr #31
   18958:	add	r3, r3, #19
   1895c:	ldr	ip, [sp, #84]	; 0x54
   18960:	str	r7, [sp, #80]	; 0x50
   18964:	b	174ec <__assert_fail@plt+0x5a60>
   18968:	mov	r6, #0
   1896c:	mov	r1, #120	; 0x78
   18970:	b	18aa4 <__assert_fail@plt+0x7018>
   18974:	ldr	r2, [sp, #72]	; 0x48
   18978:	ldr	r7, [r2, #20]
   1897c:	movw	r2, #34079	; 0x851f
   18980:	movt	r2, #20971	; 0x51eb
   18984:	smmul	r2, r7, r2
   18988:	asr	r3, r2, #5
   1898c:	add	r2, r3, r2, lsr #31
   18990:	mov	r3, #100	; 0x64
   18994:	mls	r6, r2, r3, r7
   18998:	mov	r2, #0
   1899c:	mov	r3, #2
   189a0:	cmn	r6, #1
   189a4:	ble	1753c <__assert_fail@plt+0x5ab0>
   189a8:	ldr	ip, [sp, #84]	; 0x54
   189ac:	str	r3, [sp, #80]	; 0x50
   189b0:	mov	r3, r6
   189b4:	b	174ec <__assert_fail@plt+0x5a60>
   189b8:	movw	r2, #63636	; 0xf894
   189bc:	movt	r2, #65535	; 0xffff
   189c0:	sub	r7, r2, r3
   189c4:	add	r3, lr, r3
   189c8:	mov	r2, #0
   189cc:	cmp	lr, r7
   189d0:	movw	r7, #1900	; 0x76c
   189d4:	add	r3, r3, r7
   189d8:	mov	r7, #4
   189dc:	movwlt	r2, #1
   189e0:	str	r7, [sp, #80]	; 0x50
   189e4:	b	174e8 <__assert_fail@plt+0x5a5c>
   189e8:	smmla	r2, r4, r7, r4
   189ec:	ldr	lr, [sp, #76]	; 0x4c
   189f0:	asr	r3, r2, #2
   189f4:	add	r2, r3, r2, lsr #31
   189f8:	add	r3, r2, #1
   189fc:	mov	r2, #2
   18a00:	str	r2, [sp, #80]	; 0x50
   18a04:	b	18250 <__assert_fail@plt+0x67c4>
   18a08:	mov	ip, #0
   18a0c:	b	176d4 <__assert_fail@plt+0x5c48>
   18a10:	ldr	ip, [sp, #84]	; 0x54
   18a14:	mov	r2, #1
   18a18:	cmp	r6, #3
   18a1c:	bhi	17da0 <__assert_fail@plt+0x6314>
   18a20:	mov	r8, ip
   18a24:	movw	ip, #34953	; 0x8889
   18a28:	movt	ip, #34952	; 0x8888
   18a2c:	smmla	r4, lr, ip, lr
   18a30:	asr	r3, r4, #5
   18a34:	add	r4, r3, r4, lsr #31
   18a38:	smmla	r3, r4, ip, r4
   18a3c:	asr	r7, r3, #5
   18a40:	add	r3, r7, r3, lsr #31
   18a44:	rsb	r3, r3, r3, lsl #4
   18a48:	sub	ip, r4, r3, lsl #2
   18a4c:	movw	r3, #46021	; 0xb3c5
   18a50:	rsb	r4, r4, r4, lsl #4
   18a54:	movt	r3, #37282	; 0x91a2
   18a58:	smmla	r3, lr, r3, lr
   18a5c:	asr	r7, r3, #11
   18a60:	add	r3, r7, r3, lsr #31
   18a64:	sub	r7, lr, r4, lsl #2
   18a68:	add	r4, pc, #0
   18a6c:	ldr	pc, [r4, r6, lsl #2]
   18a70:	andeq	r8, r1, r0, lsl #21
   18a74:	andeq	r7, r1, ip, asr #14
   18a78:	andeq	r7, r1, r4, ror #10
   18a7c:	andeq	r7, r1, ip, asr r5
   18a80:	mov	r7, #100	; 0x64
   18a84:	mla	r3, r3, r7, ip
   18a88:	mov	r7, #5
   18a8c:	str	r7, [sp, #80]	; 0x50
   18a90:	mov	r4, #1
   18a94:	mov	r7, #0
   18a98:	b	17764 <__assert_fail@plt+0x5cd8>
   18a9c:	mov	r6, #0
   18aa0:	mov	r1, #89	; 0x59
   18aa4:	movw	r2, #9504	; 0x2520
   18aa8:	cmp	r0, #0
   18aac:	ldr	r3, [sp, #72]	; 0x48
   18ab0:	str	lr, [sp, #76]	; 0x4c
   18ab4:	strh	r2, [fp, #-53]	; 0xffffffcb
   18ab8:	ldr	r2, [sp, #68]	; 0x44
   18abc:	strbne	r0, [fp, #-51]	; 0xffffffcd
   18ac0:	mov	r0, #0
   18ac4:	ldrne	r2, [sp, #52]	; 0x34
   18ac8:	strb	r0, [r2, #1]
   18acc:	strb	r1, [r2]
   18ad0:	add	r0, sp, #96	; 0x60
   18ad4:	sub	r2, fp, #53	; 0x35
   18ad8:	mov	r1, #1024	; 0x400
   18adc:	bl	11834 <strftime@plt>
   18ae0:	cmp	r0, #0
   18ae4:	beq	18b4c <__assert_fail@plt+0x70c0>
   18ae8:	subs	r8, r5, #45	; 0x2d
   18aec:	ldr	lr, [sp, #76]	; 0x4c
   18af0:	movne	r8, r9
   18af4:	cmp	r9, #0
   18af8:	sub	r9, r0, #1
   18afc:	ldr	r0, [sp, #88]	; 0x58
   18b00:	movwlt	r8, #0
   18b04:	mov	r7, r9
   18b08:	cmp	r8, r9
   18b0c:	movhi	r7, r8
   18b10:	sub	r0, r0, lr
   18b14:	cmp	r7, r0
   18b18:	bcs	18d10 <__assert_fail@plt+0x7284>
   18b1c:	ldr	r0, [sp, #84]	; 0x54
   18b20:	cmp	r0, #0
   18b24:	beq	18b60 <__assert_fail@plt+0x70d4>
   18b28:	cmp	r8, r9
   18b2c:	mov	ip, r0
   18b30:	bls	18b8c <__assert_fail@plt+0x7100>
   18b34:	cmp	r5, #48	; 0x30
   18b38:	sub	r4, r8, r9
   18b3c:	cmpne	r5, #43	; 0x2b
   18b40:	bne	18b70 <__assert_fail@plt+0x70e4>
   18b44:	mov	r1, #48	; 0x30
   18b48:	b	18b74 <__assert_fail@plt+0x70e8>
   18b4c:	ldr	lr, [sp, #76]	; 0x4c
   18b50:	ldr	ip, [sp, #84]	; 0x54
   18b54:	movw	r6, #52428	; 0xcccc
   18b58:	mov	r4, #-2147483648	; 0x80000000
   18b5c:	b	18cd8 <__assert_fail@plt+0x724c>
   18b60:	movw	r6, #52428	; 0xcccc
   18b64:	mov	ip, #0
   18b68:	movt	r6, #3276	; 0xccc
   18b6c:	b	18c68 <__assert_fail@plt+0x71dc>
   18b70:	mov	r1, #32
   18b74:	mov	r2, r4
   18b78:	mov	r5, r0
   18b7c:	bl	11918 <memset@plt>
   18b80:	ldr	lr, [sp, #76]	; 0x4c
   18b84:	add	ip, r5, r4
   18b88:	mov	r0, r5
   18b8c:	tst	r6, #1
   18b90:	beq	18be8 <__assert_fail@plt+0x715c>
   18b94:	movw	r6, #52428	; 0xcccc
   18b98:	cmp	r9, #0
   18b9c:	movt	r6, #3276	; 0xccc
   18ba0:	beq	18c64 <__assert_fail@plt+0x71d8>
   18ba4:	cmp	r8, r9
   18ba8:	mov	r4, ip
   18bac:	movls	r8, r9
   18bb0:	add	r0, r0, r8
   18bb4:	sub	r5, r0, #1
   18bb8:	bl	1184c <__ctype_tolower_loc@plt>
   18bbc:	ldr	lr, [sp, #76]	; 0x4c
   18bc0:	mov	ip, r4
   18bc4:	add	r4, sp, #96	; 0x60
   18bc8:	mov	r1, r9
   18bcc:	ldrb	r2, [r4, r1]
   18bd0:	ldr	r3, [r0]
   18bd4:	subs	r1, r1, #1
   18bd8:	ldr	r2, [r3, r2, lsl #2]
   18bdc:	strb	r2, [r5], #-1
   18be0:	bne	18bcc <__assert_fail@plt+0x7140>
   18be4:	b	18c64 <__assert_fail@plt+0x71d8>
   18be8:	ldr	r1, [sp, #92]	; 0x5c
   18bec:	movw	r6, #52428	; 0xcccc
   18bf0:	movt	r6, #3276	; 0xccc
   18bf4:	tst	r1, #1
   18bf8:	beq	18c48 <__assert_fail@plt+0x71bc>
   18bfc:	cmp	r9, #0
   18c00:	beq	18c64 <__assert_fail@plt+0x71d8>
   18c04:	cmp	r8, r9
   18c08:	mov	r4, ip
   18c0c:	movls	r8, r9
   18c10:	add	r0, r0, r8
   18c14:	sub	r5, r0, #1
   18c18:	bl	11858 <__ctype_toupper_loc@plt>
   18c1c:	ldr	lr, [sp, #76]	; 0x4c
   18c20:	mov	ip, r4
   18c24:	add	r4, sp, #96	; 0x60
   18c28:	mov	r1, r9
   18c2c:	ldrb	r2, [r4, r1]
   18c30:	ldr	r3, [r0]
   18c34:	subs	r1, r1, #1
   18c38:	ldr	r2, [r3, r2, lsl #2]
   18c3c:	strb	r2, [r5], #-1
   18c40:	bne	18c2c <__assert_fail@plt+0x71a0>
   18c44:	b	18c64 <__assert_fail@plt+0x71d8>
   18c48:	ldr	r1, [sp, #32]
   18c4c:	mov	r0, ip
   18c50:	mov	r2, r9
   18c54:	mov	r4, ip
   18c58:	bl	11708 <memcpy@plt>
   18c5c:	ldr	lr, [sp, #76]	; 0x4c
   18c60:	mov	ip, r4
   18c64:	add	ip, ip, r9
   18c68:	add	lr, r7, lr
   18c6c:	mov	r4, #-2147483648	; 0x80000000
   18c70:	b	18cdc <__assert_fail@plt+0x7250>
   18c74:	mov	r0, ip
   18c78:	mov	r1, #32
   18c7c:	ldr	r2, [sp, #80]	; 0x50
   18c80:	bl	11918 <memset@plt>
   18c84:	ldr	r1, [sp, #80]	; 0x50
   18c88:	ldr	ip, [sp, #84]	; 0x54
   18c8c:	ldr	r3, [sp, #72]	; 0x48
   18c90:	ldr	r0, [sp, #92]	; 0x5c
   18c94:	add	ip, ip, r1
   18c98:	stm	sp, {r0, r5, r8}
   18c9c:	ldr	r0, [fp, #20]
   18ca0:	mov	r2, r4
   18ca4:	mov	r1, r9
   18ca8:	mov	r4, ip
   18cac:	str	r0, [sp, #12]
   18cb0:	ldr	r0, [fp, #24]
   18cb4:	str	r0, [sp, #16]
   18cb8:	mov	r0, ip
   18cbc:	bl	173d0 <__assert_fail@plt+0x5944>
   18cc0:	ldr	lr, [sp, #76]	; 0x4c
   18cc4:	mov	ip, r4
   18cc8:	add	ip, r4, r7
   18ccc:	mov	r4, #-2147483648	; 0x80000000
   18cd0:	add	lr, r6, lr
   18cd4:	movw	r6, #52428	; 0xcccc
   18cd8:	movt	r6, #3276	; 0xccc
   18cdc:	ldrb	r3, [sl, #1]!
   18ce0:	mvn	r9, #0
   18ce4:	cmp	r3, #0
   18ce8:	bne	177e4 <__assert_fail@plt+0x5d58>
   18cec:	ldr	r0, [sp, #88]	; 0x58
   18cf0:	ldr	r1, [sp, #56]	; 0x38
   18cf4:	cmp	r0, #0
   18cf8:	cmpne	ip, #0
   18cfc:	movne	r0, #0
   18d00:	strbne	r0, [ip]
   18d04:	ldr	r0, [sp, #60]	; 0x3c
   18d08:	str	r1, [r0]
   18d0c:	b	18d20 <__assert_fail@plt+0x7294>
   18d10:	mov	r0, #34	; 0x22
   18d14:	ldr	r1, [sp, #60]	; 0x3c
   18d18:	mov	lr, #0
   18d1c:	str	r0, [r1]
   18d20:	mov	r0, lr
   18d24:	sub	sp, fp, #28
   18d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d2c:	mov	r0, #75	; 0x4b
   18d30:	b	18d14 <__assert_fail@plt+0x7288>
   18d34:	push	{r4, r5, fp, lr}
   18d38:	add	fp, sp, #8
   18d3c:	cmp	r0, #0
   18d40:	beq	18dd4 <__assert_fail@plt+0x7348>
   18d44:	mov	r1, #47	; 0x2f
   18d48:	mov	r4, r0
   18d4c:	bl	119a8 <strrchr@plt>
   18d50:	cmp	r0, #0
   18d54:	mov	r5, r4
   18d58:	addne	r5, r0, #1
   18d5c:	sub	r0, r5, r4
   18d60:	cmp	r0, #7
   18d64:	blt	18db8 <__assert_fail@plt+0x732c>
   18d68:	movw	r1, #62549	; 0xf455
   18d6c:	sub	r0, r5, #7
   18d70:	mov	r2, #7
   18d74:	movt	r1, #1
   18d78:	bl	11a50 <strncmp@plt>
   18d7c:	cmp	r0, #0
   18d80:	bne	18db8 <__assert_fail@plt+0x732c>
   18d84:	movw	r1, #62557	; 0xf45d
   18d88:	mov	r0, r5
   18d8c:	mov	r2, #3
   18d90:	movt	r1, #1
   18d94:	bl	11a50 <strncmp@plt>
   18d98:	cmp	r0, #0
   18d9c:	beq	18da8 <__assert_fail@plt+0x731c>
   18da0:	mov	r4, r5
   18da4:	b	18db8 <__assert_fail@plt+0x732c>
   18da8:	movw	r0, #464	; 0x1d0
   18dac:	add	r4, r5, #3
   18db0:	movt	r0, #3
   18db4:	str	r4, [r0]
   18db8:	movw	r0, #468	; 0x1d4
   18dbc:	movt	r0, #3
   18dc0:	str	r4, [r0]
   18dc4:	movw	r0, #624	; 0x270
   18dc8:	movt	r0, #3
   18dcc:	str	r4, [r0]
   18dd0:	pop	{r4, r5, fp, pc}
   18dd4:	movw	r0, #480	; 0x1e0
   18dd8:	mov	r1, #55	; 0x37
   18ddc:	mov	r2, #1
   18de0:	movt	r0, #3
   18de4:	ldr	r3, [r0]
   18de8:	movw	r0, #62493	; 0xf41d
   18dec:	movt	r0, #1
   18df0:	bl	11798 <fwrite@plt>
   18df4:	bl	11a5c <abort@plt>
   18df8:	push	{r4, r5, r6, sl, fp, lr}
   18dfc:	add	fp, sp, #16
   18e00:	mov	r4, r0
   18e04:	movw	r0, #632	; 0x278
   18e08:	movt	r0, #3
   18e0c:	cmp	r4, #0
   18e10:	moveq	r4, r0
   18e14:	bl	118e8 <__errno_location@plt>
   18e18:	ldr	r6, [r0]
   18e1c:	mov	r5, r0
   18e20:	mov	r0, r4
   18e24:	mov	r1, #48	; 0x30
   18e28:	bl	1bdc8 <__assert_fail@plt+0xa33c>
   18e2c:	str	r6, [r5]
   18e30:	pop	{r4, r5, r6, sl, fp, pc}
   18e34:	movw	r1, #632	; 0x278
   18e38:	cmp	r0, #0
   18e3c:	movt	r1, #3
   18e40:	movne	r1, r0
   18e44:	ldr	r0, [r1]
   18e48:	bx	lr
   18e4c:	movw	r2, #632	; 0x278
   18e50:	cmp	r0, #0
   18e54:	movt	r2, #3
   18e58:	movne	r2, r0
   18e5c:	str	r1, [r2]
   18e60:	bx	lr
   18e64:	movw	r3, #632	; 0x278
   18e68:	cmp	r0, #0
   18e6c:	movt	r3, #3
   18e70:	movne	r3, r0
   18e74:	ubfx	r0, r1, #5, #3
   18e78:	and	r1, r1, #31
   18e7c:	add	r0, r3, r0, lsl #2
   18e80:	ldr	r3, [r0, #8]
   18e84:	eor	r2, r2, r3, lsr r1
   18e88:	and	r2, r2, #1
   18e8c:	eor	r2, r3, r2, lsl r1
   18e90:	str	r2, [r0, #8]
   18e94:	mov	r0, #1
   18e98:	and	r0, r0, r3, lsr r1
   18e9c:	bx	lr
   18ea0:	movw	r2, #632	; 0x278
   18ea4:	cmp	r0, #0
   18ea8:	movt	r2, #3
   18eac:	movne	r2, r0
   18eb0:	ldr	r0, [r2, #4]
   18eb4:	str	r1, [r2, #4]
   18eb8:	bx	lr
   18ebc:	movw	r3, #632	; 0x278
   18ec0:	cmp	r0, #0
   18ec4:	movt	r3, #3
   18ec8:	movne	r3, r0
   18ecc:	cmp	r1, #0
   18ed0:	mov	r0, #10
   18ed4:	cmpne	r2, #0
   18ed8:	str	r0, [r3]
   18edc:	bne	18eec <__assert_fail@plt+0x7460>
   18ee0:	push	{fp, lr}
   18ee4:	mov	fp, sp
   18ee8:	bl	11a5c <abort@plt>
   18eec:	str	r1, [r3, #40]	; 0x28
   18ef0:	str	r2, [r3, #44]	; 0x2c
   18ef4:	bx	lr
   18ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18efc:	add	fp, sp, #28
   18f00:	sub	sp, sp, #20
   18f04:	mov	r7, r0
   18f08:	ldr	r0, [fp, #8]
   18f0c:	movw	r5, #632	; 0x278
   18f10:	mov	r8, r3
   18f14:	mov	r9, r2
   18f18:	mov	sl, r1
   18f1c:	movt	r5, #3
   18f20:	cmp	r0, #0
   18f24:	movne	r5, r0
   18f28:	bl	118e8 <__errno_location@plt>
   18f2c:	mov	r4, r0
   18f30:	ldm	r5, {r0, r1}
   18f34:	ldr	r2, [r5, #40]	; 0x28
   18f38:	ldr	r3, [r5, #44]	; 0x2c
   18f3c:	add	r5, r5, #8
   18f40:	ldr	r6, [r4]
   18f44:	stm	sp, {r0, r1, r5}
   18f48:	str	r2, [sp, #12]
   18f4c:	str	r3, [sp, #16]
   18f50:	mov	r0, r7
   18f54:	mov	r1, sl
   18f58:	mov	r2, r9
   18f5c:	mov	r3, r8
   18f60:	bl	18f70 <__assert_fail@plt+0x74e4>
   18f64:	str	r6, [r4]
   18f68:	sub	sp, fp, #28
   18f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f74:	add	fp, sp, #28
   18f78:	sub	sp, sp, #156	; 0x9c
   18f7c:	str	r0, [sp, #80]	; 0x50
   18f80:	ldr	r0, [fp, #12]
   18f84:	mov	r6, r1
   18f88:	mov	r9, r3
   18f8c:	str	r2, [fp, #-84]	; 0xffffffac
   18f90:	and	r1, r0, #4
   18f94:	str	r1, [sp, #32]
   18f98:	and	r1, r0, #1
   18f9c:	str	r1, [sp, #36]	; 0x24
   18fa0:	ubfx	r4, r0, #1, #1
   18fa4:	bl	117b0 <__ctype_get_mb_cur_max@plt>
   18fa8:	str	r0, [sp, #40]	; 0x28
   18fac:	ldr	r0, [fp, #24]
   18fb0:	ldr	r7, [fp, #8]
   18fb4:	mov	r1, #0
   18fb8:	mov	r5, #1
   18fbc:	str	r1, [fp, #-56]	; 0xffffffc8
   18fc0:	mov	r1, #0
   18fc4:	str	r1, [sp, #60]	; 0x3c
   18fc8:	str	r0, [sp, #76]	; 0x4c
   18fcc:	ldr	r0, [fp, #20]
   18fd0:	str	r0, [sp, #72]	; 0x48
   18fd4:	mov	r0, #0
   18fd8:	str	r0, [sp, #56]	; 0x38
   18fdc:	mov	r0, #0
   18fe0:	str	r0, [sp, #92]	; 0x5c
   18fe4:	mov	r0, #0
   18fe8:	str	r0, [fp, #-76]	; 0xffffffb4
   18fec:	mov	r0, #0
   18ff0:	cmp	r7, #10
   18ff4:	bhi	19f74 <__assert_fail@plt+0x84e8>
   18ff8:	add	r1, pc, #28
   18ffc:	mov	sl, r6
   19000:	ldr	r6, [sp, #80]	; 0x50
   19004:	ldr	ip, [fp, #-84]	; 0xffffffac
   19008:	mov	r8, #0
   1900c:	mov	r2, #1
   19010:	mov	r3, #0
   19014:	mov	lr, r9
   19018:	ldr	pc, [r1, r7, lsl #2]
   1901c:	andeq	r9, r1, r0, lsl #2
   19020:	andeq	r9, r1, ip, lsr #2
   19024:	strdeq	r9, [r1], -r0
   19028:	andeq	r9, r1, r8, ror #1
   1902c:	andeq	r9, r1, r0, lsr #2
   19030:	andeq	r9, r1, r4, ror r1
   19034:	andeq	r9, r1, r0, lsl r1
   19038:	ldrdeq	r9, [r1], -r0
   1903c:	andeq	r9, r1, r8, asr #32
   19040:	andeq	r9, r1, r8, asr #32
   19044:	andeq	r9, r1, r0, ror r0
   19048:	movw	r0, #62639	; 0xf4af
   1904c:	mov	r1, r7
   19050:	movt	r0, #1
   19054:	bl	1a980 <__assert_fail@plt+0x8ef4>
   19058:	str	r0, [sp, #72]	; 0x48
   1905c:	movw	r0, #63621	; 0xf885
   19060:	mov	r1, r7
   19064:	movt	r0, #1
   19068:	bl	1a980 <__assert_fail@plt+0x8ef4>
   1906c:	str	r0, [sp, #76]	; 0x4c
   19070:	str	r5, [fp, #-48]	; 0xffffffd0
   19074:	mov	r8, #0
   19078:	mov	r5, r7
   1907c:	tst	r4, #1
   19080:	bne	190b8 <__assert_fail@plt+0x762c>
   19084:	ldr	r0, [sp, #72]	; 0x48
   19088:	ldrb	r0, [r0]
   1908c:	cmp	r0, #0
   19090:	beq	190b8 <__assert_fail@plt+0x762c>
   19094:	ldr	r1, [sp, #72]	; 0x48
   19098:	mov	r8, #0
   1909c:	add	r1, r1, #1
   190a0:	cmp	r8, sl
   190a4:	strbcc	r0, [r6, r8]
   190a8:	ldrb	r0, [r1, r8]
   190ac:	add	r8, r8, #1
   190b0:	cmp	r0, #0
   190b4:	bne	190a0 <__assert_fail@plt+0x7614>
   190b8:	ldr	r7, [sp, #76]	; 0x4c
   190bc:	mov	r0, r7
   190c0:	bl	118ac <strlen@plt>
   190c4:	str	r7, [sp, #92]	; 0x5c
   190c8:	mov	r7, r5
   190cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   190d0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   190d4:	str	r0, [fp, #-76]	; 0xffffffb4
   190d8:	mov	r2, #1
   190dc:	mov	r3, r4
   190e0:	mov	lr, r9
   190e4:	b	191d0 <__assert_fail@plt+0x7744>
   190e8:	mov	r0, #1
   190ec:	b	1912c <__assert_fail@plt+0x76a0>
   190f0:	tst	r4, #1
   190f4:	bne	1912c <__assert_fail@plt+0x76a0>
   190f8:	mov	r2, r0
   190fc:	b	19154 <__assert_fail@plt+0x76c8>
   19100:	mov	r7, #0
   19104:	mov	r8, #0
   19108:	mov	r2, r0
   1910c:	b	191cc <__assert_fail@plt+0x7740>
   19110:	mov	r0, #1
   19114:	mov	r8, #0
   19118:	mov	r7, #5
   1911c:	b	19188 <__assert_fail@plt+0x76fc>
   19120:	mov	r2, #1
   19124:	tst	r4, #1
   19128:	beq	19154 <__assert_fail@plt+0x76c8>
   1912c:	mov	r1, #1
   19130:	mov	r8, #0
   19134:	mov	r7, #2
   19138:	mov	r2, r0
   1913c:	mov	r3, #1
   19140:	str	r1, [fp, #-76]	; 0xffffffb4
   19144:	movw	r1, #63621	; 0xf885
   19148:	movt	r1, #1
   1914c:	str	r1, [sp, #92]	; 0x5c
   19150:	b	191d0 <__assert_fail@plt+0x7744>
   19154:	cmp	sl, #0
   19158:	mov	r8, #1
   1915c:	mov	r7, #2
   19160:	movne	r0, #39	; 0x27
   19164:	strbne	r0, [r6]
   19168:	movw	r0, #63621	; 0xf885
   1916c:	movt	r0, #1
   19170:	b	191c0 <__assert_fail@plt+0x7734>
   19174:	mov	r7, #5
   19178:	tst	r4, #1
   1917c:	beq	191a4 <__assert_fail@plt+0x7718>
   19180:	mov	r0, #1
   19184:	mov	r8, #0
   19188:	str	r0, [fp, #-76]	; 0xffffffb4
   1918c:	movw	r0, #62637	; 0xf4ad
   19190:	mov	r2, #1
   19194:	mov	r3, #1
   19198:	movt	r0, #1
   1919c:	str	r0, [sp, #92]	; 0x5c
   191a0:	b	191d0 <__assert_fail@plt+0x7744>
   191a4:	cmp	sl, #0
   191a8:	mov	r8, #1
   191ac:	mov	r2, #1
   191b0:	movne	r0, #34	; 0x22
   191b4:	strbne	r0, [r6]
   191b8:	movw	r0, #62637	; 0xf4ad
   191bc:	movt	r0, #1
   191c0:	str	r0, [sp, #92]	; 0x5c
   191c4:	mov	r0, #1
   191c8:	str	r0, [fp, #-76]	; 0xffffffb4
   191cc:	mov	r3, #0
   191d0:	ldr	r0, [fp, #16]
   191d4:	str	r3, [fp, #-72]	; 0xffffffb8
   191d8:	str	r7, [fp, #-64]	; 0xffffffc0
   191dc:	str	r2, [sp, #84]	; 0x54
   191e0:	cmp	r0, #0
   191e4:	movwne	r0, #1
   191e8:	and	r0, r0, r3
   191ec:	str	r0, [fp, #-88]	; 0xffffffa8
   191f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   191f4:	cmp	r0, #0
   191f8:	movwne	r0, #1
   191fc:	subs	r4, r7, #2
   19200:	mov	r7, #0
   19204:	and	r1, r0, r3
   19208:	str	r4, [fp, #-80]	; 0xffffffb0
   1920c:	and	r1, r2, r1
   19210:	str	r1, [sp, #48]	; 0x30
   19214:	clz	r1, r4
   19218:	lsr	r1, r1, #5
   1921c:	and	r1, r1, r3
   19220:	eor	r3, r3, #1
   19224:	str	r1, [sp, #64]	; 0x40
   19228:	mov	r1, r4
   1922c:	str	r3, [sp, #88]	; 0x58
   19230:	movwne	r1, #1
   19234:	orr	r3, r1, r3
   19238:	and	r1, r1, r2
   1923c:	and	r0, r0, r1
   19240:	str	r3, [sp, #68]	; 0x44
   19244:	str	r1, [fp, #-68]	; 0xffffffbc
   19248:	str	r0, [fp, #-60]	; 0xffffffc4
   1924c:	eor	r0, r2, #1
   19250:	str	r0, [sp, #52]	; 0x34
   19254:	cmn	lr, #1
   19258:	beq	19268 <__assert_fail@plt+0x77dc>
   1925c:	cmp	r7, lr
   19260:	bne	19274 <__assert_fail@plt+0x77e8>
   19264:	b	19d9c <__assert_fail@plt+0x8310>
   19268:	ldrb	r0, [ip, r7]
   1926c:	cmp	r0, #0
   19270:	beq	19da4 <__assert_fail@plt+0x8318>
   19274:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19278:	mov	r9, #0
   1927c:	str	r5, [fp, #-48]	; 0xffffffd0
   19280:	cmp	r0, #0
   19284:	beq	192b8 <__assert_fail@plt+0x782c>
   19288:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1928c:	add	r4, r7, r0
   19290:	cmp	r0, #2
   19294:	bcc	192b0 <__assert_fail@plt+0x7824>
   19298:	cmn	lr, #1
   1929c:	bne	192b0 <__assert_fail@plt+0x7824>
   192a0:	mov	r0, ip
   192a4:	bl	118ac <strlen@plt>
   192a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   192ac:	mov	lr, r0
   192b0:	cmp	r4, lr
   192b4:	bls	192c0 <__assert_fail@plt+0x7834>
   192b8:	mov	r0, #0
   192bc:	b	19300 <__assert_fail@plt+0x7874>
   192c0:	ldr	r1, [sp, #92]	; 0x5c
   192c4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   192c8:	add	r0, ip, r7
   192cc:	mov	r4, lr
   192d0:	bl	11720 <memcmp@plt>
   192d4:	ldr	r2, [sp, #88]	; 0x58
   192d8:	cmp	r0, #0
   192dc:	mov	r1, r0
   192e0:	movwne	r1, #1
   192e4:	orr	r1, r1, r2
   192e8:	tst	r1, #1
   192ec:	beq	19e34 <__assert_fail@plt+0x83a8>
   192f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   192f4:	clz	r0, r0
   192f8:	mov	lr, r4
   192fc:	lsr	r0, r0, #5
   19300:	str	r0, [fp, #-52]	; 0xffffffcc
   19304:	ldrb	r5, [ip, r7]
   19308:	cmp	r5, #126	; 0x7e
   1930c:	bhi	196c4 <__assert_fail@plt+0x7c38>
   19310:	add	r3, pc, #16
   19314:	mov	r4, #1
   19318:	mov	r2, #110	; 0x6e
   1931c:	mov	r0, #97	; 0x61
   19320:	mov	r1, #0
   19324:	ldr	pc, [r3, r5, lsl #2]
   19328:	andeq	r9, r1, r0, asr #11
   1932c:	andeq	r9, r1, r4, asr #13
   19330:	andeq	r9, r1, r4, asr #13
   19334:	andeq	r9, r1, r4, asr #13
   19338:	andeq	r9, r1, r4, asr #13
   1933c:	andeq	r9, r1, r4, asr #13
   19340:	andeq	r9, r1, r4, asr #13
   19344:	andeq	r9, r1, r8, ror r7
   19348:	andeq	r9, r1, r0, lsr #11
   1934c:	muleq	r1, r8, r5
   19350:	andeq	r9, r1, ip, lsr #11
   19354:	andeq	r9, r1, ip, lsr #12
   19358:	muleq	r1, r0, r5
   1935c:	andeq	r9, r1, r8, lsr #11
   19360:	andeq	r9, r1, r4, asr #13
   19364:	andeq	r9, r1, r4, asr #13
   19368:	andeq	r9, r1, r4, asr #13
   1936c:	andeq	r9, r1, r4, asr #13
   19370:	andeq	r9, r1, r4, asr #13
   19374:	andeq	r9, r1, r4, asr #13
   19378:	andeq	r9, r1, r4, asr #13
   1937c:	andeq	r9, r1, r4, asr #13
   19380:	andeq	r9, r1, r4, asr #13
   19384:	andeq	r9, r1, r4, asr #13
   19388:	andeq	r9, r1, r4, asr #13
   1938c:	andeq	r9, r1, r4, asr #13
   19390:	andeq	r9, r1, r4, asr #13
   19394:	andeq	r9, r1, r4, asr #13
   19398:	andeq	r9, r1, r4, asr #13
   1939c:	andeq	r9, r1, r4, asr #13
   193a0:	andeq	r9, r1, r4, asr #13
   193a4:	andeq	r9, r1, r4, asr #13
   193a8:	andeq	r9, r1, r0, lsr r7
   193ac:	andeq	r9, r1, r4, lsr r7
   193b0:	andeq	r9, r1, r4, lsr r7
   193b4:	andeq	r9, r1, r8, lsr r5
   193b8:	andeq	r9, r1, r4, lsr r7
   193bc:	andeq	r9, r1, r4, lsr #10
   193c0:	andeq	r9, r1, r4, lsr r7
   193c4:	andeq	r9, r1, r4, lsr r6
   193c8:	andeq	r9, r1, r4, lsr r7
   193cc:	andeq	r9, r1, r4, lsr r7
   193d0:	andeq	r9, r1, r4, lsr r7
   193d4:	andeq	r9, r1, r4, lsr #10
   193d8:	andeq	r9, r1, r4, lsr #10
   193dc:	andeq	r9, r1, r4, lsr #10
   193e0:	andeq	r9, r1, r4, lsr #10
   193e4:	andeq	r9, r1, r4, lsr #10
   193e8:	andeq	r9, r1, r4, lsr #10
   193ec:	andeq	r9, r1, r4, lsr #10
   193f0:	andeq	r9, r1, r4, lsr #10
   193f4:	andeq	r9, r1, r4, lsr #10
   193f8:	andeq	r9, r1, r4, lsr #10
   193fc:	andeq	r9, r1, r4, lsr #10
   19400:	andeq	r9, r1, r4, lsr #10
   19404:	andeq	r9, r1, r4, lsr #10
   19408:	andeq	r9, r1, r4, lsr #10
   1940c:	andeq	r9, r1, r4, lsr #10
   19410:	andeq	r9, r1, r4, lsr #10
   19414:	andeq	r9, r1, r4, lsr r7
   19418:	andeq	r9, r1, r4, lsr r7
   1941c:	andeq	r9, r1, r4, lsr r7
   19420:	andeq	r9, r1, r4, lsr r7
   19424:	andeq	r9, r1, r0, lsl #12
   19428:	andeq	r9, r1, r4, asr #13
   1942c:	andeq	r9, r1, r4, lsr #10
   19430:	andeq	r9, r1, r4, lsr #10
   19434:	andeq	r9, r1, r4, lsr #10
   19438:	andeq	r9, r1, r4, lsr #10
   1943c:	andeq	r9, r1, r4, lsr #10
   19440:	andeq	r9, r1, r4, lsr #10
   19444:	andeq	r9, r1, r4, lsr #10
   19448:	andeq	r9, r1, r4, lsr #10
   1944c:	andeq	r9, r1, r4, lsr #10
   19450:	andeq	r9, r1, r4, lsr #10
   19454:	andeq	r9, r1, r4, lsr #10
   19458:	andeq	r9, r1, r4, lsr #10
   1945c:	andeq	r9, r1, r4, lsr #10
   19460:	andeq	r9, r1, r4, lsr #10
   19464:	andeq	r9, r1, r4, lsr #10
   19468:	andeq	r9, r1, r4, lsr #10
   1946c:	andeq	r9, r1, r4, lsr #10
   19470:	andeq	r9, r1, r4, lsr #10
   19474:	andeq	r9, r1, r4, lsr #10
   19478:	andeq	r9, r1, r4, lsr #10
   1947c:	andeq	r9, r1, r4, lsr #10
   19480:	andeq	r9, r1, r4, lsr #10
   19484:	andeq	r9, r1, r4, lsr #10
   19488:	andeq	r9, r1, r4, lsr #10
   1948c:	andeq	r9, r1, r4, lsr #10
   19490:	andeq	r9, r1, r4, lsr #10
   19494:	andeq	r9, r1, r4, lsr r7
   19498:	andeq	r9, r1, ip, ror #10
   1949c:	andeq	r9, r1, r4, lsr #10
   194a0:	andeq	r9, r1, r4, lsr r7
   194a4:	andeq	r9, r1, r4, lsr #10
   194a8:	andeq	r9, r1, r4, lsr r7
   194ac:	andeq	r9, r1, r4, lsr #10
   194b0:	andeq	r9, r1, r4, lsr #10
   194b4:	andeq	r9, r1, r4, lsr #10
   194b8:	andeq	r9, r1, r4, lsr #10
   194bc:	andeq	r9, r1, r4, lsr #10
   194c0:	andeq	r9, r1, r4, lsr #10
   194c4:	andeq	r9, r1, r4, lsr #10
   194c8:	andeq	r9, r1, r4, lsr #10
   194cc:	andeq	r9, r1, r4, lsr #10
   194d0:	andeq	r9, r1, r4, lsr #10
   194d4:	andeq	r9, r1, r4, lsr #10
   194d8:	andeq	r9, r1, r4, lsr #10
   194dc:	andeq	r9, r1, r4, lsr #10
   194e0:	andeq	r9, r1, r4, lsr #10
   194e4:	andeq	r9, r1, r4, lsr #10
   194e8:	andeq	r9, r1, r4, lsr #10
   194ec:	andeq	r9, r1, r4, lsr #10
   194f0:	andeq	r9, r1, r4, lsr #10
   194f4:	andeq	r9, r1, r4, lsr #10
   194f8:	andeq	r9, r1, r4, lsr #10
   194fc:	andeq	r9, r1, r4, lsr #10
   19500:	andeq	r9, r1, r4, lsr #10
   19504:	andeq	r9, r1, r4, lsr #10
   19508:	andeq	r9, r1, r4, lsr #10
   1950c:	andeq	r9, r1, r4, lsr #10
   19510:	andeq	r9, r1, r4, lsr #10
   19514:	andeq	r9, r1, ip, asr #10
   19518:	andeq	r9, r1, r4, lsr r7
   1951c:	andeq	r9, r1, ip, asr #10
   19520:	andeq	r9, r1, r8, lsr r5
   19524:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19528:	cmp	r0, #0
   1952c:	beq	1978c <__assert_fail@plt+0x7d00>
   19530:	ldr	r0, [fp, #16]
   19534:	b	19790 <__assert_fail@plt+0x7d04>
   19538:	mov	r4, #0
   1953c:	cmp	r7, #0
   19540:	beq	19730 <__assert_fail@plt+0x7ca4>
   19544:	mov	r9, #0
   19548:	b	19524 <__assert_fail@plt+0x7a98>
   1954c:	mov	r4, #0
   19550:	cmn	lr, #1
   19554:	beq	19714 <__assert_fail@plt+0x7c88>
   19558:	cmp	r7, #0
   1955c:	bne	19544 <__assert_fail@plt+0x7ab8>
   19560:	cmp	lr, #1
   19564:	beq	19730 <__assert_fail@plt+0x7ca4>
   19568:	b	19544 <__assert_fail@plt+0x7ab8>
   1956c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19570:	cmp	r0, #2
   19574:	bne	19754 <__assert_fail@plt+0x7cc8>
   19578:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1957c:	tst	r0, #1
   19580:	bne	19e50 <__assert_fail@plt+0x83c4>
   19584:	mov	r9, #0
   19588:	mov	r0, #92	; 0x5c
   1958c:	b	19768 <__assert_fail@plt+0x7cdc>
   19590:	mov	r0, #102	; 0x66
   19594:	b	19778 <__assert_fail@plt+0x7cec>
   19598:	mov	r2, #116	; 0x74
   1959c:	b	195ac <__assert_fail@plt+0x7b20>
   195a0:	mov	r0, #98	; 0x62
   195a4:	b	19778 <__assert_fail@plt+0x7cec>
   195a8:	mov	r2, #114	; 0x72
   195ac:	ldr	r0, [sp, #68]	; 0x44
   195b0:	tst	r0, #1
   195b4:	mov	r0, r2
   195b8:	bne	19778 <__assert_fail@plt+0x7cec>
   195bc:	b	19e50 <__assert_fail@plt+0x83c4>
   195c0:	ldr	r0, [sp, #84]	; 0x54
   195c4:	tst	r0, #1
   195c8:	beq	19868 <__assert_fail@plt+0x7ddc>
   195cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   195d0:	tst	r0, #1
   195d4:	bne	19f60 <__assert_fail@plt+0x84d4>
   195d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   195dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   195e0:	cmp	r0, #2
   195e4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   195e8:	movwne	r0, #1
   195ec:	orr	r0, r0, r2
   195f0:	tst	r0, #1
   195f4:	beq	19c38 <__assert_fail@plt+0x81ac>
   195f8:	mov	r0, r8
   195fc:	b	19c6c <__assert_fail@plt+0x81e0>
   19600:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19604:	mov	r9, #0
   19608:	mov	r5, #63	; 0x3f
   1960c:	cmp	r0, #5
   19610:	beq	19a1c <__assert_fail@plt+0x7f90>
   19614:	cmp	r0, #2
   19618:	bne	19ac0 <__assert_fail@plt+0x8034>
   1961c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19620:	tst	r0, #1
   19624:	beq	19ac4 <__assert_fail@plt+0x8038>
   19628:	b	19e50 <__assert_fail@plt+0x83c4>
   1962c:	mov	r0, #118	; 0x76
   19630:	b	19778 <__assert_fail@plt+0x7cec>
   19634:	mov	r0, #1
   19638:	mov	r5, #39	; 0x27
   1963c:	str	r0, [sp, #60]	; 0x3c
   19640:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19644:	cmp	r0, #2
   19648:	bne	196bc <__assert_fail@plt+0x7c30>
   1964c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19650:	tst	r0, #1
   19654:	bne	19e50 <__assert_fail@plt+0x83c4>
   19658:	ldr	r2, [sp, #56]	; 0x38
   1965c:	clz	r1, sl
   19660:	mov	r9, #0
   19664:	lsr	r1, r1, #5
   19668:	cmp	r2, #0
   1966c:	mov	r0, r2
   19670:	movwne	r0, #1
   19674:	orrs	r0, r0, r1
   19678:	moveq	r2, sl
   1967c:	moveq	sl, r0
   19680:	cmp	r8, sl
   19684:	str	r2, [sp, #56]	; 0x38
   19688:	movcc	r0, #39	; 0x27
   1968c:	strbcc	r0, [r6, r8]
   19690:	add	r0, r8, #1
   19694:	cmp	r0, sl
   19698:	movcc	r1, #92	; 0x5c
   1969c:	strbcc	r1, [r6, r0]
   196a0:	add	r0, r8, #2
   196a4:	add	r8, r8, #3
   196a8:	cmp	r0, sl
   196ac:	movcc	r1, #39	; 0x27
   196b0:	strbcc	r1, [r6, r0]
   196b4:	mov	r0, #0
   196b8:	str	r0, [fp, #-56]	; 0xffffffc8
   196bc:	mov	r4, #1
   196c0:	b	19524 <__assert_fail@plt+0x7a98>
   196c4:	ldr	r0, [sp, #40]	; 0x28
   196c8:	cmp	r0, #1
   196cc:	bne	19894 <__assert_fail@plt+0x7e08>
   196d0:	str	lr, [sp, #28]
   196d4:	bl	1187c <__ctype_b_loc@plt>
   196d8:	ldr	r0, [r0]
   196dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   196e0:	mov	r1, #1
   196e4:	add	r0, r0, r5, lsl #1
   196e8:	ldrb	r0, [r0, #1]
   196ec:	ubfx	r4, r0, #6, #1
   196f0:	ldr	r0, [sp, #52]	; 0x34
   196f4:	mov	r2, r1
   196f8:	cmp	r1, #1
   196fc:	orr	r0, r4, r0
   19700:	bhi	19acc <__assert_fail@plt+0x8040>
   19704:	tst	r0, #1
   19708:	beq	19acc <__assert_fail@plt+0x8040>
   1970c:	ldr	lr, [sp, #28]
   19710:	b	19524 <__assert_fail@plt+0x7a98>
   19714:	cmp	r7, #0
   19718:	ldrbeq	r0, [ip, #1]
   1971c:	cmpeq	r0, #0
   19720:	beq	19730 <__assert_fail@plt+0x7ca4>
   19724:	mvn	lr, #0
   19728:	mov	r9, #0
   1972c:	b	19524 <__assert_fail@plt+0x7a98>
   19730:	mov	r1, #1
   19734:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19738:	cmp	r0, #2
   1973c:	bne	1974c <__assert_fail@plt+0x7cc0>
   19740:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19744:	tst	r0, #1
   19748:	bne	19e50 <__assert_fail@plt+0x83c4>
   1974c:	mov	r4, r1
   19750:	b	19524 <__assert_fail@plt+0x7a98>
   19754:	ldr	r1, [sp, #48]	; 0x30
   19758:	mov	r9, #0
   1975c:	mov	r0, #92	; 0x5c
   19760:	cmp	r1, #0
   19764:	beq	19778 <__assert_fail@plt+0x7cec>
   19768:	mov	r4, #0
   1976c:	cmp	r9, #0
   19770:	beq	19d04 <__assert_fail@plt+0x8278>
   19774:	b	19d40 <__assert_fail@plt+0x82b4>
   19778:	ldr	r1, [sp, #84]	; 0x54
   1977c:	mov	r4, #0
   19780:	mov	r9, #0
   19784:	tst	r1, #1
   19788:	bne	197c8 <__assert_fail@plt+0x7d3c>
   1978c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19790:	cmp	r0, #0
   19794:	mov	r0, r5
   19798:	beq	197bc <__assert_fail@plt+0x7d30>
   1979c:	ldr	r1, [fp, #16]
   197a0:	ubfx	r0, r5, #5, #3
   197a4:	mov	r2, #1
   197a8:	ldr	r0, [r1, r0, lsl #2]
   197ac:	and	r1, r5, #31
   197b0:	tst	r0, r2, lsl r1
   197b4:	mov	r0, r5
   197b8:	bne	197c8 <__assert_fail@plt+0x7d3c>
   197bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   197c0:	cmp	r1, #0
   197c4:	beq	19cfc <__assert_fail@plt+0x8270>
   197c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   197cc:	tst	r1, #1
   197d0:	bne	19e28 <__assert_fail@plt+0x839c>
   197d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   197d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   197dc:	cmp	r1, #2
   197e0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   197e4:	movwne	r1, #1
   197e8:	orr	r1, r1, r2
   197ec:	tst	r1, #1
   197f0:	beq	197fc <__assert_fail@plt+0x7d70>
   197f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   197f8:	b	19838 <__assert_fail@plt+0x7dac>
   197fc:	cmp	r8, sl
   19800:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19804:	movcc	r1, #39	; 0x27
   19808:	strbcc	r1, [r6, r8]
   1980c:	add	r1, r8, #1
   19810:	cmp	r1, sl
   19814:	movcc	r2, #36	; 0x24
   19818:	strbcc	r2, [r6, r1]
   1981c:	add	r1, r8, #2
   19820:	add	r8, r8, #3
   19824:	cmp	r1, sl
   19828:	movcc	r2, #39	; 0x27
   1982c:	strbcc	r2, [r6, r1]
   19830:	mov	r1, #1
   19834:	str	r1, [fp, #-56]	; 0xffffffc8
   19838:	cmp	r8, sl
   1983c:	movcc	r1, #92	; 0x5c
   19840:	strbcc	r1, [r6, r8]
   19844:	add	r8, r8, #1
   19848:	cmp	r8, sl
   1984c:	and	r5, r5, r4
   19850:	add	r7, r7, #1
   19854:	strbcc	r0, [r6, r8]
   19858:	add	r8, r8, #1
   1985c:	cmn	lr, #1
   19860:	bne	1925c <__assert_fail@plt+0x77d0>
   19864:	b	19268 <__assert_fail@plt+0x77dc>
   19868:	ldr	r0, [sp, #36]	; 0x24
   1986c:	mov	r4, #0
   19870:	mov	r9, #0
   19874:	mov	r5, #0
   19878:	cmp	r0, #0
   1987c:	beq	1978c <__assert_fail@plt+0x7d00>
   19880:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19884:	add	r7, r7, #1
   19888:	cmn	lr, #1
   1988c:	bne	1925c <__assert_fail@plt+0x77d0>
   19890:	b	19268 <__assert_fail@plt+0x77dc>
   19894:	mov	r0, #0
   19898:	cmn	lr, #1
   1989c:	str	r0, [fp, #-36]	; 0xffffffdc
   198a0:	str	r0, [fp, #-40]	; 0xffffffd8
   198a4:	bne	198b8 <__assert_fail@plt+0x7e2c>
   198a8:	mov	r0, ip
   198ac:	bl	118ac <strlen@plt>
   198b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   198b4:	mov	lr, r0
   198b8:	add	r0, ip, r7
   198bc:	mov	r4, #1
   198c0:	mov	r6, #0
   198c4:	str	lr, [sp, #28]
   198c8:	str	r0, [sp, #24]
   198cc:	sub	r0, fp, #40	; 0x28
   198d0:	mov	r3, r0
   198d4:	str	r6, [sp, #44]	; 0x2c
   198d8:	add	r6, r6, r7
   198dc:	sub	r0, fp, #44	; 0x2c
   198e0:	add	r1, ip, r6
   198e4:	sub	r2, lr, r6
   198e8:	bl	1d13c <__assert_fail@plt+0xb6b0>
   198ec:	cmp	r0, #0
   198f0:	beq	19d88 <__assert_fail@plt+0x82fc>
   198f4:	cmn	r0, #1
   198f8:	beq	19d48 <__assert_fail@plt+0x82bc>
   198fc:	ldr	lr, [sp, #28]
   19900:	cmn	r0, #2
   19904:	beq	19d50 <__assert_fail@plt+0x82c4>
   19908:	ldr	r2, [sp, #64]	; 0x40
   1990c:	cmp	r0, #2
   19910:	mov	r1, #0
   19914:	movwcc	r1, #1
   19918:	eor	r2, r2, #1
   1991c:	orrs	r1, r2, r1
   19920:	bne	199e0 <__assert_fail@plt+0x7f54>
   19924:	ldr	r1, [sp, #44]	; 0x2c
   19928:	ldr	r2, [sp, #24]
   1992c:	add	r1, r2, r1
   19930:	mov	r2, #1
   19934:	ldrb	r3, [r1, r2]
   19938:	sub	r3, r3, #91	; 0x5b
   1993c:	cmp	r3, #33	; 0x21
   19940:	bhi	199d4 <__assert_fail@plt+0x7f48>
   19944:	add	r6, pc, #0
   19948:	ldr	pc, [r6, r3, lsl #2]
   1994c:	andeq	r9, r1, r8, asr #28
   19950:	andeq	r9, r1, r8, asr #28
   19954:	ldrdeq	r9, [r1], -r4
   19958:	andeq	r9, r1, r8, asr #28
   1995c:	ldrdeq	r9, [r1], -r4
   19960:	andeq	r9, r1, r8, asr #28
   19964:	ldrdeq	r9, [r1], -r4
   19968:	ldrdeq	r9, [r1], -r4
   1996c:	ldrdeq	r9, [r1], -r4
   19970:	ldrdeq	r9, [r1], -r4
   19974:	ldrdeq	r9, [r1], -r4
   19978:	ldrdeq	r9, [r1], -r4
   1997c:	ldrdeq	r9, [r1], -r4
   19980:	ldrdeq	r9, [r1], -r4
   19984:	ldrdeq	r9, [r1], -r4
   19988:	ldrdeq	r9, [r1], -r4
   1998c:	ldrdeq	r9, [r1], -r4
   19990:	ldrdeq	r9, [r1], -r4
   19994:	ldrdeq	r9, [r1], -r4
   19998:	ldrdeq	r9, [r1], -r4
   1999c:	ldrdeq	r9, [r1], -r4
   199a0:	ldrdeq	r9, [r1], -r4
   199a4:	ldrdeq	r9, [r1], -r4
   199a8:	ldrdeq	r9, [r1], -r4
   199ac:	ldrdeq	r9, [r1], -r4
   199b0:	ldrdeq	r9, [r1], -r4
   199b4:	ldrdeq	r9, [r1], -r4
   199b8:	ldrdeq	r9, [r1], -r4
   199bc:	ldrdeq	r9, [r1], -r4
   199c0:	ldrdeq	r9, [r1], -r4
   199c4:	ldrdeq	r9, [r1], -r4
   199c8:	ldrdeq	r9, [r1], -r4
   199cc:	ldrdeq	r9, [r1], -r4
   199d0:	andeq	r9, r1, r8, asr #28
   199d4:	add	r2, r2, #1
   199d8:	cmp	r2, r0
   199dc:	bcc	19934 <__assert_fail@plt+0x7ea8>
   199e0:	ldr	r6, [sp, #44]	; 0x2c
   199e4:	add	r6, r0, r6
   199e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   199ec:	bl	11774 <iswprint@plt>
   199f0:	cmp	r0, #0
   199f4:	movwne	r0, #1
   199f8:	and	r4, r4, r0
   199fc:	sub	r0, fp, #40	; 0x28
   19a00:	bl	11714 <mbsinit@plt>
   19a04:	ldr	lr, [sp, #28]
   19a08:	ldr	ip, [fp, #-84]	; 0xffffffac
   19a0c:	sub	r3, fp, #40	; 0x28
   19a10:	cmp	r0, #0
   19a14:	beq	198d4 <__assert_fail@plt+0x7e48>
   19a18:	b	19d90 <__assert_fail@plt+0x8304>
   19a1c:	ldr	r0, [sp, #32]
   19a20:	cmp	r0, #0
   19a24:	beq	19ac0 <__assert_fail@plt+0x8034>
   19a28:	add	r0, r7, #2
   19a2c:	cmp	r0, lr
   19a30:	bcs	19ac0 <__assert_fail@plt+0x8034>
   19a34:	add	r1, ip, r7
   19a38:	ldrb	r1, [r1, #1]
   19a3c:	cmp	r1, #63	; 0x3f
   19a40:	bne	19ac0 <__assert_fail@plt+0x8034>
   19a44:	ldrb	r5, [ip, r0]
   19a48:	sub	r1, r5, #33	; 0x21
   19a4c:	cmp	r1, #29
   19a50:	bhi	19ac0 <__assert_fail@plt+0x8034>
   19a54:	movw	r3, #20929	; 0x51c1
   19a58:	mov	r2, #1
   19a5c:	movt	r3, #14336	; 0x3800
   19a60:	tst	r3, r2, lsl r1
   19a64:	beq	19ac0 <__assert_fail@plt+0x8034>
   19a68:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19a6c:	tst	r1, #1
   19a70:	bne	19f68 <__assert_fail@plt+0x84dc>
   19a74:	cmp	r8, sl
   19a78:	mov	r7, r0
   19a7c:	mov	r4, #0
   19a80:	movcc	r1, #63	; 0x3f
   19a84:	strbcc	r1, [r6, r8]
   19a88:	add	r1, r8, #1
   19a8c:	cmp	r1, sl
   19a90:	movcc	r2, #34	; 0x22
   19a94:	strbcc	r2, [r6, r1]
   19a98:	add	r1, r8, #2
   19a9c:	cmp	r1, sl
   19aa0:	movcc	r2, #34	; 0x22
   19aa4:	strbcc	r2, [r6, r1]
   19aa8:	add	r1, r8, #3
   19aac:	add	r8, r8, #4
   19ab0:	cmp	r1, sl
   19ab4:	movcc	r2, #63	; 0x3f
   19ab8:	strbcc	r2, [r6, r1]
   19abc:	b	19524 <__assert_fail@plt+0x7a98>
   19ac0:	mov	r5, #63	; 0x3f
   19ac4:	mov	r4, #0
   19ac8:	b	19524 <__assert_fail@plt+0x7a98>
   19acc:	add	r1, r2, r7
   19ad0:	ldr	lr, [sp, #28]
   19ad4:	mov	r3, #0
   19ad8:	str	r1, [sp, #44]	; 0x2c
   19adc:	add	r1, r7, #1
   19ae0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19ae4:	tst	r0, #1
   19ae8:	bne	19bbc <__assert_fail@plt+0x8130>
   19aec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   19af0:	tst	r2, #1
   19af4:	bne	19eb0 <__assert_fail@plt+0x8424>
   19af8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19afc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19b00:	cmp	r7, #2
   19b04:	movwne	r3, #1
   19b08:	orr	r3, r3, r2
   19b0c:	tst	r3, #1
   19b10:	bne	19b4c <__assert_fail@plt+0x80c0>
   19b14:	cmp	r8, sl
   19b18:	add	r3, r8, #1
   19b1c:	movcc	r2, #39	; 0x27
   19b20:	strbcc	r2, [r6, r8]
   19b24:	cmp	r3, sl
   19b28:	movcc	r2, #36	; 0x24
   19b2c:	strbcc	r2, [r6, r3]
   19b30:	add	r3, r8, #2
   19b34:	add	r8, r8, #3
   19b38:	cmp	r3, sl
   19b3c:	movcc	r2, #39	; 0x27
   19b40:	strbcc	r2, [r6, r3]
   19b44:	mov	r2, #1
   19b48:	str	r2, [fp, #-56]	; 0xffffffc8
   19b4c:	cmp	r8, sl
   19b50:	movcc	r3, #92	; 0x5c
   19b54:	strbcc	r3, [r6, r8]
   19b58:	add	r3, r8, #1
   19b5c:	cmp	r3, sl
   19b60:	andcc	r7, r5, #192	; 0xc0
   19b64:	movcc	r2, #48	; 0x30
   19b68:	orrcc	r7, r2, r7, lsr #6
   19b6c:	strbcc	r7, [r6, r3]
   19b70:	add	r3, r8, #2
   19b74:	add	r8, r8, #3
   19b78:	cmp	r3, sl
   19b7c:	lsrcc	r7, r5, #3
   19b80:	movcc	r2, #6
   19b84:	bficc	r7, r2, #3, #29
   19b88:	mov	r2, #6
   19b8c:	strbcc	r7, [r6, r3]
   19b90:	bfi	r5, r2, #3, #29
   19b94:	mov	r3, #1
   19b98:	b	19be0 <__assert_fail@plt+0x8154>
   19b9c:	cmp	r8, sl
   19ba0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19ba4:	strbcc	r5, [r6, r8]
   19ba8:	add	r8, r8, #1
   19bac:	ldrb	r5, [ip, r1]
   19bb0:	add	r1, r1, #1
   19bb4:	tst	r0, #1
   19bb8:	beq	19aec <__assert_fail@plt+0x8060>
   19bbc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   19bc0:	tst	r2, #1
   19bc4:	beq	19bd8 <__assert_fail@plt+0x814c>
   19bc8:	cmp	r8, sl
   19bcc:	movcc	r7, #92	; 0x5c
   19bd0:	strbcc	r7, [r6, r8]
   19bd4:	add	r8, r8, #1
   19bd8:	mov	r2, #0
   19bdc:	str	r2, [fp, #-52]	; 0xffffffcc
   19be0:	ldr	r2, [sp, #44]	; 0x2c
   19be4:	and	r9, r3, #1
   19be8:	cmp	r2, r1
   19bec:	bls	19cec <__assert_fail@plt+0x8260>
   19bf0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19bf4:	cmp	r9, #0
   19bf8:	movwne	r9, #1
   19bfc:	mvn	r7, r2
   19c00:	orr	r7, r7, r9
   19c04:	tst	r7, #1
   19c08:	bne	19b9c <__assert_fail@plt+0x8110>
   19c0c:	cmp	r8, sl
   19c10:	movcc	r7, #39	; 0x27
   19c14:	strbcc	r7, [r6, r8]
   19c18:	add	r7, r8, #1
   19c1c:	add	r8, r8, #2
   19c20:	cmp	r7, sl
   19c24:	movcc	r2, #39	; 0x27
   19c28:	strbcc	r2, [r6, r7]
   19c2c:	mov	r2, #0
   19c30:	str	r2, [fp, #-56]	; 0xffffffc8
   19c34:	b	19b9c <__assert_fail@plt+0x8110>
   19c38:	cmp	r8, sl
   19c3c:	mov	r2, #1
   19c40:	movcc	r0, #39	; 0x27
   19c44:	strbcc	r0, [r6, r8]
   19c48:	add	r0, r8, #1
   19c4c:	cmp	r0, sl
   19c50:	movcc	r1, #36	; 0x24
   19c54:	strbcc	r1, [r6, r0]
   19c58:	add	r0, r8, #2
   19c5c:	cmp	r0, sl
   19c60:	movcc	r1, #39	; 0x27
   19c64:	strbcc	r1, [r6, r0]
   19c68:	add	r0, r8, #3
   19c6c:	cmp	r0, sl
   19c70:	add	r8, r0, #1
   19c74:	str	r2, [fp, #-56]	; 0xffffffc8
   19c78:	movcc	r1, #92	; 0x5c
   19c7c:	strbcc	r1, [r6, r0]
   19c80:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19c84:	cmp	r1, #2
   19c88:	beq	19cdc <__assert_fail@plt+0x8250>
   19c8c:	add	r1, r7, #1
   19c90:	mov	r4, #0
   19c94:	mov	r9, #1
   19c98:	mov	r5, #48	; 0x30
   19c9c:	cmp	r1, lr
   19ca0:	bcs	19524 <__assert_fail@plt+0x7a98>
   19ca4:	ldrb	r1, [ip, r1]
   19ca8:	sub	r1, r1, #48	; 0x30
   19cac:	uxtb	r1, r1
   19cb0:	cmp	r1, #9
   19cb4:	bhi	19524 <__assert_fail@plt+0x7a98>
   19cb8:	cmp	r8, sl
   19cbc:	movcc	r1, #48	; 0x30
   19cc0:	strbcc	r1, [r6, r8]
   19cc4:	add	r1, r0, #2
   19cc8:	add	r8, r0, #3
   19ccc:	cmp	r1, sl
   19cd0:	movcc	r2, #48	; 0x30
   19cd4:	strbcc	r2, [r6, r1]
   19cd8:	b	19524 <__assert_fail@plt+0x7a98>
   19cdc:	mov	r0, #48	; 0x30
   19ce0:	mov	r9, #1
   19ce4:	mov	r4, #0
   19ce8:	b	197bc <__assert_fail@plt+0x7d30>
   19cec:	cmp	r9, #0
   19cf0:	sub	r7, r1, #1
   19cf4:	mov	r0, r5
   19cf8:	movwne	r9, #1
   19cfc:	cmp	r9, #0
   19d00:	bne	19d40 <__assert_fail@plt+0x82b4>
   19d04:	ldr	r1, [fp, #-56]	; 0xffffffc8
   19d08:	tst	r1, #1
   19d0c:	beq	19d40 <__assert_fail@plt+0x82b4>
   19d10:	cmp	r8, sl
   19d14:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19d18:	movcc	r1, #39	; 0x27
   19d1c:	strbcc	r1, [r6, r8]
   19d20:	add	r1, r8, #1
   19d24:	add	r8, r8, #2
   19d28:	cmp	r1, sl
   19d2c:	movcc	r2, #39	; 0x27
   19d30:	strbcc	r2, [r6, r1]
   19d34:	mov	r1, #0
   19d38:	str	r1, [fp, #-56]	; 0xffffffc8
   19d3c:	b	19848 <__assert_fail@plt+0x7dbc>
   19d40:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19d44:	b	19848 <__assert_fail@plt+0x7dbc>
   19d48:	mov	r4, #0
   19d4c:	b	19d88 <__assert_fail@plt+0x82fc>
   19d50:	mov	r4, #0
   19d54:	cmp	lr, r6
   19d58:	bls	19d88 <__assert_fail@plt+0x82fc>
   19d5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19d60:	ldr	r6, [sp, #44]	; 0x2c
   19d64:	ldr	r0, [sp, #24]
   19d68:	ldrb	r0, [r0, r6]
   19d6c:	cmp	r0, #0
   19d70:	beq	19d90 <__assert_fail@plt+0x8304>
   19d74:	add	r6, r6, #1
   19d78:	add	r0, r7, r6
   19d7c:	cmp	r0, lr
   19d80:	bcc	19d64 <__assert_fail@plt+0x82d8>
   19d84:	b	19d90 <__assert_fail@plt+0x8304>
   19d88:	ldr	ip, [fp, #-84]	; 0xffffffac
   19d8c:	ldr	r6, [sp, #44]	; 0x2c
   19d90:	mov	r1, r6
   19d94:	ldr	r6, [sp, #80]	; 0x50
   19d98:	b	196f0 <__assert_fail@plt+0x7c64>
   19d9c:	mov	lr, r7
   19da0:	b	19da8 <__assert_fail@plt+0x831c>
   19da4:	mvn	lr, #0
   19da8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19dac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19db0:	eor	r0, r7, #2
   19db4:	orr	r0, r0, r8
   19db8:	clz	r0, r0
   19dbc:	lsr	r0, r0, #5
   19dc0:	tst	r1, r0
   19dc4:	bne	19e50 <__assert_fail@plt+0x83c4>
   19dc8:	mov	r0, r1
   19dcc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   19dd0:	cmp	r7, #2
   19dd4:	movwne	r1, #1
   19dd8:	orr	r0, r0, r1
   19ddc:	tst	r0, #1
   19de0:	ldreq	r0, [sp, #60]	; 0x3c
   19de4:	eoreq	r0, r0, #1
   19de8:	tsteq	r0, #1
   19dec:	bne	19efc <__assert_fail@plt+0x8470>
   19df0:	mov	r9, lr
   19df4:	tst	r5, #1
   19df8:	bne	19eb8 <__assert_fail@plt+0x842c>
   19dfc:	ldr	r6, [sp, #56]	; 0x38
   19e00:	mov	r4, #0
   19e04:	cmp	r6, #0
   19e08:	beq	19ef4 <__assert_fail@plt+0x8468>
   19e0c:	ldr	r0, [sp, #84]	; 0x54
   19e10:	mov	r1, #0
   19e14:	cmp	sl, #0
   19e18:	mov	r5, #0
   19e1c:	str	r1, [fp, #-72]	; 0xffffffb8
   19e20:	beq	18ff0 <__assert_fail@plt+0x7564>
   19e24:	b	19efc <__assert_fail@plt+0x8470>
   19e28:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19e2c:	ldr	r2, [sp, #84]	; 0x54
   19e30:	b	19e58 <__assert_fail@plt+0x83cc>
   19e34:	ldr	ip, [fp, #-84]	; 0xffffffac
   19e38:	mov	r2, #1
   19e3c:	mov	lr, r4
   19e40:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19e44:	b	19e58 <__assert_fail@plt+0x83cc>
   19e48:	ldr	r6, [sp, #80]	; 0x50
   19e4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19e50:	ldr	r2, [sp, #84]	; 0x54
   19e54:	mov	r7, #2
   19e58:	mov	r0, #0
   19e5c:	ldr	r1, [fp, #12]
   19e60:	tst	r2, #1
   19e64:	mov	r2, r7
   19e68:	mov	r3, lr
   19e6c:	str	r0, [sp, #8]
   19e70:	ldr	r0, [sp, #72]	; 0x48
   19e74:	movwne	r2, #4
   19e78:	cmp	r7, #2
   19e7c:	movne	r2, r7
   19e80:	str	r2, [sp]
   19e84:	mov	r2, ip
   19e88:	bic	r1, r1, #2
   19e8c:	str	r0, [sp, #12]
   19e90:	ldr	r0, [sp, #76]	; 0x4c
   19e94:	str	r1, [sp, #4]
   19e98:	mov	r1, sl
   19e9c:	str	r0, [sp, #16]
   19ea0:	mov	r0, r6
   19ea4:	bl	18f70 <__assert_fail@plt+0x74e4>
   19ea8:	mov	r8, r0
   19eac:	b	19f54 <__assert_fail@plt+0x84c8>
   19eb0:	ldr	r2, [sp, #84]	; 0x54
   19eb4:	b	19e58 <__assert_fail@plt+0x83cc>
   19eb8:	mov	r0, #5
   19ebc:	ldr	r1, [sp, #56]	; 0x38
   19ec0:	ldr	r2, [fp, #-84]	; 0xffffffac
   19ec4:	mov	r3, r9
   19ec8:	str	r0, [sp]
   19ecc:	ldr	r0, [fp, #12]
   19ed0:	str	r0, [sp, #4]
   19ed4:	ldr	r0, [fp, #16]
   19ed8:	str	r0, [sp, #8]
   19edc:	ldr	r0, [sp, #72]	; 0x48
   19ee0:	str	r0, [sp, #12]
   19ee4:	ldr	r0, [sp, #76]	; 0x4c
   19ee8:	str	r0, [sp, #16]
   19eec:	ldr	r0, [sp, #80]	; 0x50
   19ef0:	b	19ea4 <__assert_fail@plt+0x8418>
   19ef4:	mov	r0, #0
   19ef8:	str	r0, [fp, #-72]	; 0xffffffb8
   19efc:	ldr	r1, [sp, #92]	; 0x5c
   19f00:	cmp	r1, #0
   19f04:	beq	19f44 <__assert_fail@plt+0x84b8>
   19f08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19f0c:	ldr	r2, [sp, #80]	; 0x50
   19f10:	tst	r0, #1
   19f14:	bne	19f48 <__assert_fail@plt+0x84bc>
   19f18:	ldrb	r0, [r1]
   19f1c:	cmp	r0, #0
   19f20:	beq	19f48 <__assert_fail@plt+0x84bc>
   19f24:	add	r1, r1, #1
   19f28:	cmp	r8, sl
   19f2c:	strbcc	r0, [r2, r8]
   19f30:	add	r8, r8, #1
   19f34:	ldrb	r0, [r1], #1
   19f38:	cmp	r0, #0
   19f3c:	bne	19f28 <__assert_fail@plt+0x849c>
   19f40:	b	19f48 <__assert_fail@plt+0x84bc>
   19f44:	ldr	r2, [sp, #80]	; 0x50
   19f48:	cmp	r8, sl
   19f4c:	movcc	r0, #0
   19f50:	strbcc	r0, [r2, r8]
   19f54:	mov	r0, r8
   19f58:	sub	sp, fp, #28
   19f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f60:	mov	r2, #1
   19f64:	b	19e40 <__assert_fail@plt+0x83b4>
   19f68:	ldr	r2, [sp, #84]	; 0x54
   19f6c:	mov	r7, #5
   19f70:	b	19e58 <__assert_fail@plt+0x83cc>
   19f74:	bl	11a5c <abort@plt>
   19f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f7c:	add	fp, sp, #28
   19f80:	sub	sp, sp, #28
   19f84:	movw	r5, #632	; 0x278
   19f88:	cmp	r2, #0
   19f8c:	mov	r4, r1
   19f90:	mov	r7, r0
   19f94:	str	r0, [sp, #20]
   19f98:	movt	r5, #3
   19f9c:	movne	r5, r2
   19fa0:	bl	118e8 <__errno_location@plt>
   19fa4:	mov	sl, r0
   19fa8:	ldm	r5, {r0, r1}
   19fac:	ldr	r2, [r5, #40]	; 0x28
   19fb0:	ldr	r3, [r5, #44]	; 0x2c
   19fb4:	add	r9, r5, #8
   19fb8:	ldr	r6, [sl]
   19fbc:	orr	r8, r1, #1
   19fc0:	mov	r1, #0
   19fc4:	str	r6, [sp, #24]
   19fc8:	stm	sp, {r0, r8, r9}
   19fcc:	str	r2, [sp, #12]
   19fd0:	str	r3, [sp, #16]
   19fd4:	mov	r0, #0
   19fd8:	mov	r2, r7
   19fdc:	mov	r3, r4
   19fe0:	mov	r6, r4
   19fe4:	bl	18f70 <__assert_fail@plt+0x74e4>
   19fe8:	add	r7, r0, #1
   19fec:	mov	r0, r7
   19ff0:	bl	1b998 <__assert_fail@plt+0x9f0c>
   19ff4:	mov	r4, r0
   19ff8:	ldr	r0, [r5]
   19ffc:	ldr	r2, [r5, #44]	; 0x2c
   1a000:	ldr	r1, [r5, #40]	; 0x28
   1a004:	mov	r3, r6
   1a008:	stm	sp, {r0, r8, r9}
   1a00c:	str	r2, [sp, #16]
   1a010:	str	r1, [sp, #12]
   1a014:	mov	r0, r4
   1a018:	mov	r1, r7
   1a01c:	ldr	r2, [sp, #20]
   1a020:	bl	18f70 <__assert_fail@plt+0x74e4>
   1a024:	ldr	r0, [sp, #24]
   1a028:	str	r0, [sl]
   1a02c:	mov	r0, r4
   1a030:	sub	sp, fp, #28
   1a034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a03c:	add	fp, sp, #28
   1a040:	sub	sp, sp, #36	; 0x24
   1a044:	movw	r8, #632	; 0x278
   1a048:	cmp	r3, #0
   1a04c:	mov	r4, r2
   1a050:	str	r2, [sp, #24]
   1a054:	mov	r5, r1
   1a058:	mov	r6, r0
   1a05c:	str	r0, [sp, #20]
   1a060:	movt	r8, #3
   1a064:	movne	r8, r3
   1a068:	bl	118e8 <__errno_location@plt>
   1a06c:	str	r0, [sp, #28]
   1a070:	cmp	r4, #0
   1a074:	add	sl, r8, #8
   1a078:	ldm	r8, {r3, r9}
   1a07c:	ldr	r7, [r0]
   1a080:	ldr	r1, [r8, #40]	; 0x28
   1a084:	ldr	r2, [r8, #44]	; 0x2c
   1a088:	mov	r0, #0
   1a08c:	orreq	r9, r9, #1
   1a090:	str	r7, [sp, #32]
   1a094:	mov	r7, r5
   1a098:	stm	sp, {r3, r9, sl}
   1a09c:	str	r1, [sp, #12]
   1a0a0:	str	r2, [sp, #16]
   1a0a4:	mov	r1, #0
   1a0a8:	mov	r2, r6
   1a0ac:	mov	r3, r5
   1a0b0:	bl	18f70 <__assert_fail@plt+0x74e4>
   1a0b4:	add	r4, r0, #1
   1a0b8:	mov	r5, r0
   1a0bc:	mov	r0, r4
   1a0c0:	bl	1b998 <__assert_fail@plt+0x9f0c>
   1a0c4:	mov	r6, r0
   1a0c8:	ldr	r0, [r8]
   1a0cc:	ldr	r2, [r8, #44]	; 0x2c
   1a0d0:	ldr	r1, [r8, #40]	; 0x28
   1a0d4:	mov	r3, r7
   1a0d8:	stm	sp, {r0, r9, sl}
   1a0dc:	str	r2, [sp, #16]
   1a0e0:	str	r1, [sp, #12]
   1a0e4:	mov	r0, r6
   1a0e8:	mov	r1, r4
   1a0ec:	ldr	r2, [sp, #20]
   1a0f0:	bl	18f70 <__assert_fail@plt+0x74e4>
   1a0f4:	ldr	r0, [sp, #24]
   1a0f8:	ldr	r1, [sp, #32]
   1a0fc:	ldr	r2, [sp, #28]
   1a100:	cmp	r0, #0
   1a104:	str	r1, [r2]
   1a108:	strne	r5, [r0]
   1a10c:	mov	r0, r6
   1a110:	sub	sp, fp, #28
   1a114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a118:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a11c:	add	fp, sp, #24
   1a120:	movw	r5, #404	; 0x194
   1a124:	movw	r8, #400	; 0x190
   1a128:	movt	r5, #3
   1a12c:	movt	r8, #3
   1a130:	ldr	r0, [r5]
   1a134:	ldr	r4, [r8]
   1a138:	cmp	r0, #2
   1a13c:	blt	1a168 <__assert_fail@plt+0x86dc>
   1a140:	add	r7, r4, #12
   1a144:	mov	r6, #0
   1a148:	ldr	r0, [r7, r6, lsl #3]
   1a14c:	bl	16638 <__assert_fail@plt+0x4bac>
   1a150:	ldr	r1, [r5]
   1a154:	add	r2, r6, #2
   1a158:	add	r0, r6, #1
   1a15c:	mov	r6, r0
   1a160:	cmp	r2, r1
   1a164:	blt	1a148 <__assert_fail@plt+0x86bc>
   1a168:	ldr	r0, [r4, #4]
   1a16c:	movw	r7, #680	; 0x2a8
   1a170:	movt	r7, #3
   1a174:	cmp	r0, r7
   1a178:	beq	1a190 <__assert_fail@plt+0x8704>
   1a17c:	bl	16638 <__assert_fail@plt+0x4bac>
   1a180:	movw	r0, #408	; 0x198
   1a184:	mov	r6, #256	; 0x100
   1a188:	movt	r0, #3
   1a18c:	strd	r6, [r0]
   1a190:	movw	r6, #408	; 0x198
   1a194:	movt	r6, #3
   1a198:	cmp	r4, r6
   1a19c:	beq	1a1ac <__assert_fail@plt+0x8720>
   1a1a0:	mov	r0, r4
   1a1a4:	bl	16638 <__assert_fail@plt+0x4bac>
   1a1a8:	str	r6, [r8]
   1a1ac:	mov	r0, #1
   1a1b0:	str	r0, [r5]
   1a1b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a1b8:	movw	r3, #632	; 0x278
   1a1bc:	mvn	r2, #0
   1a1c0:	movt	r3, #3
   1a1c4:	b	1a1c8 <__assert_fail@plt+0x873c>
   1a1c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1cc:	add	fp, sp, #28
   1a1d0:	sub	sp, sp, #44	; 0x2c
   1a1d4:	mov	r7, r3
   1a1d8:	str	r2, [sp, #36]	; 0x24
   1a1dc:	str	r1, [sp, #32]
   1a1e0:	mov	r5, r0
   1a1e4:	bl	118e8 <__errno_location@plt>
   1a1e8:	cmp	r5, #0
   1a1ec:	blt	1a358 <__assert_fail@plt+0x88cc>
   1a1f0:	cmn	r5, #-2147483647	; 0x80000001
   1a1f4:	beq	1a358 <__assert_fail@plt+0x88cc>
   1a1f8:	movw	r8, #404	; 0x194
   1a1fc:	movw	r4, #400	; 0x190
   1a200:	str	r0, [sp, #28]
   1a204:	ldr	r0, [r0]
   1a208:	movt	r8, #3
   1a20c:	movt	r4, #3
   1a210:	ldr	r1, [r8]
   1a214:	ldr	r6, [r4]
   1a218:	str	r0, [sp, #24]
   1a21c:	cmp	r1, r5
   1a220:	ble	1a22c <__assert_fail@plt+0x87a0>
   1a224:	mov	sl, r6
   1a228:	b	1a294 <__assert_fail@plt+0x8808>
   1a22c:	movw	r9, #408	; 0x198
   1a230:	mov	r0, #8
   1a234:	add	r2, r5, #1
   1a238:	str	r1, [fp, #-32]	; 0xffffffe0
   1a23c:	mvn	r3, #-2147483648	; 0x80000000
   1a240:	movt	r9, #3
   1a244:	str	r0, [sp]
   1a248:	sub	r2, r2, r1
   1a24c:	sub	r1, fp, #32
   1a250:	subs	r0, r6, r9
   1a254:	movne	r0, r6
   1a258:	bl	1bb98 <__assert_fail@plt+0xa10c>
   1a25c:	cmp	r6, r9
   1a260:	mov	sl, r0
   1a264:	str	r0, [r4]
   1a268:	ldrdeq	r0, [r9]
   1a26c:	stmeq	sl, {r0, r1}
   1a270:	ldr	r1, [r8]
   1a274:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a278:	add	r0, sl, r1, lsl #3
   1a27c:	sub	r1, r2, r1
   1a280:	lsl	r2, r1, #3
   1a284:	mov	r1, #0
   1a288:	bl	11918 <memset@plt>
   1a28c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a290:	str	r0, [r8]
   1a294:	mov	r9, sl
   1a298:	ldr	r6, [r9, r5, lsl #3]!
   1a29c:	ldr	r4, [r9, #4]!
   1a2a0:	ldm	r7, {r0, r1}
   1a2a4:	ldr	r2, [r7, #40]	; 0x28
   1a2a8:	ldr	r3, [r7, #44]	; 0x2c
   1a2ac:	orr	r8, r1, #1
   1a2b0:	add	r1, r7, #8
   1a2b4:	stm	sp, {r0, r8}
   1a2b8:	add	r0, sp, #8
   1a2bc:	str	r1, [sp, #20]
   1a2c0:	stm	r0, {r1, r2, r3}
   1a2c4:	mov	r0, r4
   1a2c8:	mov	r1, r6
   1a2cc:	ldr	r2, [sp, #32]
   1a2d0:	ldr	r3, [sp, #36]	; 0x24
   1a2d4:	bl	18f70 <__assert_fail@plt+0x74e4>
   1a2d8:	cmp	r6, r0
   1a2dc:	bhi	1a340 <__assert_fail@plt+0x88b4>
   1a2e0:	add	r6, r0, #1
   1a2e4:	movw	r0, #680	; 0x2a8
   1a2e8:	movt	r0, #3
   1a2ec:	str	r6, [sl, r5, lsl #3]
   1a2f0:	cmp	r4, r0
   1a2f4:	beq	1a300 <__assert_fail@plt+0x8874>
   1a2f8:	mov	r0, r4
   1a2fc:	bl	16638 <__assert_fail@plt+0x4bac>
   1a300:	mov	r0, r6
   1a304:	bl	1b998 <__assert_fail@plt+0x9f0c>
   1a308:	str	r0, [r9]
   1a30c:	mov	r4, r0
   1a310:	add	r3, sp, #8
   1a314:	ldr	r0, [r7]
   1a318:	ldr	r1, [r7, #40]	; 0x28
   1a31c:	ldr	r2, [r7, #44]	; 0x2c
   1a320:	stm	sp, {r0, r8}
   1a324:	ldr	r0, [sp, #20]
   1a328:	stm	r3, {r0, r1, r2}
   1a32c:	mov	r0, r4
   1a330:	mov	r1, r6
   1a334:	ldr	r2, [sp, #32]
   1a338:	ldr	r3, [sp, #36]	; 0x24
   1a33c:	bl	18f70 <__assert_fail@plt+0x74e4>
   1a340:	ldr	r0, [sp, #28]
   1a344:	ldr	r1, [sp, #24]
   1a348:	str	r1, [r0]
   1a34c:	mov	r0, r4
   1a350:	sub	sp, fp, #28
   1a354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a358:	bl	11a5c <abort@plt>
   1a35c:	movw	r3, #632	; 0x278
   1a360:	movt	r3, #3
   1a364:	b	1a1c8 <__assert_fail@plt+0x873c>
   1a368:	movw	r3, #632	; 0x278
   1a36c:	mov	r1, r0
   1a370:	mov	r0, #0
   1a374:	mvn	r2, #0
   1a378:	movt	r3, #3
   1a37c:	b	1a1c8 <__assert_fail@plt+0x873c>
   1a380:	movw	r3, #632	; 0x278
   1a384:	mov	r2, r1
   1a388:	mov	r1, r0
   1a38c:	mov	r0, #0
   1a390:	movt	r3, #3
   1a394:	b	1a1c8 <__assert_fail@plt+0x873c>
   1a398:	push	{fp, lr}
   1a39c:	mov	fp, sp
   1a3a0:	sub	sp, sp, #48	; 0x30
   1a3a4:	vmov.i32	q8, #0	; 0x00000000
   1a3a8:	mov	ip, #32
   1a3ac:	mov	r3, sp
   1a3b0:	mov	lr, r2
   1a3b4:	cmp	r1, #10
   1a3b8:	add	r2, r3, #16
   1a3bc:	vst1.64	{d16-d17}, [r3], ip
   1a3c0:	vst1.64	{d16-d17}, [r3]
   1a3c4:	vst1.64	{d16-d17}, [r2]
   1a3c8:	beq	1a3e8 <__assert_fail@plt+0x895c>
   1a3cc:	str	r1, [sp]
   1a3d0:	mov	r3, sp
   1a3d4:	mov	r1, lr
   1a3d8:	mvn	r2, #0
   1a3dc:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a3e0:	mov	sp, fp
   1a3e4:	pop	{fp, pc}
   1a3e8:	bl	11a5c <abort@plt>
   1a3ec:	push	{r4, sl, fp, lr}
   1a3f0:	add	fp, sp, #8
   1a3f4:	sub	sp, sp, #48	; 0x30
   1a3f8:	mov	ip, r3
   1a3fc:	mov	r3, sp
   1a400:	vmov.i32	q8, #0	; 0x00000000
   1a404:	mov	lr, #32
   1a408:	cmp	r1, #10
   1a40c:	add	r4, r3, #16
   1a410:	vst1.64	{d16-d17}, [r3], lr
   1a414:	vst1.64	{d16-d17}, [r3]
   1a418:	vst1.64	{d16-d17}, [r4]
   1a41c:	beq	1a43c <__assert_fail@plt+0x89b0>
   1a420:	str	r1, [sp]
   1a424:	mov	r1, r2
   1a428:	mov	r3, sp
   1a42c:	mov	r2, ip
   1a430:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a434:	sub	sp, fp, #8
   1a438:	pop	{r4, sl, fp, pc}
   1a43c:	bl	11a5c <abort@plt>
   1a440:	push	{fp, lr}
   1a444:	mov	fp, sp
   1a448:	sub	sp, sp, #48	; 0x30
   1a44c:	mov	r3, sp
   1a450:	vmov.i32	q8, #0	; 0x00000000
   1a454:	mov	ip, #32
   1a458:	cmp	r0, #10
   1a45c:	add	r2, r3, #16
   1a460:	vst1.64	{d16-d17}, [r3], ip
   1a464:	vst1.64	{d16-d17}, [r3]
   1a468:	vst1.64	{d16-d17}, [r2]
   1a46c:	beq	1a48c <__assert_fail@plt+0x8a00>
   1a470:	str	r0, [sp]
   1a474:	mov	r3, sp
   1a478:	mov	r0, #0
   1a47c:	mvn	r2, #0
   1a480:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a484:	mov	sp, fp
   1a488:	pop	{fp, pc}
   1a48c:	bl	11a5c <abort@plt>
   1a490:	push	{fp, lr}
   1a494:	mov	fp, sp
   1a498:	sub	sp, sp, #48	; 0x30
   1a49c:	mov	r3, sp
   1a4a0:	vmov.i32	q8, #0	; 0x00000000
   1a4a4:	mov	ip, #32
   1a4a8:	cmp	r0, #10
   1a4ac:	add	lr, r3, #16
   1a4b0:	vst1.64	{d16-d17}, [r3], ip
   1a4b4:	vst1.64	{d16-d17}, [r3]
   1a4b8:	vst1.64	{d16-d17}, [lr]
   1a4bc:	beq	1a4d8 <__assert_fail@plt+0x8a4c>
   1a4c0:	str	r0, [sp]
   1a4c4:	mov	r3, sp
   1a4c8:	mov	r0, #0
   1a4cc:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a4d0:	mov	sp, fp
   1a4d4:	pop	{fp, pc}
   1a4d8:	bl	11a5c <abort@plt>
   1a4dc:	push	{r4, sl, fp, lr}
   1a4e0:	add	fp, sp, #8
   1a4e4:	sub	sp, sp, #48	; 0x30
   1a4e8:	mov	lr, r0
   1a4ec:	movw	r0, #632	; 0x278
   1a4f0:	mov	r3, #32
   1a4f4:	mov	ip, r1
   1a4f8:	mov	r4, #1
   1a4fc:	movt	r0, #3
   1a500:	add	r1, r0, #16
   1a504:	vld1.64	{d16-d17}, [r0], r3
   1a508:	mov	r3, sp
   1a50c:	vld1.64	{d18-d19}, [r1]
   1a510:	add	r1, r3, #16
   1a514:	vld1.64	{d20-d21}, [r0]
   1a518:	add	r0, r3, #32
   1a51c:	vst1.64	{d18-d19}, [r1]
   1a520:	mov	r1, r3
   1a524:	vst1.64	{d20-d21}, [r0]
   1a528:	mov	r0, #28
   1a52c:	and	r0, r0, r2, lsr #3
   1a530:	and	r2, r2, #31
   1a534:	vst1.64	{d16-d17}, [r1], r0
   1a538:	ldr	r0, [r1, #8]
   1a53c:	bic	r4, r4, r0, lsr r2
   1a540:	eor	r0, r0, r4, lsl r2
   1a544:	mov	r2, ip
   1a548:	str	r0, [r1, #8]
   1a54c:	mov	r0, #0
   1a550:	mov	r1, lr
   1a554:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a558:	sub	sp, fp, #8
   1a55c:	pop	{r4, sl, fp, pc}
   1a560:	push	{fp, lr}
   1a564:	mov	fp, sp
   1a568:	sub	sp, sp, #48	; 0x30
   1a56c:	mov	ip, r0
   1a570:	movw	r0, #632	; 0x278
   1a574:	mov	r3, #32
   1a578:	movt	r0, #3
   1a57c:	add	r2, r0, #16
   1a580:	vld1.64	{d16-d17}, [r0], r3
   1a584:	mov	r3, sp
   1a588:	vld1.64	{d18-d19}, [r2]
   1a58c:	add	r2, r3, #16
   1a590:	vld1.64	{d20-d21}, [r0]
   1a594:	add	r0, r3, #32
   1a598:	vst1.64	{d18-d19}, [r2]
   1a59c:	mov	r2, r3
   1a5a0:	vst1.64	{d20-d21}, [r0]
   1a5a4:	mov	r0, #28
   1a5a8:	and	r0, r0, r1, lsr #3
   1a5ac:	and	r1, r1, #31
   1a5b0:	vst1.64	{d16-d17}, [r2], r0
   1a5b4:	mov	r0, #1
   1a5b8:	ldr	lr, [r2, #8]
   1a5bc:	bic	r0, r0, lr, lsr r1
   1a5c0:	eor	r0, lr, r0, lsl r1
   1a5c4:	mov	r1, ip
   1a5c8:	str	r0, [r2, #8]
   1a5cc:	mov	r0, #0
   1a5d0:	mvn	r2, #0
   1a5d4:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a5d8:	mov	sp, fp
   1a5dc:	pop	{fp, pc}
   1a5e0:	push	{fp, lr}
   1a5e4:	mov	fp, sp
   1a5e8:	sub	sp, sp, #48	; 0x30
   1a5ec:	movw	r2, #632	; 0x278
   1a5f0:	mov	r3, #32
   1a5f4:	mov	r1, r0
   1a5f8:	movt	r2, #3
   1a5fc:	add	r0, r2, #16
   1a600:	vld1.64	{d16-d17}, [r2], r3
   1a604:	mov	r3, sp
   1a608:	vld1.64	{d18-d19}, [r0]
   1a60c:	add	r0, r3, #16
   1a610:	vld1.64	{d20-d21}, [r2]
   1a614:	mov	r2, r3
   1a618:	vst1.64	{d18-d19}, [r0]
   1a61c:	add	r0, r3, #32
   1a620:	vst1.64	{d20-d21}, [r0]
   1a624:	mov	r0, #12
   1a628:	vst1.64	{d16-d17}, [r2], r0
   1a62c:	ldr	r0, [r2]
   1a630:	orr	r0, r0, #67108864	; 0x4000000
   1a634:	str	r0, [r2]
   1a638:	mov	r0, #0
   1a63c:	mvn	r2, #0
   1a640:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a644:	mov	sp, fp
   1a648:	pop	{fp, pc}
   1a64c:	push	{fp, lr}
   1a650:	mov	fp, sp
   1a654:	sub	sp, sp, #48	; 0x30
   1a658:	mov	ip, r1
   1a65c:	mov	r1, r0
   1a660:	movw	r0, #632	; 0x278
   1a664:	mov	r3, #32
   1a668:	movt	r0, #3
   1a66c:	add	r2, r0, #16
   1a670:	vld1.64	{d16-d17}, [r0], r3
   1a674:	mov	r3, sp
   1a678:	vld1.64	{d18-d19}, [r2]
   1a67c:	add	r2, r3, #16
   1a680:	vld1.64	{d20-d21}, [r0]
   1a684:	add	r0, r3, #32
   1a688:	vst1.64	{d18-d19}, [r2]
   1a68c:	mov	r2, r3
   1a690:	vst1.64	{d20-d21}, [r0]
   1a694:	mov	r0, #12
   1a698:	vst1.64	{d16-d17}, [r2], r0
   1a69c:	ldr	r0, [r2]
   1a6a0:	orr	r0, r0, #67108864	; 0x4000000
   1a6a4:	str	r0, [r2]
   1a6a8:	mov	r0, #0
   1a6ac:	mov	r2, ip
   1a6b0:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a6b4:	mov	sp, fp
   1a6b8:	pop	{fp, pc}
   1a6bc:	push	{r4, sl, fp, lr}
   1a6c0:	add	fp, sp, #8
   1a6c4:	sub	sp, sp, #96	; 0x60
   1a6c8:	mov	ip, r2
   1a6cc:	mov	r2, sp
   1a6d0:	vmov.i32	q8, #0	; 0x00000000
   1a6d4:	mov	r4, #28
   1a6d8:	cmp	r1, #10
   1a6dc:	mov	r3, r2
   1a6e0:	add	lr, r2, #16
   1a6e4:	vst1.64	{d16-d17}, [r3], r4
   1a6e8:	vst1.64	{d16-d17}, [lr]
   1a6ec:	vst1.32	{d16-d17}, [r3]
   1a6f0:	beq	1a740 <__assert_fail@plt+0x8cb4>
   1a6f4:	vld1.64	{d16-d17}, [r2], r4
   1a6f8:	vld1.64	{d18-d19}, [lr]
   1a6fc:	add	r3, sp, #48	; 0x30
   1a700:	add	r4, r3, #4
   1a704:	vld1.32	{d20-d21}, [r2]
   1a708:	add	r2, r3, #20
   1a70c:	vst1.32	{d16-d17}, [r4]
   1a710:	vst1.32	{d18-d19}, [r2]
   1a714:	add	r2, r3, #32
   1a718:	vst1.32	{d20-d21}, [r2]
   1a71c:	str	r1, [sp, #48]	; 0x30
   1a720:	mvn	r2, #0
   1a724:	ldr	r1, [sp, #60]	; 0x3c
   1a728:	orr	r1, r1, #67108864	; 0x4000000
   1a72c:	str	r1, [sp, #60]	; 0x3c
   1a730:	mov	r1, ip
   1a734:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a738:	sub	sp, fp, #8
   1a73c:	pop	{r4, sl, fp, pc}
   1a740:	bl	11a5c <abort@plt>
   1a744:	push	{r4, r5, fp, lr}
   1a748:	add	fp, sp, #8
   1a74c:	sub	sp, sp, #48	; 0x30
   1a750:	mov	ip, r3
   1a754:	movw	r3, #632	; 0x278
   1a758:	mov	lr, #32
   1a75c:	cmp	r1, #0
   1a760:	mov	r5, sp
   1a764:	movt	r3, #3
   1a768:	cmpne	r2, #0
   1a76c:	add	r4, r3, #16
   1a770:	vld1.64	{d16-d17}, [r3], lr
   1a774:	vld1.64	{d18-d19}, [r4]
   1a778:	add	r4, r5, #16
   1a77c:	vld1.64	{d20-d21}, [r3]
   1a780:	vst1.64	{d16-d17}, [r5], lr
   1a784:	mov	r3, #10
   1a788:	vst1.64	{d18-d19}, [r4]
   1a78c:	vst1.64	{d20-d21}, [r5]
   1a790:	str	r3, [sp]
   1a794:	bne	1a79c <__assert_fail@plt+0x8d10>
   1a798:	bl	11a5c <abort@plt>
   1a79c:	str	r2, [sp, #44]	; 0x2c
   1a7a0:	str	r1, [sp, #40]	; 0x28
   1a7a4:	mov	r3, sp
   1a7a8:	mov	r1, ip
   1a7ac:	mvn	r2, #0
   1a7b0:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a7b4:	sub	sp, fp, #8
   1a7b8:	pop	{r4, r5, fp, pc}
   1a7bc:	push	{r4, r5, fp, lr}
   1a7c0:	add	fp, sp, #8
   1a7c4:	sub	sp, sp, #48	; 0x30
   1a7c8:	mov	lr, r3
   1a7cc:	movw	r3, #632	; 0x278
   1a7d0:	mov	ip, #32
   1a7d4:	cmp	r1, #0
   1a7d8:	mov	r5, sp
   1a7dc:	movt	r3, #3
   1a7e0:	cmpne	r2, #0
   1a7e4:	add	r4, r3, #16
   1a7e8:	vld1.64	{d16-d17}, [r3], ip
   1a7ec:	vld1.64	{d18-d19}, [r4]
   1a7f0:	add	r4, r5, #16
   1a7f4:	vld1.64	{d20-d21}, [r3]
   1a7f8:	vst1.64	{d16-d17}, [r5], ip
   1a7fc:	mov	r3, #10
   1a800:	vst1.64	{d18-d19}, [r4]
   1a804:	vst1.64	{d20-d21}, [r5]
   1a808:	str	r3, [sp]
   1a80c:	bne	1a814 <__assert_fail@plt+0x8d88>
   1a810:	bl	11a5c <abort@plt>
   1a814:	ldr	ip, [fp, #8]
   1a818:	str	r2, [sp, #44]	; 0x2c
   1a81c:	str	r1, [sp, #40]	; 0x28
   1a820:	mov	r3, sp
   1a824:	mov	r1, lr
   1a828:	mov	r2, ip
   1a82c:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a830:	sub	sp, fp, #8
   1a834:	pop	{r4, r5, fp, pc}
   1a838:	push	{r4, sl, fp, lr}
   1a83c:	add	fp, sp, #8
   1a840:	sub	sp, sp, #48	; 0x30
   1a844:	mov	ip, r2
   1a848:	movw	r2, #632	; 0x278
   1a84c:	mov	lr, #32
   1a850:	cmp	r0, #0
   1a854:	mov	r4, sp
   1a858:	movt	r2, #3
   1a85c:	cmpne	r1, #0
   1a860:	add	r3, r2, #16
   1a864:	vld1.64	{d16-d17}, [r2], lr
   1a868:	vld1.64	{d18-d19}, [r3]
   1a86c:	add	r3, r4, #16
   1a870:	vld1.64	{d20-d21}, [r2]
   1a874:	vst1.64	{d16-d17}, [r4], lr
   1a878:	mov	r2, #10
   1a87c:	vst1.64	{d18-d19}, [r3]
   1a880:	vst1.64	{d20-d21}, [r4]
   1a884:	str	r2, [sp]
   1a888:	bne	1a890 <__assert_fail@plt+0x8e04>
   1a88c:	bl	11a5c <abort@plt>
   1a890:	str	r1, [sp, #44]	; 0x2c
   1a894:	str	r0, [sp, #40]	; 0x28
   1a898:	mov	r3, sp
   1a89c:	mov	r0, #0
   1a8a0:	mov	r1, ip
   1a8a4:	mvn	r2, #0
   1a8a8:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a8ac:	sub	sp, fp, #8
   1a8b0:	pop	{r4, sl, fp, pc}
   1a8b4:	push	{r4, r5, fp, lr}
   1a8b8:	add	fp, sp, #8
   1a8bc:	sub	sp, sp, #48	; 0x30
   1a8c0:	mov	lr, r2
   1a8c4:	movw	r2, #632	; 0x278
   1a8c8:	mov	ip, r3
   1a8cc:	mov	r3, #32
   1a8d0:	cmp	r0, #0
   1a8d4:	mov	r5, sp
   1a8d8:	movt	r2, #3
   1a8dc:	cmpne	r1, #0
   1a8e0:	add	r4, r2, #16
   1a8e4:	vld1.64	{d16-d17}, [r2], r3
   1a8e8:	vld1.64	{d18-d19}, [r4]
   1a8ec:	add	r4, r5, #16
   1a8f0:	vld1.64	{d20-d21}, [r2]
   1a8f4:	vst1.64	{d16-d17}, [r5], r3
   1a8f8:	mov	r2, #10
   1a8fc:	vst1.64	{d18-d19}, [r4]
   1a900:	vst1.64	{d20-d21}, [r5]
   1a904:	str	r2, [sp]
   1a908:	bne	1a910 <__assert_fail@plt+0x8e84>
   1a90c:	bl	11a5c <abort@plt>
   1a910:	str	r1, [sp, #44]	; 0x2c
   1a914:	str	r0, [sp, #40]	; 0x28
   1a918:	mov	r3, sp
   1a91c:	mov	r0, #0
   1a920:	mov	r1, lr
   1a924:	mov	r2, ip
   1a928:	bl	1a1c8 <__assert_fail@plt+0x873c>
   1a92c:	sub	sp, fp, #8
   1a930:	pop	{r4, r5, fp, pc}
   1a934:	movw	r3, #416	; 0x1a0
   1a938:	movt	r3, #3
   1a93c:	b	1a1c8 <__assert_fail@plt+0x873c>
   1a940:	movw	r3, #416	; 0x1a0
   1a944:	mov	r2, r1
   1a948:	mov	r1, r0
   1a94c:	mov	r0, #0
   1a950:	movt	r3, #3
   1a954:	b	1a1c8 <__assert_fail@plt+0x873c>
   1a958:	movw	r3, #416	; 0x1a0
   1a95c:	mvn	r2, #0
   1a960:	movt	r3, #3
   1a964:	b	1a1c8 <__assert_fail@plt+0x873c>
   1a968:	movw	r3, #416	; 0x1a0
   1a96c:	mov	r1, r0
   1a970:	mov	r0, #0
   1a974:	mvn	r2, #0
   1a978:	movt	r3, #3
   1a97c:	b	1a1c8 <__assert_fail@plt+0x873c>
   1a980:	push	{r4, r5, fp, lr}
   1a984:	add	fp, sp, #8
   1a988:	mov	r5, r0
   1a98c:	mov	r4, r1
   1a990:	mov	r0, #0
   1a994:	mov	r2, #5
   1a998:	mov	r1, r5
   1a99c:	bl	1172c <dcgettext@plt>
   1a9a0:	cmp	r0, r5
   1a9a4:	popne	{r4, r5, fp, pc}
   1a9a8:	bl	1d104 <__assert_fail@plt+0xb678>
   1a9ac:	ldrb	r1, [r0]
   1a9b0:	and	r1, r1, #223	; 0xdf
   1a9b4:	cmp	r1, #71	; 0x47
   1a9b8:	beq	1aa20 <__assert_fail@plt+0x8f94>
   1a9bc:	cmp	r1, #85	; 0x55
   1a9c0:	bne	1aa44 <__assert_fail@plt+0x8fb8>
   1a9c4:	ldrb	r1, [r0, #1]
   1a9c8:	and	r1, r1, #223	; 0xdf
   1a9cc:	cmp	r1, #84	; 0x54
   1a9d0:	bne	1aa44 <__assert_fail@plt+0x8fb8>
   1a9d4:	ldrb	r1, [r0, #2]
   1a9d8:	and	r1, r1, #223	; 0xdf
   1a9dc:	cmp	r1, #70	; 0x46
   1a9e0:	ldrbeq	r1, [r0, #3]
   1a9e4:	cmpeq	r1, #45	; 0x2d
   1a9e8:	bne	1aa44 <__assert_fail@plt+0x8fb8>
   1a9ec:	ldrb	r1, [r0, #4]
   1a9f0:	cmp	r1, #56	; 0x38
   1a9f4:	ldrbeq	r0, [r0, #5]
   1a9f8:	cmpeq	r0, #0
   1a9fc:	bne	1aa44 <__assert_fail@plt+0x8fb8>
   1aa00:	ldrb	r1, [r5]
   1aa04:	movw	r2, #62641	; 0xf4b1
   1aa08:	movw	r0, #62645	; 0xf4b5
   1aa0c:	movt	r2, #1
   1aa10:	movt	r0, #1
   1aa14:	cmp	r1, #96	; 0x60
   1aa18:	moveq	r0, r2
   1aa1c:	pop	{r4, r5, fp, pc}
   1aa20:	ldrb	r1, [r0, #1]
   1aa24:	and	r1, r1, #223	; 0xdf
   1aa28:	cmp	r1, #66	; 0x42
   1aa2c:	bne	1aa44 <__assert_fail@plt+0x8fb8>
   1aa30:	ldrb	r1, [r0, #2]
   1aa34:	cmp	r1, #49	; 0x31
   1aa38:	ldrbeq	r1, [r0, #3]
   1aa3c:	cmpeq	r1, #56	; 0x38
   1aa40:	beq	1aa60 <__assert_fail@plt+0x8fd4>
   1aa44:	movw	r1, #62637	; 0xf4ad
   1aa48:	movw	r0, #63621	; 0xf885
   1aa4c:	cmp	r4, #9
   1aa50:	movt	r1, #1
   1aa54:	movt	r0, #1
   1aa58:	moveq	r0, r1
   1aa5c:	pop	{r4, r5, fp, pc}
   1aa60:	ldrb	r1, [r0, #4]
   1aa64:	cmp	r1, #48	; 0x30
   1aa68:	ldrbeq	r1, [r0, #5]
   1aa6c:	cmpeq	r1, #51	; 0x33
   1aa70:	bne	1aa44 <__assert_fail@plt+0x8fb8>
   1aa74:	ldrb	r1, [r0, #6]
   1aa78:	cmp	r1, #48	; 0x30
   1aa7c:	ldrbeq	r0, [r0, #7]
   1aa80:	cmpeq	r0, #0
   1aa84:	bne	1aa44 <__assert_fail@plt+0x8fb8>
   1aa88:	ldrb	r1, [r5]
   1aa8c:	movw	r2, #62649	; 0xf4b9
   1aa90:	movw	r0, #62653	; 0xf4bd
   1aa94:	movt	r2, #1
   1aa98:	movt	r0, #1
   1aa9c:	b	1aa14 <__assert_fail@plt+0x8f88>
   1aaa0:	push	{r4, r5, fp, lr}
   1aaa4:	add	fp, sp, #8
   1aaa8:	mov	r4, #0
   1aaac:	mov	r5, r0
   1aab0:	mov	r1, #524288	; 0x80000
   1aab4:	str	r4, [r0, #4]
   1aab8:	movw	r0, #62039	; 0xf257
   1aabc:	movt	r0, #1
   1aac0:	bl	1cfbc <__assert_fail@plt+0xb530>
   1aac4:	cmn	r0, #1
   1aac8:	str	r0, [r5]
   1aacc:	ble	1aad8 <__assert_fail@plt+0x904c>
   1aad0:	mov	r0, r4
   1aad4:	pop	{r4, r5, fp, pc}
   1aad8:	mov	r0, #0
   1aadc:	mov	r1, #0
   1aae0:	mov	r4, #0
   1aae4:	bl	11888 <getcwd@plt>
   1aae8:	cmp	r0, #0
   1aaec:	str	r0, [r5, #4]
   1aaf0:	mvneq	r4, #0
   1aaf4:	mov	r0, r4
   1aaf8:	pop	{r4, r5, fp, pc}
   1aafc:	ldr	r1, [r0]
   1ab00:	cmp	r1, #0
   1ab04:	blt	1ab10 <__assert_fail@plt+0x9084>
   1ab08:	mov	r0, r1
   1ab0c:	b	119f0 <fchdir@plt>
   1ab10:	ldr	r0, [r0, #4]
   1ab14:	b	1cb20 <__assert_fail@plt+0xb094>
   1ab18:	push	{r4, sl, fp, lr}
   1ab1c:	add	fp, sp, #8
   1ab20:	mov	r4, r0
   1ab24:	ldr	r0, [r0]
   1ab28:	cmp	r0, #0
   1ab2c:	blt	1ab34 <__assert_fail@plt+0x90a8>
   1ab30:	bl	11a68 <close@plt>
   1ab34:	ldr	r0, [r4, #4]
   1ab38:	pop	{r4, sl, fp, lr}
   1ab3c:	b	16638 <__assert_fail@plt+0x4bac>
   1ab40:	push	{r4, r5, fp, lr}
   1ab44:	add	fp, sp, #8
   1ab48:	mov	r4, r1
   1ab4c:	bl	118a0 <getfilecon@plt>
   1ab50:	cmp	r0, #10
   1ab54:	beq	1ab6c <__assert_fail@plt+0x90e0>
   1ab58:	cmp	r0, #0
   1ab5c:	bne	1abb0 <__assert_fail@plt+0x9124>
   1ab60:	bl	118e8 <__errno_location@plt>
   1ab64:	mov	r1, #95	; 0x5f
   1ab68:	b	1aba8 <__assert_fail@plt+0x911c>
   1ab6c:	ldr	r5, [r4]
   1ab70:	movw	r1, #62740	; 0xf514
   1ab74:	movt	r1, #1
   1ab78:	mov	r0, r5
   1ab7c:	bl	116b4 <strcmp@plt>
   1ab80:	mov	r1, r0
   1ab84:	mov	r0, #10
   1ab88:	cmp	r1, #0
   1ab8c:	popne	{r4, r5, fp, pc}
   1ab90:	mov	r0, r5
   1ab94:	bl	11a14 <freecon@plt>
   1ab98:	mov	r0, #0
   1ab9c:	str	r0, [r4]
   1aba0:	bl	118e8 <__errno_location@plt>
   1aba4:	mov	r1, #61	; 0x3d
   1aba8:	str	r1, [r0]
   1abac:	mvn	r0, #0
   1abb0:	pop	{r4, r5, fp, pc}
   1abb4:	push	{r4, r5, fp, lr}
   1abb8:	add	fp, sp, #8
   1abbc:	mov	r4, r1
   1abc0:	bl	11810 <lgetfilecon@plt>
   1abc4:	cmp	r0, #10
   1abc8:	beq	1abe0 <__assert_fail@plt+0x9154>
   1abcc:	cmp	r0, #0
   1abd0:	bne	1ac24 <__assert_fail@plt+0x9198>
   1abd4:	bl	118e8 <__errno_location@plt>
   1abd8:	mov	r1, #95	; 0x5f
   1abdc:	b	1ac1c <__assert_fail@plt+0x9190>
   1abe0:	ldr	r5, [r4]
   1abe4:	movw	r1, #62740	; 0xf514
   1abe8:	movt	r1, #1
   1abec:	mov	r0, r5
   1abf0:	bl	116b4 <strcmp@plt>
   1abf4:	mov	r1, r0
   1abf8:	mov	r0, #10
   1abfc:	cmp	r1, #0
   1ac00:	popne	{r4, r5, fp, pc}
   1ac04:	mov	r0, r5
   1ac08:	bl	11a14 <freecon@plt>
   1ac0c:	mov	r0, #0
   1ac10:	str	r0, [r4]
   1ac14:	bl	118e8 <__errno_location@plt>
   1ac18:	mov	r1, #61	; 0x3d
   1ac1c:	str	r1, [r0]
   1ac20:	mvn	r0, #0
   1ac24:	pop	{r4, r5, fp, pc}
   1ac28:	push	{r4, r5, fp, lr}
   1ac2c:	add	fp, sp, #8
   1ac30:	mov	r4, r1
   1ac34:	bl	11744 <fgetfilecon@plt>
   1ac38:	cmp	r0, #10
   1ac3c:	beq	1ac54 <__assert_fail@plt+0x91c8>
   1ac40:	cmp	r0, #0
   1ac44:	bne	1ac98 <__assert_fail@plt+0x920c>
   1ac48:	bl	118e8 <__errno_location@plt>
   1ac4c:	mov	r1, #95	; 0x5f
   1ac50:	b	1ac90 <__assert_fail@plt+0x9204>
   1ac54:	ldr	r5, [r4]
   1ac58:	movw	r1, #62740	; 0xf514
   1ac5c:	movt	r1, #1
   1ac60:	mov	r0, r5
   1ac64:	bl	116b4 <strcmp@plt>
   1ac68:	mov	r1, r0
   1ac6c:	mov	r0, #10
   1ac70:	cmp	r1, #0
   1ac74:	popne	{r4, r5, fp, pc}
   1ac78:	mov	r0, r5
   1ac7c:	bl	11a14 <freecon@plt>
   1ac80:	mov	r0, #0
   1ac84:	str	r0, [r4]
   1ac88:	bl	118e8 <__errno_location@plt>
   1ac8c:	mov	r1, #61	; 0x3d
   1ac90:	str	r1, [r0]
   1ac94:	mvn	r0, #0
   1ac98:	pop	{r4, r5, fp, pc}
   1ac9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aca0:	add	fp, sp, #24
   1aca4:	mov	r4, r0
   1aca8:	cmp	r0, #0
   1acac:	beq	1acd0 <__assert_fail@plt+0x9244>
   1acb0:	mov	r0, r4
   1acb4:	bl	118ac <strlen@plt>
   1acb8:	add	r5, r0, #1
   1acbc:	cmp	r5, #58	; 0x3a
   1acc0:	bls	1acd4 <__assert_fail@plt+0x9248>
   1acc4:	add	r0, r0, #10
   1acc8:	bic	r0, r0, #3
   1accc:	b	1acd8 <__assert_fail@plt+0x924c>
   1acd0:	mov	r5, #0
   1acd4:	mov	r0, #64	; 0x40
   1acd8:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1acdc:	mov	r6, r0
   1ace0:	cmp	r0, #0
   1ace4:	beq	1ad20 <__assert_fail@plt+0x9294>
   1ace8:	cmp	r4, #0
   1acec:	mov	r0, r4
   1acf0:	mov	r8, #0
   1acf4:	mov	r7, r6
   1acf8:	movwne	r0, #1
   1acfc:	str	r8, [r6]
   1ad00:	strb	r0, [r6, #4]
   1ad04:	strb	r8, [r7, #5]!
   1ad08:	beq	1ad20 <__assert_fail@plt+0x9294>
   1ad0c:	mov	r0, r7
   1ad10:	mov	r1, r4
   1ad14:	mov	r2, r5
   1ad18:	bl	11708 <memcpy@plt>
   1ad1c:	strb	r8, [r7, r5]
   1ad20:	mov	r0, r6
   1ad24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ad28:	push	{r4, sl, fp, lr}
   1ad2c:	add	fp, sp, #8
   1ad30:	cmp	r0, #2
   1ad34:	popcc	{r4, sl, fp, pc}
   1ad38:	ldr	r4, [r0]
   1ad3c:	bl	16638 <__assert_fail@plt+0x4bac>
   1ad40:	cmp	r4, #0
   1ad44:	mov	r0, r4
   1ad48:	bne	1ad38 <__assert_fail@plt+0x92ac>
   1ad4c:	pop	{r4, sl, fp, pc}
   1ad50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad54:	add	fp, sp, #28
   1ad58:	sub	sp, sp, #4
   1ad5c:	mov	sl, r2
   1ad60:	mov	r7, r1
   1ad64:	cmp	r0, #0
   1ad68:	beq	1ae38 <__assert_fail@plt+0x93ac>
   1ad6c:	mov	r6, r0
   1ad70:	bl	1ae74 <__assert_fail@plt+0x93e8>
   1ad74:	cmp	r0, #0
   1ad78:	moveq	r0, #0
   1ad7c:	subeq	sp, fp, #28
   1ad80:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad84:	mov	r4, r0
   1ad88:	mov	r0, r7
   1ad8c:	mov	r1, sl
   1ad90:	bl	11750 <localtime_r@plt>
   1ad94:	mov	r7, #1
   1ad98:	cmp	r0, #0
   1ad9c:	mov	r9, #1
   1ada0:	beq	1adb4 <__assert_fail@plt+0x9328>
   1ada4:	mov	r0, r6
   1ada8:	mov	r1, sl
   1adac:	bl	1afc0 <__assert_fail@plt+0x9534>
   1adb0:	eor	r9, r0, #1
   1adb4:	cmp	r4, #1
   1adb8:	beq	1ae1c <__assert_fail@plt+0x9390>
   1adbc:	bl	118e8 <__errno_location@plt>
   1adc0:	mov	r6, r0
   1adc4:	ldr	r8, [r0]
   1adc8:	ldrb	r0, [r4, #4]
   1adcc:	cmp	r0, #0
   1add0:	beq	1ae4c <__assert_fail@plt+0x93c0>
   1add4:	movw	r0, #60542	; 0xec7e
   1add8:	add	r1, r4, #5
   1addc:	mov	r2, #1
   1ade0:	movt	r0, #1
   1ade4:	bl	118c4 <setenv@plt>
   1ade8:	cmp	r0, #0
   1adec:	beq	1ae60 <__assert_fail@plt+0x93d4>
   1adf0:	ldr	r8, [r6]
   1adf4:	mov	r7, #0
   1adf8:	cmp	r4, #2
   1adfc:	bcc	1ae18 <__assert_fail@plt+0x938c>
   1ae00:	ldr	r5, [r4]
   1ae04:	mov	r0, r4
   1ae08:	bl	16638 <__assert_fail@plt+0x4bac>
   1ae0c:	cmp	r5, #0
   1ae10:	mov	r4, r5
   1ae14:	bne	1ae00 <__assert_fail@plt+0x9374>
   1ae18:	str	r8, [r6]
   1ae1c:	cmp	r7, #0
   1ae20:	moveq	sl, r7
   1ae24:	cmp	r9, #0
   1ae28:	movwne	sl, #0
   1ae2c:	mov	r0, sl
   1ae30:	sub	sp, fp, #28
   1ae34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae38:	mov	r0, r7
   1ae3c:	mov	r1, sl
   1ae40:	sub	sp, fp, #28
   1ae44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae48:	b	11690 <gmtime_r@plt>
   1ae4c:	movw	r0, #60542	; 0xec7e
   1ae50:	movt	r0, #1
   1ae54:	bl	11a44 <unsetenv@plt>
   1ae58:	cmp	r0, #0
   1ae5c:	bne	1adf0 <__assert_fail@plt+0x9364>
   1ae60:	bl	11780 <tzset@plt>
   1ae64:	mov	r7, #1
   1ae68:	cmp	r4, #2
   1ae6c:	bcs	1ae00 <__assert_fail@plt+0x9374>
   1ae70:	b	1ae18 <__assert_fail@plt+0x938c>
   1ae74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae78:	add	fp, sp, #28
   1ae7c:	sub	sp, sp, #4
   1ae80:	mov	r4, r0
   1ae84:	movw	r0, #60542	; 0xec7e
   1ae88:	movt	r0, #1
   1ae8c:	bl	11804 <getenv@plt>
   1ae90:	mov	r6, r0
   1ae94:	ldrb	r0, [r4, #4]
   1ae98:	cmp	r6, #0
   1ae9c:	beq	1aee0 <__assert_fail@plt+0x9454>
   1aea0:	cmp	r0, #0
   1aea4:	beq	1aebc <__assert_fail@plt+0x9430>
   1aea8:	add	r0, r4, #5
   1aeac:	mov	r1, r6
   1aeb0:	bl	116b4 <strcmp@plt>
   1aeb4:	cmp	r0, #0
   1aeb8:	beq	1af94 <__assert_fail@plt+0x9508>
   1aebc:	mov	r0, r6
   1aec0:	bl	118ac <strlen@plt>
   1aec4:	add	r8, r0, #1
   1aec8:	mov	r9, #1
   1aecc:	cmp	r8, #58	; 0x3a
   1aed0:	bls	1aef0 <__assert_fail@plt+0x9464>
   1aed4:	add	r0, r0, #10
   1aed8:	bic	r0, r0, #3
   1aedc:	b	1aef4 <__assert_fail@plt+0x9468>
   1aee0:	mov	r9, #0
   1aee4:	cmp	r0, #0
   1aee8:	mov	r8, #0
   1aeec:	beq	1af94 <__assert_fail@plt+0x9508>
   1aef0:	mov	r0, #64	; 0x40
   1aef4:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1aef8:	cmp	r0, #0
   1aefc:	beq	1af8c <__assert_fail@plt+0x9500>
   1af00:	mov	sl, #0
   1af04:	mov	r7, r0
   1af08:	strb	r9, [r0, #4]
   1af0c:	mov	r5, r0
   1af10:	cmp	r9, #0
   1af14:	str	sl, [r0]
   1af18:	strb	sl, [r7, #5]!
   1af1c:	beq	1af34 <__assert_fail@plt+0x94a8>
   1af20:	mov	r0, r7
   1af24:	mov	r1, r6
   1af28:	mov	r2, r8
   1af2c:	bl	11708 <memcpy@plt>
   1af30:	strb	sl, [r7, r8]
   1af34:	ldrb	r0, [r4, #4]
   1af38:	cmp	r0, #0
   1af3c:	beq	1af9c <__assert_fail@plt+0x9510>
   1af40:	movw	r0, #60542	; 0xec7e
   1af44:	add	r1, r4, #5
   1af48:	mov	r2, #1
   1af4c:	movt	r0, #1
   1af50:	bl	118c4 <setenv@plt>
   1af54:	cmp	r0, #0
   1af58:	beq	1afb0 <__assert_fail@plt+0x9524>
   1af5c:	bl	118e8 <__errno_location@plt>
   1af60:	ldr	r6, [r0]
   1af64:	mov	r4, r0
   1af68:	cmp	r5, #2
   1af6c:	bcc	1af88 <__assert_fail@plt+0x94fc>
   1af70:	ldr	r7, [r5]
   1af74:	mov	r0, r5
   1af78:	bl	16638 <__assert_fail@plt+0x4bac>
   1af7c:	cmp	r7, #0
   1af80:	mov	r5, r7
   1af84:	bne	1af70 <__assert_fail@plt+0x94e4>
   1af88:	str	r6, [r4]
   1af8c:	mov	r5, #0
   1af90:	b	1afb4 <__assert_fail@plt+0x9528>
   1af94:	mov	r5, #1
   1af98:	b	1afb4 <__assert_fail@plt+0x9528>
   1af9c:	movw	r0, #60542	; 0xec7e
   1afa0:	movt	r0, #1
   1afa4:	bl	11a44 <unsetenv@plt>
   1afa8:	cmp	r0, #0
   1afac:	bne	1af5c <__assert_fail@plt+0x94d0>
   1afb0:	bl	11780 <tzset@plt>
   1afb4:	mov	r0, r5
   1afb8:	sub	sp, fp, #28
   1afbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afc4:	add	fp, sp, #28
   1afc8:	sub	sp, sp, #4
   1afcc:	ldr	r7, [r1, #40]	; 0x28
   1afd0:	mov	r8, #1
   1afd4:	cmp	r7, #0
   1afd8:	beq	1b07c <__assert_fail@plt+0x95f0>
   1afdc:	mov	r5, r1
   1afe0:	mov	r6, r0
   1afe4:	cmp	r7, r1
   1afe8:	bcc	1aff8 <__assert_fail@plt+0x956c>
   1afec:	add	r0, r5, #44	; 0x2c
   1aff0:	cmp	r7, r0
   1aff4:	bcc	1b07c <__assert_fail@plt+0x95f0>
   1aff8:	ldrb	r0, [r7]
   1affc:	cmp	r0, #0
   1b000:	beq	1b070 <__assert_fail@plt+0x95e4>
   1b004:	add	r4, r6, #5
   1b008:	b	1b01c <__assert_fail@plt+0x9590>
   1b00c:	ldr	r0, [r6]
   1b010:	cmp	r0, #0
   1b014:	addne	r4, r0, #5
   1b018:	movne	r6, r0
   1b01c:	mov	r0, r4
   1b020:	mov	r1, r7
   1b024:	bl	116b4 <strcmp@plt>
   1b028:	cmp	r0, #0
   1b02c:	beq	1b078 <__assert_fail@plt+0x95ec>
   1b030:	ldrb	r0, [r4]
   1b034:	cmp	r0, #0
   1b038:	bne	1b054 <__assert_fail@plt+0x95c8>
   1b03c:	add	r0, r6, #5
   1b040:	cmp	r4, r0
   1b044:	bne	1b088 <__assert_fail@plt+0x95fc>
   1b048:	ldrb	r0, [r6, #4]
   1b04c:	cmp	r0, #0
   1b050:	beq	1b088 <__assert_fail@plt+0x95fc>
   1b054:	mov	r0, r4
   1b058:	bl	118ac <strlen@plt>
   1b05c:	add	r4, r4, r0
   1b060:	ldrb	r0, [r4, #1]!
   1b064:	cmp	r0, #0
   1b068:	bne	1b01c <__assert_fail@plt+0x9590>
   1b06c:	b	1b00c <__assert_fail@plt+0x9580>
   1b070:	movw	r4, #58350	; 0xe3ee
   1b074:	movt	r4, #1
   1b078:	str	r4, [r5, #40]	; 0x28
   1b07c:	mov	r0, r8
   1b080:	sub	sp, fp, #28
   1b084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b088:	add	r0, r6, #64	; 0x40
   1b08c:	sub	sl, r0, r4
   1b090:	mov	r0, r7
   1b094:	bl	118ac <strlen@plt>
   1b098:	add	r9, r0, #1
   1b09c:	cmp	r9, sl
   1b0a0:	bge	1b0c0 <__assert_fail@plt+0x9634>
   1b0a4:	mov	r0, r4
   1b0a8:	mov	r1, r7
   1b0ac:	mov	r2, r9
   1b0b0:	bl	11708 <memcpy@plt>
   1b0b4:	mov	r0, #0
   1b0b8:	strb	r0, [r4, r9]
   1b0bc:	b	1b078 <__assert_fail@plt+0x95ec>
   1b0c0:	add	r0, r0, #10
   1b0c4:	cmp	r9, #59	; 0x3b
   1b0c8:	bic	r0, r0, #3
   1b0cc:	movwcc	r0, #64	; 0x40
   1b0d0:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1b0d4:	cmp	r0, #0
   1b0d8:	beq	1b118 <__assert_fail@plt+0x968c>
   1b0dc:	mov	sl, r0
   1b0e0:	mov	r0, #0
   1b0e4:	mov	r1, r7
   1b0e8:	mov	r2, r9
   1b0ec:	str	r0, [sl]
   1b0f0:	mov	r0, #1
   1b0f4:	add	r4, sl, #5
   1b0f8:	strh	r0, [sl, #4]
   1b0fc:	mov	r0, r4
   1b100:	bl	11708 <memcpy@plt>
   1b104:	mov	r0, #0
   1b108:	strb	r0, [r4, r9]
   1b10c:	str	sl, [r6]
   1b110:	strb	r0, [sl, #4]
   1b114:	b	1b078 <__assert_fail@plt+0x95ec>
   1b118:	mov	r8, #0
   1b11c:	str	r8, [r6]
   1b120:	b	1b07c <__assert_fail@plt+0x95f0>
   1b124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b128:	add	fp, sp, #28
   1b12c:	sub	sp, sp, #52	; 0x34
   1b130:	mov	r4, r1
   1b134:	cmp	r0, #0
   1b138:	beq	1b244 <__assert_fail@plt+0x97b8>
   1b13c:	mov	r6, r0
   1b140:	bl	1ae74 <__assert_fail@plt+0x93e8>
   1b144:	cmp	r0, #0
   1b148:	beq	1b23c <__assert_fail@plt+0x97b0>
   1b14c:	mov	r8, r0
   1b150:	mov	r0, #32
   1b154:	mov	r1, r4
   1b158:	add	r5, sp, #8
   1b15c:	vld1.32	{d16-d17}, [r1], r0
   1b160:	mov	r2, r5
   1b164:	vst1.32	{d16-d17}, [r2], r0
   1b168:	ldr	r0, [r4, #16]
   1b16c:	ldr	r3, [r4, #20]
   1b170:	str	r0, [sp, #24]
   1b174:	mvn	r0, #0
   1b178:	str	r0, [sp, #36]	; 0x24
   1b17c:	str	r3, [sp, #28]
   1b180:	ldr	r0, [r1]
   1b184:	str	r0, [r2]
   1b188:	mov	r0, r5
   1b18c:	bl	116d8 <mktime@plt>
   1b190:	mov	r9, r0
   1b194:	ldr	r0, [sp, #36]	; 0x24
   1b198:	mov	sl, #1
   1b19c:	mov	r1, #1
   1b1a0:	cmp	r0, #0
   1b1a4:	blt	1b1b8 <__assert_fail@plt+0x972c>
   1b1a8:	add	r1, sp, #8
   1b1ac:	mov	r0, r6
   1b1b0:	bl	1afc0 <__assert_fail@plt+0x9534>
   1b1b4:	eor	r1, r0, #1
   1b1b8:	cmp	r8, #1
   1b1bc:	beq	1b230 <__assert_fail@plt+0x97a4>
   1b1c0:	str	r1, [sp, #4]
   1b1c4:	bl	118e8 <__errno_location@plt>
   1b1c8:	mov	r6, r0
   1b1cc:	ldr	r7, [r0]
   1b1d0:	ldrb	r0, [r8, #4]
   1b1d4:	cmp	r0, #0
   1b1d8:	beq	1b284 <__assert_fail@plt+0x97f8>
   1b1dc:	movw	r0, #60542	; 0xec7e
   1b1e0:	add	r1, r8, #5
   1b1e4:	mov	r2, #1
   1b1e8:	movt	r0, #1
   1b1ec:	bl	118c4 <setenv@plt>
   1b1f0:	cmp	r0, #0
   1b1f4:	beq	1b298 <__assert_fail@plt+0x980c>
   1b1f8:	ldr	r0, [r6]
   1b1fc:	mov	sl, #0
   1b200:	str	r0, [sp]
   1b204:	cmp	r8, #2
   1b208:	bcc	1b224 <__assert_fail@plt+0x9798>
   1b20c:	ldr	r7, [r8]
   1b210:	mov	r0, r8
   1b214:	bl	16638 <__assert_fail@plt+0x4bac>
   1b218:	cmp	r7, #0
   1b21c:	mov	r8, r7
   1b220:	bne	1b20c <__assert_fail@plt+0x9780>
   1b224:	ldr	r0, [sp]
   1b228:	ldr	r1, [sp, #4]
   1b22c:	str	r0, [r6]
   1b230:	eor	r0, sl, #1
   1b234:	orrs	r0, r1, r0
   1b238:	beq	1b254 <__assert_fail@plt+0x97c8>
   1b23c:	mvn	r9, #0
   1b240:	b	1b278 <__assert_fail@plt+0x97ec>
   1b244:	mov	r0, r4
   1b248:	sub	sp, fp, #28
   1b24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b250:	b	119e4 <timegm@plt>
   1b254:	mov	r0, #28
   1b258:	add	r1, r5, #16
   1b25c:	vld1.32	{d16-d17}, [r5], r0
   1b260:	vld1.64	{d18-d19}, [r1]
   1b264:	add	r1, r4, #16
   1b268:	vld1.32	{d20-d21}, [r5]
   1b26c:	vst1.32	{d16-d17}, [r4], r0
   1b270:	vst1.32	{d18-d19}, [r1]
   1b274:	vst1.32	{d20-d21}, [r4]
   1b278:	mov	r0, r9
   1b27c:	sub	sp, fp, #28
   1b280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b284:	movw	r0, #60542	; 0xec7e
   1b288:	movt	r0, #1
   1b28c:	bl	11a44 <unsetenv@plt>
   1b290:	cmp	r0, #0
   1b294:	bne	1b1f8 <__assert_fail@plt+0x976c>
   1b298:	str	r7, [sp]
   1b29c:	bl	11780 <tzset@plt>
   1b2a0:	mov	sl, #1
   1b2a4:	cmp	r8, #2
   1b2a8:	bcs	1b20c <__assert_fail@plt+0x9780>
   1b2ac:	b	1b224 <__assert_fail@plt+0x9798>
   1b2b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b2b4:	add	fp, sp, #24
   1b2b8:	sub	sp, sp, #32
   1b2bc:	ldr	r6, [fp, #12]
   1b2c0:	ldr	r7, [fp, #8]
   1b2c4:	mov	r4, r2
   1b2c8:	mov	r8, r0
   1b2cc:	cmp	r1, #0
   1b2d0:	beq	1b2f8 <__assert_fail@plt+0x986c>
   1b2d4:	movw	r2, #62750	; 0xf51e
   1b2d8:	mov	r5, r1
   1b2dc:	str	r3, [sp, #4]
   1b2e0:	str	r4, [sp]
   1b2e4:	mov	r0, r8
   1b2e8:	mov	r1, #1
   1b2ec:	movt	r2, #1
   1b2f0:	mov	r3, r5
   1b2f4:	b	1b310 <__assert_fail@plt+0x9884>
   1b2f8:	movw	r2, #62762	; 0xf52a
   1b2fc:	str	r3, [sp]
   1b300:	mov	r0, r8
   1b304:	mov	r1, #1
   1b308:	mov	r3, r4
   1b30c:	movt	r2, #1
   1b310:	bl	1193c <__fprintf_chk@plt>
   1b314:	movw	r1, #62769	; 0xf531
   1b318:	mov	r0, #0
   1b31c:	mov	r2, #5
   1b320:	movt	r1, #1
   1b324:	bl	1172c <dcgettext@plt>
   1b328:	movw	r2, #63487	; 0xf7ff
   1b32c:	mov	r3, r0
   1b330:	movw	r0, #2022	; 0x7e6
   1b334:	mov	r1, #1
   1b338:	str	r0, [sp]
   1b33c:	movt	r2, #1
   1b340:	mov	r0, r8
   1b344:	bl	1193c <__fprintf_chk@plt>
   1b348:	movw	r4, #58349	; 0xe3ed
   1b34c:	mov	r1, r8
   1b350:	movt	r4, #1
   1b354:	mov	r0, r4
   1b358:	bl	11678 <fputs_unlocked@plt>
   1b35c:	movw	r1, #62773	; 0xf535
   1b360:	mov	r0, #0
   1b364:	mov	r2, #5
   1b368:	movt	r1, #1
   1b36c:	bl	1172c <dcgettext@plt>
   1b370:	movw	r3, #62944	; 0xf5e0
   1b374:	mov	r2, r0
   1b378:	mov	r0, r8
   1b37c:	mov	r1, #1
   1b380:	movt	r3, #1
   1b384:	bl	1193c <__fprintf_chk@plt>
   1b388:	mov	r0, r4
   1b38c:	mov	r1, r8
   1b390:	bl	11678 <fputs_unlocked@plt>
   1b394:	cmp	r6, #9
   1b398:	bhi	1b3d4 <__assert_fail@plt+0x9948>
   1b39c:	add	r0, pc, #0
   1b3a0:	ldr	pc, [r0, r6, lsl #2]
   1b3a4:	andeq	fp, r1, ip, asr #7
   1b3a8:	andeq	fp, r1, r0, ror #7
   1b3ac:	andeq	fp, r1, r0, lsl r4
   1b3b0:	andeq	fp, r1, r8, lsr r4
   1b3b4:	andeq	fp, r1, r0, ror #8
   1b3b8:	andeq	fp, r1, r8, lsl #9
   1b3bc:			; <UNDEFINED> instruction: 0x0001b4b0
   1b3c0:	andeq	fp, r1, r8, ror #9
   1b3c4:	andeq	fp, r1, r8, lsl #11
   1b3c8:	andeq	fp, r1, r0, lsr r5
   1b3cc:	sub	sp, fp, #24
   1b3d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b3d4:	movw	r1, #63297	; 0xf741
   1b3d8:	movt	r1, #1
   1b3dc:	b	1b538 <__assert_fail@plt+0x9aac>
   1b3e0:	movw	r1, #62978	; 0xf602
   1b3e4:	mov	r0, #0
   1b3e8:	mov	r2, #5
   1b3ec:	movt	r1, #1
   1b3f0:	bl	1172c <dcgettext@plt>
   1b3f4:	ldr	r3, [r7]
   1b3f8:	mov	r2, r0
   1b3fc:	mov	r0, r8
   1b400:	mov	r1, #1
   1b404:	sub	sp, fp, #24
   1b408:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b40c:	b	1193c <__fprintf_chk@plt>
   1b410:	movw	r1, #62994	; 0xf612
   1b414:	mov	r0, #0
   1b418:	mov	r2, #5
   1b41c:	movt	r1, #1
   1b420:	bl	1172c <dcgettext@plt>
   1b424:	mov	r2, r0
   1b428:	ldr	r3, [r7]
   1b42c:	ldr	r0, [r7, #4]
   1b430:	str	r0, [sp]
   1b434:	b	1b524 <__assert_fail@plt+0x9a98>
   1b438:	movw	r1, #63017	; 0xf629
   1b43c:	mov	r0, #0
   1b440:	mov	r2, #5
   1b444:	movt	r1, #1
   1b448:	bl	1172c <dcgettext@plt>
   1b44c:	ldr	r3, [r7]
   1b450:	mov	r2, r0
   1b454:	ldmib	r7, {r0, r1}
   1b458:	stm	sp, {r0, r1}
   1b45c:	b	1b524 <__assert_fail@plt+0x9a98>
   1b460:	movw	r1, #63045	; 0xf645
   1b464:	mov	r0, #0
   1b468:	mov	r2, #5
   1b46c:	movt	r1, #1
   1b470:	bl	1172c <dcgettext@plt>
   1b474:	ldr	r3, [r7]
   1b478:	mov	r2, r0
   1b47c:	ldmib	r7, {r0, r1, r7}
   1b480:	stm	sp, {r0, r1, r7}
   1b484:	b	1b524 <__assert_fail@plt+0x9a98>
   1b488:	movw	r1, #63077	; 0xf665
   1b48c:	mov	r0, #0
   1b490:	mov	r2, #5
   1b494:	movt	r1, #1
   1b498:	bl	1172c <dcgettext@plt>
   1b49c:	ldr	r3, [r7]
   1b4a0:	mov	r2, r0
   1b4a4:	ldmib	r7, {r0, r1, r6, r7}
   1b4a8:	stm	sp, {r0, r1, r6, r7}
   1b4ac:	b	1b524 <__assert_fail@plt+0x9a98>
   1b4b0:	movw	r1, #63113	; 0xf689
   1b4b4:	mov	r0, #0
   1b4b8:	mov	r2, #5
   1b4bc:	movt	r1, #1
   1b4c0:	bl	1172c <dcgettext@plt>
   1b4c4:	ldr	r3, [r7]
   1b4c8:	mov	r2, r0
   1b4cc:	ldmib	r7, {r0, r1, r6}
   1b4d0:	ldr	r5, [r7, #16]
   1b4d4:	ldr	r7, [r7, #20]
   1b4d8:	stm	sp, {r0, r1, r6}
   1b4dc:	str	r5, [sp, #12]
   1b4e0:	str	r7, [sp, #16]
   1b4e4:	b	1b524 <__assert_fail@plt+0x9a98>
   1b4e8:	movw	r1, #63153	; 0xf6b1
   1b4ec:	mov	r0, #0
   1b4f0:	mov	r2, #5
   1b4f4:	movt	r1, #1
   1b4f8:	bl	1172c <dcgettext@plt>
   1b4fc:	ldr	r3, [r7]
   1b500:	mov	r2, r0
   1b504:	ldmib	r7, {r0, r1, r6}
   1b508:	ldr	r5, [r7, #16]
   1b50c:	ldr	r4, [r7, #20]
   1b510:	ldr	r7, [r7, #24]
   1b514:	stm	sp, {r0, r1, r6}
   1b518:	str	r5, [sp, #12]
   1b51c:	str	r4, [sp, #16]
   1b520:	str	r7, [sp, #20]
   1b524:	mov	r0, r8
   1b528:	mov	r1, #1
   1b52c:	b	1b5d8 <__assert_fail@plt+0x9b4c>
   1b530:	movw	r1, #63245	; 0xf70d
   1b534:	movt	r1, #1
   1b538:	mov	r0, #0
   1b53c:	mov	r2, #5
   1b540:	bl	1172c <dcgettext@plt>
   1b544:	mov	ip, r0
   1b548:	ldr	r3, [r7]
   1b54c:	ldr	r0, [r7, #4]
   1b550:	ldr	r1, [r7, #8]
   1b554:	ldr	r6, [r7, #12]
   1b558:	ldr	r5, [r7, #16]
   1b55c:	ldr	r4, [r7, #20]
   1b560:	ldr	r2, [r7, #24]
   1b564:	ldr	lr, [r7, #28]
   1b568:	ldr	r7, [r7, #32]
   1b56c:	stm	sp, {r0, r1, r6}
   1b570:	str	r5, [sp, #12]
   1b574:	str	r4, [sp, #16]
   1b578:	str	r2, [sp, #20]
   1b57c:	str	lr, [sp, #24]
   1b580:	str	r7, [sp, #28]
   1b584:	b	1b5cc <__assert_fail@plt+0x9b40>
   1b588:	movw	r1, #63197	; 0xf6dd
   1b58c:	mov	r0, #0
   1b590:	mov	r2, #5
   1b594:	movt	r1, #1
   1b598:	bl	1172c <dcgettext@plt>
   1b59c:	mov	ip, r0
   1b5a0:	ldr	r3, [r7]
   1b5a4:	ldmib	r7, {r0, r1, r6}
   1b5a8:	ldr	r5, [r7, #16]
   1b5ac:	ldr	r4, [r7, #20]
   1b5b0:	ldr	r2, [r7, #24]
   1b5b4:	ldr	r7, [r7, #28]
   1b5b8:	stm	sp, {r0, r1, r6}
   1b5bc:	str	r5, [sp, #12]
   1b5c0:	str	r4, [sp, #16]
   1b5c4:	str	r2, [sp, #20]
   1b5c8:	str	r7, [sp, #24]
   1b5cc:	mov	r0, r8
   1b5d0:	mov	r1, #1
   1b5d4:	mov	r2, ip
   1b5d8:	bl	1193c <__fprintf_chk@plt>
   1b5dc:	sub	sp, fp, #24
   1b5e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b5e4:	push	{r4, sl, fp, lr}
   1b5e8:	add	fp, sp, #8
   1b5ec:	sub	sp, sp, #8
   1b5f0:	ldr	ip, [fp, #8]
   1b5f4:	mov	lr, #0
   1b5f8:	ldr	r4, [ip, lr, lsl #2]
   1b5fc:	add	lr, lr, #1
   1b600:	cmp	r4, #0
   1b604:	bne	1b5f8 <__assert_fail@plt+0x9b6c>
   1b608:	sub	r4, lr, #1
   1b60c:	str	ip, [sp]
   1b610:	str	r4, [sp, #4]
   1b614:	bl	1b2b0 <__assert_fail@plt+0x9824>
   1b618:	sub	sp, fp, #8
   1b61c:	pop	{r4, sl, fp, pc}
   1b620:	push	{fp, lr}
   1b624:	mov	fp, sp
   1b628:	sub	sp, sp, #48	; 0x30
   1b62c:	ldr	ip, [fp, #8]
   1b630:	ldr	lr, [ip]
   1b634:	cmp	lr, #0
   1b638:	str	lr, [sp, #8]
   1b63c:	beq	1b6d8 <__assert_fail@plt+0x9c4c>
   1b640:	ldr	lr, [ip, #4]
   1b644:	cmp	lr, #0
   1b648:	str	lr, [sp, #12]
   1b64c:	beq	1b6e0 <__assert_fail@plt+0x9c54>
   1b650:	ldr	lr, [ip, #8]
   1b654:	cmp	lr, #0
   1b658:	str	lr, [sp, #16]
   1b65c:	beq	1b6e8 <__assert_fail@plt+0x9c5c>
   1b660:	ldr	lr, [ip, #12]
   1b664:	cmp	lr, #0
   1b668:	str	lr, [sp, #20]
   1b66c:	beq	1b6f0 <__assert_fail@plt+0x9c64>
   1b670:	ldr	lr, [ip, #16]
   1b674:	cmp	lr, #0
   1b678:	str	lr, [sp, #24]
   1b67c:	beq	1b6f8 <__assert_fail@plt+0x9c6c>
   1b680:	ldr	lr, [ip, #20]
   1b684:	cmp	lr, #0
   1b688:	str	lr, [sp, #28]
   1b68c:	beq	1b700 <__assert_fail@plt+0x9c74>
   1b690:	ldr	lr, [ip, #24]
   1b694:	cmp	lr, #0
   1b698:	str	lr, [sp, #32]
   1b69c:	beq	1b708 <__assert_fail@plt+0x9c7c>
   1b6a0:	ldr	lr, [ip, #28]
   1b6a4:	cmp	lr, #0
   1b6a8:	str	lr, [sp, #36]	; 0x24
   1b6ac:	beq	1b710 <__assert_fail@plt+0x9c84>
   1b6b0:	ldr	lr, [ip, #32]
   1b6b4:	cmp	lr, #0
   1b6b8:	str	lr, [sp, #40]	; 0x28
   1b6bc:	beq	1b718 <__assert_fail@plt+0x9c8c>
   1b6c0:	ldr	lr, [ip, #36]	; 0x24
   1b6c4:	mov	ip, #10
   1b6c8:	cmp	lr, #0
   1b6cc:	str	lr, [sp, #44]	; 0x2c
   1b6d0:	movweq	ip, #9
   1b6d4:	b	1b71c <__assert_fail@plt+0x9c90>
   1b6d8:	mov	ip, #0
   1b6dc:	b	1b71c <__assert_fail@plt+0x9c90>
   1b6e0:	mov	ip, #1
   1b6e4:	b	1b71c <__assert_fail@plt+0x9c90>
   1b6e8:	mov	ip, #2
   1b6ec:	b	1b71c <__assert_fail@plt+0x9c90>
   1b6f0:	mov	ip, #3
   1b6f4:	b	1b71c <__assert_fail@plt+0x9c90>
   1b6f8:	mov	ip, #4
   1b6fc:	b	1b71c <__assert_fail@plt+0x9c90>
   1b700:	mov	ip, #5
   1b704:	b	1b71c <__assert_fail@plt+0x9c90>
   1b708:	mov	ip, #6
   1b70c:	b	1b71c <__assert_fail@plt+0x9c90>
   1b710:	mov	ip, #7
   1b714:	b	1b71c <__assert_fail@plt+0x9c90>
   1b718:	mov	ip, #8
   1b71c:	add	lr, sp, #8
   1b720:	str	ip, [sp, #4]
   1b724:	str	lr, [sp]
   1b728:	bl	1b2b0 <__assert_fail@plt+0x9824>
   1b72c:	mov	sp, fp
   1b730:	pop	{fp, pc}
   1b734:	push	{fp, lr}
   1b738:	mov	fp, sp
   1b73c:	sub	sp, sp, #56	; 0x38
   1b740:	add	ip, fp, #8
   1b744:	str	ip, [sp, #12]
   1b748:	ldr	lr, [fp, #8]
   1b74c:	cmp	lr, #0
   1b750:	str	lr, [sp, #16]
   1b754:	beq	1b7f0 <__assert_fail@plt+0x9d64>
   1b758:	ldr	lr, [ip, #4]
   1b75c:	cmp	lr, #0
   1b760:	str	lr, [sp, #20]
   1b764:	beq	1b7f8 <__assert_fail@plt+0x9d6c>
   1b768:	ldr	lr, [ip, #8]
   1b76c:	cmp	lr, #0
   1b770:	str	lr, [sp, #24]
   1b774:	beq	1b800 <__assert_fail@plt+0x9d74>
   1b778:	ldr	lr, [ip, #12]
   1b77c:	cmp	lr, #0
   1b780:	str	lr, [sp, #28]
   1b784:	beq	1b808 <__assert_fail@plt+0x9d7c>
   1b788:	ldr	lr, [ip, #16]
   1b78c:	cmp	lr, #0
   1b790:	str	lr, [sp, #32]
   1b794:	beq	1b810 <__assert_fail@plt+0x9d84>
   1b798:	ldr	lr, [ip, #20]
   1b79c:	cmp	lr, #0
   1b7a0:	str	lr, [sp, #36]	; 0x24
   1b7a4:	beq	1b818 <__assert_fail@plt+0x9d8c>
   1b7a8:	ldr	lr, [ip, #24]
   1b7ac:	cmp	lr, #0
   1b7b0:	str	lr, [sp, #40]	; 0x28
   1b7b4:	beq	1b820 <__assert_fail@plt+0x9d94>
   1b7b8:	ldr	lr, [ip, #28]
   1b7bc:	cmp	lr, #0
   1b7c0:	str	lr, [sp, #44]	; 0x2c
   1b7c4:	beq	1b828 <__assert_fail@plt+0x9d9c>
   1b7c8:	ldr	lr, [ip, #32]
   1b7cc:	cmp	lr, #0
   1b7d0:	str	lr, [sp, #48]	; 0x30
   1b7d4:	beq	1b830 <__assert_fail@plt+0x9da4>
   1b7d8:	ldr	lr, [ip, #36]	; 0x24
   1b7dc:	mov	ip, #10
   1b7e0:	cmp	lr, #0
   1b7e4:	str	lr, [sp, #52]	; 0x34
   1b7e8:	movweq	ip, #9
   1b7ec:	b	1b834 <__assert_fail@plt+0x9da8>
   1b7f0:	mov	ip, #0
   1b7f4:	b	1b834 <__assert_fail@plt+0x9da8>
   1b7f8:	mov	ip, #1
   1b7fc:	b	1b834 <__assert_fail@plt+0x9da8>
   1b800:	mov	ip, #2
   1b804:	b	1b834 <__assert_fail@plt+0x9da8>
   1b808:	mov	ip, #3
   1b80c:	b	1b834 <__assert_fail@plt+0x9da8>
   1b810:	mov	ip, #4
   1b814:	b	1b834 <__assert_fail@plt+0x9da8>
   1b818:	mov	ip, #5
   1b81c:	b	1b834 <__assert_fail@plt+0x9da8>
   1b820:	mov	ip, #6
   1b824:	b	1b834 <__assert_fail@plt+0x9da8>
   1b828:	mov	ip, #7
   1b82c:	b	1b834 <__assert_fail@plt+0x9da8>
   1b830:	mov	ip, #8
   1b834:	add	lr, sp, #16
   1b838:	str	ip, [sp, #4]
   1b83c:	str	lr, [sp]
   1b840:	bl	1b2b0 <__assert_fail@plt+0x9824>
   1b844:	mov	sp, fp
   1b848:	pop	{fp, pc}
   1b84c:	push	{fp, lr}
   1b850:	mov	fp, sp
   1b854:	movw	r0, #484	; 0x1e4
   1b858:	movt	r0, #3
   1b85c:	ldr	r1, [r0]
   1b860:	movw	r0, #58349	; 0xe3ed
   1b864:	movt	r0, #1
   1b868:	bl	11678 <fputs_unlocked@plt>
   1b86c:	movw	r1, #63357	; 0xf77d
   1b870:	mov	r0, #0
   1b874:	mov	r2, #5
   1b878:	movt	r1, #1
   1b87c:	bl	1172c <dcgettext@plt>
   1b880:	movw	r2, #63377	; 0xf791
   1b884:	mov	r1, r0
   1b888:	mov	r0, #1
   1b88c:	movt	r2, #1
   1b890:	bl	11924 <__printf_chk@plt>
   1b894:	movw	r1, #63399	; 0xf7a7
   1b898:	mov	r0, #0
   1b89c:	mov	r2, #5
   1b8a0:	movt	r1, #1
   1b8a4:	bl	1172c <dcgettext@plt>
   1b8a8:	movw	r2, #59199	; 0xe73f
   1b8ac:	movw	r3, #59440	; 0xe830
   1b8b0:	mov	r1, r0
   1b8b4:	mov	r0, #1
   1b8b8:	movt	r2, #1
   1b8bc:	movt	r3, #1
   1b8c0:	bl	11924 <__printf_chk@plt>
   1b8c4:	movw	r1, #63419	; 0xf7bb
   1b8c8:	mov	r0, #0
   1b8cc:	mov	r2, #5
   1b8d0:	movt	r1, #1
   1b8d4:	bl	1172c <dcgettext@plt>
   1b8d8:	movw	r2, #63458	; 0xf7e2
   1b8dc:	mov	r1, r0
   1b8e0:	mov	r0, #1
   1b8e4:	movt	r2, #1
   1b8e8:	pop	{fp, lr}
   1b8ec:	b	11924 <__printf_chk@plt>
   1b8f0:	push	{r4, r5, r6, sl, fp, lr}
   1b8f4:	add	fp, sp, #16
   1b8f8:	mov	r4, r2
   1b8fc:	mov	r5, r1
   1b900:	mov	r6, r0
   1b904:	bl	1d19c <__assert_fail@plt+0xb710>
   1b908:	cmp	r0, #0
   1b90c:	popne	{r4, r5, r6, sl, fp, pc}
   1b910:	cmp	r6, #0
   1b914:	beq	1b928 <__assert_fail@plt+0x9e9c>
   1b918:	cmp	r5, #0
   1b91c:	cmpne	r4, #0
   1b920:	bne	1b928 <__assert_fail@plt+0x9e9c>
   1b924:	pop	{r4, r5, r6, sl, fp, pc}
   1b928:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1b92c:	push	{r4, r5, r6, sl, fp, lr}
   1b930:	add	fp, sp, #16
   1b934:	mov	r4, r2
   1b938:	mov	r5, r1
   1b93c:	mov	r6, r0
   1b940:	bl	1d19c <__assert_fail@plt+0xb710>
   1b944:	cmp	r0, #0
   1b948:	popne	{r4, r5, r6, sl, fp, pc}
   1b94c:	cmp	r6, #0
   1b950:	beq	1b964 <__assert_fail@plt+0x9ed8>
   1b954:	cmp	r5, #0
   1b958:	cmpne	r4, #0
   1b95c:	bne	1b964 <__assert_fail@plt+0x9ed8>
   1b960:	pop	{r4, r5, r6, sl, fp, pc}
   1b964:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1b968:	push	{fp, lr}
   1b96c:	mov	fp, sp
   1b970:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1b974:	cmp	r0, #0
   1b978:	popne	{fp, pc}
   1b97c:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1b980:	push	{fp, lr}
   1b984:	mov	fp, sp
   1b988:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1b98c:	cmp	r0, #0
   1b990:	popne	{fp, pc}
   1b994:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1b998:	push	{fp, lr}
   1b99c:	mov	fp, sp
   1b9a0:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1b9a4:	cmp	r0, #0
   1b9a8:	popne	{fp, pc}
   1b9ac:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1b9b0:	push	{r4, r5, fp, lr}
   1b9b4:	add	fp, sp, #8
   1b9b8:	mov	r4, r1
   1b9bc:	mov	r5, r0
   1b9c0:	bl	1c000 <__assert_fail@plt+0xa574>
   1b9c4:	cmp	r0, #0
   1b9c8:	popne	{r4, r5, fp, pc}
   1b9cc:	cmp	r5, #0
   1b9d0:	beq	1b9e0 <__assert_fail@plt+0x9f54>
   1b9d4:	cmp	r4, #0
   1b9d8:	bne	1b9e0 <__assert_fail@plt+0x9f54>
   1b9dc:	pop	{r4, r5, fp, pc}
   1b9e0:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1b9e4:	push	{fp, lr}
   1b9e8:	mov	fp, sp
   1b9ec:	cmp	r1, #0
   1b9f0:	orreq	r1, r1, #1
   1b9f4:	bl	1c000 <__assert_fail@plt+0xa574>
   1b9f8:	cmp	r0, #0
   1b9fc:	popne	{fp, pc}
   1ba00:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1ba04:	push	{fp, lr}
   1ba08:	mov	fp, sp
   1ba0c:	clz	r3, r2
   1ba10:	lsr	ip, r3, #5
   1ba14:	clz	r3, r1
   1ba18:	lsr	r3, r3, #5
   1ba1c:	orrs	r3, r3, ip
   1ba20:	movwne	r1, #1
   1ba24:	movwne	r2, #1
   1ba28:	bl	1d19c <__assert_fail@plt+0xb710>
   1ba2c:	cmp	r0, #0
   1ba30:	popne	{fp, pc}
   1ba34:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1ba38:	push	{fp, lr}
   1ba3c:	mov	fp, sp
   1ba40:	mov	r2, r1
   1ba44:	mov	r1, r0
   1ba48:	mov	r0, #0
   1ba4c:	bl	1d19c <__assert_fail@plt+0xb710>
   1ba50:	cmp	r0, #0
   1ba54:	popne	{fp, pc}
   1ba58:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1ba5c:	push	{fp, lr}
   1ba60:	mov	fp, sp
   1ba64:	mov	r2, r1
   1ba68:	mov	r1, r0
   1ba6c:	clz	r0, r2
   1ba70:	clz	r3, r1
   1ba74:	lsr	r0, r0, #5
   1ba78:	lsr	r3, r3, #5
   1ba7c:	orrs	r0, r3, r0
   1ba80:	movwne	r1, #1
   1ba84:	movwne	r2, #1
   1ba88:	mov	r0, #0
   1ba8c:	bl	1d19c <__assert_fail@plt+0xb710>
   1ba90:	cmp	r0, #0
   1ba94:	popne	{fp, pc}
   1ba98:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1ba9c:	push	{r4, r5, r6, sl, fp, lr}
   1baa0:	add	fp, sp, #16
   1baa4:	ldr	r5, [r1]
   1baa8:	mov	r4, r1
   1baac:	mov	r6, r0
   1bab0:	cmp	r0, #0
   1bab4:	beq	1bacc <__assert_fail@plt+0xa040>
   1bab8:	mov	r0, #1
   1babc:	add	r0, r0, r5, lsr #1
   1bac0:	adds	r5, r5, r0
   1bac4:	bcc	1bad4 <__assert_fail@plt+0xa048>
   1bac8:	b	1bb10 <__assert_fail@plt+0xa084>
   1bacc:	cmp	r5, #0
   1bad0:	movweq	r5, #64	; 0x40
   1bad4:	mov	r0, r6
   1bad8:	mov	r1, r5
   1badc:	mov	r2, #1
   1bae0:	bl	1d19c <__assert_fail@plt+0xb710>
   1bae4:	cmp	r5, #0
   1bae8:	mov	r1, r5
   1baec:	movwne	r1, #1
   1baf0:	cmp	r0, #0
   1baf4:	bne	1bb08 <__assert_fail@plt+0xa07c>
   1baf8:	clz	r2, r6
   1bafc:	lsr	r2, r2, #5
   1bb00:	orrs	r1, r2, r1
   1bb04:	bne	1bb10 <__assert_fail@plt+0xa084>
   1bb08:	str	r5, [r4]
   1bb0c:	pop	{r4, r5, r6, sl, fp, pc}
   1bb10:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1bb14:	push	{r4, r5, r6, r7, fp, lr}
   1bb18:	add	fp, sp, #16
   1bb1c:	ldr	r5, [r1]
   1bb20:	mov	r6, r2
   1bb24:	mov	r4, r1
   1bb28:	mov	r7, r0
   1bb2c:	cmp	r0, #0
   1bb30:	beq	1bb48 <__assert_fail@plt+0xa0bc>
   1bb34:	mov	r0, #1
   1bb38:	add	r0, r0, r5, lsr #1
   1bb3c:	adds	r5, r5, r0
   1bb40:	bcc	1bb60 <__assert_fail@plt+0xa0d4>
   1bb44:	b	1bb94 <__assert_fail@plt+0xa108>
   1bb48:	cmp	r5, #0
   1bb4c:	bne	1bb60 <__assert_fail@plt+0xa0d4>
   1bb50:	mov	r0, #64	; 0x40
   1bb54:	cmp	r6, #64	; 0x40
   1bb58:	udiv	r5, r0, r6
   1bb5c:	addhi	r5, r5, #1
   1bb60:	mov	r0, r7
   1bb64:	mov	r1, r5
   1bb68:	mov	r2, r6
   1bb6c:	bl	1d19c <__assert_fail@plt+0xb710>
   1bb70:	cmp	r0, #0
   1bb74:	bne	1bb8c <__assert_fail@plt+0xa100>
   1bb78:	cmp	r7, #0
   1bb7c:	beq	1bb94 <__assert_fail@plt+0xa108>
   1bb80:	cmp	r6, #0
   1bb84:	cmpne	r5, #0
   1bb88:	bne	1bb94 <__assert_fail@plt+0xa108>
   1bb8c:	str	r5, [r4]
   1bb90:	pop	{r4, r5, r6, r7, fp, pc}
   1bb94:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1bb98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bb9c:	add	fp, sp, #24
   1bba0:	mov	r8, r1
   1bba4:	ldr	r1, [r1]
   1bba8:	mov	r5, r0
   1bbac:	add	r0, r1, r1, asr #1
   1bbb0:	cmp	r0, r1
   1bbb4:	mvnvs	r0, #-2147483648	; 0x80000000
   1bbb8:	cmp	r0, r3
   1bbbc:	mov	r7, r0
   1bbc0:	movgt	r7, r3
   1bbc4:	cmn	r3, #1
   1bbc8:	movle	r7, r0
   1bbcc:	ldr	r0, [fp, #8]
   1bbd0:	cmn	r0, #1
   1bbd4:	ble	1bbfc <__assert_fail@plt+0xa170>
   1bbd8:	cmp	r0, #0
   1bbdc:	beq	1bc50 <__assert_fail@plt+0xa1c4>
   1bbe0:	cmn	r7, #1
   1bbe4:	ble	1bc24 <__assert_fail@plt+0xa198>
   1bbe8:	mvn	r4, #-2147483648	; 0x80000000
   1bbec:	udiv	r6, r4, r0
   1bbf0:	cmp	r6, r7
   1bbf4:	bge	1bc50 <__assert_fail@plt+0xa1c4>
   1bbf8:	b	1bc60 <__assert_fail@plt+0xa1d4>
   1bbfc:	cmn	r7, #1
   1bc00:	ble	1bc40 <__assert_fail@plt+0xa1b4>
   1bc04:	cmn	r0, #1
   1bc08:	beq	1bc50 <__assert_fail@plt+0xa1c4>
   1bc0c:	mov	r6, #-2147483648	; 0x80000000
   1bc10:	mvn	r4, #-2147483648	; 0x80000000
   1bc14:	sdiv	r6, r6, r0
   1bc18:	cmp	r6, r7
   1bc1c:	bge	1bc50 <__assert_fail@plt+0xa1c4>
   1bc20:	b	1bc60 <__assert_fail@plt+0xa1d4>
   1bc24:	beq	1bc50 <__assert_fail@plt+0xa1c4>
   1bc28:	mov	r6, #-2147483648	; 0x80000000
   1bc2c:	mvn	r4, #-2147483648	; 0x80000000
   1bc30:	sdiv	r6, r6, r7
   1bc34:	cmp	r6, r0
   1bc38:	bge	1bc50 <__assert_fail@plt+0xa1c4>
   1bc3c:	b	1bc60 <__assert_fail@plt+0xa1d4>
   1bc40:	mvn	r4, #-2147483648	; 0x80000000
   1bc44:	sdiv	r6, r4, r0
   1bc48:	cmp	r7, r6
   1bc4c:	blt	1bc60 <__assert_fail@plt+0xa1d4>
   1bc50:	mul	r6, r7, r0
   1bc54:	mov	r4, #64	; 0x40
   1bc58:	cmp	r6, #63	; 0x3f
   1bc5c:	bgt	1bc68 <__assert_fail@plt+0xa1dc>
   1bc60:	sdiv	r7, r4, r0
   1bc64:	mul	r6, r7, r0
   1bc68:	cmp	r5, #0
   1bc6c:	moveq	r4, #0
   1bc70:	streq	r4, [r8]
   1bc74:	sub	r4, r7, r1
   1bc78:	cmp	r4, r2
   1bc7c:	bge	1bd28 <__assert_fail@plt+0xa29c>
   1bc80:	add	r7, r1, r2
   1bc84:	mov	r6, #0
   1bc88:	mov	r2, #0
   1bc8c:	cmp	r7, r3
   1bc90:	movwgt	r6, #1
   1bc94:	cmn	r3, #1
   1bc98:	movwgt	r2, #1
   1bc9c:	cmp	r7, r1
   1bca0:	bvs	1bd5c <__assert_fail@plt+0xa2d0>
   1bca4:	ands	r1, r2, r6
   1bca8:	bne	1bd5c <__assert_fail@plt+0xa2d0>
   1bcac:	cmn	r0, #1
   1bcb0:	ble	1bcd8 <__assert_fail@plt+0xa24c>
   1bcb4:	cmp	r0, #0
   1bcb8:	beq	1bd24 <__assert_fail@plt+0xa298>
   1bcbc:	cmn	r7, #1
   1bcc0:	ble	1bcfc <__assert_fail@plt+0xa270>
   1bcc4:	mvn	r1, #-2147483648	; 0x80000000
   1bcc8:	udiv	r1, r1, r0
   1bccc:	cmp	r1, r7
   1bcd0:	bge	1bd24 <__assert_fail@plt+0xa298>
   1bcd4:	b	1bd5c <__assert_fail@plt+0xa2d0>
   1bcd8:	cmn	r7, #1
   1bcdc:	ble	1bd14 <__assert_fail@plt+0xa288>
   1bce0:	cmn	r0, #1
   1bce4:	beq	1bd24 <__assert_fail@plt+0xa298>
   1bce8:	mov	r1, #-2147483648	; 0x80000000
   1bcec:	sdiv	r1, r1, r0
   1bcf0:	cmp	r1, r7
   1bcf4:	bge	1bd24 <__assert_fail@plt+0xa298>
   1bcf8:	b	1bd5c <__assert_fail@plt+0xa2d0>
   1bcfc:	beq	1bd24 <__assert_fail@plt+0xa298>
   1bd00:	mov	r1, #-2147483648	; 0x80000000
   1bd04:	sdiv	r1, r1, r7
   1bd08:	cmp	r1, r0
   1bd0c:	bge	1bd24 <__assert_fail@plt+0xa298>
   1bd10:	b	1bd5c <__assert_fail@plt+0xa2d0>
   1bd14:	mvn	r1, #-2147483648	; 0x80000000
   1bd18:	sdiv	r1, r1, r0
   1bd1c:	cmp	r7, r1
   1bd20:	blt	1bd5c <__assert_fail@plt+0xa2d0>
   1bd24:	mul	r6, r7, r0
   1bd28:	mov	r0, r5
   1bd2c:	mov	r1, r6
   1bd30:	bl	1c000 <__assert_fail@plt+0xa574>
   1bd34:	cmp	r6, #0
   1bd38:	movwne	r6, #1
   1bd3c:	cmp	r0, #0
   1bd40:	bne	1bd54 <__assert_fail@plt+0xa2c8>
   1bd44:	clz	r1, r5
   1bd48:	lsr	r1, r1, #5
   1bd4c:	orrs	r1, r1, r6
   1bd50:	bne	1bd5c <__assert_fail@plt+0xa2d0>
   1bd54:	str	r7, [r8]
   1bd58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bd5c:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1bd60:	push	{fp, lr}
   1bd64:	mov	fp, sp
   1bd68:	mov	r1, #1
   1bd6c:	bl	1bf7c <__assert_fail@plt+0xa4f0>
   1bd70:	cmp	r0, #0
   1bd74:	popne	{fp, pc}
   1bd78:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1bd7c:	push	{fp, lr}
   1bd80:	mov	fp, sp
   1bd84:	bl	1bf7c <__assert_fail@plt+0xa4f0>
   1bd88:	cmp	r0, #0
   1bd8c:	popne	{fp, pc}
   1bd90:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1bd94:	push	{fp, lr}
   1bd98:	mov	fp, sp
   1bd9c:	mov	r1, #1
   1bda0:	bl	1bf7c <__assert_fail@plt+0xa4f0>
   1bda4:	cmp	r0, #0
   1bda8:	popne	{fp, pc}
   1bdac:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1bdb0:	push	{fp, lr}
   1bdb4:	mov	fp, sp
   1bdb8:	bl	1bf7c <__assert_fail@plt+0xa4f0>
   1bdbc:	cmp	r0, #0
   1bdc0:	popne	{fp, pc}
   1bdc4:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1bdc8:	push	{r4, r5, r6, sl, fp, lr}
   1bdcc:	add	fp, sp, #16
   1bdd0:	mov	r5, r0
   1bdd4:	mov	r0, r1
   1bdd8:	mov	r4, r1
   1bddc:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1bde0:	cmp	r0, #0
   1bde4:	beq	1be00 <__assert_fail@plt+0xa374>
   1bde8:	mov	r1, r5
   1bdec:	mov	r2, r4
   1bdf0:	mov	r6, r0
   1bdf4:	bl	11708 <memcpy@plt>
   1bdf8:	mov	r0, r6
   1bdfc:	pop	{r4, r5, r6, sl, fp, pc}
   1be00:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1be04:	push	{r4, r5, r6, sl, fp, lr}
   1be08:	add	fp, sp, #16
   1be0c:	mov	r5, r0
   1be10:	mov	r0, r1
   1be14:	mov	r4, r1
   1be18:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1be1c:	cmp	r0, #0
   1be20:	beq	1be3c <__assert_fail@plt+0xa3b0>
   1be24:	mov	r1, r5
   1be28:	mov	r2, r4
   1be2c:	mov	r6, r0
   1be30:	bl	11708 <memcpy@plt>
   1be34:	mov	r0, r6
   1be38:	pop	{r4, r5, r6, sl, fp, pc}
   1be3c:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1be40:	push	{r4, r5, r6, sl, fp, lr}
   1be44:	add	fp, sp, #16
   1be48:	mov	r5, r0
   1be4c:	add	r0, r1, #1
   1be50:	mov	r4, r1
   1be54:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1be58:	cmp	r0, #0
   1be5c:	beq	1be84 <__assert_fail@plt+0xa3f8>
   1be60:	mov	r6, r0
   1be64:	mov	r0, #0
   1be68:	mov	r1, r5
   1be6c:	mov	r2, r4
   1be70:	strb	r0, [r6, r4]
   1be74:	mov	r0, r6
   1be78:	bl	11708 <memcpy@plt>
   1be7c:	mov	r0, r6
   1be80:	pop	{r4, r5, r6, sl, fp, pc}
   1be84:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1be88:	push	{r4, r5, r6, sl, fp, lr}
   1be8c:	add	fp, sp, #16
   1be90:	mov	r4, r0
   1be94:	bl	118ac <strlen@plt>
   1be98:	add	r5, r0, #1
   1be9c:	mov	r0, r5
   1bea0:	bl	1bfd0 <__assert_fail@plt+0xa544>
   1bea4:	cmp	r0, #0
   1bea8:	beq	1bec4 <__assert_fail@plt+0xa438>
   1beac:	mov	r1, r4
   1beb0:	mov	r2, r5
   1beb4:	mov	r6, r0
   1beb8:	bl	11708 <memcpy@plt>
   1bebc:	mov	r0, r6
   1bec0:	pop	{r4, r5, r6, sl, fp, pc}
   1bec4:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1bec8:	push	{fp, lr}
   1becc:	mov	fp, sp
   1bed0:	movw	r0, #396	; 0x18c
   1bed4:	movw	r1, #63534	; 0xf82e
   1bed8:	mov	r2, #5
   1bedc:	movt	r0, #3
   1bee0:	movt	r1, #1
   1bee4:	ldr	r4, [r0]
   1bee8:	mov	r0, #0
   1beec:	bl	1172c <dcgettext@plt>
   1bef0:	movw	r2, #58893	; 0xe60d
   1bef4:	mov	r3, r0
   1bef8:	mov	r0, r4
   1befc:	mov	r1, #0
   1bf00:	movt	r2, #1
   1bf04:	bl	117e0 <error@plt>
   1bf08:	bl	11a5c <abort@plt>
   1bf0c:	push	{r4, sl, fp, lr}
   1bf10:	add	fp, sp, #8
   1bf14:	mov	r0, #0
   1bf18:	mov	r1, #0
   1bf1c:	bl	11888 <getcwd@plt>
   1bf20:	mov	r4, r0
   1bf24:	cmp	r0, #0
   1bf28:	bne	1bf3c <__assert_fail@plt+0xa4b0>
   1bf2c:	bl	118e8 <__errno_location@plt>
   1bf30:	ldr	r0, [r0]
   1bf34:	cmp	r0, #12
   1bf38:	beq	1bf44 <__assert_fail@plt+0xa4b8>
   1bf3c:	mov	r0, r4
   1bf40:	pop	{r4, sl, fp, pc}
   1bf44:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1bf48:	sub	sp, sp, #12
   1bf4c:	push	{fp, lr}
   1bf50:	mov	fp, sp
   1bf54:	sub	sp, sp, #4
   1bf58:	add	ip, fp, #8
   1bf5c:	stm	ip, {r1, r2, r3}
   1bf60:	add	r1, fp, #8
   1bf64:	str	r1, [sp]
   1bf68:	bl	1d21c <__assert_fail@plt+0xb790>
   1bf6c:	mov	sp, fp
   1bf70:	pop	{fp, lr}
   1bf74:	add	sp, sp, #12
   1bf78:	bx	lr
   1bf7c:	clz	r2, r1
   1bf80:	clz	r3, r0
   1bf84:	lsr	r2, r2, #5
   1bf88:	lsr	r3, r3, #5
   1bf8c:	orrs	r2, r3, r2
   1bf90:	movwne	r1, #1
   1bf94:	movwne	r0, #1
   1bf98:	cmp	r1, #0
   1bf9c:	beq	1bfcc <__assert_fail@plt+0xa540>
   1bfa0:	mvn	r2, #-2147483648	; 0x80000000
   1bfa4:	udiv	r2, r2, r1
   1bfa8:	cmp	r2, r0
   1bfac:	bcs	1bfcc <__assert_fail@plt+0xa540>
   1bfb0:	push	{fp, lr}
   1bfb4:	mov	fp, sp
   1bfb8:	bl	118e8 <__errno_location@plt>
   1bfbc:	mov	r1, #12
   1bfc0:	str	r1, [r0]
   1bfc4:	mov	r0, #0
   1bfc8:	pop	{fp, pc}
   1bfcc:	b	1166c <calloc@plt>
   1bfd0:	cmp	r0, #0
   1bfd4:	movweq	r0, #1
   1bfd8:	cmn	r0, #1
   1bfdc:	ble	1bfe4 <__assert_fail@plt+0xa558>
   1bfe0:	b	1181c <malloc@plt>
   1bfe4:	push	{fp, lr}
   1bfe8:	mov	fp, sp
   1bfec:	bl	118e8 <__errno_location@plt>
   1bff0:	mov	r1, #12
   1bff4:	str	r1, [r0]
   1bff8:	mov	r0, #0
   1bffc:	pop	{fp, pc}
   1c000:	push	{fp, lr}
   1c004:	mov	fp, sp
   1c008:	cmp	r0, #0
   1c00c:	beq	1c028 <__assert_fail@plt+0xa59c>
   1c010:	cmp	r1, #0
   1c014:	beq	1c034 <__assert_fail@plt+0xa5a8>
   1c018:	cmn	r1, #1
   1c01c:	ble	1c040 <__assert_fail@plt+0xa5b4>
   1c020:	pop	{fp, lr}
   1c024:	b	11738 <realloc@plt>
   1c028:	mov	r0, r1
   1c02c:	pop	{fp, lr}
   1c030:	b	1bfd0 <__assert_fail@plt+0xa544>
   1c034:	bl	16638 <__assert_fail@plt+0x4bac>
   1c038:	mov	r0, #0
   1c03c:	pop	{fp, pc}
   1c040:	bl	118e8 <__errno_location@plt>
   1c044:	mov	r1, #12
   1c048:	str	r1, [r0]
   1c04c:	mov	r0, #0
   1c050:	pop	{fp, pc}
   1c054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c058:	add	fp, sp, #28
   1c05c:	sub	sp, sp, #36	; 0x24
   1c060:	sub	sp, sp, #1024	; 0x400
   1c064:	ldrb	r3, [r0]
   1c068:	mov	r5, r0
   1c06c:	cmp	r3, #0
   1c070:	beq	1c124 <__assert_fail@plt+0xa698>
   1c074:	mov	r0, #1
   1c078:	mov	r2, #0
   1c07c:	ldrb	r7, [r1, r2]
   1c080:	cmp	r7, #0
   1c084:	uxtbne	r3, r3
   1c088:	subne	r3, r3, r7
   1c08c:	clzne	r3, r3
   1c090:	lsrne	r3, r3, #5
   1c094:	andne	r0, r0, r3
   1c098:	addne	r3, r5, r2
   1c09c:	addne	r2, r2, #1
   1c0a0:	ldrbne	r3, [r3, #1]
   1c0a4:	cmpne	r3, #0
   1c0a8:	bne	1c07c <__assert_fail@plt+0xa5f0>
   1c0ac:	add	r8, r1, r2
   1c0b0:	mov	r7, r5
   1c0b4:	ldrb	r2, [r8]
   1c0b8:	cmp	r2, #0
   1c0bc:	movwne	r7, #0
   1c0c0:	tst	r0, #1
   1c0c4:	cmpeq	r2, #0
   1c0c8:	bne	1c134 <__assert_fail@plt+0xa6a8>
   1c0cc:	sub	r4, r8, r1
   1c0d0:	ldrb	r1, [r1]
   1c0d4:	add	r0, r5, #1
   1c0d8:	bl	118b8 <strchr@plt>
   1c0dc:	cmp	r4, #1
   1c0e0:	beq	1c140 <__assert_fail@plt+0xa6b4>
   1c0e4:	cmp	r0, #0
   1c0e8:	mov	r7, r0
   1c0ec:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1c0f0:	add	r1, r5, r4
   1c0f4:	sub	r5, r8, r4
   1c0f8:	str	r0, [sp, #24]
   1c0fc:	str	r4, [sp, #28]
   1c100:	subs	r9, r1, r0
   1c104:	movwcc	r9, #1
   1c108:	cmp	r4, #31
   1c10c:	bhi	1c148 <__assert_fail@plt+0xa6bc>
   1c110:	cmp	r4, #3
   1c114:	bcs	1c24c <__assert_fail@plt+0xa7c0>
   1c118:	sub	r6, r4, #1
   1c11c:	mov	r4, #1
   1c120:	b	1c860 <__assert_fail@plt+0xadd4>
   1c124:	ldrb	r0, [r1]
   1c128:	cmp	r0, #0
   1c12c:	movne	r5, #0
   1c130:	mov	r7, r5
   1c134:	mov	r0, r7
   1c138:	sub	sp, fp, #28
   1c13c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c140:	mov	r7, r0
   1c144:	b	1c134 <__assert_fail@plt+0xa6a8>
   1c148:	mvn	r1, #0
   1c14c:	mov	r0, #0
   1c150:	mov	r2, #1
   1c154:	mov	ip, #1
   1c158:	mov	r3, #1
   1c15c:	add	r6, r1, r3
   1c160:	ldrb	r7, [r5, r2]
   1c164:	ldrb	r6, [r5, r6]
   1c168:	cmp	r7, r6
   1c16c:	bcs	1c180 <__assert_fail@plt+0xa6f4>
   1c170:	sub	ip, r2, r1
   1c174:	mov	r3, #1
   1c178:	mov	r0, r2
   1c17c:	b	1c1b4 <__assert_fail@plt+0xa728>
   1c180:	bne	1c198 <__assert_fail@plt+0xa70c>
   1c184:	cmp	r3, ip
   1c188:	bne	1c1b0 <__assert_fail@plt+0xa724>
   1c18c:	add	r0, r0, ip
   1c190:	mov	r3, #1
   1c194:	b	1c1b4 <__assert_fail@plt+0xa728>
   1c198:	add	r2, r0, #1
   1c19c:	mov	r1, r0
   1c1a0:	mov	r3, #1
   1c1a4:	mov	ip, #1
   1c1a8:	mov	r0, r2
   1c1ac:	b	1c1b4 <__assert_fail@plt+0xa728>
   1c1b0:	add	r3, r3, #1
   1c1b4:	add	r2, r3, r0
   1c1b8:	cmp	r2, r4
   1c1bc:	bcc	1c15c <__assert_fail@plt+0xa6d0>
   1c1c0:	cmp	r4, #2
   1c1c4:	bcc	1c350 <__assert_fail@plt+0xa8c4>
   1c1c8:	mvn	lr, #0
   1c1cc:	mov	r2, #0
   1c1d0:	mov	r3, #1
   1c1d4:	mov	sl, #1
   1c1d8:	mov	r6, #1
   1c1dc:	add	r7, lr, r6
   1c1e0:	ldrb	r0, [r5, r3]
   1c1e4:	ldrb	r7, [r5, r7]
   1c1e8:	cmp	r7, r0
   1c1ec:	bcs	1c200 <__assert_fail@plt+0xa774>
   1c1f0:	sub	sl, r3, lr
   1c1f4:	mov	r6, #1
   1c1f8:	mov	r2, r3
   1c1fc:	b	1c238 <__assert_fail@plt+0xa7ac>
   1c200:	cmp	r0, r7
   1c204:	bne	1c21c <__assert_fail@plt+0xa790>
   1c208:	cmp	r6, sl
   1c20c:	bne	1c234 <__assert_fail@plt+0xa7a8>
   1c210:	add	r2, r2, sl
   1c214:	mov	r6, #1
   1c218:	b	1c238 <__assert_fail@plt+0xa7ac>
   1c21c:	add	r0, r2, #1
   1c220:	mov	lr, r2
   1c224:	mov	r6, #1
   1c228:	mov	sl, #1
   1c22c:	mov	r2, r0
   1c230:	b	1c238 <__assert_fail@plt+0xa7ac>
   1c234:	add	r6, r6, #1
   1c238:	ldr	r0, [sp, #28]
   1c23c:	add	r3, r6, r2
   1c240:	cmp	r3, r0
   1c244:	bcc	1c1dc <__assert_fail@plt+0xa750>
   1c248:	b	1c358 <__assert_fail@plt+0xa8cc>
   1c24c:	mvn	r1, #0
   1c250:	mov	r0, #0
   1c254:	mov	r2, #1
   1c258:	mov	ip, #1
   1c25c:	mov	r3, #1
   1c260:	add	r6, r1, r3
   1c264:	ldrb	r7, [r5, r2]
   1c268:	ldrb	r6, [r5, r6]
   1c26c:	cmp	r7, r6
   1c270:	bcs	1c284 <__assert_fail@plt+0xa7f8>
   1c274:	sub	ip, r2, r1
   1c278:	mov	r3, #1
   1c27c:	mov	r0, r2
   1c280:	b	1c2b8 <__assert_fail@plt+0xa82c>
   1c284:	bne	1c29c <__assert_fail@plt+0xa810>
   1c288:	cmp	r3, ip
   1c28c:	bne	1c2b4 <__assert_fail@plt+0xa828>
   1c290:	add	r0, r0, ip
   1c294:	mov	r3, #1
   1c298:	b	1c2b8 <__assert_fail@plt+0xa82c>
   1c29c:	add	r2, r0, #1
   1c2a0:	mov	r1, r0
   1c2a4:	mov	r3, #1
   1c2a8:	mov	ip, #1
   1c2ac:	mov	r0, r2
   1c2b0:	b	1c2b8 <__assert_fail@plt+0xa82c>
   1c2b4:	add	r3, r3, #1
   1c2b8:	add	r2, r3, r0
   1c2bc:	cmp	r2, r4
   1c2c0:	bcc	1c260 <__assert_fail@plt+0xa7d4>
   1c2c4:	cmp	r4, #2
   1c2c8:	bcc	1c844 <__assert_fail@plt+0xadb8>
   1c2cc:	mvn	lr, #0
   1c2d0:	mov	r2, #0
   1c2d4:	mov	r3, #1
   1c2d8:	mov	r4, #1
   1c2dc:	mov	r6, #1
   1c2e0:	add	r7, lr, r6
   1c2e4:	ldrb	r0, [r5, r3]
   1c2e8:	ldrb	r7, [r5, r7]
   1c2ec:	cmp	r7, r0
   1c2f0:	bcs	1c304 <__assert_fail@plt+0xa878>
   1c2f4:	sub	r4, r3, lr
   1c2f8:	mov	r6, #1
   1c2fc:	mov	r2, r3
   1c300:	b	1c33c <__assert_fail@plt+0xa8b0>
   1c304:	cmp	r0, r7
   1c308:	bne	1c320 <__assert_fail@plt+0xa894>
   1c30c:	cmp	r6, r4
   1c310:	bne	1c338 <__assert_fail@plt+0xa8ac>
   1c314:	add	r2, r2, r4
   1c318:	mov	r6, #1
   1c31c:	b	1c33c <__assert_fail@plt+0xa8b0>
   1c320:	add	r0, r2, #1
   1c324:	mov	lr, r2
   1c328:	mov	r6, #1
   1c32c:	mov	r4, #1
   1c330:	mov	r2, r0
   1c334:	b	1c33c <__assert_fail@plt+0xa8b0>
   1c338:	add	r6, r6, #1
   1c33c:	ldr	r0, [sp, #28]
   1c340:	add	r3, r6, r2
   1c344:	cmp	r3, r0
   1c348:	bcc	1c2e0 <__assert_fail@plt+0xa854>
   1c34c:	b	1c84c <__assert_fail@plt+0xadc0>
   1c350:	mov	sl, #1
   1c354:	mvn	lr, #0
   1c358:	ldr	r2, [sp, #28]
   1c35c:	add	r6, sp, #32
   1c360:	add	r0, r6, #16
   1c364:	mov	r3, r6
   1c368:	vdup.32	q8, r2
   1c36c:	vst1.32	{d16-d17}, [r0]
   1c370:	add	r0, r6, #32
   1c374:	vst1.32	{d16-d17}, [r0]
   1c378:	add	r0, r6, #48	; 0x30
   1c37c:	vst1.32	{d16-d17}, [r0]
   1c380:	add	r0, r6, #64	; 0x40
   1c384:	vst1.32	{d16-d17}, [r0]
   1c388:	add	r0, r6, #80	; 0x50
   1c38c:	vst1.32	{d16-d17}, [r0]
   1c390:	add	r0, r6, #96	; 0x60
   1c394:	vst1.32	{d16-d17}, [r0]
   1c398:	add	r0, r6, #112	; 0x70
   1c39c:	vst1.32	{d16-d17}, [r0]
   1c3a0:	add	r0, r6, #128	; 0x80
   1c3a4:	vst1.32	{d16-d17}, [r0]
   1c3a8:	add	r0, r6, #144	; 0x90
   1c3ac:	vst1.32	{d16-d17}, [r0]
   1c3b0:	add	r0, r6, #160	; 0xa0
   1c3b4:	vst1.32	{d16-d17}, [r0]
   1c3b8:	add	r0, r6, #176	; 0xb0
   1c3bc:	vst1.32	{d16-d17}, [r0]
   1c3c0:	add	r0, r6, #192	; 0xc0
   1c3c4:	vst1.32	{d16-d17}, [r0]
   1c3c8:	add	r0, r6, #208	; 0xd0
   1c3cc:	vst1.32	{d16-d17}, [r0]
   1c3d0:	add	r0, r6, #224	; 0xe0
   1c3d4:	vst1.32	{d16-d17}, [r0]
   1c3d8:	add	r0, r6, #240	; 0xf0
   1c3dc:	vst1.32	{d16-d17}, [r0]
   1c3e0:	add	r0, r6, #256	; 0x100
   1c3e4:	vst1.32	{d16-d17}, [r0]
   1c3e8:	add	r0, r6, #272	; 0x110
   1c3ec:	vst1.32	{d16-d17}, [r0]
   1c3f0:	add	r0, r6, #288	; 0x120
   1c3f4:	vst1.32	{d16-d17}, [r0]
   1c3f8:	mov	r0, #1008	; 0x3f0
   1c3fc:	vst1.32	{d16-d17}, [r3], r0
   1c400:	add	r0, r6, #320	; 0x140
   1c404:	vst1.32	{d16-d17}, [r0]
   1c408:	add	r0, r6, #304	; 0x130
   1c40c:	vst1.32	{d16-d17}, [r0]
   1c410:	add	r0, r6, #336	; 0x150
   1c414:	vst1.32	{d16-d17}, [r0]
   1c418:	add	r0, r6, #352	; 0x160
   1c41c:	vst1.32	{d16-d17}, [r0]
   1c420:	add	r0, r6, #368	; 0x170
   1c424:	vst1.32	{d16-d17}, [r0]
   1c428:	add	r0, r6, #384	; 0x180
   1c42c:	vst1.32	{d16-d17}, [r0]
   1c430:	add	r0, r6, #400	; 0x190
   1c434:	vst1.32	{d16-d17}, [r0]
   1c438:	add	r0, r6, #416	; 0x1a0
   1c43c:	vst1.32	{d16-d17}, [r0]
   1c440:	add	r0, r6, #432	; 0x1b0
   1c444:	vst1.32	{d16-d17}, [r0]
   1c448:	add	r0, r6, #448	; 0x1c0
   1c44c:	vst1.32	{d16-d17}, [r0]
   1c450:	add	r0, r6, #464	; 0x1d0
   1c454:	vst1.32	{d16-d17}, [r0]
   1c458:	add	r0, r6, #480	; 0x1e0
   1c45c:	vst1.32	{d16-d17}, [r0]
   1c460:	add	r0, r6, #496	; 0x1f0
   1c464:	vst1.32	{d16-d17}, [r0]
   1c468:	add	r0, r6, #512	; 0x200
   1c46c:	vst1.32	{d16-d17}, [r0]
   1c470:	add	r0, r6, #528	; 0x210
   1c474:	vst1.32	{d16-d17}, [r0]
   1c478:	add	r0, r6, #544	; 0x220
   1c47c:	vst1.32	{d16-d17}, [r0]
   1c480:	add	r0, r6, #560	; 0x230
   1c484:	vst1.32	{d16-d17}, [r0]
   1c488:	add	r0, r6, #576	; 0x240
   1c48c:	vst1.32	{d16-d17}, [r0]
   1c490:	add	r0, r6, #592	; 0x250
   1c494:	vst1.32	{d16-d17}, [r0]
   1c498:	add	r0, r6, #624	; 0x270
   1c49c:	vst1.32	{d16-d17}, [r0]
   1c4a0:	add	r0, r6, #608	; 0x260
   1c4a4:	vst1.32	{d16-d17}, [r0]
   1c4a8:	add	r0, r6, #640	; 0x280
   1c4ac:	vst1.32	{d16-d17}, [r0]
   1c4b0:	add	r0, r6, #656	; 0x290
   1c4b4:	vst1.32	{d16-d17}, [r0]
   1c4b8:	add	r0, r6, #672	; 0x2a0
   1c4bc:	vst1.32	{d16-d17}, [r0]
   1c4c0:	add	r0, r6, #688	; 0x2b0
   1c4c4:	vst1.32	{d16-d17}, [r0]
   1c4c8:	add	r0, r6, #704	; 0x2c0
   1c4cc:	vst1.32	{d16-d17}, [r0]
   1c4d0:	add	r0, r6, #720	; 0x2d0
   1c4d4:	vst1.32	{d16-d17}, [r0]
   1c4d8:	add	r0, r6, #736	; 0x2e0
   1c4dc:	vst1.32	{d16-d17}, [r0]
   1c4e0:	add	r0, r6, #752	; 0x2f0
   1c4e4:	vst1.32	{d16-d17}, [r0]
   1c4e8:	add	r0, r6, #768	; 0x300
   1c4ec:	vst1.32	{d16-d17}, [r0]
   1c4f0:	add	r0, r6, #784	; 0x310
   1c4f4:	vst1.32	{d16-d17}, [r0]
   1c4f8:	add	r0, r6, #800	; 0x320
   1c4fc:	vst1.32	{d16-d17}, [r0]
   1c500:	add	r0, r6, #816	; 0x330
   1c504:	vst1.32	{d16-d17}, [r0]
   1c508:	add	r0, r6, #832	; 0x340
   1c50c:	vst1.32	{d16-d17}, [r0]
   1c510:	add	r0, r6, #848	; 0x350
   1c514:	vst1.32	{d16-d17}, [r0]
   1c518:	add	r0, r6, #864	; 0x360
   1c51c:	vst1.32	{d16-d17}, [r0]
   1c520:	add	r0, r6, #880	; 0x370
   1c524:	vst1.32	{d16-d17}, [r0]
   1c528:	add	r0, r6, #896	; 0x380
   1c52c:	vst1.32	{d16-d17}, [r0]
   1c530:	add	r0, r6, #928	; 0x3a0
   1c534:	vst1.32	{d16-d17}, [r0]
   1c538:	add	r0, r6, #912	; 0x390
   1c53c:	vst1.32	{d16-d17}, [r0]
   1c540:	add	r0, r6, #944	; 0x3b0
   1c544:	vst1.32	{d16-d17}, [r0]
   1c548:	add	r0, r6, #960	; 0x3c0
   1c54c:	vst1.32	{d16-d17}, [r0]
   1c550:	add	r0, r6, #976	; 0x3d0
   1c554:	vst1.32	{d16-d17}, [r0]
   1c558:	add	r0, r6, #992	; 0x3e0
   1c55c:	vst1.32	{d16-d17}, [r0]
   1c560:	vst1.32	{d16-d17}, [r3]
   1c564:	add	r0, r1, #1
   1c568:	add	r3, lr, #1
   1c56c:	cmp	r3, r0
   1c570:	movcc	sl, ip
   1c574:	movcc	r3, r0
   1c578:	cmp	r2, #0
   1c57c:	beq	1c594 <__assert_fail@plt+0xab08>
   1c580:	mov	r0, r2
   1c584:	ldrb	r1, [r8, -r0]
   1c588:	subs	r0, r0, #1
   1c58c:	str	r0, [r6, r1, lsl #2]
   1c590:	bne	1c584 <__assert_fail@plt+0xaaf8>
   1c594:	add	r1, r5, sl
   1c598:	mov	r0, r5
   1c59c:	mov	r2, r3
   1c5a0:	mov	r4, r3
   1c5a4:	bl	11720 <memcmp@plt>
   1c5a8:	cmp	r0, #0
   1c5ac:	str	r4, [sp, #20]
   1c5b0:	beq	1c6d8 <__assert_fail@plt+0xac4c>
   1c5b4:	ldr	r0, [sp, #24]
   1c5b8:	ldr	r8, [sp, #28]
   1c5bc:	mov	r1, #0
   1c5c0:	mov	r7, #0
   1c5c4:	add	r0, r0, r9
   1c5c8:	sub	r2, r8, r9
   1c5cc:	bl	11948 <memchr@plt>
   1c5d0:	sub	r1, r8, r4
   1c5d4:	cmp	r4, r1
   1c5d8:	movcs	r1, r4
   1c5dc:	cmp	r8, #0
   1c5e0:	str	r1, [sp, #16]
   1c5e4:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1c5e8:	mov	r1, r4
   1c5ec:	ldr	r4, [sp, #24]
   1c5f0:	cmp	r0, #0
   1c5f4:	bne	1c134 <__assert_fail@plt+0xa6a8>
   1c5f8:	mov	ip, r8
   1c5fc:	add	r0, r4, r1
   1c600:	sub	sl, r8, #1
   1c604:	add	r9, r5, r1
   1c608:	mov	r8, #0
   1c60c:	str	r0, [sp, #8]
   1c610:	rsb	r0, r1, #1
   1c614:	mov	lr, ip
   1c618:	str	r0, [sp, #12]
   1c61c:	add	r0, r4, lr
   1c620:	ldrb	r2, [r0, #-1]
   1c624:	ldr	r2, [r6, r2, lsl #2]
   1c628:	cmp	r2, #0
   1c62c:	beq	1c638 <__assert_fail@plt+0xabac>
   1c630:	add	r8, r2, r8
   1c634:	b	1c69c <__assert_fail@plt+0xac10>
   1c638:	cmp	r1, sl
   1c63c:	bcs	1c66c <__assert_fail@plt+0xabe0>
   1c640:	ldr	r2, [sp, #8]
   1c644:	add	r3, r2, r8
   1c648:	mov	r2, #0
   1c64c:	ldrb	r7, [r3, r2]
   1c650:	ldrb	r6, [r9, r2]
   1c654:	cmp	r6, r7
   1c658:	bne	1c694 <__assert_fail@plt+0xac08>
   1c65c:	add	r2, r2, #1
   1c660:	add	r7, r1, r2
   1c664:	cmp	r7, sl
   1c668:	bcc	1c64c <__assert_fail@plt+0xabc0>
   1c66c:	ldr	r2, [sp, #12]
   1c670:	add	r7, r4, r8
   1c674:	cmp	r2, #1
   1c678:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1c67c:	ldrb	r3, [r7, -r2]
   1c680:	ldrb	r6, [r5, -r2]
   1c684:	add	r2, r2, #1
   1c688:	cmp	r6, r3
   1c68c:	beq	1c674 <__assert_fail@plt+0xabe8>
   1c690:	ldr	r2, [sp, #16]
   1c694:	add	r2, r8, r2
   1c698:	add	r8, r2, #1
   1c69c:	add	r6, r8, ip
   1c6a0:	mov	r1, #0
   1c6a4:	mov	r7, #0
   1c6a8:	sub	r2, r6, lr
   1c6ac:	bl	11948 <memchr@plt>
   1c6b0:	cmp	r6, #0
   1c6b4:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1c6b8:	ldr	r4, [sp, #24]
   1c6bc:	ldr	ip, [sp, #28]
   1c6c0:	ldr	r1, [sp, #20]
   1c6c4:	mov	lr, r6
   1c6c8:	cmp	r0, #0
   1c6cc:	add	r6, sp, #32
   1c6d0:	beq	1c61c <__assert_fail@plt+0xab90>
   1c6d4:	b	1c134 <__assert_fail@plt+0xa6a8>
   1c6d8:	ldr	r0, [sp, #24]
   1c6dc:	ldr	r8, [sp, #28]
   1c6e0:	mov	r1, #0
   1c6e4:	mov	r7, #0
   1c6e8:	add	r0, r0, r9
   1c6ec:	sub	r2, r8, r9
   1c6f0:	bl	11948 <memchr@plt>
   1c6f4:	cmp	r8, #0
   1c6f8:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1c6fc:	ldr	r4, [sp, #24]
   1c700:	ldr	r1, [sp, #20]
   1c704:	cmp	r0, #0
   1c708:	str	sl, [sp, #16]
   1c70c:	bne	1c134 <__assert_fail@plt+0xa6a8>
   1c710:	ldr	r0, [sp, #16]
   1c714:	mov	ip, r8
   1c718:	mov	sl, #0
   1c71c:	mov	lr, r8
   1c720:	mov	r9, #0
   1c724:	sub	r0, r8, r0
   1c728:	str	r0, [sp, #12]
   1c72c:	sub	r0, r1, #1
   1c730:	str	r0, [sp, #4]
   1c734:	rsb	r0, r1, #0
   1c738:	str	r0, [sp]
   1c73c:	sub	r0, r8, #1
   1c740:	str	r0, [sp, #8]
   1c744:	add	r0, r4, lr
   1c748:	ldrb	r2, [r0, #-1]
   1c74c:	ldr	r3, [r6, r2, lsl #2]
   1c750:	cmp	r3, #0
   1c754:	beq	1c77c <__assert_fail@plt+0xacf0>
   1c758:	ldr	r2, [sp, #16]
   1c75c:	ldr	r1, [sp, #12]
   1c760:	cmp	r3, r2
   1c764:	mov	r2, r3
   1c768:	movcc	r2, r1
   1c76c:	cmp	sl, #0
   1c770:	moveq	r2, r3
   1c774:	mov	sl, #0
   1c778:	b	1c7f0 <__assert_fail@plt+0xad64>
   1c77c:	cmp	r1, sl
   1c780:	mov	r2, r1
   1c784:	ldr	r1, [sp, #8]
   1c788:	movcc	r2, sl
   1c78c:	cmp	r2, r1
   1c790:	bcs	1c7b4 <__assert_fail@plt+0xad28>
   1c794:	add	r3, r4, r9
   1c798:	ldrb	r7, [r3, r2]
   1c79c:	ldrb	r6, [r5, r2]
   1c7a0:	cmp	r6, r7
   1c7a4:	bne	1c834 <__assert_fail@plt+0xada8>
   1c7a8:	add	r2, r2, #1
   1c7ac:	cmp	r2, r1
   1c7b0:	bcc	1c798 <__assert_fail@plt+0xad0c>
   1c7b4:	ldr	r2, [sp, #4]
   1c7b8:	add	r7, r4, r9
   1c7bc:	add	r3, r2, #1
   1c7c0:	cmp	sl, r3
   1c7c4:	bcs	1c7dc <__assert_fail@plt+0xad50>
   1c7c8:	ldrb	r6, [r7, r2]
   1c7cc:	ldrb	r4, [r5, r2]
   1c7d0:	sub	r2, r2, #1
   1c7d4:	cmp	r4, r6
   1c7d8:	beq	1c7bc <__assert_fail@plt+0xad30>
   1c7dc:	add	r2, sl, #1
   1c7e0:	ldr	sl, [sp, #12]
   1c7e4:	cmp	r3, r2
   1c7e8:	ldr	r2, [sp, #16]
   1c7ec:	bcc	1c134 <__assert_fail@plt+0xa6a8>
   1c7f0:	add	r9, r2, r9
   1c7f4:	mov	r1, #0
   1c7f8:	mov	r8, ip
   1c7fc:	mov	r7, #0
   1c800:	add	r6, r9, ip
   1c804:	sub	r2, r6, lr
   1c808:	bl	11948 <memchr@plt>
   1c80c:	cmp	r6, #0
   1c810:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1c814:	ldr	r4, [sp, #24]
   1c818:	ldr	r1, [sp, #20]
   1c81c:	mov	lr, r6
   1c820:	cmp	r0, #0
   1c824:	mov	ip, r8
   1c828:	add	r6, sp, #32
   1c82c:	beq	1c744 <__assert_fail@plt+0xacb8>
   1c830:	b	1c134 <__assert_fail@plt+0xa6a8>
   1c834:	ldr	r1, [sp]
   1c838:	add	r2, r1, r2
   1c83c:	add	r2, r2, #1
   1c840:	b	1c774 <__assert_fail@plt+0xace8>
   1c844:	mov	r4, #1
   1c848:	mvn	lr, #0
   1c84c:	add	r0, r1, #1
   1c850:	add	r6, lr, #1
   1c854:	cmp	r6, r0
   1c858:	movcc	r4, ip
   1c85c:	movcc	r6, r0
   1c860:	add	r1, r5, r4
   1c864:	mov	r0, r5
   1c868:	mov	r2, r6
   1c86c:	bl	11720 <memcmp@plt>
   1c870:	cmp	r0, #0
   1c874:	str	r6, [sp, #20]
   1c878:	beq	1c97c <__assert_fail@plt+0xaef0>
   1c87c:	ldr	r0, [sp, #24]
   1c880:	ldr	r4, [sp, #28]
   1c884:	mov	r1, #0
   1c888:	mov	r7, #0
   1c88c:	add	r0, r0, r9
   1c890:	sub	r2, r4, r9
   1c894:	bl	11948 <memchr@plt>
   1c898:	sub	r2, r4, r6
   1c89c:	cmp	r6, r2
   1c8a0:	movcs	r2, r6
   1c8a4:	cmp	r4, #0
   1c8a8:	str	r2, [sp, #16]
   1c8ac:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1c8b0:	mov	r1, r4
   1c8b4:	ldr	r4, [sp, #24]
   1c8b8:	cmp	r0, #0
   1c8bc:	bne	1c134 <__assert_fail@plt+0xa6a8>
   1c8c0:	add	r0, r4, r6
   1c8c4:	add	r9, r5, r6
   1c8c8:	mov	sl, #0
   1c8cc:	mov	ip, r1
   1c8d0:	str	r0, [sp, #8]
   1c8d4:	rsb	r0, r6, #1
   1c8d8:	str	r0, [sp, #12]
   1c8dc:	cmp	r1, r6
   1c8e0:	bls	1c910 <__assert_fail@plt+0xae84>
   1c8e4:	ldr	r0, [sp, #8]
   1c8e8:	mov	r2, #0
   1c8ec:	add	r0, r0, sl
   1c8f0:	ldrb	r3, [r0, r2]
   1c8f4:	ldrb	r7, [r9, r2]
   1c8f8:	cmp	r7, r3
   1c8fc:	bne	1c938 <__assert_fail@plt+0xaeac>
   1c900:	add	r2, r2, #1
   1c904:	add	r3, r6, r2
   1c908:	cmp	r3, r1
   1c90c:	bcc	1c8f0 <__assert_fail@plt+0xae64>
   1c910:	ldr	r0, [sp, #12]
   1c914:	add	r7, r4, sl
   1c918:	cmp	r0, #1
   1c91c:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1c920:	ldrb	r2, [r7, -r0]
   1c924:	ldrb	r3, [r5, -r0]
   1c928:	add	r0, r0, #1
   1c92c:	cmp	r3, r2
   1c930:	beq	1c918 <__assert_fail@plt+0xae8c>
   1c934:	ldr	r2, [sp, #16]
   1c938:	add	r2, sl, r2
   1c93c:	add	r0, r4, ip
   1c940:	mov	r7, #0
   1c944:	add	sl, r2, #1
   1c948:	add	r8, sl, r1
   1c94c:	mov	r1, #0
   1c950:	sub	r2, r8, ip
   1c954:	bl	11948 <memchr@plt>
   1c958:	cmp	r0, #0
   1c95c:	bne	1c134 <__assert_fail@plt+0xa6a8>
   1c960:	ldr	r4, [sp, #24]
   1c964:	ldr	r1, [sp, #28]
   1c968:	ldr	r6, [sp, #20]
   1c96c:	cmp	r8, #0
   1c970:	mov	ip, r8
   1c974:	bne	1c8dc <__assert_fail@plt+0xae50>
   1c978:	b	1c134 <__assert_fail@plt+0xa6a8>
   1c97c:	ldr	r0, [sp, #24]
   1c980:	ldr	r8, [sp, #28]
   1c984:	mov	r1, #0
   1c988:	mov	r7, #0
   1c98c:	add	r0, r0, r9
   1c990:	sub	r2, r8, r9
   1c994:	bl	11948 <memchr@plt>
   1c998:	cmp	r8, #0
   1c99c:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1c9a0:	str	r4, [sp, #16]
   1c9a4:	ldr	r4, [sp, #24]
   1c9a8:	cmp	r0, #0
   1c9ac:	bne	1c134 <__assert_fail@plt+0xa6a8>
   1c9b0:	ldr	r0, [sp, #16]
   1c9b4:	mov	r1, r8
   1c9b8:	mov	sl, #0
   1c9bc:	mov	ip, r8
   1c9c0:	mov	r9, #0
   1c9c4:	sub	r0, r8, r0
   1c9c8:	str	r0, [sp, #12]
   1c9cc:	sub	r0, r6, #1
   1c9d0:	str	r0, [sp, #8]
   1c9d4:	rsb	r0, r6, #0
   1c9d8:	str	r0, [sp, #4]
   1c9dc:	cmp	r6, sl
   1c9e0:	movcc	r6, sl
   1c9e4:	cmp	r6, r1
   1c9e8:	bcs	1ca0c <__assert_fail@plt+0xaf80>
   1c9ec:	add	r2, r4, r9
   1c9f0:	ldrb	r3, [r2, r6]
   1c9f4:	ldrb	r7, [r5, r6]
   1c9f8:	cmp	r7, r3
   1c9fc:	bne	1ca4c <__assert_fail@plt+0xafc0>
   1ca00:	add	r6, r6, #1
   1ca04:	cmp	r6, r1
   1ca08:	bcc	1c9f0 <__assert_fail@plt+0xaf64>
   1ca0c:	ldr	r0, [sp, #8]
   1ca10:	add	r7, r4, r9
   1ca14:	add	r2, r0, #1
   1ca18:	cmp	sl, r2
   1ca1c:	bcs	1ca34 <__assert_fail@plt+0xafa8>
   1ca20:	ldrb	r3, [r7, r0]
   1ca24:	ldrb	r6, [r5, r0]
   1ca28:	sub	r0, r0, #1
   1ca2c:	cmp	r6, r3
   1ca30:	beq	1ca14 <__assert_fail@plt+0xaf88>
   1ca34:	add	r0, sl, #1
   1ca38:	ldr	sl, [sp, #12]
   1ca3c:	cmp	r2, r0
   1ca40:	ldr	r2, [sp, #16]
   1ca44:	bcs	1ca5c <__assert_fail@plt+0xafd0>
   1ca48:	b	1c134 <__assert_fail@plt+0xa6a8>
   1ca4c:	ldr	r2, [sp, #4]
   1ca50:	mov	sl, #0
   1ca54:	add	r0, r2, r6
   1ca58:	add	r2, r0, #1
   1ca5c:	add	r9, r2, r9
   1ca60:	add	r0, r4, ip
   1ca64:	mov	r7, #0
   1ca68:	add	r8, r9, r1
   1ca6c:	mov	r1, #0
   1ca70:	sub	r2, r8, ip
   1ca74:	bl	11948 <memchr@plt>
   1ca78:	cmp	r8, #0
   1ca7c:	beq	1c134 <__assert_fail@plt+0xa6a8>
   1ca80:	ldr	r4, [sp, #24]
   1ca84:	ldr	r1, [sp, #28]
   1ca88:	ldr	r6, [sp, #20]
   1ca8c:	cmp	r0, #0
   1ca90:	mov	ip, r8
   1ca94:	beq	1c9dc <__assert_fail@plt+0xaf50>
   1ca98:	b	1c134 <__assert_fail@plt+0xa6a8>
   1ca9c:	sub	r0, r0, #1
   1caa0:	ldrb	r3, [r0, #1]!
   1caa4:	cmp	r3, #47	; 0x2f
   1caa8:	beq	1caa0 <__assert_fail@plt+0xb014>
   1caac:	mov	r2, #0
   1cab0:	mov	r1, r0
   1cab4:	b	1cad0 <__assert_fail@plt+0xb044>
   1cab8:	cmp	r3, #0
   1cabc:	bxeq	lr
   1cac0:	tst	r2, #1
   1cac4:	mov	r2, #0
   1cac8:	movne	r0, r1
   1cacc:	ldrb	r3, [r1, #1]!
   1cad0:	uxtb	r3, r3
   1cad4:	cmp	r3, #47	; 0x2f
   1cad8:	bne	1cab8 <__assert_fail@plt+0xb02c>
   1cadc:	ldrb	r3, [r1, #1]!
   1cae0:	mov	r2, #1
   1cae4:	b	1cad0 <__assert_fail@plt+0xb044>
   1cae8:	push	{r4, sl, fp, lr}
   1caec:	add	fp, sp, #8
   1caf0:	mov	r4, r0
   1caf4:	bl	118ac <strlen@plt>
   1caf8:	mov	r1, r0
   1cafc:	sub	r2, r4, #1
   1cb00:	mov	r0, r1
   1cb04:	cmp	r1, #2
   1cb08:	popcc	{r4, sl, fp, pc}
   1cb0c:	ldrb	r3, [r2, r0]
   1cb10:	sub	r1, r0, #1
   1cb14:	cmp	r3, #47	; 0x2f
   1cb18:	beq	1cb00 <__assert_fail@plt+0xb074>
   1cb1c:	pop	{r4, sl, fp, pc}
   1cb20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb24:	add	fp, sp, #28
   1cb28:	sub	sp, sp, #4
   1cb2c:	mov	r4, r0
   1cb30:	bl	11768 <chdir@plt>
   1cb34:	cmp	r0, #0
   1cb38:	beq	1cbfc <__assert_fail@plt+0xb170>
   1cb3c:	mov	r6, r0
   1cb40:	bl	118e8 <__errno_location@plt>
   1cb44:	mov	r9, r0
   1cb48:	ldr	r0, [r0]
   1cb4c:	cmp	r0, #36	; 0x24
   1cb50:	bne	1cdd0 <__assert_fail@plt+0xb344>
   1cb54:	mov	r0, r4
   1cb58:	bl	118ac <strlen@plt>
   1cb5c:	cmp	r0, #0
   1cb60:	beq	1ce1c <__assert_fail@plt+0xb390>
   1cb64:	mov	r7, r0
   1cb68:	mov	r0, #0
   1cb6c:	cmp	r0, r7, lsr #12
   1cb70:	beq	1ce3c <__assert_fail@plt+0xb3b0>
   1cb74:	movw	r1, #63485	; 0xf7fd
   1cb78:	mov	r0, r4
   1cb7c:	movt	r1, #1
   1cb80:	bl	11a80 <strspn@plt>
   1cb84:	cmp	r0, #0
   1cb88:	beq	1cc04 <__assert_fail@plt+0xb178>
   1cb8c:	mov	r6, r0
   1cb90:	cmp	r0, #2
   1cb94:	bne	1cc10 <__assert_fail@plt+0xb184>
   1cb98:	add	r0, r4, #3
   1cb9c:	sub	r2, r7, #3
   1cba0:	mov	r1, #47	; 0x2f
   1cba4:	mov	r8, #47	; 0x2f
   1cba8:	bl	11948 <memchr@plt>
   1cbac:	cmp	r0, #0
   1cbb0:	beq	1cd7c <__assert_fail@plt+0xb2f0>
   1cbb4:	mov	r6, r0
   1cbb8:	mov	r0, #0
   1cbbc:	mov	r1, r4
   1cbc0:	mov	r2, #18688	; 0x4900
   1cbc4:	strb	r0, [r6]
   1cbc8:	mvn	r0, #99	; 0x63
   1cbcc:	bl	118d0 <openat64@plt>
   1cbd0:	cmp	r0, #0
   1cbd4:	strb	r8, [r6]
   1cbd8:	blt	1cd74 <__assert_fail@plt+0xb2e8>
   1cbdc:	movw	r1, #63485	; 0xf7fd
   1cbe0:	add	r6, r6, #1
   1cbe4:	mov	r5, r0
   1cbe8:	movt	r1, #1
   1cbec:	mov	r0, r6
   1cbf0:	bl	11a80 <strspn@plt>
   1cbf4:	add	r6, r6, r0
   1cbf8:	b	1cc34 <__assert_fail@plt+0xb1a8>
   1cbfc:	mov	r6, #0
   1cc00:	b	1cdd0 <__assert_fail@plt+0xb344>
   1cc04:	mvn	r5, #99	; 0x63
   1cc08:	mov	r6, r4
   1cc0c:	b	1cc34 <__assert_fail@plt+0xb1a8>
   1cc10:	movw	r1, #63485	; 0xf7fd
   1cc14:	mvn	r0, #99	; 0x63
   1cc18:	mov	r2, #18688	; 0x4900
   1cc1c:	movt	r1, #1
   1cc20:	bl	118d0 <openat64@plt>
   1cc24:	cmp	r0, #0
   1cc28:	blt	1cd74 <__assert_fail@plt+0xb2e8>
   1cc2c:	mov	r5, r0
   1cc30:	add	r6, r4, r6
   1cc34:	ldrb	r0, [r6]
   1cc38:	cmp	r0, #47	; 0x2f
   1cc3c:	beq	1ce5c <__assert_fail@plt+0xb3d0>
   1cc40:	add	sl, r4, r7
   1cc44:	cmp	r6, sl
   1cc48:	bhi	1ce7c <__assert_fail@plt+0xb3f0>
   1cc4c:	sub	r0, sl, r6
   1cc50:	str	r9, [sp]
   1cc54:	cmp	r0, #4096	; 0x1000
   1cc58:	blt	1cd30 <__assert_fail@plt+0xb2a4>
   1cc5c:	movw	r9, #63485	; 0xf7fd
   1cc60:	mov	r8, #0
   1cc64:	movt	r9, #1
   1cc68:	mov	r0, r6
   1cc6c:	mov	r1, #47	; 0x2f
   1cc70:	mov	r2, #4096	; 0x1000
   1cc74:	bl	118dc <memrchr@plt>
   1cc78:	cmp	r0, #0
   1cc7c:	beq	1cd88 <__assert_fail@plt+0xb2fc>
   1cc80:	mov	r4, r0
   1cc84:	strb	r8, [r0], -r6
   1cc88:	cmp	r0, #4096	; 0x1000
   1cc8c:	bge	1cddc <__assert_fail@plt+0xb350>
   1cc90:	mov	r0, r5
   1cc94:	mov	r1, r6
   1cc98:	mov	r2, #18688	; 0x4900
   1cc9c:	bl	118d0 <openat64@plt>
   1cca0:	cmp	r0, #0
   1cca4:	blt	1cd98 <__assert_fail@plt+0xb30c>
   1cca8:	mov	r7, r0
   1ccac:	cmp	r5, #0
   1ccb0:	blt	1ccc4 <__assert_fail@plt+0xb238>
   1ccb4:	mov	r0, r5
   1ccb8:	bl	11a68 <close@plt>
   1ccbc:	cmp	r0, #0
   1ccc0:	bne	1cdfc <__assert_fail@plt+0xb370>
   1ccc4:	mov	r0, #47	; 0x2f
   1ccc8:	mov	r1, r9
   1cccc:	strb	r0, [r4], #1
   1ccd0:	mov	r0, r4
   1ccd4:	bl	11a80 <strspn@plt>
   1ccd8:	add	r6, r4, r0
   1ccdc:	mov	r5, r7
   1cce0:	sub	r0, sl, r6
   1cce4:	cmp	r0, #4096	; 0x1000
   1cce8:	bge	1cc68 <__assert_fail@plt+0xb1dc>
   1ccec:	cmp	r6, sl
   1ccf0:	bcs	1cd3c <__assert_fail@plt+0xb2b0>
   1ccf4:	mov	r0, r7
   1ccf8:	mov	r1, r6
   1ccfc:	mov	r2, #18688	; 0x4900
   1cd00:	bl	118d0 <openat64@plt>
   1cd04:	ldr	r9, [sp]
   1cd08:	cmp	r0, #0
   1cd0c:	blt	1cda8 <__assert_fail@plt+0xb31c>
   1cd10:	mov	r5, r0
   1cd14:	cmp	r7, #0
   1cd18:	blt	1cd44 <__assert_fail@plt+0xb2b8>
   1cd1c:	mov	r0, r7
   1cd20:	bl	11a68 <close@plt>
   1cd24:	cmp	r0, #0
   1cd28:	beq	1cd44 <__assert_fail@plt+0xb2b8>
   1cd2c:	b	1cdfc <__assert_fail@plt+0xb370>
   1cd30:	mov	r7, r5
   1cd34:	cmp	r6, sl
   1cd38:	bcc	1ccf4 <__assert_fail@plt+0xb268>
   1cd3c:	ldr	r9, [sp]
   1cd40:	mov	r5, r7
   1cd44:	mov	r0, r5
   1cd48:	bl	119f0 <fchdir@plt>
   1cd4c:	cmp	r0, #0
   1cd50:	bne	1cdac <__assert_fail@plt+0xb320>
   1cd54:	mov	r6, #0
   1cd58:	cmp	r5, #0
   1cd5c:	blt	1cdd0 <__assert_fail@plt+0xb344>
   1cd60:	mov	r0, r5
   1cd64:	bl	11a68 <close@plt>
   1cd68:	cmp	r0, #0
   1cd6c:	beq	1cdd0 <__assert_fail@plt+0xb344>
   1cd70:	b	1cdfc <__assert_fail@plt+0xb370>
   1cd74:	ldr	r4, [r9]
   1cd78:	b	1cdc8 <__assert_fail@plt+0xb33c>
   1cd7c:	mov	r0, #36	; 0x24
   1cd80:	str	r0, [r9]
   1cd84:	b	1cdcc <__assert_fail@plt+0xb340>
   1cd88:	ldr	r1, [sp]
   1cd8c:	mov	r0, #36	; 0x24
   1cd90:	str	r0, [r1]
   1cd94:	b	1cdcc <__assert_fail@plt+0xb340>
   1cd98:	ldr	r9, [sp]
   1cd9c:	mov	r0, #47	; 0x2f
   1cda0:	strb	r0, [r4]
   1cda4:	b	1cdac <__assert_fail@plt+0xb320>
   1cda8:	mov	r5, r7
   1cdac:	ldr	r4, [r9]
   1cdb0:	cmp	r5, #0
   1cdb4:	blt	1cdc8 <__assert_fail@plt+0xb33c>
   1cdb8:	mov	r0, r5
   1cdbc:	bl	11a68 <close@plt>
   1cdc0:	cmp	r0, #0
   1cdc4:	bne	1cdfc <__assert_fail@plt+0xb370>
   1cdc8:	str	r4, [r9]
   1cdcc:	mvn	r6, #0
   1cdd0:	mov	r0, r6
   1cdd4:	sub	sp, fp, #28
   1cdd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cddc:	movw	r0, #63638	; 0xf896
   1cde0:	movw	r1, #63559	; 0xf847
   1cde4:	movw	r3, #63576	; 0xf858
   1cde8:	mov	r2, #179	; 0xb3
   1cdec:	movt	r0, #1
   1cdf0:	movt	r1, #1
   1cdf4:	movt	r3, #1
   1cdf8:	bl	11a8c <__assert_fail@plt>
   1cdfc:	movw	r0, #63657	; 0xf8a9
   1ce00:	movw	r1, #63559	; 0xf847
   1ce04:	movw	r3, #63670	; 0xf8b6
   1ce08:	mov	r2, #64	; 0x40
   1ce0c:	movt	r0, #1
   1ce10:	movt	r1, #1
   1ce14:	movt	r3, #1
   1ce18:	bl	11a8c <__assert_fail@plt>
   1ce1c:	movw	r0, #63551	; 0xf83f
   1ce20:	movw	r1, #63559	; 0xf847
   1ce24:	movw	r3, #63576	; 0xf858
   1ce28:	mov	r2, #126	; 0x7e
   1ce2c:	movt	r0, #1
   1ce30:	movt	r1, #1
   1ce34:	movt	r3, #1
   1ce38:	bl	11a8c <__assert_fail@plt>
   1ce3c:	movw	r0, #63599	; 0xf86f
   1ce40:	movw	r1, #63559	; 0xf847
   1ce44:	movw	r3, #63576	; 0xf858
   1ce48:	mov	r2, #127	; 0x7f
   1ce4c:	movt	r0, #1
   1ce50:	movt	r1, #1
   1ce54:	movt	r3, #1
   1ce58:	bl	11a8c <__assert_fail@plt>
   1ce5c:	movw	r0, #63611	; 0xf87b
   1ce60:	movw	r1, #63559	; 0xf847
   1ce64:	movw	r3, #63576	; 0xf858
   1ce68:	mov	r2, #162	; 0xa2
   1ce6c:	movt	r0, #1
   1ce70:	movt	r1, #1
   1ce74:	movt	r3, #1
   1ce78:	bl	11a8c <__assert_fail@plt>
   1ce7c:	movw	r0, #63623	; 0xf887
   1ce80:	movw	r1, #63559	; 0xf847
   1ce84:	movw	r3, #63576	; 0xf858
   1ce88:	mov	r2, #163	; 0xa3
   1ce8c:	movt	r0, #1
   1ce90:	movt	r1, #1
   1ce94:	movt	r3, #1
   1ce98:	bl	11a8c <__assert_fail@plt>
   1ce9c:	push	{r4, r5, r6, sl, fp, lr}
   1cea0:	add	fp, sp, #16
   1cea4:	mov	r4, r0
   1cea8:	bl	117c8 <__fpending@plt>
   1ceac:	ldr	r6, [r4]
   1ceb0:	mov	r5, r0
   1ceb4:	mov	r0, r4
   1ceb8:	bl	1cf20 <__assert_fail@plt+0xb494>
   1cebc:	tst	r6, #32
   1cec0:	bne	1cef8 <__assert_fail@plt+0xb46c>
   1cec4:	cmp	r0, #0
   1cec8:	mov	r4, r0
   1cecc:	mvnne	r4, #0
   1ced0:	cmp	r5, #0
   1ced4:	bne	1cf04 <__assert_fail@plt+0xb478>
   1ced8:	cmp	r0, #0
   1cedc:	beq	1cf04 <__assert_fail@plt+0xb478>
   1cee0:	bl	118e8 <__errno_location@plt>
   1cee4:	ldr	r0, [r0]
   1cee8:	subs	r4, r0, #9
   1ceec:	mvnne	r4, #0
   1cef0:	mov	r0, r4
   1cef4:	pop	{r4, r5, r6, sl, fp, pc}
   1cef8:	mvn	r4, #0
   1cefc:	cmp	r0, #0
   1cf00:	beq	1cf0c <__assert_fail@plt+0xb480>
   1cf04:	mov	r0, r4
   1cf08:	pop	{r4, r5, r6, sl, fp, pc}
   1cf0c:	bl	118e8 <__errno_location@plt>
   1cf10:	mov	r1, #0
   1cf14:	str	r1, [r0]
   1cf18:	mov	r0, r4
   1cf1c:	pop	{r4, r5, r6, sl, fp, pc}
   1cf20:	push	{r4, r5, r6, sl, fp, lr}
   1cf24:	add	fp, sp, #16
   1cf28:	sub	sp, sp, #8
   1cf2c:	mov	r4, r0
   1cf30:	bl	11930 <fileno@plt>
   1cf34:	cmn	r0, #1
   1cf38:	ble	1cfac <__assert_fail@plt+0xb520>
   1cf3c:	mov	r0, r4
   1cf40:	bl	11840 <__freading@plt>
   1cf44:	cmp	r0, #0
   1cf48:	beq	1cf74 <__assert_fail@plt+0xb4e8>
   1cf4c:	mov	r0, r4
   1cf50:	bl	11930 <fileno@plt>
   1cf54:	mov	r1, #1
   1cf58:	mov	r2, #0
   1cf5c:	mov	r3, #0
   1cf60:	str	r1, [sp]
   1cf64:	bl	117a4 <lseek64@plt>
   1cf68:	and	r0, r0, r1
   1cf6c:	cmn	r0, #1
   1cf70:	beq	1cfac <__assert_fail@plt+0xb520>
   1cf74:	mov	r0, r4
   1cf78:	bl	1d004 <__assert_fail@plt+0xb578>
   1cf7c:	cmp	r0, #0
   1cf80:	beq	1cfac <__assert_fail@plt+0xb520>
   1cf84:	bl	118e8 <__errno_location@plt>
   1cf88:	ldr	r6, [r0]
   1cf8c:	mov	r5, r0
   1cf90:	mov	r0, r4
   1cf94:	bl	11954 <fclose@plt>
   1cf98:	cmp	r6, #0
   1cf9c:	strne	r6, [r5]
   1cfa0:	mvnne	r0, #0
   1cfa4:	sub	sp, fp, #16
   1cfa8:	pop	{r4, r5, r6, sl, fp, pc}
   1cfac:	mov	r0, r4
   1cfb0:	sub	sp, fp, #16
   1cfb4:	pop	{r4, r5, r6, sl, fp, lr}
   1cfb8:	b	11954 <fclose@plt>
   1cfbc:	sub	sp, sp, #8
   1cfc0:	push	{fp, lr}
   1cfc4:	mov	fp, sp
   1cfc8:	sub	sp, sp, #8
   1cfcc:	str	r2, [fp, #8]
   1cfd0:	mov	r2, #0
   1cfd4:	tst	r1, #64	; 0x40
   1cfd8:	str	r3, [fp, #12]
   1cfdc:	addne	r2, fp, #8
   1cfe0:	orrne	r2, r2, #4
   1cfe4:	strne	r2, [sp, #4]
   1cfe8:	ldrne	r2, [fp, #8]
   1cfec:	bl	117f8 <open64@plt>
   1cff0:	bl	1d1d8 <__assert_fail@plt+0xb74c>
   1cff4:	mov	sp, fp
   1cff8:	pop	{fp, lr}
   1cffc:	add	sp, sp, #8
   1d000:	bx	lr
   1d004:	push	{r4, sl, fp, lr}
   1d008:	add	fp, sp, #8
   1d00c:	sub	sp, sp, #8
   1d010:	mov	r4, r0
   1d014:	cmp	r0, #0
   1d018:	beq	1d034 <__assert_fail@plt+0xb5a8>
   1d01c:	mov	r0, r4
   1d020:	bl	11840 <__freading@plt>
   1d024:	cmp	r0, #0
   1d028:	ldrbne	r0, [r4, #1]
   1d02c:	tstne	r0, #1
   1d030:	bne	1d044 <__assert_fail@plt+0xb5b8>
   1d034:	mov	r0, r4
   1d038:	sub	sp, fp, #8
   1d03c:	pop	{r4, sl, fp, lr}
   1d040:	b	116e4 <fflush@plt>
   1d044:	mov	r0, #1
   1d048:	mov	r2, #0
   1d04c:	mov	r3, #0
   1d050:	str	r0, [sp]
   1d054:	mov	r0, r4
   1d058:	bl	1d060 <__assert_fail@plt+0xb5d4>
   1d05c:	b	1d034 <__assert_fail@plt+0xb5a8>
   1d060:	push	{r4, r5, r6, r7, fp, lr}
   1d064:	add	fp, sp, #16
   1d068:	sub	sp, sp, #8
   1d06c:	mov	r4, r0
   1d070:	ldr	r0, [r0, #4]
   1d074:	mov	r5, r3
   1d078:	mov	r6, r2
   1d07c:	ldr	r1, [r4, #8]
   1d080:	cmp	r1, r0
   1d084:	bne	1d0a0 <__assert_fail@plt+0xb614>
   1d088:	ldrd	r0, [r4, #16]
   1d08c:	cmp	r1, r0
   1d090:	bne	1d0a0 <__assert_fail@plt+0xb614>
   1d094:	ldr	r0, [r4, #36]	; 0x24
   1d098:	cmp	r0, #0
   1d09c:	beq	1d0b8 <__assert_fail@plt+0xb62c>
   1d0a0:	mov	r0, r4
   1d0a4:	mov	r2, r6
   1d0a8:	mov	r3, r5
   1d0ac:	sub	sp, fp, #16
   1d0b0:	pop	{r4, r5, r6, r7, fp, lr}
   1d0b4:	b	11960 <fseeko64@plt>
   1d0b8:	ldr	r7, [fp, #8]
   1d0bc:	mov	r0, r4
   1d0c0:	bl	11930 <fileno@plt>
   1d0c4:	mov	r2, r6
   1d0c8:	mov	r3, r5
   1d0cc:	str	r7, [sp]
   1d0d0:	bl	117a4 <lseek64@plt>
   1d0d4:	and	r2, r0, r1
   1d0d8:	cmn	r2, #1
   1d0dc:	mvneq	r0, #0
   1d0e0:	subeq	sp, fp, #16
   1d0e4:	popeq	{r4, r5, r6, r7, fp, pc}
   1d0e8:	strd	r0, [r4, #80]	; 0x50
   1d0ec:	ldr	r0, [r4]
   1d0f0:	bic	r0, r0, #16
   1d0f4:	str	r0, [r4]
   1d0f8:	mov	r0, #0
   1d0fc:	sub	sp, fp, #16
   1d100:	pop	{r4, r5, r6, r7, fp, pc}
   1d104:	push	{fp, lr}
   1d108:	mov	fp, sp
   1d10c:	mov	r0, #14
   1d110:	bl	119c0 <nl_langinfo@plt>
   1d114:	movw	r1, #58350	; 0xe3ee
   1d118:	cmp	r0, #0
   1d11c:	movt	r1, #1
   1d120:	movne	r1, r0
   1d124:	movw	r0, #63707	; 0xf8db
   1d128:	ldrb	r2, [r1]
   1d12c:	movt	r0, #1
   1d130:	cmp	r2, #0
   1d134:	movne	r0, r1
   1d138:	pop	{fp, pc}
   1d13c:	push	{r4, r5, r6, r7, fp, lr}
   1d140:	add	fp, sp, #16
   1d144:	sub	sp, sp, #8
   1d148:	add	r5, sp, #4
   1d14c:	cmp	r0, #0
   1d150:	mov	r7, r2
   1d154:	mov	r4, r1
   1d158:	movne	r5, r0
   1d15c:	mov	r0, r5
   1d160:	bl	117d4 <mbrtowc@plt>
   1d164:	mov	r6, r0
   1d168:	cmp	r7, #0
   1d16c:	beq	1d190 <__assert_fail@plt+0xb704>
   1d170:	cmn	r6, #2
   1d174:	bcc	1d190 <__assert_fail@plt+0xb704>
   1d178:	mov	r0, #0
   1d17c:	bl	1d3a0 <__assert_fail@plt+0xb914>
   1d180:	cmp	r0, #0
   1d184:	ldrbeq	r0, [r4]
   1d188:	moveq	r6, #1
   1d18c:	streq	r0, [r5]
   1d190:	mov	r0, r6
   1d194:	sub	sp, fp, #16
   1d198:	pop	{r4, r5, r6, r7, fp, pc}
   1d19c:	cmp	r2, #0
   1d1a0:	beq	1d1d0 <__assert_fail@plt+0xb744>
   1d1a4:	mvn	r3, #0
   1d1a8:	udiv	r3, r3, r2
   1d1ac:	cmp	r3, r1
   1d1b0:	bcs	1d1d0 <__assert_fail@plt+0xb744>
   1d1b4:	push	{fp, lr}
   1d1b8:	mov	fp, sp
   1d1bc:	bl	118e8 <__errno_location@plt>
   1d1c0:	mov	r1, #12
   1d1c4:	str	r1, [r0]
   1d1c8:	mov	r0, #0
   1d1cc:	pop	{fp, pc}
   1d1d0:	mul	r1, r2, r1
   1d1d4:	b	1c000 <__assert_fail@plt+0xa574>
   1d1d8:	push	{r4, r5, r6, r7, fp, lr}
   1d1dc:	add	fp, sp, #16
   1d1e0:	mov	r4, r0
   1d1e4:	cmp	r0, #2
   1d1e8:	movhi	r0, r4
   1d1ec:	pophi	{r4, r5, r6, r7, fp, pc}
   1d1f0:	mov	r0, r4
   1d1f4:	bl	1d4a8 <__assert_fail@plt+0xba1c>
   1d1f8:	mov	r5, r0
   1d1fc:	bl	118e8 <__errno_location@plt>
   1d200:	ldr	r7, [r0]
   1d204:	mov	r6, r0
   1d208:	mov	r0, r4
   1d20c:	bl	11a68 <close@plt>
   1d210:	mov	r0, r5
   1d214:	str	r7, [r6]
   1d218:	pop	{r4, r5, r6, r7, fp, pc}
   1d21c:	push	{fp, lr}
   1d220:	mov	fp, sp
   1d224:	sub	sp, sp, #8
   1d228:	mov	r2, r0
   1d22c:	mov	ip, r1
   1d230:	mov	r0, #0
   1d234:	b	1d23c <__assert_fail@plt+0xb7b0>
   1d238:	add	r0, r0, #1
   1d23c:	mov	r1, r2
   1d240:	ldrb	r3, [r1, r0, lsl #1]!
   1d244:	cmp	r3, #37	; 0x25
   1d248:	bne	1d25c <__assert_fail@plt+0xb7d0>
   1d24c:	ldrb	r1, [r1, #1]
   1d250:	cmp	r1, #115	; 0x73
   1d254:	beq	1d238 <__assert_fail@plt+0xb7ac>
   1d258:	b	1d274 <__assert_fail@plt+0xb7e8>
   1d25c:	cmp	r3, #0
   1d260:	bne	1d274 <__assert_fail@plt+0xb7e8>
   1d264:	mov	r1, ip
   1d268:	bl	1d2b8 <__assert_fail@plt+0xb82c>
   1d26c:	mov	sp, fp
   1d270:	pop	{fp, pc}
   1d274:	add	r0, sp, #4
   1d278:	mov	r1, #1
   1d27c:	mov	r3, ip
   1d280:	bl	1190c <__vasprintf_chk@plt>
   1d284:	cmn	r0, #1
   1d288:	ble	1d298 <__assert_fail@plt+0xb80c>
   1d28c:	ldr	r0, [sp, #4]
   1d290:	mov	sp, fp
   1d294:	pop	{fp, pc}
   1d298:	bl	118e8 <__errno_location@plt>
   1d29c:	ldr	r1, [r0]
   1d2a0:	mov	r0, #0
   1d2a4:	cmp	r1, #12
   1d2a8:	beq	1d2b4 <__assert_fail@plt+0xb828>
   1d2ac:	mov	sp, fp
   1d2b0:	pop	{fp, pc}
   1d2b4:	bl	1bec8 <__assert_fail@plt+0xa43c>
   1d2b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d2bc:	add	fp, sp, #24
   1d2c0:	sub	sp, sp, #8
   1d2c4:	str	r1, [sp, #4]
   1d2c8:	mov	r4, r0
   1d2cc:	ldr	r0, [sp, #4]
   1d2d0:	cmp	r4, #0
   1d2d4:	str	r0, [sp]
   1d2d8:	beq	1d368 <__assert_fail@plt+0xb8dc>
   1d2dc:	ldr	r0, [sp]
   1d2e0:	mov	r5, #0
   1d2e4:	mov	r7, r4
   1d2e8:	add	r6, r0, #4
   1d2ec:	str	r6, [sp]
   1d2f0:	ldr	r0, [r6, #-4]
   1d2f4:	bl	118ac <strlen@plt>
   1d2f8:	adds	r5, r0, r5
   1d2fc:	add	r6, r6, #4
   1d300:	mvncs	r5, #0
   1d304:	subs	r7, r7, #1
   1d308:	bne	1d2ec <__assert_fail@plt+0xb860>
   1d30c:	cmn	r5, #1
   1d310:	ble	1d384 <__assert_fail@plt+0xb8f8>
   1d314:	add	r0, r5, #1
   1d318:	bl	1b968 <__assert_fail@plt+0x9edc>
   1d31c:	mov	r8, r0
   1d320:	mov	r6, r0
   1d324:	cmp	r4, #0
   1d328:	beq	1d378 <__assert_fail@plt+0xb8ec>
   1d32c:	ldr	r0, [sp, #4]
   1d330:	add	r1, r0, #4
   1d334:	str	r1, [sp, #4]
   1d338:	ldr	r7, [r0]
   1d33c:	mov	r0, r7
   1d340:	bl	118ac <strlen@plt>
   1d344:	mov	r5, r0
   1d348:	mov	r0, r6
   1d34c:	mov	r1, r7
   1d350:	mov	r2, r5
   1d354:	bl	11708 <memcpy@plt>
   1d358:	add	r6, r6, r5
   1d35c:	subs	r4, r4, #1
   1d360:	bne	1d32c <__assert_fail@plt+0xb8a0>
   1d364:	b	1d378 <__assert_fail@plt+0xb8ec>
   1d368:	mov	r0, #1
   1d36c:	bl	1b968 <__assert_fail@plt+0x9edc>
   1d370:	mov	r8, r0
   1d374:	mov	r6, r0
   1d378:	mov	r0, #0
   1d37c:	strb	r0, [r6]
   1d380:	b	1d394 <__assert_fail@plt+0xb908>
   1d384:	bl	118e8 <__errno_location@plt>
   1d388:	mov	r1, #75	; 0x4b
   1d38c:	mov	r8, #0
   1d390:	str	r1, [r0]
   1d394:	mov	r0, r8
   1d398:	sub	sp, fp, #24
   1d39c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d3a0:	push	{r4, sl, fp, lr}
   1d3a4:	add	fp, sp, #8
   1d3a8:	sub	sp, sp, #264	; 0x108
   1d3ac:	add	r1, sp, #7
   1d3b0:	movw	r2, #257	; 0x101
   1d3b4:	bl	1d404 <__assert_fail@plt+0xb978>
   1d3b8:	mov	r4, #0
   1d3bc:	cmp	r0, #0
   1d3c0:	bne	1d3f8 <__assert_fail@plt+0xb96c>
   1d3c4:	movw	r1, #63713	; 0xf8e1
   1d3c8:	add	r0, sp, #7
   1d3cc:	movt	r1, #1
   1d3d0:	bl	116b4 <strcmp@plt>
   1d3d4:	cmp	r0, #0
   1d3d8:	beq	1d3f8 <__assert_fail@plt+0xb96c>
   1d3dc:	movw	r1, #63715	; 0xf8e3
   1d3e0:	add	r0, sp, #7
   1d3e4:	movt	r1, #1
   1d3e8:	bl	116b4 <strcmp@plt>
   1d3ec:	mov	r4, r0
   1d3f0:	cmp	r0, #0
   1d3f4:	movwne	r4, #1
   1d3f8:	mov	r0, r4
   1d3fc:	sub	sp, fp, #8
   1d400:	pop	{r4, sl, fp, pc}
   1d404:	push	{r4, r5, r6, r7, fp, lr}
   1d408:	add	fp, sp, #16
   1d40c:	mov	r4, r1
   1d410:	mov	r1, #0
   1d414:	mov	r6, r2
   1d418:	bl	1199c <setlocale@plt>
   1d41c:	cmp	r0, #0
   1d420:	beq	1d450 <__assert_fail@plt+0xb9c4>
   1d424:	mov	r7, r0
   1d428:	bl	118ac <strlen@plt>
   1d42c:	cmp	r0, r6
   1d430:	bcs	1d470 <__assert_fail@plt+0xb9e4>
   1d434:	add	r2, r0, #1
   1d438:	mov	r0, r4
   1d43c:	mov	r1, r7
   1d440:	bl	11708 <memcpy@plt>
   1d444:	mov	r5, #0
   1d448:	mov	r0, r5
   1d44c:	pop	{r4, r5, r6, r7, fp, pc}
   1d450:	cmp	r6, #0
   1d454:	mov	r5, #22
   1d458:	movne	r0, #0
   1d45c:	strbne	r0, [r4]
   1d460:	movne	r0, r5
   1d464:	popne	{r4, r5, r6, r7, fp, pc}
   1d468:	mov	r0, r5
   1d46c:	pop	{r4, r5, r6, r7, fp, pc}
   1d470:	mov	r5, #34	; 0x22
   1d474:	cmp	r6, #0
   1d478:	beq	1d498 <__assert_fail@plt+0xba0c>
   1d47c:	sub	r6, r6, #1
   1d480:	mov	r0, r4
   1d484:	mov	r1, r7
   1d488:	mov	r2, r6
   1d48c:	bl	11708 <memcpy@plt>
   1d490:	mov	r0, #0
   1d494:	strb	r0, [r4, r6]
   1d498:	mov	r0, r5
   1d49c:	pop	{r4, r5, r6, r7, fp, pc}
   1d4a0:	mov	r1, #0
   1d4a4:	b	1199c <setlocale@plt>
   1d4a8:	mov	r1, #0
   1d4ac:	mov	r2, #3
   1d4b0:	b	1d4b4 <__assert_fail@plt+0xba28>
   1d4b4:	sub	sp, sp, #8
   1d4b8:	push	{r4, r5, r6, r7, fp, lr}
   1d4bc:	add	fp, sp, #16
   1d4c0:	sub	sp, sp, #8
   1d4c4:	mov	r5, r0
   1d4c8:	add	r0, fp, #8
   1d4cc:	cmp	r1, #11
   1d4d0:	str	r3, [fp, #12]
   1d4d4:	str	r2, [fp, #8]
   1d4d8:	str	r0, [sp, #4]
   1d4dc:	bhi	1d518 <__assert_fail@plt+0xba8c>
   1d4e0:	mov	r0, #1
   1d4e4:	movw	r2, #1300	; 0x514
   1d4e8:	tst	r2, r0, lsl r1
   1d4ec:	bne	1d5d8 <__assert_fail@plt+0xbb4c>
   1d4f0:	movw	r2, #2570	; 0xa0a
   1d4f4:	tst	r2, r0, lsl r1
   1d4f8:	bne	1d540 <__assert_fail@plt+0xbab4>
   1d4fc:	cmp	r1, #0
   1d500:	bne	1d518 <__assert_fail@plt+0xba8c>
   1d504:	ldr	r0, [sp, #4]
   1d508:	add	r1, r0, #4
   1d50c:	str	r1, [sp, #4]
   1d510:	mov	r1, #0
   1d514:	b	1d5e4 <__assert_fail@plt+0xbb58>
   1d518:	sub	r0, r1, #1024	; 0x400
   1d51c:	cmp	r0, #10
   1d520:	bhi	1d5d8 <__assert_fail@plt+0xbb4c>
   1d524:	mov	r2, #1
   1d528:	movw	r3, #645	; 0x285
   1d52c:	tst	r3, r2, lsl r0
   1d530:	bne	1d5d8 <__assert_fail@plt+0xbb4c>
   1d534:	movw	r3, #1282	; 0x502
   1d538:	tst	r3, r2, lsl r0
   1d53c:	beq	1d54c <__assert_fail@plt+0xbac0>
   1d540:	mov	r0, r5
   1d544:	bl	11984 <fcntl64@plt>
   1d548:	b	1d5f0 <__assert_fail@plt+0xbb64>
   1d54c:	cmp	r0, #6
   1d550:	bne	1d5d8 <__assert_fail@plt+0xbb4c>
   1d554:	ldr	r0, [sp, #4]
   1d558:	movw	r7, #936	; 0x3a8
   1d55c:	movt	r7, #3
   1d560:	add	r1, r0, #4
   1d564:	str	r1, [sp, #4]
   1d568:	ldr	r6, [r0]
   1d56c:	ldr	r0, [r7]
   1d570:	cmp	r0, #0
   1d574:	blt	1d614 <__assert_fail@plt+0xbb88>
   1d578:	mov	r0, r5
   1d57c:	movw	r1, #1030	; 0x406
   1d580:	mov	r2, r6
   1d584:	bl	11984 <fcntl64@plt>
   1d588:	mov	r4, r0
   1d58c:	cmn	r0, #1
   1d590:	bgt	1d608 <__assert_fail@plt+0xbb7c>
   1d594:	bl	118e8 <__errno_location@plt>
   1d598:	ldr	r0, [r0]
   1d59c:	cmp	r0, #22
   1d5a0:	bne	1d608 <__assert_fail@plt+0xbb7c>
   1d5a4:	mov	r0, r5
   1d5a8:	mov	r1, #0
   1d5ac:	mov	r2, r6
   1d5b0:	bl	11984 <fcntl64@plt>
   1d5b4:	mov	r4, r0
   1d5b8:	cmp	r0, #0
   1d5bc:	blt	1d5f4 <__assert_fail@plt+0xbb68>
   1d5c0:	mvn	r0, #0
   1d5c4:	str	r0, [r7]
   1d5c8:	mov	r0, #1
   1d5cc:	cmp	r0, #0
   1d5d0:	bne	1d640 <__assert_fail@plt+0xbbb4>
   1d5d4:	b	1d5f4 <__assert_fail@plt+0xbb68>
   1d5d8:	ldr	r0, [sp, #4]
   1d5dc:	add	r2, r0, #4
   1d5e0:	str	r2, [sp, #4]
   1d5e4:	ldr	r2, [r0]
   1d5e8:	mov	r0, r5
   1d5ec:	bl	11984 <fcntl64@plt>
   1d5f0:	mov	r4, r0
   1d5f4:	mov	r0, r4
   1d5f8:	sub	sp, fp, #16
   1d5fc:	pop	{r4, r5, r6, r7, fp, lr}
   1d600:	add	sp, sp, #8
   1d604:	bx	lr
   1d608:	mov	r0, #1
   1d60c:	str	r0, [r7]
   1d610:	b	1d5f4 <__assert_fail@plt+0xbb68>
   1d614:	mov	r0, r5
   1d618:	mov	r1, #0
   1d61c:	mov	r2, r6
   1d620:	bl	11984 <fcntl64@plt>
   1d624:	mov	r4, r0
   1d628:	ldr	r0, [r7]
   1d62c:	add	r0, r0, #1
   1d630:	clz	r0, r0
   1d634:	lsr	r0, r0, #5
   1d638:	cmp	r0, #0
   1d63c:	beq	1d5f4 <__assert_fail@plt+0xbb68>
   1d640:	cmp	r4, #0
   1d644:	blt	1d5f4 <__assert_fail@plt+0xbb68>
   1d648:	mov	r0, r4
   1d64c:	mov	r1, #1
   1d650:	bl	11984 <fcntl64@plt>
   1d654:	cmp	r0, #0
   1d658:	blt	1d674 <__assert_fail@plt+0xbbe8>
   1d65c:	orr	r2, r0, #1
   1d660:	mov	r0, r4
   1d664:	mov	r1, #2
   1d668:	bl	11984 <fcntl64@plt>
   1d66c:	cmn	r0, #1
   1d670:	bne	1d5f4 <__assert_fail@plt+0xbb68>
   1d674:	bl	118e8 <__errno_location@plt>
   1d678:	ldr	r6, [r0]
   1d67c:	mov	r5, r0
   1d680:	mov	r0, r4
   1d684:	bl	11a68 <close@plt>
   1d688:	str	r6, [r5]
   1d68c:	mvn	r4, #0
   1d690:	b	1d5f4 <__assert_fail@plt+0xbb68>
   1d694:	cmp	r3, #0
   1d698:	cmpeq	r2, #0
   1d69c:	bne	1d6c0 <__assert_fail@plt+0xbc34>
   1d6a0:	cmp	r1, #0
   1d6a4:	movlt	r1, #-2147483648	; 0x80000000
   1d6a8:	movlt	r0, #0
   1d6ac:	blt	1d6bc <__assert_fail@plt+0xbc30>
   1d6b0:	cmpeq	r0, #0
   1d6b4:	mvnne	r1, #-2147483648	; 0x80000000
   1d6b8:	mvnne	r0, #0
   1d6bc:	b	1d768 <__assert_fail@plt+0xbcdc>
   1d6c0:	sub	sp, sp, #8
   1d6c4:	push	{sp, lr}
   1d6c8:	cmp	r1, #0
   1d6cc:	blt	1d6ec <__assert_fail@plt+0xbc60>
   1d6d0:	cmp	r3, #0
   1d6d4:	blt	1d720 <__assert_fail@plt+0xbc94>
   1d6d8:	bl	1d778 <__assert_fail@plt+0xbcec>
   1d6dc:	ldr	lr, [sp, #4]
   1d6e0:	add	sp, sp, #8
   1d6e4:	pop	{r2, r3}
   1d6e8:	bx	lr
   1d6ec:	rsbs	r0, r0, #0
   1d6f0:	sbc	r1, r1, r1, lsl #1
   1d6f4:	cmp	r3, #0
   1d6f8:	blt	1d744 <__assert_fail@plt+0xbcb8>
   1d6fc:	bl	1d778 <__assert_fail@plt+0xbcec>
   1d700:	ldr	lr, [sp, #4]
   1d704:	add	sp, sp, #8
   1d708:	pop	{r2, r3}
   1d70c:	rsbs	r0, r0, #0
   1d710:	sbc	r1, r1, r1, lsl #1
   1d714:	rsbs	r2, r2, #0
   1d718:	sbc	r3, r3, r3, lsl #1
   1d71c:	bx	lr
   1d720:	rsbs	r2, r2, #0
   1d724:	sbc	r3, r3, r3, lsl #1
   1d728:	bl	1d778 <__assert_fail@plt+0xbcec>
   1d72c:	ldr	lr, [sp, #4]
   1d730:	add	sp, sp, #8
   1d734:	pop	{r2, r3}
   1d738:	rsbs	r0, r0, #0
   1d73c:	sbc	r1, r1, r1, lsl #1
   1d740:	bx	lr
   1d744:	rsbs	r2, r2, #0
   1d748:	sbc	r3, r3, r3, lsl #1
   1d74c:	bl	1d778 <__assert_fail@plt+0xbcec>
   1d750:	ldr	lr, [sp, #4]
   1d754:	add	sp, sp, #8
   1d758:	pop	{r2, r3}
   1d75c:	rsbs	r2, r2, #0
   1d760:	sbc	r3, r3, r3, lsl #1
   1d764:	bx	lr
   1d768:	push	{r1, lr}
   1d76c:	mov	r0, #8
   1d770:	bl	11684 <raise@plt>
   1d774:	pop	{r1, pc}
   1d778:	cmp	r1, r3
   1d77c:	cmpeq	r0, r2
   1d780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d784:	mov	r4, r0
   1d788:	movcc	r0, #0
   1d78c:	mov	r5, r1
   1d790:	ldr	lr, [sp, #36]	; 0x24
   1d794:	movcc	r1, r0
   1d798:	bcc	1d894 <__assert_fail@plt+0xbe08>
   1d79c:	cmp	r3, #0
   1d7a0:	clzeq	ip, r2
   1d7a4:	clzne	ip, r3
   1d7a8:	addeq	ip, ip, #32
   1d7ac:	cmp	r5, #0
   1d7b0:	clzeq	r1, r4
   1d7b4:	addeq	r1, r1, #32
   1d7b8:	clzne	r1, r5
   1d7bc:	sub	ip, ip, r1
   1d7c0:	sub	sl, ip, #32
   1d7c4:	lsl	r9, r3, ip
   1d7c8:	rsb	fp, ip, #32
   1d7cc:	orr	r9, r9, r2, lsl sl
   1d7d0:	orr	r9, r9, r2, lsr fp
   1d7d4:	lsl	r8, r2, ip
   1d7d8:	cmp	r5, r9
   1d7dc:	cmpeq	r4, r8
   1d7e0:	movcc	r0, #0
   1d7e4:	movcc	r1, r0
   1d7e8:	bcc	1d804 <__assert_fail@plt+0xbd78>
   1d7ec:	mov	r0, #1
   1d7f0:	subs	r4, r4, r8
   1d7f4:	lsl	r1, r0, sl
   1d7f8:	orr	r1, r1, r0, lsr fp
   1d7fc:	lsl	r0, r0, ip
   1d800:	sbc	r5, r5, r9
   1d804:	cmp	ip, #0
   1d808:	beq	1d894 <__assert_fail@plt+0xbe08>
   1d80c:	lsr	r6, r8, #1
   1d810:	orr	r6, r6, r9, lsl #31
   1d814:	lsr	r7, r9, #1
   1d818:	mov	r2, ip
   1d81c:	b	1d840 <__assert_fail@plt+0xbdb4>
   1d820:	subs	r3, r4, r6
   1d824:	sbc	r8, r5, r7
   1d828:	adds	r3, r3, r3
   1d82c:	adc	r8, r8, r8
   1d830:	adds	r4, r3, #1
   1d834:	adc	r5, r8, #0
   1d838:	subs	r2, r2, #1
   1d83c:	beq	1d85c <__assert_fail@plt+0xbdd0>
   1d840:	cmp	r5, r7
   1d844:	cmpeq	r4, r6
   1d848:	bcs	1d820 <__assert_fail@plt+0xbd94>
   1d84c:	adds	r4, r4, r4
   1d850:	adc	r5, r5, r5
   1d854:	subs	r2, r2, #1
   1d858:	bne	1d840 <__assert_fail@plt+0xbdb4>
   1d85c:	lsr	r3, r4, ip
   1d860:	orr	r3, r3, r5, lsl fp
   1d864:	lsr	r2, r5, ip
   1d868:	orr	r3, r3, r5, lsr sl
   1d86c:	adds	r0, r0, r4
   1d870:	mov	r4, r3
   1d874:	lsl	r3, r2, ip
   1d878:	orr	r3, r3, r4, lsl sl
   1d87c:	lsl	ip, r4, ip
   1d880:	orr	r3, r3, r4, lsr fp
   1d884:	adc	r1, r1, r5
   1d888:	subs	r0, r0, ip
   1d88c:	mov	r5, r2
   1d890:	sbc	r1, r1, r3
   1d894:	cmp	lr, #0
   1d898:	strdne	r4, [lr]
   1d89c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d8a4:	mov	r7, r0
   1d8a8:	ldr	r6, [pc, #72]	; 1d8f8 <__assert_fail@plt+0xbe6c>
   1d8ac:	ldr	r5, [pc, #72]	; 1d8fc <__assert_fail@plt+0xbe70>
   1d8b0:	add	r6, pc, r6
   1d8b4:	add	r5, pc, r5
   1d8b8:	sub	r6, r6, r5
   1d8bc:	mov	r8, r1
   1d8c0:	mov	r9, r2
   1d8c4:	bl	1164c <calloc@plt-0x20>
   1d8c8:	asrs	r6, r6, #2
   1d8cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d8d0:	mov	r4, #0
   1d8d4:	add	r4, r4, #1
   1d8d8:	ldr	r3, [r5], #4
   1d8dc:	mov	r2, r9
   1d8e0:	mov	r1, r8
   1d8e4:	mov	r0, r7
   1d8e8:	blx	r3
   1d8ec:	cmp	r6, r4
   1d8f0:	bne	1d8d4 <__assert_fail@plt+0xbe48>
   1d8f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d8f8:	andeq	r2, r1, ip, asr #12
   1d8fc:	andeq	r2, r1, r4, asr #12
   1d900:	bx	lr
   1d904:	ldr	r3, [pc, #12]	; 1d918 <__assert_fail@plt+0xbe8c>
   1d908:	mov	r1, #0
   1d90c:	add	r3, pc, r3
   1d910:	ldr	r2, [r3]
   1d914:	b	11900 <__cxa_atexit@plt>
   1d918:	andeq	r2, r1, r8, ror #16

Disassembly of section .fini:

0001d91c <.fini>:
   1d91c:	push	{r3, lr}
   1d920:	pop	{r3, pc}
