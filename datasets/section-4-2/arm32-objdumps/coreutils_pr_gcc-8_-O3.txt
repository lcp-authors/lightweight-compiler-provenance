
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011064 <.init>:
   11064:	push	{r3, lr}
   11068:	bl	121c8 <__assert_fail@plt+0xde4>
   1106c:	pop	{r3, pc}

Disassembly of section .plt:

00011070 <fdopen@plt-0x14>:
   11070:	push	{lr}		; (str lr, [sp, #-4]!)
   11074:	ldr	lr, [pc, #4]	; 11080 <fdopen@plt-0x4>
   11078:	add	lr, pc, lr
   1107c:	ldr	pc, [lr, #8]!
   11080:	andeq	r0, r2, r0, lsl #31

00011084 <fdopen@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #32, 20	; 0x20000
   1108c:	ldr	pc, [ip, #3968]!	; 0xf80

00011090 <calloc@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #32, 20	; 0x20000
   11098:	ldr	pc, [ip, #3960]!	; 0xf78

0001109c <fputs_unlocked@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #32, 20	; 0x20000
   110a4:	ldr	pc, [ip, #3952]!	; 0xf70

000110a8 <raise@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #32, 20	; 0x20000
   110b0:	ldr	pc, [ip, #3944]!	; 0xf68

000110b4 <gmtime_r@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #32, 20	; 0x20000
   110bc:	ldr	pc, [ip, #3936]!	; 0xf60

000110c0 <strcmp@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #32, 20	; 0x20000
   110c8:	ldr	pc, [ip, #3928]!	; 0xf58

000110cc <strtol@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #32, 20	; 0x20000
   110d4:	ldr	pc, [ip, #3920]!	; 0xf50

000110d8 <posix_fadvise64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #32, 20	; 0x20000
   110e0:	ldr	pc, [ip, #3912]!	; 0xf48

000110e4 <mktime@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #32, 20	; 0x20000
   110ec:	ldr	pc, [ip, #3904]!	; 0xf40

000110f0 <fflush@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #32, 20	; 0x20000
   110f8:	ldr	pc, [ip, #3896]!	; 0xf38

000110fc <wcwidth@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #32, 20	; 0x20000
   11104:	ldr	pc, [ip, #3888]!	; 0xf30

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #32, 20	; 0x20000
   11110:	ldr	pc, [ip, #3880]!	; 0xf28

00011114 <clock_gettime@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #32, 20	; 0x20000
   1111c:	ldr	pc, [ip, #3872]!	; 0xf20

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #32, 20	; 0x20000
   11128:	ldr	pc, [ip, #3864]!	; 0xf18

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #32, 20	; 0x20000
   11134:	ldr	pc, [ip, #3856]!	; 0xf10

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #32, 20	; 0x20000
   11140:	ldr	pc, [ip, #3848]!	; 0xf08

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #32, 20	; 0x20000
   1114c:	ldr	pc, [ip, #3840]!	; 0xf00

00011150 <memcmp@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #32, 20	; 0x20000
   11158:	ldr	pc, [ip, #3832]!	; 0xef8

0001115c <fputc_unlocked@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #32, 20	; 0x20000
   11164:	ldr	pc, [ip, #3824]!	; 0xef0

00011168 <dcgettext@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #32, 20	; 0x20000
   11170:	ldr	pc, [ip, #3816]!	; 0xee8

00011174 <realloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #32, 20	; 0x20000
   1117c:	ldr	pc, [ip, #3808]!	; 0xee0

00011180 <localtime_r@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #32, 20	; 0x20000
   11188:	ldr	pc, [ip, #3800]!	; 0xed8

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #32, 20	; 0x20000
   11194:	ldr	pc, [ip, #3792]!	; 0xed0

00011198 <iswcntrl@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #32, 20	; 0x20000
   111a0:	ldr	pc, [ip, #3784]!	; 0xec8

000111a4 <iswprint@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #32, 20	; 0x20000
   111ac:	ldr	pc, [ip, #3776]!	; 0xec0

000111b0 <tzset@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #32, 20	; 0x20000
   111b8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #32, 20	; 0x20000
   111c4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #32, 20	; 0x20000
   111d0:	ldr	pc, [ip, #3752]!	; 0xea8

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #32, 20	; 0x20000
   111dc:	ldr	pc, [ip, #3744]!	; 0xea0

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #32, 20	; 0x20000
   111e8:	ldr	pc, [ip, #3736]!	; 0xe98

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #32, 20	; 0x20000
   111f4:	ldr	pc, [ip, #3728]!	; 0xe90

000111f8 <mbrtowc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #32, 20	; 0x20000
   11200:	ldr	pc, [ip, #3720]!	; 0xe88

00011204 <error@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #32, 20	; 0x20000
   1120c:	ldr	pc, [ip, #3712]!	; 0xe80

00011210 <getenv@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #32, 20	; 0x20000
   11218:	ldr	pc, [ip, #3704]!	; 0xe78

0001121c <malloc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #32, 20	; 0x20000
   11224:	ldr	pc, [ip, #3696]!	; 0xe70

00011228 <__libc_start_main@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #32, 20	; 0x20000
   11230:	ldr	pc, [ip, #3688]!	; 0xe68

00011234 <strftime@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #32, 20	; 0x20000
   1123c:	ldr	pc, [ip, #3680]!	; 0xe60

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #32, 20	; 0x20000
   11248:	ldr	pc, [ip, #3672]!	; 0xe58

0001124c <__ctype_tolower_loc@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #32, 20	; 0x20000
   11254:	ldr	pc, [ip, #3664]!	; 0xe50

00011258 <__ctype_toupper_loc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #32, 20	; 0x20000
   11260:	ldr	pc, [ip, #3656]!	; 0xe48

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #32, 20	; 0x20000
   1126c:	ldr	pc, [ip, #3648]!	; 0xe40

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #32, 20	; 0x20000
   11278:	ldr	pc, [ip, #3640]!	; 0xe38

0001127c <__ctype_b_loc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #32, 20	; 0x20000
   11284:	ldr	pc, [ip, #3632]!	; 0xe30

00011288 <exit@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #32, 20	; 0x20000
   11290:	ldr	pc, [ip, #3624]!	; 0xe28

00011294 <strlen@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #32, 20	; 0x20000
   1129c:	ldr	pc, [ip, #3616]!	; 0xe20

000112a0 <strchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #32, 20	; 0x20000
   112a8:	ldr	pc, [ip, #3608]!	; 0xe18

000112ac <setenv@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #32, 20	; 0x20000
   112b4:	ldr	pc, [ip, #3600]!	; 0xe10

000112b8 <ungetc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #32, 20	; 0x20000
   112c0:	ldr	pc, [ip, #3592]!	; 0xe08

000112c4 <__errno_location@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #32, 20	; 0x20000
   112cc:	ldr	pc, [ip, #3584]!	; 0xe00

000112d0 <__sprintf_chk@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #32, 20	; 0x20000
   112d8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112dc <__cxa_atexit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #32, 20	; 0x20000
   112e4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #32, 20	; 0x20000
   112f0:	ldr	pc, [ip, #3560]!	; 0xde8

000112f4 <__printf_chk@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #32, 20	; 0x20000
   112fc:	ldr	pc, [ip, #3552]!	; 0xde0

00011300 <fileno@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #32, 20	; 0x20000
   11308:	ldr	pc, [ip, #3544]!	; 0xdd8

0001130c <__fprintf_chk@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #32, 20	; 0x20000
   11314:	ldr	pc, [ip, #3536]!	; 0xdd0

00011318 <fclose@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #32, 20	; 0x20000
   11320:	ldr	pc, [ip, #3528]!	; 0xdc8

00011324 <fseeko64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #32, 20	; 0x20000
   1132c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011330 <fcntl64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #32, 20	; 0x20000
   11338:	ldr	pc, [ip, #3512]!	; 0xdb8

0001133c <__uflow@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #32, 20	; 0x20000
   11344:	ldr	pc, [ip, #3504]!	; 0xdb0

00011348 <__overflow@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #32, 20	; 0x20000
   11350:	ldr	pc, [ip, #3496]!	; 0xda8

00011354 <setlocale@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #32, 20	; 0x20000
   1135c:	ldr	pc, [ip, #3488]!	; 0xda0

00011360 <strrchr@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #32, 20	; 0x20000
   11368:	ldr	pc, [ip, #3480]!	; 0xd98

0001136c <nl_langinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #32, 20	; 0x20000
   11374:	ldr	pc, [ip, #3472]!	; 0xd90

00011378 <timegm@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #32, 20	; 0x20000
   11380:	ldr	pc, [ip, #3464]!	; 0xd88

00011384 <clearerr_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #32, 20	; 0x20000
   1138c:	ldr	pc, [ip, #3456]!	; 0xd80

00011390 <__strtoll_internal@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #32, 20	; 0x20000
   11398:	ldr	pc, [ip, #3448]!	; 0xd78

0001139c <fopen64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #32, 20	; 0x20000
   113a4:	ldr	pc, [ip, #3440]!	; 0xd70

000113a8 <bindtextdomain@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #32, 20	; 0x20000
   113b0:	ldr	pc, [ip, #3432]!	; 0xd68

000113b4 <unsetenv@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #32, 20	; 0x20000
   113bc:	ldr	pc, [ip, #3424]!	; 0xd60

000113c0 <strncmp@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #32, 20	; 0x20000
   113c8:	ldr	pc, [ip, #3416]!	; 0xd58

000113cc <abort@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #32, 20	; 0x20000
   113d4:	ldr	pc, [ip, #3408]!	; 0xd50

000113d8 <close@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #32, 20	; 0x20000
   113e0:	ldr	pc, [ip, #3400]!	; 0xd48

000113e4 <__assert_fail@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #32, 20	; 0x20000
   113ec:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113f0 <.text>:
   113f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   113f4:	mov	r5, #0
   113f8:	mov	r4, r0
   113fc:	ldr	r0, [r1]
   11400:	strd	r6, [sp, #8]
   11404:	mov	r6, r1
   11408:	strd	r8, [sp, #16]
   1140c:	strd	sl, [sp, #24]
   11410:	str	lr, [sp, #32]
   11414:	sub	sp, sp, #68	; 0x44
   11418:	str	r5, [sp, #56]	; 0x38
   1141c:	bl	180dc <__assert_fail@plt+0x6cf8>
   11420:	movw	r1, #356	; 0x164
   11424:	movt	r1, #2
   11428:	mov	r0, #6
   1142c:	bl	11354 <setlocale@plt>
   11430:	movw	r1, #4852	; 0x12f4
   11434:	movt	r1, #2
   11438:	movw	r0, #4588	; 0x11ec
   1143c:	movt	r0, #2
   11440:	bl	113a8 <bindtextdomain@plt>
   11444:	movw	r0, #4588	; 0x11ec
   11448:	movt	r0, #2
   1144c:	bl	1118c <textdomain@plt>
   11450:	movw	r0, #22488	; 0x57d8
   11454:	movt	r0, #1
   11458:	bl	1fea4 <__assert_fail@plt+0xeac0>
   1145c:	cmp	r4, #1
   11460:	strle	r5, [sp, #44]	; 0x2c
   11464:	ble	11478 <__assert_fail@plt+0x94>
   11468:	mov	r1, #4
   1146c:	sub	r0, r4, #1
   11470:	bl	1cb84 <__assert_fail@plt+0xb7a0>
   11474:	str	r0, [sp, #44]	; 0x2c
   11478:	mov	sl, #0
   1147c:	movw	r5, #65224	; 0xfec8
   11480:	movt	r5, #1
   11484:	movw	r9, #8688	; 0x21f0
   11488:	movt	r9, #3
   1148c:	movw	r3, #8680	; 0x21e8
   11490:	movt	r3, #3
   11494:	mov	r8, sl
   11498:	add	r7, sp, #60	; 0x3c
   1149c:	str	r3, [sp, #24]
   114a0:	str	sl, [sp, #32]
   114a4:	str	sl, [sp, #36]	; 0x24
   114a8:	str	sl, [sp, #40]	; 0x28
   114ac:	str	sl, [sp, #48]	; 0x30
   114b0:	mvn	ip, #0
   114b4:	mov	r3, r5
   114b8:	ldr	r2, [pc, #3260]	; 1217c <__assert_fail@plt+0xd98>
   114bc:	mov	r1, r6
   114c0:	mov	r0, r4
   114c4:	str	r7, [sp]
   114c8:	str	ip, [sp, #60]	; 0x3c
   114cc:	bl	11270 <getopt_long@plt>
   114d0:	cmn	r0, #1
   114d4:	mov	fp, r0
   114d8:	beq	11e58 <__assert_fail@plt+0xa74>
   114dc:	sub	r3, r0, #48	; 0x30
   114e0:	cmp	r3, #9
   114e4:	bls	1190c <__assert_fail@plt+0x528>
   114e8:	add	fp, r0, #3
   114ec:	cmp	fp, #260	; 0x104
   114f0:	ldrls	pc, [pc, fp, lsl #2]
   114f4:	b	11e50 <__assert_fail@plt+0xa6c>
   114f8:	andeq	r1, r1, r4, lsl #25
   114fc:	andeq	r1, r1, ip, ror ip
   11500:	andeq	r1, r1, r0, asr lr
   11504:	andeq	r1, r1, r0, asr lr
   11508:	andeq	r1, r1, r0, asr ip
   1150c:	andeq	r1, r1, r0, asr lr
   11510:	andeq	r1, r1, r0, asr lr
   11514:	andeq	r1, r1, r0, asr lr
   11518:	andeq	r1, r1, r0, asr lr
   1151c:	andeq	r1, r1, r0, asr lr
   11520:	andeq	r1, r1, r0, asr lr
   11524:	andeq	r1, r1, r0, asr lr
   11528:	andeq	r1, r1, r0, asr lr
   1152c:	andeq	r1, r1, r0, asr lr
   11530:	andeq	r1, r1, r0, asr lr
   11534:	andeq	r1, r1, r0, asr lr
   11538:	andeq	r1, r1, r0, asr lr
   1153c:	andeq	r1, r1, r0, asr lr
   11540:	andeq	r1, r1, r0, asr lr
   11544:	andeq	r1, r1, r0, asr lr
   11548:	andeq	r1, r1, r0, asr lr
   1154c:	andeq	r1, r1, r0, asr lr
   11550:	andeq	r1, r1, r0, asr lr
   11554:	andeq	r1, r1, r0, asr lr
   11558:	andeq	r1, r1, r0, asr lr
   1155c:	andeq	r1, r1, r0, asr lr
   11560:	andeq	r1, r1, r0, asr lr
   11564:	andeq	r1, r1, r0, asr lr
   11568:	andeq	r1, r1, r0, asr lr
   1156c:	andeq	r1, r1, r0, asr lr
   11570:	andeq	r1, r1, r0, asr lr
   11574:	andeq	r1, r1, r0, asr lr
   11578:	andeq	r1, r1, r0, asr lr
   1157c:	andeq	r1, r1, r0, asr lr
   11580:	andeq	r1, r1, r0, asr lr
   11584:	andeq	r1, r1, r0, asr lr
   11588:	andeq	r1, r1, r0, asr lr
   1158c:	andeq	r1, r1, r0, asr lr
   11590:	andeq	r1, r1, r0, asr lr
   11594:	andeq	r1, r1, r0, asr lr
   11598:	andeq	r1, r1, r0, asr lr
   1159c:	andeq	r1, r1, r0, asr lr
   115a0:	andeq	r1, r1, r0, asr lr
   115a4:	andeq	r1, r1, r0, asr lr
   115a8:	andeq	r1, r1, r0, asr lr
   115ac:	andeq	r1, r1, r0, asr lr
   115b0:	andeq	r1, r1, r0, asr lr
   115b4:	andeq	r1, r1, r0, asr lr
   115b8:	andeq	r1, r1, r0, asr lr
   115bc:	andeq	r1, r1, r0, asr lr
   115c0:	andeq	r1, r1, r0, asr lr
   115c4:	andeq	r1, r1, r0, asr lr
   115c8:	andeq	r1, r1, r0, asr lr
   115cc:	andeq	r1, r1, r0, asr lr
   115d0:	andeq	r1, r1, r0, asr lr
   115d4:	andeq	r1, r1, r0, asr lr
   115d8:	andeq	r1, r1, r0, asr lr
   115dc:	andeq	r1, r1, r0, asr lr
   115e0:	andeq	r1, r1, r0, asr lr
   115e4:	andeq	r1, r1, r0, asr lr
   115e8:	andeq	r1, r1, r0, asr lr
   115ec:	andeq	r1, r1, r0, asr lr
   115f0:	andeq	r1, r1, r0, asr lr
   115f4:	andeq	r1, r1, r0, asr lr
   115f8:	andeq	r1, r1, r0, asr lr
   115fc:	andeq	r1, r1, r0, asr lr
   11600:	andeq	r1, r1, r0, asr lr
   11604:	andeq	r1, r1, r0, asr lr
   11608:	andeq	r1, r1, r0, asr lr
   1160c:	andeq	r1, r1, r0, asr lr
   11610:	andeq	r1, r1, r0, asr lr
   11614:	andeq	r1, r1, r0, asr #24
   11618:	andeq	r1, r1, r0, asr lr
   1161c:	andeq	r1, r1, r4, lsr ip
   11620:	andeq	r1, r1, r0, asr lr
   11624:	andeq	r1, r1, r0, asr lr
   11628:	andeq	r1, r1, r0, asr lr
   1162c:	andeq	r1, r1, r8, lsr #24
   11630:	andeq	r1, r1, r0, asr lr
   11634:	andeq	r1, r1, r0, asr lr
   11638:	andeq	r1, r1, r0, asr lr
   1163c:	andeq	r1, r1, r8, lsr #27
   11640:	andeq	r1, r1, r0, asr lr
   11644:	andeq	r1, r1, r0, asr lr
   11648:	andeq	r1, r1, r0, asr lr
   1164c:	andeq	r1, r1, r0, asr lr
   11650:	andeq	r1, r1, r8, asr sp
   11654:	andeq	r1, r1, r0, asr #26
   11658:	andeq	r1, r1, r0, asr lr
   1165c:	andeq	r1, r1, r0, asr lr
   11660:	ldrdeq	r1, [r1], -r4
   11664:	andeq	r1, r1, r0, asr lr
   11668:	andeq	r1, r1, r0, asr lr
   1166c:	andeq	r1, r1, r0, asr lr
   11670:	andeq	r1, r1, r0, asr lr
   11674:	andeq	r1, r1, r0, asr lr
   11678:	andeq	r1, r1, r0, asr lr
   1167c:	andeq	r1, r1, r0, asr lr
   11680:	andeq	r1, r1, r0, asr lr
   11684:	andeq	r1, r1, r0, asr lr
   11688:	andeq	r1, r1, r8, lsr #28
   1168c:	andeq	r1, r1, ip, lsl lr
   11690:	andeq	r1, r1, r4, asr #28
   11694:	andeq	r1, r1, ip, lsl ip
   11698:	strdeq	r1, [r1], -r0
   1169c:	andeq	r1, r1, r4, lsr ip
   116a0:	andeq	r1, r1, r0, asr lr
   116a4:	andeq	r1, r1, r0, ror #23
   116a8:			; <UNDEFINED> instruction: 0x00011bb4
   116ac:	andeq	r1, r1, r0, asr lr
   116b0:	andeq	r1, r1, r0, asr lr
   116b4:	andeq	r1, r1, r0, asr fp
   116b8:	andeq	r1, r1, r4, lsr fp
   116bc:	andeq	r1, r1, r8, lsl #22
   116c0:	andeq	r1, r1, ip, lsr #21
   116c4:	andeq	r1, r1, r0, asr lr
   116c8:	andeq	r1, r1, r0, asr lr
   116cc:	andeq	r1, r1, r0, lsr #21
   116d0:	andeq	r1, r1, ip, asr #20
   116d4:	andeq	r1, r1, r0, lsr sl
   116d8:	andeq	r1, r1, r0, asr lr
   116dc:	andeq	r1, r1, r4, lsr #20
   116e0:	muleq	r1, ip, r9
   116e4:	andeq	r1, r1, r0, asr lr
   116e8:	andeq	r1, r1, r0, asr lr
   116ec:	andeq	r1, r1, r0, asr lr
   116f0:	andeq	r1, r1, r0, asr lr
   116f4:	andeq	r1, r1, r0, asr lr
   116f8:	andeq	r1, r1, r0, asr lr
   116fc:	andeq	r1, r1, r0, asr lr
   11700:	andeq	r1, r1, r0, asr lr
   11704:	andeq	r1, r1, r0, asr lr
   11708:	andeq	r1, r1, r0, asr lr
   1170c:	andeq	r1, r1, r0, asr lr
   11710:	andeq	r1, r1, r0, asr lr
   11714:	andeq	r1, r1, r0, asr lr
   11718:	andeq	r1, r1, r0, asr lr
   1171c:	andeq	r1, r1, r0, asr lr
   11720:	andeq	r1, r1, r0, asr lr
   11724:	andeq	r1, r1, r0, asr lr
   11728:	andeq	r1, r1, r0, asr lr
   1172c:	andeq	r1, r1, r0, asr lr
   11730:	andeq	r1, r1, r0, asr lr
   11734:	andeq	r1, r1, r0, asr lr
   11738:	andeq	r1, r1, r0, asr lr
   1173c:	andeq	r1, r1, r0, asr lr
   11740:	andeq	r1, r1, r0, asr lr
   11744:	andeq	r1, r1, r0, asr lr
   11748:	andeq	r1, r1, r0, asr lr
   1174c:	andeq	r1, r1, r0, asr lr
   11750:	andeq	r1, r1, r0, asr lr
   11754:	andeq	r1, r1, r0, asr lr
   11758:	andeq	r1, r1, r0, asr lr
   1175c:	andeq	r1, r1, r0, asr lr
   11760:	andeq	r1, r1, r0, asr lr
   11764:	andeq	r1, r1, r0, asr lr
   11768:	andeq	r1, r1, r0, asr lr
   1176c:	andeq	r1, r1, r0, asr lr
   11770:	andeq	r1, r1, r0, asr lr
   11774:	andeq	r1, r1, r0, asr lr
   11778:	andeq	r1, r1, r0, asr lr
   1177c:	andeq	r1, r1, r0, asr lr
   11780:	andeq	r1, r1, r0, asr lr
   11784:	andeq	r1, r1, r0, asr lr
   11788:	andeq	r1, r1, r0, asr lr
   1178c:	andeq	r1, r1, r0, asr lr
   11790:	andeq	r1, r1, r0, asr lr
   11794:	andeq	r1, r1, r0, asr lr
   11798:	andeq	r1, r1, r0, asr lr
   1179c:	andeq	r1, r1, r0, asr lr
   117a0:	andeq	r1, r1, r0, asr lr
   117a4:	andeq	r1, r1, r0, asr lr
   117a8:	andeq	r1, r1, r0, asr lr
   117ac:	andeq	r1, r1, r0, asr lr
   117b0:	andeq	r1, r1, r0, asr lr
   117b4:	andeq	r1, r1, r0, asr lr
   117b8:	andeq	r1, r1, r0, asr lr
   117bc:	andeq	r1, r1, r0, asr lr
   117c0:	andeq	r1, r1, r0, asr lr
   117c4:	andeq	r1, r1, r0, asr lr
   117c8:	andeq	r1, r1, r0, asr lr
   117cc:	andeq	r1, r1, r0, asr lr
   117d0:	andeq	r1, r1, r0, asr lr
   117d4:	andeq	r1, r1, r0, asr lr
   117d8:	andeq	r1, r1, r0, asr lr
   117dc:	andeq	r1, r1, r0, asr lr
   117e0:	andeq	r1, r1, r0, asr lr
   117e4:	andeq	r1, r1, r0, asr lr
   117e8:	andeq	r1, r1, r0, asr lr
   117ec:	andeq	r1, r1, r0, asr lr
   117f0:	andeq	r1, r1, r0, asr lr
   117f4:	andeq	r1, r1, r0, asr lr
   117f8:	andeq	r1, r1, r0, asr lr
   117fc:	andeq	r1, r1, r0, asr lr
   11800:	andeq	r1, r1, r0, asr lr
   11804:	andeq	r1, r1, r0, asr lr
   11808:	andeq	r1, r1, r0, asr lr
   1180c:	andeq	r1, r1, r0, asr lr
   11810:	andeq	r1, r1, r0, asr lr
   11814:	andeq	r1, r1, r0, asr lr
   11818:	andeq	r1, r1, r0, asr lr
   1181c:	andeq	r1, r1, r0, asr lr
   11820:	andeq	r1, r1, r0, asr lr
   11824:	andeq	r1, r1, r0, asr lr
   11828:	andeq	r1, r1, r0, asr lr
   1182c:	andeq	r1, r1, r0, asr lr
   11830:	andeq	r1, r1, r0, asr lr
   11834:	andeq	r1, r1, r0, asr lr
   11838:	andeq	r1, r1, r0, asr lr
   1183c:	andeq	r1, r1, r0, asr lr
   11840:	andeq	r1, r1, r0, asr lr
   11844:	andeq	r1, r1, r0, asr lr
   11848:	andeq	r1, r1, r0, asr lr
   1184c:	andeq	r1, r1, r0, asr lr
   11850:	andeq	r1, r1, r0, asr lr
   11854:	andeq	r1, r1, r0, asr lr
   11858:	andeq	r1, r1, r0, asr lr
   1185c:	andeq	r1, r1, r0, asr lr
   11860:	andeq	r1, r1, r0, asr lr
   11864:	andeq	r1, r1, r0, asr lr
   11868:	andeq	r1, r1, r0, asr lr
   1186c:	andeq	r1, r1, r0, asr lr
   11870:	andeq	r1, r1, r0, asr lr
   11874:	andeq	r1, r1, r0, asr lr
   11878:	andeq	r1, r1, r0, asr lr
   1187c:	andeq	r1, r1, r0, asr lr
   11880:	andeq	r1, r1, r0, asr lr
   11884:	andeq	r1, r1, r0, asr lr
   11888:	andeq	r1, r1, r0, asr lr
   1188c:	andeq	r1, r1, r0, asr lr
   11890:	andeq	r1, r1, r0, asr lr
   11894:	andeq	r1, r1, r0, asr lr
   11898:	andeq	r1, r1, r0, asr lr
   1189c:	andeq	r1, r1, r0, asr lr
   118a0:	andeq	r1, r1, r0, asr lr
   118a4:	andeq	r1, r1, r0, asr lr
   118a8:	andeq	r1, r1, r0, asr lr
   118ac:	andeq	r1, r1, r0, asr lr
   118b0:	andeq	r1, r1, r0, asr lr
   118b4:	andeq	r1, r1, r0, asr lr
   118b8:	andeq	r1, r1, r0, asr lr
   118bc:	andeq	r1, r1, r0, asr lr
   118c0:	andeq	r1, r1, r0, asr lr
   118c4:	andeq	r1, r1, r0, asr lr
   118c8:	andeq	r1, r1, r0, asr lr
   118cc:	andeq	r1, r1, r0, asr lr
   118d0:	andeq	r1, r1, r0, asr lr
   118d4:	andeq	r1, r1, r0, asr lr
   118d8:	andeq	r1, r1, r0, asr lr
   118dc:	andeq	r1, r1, r0, asr lr
   118e0:	andeq	r1, r1, r0, asr lr
   118e4:	andeq	r1, r1, r0, asr lr
   118e8:	andeq	r1, r1, r0, asr lr
   118ec:	andeq	r1, r1, r0, asr lr
   118f0:	andeq	r1, r1, r0, asr lr
   118f4:	andeq	r1, r1, r0, asr lr
   118f8:	andeq	r1, r1, r0, asr lr
   118fc:	andeq	r1, r1, r0, asr lr
   11900:	andeq	r1, r1, r0, asr lr
   11904:	andeq	r1, r1, r8, ror r9
   11908:	andeq	r1, r1, ip, asr #18
   1190c:	ldr	r2, [sp, #56]	; 0x38
   11910:	add	r3, sl, #1
   11914:	cmp	r3, r2
   11918:	bcs	11930 <__assert_fail@plt+0x54c>
   1191c:	mov	r2, #0
   11920:	strb	fp, [r8, sl]
   11924:	mov	sl, r3
   11928:	strb	r2, [r8, r3]
   1192c:	b	114b0 <__assert_fail@plt+0xcc>
   11930:	mov	r0, r8
   11934:	add	r1, sp, #56	; 0x38
   11938:	str	r3, [sp, #28]
   1193c:	bl	1cbf4 <__assert_fail@plt+0xb810>
   11940:	mov	r8, r0
   11944:	ldr	r3, [sp, #28]
   11948:	b	1191c <__assert_fail@plt+0x538>
   1194c:	ldr	r3, [sp, #24]
   11950:	ldr	r2, [r3]
   11954:	cmp	r2, #0
   11958:	beq	12144 <__assert_fail@plt+0xd60>
   1195c:	mov	r1, #0
   11960:	ldr	r0, [sp, #60]	; 0x3c
   11964:	bl	122d4 <__assert_fail@plt+0xef0>
   11968:	subs	sl, r0, #0
   1196c:	beq	12110 <__assert_fail@plt+0xd2c>
   11970:	mov	sl, #0
   11974:	b	114b0 <__assert_fail@plt+0xcc>
   11978:	ldr	r3, [sp, #24]
   1197c:	ldr	r0, [r3]
   11980:	bl	123f8 <__assert_fail@plt+0x1014>
   11984:	mov	r0, r8
   11988:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1198c:	mov	r3, #0
   11990:	mov	r8, r3
   11994:	str	r3, [sp, #56]	; 0x38
   11998:	b	11970 <__assert_fail@plt+0x58c>
   1199c:	ldr	r3, [sp, #24]
   119a0:	mov	r2, #5
   119a4:	movw	r1, #5072	; 0x13d0
   119a8:	movt	r1, #2
   119ac:	mov	r0, #0
   119b0:	mvn	sl, #-2147483648	; 0x80000000
   119b4:	mov	fp, #0
   119b8:	ldr	r3, [r3]
   119bc:	str	r3, [sp, #28]
   119c0:	bl	11168 <dcgettext@plt>
   119c4:	ldr	r3, [sp, #28]
   119c8:	mov	r1, #0
   119cc:	movw	r2, #356	; 0x164
   119d0:	movt	r2, #2
   119d4:	strd	sl, [sp]
   119d8:	str	r2, [sp, #8]
   119dc:	mov	r2, #1
   119e0:	strd	r0, [sp, #12]
   119e4:	mov	r0, r3
   119e8:	mov	r3, #0
   119ec:	bl	1d184 <__assert_fail@plt+0xbda0>
   119f0:	ldrb	r3, [r9, #112]	; 0x70
   119f4:	cmp	r3, #0
   119f8:	str	r3, [sp, #36]	; 0x24
   119fc:	ldrne	r3, [sp, #36]	; 0x24
   11a00:	strne	r3, [sp, #40]	; 0x28
   11a04:	bne	11970 <__assert_fail@plt+0x58c>
   11a08:	mov	r2, #1
   11a0c:	movw	r3, #8512	; 0x2140
   11a10:	movt	r3, #3
   11a14:	str	r2, [sp, #36]	; 0x24
   11a18:	str	r0, [r3, #12]
   11a1c:	str	r2, [sp, #40]	; 0x28
   11a20:	b	11970 <__assert_fail@plt+0x58c>
   11a24:	mov	r3, #1
   11a28:	strb	r3, [r9, #97]	; 0x61
   11a2c:	b	11970 <__assert_fail@plt+0x58c>
   11a30:	movw	r3, #8512	; 0x2140
   11a34:	movt	r3, #3
   11a38:	mov	r1, #0
   11a3c:	mov	r2, #1
   11a40:	strb	r1, [r3, #48]	; 0x30
   11a44:	strb	r2, [r9, #120]	; 0x78
   11a48:	b	11970 <__assert_fail@plt+0x58c>
   11a4c:	ldrb	r3, [r9, #152]	; 0x98
   11a50:	cmp	r3, #0
   11a54:	str	r3, [sp, #36]	; 0x24
   11a58:	ldrne	r3, [sp, #36]	; 0x24
   11a5c:	strne	r3, [sp, #48]	; 0x30
   11a60:	bne	11970 <__assert_fail@plt+0x58c>
   11a64:	ldr	r3, [sp, #24]
   11a68:	ldr	sl, [r3]
   11a6c:	cmp	sl, #0
   11a70:	beq	120d0 <__assert_fail@plt+0xcec>
   11a74:	mov	r3, #1
   11a78:	mov	r0, sl
   11a7c:	mov	fp, r3
   11a80:	str	r3, [sp, #48]	; 0x30
   11a84:	bl	11294 <strlen@plt>
   11a88:	movw	r3, #8512	; 0x2140
   11a8c:	movt	r3, #3
   11a90:	str	fp, [sp, #36]	; 0x24
   11a94:	str	r0, [r9, #84]	; 0x54
   11a98:	str	sl, [r3, #24]
   11a9c:	b	11970 <__assert_fail@plt+0x58c>
   11aa0:	mov	r3, #1
   11aa4:	strb	r3, [r9, #115]	; 0x73
   11aa8:	b	11970 <__assert_fail@plt+0x58c>
   11aac:	ldr	r3, [sp, #24]
   11ab0:	mov	r2, #5
   11ab4:	movw	r1, #5040	; 0x13b0
   11ab8:	movt	r1, #2
   11abc:	mov	r0, #0
   11ac0:	mvn	sl, #-2147483648	; 0x80000000
   11ac4:	mov	fp, #0
   11ac8:	ldr	r3, [r3]
   11acc:	str	r3, [sp, #28]
   11ad0:	bl	11168 <dcgettext@plt>
   11ad4:	ldr	r3, [sp, #28]
   11ad8:	mov	r1, #0
   11adc:	movw	r2, #356	; 0x164
   11ae0:	movt	r2, #2
   11ae4:	strd	sl, [sp]
   11ae8:	str	r2, [sp, #8]
   11aec:	mov	r2, #0
   11af0:	strd	r0, [sp, #12]
   11af4:	mov	r0, r3
   11af8:	mov	r3, #0
   11afc:	bl	1d184 <__assert_fail@plt+0xbda0>
   11b00:	str	r0, [r9, #124]	; 0x7c
   11b04:	b	11970 <__assert_fail@plt+0x58c>
   11b08:	ldr	r3, [sp, #24]
   11b0c:	ldr	r0, [r3]
   11b10:	mov	r3, #1
   11b14:	strb	r3, [r9, #179]	; 0xb3
   11b18:	cmp	r0, #0
   11b1c:	beq	11970 <__assert_fail@plt+0x58c>
   11b20:	ldr	r3, [pc, #1624]	; 12180 <__assert_fail@plt+0xd9c>
   11b24:	mov	r1, #110	; 0x6e
   11b28:	add	r2, r3, #4
   11b2c:	bl	156e0 <__assert_fail@plt+0x42fc>
   11b30:	b	11970 <__assert_fail@plt+0x58c>
   11b34:	movw	r3, #8512	; 0x2140
   11b38:	movt	r3, #3
   11b3c:	mov	r1, #0
   11b40:	mov	r2, #1
   11b44:	strb	r1, [r3, #41]	; 0x29
   11b48:	strb	r2, [r9, #60]	; 0x3c
   11b4c:	b	11970 <__assert_fail@plt+0x58c>
   11b50:	ldr	r3, [sp, #24]
   11b54:	mov	r2, #5
   11b58:	movw	r1, #4952	; 0x1358
   11b5c:	movt	r1, #2
   11b60:	mov	r0, #0
   11b64:	mvn	sl, #-2147483648	; 0x80000000
   11b68:	mov	fp, #0
   11b6c:	ldr	r3, [r3]
   11b70:	str	r3, [sp, #28]
   11b74:	bl	11168 <dcgettext@plt>
   11b78:	ldr	r3, [sp, #28]
   11b7c:	mov	r1, #0
   11b80:	movw	r2, #356	; 0x164
   11b84:	movt	r2, #2
   11b88:	strd	sl, [sp]
   11b8c:	str	r2, [sp, #8]
   11b90:	mov	r2, #1
   11b94:	strd	r0, [sp, #12]
   11b98:	mov	r0, r3
   11b9c:	mov	r3, #0
   11ba0:	bl	1d184 <__assert_fail@plt+0xbda0>
   11ba4:	movw	r3, #8512	; 0x2140
   11ba8:	movt	r3, #3
   11bac:	str	r0, [r3, #52]	; 0x34
   11bb0:	b	11970 <__assert_fail@plt+0x58c>
   11bb4:	ldr	r3, [sp, #24]
   11bb8:	ldr	r0, [r3]
   11bbc:	cmp	r0, #0
   11bc0:	beq	11bd4 <__assert_fail@plt+0x7f0>
   11bc4:	ldr	r3, [pc, #1464]	; 12184 <__assert_fail@plt+0xda0>
   11bc8:	mov	r1, #105	; 0x69
   11bcc:	sub	r2, r3, #4
   11bd0:	bl	156e0 <__assert_fail@plt+0x42fc>
   11bd4:	mov	r3, #1
   11bd8:	strb	r3, [r9, #99]	; 0x63
   11bdc:	b	11970 <__assert_fail@plt+0x58c>
   11be0:	ldr	r3, [sp, #24]
   11be4:	ldr	r3, [r3]
   11be8:	str	r3, [r9, #48]	; 0x30
   11bec:	b	11970 <__assert_fail@plt+0x58c>
   11bf0:	ldr	r3, [sp, #24]
   11bf4:	ldr	r0, [r3]
   11bf8:	cmp	r0, #0
   11bfc:	beq	11c10 <__assert_fail@plt+0x82c>
   11c00:	ldr	r3, [pc, #1408]	; 12188 <__assert_fail@plt+0xda4>
   11c04:	mov	r1, #101	; 0x65
   11c08:	sub	r2, r3, #4
   11c0c:	bl	156e0 <__assert_fail@plt+0x42fc>
   11c10:	mov	r3, #1
   11c14:	strb	r3, [r9, #96]	; 0x60
   11c18:	b	11970 <__assert_fail@plt+0x58c>
   11c1c:	mov	r3, #1
   11c20:	strb	r3, [r9, #176]	; 0xb0
   11c24:	b	11970 <__assert_fail@plt+0x58c>
   11c28:	mov	r3, #1
   11c2c:	strb	r3, [r9, #178]	; 0xb2
   11c30:	b	11970 <__assert_fail@plt+0x58c>
   11c34:	mov	r3, #1
   11c38:	strb	r3, [r9, #180]	; 0xb4
   11c3c:	b	11970 <__assert_fail@plt+0x58c>
   11c40:	ldr	r3, [sp, #24]
   11c44:	ldr	r3, [r3]
   11c48:	str	r3, [r9, #40]	; 0x28
   11c4c:	b	11970 <__assert_fail@plt+0x58c>
   11c50:	ldrd	r2, [r9, #16]
   11c54:	orrs	r3, r2, r3
   11c58:	beq	11fb8 <__assert_fail@plt+0xbd4>
   11c5c:	ldr	r3, [sp, #24]
   11c60:	ldr	r2, [sp, #32]
   11c64:	ldr	r1, [sp, #44]	; 0x2c
   11c68:	ldr	r3, [r3]
   11c6c:	str	r3, [r1, r2, lsl #2]
   11c70:	add	r3, r2, #1
   11c74:	str	r3, [sp, #32]
   11c78:	b	11970 <__assert_fail@plt+0x58c>
   11c7c:	mov	r0, #0
   11c80:	bl	15224 <__assert_fail@plt+0x3e40>
   11c84:	mov	r4, #0
   11c88:	movw	r1, #5168	; 0x1430
   11c8c:	movt	r1, #2
   11c90:	movw	r2, #5184	; 0x1440
   11c94:	movt	r2, #2
   11c98:	movw	r3, #8572	; 0x217c
   11c9c:	movt	r3, #3
   11ca0:	movw	r0, #8676	; 0x21e4
   11ca4:	movt	r0, #3
   11ca8:	str	r2, [sp]
   11cac:	movw	r2, #4584	; 0x11e8
   11cb0:	movt	r2, #2
   11cb4:	stmib	sp, {r1, r4}
   11cb8:	movw	r1, #464	; 0x1d0
   11cbc:	movt	r1, #2
   11cc0:	ldr	r0, [r0]
   11cc4:	ldr	r3, [r3]
   11cc8:	bl	1c810 <__assert_fail@plt+0xb42c>
   11ccc:	mov	r0, r4
   11cd0:	bl	11288 <exit@plt>
   11cd4:	ldr	r3, [sp, #24]
   11cd8:	mov	r0, #0
   11cdc:	mov	r2, #5
   11ce0:	mov	sl, r0
   11ce4:	movw	r1, #5120	; 0x1400
   11ce8:	movt	r1, #2
   11cec:	ldr	fp, [r3]
   11cf0:	mov	r3, #1
   11cf4:	strb	r3, [r9, #112]	; 0x70
   11cf8:	bl	11168 <dcgettext@plt>
   11cfc:	movw	r3, #356	; 0x164
   11d00:	movt	r3, #2
   11d04:	mov	r2, #1
   11d08:	str	r0, [sp, #12]
   11d0c:	mov	r0, fp
   11d10:	mov	fp, #0
   11d14:	str	sl, [sp, #16]
   11d18:	str	sl, [sp, #40]	; 0x28
   11d1c:	mvn	sl, #-2147483648	; 0x80000000
   11d20:	strd	sl, [sp]
   11d24:	str	r3, [sp, #8]
   11d28:	mov	r3, #0
   11d2c:	bl	1d184 <__assert_fail@plt+0xbda0>
   11d30:	movw	r3, #8512	; 0x2140
   11d34:	movt	r3, #3
   11d38:	str	r0, [r3, #12]
   11d3c:	b	11970 <__assert_fail@plt+0x58c>
   11d40:	mov	r2, #0
   11d44:	movw	r3, #8512	; 0x2140
   11d48:	movt	r3, #3
   11d4c:	strb	r2, [r9, #120]	; 0x78
   11d50:	strb	r2, [r3, #48]	; 0x30
   11d54:	b	11970 <__assert_fail@plt+0x58c>
   11d58:	ldr	r3, [sp, #24]
   11d5c:	mov	r2, #0
   11d60:	movw	sl, #8512	; 0x2140
   11d64:	movt	sl, #3
   11d68:	mov	r1, #1
   11d6c:	str	r2, [r9, #84]	; 0x54
   11d70:	strb	r1, [r9, #152]	; 0x98
   11d74:	ldr	fp, [r3]
   11d78:	movw	r3, #356	; 0x164
   11d7c:	movt	r3, #2
   11d80:	str	r3, [sl, #24]
   11d84:	cmp	fp, r2
   11d88:	streq	fp, [sp, #48]	; 0x30
   11d8c:	beq	11970 <__assert_fail@plt+0x58c>
   11d90:	mov	r0, fp
   11d94:	str	r2, [sp, #48]	; 0x30
   11d98:	bl	11294 <strlen@plt>
   11d9c:	str	fp, [sl, #24]
   11da0:	str	r0, [r9, #84]	; 0x54
   11da4:	b	11970 <__assert_fail@plt+0x58c>
   11da8:	ldr	r3, [sp, #24]
   11dac:	mov	fp, #0
   11db0:	mov	r2, #5
   11db4:	mov	r0, fp
   11db8:	movw	r1, #4996	; 0x1384
   11dbc:	movt	r1, #2
   11dc0:	mvn	sl, #-2147483648	; 0x80000000
   11dc4:	ldr	r3, [r3]
   11dc8:	str	r3, [sp, #52]	; 0x34
   11dcc:	movw	r3, #8512	; 0x2140
   11dd0:	movt	r3, #3
   11dd4:	str	r3, [sp, #28]
   11dd8:	strb	fp, [r3, #42]	; 0x2a
   11ddc:	bl	11168 <dcgettext@plt>
   11de0:	ldr	r3, [sp, #52]	; 0x34
   11de4:	movw	r2, #356	; 0x164
   11de8:	movt	r2, #2
   11dec:	str	fp, [sp, #16]
   11df0:	mov	fp, #0
   11df4:	str	r0, [sp, #12]
   11df8:	strd	sl, [sp]
   11dfc:	mov	r0, r3
   11e00:	mvn	r3, #0
   11e04:	str	r2, [sp, #8]
   11e08:	mov	r2, #-2147483648	; 0x80000000
   11e0c:	bl	1d184 <__assert_fail@plt+0xbda0>
   11e10:	ldr	r3, [sp, #28]
   11e14:	str	r0, [r3, #56]	; 0x38
   11e18:	b	11970 <__assert_fail@plt+0x58c>
   11e1c:	mov	r3, #1
   11e20:	strb	r3, [r9, #177]	; 0xb1
   11e24:	b	11970 <__assert_fail@plt+0x58c>
   11e28:	movw	r3, #8512	; 0x2140
   11e2c:	movt	r3, #3
   11e30:	mov	r1, #0
   11e34:	mov	r2, #1
   11e38:	strb	r1, [r3, #41]	; 0x29
   11e3c:	strb	r2, [r9, #181]	; 0xb5
   11e40:	b	11970 <__assert_fail@plt+0x58c>
   11e44:	mov	r3, #1
   11e48:	strb	r3, [r9, #98]	; 0x62
   11e4c:	b	11970 <__assert_fail@plt+0x58c>
   11e50:	mov	r0, #1
   11e54:	bl	15224 <__assert_fail@plt+0x3e40>
   11e58:	cmp	r8, #0
   11e5c:	beq	11e70 <__assert_fail@plt+0xa8c>
   11e60:	mov	r0, r8
   11e64:	bl	123f8 <__assert_fail@plt+0x1014>
   11e68:	mov	r0, r8
   11e6c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   11e70:	movw	r5, #8688	; 0x21f0
   11e74:	movt	r5, #3
   11e78:	ldr	r3, [r5, #40]	; 0x28
   11e7c:	cmp	r3, #0
   11e80:	beq	12084 <__assert_fail@plt+0xca0>
   11e84:	movw	r0, #5216	; 0x1460
   11e88:	movt	r0, #2
   11e8c:	bl	11210 <getenv@plt>
   11e90:	bl	1bf74 <__assert_fail@plt+0xab90>
   11e94:	ldrd	r2, [r5, #16]
   11e98:	str	r0, [r5, #36]	; 0x24
   11e9c:	orrs	r3, r2, r3
   11ea0:	bne	11eb0 <__assert_fail@plt+0xacc>
   11ea4:	mov	r2, #1
   11ea8:	mov	r3, #0
   11eac:	strd	r2, [r5, #16]
   11eb0:	ldrb	r7, [r5, #60]	; 0x3c
   11eb4:	cmp	r7, #0
   11eb8:	beq	11edc <__assert_fail@plt+0xaf8>
   11ebc:	ldrb	r8, [r5, #24]
   11ec0:	cmp	r8, #0
   11ec4:	bne	120ec <__assert_fail@plt+0xd08>
   11ec8:	ldrb	r3, [r5, #181]	; 0xb5
   11ecc:	cmp	r3, #0
   11ed0:	movwne	r1, #5280	; 0x14a0
   11ed4:	movtne	r1, #2
   11ed8:	bne	120f4 <__assert_fail@plt+0xd10>
   11edc:	ldr	r3, [sp, #36]	; 0x24
   11ee0:	cmp	r3, #0
   11ee4:	bne	11fe4 <__assert_fail@plt+0xc00>
   11ee8:	movw	r8, #8656	; 0x21d0
   11eec:	movt	r8, #3
   11ef0:	ldr	r1, [r8]
   11ef4:	cmp	r4, r1
   11ef8:	ble	11f24 <__assert_fail@plt+0xb40>
   11efc:	ldr	r3, [sp, #32]
   11f00:	sub	r2, r4, r1
   11f04:	add	r1, r6, r1, lsl #2
   11f08:	ldr	r0, [sp, #44]	; 0x2c
   11f0c:	add	r0, r0, r3, lsl #2
   11f10:	add	r3, r3, r2
   11f14:	lsl	r2, r2, #2
   11f18:	str	r3, [sp, #32]
   11f1c:	bl	1112c <memcpy@plt>
   11f20:	str	r4, [r8]
   11f24:	ldr	r3, [sp, #32]
   11f28:	cmp	r3, #0
   11f2c:	beq	12018 <__assert_fail@plt+0xc34>
   11f30:	cmp	r7, #0
   11f34:	ldreq	r3, [sp, #32]
   11f38:	ldreq	r4, [sp, #44]	; 0x2c
   11f3c:	addeq	r6, r4, r3, lsl #2
   11f40:	bne	12074 <__assert_fail@plt+0xc90>
   11f44:	mov	r1, r4
   11f48:	mov	r0, #1
   11f4c:	add	r4, r4, #4
   11f50:	bl	13cc8 <__assert_fail@plt+0x28e4>
   11f54:	cmp	r6, r4
   11f58:	bne	11f44 <__assert_fail@plt+0xb60>
   11f5c:	ldr	r0, [r5, #100]	; 0x64
   11f60:	bl	15ad8 <__assert_fail@plt+0x46f4>
   11f64:	ldr	r0, [r5, #88]	; 0x58
   11f68:	bl	15ad8 <__assert_fail@plt+0x46f4>
   11f6c:	ldr	r0, [r5, #64]	; 0x40
   11f70:	bl	15ad8 <__assert_fail@plt+0x46f4>
   11f74:	ldr	r0, [r5, #140]	; 0x8c
   11f78:	bl	15ad8 <__assert_fail@plt+0x46f4>
   11f7c:	ldr	r0, [r5, #156]	; 0x9c
   11f80:	bl	15ad8 <__assert_fail@plt+0x46f4>
   11f84:	ldr	r0, [r5, #4]
   11f88:	bl	15ad8 <__assert_fail@plt+0x46f4>
   11f8c:	ldrb	r3, [r5, #113]	; 0x71
   11f90:	cmp	r3, #0
   11f94:	beq	11fb0 <__assert_fail@plt+0xbcc>
   11f98:	movw	r3, #8672	; 0x21e0
   11f9c:	movt	r3, #3
   11fa0:	ldr	r0, [r3]
   11fa4:	bl	15918 <__assert_fail@plt+0x4534>
   11fa8:	cmn	r0, #1
   11fac:	beq	12150 <__assert_fail@plt+0xd6c>
   11fb0:	ldrb	r0, [r5, #114]	; 0x72
   11fb4:	bl	11288 <exit@plt>
   11fb8:	ldr	r3, [sp, #24]
   11fbc:	ldr	r2, [r3]
   11fc0:	ldrb	r1, [r2]
   11fc4:	cmp	r1, #43	; 0x2b
   11fc8:	bne	11c5c <__assert_fail@plt+0x878>
   11fcc:	add	r2, r2, #1
   11fd0:	mvn	r0, #1
   11fd4:	bl	122d4 <__assert_fail@plt+0xef0>
   11fd8:	cmp	r0, #0
   11fdc:	bne	11970 <__assert_fail@plt+0x58c>
   11fe0:	b	11c5c <__assert_fail@plt+0x878>
   11fe4:	ldr	r3, [sp, #40]	; 0x28
   11fe8:	cmp	r3, #0
   11fec:	beq	12028 <__assert_fail@plt+0xc44>
   11ff0:	cmp	r7, #0
   11ff4:	beq	120b8 <__assert_fail@plt+0xcd4>
   11ff8:	ldr	r2, [sp, #48]	; 0x30
   11ffc:	mov	r3, #1
   12000:	strb	r3, [r5, #112]	; 0x70
   12004:	cmp	r2, #0
   12008:	beq	11ee8 <__assert_fail@plt+0xb04>
   1200c:	mov	r3, #1
   12010:	strb	r3, [r5, #152]	; 0x98
   12014:	b	11ee8 <__assert_fail@plt+0xb04>
   12018:	mov	r1, r3
   1201c:	mov	r0, r3
   12020:	bl	13cc8 <__assert_fail@plt+0x28e4>
   12024:	b	11f5c <__assert_fail@plt+0xb78>
   12028:	ldrb	r3, [r5, #152]	; 0x98
   1202c:	ldr	r2, [sp, #48]	; 0x30
   12030:	eor	r3, r3, #1
   12034:	tst	r2, r3
   12038:	beq	11ee8 <__assert_fail@plt+0xb04>
   1203c:	cmp	r7, #0
   12040:	bne	12050 <__assert_fail@plt+0xc6c>
   12044:	ldrb	r3, [r5, #24]
   12048:	cmp	r3, #0
   1204c:	beq	11ee8 <__assert_fail@plt+0xb04>
   12050:	ldrb	r3, [r5, #112]	; 0x70
   12054:	cmp	r3, #0
   12058:	bne	1200c <__assert_fail@plt+0xc28>
   1205c:	ldr	r3, [r5, #84]	; 0x54
   12060:	mov	r2, #1
   12064:	strb	r2, [r5, #178]	; 0xb2
   12068:	cmp	r3, #0
   1206c:	bgt	1200c <__assert_fail@plt+0xc28>
   12070:	b	11ee8 <__assert_fail@plt+0xb04>
   12074:	ldr	r0, [sp, #32]
   12078:	ldr	r1, [sp, #44]	; 0x2c
   1207c:	bl	13cc8 <__assert_fail@plt+0x28e4>
   12080:	b	11f5c <__assert_fail@plt+0xb78>
   12084:	movw	r0, #5200	; 0x1450
   12088:	movt	r0, #2
   1208c:	bl	11210 <getenv@plt>
   12090:	cmp	r0, #0
   12094:	beq	120e0 <__assert_fail@plt+0xcfc>
   12098:	mov	r0, #2
   1209c:	bl	15c4c <__assert_fail@plt+0x4868>
   120a0:	cmp	r0, #0
   120a4:	bne	120e0 <__assert_fail@plt+0xcfc>
   120a8:	movw	r3, #4836	; 0x12e4
   120ac:	movt	r3, #2
   120b0:	str	r3, [r5, #40]	; 0x28
   120b4:	b	11e84 <__assert_fail@plt+0xaa0>
   120b8:	ldrb	r3, [r5, #24]
   120bc:	cmp	r3, #0
   120c0:	moveq	r3, #1
   120c4:	strbeq	r3, [r5, #178]	; 0xb2
   120c8:	beq	11ee8 <__assert_fail@plt+0xb04>
   120cc:	b	11ff8 <__assert_fail@plt+0xc14>
   120d0:	mov	r3, #1
   120d4:	str	r3, [sp, #36]	; 0x24
   120d8:	str	r3, [sp, #48]	; 0x30
   120dc:	b	11970 <__assert_fail@plt+0x58c>
   120e0:	movw	r3, #4820	; 0x12d4
   120e4:	movt	r3, #2
   120e8:	b	120b0 <__assert_fail@plt+0xccc>
   120ec:	movw	r1, #5220	; 0x1464
   120f0:	movt	r1, #2
   120f4:	mov	r2, #5
   120f8:	mov	r0, #0
   120fc:	bl	11168 <dcgettext@plt>
   12100:	mov	r2, r0
   12104:	mov	r1, #0
   12108:	mov	r0, #1
   1210c:	bl	11204 <error@plt>
   12110:	mov	r2, #5
   12114:	movw	r1, #4928	; 0x1340
   12118:	movt	r1, #2
   1211c:	bl	11168 <dcgettext@plt>
   12120:	ldr	r3, [sp, #24]
   12124:	mov	r4, r0
   12128:	ldr	r0, [r3]
   1212c:	bl	1ba4c <__assert_fail@plt+0xa668>
   12130:	mov	r3, r0
   12134:	mov	r2, r4
   12138:	mov	r1, sl
   1213c:	mov	r0, #1
   12140:	bl	11204 <error@plt>
   12144:	movw	r1, #4876	; 0x130c
   12148:	movt	r1, #2
   1214c:	b	120f4 <__assert_fail@plt+0xd10>
   12150:	bl	112c4 <__errno_location@plt>
   12154:	ldr	r4, [r0]
   12158:	mov	r2, #5
   1215c:	movw	r1, #284	; 0x11c
   12160:	movt	r1, #2
   12164:	mov	r0, #0
   12168:	bl	11168 <dcgettext@plt>
   1216c:	mov	r2, r0
   12170:	mov	r0, #1
   12174:	mov	r1, r4
   12178:	bl	11204 <error@plt>
   1217c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   12180:	andeq	r2, r3, r4, ror #2
   12184:	andeq	r2, r3, r4, asr r1
   12188:	andeq	r2, r3, r0, ror #2
   1218c:	mov	fp, #0
   12190:	mov	lr, #0
   12194:	pop	{r1}		; (ldr r1, [sp], #4)
   12198:	mov	r2, sp
   1219c:	push	{r2}		; (str r2, [sp, #-4]!)
   121a0:	push	{r0}		; (str r0, [sp, #-4]!)
   121a4:	ldr	ip, [pc, #16]	; 121bc <__assert_fail@plt+0xdd8>
   121a8:	push	{ip}		; (str ip, [sp, #-4]!)
   121ac:	ldr	r0, [pc, #12]	; 121c0 <__assert_fail@plt+0xddc>
   121b0:	ldr	r3, [pc, #12]	; 121c4 <__assert_fail@plt+0xde0>
   121b4:	bl	11228 <__libc_start_main@plt>
   121b8:	bl	113cc <abort@plt>
   121bc:	andeq	pc, r1, r0, lsr #29
   121c0:	strdeq	r1, [r1], -r0
   121c4:	andeq	pc, r1, r0, asr #28
   121c8:	ldr	r3, [pc, #20]	; 121e4 <__assert_fail@plt+0xe00>
   121cc:	ldr	r2, [pc, #20]	; 121e8 <__assert_fail@plt+0xe04>
   121d0:	add	r3, pc, r3
   121d4:	ldr	r2, [r3, r2]
   121d8:	cmp	r2, #0
   121dc:	bxeq	lr
   121e0:	b	11264 <__gmon_start__@plt>
   121e4:	andeq	pc, r1, r8, lsr #28
   121e8:	andeq	r0, r0, r0, lsr r1
   121ec:	ldr	r0, [pc, #24]	; 1220c <__assert_fail@plt+0xe28>
   121f0:	ldr	r3, [pc, #24]	; 12210 <__assert_fail@plt+0xe2c>
   121f4:	cmp	r3, r0
   121f8:	bxeq	lr
   121fc:	ldr	r3, [pc, #16]	; 12214 <__assert_fail@plt+0xe30>
   12200:	cmp	r3, #0
   12204:	bxeq	lr
   12208:	bx	r3
   1220c:	andeq	r2, r3, r4, asr #3
   12210:	andeq	r2, r3, r4, asr #3
   12214:	andeq	r0, r0, r0
   12218:	ldr	r0, [pc, #36]	; 12244 <__assert_fail@plt+0xe60>
   1221c:	ldr	r1, [pc, #36]	; 12248 <__assert_fail@plt+0xe64>
   12220:	sub	r1, r1, r0
   12224:	asr	r1, r1, #2
   12228:	add	r1, r1, r1, lsr #31
   1222c:	asrs	r1, r1, #1
   12230:	bxeq	lr
   12234:	ldr	r3, [pc, #16]	; 1224c <__assert_fail@plt+0xe68>
   12238:	cmp	r3, #0
   1223c:	bxeq	lr
   12240:	bx	r3
   12244:	andeq	r2, r3, r4, asr #3
   12248:	andeq	r2, r3, r4, asr #3
   1224c:	andeq	r0, r0, r0
   12250:	push	{r4, lr}
   12254:	ldr	r4, [pc, #24]	; 12274 <__assert_fail@plt+0xe90>
   12258:	ldrb	r3, [r4]
   1225c:	cmp	r3, #0
   12260:	popne	{r4, pc}
   12264:	bl	121ec <__assert_fail@plt+0xe08>
   12268:	mov	r3, #1
   1226c:	strb	r3, [r4]
   12270:	pop	{r4, pc}
   12274:	andeq	r2, r3, ip, ror #3
   12278:	b	12218 <__assert_fail@plt+0xe34>
   1227c:	strd	r4, [sp, #-16]!
   12280:	movw	r4, #8688	; 0x21f0
   12284:	movt	r4, #3
   12288:	mov	r5, r0
   1228c:	ldr	r3, [r4]
   12290:	str	r6, [sp, #8]
   12294:	ldmib	r4, {r0, r2}
   12298:	str	lr, [sp, #12]
   1229c:	cmp	r3, r2
   122a0:	bcs	122c0 <__assert_fail@plt+0xedc>
   122a4:	add	r2, r3, #1
   122a8:	strb	r5, [r0, r3]
   122ac:	ldr	r6, [sp, #8]
   122b0:	str	r2, [r4]
   122b4:	ldrd	r4, [sp]
   122b8:	add	sp, sp, #12
   122bc:	pop	{pc}		; (ldr pc, [sp], #4)
   122c0:	add	r1, r4, #8
   122c4:	bl	1cbf4 <__assert_fail@plt+0xb810>
   122c8:	str	r0, [r4, #4]
   122cc:	ldr	r3, [r4]
   122d0:	b	122a4 <__assert_fail@plt+0xec0>
   122d4:	mvn	r3, #0
   122d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   122dc:	mov	r5, r2
   122e0:	movw	r4, #356	; 0x164
   122e4:	movt	r4, #2
   122e8:	strd	r6, [sp, #8]
   122ec:	mvn	r2, #0
   122f0:	str	r8, [sp, #16]
   122f4:	mov	r7, r0
   122f8:	str	lr, [sp, #20]
   122fc:	sub	sp, sp, #32
   12300:	mov	r8, r1
   12304:	mov	r0, r5
   12308:	add	r1, sp, #12
   1230c:	str	r4, [sp]
   12310:	strd	r2, [sp, #24]
   12314:	add	r3, sp, #16
   12318:	mov	r2, #10
   1231c:	bl	1ea30 <__assert_fail@plt+0xd64c>
   12320:	bics	r3, r0, #2
   12324:	bne	123e0 <__assert_fail@plt+0xffc>
   12328:	ldr	r0, [sp, #12]
   1232c:	cmp	r0, r5
   12330:	beq	12378 <__assert_fail@plt+0xf94>
   12334:	ldrd	r2, [sp, #16]
   12338:	orrs	r1, r2, r3
   1233c:	beq	12378 <__assert_fail@plt+0xf94>
   12340:	ldrb	r1, [r0]
   12344:	cmp	r1, #58	; 0x3a
   12348:	beq	12394 <__assert_fail@plt+0xfb0>
   1234c:	cmp	r1, #0
   12350:	bne	12378 <__assert_fail@plt+0xf94>
   12354:	ldrd	r4, [sp, #24]
   12358:	movw	r0, #8688	; 0x21f0
   1235c:	movt	r0, #3
   12360:	movw	r1, #8512	; 0x2140
   12364:	movt	r1, #3
   12368:	strd	r2, [r0, #16]
   1236c:	mov	r0, #1
   12370:	strd	r4, [r1]
   12374:	b	1237c <__assert_fail@plt+0xf98>
   12378:	mov	r0, #0
   1237c:	add	sp, sp, #32
   12380:	ldrd	r4, [sp]
   12384:	ldrd	r6, [sp, #8]
   12388:	ldr	r8, [sp, #16]
   1238c:	add	sp, sp, #20
   12390:	pop	{pc}		; (ldr pc, [sp], #4)
   12394:	add	r6, r0, #1
   12398:	add	r1, sp, #12
   1239c:	str	r4, [sp]
   123a0:	mov	r0, r6
   123a4:	add	r3, sp, #24
   123a8:	mov	r2, #10
   123ac:	bl	1ea30 <__assert_fail@plt+0xd64c>
   123b0:	cmp	r0, #0
   123b4:	bne	123e0 <__assert_fail@plt+0xffc>
   123b8:	ldr	r1, [sp, #12]
   123bc:	cmp	r1, r6
   123c0:	beq	12378 <__assert_fail@plt+0xf94>
   123c4:	ldrd	r2, [sp, #16]
   123c8:	ldrd	r4, [sp, #24]
   123cc:	cmp	r5, r3
   123d0:	cmpeq	r4, r2
   123d4:	bcc	12378 <__assert_fail@plt+0xf94>
   123d8:	ldrb	r1, [r1]
   123dc:	b	1234c <__assert_fail@plt+0xf68>
   123e0:	movw	r3, #65224	; 0xfec8
   123e4:	movt	r3, #1
   123e8:	str	r5, [sp]
   123ec:	mov	r2, r8
   123f0:	mov	r1, r7
   123f4:	bl	1e9a0 <__assert_fail@plt+0xd5bc>
   123f8:	mov	r2, #5
   123fc:	movw	r1, #232	; 0xe8
   12400:	movt	r1, #2
   12404:	strd	r4, [sp, #-16]!
   12408:	mvn	r4, #-2147483648	; 0x80000000
   1240c:	str	r6, [sp, #8]
   12410:	mov	r6, r0
   12414:	mov	r0, #0
   12418:	str	lr, [sp, #12]
   1241c:	sub	sp, sp, #24
   12420:	mov	r5, #0
   12424:	bl	11168 <dcgettext@plt>
   12428:	mov	r1, #0
   1242c:	movw	r3, #356	; 0x164
   12430:	movt	r3, #2
   12434:	mov	r2, #1
   12438:	strd	r4, [sp]
   1243c:	str	r3, [sp, #8]
   12440:	mov	r3, #0
   12444:	strd	r0, [sp, #12]
   12448:	mov	r0, r6
   1244c:	bl	1d184 <__assert_fail@plt+0xbda0>
   12450:	mov	r1, #1
   12454:	movw	r2, #8512	; 0x2140
   12458:	movt	r2, #3
   1245c:	movw	r3, #8688	; 0x21f0
   12460:	movt	r3, #3
   12464:	str	r0, [r2, #8]
   12468:	strb	r1, [r3, #24]
   1246c:	add	sp, sp, #24
   12470:	ldrd	r4, [sp]
   12474:	ldr	r6, [sp, #8]
   12478:	add	sp, sp, #12
   1247c:	pop	{pc}		; (ldr pc, [sp], #4)
   12480:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12484:	strd	r6, [sp, #8]
   12488:	mov	r7, r1
   1248c:	movw	r1, #260	; 0x104
   12490:	movt	r1, #2
   12494:	strd	r8, [sp, #16]
   12498:	mov	r9, r0
   1249c:	str	lr, [sp, #24]
   124a0:	sub	sp, sp, #196	; 0xc4
   124a4:	bl	110c0 <strcmp@plt>
   124a8:	cmp	r0, #0
   124ac:	beq	125a0 <__assert_fail@plt+0x11bc>
   124b0:	cmp	r7, #0
   124b4:	bge	125a8 <__assert_fail@plt+0x11c4>
   124b8:	movw	r4, #8688	; 0x21f0
   124bc:	movt	r4, #3
   124c0:	ldr	r3, [r4, #28]
   124c4:	cmp	r3, #0
   124c8:	beq	12628 <__assert_fail@plt+0x1244>
   124cc:	ldrd	r2, [r4, #28]
   124d0:	strd	r2, [sp, #8]
   124d4:	ldr	r5, [sp, #12]
   124d8:	add	r1, sp, #8
   124dc:	add	r2, sp, #44	; 0x2c
   124e0:	ldr	r0, [r4, #36]	; 0x24
   124e4:	bl	1c040 <__assert_fail@plt+0xac5c>
   124e8:	cmp	r0, #0
   124ec:	beq	125ec <__assert_fail@plt+0x1208>
   124f0:	ldr	ip, [r4, #36]	; 0x24
   124f4:	add	r3, sp, #44	; 0x2c
   124f8:	mvn	r1, #0
   124fc:	mov	r0, #0
   12500:	ldr	r2, [r4, #40]	; 0x28
   12504:	str	ip, [sp]
   12508:	str	r5, [sp, #4]
   1250c:	bl	18084 <__assert_fail@plt+0x6ca0>
   12510:	add	r8, r0, #1
   12514:	mov	r0, r8
   12518:	bl	1ca20 <__assert_fail@plt+0xb63c>
   1251c:	ldr	ip, [r4, #36]	; 0x24
   12520:	mov	r1, r8
   12524:	add	r3, sp, #44	; 0x2c
   12528:	mov	r6, r0
   1252c:	ldr	r2, [r4, #40]	; 0x28
   12530:	str	ip, [sp]
   12534:	str	r5, [sp, #4]
   12538:	bl	18084 <__assert_fail@plt+0x6ca0>
   1253c:	ldr	r0, [r4, #44]	; 0x2c
   12540:	bl	15ad8 <__assert_fail@plt+0x46f4>
   12544:	ldr	r3, [r4, #48]	; 0x30
   12548:	str	r6, [r4, #44]	; 0x2c
   1254c:	cmp	r3, #0
   12550:	beq	125d8 <__assert_fail@plt+0x11f4>
   12554:	movw	r2, #8512	; 0x2140
   12558:	movt	r2, #3
   1255c:	str	r3, [r4, #52]	; 0x34
   12560:	ldr	r5, [r2, #12]
   12564:	mov	r0, r6
   12568:	mov	r1, #0
   1256c:	bl	15ff0 <__assert_fail@plt+0x4c0c>
   12570:	mov	r1, #0
   12574:	sub	r5, r5, r0
   12578:	ldr	r0, [r4, #52]	; 0x34
   1257c:	bl	15ff0 <__assert_fail@plt+0x4c0c>
   12580:	sub	r0, r5, r0
   12584:	str	r0, [r4, #56]	; 0x38
   12588:	add	sp, sp, #196	; 0xc4
   1258c:	ldrd	r4, [sp]
   12590:	ldrd	r6, [sp, #8]
   12594:	ldrd	r8, [sp, #16]
   12598:	add	sp, sp, #24
   1259c:	pop	{pc}		; (ldr pc, [sp], #4)
   125a0:	mvn	r7, #0
   125a4:	b	124b8 <__assert_fail@plt+0x10d4>
   125a8:	add	r2, sp, #88	; 0x58
   125ac:	mov	r1, r7
   125b0:	mov	r0, #3
   125b4:	bl	111bc <__fxstat64@plt>
   125b8:	cmp	r0, #0
   125bc:	bne	124b8 <__assert_fail@plt+0x10d4>
   125c0:	ldrd	r2, [sp, #168]	; 0xa8
   125c4:	movw	r4, #8688	; 0x21f0
   125c8:	movt	r4, #3
   125cc:	ldr	r5, [sp, #172]	; 0xac
   125d0:	strd	r2, [sp, #8]
   125d4:	b	124d8 <__assert_fail@plt+0x10f4>
   125d8:	cmp	r7, #0
   125dc:	movw	r3, #356	; 0x164
   125e0:	movt	r3, #2
   125e4:	movge	r3, r9
   125e8:	b	12554 <__assert_fail@plt+0x1170>
   125ec:	mov	r0, #33	; 0x21
   125f0:	bl	1ca20 <__assert_fail@plt+0xb63c>
   125f4:	mov	r6, r0
   125f8:	ldr	r0, [sp, #8]
   125fc:	add	r2, sp, #20
   12600:	asr	r1, r0, #31
   12604:	bl	15ca4 <__assert_fail@plt+0x48c0>
   12608:	movw	r3, #264	; 0x108
   1260c:	movt	r3, #2
   12610:	stm	sp, {r0, r5}
   12614:	mov	r2, #33	; 0x21
   12618:	mov	r1, #1
   1261c:	mov	r0, r6
   12620:	bl	112d0 <__sprintf_chk@plt>
   12624:	b	1253c <__assert_fail@plt+0x1158>
   12628:	add	r0, r4, #28
   1262c:	bl	15c08 <__assert_fail@plt+0x4824>
   12630:	b	124cc <__assert_fail@plt+0x10e8>
   12634:	ldr	r3, [r0, #8]
   12638:	cmp	r3, #3
   1263c:	bxeq	lr
   12640:	strd	r4, [sp, #-16]!
   12644:	mov	r4, r0
   12648:	str	r6, [sp, #8]
   1264c:	str	lr, [sp, #12]
   12650:	bl	112c4 <__errno_location@plt>
   12654:	mov	r6, r0
   12658:	ldr	r0, [r4]
   1265c:	ldr	r5, [r6]
   12660:	ldr	r3, [r0]
   12664:	tst	r3, #32
   12668:	moveq	r5, #0
   1266c:	bl	11300 <fileno@plt>
   12670:	cmp	r0, #0
   12674:	ldr	r0, [r4]
   12678:	bne	126f0 <__assert_fail@plt+0x130c>
   1267c:	bl	11384 <clearerr_unlocked@plt>
   12680:	cmp	r5, #0
   12684:	bne	12704 <__assert_fail@plt+0x1320>
   12688:	movw	r0, #8688	; 0x21f0
   1268c:	movt	r0, #3
   12690:	ldrb	r3, [r0, #60]	; 0x3c
   12694:	cmp	r3, #0
   12698:	bne	1272c <__assert_fail@plt+0x1348>
   1269c:	movw	r2, #8512	; 0x2140
   126a0:	movt	r2, #3
   126a4:	ldr	r3, [r0, #64]	; 0x40
   126a8:	ldr	r2, [r2, #8]
   126ac:	cmp	r2, #0
   126b0:	beq	126d4 <__assert_fail@plt+0x12f0>
   126b4:	mov	ip, #3
   126b8:	ldr	r1, [r3, #24]
   126bc:	add	r3, r3, #40	; 0x28
   126c0:	str	ip, [r3, #-32]	; 0xffffffe0
   126c4:	cmp	r1, #0
   126c8:	streq	r1, [r3, #-12]
   126cc:	subs	r2, r2, #1
   126d0:	bne	126b8 <__assert_fail@plt+0x12d4>
   126d4:	ldr	r3, [r0, #68]	; 0x44
   126d8:	ldrd	r4, [sp]
   126dc:	ldr	r6, [sp, #8]
   126e0:	add	sp, sp, #12
   126e4:	sub	r3, r3, #1
   126e8:	str	r3, [r0, #68]	; 0x44
   126ec:	pop	{pc}		; (ldr pc, [sp], #4)
   126f0:	bl	15918 <__assert_fail@plt+0x4534>
   126f4:	cmp	r0, #0
   126f8:	beq	12680 <__assert_fail@plt+0x129c>
   126fc:	cmp	r5, #0
   12700:	beq	1273c <__assert_fail@plt+0x1358>
   12704:	mov	r1, #3
   12708:	mov	r0, #0
   1270c:	ldr	r2, [r4, #4]
   12710:	bl	1b2a0 <__assert_fail@plt+0x9ebc>
   12714:	mov	r3, r0
   12718:	movw	r2, #5800	; 0x16a8
   1271c:	movt	r2, #2
   12720:	mov	r1, r5
   12724:	mov	r0, #1
   12728:	bl	11204 <error@plt>
   1272c:	mov	r3, #3
   12730:	str	r3, [r4, #8]
   12734:	str	r5, [r4, #28]
   12738:	b	126d4 <__assert_fail@plt+0x12f0>
   1273c:	ldr	r5, [r6]
   12740:	b	12680 <__assert_fail@plt+0x129c>
   12744:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12748:	strd	r6, [sp, #8]
   1274c:	movw	r6, #8688	; 0x21f0
   12750:	movt	r6, #3
   12754:	ldr	r3, [r6, #72]	; 0x48
   12758:	movw	r7, #8512	; 0x2140
   1275c:	movt	r7, #3
   12760:	strd	r8, [sp, #16]
   12764:	movw	r8, #8676	; 0x21e4
   12768:	movt	r8, #3
   1276c:	ldr	r5, [r6, #76]	; 0x4c
   12770:	str	sl, [sp, #24]
   12774:	str	lr, [sp, #28]
   12778:	add	r5, r3, r5
   1277c:	b	12784 <__assert_fail@plt+0x13a0>
   12780:	mov	r3, r4
   12784:	sub	r2, r5, r3
   12788:	cmp	r2, #1
   1278c:	ble	127d0 <__assert_fail@plt+0x13ec>
   12790:	ldr	r2, [r7, #20]
   12794:	sdiv	r4, r3, r2
   12798:	mla	r4, r2, r4, r2
   1279c:	cmp	r5, r4
   127a0:	blt	127d0 <__assert_fail@plt+0x13ec>
   127a4:	ldr	r0, [r8]
   127a8:	ldrb	r1, [r7, #16]
   127ac:	ldr	r3, [r0, #20]
   127b0:	ldr	r2, [r0, #24]
   127b4:	add	ip, r3, #1
   127b8:	cmp	r3, r2
   127bc:	strcc	ip, [r0, #20]
   127c0:	strbcc	r1, [r3]
   127c4:	bcc	12780 <__assert_fail@plt+0x139c>
   127c8:	bl	11348 <__overflow@plt>
   127cc:	b	12780 <__assert_fail@plt+0x139c>
   127d0:	add	r4, r3, #1
   127d4:	cmp	r5, r4
   127d8:	blt	12818 <__assert_fail@plt+0x1434>
   127dc:	movw	r7, #8676	; 0x21e4
   127e0:	movt	r7, #3
   127e4:	add	r8, r5, #1
   127e8:	mov	r9, #32
   127ec:	ldr	r0, [r7]
   127f0:	ldr	r3, [r0, #20]
   127f4:	ldr	r2, [r0, #24]
   127f8:	add	r1, r3, #1
   127fc:	cmp	r3, r2
   12800:	strcc	r1, [r0, #20]
   12804:	strbcc	r9, [r3]
   12808:	bcs	1283c <__assert_fail@plt+0x1458>
   1280c:	add	r4, r4, #1
   12810:	cmp	r8, r4
   12814:	bne	127ec <__assert_fail@plt+0x1408>
   12818:	mov	r3, #0
   1281c:	str	r5, [r6, #72]	; 0x48
   12820:	ldrd	r4, [sp]
   12824:	str	r3, [r6, #76]	; 0x4c
   12828:	ldrd	r6, [sp, #8]
   1282c:	ldrd	r8, [sp, #16]
   12830:	ldr	sl, [sp, #24]
   12834:	add	sp, sp, #28
   12838:	pop	{pc}		; (ldr pc, [sp], #4)
   1283c:	mov	r1, #32
   12840:	bl	11348 <__overflow@plt>
   12844:	b	1280c <__assert_fail@plt+0x1428>
   12848:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1284c:	movw	r5, #8688	; 0x21f0
   12850:	movt	r5, #3
   12854:	ldrd	r2, [r5, #76]	; 0x4c
   12858:	strd	r6, [sp, #8]
   1285c:	strd	r8, [sp, #16]
   12860:	str	sl, [sp, #24]
   12864:	str	lr, [sp, #28]
   12868:	cmp	r3, #0
   1286c:	ble	12934 <__assert_fail@plt+0x1550>
   12870:	movw	r3, #8512	; 0x2140
   12874:	movt	r3, #3
   12878:	ldr	r6, [r5, #84]	; 0x54
   1287c:	movw	r7, #8676	; 0x21e4
   12880:	movt	r7, #3
   12884:	ldr	r8, [r3, #24]
   12888:	cmp	r6, #0
   1288c:	sub	r9, r6, #1
   12890:	addgt	sl, r8, r6
   12894:	movgt	r4, r8
   12898:	ble	128f8 <__assert_fail@plt+0x1514>
   1289c:	ldrb	r1, [r4], #1
   128a0:	cmp	r1, #32
   128a4:	addeq	r2, r2, #1
   128a8:	streq	r2, [r5, #76]	; 0x4c
   128ac:	beq	128f0 <__assert_fail@plt+0x150c>
   128b0:	cmp	r2, #0
   128b4:	ble	128c0 <__assert_fail@plt+0x14dc>
   128b8:	bl	12744 <__assert_fail@plt+0x1360>
   128bc:	ldrb	r1, [r4, #-1]
   128c0:	ldr	r0, [r7]
   128c4:	ldr	r3, [r0, #20]
   128c8:	ldr	r2, [r0, #24]
   128cc:	add	ip, r3, #1
   128d0:	cmp	r3, r2
   128d4:	strcc	ip, [r0, #20]
   128d8:	strbcc	r1, [r3]
   128dc:	bcs	1292c <__assert_fail@plt+0x1548>
   128e0:	ldr	r3, [r5, #72]	; 0x48
   128e4:	ldr	r2, [r5, #76]	; 0x4c
   128e8:	add	r3, r3, #1
   128ec:	str	r3, [r5, #72]	; 0x48
   128f0:	cmp	sl, r4
   128f4:	bne	1289c <__assert_fail@plt+0x14b8>
   128f8:	bic	r6, r6, r6, asr #31
   128fc:	cmp	r2, #0
   12900:	add	r8, r8, r6
   12904:	sub	r6, r9, r6
   12908:	ble	12910 <__assert_fail@plt+0x152c>
   1290c:	bl	12744 <__assert_fail@plt+0x1360>
   12910:	ldr	r3, [r5, #80]	; 0x50
   12914:	sub	r3, r3, #1
   12918:	cmp	r3, #0
   1291c:	str	r3, [r5, #80]	; 0x50
   12920:	ble	1293c <__assert_fail@plt+0x1558>
   12924:	ldr	r2, [r5, #76]	; 0x4c
   12928:	b	12888 <__assert_fail@plt+0x14a4>
   1292c:	bl	11348 <__overflow@plt>
   12930:	b	128e0 <__assert_fail@plt+0x14fc>
   12934:	cmp	r2, #0
   12938:	bgt	12954 <__assert_fail@plt+0x1570>
   1293c:	ldrd	r4, [sp]
   12940:	ldrd	r6, [sp, #8]
   12944:	ldrd	r8, [sp, #16]
   12948:	ldr	sl, [sp, #24]
   1294c:	add	sp, sp, #28
   12950:	pop	{pc}		; (ldr pc, [sp], #4)
   12954:	ldrd	r4, [sp]
   12958:	ldrd	r6, [sp, #8]
   1295c:	ldrd	r8, [sp, #16]
   12960:	ldr	sl, [sp, #24]
   12964:	ldr	lr, [sp, #28]
   12968:	add	sp, sp, #32
   1296c:	b	12744 <__assert_fail@plt+0x1360>
   12970:	movw	r3, #8512	; 0x2140
   12974:	movt	r3, #3
   12978:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1297c:	strd	r6, [sp, #8]
   12980:	movw	r4, #8688	; 0x21f0
   12984:	movt	r4, #3
   12988:	str	r8, [sp, #16]
   1298c:	mov	r7, r0
   12990:	str	lr, [sp, #20]
   12994:	sub	sp, sp, #16
   12998:	ldrb	r2, [r3, #28]
   1299c:	ldr	r8, [r4, #88]	; 0x58
   129a0:	cmp	r2, r0
   129a4:	beq	12a5c <__assert_fail@plt+0x1678>
   129a8:	cmp	r0, #9
   129ac:	beq	12a08 <__assert_fail@plt+0x1624>
   129b0:	bl	1127c <__ctype_b_loc@plt>
   129b4:	ldr	r2, [r0]
   129b8:	lsl	r3, r7, #1
   129bc:	ldrh	r3, [r2, r3]
   129c0:	tst	r3, #16384	; 0x4000
   129c4:	bne	12ac0 <__assert_fail@plt+0x16dc>
   129c8:	ldrb	r3, [r4, #97]	; 0x61
   129cc:	cmp	r3, #0
   129d0:	bne	12ae4 <__assert_fail@plt+0x1700>
   129d4:	ldrb	r3, [r4, #98]	; 0x62
   129d8:	cmp	r3, #0
   129dc:	beq	12b30 <__assert_fail@plt+0x174c>
   129e0:	tst	r7, #128	; 0x80
   129e4:	bne	12ae4 <__assert_fail@plt+0x1700>
   129e8:	ldr	r5, [r4, #92]	; 0x5c
   129ec:	eor	r7, r7, #64	; 0x40
   129f0:	mov	r3, #94	; 0x5e
   129f4:	mov	r0, #2
   129f8:	strb	r3, [r8]
   129fc:	strb	r7, [r8, #1]
   12a00:	add	r5, r5, r0
   12a04:	b	12a40 <__assert_fail@plt+0x165c>
   12a08:	ldr	r5, [r4, #92]	; 0x5c
   12a0c:	ldrb	r2, [r4, #96]	; 0x60
   12a10:	rsbs	r3, r5, #0
   12a14:	and	r6, r5, #7
   12a18:	and	r3, r3, #7
   12a1c:	rsbpl	r6, r3, #0
   12a20:	cmp	r2, #0
   12a24:	rsb	r6, r6, #8
   12a28:	bne	12a84 <__assert_fail@plt+0x16a0>
   12a2c:	cmp	r6, #0
   12a30:	mov	r0, #1
   12a34:	strb	r7, [r8]
   12a38:	blt	12aa0 <__assert_fail@plt+0x16bc>
   12a3c:	add	r5, r5, r6
   12a40:	str	r5, [r4, #92]	; 0x5c
   12a44:	add	sp, sp, #16
   12a48:	ldrd	r4, [sp]
   12a4c:	ldrd	r6, [sp, #8]
   12a50:	ldr	r8, [sp, #16]
   12a54:	add	sp, sp, #20
   12a58:	pop	{pc}		; (ldr pc, [sp], #4)
   12a5c:	ldr	r6, [r3, #32]
   12a60:	ldr	r5, [r4, #92]	; 0x5c
   12a64:	ldrb	r2, [r4, #96]	; 0x60
   12a68:	sdiv	r3, r5, r6
   12a6c:	cmp	r2, #0
   12a70:	mls	r3, r6, r3, r5
   12a74:	sub	r6, r6, r3
   12a78:	beq	12a2c <__assert_fail@plt+0x1648>
   12a7c:	cmp	r6, #0
   12a80:	beq	12b60 <__assert_fail@plt+0x177c>
   12a84:	mov	r0, r8
   12a88:	mov	r2, r6
   12a8c:	mov	r1, #32
   12a90:	bl	112e8 <memset@plt>
   12a94:	cmp	r6, #0
   12a98:	mov	r0, r6
   12a9c:	bge	12a3c <__assert_fail@plt+0x1658>
   12aa0:	cmp	r5, #0
   12aa4:	rsbne	r3, r6, #0
   12aa8:	beq	12ad4 <__assert_fail@plt+0x16f0>
   12aac:	cmp	r5, r3
   12ab0:	movle	r3, #0
   12ab4:	strle	r3, [r4, #92]	; 0x5c
   12ab8:	ble	12a44 <__assert_fail@plt+0x1660>
   12abc:	b	12a3c <__assert_fail@plt+0x1658>
   12ac0:	ldr	r5, [r4, #92]	; 0x5c
   12ac4:	mov	r0, #1
   12ac8:	strb	r7, [r8]
   12acc:	add	r5, r5, r0
   12ad0:	b	12a40 <__assert_fail@plt+0x165c>
   12ad4:	mov	r3, #0
   12ad8:	mov	r0, r3
   12adc:	str	r3, [r4, #92]	; 0x5c
   12ae0:	b	12a44 <__assert_fail@plt+0x1660>
   12ae4:	mov	r1, #92	; 0x5c
   12ae8:	movw	r3, #272	; 0x110
   12aec:	movt	r3, #2
   12af0:	mov	r2, #4
   12af4:	add	r0, sp, #12
   12af8:	strb	r1, [r8]
   12afc:	mov	r1, #1
   12b00:	str	r7, [sp]
   12b04:	bl	112d0 <__sprintf_chk@plt>
   12b08:	ldrb	r3, [sp, #12]
   12b0c:	mov	r0, #4
   12b10:	ldr	r5, [r4, #92]	; 0x5c
   12b14:	strb	r3, [r8, #1]
   12b18:	ldrb	r3, [sp, #13]
   12b1c:	add	r5, r5, r0
   12b20:	strb	r3, [r8, #2]
   12b24:	ldrb	r3, [sp, #14]
   12b28:	strb	r3, [r8, #3]
   12b2c:	b	12a40 <__assert_fail@plt+0x165c>
   12b30:	cmp	r7, #8
   12b34:	ldr	r5, [r4, #92]	; 0x5c
   12b38:	movne	r0, #1
   12b3c:	strbne	r7, [r8]
   12b40:	bne	12a40 <__assert_fail@plt+0x165c>
   12b44:	cmp	r5, #0
   12b48:	strb	r7, [r8]
   12b4c:	beq	12ad4 <__assert_fail@plt+0x16f0>
   12b50:	mov	r3, #1
   12b54:	mvn	r6, #0
   12b58:	mov	r0, r3
   12b5c:	b	12aac <__assert_fail@plt+0x16c8>
   12b60:	mov	r0, r6
   12b64:	b	12a40 <__assert_fail@plt+0x165c>
   12b68:	strd	r4, [sp, #-16]!
   12b6c:	movw	r4, #8688	; 0x21f0
   12b70:	movt	r4, #3
   12b74:	ldrb	r3, [r4, #99]	; 0x63
   12b78:	mov	r5, r0
   12b7c:	str	r6, [sp, #8]
   12b80:	str	lr, [sp, #12]
   12b84:	cmp	r3, #0
   12b88:	beq	12bd8 <__assert_fail@plt+0x17f4>
   12b8c:	ldr	r3, [r4, #76]	; 0x4c
   12b90:	cmp	r0, #32
   12b94:	addeq	r3, r3, #1
   12b98:	streq	r3, [r4, #76]	; 0x4c
   12b9c:	beq	12c00 <__assert_fail@plt+0x181c>
   12ba0:	cmp	r3, #0
   12ba4:	ble	12bac <__assert_fail@plt+0x17c8>
   12ba8:	bl	12744 <__assert_fail@plt+0x1360>
   12bac:	bl	1127c <__ctype_b_loc@plt>
   12bb0:	ldr	r2, [r0]
   12bb4:	lsl	r3, r5, #1
   12bb8:	ldrh	r3, [r2, r3]
   12bbc:	tst	r3, #16384	; 0x4000
   12bc0:	bne	12c10 <__assert_fail@plt+0x182c>
   12bc4:	cmp	r5, #8
   12bc8:	bne	12bd8 <__assert_fail@plt+0x17f4>
   12bcc:	ldr	r3, [r4, #72]	; 0x48
   12bd0:	sub	r3, r3, #1
   12bd4:	str	r3, [r4, #72]	; 0x48
   12bd8:	movw	r3, #8676	; 0x21e4
   12bdc:	movt	r3, #3
   12be0:	ldr	r0, [r3]
   12be4:	ldr	r3, [r0, #20]
   12be8:	ldr	r2, [r0, #24]
   12bec:	cmp	r3, r2
   12bf0:	addcc	r2, r3, #1
   12bf4:	strcc	r2, [r0, #20]
   12bf8:	strbcc	r5, [r3]
   12bfc:	bcs	12c20 <__assert_fail@plt+0x183c>
   12c00:	ldrd	r4, [sp]
   12c04:	ldr	r6, [sp, #8]
   12c08:	add	sp, sp, #12
   12c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c10:	ldr	r3, [r4, #72]	; 0x48
   12c14:	add	r3, r3, #1
   12c18:	str	r3, [r4, #72]	; 0x48
   12c1c:	b	12bd8 <__assert_fail@plt+0x17f4>
   12c20:	mov	r1, r5
   12c24:	ldrd	r4, [sp]
   12c28:	ldr	r6, [sp, #8]
   12c2c:	ldr	lr, [sp, #12]
   12c30:	add	sp, sp, #16
   12c34:	b	11348 <__overflow@plt>
   12c38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12c3c:	movw	r3, #280	; 0x118
   12c40:	movt	r3, #2
   12c44:	strd	r6, [sp, #8]
   12c48:	movw	r7, #8688	; 0x21f0
   12c4c:	movt	r7, #3
   12c50:	str	r8, [sp, #16]
   12c54:	movw	r8, #8512	; 0x2140
   12c58:	movt	r8, #3
   12c5c:	str	lr, [sp, #20]
   12c60:	sub	sp, sp, #8
   12c64:	mvn	r2, #0
   12c68:	ldr	ip, [r8, #36]	; 0x24
   12c6c:	mov	r1, #1
   12c70:	mov	r6, r0
   12c74:	ldr	r0, [r7, #100]	; 0x64
   12c78:	ldr	lr, [r7, #104]	; 0x68
   12c7c:	stm	sp, {ip, lr}
   12c80:	bl	112d0 <__sprintf_chk@plt>
   12c84:	ldr	r5, [r8, #36]	; 0x24
   12c88:	ldr	r4, [r7, #100]	; 0x64
   12c8c:	ldr	r3, [r7, #104]	; 0x68
   12c90:	sub	r0, r0, r5
   12c94:	cmp	r5, #0
   12c98:	add	r4, r4, r0
   12c9c:	addgt	r5, r4, r5
   12ca0:	add	r3, r3, #1
   12ca4:	str	r3, [r7, #104]	; 0x68
   12ca8:	ble	12cc0 <__assert_fail@plt+0x18dc>
   12cac:	ldrb	r0, [r4], #1
   12cb0:	ldr	r3, [r6]
   12cb4:	blx	r3
   12cb8:	cmp	r4, r5
   12cbc:	bne	12cac <__assert_fail@plt+0x18c8>
   12cc0:	ldr	r3, [r8, #8]
   12cc4:	ldrb	r0, [r8, #40]	; 0x28
   12cc8:	cmp	r3, #1
   12ccc:	ble	12d54 <__assert_fail@plt+0x1970>
   12cd0:	cmp	r0, #9
   12cd4:	beq	12d20 <__assert_fail@plt+0x193c>
   12cd8:	ldr	r3, [r6]
   12cdc:	blx	r3
   12ce0:	ldrb	r3, [r7, #112]	; 0x70
   12ce4:	cmp	r3, #0
   12ce8:	beq	12d08 <__assert_fail@plt+0x1924>
   12cec:	ldrb	r3, [r7, #60]	; 0x3c
   12cf0:	cmp	r3, #0
   12cf4:	bne	12d08 <__assert_fail@plt+0x1924>
   12cf8:	ldr	r3, [r7, #92]	; 0x5c
   12cfc:	ldr	r2, [r7, #108]	; 0x6c
   12d00:	add	r3, r3, r2
   12d04:	str	r3, [r7, #92]	; 0x5c
   12d08:	add	sp, sp, #8
   12d0c:	ldrd	r4, [sp]
   12d10:	ldrd	r6, [sp, #8]
   12d14:	ldr	r8, [sp, #16]
   12d18:	add	sp, sp, #20
   12d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d20:	ldr	r3, [r8, #36]	; 0x24
   12d24:	ldr	r4, [r7, #108]	; 0x6c
   12d28:	sub	r4, r4, r3
   12d2c:	cmp	r4, #0
   12d30:	sub	r4, r4, #1
   12d34:	ble	12ce0 <__assert_fail@plt+0x18fc>
   12d38:	sub	r4, r4, #1
   12d3c:	mov	r0, #32
   12d40:	ldr	r3, [r6]
   12d44:	blx	r3
   12d48:	cmn	r4, #1
   12d4c:	bne	12d38 <__assert_fail@plt+0x1954>
   12d50:	b	12ce0 <__assert_fail@plt+0x18fc>
   12d54:	ldr	r3, [r6]
   12d58:	blx	r3
   12d5c:	ldrb	r3, [r8, #40]	; 0x28
   12d60:	cmp	r3, #9
   12d64:	bne	12ce0 <__assert_fail@plt+0x18fc>
   12d68:	ldr	r3, [r8, #20]
   12d6c:	ldr	r2, [r7, #72]	; 0x48
   12d70:	sdiv	r2, r2, r3
   12d74:	mla	r3, r3, r2, r3
   12d78:	str	r3, [r7, #72]	; 0x48
   12d7c:	b	12ce0 <__assert_fail@plt+0x18fc>
   12d80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12d84:	mov	r5, r1
   12d88:	movw	r1, #260	; 0x104
   12d8c:	movt	r1, #2
   12d90:	strd	r6, [sp, #8]
   12d94:	str	r8, [sp, #16]
   12d98:	mov	r8, r0
   12d9c:	str	lr, [sp, #20]
   12da0:	bl	110c0 <strcmp@plt>
   12da4:	cmp	r0, #0
   12da8:	bne	12e28 <__assert_fail@plt+0x1a44>
   12dac:	movw	r1, #284	; 0x11c
   12db0:	movt	r1, #2
   12db4:	mov	r2, #5
   12db8:	movw	r4, #8688	; 0x21f0
   12dbc:	movt	r4, #3
   12dc0:	bl	11168 <dcgettext@plt>
   12dc4:	movw	r3, #8672	; 0x21e0
   12dc8:	movt	r3, #3
   12dcc:	str	r0, [r5, #4]
   12dd0:	ldr	r6, [r3]
   12dd4:	mov	r3, #1
   12dd8:	strb	r3, [r4, #113]	; 0x71
   12ddc:	cmp	r6, #0
   12de0:	str	r6, [r5]
   12de4:	beq	12e54 <__assert_fail@plt+0x1a70>
   12de8:	mov	r0, r6
   12dec:	mov	r1, #2
   12df0:	bl	158c8 <__assert_fail@plt+0x44e4>
   12df4:	ldr	r3, [r4, #116]	; 0x74
   12df8:	mov	r7, #1
   12dfc:	mov	r2, #0
   12e00:	str	r2, [r5, #8]
   12e04:	strb	r2, [r5, #37]	; 0x25
   12e08:	add	r3, r3, r7
   12e0c:	str	r3, [r4, #116]	; 0x74
   12e10:	mov	r0, r7
   12e14:	ldrd	r4, [sp]
   12e18:	ldrd	r6, [sp, #8]
   12e1c:	ldr	r8, [sp, #16]
   12e20:	add	sp, sp, #20
   12e24:	pop	{pc}		; (ldr pc, [sp], #4)
   12e28:	movw	r1, #5628	; 0x15fc
   12e2c:	movt	r1, #2
   12e30:	str	r8, [r5, #4]
   12e34:	mov	r0, r8
   12e38:	movw	r4, #8688	; 0x21f0
   12e3c:	movt	r4, #3
   12e40:	bl	15a2c <__assert_fail@plt+0x4648>
   12e44:	mov	r6, r0
   12e48:	str	r0, [r5]
   12e4c:	cmp	r6, #0
   12e50:	bne	12de8 <__assert_fail@plt+0x1a04>
   12e54:	ldrb	r7, [r4, #115]	; 0x73
   12e58:	mov	r3, #1
   12e5c:	strb	r3, [r4, #114]	; 0x72
   12e60:	cmp	r7, #0
   12e64:	movne	r7, r6
   12e68:	bne	12e10 <__assert_fail@plt+0x1a2c>
   12e6c:	bl	112c4 <__errno_location@plt>
   12e70:	ldr	r4, [r0]
   12e74:	mov	r2, r8
   12e78:	mov	r1, #3
   12e7c:	mov	r0, r6
   12e80:	bl	1b2a0 <__assert_fail@plt+0x9ebc>
   12e84:	mov	r3, r0
   12e88:	movw	r2, #5800	; 0x16a8
   12e8c:	movt	r2, #2
   12e90:	mov	r0, r6
   12e94:	mov	r1, r4
   12e98:	bl	11204 <error@plt>
   12e9c:	b	12e10 <__assert_fail@plt+0x1a2c>
   12ea0:	strd	r4, [sp, #-16]!
   12ea4:	mov	r5, r0
   12ea8:	ldr	r4, [r0]
   12eac:	str	r6, [sp, #8]
   12eb0:	str	lr, [sp, #12]
   12eb4:	b	12ed8 <__assert_fail@plt+0x1af4>
   12eb8:	str	r1, [r4, #4]
   12ebc:	ldrb	r0, [r3]
   12ec0:	cmp	r0, #10
   12ec4:	beq	12efc <__assert_fail@plt+0x1b18>
   12ec8:	cmp	r0, #12
   12ecc:	beq	12f0c <__assert_fail@plt+0x1b28>
   12ed0:	cmn	r0, #1
   12ed4:	beq	12fb8 <__assert_fail@plt+0x1bd4>
   12ed8:	ldr	r3, [r4, #4]
   12edc:	ldr	r2, [r4, #8]
   12ee0:	add	r1, r3, #1
   12ee4:	cmp	r3, r2
   12ee8:	bcc	12eb8 <__assert_fail@plt+0x1ad4>
   12eec:	mov	r0, r4
   12ef0:	bl	1133c <__uflow@plt>
   12ef4:	cmp	r0, #10
   12ef8:	bne	12ec8 <__assert_fail@plt+0x1ae4>
   12efc:	ldrd	r4, [sp]
   12f00:	ldr	r6, [sp, #8]
   12f04:	add	sp, sp, #12
   12f08:	pop	{pc}		; (ldr pc, [sp], #4)
   12f0c:	ldr	r3, [r4, #4]
   12f10:	ldr	r2, [r4, #8]
   12f14:	cmp	r3, r2
   12f18:	bcs	12fdc <__assert_fail@plt+0x1bf8>
   12f1c:	add	r2, r3, #1
   12f20:	str	r2, [r4, #4]
   12f24:	ldrb	r0, [r3]
   12f28:	cmp	r0, #10
   12f2c:	bne	12fd0 <__assert_fail@plt+0x1bec>
   12f30:	movw	r1, #8688	; 0x21f0
   12f34:	movt	r1, #3
   12f38:	ldrb	r3, [r1, #120]	; 0x78
   12f3c:	cmp	r3, #0
   12f40:	movne	r3, #1
   12f44:	strbne	r3, [r1, #121]	; 0x79
   12f48:	ldrb	r3, [r1, #60]	; 0x3c
   12f4c:	cmp	r3, #0
   12f50:	movne	r3, #2
   12f54:	strne	r3, [r5, #8]
   12f58:	bne	12f94 <__assert_fail@plt+0x1bb0>
   12f5c:	movw	r0, #8512	; 0x2140
   12f60:	movt	r0, #3
   12f64:	ldr	r2, [r1, #64]	; 0x40
   12f68:	ldr	r3, [r0, #8]
   12f6c:	cmp	r3, #0
   12f70:	beq	12f94 <__assert_fail@plt+0x1bb0>
   12f74:	ldrb	r0, [r0, #41]	; 0x29
   12f78:	cmp	r0, #0
   12f7c:	movne	r0, #1
   12f80:	moveq	r0, #2
   12f84:	subs	r3, r3, #1
   12f88:	add	r2, r2, #40	; 0x28
   12f8c:	str	r0, [r2, #-32]	; 0xffffffe0
   12f90:	bne	12f84 <__assert_fail@plt+0x1ba0>
   12f94:	ldr	r3, [r1, #68]	; 0x44
   12f98:	mov	r2, #0
   12f9c:	str	r2, [r5, #28]
   12fa0:	ldrd	r4, [sp]
   12fa4:	sub	r3, r3, #1
   12fa8:	ldr	r6, [sp, #8]
   12fac:	add	sp, sp, #12
   12fb0:	str	r3, [r1, #68]	; 0x44
   12fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb8:	mov	r0, r5
   12fbc:	ldrd	r4, [sp]
   12fc0:	ldr	r6, [sp, #8]
   12fc4:	ldr	lr, [sp, #12]
   12fc8:	add	sp, sp, #16
   12fcc:	b	12634 <__assert_fail@plt+0x1250>
   12fd0:	mov	r1, r4
   12fd4:	bl	112b8 <ungetc@plt>
   12fd8:	b	12f30 <__assert_fail@plt+0x1b4c>
   12fdc:	mov	r0, r4
   12fe0:	bl	1133c <__uflow@plt>
   12fe4:	b	12f28 <__assert_fail@plt+0x1b44>
   12fe8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12fec:	movw	r4, #8688	; 0x21f0
   12ff0:	movt	r4, #3
   12ff4:	ldrb	r3, [r4, #99]	; 0x63
   12ff8:	mov	r2, #0
   12ffc:	strd	r6, [sp, #8]
   13000:	ldr	r6, [r4, #124]	; 0x7c
   13004:	strd	r8, [sp, #16]
   13008:	str	lr, [sp, #24]
   1300c:	sub	sp, sp, #316	; 0x13c
   13010:	cmp	r3, r2
   13014:	str	r2, [r4, #72]	; 0x48
   13018:	strne	r6, [r4, #76]	; 0x4c
   1301c:	bne	1306c <__assert_fail@plt+0x1c88>
   13020:	cmp	r6, r2
   13024:	ble	13068 <__assert_fail@plt+0x1c84>
   13028:	movw	r7, #8676	; 0x21e4
   1302c:	movt	r7, #3
   13030:	add	r9, r6, #1
   13034:	mov	r5, #1
   13038:	mov	r8, #32
   1303c:	ldr	r0, [r7]
   13040:	ldr	r3, [r0, #20]
   13044:	ldr	r2, [r0, #24]
   13048:	cmp	r3, r2
   1304c:	addcc	r2, r3, #1
   13050:	strcc	r2, [r0, #20]
   13054:	strbcc	r8, [r3]
   13058:	bcs	13138 <__assert_fail@plt+0x1d54>
   1305c:	add	r5, r5, #1
   13060:	cmp	r9, r5
   13064:	bne	1303c <__assert_fail@plt+0x1c58>
   13068:	str	r6, [r4, #72]	; 0x48
   1306c:	bl	12744 <__assert_fail@plt+0x1360>
   13070:	ldrd	r8, [r4, #128]	; 0x80
   13074:	orrs	r3, r8, r9
   13078:	beq	13144 <__assert_fail@plt+0x1d60>
   1307c:	mov	r2, #5
   13080:	movw	r1, #324	; 0x144
   13084:	movt	r1, #2
   13088:	mov	r0, #0
   1308c:	bl	11168 <dcgettext@plt>
   13090:	add	r6, sp, #36	; 0x24
   13094:	mov	r3, r0
   13098:	strd	r8, [sp]
   1309c:	mov	r2, #276	; 0x114
   130a0:	mov	r0, r6
   130a4:	mov	r1, #1
   130a8:	bl	112d0 <__sprintf_chk@plt>
   130ac:	ldr	r5, [r4, #56]	; 0x38
   130b0:	mov	r0, r6
   130b4:	mov	r1, #0
   130b8:	bl	15ff0 <__assert_fail@plt+0x4c0c>
   130bc:	ldr	lr, [r4, #44]	; 0x2c
   130c0:	movw	r2, #360	; 0x168
   130c4:	movt	r2, #2
   130c8:	movw	r3, #356	; 0x164
   130cc:	movt	r3, #2
   130d0:	movw	r1, #336	; 0x150
   130d4:	movt	r1, #2
   130d8:	sub	ip, r5, r0
   130dc:	mov	r0, #1
   130e0:	ldr	r5, [r4, #52]	; 0x34
   130e4:	bic	ip, ip, ip, asr #31
   130e8:	str	lr, [sp]
   130ec:	asr	lr, ip, r0
   130f0:	str	r2, [sp, #8]
   130f4:	str	r2, [sp, #20]
   130f8:	sub	ip, ip, lr
   130fc:	ldr	r2, [r4, #124]	; 0x7c
   13100:	str	lr, [sp, #4]
   13104:	str	r5, [sp, #12]
   13108:	str	ip, [sp, #16]
   1310c:	str	r6, [sp, #24]
   13110:	bl	112f4 <__printf_chk@plt>
   13114:	mov	r3, #0
   13118:	str	r3, [r4, #72]	; 0x48
   1311c:	strb	r3, [r4, #136]	; 0x88
   13120:	add	sp, sp, #316	; 0x13c
   13124:	ldrd	r4, [sp]
   13128:	ldrd	r6, [sp, #8]
   1312c:	ldrd	r8, [sp, #16]
   13130:	add	sp, sp, #24
   13134:	pop	{pc}		; (ldr pc, [sp], #4)
   13138:	mov	r1, #32
   1313c:	bl	11348 <__overflow@plt>
   13140:	b	1305c <__assert_fail@plt+0x1c78>
   13144:	mov	r2, #5
   13148:	movw	r1, #300	; 0x12c
   1314c:	movt	r1, #2
   13150:	mov	r0, #0
   13154:	bl	11168 <dcgettext@plt>
   13158:	mov	r2, r0
   1315c:	mov	r1, #0
   13160:	mov	r0, #1
   13164:	bl	11204 <error@plt>
   13168:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1316c:	ldr	r4, [r0]
   13170:	ldr	r3, [r4, #4]
   13174:	ldr	r2, [r4, #8]
   13178:	strd	r6, [sp, #8]
   1317c:	mov	r7, r1
   13180:	strd	r8, [sp, #16]
   13184:	mov	r8, r0
   13188:	str	sl, [sp, #24]
   1318c:	str	lr, [sp, #28]
   13190:	cmp	r3, r2
   13194:	bcs	133d0 <__assert_fail@plt+0x1fec>
   13198:	add	r2, r3, #1
   1319c:	str	r2, [r4, #4]
   131a0:	ldrb	r0, [r3]
   131a4:	cmp	r0, #12
   131a8:	movne	r3, #0
   131ac:	movne	r6, r3
   131b0:	strbne	r3, [r8, #37]	; 0x25
   131b4:	beq	13274 <__assert_fail@plt+0x1e90>
   131b8:	movw	r5, #8688	; 0x21f0
   131bc:	movt	r5, #3
   131c0:	ldrb	r3, [r5, #137]	; 0x89
   131c4:	cmp	r3, #0
   131c8:	movne	r3, #1
   131cc:	strbne	r3, [r8, #37]	; 0x25
   131d0:	b	131dc <__assert_fail@plt+0x1df8>
   131d4:	str	r1, [r4, #4]
   131d8:	ldrb	r0, [r3]
   131dc:	cmp	r0, #10
   131e0:	beq	13218 <__assert_fail@plt+0x1e34>
   131e4:	cmp	r0, #12
   131e8:	beq	132d0 <__assert_fail@plt+0x1eec>
   131ec:	cmn	r0, #1
   131f0:	beq	132bc <__assert_fail@plt+0x1ed8>
   131f4:	ldr	r3, [r4, #4]
   131f8:	ldr	r2, [r4, #8]
   131fc:	add	r1, r3, #1
   13200:	cmp	r3, r2
   13204:	bcc	131d4 <__assert_fail@plt+0x1df0>
   13208:	mov	r0, r4
   1320c:	bl	1133c <__uflow@plt>
   13210:	cmp	r0, #10
   13214:	bne	131e4 <__assert_fail@plt+0x1e00>
   13218:	movw	r9, #8512	; 0x2140
   1321c:	movt	r9, #3
   13220:	ldrb	r3, [r9, #42]	; 0x2a
   13224:	cmp	r3, #0
   13228:	beq	1325c <__assert_fail@plt+0x1e78>
   1322c:	ldrb	r3, [r5, #60]	; 0x3c
   13230:	eor	r3, r3, #1
   13234:	cmp	r7, #1
   13238:	movne	r7, r3
   1323c:	orreq	r7, r3, #1
   13240:	cmp	r7, #0
   13244:	beq	1325c <__assert_fail@plt+0x1e78>
   13248:	cmp	r6, #0
   1324c:	bne	1325c <__assert_fail@plt+0x1e78>
   13250:	ldr	r3, [r9, #44]	; 0x2c
   13254:	add	r3, r3, #1
   13258:	str	r3, [r9, #44]	; 0x2c
   1325c:	ldrd	r4, [sp]
   13260:	ldrd	r6, [sp, #8]
   13264:	ldrd	r8, [sp, #16]
   13268:	ldr	sl, [sp, #24]
   1326c:	add	sp, sp, #28
   13270:	pop	{pc}		; (ldr pc, [sp], #4)
   13274:	ldrb	r3, [r8, #37]	; 0x25
   13278:	cmp	r3, #0
   1327c:	beq	13398 <__assert_fail@plt+0x1fb4>
   13280:	ldr	r3, [r4, #4]
   13284:	ldr	r2, [r4, #8]
   13288:	cmp	r3, r2
   1328c:	bcs	1341c <__assert_fail@plt+0x2038>
   13290:	add	r2, r3, #1
   13294:	str	r2, [r4, #4]
   13298:	ldrb	r0, [r3]
   1329c:	cmp	r0, #10
   132a0:	beq	133f0 <__assert_fail@plt+0x200c>
   132a4:	mov	r3, #0
   132a8:	sub	r6, r0, #12
   132ac:	clz	r6, r6
   132b0:	lsr	r6, r6, #5
   132b4:	strb	r3, [r8, #37]	; 0x25
   132b8:	b	131b8 <__assert_fail@plt+0x1dd4>
   132bc:	mov	r0, r8
   132c0:	movw	r9, #8512	; 0x2140
   132c4:	movt	r9, #3
   132c8:	bl	12634 <__assert_fail@plt+0x1250>
   132cc:	b	13220 <__assert_fail@plt+0x1e3c>
   132d0:	ldrb	r3, [r5, #137]	; 0x89
   132d4:	cmp	r3, #0
   132d8:	movweq	r9, #8512	; 0x2140
   132dc:	movteq	r9, #3
   132e0:	beq	13318 <__assert_fail@plt+0x1f34>
   132e4:	ldrb	r1, [r5, #60]	; 0x3c
   132e8:	cmp	r1, #0
   132ec:	bne	133dc <__assert_fail@plt+0x1ff8>
   132f0:	movw	r9, #8512	; 0x2140
   132f4:	movt	r9, #3
   132f8:	ldr	r2, [r5, #64]	; 0x40
   132fc:	ldr	r3, [r9, #8]
   13300:	cmp	r3, #0
   13304:	beq	13318 <__assert_fail@plt+0x1f34>
   13308:	subs	r3, r3, #1
   1330c:	add	r2, r2, #40	; 0x28
   13310:	strb	r1, [r2, #-3]
   13314:	bne	13308 <__assert_fail@plt+0x1f24>
   13318:	ldr	r3, [r4, #4]
   1331c:	ldr	r2, [r4, #8]
   13320:	cmp	r3, r2
   13324:	bcs	13410 <__assert_fail@plt+0x202c>
   13328:	add	r2, r3, #1
   1332c:	str	r2, [r4, #4]
   13330:	ldrb	r0, [r3]
   13334:	cmp	r0, #10
   13338:	bne	133c4 <__assert_fail@plt+0x1fe0>
   1333c:	ldrb	r3, [r5, #60]	; 0x3c
   13340:	cmp	r3, #0
   13344:	movne	r3, #2
   13348:	strne	r3, [r8, #8]
   1334c:	bne	13380 <__assert_fail@plt+0x1f9c>
   13350:	ldr	r3, [r9, #8]
   13354:	ldr	r2, [r5, #64]	; 0x40
   13358:	cmp	r3, #0
   1335c:	beq	13380 <__assert_fail@plt+0x1f9c>
   13360:	ldrb	r1, [r9, #41]	; 0x29
   13364:	cmp	r1, #0
   13368:	movne	r1, #1
   1336c:	moveq	r1, #2
   13370:	subs	r3, r3, #1
   13374:	add	r2, r2, #40	; 0x28
   13378:	str	r1, [r2, #-32]	; 0xffffffe0
   1337c:	bne	13370 <__assert_fail@plt+0x1f8c>
   13380:	ldr	r3, [r5, #68]	; 0x44
   13384:	mov	r2, #0
   13388:	str	r2, [r8, #28]
   1338c:	sub	r3, r3, #1
   13390:	str	r3, [r5, #68]	; 0x44
   13394:	b	13220 <__assert_fail@plt+0x1e3c>
   13398:	movw	r5, #8688	; 0x21f0
   1339c:	movt	r5, #3
   133a0:	ldrb	r6, [r5, #137]	; 0x89
   133a4:	cmp	r6, #0
   133a8:	movne	r3, #1
   133ac:	strbne	r3, [r8, #37]	; 0x25
   133b0:	bne	132d0 <__assert_fail@plt+0x1eec>
   133b4:	movw	r9, #8512	; 0x2140
   133b8:	movt	r9, #3
   133bc:	mov	r6, #1
   133c0:	b	13318 <__assert_fail@plt+0x1f34>
   133c4:	mov	r1, r4
   133c8:	bl	112b8 <ungetc@plt>
   133cc:	b	1333c <__assert_fail@plt+0x1f58>
   133d0:	mov	r0, r4
   133d4:	bl	1133c <__uflow@plt>
   133d8:	b	131a4 <__assert_fail@plt+0x1dc0>
   133dc:	mov	r3, #0
   133e0:	movw	r9, #8512	; 0x2140
   133e4:	movt	r9, #3
   133e8:	strb	r3, [r8, #37]	; 0x25
   133ec:	b	13318 <__assert_fail@plt+0x1f34>
   133f0:	ldr	r3, [r4, #4]
   133f4:	ldr	r2, [r4, #8]
   133f8:	cmp	r3, r2
   133fc:	bcs	13428 <__assert_fail@plt+0x2044>
   13400:	add	r2, r3, #1
   13404:	str	r2, [r4, #4]
   13408:	ldrb	r0, [r3]
   1340c:	b	132a4 <__assert_fail@plt+0x1ec0>
   13410:	mov	r0, r4
   13414:	bl	1133c <__uflow@plt>
   13418:	b	13334 <__assert_fail@plt+0x1f50>
   1341c:	mov	r0, r4
   13420:	bl	1133c <__uflow@plt>
   13424:	b	1329c <__assert_fail@plt+0x1eb8>
   13428:	mov	r0, r4
   1342c:	bl	1133c <__uflow@plt>
   13430:	b	132a4 <__assert_fail@plt+0x1ec0>
   13434:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13438:	movw	r4, #8688	; 0x21f0
   1343c:	movt	r4, #3
   13440:	ldr	r3, [r4, #140]	; 0x8c
   13444:	mov	r2, #1
   13448:	strd	r8, [sp, #16]
   1344c:	mov	r9, r0
   13450:	ldr	r8, [r0, #20]
   13454:	strd	r6, [sp, #8]
   13458:	strd	sl, [sp, #24]
   1345c:	str	lr, [sp, #32]
   13460:	sub	sp, sp, #12
   13464:	strb	r2, [r4, #144]	; 0x90
   13468:	add	r1, r8, r2
   1346c:	ldrb	r2, [r4, #136]	; 0x88
   13470:	str	r1, [r0, #20]
   13474:	add	r1, r3, r8, lsl #2
   13478:	ldr	r5, [r3, r8, lsl #2]
   1347c:	ldr	r6, [r4, #4]
   13480:	cmp	r2, #0
   13484:	ldr	r3, [r1, #4]
   13488:	add	r5, r6, r5
   1348c:	add	r6, r6, r3
   13490:	bne	13618 <__assert_fail@plt+0x2234>
   13494:	ldr	r3, [r9, #8]
   13498:	cmp	r3, #1
   1349c:	beq	135c4 <__assert_fail@plt+0x21e0>
   134a0:	ldr	r3, [r4, #84]	; 0x54
   134a4:	ldr	sl, [r4, #148]	; 0x94
   134a8:	cmp	r3, sl
   134ac:	blt	13628 <__assert_fail@plt+0x2244>
   134b0:	ldrb	r3, [r4, #152]	; 0x98
   134b4:	cmp	r3, #0
   134b8:	bne	13620 <__assert_fail@plt+0x223c>
   134bc:	cmp	r5, r6
   134c0:	beq	13550 <__assert_fail@plt+0x216c>
   134c4:	movw	r7, #8676	; 0x21e4
   134c8:	movt	r7, #3
   134cc:	ldrb	r3, [r4, #99]	; 0x63
   134d0:	ldrb	sl, [r5], #1
   134d4:	cmp	r3, #0
   134d8:	beq	13528 <__assert_fail@plt+0x2144>
   134dc:	ldr	r3, [r4, #76]	; 0x4c
   134e0:	cmp	sl, #32
   134e4:	addeq	r3, r3, #1
   134e8:	streq	r3, [r4, #76]	; 0x4c
   134ec:	beq	13548 <__assert_fail@plt+0x2164>
   134f0:	cmp	r3, #0
   134f4:	ble	134fc <__assert_fail@plt+0x2118>
   134f8:	bl	12744 <__assert_fail@plt+0x1360>
   134fc:	bl	1127c <__ctype_b_loc@plt>
   13500:	ldr	r2, [r0]
   13504:	lsl	r3, sl, #1
   13508:	ldrh	r3, [r2, r3]
   1350c:	tst	r3, #16384	; 0x4000
   13510:	bne	135a8 <__assert_fail@plt+0x21c4>
   13514:	cmp	sl, #8
   13518:	bne	13528 <__assert_fail@plt+0x2144>
   1351c:	ldr	r3, [r4, #72]	; 0x48
   13520:	sub	r3, r3, #1
   13524:	str	r3, [r4, #72]	; 0x48
   13528:	ldr	r0, [r7]
   1352c:	ldr	r3, [r0, #20]
   13530:	ldr	r2, [r0, #24]
   13534:	cmp	r3, r2
   13538:	addcc	r2, r3, #1
   1353c:	strcc	r2, [r0, #20]
   13540:	strbcc	sl, [r3]
   13544:	bcs	135b8 <__assert_fail@plt+0x21d4>
   13548:	cmp	r6, r5
   1354c:	bne	134cc <__assert_fail@plt+0x20e8>
   13550:	ldr	r3, [r4, #76]	; 0x4c
   13554:	cmp	r3, #0
   13558:	bne	13588 <__assert_fail@plt+0x21a4>
   1355c:	ldr	r3, [r9, #32]
   13560:	ldr	r1, [r4, #156]	; 0x9c
   13564:	ldr	r2, [r4, #84]	; 0x54
   13568:	ldr	ip, [r1, r8, lsl #2]
   1356c:	ldr	r1, [r4, #124]	; 0x7c
   13570:	sub	r0, r3, r2
   13574:	add	r3, r3, ip
   13578:	cmp	r0, r1
   1357c:	str	r3, [r4, #72]	; 0x48
   13580:	subeq	r3, r3, r2
   13584:	streq	r3, [r4, #72]	; 0x48
   13588:	mov	r0, #1
   1358c:	add	sp, sp, #12
   13590:	ldrd	r4, [sp]
   13594:	ldrd	r6, [sp, #8]
   13598:	ldrd	r8, [sp, #16]
   1359c:	ldrd	sl, [sp, #24]
   135a0:	add	sp, sp, #32
   135a4:	pop	{pc}		; (ldr pc, [sp], #4)
   135a8:	ldr	r3, [r4, #72]	; 0x48
   135ac:	add	r3, r3, #1
   135b0:	str	r3, [r4, #72]	; 0x48
   135b4:	b	13528 <__assert_fail@plt+0x2144>
   135b8:	mov	r1, sl
   135bc:	bl	11348 <__overflow@plt>
   135c0:	b	13548 <__assert_fail@plt+0x2164>
   135c4:	movw	ip, #8512	; 0x2140
   135c8:	movt	ip, #3
   135cc:	ldr	lr, [r4, #64]	; 0x40
   135d0:	ldr	r1, [ip, #8]
   135d4:	cmp	r1, #0
   135d8:	addgt	r1, r1, #1
   135dc:	movgt	r2, lr
   135e0:	movgt	r0, #2
   135e4:	ble	135fc <__assert_fail@plt+0x2218>
   135e8:	add	r3, r3, #1
   135ec:	add	r2, r2, #40	; 0x28
   135f0:	str	r0, [r2, #-32]	; 0xffffffe0
   135f4:	cmp	r3, r1
   135f8:	bne	135e8 <__assert_fail@plt+0x2204>
   135fc:	ldr	r3, [lr, #28]
   13600:	cmp	r3, #0
   13604:	bgt	134a0 <__assert_fail@plt+0x20bc>
   13608:	ldrb	r3, [ip, #48]	; 0x30
   1360c:	cmp	r3, #0
   13610:	strbeq	r3, [r4, #144]	; 0x90
   13614:	b	13588 <__assert_fail@plt+0x21a4>
   13618:	bl	12fe8 <__assert_fail@plt+0x1c04>
   1361c:	b	13494 <__assert_fail@plt+0x20b0>
   13620:	bl	12848 <__assert_fail@plt+0x1464>
   13624:	b	134bc <__assert_fail@plt+0x20d8>
   13628:	ldrb	r2, [r4, #99]	; 0x63
   1362c:	sub	sl, sl, r3
   13630:	ldr	r7, [r4, #72]	; 0x48
   13634:	cmp	r2, #0
   13638:	subne	r7, sl, r7
   1363c:	strne	r7, [r4, #76]	; 0x4c
   13640:	bne	13690 <__assert_fail@plt+0x22ac>
   13644:	add	r7, r7, #1
   13648:	cmp	sl, r7
   1364c:	movwge	fp, #8676	; 0x21e4
   13650:	addge	r3, sl, #1
   13654:	movtge	fp, #3
   13658:	movge	r2, #32
   1365c:	blt	1368c <__assert_fail@plt+0x22a8>
   13660:	ldr	r0, [fp]
   13664:	ldr	r1, [r0, #20]
   13668:	ldr	ip, [r0, #24]
   1366c:	add	lr, r1, #1
   13670:	cmp	r1, ip
   13674:	strcc	lr, [r0, #20]
   13678:	strbcc	r2, [r1]
   1367c:	bcs	1369c <__assert_fail@plt+0x22b8>
   13680:	add	r7, r7, #1
   13684:	cmp	r3, r7
   13688:	bne	13660 <__assert_fail@plt+0x227c>
   1368c:	str	sl, [r4, #72]	; 0x48
   13690:	mov	r3, #0
   13694:	str	r3, [r4, #148]	; 0x94
   13698:	b	134b0 <__assert_fail@plt+0x20cc>
   1369c:	mov	r1, #32
   136a0:	str	r3, [sp, #4]
   136a4:	bl	11348 <__overflow@plt>
   136a8:	mov	r2, #32
   136ac:	ldr	r3, [sp, #4]
   136b0:	b	13680 <__assert_fail@plt+0x229c>
   136b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   136b8:	mov	r5, r0
   136bc:	ldr	r0, [r0]
   136c0:	ldr	r3, [r0, #4]
   136c4:	ldr	r2, [r0, #8]
   136c8:	strd	r6, [sp, #8]
   136cc:	strd	r8, [sp, #16]
   136d0:	strd	sl, [sp, #24]
   136d4:	str	lr, [sp, #32]
   136d8:	sub	sp, sp, #20
   136dc:	cmp	r3, r2
   136e0:	bcs	13c68 <__assert_fail@plt+0x2884>
   136e4:	add	r2, r3, #1
   136e8:	str	r2, [r0, #4]
   136ec:	ldrb	r6, [r3]
   136f0:	movw	r4, #8688	; 0x21f0
   136f4:	movt	r4, #3
   136f8:	cmp	r6, #12
   136fc:	ldr	r8, [r4, #92]	; 0x5c
   13700:	beq	13950 <__assert_fail@plt+0x256c>
   13704:	mov	r3, #0
   13708:	cmp	r6, #10
   1370c:	strb	r3, [r5, #37]	; 0x25
   13710:	beq	13730 <__assert_fail@plt+0x234c>
   13714:	cmp	r6, #12
   13718:	beq	139a8 <__assert_fail@plt+0x25c4>
   1371c:	cmn	r6, #1
   13720:	beq	13850 <__assert_fail@plt+0x246c>
   13724:	uxtb	r0, r6
   13728:	bl	12970 <__assert_fail@plt+0x158c>
   1372c:	str	r0, [sp, #8]
   13730:	ldrb	r3, [r4, #112]	; 0x70
   13734:	cmp	r3, #0
   13738:	beq	13754 <__assert_fail@plt+0x2370>
   1373c:	ldr	r2, [r4, #92]	; 0x5c
   13740:	ldr	r3, [r4, #164]	; 0xa4
   13744:	cmp	r2, r3
   13748:	movgt	r0, #0
   1374c:	strgt	r8, [r4, #92]	; 0x5c
   13750:	bgt	1385c <__assert_fail@plt+0x2478>
   13754:	ldr	r2, [r5, #16]
   13758:	movw	r3, #8828	; 0x227c
   1375c:	movt	r3, #1
   13760:	cmp	r2, r3
   13764:	beq	13894 <__assert_fail@plt+0x24b0>
   13768:	ldrb	r3, [r4, #136]	; 0x88
   1376c:	mov	r2, #1
   13770:	strb	r2, [r4, #144]	; 0x90
   13774:	cmp	r3, #0
   13778:	beq	13790 <__assert_fail@plt+0x23ac>
   1377c:	movw	r3, #8512	; 0x2140
   13780:	movt	r3, #3
   13784:	ldrb	r3, [r3, #41]	; 0x29
   13788:	cmp	r3, #0
   1378c:	beq	13c80 <__assert_fail@plt+0x289c>
   13790:	ldrb	r3, [r4, #60]	; 0x3c
   13794:	cmp	r3, #0
   13798:	beq	13878 <__assert_fail@plt+0x2494>
   1379c:	ldrb	r3, [r4, #168]	; 0xa8
   137a0:	cmp	r3, #0
   137a4:	beq	13878 <__assert_fail@plt+0x2494>
   137a8:	mov	r2, #0
   137ac:	ldr	r9, [r4, #64]	; 0x40
   137b0:	ldr	r3, [r4, #80]	; 0x50
   137b4:	str	r2, [r4, #80]	; 0x50
   137b8:	cmp	r3, r2
   137bc:	ble	1382c <__assert_fail@plt+0x2448>
   137c0:	movw	r7, #8676	; 0x21e4
   137c4:	movt	r7, #3
   137c8:	str	r5, [sp, #12]
   137cc:	add	r3, r3, #1
   137d0:	mov	fp, #1
   137d4:	mov	r5, r7
   137d8:	str	r3, [sp, #4]
   137dc:	ldr	sl, [r9, #32]
   137e0:	ldr	r2, [r4, #84]	; 0x54
   137e4:	str	sl, [r4, #148]	; 0x94
   137e8:	cmp	sl, r2
   137ec:	bgt	13b58 <__assert_fail@plt+0x2774>
   137f0:	ldrb	r2, [r4, #152]	; 0x98
   137f4:	cmp	r2, #0
   137f8:	bne	13bcc <__assert_fail@plt+0x27e8>
   137fc:	ldrb	r2, [r9, #36]	; 0x24
   13800:	cmp	r2, #0
   13804:	bne	13b2c <__assert_fail@plt+0x2748>
   13808:	ldr	r2, [r4, #80]	; 0x50
   1380c:	add	fp, fp, #1
   13810:	add	r9, r9, #40	; 0x28
   13814:	ldr	r3, [sp, #4]
   13818:	add	r2, r2, #1
   1381c:	cmp	fp, r3
   13820:	str	r2, [r4, #80]	; 0x50
   13824:	bne	137dc <__assert_fail@plt+0x23f8>
   13828:	ldr	r5, [sp, #12]
   1382c:	ldrb	r3, [r4, #112]	; 0x70
   13830:	ldr	r9, [r5, #32]
   13834:	cmp	r3, #0
   13838:	str	r9, [r4, #148]	; 0x94
   1383c:	ldrne	r3, [r4, #164]	; 0xa4
   13840:	mov	r2, #0
   13844:	str	r3, [r4, #76]	; 0x4c
   13848:	strb	r2, [r4, #168]	; 0xa8
   1384c:	b	1387c <__assert_fail@plt+0x2498>
   13850:	mov	r0, r5
   13854:	bl	12634 <__assert_fail@plt+0x1250>
   13858:	mov	r0, #1
   1385c:	add	sp, sp, #20
   13860:	ldrd	r4, [sp]
   13864:	ldrd	r6, [sp, #8]
   13868:	ldrd	r8, [sp, #16]
   1386c:	ldrd	sl, [sp, #24]
   13870:	add	sp, sp, #32
   13874:	pop	{pc}		; (ldr pc, [sp], #4)
   13878:	ldr	r9, [r4, #148]	; 0x94
   1387c:	ldr	r3, [r4, #84]	; 0x54
   13880:	cmp	r3, r9
   13884:	blt	13a8c <__assert_fail@plt+0x26a8>
   13888:	ldrb	r3, [r4, #152]	; 0x98
   1388c:	cmp	r3, #0
   13890:	bne	13b00 <__assert_fail@plt+0x271c>
   13894:	ldrb	r3, [r5, #36]	; 0x24
   13898:	cmp	r3, #0
   1389c:	bne	13bd4 <__assert_fail@plt+0x27f0>
   138a0:	mov	r3, #0
   138a4:	cmp	r6, #10
   138a8:	strb	r3, [r4, #169]	; 0xa9
   138ac:	beq	13b24 <__assert_fail@plt+0x2740>
   138b0:	ldr	r3, [sp, #8]
   138b4:	ldr	r6, [r4, #88]	; 0x58
   138b8:	cmp	r3, #0
   138bc:	beq	138d8 <__assert_fail@plt+0x24f4>
   138c0:	add	r7, r6, r3
   138c4:	ldrb	r0, [r6], #1
   138c8:	ldr	r3, [r5, #16]
   138cc:	blx	r3
   138d0:	cmp	r6, r7
   138d4:	bne	138c4 <__assert_fail@plt+0x24e0>
   138d8:	ldr	r0, [r5]
   138dc:	ldr	r3, [r0, #4]
   138e0:	ldr	r2, [r0, #8]
   138e4:	cmp	r3, r2
   138e8:	bcs	13c88 <__assert_fail@plt+0x28a4>
   138ec:	add	r2, r3, #1
   138f0:	str	r2, [r0, #4]
   138f4:	ldrb	r0, [r3]
   138f8:	cmp	r0, #10
   138fc:	beq	13b24 <__assert_fail@plt+0x2740>
   13900:	cmp	r0, #12
   13904:	beq	13be0 <__assert_fail@plt+0x27fc>
   13908:	cmn	r0, #1
   1390c:	beq	13850 <__assert_fail@plt+0x246c>
   13910:	uxtb	r0, r0
   13914:	ldr	r6, [r4, #92]	; 0x5c
   13918:	bl	12970 <__assert_fail@plt+0x158c>
   1391c:	ldrb	r3, [r4, #112]	; 0x70
   13920:	cmp	r3, #0
   13924:	bne	13b08 <__assert_fail@plt+0x2724>
   13928:	cmp	r0, #0
   1392c:	ldr	r6, [r4, #88]	; 0x58
   13930:	beq	138d8 <__assert_fail@plt+0x24f4>
   13934:	add	r7, r6, r0
   13938:	ldrb	r0, [r6], #1
   1393c:	ldr	r3, [r5, #16]
   13940:	blx	r3
   13944:	cmp	r6, r7
   13948:	bne	13938 <__assert_fail@plt+0x2554>
   1394c:	b	138d8 <__assert_fail@plt+0x24f4>
   13950:	ldrb	r3, [r5, #37]	; 0x25
   13954:	ldr	r0, [r5]
   13958:	cmp	r3, #0
   1395c:	ldr	r3, [r0, #4]
   13960:	ldr	r2, [r0, #8]
   13964:	beq	139b4 <__assert_fail@plt+0x25d0>
   13968:	cmp	r3, r2
   1396c:	bcs	13ca8 <__assert_fail@plt+0x28c4>
   13970:	add	r2, r3, #1
   13974:	str	r2, [r0, #4]
   13978:	ldrb	r6, [r3]
   1397c:	cmp	r6, #10
   13980:	bne	13704 <__assert_fail@plt+0x2320>
   13984:	ldr	r0, [r5]
   13988:	ldr	r3, [r0, #4]
   1398c:	ldr	r2, [r0, #8]
   13990:	cmp	r3, r2
   13994:	bcs	13cbc <__assert_fail@plt+0x28d8>
   13998:	add	r2, r3, #1
   1399c:	str	r2, [r0, #4]
   139a0:	ldrb	r6, [r3]
   139a4:	b	13704 <__assert_fail@plt+0x2320>
   139a8:	ldr	r0, [r5]
   139ac:	ldr	r3, [r0, #4]
   139b0:	ldr	r2, [r0, #8]
   139b4:	cmp	r3, r2
   139b8:	bcs	13ca0 <__assert_fail@plt+0x28bc>
   139bc:	add	r2, r3, #1
   139c0:	str	r2, [r0, #4]
   139c4:	ldrb	r0, [r3]
   139c8:	cmp	r0, #10
   139cc:	bne	13a80 <__assert_fail@plt+0x269c>
   139d0:	ldrb	r2, [r4, #136]	; 0x88
   139d4:	mov	r3, #1
   139d8:	strb	r3, [r4, #160]	; 0xa0
   139dc:	cmp	r2, #0
   139e0:	bne	13a60 <__assert_fail@plt+0x267c>
   139e4:	ldrb	r3, [r4, #120]	; 0x78
   139e8:	cmp	r3, #0
   139ec:	movne	r3, #1
   139f0:	strbne	r3, [r4, #121]	; 0x79
   139f4:	ldrb	r3, [r4, #60]	; 0x3c
   139f8:	cmp	r3, #0
   139fc:	bne	13a3c <__assert_fail@plt+0x2658>
   13a00:	movw	r1, #8512	; 0x2140
   13a04:	movt	r1, #3
   13a08:	ldr	r2, [r4, #64]	; 0x40
   13a0c:	ldr	r3, [r1, #8]
   13a10:	cmp	r3, #0
   13a14:	beq	13a44 <__assert_fail@plt+0x2660>
   13a18:	ldrb	r1, [r1, #41]	; 0x29
   13a1c:	cmp	r1, #0
   13a20:	movne	r1, #1
   13a24:	moveq	r1, #2
   13a28:	subs	r3, r3, #1
   13a2c:	add	r2, r2, #40	; 0x28
   13a30:	str	r1, [r2, #-32]	; 0xffffffe0
   13a34:	bne	13a28 <__assert_fail@plt+0x2644>
   13a38:	b	13a44 <__assert_fail@plt+0x2660>
   13a3c:	mov	r3, #2
   13a40:	str	r3, [r5, #8]
   13a44:	ldr	r3, [r4, #68]	; 0x44
   13a48:	mov	r2, #0
   13a4c:	mov	r0, #1
   13a50:	str	r2, [r5, #28]
   13a54:	sub	r3, r3, #1
   13a58:	str	r3, [r4, #68]	; 0x44
   13a5c:	b	1385c <__assert_fail@plt+0x2478>
   13a60:	movw	r2, #8512	; 0x2140
   13a64:	movt	r2, #3
   13a68:	ldrb	r2, [r2, #41]	; 0x29
   13a6c:	cmp	r2, #0
   13a70:	bne	139e4 <__assert_fail@plt+0x2600>
   13a74:	strb	r3, [r4, #144]	; 0x90
   13a78:	bl	12fe8 <__assert_fail@plt+0x1c04>
   13a7c:	b	139f4 <__assert_fail@plt+0x2610>
   13a80:	ldr	r1, [r5]
   13a84:	bl	112b8 <ungetc@plt>
   13a88:	b	139d0 <__assert_fail@plt+0x25ec>
   13a8c:	ldrb	r2, [r4, #99]	; 0x63
   13a90:	sub	r9, r9, r3
   13a94:	ldr	r8, [r4, #72]	; 0x48
   13a98:	cmp	r2, #0
   13a9c:	subne	r8, r9, r8
   13aa0:	strne	r8, [r4, #76]	; 0x4c
   13aa4:	bne	13af4 <__assert_fail@plt+0x2710>
   13aa8:	add	r8, r8, #1
   13aac:	cmp	r9, r8
   13ab0:	movwge	sl, #8676	; 0x21e4
   13ab4:	addge	fp, r9, #1
   13ab8:	movtge	sl, #3
   13abc:	movge	r3, #32
   13ac0:	blt	13af0 <__assert_fail@plt+0x270c>
   13ac4:	ldr	r0, [sl]
   13ac8:	ldr	r2, [r0, #20]
   13acc:	ldr	r1, [r0, #24]
   13ad0:	add	ip, r2, #1
   13ad4:	cmp	r2, r1
   13ad8:	strcc	ip, [r0, #20]
   13adc:	strbcc	r3, [r2]
   13ae0:	bcs	13c90 <__assert_fail@plt+0x28ac>
   13ae4:	add	r8, r8, #1
   13ae8:	cmp	r8, fp
   13aec:	bne	13ac4 <__assert_fail@plt+0x26e0>
   13af0:	str	r9, [r4, #72]	; 0x48
   13af4:	mov	r3, #0
   13af8:	str	r3, [r4, #148]	; 0x94
   13afc:	b	13888 <__assert_fail@plt+0x24a4>
   13b00:	bl	12848 <__assert_fail@plt+0x1464>
   13b04:	b	13894 <__assert_fail@plt+0x24b0>
   13b08:	ldr	r2, [r4, #92]	; 0x5c
   13b0c:	ldr	r3, [r4, #164]	; 0xa4
   13b10:	cmp	r2, r3
   13b14:	ble	13928 <__assert_fail@plt+0x2544>
   13b18:	mov	r0, #0
   13b1c:	str	r6, [r4, #92]	; 0x5c
   13b20:	b	1385c <__assert_fail@plt+0x2478>
   13b24:	mov	r0, #1
   13b28:	b	1385c <__assert_fail@plt+0x2478>
   13b2c:	add	r0, r9, #16
   13b30:	add	fp, fp, #1
   13b34:	bl	12c38 <__assert_fail@plt+0x1854>
   13b38:	ldr	r2, [r4, #80]	; 0x50
   13b3c:	add	r9, r9, #40	; 0x28
   13b40:	ldr	r3, [sp, #4]
   13b44:	add	r2, r2, #1
   13b48:	cmp	fp, r3
   13b4c:	str	r2, [r4, #80]	; 0x50
   13b50:	bne	137dc <__assert_fail@plt+0x23f8>
   13b54:	b	13828 <__assert_fail@plt+0x2444>
   13b58:	ldrb	r1, [r4, #99]	; 0x63
   13b5c:	sub	sl, sl, r2
   13b60:	ldr	r8, [r4, #72]	; 0x48
   13b64:	cmp	r1, #0
   13b68:	subne	r8, sl, r8
   13b6c:	strne	r8, [r4, #76]	; 0x4c
   13b70:	bne	13bb8 <__assert_fail@plt+0x27d4>
   13b74:	add	r8, r8, #1
   13b78:	cmp	sl, r8
   13b7c:	addge	r7, sl, #1
   13b80:	blt	13bb4 <__assert_fail@plt+0x27d0>
   13b84:	ldr	r0, [r5]
   13b88:	ldr	r3, [r0, #20]
   13b8c:	ldr	r2, [r0, #24]
   13b90:	add	r1, r3, #1
   13b94:	cmp	r3, r2
   13b98:	movcc	r2, #32
   13b9c:	strcc	r1, [r0, #20]
   13ba0:	strbcc	r2, [r3]
   13ba4:	bcs	13c74 <__assert_fail@plt+0x2890>
   13ba8:	add	r8, r8, #1
   13bac:	cmp	r8, r7
   13bb0:	bne	13b84 <__assert_fail@plt+0x27a0>
   13bb4:	str	sl, [r4, #72]	; 0x48
   13bb8:	mov	r2, #0
   13bbc:	str	r2, [r4, #148]	; 0x94
   13bc0:	ldrb	r2, [r4, #152]	; 0x98
   13bc4:	cmp	r2, #0
   13bc8:	beq	137fc <__assert_fail@plt+0x2418>
   13bcc:	bl	12848 <__assert_fail@plt+0x1464>
   13bd0:	b	137fc <__assert_fail@plt+0x2418>
   13bd4:	add	r0, r5, #16
   13bd8:	bl	12c38 <__assert_fail@plt+0x1854>
   13bdc:	b	138a0 <__assert_fail@plt+0x24bc>
   13be0:	ldr	r0, [r5]
   13be4:	ldr	r3, [r0, #4]
   13be8:	ldr	r2, [r0, #8]
   13bec:	cmp	r3, r2
   13bf0:	bcs	13cb4 <__assert_fail@plt+0x28d0>
   13bf4:	add	r2, r3, #1
   13bf8:	str	r2, [r0, #4]
   13bfc:	ldrb	r0, [r3]
   13c00:	cmp	r0, #10
   13c04:	beq	13c10 <__assert_fail@plt+0x282c>
   13c08:	ldr	r1, [r5]
   13c0c:	bl	112b8 <ungetc@plt>
   13c10:	ldrb	r3, [r4, #120]	; 0x78
   13c14:	cmp	r3, #0
   13c18:	movne	r3, #1
   13c1c:	strbne	r3, [r4, #121]	; 0x79
   13c20:	ldrb	r3, [r4, #60]	; 0x3c
   13c24:	cmp	r3, #0
   13c28:	bne	13a3c <__assert_fail@plt+0x2658>
   13c2c:	movw	r1, #8512	; 0x2140
   13c30:	movt	r1, #3
   13c34:	ldr	r2, [r4, #64]	; 0x40
   13c38:	ldr	r3, [r1, #8]
   13c3c:	cmp	r3, #0
   13c40:	beq	13a44 <__assert_fail@plt+0x2660>
   13c44:	ldrb	r1, [r1, #41]	; 0x29
   13c48:	cmp	r1, #0
   13c4c:	movne	r1, #1
   13c50:	moveq	r1, #2
   13c54:	subs	r3, r3, #1
   13c58:	add	r2, r2, #40	; 0x28
   13c5c:	str	r1, [r2, #-32]	; 0xffffffe0
   13c60:	bne	13c54 <__assert_fail@plt+0x2870>
   13c64:	b	13a44 <__assert_fail@plt+0x2660>
   13c68:	bl	1133c <__uflow@plt>
   13c6c:	mov	r6, r0
   13c70:	b	136f0 <__assert_fail@plt+0x230c>
   13c74:	mov	r1, #32
   13c78:	bl	11348 <__overflow@plt>
   13c7c:	b	13ba8 <__assert_fail@plt+0x27c4>
   13c80:	bl	12fe8 <__assert_fail@plt+0x1c04>
   13c84:	b	13790 <__assert_fail@plt+0x23ac>
   13c88:	bl	1133c <__uflow@plt>
   13c8c:	b	138f8 <__assert_fail@plt+0x2514>
   13c90:	mov	r1, #32
   13c94:	bl	11348 <__overflow@plt>
   13c98:	mov	r3, #32
   13c9c:	b	13ae4 <__assert_fail@plt+0x2700>
   13ca0:	bl	1133c <__uflow@plt>
   13ca4:	b	139c8 <__assert_fail@plt+0x25e4>
   13ca8:	bl	1133c <__uflow@plt>
   13cac:	mov	r6, r0
   13cb0:	b	1397c <__assert_fail@plt+0x2598>
   13cb4:	bl	1133c <__uflow@plt>
   13cb8:	b	13c00 <__assert_fail@plt+0x281c>
   13cbc:	bl	1133c <__uflow@plt>
   13cc0:	mov	r6, r0
   13cc4:	b	13704 <__assert_fail@plt+0x2320>
   13cc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ccc:	mov	r5, r0
   13cd0:	strd	r6, [sp, #8]
   13cd4:	mov	r6, r1
   13cd8:	strd	r8, [sp, #16]
   13cdc:	movw	r8, #8512	; 0x2140
   13ce0:	movt	r8, #3
   13ce4:	ldr	r2, [r8, #52]	; 0x34
   13ce8:	movw	r9, #8688	; 0x21f0
   13cec:	movt	r9, #3
   13cf0:	strd	sl, [sp, #24]
   13cf4:	str	lr, [sp, #32]
   13cf8:	sub	sp, sp, #52	; 0x34
   13cfc:	sub	r3, r2, #10
   13d00:	cmp	r3, #0
   13d04:	str	r3, [r9, #172]	; 0xac
   13d08:	ble	14080 <__assert_fail@plt+0x2c9c>
   13d0c:	ldrb	r1, [r8, #48]	; 0x30
   13d10:	cmp	r1, #0
   13d14:	beq	14090 <__assert_fail@plt+0x2cac>
   13d18:	ldrb	r2, [r9, #176]	; 0xb0
   13d1c:	cmp	r2, #0
   13d20:	beq	13d30 <__assert_fail@plt+0x294c>
   13d24:	add	r3, r3, r3, lsr #31
   13d28:	asr	r3, r3, #1
   13d2c:	str	r3, [r9, #172]	; 0xac
   13d30:	cmp	r5, #0
   13d34:	bne	14240 <__assert_fail@plt+0x2e5c>
   13d38:	ldr	ip, [r8, #8]
   13d3c:	strb	r5, [r9, #60]	; 0x3c
   13d40:	ldrb	r3, [r8, #41]	; 0x29
   13d44:	cmp	r3, #0
   13d48:	movne	r3, #1
   13d4c:	strbne	r3, [r9, #177]	; 0xb1
   13d50:	cmp	ip, #1
   13d54:	ldrb	r3, [r9, #178]	; 0xb2
   13d58:	ble	14258 <__assert_fail@plt+0x2e74>
   13d5c:	ldrb	r2, [r9, #152]	; 0x98
   13d60:	cmp	r2, #0
   13d64:	bne	1409c <__assert_fail@plt+0x2cb8>
   13d68:	movw	r1, #364	; 0x16c
   13d6c:	movt	r1, #2
   13d70:	cmp	r3, #0
   13d74:	movw	r2, #360	; 0x168
   13d78:	movt	r2, #2
   13d7c:	movne	r2, r1
   13d80:	mov	r1, #1
   13d84:	str	r2, [r8, #24]
   13d88:	str	r1, [r9, #84]	; 0x54
   13d8c:	strb	r1, [r9, #112]	; 0x70
   13d90:	strb	r1, [r9, #152]	; 0x98
   13d94:	ldr	r2, [r8, #24]
   13d98:	mov	r4, #1
   13d9c:	ldrb	r2, [r2]
   13da0:	cmp	r2, #9
   13da4:	beq	13db0 <__assert_fail@plt+0x29cc>
   13da8:	mov	r2, #1
   13dac:	strb	r2, [r9, #96]	; 0x60
   13db0:	mov	r2, #1
   13db4:	strb	r2, [r9, #99]	; 0x63
   13db8:	ldrb	r0, [r9, #179]	; 0xb3
   13dbc:	cmp	r3, #0
   13dc0:	movne	r3, #0
   13dc4:	strbne	r3, [r9, #112]	; 0x70
   13dc8:	cmp	r0, #0
   13dcc:	beq	13e14 <__assert_fail@plt+0x2a30>
   13dd0:	ldrb	r3, [r8, #40]	; 0x28
   13dd4:	ldr	r2, [r8, #56]	; 0x38
   13dd8:	cmp	r3, #9
   13ddc:	ldr	r3, [r8, #36]	; 0x24
   13de0:	str	r2, [r8, #44]	; 0x2c
   13de4:	addne	lr, r3, #1
   13de8:	bne	13e04 <__assert_fail@plt+0x2a20>
   13dec:	rsbs	r2, r3, #0
   13df0:	and	lr, r3, #7
   13df4:	and	r2, r2, #7
   13df8:	rsbpl	lr, r2, #0
   13dfc:	rsb	lr, lr, #8
   13e00:	add	lr, lr, r3
   13e04:	ldrb	r3, [r9, #60]	; 0x3c
   13e08:	str	lr, [r9, #108]	; 0x6c
   13e0c:	cmp	r3, #0
   13e10:	bne	13e18 <__assert_fail@plt+0x2a34>
   13e14:	mov	lr, #0
   13e18:	sub	r2, ip, #1
   13e1c:	ldr	r1, [r8, #12]
   13e20:	smull	sl, fp, r2, r4
   13e24:	cmp	fp, sl, asr #31
   13e28:	sub	r3, r1, lr
   13e2c:	moveq	r2, sl
   13e30:	mvnne	r2, #-2147483648	; 0x80000000
   13e34:	subs	r3, r3, r2
   13e38:	bvs	151ec <__assert_fail@plt+0x3e08>
   13e3c:	sdiv	r3, r3, ip
   13e40:	cmp	r3, #0
   13e44:	str	r3, [r9, #164]	; 0xa4
   13e48:	ble	151f4 <__assert_fail@plt+0x3e10>
   13e4c:	cmp	r0, #0
   13e50:	bne	14268 <__assert_fail@plt+0x2e84>
   13e54:	ldr	r0, [r9, #88]	; 0x58
   13e58:	bl	15ad8 <__assert_fail@plt+0x46f4>
   13e5c:	ldr	r0, [r8, #32]
   13e60:	cmp	r0, #8
   13e64:	movlt	r0, #8
   13e68:	bl	1ca20 <__assert_fail@plt+0xb63c>
   13e6c:	mov	r3, #0
   13e70:	str	r0, [r9, #88]	; 0x58
   13e74:	ldr	r0, [r9, #64]	; 0x40
   13e78:	str	r3, [r9, #116]	; 0x74
   13e7c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   13e80:	mov	r1, #40	; 0x28
   13e84:	ldr	r0, [r8, #8]
   13e88:	bl	1cb84 <__assert_fail@plt+0xb7a0>
   13e8c:	ldrb	r7, [r9, #60]	; 0x3c
   13e90:	mov	r4, r0
   13e94:	str	r0, [r9, #64]	; 0x40
   13e98:	cmp	r7, #0
   13e9c:	beq	14204 <__assert_fail@plt+0x2e20>
   13ea0:	cmp	r5, #0
   13ea4:	sub	r5, r5, #1
   13ea8:	subne	r6, r6, #4
   13eac:	beq	13ed8 <__assert_fail@plt+0x2af4>
   13eb0:	mov	r1, r4
   13eb4:	ldr	r0, [r6, #4]!
   13eb8:	bl	12d80 <__assert_fail@plt+0x199c>
   13ebc:	cmp	r0, #0
   13ec0:	ldreq	r3, [r8, #8]
   13ec4:	addne	r4, r4, #40	; 0x28
   13ec8:	subeq	r3, r3, #1
   13ecc:	streq	r3, [r8, #8]
   13ed0:	subs	r5, r5, #1
   13ed4:	bcs	13eb0 <__assert_fail@plt+0x2acc>
   13ed8:	ldr	r3, [r8, #8]
   13edc:	cmp	r3, #0
   13ee0:	beq	141e8 <__assert_fail@plt+0x2e04>
   13ee4:	movw	r0, #356	; 0x164
   13ee8:	movt	r0, #2
   13eec:	mvn	r1, #0
   13ef0:	bl	12480 <__assert_fail@plt+0x109c>
   13ef4:	ldrb	r2, [r8, #41]	; 0x29
   13ef8:	ldr	r3, [r9, #116]	; 0x74
   13efc:	cmp	r2, #0
   13f00:	str	r3, [r9, #68]	; 0x44
   13f04:	bne	14488 <__assert_fail@plt+0x30a4>
   13f08:	ldrd	r2, [r9, #16]
   13f0c:	cmp	r3, #0
   13f10:	strd	r2, [sp, #16]
   13f14:	cmpeq	r2, #1
   13f18:	bhi	1428c <__assert_fail@plt+0x2ea8>
   13f1c:	ldrb	r3, [r8, #41]	; 0x29
   13f20:	mov	r0, #1
   13f24:	mov	r1, #0
   13f28:	ldr	r4, [r9, #64]	; 0x40
   13f2c:	strd	r0, [r9, #128]	; 0x80
   13f30:	str	r3, [sp, #36]	; 0x24
   13f34:	ldr	r3, [r8, #8]
   13f38:	ldrb	ip, [r9, #112]	; 0x70
   13f3c:	ldrb	sl, [r9, #179]	; 0xb3
   13f40:	ldr	r2, [r9, #124]	; 0x7c
   13f44:	cmp	ip, #0
   13f48:	beq	140dc <__assert_fail@plt+0x2cf8>
   13f4c:	ldrb	r6, [r9, #60]	; 0x3c
   13f50:	ldr	r5, [r9, #164]	; 0xa4
   13f54:	cmp	r6, #0
   13f58:	add	r7, r2, r5
   13f5c:	beq	140e0 <__assert_fail@plt+0x2cfc>
   13f60:	cmp	sl, #0
   13f64:	beq	150e4 <__assert_fail@plt+0x3d00>
   13f68:	ldr	lr, [r9, #84]	; 0x54
   13f6c:	cmp	r3, #1
   13f70:	ldr	r1, [r9, #108]	; 0x6c
   13f74:	add	r2, r2, lr
   13f78:	add	r7, r7, r1
   13f7c:	ble	151a8 <__assert_fail@plt+0x3dc4>
   13f80:	ldr	r1, [sp, #36]	; 0x24
   13f84:	movw	ip, #11112	; 0x2b68
   13f88:	movt	ip, #1
   13f8c:	movw	fp, #14004	; 0x36b4
   13f90:	movt	fp, #1
   13f94:	movw	r0, #8828	; 0x227c
   13f98:	movt	r0, #1
   13f9c:	str	ip, [sp, #16]
   13fa0:	eor	r6, r6, #1
   13fa4:	cmp	r1, #0
   13fa8:	movw	r1, #13364	; 0x3434
   13fac:	movt	r1, #1
   13fb0:	moveq	r0, ip
   13fb4:	moveq	r1, fp
   13fb8:	add	r5, r5, lr
   13fbc:	add	r7, r7, lr
   13fc0:	mov	ip, r4
   13fc4:	mov	lr, #1
   13fc8:	str	r7, [sp, #32]
   13fcc:	str	sl, [sp, #44]	; 0x2c
   13fd0:	mov	sl, r5
   13fd4:	str	r5, [sp, #40]	; 0x28
   13fd8:	cmp	lr, #1
   13fdc:	movne	r5, r6
   13fe0:	orreq	r5, r6, #1
   13fe4:	add	lr, lr, #1
   13fe8:	str	r1, [ip, #12]
   13fec:	cmp	lr, r3
   13ff0:	add	ip, ip, #40	; 0x28
   13ff4:	str	r0, [ip, #-24]	; 0xffffffe8
   13ff8:	str	r2, [ip, #-8]
   13ffc:	mov	r2, r7
   14000:	add	r7, r7, sl
   14004:	strb	r5, [ip, #-4]
   14008:	bne	13fd8 <__assert_fail@plt+0x2bf4>
   1400c:	ldr	ip, [sp, #32]
   14010:	sub	r2, r3, #2
   14014:	add	r1, r3, r3, lsl #2
   14018:	ldr	r0, [sp, #40]	; 0x28
   1401c:	add	r1, r4, r1, lsl #3
   14020:	sub	r1, r1, #40	; 0x28
   14024:	ldr	sl, [sp, #44]	; 0x2c
   14028:	mla	r2, r0, r2, ip
   1402c:	ldr	r0, [sp, #36]	; 0x24
   14030:	cmp	r0, #0
   14034:	beq	14604 <__assert_fail@plt+0x3220>
   14038:	mov	r6, r3
   1403c:	ldrb	r7, [r9, #177]	; 0xb1
   14040:	movw	r5, #14004	; 0x36b4
   14044:	movt	r5, #1
   14048:	movw	lr, #8828	; 0x227c
   1404c:	movt	lr, #1
   14050:	movw	ip, #13364	; 0x3434
   14054:	movt	ip, #1
   14058:	movw	r0, #11112	; 0x2b68
   1405c:	movt	r0, #1
   14060:	cmp	r7, #0
   14064:	moveq	ip, r5
   14068:	movne	r0, lr
   1406c:	cmp	sl, #0
   14070:	str	ip, [r1, #12]
   14074:	str	r0, [r1, #16]
   14078:	beq	14628 <__assert_fail@plt+0x3244>
   1407c:	b	14614 <__assert_fail@plt+0x3230>
   14080:	mov	r1, #0
   14084:	mov	r3, #1
   14088:	strb	r1, [r8, #48]	; 0x30
   1408c:	strb	r3, [r9, #120]	; 0x78
   14090:	mov	r3, r2
   14094:	str	r2, [r9, #172]	; 0xac
   14098:	b	13d18 <__assert_fail@plt+0x2934>
   1409c:	cmp	r3, #0
   140a0:	ldr	r4, [r9, #84]	; 0x54
   140a4:	bne	14868 <__assert_fail@plt+0x3484>
   140a8:	cmp	r4, #1
   140ac:	movne	r2, #1
   140b0:	strbne	r2, [r9, #112]	; 0x70
   140b4:	bne	13da8 <__assert_fail@plt+0x29c4>
   140b8:	ldr	r2, [r8, #24]
   140bc:	ldrb	r2, [r2]
   140c0:	cmp	r2, #9
   140c4:	movweq	r2, #360	; 0x168
   140c8:	movteq	r2, #2
   140cc:	streq	r2, [r8, #24]
   140d0:	mov	r2, #1
   140d4:	strb	r2, [r9, #112]	; 0x70
   140d8:	b	13d94 <__assert_fail@plt+0x29b0>
   140dc:	mov	r7, ip
   140e0:	ldr	lr, [r9, #84]	; 0x54
   140e4:	cmp	r3, #1
   140e8:	add	r2, r2, lr
   140ec:	ble	151a8 <__assert_fail@plt+0x3dc4>
   140f0:	ldr	r1, [sp, #36]	; 0x24
   140f4:	movw	fp, #14004	; 0x36b4
   140f8:	movt	fp, #1
   140fc:	movw	r0, #8828	; 0x227c
   14100:	movt	r0, #1
   14104:	ldrb	r6, [r9, #60]	; 0x3c
   14108:	cmp	r1, #0
   1410c:	movw	r1, #11112	; 0x2b68
   14110:	movt	r1, #1
   14114:	mov	r5, r1
   14118:	movw	r1, #13364	; 0x3434
   1411c:	movt	r1, #1
   14120:	moveq	r0, r5
   14124:	moveq	r1, fp
   14128:	cmp	sl, #0
   1412c:	str	r5, [sp, #16]
   14130:	eor	r6, r6, #1
   14134:	ldr	r5, [r9, #164]	; 0xa4
   14138:	bne	145ac <__assert_fail@plt+0x31c8>
   1413c:	cmp	ip, #0
   14140:	bne	15128 <__assert_fail@plt+0x3d44>
   14144:	mov	ip, r4
   14148:	mov	lr, #1
   1414c:	mov	r5, sl
   14150:	add	lr, lr, #1
   14154:	add	ip, ip, #40	; 0x28
   14158:	str	r1, [ip, #-28]	; 0xffffffe4
   1415c:	cmp	lr, r3
   14160:	str	r0, [ip, #-24]	; 0xffffffe8
   14164:	str	r2, [ip, #-8]
   14168:	mov	r2, #0
   1416c:	strb	r5, [ip, #-4]
   14170:	bne	14150 <__assert_fail@plt+0x2d6c>
   14174:	add	r1, r3, r3, lsl #2
   14178:	add	r1, r4, r1, lsl #3
   1417c:	sub	r1, r1, #40	; 0x28
   14180:	ldr	r0, [sp, #36]	; 0x24
   14184:	cmp	r0, #0
   14188:	bne	14038 <__assert_fail@plt+0x2c54>
   1418c:	mov	sl, r0
   14190:	ldr	r0, [sp, #16]
   14194:	str	fp, [r1, #12]
   14198:	str	r0, [r1, #16]
   1419c:	b	14628 <__assert_fail@plt+0x3244>
   141a0:	mov	r3, #0
   141a4:	str	r3, [r9, #68]	; 0x44
   141a8:	strb	r3, [r9, #137]	; 0x89
   141ac:	mov	r2, #5
   141b0:	movw	r1, #412	; 0x19c
   141b4:	movt	r1, #2
   141b8:	mov	r0, #0
   141bc:	bl	11168 <dcgettext@plt>
   141c0:	ldrd	r4, [sp, #16]
   141c4:	mov	r1, #0
   141c8:	mov	r2, r0
   141cc:	mov	r0, r1
   141d0:	strd	r4, [sp]
   141d4:	strd	sl, [sp, #8]
   141d8:	bl	11204 <error@plt>
   141dc:	ldr	r3, [r9, #68]	; 0x44
   141e0:	cmp	r3, #0
   141e4:	bgt	151d8 <__assert_fail@plt+0x3df4>
   141e8:	add	sp, sp, #52	; 0x34
   141ec:	ldrd	r4, [sp]
   141f0:	ldrd	r6, [sp, #8]
   141f4:	ldrd	r8, [sp, #16]
   141f8:	ldrd	sl, [sp, #24]
   141fc:	add	sp, sp, #32
   14200:	pop	{pc}		; (ldr pc, [sp], #4)
   14204:	cmp	r5, #0
   14208:	ble	14518 <__assert_fail@plt+0x3134>
   1420c:	mov	r1, r0
   14210:	ldr	r0, [r6]
   14214:	bl	12d80 <__assert_fail@plt+0x199c>
   14218:	cmp	r0, #0
   1421c:	beq	141e8 <__assert_fail@plt+0x2e04>
   14220:	ldr	r5, [r6]
   14224:	ldr	r0, [r4]
   14228:	bl	11300 <fileno@plt>
   1422c:	mov	r1, r0
   14230:	mov	r0, r5
   14234:	bl	12480 <__assert_fail@plt+0x109c>
   14238:	str	r7, [r4, #24]
   1423c:	b	1456c <__assert_fail@plt+0x3188>
   14240:	ldrb	r3, [r9, #60]	; 0x3c
   14244:	cmp	r3, #0
   14248:	ldreq	ip, [r8, #8]
   1424c:	movne	ip, r5
   14250:	strne	r5, [r8, #8]
   14254:	b	13d40 <__assert_fail@plt+0x295c>
   14258:	mov	r2, #0
   1425c:	ldr	r4, [r9, #84]	; 0x54
   14260:	strb	r2, [r8, #41]	; 0x29
   14264:	b	13db8 <__assert_fail@plt+0x29d4>
   14268:	ldr	r0, [r9, #100]	; 0x64
   1426c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   14270:	ldr	r0, [r8, #36]	; 0x24
   14274:	cmp	r0, #11
   14278:	movcc	r0, #11
   1427c:	add	r0, r0, #1
   14280:	bl	1ca20 <__assert_fail@plt+0xb63c>
   14284:	str	r0, [r9, #100]	; 0x64
   14288:	b	13e54 <__assert_fail@plt+0x2a70>
   1428c:	ldr	r3, [r8, #8]
   14290:	mov	sl, #1
   14294:	mov	fp, #0
   14298:	mov	r5, #0
   1429c:	ldr	r4, [r9, #64]	; 0x40
   142a0:	ldr	r2, [r9, #172]	; 0xac
   142a4:	cmp	r2, #1
   142a8:	movgt	r7, #1
   142ac:	ble	142ec <__assert_fail@plt+0x2f08>
   142b0:	cmp	r3, #0
   142b4:	ble	142e0 <__assert_fail@plt+0x2efc>
   142b8:	mov	r6, #1
   142bc:	ldr	r2, [r4, #8]
   142c0:	cmp	r2, #0
   142c4:	beq	14434 <__assert_fail@plt+0x3050>
   142c8:	add	r6, r6, #1
   142cc:	add	r4, r4, #40	; 0x28
   142d0:	cmp	r6, r3
   142d4:	ble	142bc <__assert_fail@plt+0x2ed8>
   142d8:	ldr	r4, [r9, #64]	; 0x40
   142dc:	ldr	r2, [r9, #172]	; 0xac
   142e0:	add	r7, r7, #1
   142e4:	cmp	r7, r2
   142e8:	blt	142b0 <__assert_fail@plt+0x2ecc>
   142ec:	mov	r2, #1
   142f0:	cmp	r3, #0
   142f4:	strb	r2, [r9, #137]	; 0x89
   142f8:	ble	1446c <__assert_fail@plt+0x3088>
   142fc:	mov	r6, #1
   14300:	ldr	r2, [r4, #8]
   14304:	cmp	r2, #0
   14308:	beq	143c8 <__assert_fail@plt+0x2fe4>
   1430c:	add	r6, r6, #1
   14310:	add	r4, r4, #40	; 0x28
   14314:	cmp	r6, r3
   14318:	ble	14300 <__assert_fail@plt+0x2f1c>
   1431c:	ldrb	r6, [r8, #41]	; 0x29
   14320:	ldr	r4, [r9, #64]	; 0x40
   14324:	cmp	r6, #0
   14328:	bne	143f8 <__assert_fail@plt+0x3014>
   1432c:	ldr	r7, [r9, #68]	; 0x44
   14330:	cmp	r3, #0
   14334:	moveq	r0, r7
   14338:	beq	14458 <__assert_fail@plt+0x3074>
   1433c:	mov	r6, #0
   14340:	mov	r0, r7
   14344:	mov	r1, r3
   14348:	mov	r2, r4
   1434c:	mov	lr, #0
   14350:	ldr	ip, [r2, #8]
   14354:	cmp	ip, #2
   14358:	bne	14368 <__assert_fail@plt+0x2f84>
   1435c:	add	r0, r0, #1
   14360:	mov	lr, #1
   14364:	str	r5, [r2, #8]
   14368:	subs	r1, r1, #1
   1436c:	add	r2, r2, #40	; 0x28
   14370:	bne	14350 <__assert_fail@plt+0x2f6c>
   14374:	cmp	lr, #0
   14378:	moveq	r0, r7
   1437c:	strne	r0, [r9, #68]	; 0x44
   14380:	cmp	r6, #0
   14384:	beq	14458 <__assert_fail@plt+0x3074>
   14388:	ldr	r2, [r4, #8]
   1438c:	cmp	r2, #3
   14390:	beq	141a0 <__assert_fail@plt+0x2dbc>
   14394:	mov	r2, #1
   14398:	str	r2, [r9, #68]	; 0x44
   1439c:	strb	r5, [r9, #137]	; 0x89
   143a0:	ldrd	r0, [sp, #16]
   143a4:	adds	sl, sl, #1
   143a8:	adc	fp, fp, #0
   143ac:	cmp	r1, fp
   143b0:	cmpeq	r0, sl
   143b4:	bne	142a0 <__assert_fail@plt+0x2ebc>
   143b8:	str	r2, [sp, #36]	; 0x24
   143bc:	ldrd	r0, [r9, #16]
   143c0:	strd	r0, [r9, #128]	; 0x80
   143c4:	b	13f38 <__assert_fail@plt+0x2b54>
   143c8:	mov	r1, r6
   143cc:	mov	r0, r4
   143d0:	bl	13168 <__assert_fail@plt+0x1d84>
   143d4:	ldr	r3, [r8, #8]
   143d8:	add	r6, r6, #1
   143dc:	add	r4, r4, #40	; 0x28
   143e0:	cmp	r6, r3
   143e4:	ble	14300 <__assert_fail@plt+0x2f1c>
   143e8:	ldrb	r6, [r8, #41]	; 0x29
   143ec:	ldr	r4, [r9, #64]	; 0x40
   143f0:	cmp	r6, #0
   143f4:	beq	1432c <__assert_fail@plt+0x2f48>
   143f8:	cmp	r3, #0
   143fc:	ble	14478 <__assert_fail@plt+0x3094>
   14400:	add	ip, r3, #1
   14404:	mov	r2, r4
   14408:	mov	r1, #1
   1440c:	mov	lr, #2
   14410:	ldr	r0, [r2, #8]
   14414:	add	r1, r1, #1
   14418:	add	r2, r2, #40	; 0x28
   1441c:	cmp	r0, #3
   14420:	strne	lr, [r2, #-32]	; 0xffffffe0
   14424:	cmp	r1, ip
   14428:	bne	14410 <__assert_fail@plt+0x302c>
   1442c:	ldr	r7, [r9, #68]	; 0x44
   14430:	b	14340 <__assert_fail@plt+0x2f5c>
   14434:	mov	r1, r6
   14438:	mov	r0, r4
   1443c:	bl	13168 <__assert_fail@plt+0x1d84>
   14440:	ldr	r3, [r8, #8]
   14444:	add	r6, r6, #1
   14448:	add	r4, r4, #40	; 0x28
   1444c:	cmp	r6, r3
   14450:	ble	142bc <__assert_fail@plt+0x2ed8>
   14454:	b	142d8 <__assert_fail@plt+0x2ef4>
   14458:	cmp	r0, #0
   1445c:	strb	r5, [r9, #137]	; 0x89
   14460:	ble	141ac <__assert_fail@plt+0x2dc8>
   14464:	mov	r2, #0
   14468:	b	143a0 <__assert_fail@plt+0x2fbc>
   1446c:	ldrb	r2, [r8, #41]	; 0x29
   14470:	cmp	r2, #0
   14474:	beq	1432c <__assert_fail@plt+0x2f48>
   14478:	cmp	r3, #0
   1447c:	beq	14388 <__assert_fail@plt+0x2fa4>
   14480:	mov	r6, #1
   14484:	b	1442c <__assert_fail@plt+0x3048>
   14488:	ldr	r3, [r8, #8]
   1448c:	ldr	r6, [r9, #172]	; 0xac
   14490:	smull	r6, r7, r6, r3
   14494:	cmp	r7, r6, asr #31
   14498:	bne	15218 <__assert_fail@plt+0x3e34>
   1449c:	mov	r3, #1
   144a0:	adds	sl, r6, r3
   144a4:	bvs	15218 <__assert_fail@plt+0x3e34>
   144a8:	ldr	r4, [r9, #164]	; 0xa4
   144ac:	adds	r4, r4, r3
   144b0:	bvs	15218 <__assert_fail@plt+0x3e34>
   144b4:	smull	r4, r5, r6, r4
   144b8:	cmp	r5, r4, asr #31
   144bc:	bne	15218 <__assert_fail@plt+0x3e34>
   144c0:	ldr	r0, [r9, #140]	; 0x8c
   144c4:	bl	15ad8 <__assert_fail@plt+0x46f4>
   144c8:	mov	r1, #4
   144cc:	mov	r0, sl
   144d0:	bl	1cb84 <__assert_fail@plt+0xb7a0>
   144d4:	str	r0, [r9, #140]	; 0x8c
   144d8:	ldr	r0, [r9, #156]	; 0x9c
   144dc:	bl	15ad8 <__assert_fail@plt+0x46f4>
   144e0:	mov	r1, #4
   144e4:	mov	r0, r6
   144e8:	bl	1cb84 <__assert_fail@plt+0xb7a0>
   144ec:	str	r0, [r9, #156]	; 0x9c
   144f0:	ldr	r0, [r9, #4]
   144f4:	bl	15ad8 <__assert_fail@plt+0x46f4>
   144f8:	ldrb	r1, [r9, #152]	; 0x98
   144fc:	mov	r0, r4
   14500:	add	r1, r1, #1
   14504:	bl	1cb84 <__assert_fail@plt+0xb7a0>
   14508:	ldrb	r3, [r9, #152]	; 0x98
   1450c:	mla	r4, r3, r4, r4
   14510:	stmib	r9, {r0, r4}
   14514:	b	13f08 <__assert_fail@plt+0x2b24>
   14518:	mov	r2, #5
   1451c:	movw	r1, #284	; 0x11c
   14520:	movt	r1, #2
   14524:	mov	r0, r7
   14528:	bl	11168 <dcgettext@plt>
   1452c:	movw	r2, #8672	; 0x21e0
   14530:	movt	r2, #3
   14534:	ldr	r3, [r9, #116]	; 0x74
   14538:	mov	ip, #1
   1453c:	mvn	r1, #0
   14540:	stmib	r4, {r0, r7}
   14544:	ldr	r2, [r2]
   14548:	movw	r0, #356	; 0x164
   1454c:	movt	r0, #2
   14550:	strb	ip, [r9, #113]	; 0x71
   14554:	add	r3, r3, ip
   14558:	str	r2, [r4]
   1455c:	strb	r7, [r4, #37]	; 0x25
   14560:	str	r3, [r9, #116]	; 0x74
   14564:	bl	12480 <__assert_fail@plt+0x109c>
   14568:	str	r7, [r4, #24]
   1456c:	ldr	r3, [r8, #8]
   14570:	ldr	ip, [r4]
   14574:	ldr	r0, [r4, #4]
   14578:	subs	r3, r3, #1
   1457c:	beq	13ef4 <__assert_fail@plt+0x2b10>
   14580:	add	r1, r4, #80	; 0x50
   14584:	mov	r2, #0
   14588:	subs	r3, r3, #1
   1458c:	add	r1, r1, #40	; 0x28
   14590:	str	ip, [r1, #-80]	; 0xffffffb0
   14594:	str	r0, [r1, #-76]	; 0xffffffb4
   14598:	str	r2, [r1, #-72]	; 0xffffffb8
   1459c:	str	r2, [r1, #-56]	; 0xffffffc8
   145a0:	strb	r2, [r1, #-43]	; 0xffffffd5
   145a4:	bne	14588 <__assert_fail@plt+0x31a4>
   145a8:	b	13ef4 <__assert_fail@plt+0x2b10>
   145ac:	cmp	ip, #0
   145b0:	bne	13fb8 <__assert_fail@plt+0x2bd4>
   145b4:	mov	ip, r4
   145b8:	mov	lr, #1
   145bc:	cmp	lr, #1
   145c0:	movne	r5, r6
   145c4:	orreq	r5, r6, #1
   145c8:	add	lr, lr, #1
   145cc:	str	r1, [ip, #12]
   145d0:	cmp	lr, r3
   145d4:	add	ip, ip, #40	; 0x28
   145d8:	str	r0, [ip, #-24]	; 0xffffffe8
   145dc:	str	r2, [ip, #-8]
   145e0:	mov	r2, #0
   145e4:	strb	r5, [ip, #-4]
   145e8:	bne	145bc <__assert_fail@plt+0x31d8>
   145ec:	ldr	r0, [sp, #36]	; 0x24
   145f0:	add	r1, r3, r3, lsl #2
   145f4:	add	r1, r4, r1, lsl #3
   145f8:	sub	r1, r1, #40	; 0x28
   145fc:	cmp	r0, #0
   14600:	bne	14038 <__assert_fail@plt+0x2c54>
   14604:	ldr	r0, [sp, #16]
   14608:	mov	r6, r3
   1460c:	str	fp, [r1, #12]
   14610:	str	r0, [r1, #16]
   14614:	ldrb	r0, [r9, #60]	; 0x3c
   14618:	eor	r0, r0, #1
   1461c:	cmp	r6, #1
   14620:	movne	sl, r0
   14624:	orreq	sl, r0, #1
   14628:	str	r2, [r1, #32]
   1462c:	movw	ip, #8676	; 0x21e4
   14630:	movt	ip, #3
   14634:	ldr	r2, [sp, #36]	; 0x24
   14638:	str	ip, [sp, #16]
   1463c:	ldr	r0, [r8, #44]	; 0x2c
   14640:	strb	sl, [r1, #36]	; 0x24
   14644:	cmp	r2, #0
   14648:	str	r0, [r9, #104]	; 0x68
   1464c:	bne	14af0 <__assert_fail@plt+0x370c>
   14650:	cmp	r3, #0
   14654:	beq	141e8 <__assert_fail@plt+0x2e04>
   14658:	ldr	lr, [r9, #172]	; 0xac
   1465c:	mov	r1, r3
   14660:	mov	r2, r4
   14664:	mov	ip, #0
   14668:	ldr	r0, [r2, #8]
   1466c:	cmp	r0, #0
   14670:	beq	14e68 <__assert_fail@plt+0x3a84>
   14674:	subs	r1, r1, #1
   14678:	add	r2, r2, #40	; 0x28
   1467c:	str	ip, [r2, #-12]
   14680:	bne	14668 <__assert_fail@plt+0x3284>
   14684:	ldrb	r0, [r8, #41]	; 0x29
   14688:	cmp	r0, #0
   1468c:	bne	14e84 <__assert_fail@plt+0x3aa0>
   14690:	mov	ip, r4
   14694:	mov	r1, r0
   14698:	mov	r2, r0
   1469c:	ldr	lr, [ip, #8]
   146a0:	add	r1, r1, #1
   146a4:	add	ip, ip, #40	; 0x28
   146a8:	cmp	lr, #1
   146ac:	addls	r2, r2, #1
   146b0:	cmp	r3, r1
   146b4:	bne	1469c <__assert_fail@plt+0x32b8>
   146b8:	cmp	r2, #0
   146bc:	beq	141e8 <__assert_fail@plt+0x2e04>
   146c0:	ldrb	r2, [r8, #48]	; 0x30
   146c4:	mov	r1, #0
   146c8:	ldr	r7, [r9, #172]	; 0xac
   146cc:	strb	r1, [r9, #144]	; 0x90
   146d0:	cmp	r2, #0
   146d4:	movne	r2, #1
   146d8:	strbne	r2, [r9, #136]	; 0x88
   146dc:	ldrb	r2, [r9, #176]	; 0xb0
   146e0:	cmp	r2, r1
   146e4:	lslne	r7, r7, #1
   146e8:	cmp	r7, #0
   146ec:	movgt	r2, #0
   146f0:	movgt	r5, r2
   146f4:	strgt	r2, [sp, #32]
   146f8:	ble	15184 <__assert_fail@plt+0x3da0>
   146fc:	mov	r1, #0
   14700:	mov	r2, r4
   14704:	mov	ip, r1
   14708:	ldr	lr, [r2, #8]
   1470c:	cmp	lr, #1
   14710:	bls	14734 <__assert_fail@plt+0x3350>
   14714:	cmp	r0, #0
   14718:	beq	14738 <__assert_fail@plt+0x3354>
   1471c:	ldr	lr, [r2, #24]
   14720:	cmp	lr, #0
   14724:	ble	14738 <__assert_fail@plt+0x3354>
   14728:	ldr	lr, [r2, #28]
   1472c:	cmp	lr, #0
   14730:	ble	14738 <__assert_fail@plt+0x3354>
   14734:	add	ip, ip, #1
   14738:	add	r1, r1, #1
   1473c:	add	r2, r2, #40	; 0x28
   14740:	cmp	r3, r1
   14744:	bhi	14708 <__assert_fail@plt+0x3324>
   14748:	cmp	ip, #0
   1474c:	beq	149dc <__assert_fail@plt+0x35f8>
   14750:	mov	r6, #1
   14754:	cmp	r3, #0
   14758:	str	r5, [r9, #72]	; 0x48
   1475c:	ldrle	r3, [r8, #8]
   14760:	str	r5, [r9, #76]	; 0x4c
   14764:	str	r5, [r9, #80]	; 0x50
   14768:	strb	r5, [r9, #144]	; 0x90
   1476c:	strb	r5, [r9, #168]	; 0xa8
   14770:	strb	r6, [r9, #169]	; 0xa9
   14774:	ble	148c0 <__assert_fail@plt+0x34dc>
   14778:	add	r4, r4, #16
   1477c:	b	14824 <__assert_fail@plt+0x3440>
   14780:	mov	r0, sl
   14784:	ldr	r3, [r4, #-4]
   14788:	strb	r5, [r9, #160]	; 0xa0
   1478c:	ldr	r2, [r4, #16]
   14790:	str	r2, [r9, #148]	; 0x94
   14794:	blx	r3
   14798:	cmp	r0, #0
   1479c:	beq	14cd4 <__assert_fail@plt+0x38f0>
   147a0:	ldrb	sl, [r9, #144]	; 0x90
   147a4:	ldr	r3, [r4, #12]
   147a8:	ldr	r2, [sp, #32]
   147ac:	sub	r3, r3, #1
   147b0:	cmp	r3, #0
   147b4:	orr	r2, sl, r2
   147b8:	str	r3, [r4, #12]
   147bc:	str	r2, [sp, #32]
   147c0:	ble	14ce0 <__assert_fail@plt+0x38fc>
   147c4:	ldrb	r3, [r9, #60]	; 0x3c
   147c8:	cmp	r3, #0
   147cc:	beq	147f8 <__assert_fail@plt+0x3414>
   147d0:	ldr	r3, [r4, #-8]
   147d4:	cmp	r3, #0
   147d8:	beq	147f8 <__assert_fail@plt+0x3414>
   147dc:	ldrb	r2, [r9, #169]	; 0xa9
   147e0:	cmp	r2, #0
   147e4:	bne	1485c <__assert_fail@plt+0x3478>
   147e8:	cmp	r3, #3
   147ec:	beq	14dc4 <__assert_fail@plt+0x39e0>
   147f0:	cmp	r3, #2
   147f4:	beq	14db8 <__assert_fail@plt+0x39d4>
   147f8:	ldrb	r3, [r9, #152]	; 0x98
   147fc:	cmp	r3, #0
   14800:	beq	14810 <__assert_fail@plt+0x342c>
   14804:	ldr	r3, [r9, #80]	; 0x50
   14808:	add	r3, r3, #1
   1480c:	str	r3, [r9, #80]	; 0x50
   14810:	ldr	r3, [r8, #8]
   14814:	add	r6, r6, #1
   14818:	add	r4, r4, #40	; 0x28
   1481c:	cmp	r6, r3
   14820:	bgt	148b4 <__assert_fail@plt+0x34d0>
   14824:	ldr	r3, [r4, #12]
   14828:	sub	sl, r4, #16
   1482c:	str	r5, [r9, #92]	; 0x5c
   14830:	cmp	r3, #0
   14834:	bgt	14780 <__assert_fail@plt+0x339c>
   14838:	ldr	r3, [r4, #-8]
   1483c:	cmp	r3, #1
   14840:	beq	14780 <__assert_fail@plt+0x339c>
   14844:	ldrb	r3, [r9, #60]	; 0x3c
   14848:	cmp	r3, #0
   1484c:	beq	147f8 <__assert_fail@plt+0x3414>
   14850:	ldrb	r3, [r9, #169]	; 0xa9
   14854:	cmp	r3, #0
   14858:	beq	1487c <__assert_fail@plt+0x3498>
   1485c:	mov	r3, #1
   14860:	strb	r3, [r9, #168]	; 0xa8
   14864:	b	147f8 <__assert_fail@plt+0x3414>
   14868:	mov	r2, #1
   1486c:	cmp	r4, r2
   14870:	strb	r2, [r9, #112]	; 0x70
   14874:	bne	13da8 <__assert_fail@plt+0x29c4>
   14878:	b	13d94 <__assert_fail@plt+0x29b0>
   1487c:	ldr	sl, [r4, #16]
   14880:	ldr	fp, [r9, #84]	; 0x54
   14884:	str	sl, [r9, #148]	; 0x94
   14888:	cmp	sl, fp
   1488c:	bgt	14c48 <__assert_fail@plt+0x3864>
   14890:	ldrb	r3, [r9, #152]	; 0x98
   14894:	cmp	r3, #0
   14898:	bne	14c34 <__assert_fail@plt+0x3850>
   1489c:	ldrb	r3, [r4, #20]
   148a0:	cmp	r3, #0
   148a4:	beq	14810 <__assert_fail@plt+0x342c>
   148a8:	mov	r0, r4
   148ac:	bl	12c38 <__assert_fail@plt+0x1854>
   148b0:	b	147f8 <__assert_fail@plt+0x3414>
   148b4:	ldrb	r2, [r9, #144]	; 0x90
   148b8:	cmp	r2, #0
   148bc:	bne	14d34 <__assert_fail@plt+0x3950>
   148c0:	cmp	r3, #0
   148c4:	ldr	r2, [r9, #64]	; 0x40
   148c8:	beq	1498c <__assert_fail@plt+0x35a8>
   148cc:	ldrb	r0, [r8, #41]	; 0x29
   148d0:	mov	r1, #0
   148d4:	mov	ip, r1
   148d8:	ldr	lr, [r2, #8]
   148dc:	cmp	lr, #1
   148e0:	bls	14904 <__assert_fail@plt+0x3520>
   148e4:	cmp	r0, #0
   148e8:	beq	14908 <__assert_fail@plt+0x3524>
   148ec:	ldr	lr, [r2, #24]
   148f0:	cmp	lr, #0
   148f4:	ble	14908 <__assert_fail@plt+0x3524>
   148f8:	ldr	lr, [r2, #28]
   148fc:	cmp	lr, #0
   14900:	ble	14908 <__assert_fail@plt+0x3524>
   14904:	add	ip, ip, #1
   14908:	add	r1, r1, #1
   1490c:	add	r2, r2, #40	; 0x28
   14910:	cmp	r3, r1
   14914:	bhi	148d8 <__assert_fail@plt+0x34f4>
   14918:	cmp	ip, #0
   1491c:	beq	1498c <__assert_fail@plt+0x35a8>
   14920:	ldrb	r3, [r9, #176]	; 0xb0
   14924:	cmp	r3, #0
   14928:	beq	14964 <__assert_fail@plt+0x3580>
   1492c:	ldr	r3, [sp, #32]
   14930:	cmp	r3, #0
   14934:	beq	14964 <__assert_fail@plt+0x3580>
   14938:	ldr	r3, [sp, #16]
   1493c:	ldr	r0, [r3]
   14940:	ldr	r3, [r0, #20]
   14944:	ldr	r2, [r0, #24]
   14948:	cmp	r3, r2
   1494c:	addcc	r1, r3, #1
   14950:	movcc	r2, #10
   14954:	strcc	r1, [r0, #20]
   14958:	strbcc	r2, [r3]
   1495c:	bcs	14ff8 <__assert_fail@plt+0x3c14>
   14960:	sub	r7, r7, #1
   14964:	cmp	r7, #0
   14968:	ble	14998 <__assert_fail@plt+0x35b4>
   1496c:	ldr	r3, [r8, #8]
   14970:	ldr	r4, [r9, #64]	; 0x40
   14974:	cmp	r3, #0
   14978:	beq	149dc <__assert_fail@plt+0x35f8>
   1497c:	ldrb	r0, [r8, #41]	; 0x29
   14980:	b	146fc <__assert_fail@plt+0x3318>
   14984:	cmp	sl, #0
   14988:	bne	14d34 <__assert_fail@plt+0x3950>
   1498c:	ldrb	r3, [r8, #48]	; 0x30
   14990:	cmp	r3, #0
   14994:	bne	14920 <__assert_fail@plt+0x353c>
   14998:	cmp	r7, #0
   1499c:	bne	149dc <__assert_fail@plt+0x35f8>
   149a0:	ldr	r3, [r8, #8]
   149a4:	ldr	r4, [r9, #64]	; 0x40
   149a8:	cmp	r3, #0
   149ac:	ble	149dc <__assert_fail@plt+0x35f8>
   149b0:	mov	r2, #1
   149b4:	add	r3, r3, r2
   149b8:	mov	r0, r2
   149bc:	ldr	r1, [r4, #8]
   149c0:	add	r2, r2, #1
   149c4:	add	r4, r4, #40	; 0x28
   149c8:	cmp	r1, #0
   149cc:	strbeq	r0, [r4, #-3]
   149d0:	cmp	r2, r3
   149d4:	bne	149bc <__assert_fail@plt+0x35d8>
   149d8:	mov	r7, #0
   149dc:	ldr	r3, [sp, #32]
   149e0:	cmp	r3, #0
   149e4:	strb	r3, [r9, #144]	; 0x90
   149e8:	beq	149f8 <__assert_fail@plt+0x3614>
   149ec:	ldrb	r3, [r8, #48]	; 0x30
   149f0:	cmp	r3, #0
   149f4:	bne	1505c <__assert_fail@plt+0x3c78>
   149f8:	ldrb	r3, [r9, #120]	; 0x78
   149fc:	cmp	r3, #0
   14a00:	beq	14a40 <__assert_fail@plt+0x365c>
   14a04:	ldrb	r3, [r9, #121]	; 0x79
   14a08:	cmp	r3, #0
   14a0c:	beq	14a40 <__assert_fail@plt+0x365c>
   14a10:	ldr	r3, [sp, #16]
   14a14:	ldr	r0, [r3]
   14a18:	ldr	r3, [r0, #20]
   14a1c:	ldr	r2, [r0, #24]
   14a20:	cmp	r3, r2
   14a24:	addcc	r1, r3, #1
   14a28:	movcc	r2, #12
   14a2c:	strcc	r1, [r0, #20]
   14a30:	strbcc	r2, [r3]
   14a34:	bcs	1519c <__assert_fail@plt+0x3db8>
   14a38:	mov	r3, #0
   14a3c:	strb	r3, [r9, #121]	; 0x79
   14a40:	ldr	r1, [r9, #128]	; 0x80
   14a44:	ldr	r0, [r9, #132]	; 0x84
   14a48:	ldrd	r2, [r8]
   14a4c:	adds	r1, r1, #1
   14a50:	str	r1, [sp, #24]
   14a54:	adc	r1, r0, #0
   14a58:	str	r1, [sp, #28]
   14a5c:	ldrd	r0, [sp, #24]
   14a60:	cmp	r1, r3
   14a64:	strd	r0, [r9, #128]	; 0x80
   14a68:	cmpeq	r0, r2
   14a6c:	bhi	141e8 <__assert_fail@plt+0x2e04>
   14a70:	ldr	r3, [r8, #8]
   14a74:	ldr	r4, [r9, #64]	; 0x40
   14a78:	cmp	r3, #0
   14a7c:	beq	14ac0 <__assert_fail@plt+0x36dc>
   14a80:	ldr	r0, [r9, #68]	; 0x44
   14a84:	mov	lr, #0
   14a88:	mov	r1, r3
   14a8c:	mov	r5, lr
   14a90:	mov	r2, r4
   14a94:	ldr	ip, [r2, #8]
   14a98:	cmp	ip, #2
   14a9c:	bne	14aac <__assert_fail@plt+0x36c8>
   14aa0:	add	r0, r0, #1
   14aa4:	mov	lr, #1
   14aa8:	str	r5, [r2, #8]
   14aac:	subs	r1, r1, #1
   14ab0:	add	r2, r2, #40	; 0x28
   14ab4:	bne	14a94 <__assert_fail@plt+0x36b0>
   14ab8:	cmp	lr, #0
   14abc:	strne	r0, [r9, #68]	; 0x44
   14ac0:	ldrb	r2, [r8, #41]	; 0x29
   14ac4:	cmp	r2, #0
   14ac8:	str	r2, [sp, #36]	; 0x24
   14acc:	beq	14650 <__assert_fail@plt+0x326c>
   14ad0:	ldr	r2, [r4, #8]
   14ad4:	cmp	r2, #3
   14ad8:	moveq	r2, #0
   14adc:	movne	r2, #1
   14ae0:	str	r2, [r9, #68]	; 0x44
   14ae4:	ldr	r2, [sp, #36]	; 0x24
   14ae8:	cmp	r2, #0
   14aec:	beq	14650 <__assert_fail@plt+0x326c>
   14af0:	ldrb	r0, [r9, #177]	; 0xb1
   14af4:	mov	r2, #0
   14af8:	str	r2, [r9]
   14afc:	cmp	r0, r2
   14b00:	bne	15040 <__assert_fail@plt+0x3c5c>
   14b04:	sub	r2, r3, #1
   14b08:	cmp	r2, #0
   14b0c:	str	r2, [sp, #32]
   14b10:	ble	15004 <__assert_fail@plt+0x3c20>
   14b14:	ldr	r2, [sp, #32]
   14b18:	mov	r1, r4
   14b1c:	mov	ip, #0
   14b20:	add	lr, r2, #1
   14b24:	mov	r2, #1
   14b28:	add	r2, r2, #1
   14b2c:	add	r1, r1, #40	; 0x28
   14b30:	str	ip, [r1, #-16]
   14b34:	cmp	lr, r2
   14b38:	bne	14b28 <__assert_fail@plt+0x3744>
   14b3c:	ldr	r2, [r9, #68]	; 0x44
   14b40:	cmp	r2, #0
   14b44:	moveq	r1, r2
   14b48:	moveq	r5, r2
   14b4c:	beq	14f18 <__assert_fail@plt+0x3b34>
   14b50:	mov	r6, #0
   14b54:	mov	sl, #1
   14b58:	mov	r5, r6
   14b5c:	mov	fp, r6
   14b60:	ldr	r7, [r9, #172]	; 0xac
   14b64:	str	fp, [r4, #20]
   14b68:	cmp	r7, #0
   14b6c:	beq	14bf4 <__assert_fail@plt+0x3810>
   14b70:	ldr	r3, [r4, #8]
   14b74:	b	14b8c <__assert_fail@plt+0x37a8>
   14b78:	subs	r7, r7, #1
   14b7c:	beq	14bf4 <__assert_fail@plt+0x3810>
   14b80:	ldr	r2, [r9, #68]	; 0x44
   14b84:	cmp	r2, #0
   14b88:	beq	14efc <__assert_fail@plt+0x3b18>
   14b8c:	cmp	r3, #0
   14b90:	bne	14b78 <__assert_fail@plt+0x3794>
   14b94:	mov	r0, r4
   14b98:	str	r3, [r9, #92]	; 0x5c
   14b9c:	bl	136b4 <__assert_fail@plt+0x22d0>
   14ba0:	cmp	r0, #0
   14ba4:	beq	14ef0 <__assert_fail@plt+0x3b0c>
   14ba8:	ldr	r3, [r4, #8]
   14bac:	ldr	r1, [r9]
   14bb0:	cmp	r3, #0
   14bb4:	beq	14bc0 <__assert_fail@plt+0x37dc>
   14bb8:	cmp	r6, r1
   14bbc:	beq	14b78 <__assert_fail@plt+0x3794>
   14bc0:	ldr	r2, [r4, #24]
   14bc4:	add	fp, fp, #1
   14bc8:	subs	r7, r7, #1
   14bcc:	ldr	r0, [r9, #92]	; 0x5c
   14bd0:	ldr	ip, [r9, #140]	; 0x8c
   14bd4:	add	r2, r2, #1
   14bd8:	ldr	lr, [r9, #156]	; 0x9c
   14bdc:	str	r2, [r4, #24]
   14be0:	str	r6, [ip, r5]
   14be4:	mov	r6, r1
   14be8:	str	r0, [lr, r5]
   14bec:	lsl	r5, fp, #2
   14bf0:	bne	14b80 <__assert_fail@plt+0x379c>
   14bf4:	ldr	r3, [sp, #32]
   14bf8:	add	sl, sl, #1
   14bfc:	add	r4, r4, #40	; 0x28
   14c00:	mov	r1, r5
   14c04:	mov	r0, r6
   14c08:	cmp	sl, r3
   14c0c:	bgt	14c1c <__assert_fail@plt+0x3838>
   14c10:	ldr	r3, [r9, #68]	; 0x44
   14c14:	cmp	r3, #0
   14c18:	bne	14b60 <__assert_fail@plt+0x377c>
   14c1c:	mov	r2, r0
   14c20:	mov	r5, fp
   14c24:	ldrb	r0, [r9, #177]	; 0xb1
   14c28:	ldr	r3, [r8, #8]
   14c2c:	ldr	r4, [r9, #64]	; 0x40
   14c30:	b	14f18 <__assert_fail@plt+0x3b34>
   14c34:	bl	12848 <__assert_fail@plt+0x1464>
   14c38:	ldrb	r3, [r4, #20]
   14c3c:	cmp	r3, #0
   14c40:	beq	147f8 <__assert_fail@plt+0x3414>
   14c44:	b	148a8 <__assert_fail@plt+0x34c4>
   14c48:	ldrb	r3, [r9, #99]	; 0x63
   14c4c:	sub	fp, sl, fp
   14c50:	ldr	sl, [r9, #72]	; 0x48
   14c54:	cmp	r3, #0
   14c58:	bne	14cc8 <__assert_fail@plt+0x38e4>
   14c5c:	add	sl, sl, #1
   14c60:	cmp	fp, sl
   14c64:	blt	14cbc <__assert_fail@plt+0x38d8>
   14c68:	add	r3, fp, #1
   14c6c:	str	r8, [sp, #36]	; 0x24
   14c70:	mov	r8, r7
   14c74:	mov	r7, r4
   14c78:	mov	r4, r3
   14c7c:	ldr	r3, [sp, #16]
   14c80:	ldr	r0, [r3]
   14c84:	ldr	r2, [r0, #20]
   14c88:	ldr	r1, [r0, #24]
   14c8c:	cmp	r2, r1
   14c90:	addcc	r1, r2, #1
   14c94:	movcc	r3, #32
   14c98:	strcc	r1, [r0, #20]
   14c9c:	strbcc	r3, [r2]
   14ca0:	bcs	14ecc <__assert_fail@plt+0x3ae8>
   14ca4:	add	sl, sl, #1
   14ca8:	cmp	sl, r4
   14cac:	bne	14c7c <__assert_fail@plt+0x3898>
   14cb0:	mov	r4, r7
   14cb4:	mov	r7, r8
   14cb8:	ldr	r8, [sp, #36]	; 0x24
   14cbc:	str	fp, [r9, #72]	; 0x48
   14cc0:	str	r5, [r9, #148]	; 0x94
   14cc4:	b	14890 <__assert_fail@plt+0x34ac>
   14cc8:	sub	sl, fp, sl
   14ccc:	str	sl, [r9, #76]	; 0x4c
   14cd0:	b	14cc0 <__assert_fail@plt+0x38dc>
   14cd4:	mov	r0, sl
   14cd8:	bl	12ea0 <__assert_fail@plt+0x1abc>
   14cdc:	b	147a0 <__assert_fail@plt+0x33bc>
   14ce0:	ldr	r3, [r8, #8]
   14ce4:	ldr	r2, [r9, #64]	; 0x40
   14ce8:	cmp	r3, #0
   14cec:	beq	14984 <__assert_fail@plt+0x35a0>
   14cf0:	ldrb	r0, [r8, #41]	; 0x29
   14cf4:	cmp	r0, #0
   14cf8:	bne	14d68 <__assert_fail@plt+0x3984>
   14cfc:	mov	ip, r2
   14d00:	mov	r1, r0
   14d04:	mov	lr, r0
   14d08:	ldr	fp, [ip, #8]
   14d0c:	add	r1, r1, #1
   14d10:	add	ip, ip, #40	; 0x28
   14d14:	cmp	fp, #1
   14d18:	addls	lr, lr, #1
   14d1c:	cmp	r3, r1
   14d20:	bne	14d08 <__assert_fail@plt+0x3924>
   14d24:	cmp	lr, #0
   14d28:	bne	147c4 <__assert_fail@plt+0x33e0>
   14d2c:	cmp	sl, #0
   14d30:	beq	148d0 <__assert_fail@plt+0x34ec>
   14d34:	ldr	r3, [sp, #16]
   14d38:	ldr	r0, [r3]
   14d3c:	ldr	r3, [r0, #20]
   14d40:	ldr	r2, [r0, #24]
   14d44:	cmp	r3, r2
   14d48:	addcc	r1, r3, #1
   14d4c:	movcc	r2, #10
   14d50:	strcc	r1, [r0, #20]
   14d54:	strbcc	r2, [r3]
   14d58:	bcs	14ee4 <__assert_fail@plt+0x3b00>
   14d5c:	sub	r7, r7, #1
   14d60:	ldr	r3, [r8, #8]
   14d64:	b	148c0 <__assert_fail@plt+0x34dc>
   14d68:	mov	ip, #0
   14d6c:	mov	r1, r2
   14d70:	mov	lr, ip
   14d74:	ldr	fp, [r1, #8]
   14d78:	cmp	fp, #1
   14d7c:	bls	14d98 <__assert_fail@plt+0x39b4>
   14d80:	ldr	fp, [r1, #24]
   14d84:	cmp	fp, #0
   14d88:	ble	14d9c <__assert_fail@plt+0x39b8>
   14d8c:	ldr	fp, [r1, #28]
   14d90:	cmp	fp, #0
   14d94:	ble	14d9c <__assert_fail@plt+0x39b8>
   14d98:	add	lr, lr, #1
   14d9c:	add	ip, ip, #1
   14da0:	add	r1, r1, #40	; 0x28
   14da4:	cmp	r3, ip
   14da8:	bne	14d74 <__assert_fail@plt+0x3990>
   14dac:	cmp	lr, #0
   14db0:	bne	147c4 <__assert_fail@plt+0x33e0>
   14db4:	b	14d2c <__assert_fail@plt+0x3948>
   14db8:	ldrb	r3, [r9, #160]	; 0xa0
   14dbc:	cmp	r3, #0
   14dc0:	beq	147f8 <__assert_fail@plt+0x3414>
   14dc4:	ldr	fp, [r4, #16]
   14dc8:	ldr	sl, [r9, #84]	; 0x54
   14dcc:	str	fp, [r9, #148]	; 0x94
   14dd0:	cmp	fp, sl
   14dd4:	ble	14890 <__assert_fail@plt+0x34ac>
   14dd8:	ldrb	r3, [r9, #99]	; 0x63
   14ddc:	sub	fp, fp, sl
   14de0:	ldr	sl, [r9, #72]	; 0x48
   14de4:	cmp	r3, #0
   14de8:	bne	14cc8 <__assert_fail@plt+0x38e4>
   14dec:	add	sl, sl, #1
   14df0:	cmp	fp, sl
   14df4:	blt	14cbc <__assert_fail@plt+0x38d8>
   14df8:	mov	r2, r9
   14dfc:	add	r3, fp, #1
   14e00:	str	r8, [sp, #36]	; 0x24
   14e04:	mov	r9, r7
   14e08:	mov	r8, r4
   14e0c:	mov	r7, r6
   14e10:	mov	r4, r3
   14e14:	mov	r6, r2
   14e18:	ldr	r3, [sp, #16]
   14e1c:	ldr	r0, [r3]
   14e20:	ldr	r1, [r0, #20]
   14e24:	ldr	ip, [r0, #24]
   14e28:	cmp	r1, ip
   14e2c:	addcc	ip, r1, #1
   14e30:	movcc	r3, #32
   14e34:	strcc	ip, [r0, #20]
   14e38:	strbcc	r3, [r1]
   14e3c:	bcs	14ed8 <__assert_fail@plt+0x3af4>
   14e40:	add	sl, sl, #1
   14e44:	cmp	sl, r4
   14e48:	bne	14e18 <__assert_fail@plt+0x3a34>
   14e4c:	mov	r3, r6
   14e50:	mov	r4, r8
   14e54:	ldr	r8, [sp, #36]	; 0x24
   14e58:	mov	r6, r7
   14e5c:	mov	r7, r9
   14e60:	mov	r9, r3
   14e64:	b	14cbc <__assert_fail@plt+0x38d8>
   14e68:	subs	r1, r1, #1
   14e6c:	add	r2, r2, #40	; 0x28
   14e70:	str	lr, [r2, #-12]
   14e74:	bne	14668 <__assert_fail@plt+0x3284>
   14e78:	ldrb	r0, [r8, #41]	; 0x29
   14e7c:	cmp	r0, #0
   14e80:	beq	14690 <__assert_fail@plt+0x32ac>
   14e84:	mov	ip, #0
   14e88:	mov	r1, r4
   14e8c:	mov	r2, ip
   14e90:	ldr	lr, [r1, #8]
   14e94:	cmp	lr, #1
   14e98:	bls	14eb4 <__assert_fail@plt+0x3ad0>
   14e9c:	ldr	lr, [r1, #24]
   14ea0:	cmp	lr, #0
   14ea4:	ble	14eb8 <__assert_fail@plt+0x3ad4>
   14ea8:	ldr	lr, [r1, #28]
   14eac:	cmp	lr, #0
   14eb0:	ble	14eb8 <__assert_fail@plt+0x3ad4>
   14eb4:	add	r2, r2, #1
   14eb8:	add	ip, ip, #1
   14ebc:	add	r1, r1, #40	; 0x28
   14ec0:	cmp	r3, ip
   14ec4:	bne	14e90 <__assert_fail@plt+0x3aac>
   14ec8:	b	146b8 <__assert_fail@plt+0x32d4>
   14ecc:	mov	r1, #32
   14ed0:	bl	11348 <__overflow@plt>
   14ed4:	b	14ca4 <__assert_fail@plt+0x38c0>
   14ed8:	mov	r1, #32
   14edc:	bl	11348 <__overflow@plt>
   14ee0:	b	14e40 <__assert_fail@plt+0x3a5c>
   14ee4:	mov	r1, #10
   14ee8:	bl	11348 <__overflow@plt>
   14eec:	b	14d5c <__assert_fail@plt+0x3978>
   14ef0:	mov	r0, r4
   14ef4:	bl	12ea0 <__assert_fail@plt+0x1abc>
   14ef8:	b	14ba8 <__assert_fail@plt+0x37c4>
   14efc:	mov	r3, r5
   14f00:	ldrb	r0, [r9, #177]	; 0xb1
   14f04:	mov	r5, fp
   14f08:	mov	r1, r3
   14f0c:	mov	r2, r6
   14f10:	ldr	r3, [r8, #8]
   14f14:	ldr	r4, [r9, #64]	; 0x40
   14f18:	cmp	r0, #0
   14f1c:	sub	r7, r3, #1
   14f20:	ldr	r0, [r9, #140]	; 0x8c
   14f24:	str	r2, [r0, r1]
   14f28:	beq	15010 <__assert_fail@plt+0x3c2c>
   14f2c:	cmp	r3, #0
   14f30:	ble	14fa8 <__assert_fail@plt+0x3bc4>
   14f34:	sdiv	ip, r5, r3
   14f38:	mls	r5, r3, ip, r5
   14f3c:	add	lr, ip, #1
   14f40:	cmp	r5, #0
   14f44:	movle	r0, #0
   14f48:	movle	r2, r4
   14f4c:	movle	r1, #1
   14f50:	ble	14f8c <__assert_fail@plt+0x3ba8>
   14f54:	cmp	r5, r3
   14f58:	mov	r0, #0
   14f5c:	movge	r5, r3
   14f60:	mov	r2, r4
   14f64:	mov	r1, #1
   14f68:	add	r1, r1, #1
   14f6c:	add	r2, r2, #40	; 0x28
   14f70:	str	r0, [r2, #-20]	; 0xffffffec
   14f74:	cmp	r1, r5
   14f78:	add	r0, r0, lr
   14f7c:	str	lr, [r2, #-16]
   14f80:	ble	14f68 <__assert_fail@plt+0x3b84>
   14f84:	cmp	r1, r3
   14f88:	bgt	14fa8 <__assert_fail@plt+0x3bc4>
   14f8c:	add	r1, r1, #1
   14f90:	add	r2, r2, #40	; 0x28
   14f94:	str	r0, [r2, #-20]	; 0xffffffec
   14f98:	cmp	r1, r3
   14f9c:	add	r0, r0, ip
   14fa0:	str	ip, [r2, #-16]
   14fa4:	ble	14f8c <__assert_fail@plt+0x3ba8>
   14fa8:	cmp	r7, #0
   14fac:	moveq	r2, r4
   14fb0:	beq	14fe4 <__assert_fail@plt+0x3c00>
   14fb4:	mov	r2, r4
   14fb8:	ldr	r1, [r2, #24]
   14fbc:	subs	r7, r7, #1
   14fc0:	add	r2, r2, #40	; 0x28
   14fc4:	str	r1, [r2, #-12]
   14fc8:	bne	14fb8 <__assert_fail@plt+0x3bd4>
   14fcc:	ldr	r1, [sp, #36]	; 0x24
   14fd0:	add	r2, r3, r3, lsl #2
   14fd4:	add	r2, r4, r2, lsl #3
   14fd8:	sub	r2, r2, #40	; 0x28
   14fdc:	cmp	r1, #0
   14fe0:	beq	15028 <__assert_fail@plt+0x3c44>
   14fe4:	ldr	r1, [r2, #24]
   14fe8:	str	r1, [r2, #28]
   14fec:	cmp	r3, #0
   14ff0:	bne	14684 <__assert_fail@plt+0x32a0>
   14ff4:	b	141e8 <__assert_fail@plt+0x2e04>
   14ff8:	mov	r1, #10
   14ffc:	bl	11348 <__overflow@plt>
   15000:	b	14960 <__assert_fail@plt+0x357c>
   15004:	mov	r7, r2
   15008:	ldr	r2, [r9, #140]	; 0x8c
   1500c:	str	r0, [r2]
   15010:	cmp	r7, #0
   15014:	moveq	r2, r4
   15018:	beq	15028 <__assert_fail@plt+0x3c44>
   1501c:	mov	r2, #0
   15020:	str	r2, [sp, #36]	; 0x24
   15024:	b	14fb4 <__assert_fail@plt+0x3bd0>
   15028:	ldr	r1, [r2, #8]
   1502c:	cmp	r1, #0
   15030:	ldreq	r1, [r9, #172]	; 0xac
   15034:	movne	r1, #0
   15038:	str	r1, [r2, #28]
   1503c:	b	14fec <__assert_fail@plt+0x3c08>
   15040:	cmp	r3, #0
   15044:	strgt	r3, [sp, #32]
   15048:	bgt	14b14 <__assert_fail@plt+0x3730>
   1504c:	ldr	r1, [r9, #140]	; 0x8c
   15050:	sub	r7, r3, #1
   15054:	str	r2, [r1]
   15058:	b	14fa8 <__assert_fail@plt+0x3bc4>
   1505c:	ldrb	r3, [r9, #180]	; 0xb4
   15060:	cmp	r3, #0
   15064:	bne	150b0 <__assert_fail@plt+0x3ccc>
   15068:	adds	r7, r7, #5
   1506c:	beq	14a40 <__assert_fail@plt+0x365c>
   15070:	mov	r5, #10
   15074:	ldr	r4, [sp, #16]
   15078:	b	15084 <__assert_fail@plt+0x3ca0>
   1507c:	subs	r7, r7, #1
   15080:	beq	14a40 <__assert_fail@plt+0x365c>
   15084:	ldr	r0, [r4]
   15088:	ldr	r3, [r0, #20]
   1508c:	ldr	r2, [r0, #24]
   15090:	cmp	r3, r2
   15094:	addcc	r2, r3, #1
   15098:	strcc	r2, [r0, #20]
   1509c:	strbcc	r5, [r3]
   150a0:	bcc	1507c <__assert_fail@plt+0x3c98>
   150a4:	mov	r1, #10
   150a8:	bl	11348 <__overflow@plt>
   150ac:	b	1507c <__assert_fail@plt+0x3c98>
   150b0:	ldr	r3, [sp, #16]
   150b4:	ldr	r0, [r3]
   150b8:	ldr	r3, [r0, #20]
   150bc:	ldr	r2, [r0, #24]
   150c0:	cmp	r3, r2
   150c4:	addcc	r1, r3, #1
   150c8:	movcc	r2, #12
   150cc:	strcc	r1, [r0, #20]
   150d0:	strbcc	r2, [r3]
   150d4:	bcc	14a40 <__assert_fail@plt+0x365c>
   150d8:	mov	r1, #12
   150dc:	bl	11348 <__overflow@plt>
   150e0:	b	14a40 <__assert_fail@plt+0x365c>
   150e4:	ldr	lr, [r9, #84]	; 0x54
   150e8:	cmp	r3, #1
   150ec:	add	r2, r2, lr
   150f0:	ble	151a8 <__assert_fail@plt+0x3dc4>
   150f4:	ldr	r1, [sp, #36]	; 0x24
   150f8:	movw	ip, #11112	; 0x2b68
   150fc:	movt	ip, #1
   15100:	movw	fp, #14004	; 0x36b4
   15104:	movt	fp, #1
   15108:	movw	r0, #8828	; 0x227c
   1510c:	movt	r0, #1
   15110:	str	ip, [sp, #16]
   15114:	cmp	r1, #0
   15118:	movw	r1, #13364	; 0x3434
   1511c:	movt	r1, #1
   15120:	moveq	r0, ip
   15124:	moveq	r1, fp
   15128:	add	r6, r7, lr
   1512c:	add	r5, r5, lr
   15130:	mov	ip, r4
   15134:	mov	lr, #1
   15138:	mov	r7, #0
   1513c:	str	r6, [sp, #32]
   15140:	add	lr, lr, #1
   15144:	add	ip, ip, #40	; 0x28
   15148:	str	r1, [ip, #-28]	; 0xffffffe4
   1514c:	cmp	lr, r3
   15150:	str	r0, [ip, #-24]	; 0xffffffe8
   15154:	str	r2, [ip, #-8]
   15158:	mov	r2, r6
   1515c:	add	r6, r6, r5
   15160:	strb	r7, [ip, #-4]
   15164:	bne	15140 <__assert_fail@plt+0x3d5c>
   15168:	ldr	r0, [sp, #32]
   1516c:	add	r1, r3, r3, lsl #2
   15170:	sub	r2, r3, #2
   15174:	add	r1, r4, r1, lsl #3
   15178:	sub	r1, r1, #40	; 0x28
   1517c:	mla	r2, r5, r2, r0
   15180:	b	14180 <__assert_fail@plt+0x2d9c>
   15184:	bne	149f8 <__assert_fail@plt+0x3614>
   15188:	cmp	r3, #0
   1518c:	strble	r7, [r9, #144]	; 0x90
   15190:	ble	149f8 <__assert_fail@plt+0x3614>
   15194:	str	r7, [sp, #32]
   15198:	b	149b0 <__assert_fail@plt+0x35cc>
   1519c:	mov	r1, #12
   151a0:	bl	11348 <__overflow@plt>
   151a4:	b	14a38 <__assert_fail@plt+0x3654>
   151a8:	ldr	r1, [sp, #36]	; 0x24
   151ac:	cmp	r1, #0
   151b0:	movne	r1, r4
   151b4:	movne	r6, #1
   151b8:	bne	1403c <__assert_fail@plt+0x2c58>
   151bc:	movw	ip, #14004	; 0x36b4
   151c0:	movt	ip, #1
   151c4:	movw	r0, #11112	; 0x2b68
   151c8:	movt	r0, #1
   151cc:	mov	r1, r4
   151d0:	mov	r6, #1
   151d4:	b	1406c <__assert_fail@plt+0x2c88>
   151d8:	ldrb	r3, [r8, #41]	; 0x29
   151dc:	ldr	r4, [r9, #64]	; 0x40
   151e0:	str	r3, [sp, #36]	; 0x24
   151e4:	ldr	r3, [r8, #8]
   151e8:	b	143bc <__assert_fail@plt+0x2fd8>
   151ec:	mov	r3, #0
   151f0:	str	r3, [r9, #164]	; 0xa4
   151f4:	movw	r1, #368	; 0x170
   151f8:	movt	r1, #2
   151fc:	mov	r2, #5
   15200:	mov	r0, #0
   15204:	bl	11168 <dcgettext@plt>
   15208:	mov	r2, r0
   1520c:	mov	r1, #0
   15210:	mov	r0, #1
   15214:	bl	11204 <error@plt>
   15218:	movw	r1, #392	; 0x188
   1521c:	movt	r1, #2
   15220:	b	151fc <__assert_fail@plt+0x3e18>
   15224:	subs	r6, r0, #0
   15228:	str	r7, [sp, #-8]!
   1522c:	str	lr, [sp, #4]
   15230:	sub	sp, sp, #56	; 0x38
   15234:	beq	1527c <__assert_fail@plt+0x3e98>
   15238:	movw	r3, #8664	; 0x21d8
   1523c:	movt	r3, #3
   15240:	ldr	r4, [r3]
   15244:	mov	r2, #5
   15248:	movw	r1, #468	; 0x1d4
   1524c:	movt	r1, #2
   15250:	mov	r0, #0
   15254:	bl	11168 <dcgettext@plt>
   15258:	movw	r3, #8880	; 0x22b0
   1525c:	movt	r3, #3
   15260:	mov	r2, r0
   15264:	mov	r1, #1
   15268:	ldr	r3, [r3]
   1526c:	mov	r0, r4
   15270:	bl	1130c <__fprintf_chk@plt>
   15274:	mov	r0, r6
   15278:	bl	11288 <exit@plt>
   1527c:	mov	r2, #5
   15280:	movw	r1, #508	; 0x1fc
   15284:	movt	r1, #2
   15288:	movw	r7, #8676	; 0x21e4
   1528c:	movt	r7, #3
   15290:	bl	11168 <dcgettext@plt>
   15294:	movw	r3, #8880	; 0x22b0
   15298:	movt	r3, #3
   1529c:	mov	r1, r0
   152a0:	mov	r0, #1
   152a4:	ldr	r2, [r3]
   152a8:	bl	112f4 <__printf_chk@plt>
   152ac:	mov	r2, #5
   152b0:	movw	r1, #544	; 0x220
   152b4:	movt	r1, #2
   152b8:	mov	r0, r6
   152bc:	bl	11168 <dcgettext@plt>
   152c0:	ldr	r1, [r7]
   152c4:	bl	1109c <fputs_unlocked@plt>
   152c8:	mov	r2, #5
   152cc:	movw	r1, #592	; 0x250
   152d0:	movt	r1, #2
   152d4:	mov	r0, r6
   152d8:	bl	11168 <dcgettext@plt>
   152dc:	ldr	r1, [r7]
   152e0:	bl	1109c <fputs_unlocked@plt>
   152e4:	mov	r2, #5
   152e8:	movw	r1, #648	; 0x288
   152ec:	movt	r1, #2
   152f0:	mov	r0, r6
   152f4:	bl	11168 <dcgettext@plt>
   152f8:	ldr	r1, [r7]
   152fc:	bl	1109c <fputs_unlocked@plt>
   15300:	mov	r2, #5
   15304:	movw	r1, #724	; 0x2d4
   15308:	movt	r1, #2
   1530c:	mov	r0, r6
   15310:	bl	11168 <dcgettext@plt>
   15314:	ldr	r1, [r7]
   15318:	bl	1109c <fputs_unlocked@plt>
   1531c:	mov	r2, #5
   15320:	movw	r1, #1060	; 0x424
   15324:	movt	r1, #2
   15328:	mov	r0, r6
   1532c:	bl	11168 <dcgettext@plt>
   15330:	ldr	r1, [r7]
   15334:	bl	1109c <fputs_unlocked@plt>
   15338:	mov	r2, #5
   1533c:	movw	r1, #1332	; 0x534
   15340:	movt	r1, #2
   15344:	mov	r0, r6
   15348:	bl	11168 <dcgettext@plt>
   1534c:	ldr	r1, [r7]
   15350:	bl	1109c <fputs_unlocked@plt>
   15354:	mov	r2, #5
   15358:	movw	r1, #1732	; 0x6c4
   1535c:	movt	r1, #2
   15360:	mov	r0, r6
   15364:	bl	11168 <dcgettext@plt>
   15368:	ldr	r1, [r7]
   1536c:	bl	1109c <fputs_unlocked@plt>
   15370:	mov	r2, #5
   15374:	movw	r1, #2160	; 0x870
   15378:	movt	r1, #2
   1537c:	mov	r0, r6
   15380:	bl	11168 <dcgettext@plt>
   15384:	ldr	r1, [r7]
   15388:	bl	1109c <fputs_unlocked@plt>
   1538c:	mov	r2, #5
   15390:	movw	r1, #2380	; 0x94c
   15394:	movt	r1, #2
   15398:	mov	r0, r6
   1539c:	bl	11168 <dcgettext@plt>
   153a0:	ldr	r1, [r7]
   153a4:	bl	1109c <fputs_unlocked@plt>
   153a8:	mov	r2, #5
   153ac:	movw	r1, #2524	; 0x9dc
   153b0:	movt	r1, #2
   153b4:	mov	r0, r6
   153b8:	bl	11168 <dcgettext@plt>
   153bc:	ldr	r1, [r7]
   153c0:	bl	1109c <fputs_unlocked@plt>
   153c4:	mov	r2, #5
   153c8:	movw	r1, #2872	; 0xb38
   153cc:	movt	r1, #2
   153d0:	mov	r0, r6
   153d4:	bl	11168 <dcgettext@plt>
   153d8:	ldr	r1, [r7]
   153dc:	bl	1109c <fputs_unlocked@plt>
   153e0:	mov	r2, #5
   153e4:	movw	r1, #3128	; 0xc38
   153e8:	movt	r1, #2
   153ec:	mov	r0, r6
   153f0:	bl	11168 <dcgettext@plt>
   153f4:	ldr	r1, [r7]
   153f8:	bl	1109c <fputs_unlocked@plt>
   153fc:	mov	r2, #5
   15400:	movw	r1, #3456	; 0xd80
   15404:	movt	r1, #2
   15408:	mov	r0, r6
   1540c:	bl	11168 <dcgettext@plt>
   15410:	ldr	r1, [r7]
   15414:	bl	1109c <fputs_unlocked@plt>
   15418:	mov	r2, #5
   1541c:	movw	r1, #3692	; 0xe6c
   15420:	movt	r1, #2
   15424:	mov	r0, r6
   15428:	bl	11168 <dcgettext@plt>
   1542c:	ldr	r1, [r7]
   15430:	bl	1109c <fputs_unlocked@plt>
   15434:	mov	r2, #5
   15438:	movw	r1, #3796	; 0xed4
   1543c:	movt	r1, #2
   15440:	mov	r0, r6
   15444:	bl	11168 <dcgettext@plt>
   15448:	ldr	r1, [r7]
   1544c:	bl	1109c <fputs_unlocked@plt>
   15450:	mov	r2, #5
   15454:	movw	r1, #4200	; 0x1068
   15458:	movt	r1, #2
   1545c:	mov	r0, r6
   15460:	bl	11168 <dcgettext@plt>
   15464:	ldr	r1, [r7]
   15468:	bl	1109c <fputs_unlocked@plt>
   1546c:	mov	r2, #5
   15470:	movw	r1, #4416	; 0x1140
   15474:	movt	r1, #2
   15478:	mov	r0, r6
   1547c:	bl	11168 <dcgettext@plt>
   15480:	ldr	r1, [r7]
   15484:	bl	1109c <fputs_unlocked@plt>
   15488:	mov	r2, #5
   1548c:	movw	r1, #4464	; 0x1170
   15490:	movt	r1, #2
   15494:	mov	r0, r6
   15498:	bl	11168 <dcgettext@plt>
   1549c:	ldr	r1, [r7]
   154a0:	bl	1109c <fputs_unlocked@plt>
   154a4:	ldr	lr, [pc, #560]	; 156dc <__assert_fail@plt+0x42f8>
   154a8:	ldr	ip, [lr]
   154ac:	ldr	r4, [lr, #4]
   154b0:	ldrd	r8, [lr, #8]
   154b4:	subs	r1, ip, #0
   154b8:	str	ip, [sp]
   154bc:	ldrd	r2, [lr, #16]
   154c0:	str	r4, [sp, #4]
   154c4:	ldrd	r4, [lr, #24]
   154c8:	strd	r8, [sp, #8]
   154cc:	ldrd	r8, [lr, #32]
   154d0:	strd	r2, [sp, #16]
   154d4:	ldrd	r2, [lr, #40]	; 0x28
   154d8:	strd	r4, [sp, #24]
   154dc:	ldrd	r4, [lr, #48]	; 0x30
   154e0:	strd	r8, [sp, #32]
   154e4:	strd	r2, [sp, #40]	; 0x28
   154e8:	strd	r4, [sp, #48]	; 0x30
   154ec:	movwne	r5, #464	; 0x1d0
   154f0:	mov	r4, sp
   154f4:	movtne	r5, #2
   154f8:	bne	155f0 <__assert_fail@plt+0x420c>
   154fc:	ldr	r4, [r4, #4]
   15500:	movw	r1, #4520	; 0x11a8
   15504:	movt	r1, #2
   15508:	mov	r2, #5
   1550c:	cmp	r4, #0
   15510:	beq	15604 <__assert_fail@plt+0x4220>
   15514:	mov	r0, #0
   15518:	bl	11168 <dcgettext@plt>
   1551c:	mov	r1, r0
   15520:	movw	r3, #4544	; 0x11c0
   15524:	movt	r3, #2
   15528:	movw	r2, #4584	; 0x11e8
   1552c:	movt	r2, #2
   15530:	mov	r0, #1
   15534:	bl	112f4 <__printf_chk@plt>
   15538:	mov	r1, #0
   1553c:	mov	r0, #5
   15540:	bl	11354 <setlocale@plt>
   15544:	cmp	r0, #0
   15548:	movweq	r5, #464	; 0x1d0
   1554c:	movteq	r5, #2
   15550:	beq	15574 <__assert_fail@plt+0x4190>
   15554:	movw	r1, #4600	; 0x11f8
   15558:	movt	r1, #2
   1555c:	mov	r2, #3
   15560:	movw	r5, #464	; 0x1d0
   15564:	movt	r5, #2
   15568:	bl	113c0 <strncmp@plt>
   1556c:	cmp	r0, #0
   15570:	bne	156bc <__assert_fail@plt+0x42d8>
   15574:	mov	r2, #5
   15578:	movw	r1, #4676	; 0x1244
   1557c:	movt	r1, #2
   15580:	mov	r0, #0
   15584:	bl	11168 <dcgettext@plt>
   15588:	mov	r1, r0
   1558c:	movw	r3, #464	; 0x1d0
   15590:	movt	r3, #2
   15594:	movw	r2, #4544	; 0x11c0
   15598:	movt	r2, #2
   1559c:	mov	r0, #1
   155a0:	bl	112f4 <__printf_chk@plt>
   155a4:	mov	r2, #5
   155a8:	movw	r1, #4704	; 0x1260
   155ac:	movt	r1, #2
   155b0:	mov	r0, #0
   155b4:	bl	11168 <dcgettext@plt>
   155b8:	movw	r2, #5352	; 0x14e8
   155bc:	movt	r2, #2
   155c0:	cmp	r4, r5
   155c4:	movw	r3, #356	; 0x164
   155c8:	movt	r3, #2
   155cc:	mov	r1, r0
   155d0:	moveq	r3, r2
   155d4:	mov	r2, r4
   155d8:	mov	r0, #1
   155dc:	bl	112f4 <__printf_chk@plt>
   155e0:	b	15274 <__assert_fail@plt+0x3e90>
   155e4:	ldr	r1, [r4, #8]!
   155e8:	cmp	r1, #0
   155ec:	beq	154fc <__assert_fail@plt+0x4118>
   155f0:	mov	r0, r5
   155f4:	bl	110c0 <strcmp@plt>
   155f8:	cmp	r0, #0
   155fc:	bne	155e4 <__assert_fail@plt+0x4200>
   15600:	b	154fc <__assert_fail@plt+0x4118>
   15604:	mov	r0, r4
   15608:	bl	11168 <dcgettext@plt>
   1560c:	mov	r1, r0
   15610:	movw	r3, #4544	; 0x11c0
   15614:	movt	r3, #2
   15618:	movw	r2, #4584	; 0x11e8
   1561c:	movt	r2, #2
   15620:	mov	r0, #1
   15624:	bl	112f4 <__printf_chk@plt>
   15628:	mov	r1, r4
   1562c:	mov	r0, #5
   15630:	bl	11354 <setlocale@plt>
   15634:	cmp	r0, #0
   15638:	beq	15654 <__assert_fail@plt+0x4270>
   1563c:	movw	r1, #4600	; 0x11f8
   15640:	movt	r1, #2
   15644:	mov	r2, #3
   15648:	bl	113c0 <strncmp@plt>
   1564c:	cmp	r0, #0
   15650:	bne	156b0 <__assert_fail@plt+0x42cc>
   15654:	mov	r2, #5
   15658:	movw	r1, #4676	; 0x1244
   1565c:	movt	r1, #2
   15660:	mov	r0, #0
   15664:	bl	11168 <dcgettext@plt>
   15668:	mov	r1, r0
   1566c:	movw	r3, #464	; 0x1d0
   15670:	movt	r3, #2
   15674:	movw	r2, #4544	; 0x11c0
   15678:	movt	r2, #2
   1567c:	mov	r0, #1
   15680:	bl	112f4 <__printf_chk@plt>
   15684:	movw	r1, #4704	; 0x1260
   15688:	movt	r1, #2
   1568c:	mov	r2, #5
   15690:	mov	r0, #0
   15694:	bl	11168 <dcgettext@plt>
   15698:	movw	r4, #464	; 0x1d0
   1569c:	movt	r4, #2
   156a0:	movw	r3, #5352	; 0x14e8
   156a4:	movt	r3, #2
   156a8:	mov	r1, r0
   156ac:	b	155d4 <__assert_fail@plt+0x41f0>
   156b0:	movw	r5, #464	; 0x1d0
   156b4:	movt	r5, #2
   156b8:	mov	r4, r5
   156bc:	mov	r2, #5
   156c0:	movw	r1, #4604	; 0x11fc
   156c4:	movt	r1, #2
   156c8:	mov	r0, #0
   156cc:	bl	11168 <dcgettext@plt>
   156d0:	ldr	r1, [r7]
   156d4:	bl	1109c <fputs_unlocked@plt>
   156d8:	b	15574 <__assert_fail@plt+0x4190>
   156dc:	andeq	r0, r2, r8, ror r0
   156e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   156e4:	mov	r5, r3
   156e8:	mov	r4, r0
   156ec:	strd	r6, [sp, #8]
   156f0:	mov	r6, r1
   156f4:	str	lr, [sp, #16]
   156f8:	sub	sp, sp, #20
   156fc:	ldrb	r1, [r0]
   15700:	sub	r3, r1, #48	; 0x30
   15704:	cmp	r3, #9
   15708:	bls	15718 <__assert_fail@plt+0x4334>
   1570c:	strb	r1, [r2]
   15710:	add	r4, r0, #1
   15714:	ldrb	r1, [r0, #1]
   15718:	cmp	r1, #0
   1571c:	bne	15734 <__assert_fail@plt+0x4350>
   15720:	add	sp, sp, #20
   15724:	ldrd	r4, [sp]
   15728:	ldrd	r6, [sp, #8]
   1572c:	add	sp, sp, #16
   15730:	pop	{pc}		; (ldr pc, [sp], #4)
   15734:	movw	r0, #356	; 0x164
   15738:	movt	r0, #2
   1573c:	add	r3, sp, #12
   15740:	mov	r2, #10
   15744:	mov	r1, #0
   15748:	str	r0, [sp]
   1574c:	mov	r0, r4
   15750:	bl	1e350 <__assert_fail@plt+0xcf6c>
   15754:	cmp	r0, #0
   15758:	bne	15770 <__assert_fail@plt+0x438c>
   1575c:	ldr	r3, [sp, #12]
   15760:	cmp	r3, #0
   15764:	ble	15770 <__assert_fail@plt+0x438c>
   15768:	str	r3, [r5]
   1576c:	b	15720 <__assert_fail@plt+0x433c>
   15770:	bl	112c4 <__errno_location@plt>
   15774:	ldr	r7, [r0]
   15778:	mov	r2, #5
   1577c:	movw	r1, #4756	; 0x1294
   15780:	movt	r1, #2
   15784:	mov	r0, #0
   15788:	bl	11168 <dcgettext@plt>
   1578c:	mov	r5, r0
   15790:	mov	r0, r4
   15794:	bl	1ba4c <__assert_fail@plt+0xa668>
   15798:	mov	r1, r7
   1579c:	mov	r2, r5
   157a0:	str	r0, [sp]
   157a4:	mov	r3, r6
   157a8:	mov	r0, #0
   157ac:	bl	11204 <error@plt>
   157b0:	mov	r0, #1
   157b4:	bl	15224 <__assert_fail@plt+0x3e40>
   157b8:	movw	r3, #8872	; 0x22a8
   157bc:	movt	r3, #3
   157c0:	str	r0, [r3]
   157c4:	bx	lr
   157c8:	movw	r3, #8872	; 0x22a8
   157cc:	movt	r3, #3
   157d0:	strb	r0, [r3, #4]
   157d4:	bx	lr
   157d8:	movw	r3, #8676	; 0x21e4
   157dc:	movt	r3, #3
   157e0:	strd	r4, [sp, #-16]!
   157e4:	ldr	r0, [r3]
   157e8:	str	r6, [sp, #8]
   157ec:	str	lr, [sp, #12]
   157f0:	sub	sp, sp, #8
   157f4:	bl	1f894 <__assert_fail@plt+0xe4b0>
   157f8:	cmp	r0, #0
   157fc:	beq	15828 <__assert_fail@plt+0x4444>
   15800:	movw	r4, #8872	; 0x22a8
   15804:	movt	r4, #3
   15808:	ldrb	r6, [r4, #4]
   1580c:	bl	112c4 <__errno_location@plt>
   15810:	mov	r5, r0
   15814:	cmp	r6, #0
   15818:	beq	15854 <__assert_fail@plt+0x4470>
   1581c:	ldr	r3, [r0]
   15820:	cmp	r3, #32
   15824:	bne	15854 <__assert_fail@plt+0x4470>
   15828:	movw	r3, #8664	; 0x21d8
   1582c:	movt	r3, #3
   15830:	ldr	r0, [r3]
   15834:	bl	1f894 <__assert_fail@plt+0xe4b0>
   15838:	cmp	r0, #0
   1583c:	bne	1589c <__assert_fail@plt+0x44b8>
   15840:	add	sp, sp, #8
   15844:	ldrd	r4, [sp]
   15848:	ldr	r6, [sp, #8]
   1584c:	add	sp, sp, #12
   15850:	pop	{pc}		; (ldr pc, [sp], #4)
   15854:	movw	r1, #5784	; 0x1698
   15858:	movt	r1, #2
   1585c:	mov	r2, #5
   15860:	mov	r0, #0
   15864:	bl	11168 <dcgettext@plt>
   15868:	mov	r6, r0
   1586c:	ldr	r0, [r4]
   15870:	cmp	r0, #0
   15874:	beq	158ac <__assert_fail@plt+0x44c8>
   15878:	ldr	r4, [r5]
   1587c:	bl	1aed0 <__assert_fail@plt+0x9aec>
   15880:	mov	r3, r0
   15884:	movw	r2, #5796	; 0x16a4
   15888:	movt	r2, #2
   1588c:	mov	r0, #0
   15890:	str	r6, [sp]
   15894:	mov	r1, r4
   15898:	bl	11204 <error@plt>
   1589c:	movw	r3, #8576	; 0x2180
   158a0:	movt	r3, #3
   158a4:	ldr	r0, [r3]
   158a8:	bl	11120 <_exit@plt>
   158ac:	mov	r3, r6
   158b0:	movw	r2, #5800	; 0x16a8
   158b4:	movt	r2, #2
   158b8:	ldr	r1, [r5]
   158bc:	bl	11204 <error@plt>
   158c0:	b	1589c <__assert_fail@plt+0x44b8>
   158c4:	b	110d8 <posix_fadvise64@plt>
   158c8:	cmp	r0, #0
   158cc:	bxeq	lr
   158d0:	str	r4, [sp, #-16]!
   158d4:	mov	r4, r1
   158d8:	strd	r6, [sp, #4]
   158dc:	mov	r6, #0
   158e0:	mov	r7, #0
   158e4:	str	lr, [sp, #12]
   158e8:	sub	sp, sp, #16
   158ec:	bl	11300 <fileno@plt>
   158f0:	mov	r2, r6
   158f4:	mov	r3, r7
   158f8:	strd	r6, [sp]
   158fc:	str	r4, [sp, #8]
   15900:	bl	110d8 <posix_fadvise64@plt>
   15904:	add	sp, sp, #16
   15908:	ldr	r4, [sp]
   1590c:	ldrd	r6, [sp, #4]
   15910:	add	sp, sp, #12
   15914:	pop	{pc}		; (ldr pc, [sp], #4)
   15918:	strd	r4, [sp, #-12]!
   1591c:	mov	r4, r0
   15920:	str	lr, [sp, #8]
   15924:	sub	sp, sp, #12
   15928:	bl	11300 <fileno@plt>
   1592c:	cmp	r0, #0
   15930:	mov	r0, r4
   15934:	blt	159b8 <__assert_fail@plt+0x45d4>
   15938:	bl	11240 <__freading@plt>
   1593c:	cmp	r0, #0
   15940:	bne	15984 <__assert_fail@plt+0x45a0>
   15944:	mov	r0, r4
   15948:	bl	159cc <__assert_fail@plt+0x45e8>
   1594c:	cmp	r0, #0
   15950:	beq	159b4 <__assert_fail@plt+0x45d0>
   15954:	bl	112c4 <__errno_location@plt>
   15958:	mov	r5, r0
   1595c:	mov	r0, r4
   15960:	ldr	r4, [r5]
   15964:	bl	11318 <fclose@plt>
   15968:	cmp	r4, #0
   1596c:	mvnne	r0, #0
   15970:	strne	r4, [r5]
   15974:	add	sp, sp, #12
   15978:	ldrd	r4, [sp]
   1597c:	add	sp, sp, #8
   15980:	pop	{pc}		; (ldr pc, [sp], #4)
   15984:	mov	r0, r4
   15988:	bl	11300 <fileno@plt>
   1598c:	mov	r1, #1
   15990:	mov	r2, #0
   15994:	mov	r3, #0
   15998:	str	r1, [sp]
   1599c:	bl	111d4 <lseek64@plt>
   159a0:	mvn	r3, #0
   159a4:	mvn	r2, #0
   159a8:	cmp	r1, r3
   159ac:	cmpeq	r0, r2
   159b0:	bne	15944 <__assert_fail@plt+0x4560>
   159b4:	mov	r0, r4
   159b8:	add	sp, sp, #12
   159bc:	ldrd	r4, [sp]
   159c0:	ldr	lr, [sp, #8]
   159c4:	add	sp, sp, #12
   159c8:	b	11318 <fclose@plt>
   159cc:	str	r4, [sp, #-8]!
   159d0:	subs	r4, r0, #0
   159d4:	str	lr, [sp, #4]
   159d8:	sub	sp, sp, #8
   159dc:	beq	159f8 <__assert_fail@plt+0x4614>
   159e0:	bl	11240 <__freading@plt>
   159e4:	cmp	r0, #0
   159e8:	beq	159f8 <__assert_fail@plt+0x4614>
   159ec:	ldr	r3, [r4]
   159f0:	tst	r3, #256	; 0x100
   159f4:	bne	15a10 <__assert_fail@plt+0x462c>
   159f8:	mov	r0, r4
   159fc:	add	sp, sp, #8
   15a00:	ldr	r4, [sp]
   15a04:	ldr	lr, [sp, #4]
   15a08:	add	sp, sp, #8
   15a0c:	b	110f0 <fflush@plt>
   15a10:	mov	r1, #1
   15a14:	mov	r2, #0
   15a18:	mov	r3, #0
   15a1c:	mov	r0, r4
   15a20:	str	r1, [sp]
   15a24:	bl	15b38 <__assert_fail@plt+0x4754>
   15a28:	b	159f8 <__assert_fail@plt+0x4614>
   15a2c:	strd	r4, [sp, #-16]!
   15a30:	mov	r5, r1
   15a34:	str	r6, [sp, #8]
   15a38:	str	lr, [sp, #12]
   15a3c:	bl	1139c <fopen64@plt>
   15a40:	subs	r4, r0, #0
   15a44:	beq	15a54 <__assert_fail@plt+0x4670>
   15a48:	bl	11300 <fileno@plt>
   15a4c:	cmp	r0, #2
   15a50:	bls	15a68 <__assert_fail@plt+0x4684>
   15a54:	mov	r0, r4
   15a58:	ldrd	r4, [sp]
   15a5c:	ldr	r6, [sp, #8]
   15a60:	add	sp, sp, #12
   15a64:	pop	{pc}		; (ldr pc, [sp], #4)
   15a68:	bl	1c2d4 <__assert_fail@plt+0xaef0>
   15a6c:	subs	r6, r0, #0
   15a70:	blt	15ab8 <__assert_fail@plt+0x46d4>
   15a74:	mov	r0, r4
   15a78:	bl	15918 <__assert_fail@plt+0x4534>
   15a7c:	cmp	r0, #0
   15a80:	bne	15a98 <__assert_fail@plt+0x46b4>
   15a84:	mov	r1, r5
   15a88:	mov	r0, r6
   15a8c:	bl	11084 <fdopen@plt>
   15a90:	subs	r4, r0, #0
   15a94:	bne	15a54 <__assert_fail@plt+0x4670>
   15a98:	bl	112c4 <__errno_location@plt>
   15a9c:	mov	r5, r0
   15aa0:	mov	r0, r6
   15aa4:	ldr	r6, [r5]
   15aa8:	mov	r4, #0
   15aac:	bl	113d8 <close@plt>
   15ab0:	str	r6, [r5]
   15ab4:	b	15a54 <__assert_fail@plt+0x4670>
   15ab8:	bl	112c4 <__errno_location@plt>
   15abc:	mov	r5, r0
   15ac0:	mov	r0, r4
   15ac4:	ldr	r6, [r5]
   15ac8:	mov	r4, #0
   15acc:	bl	15918 <__assert_fail@plt+0x4534>
   15ad0:	str	r6, [r5]
   15ad4:	b	15a54 <__assert_fail@plt+0x4670>
   15ad8:	strd	r4, [sp, #-12]!
   15adc:	mov	r5, r0
   15ae0:	str	lr, [sp, #8]
   15ae4:	sub	sp, sp, #12
   15ae8:	bl	112c4 <__errno_location@plt>
   15aec:	mov	r4, r0
   15af0:	mov	r2, #0
   15af4:	ldr	r3, [r4]
   15af8:	mov	r0, r5
   15afc:	str	r2, [r4]
   15b00:	str	r3, [sp]
   15b04:	str	r3, [sp, #4]
   15b08:	bl	11108 <free@plt>
   15b0c:	ldr	r3, [r4]
   15b10:	add	r2, sp, #8
   15b14:	clz	r3, r3
   15b18:	lsr	r3, r3, #5
   15b1c:	add	r3, r2, r3, lsl #2
   15b20:	ldr	r3, [r3, #-8]
   15b24:	str	r3, [r4]
   15b28:	add	sp, sp, #12
   15b2c:	ldrd	r4, [sp]
   15b30:	add	sp, sp, #8
   15b34:	pop	{pc}		; (ldr pc, [sp], #4)
   15b38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b3c:	mov	r4, r0
   15b40:	ldr	ip, [r0, #4]
   15b44:	strd	r6, [sp, #8]
   15b48:	str	lr, [sp, #20]
   15b4c:	ldr	lr, [r0, #8]
   15b50:	str	r8, [sp, #16]
   15b54:	sub	sp, sp, #8
   15b58:	ldr	r5, [sp, #32]
   15b5c:	cmp	lr, ip
   15b60:	beq	15b88 <__assert_fail@plt+0x47a4>
   15b64:	mov	r0, r4
   15b68:	str	r5, [sp, #32]
   15b6c:	add	sp, sp, #8
   15b70:	ldrd	r4, [sp]
   15b74:	ldrd	r6, [sp, #8]
   15b78:	ldr	r8, [sp, #16]
   15b7c:	ldr	lr, [sp, #20]
   15b80:	add	sp, sp, #24
   15b84:	b	11324 <fseeko64@plt>
   15b88:	ldr	ip, [r0, #16]
   15b8c:	ldr	lr, [r0, #20]
   15b90:	cmp	lr, ip
   15b94:	bne	15b64 <__assert_fail@plt+0x4780>
   15b98:	ldr	r8, [r0, #36]	; 0x24
   15b9c:	cmp	r8, #0
   15ba0:	bne	15b64 <__assert_fail@plt+0x4780>
   15ba4:	mov	r6, r2
   15ba8:	mov	r7, r3
   15bac:	bl	11300 <fileno@plt>
   15bb0:	mov	r2, r6
   15bb4:	mov	r3, r7
   15bb8:	str	r5, [sp]
   15bbc:	bl	111d4 <lseek64@plt>
   15bc0:	mvn	r3, #0
   15bc4:	mvn	r2, #0
   15bc8:	cmp	r1, r3
   15bcc:	cmpeq	r0, r2
   15bd0:	beq	15c00 <__assert_fail@plt+0x481c>
   15bd4:	ldr	r3, [r4]
   15bd8:	strd	r0, [r4, #80]	; 0x50
   15bdc:	bic	r3, r3, #16
   15be0:	str	r3, [r4]
   15be4:	mov	r0, r8
   15be8:	add	sp, sp, #8
   15bec:	ldrd	r4, [sp]
   15bf0:	ldrd	r6, [sp, #8]
   15bf4:	ldr	r8, [sp, #16]
   15bf8:	add	sp, sp, #20
   15bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15c00:	mvn	r8, #0
   15c04:	b	15be4 <__assert_fail@plt+0x4800>
   15c08:	mov	r1, r0
   15c0c:	mov	r0, #0
   15c10:	b	11114 <clock_gettime@plt>
   15c14:	str	r4, [sp, #-8]!
   15c18:	mov	r4, r0
   15c1c:	mov	r0, #0
   15c20:	str	lr, [sp, #4]
   15c24:	sub	sp, sp, #8
   15c28:	mov	r1, sp
   15c2c:	bl	11114 <clock_gettime@plt>
   15c30:	ldrd	r2, [sp]
   15c34:	mov	r0, r4
   15c38:	strd	r2, [r4]
   15c3c:	add	sp, sp, #8
   15c40:	ldr	r4, [sp]
   15c44:	add	sp, sp, #4
   15c48:	pop	{pc}		; (ldr pc, [sp], #4)
   15c4c:	push	{lr}		; (str lr, [sp, #-4]!)
   15c50:	sub	sp, sp, #268	; 0x10c
   15c54:	movw	r2, #257	; 0x101
   15c58:	add	r1, sp, #4
   15c5c:	bl	1bbe0 <__assert_fail@plt+0xa7fc>
   15c60:	cmp	r0, #0
   15c64:	movne	r0, #0
   15c68:	bne	15c9c <__assert_fail@plt+0x48b8>
   15c6c:	movw	r1, #5804	; 0x16ac
   15c70:	movt	r1, #2
   15c74:	add	r0, sp, #4
   15c78:	bl	110c0 <strcmp@plt>
   15c7c:	cmp	r0, #0
   15c80:	beq	15c9c <__assert_fail@plt+0x48b8>
   15c84:	add	r0, sp, #4
   15c88:	movw	r1, #5808	; 0x16b0
   15c8c:	movt	r1, #2
   15c90:	bl	110c0 <strcmp@plt>
   15c94:	adds	r0, r0, #0
   15c98:	movne	r0, #1
   15c9c:	add	sp, sp, #268	; 0x10c
   15ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ca4:	mov	r3, #0
   15ca8:	cmp	r0, #0
   15cac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15cb0:	mov	r5, r1
   15cb4:	sbcs	r1, r1, #0
   15cb8:	strd	r6, [sp, #8]
   15cbc:	mov	r4, r0
   15cc0:	add	r6, r2, #20
   15cc4:	str	r8, [sp, #16]
   15cc8:	str	lr, [sp, #20]
   15ccc:	strb	r3, [r2, #20]
   15cd0:	blt	15d30 <__assert_fail@plt+0x494c>
   15cd4:	mov	r0, r4
   15cd8:	mov	r1, r5
   15cdc:	mov	r2, #10
   15ce0:	mov	r3, #0
   15ce4:	bl	1fbf8 <__assert_fail@plt+0xe814>
   15ce8:	add	ip, r2, #48	; 0x30
   15cec:	mov	r0, r4
   15cf0:	mov	r1, r5
   15cf4:	mov	r3, #0
   15cf8:	mov	r2, #10
   15cfc:	strb	ip, [r6, #-1]!
   15d00:	bl	1fbf8 <__assert_fail@plt+0xe814>
   15d04:	mov	r4, r0
   15d08:	mov	r5, r1
   15d0c:	orrs	r3, r4, r5
   15d10:	bne	15cd4 <__assert_fail@plt+0x48f0>
   15d14:	mov	r0, r6
   15d18:	ldrd	r4, [sp]
   15d1c:	ldrd	r6, [sp, #8]
   15d20:	ldr	r8, [sp, #16]
   15d24:	add	sp, sp, #20
   15d28:	pop	{pc}		; (ldr pc, [sp], #4)
   15d2c:	mov	r6, r7
   15d30:	mov	r0, r4
   15d34:	mov	r1, r5
   15d38:	mov	r2, #10
   15d3c:	mov	r3, #0
   15d40:	bl	1fbf8 <__assert_fail@plt+0xe814>
   15d44:	rsb	ip, r2, #48	; 0x30
   15d48:	mov	r0, r4
   15d4c:	mov	r1, r5
   15d50:	mov	r3, #0
   15d54:	mov	r2, #10
   15d58:	strb	ip, [r6, #-1]
   15d5c:	sub	r7, r6, #1
   15d60:	bl	1fbf8 <__assert_fail@plt+0xe814>
   15d64:	mov	r4, r0
   15d68:	mov	r5, r1
   15d6c:	orrs	r3, r4, r5
   15d70:	bne	15d2c <__assert_fail@plt+0x4948>
   15d74:	mov	r3, #45	; 0x2d
   15d78:	sub	r6, r6, #2
   15d7c:	strb	r3, [r7, #-1]
   15d80:	b	15d14 <__assert_fail@plt+0x4930>
   15d84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d88:	mov	r4, r0
   15d8c:	strd	r6, [sp, #8]
   15d90:	add	r6, r0, r1
   15d94:	strd	r8, [sp, #16]
   15d98:	mov	r9, r2
   15d9c:	strd	sl, [sp, #24]
   15da0:	str	lr, [sp, #32]
   15da4:	sub	sp, sp, #20
   15da8:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   15dac:	cmp	r0, #1
   15db0:	bls	15f48 <__assert_fail@plt+0x4b64>
   15db4:	cmp	r4, r6
   15db8:	bcs	15fb4 <__assert_fail@plt+0x4bd0>
   15dbc:	and	sl, r9, #2
   15dc0:	mov	r5, #0
   15dc4:	and	r9, r9, #1
   15dc8:	mvn	r8, #-2147483648	; 0x80000000
   15dcc:	b	15df4 <__assert_fail@plt+0x4a10>
   15dd0:	cmp	r3, #37	; 0x25
   15dd4:	bcs	15de4 <__assert_fail@plt+0x4a00>
   15dd8:	sub	r3, r3, #32
   15ddc:	cmp	r3, #3
   15de0:	bhi	15e1c <__assert_fail@plt+0x4a38>
   15de4:	add	r4, r4, #1
   15de8:	add	r5, r5, #1
   15dec:	cmp	r4, r6
   15df0:	bcs	15ebc <__assert_fail@plt+0x4ad8>
   15df4:	ldrb	r3, [r4]
   15df8:	cmp	r3, #63	; 0x3f
   15dfc:	bls	15dd0 <__assert_fail@plt+0x49ec>
   15e00:	cmp	r3, #65	; 0x41
   15e04:	bcc	15e1c <__assert_fail@plt+0x4a38>
   15e08:	cmp	r3, #95	; 0x5f
   15e0c:	bls	15de4 <__assert_fail@plt+0x4a00>
   15e10:	sub	r3, r3, #97	; 0x61
   15e14:	cmp	r3, #29
   15e18:	bls	15de4 <__assert_fail@plt+0x4a00>
   15e1c:	mov	r2, #0
   15e20:	mov	r3, #0
   15e24:	cmp	sl, #0
   15e28:	add	fp, sp, #4
   15e2c:	strd	r2, [sp, #8]
   15e30:	beq	15e58 <__assert_fail@plt+0x4a74>
   15e34:	b	15ef4 <__assert_fail@plt+0x4b10>
   15e38:	cmp	r3, r0
   15e3c:	add	r5, r5, r0
   15e40:	blt	15eb8 <__assert_fail@plt+0x4ad4>
   15e44:	add	r0, sp, #8
   15e48:	add	r4, r4, r7
   15e4c:	bl	11144 <mbsinit@plt>
   15e50:	cmp	r0, #0
   15e54:	bne	15dec <__assert_fail@plt+0x4a08>
   15e58:	add	r3, sp, #8
   15e5c:	sub	r2, r6, r4
   15e60:	mov	r1, r4
   15e64:	mov	r0, fp
   15e68:	bl	1fb50 <__assert_fail@plt+0xe76c>
   15e6c:	cmn	r0, #1
   15e70:	mov	r7, r0
   15e74:	beq	15f94 <__assert_fail@plt+0x4bb0>
   15e78:	cmn	r0, #2
   15e7c:	beq	15fa0 <__assert_fail@plt+0x4bbc>
   15e80:	cmp	r0, #0
   15e84:	ldr	r0, [sp, #4]
   15e88:	moveq	r7, #1
   15e8c:	bl	110fc <wcwidth@plt>
   15e90:	cmp	r0, #0
   15e94:	sub	r3, r8, r5
   15e98:	bge	15e38 <__assert_fail@plt+0x4a54>
   15e9c:	ldr	r0, [sp, #4]
   15ea0:	bl	11198 <iswcntrl@plt>
   15ea4:	cmp	r0, #0
   15ea8:	bne	15e44 <__assert_fail@plt+0x4a60>
   15eac:	cmn	r5, #-2147483647	; 0x80000001
   15eb0:	add	r5, r5, #1
   15eb4:	bne	15e44 <__assert_fail@plt+0x4a60>
   15eb8:	mvn	r5, #-2147483648	; 0x80000000
   15ebc:	mov	r0, r5
   15ec0:	add	sp, sp, #20
   15ec4:	ldrd	r4, [sp]
   15ec8:	ldrd	r6, [sp, #8]
   15ecc:	ldrd	r8, [sp, #16]
   15ed0:	ldrd	sl, [sp, #24]
   15ed4:	add	sp, sp, #32
   15ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   15edc:	cmp	r3, r2
   15ee0:	add	r4, r4, r7
   15ee4:	bgt	15eb8 <__assert_fail@plt+0x4ad4>
   15ee8:	bl	11144 <mbsinit@plt>
   15eec:	cmp	r0, #0
   15ef0:	bne	15dec <__assert_fail@plt+0x4a08>
   15ef4:	add	r3, sp, #8
   15ef8:	sub	r2, r6, r4
   15efc:	mov	r1, r4
   15f00:	mov	r0, fp
   15f04:	bl	1fb50 <__assert_fail@plt+0xe76c>
   15f08:	cmn	r0, #1
   15f0c:	mov	r7, r0
   15f10:	beq	15f94 <__assert_fail@plt+0x4bb0>
   15f14:	cmn	r0, #2
   15f18:	beq	15fa0 <__assert_fail@plt+0x4bbc>
   15f1c:	cmp	r0, #0
   15f20:	ldr	r0, [sp, #4]
   15f24:	moveq	r7, #1
   15f28:	bl	110fc <wcwidth@plt>
   15f2c:	subs	r3, r0, #0
   15f30:	sub	r2, r8, r5
   15f34:	add	r0, sp, #8
   15f38:	add	r5, r5, r3
   15f3c:	bge	15edc <__assert_fail@plt+0x4af8>
   15f40:	mvn	r5, #0
   15f44:	b	15ebc <__assert_fail@plt+0x4ad8>
   15f48:	cmp	r4, r6
   15f4c:	bcs	15fb4 <__assert_fail@plt+0x4bd0>
   15f50:	bl	1127c <__ctype_b_loc@plt>
   15f54:	ands	r5, r9, #2
   15f58:	ldr	r2, [r0]
   15f5c:	bne	15fbc <__assert_fail@plt+0x4bd8>
   15f60:	ldrb	r3, [r4], #1
   15f64:	lsl	r3, r3, #1
   15f68:	ldrh	r3, [r2, r3]
   15f6c:	tst	r3, #16384	; 0x4000
   15f70:	bne	15f7c <__assert_fail@plt+0x4b98>
   15f74:	tst	r3, #2
   15f78:	bne	15f88 <__assert_fail@plt+0x4ba4>
   15f7c:	cmn	r5, #-2147483647	; 0x80000001
   15f80:	beq	15ebc <__assert_fail@plt+0x4ad8>
   15f84:	add	r5, r5, #1
   15f88:	cmp	r6, r4
   15f8c:	bne	15f60 <__assert_fail@plt+0x4b7c>
   15f90:	b	15ebc <__assert_fail@plt+0x4ad8>
   15f94:	cmp	r9, #0
   15f98:	beq	15de4 <__assert_fail@plt+0x4a00>
   15f9c:	b	15f40 <__assert_fail@plt+0x4b5c>
   15fa0:	cmp	r9, #0
   15fa4:	bne	15f40 <__assert_fail@plt+0x4b5c>
   15fa8:	add	r5, r5, #1
   15fac:	mov	r4, r6
   15fb0:	b	15dec <__assert_fail@plt+0x4a08>
   15fb4:	mov	r5, #0
   15fb8:	b	15ebc <__assert_fail@plt+0x4ad8>
   15fbc:	mov	r5, #0
   15fc0:	b	15fd8 <__assert_fail@plt+0x4bf4>
   15fc4:	cmn	r5, #-2147483647	; 0x80000001
   15fc8:	beq	15ebc <__assert_fail@plt+0x4ad8>
   15fcc:	cmp	r6, r4
   15fd0:	add	r5, r5, #1
   15fd4:	beq	15ebc <__assert_fail@plt+0x4ad8>
   15fd8:	ldrb	r3, [r4], #1
   15fdc:	lsl	r3, r3, #1
   15fe0:	ldrh	r3, [r2, r3]
   15fe4:	tst	r3, #16384	; 0x4000
   15fe8:	beq	15f40 <__assert_fail@plt+0x4b5c>
   15fec:	b	15fc4 <__assert_fail@plt+0x4be0>
   15ff0:	strd	r4, [sp, #-16]!
   15ff4:	mov	r5, r1
   15ff8:	mov	r4, r0
   15ffc:	str	r6, [sp, #8]
   16000:	str	lr, [sp, #12]
   16004:	bl	11294 <strlen@plt>
   16008:	mov	r1, r0
   1600c:	mov	r2, r5
   16010:	ldr	r6, [sp, #8]
   16014:	mov	r0, r4
   16018:	ldrd	r4, [sp]
   1601c:	ldr	lr, [sp, #12]
   16020:	add	sp, sp, #16
   16024:	b	15d84 <__assert_fail@plt+0x49a0>
   16028:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1602c:	mov	r4, r3
   16030:	strd	r6, [sp, #8]
   16034:	strd	r8, [sp, #16]
   16038:	strd	sl, [sp, #24]
   1603c:	str	lr, [sp, #32]
   16040:	sub	sp, sp, #1184	; 0x4a0
   16044:	sub	sp, sp, #12
   16048:	str	r1, [sp, #48]	; 0x30
   1604c:	str	r3, [sp, #100]	; 0x64
   16050:	ldrb	r3, [sp, #1232]	; 0x4d0
   16054:	str	r2, [sp, #52]	; 0x34
   16058:	str	r0, [sp, #84]	; 0x54
   1605c:	str	r3, [sp, #96]	; 0x60
   16060:	bl	112c4 <__errno_location@plt>
   16064:	ldr	r1, [r0]
   16068:	movw	r3, #356	; 0x164
   1606c:	movt	r3, #2
   16070:	str	r0, [sp, #88]	; 0x58
   16074:	ldr	r2, [r4, #40]	; 0x28
   16078:	ldr	ip, [r4, #8]
   1607c:	ldr	fp, [sp, #1240]	; 0x4d8
   16080:	cmp	r2, #0
   16084:	ldr	r9, [sp, #1252]	; 0x4e4
   16088:	str	r1, [sp, #104]	; 0x68
   1608c:	mov	r1, r2
   16090:	moveq	r1, r3
   16094:	cmp	ip, #12
   16098:	str	ip, [sp, #80]	; 0x50
   1609c:	subgt	r3, ip, #12
   160a0:	str	r1, [sp, #112]	; 0x70
   160a4:	strgt	r3, [sp, #80]	; 0x50
   160a8:	bgt	160bc <__assert_fail@plt+0x4cd8>
   160ac:	cmp	ip, #0
   160b0:	mov	r3, ip
   160b4:	moveq	r3, #12
   160b8:	str	r3, [sp, #80]	; 0x50
   160bc:	ldr	r3, [sp, #52]	; 0x34
   160c0:	ldrb	r1, [r3]
   160c4:	cmp	r1, #0
   160c8:	beq	178bc <__assert_fail@plt+0x64d8>
   160cc:	movw	r8, #34079	; 0x851f
   160d0:	movt	r8, #20971	; 0x51eb
   160d4:	asr	r2, r9, #31
   160d8:	movw	r3, #26215	; 0x6667
   160dc:	movt	r3, #26214	; 0x6666
   160e0:	smull	r0, r8, r8, r9
   160e4:	movw	r4, #46473	; 0xb589
   160e8:	movt	r4, #5368	; 0x14f8
   160ec:	smull	r0, r6, r3, r9
   160f0:	movw	ip, #51819	; 0xca6b
   160f4:	movt	ip, #27487	; 0x6b5f
   160f8:	movw	r5, #35757	; 0x8bad
   160fc:	movt	r5, #26843	; 0x68db
   16100:	smull	r0, r4, r4, r9
   16104:	rsb	r8, r2, r8, asr #5
   16108:	movw	r7, #19923	; 0x4dd3
   1610c:	movt	r7, #4194	; 0x1062
   16110:	smull	sl, ip, ip, r9
   16114:	movw	lr, #56963	; 0xde83
   16118:	movt	lr, #17179	; 0x431b
   1611c:	smull	r0, r5, r5, r9
   16120:	movw	sl, #46021	; 0xb3c5
   16124:	movt	sl, #37282	; 0x91a2
   16128:	asr	r6, r6, #2
   1612c:	str	r8, [sp, #44]	; 0x2c
   16130:	smull	r0, r7, r7, r9
   16134:	str	sl, [sp, #116]	; 0x74
   16138:	movw	sl, #52429	; 0xcccd
   1613c:	movt	sl, #52428	; 0xcccc
   16140:	sub	r8, r6, r2
   16144:	rsb	r6, r2, r4, asr #13
   16148:	rsb	r4, r2, ip, asr #22
   1614c:	ldr	ip, [sp, #44]	; 0x2c
   16150:	rsb	r5, r2, r5, asr #12
   16154:	rsb	r7, r2, r7, asr #6
   16158:	str	r4, [sp, #28]
   1615c:	smull	r0, lr, lr, r9
   16160:	movw	r0, #15241	; 0x3b89
   16164:	movt	r0, #21990	; 0x55e6
   16168:	str	r6, [sp, #36]	; 0x24
   1616c:	str	r5, [sp, #40]	; 0x28
   16170:	smull	r5, r6, r3, ip
   16174:	str	r8, [sp, #56]	; 0x38
   16178:	rsb	lr, r2, lr, asr #18
   1617c:	str	r8, [sp, #76]	; 0x4c
   16180:	smull	r5, r8, r3, r8
   16184:	smull	r4, r5, r3, r7
   16188:	ldr	r4, [sp, #40]	; 0x28
   1618c:	str	lr, [sp, #32]
   16190:	smull	lr, r0, r0, r9
   16194:	str	r7, [sp, #72]	; 0x48
   16198:	str	sl, [sp, #108]	; 0x6c
   1619c:	mov	sl, #0
   161a0:	rsb	r2, r2, r0, asr #25
   161a4:	smull	ip, r4, r3, r4
   161a8:	ldr	ip, [sp, #36]	; 0x24
   161ac:	str	r2, [sp, #92]	; 0x5c
   161b0:	ldr	r2, [sp, #44]	; 0x2c
   161b4:	smull	r7, lr, r3, ip
   161b8:	ldr	ip, [sp, #32]
   161bc:	asr	r2, r2, #31
   161c0:	smull	r7, ip, r3, ip
   161c4:	ldr	r7, [sp, #28]
   161c8:	rsb	r6, r2, r6, asr #2
   161cc:	ldr	r2, [sp, #40]	; 0x28
   161d0:	add	r6, r6, r6, lsl #2
   161d4:	smull	r7, r3, r3, r7
   161d8:	ldr	r7, [sp, #76]	; 0x4c
   161dc:	asr	r2, r2, #31
   161e0:	rsb	r4, r2, r4, asr #2
   161e4:	asr	r7, r7, #31
   161e8:	rsb	r8, r7, r8, asr #2
   161ec:	ldr	r7, [sp, #72]	; 0x48
   161f0:	str	r4, [sp, #68]	; 0x44
   161f4:	ldr	r4, [sp, #32]
   161f8:	asr	r0, r7, #31
   161fc:	add	r7, r8, r8, lsl #2
   16200:	rsb	r5, r0, r5, asr #2
   16204:	ldr	r0, [sp, #36]	; 0x24
   16208:	asr	r2, r4, #31
   1620c:	add	r5, r5, r5, lsl #2
   16210:	rsb	r2, r2, ip, asr #2
   16214:	ldr	ip, [sp, #92]	; 0x5c
   16218:	asr	r0, r0, #31
   1621c:	str	r2, [sp, #60]	; 0x3c
   16220:	movw	r2, #26215	; 0x6667
   16224:	movt	r2, #26214	; 0x6666
   16228:	rsb	lr, r0, lr, asr #2
   1622c:	str	lr, [sp, #64]	; 0x40
   16230:	ldr	lr, [sp, #28]
   16234:	asr	r0, lr, #31
   16238:	smull	lr, r2, r2, ip
   1623c:	ldr	ip, [sp, #56]	; 0x38
   16240:	rsb	r3, r0, r3, asr #2
   16244:	add	r3, r3, r3, lsl #2
   16248:	asr	r2, r2, #2
   1624c:	add	r0, ip, ip, lsl #2
   16250:	ldr	ip, [sp, #68]	; 0x44
   16254:	sub	r8, r9, r0, lsl #1
   16258:	add	r4, ip, ip, lsl #2
   1625c:	ldr	ip, [sp, #64]	; 0x40
   16260:	str	r8, [sp, #56]	; 0x38
   16264:	add	lr, ip, ip, lsl #2
   16268:	ldr	ip, [sp, #60]	; 0x3c
   1626c:	ldr	r8, [sp, #76]	; 0x4c
   16270:	str	r2, [sp, #124]	; 0x7c
   16274:	ldr	r0, [sp, #44]	; 0x2c
   16278:	add	ip, ip, ip, lsl #2
   1627c:	str	r9, [sp, #1252]	; 0x4e4
   16280:	sub	r8, r8, r7, lsl #1
   16284:	sub	r6, r0, r6, lsl #1
   16288:	ldr	r0, [sp, #72]	; 0x48
   1628c:	str	r6, [sp, #132]	; 0x84
   16290:	str	r8, [sp, #136]	; 0x88
   16294:	sub	r5, r0, r5, lsl #1
   16298:	ldr	r0, [sp, #40]	; 0x28
   1629c:	str	r5, [sp, #128]	; 0x80
   162a0:	ldr	r5, [sp, #84]	; 0x54
   162a4:	sub	r7, r0, r4, lsl #1
   162a8:	ldr	r4, [sp, #32]
   162ac:	ldr	r0, [sp, #36]	; 0x24
   162b0:	str	r7, [sp, #68]	; 0x44
   162b4:	ldr	r7, [sp, #52]	; 0x34
   162b8:	sub	r0, r0, lr, lsl #1
   162bc:	ldr	lr, [sp, #28]
   162c0:	str	r0, [sp, #64]	; 0x40
   162c4:	sub	r0, r4, ip, lsl #1
   162c8:	str	r0, [sp, #60]	; 0x3c
   162cc:	sub	r0, lr, r3, lsl #1
   162d0:	str	r0, [sp, #120]	; 0x78
   162d4:	cmp	r1, #37	; 0x25
   162d8:	beq	163c4 <__assert_fail@plt+0x4fe0>
   162dc:	ldr	r3, [sp, #48]	; 0x30
   162e0:	cmp	fp, #0
   162e4:	sub	r3, r3, sl
   162e8:	blt	16378 <__assert_fail@plt+0x4f94>
   162ec:	cmp	fp, #1
   162f0:	movcs	r4, fp
   162f4:	movcc	r4, #1
   162f8:	cmp	r4, r3
   162fc:	bcs	16380 <__assert_fail@plt+0x4f9c>
   16300:	cmp	r5, #0
   16304:	beq	16330 <__assert_fail@plt+0x4f4c>
   16308:	cmp	fp, #1
   1630c:	ble	1632c <__assert_fail@plt+0x4f48>
   16310:	sub	fp, fp, #1
   16314:	mov	r1, #32
   16318:	mov	r0, r5
   1631c:	mov	r2, fp
   16320:	bl	112e8 <memset@plt>
   16324:	ldrb	r1, [r7]
   16328:	add	r5, r5, fp
   1632c:	strb	r1, [r5], #1
   16330:	add	sl, sl, r4
   16334:	mov	r4, r7
   16338:	ldrb	r1, [r4, #1]
   1633c:	add	r7, r4, #1
   16340:	mvn	fp, #0
   16344:	cmp	r1, #0
   16348:	bne	162d4 <__assert_fail@plt+0x4ef0>
   1634c:	str	r5, [sp, #84]	; 0x54
   16350:	ldr	r3, [sp, #48]	; 0x30
   16354:	ldr	r2, [sp, #84]	; 0x54
   16358:	cmp	r2, #0
   1635c:	cmpne	r3, #0
   16360:	movne	r3, #0
   16364:	strbne	r3, [r2]
   16368:	ldr	r3, [sp, #88]	; 0x58
   1636c:	ldr	r2, [sp, #104]	; 0x68
   16370:	str	r2, [r3]
   16374:	b	16390 <__assert_fail@plt+0x4fac>
   16378:	cmp	r3, #1
   1637c:	bhi	163b4 <__assert_fail@plt+0x4fd0>
   16380:	ldr	r2, [sp, #88]	; 0x58
   16384:	mov	r3, #34	; 0x22
   16388:	str	r3, [r2]
   1638c:	mov	sl, #0
   16390:	mov	r0, sl
   16394:	add	sp, sp, #1184	; 0x4a0
   16398:	add	sp, sp, #12
   1639c:	ldrd	r4, [sp]
   163a0:	ldrd	r6, [sp, #8]
   163a4:	ldrd	r8, [sp, #16]
   163a8:	ldrd	sl, [sp, #24]
   163ac:	add	sp, sp, #32
   163b0:	pop	{pc}		; (ldr pc, [sp], #4)
   163b4:	cmp	r5, #0
   163b8:	mov	r4, #1
   163bc:	bne	1632c <__assert_fail@plt+0x4f48>
   163c0:	b	16330 <__assert_fail@plt+0x4f4c>
   163c4:	ldr	r3, [sp, #96]	; 0x60
   163c8:	mov	r8, #0
   163cc:	mov	r4, r7
   163d0:	mov	r9, r8
   163d4:	str	r3, [sp, #52]	; 0x34
   163d8:	ldrb	r3, [r4, #1]!
   163dc:	sub	r2, r3, #35	; 0x23
   163e0:	mov	r6, r3
   163e4:	cmp	r2, #60	; 0x3c
   163e8:	ldrls	pc, [pc, r2, lsl #2]
   163ec:	b	16500 <__assert_fail@plt+0x511c>
   163f0:	strdeq	r6, [r1], -r8
   163f4:	andeq	r6, r1, r0, lsl #10
   163f8:	andeq	r6, r1, r0, lsl #10
   163fc:	andeq	r6, r1, r0, lsl #10
   16400:	andeq	r6, r1, r0, lsl #10
   16404:	andeq	r6, r1, r0, lsl #10
   16408:	andeq	r6, r1, r0, lsl #10
   1640c:	andeq	r6, r1, r0, lsl #10
   16410:	strdeq	r6, [r1], -r0
   16414:	andeq	r6, r1, r0, lsl #10
   16418:	strdeq	r6, [r1], -r0
   1641c:	andeq	r6, r1, r0, lsl #10
   16420:	andeq	r6, r1, r0, lsl #10
   16424:	strdeq	r6, [r1], -r0
   16428:	andeq	r6, r1, r0, lsl #10
   1642c:	andeq	r6, r1, r0, lsl #10
   16430:	andeq	r6, r1, r0, lsl #10
   16434:	andeq	r6, r1, r0, lsl #10
   16438:	andeq	r6, r1, r0, lsl #10
   1643c:	andeq	r6, r1, r0, lsl #10
   16440:	andeq	r6, r1, r0, lsl #10
   16444:	andeq	r6, r1, r0, lsl #10
   16448:	andeq	r6, r1, r0, lsl #10
   1644c:	andeq	r6, r1, r0, lsl #10
   16450:	andeq	r6, r1, r0, lsl #10
   16454:	andeq	r6, r1, r0, lsl #10
   16458:	andeq	r6, r1, r0, lsl #10
   1645c:	andeq	r6, r1, r0, lsl #10
   16460:	andeq	r6, r1, r0, lsl #10
   16464:	andeq	r6, r1, r0, lsl #10
   16468:	andeq	r6, r1, r0, lsl #10
   1646c:	andeq	r6, r1, r0, lsl #10
   16470:	andeq	r6, r1, r0, lsl #10
   16474:	andeq	r6, r1, r0, lsl #10
   16478:	andeq	r6, r1, r0, lsl #10
   1647c:	andeq	r6, r1, r0, lsl #10
   16480:	andeq	r6, r1, r0, lsl #10
   16484:	andeq	r6, r1, r0, lsl #10
   16488:	andeq	r6, r1, r0, lsl #10
   1648c:	andeq	r6, r1, r0, lsl #10
   16490:	andeq	r6, r1, r0, lsl #10
   16494:	andeq	r6, r1, r0, lsl #10
   16498:	andeq	r6, r1, r0, lsl #10
   1649c:	andeq	r6, r1, r0, lsl #10
   164a0:	andeq	r6, r1, r0, lsl #10
   164a4:	andeq	r6, r1, r0, lsl #10
   164a8:	andeq	r6, r1, r0, lsl #10
   164ac:	andeq	r6, r1, r0, lsl #10
   164b0:	andeq	r6, r1, r0, lsl #10
   164b4:	andeq	r6, r1, r0, lsl #10
   164b8:	andeq	r6, r1, r0, lsl #10
   164bc:	andeq	r6, r1, r0, lsl #10
   164c0:	andeq	r6, r1, r0, lsl #10
   164c4:	andeq	r6, r1, r0, lsl #10
   164c8:	andeq	r6, r1, r0, lsl #10
   164cc:	andeq	r6, r1, r0, lsl #10
   164d0:	andeq	r6, r1, r0, lsl #10
   164d4:	andeq	r6, r1, r0, lsl #10
   164d8:	andeq	r6, r1, r0, lsl #10
   164dc:	andeq	r6, r1, r4, ror #9
   164e0:	strdeq	r6, [r1], -r0
   164e4:	mov	r3, #1
   164e8:	str	r3, [sp, #52]	; 0x34
   164ec:	b	163d8 <__assert_fail@plt+0x4ff4>
   164f0:	mov	r9, r3
   164f4:	b	163d8 <__assert_fail@plt+0x4ff4>
   164f8:	mov	r8, #1
   164fc:	b	163d8 <__assert_fail@plt+0x4ff4>
   16500:	sub	r2, r3, #48	; 0x30
   16504:	cmp	r2, #9
   16508:	bls	16808 <__assert_fail@plt+0x5424>
   1650c:	cmp	r3, #69	; 0x45
   16510:	beq	167dc <__assert_fail@plt+0x53f8>
   16514:	cmp	r3, #79	; 0x4f
   16518:	movne	r6, #0
   1651c:	movne	lr, r6
   16520:	beq	167dc <__assert_fail@plt+0x53f8>
   16524:	cmp	r3, #122	; 0x7a
   16528:	ldrls	pc, [pc, r3, lsl #2]
   1652c:	b	16720 <__assert_fail@plt+0x533c>
   16530:	andeq	r6, r1, ip, lsl r7
   16534:	andeq	r6, r1, r0, lsr #14
   16538:	andeq	r6, r1, r0, lsr #14
   1653c:	andeq	r6, r1, r0, lsr #14
   16540:	andeq	r6, r1, r0, lsr #14
   16544:	andeq	r6, r1, r0, lsr #14
   16548:	andeq	r6, r1, r0, lsr #14
   1654c:	andeq	r6, r1, r0, lsr #14
   16550:	andeq	r6, r1, r0, lsr #14
   16554:	andeq	r6, r1, r0, lsr #14
   16558:	andeq	r6, r1, r0, lsr #14
   1655c:	andeq	r6, r1, r0, lsr #14
   16560:	andeq	r6, r1, r0, lsr #14
   16564:	andeq	r6, r1, r0, lsr #14
   16568:	andeq	r6, r1, r0, lsr #14
   1656c:	andeq	r6, r1, r0, lsr #14
   16570:	andeq	r6, r1, r0, lsr #14
   16574:	andeq	r6, r1, r0, lsr #14
   16578:	andeq	r6, r1, r0, lsr #14
   1657c:	andeq	r6, r1, r0, lsr #14
   16580:	andeq	r6, r1, r0, lsr #14
   16584:	andeq	r6, r1, r0, lsr #14
   16588:	andeq	r6, r1, r0, lsr #14
   1658c:	andeq	r6, r1, r0, lsr #14
   16590:	andeq	r6, r1, r0, lsr #14
   16594:	andeq	r6, r1, r0, lsr #14
   16598:	andeq	r6, r1, r0, lsr #14
   1659c:	andeq	r6, r1, r0, lsr #14
   165a0:	andeq	r6, r1, r0, lsr #14
   165a4:	andeq	r6, r1, r0, lsr #14
   165a8:	andeq	r6, r1, r0, lsr #14
   165ac:	andeq	r6, r1, r0, lsr #14
   165b0:	andeq	r6, r1, r0, lsr #14
   165b4:	andeq	r6, r1, r0, lsr #14
   165b8:	andeq	r6, r1, r0, lsr #14
   165bc:	andeq	r6, r1, r0, lsr #14
   165c0:	andeq	r6, r1, r0, lsr #14
   165c4:	andeq	r7, r1, r8, lsr #3
   165c8:	andeq	r6, r1, r0, lsr #14
   165cc:	andeq	r6, r1, r0, lsr #14
   165d0:	andeq	r6, r1, r0, lsr #14
   165d4:	andeq	r6, r1, r0, lsr #14
   165d8:	andeq	r6, r1, r0, lsr #14
   165dc:	andeq	r6, r1, r0, lsr #14
   165e0:	andeq	r6, r1, r0, lsr #14
   165e4:	andeq	r6, r1, r0, lsr #14
   165e8:	andeq	r6, r1, r0, lsr #14
   165ec:	andeq	r6, r1, r0, lsr #14
   165f0:	andeq	r6, r1, r0, lsr #14
   165f4:	andeq	r6, r1, r0, lsr #14
   165f8:	andeq	r6, r1, r0, lsr #14
   165fc:	andeq	r6, r1, r0, lsr #14
   16600:	andeq	r6, r1, r0, lsr #14
   16604:	andeq	r6, r1, r0, lsr #14
   16608:	andeq	r6, r1, r0, lsr #14
   1660c:	andeq	r6, r1, r0, lsr #14
   16610:	andeq	r6, r1, r0, lsr #14
   16614:	andeq	r6, r1, r0, lsr #14
   16618:	andeq	r7, r1, ip, lsl #15
   1661c:	andeq	r6, r1, r0, lsr #14
   16620:	andeq	r6, r1, r0, lsr #14
   16624:	andeq	r6, r1, r0, lsr #14
   16628:	andeq	r6, r1, r0, lsr #14
   1662c:	andeq	r6, r1, r0, lsr #14
   16630:	andeq	r6, r1, r0, lsr #14
   16634:	andeq	r6, r1, r4, asr r9
   16638:	muleq	r1, r0, sl
   1663c:	andeq	r7, r1, r8, ror #8
   16640:	andeq	r7, r1, r0, lsl r7
   16644:	andeq	r6, r1, r0, lsr #14
   16648:	andeq	r7, r1, ip, lsr r7
   1664c:	andeq	r7, r1, ip, lsr #10
   16650:	andeq	r7, r1, r0, asr #13
   16654:	ldrdeq	r7, [r1], -ip
   16658:	andeq	r6, r1, r0, lsr #14
   1665c:	andeq	r6, r1, r0, lsr #14
   16660:	andeq	r6, r1, r0, lsr #14
   16664:	strdeq	r7, [r1], -r4
   16668:	andeq	r7, r1, ip, ror r0
   1666c:	andeq	r6, r1, r0, lsr #14
   16670:			; <UNDEFINED> instruction: 0x000177b4
   16674:	andeq	r6, r1, r0, lsr #14
   16678:	andeq	r7, r1, r0, lsl #15
   1667c:	ldrdeq	r6, [r1], -r4
   16680:	strdeq	r6, [r1], -r0
   16684:	andeq	r6, r1, r4, ror #31
   16688:	andeq	r7, r1, ip, lsr #10
   1668c:	andeq	r7, r1, r0, lsr #32
   16690:	andeq	r6, r1, r8, asr #16
   16694:	strdeq	r7, [r1], -ip
   16698:	andeq	r6, r1, r0, lsr #22
   1669c:	andeq	r6, r1, r0, lsr #14
   166a0:	andeq	r6, r1, r0, lsr #14
   166a4:	andeq	r6, r1, r0, lsr #14
   166a8:	andeq	r6, r1, r0, lsr #14
   166ac:	andeq	r6, r1, r0, lsr #14
   166b0:	andeq	r6, r1, r0, lsr #14
   166b4:	andeq	r6, r1, r4, asr r9
   166b8:	andeq	r7, r1, r0, ror #6
   166bc:	andeq	r6, r1, r8, asr #16
   166c0:	andeq	r6, r1, r0, asr #25
   166c4:			; <UNDEFINED> instruction: 0x00016eb0
   166c8:	andeq	r6, r1, r0, lsr #14
   166cc:	andeq	r7, r1, ip, lsr #10
   166d0:	andeq	r7, r1, r0, ror #6
   166d4:	andeq	r6, r1, r0, lsr #14
   166d8:	strdeq	r7, [r1], -ip
   166dc:	andeq	r7, r1, r8, lsl r5
   166e0:	andeq	r7, r1, r4, lsl #5
   166e4:	muleq	r1, r4, r2
   166e8:	ldrdeq	r7, [r1], -r4
   166ec:	andeq	r6, r1, r0, lsr #14
   166f0:	andeq	r7, r1, r0, asr #6
   166f4:	andeq	r6, r1, r4, ror #20
   166f8:	andeq	r6, r1, r0, asr r8
   166fc:	andeq	r6, r1, r4, lsl #19
   16700:			; <UNDEFINED> instruction: 0x00016ab0
   16704:	andeq	r7, r1, ip, lsr #4
   16708:	andeq	r6, r1, r0, lsr #14
   1670c:	andeq	r7, r1, r8, ror #4
   16710:	andeq	r6, r1, r8, asr #16
   16714:	andeq	r7, r1, ip, ror r3
   16718:	strdeq	r6, [r1], -ip
   1671c:	sub	r4, r4, #1
   16720:	ldr	r3, [sp, #48]	; 0x30
   16724:	sub	r3, r3, sl
   16728:	str	r3, [sp, #84]	; 0x54
   1672c:	mvn	r3, fp
   16730:	cmp	r9, #45	; 0x2d
   16734:	lsr	r3, r3, #31
   16738:	sub	r6, r4, r7
   1673c:	moveq	r3, #0
   16740:	add	r6, r6, #1
   16744:	cmp	r3, #0
   16748:	moveq	fp, r3
   1674c:	moveq	r8, r6
   16750:	beq	16760 <__assert_fail@plt+0x537c>
   16754:	cmp	r6, fp
   16758:	movcs	r8, r6
   1675c:	movcc	r8, fp
   16760:	ldr	r3, [sp, #84]	; 0x54
   16764:	cmp	r8, r3
   16768:	bcs	16380 <__assert_fail@plt+0x4f9c>
   1676c:	cmp	r5, #0
   16770:	beq	16800 <__assert_fail@plt+0x541c>
   16774:	cmp	r6, fp
   16778:	bcs	167a0 <__assert_fail@plt+0x53bc>
   1677c:	cmp	r9, #43	; 0x2b
   16780:	cmpne	r9, #48	; 0x30
   16784:	sub	r2, fp, r6
   16788:	mov	r0, r5
   1678c:	add	r3, r5, r2
   16790:	moveq	r1, #48	; 0x30
   16794:	movne	r1, #32
   16798:	mov	r5, r3
   1679c:	bl	112e8 <memset@plt>
   167a0:	ldr	r3, [sp, #52]	; 0x34
   167a4:	cmp	r3, #0
   167a8:	beq	167ec <__assert_fail@plt+0x5408>
   167ac:	cmp	r6, #0
   167b0:	beq	167fc <__assert_fail@plt+0x5418>
   167b4:	bl	11258 <__ctype_toupper_loc@plt>
   167b8:	add	r3, r7, r6
   167bc:	add	r2, r5, r6
   167c0:	ldrb	ip, [r3, #-1]!
   167c4:	ldr	r1, [r0]
   167c8:	cmp	r7, r3
   167cc:	ldr	r1, [r1, ip, lsl #2]
   167d0:	strb	r1, [r2, #-1]!
   167d4:	bne	167c0 <__assert_fail@plt+0x53dc>
   167d8:	b	167fc <__assert_fail@plt+0x5418>
   167dc:	mov	lr, r3
   167e0:	add	r4, r4, #1
   167e4:	ldrb	r3, [r4]
   167e8:	b	16524 <__assert_fail@plt+0x5140>
   167ec:	mov	r1, r7
   167f0:	mov	r2, r6
   167f4:	mov	r0, r5
   167f8:	bl	1112c <memcpy@plt>
   167fc:	add	r5, r5, r6
   16800:	add	sl, sl, r8
   16804:	b	16338 <__assert_fail@plt+0x4f54>
   16808:	mov	fp, #0
   1680c:	mov	r1, #10
   16810:	smull	r2, r3, fp, r1
   16814:	mvn	fp, #-2147483648	; 0x80000000
   16818:	cmp	r3, r2, asr #31
   1681c:	bne	16830 <__assert_fail@plt+0x544c>
   16820:	ldrb	r3, [r4]
   16824:	sub	fp, r3, #48	; 0x30
   16828:	adds	fp, r2, fp
   1682c:	mvnvs	fp, #-2147483648	; 0x80000000
   16830:	ldrb	r3, [r4, #1]!
   16834:	sub	r2, r3, #48	; 0x30
   16838:	cmp	r2, #9
   1683c:	bls	16810 <__assert_fail@plt+0x542c>
   16840:	mov	r6, r3
   16844:	b	1650c <__assert_fail@plt+0x5128>
   16848:	cmp	r6, #79	; 0x4f
   1684c:	beq	16720 <__assert_fail@plt+0x533c>
   16850:	mov	r7, #0
   16854:	add	r2, sp, #152	; 0x98
   16858:	movw	r1, #9504	; 0x2520
   1685c:	cmp	r6, #0
   16860:	strh	r1, [r2]
   16864:	addeq	r1, r2, #2
   16868:	bne	16a84 <__assert_fail@plt+0x56a0>
   1686c:	mov	ip, #0
   16870:	add	r6, sp, #168	; 0xa8
   16874:	strb	r3, [r1]
   16878:	mov	r0, r6
   1687c:	ldr	r3, [sp, #100]	; 0x64
   16880:	strb	ip, [r1, #1]
   16884:	mov	r1, #1024	; 0x400
   16888:	bl	11234 <strftime@plt>
   1688c:	cmp	r0, #0
   16890:	beq	16338 <__assert_fail@plt+0x4f54>
   16894:	mvn	r3, fp
   16898:	cmp	r9, #45	; 0x2d
   1689c:	lsr	r3, r3, #31
   168a0:	moveq	r3, #0
   168a4:	sub	r8, r0, #1
   168a8:	cmp	r3, #0
   168ac:	moveq	fp, r8
   168b0:	beq	168c4 <__assert_fail@plt+0x54e0>
   168b4:	mov	r3, fp
   168b8:	cmp	r8, fp
   168bc:	movcs	fp, r8
   168c0:	movcc	fp, r3
   168c4:	ldr	r2, [sp, #48]	; 0x30
   168c8:	sub	r2, r2, sl
   168cc:	cmp	r2, fp
   168d0:	bls	16380 <__assert_fail@plt+0x4f9c>
   168d4:	cmp	r5, #0
   168d8:	beq	1694c <__assert_fail@plt+0x5568>
   168dc:	cmp	r8, r3
   168e0:	bcs	16908 <__assert_fail@plt+0x5524>
   168e4:	cmp	r9, #43	; 0x2b
   168e8:	cmpne	r9, #48	; 0x30
   168ec:	sub	r2, r3, r8
   168f0:	mov	r0, r5
   168f4:	add	r3, r5, r2
   168f8:	moveq	r1, #48	; 0x30
   168fc:	movne	r1, #32
   16900:	mov	r5, r3
   16904:	bl	112e8 <memset@plt>
   16908:	cmp	r7, #0
   1690c:	bne	178f4 <__assert_fail@plt+0x6510>
   16910:	ldr	r3, [sp, #52]	; 0x34
   16914:	cmp	r3, #0
   16918:	beq	178dc <__assert_fail@plt+0x64f8>
   1691c:	cmp	r8, #0
   16920:	beq	1694c <__assert_fail@plt+0x5568>
   16924:	add	r5, r5, r8
   16928:	add	r8, r6, r8
   1692c:	bl	11258 <__ctype_toupper_loc@plt>
   16930:	mov	r3, r5
   16934:	ldrb	r1, [r8], #-1
   16938:	ldr	r2, [r0]
   1693c:	cmp	r6, r8
   16940:	ldr	r2, [r2, r1, lsl #2]
   16944:	strb	r2, [r3, #-1]!
   16948:	bne	16934 <__assert_fail@plt+0x5550>
   1694c:	add	sl, sl, fp
   16950:	b	16338 <__assert_fail@plt+0x4f54>
   16954:	cmp	r6, #0
   16958:	bne	16720 <__assert_fail@plt+0x533c>
   1695c:	ldr	r2, [sp, #52]	; 0x34
   16960:	cmp	r8, #0
   16964:	movw	r0, #9504	; 0x2520
   16968:	movne	r2, r8
   1696c:	mov	r7, #0
   16970:	str	r2, [sp, #52]	; 0x34
   16974:	add	r2, sp, #152	; 0x98
   16978:	mov	r1, r2
   1697c:	strh	r0, [r1], #2
   16980:	b	1686c <__assert_fail@plt+0x5488>
   16984:	ldr	lr, [sp, #100]	; 0x64
   16988:	mvn	ip, #0
   1698c:	add	r1, sp, #168	; 0xa8
   16990:	ldr	r0, [sp, #1248]	; 0x4e0
   16994:	ldrd	r6, [lr]
   16998:	ldrd	r2, [lr, #24]
   1699c:	strd	r6, [sp, #168]	; 0xa8
   169a0:	ldrd	r6, [lr, #8]
   169a4:	strd	r2, [sp, #192]	; 0xc0
   169a8:	ldr	r3, [lr, #40]	; 0x28
   169ac:	strd	r6, [sp, #176]	; 0xb0
   169b0:	ldrd	r6, [lr, #32]
   169b4:	str	ip, [sp, #196]	; 0xc4
   169b8:	str	r3, [sp, #208]	; 0xd0
   169bc:	ldrd	r2, [lr, #16]
   169c0:	strd	r2, [sp, #184]	; 0xb8
   169c4:	strd	r6, [sp, #200]	; 0xc8
   169c8:	bl	1c15c <__assert_fail@plt+0xad78>
   169cc:	ldr	r3, [sp, #196]	; 0xc4
   169d0:	cmp	r3, #0
   169d4:	blt	1803c <__assert_fail@plt+0x6c58>
   169d8:	lsr	r3, r0, #31
   169dc:	add	r2, sp, #152	; 0x98
   169e0:	cmp	r0, #0
   169e4:	add	r6, r2, #14
   169e8:	str	r3, [sp, #84]	; 0x54
   169ec:	blt	16a30 <__assert_fail@plt+0x564c>
   169f0:	movw	r3, #26215	; 0x6667
   169f4:	movt	r3, #26214	; 0x6666
   169f8:	asr	ip, r0, #31
   169fc:	smull	r3, r1, r3, r0
   16a00:	asr	r1, r1, #2
   16a04:	sub	r3, r1, ip
   16a08:	add	r3, r3, r3, lsl #2
   16a0c:	sub	r3, r0, r3, lsl #1
   16a10:	subs	r0, r1, ip
   16a14:	add	r3, r3, #48	; 0x30
   16a18:	strb	r3, [r6, #-1]!
   16a1c:	bne	169f0 <__assert_fail@plt+0x560c>
   16a20:	mov	r0, #1
   16a24:	mov	r1, #0
   16a28:	strd	r0, [sp, #140]	; 0x8c
   16a2c:	b	16db4 <__assert_fail@plt+0x59d0>
   16a30:	movw	r3, #26215	; 0x6667
   16a34:	movt	r3, #26214	; 0x6666
   16a38:	asr	ip, r0, #31
   16a3c:	smull	r3, r1, r3, r0
   16a40:	asr	r1, r1, #2
   16a44:	sub	r3, r1, ip
   16a48:	add	r3, r3, r3, lsl #2
   16a4c:	sub	r3, r0, r3, lsl #1
   16a50:	subs	r0, r1, ip
   16a54:	rsb	r3, r3, #48	; 0x30
   16a58:	strb	r3, [r6, #-1]!
   16a5c:	bne	16a30 <__assert_fail@plt+0x564c>
   16a60:	b	16a20 <__assert_fail@plt+0x563c>
   16a64:	ldr	r2, [sp, #100]	; 0x64
   16a68:	cmp	r6, #79	; 0x4f
   16a6c:	ldr	r2, [r2, #16]
   16a70:	bne	17a44 <__assert_fail@plt+0x6660>
   16a74:	add	r2, sp, #152	; 0x98
   16a78:	movw	r1, #9504	; 0x2520
   16a7c:	mov	r7, #0
   16a80:	strh	r1, [r2]
   16a84:	add	r1, r2, #3
   16a88:	strb	lr, [sp, #154]	; 0x9a
   16a8c:	b	1686c <__assert_fail@plt+0x5488>
   16a90:	cmp	r6, #69	; 0x45
   16a94:	beq	16720 <__assert_fail@plt+0x533c>
   16a98:	ldr	r2, [sp, #52]	; 0x34
   16a9c:	cmp	r8, #0
   16aa0:	mov	r7, #0
   16aa4:	movne	r2, r8
   16aa8:	str	r2, [sp, #52]	; 0x34
   16aac:	b	16854 <__assert_fail@plt+0x5470>
   16ab0:	ldr	r3, [sp, #48]	; 0x30
   16ab4:	cmp	r9, #45	; 0x2d
   16ab8:	sub	r3, r3, sl
   16abc:	beq	17970 <__assert_fail@plt+0x658c>
   16ac0:	cmp	fp, #0
   16ac4:	blt	17970 <__assert_fail@plt+0x658c>
   16ac8:	cmp	fp, #1
   16acc:	movcs	r6, fp
   16ad0:	movcc	r6, #1
   16ad4:	cmp	r6, r3
   16ad8:	bcs	16380 <__assert_fail@plt+0x4f9c>
   16adc:	cmp	r5, #0
   16ae0:	beq	16b18 <__assert_fail@plt+0x5734>
   16ae4:	cmp	fp, #1
   16ae8:	ble	16b10 <__assert_fail@plt+0x572c>
   16aec:	cmp	r9, #43	; 0x2b
   16af0:	cmpne	r9, #48	; 0x30
   16af4:	sub	r2, fp, #1
   16af8:	mov	r0, r5
   16afc:	add	r3, r5, r2
   16b00:	moveq	r1, #48	; 0x30
   16b04:	movne	r1, #32
   16b08:	mov	r5, r3
   16b0c:	bl	112e8 <memset@plt>
   16b10:	mov	r3, #9
   16b14:	strb	r3, [r5], #1
   16b18:	add	sl, sl, r6
   16b1c:	b	16338 <__assert_fail@plt+0x4f54>
   16b20:	ldr	r3, [sp, #52]	; 0x34
   16b24:	cmp	r8, #0
   16b28:	movne	r3, #0
   16b2c:	ldr	r0, [sp, #112]	; 0x70
   16b30:	str	r3, [sp, #52]	; 0x34
   16b34:	bl	11294 <strlen@plt>
   16b38:	subs	r3, r9, #45	; 0x2d
   16b3c:	mov	r6, r0
   16b40:	movne	r3, #1
   16b44:	cmp	fp, #0
   16b48:	movlt	r3, #0
   16b4c:	cmp	r3, #0
   16b50:	moveq	fp, r3
   16b54:	moveq	r7, r0
   16b58:	beq	16b68 <__assert_fail@plt+0x5784>
   16b5c:	cmp	r0, fp
   16b60:	movcs	r7, r0
   16b64:	movcc	r7, fp
   16b68:	ldr	r3, [sp, #48]	; 0x30
   16b6c:	sub	r3, r3, sl
   16b70:	cmp	r3, r7
   16b74:	bls	16380 <__assert_fail@plt+0x4f9c>
   16b78:	cmp	r5, #0
   16b7c:	beq	16bf4 <__assert_fail@plt+0x5810>
   16b80:	cmp	r6, fp
   16b84:	bcs	16bac <__assert_fail@plt+0x57c8>
   16b88:	cmp	r9, #43	; 0x2b
   16b8c:	cmpne	r9, #48	; 0x30
   16b90:	sub	r2, fp, r6
   16b94:	mov	r0, r5
   16b98:	add	r3, r5, r2
   16b9c:	moveq	r1, #48	; 0x30
   16ba0:	movne	r1, #32
   16ba4:	mov	r5, r3
   16ba8:	bl	112e8 <memset@plt>
   16bac:	cmp	r8, #0
   16bb0:	bne	17f08 <__assert_fail@plt+0x6b24>
   16bb4:	ldr	r3, [sp, #52]	; 0x34
   16bb8:	cmp	r3, #0
   16bbc:	beq	17ef0 <__assert_fail@plt+0x6b0c>
   16bc0:	cmp	r6, #0
   16bc4:	beq	16bf4 <__assert_fail@plt+0x5810>
   16bc8:	bl	11258 <__ctype_toupper_loc@plt>
   16bcc:	ldr	ip, [sp, #112]	; 0x70
   16bd0:	add	r5, r5, r6
   16bd4:	mov	r3, r5
   16bd8:	add	r6, ip, r6
   16bdc:	ldrb	r1, [r6, #-1]!
   16be0:	ldr	r2, [r0]
   16be4:	cmp	ip, r6
   16be8:	ldr	r2, [r2, r1, lsl #2]
   16bec:	strb	r2, [r3, #-1]!
   16bf0:	bne	16bdc <__assert_fail@plt+0x57f8>
   16bf4:	add	sl, sl, r7
   16bf8:	b	16338 <__assert_fail@plt+0x4f54>
   16bfc:	mov	r2, #0
   16c00:	str	r2, [sp, #140]	; 0x8c
   16c04:	ldr	r1, [sp, #100]	; 0x64
   16c08:	ldr	r2, [r1, #32]
   16c0c:	cmp	r2, #0
   16c10:	blt	16338 <__assert_fail@plt+0x4f54>
   16c14:	ldr	r1, [r1, #36]	; 0x24
   16c18:	cmp	r1, #0
   16c1c:	blt	17b20 <__assert_fail@plt+0x673c>
   16c20:	bne	17c18 <__assert_fail@plt+0x6834>
   16c24:	ldr	r2, [sp, #112]	; 0x70
   16c28:	ldrb	r2, [r2]
   16c2c:	cmp	r2, #45	; 0x2d
   16c30:	movne	r2, r1
   16c34:	moveq	r2, #1
   16c38:	moveq	r8, r1
   16c3c:	movne	r8, #1
   16c40:	str	r2, [sp, #84]	; 0x54
   16c44:	ldr	r0, [sp, #116]	; 0x74
   16c48:	movw	ip, #34953	; 0x8889
   16c4c:	movt	ip, #34952	; 0x8888
   16c50:	smull	r2, r0, r0, r1
   16c54:	str	r0, [sp, #144]	; 0x90
   16c58:	smull	r0, r2, ip, r1
   16c5c:	ldr	r0, [sp, #144]	; 0x90
   16c60:	add	r2, r2, r1
   16c64:	str	r2, [sp, #144]	; 0x90
   16c68:	asr	r2, r1, #31
   16c6c:	add	r0, r0, r1
   16c70:	rsb	r0, r2, r0, asr #11
   16c74:	str	r0, [sp, #148]	; 0x94
   16c78:	ldr	r0, [sp, #144]	; 0x90
   16c7c:	rsb	r2, r2, r0, asr #5
   16c80:	smull	ip, r0, ip, r2
   16c84:	rsb	ip, r2, r2, lsl #4
   16c88:	sub	ip, r1, ip, lsl #2
   16c8c:	add	r0, r0, r2
   16c90:	asr	r1, r2, #31
   16c94:	rsb	r0, r1, r0, asr #5
   16c98:	rsb	r0, r0, r0, lsl #4
   16c9c:	sub	r0, r2, r0, lsl #2
   16ca0:	ldr	r2, [sp, #140]	; 0x8c
   16ca4:	cmp	r2, #3
   16ca8:	ldrls	pc, [pc, r2, lsl #2]
   16cac:	b	16720 <__assert_fail@plt+0x533c>
   16cb0:	andeq	r7, r1, r0, lsl r8
   16cb4:			; <UNDEFINED> instruction: 0x000177bc
   16cb8:	andeq	r7, r1, r0, ror #15
   16cbc:	andeq	r7, r1, r0, lsr r8
   16cc0:	cmp	r6, #69	; 0x45
   16cc4:	beq	16720 <__assert_fail@plt+0x533c>
   16cc8:	mov	r2, #2
   16ccc:	str	r2, [sp, #140]	; 0x8c
   16cd0:	ldr	r2, [sp, #100]	; 0x64
   16cd4:	ldr	r2, [r2, #12]
   16cd8:	mov	r1, r2
   16cdc:	mov	r0, #0
   16ce0:	lsr	r2, r2, #31
   16ce4:	cmp	r1, r0
   16ce8:	movlt	r8, #0
   16cec:	movge	r8, #1
   16cf0:	str	r2, [sp, #84]	; 0x54
   16cf4:	str	r0, [sp, #144]	; 0x90
   16cf8:	cmp	r6, #79	; 0x4f
   16cfc:	movne	r6, #0
   16d00:	andeq	r6, r8, #1
   16d04:	cmp	r6, #0
   16d08:	bne	16a74 <__assert_fail@plt+0x5690>
   16d0c:	ldr	r3, [sp, #84]	; 0x54
   16d10:	cmp	r3, #0
   16d14:	rsbne	r1, r1, #0
   16d18:	add	r2, sp, #152	; 0x98
   16d1c:	mov	r7, #58	; 0x3a
   16d20:	str	r4, [sp, #148]	; 0x94
   16d24:	add	ip, r2, #14
   16d28:	ldr	r4, [sp, #108]	; 0x6c
   16d2c:	b	16d70 <__assert_fail@plt+0x598c>
   16d30:	lsr	r3, r3, #3
   16d34:	sub	r6, ip, #2
   16d38:	strb	r7, [ip, #-1]
   16d3c:	asrs	r0, r0, #1
   16d40:	add	lr, r3, r3, lsl #2
   16d44:	movne	r8, #1
   16d48:	moveq	r8, #0
   16d4c:	cmp	r1, #9
   16d50:	orrhi	r8, r8, #1
   16d54:	sub	r1, r1, lr, lsl #1
   16d58:	cmp	r8, #0
   16d5c:	add	r1, r1, #48	; 0x30
   16d60:	strb	r1, [ip, #-2]
   16d64:	beq	16db0 <__assert_fail@plt+0x59cc>
   16d68:	mov	ip, r6
   16d6c:	mov	r1, r3
   16d70:	tst	r0, #1
   16d74:	umull	lr, r3, r4, r1
   16d78:	sub	r6, ip, #1
   16d7c:	bne	16d30 <__assert_fail@plt+0x594c>
   16d80:	lsr	r3, r3, #3
   16d84:	asrs	r0, r0, #1
   16d88:	add	lr, r3, r3, lsl #2
   16d8c:	movne	r8, #1
   16d90:	moveq	r8, #0
   16d94:	cmp	r1, #9
   16d98:	orrhi	r8, r8, #1
   16d9c:	sub	r1, r1, lr, lsl #1
   16da0:	cmp	r8, #0
   16da4:	add	r1, r1, #48	; 0x30
   16da8:	strb	r1, [ip, #-1]
   16dac:	bne	16d68 <__assert_fail@plt+0x5984>
   16db0:	ldr	r4, [sp, #148]	; 0x94
   16db4:	cmp	r9, #0
   16db8:	moveq	r3, #1
   16dbc:	moveq	r9, #48	; 0x30
   16dc0:	beq	16dcc <__assert_fail@plt+0x59e8>
   16dc4:	subs	r3, r9, #45	; 0x2d
   16dc8:	movne	r3, #1
   16dcc:	ldr	r1, [sp, #140]	; 0x8c
   16dd0:	cmp	fp, #0
   16dd4:	add	r2, r2, #14
   16dd8:	sub	r7, r2, r6
   16ddc:	movlt	fp, r1
   16de0:	ldr	r1, [sp, #84]	; 0x54
   16de4:	cmp	r1, #0
   16de8:	bne	17858 <__assert_fail@plt+0x6474>
   16dec:	ldr	r1, [sp, #144]	; 0x90
   16df0:	cmp	r1, #0
   16df4:	bne	17934 <__assert_fail@plt+0x6550>
   16df8:	sub	r2, fp, r7
   16dfc:	cmp	r2, #0
   16e00:	movle	r3, #0
   16e04:	andgt	r3, r3, #1
   16e08:	cmp	r3, #0
   16e0c:	bne	16e20 <__assert_fail@plt+0x5a3c>
   16e10:	cmp	r9, #45	; 0x2d
   16e14:	moveq	fp, r1
   16e18:	moveq	r8, r7
   16e1c:	beq	16e2c <__assert_fail@plt+0x5a48>
   16e20:	cmp	fp, r7
   16e24:	movcs	r8, fp
   16e28:	movcc	r8, r7
   16e2c:	ldr	r3, [sp, #48]	; 0x30
   16e30:	sub	r3, r3, sl
   16e34:	cmp	r3, r8
   16e38:	bls	16380 <__assert_fail@plt+0x4f9c>
   16e3c:	cmp	r5, #0
   16e40:	beq	16800 <__assert_fail@plt+0x541c>
   16e44:	cmp	fp, r7
   16e48:	bls	16e70 <__assert_fail@plt+0x5a8c>
   16e4c:	cmp	r9, #43	; 0x2b
   16e50:	cmpne	r9, #48	; 0x30
   16e54:	sub	r2, fp, r7
   16e58:	mov	r0, r5
   16e5c:	add	r3, r5, r2
   16e60:	moveq	r1, #48	; 0x30
   16e64:	movne	r1, #32
   16e68:	mov	r5, r3
   16e6c:	bl	112e8 <memset@plt>
   16e70:	ldr	r3, [sp, #52]	; 0x34
   16e74:	cmp	r3, #0
   16e78:	beq	178c4 <__assert_fail@plt+0x64e0>
   16e7c:	cmp	r7, #0
   16e80:	beq	16800 <__assert_fail@plt+0x541c>
   16e84:	add	r5, r5, r7
   16e88:	add	r7, r6, r7
   16e8c:	bl	11258 <__ctype_toupper_loc@plt>
   16e90:	mov	r3, r5
   16e94:	ldrb	r1, [r7, #-1]!
   16e98:	ldr	r2, [r0]
   16e9c:	cmp	r6, r7
   16ea0:	ldr	r2, [r2, r1, lsl #2]
   16ea4:	strb	r2, [r3, #-1]!
   16ea8:	bne	16e94 <__assert_fail@plt+0x5ab0>
   16eac:	b	16800 <__assert_fail@plt+0x541c>
   16eb0:	cmp	r6, #69	; 0x45
   16eb4:	beq	16720 <__assert_fail@plt+0x533c>
   16eb8:	ldr	r2, [sp, #100]	; 0x64
   16ebc:	ldr	r2, [r2, #12]
   16ec0:	mov	r1, #2
   16ec4:	cmp	r9, #0
   16ec8:	moveq	r9, #95	; 0x5f
   16ecc:	str	r1, [sp, #140]	; 0x8c
   16ed0:	b	16cd8 <__assert_fail@plt+0x58f4>
   16ed4:	cmp	r6, #69	; 0x45
   16ed8:	beq	16720 <__assert_fail@plt+0x533c>
   16edc:	mov	r2, #2
   16ee0:	str	r2, [sp, #140]	; 0x8c
   16ee4:	ldr	r2, [sp, #100]	; 0x64
   16ee8:	ldr	r2, [r2]
   16eec:	b	16cd8 <__assert_fail@plt+0x58f4>
   16ef0:	movw	r8, #5816	; 0x16b8
   16ef4:	movt	r8, #2
   16ef8:	ldr	r3, [sp, #48]	; 0x30
   16efc:	sub	r3, r3, sl
   16f00:	str	r3, [sp, #84]	; 0x54
   16f04:	mvn	r3, #0
   16f08:	mov	ip, r3
   16f0c:	str	r3, [sp, #140]	; 0x8c
   16f10:	ldr	r1, [sp, #52]	; 0x34
   16f14:	mov	r2, r8
   16f18:	mov	r0, #0
   16f1c:	ldr	r3, [sp, #100]	; 0x64
   16f20:	stm	sp, {r1, r9, ip}
   16f24:	mvn	r1, #0
   16f28:	ldr	ip, [sp, #1244]	; 0x4dc
   16f2c:	str	ip, [sp, #12]
   16f30:	ldr	ip, [sp, #1248]	; 0x4e0
   16f34:	str	ip, [sp, #16]
   16f38:	ldr	ip, [sp, #1252]	; 0x4e4
   16f3c:	str	ip, [sp, #20]
   16f40:	bl	16028 <__assert_fail@plt+0x4c44>
   16f44:	cmp	r9, #45	; 0x2d
   16f48:	mov	r7, r0
   16f4c:	beq	17928 <__assert_fail@plt+0x6544>
   16f50:	cmp	fp, #0
   16f54:	blt	17928 <__assert_fail@plt+0x6544>
   16f58:	cmp	r0, fp
   16f5c:	movcs	r6, r0
   16f60:	movcc	r6, fp
   16f64:	ldr	r3, [sp, #84]	; 0x54
   16f68:	cmp	r6, r3
   16f6c:	bcs	16380 <__assert_fail@plt+0x4f9c>
   16f70:	cmp	r5, #0
   16f74:	beq	16b18 <__assert_fail@plt+0x5734>
   16f78:	cmp	fp, r7
   16f7c:	bls	16fa4 <__assert_fail@plt+0x5bc0>
   16f80:	cmp	r9, #43	; 0x2b
   16f84:	cmpne	r9, #48	; 0x30
   16f88:	sub	r2, fp, r7
   16f8c:	mov	r0, r5
   16f90:	add	r3, r5, r2
   16f94:	moveq	r1, #48	; 0x30
   16f98:	movne	r1, #32
   16f9c:	mov	r5, r3
   16fa0:	bl	112e8 <memset@plt>
   16fa4:	ldr	r3, [sp, #52]	; 0x34
   16fa8:	mov	r2, r8
   16fac:	mov	r0, r5
   16fb0:	add	r5, r5, r7
   16fb4:	ldr	r1, [sp, #84]	; 0x54
   16fb8:	ldr	ip, [sp, #140]	; 0x8c
   16fbc:	stm	sp, {r3, r9, ip}
   16fc0:	ldr	r3, [sp, #100]	; 0x64
   16fc4:	ldr	ip, [sp, #1244]	; 0x4dc
   16fc8:	str	ip, [sp, #12]
   16fcc:	ldr	ip, [sp, #1248]	; 0x4e0
   16fd0:	str	ip, [sp, #16]
   16fd4:	ldr	ip, [sp, #1252]	; 0x4e4
   16fd8:	str	ip, [sp, #20]
   16fdc:	bl	16028 <__assert_fail@plt+0x4c44>
   16fe0:	b	16b18 <__assert_fail@plt+0x5734>
   16fe4:	cmp	r6, #69	; 0x45
   16fe8:	beq	16720 <__assert_fail@plt+0x533c>
   16fec:	ldr	r1, [sp, #100]	; 0x64
   16ff0:	movw	r2, #9363	; 0x2493
   16ff4:	movt	r2, #37449	; 0x9249
   16ff8:	mov	ip, #2
   16ffc:	str	ip, [sp, #140]	; 0x8c
   17000:	ldrd	r0, [r1, #24]
   17004:	sub	r1, r1, r0
   17008:	add	r1, r1, #7
   1700c:	smull	r2, r0, r2, r1
   17010:	asr	r2, r1, #31
   17014:	add	r1, r0, r1
   17018:	rsb	r2, r2, r1, asr ip
   1701c:	b	16cd8 <__assert_fail@plt+0x58f4>
   17020:	cmp	r6, #69	; 0x45
   17024:	beq	16720 <__assert_fail@plt+0x533c>
   17028:	ldr	r0, [sp, #100]	; 0x64
   1702c:	mov	ip, #2
   17030:	movw	r1, #9363	; 0x2493
   17034:	movt	r1, #37449	; 0x9249
   17038:	str	ip, [sp, #140]	; 0x8c
   1703c:	ldr	r2, [r0, #24]
   17040:	ldr	r7, [r0, #28]
   17044:	add	r2, r2, #6
   17048:	asr	r0, r2, #31
   1704c:	smull	r8, ip, r1, r2
   17050:	add	ip, ip, r2
   17054:	rsb	r0, r0, ip, asr #2
   17058:	rsb	r0, r0, r0, lsl #3
   1705c:	sub	r0, r2, r0
   17060:	sub	r0, r7, r0
   17064:	add	r0, r0, #7
   17068:	asr	r2, r0, #31
   1706c:	smull	ip, r1, r1, r0
   17070:	add	r1, r1, r0
   17074:	rsb	r2, r2, r1, asr #2
   17078:	b	16cd8 <__assert_fail@plt+0x58f4>
   1707c:	ldr	r3, [sp, #48]	; 0x30
   17080:	cmp	r6, #69	; 0x45
   17084:	sub	r3, r3, sl
   17088:	str	r3, [sp, #84]	; 0x54
   1708c:	beq	1672c <__assert_fail@plt+0x5348>
   17090:	cmp	fp, #0
   17094:	ble	17c28 <__assert_fail@plt+0x6844>
   17098:	cmp	fp, #8
   1709c:	bgt	1806c <__assert_fail@plt+0x6c88>
   170a0:	cmp	fp, #7
   170a4:	bgt	17c38 <__assert_fail@plt+0x6854>
   170a8:	beq	17c4c <__assert_fail@plt+0x6868>
   170ac:	cmp	fp, #6
   170b0:	beq	17c60 <__assert_fail@plt+0x687c>
   170b4:	cmp	fp, #5
   170b8:	beq	17c74 <__assert_fail@plt+0x6890>
   170bc:	cmp	fp, #4
   170c0:	beq	17c88 <__assert_fail@plt+0x68a4>
   170c4:	cmp	fp, #3
   170c8:	beq	17c9c <__assert_fail@plt+0x68b8>
   170cc:	cmp	fp, #1
   170d0:	bne	1804c <__assert_fail@plt+0x6c68>
   170d4:	ldr	r2, [sp, #92]	; 0x5c
   170d8:	mov	r6, #1
   170dc:	ldr	r3, [sp, #124]	; 0x7c
   170e0:	sub	r3, r3, r2, asr #31
   170e4:	add	r3, r3, r3, lsl #2
   170e8:	sub	r3, r2, r3, lsl r6
   170ec:	add	r3, r3, #48	; 0x30
   170f0:	strb	r3, [sp, #152]	; 0x98
   170f4:	cmp	r9, #0
   170f8:	ldr	r3, [sp, #84]	; 0x54
   170fc:	bne	17b4c <__assert_fail@plt+0x6768>
   17100:	cmp	r6, r3
   17104:	bcs	16380 <__assert_fail@plt+0x4f9c>
   17108:	ldr	r3, [sp, #48]	; 0x30
   1710c:	add	sl, sl, r6
   17110:	cmp	r5, #0
   17114:	movne	r9, #48	; 0x30
   17118:	sub	r7, r3, sl
   1711c:	beq	18004 <__assert_fail@plt+0x6c20>
   17120:	ldr	r3, [sp, #52]	; 0x34
   17124:	cmp	r3, #0
   17128:	beq	17f40 <__assert_fail@plt+0x6b5c>
   1712c:	bl	11258 <__ctype_toupper_loc@plt>
   17130:	add	r5, r5, r6
   17134:	add	lr, sp, #152	; 0x98
   17138:	mov	r2, r5
   1713c:	add	r3, lr, r6
   17140:	ldrb	ip, [r3, #-1]!
   17144:	ldr	r1, [r0]
   17148:	cmp	lr, r3
   1714c:	ldr	r1, [r1, ip, lsl #2]
   17150:	strb	r1, [r2, #-1]!
   17154:	bne	17140 <__assert_fail@plt+0x5d5c>
   17158:	cmp	r9, #45	; 0x2d
   1715c:	beq	17b70 <__assert_fail@plt+0x678c>
   17160:	sub	r2, fp, r6
   17164:	cmp	r2, r7
   17168:	bcs	16380 <__assert_fail@plt+0x4f9c>
   1716c:	cmp	r5, #0
   17170:	addeq	sl, sl, r2
   17174:	beq	16338 <__assert_fail@plt+0x4f54>
   17178:	cmp	r2, #0
   1717c:	beq	16338 <__assert_fail@plt+0x4f54>
   17180:	cmp	r9, #43	; 0x2b
   17184:	cmpne	r9, #48	; 0x30
   17188:	add	r3, r5, r2
   1718c:	mov	r0, r5
   17190:	moveq	r1, #48	; 0x30
   17194:	movne	r1, #32
   17198:	add	sl, sl, r2
   1719c:	mov	r5, r3
   171a0:	bl	112e8 <memset@plt>
   171a4:	b	16338 <__assert_fail@plt+0x4f54>
   171a8:	ldr	r2, [sp, #48]	; 0x30
   171ac:	sub	r3, r4, #1
   171b0:	cmp	r3, r7
   171b4:	movne	r4, r3
   171b8:	sub	r2, r2, sl
   171bc:	str	r2, [sp, #84]	; 0x54
   171c0:	bne	1672c <__assert_fail@plt+0x5348>
   171c4:	cmp	r9, #45	; 0x2d
   171c8:	mov	r3, r2
   171cc:	beq	17b80 <__assert_fail@plt+0x679c>
   171d0:	cmp	fp, #0
   171d4:	blt	17b80 <__assert_fail@plt+0x679c>
   171d8:	cmp	fp, #1
   171dc:	movcs	r6, fp
   171e0:	movcc	r6, #1
   171e4:	cmp	r6, r2
   171e8:	bcs	16380 <__assert_fail@plt+0x4f9c>
   171ec:	cmp	r5, #0
   171f0:	beq	16b18 <__assert_fail@plt+0x5734>
   171f4:	cmp	fp, #1
   171f8:	ble	17220 <__assert_fail@plt+0x5e3c>
   171fc:	cmp	r9, #43	; 0x2b
   17200:	cmpne	r9, #48	; 0x30
   17204:	sub	r2, fp, #1
   17208:	mov	r0, r5
   1720c:	add	r3, r5, r2
   17210:	moveq	r1, #48	; 0x30
   17214:	movne	r1, #32
   17218:	mov	r5, r3
   1721c:	bl	112e8 <memset@plt>
   17220:	ldrb	r3, [r4]
   17224:	strb	r3, [r5], #1
   17228:	b	16b18 <__assert_fail@plt+0x5734>
   1722c:	ldr	r2, [sp, #100]	; 0x64
   17230:	movw	r0, #9363	; 0x2493
   17234:	movt	r0, #37449	; 0x9249
   17238:	mov	r1, #1
   1723c:	str	r1, [sp, #140]	; 0x8c
   17240:	ldr	r2, [r2, #24]
   17244:	add	r2, r2, #6
   17248:	asr	r1, r2, #31
   1724c:	smull	ip, r0, r0, r2
   17250:	add	r0, r0, r2
   17254:	rsb	r1, r1, r0, asr #2
   17258:	rsb	r1, r1, r1, lsl #3
   1725c:	sub	r2, r2, r1
   17260:	add	r2, r2, #1
   17264:	b	16cd8 <__assert_fail@plt+0x58f4>
   17268:	cmp	r6, #69	; 0x45
   1726c:	beq	16720 <__assert_fail@plt+0x533c>
   17270:	mov	r2, #1
   17274:	str	r2, [sp, #140]	; 0x8c
   17278:	ldr	r2, [sp, #100]	; 0x64
   1727c:	ldr	r2, [r2, #24]
   17280:	b	16cd8 <__assert_fail@plt+0x58f4>
   17284:	cmp	r6, #69	; 0x45
   17288:	beq	16720 <__assert_fail@plt+0x533c>
   1728c:	ldr	r2, [sp, #80]	; 0x50
   17290:	b	16ec0 <__assert_fail@plt+0x5adc>
   17294:	cmp	r6, #69	; 0x45
   17298:	beq	16720 <__assert_fail@plt+0x533c>
   1729c:	ldr	r2, [sp, #100]	; 0x64
   172a0:	mov	r0, #0
   172a4:	ldr	r1, [r2, #16]
   172a8:	mov	r2, #2
   172ac:	cmn	r1, #1
   172b0:	str	r2, [sp, #140]	; 0x8c
   172b4:	add	r1, r1, #1
   172b8:	movlt	r2, #1
   172bc:	movge	r2, r0
   172c0:	movge	r8, #1
   172c4:	movlt	r8, r0
   172c8:	str	r2, [sp, #84]	; 0x54
   172cc:	str	r0, [sp, #144]	; 0x90
   172d0:	b	16cf8 <__assert_fail@plt+0x5914>
   172d4:	ldr	r3, [sp, #48]	; 0x30
   172d8:	cmp	r9, #45	; 0x2d
   172dc:	sub	r3, r3, sl
   172e0:	beq	17988 <__assert_fail@plt+0x65a4>
   172e4:	cmp	fp, #0
   172e8:	blt	17988 <__assert_fail@plt+0x65a4>
   172ec:	cmp	fp, #1
   172f0:	movcs	r6, fp
   172f4:	movcc	r6, #1
   172f8:	cmp	r6, r3
   172fc:	bcs	16380 <__assert_fail@plt+0x4f9c>
   17300:	cmp	r5, #0
   17304:	beq	16b18 <__assert_fail@plt+0x5734>
   17308:	cmp	fp, #1
   1730c:	ble	17334 <__assert_fail@plt+0x5f50>
   17310:	cmp	r9, #43	; 0x2b
   17314:	cmpne	r9, #48	; 0x30
   17318:	sub	r2, fp, #1
   1731c:	mov	r0, r5
   17320:	add	r3, r5, r2
   17324:	moveq	r1, #48	; 0x30
   17328:	movne	r1, #32
   1732c:	mov	r5, r3
   17330:	bl	112e8 <memset@plt>
   17334:	mov	r3, #10
   17338:	strb	r3, [r5], #1
   1733c:	b	16b18 <__assert_fail@plt+0x5734>
   17340:	mov	r7, #0
   17344:	ldr	r2, [sp, #52]	; 0x34
   17348:	cmp	r8, #0
   1734c:	mov	r3, #112	; 0x70
   17350:	movne	r2, #0
   17354:	movne	r7, r8
   17358:	str	r2, [sp, #52]	; 0x34
   1735c:	b	16854 <__assert_fail@plt+0x5470>
   17360:	ldr	r2, [sp, #52]	; 0x34
   17364:	cmp	r8, #0
   17368:	movne	r2, r8
   1736c:	cmp	r6, #69	; 0x45
   17370:	str	r2, [sp, #52]	; 0x34
   17374:	bne	16850 <__assert_fail@plt+0x546c>
   17378:	b	16720 <__assert_fail@plt+0x533c>
   1737c:	cmp	r6, #69	; 0x45
   17380:	beq	16a74 <__assert_fail@plt+0x5690>
   17384:	ldr	r2, [sp, #100]	; 0x64
   17388:	movw	r1, #34079	; 0x851f
   1738c:	movt	r1, #20971	; 0x51eb
   17390:	mov	r0, #100	; 0x64
   17394:	ldr	r2, [r2, #20]
   17398:	smull	r1, ip, r1, r2
   1739c:	asr	r1, r2, #31
   173a0:	rsb	r1, r1, ip, asr #5
   173a4:	mls	r1, r0, r1, r2
   173a8:	cmp	r1, #0
   173ac:	bge	173c4 <__assert_fail@plt+0x5fe0>
   173b0:	movw	r0, #63636	; 0xf894
   173b4:	movt	r0, #65535	; 0xffff
   173b8:	cmp	r2, r0
   173bc:	rsblt	r1, r1, #0
   173c0:	addge	r1, r1, #100	; 0x64
   173c4:	cmp	r9, #0
   173c8:	bne	17a20 <__assert_fail@plt+0x663c>
   173cc:	ldr	r2, [sp, #1236]	; 0x4d4
   173d0:	cmp	r2, #43	; 0x2b
   173d4:	beq	17f94 <__assert_fail@plt+0x6bb0>
   173d8:	mov	r9, r2
   173dc:	mov	r2, #0
   173e0:	mov	r8, #1
   173e4:	str	r2, [sp, #84]	; 0x54
   173e8:	str	r2, [sp, #144]	; 0x90
   173ec:	mov	r2, #2
   173f0:	str	r2, [sp, #140]	; 0x8c
   173f4:	mov	r0, #0
   173f8:	b	16cf8 <__assert_fail@plt+0x5914>
   173fc:	cmp	r6, #69	; 0x45
   17400:	beq	16a74 <__assert_fail@plt+0x5690>
   17404:	cmp	r6, #79	; 0x4f
   17408:	beq	16720 <__assert_fail@plt+0x533c>
   1740c:	ldr	r2, [sp, #100]	; 0x64
   17410:	ldr	r1, [r2, #20]
   17414:	movw	r2, #63636	; 0xf894
   17418:	movt	r2, #65535	; 0xffff
   1741c:	cmp	r1, r2
   17420:	add	r1, r1, #1888	; 0x760
   17424:	movlt	r2, #1
   17428:	movge	r2, #0
   1742c:	movge	r8, #1
   17430:	movlt	r8, #0
   17434:	cmp	r9, #0
   17438:	add	r1, r1, #12
   1743c:	str	r2, [sp, #84]	; 0x54
   17440:	bne	179b4 <__assert_fail@plt+0x65d0>
   17444:	ldr	r2, [sp, #1236]	; 0x4d4
   17448:	cmp	r2, #43	; 0x2b
   1744c:	beq	179cc <__assert_fail@plt+0x65e8>
   17450:	mov	r0, r9
   17454:	mov	r3, #4
   17458:	mov	r9, r2
   1745c:	str	r3, [sp, #140]	; 0x8c
   17460:	str	r0, [sp, #144]	; 0x90
   17464:	b	16d0c <__assert_fail@plt+0x5928>
   17468:	cmp	r6, #69	; 0x45
   1746c:	beq	16a74 <__assert_fail@plt+0x5690>
   17470:	ldr	r2, [sp, #100]	; 0x64
   17474:	movw	r0, #63636	; 0xf894
   17478:	movt	r0, #65535	; 0xffff
   1747c:	movw	r7, #1899	; 0x76b
   17480:	movw	ip, #34079	; 0x851f
   17484:	movt	ip, #20971	; 0x51eb
   17488:	ldr	r1, [r2, #20]
   1748c:	add	r2, r1, #1888	; 0x760
   17490:	cmp	r1, r0
   17494:	add	r2, r2, #12
   17498:	movge	r8, #0
   1749c:	movlt	r8, #1
   174a0:	cmp	r2, r7
   174a4:	mvnls	r2, #98	; 0x62
   174a8:	movhi	r2, #0
   174ac:	add	r2, r2, r1
   174b0:	cmp	r1, r0
   174b4:	str	r8, [sp, #84]	; 0x54
   174b8:	asr	r0, r2, #31
   174bc:	movlt	r8, #0
   174c0:	movge	r8, #1
   174c4:	smull	r1, r2, ip, r2
   174c8:	cmp	r9, #0
   174cc:	rsb	r2, r0, r2, asr #5
   174d0:	add	r1, r2, #19
   174d4:	bne	17b30 <__assert_fail@plt+0x674c>
   174d8:	ldr	r2, [sp, #1236]	; 0x4d4
   174dc:	cmp	r2, #43	; 0x2b
   174e0:	beq	1801c <__assert_fail@plt+0x6c38>
   174e4:	mov	r9, r2
   174e8:	mov	r2, #0
   174ec:	str	r2, [sp, #144]	; 0x90
   174f0:	mov	r2, #2
   174f4:	str	r2, [sp, #140]	; 0x8c
   174f8:	b	173f4 <__assert_fail@plt+0x6010>
   174fc:	cmp	r6, #69	; 0x45
   17500:	beq	16720 <__assert_fail@plt+0x533c>
   17504:	ldr	r2, [sp, #100]	; 0x64
   17508:	mov	r0, #0
   1750c:	ldr	r1, [r2, #28]
   17510:	mov	r2, #3
   17514:	b	172ac <__assert_fail@plt+0x5ec8>
   17518:	cmp	r6, #69	; 0x45
   1751c:	beq	16720 <__assert_fail@plt+0x533c>
   17520:	ldr	r2, [sp, #100]	; 0x64
   17524:	ldr	r2, [r2, #8]
   17528:	b	16ec0 <__assert_fail@plt+0x5adc>
   1752c:	cmp	r6, #69	; 0x45
   17530:	beq	16720 <__assert_fail@plt+0x533c>
   17534:	ldr	r2, [sp, #100]	; 0x64
   17538:	movw	r0, #9363	; 0x2493
   1753c:	movt	r0, #37449	; 0x9249
   17540:	ldr	r7, [r2, #20]
   17544:	ldr	r1, [r2, #24]
   17548:	ldr	r8, [r2, #28]
   1754c:	cmp	r7, #0
   17550:	str	r1, [sp, #140]	; 0x8c
   17554:	sub	r2, r8, r1
   17558:	add	r2, r2, #380	; 0x17c
   1755c:	add	r2, r2, #2
   17560:	asr	r1, r2, #31
   17564:	smull	ip, r0, r0, r2
   17568:	movlt	ip, #300	; 0x12c
   1756c:	mvnge	ip, #99	; 0x63
   17570:	add	r0, r0, r2
   17574:	add	ip, r7, ip
   17578:	rsb	r1, r1, r0, asr #2
   1757c:	rsb	r1, r1, r1, lsl #3
   17580:	sub	r2, r2, r1
   17584:	sub	r2, r8, r2
   17588:	adds	r2, r2, #3
   1758c:	str	r2, [sp, #84]	; 0x54
   17590:	bmi	17a6c <__assert_fail@plt+0x6688>
   17594:	tst	ip, #3
   17598:	movwne	r1, #365	; 0x16d
   1759c:	bne	175e8 <__assert_fail@plt+0x6204>
   175a0:	movw	r1, #34079	; 0x851f
   175a4:	movt	r1, #20971	; 0x51eb
   175a8:	asr	r2, ip, #31
   175ac:	smull	r0, r1, r1, ip
   175b0:	rsb	r2, r2, r1, asr #5
   175b4:	mov	r1, #100	; 0x64
   175b8:	mls	r2, r1, r2, ip
   175bc:	cmp	r2, #0
   175c0:	movwne	r1, #366	; 0x16e
   175c4:	bne	175e8 <__assert_fail@plt+0x6204>
   175c8:	mov	r0, #400	; 0x190
   175cc:	movw	r2, #365	; 0x16d
   175d0:	sdiv	r1, ip, r0
   175d4:	mls	r1, r0, r1, ip
   175d8:	movw	r0, #366	; 0x16e
   175dc:	cmp	r1, #0
   175e0:	movne	r0, r2
   175e4:	mov	r1, r0
   175e8:	ldr	r2, [sp, #140]	; 0x8c
   175ec:	sub	r1, r8, r1
   175f0:	movw	ip, #9363	; 0x2493
   175f4:	movt	ip, #37449	; 0x9249
   175f8:	sub	r2, r1, r2
   175fc:	add	r2, r2, #380	; 0x17c
   17600:	add	r2, r2, #2
   17604:	asr	r0, r2, #31
   17608:	smull	r8, ip, ip, r2
   1760c:	add	ip, ip, r2
   17610:	rsb	r0, r0, ip, asr #2
   17614:	rsb	r0, r0, r0, lsl #3
   17618:	sub	r0, r2, r0
   1761c:	sub	r0, r1, r0
   17620:	adds	r0, r0, #3
   17624:	bmi	17f58 <__assert_fail@plt+0x6b74>
   17628:	mov	r1, #1
   1762c:	movw	r2, #63635	; 0xf893
   17630:	movt	r2, #65535	; 0xffff
   17634:	mov	r8, r1
   17638:	str	r0, [sp, #84]	; 0x54
   1763c:	str	r2, [sp, #140]	; 0x8c
   17640:	cmp	r3, #71	; 0x47
   17644:	beq	17bc4 <__assert_fail@plt+0x67e0>
   17648:	cmp	r3, #103	; 0x67
   1764c:	bne	17b98 <__assert_fail@plt+0x67b4>
   17650:	movw	r1, #34079	; 0x851f
   17654:	movt	r1, #20971	; 0x51eb
   17658:	asr	r2, r7, #31
   1765c:	smull	r0, ip, r1, r7
   17660:	rsb	r2, r2, ip, asr #5
   17664:	mov	ip, #100	; 0x64
   17668:	mls	r2, ip, r2, r7
   1766c:	add	r2, r2, r8
   17670:	asr	ip, r2, #31
   17674:	smull	r0, r1, r1, r2
   17678:	rsb	r1, ip, r1, asr #5
   1767c:	mov	ip, #100	; 0x64
   17680:	mls	r1, ip, r1, r2
   17684:	cmp	r1, #0
   17688:	blt	17a08 <__assert_fail@plt+0x6624>
   1768c:	cmp	r9, #0
   17690:	bne	17a20 <__assert_fail@plt+0x663c>
   17694:	ldr	r2, [sp, #1236]	; 0x4d4
   17698:	cmp	r2, #43	; 0x2b
   1769c:	beq	17f94 <__assert_fail@plt+0x6bb0>
   176a0:	mov	r2, #0
   176a4:	mov	r8, #1
   176a8:	ldr	r9, [sp, #1236]	; 0x4d4
   176ac:	str	r2, [sp, #84]	; 0x54
   176b0:	str	r2, [sp, #144]	; 0x90
   176b4:	mov	r2, #2
   176b8:	str	r2, [sp, #140]	; 0x8c
   176bc:	b	173f4 <__assert_fail@plt+0x6010>
   176c0:	cmp	r6, #69	; 0x45
   176c4:	beq	16720 <__assert_fail@plt+0x533c>
   176c8:	mov	r2, #2
   176cc:	str	r2, [sp, #140]	; 0x8c
   176d0:	ldr	r2, [sp, #100]	; 0x64
   176d4:	ldr	r2, [r2, #8]
   176d8:	b	16cd8 <__assert_fail@plt+0x58f4>
   176dc:	cmp	r6, #69	; 0x45
   176e0:	beq	16720 <__assert_fail@plt+0x533c>
   176e4:	mov	r1, #2
   176e8:	ldr	r2, [sp, #80]	; 0x50
   176ec:	str	r1, [sp, #140]	; 0x8c
   176f0:	b	16cd8 <__assert_fail@plt+0x58f4>
   176f4:	cmp	r6, #69	; 0x45
   176f8:	beq	16720 <__assert_fail@plt+0x533c>
   176fc:	mov	r2, #2
   17700:	str	r2, [sp, #140]	; 0x8c
   17704:	ldr	r2, [sp, #100]	; 0x64
   17708:	ldr	r2, [r2, #4]
   1770c:	b	16cd8 <__assert_fail@plt+0x58f4>
   17710:	ldr	r3, [sp, #48]	; 0x30
   17714:	cmp	r6, #0
   17718:	sub	r3, r3, sl
   1771c:	str	r3, [sp, #84]	; 0x54
   17720:	bne	1672c <__assert_fail@plt+0x5348>
   17724:	mvn	r3, #0
   17728:	movw	r8, #5848	; 0x16d8
   1772c:	movt	r8, #2
   17730:	mov	ip, r3
   17734:	str	r3, [sp, #140]	; 0x8c
   17738:	b	16f10 <__assert_fail@plt+0x5b2c>
   1773c:	ldr	r3, [sp, #48]	; 0x30
   17740:	cmp	r6, #0
   17744:	sub	r3, r3, sl
   17748:	str	r3, [sp, #84]	; 0x54
   1774c:	bne	1672c <__assert_fail@plt+0x5348>
   17750:	cmp	r9, #0
   17754:	lsreq	r3, fp, #31
   17758:	movne	r3, #0
   1775c:	cmp	r3, #0
   17760:	bne	17fa8 <__assert_fail@plt+0x6bc4>
   17764:	sub	r3, fp, #6
   17768:	movw	r8, #5828	; 0x16c4
   1776c:	movt	r8, #2
   17770:	bic	r3, r3, r3, asr #31
   17774:	mov	ip, r3
   17778:	str	r3, [sp, #140]	; 0x8c
   1777c:	b	16f10 <__assert_fail@plt+0x5b2c>
   17780:	movw	r8, #5840	; 0x16d0
   17784:	movt	r8, #2
   17788:	b	16ef8 <__assert_fail@plt+0x5b14>
   1778c:	ldrb	r2, [r4, #1]
   17790:	add	r1, r4, #1
   17794:	cmp	r2, #58	; 0x3a
   17798:	beq	17f70 <__assert_fail@plt+0x6b8c>
   1779c:	mov	r0, #1
   177a0:	str	r0, [sp, #140]	; 0x8c
   177a4:	cmp	r2, #122	; 0x7a
   177a8:	bne	16720 <__assert_fail@plt+0x533c>
   177ac:	mov	r4, r1
   177b0:	b	16c04 <__assert_fail@plt+0x5820>
   177b4:	mov	r7, #1
   177b8:	b	17344 <__assert_fail@plt+0x5f60>
   177bc:	mov	r2, #1
   177c0:	mov	r1, #100	; 0x64
   177c4:	str	r2, [sp, #144]	; 0x90
   177c8:	mov	r2, #6
   177cc:	str	r2, [sp, #140]	; 0x8c
   177d0:	ldr	r2, [sp, #148]	; 0x94
   177d4:	mla	r1, r1, r2, r0
   177d8:	mov	r0, #4
   177dc:	b	16cf8 <__assert_fail@plt+0x5914>
   177e0:	mov	r1, #100	; 0x64
   177e4:	ldr	r7, [sp, #148]	; 0x94
   177e8:	movw	r2, #10000	; 0x2710
   177ec:	mul	r1, r1, r0
   177f0:	mov	r0, #1
   177f4:	str	r0, [sp, #144]	; 0x90
   177f8:	mov	r0, #20
   177fc:	mla	r1, r2, r7, r1
   17800:	mov	r2, #9
   17804:	str	r2, [sp, #140]	; 0x8c
   17808:	add	r1, r1, ip
   1780c:	b	16cf8 <__assert_fail@plt+0x5914>
   17810:	mov	r2, #1
   17814:	mov	r1, #100	; 0x64
   17818:	str	r2, [sp, #144]	; 0x90
   1781c:	mov	r2, #5
   17820:	str	r2, [sp, #140]	; 0x8c
   17824:	ldr	r2, [sp, #148]	; 0x94
   17828:	mla	r1, r1, r2, r0
   1782c:	b	173f4 <__assert_fail@plt+0x6010>
   17830:	cmp	ip, #0
   17834:	bne	177e0 <__assert_fail@plt+0x63fc>
   17838:	cmp	r0, #0
   1783c:	bne	177bc <__assert_fail@plt+0x63d8>
   17840:	mov	r2, #1
   17844:	ldr	r1, [sp, #148]	; 0x94
   17848:	str	r2, [sp, #144]	; 0x90
   1784c:	mov	r2, #3
   17850:	str	r2, [sp, #140]	; 0x8c
   17854:	b	16cf8 <__assert_fail@plt+0x5914>
   17858:	mov	r8, #45	; 0x2d
   1785c:	sub	r2, fp, #1
   17860:	sub	r2, r2, r7
   17864:	cmp	r2, #0
   17868:	movle	r3, #0
   1786c:	andgt	r3, r3, #1
   17870:	cmp	r3, #0
   17874:	moveq	r2, #0
   17878:	cmp	r9, #95	; 0x5f
   1787c:	beq	1793c <__assert_fail@plt+0x6558>
   17880:	ldr	r3, [sp, #48]	; 0x30
   17884:	sub	r3, r3, sl
   17888:	cmp	r3, #1
   1788c:	bls	16380 <__assert_fail@plt+0x4f9c>
   17890:	cmp	r5, #0
   17894:	add	sl, sl, #1
   17898:	strbne	r8, [r5], #1
   1789c:	cmp	r9, #45	; 0x2d
   178a0:	beq	178b0 <__assert_fail@plt+0x64cc>
   178a4:	sub	fp, fp, #1
   178a8:	cmp	fp, #0
   178ac:	bge	16e20 <__assert_fail@plt+0x5a3c>
   178b0:	mov	r8, r7
   178b4:	mov	fp, #0
   178b8:	b	16e2c <__assert_fail@plt+0x5a48>
   178bc:	mov	sl, r1
   178c0:	b	16350 <__assert_fail@plt+0x4f6c>
   178c4:	mov	r0, r5
   178c8:	mov	r1, r6
   178cc:	mov	r2, r7
   178d0:	add	r5, r5, r7
   178d4:	bl	1112c <memcpy@plt>
   178d8:	b	16800 <__assert_fail@plt+0x541c>
   178dc:	mov	r0, r5
   178e0:	add	r1, r6, #1
   178e4:	mov	r2, r8
   178e8:	add	r5, r5, r8
   178ec:	bl	1112c <memcpy@plt>
   178f0:	b	1694c <__assert_fail@plt+0x5568>
   178f4:	cmp	r8, #0
   178f8:	beq	1694c <__assert_fail@plt+0x5568>
   178fc:	add	r5, r5, r8
   17900:	add	r8, r6, r8
   17904:	bl	1124c <__ctype_tolower_loc@plt>
   17908:	mov	r3, r5
   1790c:	ldrb	r1, [r8], #-1
   17910:	ldr	r2, [r0]
   17914:	cmp	r8, r6
   17918:	ldr	r2, [r2, r1, lsl #2]
   1791c:	strb	r2, [r3, #-1]!
   17920:	bne	1790c <__assert_fail@plt+0x6528>
   17924:	b	1694c <__assert_fail@plt+0x5568>
   17928:	mov	r6, r7
   1792c:	mov	fp, #0
   17930:	b	16f64 <__assert_fail@plt+0x5b80>
   17934:	mov	r8, #43	; 0x2b
   17938:	b	1785c <__assert_fail@plt+0x6478>
   1793c:	ldr	r3, [sp, #48]	; 0x30
   17940:	add	sl, sl, r2
   17944:	cmp	r5, #0
   17948:	sub	fp, fp, r2
   1794c:	sub	r3, r3, sl
   17950:	beq	179a0 <__assert_fail@plt+0x65bc>
   17954:	mov	r0, r5
   17958:	mov	r1, #32
   1795c:	str	r3, [sp, #84]	; 0x54
   17960:	add	r5, r5, r2
   17964:	bl	112e8 <memset@plt>
   17968:	ldr	r3, [sp, #84]	; 0x54
   1796c:	b	17888 <__assert_fail@plt+0x64a4>
   17970:	cmp	r3, #1
   17974:	bls	16380 <__assert_fail@plt+0x4f9c>
   17978:	cmp	r5, #0
   1797c:	mov	r6, #1
   17980:	bne	16b10 <__assert_fail@plt+0x572c>
   17984:	b	16b18 <__assert_fail@plt+0x5734>
   17988:	cmp	r3, #1
   1798c:	bls	16380 <__assert_fail@plt+0x4f9c>
   17990:	cmp	r5, #0
   17994:	mov	r6, #1
   17998:	bne	17334 <__assert_fail@plt+0x5f50>
   1799c:	b	16b18 <__assert_fail@plt+0x5734>
   179a0:	cmp	r3, #1
   179a4:	bls	16380 <__assert_fail@plt+0x4f9c>
   179a8:	add	sl, sl, #1
   179ac:	sub	fp, fp, #1
   179b0:	b	178a8 <__assert_fail@plt+0x64c4>
   179b4:	cmp	r9, #43	; 0x2b
   179b8:	movne	r2, #0
   179bc:	strne	r2, [sp, #144]	; 0x90
   179c0:	movne	r2, #4
   179c4:	strne	r2, [sp, #140]	; 0x8c
   179c8:	bne	173f4 <__assert_fail@plt+0x6010>
   179cc:	mov	r2, #4
   179d0:	str	r2, [sp, #140]	; 0x8c
   179d4:	movw	r2, #9999	; 0x270f
   179d8:	cmp	r2, r1
   179dc:	movcc	r2, #1
   179e0:	movcc	r9, #43	; 0x2b
   179e4:	strcc	r2, [sp, #144]	; 0x90
   179e8:	bcc	173f4 <__assert_fail@plt+0x6010>
   179ec:	ldr	r2, [sp, #140]	; 0x8c
   179f0:	mov	r9, #43	; 0x2b
   179f4:	cmp	fp, r2
   179f8:	movle	r2, #0
   179fc:	movgt	r2, #1
   17a00:	str	r2, [sp, #144]	; 0x90
   17a04:	b	173f4 <__assert_fail@plt+0x6010>
   17a08:	ldr	r2, [sp, #140]	; 0x8c
   17a0c:	cmp	r7, r2
   17a10:	bge	1802c <__assert_fail@plt+0x6c48>
   17a14:	cmp	r9, #0
   17a18:	rsb	r1, r1, #0
   17a1c:	beq	17694 <__assert_fail@plt+0x62b0>
   17a20:	cmp	r9, #43	; 0x2b
   17a24:	beq	18054 <__assert_fail@plt+0x6c70>
   17a28:	mov	r2, #0
   17a2c:	mov	r8, #1
   17a30:	str	r2, [sp, #84]	; 0x54
   17a34:	str	r2, [sp, #144]	; 0x90
   17a38:	mov	r2, #2
   17a3c:	str	r2, [sp, #140]	; 0x8c
   17a40:	b	173f4 <__assert_fail@plt+0x6010>
   17a44:	mov	r1, #11
   17a48:	mov	r0, #0
   17a4c:	mov	r3, #1
   17a50:	mul	r1, r1, r2
   17a54:	str	r0, [sp, #84]	; 0x54
   17a58:	str	r3, [sp, #140]	; 0x8c
   17a5c:	str	r0, [sp, #144]	; 0x90
   17a60:	asr	r1, r1, #5
   17a64:	add	r1, r1, r3
   17a68:	b	16d18 <__assert_fail@plt+0x5934>
   17a6c:	sub	ip, ip, #1
   17a70:	tst	ip, #3
   17a74:	movwne	r2, #365	; 0x16d
   17a78:	bne	17ac0 <__assert_fail@plt+0x66dc>
   17a7c:	movw	r1, #34079	; 0x851f
   17a80:	movt	r1, #20971	; 0x51eb
   17a84:	asr	r2, ip, #31
   17a88:	smull	r0, r1, r1, ip
   17a8c:	rsb	r2, r2, r1, asr #5
   17a90:	mov	r1, #100	; 0x64
   17a94:	mls	r2, r1, r2, ip
   17a98:	cmp	r2, #0
   17a9c:	movwne	r2, #366	; 0x16e
   17aa0:	bne	17ac0 <__assert_fail@plt+0x66dc>
   17aa4:	mov	r0, #400	; 0x190
   17aa8:	movw	r2, #365	; 0x16d
   17aac:	sdiv	r1, ip, r0
   17ab0:	mls	r1, r0, r1, ip
   17ab4:	movw	r0, #366	; 0x16e
   17ab8:	cmp	r1, #0
   17abc:	moveq	r2, r0
   17ac0:	ldr	r1, [sp, #140]	; 0x8c
   17ac4:	add	r2, r8, r2
   17ac8:	movw	ip, #9363	; 0x2493
   17acc:	movt	ip, #37449	; 0x9249
   17ad0:	movw	r0, #63637	; 0xf895
   17ad4:	movt	r0, #65535	; 0xffff
   17ad8:	str	r2, [sp, #84]	; 0x54
   17adc:	str	r0, [sp, #140]	; 0x8c
   17ae0:	sub	r2, r2, r1
   17ae4:	mvn	r1, #0
   17ae8:	add	r2, r2, #380	; 0x17c
   17aec:	add	r2, r2, #2
   17af0:	asr	r0, r2, #31
   17af4:	smull	r8, ip, ip, r2
   17af8:	mov	r8, r1
   17afc:	add	ip, ip, r2
   17b00:	rsb	ip, r0, ip, asr #2
   17b04:	rsb	ip, ip, ip, lsl #3
   17b08:	sub	r2, r2, ip
   17b0c:	ldr	ip, [sp, #84]	; 0x54
   17b10:	sub	r2, ip, r2
   17b14:	add	r2, r2, #3
   17b18:	str	r2, [sp, #84]	; 0x54
   17b1c:	b	17640 <__assert_fail@plt+0x625c>
   17b20:	mov	r2, #1
   17b24:	mov	r8, #0
   17b28:	str	r2, [sp, #84]	; 0x54
   17b2c:	b	16c44 <__assert_fail@plt+0x5860>
   17b30:	cmp	r9, #43	; 0x2b
   17b34:	beq	1801c <__assert_fail@plt+0x6c38>
   17b38:	mov	r2, #0
   17b3c:	str	r2, [sp, #144]	; 0x90
   17b40:	mov	r2, #2
   17b44:	str	r2, [sp, #140]	; 0x8c
   17b48:	b	173f4 <__assert_fail@plt+0x6010>
   17b4c:	cmp	r6, r3
   17b50:	bcs	16380 <__assert_fail@plt+0x4f9c>
   17b54:	ldr	r3, [sp, #48]	; 0x30
   17b58:	add	sl, sl, r6
   17b5c:	cmp	r5, #0
   17b60:	sub	r7, r3, sl
   17b64:	bne	17120 <__assert_fail@plt+0x5d3c>
   17b68:	cmp	r9, #45	; 0x2d
   17b6c:	bne	18004 <__assert_fail@plt+0x6c20>
   17b70:	ldr	r3, [sp, #48]	; 0x30
   17b74:	cmp	r3, sl
   17b78:	bne	16338 <__assert_fail@plt+0x4f54>
   17b7c:	b	16380 <__assert_fail@plt+0x4f9c>
   17b80:	cmp	r3, #1
   17b84:	bls	16380 <__assert_fail@plt+0x4f9c>
   17b88:	cmp	r5, #0
   17b8c:	mov	r6, #1
   17b90:	bne	17220 <__assert_fail@plt+0x5e3c>
   17b94:	b	16b18 <__assert_fail@plt+0x5734>
   17b98:	ldr	r0, [sp, #84]	; 0x54
   17b9c:	movw	r1, #9363	; 0x2493
   17ba0:	movt	r1, #37449	; 0x9249
   17ba4:	smull	ip, r1, r1, r0
   17ba8:	mov	ip, #2
   17bac:	asr	r2, r0, #31
   17bb0:	str	ip, [sp, #140]	; 0x8c
   17bb4:	add	r1, r1, r0
   17bb8:	rsb	r2, r2, r1, asr ip
   17bbc:	add	r2, r2, #1
   17bc0:	b	16cd8 <__assert_fail@plt+0x58f4>
   17bc4:	ldr	r2, [sp, #140]	; 0x8c
   17bc8:	cmp	r7, r2
   17bcc:	add	r7, r7, #1888	; 0x760
   17bd0:	movlt	r2, #1
   17bd4:	movge	r2, #0
   17bd8:	add	r7, r7, #12
   17bdc:	movge	r8, #1
   17be0:	movlt	r8, #0
   17be4:	cmp	r9, #0
   17be8:	str	r2, [sp, #84]	; 0x54
   17bec:	add	r1, r7, r1
   17bf0:	bne	179b4 <__assert_fail@plt+0x65d0>
   17bf4:	ldr	r2, [sp, #1236]	; 0x4d4
   17bf8:	cmp	r2, #43	; 0x2b
   17bfc:	beq	179cc <__assert_fail@plt+0x65e8>
   17c00:	mov	r9, r2
   17c04:	mov	r2, #0
   17c08:	str	r2, [sp, #144]	; 0x90
   17c0c:	mov	r2, #4
   17c10:	str	r2, [sp, #140]	; 0x8c
   17c14:	b	173f4 <__assert_fail@plt+0x6010>
   17c18:	mov	r2, #0
   17c1c:	mov	r8, #1
   17c20:	str	r2, [sp, #84]	; 0x54
   17c24:	b	16c44 <__assert_fail@plt+0x5860>
   17c28:	ldr	r3, [sp, #56]	; 0x38
   17c2c:	mov	fp, #9
   17c30:	cmp	r3, #0
   17c34:	bne	18078 <__assert_fail@plt+0x6c94>
   17c38:	ldr	r3, [sp, #136]	; 0x88
   17c3c:	cmp	r3, #0
   17c40:	movne	r6, #8
   17c44:	ldrne	r3, [sp, #76]	; 0x4c
   17c48:	bne	17cc4 <__assert_fail@plt+0x68e0>
   17c4c:	ldr	r3, [sp, #132]	; 0x84
   17c50:	cmp	r3, #0
   17c54:	movne	r6, #7
   17c58:	ldrne	r3, [sp, #44]	; 0x2c
   17c5c:	bne	17cc4 <__assert_fail@plt+0x68e0>
   17c60:	ldr	r3, [sp, #128]	; 0x80
   17c64:	cmp	r3, #0
   17c68:	movne	r6, #6
   17c6c:	ldrne	r3, [sp, #72]	; 0x48
   17c70:	bne	17cc4 <__assert_fail@plt+0x68e0>
   17c74:	ldr	r3, [sp, #68]	; 0x44
   17c78:	cmp	r3, #0
   17c7c:	movne	r6, #5
   17c80:	ldrne	r3, [sp, #40]	; 0x28
   17c84:	bne	17cc4 <__assert_fail@plt+0x68e0>
   17c88:	ldr	r3, [sp, #64]	; 0x40
   17c8c:	cmp	r3, #0
   17c90:	movne	r6, #4
   17c94:	ldrne	r3, [sp, #36]	; 0x24
   17c98:	bne	17cc4 <__assert_fail@plt+0x68e0>
   17c9c:	ldr	r3, [sp, #60]	; 0x3c
   17ca0:	cmp	r3, #0
   17ca4:	movne	r6, #3
   17ca8:	ldrne	r3, [sp, #32]
   17cac:	bne	17cc4 <__assert_fail@plt+0x68e0>
   17cb0:	ldr	r3, [sp, #120]	; 0x78
   17cb4:	cmp	r3, #0
   17cb8:	beq	170d4 <__assert_fail@plt+0x5cf0>
   17cbc:	ldr	r3, [sp, #28]
   17cc0:	mov	r6, #2
   17cc4:	movw	ip, #26215	; 0x6667
   17cc8:	movt	ip, #26214	; 0x6666
   17ccc:	asr	lr, r3, #31
   17cd0:	movw	r0, #34079	; 0x851f
   17cd4:	movt	r0, #20971	; 0x51eb
   17cd8:	smull	r2, r1, ip, r3
   17cdc:	sub	r8, r6, #2
   17ce0:	smull	r2, r0, r0, r3
   17ce4:	add	r2, sp, #1184	; 0x4a0
   17ce8:	cmp	r8, #0
   17cec:	add	r2, r2, #8
   17cf0:	rsb	r1, lr, r1, asr #2
   17cf4:	add	r8, r2, r8
   17cf8:	asr	r2, r1, #31
   17cfc:	smull	r7, ip, ip, r1
   17d00:	rsb	r7, lr, r0, asr #5
   17d04:	add	r0, r1, r1, lsl #2
   17d08:	rsb	r2, r2, ip, asr #2
   17d0c:	add	r2, r2, r2, lsl #2
   17d10:	sub	r2, r1, r2, lsl #1
   17d14:	sub	r1, r3, r0, lsl #1
   17d18:	add	r0, sp, #1184	; 0x4a0
   17d1c:	add	r0, r0, #8
   17d20:	add	r2, r2, #48	; 0x30
   17d24:	add	r1, r1, #48	; 0x30
   17d28:	add	r0, r0, r6
   17d2c:	strb	r1, [r0, #-1041]	; 0xfffffbef
   17d30:	strb	r2, [r8, #-1040]	; 0xfffffbf0
   17d34:	beq	170f4 <__assert_fail@plt+0x5d10>
   17d38:	movw	r8, #26215	; 0x6667
   17d3c:	movt	r8, #26214	; 0x6666
   17d40:	movw	r1, #19923	; 0x4dd3
   17d44:	movt	r1, #4194	; 0x1062
   17d48:	smull	r2, r0, r8, r7
   17d4c:	asr	r2, r7, #31
   17d50:	smull	ip, r1, r1, r3
   17d54:	add	ip, sp, #1184	; 0x4a0
   17d58:	rsb	r2, r2, r0, asr #2
   17d5c:	add	ip, ip, #8
   17d60:	sub	r0, r6, #3
   17d64:	cmp	r0, #0
   17d68:	add	r0, ip, r0
   17d6c:	add	r2, r2, r2, lsl #2
   17d70:	rsb	r1, lr, r1, asr #6
   17d74:	sub	r2, r7, r2, lsl #1
   17d78:	add	r2, r2, #48	; 0x30
   17d7c:	strb	r2, [r0, #-1040]	; 0xfffffbf0
   17d80:	beq	170f4 <__assert_fail@plt+0x5d10>
   17d84:	smull	r2, ip, r8, r1
   17d88:	movw	r2, #35757	; 0x8bad
   17d8c:	movt	r2, #26843	; 0x68db
   17d90:	asr	r0, r1, #31
   17d94:	smull	r7, r2, r2, r3
   17d98:	add	r7, sp, #1184	; 0x4a0
   17d9c:	rsb	r0, r0, ip, asr #2
   17da0:	add	r7, r7, #8
   17da4:	sub	ip, r6, #4
   17da8:	cmp	ip, #0
   17dac:	add	ip, r7, ip
   17db0:	add	r0, r0, r0, lsl #2
   17db4:	rsb	r2, lr, r2, asr #12
   17db8:	sub	r1, r1, r0, lsl #1
   17dbc:	add	r1, r1, #48	; 0x30
   17dc0:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   17dc4:	beq	170f4 <__assert_fail@plt+0x5d10>
   17dc8:	smull	r1, ip, r8, r2
   17dcc:	movw	r1, #46473	; 0xb589
   17dd0:	movt	r1, #5368	; 0x14f8
   17dd4:	asr	r0, r2, #31
   17dd8:	smull	r7, r1, r1, r3
   17ddc:	add	r7, sp, #1184	; 0x4a0
   17de0:	rsb	r0, r0, ip, asr #2
   17de4:	add	r7, r7, #8
   17de8:	sub	ip, r6, #5
   17dec:	cmp	ip, #0
   17df0:	add	ip, r7, ip
   17df4:	add	r0, r0, r0, lsl #2
   17df8:	rsb	r1, lr, r1, asr #13
   17dfc:	sub	r2, r2, r0, lsl #1
   17e00:	add	r2, r2, #48	; 0x30
   17e04:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   17e08:	beq	170f4 <__assert_fail@plt+0x5d10>
   17e0c:	smull	r2, ip, r8, r1
   17e10:	movw	r2, #56963	; 0xde83
   17e14:	movt	r2, #17179	; 0x431b
   17e18:	asr	r0, r1, #31
   17e1c:	smull	r7, r2, r2, r3
   17e20:	add	r7, sp, #1184	; 0x4a0
   17e24:	rsb	r0, r0, ip, asr #2
   17e28:	add	r7, r7, #8
   17e2c:	sub	ip, r6, #6
   17e30:	cmp	ip, #0
   17e34:	add	ip, r7, ip
   17e38:	add	r0, r0, r0, lsl #2
   17e3c:	rsb	r2, lr, r2, asr #18
   17e40:	sub	r1, r1, r0, lsl #1
   17e44:	add	r1, r1, #48	; 0x30
   17e48:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   17e4c:	beq	170f4 <__assert_fail@plt+0x5d10>
   17e50:	smull	r1, ip, r8, r2
   17e54:	movw	r1, #51819	; 0xca6b
   17e58:	movt	r1, #27487	; 0x6b5f
   17e5c:	asr	r0, r2, #31
   17e60:	smull	r7, r1, r1, r3
   17e64:	add	r7, sp, #1184	; 0x4a0
   17e68:	rsb	r0, r0, ip, asr #2
   17e6c:	add	r7, r7, #8
   17e70:	sub	ip, r6, #7
   17e74:	cmp	ip, #0
   17e78:	add	ip, r7, ip
   17e7c:	add	r0, r0, r0, lsl #2
   17e80:	rsb	r1, lr, r1, asr #22
   17e84:	sub	r2, r2, r0, lsl #1
   17e88:	add	r2, r2, #48	; 0x30
   17e8c:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   17e90:	beq	170f4 <__assert_fail@plt+0x5d10>
   17e94:	smull	r2, ip, r8, r1
   17e98:	movw	r2, #15241	; 0x3b89
   17e9c:	movt	r2, #21990	; 0x55e6
   17ea0:	asr	r0, r1, #31
   17ea4:	smull	r2, r3, r2, r3
   17ea8:	sub	r2, r6, #8
   17eac:	rsb	r0, r0, ip, asr #2
   17eb0:	add	r7, r7, r2
   17eb4:	cmp	r2, #1
   17eb8:	add	r0, r0, r0, lsl #2
   17ebc:	rsb	r3, lr, r3, asr #25
   17ec0:	sub	r0, r1, r0, lsl #1
   17ec4:	add	r2, r0, #48	; 0x30
   17ec8:	strb	r2, [r7, #-1040]	; 0xfffffbf0
   17ecc:	bne	170f4 <__assert_fail@plt+0x5d10>
   17ed0:	smull	r2, r1, r8, r3
   17ed4:	asr	r2, r3, #31
   17ed8:	rsb	r2, r2, r1, asr #2
   17edc:	add	r2, r2, r2, lsl #2
   17ee0:	sub	r3, r3, r2, lsl #1
   17ee4:	add	r3, r3, #48	; 0x30
   17ee8:	strb	r3, [sp, #152]	; 0x98
   17eec:	b	170f4 <__assert_fail@plt+0x5d10>
   17ef0:	mov	r2, r6
   17ef4:	mov	r0, r5
   17ef8:	ldr	r1, [sp, #112]	; 0x70
   17efc:	add	r5, r5, r6
   17f00:	bl	1112c <memcpy@plt>
   17f04:	b	16bf4 <__assert_fail@plt+0x5810>
   17f08:	cmp	r6, #0
   17f0c:	beq	16bf4 <__assert_fail@plt+0x5810>
   17f10:	bl	1124c <__ctype_tolower_loc@plt>
   17f14:	ldr	ip, [sp, #112]	; 0x70
   17f18:	add	r5, r5, r6
   17f1c:	mov	r3, r5
   17f20:	add	r6, ip, r6
   17f24:	ldrb	r1, [r6, #-1]!
   17f28:	ldr	r2, [r0]
   17f2c:	cmp	ip, r6
   17f30:	ldr	r2, [r2, r1, lsl #2]
   17f34:	strb	r2, [r3, #-1]!
   17f38:	bne	17f24 <__assert_fail@plt+0x6b40>
   17f3c:	b	16bf4 <__assert_fail@plt+0x5810>
   17f40:	mov	r0, r5
   17f44:	mov	r2, r6
   17f48:	add	r1, sp, #152	; 0x98
   17f4c:	add	r5, r5, r6
   17f50:	bl	1112c <memcpy@plt>
   17f54:	b	17158 <__assert_fail@plt+0x5d74>
   17f58:	movw	r2, #63636	; 0xf894
   17f5c:	movt	r2, #65535	; 0xffff
   17f60:	mov	r1, #0
   17f64:	mov	r8, r1
   17f68:	str	r2, [sp, #140]	; 0x8c
   17f6c:	b	17640 <__assert_fail@plt+0x625c>
   17f70:	add	r0, r4, #2
   17f74:	mov	ip, #1
   17f78:	mov	r1, r0
   17f7c:	ldrb	r2, [r0], #1
   17f80:	add	ip, ip, #1
   17f84:	cmp	r2, #58	; 0x3a
   17f88:	beq	17f78 <__assert_fail@plt+0x6b94>
   17f8c:	str	ip, [sp, #140]	; 0x8c
   17f90:	b	177a4 <__assert_fail@plt+0x63c0>
   17f94:	mov	r2, #2
   17f98:	mov	r8, #1
   17f9c:	str	r9, [sp, #84]	; 0x54
   17fa0:	str	r2, [sp, #140]	; 0x8c
   17fa4:	b	179ec <__assert_fail@plt+0x6608>
   17fa8:	ldr	r3, [sp, #52]	; 0x34
   17fac:	mov	lr, #4
   17fb0:	mov	ip, #43	; 0x2b
   17fb4:	mov	r9, ip
   17fb8:	mov	r0, r6
   17fbc:	movw	r2, #5828	; 0x16c4
   17fc0:	movt	r2, #2
   17fc4:	mvn	r1, #0
   17fc8:	mov	r8, r2
   17fcc:	mov	fp, r6
   17fd0:	stm	sp, {r3, ip, lr}
   17fd4:	str	lr, [sp, #140]	; 0x8c
   17fd8:	ldr	r3, [sp, #1244]	; 0x4dc
   17fdc:	ldr	lr, [sp, #1248]	; 0x4e0
   17fe0:	ldr	ip, [sp, #1252]	; 0x4e4
   17fe4:	str	r3, [sp, #12]
   17fe8:	ldr	r3, [sp, #100]	; 0x64
   17fec:	str	lr, [sp, #16]
   17ff0:	str	ip, [sp, #20]
   17ff4:	bl	16028 <__assert_fail@plt+0x4c44>
   17ff8:	mov	r7, r0
   17ffc:	mov	r6, r0
   18000:	b	16f64 <__assert_fail@plt+0x5b80>
   18004:	sub	r6, fp, r6
   18008:	cmp	r6, r7
   1800c:	bcs	16380 <__assert_fail@plt+0x4f9c>
   18010:	add	sl, sl, r6
   18014:	mov	r5, #0
   18018:	b	16338 <__assert_fail@plt+0x4f54>
   1801c:	mov	r2, #2
   18020:	str	r2, [sp, #140]	; 0x8c
   18024:	mov	r2, #99	; 0x63
   18028:	b	179d8 <__assert_fail@plt+0x65f4>
   1802c:	cmp	r9, #0
   18030:	add	r1, r1, #100	; 0x64
   18034:	beq	17694 <__assert_fail@plt+0x62b0>
   18038:	b	17a20 <__assert_fail@plt+0x663c>
   1803c:	ldr	r2, [sp, #88]	; 0x58
   18040:	mov	r3, #75	; 0x4b
   18044:	str	r3, [r2]
   18048:	b	1638c <__assert_fail@plt+0x4fa8>
   1804c:	mov	fp, #2
   18050:	b	17cb0 <__assert_fail@plt+0x68cc>
   18054:	mov	r2, #0
   18058:	mov	r8, #1
   1805c:	str	r2, [sp, #84]	; 0x54
   18060:	mov	r2, #2
   18064:	str	r2, [sp, #140]	; 0x8c
   18068:	b	179ec <__assert_fail@plt+0x6608>
   1806c:	ldr	r3, [sp, #56]	; 0x38
   18070:	cmp	r3, #0
   18074:	beq	17c38 <__assert_fail@plt+0x6854>
   18078:	mov	r6, #9
   1807c:	ldr	r3, [sp, #1252]	; 0x4e4
   18080:	b	17cc4 <__assert_fail@plt+0x68e0>
   18084:	strd	r4, [sp, #-16]!
   18088:	mov	ip, #0
   1808c:	str	r6, [sp, #8]
   18090:	mvn	r6, #0
   18094:	str	lr, [sp, #12]
   18098:	sub	sp, sp, #32
   1809c:	ldr	r4, [sp, #48]	; 0x30
   180a0:	add	r5, sp, #31
   180a4:	str	ip, [sp]
   180a8:	ldr	lr, [sp, #52]	; 0x34
   180ac:	str	ip, [sp, #4]
   180b0:	str	r6, [sp, #8]
   180b4:	str	r5, [sp, #12]
   180b8:	str	r4, [sp, #16]
   180bc:	str	lr, [sp, #20]
   180c0:	strb	ip, [sp, #31]
   180c4:	bl	16028 <__assert_fail@plt+0x4c44>
   180c8:	add	sp, sp, #32
   180cc:	ldrd	r4, [sp]
   180d0:	ldr	r6, [sp, #8]
   180d4:	add	sp, sp, #12
   180d8:	pop	{pc}		; (ldr pc, [sp], #4)
   180dc:	strd	r4, [sp, #-16]!
   180e0:	subs	r4, r0, #0
   180e4:	str	r6, [sp, #8]
   180e8:	str	lr, [sp, #12]
   180ec:	beq	18184 <__assert_fail@plt+0x6da0>
   180f0:	mov	r1, #47	; 0x2f
   180f4:	bl	11360 <strrchr@plt>
   180f8:	subs	r5, r0, #0
   180fc:	beq	1815c <__assert_fail@plt+0x6d78>
   18100:	add	r6, r5, #1
   18104:	sub	r3, r6, r4
   18108:	cmp	r3, #6
   1810c:	ble	1815c <__assert_fail@plt+0x6d78>
   18110:	movw	r1, #5916	; 0x171c
   18114:	movt	r1, #2
   18118:	mov	r2, #7
   1811c:	sub	r0, r5, #6
   18120:	bl	113c0 <strncmp@plt>
   18124:	cmp	r0, #0
   18128:	bne	1815c <__assert_fail@plt+0x6d78>
   1812c:	movw	r1, #5924	; 0x1724
   18130:	movt	r1, #2
   18134:	mov	r2, #3
   18138:	mov	r0, r6
   1813c:	bl	113c0 <strncmp@plt>
   18140:	cmp	r0, #0
   18144:	movne	r4, r6
   18148:	bne	1815c <__assert_fail@plt+0x6d78>
   1814c:	add	r4, r5, #4
   18150:	movw	r3, #8648	; 0x21c8
   18154:	movt	r3, #3
   18158:	str	r4, [r3]
   1815c:	movw	r2, #8880	; 0x22b0
   18160:	movt	r2, #3
   18164:	ldr	r6, [sp, #8]
   18168:	movw	r3, #8652	; 0x21cc
   1816c:	movt	r3, #3
   18170:	str	r4, [r2]
   18174:	str	r4, [r3]
   18178:	ldrd	r4, [sp]
   1817c:	add	sp, sp, #12
   18180:	pop	{pc}		; (ldr pc, [sp], #4)
   18184:	movw	r3, #8664	; 0x21d8
   18188:	movt	r3, #3
   1818c:	movw	r0, #5860	; 0x16e4
   18190:	movt	r0, #2
   18194:	ldr	r3, [r3]
   18198:	mov	r2, #55	; 0x37
   1819c:	mov	r1, #1
   181a0:	bl	111c8 <fwrite@plt>
   181a4:	bl	113cc <abort@plt>
   181a8:	mov	r2, #5
   181ac:	strd	r4, [sp, #-16]!
   181b0:	mov	r5, r0
   181b4:	str	r6, [sp, #8]
   181b8:	mov	r6, r1
   181bc:	mov	r1, r0
   181c0:	mov	r0, #0
   181c4:	str	lr, [sp, #12]
   181c8:	bl	11168 <dcgettext@plt>
   181cc:	cmp	r5, r0
   181d0:	mov	r4, r0
   181d4:	beq	181ec <__assert_fail@plt+0x6e08>
   181d8:	mov	r0, r4
   181dc:	ldrd	r4, [sp]
   181e0:	ldr	r6, [sp, #8]
   181e4:	add	sp, sp, #12
   181e8:	pop	{pc}		; (ldr pc, [sp], #4)
   181ec:	bl	1fb04 <__assert_fail@plt+0xe720>
   181f0:	ldrb	r3, [r0]
   181f4:	bic	r3, r3, #32
   181f8:	cmp	r3, #85	; 0x55
   181fc:	bne	18264 <__assert_fail@plt+0x6e80>
   18200:	ldrb	r3, [r0, #1]
   18204:	bic	r3, r3, #32
   18208:	cmp	r3, #84	; 0x54
   1820c:	bne	182e4 <__assert_fail@plt+0x6f00>
   18210:	ldrb	r3, [r0, #2]
   18214:	bic	r3, r3, #32
   18218:	cmp	r3, #70	; 0x46
   1821c:	bne	182e4 <__assert_fail@plt+0x6f00>
   18220:	ldrb	r3, [r0, #3]
   18224:	cmp	r3, #45	; 0x2d
   18228:	bne	182e4 <__assert_fail@plt+0x6f00>
   1822c:	ldrb	r3, [r0, #4]
   18230:	cmp	r3, #56	; 0x38
   18234:	bne	182e4 <__assert_fail@plt+0x6f00>
   18238:	ldrb	r3, [r0, #5]
   1823c:	cmp	r3, #0
   18240:	bne	182e4 <__assert_fail@plt+0x6f00>
   18244:	ldrb	r2, [r4]
   18248:	movw	r3, #6016	; 0x1780
   1824c:	movt	r3, #2
   18250:	movw	r4, #6028	; 0x178c
   18254:	movt	r4, #2
   18258:	cmp	r2, #96	; 0x60
   1825c:	movne	r4, r3
   18260:	b	181d8 <__assert_fail@plt+0x6df4>
   18264:	cmp	r3, #71	; 0x47
   18268:	bne	182e4 <__assert_fail@plt+0x6f00>
   1826c:	ldrb	r3, [r0, #1]
   18270:	bic	r3, r3, #32
   18274:	cmp	r3, #66	; 0x42
   18278:	bne	182e4 <__assert_fail@plt+0x6f00>
   1827c:	ldrb	r3, [r0, #2]
   18280:	cmp	r3, #49	; 0x31
   18284:	bne	182e4 <__assert_fail@plt+0x6f00>
   18288:	ldrb	r3, [r0, #3]
   1828c:	cmp	r3, #56	; 0x38
   18290:	bne	182e4 <__assert_fail@plt+0x6f00>
   18294:	ldrb	r3, [r0, #4]
   18298:	cmp	r3, #48	; 0x30
   1829c:	bne	182e4 <__assert_fail@plt+0x6f00>
   182a0:	ldrb	r3, [r0, #5]
   182a4:	cmp	r3, #51	; 0x33
   182a8:	bne	182e4 <__assert_fail@plt+0x6f00>
   182ac:	ldrb	r3, [r0, #6]
   182b0:	cmp	r3, #48	; 0x30
   182b4:	bne	182e4 <__assert_fail@plt+0x6f00>
   182b8:	ldrb	r3, [r0, #7]
   182bc:	cmp	r3, #0
   182c0:	bne	182e4 <__assert_fail@plt+0x6f00>
   182c4:	ldrb	r2, [r4]
   182c8:	movw	r3, #6020	; 0x1784
   182cc:	movt	r3, #2
   182d0:	movw	r4, #6024	; 0x1788
   182d4:	movt	r4, #2
   182d8:	cmp	r2, #96	; 0x60
   182dc:	movne	r4, r3
   182e0:	b	181d8 <__assert_fail@plt+0x6df4>
   182e4:	movw	r3, #6032	; 0x1790
   182e8:	movt	r3, #2
   182ec:	cmp	r6, #9
   182f0:	movw	r4, #6012	; 0x177c
   182f4:	movt	r4, #2
   182f8:	movne	r4, r3
   182fc:	b	181d8 <__assert_fail@plt+0x6df4>
   18300:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18304:	strd	r6, [sp, #8]
   18308:	strd	r8, [sp, #16]
   1830c:	mov	r8, r3
   18310:	strd	sl, [sp, #24]
   18314:	mov	fp, r0
   18318:	mov	sl, r1
   1831c:	str	lr, [sp, #32]
   18320:	sub	sp, sp, #140	; 0x8c
   18324:	ldr	r3, [sp, #180]	; 0xb4
   18328:	str	r2, [sp, #28]
   1832c:	and	r4, r3, #2
   18330:	ubfx	r3, r3, #1, #1
   18334:	str	r3, [sp, #44]	; 0x2c
   18338:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   1833c:	ldr	r3, [sp, #176]	; 0xb0
   18340:	str	r0, [sp, #76]	; 0x4c
   18344:	cmp	r3, #10
   18348:	ldrls	pc, [pc, r3, lsl #2]
   1834c:	b	19ce8 <__assert_fail@plt+0x8904>
   18350:	ldrdeq	r8, [r1], -r0
   18354:	andeq	r8, r1, ip, ror #17
   18358:	andeq	r8, r1, r8, ror #28
   1835c:	andeq	r8, r1, r8, asr r9
   18360:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18364:	andeq	r8, r1, r4, asr r7
   18368:	andeq	r8, r1, ip, lsr #16
   1836c:	muleq	r1, r4, r8
   18370:	andeq	r8, r1, ip, ror r3
   18374:	andeq	r8, r1, ip, ror r3
   18378:	andeq	r8, r1, ip, ror r3
   1837c:	ldr	r3, [sp, #176]	; 0xb0
   18380:	cmp	r3, #10
   18384:	beq	183b0 <__assert_fail@plt+0x6fcc>
   18388:	mov	r1, r3
   1838c:	movw	r0, #6036	; 0x1794
   18390:	movt	r0, #2
   18394:	bl	181a8 <__assert_fail@plt+0x6dc4>
   18398:	str	r0, [sp, #188]	; 0xbc
   1839c:	movw	r0, #6032	; 0x1790
   183a0:	movt	r0, #2
   183a4:	ldr	r1, [sp, #176]	; 0xb0
   183a8:	bl	181a8 <__assert_fail@plt+0x6dc4>
   183ac:	str	r0, [sp, #192]	; 0xc0
   183b0:	cmp	r4, #0
   183b4:	movne	r4, #0
   183b8:	beq	19a74 <__assert_fail@plt+0x8690>
   183bc:	mov	r5, #0
   183c0:	ldr	r0, [sp, #192]	; 0xc0
   183c4:	mov	r9, r5
   183c8:	str	r5, [sp, #64]	; 0x40
   183cc:	bl	11294 <strlen@plt>
   183d0:	mov	r3, #1
   183d4:	ldr	r2, [sp, #44]	; 0x2c
   183d8:	cmp	r0, r5
   183dc:	moveq	r2, r5
   183e0:	str	r3, [sp, #32]
   183e4:	str	r3, [sp, #48]	; 0x30
   183e8:	str	r5, [sp, #52]	; 0x34
   183ec:	str	r3, [sp, #60]	; 0x3c
   183f0:	ldr	r3, [sp, #180]	; 0xb4
   183f4:	str	r0, [sp, #56]	; 0x38
   183f8:	str	r5, [sp, #68]	; 0x44
   183fc:	str	r5, [sp, #80]	; 0x50
   18400:	str	r5, [sp, #84]	; 0x54
   18404:	and	r3, r3, #1
   18408:	str	r2, [sp, #88]	; 0x58
   1840c:	str	r3, [sp, #92]	; 0x5c
   18410:	ldr	r3, [sp, #180]	; 0xb4
   18414:	and	r3, r3, #4
   18418:	str	r3, [sp, #96]	; 0x60
   1841c:	ldr	r3, [sp, #192]	; 0xc0
   18420:	str	r3, [sp, #72]	; 0x48
   18424:	mov	r3, fp
   18428:	mov	r7, #0
   1842c:	mov	fp, r9
   18430:	mov	r9, r3
   18434:	cmn	r8, #1
   18438:	beq	18a3c <__assert_fail@plt+0x7658>
   1843c:	subs	r6, r8, r7
   18440:	movne	r6, #1
   18444:	cmp	r6, #0
   18448:	beq	18a54 <__assert_fail@plt+0x7670>
   1844c:	ldr	r0, [sp, #28]
   18450:	ldr	r3, [sp, #48]	; 0x30
   18454:	cmp	r3, #0
   18458:	add	r3, r0, r7
   1845c:	str	r3, [sp, #36]	; 0x24
   18460:	beq	18ee0 <__assert_fail@plt+0x7afc>
   18464:	ldr	r2, [sp, #56]	; 0x38
   18468:	cmp	r2, #0
   1846c:	beq	193e0 <__assert_fail@plt+0x7ffc>
   18470:	cmp	r2, #1
   18474:	mov	r3, r2
   18478:	movls	r3, #0
   1847c:	movhi	r3, #1
   18480:	cmn	r8, #1
   18484:	add	r5, r7, r2
   18488:	movne	r3, #0
   1848c:	cmp	r3, #0
   18490:	beq	1849c <__assert_fail@plt+0x70b8>
   18494:	bl	11294 <strlen@plt>
   18498:	mov	r8, r0
   1849c:	cmp	r5, r8
   184a0:	bhi	193e0 <__assert_fail@plt+0x7ffc>
   184a4:	ldr	r0, [sp, #36]	; 0x24
   184a8:	ldr	r2, [sp, #56]	; 0x38
   184ac:	ldr	r1, [sp, #72]	; 0x48
   184b0:	bl	11150 <memcmp@plt>
   184b4:	cmp	r0, #0
   184b8:	bne	193e0 <__assert_fail@plt+0x7ffc>
   184bc:	ldr	r3, [sp, #44]	; 0x2c
   184c0:	cmp	r3, #0
   184c4:	bne	19b8c <__assert_fail@plt+0x87a8>
   184c8:	ldr	r3, [sp, #36]	; 0x24
   184cc:	ldrb	r5, [r3]
   184d0:	cmp	r5, #126	; 0x7e
   184d4:	ldrls	pc, [pc, r5, lsl #2]
   184d8:	b	19974 <__assert_fail@plt+0x8590>
   184dc:			; <UNDEFINED> instruction: 0x00018bb0
   184e0:	andeq	r9, r1, r4, ror r9
   184e4:	andeq	r9, r1, r4, ror r9
   184e8:	andeq	r9, r1, r4, ror r9
   184ec:	andeq	r9, r1, r4, ror r9
   184f0:	andeq	r9, r1, r4, ror r9
   184f4:	andeq	r9, r1, r4, ror r9
   184f8:	andeq	r8, r1, r8, lsl #22
   184fc:	andeq	r8, r1, r0, lsl #22
   18500:	andeq	r8, r1, r0, lsl fp
   18504:	muleq	r1, r4, ip
   18508:	andeq	r8, r1, r4, lsl #25
   1850c:	andeq	r8, r1, ip, lsr #19
   18510:	andeq	r8, r1, r0, ror #24
   18514:	andeq	r9, r1, r4, ror r9
   18518:	andeq	r9, r1, r4, ror r9
   1851c:	andeq	r9, r1, r4, ror r9
   18520:	andeq	r9, r1, r4, ror r9
   18524:	andeq	r9, r1, r4, ror r9
   18528:	andeq	r9, r1, r4, ror r9
   1852c:	andeq	r9, r1, r4, ror r9
   18530:	andeq	r9, r1, r4, ror r9
   18534:	andeq	r9, r1, r4, ror r9
   18538:	andeq	r9, r1, r4, ror r9
   1853c:	andeq	r9, r1, r4, ror r9
   18540:	andeq	r9, r1, r4, ror r9
   18544:	andeq	r9, r1, r4, ror r9
   18548:	andeq	r9, r1, r4, ror r9
   1854c:	andeq	r9, r1, r4, ror r9
   18550:	andeq	r9, r1, r4, ror r9
   18554:	andeq	r9, r1, r4, ror r9
   18558:	andeq	r9, r1, r4, ror r9
   1855c:	andeq	r8, r1, ip, lsl #26
   18560:	andeq	r8, r1, r0, lsl #26
   18564:	andeq	r8, r1, r0, lsl #26
   18568:	strdeq	r8, [r1], -r4
   1856c:	andeq	r8, r1, r0, lsl #26
   18570:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18574:	andeq	r8, r1, r0, lsl #26
   18578:	andeq	r8, r1, r8, asr #28
   1857c:	andeq	r8, r1, r0, lsl #26
   18580:	andeq	r8, r1, r0, lsl #26
   18584:	andeq	r8, r1, r0, lsl #26
   18588:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1858c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18590:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18594:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18598:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1859c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185a0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185c4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185c8:	andeq	r8, r1, r0, lsl #26
   185cc:	andeq	r8, r1, r0, lsl #26
   185d0:	andeq	r8, r1, r0, lsl #26
   185d4:	andeq	r8, r1, r0, lsl #26
   185d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185dc:	andeq	r9, r1, r4, ror r9
   185e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18600:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18604:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18608:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1860c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18610:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18614:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18618:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1861c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18620:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18624:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18628:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1862c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18630:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18634:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18638:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1863c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18640:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18644:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18648:	andeq	r8, r1, r0, lsl #26
   1864c:	muleq	r1, ip, sp
   18650:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18654:	andeq	r8, r1, r0, lsl #26
   18658:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1865c:	andeq	r8, r1, r0, lsl #26
   18660:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18664:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18668:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1866c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18670:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18674:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18678:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1867c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18680:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18684:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18688:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1868c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18690:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18694:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18698:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1869c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186a0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186c4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186c8:	andeq	r8, r1, r8, lsr #25
   186cc:	andeq	r8, r1, r0, lsl #26
   186d0:	andeq	r8, r1, r8, lsr #25
   186d4:	strdeq	r8, [r1], -r4
   186d8:	ldr	r3, [sp, #180]	; 0xb4
   186dc:	cmp	r4, #0
   186e0:	and	r3, r3, #1
   186e4:	str	r3, [sp, #92]	; 0x5c
   186e8:	ldr	r3, [sp, #180]	; 0xb4
   186ec:	and	r3, r3, #4
   186f0:	str	r3, [sp, #96]	; 0x60
   186f4:	moveq	r3, #1
   186f8:	streq	r3, [sp, #60]	; 0x3c
   186fc:	beq	18e8c <__assert_fail@plt+0x7aa8>
   18700:	mov	r3, #0
   18704:	mov	r2, #1
   18708:	mov	r4, r3
   1870c:	mov	r9, r3
   18710:	str	r2, [sp, #32]
   18714:	str	r2, [sp, #44]	; 0x2c
   18718:	str	r3, [sp, #48]	; 0x30
   1871c:	str	r2, [sp, #52]	; 0x34
   18720:	str	r2, [sp, #56]	; 0x38
   18724:	str	r3, [sp, #60]	; 0x3c
   18728:	str	r2, [sp, #64]	; 0x40
   1872c:	str	r2, [sp, #68]	; 0x44
   18730:	str	r3, [sp, #80]	; 0x50
   18734:	str	r3, [sp, #84]	; 0x54
   18738:	str	r3, [sp, #88]	; 0x58
   1873c:	movw	r3, #6032	; 0x1790
   18740:	movt	r3, #2
   18744:	str	r3, [sp, #72]	; 0x48
   18748:	mov	r3, #2
   1874c:	str	r3, [sp, #176]	; 0xb0
   18750:	b	18424 <__assert_fail@plt+0x7040>
   18754:	ldr	r3, [sp, #180]	; 0xb4
   18758:	cmp	r4, #0
   1875c:	and	r3, r3, #1
   18760:	str	r3, [sp, #92]	; 0x5c
   18764:	ldr	r3, [sp, #180]	; 0xb4
   18768:	and	r3, r3, #4
   1876c:	str	r3, [sp, #96]	; 0x60
   18770:	bne	19b44 <__assert_fail@plt+0x8760>
   18774:	cmp	sl, #0
   18778:	beq	198f0 <__assert_fail@plt+0x850c>
   1877c:	mov	r3, #34	; 0x22
   18780:	mov	r2, r4
   18784:	mov	r1, #1
   18788:	mov	r9, r2
   1878c:	strb	r3, [fp]
   18790:	movw	r3, #6012	; 0x177c
   18794:	movt	r3, #2
   18798:	mov	r4, r1
   1879c:	str	r1, [sp, #32]
   187a0:	str	r2, [sp, #44]	; 0x2c
   187a4:	str	r1, [sp, #48]	; 0x30
   187a8:	str	r2, [sp, #52]	; 0x34
   187ac:	str	r1, [sp, #56]	; 0x38
   187b0:	str	r1, [sp, #60]	; 0x3c
   187b4:	str	r2, [sp, #64]	; 0x40
   187b8:	str	r2, [sp, #68]	; 0x44
   187bc:	str	r3, [sp, #72]	; 0x48
   187c0:	str	r2, [sp, #80]	; 0x50
   187c4:	str	r2, [sp, #84]	; 0x54
   187c8:	str	r2, [sp, #88]	; 0x58
   187cc:	b	18424 <__assert_fail@plt+0x7040>
   187d0:	mov	r3, #0
   187d4:	mov	r2, #1
   187d8:	mov	r9, r3
   187dc:	str	r2, [sp, #32]
   187e0:	str	r3, [sp, #44]	; 0x2c
   187e4:	str	r3, [sp, #48]	; 0x30
   187e8:	str	r3, [sp, #52]	; 0x34
   187ec:	str	r3, [sp, #60]	; 0x3c
   187f0:	strd	r2, [sp, #64]	; 0x40
   187f4:	str	r3, [sp, #72]	; 0x48
   187f8:	str	r3, [sp, #80]	; 0x50
   187fc:	str	r3, [sp, #88]	; 0x58
   18800:	ldr	r3, [sp, #180]	; 0xb4
   18804:	and	r3, r3, r2
   18808:	str	r3, [sp, #92]	; 0x5c
   1880c:	ldr	r3, [sp, #180]	; 0xb4
   18810:	and	r3, r3, #4
   18814:	str	r3, [sp, #96]	; 0x60
   18818:	ldr	r3, [sp, #176]	; 0xb0
   1881c:	mov	r4, r3
   18820:	str	r3, [sp, #56]	; 0x38
   18824:	str	r3, [sp, #84]	; 0x54
   18828:	b	18424 <__assert_fail@plt+0x7040>
   1882c:	mov	r3, #1
   18830:	mov	r4, #0
   18834:	mov	r9, r4
   18838:	str	r3, [sp, #32]
   1883c:	str	r3, [sp, #44]	; 0x2c
   18840:	str	r3, [sp, #48]	; 0x30
   18844:	str	r4, [sp, #52]	; 0x34
   18848:	str	r3, [sp, #56]	; 0x38
   1884c:	str	r3, [sp, #60]	; 0x3c
   18850:	str	r3, [sp, #88]	; 0x58
   18854:	movw	r3, #6012	; 0x177c
   18858:	movt	r3, #2
   1885c:	str	r4, [sp, #64]	; 0x40
   18860:	str	r4, [sp, #68]	; 0x44
   18864:	str	r3, [sp, #72]	; 0x48
   18868:	ldr	r3, [sp, #180]	; 0xb4
   1886c:	str	r4, [sp, #80]	; 0x50
   18870:	str	r4, [sp, #84]	; 0x54
   18874:	and	r3, r3, #1
   18878:	str	r3, [sp, #92]	; 0x5c
   1887c:	ldr	r3, [sp, #180]	; 0xb4
   18880:	and	r3, r3, #4
   18884:	str	r3, [sp, #96]	; 0x60
   18888:	mov	r3, #5
   1888c:	str	r3, [sp, #176]	; 0xb0
   18890:	b	18424 <__assert_fail@plt+0x7040>
   18894:	mov	r3, #1
   18898:	mov	r4, #0
   1889c:	mov	r9, r4
   188a0:	str	r3, [sp, #32]
   188a4:	str	r4, [sp, #44]	; 0x2c
   188a8:	str	r3, [sp, #48]	; 0x30
   188ac:	str	r3, [sp, #60]	; 0x3c
   188b0:	ldr	r3, [sp, #180]	; 0xb4
   188b4:	str	r4, [sp, #52]	; 0x34
   188b8:	str	r4, [sp, #56]	; 0x38
   188bc:	str	r4, [sp, #64]	; 0x40
   188c0:	str	r4, [sp, #68]	; 0x44
   188c4:	and	r3, r3, #1
   188c8:	str	r4, [sp, #72]	; 0x48
   188cc:	str	r4, [sp, #80]	; 0x50
   188d0:	str	r4, [sp, #84]	; 0x54
   188d4:	str	r3, [sp, #92]	; 0x5c
   188d8:	ldr	r3, [sp, #180]	; 0xb4
   188dc:	str	r4, [sp, #88]	; 0x58
   188e0:	and	r3, r3, #4
   188e4:	str	r3, [sp, #96]	; 0x60
   188e8:	b	18424 <__assert_fail@plt+0x7040>
   188ec:	mov	r3, #0
   188f0:	mov	r2, #1
   188f4:	ldr	r1, [sp, #176]	; 0xb0
   188f8:	mov	r4, r3
   188fc:	mov	r9, r3
   18900:	movw	r3, #6032	; 0x1790
   18904:	movt	r3, #2
   18908:	str	r2, [sp, #32]
   1890c:	str	r2, [sp, #44]	; 0x2c
   18910:	str	r4, [sp, #48]	; 0x30
   18914:	strd	r2, [sp, #68]	; 0x44
   18918:	ldr	r3, [sp, #180]	; 0xb4
   1891c:	str	r2, [sp, #52]	; 0x34
   18920:	str	r1, [sp, #56]	; 0x38
   18924:	str	r4, [sp, #60]	; 0x3c
   18928:	str	r2, [sp, #64]	; 0x40
   1892c:	and	r3, r3, r2
   18930:	str	r4, [sp, #80]	; 0x50
   18934:	str	r4, [sp, #84]	; 0x54
   18938:	str	r4, [sp, #88]	; 0x58
   1893c:	str	r3, [sp, #92]	; 0x5c
   18940:	ldr	r3, [sp, #180]	; 0xb4
   18944:	and	r3, r3, #4
   18948:	str	r3, [sp, #96]	; 0x60
   1894c:	mov	r3, #2
   18950:	str	r3, [sp, #176]	; 0xb0
   18954:	b	18424 <__assert_fail@plt+0x7040>
   18958:	mov	r3, #1
   1895c:	mov	r2, #0
   18960:	mov	r4, r2
   18964:	mov	r9, r2
   18968:	str	r3, [sp, #32]
   1896c:	str	r3, [sp, #44]	; 0x2c
   18970:	str	r2, [sp, #48]	; 0x30
   18974:	str	r3, [sp, #52]	; 0x34
   18978:	str	r3, [sp, #56]	; 0x38
   1897c:	str	r3, [sp, #60]	; 0x3c
   18980:	str	r3, [sp, #64]	; 0x40
   18984:	str	r3, [sp, #68]	; 0x44
   18988:	str	r3, [sp, #88]	; 0x58
   1898c:	movw	r3, #6032	; 0x1790
   18990:	movt	r3, #2
   18994:	str	r3, [sp, #72]	; 0x48
   18998:	ldr	r3, [sp, #180]	; 0xb4
   1899c:	str	r2, [sp, #80]	; 0x50
   189a0:	str	r2, [sp, #84]	; 0x54
   189a4:	and	r3, r3, #1
   189a8:	b	1893c <__assert_fail@plt+0x7558>
   189ac:	mov	r5, #102	; 0x66
   189b0:	mov	r6, #0
   189b4:	ldr	r3, [sp, #44]	; 0x2c
   189b8:	cmp	r3, #0
   189bc:	bne	1986c <__assert_fail@plt+0x8488>
   189c0:	ldr	r2, [sp, #52]	; 0x34
   189c4:	eor	r3, fp, #1
   189c8:	ands	r3, r2, r3
   189cc:	beq	18a04 <__assert_fail@plt+0x7620>
   189d0:	cmp	sl, r4
   189d4:	mov	fp, r3
   189d8:	movhi	r2, #39	; 0x27
   189dc:	strbhi	r2, [r9, r4]
   189e0:	add	r2, r4, #1
   189e4:	cmp	sl, r2
   189e8:	movhi	r1, #36	; 0x24
   189ec:	strbhi	r1, [r9, r2]
   189f0:	add	r2, r4, #2
   189f4:	add	r4, r4, #3
   189f8:	cmp	sl, r2
   189fc:	movhi	r1, #39	; 0x27
   18a00:	strbhi	r1, [r9, r2]
   18a04:	cmp	sl, r4
   18a08:	add	r7, r7, #1
   18a0c:	movhi	r3, #92	; 0x5c
   18a10:	strbhi	r3, [r9, r4]
   18a14:	add	r4, r4, #1
   18a18:	cmp	r4, sl
   18a1c:	ldr	r3, [sp, #32]
   18a20:	strbcc	r5, [r9, r4]
   18a24:	cmp	r6, #0
   18a28:	add	r4, r4, #1
   18a2c:	moveq	r3, #0
   18a30:	cmn	r8, #1
   18a34:	str	r3, [sp, #32]
   18a38:	bne	1843c <__assert_fail@plt+0x7058>
   18a3c:	ldr	r3, [sp, #28]
   18a40:	ldrb	r6, [r3, r7]
   18a44:	adds	r6, r6, #0
   18a48:	movne	r6, #1
   18a4c:	cmp	r6, #0
   18a50:	bne	1844c <__assert_fail@plt+0x7068>
   18a54:	mov	r3, r9
   18a58:	mov	r9, fp
   18a5c:	mov	fp, r3
   18a60:	ldr	r3, [sp, #68]	; 0x44
   18a64:	cmp	r4, #0
   18a68:	movne	r3, #0
   18a6c:	cmp	r3, #0
   18a70:	bne	19c64 <__assert_fail@plt+0x8880>
   18a74:	ldr	r3, [sp, #44]	; 0x2c
   18a78:	ldr	r2, [sp, #52]	; 0x34
   18a7c:	eor	r3, r3, #1
   18a80:	ands	r2, r3, r2
   18a84:	beq	19b9c <__assert_fail@plt+0x87b8>
   18a88:	ldr	r3, [sp, #80]	; 0x50
   18a8c:	cmp	r3, #0
   18a90:	beq	19ba0 <__assert_fail@plt+0x87bc>
   18a94:	ldr	r3, [sp, #32]
   18a98:	cmp	r3, #0
   18a9c:	bne	19c14 <__assert_fail@plt+0x8830>
   18aa0:	ldr	r3, [sp, #84]	; 0x54
   18aa4:	adds	r3, r3, #0
   18aa8:	movne	r3, #1
   18aac:	cmp	sl, #0
   18ab0:	movne	r3, #0
   18ab4:	cmp	r3, #0
   18ab8:	ldreq	r2, [sp, #80]	; 0x50
   18abc:	beq	19ba0 <__assert_fail@plt+0x87bc>
   18ac0:	ldr	r2, [sp, #84]	; 0x54
   18ac4:	mov	sl, r2
   18ac8:	mov	r0, #0
   18acc:	mov	r4, #1
   18ad0:	mov	r1, #39	; 0x27
   18ad4:	str	r0, [sp, #44]	; 0x2c
   18ad8:	strb	r1, [fp]
   18adc:	str	r0, [sp, #48]	; 0x30
   18ae0:	str	r4, [sp, #52]	; 0x34
   18ae4:	str	r4, [sp, #56]	; 0x38
   18ae8:	str	r4, [sp, #64]	; 0x40
   18aec:	str	r0, [sp, #68]	; 0x44
   18af0:	str	r3, [sp, #80]	; 0x50
   18af4:	str	r2, [sp, #84]	; 0x54
   18af8:	str	r0, [sp, #88]	; 0x58
   18afc:	b	1873c <__assert_fail@plt+0x7358>
   18b00:	mov	r5, #98	; 0x62
   18b04:	b	189b0 <__assert_fail@plt+0x75cc>
   18b08:	mov	r5, #97	; 0x61
   18b0c:	b	189b0 <__assert_fail@plt+0x75cc>
   18b10:	ldr	r3, [sp, #48]	; 0x30
   18b14:	str	r3, [sp, #40]	; 0x28
   18b18:	mov	r3, #116	; 0x74
   18b1c:	ldr	r2, [sp, #68]	; 0x44
   18b20:	cmp	r2, #0
   18b24:	bne	18d20 <__assert_fail@plt+0x793c>
   18b28:	ldr	r2, [sp, #60]	; 0x3c
   18b2c:	cmp	r2, #0
   18b30:	bne	18c7c <__assert_fail@plt+0x7898>
   18b34:	ldr	r3, [sp, #44]	; 0x2c
   18b38:	mov	r6, #0
   18b3c:	cmp	r3, #0
   18b40:	beq	18cec <__assert_fail@plt+0x7908>
   18b44:	mov	r3, fp
   18b48:	ldr	r2, [sp, #184]	; 0xb8
   18b4c:	cmp	r2, #0
   18b50:	beq	18b70 <__assert_fail@plt+0x778c>
   18b54:	ubfx	r1, r5, #5, #8
   18b58:	mov	r0, r2
   18b5c:	and	r2, r5, #31
   18b60:	ldr	r1, [r0, r1, lsl #2]
   18b64:	lsr	r2, r1, r2
   18b68:	tst	r2, #1
   18b6c:	bne	189b4 <__assert_fail@plt+0x75d0>
   18b70:	ldr	r2, [sp, #40]	; 0x28
   18b74:	cmp	r2, #0
   18b78:	addeq	r7, r7, #1
   18b7c:	bne	189b4 <__assert_fail@plt+0x75d0>
   18b80:	cmp	r3, #0
   18b84:	beq	18a18 <__assert_fail@plt+0x7634>
   18b88:	cmp	sl, r4
   18b8c:	mov	fp, #0
   18b90:	movhi	r3, #39	; 0x27
   18b94:	strbhi	r3, [r9, r4]
   18b98:	add	r3, r4, #1
   18b9c:	add	r4, r4, #2
   18ba0:	cmp	sl, r3
   18ba4:	movhi	r2, #39	; 0x27
   18ba8:	strbhi	r2, [r9, r3]
   18bac:	b	18a18 <__assert_fail@plt+0x7634>
   18bb0:	ldr	r3, [sp, #48]	; 0x30
   18bb4:	str	r3, [sp, #40]	; 0x28
   18bb8:	eor	r3, fp, #1
   18bbc:	ldr	r2, [sp, #52]	; 0x34
   18bc0:	ands	r2, r2, r3
   18bc4:	beq	19884 <__assert_fail@plt+0x84a0>
   18bc8:	cmp	sl, r4
   18bcc:	movhi	r3, #39	; 0x27
   18bd0:	strbhi	r3, [r9, r4]
   18bd4:	add	r3, r4, #1
   18bd8:	cmp	sl, r3
   18bdc:	movhi	r1, #36	; 0x24
   18be0:	strbhi	r1, [r9, r3]
   18be4:	add	r3, r4, #2
   18be8:	cmp	sl, r3
   18bec:	movhi	r1, #39	; 0x27
   18bf0:	strbhi	r1, [r9, r3]
   18bf4:	add	r3, r4, #3
   18bf8:	cmp	sl, r3
   18bfc:	bls	198d0 <__assert_fail@plt+0x84ec>
   18c00:	mov	r4, r3
   18c04:	mov	r3, #92	; 0x5c
   18c08:	mov	fp, r2
   18c0c:	mov	r2, r4
   18c10:	strb	r3, [r9, r4]
   18c14:	ldr	r3, [sp, #176]	; 0xb0
   18c18:	add	r4, r4, #1
   18c1c:	cmp	r3, #2
   18c20:	beq	19938 <__assert_fail@plt+0x8554>
   18c24:	add	r3, r7, #1
   18c28:	cmp	r3, r8
   18c2c:	bcs	18c44 <__assert_fail@plt+0x7860>
   18c30:	ldr	r1, [sp, #28]
   18c34:	ldrb	r3, [r1, r3]
   18c38:	sub	r3, r3, #48	; 0x30
   18c3c:	cmp	r3, #9
   18c40:	bls	19948 <__assert_fail@plt+0x8564>
   18c44:	mov	r3, #0
   18c48:	mov	r5, #48	; 0x30
   18c4c:	ldr	r6, [sp, #64]	; 0x40
   18c50:	cmp	r6, #0
   18c54:	beq	18b48 <__assert_fail@plt+0x7764>
   18c58:	mov	r6, #0
   18c5c:	b	18b70 <__assert_fail@plt+0x778c>
   18c60:	ldr	r3, [sp, #48]	; 0x30
   18c64:	str	r3, [sp, #40]	; 0x28
   18c68:	ldr	r2, [sp, #60]	; 0x3c
   18c6c:	mov	r5, #13
   18c70:	mov	r3, #114	; 0x72
   18c74:	cmp	r2, #0
   18c78:	beq	18b34 <__assert_fail@plt+0x7750>
   18c7c:	mov	r5, r3
   18c80:	b	189b0 <__assert_fail@plt+0x75cc>
   18c84:	ldr	r3, [sp, #48]	; 0x30
   18c88:	str	r3, [sp, #40]	; 0x28
   18c8c:	mov	r3, #118	; 0x76
   18c90:	b	18b28 <__assert_fail@plt+0x7744>
   18c94:	ldr	r3, [sp, #48]	; 0x30
   18c98:	str	r3, [sp, #40]	; 0x28
   18c9c:	mov	r5, #10
   18ca0:	mov	r3, #110	; 0x6e
   18ca4:	b	18b28 <__assert_fail@plt+0x7744>
   18ca8:	ldr	r3, [sp, #48]	; 0x30
   18cac:	cmn	r8, #1
   18cb0:	str	r3, [sp, #40]	; 0x28
   18cb4:	beq	190fc <__assert_fail@plt+0x7d18>
   18cb8:	subs	r3, r8, #1
   18cbc:	movne	r3, #1
   18cc0:	cmp	r3, #0
   18cc4:	bne	18cd0 <__assert_fail@plt+0x78ec>
   18cc8:	cmp	r7, #0
   18ccc:	beq	18d14 <__assert_fail@plt+0x7930>
   18cd0:	mov	r6, #0
   18cd4:	ldr	r3, [sp, #64]	; 0x40
   18cd8:	cmp	r3, #0
   18cdc:	beq	18b44 <__assert_fail@plt+0x7760>
   18ce0:	ldr	r3, [sp, #44]	; 0x2c
   18ce4:	cmp	r3, #0
   18ce8:	bne	18b44 <__assert_fail@plt+0x7760>
   18cec:	mov	r3, fp
   18cf0:	b	18b70 <__assert_fail@plt+0x778c>
   18cf4:	ldr	r3, [sp, #48]	; 0x30
   18cf8:	str	r3, [sp, #40]	; 0x28
   18cfc:	b	18cc8 <__assert_fail@plt+0x78e4>
   18d00:	ldr	r3, [sp, #48]	; 0x30
   18d04:	str	r3, [sp, #40]	; 0x28
   18d08:	b	18cd0 <__assert_fail@plt+0x78ec>
   18d0c:	ldr	r6, [sp, #48]	; 0x30
   18d10:	str	r6, [sp, #40]	; 0x28
   18d14:	ldr	r3, [sp, #68]	; 0x44
   18d18:	cmp	r3, #0
   18d1c:	beq	18cd4 <__assert_fail@plt+0x78f0>
   18d20:	mov	r3, #2
   18d24:	mov	fp, r9
   18d28:	str	r3, [sp, #176]	; 0xb0
   18d2c:	ldr	r3, [sp, #60]	; 0x3c
   18d30:	cmp	r3, #0
   18d34:	ldr	r3, [sp, #176]	; 0xb0
   18d38:	movne	r3, #4
   18d3c:	str	r3, [sp, #176]	; 0xb0
   18d40:	mov	lr, #0
   18d44:	mov	r0, fp
   18d48:	ldr	r2, [sp, #28]
   18d4c:	ldr	r3, [sp, #180]	; 0xb4
   18d50:	ldr	r1, [sp, #188]	; 0xbc
   18d54:	bic	ip, r3, #2
   18d58:	ldr	r3, [sp, #176]	; 0xb0
   18d5c:	stm	sp, {r3, ip, lr}
   18d60:	mov	r3, r8
   18d64:	ldr	ip, [sp, #192]	; 0xc0
   18d68:	str	r1, [sp, #12]
   18d6c:	mov	r1, sl
   18d70:	str	ip, [sp, #16]
   18d74:	bl	18300 <__assert_fail@plt+0x6f1c>
   18d78:	mov	r4, r0
   18d7c:	mov	r0, r4
   18d80:	add	sp, sp, #140	; 0x8c
   18d84:	ldrd	r4, [sp]
   18d88:	ldrd	r6, [sp, #8]
   18d8c:	ldrd	r8, [sp, #16]
   18d90:	ldrd	sl, [sp, #24]
   18d94:	add	sp, sp, #32
   18d98:	pop	{pc}		; (ldr pc, [sp], #4)
   18d9c:	ldr	r3, [sp, #48]	; 0x30
   18da0:	str	r3, [sp, #40]	; 0x28
   18da4:	ldr	r3, [sp, #176]	; 0xb0
   18da8:	cmp	r3, #2
   18dac:	beq	19124 <__assert_fail@plt+0x7d40>
   18db0:	ldr	r3, [sp, #88]	; 0x58
   18db4:	cmp	r3, #0
   18db8:	moveq	r5, #92	; 0x5c
   18dbc:	moveq	r3, r5
   18dc0:	beq	18b28 <__assert_fail@plt+0x7744>
   18dc4:	add	r7, r7, #1
   18dc8:	mov	r3, fp
   18dcc:	mov	r6, #0
   18dd0:	mov	r5, #92	; 0x5c
   18dd4:	b	18b80 <__assert_fail@plt+0x779c>
   18dd8:	ldr	r3, [sp, #64]	; 0x40
   18ddc:	cmp	r3, #0
   18de0:	bne	19c58 <__assert_fail@plt+0x8874>
   18de4:	ldr	r2, [sp, #48]	; 0x30
   18de8:	mov	r3, fp
   18dec:	mov	r6, r2
   18df0:	str	r2, [sp, #40]	; 0x28
   18df4:	b	18b48 <__assert_fail@plt+0x7764>
   18df8:	ldr	r3, [sp, #176]	; 0xb0
   18dfc:	cmp	r3, #2
   18e00:	beq	19b94 <__assert_fail@plt+0x87b0>
   18e04:	cmp	r3, #5
   18e08:	ldr	r3, [sp, #48]	; 0x30
   18e0c:	str	r3, [sp, #40]	; 0x28
   18e10:	bne	18e3c <__assert_fail@plt+0x7a58>
   18e14:	ldr	r3, [sp, #96]	; 0x60
   18e18:	cmp	r3, #0
   18e1c:	beq	19898 <__assert_fail@plt+0x84b4>
   18e20:	add	r3, r7, #2
   18e24:	cmp	r3, r8
   18e28:	bcs	18e3c <__assert_fail@plt+0x7a58>
   18e2c:	ldr	r2, [sp, #36]	; 0x24
   18e30:	ldrb	r5, [r2, #1]
   18e34:	cmp	r5, #63	; 0x3f
   18e38:	beq	19980 <__assert_fail@plt+0x859c>
   18e3c:	mov	r6, #0
   18e40:	mov	r5, #63	; 0x3f
   18e44:	b	18cd4 <__assert_fail@plt+0x78f0>
   18e48:	ldr	r3, [sp, #176]	; 0xb0
   18e4c:	cmp	r3, #2
   18e50:	ldr	r3, [sp, #48]	; 0x30
   18e54:	beq	1963c <__assert_fail@plt+0x8258>
   18e58:	mov	r5, #39	; 0x27
   18e5c:	str	r3, [sp, #40]	; 0x28
   18e60:	str	r6, [sp, #80]	; 0x50
   18e64:	b	18cd4 <__assert_fail@plt+0x78f0>
   18e68:	ldr	r3, [sp, #180]	; 0xb4
   18e6c:	cmp	r4, #0
   18e70:	and	r3, r3, #1
   18e74:	str	r3, [sp, #92]	; 0x5c
   18e78:	ldr	r3, [sp, #180]	; 0xb4
   18e7c:	and	r3, r3, #4
   18e80:	str	r3, [sp, #96]	; 0x60
   18e84:	bne	19ca4 <__assert_fail@plt+0x88c0>
   18e88:	str	r4, [sp, #60]	; 0x3c
   18e8c:	cmp	sl, #0
   18e90:	bne	19c88 <__assert_fail@plt+0x88a4>
   18e94:	mov	r3, #1
   18e98:	movw	r2, #6032	; 0x1790
   18e9c:	movt	r2, #2
   18ea0:	mov	r4, r3
   18ea4:	mov	r3, #2
   18ea8:	mov	r9, sl
   18eac:	str	r4, [sp, #32]
   18eb0:	str	sl, [sp, #44]	; 0x2c
   18eb4:	str	sl, [sp, #48]	; 0x30
   18eb8:	str	r4, [sp, #52]	; 0x34
   18ebc:	str	r4, [sp, #56]	; 0x38
   18ec0:	str	r4, [sp, #64]	; 0x40
   18ec4:	str	sl, [sp, #68]	; 0x44
   18ec8:	str	r2, [sp, #72]	; 0x48
   18ecc:	str	sl, [sp, #80]	; 0x50
   18ed0:	str	sl, [sp, #84]	; 0x54
   18ed4:	str	sl, [sp, #88]	; 0x58
   18ed8:	str	r3, [sp, #176]	; 0xb0
   18edc:	b	18424 <__assert_fail@plt+0x7040>
   18ee0:	ldrb	r5, [r0, r7]
   18ee4:	cmp	r5, #126	; 0x7e
   18ee8:	ldrls	pc, [pc, r5, lsl #2]
   18eec:	b	19250 <__assert_fail@plt+0x7e6c>
   18ef0:	andeq	r9, r1, ip, lsl r2
   18ef4:	andeq	r9, r1, r0, asr r2
   18ef8:	andeq	r9, r1, r0, asr r2
   18efc:	andeq	r9, r1, r0, asr r2
   18f00:	andeq	r9, r1, r0, asr r2
   18f04:	andeq	r9, r1, r0, asr r2
   18f08:	andeq	r9, r1, r0, asr r2
   18f0c:	andeq	r9, r1, ip, lsl #4
   18f10:	strdeq	r9, [r1], -ip
   18f14:	andeq	r9, r1, r0, lsl #3
   18f18:	andeq	r9, r1, ip, ror #3
   18f1c:	andeq	r9, r1, r0, ror #2
   18f20:	andeq	r9, r1, r0, asr #4
   18f24:	andeq	r9, r1, ip, asr #3
   18f28:	andeq	r9, r1, r0, asr r2
   18f2c:	andeq	r9, r1, r0, asr r2
   18f30:	andeq	r9, r1, r0, asr r2
   18f34:	andeq	r9, r1, r0, asr r2
   18f38:	andeq	r9, r1, r0, asr r2
   18f3c:	andeq	r9, r1, r0, asr r2
   18f40:	andeq	r9, r1, r0, asr r2
   18f44:	andeq	r9, r1, r0, asr r2
   18f48:	andeq	r9, r1, r0, asr r2
   18f4c:	andeq	r9, r1, r0, asr r2
   18f50:	andeq	r9, r1, r0, asr r2
   18f54:	andeq	r9, r1, r0, asr r2
   18f58:	andeq	r9, r1, r0, asr r2
   18f5c:	andeq	r9, r1, r0, asr r2
   18f60:	andeq	r9, r1, r0, asr r2
   18f64:	andeq	r9, r1, r0, asr r2
   18f68:	andeq	r9, r1, r0, asr r2
   18f6c:	andeq	r9, r1, r0, asr r2
   18f70:	andeq	r9, r1, r4, ror r1
   18f74:	ldrdeq	r9, [r1], -ip
   18f78:	ldrdeq	r9, [r1], -ip
   18f7c:	andeq	r9, r1, r4, asr r1
   18f80:	ldrdeq	r9, [r1], -ip
   18f84:	andeq	r9, r1, r8, asr #2
   18f88:	ldrdeq	r9, [r1], -ip
   18f8c:			; <UNDEFINED> instruction: 0x000191b8
   18f90:	ldrdeq	r9, [r1], -ip
   18f94:	ldrdeq	r9, [r1], -ip
   18f98:	ldrdeq	r9, [r1], -ip
   18f9c:	andeq	r9, r1, r8, asr #2
   18fa0:	andeq	r9, r1, r8, asr #2
   18fa4:	andeq	r9, r1, r8, asr #2
   18fa8:	andeq	r9, r1, r8, asr #2
   18fac:	andeq	r9, r1, r8, asr #2
   18fb0:	andeq	r9, r1, r8, asr #2
   18fb4:	andeq	r9, r1, r8, asr #2
   18fb8:	andeq	r9, r1, r8, asr #2
   18fbc:	andeq	r9, r1, r8, asr #2
   18fc0:	andeq	r9, r1, r8, asr #2
   18fc4:	andeq	r9, r1, r8, asr #2
   18fc8:	andeq	r9, r1, r8, asr #2
   18fcc:	andeq	r9, r1, r8, asr #2
   18fd0:	andeq	r9, r1, r8, asr #2
   18fd4:	andeq	r9, r1, r8, asr #2
   18fd8:	andeq	r9, r1, r8, asr #2
   18fdc:	ldrdeq	r9, [r1], -ip
   18fe0:	ldrdeq	r9, [r1], -ip
   18fe4:	ldrdeq	r9, [r1], -ip
   18fe8:	ldrdeq	r9, [r1], -ip
   18fec:	muleq	r1, r0, r1
   18ff0:	andeq	r9, r1, r0, asr r2
   18ff4:	andeq	r9, r1, r8, asr #2
   18ff8:	andeq	r9, r1, r8, asr #2
   18ffc:	andeq	r9, r1, r8, asr #2
   19000:	andeq	r9, r1, r8, asr #2
   19004:	andeq	r9, r1, r8, asr #2
   19008:	andeq	r9, r1, r8, asr #2
   1900c:	andeq	r9, r1, r8, asr #2
   19010:	andeq	r9, r1, r8, asr #2
   19014:	andeq	r9, r1, r8, asr #2
   19018:	andeq	r9, r1, r8, asr #2
   1901c:	andeq	r9, r1, r8, asr #2
   19020:	andeq	r9, r1, r8, asr #2
   19024:	andeq	r9, r1, r8, asr #2
   19028:	andeq	r9, r1, r8, asr #2
   1902c:	andeq	r9, r1, r8, asr #2
   19030:	andeq	r9, r1, r8, asr #2
   19034:	andeq	r9, r1, r8, asr #2
   19038:	andeq	r9, r1, r8, asr #2
   1903c:	andeq	r9, r1, r8, asr #2
   19040:	andeq	r9, r1, r8, asr #2
   19044:	andeq	r9, r1, r8, asr #2
   19048:	andeq	r9, r1, r8, asr #2
   1904c:	andeq	r9, r1, r8, asr #2
   19050:	andeq	r9, r1, r8, asr #2
   19054:	andeq	r9, r1, r8, asr #2
   19058:	andeq	r9, r1, r8, asr #2
   1905c:	ldrdeq	r9, [r1], -ip
   19060:	andeq	r9, r1, r0, lsl r1
   19064:	andeq	r9, r1, r8, asr #2
   19068:	ldrdeq	r9, [r1], -ip
   1906c:	andeq	r9, r1, r8, asr #2
   19070:	ldrdeq	r9, [r1], -ip
   19074:	andeq	r9, r1, r8, asr #2
   19078:	andeq	r9, r1, r8, asr #2
   1907c:	andeq	r9, r1, r8, asr #2
   19080:	andeq	r9, r1, r8, asr #2
   19084:	andeq	r9, r1, r8, asr #2
   19088:	andeq	r9, r1, r8, asr #2
   1908c:	andeq	r9, r1, r8, asr #2
   19090:	andeq	r9, r1, r8, asr #2
   19094:	andeq	r9, r1, r8, asr #2
   19098:	andeq	r9, r1, r8, asr #2
   1909c:	andeq	r9, r1, r8, asr #2
   190a0:	andeq	r9, r1, r8, asr #2
   190a4:	andeq	r9, r1, r8, asr #2
   190a8:	andeq	r9, r1, r8, asr #2
   190ac:	andeq	r9, r1, r8, asr #2
   190b0:	andeq	r9, r1, r8, asr #2
   190b4:	andeq	r9, r1, r8, asr #2
   190b8:	andeq	r9, r1, r8, asr #2
   190bc:	andeq	r9, r1, r8, asr #2
   190c0:	andeq	r9, r1, r8, asr #2
   190c4:	andeq	r9, r1, r8, asr #2
   190c8:	andeq	r9, r1, r8, asr #2
   190cc:	andeq	r9, r1, r8, asr #2
   190d0:	andeq	r9, r1, r8, asr #2
   190d4:	andeq	r9, r1, r8, asr #2
   190d8:	andeq	r9, r1, r8, asr #2
   190dc:	andeq	r9, r1, ip, ror #1
   190e0:	ldrdeq	r9, [r1], -ip
   190e4:	andeq	r9, r1, ip, ror #1
   190e8:	andeq	r9, r1, r4, asr r1
   190ec:	mov	r3, #0
   190f0:	cmn	r8, #1
   190f4:	str	r3, [sp, #40]	; 0x28
   190f8:	bne	18cb8 <__assert_fail@plt+0x78d4>
   190fc:	ldr	r3, [sp, #28]
   19100:	ldrb	r3, [r3, #1]
   19104:	adds	r3, r3, #0
   19108:	movne	r3, #1
   1910c:	b	18cc0 <__assert_fail@plt+0x78dc>
   19110:	mov	r3, #0
   19114:	str	r3, [sp, #40]	; 0x28
   19118:	ldr	r3, [sp, #176]	; 0xb0
   1911c:	cmp	r3, #2
   19120:	bne	18db0 <__assert_fail@plt+0x79cc>
   19124:	ldr	r3, [sp, #44]	; 0x2c
   19128:	cmp	r3, #0
   1912c:	bne	19a6c <__assert_fail@plt+0x8688>
   19130:	mov	r6, r3
   19134:	add	r7, r7, #1
   19138:	mov	r3, fp
   1913c:	mov	r5, #92	; 0x5c
   19140:	b	18b80 <__assert_fail@plt+0x779c>
   19144:	ldr	r6, [sp, #48]	; 0x30
   19148:	mov	r3, #0
   1914c:	str	r3, [sp, #40]	; 0x28
   19150:	b	18cd4 <__assert_fail@plt+0x78f0>
   19154:	mov	r3, #0
   19158:	str	r3, [sp, #40]	; 0x28
   1915c:	b	18cc8 <__assert_fail@plt+0x78e4>
   19160:	mov	r3, #0
   19164:	str	r3, [sp, #40]	; 0x28
   19168:	mov	r3, #118	; 0x76
   1916c:	b	18b28 <__assert_fail@plt+0x7744>
   19170:	ldr	r6, [sp, #48]	; 0x30
   19174:	mov	r3, #0
   19178:	str	r3, [sp, #40]	; 0x28
   1917c:	b	18d14 <__assert_fail@plt+0x7930>
   19180:	mov	r3, #0
   19184:	str	r3, [sp, #40]	; 0x28
   19188:	mov	r3, #116	; 0x74
   1918c:	b	18b1c <__assert_fail@plt+0x7738>
   19190:	ldr	r3, [sp, #176]	; 0xb0
   19194:	cmp	r3, #2
   19198:	beq	196a8 <__assert_fail@plt+0x82c4>
   1919c:	cmp	r3, #5
   191a0:	mov	r3, #0
   191a4:	str	r3, [sp, #40]	; 0x28
   191a8:	beq	18e14 <__assert_fail@plt+0x7a30>
   191ac:	mov	r6, #0
   191b0:	mov	r5, #63	; 0x3f
   191b4:	b	18cd4 <__assert_fail@plt+0x78f0>
   191b8:	ldr	r3, [sp, #176]	; 0xb0
   191bc:	cmp	r3, #2
   191c0:	beq	19630 <__assert_fail@plt+0x824c>
   191c4:	mov	r3, #0
   191c8:	b	18e58 <__assert_fail@plt+0x7a74>
   191cc:	mov	r3, #0
   191d0:	str	r3, [sp, #40]	; 0x28
   191d4:	mov	r3, #114	; 0x72
   191d8:	b	18b1c <__assert_fail@plt+0x7738>
   191dc:	mov	r3, #0
   191e0:	mov	r6, r3
   191e4:	str	r3, [sp, #40]	; 0x28
   191e8:	b	18d14 <__assert_fail@plt+0x7930>
   191ec:	mov	r3, #0
   191f0:	str	r3, [sp, #40]	; 0x28
   191f4:	mov	r3, #110	; 0x6e
   191f8:	b	18b1c <__assert_fail@plt+0x7738>
   191fc:	mov	r3, #0
   19200:	str	r3, [sp, #40]	; 0x28
   19204:	mov	r3, #98	; 0x62
   19208:	b	18b28 <__assert_fail@plt+0x7744>
   1920c:	mov	r3, #0
   19210:	str	r3, [sp, #40]	; 0x28
   19214:	mov	r3, #97	; 0x61
   19218:	b	18b28 <__assert_fail@plt+0x7744>
   1921c:	ldr	r3, [sp, #60]	; 0x3c
   19220:	cmp	r3, #0
   19224:	bne	19614 <__assert_fail@plt+0x8230>
   19228:	ldr	r3, [sp, #92]	; 0x5c
   1922c:	cmp	r3, #0
   19230:	addne	r7, r7, #1
   19234:	bne	18434 <__assert_fail@plt+0x7050>
   19238:	str	r3, [sp, #40]	; 0x28
   1923c:	b	18b34 <__assert_fail@plt+0x7750>
   19240:	mov	r3, #0
   19244:	str	r3, [sp, #40]	; 0x28
   19248:	mov	r3, #102	; 0x66
   1924c:	b	18b28 <__assert_fail@plt+0x7744>
   19250:	mov	r3, #0
   19254:	str	r3, [sp, #40]	; 0x28
   19258:	ldr	r3, [sp, #76]	; 0x4c
   1925c:	cmp	r3, #1
   19260:	bne	196c8 <__assert_fail@plt+0x82e4>
   19264:	bl	1127c <__ctype_b_loc@plt>
   19268:	ldr	r2, [r0]
   1926c:	sxth	r3, r5
   19270:	lsl	r3, r3, #1
   19274:	ldr	r1, [sp, #76]	; 0x4c
   19278:	ldrh	r3, [r2, r3]
   1927c:	mov	r0, r1
   19280:	and	r3, r3, #16384	; 0x4000
   19284:	cmp	r3, #0
   19288:	ldr	r3, [sp, #60]	; 0x3c
   1928c:	movne	r6, #1
   19290:	moveq	r6, #0
   19294:	movne	r2, #0
   19298:	andeq	r2, r3, #1
   1929c:	cmp	r2, #0
   192a0:	beq	18cd4 <__assert_fail@plt+0x78f0>
   192a4:	ldr	r2, [sp, #60]	; 0x3c
   192a8:	mov	r6, #0
   192ac:	add	r1, r0, r7
   192b0:	mov	ip, #39	; 0x27
   192b4:	str	r6, [sp, #100]	; 0x64
   192b8:	mov	r0, #0
   192bc:	ldr	lr, [sp, #36]	; 0x24
   192c0:	str	r8, [sp, #36]	; 0x24
   192c4:	ldr	r6, [sp, #40]	; 0x28
   192c8:	ldr	r8, [sp, #44]	; 0x2c
   192cc:	b	1937c <__assert_fail@plt+0x7f98>
   192d0:	cmp	r8, #0
   192d4:	bne	198b0 <__assert_fail@plt+0x84cc>
   192d8:	ldr	r0, [sp, #52]	; 0x34
   192dc:	eor	r3, fp, #1
   192e0:	ands	r3, r0, r3
   192e4:	beq	19314 <__assert_fail@plt+0x7f30>
   192e8:	cmp	sl, r4
   192ec:	add	r0, r4, #1
   192f0:	strbhi	ip, [r9, r4]
   192f4:	cmp	sl, r0
   192f8:	movhi	fp, #36	; 0x24
   192fc:	strbhi	fp, [r9, r0]
   19300:	add	r0, r4, #2
   19304:	mov	fp, r3
   19308:	cmp	sl, r0
   1930c:	add	r4, r4, #3
   19310:	strbhi	ip, [r9, r0]
   19314:	cmp	sl, r4
   19318:	movhi	r3, #92	; 0x5c
   1931c:	strbhi	r3, [r9, r4]
   19320:	add	r3, r4, #1
   19324:	cmp	sl, r3
   19328:	bls	19338 <__assert_fail@plt+0x7f54>
   1932c:	lsr	r0, r5, #6
   19330:	add	r0, r0, #48	; 0x30
   19334:	strb	r0, [r9, r3]
   19338:	add	r3, r4, #2
   1933c:	cmp	sl, r3
   19340:	bls	19350 <__assert_fail@plt+0x7f6c>
   19344:	ubfx	r0, r5, #3, #3
   19348:	add	r0, r0, #48	; 0x30
   1934c:	strb	r0, [r9, r3]
   19350:	add	r7, r7, #1
   19354:	and	r5, r5, #7
   19358:	cmp	r1, r7
   1935c:	add	r5, r5, #48	; 0x30
   19360:	add	r4, r4, #3
   19364:	bls	198c4 <__assert_fail@plt+0x84e0>
   19368:	mov	r0, r2
   1936c:	cmp	sl, r4
   19370:	strbhi	r5, [r9, r4]
   19374:	add	r4, r4, #1
   19378:	ldrb	r5, [lr, #1]!
   1937c:	cmp	r2, #0
   19380:	bne	192d0 <__assert_fail@plt+0x7eec>
   19384:	eor	r3, r0, #1
   19388:	cmp	r6, #0
   1938c:	and	r3, r3, fp
   19390:	uxtb	r3, r3
   19394:	beq	193a8 <__assert_fail@plt+0x7fc4>
   19398:	cmp	sl, r4
   1939c:	movhi	r6, #92	; 0x5c
   193a0:	strbhi	r6, [r9, r4]
   193a4:	add	r4, r4, #1
   193a8:	add	r7, r7, #1
   193ac:	cmp	r7, r1
   193b0:	bcs	198a4 <__assert_fail@plt+0x84c0>
   193b4:	cmp	r3, #0
   193b8:	beq	198e8 <__assert_fail@plt+0x8504>
   193bc:	cmp	sl, r4
   193c0:	add	r3, r4, #1
   193c4:	mov	r6, #0
   193c8:	strbhi	ip, [r9, r4]
   193cc:	cmp	sl, r3
   193d0:	add	r4, r4, #2
   193d4:	mov	fp, r6
   193d8:	strbhi	ip, [r9, r3]
   193dc:	b	1936c <__assert_fail@plt+0x7f88>
   193e0:	ldr	r3, [sp, #36]	; 0x24
   193e4:	ldrb	r5, [r3]
   193e8:	cmp	r5, #126	; 0x7e
   193ec:	ldrls	pc, [pc, r5, lsl #2]
   193f0:	b	19250 <__assert_fail@plt+0x7e6c>
   193f4:	andeq	r9, r1, r4, lsl r6
   193f8:	andeq	r9, r1, r0, asr r2
   193fc:	andeq	r9, r1, r0, asr r2
   19400:	andeq	r9, r1, r0, asr r2
   19404:	andeq	r9, r1, r0, asr r2
   19408:	andeq	r9, r1, r0, asr r2
   1940c:	andeq	r9, r1, r0, asr r2
   19410:	andeq	r8, r1, r8, lsl #22
   19414:	andeq	r8, r1, r0, lsl #22
   19418:	andeq	r9, r1, r0, lsl #3
   1941c:	andeq	r9, r1, r8, lsl #12
   19420:	andeq	r9, r1, r0, ror #2
   19424:	andeq	r8, r1, ip, lsr #19
   19428:	strdeq	r9, [r1], -ip
   1942c:	andeq	r9, r1, r0, asr r2
   19430:	andeq	r9, r1, r0, asr r2
   19434:	andeq	r9, r1, r0, asr r2
   19438:	andeq	r9, r1, r0, asr r2
   1943c:	andeq	r9, r1, r0, asr r2
   19440:	andeq	r9, r1, r0, asr r2
   19444:	andeq	r9, r1, r0, asr r2
   19448:	andeq	r9, r1, r0, asr r2
   1944c:	andeq	r9, r1, r0, asr r2
   19450:	andeq	r9, r1, r0, asr r2
   19454:	andeq	r9, r1, r0, asr r2
   19458:	andeq	r9, r1, r0, asr r2
   1945c:	andeq	r9, r1, r0, asr r2
   19460:	andeq	r9, r1, r0, asr r2
   19464:	andeq	r9, r1, r0, asr r2
   19468:	andeq	r9, r1, r0, asr r2
   1946c:	andeq	r9, r1, r0, asr r2
   19470:	andeq	r9, r1, r0, asr r2
   19474:	andeq	r9, r1, r0, ror r1
   19478:	strdeq	r9, [r1], -r0
   1947c:	strdeq	r9, [r1], -r0
   19480:	andeq	r9, r1, r4, asr r1
   19484:	strdeq	r9, [r1], -r0
   19488:	andeq	r9, r1, r4, asr #2
   1948c:	strdeq	r9, [r1], -r0
   19490:			; <UNDEFINED> instruction: 0x000191b8
   19494:	strdeq	r9, [r1], -r0
   19498:	strdeq	r9, [r1], -r0
   1949c:	strdeq	r9, [r1], -r0
   194a0:	andeq	r9, r1, r4, asr #2
   194a4:	andeq	r9, r1, r4, asr #2
   194a8:	andeq	r9, r1, r4, asr #2
   194ac:	andeq	r9, r1, r4, asr #2
   194b0:	andeq	r9, r1, r4, asr #2
   194b4:	andeq	r9, r1, r4, asr #2
   194b8:	andeq	r9, r1, r4, asr #2
   194bc:	andeq	r9, r1, r4, asr #2
   194c0:	andeq	r9, r1, r4, asr #2
   194c4:	andeq	r9, r1, r4, asr #2
   194c8:	andeq	r9, r1, r4, asr #2
   194cc:	andeq	r9, r1, r4, asr #2
   194d0:	andeq	r9, r1, r4, asr #2
   194d4:	andeq	r9, r1, r4, asr #2
   194d8:	andeq	r9, r1, r4, asr #2
   194dc:	andeq	r9, r1, r4, asr #2
   194e0:	strdeq	r9, [r1], -r0
   194e4:	strdeq	r9, [r1], -r0
   194e8:	strdeq	r9, [r1], -r0
   194ec:	strdeq	r9, [r1], -r0
   194f0:	muleq	r1, r0, r1
   194f4:	andeq	r9, r1, r0, asr r2
   194f8:	andeq	r9, r1, r4, asr #2
   194fc:	andeq	r9, r1, r4, asr #2
   19500:	andeq	r9, r1, r4, asr #2
   19504:	andeq	r9, r1, r4, asr #2
   19508:	andeq	r9, r1, r4, asr #2
   1950c:	andeq	r9, r1, r4, asr #2
   19510:	andeq	r9, r1, r4, asr #2
   19514:	andeq	r9, r1, r4, asr #2
   19518:	andeq	r9, r1, r4, asr #2
   1951c:	andeq	r9, r1, r4, asr #2
   19520:	andeq	r9, r1, r4, asr #2
   19524:	andeq	r9, r1, r4, asr #2
   19528:	andeq	r9, r1, r4, asr #2
   1952c:	andeq	r9, r1, r4, asr #2
   19530:	andeq	r9, r1, r4, asr #2
   19534:	andeq	r9, r1, r4, asr #2
   19538:	andeq	r9, r1, r4, asr #2
   1953c:	andeq	r9, r1, r4, asr #2
   19540:	andeq	r9, r1, r4, asr #2
   19544:	andeq	r9, r1, r4, asr #2
   19548:	andeq	r9, r1, r4, asr #2
   1954c:	andeq	r9, r1, r4, asr #2
   19550:	andeq	r9, r1, r4, asr #2
   19554:	andeq	r9, r1, r4, asr #2
   19558:	andeq	r9, r1, r4, asr #2
   1955c:	andeq	r9, r1, r4, asr #2
   19560:	strdeq	r9, [r1], -r0
   19564:	andeq	r9, r1, r0, lsl r1
   19568:	andeq	r9, r1, r4, asr #2
   1956c:	strdeq	r9, [r1], -r0
   19570:	andeq	r9, r1, r4, asr #2
   19574:	strdeq	r9, [r1], -r0
   19578:	andeq	r9, r1, r4, asr #2
   1957c:	andeq	r9, r1, r4, asr #2
   19580:	andeq	r9, r1, r4, asr #2
   19584:	andeq	r9, r1, r4, asr #2
   19588:	andeq	r9, r1, r4, asr #2
   1958c:	andeq	r9, r1, r4, asr #2
   19590:	andeq	r9, r1, r4, asr #2
   19594:	andeq	r9, r1, r4, asr #2
   19598:	andeq	r9, r1, r4, asr #2
   1959c:	andeq	r9, r1, r4, asr #2
   195a0:	andeq	r9, r1, r4, asr #2
   195a4:	andeq	r9, r1, r4, asr #2
   195a8:	andeq	r9, r1, r4, asr #2
   195ac:	andeq	r9, r1, r4, asr #2
   195b0:	andeq	r9, r1, r4, asr #2
   195b4:	andeq	r9, r1, r4, asr #2
   195b8:	andeq	r9, r1, r4, asr #2
   195bc:	andeq	r9, r1, r4, asr #2
   195c0:	andeq	r9, r1, r4, asr #2
   195c4:	andeq	r9, r1, r4, asr #2
   195c8:	andeq	r9, r1, r4, asr #2
   195cc:	andeq	r9, r1, r4, asr #2
   195d0:	andeq	r9, r1, r4, asr #2
   195d4:	andeq	r9, r1, r4, asr #2
   195d8:	andeq	r9, r1, r4, asr #2
   195dc:	andeq	r9, r1, r4, asr #2
   195e0:	andeq	r9, r1, ip, ror #1
   195e4:	strdeq	r9, [r1], -r0
   195e8:	andeq	r9, r1, ip, ror #1
   195ec:	andeq	r9, r1, r4, asr r1
   195f0:	mov	r3, #0
   195f4:	str	r3, [sp, #40]	; 0x28
   195f8:	b	18cd0 <__assert_fail@plt+0x78ec>
   195fc:	mov	r3, #0
   19600:	str	r3, [sp, #40]	; 0x28
   19604:	b	18c68 <__assert_fail@plt+0x7884>
   19608:	mov	r3, #0
   1960c:	str	r3, [sp, #40]	; 0x28
   19610:	b	18c9c <__assert_fail@plt+0x78b8>
   19614:	ldr	r3, [sp, #44]	; 0x2c
   19618:	cmp	r3, #0
   1961c:	beq	18bb4 <__assert_fail@plt+0x77d0>
   19620:	ldr	r3, [sp, #52]	; 0x34
   19624:	mov	fp, r9
   19628:	str	r3, [sp, #60]	; 0x3c
   1962c:	b	18d2c <__assert_fail@plt+0x7948>
   19630:	ldr	r3, [sp, #44]	; 0x2c
   19634:	cmp	r3, #0
   19638:	bne	19a6c <__assert_fail@plt+0x8688>
   1963c:	str	r3, [sp, #40]	; 0x28
   19640:	cmp	sl, #0
   19644:	ldr	r3, [sp, #84]	; 0x54
   19648:	clz	r3, r3
   1964c:	lsr	r3, r3, #5
   19650:	moveq	r3, #0
   19654:	cmp	r3, #0
   19658:	strne	sl, [sp, #84]	; 0x54
   1965c:	movne	sl, #0
   19660:	bne	19690 <__assert_fail@plt+0x82ac>
   19664:	cmp	sl, r4
   19668:	movhi	r3, #39	; 0x27
   1966c:	strbhi	r3, [r9, r4]
   19670:	add	r3, r4, #1
   19674:	cmp	sl, r3
   19678:	movhi	r2, #92	; 0x5c
   1967c:	strbhi	r2, [r9, r3]
   19680:	add	r3, r4, #2
   19684:	cmp	sl, r3
   19688:	movhi	r2, #39	; 0x27
   1968c:	strbhi	r2, [r9, r3]
   19690:	mov	r3, #0
   19694:	add	r4, r4, #3
   19698:	str	r6, [sp, #80]	; 0x50
   1969c:	mov	fp, r3
   196a0:	mov	r5, #39	; 0x27
   196a4:	b	18b70 <__assert_fail@plt+0x778c>
   196a8:	ldr	r3, [sp, #44]	; 0x2c
   196ac:	cmp	r3, #0
   196b0:	bne	19a6c <__assert_fail@plt+0x8688>
   196b4:	mov	r6, #0
   196b8:	mov	r5, #63	; 0x3f
   196bc:	str	r3, [sp, #40]	; 0x28
   196c0:	mov	r3, fp
   196c4:	b	18b70 <__assert_fail@plt+0x778c>
   196c8:	mov	r2, #0
   196cc:	mov	r3, #0
   196d0:	cmn	r8, #1
   196d4:	strd	r2, [sp, #128]	; 0x80
   196d8:	bne	196e8 <__assert_fail@plt+0x8304>
   196dc:	ldr	r0, [sp, #28]
   196e0:	bl	11294 <strlen@plt>
   196e4:	mov	r8, r0
   196e8:	str	r9, [sp, #100]	; 0x64
   196ec:	mov	r3, #0
   196f0:	strd	sl, [sp, #104]	; 0x68
   196f4:	ldr	sl, [sp, #28]
   196f8:	str	r5, [sp, #112]	; 0x70
   196fc:	mov	r5, r3
   19700:	ldr	r9, [sp, #68]	; 0x44
   19704:	str	r4, [sp, #116]	; 0x74
   19708:	add	r4, r7, r5
   1970c:	add	r3, sp, #128	; 0x80
   19710:	add	fp, sl, r4
   19714:	sub	r2, r8, r4
   19718:	mov	r1, fp
   1971c:	add	r0, sp, #124	; 0x7c
   19720:	bl	1fb50 <__assert_fail@plt+0xe76c>
   19724:	subs	r1, r0, #0
   19728:	beq	19768 <__assert_fail@plt+0x8384>
   1972c:	cmn	r1, #1
   19730:	beq	19ac0 <__assert_fail@plt+0x86dc>
   19734:	cmn	r1, #2
   19738:	beq	19ae0 <__assert_fail@plt+0x86fc>
   1973c:	cmp	r9, #0
   19740:	bne	19798 <__assert_fail@plt+0x83b4>
   19744:	ldr	r0, [sp, #124]	; 0x7c
   19748:	add	r5, r5, r1
   1974c:	bl	111a4 <iswprint@plt>
   19750:	cmp	r0, #0
   19754:	add	r0, sp, #128	; 0x80
   19758:	moveq	r6, #0
   1975c:	bl	11144 <mbsinit@plt>
   19760:	cmp	r0, #0
   19764:	beq	19708 <__assert_fail@plt+0x8324>
   19768:	ldr	r3, [sp, #60]	; 0x3c
   1976c:	add	r9, sp, #100	; 0x64
   19770:	mov	r0, r5
   19774:	ldm	r9, {r9, sl, fp}
   19778:	eor	r2, r6, #1
   1977c:	ldr	r5, [sp, #112]	; 0x70
   19780:	and	r2, r2, r3
   19784:	uxtb	r2, r2
   19788:	ldr	r4, [sp, #116]	; 0x74
   1978c:	cmp	r0, #1
   19790:	bhi	192ac <__assert_fail@plt+0x7ec8>
   19794:	b	1929c <__assert_fail@plt+0x7eb8>
   19798:	cmp	r1, #1
   1979c:	beq	19744 <__assert_fail@plt+0x8360>
   197a0:	add	r2, r4, #1
   197a4:	add	r3, sl, r1
   197a8:	add	r2, sl, r2
   197ac:	add	r4, r3, r4
   197b0:	ldrb	r3, [r2], #1
   197b4:	sub	r3, r3, #91	; 0x5b
   197b8:	cmp	r3, #33	; 0x21
   197bc:	ldrls	pc, [pc, r3, lsl #2]
   197c0:	b	1984c <__assert_fail@plt+0x8468>
   197c4:	andeq	r9, r1, r8, asr r8
   197c8:	andeq	r9, r1, r8, asr r8
   197cc:	andeq	r9, r1, ip, asr #16
   197d0:	andeq	r9, r1, r8, asr r8
   197d4:	andeq	r9, r1, ip, asr #16
   197d8:	andeq	r9, r1, r8, asr r8
   197dc:	andeq	r9, r1, ip, asr #16
   197e0:	andeq	r9, r1, ip, asr #16
   197e4:	andeq	r9, r1, ip, asr #16
   197e8:	andeq	r9, r1, ip, asr #16
   197ec:	andeq	r9, r1, ip, asr #16
   197f0:	andeq	r9, r1, ip, asr #16
   197f4:	andeq	r9, r1, ip, asr #16
   197f8:	andeq	r9, r1, ip, asr #16
   197fc:	andeq	r9, r1, ip, asr #16
   19800:	andeq	r9, r1, ip, asr #16
   19804:	andeq	r9, r1, ip, asr #16
   19808:	andeq	r9, r1, ip, asr #16
   1980c:	andeq	r9, r1, ip, asr #16
   19810:	andeq	r9, r1, ip, asr #16
   19814:	andeq	r9, r1, ip, asr #16
   19818:	andeq	r9, r1, ip, asr #16
   1981c:	andeq	r9, r1, ip, asr #16
   19820:	andeq	r9, r1, ip, asr #16
   19824:	andeq	r9, r1, ip, asr #16
   19828:	andeq	r9, r1, ip, asr #16
   1982c:	andeq	r9, r1, ip, asr #16
   19830:	andeq	r9, r1, ip, asr #16
   19834:	andeq	r9, r1, ip, asr #16
   19838:	andeq	r9, r1, ip, asr #16
   1983c:	andeq	r9, r1, ip, asr #16
   19840:	andeq	r9, r1, ip, asr #16
   19844:	andeq	r9, r1, ip, asr #16
   19848:	andeq	r9, r1, r8, asr r8
   1984c:	cmp	r4, r2
   19850:	bne	197b0 <__assert_fail@plt+0x83cc>
   19854:	b	19744 <__assert_fail@plt+0x8360>
   19858:	mov	r3, #2
   1985c:	ldr	fp, [sp, #100]	; 0x64
   19860:	str	r3, [sp, #176]	; 0xb0
   19864:	ldr	sl, [sp, #104]	; 0x68
   19868:	b	18d2c <__assert_fail@plt+0x7948>
   1986c:	ldr	r2, [sp, #52]	; 0x34
   19870:	mov	fp, r9
   19874:	ldr	r3, [sp, #60]	; 0x3c
   19878:	and	r3, r3, r2
   1987c:	str	r3, [sp, #60]	; 0x3c
   19880:	b	18d2c <__assert_fail@plt+0x7948>
   19884:	cmp	sl, r4
   19888:	movhi	r2, fp
   1988c:	bhi	18c04 <__assert_fail@plt+0x7820>
   19890:	mov	r2, r4
   19894:	b	18c14 <__assert_fail@plt+0x7830>
   19898:	mov	r6, r3
   1989c:	mov	r5, #63	; 0x3f
   198a0:	b	18cd4 <__assert_fail@plt+0x78f0>
   198a4:	ldr	r8, [sp, #36]	; 0x24
   198a8:	ldr	r6, [sp, #100]	; 0x64
   198ac:	b	18b80 <__assert_fail@plt+0x779c>
   198b0:	mov	fp, r9
   198b4:	ldr	r8, [sp, #36]	; 0x24
   198b8:	ldr	r3, [sp, #52]	; 0x34
   198bc:	str	r3, [sp, #60]	; 0x3c
   198c0:	b	18d2c <__assert_fail@plt+0x7948>
   198c4:	ldr	r8, [sp, #36]	; 0x24
   198c8:	ldr	r6, [sp, #100]	; 0x64
   198cc:	b	18a18 <__assert_fail@plt+0x7634>
   198d0:	mov	r3, #0
   198d4:	add	r4, r4, #4
   198d8:	mov	fp, r2
   198dc:	mov	r6, r3
   198e0:	mov	r5, #48	; 0x30
   198e4:	b	18b70 <__assert_fail@plt+0x778c>
   198e8:	mov	r6, r3
   198ec:	b	1936c <__assert_fail@plt+0x7f88>
   198f0:	mov	r3, #1
   198f4:	movw	r2, #6012	; 0x177c
   198f8:	movt	r2, #2
   198fc:	mov	r4, r3
   19900:	mov	r9, sl
   19904:	str	r3, [sp, #32]
   19908:	str	sl, [sp, #44]	; 0x2c
   1990c:	str	r3, [sp, #48]	; 0x30
   19910:	str	sl, [sp, #52]	; 0x34
   19914:	str	r3, [sp, #56]	; 0x38
   19918:	str	r3, [sp, #60]	; 0x3c
   1991c:	str	sl, [sp, #64]	; 0x40
   19920:	str	sl, [sp, #68]	; 0x44
   19924:	str	r2, [sp, #72]	; 0x48
   19928:	str	sl, [sp, #80]	; 0x50
   1992c:	str	sl, [sp, #84]	; 0x54
   19930:	str	sl, [sp, #88]	; 0x58
   19934:	b	18424 <__assert_fail@plt+0x7040>
   19938:	mov	r3, #0
   1993c:	mov	r5, #48	; 0x30
   19940:	mov	r6, r3
   19944:	b	18b70 <__assert_fail@plt+0x778c>
   19948:	cmp	sl, r4
   1994c:	mov	r5, #48	; 0x30
   19950:	movhi	r3, #48	; 0x30
   19954:	strbhi	r3, [r9, r4]
   19958:	add	r3, r2, #2
   1995c:	add	r4, r2, #3
   19960:	cmp	sl, r3
   19964:	movhi	r1, #48	; 0x30
   19968:	strbhi	r1, [r9, r3]
   1996c:	mov	r3, #0
   19970:	b	18c4c <__assert_fail@plt+0x7868>
   19974:	ldr	r3, [sp, #48]	; 0x30
   19978:	str	r3, [sp, #40]	; 0x28
   1997c:	b	19258 <__assert_fail@plt+0x7e74>
   19980:	ldr	r2, [sp, #28]
   19984:	ldrb	r2, [r2, r3]
   19988:	sub	r1, r2, #33	; 0x21
   1998c:	cmp	r1, #29
   19990:	ldrls	pc, [pc, r1, lsl #2]
   19994:	b	18cd0 <__assert_fail@plt+0x78ec>
   19998:	andeq	r9, r1, r0, lsl sl
   1999c:	ldrdeq	r8, [r1], -r0
   199a0:	ldrdeq	r8, [r1], -r0
   199a4:	ldrdeq	r8, [r1], -r0
   199a8:	ldrdeq	r8, [r1], -r0
   199ac:	ldrdeq	r8, [r1], -r0
   199b0:	andeq	r9, r1, r0, lsl sl
   199b4:	andeq	r9, r1, r0, lsl sl
   199b8:	andeq	r9, r1, r0, lsl sl
   199bc:	ldrdeq	r8, [r1], -r0
   199c0:	ldrdeq	r8, [r1], -r0
   199c4:	ldrdeq	r8, [r1], -r0
   199c8:	andeq	r9, r1, r0, lsl sl
   199cc:	ldrdeq	r8, [r1], -r0
   199d0:	andeq	r9, r1, r0, lsl sl
   199d4:	ldrdeq	r8, [r1], -r0
   199d8:	ldrdeq	r8, [r1], -r0
   199dc:	ldrdeq	r8, [r1], -r0
   199e0:	ldrdeq	r8, [r1], -r0
   199e4:	ldrdeq	r8, [r1], -r0
   199e8:	ldrdeq	r8, [r1], -r0
   199ec:	ldrdeq	r8, [r1], -r0
   199f0:	ldrdeq	r8, [r1], -r0
   199f4:	ldrdeq	r8, [r1], -r0
   199f8:	ldrdeq	r8, [r1], -r0
   199fc:	ldrdeq	r8, [r1], -r0
   19a00:	ldrdeq	r8, [r1], -r0
   19a04:	andeq	r9, r1, r0, lsl sl
   19a08:	andeq	r9, r1, r0, lsl sl
   19a0c:	andeq	r9, r1, r0, lsl sl
   19a10:	ldr	r1, [sp, #44]	; 0x2c
   19a14:	cmp	r1, #0
   19a18:	bne	19c78 <__assert_fail@plt+0x8894>
   19a1c:	cmp	sl, r4
   19a20:	mov	r7, r3
   19a24:	movhi	r1, #63	; 0x3f
   19a28:	mov	r5, r2
   19a2c:	mov	r3, fp
   19a30:	strbhi	r1, [r9, r4]
   19a34:	add	r1, r4, #1
   19a38:	cmp	sl, r1
   19a3c:	movhi	r0, #34	; 0x22
   19a40:	strbhi	r0, [r9, r1]
   19a44:	add	r1, r4, #2
   19a48:	cmp	sl, r1
   19a4c:	movhi	r0, #34	; 0x22
   19a50:	strbhi	r0, [r9, r1]
   19a54:	add	r1, r4, #3
   19a58:	add	r4, r4, #4
   19a5c:	cmp	sl, r1
   19a60:	movhi	r0, #63	; 0x3f
   19a64:	strbhi	r0, [r9, r1]
   19a68:	b	18c4c <__assert_fail@plt+0x7868>
   19a6c:	mov	fp, r9
   19a70:	b	18d2c <__assert_fail@plt+0x7948>
   19a74:	ldr	r3, [sp, #188]	; 0xbc
   19a78:	ldrb	r3, [r3]
   19a7c:	cmp	r3, #0
   19a80:	beq	183bc <__assert_fail@plt+0x6fd8>
   19a84:	ldr	r2, [sp, #188]	; 0xbc
   19a88:	cmp	sl, r4
   19a8c:	bls	19aac <__assert_fail@plt+0x86c8>
   19a90:	strb	r3, [fp, r4]
   19a94:	add	r4, r4, #1
   19a98:	ldrb	r3, [r2, #1]!
   19a9c:	cmp	r3, #0
   19aa0:	beq	183bc <__assert_fail@plt+0x6fd8>
   19aa4:	cmp	sl, r4
   19aa8:	bhi	19a90 <__assert_fail@plt+0x86ac>
   19aac:	ldrb	r3, [r2, #1]!
   19ab0:	add	r4, r4, #1
   19ab4:	cmp	r3, #0
   19ab8:	bne	19a88 <__assert_fail@plt+0x86a4>
   19abc:	b	183bc <__assert_fail@plt+0x6fd8>
   19ac0:	add	r9, sp, #100	; 0x64
   19ac4:	mov	r0, r5
   19ac8:	ldr	r2, [sp, #60]	; 0x3c
   19acc:	mov	r6, #0
   19ad0:	ldm	r9, {r9, sl, fp}
   19ad4:	ldr	r5, [sp, #112]	; 0x70
   19ad8:	ldr	r4, [sp, #116]	; 0x74
   19adc:	b	1978c <__assert_fail@plt+0x83a8>
   19ae0:	cmp	r4, r8
   19ae4:	add	r9, sp, #100	; 0x64
   19ae8:	mov	r1, r4
   19aec:	mov	r2, fp
   19af0:	ldm	r9, {r9, sl, fp}
   19af4:	mov	r3, r5
   19af8:	mov	r0, r5
   19afc:	ldr	r5, [sp, #112]	; 0x70
   19b00:	ldr	r4, [sp, #116]	; 0x74
   19b04:	bcs	19b38 <__assert_fail@plt+0x8754>
   19b08:	ldrb	r6, [r2]
   19b0c:	cmp	r6, #0
   19b10:	bne	19b24 <__assert_fail@plt+0x8740>
   19b14:	b	19c70 <__assert_fail@plt+0x888c>
   19b18:	ldrb	r6, [r2, #1]!
   19b1c:	cmp	r6, #0
   19b20:	beq	19c08 <__assert_fail@plt+0x8824>
   19b24:	add	r3, r3, #1
   19b28:	add	r1, r7, r3
   19b2c:	cmp	r8, r1
   19b30:	bhi	19b18 <__assert_fail@plt+0x8734>
   19b34:	mov	r0, r3
   19b38:	mov	r6, #0
   19b3c:	ldr	r2, [sp, #60]	; 0x3c
   19b40:	b	1978c <__assert_fail@plt+0x83a8>
   19b44:	mov	r3, #1
   19b48:	mov	r4, #0
   19b4c:	mov	r9, r4
   19b50:	str	r3, [sp, #32]
   19b54:	str	r3, [sp, #44]	; 0x2c
   19b58:	str	r3, [sp, #48]	; 0x30
   19b5c:	str	r4, [sp, #52]	; 0x34
   19b60:	str	r3, [sp, #56]	; 0x38
   19b64:	str	r3, [sp, #60]	; 0x3c
   19b68:	str	r3, [sp, #88]	; 0x58
   19b6c:	movw	r3, #6012	; 0x177c
   19b70:	movt	r3, #2
   19b74:	str	r4, [sp, #64]	; 0x40
   19b78:	str	r4, [sp, #68]	; 0x44
   19b7c:	str	r3, [sp, #72]	; 0x48
   19b80:	str	r4, [sp, #80]	; 0x50
   19b84:	str	r4, [sp, #84]	; 0x54
   19b88:	b	18424 <__assert_fail@plt+0x7040>
   19b8c:	mov	fp, r9
   19b90:	b	18d40 <__assert_fail@plt+0x795c>
   19b94:	ldr	r3, [sp, #48]	; 0x30
   19b98:	b	196b4 <__assert_fail@plt+0x82d0>
   19b9c:	mov	r2, r3
   19ba0:	ldr	r3, [sp, #72]	; 0x48
   19ba4:	cmp	r3, #0
   19ba8:	moveq	r2, #0
   19bac:	andne	r2, r2, #1
   19bb0:	cmp	r2, #0
   19bb4:	beq	19be4 <__assert_fail@plt+0x8800>
   19bb8:	mov	r2, r3
   19bbc:	ldrb	r3, [r3]
   19bc0:	cmp	r3, #0
   19bc4:	beq	19be4 <__assert_fail@plt+0x8800>
   19bc8:	cmp	sl, r4
   19bcc:	bls	19bf4 <__assert_fail@plt+0x8810>
   19bd0:	strb	r3, [fp, r4]
   19bd4:	add	r4, r4, #1
   19bd8:	ldrb	r3, [r2, #1]!
   19bdc:	cmp	r3, #0
   19be0:	bne	19bc8 <__assert_fail@plt+0x87e4>
   19be4:	cmp	sl, r4
   19be8:	movhi	r3, #0
   19bec:	strbhi	r3, [fp, r4]
   19bf0:	b	18d7c <__assert_fail@plt+0x7998>
   19bf4:	ldrb	r3, [r2, #1]!
   19bf8:	add	r4, r4, #1
   19bfc:	cmp	r3, #0
   19c00:	bne	19bc8 <__assert_fail@plt+0x87e4>
   19c04:	b	19be4 <__assert_fail@plt+0x8800>
   19c08:	mov	r0, r3
   19c0c:	ldr	r2, [sp, #60]	; 0x3c
   19c10:	b	1978c <__assert_fail@plt+0x83a8>
   19c14:	mov	ip, #5
   19c18:	mov	r3, r8
   19c1c:	ldr	r1, [sp, #84]	; 0x54
   19c20:	str	ip, [sp]
   19c24:	ldr	r2, [sp, #180]	; 0xb4
   19c28:	ldr	ip, [sp, #188]	; 0xbc
   19c2c:	ldr	r0, [sp, #184]	; 0xb8
   19c30:	str	r2, [sp, #4]
   19c34:	ldr	r2, [sp, #28]
   19c38:	str	ip, [sp, #12]
   19c3c:	ldr	ip, [sp, #192]	; 0xc0
   19c40:	str	r0, [sp, #8]
   19c44:	mov	r0, fp
   19c48:	str	ip, [sp, #16]
   19c4c:	bl	18300 <__assert_fail@plt+0x6f1c>
   19c50:	mov	r4, r0
   19c54:	b	18d7c <__assert_fail@plt+0x7998>
   19c58:	mov	r6, r3
   19c5c:	str	r3, [sp, #40]	; 0x28
   19c60:	b	18cec <__assert_fail@plt+0x7908>
   19c64:	mov	r3, #2
   19c68:	str	r3, [sp, #176]	; 0xb0
   19c6c:	b	18d2c <__assert_fail@plt+0x7948>
   19c70:	ldr	r2, [sp, #60]	; 0x3c
   19c74:	b	1978c <__assert_fail@plt+0x83a8>
   19c78:	mov	r3, #5
   19c7c:	mov	fp, r9
   19c80:	str	r3, [sp, #176]	; 0xb0
   19c84:	b	18d40 <__assert_fail@plt+0x795c>
   19c88:	mov	r1, #1
   19c8c:	mov	r9, #0
   19c90:	mov	r3, r9
   19c94:	mov	r2, r9
   19c98:	str	r1, [sp, #32]
   19c9c:	str	sl, [sp, #84]	; 0x54
   19ca0:	b	18ac8 <__assert_fail@plt+0x76e4>
   19ca4:	mov	r3, #0
   19ca8:	mov	r2, #1
   19cac:	mov	r9, r3
   19cb0:	mov	r4, r3
   19cb4:	str	r2, [sp, #32]
   19cb8:	strd	r2, [sp, #44]	; 0x2c
   19cbc:	strd	r2, [sp, #56]	; 0x38
   19cc0:	str	r3, [sp, #80]	; 0x50
   19cc4:	str	r3, [sp, #84]	; 0x54
   19cc8:	str	r3, [sp, #88]	; 0x58
   19ccc:	movw	r3, #6032	; 0x1790
   19cd0:	movt	r3, #2
   19cd4:	str	r2, [sp, #52]	; 0x34
   19cd8:	str	r2, [sp, #64]	; 0x40
   19cdc:	str	r2, [sp, #68]	; 0x44
   19ce0:	str	r3, [sp, #72]	; 0x48
   19ce4:	b	18424 <__assert_fail@plt+0x7040>
   19ce8:	bl	113cc <abort@plt>
   19cec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19cf0:	mov	r4, r0
   19cf4:	mov	r5, r3
   19cf8:	strd	r6, [sp, #8]
   19cfc:	movw	r7, #8580	; 0x2184
   19d00:	movt	r7, #3
   19d04:	strd	r8, [sp, #16]
   19d08:	strd	sl, [sp, #24]
   19d0c:	mov	sl, r1
   19d10:	mov	fp, r2
   19d14:	str	lr, [sp, #32]
   19d18:	sub	sp, sp, #60	; 0x3c
   19d1c:	bl	112c4 <__errno_location@plt>
   19d20:	mov	r8, r0
   19d24:	cmn	r4, #-2147483647	; 0x80000001
   19d28:	ldr	r6, [r7]
   19d2c:	movne	r0, #0
   19d30:	moveq	r0, #1
   19d34:	ldr	r3, [r8]
   19d38:	orrs	r0, r0, r4, lsr #31
   19d3c:	str	r3, [sp, #28]
   19d40:	bne	19ed0 <__assert_fail@plt+0x8aec>
   19d44:	ldr	r3, [r7, #4]
   19d48:	cmp	r3, r4
   19d4c:	bgt	19dac <__assert_fail@plt+0x89c8>
   19d50:	add	r1, r7, #8
   19d54:	sub	r2, r4, r3
   19d58:	str	r3, [sp, #52]	; 0x34
   19d5c:	cmp	r6, r1
   19d60:	add	r2, r2, #1
   19d64:	beq	19ea8 <__assert_fail@plt+0x8ac4>
   19d68:	mov	r1, #8
   19d6c:	mov	r0, r6
   19d70:	mvn	r3, #-2147483648	; 0x80000000
   19d74:	str	r1, [sp]
   19d78:	add	r1, sp, #52	; 0x34
   19d7c:	bl	1cd0c <__assert_fail@plt+0xb928>
   19d80:	mov	r6, r0
   19d84:	str	r0, [r7]
   19d88:	ldr	r0, [r7, #4]
   19d8c:	mov	r1, #0
   19d90:	ldr	r2, [sp, #52]	; 0x34
   19d94:	sub	r2, r2, r0
   19d98:	add	r0, r6, r0, lsl #3
   19d9c:	lsl	r2, r2, #3
   19da0:	bl	112e8 <memset@plt>
   19da4:	ldr	r3, [sp, #52]	; 0x34
   19da8:	str	r3, [r7, #4]
   19dac:	ldr	r1, [r5, #4]
   19db0:	add	r0, r6, r4, lsl #3
   19db4:	add	ip, r5, #8
   19db8:	mov	r3, fp
   19dbc:	mov	r2, sl
   19dc0:	ldr	r7, [r0, #4]
   19dc4:	str	r0, [sp, #36]	; 0x24
   19dc8:	str	ip, [sp, #40]	; 0x28
   19dcc:	orr	r0, r1, #1
   19dd0:	ldr	r9, [r6, r4, lsl #3]
   19dd4:	str	ip, [sp, #8]
   19dd8:	ldr	lr, [r5, #44]	; 0x2c
   19ddc:	str	r0, [sp, #4]
   19de0:	ldr	ip, [r5]
   19de4:	mov	r1, r9
   19de8:	str	ip, [sp, #32]
   19dec:	ldr	ip, [r5, #40]	; 0x28
   19df0:	str	ip, [sp, #12]
   19df4:	ldr	ip, [sp, #32]
   19df8:	str	lr, [sp, #16]
   19dfc:	str	r0, [sp, #44]	; 0x2c
   19e00:	mov	r0, r7
   19e04:	str	ip, [sp]
   19e08:	bl	18300 <__assert_fail@plt+0x6f1c>
   19e0c:	cmp	r9, r0
   19e10:	bhi	19e80 <__assert_fail@plt+0x8a9c>
   19e14:	add	r9, r0, #1
   19e18:	movw	r3, #8884	; 0x22b4
   19e1c:	movt	r3, #3
   19e20:	cmp	r7, r3
   19e24:	str	r9, [r6, r4, lsl #3]
   19e28:	beq	19e34 <__assert_fail@plt+0x8a50>
   19e2c:	mov	r0, r7
   19e30:	bl	15ad8 <__assert_fail@plt+0x46f4>
   19e34:	mov	r0, r9
   19e38:	bl	1ca68 <__assert_fail@plt+0xb684>
   19e3c:	ldr	ip, [r5]
   19e40:	mov	r3, fp
   19e44:	mov	r2, sl
   19e48:	mov	r1, r9
   19e4c:	mov	r7, r0
   19e50:	ldr	lr, [sp, #36]	; 0x24
   19e54:	ldr	r4, [r5, #40]	; 0x28
   19e58:	str	r0, [lr, #4]
   19e5c:	ldr	lr, [r5, #44]	; 0x2c
   19e60:	str	ip, [sp]
   19e64:	ldr	ip, [sp, #44]	; 0x2c
   19e68:	str	ip, [sp, #4]
   19e6c:	ldr	ip, [sp, #40]	; 0x28
   19e70:	str	r4, [sp, #12]
   19e74:	str	lr, [sp, #16]
   19e78:	str	ip, [sp, #8]
   19e7c:	bl	18300 <__assert_fail@plt+0x6f1c>
   19e80:	ldr	r3, [sp, #28]
   19e84:	mov	r0, r7
   19e88:	str	r3, [r8]
   19e8c:	add	sp, sp, #60	; 0x3c
   19e90:	ldrd	r4, [sp]
   19e94:	ldrd	r6, [sp, #8]
   19e98:	ldrd	r8, [sp, #16]
   19e9c:	ldrd	sl, [sp, #24]
   19ea0:	add	sp, sp, #32
   19ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ea8:	mov	r1, #8
   19eac:	mvn	r3, #-2147483648	; 0x80000000
   19eb0:	str	r1, [sp]
   19eb4:	add	r1, sp, #52	; 0x34
   19eb8:	bl	1cd0c <__assert_fail@plt+0xb928>
   19ebc:	ldrd	r2, [r7, #8]
   19ec0:	mov	r6, r0
   19ec4:	str	r0, [r7]
   19ec8:	strd	r2, [r0]
   19ecc:	b	19d88 <__assert_fail@plt+0x89a4>
   19ed0:	bl	113cc <abort@plt>
   19ed4:	strd	r4, [sp, #-16]!
   19ed8:	mov	r5, r0
   19edc:	str	r6, [sp, #8]
   19ee0:	str	lr, [sp, #12]
   19ee4:	bl	112c4 <__errno_location@plt>
   19ee8:	mov	r4, r0
   19eec:	cmp	r5, #0
   19ef0:	ldr	r0, [pc, #32]	; 19f18 <__assert_fail@plt+0x8b34>
   19ef4:	mov	r1, #48	; 0x30
   19ef8:	movne	r0, r5
   19efc:	ldr	r6, [r4]
   19f00:	bl	1ceac <__assert_fail@plt+0xbac8>
   19f04:	str	r6, [r4]
   19f08:	ldrd	r4, [sp]
   19f0c:	ldr	r6, [sp, #8]
   19f10:	add	sp, sp, #12
   19f14:	pop	{pc}		; (ldr pc, [sp], #4)
   19f18:			; <UNDEFINED> instruction: 0x000323b4
   19f1c:	ldr	r3, [pc, #12]	; 19f30 <__assert_fail@plt+0x8b4c>
   19f20:	cmp	r0, #0
   19f24:	moveq	r0, r3
   19f28:	ldr	r0, [r0]
   19f2c:	bx	lr
   19f30:			; <UNDEFINED> instruction: 0x000323b4
   19f34:	ldr	r3, [pc, #12]	; 19f48 <__assert_fail@plt+0x8b64>
   19f38:	cmp	r0, #0
   19f3c:	moveq	r0, r3
   19f40:	str	r1, [r0]
   19f44:	bx	lr
   19f48:			; <UNDEFINED> instruction: 0x000323b4
   19f4c:	ldr	r3, [pc, #52]	; 19f88 <__assert_fail@plt+0x8ba4>
   19f50:	cmp	r0, #0
   19f54:	push	{lr}		; (str lr, [sp, #-4]!)
   19f58:	lsr	lr, r1, #5
   19f5c:	and	r1, r1, #31
   19f60:	moveq	r0, r3
   19f64:	add	r3, r0, #8
   19f68:	ldr	ip, [r3, lr, lsl #2]
   19f6c:	lsr	r0, ip, r1
   19f70:	eor	r2, r2, r0
   19f74:	and	r0, r0, #1
   19f78:	and	r2, r2, #1
   19f7c:	eor	r1, ip, r2, lsl r1
   19f80:	str	r1, [r3, lr, lsl #2]
   19f84:	pop	{pc}		; (ldr pc, [sp], #4)
   19f88:			; <UNDEFINED> instruction: 0x000323b4
   19f8c:	ldr	r3, [pc, #16]	; 19fa4 <__assert_fail@plt+0x8bc0>
   19f90:	cmp	r0, #0
   19f94:	movne	r3, r0
   19f98:	ldr	r0, [r3, #4]
   19f9c:	str	r1, [r3, #4]
   19fa0:	bx	lr
   19fa4:			; <UNDEFINED> instruction: 0x000323b4
   19fa8:	ldr	r3, [pc, #48]	; 19fe0 <__assert_fail@plt+0x8bfc>
   19fac:	cmp	r0, #0
   19fb0:	mov	ip, #10
   19fb4:	moveq	r0, r3
   19fb8:	cmp	r2, #0
   19fbc:	cmpne	r1, #0
   19fc0:	str	ip, [r0]
   19fc4:	beq	19fd4 <__assert_fail@plt+0x8bf0>
   19fc8:	str	r1, [r0, #40]	; 0x28
   19fcc:	str	r2, [r0, #44]	; 0x2c
   19fd0:	bx	lr
   19fd4:	str	r4, [sp, #-8]!
   19fd8:	str	lr, [sp, #4]
   19fdc:	bl	113cc <abort@plt>
   19fe0:			; <UNDEFINED> instruction: 0x000323b4
   19fe4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19fe8:	strd	r6, [sp, #8]
   19fec:	mov	r7, r0
   19ff0:	mov	r6, r1
   19ff4:	strd	r8, [sp, #16]
   19ff8:	mov	r8, r2
   19ffc:	mov	r9, r3
   1a000:	str	lr, [sp, #24]
   1a004:	sub	sp, sp, #28
   1a008:	ldr	r4, [sp, #56]	; 0x38
   1a00c:	ldr	ip, [pc, #104]	; 1a07c <__assert_fail@plt+0x8c98>
   1a010:	cmp	r4, #0
   1a014:	moveq	r4, ip
   1a018:	bl	112c4 <__errno_location@plt>
   1a01c:	ldr	ip, [r4, #44]	; 0x2c
   1a020:	mov	r5, r0
   1a024:	mov	r1, r6
   1a028:	add	lr, r4, #8
   1a02c:	mov	r3, r9
   1a030:	ldr	r6, [r5]
   1a034:	mov	r2, r8
   1a038:	mov	r0, r7
   1a03c:	str	ip, [sp, #16]
   1a040:	ldr	ip, [r4, #40]	; 0x28
   1a044:	str	lr, [sp, #8]
   1a048:	str	ip, [sp, #12]
   1a04c:	ldr	ip, [r4, #4]
   1a050:	str	ip, [sp, #4]
   1a054:	ldr	ip, [r4]
   1a058:	str	ip, [sp]
   1a05c:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a060:	str	r6, [r5]
   1a064:	add	sp, sp, #28
   1a068:	ldrd	r4, [sp]
   1a06c:	ldrd	r6, [sp, #8]
   1a070:	ldrd	r8, [sp, #16]
   1a074:	add	sp, sp, #24
   1a078:	pop	{pc}		; (ldr pc, [sp], #4)
   1a07c:			; <UNDEFINED> instruction: 0x000323b4
   1a080:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a084:	cmp	r2, #0
   1a088:	ldr	r4, [pc, #192]	; 1a150 <__assert_fail@plt+0x8d6c>
   1a08c:	movne	r4, r2
   1a090:	strd	r6, [sp, #8]
   1a094:	strd	r8, [sp, #16]
   1a098:	mov	r9, r1
   1a09c:	mov	r8, r0
   1a0a0:	strd	sl, [sp, #24]
   1a0a4:	str	lr, [sp, #32]
   1a0a8:	sub	sp, sp, #36	; 0x24
   1a0ac:	bl	112c4 <__errno_location@plt>
   1a0b0:	ldr	r5, [r4, #4]
   1a0b4:	mov	r6, r0
   1a0b8:	add	r7, r4, #8
   1a0bc:	mov	r1, #0
   1a0c0:	mov	r3, r9
   1a0c4:	ldr	ip, [r4, #44]	; 0x2c
   1a0c8:	mov	r2, r8
   1a0cc:	mov	r0, r1
   1a0d0:	ldr	sl, [r6]
   1a0d4:	orr	r5, r5, #1
   1a0d8:	str	ip, [sp, #16]
   1a0dc:	ldr	ip, [r4, #40]	; 0x28
   1a0e0:	stmib	sp, {r5, r7, ip}
   1a0e4:	ldr	ip, [r4]
   1a0e8:	str	ip, [sp]
   1a0ec:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a0f0:	add	r1, r0, #1
   1a0f4:	mov	r0, r1
   1a0f8:	str	r1, [sp, #28]
   1a0fc:	bl	1ca68 <__assert_fail@plt+0xb684>
   1a100:	ldr	ip, [r4, #44]	; 0x2c
   1a104:	mov	fp, r0
   1a108:	mov	r3, r9
   1a10c:	mov	r2, r8
   1a110:	ldr	r1, [sp, #28]
   1a114:	str	ip, [sp, #16]
   1a118:	ldr	ip, [r4, #40]	; 0x28
   1a11c:	stmib	sp, {r5, r7, ip}
   1a120:	ldr	ip, [r4]
   1a124:	str	ip, [sp]
   1a128:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a12c:	mov	r0, fp
   1a130:	str	sl, [r6]
   1a134:	add	sp, sp, #36	; 0x24
   1a138:	ldrd	r4, [sp]
   1a13c:	ldrd	r6, [sp, #8]
   1a140:	ldrd	r8, [sp, #16]
   1a144:	ldrd	sl, [sp, #24]
   1a148:	add	sp, sp, #32
   1a14c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a150:			; <UNDEFINED> instruction: 0x000323b4
   1a154:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a158:	cmp	r3, #0
   1a15c:	ldr	r4, [pc, #220]	; 1a240 <__assert_fail@plt+0x8e5c>
   1a160:	movne	r4, r3
   1a164:	strd	r6, [sp, #8]
   1a168:	mov	r6, r2
   1a16c:	strd	r8, [sp, #16]
   1a170:	mov	r9, r0
   1a174:	strd	sl, [sp, #24]
   1a178:	mov	sl, r1
   1a17c:	str	lr, [sp, #32]
   1a180:	sub	sp, sp, #44	; 0x2c
   1a184:	bl	112c4 <__errno_location@plt>
   1a188:	ldr	r5, [r4, #4]
   1a18c:	mov	r7, r0
   1a190:	mov	r1, #0
   1a194:	add	r8, r4, #8
   1a198:	mov	r3, sl
   1a19c:	ldr	ip, [r4, #44]	; 0x2c
   1a1a0:	mov	r2, r9
   1a1a4:	mov	r0, r1
   1a1a8:	ldr	lr, [r7]
   1a1ac:	cmp	r6, r1
   1a1b0:	orreq	r5, r5, #1
   1a1b4:	str	ip, [sp, #16]
   1a1b8:	ldr	ip, [r4, #40]	; 0x28
   1a1bc:	stmib	sp, {r5, r8, ip}
   1a1c0:	ldr	ip, [r4]
   1a1c4:	str	lr, [sp, #28]
   1a1c8:	str	ip, [sp]
   1a1cc:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a1d0:	add	r1, r0, #1
   1a1d4:	mov	fp, r0
   1a1d8:	mov	r0, r1
   1a1dc:	str	r1, [sp, #36]	; 0x24
   1a1e0:	bl	1ca68 <__assert_fail@plt+0xb684>
   1a1e4:	ldr	ip, [r4, #44]	; 0x2c
   1a1e8:	mov	r3, sl
   1a1ec:	mov	r2, r9
   1a1f0:	ldr	r1, [sp, #36]	; 0x24
   1a1f4:	str	ip, [sp, #16]
   1a1f8:	ldr	ip, [r4, #40]	; 0x28
   1a1fc:	str	r0, [sp, #32]
   1a200:	stmib	sp, {r5, r8, ip}
   1a204:	ldr	ip, [r4]
   1a208:	str	ip, [sp]
   1a20c:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a210:	ldr	lr, [sp, #28]
   1a214:	cmp	r6, #0
   1a218:	ldr	r0, [sp, #32]
   1a21c:	str	lr, [r7]
   1a220:	strne	fp, [r6]
   1a224:	add	sp, sp, #44	; 0x2c
   1a228:	ldrd	r4, [sp]
   1a22c:	ldrd	r6, [sp, #8]
   1a230:	ldrd	r8, [sp, #16]
   1a234:	ldrd	sl, [sp, #24]
   1a238:	add	sp, sp, #32
   1a23c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a240:			; <UNDEFINED> instruction: 0x000323b4
   1a244:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a248:	movw	r5, #8580	; 0x2184
   1a24c:	movt	r5, #3
   1a250:	ldr	r3, [r5, #4]
   1a254:	strd	r6, [sp, #8]
   1a258:	str	r8, [sp, #16]
   1a25c:	str	lr, [sp, #20]
   1a260:	ldr	r7, [r5]
   1a264:	cmp	r3, #1
   1a268:	ble	1a28c <__assert_fail@plt+0x8ea8>
   1a26c:	mov	r4, #1
   1a270:	add	r6, r7, #4
   1a274:	ldr	r0, [r6, r4, lsl #3]
   1a278:	add	r4, r4, #1
   1a27c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1a280:	ldr	r3, [r5, #4]
   1a284:	cmp	r3, r4
   1a288:	bgt	1a274 <__assert_fail@plt+0x8e90>
   1a28c:	ldr	r0, [r7, #4]
   1a290:	movw	r4, #8884	; 0x22b4
   1a294:	movt	r4, #3
   1a298:	cmp	r0, r4
   1a29c:	beq	1a2b0 <__assert_fail@plt+0x8ecc>
   1a2a0:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1a2a4:	mov	r3, #256	; 0x100
   1a2a8:	str	r3, [r5, #8]
   1a2ac:	str	r4, [r5, #12]
   1a2b0:	ldr	r4, [pc, #44]	; 1a2e4 <__assert_fail@plt+0x8f00>
   1a2b4:	cmp	r7, r4
   1a2b8:	beq	1a2c8 <__assert_fail@plt+0x8ee4>
   1a2bc:	mov	r0, r7
   1a2c0:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1a2c4:	str	r4, [r5]
   1a2c8:	mov	r3, #1
   1a2cc:	ldrd	r6, [sp, #8]
   1a2d0:	str	r3, [r5, #4]
   1a2d4:	ldrd	r4, [sp]
   1a2d8:	ldr	r8, [sp, #16]
   1a2dc:	add	sp, sp, #20
   1a2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e4:	andeq	r2, r3, ip, lsl #3
   1a2e8:	ldr	r3, [pc, #4]	; 1a2f4 <__assert_fail@plt+0x8f10>
   1a2ec:	mvn	r2, #0
   1a2f0:	b	19cec <__assert_fail@plt+0x8908>
   1a2f4:			; <UNDEFINED> instruction: 0x000323b4
   1a2f8:	ldr	r3, [pc]	; 1a300 <__assert_fail@plt+0x8f1c>
   1a2fc:	b	19cec <__assert_fail@plt+0x8908>
   1a300:			; <UNDEFINED> instruction: 0x000323b4
   1a304:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a308:	movw	r4, #8580	; 0x2184
   1a30c:	movt	r4, #3
   1a310:	strd	r6, [sp, #8]
   1a314:	strd	r8, [sp, #16]
   1a318:	strd	sl, [sp, #24]
   1a31c:	mov	sl, r0
   1a320:	str	lr, [sp, #32]
   1a324:	sub	sp, sp, #44	; 0x2c
   1a328:	bl	112c4 <__errno_location@plt>
   1a32c:	ldr	r3, [r0]
   1a330:	mov	r8, r0
   1a334:	ldr	r2, [r4, #4]
   1a338:	ldr	r5, [r4]
   1a33c:	str	r3, [sp, #28]
   1a340:	cmp	r2, #0
   1a344:	bgt	1a3a0 <__assert_fail@plt+0x8fbc>
   1a348:	add	r3, r4, #8
   1a34c:	str	r2, [sp, #36]	; 0x24
   1a350:	rsb	r2, r2, #1
   1a354:	cmp	r5, r3
   1a358:	beq	1a46c <__assert_fail@plt+0x9088>
   1a35c:	mov	r1, #8
   1a360:	mov	r0, r5
   1a364:	mvn	r3, #-2147483648	; 0x80000000
   1a368:	str	r1, [sp]
   1a36c:	add	r1, sp, #36	; 0x24
   1a370:	bl	1cd0c <__assert_fail@plt+0xb928>
   1a374:	mov	r5, r0
   1a378:	str	r0, [r4]
   1a37c:	ldr	r0, [r4, #4]
   1a380:	mov	r1, #0
   1a384:	ldr	r2, [sp, #36]	; 0x24
   1a388:	sub	r2, r2, r0
   1a38c:	add	r0, r5, r0, lsl #3
   1a390:	lsl	r2, r2, #3
   1a394:	bl	112e8 <memset@plt>
   1a398:	ldr	r3, [sp, #36]	; 0x24
   1a39c:	str	r3, [r4, #4]
   1a3a0:	movw	r4, #8884	; 0x22b4
   1a3a4:	movt	r4, #3
   1a3a8:	ldr	r9, [r5]
   1a3ac:	add	fp, r4, #264	; 0x108
   1a3b0:	mvn	r3, #0
   1a3b4:	ldr	r7, [r4, #260]	; 0x104
   1a3b8:	mov	r2, sl
   1a3bc:	ldr	r6, [r5, #4]
   1a3c0:	str	fp, [sp, #8]
   1a3c4:	mov	r1, r9
   1a3c8:	ldr	ip, [r4, #256]	; 0x100
   1a3cc:	orr	r7, r7, #1
   1a3d0:	ldr	lr, [r4, #300]	; 0x12c
   1a3d4:	mov	r0, r6
   1a3d8:	str	ip, [sp]
   1a3dc:	str	r7, [sp, #4]
   1a3e0:	str	lr, [sp, #16]
   1a3e4:	ldr	ip, [r4, #296]	; 0x128
   1a3e8:	str	ip, [sp, #12]
   1a3ec:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a3f0:	cmp	r9, r0
   1a3f4:	bhi	1a444 <__assert_fail@plt+0x9060>
   1a3f8:	add	r9, r0, #1
   1a3fc:	cmp	r6, r4
   1a400:	str	r9, [r5]
   1a404:	beq	1a410 <__assert_fail@plt+0x902c>
   1a408:	mov	r0, r6
   1a40c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1a410:	mov	r0, r9
   1a414:	bl	1ca68 <__assert_fail@plt+0xb684>
   1a418:	ldr	r3, [r4, #256]	; 0x100
   1a41c:	mov	r2, sl
   1a420:	mov	r1, r9
   1a424:	mov	r6, r0
   1a428:	ldr	lr, [r4, #296]	; 0x128
   1a42c:	ldr	ip, [r4, #300]	; 0x12c
   1a430:	str	r0, [r5, #4]
   1a434:	stm	sp, {r3, r7, fp, lr}
   1a438:	mvn	r3, #0
   1a43c:	str	ip, [sp, #16]
   1a440:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a444:	ldr	r3, [sp, #28]
   1a448:	mov	r0, r6
   1a44c:	str	r3, [r8]
   1a450:	add	sp, sp, #44	; 0x2c
   1a454:	ldrd	r4, [sp]
   1a458:	ldrd	r6, [sp, #8]
   1a45c:	ldrd	r8, [sp, #16]
   1a460:	ldrd	sl, [sp, #24]
   1a464:	add	sp, sp, #32
   1a468:	pop	{pc}		; (ldr pc, [sp], #4)
   1a46c:	mov	r0, #8
   1a470:	mvn	r3, #-2147483648	; 0x80000000
   1a474:	add	r1, sp, #36	; 0x24
   1a478:	str	r0, [sp]
   1a47c:	mov	r0, #0
   1a480:	bl	1cd0c <__assert_fail@plt+0xb928>
   1a484:	ldrd	r2, [r4, #8]
   1a488:	mov	r5, r0
   1a48c:	str	r0, [r4]
   1a490:	strd	r2, [r0]
   1a494:	b	1a37c <__assert_fail@plt+0x8f98>
   1a498:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a49c:	movw	r4, #8580	; 0x2184
   1a4a0:	movt	r4, #3
   1a4a4:	strd	r6, [sp, #8]
   1a4a8:	strd	r8, [sp, #16]
   1a4ac:	strd	sl, [sp, #24]
   1a4b0:	mov	sl, r0
   1a4b4:	mov	fp, r1
   1a4b8:	str	lr, [sp, #32]
   1a4bc:	sub	sp, sp, #44	; 0x2c
   1a4c0:	bl	112c4 <__errno_location@plt>
   1a4c4:	ldr	r3, [r0]
   1a4c8:	mov	r8, r0
   1a4cc:	ldr	r2, [r4, #4]
   1a4d0:	ldr	r5, [r4]
   1a4d4:	str	r3, [sp, #28]
   1a4d8:	cmp	r2, #0
   1a4dc:	bgt	1a538 <__assert_fail@plt+0x9154>
   1a4e0:	add	r3, r4, #8
   1a4e4:	str	r2, [sp, #36]	; 0x24
   1a4e8:	rsb	r2, r2, #1
   1a4ec:	cmp	r5, r3
   1a4f0:	beq	1a614 <__assert_fail@plt+0x9230>
   1a4f4:	mov	r1, #8
   1a4f8:	mov	r0, r5
   1a4fc:	mvn	r3, #-2147483648	; 0x80000000
   1a500:	str	r1, [sp]
   1a504:	add	r1, sp, #36	; 0x24
   1a508:	bl	1cd0c <__assert_fail@plt+0xb928>
   1a50c:	mov	r5, r0
   1a510:	str	r0, [r4]
   1a514:	ldr	r0, [r4, #4]
   1a518:	mov	r1, #0
   1a51c:	ldr	r2, [sp, #36]	; 0x24
   1a520:	sub	r2, r2, r0
   1a524:	add	r0, r5, r0, lsl #3
   1a528:	lsl	r2, r2, #3
   1a52c:	bl	112e8 <memset@plt>
   1a530:	ldr	r3, [sp, #36]	; 0x24
   1a534:	str	r3, [r4, #4]
   1a538:	movw	r4, #8884	; 0x22b4
   1a53c:	movt	r4, #3
   1a540:	ldr	r9, [r5]
   1a544:	add	r0, r4, #264	; 0x108
   1a548:	mov	r3, fp
   1a54c:	ldr	r7, [r4, #260]	; 0x104
   1a550:	mov	r2, sl
   1a554:	ldr	r6, [r5, #4]
   1a558:	str	r0, [sp, #8]
   1a55c:	mov	r1, r9
   1a560:	ldr	ip, [r4, #256]	; 0x100
   1a564:	orr	r7, r7, #1
   1a568:	ldr	lr, [r4, #300]	; 0x12c
   1a56c:	mov	r0, r6
   1a570:	str	ip, [sp]
   1a574:	str	r7, [sp, #4]
   1a578:	str	lr, [sp, #16]
   1a57c:	ldr	ip, [r4, #296]	; 0x128
   1a580:	str	ip, [sp, #12]
   1a584:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a588:	cmp	r9, r0
   1a58c:	bhi	1a5ec <__assert_fail@plt+0x9208>
   1a590:	add	r9, r0, #1
   1a594:	cmp	r6, r4
   1a598:	str	r9, [r5]
   1a59c:	beq	1a5a8 <__assert_fail@plt+0x91c4>
   1a5a0:	mov	r0, r6
   1a5a4:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1a5a8:	mov	r0, r9
   1a5ac:	bl	1ca68 <__assert_fail@plt+0xb684>
   1a5b0:	ldr	ip, [r4, #256]	; 0x100
   1a5b4:	mov	r1, r9
   1a5b8:	mov	r3, fp
   1a5bc:	mov	r2, sl
   1a5c0:	mov	r6, r0
   1a5c4:	ldr	r9, [r4, #296]	; 0x128
   1a5c8:	ldr	lr, [r4, #300]	; 0x12c
   1a5cc:	str	r0, [r5, #4]
   1a5d0:	str	ip, [sp]
   1a5d4:	ldr	ip, [pc, #100]	; 1a640 <__assert_fail@plt+0x925c>
   1a5d8:	str	r7, [sp, #4]
   1a5dc:	str	ip, [sp, #8]
   1a5e0:	str	r9, [sp, #12]
   1a5e4:	str	lr, [sp, #16]
   1a5e8:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a5ec:	ldr	r3, [sp, #28]
   1a5f0:	mov	r0, r6
   1a5f4:	str	r3, [r8]
   1a5f8:	add	sp, sp, #44	; 0x2c
   1a5fc:	ldrd	r4, [sp]
   1a600:	ldrd	r6, [sp, #8]
   1a604:	ldrd	r8, [sp, #16]
   1a608:	ldrd	sl, [sp, #24]
   1a60c:	add	sp, sp, #32
   1a610:	pop	{pc}		; (ldr pc, [sp], #4)
   1a614:	mov	r0, #8
   1a618:	mvn	r3, #-2147483648	; 0x80000000
   1a61c:	add	r1, sp, #36	; 0x24
   1a620:	str	r0, [sp]
   1a624:	mov	r0, #0
   1a628:	bl	1cd0c <__assert_fail@plt+0xb928>
   1a62c:	ldrd	r2, [r4, #8]
   1a630:	mov	r5, r0
   1a634:	str	r0, [r4]
   1a638:	strd	r2, [r0]
   1a63c:	b	1a514 <__assert_fail@plt+0x9130>
   1a640:			; <UNDEFINED> instruction: 0x000323bc
   1a644:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a648:	mov	r4, #0
   1a64c:	mov	r5, #0
   1a650:	strd	r6, [sp, #8]
   1a654:	cmp	r1, #10
   1a658:	str	lr, [sp, #16]
   1a65c:	sub	sp, sp, #100	; 0x64
   1a660:	strd	r4, [sp, #48]	; 0x30
   1a664:	beq	1a6ac <__assert_fail@plt+0x92c8>
   1a668:	mov	r3, sp
   1a66c:	strd	r4, [sp, #8]
   1a670:	str	r1, [sp, #48]	; 0x30
   1a674:	mov	r1, r2
   1a678:	mvn	r2, #0
   1a67c:	ldrd	r6, [sp, #48]	; 0x30
   1a680:	strd	r6, [sp]
   1a684:	strd	r4, [sp, #16]
   1a688:	strd	r4, [sp, #24]
   1a68c:	strd	r4, [sp, #32]
   1a690:	strd	r4, [sp, #40]	; 0x28
   1a694:	bl	19cec <__assert_fail@plt+0x8908>
   1a698:	add	sp, sp, #100	; 0x64
   1a69c:	ldrd	r4, [sp]
   1a6a0:	ldrd	r6, [sp, #8]
   1a6a4:	add	sp, sp, #16
   1a6a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6ac:	bl	113cc <abort@plt>
   1a6b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a6b4:	mov	r4, #0
   1a6b8:	mov	r5, #0
   1a6bc:	strd	r6, [sp, #8]
   1a6c0:	cmp	r1, #10
   1a6c4:	str	lr, [sp, #16]
   1a6c8:	sub	sp, sp, #100	; 0x64
   1a6cc:	strd	r4, [sp, #48]	; 0x30
   1a6d0:	beq	1a71c <__assert_fail@plt+0x9338>
   1a6d4:	mov	ip, r2
   1a6d8:	mov	r2, r3
   1a6dc:	strd	r4, [sp, #8]
   1a6e0:	str	r1, [sp, #48]	; 0x30
   1a6e4:	mov	r3, sp
   1a6e8:	mov	r1, ip
   1a6ec:	ldrd	r6, [sp, #48]	; 0x30
   1a6f0:	strd	r6, [sp]
   1a6f4:	strd	r4, [sp, #16]
   1a6f8:	strd	r4, [sp, #24]
   1a6fc:	strd	r4, [sp, #32]
   1a700:	strd	r4, [sp, #40]	; 0x28
   1a704:	bl	19cec <__assert_fail@plt+0x8908>
   1a708:	add	sp, sp, #100	; 0x64
   1a70c:	ldrd	r4, [sp]
   1a710:	ldrd	r6, [sp, #8]
   1a714:	add	sp, sp, #16
   1a718:	pop	{pc}		; (ldr pc, [sp], #4)
   1a71c:	bl	113cc <abort@plt>
   1a720:	mov	r2, #0
   1a724:	mov	r3, #0
   1a728:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a72c:	strd	r6, [sp, #8]
   1a730:	cmp	r0, #10
   1a734:	strd	r8, [sp, #16]
   1a738:	strd	sl, [sp, #24]
   1a73c:	str	lr, [sp, #32]
   1a740:	sub	sp, sp, #124	; 0x7c
   1a744:	strd	r2, [sp, #72]	; 0x48
   1a748:	strd	r2, [sp, #80]	; 0x50
   1a74c:	strd	r2, [sp, #88]	; 0x58
   1a750:	strd	r2, [sp, #96]	; 0x60
   1a754:	strd	r2, [sp, #104]	; 0x68
   1a758:	strd	r2, [sp, #112]	; 0x70
   1a75c:	beq	1a900 <__assert_fail@plt+0x951c>
   1a760:	mov	r6, r1
   1a764:	movw	r4, #8580	; 0x2184
   1a768:	movt	r4, #3
   1a76c:	str	r0, [sp, #72]	; 0x48
   1a770:	ldrd	r0, [sp, #72]	; 0x48
   1a774:	strd	r0, [sp, #24]
   1a778:	strd	r2, [sp, #32]
   1a77c:	strd	r2, [sp, #40]	; 0x28
   1a780:	strd	r2, [sp, #48]	; 0x30
   1a784:	strd	r2, [sp, #56]	; 0x38
   1a788:	strd	r2, [sp, #64]	; 0x40
   1a78c:	bl	112c4 <__errno_location@plt>
   1a790:	mov	r8, r0
   1a794:	ldr	r5, [r4]
   1a798:	ldr	r2, [r4, #4]
   1a79c:	ldr	r9, [r0]
   1a7a0:	cmp	r2, #0
   1a7a4:	bgt	1a800 <__assert_fail@plt+0x941c>
   1a7a8:	add	r3, r4, #8
   1a7ac:	str	r2, [sp, #72]	; 0x48
   1a7b0:	rsb	r2, r2, #1
   1a7b4:	cmp	r5, r3
   1a7b8:	beq	1a8d4 <__assert_fail@plt+0x94f0>
   1a7bc:	mov	r3, #8
   1a7c0:	mov	r0, r5
   1a7c4:	add	r1, sp, #72	; 0x48
   1a7c8:	str	r3, [sp]
   1a7cc:	mvn	r3, #-2147483648	; 0x80000000
   1a7d0:	bl	1cd0c <__assert_fail@plt+0xb928>
   1a7d4:	mov	r5, r0
   1a7d8:	str	r0, [r4]
   1a7dc:	ldr	r0, [r4, #4]
   1a7e0:	mov	r1, #0
   1a7e4:	ldr	r2, [sp, #72]	; 0x48
   1a7e8:	sub	r2, r2, r0
   1a7ec:	add	r0, r5, r0, lsl #3
   1a7f0:	lsl	r2, r2, #3
   1a7f4:	bl	112e8 <memset@plt>
   1a7f8:	ldr	r3, [sp, #72]	; 0x48
   1a7fc:	str	r3, [r4, #4]
   1a800:	ldr	sl, [r5]
   1a804:	add	r0, sp, #32
   1a808:	mvn	r3, #0
   1a80c:	mov	r2, r6
   1a810:	ldr	r7, [sp, #28]
   1a814:	ldr	r4, [r5, #4]
   1a818:	mov	r1, sl
   1a81c:	str	r0, [sp, #8]
   1a820:	ldr	lr, [sp, #24]
   1a824:	orr	r7, r7, #1
   1a828:	ldr	ip, [sp, #64]	; 0x40
   1a82c:	mov	r0, r4
   1a830:	ldr	fp, [sp, #68]	; 0x44
   1a834:	str	lr, [sp]
   1a838:	str	r7, [sp, #4]
   1a83c:	str	ip, [sp, #12]
   1a840:	str	fp, [sp, #16]
   1a844:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a848:	cmp	sl, r0
   1a84c:	bhi	1a8b0 <__assert_fail@plt+0x94cc>
   1a850:	add	sl, r0, #1
   1a854:	movw	r3, #8884	; 0x22b4
   1a858:	movt	r3, #3
   1a85c:	cmp	r4, r3
   1a860:	str	sl, [r5]
   1a864:	beq	1a870 <__assert_fail@plt+0x948c>
   1a868:	mov	r0, r4
   1a86c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1a870:	mov	r0, sl
   1a874:	bl	1ca68 <__assert_fail@plt+0xb684>
   1a878:	ldr	r3, [sp, #24]
   1a87c:	mov	r2, r6
   1a880:	mov	r1, sl
   1a884:	mov	r4, r0
   1a888:	ldr	lr, [sp, #64]	; 0x40
   1a88c:	ldr	ip, [sp, #68]	; 0x44
   1a890:	str	r0, [r5, #4]
   1a894:	add	r5, sp, #32
   1a898:	stm	sp, {r3, r7}
   1a89c:	mvn	r3, #0
   1a8a0:	str	r5, [sp, #8]
   1a8a4:	str	lr, [sp, #12]
   1a8a8:	str	ip, [sp, #16]
   1a8ac:	bl	18300 <__assert_fail@plt+0x6f1c>
   1a8b0:	mov	r0, r4
   1a8b4:	str	r9, [r8]
   1a8b8:	add	sp, sp, #124	; 0x7c
   1a8bc:	ldrd	r4, [sp]
   1a8c0:	ldrd	r6, [sp, #8]
   1a8c4:	ldrd	r8, [sp, #16]
   1a8c8:	ldrd	sl, [sp, #24]
   1a8cc:	add	sp, sp, #32
   1a8d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8d4:	mov	r0, #8
   1a8d8:	mvn	r3, #-2147483648	; 0x80000000
   1a8dc:	add	r1, sp, #72	; 0x48
   1a8e0:	str	r0, [sp]
   1a8e4:	mov	r0, #0
   1a8e8:	bl	1cd0c <__assert_fail@plt+0xb928>
   1a8ec:	ldrd	r2, [r4, #8]
   1a8f0:	mov	r5, r0
   1a8f4:	str	r0, [r4]
   1a8f8:	strd	r2, [r0]
   1a8fc:	b	1a7dc <__assert_fail@plt+0x93f8>
   1a900:	bl	113cc <abort@plt>
   1a904:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a908:	cmp	r0, #10
   1a90c:	strd	r6, [sp, #8]
   1a910:	mov	r6, #0
   1a914:	mov	r7, #0
   1a918:	strd	r8, [sp, #16]
   1a91c:	strd	sl, [sp, #24]
   1a920:	str	lr, [sp, #32]
   1a924:	sub	sp, sp, #124	; 0x7c
   1a928:	strd	r6, [sp, #72]	; 0x48
   1a92c:	strd	r6, [sp, #80]	; 0x50
   1a930:	strd	r6, [sp, #88]	; 0x58
   1a934:	strd	r6, [sp, #96]	; 0x60
   1a938:	strd	r6, [sp, #104]	; 0x68
   1a93c:	strd	r6, [sp, #112]	; 0x70
   1a940:	beq	1aaec <__assert_fail@plt+0x9708>
   1a944:	mov	sl, r2
   1a948:	movw	r5, #8580	; 0x2184
   1a94c:	movt	r5, #3
   1a950:	str	r0, [sp, #72]	; 0x48
   1a954:	mov	r9, r1
   1a958:	ldrd	r2, [sp, #72]	; 0x48
   1a95c:	strd	r2, [sp, #24]
   1a960:	strd	r6, [sp, #32]
   1a964:	strd	r6, [sp, #40]	; 0x28
   1a968:	strd	r6, [sp, #48]	; 0x30
   1a96c:	strd	r6, [sp, #56]	; 0x38
   1a970:	strd	r6, [sp, #64]	; 0x40
   1a974:	bl	112c4 <__errno_location@plt>
   1a978:	mov	r7, r0
   1a97c:	ldr	r4, [r5]
   1a980:	ldr	r2, [r5, #4]
   1a984:	ldr	fp, [r0]
   1a988:	cmp	r2, #0
   1a98c:	bgt	1a9e8 <__assert_fail@plt+0x9604>
   1a990:	add	r3, r5, #8
   1a994:	str	r2, [sp, #72]	; 0x48
   1a998:	rsb	r2, r2, #1
   1a99c:	cmp	r4, r3
   1a9a0:	beq	1aac0 <__assert_fail@plt+0x96dc>
   1a9a4:	mov	r3, #8
   1a9a8:	mov	r0, r4
   1a9ac:	add	r1, sp, #72	; 0x48
   1a9b0:	str	r3, [sp]
   1a9b4:	mvn	r3, #-2147483648	; 0x80000000
   1a9b8:	bl	1cd0c <__assert_fail@plt+0xb928>
   1a9bc:	mov	r4, r0
   1a9c0:	str	r0, [r5]
   1a9c4:	ldr	r0, [r5, #4]
   1a9c8:	mov	r1, #0
   1a9cc:	ldr	r2, [sp, #72]	; 0x48
   1a9d0:	sub	r2, r2, r0
   1a9d4:	add	r0, r4, r0, lsl #3
   1a9d8:	lsl	r2, r2, #3
   1a9dc:	bl	112e8 <memset@plt>
   1a9e0:	ldr	r3, [sp, #72]	; 0x48
   1a9e4:	str	r3, [r5, #4]
   1a9e8:	ldr	ip, [sp, #24]
   1a9ec:	add	r0, sp, #32
   1a9f0:	mov	r3, sl
   1a9f4:	mov	r2, r9
   1a9f8:	ldr	r6, [sp, #28]
   1a9fc:	ldr	r8, [r4]
   1aa00:	ldr	r5, [r4, #4]
   1aa04:	str	ip, [sp]
   1aa08:	orr	r6, r6, #1
   1aa0c:	ldr	ip, [sp, #64]	; 0x40
   1aa10:	mov	r1, r8
   1aa14:	str	r6, [sp, #4]
   1aa18:	ldr	lr, [sp, #68]	; 0x44
   1aa1c:	str	r0, [sp, #8]
   1aa20:	mov	r0, r5
   1aa24:	str	ip, [sp, #12]
   1aa28:	str	lr, [sp, #16]
   1aa2c:	bl	18300 <__assert_fail@plt+0x6f1c>
   1aa30:	cmp	r8, r0
   1aa34:	bhi	1aa9c <__assert_fail@plt+0x96b8>
   1aa38:	add	r8, r0, #1
   1aa3c:	movw	r3, #8884	; 0x22b4
   1aa40:	movt	r3, #3
   1aa44:	cmp	r5, r3
   1aa48:	str	r8, [r4]
   1aa4c:	beq	1aa58 <__assert_fail@plt+0x9674>
   1aa50:	mov	r0, r5
   1aa54:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1aa58:	mov	r0, r8
   1aa5c:	bl	1ca68 <__assert_fail@plt+0xb684>
   1aa60:	ldr	lr, [sp, #24]
   1aa64:	mov	r1, r8
   1aa68:	mov	r3, sl
   1aa6c:	mov	r2, r9
   1aa70:	mov	r5, r0
   1aa74:	ldr	r8, [sp, #64]	; 0x40
   1aa78:	ldr	ip, [sp, #68]	; 0x44
   1aa7c:	str	r0, [r4, #4]
   1aa80:	str	lr, [sp]
   1aa84:	add	lr, sp, #32
   1aa88:	str	r6, [sp, #4]
   1aa8c:	str	lr, [sp, #8]
   1aa90:	str	r8, [sp, #12]
   1aa94:	str	ip, [sp, #16]
   1aa98:	bl	18300 <__assert_fail@plt+0x6f1c>
   1aa9c:	mov	r0, r5
   1aaa0:	str	fp, [r7]
   1aaa4:	add	sp, sp, #124	; 0x7c
   1aaa8:	ldrd	r4, [sp]
   1aaac:	ldrd	r6, [sp, #8]
   1aab0:	ldrd	r8, [sp, #16]
   1aab4:	ldrd	sl, [sp, #24]
   1aab8:	add	sp, sp, #32
   1aabc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aac0:	mov	r0, #8
   1aac4:	mvn	r3, #-2147483648	; 0x80000000
   1aac8:	add	r1, sp, #72	; 0x48
   1aacc:	str	r0, [sp]
   1aad0:	mov	r0, #0
   1aad4:	bl	1cd0c <__assert_fail@plt+0xb928>
   1aad8:	ldrd	r2, [r5, #8]
   1aadc:	mov	r4, r0
   1aae0:	str	r0, [r5]
   1aae4:	strd	r2, [r0]
   1aae8:	b	1a9c4 <__assert_fail@plt+0x95e0>
   1aaec:	bl	113cc <abort@plt>
   1aaf0:	ldr	r3, [pc, #492]	; 1ace4 <__assert_fail@plt+0x9900>
   1aaf4:	lsr	ip, r2, #5
   1aaf8:	and	r2, r2, #31
   1aafc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ab00:	movw	r5, #8580	; 0x2184
   1ab04:	movt	r5, #3
   1ab08:	strd	r6, [sp, #8]
   1ab0c:	strd	r8, [sp, #16]
   1ab10:	strd	sl, [sp, #24]
   1ab14:	mov	sl, r0
   1ab18:	mov	fp, r1
   1ab1c:	ldrd	r0, [r3]
   1ab20:	str	lr, [sp, #32]
   1ab24:	sub	sp, sp, #92	; 0x5c
   1ab28:	ldrd	r8, [r3, #8]
   1ab2c:	add	r6, sp, #48	; 0x30
   1ab30:	strd	r0, [sp, #40]	; 0x28
   1ab34:	ldrd	r0, [r3, #16]
   1ab38:	strd	r8, [sp, #48]	; 0x30
   1ab3c:	ldrd	r8, [r3, #24]
   1ab40:	strd	r0, [sp, #56]	; 0x38
   1ab44:	ldrd	r0, [r3, #32]
   1ab48:	strd	r8, [sp, #64]	; 0x40
   1ab4c:	ldrd	r8, [r3, #40]	; 0x28
   1ab50:	strd	r0, [sp, #72]	; 0x48
   1ab54:	strd	r8, [sp, #80]	; 0x50
   1ab58:	ldr	r3, [r6, ip, lsl #2]
   1ab5c:	mvn	r1, r3, lsr r2
   1ab60:	and	r1, r1, #1
   1ab64:	eor	r2, r3, r1, lsl r2
   1ab68:	str	r2, [r6, ip, lsl #2]
   1ab6c:	bl	112c4 <__errno_location@plt>
   1ab70:	ldr	r3, [r0]
   1ab74:	mov	r8, r0
   1ab78:	ldr	r2, [r5, #4]
   1ab7c:	ldr	r4, [r5]
   1ab80:	str	r3, [sp, #28]
   1ab84:	cmp	r2, #0
   1ab88:	bgt	1abe4 <__assert_fail@plt+0x9800>
   1ab8c:	add	r3, r5, #8
   1ab90:	str	r2, [sp, #36]	; 0x24
   1ab94:	rsb	r2, r2, #1
   1ab98:	cmp	r4, r3
   1ab9c:	beq	1acb8 <__assert_fail@plt+0x98d4>
   1aba0:	mov	r1, #8
   1aba4:	mov	r0, r4
   1aba8:	mvn	r3, #-2147483648	; 0x80000000
   1abac:	str	r1, [sp]
   1abb0:	add	r1, sp, #36	; 0x24
   1abb4:	bl	1cd0c <__assert_fail@plt+0xb928>
   1abb8:	mov	r4, r0
   1abbc:	str	r0, [r5]
   1abc0:	ldr	r0, [r5, #4]
   1abc4:	mov	r1, #0
   1abc8:	ldr	r2, [sp, #36]	; 0x24
   1abcc:	sub	r2, r2, r0
   1abd0:	add	r0, r4, r0, lsl #3
   1abd4:	lsl	r2, r2, #3
   1abd8:	bl	112e8 <memset@plt>
   1abdc:	ldr	r3, [sp, #36]	; 0x24
   1abe0:	str	r3, [r5, #4]
   1abe4:	ldr	ip, [sp, #40]	; 0x28
   1abe8:	mov	r3, fp
   1abec:	mov	r2, sl
   1abf0:	ldr	r7, [sp, #44]	; 0x2c
   1abf4:	ldr	r9, [r4]
   1abf8:	ldr	r5, [r4, #4]
   1abfc:	str	ip, [sp]
   1ac00:	orr	r7, r7, #1
   1ac04:	ldr	ip, [sp, #80]	; 0x50
   1ac08:	mov	r1, r9
   1ac0c:	str	r7, [sp, #4]
   1ac10:	ldr	lr, [sp, #84]	; 0x54
   1ac14:	mov	r0, r5
   1ac18:	str	r6, [sp, #8]
   1ac1c:	str	ip, [sp, #12]
   1ac20:	str	lr, [sp, #16]
   1ac24:	bl	18300 <__assert_fail@plt+0x6f1c>
   1ac28:	cmp	r9, r0
   1ac2c:	bhi	1ac90 <__assert_fail@plt+0x98ac>
   1ac30:	add	r9, r0, #1
   1ac34:	movw	r3, #8884	; 0x22b4
   1ac38:	movt	r3, #3
   1ac3c:	cmp	r5, r3
   1ac40:	str	r9, [r4]
   1ac44:	beq	1ac50 <__assert_fail@plt+0x986c>
   1ac48:	mov	r0, r5
   1ac4c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1ac50:	mov	r0, r9
   1ac54:	bl	1ca68 <__assert_fail@plt+0xb684>
   1ac58:	mov	r1, r9
   1ac5c:	ldr	ip, [sp, #40]	; 0x28
   1ac60:	mov	r3, fp
   1ac64:	mov	r2, sl
   1ac68:	mov	r5, r0
   1ac6c:	ldr	r9, [sp, #80]	; 0x50
   1ac70:	ldr	lr, [sp, #84]	; 0x54
   1ac74:	str	r0, [r4, #4]
   1ac78:	str	ip, [sp]
   1ac7c:	str	r7, [sp, #4]
   1ac80:	str	r6, [sp, #8]
   1ac84:	str	r9, [sp, #12]
   1ac88:	str	lr, [sp, #16]
   1ac8c:	bl	18300 <__assert_fail@plt+0x6f1c>
   1ac90:	ldr	r3, [sp, #28]
   1ac94:	mov	r0, r5
   1ac98:	str	r3, [r8]
   1ac9c:	add	sp, sp, #92	; 0x5c
   1aca0:	ldrd	r4, [sp]
   1aca4:	ldrd	r6, [sp, #8]
   1aca8:	ldrd	r8, [sp, #16]
   1acac:	ldrd	sl, [sp, #24]
   1acb0:	add	sp, sp, #32
   1acb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1acb8:	mov	r0, #8
   1acbc:	mvn	r3, #-2147483648	; 0x80000000
   1acc0:	add	r1, sp, #36	; 0x24
   1acc4:	str	r0, [sp]
   1acc8:	mov	r0, #0
   1accc:	bl	1cd0c <__assert_fail@plt+0xb928>
   1acd0:	ldrd	r2, [r5, #8]
   1acd4:	mov	r4, r0
   1acd8:	str	r0, [r5]
   1acdc:	strd	r2, [r0]
   1ace0:	b	1abc0 <__assert_fail@plt+0x97dc>
   1ace4:			; <UNDEFINED> instruction: 0x000323b4
   1ace8:	ldr	ip, [pc, #476]	; 1aecc <__assert_fail@plt+0x9ae8>
   1acec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1acf0:	movw	r4, #8580	; 0x2184
   1acf4:	movt	r4, #3
   1acf8:	ldrd	r2, [ip, #8]
   1acfc:	strd	r6, [sp, #8]
   1ad00:	lsr	r7, r1, #5
   1ad04:	mov	r6, r0
   1ad08:	strd	r8, [sp, #16]
   1ad0c:	str	lr, [sp, #32]
   1ad10:	and	lr, r1, #31
   1ad14:	ldrd	r0, [ip]
   1ad18:	strd	sl, [sp, #24]
   1ad1c:	sub	sp, sp, #84	; 0x54
   1ad20:	add	r5, sp, #40	; 0x28
   1ad24:	strd	r0, [sp, #32]
   1ad28:	strd	r2, [sp, #40]	; 0x28
   1ad2c:	ldrd	r0, [ip, #16]
   1ad30:	ldrd	r2, [ip, #24]
   1ad34:	strd	r0, [sp, #48]	; 0x30
   1ad38:	ldrd	r0, [ip, #32]
   1ad3c:	strd	r2, [sp, #56]	; 0x38
   1ad40:	ldrd	r2, [ip, #40]	; 0x28
   1ad44:	strd	r0, [sp, #64]	; 0x40
   1ad48:	strd	r2, [sp, #72]	; 0x48
   1ad4c:	ldr	r1, [r5, r7, lsl #2]
   1ad50:	mvn	r3, r1, lsr lr
   1ad54:	and	r3, r3, #1
   1ad58:	eor	r1, r1, r3, lsl lr
   1ad5c:	str	r1, [r5, r7, lsl #2]
   1ad60:	bl	112c4 <__errno_location@plt>
   1ad64:	mov	r9, r0
   1ad68:	ldr	sl, [r0]
   1ad6c:	ldr	r2, [r4, #4]
   1ad70:	ldr	r7, [r4]
   1ad74:	cmp	r2, #0
   1ad78:	bgt	1add4 <__assert_fail@plt+0x99f0>
   1ad7c:	add	r3, r4, #8
   1ad80:	str	r2, [sp, #28]
   1ad84:	rsb	r2, r2, #1
   1ad88:	cmp	r7, r3
   1ad8c:	beq	1aea0 <__assert_fail@plt+0x9abc>
   1ad90:	mov	r1, #8
   1ad94:	mov	r0, r7
   1ad98:	mvn	r3, #-2147483648	; 0x80000000
   1ad9c:	str	r1, [sp]
   1ada0:	add	r1, sp, #28
   1ada4:	bl	1cd0c <__assert_fail@plt+0xb928>
   1ada8:	mov	r7, r0
   1adac:	str	r0, [r4]
   1adb0:	ldr	r0, [r4, #4]
   1adb4:	mov	r1, #0
   1adb8:	ldr	r2, [sp, #28]
   1adbc:	sub	r2, r2, r0
   1adc0:	add	r0, r7, r0, lsl #3
   1adc4:	lsl	r2, r2, #3
   1adc8:	bl	112e8 <memset@plt>
   1adcc:	ldr	r3, [sp, #28]
   1add0:	str	r3, [r4, #4]
   1add4:	ldr	ip, [sp, #32]
   1add8:	mvn	r3, #0
   1addc:	mov	r2, r6
   1ade0:	ldr	r8, [sp, #36]	; 0x24
   1ade4:	ldr	fp, [r7]
   1ade8:	ldr	r4, [r7, #4]
   1adec:	str	ip, [sp]
   1adf0:	orr	r8, r8, #1
   1adf4:	ldr	ip, [sp, #72]	; 0x48
   1adf8:	mov	r1, fp
   1adfc:	str	r8, [sp, #4]
   1ae00:	ldr	lr, [sp, #76]	; 0x4c
   1ae04:	mov	r0, r4
   1ae08:	str	r5, [sp, #8]
   1ae0c:	str	ip, [sp, #12]
   1ae10:	str	lr, [sp, #16]
   1ae14:	bl	18300 <__assert_fail@plt+0x6f1c>
   1ae18:	cmp	fp, r0
   1ae1c:	bhi	1ae7c <__assert_fail@plt+0x9a98>
   1ae20:	add	fp, r0, #1
   1ae24:	movw	r3, #8884	; 0x22b4
   1ae28:	movt	r3, #3
   1ae2c:	cmp	r4, r3
   1ae30:	str	fp, [r7]
   1ae34:	beq	1ae40 <__assert_fail@plt+0x9a5c>
   1ae38:	mov	r0, r4
   1ae3c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1ae40:	mov	r0, fp
   1ae44:	bl	1ca68 <__assert_fail@plt+0xb684>
   1ae48:	ldr	r3, [sp, #32]
   1ae4c:	mov	r2, r6
   1ae50:	mov	r1, fp
   1ae54:	mov	r4, r0
   1ae58:	ldr	lr, [sp, #72]	; 0x48
   1ae5c:	ldr	ip, [sp, #76]	; 0x4c
   1ae60:	str	r0, [r7, #4]
   1ae64:	stm	sp, {r3, r8}
   1ae68:	mvn	r3, #0
   1ae6c:	str	r5, [sp, #8]
   1ae70:	str	lr, [sp, #12]
   1ae74:	str	ip, [sp, #16]
   1ae78:	bl	18300 <__assert_fail@plt+0x6f1c>
   1ae7c:	mov	r0, r4
   1ae80:	str	sl, [r9]
   1ae84:	add	sp, sp, #84	; 0x54
   1ae88:	ldrd	r4, [sp]
   1ae8c:	ldrd	r6, [sp, #8]
   1ae90:	ldrd	r8, [sp, #16]
   1ae94:	ldrd	sl, [sp, #24]
   1ae98:	add	sp, sp, #32
   1ae9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aea0:	mov	r0, #8
   1aea4:	mvn	r3, #-2147483648	; 0x80000000
   1aea8:	add	r1, sp, #28
   1aeac:	str	r0, [sp]
   1aeb0:	mov	r0, #0
   1aeb4:	bl	1cd0c <__assert_fail@plt+0xb928>
   1aeb8:	ldrd	r2, [r4, #8]
   1aebc:	mov	r7, r0
   1aec0:	str	r0, [r4]
   1aec4:	strd	r2, [r0]
   1aec8:	b	1adb0 <__assert_fail@plt+0x99cc>
   1aecc:			; <UNDEFINED> instruction: 0x000323b4
   1aed0:	ldr	ip, [pc, #472]	; 1b0b0 <__assert_fail@plt+0x9ccc>
   1aed4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aed8:	mov	r5, r0
   1aedc:	movw	r4, #8580	; 0x2184
   1aee0:	movt	r4, #3
   1aee4:	ldrd	r2, [ip]
   1aee8:	ldrd	r0, [ip, #8]
   1aeec:	strd	r6, [sp, #8]
   1aef0:	strd	r8, [sp, #16]
   1aef4:	strd	sl, [sp, #24]
   1aef8:	str	lr, [sp, #32]
   1aefc:	sub	sp, sp, #84	; 0x54
   1af00:	strd	r2, [sp, #32]
   1af04:	strd	r0, [sp, #40]	; 0x28
   1af08:	ldr	r6, [sp, #44]	; 0x2c
   1af0c:	ldrd	r2, [ip, #16]
   1af10:	ldrd	r0, [ip, #24]
   1af14:	mvn	lr, r6
   1af18:	and	lr, lr, #67108864	; 0x4000000
   1af1c:	eor	lr, lr, r6
   1af20:	ldrd	r6, [ip, #40]	; 0x28
   1af24:	strd	r2, [sp, #48]	; 0x30
   1af28:	ldrd	r2, [ip, #32]
   1af2c:	str	lr, [sp, #44]	; 0x2c
   1af30:	strd	r0, [sp, #56]	; 0x38
   1af34:	strd	r2, [sp, #64]	; 0x40
   1af38:	strd	r6, [sp, #72]	; 0x48
   1af3c:	bl	112c4 <__errno_location@plt>
   1af40:	mov	r8, r0
   1af44:	ldr	r9, [r0]
   1af48:	ldr	r2, [r4, #4]
   1af4c:	ldr	r6, [r4]
   1af50:	cmp	r2, #0
   1af54:	bgt	1afb0 <__assert_fail@plt+0x9bcc>
   1af58:	add	r3, r4, #8
   1af5c:	str	r2, [sp, #28]
   1af60:	rsb	r2, r2, #1
   1af64:	cmp	r6, r3
   1af68:	beq	1b084 <__assert_fail@plt+0x9ca0>
   1af6c:	mov	r1, #8
   1af70:	mov	r0, r6
   1af74:	mvn	r3, #-2147483648	; 0x80000000
   1af78:	str	r1, [sp]
   1af7c:	add	r1, sp, #28
   1af80:	bl	1cd0c <__assert_fail@plt+0xb928>
   1af84:	mov	r6, r0
   1af88:	str	r0, [r4]
   1af8c:	ldr	r0, [r4, #4]
   1af90:	mov	r1, #0
   1af94:	ldr	r2, [sp, #28]
   1af98:	sub	r2, r2, r0
   1af9c:	add	r0, r6, r0, lsl #3
   1afa0:	lsl	r2, r2, #3
   1afa4:	bl	112e8 <memset@plt>
   1afa8:	ldr	r3, [sp, #28]
   1afac:	str	r3, [r4, #4]
   1afb0:	ldr	sl, [r6]
   1afb4:	add	r0, sp, #40	; 0x28
   1afb8:	mvn	r3, #0
   1afbc:	mov	r2, r5
   1afc0:	ldr	r7, [sp, #36]	; 0x24
   1afc4:	ldr	r4, [r6, #4]
   1afc8:	mov	r1, sl
   1afcc:	str	r0, [sp, #8]
   1afd0:	ldr	lr, [sp, #32]
   1afd4:	orr	r7, r7, #1
   1afd8:	ldr	ip, [sp, #72]	; 0x48
   1afdc:	mov	r0, r4
   1afe0:	ldr	fp, [sp, #76]	; 0x4c
   1afe4:	str	lr, [sp]
   1afe8:	str	r7, [sp, #4]
   1afec:	str	ip, [sp, #12]
   1aff0:	str	fp, [sp, #16]
   1aff4:	bl	18300 <__assert_fail@plt+0x6f1c>
   1aff8:	cmp	sl, r0
   1affc:	bhi	1b060 <__assert_fail@plt+0x9c7c>
   1b000:	add	sl, r0, #1
   1b004:	movw	r3, #8884	; 0x22b4
   1b008:	movt	r3, #3
   1b00c:	cmp	r4, r3
   1b010:	str	sl, [r6]
   1b014:	beq	1b020 <__assert_fail@plt+0x9c3c>
   1b018:	mov	r0, r4
   1b01c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1b020:	mov	r0, sl
   1b024:	bl	1ca68 <__assert_fail@plt+0xb684>
   1b028:	ldr	r3, [sp, #32]
   1b02c:	mov	r2, r5
   1b030:	add	r5, sp, #40	; 0x28
   1b034:	mov	r1, sl
   1b038:	mov	r4, r0
   1b03c:	ldr	lr, [sp, #72]	; 0x48
   1b040:	ldr	ip, [sp, #76]	; 0x4c
   1b044:	str	r0, [r6, #4]
   1b048:	stm	sp, {r3, r7}
   1b04c:	mvn	r3, #0
   1b050:	str	r5, [sp, #8]
   1b054:	str	lr, [sp, #12]
   1b058:	str	ip, [sp, #16]
   1b05c:	bl	18300 <__assert_fail@plt+0x6f1c>
   1b060:	mov	r0, r4
   1b064:	str	r9, [r8]
   1b068:	add	sp, sp, #84	; 0x54
   1b06c:	ldrd	r4, [sp]
   1b070:	ldrd	r6, [sp, #8]
   1b074:	ldrd	r8, [sp, #16]
   1b078:	ldrd	sl, [sp, #24]
   1b07c:	add	sp, sp, #32
   1b080:	pop	{pc}		; (ldr pc, [sp], #4)
   1b084:	mov	r0, #8
   1b088:	mvn	r3, #-2147483648	; 0x80000000
   1b08c:	add	r1, sp, #28
   1b090:	str	r0, [sp]
   1b094:	mov	r0, #0
   1b098:	bl	1cd0c <__assert_fail@plt+0xb928>
   1b09c:	ldrd	r2, [r4, #8]
   1b0a0:	mov	r6, r0
   1b0a4:	str	r0, [r4]
   1b0a8:	strd	r2, [r0]
   1b0ac:	b	1af8c <__assert_fail@plt+0x9ba8>
   1b0b0:			; <UNDEFINED> instruction: 0x000323b4
   1b0b4:	ldr	ip, [pc, #480]	; 1b29c <__assert_fail@plt+0x9eb8>
   1b0b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b0bc:	mov	r5, r0
   1b0c0:	movw	r4, #8580	; 0x2184
   1b0c4:	movt	r4, #3
   1b0c8:	ldrd	r2, [ip]
   1b0cc:	strd	r6, [sp, #8]
   1b0d0:	mov	r6, r1
   1b0d4:	ldrd	r0, [ip, #8]
   1b0d8:	strd	r8, [sp, #16]
   1b0dc:	strd	sl, [sp, #24]
   1b0e0:	str	lr, [sp, #32]
   1b0e4:	sub	sp, sp, #84	; 0x54
   1b0e8:	ldrd	r8, [ip, #40]	; 0x28
   1b0ec:	strd	r2, [sp, #32]
   1b0f0:	strd	r0, [sp, #40]	; 0x28
   1b0f4:	ldrd	r2, [ip, #16]
   1b0f8:	ldr	r7, [sp, #44]	; 0x2c
   1b0fc:	ldrd	r0, [ip, #24]
   1b100:	strd	r2, [sp, #48]	; 0x30
   1b104:	ldrd	r2, [ip, #32]
   1b108:	mvn	lr, r7
   1b10c:	and	lr, lr, #67108864	; 0x4000000
   1b110:	eor	lr, lr, r7
   1b114:	str	lr, [sp, #44]	; 0x2c
   1b118:	strd	r0, [sp, #56]	; 0x38
   1b11c:	strd	r2, [sp, #64]	; 0x40
   1b120:	strd	r8, [sp, #72]	; 0x48
   1b124:	bl	112c4 <__errno_location@plt>
   1b128:	mov	r9, r0
   1b12c:	ldr	sl, [r0]
   1b130:	ldr	r2, [r4, #4]
   1b134:	ldr	r7, [r4]
   1b138:	cmp	r2, #0
   1b13c:	bgt	1b198 <__assert_fail@plt+0x9db4>
   1b140:	add	r3, r4, #8
   1b144:	str	r2, [sp, #28]
   1b148:	rsb	r2, r2, #1
   1b14c:	cmp	r7, r3
   1b150:	beq	1b270 <__assert_fail@plt+0x9e8c>
   1b154:	mov	r1, #8
   1b158:	mov	r0, r7
   1b15c:	mvn	r3, #-2147483648	; 0x80000000
   1b160:	str	r1, [sp]
   1b164:	add	r1, sp, #28
   1b168:	bl	1cd0c <__assert_fail@plt+0xb928>
   1b16c:	mov	r7, r0
   1b170:	str	r0, [r4]
   1b174:	ldr	r0, [r4, #4]
   1b178:	mov	r1, #0
   1b17c:	ldr	r2, [sp, #28]
   1b180:	sub	r2, r2, r0
   1b184:	add	r0, r7, r0, lsl #3
   1b188:	lsl	r2, r2, #3
   1b18c:	bl	112e8 <memset@plt>
   1b190:	ldr	r3, [sp, #28]
   1b194:	str	r3, [r4, #4]
   1b198:	ldr	ip, [sp, #32]
   1b19c:	add	r0, sp, #40	; 0x28
   1b1a0:	mov	r3, r6
   1b1a4:	mov	r2, r5
   1b1a8:	ldr	r8, [sp, #36]	; 0x24
   1b1ac:	ldr	fp, [r7]
   1b1b0:	ldr	r4, [r7, #4]
   1b1b4:	str	ip, [sp]
   1b1b8:	orr	r8, r8, #1
   1b1bc:	ldr	ip, [sp, #72]	; 0x48
   1b1c0:	mov	r1, fp
   1b1c4:	str	r8, [sp, #4]
   1b1c8:	ldr	lr, [sp, #76]	; 0x4c
   1b1cc:	str	r0, [sp, #8]
   1b1d0:	mov	r0, r4
   1b1d4:	str	ip, [sp, #12]
   1b1d8:	str	lr, [sp, #16]
   1b1dc:	bl	18300 <__assert_fail@plt+0x6f1c>
   1b1e0:	cmp	fp, r0
   1b1e4:	bhi	1b24c <__assert_fail@plt+0x9e68>
   1b1e8:	add	fp, r0, #1
   1b1ec:	movw	r3, #8884	; 0x22b4
   1b1f0:	movt	r3, #3
   1b1f4:	cmp	r4, r3
   1b1f8:	str	fp, [r7]
   1b1fc:	beq	1b208 <__assert_fail@plt+0x9e24>
   1b200:	mov	r0, r4
   1b204:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1b208:	mov	r0, fp
   1b20c:	bl	1ca68 <__assert_fail@plt+0xb684>
   1b210:	ldr	lr, [sp, #32]
   1b214:	mov	r2, r5
   1b218:	mov	r3, r6
   1b21c:	mov	r1, fp
   1b220:	mov	r4, r0
   1b224:	ldr	r5, [sp, #72]	; 0x48
   1b228:	ldr	ip, [sp, #76]	; 0x4c
   1b22c:	str	r0, [r7, #4]
   1b230:	str	lr, [sp]
   1b234:	add	lr, sp, #40	; 0x28
   1b238:	str	r8, [sp, #4]
   1b23c:	str	lr, [sp, #8]
   1b240:	str	r5, [sp, #12]
   1b244:	str	ip, [sp, #16]
   1b248:	bl	18300 <__assert_fail@plt+0x6f1c>
   1b24c:	mov	r0, r4
   1b250:	str	sl, [r9]
   1b254:	add	sp, sp, #84	; 0x54
   1b258:	ldrd	r4, [sp]
   1b25c:	ldrd	r6, [sp, #8]
   1b260:	ldrd	r8, [sp, #16]
   1b264:	ldrd	sl, [sp, #24]
   1b268:	add	sp, sp, #32
   1b26c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b270:	mov	r0, #8
   1b274:	mvn	r3, #-2147483648	; 0x80000000
   1b278:	add	r1, sp, #28
   1b27c:	str	r0, [sp]
   1b280:	mov	r0, #0
   1b284:	bl	1cd0c <__assert_fail@plt+0xb928>
   1b288:	ldrd	r2, [r4, #8]
   1b28c:	mov	r7, r0
   1b290:	str	r0, [r4]
   1b294:	strd	r2, [r0]
   1b298:	b	1b174 <__assert_fail@plt+0x9d90>
   1b29c:			; <UNDEFINED> instruction: 0x000323b4
   1b2a0:	strd	r4, [sp, #-12]!
   1b2a4:	mov	r4, #0
   1b2a8:	mov	r5, #0
   1b2ac:	str	lr, [sp, #8]
   1b2b0:	sub	sp, sp, #100	; 0x64
   1b2b4:	cmp	r1, #10
   1b2b8:	strd	r4, [sp]
   1b2bc:	strd	r4, [sp, #8]
   1b2c0:	strd	r4, [sp, #16]
   1b2c4:	strd	r4, [sp, #24]
   1b2c8:	strd	r4, [sp, #32]
   1b2cc:	strd	r4, [sp, #40]	; 0x28
   1b2d0:	beq	1b300 <__assert_fail@plt+0x9f1c>
   1b2d4:	mov	ip, #67108864	; 0x4000000
   1b2d8:	mov	r3, sp
   1b2dc:	str	r1, [sp]
   1b2e0:	mov	r1, r2
   1b2e4:	mvn	r2, #0
   1b2e8:	str	ip, [sp, #12]
   1b2ec:	bl	19cec <__assert_fail@plt+0x8908>
   1b2f0:	add	sp, sp, #100	; 0x64
   1b2f4:	ldrd	r4, [sp]
   1b2f8:	add	sp, sp, #8
   1b2fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b300:	bl	113cc <abort@plt>
   1b304:	ldr	ip, [pc, #156]	; 1b3a8 <__assert_fail@plt+0x9fc4>
   1b308:	cmp	r2, #0
   1b30c:	cmpne	r1, #0
   1b310:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b314:	strd	r6, [sp, #8]
   1b318:	mov	r6, r2
   1b31c:	str	r8, [sp, #16]
   1b320:	mov	r8, r3
   1b324:	strd	sl, [sp, #20]
   1b328:	ldrd	r4, [ip]
   1b32c:	str	lr, [sp, #28]
   1b330:	sub	sp, sp, #48	; 0x30
   1b334:	mov	lr, #10
   1b338:	ldrd	r2, [ip, #8]
   1b33c:	ldrd	sl, [ip, #16]
   1b340:	strd	r4, [sp]
   1b344:	ldrd	r4, [ip, #32]
   1b348:	str	lr, [sp]
   1b34c:	strd	r2, [sp, #8]
   1b350:	strd	sl, [sp, #16]
   1b354:	ldrd	r2, [ip, #24]
   1b358:	ldrd	sl, [ip, #40]	; 0x28
   1b35c:	strd	r2, [sp, #24]
   1b360:	strd	r4, [sp, #32]
   1b364:	strd	sl, [sp, #40]	; 0x28
   1b368:	beq	1b3a4 <__assert_fail@plt+0x9fc0>
   1b36c:	mov	r7, r1
   1b370:	mov	r3, sp
   1b374:	mov	r1, r8
   1b378:	mvn	r2, #0
   1b37c:	str	r7, [sp, #40]	; 0x28
   1b380:	str	r6, [sp, #44]	; 0x2c
   1b384:	bl	19cec <__assert_fail@plt+0x8908>
   1b388:	add	sp, sp, #48	; 0x30
   1b38c:	ldrd	r4, [sp]
   1b390:	ldrd	r6, [sp, #8]
   1b394:	ldr	r8, [sp, #16]
   1b398:	ldrd	sl, [sp, #20]
   1b39c:	add	sp, sp, #28
   1b3a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3a4:	bl	113cc <abort@plt>
   1b3a8:			; <UNDEFINED> instruction: 0x000323b4
   1b3ac:	ldr	ip, [pc, #156]	; 1b450 <__assert_fail@plt+0xa06c>
   1b3b0:	cmp	r2, #0
   1b3b4:	cmpne	r1, #0
   1b3b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b3bc:	strd	r6, [sp, #8]
   1b3c0:	mov	r6, r2
   1b3c4:	str	r8, [sp, #16]
   1b3c8:	mov	r8, r3
   1b3cc:	strd	sl, [sp, #20]
   1b3d0:	ldrd	r4, [ip]
   1b3d4:	str	lr, [sp, #28]
   1b3d8:	sub	sp, sp, #48	; 0x30
   1b3dc:	mov	lr, #10
   1b3e0:	ldrd	r2, [ip, #8]
   1b3e4:	ldrd	sl, [ip, #16]
   1b3e8:	strd	r4, [sp]
   1b3ec:	ldrd	r4, [ip, #32]
   1b3f0:	str	lr, [sp]
   1b3f4:	strd	r2, [sp, #8]
   1b3f8:	strd	sl, [sp, #16]
   1b3fc:	ldrd	r2, [ip, #24]
   1b400:	ldrd	sl, [ip, #40]	; 0x28
   1b404:	strd	r2, [sp, #24]
   1b408:	strd	r4, [sp, #32]
   1b40c:	strd	sl, [sp, #40]	; 0x28
   1b410:	beq	1b44c <__assert_fail@plt+0xa068>
   1b414:	ldr	r2, [sp, #80]	; 0x50
   1b418:	mov	r7, r1
   1b41c:	mov	r3, sp
   1b420:	mov	r1, r8
   1b424:	str	r7, [sp, #40]	; 0x28
   1b428:	str	r6, [sp, #44]	; 0x2c
   1b42c:	bl	19cec <__assert_fail@plt+0x8908>
   1b430:	add	sp, sp, #48	; 0x30
   1b434:	ldrd	r4, [sp]
   1b438:	ldrd	r6, [sp, #8]
   1b43c:	ldr	r8, [sp, #16]
   1b440:	ldrd	sl, [sp, #20]
   1b444:	add	sp, sp, #28
   1b448:	pop	{pc}		; (ldr pc, [sp], #4)
   1b44c:	bl	113cc <abort@plt>
   1b450:			; <UNDEFINED> instruction: 0x000323b4
   1b454:	ldr	ip, [pc, #512]	; 1b65c <__assert_fail@plt+0xa278>
   1b458:	cmp	r0, #0
   1b45c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b460:	ldrd	r4, [ip, #16]
   1b464:	strd	r6, [sp, #8]
   1b468:	clz	r6, r1
   1b46c:	mov	r7, r1
   1b470:	strd	r8, [sp, #16]
   1b474:	mov	r8, r0
   1b478:	lsr	r6, r6, #5
   1b47c:	strd	sl, [sp, #24]
   1b480:	mov	fp, r2
   1b484:	mov	sl, #10
   1b488:	ldrd	r2, [ip]
   1b48c:	moveq	r6, #1
   1b490:	str	lr, [sp, #32]
   1b494:	sub	sp, sp, #92	; 0x5c
   1b498:	cmp	r6, #0
   1b49c:	ldrd	r0, [ip, #8]
   1b4a0:	strd	r2, [sp, #40]	; 0x28
   1b4a4:	strd	r4, [sp, #56]	; 0x38
   1b4a8:	ldrd	r2, [ip, #24]
   1b4ac:	strd	r0, [sp, #48]	; 0x30
   1b4b0:	ldrd	r0, [ip, #32]
   1b4b4:	str	sl, [sp, #40]	; 0x28
   1b4b8:	ldrd	r4, [ip, #40]	; 0x28
   1b4bc:	strd	r2, [sp, #64]	; 0x40
   1b4c0:	strd	r0, [sp, #72]	; 0x48
   1b4c4:	strd	r4, [sp, #80]	; 0x50
   1b4c8:	bne	1b658 <__assert_fail@plt+0xa274>
   1b4cc:	movw	r5, #8580	; 0x2184
   1b4d0:	movt	r5, #3
   1b4d4:	str	r8, [sp, #80]	; 0x50
   1b4d8:	str	r7, [sp, #84]	; 0x54
   1b4dc:	bl	112c4 <__errno_location@plt>
   1b4e0:	ldr	r3, [r0]
   1b4e4:	mov	r9, r0
   1b4e8:	ldr	r2, [r5, #4]
   1b4ec:	ldr	r4, [r5]
   1b4f0:	str	r3, [sp, #28]
   1b4f4:	cmp	r2, #0
   1b4f8:	movgt	r1, sl
   1b4fc:	bgt	1b564 <__assert_fail@plt+0xa180>
   1b500:	add	r3, r5, #8
   1b504:	str	r2, [sp, #36]	; 0x24
   1b508:	rsb	r2, r2, #1
   1b50c:	cmp	r4, r3
   1b510:	beq	1b62c <__assert_fail@plt+0xa248>
   1b514:	mov	r1, #8
   1b518:	mov	r0, r4
   1b51c:	mvn	r3, #-2147483648	; 0x80000000
   1b520:	str	r1, [sp]
   1b524:	add	r1, sp, #36	; 0x24
   1b528:	bl	1cd0c <__assert_fail@plt+0xb928>
   1b52c:	mov	r4, r0
   1b530:	str	r0, [r5]
   1b534:	ldr	r0, [r5, #4]
   1b538:	mov	r1, #0
   1b53c:	ldr	r2, [sp, #36]	; 0x24
   1b540:	sub	r2, r2, r0
   1b544:	add	r0, r4, r0, lsl #3
   1b548:	lsl	r2, r2, #3
   1b54c:	bl	112e8 <memset@plt>
   1b550:	ldr	r3, [sp, #36]	; 0x24
   1b554:	ldr	r1, [sp, #40]	; 0x28
   1b558:	ldr	r8, [sp, #80]	; 0x50
   1b55c:	str	r3, [r5, #4]
   1b560:	ldr	r7, [sp, #84]	; 0x54
   1b564:	mvn	r3, #0
   1b568:	mov	r2, fp
   1b56c:	ldr	r6, [sp, #44]	; 0x2c
   1b570:	ldr	sl, [r4]
   1b574:	ldr	r5, [r4, #4]
   1b578:	orr	r6, r6, #1
   1b57c:	stm	sp, {r1, r6}
   1b580:	add	r1, sp, #48	; 0x30
   1b584:	str	r8, [sp, #12]
   1b588:	mov	r0, r5
   1b58c:	str	r1, [sp, #8]
   1b590:	mov	r1, sl
   1b594:	str	r7, [sp, #16]
   1b598:	bl	18300 <__assert_fail@plt+0x6f1c>
   1b59c:	cmp	sl, r0
   1b5a0:	bhi	1b604 <__assert_fail@plt+0xa220>
   1b5a4:	add	r7, r0, #1
   1b5a8:	movw	r3, #8884	; 0x22b4
   1b5ac:	movt	r3, #3
   1b5b0:	cmp	r5, r3
   1b5b4:	str	r7, [r4]
   1b5b8:	beq	1b5c4 <__assert_fail@plt+0xa1e0>
   1b5bc:	mov	r0, r5
   1b5c0:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1b5c4:	mov	r0, r7
   1b5c8:	bl	1ca68 <__assert_fail@plt+0xb684>
   1b5cc:	ldr	r3, [sp, #40]	; 0x28
   1b5d0:	mov	r2, fp
   1b5d4:	mov	r1, r7
   1b5d8:	mov	r5, r0
   1b5dc:	ldr	lr, [sp, #80]	; 0x50
   1b5e0:	ldr	ip, [sp, #84]	; 0x54
   1b5e4:	str	r0, [r4, #4]
   1b5e8:	add	r4, sp, #48	; 0x30
   1b5ec:	stm	sp, {r3, r6}
   1b5f0:	mvn	r3, #0
   1b5f4:	str	r4, [sp, #8]
   1b5f8:	str	lr, [sp, #12]
   1b5fc:	str	ip, [sp, #16]
   1b600:	bl	18300 <__assert_fail@plt+0x6f1c>
   1b604:	ldr	r3, [sp, #28]
   1b608:	mov	r0, r5
   1b60c:	str	r3, [r9]
   1b610:	add	sp, sp, #92	; 0x5c
   1b614:	ldrd	r4, [sp]
   1b618:	ldrd	r6, [sp, #8]
   1b61c:	ldrd	r8, [sp, #16]
   1b620:	ldrd	sl, [sp, #24]
   1b624:	add	sp, sp, #32
   1b628:	pop	{pc}		; (ldr pc, [sp], #4)
   1b62c:	mov	r1, #8
   1b630:	mvn	r3, #-2147483648	; 0x80000000
   1b634:	mov	r0, r6
   1b638:	str	r1, [sp]
   1b63c:	add	r1, sp, #36	; 0x24
   1b640:	bl	1cd0c <__assert_fail@plt+0xb928>
   1b644:	ldrd	r2, [r5, #8]
   1b648:	mov	r4, r0
   1b64c:	str	r0, [r5]
   1b650:	strd	r2, [r0]
   1b654:	b	1b534 <__assert_fail@plt+0xa150>
   1b658:	bl	113cc <abort@plt>
   1b65c:			; <UNDEFINED> instruction: 0x000323b4
   1b660:	ldr	ip, [pc, #536]	; 1b880 <__assert_fail@plt+0xa49c>
   1b664:	cmp	r0, #0
   1b668:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b66c:	ldrd	r4, [ip, #16]
   1b670:	strd	r6, [sp, #8]
   1b674:	mov	r6, r1
   1b678:	mov	r7, r0
   1b67c:	strd	r8, [sp, #16]
   1b680:	mov	r9, #10
   1b684:	strd	sl, [sp, #24]
   1b688:	mov	sl, r2
   1b68c:	mov	fp, r3
   1b690:	str	lr, [sp, #32]
   1b694:	clz	lr, r1
   1b698:	sub	sp, sp, #92	; 0x5c
   1b69c:	ldrd	r2, [ip]
   1b6a0:	lsr	lr, lr, #5
   1b6a4:	moveq	lr, #1
   1b6a8:	ldrd	r0, [ip, #8]
   1b6ac:	cmp	lr, #0
   1b6b0:	strd	r4, [sp, #56]	; 0x38
   1b6b4:	ldrd	r4, [ip, #40]	; 0x28
   1b6b8:	str	lr, [sp, #28]
   1b6bc:	strd	r2, [sp, #40]	; 0x28
   1b6c0:	ldrd	r2, [ip, #24]
   1b6c4:	strd	r0, [sp, #48]	; 0x30
   1b6c8:	ldrd	r0, [ip, #32]
   1b6cc:	str	r9, [sp, #40]	; 0x28
   1b6d0:	strd	r2, [sp, #64]	; 0x40
   1b6d4:	strd	r4, [sp, #80]	; 0x50
   1b6d8:	strd	r0, [sp, #72]	; 0x48
   1b6dc:	bne	1b87c <__assert_fail@plt+0xa498>
   1b6e0:	movw	r5, #8580	; 0x2184
   1b6e4:	movt	r5, #3
   1b6e8:	str	r7, [sp, #80]	; 0x50
   1b6ec:	str	r6, [sp, #84]	; 0x54
   1b6f0:	bl	112c4 <__errno_location@plt>
   1b6f4:	ldr	r3, [r0]
   1b6f8:	mov	r8, r0
   1b6fc:	ldr	r2, [r5, #4]
   1b700:	ldr	r4, [r5]
   1b704:	str	r3, [sp, #24]
   1b708:	cmp	r2, #0
   1b70c:	movgt	r1, r9
   1b710:	bgt	1b778 <__assert_fail@plt+0xa394>
   1b714:	add	r3, r5, #8
   1b718:	str	r2, [sp, #36]	; 0x24
   1b71c:	rsb	r2, r2, #1
   1b720:	cmp	r4, r3
   1b724:	beq	1b850 <__assert_fail@plt+0xa46c>
   1b728:	mov	r1, #8
   1b72c:	mov	r0, r4
   1b730:	mvn	r3, #-2147483648	; 0x80000000
   1b734:	str	r1, [sp]
   1b738:	add	r1, sp, #36	; 0x24
   1b73c:	bl	1cd0c <__assert_fail@plt+0xb928>
   1b740:	mov	r4, r0
   1b744:	str	r0, [r5]
   1b748:	ldr	r0, [r5, #4]
   1b74c:	mov	r1, #0
   1b750:	ldr	r2, [sp, #36]	; 0x24
   1b754:	sub	r2, r2, r0
   1b758:	add	r0, r4, r0, lsl #3
   1b75c:	lsl	r2, r2, #3
   1b760:	bl	112e8 <memset@plt>
   1b764:	ldr	r3, [sp, #36]	; 0x24
   1b768:	ldr	r1, [sp, #40]	; 0x28
   1b76c:	ldr	r7, [sp, #80]	; 0x50
   1b770:	str	r3, [r5, #4]
   1b774:	ldr	r6, [sp, #84]	; 0x54
   1b778:	mov	r3, fp
   1b77c:	mov	r2, sl
   1b780:	ldr	r0, [sp, #44]	; 0x2c
   1b784:	ldr	r9, [r4]
   1b788:	ldr	r5, [r4, #4]
   1b78c:	orr	r0, r0, #1
   1b790:	str	r1, [sp]
   1b794:	add	r1, sp, #48	; 0x30
   1b798:	str	r0, [sp, #4]
   1b79c:	str	r1, [sp, #8]
   1b7a0:	mov	r1, r9
   1b7a4:	str	r7, [sp, #12]
   1b7a8:	str	r6, [sp, #16]
   1b7ac:	str	r0, [sp, #28]
   1b7b0:	mov	r0, r5
   1b7b4:	bl	18300 <__assert_fail@plt+0x6f1c>
   1b7b8:	cmp	r9, r0
   1b7bc:	bhi	1b828 <__assert_fail@plt+0xa444>
   1b7c0:	add	r6, r0, #1
   1b7c4:	movw	r3, #8884	; 0x22b4
   1b7c8:	movt	r3, #3
   1b7cc:	cmp	r5, r3
   1b7d0:	str	r6, [r4]
   1b7d4:	beq	1b7e0 <__assert_fail@plt+0xa3fc>
   1b7d8:	mov	r0, r5
   1b7dc:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1b7e0:	mov	r0, r6
   1b7e4:	bl	1ca68 <__assert_fail@plt+0xb684>
   1b7e8:	ldr	lr, [sp, #40]	; 0x28
   1b7ec:	mov	r1, r6
   1b7f0:	mov	r3, fp
   1b7f4:	mov	r2, sl
   1b7f8:	mov	r5, r0
   1b7fc:	ldr	r6, [sp, #80]	; 0x50
   1b800:	ldr	ip, [sp, #84]	; 0x54
   1b804:	str	r0, [r4, #4]
   1b808:	str	lr, [sp]
   1b80c:	ldr	lr, [sp, #28]
   1b810:	str	lr, [sp, #4]
   1b814:	add	lr, sp, #48	; 0x30
   1b818:	str	r6, [sp, #12]
   1b81c:	str	lr, [sp, #8]
   1b820:	str	ip, [sp, #16]
   1b824:	bl	18300 <__assert_fail@plt+0x6f1c>
   1b828:	ldr	r3, [sp, #24]
   1b82c:	mov	r0, r5
   1b830:	str	r3, [r8]
   1b834:	add	sp, sp, #92	; 0x5c
   1b838:	ldrd	r4, [sp]
   1b83c:	ldrd	r6, [sp, #8]
   1b840:	ldrd	r8, [sp, #16]
   1b844:	ldrd	sl, [sp, #24]
   1b848:	add	sp, sp, #32
   1b84c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b850:	mov	r1, #8
   1b854:	mvn	r3, #-2147483648	; 0x80000000
   1b858:	ldr	r0, [sp, #28]
   1b85c:	str	r1, [sp]
   1b860:	add	r1, sp, #36	; 0x24
   1b864:	bl	1cd0c <__assert_fail@plt+0xb928>
   1b868:	ldrd	r2, [r5, #8]
   1b86c:	mov	r4, r0
   1b870:	str	r0, [r5]
   1b874:	strd	r2, [r0]
   1b878:	b	1b748 <__assert_fail@plt+0xa364>
   1b87c:	bl	113cc <abort@plt>
   1b880:			; <UNDEFINED> instruction: 0x000323b4
   1b884:	ldr	r3, [pc]	; 1b88c <__assert_fail@plt+0xa4a8>
   1b888:	b	19cec <__assert_fail@plt+0x8908>
   1b88c:	muleq	r3, r4, r1
   1b890:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b894:	movw	r4, #8580	; 0x2184
   1b898:	movt	r4, #3
   1b89c:	strd	r6, [sp, #8]
   1b8a0:	strd	r8, [sp, #16]
   1b8a4:	strd	sl, [sp, #24]
   1b8a8:	mov	sl, r0
   1b8ac:	mov	fp, r1
   1b8b0:	str	lr, [sp, #32]
   1b8b4:	sub	sp, sp, #44	; 0x2c
   1b8b8:	bl	112c4 <__errno_location@plt>
   1b8bc:	ldr	r3, [r0]
   1b8c0:	mov	r8, r0
   1b8c4:	ldr	r2, [r4, #4]
   1b8c8:	ldr	r5, [r4]
   1b8cc:	str	r3, [sp, #28]
   1b8d0:	cmp	r2, #0
   1b8d4:	bgt	1b930 <__assert_fail@plt+0xa54c>
   1b8d8:	add	r3, r4, #8
   1b8dc:	str	r2, [sp, #36]	; 0x24
   1b8e0:	rsb	r2, r2, #1
   1b8e4:	cmp	r5, r3
   1b8e8:	beq	1ba0c <__assert_fail@plt+0xa628>
   1b8ec:	mov	r1, #8
   1b8f0:	mov	r0, r5
   1b8f4:	mvn	r3, #-2147483648	; 0x80000000
   1b8f8:	str	r1, [sp]
   1b8fc:	add	r1, sp, #36	; 0x24
   1b900:	bl	1cd0c <__assert_fail@plt+0xb928>
   1b904:	mov	r5, r0
   1b908:	str	r0, [r4]
   1b90c:	ldr	r0, [r4, #4]
   1b910:	mov	r1, #0
   1b914:	ldr	r2, [sp, #36]	; 0x24
   1b918:	sub	r2, r2, r0
   1b91c:	add	r0, r5, r0, lsl #3
   1b920:	lsl	r2, r2, #3
   1b924:	bl	112e8 <memset@plt>
   1b928:	ldr	r3, [sp, #36]	; 0x24
   1b92c:	str	r3, [r4, #4]
   1b930:	ldr	ip, [r4, #16]
   1b934:	mov	r3, fp
   1b938:	mov	r2, sl
   1b93c:	ldr	r7, [r4, #20]
   1b940:	ldr	r0, [pc, #240]	; 1ba38 <__assert_fail@plt+0xa654>
   1b944:	ldr	r9, [r5]
   1b948:	orr	r7, r7, #1
   1b94c:	ldr	r6, [r5, #4]
   1b950:	str	ip, [sp]
   1b954:	ldr	ip, [r4, #56]	; 0x38
   1b958:	mov	r1, r9
   1b95c:	str	r7, [sp, #4]
   1b960:	ldr	lr, [r4, #60]	; 0x3c
   1b964:	str	r0, [sp, #8]
   1b968:	mov	r0, r6
   1b96c:	str	ip, [sp, #12]
   1b970:	str	lr, [sp, #16]
   1b974:	bl	18300 <__assert_fail@plt+0x6f1c>
   1b978:	cmp	r9, r0
   1b97c:	bhi	1b9e4 <__assert_fail@plt+0xa600>
   1b980:	add	r9, r0, #1
   1b984:	movw	r3, #8884	; 0x22b4
   1b988:	movt	r3, #3
   1b98c:	cmp	r6, r3
   1b990:	str	r9, [r5]
   1b994:	beq	1b9a0 <__assert_fail@plt+0xa5bc>
   1b998:	mov	r0, r6
   1b99c:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1b9a0:	mov	r0, r9
   1b9a4:	bl	1ca68 <__assert_fail@plt+0xb684>
   1b9a8:	ldr	ip, [r4, #16]
   1b9ac:	mov	r1, r9
   1b9b0:	mov	r3, fp
   1b9b4:	mov	r2, sl
   1b9b8:	mov	r6, r0
   1b9bc:	ldr	r9, [r4, #56]	; 0x38
   1b9c0:	ldr	lr, [r4, #60]	; 0x3c
   1b9c4:	str	r0, [r5, #4]
   1b9c8:	str	ip, [sp]
   1b9cc:	ldr	ip, [pc, #100]	; 1ba38 <__assert_fail@plt+0xa654>
   1b9d0:	str	r7, [sp, #4]
   1b9d4:	str	ip, [sp, #8]
   1b9d8:	str	r9, [sp, #12]
   1b9dc:	str	lr, [sp, #16]
   1b9e0:	bl	18300 <__assert_fail@plt+0x6f1c>
   1b9e4:	ldr	r3, [sp, #28]
   1b9e8:	mov	r0, r6
   1b9ec:	str	r3, [r8]
   1b9f0:	add	sp, sp, #44	; 0x2c
   1b9f4:	ldrd	r4, [sp]
   1b9f8:	ldrd	r6, [sp, #8]
   1b9fc:	ldrd	r8, [sp, #16]
   1ba00:	ldrd	sl, [sp, #24]
   1ba04:	add	sp, sp, #32
   1ba08:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba0c:	mov	r0, #8
   1ba10:	mvn	r3, #-2147483648	; 0x80000000
   1ba14:	add	r1, sp, #36	; 0x24
   1ba18:	str	r0, [sp]
   1ba1c:	mov	r0, #0
   1ba20:	bl	1cd0c <__assert_fail@plt+0xb928>
   1ba24:	ldrd	r2, [r4, #8]
   1ba28:	mov	r5, r0
   1ba2c:	str	r0, [r4]
   1ba30:	strd	r2, [r0]
   1ba34:	b	1b90c <__assert_fail@plt+0xa528>
   1ba38:	muleq	r3, ip, r1
   1ba3c:	ldr	r3, [pc, #4]	; 1ba48 <__assert_fail@plt+0xa664>
   1ba40:	mvn	r2, #0
   1ba44:	b	19cec <__assert_fail@plt+0x8908>
   1ba48:	muleq	r3, r4, r1
   1ba4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ba50:	movw	r4, #8580	; 0x2184
   1ba54:	movt	r4, #3
   1ba58:	strd	r6, [sp, #8]
   1ba5c:	strd	r8, [sp, #16]
   1ba60:	strd	sl, [sp, #24]
   1ba64:	mov	sl, r0
   1ba68:	str	lr, [sp, #32]
   1ba6c:	sub	sp, sp, #44	; 0x2c
   1ba70:	bl	112c4 <__errno_location@plt>
   1ba74:	ldr	r3, [r0]
   1ba78:	mov	r8, r0
   1ba7c:	ldr	r2, [r4, #4]
   1ba80:	ldr	r5, [r4]
   1ba84:	str	r3, [sp, #28]
   1ba88:	cmp	r2, #0
   1ba8c:	bgt	1bae8 <__assert_fail@plt+0xa704>
   1ba90:	add	r3, r4, #8
   1ba94:	str	r2, [sp, #36]	; 0x24
   1ba98:	rsb	r2, r2, #1
   1ba9c:	cmp	r5, r3
   1baa0:	beq	1bbb0 <__assert_fail@plt+0xa7cc>
   1baa4:	mov	r1, #8
   1baa8:	mov	r0, r5
   1baac:	mvn	r3, #-2147483648	; 0x80000000
   1bab0:	str	r1, [sp]
   1bab4:	add	r1, sp, #36	; 0x24
   1bab8:	bl	1cd0c <__assert_fail@plt+0xb928>
   1babc:	mov	r5, r0
   1bac0:	str	r0, [r4]
   1bac4:	ldr	r0, [r4, #4]
   1bac8:	mov	r1, #0
   1bacc:	ldr	r2, [sp, #36]	; 0x24
   1bad0:	sub	r2, r2, r0
   1bad4:	add	r0, r5, r0, lsl #3
   1bad8:	lsl	r2, r2, #3
   1badc:	bl	112e8 <memset@plt>
   1bae0:	ldr	r3, [sp, #36]	; 0x24
   1bae4:	str	r3, [r4, #4]
   1bae8:	ldr	ip, [r4, #16]
   1baec:	mvn	r3, #0
   1baf0:	mov	r2, sl
   1baf4:	ldr	r7, [r4, #20]
   1baf8:	ldr	fp, [pc, #220]	; 1bbdc <__assert_fail@plt+0xa7f8>
   1bafc:	ldr	r9, [r5]
   1bb00:	orr	r7, r7, #1
   1bb04:	ldr	r6, [r5, #4]
   1bb08:	str	ip, [sp]
   1bb0c:	ldr	ip, [r4, #56]	; 0x38
   1bb10:	mov	r1, r9
   1bb14:	stmib	sp, {r7, fp}
   1bb18:	ldr	lr, [r4, #60]	; 0x3c
   1bb1c:	mov	r0, r6
   1bb20:	str	ip, [sp, #12]
   1bb24:	str	lr, [sp, #16]
   1bb28:	bl	18300 <__assert_fail@plt+0x6f1c>
   1bb2c:	cmp	r9, r0
   1bb30:	bhi	1bb88 <__assert_fail@plt+0xa7a4>
   1bb34:	add	r9, r0, #1
   1bb38:	movw	r3, #8884	; 0x22b4
   1bb3c:	movt	r3, #3
   1bb40:	cmp	r6, r3
   1bb44:	str	r9, [r5]
   1bb48:	beq	1bb54 <__assert_fail@plt+0xa770>
   1bb4c:	mov	r0, r6
   1bb50:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1bb54:	mov	r0, r9
   1bb58:	bl	1ca68 <__assert_fail@plt+0xb684>
   1bb5c:	ldr	r3, [r4, #16]
   1bb60:	mov	r2, sl
   1bb64:	mov	r1, r9
   1bb68:	mov	r6, r0
   1bb6c:	ldr	lr, [r4, #56]	; 0x38
   1bb70:	ldr	ip, [r4, #60]	; 0x3c
   1bb74:	str	r0, [r5, #4]
   1bb78:	stm	sp, {r3, r7, fp, lr}
   1bb7c:	mvn	r3, #0
   1bb80:	str	ip, [sp, #16]
   1bb84:	bl	18300 <__assert_fail@plt+0x6f1c>
   1bb88:	ldr	r3, [sp, #28]
   1bb8c:	mov	r0, r6
   1bb90:	str	r3, [r8]
   1bb94:	add	sp, sp, #44	; 0x2c
   1bb98:	ldrd	r4, [sp]
   1bb9c:	ldrd	r6, [sp, #8]
   1bba0:	ldrd	r8, [sp, #16]
   1bba4:	ldrd	sl, [sp, #24]
   1bba8:	add	sp, sp, #32
   1bbac:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbb0:	mov	r0, #8
   1bbb4:	mvn	r3, #-2147483648	; 0x80000000
   1bbb8:	add	r1, sp, #36	; 0x24
   1bbbc:	str	r0, [sp]
   1bbc0:	mov	r0, #0
   1bbc4:	bl	1cd0c <__assert_fail@plt+0xb928>
   1bbc8:	ldrd	r2, [r4, #8]
   1bbcc:	mov	r5, r0
   1bbd0:	str	r0, [r4]
   1bbd4:	strd	r2, [r0]
   1bbd8:	b	1bac4 <__assert_fail@plt+0xa6e0>
   1bbdc:	muleq	r3, ip, r1
   1bbe0:	strd	r4, [sp, #-16]!
   1bbe4:	mov	r5, r1
   1bbe8:	mov	r1, #0
   1bbec:	mov	r4, r2
   1bbf0:	str	r6, [sp, #8]
   1bbf4:	str	lr, [sp, #12]
   1bbf8:	bl	11354 <setlocale@plt>
   1bbfc:	subs	r6, r0, #0
   1bc00:	beq	1bc80 <__assert_fail@plt+0xa89c>
   1bc04:	bl	11294 <strlen@plt>
   1bc08:	cmp	r4, r0
   1bc0c:	bhi	1bc2c <__assert_fail@plt+0xa848>
   1bc10:	cmp	r4, #0
   1bc14:	moveq	r0, #34	; 0x22
   1bc18:	bne	1bc50 <__assert_fail@plt+0xa86c>
   1bc1c:	ldrd	r4, [sp]
   1bc20:	ldr	r6, [sp, #8]
   1bc24:	add	sp, sp, #12
   1bc28:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc2c:	add	r2, r0, #1
   1bc30:	mov	r1, r6
   1bc34:	mov	r0, r5
   1bc38:	bl	1112c <memcpy@plt>
   1bc3c:	ldrd	r4, [sp]
   1bc40:	mov	r0, #0
   1bc44:	ldr	r6, [sp, #8]
   1bc48:	add	sp, sp, #12
   1bc4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc50:	sub	r4, r4, #1
   1bc54:	mov	r1, r6
   1bc58:	mov	r2, r4
   1bc5c:	mov	r0, r5
   1bc60:	bl	1112c <memcpy@plt>
   1bc64:	mov	r3, #0
   1bc68:	mov	r0, #34	; 0x22
   1bc6c:	strb	r3, [r5, r4]
   1bc70:	ldrd	r4, [sp]
   1bc74:	ldr	r6, [sp, #8]
   1bc78:	add	sp, sp, #12
   1bc7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc80:	cmp	r4, #0
   1bc84:	mov	r0, #22
   1bc88:	strbne	r6, [r5]
   1bc8c:	ldrd	r4, [sp]
   1bc90:	ldr	r6, [sp, #8]
   1bc94:	add	sp, sp, #12
   1bc98:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc9c:	mov	r1, #0
   1bca0:	b	11354 <setlocale@plt>
   1bca4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bca8:	strd	r6, [sp, #8]
   1bcac:	mov	r6, r0
   1bcb0:	movw	r0, #5216	; 0x1460
   1bcb4:	movt	r0, #2
   1bcb8:	str	r8, [sp, #16]
   1bcbc:	str	lr, [sp, #20]
   1bcc0:	bl	11210 <getenv@plt>
   1bcc4:	subs	r5, r0, #0
   1bcc8:	ldrb	r3, [r6, #4]
   1bccc:	beq	1bd84 <__assert_fail@plt+0xa9a0>
   1bcd0:	cmp	r3, #0
   1bcd4:	beq	1bd08 <__assert_fail@plt+0xa924>
   1bcd8:	mov	r1, r5
   1bcdc:	add	r0, r6, #5
   1bce0:	bl	110c0 <strcmp@plt>
   1bce4:	cmp	r0, #0
   1bce8:	bne	1bd08 <__assert_fail@plt+0xa924>
   1bcec:	mov	r4, #1
   1bcf0:	mov	r0, r4
   1bcf4:	ldrd	r4, [sp]
   1bcf8:	ldrd	r6, [sp, #8]
   1bcfc:	ldr	r8, [sp, #16]
   1bd00:	add	sp, sp, #20
   1bd04:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd08:	mov	r0, r5
   1bd0c:	bl	11294 <strlen@plt>
   1bd10:	add	r7, r0, #1
   1bd14:	cmp	r7, #58	; 0x3a
   1bd18:	movcs	r0, r7
   1bd1c:	movcc	r0, #58	; 0x3a
   1bd20:	add	r0, r0, #9
   1bd24:	bic	r0, r0, #3
   1bd28:	bl	1f800 <__assert_fail@plt+0xe41c>
   1bd2c:	subs	r4, r0, #0
   1bd30:	beq	1bda4 <__assert_fail@plt+0xa9c0>
   1bd34:	mov	r8, #0
   1bd38:	mov	ip, #1
   1bd3c:	add	r3, r4, #5
   1bd40:	mov	r1, r5
   1bd44:	mov	r0, r3
   1bd48:	mov	r2, r7
   1bd4c:	str	r8, [r4]
   1bd50:	strh	ip, [r4, #4]
   1bd54:	bl	1112c <memcpy@plt>
   1bd58:	strb	r8, [r0, r7]
   1bd5c:	ldrb	r3, [r6, #4]
   1bd60:	cmp	r3, #0
   1bd64:	bne	1bdac <__assert_fail@plt+0xa9c8>
   1bd68:	movw	r0, #5216	; 0x1460
   1bd6c:	movt	r0, #2
   1bd70:	bl	113b4 <unsetenv@plt>
   1bd74:	cmp	r0, #0
   1bd78:	bne	1bdc8 <__assert_fail@plt+0xa9e4>
   1bd7c:	bl	111b0 <tzset@plt>
   1bd80:	b	1bcf0 <__assert_fail@plt+0xa90c>
   1bd84:	cmp	r3, #0
   1bd88:	beq	1bcec <__assert_fail@plt+0xa908>
   1bd8c:	mov	r0, #64	; 0x40
   1bd90:	bl	1f800 <__assert_fail@plt+0xe41c>
   1bd94:	subs	r4, r0, #0
   1bd98:	strne	r5, [r4]
   1bd9c:	strhne	r5, [r4, #4]
   1bda0:	bne	1bd5c <__assert_fail@plt+0xa978>
   1bda4:	mov	r4, #0
   1bda8:	b	1bcf0 <__assert_fail@plt+0xa90c>
   1bdac:	add	r1, r6, #5
   1bdb0:	movw	r0, #5216	; 0x1460
   1bdb4:	movt	r0, #2
   1bdb8:	mov	r2, #1
   1bdbc:	bl	112ac <setenv@plt>
   1bdc0:	cmp	r0, #0
   1bdc4:	beq	1bd7c <__assert_fail@plt+0xa998>
   1bdc8:	bl	112c4 <__errno_location@plt>
   1bdcc:	cmp	r4, #1
   1bdd0:	mov	r5, r0
   1bdd4:	ldr	r6, [r0]
   1bdd8:	beq	1bdf0 <__assert_fail@plt+0xaa0c>
   1bddc:	mov	r0, r4
   1bde0:	ldr	r4, [r4]
   1bde4:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1bde8:	cmp	r4, #0
   1bdec:	bne	1bddc <__assert_fail@plt+0xa9f8>
   1bdf0:	mov	r4, #0
   1bdf4:	str	r6, [r5]
   1bdf8:	b	1bcf0 <__assert_fail@plt+0xa90c>
   1bdfc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1be00:	strd	r6, [sp, #8]
   1be04:	ldr	r6, [r1, #40]	; 0x28
   1be08:	strd	r8, [sp, #16]
   1be0c:	str	sl, [sp, #24]
   1be10:	str	lr, [sp, #28]
   1be14:	cmp	r6, #0
   1be18:	beq	1bf28 <__assert_fail@plt+0xab44>
   1be1c:	cmp	r1, r6
   1be20:	mov	r7, r1
   1be24:	mov	r5, r0
   1be28:	bhi	1be38 <__assert_fail@plt+0xaa54>
   1be2c:	add	r3, r1, #44	; 0x2c
   1be30:	cmp	r6, r3
   1be34:	bcc	1bf28 <__assert_fail@plt+0xab44>
   1be38:	ldrb	r3, [r6]
   1be3c:	cmp	r3, #0
   1be40:	addne	r4, r5, #5
   1be44:	beq	1bf1c <__assert_fail@plt+0xab38>
   1be48:	mov	r1, r6
   1be4c:	mov	r0, r4
   1be50:	bl	110c0 <strcmp@plt>
   1be54:	cmp	r0, #0
   1be58:	add	r2, r5, #5
   1be5c:	mov	r0, r4
   1be60:	beq	1befc <__assert_fail@plt+0xab18>
   1be64:	ldrb	r3, [r4]
   1be68:	cmp	r3, #0
   1be6c:	bne	1be84 <__assert_fail@plt+0xaaa0>
   1be70:	cmp	r4, r2
   1be74:	bne	1bf30 <__assert_fail@plt+0xab4c>
   1be78:	ldrb	r3, [r5, #4]
   1be7c:	cmp	r3, #0
   1be80:	beq	1bf30 <__assert_fail@plt+0xab4c>
   1be84:	bl	11294 <strlen@plt>
   1be88:	add	r0, r0, #1
   1be8c:	ldrb	r3, [r4, r0]!
   1be90:	cmp	r3, #0
   1be94:	bne	1be48 <__assert_fail@plt+0xaa64>
   1be98:	ldr	r3, [r5]
   1be9c:	cmp	r3, #0
   1bea0:	addne	r4, r3, #5
   1bea4:	movne	r5, r3
   1bea8:	b	1be48 <__assert_fail@plt+0xaa64>
   1beac:	cmp	r8, #58	; 0x3a
   1beb0:	movcs	r0, r8
   1beb4:	movcc	r0, #58	; 0x3a
   1beb8:	add	r0, r0, #9
   1bebc:	bic	r0, r0, #3
   1bec0:	bl	1f800 <__assert_fail@plt+0xe41c>
   1bec4:	subs	r9, r0, #0
   1bec8:	beq	1bf68 <__assert_fail@plt+0xab84>
   1becc:	mov	sl, #0
   1bed0:	mov	r3, #1
   1bed4:	add	r4, r9, #5
   1bed8:	mov	r1, r6
   1bedc:	mov	r0, r4
   1bee0:	mov	r2, r8
   1bee4:	str	sl, [r9]
   1bee8:	strh	r3, [r9, #4]
   1beec:	bl	1112c <memcpy@plt>
   1bef0:	strb	sl, [r4, r8]
   1bef4:	str	r9, [r5]
   1bef8:	strb	sl, [r9, #4]
   1befc:	mov	r0, #1
   1bf00:	str	r4, [r7, #40]	; 0x28
   1bf04:	ldrd	r4, [sp]
   1bf08:	ldrd	r6, [sp, #8]
   1bf0c:	ldrd	r8, [sp, #16]
   1bf10:	ldr	sl, [sp, #24]
   1bf14:	add	sp, sp, #28
   1bf18:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf1c:	movw	r4, #356	; 0x164
   1bf20:	movt	r4, #2
   1bf24:	b	1befc <__assert_fail@plt+0xab18>
   1bf28:	mov	r0, #1
   1bf2c:	b	1bf04 <__assert_fail@plt+0xab20>
   1bf30:	mov	r0, r6
   1bf34:	bl	11294 <strlen@plt>
   1bf38:	add	r3, r5, #64	; 0x40
   1bf3c:	add	r8, r0, #1
   1bf40:	sub	r3, r3, r4
   1bf44:	cmp	r3, r8
   1bf48:	ble	1beac <__assert_fail@plt+0xaac8>
   1bf4c:	mov	r1, r6
   1bf50:	mov	r2, r8
   1bf54:	mov	r0, r4
   1bf58:	bl	1112c <memcpy@plt>
   1bf5c:	mov	r3, #0
   1bf60:	strb	r3, [r4, r8]
   1bf64:	b	1befc <__assert_fail@plt+0xab18>
   1bf68:	mov	r0, r9
   1bf6c:	str	r9, [r5]
   1bf70:	b	1bf04 <__assert_fail@plt+0xab20>
   1bf74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bf78:	strd	r6, [sp, #8]
   1bf7c:	subs	r6, r0, #0
   1bf80:	str	r8, [sp, #16]
   1bf84:	str	lr, [sp, #20]
   1bf88:	beq	1bff4 <__assert_fail@plt+0xac10>
   1bf8c:	bl	11294 <strlen@plt>
   1bf90:	add	r5, r0, #1
   1bf94:	cmp	r5, #58	; 0x3a
   1bf98:	movcs	r0, r5
   1bf9c:	movcc	r0, #58	; 0x3a
   1bfa0:	add	r0, r0, #9
   1bfa4:	bic	r0, r0, #3
   1bfa8:	bl	1f800 <__assert_fail@plt+0xe41c>
   1bfac:	subs	r4, r0, #0
   1bfb0:	beq	1bfdc <__assert_fail@plt+0xabf8>
   1bfb4:	mov	r7, #0
   1bfb8:	mov	ip, #1
   1bfbc:	add	r3, r4, #5
   1bfc0:	mov	r1, r6
   1bfc4:	mov	r0, r3
   1bfc8:	mov	r2, r5
   1bfcc:	str	r7, [r4]
   1bfd0:	strh	ip, [r4, #4]
   1bfd4:	bl	1112c <memcpy@plt>
   1bfd8:	strb	r7, [r0, r5]
   1bfdc:	mov	r0, r4
   1bfe0:	ldrd	r4, [sp]
   1bfe4:	ldrd	r6, [sp, #8]
   1bfe8:	ldr	r8, [sp, #16]
   1bfec:	add	sp, sp, #20
   1bff0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bff4:	mov	r0, #64	; 0x40
   1bff8:	bl	1f800 <__assert_fail@plt+0xe41c>
   1bffc:	subs	r4, r0, #0
   1c000:	strne	r6, [r4]
   1c004:	strhne	r6, [r4, #4]
   1c008:	b	1bfdc <__assert_fail@plt+0xabf8>
   1c00c:	cmp	r0, #1
   1c010:	bxeq	lr
   1c014:	cmp	r0, #0
   1c018:	bxeq	lr
   1c01c:	str	r4, [sp, #-8]!
   1c020:	str	lr, [sp, #4]
   1c024:	ldr	r4, [r0]
   1c028:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1c02c:	subs	r0, r4, #0
   1c030:	bne	1c024 <__assert_fail@plt+0xac40>
   1c034:	ldr	r4, [sp]
   1c038:	add	sp, sp, #4
   1c03c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c040:	subs	ip, r0, #0
   1c044:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c048:	strd	r6, [sp, #8]
   1c04c:	mov	r6, r1
   1c050:	str	r8, [sp, #16]
   1c054:	str	lr, [sp, #20]
   1c058:	beq	1c13c <__assert_fail@plt+0xad58>
   1c05c:	mov	r5, r2
   1c060:	mov	r7, ip
   1c064:	bl	1bca4 <__assert_fail@plt+0xa8c0>
   1c068:	subs	r4, r0, #0
   1c06c:	beq	1c110 <__assert_fail@plt+0xad2c>
   1c070:	mov	r0, r6
   1c074:	mov	r1, r5
   1c078:	bl	11180 <localtime_r@plt>
   1c07c:	cmp	r0, #0
   1c080:	beq	1c104 <__assert_fail@plt+0xad20>
   1c084:	mov	r0, r7
   1c088:	mov	r1, r5
   1c08c:	bl	1bdfc <__assert_fail@plt+0xaa18>
   1c090:	subs	r7, r0, #0
   1c094:	beq	1c104 <__assert_fail@plt+0xad20>
   1c098:	cmp	r4, #1
   1c09c:	beq	1c0fc <__assert_fail@plt+0xad18>
   1c0a0:	bl	112c4 <__errno_location@plt>
   1c0a4:	ldrb	r3, [r4, #4]
   1c0a8:	mov	r6, r0
   1c0ac:	movw	r0, #5216	; 0x1460
   1c0b0:	movt	r0, #2
   1c0b4:	ldr	r8, [r6]
   1c0b8:	cmp	r3, #0
   1c0bc:	beq	1c128 <__assert_fail@plt+0xad44>
   1c0c0:	mov	r2, #1
   1c0c4:	add	r1, r4, #5
   1c0c8:	bl	112ac <setenv@plt>
   1c0cc:	cmp	r0, #0
   1c0d0:	beq	1c134 <__assert_fail@plt+0xad50>
   1c0d4:	ldr	r8, [r6]
   1c0d8:	mov	r7, #0
   1c0dc:	mov	r0, r4
   1c0e0:	ldr	r4, [r4]
   1c0e4:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1c0e8:	cmp	r4, #0
   1c0ec:	bne	1c0dc <__assert_fail@plt+0xacf8>
   1c0f0:	cmp	r7, #0
   1c0f4:	str	r8, [r6]
   1c0f8:	beq	1c110 <__assert_fail@plt+0xad2c>
   1c0fc:	mov	r0, r5
   1c100:	b	1c114 <__assert_fail@plt+0xad30>
   1c104:	cmp	r4, #1
   1c108:	movne	r7, #0
   1c10c:	bne	1c0a0 <__assert_fail@plt+0xacbc>
   1c110:	mov	r0, #0
   1c114:	ldrd	r4, [sp]
   1c118:	ldrd	r6, [sp, #8]
   1c11c:	ldr	r8, [sp, #16]
   1c120:	add	sp, sp, #20
   1c124:	pop	{pc}		; (ldr pc, [sp], #4)
   1c128:	bl	113b4 <unsetenv@plt>
   1c12c:	cmp	r0, #0
   1c130:	bne	1c0d4 <__assert_fail@plt+0xacf0>
   1c134:	bl	111b0 <tzset@plt>
   1c138:	b	1c0dc <__assert_fail@plt+0xacf8>
   1c13c:	mov	r0, r6
   1c140:	mov	r1, r2
   1c144:	ldrd	r4, [sp]
   1c148:	ldrd	r6, [sp, #8]
   1c14c:	ldr	r8, [sp, #16]
   1c150:	ldr	lr, [sp, #20]
   1c154:	add	sp, sp, #24
   1c158:	b	110b4 <gmtime_r@plt>
   1c15c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1c160:	subs	r5, r0, #0
   1c164:	strd	r6, [sp, #8]
   1c168:	mov	r6, r1
   1c16c:	strd	r8, [sp, #16]
   1c170:	str	lr, [sp, #24]
   1c174:	sub	sp, sp, #52	; 0x34
   1c178:	beq	1c2bc <__assert_fail@plt+0xaed8>
   1c17c:	bl	1bca4 <__assert_fail@plt+0xa8c0>
   1c180:	subs	r4, r0, #0
   1c184:	beq	1c2cc <__assert_fail@plt+0xaee8>
   1c188:	ldr	r3, [r6]
   1c18c:	mvn	r2, #0
   1c190:	add	r0, sp, #4
   1c194:	ldr	r1, [r6, #4]
   1c198:	str	r3, [sp, #4]
   1c19c:	str	r2, [sp, #32]
   1c1a0:	ldrd	r2, [r6, #8]
   1c1a4:	str	r1, [sp, #8]
   1c1a8:	ldr	r1, [r6, #16]
   1c1ac:	strd	r2, [sp, #12]
   1c1b0:	ldr	r2, [r6, #20]
   1c1b4:	str	r1, [sp, #20]
   1c1b8:	ldr	r3, [r6, #32]
   1c1bc:	str	r2, [sp, #24]
   1c1c0:	str	r3, [sp, #36]	; 0x24
   1c1c4:	bl	110e4 <mktime@plt>
   1c1c8:	ldr	r3, [sp, #32]
   1c1cc:	mov	r7, r0
   1c1d0:	cmp	r3, #0
   1c1d4:	bge	1c288 <__assert_fail@plt+0xaea4>
   1c1d8:	cmp	r4, #1
   1c1dc:	beq	1c2cc <__assert_fail@plt+0xaee8>
   1c1e0:	mov	r5, #0
   1c1e4:	bl	112c4 <__errno_location@plt>
   1c1e8:	ldrb	r3, [r4, #4]
   1c1ec:	mov	r8, r0
   1c1f0:	movw	r0, #5216	; 0x1460
   1c1f4:	movt	r0, #2
   1c1f8:	ldr	r9, [r8]
   1c1fc:	cmp	r3, #0
   1c200:	beq	1c2b4 <__assert_fail@plt+0xaed0>
   1c204:	mov	r2, #1
   1c208:	add	r1, r4, #5
   1c20c:	bl	112ac <setenv@plt>
   1c210:	cmp	r0, #0
   1c214:	bne	1c2a8 <__assert_fail@plt+0xaec4>
   1c218:	bl	111b0 <tzset@plt>
   1c21c:	mov	r0, r4
   1c220:	ldr	r4, [r4]
   1c224:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1c228:	cmp	r4, #0
   1c22c:	bne	1c21c <__assert_fail@plt+0xae38>
   1c230:	cmp	r5, #0
   1c234:	str	r9, [r8]
   1c238:	beq	1c2cc <__assert_fail@plt+0xaee8>
   1c23c:	ldrd	r0, [sp, #4]
   1c240:	ldrd	r2, [sp, #12]
   1c244:	ldrd	r4, [sp, #20]
   1c248:	strd	r0, [r6]
   1c24c:	ldrd	r0, [sp, #28]
   1c250:	strd	r2, [r6, #8]
   1c254:	ldrd	r2, [sp, #36]	; 0x24
   1c258:	strd	r4, [r6, #16]
   1c25c:	ldr	ip, [sp, #44]	; 0x2c
   1c260:	strd	r0, [r6, #24]
   1c264:	strd	r2, [r6, #32]
   1c268:	str	ip, [r6, #40]	; 0x28
   1c26c:	mov	r0, r7
   1c270:	add	sp, sp, #52	; 0x34
   1c274:	ldrd	r4, [sp]
   1c278:	ldrd	r6, [sp, #8]
   1c27c:	ldrd	r8, [sp, #16]
   1c280:	add	sp, sp, #24
   1c284:	pop	{pc}		; (ldr pc, [sp], #4)
   1c288:	mov	r0, r5
   1c28c:	add	r1, sp, #4
   1c290:	bl	1bdfc <__assert_fail@plt+0xaa18>
   1c294:	subs	r5, r0, #0
   1c298:	beq	1c1d8 <__assert_fail@plt+0xadf4>
   1c29c:	cmp	r4, #1
   1c2a0:	beq	1c23c <__assert_fail@plt+0xae58>
   1c2a4:	b	1c1e4 <__assert_fail@plt+0xae00>
   1c2a8:	mov	r5, #0
   1c2ac:	ldr	r9, [r8]
   1c2b0:	b	1c21c <__assert_fail@plt+0xae38>
   1c2b4:	bl	113b4 <unsetenv@plt>
   1c2b8:	b	1c210 <__assert_fail@plt+0xae2c>
   1c2bc:	mov	r0, r1
   1c2c0:	bl	11378 <timegm@plt>
   1c2c4:	mov	r7, r0
   1c2c8:	b	1c26c <__assert_fail@plt+0xae88>
   1c2cc:	mvn	r7, #0
   1c2d0:	b	1c26c <__assert_fail@plt+0xae88>
   1c2d4:	mov	r2, #3
   1c2d8:	mov	r1, #0
   1c2dc:	b	1f91c <__assert_fail@plt+0xe538>
   1c2e0:	cmp	r1, #0
   1c2e4:	strd	r4, [sp, #-16]!
   1c2e8:	mov	ip, r3
   1c2ec:	str	r6, [sp, #8]
   1c2f0:	mov	r4, r0
   1c2f4:	str	lr, [sp, #12]
   1c2f8:	sub	sp, sp, #32
   1c2fc:	ldr	r5, [sp, #48]	; 0x30
   1c300:	ldr	r6, [sp, #52]	; 0x34
   1c304:	beq	1c448 <__assert_fail@plt+0xb064>
   1c308:	mov	r3, r1
   1c30c:	mov	r1, #1
   1c310:	stm	sp, {r2, ip}
   1c314:	movw	r2, #6140	; 0x17fc
   1c318:	movt	r2, #2
   1c31c:	bl	1130c <__fprintf_chk@plt>
   1c320:	mov	r2, #5
   1c324:	movw	r1, #6160	; 0x1810
   1c328:	movt	r1, #2
   1c32c:	mov	r0, #0
   1c330:	bl	11168 <dcgettext@plt>
   1c334:	movw	ip, #2022	; 0x7e6
   1c338:	mov	r3, r0
   1c33c:	mov	r1, #1
   1c340:	movw	r2, #6888	; 0x1ae8
   1c344:	movt	r2, #2
   1c348:	mov	r0, r4
   1c34c:	str	ip, [sp]
   1c350:	bl	1130c <__fprintf_chk@plt>
   1c354:	mov	r1, r4
   1c358:	mov	r0, #10
   1c35c:	bl	1115c <fputc_unlocked@plt>
   1c360:	mov	r2, #5
   1c364:	movw	r1, #6164	; 0x1814
   1c368:	movt	r1, #2
   1c36c:	mov	r0, #0
   1c370:	bl	11168 <dcgettext@plt>
   1c374:	mov	r2, r0
   1c378:	mov	r1, #1
   1c37c:	movw	r3, #6336	; 0x18c0
   1c380:	movt	r3, #2
   1c384:	mov	r0, r4
   1c388:	bl	1130c <__fprintf_chk@plt>
   1c38c:	mov	r1, r4
   1c390:	mov	r0, #10
   1c394:	bl	1115c <fputc_unlocked@plt>
   1c398:	cmp	r6, #9
   1c39c:	ldrls	pc, [pc, r6, lsl #2]
   1c3a0:	b	1c6b4 <__assert_fail@plt+0xb2d0>
   1c3a4:	andeq	ip, r1, r4, lsr r4
   1c3a8:	andeq	ip, r1, r4, ror #8
   1c3ac:	andeq	ip, r1, r0, lsr #9
   1c3b0:	andeq	ip, r1, r0, ror #9
   1c3b4:	andeq	ip, r1, r8, lsr #10
   1c3b8:	andeq	ip, r1, r0, ror #10
   1c3bc:	andeq	ip, r1, r8, lsr #11
   1c3c0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3c4:	andeq	ip, r1, r4, asr r6
   1c3c8:	andeq	ip, r1, ip, asr #7
   1c3cc:	movw	r1, #6640	; 0x19f0
   1c3d0:	movt	r1, #2
   1c3d4:	mov	r2, #5
   1c3d8:	mov	r0, #0
   1c3dc:	bl	11168 <dcgettext@plt>
   1c3e0:	ldr	lr, [r5, #4]
   1c3e4:	mov	r2, r0
   1c3e8:	mov	r1, #1
   1c3ec:	mov	r0, r4
   1c3f0:	ldr	r3, [r5, #8]
   1c3f4:	ldr	ip, [r5, #32]
   1c3f8:	str	lr, [sp]
   1c3fc:	ldr	lr, [r5, #12]
   1c400:	str	ip, [sp, #28]
   1c404:	ldr	ip, [r5, #28]
   1c408:	str	r3, [sp, #4]
   1c40c:	ldr	r3, [r5, #16]
   1c410:	str	lr, [sp, #8]
   1c414:	ldr	lr, [r5, #20]
   1c418:	str	ip, [sp, #24]
   1c41c:	ldr	ip, [r5, #24]
   1c420:	str	r3, [sp, #12]
   1c424:	ldr	r3, [r5]
   1c428:	str	lr, [sp, #16]
   1c42c:	str	ip, [sp, #20]
   1c430:	bl	1130c <__fprintf_chk@plt>
   1c434:	add	sp, sp, #32
   1c438:	ldrd	r4, [sp]
   1c43c:	ldr	r6, [sp, #8]
   1c440:	add	sp, sp, #12
   1c444:	pop	{pc}		; (ldr pc, [sp], #4)
   1c448:	mov	r3, r2
   1c44c:	mov	r1, #1
   1c450:	str	ip, [sp]
   1c454:	movw	r2, #6152	; 0x1808
   1c458:	movt	r2, #2
   1c45c:	bl	1130c <__fprintf_chk@plt>
   1c460:	b	1c320 <__assert_fail@plt+0xaf3c>
   1c464:	mov	r2, #5
   1c468:	movw	r1, #6372	; 0x18e4
   1c46c:	movt	r1, #2
   1c470:	mov	r0, #0
   1c474:	bl	11168 <dcgettext@plt>
   1c478:	ldr	r3, [r5]
   1c47c:	mov	r2, r0
   1c480:	mov	r1, #1
   1c484:	mov	r0, r4
   1c488:	add	sp, sp, #32
   1c48c:	ldrd	r4, [sp]
   1c490:	ldr	r6, [sp, #8]
   1c494:	ldr	lr, [sp, #12]
   1c498:	add	sp, sp, #16
   1c49c:	b	1130c <__fprintf_chk@plt>
   1c4a0:	mov	r2, #5
   1c4a4:	movw	r1, #6388	; 0x18f4
   1c4a8:	movt	r1, #2
   1c4ac:	mov	r0, #0
   1c4b0:	bl	11168 <dcgettext@plt>
   1c4b4:	ldm	r5, {r3, ip}
   1c4b8:	mov	r2, r0
   1c4bc:	mov	r1, #1
   1c4c0:	mov	r0, r4
   1c4c4:	str	ip, [sp, #48]	; 0x30
   1c4c8:	add	sp, sp, #32
   1c4cc:	ldrd	r4, [sp]
   1c4d0:	ldr	r6, [sp, #8]
   1c4d4:	ldr	lr, [sp, #12]
   1c4d8:	add	sp, sp, #16
   1c4dc:	b	1130c <__fprintf_chk@plt>
   1c4e0:	mov	r2, #5
   1c4e4:	movw	r1, #6412	; 0x190c
   1c4e8:	movt	r1, #2
   1c4ec:	mov	r0, #0
   1c4f0:	bl	11168 <dcgettext@plt>
   1c4f4:	ldm	r5, {r3, lr}
   1c4f8:	mov	r2, r0
   1c4fc:	mov	r1, #1
   1c500:	mov	r0, r4
   1c504:	ldr	ip, [r5, #8]
   1c508:	str	lr, [sp, #48]	; 0x30
   1c50c:	str	ip, [sp, #52]	; 0x34
   1c510:	add	sp, sp, #32
   1c514:	ldrd	r4, [sp]
   1c518:	ldr	r6, [sp, #8]
   1c51c:	ldr	lr, [sp, #12]
   1c520:	add	sp, sp, #16
   1c524:	b	1130c <__fprintf_chk@plt>
   1c528:	mov	r2, #5
   1c52c:	movw	r1, #6440	; 0x1928
   1c530:	movt	r1, #2
   1c534:	mov	r0, #0
   1c538:	bl	11168 <dcgettext@plt>
   1c53c:	ldmib	r5, {r3, ip, lr}
   1c540:	mov	r2, r0
   1c544:	mov	r1, #1
   1c548:	mov	r0, r4
   1c54c:	str	r3, [sp]
   1c550:	ldr	r3, [r5]
   1c554:	stmib	sp, {ip, lr}
   1c558:	bl	1130c <__fprintf_chk@plt>
   1c55c:	b	1c434 <__assert_fail@plt+0xb050>
   1c560:	mov	r2, #5
   1c564:	movw	r1, #6472	; 0x1948
   1c568:	movt	r1, #2
   1c56c:	mov	r0, #0
   1c570:	bl	11168 <dcgettext@plt>
   1c574:	ldmib	r5, {ip, lr}
   1c578:	mov	r2, r0
   1c57c:	mov	r1, #1
   1c580:	mov	r0, r4
   1c584:	ldr	r3, [r5, #16]
   1c588:	str	ip, [sp]
   1c58c:	ldr	ip, [r5, #12]
   1c590:	str	r3, [sp, #12]
   1c594:	ldr	r3, [r5]
   1c598:	str	lr, [sp, #4]
   1c59c:	str	ip, [sp, #8]
   1c5a0:	bl	1130c <__fprintf_chk@plt>
   1c5a4:	b	1c434 <__assert_fail@plt+0xb050>
   1c5a8:	mov	r2, #5
   1c5ac:	movw	r1, #6508	; 0x196c
   1c5b0:	movt	r1, #2
   1c5b4:	mov	r0, #0
   1c5b8:	bl	11168 <dcgettext@plt>
   1c5bc:	ldr	lr, [r5, #4]
   1c5c0:	mov	r2, r0
   1c5c4:	mov	r1, #1
   1c5c8:	mov	r0, r4
   1c5cc:	ldr	r3, [r5, #8]
   1c5d0:	ldr	ip, [r5, #20]
   1c5d4:	str	lr, [sp]
   1c5d8:	ldr	lr, [r5, #12]
   1c5dc:	str	ip, [sp, #16]
   1c5e0:	ldr	ip, [r5, #16]
   1c5e4:	str	r3, [sp, #4]
   1c5e8:	ldr	r3, [r5]
   1c5ec:	str	lr, [sp, #8]
   1c5f0:	str	ip, [sp, #12]
   1c5f4:	bl	1130c <__fprintf_chk@plt>
   1c5f8:	b	1c434 <__assert_fail@plt+0xb050>
   1c5fc:	mov	r2, #5
   1c600:	movw	r1, #6548	; 0x1994
   1c604:	movt	r1, #2
   1c608:	mov	r0, #0
   1c60c:	bl	11168 <dcgettext@plt>
   1c610:	ldmib	r5, {r3, ip}
   1c614:	mov	r2, r0
   1c618:	mov	r1, #1
   1c61c:	mov	r0, r4
   1c620:	ldr	lr, [r5, #24]
   1c624:	str	r3, [sp]
   1c628:	ldr	r3, [r5, #12]
   1c62c:	str	lr, [sp, #20]
   1c630:	ldr	lr, [r5, #20]
   1c634:	str	ip, [sp, #4]
   1c638:	ldr	ip, [r5, #16]
   1c63c:	str	r3, [sp, #8]
   1c640:	ldr	r3, [r5]
   1c644:	str	ip, [sp, #12]
   1c648:	str	lr, [sp, #16]
   1c64c:	bl	1130c <__fprintf_chk@plt>
   1c650:	b	1c434 <__assert_fail@plt+0xb050>
   1c654:	mov	r2, #5
   1c658:	movw	r1, #6592	; 0x19c0
   1c65c:	movt	r1, #2
   1c660:	mov	r0, #0
   1c664:	bl	11168 <dcgettext@plt>
   1c668:	ldmib	r5, {ip, lr}
   1c66c:	mov	r2, r0
   1c670:	mov	r1, #1
   1c674:	mov	r0, r4
   1c678:	ldr	r3, [r5, #28]
   1c67c:	str	ip, [sp]
   1c680:	ldr	ip, [r5, #12]
   1c684:	str	r3, [sp, #24]
   1c688:	ldr	r3, [r5, #24]
   1c68c:	str	lr, [sp, #4]
   1c690:	ldr	lr, [r5, #16]
   1c694:	str	ip, [sp, #8]
   1c698:	ldr	ip, [r5, #20]
   1c69c:	str	r3, [sp, #20]
   1c6a0:	ldr	r3, [r5]
   1c6a4:	str	lr, [sp, #12]
   1c6a8:	str	ip, [sp, #16]
   1c6ac:	bl	1130c <__fprintf_chk@plt>
   1c6b0:	b	1c434 <__assert_fail@plt+0xb050>
   1c6b4:	movw	r1, #6692	; 0x1a24
   1c6b8:	movt	r1, #2
   1c6bc:	b	1c3d4 <__assert_fail@plt+0xaff0>
   1c6c0:	strd	r4, [sp, #-12]!
   1c6c4:	str	lr, [sp, #8]
   1c6c8:	sub	sp, sp, #12
   1c6cc:	ldr	r5, [sp, #24]
   1c6d0:	ldr	ip, [r5]
   1c6d4:	cmp	ip, #0
   1c6d8:	beq	1c6f4 <__assert_fail@plt+0xb310>
   1c6dc:	mov	lr, r5
   1c6e0:	mov	ip, #0
   1c6e4:	ldr	r4, [lr, #4]!
   1c6e8:	add	ip, ip, #1
   1c6ec:	cmp	r4, #0
   1c6f0:	bne	1c6e4 <__assert_fail@plt+0xb300>
   1c6f4:	stm	sp, {r5, ip}
   1c6f8:	bl	1c2e0 <__assert_fail@plt+0xaefc>
   1c6fc:	add	sp, sp, #12
   1c700:	ldrd	r4, [sp]
   1c704:	add	sp, sp, #8
   1c708:	pop	{pc}		; (ldr pc, [sp], #4)
   1c70c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c710:	sub	sp, sp, #52	; 0x34
   1c714:	ldr	ip, [sp, #56]	; 0x38
   1c718:	ldr	lr, [ip]
   1c71c:	cmp	lr, #0
   1c720:	str	lr, [sp, #8]
   1c724:	beq	1c7bc <__assert_fail@plt+0xb3d8>
   1c728:	ldr	lr, [ip, #4]
   1c72c:	cmp	lr, #0
   1c730:	str	lr, [sp, #12]
   1c734:	beq	1c7d0 <__assert_fail@plt+0xb3ec>
   1c738:	ldr	lr, [ip, #8]
   1c73c:	cmp	lr, #0
   1c740:	str	lr, [sp, #16]
   1c744:	beq	1c7d8 <__assert_fail@plt+0xb3f4>
   1c748:	ldr	lr, [ip, #12]
   1c74c:	cmp	lr, #0
   1c750:	str	lr, [sp, #20]
   1c754:	beq	1c7e0 <__assert_fail@plt+0xb3fc>
   1c758:	ldr	lr, [ip, #16]
   1c75c:	cmp	lr, #0
   1c760:	str	lr, [sp, #24]
   1c764:	beq	1c7e8 <__assert_fail@plt+0xb404>
   1c768:	ldr	lr, [ip, #20]
   1c76c:	cmp	lr, #0
   1c770:	str	lr, [sp, #28]
   1c774:	beq	1c7f0 <__assert_fail@plt+0xb40c>
   1c778:	ldr	lr, [ip, #24]
   1c77c:	cmp	lr, #0
   1c780:	str	lr, [sp, #32]
   1c784:	beq	1c7f8 <__assert_fail@plt+0xb414>
   1c788:	ldr	lr, [ip, #28]
   1c78c:	cmp	lr, #0
   1c790:	str	lr, [sp, #36]	; 0x24
   1c794:	beq	1c800 <__assert_fail@plt+0xb41c>
   1c798:	ldr	lr, [ip, #32]
   1c79c:	cmp	lr, #0
   1c7a0:	str	lr, [sp, #40]	; 0x28
   1c7a4:	beq	1c808 <__assert_fail@plt+0xb424>
   1c7a8:	ldr	ip, [ip, #36]	; 0x24
   1c7ac:	cmp	ip, #0
   1c7b0:	str	ip, [sp, #44]	; 0x2c
   1c7b4:	movne	lr, #10
   1c7b8:	moveq	lr, #9
   1c7bc:	add	ip, sp, #8
   1c7c0:	stm	sp, {ip, lr}
   1c7c4:	bl	1c2e0 <__assert_fail@plt+0xaefc>
   1c7c8:	add	sp, sp, #52	; 0x34
   1c7cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7d0:	mov	lr, #1
   1c7d4:	b	1c7bc <__assert_fail@plt+0xb3d8>
   1c7d8:	mov	lr, #2
   1c7dc:	b	1c7bc <__assert_fail@plt+0xb3d8>
   1c7e0:	mov	lr, #3
   1c7e4:	b	1c7bc <__assert_fail@plt+0xb3d8>
   1c7e8:	mov	lr, #4
   1c7ec:	b	1c7bc <__assert_fail@plt+0xb3d8>
   1c7f0:	mov	lr, #5
   1c7f4:	b	1c7bc <__assert_fail@plt+0xb3d8>
   1c7f8:	mov	lr, #6
   1c7fc:	b	1c7bc <__assert_fail@plt+0xb3d8>
   1c800:	mov	lr, #7
   1c804:	b	1c7bc <__assert_fail@plt+0xb3d8>
   1c808:	mov	lr, #8
   1c80c:	b	1c7bc <__assert_fail@plt+0xb3d8>
   1c810:	push	{r3}		; (str r3, [sp, #-4]!)
   1c814:	push	{lr}		; (str lr, [sp, #-4]!)
   1c818:	sub	sp, sp, #56	; 0x38
   1c81c:	ldr	ip, [sp, #64]	; 0x40
   1c820:	add	r3, sp, #64	; 0x40
   1c824:	str	r3, [sp, #12]
   1c828:	cmp	ip, #0
   1c82c:	str	ip, [sp, #16]
   1c830:	beq	1c8c8 <__assert_fail@plt+0xb4e4>
   1c834:	ldr	ip, [sp, #68]	; 0x44
   1c838:	cmp	ip, #0
   1c83c:	str	ip, [sp, #20]
   1c840:	beq	1c8ec <__assert_fail@plt+0xb508>
   1c844:	ldr	ip, [sp, #72]	; 0x48
   1c848:	cmp	ip, #0
   1c84c:	str	ip, [sp, #24]
   1c850:	beq	1c8f4 <__assert_fail@plt+0xb510>
   1c854:	ldr	ip, [sp, #76]	; 0x4c
   1c858:	cmp	ip, #0
   1c85c:	str	ip, [sp, #28]
   1c860:	beq	1c8fc <__assert_fail@plt+0xb518>
   1c864:	ldr	ip, [sp, #80]	; 0x50
   1c868:	cmp	ip, #0
   1c86c:	str	ip, [sp, #32]
   1c870:	beq	1c904 <__assert_fail@plt+0xb520>
   1c874:	ldr	ip, [sp, #84]	; 0x54
   1c878:	cmp	ip, #0
   1c87c:	str	ip, [sp, #36]	; 0x24
   1c880:	beq	1c90c <__assert_fail@plt+0xb528>
   1c884:	ldr	ip, [sp, #88]	; 0x58
   1c888:	cmp	ip, #0
   1c88c:	str	ip, [sp, #40]	; 0x28
   1c890:	beq	1c914 <__assert_fail@plt+0xb530>
   1c894:	ldr	ip, [sp, #92]	; 0x5c
   1c898:	cmp	ip, #0
   1c89c:	str	ip, [sp, #44]	; 0x2c
   1c8a0:	beq	1c91c <__assert_fail@plt+0xb538>
   1c8a4:	ldr	ip, [sp, #96]	; 0x60
   1c8a8:	cmp	ip, #0
   1c8ac:	str	ip, [sp, #48]	; 0x30
   1c8b0:	beq	1c924 <__assert_fail@plt+0xb540>
   1c8b4:	ldr	r3, [sp, #100]	; 0x64
   1c8b8:	cmp	r3, #0
   1c8bc:	str	r3, [sp, #52]	; 0x34
   1c8c0:	movne	ip, #10
   1c8c4:	moveq	ip, #9
   1c8c8:	ldr	r3, [sp, #60]	; 0x3c
   1c8cc:	add	lr, sp, #16
   1c8d0:	str	lr, [sp]
   1c8d4:	str	ip, [sp, #4]
   1c8d8:	bl	1c2e0 <__assert_fail@plt+0xaefc>
   1c8dc:	add	sp, sp, #56	; 0x38
   1c8e0:	pop	{lr}		; (ldr lr, [sp], #4)
   1c8e4:	add	sp, sp, #4
   1c8e8:	bx	lr
   1c8ec:	mov	ip, #1
   1c8f0:	b	1c8c8 <__assert_fail@plt+0xb4e4>
   1c8f4:	mov	ip, #2
   1c8f8:	b	1c8c8 <__assert_fail@plt+0xb4e4>
   1c8fc:	mov	ip, #3
   1c900:	b	1c8c8 <__assert_fail@plt+0xb4e4>
   1c904:	mov	ip, #4
   1c908:	b	1c8c8 <__assert_fail@plt+0xb4e4>
   1c90c:	mov	ip, #5
   1c910:	b	1c8c8 <__assert_fail@plt+0xb4e4>
   1c914:	mov	ip, #6
   1c918:	b	1c8c8 <__assert_fail@plt+0xb4e4>
   1c91c:	mov	ip, #7
   1c920:	b	1c8c8 <__assert_fail@plt+0xb4e4>
   1c924:	mov	ip, #8
   1c928:	b	1c8c8 <__assert_fail@plt+0xb4e4>
   1c92c:	movw	r3, #8676	; 0x21e4
   1c930:	movt	r3, #3
   1c934:	str	r4, [sp, #-8]!
   1c938:	mov	r0, #10
   1c93c:	ldr	r1, [r3]
   1c940:	str	lr, [sp, #4]
   1c944:	bl	1115c <fputc_unlocked@plt>
   1c948:	mov	r2, #5
   1c94c:	movw	r1, #6752	; 0x1a60
   1c950:	movt	r1, #2
   1c954:	mov	r0, #0
   1c958:	bl	11168 <dcgettext@plt>
   1c95c:	mov	r1, r0
   1c960:	movw	r2, #6772	; 0x1a74
   1c964:	movt	r2, #2
   1c968:	mov	r0, #1
   1c96c:	bl	112f4 <__printf_chk@plt>
   1c970:	mov	r2, #5
   1c974:	movw	r1, #6796	; 0x1a8c
   1c978:	movt	r1, #2
   1c97c:	mov	r0, #0
   1c980:	bl	11168 <dcgettext@plt>
   1c984:	mov	r1, r0
   1c988:	movw	r3, #4544	; 0x11c0
   1c98c:	movt	r3, #2
   1c990:	movw	r2, #4584	; 0x11e8
   1c994:	movt	r2, #2
   1c998:	mov	r0, #1
   1c99c:	bl	112f4 <__printf_chk@plt>
   1c9a0:	mov	r2, #5
   1c9a4:	movw	r1, #6816	; 0x1aa0
   1c9a8:	movt	r1, #2
   1c9ac:	mov	r0, #0
   1c9b0:	bl	11168 <dcgettext@plt>
   1c9b4:	mov	r1, r0
   1c9b8:	movw	r2, #6856	; 0x1ac8
   1c9bc:	movt	r2, #2
   1c9c0:	mov	r0, #1
   1c9c4:	ldr	r4, [sp]
   1c9c8:	ldr	lr, [sp, #4]
   1c9cc:	add	sp, sp, #8
   1c9d0:	b	112f4 <__printf_chk@plt>
   1c9d4:	strd	r4, [sp, #-16]!
   1c9d8:	mov	r4, r0
   1c9dc:	mov	r5, r2
   1c9e0:	str	r6, [sp, #8]
   1c9e4:	mov	r6, r1
   1c9e8:	str	lr, [sp, #12]
   1c9ec:	bl	1fbc0 <__assert_fail@plt+0xe7dc>
   1c9f0:	cmp	r0, #0
   1c9f4:	beq	1ca08 <__assert_fail@plt+0xb624>
   1c9f8:	ldrd	r4, [sp]
   1c9fc:	ldr	r6, [sp, #8]
   1ca00:	add	sp, sp, #12
   1ca04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca08:	cmp	r4, #0
   1ca0c:	beq	1ca1c <__assert_fail@plt+0xb638>
   1ca10:	cmp	r6, #0
   1ca14:	cmpne	r5, #0
   1ca18:	beq	1c9f8 <__assert_fail@plt+0xb614>
   1ca1c:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ca20:	str	r4, [sp, #-8]!
   1ca24:	str	lr, [sp, #4]
   1ca28:	bl	1f800 <__assert_fail@plt+0xe41c>
   1ca2c:	cmp	r0, #0
   1ca30:	beq	1ca40 <__assert_fail@plt+0xb65c>
   1ca34:	ldr	r4, [sp]
   1ca38:	add	sp, sp, #4
   1ca3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca40:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ca44:	str	r4, [sp, #-8]!
   1ca48:	str	lr, [sp, #4]
   1ca4c:	bl	1f800 <__assert_fail@plt+0xe41c>
   1ca50:	cmp	r0, #0
   1ca54:	beq	1ca64 <__assert_fail@plt+0xb680>
   1ca58:	ldr	r4, [sp]
   1ca5c:	add	sp, sp, #4
   1ca60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca64:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ca68:	str	r4, [sp, #-8]!
   1ca6c:	str	lr, [sp, #4]
   1ca70:	bl	1f800 <__assert_fail@plt+0xe41c>
   1ca74:	cmp	r0, #0
   1ca78:	beq	1ca88 <__assert_fail@plt+0xb6a4>
   1ca7c:	ldr	r4, [sp]
   1ca80:	add	sp, sp, #4
   1ca84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca88:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ca8c:	strd	r4, [sp, #-16]!
   1ca90:	mov	r5, r0
   1ca94:	mov	r4, r1
   1ca98:	str	r6, [sp, #8]
   1ca9c:	str	lr, [sp, #12]
   1caa0:	bl	1f83c <__assert_fail@plt+0xe458>
   1caa4:	cmp	r0, #0
   1caa8:	beq	1cabc <__assert_fail@plt+0xb6d8>
   1caac:	ldrd	r4, [sp]
   1cab0:	ldr	r6, [sp, #8]
   1cab4:	add	sp, sp, #12
   1cab8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cabc:	adds	r4, r4, #0
   1cac0:	movne	r4, #1
   1cac4:	cmp	r5, #0
   1cac8:	moveq	r4, #1
   1cacc:	cmp	r4, #0
   1cad0:	beq	1caac <__assert_fail@plt+0xb6c8>
   1cad4:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cad8:	cmp	r1, #0
   1cadc:	orreq	r1, r1, #1
   1cae0:	str	r4, [sp, #-8]!
   1cae4:	str	lr, [sp, #4]
   1cae8:	bl	1f83c <__assert_fail@plt+0xe458>
   1caec:	cmp	r0, #0
   1caf0:	beq	1cb00 <__assert_fail@plt+0xb71c>
   1caf4:	ldr	r4, [sp]
   1caf8:	add	sp, sp, #4
   1cafc:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb00:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cb04:	strd	r4, [sp, #-16]!
   1cb08:	mov	r4, r0
   1cb0c:	mov	r5, r2
   1cb10:	str	r6, [sp, #8]
   1cb14:	mov	r6, r1
   1cb18:	str	lr, [sp, #12]
   1cb1c:	bl	1fbc0 <__assert_fail@plt+0xe7dc>
   1cb20:	cmp	r0, #0
   1cb24:	beq	1cb38 <__assert_fail@plt+0xb754>
   1cb28:	ldrd	r4, [sp]
   1cb2c:	ldr	r6, [sp, #8]
   1cb30:	add	sp, sp, #12
   1cb34:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb38:	cmp	r4, #0
   1cb3c:	beq	1cb4c <__assert_fail@plt+0xb768>
   1cb40:	cmp	r6, #0
   1cb44:	cmpne	r5, #0
   1cb48:	beq	1cb28 <__assert_fail@plt+0xb744>
   1cb4c:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cb50:	cmp	r2, #0
   1cb54:	cmpne	r1, #0
   1cb58:	str	r4, [sp, #-8]!
   1cb5c:	moveq	r2, #1
   1cb60:	str	lr, [sp, #4]
   1cb64:	moveq	r1, r2
   1cb68:	bl	1fbc0 <__assert_fail@plt+0xe7dc>
   1cb6c:	cmp	r0, #0
   1cb70:	beq	1cb80 <__assert_fail@plt+0xb79c>
   1cb74:	ldr	r4, [sp]
   1cb78:	add	sp, sp, #4
   1cb7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb80:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cb84:	mov	r2, r1
   1cb88:	mov	r1, r0
   1cb8c:	str	r4, [sp, #-8]!
   1cb90:	mov	r0, #0
   1cb94:	str	lr, [sp, #4]
   1cb98:	bl	1fbc0 <__assert_fail@plt+0xe7dc>
   1cb9c:	cmp	r0, #0
   1cba0:	beq	1cbb0 <__assert_fail@plt+0xb7cc>
   1cba4:	ldr	r4, [sp]
   1cba8:	add	sp, sp, #4
   1cbac:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbb0:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cbb4:	cmp	r1, #0
   1cbb8:	cmpne	r0, #0
   1cbbc:	str	r4, [sp, #-8]!
   1cbc0:	moveq	r2, #1
   1cbc4:	movne	r2, r1
   1cbc8:	str	lr, [sp, #4]
   1cbcc:	movne	r1, r0
   1cbd0:	moveq	r1, r2
   1cbd4:	mov	r0, #0
   1cbd8:	bl	1fbc0 <__assert_fail@plt+0xe7dc>
   1cbdc:	cmp	r0, #0
   1cbe0:	beq	1cbf0 <__assert_fail@plt+0xb80c>
   1cbe4:	ldr	r4, [sp]
   1cbe8:	add	sp, sp, #4
   1cbec:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbf0:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cbf4:	cmp	r0, #0
   1cbf8:	strd	r4, [sp, #-16]!
   1cbfc:	mov	r5, r1
   1cc00:	ldr	r4, [r1]
   1cc04:	str	r6, [sp, #8]
   1cc08:	str	lr, [sp, #12]
   1cc0c:	beq	1cc54 <__assert_fail@plt+0xb870>
   1cc10:	lsr	r3, r4, #1
   1cc14:	add	r3, r3, #1
   1cc18:	adds	r4, r4, r3
   1cc1c:	bcs	1cc50 <__assert_fail@plt+0xb86c>
   1cc20:	mov	r2, #1
   1cc24:	mov	r1, r4
   1cc28:	bl	1fbc0 <__assert_fail@plt+0xe7dc>
   1cc2c:	cmp	r0, #0
   1cc30:	beq	1cc48 <__assert_fail@plt+0xb864>
   1cc34:	ldr	r6, [sp, #8]
   1cc38:	str	r4, [r5]
   1cc3c:	ldrd	r4, [sp]
   1cc40:	add	sp, sp, #12
   1cc44:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc48:	cmp	r4, #0
   1cc4c:	beq	1cc34 <__assert_fail@plt+0xb850>
   1cc50:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cc54:	cmp	r4, #0
   1cc58:	mov	r2, #1
   1cc5c:	moveq	r4, #64	; 0x40
   1cc60:	mov	r1, r4
   1cc64:	bl	1fbc0 <__assert_fail@plt+0xe7dc>
   1cc68:	cmp	r0, #0
   1cc6c:	bne	1cc34 <__assert_fail@plt+0xb850>
   1cc70:	b	1cc50 <__assert_fail@plt+0xb86c>
   1cc74:	cmp	r0, #0
   1cc78:	strd	r4, [sp, #-16]!
   1cc7c:	mov	r5, r1
   1cc80:	ldr	r4, [r1]
   1cc84:	str	r6, [sp, #8]
   1cc88:	mov	r6, r2
   1cc8c:	str	lr, [sp, #12]
   1cc90:	beq	1ccd8 <__assert_fail@plt+0xb8f4>
   1cc94:	lsr	r3, r4, #1
   1cc98:	add	r3, r3, #1
   1cc9c:	adds	r4, r4, r3
   1cca0:	bcs	1ccd4 <__assert_fail@plt+0xb8f0>
   1cca4:	mov	r1, r4
   1cca8:	bl	1fbc0 <__assert_fail@plt+0xe7dc>
   1ccac:	cmp	r0, #0
   1ccb0:	beq	1ccc8 <__assert_fail@plt+0xb8e4>
   1ccb4:	ldr	r6, [sp, #8]
   1ccb8:	str	r4, [r5]
   1ccbc:	ldrd	r4, [sp]
   1ccc0:	add	sp, sp, #12
   1ccc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccc8:	cmp	r4, #0
   1cccc:	cmpne	r6, #0
   1ccd0:	beq	1ccb4 <__assert_fail@plt+0xb8d0>
   1ccd4:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ccd8:	cmp	r4, #0
   1ccdc:	bne	1ccf0 <__assert_fail@plt+0xb90c>
   1cce0:	mov	r4, #64	; 0x40
   1cce4:	udiv	r4, r4, r2
   1cce8:	cmp	r2, #64	; 0x40
   1ccec:	addhi	r4, r4, #1
   1ccf0:	mov	r2, r6
   1ccf4:	mov	r1, r4
   1ccf8:	mov	r0, #0
   1ccfc:	bl	1fbc0 <__assert_fail@plt+0xe7dc>
   1cd00:	cmp	r0, #0
   1cd04:	bne	1ccb4 <__assert_fail@plt+0xb8d0>
   1cd08:	b	1ccd4 <__assert_fail@plt+0xb8f0>
   1cd0c:	ldr	ip, [r1]
   1cd10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cd14:	strd	r6, [sp, #8]
   1cd18:	mov	r7, r1
   1cd1c:	mov	r6, r0
   1cd20:	str	r8, [sp, #16]
   1cd24:	mvn	r8, r3
   1cd28:	lsr	r8, r8, #31
   1cd2c:	str	lr, [sp, #20]
   1cd30:	asr	r1, ip, #1
   1cd34:	ldr	lr, [sp, #24]
   1cd38:	adds	r4, ip, r1
   1cd3c:	mvnvs	r4, #-2147483648	; 0x80000000
   1cd40:	cmp	r3, r4
   1cd44:	movge	r1, #0
   1cd48:	andlt	r1, r8, #1
   1cd4c:	cmp	r1, #0
   1cd50:	movne	r4, r3
   1cd54:	smull	r0, r1, r4, lr
   1cd58:	cmp	r1, r0, asr #31
   1cd5c:	bne	1ce0c <__assert_fail@plt+0xba28>
   1cd60:	cmp	r0, #63	; 0x3f
   1cd64:	mov	r5, r0
   1cd68:	ble	1cdd8 <__assert_fail@plt+0xb9f4>
   1cd6c:	cmp	r6, #0
   1cd70:	sub	r1, r4, ip
   1cd74:	streq	r6, [r7]
   1cd78:	cmp	r1, r2
   1cd7c:	bge	1cdac <__assert_fail@plt+0xb9c8>
   1cd80:	adds	r4, ip, r2
   1cd84:	bvs	1ce08 <__assert_fail@plt+0xba24>
   1cd88:	cmp	r4, r3
   1cd8c:	movle	r3, #0
   1cd90:	andgt	r3, r8, #1
   1cd94:	cmp	r3, #0
   1cd98:	bne	1ce08 <__assert_fail@plt+0xba24>
   1cd9c:	smull	r0, r1, r4, lr
   1cda0:	cmp	r1, r0, asr #31
   1cda4:	mov	r5, r0
   1cda8:	bne	1ce08 <__assert_fail@plt+0xba24>
   1cdac:	mov	r1, r5
   1cdb0:	mov	r0, r6
   1cdb4:	bl	1f83c <__assert_fail@plt+0xe458>
   1cdb8:	cmp	r0, #0
   1cdbc:	beq	1cdec <__assert_fail@plt+0xba08>
   1cdc0:	ldr	r8, [sp, #16]
   1cdc4:	str	r4, [r7]
   1cdc8:	ldrd	r4, [sp]
   1cdcc:	ldrd	r6, [sp, #8]
   1cdd0:	add	sp, sp, #20
   1cdd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdd8:	mov	r0, #64	; 0x40
   1cddc:	sdiv	r4, r0, lr
   1cde0:	mls	r5, lr, r4, r0
   1cde4:	sub	r5, r0, r5
   1cde8:	b	1cd6c <__assert_fail@plt+0xb988>
   1cdec:	adds	r5, r5, #0
   1cdf0:	movne	r5, #1
   1cdf4:	cmp	r6, #0
   1cdf8:	movne	r6, r5
   1cdfc:	moveq	r6, #1
   1ce00:	cmp	r6, #0
   1ce04:	beq	1cdc0 <__assert_fail@plt+0xb9dc>
   1ce08:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ce0c:	mvn	r0, #-2147483648	; 0x80000000
   1ce10:	b	1cddc <__assert_fail@plt+0xb9f8>
   1ce14:	mov	r1, #1
   1ce18:	str	r4, [sp, #-8]!
   1ce1c:	str	lr, [sp, #4]
   1ce20:	bl	1f78c <__assert_fail@plt+0xe3a8>
   1ce24:	cmp	r0, #0
   1ce28:	beq	1ce38 <__assert_fail@plt+0xba54>
   1ce2c:	ldr	r4, [sp]
   1ce30:	add	sp, sp, #4
   1ce34:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce38:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ce3c:	mov	r1, #1
   1ce40:	str	r4, [sp, #-8]!
   1ce44:	str	lr, [sp, #4]
   1ce48:	bl	1f78c <__assert_fail@plt+0xe3a8>
   1ce4c:	cmp	r0, #0
   1ce50:	beq	1ce60 <__assert_fail@plt+0xba7c>
   1ce54:	ldr	r4, [sp]
   1ce58:	add	sp, sp, #4
   1ce5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce60:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ce64:	str	r4, [sp, #-8]!
   1ce68:	str	lr, [sp, #4]
   1ce6c:	bl	1f78c <__assert_fail@plt+0xe3a8>
   1ce70:	cmp	r0, #0
   1ce74:	beq	1ce84 <__assert_fail@plt+0xbaa0>
   1ce78:	ldr	r4, [sp]
   1ce7c:	add	sp, sp, #4
   1ce80:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce84:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ce88:	str	r4, [sp, #-8]!
   1ce8c:	str	lr, [sp, #4]
   1ce90:	bl	1f78c <__assert_fail@plt+0xe3a8>
   1ce94:	cmp	r0, #0
   1ce98:	beq	1cea8 <__assert_fail@plt+0xbac4>
   1ce9c:	ldr	r4, [sp]
   1cea0:	add	sp, sp, #4
   1cea4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cea8:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1ceac:	strd	r4, [sp, #-16]!
   1ceb0:	mov	r4, r1
   1ceb4:	str	r6, [sp, #8]
   1ceb8:	mov	r6, r0
   1cebc:	mov	r0, r1
   1cec0:	str	lr, [sp, #12]
   1cec4:	bl	1f800 <__assert_fail@plt+0xe41c>
   1cec8:	subs	r5, r0, #0
   1cecc:	beq	1cef0 <__assert_fail@plt+0xbb0c>
   1ced0:	mov	r2, r4
   1ced4:	mov	r1, r6
   1ced8:	bl	1112c <memcpy@plt>
   1cedc:	mov	r0, r5
   1cee0:	ldrd	r4, [sp]
   1cee4:	ldr	r6, [sp, #8]
   1cee8:	add	sp, sp, #12
   1ceec:	pop	{pc}		; (ldr pc, [sp], #4)
   1cef0:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cef4:	strd	r4, [sp, #-16]!
   1cef8:	mov	r4, r1
   1cefc:	str	r6, [sp, #8]
   1cf00:	mov	r6, r0
   1cf04:	mov	r0, r1
   1cf08:	str	lr, [sp, #12]
   1cf0c:	bl	1f800 <__assert_fail@plt+0xe41c>
   1cf10:	subs	r5, r0, #0
   1cf14:	beq	1cf38 <__assert_fail@plt+0xbb54>
   1cf18:	mov	r2, r4
   1cf1c:	mov	r1, r6
   1cf20:	bl	1112c <memcpy@plt>
   1cf24:	mov	r0, r5
   1cf28:	ldrd	r4, [sp]
   1cf2c:	ldr	r6, [sp, #8]
   1cf30:	add	sp, sp, #12
   1cf34:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf38:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cf3c:	strd	r4, [sp, #-16]!
   1cf40:	mov	r4, r1
   1cf44:	str	r6, [sp, #8]
   1cf48:	mov	r6, r0
   1cf4c:	add	r0, r1, #1
   1cf50:	str	lr, [sp, #12]
   1cf54:	bl	1f800 <__assert_fail@plt+0xe41c>
   1cf58:	subs	r5, r0, #0
   1cf5c:	beq	1cf88 <__assert_fail@plt+0xbba4>
   1cf60:	mov	r3, #0
   1cf64:	mov	r1, r6
   1cf68:	mov	r2, r4
   1cf6c:	strb	r3, [r5, r4]
   1cf70:	bl	1112c <memcpy@plt>
   1cf74:	mov	r0, r5
   1cf78:	ldrd	r4, [sp]
   1cf7c:	ldr	r6, [sp, #8]
   1cf80:	add	sp, sp, #12
   1cf84:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf88:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cf8c:	strd	r4, [sp, #-16]!
   1cf90:	str	r6, [sp, #8]
   1cf94:	mov	r6, r0
   1cf98:	str	lr, [sp, #12]
   1cf9c:	bl	11294 <strlen@plt>
   1cfa0:	add	r4, r0, #1
   1cfa4:	mov	r0, r4
   1cfa8:	bl	1f800 <__assert_fail@plt+0xe41c>
   1cfac:	subs	r5, r0, #0
   1cfb0:	beq	1cfd4 <__assert_fail@plt+0xbbf0>
   1cfb4:	mov	r2, r4
   1cfb8:	mov	r1, r6
   1cfbc:	bl	1112c <memcpy@plt>
   1cfc0:	mov	r0, r5
   1cfc4:	ldrd	r4, [sp]
   1cfc8:	ldr	r6, [sp, #8]
   1cfcc:	add	sp, sp, #12
   1cfd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfd4:	bl	1cfd8 <__assert_fail@plt+0xbbf4>
   1cfd8:	movw	r3, #8576	; 0x2180
   1cfdc:	movt	r3, #3
   1cfe0:	str	r4, [sp, #-8]!
   1cfe4:	ldr	r4, [r3]
   1cfe8:	mov	r2, #5
   1cfec:	movw	r1, #6936	; 0x1b18
   1cff0:	movt	r1, #2
   1cff4:	mov	r0, #0
   1cff8:	str	lr, [sp, #4]
   1cffc:	bl	11168 <dcgettext@plt>
   1d000:	mov	r3, r0
   1d004:	movw	r2, #5800	; 0x16a8
   1d008:	movt	r2, #2
   1d00c:	mov	r1, #0
   1d010:	mov	r0, r4
   1d014:	bl	11204 <error@plt>
   1d018:	bl	113cc <abort@plt>
   1d01c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d020:	strd	r6, [sp, #8]
   1d024:	mov	r6, r2
   1d028:	mov	r7, r3
   1d02c:	str	r8, [sp, #16]
   1d030:	mov	r2, r1
   1d034:	mov	r1, #0
   1d038:	str	lr, [sp, #20]
   1d03c:	sub	sp, sp, #16
   1d040:	mov	r8, r0
   1d044:	ldr	ip, [sp, #48]	; 0x30
   1d048:	add	r3, sp, #8
   1d04c:	str	ip, [sp]
   1d050:	bl	1d2ec <__assert_fail@plt+0xbf08>
   1d054:	subs	r4, r0, #0
   1d058:	bne	1d0a8 <__assert_fail@plt+0xbcc4>
   1d05c:	ldrd	r4, [sp, #8]
   1d060:	ldrd	r0, [sp, #40]	; 0x28
   1d064:	cmp	r4, r6
   1d068:	sbcs	r3, r5, r7
   1d06c:	movlt	r3, #1
   1d070:	movge	r3, #0
   1d074:	cmp	r0, r4
   1d078:	sbcs	r2, r1, r5
   1d07c:	orrlt	r3, r3, #1
   1d080:	cmp	r3, #0
   1d084:	bne	1d128 <__assert_fail@plt+0xbd44>
   1d088:	mov	r0, r4
   1d08c:	mov	r1, r5
   1d090:	add	sp, sp, #16
   1d094:	ldrd	r4, [sp]
   1d098:	ldrd	r6, [sp, #8]
   1d09c:	ldr	r8, [sp, #16]
   1d0a0:	add	sp, sp, #20
   1d0a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0a8:	bl	112c4 <__errno_location@plt>
   1d0ac:	cmp	r4, #1
   1d0b0:	moveq	r3, #75	; 0x4b
   1d0b4:	moveq	r4, r3
   1d0b8:	streq	r3, [r0]
   1d0bc:	beq	1d118 <__assert_fail@plt+0xbd34>
   1d0c0:	cmp	r4, #3
   1d0c4:	beq	1d10c <__assert_fail@plt+0xbd28>
   1d0c8:	ldr	r3, [sp, #56]	; 0x38
   1d0cc:	ldr	r4, [r0]
   1d0d0:	cmp	r3, #0
   1d0d4:	bne	1d0e0 <__assert_fail@plt+0xbcfc>
   1d0d8:	mov	r3, #1
   1d0dc:	str	r3, [sp, #56]	; 0x38
   1d0e0:	cmp	r4, #22
   1d0e4:	moveq	r4, #0
   1d0e8:	mov	r0, r8
   1d0ec:	bl	1ba4c <__assert_fail@plt+0xa668>
   1d0f0:	movw	r2, #5796	; 0x16a4
   1d0f4:	movt	r2, #2
   1d0f8:	str	r0, [sp]
   1d0fc:	mov	r1, r4
   1d100:	ldr	r3, [sp, #52]	; 0x34
   1d104:	ldr	r0, [sp, #56]	; 0x38
   1d108:	bl	11204 <error@plt>
   1d10c:	mov	r3, #0
   1d110:	mov	r4, r3
   1d114:	str	r3, [r0]
   1d118:	ldr	r3, [sp, #56]	; 0x38
   1d11c:	cmp	r3, #0
   1d120:	bne	1d0e8 <__assert_fail@plt+0xbd04>
   1d124:	b	1d0d8 <__assert_fail@plt+0xbcf4>
   1d128:	bl	112c4 <__errno_location@plt>
   1d12c:	cmp	r4, #1073741824	; 0x40000000
   1d130:	sbcs	r3, r5, #0
   1d134:	bge	1d15c <__assert_fail@plt+0xbd78>
   1d138:	mov	r2, #-1073741824	; 0xc0000000
   1d13c:	mvn	r3, #0
   1d140:	cmp	r4, r2
   1d144:	sbcs	r3, r5, r3
   1d148:	blt	1d15c <__assert_fail@plt+0xbd78>
   1d14c:	mov	r3, #34	; 0x22
   1d150:	mov	r4, r3
   1d154:	str	r3, [r0]
   1d158:	b	1d118 <__assert_fail@plt+0xbd34>
   1d15c:	mov	r3, #75	; 0x4b
   1d160:	str	r3, [r0]
   1d164:	ldr	r3, [sp, #56]	; 0x38
   1d168:	cmp	r3, #0
   1d16c:	movne	r4, #75	; 0x4b
   1d170:	bne	1d0e8 <__assert_fail@plt+0xbd04>
   1d174:	mov	r3, #1
   1d178:	mov	r4, #75	; 0x4b
   1d17c:	str	r3, [sp, #56]	; 0x38
   1d180:	b	1d0e8 <__assert_fail@plt+0xbd04>
   1d184:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d188:	mov	r1, #0
   1d18c:	strd	r6, [sp, #8]
   1d190:	mov	r6, r2
   1d194:	mov	r7, r3
   1d198:	str	r8, [sp, #16]
   1d19c:	mov	r2, #10
   1d1a0:	mov	r8, r0
   1d1a4:	str	lr, [sp, #20]
   1d1a8:	sub	sp, sp, #16
   1d1ac:	ldr	ip, [sp, #48]	; 0x30
   1d1b0:	add	r3, sp, #8
   1d1b4:	str	ip, [sp]
   1d1b8:	bl	1d2ec <__assert_fail@plt+0xbf08>
   1d1bc:	subs	r4, r0, #0
   1d1c0:	bne	1d210 <__assert_fail@plt+0xbe2c>
   1d1c4:	ldrd	r4, [sp, #8]
   1d1c8:	ldrd	r0, [sp, #40]	; 0x28
   1d1cc:	cmp	r4, r6
   1d1d0:	sbcs	r3, r5, r7
   1d1d4:	movlt	r3, #1
   1d1d8:	movge	r3, #0
   1d1dc:	cmp	r0, r4
   1d1e0:	sbcs	r2, r1, r5
   1d1e4:	orrlt	r3, r3, #1
   1d1e8:	cmp	r3, #0
   1d1ec:	bne	1d290 <__assert_fail@plt+0xbeac>
   1d1f0:	mov	r0, r4
   1d1f4:	mov	r1, r5
   1d1f8:	add	sp, sp, #16
   1d1fc:	ldrd	r4, [sp]
   1d200:	ldrd	r6, [sp, #8]
   1d204:	ldr	r8, [sp, #16]
   1d208:	add	sp, sp, #20
   1d20c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d210:	bl	112c4 <__errno_location@plt>
   1d214:	cmp	r4, #1
   1d218:	moveq	r3, #75	; 0x4b
   1d21c:	moveq	r4, r3
   1d220:	streq	r3, [r0]
   1d224:	beq	1d278 <__assert_fail@plt+0xbe94>
   1d228:	cmp	r4, #3
   1d22c:	beq	1d26c <__assert_fail@plt+0xbe88>
   1d230:	ldr	r3, [sp, #56]	; 0x38
   1d234:	ldr	r4, [r0]
   1d238:	cmp	r3, #0
   1d23c:	beq	1d284 <__assert_fail@plt+0xbea0>
   1d240:	cmp	r4, #22
   1d244:	moveq	r4, #0
   1d248:	mov	r0, r8
   1d24c:	bl	1ba4c <__assert_fail@plt+0xa668>
   1d250:	movw	r2, #5796	; 0x16a4
   1d254:	movt	r2, #2
   1d258:	str	r0, [sp]
   1d25c:	mov	r1, r4
   1d260:	ldr	r3, [sp, #52]	; 0x34
   1d264:	ldr	r0, [sp, #56]	; 0x38
   1d268:	bl	11204 <error@plt>
   1d26c:	mov	r3, #0
   1d270:	mov	r4, r3
   1d274:	str	r3, [r0]
   1d278:	ldr	r3, [sp, #56]	; 0x38
   1d27c:	cmp	r3, #0
   1d280:	bne	1d248 <__assert_fail@plt+0xbe64>
   1d284:	mov	r3, #1
   1d288:	str	r3, [sp, #56]	; 0x38
   1d28c:	b	1d240 <__assert_fail@plt+0xbe5c>
   1d290:	bl	112c4 <__errno_location@plt>
   1d294:	cmp	r4, #1073741824	; 0x40000000
   1d298:	sbcs	r3, r5, #0
   1d29c:	bge	1d2c4 <__assert_fail@plt+0xbee0>
   1d2a0:	mov	r2, #-1073741824	; 0xc0000000
   1d2a4:	mvn	r3, #0
   1d2a8:	cmp	r4, r2
   1d2ac:	sbcs	r3, r5, r3
   1d2b0:	blt	1d2c4 <__assert_fail@plt+0xbee0>
   1d2b4:	mov	r3, #34	; 0x22
   1d2b8:	mov	r4, r3
   1d2bc:	str	r3, [r0]
   1d2c0:	b	1d278 <__assert_fail@plt+0xbe94>
   1d2c4:	mov	r3, #75	; 0x4b
   1d2c8:	str	r3, [r0]
   1d2cc:	ldr	r3, [sp, #56]	; 0x38
   1d2d0:	cmp	r3, #0
   1d2d4:	movne	r4, #75	; 0x4b
   1d2d8:	bne	1d248 <__assert_fail@plt+0xbe64>
   1d2dc:	mov	r3, #1
   1d2e0:	mov	r4, #75	; 0x4b
   1d2e4:	str	r3, [sp, #56]	; 0x38
   1d2e8:	b	1d248 <__assert_fail@plt+0xbe64>
   1d2ec:	cmp	r2, #36	; 0x24
   1d2f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d2f4:	strd	r6, [sp, #8]
   1d2f8:	strd	r8, [sp, #16]
   1d2fc:	strd	sl, [sp, #24]
   1d300:	str	lr, [sp, #32]
   1d304:	sub	sp, sp, #36	; 0x24
   1d308:	bhi	1e0e4 <__assert_fail@plt+0xcd00>
   1d30c:	cmp	r1, #0
   1d310:	mov	r5, r1
   1d314:	mov	r6, r2
   1d318:	addeq	r5, sp, #28
   1d31c:	mov	sl, r0
   1d320:	mov	r9, r3
   1d324:	bl	112c4 <__errno_location@plt>
   1d328:	mov	fp, r0
   1d32c:	mov	r4, #0
   1d330:	mov	r2, r6
   1d334:	mov	r3, r4
   1d338:	mov	r1, r5
   1d33c:	mov	r0, sl
   1d340:	str	r4, [fp]
   1d344:	bl	11390 <__strtoll_internal@plt>
   1d348:	ldr	r8, [r5]
   1d34c:	mov	r6, r0
   1d350:	mov	r7, r1
   1d354:	cmp	r8, sl
   1d358:	beq	1d3b0 <__assert_fail@plt+0xbfcc>
   1d35c:	ldr	r4, [fp]
   1d360:	cmp	r4, #0
   1d364:	beq	1d374 <__assert_fail@plt+0xbf90>
   1d368:	cmp	r4, #34	; 0x22
   1d36c:	bne	1d4b4 <__assert_fail@plt+0xc0d0>
   1d370:	mov	r4, #1
   1d374:	ldr	r3, [sp, #72]	; 0x48
   1d378:	cmp	r3, #0
   1d37c:	beq	1d38c <__assert_fail@plt+0xbfa8>
   1d380:	ldrb	sl, [r8]
   1d384:	cmp	sl, #0
   1d388:	bne	1d5b8 <__assert_fail@plt+0xc1d4>
   1d38c:	strd	r6, [r9]
   1d390:	mov	r0, r4
   1d394:	add	sp, sp, #36	; 0x24
   1d398:	ldrd	r4, [sp]
   1d39c:	ldrd	r6, [sp, #8]
   1d3a0:	ldrd	r8, [sp, #16]
   1d3a4:	ldrd	sl, [sp, #24]
   1d3a8:	add	sp, sp, #32
   1d3ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3b0:	ldr	r3, [sp, #72]	; 0x48
   1d3b4:	cmp	r3, r4
   1d3b8:	beq	1d4b4 <__assert_fail@plt+0xc0d0>
   1d3bc:	ldrb	sl, [sl]
   1d3c0:	cmp	sl, r4
   1d3c4:	beq	1d4b4 <__assert_fail@plt+0xc0d0>
   1d3c8:	mov	r1, sl
   1d3cc:	mov	r0, r3
   1d3d0:	bl	112a0 <strchr@plt>
   1d3d4:	cmp	r0, r4
   1d3d8:	movne	r6, #1
   1d3dc:	movne	r7, #0
   1d3e0:	beq	1d4b4 <__assert_fail@plt+0xc0d0>
   1d3e4:	sub	fp, sl, #69	; 0x45
   1d3e8:	cmp	fp, #47	; 0x2f
   1d3ec:	ldrls	pc, [pc, fp, lsl #2]
   1d3f0:	b	1d5d4 <__assert_fail@plt+0xc1f0>
   1d3f4:			; <UNDEFINED> instruction: 0x0001d4bc
   1d3f8:	ldrdeq	sp, [r1], -r4
   1d3fc:			; <UNDEFINED> instruction: 0x0001d4bc
   1d400:	ldrdeq	sp, [r1], -r4
   1d404:	ldrdeq	sp, [r1], -r4
   1d408:	ldrdeq	sp, [r1], -r4
   1d40c:			; <UNDEFINED> instruction: 0x0001d4bc
   1d410:	ldrdeq	sp, [r1], -r4
   1d414:			; <UNDEFINED> instruction: 0x0001d4bc
   1d418:	ldrdeq	sp, [r1], -r4
   1d41c:	ldrdeq	sp, [r1], -r4
   1d420:			; <UNDEFINED> instruction: 0x0001d4bc
   1d424:	ldrdeq	sp, [r1], -r4
   1d428:	ldrdeq	sp, [r1], -r4
   1d42c:	ldrdeq	sp, [r1], -r4
   1d430:			; <UNDEFINED> instruction: 0x0001d4bc
   1d434:	ldrdeq	sp, [r1], -r4
   1d438:	ldrdeq	sp, [r1], -r4
   1d43c:	ldrdeq	sp, [r1], -r4
   1d440:	ldrdeq	sp, [r1], -r4
   1d444:			; <UNDEFINED> instruction: 0x0001d4bc
   1d448:			; <UNDEFINED> instruction: 0x0001d4bc
   1d44c:	ldrdeq	sp, [r1], -r4
   1d450:	ldrdeq	sp, [r1], -r4
   1d454:	ldrdeq	sp, [r1], -r4
   1d458:	ldrdeq	sp, [r1], -r4
   1d45c:	ldrdeq	sp, [r1], -r4
   1d460:	ldrdeq	sp, [r1], -r4
   1d464:	ldrdeq	sp, [r1], -r4
   1d468:	ldrdeq	sp, [r1], -r4
   1d46c:	ldrdeq	sp, [r1], -r4
   1d470:	ldrdeq	sp, [r1], -r4
   1d474:	ldrdeq	sp, [r1], -r4
   1d478:	ldrdeq	sp, [r1], -r4
   1d47c:			; <UNDEFINED> instruction: 0x0001d4bc
   1d480:	ldrdeq	sp, [r1], -r4
   1d484:	ldrdeq	sp, [r1], -r4
   1d488:	ldrdeq	sp, [r1], -r4
   1d48c:			; <UNDEFINED> instruction: 0x0001d4bc
   1d490:	ldrdeq	sp, [r1], -r4
   1d494:			; <UNDEFINED> instruction: 0x0001d4bc
   1d498:	ldrdeq	sp, [r1], -r4
   1d49c:	ldrdeq	sp, [r1], -r4
   1d4a0:	ldrdeq	sp, [r1], -r4
   1d4a4:	ldrdeq	sp, [r1], -r4
   1d4a8:	ldrdeq	sp, [r1], -r4
   1d4ac:	ldrdeq	sp, [r1], -r4
   1d4b0:			; <UNDEFINED> instruction: 0x0001d4bc
   1d4b4:	mov	r4, #4
   1d4b8:	b	1d390 <__assert_fail@plt+0xbfac>
   1d4bc:	mov	r1, #48	; 0x30
   1d4c0:	ldr	r0, [sp, #72]	; 0x48
   1d4c4:	bl	112a0 <strchr@plt>
   1d4c8:	cmp	r0, #0
   1d4cc:	beq	1d5d4 <__assert_fail@plt+0xc1f0>
   1d4d0:	ldrb	r3, [r8, #1]
   1d4d4:	cmp	r3, #68	; 0x44
   1d4d8:	beq	1dcbc <__assert_fail@plt+0xc8d8>
   1d4dc:	cmp	r3, #105	; 0x69
   1d4e0:	beq	1dd04 <__assert_fail@plt+0xc920>
   1d4e4:	cmp	r3, #66	; 0x42
   1d4e8:	beq	1dcbc <__assert_fail@plt+0xc8d8>
   1d4ec:	cmp	fp, #47	; 0x2f
   1d4f0:	ldrls	pc, [pc, fp, lsl #2]
   1d4f4:	b	1d5cc <__assert_fail@plt+0xc1e8>
   1d4f8:	ldrdeq	sp, [r1], -ip
   1d4fc:	andeq	sp, r1, ip, asr #11
   1d500:	andeq	sp, r1, r0, lsr #20
   1d504:	andeq	sp, r1, ip, asr #11
   1d508:	andeq	sp, r1, ip, asr #11
   1d50c:	andeq	sp, r1, ip, asr #11
   1d510:	strdeq	sp, [r1], -r0
   1d514:	andeq	sp, r1, ip, asr #11
   1d518:	andeq	sp, r1, ip, ror fp
   1d51c:	andeq	sp, r1, ip, asr #11
   1d520:	andeq	sp, r1, ip, asr #11
   1d524:	andeq	sp, r1, r0, lsl #19
   1d528:	andeq	sp, r1, ip, asr #11
   1d52c:	andeq	sp, r1, ip, asr #11
   1d530:	andeq	sp, r1, ip, asr #11
   1d534:	andeq	sp, r1, r0, asr #21
   1d538:	andeq	sp, r1, ip, asr #11
   1d53c:	andeq	sp, r1, ip, asr #11
   1d540:	andeq	sp, r1, ip, asr #11
   1d544:	andeq	sp, r1, ip, asr #11
   1d548:			; <UNDEFINED> instruction: 0x0001d8bc
   1d54c:	andeq	sp, r1, r4, asr #13
   1d550:	andeq	sp, r1, ip, asr #11
   1d554:	andeq	sp, r1, ip, asr #11
   1d558:	andeq	sp, r1, ip, asr #11
   1d55c:	andeq	sp, r1, ip, asr #11
   1d560:	andeq	sp, r1, ip, asr #11
   1d564:	andeq	sp, r1, ip, asr #11
   1d568:	andeq	sp, r1, ip, asr #11
   1d56c:	andeq	sp, r1, ip, lsl #17
   1d570:	andeq	sp, r1, ip, ror ip
   1d574:	andeq	sp, r1, ip, asr #11
   1d578:	andeq	sp, r1, ip, asr #11
   1d57c:	andeq	sp, r1, ip, asr #11
   1d580:	andeq	sp, r1, r0, lsr #20
   1d584:	andeq	sp, r1, ip, asr #11
   1d588:	andeq	sp, r1, ip, asr #11
   1d58c:	andeq	sp, r1, ip, asr #11
   1d590:	strdeq	sp, [r1], -r0
   1d594:	andeq	sp, r1, ip, asr #11
   1d598:	andeq	sp, r1, ip, ror fp
   1d59c:	andeq	sp, r1, ip, asr #11
   1d5a0:	andeq	sp, r1, ip, asr #11
   1d5a4:	andeq	sp, r1, ip, asr #11
   1d5a8:	andeq	sp, r1, ip, asr #11
   1d5ac:	andeq	sp, r1, ip, asr #11
   1d5b0:	andeq	sp, r1, ip, asr #11
   1d5b4:	andeq	sp, r1, r0, asr #21
   1d5b8:	mov	r0, r3
   1d5bc:	mov	r1, sl
   1d5c0:	bl	112a0 <strchr@plt>
   1d5c4:	cmp	r0, #0
   1d5c8:	bne	1d3e4 <__assert_fail@plt+0xc000>
   1d5cc:	orr	r4, r4, #2
   1d5d0:	b	1d38c <__assert_fail@plt+0xbfa8>
   1d5d4:	mov	fp, #1
   1d5d8:	mov	lr, #1024	; 0x400
   1d5dc:	sub	sl, sl, #66	; 0x42
   1d5e0:	cmp	sl, #53	; 0x35
   1d5e4:	ldrls	pc, [pc, sl, lsl #2]
   1d5e8:	b	1d5cc <__assert_fail@plt+0xc1e8>
   1d5ec:	andeq	sp, r1, r0, ror #22
   1d5f0:	andeq	sp, r1, ip, asr #11
   1d5f4:	andeq	sp, r1, ip, asr #11
   1d5f8:	andeq	sp, r1, r4, ror #23
   1d5fc:	andeq	sp, r1, ip, asr #11
   1d600:	andeq	sp, r1, r8, lsr #20
   1d604:	andeq	sp, r1, ip, asr #11
   1d608:	andeq	sp, r1, ip, asr #11
   1d60c:	andeq	sp, r1, ip, asr #11
   1d610:	strdeq	sp, [r1], -r8
   1d614:	andeq	sp, r1, ip, asr #11
   1d618:	andeq	sp, r1, r4, lsl #23
   1d61c:	andeq	sp, r1, ip, asr #11
   1d620:	andeq	sp, r1, ip, asr #11
   1d624:	andeq	sp, r1, r8, lsl #19
   1d628:	andeq	sp, r1, ip, asr #11
   1d62c:	andeq	sp, r1, ip, asr #11
   1d630:	andeq	sp, r1, ip, asr #11
   1d634:	andeq	sp, r1, r8, asr #21
   1d638:	andeq	sp, r1, ip, asr #11
   1d63c:	andeq	sp, r1, ip, asr #11
   1d640:	andeq	sp, r1, ip, asr #11
   1d644:	andeq	sp, r1, ip, asr #11
   1d648:	andeq	sp, r1, r4, asr #17
   1d64c:	andeq	sp, r1, ip, asr #13
   1d650:	andeq	sp, r1, ip, asr #11
   1d654:	andeq	sp, r1, ip, asr #11
   1d658:	andeq	sp, r1, ip, asr #11
   1d65c:	andeq	sp, r1, ip, asr #11
   1d660:	andeq	sp, r1, ip, asr #11
   1d664:	andeq	sp, r1, ip, asr #11
   1d668:	andeq	sp, r1, ip, asr #11
   1d66c:	muleq	r1, r0, r8
   1d670:	ldrdeq	sp, [r1], -r8
   1d674:	andeq	sp, r1, ip, asr #11
   1d678:	andeq	sp, r1, ip, asr #11
   1d67c:	andeq	sp, r1, ip, asr #11
   1d680:	andeq	sp, r1, r8, lsr #20
   1d684:	andeq	sp, r1, ip, asr #11
   1d688:	andeq	sp, r1, ip, asr #11
   1d68c:	andeq	sp, r1, ip, asr #11
   1d690:	strdeq	sp, [r1], -r8
   1d694:	andeq	sp, r1, ip, asr #11
   1d698:	andeq	sp, r1, r4, lsl #23
   1d69c:	andeq	sp, r1, ip, asr #11
   1d6a0:	andeq	sp, r1, ip, asr #11
   1d6a4:	andeq	sp, r1, ip, asr #11
   1d6a8:	andeq	sp, r1, ip, asr #11
   1d6ac:	andeq	sp, r1, ip, asr #11
   1d6b0:	andeq	sp, r1, ip, asr #11
   1d6b4:	andeq	sp, r1, r8, asr #21
   1d6b8:	andeq	sp, r1, ip, asr #11
   1d6bc:	andeq	sp, r1, ip, asr #11
   1d6c0:	andeq	sp, r1, r4, ror #16
   1d6c4:	mov	fp, #1
   1d6c8:	mov	lr, #1024	; 0x400
   1d6cc:	asr	r3, lr, #31
   1d6d0:	mov	r2, lr
   1d6d4:	mov	r1, #0
   1d6d8:	cmp	r7, r6, asr #31
   1d6dc:	strd	r2, [sp]
   1d6e0:	bne	1ddf0 <__assert_fail@plt+0xca0c>
   1d6e4:	smull	r2, r3, r6, lr
   1d6e8:	mov	ip, r2
   1d6ec:	cmp	r1, #0
   1d6f0:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1d6f4:	mov	r6, ip
   1d6f8:	mov	r7, r3
   1d6fc:	cmp	r3, r6, asr #31
   1d700:	mov	ip, r1
   1d704:	bne	1d924 <__assert_fail@plt+0xc540>
   1d708:	smull	r2, r3, r6, lr
   1d70c:	mov	sl, r2
   1d710:	subs	r1, ip, #0
   1d714:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1d718:	cmp	r3, sl, asr #31
   1d71c:	mov	r6, sl
   1d720:	mov	ip, r1
   1d724:	mov	r7, r3
   1d728:	bne	1dc20 <__assert_fail@plt+0xc83c>
   1d72c:	smull	r2, r3, r6, lr
   1d730:	mov	sl, r2
   1d734:	subs	r1, ip, #0
   1d738:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1d73c:	cmp	r3, sl, asr #31
   1d740:	mov	r6, sl
   1d744:	mov	ip, r1
   1d748:	mov	r7, r3
   1d74c:	bne	1d9c4 <__assert_fail@plt+0xc5e0>
   1d750:	smull	r2, r3, r6, lr
   1d754:	mov	sl, r2
   1d758:	subs	r1, ip, #0
   1d75c:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1d760:	cmp	r3, sl, asr #31
   1d764:	mov	r6, sl
   1d768:	mov	ip, r1
   1d76c:	mov	r7, r3
   1d770:	bne	1db04 <__assert_fail@plt+0xc720>
   1d774:	smull	r2, r3, r6, lr
   1d778:	mov	sl, r2
   1d77c:	subs	r1, ip, #0
   1d780:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1d784:	cmp	r3, sl, asr #31
   1d788:	mov	r6, sl
   1d78c:	mov	ip, r1
   1d790:	mov	r7, r3
   1d794:	bne	1da64 <__assert_fail@plt+0xc680>
   1d798:	smull	r2, r3, r6, lr
   1d79c:	mov	sl, r2
   1d7a0:	cmp	ip, #0
   1d7a4:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1d7a8:	cmp	r3, sl, asr #31
   1d7ac:	mov	r0, sl
   1d7b0:	mov	r1, r3
   1d7b4:	bne	1dd1c <__assert_fail@plt+0xc938>
   1d7b8:	smull	r2, r3, sl, lr
   1d7bc:	mov	lr, r2
   1d7c0:	mov	r2, r3
   1d7c4:	cmp	ip, #0
   1d7c8:	moveq	r6, lr
   1d7cc:	moveq	r7, r2
   1d7d0:	bne	1dca0 <__assert_fail@plt+0xc8bc>
   1d7d4:	orr	r4, r4, ip
   1d7d8:	add	r3, r8, fp
   1d7dc:	str	r3, [r5]
   1d7e0:	ldrb	r3, [r8, fp]
   1d7e4:	cmp	r3, #0
   1d7e8:	beq	1d38c <__assert_fail@plt+0xbfa8>
   1d7ec:	b	1d5cc <__assert_fail@plt+0xc1e8>
   1d7f0:	mov	fp, #1
   1d7f4:	mov	lr, #1024	; 0x400
   1d7f8:	cmp	r7, r6, asr #31
   1d7fc:	mov	r0, lr
   1d800:	mov	ip, #0
   1d804:	asr	r1, lr, #31
   1d808:	bne	1dcc8 <__assert_fail@plt+0xc8e4>
   1d80c:	smull	r2, r3, r6, lr
   1d810:	mov	r1, r2
   1d814:	mov	lr, r3
   1d818:	cmp	ip, #0
   1d81c:	bne	1d82c <__assert_fail@plt+0xc448>
   1d820:	mov	r6, r1
   1d824:	mov	r7, lr
   1d828:	b	1d7d8 <__assert_fail@plt+0xc3f4>
   1d82c:	cmp	r6, #0
   1d830:	mov	r4, #1
   1d834:	sbcs	r3, r7, #0
   1d838:	blt	1d858 <__assert_fail@plt+0xc474>
   1d83c:	mvn	r6, #0
   1d840:	mvn	r7, #-2147483648	; 0x80000000
   1d844:	b	1d7d8 <__assert_fail@plt+0xc3f4>
   1d848:	cmp	r0, #0
   1d84c:	mov	r4, #1
   1d850:	sbcs	r3, r1, #0
   1d854:	bge	1d83c <__assert_fail@plt+0xc458>
   1d858:	mov	r6, #0
   1d85c:	mov	r7, #-2147483648	; 0x80000000
   1d860:	b	1d7d8 <__assert_fail@plt+0xc3f4>
   1d864:	cmp	r7, r6, asr #31
   1d868:	mov	r1, #0
   1d86c:	bne	1df88 <__assert_fail@plt+0xcba4>
   1d870:	adds	ip, r6, r6
   1d874:	adc	r3, r7, r7
   1d878:	cmp	r1, #0
   1d87c:	bne	1d82c <__assert_fail@plt+0xc448>
   1d880:	mov	r6, ip
   1d884:	mov	r7, r3
   1d888:	b	1d7d8 <__assert_fail@plt+0xc3f4>
   1d88c:	mov	fp, #1
   1d890:	cmp	r7, r6, asr #31
   1d894:	mov	ip, #0
   1d898:	bne	1dfe0 <__assert_fail@plt+0xcbfc>
   1d89c:	lsl	r3, r7, #9
   1d8a0:	lsl	r2, r6, #9
   1d8a4:	orr	r3, r3, r6, lsr #23
   1d8a8:	cmp	ip, #0
   1d8ac:	bne	1d82c <__assert_fail@plt+0xc448>
   1d8b0:	mov	r6, r2
   1d8b4:	mov	r7, r3
   1d8b8:	b	1d7d8 <__assert_fail@plt+0xc3f4>
   1d8bc:	mov	fp, #1
   1d8c0:	mov	lr, #1024	; 0x400
   1d8c4:	asr	r3, lr, #31
   1d8c8:	mov	r2, lr
   1d8cc:	mov	r1, #0
   1d8d0:	cmp	r7, r6, asr #31
   1d8d4:	strd	r2, [sp]
   1d8d8:	bne	1de70 <__assert_fail@plt+0xca8c>
   1d8dc:	smull	r2, r3, r6, lr
   1d8e0:	mov	ip, r2
   1d8e4:	cmp	r1, #0
   1d8e8:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1d8ec:	mov	r6, ip
   1d8f0:	mov	r7, r3
   1d8f4:	cmp	r3, r6, asr #31
   1d8f8:	mov	ip, r1
   1d8fc:	bne	1e034 <__assert_fail@plt+0xcc50>
   1d900:	smull	r2, r3, r6, lr
   1d904:	mov	sl, r2
   1d908:	subs	r1, ip, #0
   1d90c:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1d910:	cmp	r3, sl, asr #31
   1d914:	mov	r6, sl
   1d918:	mov	ip, r1
   1d91c:	mov	r7, r3
   1d920:	beq	1d708 <__assert_fail@plt+0xc324>
   1d924:	umull	r0, r1, r6, lr
   1d928:	cmp	r3, #0
   1d92c:	umull	r2, r3, lr, r3
   1d930:	strd	r0, [sp, #16]
   1d934:	mov	r0, r2
   1d938:	mov	r1, r3
   1d93c:	strd	r0, [sp, #8]
   1d940:	bge	1d958 <__assert_fail@plt+0xc574>
   1d944:	subs	r3, r0, ip
   1d948:	str	r3, [sp, #8]
   1d94c:	ldr	r3, [sp, #12]
   1d950:	sbc	r3, r3, lr
   1d954:	str	r3, [sp, #12]
   1d958:	ldr	r1, [sp, #8]
   1d95c:	mov	r2, #0
   1d960:	ldr	r3, [sp, #20]
   1d964:	adds	r3, r1, r3
   1d968:	ldr	r1, [sp, #12]
   1d96c:	adc	r2, r1, r2
   1d970:	cmp	r2, r3, asr #31
   1d974:	bne	1e288 <__assert_fail@plt+0xcea4>
   1d978:	ldr	sl, [sp, #16]
   1d97c:	b	1d710 <__assert_fail@plt+0xc32c>
   1d980:	mov	fp, #1
   1d984:	mov	lr, #1024	; 0x400
   1d988:	asr	r3, lr, #31
   1d98c:	mov	r2, lr
   1d990:	mov	r1, #0
   1d994:	cmp	r7, r6, asr #31
   1d998:	strd	r2, [sp]
   1d99c:	bne	1ddb0 <__assert_fail@plt+0xc9cc>
   1d9a0:	smull	r2, r3, r6, lr
   1d9a4:	mov	ip, r2
   1d9a8:	cmp	r1, #0
   1d9ac:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1d9b0:	mov	r6, ip
   1d9b4:	mov	r7, r3
   1d9b8:	cmp	r3, r6, asr #31
   1d9bc:	mov	ip, r1
   1d9c0:	beq	1d750 <__assert_fail@plt+0xc36c>
   1d9c4:	umull	r0, r1, r6, lr
   1d9c8:	cmp	r3, #0
   1d9cc:	umull	r2, r3, lr, r3
   1d9d0:	strd	r0, [sp, #16]
   1d9d4:	mov	r0, r2
   1d9d8:	mov	r1, r3
   1d9dc:	strd	r0, [sp, #8]
   1d9e0:	bge	1d9f8 <__assert_fail@plt+0xc614>
   1d9e4:	subs	r3, r0, ip
   1d9e8:	str	r3, [sp, #8]
   1d9ec:	ldr	r3, [sp, #12]
   1d9f0:	sbc	r3, r3, lr
   1d9f4:	str	r3, [sp, #12]
   1d9f8:	ldr	r1, [sp, #8]
   1d9fc:	mov	r2, #0
   1da00:	ldr	r3, [sp, #20]
   1da04:	adds	r3, r1, r3
   1da08:	ldr	r1, [sp, #12]
   1da0c:	adc	r2, r1, r2
   1da10:	cmp	r2, r3, asr #31
   1da14:	bne	1e1b8 <__assert_fail@plt+0xcdd4>
   1da18:	ldr	sl, [sp, #16]
   1da1c:	b	1d758 <__assert_fail@plt+0xc374>
   1da20:	mov	fp, #1
   1da24:	mov	lr, #1024	; 0x400
   1da28:	asr	r3, lr, #31
   1da2c:	mov	r2, lr
   1da30:	mov	r1, #0
   1da34:	cmp	r7, r6, asr #31
   1da38:	strd	r2, [sp]
   1da3c:	bne	1dd70 <__assert_fail@plt+0xc98c>
   1da40:	smull	r2, r3, r6, lr
   1da44:	mov	ip, r2
   1da48:	cmp	r1, #0
   1da4c:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1da50:	mov	r6, ip
   1da54:	mov	r7, r3
   1da58:	cmp	r3, r6, asr #31
   1da5c:	mov	ip, r1
   1da60:	beq	1d798 <__assert_fail@plt+0xc3b4>
   1da64:	umull	r0, r1, r6, lr
   1da68:	cmp	r3, #0
   1da6c:	umull	r2, r3, lr, r3
   1da70:	strd	r0, [sp, #16]
   1da74:	mov	r0, r2
   1da78:	mov	r1, r3
   1da7c:	strd	r0, [sp, #8]
   1da80:	bge	1da98 <__assert_fail@plt+0xc6b4>
   1da84:	subs	r3, r0, ip
   1da88:	str	r3, [sp, #8]
   1da8c:	ldr	r3, [sp, #12]
   1da90:	sbc	r3, r3, lr
   1da94:	str	r3, [sp, #12]
   1da98:	ldr	r1, [sp, #8]
   1da9c:	mov	r2, #0
   1daa0:	ldr	r3, [sp, #20]
   1daa4:	adds	r3, r1, r3
   1daa8:	ldr	r1, [sp, #12]
   1daac:	adc	r2, r1, r2
   1dab0:	cmp	r2, r3, asr #31
   1dab4:	bne	1e128 <__assert_fail@plt+0xcd44>
   1dab8:	ldr	sl, [sp, #16]
   1dabc:	b	1d7a0 <__assert_fail@plt+0xc3bc>
   1dac0:	mov	fp, #1
   1dac4:	mov	lr, #1024	; 0x400
   1dac8:	asr	r3, lr, #31
   1dacc:	mov	r2, lr
   1dad0:	mov	r1, #0
   1dad4:	cmp	r7, r6, asr #31
   1dad8:	strd	r2, [sp]
   1dadc:	bne	1df48 <__assert_fail@plt+0xcb64>
   1dae0:	smull	r2, r3, r6, lr
   1dae4:	mov	ip, r2
   1dae8:	cmp	r1, #0
   1daec:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1daf0:	mov	r6, ip
   1daf4:	mov	r7, r3
   1daf8:	cmp	r3, r6, asr #31
   1dafc:	mov	ip, r1
   1db00:	beq	1d774 <__assert_fail@plt+0xc390>
   1db04:	umull	r0, r1, r6, lr
   1db08:	cmp	r3, #0
   1db0c:	umull	r2, r3, lr, r3
   1db10:	strd	r0, [sp, #16]
   1db14:	mov	r0, r2
   1db18:	mov	r1, r3
   1db1c:	strd	r0, [sp, #8]
   1db20:	bge	1db38 <__assert_fail@plt+0xc754>
   1db24:	subs	r3, r0, ip
   1db28:	str	r3, [sp, #8]
   1db2c:	ldr	r3, [sp, #12]
   1db30:	sbc	r3, r3, lr
   1db34:	str	r3, [sp, #12]
   1db38:	ldr	r1, [sp, #8]
   1db3c:	mov	r2, #0
   1db40:	ldr	r3, [sp, #20]
   1db44:	adds	r3, r1, r3
   1db48:	ldr	r1, [sp, #12]
   1db4c:	adc	r2, r1, r2
   1db50:	cmp	r2, r3, asr #31
   1db54:	bne	1e170 <__assert_fail@plt+0xcd8c>
   1db58:	ldr	sl, [sp, #16]
   1db5c:	b	1d77c <__assert_fail@plt+0xc398>
   1db60:	cmp	r7, r6, asr #31
   1db64:	mov	ip, #0
   1db68:	bne	1def0 <__assert_fail@plt+0xcb0c>
   1db6c:	lsl	r3, r7, #10
   1db70:	lsl	r2, r6, #10
   1db74:	orr	r3, r3, r6, lsr #22
   1db78:	b	1d8a8 <__assert_fail@plt+0xc4c4>
   1db7c:	mov	fp, #1
   1db80:	mov	lr, #1024	; 0x400
   1db84:	asr	r3, lr, #31
   1db88:	mov	r2, lr
   1db8c:	mov	r1, #0
   1db90:	cmp	r7, r6, asr #31
   1db94:	strd	r2, [sp]
   1db98:	bne	1deb0 <__assert_fail@plt+0xcacc>
   1db9c:	smull	r2, r3, r6, lr
   1dba0:	mov	sl, r2
   1dba4:	subs	ip, r1, #0
   1dba8:	bne	1d82c <__assert_fail@plt+0xc448>
   1dbac:	cmp	r3, sl, asr #31
   1dbb0:	mov	r0, sl
   1dbb4:	mov	r1, r3
   1dbb8:	bne	1e090 <__assert_fail@plt+0xccac>
   1dbbc:	smull	r2, r3, sl, lr
   1dbc0:	mov	lr, r2
   1dbc4:	mov	r2, r3
   1dbc8:	cmp	ip, #0
   1dbcc:	bne	1d848 <__assert_fail@plt+0xc464>
   1dbd0:	mov	r6, lr
   1dbd4:	mov	r7, r2
   1dbd8:	b	1d7d8 <__assert_fail@plt+0xc3f4>
   1dbdc:	mov	fp, #1
   1dbe0:	mov	lr, #1024	; 0x400
   1dbe4:	asr	r3, lr, #31
   1dbe8:	mov	r2, lr
   1dbec:	mov	r1, #0
   1dbf0:	cmp	r7, r6, asr #31
   1dbf4:	strd	r2, [sp]
   1dbf8:	bne	1de30 <__assert_fail@plt+0xca4c>
   1dbfc:	smull	r2, r3, r6, lr
   1dc00:	mov	ip, r2
   1dc04:	cmp	r1, #0
   1dc08:	bne	1dc84 <__assert_fail@plt+0xc8a0>
   1dc0c:	mov	r6, ip
   1dc10:	mov	r7, r3
   1dc14:	cmp	r3, r6, asr #31
   1dc18:	mov	ip, r1
   1dc1c:	beq	1d72c <__assert_fail@plt+0xc348>
   1dc20:	umull	r0, r1, r6, lr
   1dc24:	cmp	r3, #0
   1dc28:	umull	r2, r3, lr, r3
   1dc2c:	strd	r0, [sp, #16]
   1dc30:	mov	r0, r2
   1dc34:	mov	r1, r3
   1dc38:	strd	r0, [sp, #8]
   1dc3c:	bge	1dc54 <__assert_fail@plt+0xc870>
   1dc40:	subs	r3, r0, ip
   1dc44:	str	r3, [sp, #8]
   1dc48:	ldr	r3, [sp, #12]
   1dc4c:	sbc	r3, r3, lr
   1dc50:	str	r3, [sp, #12]
   1dc54:	ldr	r1, [sp, #8]
   1dc58:	mov	r2, #0
   1dc5c:	ldr	r3, [sp, #20]
   1dc60:	adds	r3, r1, r3
   1dc64:	ldr	r1, [sp, #12]
   1dc68:	adc	r2, r1, r2
   1dc6c:	cmp	r2, r3, asr #31
   1dc70:	bne	1e194 <__assert_fail@plt+0xcdb0>
   1dc74:	ldr	sl, [sp, #16]
   1dc78:	b	1d734 <__assert_fail@plt+0xc350>
   1dc7c:	mov	fp, #1
   1dc80:	b	1d7d8 <__assert_fail@plt+0xc3f4>
   1dc84:	cmp	r6, #0
   1dc88:	mov	ip, #1
   1dc8c:	sbcs	r3, r7, #0
   1dc90:	blt	1dcb0 <__assert_fail@plt+0xc8cc>
   1dc94:	mvn	r6, #0
   1dc98:	mvn	r7, #-2147483648	; 0x80000000
   1dc9c:	b	1d7d4 <__assert_fail@plt+0xc3f0>
   1dca0:	cmp	r0, #0
   1dca4:	mov	ip, #1
   1dca8:	sbcs	r3, r1, #0
   1dcac:	bge	1dc94 <__assert_fail@plt+0xc8b0>
   1dcb0:	mov	r6, #0
   1dcb4:	mov	r7, #-2147483648	; 0x80000000
   1dcb8:	b	1d7d4 <__assert_fail@plt+0xc3f0>
   1dcbc:	mov	fp, #2
   1dcc0:	mov	lr, #1000	; 0x3e8
   1dcc4:	b	1d5dc <__assert_fail@plt+0xc1f8>
   1dcc8:	umull	r2, r3, r6, lr
   1dccc:	cmp	r7, #0
   1dcd0:	strd	r2, [sp]
   1dcd4:	umull	r2, r3, lr, r7
   1dcd8:	bge	1dce4 <__assert_fail@plt+0xc900>
   1dcdc:	subs	r2, r2, ip
   1dce0:	sbc	r3, r3, lr
   1dce4:	ldr	lr, [sp, #4]
   1dce8:	mov	sl, #0
   1dcec:	adds	lr, r2, lr
   1dcf0:	adc	sl, r3, sl
   1dcf4:	cmp	sl, lr, asr #31
   1dcf8:	bne	1e248 <__assert_fail@plt+0xce64>
   1dcfc:	ldr	r1, [sp]
   1dd00:	b	1d818 <__assert_fail@plt+0xc434>
   1dd04:	ldrb	r3, [r8, #2]
   1dd08:	mov	lr, #1024	; 0x400
   1dd0c:	cmp	r3, #66	; 0x42
   1dd10:	movne	fp, #1
   1dd14:	moveq	fp, #3
   1dd18:	b	1d5dc <__assert_fail@plt+0xc1f8>
   1dd1c:	cmp	r3, #0
   1dd20:	umull	r6, r7, sl, lr
   1dd24:	umull	r2, r3, lr, r3
   1dd28:	strd	r2, [sp, #8]
   1dd2c:	strd	r6, [sp, #16]
   1dd30:	bge	1dd48 <__assert_fail@plt+0xc964>
   1dd34:	subs	r3, r2, ip
   1dd38:	str	r3, [sp, #8]
   1dd3c:	ldr	r3, [sp, #12]
   1dd40:	sbc	r3, r3, lr
   1dd44:	str	r3, [sp, #12]
   1dd48:	ldr	r3, [sp, #8]
   1dd4c:	mov	lr, #0
   1dd50:	ldr	r6, [sp, #20]
   1dd54:	adds	r2, r3, r6
   1dd58:	ldr	r3, [sp, #12]
   1dd5c:	adc	lr, r3, lr
   1dd60:	cmp	lr, r2, asr #31
   1dd64:	bne	1e1dc <__assert_fail@plt+0xcdf8>
   1dd68:	ldr	lr, [sp, #16]
   1dd6c:	b	1d7c4 <__assert_fail@plt+0xc3e0>
   1dd70:	umull	r2, r3, r6, lr
   1dd74:	cmp	r7, #0
   1dd78:	strd	r2, [sp, #8]
   1dd7c:	umull	r2, r3, lr, r7
   1dd80:	bge	1dd8c <__assert_fail@plt+0xc9a8>
   1dd84:	subs	r2, r2, r1
   1dd88:	sbc	r3, r3, lr
   1dd8c:	ldr	r0, [sp, #12]
   1dd90:	mov	ip, #0
   1dd94:	adds	r0, r2, r0
   1dd98:	adc	ip, r3, ip
   1dd9c:	cmp	ip, r0, asr #31
   1dda0:	bne	1e104 <__assert_fail@plt+0xcd20>
   1dda4:	mov	r3, r0
   1dda8:	ldr	ip, [sp, #8]
   1ddac:	b	1da48 <__assert_fail@plt+0xc664>
   1ddb0:	umull	r2, r3, r6, lr
   1ddb4:	cmp	r7, #0
   1ddb8:	strd	r2, [sp, #8]
   1ddbc:	umull	r2, r3, lr, r7
   1ddc0:	bge	1ddcc <__assert_fail@plt+0xc9e8>
   1ddc4:	subs	r2, r2, r1
   1ddc8:	sbc	r3, r3, lr
   1ddcc:	ldr	r0, [sp, #12]
   1ddd0:	mov	ip, #0
   1ddd4:	adds	r0, r2, r0
   1ddd8:	adc	ip, r3, ip
   1dddc:	cmp	ip, r0, asr #31
   1dde0:	bne	1e264 <__assert_fail@plt+0xce80>
   1dde4:	mov	r3, r0
   1dde8:	ldr	ip, [sp, #8]
   1ddec:	b	1d9a8 <__assert_fail@plt+0xc5c4>
   1ddf0:	umull	r2, r3, r6, lr
   1ddf4:	cmp	r7, #0
   1ddf8:	strd	r2, [sp, #8]
   1ddfc:	umull	r2, r3, lr, r7
   1de00:	bge	1de0c <__assert_fail@plt+0xca28>
   1de04:	subs	r2, r2, r1
   1de08:	sbc	r3, r3, lr
   1de0c:	ldr	r0, [sp, #12]
   1de10:	mov	ip, #0
   1de14:	adds	r0, r2, r0
   1de18:	adc	ip, r3, ip
   1de1c:	cmp	ip, r0, asr #31
   1de20:	bne	1e14c <__assert_fail@plt+0xcd68>
   1de24:	mov	r3, r0
   1de28:	ldr	ip, [sp, #8]
   1de2c:	b	1d6ec <__assert_fail@plt+0xc308>
   1de30:	umull	r2, r3, r6, lr
   1de34:	cmp	r7, #0
   1de38:	strd	r2, [sp, #8]
   1de3c:	umull	r2, r3, lr, r7
   1de40:	bge	1de4c <__assert_fail@plt+0xca68>
   1de44:	subs	r2, r2, r1
   1de48:	sbc	r3, r3, lr
   1de4c:	ldr	r0, [sp, #12]
   1de50:	mov	ip, #0
   1de54:	adds	r0, r2, r0
   1de58:	adc	ip, r3, ip
   1de5c:	cmp	ip, r0, asr #31
   1de60:	bne	1e304 <__assert_fail@plt+0xcf20>
   1de64:	mov	r3, r0
   1de68:	ldr	ip, [sp, #8]
   1de6c:	b	1dc04 <__assert_fail@plt+0xc820>
   1de70:	umull	r2, r3, r6, lr
   1de74:	cmp	r7, #0
   1de78:	strd	r2, [sp, #8]
   1de7c:	umull	r2, r3, lr, r7
   1de80:	bge	1de8c <__assert_fail@plt+0xcaa8>
   1de84:	subs	r2, r2, r1
   1de88:	sbc	r3, r3, lr
   1de8c:	ldr	r0, [sp, #12]
   1de90:	mov	ip, #0
   1de94:	adds	r0, r2, r0
   1de98:	adc	ip, r3, ip
   1de9c:	cmp	ip, r0, asr #31
   1dea0:	bne	1e200 <__assert_fail@plt+0xce1c>
   1dea4:	mov	r3, r0
   1dea8:	ldr	ip, [sp, #8]
   1deac:	b	1d8e4 <__assert_fail@plt+0xc500>
   1deb0:	umull	r2, r3, r6, lr
   1deb4:	cmp	r7, #0
   1deb8:	strd	r2, [sp, #8]
   1debc:	umull	r2, r3, lr, r7
   1dec0:	bge	1decc <__assert_fail@plt+0xcae8>
   1dec4:	subs	r2, r2, r1
   1dec8:	sbc	r3, r3, lr
   1decc:	ldr	r0, [sp, #12]
   1ded0:	mov	ip, #0
   1ded4:	adds	r0, r2, r0
   1ded8:	adc	ip, r3, ip
   1dedc:	cmp	ip, r0, asr #31
   1dee0:	bne	1e2ac <__assert_fail@plt+0xcec8>
   1dee4:	mov	r3, r0
   1dee8:	ldr	sl, [sp, #8]
   1deec:	b	1dba4 <__assert_fail@plt+0xc7c0>
   1def0:	mov	r2, r6
   1def4:	mov	r3, #0
   1def8:	mov	lr, #1024	; 0x400
   1defc:	cmp	r7, #0
   1df00:	strd	r2, [sp]
   1df04:	lsr	r3, r6, #22
   1df08:	ldr	r2, [sp]
   1df0c:	umull	r0, r1, lr, r7
   1df10:	lsl	r2, r2, #10
   1df14:	bge	1df20 <__assert_fail@plt+0xcb3c>
   1df18:	subs	r0, r0, ip
   1df1c:	sbc	r1, r1, lr
   1df20:	adds	r3, r0, r3
   1df24:	mov	lr, #0
   1df28:	adc	r1, r1, lr
   1df2c:	cmp	r1, r3, asr #31
   1df30:	beq	1d8a8 <__assert_fail@plt+0xc4c4>
   1df34:	lsl	r3, r7, #10
   1df38:	mov	ip, #1
   1df3c:	lsl	r2, r6, #10
   1df40:	orr	r3, r3, r6, lsr #22
   1df44:	b	1d8a8 <__assert_fail@plt+0xc4c4>
   1df48:	umull	r2, r3, r6, lr
   1df4c:	cmp	r7, #0
   1df50:	strd	r2, [sp, #8]
   1df54:	umull	r2, r3, lr, r7
   1df58:	bge	1df64 <__assert_fail@plt+0xcb80>
   1df5c:	subs	r2, r2, r1
   1df60:	sbc	r3, r3, lr
   1df64:	ldr	r0, [sp, #12]
   1df68:	mov	ip, #0
   1df6c:	adds	r0, r2, r0
   1df70:	adc	ip, r3, ip
   1df74:	cmp	ip, r0, asr #31
   1df78:	bne	1e2d0 <__assert_fail@plt+0xceec>
   1df7c:	mov	r3, r0
   1df80:	ldr	ip, [sp, #8]
   1df84:	b	1dae8 <__assert_fail@plt+0xc704>
   1df88:	mov	lr, #2
   1df8c:	mov	r3, #0
   1df90:	adds	ip, r6, r6
   1df94:	adc	r0, r3, r3
   1df98:	umull	r2, r3, lr, r7
   1df9c:	cmp	r7, #0
   1dfa0:	strd	r2, [sp]
   1dfa4:	bge	1dfbc <__assert_fail@plt+0xcbd8>
   1dfa8:	subs	r3, r2, r1
   1dfac:	str	r3, [sp]
   1dfb0:	ldr	r3, [sp, #4]
   1dfb4:	sbc	r3, r3, lr
   1dfb8:	str	r3, [sp, #4]
   1dfbc:	ldr	r3, [sp]
   1dfc0:	mov	lr, #0
   1dfc4:	adds	r2, r3, r0
   1dfc8:	ldr	r3, [sp, #4]
   1dfcc:	adc	r3, r3, lr
   1dfd0:	cmp	r3, r2, asr #31
   1dfd4:	bne	1e2f4 <__assert_fail@plt+0xcf10>
   1dfd8:	mov	r3, r2
   1dfdc:	b	1d878 <__assert_fail@plt+0xc494>
   1dfe0:	mov	r2, r6
   1dfe4:	mov	r3, #0
   1dfe8:	mov	lr, #512	; 0x200
   1dfec:	cmp	r7, #0
   1dff0:	strd	r2, [sp]
   1dff4:	lsr	r3, r6, #23
   1dff8:	ldr	r2, [sp]
   1dffc:	umull	r0, r1, lr, r7
   1e000:	lsl	r2, r2, #9
   1e004:	bge	1e010 <__assert_fail@plt+0xcc2c>
   1e008:	subs	r0, r0, ip
   1e00c:	sbc	r1, r1, lr
   1e010:	adds	r3, r0, r3
   1e014:	mov	lr, #0
   1e018:	adc	r1, r1, lr
   1e01c:	cmp	r1, r3, asr #31
   1e020:	lslne	r3, r7, #9
   1e024:	movne	ip, #1
   1e028:	lslne	r2, r6, #9
   1e02c:	orrne	r3, r3, r6, lsr #23
   1e030:	b	1d8a8 <__assert_fail@plt+0xc4c4>
   1e034:	umull	r0, r1, r6, lr
   1e038:	cmp	r3, #0
   1e03c:	umull	r2, r3, lr, r3
   1e040:	strd	r0, [sp, #16]
   1e044:	mov	r0, r2
   1e048:	mov	r1, r3
   1e04c:	strd	r0, [sp, #8]
   1e050:	bge	1e068 <__assert_fail@plt+0xcc84>
   1e054:	subs	r3, r0, ip
   1e058:	str	r3, [sp, #8]
   1e05c:	ldr	r3, [sp, #12]
   1e060:	sbc	r3, r3, lr
   1e064:	str	r3, [sp, #12]
   1e068:	ldr	r1, [sp, #8]
   1e06c:	mov	r2, #0
   1e070:	ldr	r3, [sp, #20]
   1e074:	adds	r3, r1, r3
   1e078:	ldr	r1, [sp, #12]
   1e07c:	adc	r2, r1, r2
   1e080:	cmp	r2, r3, asr #31
   1e084:	bne	1e224 <__assert_fail@plt+0xce40>
   1e088:	ldr	sl, [sp, #16]
   1e08c:	b	1d908 <__assert_fail@plt+0xc524>
   1e090:	cmp	r3, #0
   1e094:	umull	r6, r7, sl, lr
   1e098:	umull	r2, r3, lr, r3
   1e09c:	strd	r2, [sp, #8]
   1e0a0:	strd	r6, [sp, #16]
   1e0a4:	bge	1e0bc <__assert_fail@plt+0xccd8>
   1e0a8:	subs	r3, r2, ip
   1e0ac:	str	r3, [sp, #8]
   1e0b0:	ldr	r3, [sp, #12]
   1e0b4:	sbc	r3, r3, lr
   1e0b8:	str	r3, [sp, #12]
   1e0bc:	ldr	r3, [sp, #8]
   1e0c0:	mov	lr, #0
   1e0c4:	ldr	r6, [sp, #20]
   1e0c8:	adds	r2, r3, r6
   1e0cc:	ldr	r3, [sp, #12]
   1e0d0:	adc	lr, r3, lr
   1e0d4:	cmp	lr, r2, asr #31
   1e0d8:	bne	1e328 <__assert_fail@plt+0xcf44>
   1e0dc:	ldr	lr, [sp, #16]
   1e0e0:	b	1dbc8 <__assert_fail@plt+0xc7e4>
   1e0e4:	movw	r3, #6956	; 0x1b2c
   1e0e8:	movt	r3, #2
   1e0ec:	movw	r1, #6968	; 0x1b38
   1e0f0:	movt	r1, #2
   1e0f4:	movw	r0, #6984	; 0x1b48
   1e0f8:	movt	r0, #2
   1e0fc:	mov	r2, #85	; 0x55
   1e100:	bl	113e4 <__assert_fail@plt>
   1e104:	ldrd	r2, [sp]
   1e108:	mov	r1, #1
   1e10c:	ldr	ip, [sp]
   1e110:	mul	r0, r6, r3
   1e114:	umull	r2, r3, r6, r2
   1e118:	mla	r0, ip, r7, r0
   1e11c:	mov	ip, r2
   1e120:	add	r3, r0, r3
   1e124:	b	1da48 <__assert_fail@plt+0xc664>
   1e128:	ldrd	r2, [sp]
   1e12c:	mov	ip, #1
   1e130:	ldr	r1, [sp]
   1e134:	mul	r0, r6, r3
   1e138:	umull	r2, r3, r6, r2
   1e13c:	mla	r0, r1, r7, r0
   1e140:	mov	sl, r2
   1e144:	add	r3, r0, r3
   1e148:	b	1d7a0 <__assert_fail@plt+0xc3bc>
   1e14c:	ldrd	r2, [sp]
   1e150:	mov	r1, #1
   1e154:	ldr	ip, [sp]
   1e158:	mul	r0, r6, r3
   1e15c:	umull	r2, r3, r6, r2
   1e160:	mla	r0, ip, r7, r0
   1e164:	mov	ip, r2
   1e168:	add	r3, r0, r3
   1e16c:	b	1d6ec <__assert_fail@plt+0xc308>
   1e170:	ldrd	r2, [sp]
   1e174:	mov	ip, #1
   1e178:	ldr	r1, [sp]
   1e17c:	mul	r0, r6, r3
   1e180:	umull	r2, r3, r6, r2
   1e184:	mla	r0, r1, r7, r0
   1e188:	mov	sl, r2
   1e18c:	add	r3, r0, r3
   1e190:	b	1d77c <__assert_fail@plt+0xc398>
   1e194:	ldrd	r2, [sp]
   1e198:	mov	ip, #1
   1e19c:	ldr	r1, [sp]
   1e1a0:	mul	r0, r6, r3
   1e1a4:	umull	r2, r3, r6, r2
   1e1a8:	mla	r0, r1, r7, r0
   1e1ac:	mov	sl, r2
   1e1b0:	add	r3, r0, r3
   1e1b4:	b	1d734 <__assert_fail@plt+0xc350>
   1e1b8:	ldrd	r2, [sp]
   1e1bc:	mov	ip, #1
   1e1c0:	ldr	r1, [sp]
   1e1c4:	mul	r0, r6, r3
   1e1c8:	umull	r2, r3, r6, r2
   1e1cc:	mla	r0, r1, r7, r0
   1e1d0:	mov	sl, r2
   1e1d4:	add	r3, r0, r3
   1e1d8:	b	1d758 <__assert_fail@plt+0xc374>
   1e1dc:	ldrd	r2, [sp]
   1e1e0:	mov	ip, #1
   1e1e4:	ldr	lr, [sp]
   1e1e8:	mul	r6, r0, r3
   1e1ec:	umull	r2, r3, r0, r2
   1e1f0:	mla	r6, lr, r1, r6
   1e1f4:	mov	lr, r2
   1e1f8:	add	r2, r6, r3
   1e1fc:	b	1d7c4 <__assert_fail@plt+0xc3e0>
   1e200:	ldrd	r2, [sp]
   1e204:	mov	r1, #1
   1e208:	ldr	ip, [sp]
   1e20c:	mul	r0, r6, r3
   1e210:	umull	r2, r3, r6, r2
   1e214:	mla	r0, ip, r7, r0
   1e218:	mov	ip, r2
   1e21c:	add	r3, r0, r3
   1e220:	b	1d8e4 <__assert_fail@plt+0xc500>
   1e224:	ldrd	r2, [sp]
   1e228:	mov	ip, #1
   1e22c:	ldr	r1, [sp]
   1e230:	mul	r0, r6, r3
   1e234:	umull	r2, r3, r6, r2
   1e238:	mla	r0, r1, r7, r0
   1e23c:	mov	sl, r2
   1e240:	add	r3, r0, r3
   1e244:	b	1d908 <__assert_fail@plt+0xc524>
   1e248:	mul	lr, r6, r1
   1e24c:	mov	ip, #1
   1e250:	umull	r2, r3, r6, r0
   1e254:	mla	lr, r0, r7, lr
   1e258:	mov	r1, r2
   1e25c:	add	lr, lr, r3
   1e260:	b	1d818 <__assert_fail@plt+0xc434>
   1e264:	ldrd	r2, [sp]
   1e268:	mov	r1, #1
   1e26c:	ldr	ip, [sp]
   1e270:	mul	r0, r6, r3
   1e274:	umull	r2, r3, r6, r2
   1e278:	mla	r0, ip, r7, r0
   1e27c:	mov	ip, r2
   1e280:	add	r3, r0, r3
   1e284:	b	1d9a8 <__assert_fail@plt+0xc5c4>
   1e288:	ldrd	r2, [sp]
   1e28c:	mov	ip, #1
   1e290:	ldr	r1, [sp]
   1e294:	mul	r0, r6, r3
   1e298:	umull	r2, r3, r6, r2
   1e29c:	mla	r0, r1, r7, r0
   1e2a0:	mov	sl, r2
   1e2a4:	add	r3, r0, r3
   1e2a8:	b	1d710 <__assert_fail@plt+0xc32c>
   1e2ac:	ldrd	r2, [sp]
   1e2b0:	mov	r1, #1
   1e2b4:	ldr	ip, [sp]
   1e2b8:	mul	r0, r6, r3
   1e2bc:	umull	r2, r3, r6, r2
   1e2c0:	mla	r0, ip, r7, r0
   1e2c4:	mov	sl, r2
   1e2c8:	add	r3, r0, r3
   1e2cc:	b	1dba4 <__assert_fail@plt+0xc7c0>
   1e2d0:	ldrd	r2, [sp]
   1e2d4:	mov	r1, #1
   1e2d8:	ldr	ip, [sp]
   1e2dc:	mul	r0, r6, r3
   1e2e0:	umull	r2, r3, r6, r2
   1e2e4:	mla	r0, ip, r7, r0
   1e2e8:	mov	ip, r2
   1e2ec:	add	r3, r0, r3
   1e2f0:	b	1dae8 <__assert_fail@plt+0xc704>
   1e2f4:	adds	ip, r6, r6
   1e2f8:	mov	r1, #1
   1e2fc:	adc	r3, r7, r7
   1e300:	b	1d878 <__assert_fail@plt+0xc494>
   1e304:	ldrd	r2, [sp]
   1e308:	mov	r1, #1
   1e30c:	ldr	ip, [sp]
   1e310:	mul	r0, r6, r3
   1e314:	umull	r2, r3, r6, r2
   1e318:	mla	r0, ip, r7, r0
   1e31c:	mov	ip, r2
   1e320:	add	r3, r0, r3
   1e324:	b	1dc04 <__assert_fail@plt+0xc820>
   1e328:	ldrd	r2, [sp]
   1e32c:	mov	ip, #1
   1e330:	ldr	lr, [sp]
   1e334:	mul	r6, r0, r3
   1e338:	umull	r2, r3, r0, r2
   1e33c:	mla	r6, lr, r1, r6
   1e340:	mov	lr, r2
   1e344:	add	r3, r6, r3
   1e348:	mov	r2, r3
   1e34c:	b	1dbc8 <__assert_fail@plt+0xc7e4>
   1e350:	cmp	r2, #36	; 0x24
   1e354:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e358:	strd	r6, [sp, #8]
   1e35c:	strd	r8, [sp, #16]
   1e360:	strd	sl, [sp, #24]
   1e364:	str	lr, [sp, #32]
   1e368:	sub	sp, sp, #12
   1e36c:	bhi	1e96c <__assert_fail@plt+0xd588>
   1e370:	cmp	r1, #0
   1e374:	mov	r5, r1
   1e378:	mov	r6, r2
   1e37c:	addeq	r5, sp, #4
   1e380:	mov	r9, r0
   1e384:	mov	r8, r3
   1e388:	bl	112c4 <__errno_location@plt>
   1e38c:	mov	sl, r0
   1e390:	mov	r4, #0
   1e394:	mov	r2, r6
   1e398:	mov	r1, r5
   1e39c:	mov	r0, r9
   1e3a0:	str	r4, [sl]
   1e3a4:	bl	110cc <strtol@plt>
   1e3a8:	ldr	r6, [r5]
   1e3ac:	mov	r7, r0
   1e3b0:	cmp	r6, r9
   1e3b4:	beq	1e40c <__assert_fail@plt+0xd028>
   1e3b8:	ldr	r4, [sl]
   1e3bc:	cmp	r4, #0
   1e3c0:	beq	1e3d0 <__assert_fail@plt+0xcfec>
   1e3c4:	cmp	r4, #34	; 0x22
   1e3c8:	bne	1e50c <__assert_fail@plt+0xd128>
   1e3cc:	mov	r4, #1
   1e3d0:	ldr	r3, [sp, #48]	; 0x30
   1e3d4:	cmp	r3, #0
   1e3d8:	beq	1e3e8 <__assert_fail@plt+0xd004>
   1e3dc:	ldrb	r9, [r6]
   1e3e0:	cmp	r9, #0
   1e3e4:	bne	1e610 <__assert_fail@plt+0xd22c>
   1e3e8:	str	r7, [r8]
   1e3ec:	mov	r0, r4
   1e3f0:	add	sp, sp, #12
   1e3f4:	ldrd	r4, [sp]
   1e3f8:	ldrd	r6, [sp, #8]
   1e3fc:	ldrd	r8, [sp, #16]
   1e400:	ldrd	sl, [sp, #24]
   1e404:	add	sp, sp, #32
   1e408:	pop	{pc}		; (ldr pc, [sp], #4)
   1e40c:	ldr	r3, [sp, #48]	; 0x30
   1e410:	cmp	r3, r4
   1e414:	beq	1e50c <__assert_fail@plt+0xd128>
   1e418:	ldrb	r9, [r9]
   1e41c:	cmp	r9, r4
   1e420:	beq	1e50c <__assert_fail@plt+0xd128>
   1e424:	mov	r1, r9
   1e428:	mov	r0, r3
   1e42c:	bl	112a0 <strchr@plt>
   1e430:	cmp	r0, r4
   1e434:	movne	r7, #1
   1e438:	beq	1e50c <__assert_fail@plt+0xd128>
   1e43c:	sub	sl, r9, #69	; 0x45
   1e440:	cmp	sl, #47	; 0x2f
   1e444:	ldrls	pc, [pc, sl, lsl #2]
   1e448:	b	1e62c <__assert_fail@plt+0xd248>
   1e44c:	andeq	lr, r1, r4, lsl r5
   1e450:	andeq	lr, r1, ip, lsr #12
   1e454:	andeq	lr, r1, r4, lsl r5
   1e458:	andeq	lr, r1, ip, lsr #12
   1e45c:	andeq	lr, r1, ip, lsr #12
   1e460:	andeq	lr, r1, ip, lsr #12
   1e464:	andeq	lr, r1, r4, lsl r5
   1e468:	andeq	lr, r1, ip, lsr #12
   1e46c:	andeq	lr, r1, r4, lsl r5
   1e470:	andeq	lr, r1, ip, lsr #12
   1e474:	andeq	lr, r1, ip, lsr #12
   1e478:	andeq	lr, r1, r4, lsl r5
   1e47c:	andeq	lr, r1, ip, lsr #12
   1e480:	andeq	lr, r1, ip, lsr #12
   1e484:	andeq	lr, r1, ip, lsr #12
   1e488:	andeq	lr, r1, r4, lsl r5
   1e48c:	andeq	lr, r1, ip, lsr #12
   1e490:	andeq	lr, r1, ip, lsr #12
   1e494:	andeq	lr, r1, ip, lsr #12
   1e498:	andeq	lr, r1, ip, lsr #12
   1e49c:	andeq	lr, r1, r4, lsl r5
   1e4a0:	andeq	lr, r1, r4, lsl r5
   1e4a4:	andeq	lr, r1, ip, lsr #12
   1e4a8:	andeq	lr, r1, ip, lsr #12
   1e4ac:	andeq	lr, r1, ip, lsr #12
   1e4b0:	andeq	lr, r1, ip, lsr #12
   1e4b4:	andeq	lr, r1, ip, lsr #12
   1e4b8:	andeq	lr, r1, ip, lsr #12
   1e4bc:	andeq	lr, r1, ip, lsr #12
   1e4c0:	andeq	lr, r1, ip, lsr #12
   1e4c4:	andeq	lr, r1, ip, lsr #12
   1e4c8:	andeq	lr, r1, ip, lsr #12
   1e4cc:	andeq	lr, r1, ip, lsr #12
   1e4d0:	andeq	lr, r1, ip, lsr #12
   1e4d4:	andeq	lr, r1, r4, lsl r5
   1e4d8:	andeq	lr, r1, ip, lsr #12
   1e4dc:	andeq	lr, r1, ip, lsr #12
   1e4e0:	andeq	lr, r1, ip, lsr #12
   1e4e4:	andeq	lr, r1, r4, lsl r5
   1e4e8:	andeq	lr, r1, ip, lsr #12
   1e4ec:	andeq	lr, r1, r4, lsl r5
   1e4f0:	andeq	lr, r1, ip, lsr #12
   1e4f4:	andeq	lr, r1, ip, lsr #12
   1e4f8:	andeq	lr, r1, ip, lsr #12
   1e4fc:	andeq	lr, r1, ip, lsr #12
   1e500:	andeq	lr, r1, ip, lsr #12
   1e504:	andeq	lr, r1, ip, lsr #12
   1e508:	andeq	lr, r1, r4, lsl r5
   1e50c:	mov	r4, #4
   1e510:	b	1e3ec <__assert_fail@plt+0xd008>
   1e514:	mov	r1, #48	; 0x30
   1e518:	ldr	r0, [sp, #48]	; 0x30
   1e51c:	bl	112a0 <strchr@plt>
   1e520:	cmp	r0, #0
   1e524:	beq	1e62c <__assert_fail@plt+0xd248>
   1e528:	ldrb	r3, [r6, #1]
   1e52c:	cmp	r3, #68	; 0x44
   1e530:	beq	1e948 <__assert_fail@plt+0xd564>
   1e534:	cmp	r3, #105	; 0x69
   1e538:	beq	1e954 <__assert_fail@plt+0xd570>
   1e53c:	cmp	r3, #66	; 0x42
   1e540:	beq	1e948 <__assert_fail@plt+0xd564>
   1e544:	cmp	sl, #47	; 0x2f
   1e548:	ldrls	pc, [pc, sl, lsl #2]
   1e54c:	b	1e624 <__assert_fail@plt+0xd240>
   1e550:	andeq	lr, r1, ip, lsl #18
   1e554:	andeq	lr, r1, r4, lsr #12
   1e558:	strdeq	lr, [r1], -r4
   1e55c:	andeq	lr, r1, r4, lsr #12
   1e560:	andeq	lr, r1, r4, lsr #12
   1e564:	andeq	lr, r1, r4, lsr #12
   1e568:	muleq	r1, ip, r7
   1e56c:	andeq	lr, r1, r4, lsr #12
   1e570:	andeq	lr, r1, r0, asr #17
   1e574:	andeq	lr, r1, r4, lsr #12
   1e578:	andeq	lr, r1, r4, lsr #12
   1e57c:	andeq	lr, r1, r8, lsr #17
   1e580:	andeq	lr, r1, r4, lsr #12
   1e584:	andeq	lr, r1, r4, lsr #12
   1e588:	andeq	lr, r1, r4, lsr #12
   1e58c:	andeq	lr, r1, r0, lsl #17
   1e590:	andeq	lr, r1, r4, lsr #12
   1e594:	andeq	lr, r1, r4, lsr #12
   1e598:	andeq	lr, r1, r4, lsr #12
   1e59c:	andeq	lr, r1, r4, lsr #12
   1e5a0:	andeq	lr, r1, r4, lsl #16
   1e5a4:	andeq	lr, r1, ip, lsl r7
   1e5a8:	andeq	lr, r1, r4, lsr #12
   1e5ac:	andeq	lr, r1, r4, lsr #12
   1e5b0:	andeq	lr, r1, r4, lsr #12
   1e5b4:	andeq	lr, r1, r4, lsr #12
   1e5b8:	andeq	lr, r1, r4, lsr #12
   1e5bc:	andeq	lr, r1, r4, lsr #12
   1e5c0:	andeq	lr, r1, r4, lsr #12
   1e5c4:	andeq	lr, r1, r0, ror #15
   1e5c8:	andeq	lr, r1, r0, asr #18
   1e5cc:	andeq	lr, r1, r4, lsr #12
   1e5d0:	andeq	lr, r1, r4, lsr #12
   1e5d4:	andeq	lr, r1, r4, lsr #12
   1e5d8:	strdeq	lr, [r1], -r4
   1e5dc:	andeq	lr, r1, r4, lsr #12
   1e5e0:	andeq	lr, r1, r4, lsr #12
   1e5e4:	andeq	lr, r1, r4, lsr #12
   1e5e8:	muleq	r1, ip, r7
   1e5ec:	andeq	lr, r1, r4, lsr #12
   1e5f0:	andeq	lr, r1, r0, asr #17
   1e5f4:	andeq	lr, r1, r4, lsr #12
   1e5f8:	andeq	lr, r1, r4, lsr #12
   1e5fc:	andeq	lr, r1, r4, lsr #12
   1e600:	andeq	lr, r1, r4, lsr #12
   1e604:	andeq	lr, r1, r4, lsr #12
   1e608:	andeq	lr, r1, r4, lsr #12
   1e60c:	andeq	lr, r1, r0, lsl #17
   1e610:	mov	r0, r3
   1e614:	mov	r1, r9
   1e618:	bl	112a0 <strchr@plt>
   1e61c:	cmp	r0, #0
   1e620:	bne	1e43c <__assert_fail@plt+0xd058>
   1e624:	orr	r4, r4, #2
   1e628:	b	1e3e8 <__assert_fail@plt+0xd004>
   1e62c:	mov	ip, #1
   1e630:	mov	r2, #1024	; 0x400
   1e634:	sub	r9, r9, #66	; 0x42
   1e638:	cmp	r9, #53	; 0x35
   1e63c:	ldrls	pc, [pc, r9, lsl #2]
   1e640:	b	1e624 <__assert_fail@plt+0xd240>
   1e644:	andeq	lr, r1, r4, lsr #18
   1e648:	andeq	lr, r1, r4, lsr #12
   1e64c:	andeq	lr, r1, r4, lsr #12
   1e650:	andeq	lr, r1, r4, lsl r9
   1e654:	andeq	lr, r1, r4, lsr #12
   1e658:	strdeq	lr, [r1], -ip
   1e65c:	andeq	lr, r1, r4, lsr #12
   1e660:	andeq	lr, r1, r4, lsr #12
   1e664:	andeq	lr, r1, r4, lsr #12
   1e668:	andeq	lr, r1, r4, lsr #15
   1e66c:	andeq	lr, r1, r4, lsr #12
   1e670:	andeq	lr, r1, r8, asr #17
   1e674:	andeq	lr, r1, r4, lsr #12
   1e678:	andeq	lr, r1, r4, lsr #12
   1e67c:			; <UNDEFINED> instruction: 0x0001e8b0
   1e680:	andeq	lr, r1, r4, lsr #12
   1e684:	andeq	lr, r1, r4, lsr #12
   1e688:	andeq	lr, r1, r4, lsr #12
   1e68c:	andeq	lr, r1, r8, lsl #17
   1e690:	andeq	lr, r1, r4, lsr #12
   1e694:	andeq	lr, r1, r4, lsr #12
   1e698:	andeq	lr, r1, r4, lsr #12
   1e69c:	andeq	lr, r1, r4, lsr #12
   1e6a0:	andeq	lr, r1, ip, lsl #16
   1e6a4:	andeq	lr, r1, r4, lsr #14
   1e6a8:	andeq	lr, r1, r4, lsr #12
   1e6ac:	andeq	lr, r1, r4, lsr #12
   1e6b0:	andeq	lr, r1, r4, lsr #12
   1e6b4:	andeq	lr, r1, r4, lsr #12
   1e6b8:	andeq	lr, r1, r4, lsr #12
   1e6bc:	andeq	lr, r1, r4, lsr #12
   1e6c0:	andeq	lr, r1, r4, lsr #12
   1e6c4:	andeq	lr, r1, r4, ror #15
   1e6c8:	andeq	lr, r1, r4, lsl #15
   1e6cc:	andeq	lr, r1, r4, lsr #12
   1e6d0:	andeq	lr, r1, r4, lsr #12
   1e6d4:	andeq	lr, r1, r4, lsr #12
   1e6d8:	strdeq	lr, [r1], -ip
   1e6dc:	andeq	lr, r1, r4, lsr #12
   1e6e0:	andeq	lr, r1, r4, lsr #12
   1e6e4:	andeq	lr, r1, r4, lsr #12
   1e6e8:	andeq	lr, r1, r4, lsr #15
   1e6ec:	andeq	lr, r1, r4, lsr #12
   1e6f0:	andeq	lr, r1, r8, asr #17
   1e6f4:	andeq	lr, r1, r4, lsr #12
   1e6f8:	andeq	lr, r1, r4, lsr #12
   1e6fc:	andeq	lr, r1, r4, lsr #12
   1e700:	andeq	lr, r1, r4, lsr #12
   1e704:	andeq	lr, r1, r4, lsr #12
   1e708:	andeq	lr, r1, r4, lsr #12
   1e70c:	andeq	lr, r1, r8, lsl #17
   1e710:	andeq	lr, r1, r4, lsr #12
   1e714:	andeq	lr, r1, r4, lsr #12
   1e718:			; <UNDEFINED> instruction: 0x0001e7b8
   1e71c:	mov	ip, #1
   1e720:	mov	r2, #1024	; 0x400
   1e724:	smull	sl, fp, r7, r2
   1e728:	cmp	fp, sl, asr #31
   1e72c:	bne	1e894 <__assert_fail@plt+0xd4b0>
   1e730:	smull	r0, r1, sl, r2
   1e734:	cmp	r1, r0, asr #31
   1e738:	bne	1e86c <__assert_fail@plt+0xd488>
   1e73c:	smull	sl, fp, r0, r2
   1e740:	cmp	fp, sl, asr #31
   1e744:	bne	1e98c <__assert_fail@plt+0xd5a8>
   1e748:	smull	r0, r1, sl, r2
   1e74c:	cmp	r1, r0, asr #31
   1e750:	bne	1e86c <__assert_fail@plt+0xd488>
   1e754:	smull	sl, fp, r0, r2
   1e758:	cmp	fp, sl, asr #31
   1e75c:	bne	1e98c <__assert_fail@plt+0xd5a8>
   1e760:	smull	r0, r1, sl, r2
   1e764:	cmp	r1, r0, asr #31
   1e768:	bne	1e86c <__assert_fail@plt+0xd488>
   1e76c:	smull	r2, r3, r0, r2
   1e770:	cmp	r3, r2, asr #31
   1e774:	bne	1e98c <__assert_fail@plt+0xd5a8>
   1e778:	mov	r7, r2
   1e77c:	mov	r3, #0
   1e780:	orr	r4, r4, r3
   1e784:	add	r3, r6, ip
   1e788:	str	r3, [r5]
   1e78c:	ldrb	r3, [r6, ip]
   1e790:	cmp	r3, #0
   1e794:	beq	1e3e8 <__assert_fail@plt+0xd004>
   1e798:	b	1e624 <__assert_fail@plt+0xd240>
   1e79c:	mov	ip, #1
   1e7a0:	mov	r2, #1024	; 0x400
   1e7a4:	smull	r2, r3, r7, r2
   1e7a8:	cmp	r3, r2, asr #31
   1e7ac:	bne	1e7cc <__assert_fail@plt+0xd3e8>
   1e7b0:	mov	r7, r2
   1e7b4:	b	1e784 <__assert_fail@plt+0xd3a0>
   1e7b8:	asr	r1, r7, #31
   1e7bc:	adds	r2, r7, r7
   1e7c0:	adc	r3, r1, r1
   1e7c4:	cmp	r3, r2, asr #31
   1e7c8:	beq	1e7b0 <__assert_fail@plt+0xd3cc>
   1e7cc:	cmp	r7, #0
   1e7d0:	mov	r4, #1
   1e7d4:	mvnge	r7, #-2147483648	; 0x80000000
   1e7d8:	movlt	r7, #-2147483648	; 0x80000000
   1e7dc:	b	1e784 <__assert_fail@plt+0xd3a0>
   1e7e0:	mov	ip, #1
   1e7e4:	asr	r3, r7, #31
   1e7e8:	lsl	r1, r7, #9
   1e7ec:	lsl	r3, r3, #9
   1e7f0:	orr	r3, r3, r7, lsr #23
   1e7f4:	cmp	r3, r1, asr #31
   1e7f8:	bne	1e7cc <__assert_fail@plt+0xd3e8>
   1e7fc:	mov	r7, r1
   1e800:	b	1e784 <__assert_fail@plt+0xd3a0>
   1e804:	mov	ip, #1
   1e808:	mov	r2, #1024	; 0x400
   1e80c:	smull	sl, fp, r7, r2
   1e810:	cmp	fp, sl, asr #31
   1e814:	bne	1e894 <__assert_fail@plt+0xd4b0>
   1e818:	smull	r0, r1, sl, r2
   1e81c:	cmp	r1, r0, asr #31
   1e820:	bne	1e86c <__assert_fail@plt+0xd488>
   1e824:	smull	sl, fp, r0, r2
   1e828:	cmp	fp, sl, asr #31
   1e82c:	bne	1e98c <__assert_fail@plt+0xd5a8>
   1e830:	smull	r0, r1, sl, r2
   1e834:	cmp	r1, r0, asr #31
   1e838:	bne	1e86c <__assert_fail@plt+0xd488>
   1e83c:	smull	sl, fp, r0, r2
   1e840:	cmp	fp, sl, asr #31
   1e844:	bne	1e98c <__assert_fail@plt+0xd5a8>
   1e848:	smull	r0, r1, sl, r2
   1e84c:	cmp	r1, r0, asr #31
   1e850:	bne	1e86c <__assert_fail@plt+0xd488>
   1e854:	smull	sl, fp, r0, r2
   1e858:	cmp	fp, sl, asr #31
   1e85c:	bne	1e98c <__assert_fail@plt+0xd5a8>
   1e860:	smull	r2, r3, sl, r2
   1e864:	cmp	r3, r2, asr #31
   1e868:	beq	1e778 <__assert_fail@plt+0xd394>
   1e86c:	cmp	sl, #0
   1e870:	mov	r3, #1
   1e874:	movlt	r7, #-2147483648	; 0x80000000
   1e878:	mvnge	r7, #-2147483648	; 0x80000000
   1e87c:	b	1e780 <__assert_fail@plt+0xd39c>
   1e880:	mov	ip, #1
   1e884:	mov	r2, #1024	; 0x400
   1e888:	smull	sl, fp, r7, r2
   1e88c:	cmp	fp, sl, asr #31
   1e890:	beq	1e848 <__assert_fail@plt+0xd464>
   1e894:	cmp	r7, #0
   1e898:	mov	r3, #1
   1e89c:	mvnge	r7, #-2147483648	; 0x80000000
   1e8a0:	movlt	r7, #-2147483648	; 0x80000000
   1e8a4:	b	1e780 <__assert_fail@plt+0xd39c>
   1e8a8:	mov	ip, #1
   1e8ac:	mov	r2, #1024	; 0x400
   1e8b0:	smull	sl, fp, r7, r2
   1e8b4:	cmp	fp, sl, asr #31
   1e8b8:	beq	1e748 <__assert_fail@plt+0xd364>
   1e8bc:	b	1e894 <__assert_fail@plt+0xd4b0>
   1e8c0:	mov	ip, #1
   1e8c4:	mov	r2, #1024	; 0x400
   1e8c8:	smull	r0, r1, r7, r2
   1e8cc:	cmp	r1, r0, asr #31
   1e8d0:	bne	1e7cc <__assert_fail@plt+0xd3e8>
   1e8d4:	smull	r2, r3, r0, r2
   1e8d8:	cmp	r3, r2, asr #31
   1e8dc:	beq	1e7b0 <__assert_fail@plt+0xd3cc>
   1e8e0:	cmp	r0, #0
   1e8e4:	mov	r4, #1
   1e8e8:	movlt	r7, #-2147483648	; 0x80000000
   1e8ec:	mvnge	r7, #-2147483648	; 0x80000000
   1e8f0:	b	1e784 <__assert_fail@plt+0xd3a0>
   1e8f4:	mov	ip, #1
   1e8f8:	mov	r2, #1024	; 0x400
   1e8fc:	smull	r0, r1, r7, r2
   1e900:	cmp	r1, r0, asr #31
   1e904:	beq	1e854 <__assert_fail@plt+0xd470>
   1e908:	b	1e894 <__assert_fail@plt+0xd4b0>
   1e90c:	mov	ip, #1
   1e910:	mov	r2, #1024	; 0x400
   1e914:	smull	sl, fp, r7, r2
   1e918:	cmp	fp, sl, asr #31
   1e91c:	beq	1e830 <__assert_fail@plt+0xd44c>
   1e920:	b	1e894 <__assert_fail@plt+0xd4b0>
   1e924:	asr	r3, r7, #31
   1e928:	lsl	r1, r7, #10
   1e92c:	lsl	r3, r3, #10
   1e930:	orr	r3, r3, r7, lsr #22
   1e934:	cmp	r3, r1, asr #31
   1e938:	beq	1e7fc <__assert_fail@plt+0xd418>
   1e93c:	b	1e7cc <__assert_fail@plt+0xd3e8>
   1e940:	mov	ip, #1
   1e944:	b	1e784 <__assert_fail@plt+0xd3a0>
   1e948:	mov	ip, #2
   1e94c:	mov	r2, #1000	; 0x3e8
   1e950:	b	1e634 <__assert_fail@plt+0xd250>
   1e954:	ldrb	r3, [r6, #2]
   1e958:	mov	r2, #1024	; 0x400
   1e95c:	cmp	r3, #66	; 0x42
   1e960:	movne	ip, #1
   1e964:	moveq	ip, #3
   1e968:	b	1e634 <__assert_fail@plt+0xd250>
   1e96c:	movw	r3, #7024	; 0x1b70
   1e970:	movt	r3, #2
   1e974:	movw	r1, #6968	; 0x1b38
   1e978:	movt	r1, #2
   1e97c:	movw	r0, #6984	; 0x1b48
   1e980:	movt	r0, #2
   1e984:	mov	r2, #85	; 0x55
   1e988:	bl	113e4 <__assert_fail@plt>
   1e98c:	cmp	r0, #0
   1e990:	mov	r3, #1
   1e994:	movlt	r7, #-2147483648	; 0x80000000
   1e998:	mvnge	r7, #-2147483648	; 0x80000000
   1e99c:	b	1e780 <__assert_fail@plt+0xd39c>
   1e9a0:	sub	r0, r0, #1
   1e9a4:	movw	ip, #8576	; 0x2180
   1e9a8:	movt	ip, #3
   1e9ac:	cmp	r0, #3
   1e9b0:	push	{lr}		; (str lr, [sp, #-4]!)
   1e9b4:	sub	sp, sp, #20
   1e9b8:	ldr	r5, [ip]
   1e9bc:	bhi	1ea0c <__assert_fail@plt+0xd628>
   1e9c0:	movw	ip, #7032	; 0x1b78
   1e9c4:	movt	ip, #2
   1e9c8:	cmp	r1, #0
   1e9cc:	ldr	r0, [ip, r0, lsl #2]
   1e9d0:	blt	1ea10 <__assert_fail@plt+0xd62c>
   1e9d4:	ldr	r6, [r3, r1, lsl #4]
   1e9d8:	movw	r4, #7048	; 0x1b88
   1e9dc:	movt	r4, #2
   1e9e0:	mov	r1, r0
   1e9e4:	mov	r2, #5
   1e9e8:	mov	r0, #0
   1e9ec:	bl	11168 <dcgettext@plt>
   1e9f0:	ldr	ip, [sp, #24]
   1e9f4:	mov	r2, r0
   1e9f8:	mov	r3, r4
   1e9fc:	mov	r0, r5
   1ea00:	mov	r1, #0
   1ea04:	stm	sp, {r6, ip}
   1ea08:	bl	11204 <error@plt>
   1ea0c:	bl	113cc <abort@plt>
   1ea10:	mov	r3, #0
   1ea14:	movw	r4, #7048	; 0x1b88
   1ea18:	movt	r4, #2
   1ea1c:	add	r6, sp, #12
   1ea20:	strb	r2, [sp, #12]
   1ea24:	sub	r4, r4, r1
   1ea28:	strb	r3, [sp, #13]
   1ea2c:	b	1e9e0 <__assert_fail@plt+0xd5fc>
   1ea30:	cmp	r2, #36	; 0x24
   1ea34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ea38:	strd	r6, [sp, #8]
   1ea3c:	strd	r8, [sp, #16]
   1ea40:	strd	sl, [sp, #24]
   1ea44:	str	lr, [sp, #32]
   1ea48:	sub	sp, sp, #36	; 0x24
   1ea4c:	bhi	1f6c4 <__assert_fail@plt+0xe2e0>
   1ea50:	cmp	r1, #0
   1ea54:	mov	r6, r2
   1ea58:	mov	r5, r1
   1ea5c:	mov	sl, r0
   1ea60:	addeq	r5, sp, #28
   1ea64:	mov	r9, r3
   1ea68:	bl	112c4 <__errno_location@plt>
   1ea6c:	mov	r3, #0
   1ea70:	mov	fp, r0
   1ea74:	str	r3, [r0]
   1ea78:	ldrb	r4, [sl]
   1ea7c:	bl	1127c <__ctype_b_loc@plt>
   1ea80:	ldr	r2, [r0]
   1ea84:	lsl	r3, r4, #1
   1ea88:	ldrh	r3, [r2, r3]
   1ea8c:	tst	r3, #8192	; 0x2000
   1ea90:	beq	1eaac <__assert_fail@plt+0xd6c8>
   1ea94:	mov	r3, sl
   1ea98:	ldrb	r4, [r3, #1]!
   1ea9c:	lsl	r1, r4, #1
   1eaa0:	ldrh	r1, [r2, r1]
   1eaa4:	tst	r1, #8192	; 0x2000
   1eaa8:	bne	1ea98 <__assert_fail@plt+0xd6b4>
   1eaac:	cmp	r4, #45	; 0x2d
   1eab0:	beq	1eb4c <__assert_fail@plt+0xd768>
   1eab4:	mov	r2, r6
   1eab8:	mov	r3, #0
   1eabc:	mov	r1, r5
   1eac0:	mov	r0, sl
   1eac4:	bl	11138 <__strtoull_internal@plt>
   1eac8:	ldr	r8, [r5]
   1eacc:	mov	r6, r0
   1ead0:	mov	r7, r1
   1ead4:	cmp	r8, sl
   1ead8:	beq	1eb34 <__assert_fail@plt+0xd750>
   1eadc:	ldr	r4, [fp]
   1eae0:	cmp	r4, #0
   1eae4:	bne	1eb24 <__assert_fail@plt+0xd740>
   1eae8:	ldr	r3, [sp, #72]	; 0x48
   1eaec:	cmp	r3, #0
   1eaf0:	beq	1eb00 <__assert_fail@plt+0xd71c>
   1eaf4:	ldrb	sl, [r8]
   1eaf8:	cmp	sl, #0
   1eafc:	bne	1eeb8 <__assert_fail@plt+0xdad4>
   1eb00:	strd	r6, [r9]
   1eb04:	mov	r0, r4
   1eb08:	add	sp, sp, #36	; 0x24
   1eb0c:	ldrd	r4, [sp]
   1eb10:	ldrd	r6, [sp, #8]
   1eb14:	ldrd	r8, [sp, #16]
   1eb18:	ldrd	sl, [sp, #24]
   1eb1c:	add	sp, sp, #32
   1eb20:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb24:	cmp	r4, #34	; 0x22
   1eb28:	bne	1eb4c <__assert_fail@plt+0xd768>
   1eb2c:	mov	r4, #1
   1eb30:	b	1eae8 <__assert_fail@plt+0xd704>
   1eb34:	ldr	r3, [sp, #72]	; 0x48
   1eb38:	cmp	r3, #0
   1eb3c:	beq	1eb4c <__assert_fail@plt+0xd768>
   1eb40:	ldrb	sl, [sl]
   1eb44:	cmp	sl, #0
   1eb48:	bne	1eb54 <__assert_fail@plt+0xd770>
   1eb4c:	mov	r4, #4
   1eb50:	b	1eb04 <__assert_fail@plt+0xd720>
   1eb54:	mov	r1, sl
   1eb58:	mov	r0, r3
   1eb5c:	bl	112a0 <strchr@plt>
   1eb60:	cmp	r0, #0
   1eb64:	movne	r4, #0
   1eb68:	movne	r6, #1
   1eb6c:	movne	r7, r4
   1eb70:	beq	1eb4c <__assert_fail@plt+0xd768>
   1eb74:	sub	r3, sl, #69	; 0x45
   1eb78:	cmp	r3, #47	; 0x2f
   1eb7c:	ldrls	pc, [pc, r3, lsl #2]
   1eb80:	b	1ec88 <__assert_fail@plt+0xd8a4>
   1eb84:	andeq	lr, r1, r4, asr #24
   1eb88:	andeq	lr, r1, r8, lsl #25
   1eb8c:	andeq	lr, r1, r4, asr #24
   1eb90:	andeq	lr, r1, r8, lsl #25
   1eb94:	andeq	lr, r1, r8, lsl #25
   1eb98:	andeq	lr, r1, r8, lsl #25
   1eb9c:	andeq	lr, r1, r4, asr #24
   1eba0:	andeq	lr, r1, r8, lsl #25
   1eba4:	andeq	lr, r1, r4, asr #24
   1eba8:	andeq	lr, r1, r8, lsl #25
   1ebac:	andeq	lr, r1, r8, lsl #25
   1ebb0:	andeq	lr, r1, r4, asr #24
   1ebb4:	andeq	lr, r1, r8, lsl #25
   1ebb8:	andeq	lr, r1, r8, lsl #25
   1ebbc:	andeq	lr, r1, r8, lsl #25
   1ebc0:	andeq	lr, r1, r4, asr #24
   1ebc4:	andeq	lr, r1, r8, lsl #25
   1ebc8:	andeq	lr, r1, r8, lsl #25
   1ebcc:	andeq	lr, r1, r8, lsl #25
   1ebd0:	andeq	lr, r1, r8, lsl #25
   1ebd4:	andeq	lr, r1, r4, asr #24
   1ebd8:	andeq	lr, r1, r4, asr #24
   1ebdc:	andeq	lr, r1, r8, lsl #25
   1ebe0:	andeq	lr, r1, r8, lsl #25
   1ebe4:	andeq	lr, r1, r8, lsl #25
   1ebe8:	andeq	lr, r1, r8, lsl #25
   1ebec:	andeq	lr, r1, r8, lsl #25
   1ebf0:	andeq	lr, r1, r8, lsl #25
   1ebf4:	andeq	lr, r1, r8, lsl #25
   1ebf8:	andeq	lr, r1, r8, lsl #25
   1ebfc:	andeq	lr, r1, r8, lsl #25
   1ec00:	andeq	lr, r1, r8, lsl #25
   1ec04:	andeq	lr, r1, r8, lsl #25
   1ec08:	andeq	lr, r1, r8, lsl #25
   1ec0c:	andeq	lr, r1, r4, asr #24
   1ec10:	andeq	lr, r1, r8, lsl #25
   1ec14:	andeq	lr, r1, r8, lsl #25
   1ec18:	andeq	lr, r1, r8, lsl #25
   1ec1c:	andeq	lr, r1, r4, asr #24
   1ec20:	andeq	lr, r1, r8, lsl #25
   1ec24:	andeq	lr, r1, r4, asr #24
   1ec28:	andeq	lr, r1, r8, lsl #25
   1ec2c:	andeq	lr, r1, r8, lsl #25
   1ec30:	andeq	lr, r1, r8, lsl #25
   1ec34:	andeq	lr, r1, r8, lsl #25
   1ec38:	andeq	lr, r1, r8, lsl #25
   1ec3c:	andeq	lr, r1, r8, lsl #25
   1ec40:	andeq	lr, r1, r4, asr #24
   1ec44:	mov	r1, #48	; 0x30
   1ec48:	ldr	r0, [sp, #72]	; 0x48
   1ec4c:	bl	112a0 <strchr@plt>
   1ec50:	cmp	r0, #0
   1ec54:	beq	1ec88 <__assert_fail@plt+0xd8a4>
   1ec58:	ldrb	r3, [r8, #1]
   1ec5c:	cmp	r3, #68	; 0x44
   1ec60:	beq	1f218 <__assert_fail@plt+0xde34>
   1ec64:	cmp	r3, #105	; 0x69
   1ec68:	beq	1eed0 <__assert_fail@plt+0xdaec>
   1ec6c:	cmp	r3, #66	; 0x42
   1ec70:	moveq	r3, #2
   1ec74:	movne	r3, #1
   1ec78:	moveq	ip, #1000	; 0x3e8
   1ec7c:	movne	ip, #1024	; 0x400
   1ec80:	str	r3, [sp, #12]
   1ec84:	b	1ec94 <__assert_fail@plt+0xd8b0>
   1ec88:	mov	r3, #1
   1ec8c:	mov	ip, #1024	; 0x400
   1ec90:	str	r3, [sp, #12]
   1ec94:	sub	sl, sl, #66	; 0x42
   1ec98:	cmp	sl, #53	; 0x35
   1ec9c:	ldrls	pc, [pc, sl, lsl #2]
   1eca0:	b	1ee7c <__assert_fail@plt+0xda98>
   1eca4:	andeq	pc, r1, r4, ror #2
   1eca8:	andeq	lr, r1, ip, ror lr
   1ecac:	andeq	lr, r1, ip, ror lr
   1ecb0:	andeq	pc, r1, r4, lsl #2
   1ecb4:	andeq	lr, r1, ip, ror lr
   1ecb8:	andeq	pc, r1, r0, lsl #3
   1ecbc:	andeq	lr, r1, ip, ror lr
   1ecc0:	andeq	lr, r1, ip, ror lr
   1ecc4:	andeq	lr, r1, ip, ror lr
   1ecc8:	andeq	lr, r1, r4, lsl #29
   1eccc:	andeq	lr, r1, ip, ror lr
   1ecd0:	andeq	pc, r1, ip, lsr #1
   1ecd4:	andeq	lr, r1, ip, ror lr
   1ecd8:	andeq	lr, r1, ip, ror lr
   1ecdc:	andeq	pc, r1, r0, asr r0	; <UNPREDICTABLE>
   1ece0:	andeq	lr, r1, ip, ror lr
   1ece4:	andeq	lr, r1, ip, ror lr
   1ece8:	andeq	lr, r1, ip, ror lr
   1ecec:	strdeq	lr, [r1], -r0
   1ecf0:	andeq	lr, r1, ip, ror lr
   1ecf4:	andeq	lr, r1, ip, ror lr
   1ecf8:	andeq	lr, r1, ip, ror lr
   1ecfc:	andeq	lr, r1, ip, ror lr
   1ed00:	andeq	lr, r1, r4, lsr #30
   1ed04:	andeq	lr, r1, ip, ror sp
   1ed08:	andeq	lr, r1, ip, ror lr
   1ed0c:	andeq	lr, r1, ip, ror lr
   1ed10:	andeq	lr, r1, ip, ror lr
   1ed14:	andeq	lr, r1, ip, ror lr
   1ed18:	andeq	lr, r1, ip, ror lr
   1ed1c:	andeq	lr, r1, ip, ror lr
   1ed20:	andeq	lr, r1, ip, ror lr
   1ed24:	andeq	lr, r1, r4, lsl #30
   1ed28:	andeq	lr, r1, r4, ror #28
   1ed2c:	andeq	lr, r1, ip, ror lr
   1ed30:	andeq	lr, r1, ip, ror lr
   1ed34:	andeq	lr, r1, ip, ror lr
   1ed38:	andeq	pc, r1, r0, lsl #3
   1ed3c:	andeq	lr, r1, ip, ror lr
   1ed40:	andeq	lr, r1, ip, ror lr
   1ed44:	andeq	lr, r1, ip, ror lr
   1ed48:	andeq	lr, r1, r4, lsl #29
   1ed4c:	andeq	lr, r1, ip, ror lr
   1ed50:	andeq	pc, r1, ip, lsr #1
   1ed54:	andeq	lr, r1, ip, ror lr
   1ed58:	andeq	lr, r1, ip, ror lr
   1ed5c:	andeq	lr, r1, ip, ror lr
   1ed60:	andeq	lr, r1, ip, ror lr
   1ed64:	andeq	lr, r1, ip, ror lr
   1ed68:	andeq	lr, r1, ip, ror lr
   1ed6c:	strdeq	lr, [r1], -r0
   1ed70:	andeq	lr, r1, ip, ror lr
   1ed74:	andeq	lr, r1, ip, ror lr
   1ed78:	andeq	lr, r1, ip, ror #29
   1ed7c:	asr	r3, ip, #31
   1ed80:	mov	r2, ip
   1ed84:	cmp	r7, #0
   1ed88:	mov	r1, #0
   1ed8c:	strd	r2, [sp]
   1ed90:	bne	1f2d0 <__assert_fail@plt+0xdeec>
   1ed94:	umull	r6, r7, r6, ip
   1ed98:	mov	r2, r6
   1ed9c:	mov	r3, r7
   1eda0:	cmp	r1, #0
   1eda4:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1eda8:	cmp	r3, #0
   1edac:	mov	lr, r1
   1edb0:	bne	1f3fc <__assert_fail@plt+0xe018>
   1edb4:	umull	r2, r3, r2, ip
   1edb8:	mov	r0, r2
   1edbc:	mov	r1, r3
   1edc0:	cmp	lr, #0
   1edc4:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1edc8:	cmp	r1, #0
   1edcc:	bne	1f3d8 <__assert_fail@plt+0xdff4>
   1edd0:	umull	r0, r1, r0, ip
   1edd4:	mov	r2, r0
   1edd8:	mov	r3, r1
   1eddc:	cmp	lr, #0
   1ede0:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1ede4:	cmp	r3, #0
   1ede8:	bne	1f088 <__assert_fail@plt+0xdca4>
   1edec:	umull	r2, r3, r2, ip
   1edf0:	mov	r0, r2
   1edf4:	mov	r1, r3
   1edf8:	cmp	lr, #0
   1edfc:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1ee00:	cmp	r1, #0
   1ee04:	bne	1f288 <__assert_fail@plt+0xdea4>
   1ee08:	umull	r0, r1, r0, ip
   1ee0c:	mov	r2, r0
   1ee10:	mov	r3, r1
   1ee14:	cmp	lr, #0
   1ee18:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1ee1c:	cmp	r3, #0
   1ee20:	mov	r7, lr
   1ee24:	bne	1f264 <__assert_fail@plt+0xde80>
   1ee28:	umull	r2, r3, r2, ip
   1ee2c:	mov	r6, r2
   1ee30:	mov	lr, r3
   1ee34:	cmp	r7, #0
   1ee38:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1ee3c:	cmp	lr, #0
   1ee40:	bne	1f228 <__assert_fail@plt+0xde44>
   1ee44:	umull	r2, r3, r6, ip
   1ee48:	mov	r0, r2
   1ee4c:	mov	r2, r3
   1ee50:	subs	r3, r7, #0
   1ee54:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1ee58:	mov	r6, r0
   1ee5c:	mov	r7, r2
   1ee60:	orr	r4, r4, r3
   1ee64:	ldr	r2, [sp, #12]
   1ee68:	add	r3, r8, r2
   1ee6c:	str	r3, [r5]
   1ee70:	ldrb	r3, [r8, r2]
   1ee74:	cmp	r3, #0
   1ee78:	beq	1eb00 <__assert_fail@plt+0xd71c>
   1ee7c:	orr	r4, r4, #2
   1ee80:	b	1eb00 <__assert_fail@plt+0xd71c>
   1ee84:	cmp	r7, #0
   1ee88:	asr	r1, ip, #31
   1ee8c:	mov	lr, #0
   1ee90:	bne	1f1f4 <__assert_fail@plt+0xde10>
   1ee94:	umull	r2, r3, r6, ip
   1ee98:	mov	r6, r2
   1ee9c:	mov	r7, r3
   1eea0:	cmp	lr, #0
   1eea4:	beq	1ee64 <__assert_fail@plt+0xda80>
   1eea8:	mvn	r6, #0
   1eeac:	mov	r4, #1
   1eeb0:	mov	r7, r6
   1eeb4:	b	1ee64 <__assert_fail@plt+0xda80>
   1eeb8:	mov	r0, r3
   1eebc:	mov	r1, sl
   1eec0:	bl	112a0 <strchr@plt>
   1eec4:	cmp	r0, #0
   1eec8:	bne	1eb74 <__assert_fail@plt+0xd790>
   1eecc:	b	1ee7c <__assert_fail@plt+0xda98>
   1eed0:	ldrb	r3, [r8, #2]
   1eed4:	mov	ip, #1024	; 0x400
   1eed8:	cmp	r3, #66	; 0x42
   1eedc:	movne	r3, #1
   1eee0:	moveq	r3, #3
   1eee4:	str	r3, [sp, #12]
   1eee8:	b	1ec94 <__assert_fail@plt+0xd8b0>
   1eeec:	lsr	r3, r7, #31
   1eef0:	adds	r6, r6, r6
   1eef4:	adc	r7, r7, r7
   1eef8:	cmp	r3, #0
   1eefc:	beq	1ee64 <__assert_fail@plt+0xda80>
   1ef00:	b	1eea8 <__assert_fail@plt+0xdac4>
   1ef04:	lsr	r3, r7, #23
   1ef08:	lsl	r7, r7, #9
   1ef0c:	cmp	r3, #0
   1ef10:	lsl	r3, r6, #9
   1ef14:	orr	r7, r7, r6, lsr #23
   1ef18:	bne	1eea8 <__assert_fail@plt+0xdac4>
   1ef1c:	mov	r6, r3
   1ef20:	b	1ee64 <__assert_fail@plt+0xda80>
   1ef24:	asr	r3, ip, #31
   1ef28:	mov	r2, ip
   1ef2c:	cmp	r7, #0
   1ef30:	mov	r1, #0
   1ef34:	strd	r2, [sp]
   1ef38:	bne	1f344 <__assert_fail@plt+0xdf60>
   1ef3c:	umull	r6, r7, r6, ip
   1ef40:	mov	r0, r6
   1ef44:	mov	fp, r7
   1ef48:	cmp	r1, #0
   1ef4c:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1ef50:	cmp	fp, #0
   1ef54:	mov	lr, r1
   1ef58:	bne	1f4d4 <__assert_fail@plt+0xe0f0>
   1ef5c:	umull	r0, r1, r0, ip
   1ef60:	mov	r2, r0
   1ef64:	mov	r3, r1
   1ef68:	cmp	lr, #0
   1ef6c:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1ef70:	cmp	r3, #0
   1ef74:	bne	1f4fc <__assert_fail@plt+0xe118>
   1ef78:	umull	r2, r3, r2, ip
   1ef7c:	mov	r0, r2
   1ef80:	mov	r1, r3
   1ef84:	cmp	lr, #0
   1ef88:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1ef8c:	cmp	r1, #0
   1ef90:	bne	1f47c <__assert_fail@plt+0xe098>
   1ef94:	umull	r0, r1, r0, ip
   1ef98:	mov	r2, r0
   1ef9c:	mov	r3, r1
   1efa0:	cmp	lr, #0
   1efa4:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1efa8:	cmp	r3, #0
   1efac:	bne	1f2ac <__assert_fail@plt+0xdec8>
   1efb0:	umull	r2, r3, r2, ip
   1efb4:	mov	r0, r2
   1efb8:	mov	r1, r3
   1efbc:	cmp	lr, #0
   1efc0:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1efc4:	cmp	r1, #0
   1efc8:	beq	1ee08 <__assert_fail@plt+0xda24>
   1efcc:	umull	r6, r7, r0, ip
   1efd0:	mov	fp, lr
   1efd4:	mov	sl, r7
   1efd8:	umlal	sl, fp, r1, ip
   1efdc:	cmp	fp, #0
   1efe0:	bne	1f6e4 <__assert_fail@plt+0xe300>
   1efe4:	mov	r2, r6
   1efe8:	mov	r3, sl
   1efec:	b	1ee14 <__assert_fail@plt+0xda30>
   1eff0:	asr	r3, ip, #31
   1eff4:	mov	r2, ip
   1eff8:	cmp	r7, #0
   1effc:	mov	r1, #0
   1f000:	strd	r2, [sp]
   1f004:	bne	1f368 <__assert_fail@plt+0xdf84>
   1f008:	umull	r6, r7, r6, ip
   1f00c:	mov	r0, r6
   1f010:	mov	fp, r7
   1f014:	cmp	r1, #0
   1f018:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1f01c:	cmp	fp, #0
   1f020:	mov	lr, r1
   1f024:	beq	1ee08 <__assert_fail@plt+0xda24>
   1f028:	umull	r6, r7, r0, ip
   1f02c:	mov	r3, r1
   1f030:	mov	r2, r7
   1f034:	umlal	r2, r3, fp, ip
   1f038:	cmp	r3, #0
   1f03c:	strd	r2, [sp, #16]
   1f040:	bne	1f5c8 <__assert_fail@plt+0xe1e4>
   1f044:	mov	r2, r6
   1f048:	ldr	r3, [sp, #16]
   1f04c:	b	1ee14 <__assert_fail@plt+0xda30>
   1f050:	asr	r3, ip, #31
   1f054:	mov	r2, ip
   1f058:	cmp	r7, #0
   1f05c:	mov	r1, #0
   1f060:	strd	r2, [sp]
   1f064:	bne	1f3b0 <__assert_fail@plt+0xdfcc>
   1f068:	umull	r6, r7, r6, ip
   1f06c:	mov	r2, r6
   1f070:	mov	r3, r7
   1f074:	cmp	r1, #0
   1f078:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1f07c:	cmp	r3, #0
   1f080:	mov	lr, r1
   1f084:	beq	1edec <__assert_fail@plt+0xda08>
   1f088:	umull	r6, r7, r2, ip
   1f08c:	mov	fp, lr
   1f090:	mov	sl, r7
   1f094:	umlal	sl, fp, r3, ip
   1f098:	cmp	fp, #0
   1f09c:	bne	1f6a8 <__assert_fail@plt+0xe2c4>
   1f0a0:	mov	r0, r6
   1f0a4:	mov	r1, sl
   1f0a8:	b	1edf8 <__assert_fail@plt+0xda14>
   1f0ac:	asr	r3, ip, #31
   1f0b0:	mov	r2, ip
   1f0b4:	cmp	r7, #0
   1f0b8:	mov	r1, #0
   1f0bc:	strd	r2, [sp]
   1f0c0:	bne	1f38c <__assert_fail@plt+0xdfa8>
   1f0c4:	umull	r6, r7, r6, ip
   1f0c8:	mov	sl, r6
   1f0cc:	mov	lr, r7
   1f0d0:	cmp	r1, #0
   1f0d4:	bne	1eea8 <__assert_fail@plt+0xdac4>
   1f0d8:	cmp	lr, #0
   1f0dc:	mov	r7, r1
   1f0e0:	bne	1f4a0 <__assert_fail@plt+0xe0bc>
   1f0e4:	umull	sl, fp, sl, ip
   1f0e8:	mov	r0, sl
   1f0ec:	mov	r2, fp
   1f0f0:	cmp	r7, #0
   1f0f4:	mov	r6, r0
   1f0f8:	mov	r7, r2
   1f0fc:	beq	1ee64 <__assert_fail@plt+0xda80>
   1f100:	b	1eea8 <__assert_fail@plt+0xdac4>
   1f104:	asr	r3, ip, #31
   1f108:	mov	r2, ip
   1f10c:	cmp	r7, #0
   1f110:	mov	r1, #0
   1f114:	strd	r2, [sp]
   1f118:	bne	1f320 <__assert_fail@plt+0xdf3c>
   1f11c:	umull	r6, r7, r6, ip
   1f120:	mov	r0, r6
   1f124:	mov	fp, r7
   1f128:	cmp	r1, #0
   1f12c:	bne	1f1e4 <__assert_fail@plt+0xde00>
   1f130:	cmp	fp, #0
   1f134:	mov	lr, r1
   1f138:	beq	1ef94 <__assert_fail@plt+0xdbb0>
   1f13c:	umull	r6, r7, r0, ip
   1f140:	mov	r3, r1
   1f144:	mov	r2, r7
   1f148:	umlal	r2, r3, fp, ip
   1f14c:	cmp	r3, #0
   1f150:	strd	r2, [sp, #16]
   1f154:	bne	1f638 <__assert_fail@plt+0xe254>
   1f158:	mov	r2, r6
   1f15c:	ldr	r3, [sp, #16]
   1f160:	b	1efa0 <__assert_fail@plt+0xdbbc>
   1f164:	lsr	r3, r7, #22
   1f168:	lsl	r7, r7, #10
   1f16c:	cmp	r3, #0
   1f170:	lsl	r3, r6, #10
   1f174:	orr	r7, r7, r6, lsr #22
   1f178:	beq	1ef1c <__assert_fail@plt+0xdb38>
   1f17c:	b	1eea8 <__assert_fail@plt+0xdac4>
   1f180:	asr	r3, ip, #31
   1f184:	mov	r2, ip
   1f188:	cmp	r7, #0
   1f18c:	mov	r1, #0
   1f190:	strd	r2, [sp]
   1f194:	bne	1f2f8 <__assert_fail@plt+0xdf14>
   1f198:	umull	r6, r7, r6, ip
   1f19c:	mov	r2, r6
   1f1a0:	mov	r3, r7
   1f1a4:	cmp	r1, #0
   1f1a8:	bne	1eea8 <__assert_fail@plt+0xdac4>
   1f1ac:	cmp	r3, #0
   1f1b0:	mov	r7, r1
   1f1b4:	bne	1f45c <__assert_fail@plt+0xe078>
   1f1b8:	umull	r2, r3, r2, ip
   1f1bc:	mov	r6, r2
   1f1c0:	mov	lr, r3
   1f1c4:	cmp	r7, #0
   1f1c8:	bne	1eea8 <__assert_fail@plt+0xdac4>
   1f1cc:	cmp	lr, #0
   1f1d0:	bne	1f420 <__assert_fail@plt+0xe03c>
   1f1d4:	umull	r2, r3, r6, ip
   1f1d8:	mov	r0, r2
   1f1dc:	mov	r2, r3
   1f1e0:	b	1f0f0 <__assert_fail@plt+0xdd0c>
   1f1e4:	mvn	r6, #0
   1f1e8:	mov	r3, #1
   1f1ec:	mov	r7, r6
   1f1f0:	b	1ee60 <__assert_fail@plt+0xda7c>
   1f1f4:	umull	sl, fp, r6, ip
   1f1f8:	mov	r3, lr
   1f1fc:	mov	r2, fp
   1f200:	umlal	r2, r3, r7, ip
   1f204:	cmp	r3, #0
   1f208:	bne	1f600 <__assert_fail@plt+0xe21c>
   1f20c:	mov	r6, sl
   1f210:	mov	r7, r2
   1f214:	b	1eea0 <__assert_fail@plt+0xdabc>
   1f218:	mov	r3, #2
   1f21c:	mov	ip, #1000	; 0x3e8
   1f220:	str	r3, [sp, #12]
   1f224:	b	1ec94 <__assert_fail@plt+0xd8b0>
   1f228:	umull	r0, r1, r6, ip
   1f22c:	mov	r3, r7
   1f230:	mov	r2, r1
   1f234:	strd	r0, [sp, #16]
   1f238:	umlal	r2, r3, lr, ip
   1f23c:	cmp	r3, #0
   1f240:	beq	1ee50 <__assert_fail@plt+0xda6c>
   1f244:	ldrd	sl, [sp]
   1f248:	mov	r7, #1
   1f24c:	ldr	r0, [sp, #16]
   1f250:	ldr	r3, [sp, #20]
   1f254:	mul	r2, r6, fp
   1f258:	mla	r2, lr, sl, r2
   1f25c:	add	r2, r2, r3
   1f260:	b	1ee50 <__assert_fail@plt+0xda6c>
   1f264:	umull	sl, fp, r2, ip
   1f268:	mov	r1, lr
   1f26c:	mov	r0, fp
   1f270:	umlal	r0, r1, r3, ip
   1f274:	cmp	r1, #0
   1f278:	bne	1f558 <__assert_fail@plt+0xe174>
   1f27c:	mov	r6, sl
   1f280:	mov	lr, r0
   1f284:	b	1ee34 <__assert_fail@plt+0xda50>
   1f288:	umull	sl, fp, r0, ip
   1f28c:	mov	r7, lr
   1f290:	mov	r6, fp
   1f294:	umlal	r6, r7, r1, ip
   1f298:	cmp	r7, #0
   1f29c:	bne	1f700 <__assert_fail@plt+0xe31c>
   1f2a0:	mov	r2, sl
   1f2a4:	mov	r3, r6
   1f2a8:	b	1ee14 <__assert_fail@plt+0xda30>
   1f2ac:	umull	sl, fp, r2, ip
   1f2b0:	mov	r7, lr
   1f2b4:	mov	r6, fp
   1f2b8:	umlal	r6, r7, r3, ip
   1f2bc:	cmp	r7, #0
   1f2c0:	bne	1f590 <__assert_fail@plt+0xe1ac>
   1f2c4:	mov	r0, sl
   1f2c8:	mov	r1, r6
   1f2cc:	b	1efbc <__assert_fail@plt+0xdbd8>
   1f2d0:	umull	sl, fp, r6, ip
   1f2d4:	mov	r3, r1
   1f2d8:	mov	r2, fp
   1f2dc:	umlal	r2, r3, r7, ip
   1f2e0:	cmp	r3, #0
   1f2e4:	strd	r2, [sp, #16]
   1f2e8:	bne	1f574 <__assert_fail@plt+0xe190>
   1f2ec:	mov	r2, sl
   1f2f0:	ldr	r3, [sp, #16]
   1f2f4:	b	1eda0 <__assert_fail@plt+0xd9bc>
   1f2f8:	umull	sl, fp, r6, ip
   1f2fc:	mov	r3, r1
   1f300:	mov	r2, fp
   1f304:	umlal	r2, r3, r7, ip
   1f308:	cmp	r3, #0
   1f30c:	strd	r2, [sp, #16]
   1f310:	bne	1f654 <__assert_fail@plt+0xe270>
   1f314:	mov	r2, sl
   1f318:	ldr	r3, [sp, #16]
   1f31c:	b	1f1a4 <__assert_fail@plt+0xddc0>
   1f320:	umull	sl, fp, r6, ip
   1f324:	mov	r3, r1
   1f328:	mov	r2, fp
   1f32c:	umlal	r2, r3, r7, ip
   1f330:	cmp	r3, #0
   1f334:	bne	1f520 <__assert_fail@plt+0xe13c>
   1f338:	mov	r0, sl
   1f33c:	mov	fp, r2
   1f340:	b	1f128 <__assert_fail@plt+0xdd44>
   1f344:	umull	sl, fp, r6, ip
   1f348:	mov	r3, r1
   1f34c:	mov	r2, fp
   1f350:	umlal	r2, r3, r7, ip
   1f354:	cmp	r3, #0
   1f358:	bne	1f5e4 <__assert_fail@plt+0xe200>
   1f35c:	mov	r0, sl
   1f360:	mov	fp, r2
   1f364:	b	1ef48 <__assert_fail@plt+0xdb64>
   1f368:	umull	sl, fp, r6, ip
   1f36c:	mov	r3, r1
   1f370:	mov	r2, fp
   1f374:	umlal	r2, r3, r7, ip
   1f378:	cmp	r3, #0
   1f37c:	bne	1f670 <__assert_fail@plt+0xe28c>
   1f380:	mov	r0, sl
   1f384:	mov	fp, r2
   1f388:	b	1f014 <__assert_fail@plt+0xdc30>
   1f38c:	umull	sl, fp, r6, ip
   1f390:	mov	r3, r1
   1f394:	mov	r2, fp
   1f398:	strd	sl, [sp, #16]
   1f39c:	umlal	r2, r3, r7, ip
   1f3a0:	cmp	r3, #0
   1f3a4:	bne	1f618 <__assert_fail@plt+0xe234>
   1f3a8:	mov	lr, r2
   1f3ac:	b	1f0d0 <__assert_fail@plt+0xdcec>
   1f3b0:	umull	sl, fp, r6, ip
   1f3b4:	mov	r3, r1
   1f3b8:	mov	r2, fp
   1f3bc:	umlal	r2, r3, r7, ip
   1f3c0:	cmp	r3, #0
   1f3c4:	strd	r2, [sp, #16]
   1f3c8:	bne	1f71c <__assert_fail@plt+0xe338>
   1f3cc:	mov	r2, sl
   1f3d0:	ldr	r3, [sp, #16]
   1f3d4:	b	1f074 <__assert_fail@plt+0xdc90>
   1f3d8:	umull	sl, fp, r0, ip
   1f3dc:	mov	r7, lr
   1f3e0:	mov	r6, fp
   1f3e4:	umlal	r6, r7, r1, ip
   1f3e8:	cmp	r7, #0
   1f3ec:	bne	1f738 <__assert_fail@plt+0xe354>
   1f3f0:	mov	r2, sl
   1f3f4:	mov	r3, r6
   1f3f8:	b	1eddc <__assert_fail@plt+0xd9f8>
   1f3fc:	umull	r6, r7, r2, ip
   1f400:	mov	fp, r1
   1f404:	mov	sl, r7
   1f408:	umlal	sl, fp, r3, ip
   1f40c:	cmp	fp, #0
   1f410:	bne	1f5ac <__assert_fail@plt+0xe1c8>
   1f414:	mov	r0, r6
   1f418:	mov	r1, sl
   1f41c:	b	1edc0 <__assert_fail@plt+0xd9dc>
   1f420:	umull	r0, r1, r6, ip
   1f424:	mov	r3, r7
   1f428:	mov	r2, r1
   1f42c:	strd	r0, [sp, #16]
   1f430:	umlal	r2, r3, lr, ip
   1f434:	cmp	r3, #0
   1f438:	beq	1f0f0 <__assert_fail@plt+0xdd0c>
   1f43c:	ldrd	sl, [sp]
   1f440:	mov	r7, #1
   1f444:	ldr	r0, [sp, #16]
   1f448:	ldr	r3, [sp, #20]
   1f44c:	mul	r2, r6, fp
   1f450:	mla	r2, lr, sl, r2
   1f454:	add	r2, r2, r3
   1f458:	b	1f0f0 <__assert_fail@plt+0xdd0c>
   1f45c:	umull	sl, fp, r2, ip
   1f460:	mov	r0, fp
   1f464:	umlal	r0, r1, r3, ip
   1f468:	cmp	r1, #0
   1f46c:	bne	1f754 <__assert_fail@plt+0xe370>
   1f470:	mov	r6, sl
   1f474:	mov	lr, r0
   1f478:	b	1f1c4 <__assert_fail@plt+0xdde0>
   1f47c:	umull	r6, r7, r0, ip
   1f480:	mov	fp, lr
   1f484:	mov	sl, r7
   1f488:	umlal	sl, fp, r1, ip
   1f48c:	cmp	fp, #0
   1f490:	bne	1f68c <__assert_fail@plt+0xe2a8>
   1f494:	mov	r2, r6
   1f498:	mov	r3, sl
   1f49c:	b	1efa0 <__assert_fail@plt+0xdbbc>
   1f4a0:	umull	r0, r1, sl, ip
   1f4a4:	mov	r3, r7
   1f4a8:	mov	r2, r1
   1f4ac:	umlal	r2, r3, lr, ip
   1f4b0:	cmp	r3, #0
   1f4b4:	beq	1f0f0 <__assert_fail@plt+0xdd0c>
   1f4b8:	ldr	r3, [sp, #4]
   1f4bc:	mov	r7, #1
   1f4c0:	mul	r2, sl, r3
   1f4c4:	ldr	r3, [sp]
   1f4c8:	mla	r2, lr, r3, r2
   1f4cc:	add	r2, r2, r1
   1f4d0:	b	1f0f0 <__assert_fail@plt+0xdd0c>
   1f4d4:	umull	r6, r7, r0, ip
   1f4d8:	mov	r3, r1
   1f4dc:	mov	r2, r7
   1f4e0:	umlal	r2, r3, fp, ip
   1f4e4:	cmp	r3, #0
   1f4e8:	strd	r2, [sp, #16]
   1f4ec:	bne	1f770 <__assert_fail@plt+0xe38c>
   1f4f0:	mov	r2, r6
   1f4f4:	ldr	r3, [sp, #16]
   1f4f8:	b	1ef68 <__assert_fail@plt+0xdb84>
   1f4fc:	umull	sl, fp, r2, ip
   1f500:	mov	r7, lr
   1f504:	mov	r6, fp
   1f508:	umlal	r6, r7, r3, ip
   1f50c:	cmp	r7, #0
   1f510:	bne	1f53c <__assert_fail@plt+0xe158>
   1f514:	mov	r0, sl
   1f518:	mov	r1, r6
   1f51c:	b	1ef84 <__assert_fail@plt+0xdba0>
   1f520:	ldrd	r2, [sp]
   1f524:	mov	r0, sl
   1f528:	mov	r1, #1
   1f52c:	mul	r6, r6, r3
   1f530:	mla	r7, r2, r7, r6
   1f534:	add	fp, r7, fp
   1f538:	b	1f128 <__assert_fail@plt+0xdd44>
   1f53c:	ldrd	r6, [sp]
   1f540:	mov	r0, sl
   1f544:	mov	lr, #1
   1f548:	mul	r2, r2, r7
   1f54c:	mla	r1, r3, r6, r2
   1f550:	add	r1, r1, fp
   1f554:	b	1ef84 <__assert_fail@plt+0xdba0>
   1f558:	ldrd	r0, [sp]
   1f55c:	mov	r6, sl
   1f560:	mov	r7, #1
   1f564:	mul	r2, r2, r1
   1f568:	mla	lr, r3, r0, r2
   1f56c:	add	lr, lr, fp
   1f570:	b	1ee34 <__assert_fail@plt+0xda50>
   1f574:	ldm	sp, {r0, r3}
   1f578:	mov	r2, sl
   1f57c:	mov	r1, #1
   1f580:	mul	r3, r6, r3
   1f584:	mla	r3, r0, r7, r3
   1f588:	add	r3, r3, fp
   1f58c:	b	1eda0 <__assert_fail@plt+0xd9bc>
   1f590:	ldrd	r6, [sp]
   1f594:	mov	r0, sl
   1f598:	mov	lr, #1
   1f59c:	mul	r2, r2, r7
   1f5a0:	mla	r1, r3, r6, r2
   1f5a4:	add	r1, r1, fp
   1f5a8:	b	1efbc <__assert_fail@plt+0xdbd8>
   1f5ac:	ldrd	sl, [sp]
   1f5b0:	mov	r0, r6
   1f5b4:	mov	lr, #1
   1f5b8:	mul	r2, r2, fp
   1f5bc:	mla	r1, r3, sl, r2
   1f5c0:	add	r1, r1, r7
   1f5c4:	b	1edc0 <__assert_fail@plt+0xd9dc>
   1f5c8:	ldm	sp, {r1, r3}
   1f5cc:	mov	r2, r6
   1f5d0:	mov	lr, #1
   1f5d4:	mul	r3, r0, r3
   1f5d8:	mla	r3, fp, r1, r3
   1f5dc:	add	r3, r3, r7
   1f5e0:	b	1ee14 <__assert_fail@plt+0xda30>
   1f5e4:	ldrd	r2, [sp]
   1f5e8:	mov	r0, sl
   1f5ec:	mov	r1, #1
   1f5f0:	mul	r6, r6, r3
   1f5f4:	mla	r7, r2, r7, r6
   1f5f8:	add	fp, r7, fp
   1f5fc:	b	1ef48 <__assert_fail@plt+0xdb64>
   1f600:	mul	r3, r6, r1
   1f604:	mov	lr, #1
   1f608:	mov	r6, sl
   1f60c:	mla	r7, ip, r7, r3
   1f610:	add	r7, r7, fp
   1f614:	b	1eea0 <__assert_fail@plt+0xdabc>
   1f618:	ldrd	r2, [sp]
   1f61c:	mov	r1, #1
   1f620:	ldr	sl, [sp, #16]
   1f624:	mul	lr, r6, r3
   1f628:	ldr	r3, [sp, #20]
   1f62c:	mla	lr, r2, r7, lr
   1f630:	add	lr, lr, r3
   1f634:	b	1f0d0 <__assert_fail@plt+0xdcec>
   1f638:	ldm	sp, {r1, r3}
   1f63c:	mov	r2, r6
   1f640:	mov	lr, #1
   1f644:	mul	r3, r0, r3
   1f648:	mla	r3, fp, r1, r3
   1f64c:	add	r3, r3, r7
   1f650:	b	1efa0 <__assert_fail@plt+0xdbbc>
   1f654:	ldm	sp, {r0, r3}
   1f658:	mov	r2, sl
   1f65c:	mov	r1, #1
   1f660:	mul	r3, r6, r3
   1f664:	mla	r3, r0, r7, r3
   1f668:	add	r3, r3, fp
   1f66c:	b	1f1a4 <__assert_fail@plt+0xddc0>
   1f670:	ldrd	r2, [sp]
   1f674:	mov	r0, sl
   1f678:	mov	r1, #1
   1f67c:	mul	r6, r6, r3
   1f680:	mla	r7, r2, r7, r6
   1f684:	add	fp, r7, fp
   1f688:	b	1f014 <__assert_fail@plt+0xdc30>
   1f68c:	ldrd	sl, [sp]
   1f690:	mov	r2, r6
   1f694:	mov	lr, #1
   1f698:	mul	r3, r0, fp
   1f69c:	mla	r3, r1, sl, r3
   1f6a0:	add	r3, r3, r7
   1f6a4:	b	1efa0 <__assert_fail@plt+0xdbbc>
   1f6a8:	ldrd	sl, [sp]
   1f6ac:	mov	r0, r6
   1f6b0:	mov	lr, #1
   1f6b4:	mul	r2, r2, fp
   1f6b8:	mla	r1, r3, sl, r2
   1f6bc:	add	r1, r1, r7
   1f6c0:	b	1edf8 <__assert_fail@plt+0xda14>
   1f6c4:	movw	r3, #7152	; 0x1bf0
   1f6c8:	movt	r3, #2
   1f6cc:	movw	r1, #6968	; 0x1b38
   1f6d0:	movt	r1, #2
   1f6d4:	movw	r0, #6984	; 0x1b48
   1f6d8:	movt	r0, #2
   1f6dc:	mov	r2, #85	; 0x55
   1f6e0:	bl	113e4 <__assert_fail@plt>
   1f6e4:	ldrd	sl, [sp]
   1f6e8:	mov	r2, r6
   1f6ec:	mov	lr, #1
   1f6f0:	mul	r3, r0, fp
   1f6f4:	mla	r3, r1, sl, r3
   1f6f8:	add	r3, r3, r7
   1f6fc:	b	1ee14 <__assert_fail@plt+0xda30>
   1f700:	ldrd	r6, [sp]
   1f704:	mov	r2, sl
   1f708:	mov	lr, #1
   1f70c:	mul	r3, r0, r7
   1f710:	mla	r3, r1, r6, r3
   1f714:	add	r3, r3, fp
   1f718:	b	1ee14 <__assert_fail@plt+0xda30>
   1f71c:	ldm	sp, {r0, r3}
   1f720:	mov	r2, sl
   1f724:	mov	r1, #1
   1f728:	mul	r3, r6, r3
   1f72c:	mla	r3, r0, r7, r3
   1f730:	add	r3, r3, fp
   1f734:	b	1f074 <__assert_fail@plt+0xdc90>
   1f738:	ldrd	r6, [sp]
   1f73c:	mov	r2, sl
   1f740:	mov	lr, #1
   1f744:	mul	r3, r0, r7
   1f748:	mla	r3, r1, r6, r3
   1f74c:	add	r3, r3, fp
   1f750:	b	1eddc <__assert_fail@plt+0xd9f8>
   1f754:	ldrd	r0, [sp]
   1f758:	mov	r6, sl
   1f75c:	mov	r7, #1
   1f760:	mul	r2, r2, r1
   1f764:	mla	lr, r3, r0, r2
   1f768:	add	lr, lr, fp
   1f76c:	b	1f1c4 <__assert_fail@plt+0xdde0>
   1f770:	ldm	sp, {r1, r3}
   1f774:	mov	r2, r6
   1f778:	mov	lr, #1
   1f77c:	mul	r3, r0, r3
   1f780:	mla	r3, fp, r1, r3
   1f784:	add	r3, r3, r7
   1f788:	b	1ef68 <__assert_fail@plt+0xdb84>
   1f78c:	cmp	r1, #0
   1f790:	cmpne	r0, #0
   1f794:	beq	1f7e0 <__assert_fail@plt+0xe3fc>
   1f798:	strd	r4, [sp, #-16]!
   1f79c:	umull	r4, r5, r0, r1
   1f7a0:	str	r6, [sp, #8]
   1f7a4:	str	lr, [sp, #12]
   1f7a8:	adds	r3, r5, #0
   1f7ac:	movne	r3, #1
   1f7b0:	cmp	r4, #0
   1f7b4:	blt	1f7c0 <__assert_fail@plt+0xe3dc>
   1f7b8:	cmp	r3, #0
   1f7bc:	beq	1f7ec <__assert_fail@plt+0xe408>
   1f7c0:	bl	112c4 <__errno_location@plt>
   1f7c4:	mov	r3, #12
   1f7c8:	ldrd	r4, [sp]
   1f7cc:	ldr	r6, [sp, #8]
   1f7d0:	add	sp, sp, #12
   1f7d4:	str	r3, [r0]
   1f7d8:	mov	r0, #0
   1f7dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7e0:	mov	r1, #1
   1f7e4:	mov	r0, r1
   1f7e8:	b	11090 <calloc@plt>
   1f7ec:	ldrd	r4, [sp]
   1f7f0:	ldr	r6, [sp, #8]
   1f7f4:	ldr	lr, [sp, #12]
   1f7f8:	add	sp, sp, #16
   1f7fc:	b	11090 <calloc@plt>
   1f800:	cmp	r0, #0
   1f804:	beq	1f810 <__assert_fail@plt+0xe42c>
   1f808:	blt	1f818 <__assert_fail@plt+0xe434>
   1f80c:	b	1121c <malloc@plt>
   1f810:	mov	r0, #1
   1f814:	b	1121c <malloc@plt>
   1f818:	str	r4, [sp, #-8]!
   1f81c:	str	lr, [sp, #4]
   1f820:	bl	112c4 <__errno_location@plt>
   1f824:	mov	r3, #12
   1f828:	ldr	r4, [sp]
   1f82c:	add	sp, sp, #4
   1f830:	str	r3, [r0]
   1f834:	mov	r0, #0
   1f838:	pop	{pc}		; (ldr pc, [sp], #4)
   1f83c:	cmp	r0, #0
   1f840:	beq	1f868 <__assert_fail@plt+0xe484>
   1f844:	cmp	r1, #0
   1f848:	str	r4, [sp, #-8]!
   1f84c:	str	lr, [sp, #4]
   1f850:	beq	1f870 <__assert_fail@plt+0xe48c>
   1f854:	blt	1f884 <__assert_fail@plt+0xe4a0>
   1f858:	ldr	r4, [sp]
   1f85c:	ldr	lr, [sp, #4]
   1f860:	add	sp, sp, #8
   1f864:	b	11174 <realloc@plt>
   1f868:	mov	r0, r1
   1f86c:	b	1f800 <__assert_fail@plt+0xe41c>
   1f870:	bl	15ad8 <__assert_fail@plt+0x46f4>
   1f874:	ldr	r4, [sp]
   1f878:	add	sp, sp, #4
   1f87c:	mov	r0, #0
   1f880:	pop	{pc}		; (ldr pc, [sp], #4)
   1f884:	bl	112c4 <__errno_location@plt>
   1f888:	mov	r3, #12
   1f88c:	str	r3, [r0]
   1f890:	b	1f874 <__assert_fail@plt+0xe490>
   1f894:	strd	r4, [sp, #-16]!
   1f898:	mov	r4, r0
   1f89c:	str	r6, [sp, #8]
   1f8a0:	str	lr, [sp, #12]
   1f8a4:	bl	111ec <__fpending@plt>
   1f8a8:	ldr	r5, [r4]
   1f8ac:	mov	r6, r0
   1f8b0:	mov	r0, r4
   1f8b4:	bl	15918 <__assert_fail@plt+0x4534>
   1f8b8:	mov	r4, r0
   1f8bc:	and	r5, r5, #32
   1f8c0:	cmp	r5, #0
   1f8c4:	bne	1f8fc <__assert_fail@plt+0xe518>
   1f8c8:	cmp	r0, #0
   1f8cc:	beq	1f8e8 <__assert_fail@plt+0xe504>
   1f8d0:	cmp	r6, #0
   1f8d4:	bne	1f914 <__assert_fail@plt+0xe530>
   1f8d8:	bl	112c4 <__errno_location@plt>
   1f8dc:	ldr	r4, [r0]
   1f8e0:	subs	r4, r4, #9
   1f8e4:	mvnne	r4, #0
   1f8e8:	mov	r0, r4
   1f8ec:	ldrd	r4, [sp]
   1f8f0:	ldr	r6, [sp, #8]
   1f8f4:	add	sp, sp, #12
   1f8f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8fc:	cmp	r0, #0
   1f900:	bne	1f914 <__assert_fail@plt+0xe530>
   1f904:	bl	112c4 <__errno_location@plt>
   1f908:	str	r4, [r0]
   1f90c:	mvn	r4, #0
   1f910:	b	1f8e8 <__assert_fail@plt+0xe504>
   1f914:	mvn	r4, #0
   1f918:	b	1f8e8 <__assert_fail@plt+0xe504>
   1f91c:	push	{r1, r2, r3}
   1f920:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f924:	strd	r6, [sp, #8]
   1f928:	str	lr, [sp, #16]
   1f92c:	sub	sp, sp, #8
   1f930:	ldr	r1, [sp, #28]
   1f934:	add	r2, sp, #32
   1f938:	str	r2, [sp, #4]
   1f93c:	cmp	r1, #0
   1f940:	beq	1fa1c <__assert_fail@plt+0xe638>
   1f944:	movw	r3, #1030	; 0x406
   1f948:	mov	r6, r0
   1f94c:	cmp	r1, r3
   1f950:	beq	1fa2c <__assert_fail@plt+0xe648>
   1f954:	cmp	r1, #11
   1f958:	beq	1f9d4 <__assert_fail@plt+0xe5f0>
   1f95c:	ble	1f9b4 <__assert_fail@plt+0xe5d0>
   1f960:	movw	r2, #1031	; 0x407
   1f964:	cmp	r1, r2
   1f968:	bgt	1f9f0 <__assert_fail@plt+0xe60c>
   1f96c:	cmp	r1, r3
   1f970:	bge	1f980 <__assert_fail@plt+0xe59c>
   1f974:	movw	r3, #1025	; 0x401
   1f978:	cmp	r1, r3
   1f97c:	beq	1f9d4 <__assert_fail@plt+0xe5f0>
   1f980:	ldr	r3, [sp, #4]
   1f984:	mov	r0, r6
   1f988:	ldr	r2, [r3]
   1f98c:	bl	11330 <fcntl64@plt>
   1f990:	mov	r4, r0
   1f994:	mov	r0, r4
   1f998:	add	sp, sp, #8
   1f99c:	ldrd	r4, [sp]
   1f9a0:	ldrd	r6, [sp, #8]
   1f9a4:	ldr	lr, [sp, #16]
   1f9a8:	add	sp, sp, #20
   1f9ac:	add	sp, sp, #12
   1f9b0:	bx	lr
   1f9b4:	cmp	r1, #4
   1f9b8:	beq	1f980 <__assert_fail@plt+0xe59c>
   1f9bc:	bgt	1f9e4 <__assert_fail@plt+0xe600>
   1f9c0:	cmp	r1, #2
   1f9c4:	beq	1f980 <__assert_fail@plt+0xe59c>
   1f9c8:	bgt	1f9d4 <__assert_fail@plt+0xe5f0>
   1f9cc:	cmp	r1, #1
   1f9d0:	bne	1f980 <__assert_fail@plt+0xe59c>
   1f9d4:	mov	r0, r6
   1f9d8:	bl	11330 <fcntl64@plt>
   1f9dc:	mov	r4, r0
   1f9e0:	b	1f994 <__assert_fail@plt+0xe5b0>
   1f9e4:	cmp	r1, #9
   1f9e8:	bne	1f980 <__assert_fail@plt+0xe59c>
   1f9ec:	b	1f9d4 <__assert_fail@plt+0xe5f0>
   1f9f0:	movw	r3, #1033	; 0x409
   1f9f4:	cmp	r1, r3
   1f9f8:	beq	1f980 <__assert_fail@plt+0xe59c>
   1f9fc:	blt	1f9d4 <__assert_fail@plt+0xe5f0>
   1fa00:	movw	r3, #1034	; 0x40a
   1fa04:	cmp	r1, r3
   1fa08:	bne	1f980 <__assert_fail@plt+0xe59c>
   1fa0c:	mov	r0, r6
   1fa10:	bl	11330 <fcntl64@plt>
   1fa14:	mov	r4, r0
   1fa18:	b	1f994 <__assert_fail@plt+0xe5b0>
   1fa1c:	ldr	r2, [sp, #32]
   1fa20:	bl	11330 <fcntl64@plt>
   1fa24:	mov	r4, r0
   1fa28:	b	1f994 <__assert_fail@plt+0xe5b0>
   1fa2c:	movw	r5, #9188	; 0x23e4
   1fa30:	movt	r5, #3
   1fa34:	ldr	r7, [r2]
   1fa38:	add	r2, sp, #36	; 0x24
   1fa3c:	ldr	r3, [r5]
   1fa40:	str	r2, [sp, #4]
   1fa44:	mov	r2, r7
   1fa48:	cmp	r3, #0
   1fa4c:	blt	1fa68 <__assert_fail@plt+0xe684>
   1fa50:	bl	11330 <fcntl64@plt>
   1fa54:	subs	r4, r0, #0
   1fa58:	blt	1fad0 <__assert_fail@plt+0xe6ec>
   1fa5c:	mov	r3, #1
   1fa60:	str	r3, [r5]
   1fa64:	b	1f994 <__assert_fail@plt+0xe5b0>
   1fa68:	mov	r1, #0
   1fa6c:	bl	11330 <fcntl64@plt>
   1fa70:	subs	r4, r0, #0
   1fa74:	blt	1f994 <__assert_fail@plt+0xe5b0>
   1fa78:	ldr	r3, [r5]
   1fa7c:	cmn	r3, #1
   1fa80:	bne	1f994 <__assert_fail@plt+0xe5b0>
   1fa84:	mov	r1, #1
   1fa88:	mov	r0, r4
   1fa8c:	bl	11330 <fcntl64@plt>
   1fa90:	subs	r2, r0, #0
   1fa94:	blt	1fab0 <__assert_fail@plt+0xe6cc>
   1fa98:	orr	r2, r2, #1
   1fa9c:	mov	r1, #2
   1faa0:	mov	r0, r4
   1faa4:	bl	11330 <fcntl64@plt>
   1faa8:	cmn	r0, #1
   1faac:	bne	1f994 <__assert_fail@plt+0xe5b0>
   1fab0:	bl	112c4 <__errno_location@plt>
   1fab4:	mov	r5, r0
   1fab8:	mov	r0, r4
   1fabc:	ldr	r6, [r5]
   1fac0:	mvn	r4, #0
   1fac4:	bl	113d8 <close@plt>
   1fac8:	str	r6, [r5]
   1facc:	b	1f994 <__assert_fail@plt+0xe5b0>
   1fad0:	bl	112c4 <__errno_location@plt>
   1fad4:	ldr	r3, [r0]
   1fad8:	cmp	r3, #22
   1fadc:	bne	1fa5c <__assert_fail@plt+0xe678>
   1fae0:	mov	r2, r7
   1fae4:	mov	r0, r6
   1fae8:	mov	r1, #0
   1faec:	bl	11330 <fcntl64@plt>
   1faf0:	subs	r4, r0, #0
   1faf4:	mvnge	r3, #0
   1faf8:	strge	r3, [r5]
   1fafc:	bge	1fa84 <__assert_fail@plt+0xe6a0>
   1fb00:	b	1f994 <__assert_fail@plt+0xe5b0>
   1fb04:	mov	r0, #14
   1fb08:	str	r4, [sp, #-8]!
   1fb0c:	str	lr, [sp, #4]
   1fb10:	bl	1136c <nl_langinfo@plt>
   1fb14:	cmp	r0, #0
   1fb18:	beq	1fb3c <__assert_fail@plt+0xe758>
   1fb1c:	ldrb	r2, [r0]
   1fb20:	movw	r3, #7164	; 0x1bfc
   1fb24:	movt	r3, #2
   1fb28:	ldr	r4, [sp]
   1fb2c:	add	sp, sp, #4
   1fb30:	cmp	r2, #0
   1fb34:	moveq	r0, r3
   1fb38:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb3c:	ldr	r4, [sp]
   1fb40:	add	sp, sp, #4
   1fb44:	movw	r0, #7164	; 0x1bfc
   1fb48:	movt	r0, #2
   1fb4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb50:	strd	r4, [sp, #-20]!	; 0xffffffec
   1fb54:	mov	r5, r2
   1fb58:	strd	r6, [sp, #8]
   1fb5c:	subs	r6, r0, #0
   1fb60:	mov	r7, r1
   1fb64:	str	lr, [sp, #16]
   1fb68:	sub	sp, sp, #12
   1fb6c:	addeq	r6, sp, #4
   1fb70:	mov	r0, r6
   1fb74:	bl	111f8 <mbrtowc@plt>
   1fb78:	cmp	r5, #0
   1fb7c:	cmnne	r0, #3
   1fb80:	mov	r4, r0
   1fb84:	bhi	1fba0 <__assert_fail@plt+0xe7bc>
   1fb88:	mov	r0, r4
   1fb8c:	add	sp, sp, #12
   1fb90:	ldrd	r4, [sp]
   1fb94:	ldrd	r6, [sp, #8]
   1fb98:	add	sp, sp, #16
   1fb9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fba0:	mov	r0, #0
   1fba4:	bl	15c4c <__assert_fail@plt+0x4868>
   1fba8:	cmp	r0, #0
   1fbac:	bne	1fb88 <__assert_fail@plt+0xe7a4>
   1fbb0:	ldrb	r3, [r7]
   1fbb4:	mov	r4, #1
   1fbb8:	str	r3, [r6]
   1fbbc:	b	1fb88 <__assert_fail@plt+0xe7a4>
   1fbc0:	umull	r2, r3, r1, r2
   1fbc4:	cmp	r3, #0
   1fbc8:	bne	1fbd4 <__assert_fail@plt+0xe7f0>
   1fbcc:	mov	r1, r2
   1fbd0:	b	1f83c <__assert_fail@plt+0xe458>
   1fbd4:	str	r4, [sp, #-8]!
   1fbd8:	str	lr, [sp, #4]
   1fbdc:	bl	112c4 <__errno_location@plt>
   1fbe0:	mov	r3, #12
   1fbe4:	ldr	r4, [sp]
   1fbe8:	add	sp, sp, #4
   1fbec:	str	r3, [r0]
   1fbf0:	mov	r0, #0
   1fbf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fbf8:	cmp	r3, #0
   1fbfc:	cmpeq	r2, #0
   1fc00:	bne	1fc24 <__assert_fail@plt+0xe840>
   1fc04:	cmp	r1, #0
   1fc08:	movlt	r1, #-2147483648	; 0x80000000
   1fc0c:	movlt	r0, #0
   1fc10:	blt	1fc20 <__assert_fail@plt+0xe83c>
   1fc14:	cmpeq	r0, #0
   1fc18:	mvnne	r1, #-2147483648	; 0x80000000
   1fc1c:	mvnne	r0, #0
   1fc20:	b	1fd08 <__assert_fail@plt+0xe924>
   1fc24:	sub	sp, sp, #8
   1fc28:	push	{sp, lr}
   1fc2c:	cmp	r1, #0
   1fc30:	blt	1fc50 <__assert_fail@plt+0xe86c>
   1fc34:	cmp	r3, #0
   1fc38:	blt	1fc84 <__assert_fail@plt+0xe8a0>
   1fc3c:	bl	1fd18 <__assert_fail@plt+0xe934>
   1fc40:	ldr	lr, [sp, #4]
   1fc44:	add	sp, sp, #8
   1fc48:	pop	{r2, r3}
   1fc4c:	bx	lr
   1fc50:	rsbs	r0, r0, #0
   1fc54:	sbc	r1, r1, r1, lsl #1
   1fc58:	cmp	r3, #0
   1fc5c:	blt	1fca8 <__assert_fail@plt+0xe8c4>
   1fc60:	bl	1fd18 <__assert_fail@plt+0xe934>
   1fc64:	ldr	lr, [sp, #4]
   1fc68:	add	sp, sp, #8
   1fc6c:	pop	{r2, r3}
   1fc70:	rsbs	r0, r0, #0
   1fc74:	sbc	r1, r1, r1, lsl #1
   1fc78:	rsbs	r2, r2, #0
   1fc7c:	sbc	r3, r3, r3, lsl #1
   1fc80:	bx	lr
   1fc84:	rsbs	r2, r2, #0
   1fc88:	sbc	r3, r3, r3, lsl #1
   1fc8c:	bl	1fd18 <__assert_fail@plt+0xe934>
   1fc90:	ldr	lr, [sp, #4]
   1fc94:	add	sp, sp, #8
   1fc98:	pop	{r2, r3}
   1fc9c:	rsbs	r0, r0, #0
   1fca0:	sbc	r1, r1, r1, lsl #1
   1fca4:	bx	lr
   1fca8:	rsbs	r2, r2, #0
   1fcac:	sbc	r3, r3, r3, lsl #1
   1fcb0:	bl	1fd18 <__assert_fail@plt+0xe934>
   1fcb4:	ldr	lr, [sp, #4]
   1fcb8:	add	sp, sp, #8
   1fcbc:	pop	{r2, r3}
   1fcc0:	rsbs	r2, r2, #0
   1fcc4:	sbc	r3, r3, r3, lsl #1
   1fcc8:	bx	lr
   1fccc:	cmp	r3, #0
   1fcd0:	cmpeq	r2, #0
   1fcd4:	bne	1fcec <__assert_fail@plt+0xe908>
   1fcd8:	cmp	r1, #0
   1fcdc:	cmpeq	r0, #0
   1fce0:	mvnne	r1, #0
   1fce4:	mvnne	r0, #0
   1fce8:	b	1fd08 <__assert_fail@plt+0xe924>
   1fcec:	sub	sp, sp, #8
   1fcf0:	push	{sp, lr}
   1fcf4:	bl	1fd18 <__assert_fail@plt+0xe934>
   1fcf8:	ldr	lr, [sp, #4]
   1fcfc:	add	sp, sp, #8
   1fd00:	pop	{r2, r3}
   1fd04:	bx	lr
   1fd08:	push	{r1, lr}
   1fd0c:	mov	r0, #8
   1fd10:	bl	110a8 <raise@plt>
   1fd14:	pop	{r1, pc}
   1fd18:	cmp	r1, r3
   1fd1c:	cmpeq	r0, r2
   1fd20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd24:	mov	r4, r0
   1fd28:	movcc	r0, #0
   1fd2c:	mov	r5, r1
   1fd30:	ldr	lr, [sp, #36]	; 0x24
   1fd34:	movcc	r1, r0
   1fd38:	bcc	1fe34 <__assert_fail@plt+0xea50>
   1fd3c:	cmp	r3, #0
   1fd40:	clzeq	ip, r2
   1fd44:	clzne	ip, r3
   1fd48:	addeq	ip, ip, #32
   1fd4c:	cmp	r5, #0
   1fd50:	clzeq	r1, r4
   1fd54:	addeq	r1, r1, #32
   1fd58:	clzne	r1, r5
   1fd5c:	sub	ip, ip, r1
   1fd60:	sub	sl, ip, #32
   1fd64:	lsl	r9, r3, ip
   1fd68:	rsb	fp, ip, #32
   1fd6c:	orr	r9, r9, r2, lsl sl
   1fd70:	orr	r9, r9, r2, lsr fp
   1fd74:	lsl	r8, r2, ip
   1fd78:	cmp	r5, r9
   1fd7c:	cmpeq	r4, r8
   1fd80:	movcc	r0, #0
   1fd84:	movcc	r1, r0
   1fd88:	bcc	1fda4 <__assert_fail@plt+0xe9c0>
   1fd8c:	mov	r0, #1
   1fd90:	subs	r4, r4, r8
   1fd94:	lsl	r1, r0, sl
   1fd98:	orr	r1, r1, r0, lsr fp
   1fd9c:	lsl	r0, r0, ip
   1fda0:	sbc	r5, r5, r9
   1fda4:	cmp	ip, #0
   1fda8:	beq	1fe34 <__assert_fail@plt+0xea50>
   1fdac:	lsr	r6, r8, #1
   1fdb0:	orr	r6, r6, r9, lsl #31
   1fdb4:	lsr	r7, r9, #1
   1fdb8:	mov	r2, ip
   1fdbc:	b	1fde0 <__assert_fail@plt+0xe9fc>
   1fdc0:	subs	r3, r4, r6
   1fdc4:	sbc	r8, r5, r7
   1fdc8:	adds	r3, r3, r3
   1fdcc:	adc	r8, r8, r8
   1fdd0:	adds	r4, r3, #1
   1fdd4:	adc	r5, r8, #0
   1fdd8:	subs	r2, r2, #1
   1fddc:	beq	1fdfc <__assert_fail@plt+0xea18>
   1fde0:	cmp	r5, r7
   1fde4:	cmpeq	r4, r6
   1fde8:	bcs	1fdc0 <__assert_fail@plt+0xe9dc>
   1fdec:	adds	r4, r4, r4
   1fdf0:	adc	r5, r5, r5
   1fdf4:	subs	r2, r2, #1
   1fdf8:	bne	1fde0 <__assert_fail@plt+0xe9fc>
   1fdfc:	lsr	r3, r4, ip
   1fe00:	orr	r3, r3, r5, lsl fp
   1fe04:	lsr	r2, r5, ip
   1fe08:	orr	r3, r3, r5, lsr sl
   1fe0c:	adds	r0, r0, r4
   1fe10:	mov	r4, r3
   1fe14:	lsl	r3, r2, ip
   1fe18:	orr	r3, r3, r4, lsl sl
   1fe1c:	lsl	ip, r4, ip
   1fe20:	orr	r3, r3, r4, lsr fp
   1fe24:	adc	r1, r1, r5
   1fe28:	subs	r0, r0, ip
   1fe2c:	mov	r5, r2
   1fe30:	sbc	r1, r1, r3
   1fe34:	cmp	lr, #0
   1fe38:	strdne	r4, [lr]
   1fe3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fe44:	mov	r7, r0
   1fe48:	ldr	r6, [pc, #72]	; 1fe98 <__assert_fail@plt+0xeab4>
   1fe4c:	ldr	r5, [pc, #72]	; 1fe9c <__assert_fail@plt+0xeab8>
   1fe50:	add	r6, pc, r6
   1fe54:	add	r5, pc, r5
   1fe58:	sub	r6, r6, r5
   1fe5c:	mov	r8, r1
   1fe60:	mov	r9, r2
   1fe64:	bl	11064 <fdopen@plt-0x20>
   1fe68:	asrs	r6, r6, #2
   1fe6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fe70:	mov	r4, #0
   1fe74:	add	r4, r4, #1
   1fe78:	ldr	r3, [r5], #4
   1fe7c:	mov	r2, r9
   1fe80:	mov	r1, r8
   1fe84:	mov	r0, r7
   1fe88:	blx	r3
   1fe8c:	cmp	r6, r4
   1fe90:	bne	1fe74 <__assert_fail@plt+0xea90>
   1fe94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fe98:	strheq	r2, [r1], -ip
   1fe9c:	strheq	r2, [r1], -r4
   1fea0:	bx	lr
   1fea4:	ldr	r3, [pc, #12]	; 1feb8 <__assert_fail@plt+0xead4>
   1fea8:	mov	r1, #0
   1feac:	add	r3, pc, r3
   1feb0:	ldr	r2, [r3]
   1feb4:	b	112dc <__cxa_atexit@plt>
   1feb8:	andeq	r2, r1, r8, lsl #5

Disassembly of section .fini:

0001febc <.fini>:
   1febc:	push	{r3, lr}
   1fec0:	pop	{r3, pc}
