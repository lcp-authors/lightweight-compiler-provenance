
../repos/prog2/1.1.3:     file format elf32-littlearm


Disassembly of section .init:

00010598 <.init>:
   10598:	push	{r3, lr}
   1059c:	bl	10648 <_start@@Base+0x3c>
   105a0:	pop	{r3, pc}

Disassembly of section .plt:

000105a4 <printf@plt-0x14>:
   105a4:	push	{lr}		; (str lr, [sp, #-4]!)
   105a8:	ldr	lr, [pc, #4]	; 105b4 <printf@plt-0x4>
   105ac:	add	lr, pc, lr
   105b0:	ldr	pc, [lr, #8]!
   105b4:	andeq	r0, r1, ip, asr #20

000105b8 <printf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000105c4 <fopen@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2628]!	; 0xa44

000105d0 <__libc_start_main@plt>:
   105d0:	add	ip, pc, #0, 12
   105d4:	add	ip, ip, #16, 20	; 0x10000
   105d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000105dc <__gmon_start__@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2612]!	; 0xa34

000105e8 <fclose@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2604]!	; 0xa2c

000105f4 <abort@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2596]!	; 0xa24

00010600 <getc@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2588]!	; 0xa1c

Disassembly of section .text:

0001060c <_start@@Base>:
   1060c:	mov	fp, #0
   10610:	mov	lr, #0
   10614:	pop	{r1}		; (ldr r1, [sp], #4)
   10618:	mov	r2, sp
   1061c:	push	{r2}		; (str r2, [sp, #-4]!)
   10620:	push	{r0}		; (str r0, [sp, #-4]!)
   10624:	ldr	ip, [pc, #16]	; 1063c <_start@@Base+0x30>
   10628:	push	{ip}		; (str ip, [sp, #-4]!)
   1062c:	ldr	r0, [pc, #12]	; 10640 <_start@@Base+0x34>
   10630:	ldr	r3, [pc, #12]	; 10644 <_start@@Base+0x38>
   10634:	bl	105d0 <__libc_start_main@plt>
   10638:	bl	105f4 <abort@plt>
   1063c:	andeq	r0, r1, r4, lsl r9
   10640:	andeq	r0, r1, ip, asr #14
   10644:			; <UNDEFINED> instruction: 0x000108b4
   10648:	ldr	r3, [pc, #20]	; 10664 <_start@@Base+0x58>
   1064c:	ldr	r2, [pc, #20]	; 10668 <_start@@Base+0x5c>
   10650:	add	r3, pc, r3
   10654:	ldr	r2, [r3, r2]
   10658:	cmp	r2, #0
   1065c:	bxeq	lr
   10660:	b	105dc <__gmon_start__@plt>
   10664:	andeq	r0, r1, r8, lsr #19
   10668:	andeq	r0, r0, r8, lsr #32
   1066c:	ldr	r0, [pc, #24]	; 1068c <_start@@Base+0x80>
   10670:	ldr	r3, [pc, #24]	; 10690 <_start@@Base+0x84>
   10674:	cmp	r3, r0
   10678:	bxeq	lr
   1067c:	ldr	r3, [pc, #16]	; 10694 <_start@@Base+0x88>
   10680:	cmp	r3, #0
   10684:	bxeq	lr
   10688:	bx	r3
   1068c:	andeq	r1, r2, r4, lsr r0
   10690:	andeq	r1, r2, r4, lsr r0
   10694:	andeq	r0, r0, r0
   10698:	ldr	r0, [pc, #36]	; 106c4 <_start@@Base+0xb8>
   1069c:	ldr	r1, [pc, #36]	; 106c8 <_start@@Base+0xbc>
   106a0:	sub	r1, r1, r0
   106a4:	asr	r1, r1, #2
   106a8:	add	r1, r1, r1, lsr #31
   106ac:	asrs	r1, r1, #1
   106b0:	bxeq	lr
   106b4:	ldr	r3, [pc, #16]	; 106cc <_start@@Base+0xc0>
   106b8:	cmp	r3, #0
   106bc:	bxeq	lr
   106c0:	bx	r3
   106c4:	andeq	r1, r2, r4, lsr r0
   106c8:	andeq	r1, r2, r4, lsr r0
   106cc:	andeq	r0, r0, r0
   106d0:	push	{r4, lr}
   106d4:	ldr	r4, [pc, #24]	; 106f4 <_start@@Base+0xe8>
   106d8:	ldrb	r3, [r4]
   106dc:	cmp	r3, #0
   106e0:	popne	{r4, pc}
   106e4:	bl	1066c <_start@@Base+0x60>
   106e8:	mov	r3, #1
   106ec:	strb	r3, [r4]
   106f0:	pop	{r4, pc}
   106f4:	andeq	r1, r2, r4, lsr r0
   106f8:	b	10698 <_start@@Base+0x8c>

000106fc <in_array@@Base>:
   106fc:	cmp	r2, #0
   10700:	blt	1073c <in_array@@Base+0x40>
   10704:	ldr	r3, [r1]
   10708:	cmp	r0, r3
   1070c:	beq	10744 <in_array@@Base+0x48>
   10710:	mov	r3, #0
   10714:	add	r3, r3, #1
   10718:	cmp	r2, r3
   1071c:	blt	10734 <in_array@@Base+0x38>
   10720:	ldr	ip, [r1, #4]!
   10724:	cmp	ip, r0
   10728:	bne	10714 <in_array@@Base+0x18>
   1072c:	mov	r0, #1
   10730:	bx	lr
   10734:	mov	r0, #0
   10738:	bx	lr
   1073c:	mov	r0, #0
   10740:	bx	lr
   10744:	mov	r0, #1
   10748:	bx	lr

0001074c <main@@Base>:
   1074c:	strd	r4, [sp, #-16]!
   10750:	str	r6, [sp, #8]
   10754:	str	lr, [sp, #12]
   10758:	sub	sp, sp, #40	; 0x28
   1075c:	mov	r3, #131	; 0x83
   10760:	str	r3, [sp, #32]
   10764:	mov	r3, #163	; 0xa3
   10768:	str	r3, [sp, #36]	; 0x24
   1076c:	mov	r3, #149	; 0x95
   10770:	str	r3, [sp, #24]
   10774:	mov	r3, #181	; 0xb5
   10778:	str	r3, [sp, #28]
   1077c:	mov	r3, #135	; 0x87
   10780:	str	r3, [sp, #16]
   10784:	mov	r3, #167	; 0xa7
   10788:	str	r3, [sp, #20]
   1078c:	movw	r1, #2340	; 0x924
   10790:	movt	r1, #1
   10794:	movw	r0, #2344	; 0x928
   10798:	movt	r0, #1
   1079c:	bl	105c4 <fopen@plt>
   107a0:	mov	r4, r0
   107a4:	mov	r3, #0
   107a8:	str	r3, [sp, #4]
   107ac:	str	r3, [sp, #8]
   107b0:	str	r3, [sp, #12]
   107b4:	mov	r5, #2
   107b8:	mov	r0, r4
   107bc:	bl	10600 <getc@plt>
   107c0:	cmp	r0, #195	; 0xc3
   107c4:	beq	1082c <main@@Base+0xe0>
   107c8:	cmn	r0, #1
   107cc:	bne	107b8 <main@@Base+0x6c>
   107d0:	mov	r0, r4
   107d4:	bl	105e8 <fclose@plt>
   107d8:	movw	r4, #2372	; 0x944
   107dc:	movt	r4, #1
   107e0:	ldr	r2, [sp, #4]
   107e4:	mov	r1, #65	; 0x41
   107e8:	mov	r0, r4
   107ec:	bl	105b8 <printf@plt>
   107f0:	ldr	r2, [sp, #8]
   107f4:	mov	r1, #79	; 0x4f
   107f8:	mov	r0, r4
   107fc:	bl	105b8 <printf@plt>
   10800:	ldr	r2, [sp, #12]
   10804:	mov	r1, #67	; 0x43
   10808:	movw	r0, #2396	; 0x95c
   1080c:	movt	r0, #1
   10810:	bl	105b8 <printf@plt>
   10814:	mov	r0, #0
   10818:	add	sp, sp, #40	; 0x28
   1081c:	ldrd	r4, [sp]
   10820:	ldr	r6, [sp, #8]
   10824:	add	sp, sp, #12
   10828:	pop	{pc}		; (ldr pc, [sp], #4)
   1082c:	mov	r0, r4
   10830:	bl	10600 <getc@plt>
   10834:	mov	r6, r0
   10838:	mov	r2, r5
   1083c:	add	r1, sp, #32
   10840:	bl	106fc <in_array@@Base>
   10844:	cmp	r0, #0
   10848:	beq	10864 <main@@Base+0x118>
   1084c:	ldr	r3, [sp, #4]
   10850:	add	r3, r3, #1
   10854:	str	r3, [sp, #4]
   10858:	cmn	r6, #1
   1085c:	bne	107b8 <main@@Base+0x6c>
   10860:	b	107d0 <main@@Base+0x84>
   10864:	mov	r2, r5
   10868:	add	r1, sp, #24
   1086c:	mov	r0, r6
   10870:	bl	106fc <in_array@@Base>
   10874:	cmp	r0, #0
   10878:	beq	1088c <main@@Base+0x140>
   1087c:	ldr	r3, [sp, #8]
   10880:	add	r3, r3, #1
   10884:	str	r3, [sp, #8]
   10888:	b	10858 <main@@Base+0x10c>
   1088c:	mov	r2, r5
   10890:	add	r1, sp, #16
   10894:	mov	r0, r6
   10898:	bl	106fc <in_array@@Base>
   1089c:	cmp	r0, #0
   108a0:	beq	10858 <main@@Base+0x10c>
   108a4:	ldr	r3, [sp, #12]
   108a8:	add	r3, r3, #1
   108ac:	str	r3, [sp, #12]
   108b0:	b	10858 <main@@Base+0x10c>

000108b4 <__libc_csu_init@@Base>:
   108b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108b8:	mov	r7, r0
   108bc:	ldr	r6, [pc, #72]	; 1090c <__libc_csu_init@@Base+0x58>
   108c0:	ldr	r5, [pc, #72]	; 10910 <__libc_csu_init@@Base+0x5c>
   108c4:	add	r6, pc, r6
   108c8:	add	r5, pc, r5
   108cc:	sub	r6, r6, r5
   108d0:	mov	r8, r1
   108d4:	mov	r9, r2
   108d8:	bl	10598 <printf@plt-0x20>
   108dc:	asrs	r6, r6, #2
   108e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108e4:	mov	r4, #0
   108e8:	add	r4, r4, #1
   108ec:	ldr	r3, [r5], #4
   108f0:	mov	r2, r9
   108f4:	mov	r1, r8
   108f8:	mov	r0, r7
   108fc:	blx	r3
   10900:	cmp	r6, r4
   10904:	bne	108e8 <__libc_csu_init@@Base+0x34>
   10908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1090c:	andeq	r0, r1, r8, asr #12
   10910:	andeq	r0, r1, r0, asr #12

00010914 <__libc_csu_fini@@Base>:
   10914:	bx	lr

Disassembly of section .fini:

00010918 <.fini>:
   10918:	push	{r3, lr}
   1091c:	pop	{r3, pc}
