
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010c9c <.init>:
   10c9c:	push	{r3, lr}
   10ca0:	bl	10f74 <__assert_fail@plt+0x48>
   10ca4:	pop	{r3, pc}

Disassembly of section .plt:

00010ca8 <calloc@plt-0x14>:
   10ca8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cac:	ldr	lr, [pc, #4]	; 10cb8 <calloc@plt-0x4>
   10cb0:	add	lr, pc, lr
   10cb4:	ldr	pc, [lr, #8]!
   10cb8:	andeq	r8, r1, r8, asr #6

00010cbc <calloc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #24, 20	; 0x18000
   10cc4:	ldr	pc, [ip, #840]!	; 0x348

00010cc8 <fputs_unlocked@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #832]!	; 0x340

00010cd4 <strcmp@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #824]!	; 0x338

00010ce0 <posix_fadvise64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #816]!	; 0x330

00010cec <printf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #808]!	; 0x328

00010cf8 <fflush@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #800]!	; 0x320

00010d04 <memmove@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #792]!	; 0x318

00010d10 <free@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #784]!	; 0x310

00010d1c <_exit@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #776]!	; 0x308

00010d28 <memcpy@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #768]!	; 0x300

00010d34 <mbsinit@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d40 <fwrite_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #752]!	; 0x2f0

00010d4c <memcmp@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #744]!	; 0x2e8

00010d58 <fputc_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #736]!	; 0x2e0

00010d64 <getc_unlocked@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d70 <realloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #720]!	; 0x2d0

00010d7c <textdomain@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #712]!	; 0x2c8

00010d88 <iswprint@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #704]!	; 0x2c0

00010d94 <fwrite@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #696]!	; 0x2b8

00010da0 <lseek64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dac <__ctype_get_mb_cur_max@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #680]!	; 0x2a8

00010db8 <__fpending@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc4 <ferror_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #664]!	; 0x298

00010dd0 <mbrtowc@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #656]!	; 0x290

00010ddc <error@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #648]!	; 0x288

00010de8 <malloc@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #640]!	; 0x280

00010df4 <__libc_start_main@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #632]!	; 0x278

00010e00 <__freading@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #624]!	; 0x270

00010e0c <__gmon_start__@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #616]!	; 0x268

00010e18 <getopt_long@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #608]!	; 0x260

00010e24 <__ctype_b_loc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #600]!	; 0x258

00010e30 <exit@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #592]!	; 0x250

00010e3c <gettext@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #584]!	; 0x248

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #576]!	; 0x240

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #568]!	; 0x238

00010e60 <fprintf@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #560]!	; 0x230

00010e6c <__errno_location@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #552]!	; 0x228

00010e78 <__cxa_atexit@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #544]!	; 0x220

00010e84 <memset@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #536]!	; 0x218

00010e90 <fileno@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #528]!	; 0x210

00010e9c <strtoumax@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #520]!	; 0x208

00010ea8 <fclose@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #512]!	; 0x200

00010eb4 <fseeko64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ec0 <setlocale@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #496]!	; 0x1f0

00010ecc <strrchr@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ed8 <nl_langinfo@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ee4 <clearerr_unlocked@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #472]!	; 0x1d8

00010ef0 <fopen64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #464]!	; 0x1d0

00010efc <bindtextdomain@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #456]!	; 0x1c8

00010f08 <strncmp@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #448]!	; 0x1c0

00010f14 <abort@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #440]!	; 0x1b8

00010f20 <putchar_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #432]!	; 0x1b0

00010f2c <__assert_fail@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #424]!	; 0x1a8

Disassembly of section .text:

00010f38 <.text>:
   10f38:	mov	fp, #0
   10f3c:	mov	lr, #0
   10f40:	pop	{r1}		; (ldr r1, [sp], #4)
   10f44:	mov	r2, sp
   10f48:	push	{r2}		; (str r2, [sp, #-4]!)
   10f4c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f50:	ldr	ip, [pc, #16]	; 10f68 <__assert_fail@plt+0x3c>
   10f54:	push	{ip}		; (str ip, [sp, #-4]!)
   10f58:	ldr	r0, [pc, #12]	; 10f6c <__assert_fail@plt+0x40>
   10f5c:	ldr	r3, [pc, #12]	; 10f70 <__assert_fail@plt+0x44>
   10f60:	bl	10df4 <__libc_start_main@plt>
   10f64:	bl	10f14 <abort@plt>
   10f68:	andeq	r7, r1, r0, lsl #14
   10f6c:			; <UNDEFINED> instruction: 0x000119b8
   10f70:	andeq	r7, r1, r0, lsr #13
   10f74:	ldr	r3, [pc, #20]	; 10f90 <__assert_fail@plt+0x64>
   10f78:	ldr	r2, [pc, #20]	; 10f94 <__assert_fail@plt+0x68>
   10f7c:	add	r3, pc, r3
   10f80:	ldr	r2, [r3, r2]
   10f84:	cmp	r2, #0
   10f88:	bxeq	lr
   10f8c:	b	10e0c <__gmon_start__@plt>
   10f90:	andeq	r8, r1, ip, ror r0
   10f94:	andeq	r0, r0, r0, ror #1
   10f98:	ldr	r0, [pc, #24]	; 10fb8 <__assert_fail@plt+0x8c>
   10f9c:	ldr	r3, [pc, #24]	; 10fbc <__assert_fail@plt+0x90>
   10fa0:	cmp	r3, r0
   10fa4:	bxeq	lr
   10fa8:	ldr	r3, [pc, #16]	; 10fc0 <__assert_fail@plt+0x94>
   10fac:	cmp	r3, #0
   10fb0:	bxeq	lr
   10fb4:	bx	r3
   10fb8:	andeq	r9, r2, r4, lsr r1
   10fbc:	andeq	r9, r2, r4, lsr r1
   10fc0:	andeq	r0, r0, r0
   10fc4:	ldr	r0, [pc, #36]	; 10ff0 <__assert_fail@plt+0xc4>
   10fc8:	ldr	r1, [pc, #36]	; 10ff4 <__assert_fail@plt+0xc8>
   10fcc:	sub	r1, r1, r0
   10fd0:	asr	r1, r1, #2
   10fd4:	add	r1, r1, r1, lsr #31
   10fd8:	asrs	r1, r1, #1
   10fdc:	bxeq	lr
   10fe0:	ldr	r3, [pc, #16]	; 10ff8 <__assert_fail@plt+0xcc>
   10fe4:	cmp	r3, #0
   10fe8:	bxeq	lr
   10fec:	bx	r3
   10ff0:	andeq	r9, r2, r4, lsr r1
   10ff4:	andeq	r9, r2, r4, lsr r1
   10ff8:	andeq	r0, r0, r0
   10ffc:	push	{r4, lr}
   11000:	ldr	r4, [pc, #24]	; 11020 <__assert_fail@plt+0xf4>
   11004:	ldrb	r3, [r4]
   11008:	cmp	r3, #0
   1100c:	popne	{r4, pc}
   11010:	bl	10f98 <__assert_fail@plt+0x6c>
   11014:	mov	r3, #1
   11018:	strb	r3, [r4]
   1101c:	pop	{r4, pc}
   11020:	andeq	r9, r2, ip, asr r1
   11024:	b	10fc4 <__assert_fail@plt+0x98>
   11028:	push	{fp}		; (str fp, [sp, #-4]!)
   1102c:	add	fp, sp, #0
   11030:	sub	sp, sp, #12
   11034:	mov	r3, r0
   11038:	strb	r3, [fp, #-5]
   1103c:	ldrb	r3, [fp, #-5]
   11040:	mov	r0, r3
   11044:	add	sp, fp, #0
   11048:	pop	{fp}		; (ldr fp, [sp], #4)
   1104c:	bx	lr
   11050:	str	fp, [sp, #-8]!
   11054:	str	lr, [sp, #4]
   11058:	add	fp, sp, #4
   1105c:	movw	r0, #30504	; 0x7728
   11060:	movt	r0, #1
   11064:	bl	10e3c <gettext@plt>
   11068:	mov	r2, r0
   1106c:	movw	r3, #37204	; 0x9154
   11070:	movt	r3, #2
   11074:	ldr	r3, [r3]
   11078:	mov	r1, r3
   1107c:	mov	r0, r2
   11080:	bl	10cc8 <fputs_unlocked@plt>
   11084:	nop	{0}
   11088:	sub	sp, fp, #4
   1108c:	ldr	fp, [sp]
   11090:	add	sp, sp, #4
   11094:	pop	{pc}		; (ldr pc, [sp], #4)
   11098:	str	fp, [sp, #-8]!
   1109c:	str	lr, [sp, #4]
   110a0:	add	fp, sp, #4
   110a4:	movw	r0, #30560	; 0x7760
   110a8:	movt	r0, #1
   110ac:	bl	10e3c <gettext@plt>
   110b0:	mov	r2, r0
   110b4:	movw	r3, #37204	; 0x9154
   110b8:	movt	r3, #2
   110bc:	ldr	r3, [r3]
   110c0:	mov	r1, r3
   110c4:	mov	r0, r2
   110c8:	bl	10cc8 <fputs_unlocked@plt>
   110cc:	nop	{0}
   110d0:	sub	sp, fp, #4
   110d4:	ldr	fp, [sp]
   110d8:	add	sp, sp, #4
   110dc:	pop	{pc}		; (ldr pc, [sp], #4)
   110e0:	str	fp, [sp, #-8]!
   110e4:	str	lr, [sp, #4]
   110e8:	add	fp, sp, #4
   110ec:	sub	sp, sp, #80	; 0x50
   110f0:	str	r0, [fp, #-80]	; 0xffffffb0
   110f4:	movw	r2, #31008	; 0x7920
   110f8:	movt	r2, #1
   110fc:	sub	r3, fp, #72	; 0x48
   11100:	ldrd	r0, [r2]
   11104:	strd	r0, [r3]
   11108:	ldrd	r0, [r2, #8]
   1110c:	strd	r0, [r3, #8]
   11110:	ldrd	r0, [r2, #16]
   11114:	strd	r0, [r3, #16]
   11118:	ldrd	r0, [r2, #24]
   1111c:	strd	r0, [r3, #24]
   11120:	ldrd	r0, [r2, #32]
   11124:	strd	r0, [r3, #32]
   11128:	ldrd	r0, [r2, #40]	; 0x28
   1112c:	strd	r0, [r3, #40]	; 0x28
   11130:	ldrd	r0, [r2, #48]	; 0x30
   11134:	strd	r0, [r3, #48]	; 0x30
   11138:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1113c:	str	r3, [fp, #-8]
   11140:	sub	r3, fp, #72	; 0x48
   11144:	str	r3, [fp, #-12]
   11148:	b	11158 <__assert_fail@plt+0x22c>
   1114c:	ldr	r3, [fp, #-12]
   11150:	add	r3, r3, #8
   11154:	str	r3, [fp, #-12]
   11158:	ldr	r3, [fp, #-12]
   1115c:	ldr	r3, [r3]
   11160:	cmp	r3, #0
   11164:	beq	11188 <__assert_fail@plt+0x25c>
   11168:	ldr	r3, [fp, #-12]
   1116c:	ldr	r3, [r3]
   11170:	mov	r1, r3
   11174:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11178:	bl	10cd4 <strcmp@plt>
   1117c:	mov	r3, r0
   11180:	cmp	r3, #0
   11184:	bne	1114c <__assert_fail@plt+0x220>
   11188:	ldr	r3, [fp, #-12]
   1118c:	ldr	r3, [r3, #4]
   11190:	cmp	r3, #0
   11194:	beq	111a4 <__assert_fail@plt+0x278>
   11198:	ldr	r3, [fp, #-12]
   1119c:	ldr	r3, [r3, #4]
   111a0:	str	r3, [fp, #-8]
   111a4:	movw	r0, #30636	; 0x77ac
   111a8:	movt	r0, #1
   111ac:	bl	10e3c <gettext@plt>
   111b0:	mov	r3, r0
   111b4:	movw	r2, #30660	; 0x77c4
   111b8:	movt	r2, #1
   111bc:	movw	r1, #30700	; 0x77ec
   111c0:	movt	r1, #1
   111c4:	mov	r0, r3
   111c8:	bl	10cec <printf@plt>
   111cc:	mov	r1, #0
   111d0:	mov	r0, #5
   111d4:	bl	10ec0 <setlocale@plt>
   111d8:	str	r0, [fp, #-16]
   111dc:	ldr	r3, [fp, #-16]
   111e0:	cmp	r3, #0
   111e4:	beq	11230 <__assert_fail@plt+0x304>
   111e8:	mov	r2, #3
   111ec:	movw	r1, #30716	; 0x77fc
   111f0:	movt	r1, #1
   111f4:	ldr	r0, [fp, #-16]
   111f8:	bl	10f08 <strncmp@plt>
   111fc:	mov	r3, r0
   11200:	cmp	r3, #0
   11204:	beq	11230 <__assert_fail@plt+0x304>
   11208:	movw	r0, #30720	; 0x7800
   1120c:	movt	r0, #1
   11210:	bl	10e3c <gettext@plt>
   11214:	mov	r2, r0
   11218:	movw	r3, #37204	; 0x9154
   1121c:	movt	r3, #2
   11220:	ldr	r3, [r3]
   11224:	mov	r1, r3
   11228:	mov	r0, r2
   1122c:	bl	10cc8 <fputs_unlocked@plt>
   11230:	movw	r0, #30792	; 0x7848
   11234:	movt	r0, #1
   11238:	bl	10e3c <gettext@plt>
   1123c:	mov	r3, r0
   11240:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11244:	movw	r1, #30660	; 0x77c4
   11248:	movt	r1, #1
   1124c:	mov	r0, r3
   11250:	bl	10cec <printf@plt>
   11254:	movw	r0, #30820	; 0x7864
   11258:	movt	r0, #1
   1125c:	bl	10e3c <gettext@plt>
   11260:	ldr	r2, [fp, #-8]
   11264:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11268:	cmp	r2, r3
   1126c:	bne	1127c <__assert_fail@plt+0x350>
   11270:	movw	r3, #30872	; 0x7898
   11274:	movt	r3, #1
   11278:	b	11284 <__assert_fail@plt+0x358>
   1127c:	movw	r3, #30884	; 0x78a4
   11280:	movt	r3, #1
   11284:	mov	r2, r3
   11288:	ldr	r1, [fp, #-8]
   1128c:	bl	10cec <printf@plt>
   11290:	nop	{0}
   11294:	sub	sp, fp, #4
   11298:	ldr	fp, [sp]
   1129c:	add	sp, sp, #4
   112a0:	pop	{pc}		; (ldr pc, [sp], #4)
   112a4:	str	r4, [sp, #-12]!
   112a8:	str	fp, [sp, #4]
   112ac:	str	lr, [sp, #8]
   112b0:	add	fp, sp, #8
   112b4:	sub	sp, sp, #12
   112b8:	str	r0, [fp, #-16]
   112bc:	ldr	r3, [fp, #-16]
   112c0:	cmp	r3, #0
   112c4:	beq	11300 <__assert_fail@plt+0x3d4>
   112c8:	movw	r3, #37192	; 0x9148
   112cc:	movt	r3, #2
   112d0:	ldr	r4, [r3]
   112d4:	movw	r0, #31236	; 0x7a04
   112d8:	movt	r0, #1
   112dc:	bl	10e3c <gettext@plt>
   112e0:	mov	r1, r0
   112e4:	movw	r3, #37236	; 0x9174
   112e8:	movt	r3, #2
   112ec:	ldr	r3, [r3]
   112f0:	mov	r2, r3
   112f4:	mov	r0, r4
   112f8:	bl	10e60 <fprintf@plt>
   112fc:	b	113dc <__assert_fail@plt+0x4b0>
   11300:	movw	r0, #31276	; 0x7a2c
   11304:	movt	r0, #1
   11308:	bl	10e3c <gettext@plt>
   1130c:	mov	r2, r0
   11310:	movw	r3, #37236	; 0x9174
   11314:	movt	r3, #2
   11318:	ldr	r3, [r3]
   1131c:	mov	r1, r3
   11320:	mov	r0, r2
   11324:	bl	10cec <printf@plt>
   11328:	movw	r0, #31312	; 0x7a50
   1132c:	movt	r0, #1
   11330:	bl	10e3c <gettext@plt>
   11334:	mov	r2, r0
   11338:	movw	r3, #37204	; 0x9154
   1133c:	movt	r3, #2
   11340:	ldr	r3, [r3]
   11344:	mov	r1, r3
   11348:	mov	r0, r2
   1134c:	bl	10cc8 <fputs_unlocked@plt>
   11350:	bl	11050 <__assert_fail@plt+0x124>
   11354:	bl	11098 <__assert_fail@plt+0x16c>
   11358:	movw	r0, #31372	; 0x7a8c
   1135c:	movt	r0, #1
   11360:	bl	10e3c <gettext@plt>
   11364:	mov	r2, r0
   11368:	movw	r3, #37204	; 0x9154
   1136c:	movt	r3, #2
   11370:	ldr	r3, [r3]
   11374:	mov	r1, r3
   11378:	mov	r0, r2
   1137c:	bl	10cc8 <fputs_unlocked@plt>
   11380:	movw	r0, #31520	; 0x7b20
   11384:	movt	r0, #1
   11388:	bl	10e3c <gettext@plt>
   1138c:	mov	r2, r0
   11390:	movw	r3, #37204	; 0x9154
   11394:	movt	r3, #2
   11398:	ldr	r3, [r3]
   1139c:	mov	r1, r3
   113a0:	mov	r0, r2
   113a4:	bl	10cc8 <fputs_unlocked@plt>
   113a8:	movw	r0, #31568	; 0x7b50
   113ac:	movt	r0, #1
   113b0:	bl	10e3c <gettext@plt>
   113b4:	mov	r2, r0
   113b8:	movw	r3, #37204	; 0x9154
   113bc:	movt	r3, #2
   113c0:	ldr	r3, [r3]
   113c4:	mov	r1, r3
   113c8:	mov	r0, r2
   113cc:	bl	10cc8 <fputs_unlocked@plt>
   113d0:	movw	r0, #31624	; 0x7b88
   113d4:	movt	r0, #1
   113d8:	bl	110e0 <__assert_fail@plt+0x1b4>
   113dc:	ldr	r0, [fp, #-16]
   113e0:	bl	10e30 <exit@plt>
   113e4:	push	{fp}		; (str fp, [sp, #-4]!)
   113e8:	add	fp, sp, #0
   113ec:	sub	sp, sp, #12
   113f0:	str	r0, [fp, #-8]
   113f4:	mov	r3, r1
   113f8:	strb	r3, [fp, #-9]
   113fc:	movw	r3, #37217	; 0x9161
   11400:	movt	r3, #2
   11404:	ldrb	r3, [r3]
   11408:	eor	r3, r3, #1
   1140c:	uxtb	r3, r3
   11410:	cmp	r3, #0
   11414:	beq	11488 <__assert_fail@plt+0x55c>
   11418:	ldrb	r3, [fp, #-9]
   1141c:	cmp	r3, #8
   11420:	bne	11440 <__assert_fail@plt+0x514>
   11424:	ldr	r3, [fp, #-8]
   11428:	cmp	r3, #0
   1142c:	beq	11494 <__assert_fail@plt+0x568>
   11430:	ldr	r3, [fp, #-8]
   11434:	sub	r3, r3, #1
   11438:	str	r3, [fp, #-8]
   1143c:	b	11494 <__assert_fail@plt+0x568>
   11440:	ldrb	r3, [fp, #-9]
   11444:	cmp	r3, #13
   11448:	bne	11458 <__assert_fail@plt+0x52c>
   1144c:	mov	r3, #0
   11450:	str	r3, [fp, #-8]
   11454:	b	11494 <__assert_fail@plt+0x568>
   11458:	ldrb	r3, [fp, #-9]
   1145c:	cmp	r3, #9
   11460:	bne	11478 <__assert_fail@plt+0x54c>
   11464:	ldr	r3, [fp, #-8]
   11468:	bic	r3, r3, #7
   1146c:	add	r3, r3, #8
   11470:	str	r3, [fp, #-8]
   11474:	b	11494 <__assert_fail@plt+0x568>
   11478:	ldr	r3, [fp, #-8]
   1147c:	add	r3, r3, #1
   11480:	str	r3, [fp, #-8]
   11484:	b	11494 <__assert_fail@plt+0x568>
   11488:	ldr	r3, [fp, #-8]
   1148c:	add	r3, r3, #1
   11490:	str	r3, [fp, #-8]
   11494:	ldr	r3, [fp, #-8]
   11498:	mov	r0, r3
   1149c:	add	sp, fp, #0
   114a0:	pop	{fp}		; (ldr fp, [sp], #4)
   114a4:	bx	lr
   114a8:	str	r4, [sp, #-12]!
   114ac:	str	fp, [sp, #4]
   114b0:	str	lr, [sp, #8]
   114b4:	add	fp, sp, #8
   114b8:	sub	sp, sp, #44	; 0x2c
   114bc:	str	r0, [fp, #-48]	; 0xffffffd0
   114c0:	str	r1, [fp, #-52]	; 0xffffffcc
   114c4:	mov	r3, #0
   114c8:	str	r3, [fp, #-20]	; 0xffffffec
   114cc:	mov	r3, #0
   114d0:	str	r3, [fp, #-24]	; 0xffffffe8
   114d4:	movw	r1, #31632	; 0x7b90
   114d8:	movt	r1, #1
   114dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   114e0:	bl	10cd4 <strcmp@plt>
   114e4:	mov	r3, r0
   114e8:	cmp	r3, #0
   114ec:	bne	11514 <__assert_fail@plt+0x5e8>
   114f0:	movw	r3, #37200	; 0x9150
   114f4:	movt	r3, #2
   114f8:	ldr	r3, [r3]
   114fc:	str	r3, [fp, #-16]
   11500:	movw	r3, #37218	; 0x9162
   11504:	movt	r3, #2
   11508:	mov	r2, #1
   1150c:	strb	r2, [r3]
   11510:	b	11528 <__assert_fail@plt+0x5fc>
   11514:	movw	r1, #31636	; 0x7b94
   11518:	movt	r1, #1
   1151c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11520:	bl	10ef0 <fopen64@plt>
   11524:	str	r0, [fp, #-16]
   11528:	ldr	r3, [fp, #-16]
   1152c:	cmp	r3, #0
   11530:	bne	11570 <__assert_fail@plt+0x644>
   11534:	bl	10e6c <__errno_location@plt>
   11538:	mov	r3, r0
   1153c:	ldr	r4, [r3]
   11540:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11544:	mov	r1, #3
   11548:	mov	r0, #0
   1154c:	bl	148dc <__assert_fail@plt+0x39b0>
   11550:	mov	r3, r0
   11554:	movw	r2, #31640	; 0x7b98
   11558:	movt	r2, #1
   1155c:	mov	r1, r4
   11560:	mov	r0, #0
   11564:	bl	10ddc <error@plt>
   11568:	mov	r3, #0
   1156c:	b	119a0 <__assert_fail@plt+0xa74>
   11570:	mov	r1, #2
   11574:	ldr	r0, [fp, #-16]
   11578:	bl	11f5c <__assert_fail@plt+0x1030>
   1157c:	b	11894 <__assert_fail@plt+0x968>
   11580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11584:	add	r2, r3, #1
   11588:	movw	r3, #37220	; 0x9164
   1158c:	movt	r3, #2
   11590:	ldr	r3, [r3]
   11594:	cmp	r2, r3
   11598:	bcc	115c8 <__assert_fail@plt+0x69c>
   1159c:	movw	r3, #37224	; 0x9168
   115a0:	movt	r3, #2
   115a4:	ldr	r3, [r3]
   115a8:	movw	r1, #37220	; 0x9164
   115ac:	movt	r1, #2
   115b0:	mov	r0, r3
   115b4:	bl	15710 <__assert_fail@plt+0x47e4>
   115b8:	mov	r2, r0
   115bc:	movw	r3, #37224	; 0x9168
   115c0:	movt	r3, #2
   115c4:	str	r2, [r3]
   115c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   115cc:	cmp	r3, #10
   115d0:	bne	11634 <__assert_fail@plt+0x708>
   115d4:	movw	r3, #37224	; 0x9168
   115d8:	movt	r3, #2
   115dc:	ldr	r2, [r3]
   115e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115e4:	add	r1, r3, #1
   115e8:	str	r1, [fp, #-24]	; 0xffffffe8
   115ec:	add	r3, r2, r3
   115f0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   115f4:	uxtb	r2, r2
   115f8:	strb	r2, [r3]
   115fc:	movw	r3, #37224	; 0x9168
   11600:	movt	r3, #2
   11604:	ldr	r0, [r3]
   11608:	movw	r3, #37204	; 0x9154
   1160c:	movt	r3, #2
   11610:	ldr	r3, [r3]
   11614:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11618:	mov	r1, #1
   1161c:	bl	10d40 <fwrite_unlocked@plt>
   11620:	mov	r3, #0
   11624:	str	r3, [fp, #-24]	; 0xffffffe8
   11628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1162c:	str	r3, [fp, #-20]	; 0xffffffec
   11630:	b	11894 <__assert_fail@plt+0x968>
   11634:	nop	{0}
   11638:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1163c:	uxtb	r3, r3
   11640:	mov	r1, r3
   11644:	ldr	r0, [fp, #-20]	; 0xffffffec
   11648:	bl	113e4 <__assert_fail@plt+0x4b8>
   1164c:	str	r0, [fp, #-20]	; 0xffffffec
   11650:	ldr	r2, [fp, #-20]	; 0xffffffec
   11654:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11658:	cmp	r2, r3
   1165c:	bls	1186c <__assert_fail@plt+0x940>
   11660:	movw	r3, #37216	; 0x9160
   11664:	movt	r3, #2
   11668:	ldrb	r3, [r3]
   1166c:	cmp	r3, #0
   11670:	beq	117d8 <__assert_fail@plt+0x8ac>
   11674:	mov	r3, #0
   11678:	strb	r3, [fp, #-29]	; 0xffffffe3
   1167c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11680:	str	r3, [fp, #-36]	; 0xffffffdc
   11684:	b	116e8 <__assert_fail@plt+0x7bc>
   11688:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1168c:	sub	r3, r3, #1
   11690:	str	r3, [fp, #-36]	; 0xffffffdc
   11694:	bl	10e24 <__ctype_b_loc@plt>
   11698:	mov	r3, r0
   1169c:	ldr	r4, [r3]
   116a0:	movw	r3, #37224	; 0x9168
   116a4:	movt	r3, #2
   116a8:	ldr	r2, [r3]
   116ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   116b0:	add	r3, r2, r3
   116b4:	ldrb	r3, [r3]
   116b8:	mov	r0, r3
   116bc:	bl	11028 <__assert_fail@plt+0xfc>
   116c0:	mov	r3, r0
   116c4:	lsl	r3, r3, #1
   116c8:	add	r3, r4, r3
   116cc:	ldrh	r3, [r3]
   116d0:	and	r3, r3, #1
   116d4:	cmp	r3, #0
   116d8:	beq	116e8 <__assert_fail@plt+0x7bc>
   116dc:	mov	r3, #1
   116e0:	strb	r3, [fp, #-29]	; 0xffffffe3
   116e4:	b	116f4 <__assert_fail@plt+0x7c8>
   116e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   116ec:	cmp	r3, #0
   116f0:	bne	11688 <__assert_fail@plt+0x75c>
   116f4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   116f8:	cmp	r3, #0
   116fc:	beq	117d8 <__assert_fail@plt+0x8ac>
   11700:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11704:	add	r3, r3, #1
   11708:	str	r3, [fp, #-36]	; 0xffffffdc
   1170c:	movw	r3, #37224	; 0x9168
   11710:	movt	r3, #2
   11714:	ldr	r0, [r3]
   11718:	movw	r3, #37204	; 0x9154
   1171c:	movt	r3, #2
   11720:	ldr	r3, [r3]
   11724:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11728:	mov	r1, #1
   1172c:	bl	10d40 <fwrite_unlocked@plt>
   11730:	mov	r0, #10
   11734:	bl	10f20 <putchar_unlocked@plt>
   11738:	movw	r3, #37224	; 0x9168
   1173c:	movt	r3, #2
   11740:	ldr	r0, [r3]
   11744:	movw	r3, #37224	; 0x9168
   11748:	movt	r3, #2
   1174c:	ldr	r2, [r3]
   11750:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11754:	add	r1, r2, r3
   11758:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1175c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11760:	sub	r3, r2, r3
   11764:	mov	r2, r3
   11768:	bl	10d04 <memmove@plt>
   1176c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11770:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11774:	sub	r3, r2, r3
   11778:	str	r3, [fp, #-24]	; 0xffffffe8
   1177c:	mov	r3, #0
   11780:	str	r3, [fp, #-40]	; 0xffffffd8
   11784:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11788:	str	r3, [fp, #-20]	; 0xffffffec
   1178c:	b	117c4 <__assert_fail@plt+0x898>
   11790:	movw	r3, #37224	; 0x9168
   11794:	movt	r3, #2
   11798:	ldr	r2, [r3]
   1179c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   117a0:	add	r3, r2, r3
   117a4:	ldrb	r3, [r3]
   117a8:	mov	r1, r3
   117ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   117b0:	bl	113e4 <__assert_fail@plt+0x4b8>
   117b4:	str	r0, [fp, #-20]	; 0xffffffec
   117b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   117bc:	add	r3, r3, #1
   117c0:	str	r3, [fp, #-40]	; 0xffffffd8
   117c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   117c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117cc:	cmp	r2, r3
   117d0:	bcc	11790 <__assert_fail@plt+0x864>
   117d4:	b	11638 <__assert_fail@plt+0x70c>
   117d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117dc:	cmp	r3, #0
   117e0:	bne	11810 <__assert_fail@plt+0x8e4>
   117e4:	movw	r3, #37224	; 0x9168
   117e8:	movt	r3, #2
   117ec:	ldr	r2, [r3]
   117f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117f4:	add	r1, r3, #1
   117f8:	str	r1, [fp, #-24]	; 0xffffffe8
   117fc:	add	r3, r2, r3
   11800:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11804:	uxtb	r2, r2
   11808:	strb	r2, [r3]
   1180c:	b	11894 <__assert_fail@plt+0x968>
   11810:	movw	r3, #37224	; 0x9168
   11814:	movt	r3, #2
   11818:	ldr	r2, [r3]
   1181c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11820:	add	r1, r3, #1
   11824:	str	r1, [fp, #-24]	; 0xffffffe8
   11828:	add	r3, r2, r3
   1182c:	mov	r2, #10
   11830:	strb	r2, [r3]
   11834:	movw	r3, #37224	; 0x9168
   11838:	movt	r3, #2
   1183c:	ldr	r0, [r3]
   11840:	movw	r3, #37204	; 0x9154
   11844:	movt	r3, #2
   11848:	ldr	r3, [r3]
   1184c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11850:	mov	r1, #1
   11854:	bl	10d40 <fwrite_unlocked@plt>
   11858:	mov	r3, #0
   1185c:	str	r3, [fp, #-24]	; 0xffffffe8
   11860:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11864:	str	r3, [fp, #-20]	; 0xffffffec
   11868:	b	11638 <__assert_fail@plt+0x70c>
   1186c:	movw	r3, #37224	; 0x9168
   11870:	movt	r3, #2
   11874:	ldr	r2, [r3]
   11878:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1187c:	add	r1, r3, #1
   11880:	str	r1, [fp, #-24]	; 0xffffffe8
   11884:	add	r3, r2, r3
   11888:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1188c:	uxtb	r2, r2
   11890:	strb	r2, [r3]
   11894:	ldr	r0, [fp, #-16]
   11898:	bl	10d64 <getc_unlocked@plt>
   1189c:	str	r0, [fp, #-44]	; 0xffffffd4
   118a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   118a4:	cmn	r3, #1
   118a8:	bne	11580 <__assert_fail@plt+0x654>
   118ac:	bl	10e6c <__errno_location@plt>
   118b0:	mov	r3, r0
   118b4:	ldr	r3, [r3]
   118b8:	str	r3, [fp, #-28]	; 0xffffffe4
   118bc:	ldr	r0, [fp, #-16]
   118c0:	bl	10dc4 <ferror_unlocked@plt>
   118c4:	mov	r3, r0
   118c8:	cmp	r3, #0
   118cc:	bne	118d8 <__assert_fail@plt+0x9ac>
   118d0:	mov	r3, #0
   118d4:	str	r3, [fp, #-28]	; 0xffffffe4
   118d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118dc:	cmp	r3, #0
   118e0:	beq	11908 <__assert_fail@plt+0x9dc>
   118e4:	movw	r3, #37224	; 0x9168
   118e8:	movt	r3, #2
   118ec:	ldr	r0, [r3]
   118f0:	movw	r3, #37204	; 0x9154
   118f4:	movt	r3, #2
   118f8:	ldr	r3, [r3]
   118fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11900:	mov	r1, #1
   11904:	bl	10d40 <fwrite_unlocked@plt>
   11908:	movw	r1, #31632	; 0x7b90
   1190c:	movt	r1, #1
   11910:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11914:	bl	10cd4 <strcmp@plt>
   11918:	mov	r3, r0
   1191c:	cmp	r3, #0
   11920:	bne	11930 <__assert_fail@plt+0xa04>
   11924:	ldr	r0, [fp, #-16]
   11928:	bl	10ee4 <clearerr_unlocked@plt>
   1192c:	b	11960 <__assert_fail@plt+0xa34>
   11930:	ldr	r0, [fp, #-16]
   11934:	bl	11fc4 <__assert_fail@plt+0x1098>
   11938:	mov	r3, r0
   1193c:	cmp	r3, #0
   11940:	beq	11960 <__assert_fail@plt+0xa34>
   11944:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11948:	cmp	r3, #0
   1194c:	bne	11960 <__assert_fail@plt+0xa34>
   11950:	bl	10e6c <__errno_location@plt>
   11954:	mov	r3, r0
   11958:	ldr	r3, [r3]
   1195c:	str	r3, [fp, #-28]	; 0xffffffe4
   11960:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11964:	cmp	r3, #0
   11968:	beq	1199c <__assert_fail@plt+0xa70>
   1196c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11970:	mov	r1, #3
   11974:	mov	r0, #0
   11978:	bl	148dc <__assert_fail@plt+0x39b0>
   1197c:	mov	r3, r0
   11980:	movw	r2, #31640	; 0x7b98
   11984:	movt	r2, #1
   11988:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1198c:	mov	r0, #0
   11990:	bl	10ddc <error@plt>
   11994:	mov	r3, #0
   11998:	b	119a0 <__assert_fail@plt+0xa74>
   1199c:	mov	r3, #1
   119a0:	mov	r0, r3
   119a4:	sub	sp, fp, #8
   119a8:	ldr	r4, [sp]
   119ac:	ldr	fp, [sp, #4]
   119b0:	add	sp, sp, #8
   119b4:	pop	{pc}		; (ldr pc, [sp], #4)
   119b8:	str	r4, [sp, #-12]!
   119bc:	str	fp, [sp, #4]
   119c0:	str	lr, [sp, #8]
   119c4:	add	fp, sp, #8
   119c8:	sub	sp, sp, #60	; 0x3c
   119cc:	str	r0, [fp, #-40]	; 0xffffffd8
   119d0:	str	r1, [fp, #-44]	; 0xffffffd4
   119d4:	mov	r3, #80	; 0x50
   119d8:	str	r3, [fp, #-16]
   119dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   119e0:	ldr	r3, [r3]
   119e4:	mov	r0, r3
   119e8:	bl	12278 <__assert_fail@plt+0x134c>
   119ec:	movw	r1, #30884	; 0x78a4
   119f0:	movt	r1, #1
   119f4:	mov	r0, #6
   119f8:	bl	10ec0 <setlocale@plt>
   119fc:	movw	r1, #31644	; 0x7b9c
   11a00:	movt	r1, #1
   11a04:	movw	r0, #30908	; 0x78bc
   11a08:	movt	r0, #1
   11a0c:	bl	10efc <bindtextdomain@plt>
   11a10:	movw	r0, #30908	; 0x78bc
   11a14:	movt	r0, #1
   11a18:	bl	10d7c <textdomain@plt>
   11a1c:	movw	r0, #7616	; 0x1dc0
   11a20:	movt	r0, #1
   11a24:	bl	17704 <__assert_fail@plt+0x67d8>
   11a28:	movw	r3, #37218	; 0x9162
   11a2c:	movt	r3, #2
   11a30:	mov	r2, #0
   11a34:	strb	r2, [r3]
   11a38:	movw	r3, #37218	; 0x9162
   11a3c:	movt	r3, #2
   11a40:	ldrb	r2, [r3]
   11a44:	movw	r3, #37217	; 0x9161
   11a48:	movt	r3, #2
   11a4c:	strb	r2, [r3]
   11a50:	movw	r3, #37217	; 0x9161
   11a54:	movt	r3, #2
   11a58:	ldrb	r2, [r3]
   11a5c:	movw	r3, #37216	; 0x9160
   11a60:	movt	r3, #2
   11a64:	strb	r2, [r3]
   11a68:	b	11c04 <__assert_fail@plt+0xcd8>
   11a6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a70:	cmp	r3, #57	; 0x39
   11a74:	bgt	11aa0 <__assert_fail@plt+0xb74>
   11a78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a7c:	cmp	r3, #48	; 0x30
   11a80:	bge	11aec <__assert_fail@plt+0xbc0>
   11a84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a88:	cmn	r3, #3
   11a8c:	beq	11bb0 <__assert_fail@plt+0xc84>
   11a90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a94:	cmn	r3, #2
   11a98:	beq	11ba8 <__assert_fail@plt+0xc7c>
   11a9c:	b	11bfc <__assert_fail@plt+0xcd0>
   11aa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11aa4:	cmp	r3, #115	; 0x73
   11aa8:	beq	11ad8 <__assert_fail@plt+0xbac>
   11aac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ab0:	cmp	r3, #119	; 0x77
   11ab4:	beq	11b44 <__assert_fail@plt+0xc18>
   11ab8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11abc:	cmp	r3, #98	; 0x62
   11ac0:	bne	11bfc <__assert_fail@plt+0xcd0>
   11ac4:	movw	r3, #37217	; 0x9161
   11ac8:	movt	r3, #2
   11acc:	mov	r2, #1
   11ad0:	strb	r2, [r3]
   11ad4:	b	11c04 <__assert_fail@plt+0xcd8>
   11ad8:	movw	r3, #37216	; 0x9160
   11adc:	movt	r3, #2
   11ae0:	mov	r2, #1
   11ae4:	strb	r2, [r3]
   11ae8:	b	11c04 <__assert_fail@plt+0xcd8>
   11aec:	movw	r3, #37208	; 0x9158
   11af0:	movt	r3, #2
   11af4:	ldr	r3, [r3]
   11af8:	cmp	r3, #0
   11afc:	beq	11b20 <__assert_fail@plt+0xbf4>
   11b00:	movw	r3, #37208	; 0x9158
   11b04:	movt	r3, #2
   11b08:	ldr	r3, [r3]
   11b0c:	sub	r2, r3, #1
   11b10:	movw	r3, #37208	; 0x9158
   11b14:	movt	r3, #2
   11b18:	str	r2, [r3]
   11b1c:	b	11b44 <__assert_fail@plt+0xc18>
   11b20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b24:	uxtb	r3, r3
   11b28:	strb	r3, [fp, #-32]	; 0xffffffe0
   11b2c:	mov	r3, #0
   11b30:	strb	r3, [fp, #-31]	; 0xffffffe1
   11b34:	movw	r3, #37208	; 0x9158
   11b38:	movt	r3, #2
   11b3c:	sub	r2, fp, #32
   11b40:	str	r2, [r3]
   11b44:	movw	r3, #37208	; 0x9158
   11b48:	movt	r3, #2
   11b4c:	ldr	r4, [r3]
   11b50:	movw	r0, #31668	; 0x7bb4
   11b54:	movt	r0, #1
   11b58:	bl	10e3c <gettext@plt>
   11b5c:	mov	r2, r0
   11b60:	mov	r3, #0
   11b64:	str	r3, [sp, #16]
   11b68:	str	r2, [sp, #12]
   11b6c:	movw	r3, #30884	; 0x78a4
   11b70:	movt	r3, #1
   11b74:	str	r3, [sp, #8]
   11b78:	mvn	r2, #9
   11b7c:	mov	r3, #0
   11b80:	strd	r2, [sp]
   11b84:	mov	r2, #1
   11b88:	mov	r3, #0
   11b8c:	mov	r0, r4
   11b90:	bl	15ea8 <__assert_fail@plt+0x4f7c>
   11b94:	mov	r2, r0
   11b98:	mov	r3, r1
   11b9c:	mov	r3, r2
   11ba0:	str	r3, [fp, #-16]
   11ba4:	b	11c04 <__assert_fail@plt+0xcd8>
   11ba8:	mov	r0, #0
   11bac:	bl	112a4 <__assert_fail@plt+0x378>
   11bb0:	movw	r3, #37204	; 0x9154
   11bb4:	movt	r3, #2
   11bb8:	ldr	r0, [r3]
   11bbc:	movw	r3, #37100	; 0x90ec
   11bc0:	movt	r3, #2
   11bc4:	ldr	r2, [r3]
   11bc8:	mov	r3, #0
   11bcc:	str	r3, [sp, #4]
   11bd0:	movw	r3, #31696	; 0x7bd0
   11bd4:	movt	r3, #1
   11bd8:	str	r3, [sp]
   11bdc:	mov	r3, r2
   11be0:	movw	r2, #30700	; 0x77ec
   11be4:	movt	r2, #1
   11be8:	movw	r1, #31624	; 0x7b88
   11bec:	movt	r1, #1
   11bf0:	bl	152e0 <__assert_fail@plt+0x43b4>
   11bf4:	mov	r0, #0
   11bf8:	bl	10e30 <exit@plt>
   11bfc:	mov	r0, #1
   11c00:	bl	112a4 <__assert_fail@plt+0x378>
   11c04:	mov	r3, #0
   11c08:	str	r3, [sp]
   11c0c:	movw	r3, #31140	; 0x79a4
   11c10:	movt	r3, #1
   11c14:	movw	r2, #31064	; 0x7958
   11c18:	movt	r2, #1
   11c1c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11c20:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c24:	bl	10e18 <getopt_long@plt>
   11c28:	str	r0, [fp, #-28]	; 0xffffffe4
   11c2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11c30:	cmn	r3, #1
   11c34:	bne	11a6c <__assert_fail@plt+0xb40>
   11c38:	movw	r3, #37184	; 0x9140
   11c3c:	movt	r3, #2
   11c40:	ldr	r3, [r3]
   11c44:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11c48:	cmp	r2, r3
   11c4c:	bne	11c6c <__assert_fail@plt+0xd40>
   11c50:	ldr	r1, [fp, #-16]
   11c54:	movw	r0, #31632	; 0x7b90
   11c58:	movt	r0, #1
   11c5c:	bl	114a8 <__assert_fail@plt+0x57c>
   11c60:	mov	r3, r0
   11c64:	strb	r3, [fp, #-21]	; 0xffffffeb
   11c68:	b	11ce4 <__assert_fail@plt+0xdb8>
   11c6c:	mov	r3, #1
   11c70:	strb	r3, [fp, #-21]	; 0xffffffeb
   11c74:	movw	r3, #37184	; 0x9140
   11c78:	movt	r3, #2
   11c7c:	ldr	r3, [r3]
   11c80:	str	r3, [fp, #-20]	; 0xffffffec
   11c84:	b	11cd4 <__assert_fail@plt+0xda8>
   11c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   11c8c:	lsl	r3, r3, #2
   11c90:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11c94:	add	r3, r2, r3
   11c98:	ldr	r3, [r3]
   11c9c:	ldr	r1, [fp, #-16]
   11ca0:	mov	r0, r3
   11ca4:	bl	114a8 <__assert_fail@plt+0x57c>
   11ca8:	mov	r3, r0
   11cac:	mov	r2, r3
   11cb0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11cb4:	and	r3, r3, r2
   11cb8:	cmp	r3, #0
   11cbc:	movne	r3, #1
   11cc0:	moveq	r3, #0
   11cc4:	strb	r3, [fp, #-21]	; 0xffffffeb
   11cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ccc:	add	r3, r3, #1
   11cd0:	str	r3, [fp, #-20]	; 0xffffffec
   11cd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   11cd8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11cdc:	cmp	r2, r3
   11ce0:	blt	11c88 <__assert_fail@plt+0xd5c>
   11ce4:	movw	r3, #37218	; 0x9162
   11ce8:	movt	r3, #2
   11cec:	ldrb	r3, [r3]
   11cf0:	cmp	r3, #0
   11cf4:	beq	11d38 <__assert_fail@plt+0xe0c>
   11cf8:	movw	r3, #37200	; 0x9150
   11cfc:	movt	r3, #2
   11d00:	ldr	r3, [r3]
   11d04:	mov	r0, r3
   11d08:	bl	11fc4 <__assert_fail@plt+0x1098>
   11d0c:	mov	r3, r0
   11d10:	cmn	r3, #1
   11d14:	bne	11d38 <__assert_fail@plt+0xe0c>
   11d18:	bl	10e6c <__errno_location@plt>
   11d1c:	mov	r3, r0
   11d20:	ldr	r3, [r3]
   11d24:	movw	r2, #31632	; 0x7b90
   11d28:	movt	r2, #1
   11d2c:	mov	r1, r3
   11d30:	mov	r0, #1
   11d34:	bl	10ddc <error@plt>
   11d38:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11d3c:	eor	r3, r3, #1
   11d40:	uxtb	r3, r3
   11d44:	mov	r0, r3
   11d48:	sub	sp, fp, #8
   11d4c:	ldr	r4, [sp]
   11d50:	ldr	fp, [sp, #4]
   11d54:	add	sp, sp, #8
   11d58:	pop	{pc}		; (ldr pc, [sp], #4)
   11d5c:	push	{fp}		; (str fp, [sp, #-4]!)
   11d60:	add	fp, sp, #0
   11d64:	sub	sp, sp, #12
   11d68:	str	r0, [fp, #-8]
   11d6c:	movw	r3, #37228	; 0x916c
   11d70:	movt	r3, #2
   11d74:	ldr	r2, [fp, #-8]
   11d78:	str	r2, [r3]
   11d7c:	nop	{0}
   11d80:	add	sp, fp, #0
   11d84:	pop	{fp}		; (ldr fp, [sp], #4)
   11d88:	bx	lr
   11d8c:	push	{fp}		; (str fp, [sp, #-4]!)
   11d90:	add	fp, sp, #0
   11d94:	sub	sp, sp, #12
   11d98:	mov	r3, r0
   11d9c:	strb	r3, [fp, #-5]
   11da0:	movw	r3, #37232	; 0x9170
   11da4:	movt	r3, #2
   11da8:	ldrb	r2, [fp, #-5]
   11dac:	strb	r2, [r3]
   11db0:	nop	{0}
   11db4:	add	sp, fp, #0
   11db8:	pop	{fp}		; (ldr fp, [sp], #4)
   11dbc:	bx	lr
   11dc0:	str	r4, [sp, #-12]!
   11dc4:	str	fp, [sp, #4]
   11dc8:	str	lr, [sp, #8]
   11dcc:	add	fp, sp, #8
   11dd0:	sub	sp, sp, #20
   11dd4:	movw	r3, #37204	; 0x9154
   11dd8:	movt	r3, #2
   11ddc:	ldr	r3, [r3]
   11de0:	mov	r0, r3
   11de4:	bl	16a74 <__assert_fail@plt+0x5b48>
   11de8:	mov	r3, r0
   11dec:	cmp	r3, #0
   11df0:	beq	11ec4 <__assert_fail@plt+0xf98>
   11df4:	movw	r3, #37232	; 0x9170
   11df8:	movt	r3, #2
   11dfc:	ldrb	r3, [r3]
   11e00:	eor	r3, r3, #1
   11e04:	uxtb	r3, r3
   11e08:	cmp	r3, #0
   11e0c:	bne	11e24 <__assert_fail@plt+0xef8>
   11e10:	bl	10e6c <__errno_location@plt>
   11e14:	mov	r3, r0
   11e18:	ldr	r3, [r3]
   11e1c:	cmp	r3, #32
   11e20:	beq	11ec4 <__assert_fail@plt+0xf98>
   11e24:	movw	r0, #31728	; 0x7bf0
   11e28:	movt	r0, #1
   11e2c:	bl	10e3c <gettext@plt>
   11e30:	str	r0, [fp, #-16]
   11e34:	movw	r3, #37228	; 0x916c
   11e38:	movt	r3, #2
   11e3c:	ldr	r3, [r3]
   11e40:	cmp	r3, #0
   11e44:	beq	11e90 <__assert_fail@plt+0xf64>
   11e48:	bl	10e6c <__errno_location@plt>
   11e4c:	mov	r3, r0
   11e50:	ldr	r4, [r3]
   11e54:	movw	r3, #37228	; 0x916c
   11e58:	movt	r3, #2
   11e5c:	ldr	r3, [r3]
   11e60:	mov	r0, r3
   11e64:	bl	14864 <__assert_fail@plt+0x3938>
   11e68:	mov	r2, r0
   11e6c:	ldr	r3, [fp, #-16]
   11e70:	str	r3, [sp]
   11e74:	mov	r3, r2
   11e78:	movw	r2, #31740	; 0x7bfc
   11e7c:	movt	r2, #1
   11e80:	mov	r1, r4
   11e84:	mov	r0, #0
   11e88:	bl	10ddc <error@plt>
   11e8c:	b	11eb0 <__assert_fail@plt+0xf84>
   11e90:	bl	10e6c <__errno_location@plt>
   11e94:	mov	r3, r0
   11e98:	ldr	r1, [r3]
   11e9c:	ldr	r3, [fp, #-16]
   11ea0:	movw	r2, #31748	; 0x7c04
   11ea4:	movt	r2, #1
   11ea8:	mov	r0, #0
   11eac:	bl	10ddc <error@plt>
   11eb0:	movw	r3, #37104	; 0x90f0
   11eb4:	movt	r3, #2
   11eb8:	ldr	r3, [r3]
   11ebc:	mov	r0, r3
   11ec0:	bl	10d1c <_exit@plt>
   11ec4:	movw	r3, #37192	; 0x9148
   11ec8:	movt	r3, #2
   11ecc:	ldr	r3, [r3]
   11ed0:	mov	r0, r3
   11ed4:	bl	16a74 <__assert_fail@plt+0x5b48>
   11ed8:	mov	r3, r0
   11edc:	cmp	r3, #0
   11ee0:	beq	11ef8 <__assert_fail@plt+0xfcc>
   11ee4:	movw	r3, #37104	; 0x90f0
   11ee8:	movt	r3, #2
   11eec:	ldr	r3, [r3]
   11ef0:	mov	r0, r3
   11ef4:	bl	10d1c <_exit@plt>
   11ef8:	nop	{0}
   11efc:	sub	sp, fp, #8
   11f00:	ldr	r4, [sp]
   11f04:	ldr	fp, [sp, #4]
   11f08:	add	sp, sp, #8
   11f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f10:	str	fp, [sp, #-8]!
   11f14:	str	lr, [sp, #4]
   11f18:	add	fp, sp, #4
   11f1c:	sub	sp, sp, #40	; 0x28
   11f20:	str	r0, [fp, #-16]
   11f24:	strd	r2, [fp, #-28]	; 0xffffffe4
   11f28:	ldr	r3, [fp, #12]
   11f2c:	str	r3, [sp, #8]
   11f30:	ldrd	r2, [fp, #4]
   11f34:	strd	r2, [sp]
   11f38:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11f3c:	ldr	r0, [fp, #-16]
   11f40:	bl	10ce0 <posix_fadvise64@plt>
   11f44:	str	r0, [fp, #-8]
   11f48:	nop	{0}
   11f4c:	sub	sp, fp, #4
   11f50:	ldr	fp, [sp]
   11f54:	add	sp, sp, #4
   11f58:	pop	{pc}		; (ldr pc, [sp], #4)
   11f5c:	str	fp, [sp, #-8]!
   11f60:	str	lr, [sp, #4]
   11f64:	add	fp, sp, #4
   11f68:	sub	sp, sp, #24
   11f6c:	str	r0, [fp, #-8]
   11f70:	str	r1, [fp, #-12]
   11f74:	ldr	r3, [fp, #-8]
   11f78:	cmp	r3, #0
   11f7c:	beq	11fb0 <__assert_fail@plt+0x1084>
   11f80:	ldr	r0, [fp, #-8]
   11f84:	bl	10e90 <fileno@plt>
   11f88:	mov	r1, r0
   11f8c:	ldr	r3, [fp, #-12]
   11f90:	str	r3, [sp, #8]
   11f94:	mov	r2, #0
   11f98:	mov	r3, #0
   11f9c:	strd	r2, [sp]
   11fa0:	mov	r2, #0
   11fa4:	mov	r3, #0
   11fa8:	mov	r0, r1
   11fac:	bl	11f10 <__assert_fail@plt+0xfe4>
   11fb0:	nop	{0}
   11fb4:	sub	sp, fp, #4
   11fb8:	ldr	fp, [sp]
   11fbc:	add	sp, sp, #4
   11fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   11fc4:	str	fp, [sp, #-8]!
   11fc8:	str	lr, [sp, #4]
   11fcc:	add	fp, sp, #4
   11fd0:	sub	sp, sp, #32
   11fd4:	str	r0, [fp, #-24]	; 0xffffffe8
   11fd8:	mov	r3, #0
   11fdc:	str	r3, [fp, #-8]
   11fe0:	mov	r3, #0
   11fe4:	str	r3, [fp, #-12]
   11fe8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11fec:	bl	10e90 <fileno@plt>
   11ff0:	str	r0, [fp, #-16]
   11ff4:	ldr	r3, [fp, #-16]
   11ff8:	cmp	r3, #0
   11ffc:	bge	12010 <__assert_fail@plt+0x10e4>
   12000:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12004:	bl	10ea8 <fclose@plt>
   12008:	mov	r3, r0
   1200c:	b	120b4 <__assert_fail@plt+0x1188>
   12010:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12014:	bl	10e00 <__freading@plt>
   12018:	mov	r3, r0
   1201c:	cmp	r3, #0
   12020:	beq	1205c <__assert_fail@plt+0x1130>
   12024:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12028:	bl	10e90 <fileno@plt>
   1202c:	mov	r1, r0
   12030:	mov	r3, #1
   12034:	str	r3, [sp]
   12038:	mov	r2, #0
   1203c:	mov	r3, #0
   12040:	mov	r0, r1
   12044:	bl	10da0 <lseek64@plt>
   12048:	mvn	r2, #0
   1204c:	mvn	r3, #0
   12050:	cmp	r1, r3
   12054:	cmpeq	r0, r2
   12058:	beq	12080 <__assert_fail@plt+0x1154>
   1205c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12060:	bl	1211c <__assert_fail@plt+0x11f0>
   12064:	mov	r3, r0
   12068:	cmp	r3, #0
   1206c:	beq	12080 <__assert_fail@plt+0x1154>
   12070:	bl	10e6c <__errno_location@plt>
   12074:	mov	r3, r0
   12078:	ldr	r3, [r3]
   1207c:	str	r3, [fp, #-8]
   12080:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12084:	bl	10ea8 <fclose@plt>
   12088:	str	r0, [fp, #-12]
   1208c:	ldr	r3, [fp, #-8]
   12090:	cmp	r3, #0
   12094:	beq	120b0 <__assert_fail@plt+0x1184>
   12098:	bl	10e6c <__errno_location@plt>
   1209c:	mov	r2, r0
   120a0:	ldr	r3, [fp, #-8]
   120a4:	str	r3, [r2]
   120a8:	mvn	r3, #0
   120ac:	str	r3, [fp, #-12]
   120b0:	ldr	r3, [fp, #-12]
   120b4:	mov	r0, r3
   120b8:	sub	sp, fp, #4
   120bc:	ldr	fp, [sp]
   120c0:	add	sp, sp, #4
   120c4:	pop	{pc}		; (ldr pc, [sp], #4)
   120c8:	str	fp, [sp, #-8]!
   120cc:	str	lr, [sp, #4]
   120d0:	add	fp, sp, #4
   120d4:	sub	sp, sp, #16
   120d8:	str	r0, [fp, #-8]
   120dc:	ldr	r3, [fp, #-8]
   120e0:	ldr	r3, [r3]
   120e4:	and	r3, r3, #256	; 0x100
   120e8:	cmp	r3, #0
   120ec:	beq	12108 <__assert_fail@plt+0x11dc>
   120f0:	mov	r3, #1
   120f4:	str	r3, [sp]
   120f8:	mov	r2, #0
   120fc:	mov	r3, #0
   12100:	ldr	r0, [fp, #-8]
   12104:	bl	12188 <__assert_fail@plt+0x125c>
   12108:	nop	{0}
   1210c:	sub	sp, fp, #4
   12110:	ldr	fp, [sp]
   12114:	add	sp, sp, #4
   12118:	pop	{pc}		; (ldr pc, [sp], #4)
   1211c:	str	fp, [sp, #-8]!
   12120:	str	lr, [sp, #4]
   12124:	add	fp, sp, #4
   12128:	sub	sp, sp, #8
   1212c:	str	r0, [fp, #-8]
   12130:	ldr	r3, [fp, #-8]
   12134:	cmp	r3, #0
   12138:	beq	12150 <__assert_fail@plt+0x1224>
   1213c:	ldr	r0, [fp, #-8]
   12140:	bl	10e00 <__freading@plt>
   12144:	mov	r3, r0
   12148:	cmp	r3, #0
   1214c:	bne	12160 <__assert_fail@plt+0x1234>
   12150:	ldr	r0, [fp, #-8]
   12154:	bl	10cf8 <fflush@plt>
   12158:	mov	r3, r0
   1215c:	b	12174 <__assert_fail@plt+0x1248>
   12160:	ldr	r0, [fp, #-8]
   12164:	bl	120c8 <__assert_fail@plt+0x119c>
   12168:	ldr	r0, [fp, #-8]
   1216c:	bl	10cf8 <fflush@plt>
   12170:	mov	r3, r0
   12174:	mov	r0, r3
   12178:	sub	sp, fp, #4
   1217c:	ldr	fp, [sp]
   12180:	add	sp, sp, #4
   12184:	pop	{pc}		; (ldr pc, [sp], #4)
   12188:	str	fp, [sp, #-8]!
   1218c:	str	lr, [sp, #4]
   12190:	add	fp, sp, #4
   12194:	sub	sp, sp, #32
   12198:	str	r0, [fp, #-16]
   1219c:	strd	r2, [fp, #-28]	; 0xffffffe4
   121a0:	ldr	r3, [fp, #-16]
   121a4:	ldr	r2, [r3, #8]
   121a8:	ldr	r3, [fp, #-16]
   121ac:	ldr	r3, [r3, #4]
   121b0:	cmp	r2, r3
   121b4:	bne	1224c <__assert_fail@plt+0x1320>
   121b8:	ldr	r3, [fp, #-16]
   121bc:	ldr	r2, [r3, #20]
   121c0:	ldr	r3, [fp, #-16]
   121c4:	ldr	r3, [r3, #16]
   121c8:	cmp	r2, r3
   121cc:	bne	1224c <__assert_fail@plt+0x1320>
   121d0:	ldr	r3, [fp, #-16]
   121d4:	ldr	r3, [r3, #36]	; 0x24
   121d8:	cmp	r3, #0
   121dc:	bne	1224c <__assert_fail@plt+0x1320>
   121e0:	ldr	r0, [fp, #-16]
   121e4:	bl	10e90 <fileno@plt>
   121e8:	mov	r1, r0
   121ec:	ldr	r3, [fp, #4]
   121f0:	str	r3, [sp]
   121f4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   121f8:	mov	r0, r1
   121fc:	bl	10da0 <lseek64@plt>
   12200:	strd	r0, [fp, #-12]
   12204:	ldrd	r2, [fp, #-12]
   12208:	mvn	r0, #0
   1220c:	mvn	r1, #0
   12210:	cmp	r3, r1
   12214:	cmpeq	r2, r0
   12218:	bne	12224 <__assert_fail@plt+0x12f8>
   1221c:	mvn	r3, #0
   12220:	b	12264 <__assert_fail@plt+0x1338>
   12224:	ldr	r3, [fp, #-16]
   12228:	ldr	r3, [r3]
   1222c:	bic	r2, r3, #16
   12230:	ldr	r3, [fp, #-16]
   12234:	str	r2, [r3]
   12238:	ldr	r1, [fp, #-16]
   1223c:	ldrd	r2, [fp, #-12]
   12240:	strd	r2, [r1, #80]	; 0x50
   12244:	mov	r3, #0
   12248:	b	12264 <__assert_fail@plt+0x1338>
   1224c:	ldr	r3, [fp, #4]
   12250:	str	r3, [sp]
   12254:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12258:	ldr	r0, [fp, #-16]
   1225c:	bl	10eb4 <fseeko64@plt>
   12260:	mov	r3, r0
   12264:	mov	r0, r3
   12268:	sub	sp, fp, #4
   1226c:	ldr	fp, [sp]
   12270:	add	sp, sp, #4
   12274:	pop	{pc}		; (ldr pc, [sp], #4)
   12278:	str	fp, [sp, #-8]!
   1227c:	str	lr, [sp, #4]
   12280:	add	fp, sp, #4
   12284:	sub	sp, sp, #16
   12288:	str	r0, [fp, #-16]
   1228c:	ldr	r3, [fp, #-16]
   12290:	cmp	r3, #0
   12294:	bne	122bc <__assert_fail@plt+0x1390>
   12298:	movw	r3, #37192	; 0x9148
   1229c:	movt	r3, #2
   122a0:	ldr	r3, [r3]
   122a4:	mov	r2, #55	; 0x37
   122a8:	mov	r1, #1
   122ac:	movw	r0, #31752	; 0x7c08
   122b0:	movt	r0, #1
   122b4:	bl	10d94 <fwrite@plt>
   122b8:	bl	10f14 <abort@plt>
   122bc:	mov	r1, #47	; 0x2f
   122c0:	ldr	r0, [fp, #-16]
   122c4:	bl	10ecc <strrchr@plt>
   122c8:	str	r0, [fp, #-8]
   122cc:	ldr	r3, [fp, #-8]
   122d0:	cmp	r3, #0
   122d4:	beq	122e4 <__assert_fail@plt+0x13b8>
   122d8:	ldr	r3, [fp, #-8]
   122dc:	add	r3, r3, #1
   122e0:	b	122e8 <__assert_fail@plt+0x13bc>
   122e4:	ldr	r3, [fp, #-16]
   122e8:	str	r3, [fp, #-12]
   122ec:	ldr	r2, [fp, #-12]
   122f0:	ldr	r3, [fp, #-16]
   122f4:	sub	r3, r2, r3
   122f8:	cmp	r3, #6
   122fc:	ble	1236c <__assert_fail@plt+0x1440>
   12300:	ldr	r3, [fp, #-12]
   12304:	sub	r3, r3, #7
   12308:	mov	r2, #7
   1230c:	movw	r1, #31808	; 0x7c40
   12310:	movt	r1, #1
   12314:	mov	r0, r3
   12318:	bl	10f08 <strncmp@plt>
   1231c:	mov	r3, r0
   12320:	cmp	r3, #0
   12324:	bne	1236c <__assert_fail@plt+0x1440>
   12328:	ldr	r3, [fp, #-12]
   1232c:	str	r3, [fp, #-16]
   12330:	mov	r2, #3
   12334:	movw	r1, #31816	; 0x7c48
   12338:	movt	r1, #1
   1233c:	ldr	r0, [fp, #-12]
   12340:	bl	10f08 <strncmp@plt>
   12344:	mov	r3, r0
   12348:	cmp	r3, #0
   1234c:	bne	1236c <__assert_fail@plt+0x1440>
   12350:	ldr	r3, [fp, #-12]
   12354:	add	r3, r3, #3
   12358:	str	r3, [fp, #-16]
   1235c:	movw	r3, #37176	; 0x9138
   12360:	movt	r3, #2
   12364:	ldr	r2, [fp, #-16]
   12368:	str	r2, [r3]
   1236c:	movw	r3, #37236	; 0x9174
   12370:	movt	r3, #2
   12374:	ldr	r2, [fp, #-16]
   12378:	str	r2, [r3]
   1237c:	movw	r3, #37180	; 0x913c
   12380:	movt	r3, #2
   12384:	ldr	r2, [fp, #-16]
   12388:	str	r2, [r3]
   1238c:	nop	{0}
   12390:	sub	sp, fp, #4
   12394:	ldr	fp, [sp]
   12398:	add	sp, sp, #4
   1239c:	pop	{pc}		; (ldr pc, [sp], #4)
   123a0:	str	fp, [sp, #-8]!
   123a4:	str	lr, [sp, #4]
   123a8:	add	fp, sp, #4
   123ac:	sub	sp, sp, #16
   123b0:	str	r0, [fp, #-16]
   123b4:	bl	10e6c <__errno_location@plt>
   123b8:	mov	r3, r0
   123bc:	ldr	r3, [r3]
   123c0:	str	r3, [fp, #-8]
   123c4:	ldr	r3, [fp, #-16]
   123c8:	cmp	r3, #0
   123cc:	beq	123d8 <__assert_fail@plt+0x14ac>
   123d0:	ldr	r3, [fp, #-16]
   123d4:	b	123e0 <__assert_fail@plt+0x14b4>
   123d8:	movw	r3, #37240	; 0x9178
   123dc:	movt	r3, #2
   123e0:	mov	r1, #48	; 0x30
   123e4:	mov	r0, r3
   123e8:	bl	15b80 <__assert_fail@plt+0x4c54>
   123ec:	mov	r3, r0
   123f0:	str	r3, [fp, #-12]
   123f4:	bl	10e6c <__errno_location@plt>
   123f8:	mov	r2, r0
   123fc:	ldr	r3, [fp, #-8]
   12400:	str	r3, [r2]
   12404:	ldr	r3, [fp, #-12]
   12408:	mov	r0, r3
   1240c:	sub	sp, fp, #4
   12410:	ldr	fp, [sp]
   12414:	add	sp, sp, #4
   12418:	pop	{pc}		; (ldr pc, [sp], #4)
   1241c:	push	{fp}		; (str fp, [sp, #-4]!)
   12420:	add	fp, sp, #0
   12424:	sub	sp, sp, #12
   12428:	str	r0, [fp, #-8]
   1242c:	ldr	r3, [fp, #-8]
   12430:	cmp	r3, #0
   12434:	beq	12440 <__assert_fail@plt+0x1514>
   12438:	ldr	r3, [fp, #-8]
   1243c:	b	12448 <__assert_fail@plt+0x151c>
   12440:	movw	r3, #37240	; 0x9178
   12444:	movt	r3, #2
   12448:	ldr	r3, [r3]
   1244c:	mov	r0, r3
   12450:	add	sp, fp, #0
   12454:	pop	{fp}		; (ldr fp, [sp], #4)
   12458:	bx	lr
   1245c:	push	{fp}		; (str fp, [sp, #-4]!)
   12460:	add	fp, sp, #0
   12464:	sub	sp, sp, #12
   12468:	str	r0, [fp, #-8]
   1246c:	str	r1, [fp, #-12]
   12470:	ldr	r3, [fp, #-8]
   12474:	cmp	r3, #0
   12478:	beq	12484 <__assert_fail@plt+0x1558>
   1247c:	ldr	r3, [fp, #-8]
   12480:	b	1248c <__assert_fail@plt+0x1560>
   12484:	movw	r3, #37240	; 0x9178
   12488:	movt	r3, #2
   1248c:	ldr	r2, [fp, #-12]
   12490:	str	r2, [r3]
   12494:	nop	{0}
   12498:	add	sp, fp, #0
   1249c:	pop	{fp}		; (ldr fp, [sp], #4)
   124a0:	bx	lr
   124a4:	push	{fp}		; (str fp, [sp, #-4]!)
   124a8:	add	fp, sp, #0
   124ac:	sub	sp, sp, #36	; 0x24
   124b0:	str	r0, [fp, #-24]	; 0xffffffe8
   124b4:	mov	r3, r1
   124b8:	str	r2, [fp, #-32]	; 0xffffffe0
   124bc:	strb	r3, [fp, #-25]	; 0xffffffe7
   124c0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   124c4:	strb	r3, [fp, #-5]
   124c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124cc:	cmp	r3, #0
   124d0:	beq	124dc <__assert_fail@plt+0x15b0>
   124d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124d8:	b	124e4 <__assert_fail@plt+0x15b8>
   124dc:	movw	r3, #37240	; 0x9178
   124e0:	movt	r3, #2
   124e4:	add	r2, r3, #8
   124e8:	ldrb	r3, [fp, #-5]
   124ec:	lsr	r3, r3, #5
   124f0:	uxtb	r3, r3
   124f4:	lsl	r3, r3, #2
   124f8:	add	r3, r2, r3
   124fc:	str	r3, [fp, #-12]
   12500:	ldrb	r3, [fp, #-5]
   12504:	and	r3, r3, #31
   12508:	str	r3, [fp, #-16]
   1250c:	ldr	r3, [fp, #-12]
   12510:	ldr	r2, [r3]
   12514:	ldr	r3, [fp, #-16]
   12518:	lsr	r3, r2, r3
   1251c:	and	r3, r3, #1
   12520:	str	r3, [fp, #-20]	; 0xffffffec
   12524:	ldr	r3, [fp, #-12]
   12528:	ldr	r3, [r3]
   1252c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12530:	and	r1, r2, #1
   12534:	ldr	r2, [fp, #-20]	; 0xffffffec
   12538:	eor	r1, r1, r2
   1253c:	ldr	r2, [fp, #-16]
   12540:	lsl	r2, r1, r2
   12544:	eor	r2, r2, r3
   12548:	ldr	r3, [fp, #-12]
   1254c:	str	r2, [r3]
   12550:	ldr	r3, [fp, #-20]	; 0xffffffec
   12554:	mov	r0, r3
   12558:	add	sp, fp, #0
   1255c:	pop	{fp}		; (ldr fp, [sp], #4)
   12560:	bx	lr
   12564:	push	{fp}		; (str fp, [sp, #-4]!)
   12568:	add	fp, sp, #0
   1256c:	sub	sp, sp, #20
   12570:	str	r0, [fp, #-16]
   12574:	str	r1, [fp, #-20]	; 0xffffffec
   12578:	ldr	r3, [fp, #-16]
   1257c:	cmp	r3, #0
   12580:	bne	12590 <__assert_fail@plt+0x1664>
   12584:	movw	r3, #37240	; 0x9178
   12588:	movt	r3, #2
   1258c:	str	r3, [fp, #-16]
   12590:	ldr	r3, [fp, #-16]
   12594:	ldr	r3, [r3, #4]
   12598:	str	r3, [fp, #-8]
   1259c:	ldr	r3, [fp, #-16]
   125a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   125a4:	str	r2, [r3, #4]
   125a8:	ldr	r3, [fp, #-8]
   125ac:	mov	r0, r3
   125b0:	add	sp, fp, #0
   125b4:	pop	{fp}		; (ldr fp, [sp], #4)
   125b8:	bx	lr
   125bc:	str	fp, [sp, #-8]!
   125c0:	str	lr, [sp, #4]
   125c4:	add	fp, sp, #4
   125c8:	sub	sp, sp, #16
   125cc:	str	r0, [fp, #-8]
   125d0:	str	r1, [fp, #-12]
   125d4:	str	r2, [fp, #-16]
   125d8:	ldr	r3, [fp, #-8]
   125dc:	cmp	r3, #0
   125e0:	bne	125f0 <__assert_fail@plt+0x16c4>
   125e4:	movw	r3, #37240	; 0x9178
   125e8:	movt	r3, #2
   125ec:	str	r3, [fp, #-8]
   125f0:	ldr	r3, [fp, #-8]
   125f4:	mov	r2, #10
   125f8:	str	r2, [r3]
   125fc:	ldr	r3, [fp, #-12]
   12600:	cmp	r3, #0
   12604:	beq	12614 <__assert_fail@plt+0x16e8>
   12608:	ldr	r3, [fp, #-16]
   1260c:	cmp	r3, #0
   12610:	bne	12618 <__assert_fail@plt+0x16ec>
   12614:	bl	10f14 <abort@plt>
   12618:	ldr	r3, [fp, #-8]
   1261c:	ldr	r2, [fp, #-12]
   12620:	str	r2, [r3, #40]	; 0x28
   12624:	ldr	r3, [fp, #-8]
   12628:	ldr	r2, [fp, #-16]
   1262c:	str	r2, [r3, #44]	; 0x2c
   12630:	nop	{0}
   12634:	sub	sp, fp, #4
   12638:	ldr	fp, [sp]
   1263c:	add	sp, sp, #4
   12640:	pop	{pc}		; (ldr pc, [sp], #4)
   12644:	str	fp, [sp, #-8]!
   12648:	str	lr, [sp, #4]
   1264c:	add	fp, sp, #4
   12650:	sub	sp, sp, #56	; 0x38
   12654:	str	r0, [fp, #-56]	; 0xffffffc8
   12658:	str	r1, [fp, #-60]	; 0xffffffc4
   1265c:	sub	r1, fp, #52	; 0x34
   12660:	mov	r2, #0
   12664:	mov	r3, #0
   12668:	strd	r2, [r1]
   1266c:	strd	r2, [r1, #8]
   12670:	strd	r2, [r1, #16]
   12674:	strd	r2, [r1, #24]
   12678:	strd	r2, [r1, #32]
   1267c:	strd	r2, [r1, #40]	; 0x28
   12680:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12684:	cmp	r3, #10
   12688:	bne	12690 <__assert_fail@plt+0x1764>
   1268c:	bl	10f14 <abort@plt>
   12690:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12694:	str	r3, [fp, #-52]	; 0xffffffcc
   12698:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1269c:	mov	r2, r3
   126a0:	sub	r3, fp, #52	; 0x34
   126a4:	ldrd	r0, [r3]
   126a8:	strd	r0, [r2]
   126ac:	ldrd	r0, [r3, #8]
   126b0:	strd	r0, [r2, #8]
   126b4:	ldrd	r0, [r3, #16]
   126b8:	strd	r0, [r2, #16]
   126bc:	ldrd	r0, [r3, #24]
   126c0:	strd	r0, [r2, #24]
   126c4:	ldrd	r0, [r3, #32]
   126c8:	strd	r0, [r2, #32]
   126cc:	ldrd	r0, [r3, #40]	; 0x28
   126d0:	strd	r0, [r2, #40]	; 0x28
   126d4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   126d8:	sub	sp, fp, #4
   126dc:	ldr	fp, [sp]
   126e0:	add	sp, sp, #4
   126e4:	pop	{pc}		; (ldr pc, [sp], #4)
   126e8:	str	fp, [sp, #-8]!
   126ec:	str	lr, [sp, #4]
   126f0:	add	fp, sp, #4
   126f4:	sub	sp, sp, #16
   126f8:	str	r0, [fp, #-16]
   126fc:	str	r1, [fp, #-20]	; 0xffffffec
   12700:	ldr	r0, [fp, #-16]
   12704:	bl	10e3c <gettext@plt>
   12708:	str	r0, [fp, #-8]
   1270c:	ldr	r2, [fp, #-8]
   12710:	ldr	r3, [fp, #-16]
   12714:	cmp	r2, r3
   12718:	beq	12724 <__assert_fail@plt+0x17f8>
   1271c:	ldr	r3, [fp, #-8]
   12720:	b	127d4 <__assert_fail@plt+0x18a8>
   12724:	bl	16d78 <__assert_fail@plt+0x5e4c>
   12728:	str	r0, [fp, #-12]
   1272c:	movw	r1, #32008	; 0x7d08
   12730:	movt	r1, #1
   12734:	ldr	r0, [fp, #-12]
   12738:	bl	169c8 <__assert_fail@plt+0x5a9c>
   1273c:	mov	r3, r0
   12740:	cmp	r3, #0
   12744:	bne	12770 <__assert_fail@plt+0x1844>
   12748:	ldr	r3, [fp, #-16]
   1274c:	ldrb	r3, [r3]
   12750:	cmp	r3, #96	; 0x60
   12754:	bne	12764 <__assert_fail@plt+0x1838>
   12758:	movw	r3, #32016	; 0x7d10
   1275c:	movt	r3, #1
   12760:	b	127d4 <__assert_fail@plt+0x18a8>
   12764:	movw	r3, #32020	; 0x7d14
   12768:	movt	r3, #1
   1276c:	b	127d4 <__assert_fail@plt+0x18a8>
   12770:	movw	r1, #32024	; 0x7d18
   12774:	movt	r1, #1
   12778:	ldr	r0, [fp, #-12]
   1277c:	bl	169c8 <__assert_fail@plt+0x5a9c>
   12780:	mov	r3, r0
   12784:	cmp	r3, #0
   12788:	bne	127b4 <__assert_fail@plt+0x1888>
   1278c:	ldr	r3, [fp, #-16]
   12790:	ldrb	r3, [r3]
   12794:	cmp	r3, #96	; 0x60
   12798:	bne	127a8 <__assert_fail@plt+0x187c>
   1279c:	movw	r3, #32032	; 0x7d20
   127a0:	movt	r3, #1
   127a4:	b	127d4 <__assert_fail@plt+0x18a8>
   127a8:	movw	r3, #32036	; 0x7d24
   127ac:	movt	r3, #1
   127b0:	b	127d4 <__assert_fail@plt+0x18a8>
   127b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   127b8:	cmp	r3, #9
   127bc:	bne	127cc <__assert_fail@plt+0x18a0>
   127c0:	movw	r3, #32040	; 0x7d28
   127c4:	movt	r3, #1
   127c8:	b	127d4 <__assert_fail@plt+0x18a8>
   127cc:	movw	r3, #32044	; 0x7d2c
   127d0:	movt	r3, #1
   127d4:	mov	r0, r3
   127d8:	sub	sp, fp, #4
   127dc:	ldr	fp, [sp]
   127e0:	add	sp, sp, #4
   127e4:	pop	{pc}		; (ldr pc, [sp], #4)
   127e8:	str	r4, [sp, #-12]!
   127ec:	str	fp, [sp, #4]
   127f0:	str	lr, [sp, #8]
   127f4:	add	fp, sp, #8
   127f8:	sub	sp, sp, #116	; 0x74
   127fc:	str	r0, [fp, #-88]	; 0xffffffa8
   12800:	str	r1, [fp, #-92]	; 0xffffffa4
   12804:	str	r2, [fp, #-96]	; 0xffffffa0
   12808:	str	r3, [fp, #-100]	; 0xffffff9c
   1280c:	mov	r3, #0
   12810:	str	r3, [fp, #-20]	; 0xffffffec
   12814:	mov	r3, #0
   12818:	str	r3, [fp, #-24]	; 0xffffffe8
   1281c:	mov	r3, #0
   12820:	str	r3, [fp, #-28]	; 0xffffffe4
   12824:	mov	r3, #0
   12828:	str	r3, [fp, #-32]	; 0xffffffe0
   1282c:	mov	r3, #0
   12830:	strb	r3, [fp, #-33]	; 0xffffffdf
   12834:	bl	10dac <__ctype_get_mb_cur_max@plt>
   12838:	mov	r3, r0
   1283c:	cmp	r3, #1
   12840:	moveq	r3, #1
   12844:	movne	r3, #0
   12848:	strb	r3, [fp, #-57]	; 0xffffffc7
   1284c:	ldr	r3, [fp, #8]
   12850:	and	r3, r3, #2
   12854:	cmp	r3, #0
   12858:	movne	r3, #1
   1285c:	moveq	r3, #0
   12860:	strb	r3, [fp, #-34]	; 0xffffffde
   12864:	mov	r3, #0
   12868:	strb	r3, [fp, #-35]	; 0xffffffdd
   1286c:	mov	r3, #0
   12870:	strb	r3, [fp, #-36]	; 0xffffffdc
   12874:	mov	r3, #1
   12878:	strb	r3, [fp, #-37]	; 0xffffffdb
   1287c:	ldr	r3, [fp, #4]
   12880:	cmp	r3, #10
   12884:	ldrls	pc, [pc, r3, lsl #2]
   12888:	b	12aa0 <__assert_fail@plt+0x1b74>
   1288c:	muleq	r1, r4, sl
   12890:	andeq	r2, r1, ip, lsl #20
   12894:	andeq	r2, r1, r0, lsr sl
   12898:	andeq	r2, r1, r4, lsl #20
   1289c:	andeq	r2, r1, r4, lsl sl
   128a0:	andeq	r2, r1, r8, asr #17
   128a4:			; <UNDEFINED> instruction: 0x000128b8
   128a8:	andeq	r2, r1, ip, lsr #18
   128ac:	andeq	r2, r1, r0, asr #18
   128b0:	andeq	r2, r1, r0, asr #18
   128b4:	andeq	r2, r1, r0, asr #18
   128b8:	mov	r3, #5
   128bc:	str	r3, [fp, #4]
   128c0:	mov	r3, #1
   128c4:	strb	r3, [fp, #-34]	; 0xffffffde
   128c8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   128cc:	eor	r3, r3, #1
   128d0:	uxtb	r3, r3
   128d4:	cmp	r3, #0
   128d8:	beq	1290c <__assert_fail@plt+0x19e0>
   128dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   128e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   128e4:	cmp	r2, r3
   128e8:	bcs	12900 <__assert_fail@plt+0x19d4>
   128ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   128f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   128f4:	add	r3, r2, r3
   128f8:	mov	r2, #34	; 0x22
   128fc:	strb	r2, [r3]
   12900:	ldr	r3, [fp, #-20]	; 0xffffffec
   12904:	add	r3, r3, #1
   12908:	str	r3, [fp, #-20]	; 0xffffffec
   1290c:	mov	r3, #1
   12910:	strb	r3, [fp, #-33]	; 0xffffffdf
   12914:	movw	r3, #32040	; 0x7d28
   12918:	movt	r3, #1
   1291c:	str	r3, [fp, #-28]	; 0xffffffe4
   12920:	mov	r3, #1
   12924:	str	r3, [fp, #-32]	; 0xffffffe0
   12928:	b	12aa4 <__assert_fail@plt+0x1b78>
   1292c:	mov	r3, #1
   12930:	strb	r3, [fp, #-33]	; 0xffffffdf
   12934:	mov	r3, #0
   12938:	strb	r3, [fp, #-34]	; 0xffffffde
   1293c:	b	12aa4 <__assert_fail@plt+0x1b78>
   12940:	ldr	r3, [fp, #4]
   12944:	cmp	r3, #10
   12948:	beq	12974 <__assert_fail@plt+0x1a48>
   1294c:	ldr	r1, [fp, #4]
   12950:	movw	r0, #32048	; 0x7d30
   12954:	movt	r0, #1
   12958:	bl	126e8 <__assert_fail@plt+0x17bc>
   1295c:	str	r0, [fp, #16]
   12960:	ldr	r1, [fp, #4]
   12964:	movw	r0, #32044	; 0x7d2c
   12968:	movt	r0, #1
   1296c:	bl	126e8 <__assert_fail@plt+0x17bc>
   12970:	str	r0, [fp, #20]
   12974:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12978:	eor	r3, r3, #1
   1297c:	uxtb	r3, r3
   12980:	cmp	r3, #0
   12984:	beq	129e4 <__assert_fail@plt+0x1ab8>
   12988:	ldr	r3, [fp, #16]
   1298c:	str	r3, [fp, #-28]	; 0xffffffe4
   12990:	b	129d4 <__assert_fail@plt+0x1aa8>
   12994:	ldr	r2, [fp, #-20]	; 0xffffffec
   12998:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1299c:	cmp	r2, r3
   129a0:	bcs	129bc <__assert_fail@plt+0x1a90>
   129a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   129a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   129ac:	add	r3, r2, r3
   129b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   129b4:	ldrb	r2, [r2]
   129b8:	strb	r2, [r3]
   129bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   129c0:	add	r3, r3, #1
   129c4:	str	r3, [fp, #-20]	; 0xffffffec
   129c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   129cc:	add	r3, r3, #1
   129d0:	str	r3, [fp, #-28]	; 0xffffffe4
   129d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   129d8:	ldrb	r3, [r3]
   129dc:	cmp	r3, #0
   129e0:	bne	12994 <__assert_fail@plt+0x1a68>
   129e4:	mov	r3, #1
   129e8:	strb	r3, [fp, #-33]	; 0xffffffdf
   129ec:	ldr	r3, [fp, #20]
   129f0:	str	r3, [fp, #-28]	; 0xffffffe4
   129f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   129f8:	bl	10e48 <strlen@plt>
   129fc:	str	r0, [fp, #-32]	; 0xffffffe0
   12a00:	b	12aa4 <__assert_fail@plt+0x1b78>
   12a04:	mov	r3, #1
   12a08:	strb	r3, [fp, #-33]	; 0xffffffdf
   12a0c:	mov	r3, #1
   12a10:	strb	r3, [fp, #-34]	; 0xffffffde
   12a14:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12a18:	eor	r3, r3, #1
   12a1c:	uxtb	r3, r3
   12a20:	cmp	r3, #0
   12a24:	beq	12a30 <__assert_fail@plt+0x1b04>
   12a28:	mov	r3, #1
   12a2c:	strb	r3, [fp, #-33]	; 0xffffffdf
   12a30:	mov	r3, #2
   12a34:	str	r3, [fp, #4]
   12a38:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12a3c:	eor	r3, r3, #1
   12a40:	uxtb	r3, r3
   12a44:	cmp	r3, #0
   12a48:	beq	12a7c <__assert_fail@plt+0x1b50>
   12a4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a54:	cmp	r2, r3
   12a58:	bcs	12a70 <__assert_fail@plt+0x1b44>
   12a5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12a60:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a64:	add	r3, r2, r3
   12a68:	mov	r2, #39	; 0x27
   12a6c:	strb	r2, [r3]
   12a70:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a74:	add	r3, r3, #1
   12a78:	str	r3, [fp, #-20]	; 0xffffffec
   12a7c:	movw	r3, #32044	; 0x7d2c
   12a80:	movt	r3, #1
   12a84:	str	r3, [fp, #-28]	; 0xffffffe4
   12a88:	mov	r3, #1
   12a8c:	str	r3, [fp, #-32]	; 0xffffffe0
   12a90:	b	12aa4 <__assert_fail@plt+0x1b78>
   12a94:	mov	r3, #0
   12a98:	strb	r3, [fp, #-34]	; 0xffffffde
   12a9c:	b	12aa4 <__assert_fail@plt+0x1b78>
   12aa0:	bl	10f14 <abort@plt>
   12aa4:	mov	r3, #0
   12aa8:	str	r3, [fp, #-16]
   12aac:	b	13c48 <__assert_fail@plt+0x2d1c>
   12ab0:	mov	r3, #0
   12ab4:	strb	r3, [fp, #-40]	; 0xffffffd8
   12ab8:	mov	r3, #0
   12abc:	strb	r3, [fp, #-41]	; 0xffffffd7
   12ac0:	mov	r3, #0
   12ac4:	strb	r3, [fp, #-42]	; 0xffffffd6
   12ac8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12acc:	cmp	r3, #0
   12ad0:	beq	12b6c <__assert_fail@plt+0x1c40>
   12ad4:	ldr	r3, [fp, #4]
   12ad8:	cmp	r3, #2
   12adc:	beq	12b6c <__assert_fail@plt+0x1c40>
   12ae0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ae4:	cmp	r3, #0
   12ae8:	beq	12b6c <__assert_fail@plt+0x1c40>
   12aec:	ldr	r2, [fp, #-16]
   12af0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12af4:	add	r4, r2, r3
   12af8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12afc:	cmn	r3, #1
   12b00:	bne	12b24 <__assert_fail@plt+0x1bf8>
   12b04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b08:	cmp	r3, #1
   12b0c:	bls	12b24 <__assert_fail@plt+0x1bf8>
   12b10:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12b14:	bl	10e48 <strlen@plt>
   12b18:	str	r0, [fp, #-100]	; 0xffffff9c
   12b1c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12b20:	b	12b28 <__assert_fail@plt+0x1bfc>
   12b24:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12b28:	cmp	r3, r4
   12b2c:	bcc	12b6c <__assert_fail@plt+0x1c40>
   12b30:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12b34:	ldr	r3, [fp, #-16]
   12b38:	add	r3, r2, r3
   12b3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12b40:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12b44:	mov	r0, r3
   12b48:	bl	10d4c <memcmp@plt>
   12b4c:	mov	r3, r0
   12b50:	cmp	r3, #0
   12b54:	bne	12b6c <__assert_fail@plt+0x1c40>
   12b58:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12b5c:	cmp	r3, #0
   12b60:	bne	13e04 <__assert_fail@plt+0x2ed8>
   12b64:	mov	r3, #1
   12b68:	strb	r3, [fp, #-40]	; 0xffffffd8
   12b6c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12b70:	ldr	r3, [fp, #-16]
   12b74:	add	r3, r2, r3
   12b78:	ldrb	r3, [r3]
   12b7c:	strb	r3, [fp, #-38]	; 0xffffffda
   12b80:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12b84:	cmp	r3, #126	; 0x7e
   12b88:	ldrls	pc, [pc, r3, lsl #2]
   12b8c:	b	133c4 <__assert_fail@plt+0x2498>
   12b90:	andeq	r2, r1, ip, lsl #27
   12b94:	andeq	r3, r1, r4, asr #7
   12b98:	andeq	r3, r1, r4, asr #7
   12b9c:	andeq	r3, r1, r4, asr #7
   12ba0:	andeq	r3, r1, r4, asr #7
   12ba4:	andeq	r3, r1, r4, asr #7
   12ba8:	andeq	r3, r1, r4, asr #7
   12bac:	andeq	r3, r1, r0, lsl #3
   12bb0:	andeq	r3, r1, ip, lsl #3
   12bb4:			; <UNDEFINED> instruction: 0x000131bc
   12bb8:	andeq	r3, r1, r4, lsr #3
   12bbc:	andeq	r3, r1, r8, asr #3
   12bc0:	muleq	r1, r8, r1
   12bc4:			; <UNDEFINED> instruction: 0x000131b0
   12bc8:	andeq	r3, r1, r4, asr #7
   12bcc:	andeq	r3, r1, r4, asr #7
   12bd0:	andeq	r3, r1, r4, asr #7
   12bd4:	andeq	r3, r1, r4, asr #7
   12bd8:	andeq	r3, r1, r4, asr #7
   12bdc:	andeq	r3, r1, r4, asr #7
   12be0:	andeq	r3, r1, r4, asr #7
   12be4:	andeq	r3, r1, r4, asr #7
   12be8:	andeq	r3, r1, r4, asr #7
   12bec:	andeq	r3, r1, r4, asr #7
   12bf0:	andeq	r3, r1, r4, asr #7
   12bf4:	andeq	r3, r1, r4, asr #7
   12bf8:	andeq	r3, r1, r4, asr #7
   12bfc:	andeq	r3, r1, r4, asr #7
   12c00:	andeq	r3, r1, r4, asr #7
   12c04:	andeq	r3, r1, r4, asr #7
   12c08:	andeq	r3, r1, r4, asr #7
   12c0c:	andeq	r3, r1, r4, asr #7
   12c10:	andeq	r3, r1, r8, lsr #5
   12c14:			; <UNDEFINED> instruction: 0x000132b0
   12c18:			; <UNDEFINED> instruction: 0x000132b0
   12c1c:	muleq	r1, ip, r2
   12c20:			; <UNDEFINED> instruction: 0x000132b0
   12c24:			; <UNDEFINED> instruction: 0x000133b8
   12c28:			; <UNDEFINED> instruction: 0x000132b0
   12c2c:	andeq	r3, r1, ip, asr #5
   12c30:			; <UNDEFINED> instruction: 0x000132b0
   12c34:			; <UNDEFINED> instruction: 0x000132b0
   12c38:			; <UNDEFINED> instruction: 0x000132b0
   12c3c:			; <UNDEFINED> instruction: 0x000133b8
   12c40:			; <UNDEFINED> instruction: 0x000133b8
   12c44:			; <UNDEFINED> instruction: 0x000133b8
   12c48:			; <UNDEFINED> instruction: 0x000133b8
   12c4c:			; <UNDEFINED> instruction: 0x000133b8
   12c50:			; <UNDEFINED> instruction: 0x000133b8
   12c54:			; <UNDEFINED> instruction: 0x000133b8
   12c58:			; <UNDEFINED> instruction: 0x000133b8
   12c5c:			; <UNDEFINED> instruction: 0x000133b8
   12c60:			; <UNDEFINED> instruction: 0x000133b8
   12c64:			; <UNDEFINED> instruction: 0x000133b8
   12c68:			; <UNDEFINED> instruction: 0x000133b8
   12c6c:			; <UNDEFINED> instruction: 0x000133b8
   12c70:			; <UNDEFINED> instruction: 0x000133b8
   12c74:			; <UNDEFINED> instruction: 0x000133b8
   12c78:			; <UNDEFINED> instruction: 0x000133b8
   12c7c:			; <UNDEFINED> instruction: 0x000132b0
   12c80:			; <UNDEFINED> instruction: 0x000132b0
   12c84:			; <UNDEFINED> instruction: 0x000132b0
   12c88:			; <UNDEFINED> instruction: 0x000132b0
   12c8c:	andeq	r2, r1, ip, ror #30
   12c90:	andeq	r3, r1, r4, asr #7
   12c94:			; <UNDEFINED> instruction: 0x000133b8
   12c98:			; <UNDEFINED> instruction: 0x000133b8
   12c9c:			; <UNDEFINED> instruction: 0x000133b8
   12ca0:			; <UNDEFINED> instruction: 0x000133b8
   12ca4:			; <UNDEFINED> instruction: 0x000133b8
   12ca8:			; <UNDEFINED> instruction: 0x000133b8
   12cac:			; <UNDEFINED> instruction: 0x000133b8
   12cb0:			; <UNDEFINED> instruction: 0x000133b8
   12cb4:			; <UNDEFINED> instruction: 0x000133b8
   12cb8:			; <UNDEFINED> instruction: 0x000133b8
   12cbc:			; <UNDEFINED> instruction: 0x000133b8
   12cc0:			; <UNDEFINED> instruction: 0x000133b8
   12cc4:			; <UNDEFINED> instruction: 0x000133b8
   12cc8:			; <UNDEFINED> instruction: 0x000133b8
   12ccc:			; <UNDEFINED> instruction: 0x000133b8
   12cd0:			; <UNDEFINED> instruction: 0x000133b8
   12cd4:			; <UNDEFINED> instruction: 0x000133b8
   12cd8:			; <UNDEFINED> instruction: 0x000133b8
   12cdc:			; <UNDEFINED> instruction: 0x000133b8
   12ce0:			; <UNDEFINED> instruction: 0x000133b8
   12ce4:			; <UNDEFINED> instruction: 0x000133b8
   12ce8:			; <UNDEFINED> instruction: 0x000133b8
   12cec:			; <UNDEFINED> instruction: 0x000133b8
   12cf0:			; <UNDEFINED> instruction: 0x000133b8
   12cf4:			; <UNDEFINED> instruction: 0x000133b8
   12cf8:			; <UNDEFINED> instruction: 0x000133b8
   12cfc:			; <UNDEFINED> instruction: 0x000132b0
   12d00:	ldrdeq	r3, [r1], -r4
   12d04:			; <UNDEFINED> instruction: 0x000133b8
   12d08:			; <UNDEFINED> instruction: 0x000132b0
   12d0c:			; <UNDEFINED> instruction: 0x000133b8
   12d10:			; <UNDEFINED> instruction: 0x000132b0
   12d14:			; <UNDEFINED> instruction: 0x000133b8
   12d18:			; <UNDEFINED> instruction: 0x000133b8
   12d1c:			; <UNDEFINED> instruction: 0x000133b8
   12d20:			; <UNDEFINED> instruction: 0x000133b8
   12d24:			; <UNDEFINED> instruction: 0x000133b8
   12d28:			; <UNDEFINED> instruction: 0x000133b8
   12d2c:			; <UNDEFINED> instruction: 0x000133b8
   12d30:			; <UNDEFINED> instruction: 0x000133b8
   12d34:			; <UNDEFINED> instruction: 0x000133b8
   12d38:			; <UNDEFINED> instruction: 0x000133b8
   12d3c:			; <UNDEFINED> instruction: 0x000133b8
   12d40:			; <UNDEFINED> instruction: 0x000133b8
   12d44:			; <UNDEFINED> instruction: 0x000133b8
   12d48:			; <UNDEFINED> instruction: 0x000133b8
   12d4c:			; <UNDEFINED> instruction: 0x000133b8
   12d50:			; <UNDEFINED> instruction: 0x000133b8
   12d54:			; <UNDEFINED> instruction: 0x000133b8
   12d58:			; <UNDEFINED> instruction: 0x000133b8
   12d5c:			; <UNDEFINED> instruction: 0x000133b8
   12d60:			; <UNDEFINED> instruction: 0x000133b8
   12d64:			; <UNDEFINED> instruction: 0x000133b8
   12d68:			; <UNDEFINED> instruction: 0x000133b8
   12d6c:			; <UNDEFINED> instruction: 0x000133b8
   12d70:			; <UNDEFINED> instruction: 0x000133b8
   12d74:			; <UNDEFINED> instruction: 0x000133b8
   12d78:			; <UNDEFINED> instruction: 0x000133b8
   12d7c:	andeq	r3, r1, r4, asr r2
   12d80:			; <UNDEFINED> instruction: 0x000132b0
   12d84:	andeq	r3, r1, r4, asr r2
   12d88:	muleq	r1, ip, r2
   12d8c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12d90:	cmp	r3, #0
   12d94:	beq	12f58 <__assert_fail@plt+0x202c>
   12d98:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12d9c:	cmp	r3, #0
   12da0:	bne	13e0c <__assert_fail@plt+0x2ee0>
   12da4:	mov	r3, #1
   12da8:	strb	r3, [fp, #-41]	; 0xffffffd7
   12dac:	ldr	r3, [fp, #4]
   12db0:	cmp	r3, #2
   12db4:	bne	12e64 <__assert_fail@plt+0x1f38>
   12db8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12dbc:	eor	r3, r3, #1
   12dc0:	uxtb	r3, r3
   12dc4:	cmp	r3, #0
   12dc8:	beq	12e64 <__assert_fail@plt+0x1f38>
   12dcc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12dd0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12dd4:	cmp	r2, r3
   12dd8:	bcs	12df0 <__assert_fail@plt+0x1ec4>
   12ddc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12de0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12de4:	add	r3, r2, r3
   12de8:	mov	r2, #39	; 0x27
   12dec:	strb	r2, [r3]
   12df0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12df4:	add	r3, r3, #1
   12df8:	str	r3, [fp, #-20]	; 0xffffffec
   12dfc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e04:	cmp	r2, r3
   12e08:	bcs	12e20 <__assert_fail@plt+0x1ef4>
   12e0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e10:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e14:	add	r3, r2, r3
   12e18:	mov	r2, #36	; 0x24
   12e1c:	strb	r2, [r3]
   12e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e24:	add	r3, r3, #1
   12e28:	str	r3, [fp, #-20]	; 0xffffffec
   12e2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e34:	cmp	r2, r3
   12e38:	bcs	12e50 <__assert_fail@plt+0x1f24>
   12e3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e40:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e44:	add	r3, r2, r3
   12e48:	mov	r2, #39	; 0x27
   12e4c:	strb	r2, [r3]
   12e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e54:	add	r3, r3, #1
   12e58:	str	r3, [fp, #-20]	; 0xffffffec
   12e5c:	mov	r3, #1
   12e60:	strb	r3, [fp, #-35]	; 0xffffffdd
   12e64:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e6c:	cmp	r2, r3
   12e70:	bcs	12e88 <__assert_fail@plt+0x1f5c>
   12e74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e7c:	add	r3, r2, r3
   12e80:	mov	r2, #92	; 0x5c
   12e84:	strb	r2, [r3]
   12e88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e8c:	add	r3, r3, #1
   12e90:	str	r3, [fp, #-20]	; 0xffffffec
   12e94:	ldr	r3, [fp, #4]
   12e98:	cmp	r3, #2
   12e9c:	beq	12f4c <__assert_fail@plt+0x2020>
   12ea0:	ldr	r3, [fp, #-16]
   12ea4:	add	r3, r3, #1
   12ea8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12eac:	cmp	r2, r3
   12eb0:	bls	12f4c <__assert_fail@plt+0x2020>
   12eb4:	ldr	r3, [fp, #-16]
   12eb8:	add	r3, r3, #1
   12ebc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12ec0:	add	r3, r2, r3
   12ec4:	ldrb	r3, [r3]
   12ec8:	cmp	r3, #47	; 0x2f
   12ecc:	bls	12f4c <__assert_fail@plt+0x2020>
   12ed0:	ldr	r3, [fp, #-16]
   12ed4:	add	r3, r3, #1
   12ed8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12edc:	add	r3, r2, r3
   12ee0:	ldrb	r3, [r3]
   12ee4:	cmp	r3, #57	; 0x39
   12ee8:	bhi	12f4c <__assert_fail@plt+0x2020>
   12eec:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ef0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ef4:	cmp	r2, r3
   12ef8:	bcs	12f10 <__assert_fail@plt+0x1fe4>
   12efc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f04:	add	r3, r2, r3
   12f08:	mov	r2, #48	; 0x30
   12f0c:	strb	r2, [r3]
   12f10:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f14:	add	r3, r3, #1
   12f18:	str	r3, [fp, #-20]	; 0xffffffec
   12f1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f24:	cmp	r2, r3
   12f28:	bcs	12f40 <__assert_fail@plt+0x2014>
   12f2c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f30:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f34:	add	r3, r2, r3
   12f38:	mov	r2, #48	; 0x30
   12f3c:	strb	r2, [r3]
   12f40:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f44:	add	r3, r3, #1
   12f48:	str	r3, [fp, #-20]	; 0xffffffec
   12f4c:	mov	r3, #48	; 0x30
   12f50:	strb	r3, [fp, #-38]	; 0xffffffda
   12f54:	b	13994 <__assert_fail@plt+0x2a68>
   12f58:	ldr	r3, [fp, #8]
   12f5c:	and	r3, r3, #1
   12f60:	cmp	r3, #0
   12f64:	beq	13994 <__assert_fail@plt+0x2a68>
   12f68:	b	13c3c <__assert_fail@plt+0x2d10>
   12f6c:	ldr	r3, [fp, #4]
   12f70:	cmp	r3, #2
   12f74:	beq	12f88 <__assert_fail@plt+0x205c>
   12f78:	ldr	r3, [fp, #4]
   12f7c:	cmp	r3, #5
   12f80:	beq	12f98 <__assert_fail@plt+0x206c>
   12f84:	b	1317c <__assert_fail@plt+0x2250>
   12f88:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12f8c:	cmp	r3, #0
   12f90:	beq	13170 <__assert_fail@plt+0x2244>
   12f94:	b	13e40 <__assert_fail@plt+0x2f14>
   12f98:	ldr	r3, [fp, #8]
   12f9c:	and	r3, r3, #4
   12fa0:	cmp	r3, #0
   12fa4:	beq	13178 <__assert_fail@plt+0x224c>
   12fa8:	ldr	r3, [fp, #-16]
   12fac:	add	r3, r3, #2
   12fb0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12fb4:	cmp	r2, r3
   12fb8:	bls	13178 <__assert_fail@plt+0x224c>
   12fbc:	ldr	r3, [fp, #-16]
   12fc0:	add	r3, r3, #1
   12fc4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12fc8:	add	r3, r2, r3
   12fcc:	ldrb	r3, [r3]
   12fd0:	cmp	r3, #63	; 0x3f
   12fd4:	bne	13178 <__assert_fail@plt+0x224c>
   12fd8:	ldr	r3, [fp, #-16]
   12fdc:	add	r3, r3, #2
   12fe0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12fe4:	add	r3, r2, r3
   12fe8:	ldrb	r3, [r3]
   12fec:	sub	r3, r3, #33	; 0x21
   12ff0:	cmp	r3, #29
   12ff4:	ldrls	pc, [pc, r3, lsl #2]
   12ff8:	b	13168 <__assert_fail@plt+0x223c>
   12ffc:	andeq	r3, r1, r4, ror r0
   13000:	andeq	r3, r1, r8, ror #2
   13004:	andeq	r3, r1, r8, ror #2
   13008:	andeq	r3, r1, r8, ror #2
   1300c:	andeq	r3, r1, r8, ror #2
   13010:	andeq	r3, r1, r8, ror #2
   13014:	andeq	r3, r1, r4, ror r0
   13018:	andeq	r3, r1, r4, ror r0
   1301c:	andeq	r3, r1, r4, ror r0
   13020:	andeq	r3, r1, r8, ror #2
   13024:	andeq	r3, r1, r8, ror #2
   13028:	andeq	r3, r1, r8, ror #2
   1302c:	andeq	r3, r1, r4, ror r0
   13030:	andeq	r3, r1, r8, ror #2
   13034:	andeq	r3, r1, r4, ror r0
   13038:	andeq	r3, r1, r8, ror #2
   1303c:	andeq	r3, r1, r8, ror #2
   13040:	andeq	r3, r1, r8, ror #2
   13044:	andeq	r3, r1, r8, ror #2
   13048:	andeq	r3, r1, r8, ror #2
   1304c:	andeq	r3, r1, r8, ror #2
   13050:	andeq	r3, r1, r8, ror #2
   13054:	andeq	r3, r1, r8, ror #2
   13058:	andeq	r3, r1, r8, ror #2
   1305c:	andeq	r3, r1, r8, ror #2
   13060:	andeq	r3, r1, r8, ror #2
   13064:	andeq	r3, r1, r8, ror #2
   13068:	andeq	r3, r1, r4, ror r0
   1306c:	andeq	r3, r1, r4, ror r0
   13070:	andeq	r3, r1, r4, ror r0
   13074:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13078:	cmp	r3, #0
   1307c:	bne	13e14 <__assert_fail@plt+0x2ee8>
   13080:	ldr	r3, [fp, #-16]
   13084:	add	r3, r3, #2
   13088:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1308c:	add	r3, r2, r3
   13090:	ldrb	r3, [r3]
   13094:	strb	r3, [fp, #-38]	; 0xffffffda
   13098:	ldr	r3, [fp, #-16]
   1309c:	add	r3, r3, #2
   130a0:	str	r3, [fp, #-16]
   130a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   130a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130ac:	cmp	r2, r3
   130b0:	bcs	130c8 <__assert_fail@plt+0x219c>
   130b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130bc:	add	r3, r2, r3
   130c0:	mov	r2, #63	; 0x3f
   130c4:	strb	r2, [r3]
   130c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130cc:	add	r3, r3, #1
   130d0:	str	r3, [fp, #-20]	; 0xffffffec
   130d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   130d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130dc:	cmp	r2, r3
   130e0:	bcs	130f8 <__assert_fail@plt+0x21cc>
   130e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130ec:	add	r3, r2, r3
   130f0:	mov	r2, #34	; 0x22
   130f4:	strb	r2, [r3]
   130f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130fc:	add	r3, r3, #1
   13100:	str	r3, [fp, #-20]	; 0xffffffec
   13104:	ldr	r2, [fp, #-20]	; 0xffffffec
   13108:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1310c:	cmp	r2, r3
   13110:	bcs	13128 <__assert_fail@plt+0x21fc>
   13114:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1311c:	add	r3, r2, r3
   13120:	mov	r2, #34	; 0x22
   13124:	strb	r2, [r3]
   13128:	ldr	r3, [fp, #-20]	; 0xffffffec
   1312c:	add	r3, r3, #1
   13130:	str	r3, [fp, #-20]	; 0xffffffec
   13134:	ldr	r2, [fp, #-20]	; 0xffffffec
   13138:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1313c:	cmp	r2, r3
   13140:	bcs	13158 <__assert_fail@plt+0x222c>
   13144:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13148:	ldr	r3, [fp, #-20]	; 0xffffffec
   1314c:	add	r3, r2, r3
   13150:	mov	r2, #63	; 0x3f
   13154:	strb	r2, [r3]
   13158:	ldr	r3, [fp, #-20]	; 0xffffffec
   1315c:	add	r3, r3, #1
   13160:	str	r3, [fp, #-20]	; 0xffffffec
   13164:	b	1316c <__assert_fail@plt+0x2240>
   13168:	nop	{0}
   1316c:	b	13178 <__assert_fail@plt+0x224c>
   13170:	nop	{0}
   13174:	b	139c8 <__assert_fail@plt+0x2a9c>
   13178:	nop	{0}
   1317c:	b	139c8 <__assert_fail@plt+0x2a9c>
   13180:	mov	r3, #97	; 0x61
   13184:	strb	r3, [fp, #-39]	; 0xffffffd9
   13188:	b	1323c <__assert_fail@plt+0x2310>
   1318c:	mov	r3, #98	; 0x62
   13190:	strb	r3, [fp, #-39]	; 0xffffffd9
   13194:	b	1323c <__assert_fail@plt+0x2310>
   13198:	mov	r3, #102	; 0x66
   1319c:	strb	r3, [fp, #-39]	; 0xffffffd9
   131a0:	b	1323c <__assert_fail@plt+0x2310>
   131a4:	mov	r3, #110	; 0x6e
   131a8:	strb	r3, [fp, #-39]	; 0xffffffd9
   131ac:	b	13220 <__assert_fail@plt+0x22f4>
   131b0:	mov	r3, #114	; 0x72
   131b4:	strb	r3, [fp, #-39]	; 0xffffffd9
   131b8:	b	13220 <__assert_fail@plt+0x22f4>
   131bc:	mov	r3, #116	; 0x74
   131c0:	strb	r3, [fp, #-39]	; 0xffffffd9
   131c4:	b	13220 <__assert_fail@plt+0x22f4>
   131c8:	mov	r3, #118	; 0x76
   131cc:	strb	r3, [fp, #-39]	; 0xffffffd9
   131d0:	b	1323c <__assert_fail@plt+0x2310>
   131d4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   131d8:	strb	r3, [fp, #-39]	; 0xffffffd9
   131dc:	ldr	r3, [fp, #4]
   131e0:	cmp	r3, #2
   131e4:	bne	131f8 <__assert_fail@plt+0x22cc>
   131e8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   131ec:	cmp	r3, #0
   131f0:	beq	13b54 <__assert_fail@plt+0x2c28>
   131f4:	b	13e40 <__assert_fail@plt+0x2f14>
   131f8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   131fc:	cmp	r3, #0
   13200:	beq	1321c <__assert_fail@plt+0x22f0>
   13204:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13208:	cmp	r3, #0
   1320c:	beq	1321c <__assert_fail@plt+0x22f0>
   13210:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13214:	cmp	r3, #0
   13218:	bne	13b5c <__assert_fail@plt+0x2c30>
   1321c:	nop	{0}
   13220:	ldr	r3, [fp, #4]
   13224:	cmp	r3, #2
   13228:	bne	13238 <__assert_fail@plt+0x230c>
   1322c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13230:	cmp	r3, #0
   13234:	bne	13e1c <__assert_fail@plt+0x2ef0>
   13238:	nop	{0}
   1323c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13240:	cmp	r3, #0
   13244:	beq	1399c <__assert_fail@plt+0x2a70>
   13248:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   1324c:	strb	r3, [fp, #-38]	; 0xffffffda
   13250:	b	13a54 <__assert_fail@plt+0x2b28>
   13254:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13258:	cmn	r3, #1
   1325c:	bne	13280 <__assert_fail@plt+0x2354>
   13260:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13264:	add	r3, r3, #1
   13268:	ldrb	r3, [r3]
   1326c:	cmp	r3, #0
   13270:	movne	r3, #1
   13274:	moveq	r3, #0
   13278:	uxtb	r3, r3
   1327c:	b	13294 <__assert_fail@plt+0x2368>
   13280:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13284:	cmp	r3, #1
   13288:	movne	r3, #1
   1328c:	moveq	r3, #0
   13290:	uxtb	r3, r3
   13294:	cmp	r3, #0
   13298:	bne	139a4 <__assert_fail@plt+0x2a78>
   1329c:	ldr	r3, [fp, #-16]
   132a0:	cmp	r3, #0
   132a4:	bne	139ac <__assert_fail@plt+0x2a80>
   132a8:	mov	r3, #1
   132ac:	strb	r3, [fp, #-42]	; 0xffffffd6
   132b0:	ldr	r3, [fp, #4]
   132b4:	cmp	r3, #2
   132b8:	bne	139b4 <__assert_fail@plt+0x2a88>
   132bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   132c0:	cmp	r3, #0
   132c4:	beq	139b4 <__assert_fail@plt+0x2a88>
   132c8:	b	13e40 <__assert_fail@plt+0x2f14>
   132cc:	mov	r3, #1
   132d0:	strb	r3, [fp, #-36]	; 0xffffffdc
   132d4:	mov	r3, #1
   132d8:	strb	r3, [fp, #-42]	; 0xffffffd6
   132dc:	ldr	r3, [fp, #4]
   132e0:	cmp	r3, #2
   132e4:	bne	139bc <__assert_fail@plt+0x2a90>
   132e8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   132ec:	cmp	r3, #0
   132f0:	bne	13e24 <__assert_fail@plt+0x2ef8>
   132f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132f8:	cmp	r3, #0
   132fc:	beq	1331c <__assert_fail@plt+0x23f0>
   13300:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13304:	cmp	r3, #0
   13308:	bne	1331c <__assert_fail@plt+0x23f0>
   1330c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13310:	str	r3, [fp, #-24]	; 0xffffffe8
   13314:	mov	r3, #0
   13318:	str	r3, [fp, #-92]	; 0xffffffa4
   1331c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13320:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13324:	cmp	r2, r3
   13328:	bcs	13340 <__assert_fail@plt+0x2414>
   1332c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13330:	ldr	r3, [fp, #-20]	; 0xffffffec
   13334:	add	r3, r2, r3
   13338:	mov	r2, #39	; 0x27
   1333c:	strb	r2, [r3]
   13340:	ldr	r3, [fp, #-20]	; 0xffffffec
   13344:	add	r3, r3, #1
   13348:	str	r3, [fp, #-20]	; 0xffffffec
   1334c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13350:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13354:	cmp	r2, r3
   13358:	bcs	13370 <__assert_fail@plt+0x2444>
   1335c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13360:	ldr	r3, [fp, #-20]	; 0xffffffec
   13364:	add	r3, r2, r3
   13368:	mov	r2, #92	; 0x5c
   1336c:	strb	r2, [r3]
   13370:	ldr	r3, [fp, #-20]	; 0xffffffec
   13374:	add	r3, r3, #1
   13378:	str	r3, [fp, #-20]	; 0xffffffec
   1337c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13380:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13384:	cmp	r2, r3
   13388:	bcs	133a0 <__assert_fail@plt+0x2474>
   1338c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13390:	ldr	r3, [fp, #-20]	; 0xffffffec
   13394:	add	r3, r2, r3
   13398:	mov	r2, #39	; 0x27
   1339c:	strb	r2, [r3]
   133a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   133a4:	add	r3, r3, #1
   133a8:	str	r3, [fp, #-20]	; 0xffffffec
   133ac:	mov	r3, #0
   133b0:	strb	r3, [fp, #-35]	; 0xffffffdd
   133b4:	b	139bc <__assert_fail@plt+0x2a90>
   133b8:	mov	r3, #1
   133bc:	strb	r3, [fp, #-42]	; 0xffffffd6
   133c0:	b	139c8 <__assert_fail@plt+0x2a9c>
   133c4:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   133c8:	cmp	r3, #0
   133cc:	beq	1340c <__assert_fail@plt+0x24e0>
   133d0:	mov	r3, #1
   133d4:	str	r3, [fp, #-48]	; 0xffffffd0
   133d8:	bl	10e24 <__ctype_b_loc@plt>
   133dc:	mov	r3, r0
   133e0:	ldr	r2, [r3]
   133e4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   133e8:	lsl	r3, r3, #1
   133ec:	add	r3, r2, r3
   133f0:	ldrh	r3, [r3]
   133f4:	and	r3, r3, #16384	; 0x4000
   133f8:	cmp	r3, #0
   133fc:	movne	r3, #1
   13400:	moveq	r3, #0
   13404:	strb	r3, [fp, #-49]	; 0xffffffcf
   13408:	b	13658 <__assert_fail@plt+0x272c>
   1340c:	sub	r3, fp, #76	; 0x4c
   13410:	mov	r2, #8
   13414:	mov	r1, #0
   13418:	mov	r0, r3
   1341c:	bl	10e84 <memset@plt>
   13420:	mov	r3, #0
   13424:	str	r3, [fp, #-48]	; 0xffffffd0
   13428:	mov	r3, #1
   1342c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13430:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13434:	cmn	r3, #1
   13438:	bne	13448 <__assert_fail@plt+0x251c>
   1343c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13440:	bl	10e48 <strlen@plt>
   13444:	str	r0, [fp, #-100]	; 0xffffff9c
   13448:	ldr	r2, [fp, #-16]
   1344c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13450:	add	r3, r2, r3
   13454:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13458:	add	r1, r2, r3
   1345c:	ldr	r2, [fp, #-16]
   13460:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13464:	add	r3, r2, r3
   13468:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1346c:	sub	r2, r2, r3
   13470:	sub	r3, fp, #76	; 0x4c
   13474:	sub	r0, fp, #80	; 0x50
   13478:	bl	16de0 <__assert_fail@plt+0x5eb4>
   1347c:	str	r0, [fp, #-64]	; 0xffffffc0
   13480:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13484:	cmp	r3, #0
   13488:	beq	1364c <__assert_fail@plt+0x2720>
   1348c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13490:	cmn	r3, #1
   13494:	bne	134a4 <__assert_fail@plt+0x2578>
   13498:	mov	r3, #0
   1349c:	strb	r3, [fp, #-49]	; 0xffffffcf
   134a0:	b	13658 <__assert_fail@plt+0x272c>
   134a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   134a8:	cmn	r3, #2
   134ac:	bne	13504 <__assert_fail@plt+0x25d8>
   134b0:	mov	r3, #0
   134b4:	strb	r3, [fp, #-49]	; 0xffffffcf
   134b8:	b	134c8 <__assert_fail@plt+0x259c>
   134bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   134c0:	add	r3, r3, #1
   134c4:	str	r3, [fp, #-48]	; 0xffffffd0
   134c8:	ldr	r2, [fp, #-16]
   134cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   134d0:	add	r3, r2, r3
   134d4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   134d8:	cmp	r2, r3
   134dc:	bls	13654 <__assert_fail@plt+0x2728>
   134e0:	ldr	r2, [fp, #-16]
   134e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   134e8:	add	r3, r2, r3
   134ec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   134f0:	add	r3, r2, r3
   134f4:	ldrb	r3, [r3]
   134f8:	cmp	r3, #0
   134fc:	bne	134bc <__assert_fail@plt+0x2590>
   13500:	b	13654 <__assert_fail@plt+0x2728>
   13504:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13508:	cmp	r3, #0
   1350c:	beq	13600 <__assert_fail@plt+0x26d4>
   13510:	ldr	r3, [fp, #4]
   13514:	cmp	r3, #2
   13518:	bne	13600 <__assert_fail@plt+0x26d4>
   1351c:	mov	r3, #1
   13520:	str	r3, [fp, #-56]	; 0xffffffc8
   13524:	b	135f0 <__assert_fail@plt+0x26c4>
   13528:	ldr	r2, [fp, #-16]
   1352c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13530:	add	r2, r2, r3
   13534:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13538:	add	r3, r2, r3
   1353c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13540:	add	r3, r2, r3
   13544:	ldrb	r3, [r3]
   13548:	sub	r3, r3, #91	; 0x5b
   1354c:	cmp	r3, #33	; 0x21
   13550:	ldrls	pc, [pc, r3, lsl #2]
   13554:	b	135e0 <__assert_fail@plt+0x26b4>
   13558:	andeq	r3, r1, r0, asr #28
   1355c:	andeq	r3, r1, r0, asr #28
   13560:	andeq	r3, r1, r0, ror #11
   13564:	andeq	r3, r1, r0, asr #28
   13568:	andeq	r3, r1, r0, ror #11
   1356c:	andeq	r3, r1, r0, asr #28
   13570:	andeq	r3, r1, r0, ror #11
   13574:	andeq	r3, r1, r0, ror #11
   13578:	andeq	r3, r1, r0, ror #11
   1357c:	andeq	r3, r1, r0, ror #11
   13580:	andeq	r3, r1, r0, ror #11
   13584:	andeq	r3, r1, r0, ror #11
   13588:	andeq	r3, r1, r0, ror #11
   1358c:	andeq	r3, r1, r0, ror #11
   13590:	andeq	r3, r1, r0, ror #11
   13594:	andeq	r3, r1, r0, ror #11
   13598:	andeq	r3, r1, r0, ror #11
   1359c:	andeq	r3, r1, r0, ror #11
   135a0:	andeq	r3, r1, r0, ror #11
   135a4:	andeq	r3, r1, r0, ror #11
   135a8:	andeq	r3, r1, r0, ror #11
   135ac:	andeq	r3, r1, r0, ror #11
   135b0:	andeq	r3, r1, r0, ror #11
   135b4:	andeq	r3, r1, r0, ror #11
   135b8:	andeq	r3, r1, r0, ror #11
   135bc:	andeq	r3, r1, r0, ror #11
   135c0:	andeq	r3, r1, r0, ror #11
   135c4:	andeq	r3, r1, r0, ror #11
   135c8:	andeq	r3, r1, r0, ror #11
   135cc:	andeq	r3, r1, r0, ror #11
   135d0:	andeq	r3, r1, r0, ror #11
   135d4:	andeq	r3, r1, r0, ror #11
   135d8:	andeq	r3, r1, r0, ror #11
   135dc:	andeq	r3, r1, r0, asr #28
   135e0:	nop	{0}
   135e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   135e8:	add	r3, r3, #1
   135ec:	str	r3, [fp, #-56]	; 0xffffffc8
   135f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   135f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   135f8:	cmp	r2, r3
   135fc:	bcc	13528 <__assert_fail@plt+0x25fc>
   13600:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13604:	mov	r0, r3
   13608:	bl	10d88 <iswprint@plt>
   1360c:	mov	r3, r0
   13610:	cmp	r3, #0
   13614:	bne	13620 <__assert_fail@plt+0x26f4>
   13618:	mov	r3, #0
   1361c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13620:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13624:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13628:	add	r3, r2, r3
   1362c:	str	r3, [fp, #-48]	; 0xffffffd0
   13630:	sub	r3, fp, #76	; 0x4c
   13634:	mov	r0, r3
   13638:	bl	10d34 <mbsinit@plt>
   1363c:	mov	r3, r0
   13640:	cmp	r3, #0
   13644:	beq	13448 <__assert_fail@plt+0x251c>
   13648:	b	13658 <__assert_fail@plt+0x272c>
   1364c:	nop	{0}
   13650:	b	13658 <__assert_fail@plt+0x272c>
   13654:	nop	{0}
   13658:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1365c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13660:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13664:	cmp	r3, #1
   13668:	bhi	1368c <__assert_fail@plt+0x2760>
   1366c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13670:	cmp	r3, #0
   13674:	beq	139c4 <__assert_fail@plt+0x2a98>
   13678:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1367c:	eor	r3, r3, #1
   13680:	uxtb	r3, r3
   13684:	cmp	r3, #0
   13688:	beq	139c4 <__assert_fail@plt+0x2a98>
   1368c:	ldr	r2, [fp, #-16]
   13690:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13694:	add	r3, r2, r3
   13698:	str	r3, [fp, #-68]	; 0xffffffbc
   1369c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   136a0:	cmp	r3, #0
   136a4:	beq	13858 <__assert_fail@plt+0x292c>
   136a8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   136ac:	eor	r3, r3, #1
   136b0:	uxtb	r3, r3
   136b4:	cmp	r3, #0
   136b8:	beq	13858 <__assert_fail@plt+0x292c>
   136bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   136c0:	cmp	r3, #0
   136c4:	bne	13e2c <__assert_fail@plt+0x2f00>
   136c8:	mov	r3, #1
   136cc:	strb	r3, [fp, #-41]	; 0xffffffd7
   136d0:	ldr	r3, [fp, #4]
   136d4:	cmp	r3, #2
   136d8:	bne	13788 <__assert_fail@plt+0x285c>
   136dc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   136e0:	eor	r3, r3, #1
   136e4:	uxtb	r3, r3
   136e8:	cmp	r3, #0
   136ec:	beq	13788 <__assert_fail@plt+0x285c>
   136f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   136f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136f8:	cmp	r2, r3
   136fc:	bcs	13714 <__assert_fail@plt+0x27e8>
   13700:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13704:	ldr	r3, [fp, #-20]	; 0xffffffec
   13708:	add	r3, r2, r3
   1370c:	mov	r2, #39	; 0x27
   13710:	strb	r2, [r3]
   13714:	ldr	r3, [fp, #-20]	; 0xffffffec
   13718:	add	r3, r3, #1
   1371c:	str	r3, [fp, #-20]	; 0xffffffec
   13720:	ldr	r2, [fp, #-20]	; 0xffffffec
   13724:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13728:	cmp	r2, r3
   1372c:	bcs	13744 <__assert_fail@plt+0x2818>
   13730:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13734:	ldr	r3, [fp, #-20]	; 0xffffffec
   13738:	add	r3, r2, r3
   1373c:	mov	r2, #36	; 0x24
   13740:	strb	r2, [r3]
   13744:	ldr	r3, [fp, #-20]	; 0xffffffec
   13748:	add	r3, r3, #1
   1374c:	str	r3, [fp, #-20]	; 0xffffffec
   13750:	ldr	r2, [fp, #-20]	; 0xffffffec
   13754:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13758:	cmp	r2, r3
   1375c:	bcs	13774 <__assert_fail@plt+0x2848>
   13760:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13764:	ldr	r3, [fp, #-20]	; 0xffffffec
   13768:	add	r3, r2, r3
   1376c:	mov	r2, #39	; 0x27
   13770:	strb	r2, [r3]
   13774:	ldr	r3, [fp, #-20]	; 0xffffffec
   13778:	add	r3, r3, #1
   1377c:	str	r3, [fp, #-20]	; 0xffffffec
   13780:	mov	r3, #1
   13784:	strb	r3, [fp, #-35]	; 0xffffffdd
   13788:	ldr	r2, [fp, #-20]	; 0xffffffec
   1378c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13790:	cmp	r2, r3
   13794:	bcs	137ac <__assert_fail@plt+0x2880>
   13798:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1379c:	ldr	r3, [fp, #-20]	; 0xffffffec
   137a0:	add	r3, r2, r3
   137a4:	mov	r2, #92	; 0x5c
   137a8:	strb	r2, [r3]
   137ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   137b0:	add	r3, r3, #1
   137b4:	str	r3, [fp, #-20]	; 0xffffffec
   137b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   137bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   137c0:	cmp	r2, r3
   137c4:	bcs	137ec <__assert_fail@plt+0x28c0>
   137c8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   137cc:	lsr	r3, r3, #6
   137d0:	uxtb	r2, r3
   137d4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   137d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   137dc:	add	r3, r1, r3
   137e0:	add	r2, r2, #48	; 0x30
   137e4:	uxtb	r2, r2
   137e8:	strb	r2, [r3]
   137ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   137f0:	add	r3, r3, #1
   137f4:	str	r3, [fp, #-20]	; 0xffffffec
   137f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   137fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13800:	cmp	r2, r3
   13804:	bcs	13834 <__assert_fail@plt+0x2908>
   13808:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1380c:	lsr	r3, r3, #3
   13810:	uxtb	r3, r3
   13814:	and	r3, r3, #7
   13818:	uxtb	r2, r3
   1381c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13820:	ldr	r3, [fp, #-20]	; 0xffffffec
   13824:	add	r3, r1, r3
   13828:	add	r2, r2, #48	; 0x30
   1382c:	uxtb	r2, r2
   13830:	strb	r2, [r3]
   13834:	ldr	r3, [fp, #-20]	; 0xffffffec
   13838:	add	r3, r3, #1
   1383c:	str	r3, [fp, #-20]	; 0xffffffec
   13840:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13844:	and	r3, r3, #7
   13848:	uxtb	r3, r3
   1384c:	add	r3, r3, #48	; 0x30
   13850:	strb	r3, [fp, #-38]	; 0xffffffda
   13854:	b	1389c <__assert_fail@plt+0x2970>
   13858:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1385c:	cmp	r3, #0
   13860:	beq	1389c <__assert_fail@plt+0x2970>
   13864:	ldr	r2, [fp, #-20]	; 0xffffffec
   13868:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1386c:	cmp	r2, r3
   13870:	bcs	13888 <__assert_fail@plt+0x295c>
   13874:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13878:	ldr	r3, [fp, #-20]	; 0xffffffec
   1387c:	add	r3, r2, r3
   13880:	mov	r2, #92	; 0x5c
   13884:	strb	r2, [r3]
   13888:	ldr	r3, [fp, #-20]	; 0xffffffec
   1388c:	add	r3, r3, #1
   13890:	str	r3, [fp, #-20]	; 0xffffffec
   13894:	mov	r3, #0
   13898:	strb	r3, [fp, #-40]	; 0xffffffd8
   1389c:	ldr	r3, [fp, #-16]
   138a0:	add	r3, r3, #1
   138a4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   138a8:	cmp	r2, r3
   138ac:	bls	1398c <__assert_fail@plt+0x2a60>
   138b0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   138b4:	cmp	r3, #0
   138b8:	beq	13938 <__assert_fail@plt+0x2a0c>
   138bc:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   138c0:	eor	r3, r3, #1
   138c4:	uxtb	r3, r3
   138c8:	cmp	r3, #0
   138cc:	beq	13938 <__assert_fail@plt+0x2a0c>
   138d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   138d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   138d8:	cmp	r2, r3
   138dc:	bcs	138f4 <__assert_fail@plt+0x29c8>
   138e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   138e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   138e8:	add	r3, r2, r3
   138ec:	mov	r2, #39	; 0x27
   138f0:	strb	r2, [r3]
   138f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   138f8:	add	r3, r3, #1
   138fc:	str	r3, [fp, #-20]	; 0xffffffec
   13900:	ldr	r2, [fp, #-20]	; 0xffffffec
   13904:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13908:	cmp	r2, r3
   1390c:	bcs	13924 <__assert_fail@plt+0x29f8>
   13910:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13914:	ldr	r3, [fp, #-20]	; 0xffffffec
   13918:	add	r3, r2, r3
   1391c:	mov	r2, #39	; 0x27
   13920:	strb	r2, [r3]
   13924:	ldr	r3, [fp, #-20]	; 0xffffffec
   13928:	add	r3, r3, #1
   1392c:	str	r3, [fp, #-20]	; 0xffffffec
   13930:	mov	r3, #0
   13934:	strb	r3, [fp, #-35]	; 0xffffffdd
   13938:	ldr	r2, [fp, #-20]	; 0xffffffec
   1393c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13940:	cmp	r2, r3
   13944:	bcs	1395c <__assert_fail@plt+0x2a30>
   13948:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1394c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13950:	add	r3, r2, r3
   13954:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13958:	strb	r2, [r3]
   1395c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13960:	add	r3, r3, #1
   13964:	str	r3, [fp, #-20]	; 0xffffffec
   13968:	ldr	r3, [fp, #-16]
   1396c:	add	r3, r3, #1
   13970:	str	r3, [fp, #-16]
   13974:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13978:	ldr	r3, [fp, #-16]
   1397c:	add	r3, r2, r3
   13980:	ldrb	r3, [r3]
   13984:	strb	r3, [fp, #-38]	; 0xffffffda
   13988:	b	1369c <__assert_fail@plt+0x2770>
   1398c:	nop	{0}
   13990:	b	13b68 <__assert_fail@plt+0x2c3c>
   13994:	nop	{0}
   13998:	b	139c8 <__assert_fail@plt+0x2a9c>
   1399c:	nop	{0}
   139a0:	b	139c8 <__assert_fail@plt+0x2a9c>
   139a4:	nop	{0}
   139a8:	b	139c8 <__assert_fail@plt+0x2a9c>
   139ac:	nop	{0}
   139b0:	b	139c8 <__assert_fail@plt+0x2a9c>
   139b4:	nop	{0}
   139b8:	b	139c8 <__assert_fail@plt+0x2a9c>
   139bc:	nop	{0}
   139c0:	b	139c8 <__assert_fail@plt+0x2a9c>
   139c4:	nop	{0}
   139c8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   139cc:	eor	r3, r3, #1
   139d0:	uxtb	r3, r3
   139d4:	cmp	r3, #0
   139d8:	bne	139e8 <__assert_fail@plt+0x2abc>
   139dc:	ldr	r3, [fp, #4]
   139e0:	cmp	r3, #2
   139e4:	bne	139fc <__assert_fail@plt+0x2ad0>
   139e8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   139ec:	eor	r3, r3, #1
   139f0:	uxtb	r3, r3
   139f4:	cmp	r3, #0
   139f8:	bne	13a3c <__assert_fail@plt+0x2b10>
   139fc:	ldr	r3, [fp, #12]
   13a00:	cmp	r3, #0
   13a04:	beq	13a3c <__assert_fail@plt+0x2b10>
   13a08:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13a0c:	lsr	r3, r3, #5
   13a10:	uxtb	r3, r3
   13a14:	lsl	r3, r3, #2
   13a18:	ldr	r2, [fp, #12]
   13a1c:	add	r3, r2, r3
   13a20:	ldr	r2, [r3]
   13a24:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13a28:	and	r3, r3, #31
   13a2c:	lsr	r3, r2, r3
   13a30:	and	r3, r3, #1
   13a34:	cmp	r3, #0
   13a38:	bne	13a50 <__assert_fail@plt+0x2b24>
   13a3c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13a40:	eor	r3, r3, #1
   13a44:	uxtb	r3, r3
   13a48:	cmp	r3, #0
   13a4c:	bne	13b64 <__assert_fail@plt+0x2c38>
   13a50:	nop	{0}
   13a54:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13a58:	cmp	r3, #0
   13a5c:	bne	13e34 <__assert_fail@plt+0x2f08>
   13a60:	mov	r3, #1
   13a64:	strb	r3, [fp, #-41]	; 0xffffffd7
   13a68:	ldr	r3, [fp, #4]
   13a6c:	cmp	r3, #2
   13a70:	bne	13b20 <__assert_fail@plt+0x2bf4>
   13a74:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13a78:	eor	r3, r3, #1
   13a7c:	uxtb	r3, r3
   13a80:	cmp	r3, #0
   13a84:	beq	13b20 <__assert_fail@plt+0x2bf4>
   13a88:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a90:	cmp	r2, r3
   13a94:	bcs	13aac <__assert_fail@plt+0x2b80>
   13a98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13aa0:	add	r3, r2, r3
   13aa4:	mov	r2, #39	; 0x27
   13aa8:	strb	r2, [r3]
   13aac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ab0:	add	r3, r3, #1
   13ab4:	str	r3, [fp, #-20]	; 0xffffffec
   13ab8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13abc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ac0:	cmp	r2, r3
   13ac4:	bcs	13adc <__assert_fail@plt+0x2bb0>
   13ac8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13acc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ad0:	add	r3, r2, r3
   13ad4:	mov	r2, #36	; 0x24
   13ad8:	strb	r2, [r3]
   13adc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ae0:	add	r3, r3, #1
   13ae4:	str	r3, [fp, #-20]	; 0xffffffec
   13ae8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13aec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13af0:	cmp	r2, r3
   13af4:	bcs	13b0c <__assert_fail@plt+0x2be0>
   13af8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13afc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b00:	add	r3, r2, r3
   13b04:	mov	r2, #39	; 0x27
   13b08:	strb	r2, [r3]
   13b0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b10:	add	r3, r3, #1
   13b14:	str	r3, [fp, #-20]	; 0xffffffec
   13b18:	mov	r3, #1
   13b1c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13b20:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b28:	cmp	r2, r3
   13b2c:	bcs	13b44 <__assert_fail@plt+0x2c18>
   13b30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b38:	add	r3, r2, r3
   13b3c:	mov	r2, #92	; 0x5c
   13b40:	strb	r2, [r3]
   13b44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b48:	add	r3, r3, #1
   13b4c:	str	r3, [fp, #-20]	; 0xffffffec
   13b50:	b	13b68 <__assert_fail@plt+0x2c3c>
   13b54:	nop	{0}
   13b58:	b	13b68 <__assert_fail@plt+0x2c3c>
   13b5c:	nop	{0}
   13b60:	b	13b68 <__assert_fail@plt+0x2c3c>
   13b64:	nop	{0}
   13b68:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13b6c:	cmp	r3, #0
   13b70:	beq	13bf0 <__assert_fail@plt+0x2cc4>
   13b74:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13b78:	eor	r3, r3, #1
   13b7c:	uxtb	r3, r3
   13b80:	cmp	r3, #0
   13b84:	beq	13bf0 <__assert_fail@plt+0x2cc4>
   13b88:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b90:	cmp	r2, r3
   13b94:	bcs	13bac <__assert_fail@plt+0x2c80>
   13b98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ba0:	add	r3, r2, r3
   13ba4:	mov	r2, #39	; 0x27
   13ba8:	strb	r2, [r3]
   13bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bb0:	add	r3, r3, #1
   13bb4:	str	r3, [fp, #-20]	; 0xffffffec
   13bb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bc0:	cmp	r2, r3
   13bc4:	bcs	13bdc <__assert_fail@plt+0x2cb0>
   13bc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bd0:	add	r3, r2, r3
   13bd4:	mov	r2, #39	; 0x27
   13bd8:	strb	r2, [r3]
   13bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13be0:	add	r3, r3, #1
   13be4:	str	r3, [fp, #-20]	; 0xffffffec
   13be8:	mov	r3, #0
   13bec:	strb	r3, [fp, #-35]	; 0xffffffdd
   13bf0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bf4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bf8:	cmp	r2, r3
   13bfc:	bcs	13c14 <__assert_fail@plt+0x2ce8>
   13c00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c08:	add	r3, r2, r3
   13c0c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13c10:	strb	r2, [r3]
   13c14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c18:	add	r3, r3, #1
   13c1c:	str	r3, [fp, #-20]	; 0xffffffec
   13c20:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   13c24:	eor	r3, r3, #1
   13c28:	uxtb	r3, r3
   13c2c:	cmp	r3, #0
   13c30:	beq	13c3c <__assert_fail@plt+0x2d10>
   13c34:	mov	r3, #0
   13c38:	strb	r3, [fp, #-37]	; 0xffffffdb
   13c3c:	ldr	r3, [fp, #-16]
   13c40:	add	r3, r3, #1
   13c44:	str	r3, [fp, #-16]
   13c48:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13c4c:	cmn	r3, #1
   13c50:	bne	13c78 <__assert_fail@plt+0x2d4c>
   13c54:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13c58:	ldr	r3, [fp, #-16]
   13c5c:	add	r3, r2, r3
   13c60:	ldrb	r3, [r3]
   13c64:	cmp	r3, #0
   13c68:	movne	r3, #1
   13c6c:	moveq	r3, #0
   13c70:	uxtb	r3, r3
   13c74:	b	13c90 <__assert_fail@plt+0x2d64>
   13c78:	ldr	r2, [fp, #-16]
   13c7c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13c80:	cmp	r2, r3
   13c84:	movne	r3, #1
   13c88:	moveq	r3, #0
   13c8c:	uxtb	r3, r3
   13c90:	cmp	r3, #0
   13c94:	bne	12ab0 <__assert_fail@plt+0x1b84>
   13c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c9c:	cmp	r3, #0
   13ca0:	bne	13cbc <__assert_fail@plt+0x2d90>
   13ca4:	ldr	r3, [fp, #4]
   13ca8:	cmp	r3, #2
   13cac:	bne	13cbc <__assert_fail@plt+0x2d90>
   13cb0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13cb4:	cmp	r3, #0
   13cb8:	bne	13e3c <__assert_fail@plt+0x2f10>
   13cbc:	ldr	r3, [fp, #4]
   13cc0:	cmp	r3, #2
   13cc4:	bne	13d64 <__assert_fail@plt+0x2e38>
   13cc8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ccc:	eor	r3, r3, #1
   13cd0:	uxtb	r3, r3
   13cd4:	cmp	r3, #0
   13cd8:	beq	13d64 <__assert_fail@plt+0x2e38>
   13cdc:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   13ce0:	cmp	r3, #0
   13ce4:	beq	13d64 <__assert_fail@plt+0x2e38>
   13ce8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13cec:	cmp	r3, #0
   13cf0:	beq	13d38 <__assert_fail@plt+0x2e0c>
   13cf4:	ldr	r3, [fp, #20]
   13cf8:	str	r3, [sp, #16]
   13cfc:	ldr	r3, [fp, #16]
   13d00:	str	r3, [sp, #12]
   13d04:	ldr	r3, [fp, #12]
   13d08:	str	r3, [sp, #8]
   13d0c:	ldr	r3, [fp, #8]
   13d10:	str	r3, [sp, #4]
   13d14:	mov	r3, #5
   13d18:	str	r3, [sp]
   13d1c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13d20:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13d24:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13d28:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13d2c:	bl	127e8 <__assert_fail@plt+0x18bc>
   13d30:	mov	r3, r0
   13d34:	b	13ea4 <__assert_fail@plt+0x2f78>
   13d38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d3c:	cmp	r3, #0
   13d40:	bne	13d64 <__assert_fail@plt+0x2e38>
   13d44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d48:	cmp	r3, #0
   13d4c:	beq	13d64 <__assert_fail@plt+0x2e38>
   13d50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d54:	str	r3, [fp, #-92]	; 0xffffffa4
   13d58:	mov	r3, #0
   13d5c:	str	r3, [fp, #-20]	; 0xffffffec
   13d60:	b	1287c <__assert_fail@plt+0x1950>
   13d64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13d68:	cmp	r3, #0
   13d6c:	beq	13dd8 <__assert_fail@plt+0x2eac>
   13d70:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13d74:	eor	r3, r3, #1
   13d78:	uxtb	r3, r3
   13d7c:	cmp	r3, #0
   13d80:	beq	13dd8 <__assert_fail@plt+0x2eac>
   13d84:	b	13dc8 <__assert_fail@plt+0x2e9c>
   13d88:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d90:	cmp	r2, r3
   13d94:	bcs	13db0 <__assert_fail@plt+0x2e84>
   13d98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13da0:	add	r3, r2, r3
   13da4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13da8:	ldrb	r2, [r2]
   13dac:	strb	r2, [r3]
   13db0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13db4:	add	r3, r3, #1
   13db8:	str	r3, [fp, #-20]	; 0xffffffec
   13dbc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13dc0:	add	r3, r3, #1
   13dc4:	str	r3, [fp, #-28]	; 0xffffffe4
   13dc8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13dcc:	ldrb	r3, [r3]
   13dd0:	cmp	r3, #0
   13dd4:	bne	13d88 <__assert_fail@plt+0x2e5c>
   13dd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ddc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13de0:	cmp	r2, r3
   13de4:	bcs	13dfc <__assert_fail@plt+0x2ed0>
   13de8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13dec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13df0:	add	r3, r2, r3
   13df4:	mov	r2, #0
   13df8:	strb	r2, [r3]
   13dfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e00:	b	13ea4 <__assert_fail@plt+0x2f78>
   13e04:	nop	{0}
   13e08:	b	13e40 <__assert_fail@plt+0x2f14>
   13e0c:	nop	{0}
   13e10:	b	13e40 <__assert_fail@plt+0x2f14>
   13e14:	nop	{0}
   13e18:	b	13e40 <__assert_fail@plt+0x2f14>
   13e1c:	nop	{0}
   13e20:	b	13e40 <__assert_fail@plt+0x2f14>
   13e24:	nop	{0}
   13e28:	b	13e40 <__assert_fail@plt+0x2f14>
   13e2c:	nop	{0}
   13e30:	b	13e40 <__assert_fail@plt+0x2f14>
   13e34:	nop	{0}
   13e38:	b	13e40 <__assert_fail@plt+0x2f14>
   13e3c:	nop	{0}
   13e40:	ldr	r3, [fp, #4]
   13e44:	cmp	r3, #2
   13e48:	bne	13e60 <__assert_fail@plt+0x2f34>
   13e4c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13e50:	cmp	r3, #0
   13e54:	beq	13e60 <__assert_fail@plt+0x2f34>
   13e58:	mov	r3, #4
   13e5c:	str	r3, [fp, #4]
   13e60:	ldr	r3, [fp, #8]
   13e64:	bic	r3, r3, #2
   13e68:	ldr	r2, [fp, #20]
   13e6c:	str	r2, [sp, #16]
   13e70:	ldr	r2, [fp, #16]
   13e74:	str	r2, [sp, #12]
   13e78:	mov	r2, #0
   13e7c:	str	r2, [sp, #8]
   13e80:	str	r3, [sp, #4]
   13e84:	ldr	r3, [fp, #4]
   13e88:	str	r3, [sp]
   13e8c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13e90:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13e94:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13e98:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13e9c:	bl	127e8 <__assert_fail@plt+0x18bc>
   13ea0:	mov	r3, r0
   13ea4:	mov	r0, r3
   13ea8:	sub	sp, fp, #8
   13eac:	ldr	r4, [sp]
   13eb0:	ldr	fp, [sp, #4]
   13eb4:	add	sp, sp, #8
   13eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ebc:	str	fp, [sp, #-8]!
   13ec0:	str	lr, [sp, #4]
   13ec4:	add	fp, sp, #4
   13ec8:	sub	sp, sp, #56	; 0x38
   13ecc:	str	r0, [fp, #-24]	; 0xffffffe8
   13ed0:	str	r1, [fp, #-28]	; 0xffffffe4
   13ed4:	str	r2, [fp, #-32]	; 0xffffffe0
   13ed8:	str	r3, [fp, #-36]	; 0xffffffdc
   13edc:	ldr	r3, [fp, #4]
   13ee0:	cmp	r3, #0
   13ee4:	beq	13ef0 <__assert_fail@plt+0x2fc4>
   13ee8:	ldr	r3, [fp, #4]
   13eec:	b	13ef8 <__assert_fail@plt+0x2fcc>
   13ef0:	movw	r3, #37240	; 0x9178
   13ef4:	movt	r3, #2
   13ef8:	str	r3, [fp, #-8]
   13efc:	bl	10e6c <__errno_location@plt>
   13f00:	mov	r3, r0
   13f04:	ldr	r3, [r3]
   13f08:	str	r3, [fp, #-12]
   13f0c:	ldr	r3, [fp, #-8]
   13f10:	ldr	r3, [r3]
   13f14:	ldr	r2, [fp, #-8]
   13f18:	ldr	r2, [r2, #4]
   13f1c:	ldr	r1, [fp, #-8]
   13f20:	add	r1, r1, #8
   13f24:	ldr	r0, [fp, #-8]
   13f28:	ldr	r0, [r0, #40]	; 0x28
   13f2c:	ldr	ip, [fp, #-8]
   13f30:	ldr	ip, [ip, #44]	; 0x2c
   13f34:	str	ip, [sp, #16]
   13f38:	str	r0, [sp, #12]
   13f3c:	str	r1, [sp, #8]
   13f40:	str	r2, [sp, #4]
   13f44:	str	r3, [sp]
   13f48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13f4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f50:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13f54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f58:	bl	127e8 <__assert_fail@plt+0x18bc>
   13f5c:	str	r0, [fp, #-16]
   13f60:	bl	10e6c <__errno_location@plt>
   13f64:	mov	r2, r0
   13f68:	ldr	r3, [fp, #-12]
   13f6c:	str	r3, [r2]
   13f70:	ldr	r3, [fp, #-16]
   13f74:	mov	r0, r3
   13f78:	sub	sp, fp, #4
   13f7c:	ldr	fp, [sp]
   13f80:	add	sp, sp, #4
   13f84:	pop	{pc}		; (ldr pc, [sp], #4)
   13f88:	str	fp, [sp, #-8]!
   13f8c:	str	lr, [sp, #4]
   13f90:	add	fp, sp, #4
   13f94:	sub	sp, sp, #16
   13f98:	str	r0, [fp, #-8]
   13f9c:	str	r1, [fp, #-12]
   13fa0:	str	r2, [fp, #-16]
   13fa4:	ldr	r3, [fp, #-16]
   13fa8:	mov	r2, #0
   13fac:	ldr	r1, [fp, #-12]
   13fb0:	ldr	r0, [fp, #-8]
   13fb4:	bl	13fd0 <__assert_fail@plt+0x30a4>
   13fb8:	mov	r3, r0
   13fbc:	mov	r0, r3
   13fc0:	sub	sp, fp, #4
   13fc4:	ldr	fp, [sp]
   13fc8:	add	sp, sp, #4
   13fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   13fd0:	str	fp, [sp, #-8]!
   13fd4:	str	lr, [sp, #4]
   13fd8:	add	fp, sp, #4
   13fdc:	sub	sp, sp, #64	; 0x40
   13fe0:	str	r0, [fp, #-32]	; 0xffffffe0
   13fe4:	str	r1, [fp, #-36]	; 0xffffffdc
   13fe8:	str	r2, [fp, #-40]	; 0xffffffd8
   13fec:	str	r3, [fp, #-44]	; 0xffffffd4
   13ff0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13ff4:	cmp	r3, #0
   13ff8:	beq	14004 <__assert_fail@plt+0x30d8>
   13ffc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14000:	b	1400c <__assert_fail@plt+0x30e0>
   14004:	movw	r3, #37240	; 0x9178
   14008:	movt	r3, #2
   1400c:	str	r3, [fp, #-8]
   14010:	bl	10e6c <__errno_location@plt>
   14014:	mov	r3, r0
   14018:	ldr	r3, [r3]
   1401c:	str	r3, [fp, #-12]
   14020:	ldr	r3, [fp, #-8]
   14024:	ldr	r3, [r3, #4]
   14028:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1402c:	cmp	r2, #0
   14030:	moveq	r2, #1
   14034:	movne	r2, #0
   14038:	uxtb	r2, r2
   1403c:	orr	r3, r3, r2
   14040:	str	r3, [fp, #-16]
   14044:	ldr	r3, [fp, #-8]
   14048:	ldr	r3, [r3]
   1404c:	ldr	r2, [fp, #-8]
   14050:	add	r2, r2, #8
   14054:	ldr	r1, [fp, #-8]
   14058:	ldr	r1, [r1, #40]	; 0x28
   1405c:	ldr	r0, [fp, #-8]
   14060:	ldr	r0, [r0, #44]	; 0x2c
   14064:	str	r0, [sp, #16]
   14068:	str	r1, [sp, #12]
   1406c:	str	r2, [sp, #8]
   14070:	ldr	r2, [fp, #-16]
   14074:	str	r2, [sp, #4]
   14078:	str	r3, [sp]
   1407c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14080:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14084:	mov	r1, #0
   14088:	mov	r0, #0
   1408c:	bl	127e8 <__assert_fail@plt+0x18bc>
   14090:	mov	r3, r0
   14094:	add	r3, r3, #1
   14098:	str	r3, [fp, #-20]	; 0xffffffec
   1409c:	ldr	r0, [fp, #-20]	; 0xffffffec
   140a0:	bl	154e0 <__assert_fail@plt+0x45b4>
   140a4:	mov	r3, r0
   140a8:	str	r3, [fp, #-24]	; 0xffffffe8
   140ac:	ldr	r3, [fp, #-8]
   140b0:	ldr	r3, [r3]
   140b4:	ldr	r2, [fp, #-8]
   140b8:	add	r2, r2, #8
   140bc:	ldr	r1, [fp, #-8]
   140c0:	ldr	r1, [r1, #40]	; 0x28
   140c4:	ldr	r0, [fp, #-8]
   140c8:	ldr	r0, [r0, #44]	; 0x2c
   140cc:	str	r0, [sp, #16]
   140d0:	str	r1, [sp, #12]
   140d4:	str	r2, [sp, #8]
   140d8:	ldr	r2, [fp, #-16]
   140dc:	str	r2, [sp, #4]
   140e0:	str	r3, [sp]
   140e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   140e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   140ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   140f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   140f4:	bl	127e8 <__assert_fail@plt+0x18bc>
   140f8:	bl	10e6c <__errno_location@plt>
   140fc:	mov	r2, r0
   14100:	ldr	r3, [fp, #-12]
   14104:	str	r3, [r2]
   14108:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1410c:	cmp	r3, #0
   14110:	beq	14124 <__assert_fail@plt+0x31f8>
   14114:	ldr	r3, [fp, #-20]	; 0xffffffec
   14118:	sub	r2, r3, #1
   1411c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14120:	str	r2, [r3]
   14124:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14128:	mov	r0, r3
   1412c:	sub	sp, fp, #4
   14130:	ldr	fp, [sp]
   14134:	add	sp, sp, #4
   14138:	pop	{pc}		; (ldr pc, [sp], #4)
   1413c:	str	fp, [sp, #-8]!
   14140:	str	lr, [sp, #4]
   14144:	add	fp, sp, #4
   14148:	sub	sp, sp, #8
   1414c:	movw	r3, #37120	; 0x9100
   14150:	movt	r3, #2
   14154:	ldr	r3, [r3]
   14158:	str	r3, [fp, #-12]
   1415c:	mov	r3, #1
   14160:	str	r3, [fp, #-8]
   14164:	b	14190 <__assert_fail@plt+0x3264>
   14168:	ldr	r3, [fp, #-8]
   1416c:	lsl	r3, r3, #3
   14170:	ldr	r2, [fp, #-12]
   14174:	add	r3, r2, r3
   14178:	ldr	r3, [r3, #4]
   1417c:	mov	r0, r3
   14180:	bl	16b58 <__assert_fail@plt+0x5c2c>
   14184:	ldr	r3, [fp, #-8]
   14188:	add	r3, r3, #1
   1418c:	str	r3, [fp, #-8]
   14190:	movw	r3, #37108	; 0x90f4
   14194:	movt	r3, #2
   14198:	ldr	r3, [r3]
   1419c:	ldr	r2, [fp, #-8]
   141a0:	cmp	r2, r3
   141a4:	blt	14168 <__assert_fail@plt+0x323c>
   141a8:	ldr	r3, [fp, #-12]
   141ac:	ldr	r2, [r3, #4]
   141b0:	movw	r3, #37288	; 0x91a8
   141b4:	movt	r3, #2
   141b8:	cmp	r2, r3
   141bc:	beq	141f4 <__assert_fail@plt+0x32c8>
   141c0:	ldr	r3, [fp, #-12]
   141c4:	ldr	r3, [r3, #4]
   141c8:	mov	r0, r3
   141cc:	bl	16b58 <__assert_fail@plt+0x5c2c>
   141d0:	movw	r3, #37112	; 0x90f8
   141d4:	movt	r3, #2
   141d8:	mov	r2, #256	; 0x100
   141dc:	str	r2, [r3]
   141e0:	movw	r3, #37112	; 0x90f8
   141e4:	movt	r3, #2
   141e8:	movw	r2, #37288	; 0x91a8
   141ec:	movt	r2, #2
   141f0:	str	r2, [r3, #4]
   141f4:	ldr	r2, [fp, #-12]
   141f8:	movw	r3, #37112	; 0x90f8
   141fc:	movt	r3, #2
   14200:	cmp	r2, r3
   14204:	beq	14224 <__assert_fail@plt+0x32f8>
   14208:	ldr	r0, [fp, #-12]
   1420c:	bl	16b58 <__assert_fail@plt+0x5c2c>
   14210:	movw	r3, #37120	; 0x9100
   14214:	movt	r3, #2
   14218:	movw	r2, #37112	; 0x90f8
   1421c:	movt	r2, #2
   14220:	str	r2, [r3]
   14224:	movw	r3, #37108	; 0x90f4
   14228:	movt	r3, #2
   1422c:	mov	r2, #1
   14230:	str	r2, [r3]
   14234:	nop	{0}
   14238:	sub	sp, fp, #4
   1423c:	ldr	fp, [sp]
   14240:	add	sp, sp, #4
   14244:	pop	{pc}		; (ldr pc, [sp], #4)
   14248:	str	fp, [sp, #-8]!
   1424c:	str	lr, [sp, #4]
   14250:	add	fp, sp, #4
   14254:	sub	sp, sp, #80	; 0x50
   14258:	str	r0, [fp, #-48]	; 0xffffffd0
   1425c:	str	r1, [fp, #-52]	; 0xffffffcc
   14260:	str	r2, [fp, #-56]	; 0xffffffc8
   14264:	str	r3, [fp, #-60]	; 0xffffffc4
   14268:	bl	10e6c <__errno_location@plt>
   1426c:	mov	r3, r0
   14270:	ldr	r3, [r3]
   14274:	str	r3, [fp, #-16]
   14278:	movw	r3, #37120	; 0x9100
   1427c:	movt	r3, #2
   14280:	ldr	r3, [r3]
   14284:	str	r3, [fp, #-8]
   14288:	mvn	r3, #-2147483648	; 0x80000000
   1428c:	str	r3, [fp, #-20]	; 0xffffffec
   14290:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14294:	cmp	r3, #0
   14298:	blt	142ac <__assert_fail@plt+0x3380>
   1429c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   142a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   142a4:	cmp	r2, r3
   142a8:	blt	142b0 <__assert_fail@plt+0x3384>
   142ac:	bl	10f14 <abort@plt>
   142b0:	movw	r3, #37108	; 0x90f4
   142b4:	movt	r3, #2
   142b8:	ldr	r3, [r3]
   142bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   142c0:	cmp	r2, r3
   142c4:	blt	143bc <__assert_fail@plt+0x3490>
   142c8:	ldr	r2, [fp, #-8]
   142cc:	movw	r3, #37112	; 0x90f8
   142d0:	movt	r3, #2
   142d4:	cmp	r2, r3
   142d8:	moveq	r3, #1
   142dc:	movne	r3, #0
   142e0:	strb	r3, [fp, #-21]	; 0xffffffeb
   142e4:	movw	r3, #37108	; 0x90f4
   142e8:	movt	r3, #2
   142ec:	ldr	r3, [r3]
   142f0:	str	r3, [fp, #-40]	; 0xffffffd8
   142f4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   142f8:	cmp	r3, #0
   142fc:	beq	14308 <__assert_fail@plt+0x33dc>
   14300:	mov	r0, #0
   14304:	b	1430c <__assert_fail@plt+0x33e0>
   14308:	ldr	r0, [fp, #-8]
   1430c:	movw	r3, #37108	; 0x90f4
   14310:	movt	r3, #2
   14314:	ldr	r3, [r3]
   14318:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1431c:	sub	r3, r2, r3
   14320:	add	r2, r3, #1
   14324:	sub	r1, fp, #40	; 0x28
   14328:	mov	r3, #8
   1432c:	str	r3, [sp]
   14330:	ldr	r3, [fp, #-20]	; 0xffffffec
   14334:	bl	15840 <__assert_fail@plt+0x4914>
   14338:	str	r0, [fp, #-8]
   1433c:	movw	r3, #37120	; 0x9100
   14340:	movt	r3, #2
   14344:	ldr	r2, [fp, #-8]
   14348:	str	r2, [r3]
   1434c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14350:	cmp	r3, #0
   14354:	beq	14370 <__assert_fail@plt+0x3444>
   14358:	ldr	r2, [fp, #-8]
   1435c:	movw	r3, #37112	; 0x90f8
   14360:	movt	r3, #2
   14364:	mov	r1, r2
   14368:	ldrd	r2, [r3]
   1436c:	strd	r2, [r1]
   14370:	movw	r3, #37108	; 0x90f4
   14374:	movt	r3, #2
   14378:	ldr	r3, [r3]
   1437c:	lsl	r3, r3, #3
   14380:	ldr	r2, [fp, #-8]
   14384:	add	r0, r2, r3
   14388:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1438c:	movw	r3, #37108	; 0x90f4
   14390:	movt	r3, #2
   14394:	ldr	r3, [r3]
   14398:	sub	r3, r2, r3
   1439c:	lsl	r3, r3, #3
   143a0:	mov	r2, r3
   143a4:	mov	r1, #0
   143a8:	bl	10e84 <memset@plt>
   143ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   143b0:	movw	r3, #37108	; 0x90f4
   143b4:	movt	r3, #2
   143b8:	str	r2, [r3]
   143bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143c0:	lsl	r3, r3, #3
   143c4:	ldr	r2, [fp, #-8]
   143c8:	add	r3, r2, r3
   143cc:	ldr	r3, [r3]
   143d0:	str	r3, [fp, #-28]	; 0xffffffe4
   143d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143d8:	lsl	r3, r3, #3
   143dc:	ldr	r2, [fp, #-8]
   143e0:	add	r3, r2, r3
   143e4:	ldr	r3, [r3, #4]
   143e8:	str	r3, [fp, #-12]
   143ec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   143f0:	ldr	r3, [r3, #4]
   143f4:	orr	r3, r3, #1
   143f8:	str	r3, [fp, #-32]	; 0xffffffe0
   143fc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14400:	ldr	r3, [r3]
   14404:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14408:	add	r2, r2, #8
   1440c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14410:	ldr	r1, [r1, #40]	; 0x28
   14414:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14418:	ldr	r0, [r0, #44]	; 0x2c
   1441c:	str	r0, [sp, #16]
   14420:	str	r1, [sp, #12]
   14424:	str	r2, [sp, #8]
   14428:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1442c:	str	r2, [sp, #4]
   14430:	str	r3, [sp]
   14434:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14438:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1443c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14440:	ldr	r0, [fp, #-12]
   14444:	bl	127e8 <__assert_fail@plt+0x18bc>
   14448:	str	r0, [fp, #-36]	; 0xffffffdc
   1444c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14450:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14454:	cmp	r2, r3
   14458:	bhi	14510 <__assert_fail@plt+0x35e4>
   1445c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14460:	add	r3, r3, #1
   14464:	str	r3, [fp, #-28]	; 0xffffffe4
   14468:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1446c:	lsl	r3, r3, #3
   14470:	ldr	r2, [fp, #-8]
   14474:	add	r3, r2, r3
   14478:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1447c:	str	r2, [r3]
   14480:	ldr	r2, [fp, #-12]
   14484:	movw	r3, #37288	; 0x91a8
   14488:	movt	r3, #2
   1448c:	cmp	r2, r3
   14490:	beq	1449c <__assert_fail@plt+0x3570>
   14494:	ldr	r0, [fp, #-12]
   14498:	bl	16b58 <__assert_fail@plt+0x5c2c>
   1449c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   144a0:	bl	154e0 <__assert_fail@plt+0x45b4>
   144a4:	mov	r3, r0
   144a8:	str	r3, [fp, #-12]
   144ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   144b0:	lsl	r3, r3, #3
   144b4:	ldr	r2, [fp, #-8]
   144b8:	add	r3, r2, r3
   144bc:	ldr	r2, [fp, #-12]
   144c0:	str	r2, [r3, #4]
   144c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   144c8:	ldr	r3, [r3]
   144cc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   144d0:	add	r2, r2, #8
   144d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   144d8:	ldr	r1, [r1, #40]	; 0x28
   144dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   144e0:	ldr	r0, [r0, #44]	; 0x2c
   144e4:	str	r0, [sp, #16]
   144e8:	str	r1, [sp, #12]
   144ec:	str	r2, [sp, #8]
   144f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   144f4:	str	r2, [sp, #4]
   144f8:	str	r3, [sp]
   144fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14500:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14504:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14508:	ldr	r0, [fp, #-12]
   1450c:	bl	127e8 <__assert_fail@plt+0x18bc>
   14510:	bl	10e6c <__errno_location@plt>
   14514:	mov	r2, r0
   14518:	ldr	r3, [fp, #-16]
   1451c:	str	r3, [r2]
   14520:	ldr	r3, [fp, #-12]
   14524:	mov	r0, r3
   14528:	sub	sp, fp, #4
   1452c:	ldr	fp, [sp]
   14530:	add	sp, sp, #4
   14534:	pop	{pc}		; (ldr pc, [sp], #4)
   14538:	str	fp, [sp, #-8]!
   1453c:	str	lr, [sp, #4]
   14540:	add	fp, sp, #4
   14544:	sub	sp, sp, #8
   14548:	str	r0, [fp, #-8]
   1454c:	str	r1, [fp, #-12]
   14550:	movw	r3, #37240	; 0x9178
   14554:	movt	r3, #2
   14558:	mvn	r2, #0
   1455c:	ldr	r1, [fp, #-12]
   14560:	ldr	r0, [fp, #-8]
   14564:	bl	14248 <__assert_fail@plt+0x331c>
   14568:	mov	r3, r0
   1456c:	mov	r0, r3
   14570:	sub	sp, fp, #4
   14574:	ldr	fp, [sp]
   14578:	add	sp, sp, #4
   1457c:	pop	{pc}		; (ldr pc, [sp], #4)
   14580:	str	fp, [sp, #-8]!
   14584:	str	lr, [sp, #4]
   14588:	add	fp, sp, #4
   1458c:	sub	sp, sp, #16
   14590:	str	r0, [fp, #-8]
   14594:	str	r1, [fp, #-12]
   14598:	str	r2, [fp, #-16]
   1459c:	movw	r3, #37240	; 0x9178
   145a0:	movt	r3, #2
   145a4:	ldr	r2, [fp, #-16]
   145a8:	ldr	r1, [fp, #-12]
   145ac:	ldr	r0, [fp, #-8]
   145b0:	bl	14248 <__assert_fail@plt+0x331c>
   145b4:	mov	r3, r0
   145b8:	mov	r0, r3
   145bc:	sub	sp, fp, #4
   145c0:	ldr	fp, [sp]
   145c4:	add	sp, sp, #4
   145c8:	pop	{pc}		; (ldr pc, [sp], #4)
   145cc:	str	fp, [sp, #-8]!
   145d0:	str	lr, [sp, #4]
   145d4:	add	fp, sp, #4
   145d8:	sub	sp, sp, #8
   145dc:	str	r0, [fp, #-8]
   145e0:	ldr	r1, [fp, #-8]
   145e4:	mov	r0, #0
   145e8:	bl	14538 <__assert_fail@plt+0x360c>
   145ec:	mov	r3, r0
   145f0:	mov	r0, r3
   145f4:	sub	sp, fp, #4
   145f8:	ldr	fp, [sp]
   145fc:	add	sp, sp, #4
   14600:	pop	{pc}		; (ldr pc, [sp], #4)
   14604:	str	fp, [sp, #-8]!
   14608:	str	lr, [sp, #4]
   1460c:	add	fp, sp, #4
   14610:	sub	sp, sp, #8
   14614:	str	r0, [fp, #-8]
   14618:	str	r1, [fp, #-12]
   1461c:	ldr	r2, [fp, #-12]
   14620:	ldr	r1, [fp, #-8]
   14624:	mov	r0, #0
   14628:	bl	14580 <__assert_fail@plt+0x3654>
   1462c:	mov	r3, r0
   14630:	mov	r0, r3
   14634:	sub	sp, fp, #4
   14638:	ldr	fp, [sp]
   1463c:	add	sp, sp, #4
   14640:	pop	{pc}		; (ldr pc, [sp], #4)
   14644:	str	fp, [sp, #-8]!
   14648:	str	lr, [sp, #4]
   1464c:	add	fp, sp, #4
   14650:	sub	sp, sp, #64	; 0x40
   14654:	str	r0, [fp, #-56]	; 0xffffffc8
   14658:	str	r1, [fp, #-60]	; 0xffffffc4
   1465c:	str	r2, [fp, #-64]	; 0xffffffc0
   14660:	sub	r3, fp, #52	; 0x34
   14664:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14668:	mov	r0, r3
   1466c:	bl	12644 <__assert_fail@plt+0x1718>
   14670:	sub	r3, fp, #52	; 0x34
   14674:	mvn	r2, #0
   14678:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1467c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14680:	bl	14248 <__assert_fail@plt+0x331c>
   14684:	mov	r3, r0
   14688:	mov	r0, r3
   1468c:	sub	sp, fp, #4
   14690:	ldr	fp, [sp]
   14694:	add	sp, sp, #4
   14698:	pop	{pc}		; (ldr pc, [sp], #4)
   1469c:	str	fp, [sp, #-8]!
   146a0:	str	lr, [sp, #4]
   146a4:	add	fp, sp, #4
   146a8:	sub	sp, sp, #64	; 0x40
   146ac:	str	r0, [fp, #-56]	; 0xffffffc8
   146b0:	str	r1, [fp, #-60]	; 0xffffffc4
   146b4:	str	r2, [fp, #-64]	; 0xffffffc0
   146b8:	str	r3, [fp, #-68]	; 0xffffffbc
   146bc:	sub	r3, fp, #52	; 0x34
   146c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   146c4:	mov	r0, r3
   146c8:	bl	12644 <__assert_fail@plt+0x1718>
   146cc:	sub	r3, fp, #52	; 0x34
   146d0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   146d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   146d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   146dc:	bl	14248 <__assert_fail@plt+0x331c>
   146e0:	mov	r3, r0
   146e4:	mov	r0, r3
   146e8:	sub	sp, fp, #4
   146ec:	ldr	fp, [sp]
   146f0:	add	sp, sp, #4
   146f4:	pop	{pc}		; (ldr pc, [sp], #4)
   146f8:	str	fp, [sp, #-8]!
   146fc:	str	lr, [sp, #4]
   14700:	add	fp, sp, #4
   14704:	sub	sp, sp, #8
   14708:	str	r0, [fp, #-8]
   1470c:	str	r1, [fp, #-12]
   14710:	ldr	r2, [fp, #-12]
   14714:	ldr	r1, [fp, #-8]
   14718:	mov	r0, #0
   1471c:	bl	14644 <__assert_fail@plt+0x3718>
   14720:	mov	r3, r0
   14724:	mov	r0, r3
   14728:	sub	sp, fp, #4
   1472c:	ldr	fp, [sp]
   14730:	add	sp, sp, #4
   14734:	pop	{pc}		; (ldr pc, [sp], #4)
   14738:	str	fp, [sp, #-8]!
   1473c:	str	lr, [sp, #4]
   14740:	add	fp, sp, #4
   14744:	sub	sp, sp, #16
   14748:	str	r0, [fp, #-8]
   1474c:	str	r1, [fp, #-12]
   14750:	str	r2, [fp, #-16]
   14754:	ldr	r3, [fp, #-16]
   14758:	ldr	r2, [fp, #-12]
   1475c:	ldr	r1, [fp, #-8]
   14760:	mov	r0, #0
   14764:	bl	1469c <__assert_fail@plt+0x3770>
   14768:	mov	r3, r0
   1476c:	mov	r0, r3
   14770:	sub	sp, fp, #4
   14774:	ldr	fp, [sp]
   14778:	add	sp, sp, #4
   1477c:	pop	{pc}		; (ldr pc, [sp], #4)
   14780:	str	fp, [sp, #-8]!
   14784:	str	lr, [sp, #4]
   14788:	add	fp, sp, #4
   1478c:	sub	sp, sp, #64	; 0x40
   14790:	str	r0, [fp, #-56]	; 0xffffffc8
   14794:	str	r1, [fp, #-60]	; 0xffffffc4
   14798:	mov	r3, r2
   1479c:	strb	r3, [fp, #-61]	; 0xffffffc3
   147a0:	movw	r2, #37240	; 0x9178
   147a4:	movt	r2, #2
   147a8:	sub	r3, fp, #52	; 0x34
   147ac:	ldrd	r0, [r2]
   147b0:	strd	r0, [r3]
   147b4:	ldrd	r0, [r2, #8]
   147b8:	strd	r0, [r3, #8]
   147bc:	ldrd	r0, [r2, #16]
   147c0:	strd	r0, [r3, #16]
   147c4:	ldrd	r0, [r2, #24]
   147c8:	strd	r0, [r3, #24]
   147cc:	ldrd	r0, [r2, #32]
   147d0:	strd	r0, [r3, #32]
   147d4:	ldrd	r0, [r2, #40]	; 0x28
   147d8:	strd	r0, [r3, #40]	; 0x28
   147dc:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   147e0:	sub	r3, fp, #52	; 0x34
   147e4:	mov	r2, #1
   147e8:	mov	r0, r3
   147ec:	bl	124a4 <__assert_fail@plt+0x1578>
   147f0:	sub	r3, fp, #52	; 0x34
   147f4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   147f8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   147fc:	mov	r0, #0
   14800:	bl	14248 <__assert_fail@plt+0x331c>
   14804:	mov	r3, r0
   14808:	mov	r0, r3
   1480c:	sub	sp, fp, #4
   14810:	ldr	fp, [sp]
   14814:	add	sp, sp, #4
   14818:	pop	{pc}		; (ldr pc, [sp], #4)
   1481c:	str	fp, [sp, #-8]!
   14820:	str	lr, [sp, #4]
   14824:	add	fp, sp, #4
   14828:	sub	sp, sp, #8
   1482c:	str	r0, [fp, #-8]
   14830:	mov	r3, r1
   14834:	strb	r3, [fp, #-9]
   14838:	ldrb	r3, [fp, #-9]
   1483c:	mov	r2, r3
   14840:	mvn	r1, #0
   14844:	ldr	r0, [fp, #-8]
   14848:	bl	14780 <__assert_fail@plt+0x3854>
   1484c:	mov	r3, r0
   14850:	mov	r0, r3
   14854:	sub	sp, fp, #4
   14858:	ldr	fp, [sp]
   1485c:	add	sp, sp, #4
   14860:	pop	{pc}		; (ldr pc, [sp], #4)
   14864:	str	fp, [sp, #-8]!
   14868:	str	lr, [sp, #4]
   1486c:	add	fp, sp, #4
   14870:	sub	sp, sp, #8
   14874:	str	r0, [fp, #-8]
   14878:	mov	r1, #58	; 0x3a
   1487c:	ldr	r0, [fp, #-8]
   14880:	bl	1481c <__assert_fail@plt+0x38f0>
   14884:	mov	r3, r0
   14888:	mov	r0, r3
   1488c:	sub	sp, fp, #4
   14890:	ldr	fp, [sp]
   14894:	add	sp, sp, #4
   14898:	pop	{pc}		; (ldr pc, [sp], #4)
   1489c:	str	fp, [sp, #-8]!
   148a0:	str	lr, [sp, #4]
   148a4:	add	fp, sp, #4
   148a8:	sub	sp, sp, #8
   148ac:	str	r0, [fp, #-8]
   148b0:	str	r1, [fp, #-12]
   148b4:	mov	r2, #58	; 0x3a
   148b8:	ldr	r1, [fp, #-12]
   148bc:	ldr	r0, [fp, #-8]
   148c0:	bl	14780 <__assert_fail@plt+0x3854>
   148c4:	mov	r3, r0
   148c8:	mov	r0, r3
   148cc:	sub	sp, fp, #4
   148d0:	ldr	fp, [sp]
   148d4:	add	sp, sp, #4
   148d8:	pop	{pc}		; (ldr pc, [sp], #4)
   148dc:	str	fp, [sp, #-8]!
   148e0:	str	lr, [sp, #4]
   148e4:	add	fp, sp, #4
   148e8:	sub	sp, sp, #112	; 0x70
   148ec:	str	r0, [fp, #-56]	; 0xffffffc8
   148f0:	str	r1, [fp, #-60]	; 0xffffffc4
   148f4:	str	r2, [fp, #-64]	; 0xffffffc0
   148f8:	sub	r3, fp, #116	; 0x74
   148fc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14900:	mov	r0, r3
   14904:	bl	12644 <__assert_fail@plt+0x1718>
   14908:	sub	r3, fp, #52	; 0x34
   1490c:	sub	r2, fp, #116	; 0x74
   14910:	ldrd	r0, [r2]
   14914:	strd	r0, [r3]
   14918:	ldrd	r0, [r2, #8]
   1491c:	strd	r0, [r3, #8]
   14920:	ldrd	r0, [r2, #16]
   14924:	strd	r0, [r3, #16]
   14928:	ldrd	r0, [r2, #24]
   1492c:	strd	r0, [r3, #24]
   14930:	ldrd	r0, [r2, #32]
   14934:	strd	r0, [r3, #32]
   14938:	ldrd	r0, [r2, #40]	; 0x28
   1493c:	strd	r0, [r3, #40]	; 0x28
   14940:	sub	r3, fp, #52	; 0x34
   14944:	mov	r2, #1
   14948:	mov	r1, #58	; 0x3a
   1494c:	mov	r0, r3
   14950:	bl	124a4 <__assert_fail@plt+0x1578>
   14954:	sub	r3, fp, #52	; 0x34
   14958:	mvn	r2, #0
   1495c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14960:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14964:	bl	14248 <__assert_fail@plt+0x331c>
   14968:	mov	r3, r0
   1496c:	mov	r0, r3
   14970:	sub	sp, fp, #4
   14974:	ldr	fp, [sp]
   14978:	add	sp, sp, #4
   1497c:	pop	{pc}		; (ldr pc, [sp], #4)
   14980:	str	fp, [sp, #-8]!
   14984:	str	lr, [sp, #4]
   14988:	add	fp, sp, #4
   1498c:	sub	sp, sp, #24
   14990:	str	r0, [fp, #-8]
   14994:	str	r1, [fp, #-12]
   14998:	str	r2, [fp, #-16]
   1499c:	str	r3, [fp, #-20]	; 0xffffffec
   149a0:	mvn	r3, #0
   149a4:	str	r3, [sp]
   149a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   149ac:	ldr	r2, [fp, #-16]
   149b0:	ldr	r1, [fp, #-12]
   149b4:	ldr	r0, [fp, #-8]
   149b8:	bl	149d4 <__assert_fail@plt+0x3aa8>
   149bc:	mov	r3, r0
   149c0:	mov	r0, r3
   149c4:	sub	sp, fp, #4
   149c8:	ldr	fp, [sp]
   149cc:	add	sp, sp, #4
   149d0:	pop	{pc}		; (ldr pc, [sp], #4)
   149d4:	str	fp, [sp, #-8]!
   149d8:	str	lr, [sp, #4]
   149dc:	add	fp, sp, #4
   149e0:	sub	sp, sp, #64	; 0x40
   149e4:	str	r0, [fp, #-56]	; 0xffffffc8
   149e8:	str	r1, [fp, #-60]	; 0xffffffc4
   149ec:	str	r2, [fp, #-64]	; 0xffffffc0
   149f0:	str	r3, [fp, #-68]	; 0xffffffbc
   149f4:	movw	r2, #37240	; 0x9178
   149f8:	movt	r2, #2
   149fc:	sub	r3, fp, #52	; 0x34
   14a00:	ldrd	r0, [r2]
   14a04:	strd	r0, [r3]
   14a08:	ldrd	r0, [r2, #8]
   14a0c:	strd	r0, [r3, #8]
   14a10:	ldrd	r0, [r2, #16]
   14a14:	strd	r0, [r3, #16]
   14a18:	ldrd	r0, [r2, #24]
   14a1c:	strd	r0, [r3, #24]
   14a20:	ldrd	r0, [r2, #32]
   14a24:	strd	r0, [r3, #32]
   14a28:	ldrd	r0, [r2, #40]	; 0x28
   14a2c:	strd	r0, [r3, #40]	; 0x28
   14a30:	sub	r3, fp, #52	; 0x34
   14a34:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14a38:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14a3c:	mov	r0, r3
   14a40:	bl	125bc <__assert_fail@plt+0x1690>
   14a44:	sub	r3, fp, #52	; 0x34
   14a48:	ldr	r2, [fp, #4]
   14a4c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14a50:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14a54:	bl	14248 <__assert_fail@plt+0x331c>
   14a58:	mov	r3, r0
   14a5c:	mov	r0, r3
   14a60:	sub	sp, fp, #4
   14a64:	ldr	fp, [sp]
   14a68:	add	sp, sp, #4
   14a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a70:	str	fp, [sp, #-8]!
   14a74:	str	lr, [sp, #4]
   14a78:	add	fp, sp, #4
   14a7c:	sub	sp, sp, #16
   14a80:	str	r0, [fp, #-8]
   14a84:	str	r1, [fp, #-12]
   14a88:	str	r2, [fp, #-16]
   14a8c:	ldr	r3, [fp, #-16]
   14a90:	ldr	r2, [fp, #-12]
   14a94:	ldr	r1, [fp, #-8]
   14a98:	mov	r0, #0
   14a9c:	bl	14980 <__assert_fail@plt+0x3a54>
   14aa0:	mov	r3, r0
   14aa4:	mov	r0, r3
   14aa8:	sub	sp, fp, #4
   14aac:	ldr	fp, [sp]
   14ab0:	add	sp, sp, #4
   14ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab8:	str	fp, [sp, #-8]!
   14abc:	str	lr, [sp, #4]
   14ac0:	add	fp, sp, #4
   14ac4:	sub	sp, sp, #24
   14ac8:	str	r0, [fp, #-8]
   14acc:	str	r1, [fp, #-12]
   14ad0:	str	r2, [fp, #-16]
   14ad4:	str	r3, [fp, #-20]	; 0xffffffec
   14ad8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14adc:	str	r3, [sp]
   14ae0:	ldr	r3, [fp, #-16]
   14ae4:	ldr	r2, [fp, #-12]
   14ae8:	ldr	r1, [fp, #-8]
   14aec:	mov	r0, #0
   14af0:	bl	149d4 <__assert_fail@plt+0x3aa8>
   14af4:	mov	r3, r0
   14af8:	mov	r0, r3
   14afc:	sub	sp, fp, #4
   14b00:	ldr	fp, [sp]
   14b04:	add	sp, sp, #4
   14b08:	pop	{pc}		; (ldr pc, [sp], #4)
   14b0c:	str	fp, [sp, #-8]!
   14b10:	str	lr, [sp, #4]
   14b14:	add	fp, sp, #4
   14b18:	sub	sp, sp, #16
   14b1c:	str	r0, [fp, #-8]
   14b20:	str	r1, [fp, #-12]
   14b24:	str	r2, [fp, #-16]
   14b28:	movw	r3, #37124	; 0x9104
   14b2c:	movt	r3, #2
   14b30:	ldr	r2, [fp, #-16]
   14b34:	ldr	r1, [fp, #-12]
   14b38:	ldr	r0, [fp, #-8]
   14b3c:	bl	14248 <__assert_fail@plt+0x331c>
   14b40:	mov	r3, r0
   14b44:	mov	r0, r3
   14b48:	sub	sp, fp, #4
   14b4c:	ldr	fp, [sp]
   14b50:	add	sp, sp, #4
   14b54:	pop	{pc}		; (ldr pc, [sp], #4)
   14b58:	str	fp, [sp, #-8]!
   14b5c:	str	lr, [sp, #4]
   14b60:	add	fp, sp, #4
   14b64:	sub	sp, sp, #8
   14b68:	str	r0, [fp, #-8]
   14b6c:	str	r1, [fp, #-12]
   14b70:	ldr	r2, [fp, #-12]
   14b74:	ldr	r1, [fp, #-8]
   14b78:	mov	r0, #0
   14b7c:	bl	14b0c <__assert_fail@plt+0x3be0>
   14b80:	mov	r3, r0
   14b84:	mov	r0, r3
   14b88:	sub	sp, fp, #4
   14b8c:	ldr	fp, [sp]
   14b90:	add	sp, sp, #4
   14b94:	pop	{pc}		; (ldr pc, [sp], #4)
   14b98:	str	fp, [sp, #-8]!
   14b9c:	str	lr, [sp, #4]
   14ba0:	add	fp, sp, #4
   14ba4:	sub	sp, sp, #8
   14ba8:	str	r0, [fp, #-8]
   14bac:	str	r1, [fp, #-12]
   14bb0:	mvn	r2, #0
   14bb4:	ldr	r1, [fp, #-12]
   14bb8:	ldr	r0, [fp, #-8]
   14bbc:	bl	14b0c <__assert_fail@plt+0x3be0>
   14bc0:	mov	r3, r0
   14bc4:	mov	r0, r3
   14bc8:	sub	sp, fp, #4
   14bcc:	ldr	fp, [sp]
   14bd0:	add	sp, sp, #4
   14bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd8:	str	fp, [sp, #-8]!
   14bdc:	str	lr, [sp, #4]
   14be0:	add	fp, sp, #4
   14be4:	sub	sp, sp, #8
   14be8:	str	r0, [fp, #-8]
   14bec:	ldr	r1, [fp, #-8]
   14bf0:	mov	r0, #0
   14bf4:	bl	14b98 <__assert_fail@plt+0x3c6c>
   14bf8:	mov	r3, r0
   14bfc:	mov	r0, r3
   14c00:	sub	sp, fp, #4
   14c04:	ldr	fp, [sp]
   14c08:	add	sp, sp, #4
   14c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14c14:	strd	r6, [sp, #8]
   14c18:	str	fp, [sp, #16]
   14c1c:	str	lr, [sp, #20]
   14c20:	add	fp, sp, #20
   14c24:	sub	sp, sp, #48	; 0x30
   14c28:	str	r0, [fp, #-24]	; 0xffffffe8
   14c2c:	str	r1, [fp, #-28]	; 0xffffffe4
   14c30:	str	r2, [fp, #-32]	; 0xffffffe0
   14c34:	str	r3, [fp, #-36]	; 0xffffffdc
   14c38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14c3c:	cmp	r3, #0
   14c40:	beq	14c68 <__assert_fail@plt+0x3d3c>
   14c44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14c48:	str	r3, [sp]
   14c4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14c50:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14c54:	movw	r1, #32052	; 0x7d34
   14c58:	movt	r1, #1
   14c5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14c60:	bl	10e60 <fprintf@plt>
   14c64:	b	14c80 <__assert_fail@plt+0x3d54>
   14c68:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14c6c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14c70:	movw	r1, #32064	; 0x7d40
   14c74:	movt	r1, #1
   14c78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14c7c:	bl	10e60 <fprintf@plt>
   14c80:	movw	r0, #32072	; 0x7d48
   14c84:	movt	r0, #1
   14c88:	bl	10e3c <gettext@plt>
   14c8c:	mov	r2, r0
   14c90:	movw	r3, #2022	; 0x7e6
   14c94:	movw	r1, #32856	; 0x8058
   14c98:	movt	r1, #1
   14c9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ca0:	bl	10e60 <fprintf@plt>
   14ca4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14ca8:	mov	r0, #10
   14cac:	bl	10d58 <fputc_unlocked@plt>
   14cb0:	movw	r0, #32076	; 0x7d4c
   14cb4:	movt	r0, #1
   14cb8:	bl	10e3c <gettext@plt>
   14cbc:	mov	r3, r0
   14cc0:	movw	r2, #32248	; 0x7df8
   14cc4:	movt	r2, #1
   14cc8:	mov	r1, r3
   14ccc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14cd0:	bl	10e60 <fprintf@plt>
   14cd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14cd8:	mov	r0, #10
   14cdc:	bl	10d58 <fputc_unlocked@plt>
   14ce0:	ldr	r3, [fp, #8]
   14ce4:	cmp	r3, #9
   14ce8:	ldrls	pc, [pc, r3, lsl #2]
   14cec:	b	150cc <__assert_fail@plt+0x41a0>
   14cf0:	andeq	r5, r1, r8, ror r1
   14cf4:	andeq	r4, r1, r8, lsl sp
   14cf8:	andeq	r4, r1, r0, asr #26
   14cfc:	andeq	r4, r1, r0, ror sp
   14d00:			; <UNDEFINED> instruction: 0x00014db4
   14d04:	andeq	r4, r1, r0, lsl lr
   14d08:	andeq	r4, r1, ip, ror lr
   14d0c:	strdeq	r4, [r1], -r8
   14d10:	andeq	r4, r1, r4, lsl #31
   14d14:	andeq	r5, r1, r0, lsr #32
   14d18:	movw	r0, #32284	; 0x7e1c
   14d1c:	movt	r0, #1
   14d20:	bl	10e3c <gettext@plt>
   14d24:	mov	r1, r0
   14d28:	ldr	r3, [fp, #4]
   14d2c:	ldr	r3, [r3]
   14d30:	mov	r2, r3
   14d34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14d38:	bl	10e60 <fprintf@plt>
   14d3c:	b	1517c <__assert_fail@plt+0x4250>
   14d40:	movw	r0, #32300	; 0x7e2c
   14d44:	movt	r0, #1
   14d48:	bl	10e3c <gettext@plt>
   14d4c:	mov	r1, r0
   14d50:	ldr	r3, [fp, #4]
   14d54:	ldr	r2, [r3]
   14d58:	ldr	r3, [fp, #4]
   14d5c:	add	r3, r3, #4
   14d60:	ldr	r3, [r3]
   14d64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14d68:	bl	10e60 <fprintf@plt>
   14d6c:	b	1517c <__assert_fail@plt+0x4250>
   14d70:	movw	r0, #32324	; 0x7e44
   14d74:	movt	r0, #1
   14d78:	bl	10e3c <gettext@plt>
   14d7c:	ldr	r3, [fp, #4]
   14d80:	ldr	r2, [r3]
   14d84:	ldr	r3, [fp, #4]
   14d88:	add	r3, r3, #4
   14d8c:	ldr	r1, [r3]
   14d90:	ldr	r3, [fp, #4]
   14d94:	add	r3, r3, #8
   14d98:	ldr	r3, [r3]
   14d9c:	str	r3, [sp]
   14da0:	mov	r3, r1
   14da4:	mov	r1, r0
   14da8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14dac:	bl	10e60 <fprintf@plt>
   14db0:	b	1517c <__assert_fail@plt+0x4250>
   14db4:	movw	r0, #32352	; 0x7e60
   14db8:	movt	r0, #1
   14dbc:	bl	10e3c <gettext@plt>
   14dc0:	mov	ip, r0
   14dc4:	ldr	r3, [fp, #4]
   14dc8:	ldr	r1, [r3]
   14dcc:	ldr	r3, [fp, #4]
   14dd0:	add	r3, r3, #4
   14dd4:	ldr	r0, [r3]
   14dd8:	ldr	r3, [fp, #4]
   14ddc:	add	r3, r3, #8
   14de0:	ldr	r3, [r3]
   14de4:	ldr	r2, [fp, #4]
   14de8:	add	r2, r2, #12
   14dec:	ldr	r2, [r2]
   14df0:	str	r2, [sp, #4]
   14df4:	str	r3, [sp]
   14df8:	mov	r3, r0
   14dfc:	mov	r2, r1
   14e00:	mov	r1, ip
   14e04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e08:	bl	10e60 <fprintf@plt>
   14e0c:	b	1517c <__assert_fail@plt+0x4250>
   14e10:	movw	r0, #32384	; 0x7e80
   14e14:	movt	r0, #1
   14e18:	bl	10e3c <gettext@plt>
   14e1c:	mov	lr, r0
   14e20:	ldr	r3, [fp, #4]
   14e24:	ldr	r0, [r3]
   14e28:	ldr	r3, [fp, #4]
   14e2c:	add	r3, r3, #4
   14e30:	ldr	ip, [r3]
   14e34:	ldr	r3, [fp, #4]
   14e38:	add	r3, r3, #8
   14e3c:	ldr	r3, [r3]
   14e40:	ldr	r2, [fp, #4]
   14e44:	add	r2, r2, #12
   14e48:	ldr	r2, [r2]
   14e4c:	ldr	r1, [fp, #4]
   14e50:	add	r1, r1, #16
   14e54:	ldr	r1, [r1]
   14e58:	str	r1, [sp, #8]
   14e5c:	str	r2, [sp, #4]
   14e60:	str	r3, [sp]
   14e64:	mov	r3, ip
   14e68:	mov	r2, r0
   14e6c:	mov	r1, lr
   14e70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e74:	bl	10e60 <fprintf@plt>
   14e78:	b	1517c <__assert_fail@plt+0x4250>
   14e7c:	movw	r0, #32420	; 0x7ea4
   14e80:	movt	r0, #1
   14e84:	bl	10e3c <gettext@plt>
   14e88:	mov	r4, r0
   14e8c:	ldr	r3, [fp, #4]
   14e90:	ldr	ip, [r3]
   14e94:	ldr	r3, [fp, #4]
   14e98:	add	r3, r3, #4
   14e9c:	ldr	lr, [r3]
   14ea0:	ldr	r3, [fp, #4]
   14ea4:	add	r3, r3, #8
   14ea8:	ldr	r3, [r3]
   14eac:	ldr	r2, [fp, #4]
   14eb0:	add	r2, r2, #12
   14eb4:	ldr	r2, [r2]
   14eb8:	ldr	r1, [fp, #4]
   14ebc:	add	r1, r1, #16
   14ec0:	ldr	r1, [r1]
   14ec4:	ldr	r0, [fp, #4]
   14ec8:	add	r0, r0, #20
   14ecc:	ldr	r0, [r0]
   14ed0:	str	r0, [sp, #12]
   14ed4:	str	r1, [sp, #8]
   14ed8:	str	r2, [sp, #4]
   14edc:	str	r3, [sp]
   14ee0:	mov	r3, lr
   14ee4:	mov	r2, ip
   14ee8:	mov	r1, r4
   14eec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ef0:	bl	10e60 <fprintf@plt>
   14ef4:	b	1517c <__assert_fail@plt+0x4250>
   14ef8:	movw	r0, #32460	; 0x7ecc
   14efc:	movt	r0, #1
   14f00:	bl	10e3c <gettext@plt>
   14f04:	mov	r5, r0
   14f08:	ldr	r3, [fp, #4]
   14f0c:	ldr	lr, [r3]
   14f10:	ldr	r3, [fp, #4]
   14f14:	add	r3, r3, #4
   14f18:	ldr	r4, [r3]
   14f1c:	ldr	r3, [fp, #4]
   14f20:	add	r3, r3, #8
   14f24:	ldr	r3, [r3]
   14f28:	ldr	r2, [fp, #4]
   14f2c:	add	r2, r2, #12
   14f30:	ldr	r2, [r2]
   14f34:	ldr	r1, [fp, #4]
   14f38:	add	r1, r1, #16
   14f3c:	ldr	r1, [r1]
   14f40:	ldr	r0, [fp, #4]
   14f44:	add	r0, r0, #20
   14f48:	ldr	r0, [r0]
   14f4c:	ldr	ip, [fp, #4]
   14f50:	add	ip, ip, #24
   14f54:	ldr	ip, [ip]
   14f58:	str	ip, [sp, #16]
   14f5c:	str	r0, [sp, #12]
   14f60:	str	r1, [sp, #8]
   14f64:	str	r2, [sp, #4]
   14f68:	str	r3, [sp]
   14f6c:	mov	r3, r4
   14f70:	mov	r2, lr
   14f74:	mov	r1, r5
   14f78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14f7c:	bl	10e60 <fprintf@plt>
   14f80:	b	1517c <__assert_fail@plt+0x4250>
   14f84:	movw	r0, #32504	; 0x7ef8
   14f88:	movt	r0, #1
   14f8c:	bl	10e3c <gettext@plt>
   14f90:	mov	r6, r0
   14f94:	ldr	r3, [fp, #4]
   14f98:	ldr	r4, [r3]
   14f9c:	ldr	r3, [fp, #4]
   14fa0:	add	r3, r3, #4
   14fa4:	ldr	r5, [r3]
   14fa8:	ldr	r3, [fp, #4]
   14fac:	add	r3, r3, #8
   14fb0:	ldr	r3, [r3]
   14fb4:	ldr	r2, [fp, #4]
   14fb8:	add	r2, r2, #12
   14fbc:	ldr	r2, [r2]
   14fc0:	ldr	r1, [fp, #4]
   14fc4:	add	r1, r1, #16
   14fc8:	ldr	r1, [r1]
   14fcc:	ldr	r0, [fp, #4]
   14fd0:	add	r0, r0, #20
   14fd4:	ldr	r0, [r0]
   14fd8:	ldr	ip, [fp, #4]
   14fdc:	add	ip, ip, #24
   14fe0:	ldr	ip, [ip]
   14fe4:	ldr	lr, [fp, #4]
   14fe8:	add	lr, lr, #28
   14fec:	ldr	lr, [lr]
   14ff0:	str	lr, [sp, #20]
   14ff4:	str	ip, [sp, #16]
   14ff8:	str	r0, [sp, #12]
   14ffc:	str	r1, [sp, #8]
   15000:	str	r2, [sp, #4]
   15004:	str	r3, [sp]
   15008:	mov	r3, r5
   1500c:	mov	r2, r4
   15010:	mov	r1, r6
   15014:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15018:	bl	10e60 <fprintf@plt>
   1501c:	b	1517c <__assert_fail@plt+0x4250>
   15020:	movw	r0, #32552	; 0x7f28
   15024:	movt	r0, #1
   15028:	bl	10e3c <gettext@plt>
   1502c:	mov	r7, r0
   15030:	ldr	r3, [fp, #4]
   15034:	ldr	r5, [r3]
   15038:	ldr	r3, [fp, #4]
   1503c:	add	r3, r3, #4
   15040:	ldr	r6, [r3]
   15044:	ldr	r3, [fp, #4]
   15048:	add	r3, r3, #8
   1504c:	ldr	r3, [r3]
   15050:	ldr	r2, [fp, #4]
   15054:	add	r2, r2, #12
   15058:	ldr	r2, [r2]
   1505c:	ldr	r1, [fp, #4]
   15060:	add	r1, r1, #16
   15064:	ldr	r1, [r1]
   15068:	ldr	r0, [fp, #4]
   1506c:	add	r0, r0, #20
   15070:	ldr	r0, [r0]
   15074:	ldr	ip, [fp, #4]
   15078:	add	ip, ip, #24
   1507c:	ldr	ip, [ip]
   15080:	ldr	lr, [fp, #4]
   15084:	add	lr, lr, #28
   15088:	ldr	lr, [lr]
   1508c:	ldr	r4, [fp, #4]
   15090:	add	r4, r4, #32
   15094:	ldr	r4, [r4]
   15098:	str	r4, [sp, #24]
   1509c:	str	lr, [sp, #20]
   150a0:	str	ip, [sp, #16]
   150a4:	str	r0, [sp, #12]
   150a8:	str	r1, [sp, #8]
   150ac:	str	r2, [sp, #4]
   150b0:	str	r3, [sp]
   150b4:	mov	r3, r6
   150b8:	mov	r2, r5
   150bc:	mov	r1, r7
   150c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   150c4:	bl	10e60 <fprintf@plt>
   150c8:	b	1517c <__assert_fail@plt+0x4250>
   150cc:	movw	r0, #32604	; 0x7f5c
   150d0:	movt	r0, #1
   150d4:	bl	10e3c <gettext@plt>
   150d8:	mov	r7, r0
   150dc:	ldr	r3, [fp, #4]
   150e0:	ldr	r5, [r3]
   150e4:	ldr	r3, [fp, #4]
   150e8:	add	r3, r3, #4
   150ec:	ldr	r6, [r3]
   150f0:	ldr	r3, [fp, #4]
   150f4:	add	r3, r3, #8
   150f8:	ldr	r3, [r3]
   150fc:	ldr	r2, [fp, #4]
   15100:	add	r2, r2, #12
   15104:	ldr	r2, [r2]
   15108:	ldr	r1, [fp, #4]
   1510c:	add	r1, r1, #16
   15110:	ldr	r1, [r1]
   15114:	ldr	r0, [fp, #4]
   15118:	add	r0, r0, #20
   1511c:	ldr	r0, [r0]
   15120:	ldr	ip, [fp, #4]
   15124:	add	ip, ip, #24
   15128:	ldr	ip, [ip]
   1512c:	ldr	lr, [fp, #4]
   15130:	add	lr, lr, #28
   15134:	ldr	lr, [lr]
   15138:	ldr	r4, [fp, #4]
   1513c:	add	r4, r4, #32
   15140:	ldr	r4, [r4]
   15144:	str	r4, [sp, #24]
   15148:	str	lr, [sp, #20]
   1514c:	str	ip, [sp, #16]
   15150:	str	r0, [sp, #12]
   15154:	str	r1, [sp, #8]
   15158:	str	r2, [sp, #4]
   1515c:	str	r3, [sp]
   15160:	mov	r3, r6
   15164:	mov	r2, r5
   15168:	mov	r1, r7
   1516c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15170:	bl	10e60 <fprintf@plt>
   15174:	b	1517c <__assert_fail@plt+0x4250>
   15178:	nop	{0}
   1517c:	nop	{0}
   15180:	sub	sp, fp, #20
   15184:	ldrd	r4, [sp]
   15188:	ldrd	r6, [sp, #8]
   1518c:	ldr	fp, [sp, #16]
   15190:	add	sp, sp, #20
   15194:	pop	{pc}		; (ldr pc, [sp], #4)
   15198:	str	fp, [sp, #-8]!
   1519c:	str	lr, [sp, #4]
   151a0:	add	fp, sp, #4
   151a4:	sub	sp, sp, #32
   151a8:	str	r0, [fp, #-16]
   151ac:	str	r1, [fp, #-20]	; 0xffffffec
   151b0:	str	r2, [fp, #-24]	; 0xffffffe8
   151b4:	str	r3, [fp, #-28]	; 0xffffffe4
   151b8:	mov	r3, #0
   151bc:	str	r3, [fp, #-8]
   151c0:	b	151d0 <__assert_fail@plt+0x42a4>
   151c4:	ldr	r3, [fp, #-8]
   151c8:	add	r3, r3, #1
   151cc:	str	r3, [fp, #-8]
   151d0:	ldr	r3, [fp, #-8]
   151d4:	lsl	r3, r3, #2
   151d8:	ldr	r2, [fp, #4]
   151dc:	add	r3, r2, r3
   151e0:	ldr	r3, [r3]
   151e4:	cmp	r3, #0
   151e8:	bne	151c4 <__assert_fail@plt+0x4298>
   151ec:	ldr	r3, [fp, #-8]
   151f0:	str	r3, [sp, #4]
   151f4:	ldr	r3, [fp, #4]
   151f8:	str	r3, [sp]
   151fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15200:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15204:	ldr	r1, [fp, #-20]	; 0xffffffec
   15208:	ldr	r0, [fp, #-16]
   1520c:	bl	14c10 <__assert_fail@plt+0x3ce4>
   15210:	nop	{0}
   15214:	sub	sp, fp, #4
   15218:	ldr	fp, [sp]
   1521c:	add	sp, sp, #4
   15220:	pop	{pc}		; (ldr pc, [sp], #4)
   15224:	str	fp, [sp, #-8]!
   15228:	str	lr, [sp, #4]
   1522c:	add	fp, sp, #4
   15230:	sub	sp, sp, #72	; 0x48
   15234:	str	r0, [fp, #-56]	; 0xffffffc8
   15238:	str	r1, [fp, #-60]	; 0xffffffc4
   1523c:	str	r2, [fp, #-64]	; 0xffffffc0
   15240:	str	r3, [fp, #-68]	; 0xffffffbc
   15244:	mov	r3, #0
   15248:	str	r3, [fp, #-8]
   1524c:	b	1525c <__assert_fail@plt+0x4330>
   15250:	ldr	r3, [fp, #-8]
   15254:	add	r3, r3, #1
   15258:	str	r3, [fp, #-8]
   1525c:	ldr	r3, [fp, #-8]
   15260:	cmp	r3, #9
   15264:	bhi	152a8 <__assert_fail@plt+0x437c>
   15268:	ldr	r3, [fp, #4]
   1526c:	add	r2, r3, #4
   15270:	str	r2, [fp, #4]
   15274:	ldr	r2, [r3]
   15278:	ldr	r3, [fp, #-8]
   1527c:	lsl	r3, r3, #2
   15280:	sub	r1, fp, #4
   15284:	add	r3, r1, r3
   15288:	str	r2, [r3, #-44]	; 0xffffffd4
   1528c:	ldr	r3, [fp, #-8]
   15290:	lsl	r3, r3, #2
   15294:	sub	r2, fp, #4
   15298:	add	r3, r2, r3
   1529c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   152a0:	cmp	r3, #0
   152a4:	bne	15250 <__assert_fail@plt+0x4324>
   152a8:	ldr	r3, [fp, #-8]
   152ac:	str	r3, [sp, #4]
   152b0:	sub	r3, fp, #48	; 0x30
   152b4:	str	r3, [sp]
   152b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   152bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   152c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   152c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   152c8:	bl	14c10 <__assert_fail@plt+0x3ce4>
   152cc:	nop	{0}
   152d0:	sub	sp, fp, #4
   152d4:	ldr	fp, [sp]
   152d8:	add	sp, sp, #4
   152dc:	pop	{pc}		; (ldr pc, [sp], #4)
   152e0:	push	{r3}		; (str r3, [sp, #-4]!)
   152e4:	str	fp, [sp, #-8]!
   152e8:	str	lr, [sp, #4]
   152ec:	add	fp, sp, #4
   152f0:	sub	sp, sp, #36	; 0x24
   152f4:	str	r0, [fp, #-20]	; 0xffffffec
   152f8:	str	r1, [fp, #-24]	; 0xffffffe8
   152fc:	str	r2, [fp, #-28]	; 0xffffffe4
   15300:	add	r3, fp, #8
   15304:	str	r3, [fp, #-12]
   15308:	ldr	r3, [fp, #-12]
   1530c:	str	r3, [sp]
   15310:	ldr	r3, [fp, #4]
   15314:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15318:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1531c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15320:	bl	15224 <__assert_fail@plt+0x42f8>
   15324:	nop	{0}
   15328:	sub	sp, fp, #4
   1532c:	ldr	fp, [sp]
   15330:	ldr	lr, [sp, #4]
   15334:	add	sp, sp, #8
   15338:	add	sp, sp, #4
   1533c:	bx	lr
   15340:	str	fp, [sp, #-8]!
   15344:	str	lr, [sp, #4]
   15348:	add	fp, sp, #4
   1534c:	movw	r3, #37204	; 0x9154
   15350:	movt	r3, #2
   15354:	ldr	r3, [r3]
   15358:	mov	r1, r3
   1535c:	mov	r0, #10
   15360:	bl	10d58 <fputc_unlocked@plt>
   15364:	movw	r0, #32664	; 0x7f98
   15368:	movt	r0, #1
   1536c:	bl	10e3c <gettext@plt>
   15370:	mov	r3, r0
   15374:	movw	r1, #32684	; 0x7fac
   15378:	movt	r1, #1
   1537c:	mov	r0, r3
   15380:	bl	10cec <printf@plt>
   15384:	movw	r0, #32708	; 0x7fc4
   15388:	movt	r0, #1
   1538c:	bl	10e3c <gettext@plt>
   15390:	mov	r3, r0
   15394:	movw	r2, #32728	; 0x7fd8
   15398:	movt	r2, #1
   1539c:	movw	r1, #32768	; 0x8000
   153a0:	movt	r1, #1
   153a4:	mov	r0, r3
   153a8:	bl	10cec <printf@plt>
   153ac:	movw	r0, #32784	; 0x8010
   153b0:	movt	r0, #1
   153b4:	bl	10e3c <gettext@plt>
   153b8:	mov	r3, r0
   153bc:	movw	r1, #32824	; 0x8038
   153c0:	movt	r1, #1
   153c4:	mov	r0, r3
   153c8:	bl	10cec <printf@plt>
   153cc:	nop	{0}
   153d0:	sub	sp, fp, #4
   153d4:	ldr	fp, [sp]
   153d8:	add	sp, sp, #4
   153dc:	pop	{pc}		; (ldr pc, [sp], #4)
   153e0:	str	fp, [sp, #-8]!
   153e4:	str	lr, [sp, #4]
   153e8:	add	fp, sp, #4
   153ec:	sub	sp, sp, #16
   153f0:	str	r0, [fp, #-8]
   153f4:	str	r1, [fp, #-12]
   153f8:	str	r2, [fp, #-16]
   153fc:	ldr	r2, [fp, #-16]
   15400:	ldr	r1, [fp, #-12]
   15404:	ldr	r0, [fp, #-8]
   15408:	bl	155c4 <__assert_fail@plt+0x4698>
   1540c:	mov	r3, r0
   15410:	mov	r0, r3
   15414:	sub	sp, fp, #4
   15418:	ldr	fp, [sp]
   1541c:	add	sp, sp, #4
   15420:	pop	{pc}		; (ldr pc, [sp], #4)
   15424:	str	fp, [sp, #-8]!
   15428:	str	lr, [sp, #4]
   1542c:	add	fp, sp, #4
   15430:	sub	sp, sp, #8
   15434:	str	r0, [fp, #-8]
   15438:	ldr	r3, [fp, #-8]
   1543c:	cmp	r3, #0
   15440:	bne	15448 <__assert_fail@plt+0x451c>
   15444:	bl	15cd4 <__assert_fail@plt+0x4da8>
   15448:	ldr	r3, [fp, #-8]
   1544c:	mov	r0, r3
   15450:	sub	sp, fp, #4
   15454:	ldr	fp, [sp]
   15458:	add	sp, sp, #4
   1545c:	pop	{pc}		; (ldr pc, [sp], #4)
   15460:	str	fp, [sp, #-8]!
   15464:	str	lr, [sp, #4]
   15468:	add	fp, sp, #4
   1546c:	sub	sp, sp, #8
   15470:	str	r0, [fp, #-8]
   15474:	ldr	r0, [fp, #-8]
   15478:	bl	16880 <__assert_fail@plt+0x5954>
   1547c:	mov	r3, r0
   15480:	mov	r0, r3
   15484:	bl	15424 <__assert_fail@plt+0x44f8>
   15488:	mov	r3, r0
   1548c:	mov	r0, r3
   15490:	sub	sp, fp, #4
   15494:	ldr	fp, [sp]
   15498:	add	sp, sp, #4
   1549c:	pop	{pc}		; (ldr pc, [sp], #4)
   154a0:	str	fp, [sp, #-8]!
   154a4:	str	lr, [sp, #4]
   154a8:	add	fp, sp, #4
   154ac:	sub	sp, sp, #8
   154b0:	str	r0, [fp, #-8]
   154b4:	ldr	r0, [fp, #-8]
   154b8:	bl	16c30 <__assert_fail@plt+0x5d04>
   154bc:	mov	r3, r0
   154c0:	mov	r0, r3
   154c4:	bl	15424 <__assert_fail@plt+0x44f8>
   154c8:	mov	r3, r0
   154cc:	mov	r0, r3
   154d0:	sub	sp, fp, #4
   154d4:	ldr	fp, [sp]
   154d8:	add	sp, sp, #4
   154dc:	pop	{pc}		; (ldr pc, [sp], #4)
   154e0:	str	fp, [sp, #-8]!
   154e4:	str	lr, [sp, #4]
   154e8:	add	fp, sp, #4
   154ec:	sub	sp, sp, #8
   154f0:	str	r0, [fp, #-8]
   154f4:	ldr	r0, [fp, #-8]
   154f8:	bl	15460 <__assert_fail@plt+0x4534>
   154fc:	mov	r3, r0
   15500:	mov	r0, r3
   15504:	sub	sp, fp, #4
   15508:	ldr	fp, [sp]
   1550c:	add	sp, sp, #4
   15510:	pop	{pc}		; (ldr pc, [sp], #4)
   15514:	str	fp, [sp, #-8]!
   15518:	str	lr, [sp, #4]
   1551c:	add	fp, sp, #4
   15520:	sub	sp, sp, #16
   15524:	str	r0, [fp, #-16]
   15528:	str	r1, [fp, #-20]	; 0xffffffec
   1552c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15530:	ldr	r0, [fp, #-16]
   15534:	bl	16910 <__assert_fail@plt+0x59e4>
   15538:	str	r0, [fp, #-8]
   1553c:	ldr	r3, [fp, #-8]
   15540:	cmp	r3, #0
   15544:	bne	15564 <__assert_fail@plt+0x4638>
   15548:	ldr	r3, [fp, #-16]
   1554c:	cmp	r3, #0
   15550:	beq	15560 <__assert_fail@plt+0x4634>
   15554:	ldr	r3, [fp, #-20]	; 0xffffffec
   15558:	cmp	r3, #0
   1555c:	beq	15564 <__assert_fail@plt+0x4638>
   15560:	bl	15cd4 <__assert_fail@plt+0x4da8>
   15564:	ldr	r3, [fp, #-8]
   15568:	mov	r0, r3
   1556c:	sub	sp, fp, #4
   15570:	ldr	fp, [sp]
   15574:	add	sp, sp, #4
   15578:	pop	{pc}		; (ldr pc, [sp], #4)
   1557c:	str	fp, [sp, #-8]!
   15580:	str	lr, [sp, #4]
   15584:	add	fp, sp, #4
   15588:	sub	sp, sp, #8
   1558c:	str	r0, [fp, #-8]
   15590:	str	r1, [fp, #-12]
   15594:	ldr	r1, [fp, #-12]
   15598:	ldr	r0, [fp, #-8]
   1559c:	bl	16c68 <__assert_fail@plt+0x5d3c>
   155a0:	mov	r3, r0
   155a4:	mov	r0, r3
   155a8:	bl	15424 <__assert_fail@plt+0x44f8>
   155ac:	mov	r3, r0
   155b0:	mov	r0, r3
   155b4:	sub	sp, fp, #4
   155b8:	ldr	fp, [sp]
   155bc:	add	sp, sp, #4
   155c0:	pop	{pc}		; (ldr pc, [sp], #4)
   155c4:	str	fp, [sp, #-8]!
   155c8:	str	lr, [sp, #4]
   155cc:	add	fp, sp, #4
   155d0:	sub	sp, sp, #24
   155d4:	str	r0, [fp, #-16]
   155d8:	str	r1, [fp, #-20]	; 0xffffffec
   155dc:	str	r2, [fp, #-24]	; 0xffffffe8
   155e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   155e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   155e8:	ldr	r0, [fp, #-16]
   155ec:	bl	16e98 <__assert_fail@plt+0x5f6c>
   155f0:	str	r0, [fp, #-8]
   155f4:	ldr	r3, [fp, #-8]
   155f8:	cmp	r3, #0
   155fc:	bne	15628 <__assert_fail@plt+0x46fc>
   15600:	ldr	r3, [fp, #-16]
   15604:	cmp	r3, #0
   15608:	beq	15624 <__assert_fail@plt+0x46f8>
   1560c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15610:	cmp	r3, #0
   15614:	beq	15628 <__assert_fail@plt+0x46fc>
   15618:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1561c:	cmp	r3, #0
   15620:	beq	15628 <__assert_fail@plt+0x46fc>
   15624:	bl	15cd4 <__assert_fail@plt+0x4da8>
   15628:	ldr	r3, [fp, #-8]
   1562c:	mov	r0, r3
   15630:	sub	sp, fp, #4
   15634:	ldr	fp, [sp]
   15638:	add	sp, sp, #4
   1563c:	pop	{pc}		; (ldr pc, [sp], #4)
   15640:	str	fp, [sp, #-8]!
   15644:	str	lr, [sp, #4]
   15648:	add	fp, sp, #4
   1564c:	sub	sp, sp, #16
   15650:	str	r0, [fp, #-8]
   15654:	str	r1, [fp, #-12]
   15658:	str	r2, [fp, #-16]
   1565c:	ldr	r2, [fp, #-16]
   15660:	ldr	r1, [fp, #-12]
   15664:	ldr	r0, [fp, #-8]
   15668:	bl	16d08 <__assert_fail@plt+0x5ddc>
   1566c:	mov	r3, r0
   15670:	mov	r0, r3
   15674:	bl	15424 <__assert_fail@plt+0x44f8>
   15678:	mov	r3, r0
   1567c:	mov	r0, r3
   15680:	sub	sp, fp, #4
   15684:	ldr	fp, [sp]
   15688:	add	sp, sp, #4
   1568c:	pop	{pc}		; (ldr pc, [sp], #4)
   15690:	str	fp, [sp, #-8]!
   15694:	str	lr, [sp, #4]
   15698:	add	fp, sp, #4
   1569c:	sub	sp, sp, #8
   156a0:	str	r0, [fp, #-8]
   156a4:	str	r1, [fp, #-12]
   156a8:	ldr	r2, [fp, #-12]
   156ac:	ldr	r1, [fp, #-8]
   156b0:	mov	r0, #0
   156b4:	bl	155c4 <__assert_fail@plt+0x4698>
   156b8:	mov	r3, r0
   156bc:	mov	r0, r3
   156c0:	sub	sp, fp, #4
   156c4:	ldr	fp, [sp]
   156c8:	add	sp, sp, #4
   156cc:	pop	{pc}		; (ldr pc, [sp], #4)
   156d0:	str	fp, [sp, #-8]!
   156d4:	str	lr, [sp, #4]
   156d8:	add	fp, sp, #4
   156dc:	sub	sp, sp, #8
   156e0:	str	r0, [fp, #-8]
   156e4:	str	r1, [fp, #-12]
   156e8:	ldr	r2, [fp, #-12]
   156ec:	ldr	r1, [fp, #-8]
   156f0:	mov	r0, #0
   156f4:	bl	15640 <__assert_fail@plt+0x4714>
   156f8:	mov	r3, r0
   156fc:	mov	r0, r3
   15700:	sub	sp, fp, #4
   15704:	ldr	fp, [sp]
   15708:	add	sp, sp, #4
   1570c:	pop	{pc}		; (ldr pc, [sp], #4)
   15710:	str	fp, [sp, #-8]!
   15714:	str	lr, [sp, #4]
   15718:	add	fp, sp, #4
   1571c:	sub	sp, sp, #8
   15720:	str	r0, [fp, #-8]
   15724:	str	r1, [fp, #-12]
   15728:	mov	r2, #1
   1572c:	ldr	r1, [fp, #-12]
   15730:	ldr	r0, [fp, #-8]
   15734:	bl	15750 <__assert_fail@plt+0x4824>
   15738:	mov	r3, r0
   1573c:	mov	r0, r3
   15740:	sub	sp, fp, #4
   15744:	ldr	fp, [sp]
   15748:	add	sp, sp, #4
   1574c:	pop	{pc}		; (ldr pc, [sp], #4)
   15750:	str	fp, [sp, #-8]!
   15754:	str	lr, [sp, #4]
   15758:	add	fp, sp, #4
   1575c:	sub	sp, sp, #24
   15760:	str	r0, [fp, #-16]
   15764:	str	r1, [fp, #-20]	; 0xffffffec
   15768:	str	r2, [fp, #-24]	; 0xffffffe8
   1576c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15770:	ldr	r3, [r3]
   15774:	str	r3, [fp, #-8]
   15778:	ldr	r3, [fp, #-16]
   1577c:	cmp	r3, #0
   15780:	bne	157c8 <__assert_fail@plt+0x489c>
   15784:	ldr	r3, [fp, #-8]
   15788:	cmp	r3, #0
   1578c:	bne	15804 <__assert_fail@plt+0x48d8>
   15790:	mov	r2, #64	; 0x40
   15794:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15798:	udiv	r3, r2, r3
   1579c:	str	r3, [fp, #-8]
   157a0:	ldr	r3, [fp, #-8]
   157a4:	cmp	r3, #0
   157a8:	moveq	r3, #1
   157ac:	movne	r3, #0
   157b0:	uxtb	r3, r3
   157b4:	mov	r2, r3
   157b8:	ldr	r3, [fp, #-8]
   157bc:	add	r3, r2, r3
   157c0:	str	r3, [fp, #-8]
   157c4:	b	15804 <__assert_fail@plt+0x48d8>
   157c8:	ldr	r2, [fp, #-8]
   157cc:	ldr	r3, [fp, #-8]
   157d0:	lsr	r3, r3, #1
   157d4:	add	r3, r3, #1
   157d8:	mov	r1, #0
   157dc:	adds	r3, r2, r3
   157e0:	bcc	157e8 <__assert_fail@plt+0x48bc>
   157e4:	mov	r1, #1
   157e8:	str	r3, [fp, #-8]
   157ec:	mov	r3, r1
   157f0:	and	r3, r3, #1
   157f4:	uxtb	r3, r3
   157f8:	cmp	r3, #0
   157fc:	beq	15804 <__assert_fail@plt+0x48d8>
   15800:	bl	15cd4 <__assert_fail@plt+0x4da8>
   15804:	ldr	r3, [fp, #-8]
   15808:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1580c:	mov	r1, r3
   15810:	ldr	r0, [fp, #-16]
   15814:	bl	155c4 <__assert_fail@plt+0x4698>
   15818:	str	r0, [fp, #-16]
   1581c:	ldr	r2, [fp, #-8]
   15820:	ldr	r3, [fp, #-20]	; 0xffffffec
   15824:	str	r2, [r3]
   15828:	ldr	r3, [fp, #-16]
   1582c:	mov	r0, r3
   15830:	sub	sp, fp, #4
   15834:	ldr	fp, [sp]
   15838:	add	sp, sp, #4
   1583c:	pop	{pc}		; (ldr pc, [sp], #4)
   15840:	str	fp, [sp, #-8]!
   15844:	str	lr, [sp, #4]
   15848:	add	fp, sp, #4
   1584c:	sub	sp, sp, #32
   15850:	str	r0, [fp, #-24]	; 0xffffffe8
   15854:	str	r1, [fp, #-28]	; 0xffffffe4
   15858:	str	r2, [fp, #-32]	; 0xffffffe0
   1585c:	str	r3, [fp, #-36]	; 0xffffffdc
   15860:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15864:	ldr	r3, [r3]
   15868:	str	r3, [fp, #-8]
   1586c:	ldr	r3, [fp, #-8]
   15870:	asr	r3, r3, #1
   15874:	mov	r1, #0
   15878:	ldr	r2, [fp, #-8]
   1587c:	adds	r3, r2, r3
   15880:	bvc	15888 <__assert_fail@plt+0x495c>
   15884:	mov	r1, #1
   15888:	str	r3, [fp, #-16]
   1588c:	mov	r3, r1
   15890:	and	r3, r3, #1
   15894:	uxtb	r3, r3
   15898:	cmp	r3, #0
   1589c:	beq	158a8 <__assert_fail@plt+0x497c>
   158a0:	mvn	r3, #-2147483648	; 0x80000000
   158a4:	str	r3, [fp, #-16]
   158a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158ac:	cmp	r3, #0
   158b0:	blt	158cc <__assert_fail@plt+0x49a0>
   158b4:	ldr	r3, [fp, #-16]
   158b8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   158bc:	cmp	r2, r3
   158c0:	bge	158cc <__assert_fail@plt+0x49a0>
   158c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158c8:	str	r3, [fp, #-16]
   158cc:	ldr	r2, [fp, #-16]
   158d0:	mov	lr, #0
   158d4:	ldr	r3, [fp, #4]
   158d8:	smull	r2, r3, r2, r3
   158dc:	mov	r0, #0
   158e0:	mov	r1, #0
   158e4:	mov	r0, r3
   158e8:	asr	r1, r3, #31
   158ec:	asr	ip, r2, #31
   158f0:	cmp	ip, r0
   158f4:	beq	158fc <__assert_fail@plt+0x49d0>
   158f8:	mov	lr, #1
   158fc:	mov	r3, r2
   15900:	str	r3, [fp, #-20]	; 0xffffffec
   15904:	mov	r3, lr
   15908:	and	r3, r3, #1
   1590c:	uxtb	r3, r3
   15910:	cmp	r3, #0
   15914:	beq	15920 <__assert_fail@plt+0x49f4>
   15918:	mvn	r3, #-2147483648	; 0x80000000
   1591c:	b	15938 <__assert_fail@plt+0x4a0c>
   15920:	ldr	r3, [fp, #-20]	; 0xffffffec
   15924:	cmp	r3, #63	; 0x3f
   15928:	bgt	15934 <__assert_fail@plt+0x4a08>
   1592c:	mov	r3, #64	; 0x40
   15930:	b	15938 <__assert_fail@plt+0x4a0c>
   15934:	mov	r3, #0
   15938:	str	r3, [fp, #-12]
   1593c:	ldr	r3, [fp, #-12]
   15940:	cmp	r3, #0
   15944:	beq	1597c <__assert_fail@plt+0x4a50>
   15948:	ldr	r2, [fp, #-12]
   1594c:	ldr	r3, [fp, #4]
   15950:	sdiv	r3, r2, r3
   15954:	str	r3, [fp, #-16]
   15958:	ldr	r3, [fp, #-12]
   1595c:	ldr	r2, [fp, #4]
   15960:	sdiv	r2, r3, r2
   15964:	ldr	r1, [fp, #4]
   15968:	mul	r2, r1, r2
   1596c:	sub	r3, r3, r2
   15970:	ldr	r2, [fp, #-12]
   15974:	sub	r3, r2, r3
   15978:	str	r3, [fp, #-20]	; 0xffffffec
   1597c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15980:	cmp	r3, #0
   15984:	bne	15994 <__assert_fail@plt+0x4a68>
   15988:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1598c:	mov	r2, #0
   15990:	str	r2, [r3]
   15994:	ldr	r2, [fp, #-16]
   15998:	ldr	r3, [fp, #-8]
   1599c:	sub	r3, r2, r3
   159a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   159a4:	cmp	r2, r3
   159a8:	ble	15a48 <__assert_fail@plt+0x4b1c>
   159ac:	mov	r1, #0
   159b0:	ldr	r2, [fp, #-8]
   159b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   159b8:	adds	r3, r2, r3
   159bc:	bvc	159c4 <__assert_fail@plt+0x4a98>
   159c0:	mov	r1, #1
   159c4:	str	r3, [fp, #-16]
   159c8:	mov	r3, r1
   159cc:	and	r3, r3, #1
   159d0:	uxtb	r3, r3
   159d4:	cmp	r3, #0
   159d8:	bne	15a44 <__assert_fail@plt+0x4b18>
   159dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   159e0:	cmp	r3, #0
   159e4:	blt	159f8 <__assert_fail@plt+0x4acc>
   159e8:	ldr	r3, [fp, #-16]
   159ec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   159f0:	cmp	r2, r3
   159f4:	blt	15a44 <__assert_fail@plt+0x4b18>
   159f8:	ldr	r2, [fp, #-16]
   159fc:	mov	lr, #0
   15a00:	ldr	r3, [fp, #4]
   15a04:	smull	r2, r3, r2, r3
   15a08:	mov	r0, #0
   15a0c:	mov	r1, #0
   15a10:	mov	r0, r3
   15a14:	asr	r1, r3, #31
   15a18:	asr	ip, r2, #31
   15a1c:	cmp	ip, r0
   15a20:	beq	15a28 <__assert_fail@plt+0x4afc>
   15a24:	mov	lr, #1
   15a28:	mov	r3, r2
   15a2c:	str	r3, [fp, #-20]	; 0xffffffec
   15a30:	mov	r3, lr
   15a34:	and	r3, r3, #1
   15a38:	uxtb	r3, r3
   15a3c:	cmp	r3, #0
   15a40:	beq	15a48 <__assert_fail@plt+0x4b1c>
   15a44:	bl	15cd4 <__assert_fail@plt+0x4da8>
   15a48:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a4c:	mov	r1, r3
   15a50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a54:	bl	15514 <__assert_fail@plt+0x45e8>
   15a58:	str	r0, [fp, #-24]	; 0xffffffe8
   15a5c:	ldr	r2, [fp, #-16]
   15a60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a64:	str	r2, [r3]
   15a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a6c:	mov	r0, r3
   15a70:	sub	sp, fp, #4
   15a74:	ldr	fp, [sp]
   15a78:	add	sp, sp, #4
   15a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a80:	str	fp, [sp, #-8]!
   15a84:	str	lr, [sp, #4]
   15a88:	add	fp, sp, #4
   15a8c:	sub	sp, sp, #8
   15a90:	str	r0, [fp, #-8]
   15a94:	mov	r1, #1
   15a98:	ldr	r0, [fp, #-8]
   15a9c:	bl	15af0 <__assert_fail@plt+0x4bc4>
   15aa0:	mov	r3, r0
   15aa4:	mov	r0, r3
   15aa8:	sub	sp, fp, #4
   15aac:	ldr	fp, [sp]
   15ab0:	add	sp, sp, #4
   15ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab8:	str	fp, [sp, #-8]!
   15abc:	str	lr, [sp, #4]
   15ac0:	add	fp, sp, #4
   15ac4:	sub	sp, sp, #8
   15ac8:	str	r0, [fp, #-8]
   15acc:	mov	r1, #1
   15ad0:	ldr	r0, [fp, #-8]
   15ad4:	bl	15b38 <__assert_fail@plt+0x4c0c>
   15ad8:	mov	r3, r0
   15adc:	mov	r0, r3
   15ae0:	sub	sp, fp, #4
   15ae4:	ldr	fp, [sp]
   15ae8:	add	sp, sp, #4
   15aec:	pop	{pc}		; (ldr pc, [sp], #4)
   15af0:	str	fp, [sp, #-8]!
   15af4:	str	lr, [sp, #4]
   15af8:	add	fp, sp, #4
   15afc:	sub	sp, sp, #8
   15b00:	str	r0, [fp, #-8]
   15b04:	str	r1, [fp, #-12]
   15b08:	ldr	r1, [fp, #-12]
   15b0c:	ldr	r0, [fp, #-8]
   15b10:	bl	167b0 <__assert_fail@plt+0x5884>
   15b14:	mov	r3, r0
   15b18:	mov	r0, r3
   15b1c:	bl	15424 <__assert_fail@plt+0x44f8>
   15b20:	mov	r3, r0
   15b24:	mov	r0, r3
   15b28:	sub	sp, fp, #4
   15b2c:	ldr	fp, [sp]
   15b30:	add	sp, sp, #4
   15b34:	pop	{pc}		; (ldr pc, [sp], #4)
   15b38:	str	fp, [sp, #-8]!
   15b3c:	str	lr, [sp, #4]
   15b40:	add	fp, sp, #4
   15b44:	sub	sp, sp, #8
   15b48:	str	r0, [fp, #-8]
   15b4c:	str	r1, [fp, #-12]
   15b50:	ldr	r1, [fp, #-12]
   15b54:	ldr	r0, [fp, #-8]
   15b58:	bl	16cc4 <__assert_fail@plt+0x5d98>
   15b5c:	mov	r3, r0
   15b60:	mov	r0, r3
   15b64:	bl	15424 <__assert_fail@plt+0x44f8>
   15b68:	mov	r3, r0
   15b6c:	mov	r0, r3
   15b70:	sub	sp, fp, #4
   15b74:	ldr	fp, [sp]
   15b78:	add	sp, sp, #4
   15b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b80:	str	fp, [sp, #-8]!
   15b84:	str	lr, [sp, #4]
   15b88:	add	fp, sp, #4
   15b8c:	sub	sp, sp, #8
   15b90:	str	r0, [fp, #-8]
   15b94:	str	r1, [fp, #-12]
   15b98:	ldr	r0, [fp, #-12]
   15b9c:	bl	15460 <__assert_fail@plt+0x4534>
   15ba0:	mov	r3, r0
   15ba4:	ldr	r2, [fp, #-12]
   15ba8:	ldr	r1, [fp, #-8]
   15bac:	mov	r0, r3
   15bb0:	bl	10d28 <memcpy@plt>
   15bb4:	mov	r3, r0
   15bb8:	mov	r0, r3
   15bbc:	sub	sp, fp, #4
   15bc0:	ldr	fp, [sp]
   15bc4:	add	sp, sp, #4
   15bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bcc:	str	fp, [sp, #-8]!
   15bd0:	str	lr, [sp, #4]
   15bd4:	add	fp, sp, #4
   15bd8:	sub	sp, sp, #8
   15bdc:	str	r0, [fp, #-8]
   15be0:	str	r1, [fp, #-12]
   15be4:	ldr	r0, [fp, #-12]
   15be8:	bl	154a0 <__assert_fail@plt+0x4574>
   15bec:	mov	r3, r0
   15bf0:	mov	r0, r3
   15bf4:	ldr	r3, [fp, #-12]
   15bf8:	mov	r2, r3
   15bfc:	ldr	r1, [fp, #-8]
   15c00:	bl	10d28 <memcpy@plt>
   15c04:	mov	r3, r0
   15c08:	mov	r0, r3
   15c0c:	sub	sp, fp, #4
   15c10:	ldr	fp, [sp]
   15c14:	add	sp, sp, #4
   15c18:	pop	{pc}		; (ldr pc, [sp], #4)
   15c1c:	str	fp, [sp, #-8]!
   15c20:	str	lr, [sp, #4]
   15c24:	add	fp, sp, #4
   15c28:	sub	sp, sp, #16
   15c2c:	str	r0, [fp, #-16]
   15c30:	str	r1, [fp, #-20]	; 0xffffffec
   15c34:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c38:	add	r3, r3, #1
   15c3c:	mov	r0, r3
   15c40:	bl	154a0 <__assert_fail@plt+0x4574>
   15c44:	mov	r3, r0
   15c48:	str	r3, [fp, #-8]
   15c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c50:	ldr	r2, [fp, #-8]
   15c54:	add	r3, r2, r3
   15c58:	mov	r2, #0
   15c5c:	strb	r2, [r3]
   15c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c64:	mov	r2, r3
   15c68:	ldr	r1, [fp, #-16]
   15c6c:	ldr	r0, [fp, #-8]
   15c70:	bl	10d28 <memcpy@plt>
   15c74:	mov	r3, r0
   15c78:	mov	r0, r3
   15c7c:	sub	sp, fp, #4
   15c80:	ldr	fp, [sp]
   15c84:	add	sp, sp, #4
   15c88:	pop	{pc}		; (ldr pc, [sp], #4)
   15c8c:	str	fp, [sp, #-8]!
   15c90:	str	lr, [sp, #4]
   15c94:	add	fp, sp, #4
   15c98:	sub	sp, sp, #8
   15c9c:	str	r0, [fp, #-8]
   15ca0:	ldr	r0, [fp, #-8]
   15ca4:	bl	10e48 <strlen@plt>
   15ca8:	mov	r3, r0
   15cac:	add	r3, r3, #1
   15cb0:	mov	r1, r3
   15cb4:	ldr	r0, [fp, #-8]
   15cb8:	bl	15b80 <__assert_fail@plt+0x4c54>
   15cbc:	mov	r3, r0
   15cc0:	mov	r0, r3
   15cc4:	sub	sp, fp, #4
   15cc8:	ldr	fp, [sp]
   15ccc:	add	sp, sp, #4
   15cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd4:	strd	r4, [sp, #-16]!
   15cd8:	str	fp, [sp, #8]
   15cdc:	str	lr, [sp, #12]
   15ce0:	add	fp, sp, #12
   15ce4:	movw	r3, #37104	; 0x90f0
   15ce8:	movt	r3, #2
   15cec:	ldr	r4, [r3]
   15cf0:	movw	r0, #32904	; 0x8088
   15cf4:	movt	r0, #1
   15cf8:	bl	10e3c <gettext@plt>
   15cfc:	mov	r3, r0
   15d00:	movw	r2, #32924	; 0x809c
   15d04:	movt	r2, #1
   15d08:	mov	r1, #0
   15d0c:	mov	r0, r4
   15d10:	bl	10ddc <error@plt>
   15d14:	bl	10f14 <abort@plt>
   15d18:	strd	r4, [sp, #-16]!
   15d1c:	str	fp, [sp, #8]
   15d20:	str	lr, [sp, #12]
   15d24:	add	fp, sp, #12
   15d28:	sub	sp, sp, #40	; 0x28
   15d2c:	str	r0, [fp, #-32]	; 0xffffffe0
   15d30:	str	r1, [fp, #-36]	; 0xffffffdc
   15d34:	strd	r2, [fp, #-44]	; 0xffffffd4
   15d38:	sub	r2, fp, #28
   15d3c:	ldr	r3, [fp, #12]
   15d40:	str	r3, [sp]
   15d44:	mov	r3, r2
   15d48:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15d4c:	mov	r1, #0
   15d50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15d54:	bl	1615c <__assert_fail@plt+0x5230>
   15d58:	str	r0, [fp, #-16]
   15d5c:	ldr	r3, [fp, #-16]
   15d60:	cmp	r3, #0
   15d64:	bne	15dd8 <__assert_fail@plt+0x4eac>
   15d68:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15d6c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   15d70:	cmp	r1, r3
   15d74:	cmpeq	r0, r2
   15d78:	bhi	15d90 <__assert_fail@plt+0x4e64>
   15d7c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15d80:	ldrd	r0, [fp, #4]
   15d84:	cmp	r1, r3
   15d88:	cmpeq	r0, r2
   15d8c:	bcs	15e14 <__assert_fail@plt+0x4ee8>
   15d90:	mov	r3, #1
   15d94:	str	r3, [fp, #-16]
   15d98:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15d9c:	mvn	r0, #-1073741824	; 0xc0000000
   15da0:	mov	r1, #0
   15da4:	cmp	r3, r1
   15da8:	cmpeq	r2, r0
   15dac:	bls	15dc4 <__assert_fail@plt+0x4e98>
   15db0:	bl	10e6c <__errno_location@plt>
   15db4:	mov	r2, r0
   15db8:	mov	r3, #75	; 0x4b
   15dbc:	str	r3, [r2]
   15dc0:	b	15e14 <__assert_fail@plt+0x4ee8>
   15dc4:	bl	10e6c <__errno_location@plt>
   15dc8:	mov	r2, r0
   15dcc:	mov	r3, #34	; 0x22
   15dd0:	str	r3, [r2]
   15dd4:	b	15e14 <__assert_fail@plt+0x4ee8>
   15dd8:	ldr	r3, [fp, #-16]
   15ddc:	cmp	r3, #1
   15de0:	bne	15df8 <__assert_fail@plt+0x4ecc>
   15de4:	bl	10e6c <__errno_location@plt>
   15de8:	mov	r2, r0
   15dec:	mov	r3, #75	; 0x4b
   15df0:	str	r3, [r2]
   15df4:	b	15e14 <__assert_fail@plt+0x4ee8>
   15df8:	ldr	r3, [fp, #-16]
   15dfc:	cmp	r3, #3
   15e00:	bne	15e14 <__assert_fail@plt+0x4ee8>
   15e04:	bl	10e6c <__errno_location@plt>
   15e08:	mov	r2, r0
   15e0c:	mov	r3, #0
   15e10:	str	r3, [r2]
   15e14:	ldr	r3, [fp, #-16]
   15e18:	cmp	r3, #0
   15e1c:	beq	15e88 <__assert_fail@plt+0x4f5c>
   15e20:	ldr	r3, [fp, #20]
   15e24:	cmp	r3, #0
   15e28:	beq	15e34 <__assert_fail@plt+0x4f08>
   15e2c:	ldr	r4, [fp, #20]
   15e30:	b	15e38 <__assert_fail@plt+0x4f0c>
   15e34:	mov	r4, #1
   15e38:	bl	10e6c <__errno_location@plt>
   15e3c:	mov	r3, r0
   15e40:	ldr	r3, [r3]
   15e44:	cmp	r3, #22
   15e48:	beq	15e5c <__assert_fail@plt+0x4f30>
   15e4c:	bl	10e6c <__errno_location@plt>
   15e50:	mov	r3, r0
   15e54:	ldr	r5, [r3]
   15e58:	b	15e60 <__assert_fail@plt+0x4f34>
   15e5c:	mov	r5, #0
   15e60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15e64:	bl	14bd8 <__assert_fail@plt+0x3cac>
   15e68:	mov	r3, r0
   15e6c:	str	r3, [sp]
   15e70:	ldr	r3, [fp, #16]
   15e74:	movw	r2, #32928	; 0x80a0
   15e78:	movt	r2, #1
   15e7c:	mov	r1, r5
   15e80:	mov	r0, r4
   15e84:	bl	10ddc <error@plt>
   15e88:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15e8c:	mov	r0, r2
   15e90:	mov	r1, r3
   15e94:	sub	sp, fp, #12
   15e98:	ldrd	r4, [sp]
   15e9c:	ldr	fp, [sp, #8]
   15ea0:	add	sp, sp, #12
   15ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea8:	str	fp, [sp, #-8]!
   15eac:	str	lr, [sp, #4]
   15eb0:	add	fp, sp, #4
   15eb4:	sub	sp, sp, #40	; 0x28
   15eb8:	str	r0, [fp, #-8]
   15ebc:	strd	r2, [fp, #-20]	; 0xffffffec
   15ec0:	ldr	r3, [fp, #20]
   15ec4:	str	r3, [sp, #16]
   15ec8:	ldr	r3, [fp, #16]
   15ecc:	str	r3, [sp, #12]
   15ed0:	ldr	r3, [fp, #12]
   15ed4:	str	r3, [sp, #8]
   15ed8:	ldrd	r2, [fp, #4]
   15edc:	strd	r2, [sp]
   15ee0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   15ee4:	mov	r1, #10
   15ee8:	ldr	r0, [fp, #-8]
   15eec:	bl	15d18 <__assert_fail@plt+0x4dec>
   15ef0:	mov	r2, r0
   15ef4:	mov	r3, r1
   15ef8:	mov	r0, r2
   15efc:	mov	r1, r3
   15f00:	sub	sp, fp, #4
   15f04:	ldr	fp, [sp]
   15f08:	add	sp, sp, #4
   15f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f10:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15f14:	strd	r6, [sp, #8]
   15f18:	strd	r8, [sp, #16]
   15f1c:	str	fp, [sp, #24]
   15f20:	add	fp, sp, #24
   15f24:	sub	sp, sp, #44	; 0x2c
   15f28:	str	r0, [fp, #-40]	; 0xffffffd8
   15f2c:	str	r1, [fp, #-44]	; 0xffffffd4
   15f30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f34:	ldrd	r4, [r3]
   15f38:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15f3c:	mov	r6, r3
   15f40:	asr	r7, r6, #31
   15f44:	mov	r2, #0
   15f48:	mov	r3, #0
   15f4c:	strd	r2, [fp, #-60]	; 0xffffffc4
   15f50:	cmp	r6, #0
   15f54:	sbcs	r3, r7, #0
   15f58:	bge	15f70 <__assert_fail@plt+0x5044>
   15f5c:	orrs	r3, r4, r5
   15f60:	beq	15f70 <__assert_fail@plt+0x5044>
   15f64:	mov	r2, #1
   15f68:	mov	r3, #0
   15f6c:	strd	r2, [fp, #-60]	; 0xffffffc4
   15f70:	mov	r0, #0
   15f74:	mov	r1, #0
   15f78:	mov	r0, r7
   15f7c:	mov	r1, #0
   15f80:	mov	r2, #0
   15f84:	mov	r3, #0
   15f88:	mov	r2, r5
   15f8c:	mov	r3, #0
   15f90:	cmp	r0, #0
   15f94:	bne	15fb8 <__assert_fail@plt+0x508c>
   15f98:	cmp	r2, #0
   15f9c:	bne	15fac <__assert_fail@plt+0x5080>
   15fa0:	umull	r2, r3, r6, r4
   15fa4:	strd	r2, [fp, #-52]	; 0xffffffcc
   15fa8:	b	16084 <__assert_fail@plt+0x5158>
   15fac:	mov	r3, r2
   15fb0:	mov	r2, r6
   15fb4:	b	15fc8 <__assert_fail@plt+0x509c>
   15fb8:	cmp	r2, #0
   15fbc:	bne	16040 <__assert_fail@plt+0x5114>
   15fc0:	mov	r3, r0
   15fc4:	mov	r2, r4
   15fc8:	umull	r8, r9, r6, r4
   15fcc:	umull	r2, r3, r2, r3
   15fd0:	mov	r0, r2
   15fd4:	mov	r1, r3
   15fd8:	mov	r2, #0
   15fdc:	mov	r3, #0
   15fe0:	mov	r2, r9
   15fe4:	mov	r3, #0
   15fe8:	adds	ip, r0, r2
   15fec:	str	ip, [fp, #-68]	; 0xffffffbc
   15ff0:	adc	r3, r1, r3
   15ff4:	str	r3, [fp, #-64]	; 0xffffffc0
   15ff8:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   15ffc:	mov	r2, #0
   16000:	mov	r3, #0
   16004:	mov	r2, r1
   16008:	asr	r3, r1, #31
   1600c:	cmp	r2, #0
   16010:	bne	1605c <__assert_fail@plt+0x5130>
   16014:	mov	r2, #0
   16018:	mov	r3, #0
   1601c:	mov	r3, r0
   16020:	mov	r2, #0
   16024:	mov	r0, r8
   16028:	mov	r1, #0
   1602c:	orr	ip, r2, r0
   16030:	str	ip, [fp, #-52]	; 0xffffffcc
   16034:	orr	r3, r3, r1
   16038:	str	r3, [fp, #-48]	; 0xffffffd0
   1603c:	b	16084 <__assert_fail@plt+0x5158>
   16040:	mul	r2, r4, r7
   16044:	mul	r3, r6, r5
   16048:	add	r1, r2, r3
   1604c:	umull	r2, r3, r6, r4
   16050:	add	r1, r1, r3
   16054:	mov	r3, r1
   16058:	strd	r2, [fp, #-52]	; 0xffffffcc
   1605c:	mul	r2, r4, r7
   16060:	mul	r3, r6, r5
   16064:	add	r1, r2, r3
   16068:	umull	r2, r3, r6, r4
   1606c:	add	r1, r1, r3
   16070:	mov	r3, r1
   16074:	strd	r2, [fp, #-52]	; 0xffffffcc
   16078:	mov	r2, #1
   1607c:	mov	r3, #0
   16080:	strd	r2, [fp, #-60]	; 0xffffffc4
   16084:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   16088:	strd	r2, [fp, #-36]	; 0xffffffdc
   1608c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   16090:	mov	r3, r2
   16094:	and	r3, r3, #1
   16098:	uxtb	r3, r3
   1609c:	cmp	r3, #0
   160a0:	beq	160bc <__assert_fail@plt+0x5190>
   160a4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   160a8:	mvn	r2, #0
   160ac:	mvn	r3, #0
   160b0:	strd	r2, [r1]
   160b4:	mov	r3, #1
   160b8:	b	160cc <__assert_fail@plt+0x51a0>
   160bc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   160c0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   160c4:	strd	r2, [r1]
   160c8:	mov	r3, #0
   160cc:	mov	r0, r3
   160d0:	sub	sp, fp, #24
   160d4:	ldrd	r4, [sp]
   160d8:	ldrd	r6, [sp, #8]
   160dc:	ldrd	r8, [sp, #16]
   160e0:	ldr	fp, [sp, #24]
   160e4:	add	sp, sp, #28
   160e8:	bx	lr
   160ec:	str	fp, [sp, #-8]!
   160f0:	str	lr, [sp, #4]
   160f4:	add	fp, sp, #4
   160f8:	sub	sp, sp, #24
   160fc:	str	r0, [fp, #-16]
   16100:	str	r1, [fp, #-20]	; 0xffffffec
   16104:	str	r2, [fp, #-24]	; 0xffffffe8
   16108:	mov	r3, #0
   1610c:	str	r3, [fp, #-8]
   16110:	b	16130 <__assert_fail@plt+0x5204>
   16114:	ldr	r1, [fp, #-20]	; 0xffffffec
   16118:	ldr	r0, [fp, #-16]
   1611c:	bl	15f10 <__assert_fail@plt+0x4fe4>
   16120:	mov	r2, r0
   16124:	ldr	r3, [fp, #-8]
   16128:	orr	r3, r3, r2
   1612c:	str	r3, [fp, #-8]
   16130:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16134:	sub	r2, r3, #1
   16138:	str	r2, [fp, #-24]	; 0xffffffe8
   1613c:	cmp	r3, #0
   16140:	bne	16114 <__assert_fail@plt+0x51e8>
   16144:	ldr	r3, [fp, #-8]
   16148:	mov	r0, r3
   1614c:	sub	sp, fp, #4
   16150:	ldr	fp, [sp]
   16154:	add	sp, sp, #4
   16158:	pop	{pc}		; (ldr pc, [sp], #4)
   1615c:	str	fp, [sp, #-8]!
   16160:	str	lr, [sp, #4]
   16164:	add	fp, sp, #4
   16168:	sub	sp, sp, #56	; 0x38
   1616c:	str	r0, [fp, #-48]	; 0xffffffd0
   16170:	str	r1, [fp, #-52]	; 0xffffffcc
   16174:	str	r2, [fp, #-56]	; 0xffffffc8
   16178:	str	r3, [fp, #-60]	; 0xffffffc4
   1617c:	mov	r3, #0
   16180:	str	r3, [fp, #-8]
   16184:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16188:	cmp	r3, #0
   1618c:	blt	1619c <__assert_fail@plt+0x5270>
   16190:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16194:	cmp	r3, #36	; 0x24
   16198:	ble	161bc <__assert_fail@plt+0x5290>
   1619c:	movw	r3, #32992	; 0x80e0
   161a0:	movt	r3, #1
   161a4:	mov	r2, #85	; 0x55
   161a8:	movw	r1, #32936	; 0x80a8
   161ac:	movt	r1, #1
   161b0:	movw	r0, #32952	; 0x80b8
   161b4:	movt	r0, #1
   161b8:	bl	10f2c <__assert_fail@plt>
   161bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   161c0:	cmp	r3, #0
   161c4:	bne	161d0 <__assert_fail@plt+0x52a4>
   161c8:	sub	r3, fp, #36	; 0x24
   161cc:	b	161d4 <__assert_fail@plt+0x52a8>
   161d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   161d4:	str	r3, [fp, #-32]	; 0xffffffe0
   161d8:	bl	10e6c <__errno_location@plt>
   161dc:	mov	r2, r0
   161e0:	mov	r3, #0
   161e4:	str	r3, [r2]
   161e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   161ec:	str	r3, [fp, #-12]
   161f0:	ldr	r3, [fp, #-12]
   161f4:	ldrb	r3, [r3]
   161f8:	strb	r3, [fp, #-13]
   161fc:	b	16218 <__assert_fail@plt+0x52ec>
   16200:	ldr	r3, [fp, #-12]
   16204:	add	r3, r3, #1
   16208:	str	r3, [fp, #-12]
   1620c:	ldr	r3, [fp, #-12]
   16210:	ldrb	r3, [r3]
   16214:	strb	r3, [fp, #-13]
   16218:	bl	10e24 <__ctype_b_loc@plt>
   1621c:	mov	r3, r0
   16220:	ldr	r2, [r3]
   16224:	ldrb	r3, [fp, #-13]
   16228:	lsl	r3, r3, #1
   1622c:	add	r3, r2, r3
   16230:	ldrh	r3, [r3]
   16234:	and	r3, r3, #8192	; 0x2000
   16238:	cmp	r3, #0
   1623c:	bne	16200 <__assert_fail@plt+0x52d4>
   16240:	ldrb	r3, [fp, #-13]
   16244:	cmp	r3, #45	; 0x2d
   16248:	bne	16254 <__assert_fail@plt+0x5328>
   1624c:	mov	r3, #4
   16250:	b	1679c <__assert_fail@plt+0x5870>
   16254:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16258:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1625c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16260:	bl	10e9c <strtoumax@plt>
   16264:	mov	r2, r0
   16268:	mov	r3, r1
   1626c:	strd	r2, [fp, #-44]	; 0xffffffd4
   16270:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16274:	ldr	r3, [r3]
   16278:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1627c:	cmp	r2, r3
   16280:	bne	162e0 <__assert_fail@plt+0x53b4>
   16284:	ldr	r3, [fp, #4]
   16288:	cmp	r3, #0
   1628c:	beq	162d8 <__assert_fail@plt+0x53ac>
   16290:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16294:	ldr	r3, [r3]
   16298:	ldrb	r3, [r3]
   1629c:	cmp	r3, #0
   162a0:	beq	162d8 <__assert_fail@plt+0x53ac>
   162a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162a8:	ldr	r3, [r3]
   162ac:	ldrb	r3, [r3]
   162b0:	mov	r1, r3
   162b4:	ldr	r0, [fp, #4]
   162b8:	bl	10e54 <strchr@plt>
   162bc:	mov	r3, r0
   162c0:	cmp	r3, #0
   162c4:	beq	162d8 <__assert_fail@plt+0x53ac>
   162c8:	mov	r2, #1
   162cc:	mov	r3, #0
   162d0:	strd	r2, [fp, #-44]	; 0xffffffd4
   162d4:	b	16318 <__assert_fail@plt+0x53ec>
   162d8:	mov	r3, #4
   162dc:	b	1679c <__assert_fail@plt+0x5870>
   162e0:	bl	10e6c <__errno_location@plt>
   162e4:	mov	r3, r0
   162e8:	ldr	r3, [r3]
   162ec:	cmp	r3, #0
   162f0:	beq	16318 <__assert_fail@plt+0x53ec>
   162f4:	bl	10e6c <__errno_location@plt>
   162f8:	mov	r3, r0
   162fc:	ldr	r3, [r3]
   16300:	cmp	r3, #34	; 0x22
   16304:	beq	16310 <__assert_fail@plt+0x53e4>
   16308:	mov	r3, #4
   1630c:	b	1679c <__assert_fail@plt+0x5870>
   16310:	mov	r3, #1
   16314:	str	r3, [fp, #-8]
   16318:	ldr	r3, [fp, #4]
   1631c:	cmp	r3, #0
   16320:	bne	16338 <__assert_fail@plt+0x540c>
   16324:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16328:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1632c:	strd	r2, [r1]
   16330:	ldr	r3, [fp, #-8]
   16334:	b	1679c <__assert_fail@plt+0x5870>
   16338:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1633c:	ldr	r3, [r3]
   16340:	ldrb	r3, [r3]
   16344:	cmp	r3, #0
   16348:	beq	1678c <__assert_fail@plt+0x5860>
   1634c:	mov	r3, #1024	; 0x400
   16350:	str	r3, [fp, #-20]	; 0xffffffec
   16354:	mov	r3, #1
   16358:	str	r3, [fp, #-24]	; 0xffffffe8
   1635c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16360:	ldr	r3, [r3]
   16364:	ldrb	r3, [r3]
   16368:	mov	r1, r3
   1636c:	ldr	r0, [fp, #4]
   16370:	bl	10e54 <strchr@plt>
   16374:	mov	r3, r0
   16378:	cmp	r3, #0
   1637c:	bne	16398 <__assert_fail@plt+0x546c>
   16380:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16384:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16388:	strd	r2, [r1]
   1638c:	ldr	r3, [fp, #-8]
   16390:	orr	r3, r3, #2
   16394:	b	1679c <__assert_fail@plt+0x5870>
   16398:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1639c:	ldr	r3, [r3]
   163a0:	ldrb	r3, [r3]
   163a4:	sub	r3, r3, #69	; 0x45
   163a8:	cmp	r3, #47	; 0x2f
   163ac:	ldrls	pc, [pc, r3, lsl #2]
   163b0:	b	16504 <__assert_fail@plt+0x55d8>
   163b4:	andeq	r6, r1, r4, ror r4
   163b8:	andeq	r6, r1, r4, lsl #10
   163bc:	andeq	r6, r1, r4, ror r4
   163c0:	andeq	r6, r1, r4, lsl #10
   163c4:	andeq	r6, r1, r4, lsl #10
   163c8:	andeq	r6, r1, r4, lsl #10
   163cc:	andeq	r6, r1, r4, ror r4
   163d0:	andeq	r6, r1, r4, lsl #10
   163d4:	andeq	r6, r1, r4, ror r4
   163d8:	andeq	r6, r1, r4, lsl #10
   163dc:	andeq	r6, r1, r4, lsl #10
   163e0:	andeq	r6, r1, r4, ror r4
   163e4:	andeq	r6, r1, r4, lsl #10
   163e8:	andeq	r6, r1, r4, lsl #10
   163ec:	andeq	r6, r1, r4, lsl #10
   163f0:	andeq	r6, r1, r4, ror r4
   163f4:	andeq	r6, r1, r4, lsl #10
   163f8:	andeq	r6, r1, r4, lsl #10
   163fc:	andeq	r6, r1, r4, lsl #10
   16400:	andeq	r6, r1, r4, lsl #10
   16404:	andeq	r6, r1, r4, ror r4
   16408:	andeq	r6, r1, r4, ror r4
   1640c:	andeq	r6, r1, r4, lsl #10
   16410:	andeq	r6, r1, r4, lsl #10
   16414:	andeq	r6, r1, r4, lsl #10
   16418:	andeq	r6, r1, r4, lsl #10
   1641c:	andeq	r6, r1, r4, lsl #10
   16420:	andeq	r6, r1, r4, lsl #10
   16424:	andeq	r6, r1, r4, lsl #10
   16428:	andeq	r6, r1, r4, lsl #10
   1642c:	andeq	r6, r1, r4, lsl #10
   16430:	andeq	r6, r1, r4, lsl #10
   16434:	andeq	r6, r1, r4, lsl #10
   16438:	andeq	r6, r1, r4, lsl #10
   1643c:	andeq	r6, r1, r4, ror r4
   16440:	andeq	r6, r1, r4, lsl #10
   16444:	andeq	r6, r1, r4, lsl #10
   16448:	andeq	r6, r1, r4, lsl #10
   1644c:	andeq	r6, r1, r4, ror r4
   16450:	andeq	r6, r1, r4, lsl #10
   16454:	andeq	r6, r1, r4, ror r4
   16458:	andeq	r6, r1, r4, lsl #10
   1645c:	andeq	r6, r1, r4, lsl #10
   16460:	andeq	r6, r1, r4, lsl #10
   16464:	andeq	r6, r1, r4, lsl #10
   16468:	andeq	r6, r1, r4, lsl #10
   1646c:	andeq	r6, r1, r4, lsl #10
   16470:	andeq	r6, r1, r4, ror r4
   16474:	mov	r1, #48	; 0x30
   16478:	ldr	r0, [fp, #4]
   1647c:	bl	10e54 <strchr@plt>
   16480:	mov	r3, r0
   16484:	cmp	r3, #0
   16488:	beq	164f8 <__assert_fail@plt+0x55cc>
   1648c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16490:	ldr	r3, [r3]
   16494:	add	r3, r3, #1
   16498:	ldrb	r3, [r3]
   1649c:	cmp	r3, #68	; 0x44
   164a0:	beq	164e0 <__assert_fail@plt+0x55b4>
   164a4:	cmp	r3, #105	; 0x69
   164a8:	beq	164b8 <__assert_fail@plt+0x558c>
   164ac:	cmp	r3, #66	; 0x42
   164b0:	beq	164e0 <__assert_fail@plt+0x55b4>
   164b4:	b	16504 <__assert_fail@plt+0x55d8>
   164b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164bc:	ldr	r3, [r3]
   164c0:	add	r3, r3, #2
   164c4:	ldrb	r3, [r3]
   164c8:	cmp	r3, #66	; 0x42
   164cc:	bne	16500 <__assert_fail@plt+0x55d4>
   164d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164d4:	add	r3, r3, #2
   164d8:	str	r3, [fp, #-24]	; 0xffffffe8
   164dc:	b	16500 <__assert_fail@plt+0x55d4>
   164e0:	mov	r3, #1000	; 0x3e8
   164e4:	str	r3, [fp, #-20]	; 0xffffffec
   164e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164ec:	add	r3, r3, #1
   164f0:	str	r3, [fp, #-24]	; 0xffffffe8
   164f4:	b	16504 <__assert_fail@plt+0x55d8>
   164f8:	nop	{0}
   164fc:	b	16504 <__assert_fail@plt+0x55d8>
   16500:	nop	{0}
   16504:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16508:	ldr	r3, [r3]
   1650c:	ldrb	r3, [r3]
   16510:	sub	r3, r3, #66	; 0x42
   16514:	cmp	r3, #53	; 0x35
   16518:	ldrls	pc, [pc, r3, lsl #2]
   1651c:	b	1672c <__assert_fail@plt+0x5800>
   16520:	andeq	r6, r1, r0, lsl r6
   16524:	andeq	r6, r1, ip, lsr #14
   16528:	andeq	r6, r1, ip, lsr #14
   1652c:	andeq	r6, r1, r4, lsr r6
   16530:	andeq	r6, r1, ip, lsr #14
   16534:	andeq	r6, r1, r0, asr r6
   16538:	andeq	r6, r1, ip, lsr #14
   1653c:	andeq	r6, r1, ip, lsr #14
   16540:	andeq	r6, r1, ip, lsr #14
   16544:	andeq	r6, r1, ip, ror #12
   16548:	andeq	r6, r1, ip, lsr #14
   1654c:	andeq	r6, r1, r8, lsl #13
   16550:	andeq	r6, r1, ip, lsr #14
   16554:	andeq	r6, r1, ip, lsr #14
   16558:	andeq	r6, r1, r4, lsr #13
   1655c:	andeq	r6, r1, ip, lsr #14
   16560:	andeq	r6, r1, ip, lsr #14
   16564:	andeq	r6, r1, ip, lsr #14
   16568:	andeq	r6, r1, r0, asr #13
   1656c:	andeq	r6, r1, ip, lsr #14
   16570:	andeq	r6, r1, ip, lsr #14
   16574:	andeq	r6, r1, ip, lsr #14
   16578:	andeq	r6, r1, ip, lsr #14
   1657c:	strdeq	r6, [r1], -r4
   16580:	andeq	r6, r1, r0, lsl r7
   16584:	andeq	r6, r1, ip, lsr #14
   16588:	andeq	r6, r1, ip, lsr #14
   1658c:	andeq	r6, r1, ip, lsr #14
   16590:	andeq	r6, r1, ip, lsr #14
   16594:	andeq	r6, r1, ip, lsr #14
   16598:	andeq	r6, r1, ip, lsr #14
   1659c:	andeq	r6, r1, ip, lsr #14
   165a0:	strdeq	r6, [r1], -r8
   165a4:	andeq	r6, r1, r8, lsr #12
   165a8:	andeq	r6, r1, ip, lsr #14
   165ac:	andeq	r6, r1, ip, lsr #14
   165b0:	andeq	r6, r1, ip, lsr #14
   165b4:	andeq	r6, r1, r0, asr r6
   165b8:	andeq	r6, r1, ip, lsr #14
   165bc:	andeq	r6, r1, ip, lsr #14
   165c0:	andeq	r6, r1, ip, lsr #14
   165c4:	andeq	r6, r1, ip, ror #12
   165c8:	andeq	r6, r1, ip, lsr #14
   165cc:	andeq	r6, r1, r8, lsl #13
   165d0:	andeq	r6, r1, ip, lsr #14
   165d4:	andeq	r6, r1, ip, lsr #14
   165d8:	andeq	r6, r1, ip, lsr #14
   165dc:	andeq	r6, r1, ip, lsr #14
   165e0:	andeq	r6, r1, ip, lsr #14
   165e4:	andeq	r6, r1, ip, lsr #14
   165e8:	andeq	r6, r1, r0, asr #13
   165ec:	andeq	r6, r1, ip, lsr #14
   165f0:	andeq	r6, r1, ip, lsr #14
   165f4:	ldrdeq	r6, [r1], -ip
   165f8:	sub	r3, fp, #44	; 0x2c
   165fc:	mov	r1, #512	; 0x200
   16600:	mov	r0, r3
   16604:	bl	15f10 <__assert_fail@plt+0x4fe4>
   16608:	str	r0, [fp, #-28]	; 0xffffffe4
   1660c:	b	16744 <__assert_fail@plt+0x5818>
   16610:	sub	r3, fp, #44	; 0x2c
   16614:	mov	r1, #1024	; 0x400
   16618:	mov	r0, r3
   1661c:	bl	15f10 <__assert_fail@plt+0x4fe4>
   16620:	str	r0, [fp, #-28]	; 0xffffffe4
   16624:	b	16744 <__assert_fail@plt+0x5818>
   16628:	mov	r3, #0
   1662c:	str	r3, [fp, #-28]	; 0xffffffe4
   16630:	b	16744 <__assert_fail@plt+0x5818>
   16634:	sub	r3, fp, #44	; 0x2c
   16638:	mov	r2, #6
   1663c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16640:	mov	r0, r3
   16644:	bl	160ec <__assert_fail@plt+0x51c0>
   16648:	str	r0, [fp, #-28]	; 0xffffffe4
   1664c:	b	16744 <__assert_fail@plt+0x5818>
   16650:	sub	r3, fp, #44	; 0x2c
   16654:	mov	r2, #3
   16658:	ldr	r1, [fp, #-20]	; 0xffffffec
   1665c:	mov	r0, r3
   16660:	bl	160ec <__assert_fail@plt+0x51c0>
   16664:	str	r0, [fp, #-28]	; 0xffffffe4
   16668:	b	16744 <__assert_fail@plt+0x5818>
   1666c:	sub	r3, fp, #44	; 0x2c
   16670:	mov	r2, #1
   16674:	ldr	r1, [fp, #-20]	; 0xffffffec
   16678:	mov	r0, r3
   1667c:	bl	160ec <__assert_fail@plt+0x51c0>
   16680:	str	r0, [fp, #-28]	; 0xffffffe4
   16684:	b	16744 <__assert_fail@plt+0x5818>
   16688:	sub	r3, fp, #44	; 0x2c
   1668c:	mov	r2, #2
   16690:	ldr	r1, [fp, #-20]	; 0xffffffec
   16694:	mov	r0, r3
   16698:	bl	160ec <__assert_fail@plt+0x51c0>
   1669c:	str	r0, [fp, #-28]	; 0xffffffe4
   166a0:	b	16744 <__assert_fail@plt+0x5818>
   166a4:	sub	r3, fp, #44	; 0x2c
   166a8:	mov	r2, #5
   166ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   166b0:	mov	r0, r3
   166b4:	bl	160ec <__assert_fail@plt+0x51c0>
   166b8:	str	r0, [fp, #-28]	; 0xffffffe4
   166bc:	b	16744 <__assert_fail@plt+0x5818>
   166c0:	sub	r3, fp, #44	; 0x2c
   166c4:	mov	r2, #4
   166c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   166cc:	mov	r0, r3
   166d0:	bl	160ec <__assert_fail@plt+0x51c0>
   166d4:	str	r0, [fp, #-28]	; 0xffffffe4
   166d8:	b	16744 <__assert_fail@plt+0x5818>
   166dc:	sub	r3, fp, #44	; 0x2c
   166e0:	mov	r1, #2
   166e4:	mov	r0, r3
   166e8:	bl	15f10 <__assert_fail@plt+0x4fe4>
   166ec:	str	r0, [fp, #-28]	; 0xffffffe4
   166f0:	b	16744 <__assert_fail@plt+0x5818>
   166f4:	sub	r3, fp, #44	; 0x2c
   166f8:	mov	r2, #8
   166fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16700:	mov	r0, r3
   16704:	bl	160ec <__assert_fail@plt+0x51c0>
   16708:	str	r0, [fp, #-28]	; 0xffffffe4
   1670c:	b	16744 <__assert_fail@plt+0x5818>
   16710:	sub	r3, fp, #44	; 0x2c
   16714:	mov	r2, #7
   16718:	ldr	r1, [fp, #-20]	; 0xffffffec
   1671c:	mov	r0, r3
   16720:	bl	160ec <__assert_fail@plt+0x51c0>
   16724:	str	r0, [fp, #-28]	; 0xffffffe4
   16728:	b	16744 <__assert_fail@plt+0x5818>
   1672c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16730:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16734:	strd	r2, [r1]
   16738:	ldr	r3, [fp, #-8]
   1673c:	orr	r3, r3, #2
   16740:	b	1679c <__assert_fail@plt+0x5870>
   16744:	ldr	r2, [fp, #-8]
   16748:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1674c:	orr	r3, r2, r3
   16750:	str	r3, [fp, #-8]
   16754:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16758:	ldr	r2, [r3]
   1675c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16760:	add	r2, r2, r3
   16764:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16768:	str	r2, [r3]
   1676c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16770:	ldr	r3, [r3]
   16774:	ldrb	r3, [r3]
   16778:	cmp	r3, #0
   1677c:	beq	1678c <__assert_fail@plt+0x5860>
   16780:	ldr	r3, [fp, #-8]
   16784:	orr	r3, r3, #2
   16788:	str	r3, [fp, #-8]
   1678c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16790:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16794:	strd	r2, [r1]
   16798:	ldr	r3, [fp, #-8]
   1679c:	mov	r0, r3
   167a0:	sub	sp, fp, #4
   167a4:	ldr	fp, [sp]
   167a8:	add	sp, sp, #4
   167ac:	pop	{pc}		; (ldr pc, [sp], #4)
   167b0:	str	fp, [sp, #-8]!
   167b4:	str	lr, [sp, #4]
   167b8:	add	fp, sp, #4
   167bc:	sub	sp, sp, #16
   167c0:	str	r0, [fp, #-16]
   167c4:	str	r1, [fp, #-20]	; 0xffffffec
   167c8:	ldr	r3, [fp, #-16]
   167cc:	cmp	r3, #0
   167d0:	beq	167e0 <__assert_fail@plt+0x58b4>
   167d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   167d8:	cmp	r3, #0
   167dc:	bne	167f0 <__assert_fail@plt+0x58c4>
   167e0:	mov	r3, #1
   167e4:	str	r3, [fp, #-20]	; 0xffffffec
   167e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   167ec:	str	r3, [fp, #-16]
   167f0:	mov	ip, #0
   167f4:	ldr	r2, [fp, #-16]
   167f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   167fc:	umull	r0, r1, r2, r3
   16800:	mov	r2, #0
   16804:	mov	r3, #0
   16808:	mov	r2, r1
   1680c:	mov	r3, #0
   16810:	cmp	r2, #0
   16814:	beq	1681c <__assert_fail@plt+0x58f0>
   16818:	mov	ip, #1
   1681c:	cmp	r0, #0
   16820:	bge	16828 <__assert_fail@plt+0x58fc>
   16824:	mov	ip, #1
   16828:	mov	r3, ip
   1682c:	and	r3, r3, #1
   16830:	uxtb	r3, r3
   16834:	cmp	r3, #0
   16838:	beq	16854 <__assert_fail@plt+0x5928>
   1683c:	bl	10e6c <__errno_location@plt>
   16840:	mov	r2, r0
   16844:	mov	r3, #12
   16848:	str	r3, [r2]
   1684c:	mov	r3, #0
   16850:	b	1686c <__assert_fail@plt+0x5940>
   16854:	ldr	r1, [fp, #-20]	; 0xffffffec
   16858:	ldr	r0, [fp, #-16]
   1685c:	bl	10cbc <calloc@plt>
   16860:	mov	r3, r0
   16864:	str	r3, [fp, #-8]
   16868:	ldr	r3, [fp, #-8]
   1686c:	mov	r0, r3
   16870:	sub	sp, fp, #4
   16874:	ldr	fp, [sp]
   16878:	add	sp, sp, #4
   1687c:	pop	{pc}		; (ldr pc, [sp], #4)
   16880:	str	fp, [sp, #-8]!
   16884:	str	lr, [sp, #4]
   16888:	add	fp, sp, #4
   1688c:	sub	sp, sp, #16
   16890:	str	r0, [fp, #-16]
   16894:	ldr	r3, [fp, #-16]
   16898:	cmp	r3, #0
   1689c:	bne	168a8 <__assert_fail@plt+0x597c>
   168a0:	mov	r3, #1
   168a4:	str	r3, [fp, #-16]
   168a8:	mov	r2, #0
   168ac:	ldr	r3, [fp, #-16]
   168b0:	cmp	r3, #0
   168b4:	bge	168bc <__assert_fail@plt+0x5990>
   168b8:	mov	r2, #1
   168bc:	mov	r3, r2
   168c0:	and	r3, r3, #1
   168c4:	uxtb	r3, r3
   168c8:	cmp	r3, #0
   168cc:	beq	168e8 <__assert_fail@plt+0x59bc>
   168d0:	bl	10e6c <__errno_location@plt>
   168d4:	mov	r2, r0
   168d8:	mov	r3, #12
   168dc:	str	r3, [r2]
   168e0:	mov	r3, #0
   168e4:	b	168fc <__assert_fail@plt+0x59d0>
   168e8:	ldr	r0, [fp, #-16]
   168ec:	bl	10de8 <malloc@plt>
   168f0:	mov	r3, r0
   168f4:	str	r3, [fp, #-8]
   168f8:	ldr	r3, [fp, #-8]
   168fc:	mov	r0, r3
   16900:	sub	sp, fp, #4
   16904:	ldr	fp, [sp]
   16908:	add	sp, sp, #4
   1690c:	pop	{pc}		; (ldr pc, [sp], #4)
   16910:	str	fp, [sp, #-8]!
   16914:	str	lr, [sp, #4]
   16918:	add	fp, sp, #4
   1691c:	sub	sp, sp, #16
   16920:	str	r0, [fp, #-16]
   16924:	str	r1, [fp, #-20]	; 0xffffffec
   16928:	ldr	r3, [fp, #-16]
   1692c:	cmp	r3, #0
   16930:	bne	16944 <__assert_fail@plt+0x5a18>
   16934:	ldr	r0, [fp, #-20]	; 0xffffffec
   16938:	bl	16880 <__assert_fail@plt+0x5954>
   1693c:	mov	r3, r0
   16940:	b	169b4 <__assert_fail@plt+0x5a88>
   16944:	ldr	r3, [fp, #-20]	; 0xffffffec
   16948:	cmp	r3, #0
   1694c:	bne	16960 <__assert_fail@plt+0x5a34>
   16950:	ldr	r0, [fp, #-16]
   16954:	bl	16b58 <__assert_fail@plt+0x5c2c>
   16958:	mov	r3, #0
   1695c:	b	169b4 <__assert_fail@plt+0x5a88>
   16960:	mov	r2, #0
   16964:	ldr	r3, [fp, #-20]	; 0xffffffec
   16968:	cmp	r3, #0
   1696c:	bge	16974 <__assert_fail@plt+0x5a48>
   16970:	mov	r2, #1
   16974:	mov	r3, r2
   16978:	and	r3, r3, #1
   1697c:	uxtb	r3, r3
   16980:	cmp	r3, #0
   16984:	beq	169a0 <__assert_fail@plt+0x5a74>
   16988:	bl	10e6c <__errno_location@plt>
   1698c:	mov	r2, r0
   16990:	mov	r3, #12
   16994:	str	r3, [r2]
   16998:	mov	r3, #0
   1699c:	b	169b4 <__assert_fail@plt+0x5a88>
   169a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   169a4:	ldr	r0, [fp, #-16]
   169a8:	bl	10d70 <realloc@plt>
   169ac:	str	r0, [fp, #-8]
   169b0:	ldr	r3, [fp, #-8]
   169b4:	mov	r0, r3
   169b8:	sub	sp, fp, #4
   169bc:	ldr	fp, [sp]
   169c0:	add	sp, sp, #4
   169c4:	pop	{pc}		; (ldr pc, [sp], #4)
   169c8:	strd	r4, [sp, #-16]!
   169cc:	str	fp, [sp, #8]
   169d0:	str	lr, [sp, #12]
   169d4:	add	fp, sp, #12
   169d8:	sub	sp, sp, #16
   169dc:	str	r0, [fp, #-24]	; 0xffffffe8
   169e0:	str	r1, [fp, #-28]	; 0xffffffe4
   169e4:	ldr	r5, [fp, #-24]	; 0xffffffe8
   169e8:	ldr	r4, [fp, #-28]	; 0xffffffe4
   169ec:	cmp	r5, r4
   169f0:	bne	169fc <__assert_fail@plt+0x5ad0>
   169f4:	mov	r3, #0
   169f8:	b	16a5c <__assert_fail@plt+0x5b30>
   169fc:	ldrb	r3, [r5]
   16a00:	mov	r0, r3
   16a04:	bl	173e4 <__assert_fail@plt+0x64b8>
   16a08:	mov	r3, r0
   16a0c:	strb	r3, [fp, #-13]
   16a10:	ldrb	r3, [r4]
   16a14:	mov	r0, r3
   16a18:	bl	173e4 <__assert_fail@plt+0x64b8>
   16a1c:	mov	r3, r0
   16a20:	strb	r3, [fp, #-14]
   16a24:	ldrb	r3, [fp, #-13]
   16a28:	cmp	r3, #0
   16a2c:	beq	16a4c <__assert_fail@plt+0x5b20>
   16a30:	add	r5, r5, #1
   16a34:	add	r4, r4, #1
   16a38:	ldrb	r2, [fp, #-13]
   16a3c:	ldrb	r3, [fp, #-14]
   16a40:	cmp	r2, r3
   16a44:	beq	169fc <__assert_fail@plt+0x5ad0>
   16a48:	b	16a50 <__assert_fail@plt+0x5b24>
   16a4c:	nop	{0}
   16a50:	ldrb	r2, [fp, #-13]
   16a54:	ldrb	r3, [fp, #-14]
   16a58:	sub	r3, r2, r3
   16a5c:	mov	r0, r3
   16a60:	sub	sp, fp, #12
   16a64:	ldrd	r4, [sp]
   16a68:	ldr	fp, [sp, #8]
   16a6c:	add	sp, sp, #12
   16a70:	pop	{pc}		; (ldr pc, [sp], #4)
   16a74:	str	fp, [sp, #-8]!
   16a78:	str	lr, [sp, #4]
   16a7c:	add	fp, sp, #4
   16a80:	sub	sp, sp, #16
   16a84:	str	r0, [fp, #-16]
   16a88:	ldr	r0, [fp, #-16]
   16a8c:	bl	10db8 <__fpending@plt>
   16a90:	mov	r3, r0
   16a94:	cmp	r3, #0
   16a98:	movne	r3, #1
   16a9c:	moveq	r3, #0
   16aa0:	strb	r3, [fp, #-5]
   16aa4:	ldr	r0, [fp, #-16]
   16aa8:	bl	10dc4 <ferror_unlocked@plt>
   16aac:	mov	r3, r0
   16ab0:	cmp	r3, #0
   16ab4:	movne	r3, #1
   16ab8:	moveq	r3, #0
   16abc:	strb	r3, [fp, #-6]
   16ac0:	ldr	r0, [fp, #-16]
   16ac4:	bl	11fc4 <__assert_fail@plt+0x1098>
   16ac8:	mov	r3, r0
   16acc:	cmp	r3, #0
   16ad0:	movne	r3, #1
   16ad4:	moveq	r3, #0
   16ad8:	strb	r3, [fp, #-7]
   16adc:	ldrb	r3, [fp, #-6]
   16ae0:	cmp	r3, #0
   16ae4:	bne	16b14 <__assert_fail@plt+0x5be8>
   16ae8:	ldrb	r3, [fp, #-7]
   16aec:	cmp	r3, #0
   16af0:	beq	16b40 <__assert_fail@plt+0x5c14>
   16af4:	ldrb	r3, [fp, #-5]
   16af8:	cmp	r3, #0
   16afc:	bne	16b14 <__assert_fail@plt+0x5be8>
   16b00:	bl	10e6c <__errno_location@plt>
   16b04:	mov	r3, r0
   16b08:	ldr	r3, [r3]
   16b0c:	cmp	r3, #9
   16b10:	beq	16b40 <__assert_fail@plt+0x5c14>
   16b14:	ldrb	r3, [fp, #-7]
   16b18:	eor	r3, r3, #1
   16b1c:	uxtb	r3, r3
   16b20:	cmp	r3, #0
   16b24:	beq	16b38 <__assert_fail@plt+0x5c0c>
   16b28:	bl	10e6c <__errno_location@plt>
   16b2c:	mov	r2, r0
   16b30:	mov	r3, #0
   16b34:	str	r3, [r2]
   16b38:	mvn	r3, #0
   16b3c:	b	16b44 <__assert_fail@plt+0x5c18>
   16b40:	mov	r3, #0
   16b44:	mov	r0, r3
   16b48:	sub	sp, fp, #4
   16b4c:	ldr	fp, [sp]
   16b50:	add	sp, sp, #4
   16b54:	pop	{pc}		; (ldr pc, [sp], #4)
   16b58:	str	r4, [sp, #-12]!
   16b5c:	str	fp, [sp, #4]
   16b60:	str	lr, [sp, #8]
   16b64:	add	fp, sp, #8
   16b68:	sub	sp, sp, #20
   16b6c:	str	r0, [fp, #-24]	; 0xffffffe8
   16b70:	bl	10e6c <__errno_location@plt>
   16b74:	mov	r3, r0
   16b78:	ldr	r3, [r3]
   16b7c:	str	r3, [fp, #-20]	; 0xffffffec
   16b80:	bl	10e6c <__errno_location@plt>
   16b84:	mov	r3, r0
   16b88:	ldr	r3, [r3]
   16b8c:	str	r3, [fp, #-16]
   16b90:	bl	10e6c <__errno_location@plt>
   16b94:	mov	r2, r0
   16b98:	mov	r3, #0
   16b9c:	str	r3, [r2]
   16ba0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ba4:	bl	10d10 <free@plt>
   16ba8:	bl	10e6c <__errno_location@plt>
   16bac:	mov	r3, r0
   16bb0:	ldr	r3, [r3]
   16bb4:	cmp	r3, #0
   16bb8:	moveq	r3, #1
   16bbc:	movne	r3, #0
   16bc0:	uxtb	r3, r3
   16bc4:	mov	r4, r3
   16bc8:	bl	10e6c <__errno_location@plt>
   16bcc:	mov	r2, r0
   16bd0:	lsl	r3, r4, #2
   16bd4:	sub	r1, fp, #12
   16bd8:	add	r3, r1, r3
   16bdc:	ldr	r3, [r3, #-8]
   16be0:	str	r3, [r2]
   16be4:	nop	{0}
   16be8:	sub	sp, fp, #8
   16bec:	ldr	r4, [sp]
   16bf0:	ldr	fp, [sp, #4]
   16bf4:	add	sp, sp, #8
   16bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bfc:	str	fp, [sp, #-8]!
   16c00:	str	lr, [sp, #4]
   16c04:	add	fp, sp, #4
   16c08:	bl	10e6c <__errno_location@plt>
   16c0c:	mov	r2, r0
   16c10:	mov	r3, #12
   16c14:	str	r3, [r2]
   16c18:	mov	r3, #0
   16c1c:	mov	r0, r3
   16c20:	sub	sp, fp, #4
   16c24:	ldr	fp, [sp]
   16c28:	add	sp, sp, #4
   16c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c30:	str	fp, [sp, #-8]!
   16c34:	str	lr, [sp, #4]
   16c38:	add	fp, sp, #4
   16c3c:	sub	sp, sp, #8
   16c40:	str	r0, [fp, #-8]
   16c44:	ldr	r3, [fp, #-8]
   16c48:	mov	r0, r3
   16c4c:	bl	16880 <__assert_fail@plt+0x5954>
   16c50:	mov	r3, r0
   16c54:	mov	r0, r3
   16c58:	sub	sp, fp, #4
   16c5c:	ldr	fp, [sp]
   16c60:	add	sp, sp, #4
   16c64:	pop	{pc}		; (ldr pc, [sp], #4)
   16c68:	str	fp, [sp, #-8]!
   16c6c:	str	lr, [sp, #4]
   16c70:	add	fp, sp, #4
   16c74:	sub	sp, sp, #8
   16c78:	str	r0, [fp, #-8]
   16c7c:	str	r1, [fp, #-12]
   16c80:	ldr	r3, [fp, #-12]
   16c84:	cmp	r3, #0
   16c88:	moveq	r3, #1
   16c8c:	movne	r3, #0
   16c90:	uxtb	r3, r3
   16c94:	mov	r2, r3
   16c98:	ldr	r3, [fp, #-12]
   16c9c:	orr	r3, r2, r3
   16ca0:	mov	r1, r3
   16ca4:	ldr	r0, [fp, #-8]
   16ca8:	bl	16910 <__assert_fail@plt+0x59e4>
   16cac:	mov	r3, r0
   16cb0:	mov	r0, r3
   16cb4:	sub	sp, fp, #4
   16cb8:	ldr	fp, [sp]
   16cbc:	add	sp, sp, #4
   16cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cc4:	str	fp, [sp, #-8]!
   16cc8:	str	lr, [sp, #4]
   16ccc:	add	fp, sp, #4
   16cd0:	sub	sp, sp, #8
   16cd4:	str	r0, [fp, #-8]
   16cd8:	str	r1, [fp, #-12]
   16cdc:	ldr	r3, [fp, #-8]
   16ce0:	ldr	r2, [fp, #-12]
   16ce4:	mov	r1, r2
   16ce8:	mov	r0, r3
   16cec:	bl	167b0 <__assert_fail@plt+0x5884>
   16cf0:	mov	r3, r0
   16cf4:	mov	r0, r3
   16cf8:	sub	sp, fp, #4
   16cfc:	ldr	fp, [sp]
   16d00:	add	sp, sp, #4
   16d04:	pop	{pc}		; (ldr pc, [sp], #4)
   16d08:	str	fp, [sp, #-8]!
   16d0c:	str	lr, [sp, #4]
   16d10:	add	fp, sp, #4
   16d14:	sub	sp, sp, #16
   16d18:	str	r0, [fp, #-8]
   16d1c:	str	r1, [fp, #-12]
   16d20:	str	r2, [fp, #-16]
   16d24:	ldr	r3, [fp, #-12]
   16d28:	cmp	r3, #0
   16d2c:	beq	16d3c <__assert_fail@plt+0x5e10>
   16d30:	ldr	r3, [fp, #-16]
   16d34:	cmp	r3, #0
   16d38:	bne	16d4c <__assert_fail@plt+0x5e20>
   16d3c:	mov	r3, #1
   16d40:	str	r3, [fp, #-16]
   16d44:	ldr	r3, [fp, #-16]
   16d48:	str	r3, [fp, #-12]
   16d4c:	ldr	r3, [fp, #-12]
   16d50:	ldr	r2, [fp, #-16]
   16d54:	mov	r1, r3
   16d58:	ldr	r0, [fp, #-8]
   16d5c:	bl	16e98 <__assert_fail@plt+0x5f6c>
   16d60:	mov	r3, r0
   16d64:	mov	r0, r3
   16d68:	sub	sp, fp, #4
   16d6c:	ldr	fp, [sp]
   16d70:	add	sp, sp, #4
   16d74:	pop	{pc}		; (ldr pc, [sp], #4)
   16d78:	str	fp, [sp, #-8]!
   16d7c:	str	lr, [sp, #4]
   16d80:	add	fp, sp, #4
   16d84:	sub	sp, sp, #8
   16d88:	mov	r0, #14
   16d8c:	bl	10ed8 <nl_langinfo@plt>
   16d90:	str	r0, [fp, #-8]
   16d94:	ldr	r3, [fp, #-8]
   16d98:	cmp	r3, #0
   16d9c:	bne	16dac <__assert_fail@plt+0x5e80>
   16da0:	movw	r3, #33004	; 0x80ec
   16da4:	movt	r3, #1
   16da8:	str	r3, [fp, #-8]
   16dac:	ldr	r3, [fp, #-8]
   16db0:	ldrb	r3, [r3]
   16db4:	cmp	r3, #0
   16db8:	bne	16dc8 <__assert_fail@plt+0x5e9c>
   16dbc:	movw	r3, #33008	; 0x80f0
   16dc0:	movt	r3, #1
   16dc4:	str	r3, [fp, #-8]
   16dc8:	ldr	r3, [fp, #-8]
   16dcc:	mov	r0, r3
   16dd0:	sub	sp, fp, #4
   16dd4:	ldr	fp, [sp]
   16dd8:	add	sp, sp, #4
   16ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   16de0:	str	fp, [sp, #-8]!
   16de4:	str	lr, [sp, #4]
   16de8:	add	fp, sp, #4
   16dec:	sub	sp, sp, #32
   16df0:	str	r0, [fp, #-24]	; 0xffffffe8
   16df4:	str	r1, [fp, #-28]	; 0xffffffe4
   16df8:	str	r2, [fp, #-32]	; 0xffffffe0
   16dfc:	str	r3, [fp, #-36]	; 0xffffffdc
   16e00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e04:	cmp	r3, #0
   16e08:	bne	16e14 <__assert_fail@plt+0x5ee8>
   16e0c:	sub	r3, fp, #16
   16e10:	str	r3, [fp, #-24]	; 0xffffffe8
   16e14:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16e18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16e1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16e20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e24:	bl	10dd0 <mbrtowc@plt>
   16e28:	str	r0, [fp, #-8]
   16e2c:	ldr	r3, [fp, #-8]
   16e30:	cmn	r3, #3
   16e34:	bls	16e80 <__assert_fail@plt+0x5f54>
   16e38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e3c:	cmp	r3, #0
   16e40:	beq	16e80 <__assert_fail@plt+0x5f54>
   16e44:	mov	r0, #0
   16e48:	bl	17464 <__assert_fail@plt+0x6538>
   16e4c:	mov	r3, r0
   16e50:	eor	r3, r3, #1
   16e54:	uxtb	r3, r3
   16e58:	cmp	r3, #0
   16e5c:	beq	16e80 <__assert_fail@plt+0x5f54>
   16e60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16e64:	ldrb	r3, [r3]
   16e68:	strb	r3, [fp, #-9]
   16e6c:	ldrb	r2, [fp, #-9]
   16e70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e74:	str	r2, [r3]
   16e78:	mov	r3, #1
   16e7c:	b	16e84 <__assert_fail@plt+0x5f58>
   16e80:	ldr	r3, [fp, #-8]
   16e84:	mov	r0, r3
   16e88:	sub	sp, fp, #4
   16e8c:	ldr	fp, [sp]
   16e90:	add	sp, sp, #4
   16e94:	pop	{pc}		; (ldr pc, [sp], #4)
   16e98:	str	fp, [sp, #-8]!
   16e9c:	str	lr, [sp, #4]
   16ea0:	add	fp, sp, #4
   16ea4:	sub	sp, sp, #24
   16ea8:	str	r0, [fp, #-16]
   16eac:	str	r1, [fp, #-20]	; 0xffffffec
   16eb0:	str	r2, [fp, #-24]	; 0xffffffe8
   16eb4:	mov	ip, #0
   16eb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   16ebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ec0:	umull	r0, r1, r2, r3
   16ec4:	mov	r2, #0
   16ec8:	mov	r3, #0
   16ecc:	mov	r2, r1
   16ed0:	mov	r3, #0
   16ed4:	cmp	r2, #0
   16ed8:	beq	16ee0 <__assert_fail@plt+0x5fb4>
   16edc:	mov	ip, #1
   16ee0:	mov	r3, r0
   16ee4:	str	r3, [fp, #-8]
   16ee8:	mov	r3, ip
   16eec:	and	r3, r3, #1
   16ef0:	uxtb	r3, r3
   16ef4:	cmp	r3, #0
   16ef8:	beq	16f14 <__assert_fail@plt+0x5fe8>
   16efc:	bl	10e6c <__errno_location@plt>
   16f00:	mov	r2, r0
   16f04:	mov	r3, #12
   16f08:	str	r3, [r2]
   16f0c:	mov	r3, #0
   16f10:	b	16f28 <__assert_fail@plt+0x5ffc>
   16f14:	ldr	r3, [fp, #-8]
   16f18:	mov	r1, r3
   16f1c:	ldr	r0, [fp, #-16]
   16f20:	bl	16910 <__assert_fail@plt+0x59e4>
   16f24:	mov	r3, r0
   16f28:	mov	r0, r3
   16f2c:	sub	sp, fp, #4
   16f30:	ldr	fp, [sp]
   16f34:	add	sp, sp, #4
   16f38:	pop	{pc}		; (ldr pc, [sp], #4)
   16f3c:	push	{fp}		; (str fp, [sp, #-4]!)
   16f40:	add	fp, sp, #0
   16f44:	sub	sp, sp, #12
   16f48:	str	r0, [fp, #-8]
   16f4c:	ldr	r3, [fp, #-8]
   16f50:	cmp	r3, #90	; 0x5a
   16f54:	bgt	16f78 <__assert_fail@plt+0x604c>
   16f58:	ldr	r3, [fp, #-8]
   16f5c:	cmp	r3, #65	; 0x41
   16f60:	bge	16f88 <__assert_fail@plt+0x605c>
   16f64:	ldr	r3, [fp, #-8]
   16f68:	sub	r3, r3, #48	; 0x30
   16f6c:	cmp	r3, #9
   16f70:	bhi	16f90 <__assert_fail@plt+0x6064>
   16f74:	b	16f88 <__assert_fail@plt+0x605c>
   16f78:	ldr	r3, [fp, #-8]
   16f7c:	sub	r3, r3, #97	; 0x61
   16f80:	cmp	r3, #25
   16f84:	bhi	16f90 <__assert_fail@plt+0x6064>
   16f88:	mov	r3, #1
   16f8c:	b	16f94 <__assert_fail@plt+0x6068>
   16f90:	mov	r3, #0
   16f94:	mov	r0, r3
   16f98:	add	sp, fp, #0
   16f9c:	pop	{fp}		; (ldr fp, [sp], #4)
   16fa0:	bx	lr
   16fa4:	push	{fp}		; (str fp, [sp, #-4]!)
   16fa8:	add	fp, sp, #0
   16fac:	sub	sp, sp, #12
   16fb0:	str	r0, [fp, #-8]
   16fb4:	ldr	r3, [fp, #-8]
   16fb8:	cmp	r3, #65	; 0x41
   16fbc:	blt	16fe4 <__assert_fail@plt+0x60b8>
   16fc0:	ldr	r3, [fp, #-8]
   16fc4:	cmp	r3, #90	; 0x5a
   16fc8:	ble	16fdc <__assert_fail@plt+0x60b0>
   16fcc:	ldr	r3, [fp, #-8]
   16fd0:	sub	r3, r3, #97	; 0x61
   16fd4:	cmp	r3, #25
   16fd8:	bhi	16fe4 <__assert_fail@plt+0x60b8>
   16fdc:	mov	r3, #1
   16fe0:	b	16fe8 <__assert_fail@plt+0x60bc>
   16fe4:	mov	r3, #0
   16fe8:	mov	r0, r3
   16fec:	add	sp, fp, #0
   16ff0:	pop	{fp}		; (ldr fp, [sp], #4)
   16ff4:	bx	lr
   16ff8:	push	{fp}		; (str fp, [sp, #-4]!)
   16ffc:	add	fp, sp, #0
   17000:	sub	sp, sp, #12
   17004:	str	r0, [fp, #-8]
   17008:	ldr	r3, [fp, #-8]
   1700c:	cmp	r3, #127	; 0x7f
   17010:	bhi	1701c <__assert_fail@plt+0x60f0>
   17014:	mov	r3, #1
   17018:	b	17020 <__assert_fail@plt+0x60f4>
   1701c:	mov	r3, #0
   17020:	mov	r0, r3
   17024:	add	sp, fp, #0
   17028:	pop	{fp}		; (ldr fp, [sp], #4)
   1702c:	bx	lr
   17030:	push	{fp}		; (str fp, [sp, #-4]!)
   17034:	add	fp, sp, #0
   17038:	sub	sp, sp, #12
   1703c:	str	r0, [fp, #-8]
   17040:	ldr	r3, [fp, #-8]
   17044:	cmp	r3, #32
   17048:	beq	17058 <__assert_fail@plt+0x612c>
   1704c:	ldr	r3, [fp, #-8]
   17050:	cmp	r3, #9
   17054:	bne	17060 <__assert_fail@plt+0x6134>
   17058:	mov	r3, #1
   1705c:	b	17064 <__assert_fail@plt+0x6138>
   17060:	mov	r3, #0
   17064:	and	r3, r3, #1
   17068:	uxtb	r3, r3
   1706c:	mov	r0, r3
   17070:	add	sp, fp, #0
   17074:	pop	{fp}		; (ldr fp, [sp], #4)
   17078:	bx	lr
   1707c:	push	{fp}		; (str fp, [sp, #-4]!)
   17080:	add	fp, sp, #0
   17084:	sub	sp, sp, #12
   17088:	str	r0, [fp, #-8]
   1708c:	ldr	r3, [fp, #-8]
   17090:	cmp	r3, #0
   17094:	blt	170b8 <__assert_fail@plt+0x618c>
   17098:	ldr	r3, [fp, #-8]
   1709c:	cmp	r3, #31
   170a0:	ble	170b0 <__assert_fail@plt+0x6184>
   170a4:	ldr	r3, [fp, #-8]
   170a8:	cmp	r3, #127	; 0x7f
   170ac:	bne	170b8 <__assert_fail@plt+0x618c>
   170b0:	mov	r3, #1
   170b4:	b	170bc <__assert_fail@plt+0x6190>
   170b8:	mov	r3, #0
   170bc:	mov	r0, r3
   170c0:	add	sp, fp, #0
   170c4:	pop	{fp}		; (ldr fp, [sp], #4)
   170c8:	bx	lr
   170cc:	push	{fp}		; (str fp, [sp, #-4]!)
   170d0:	add	fp, sp, #0
   170d4:	sub	sp, sp, #12
   170d8:	str	r0, [fp, #-8]
   170dc:	ldr	r3, [fp, #-8]
   170e0:	sub	r3, r3, #48	; 0x30
   170e4:	cmp	r3, #9
   170e8:	bhi	170f4 <__assert_fail@plt+0x61c8>
   170ec:	mov	r3, #1
   170f0:	b	170f8 <__assert_fail@plt+0x61cc>
   170f4:	mov	r3, #0
   170f8:	mov	r0, r3
   170fc:	add	sp, fp, #0
   17100:	pop	{fp}		; (ldr fp, [sp], #4)
   17104:	bx	lr
   17108:	push	{fp}		; (str fp, [sp, #-4]!)
   1710c:	add	fp, sp, #0
   17110:	sub	sp, sp, #12
   17114:	str	r0, [fp, #-8]
   17118:	ldr	r3, [fp, #-8]
   1711c:	sub	r3, r3, #33	; 0x21
   17120:	cmp	r3, #93	; 0x5d
   17124:	bhi	17130 <__assert_fail@plt+0x6204>
   17128:	mov	r3, #1
   1712c:	b	17134 <__assert_fail@plt+0x6208>
   17130:	mov	r3, #0
   17134:	mov	r0, r3
   17138:	add	sp, fp, #0
   1713c:	pop	{fp}		; (ldr fp, [sp], #4)
   17140:	bx	lr
   17144:	push	{fp}		; (str fp, [sp, #-4]!)
   17148:	add	fp, sp, #0
   1714c:	sub	sp, sp, #12
   17150:	str	r0, [fp, #-8]
   17154:	ldr	r3, [fp, #-8]
   17158:	sub	r3, r3, #97	; 0x61
   1715c:	cmp	r3, #25
   17160:	bhi	1716c <__assert_fail@plt+0x6240>
   17164:	mov	r3, #1
   17168:	b	17170 <__assert_fail@plt+0x6244>
   1716c:	mov	r3, #0
   17170:	mov	r0, r3
   17174:	add	sp, fp, #0
   17178:	pop	{fp}		; (ldr fp, [sp], #4)
   1717c:	bx	lr
   17180:	push	{fp}		; (str fp, [sp, #-4]!)
   17184:	add	fp, sp, #0
   17188:	sub	sp, sp, #12
   1718c:	str	r0, [fp, #-8]
   17190:	ldr	r3, [fp, #-8]
   17194:	sub	r3, r3, #32
   17198:	cmp	r3, #94	; 0x5e
   1719c:	bhi	171a8 <__assert_fail@plt+0x627c>
   171a0:	mov	r3, #1
   171a4:	b	171ac <__assert_fail@plt+0x6280>
   171a8:	mov	r3, #0
   171ac:	mov	r0, r3
   171b0:	add	sp, fp, #0
   171b4:	pop	{fp}		; (ldr fp, [sp], #4)
   171b8:	bx	lr
   171bc:	push	{fp}		; (str fp, [sp, #-4]!)
   171c0:	add	fp, sp, #0
   171c4:	sub	sp, sp, #12
   171c8:	str	r0, [fp, #-8]
   171cc:	ldr	r3, [fp, #-8]
   171d0:	cmp	r3, #64	; 0x40
   171d4:	bgt	171f8 <__assert_fail@plt+0x62cc>
   171d8:	ldr	r3, [fp, #-8]
   171dc:	cmp	r3, #58	; 0x3a
   171e0:	bge	17220 <__assert_fail@plt+0x62f4>
   171e4:	ldr	r3, [fp, #-8]
   171e8:	sub	r3, r3, #33	; 0x21
   171ec:	cmp	r3, #14
   171f0:	bhi	17228 <__assert_fail@plt+0x62fc>
   171f4:	b	17220 <__assert_fail@plt+0x62f4>
   171f8:	ldr	r3, [fp, #-8]
   171fc:	cmp	r3, #91	; 0x5b
   17200:	blt	17228 <__assert_fail@plt+0x62fc>
   17204:	ldr	r3, [fp, #-8]
   17208:	cmp	r3, #96	; 0x60
   1720c:	ble	17220 <__assert_fail@plt+0x62f4>
   17210:	ldr	r3, [fp, #-8]
   17214:	sub	r3, r3, #123	; 0x7b
   17218:	cmp	r3, #3
   1721c:	bhi	17228 <__assert_fail@plt+0x62fc>
   17220:	mov	r3, #1
   17224:	b	1722c <__assert_fail@plt+0x6300>
   17228:	mov	r3, #0
   1722c:	mov	r0, r3
   17230:	add	sp, fp, #0
   17234:	pop	{fp}		; (ldr fp, [sp], #4)
   17238:	bx	lr
   1723c:	push	{fp}		; (str fp, [sp, #-4]!)
   17240:	add	fp, sp, #0
   17244:	sub	sp, sp, #12
   17248:	str	r0, [fp, #-8]
   1724c:	ldr	r3, [fp, #-8]
   17250:	cmp	r3, #9
   17254:	blt	17278 <__assert_fail@plt+0x634c>
   17258:	ldr	r3, [fp, #-8]
   1725c:	cmp	r3, #13
   17260:	ble	17270 <__assert_fail@plt+0x6344>
   17264:	ldr	r3, [fp, #-8]
   17268:	cmp	r3, #32
   1726c:	bne	17278 <__assert_fail@plt+0x634c>
   17270:	mov	r3, #1
   17274:	b	1727c <__assert_fail@plt+0x6350>
   17278:	mov	r3, #0
   1727c:	mov	r0, r3
   17280:	add	sp, fp, #0
   17284:	pop	{fp}		; (ldr fp, [sp], #4)
   17288:	bx	lr
   1728c:	push	{fp}		; (str fp, [sp, #-4]!)
   17290:	add	fp, sp, #0
   17294:	sub	sp, sp, #12
   17298:	str	r0, [fp, #-8]
   1729c:	ldr	r3, [fp, #-8]
   172a0:	sub	r3, r3, #65	; 0x41
   172a4:	cmp	r3, #25
   172a8:	bhi	172b4 <__assert_fail@plt+0x6388>
   172ac:	mov	r3, #1
   172b0:	b	172b8 <__assert_fail@plt+0x638c>
   172b4:	mov	r3, #0
   172b8:	mov	r0, r3
   172bc:	add	sp, fp, #0
   172c0:	pop	{fp}		; (ldr fp, [sp], #4)
   172c4:	bx	lr
   172c8:	push	{fp}		; (str fp, [sp, #-4]!)
   172cc:	add	fp, sp, #0
   172d0:	sub	sp, sp, #12
   172d4:	str	r0, [fp, #-8]
   172d8:	ldr	r3, [fp, #-8]
   172dc:	sub	r3, r3, #48	; 0x30
   172e0:	cmp	r3, #54	; 0x36
   172e4:	ldrls	pc, [pc, r3, lsl #2]
   172e8:	b	173d0 <__assert_fail@plt+0x64a4>
   172ec:	andeq	r7, r1, r8, asr #7
   172f0:	andeq	r7, r1, r8, asr #7
   172f4:	andeq	r7, r1, r8, asr #7
   172f8:	andeq	r7, r1, r8, asr #7
   172fc:	andeq	r7, r1, r8, asr #7
   17300:	andeq	r7, r1, r8, asr #7
   17304:	andeq	r7, r1, r8, asr #7
   17308:	andeq	r7, r1, r8, asr #7
   1730c:	andeq	r7, r1, r8, asr #7
   17310:	andeq	r7, r1, r8, asr #7
   17314:	ldrdeq	r7, [r1], -r0
   17318:	ldrdeq	r7, [r1], -r0
   1731c:	ldrdeq	r7, [r1], -r0
   17320:	ldrdeq	r7, [r1], -r0
   17324:	ldrdeq	r7, [r1], -r0
   17328:	ldrdeq	r7, [r1], -r0
   1732c:	ldrdeq	r7, [r1], -r0
   17330:	andeq	r7, r1, r8, asr #7
   17334:	andeq	r7, r1, r8, asr #7
   17338:	andeq	r7, r1, r8, asr #7
   1733c:	andeq	r7, r1, r8, asr #7
   17340:	andeq	r7, r1, r8, asr #7
   17344:	andeq	r7, r1, r8, asr #7
   17348:	ldrdeq	r7, [r1], -r0
   1734c:	ldrdeq	r7, [r1], -r0
   17350:	ldrdeq	r7, [r1], -r0
   17354:	ldrdeq	r7, [r1], -r0
   17358:	ldrdeq	r7, [r1], -r0
   1735c:	ldrdeq	r7, [r1], -r0
   17360:	ldrdeq	r7, [r1], -r0
   17364:	ldrdeq	r7, [r1], -r0
   17368:	ldrdeq	r7, [r1], -r0
   1736c:	ldrdeq	r7, [r1], -r0
   17370:	ldrdeq	r7, [r1], -r0
   17374:	ldrdeq	r7, [r1], -r0
   17378:	ldrdeq	r7, [r1], -r0
   1737c:	ldrdeq	r7, [r1], -r0
   17380:	ldrdeq	r7, [r1], -r0
   17384:	ldrdeq	r7, [r1], -r0
   17388:	ldrdeq	r7, [r1], -r0
   1738c:	ldrdeq	r7, [r1], -r0
   17390:	ldrdeq	r7, [r1], -r0
   17394:	ldrdeq	r7, [r1], -r0
   17398:	ldrdeq	r7, [r1], -r0
   1739c:	ldrdeq	r7, [r1], -r0
   173a0:	ldrdeq	r7, [r1], -r0
   173a4:	ldrdeq	r7, [r1], -r0
   173a8:	ldrdeq	r7, [r1], -r0
   173ac:	ldrdeq	r7, [r1], -r0
   173b0:	andeq	r7, r1, r8, asr #7
   173b4:	andeq	r7, r1, r8, asr #7
   173b8:	andeq	r7, r1, r8, asr #7
   173bc:	andeq	r7, r1, r8, asr #7
   173c0:	andeq	r7, r1, r8, asr #7
   173c4:	andeq	r7, r1, r8, asr #7
   173c8:	mov	r3, #1
   173cc:	b	173d4 <__assert_fail@plt+0x64a8>
   173d0:	mov	r3, #0
   173d4:	mov	r0, r3
   173d8:	add	sp, fp, #0
   173dc:	pop	{fp}		; (ldr fp, [sp], #4)
   173e0:	bx	lr
   173e4:	push	{fp}		; (str fp, [sp, #-4]!)
   173e8:	add	fp, sp, #0
   173ec:	sub	sp, sp, #12
   173f0:	str	r0, [fp, #-8]
   173f4:	ldr	r3, [fp, #-8]
   173f8:	sub	r3, r3, #65	; 0x41
   173fc:	cmp	r3, #25
   17400:	bhi	17410 <__assert_fail@plt+0x64e4>
   17404:	ldr	r3, [fp, #-8]
   17408:	add	r3, r3, #32
   1740c:	b	17414 <__assert_fail@plt+0x64e8>
   17410:	ldr	r3, [fp, #-8]
   17414:	mov	r0, r3
   17418:	add	sp, fp, #0
   1741c:	pop	{fp}		; (ldr fp, [sp], #4)
   17420:	bx	lr
   17424:	push	{fp}		; (str fp, [sp, #-4]!)
   17428:	add	fp, sp, #0
   1742c:	sub	sp, sp, #12
   17430:	str	r0, [fp, #-8]
   17434:	ldr	r3, [fp, #-8]
   17438:	sub	r3, r3, #97	; 0x61
   1743c:	cmp	r3, #25
   17440:	bhi	17450 <__assert_fail@plt+0x6524>
   17444:	ldr	r3, [fp, #-8]
   17448:	sub	r3, r3, #32
   1744c:	b	17454 <__assert_fail@plt+0x6528>
   17450:	ldr	r3, [fp, #-8]
   17454:	mov	r0, r3
   17458:	add	sp, fp, #0
   1745c:	pop	{fp}		; (ldr fp, [sp], #4)
   17460:	bx	lr
   17464:	str	fp, [sp, #-8]!
   17468:	str	lr, [sp, #4]
   1746c:	add	fp, sp, #4
   17470:	sub	sp, sp, #272	; 0x110
   17474:	str	r0, [fp, #-272]	; 0xfffffef0
   17478:	sub	r3, fp, #264	; 0x108
   1747c:	movw	r2, #257	; 0x101
   17480:	mov	r1, r3
   17484:	ldr	r0, [fp, #-272]	; 0xfffffef0
   17488:	bl	17628 <__assert_fail@plt+0x66fc>
   1748c:	mov	r3, r0
   17490:	cmp	r3, #0
   17494:	beq	174a0 <__assert_fail@plt+0x6574>
   17498:	mov	r3, #0
   1749c:	b	174f4 <__assert_fail@plt+0x65c8>
   174a0:	sub	r3, fp, #264	; 0x108
   174a4:	movw	r1, #33016	; 0x80f8
   174a8:	movt	r1, #1
   174ac:	mov	r0, r3
   174b0:	bl	10cd4 <strcmp@plt>
   174b4:	mov	r3, r0
   174b8:	cmp	r3, #0
   174bc:	beq	174e8 <__assert_fail@plt+0x65bc>
   174c0:	sub	r3, fp, #264	; 0x108
   174c4:	movw	r1, #33020	; 0x80fc
   174c8:	movt	r1, #1
   174cc:	mov	r0, r3
   174d0:	bl	10cd4 <strcmp@plt>
   174d4:	mov	r3, r0
   174d8:	cmp	r3, #0
   174dc:	beq	174e8 <__assert_fail@plt+0x65bc>
   174e0:	mov	r3, #1
   174e4:	b	174ec <__assert_fail@plt+0x65c0>
   174e8:	mov	r3, #0
   174ec:	and	r3, r3, #1
   174f0:	uxtb	r3, r3
   174f4:	mov	r0, r3
   174f8:	sub	sp, fp, #4
   174fc:	ldr	fp, [sp]
   17500:	add	sp, sp, #4
   17504:	pop	{pc}		; (ldr pc, [sp], #4)
   17508:	str	fp, [sp, #-8]!
   1750c:	str	lr, [sp, #4]
   17510:	add	fp, sp, #4
   17514:	sub	sp, sp, #16
   17518:	str	r0, [fp, #-16]
   1751c:	mov	r1, #0
   17520:	ldr	r0, [fp, #-16]
   17524:	bl	10ec0 <setlocale@plt>
   17528:	str	r0, [fp, #-8]
   1752c:	ldr	r3, [fp, #-8]
   17530:	mov	r0, r3
   17534:	sub	sp, fp, #4
   17538:	ldr	fp, [sp]
   1753c:	add	sp, sp, #4
   17540:	pop	{pc}		; (ldr pc, [sp], #4)
   17544:	str	fp, [sp, #-8]!
   17548:	str	lr, [sp, #4]
   1754c:	add	fp, sp, #4
   17550:	sub	sp, sp, #24
   17554:	str	r0, [fp, #-16]
   17558:	str	r1, [fp, #-20]	; 0xffffffec
   1755c:	str	r2, [fp, #-24]	; 0xffffffe8
   17560:	ldr	r0, [fp, #-16]
   17564:	bl	17508 <__assert_fail@plt+0x65dc>
   17568:	str	r0, [fp, #-8]
   1756c:	ldr	r3, [fp, #-8]
   17570:	cmp	r3, #0
   17574:	bne	17598 <__assert_fail@plt+0x666c>
   17578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1757c:	cmp	r3, #0
   17580:	beq	17590 <__assert_fail@plt+0x6664>
   17584:	ldr	r3, [fp, #-20]	; 0xffffffec
   17588:	mov	r2, #0
   1758c:	strb	r2, [r3]
   17590:	mov	r3, #22
   17594:	b	17614 <__assert_fail@plt+0x66e8>
   17598:	ldr	r0, [fp, #-8]
   1759c:	bl	10e48 <strlen@plt>
   175a0:	str	r0, [fp, #-12]
   175a4:	ldr	r2, [fp, #-12]
   175a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175ac:	cmp	r2, r3
   175b0:	bcs	175d4 <__assert_fail@plt+0x66a8>
   175b4:	ldr	r3, [fp, #-12]
   175b8:	add	r3, r3, #1
   175bc:	mov	r2, r3
   175c0:	ldr	r1, [fp, #-8]
   175c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   175c8:	bl	10d28 <memcpy@plt>
   175cc:	mov	r3, #0
   175d0:	b	17614 <__assert_fail@plt+0x66e8>
   175d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175d8:	cmp	r3, #0
   175dc:	beq	17610 <__assert_fail@plt+0x66e4>
   175e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175e4:	sub	r3, r3, #1
   175e8:	mov	r2, r3
   175ec:	ldr	r1, [fp, #-8]
   175f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   175f4:	bl	10d28 <memcpy@plt>
   175f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175fc:	sub	r3, r3, #1
   17600:	ldr	r2, [fp, #-20]	; 0xffffffec
   17604:	add	r3, r2, r3
   17608:	mov	r2, #0
   1760c:	strb	r2, [r3]
   17610:	mov	r3, #34	; 0x22
   17614:	mov	r0, r3
   17618:	sub	sp, fp, #4
   1761c:	ldr	fp, [sp]
   17620:	add	sp, sp, #4
   17624:	pop	{pc}		; (ldr pc, [sp], #4)
   17628:	str	fp, [sp, #-8]!
   1762c:	str	lr, [sp, #4]
   17630:	add	fp, sp, #4
   17634:	sub	sp, sp, #16
   17638:	str	r0, [fp, #-8]
   1763c:	str	r1, [fp, #-12]
   17640:	str	r2, [fp, #-16]
   17644:	ldr	r2, [fp, #-16]
   17648:	ldr	r1, [fp, #-12]
   1764c:	ldr	r0, [fp, #-8]
   17650:	bl	17544 <__assert_fail@plt+0x6618>
   17654:	mov	r3, r0
   17658:	mov	r0, r3
   1765c:	sub	sp, fp, #4
   17660:	ldr	fp, [sp]
   17664:	add	sp, sp, #4
   17668:	pop	{pc}		; (ldr pc, [sp], #4)
   1766c:	str	fp, [sp, #-8]!
   17670:	str	lr, [sp, #4]
   17674:	add	fp, sp, #4
   17678:	sub	sp, sp, #8
   1767c:	str	r0, [fp, #-8]
   17680:	ldr	r0, [fp, #-8]
   17684:	bl	17508 <__assert_fail@plt+0x65dc>
   17688:	mov	r3, r0
   1768c:	mov	r0, r3
   17690:	sub	sp, fp, #4
   17694:	ldr	fp, [sp]
   17698:	add	sp, sp, #4
   1769c:	pop	{pc}		; (ldr pc, [sp], #4)
   176a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   176a4:	mov	r7, r0
   176a8:	ldr	r6, [pc, #72]	; 176f8 <__assert_fail@plt+0x67cc>
   176ac:	ldr	r5, [pc, #72]	; 176fc <__assert_fail@plt+0x67d0>
   176b0:	add	r6, pc, r6
   176b4:	add	r5, pc, r5
   176b8:	sub	r6, r6, r5
   176bc:	mov	r8, r1
   176c0:	mov	r9, r2
   176c4:	bl	10c9c <calloc@plt-0x20>
   176c8:	asrs	r6, r6, #2
   176cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   176d0:	mov	r4, #0
   176d4:	add	r4, r4, #1
   176d8:	ldr	r3, [r5], #4
   176dc:	mov	r2, r9
   176e0:	mov	r1, r8
   176e4:	mov	r0, r7
   176e8:	blx	r3
   176ec:	cmp	r6, r4
   176f0:	bne	176d4 <__assert_fail@plt+0x67a8>
   176f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   176f8:	andeq	r1, r1, ip, asr r8
   176fc:	andeq	r1, r1, r4, asr r8
   17700:	bx	lr
   17704:	ldr	r3, [pc, #12]	; 17718 <__assert_fail@plt+0x67ec>
   17708:	mov	r1, #0
   1770c:	add	r3, pc, r3
   17710:	ldr	r2, [r3]
   17714:	b	10e78 <__cxa_atexit@plt>
   17718:	ldrdeq	r1, [r1], -r4

Disassembly of section .fini:

0001771c <.fini>:
   1771c:	push	{r3, lr}
   17720:	pop	{r3, pc}
