
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010cb8 <.init>:
   10cb8:	push	{r3, lr}
   10cbc:	bl	10f9c <__assert_fail@plt+0x48>
   10cc0:	pop	{r3, pc}

Disassembly of section .plt:

00010cc4 <fstatfs64@plt-0x14>:
   10cc4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc8:	ldr	lr, [pc, #4]	; 10cd4 <fstatfs64@plt-0x4>
   10ccc:	add	lr, pc, lr
   10cd0:	ldr	pc, [lr, #8]!
   10cd4:	andeq	r7, r1, ip, lsr #6

00010cd8 <fstatfs64@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #812]!	; 0x32c

00010ce4 <calloc@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #804]!	; 0x324

00010cf0 <raise@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #796]!	; 0x31c

00010cfc <strcmp@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #788]!	; 0x314

00010d08 <getpwuid@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #780]!	; 0x30c

00010d14 <printf@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #772]!	; 0x304

00010d20 <getuid@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #764]!	; 0x2fc

00010d2c <memmove@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #756]!	; 0x2f4

00010d38 <free@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #748]!	; 0x2ec

00010d44 <memcpy@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d50 <time@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #732]!	; 0x2dc

00010d5c <ctime@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #724]!	; 0x2d4

00010d68 <realloc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #716]!	; 0x2cc

00010d74 <funlockfile@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d80 <__fxstatat64@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #700]!	; 0x2bc

00010d8c <__fxstat64@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #692]!	; 0x2b4

00010d98 <readlink@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #684]!	; 0x2ac

00010da4 <fwrite@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #676]!	; 0x2a4

00010db0 <ioctl@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #668]!	; 0x29c

00010dbc <strcpy@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #660]!	; 0x294

00010dc8 <open64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #652]!	; 0x28c

00010dd4 <getenv@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #644]!	; 0x284

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #636]!	; 0x27c

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #628]!	; 0x274

00010df8 <strerror@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #620]!	; 0x26c

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #612]!	; 0x264

00010e10 <__ctype_b_loc@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #604]!	; 0x25c

00010e1c <strlen@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #596]!	; 0x254

00010e28 <strchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #588]!	; 0x24c

00010e34 <openat64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #580]!	; 0x244

00010e40 <fprintf@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #572]!	; 0x23c

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #564]!	; 0x234

00010e58 <snprintf@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #556]!	; 0x22c

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #548]!	; 0x224

00010e70 <putchar@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #540]!	; 0x21c

00010e7c <fcntl64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #532]!	; 0x214

00010e88 <strrchr@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #524]!	; 0x20c

00010e94 <fputc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #516]!	; 0x204

00010ea0 <readdir64@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #508]!	; 0x1fc

00010eac <fdopendir@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #500]!	; 0x1f4

00010eb8 <dirfd@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec4 <flockfile@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed0 <atoi@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #476]!	; 0x1dc

00010edc <fchdir@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ee8 <qsort@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef4 <__xstat64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #452]!	; 0x1c4

00010f00 <isatty@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #444]!	; 0x1bc

00010f0c <strncmp@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #436]!	; 0x1b4

00010f18 <abort@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #428]!	; 0x1ac

00010f24 <close@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f30 <__lxstat64@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #412]!	; 0x19c

00010f3c <closedir@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #404]!	; 0x194

00010f48 <getgrgid@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #396]!	; 0x18c

00010f54 <__assert_fail@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f60 <.text>:
   10f60:	mov	fp, #0
   10f64:	mov	lr, #0
   10f68:	pop	{r1}		; (ldr r1, [sp], #4)
   10f6c:	mov	r2, sp
   10f70:	push	{r2}		; (str r2, [sp, #-4]!)
   10f74:	push	{r0}		; (str r0, [sp, #-4]!)
   10f78:	ldr	ip, [pc, #16]	; 10f90 <__assert_fail@plt+0x3c>
   10f7c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f80:	ldr	r0, [pc, #12]	; 10f94 <__assert_fail@plt+0x40>
   10f84:	ldr	r3, [pc, #12]	; 10f98 <__assert_fail@plt+0x44>
   10f88:	bl	10dec <__libc_start_main@plt>
   10f8c:	bl	10f18 <abort@plt>
   10f90:	andeq	r7, r1, r8, lsr r5
   10f94:	andeq	r1, r1, r0, asr r0
   10f98:	ldrdeq	r7, [r1], -r8
   10f9c:	ldr	r3, [pc, #20]	; 10fb8 <__assert_fail@plt+0x64>
   10fa0:	ldr	r2, [pc, #20]	; 10fbc <__assert_fail@plt+0x68>
   10fa4:	add	r3, pc, r3
   10fa8:	ldr	r2, [r3, r2]
   10fac:	cmp	r2, #0
   10fb0:	bxeq	lr
   10fb4:	b	10e04 <__gmon_start__@plt>
   10fb8:	andeq	r7, r1, r4, asr r0
   10fbc:	andeq	r0, r0, r4, ror #1
   10fc0:	ldr	r0, [pc, #24]	; 10fe0 <__assert_fail@plt+0x8c>
   10fc4:	ldr	r3, [pc, #24]	; 10fe4 <__assert_fail@plt+0x90>
   10fc8:	cmp	r3, r0
   10fcc:	bxeq	lr
   10fd0:	ldr	r3, [pc, #16]	; 10fe8 <__assert_fail@plt+0x94>
   10fd4:	cmp	r3, #0
   10fd8:	bxeq	lr
   10fdc:	bx	r3
   10fe0:	andeq	r8, r2, r0, lsl r1
   10fe4:	andeq	r8, r2, r0, lsl r1
   10fe8:	andeq	r0, r0, r0
   10fec:	ldr	r0, [pc, #36]	; 11018 <__assert_fail@plt+0xc4>
   10ff0:	ldr	r1, [pc, #36]	; 1101c <__assert_fail@plt+0xc8>
   10ff4:	sub	r1, r1, r0
   10ff8:	asr	r1, r1, #2
   10ffc:	add	r1, r1, r1, lsr #31
   11000:	asrs	r1, r1, #1
   11004:	bxeq	lr
   11008:	ldr	r3, [pc, #16]	; 11020 <__assert_fail@plt+0xcc>
   1100c:	cmp	r3, #0
   11010:	bxeq	lr
   11014:	bx	r3
   11018:	andeq	r8, r2, r0, lsl r1
   1101c:	andeq	r8, r2, r0, lsl r1
   11020:	andeq	r0, r0, r0
   11024:	push	{r4, lr}
   11028:	ldr	r4, [pc, #24]	; 11048 <__assert_fail@plt+0xf4>
   1102c:	ldrb	r3, [r4]
   11030:	cmp	r3, #0
   11034:	popne	{r4, pc}
   11038:	bl	10fc0 <__assert_fail@plt+0x6c>
   1103c:	mov	r3, #1
   11040:	strb	r3, [r4]
   11044:	pop	{r4, pc}
   11048:	andeq	r8, r2, r4, lsl r1
   1104c:	b	10fec <__assert_fail@plt+0x98>
   11050:	b	11054 <__assert_fail@plt+0x100>
   11054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11058:	add	fp, sp, #28
   1105c:	sub	sp, sp, #12
   11060:	mov	r4, r1
   11064:	movw	r1, #33132	; 0x816c
   11068:	mov	r5, r0
   1106c:	mov	r0, #0
   11070:	movw	r9, #33120	; 0x8160
   11074:	movw	r8, #33160	; 0x8188
   11078:	movw	r6, #33116	; 0x815c
   1107c:	mov	r7, #1
   11080:	movt	r1, #2
   11084:	movt	r9, #2
   11088:	movt	r8, #2
   1108c:	movt	r6, #2
   11090:	str	r0, [r1]
   11094:	movw	r1, #33052	; 0x811c
   11098:	str	r0, [r9]
   1109c:	str	r0, [r8]
   110a0:	str	r0, [r6]
   110a4:	movt	r1, #2
   110a8:	strb	r0, [r1]
   110ac:	movw	r1, #33124	; 0x8164
   110b0:	movt	r1, #2
   110b4:	str	r0, [r1]
   110b8:	movw	r1, #33176	; 0x8198
   110bc:	movt	r1, #2
   110c0:	str	r0, [r1]
   110c4:	movw	r1, #33140	; 0x8174
   110c8:	movt	r1, #2
   110cc:	str	r0, [r1]
   110d0:	movw	r1, #33192	; 0x81a8
   110d4:	movt	r1, #2
   110d8:	str	r0, [r1]
   110dc:	movw	r1, #33196	; 0x81ac
   110e0:	movt	r1, #2
   110e4:	str	r0, [r1]
   110e8:	movw	r1, #33180	; 0x819c
   110ec:	movt	r1, #2
   110f0:	str	r0, [r1]
   110f4:	movw	r1, #33172	; 0x8194
   110f8:	movt	r1, #2
   110fc:	str	r0, [r1]
   11100:	movw	r1, #33144	; 0x8178
   11104:	movt	r1, #2
   11108:	str	r0, [r1]
   1110c:	movw	r1, #33200	; 0x81b0
   11110:	movt	r1, #2
   11114:	str	r0, [r1]
   11118:	movw	r1, #33168	; 0x8190
   1111c:	movt	r1, #2
   11120:	str	r0, [r1]
   11124:	movw	r1, #33136	; 0x8170
   11128:	movt	r1, #2
   1112c:	str	r0, [r1]
   11130:	movw	r1, #33128	; 0x8168
   11134:	movt	r1, #2
   11138:	str	r0, [r1]
   1113c:	movw	r1, #33112	; 0x8158
   11140:	movt	r1, #2
   11144:	str	r0, [r1]
   11148:	movw	r1, #33204	; 0x81b4
   1114c:	movt	r1, #2
   11150:	str	r0, [r1]
   11154:	movw	r1, #33108	; 0x8154
   11158:	movt	r1, #2
   1115c:	str	r0, [r1]
   11160:	movw	r1, #33184	; 0x81a0
   11164:	movt	r1, #2
   11168:	str	r0, [r1]
   1116c:	movw	r1, #33152	; 0x8180
   11170:	movt	r1, #2
   11174:	str	r0, [r1]
   11178:	movw	r1, #33164	; 0x818c
   1117c:	movt	r1, #2
   11180:	str	r0, [r1]
   11184:	movw	r1, #33148	; 0x817c
   11188:	movt	r1, #2
   1118c:	str	r0, [r1]
   11190:	mov	r0, #1
   11194:	bl	10f00 <isatty@plt>
   11198:	cmp	r0, #0
   1119c:	beq	111f4 <__assert_fail@plt+0x2a0>
   111a0:	movw	r0, #30116	; 0x75a4
   111a4:	movt	r0, #1
   111a8:	bl	10dd4 <getenv@plt>
   111ac:	cmp	r0, #0
   111b0:	beq	111c8 <__assert_fail@plt+0x274>
   111b4:	bl	10ed0 <atoi@plt>
   111b8:	movw	r1, #33008	; 0x80f0
   111bc:	movt	r1, #2
   111c0:	str	r0, [r1]
   111c4:	b	111e0 <__assert_fail@plt+0x28c>
   111c8:	add	r2, sp, #4
   111cc:	mov	r0, #1
   111d0:	movw	r1, #21523	; 0x5413
   111d4:	bl	16d84 <__assert_fail@plt+0x5e30>
   111d8:	cmp	r0, #0
   111dc:	beq	11740 <__assert_fail@plt+0x7ec>
   111e0:	movw	r1, #33200	; 0x81b0
   111e4:	mov	r6, r9
   111e8:	mov	r0, #1
   111ec:	movt	r1, #2
   111f0:	str	r0, [r1]
   111f4:	str	r7, [r6]
   111f8:	bl	10d20 <getuid@plt>
   111fc:	cmp	r0, #0
   11200:	bne	11214 <__assert_fail@plt+0x2c0>
   11204:	movw	r1, #33196	; 0x81ac
   11208:	mov	r0, #1
   1120c:	movt	r1, #2
   11210:	str	r0, [r1]
   11214:	movw	r0, #33028	; 0x8104
   11218:	movw	r7, #30124	; 0x75ac
   1121c:	movw	sl, #33120	; 0x8160
   11220:	mov	r1, #1
   11224:	mov	r6, #20
   11228:	mov	r9, #0
   1122c:	movt	r0, #2
   11230:	movt	r7, #1
   11234:	movt	sl, #2
   11238:	str	r1, [r0]
   1123c:	b	114d8 <__assert_fail@plt+0x584>
   11240:	movw	r0, #33204	; 0x81b4
   11244:	mov	r1, #1
   11248:	str	r9, [r8]
   1124c:	str	r9, [sl]
   11250:	movt	r0, #2
   11254:	str	r9, [r0]
   11258:	movw	r0, #33116	; 0x815c
   1125c:	movt	r0, #2
   11260:	str	r1, [r0]
   11264:	movw	r0, #33176	; 0x8198
   11268:	movt	r0, #2
   1126c:	str	r9, [r0]
   11270:	b	114d8 <__assert_fail@plt+0x584>
   11274:	movw	r1, #33148	; 0x817c
   11278:	mov	r0, #1
   1127c:	movt	r1, #2
   11280:	str	r0, [r1]
   11284:	b	114d8 <__assert_fail@plt+0x584>
   11288:	bic	r0, r6, #18
   1128c:	orr	r6, r0, #2
   11290:	b	114d8 <__assert_fail@plt+0x584>
   11294:	movw	r1, #33128	; 0x8168
   11298:	mov	r0, #1
   1129c:	movt	r1, #2
   112a0:	str	r0, [r1]
   112a4:	b	114d8 <__assert_fail@plt+0x584>
   112a8:	movw	r0, #33048	; 0x8118
   112ac:	mov	r1, #1
   112b0:	movt	r0, #2
   112b4:	str	r1, [r0]
   112b8:	b	114d8 <__assert_fail@plt+0x584>
   112bc:	movw	r1, #33168	; 0x8190
   112c0:	mov	r0, #1
   112c4:	movt	r1, #2
   112c8:	str	r0, [r1]
   112cc:	b	114d8 <__assert_fail@plt+0x584>
   112d0:	movw	r1, #33152	; 0x8180
   112d4:	mov	r0, #1
   112d8:	movt	r1, #2
   112dc:	str	r0, [r1]
   112e0:	b	114d8 <__assert_fail@plt+0x584>
   112e4:	orr	r6, r6, #32
   112e8:	movw	r1, #33196	; 0x81ac
   112ec:	mov	r0, #1
   112f0:	movt	r1, #2
   112f4:	str	r0, [r1]
   112f8:	b	114d8 <__assert_fail@plt+0x584>
   112fc:	movw	r1, #33140	; 0x8174
   11300:	mov	r0, #0
   11304:	movt	r1, #2
   11308:	str	r0, [r1]
   1130c:	movw	r1, #33184	; 0x81a0
   11310:	mov	r0, #1
   11314:	movt	r1, #2
   11318:	str	r0, [r1]
   1131c:	b	114d8 <__assert_fail@plt+0x584>
   11320:	movw	r1, #33128	; 0x8168
   11324:	mov	r0, #0
   11328:	movt	r1, #2
   1132c:	str	r0, [r1]
   11330:	movw	r1, #33180	; 0x819c
   11334:	mov	r0, #1
   11338:	movt	r1, #2
   1133c:	str	r0, [r1]
   11340:	b	114d8 <__assert_fail@plt+0x584>
   11344:	movw	r1, #33144	; 0x8178
   11348:	mov	r0, #1
   1134c:	movt	r1, #2
   11350:	str	r0, [r1]
   11354:	b	114d8 <__assert_fail@plt+0x584>
   11358:	movw	r1, #33132	; 0x816c
   1135c:	mov	r0, #1
   11360:	movt	r1, #2
   11364:	str	r0, [r1]
   11368:	b	114d8 <__assert_fail@plt+0x584>
   1136c:	movw	r0, #33188	; 0x81a4
   11370:	mov	r1, #1024	; 0x400
   11374:	movt	r0, #2
   11378:	str	r1, [r0]
   1137c:	b	114d8 <__assert_fail@plt+0x584>
   11380:	movw	r1, #33172	; 0x8194
   11384:	mov	r0, #0
   11388:	movt	r1, #2
   1138c:	str	r0, [r1]
   11390:	mov	r1, #1
   11394:	str	r1, [r8]
   11398:	b	113dc <__assert_fail@plt+0x488>
   1139c:	movw	r1, #33116	; 0x815c
   113a0:	movw	r2, #33204	; 0x81b4
   113a4:	mov	r0, #0
   113a8:	movt	r1, #2
   113ac:	movt	r2, #2
   113b0:	str	r0, [r8]
   113b4:	str	r0, [r1]
   113b8:	mov	r1, #1
   113bc:	str	r1, [r2]
   113c0:	b	113f4 <__assert_fail@plt+0x4a0>
   113c4:	movw	r1, #33172	; 0x8194
   113c8:	mov	r0, #1
   113cc:	movt	r1, #2
   113d0:	str	r0, [r8]
   113d4:	str	r0, [r1]
   113d8:	mov	r0, #0
   113dc:	movw	r1, #33204	; 0x81b4
   113e0:	movt	r1, #2
   113e4:	str	r0, [r1]
   113e8:	movw	r1, #33116	; 0x815c
   113ec:	movt	r1, #2
   113f0:	str	r0, [r1]
   113f4:	movw	r1, #33176	; 0x8198
   113f8:	str	r0, [sl]
   113fc:	movt	r1, #2
   11400:	str	r0, [r1]
   11404:	b	114d8 <__assert_fail@plt+0x584>
   11408:	movw	r1, #33124	; 0x8164
   1140c:	mov	r0, #1
   11410:	movt	r1, #2
   11414:	str	r0, [r1]
   11418:	b	114d8 <__assert_fail@plt+0x584>
   1141c:	movw	r1, #33164	; 0x818c
   11420:	mov	r0, #1
   11424:	movt	r1, #2
   11428:	str	r0, [r1]
   1142c:	b	114d8 <__assert_fail@plt+0x584>
   11430:	movw	r1, #33200	; 0x81b0
   11434:	mov	r0, #1
   11438:	movt	r1, #2
   1143c:	str	r0, [r1]
   11440:	b	114d8 <__assert_fail@plt+0x584>
   11444:	movw	r1, #33136	; 0x8170
   11448:	mov	r0, #1
   1144c:	movt	r1, #2
   11450:	str	r0, [r1]
   11454:	b	114d8 <__assert_fail@plt+0x584>
   11458:	movw	r1, #33108	; 0x8154
   1145c:	mov	r0, #1
   11460:	movt	r1, #2
   11464:	str	r0, [r1]
   11468:	b	114d8 <__assert_fail@plt+0x584>
   1146c:	movw	r0, #33048	; 0x8118
   11470:	mov	r1, #2
   11474:	movt	r0, #2
   11478:	str	r1, [r0]
   1147c:	b	114d8 <__assert_fail@plt+0x584>
   11480:	movw	r1, #33184	; 0x81a0
   11484:	mov	r0, #0
   11488:	movt	r1, #2
   1148c:	str	r0, [r1]
   11490:	movw	r1, #33140	; 0x8174
   11494:	mov	r0, #1
   11498:	movt	r1, #2
   1149c:	str	r0, [r1]
   114a0:	b	114d8 <__assert_fail@plt+0x584>
   114a4:	movw	r1, #33204	; 0x81b4
   114a8:	mov	r0, #0
   114ac:	movw	r2, #33176	; 0x8198
   114b0:	movt	r1, #2
   114b4:	movt	r2, #2
   114b8:	str	r0, [r8]
   114bc:	str	r0, [sl]
   114c0:	str	r0, [r1]
   114c4:	mov	r1, #1
   114c8:	str	r1, [r2]
   114cc:	movw	r1, #33116	; 0x815c
   114d0:	movt	r1, #2
   114d4:	str	r0, [r1]
   114d8:	mov	r0, r5
   114dc:	mov	r1, r4
   114e0:	mov	r2, r7
   114e4:	bl	15c88 <__assert_fail@plt+0x4d34>
   114e8:	sub	r1, r0, #65	; 0x41
   114ec:	cmp	r1, #55	; 0x37
   114f0:	bhi	11614 <__assert_fail@plt+0x6c0>
   114f4:	add	r0, pc, #0
   114f8:	ldr	pc, [r0, r1, lsl #2]
   114fc:	andeq	r1, r1, r8, ror #5
   11500:	andeq	r1, r1, ip, lsl #14
   11504:	ldrdeq	r1, [r1], -ip
   11508:	andeq	r1, r1, ip, lsl #14
   1150c:	andeq	r1, r1, ip, lsl #14
   11510:	andeq	r1, r1, r4, ror r2
   11514:	andeq	r1, r1, ip, lsl #14
   11518:	andeq	r1, r1, ip, lsl #14
   1151c:	andeq	r1, r1, ip, lsl #14
   11520:	andeq	r1, r1, ip, lsl #14
   11524:	andeq	r1, r1, ip, lsl #14
   11528:	andeq	r1, r1, r8, lsl #5
   1152c:	andeq	r1, r1, ip, lsl #14
   11530:	andeq	r1, r1, ip, lsl #14
   11534:	andeq	r1, r1, ip, lsl #14
   11538:	andeq	r1, r1, ip, lsl #14
   1153c:	andeq	r1, r1, ip, lsl #14
   11540:	muleq	r1, r4, r2
   11544:	andeq	r1, r1, r8, lsr #5
   11548:			; <UNDEFINED> instruction: 0x000112bc
   1154c:	andeq	r1, r1, ip, lsl #14
   11550:	andeq	r1, r1, ip, lsl #14
   11554:	ldrdeq	r1, [r1], -r0
   11558:	andeq	r1, r1, ip, lsl #14
   1155c:	andeq	r1, r1, ip, lsl #14
   11560:	andeq	r1, r1, ip, lsl #14
   11564:	andeq	r1, r1, ip, lsl #14
   11568:	andeq	r1, r1, ip, lsl #14
   1156c:	andeq	r1, r1, ip, lsl #14
   11570:	andeq	r1, r1, ip, lsl #14
   11574:	andeq	r1, r1, ip, lsl #14
   11578:	andeq	r1, r1, ip, lsl #14
   1157c:	andeq	r1, r1, r4, ror #5
   11580:	andeq	r1, r1, ip, lsl #14
   11584:	strdeq	r1, [r1], -ip
   11588:	andeq	r1, r1, r0, lsr #6
   1158c:	andeq	r1, r1, ip, lsl #14
   11590:	andeq	r1, r1, r4, asr #6
   11594:	ldrdeq	r1, [r1], -r8
   11598:	andeq	r1, r1, ip, lsl #14
   1159c:	andeq	r1, r1, r8, asr r3
   115a0:	andeq	r1, r1, ip, lsl #14
   115a4:	andeq	r1, r1, ip, ror #6
   115a8:	andeq	r1, r1, r0, lsl #7
   115ac:	muleq	r1, ip, r3
   115b0:	andeq	r1, r1, r4, asr #7
   115b4:	andeq	r1, r1, r8, lsl #8
   115b8:	andeq	r1, r1, ip, lsl r4
   115bc:	andeq	r1, r1, r0, lsr r4
   115c0:	andeq	r1, r1, r4, asr #8
   115c4:	andeq	r1, r1, r8, asr r4
   115c8:	andeq	r1, r1, ip, ror #8
   115cc:	andeq	r1, r1, r0, lsl #9
   115d0:	andeq	r1, r1, ip, lsl #14
   115d4:	andeq	r1, r1, ip, lsl #14
   115d8:	andeq	r1, r1, r4, lsr #9
   115dc:	movw	r1, #33204	; 0x81b4
   115e0:	mov	r0, #0
   115e4:	movt	r1, #2
   115e8:	str	r0, [r8]
   115ec:	str	r0, [r1]
   115f0:	mov	r1, #1
   115f4:	str	r1, [sl]
   115f8:	movw	r1, #33116	; 0x815c
   115fc:	movt	r1, #2
   11600:	str	r0, [r1]
   11604:	movw	r1, #33176	; 0x8198
   11608:	movt	r1, #2
   1160c:	str	r0, [r1]
   11610:	b	114d8 <__assert_fail@plt+0x584>
   11614:	cmp	r0, #49	; 0x31
   11618:	beq	11240 <__assert_fail@plt+0x2ec>
   1161c:	cmn	r0, #1
   11620:	bne	1170c <__assert_fail@plt+0x7b8>
   11624:	movw	r0, #33148	; 0x817c
   11628:	movw	r3, #33180	; 0x819c
   1162c:	ldr	r2, [r8]
   11630:	movw	r7, #33132	; 0x816c
   11634:	movt	r0, #2
   11638:	movt	r3, #2
   1163c:	movt	r7, #2
   11640:	ldr	r0, [r0]
   11644:	ldr	r3, [r3]
   11648:	ldr	r7, [r7]
   1164c:	orr	r1, r0, r2
   11650:	orr	r1, r1, r3
   11654:	movw	r3, #33108	; 0x8154
   11658:	movt	r3, #2
   1165c:	ldr	r3, [r3]
   11660:	orr	r3, r3, r2
   11664:	orr	r7, r3, r7
   11668:	orr	r0, r7, r0
   1166c:	movw	r7, #33164	; 0x818c
   11670:	movt	r7, #2
   11674:	ldr	r7, [r7]
   11678:	orr	r7, r0, r7
   1167c:	movw	r0, #33048	; 0x8118
   11680:	movt	r0, #2
   11684:	ldr	r0, [r0]
   11688:	orrs	r7, r7, r0
   1168c:	orreq	r6, r6, #8
   11690:	cmp	r1, #0
   11694:	movw	r1, #33152	; 0x8180
   11698:	movt	r1, #2
   1169c:	orreq	r6, r6, #1
   116a0:	ldr	r1, [r1]
   116a4:	cmp	r1, #0
   116a8:	movw	r1, #33028	; 0x8104
   116ac:	orrne	r6, r6, #128	; 0x80
   116b0:	cmp	r3, #0
   116b4:	movt	r1, #2
   116b8:	movwne	r3, #33188	; 0x81a4
   116bc:	movne	r7, #2
   116c0:	ldr	r1, [r1]
   116c4:	movtne	r3, #2
   116c8:	strne	r7, [r3]
   116cc:	movw	r3, #33136	; 0x8170
   116d0:	movt	r3, #2
   116d4:	ldr	r3, [r3]
   116d8:	cmp	r3, #0
   116dc:	beq	11714 <__assert_fail@plt+0x7c0>
   116e0:	cmp	r0, #2
   116e4:	beq	11750 <__assert_fail@plt+0x7fc>
   116e8:	cmp	r0, #1
   116ec:	beq	11778 <__assert_fail@plt+0x824>
   116f0:	cmp	r0, #0
   116f4:	bne	11840 <__assert_fail@plt+0x8ec>
   116f8:	movw	r0, #33056	; 0x8120
   116fc:	movw	r3, #11348	; 0x2c54
   11700:	movt	r0, #2
   11704:	movt	r3, #1
   11708:	b	1183c <__assert_fail@plt+0x8e8>
   1170c:	bl	12c18 <__assert_fail@plt+0x1cc4>
   11710:	b	118f8 <__assert_fail@plt+0x9a4>
   11714:	cmp	r0, #2
   11718:	beq	1178c <__assert_fail@plt+0x838>
   1171c:	cmp	r0, #1
   11720:	beq	117b4 <__assert_fail@plt+0x860>
   11724:	cmp	r0, #0
   11728:	bne	11840 <__assert_fail@plt+0x8ec>
   1172c:	movw	r0, #33056	; 0x8120
   11730:	movw	r3, #11336	; 0x2c48
   11734:	movt	r0, #2
   11738:	movt	r3, #1
   1173c:	b	1183c <__assert_fail@plt+0x8e8>
   11740:	ldrh	r0, [sp, #6]
   11744:	cmp	r0, #0
   11748:	bne	111b8 <__assert_fail@plt+0x264>
   1174c:	b	111e0 <__assert_fail@plt+0x28c>
   11750:	movw	r0, #33140	; 0x8174
   11754:	movt	r0, #2
   11758:	ldr	r0, [r0]
   1175c:	cmp	r0, #0
   11760:	beq	117c8 <__assert_fail@plt+0x874>
   11764:	movw	r0, #33056	; 0x8120
   11768:	movw	r3, #11592	; 0x2d48
   1176c:	movt	r0, #2
   11770:	movt	r3, #1
   11774:	b	1183c <__assert_fail@plt+0x8e8>
   11778:	movw	r0, #33056	; 0x8120
   1177c:	movw	r3, #11816	; 0x2e28
   11780:	movt	r0, #2
   11784:	movt	r3, #1
   11788:	b	1183c <__assert_fail@plt+0x8e8>
   1178c:	movw	r0, #33140	; 0x8174
   11790:	movt	r0, #2
   11794:	ldr	r0, [r0]
   11798:	cmp	r0, #0
   1179c:	beq	117f0 <__assert_fail@plt+0x89c>
   117a0:	movw	r0, #33056	; 0x8120
   117a4:	movw	r3, #11488	; 0x2ce0
   117a8:	movt	r0, #2
   117ac:	movt	r3, #1
   117b0:	b	1183c <__assert_fail@plt+0x8e8>
   117b4:	movw	r0, #33056	; 0x8120
   117b8:	movw	r3, #11736	; 0x2dd8
   117bc:	movt	r0, #2
   117c0:	movt	r3, #1
   117c4:	b	1183c <__assert_fail@plt+0x8e8>
   117c8:	movw	r0, #33184	; 0x81a0
   117cc:	movt	r0, #2
   117d0:	ldr	r0, [r0]
   117d4:	cmp	r0, #0
   117d8:	beq	11818 <__assert_fail@plt+0x8c4>
   117dc:	movw	r0, #33056	; 0x8120
   117e0:	movw	r3, #11716	; 0x2dc4
   117e4:	movt	r0, #2
   117e8:	movt	r3, #1
   117ec:	b	1183c <__assert_fail@plt+0x8e8>
   117f0:	movw	r0, #33184	; 0x81a0
   117f4:	movt	r0, #2
   117f8:	ldr	r0, [r0]
   117fc:	cmp	r0, #0
   11800:	beq	1182c <__assert_fail@plt+0x8d8>
   11804:	movw	r0, #33056	; 0x8120
   11808:	movw	r3, #11612	; 0x2d5c
   1180c:	movt	r0, #2
   11810:	movt	r3, #1
   11814:	b	1183c <__assert_fail@plt+0x8e8>
   11818:	movw	r0, #33056	; 0x8120
   1181c:	movw	r3, #11468	; 0x2ccc
   11820:	movt	r0, #2
   11824:	movt	r3, #1
   11828:	b	1183c <__assert_fail@plt+0x8e8>
   1182c:	movw	r0, #33056	; 0x8120
   11830:	movw	r3, #11364	; 0x2c64
   11834:	movt	r0, #2
   11838:	movt	r3, #1
   1183c:	str	r3, [r0]
   11840:	movw	r3, #33116	; 0x815c
   11844:	sub	r0, r5, r1
   11848:	movt	r3, #2
   1184c:	ldr	r3, [r3]
   11850:	cmp	r3, #0
   11854:	beq	11864 <__assert_fail@plt+0x910>
   11858:	movw	r2, #8516	; 0x2144
   1185c:	movt	r2, #1
   11860:	b	118bc <__assert_fail@plt+0x968>
   11864:	movw	r3, #33176	; 0x8198
   11868:	movt	r3, #2
   1186c:	ldr	r3, [r3]
   11870:	cmp	r3, #0
   11874:	beq	11884 <__assert_fail@plt+0x930>
   11878:	movw	r2, #10672	; 0x29b0
   1187c:	movt	r2, #1
   11880:	b	118bc <__assert_fail@plt+0x968>
   11884:	cmp	r2, #0
   11888:	beq	11898 <__assert_fail@plt+0x944>
   1188c:	movw	r2, #8832	; 0x2280
   11890:	movt	r2, #1
   11894:	b	118bc <__assert_fail@plt+0x968>
   11898:	movw	r2, #33204	; 0x81b4
   1189c:	movw	r7, #10028	; 0x272c
   118a0:	movt	r2, #2
   118a4:	movt	r7, #1
   118a8:	ldr	r3, [r2]
   118ac:	movw	r2, #10932	; 0x2ab4
   118b0:	movt	r2, #1
   118b4:	cmp	r3, #0
   118b8:	moveq	r2, r7
   118bc:	movw	r3, #33060	; 0x8124
   118c0:	cmp	r0, #0
   118c4:	movt	r3, #2
   118c8:	str	r2, [r3]
   118cc:	beq	118d8 <__assert_fail@plt+0x984>
   118d0:	add	r1, r4, r1, lsl #2
   118d4:	b	118e4 <__assert_fail@plt+0x990>
   118d8:	movw	r1, #33016	; 0x80f8
   118dc:	mov	r0, #1
   118e0:	movt	r1, #2
   118e4:	mov	r2, r6
   118e8:	bl	11900 <__assert_fail@plt+0x9ac>
   118ec:	movw	r0, #33156	; 0x8184
   118f0:	movt	r0, #2
   118f4:	ldr	r0, [r0]
   118f8:	sub	sp, fp, #28
   118fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11904:	add	fp, sp, #28
   11908:	sub	sp, sp, #4
   1190c:	mov	r8, r0
   11910:	movw	r0, #33144	; 0x8178
   11914:	mov	r7, r2
   11918:	movw	r2, #7076	; 0x1ba4
   1191c:	mov	r6, r1
   11920:	movt	r0, #2
   11924:	movt	r2, #1
   11928:	ldr	r0, [r0]
   1192c:	cmp	r0, #0
   11930:	mov	r0, r1
   11934:	mov	r1, r7
   11938:	movne	r2, #0
   1193c:	bl	13004 <__assert_fail@plt+0x20b0>
   11940:	cmp	r0, #0
   11944:	beq	11b34 <__assert_fail@plt+0xbe0>
   11948:	mov	r1, #0
   1194c:	mov	r5, r0
   11950:	mov	r6, #0
   11954:	bl	14cac <__assert_fail@plt+0x3d58>
   11958:	mov	r1, r0
   1195c:	mov	r0, #0
   11960:	bl	11c4c <__assert_fail@plt+0xcf8>
   11964:	movw	r0, #33180	; 0x819c
   11968:	movt	r0, #2
   1196c:	ldr	r0, [r0]
   11970:	cmp	r0, #0
   11974:	bne	11b2c <__assert_fail@plt+0xbd8>
   11978:	movw	r1, #33128	; 0x8168
   1197c:	mov	r0, #4096	; 0x1000
   11980:	movt	r1, #2
   11984:	ldr	r1, [r1]
   11988:	cmp	r1, #0
   1198c:	andeq	r6, r0, r7, lsl #9
   11990:	mov	r0, r5
   11994:	bl	138bc <__assert_fail@plt+0x2968>
   11998:	cmp	r0, #0
   1199c:	beq	11b1c <__assert_fail@plt+0xbc8>
   119a0:	movw	r7, #33196	; 0x81ac
   119a4:	movw	r4, #33052	; 0x811c
   119a8:	mov	r9, r0
   119ac:	movt	r7, #2
   119b0:	movt	r4, #2
   119b4:	b	11a28 <__assert_fail@plt+0xad4>
   119b8:	movw	r0, #33040	; 0x8110
   119bc:	mov	sl, r4
   119c0:	mov	r4, r7
   119c4:	movt	r0, #2
   119c8:	ldr	r7, [r0]
   119cc:	ldr	r0, [r9, #32]
   119d0:	bl	10df8 <strerror@plt>
   119d4:	movw	r1, #30329	; 0x7679
   119d8:	mov	r3, r0
   119dc:	mov	r0, r7
   119e0:	add	r2, r9, #168	; 0xa8
   119e4:	mov	r7, r4
   119e8:	mov	r4, sl
   119ec:	movt	r1, #1
   119f0:	bl	10e40 <fprintf@plt>
   119f4:	movw	r1, #33156	; 0x8184
   119f8:	mov	r0, #1
   119fc:	movt	r1, #2
   11a00:	str	r0, [r1]
   11a04:	b	11b08 <__assert_fail@plt+0xbb4>
   11a08:	movw	r0, #33040	; 0x8110
   11a0c:	movw	r1, #30175	; 0x75df
   11a10:	add	r2, r9, #168	; 0xa8
   11a14:	movt	r0, #2
   11a18:	movt	r1, #1
   11a1c:	ldr	r0, [r0]
   11a20:	bl	10e40 <fprintf@plt>
   11a24:	b	11b08 <__assert_fail@plt+0xbb4>
   11a28:	ldrh	r0, [r9, #56]	; 0x38
   11a2c:	sub	r0, r0, #1
   11a30:	cmp	r0, #6
   11a34:	bhi	11b08 <__assert_fail@plt+0xbb4>
   11a38:	add	r1, pc, #0
   11a3c:	ldr	pc, [r1, r0, lsl #2]
   11a40:	andeq	r1, r1, ip, asr sl
   11a44:	andeq	r1, r1, r8, lsl #20
   11a48:	andeq	r1, r1, r8, lsl #22
   11a4c:			; <UNDEFINED> instruction: 0x000119b8
   11a50:	andeq	r1, r1, r8, lsl #22
   11a54:	andeq	r1, r1, r8, lsl #22
   11a58:			; <UNDEFINED> instruction: 0x000119b8
   11a5c:	ldrb	r0, [r9, #168]	; 0xa8
   11a60:	cmp	r0, #46	; 0x2e
   11a64:	bne	11a80 <__assert_fail@plt+0xb2c>
   11a68:	ldr	r0, [r9, #48]	; 0x30
   11a6c:	cmp	r0, #0
   11a70:	beq	11a80 <__assert_fail@plt+0xb2c>
   11a74:	ldr	r0, [r7]
   11a78:	cmp	r0, #0
   11a7c:	beq	11b08 <__assert_fail@plt+0xbb4>
   11a80:	ldrb	r0, [r4]
   11a84:	cmp	r0, #1
   11a88:	bne	11aa0 <__assert_fail@plt+0xb4c>
   11a8c:	ldr	r1, [r9, #28]
   11a90:	movw	r0, #30169	; 0x75d9
   11a94:	movt	r0, #1
   11a98:	bl	10d14 <printf@plt>
   11a9c:	b	11ac0 <__assert_fail@plt+0xb6c>
   11aa0:	cmp	r8, #2
   11aa4:	blt	11ac0 <__assert_fail@plt+0xb6c>
   11aa8:	ldr	r1, [r9, #28]
   11aac:	movw	r0, #30170	; 0x75da
   11ab0:	movt	r0, #1
   11ab4:	bl	10d14 <printf@plt>
   11ab8:	mov	r0, #1
   11abc:	strb	r0, [r4]
   11ac0:	mov	r0, r5
   11ac4:	mov	r1, r6
   11ac8:	bl	14cac <__assert_fail@plt+0x3d58>
   11acc:	mov	sl, r0
   11ad0:	mov	r0, r9
   11ad4:	mov	r1, sl
   11ad8:	bl	11c4c <__assert_fail@plt+0xcf8>
   11adc:	cmp	sl, #0
   11ae0:	beq	11b08 <__assert_fail@plt+0xbb4>
   11ae4:	movw	r0, #33128	; 0x8168
   11ae8:	movt	r0, #2
   11aec:	ldr	r0, [r0]
   11af0:	cmp	r0, #0
   11af4:	bne	11b08 <__assert_fail@plt+0xbb4>
   11af8:	mov	r0, r5
   11afc:	mov	r1, r9
   11b00:	mov	r2, #4
   11b04:	bl	14c80 <__assert_fail@plt+0x3d2c>
   11b08:	mov	r0, r5
   11b0c:	bl	138bc <__assert_fail@plt+0x2968>
   11b10:	mov	r9, r0
   11b14:	cmp	r0, #0
   11b18:	bne	11a28 <__assert_fail@plt+0xad4>
   11b1c:	bl	10e4c <__errno_location@plt>
   11b20:	ldr	r0, [r0]
   11b24:	cmp	r0, #0
   11b28:	bne	11b6c <__assert_fail@plt+0xc18>
   11b2c:	sub	sp, fp, #28
   11b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b34:	movw	r0, #33040	; 0x8110
   11b38:	ldr	r4, [r6]
   11b3c:	movt	r0, #2
   11b40:	ldr	r5, [r0]
   11b44:	bl	10e4c <__errno_location@plt>
   11b48:	ldr	r0, [r0]
   11b4c:	bl	10df8 <strerror@plt>
   11b50:	movw	r1, #30152	; 0x75c8
   11b54:	mov	r3, r0
   11b58:	mov	r0, r5
   11b5c:	mov	r2, r4
   11b60:	movt	r1, #1
   11b64:	bl	10e40 <fprintf@plt>
   11b68:	b	11b90 <__assert_fail@plt+0xc3c>
   11b6c:	movw	r1, #33040	; 0x8110
   11b70:	movt	r1, #2
   11b74:	ldr	r4, [r1]
   11b78:	bl	10df8 <strerror@plt>
   11b7c:	movw	r1, #30204	; 0x75fc
   11b80:	mov	r2, r0
   11b84:	mov	r0, r4
   11b88:	movt	r1, #1
   11b8c:	bl	10e40 <fprintf@plt>
   11b90:	movw	r0, #33156	; 0x8184
   11b94:	mov	r1, #1
   11b98:	movt	r0, #2
   11b9c:	str	r1, [r0]
   11ba0:	b	11b2c <__assert_fail@plt+0xbd8>
   11ba4:	ldr	r0, [r0]
   11ba8:	mov	r2, #0
   11bac:	ldrh	r3, [r0, #56]	; 0x38
   11bb0:	cmp	r3, #7
   11bb4:	beq	11bec <__assert_fail@plt+0xc98>
   11bb8:	ldr	r1, [r1]
   11bbc:	ldrh	ip, [r1, #56]	; 0x38
   11bc0:	cmp	ip, #7
   11bc4:	beq	11bec <__assert_fail@plt+0xc98>
   11bc8:	cmp	r3, #10
   11bcc:	cmpne	ip, #10
   11bd0:	bne	11bf4 <__assert_fail@plt+0xca0>
   11bd4:	mov	r2, #1
   11bd8:	cmp	ip, #10
   11bdc:	mvneq	r2, #0
   11be0:	cmp	r3, #10
   11be4:	cmpeq	ip, #10
   11be8:	beq	11c30 <__assert_fail@plt+0xcdc>
   11bec:	mov	r0, r2
   11bf0:	bx	lr
   11bf4:	cmp	r3, ip
   11bf8:	beq	11c20 <__assert_fail@plt+0xccc>
   11bfc:	push	{fp, lr}
   11c00:	mov	fp, sp
   11c04:	movw	r2, #33180	; 0x819c
   11c08:	ldr	lr, [r0, #48]	; 0x30
   11c0c:	movt	r2, #2
   11c10:	ldr	r2, [r2]
   11c14:	orrs	r2, r2, lr
   11c18:	pop	{fp, lr}
   11c1c:	beq	11c34 <__assert_fail@plt+0xce0>
   11c20:	movw	r2, #33056	; 0x8120
   11c24:	movt	r2, #2
   11c28:	ldr	r2, [r2]
   11c2c:	bx	r2
   11c30:	b	12c48 <__assert_fail@plt+0x1cf4>
   11c34:	mov	r2, #1
   11c38:	cmp	r3, #1
   11c3c:	mvnne	r2, #0
   11c40:	cmpne	ip, #1
   11c44:	beq	11bec <__assert_fail@plt+0xc98>
   11c48:	b	11c20 <__assert_fail@plt+0xccc>
   11c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c50:	add	fp, sp, #28
   11c54:	sub	sp, sp, #180	; 0xb4
   11c58:	cmp	r1, #0
   11c5c:	beq	1213c <__assert_fail@plt+0x11e8>
   11c60:	mov	lr, r0
   11c64:	movw	r0, #33132	; 0x816c
   11c68:	movw	r2, #33160	; 0x8188
   11c6c:	mov	sl, #0
   11c70:	str	r1, [sp, #4]
   11c74:	mov	r4, r1
   11c78:	mov	r5, #0
   11c7c:	mov	r7, #0
   11c80:	mov	r1, #0
   11c84:	mov	ip, #0
   11c88:	movt	r0, #2
   11c8c:	movt	r2, #2
   11c90:	str	lr, [sp, #12]
   11c94:	ldr	r0, [r0]
   11c98:	ldr	r2, [r2]
   11c9c:	orr	r0, r2, r0
   11ca0:	movw	r2, #33108	; 0x8154
   11ca4:	movt	r2, #2
   11ca8:	ldr	r2, [r2]
   11cac:	orr	r0, r0, r2
   11cb0:	str	r0, [sp, #44]	; 0x2c
   11cb4:	mov	r0, #0
   11cb8:	str	r0, [sp, #40]	; 0x28
   11cbc:	mov	r0, #0
   11cc0:	str	r0, [sp, #56]	; 0x38
   11cc4:	mov	r0, #0
   11cc8:	str	r0, [sp, #36]	; 0x24
   11ccc:	mov	r0, #0
   11cd0:	str	r0, [sp, #32]
   11cd4:	mov	r0, #0
   11cd8:	str	r0, [sp, #28]
   11cdc:	mov	r0, #0
   11ce0:	str	r0, [sp, #60]	; 0x3c
   11ce4:	mov	r0, #0
   11ce8:	str	r0, [sp, #8]
   11cec:	mov	r0, #0
   11cf0:	str	r0, [sp, #52]	; 0x34
   11cf4:	b	11d50 <__assert_fail@plt+0xdfc>
   11cf8:	movw	r0, #33040	; 0x8110
   11cfc:	mov	r9, ip
   11d00:	str	r1, [sp, #64]	; 0x40
   11d04:	movt	r0, #2
   11d08:	ldr	r6, [r0]
   11d0c:	ldr	r0, [r4, #32]
   11d10:	bl	10df8 <strerror@plt>
   11d14:	movw	r1, #30329	; 0x7679
   11d18:	mov	r3, r0
   11d1c:	add	r2, r4, #168	; 0xa8
   11d20:	mov	r0, r6
   11d24:	movt	r1, #1
   11d28:	bl	10e40 <fprintf@plt>
   11d2c:	movw	r0, #33156	; 0x8184
   11d30:	mov	r1, #1
   11d34:	ldr	lr, [sp, #12]
   11d38:	mov	ip, r9
   11d3c:	movt	r0, #2
   11d40:	str	r1, [r4, #16]
   11d44:	str	r1, [r0]
   11d48:	ldr	r1, [sp, #64]	; 0x40
   11d4c:	b	11fe8 <__assert_fail@plt+0x1094>
   11d50:	ldrh	r0, [r4, #56]	; 0x38
   11d54:	cmp	r0, #10
   11d58:	cmpne	r0, #7
   11d5c:	beq	11cf8 <__assert_fail@plt+0xda4>
   11d60:	cmp	lr, #0
   11d64:	beq	11d80 <__assert_fail@plt+0xe2c>
   11d68:	ldrb	r0, [r4, #168]	; 0xa8
   11d6c:	cmp	r0, #46	; 0x2e
   11d70:	bne	11da8 <__assert_fail@plt+0xe54>
   11d74:	movw	r0, #33196	; 0x81ac
   11d78:	movt	r0, #2
   11d7c:	b	11d90 <__assert_fail@plt+0xe3c>
   11d80:	cmp	r0, #1
   11d84:	bne	11da8 <__assert_fail@plt+0xe54>
   11d88:	movw	r0, #33180	; 0x819c
   11d8c:	movt	r0, #2
   11d90:	ldr	r0, [r0]
   11d94:	cmp	r0, #0
   11d98:	bne	11da8 <__assert_fail@plt+0xe54>
   11d9c:	mov	r0, #1
   11da0:	str	r0, [r4, #16]
   11da4:	b	11fe8 <__assert_fail@plt+0x1094>
   11da8:	ldr	r0, [r4, #52]	; 0x34
   11dac:	cmp	r0, r1
   11db0:	movhi	r1, r0
   11db4:	ldr	r0, [sp, #44]	; 0x2c
   11db8:	cmp	r0, #0
   11dbc:	beq	11fe4 <__assert_fail@plt+0x1090>
   11dc0:	str	r1, [sp, #64]	; 0x40
   11dc4:	str	r7, [sp, #48]	; 0x30
   11dc8:	ldr	r3, [sp, #60]	; 0x3c
   11dcc:	ldr	r9, [sp, #52]	; 0x34
   11dd0:	ldrd	r0, [r4, #160]	; 0xa0
   11dd4:	subs	r2, r3, r0
   11dd8:	rscs	r1, r1, #0
   11ddc:	ldr	r2, [r4, #84]	; 0x54
   11de0:	movcc	r3, r0
   11de4:	str	r3, [sp, #60]	; 0x3c
   11de8:	ldrd	r0, [r4, #128]	; 0x80
   11dec:	ldrd	r6, [r4, #112]	; 0x70
   11df0:	subs	r3, r9, r0
   11df4:	rscs	r1, r1, r9, asr #31
   11df8:	movlt	r9, r0
   11dfc:	subs	r1, sl, r6
   11e00:	sbcs	r1, r5, r7
   11e04:	str	r9, [sp, #52]	; 0x34
   11e08:	mov	r1, #0
   11e0c:	movwlt	r1, #1
   11e10:	cmp	r1, #0
   11e14:	ldr	r1, [sp, #56]	; 0x38
   11e18:	movne	r5, r7
   11e1c:	movne	sl, r6
   11e20:	cmp	r2, ip
   11e24:	movhi	ip, r2
   11e28:	add	r1, r1, r0
   11e2c:	movw	r0, #33160	; 0x8188
   11e30:	movt	r0, #2
   11e34:	str	r1, [sp, #56]	; 0x38
   11e38:	ldr	r0, [r0]
   11e3c:	cmp	r0, #0
   11e40:	beq	11fdc <__assert_fail@plt+0x1088>
   11e44:	movw	r0, #33172	; 0x8194
   11e48:	mov	r9, #0
   11e4c:	str	ip, [sp, #20]
   11e50:	str	r5, [sp, #24]
   11e54:	movt	r0, #2
   11e58:	ldr	r0, [r0]
   11e5c:	cmp	r0, #0
   11e60:	beq	11e7c <__assert_fail@plt+0xf28>
   11e64:	ldr	r0, [r4, #88]	; 0x58
   11e68:	mov	r1, #0
   11e6c:	add	r2, sp, #90	; 0x5a
   11e70:	bl	16d28 <__assert_fail@plt+0x5dd4>
   11e74:	mov	r8, r0
   11e78:	b	11eac <__assert_fail@plt+0xf58>
   11e7c:	ldr	r0, [r4, #88]	; 0x58
   11e80:	bl	10d08 <getpwuid@plt>
   11e84:	cmp	r0, #0
   11e88:	mov	r8, #0
   11e8c:	mov	r9, #0
   11e90:	ldrne	r8, [r0]
   11e94:	ldr	r0, [r4, #92]	; 0x5c
   11e98:	bl	10f48 <getgrgid@plt>
   11e9c:	cmp	r0, #0
   11ea0:	ldrne	r9, [r0]
   11ea4:	cmp	r8, #0
   11ea8:	beq	11e64 <__assert_fail@plt+0xf10>
   11eac:	cmp	r9, #0
   11eb0:	bne	11ec8 <__assert_fail@plt+0xf74>
   11eb4:	ldr	r0, [r4, #92]	; 0x5c
   11eb8:	mov	r1, #0
   11ebc:	add	r2, sp, #69	; 0x45
   11ec0:	bl	16d28 <__assert_fail@plt+0x5dd4>
   11ec4:	mov	r9, r0
   11ec8:	mov	r0, r8
   11ecc:	bl	10e1c <strlen@plt>
   11ed0:	mov	r5, r0
   11ed4:	mov	r0, r9
   11ed8:	bl	10e1c <strlen@plt>
   11edc:	movw	r1, #33124	; 0x8164
   11ee0:	ldr	r3, [sp, #40]	; 0x28
   11ee4:	movw	r2, #30449	; 0x76f1
   11ee8:	add	r7, r0, r5
   11eec:	movt	r1, #2
   11ef0:	movt	r2, #1
   11ef4:	ldr	r1, [r1]
   11ef8:	cmp	r1, #0
   11efc:	movne	r3, r2
   11f00:	mov	r2, #1
   11f04:	str	r3, [sp, #40]	; 0x28
   11f08:	ldr	r3, [sp, #28]
   11f0c:	moveq	r2, r3
   11f10:	cmp	r3, #1
   11f14:	movle	r3, r2
   11f18:	ldr	r2, [sp, #36]	; 0x24
   11f1c:	str	r3, [sp, #28]
   11f20:	cmp	r5, r2
   11f24:	movgt	r2, r5
   11f28:	str	r2, [sp, #36]	; 0x24
   11f2c:	ldr	r2, [sp, #32]
   11f30:	cmp	r0, r2
   11f34:	movgt	r2, r0
   11f38:	cmp	r1, #0
   11f3c:	movwne	r1, #1
   11f40:	str	r2, [sp, #32]
   11f44:	add	r0, r7, r1
   11f48:	add	r0, r0, #19
   11f4c:	bl	16ef8 <__assert_fail@plt+0x5fa4>
   11f50:	cmp	r0, #0
   11f54:	beq	12100 <__assert_fail@plt+0x11ac>
   11f58:	str	sl, [sp, #16]
   11f5c:	add	sl, r0, #12
   11f60:	mov	r6, r0
   11f64:	mov	r1, r8
   11f68:	str	sl, [r0]
   11f6c:	mov	r0, sl
   11f70:	bl	10dbc <strcpy@plt>
   11f74:	add	r0, sl, r5
   11f78:	mov	r1, r9
   11f7c:	add	r0, r0, #1
   11f80:	str	r0, [r6, #4]
   11f84:	bl	10dbc <strcpy@plt>
   11f88:	ldr	r0, [r4, #80]	; 0x50
   11f8c:	and	r0, r0, #45056	; 0xb000
   11f90:	orr	r0, r0, #16384	; 0x4000
   11f94:	cmp	r0, #24576	; 0x6000
   11f98:	moveq	r0, #1
   11f9c:	streq	r0, [sp, #8]
   11fa0:	movw	r0, #33124	; 0x8164
   11fa4:	movt	r0, #2
   11fa8:	ldr	r0, [r0]
   11fac:	cmp	r0, #0
   11fb0:	beq	11fc8 <__assert_fail@plt+0x1074>
   11fb4:	ldr	r1, [sp, #40]	; 0x28
   11fb8:	add	r0, sl, r7
   11fbc:	add	r0, r0, #2
   11fc0:	str	r0, [r6, #8]
   11fc4:	bl	10dbc <strcpy@plt>
   11fc8:	ldr	sl, [sp, #16]
   11fcc:	ldr	r5, [sp, #24]
   11fd0:	ldr	ip, [sp, #20]
   11fd4:	ldr	lr, [sp, #12]
   11fd8:	str	r6, [r4, #20]
   11fdc:	ldr	r7, [sp, #48]	; 0x30
   11fe0:	ldr	r1, [sp, #64]	; 0x40
   11fe4:	add	r7, r7, #1
   11fe8:	ldr	r4, [r4, #8]
   11fec:	cmp	r4, #0
   11ff0:	bne	11d50 <__assert_fail@plt+0xdfc>
   11ff4:	ldr	r4, [sp, #4]
   11ff8:	cmp	r7, #0
   11ffc:	beq	1213c <__assert_fail@plt+0x11e8>
   12000:	ldr	r0, [sp, #44]	; 0x2c
   12004:	str	r7, [fp, #-64]	; 0xffffffc0
   12008:	str	r4, [fp, #-76]	; 0xffffffb4
   1200c:	str	r1, [fp, #-60]	; 0xffffffc4
   12010:	cmp	r0, #0
   12014:	beq	120b0 <__assert_fail@plt+0x115c>
   12018:	ldr	r0, [sp, #56]	; 0x38
   1201c:	sub	r6, fp, #97	; 0x61
   12020:	mov	r4, r5
   12024:	mov	r5, ip
   12028:	mov	r2, r6
   1202c:	str	r0, [fp, #-72]	; 0xffffffb8
   12030:	ldr	r0, [sp, #8]
   12034:	str	r0, [fp, #-68]	; 0xffffffbc
   12038:	ldr	r0, [sp, #52]	; 0x34
   1203c:	asr	r1, r0, #31
   12040:	bl	16d28 <__assert_fail@plt+0x5dd4>
   12044:	bl	10e1c <strlen@plt>
   12048:	str	r0, [fp, #-56]	; 0xffffffc8
   1204c:	ldr	r0, [sp, #28]
   12050:	mov	r1, #0
   12054:	mov	r2, r6
   12058:	str	r0, [fp, #-52]	; 0xffffffcc
   1205c:	ldr	r0, [sp, #32]
   12060:	str	r0, [fp, #-48]	; 0xffffffd0
   12064:	ldr	r0, [sp, #60]	; 0x3c
   12068:	bl	16d28 <__assert_fail@plt+0x5dd4>
   1206c:	bl	10e1c <strlen@plt>
   12070:	str	r0, [fp, #-44]	; 0xffffffd4
   12074:	mov	r0, r5
   12078:	mov	r1, #0
   1207c:	mov	r2, r6
   12080:	bl	16d28 <__assert_fail@plt+0x5dd4>
   12084:	bl	10e1c <strlen@plt>
   12088:	mov	r1, r4
   1208c:	ldr	r4, [sp, #4]
   12090:	str	r0, [fp, #-40]	; 0xffffffd8
   12094:	mov	r0, sl
   12098:	mov	r2, r6
   1209c:	bl	16d28 <__assert_fail@plt+0x5dd4>
   120a0:	bl	10e1c <strlen@plt>
   120a4:	str	r0, [fp, #-36]	; 0xffffffdc
   120a8:	ldr	r0, [sp, #36]	; 0x24
   120ac:	str	r0, [fp, #-32]	; 0xffffffe0
   120b0:	movw	r0, #33060	; 0x8124
   120b4:	movt	r0, #2
   120b8:	ldr	r1, [r0]
   120bc:	sub	r0, fp, #76	; 0x4c
   120c0:	blx	r1
   120c4:	movw	r0, #33052	; 0x811c
   120c8:	mov	r1, #1
   120cc:	movt	r0, #2
   120d0:	strb	r1, [r0]
   120d4:	movw	r0, #33160	; 0x8188
   120d8:	movt	r0, #2
   120dc:	ldr	r0, [r0]
   120e0:	cmp	r0, #0
   120e4:	beq	1213c <__assert_fail@plt+0x11e8>
   120e8:	ldr	r0, [r4, #20]
   120ec:	bl	12fdc <__assert_fail@plt+0x2088>
   120f0:	ldr	r4, [r4, #8]
   120f4:	cmp	r4, #0
   120f8:	bne	120e8 <__assert_fail@plt+0x1194>
   120fc:	b	1213c <__assert_fail@plt+0x11e8>
   12100:	movw	r0, #33040	; 0x8110
   12104:	movt	r0, #2
   12108:	ldr	r4, [r0]
   1210c:	bl	10e4c <__errno_location@plt>
   12110:	ldr	r0, [r0]
   12114:	bl	10df8 <strerror@plt>
   12118:	movw	r1, #30217	; 0x7609
   1211c:	mov	r2, r0
   12120:	mov	r0, r4
   12124:	movt	r1, #1
   12128:	bl	10e40 <fprintf@plt>
   1212c:	movw	r1, #33156	; 0x8184
   12130:	mov	r0, #1
   12134:	movt	r1, #2
   12138:	str	r0, [r1]
   1213c:	sub	sp, fp, #28
   12140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12144:	push	{r4, r5, fp, lr}
   12148:	add	fp, sp, #8
   1214c:	ldr	r5, [r0]
   12150:	cmp	r5, #0
   12154:	popeq	{r4, r5, fp, pc}
   12158:	mov	r4, r0
   1215c:	ldr	r0, [r5, #16]
   12160:	cmp	r0, #1
   12164:	beq	12180 <__assert_fail@plt+0x122c>
   12168:	ldr	r2, [r4, #20]
   1216c:	ldr	r1, [r4, #32]
   12170:	mov	r0, r5
   12174:	bl	12190 <__assert_fail@plt+0x123c>
   12178:	mov	r0, #10
   1217c:	bl	10e70 <putchar@plt>
   12180:	ldr	r5, [r5, #8]
   12184:	cmp	r5, #0
   12188:	bne	1215c <__assert_fail@plt+0x1208>
   1218c:	pop	{r4, r5, fp, pc}
   12190:	push	{r4, r5, r6, sl, fp, lr}
   12194:	add	fp, sp, #16
   12198:	mov	r4, r0
   1219c:	movw	r0, #33132	; 0x816c
   121a0:	mov	r6, r2
   121a4:	movt	r0, #2
   121a8:	ldr	r0, [r0]
   121ac:	cmp	r0, #0
   121b0:	beq	121cc <__assert_fail@plt+0x1278>
   121b4:	ldr	r2, [r4, #160]	; 0xa0
   121b8:	movw	r0, #30239	; 0x761f
   121bc:	movt	r0, #1
   121c0:	bl	10d14 <printf@plt>
   121c4:	mov	r5, r0
   121c8:	b	121d0 <__assert_fail@plt+0x127c>
   121cc:	mov	r5, #0
   121d0:	movw	r0, #33108	; 0x8154
   121d4:	movt	r0, #2
   121d8:	ldr	r0, [r0]
   121dc:	cmp	r0, #0
   121e0:	beq	12224 <__assert_fail@plt+0x12d0>
   121e4:	movw	r2, #33188	; 0x81a4
   121e8:	ldrd	r0, [r4, #128]	; 0x80
   121ec:	movt	r2, #2
   121f0:	ldr	r2, [r2]
   121f4:	sub	r3, r2, #1
   121f8:	adds	r0, r0, r3
   121fc:	adc	r1, r1, r3, asr #31
   12200:	asr	r3, r2, #31
   12204:	bl	17290 <__assert_fail@plt+0x633c>
   12208:	mov	r2, r0
   1220c:	movw	r0, #30284	; 0x764c
   12210:	mov	r3, r1
   12214:	mov	r1, r6
   12218:	movt	r0, #1
   1221c:	bl	10d14 <printf@plt>
   12220:	add	r5, r0, r5
   12224:	add	r0, r4, #168	; 0xa8
   12228:	bl	12ba0 <__assert_fail@plt+0x1c4c>
   1222c:	add	r5, r0, r5
   12230:	movw	r0, #33148	; 0x817c
   12234:	movt	r0, #2
   12238:	ldr	r0, [r0]
   1223c:	cmp	r0, #0
   12240:	beq	12258 <__assert_fail@plt+0x1304>
   12244:	ldr	r0, [r4, #80]	; 0x50
   12248:	bl	126c0 <__assert_fail@plt+0x176c>
   1224c:	add	r5, r0, r5
   12250:	mov	r0, r5
   12254:	pop	{r4, r5, r6, sl, fp, pc}
   12258:	movw	r0, #33164	; 0x818c
   1225c:	movt	r0, #2
   12260:	ldr	r0, [r0]
   12264:	cmp	r0, #0
   12268:	beq	12250 <__assert_fail@plt+0x12fc>
   1226c:	ldr	r0, [r4, #80]	; 0x50
   12270:	and	r1, r0, #61440	; 0xf000
   12274:	cmp	r1, #16384	; 0x4000
   12278:	beq	12248 <__assert_fail@plt+0x12f4>
   1227c:	b	12250 <__assert_fail@plt+0x12fc>
   12280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12284:	add	fp, sp, #28
   12288:	sub	sp, sp, #44	; 0x2c
   1228c:	sub	sp, sp, #8192	; 0x2000
   12290:	ldr	r9, [r0]
   12294:	mov	r5, r0
   12298:	ldr	r0, [r9, #48]	; 0x30
   1229c:	cmp	r0, #0
   122a0:	beq	122f0 <__assert_fail@plt+0x139c>
   122a4:	movw	r0, #33160	; 0x8188
   122a8:	movw	r1, #33108	; 0x8154
   122ac:	movt	r0, #2
   122b0:	movt	r1, #2
   122b4:	ldr	r0, [r0]
   122b8:	ldr	r1, [r1]
   122bc:	orrs	r0, r1, r0
   122c0:	beq	122f0 <__assert_fail@plt+0x139c>
   122c4:	movw	r0, #33188	; 0x81a4
   122c8:	ldr	r1, [r5, #4]
   122cc:	movt	r0, #2
   122d0:	ldr	r0, [r0]
   122d4:	add	r1, r1, r0
   122d8:	sub	r1, r1, #1
   122dc:	udiv	r1, r1, r0
   122e0:	movw	r0, #30228	; 0x7614
   122e4:	movt	r0, #1
   122e8:	bl	10d14 <printf@plt>
   122ec:	ldr	r9, [r5]
   122f0:	cmp	r9, #0
   122f4:	beq	125dc <__assert_fail@plt+0x1688>
   122f8:	add	sl, sp, #40	; 0x28
   122fc:	b	12334 <__assert_fail@plt+0x13e0>
   12300:	movw	r0, #33040	; 0x8110
   12304:	movt	r0, #2
   12308:	ldr	r8, [r0]
   1230c:	bl	10e4c <__errno_location@plt>
   12310:	ldr	r0, [r0]
   12314:	bl	10df8 <strerror@plt>
   12318:	movw	r1, #30324	; 0x7674
   1231c:	mov	r3, r0
   12320:	mov	r0, r8
   12324:	mov	r2, r6
   12328:	movt	r1, #1
   1232c:	bl	10e40 <fprintf@plt>
   12330:	b	125c8 <__assert_fail@plt+0x1674>
   12334:	ldr	r0, [r9, #16]
   12338:	cmp	r0, #1
   1233c:	beq	125d0 <__assert_fail@plt+0x167c>
   12340:	movw	r0, #33132	; 0x816c
   12344:	movt	r0, #2
   12348:	ldr	r0, [r0]
   1234c:	cmp	r0, #0
   12350:	beq	12368 <__assert_fail@plt+0x1414>
   12354:	ldr	r2, [r9, #160]	; 0xa0
   12358:	ldr	r1, [r5, #32]
   1235c:	movw	r0, #30239	; 0x761f
   12360:	movt	r0, #1
   12364:	bl	10d14 <printf@plt>
   12368:	movw	r0, #33108	; 0x8154
   1236c:	movt	r0, #2
   12370:	ldr	r0, [r0]
   12374:	cmp	r0, #0
   12378:	beq	123b8 <__assert_fail@plt+0x1464>
   1237c:	movw	r2, #33188	; 0x81a4
   12380:	ldrd	r0, [r9, #128]	; 0x80
   12384:	movt	r2, #2
   12388:	ldr	r2, [r2]
   1238c:	sub	r3, r2, #1
   12390:	adds	r0, r0, r3
   12394:	adc	r1, r1, r3, asr #31
   12398:	asr	r3, r2, #31
   1239c:	bl	17290 <__assert_fail@plt+0x633c>
   123a0:	mov	r3, r1
   123a4:	ldr	r1, [r5, #20]
   123a8:	mov	r2, r0
   123ac:	movw	r0, #30284	; 0x764c
   123b0:	movt	r0, #1
   123b4:	bl	10d14 <printf@plt>
   123b8:	ldr	r0, [r9, #80]	; 0x50
   123bc:	add	r4, sp, #20
   123c0:	mov	r1, r4
   123c4:	bl	12e78 <__assert_fail@plt+0x1f24>
   123c8:	ldr	r7, [r9, #20]
   123cc:	ldr	r0, [r5, #28]
   123d0:	ldr	r1, [r5, #44]	; 0x2c
   123d4:	ldr	r2, [r5, #36]	; 0x24
   123d8:	mov	r8, r5
   123dc:	ldr	r3, [r9, #84]	; 0x54
   123e0:	ldr	r6, [r7]
   123e4:	ldr	r5, [r7, #4]
   123e8:	stm	sp, {r1, r6}
   123ec:	str	r0, [sp, #8]
   123f0:	movw	r0, #30245	; 0x7625
   123f4:	mov	r1, r4
   123f8:	str	r5, [sp, #12]
   123fc:	mov	r5, r8
   12400:	movt	r0, #1
   12404:	bl	10d14 <printf@plt>
   12408:	movw	r0, #33124	; 0x8164
   1240c:	movt	r0, #2
   12410:	ldr	r0, [r0]
   12414:	cmp	r0, #0
   12418:	beq	12430 <__assert_fail@plt+0x14dc>
   1241c:	ldr	r2, [r7, #8]
   12420:	ldr	r1, [r5, #24]
   12424:	movw	r0, #30265	; 0x7639
   12428:	movt	r0, #1
   1242c:	bl	10d14 <printf@plt>
   12430:	ldr	r0, [r9, #80]	; 0x50
   12434:	sub	lr, fp, #4096	; 0x1000
   12438:	sub	r6, lr, #32
   1243c:	and	r0, r0, #45056	; 0xb000
   12440:	orr	r0, r0, #16384	; 0x4000
   12444:	cmp	r0, #24576	; 0x6000
   12448:	bne	12468 <__assert_fail@plt+0x1514>
   1244c:	ldr	r0, [r9, #96]	; 0x60
   12450:	ubfx	r1, r0, #8, #8
   12454:	uxtb	r2, r0
   12458:	movw	r0, #30271	; 0x763f
   1245c:	movt	r0, #1
   12460:	bl	10d14 <printf@plt>
   12464:	b	124b8 <__assert_fail@plt+0x1564>
   12468:	ldr	r0, [r5, #8]
   1246c:	ldr	r3, [r5, #40]	; 0x28
   12470:	cmp	r0, #0
   12474:	beq	12498 <__assert_fail@plt+0x1544>
   12478:	ldrd	r0, [r9, #112]	; 0x70
   1247c:	movw	r2, #30305	; 0x7661
   12480:	movt	r2, #1
   12484:	stm	sp, {r0, r1}
   12488:	movw	r0, #30281	; 0x7649
   1248c:	rsb	r1, r3, #8
   12490:	movt	r0, #1
   12494:	b	124b4 <__assert_fail@plt+0x1560>
   12498:	ldr	r2, [r9, #112]	; 0x70
   1249c:	ldr	r5, [r9, #116]	; 0x74
   124a0:	movw	r0, #30284	; 0x764c
   124a4:	mov	r1, r3
   124a8:	movt	r0, #1
   124ac:	mov	r3, r5
   124b0:	mov	r5, r8
   124b4:	bl	10d14 <printf@plt>
   124b8:	movw	r0, #33140	; 0x8174
   124bc:	movt	r0, #2
   124c0:	ldr	r0, [r0]
   124c4:	cmp	r0, #0
   124c8:	beq	124d4 <__assert_fail@plt+0x1580>
   124cc:	ldr	r0, [r9, #136]	; 0x88
   124d0:	b	124ec <__assert_fail@plt+0x1598>
   124d4:	movw	r0, #33184	; 0x81a0
   124d8:	movt	r0, #2
   124dc:	ldr	r0, [r0]
   124e0:	cmp	r0, #0
   124e4:	ldreq	r0, [r9, #144]	; 0x90
   124e8:	ldrne	r0, [r9, #152]	; 0x98
   124ec:	bl	125e4 <__assert_fail@plt+0x1690>
   124f0:	add	r8, r9, #168	; 0xa8
   124f4:	mov	r0, r8
   124f8:	bl	12ba0 <__assert_fail@plt+0x1c4c>
   124fc:	movw	r0, #33148	; 0x817c
   12500:	movt	r0, #2
   12504:	ldr	r0, [r0]
   12508:	cmp	r0, #0
   1250c:	beq	1251c <__assert_fail@plt+0x15c8>
   12510:	ldr	r0, [r9, #80]	; 0x50
   12514:	bl	126c0 <__assert_fail@plt+0x176c>
   12518:	b	12540 <__assert_fail@plt+0x15ec>
   1251c:	movw	r0, #33164	; 0x818c
   12520:	movt	r0, #2
   12524:	ldr	r0, [r0]
   12528:	cmp	r0, #0
   1252c:	beq	12540 <__assert_fail@plt+0x15ec>
   12530:	ldr	r0, [r9, #80]	; 0x50
   12534:	and	r1, r0, #61440	; 0xf000
   12538:	cmp	r1, #16384	; 0x4000
   1253c:	bleq	126c0 <__assert_fail@plt+0x176c>
   12540:	ldr	r0, [r9, #80]	; 0x50
   12544:	and	r0, r0, #61440	; 0xf000
   12548:	cmp	r0, #40960	; 0xa000
   1254c:	bne	125c8 <__assert_fail@plt+0x1674>
   12550:	ldr	r0, [r9, #48]	; 0x30
   12554:	cmp	r0, #0
   12558:	beq	1257c <__assert_fail@plt+0x1628>
   1255c:	ldr	r0, [r9, #4]
   12560:	movw	r2, #30318	; 0x766e
   12564:	mov	r1, #4096	; 0x1000
   12568:	movt	r2, #1
   1256c:	ldr	r3, [r0, #24]
   12570:	mov	r0, r6
   12574:	str	r8, [sp]
   12578:	b	12590 <__assert_fail@plt+0x163c>
   1257c:	movw	r2, #30225	; 0x7611
   12580:	mov	r0, r6
   12584:	mov	r1, #4096	; 0x1000
   12588:	mov	r3, r8
   1258c:	movt	r2, #1
   12590:	bl	10e58 <snprintf@plt>
   12594:	mov	r0, r6
   12598:	mov	r1, sl
   1259c:	movw	r2, #4095	; 0xfff
   125a0:	bl	10d98 <readlink@plt>
   125a4:	cmn	r0, #1
   125a8:	beq	12300 <__assert_fail@plt+0x13ac>
   125ac:	mov	r1, #0
   125b0:	strb	r1, [sl, r0]
   125b4:	movw	r0, #30337	; 0x7681
   125b8:	movt	r0, #1
   125bc:	bl	10d14 <printf@plt>
   125c0:	mov	r0, sl
   125c4:	bl	12ba0 <__assert_fail@plt+0x1c4c>
   125c8:	mov	r0, #10
   125cc:	bl	10e70 <putchar@plt>
   125d0:	ldr	r9, [r9, #8]
   125d4:	cmp	r9, #0
   125d8:	bne	12334 <__assert_fail@plt+0x13e0>
   125dc:	sub	sp, fp, #28
   125e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125e4:	push	{r4, r5, r6, sl, fp, lr}
   125e8:	add	fp, sp, #16
   125ec:	sub	sp, sp, #8
   125f0:	str	r0, [sp, #4]
   125f4:	add	r0, sp, #4
   125f8:	bl	10d5c <ctime@plt>
   125fc:	mov	r4, r0
   12600:	add	r5, r0, #4
   12604:	mov	r6, #0
   12608:	ldrb	r0, [r5, r6]
   1260c:	bl	10e70 <putchar@plt>
   12610:	add	r6, r6, #1
   12614:	cmp	r6, #7
   12618:	bne	12608 <__assert_fail@plt+0x16b4>
   1261c:	movw	r0, #33168	; 0x8190
   12620:	movt	r0, #2
   12624:	ldr	r0, [r0]
   12628:	cmp	r0, #0
   1262c:	beq	12650 <__assert_fail@plt+0x16fc>
   12630:	add	r4, r4, #11
   12634:	mov	r5, #0
   12638:	ldrb	r0, [r4, r5]
   1263c:	bl	10e70 <putchar@plt>
   12640:	add	r5, r5, #1
   12644:	cmp	r5, #13
   12648:	bne	12638 <__assert_fail@plt+0x16e4>
   1264c:	b	126b0 <__assert_fail@plt+0x175c>
   12650:	ldr	r0, [sp, #4]
   12654:	mov	r5, #0
   12658:	add	r0, r0, #61696	; 0xf100
   1265c:	add	r6, r0, #15663104	; 0xef0000
   12660:	mov	r0, #0
   12664:	bl	10d50 <time@plt>
   12668:	cmp	r6, r0
   1266c:	ble	12690 <__assert_fail@plt+0x173c>
   12670:	add	r4, r4, #11
   12674:	mov	r5, #0
   12678:	ldrb	r0, [r4, r5]
   1267c:	bl	10e70 <putchar@plt>
   12680:	add	r5, r5, #1
   12684:	cmp	r5, #5
   12688:	bne	12678 <__assert_fail@plt+0x1724>
   1268c:	b	126b0 <__assert_fail@plt+0x175c>
   12690:	mov	r0, #32
   12694:	bl	10e70 <putchar@plt>
   12698:	add	r4, r4, #20
   1269c:	ldrb	r0, [r4, r5]
   126a0:	bl	10e70 <putchar@plt>
   126a4:	add	r5, r5, #1
   126a8:	cmp	r5, #4
   126ac:	bne	1269c <__assert_fail@plt+0x1748>
   126b0:	mov	r0, #32
   126b4:	bl	10e70 <putchar@plt>
   126b8:	sub	sp, fp, #16
   126bc:	pop	{r4, r5, r6, sl, fp, pc}
   126c0:	push	{fp, lr}
   126c4:	mov	fp, sp
   126c8:	and	r1, r0, #61440	; 0xf000
   126cc:	cmp	r1, #40960	; 0xa000
   126d0:	bge	126ec <__assert_fail@plt+0x1798>
   126d4:	cmp	r1, #4096	; 0x1000
   126d8:	beq	12714 <__assert_fail@plt+0x17c0>
   126dc:	cmp	r1, #16384	; 0x4000
   126e0:	bne	12700 <__assert_fail@plt+0x17ac>
   126e4:	mov	r0, #47	; 0x2f
   126e8:	b	12720 <__assert_fail@plt+0x17cc>
   126ec:	beq	1271c <__assert_fail@plt+0x17c8>
   126f0:	cmp	r1, #49152	; 0xc000
   126f4:	bne	12700 <__assert_fail@plt+0x17ac>
   126f8:	mov	r0, #61	; 0x3d
   126fc:	b	12720 <__assert_fail@plt+0x17cc>
   12700:	tst	r0, #73	; 0x49
   12704:	moveq	r0, #0
   12708:	popeq	{fp, pc}
   1270c:	mov	r0, #42	; 0x2a
   12710:	b	12720 <__assert_fail@plt+0x17cc>
   12714:	mov	r0, #124	; 0x7c
   12718:	b	12720 <__assert_fail@plt+0x17cc>
   1271c:	mov	r0, #64	; 0x40
   12720:	bl	10e70 <putchar@plt>
   12724:	mov	r0, #1
   12728:	pop	{fp, pc}
   1272c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12730:	add	fp, sp, #28
   12734:	sub	sp, sp, #12
   12738:	add	r1, sp, #8
   1273c:	mov	r4, r0
   12740:	bl	12918 <__assert_fail@plt+0x19c4>
   12744:	cmp	r0, #0
   12748:	str	r0, [sp, #4]
   1274c:	beq	128d8 <__assert_fail@plt+0x1984>
   12750:	movw	r5, #33024	; 0x8100
   12754:	ldr	r1, [r4, #12]
   12758:	movt	r5, #2
   1275c:	ldr	r0, [r5]
   12760:	cmp	r1, r0
   12764:	ble	12790 <__assert_fail@plt+0x183c>
   12768:	movw	r6, #33064	; 0x8128
   1276c:	lsl	r1, r1, #2
   12770:	movt	r6, #2
   12774:	ldr	r0, [r6]
   12778:	bl	16f28 <__assert_fail@plt+0x5fd4>
   1277c:	cmp	r0, #0
   12780:	beq	128e0 <__assert_fail@plt+0x198c>
   12784:	ldr	r1, [r4, #12]
   12788:	str	r0, [r6]
   1278c:	str	r1, [r5]
   12790:	movw	r0, #33064	; 0x8128
   12794:	ldr	r1, [r4]
   12798:	mov	r7, #0
   1279c:	movt	r0, #2
   127a0:	ldr	r0, [r0]
   127a4:	ldr	r2, [r1, #16]
   127a8:	cmp	r2, #1
   127ac:	strne	r1, [r0, r7, lsl #2]
   127b0:	addne	r7, r7, #1
   127b4:	ldr	r1, [r1, #8]
   127b8:	cmp	r1, #0
   127bc:	bne	127a4 <__assert_fail@plt+0x1850>
   127c0:	ldr	r0, [sp, #8]
   127c4:	sdiv	r6, r7, r0
   127c8:	str	r0, [sp]
   127cc:	mls	r0, r6, r0, r7
   127d0:	cmp	r0, #0
   127d4:	ldr	r0, [r4]
   127d8:	addne	r6, r6, #1
   127dc:	ldr	r0, [r0, #48]	; 0x30
   127e0:	cmp	r0, #0
   127e4:	beq	12830 <__assert_fail@plt+0x18dc>
   127e8:	movw	r0, #33160	; 0x8188
   127ec:	movw	r1, #33108	; 0x8154
   127f0:	movt	r0, #2
   127f4:	movt	r1, #2
   127f8:	ldr	r0, [r0]
   127fc:	ldr	r1, [r1]
   12800:	orrs	r0, r1, r0
   12804:	beq	12830 <__assert_fail@plt+0x18dc>
   12808:	movw	r0, #33188	; 0x81a4
   1280c:	ldr	r1, [r4, #4]
   12810:	movt	r0, #2
   12814:	ldr	r0, [r0]
   12818:	add	r1, r1, r0
   1281c:	sub	r1, r1, #1
   12820:	udiv	r1, r1, r0
   12824:	movw	r0, #30228	; 0x7614
   12828:	movt	r0, #1
   1282c:	bl	10d14 <printf@plt>
   12830:	cmp	r6, #1
   12834:	blt	128d8 <__assert_fail@plt+0x1984>
   12838:	mov	r5, #0
   1283c:	movw	r0, #33064	; 0x8128
   12840:	ldr	r2, [r4, #20]
   12844:	ldr	r1, [r4, #32]
   12848:	movt	r0, #2
   1284c:	ldr	r0, [r0]
   12850:	ldr	r0, [r0, r5, lsl #2]
   12854:	bl	12190 <__assert_fail@plt+0x123c>
   12858:	add	r8, r5, r6
   1285c:	cmp	r8, r7
   12860:	bge	128c4 <__assert_fail@plt+0x1970>
   12864:	mov	r9, #0
   12868:	ldr	r1, [sp]
   1286c:	add	r9, r9, #1
   12870:	cmp	r9, r1
   12874:	beq	128c4 <__assert_fail@plt+0x1970>
   12878:	ldr	r1, [sp, #4]
   1287c:	cmp	r0, r1
   12880:	bge	1289c <__assert_fail@plt+0x1948>
   12884:	ldr	r1, [sp, #4]
   12888:	sub	sl, r1, r0
   1288c:	mov	r0, #32
   12890:	bl	10e70 <putchar@plt>
   12894:	subs	sl, sl, #1
   12898:	bne	1288c <__assert_fail@plt+0x1938>
   1289c:	movw	r0, #33064	; 0x8128
   128a0:	ldr	r2, [r4, #20]
   128a4:	ldr	r1, [r4, #32]
   128a8:	movt	r0, #2
   128ac:	ldr	r0, [r0]
   128b0:	ldr	r0, [r0, r8, lsl #2]
   128b4:	bl	12190 <__assert_fail@plt+0x123c>
   128b8:	add	r8, r8, r6
   128bc:	cmp	r8, r7
   128c0:	blt	12868 <__assert_fail@plt+0x1914>
   128c4:	mov	r0, #10
   128c8:	bl	10e70 <putchar@plt>
   128cc:	add	r5, r5, #1
   128d0:	cmp	r5, r6
   128d4:	bne	1283c <__assert_fail@plt+0x18e8>
   128d8:	sub	sp, fp, #28
   128dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128e0:	movw	r0, #33040	; 0x8110
   128e4:	movt	r0, #2
   128e8:	ldr	r5, [r0]
   128ec:	bl	10e4c <__errno_location@plt>
   128f0:	ldr	r0, [r0]
   128f4:	bl	10df8 <strerror@plt>
   128f8:	movw	r1, #30291	; 0x7653
   128fc:	mov	r2, r0
   12900:	mov	r0, r5
   12904:	movt	r1, #1
   12908:	bl	10e40 <fprintf@plt>
   1290c:	mov	r0, r4
   12910:	bl	12144 <__assert_fail@plt+0x11f0>
   12914:	b	128d8 <__assert_fail@plt+0x1984>
   12918:	movw	r3, #33132	; 0x816c
   1291c:	ldr	r2, [r0, #16]
   12920:	movt	r3, #2
   12924:	ldr	r3, [r3]
   12928:	cmp	r3, #0
   1292c:	ldrne	r3, [r0, #32]
   12930:	addne	r2, r2, r3
   12934:	movw	r3, #33108	; 0x8154
   12938:	movt	r3, #2
   1293c:	addne	r2, r2, #1
   12940:	ldr	r3, [r3]
   12944:	cmp	r3, #0
   12948:	ldrne	r3, [r0, #20]
   1294c:	addne	r2, r2, r3
   12950:	movw	r3, #33148	; 0x817c
   12954:	movt	r3, #2
   12958:	addne	r2, r2, #1
   1295c:	ldr	ip, [r3]
   12960:	movw	r3, #33164	; 0x818c
   12964:	movt	r3, #2
   12968:	ldr	r3, [r3]
   1296c:	orrs	r3, r3, ip
   12970:	movw	r3, #33008	; 0x80f0
   12974:	addne	r2, r2, #1
   12978:	movt	r3, #2
   1297c:	add	r2, r2, #1
   12980:	ldr	r3, [r3]
   12984:	add	r3, r3, #1
   12988:	cmp	r3, r2, lsl #1
   1298c:	sdivge	r0, r3, r2
   12990:	strge	r0, [r1]
   12994:	sdivge	r0, r3, r0
   12998:	bxge	lr
   1299c:	push	{fp, lr}
   129a0:	mov	fp, sp
   129a4:	bl	12144 <__assert_fail@plt+0x11f0>
   129a8:	mov	r0, #0
   129ac:	pop	{fp, pc}
   129b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   129b4:	add	fp, sp, #24
   129b8:	sub	sp, sp, #8
   129bc:	add	r1, sp, #4
   129c0:	mov	r9, r0
   129c4:	bl	12918 <__assert_fail@plt+0x19c4>
   129c8:	cmp	r0, #0
   129cc:	beq	12aac <__assert_fail@plt+0x1b58>
   129d0:	ldr	r6, [r9]
   129d4:	mov	r8, r0
   129d8:	ldr	r0, [r6, #48]	; 0x30
   129dc:	cmp	r0, #0
   129e0:	beq	12a34 <__assert_fail@plt+0x1ae0>
   129e4:	movw	r0, #33160	; 0x8188
   129e8:	movw	r1, #33108	; 0x8154
   129ec:	movt	r0, #2
   129f0:	movt	r1, #2
   129f4:	ldr	r0, [r0]
   129f8:	ldr	r1, [r1]
   129fc:	orrs	r0, r1, r0
   12a00:	beq	12a34 <__assert_fail@plt+0x1ae0>
   12a04:	movw	r0, #33188	; 0x81a4
   12a08:	ldr	r1, [r9, #4]
   12a0c:	mov	r3, #0
   12a10:	movt	r0, #2
   12a14:	ldr	r0, [r0]
   12a18:	add	r1, r1, r0
   12a1c:	sub	r1, r1, #1
   12a20:	udiv	r2, r1, r0
   12a24:	movw	r0, #30306	; 0x7662
   12a28:	movt	r0, #1
   12a2c:	bl	10d14 <printf@plt>
   12a30:	ldr	r6, [r9]
   12a34:	cmp	r6, #0
   12a38:	beq	12aa4 <__assert_fail@plt+0x1b50>
   12a3c:	ldr	r7, [sp, #4]
   12a40:	mov	r5, #0
   12a44:	ldr	r0, [r6, #16]
   12a48:	cmp	r0, #1
   12a4c:	beq	12a98 <__assert_fail@plt+0x1b44>
   12a50:	cmp	r5, r7
   12a54:	blt	12a64 <__assert_fail@plt+0x1b10>
   12a58:	mov	r0, #10
   12a5c:	bl	10e70 <putchar@plt>
   12a60:	mov	r5, #0
   12a64:	ldr	r2, [r9, #20]
   12a68:	ldr	r1, [r9, #32]
   12a6c:	mov	r0, r6
   12a70:	bl	12190 <__assert_fail@plt+0x123c>
   12a74:	add	r5, r5, #1
   12a78:	cmp	r5, r7
   12a7c:	cmplt	r0, r8
   12a80:	bge	12a98 <__assert_fail@plt+0x1b44>
   12a84:	sub	r4, r8, r0
   12a88:	mov	r0, #32
   12a8c:	bl	10e70 <putchar@plt>
   12a90:	subs	r4, r4, #1
   12a94:	bne	12a88 <__assert_fail@plt+0x1b34>
   12a98:	ldr	r6, [r6, #8]
   12a9c:	cmp	r6, #0
   12aa0:	bne	12a44 <__assert_fail@plt+0x1af0>
   12aa4:	mov	r0, #10
   12aa8:	bl	10e70 <putchar@plt>
   12aac:	sub	sp, fp, #24
   12ab0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12ab4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ab8:	add	fp, sp, #24
   12abc:	mov	r4, r0
   12ac0:	movw	r0, #33132	; 0x816c
   12ac4:	movt	r0, #2
   12ac8:	ldr	r5, [r4]
   12acc:	ldr	r0, [r0]
   12ad0:	cmp	r0, #0
   12ad4:	ldrne	r0, [r4, #32]
   12ad8:	addne	r6, r0, #1
   12adc:	movw	r0, #33108	; 0x8154
   12ae0:	movt	r0, #2
   12ae4:	moveq	r6, #0
   12ae8:	ldr	r0, [r0]
   12aec:	cmp	r0, #0
   12af0:	ldrne	r0, [r4, #20]
   12af4:	addne	r0, r6, r0
   12af8:	addne	r6, r0, #1
   12afc:	movw	r0, #33148	; 0x817c
   12b00:	movt	r0, #2
   12b04:	ldr	r0, [r0]
   12b08:	cmp	r0, #0
   12b0c:	addne	r6, r6, #1
   12b10:	cmp	r5, #0
   12b14:	beq	12b94 <__assert_fail@plt+0x1c40>
   12b18:	movw	r8, #33008	; 0x80f0
   12b1c:	mov	r7, #0
   12b20:	movt	r8, #2
   12b24:	ldr	r0, [r5, #16]
   12b28:	cmp	r0, #1
   12b2c:	beq	12b88 <__assert_fail@plt+0x1c34>
   12b30:	cmp	r7, #1
   12b34:	blt	12b74 <__assert_fail@plt+0x1c20>
   12b38:	mov	r0, #44	; 0x2c
   12b3c:	bl	10e70 <putchar@plt>
   12b40:	ldr	r1, [r5, #52]	; 0x34
   12b44:	add	r7, r7, #2
   12b48:	add	r0, r6, r7
   12b4c:	add	r0, r0, r1
   12b50:	ldr	r1, [r8]
   12b54:	cmp	r0, r1
   12b58:	bcs	12b68 <__assert_fail@plt+0x1c14>
   12b5c:	mov	r0, #32
   12b60:	bl	10e70 <putchar@plt>
   12b64:	b	12b74 <__assert_fail@plt+0x1c20>
   12b68:	mov	r0, #10
   12b6c:	bl	10e70 <putchar@plt>
   12b70:	mov	r7, #0
   12b74:	ldr	r2, [r4, #20]
   12b78:	ldr	r1, [r4, #32]
   12b7c:	mov	r0, r5
   12b80:	bl	12190 <__assert_fail@plt+0x123c>
   12b84:	add	r7, r0, r7
   12b88:	ldr	r5, [r5, #8]
   12b8c:	cmp	r5, #0
   12b90:	bne	12b24 <__assert_fail@plt+0x1bd0>
   12b94:	mov	r0, #10
   12b98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b9c:	b	10e70 <putchar@plt>
   12ba0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ba4:	add	fp, sp, #24
   12ba8:	ldrb	r7, [r0]
   12bac:	cmp	r7, #0
   12bb0:	beq	12c0c <__assert_fail@plt+0x1cb8>
   12bb4:	add	r6, r0, #1
   12bb8:	bl	10e10 <__ctype_b_loc@plt>
   12bbc:	movw	r8, #33200	; 0x81b0
   12bc0:	mov	r5, r0
   12bc4:	mov	r4, #0
   12bc8:	movt	r8, #2
   12bcc:	ldr	r2, [r5]
   12bd0:	uxtb	r1, r7
   12bd4:	ldr	r0, [r8]
   12bd8:	add	r2, r2, r1, lsl #1
   12bdc:	cmp	r0, #0
   12be0:	mov	r0, r1
   12be4:	ldrh	r2, [r2]
   12be8:	movwne	r0, #63	; 0x3f
   12bec:	tst	r2, #16384	; 0x4000
   12bf0:	movne	r0, r1
   12bf4:	bl	10e70 <putchar@plt>
   12bf8:	ldrb	r7, [r6, r4]
   12bfc:	add	r4, r4, #1
   12c00:	cmp	r7, #0
   12c04:	bne	12bcc <__assert_fail@plt+0x1c78>
   12c08:	b	12c10 <__assert_fail@plt+0x1cbc>
   12c0c:	mov	r4, #0
   12c10:	mov	r0, r4
   12c14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c18:	push	{fp, lr}
   12c1c:	mov	fp, sp
   12c20:	movw	r0, #33040	; 0x8110
   12c24:	mov	r1, #51	; 0x33
   12c28:	mov	r2, #1
   12c2c:	movt	r0, #2
   12c30:	ldr	r3, [r0]
   12c34:	movw	r0, #30342	; 0x7686
   12c38:	movt	r0, #1
   12c3c:	bl	10da4 <fwrite@plt>
   12c40:	mov	r0, #1
   12c44:	pop	{fp, pc}
   12c48:	add	r0, r0, #168	; 0xa8
   12c4c:	add	r1, r1, #168	; 0xa8
   12c50:	b	10cfc <strcmp@plt>
   12c54:	add	r2, r1, #168	; 0xa8
   12c58:	add	r1, r0, #168	; 0xa8
   12c5c:	mov	r0, r2
   12c60:	b	10cfc <strcmp@plt>
   12c64:	ldr	r3, [r0, #144]	; 0x90
   12c68:	ldr	r2, [r1, #144]	; 0x90
   12c6c:	mov	ip, r0
   12c70:	mov	r0, #1
   12c74:	cmp	r2, r3
   12c78:	ble	12c80 <__assert_fail@plt+0x1d2c>
   12c7c:	bx	lr
   12c80:	bne	12ca0 <__assert_fail@plt+0x1d4c>
   12c84:	push	{r4, sl, fp, lr}
   12c88:	add	fp, sp, #8
   12c8c:	ldr	lr, [ip, #148]	; 0x94
   12c90:	ldr	r4, [r1, #148]	; 0x94
   12c94:	cmp	r4, lr
   12c98:	pop	{r4, sl, fp, lr}
   12c9c:	bgt	12c7c <__assert_fail@plt+0x1d28>
   12ca0:	mvn	r0, #0
   12ca4:	cmp	r2, r3
   12ca8:	bxlt	lr
   12cac:	bne	12cc0 <__assert_fail@plt+0x1d6c>
   12cb0:	ldr	r2, [ip, #148]	; 0x94
   12cb4:	ldr	r3, [r1, #148]	; 0x94
   12cb8:	cmp	r3, r2
   12cbc:	blt	12c7c <__assert_fail@plt+0x1d28>
   12cc0:	add	r0, ip, #168	; 0xa8
   12cc4:	add	r1, r1, #168	; 0xa8
   12cc8:	b	10cfc <strcmp@plt>
   12ccc:	push	{fp, lr}
   12cd0:	mov	fp, sp
   12cd4:	bl	12c64 <__assert_fail@plt+0x1d10>
   12cd8:	rsb	r0, r0, #0
   12cdc:	pop	{fp, pc}
   12ce0:	ldr	r3, [r0, #136]	; 0x88
   12ce4:	ldr	r2, [r1, #136]	; 0x88
   12ce8:	mov	ip, r0
   12cec:	mov	r0, #1
   12cf0:	cmp	r2, r3
   12cf4:	ble	12cfc <__assert_fail@plt+0x1da8>
   12cf8:	bx	lr
   12cfc:	bne	12d1c <__assert_fail@plt+0x1dc8>
   12d00:	push	{r4, sl, fp, lr}
   12d04:	add	fp, sp, #8
   12d08:	ldr	lr, [ip, #140]	; 0x8c
   12d0c:	ldr	r4, [r1, #140]	; 0x8c
   12d10:	cmp	r4, lr
   12d14:	pop	{r4, sl, fp, lr}
   12d18:	bgt	12cf8 <__assert_fail@plt+0x1da4>
   12d1c:	mvn	r0, #0
   12d20:	cmp	r2, r3
   12d24:	bxlt	lr
   12d28:	bne	12d3c <__assert_fail@plt+0x1de8>
   12d2c:	ldr	r2, [ip, #140]	; 0x8c
   12d30:	ldr	r3, [r1, #140]	; 0x8c
   12d34:	cmp	r3, r2
   12d38:	blt	12cf8 <__assert_fail@plt+0x1da4>
   12d3c:	add	r0, ip, #168	; 0xa8
   12d40:	add	r1, r1, #168	; 0xa8
   12d44:	b	10cfc <strcmp@plt>
   12d48:	push	{fp, lr}
   12d4c:	mov	fp, sp
   12d50:	bl	12ce0 <__assert_fail@plt+0x1d8c>
   12d54:	rsb	r0, r0, #0
   12d58:	pop	{fp, pc}
   12d5c:	ldr	r3, [r0, #152]	; 0x98
   12d60:	ldr	r2, [r1, #152]	; 0x98
   12d64:	mov	ip, r0
   12d68:	mov	r0, #1
   12d6c:	cmp	r2, r3
   12d70:	ble	12d78 <__assert_fail@plt+0x1e24>
   12d74:	bx	lr
   12d78:	bne	12d98 <__assert_fail@plt+0x1e44>
   12d7c:	push	{r4, sl, fp, lr}
   12d80:	add	fp, sp, #8
   12d84:	ldr	lr, [ip, #156]	; 0x9c
   12d88:	ldr	r4, [r1, #156]	; 0x9c
   12d8c:	cmp	r4, lr
   12d90:	pop	{r4, sl, fp, lr}
   12d94:	bgt	12d74 <__assert_fail@plt+0x1e20>
   12d98:	mvn	r0, #0
   12d9c:	cmp	r2, r3
   12da0:	bxlt	lr
   12da4:	bne	12db8 <__assert_fail@plt+0x1e64>
   12da8:	ldr	r2, [ip, #156]	; 0x9c
   12dac:	ldr	r3, [r1, #156]	; 0x9c
   12db0:	cmp	r3, r2
   12db4:	blt	12d74 <__assert_fail@plt+0x1e20>
   12db8:	add	r0, ip, #168	; 0xa8
   12dbc:	add	r1, r1, #168	; 0xa8
   12dc0:	b	10cfc <strcmp@plt>
   12dc4:	push	{fp, lr}
   12dc8:	mov	fp, sp
   12dcc:	bl	12d5c <__assert_fail@plt+0x1e08>
   12dd0:	rsb	r0, r0, #0
   12dd4:	pop	{fp, pc}
   12dd8:	push	{r4, r5, r6, sl, fp, lr}
   12ddc:	add	fp, sp, #16
   12de0:	ldr	r4, [r0, #112]	; 0x70
   12de4:	ldr	r3, [r0, #116]	; 0x74
   12de8:	ldr	r6, [r1, #112]	; 0x70
   12dec:	ldr	r5, [r1, #116]	; 0x74
   12df0:	mov	ip, #1
   12df4:	subs	r2, r4, r6
   12df8:	sbcs	r2, r3, r5
   12dfc:	blt	12e10 <__assert_fail@plt+0x1ebc>
   12e00:	subs	r2, r6, r4
   12e04:	mvn	ip, #0
   12e08:	sbcs	r2, r5, r3
   12e0c:	bge	12e18 <__assert_fail@plt+0x1ec4>
   12e10:	mov	r0, ip
   12e14:	pop	{r4, r5, r6, sl, fp, pc}
   12e18:	add	r0, r0, #168	; 0xa8
   12e1c:	add	r1, r1, #168	; 0xa8
   12e20:	pop	{r4, r5, r6, sl, fp, lr}
   12e24:	b	10cfc <strcmp@plt>
   12e28:	push	{r4, r5, r6, sl, fp, lr}
   12e2c:	add	fp, sp, #16
   12e30:	ldr	r4, [r0, #112]	; 0x70
   12e34:	ldr	r3, [r0, #116]	; 0x74
   12e38:	ldr	r6, [r1, #112]	; 0x70
   12e3c:	ldr	r5, [r1, #116]	; 0x74
   12e40:	mvn	ip, #0
   12e44:	subs	r2, r4, r6
   12e48:	sbcs	r2, r3, r5
   12e4c:	blt	12e70 <__assert_fail@plt+0x1f1c>
   12e50:	subs	r2, r6, r4
   12e54:	mov	ip, #1
   12e58:	sbcs	r2, r5, r3
   12e5c:	blt	12e70 <__assert_fail@plt+0x1f1c>
   12e60:	add	r0, r0, #168	; 0xa8
   12e64:	add	r1, r1, #168	; 0xa8
   12e68:	bl	10cfc <strcmp@plt>
   12e6c:	rsb	ip, r0, #0
   12e70:	mov	r0, ip
   12e74:	pop	{r4, r5, r6, sl, fp, pc}
   12e78:	and	r2, r0, #61440	; 0xf000
   12e7c:	sub	r2, r2, #4096	; 0x1000
   12e80:	lsr	r3, r2, #12
   12e84:	cmp	r3, #11
   12e88:	bhi	12ed8 <__assert_fail@plt+0x1f84>
   12e8c:	add	r2, pc, #4
   12e90:	mov	ip, #45	; 0x2d
   12e94:	ldr	pc, [r2, r3, lsl #2]
   12e98:	andeq	r2, r1, r8, asr #29
   12e9c:	ldrdeq	r2, [r1], -r0
   12ea0:	ldrdeq	r2, [r1], -r8
   12ea4:	andeq	r2, r1, r0, ror #29
   12ea8:	ldrdeq	r2, [r1], -r8
   12eac:	strdeq	r2, [r1], -r8
   12eb0:	ldrdeq	r2, [r1], -r8
   12eb4:	strdeq	r2, [r1], -ip
   12eb8:	ldrdeq	r2, [r1], -r8
   12ebc:	andeq	r2, r1, r8, ror #29
   12ec0:	ldrdeq	r2, [r1], -r8
   12ec4:	strdeq	r2, [r1], -r0
   12ec8:	mov	ip, #112	; 0x70
   12ecc:	b	12efc <__assert_fail@plt+0x1fa8>
   12ed0:	mov	ip, #99	; 0x63
   12ed4:	b	12efc <__assert_fail@plt+0x1fa8>
   12ed8:	mov	ip, #63	; 0x3f
   12edc:	b	12efc <__assert_fail@plt+0x1fa8>
   12ee0:	mov	ip, #100	; 0x64
   12ee4:	b	12efc <__assert_fail@plt+0x1fa8>
   12ee8:	mov	ip, #108	; 0x6c
   12eec:	b	12efc <__assert_fail@plt+0x1fa8>
   12ef0:	mov	ip, #115	; 0x73
   12ef4:	b	12efc <__assert_fail@plt+0x1fa8>
   12ef8:	mov	ip, #98	; 0x62
   12efc:	push	{fp, lr}
   12f00:	mov	fp, sp
   12f04:	mov	r2, #32
   12f08:	tst	r0, #256	; 0x100
   12f0c:	mov	r3, #114	; 0x72
   12f10:	strb	ip, [r1]
   12f14:	mov	ip, #114	; 0x72
   12f18:	mov	lr, #45	; 0x2d
   12f1c:	strh	r2, [r1, #10]
   12f20:	movweq	r3, #45	; 0x2d
   12f24:	tst	r0, #128	; 0x80
   12f28:	mov	r2, #119	; 0x77
   12f2c:	movweq	r2, #45	; 0x2d
   12f30:	strb	r3, [r1, #1]
   12f34:	tst	r0, #32
   12f38:	mov	r3, #119	; 0x77
   12f3c:	strb	r2, [r1, #2]
   12f40:	mov	r2, #114	; 0x72
   12f44:	movweq	r2, #45	; 0x2d
   12f48:	tst	r0, #16
   12f4c:	strb	r2, [r1, #4]
   12f50:	mov	r2, #119	; 0x77
   12f54:	movweq	r2, #45	; 0x2d
   12f58:	tst	r0, #4
   12f5c:	movweq	ip, #45	; 0x2d
   12f60:	tst	r0, #2
   12f64:	strb	r2, [r1, #5]
   12f68:	movweq	r3, #45	; 0x2d
   12f6c:	strb	ip, [r1, #7]
   12f70:	ands	r2, r0, #64	; 0x40
   12f74:	mov	ip, #45	; 0x2d
   12f78:	strb	r3, [r1, #8]
   12f7c:	mov	r3, #83	; 0x53
   12f80:	movwne	lr, #120	; 0x78
   12f84:	mov	r2, #83	; 0x53
   12f88:	movwne	r3, #115	; 0x73
   12f8c:	tst	r0, #2048	; 0x800
   12f90:	moveq	r3, lr
   12f94:	strb	r3, [r1, #3]
   12f98:	ands	r3, r0, #8
   12f9c:	mov	r3, #45	; 0x2d
   12fa0:	movwne	r2, #115	; 0x73
   12fa4:	movwne	r3, #120	; 0x78
   12fa8:	tst	r0, #1024	; 0x400
   12fac:	moveq	r2, r3
   12fb0:	strb	r2, [r1, #6]
   12fb4:	ands	r2, r0, #1
   12fb8:	mov	r2, #84	; 0x54
   12fbc:	movwne	ip, #120	; 0x78
   12fc0:	movwne	r2, #116	; 0x74
   12fc4:	tst	r0, #512	; 0x200
   12fc8:	moveq	r2, ip
   12fcc:	strb	r2, [r1, #9]
   12fd0:	pop	{fp, pc}
   12fd4:	ldr	r0, [r0, #16]
   12fd8:	b	12e78 <__assert_fail@plt+0x1f24>
   12fdc:	push	{r4, r5, r6, sl, fp, lr}
   12fe0:	add	fp, sp, #16
   12fe4:	mov	r4, r0
   12fe8:	bl	10e4c <__errno_location@plt>
   12fec:	ldr	r6, [r0]
   12ff0:	mov	r5, r0
   12ff4:	mov	r0, r4
   12ff8:	bl	10d38 <free@plt>
   12ffc:	str	r6, [r5]
   13000:	pop	{r4, r5, r6, sl, fp, pc}
   13004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13008:	add	fp, sp, #28
   1300c:	sub	sp, sp, #12
   13010:	cmp	r1, #4096	; 0x1000
   13014:	bcs	13030 <__assert_fail@plt+0x20dc>
   13018:	mov	r6, r0
   1301c:	and	r0, r1, #516	; 0x204
   13020:	mov	r5, r1
   13024:	cmp	r0, #516	; 0x204
   13028:	tstne	r5, #18
   1302c:	bne	1304c <__assert_fail@plt+0x20f8>
   13030:	bl	10e4c <__errno_location@plt>
   13034:	mov	r1, #22
   13038:	str	r1, [r0]
   1303c:	mov	r8, #0
   13040:	mov	r0, r8
   13044:	sub	sp, fp, #28
   13048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1304c:	mov	r0, #1
   13050:	mov	r1, #96	; 0x60
   13054:	mov	r9, r2
   13058:	bl	16ea4 <__assert_fail@plt+0x5f50>
   1305c:	cmp	r0, #0
   13060:	beq	1303c <__assert_fail@plt+0x20e8>
   13064:	mov	r8, r0
   13068:	mvn	r0, #99	; 0x63
   1306c:	tst	r5, #2
   13070:	mov	r1, r5
   13074:	str	r0, [r8, #32]
   13078:	bic	r0, r5, #516	; 0x204
   1307c:	str	r9, [r8, #44]	; 0x2c
   13080:	orrne	r1, r0, #4
   13084:	str	r1, [r8, #48]	; 0x30
   13088:	ldr	r0, [r6]
   1308c:	cmp	r0, #0
   13090:	beq	130c4 <__assert_fail@plt+0x2170>
   13094:	add	r4, r6, #4
   13098:	mov	r7, #0
   1309c:	bl	10e1c <strlen@plt>
   130a0:	cmp	r0, r7
   130a4:	movhi	r7, r0
   130a8:	ldr	r0, [r4], #4
   130ac:	cmp	r0, #0
   130b0:	bne	1309c <__assert_fail@plt+0x2148>
   130b4:	add	r1, r7, #1
   130b8:	cmp	r1, #4096	; 0x1000
   130bc:	movls	r1, #4096	; 0x1000
   130c0:	b	130c8 <__assert_fail@plt+0x2174>
   130c4:	mov	r1, #4096	; 0x1000
   130c8:	mov	r0, r8
   130cc:	bl	13320 <__assert_fail@plt+0x23cc>
   130d0:	cmp	r0, #0
   130d4:	beq	13314 <__assert_fail@plt+0x23c0>
   130d8:	ldr	r0, [r6]
   130dc:	cmp	r0, #0
   130e0:	beq	13110 <__assert_fail@plt+0x21bc>
   130e4:	movw	r1, #30305	; 0x7661
   130e8:	mov	r0, r8
   130ec:	mov	r2, #0
   130f0:	movt	r1, #1
   130f4:	bl	13394 <__assert_fail@plt+0x2440>
   130f8:	cmp	r0, #0
   130fc:	beq	1330c <__assert_fail@plt+0x23b8>
   13100:	mov	r4, r0
   13104:	mvn	r0, #0
   13108:	str	r0, [r4, #48]	; 0x30
   1310c:	b	13114 <__assert_fail@plt+0x21c0>
   13110:	mov	r4, #0
   13114:	cmp	r9, #0
   13118:	ldrbne	r0, [r8, #49]	; 0x31
   1311c:	ubfxne	r0, r0, #2, #1
   13120:	ldr	r7, [r6]
   13124:	moveq	r0, #1
   13128:	cmp	r7, #0
   1312c:	beq	1324c <__assert_fail@plt+0x22f8>
   13130:	eor	r0, r0, #1
   13134:	and	r1, r5, #2048	; 0x800
   13138:	mov	sl, #0
   1313c:	mov	r5, #0
   13140:	str	r0, [sp, #4]
   13144:	mov	r0, #0
   13148:	str	r1, [sp, #8]
   1314c:	str	r0, [sp]
   13150:	mov	r0, r7
   13154:	bl	10e1c <strlen@plt>
   13158:	mov	r2, r0
   1315c:	ldr	r0, [sp, #8]
   13160:	cmp	r0, #0
   13164:	bne	1319c <__assert_fail@plt+0x2248>
   13168:	cmp	r2, #3
   1316c:	bcc	1319c <__assert_fail@plt+0x2248>
   13170:	add	r0, r7, r2
   13174:	ldrb	r0, [r0, #-1]
   13178:	cmp	r0, #47	; 0x2f
   1317c:	bne	1319c <__assert_fail@plt+0x2248>
   13180:	sub	r0, r7, #2
   13184:	ldrb	r1, [r0, r2]
   13188:	cmp	r1, #47	; 0x2f
   1318c:	bne	1319c <__assert_fail@plt+0x2248>
   13190:	sub	r2, r2, #1
   13194:	cmp	r2, #1
   13198:	bhi	13184 <__assert_fail@plt+0x2230>
   1319c:	mov	r0, r8
   131a0:	mov	r1, r7
   131a4:	bl	13394 <__assert_fail@plt+0x2440>
   131a8:	cmp	r0, #0
   131ac:	beq	132fc <__assert_fail@plt+0x23a8>
   131b0:	mov	r1, #0
   131b4:	ldr	r2, [sp, #4]
   131b8:	str	r4, [r0, #4]
   131bc:	mov	r7, r0
   131c0:	str	r1, [r0, #48]	; 0x30
   131c4:	add	r0, r0, #168	; 0xa8
   131c8:	str	r0, [r7, #24]
   131cc:	clz	r0, sl
   131d0:	lsr	r0, r0, #5
   131d4:	orrs	r0, r2, r0
   131d8:	bne	131ec <__assert_fail@plt+0x2298>
   131dc:	mov	r0, #2
   131e0:	strd	r0, [r7, #112]	; 0x70
   131e4:	mov	r0, #11
   131e8:	b	13200 <__assert_fail@plt+0x22ac>
   131ec:	mov	r0, r8
   131f0:	mov	r1, r7
   131f4:	mov	r2, #0
   131f8:	bl	13414 <__assert_fail@plt+0x24c0>
   131fc:	mov	r1, #0
   13200:	cmp	r9, #0
   13204:	strh	r0, [r7, #56]	; 0x38
   13208:	beq	13218 <__assert_fail@plt+0x22c4>
   1320c:	str	sl, [r7, #8]
   13210:	mov	sl, r7
   13214:	b	13230 <__assert_fail@plt+0x22dc>
   13218:	cmp	sl, #0
   1321c:	str	r1, [r7, #8]
   13220:	beq	13244 <__assert_fail@plt+0x22f0>
   13224:	ldr	r0, [sp]
   13228:	str	r7, [sp]
   1322c:	str	r7, [r0, #8]
   13230:	ldr	r7, [r6, #4]!
   13234:	add	r5, r5, #1
   13238:	cmp	r7, #0
   1323c:	bne	13150 <__assert_fail@plt+0x21fc>
   13240:	b	13254 <__assert_fail@plt+0x2300>
   13244:	str	r7, [sp]
   13248:	b	13210 <__assert_fail@plt+0x22bc>
   1324c:	mov	sl, #0
   13250:	b	13278 <__assert_fail@plt+0x2324>
   13254:	cmp	r9, #0
   13258:	beq	13278 <__assert_fail@plt+0x2324>
   1325c:	cmp	r5, #2
   13260:	bcc	13278 <__assert_fail@plt+0x2324>
   13264:	mov	r0, r8
   13268:	mov	r1, sl
   1326c:	mov	r2, r5
   13270:	bl	13548 <__assert_fail@plt+0x25f4>
   13274:	mov	sl, r0
   13278:	movw	r1, #30305	; 0x7661
   1327c:	mov	r0, r8
   13280:	mov	r2, #0
   13284:	movt	r1, #1
   13288:	bl	13394 <__assert_fail@plt+0x2440>
   1328c:	cmp	r0, #0
   13290:	str	r0, [r8]
   13294:	beq	132fc <__assert_fail@plt+0x23a8>
   13298:	mov	r1, #9
   1329c:	strh	r1, [r0, #56]	; 0x38
   132a0:	mov	r1, #1
   132a4:	str	sl, [r0, #8]
   132a8:	str	r1, [r0, #48]	; 0x30
   132ac:	mov	r0, r8
   132b0:	bl	13640 <__assert_fail@plt+0x26ec>
   132b4:	cmp	r0, #0
   132b8:	beq	132fc <__assert_fail@plt+0x23a8>
   132bc:	ldrh	r0, [r8, #48]	; 0x30
   132c0:	tst	r0, #516	; 0x204
   132c4:	bne	132ec <__assert_fail@plt+0x2398>
   132c8:	movw	r1, #30395	; 0x76bb
   132cc:	mov	r0, r8
   132d0:	movt	r1, #1
   132d4:	bl	136cc <__assert_fail@plt+0x2778>
   132d8:	str	r0, [r8, #28]
   132dc:	cmn	r0, #1
   132e0:	ldrle	r0, [r8, #48]	; 0x30
   132e4:	orrle	r0, r0, #4
   132e8:	strle	r0, [r8, #48]	; 0x30
   132ec:	add	r0, r8, #60	; 0x3c
   132f0:	mvn	r1, #0
   132f4:	bl	16c48 <__assert_fail@plt+0x5cf4>
   132f8:	b	13040 <__assert_fail@plt+0x20ec>
   132fc:	mov	r0, sl
   13300:	bl	136fc <__assert_fail@plt+0x27a8>
   13304:	mov	r0, r4
   13308:	bl	12fdc <__assert_fail@plt+0x2088>
   1330c:	ldr	r0, [r8, #24]
   13310:	bl	12fdc <__assert_fail@plt+0x2088>
   13314:	mov	r0, r8
   13318:	bl	12fdc <__assert_fail@plt+0x2088>
   1331c:	b	1303c <__assert_fail@plt+0x20e8>
   13320:	push	{r4, r5, fp, lr}
   13324:	add	fp, sp, #8
   13328:	mov	r4, r0
   1332c:	ldr	r0, [r0, #36]	; 0x24
   13330:	add	r1, r1, #256	; 0x100
   13334:	adds	r1, r1, r0
   13338:	bcc	1335c <__assert_fail@plt+0x2408>
   1333c:	ldr	r0, [r4, #24]
   13340:	bl	12fdc <__assert_fail@plt+0x2088>
   13344:	mov	r5, #0
   13348:	str	r5, [r4, #24]
   1334c:	bl	10e4c <__errno_location@plt>
   13350:	mov	r1, #36	; 0x24
   13354:	str	r1, [r0]
   13358:	b	1338c <__assert_fail@plt+0x2438>
   1335c:	str	r1, [r4, #36]	; 0x24
   13360:	ldr	r0, [r4, #24]
   13364:	bl	16f28 <__assert_fail@plt+0x5fd4>
   13368:	cmp	r0, #0
   1336c:	beq	1337c <__assert_fail@plt+0x2428>
   13370:	mov	r5, #1
   13374:	str	r0, [r4, #24]
   13378:	b	1338c <__assert_fail@plt+0x2438>
   1337c:	ldr	r0, [r4, #24]
   13380:	bl	12fdc <__assert_fail@plt+0x2088>
   13384:	mov	r5, #0
   13388:	str	r5, [r4, #24]
   1338c:	mov	r0, r5
   13390:	pop	{r4, r5, fp, pc}
   13394:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13398:	add	fp, sp, #24
   1339c:	mov	r5, r0
   133a0:	add	r0, r2, #176	; 0xb0
   133a4:	mov	r6, r2
   133a8:	mov	r8, r1
   133ac:	bic	r0, r0, #7
   133b0:	bl	16ef8 <__assert_fail@plt+0x5fa4>
   133b4:	cmp	r0, #0
   133b8:	beq	13408 <__assert_fail@plt+0x24b4>
   133bc:	add	r7, r0, #168	; 0xa8
   133c0:	mov	r4, r0
   133c4:	mov	r1, r8
   133c8:	mov	r2, r6
   133cc:	mov	r0, r7
   133d0:	bl	10d44 <memcpy@plt>
   133d4:	mov	r0, #0
   133d8:	mov	r2, #196608	; 0x30000
   133dc:	strb	r0, [r7, r6]
   133e0:	str	r6, [r4, #52]	; 0x34
   133e4:	str	r5, [r4, #44]	; 0x2c
   133e8:	ldr	r1, [r5, #24]
   133ec:	str	r2, [r4, #58]	; 0x3a
   133f0:	str	r0, [r4, #12]
   133f4:	str	r0, [r4, #16]
   133f8:	str	r0, [r4, #20]
   133fc:	str	r1, [r4, #28]
   13400:	str	r0, [r4, #32]
   13404:	b	1340c <__assert_fail@plt+0x24b8>
   13408:	mov	r4, #0
   1340c:	mov	r0, r4
   13410:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13414:	push	{r4, r5, r6, sl, fp, lr}
   13418:	add	fp, sp, #16
   1341c:	mov	r4, r1
   13420:	ldr	r1, [r0, #48]	; 0x30
   13424:	ldr	r3, [r4, #48]	; 0x30
   13428:	add	r5, r4, #64	; 0x40
   1342c:	cmp	r3, #0
   13430:	andeq	r3, r1, #1
   13434:	orreq	r2, r3, r2
   13438:	cmp	r2, #0
   1343c:	andseq	r1, r1, #2
   13440:	beq	13490 <__assert_fail@plt+0x253c>
   13444:	ldr	r0, [r4, #24]
   13448:	mov	r1, r5
   1344c:	bl	1753c <__assert_fail@plt+0x65e8>
   13450:	cmp	r0, #0
   13454:	beq	134d4 <__assert_fail@plt+0x2580>
   13458:	bl	10e4c <__errno_location@plt>
   1345c:	mov	r6, r0
   13460:	ldr	r0, [r0]
   13464:	cmp	r0, #2
   13468:	bne	134b8 <__assert_fail@plt+0x2564>
   1346c:	ldr	r0, [r4, #24]
   13470:	mov	r1, r5
   13474:	bl	1755c <__assert_fail@plt+0x6608>
   13478:	cmp	r0, #0
   1347c:	bne	134b4 <__assert_fail@plt+0x2560>
   13480:	mov	r0, #0
   13484:	str	r0, [r6]
   13488:	mov	r0, #13
   1348c:	pop	{r4, r5, r6, sl, fp, pc}
   13490:	ldr	r1, [r4, #24]
   13494:	ldr	r0, [r0, #32]
   13498:	mov	r2, r5
   1349c:	mov	r3, #256	; 0x100
   134a0:	bl	1756c <__assert_fail@plt+0x6618>
   134a4:	cmp	r0, #0
   134a8:	beq	134d4 <__assert_fail@plt+0x2580>
   134ac:	bl	10e4c <__errno_location@plt>
   134b0:	mov	r6, r0
   134b4:	ldr	r0, [r6]
   134b8:	str	r0, [r4, #32]
   134bc:	mov	r0, r5
   134c0:	mov	r1, #0
   134c4:	mov	r2, #104	; 0x68
   134c8:	bl	10e64 <memset@plt>
   134cc:	mov	r0, #10
   134d0:	pop	{r4, r5, r6, sl, fp, pc}
   134d4:	ldr	r0, [r4, #80]	; 0x50
   134d8:	and	r0, r0, #61440	; 0xf000
   134dc:	cmp	r0, #40960	; 0xa000
   134e0:	moveq	r0, #12
   134e4:	popeq	{r4, r5, r6, sl, fp, pc}
   134e8:	cmp	r0, #32768	; 0x8000
   134ec:	moveq	r0, #8
   134f0:	popeq	{r4, r5, r6, sl, fp, pc}
   134f4:	cmp	r0, #16384	; 0x4000
   134f8:	bne	1352c <__assert_fail@plt+0x25d8>
   134fc:	ldrb	r1, [r4, #168]	; 0xa8
   13500:	mov	r0, #1
   13504:	cmp	r1, #46	; 0x2e
   13508:	popne	{r4, r5, r6, sl, fp, pc}
   1350c:	ldrb	r1, [r4, #169]	; 0xa9
   13510:	cmp	r1, #0
   13514:	beq	13534 <__assert_fail@plt+0x25e0>
   13518:	cmp	r1, #46	; 0x2e
   1351c:	ldrbeq	r1, [r4, #170]	; 0xaa
   13520:	cmpeq	r1, #0
   13524:	beq	13534 <__assert_fail@plt+0x25e0>
   13528:	pop	{r4, r5, r6, sl, fp, pc}
   1352c:	mov	r0, #3
   13530:	pop	{r4, r5, r6, sl, fp, pc}
   13534:	ldr	r1, [r4, #48]	; 0x30
   13538:	mov	r0, #5
   1353c:	cmp	r1, #0
   13540:	movweq	r0, #1
   13544:	pop	{r4, r5, r6, sl, fp, pc}
   13548:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1354c:	add	fp, sp, #24
   13550:	ldrd	r8, [r0, #40]	; 0x28
   13554:	mov	r5, r2
   13558:	mov	r4, r1
   1355c:	mov	r6, r0
   13560:	cmp	r8, r2
   13564:	bcs	1359c <__assert_fail@plt+0x2648>
   13568:	add	r1, r5, #40	; 0x28
   1356c:	cmn	r1, #-1073741823	; 0xc0000001
   13570:	str	r1, [r6, #40]	; 0x28
   13574:	bhi	13624 <__assert_fail@plt+0x26d0>
   13578:	add	r7, r6, #8
   1357c:	lsl	r1, r1, #2
   13580:	ldr	r0, [r7]
   13584:	bl	16f28 <__assert_fail@plt+0x5fd4>
   13588:	cmp	r0, #0
   1358c:	beq	13624 <__assert_fail@plt+0x26d0>
   13590:	mov	r6, r7
   13594:	str	r0, [r7]
   13598:	b	135a0 <__assert_fail@plt+0x264c>
   1359c:	ldr	r0, [r6, #8]!
   135a0:	cmp	r4, #0
   135a4:	beq	135bc <__assert_fail@plt+0x2668>
   135a8:	str	r4, [r0], #4
   135ac:	ldr	r4, [r4, #8]
   135b0:	cmp	r4, #0
   135b4:	bne	135a8 <__assert_fail@plt+0x2654>
   135b8:	ldr	r0, [r6]
   135bc:	mov	r1, r5
   135c0:	mov	r2, #4
   135c4:	mov	r3, r9
   135c8:	bl	10ee8 <qsort@plt>
   135cc:	ldr	r7, [r6]
   135d0:	subs	r0, r5, #1
   135d4:	ldr	r4, [r7]
   135d8:	mov	r1, r4
   135dc:	beq	13618 <__assert_fail@plt+0x26c4>
   135e0:	mov	r1, r7
   135e4:	cmp	r5, #2
   135e8:	ldr	r2, [r1, #4]!
   135ec:	str	r2, [r4, #8]
   135f0:	beq	13614 <__assert_fail@plt+0x26c0>
   135f4:	rsb	r3, r5, #2
   135f8:	mov	r2, r1
   135fc:	ldr	r6, [r2, #4]!
   13600:	ldr	r1, [r1]
   13604:	adds	r3, r3, #1
   13608:	str	r6, [r1, #8]
   1360c:	mov	r1, r2
   13610:	bne	135fc <__assert_fail@plt+0x26a8>
   13614:	ldr	r1, [r7, r0, lsl #2]
   13618:	mov	r0, #0
   1361c:	str	r0, [r1, #8]
   13620:	b	13638 <__assert_fail@plt+0x26e4>
   13624:	ldr	r0, [r6, #8]
   13628:	bl	12fdc <__assert_fail@plt+0x2088>
   1362c:	mov	r0, #0
   13630:	str	r0, [r6, #40]	; 0x28
   13634:	str	r0, [r6, #8]
   13638:	mov	r0, r4
   1363c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13640:	push	{r4, r5, fp, lr}
   13644:	add	fp, sp, #8
   13648:	sub	sp, sp, #8
   1364c:	mov	r4, r0
   13650:	ldrh	r0, [r0, #48]	; 0x30
   13654:	movw	r1, #258	; 0x102
   13658:	tst	r0, r1
   1365c:	beq	1369c <__assert_fail@plt+0x2748>
   13660:	movw	r0, #12252	; 0x2fdc
   13664:	movw	r2, #19984	; 0x4e10
   13668:	movw	r3, #20016	; 0x4e30
   1366c:	mov	r1, #0
   13670:	mov	r5, #0
   13674:	movt	r0, #1
   13678:	movt	r2, #1
   1367c:	movt	r3, #1
   13680:	str	r0, [sp]
   13684:	mov	r0, #31
   13688:	bl	16170 <__assert_fail@plt+0x521c>
   1368c:	cmp	r0, #0
   13690:	str	r0, [r4, #56]	; 0x38
   13694:	movne	r5, #1
   13698:	b	136c0 <__assert_fail@plt+0x276c>
   1369c:	mov	r0, #32
   136a0:	bl	16ef8 <__assert_fail@plt+0x5fa4>
   136a4:	cmp	r0, #0
   136a8:	str	r0, [r4, #56]	; 0x38
   136ac:	beq	136bc <__assert_fail@plt+0x2768>
   136b0:	bl	16f78 <__assert_fail@plt+0x6024>
   136b4:	mov	r5, #1
   136b8:	b	136c0 <__assert_fail@plt+0x276c>
   136bc:	mov	r5, #0
   136c0:	mov	r0, r5
   136c4:	sub	sp, fp, #8
   136c8:	pop	{r4, r5, fp, pc}
   136cc:	ldr	r3, [r0, #48]	; 0x30
   136d0:	mov	r2, #32768	; 0x8000
   136d4:	and	r2, r2, r3, lsl #11
   136d8:	tst	r3, #512	; 0x200
   136dc:	orr	r2, r2, #18688	; 0x4900
   136e0:	orr	r2, r2, #524288	; 0x80000
   136e4:	bne	136f4 <__assert_fail@plt+0x27a0>
   136e8:	mov	r0, r1
   136ec:	mov	r1, r2
   136f0:	b	1723c <__assert_fail@plt+0x62e8>
   136f4:	ldr	r0, [r0, #32]
   136f8:	b	16dc0 <__assert_fail@plt+0x5e6c>
   136fc:	push	{r4, r6, r7, sl, fp, lr}
   13700:	add	fp, sp, #16
   13704:	cmp	r0, #0
   13708:	popeq	{r4, r6, r7, sl, fp, pc}
   1370c:	mov	r4, r0
   13710:	ldrd	r6, [r4, #8]
   13714:	cmp	r7, #0
   13718:	beq	13724 <__assert_fail@plt+0x27d0>
   1371c:	mov	r0, r7
   13720:	bl	10f3c <closedir@plt>
   13724:	mov	r0, r4
   13728:	bl	12fdc <__assert_fail@plt+0x2088>
   1372c:	cmp	r6, #0
   13730:	mov	r4, r6
   13734:	bne	13710 <__assert_fail@plt+0x27bc>
   13738:	pop	{r4, r6, r7, sl, fp, pc}
   1373c:	push	{r4, r5, fp, lr}
   13740:	add	fp, sp, #8
   13744:	mov	r4, r0
   13748:	ldr	r0, [r0]
   1374c:	cmp	r0, #0
   13750:	beq	13790 <__assert_fail@plt+0x283c>
   13754:	ldr	r1, [r0, #48]	; 0x30
   13758:	cmp	r1, #0
   1375c:	blt	13784 <__assert_fail@plt+0x2830>
   13760:	ldr	r5, [r0, #8]
   13764:	cmp	r5, #0
   13768:	ldreq	r5, [r0, #4]
   1376c:	bl	12fdc <__assert_fail@plt+0x2088>
   13770:	ldr	r0, [r5, #48]	; 0x30
   13774:	cmn	r0, #1
   13778:	mov	r0, r5
   1377c:	bgt	13760 <__assert_fail@plt+0x280c>
   13780:	b	13788 <__assert_fail@plt+0x2834>
   13784:	mov	r5, r0
   13788:	mov	r0, r5
   1378c:	bl	12fdc <__assert_fail@plt+0x2088>
   13790:	ldr	r0, [r4, #4]
   13794:	cmp	r0, #0
   13798:	blne	136fc <__assert_fail@plt+0x27a8>
   1379c:	ldr	r0, [r4, #8]
   137a0:	bl	12fdc <__assert_fail@plt+0x2088>
   137a4:	ldr	r0, [r4, #24]
   137a8:	bl	12fdc <__assert_fail@plt+0x2088>
   137ac:	ldr	r0, [r4, #48]	; 0x30
   137b0:	tst	r0, #512	; 0x200
   137b4:	bne	137e0 <__assert_fail@plt+0x288c>
   137b8:	mov	r5, #0
   137bc:	tst	r0, #4
   137c0:	bne	1381c <__assert_fail@plt+0x28c8>
   137c4:	ldr	r0, [r4, #28]
   137c8:	bl	10edc <fchdir@plt>
   137cc:	cmp	r0, #0
   137d0:	beq	137f8 <__assert_fail@plt+0x28a4>
   137d4:	bl	10e4c <__errno_location@plt>
   137d8:	ldr	r5, [r0]
   137dc:	b	137fc <__assert_fail@plt+0x28a8>
   137e0:	ldr	r0, [r4, #32]
   137e4:	mov	r5, #0
   137e8:	cmp	r0, #0
   137ec:	blt	1381c <__assert_fail@plt+0x28c8>
   137f0:	bl	10f24 <close@plt>
   137f4:	b	1380c <__assert_fail@plt+0x28b8>
   137f8:	mov	r5, #0
   137fc:	ldr	r0, [r4, #28]
   13800:	bl	10f24 <close@plt>
   13804:	cmp	r5, #0
   13808:	bne	1381c <__assert_fail@plt+0x28c8>
   1380c:	cmp	r0, #0
   13810:	beq	1381c <__assert_fail@plt+0x28c8>
   13814:	bl	10e4c <__errno_location@plt>
   13818:	ldr	r5, [r0]
   1381c:	add	r0, r4, #60	; 0x3c
   13820:	bl	13860 <__assert_fail@plt+0x290c>
   13824:	ldr	r0, [r4, #52]	; 0x34
   13828:	cmp	r0, #0
   1382c:	beq	13834 <__assert_fail@plt+0x28e0>
   13830:	bl	1649c <__assert_fail@plt+0x5548>
   13834:	mov	r0, r4
   13838:	bl	13894 <__assert_fail@plt+0x2940>
   1383c:	mov	r0, r4
   13840:	bl	12fdc <__assert_fail@plt+0x2088>
   13844:	cmp	r5, #0
   13848:	moveq	r0, #0
   1384c:	popeq	{r4, r5, fp, pc}
   13850:	bl	10e4c <__errno_location@plt>
   13854:	str	r5, [r0]
   13858:	mvn	r0, #0
   1385c:	pop	{r4, r5, fp, pc}
   13860:	push	{r4, sl, fp, lr}
   13864:	add	fp, sp, #8
   13868:	mov	r4, r0
   1386c:	bl	16c7c <__assert_fail@plt+0x5d28>
   13870:	cmp	r0, #0
   13874:	popne	{r4, sl, fp, pc}
   13878:	mov	r0, r4
   1387c:	bl	16cd0 <__assert_fail@plt+0x5d7c>
   13880:	cmp	r0, #0
   13884:	blt	1388c <__assert_fail@plt+0x2938>
   13888:	bl	10f24 <close@plt>
   1388c:	mov	r0, r4
   13890:	b	1386c <__assert_fail@plt+0x2918>
   13894:	ldrh	r1, [r0, #48]	; 0x30
   13898:	movw	r2, #258	; 0x102
   1389c:	tst	r1, r2
   138a0:	beq	138b4 <__assert_fail@plt+0x2960>
   138a4:	ldr	r0, [r0, #56]	; 0x38
   138a8:	cmp	r0, #0
   138ac:	bxeq	lr
   138b0:	b	1649c <__assert_fail@plt+0x5548>
   138b4:	ldr	r0, [r0, #56]	; 0x38
   138b8:	b	12fdc <__assert_fail@plt+0x2088>
   138bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138c0:	add	fp, sp, #24
   138c4:	ldr	r6, [r0]
   138c8:	mov	r5, #0
   138cc:	cmp	r6, #0
   138d0:	beq	13ec4 <__assert_fail@plt+0x2f70>
   138d4:	ldr	r1, [r0, #48]	; 0x30
   138d8:	mov	r4, r0
   138dc:	tst	r1, #8192	; 0x2000
   138e0:	bne	13ec4 <__assert_fail@plt+0x2f70>
   138e4:	ldrh	r0, [r6, #60]	; 0x3c
   138e8:	mov	r2, #3
   138ec:	strh	r2, [r6, #60]	; 0x3c
   138f0:	cmp	r0, #1
   138f4:	beq	13944 <__assert_fail@plt+0x29f0>
   138f8:	mov	r7, r6
   138fc:	cmp	r0, #2
   13900:	bne	1395c <__assert_fail@plt+0x2a08>
   13904:	ldrh	r2, [r7, #56]!	; 0x38
   13908:	movw	r3, #65534	; 0xfffe
   1390c:	and	r3, r2, r3
   13910:	cmp	r3, #12
   13914:	bne	13960 <__assert_fail@plt+0x2a0c>
   13918:	mov	r0, r4
   1391c:	mov	r1, r6
   13920:	mov	r2, #1
   13924:	bl	13414 <__assert_fail@plt+0x24c0>
   13928:	strh	r0, [r6, #56]	; 0x38
   1392c:	cmp	r0, #1
   13930:	ldrbeq	r0, [r4, #48]	; 0x30
   13934:	tsteq	r0, #4
   13938:	beq	13b2c <__assert_fail@plt+0x2bd8>
   1393c:	mov	r5, r6
   13940:	b	13c54 <__assert_fail@plt+0x2d00>
   13944:	mov	r0, r4
   13948:	mov	r1, r6
   1394c:	mov	r2, #0
   13950:	bl	13414 <__assert_fail@plt+0x24c0>
   13954:	strh	r0, [r6, #56]	; 0x38
   13958:	b	139b0 <__assert_fail@plt+0x2a5c>
   1395c:	ldrh	r2, [r7, #56]!	; 0x38
   13960:	cmp	r2, #1
   13964:	bne	139b8 <__assert_fail@plt+0x2a64>
   13968:	cmp	r0, #4
   1396c:	bne	13a24 <__assert_fail@plt+0x2ad0>
   13970:	ldrb	r0, [r6, #58]	; 0x3a
   13974:	tst	r0, #2
   13978:	beq	13984 <__assert_fail@plt+0x2a30>
   1397c:	ldr	r0, [r6, #36]	; 0x24
   13980:	bl	10f24 <close@plt>
   13984:	ldr	r0, [r4, #4]
   13988:	cmp	r0, #0
   1398c:	beq	1399c <__assert_fail@plt+0x2a48>
   13990:	bl	136fc <__assert_fail@plt+0x27a8>
   13994:	mov	r0, #0
   13998:	str	r0, [r4, #4]
   1399c:	mov	r0, #6
   139a0:	strh	r0, [r6, #56]	; 0x38
   139a4:	mov	r0, r4
   139a8:	mov	r1, r6
   139ac:	bl	13ed0 <__assert_fail@plt+0x2f7c>
   139b0:	mov	r5, r6
   139b4:	b	13ec4 <__assert_fail@plt+0x2f70>
   139b8:	ldr	r5, [r6, #8]
   139bc:	cmp	r5, #0
   139c0:	beq	13abc <__assert_fail@plt+0x2b68>
   139c4:	mov	r0, r6
   139c8:	str	r5, [r4]
   139cc:	bl	12fdc <__assert_fail@plt+0x2088>
   139d0:	ldr	r0, [r5, #48]	; 0x30
   139d4:	cmp	r0, #0
   139d8:	beq	13b08 <__assert_fail@plt+0x2bb4>
   139dc:	ldrh	r0, [r5, #60]	; 0x3c
   139e0:	mov	r6, r5
   139e4:	cmp	r0, #4
   139e8:	beq	139b8 <__assert_fail@plt+0x2a64>
   139ec:	cmp	r0, #2
   139f0:	bne	13c18 <__assert_fail@plt+0x2cc4>
   139f4:	mov	r0, r4
   139f8:	mov	r1, r5
   139fc:	mov	r2, #1
   13a00:	bl	13414 <__assert_fail@plt+0x24c0>
   13a04:	strh	r0, [r5, #56]	; 0x38
   13a08:	cmp	r0, #1
   13a0c:	ldrbeq	r0, [r4, #48]	; 0x30
   13a10:	tsteq	r0, #4
   13a14:	beq	13e28 <__assert_fail@plt+0x2ed4>
   13a18:	mov	r0, #3
   13a1c:	strh	r0, [r5, #60]	; 0x3c
   13a20:	b	13c18 <__assert_fail@plt+0x2cc4>
   13a24:	tst	r1, #64	; 0x40
   13a28:	beq	13a4c <__assert_fail@plt+0x2af8>
   13a2c:	ldr	r0, [r4, #16]
   13a30:	ldr	r3, [r4, #20]
   13a34:	ldr	r2, [r6, #64]	; 0x40
   13a38:	ldr	r5, [r6, #68]	; 0x44
   13a3c:	eor	r3, r5, r3
   13a40:	eor	r0, r2, r0
   13a44:	orrs	r0, r0, r3
   13a48:	bne	13970 <__assert_fail@plt+0x2a1c>
   13a4c:	ldr	r0, [r4, #4]
   13a50:	cmp	r0, #0
   13a54:	beq	13bf4 <__assert_fail@plt+0x2ca0>
   13a58:	tst	r1, #4096	; 0x1000
   13a5c:	bne	13be0 <__assert_fail@plt+0x2c8c>
   13a60:	ldr	r3, [r6, #24]
   13a64:	mov	r0, r4
   13a68:	mov	r1, r6
   13a6c:	mvn	r2, #0
   13a70:	bl	13f9c <__assert_fail@plt+0x3048>
   13a74:	cmp	r0, #0
   13a78:	beq	13c0c <__assert_fail@plt+0x2cb8>
   13a7c:	bl	10e4c <__errno_location@plt>
   13a80:	ldr	r0, [r0]
   13a84:	str	r0, [r6, #32]
   13a88:	ldrh	r0, [r6, #58]	; 0x3a
   13a8c:	orr	r0, r0, #1
   13a90:	strh	r0, [r6, #58]	; 0x3a
   13a94:	ldr	r0, [r4, #4]
   13a98:	cmp	r0, #0
   13a9c:	beq	13c0c <__assert_fail@plt+0x2cb8>
   13aa0:	ldmib	r0, {r1, r2}
   13aa4:	ldr	r1, [r1, #24]
   13aa8:	cmp	r2, #0
   13aac:	str	r1, [r0, #24]
   13ab0:	mov	r0, r2
   13ab4:	bne	13aa0 <__assert_fail@plt+0x2b4c>
   13ab8:	b	13c0c <__assert_fail@plt+0x2cb8>
   13abc:	ldr	r5, [r6, #4]
   13ac0:	ldr	r0, [r5, #12]
   13ac4:	cmp	r0, #0
   13ac8:	beq	13d10 <__assert_fail@plt+0x2dbc>
   13acc:	str	r5, [r4]
   13ad0:	ldr	r1, [r5, #40]	; 0x28
   13ad4:	ldr	r0, [r4, #24]
   13ad8:	mov	r5, #0
   13adc:	strb	r5, [r0, r1]
   13ae0:	mov	r0, r4
   13ae4:	mov	r1, #3
   13ae8:	bl	14174 <__assert_fail@plt+0x3220>
   13aec:	cmp	r0, #0
   13af0:	beq	13d00 <__assert_fail@plt+0x2dac>
   13af4:	mov	r7, r0
   13af8:	mov	r0, r6
   13afc:	bl	12fdc <__assert_fail@plt+0x2088>
   13b00:	mov	r5, r7
   13b04:	b	13c18 <__assert_fail@plt+0x2cc4>
   13b08:	mov	r0, r4
   13b0c:	bl	14b08 <__assert_fail@plt+0x3bb4>
   13b10:	cmp	r0, #0
   13b14:	beq	13b58 <__assert_fail@plt+0x2c04>
   13b18:	ldr	r0, [r4, #48]	; 0x30
   13b1c:	mov	r5, #0
   13b20:	orr	r0, r0, #8192	; 0x2000
   13b24:	str	r0, [r4, #48]	; 0x30
   13b28:	b	13ec4 <__assert_fail@plt+0x2f70>
   13b2c:	movw	r1, #30395	; 0x76bb
   13b30:	mov	r0, r4
   13b34:	movt	r1, #1
   13b38:	bl	136cc <__assert_fail@plt+0x2778>
   13b3c:	cmn	r0, #1
   13b40:	str	r0, [r6, #36]	; 0x24
   13b44:	ble	13d9c <__assert_fail@plt+0x2e48>
   13b48:	ldrh	r0, [r6, #58]	; 0x3a
   13b4c:	orr	r0, r0, #2
   13b50:	strh	r0, [r6, #58]	; 0x3a
   13b54:	b	1393c <__assert_fail@plt+0x29e8>
   13b58:	mov	r0, r4
   13b5c:	bl	13894 <__assert_fail@plt+0x2940>
   13b60:	ldr	r1, [r5, #52]	; 0x34
   13b64:	add	r6, r5, #168	; 0xa8
   13b68:	str	r1, [r5, #40]	; 0x28
   13b6c:	add	r2, r1, #1
   13b70:	mov	r1, r6
   13b74:	ldr	r0, [r4, #24]
   13b78:	bl	10d2c <memmove@plt>
   13b7c:	mov	r0, r6
   13b80:	mov	r1, #47	; 0x2f
   13b84:	bl	10e88 <strrchr@plt>
   13b88:	cmp	r0, #0
   13b8c:	beq	13bc8 <__assert_fail@plt+0x2c74>
   13b90:	cmp	r0, r6
   13b94:	bne	13ba4 <__assert_fail@plt+0x2c50>
   13b98:	ldrb	r1, [r5, #169]	; 0xa9
   13b9c:	cmp	r1, #0
   13ba0:	beq	13bc8 <__assert_fail@plt+0x2c74>
   13ba4:	add	r7, r0, #1
   13ba8:	mov	r0, r7
   13bac:	bl	10e1c <strlen@plt>
   13bb0:	mov	r8, r0
   13bb4:	add	r2, r0, #1
   13bb8:	mov	r0, r6
   13bbc:	mov	r1, r7
   13bc0:	bl	10d2c <memmove@plt>
   13bc4:	str	r8, [r5, #52]	; 0x34
   13bc8:	ldr	r0, [r4, #24]
   13bcc:	str	r0, [r5, #24]
   13bd0:	str	r0, [r5, #28]
   13bd4:	mov	r0, r4
   13bd8:	bl	13640 <__assert_fail@plt+0x26ec>
   13bdc:	b	13c54 <__assert_fail@plt+0x2d00>
   13be0:	bic	r1, r1, #4096	; 0x1000
   13be4:	str	r1, [r4, #48]	; 0x30
   13be8:	bl	136fc <__assert_fail@plt+0x27a8>
   13bec:	mov	r0, #0
   13bf0:	str	r0, [r4, #4]
   13bf4:	mov	r0, r4
   13bf8:	mov	r1, #3
   13bfc:	bl	14174 <__assert_fail@plt+0x3220>
   13c00:	cmp	r0, #0
   13c04:	str	r0, [r4, #4]
   13c08:	beq	13cd4 <__assert_fail@plt+0x2d80>
   13c0c:	ldr	r5, [r4, #4]
   13c10:	mov	r0, #0
   13c14:	str	r0, [r4, #4]
   13c18:	ldr	r0, [r5, #4]
   13c1c:	ldr	r1, [r0, #28]
   13c20:	ldr	r0, [r0, #40]	; 0x28
   13c24:	sub	r2, r0, #1
   13c28:	ldrb	r1, [r1, r2]
   13c2c:	cmp	r1, #47	; 0x2f
   13c30:	ldr	r1, [r4, #24]
   13c34:	moveq	r0, r2
   13c38:	mov	r2, #47	; 0x2f
   13c3c:	strb	r2, [r1, r0]!
   13c40:	ldr	r2, [r5, #52]	; 0x34
   13c44:	add	r0, r1, #1
   13c48:	add	r1, r5, #168	; 0xa8
   13c4c:	add	r2, r2, #1
   13c50:	bl	10d2c <memmove@plt>
   13c54:	str	r5, [r4]
   13c58:	ldrh	r0, [r5, #56]	; 0x38
   13c5c:	cmp	r0, #11
   13c60:	bne	13c94 <__assert_fail@plt+0x2d40>
   13c64:	ldrd	r0, [r5, #112]	; 0x70
   13c68:	eor	r2, r0, #1
   13c6c:	orrs	r2, r2, r1
   13c70:	beq	13ec4 <__assert_fail@plt+0x2f70>
   13c74:	eor	r0, r0, #2
   13c78:	orrs	r0, r0, r1
   13c7c:	bne	13ecc <__assert_fail@plt+0x2f78>
   13c80:	mov	r0, r4
   13c84:	mov	r1, r5
   13c88:	mov	r2, #0
   13c8c:	bl	13414 <__assert_fail@plt+0x24c0>
   13c90:	strh	r0, [r5, #56]	; 0x38
   13c94:	cmp	r0, #1
   13c98:	bne	13ec4 <__assert_fail@plt+0x2f70>
   13c9c:	ldr	r0, [r5, #48]	; 0x30
   13ca0:	cmp	r0, #0
   13ca4:	ldrdeq	r0, [r5, #64]	; 0x40
   13ca8:	strdeq	r0, [r4, #16]
   13cac:	mov	r0, r4
   13cb0:	mov	r1, r5
   13cb4:	bl	14b64 <__assert_fail@plt+0x3c10>
   13cb8:	cmp	r0, #0
   13cbc:	bne	13ec4 <__assert_fail@plt+0x2f70>
   13cc0:	bl	10e4c <__errno_location@plt>
   13cc4:	mov	r1, #12
   13cc8:	mov	r5, #0
   13ccc:	str	r1, [r0]
   13cd0:	b	13ec4 <__assert_fail@plt+0x2f70>
   13cd4:	ldrb	r0, [r4, #49]	; 0x31
   13cd8:	mov	r5, #0
   13cdc:	tst	r0, #32
   13ce0:	bne	13ec4 <__assert_fail@plt+0x2f70>
   13ce4:	ldr	r0, [r6, #32]
   13ce8:	cmp	r0, #0
   13cec:	ldrhne	r0, [r7]
   13cf0:	cmpne	r0, #4
   13cf4:	movne	r0, #7
   13cf8:	strhne	r0, [r7]
   13cfc:	b	139a4 <__assert_fail@plt+0x2a50>
   13d00:	ldrb	r0, [r4, #49]	; 0x31
   13d04:	tst	r0, #32
   13d08:	bne	13ec4 <__assert_fail@plt+0x2f70>
   13d0c:	ldr	r5, [r6, #4]
   13d10:	mov	r0, r6
   13d14:	str	r5, [r4]
   13d18:	bl	12fdc <__assert_fail@plt+0x2088>
   13d1c:	ldr	r0, [r5, #48]	; 0x30
   13d20:	cmn	r0, #1
   13d24:	beq	13d80 <__assert_fail@plt+0x2e2c>
   13d28:	ldrh	r0, [r5, #56]	; 0x38
   13d2c:	cmp	r0, #11
   13d30:	beq	13ecc <__assert_fail@plt+0x2f78>
   13d34:	ldr	r0, [r5, #40]	; 0x28
   13d38:	ldr	r1, [r4, #24]
   13d3c:	mov	r2, #0
   13d40:	strb	r2, [r1, r0]
   13d44:	ldr	r0, [r5, #48]	; 0x30
   13d48:	cmp	r0, #0
   13d4c:	beq	13db4 <__assert_fail@plt+0x2e60>
   13d50:	ldrh	r0, [r5, #58]	; 0x3a
   13d54:	tst	r0, #2
   13d58:	bne	13de0 <__assert_fail@plt+0x2e8c>
   13d5c:	tst	r0, #1
   13d60:	bne	13e88 <__assert_fail@plt+0x2f34>
   13d64:	ldr	r1, [r5, #4]
   13d68:	movw	r3, #30394	; 0x76ba
   13d6c:	mov	r0, r4
   13d70:	mvn	r2, #0
   13d74:	movt	r3, #1
   13d78:	bl	13f9c <__assert_fail@plt+0x3048>
   13d7c:	b	13dbc <__assert_fail@plt+0x2e68>
   13d80:	mov	r0, r5
   13d84:	bl	12fdc <__assert_fail@plt+0x2088>
   13d88:	bl	10e4c <__errno_location@plt>
   13d8c:	mov	r5, #0
   13d90:	str	r5, [r0]
   13d94:	str	r5, [r4]
   13d98:	b	13ec4 <__assert_fail@plt+0x2f70>
   13d9c:	bl	10e4c <__errno_location@plt>
   13da0:	ldr	r0, [r0]
   13da4:	mov	r1, #7
   13da8:	strh	r1, [r6, #56]	; 0x38
   13dac:	str	r0, [r6, #32]
   13db0:	b	1393c <__assert_fail@plt+0x29e8>
   13db4:	mov	r0, r4
   13db8:	bl	14b08 <__assert_fail@plt+0x3bb4>
   13dbc:	cmp	r0, #0
   13dc0:	beq	13e88 <__assert_fail@plt+0x2f34>
   13dc4:	bl	10e4c <__errno_location@plt>
   13dc8:	ldr	r0, [r0]
   13dcc:	str	r0, [r5, #32]
   13dd0:	ldr	r0, [r4, #48]	; 0x30
   13dd4:	orr	r0, r0, #8192	; 0x2000
   13dd8:	str	r0, [r4, #48]	; 0x30
   13ddc:	b	13e88 <__assert_fail@plt+0x2f34>
   13de0:	ldr	r0, [r4, #48]	; 0x30
   13de4:	tst	r0, #4
   13de8:	bne	13e54 <__assert_fail@plt+0x2f00>
   13dec:	mov	r6, r5
   13df0:	tst	r0, #512	; 0x200
   13df4:	ldr	r1, [r6, #36]!	; 0x24
   13df8:	bne	13e74 <__assert_fail@plt+0x2f20>
   13dfc:	mov	r0, r1
   13e00:	bl	10edc <fchdir@plt>
   13e04:	cmp	r0, #0
   13e08:	beq	13e80 <__assert_fail@plt+0x2f2c>
   13e0c:	bl	10e4c <__errno_location@plt>
   13e10:	ldr	r0, [r0]
   13e14:	str	r0, [r5, #32]
   13e18:	ldr	r0, [r4, #48]	; 0x30
   13e1c:	orr	r0, r0, #8192	; 0x2000
   13e20:	str	r0, [r4, #48]	; 0x30
   13e24:	b	13e80 <__assert_fail@plt+0x2f2c>
   13e28:	movw	r1, #30395	; 0x76bb
   13e2c:	mov	r0, r4
   13e30:	movt	r1, #1
   13e34:	bl	136cc <__assert_fail@plt+0x2778>
   13e38:	cmn	r0, #1
   13e3c:	str	r0, [r5, #36]	; 0x24
   13e40:	ble	13e5c <__assert_fail@plt+0x2f08>
   13e44:	ldrh	r0, [r5, #58]	; 0x3a
   13e48:	orr	r0, r0, #2
   13e4c:	strh	r0, [r5, #58]	; 0x3a
   13e50:	b	13a18 <__assert_fail@plt+0x2ac4>
   13e54:	add	r6, r5, #36	; 0x24
   13e58:	b	13e80 <__assert_fail@plt+0x2f2c>
   13e5c:	bl	10e4c <__errno_location@plt>
   13e60:	ldr	r0, [r0]
   13e64:	mov	r1, #7
   13e68:	strh	r1, [r5, #56]	; 0x38
   13e6c:	str	r0, [r5, #32]
   13e70:	b	13a18 <__assert_fail@plt+0x2ac4>
   13e74:	mov	r0, r4
   13e78:	mov	r2, #1
   13e7c:	bl	14c18 <__assert_fail@plt+0x3cc4>
   13e80:	ldr	r0, [r6]
   13e84:	bl	10f24 <close@plt>
   13e88:	ldrh	r0, [r5, #56]	; 0x38
   13e8c:	cmp	r0, #2
   13e90:	beq	13eb8 <__assert_fail@plt+0x2f64>
   13e94:	ldr	r0, [r5, #32]
   13e98:	mov	r1, #7
   13e9c:	cmp	r0, #0
   13ea0:	movweq	r1, #6
   13ea4:	strh	r1, [r5, #56]	; 0x38
   13ea8:	bne	13eb8 <__assert_fail@plt+0x2f64>
   13eac:	mov	r0, r4
   13eb0:	mov	r1, r5
   13eb4:	bl	13ed0 <__assert_fail@plt+0x2f7c>
   13eb8:	ldrb	r0, [r4, #49]	; 0x31
   13ebc:	tst	r0, #32
   13ec0:	movne	r5, #0
   13ec4:	mov	r0, r5
   13ec8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ecc:	bl	10f18 <abort@plt>
   13ed0:	push	{r4, r5, r6, r7, fp, lr}
   13ed4:	add	fp, sp, #16
   13ed8:	sub	sp, sp, #24
   13edc:	ldrh	r2, [r0, #48]	; 0x30
   13ee0:	movw	r3, #258	; 0x102
   13ee4:	add	lr, r1, #64	; 0x40
   13ee8:	tst	r2, r3
   13eec:	beq	13f24 <__assert_fail@plt+0x2fd0>
   13ef0:	ldrd	r2, [lr]
   13ef4:	stm	sp, {r2, r3}
   13ef8:	ldrd	r2, [r1, #160]	; 0xa0
   13efc:	mov	r1, sp
   13f00:	str	r3, [sp, #12]
   13f04:	str	r2, [sp, #8]
   13f08:	ldr	r0, [r0, #56]	; 0x38
   13f0c:	bl	16b38 <__assert_fail@plt+0x5be4>
   13f10:	cmp	r0, #0
   13f14:	beq	13f98 <__assert_fail@plt+0x3044>
   13f18:	bl	12fdc <__assert_fail@plt+0x2088>
   13f1c:	sub	sp, fp, #16
   13f20:	pop	{r4, r5, r6, r7, fp, pc}
   13f24:	ldr	r2, [r1, #4]
   13f28:	cmp	r2, #0
   13f2c:	beq	13f1c <__assert_fail@plt+0x2fc8>
   13f30:	ldr	r3, [r2, #48]	; 0x30
   13f34:	cmp	r3, #0
   13f38:	blt	13f1c <__assert_fail@plt+0x2fc8>
   13f3c:	ldr	ip, [r0, #56]	; 0x38
   13f40:	ldrd	r4, [ip, #16]
   13f44:	orrs	r3, r4, r5
   13f48:	beq	13f98 <__assert_fail@plt+0x3044>
   13f4c:	ldrd	r4, [r1, #160]	; 0xa0
   13f50:	ldrd	r6, [ip]
   13f54:	eor	r1, r7, r5
   13f58:	eor	r3, r6, r4
   13f5c:	orrs	r1, r3, r1
   13f60:	bne	13f1c <__assert_fail@plt+0x2fc8>
   13f64:	ldr	r1, [ip, #8]!
   13f68:	ldrd	r4, [lr]
   13f6c:	ldr	r3, [ip, #4]
   13f70:	eor	r1, r1, r4
   13f74:	eor	r3, r3, r5
   13f78:	orrs	r1, r1, r3
   13f7c:	bne	13f1c <__assert_fail@plt+0x2fc8>
   13f80:	ldrd	r4, [r2, #64]	; 0x40
   13f84:	strd	r4, [ip]
   13f88:	ldr	r0, [r0, #56]	; 0x38
   13f8c:	ldrd	r2, [r2, #160]	; 0xa0
   13f90:	strd	r2, [r0]
   13f94:	b	13f1c <__assert_fail@plt+0x2fc8>
   13f98:	bl	10f18 <abort@plt>
   13f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fa0:	add	fp, sp, #28
   13fa4:	sub	sp, sp, #108	; 0x6c
   13fa8:	mov	r7, r3
   13fac:	mov	r4, r2
   13fb0:	mov	r8, r1
   13fb4:	mov	sl, r0
   13fb8:	cmp	r3, #0
   13fbc:	beq	13fe0 <__assert_fail@plt+0x308c>
   13fc0:	movw	r1, #30394	; 0x76ba
   13fc4:	mov	r0, r7
   13fc8:	movt	r1, #1
   13fcc:	bl	10cfc <strcmp@plt>
   13fd0:	mov	r6, r0
   13fd4:	cmp	r0, #0
   13fd8:	movwne	r6, #1
   13fdc:	b	13fe4 <__assert_fail@plt+0x3090>
   13fe0:	mov	r6, #1
   13fe4:	ldr	r0, [sl, #48]	; 0x30
   13fe8:	tst	r0, #4
   13fec:	bne	14044 <__assert_fail@plt+0x30f0>
   13ff0:	cmn	r4, #1
   13ff4:	mov	r1, #0
   13ff8:	mov	r9, #0
   13ffc:	movwgt	r1, #1
   14000:	orrs	r1, r1, r6
   14004:	bne	14064 <__assert_fail@plt+0x3110>
   14008:	ands	r0, r0, #512	; 0x200
   1400c:	beq	14064 <__assert_fail@plt+0x3110>
   14010:	add	r4, sl, #60	; 0x3c
   14014:	mov	r0, r4
   14018:	bl	16c7c <__assert_fail@plt+0x5d28>
   1401c:	cmp	r0, #0
   14020:	bne	1406c <__assert_fail@plt+0x3118>
   14024:	mov	r0, r4
   14028:	bl	16cd0 <__assert_fail@plt+0x5d7c>
   1402c:	cmn	r0, #1
   14030:	ble	1406c <__assert_fail@plt+0x3118>
   14034:	mov	r4, r0
   14038:	mov	r9, #0
   1403c:	mov	r7, #0
   14040:	b	14088 <__assert_fail@plt+0x3134>
   14044:	mov	r5, #0
   14048:	cmp	r4, #0
   1404c:	blt	14168 <__assert_fail@plt+0x3214>
   14050:	ands	r0, r0, #512	; 0x200
   14054:	beq	14168 <__assert_fail@plt+0x3214>
   14058:	mov	r0, r4
   1405c:	bl	10f24 <close@plt>
   14060:	b	14168 <__assert_fail@plt+0x3214>
   14064:	cmn	r4, #1
   14068:	bgt	14088 <__assert_fail@plt+0x3134>
   1406c:	mov	r0, sl
   14070:	mov	r1, r7
   14074:	bl	136cc <__assert_fail@plt+0x2778>
   14078:	cmp	r0, #0
   1407c:	blt	14118 <__assert_fail@plt+0x31c4>
   14080:	mov	r4, r0
   14084:	mov	r9, #1
   14088:	ldr	r5, [sl, #48]	; 0x30
   1408c:	tst	r5, #2
   14090:	bne	140b4 <__assert_fail@plt+0x3160>
   14094:	cmp	r7, #0
   14098:	beq	14100 <__assert_fail@plt+0x31ac>
   1409c:	movw	r1, #30394	; 0x76ba
   140a0:	mov	r0, r7
   140a4:	movt	r1, #1
   140a8:	bl	10cfc <strcmp@plt>
   140ac:	cmp	r0, #0
   140b0:	bne	14100 <__assert_fail@plt+0x31ac>
   140b4:	mov	r1, sp
   140b8:	mov	r0, r4
   140bc:	bl	1754c <__assert_fail@plt+0x65f8>
   140c0:	cmp	r0, #0
   140c4:	bne	14144 <__assert_fail@plt+0x31f0>
   140c8:	ldrd	r0, [r8, #64]	; 0x40
   140cc:	ldm	sp, {r2, r3}
   140d0:	eor	r1, r1, r3
   140d4:	eor	r0, r0, r2
   140d8:	orrs	r0, r0, r1
   140dc:	bne	14138 <__assert_fail@plt+0x31e4>
   140e0:	ldrd	r0, [r8, #160]	; 0xa0
   140e4:	ldr	r2, [sp, #96]	; 0x60
   140e8:	ldr	r3, [sp, #100]	; 0x64
   140ec:	eor	r1, r1, r3
   140f0:	eor	r0, r0, r2
   140f4:	orrs	r0, r0, r1
   140f8:	bne	14138 <__assert_fail@plt+0x31e4>
   140fc:	ldr	r5, [sl, #48]	; 0x30
   14100:	tst	r5, #512	; 0x200
   14104:	bne	14120 <__assert_fail@plt+0x31cc>
   14108:	mov	r0, r4
   1410c:	bl	10edc <fchdir@plt>
   14110:	mov	r5, r0
   14114:	b	14148 <__assert_fail@plt+0x31f4>
   14118:	mvn	r5, #0
   1411c:	b	14168 <__assert_fail@plt+0x3214>
   14120:	mov	r0, sl
   14124:	mov	r1, r4
   14128:	mov	r2, r6
   1412c:	bl	14c18 <__assert_fail@plt+0x3cc4>
   14130:	mov	r5, #0
   14134:	b	14168 <__assert_fail@plt+0x3214>
   14138:	bl	10e4c <__errno_location@plt>
   1413c:	mov	r1, #2
   14140:	str	r1, [r0]
   14144:	mvn	r5, #0
   14148:	cmp	r9, #0
   1414c:	beq	14168 <__assert_fail@plt+0x3214>
   14150:	bl	10e4c <__errno_location@plt>
   14154:	ldr	r7, [r0]
   14158:	mov	r6, r0
   1415c:	mov	r0, r4
   14160:	bl	10f24 <close@plt>
   14164:	str	r7, [r6]
   14168:	mov	r0, r5
   1416c:	sub	sp, fp, #28
   14170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14178:	add	fp, sp, #28
   1417c:	sub	sp, sp, #68	; 0x44
   14180:	ldr	r8, [r0]
   14184:	mov	r4, r1
   14188:	mov	r6, r0
   1418c:	str	r0, [fp, #-40]	; 0xffffffd8
   14190:	ldr	r5, [r8, #12]
   14194:	cmp	r5, #0
   14198:	beq	141dc <__assert_fail@plt+0x3288>
   1419c:	mov	r0, r5
   141a0:	bl	10eb8 <dirfd@plt>
   141a4:	cmn	r0, #1
   141a8:	str	r0, [fp, #-32]	; 0xffffffe0
   141ac:	ble	14218 <__assert_fail@plt+0x32c4>
   141b0:	ldr	r0, [r6, #44]!	; 0x2c
   141b4:	mvn	r2, #0
   141b8:	str	r5, [sp, #12]
   141bc:	cmp	r0, #0
   141c0:	str	r6, [sp, #44]	; 0x2c
   141c4:	add	r9, r6, #4
   141c8:	mov	r6, #0
   141cc:	movweq	r2, #34464	; 0x86a0
   141d0:	movteq	r2, #1
   141d4:	str	r2, [sp, #24]
   141d8:	b	1440c <__assert_fail@plt+0x34b8>
   141dc:	mov	r9, r6
   141e0:	mvn	r0, #99	; 0x63
   141e4:	mov	r2, #0
   141e8:	str	r5, [sp, #12]
   141ec:	ldr	r3, [r9, #48]!	; 0x30
   141f0:	and	r1, r3, #516	; 0x204
   141f4:	cmp	r1, #512	; 0x200
   141f8:	ldr	r1, [r8, #24]
   141fc:	ldreq	r0, [r6, #32]
   14200:	tst	r3, #16
   14204:	beq	14238 <__assert_fail@plt+0x32e4>
   14208:	tst	r3, #1
   1420c:	bne	1422c <__assert_fail@plt+0x32d8>
   14210:	mov	r2, #32768	; 0x8000
   14214:	b	14238 <__assert_fail@plt+0x32e4>
   14218:	ldr	r0, [r8, #12]
   1421c:	bl	10f3c <closedir@plt>
   14220:	mov	r5, #0
   14224:	str	r5, [r8, #12]
   14228:	b	14274 <__assert_fail@plt+0x3320>
   1422c:	ldr	r3, [r8, #48]	; 0x30
   14230:	cmp	r3, #0
   14234:	movne	r2, #32768	; 0x8000
   14238:	sub	r3, fp, #32
   1423c:	bl	16e04 <__assert_fail@plt+0x5eb0>
   14240:	cmp	r0, #0
   14244:	str	r0, [r8, #12]
   14248:	beq	14270 <__assert_fail@plt+0x331c>
   1424c:	ldrh	r0, [r8, #56]	; 0x38
   14250:	cmp	r0, #11
   14254:	bne	14294 <__assert_fail@plt+0x3340>
   14258:	mov	r0, r6
   1425c:	mov	r1, r8
   14260:	mov	r2, #0
   14264:	bl	13414 <__assert_fail@plt+0x24c0>
   14268:	strh	r0, [r8, #56]	; 0x38
   1426c:	b	142d4 <__assert_fail@plt+0x3380>
   14270:	mov	r5, #0
   14274:	cmp	r4, #3
   14278:	bne	14aa4 <__assert_fail@plt+0x3b50>
   1427c:	mov	r0, #4
   14280:	strh	r0, [r8, #56]	; 0x38
   14284:	bl	10e4c <__errno_location@plt>
   14288:	ldr	r0, [r0]
   1428c:	str	r0, [r8, #32]
   14290:	b	14aa4 <__assert_fail@plt+0x3b50>
   14294:	ldrb	r0, [r9, #1]
   14298:	tst	r0, #1
   1429c:	beq	142d4 <__assert_fail@plt+0x3380>
   142a0:	mov	r0, r6
   142a4:	mov	r1, r8
   142a8:	bl	13ed0 <__assert_fail@plt+0x2f7c>
   142ac:	mov	r0, r6
   142b0:	mov	r1, r8
   142b4:	mov	r2, #0
   142b8:	mov	r5, #0
   142bc:	bl	13414 <__assert_fail@plt+0x24c0>
   142c0:	mov	r0, r6
   142c4:	mov	r1, r8
   142c8:	bl	14b64 <__assert_fail@plt+0x3c10>
   142cc:	cmp	r0, #0
   142d0:	beq	148b8 <__assert_fail@plt+0x3964>
   142d4:	mov	r1, r6
   142d8:	mov	sl, r6
   142dc:	ldr	r0, [r1, #44]!	; 0x2c
   142e0:	str	r1, [sp, #44]	; 0x2c
   142e4:	mvn	r1, #0
   142e8:	cmp	r0, #0
   142ec:	movweq	r1, #34464	; 0x86a0
   142f0:	movteq	r1, #1
   142f4:	cmp	r4, #2
   142f8:	str	r1, [sp, #24]
   142fc:	bne	14320 <__assert_fail@plt+0x33cc>
   14300:	mov	r6, #1
   14304:	cmp	r4, #3
   14308:	bne	1440c <__assert_fail@plt+0x34b8>
   1430c:	sub	r0, r4, #3
   14310:	mov	r7, r8
   14314:	mov	r8, r4
   14318:	mov	r5, #0
   1431c:	b	14348 <__assert_fail@plt+0x33f4>
   14320:	ldr	r0, [r9]
   14324:	and	r0, r0, #56	; 0x38
   14328:	cmp	r0, #24
   1432c:	ldreq	r0, [r8, #84]	; 0x54
   14330:	cmpeq	r0, #2
   14334:	beq	14ab0 <__assert_fail@plt+0x3b5c>
   14338:	sub	r0, r4, #3
   1433c:	mov	r7, r8
   14340:	mov	r8, r4
   14344:	mov	r5, #1
   14348:	clz	r0, r0
   1434c:	lsr	r4, r0, #5
   14350:	ldrb	r0, [r9, #1]
   14354:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14358:	tst	r0, #2
   1435c:	beq	14378 <__assert_fail@plt+0x3424>
   14360:	mov	r0, r2
   14364:	movw	r1, #1030	; 0x406
   14368:	mov	r2, #3
   1436c:	bl	17064 <__assert_fail@plt+0x6110>
   14370:	mov	r2, r0
   14374:	str	r0, [fp, #-32]	; 0xffffffe0
   14378:	cmp	r2, #0
   1437c:	blt	14398 <__assert_fail@plt+0x3444>
   14380:	mov	r0, sl
   14384:	mov	r1, r7
   14388:	mov	r3, #0
   1438c:	bl	13f9c <__assert_fail@plt+0x3048>
   14390:	cmp	r0, #0
   14394:	beq	14400 <__assert_fail@plt+0x34ac>
   14398:	and	r0, r4, r5
   1439c:	cmp	r0, #1
   143a0:	bne	143b0 <__assert_fail@plt+0x345c>
   143a4:	bl	10e4c <__errno_location@plt>
   143a8:	ldr	r0, [r0]
   143ac:	str	r0, [r7, #32]
   143b0:	ldrh	r0, [r7, #58]	; 0x3a
   143b4:	orr	r0, r0, #1
   143b8:	strh	r0, [r7, #58]	; 0x3a
   143bc:	ldr	r0, [r7, #12]
   143c0:	bl	10f3c <closedir@plt>
   143c4:	mov	r4, #0
   143c8:	mov	r5, r7
   143cc:	str	r4, [r7, #12]
   143d0:	ldr	r0, [r9]
   143d4:	tst	r0, #512	; 0x200
   143d8:	beq	143ec <__assert_fail@plt+0x3498>
   143dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   143e0:	cmp	r0, #0
   143e4:	blt	143ec <__assert_fail@plt+0x3498>
   143e8:	bl	10f24 <close@plt>
   143ec:	str	r4, [r5, #12]
   143f0:	mov	r4, r8
   143f4:	mov	r6, #1
   143f8:	mov	r8, r5
   143fc:	b	1440c <__assert_fail@plt+0x34b8>
   14400:	mov	r4, r8
   14404:	mov	r6, #0
   14408:	mov	r8, r7
   1440c:	ldr	r0, [r8, #40]	; 0x28
   14410:	ldr	r1, [r8, #28]
   14414:	mov	r5, #0
   14418:	str	r4, [sp, #4]
   1441c:	sub	r2, r0, #1
   14420:	ldrb	r1, [r1, r2]
   14424:	cmp	r1, #47	; 0x2f
   14428:	ldrb	r1, [r9]
   1442c:	moveq	r0, r2
   14430:	tst	r1, #4
   14434:	mov	r1, #0
   14438:	str	r1, [sp, #36]	; 0x24
   1443c:	beq	14458 <__assert_fail@plt+0x3504>
   14440:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14444:	mov	r2, #47	; 0x2f
   14448:	ldr	r1, [r1, #24]
   1444c:	strb	r2, [r1, r0]!
   14450:	add	r1, r1, #1
   14454:	str	r1, [sp, #36]	; 0x24
   14458:	ldr	r4, [r8, #12]
   1445c:	add	r0, r0, #1
   14460:	str	r0, [sp, #48]	; 0x30
   14464:	cmp	r4, #0
   14468:	beq	14790 <__assert_fail@plt+0x383c>
   1446c:	mov	r1, r0
   14470:	ldr	r0, [r8, #48]	; 0x30
   14474:	str	r6, [sp]
   14478:	mov	r6, #0
   1447c:	add	r0, r0, #1
   14480:	str	r0, [sp, #20]
   14484:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14488:	ldr	r0, [r0, #36]	; 0x24
   1448c:	sub	r0, r0, r1
   14490:	str	r0, [fp, #-44]	; 0xffffffd4
   14494:	bl	10e4c <__errno_location@plt>
   14498:	str	r0, [sp, #28]
   1449c:	mov	r0, #0
   144a0:	mov	r5, #0
   144a4:	mov	r7, #0
   144a8:	str	r8, [sp, #32]
   144ac:	str	r9, [fp, #-36]	; 0xffffffdc
   144b0:	str	r0, [sp, #40]	; 0x28
   144b4:	mov	r0, #0
   144b8:	str	r0, [sp, #16]
   144bc:	mov	r0, #0
   144c0:	str	r0, [sp, #8]
   144c4:	ldr	r0, [sp, #28]
   144c8:	str	r6, [r0]
   144cc:	mov	r0, r4
   144d0:	bl	10ea0 <readdir64@plt>
   144d4:	cmp	r0, #0
   144d8:	beq	147f0 <__assert_fail@plt+0x389c>
   144dc:	mov	sl, r0
   144e0:	ldrb	r0, [r9]
   144e4:	ldr	r6, [fp, #-40]	; 0xffffffd8
   144e8:	add	r4, sl, #19
   144ec:	tst	r0, #32
   144f0:	ldrbeq	r0, [r4]
   144f4:	cmpeq	r0, #46	; 0x2e
   144f8:	beq	14598 <__assert_fail@plt+0x3644>
   144fc:	mov	r0, r4
   14500:	bl	10e1c <strlen@plt>
   14504:	mov	r8, r0
   14508:	mov	r0, r6
   1450c:	mov	r1, r4
   14510:	mov	r2, r8
   14514:	bl	13394 <__assert_fail@plt+0x2440>
   14518:	mov	r9, r0
   1451c:	cmp	r0, #0
   14520:	beq	147a4 <__assert_fail@plt+0x3850>
   14524:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14528:	cmp	r8, r1
   1452c:	bcs	14540 <__assert_fail@plt+0x35ec>
   14530:	ldr	r2, [sp, #48]	; 0x30
   14534:	add	r4, r8, r2
   14538:	mov	r8, r6
   1453c:	b	145cc <__assert_fail@plt+0x3678>
   14540:	ldr	r1, [sp, #48]	; 0x30
   14544:	add	r4, r8, r1
   14548:	mov	r8, r6
   1454c:	ldr	r6, [r6, #24]
   14550:	add	r1, r4, #1
   14554:	mov	r0, r8
   14558:	bl	13320 <__assert_fail@plt+0x23cc>
   1455c:	cmp	r0, #0
   14560:	beq	147a4 <__assert_fail@plt+0x3850>
   14564:	ldr	r0, [r8, #24]
   14568:	cmp	r6, r0
   1456c:	beq	145c0 <__assert_fail@plt+0x366c>
   14570:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14574:	ldr	r2, [sp, #48]	; 0x30
   14578:	ldrb	r1, [r1]
   1457c:	tst	r1, #4
   14580:	ldr	r1, [sp, #36]	; 0x24
   14584:	addne	r1, r0, r2
   14588:	mov	r0, #1
   1458c:	str	r1, [sp, #36]	; 0x24
   14590:	str	r0, [sp, #8]
   14594:	b	145c4 <__assert_fail@plt+0x3670>
   14598:	ldrb	r0, [sl, #20]
   1459c:	cmp	r0, #0
   145a0:	beq	145b4 <__assert_fail@plt+0x3660>
   145a4:	cmp	r0, #46	; 0x2e
   145a8:	ldrbeq	r0, [sl, #21]
   145ac:	cmpeq	r0, #0
   145b0:	bne	144fc <__assert_fail@plt+0x35a8>
   145b4:	ldr	r8, [sp, #32]
   145b8:	mov	r6, #0
   145bc:	b	14778 <__assert_fail@plt+0x3824>
   145c0:	ldr	r2, [sp, #48]	; 0x30
   145c4:	ldr	r0, [r8, #36]	; 0x24
   145c8:	sub	r1, r0, r2
   145cc:	cmp	r4, r2
   145d0:	bcc	14848 <__assert_fail@plt+0x38f4>
   145d4:	ldr	r0, [sp, #20]
   145d8:	str	r1, [fp, #-44]	; 0xffffffd4
   145dc:	str	r0, [r9, #48]	; 0x30
   145e0:	ldr	r0, [r8]
   145e4:	str	r4, [r9, #40]	; 0x28
   145e8:	str	r0, [r9, #4]
   145ec:	ldrd	r0, [sl]
   145f0:	strd	r0, [r9, #160]	; 0xa0
   145f4:	ldrb	r0, [r8, #48]	; 0x30
   145f8:	tst	r0, #4
   145fc:	bne	1460c <__assert_fail@plt+0x36b8>
   14600:	add	r0, r9, #168	; 0xa8
   14604:	str	r0, [r9, #24]
   14608:	b	14628 <__assert_fail@plt+0x36d4>
   1460c:	ldr	r0, [r9, #28]
   14610:	ldr	r2, [r9, #52]	; 0x34
   14614:	add	r1, r9, #168	; 0xa8
   14618:	str	r0, [r9, #24]
   1461c:	ldr	r0, [sp, #36]	; 0x24
   14620:	add	r2, r2, #1
   14624:	bl	10d2c <memmove@plt>
   14628:	ldr	r0, [sp, #44]	; 0x2c
   1462c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14630:	ldr	r0, [r0]
   14634:	ldr	r2, [r1]
   14638:	cmp	r0, #0
   1463c:	beq	14664 <__assert_fail@plt+0x3710>
   14640:	ands	r0, r2, #1024	; 0x400
   14644:	bne	14664 <__assert_fail@plt+0x3710>
   14648:	mov	r0, r8
   1464c:	mov	r1, r9
   14650:	mov	r2, #0
   14654:	bl	13414 <__assert_fail@plt+0x24c0>
   14658:	mov	r6, #0
   1465c:	strh	r0, [r9, #56]	; 0x38
   14660:	b	146d8 <__assert_fail@plt+0x3784>
   14664:	ldrb	r3, [sl, #18]
   14668:	mov	r0, #0
   1466c:	tst	r2, #8
   14670:	mov	r1, #0
   14674:	beq	14698 <__assert_fail@plt+0x3744>
   14678:	orr	r1, r3, #4
   1467c:	cmp	r1, #4
   14680:	mov	r1, #0
   14684:	beq	14698 <__assert_fail@plt+0x3744>
   14688:	eor	r1, r3, #10
   1468c:	and	r2, r2, #16
   14690:	orrs	r1, r2, r1
   14694:	movwne	r1, #1
   14698:	mov	r2, #11
   1469c:	mov	r6, #0
   146a0:	strh	r2, [r9, #56]	; 0x38
   146a4:	sub	r2, r3, #1
   146a8:	uxtb	r3, r2
   146ac:	cmp	r3, #11
   146b0:	sxtbls	r0, r2
   146b4:	movwls	r2, #30400	; 0x76c0
   146b8:	movtls	r2, #1
   146bc:	ldrls	r0, [r2, r0, lsl #2]
   146c0:	cmp	r1, #0
   146c4:	str	r0, [r9, #80]	; 0x50
   146c8:	mov	r0, #2
   146cc:	movwne	r0, #1
   146d0:	str	r0, [r9, #112]	; 0x70
   146d4:	str	r6, [r9, #116]	; 0x74
   146d8:	cmp	r5, #0
   146dc:	mov	r4, r9
   146e0:	str	r6, [r9, #8]
   146e4:	ldrne	r0, [sp, #40]	; 0x28
   146e8:	movne	r4, r5
   146ec:	strne	r9, [r0, #8]
   146f0:	movw	r0, #10000	; 0x2710
   146f4:	cmp	r7, r0
   146f8:	bne	1474c <__assert_fail@plt+0x37f8>
   146fc:	ldr	r0, [sp, #44]	; 0x2c
   14700:	ldr	r0, [r0]
   14704:	cmp	r0, #0
   14708:	bne	1474c <__assert_fail@plt+0x37f8>
   1470c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14710:	ldr	r0, [sp, #32]
   14714:	bl	14eb0 <__assert_fail@plt+0x3f5c>
   14718:	mov	r1, #0
   1471c:	str	r1, [sp, #16]
   14720:	movw	r1, #19778	; 0x4d42
   14724:	movt	r1, #65363	; 0xff53
   14728:	cmp	r0, r1
   1472c:	movwne	r1, #26985	; 0x6969
   14730:	cmpne	r0, r1
   14734:	beq	1474c <__assert_fail@plt+0x37f8>
   14738:	movw	r1, #6548	; 0x1994
   1473c:	movt	r1, #258	; 0x102
   14740:	cmp	r0, r1
   14744:	movne	r0, #1
   14748:	strne	r0, [sp, #16]
   1474c:	ldr	r0, [sp, #24]
   14750:	add	r7, r7, #1
   14754:	cmp	r0, r7
   14758:	mov	r0, #0
   1475c:	movwls	r0, #15
   14760:	cmp	r0, #0
   14764:	bne	14894 <__assert_fail@plt+0x3940>
   14768:	str	r9, [sp, #40]	; 0x28
   1476c:	ldr	r9, [fp, #-36]	; 0xffffffdc
   14770:	ldr	r8, [sp, #32]
   14774:	mov	r5, r4
   14778:	ldr	r4, [r8, #12]
   1477c:	cmp	r4, #0
   14780:	bne	144c4 <__assert_fail@plt+0x3570>
   14784:	ldr	r0, [sp, #8]
   14788:	ldr	r4, [sp, #4]
   1478c:	b	14838 <__assert_fail@plt+0x38e4>
   14790:	ldr	r4, [sp, #4]
   14794:	mov	r7, #0
   14798:	mov	r0, #0
   1479c:	str	r0, [sp, #16]
   147a0:	b	14960 <__assert_fail@plt+0x3a0c>
   147a4:	ldr	r4, [sp, #28]
   147a8:	mov	r0, r9
   147ac:	ldr	r8, [r4]
   147b0:	bl	12fdc <__assert_fail@plt+0x2088>
   147b4:	mov	r0, r5
   147b8:	bl	136fc <__assert_fail@plt+0x27a8>
   147bc:	ldr	r6, [sp, #32]
   147c0:	ldr	r0, [r6, #12]
   147c4:	bl	10f3c <closedir@plt>
   147c8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   147cc:	mov	r5, #0
   147d0:	mov	r0, #7
   147d4:	str	r5, [r6, #12]
   147d8:	strh	r0, [r6, #56]	; 0x38
   147dc:	ldr	r0, [r7]
   147e0:	orr	r0, r0, #8192	; 0x2000
   147e4:	str	r0, [r7]
   147e8:	str	r8, [r4]
   147ec:	b	14aa4 <__assert_fail@plt+0x3b50>
   147f0:	ldr	r0, [sp, #28]
   147f4:	ldr	r0, [r0]
   147f8:	cmp	r0, #0
   147fc:	beq	14818 <__assert_fail@plt+0x38c4>
   14800:	str	r0, [r8, #32]
   14804:	ldr	r0, [sp, #12]
   14808:	orrs	r0, r0, r7
   1480c:	mov	r0, #4
   14810:	movwne	r0, #7
   14814:	strh	r0, [r8, #56]	; 0x38
   14818:	ldr	r0, [r8, #12]
   1481c:	ldr	r4, [sp, #4]
   14820:	cmp	r0, #0
   14824:	beq	148c8 <__assert_fail@plt+0x3974>
   14828:	bl	10f3c <closedir@plt>
   1482c:	mov	r0, #0
   14830:	str	r0, [r8, #12]
   14834:	ldr	r0, [sp, #8]
   14838:	tst	r0, #1
   1483c:	ldr	r6, [sp]
   14840:	bne	148d8 <__assert_fail@plt+0x3984>
   14844:	b	14960 <__assert_fail@plt+0x3a0c>
   14848:	mov	r0, r9
   1484c:	bl	12fdc <__assert_fail@plt+0x2088>
   14850:	mov	r0, r5
   14854:	bl	136fc <__assert_fail@plt+0x27a8>
   14858:	ldr	r4, [sp, #32]
   1485c:	ldr	r0, [r4, #12]
   14860:	bl	10f3c <closedir@plt>
   14864:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14868:	mov	r5, #0
   1486c:	mov	r0, #7
   14870:	ldr	r1, [sp, #28]
   14874:	str	r5, [r4, #12]
   14878:	strh	r0, [r4, #56]	; 0x38
   1487c:	ldr	r0, [r7]
   14880:	orr	r0, r0, #8192	; 0x2000
   14884:	str	r0, [r7]
   14888:	mov	r0, #36	; 0x24
   1488c:	str	r0, [r1]
   14890:	b	14aa4 <__assert_fail@plt+0x3b50>
   14894:	ldr	r6, [sp]
   14898:	cmp	r0, #15
   1489c:	bne	14aa0 <__assert_fail@plt+0x3b4c>
   148a0:	mov	r5, r4
   148a4:	ldr	r9, [fp, #-36]	; 0xffffffdc
   148a8:	ldr	r4, [sp, #4]
   148ac:	ldr	r0, [sp, #8]
   148b0:	ldr	r8, [sp, #32]
   148b4:	b	148d0 <__assert_fail@plt+0x397c>
   148b8:	bl	10e4c <__errno_location@plt>
   148bc:	mov	r1, #12
   148c0:	str	r1, [r0]
   148c4:	b	14aa4 <__assert_fail@plt+0x3b50>
   148c8:	ldr	r6, [sp]
   148cc:	ldr	r0, [sp, #8]
   148d0:	tst	r0, #1
   148d4:	beq	14960 <__assert_fail@plt+0x3a0c>
   148d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   148dc:	ldr	r1, [r0, #4]
   148e0:	ldr	r0, [r0, #24]
   148e4:	b	1490c <__assert_fail@plt+0x39b8>
   148e8:	ldr	r2, [r1, #24]
   148ec:	add	r3, r1, #168	; 0xa8
   148f0:	cmp	r2, r3
   148f4:	ldrne	r3, [r1, #28]
   148f8:	subne	r2, r2, r3
   148fc:	addne	r2, r0, r2
   14900:	strne	r2, [r1, #24]
   14904:	str	r0, [r1, #28]
   14908:	ldr	r1, [r1, #8]
   1490c:	cmp	r1, #0
   14910:	bne	148e8 <__assert_fail@plt+0x3994>
   14914:	ldr	r1, [r5, #48]	; 0x30
   14918:	cmp	r1, #0
   1491c:	blt	14960 <__assert_fail@plt+0x3a0c>
   14920:	mov	r1, r5
   14924:	ldr	r2, [r1, #24]
   14928:	add	r3, r1, #168	; 0xa8
   1492c:	cmp	r2, r3
   14930:	ldrne	r3, [r1, #28]
   14934:	subne	r2, r2, r3
   14938:	addne	r2, r0, r2
   1493c:	strne	r2, [r1, #24]
   14940:	str	r0, [r1, #28]
   14944:	ldr	r2, [r1, #8]
   14948:	cmp	r2, #0
   1494c:	ldreq	r2, [r1, #4]
   14950:	ldr	r1, [r2, #48]	; 0x30
   14954:	cmn	r1, #1
   14958:	mov	r1, r2
   1495c:	bgt	14924 <__assert_fail@plt+0x39d0>
   14960:	ldrb	r0, [r9]
   14964:	tst	r0, #4
   14968:	beq	14998 <__assert_fail@plt+0x3a44>
   1496c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14970:	ldr	r2, [sp, #36]	; 0x24
   14974:	ldr	r3, [sp, #48]	; 0x30
   14978:	ldr	r0, [r0, #36]	; 0x24
   1497c:	sub	r1, r2, #1
   14980:	cmp	r3, r0
   14984:	mov	r0, #0
   14988:	moveq	r2, r1
   1498c:	cmp	r7, #0
   14990:	moveq	r2, r1
   14994:	strb	r0, [r2]
   14998:	ldr	r0, [sp, #12]
   1499c:	cmp	r0, #0
   149a0:	movwne	r0, #1
   149a4:	orrs	r0, r0, r6
   149a8:	beq	149d4 <__assert_fail@plt+0x3a80>
   149ac:	cmp	r7, #0
   149b0:	bne	14a08 <__assert_fail@plt+0x3ab4>
   149b4:	cmp	r4, #3
   149b8:	bne	14a98 <__assert_fail@plt+0x3b44>
   149bc:	ldrh	r0, [r8, #56]	; 0x38
   149c0:	cmp	r0, #4
   149c4:	cmpne	r0, #7
   149c8:	movne	r0, #6
   149cc:	strhne	r0, [r8, #56]	; 0x38
   149d0:	b	14a98 <__assert_fail@plt+0x3b44>
   149d4:	cmp	r4, #1
   149d8:	cmpne	r7, #0
   149dc:	bne	14a08 <__assert_fail@plt+0x3ab4>
   149e0:	ldr	r0, [r8, #48]	; 0x30
   149e4:	cmp	r0, #0
   149e8:	beq	14a74 <__assert_fail@plt+0x3b20>
   149ec:	ldr	r1, [r8, #4]
   149f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   149f4:	movw	r3, #30394	; 0x76ba
   149f8:	mvn	r2, #0
   149fc:	movt	r3, #1
   14a00:	bl	13f9c <__assert_fail@plt+0x3048>
   14a04:	b	14a7c <__assert_fail@plt+0x3b28>
   14a08:	ldr	r0, [sp, #16]
   14a0c:	tst	r0, #1
   14a10:	beq	14a44 <__assert_fail@plt+0x3af0>
   14a14:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14a18:	movw	r0, #20088	; 0x4e78
   14a1c:	mov	r1, r5
   14a20:	mov	r2, r7
   14a24:	movt	r0, #1
   14a28:	str	r0, [r4, #44]	; 0x2c
   14a2c:	mov	r0, r4
   14a30:	bl	13548 <__assert_fail@plt+0x25f4>
   14a34:	mov	r5, r0
   14a38:	mov	r0, #0
   14a3c:	str	r0, [r4, #44]	; 0x2c
   14a40:	b	14aa4 <__assert_fail@plt+0x3b50>
   14a44:	cmp	r7, #2
   14a48:	bcc	14aa4 <__assert_fail@plt+0x3b50>
   14a4c:	ldr	r0, [sp, #44]	; 0x2c
   14a50:	ldr	r0, [r0]
   14a54:	cmp	r0, #0
   14a58:	beq	14aa4 <__assert_fail@plt+0x3b50>
   14a5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14a60:	mov	r1, r5
   14a64:	mov	r2, r7
   14a68:	bl	13548 <__assert_fail@plt+0x25f4>
   14a6c:	mov	r5, r0
   14a70:	b	14aa4 <__assert_fail@plt+0x3b50>
   14a74:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14a78:	bl	14b08 <__assert_fail@plt+0x3bb4>
   14a7c:	cmp	r0, #0
   14a80:	beq	149ac <__assert_fail@plt+0x3a58>
   14a84:	mov	r0, #7
   14a88:	strh	r0, [r8, #56]	; 0x38
   14a8c:	ldr	r0, [r9]
   14a90:	orr	r0, r0, #8192	; 0x2000
   14a94:	str	r0, [r9]
   14a98:	mov	r0, r5
   14a9c:	bl	136fc <__assert_fail@plt+0x27a8>
   14aa0:	mov	r5, #0
   14aa4:	mov	r0, r5
   14aa8:	sub	sp, fp, #28
   14aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ab0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14ab4:	mov	r0, r8
   14ab8:	bl	14eb0 <__assert_fail@plt+0x3f5c>
   14abc:	movw	r1, #26984	; 0x6968
   14ac0:	cmp	r0, r1
   14ac4:	ble	14af0 <__assert_fail@plt+0x3b9c>
   14ac8:	movw	r1, #26985	; 0x6969
   14acc:	cmp	r0, r1
   14ad0:	movwne	r1, #16719	; 0x414f
   14ad4:	movtne	r1, #21318	; 0x5346
   14ad8:	cmpne	r0, r1
   14adc:	beq	14338 <__assert_fail@plt+0x33e4>
   14ae0:	movw	r1, #40864	; 0x9fa0
   14ae4:	cmp	r0, r1
   14ae8:	beq	14338 <__assert_fail@plt+0x33e4>
   14aec:	b	14300 <__assert_fail@plt+0x33ac>
   14af0:	movw	r1, #19778	; 0x4d42
   14af4:	movt	r1, #65363	; 0xff53
   14af8:	cmp	r0, r1
   14afc:	cmpne	r0, #0
   14b00:	beq	14338 <__assert_fail@plt+0x33e4>
   14b04:	b	14300 <__assert_fail@plt+0x33ac>
   14b08:	push	{r4, r5, fp, lr}
   14b0c:	add	fp, sp, #8
   14b10:	mov	r4, r0
   14b14:	ldr	r0, [r0, #48]	; 0x30
   14b18:	mov	r5, #0
   14b1c:	tst	r0, #4
   14b20:	bne	14b54 <__assert_fail@plt+0x3c00>
   14b24:	tst	r0, #512	; 0x200
   14b28:	bne	14b44 <__assert_fail@plt+0x3bf0>
   14b2c:	ldr	r0, [r4, #28]
   14b30:	bl	10edc <fchdir@plt>
   14b34:	mov	r5, r0
   14b38:	cmp	r0, #0
   14b3c:	movwne	r5, #1
   14b40:	b	14b54 <__assert_fail@plt+0x3c00>
   14b44:	mov	r0, r4
   14b48:	mvn	r1, #99	; 0x63
   14b4c:	mov	r2, #1
   14b50:	bl	14c18 <__assert_fail@plt+0x3cc4>
   14b54:	add	r0, r4, #60	; 0x3c
   14b58:	bl	13860 <__assert_fail@plt+0x290c>
   14b5c:	mov	r0, r5
   14b60:	pop	{r4, r5, fp, pc}
   14b64:	push	{r4, r5, r6, r7, fp, lr}
   14b68:	add	fp, sp, #16
   14b6c:	mov	r6, r0
   14b70:	ldrh	r0, [r0, #48]	; 0x30
   14b74:	mov	r4, r1
   14b78:	movw	r1, #258	; 0x102
   14b7c:	tst	r0, r1
   14b80:	beq	14bf0 <__assert_fail@plt+0x3c9c>
   14b84:	mov	r0, #24
   14b88:	bl	16ef8 <__assert_fail@plt+0x5fa4>
   14b8c:	mov	r5, #0
   14b90:	cmp	r0, #0
   14b94:	beq	14c10 <__assert_fail@plt+0x3cbc>
   14b98:	mov	r7, r0
   14b9c:	ldrd	r0, [r4, #64]	; 0x40
   14ba0:	add	r2, r7, #8
   14ba4:	stm	r7, {r0, r1}
   14ba8:	ldrd	r0, [r4, #160]	; 0xa0
   14bac:	stm	r2, {r0, r1, r4}
   14bb0:	mov	r1, r7
   14bb4:	ldr	r0, [r6, #56]	; 0x38
   14bb8:	bl	16af8 <__assert_fail@plt+0x5ba4>
   14bbc:	cmp	r0, r7
   14bc0:	beq	14be8 <__assert_fail@plt+0x3c94>
   14bc4:	mov	r6, r0
   14bc8:	mov	r0, r7
   14bcc:	bl	12fdc <__assert_fail@plt+0x2088>
   14bd0:	cmp	r6, #0
   14bd4:	beq	14c10 <__assert_fail@plt+0x3cbc>
   14bd8:	ldr	r0, [r6, #16]
   14bdc:	mov	r1, #2
   14be0:	strh	r1, [r4, #56]	; 0x38
   14be4:	str	r0, [r4]
   14be8:	mov	r5, #1
   14bec:	b	14c10 <__assert_fail@plt+0x3cbc>
   14bf0:	ldr	r0, [r6, #56]	; 0x38
   14bf4:	add	r1, r4, #64	; 0x40
   14bf8:	bl	16f94 <__assert_fail@plt+0x6040>
   14bfc:	cmp	r0, #0
   14c00:	mov	r5, #1
   14c04:	movne	r0, #2
   14c08:	strhne	r0, [r4, #56]	; 0x38
   14c0c:	strne	r4, [r4]
   14c10:	mov	r0, r5
   14c14:	pop	{r4, r5, r6, r7, fp, pc}
   14c18:	push	{r4, r5, fp, lr}
   14c1c:	add	fp, sp, #8
   14c20:	mov	r4, r1
   14c24:	ldr	r1, [r0, #32]
   14c28:	mov	r5, r0
   14c2c:	cmp	r1, r4
   14c30:	bne	14c3c <__assert_fail@plt+0x3ce8>
   14c34:	cmn	r1, #100	; 0x64
   14c38:	bne	14c7c <__assert_fail@plt+0x3d28>
   14c3c:	cmp	r2, #0
   14c40:	beq	14c58 <__assert_fail@plt+0x3d04>
   14c44:	add	r0, r5, #60	; 0x3c
   14c48:	bl	16c84 <__assert_fail@plt+0x5d30>
   14c4c:	cmp	r0, #0
   14c50:	bge	14c70 <__assert_fail@plt+0x3d1c>
   14c54:	b	14c74 <__assert_fail@plt+0x3d20>
   14c58:	cmp	r1, #0
   14c5c:	blt	14c74 <__assert_fail@plt+0x3d20>
   14c60:	ldr	r0, [r5, #48]	; 0x30
   14c64:	ands	r0, r0, #4
   14c68:	bne	14c74 <__assert_fail@plt+0x3d20>
   14c6c:	mov	r0, r1
   14c70:	bl	10f24 <close@plt>
   14c74:	str	r4, [r5, #32]
   14c78:	pop	{r4, r5, fp, pc}
   14c7c:	bl	10f18 <abort@plt>
   14c80:	cmp	r2, #5
   14c84:	movcc	r0, #0
   14c88:	strhcc	r2, [r1, #60]	; 0x3c
   14c8c:	bxcc	lr
   14c90:	push	{fp, lr}
   14c94:	mov	fp, sp
   14c98:	bl	10e4c <__errno_location@plt>
   14c9c:	mov	r1, #22
   14ca0:	str	r1, [r0]
   14ca4:	mov	r0, #1
   14ca8:	pop	{fp, pc}
   14cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cb0:	add	fp, sp, #28
   14cb4:	sub	sp, sp, #4
   14cb8:	mov	r5, r0
   14cbc:	orr	r0, r1, #4096	; 0x1000
   14cc0:	cmp	r0, #4096	; 0x1000
   14cc4:	bne	14d04 <__assert_fail@plt+0x3db0>
   14cc8:	ldr	r6, [r5]
   14ccc:	mov	r7, r1
   14cd0:	bl	10e4c <__errno_location@plt>
   14cd4:	mov	r4, #0
   14cd8:	mov	sl, r0
   14cdc:	str	r4, [r0]
   14ce0:	ldrb	r0, [r5, #49]	; 0x31
   14ce4:	tst	r0, #32
   14ce8:	bne	14d14 <__assert_fail@plt+0x3dc0>
   14cec:	ldrh	r0, [r6, #56]	; 0x38
   14cf0:	cmp	r0, #1
   14cf4:	beq	14d20 <__assert_fail@plt+0x3dcc>
   14cf8:	cmp	r0, #9
   14cfc:	ldreq	r4, [r6, #8]
   14d00:	b	14d14 <__assert_fail@plt+0x3dc0>
   14d04:	bl	10e4c <__errno_location@plt>
   14d08:	mov	r1, #22
   14d0c:	mov	r4, #0
   14d10:	str	r1, [r0]
   14d14:	mov	r0, r4
   14d18:	sub	sp, fp, #28
   14d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d20:	ldr	r0, [r5, #4]
   14d24:	cmp	r0, #0
   14d28:	blne	136fc <__assert_fail@plt+0x27a8>
   14d2c:	cmp	r7, #4096	; 0x1000
   14d30:	mov	r9, #1
   14d34:	ldreq	r0, [r5, #48]	; 0x30
   14d38:	moveq	r9, #2
   14d3c:	orreq	r0, r0, #4096	; 0x1000
   14d40:	streq	r0, [r5, #48]	; 0x30
   14d44:	ldr	r0, [r6, #48]	; 0x30
   14d48:	cmp	r0, #0
   14d4c:	bne	14dc8 <__assert_fail@plt+0x3e74>
   14d50:	ldr	r0, [r6, #24]
   14d54:	ldrb	r0, [r0]
   14d58:	cmp	r0, #47	; 0x2f
   14d5c:	beq	14dc8 <__assert_fail@plt+0x3e74>
   14d60:	ldrb	r0, [r5, #48]	; 0x30
   14d64:	tst	r0, #4
   14d68:	bne	14dc8 <__assert_fail@plt+0x3e74>
   14d6c:	movw	r1, #30395	; 0x76bb
   14d70:	mov	r0, r5
   14d74:	movt	r1, #1
   14d78:	bl	136cc <__assert_fail@plt+0x2778>
   14d7c:	cmn	r0, #1
   14d80:	ble	14de0 <__assert_fail@plt+0x3e8c>
   14d84:	mov	r8, r0
   14d88:	mov	r0, r5
   14d8c:	mov	r1, r9
   14d90:	bl	14174 <__assert_fail@plt+0x3220>
   14d94:	str	r0, [r5, #4]
   14d98:	ldrb	r0, [r5, #49]	; 0x31
   14d9c:	tst	r0, #2
   14da0:	bne	14dec <__assert_fail@plt+0x3e98>
   14da4:	mov	r0, r8
   14da8:	bl	10edc <fchdir@plt>
   14dac:	cmp	r0, #0
   14db0:	beq	14e00 <__assert_fail@plt+0x3eac>
   14db4:	ldr	r5, [sl]
   14db8:	mov	r0, r8
   14dbc:	bl	10f24 <close@plt>
   14dc0:	str	r5, [sl]
   14dc4:	b	14d14 <__assert_fail@plt+0x3dc0>
   14dc8:	mov	r0, r5
   14dcc:	mov	r1, r9
   14dd0:	bl	14174 <__assert_fail@plt+0x3220>
   14dd4:	mov	r4, r0
   14dd8:	str	r0, [r5, #4]
   14ddc:	b	14d14 <__assert_fail@plt+0x3dc0>
   14de0:	mov	r4, #0
   14de4:	str	r4, [r5, #4]
   14de8:	b	14d14 <__assert_fail@plt+0x3dc0>
   14dec:	mov	r0, r5
   14df0:	mov	r1, r8
   14df4:	mov	r2, #1
   14df8:	bl	14c18 <__assert_fail@plt+0x3cc4>
   14dfc:	b	14e08 <__assert_fail@plt+0x3eb4>
   14e00:	mov	r0, r8
   14e04:	bl	10f24 <close@plt>
   14e08:	ldr	r4, [r5, #4]
   14e0c:	b	14d14 <__assert_fail@plt+0x3dc0>
   14e10:	push	{fp, lr}
   14e14:	mov	fp, sp
   14e18:	mov	r2, r1
   14e1c:	ldrd	r0, [r0, #8]
   14e20:	mov	r3, #0
   14e24:	bl	17364 <__assert_fail@plt+0x6410>
   14e28:	mov	r0, r2
   14e2c:	pop	{fp, pc}
   14e30:	push	{r4, r5, fp, lr}
   14e34:	add	fp, sp, #8
   14e38:	ldrd	r2, [r1, #8]
   14e3c:	ldrd	r4, [r0, #8]
   14e40:	eor	r3, r5, r3
   14e44:	eor	r2, r4, r2
   14e48:	orrs	r2, r2, r3
   14e4c:	mov	r2, #0
   14e50:	bne	14e70 <__assert_fail@plt+0x3f1c>
   14e54:	ldrd	r2, [r1]
   14e58:	ldrd	r0, [r0]
   14e5c:	eor	r1, r1, r3
   14e60:	eor	r0, r0, r2
   14e64:	orr	r0, r0, r1
   14e68:	clz	r0, r0
   14e6c:	lsr	r2, r0, #5
   14e70:	mov	r0, r2
   14e74:	pop	{r4, r5, fp, pc}
   14e78:	push	{r4, r5, fp, lr}
   14e7c:	add	fp, sp, #8
   14e80:	ldr	r0, [r0]
   14e84:	ldrd	r2, [r0, #160]	; 0xa0
   14e88:	ldr	r0, [r1]
   14e8c:	ldrd	r4, [r0, #160]	; 0xa0
   14e90:	mov	r0, #0
   14e94:	subs	r1, r4, r2
   14e98:	sbcs	r1, r5, r3
   14e9c:	movwcc	r0, #1
   14ea0:	subs	r1, r2, r4
   14ea4:	sbcs	r1, r3, r5
   14ea8:	subcc	r0, r0, #1
   14eac:	pop	{r4, r5, fp, pc}
   14eb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14eb4:	add	fp, sp, #24
   14eb8:	sub	sp, sp, #96	; 0x60
   14ebc:	ldr	r7, [r0, #44]	; 0x2c
   14ec0:	mov	r4, r0
   14ec4:	mov	r5, #0
   14ec8:	ldrb	r0, [r7, #49]	; 0x31
   14ecc:	tst	r0, #2
   14ed0:	beq	14fc4 <__assert_fail@plt+0x4070>
   14ed4:	ldr	r6, [r7, #52]	; 0x34
   14ed8:	mov	r9, r1
   14edc:	cmp	r6, #0
   14ee0:	bne	14f20 <__assert_fail@plt+0x3fcc>
   14ee4:	movw	r0, #12252	; 0x2fdc
   14ee8:	movw	r2, #20432	; 0x4fd0
   14eec:	movw	r3, #20464	; 0x4ff0
   14ef0:	mov	r1, #0
   14ef4:	mov	r8, #0
   14ef8:	movt	r0, #1
   14efc:	movt	r2, #1
   14f00:	movt	r3, #1
   14f04:	str	r0, [sp]
   14f08:	mov	r0, #13
   14f0c:	bl	16170 <__assert_fail@plt+0x521c>
   14f10:	mov	r6, r0
   14f14:	cmp	r0, #0
   14f18:	str	r0, [r7, #52]	; 0x34
   14f1c:	beq	14f50 <__assert_fail@plt+0x3ffc>
   14f20:	ldrd	r0, [r4, #64]	; 0x40
   14f24:	str	r1, [sp, #12]
   14f28:	str	r0, [sp, #8]
   14f2c:	add	r1, sp, #8
   14f30:	mov	r0, r6
   14f34:	bl	15ed0 <__assert_fail@plt+0x4f7c>
   14f38:	cmp	r0, #0
   14f3c:	beq	14f48 <__assert_fail@plt+0x3ff4>
   14f40:	ldr	r5, [r0, #8]
   14f44:	b	14fc4 <__assert_fail@plt+0x4070>
   14f48:	mov	r8, #1
   14f4c:	b	14f54 <__assert_fail@plt+0x4000>
   14f50:	mov	r6, #0
   14f54:	cmp	r9, #0
   14f58:	blt	14fc4 <__assert_fail@plt+0x4070>
   14f5c:	add	r1, sp, #8
   14f60:	mov	r0, r9
   14f64:	bl	10cd8 <fstatfs64@plt>
   14f68:	cmp	r0, #0
   14f6c:	bne	14fc4 <__assert_fail@plt+0x4070>
   14f70:	cmp	r8, #0
   14f74:	beq	14fc0 <__assert_fail@plt+0x406c>
   14f78:	mov	r0, #16
   14f7c:	bl	16ef8 <__assert_fail@plt+0x5fa4>
   14f80:	cmp	r0, #0
   14f84:	beq	14fc0 <__assert_fail@plt+0x406c>
   14f88:	mov	r5, r0
   14f8c:	ldrd	r0, [r4, #64]	; 0x40
   14f90:	ldr	r2, [sp, #8]
   14f94:	stm	r5, {r0, r1, r2}
   14f98:	mov	r0, r6
   14f9c:	mov	r1, r5
   14fa0:	bl	16af8 <__assert_fail@plt+0x5ba4>
   14fa4:	cmp	r0, #0
   14fa8:	beq	14fb8 <__assert_fail@plt+0x4064>
   14fac:	cmp	r0, r5
   14fb0:	beq	14fc0 <__assert_fail@plt+0x406c>
   14fb4:	bl	10f18 <abort@plt>
   14fb8:	mov	r0, r5
   14fbc:	bl	12fdc <__assert_fail@plt+0x2088>
   14fc0:	ldr	r5, [sp, #8]
   14fc4:	mov	r0, r5
   14fc8:	sub	sp, fp, #24
   14fcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14fd0:	push	{fp, lr}
   14fd4:	mov	fp, sp
   14fd8:	mov	r2, r1
   14fdc:	ldrd	r0, [r0]
   14fe0:	mov	r3, #0
   14fe4:	bl	17364 <__assert_fail@plt+0x6410>
   14fe8:	mov	r0, r2
   14fec:	pop	{fp, pc}
   14ff0:	ldrd	r2, [r1]
   14ff4:	ldrd	r0, [r0]
   14ff8:	eor	r1, r1, r3
   14ffc:	eor	r0, r0, r2
   15000:	orr	r0, r0, r1
   15004:	clz	r0, r0
   15008:	lsr	r0, r0, #5
   1500c:	bx	lr
   15010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15014:	add	fp, sp, #28
   15018:	sub	sp, sp, #36	; 0x24
   1501c:	mvn	r7, #0
   15020:	cmp	r0, #1
   15024:	blt	154f0 <__assert_fail@plt+0x459c>
   15028:	ldr	r4, [fp, #16]
   1502c:	mov	r5, r0
   15030:	mov	r8, r1
   15034:	mov	r0, #0
   15038:	str	r3, [sp, #28]
   1503c:	ldr	sl, [r4]
   15040:	ldr	r6, [r4, #4]
   15044:	str	r0, [r4, #12]
   15048:	cmp	sl, #0
   1504c:	beq	15070 <__assert_fail@plt+0x411c>
   15050:	ldr	r0, [r4, #16]
   15054:	cmp	r0, #0
   15058:	beq	15078 <__assert_fail@plt+0x4124>
   1505c:	ldrb	r0, [r2]
   15060:	cmp	r0, #45	; 0x2d
   15064:	cmpne	r0, #43	; 0x2b
   15068:	addeq	r2, r2, #1
   1506c:	b	150e8 <__assert_fail@plt+0x4194>
   15070:	mov	sl, #1
   15074:	str	sl, [r4]
   15078:	mov	r0, #0
   1507c:	str	sl, [r4, #28]
   15080:	str	sl, [r4, #32]
   15084:	str	r0, [r4, #20]
   15088:	ldrb	r1, [r2]
   1508c:	cmp	r1, #43	; 0x2b
   15090:	beq	150a0 <__assert_fail@plt+0x414c>
   15094:	cmp	r1, #45	; 0x2d
   15098:	bne	150ac <__assert_fail@plt+0x4158>
   1509c:	mov	r0, #2
   150a0:	str	r0, [r4, #24]
   150a4:	add	r2, r2, #1
   150a8:	b	150e0 <__assert_fail@plt+0x418c>
   150ac:	ldr	r0, [fp, #20]
   150b0:	cmp	r0, #0
   150b4:	bne	150d8 <__assert_fail@plt+0x4184>
   150b8:	movw	r0, #30524	; 0x773c
   150bc:	mov	r7, r2
   150c0:	movt	r0, #1
   150c4:	bl	10dd4 <getenv@plt>
   150c8:	mov	r2, r7
   150cc:	mvn	r7, #0
   150d0:	cmp	r0, #0
   150d4:	beq	152a8 <__assert_fail@plt+0x4354>
   150d8:	mov	r0, #0
   150dc:	str	r0, [r4, #24]
   150e0:	mov	r0, #1
   150e4:	str	r0, [r4, #16]
   150e8:	ldrb	r0, [r2]
   150ec:	subs	r0, r0, #58	; 0x3a
   150f0:	movne	r0, r6
   150f4:	ldr	r6, [r4, #20]
   150f8:	str	r0, [sp, #32]
   150fc:	cmp	r6, #0
   15100:	ldrbne	r0, [r6]
   15104:	cmpne	r0, #0
   15108:	bne	1533c <__assert_fail@plt+0x43e8>
   1510c:	ldr	r9, [r4, #32]
   15110:	cmp	r9, sl
   15114:	strgt	sl, [r4, #32]
   15118:	movgt	r9, sl
   1511c:	ldr	r0, [r4, #28]
   15120:	cmp	r0, sl
   15124:	strgt	sl, [r4, #28]
   15128:	movgt	r0, sl
   1512c:	ldr	r1, [r4, #24]
   15130:	cmp	r1, #1
   15134:	bne	151ac <__assert_fail@plt+0x4258>
   15138:	cmp	r0, r9
   1513c:	cmpne	r9, sl
   15140:	bne	15150 <__assert_fail@plt+0x41fc>
   15144:	cmp	r9, sl
   15148:	strne	sl, [r4, #28]
   1514c:	b	1516c <__assert_fail@plt+0x4218>
   15150:	mov	r0, r8
   15154:	mov	r1, r4
   15158:	mov	r6, r2
   1515c:	bl	15550 <__assert_fail@plt+0x45fc>
   15160:	ldr	sl, [r4]
   15164:	mov	r2, r6
   15168:	mvn	r7, #0
   1516c:	mov	r9, sl
   15170:	cmp	sl, r5
   15174:	bge	151a4 <__assert_fail@plt+0x4250>
   15178:	ldr	r0, [r8, r9, lsl #2]
   1517c:	ldrb	r1, [r0]
   15180:	cmp	r1, #45	; 0x2d
   15184:	bne	15194 <__assert_fail@plt+0x4240>
   15188:	ldrb	r0, [r0, #1]
   1518c:	cmp	r0, #0
   15190:	bne	151a4 <__assert_fail@plt+0x4250>
   15194:	add	r9, r9, #1
   15198:	cmp	r9, r5
   1519c:	str	r9, [r4]
   151a0:	blt	15178 <__assert_fail@plt+0x4224>
   151a4:	mov	sl, r9
   151a8:	str	r9, [r4, #32]
   151ac:	cmp	sl, r5
   151b0:	beq	15298 <__assert_fail@plt+0x4344>
   151b4:	ldr	r0, [r8, sl, lsl #2]
   151b8:	movw	r6, #30448	; 0x76f0
   151bc:	str	r2, [sp, #20]
   151c0:	movt	r6, #1
   151c4:	mov	r1, r6
   151c8:	bl	10cfc <strcmp@plt>
   151cc:	cmp	r0, #0
   151d0:	beq	1523c <__assert_fail@plt+0x42e8>
   151d4:	cmp	sl, r5
   151d8:	mvn	r7, #0
   151dc:	beq	15298 <__assert_fail@plt+0x4344>
   151e0:	ldr	r0, [r8, sl, lsl #2]
   151e4:	ldrb	r1, [r0]
   151e8:	cmp	r1, #45	; 0x2d
   151ec:	bne	15264 <__assert_fail@plt+0x4310>
   151f0:	mov	r3, r6
   151f4:	mov	r6, r0
   151f8:	ldrb	r1, [r6, #1]!
   151fc:	cmp	r1, #0
   15200:	beq	15264 <__assert_fail@plt+0x4310>
   15204:	ldr	r2, [sp, #28]
   15208:	cmp	r2, #0
   1520c:	beq	152b0 <__assert_fail@plt+0x435c>
   15210:	ldr	r9, [fp, #12]
   15214:	ldr	r2, [sp, #20]
   15218:	cmp	r1, #45	; 0x2d
   1521c:	bne	152b8 <__assert_fail@plt+0x4364>
   15220:	add	r0, r0, #2
   15224:	str	r0, [r4, #20]
   15228:	ldr	r0, [fp, #8]
   1522c:	stm	sp, {r0, r9}
   15230:	str	r4, [sp, #8]
   15234:	str	r3, [sp, #16]
   15238:	b	154b8 <__assert_fail@plt+0x4564>
   1523c:	add	r0, sl, #1
   15240:	str	r0, [r4]
   15244:	ldr	r1, [r4, #28]
   15248:	cmp	r1, r9
   1524c:	cmpne	r9, r0
   15250:	bne	1527c <__assert_fail@plt+0x4328>
   15254:	cmp	r1, r9
   15258:	mvn	r7, #0
   1525c:	streq	r0, [r4, #28]
   15260:	b	1528c <__assert_fail@plt+0x4338>
   15264:	ldr	r1, [r4, #24]
   15268:	cmp	r1, #0
   1526c:	strne	r0, [r4, #12]
   15270:	addne	r0, sl, #1
   15274:	movne	r7, #1
   15278:	b	152a0 <__assert_fail@plt+0x434c>
   1527c:	mov	r0, r8
   15280:	mov	r1, r4
   15284:	bl	15550 <__assert_fail@plt+0x45fc>
   15288:	mvn	r7, #0
   1528c:	str	r5, [r4]
   15290:	str	r5, [r4, #32]
   15294:	mov	r9, r5
   15298:	ldr	r0, [r4, #28]
   1529c:	cmp	r0, r9
   152a0:	strne	r0, [r4]
   152a4:	b	154f0 <__assert_fail@plt+0x459c>
   152a8:	mov	r0, #1
   152ac:	b	150dc <__assert_fail@plt+0x4188>
   152b0:	ldr	r2, [sp, #20]
   152b4:	b	15338 <__assert_fail@plt+0x43e4>
   152b8:	cmp	r9, #0
   152bc:	beq	15338 <__assert_fail@plt+0x43e4>
   152c0:	ldrb	r0, [r0, #2]
   152c4:	cmp	r0, #0
   152c8:	beq	15324 <__assert_fail@plt+0x43d0>
   152cc:	ldr	r1, [fp, #8]
   152d0:	str	r6, [r4, #20]
   152d4:	movw	r0, #30449	; 0x76f1
   152d8:	movt	r0, #1
   152dc:	stm	sp, {r1, r9}
   152e0:	str	r0, [sp, #16]
   152e4:	mov	r0, r5
   152e8:	str	r4, [sp, #8]
   152ec:	mov	r9, r2
   152f0:	ldr	r1, [sp, #32]
   152f4:	ldr	r3, [sp, #28]
   152f8:	str	r1, [sp, #12]
   152fc:	mov	r1, r8
   15300:	bl	15634 <__assert_fail@plt+0x46e0>
   15304:	mov	r7, r0
   15308:	cmn	r0, #1
   1530c:	bne	154f0 <__assert_fail@plt+0x459c>
   15310:	ldr	sl, [r4]
   15314:	mov	r2, r9
   15318:	ldr	r0, [r8, sl, lsl #2]
   1531c:	add	r6, r0, #1
   15320:	b	15338 <__assert_fail@plt+0x43e4>
   15324:	mov	r0, r2
   15328:	bl	10e28 <strchr@plt>
   1532c:	ldr	r2, [sp, #20]
   15330:	cmp	r0, #0
   15334:	beq	152cc <__assert_fail@plt+0x4378>
   15338:	str	r6, [r4, #20]
   1533c:	add	r9, r6, #1
   15340:	mov	r0, r2
   15344:	str	r2, [sp, #20]
   15348:	str	r9, [r4, #20]
   1534c:	ldrb	r1, [r6]
   15350:	str	r1, [sp, #24]
   15354:	bl	10e28 <strchr@plt>
   15358:	ldrb	r1, [r6, #1]
   1535c:	ldr	r7, [sp, #24]
   15360:	cmp	r1, #0
   15364:	orr	r1, r7, #1
   15368:	addeq	sl, sl, #1
   1536c:	streq	sl, [r4]
   15370:	cmp	r1, #59	; 0x3b
   15374:	cmpne	r0, #0
   15378:	bne	15394 <__assert_fail@plt+0x4440>
   1537c:	ldr	r0, [sp, #32]
   15380:	cmp	r0, #0
   15384:	bne	15464 <__assert_fail@plt+0x4510>
   15388:	str	r7, [r4, #8]
   1538c:	mov	r7, #63	; 0x3f
   15390:	b	154f0 <__assert_fail@plt+0x459c>
   15394:	ldrb	r2, [r0]
   15398:	ldrb	r1, [r0, #1]
   1539c:	cmp	r2, #87	; 0x57
   153a0:	bne	153cc <__assert_fail@plt+0x4478>
   153a4:	ldr	r2, [sp, #28]
   153a8:	cmp	r2, #0
   153ac:	beq	153cc <__assert_fail@plt+0x4478>
   153b0:	cmp	r1, #59	; 0x3b
   153b4:	bne	153cc <__assert_fail@plt+0x4478>
   153b8:	ldrb	r0, [r9]
   153bc:	cmp	r0, #0
   153c0:	beq	1540c <__assert_fail@plt+0x44b8>
   153c4:	ldr	r2, [sp, #20]
   153c8:	b	15490 <__assert_fail@plt+0x453c>
   153cc:	cmp	r1, #58	; 0x3a
   153d0:	bne	154f0 <__assert_fail@plt+0x459c>
   153d4:	ldrb	r0, [r0, #2]
   153d8:	ldrb	r1, [r9]
   153dc:	cmp	r0, #58	; 0x3a
   153e0:	bne	153f4 <__assert_fail@plt+0x44a0>
   153e4:	cmp	r1, #0
   153e8:	bne	153fc <__assert_fail@plt+0x44a8>
   153ec:	mov	r0, #0
   153f0:	b	154e4 <__assert_fail@plt+0x4590>
   153f4:	cmp	r1, #0
   153f8:	beq	15438 <__assert_fail@plt+0x44e4>
   153fc:	add	r0, sl, #1
   15400:	str	r9, [r4, #12]
   15404:	str	r0, [r4]
   15408:	b	154e8 <__assert_fail@plt+0x4594>
   1540c:	ldr	r2, [sp, #20]
   15410:	cmp	sl, r5
   15414:	bne	1548c <__assert_fail@plt+0x4538>
   15418:	ldr	r0, [sp, #32]
   1541c:	cmp	r0, #0
   15420:	bne	154fc <__assert_fail@plt+0x45a8>
   15424:	str	r7, [r4, #8]
   15428:	ldrb	r7, [r2]
   1542c:	cmp	r7, #58	; 0x3a
   15430:	movwne	r7, #63	; 0x3f
   15434:	b	154f0 <__assert_fail@plt+0x459c>
   15438:	cmp	sl, r5
   1543c:	bne	154d8 <__assert_fail@plt+0x4584>
   15440:	ldr	r0, [sp, #32]
   15444:	cmp	r0, #0
   15448:	bne	15528 <__assert_fail@plt+0x45d4>
   1544c:	ldr	r0, [sp, #20]
   15450:	str	r7, [r4, #8]
   15454:	ldrb	r7, [r0]
   15458:	cmp	r7, #58	; 0x3a
   1545c:	movwne	r7, #63	; 0x3f
   15460:	b	154e8 <__assert_fail@plt+0x4594>
   15464:	movw	r0, #33040	; 0x8110
   15468:	ldr	r2, [r8]
   1546c:	ldr	r3, [sp, #24]
   15470:	movw	r1, #30451	; 0x76f3
   15474:	movt	r0, #2
   15478:	movt	r1, #1
   1547c:	ldr	r0, [r0]
   15480:	bl	10e40 <fprintf@plt>
   15484:	ldr	r7, [sp, #24]
   15488:	b	15388 <__assert_fail@plt+0x4434>
   1548c:	ldr	r9, [r8, sl, lsl #2]
   15490:	str	r9, [r4, #12]
   15494:	ldr	r3, [fp, #8]
   15498:	mov	r0, #0
   1549c:	movw	r1, #30520	; 0x7738
   154a0:	str	r0, [r4, #12]
   154a4:	str	r9, [r4, #20]
   154a8:	movt	r1, #1
   154ac:	str	r3, [sp]
   154b0:	stmib	sp, {r0, r4}
   154b4:	str	r1, [sp, #16]
   154b8:	ldr	r0, [sp, #32]
   154bc:	str	r0, [sp, #12]
   154c0:	ldr	r3, [sp, #28]
   154c4:	mov	r0, r5
   154c8:	mov	r1, r8
   154cc:	bl	15634 <__assert_fail@plt+0x46e0>
   154d0:	sub	sp, fp, #28
   154d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d8:	add	r0, sl, #1
   154dc:	str	r0, [r4]
   154e0:	ldr	r0, [r8, sl, lsl #2]
   154e4:	str	r0, [r4, #12]
   154e8:	mov	r0, #0
   154ec:	str	r0, [r4, #20]
   154f0:	mov	r0, r7
   154f4:	sub	sp, fp, #28
   154f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154fc:	movw	r0, #33040	; 0x8110
   15500:	ldr	r2, [r8]
   15504:	ldr	r3, [sp, #24]
   15508:	movw	r1, #30479	; 0x770f
   1550c:	movt	r0, #2
   15510:	movt	r1, #1
   15514:	ldr	r0, [r0]
   15518:	bl	10e40 <fprintf@plt>
   1551c:	ldr	r2, [sp, #20]
   15520:	ldr	r7, [sp, #24]
   15524:	b	15424 <__assert_fail@plt+0x44d0>
   15528:	movw	r0, #33040	; 0x8110
   1552c:	ldr	r2, [r8]
   15530:	ldr	r3, [sp, #24]
   15534:	movw	r1, #30479	; 0x770f
   15538:	movt	r0, #2
   1553c:	movt	r1, #1
   15540:	ldr	r0, [r0]
   15544:	bl	10e40 <fprintf@plt>
   15548:	ldr	r7, [sp, #24]
   1554c:	b	1544c <__assert_fail@plt+0x44f8>
   15550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15554:	add	fp, sp, #28
   15558:	sub	sp, sp, #4
   1555c:	ldr	lr, [r1]
   15560:	ldr	ip, [r1, #32]
   15564:	ldr	r2, [r1, #28]
   15568:	cmp	lr, ip
   1556c:	str	r2, [sp]
   15570:	ble	15618 <__assert_fail@plt+0x46c4>
   15574:	ldr	r2, [sp]
   15578:	cmp	r2, ip
   1557c:	bge	15618 <__assert_fail@plt+0x46c4>
   15580:	ldr	r4, [sp]
   15584:	add	r8, r0, ip, lsl #2
   15588:	mov	r9, lr
   1558c:	sub	r2, ip, r4
   15590:	sub	sl, r9, ip
   15594:	cmp	sl, r2
   15598:	ble	155dc <__assert_fail@plt+0x4688>
   1559c:	sub	sl, r9, r2
   155a0:	cmp	r2, #1
   155a4:	blt	155d4 <__assert_fail@plt+0x4680>
   155a8:	add	r5, r9, r4
   155ac:	add	r2, r0, r4, lsl #2
   155b0:	mov	r7, ip
   155b4:	add	r5, r0, r5, lsl #2
   155b8:	ldr	r6, [r5, -r7, lsl #2]
   155bc:	ldr	r3, [r2]
   155c0:	str	r6, [r2], #4
   155c4:	str	r3, [r5, -r7, lsl #2]
   155c8:	sub	r7, r7, #1
   155cc:	cmp	r4, r7
   155d0:	bne	155b8 <__assert_fail@plt+0x4664>
   155d4:	mov	r9, sl
   155d8:	b	1560c <__assert_fail@plt+0x46b8>
   155dc:	cmp	sl, #1
   155e0:	blt	15608 <__assert_fail@plt+0x46b4>
   155e4:	add	r7, r0, r4, lsl #2
   155e8:	mov	r2, r8
   155ec:	mov	r6, sl
   155f0:	ldr	r3, [r7]
   155f4:	ldr	r5, [r2]
   155f8:	subs	r6, r6, #1
   155fc:	str	r5, [r7], #4
   15600:	str	r3, [r2], #4
   15604:	bne	155f0 <__assert_fail@plt+0x469c>
   15608:	add	r4, r4, sl
   1560c:	cmp	r9, ip
   15610:	cmpgt	ip, r4
   15614:	bgt	1558c <__assert_fail@plt+0x4638>
   15618:	ldr	r0, [sp]
   1561c:	sub	r0, r0, ip
   15620:	add	r0, r0, lr
   15624:	str	r0, [r1, #28]
   15628:	str	lr, [r1, #32]
   1562c:	sub	sp, fp, #28
   15630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15638:	add	fp, sp, #28
   1563c:	sub	sp, sp, #44	; 0x2c
   15640:	str	r0, [sp, #12]
   15644:	ldr	r0, [fp, #16]
   15648:	ldr	r5, [fp, #8]
   1564c:	str	r2, [sp, #16]
   15650:	str	r1, [sp, #20]
   15654:	ldr	r9, [r0, #20]
   15658:	mov	r6, r9
   1565c:	b	15664 <__assert_fail@plt+0x4710>
   15660:	add	r6, r6, #1
   15664:	ldrb	r0, [r6]
   15668:	cmp	r0, #0
   1566c:	cmpne	r0, #61	; 0x3d
   15670:	bne	15660 <__assert_fail@plt+0x470c>
   15674:	ldr	sl, [r3]
   15678:	mvn	ip, #0
   1567c:	str	r3, [fp, #-32]	; 0xffffffe0
   15680:	cmp	sl, #0
   15684:	beq	15884 <__assert_fail@plt+0x4930>
   15688:	sub	r4, r6, r9
   1568c:	mov	r8, #0
   15690:	mov	r5, sl
   15694:	mov	r7, r3
   15698:	mov	r0, r5
   1569c:	mov	r1, r9
   156a0:	mov	r2, r4
   156a4:	bl	10f0c <strncmp@plt>
   156a8:	cmp	r0, #0
   156ac:	bne	156c0 <__assert_fail@plt+0x476c>
   156b0:	mov	r0, r5
   156b4:	bl	10e1c <strlen@plt>
   156b8:	cmp	r4, r0
   156bc:	beq	158b0 <__assert_fail@plt+0x495c>
   156c0:	ldr	r5, [r7, #16]!
   156c4:	add	r8, r8, #1
   156c8:	cmp	r5, #0
   156cc:	bne	15698 <__assert_fail@plt+0x4744>
   156d0:	cmp	sl, #0
   156d4:	beq	158bc <__assert_fail@plt+0x4968>
   156d8:	mvn	r0, #0
   156dc:	str	r4, [sp, #36]	; 0x24
   156e0:	mov	r4, #0
   156e4:	mov	r5, #0
   156e8:	mov	r7, #0
   156ec:	str	r0, [sp, #24]
   156f0:	mov	r0, #0
   156f4:	str	r0, [sp, #32]
   156f8:	mov	r0, #0
   156fc:	str	r0, [sp, #8]
   15700:	mov	r0, #0
   15704:	str	r0, [sp, #28]
   15708:	ldr	r2, [sp, #36]	; 0x24
   1570c:	mov	r0, sl
   15710:	mov	r1, r9
   15714:	bl	10f0c <strncmp@plt>
   15718:	cmp	r0, #0
   1571c:	beq	15750 <__assert_fail@plt+0x47fc>
   15720:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15724:	mov	r1, r4
   15728:	add	r0, r3, r5, lsl #4
   1572c:	ldr	sl, [r0, #16]
   15730:	cmp	sl, #0
   15734:	beq	1589c <__assert_fail@plt+0x4948>
   15738:	ldr	r0, [fp, #16]
   1573c:	add	r1, r1, #16
   15740:	add	r5, r5, #1
   15744:	mov	r4, r1
   15748:	ldr	r9, [r0, #20]
   1574c:	b	15708 <__assert_fail@plt+0x47b4>
   15750:	cmp	r7, #0
   15754:	beq	15808 <__assert_fail@plt+0x48b4>
   15758:	ldr	r0, [fp, #12]
   1575c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15760:	cmp	r0, #0
   15764:	bne	1578c <__assert_fail@plt+0x4838>
   15768:	add	r0, r3, r5, lsl #4
   1576c:	ldr	r2, [r7, #4]
   15770:	ldr	r1, [r0, #4]
   15774:	cmp	r2, r1
   15778:	bne	1578c <__assert_fail@plt+0x4838>
   1577c:	ldr	r1, [r0, #8]
   15780:	ldr	r2, [r7, #8]
   15784:	cmp	r2, r1
   15788:	beq	15840 <__assert_fail@plt+0x48ec>
   1578c:	ldr	r0, [sp, #32]
   15790:	mov	r1, r4
   15794:	cmp	r0, #0
   15798:	bne	15728 <__assert_fail@plt+0x47d4>
   1579c:	ldr	r0, [fp, #20]
   157a0:	cmp	r0, #0
   157a4:	beq	1581c <__assert_fail@plt+0x48c8>
   157a8:	ldr	r9, [sp, #28]
   157ac:	mov	r0, #0
   157b0:	str	r0, [sp, #32]
   157b4:	cmp	r9, #0
   157b8:	bne	15830 <__assert_fail@plt+0x48dc>
   157bc:	mov	r0, r8
   157c0:	bl	16ef8 <__assert_fail@plt+0x5fa4>
   157c4:	cmp	r0, #0
   157c8:	beq	15870 <__assert_fail@plt+0x491c>
   157cc:	mov	r9, r0
   157d0:	mov	r0, #0
   157d4:	mov	r1, #0
   157d8:	mov	r2, r8
   157dc:	str	r0, [sp, #32]
   157e0:	mov	r0, r9
   157e4:	bl	10e64 <memset@plt>
   157e8:	ldr	r0, [sp, #24]
   157ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157f0:	mov	r1, #1
   157f4:	mov	r2, #1
   157f8:	str	r1, [sp, #8]
   157fc:	mov	r1, r4
   15800:	strb	r2, [r9, r0]
   15804:	b	15830 <__assert_fail@plt+0x48dc>
   15808:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1580c:	mov	r1, r4
   15810:	str	r5, [sp, #24]
   15814:	add	r7, r3, r4
   15818:	b	15728 <__assert_fail@plt+0x47d4>
   1581c:	ldr	r9, [sp, #28]
   15820:	mov	r0, #1
   15824:	str	r0, [sp, #32]
   15828:	cmp	r9, #0
   1582c:	beq	15864 <__assert_fail@plt+0x4910>
   15830:	mov	r0, #1
   15834:	str	r9, [sp, #28]
   15838:	strb	r0, [r9, r5]
   1583c:	b	15728 <__assert_fail@plt+0x47d4>
   15840:	ldr	r1, [sp, #32]
   15844:	cmp	r1, #0
   15848:	bne	15724 <__assert_fail@plt+0x47d0>
   1584c:	ldr	r0, [r0, #12]
   15850:	ldr	r1, [r7, #12]
   15854:	cmp	r1, r0
   15858:	mov	r1, r4
   1585c:	bne	1579c <__assert_fail@plt+0x4848>
   15860:	b	15728 <__assert_fail@plt+0x47d4>
   15864:	mov	r0, #0
   15868:	str	r0, [sp, #28]
   1586c:	b	15728 <__assert_fail@plt+0x47d4>
   15870:	mov	r0, #1
   15874:	str	r0, [sp, #32]
   15878:	mov	r0, #0
   1587c:	str	r0, [sp, #28]
   15880:	b	15720 <__assert_fail@plt+0x47cc>
   15884:	mov	r0, #0
   15888:	mov	r8, #0
   1588c:	mov	r7, #0
   15890:	mov	sl, #0
   15894:	mov	r4, #0
   15898:	b	158d4 <__assert_fail@plt+0x4980>
   1589c:	ldr	r5, [fp, #8]
   158a0:	ldr	ip, [sp, #24]
   158a4:	ldr	sl, [sp, #28]
   158a8:	ldr	r4, [sp, #8]
   158ac:	b	158d8 <__assert_fail@plt+0x4984>
   158b0:	ldr	r5, [fp, #8]
   158b4:	mov	ip, r8
   158b8:	b	15940 <__assert_fail@plt+0x49ec>
   158bc:	ldr	r5, [fp, #8]
   158c0:	mov	r0, #0
   158c4:	mov	r7, #0
   158c8:	mov	sl, #0
   158cc:	mov	r4, #0
   158d0:	mvn	ip, #0
   158d4:	str	r0, [sp, #32]
   158d8:	cmp	sl, #0
   158dc:	ldreq	r0, [sp, #32]
   158e0:	cmpeq	r0, #0
   158e4:	beq	15938 <__assert_fail@plt+0x49e4>
   158e8:	ldr	r0, [fp, #20]
   158ec:	cmp	r0, #0
   158f0:	bne	15a98 <__assert_fail@plt+0x4b44>
   158f4:	cmp	r4, #0
   158f8:	beq	15904 <__assert_fail@plt+0x49b0>
   158fc:	mov	r0, sl
   15900:	bl	12fdc <__assert_fail@plt+0x2088>
   15904:	ldr	r0, [fp, #16]
   15908:	ldr	r4, [r0, #20]
   1590c:	mov	r5, r0
   15910:	mov	r0, r4
   15914:	bl	10e1c <strlen@plt>
   15918:	mov	r1, #0
   1591c:	add	r0, r4, r0
   15920:	str	r1, [r5, #8]
   15924:	str	r0, [r5, #20]
   15928:	ldr	r0, [r5]
   1592c:	add	r0, r0, #1
   15930:	str	r0, [r5]
   15934:	b	15a60 <__assert_fail@plt+0x4b0c>
   15938:	cmp	r7, #0
   1593c:	beq	159d0 <__assert_fail@plt+0x4a7c>
   15940:	ldr	r1, [fp, #16]
   15944:	mov	r0, #0
   15948:	str	r0, [r1, #20]
   1594c:	mov	r2, r1
   15950:	ldr	r1, [r1]
   15954:	add	r0, r1, #1
   15958:	str	r0, [r2]
   1595c:	ldrb	r3, [r6]
   15960:	ldr	r2, [r7, #4]
   15964:	cmp	r3, #0
   15968:	beq	15984 <__assert_fail@plt+0x4a30>
   1596c:	cmp	r2, #0
   15970:	beq	15a48 <__assert_fail@plt+0x4af4>
   15974:	ldr	r1, [fp, #16]
   15978:	add	r0, r6, #1
   1597c:	str	r0, [r1, #12]
   15980:	b	159b0 <__assert_fail@plt+0x4a5c>
   15984:	cmp	r2, #1
   15988:	bne	159b0 <__assert_fail@plt+0x4a5c>
   1598c:	ldr	r2, [sp, #12]
   15990:	cmp	r0, r2
   15994:	bge	15a6c <__assert_fail@plt+0x4b18>
   15998:	ldr	r2, [fp, #16]
   1599c:	add	r1, r1, #2
   159a0:	str	r1, [r2]
   159a4:	ldr	r1, [sp, #20]
   159a8:	ldr	r0, [r1, r0, lsl #2]
   159ac:	str	r0, [r2, #12]
   159b0:	cmp	r5, #0
   159b4:	strne	ip, [r5]
   159b8:	ldr	r1, [r7, #8]
   159bc:	ldr	r0, [r7, #12]
   159c0:	cmp	r1, #0
   159c4:	strne	r0, [r1]
   159c8:	movne	r0, #0
   159cc:	b	15a64 <__assert_fail@plt+0x4b10>
   159d0:	ldr	r0, [fp, #12]
   159d4:	cmp	r0, #0
   159d8:	beq	15a1c <__assert_fail@plt+0x4ac8>
   159dc:	ldr	r0, [fp, #16]
   159e0:	ldr	r1, [sp, #20]
   159e4:	ldr	r0, [r0]
   159e8:	ldr	r0, [r1, r0, lsl #2]
   159ec:	ldrb	r0, [r0, #1]
   159f0:	cmp	r0, #45	; 0x2d
   159f4:	beq	15a1c <__assert_fail@plt+0x4ac8>
   159f8:	ldr	r0, [fp, #16]
   159fc:	ldr	r0, [r0, #20]
   15a00:	ldrb	r1, [r0]
   15a04:	ldr	r0, [sp, #16]
   15a08:	bl	10e28 <strchr@plt>
   15a0c:	mov	r1, r0
   15a10:	mvn	r0, #0
   15a14:	cmp	r1, #0
   15a18:	bne	15a64 <__assert_fail@plt+0x4b10>
   15a1c:	ldr	r0, [fp, #20]
   15a20:	cmp	r0, #0
   15a24:	bne	15b74 <__assert_fail@plt+0x4c20>
   15a28:	ldr	r1, [fp, #16]
   15a2c:	mov	r0, #0
   15a30:	str	r0, [r1, #20]
   15a34:	str	r0, [r1, #8]
   15a38:	ldr	r0, [r1]
   15a3c:	add	r0, r0, #1
   15a40:	str	r0, [r1]
   15a44:	b	15a60 <__assert_fail@plt+0x4b0c>
   15a48:	ldr	r0, [fp, #20]
   15a4c:	cmp	r0, #0
   15a50:	bne	15ba8 <__assert_fail@plt+0x4c54>
   15a54:	ldr	r0, [r7, #12]
   15a58:	ldr	r1, [fp, #16]
   15a5c:	str	r0, [r1, #8]
   15a60:	mov	r0, #63	; 0x3f
   15a64:	sub	sp, fp, #28
   15a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a6c:	ldr	r0, [fp, #20]
   15a70:	cmp	r0, #0
   15a74:	bne	15bd8 <__assert_fail@plt+0x4c84>
   15a78:	ldr	r0, [r7, #12]
   15a7c:	ldr	r1, [fp, #16]
   15a80:	str	r0, [r1, #8]
   15a84:	ldr	r0, [sp, #16]
   15a88:	ldrb	r0, [r0]
   15a8c:	cmp	r0, #58	; 0x3a
   15a90:	movwne	r0, #63	; 0x3f
   15a94:	b	15a64 <__assert_fail@plt+0x4b10>
   15a98:	movw	r5, #33040	; 0x8110
   15a9c:	ldr	r1, [sp, #32]
   15aa0:	movt	r5, #2
   15aa4:	ldr	r0, [r5]
   15aa8:	cmp	r1, #0
   15aac:	beq	15ad8 <__assert_fail@plt+0x4b84>
   15ab0:	ldr	r1, [sp, #20]
   15ab4:	ldr	r3, [fp, #24]
   15ab8:	ldr	r2, [r1]
   15abc:	ldr	r1, [fp, #16]
   15ac0:	ldr	r1, [r1, #20]
   15ac4:	str	r1, [sp]
   15ac8:	movw	r1, #30540	; 0x774c
   15acc:	movt	r1, #1
   15ad0:	bl	10e40 <fprintf@plt>
   15ad4:	b	158f4 <__assert_fail@plt+0x49a0>
   15ad8:	bl	10ec4 <flockfile@plt>
   15adc:	ldr	r1, [fp, #16]
   15ae0:	ldr	r0, [sp, #20]
   15ae4:	ldr	r9, [fp, #24]
   15ae8:	ldr	r1, [r1, #20]
   15aec:	ldr	r2, [r0]
   15af0:	ldr	r0, [r5]
   15af4:	mov	r3, r9
   15af8:	str	r1, [sp]
   15afc:	movw	r1, #30572	; 0x776c
   15b00:	movt	r1, #1
   15b04:	bl	10e40 <fprintf@plt>
   15b08:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15b0c:	cmp	r8, #0
   15b10:	beq	15b5c <__assert_fail@plt+0x4c08>
   15b14:	mov	r6, sl
   15b18:	b	15b40 <__assert_fail@plt+0x4bec>
   15b1c:	ldr	r3, [r1]
   15b20:	ldr	r0, [r5]
   15b24:	mov	r7, r1
   15b28:	movw	r1, #30619	; 0x779b
   15b2c:	mov	r2, r9
   15b30:	movt	r1, #1
   15b34:	bl	10e40 <fprintf@plt>
   15b38:	mov	r1, r7
   15b3c:	b	15b4c <__assert_fail@plt+0x4bf8>
   15b40:	ldrb	r0, [r6]
   15b44:	cmp	r0, #0
   15b48:	bne	15b1c <__assert_fail@plt+0x4bc8>
   15b4c:	add	r1, r1, #16
   15b50:	add	r6, r6, #1
   15b54:	subs	r8, r8, #1
   15b58:	bne	15b40 <__assert_fail@plt+0x4bec>
   15b5c:	ldr	r1, [r5]
   15b60:	mov	r0, #10
   15b64:	bl	10e94 <fputc@plt>
   15b68:	ldr	r0, [r5]
   15b6c:	bl	10d74 <funlockfile@plt>
   15b70:	b	158f4 <__assert_fail@plt+0x49a0>
   15b74:	ldr	r1, [fp, #16]
   15b78:	ldr	r0, [sp, #20]
   15b7c:	ldr	r3, [fp, #24]
   15b80:	ldr	r2, [r0]
   15b84:	movw	r0, #33040	; 0x8110
   15b88:	ldr	r1, [r1, #20]
   15b8c:	movt	r0, #2
   15b90:	ldr	r0, [r0]
   15b94:	str	r1, [sp]
   15b98:	movw	r1, #30627	; 0x77a3
   15b9c:	movt	r1, #1
   15ba0:	bl	10e40 <fprintf@plt>
   15ba4:	b	15a28 <__assert_fail@plt+0x4ad4>
   15ba8:	ldr	r0, [sp, #20]
   15bac:	ldr	r1, [r7]
   15bb0:	ldr	r3, [fp, #24]
   15bb4:	ldr	r2, [r0]
   15bb8:	movw	r0, #33040	; 0x8110
   15bbc:	str	r1, [sp]
   15bc0:	movw	r1, #30659	; 0x77c3
   15bc4:	movt	r0, #2
   15bc8:	movt	r1, #1
   15bcc:	ldr	r0, [r0]
   15bd0:	bl	10e40 <fprintf@plt>
   15bd4:	b	15a54 <__assert_fail@plt+0x4b00>
   15bd8:	ldr	r0, [sp, #20]
   15bdc:	ldr	r1, [r7]
   15be0:	ldr	r3, [fp, #24]
   15be4:	ldr	r2, [r0]
   15be8:	movw	r0, #33040	; 0x8110
   15bec:	str	r1, [sp]
   15bf0:	movw	r1, #30704	; 0x77f0
   15bf4:	movt	r0, #2
   15bf8:	movt	r1, #1
   15bfc:	ldr	r0, [r0]
   15c00:	bl	10e40 <fprintf@plt>
   15c04:	b	15a78 <__assert_fail@plt+0x4b24>
   15c08:	push	{r4, r5, r6, r7, fp, lr}
   15c0c:	add	fp, sp, #16
   15c10:	sub	sp, sp, #16
   15c14:	movw	r7, #33028	; 0x8104
   15c18:	movw	r5, #33032	; 0x8108
   15c1c:	movw	r6, #33068	; 0x812c
   15c20:	movt	r5, #2
   15c24:	movt	r7, #2
   15c28:	movt	r6, #2
   15c2c:	ldr	r4, [r7]
   15c30:	ldr	r5, [r5]
   15c34:	stm	r6, {r4, r5}
   15c38:	ldr	r5, [fp, #16]
   15c3c:	str	r6, [sp, #8]
   15c40:	str	r5, [sp, #12]
   15c44:	ldr	r5, [fp, #12]
   15c48:	str	r5, [sp, #4]
   15c4c:	ldr	r5, [fp, #8]
   15c50:	str	r5, [sp]
   15c54:	bl	15010 <__assert_fail@plt+0x40bc>
   15c58:	ldr	r1, [r6]
   15c5c:	ldr	r3, [r6, #12]
   15c60:	ldr	r2, [r6, #8]
   15c64:	str	r1, [r7]
   15c68:	movw	r1, #33208	; 0x81b8
   15c6c:	movt	r1, #2
   15c70:	str	r3, [r1]
   15c74:	movw	r1, #33036	; 0x810c
   15c78:	movt	r1, #2
   15c7c:	str	r2, [r1]
   15c80:	sub	sp, fp, #16
   15c84:	pop	{r4, r5, r6, r7, fp, pc}
   15c88:	push	{r4, r5, r6, sl, fp, lr}
   15c8c:	add	fp, sp, #16
   15c90:	sub	sp, sp, #16
   15c94:	movw	r6, #33028	; 0x8104
   15c98:	movw	r4, #33032	; 0x8108
   15c9c:	movw	r5, #33068	; 0x812c
   15ca0:	movt	r4, #2
   15ca4:	movt	r6, #2
   15ca8:	movt	r5, #2
   15cac:	ldr	r3, [r6]
   15cb0:	ldr	r4, [r4]
   15cb4:	stm	r5, {r3, r4}
   15cb8:	mov	r4, #0
   15cbc:	mov	r3, #1
   15cc0:	str	r4, [sp]
   15cc4:	stmib	sp, {r4, r5}
   15cc8:	str	r3, [sp, #12]
   15ccc:	mov	r3, #0
   15cd0:	bl	15010 <__assert_fail@plt+0x40bc>
   15cd4:	ldr	r1, [r5]
   15cd8:	ldr	r3, [r5, #12]
   15cdc:	ldr	r2, [r5, #8]
   15ce0:	str	r1, [r6]
   15ce4:	movw	r1, #33208	; 0x81b8
   15ce8:	movt	r1, #2
   15cec:	str	r3, [r1]
   15cf0:	movw	r1, #33036	; 0x810c
   15cf4:	movt	r1, #2
   15cf8:	str	r2, [r1]
   15cfc:	sub	sp, fp, #16
   15d00:	pop	{r4, r5, r6, sl, fp, pc}
   15d04:	andeq	r0, r0, r0
   15d08:	ldr	r0, [r0, #8]
   15d0c:	bx	lr
   15d10:	ldr	r0, [r0, #12]
   15d14:	bx	lr
   15d18:	ldr	r0, [r0, #16]
   15d1c:	bx	lr
   15d20:	ldm	r0, {r2, ip}
   15d24:	mov	r0, #0
   15d28:	cmp	r2, ip
   15d2c:	bxcs	lr
   15d30:	mov	r0, #0
   15d34:	ldr	r1, [r2]
   15d38:	cmp	r1, #0
   15d3c:	beq	15d60 <__assert_fail@plt+0x4e0c>
   15d40:	mov	r3, #0
   15d44:	mov	r1, r2
   15d48:	ldr	r1, [r1, #4]
   15d4c:	add	r3, r3, #1
   15d50:	cmp	r1, #0
   15d54:	bne	15d48 <__assert_fail@plt+0x4df4>
   15d58:	cmp	r3, r0
   15d5c:	movhi	r0, r3
   15d60:	add	r2, r2, #8
   15d64:	cmp	r2, ip
   15d68:	bcc	15d34 <__assert_fail@plt+0x4de0>
   15d6c:	bx	lr
   15d70:	push	{fp, lr}
   15d74:	mov	fp, sp
   15d78:	ldm	r0, {r3, ip}
   15d7c:	mov	lr, #0
   15d80:	mov	r1, #0
   15d84:	cmp	r3, ip
   15d88:	bcs	15dc4 <__assert_fail@plt+0x4e70>
   15d8c:	mov	r1, #0
   15d90:	mov	lr, #0
   15d94:	ldr	r2, [r3]
   15d98:	cmp	r2, #0
   15d9c:	beq	15db8 <__assert_fail@plt+0x4e64>
   15da0:	mov	r2, r3
   15da4:	ldr	r2, [r2, #4]
   15da8:	add	r1, r1, #1
   15dac:	cmp	r2, #0
   15db0:	bne	15da4 <__assert_fail@plt+0x4e50>
   15db4:	add	lr, lr, #1
   15db8:	add	r3, r3, #8
   15dbc:	cmp	r3, ip
   15dc0:	bcc	15d94 <__assert_fail@plt+0x4e40>
   15dc4:	ldr	r2, [r0, #12]
   15dc8:	cmp	lr, r2
   15dcc:	bne	15de4 <__assert_fail@plt+0x4e90>
   15dd0:	ldr	r2, [r0, #16]
   15dd4:	mov	r0, #1
   15dd8:	cmp	r1, r2
   15ddc:	movne	r0, #0
   15de0:	pop	{fp, pc}
   15de4:	mov	r0, #0
   15de8:	pop	{fp, pc}
   15dec:	nop	{0}
   15df0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15df4:	add	fp, sp, #24
   15df8:	sub	sp, sp, #8
   15dfc:	ldr	r6, [r0]
   15e00:	ldmib	r0, {r3, r7, r8}
   15e04:	ldr	r2, [r0, #16]
   15e08:	mov	r4, r1
   15e0c:	mov	r5, #0
   15e10:	cmp	r6, r3
   15e14:	bcs	15e54 <__assert_fail@plt+0x4f00>
   15e18:	mov	r5, #0
   15e1c:	ldr	r0, [r6]
   15e20:	cmp	r0, #0
   15e24:	beq	15e48 <__assert_fail@plt+0x4ef4>
   15e28:	mov	r0, #0
   15e2c:	mov	r1, r6
   15e30:	ldr	r1, [r1, #4]
   15e34:	add	r0, r0, #1
   15e38:	cmp	r1, #0
   15e3c:	bne	15e30 <__assert_fail@plt+0x4edc>
   15e40:	cmp	r0, r5
   15e44:	movhi	r5, r0
   15e48:	add	r6, r6, #8
   15e4c:	cmp	r6, r3
   15e50:	bcc	15e1c <__assert_fail@plt+0x4ec8>
   15e54:	movw	r1, #30744	; 0x7818
   15e58:	mov	r0, r4
   15e5c:	movt	r1, #1
   15e60:	bl	10e40 <fprintf@plt>
   15e64:	movw	r1, #30768	; 0x7830
   15e68:	mov	r0, r4
   15e6c:	mov	r2, r7
   15e70:	movt	r1, #1
   15e74:	bl	10e40 <fprintf@plt>
   15e78:	vldr	d16, [pc, #72]	; 15ec8 <__assert_fail@plt+0x4f74>
   15e7c:	vmov	s0, r8
   15e80:	movw	r1, #30792	; 0x7848
   15e84:	mov	r0, r4
   15e88:	mov	r2, r8
   15e8c:	vcvt.f64.u32	d17, s0
   15e90:	vmov	s0, r7
   15e94:	movt	r1, #1
   15e98:	vcvt.f64.u32	d18, s0
   15e9c:	vmul.f64	d16, d17, d16
   15ea0:	vdiv.f64	d16, d16, d18
   15ea4:	vstr	d16, [sp]
   15ea8:	bl	10e40 <fprintf@plt>
   15eac:	movw	r1, #30825	; 0x7869
   15eb0:	mov	r0, r4
   15eb4:	mov	r2, r5
   15eb8:	movt	r1, #1
   15ebc:	sub	sp, fp, #24
   15ec0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ec4:	b	10e40 <fprintf@plt>
   15ec8:	andeq	r0, r0, r0
   15ecc:	subsmi	r0, r9, r0
   15ed0:	push	{r4, r5, r6, r7, fp, lr}
   15ed4:	add	fp, sp, #16
   15ed8:	mov	r4, r1
   15edc:	ldr	r1, [r0, #8]
   15ee0:	ldr	r2, [r0, #24]
   15ee4:	mov	r5, r0
   15ee8:	mov	r0, r4
   15eec:	blx	r2
   15ef0:	ldr	r1, [r5, #8]
   15ef4:	cmp	r0, r1
   15ef8:	bcs	15f58 <__assert_fail@plt+0x5004>
   15efc:	ldr	r7, [r5]
   15f00:	mov	r6, #0
   15f04:	ldr	r1, [r7, r0, lsl #3]!
   15f08:	cmp	r1, #0
   15f0c:	cmpne	r7, #0
   15f10:	bne	15f40 <__assert_fail@plt+0x4fec>
   15f14:	mov	r0, r6
   15f18:	pop	{r4, r5, r6, r7, fp, pc}
   15f1c:	ldr	r2, [r5, #28]
   15f20:	mov	r0, r4
   15f24:	blx	r2
   15f28:	cmp	r0, #0
   15f2c:	bne	15f50 <__assert_fail@plt+0x4ffc>
   15f30:	ldr	r7, [r7, #4]
   15f34:	cmp	r7, #0
   15f38:	beq	15f14 <__assert_fail@plt+0x4fc0>
   15f3c:	ldr	r1, [r7]
   15f40:	cmp	r1, r4
   15f44:	bne	15f1c <__assert_fail@plt+0x4fc8>
   15f48:	mov	r6, r4
   15f4c:	b	15f14 <__assert_fail@plt+0x4fc0>
   15f50:	ldr	r6, [r7]
   15f54:	b	15f14 <__assert_fail@plt+0x4fc0>
   15f58:	bl	10f18 <abort@plt>
   15f5c:	ldr	r1, [r0, #16]
   15f60:	cmp	r1, #0
   15f64:	moveq	r0, #0
   15f68:	bxeq	lr
   15f6c:	ldm	r0, {r1, r2}
   15f70:	b	15f80 <__assert_fail@plt+0x502c>
   15f74:	ldr	r0, [r1], #8
   15f78:	cmp	r0, #0
   15f7c:	bxne	lr
   15f80:	cmp	r1, r2
   15f84:	bcc	15f74 <__assert_fail@plt+0x5020>
   15f88:	push	{fp, lr}
   15f8c:	mov	fp, sp
   15f90:	bl	10f18 <abort@plt>
   15f94:	push	{r4, r5, fp, lr}
   15f98:	add	fp, sp, #8
   15f9c:	mov	r5, r1
   15fa0:	ldr	r1, [r0, #8]
   15fa4:	ldr	r2, [r0, #24]
   15fa8:	mov	r4, r0
   15fac:	mov	r0, r5
   15fb0:	blx	r2
   15fb4:	ldr	r1, [r4, #8]
   15fb8:	cmp	r0, r1
   15fbc:	bcs	16018 <__assert_fail@plt+0x50c4>
   15fc0:	ldr	r1, [r4]
   15fc4:	add	r2, r1, r0, lsl #3
   15fc8:	ldr	r3, [r2]
   15fcc:	ldr	r2, [r2, #4]
   15fd0:	cmp	r3, r5
   15fd4:	beq	15fe4 <__assert_fail@plt+0x5090>
   15fd8:	cmp	r2, #0
   15fdc:	bne	15fc8 <__assert_fail@plt+0x5074>
   15fe0:	b	15ff0 <__assert_fail@plt+0x509c>
   15fe4:	cmp	r2, #0
   15fe8:	ldrne	r0, [r2]
   15fec:	popne	{r4, r5, fp, pc}
   15ff0:	ldr	r2, [r4, #4]
   15ff4:	add	r0, r1, r0, lsl #3
   15ff8:	add	r1, r0, #8
   15ffc:	cmp	r1, r2
   16000:	movcs	r0, #0
   16004:	popcs	{r4, r5, fp, pc}
   16008:	ldr	r0, [r1], #8
   1600c:	cmp	r0, #0
   16010:	popne	{r4, r5, fp, pc}
   16014:	b	15ffc <__assert_fail@plt+0x50a8>
   16018:	bl	10f18 <abort@plt>
   1601c:	push	{r4, r5, fp, lr}
   16020:	add	fp, sp, #8
   16024:	ldm	r0, {r5, lr}
   16028:	mov	ip, r0
   1602c:	mov	r0, #0
   16030:	cmp	r5, lr
   16034:	bcs	16080 <__assert_fail@plt+0x512c>
   16038:	mov	r0, #0
   1603c:	ldr	r3, [r5]
   16040:	cmp	r3, #0
   16044:	cmpne	r5, #0
   16048:	beq	16074 <__assert_fail@plt+0x5120>
   1604c:	mov	r3, r5
   16050:	cmp	r0, r2
   16054:	popcs	{r4, r5, fp, pc}
   16058:	ldr	r4, [r3]
   1605c:	str	r4, [r1, r0, lsl #2]
   16060:	add	r0, r0, #1
   16064:	ldr	r3, [r3, #4]
   16068:	cmp	r3, #0
   1606c:	bne	16050 <__assert_fail@plt+0x50fc>
   16070:	ldr	lr, [ip, #4]
   16074:	add	r5, r5, #8
   16078:	cmp	r5, lr
   1607c:	bcc	1603c <__assert_fail@plt+0x50e8>
   16080:	pop	{r4, r5, fp, pc}
   16084:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16088:	add	fp, sp, #24
   1608c:	mov	r5, r1
   16090:	ldr	r4, [r0]
   16094:	ldr	r1, [r0, #4]
   16098:	mov	r6, #0
   1609c:	cmp	r4, r1
   160a0:	bcs	16114 <__assert_fail@plt+0x51c0>
   160a4:	mov	r9, r2
   160a8:	mov	r8, r0
   160ac:	mov	r6, #0
   160b0:	b	160f8 <__assert_fail@plt+0x51a4>
   160b4:	mov	r1, r9
   160b8:	blx	r5
   160bc:	cmp	r0, #0
   160c0:	beq	16114 <__assert_fail@plt+0x51c0>
   160c4:	mov	r7, r4
   160c8:	ldr	r7, [r7, #4]
   160cc:	add	r6, r6, #1
   160d0:	cmp	r7, #0
   160d4:	beq	160f0 <__assert_fail@plt+0x519c>
   160d8:	ldr	r0, [r7]
   160dc:	mov	r1, r9
   160e0:	blx	r5
   160e4:	cmp	r0, #0
   160e8:	bne	160c8 <__assert_fail@plt+0x5174>
   160ec:	b	16114 <__assert_fail@plt+0x51c0>
   160f0:	ldr	r1, [r8, #4]
   160f4:	b	16108 <__assert_fail@plt+0x51b4>
   160f8:	ldr	r0, [r4]
   160fc:	cmp	r0, #0
   16100:	cmpne	r4, #0
   16104:	bne	160b4 <__assert_fail@plt+0x5160>
   16108:	add	r4, r4, #8
   1610c:	cmp	r4, r1
   16110:	bcc	160f8 <__assert_fail@plt+0x51a4>
   16114:	mov	r0, r6
   16118:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1611c:	ldrb	r2, [r0]
   16120:	cmp	r2, #0
   16124:	moveq	r0, #0
   16128:	bxeq	lr
   1612c:	add	r3, r0, #1
   16130:	mov	r0, #0
   16134:	rsb	r0, r0, r0, lsl #5
   16138:	uxtab	r0, r0, r2
   1613c:	udiv	r2, r0, r1
   16140:	mls	r0, r2, r1, r0
   16144:	ldrb	r2, [r3], #1
   16148:	cmp	r2, #0
   1614c:	bne	16134 <__assert_fail@plt+0x51e0>
   16150:	bx	lr
   16154:	movw	r1, #30856	; 0x7888
   16158:	movt	r1, #1
   1615c:	vld1.32	{d16-d17}, [r1]!
   16160:	ldr	r1, [r1]
   16164:	vst1.32	{d16-d17}, [r0]!
   16168:	str	r1, [r0]
   1616c:	bx	lr
   16170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16174:	add	fp, sp, #28
   16178:	sub	sp, sp, #4
   1617c:	movw	sl, #25188	; 0x6264
   16180:	movw	r5, #25168	; 0x6250
   16184:	cmp	r3, #0
   16188:	mov	r8, r0
   1618c:	mov	r0, #40	; 0x28
   16190:	mov	r7, r1
   16194:	movt	sl, #1
   16198:	movt	r5, #1
   1619c:	movne	sl, r3
   161a0:	cmp	r2, #0
   161a4:	movne	r5, r2
   161a8:	bl	16ef8 <__assert_fail@plt+0x5fa4>
   161ac:	mov	r9, #0
   161b0:	cmp	r0, #0
   161b4:	beq	16244 <__assert_fail@plt+0x52f0>
   161b8:	movw	r6, #30856	; 0x7888
   161bc:	cmp	r7, #0
   161c0:	mov	r4, r0
   161c4:	movt	r6, #1
   161c8:	movne	r6, r7
   161cc:	str	r6, [r0, #20]
   161d0:	bl	16274 <__assert_fail@plt+0x5320>
   161d4:	cmp	r0, #0
   161d8:	beq	1623c <__assert_fail@plt+0x52e8>
   161dc:	mov	r0, r8
   161e0:	mov	r1, r6
   161e4:	bl	16320 <__assert_fail@plt+0x53cc>
   161e8:	cmp	r0, #0
   161ec:	str	r0, [r4, #8]
   161f0:	beq	1623c <__assert_fail@plt+0x52e8>
   161f4:	mov	r1, #8
   161f8:	bl	16ea4 <__assert_fail@plt+0x5f50>
   161fc:	cmp	r0, #0
   16200:	str	r0, [r4]
   16204:	beq	1623c <__assert_fail@plt+0x52e8>
   16208:	ldr	r1, [fp, #8]
   1620c:	mov	r2, #0
   16210:	mov	r9, r4
   16214:	str	r2, [r4, #12]
   16218:	str	r2, [r4, #16]
   1621c:	str	r5, [r4, #24]
   16220:	str	sl, [r4, #28]
   16224:	str	r1, [r4, #32]
   16228:	str	r2, [r4, #36]	; 0x24
   1622c:	ldr	r1, [r4, #8]
   16230:	add	r0, r0, r1, lsl #3
   16234:	str	r0, [r4, #4]
   16238:	b	16244 <__assert_fail@plt+0x52f0>
   1623c:	mov	r0, r4
   16240:	bl	12fdc <__assert_fail@plt+0x2088>
   16244:	mov	r0, r9
   16248:	sub	sp, fp, #28
   1624c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16250:	ror	r2, r0, #3
   16254:	udiv	r2, r2, r1
   16258:	mul	r1, r2, r1
   1625c:	rsb	r0, r1, r0, ror #3
   16260:	bx	lr
   16264:	sub	r0, r0, r1
   16268:	clz	r0, r0
   1626c:	lsr	r0, r0, #5
   16270:	bx	lr
   16274:	ldr	r3, [r0, #20]
   16278:	movw	r2, #30856	; 0x7888
   1627c:	mov	r1, r0
   16280:	mov	r0, #1
   16284:	movt	r2, #1
   16288:	cmp	r3, r2
   1628c:	beq	16310 <__assert_fail@plt+0x53bc>
   16290:	vldr	s2, [pc, #124]	; 16314 <__assert_fail@plt+0x53c0>
   16294:	vldr	s0, [r3, #8]
   16298:	vcmpe.f32	s0, s2
   1629c:	vmrs	APSR_nzcv, fpscr
   162a0:	ble	16308 <__assert_fail@plt+0x53b4>
   162a4:	vldr	s4, [pc, #108]	; 16318 <__assert_fail@plt+0x53c4>
   162a8:	vcmpe.f32	s0, s4
   162ac:	vmrs	APSR_nzcv, fpscr
   162b0:	bpl	16308 <__assert_fail@plt+0x53b4>
   162b4:	vldr	s4, [pc, #96]	; 1631c <__assert_fail@plt+0x53c8>
   162b8:	vldr	s6, [r3, #12]
   162bc:	vcmpe.f32	s6, s4
   162c0:	vmrs	APSR_nzcv, fpscr
   162c4:	ble	16308 <__assert_fail@plt+0x53b4>
   162c8:	vldr	s4, [r3]
   162cc:	vcmpe.f32	s4, #0.0
   162d0:	vmrs	APSR_nzcv, fpscr
   162d4:	blt	16308 <__assert_fail@plt+0x53b4>
   162d8:	vadd.f32	s2, s4, s2
   162dc:	vcmpe.f32	s2, s0
   162e0:	vmrs	APSR_nzcv, fpscr
   162e4:	bpl	16308 <__assert_fail@plt+0x53b4>
   162e8:	vldr	s0, [r3, #4]
   162ec:	vmov.f32	s4, #112	; 0x3f800000  1.0
   162f0:	vcmpe.f32	s0, s4
   162f4:	vmrs	APSR_nzcv, fpscr
   162f8:	bhi	16308 <__assert_fail@plt+0x53b4>
   162fc:	vcmpe.f32	s2, s0
   16300:	vmrs	APSR_nzcv, fpscr
   16304:	bxmi	lr
   16308:	mov	r0, #0
   1630c:	str	r2, [r1, #20]
   16310:	bx	lr
   16314:	stclcc	12, cr12, [ip, #820]	; 0x334
   16318:	svccc	0x00666666
   1631c:	svccc	0x008ccccd
   16320:	ldrb	r2, [r1, #16]
   16324:	cmp	r2, #0
   16328:	bne	16358 <__assert_fail@plt+0x5404>
   1632c:	vldr	s0, [r1, #8]
   16330:	vldr	s4, [pc, #160]	; 163d8 <__assert_fail@plt+0x5484>
   16334:	vmov	s2, r0
   16338:	mov	r0, #0
   1633c:	vcvt.f32.u32	s2, s2
   16340:	vdiv.f32	s2, s2, s0
   16344:	vcmpe.f32	s2, s4
   16348:	vcvt.u32.f32	s0, s2
   1634c:	vmrs	APSR_nzcv, fpscr
   16350:	bxge	lr
   16354:	vmov	r0, s0
   16358:	cmp	r0, #10
   1635c:	movls	r0, #10
   16360:	orr	r0, r0, #1
   16364:	b	163bc <__assert_fail@plt+0x5468>
   16368:	mov	r1, #3
   1636c:	cmp	r0, #10
   16370:	bcc	163a8 <__assert_fail@plt+0x5454>
   16374:	mov	r1, #3
   16378:	mov	ip, #9
   1637c:	mov	r2, #12
   16380:	udiv	r3, r0, r1
   16384:	mls	r3, r3, r1, r0
   16388:	cmp	r3, #0
   1638c:	beq	163a8 <__assert_fail@plt+0x5454>
   16390:	add	r3, ip, r2
   16394:	add	r2, r2, #8
   16398:	add	r1, r1, #2
   1639c:	add	ip, r3, #4
   163a0:	cmp	ip, r0
   163a4:	bcc	16380 <__assert_fail@plt+0x542c>
   163a8:	udiv	r2, r0, r1
   163ac:	mls	r1, r2, r1, r0
   163b0:	cmp	r1, #0
   163b4:	bne	163cc <__assert_fail@plt+0x5478>
   163b8:	add	r0, r0, #2
   163bc:	cmn	r0, #1
   163c0:	bne	16368 <__assert_fail@plt+0x5414>
   163c4:	mov	r0, #0
   163c8:	bx	lr
   163cc:	cmp	r0, #536870912	; 0x20000000
   163d0:	movcs	r0, #0
   163d4:	bx	lr
   163d8:	svcmi	0x00800000
   163dc:	push	{r4, r5, r6, r7, fp, lr}
   163e0:	add	fp, sp, #16
   163e4:	mov	r4, r0
   163e8:	ldr	r5, [r0]
   163ec:	ldr	r0, [r0, #4]
   163f0:	cmp	r5, r0
   163f4:	bcs	1648c <__assert_fail@plt+0x5538>
   163f8:	mov	r6, #0
   163fc:	ldr	r1, [r5]
   16400:	cmp	r1, #0
   16404:	beq	16480 <__assert_fail@plt+0x552c>
   16408:	ldr	r1, [r4, #32]
   1640c:	ldr	r7, [r5, #4]
   16410:	cmp	r1, #0
   16414:	mov	r0, r1
   16418:	movwne	r0, #1
   1641c:	cmp	r7, #0
   16420:	beq	16464 <__assert_fail@plt+0x5510>
   16424:	tst	r0, #1
   16428:	beq	16438 <__assert_fail@plt+0x54e4>
   1642c:	ldr	r0, [r7]
   16430:	blx	r1
   16434:	ldr	r1, [r4, #32]
   16438:	str	r6, [r7]
   1643c:	cmp	r1, #0
   16440:	ldr	r0, [r4, #36]	; 0x24
   16444:	ldr	r2, [r7, #4]
   16448:	str	r0, [r7, #4]
   1644c:	mov	r0, r1
   16450:	str	r7, [r4, #36]	; 0x24
   16454:	mov	r7, r2
   16458:	movwne	r0, #1
   1645c:	cmp	r2, #0
   16460:	bne	16424 <__assert_fail@plt+0x54d0>
   16464:	cmp	r0, #0
   16468:	beq	16474 <__assert_fail@plt+0x5520>
   1646c:	ldr	r0, [r5]
   16470:	blx	r1
   16474:	str	r6, [r5]
   16478:	str	r6, [r5, #4]
   1647c:	ldr	r0, [r4, #4]
   16480:	add	r5, r5, #8
   16484:	cmp	r5, r0
   16488:	bcc	163fc <__assert_fail@plt+0x54a8>
   1648c:	mov	r0, #0
   16490:	str	r0, [r4, #12]
   16494:	str	r0, [r4, #16]
   16498:	pop	{r4, r5, r6, r7, fp, pc}
   1649c:	push	{r4, r5, r6, sl, fp, lr}
   164a0:	add	fp, sp, #16
   164a4:	mov	r4, r0
   164a8:	ldr	r0, [r0, #32]
   164ac:	cmp	r0, #0
   164b0:	ldrne	r0, [r4, #16]
   164b4:	cmpne	r0, #0
   164b8:	beq	16510 <__assert_fail@plt+0x55bc>
   164bc:	ldr	r5, [r4]
   164c0:	ldr	r1, [r4, #4]
   164c4:	b	16508 <__assert_fail@plt+0x55b4>
   164c8:	ldr	r0, [r5]
   164cc:	cmp	r0, #0
   164d0:	cmpne	r5, #0
   164d4:	beq	16504 <__assert_fail@plt+0x55b0>
   164d8:	ldr	r1, [r4, #32]
   164dc:	blx	r1
   164e0:	ldr	r6, [r5, #4]
   164e4:	b	164f8 <__assert_fail@plt+0x55a4>
   164e8:	ldr	r1, [r4, #32]
   164ec:	ldr	r0, [r6]
   164f0:	blx	r1
   164f4:	ldr	r6, [r6, #4]
   164f8:	cmp	r6, #0
   164fc:	bne	164e8 <__assert_fail@plt+0x5594>
   16500:	ldr	r1, [r4, #4]
   16504:	add	r5, r5, #8
   16508:	cmp	r5, r1
   1650c:	bcc	164c8 <__assert_fail@plt+0x5574>
   16510:	ldr	r5, [r4]
   16514:	ldr	r1, [r4, #4]
   16518:	b	16544 <__assert_fail@plt+0x55f0>
   1651c:	ldr	r0, [r5, #4]
   16520:	cmp	r0, #0
   16524:	beq	16540 <__assert_fail@plt+0x55ec>
   16528:	ldr	r6, [r0, #4]
   1652c:	bl	12fdc <__assert_fail@plt+0x2088>
   16530:	cmp	r6, #0
   16534:	mov	r0, r6
   16538:	bne	16528 <__assert_fail@plt+0x55d4>
   1653c:	ldr	r1, [r4, #4]
   16540:	add	r5, r5, #8
   16544:	cmp	r5, r1
   16548:	bcc	1651c <__assert_fail@plt+0x55c8>
   1654c:	ldr	r0, [r4, #36]	; 0x24
   16550:	cmp	r0, #0
   16554:	beq	1656c <__assert_fail@plt+0x5618>
   16558:	ldr	r5, [r0, #4]
   1655c:	bl	12fdc <__assert_fail@plt+0x2088>
   16560:	cmp	r5, #0
   16564:	mov	r0, r5
   16568:	bne	16558 <__assert_fail@plt+0x5604>
   1656c:	ldr	r0, [r4]
   16570:	bl	12fdc <__assert_fail@plt+0x2088>
   16574:	mov	r0, r4
   16578:	pop	{r4, r5, r6, sl, fp, lr}
   1657c:	b	12fdc <__assert_fail@plt+0x2088>
   16580:	push	{r4, r5, r6, r7, fp, lr}
   16584:	add	fp, sp, #16
   16588:	sub	sp, sp, #40	; 0x28
   1658c:	mov	r7, r0
   16590:	mov	r2, r1
   16594:	mov	r4, r0
   16598:	ldr	r1, [r7, #20]!
   1659c:	mov	r0, r2
   165a0:	bl	16320 <__assert_fail@plt+0x53cc>
   165a4:	mov	r5, #0
   165a8:	cmp	r0, #0
   165ac:	beq	16640 <__assert_fail@plt+0x56ec>
   165b0:	mov	r6, r0
   165b4:	ldr	r0, [r4, #8]
   165b8:	cmp	r6, r0
   165bc:	beq	1663c <__assert_fail@plt+0x56e8>
   165c0:	mov	r0, r6
   165c4:	mov	r1, #8
   165c8:	bl	16ea4 <__assert_fail@plt+0x5f50>
   165cc:	cmp	r0, #0
   165d0:	str	r0, [sp]
   165d4:	beq	16640 <__assert_fail@plt+0x56ec>
   165d8:	mov	r1, #0
   165dc:	add	r0, r0, r6, lsl #3
   165e0:	str	r6, [sp, #8]
   165e4:	mov	r5, sp
   165e8:	mov	r2, #0
   165ec:	str	r1, [sp, #12]
   165f0:	str	r1, [sp, #16]
   165f4:	str	r0, [sp, #4]
   165f8:	add	r0, r5, #20
   165fc:	mov	r1, r4
   16600:	vld1.32	{d16-d17}, [r7]
   16604:	vst1.32	{d16-d17}, [r0]
   16608:	ldr	r0, [r4, #36]	; 0x24
   1660c:	str	r0, [sp, #36]	; 0x24
   16610:	mov	r0, r5
   16614:	bl	16698 <__assert_fail@plt+0x5744>
   16618:	cmp	r0, #0
   1661c:	beq	1664c <__assert_fail@plt+0x56f8>
   16620:	ldr	r0, [r4]
   16624:	bl	12fdc <__assert_fail@plt+0x2088>
   16628:	mov	r0, #36	; 0x24
   1662c:	vld1.32	{d16-d17}, [r5], r0
   16630:	vst1.32	{d16-d17}, [r4], r0
   16634:	ldr	r0, [r5]
   16638:	str	r0, [r4]
   1663c:	mov	r5, #1
   16640:	mov	r0, r5
   16644:	sub	sp, fp, #16
   16648:	pop	{r4, r5, r6, r7, fp, pc}
   1664c:	ldr	r0, [sp, #36]	; 0x24
   16650:	mov	r1, sp
   16654:	mov	r2, #1
   16658:	str	r0, [r4, #36]	; 0x24
   1665c:	mov	r0, r4
   16660:	bl	16698 <__assert_fail@plt+0x5744>
   16664:	cmp	r0, #0
   16668:	beq	16694 <__assert_fail@plt+0x5740>
   1666c:	mov	r1, sp
   16670:	mov	r0, r4
   16674:	mov	r2, #0
   16678:	mov	r5, #0
   1667c:	bl	16698 <__assert_fail@plt+0x5744>
   16680:	cmp	r0, #0
   16684:	beq	16694 <__assert_fail@plt+0x5740>
   16688:	ldr	r0, [sp]
   1668c:	bl	12fdc <__assert_fail@plt+0x2088>
   16690:	b	16640 <__assert_fail@plt+0x56ec>
   16694:	bl	10f18 <abort@plt>
   16698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1669c:	add	fp, sp, #28
   166a0:	sub	sp, sp, #12
   166a4:	ldr	sl, [r1]
   166a8:	str	r1, [sp, #8]
   166ac:	ldr	r1, [r1, #4]
   166b0:	mov	r7, r0
   166b4:	mov	r0, #1
   166b8:	str	r2, [sp, #4]
   166bc:	cmp	sl, r1
   166c0:	bcs	1681c <__assert_fail@plt+0x58c8>
   166c4:	add	r8, r7, #36	; 0x24
   166c8:	mov	r9, #0
   166cc:	ldr	r4, [sl]
   166d0:	cmp	r4, #0
   166d4:	beq	16804 <__assert_fail@plt+0x58b0>
   166d8:	ldr	r5, [sl, #4]
   166dc:	cmp	r5, #0
   166e0:	beq	16758 <__assert_fail@plt+0x5804>
   166e4:	ldr	r1, [r7, #8]
   166e8:	ldr	r4, [r5]
   166ec:	ldr	r2, [r7, #24]
   166f0:	mov	r0, r4
   166f4:	blx	r2
   166f8:	ldr	r1, [r7, #8]
   166fc:	cmp	r0, r1
   16700:	bcs	1682c <__assert_fail@plt+0x58d8>
   16704:	ldr	r3, [r7]
   16708:	ldr	r2, [r5, #4]
   1670c:	ldr	r6, [r3, r0, lsl #3]
   16710:	cmp	r6, #0
   16714:	beq	16724 <__assert_fail@plt+0x57d0>
   16718:	add	r0, r3, r0, lsl #3
   1671c:	add	r0, r0, #4
   16720:	b	1673c <__assert_fail@plt+0x57e8>
   16724:	str	r4, [r3, r0, lsl #3]
   16728:	ldr	r0, [r7, #12]
   1672c:	add	r0, r0, #1
   16730:	str	r0, [r7, #12]
   16734:	mov	r0, r8
   16738:	str	r9, [r5]
   1673c:	ldr	r3, [r0]
   16740:	cmp	r2, #0
   16744:	str	r3, [r5, #4]
   16748:	str	r5, [r0]
   1674c:	mov	r5, r2
   16750:	bne	166e8 <__assert_fail@plt+0x5794>
   16754:	ldr	r4, [sl]
   16758:	ldr	r0, [sp, #4]
   1675c:	str	r9, [sl, #4]
   16760:	cmp	r0, #0
   16764:	bne	16804 <__assert_fail@plt+0x58b0>
   16768:	ldr	r1, [r7, #8]
   1676c:	ldr	r2, [r7, #24]
   16770:	mov	r0, r4
   16774:	blx	r2
   16778:	mov	r5, r0
   1677c:	ldr	r0, [r7, #8]
   16780:	cmp	r5, r0
   16784:	bcs	1682c <__assert_fail@plt+0x58d8>
   16788:	ldr	r6, [r7]
   1678c:	ldr	r0, [r6, r5, lsl #3]
   16790:	cmp	r0, #0
   16794:	beq	167b4 <__assert_fail@plt+0x5860>
   16798:	ldr	r0, [r8]
   1679c:	cmp	r0, #0
   167a0:	beq	167c8 <__assert_fail@plt+0x5874>
   167a4:	mov	r1, r0
   167a8:	ldr	r2, [r1, #4]!
   167ac:	str	r2, [r8]
   167b0:	b	167dc <__assert_fail@plt+0x5888>
   167b4:	str	r4, [r6, r5, lsl #3]
   167b8:	ldr	r0, [r7, #12]
   167bc:	add	r0, r0, #1
   167c0:	str	r0, [r7, #12]
   167c4:	b	167f0 <__assert_fail@plt+0x589c>
   167c8:	mov	r0, #8
   167cc:	bl	16ef8 <__assert_fail@plt+0x5fa4>
   167d0:	cmp	r0, #0
   167d4:	beq	16824 <__assert_fail@plt+0x58d0>
   167d8:	add	r1, r0, #4
   167dc:	str	r4, [r0]
   167e0:	add	r2, r6, r5, lsl #3
   167e4:	ldr	r3, [r2, #4]
   167e8:	str	r3, [r1]
   167ec:	str	r0, [r2, #4]
   167f0:	ldr	r1, [sp, #8]
   167f4:	str	r9, [sl]
   167f8:	ldr	r0, [r1, #12]
   167fc:	sub	r0, r0, #1
   16800:	str	r0, [r1, #12]
   16804:	ldr	r0, [sp, #8]
   16808:	add	sl, sl, #8
   1680c:	ldr	r0, [r0, #4]
   16810:	cmp	sl, r0
   16814:	bcc	166cc <__assert_fail@plt+0x5778>
   16818:	mov	r0, #1
   1681c:	sub	sp, fp, #28
   16820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16824:	mov	r0, #0
   16828:	b	1681c <__assert_fail@plt+0x58c8>
   1682c:	bl	10f18 <abort@plt>
   16830:	push	{r4, r5, r6, r7, fp, lr}
   16834:	add	fp, sp, #16
   16838:	sub	sp, sp, #8
   1683c:	cmp	r1, #0
   16840:	beq	169c0 <__assert_fail@plt+0x5a6c>
   16844:	mov	r7, r2
   16848:	add	r2, sp, #4
   1684c:	mov	r3, #0
   16850:	mov	r5, r1
   16854:	mov	r4, r0
   16858:	mov	r6, #0
   1685c:	bl	169c8 <__assert_fail@plt+0x5a74>
   16860:	cmp	r0, #0
   16864:	beq	16874 <__assert_fail@plt+0x5920>
   16868:	cmp	r7, #0
   1686c:	strne	r0, [r7]
   16870:	b	169ac <__assert_fail@plt+0x5a58>
   16874:	ldr	r0, [r4, #20]
   16878:	vldr	s0, [r4, #8]
   1687c:	vldr	s2, [r4, #12]
   16880:	vldr	s4, [r0, #8]
   16884:	vcvt.f32.u32	s0, s0
   16888:	vcvt.f32.u32	s2, s2
   1688c:	vmul.f32	s0, s4, s0
   16890:	vcmpe.f32	s0, s2
   16894:	vmrs	APSR_nzcv, fpscr
   16898:	bpl	1692c <__assert_fail@plt+0x59d8>
   1689c:	mov	r0, r4
   168a0:	bl	16274 <__assert_fail@plt+0x5320>
   168a4:	vldr	s0, [r4, #8]
   168a8:	ldr	r0, [r4, #20]
   168ac:	vldr	s4, [r4, #12]
   168b0:	vcvt.f32.u32	s2, s0
   168b4:	vldr	s0, [r0, #8]
   168b8:	vcvt.f32.u32	s4, s4
   168bc:	vmul.f32	s6, s0, s2
   168c0:	vcmpe.f32	s6, s4
   168c4:	vmrs	APSR_nzcv, fpscr
   168c8:	bpl	1692c <__assert_fail@plt+0x59d8>
   168cc:	vldr	s4, [r0, #12]
   168d0:	ldrb	r0, [r0, #16]
   168d4:	mvn	r6, #0
   168d8:	vmul.f32	s2, s4, s2
   168dc:	vldr	s4, [pc, #224]	; 169c4 <__assert_fail@plt+0x5a70>
   168e0:	cmp	r0, #0
   168e4:	vmul.f32	s0, s0, s2
   168e8:	vseleq.f32	s0, s0, s2
   168ec:	vcmpe.f32	s0, s4
   168f0:	vmrs	APSR_nzcv, fpscr
   168f4:	bge	169ac <__assert_fail@plt+0x5a58>
   168f8:	vcvt.u32.f32	s0, s0
   168fc:	mov	r0, r4
   16900:	vmov	r1, s0
   16904:	bl	16580 <__assert_fail@plt+0x562c>
   16908:	cmp	r0, #0
   1690c:	beq	169ac <__assert_fail@plt+0x5a58>
   16910:	add	r2, sp, #4
   16914:	mov	r0, r4
   16918:	mov	r1, r5
   1691c:	mov	r3, #0
   16920:	bl	169c8 <__assert_fail@plt+0x5a74>
   16924:	cmp	r0, #0
   16928:	bne	169c0 <__assert_fail@plt+0x5a6c>
   1692c:	ldr	r6, [sp, #4]
   16930:	ldr	r0, [r6]
   16934:	cmp	r0, #0
   16938:	beq	16958 <__assert_fail@plt+0x5a04>
   1693c:	ldr	r0, [r4, #36]	; 0x24
   16940:	cmp	r0, #0
   16944:	beq	16978 <__assert_fail@plt+0x5a24>
   16948:	mov	r1, r0
   1694c:	ldr	r2, [r1, #4]!
   16950:	str	r2, [r4, #36]	; 0x24
   16954:	b	1698c <__assert_fail@plt+0x5a38>
   16958:	str	r5, [r6]
   1695c:	ldr	r0, [r4, #12]
   16960:	ldr	r1, [r4, #16]
   16964:	add	r0, r0, #1
   16968:	add	r1, r1, #1
   1696c:	str	r0, [r4, #12]
   16970:	str	r1, [r4, #16]
   16974:	b	169a8 <__assert_fail@plt+0x5a54>
   16978:	mov	r0, #8
   1697c:	bl	16ef8 <__assert_fail@plt+0x5fa4>
   16980:	cmp	r0, #0
   16984:	beq	169b8 <__assert_fail@plt+0x5a64>
   16988:	add	r1, r0, #4
   1698c:	str	r5, [r0]
   16990:	ldr	r2, [r6, #4]
   16994:	str	r2, [r1]
   16998:	str	r0, [r6, #4]
   1699c:	ldr	r0, [r4, #16]
   169a0:	add	r0, r0, #1
   169a4:	str	r0, [r4, #16]
   169a8:	mov	r6, #1
   169ac:	mov	r0, r6
   169b0:	sub	sp, fp, #16
   169b4:	pop	{r4, r5, r6, r7, fp, pc}
   169b8:	mvn	r6, #0
   169bc:	b	169ac <__assert_fail@plt+0x5a58>
   169c0:	bl	10f18 <abort@plt>
   169c4:	svcmi	0x00800000
   169c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   169cc:	add	fp, sp, #24
   169d0:	mov	r7, r2
   169d4:	mov	r4, r1
   169d8:	ldr	r1, [r0, #8]
   169dc:	ldr	r2, [r0, #24]
   169e0:	mov	r5, r0
   169e4:	mov	r8, r3
   169e8:	mov	r0, r4
   169ec:	blx	r2
   169f0:	ldr	r1, [r5, #8]
   169f4:	cmp	r0, r1
   169f8:	bcs	16af4 <__assert_fail@plt+0x5ba0>
   169fc:	ldr	r1, [r5]
   16a00:	add	r6, r1, r0, lsl #3
   16a04:	str	r6, [r7]
   16a08:	ldr	r1, [r1, r0, lsl #3]
   16a0c:	cmp	r1, #0
   16a10:	beq	16aa8 <__assert_fail@plt+0x5b54>
   16a14:	cmp	r1, r4
   16a18:	beq	16a34 <__assert_fail@plt+0x5ae0>
   16a1c:	ldr	r2, [r5, #28]
   16a20:	mov	r0, r4
   16a24:	blx	r2
   16a28:	cmp	r0, #0
   16a2c:	beq	16a68 <__assert_fail@plt+0x5b14>
   16a30:	ldr	r4, [r6]
   16a34:	cmp	r8, #0
   16a38:	beq	16aac <__assert_fail@plt+0x5b58>
   16a3c:	ldr	r0, [r6, #4]
   16a40:	cmp	r0, #0
   16a44:	beq	16ab4 <__assert_fail@plt+0x5b60>
   16a48:	ldm	r0, {r1, r2}
   16a4c:	stm	r6, {r1, r2}
   16a50:	mov	r1, #0
   16a54:	str	r1, [r0]
   16a58:	ldr	r1, [r5, #36]	; 0x24
   16a5c:	str	r1, [r0, #4]
   16a60:	str	r0, [r5, #36]	; 0x24
   16a64:	b	16aac <__assert_fail@plt+0x5b58>
   16a68:	ldr	r0, [r6, #4]!
   16a6c:	cmp	r0, #0
   16a70:	beq	16aa8 <__assert_fail@plt+0x5b54>
   16a74:	ldr	r1, [r0]
   16a78:	cmp	r1, r4
   16a7c:	beq	16ac0 <__assert_fail@plt+0x5b6c>
   16a80:	ldr	r2, [r5, #28]
   16a84:	mov	r0, r4
   16a88:	blx	r2
   16a8c:	ldr	r1, [r6]
   16a90:	cmp	r0, #0
   16a94:	bne	16ac8 <__assert_fail@plt+0x5b74>
   16a98:	ldr	r0, [r1, #4]!
   16a9c:	cmp	r0, #0
   16aa0:	mov	r6, r1
   16aa4:	bne	16a74 <__assert_fail@plt+0x5b20>
   16aa8:	mov	r4, #0
   16aac:	mov	r0, r4
   16ab0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16ab4:	mov	r0, #0
   16ab8:	str	r0, [r6]
   16abc:	b	16aac <__assert_fail@plt+0x5b58>
   16ac0:	mov	r1, r0
   16ac4:	b	16acc <__assert_fail@plt+0x5b78>
   16ac8:	ldr	r4, [r1]
   16acc:	cmp	r8, #0
   16ad0:	beq	16aac <__assert_fail@plt+0x5b58>
   16ad4:	ldr	r0, [r1, #4]
   16ad8:	str	r0, [r6]
   16adc:	mov	r0, #0
   16ae0:	str	r0, [r1]
   16ae4:	ldr	r0, [r5, #36]	; 0x24
   16ae8:	str	r0, [r1, #4]
   16aec:	str	r1, [r5, #36]	; 0x24
   16af0:	b	16aac <__assert_fail@plt+0x5b58>
   16af4:	bl	10f18 <abort@plt>
   16af8:	push	{r4, sl, fp, lr}
   16afc:	add	fp, sp, #8
   16b00:	sub	sp, sp, #8
   16b04:	add	r2, sp, #4
   16b08:	mov	r4, r1
   16b0c:	bl	16830 <__assert_fail@plt+0x58dc>
   16b10:	cmn	r0, #1
   16b14:	beq	16b28 <__assert_fail@plt+0x5bd4>
   16b18:	ldr	r1, [sp, #4]
   16b1c:	cmp	r0, #0
   16b20:	moveq	r4, r1
   16b24:	b	16b2c <__assert_fail@plt+0x5bd8>
   16b28:	mov	r4, #0
   16b2c:	mov	r0, r4
   16b30:	sub	sp, fp, #8
   16b34:	pop	{r4, sl, fp, pc}
   16b38:	push	{r4, r5, r6, sl, fp, lr}
   16b3c:	add	fp, sp, #16
   16b40:	sub	sp, sp, #8
   16b44:	add	r2, sp, #4
   16b48:	mov	r3, #1
   16b4c:	mov	r4, r0
   16b50:	bl	169c8 <__assert_fail@plt+0x5a74>
   16b54:	mov	r5, r0
   16b58:	cmp	r0, #0
   16b5c:	beq	16c38 <__assert_fail@plt+0x5ce4>
   16b60:	ldr	r0, [r4, #16]
   16b64:	sub	r0, r0, #1
   16b68:	str	r0, [r4, #16]
   16b6c:	ldr	r0, [sp, #4]
   16b70:	ldr	r0, [r0]
   16b74:	cmp	r0, #0
   16b78:	bne	16c38 <__assert_fail@plt+0x5ce4>
   16b7c:	ldr	r0, [r4, #12]
   16b80:	vldr	s0, [r4, #8]
   16b84:	sub	r0, r0, #1
   16b88:	str	r0, [r4, #12]
   16b8c:	vmov	s4, r0
   16b90:	ldr	r1, [r4, #20]
   16b94:	vldr	s2, [r1]
   16b98:	vcvt.f32.u32	s0, s0
   16b9c:	vcvt.f32.u32	s4, s4
   16ba0:	vmul.f32	s0, s2, s0
   16ba4:	vcmpe.f32	s0, s4
   16ba8:	vmrs	APSR_nzcv, fpscr
   16bac:	ble	16c38 <__assert_fail@plt+0x5ce4>
   16bb0:	mov	r0, r4
   16bb4:	bl	16274 <__assert_fail@plt+0x5320>
   16bb8:	vldr	s0, [r4, #8]
   16bbc:	ldr	r0, [r4, #20]
   16bc0:	vldr	s2, [r4, #12]
   16bc4:	vcvt.f32.u32	s0, s0
   16bc8:	vldr	s4, [r0]
   16bcc:	vcvt.f32.u32	s2, s2
   16bd0:	vmul.f32	s4, s4, s0
   16bd4:	vcmpe.f32	s4, s2
   16bd8:	vmrs	APSR_nzcv, fpscr
   16bdc:	ble	16c38 <__assert_fail@plt+0x5ce4>
   16be0:	ldrb	r1, [r0, #16]
   16be4:	vldr	s2, [r0, #4]
   16be8:	cmp	r1, #0
   16bec:	vmul.f32	s0, s2, s0
   16bf0:	vldreq	s2, [r0, #8]
   16bf4:	mov	r0, r4
   16bf8:	vmuleq.f32	s0, s0, s2
   16bfc:	vcvt.u32.f32	s0, s0
   16c00:	vmov	r1, s0
   16c04:	bl	16580 <__assert_fail@plt+0x562c>
   16c08:	cmp	r0, #0
   16c0c:	bne	16c38 <__assert_fail@plt+0x5ce4>
   16c10:	ldr	r0, [r4, #36]	; 0x24
   16c14:	cmp	r0, #0
   16c18:	beq	16c30 <__assert_fail@plt+0x5cdc>
   16c1c:	ldr	r6, [r0, #4]
   16c20:	bl	12fdc <__assert_fail@plt+0x2088>
   16c24:	cmp	r6, #0
   16c28:	mov	r0, r6
   16c2c:	bne	16c1c <__assert_fail@plt+0x5cc8>
   16c30:	mov	r0, #0
   16c34:	str	r0, [r4, #36]	; 0x24
   16c38:	mov	r0, r5
   16c3c:	sub	sp, fp, #16
   16c40:	pop	{r4, r5, r6, sl, fp, pc}
   16c44:	b	16b38 <__assert_fail@plt+0x5be4>
   16c48:	mov	r3, #1
   16c4c:	mov	r2, #0
   16c50:	vdup.32	q8, r1
   16c54:	strb	r3, [r0, #28]
   16c58:	str	r2, [r0, #20]
   16c5c:	str	r2, [r0, #24]
   16c60:	add	r3, r0, r2
   16c64:	add	r2, r2, #16
   16c68:	cmp	r2, #16
   16c6c:	vst1.32	{d16-d17}, [r3]
   16c70:	bne	16c60 <__assert_fail@plt+0x5d0c>
   16c74:	str	r1, [r0, #16]
   16c78:	bx	lr
   16c7c:	ldrb	r0, [r0, #28]
   16c80:	bx	lr
   16c84:	push	{fp, lr}
   16c88:	mov	fp, sp
   16c8c:	ldrb	r3, [r0, #28]
   16c90:	ldr	r2, [r0, #20]
   16c94:	eor	lr, r3, #1
   16c98:	add	r2, r2, lr
   16c9c:	and	r3, r2, #3
   16ca0:	ldr	ip, [r0, r3, lsl #2]
   16ca4:	str	r1, [r0, r3, lsl #2]
   16ca8:	str	r3, [r0, #20]
   16cac:	ldr	r1, [r0, #24]
   16cb0:	cmp	r3, r1
   16cb4:	addeq	r1, r2, lr
   16cb8:	andeq	r1, r1, #3
   16cbc:	streq	r1, [r0, #24]
   16cc0:	mov	r1, #0
   16cc4:	strb	r1, [r0, #28]
   16cc8:	mov	r0, ip
   16ccc:	pop	{fp, pc}
   16cd0:	ldrb	r1, [r0, #28]
   16cd4:	cmp	r1, #0
   16cd8:	bne	16d1c <__assert_fail@plt+0x5dc8>
   16cdc:	ldr	r3, [r0, #20]
   16ce0:	ldr	r2, [r0, #16]
   16ce4:	ldr	r1, [r0, r3, lsl #2]
   16ce8:	str	r2, [r0, r3, lsl #2]
   16cec:	ldr	r2, [r0, #20]
   16cf0:	ldr	r3, [r0, #24]
   16cf4:	cmp	r2, r3
   16cf8:	bne	16d08 <__assert_fail@plt+0x5db4>
   16cfc:	mov	r2, #1
   16d00:	strb	r2, [r0, #28]
   16d04:	b	16d14 <__assert_fail@plt+0x5dc0>
   16d08:	sub	r2, r2, #1
   16d0c:	and	r2, r2, #3
   16d10:	str	r2, [r0, #20]
   16d14:	mov	r0, r1
   16d18:	bx	lr
   16d1c:	push	{fp, lr}
   16d20:	mov	fp, sp
   16d24:	bl	10f18 <abort@plt>
   16d28:	push	{r4, r5, r6, sl, fp, lr}
   16d2c:	add	fp, sp, #16
   16d30:	mov	r5, r0
   16d34:	mov	r0, #0
   16d38:	mov	r4, r1
   16d3c:	add	r6, r2, #19
   16d40:	strb	r0, [r2, #20]
   16d44:	mov	r0, r5
   16d48:	mov	r1, r4
   16d4c:	mov	r2, #10
   16d50:	mov	r3, #0
   16d54:	bl	17364 <__assert_fail@plt+0x6410>
   16d58:	add	r2, r0, r0, lsl #2
   16d5c:	sub	r2, r5, r2, lsl #1
   16d60:	orr	r2, r2, #48	; 0x30
   16d64:	strb	r2, [r6], #-1
   16d68:	rsbs	r2, r5, #9
   16d6c:	mov	r5, r0
   16d70:	rscs	r2, r4, #0
   16d74:	mov	r4, r1
   16d78:	bcc	16d44 <__assert_fail@plt+0x5df0>
   16d7c:	add	r0, r6, #1
   16d80:	pop	{r4, r5, r6, sl, fp, pc}
   16d84:	sub	sp, sp, #8
   16d88:	push	{fp, lr}
   16d8c:	mov	fp, sp
   16d90:	sub	sp, sp, #8
   16d94:	str	r2, [fp, #8]
   16d98:	add	r2, fp, #8
   16d9c:	str	r3, [fp, #12]
   16da0:	orr	r2, r2, #4
   16da4:	str	r2, [sp, #4]
   16da8:	ldr	r2, [fp, #8]
   16dac:	bl	10db0 <ioctl@plt>
   16db0:	mov	sp, fp
   16db4:	pop	{fp, lr}
   16db8:	add	sp, sp, #8
   16dbc:	bx	lr
   16dc0:	sub	sp, sp, #4
   16dc4:	push	{fp, lr}
   16dc8:	mov	fp, sp
   16dcc:	sub	sp, sp, #4
   16dd0:	str	r3, [fp, #8]
   16dd4:	mov	r3, #0
   16dd8:	tst	r2, #64	; 0x40
   16ddc:	addne	r3, fp, #8
   16de0:	addne	r3, r3, #4
   16de4:	strne	r3, [sp]
   16de8:	ldrne	r3, [fp, #8]
   16dec:	bl	10e34 <openat64@plt>
   16df0:	bl	16e60 <__assert_fail@plt+0x5f0c>
   16df4:	mov	sp, fp
   16df8:	pop	{fp, lr}
   16dfc:	add	sp, sp, #4
   16e00:	bx	lr
   16e04:	push	{r4, r5, r6, sl, fp, lr}
   16e08:	add	fp, sp, #16
   16e0c:	orr	r2, r2, #18688	; 0x4900
   16e10:	mov	r4, r3
   16e14:	orr	r2, r2, #524288	; 0x80000
   16e18:	bl	16dc0 <__assert_fail@plt+0x5e6c>
   16e1c:	mov	r5, r0
   16e20:	mov	r0, #0
   16e24:	cmp	r5, #0
   16e28:	poplt	{r4, r5, r6, sl, fp, pc}
   16e2c:	mov	r0, r5
   16e30:	bl	10eac <fdopendir@plt>
   16e34:	cmp	r0, #0
   16e38:	strne	r5, [r4]
   16e3c:	popne	{r4, r5, r6, sl, fp, pc}
   16e40:	bl	10e4c <__errno_location@plt>
   16e44:	ldr	r6, [r0]
   16e48:	mov	r4, r0
   16e4c:	mov	r0, r5
   16e50:	bl	10f24 <close@plt>
   16e54:	mov	r0, #0
   16e58:	str	r6, [r4]
   16e5c:	pop	{r4, r5, r6, sl, fp, pc}
   16e60:	push	{r4, r5, r6, r7, fp, lr}
   16e64:	add	fp, sp, #16
   16e68:	mov	r4, r0
   16e6c:	cmp	r0, #2
   16e70:	movhi	r0, r4
   16e74:	pophi	{r4, r5, r6, r7, fp, pc}
   16e78:	mov	r0, r4
   16e7c:	bl	17284 <__assert_fail@plt+0x6330>
   16e80:	mov	r5, r0
   16e84:	bl	10e4c <__errno_location@plt>
   16e88:	ldr	r7, [r0]
   16e8c:	mov	r6, r0
   16e90:	mov	r0, r4
   16e94:	bl	10f24 <close@plt>
   16e98:	mov	r0, r5
   16e9c:	str	r7, [r6]
   16ea0:	pop	{r4, r5, r6, r7, fp, pc}
   16ea4:	clz	r2, r1
   16ea8:	clz	r3, r0
   16eac:	lsr	r2, r2, #5
   16eb0:	lsr	r3, r3, #5
   16eb4:	orrs	r2, r3, r2
   16eb8:	movwne	r1, #1
   16ebc:	movwne	r0, #1
   16ec0:	cmp	r1, #0
   16ec4:	beq	16ef4 <__assert_fail@plt+0x5fa0>
   16ec8:	mvn	r2, #-2147483648	; 0x80000000
   16ecc:	udiv	r2, r2, r1
   16ed0:	cmp	r2, r0
   16ed4:	bcs	16ef4 <__assert_fail@plt+0x5fa0>
   16ed8:	push	{fp, lr}
   16edc:	mov	fp, sp
   16ee0:	bl	10e4c <__errno_location@plt>
   16ee4:	mov	r1, #12
   16ee8:	str	r1, [r0]
   16eec:	mov	r0, #0
   16ef0:	pop	{fp, pc}
   16ef4:	b	10ce4 <calloc@plt>
   16ef8:	cmp	r0, #0
   16efc:	movweq	r0, #1
   16f00:	cmn	r0, #1
   16f04:	ble	16f0c <__assert_fail@plt+0x5fb8>
   16f08:	b	10de0 <malloc@plt>
   16f0c:	push	{fp, lr}
   16f10:	mov	fp, sp
   16f14:	bl	10e4c <__errno_location@plt>
   16f18:	mov	r1, #12
   16f1c:	str	r1, [r0]
   16f20:	mov	r0, #0
   16f24:	pop	{fp, pc}
   16f28:	push	{fp, lr}
   16f2c:	mov	fp, sp
   16f30:	cmp	r0, #0
   16f34:	beq	16f50 <__assert_fail@plt+0x5ffc>
   16f38:	cmp	r1, #0
   16f3c:	beq	16f5c <__assert_fail@plt+0x6008>
   16f40:	cmn	r1, #1
   16f44:	ble	16f64 <__assert_fail@plt+0x6010>
   16f48:	pop	{fp, lr}
   16f4c:	b	10d68 <realloc@plt>
   16f50:	mov	r0, r1
   16f54:	pop	{fp, lr}
   16f58:	b	16ef8 <__assert_fail@plt+0x5fa4>
   16f5c:	bl	12fdc <__assert_fail@plt+0x2088>
   16f60:	b	16f70 <__assert_fail@plt+0x601c>
   16f64:	bl	10e4c <__errno_location@plt>
   16f68:	mov	r1, #12
   16f6c:	str	r1, [r0]
   16f70:	mov	r0, #0
   16f74:	pop	{fp, pc}
   16f78:	movw	r2, #62998	; 0xf616
   16f7c:	mov	r1, #0
   16f80:	movt	r2, #149	; 0x95
   16f84:	str	r1, [r0, #16]
   16f88:	str	r1, [r0, #20]
   16f8c:	str	r2, [r0, #24]
   16f90:	bx	lr
   16f94:	push	{r4, r5, r6, r7, fp, lr}
   16f98:	add	fp, sp, #16
   16f9c:	ldr	r2, [r0, #24]
   16fa0:	movw	r3, #62998	; 0xf616
   16fa4:	movt	r3, #149	; 0x95
   16fa8:	cmp	r2, r3
   16fac:	bne	17044 <__assert_fail@plt+0x60f0>
   16fb0:	mov	r3, r0
   16fb4:	ldr	r2, [r3, #16]!
   16fb8:	ldr	lr, [r3, #4]
   16fbc:	orrs	r5, r2, lr
   16fc0:	beq	16ff8 <__assert_fail@plt+0x60a4>
   16fc4:	ldrd	r4, [r0]
   16fc8:	ldrd	r6, [r1, #96]	; 0x60
   16fcc:	eor	r7, r7, r5
   16fd0:	eor	r6, r6, r4
   16fd4:	orrs	r7, r6, r7
   16fd8:	bne	16ff8 <__assert_fail@plt+0x60a4>
   16fdc:	ldrd	r4, [r0, #8]
   16fe0:	ldrd	r6, [r1]
   16fe4:	mov	ip, #1
   16fe8:	eor	r7, r7, r5
   16fec:	eor	r6, r6, r4
   16ff0:	orrs	r7, r6, r7
   16ff4:	beq	1703c <__assert_fail@plt+0x60e8>
   16ff8:	adds	r4, r2, #1
   16ffc:	mov	ip, #0
   17000:	adc	r5, lr, #0
   17004:	and	r2, r4, r2
   17008:	strd	r4, [r3]
   1700c:	and	r3, r5, lr
   17010:	orrs	r2, r2, r3
   17014:	bne	1703c <__assert_fail@plt+0x60e8>
   17018:	orrs	r2, r4, r5
   1701c:	beq	17038 <__assert_fail@plt+0x60e4>
   17020:	ldrd	r2, [r1]
   17024:	str	r3, [r0, #12]
   17028:	str	r2, [r0, #8]
   1702c:	ldrd	r2, [r1, #96]	; 0x60
   17030:	stm	r0, {r2, r3}
   17034:	b	1703c <__assert_fail@plt+0x60e8>
   17038:	mov	ip, #1
   1703c:	mov	r0, ip
   17040:	pop	{r4, r5, r6, r7, fp, pc}
   17044:	movw	r0, #30876	; 0x789c
   17048:	movw	r1, #30900	; 0x78b4
   1704c:	movw	r3, #30914	; 0x78c2
   17050:	mov	r2, #60	; 0x3c
   17054:	movt	r0, #1
   17058:	movt	r1, #1
   1705c:	movt	r3, #1
   17060:	bl	10f54 <__assert_fail@plt>
   17064:	sub	sp, sp, #8
   17068:	push	{r4, r5, r6, r7, fp, lr}
   1706c:	add	fp, sp, #16
   17070:	sub	sp, sp, #8
   17074:	mov	r5, r0
   17078:	add	r0, fp, #8
   1707c:	cmp	r1, #11
   17080:	str	r3, [fp, #12]
   17084:	str	r2, [fp, #8]
   17088:	str	r0, [sp, #4]
   1708c:	bhi	170c8 <__assert_fail@plt+0x6174>
   17090:	mov	r0, #1
   17094:	movw	r2, #1300	; 0x514
   17098:	tst	r2, r0, lsl r1
   1709c:	bne	17180 <__assert_fail@plt+0x622c>
   170a0:	movw	r2, #2570	; 0xa0a
   170a4:	tst	r2, r0, lsl r1
   170a8:	bne	170f0 <__assert_fail@plt+0x619c>
   170ac:	cmp	r1, #0
   170b0:	bne	170c8 <__assert_fail@plt+0x6174>
   170b4:	ldr	r0, [sp, #4]
   170b8:	add	r1, r0, #4
   170bc:	str	r1, [sp, #4]
   170c0:	mov	r1, #0
   170c4:	b	1718c <__assert_fail@plt+0x6238>
   170c8:	sub	r0, r1, #1024	; 0x400
   170cc:	cmp	r0, #10
   170d0:	bhi	17180 <__assert_fail@plt+0x622c>
   170d4:	mov	r2, #1
   170d8:	movw	r3, #645	; 0x285
   170dc:	tst	r3, r2, lsl r0
   170e0:	bne	17180 <__assert_fail@plt+0x622c>
   170e4:	movw	r3, #1282	; 0x502
   170e8:	tst	r3, r2, lsl r0
   170ec:	beq	170fc <__assert_fail@plt+0x61a8>
   170f0:	mov	r0, r5
   170f4:	bl	10e7c <fcntl64@plt>
   170f8:	b	17198 <__assert_fail@plt+0x6244>
   170fc:	cmp	r0, #6
   17100:	bne	17180 <__assert_fail@plt+0x622c>
   17104:	ldr	r0, [sp, #4]
   17108:	movw	r7, #33104	; 0x8150
   1710c:	movt	r7, #2
   17110:	add	r1, r0, #4
   17114:	str	r1, [sp, #4]
   17118:	ldr	r6, [r0]
   1711c:	ldr	r0, [r7]
   17120:	cmp	r0, #0
   17124:	blt	171bc <__assert_fail@plt+0x6268>
   17128:	mov	r0, r5
   1712c:	movw	r1, #1030	; 0x406
   17130:	mov	r2, r6
   17134:	bl	10e7c <fcntl64@plt>
   17138:	mov	r4, r0
   1713c:	cmn	r0, #1
   17140:	bgt	171b0 <__assert_fail@plt+0x625c>
   17144:	bl	10e4c <__errno_location@plt>
   17148:	ldr	r0, [r0]
   1714c:	cmp	r0, #22
   17150:	bne	171b0 <__assert_fail@plt+0x625c>
   17154:	mov	r0, r5
   17158:	mov	r1, #0
   1715c:	mov	r2, r6
   17160:	bl	10e7c <fcntl64@plt>
   17164:	mov	r4, r0
   17168:	cmp	r0, #0
   1716c:	blt	1719c <__assert_fail@plt+0x6248>
   17170:	mvn	r0, #0
   17174:	str	r0, [r7]
   17178:	mov	r0, #1
   1717c:	b	171e0 <__assert_fail@plt+0x628c>
   17180:	ldr	r0, [sp, #4]
   17184:	add	r2, r0, #4
   17188:	str	r2, [sp, #4]
   1718c:	ldr	r2, [r0]
   17190:	mov	r0, r5
   17194:	bl	10e7c <fcntl64@plt>
   17198:	mov	r4, r0
   1719c:	mov	r0, r4
   171a0:	sub	sp, fp, #16
   171a4:	pop	{r4, r5, r6, r7, fp, lr}
   171a8:	add	sp, sp, #8
   171ac:	bx	lr
   171b0:	mov	r0, #1
   171b4:	str	r0, [r7]
   171b8:	b	1719c <__assert_fail@plt+0x6248>
   171bc:	mov	r0, r5
   171c0:	mov	r1, #0
   171c4:	mov	r2, r6
   171c8:	bl	10e7c <fcntl64@plt>
   171cc:	mov	r4, r0
   171d0:	ldr	r0, [r7]
   171d4:	add	r0, r0, #1
   171d8:	clz	r0, r0
   171dc:	lsr	r0, r0, #5
   171e0:	cmp	r0, #0
   171e4:	beq	1719c <__assert_fail@plt+0x6248>
   171e8:	cmp	r4, #0
   171ec:	blt	1719c <__assert_fail@plt+0x6248>
   171f0:	mov	r0, r4
   171f4:	mov	r1, #1
   171f8:	bl	10e7c <fcntl64@plt>
   171fc:	cmp	r0, #0
   17200:	blt	1721c <__assert_fail@plt+0x62c8>
   17204:	orr	r2, r0, #1
   17208:	mov	r0, r4
   1720c:	mov	r1, #2
   17210:	bl	10e7c <fcntl64@plt>
   17214:	cmn	r0, #1
   17218:	bne	1719c <__assert_fail@plt+0x6248>
   1721c:	bl	10e4c <__errno_location@plt>
   17220:	ldr	r6, [r0]
   17224:	mov	r5, r0
   17228:	mov	r0, r4
   1722c:	bl	10f24 <close@plt>
   17230:	str	r6, [r5]
   17234:	mvn	r4, #0
   17238:	b	1719c <__assert_fail@plt+0x6248>
   1723c:	sub	sp, sp, #8
   17240:	push	{fp, lr}
   17244:	mov	fp, sp
   17248:	sub	sp, sp, #8
   1724c:	str	r2, [fp, #8]
   17250:	mov	r2, #0
   17254:	tst	r1, #64	; 0x40
   17258:	str	r3, [fp, #12]
   1725c:	addne	r2, fp, #8
   17260:	orrne	r2, r2, #4
   17264:	strne	r2, [sp, #4]
   17268:	ldrne	r2, [fp, #8]
   1726c:	bl	10dc8 <open64@plt>
   17270:	bl	16e60 <__assert_fail@plt+0x5f0c>
   17274:	mov	sp, fp
   17278:	pop	{fp, lr}
   1727c:	add	sp, sp, #8
   17280:	bx	lr
   17284:	mov	r1, #0
   17288:	mov	r2, #3
   1728c:	b	17064 <__assert_fail@plt+0x6110>
   17290:	cmp	r3, #0
   17294:	cmpeq	r2, #0
   17298:	bne	172bc <__assert_fail@plt+0x6368>
   1729c:	cmp	r1, #0
   172a0:	movlt	r1, #-2147483648	; 0x80000000
   172a4:	movlt	r0, #0
   172a8:	blt	172b8 <__assert_fail@plt+0x6364>
   172ac:	cmpeq	r0, #0
   172b0:	mvnne	r1, #-2147483648	; 0x80000000
   172b4:	mvnne	r0, #0
   172b8:	b	173a0 <__assert_fail@plt+0x644c>
   172bc:	sub	sp, sp, #8
   172c0:	push	{sp, lr}
   172c4:	cmp	r1, #0
   172c8:	blt	172e8 <__assert_fail@plt+0x6394>
   172cc:	cmp	r3, #0
   172d0:	blt	1731c <__assert_fail@plt+0x63c8>
   172d4:	bl	173b0 <__assert_fail@plt+0x645c>
   172d8:	ldr	lr, [sp, #4]
   172dc:	add	sp, sp, #8
   172e0:	pop	{r2, r3}
   172e4:	bx	lr
   172e8:	rsbs	r0, r0, #0
   172ec:	sbc	r1, r1, r1, lsl #1
   172f0:	cmp	r3, #0
   172f4:	blt	17340 <__assert_fail@plt+0x63ec>
   172f8:	bl	173b0 <__assert_fail@plt+0x645c>
   172fc:	ldr	lr, [sp, #4]
   17300:	add	sp, sp, #8
   17304:	pop	{r2, r3}
   17308:	rsbs	r0, r0, #0
   1730c:	sbc	r1, r1, r1, lsl #1
   17310:	rsbs	r2, r2, #0
   17314:	sbc	r3, r3, r3, lsl #1
   17318:	bx	lr
   1731c:	rsbs	r2, r2, #0
   17320:	sbc	r3, r3, r3, lsl #1
   17324:	bl	173b0 <__assert_fail@plt+0x645c>
   17328:	ldr	lr, [sp, #4]
   1732c:	add	sp, sp, #8
   17330:	pop	{r2, r3}
   17334:	rsbs	r0, r0, #0
   17338:	sbc	r1, r1, r1, lsl #1
   1733c:	bx	lr
   17340:	rsbs	r2, r2, #0
   17344:	sbc	r3, r3, r3, lsl #1
   17348:	bl	173b0 <__assert_fail@plt+0x645c>
   1734c:	ldr	lr, [sp, #4]
   17350:	add	sp, sp, #8
   17354:	pop	{r2, r3}
   17358:	rsbs	r2, r2, #0
   1735c:	sbc	r3, r3, r3, lsl #1
   17360:	bx	lr
   17364:	cmp	r3, #0
   17368:	cmpeq	r2, #0
   1736c:	bne	17384 <__assert_fail@plt+0x6430>
   17370:	cmp	r1, #0
   17374:	cmpeq	r0, #0
   17378:	mvnne	r1, #0
   1737c:	mvnne	r0, #0
   17380:	b	173a0 <__assert_fail@plt+0x644c>
   17384:	sub	sp, sp, #8
   17388:	push	{sp, lr}
   1738c:	bl	173b0 <__assert_fail@plt+0x645c>
   17390:	ldr	lr, [sp, #4]
   17394:	add	sp, sp, #8
   17398:	pop	{r2, r3}
   1739c:	bx	lr
   173a0:	push	{r1, lr}
   173a4:	mov	r0, #8
   173a8:	bl	10cf0 <raise@plt>
   173ac:	pop	{r1, pc}
   173b0:	cmp	r1, r3
   173b4:	cmpeq	r0, r2
   173b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173bc:	mov	r4, r0
   173c0:	movcc	r0, #0
   173c4:	mov	r5, r1
   173c8:	ldr	lr, [sp, #36]	; 0x24
   173cc:	movcc	r1, r0
   173d0:	bcc	174cc <__assert_fail@plt+0x6578>
   173d4:	cmp	r3, #0
   173d8:	clzeq	ip, r2
   173dc:	clzne	ip, r3
   173e0:	addeq	ip, ip, #32
   173e4:	cmp	r5, #0
   173e8:	clzeq	r1, r4
   173ec:	addeq	r1, r1, #32
   173f0:	clzne	r1, r5
   173f4:	sub	ip, ip, r1
   173f8:	sub	sl, ip, #32
   173fc:	lsl	r9, r3, ip
   17400:	rsb	fp, ip, #32
   17404:	orr	r9, r9, r2, lsl sl
   17408:	orr	r9, r9, r2, lsr fp
   1740c:	lsl	r8, r2, ip
   17410:	cmp	r5, r9
   17414:	cmpeq	r4, r8
   17418:	movcc	r0, #0
   1741c:	movcc	r1, r0
   17420:	bcc	1743c <__assert_fail@plt+0x64e8>
   17424:	mov	r0, #1
   17428:	subs	r4, r4, r8
   1742c:	lsl	r1, r0, sl
   17430:	orr	r1, r1, r0, lsr fp
   17434:	lsl	r0, r0, ip
   17438:	sbc	r5, r5, r9
   1743c:	cmp	ip, #0
   17440:	beq	174cc <__assert_fail@plt+0x6578>
   17444:	lsr	r6, r8, #1
   17448:	orr	r6, r6, r9, lsl #31
   1744c:	lsr	r7, r9, #1
   17450:	mov	r2, ip
   17454:	b	17478 <__assert_fail@plt+0x6524>
   17458:	subs	r3, r4, r6
   1745c:	sbc	r8, r5, r7
   17460:	adds	r3, r3, r3
   17464:	adc	r8, r8, r8
   17468:	adds	r4, r3, #1
   1746c:	adc	r5, r8, #0
   17470:	subs	r2, r2, #1
   17474:	beq	17494 <__assert_fail@plt+0x6540>
   17478:	cmp	r5, r7
   1747c:	cmpeq	r4, r6
   17480:	bcs	17458 <__assert_fail@plt+0x6504>
   17484:	adds	r4, r4, r4
   17488:	adc	r5, r5, r5
   1748c:	subs	r2, r2, #1
   17490:	bne	17478 <__assert_fail@plt+0x6524>
   17494:	lsr	r3, r4, ip
   17498:	orr	r3, r3, r5, lsl fp
   1749c:	lsr	r2, r5, ip
   174a0:	orr	r3, r3, r5, lsr sl
   174a4:	adds	r0, r0, r4
   174a8:	mov	r4, r3
   174ac:	lsl	r3, r2, ip
   174b0:	orr	r3, r3, r4, lsl sl
   174b4:	lsl	ip, r4, ip
   174b8:	orr	r3, r3, r4, lsr fp
   174bc:	adc	r1, r1, r5
   174c0:	subs	r0, r0, ip
   174c4:	mov	r5, r2
   174c8:	sbc	r1, r1, r3
   174cc:	cmp	lr, #0
   174d0:	strdne	r4, [lr]
   174d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174dc:	mov	r7, r0
   174e0:	ldr	r6, [pc, #72]	; 17530 <__assert_fail@plt+0x65dc>
   174e4:	ldr	r5, [pc, #72]	; 17534 <__assert_fail@plt+0x65e0>
   174e8:	add	r6, pc, r6
   174ec:	add	r5, pc, r5
   174f0:	sub	r6, r6, r5
   174f4:	mov	r8, r1
   174f8:	mov	r9, r2
   174fc:	bl	10cb8 <fstatfs64@plt-0x20>
   17500:	asrs	r6, r6, #2
   17504:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17508:	mov	r4, #0
   1750c:	add	r4, r4, #1
   17510:	ldr	r3, [r5], #4
   17514:	mov	r2, r9
   17518:	mov	r1, r8
   1751c:	mov	r0, r7
   17520:	blx	r3
   17524:	cmp	r6, r4
   17528:	bne	1750c <__assert_fail@plt+0x65b8>
   1752c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17530:	andeq	r0, r1, ip, lsl sl
   17534:	andeq	r0, r1, r4, lsl sl
   17538:	bx	lr
   1753c:	mov	r2, r1
   17540:	mov	r1, r0
   17544:	mov	r0, #3
   17548:	b	10ef4 <__xstat64@plt>
   1754c:	mov	r2, r1
   17550:	mov	r1, r0
   17554:	mov	r0, #3
   17558:	b	10d8c <__fxstat64@plt>
   1755c:	mov	r2, r1
   17560:	mov	r1, r0
   17564:	mov	r0, #3
   17568:	b	10f30 <__lxstat64@plt>
   1756c:	push	{lr}		; (str lr, [sp, #-4]!)
   17570:	sub	sp, sp, #12
   17574:	str	r3, [sp]
   17578:	mov	r3, r2
   1757c:	mov	r2, r1
   17580:	mov	r1, r0
   17584:	mov	r0, #3
   17588:	bl	10d80 <__fxstatat64@plt>
   1758c:	add	sp, sp, #12
   17590:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00017594 <.fini>:
   17594:	push	{r3, lr}
   17598:	pop	{r3, pc}
