
../repos/coreutils/src/ls:     file format elf32-littlearm


Disassembly of section .init:

00011838 <.init>:
   11838:	push	{r3, lr}
   1183c:	bl	13c18 <__assert_fail@plt+0x1ea4>
   11840:	pop	{r3, pc}

Disassembly of section .plt:

00011844 <calloc@plt-0x14>:
   11844:	push	{lr}		; (str lr, [sp, #-4]!)
   11848:	ldr	lr, [pc, #4]	; 11854 <calloc@plt-0x4>
   1184c:	add	lr, pc, lr
   11850:	ldr	pc, [lr, #8]!
   11854:	andeq	r7, r2, ip, lsr #15

00011858 <calloc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #159744	; 0x27000
   11860:	ldr	pc, [ip, #1964]!	; 0x7ac

00011864 <fputs_unlocked@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #159744	; 0x27000
   1186c:	ldr	pc, [ip, #1956]!	; 0x7a4

00011870 <cap_to_text@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #159744	; 0x27000
   11878:	ldr	pc, [ip, #1948]!	; 0x79c

0001187c <raise@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #159744	; 0x27000
   11884:	ldr	pc, [ip, #1940]!	; 0x794

00011888 <gmtime_r@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #159744	; 0x27000
   11890:	ldr	pc, [ip, #1932]!	; 0x78c

00011894 <getpwnam@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #159744	; 0x27000
   1189c:	ldr	pc, [ip, #1924]!	; 0x784

000118a0 <strcmp@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #159744	; 0x27000
   118a8:	ldr	pc, [ip, #1916]!	; 0x77c

000118ac <getpwuid@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #159744	; 0x27000
   118b4:	ldr	pc, [ip, #1908]!	; 0x774

000118b8 <mktime@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #159744	; 0x27000
   118c0:	ldr	pc, [ip, #1900]!	; 0x76c

000118c4 <fflush@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #159744	; 0x27000
   118cc:	ldr	pc, [ip, #1892]!	; 0x764

000118d0 <wcwidth@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #159744	; 0x27000
   118d8:	ldr	pc, [ip, #1884]!	; 0x75c

000118dc <sigprocmask@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #159744	; 0x27000
   118e4:	ldr	pc, [ip, #1876]!	; 0x754

000118e8 <_setjmp@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #159744	; 0x27000
   118f0:	ldr	pc, [ip, #1868]!	; 0x74c

000118f4 <memmove@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #159744	; 0x27000
   118fc:	ldr	pc, [ip, #1860]!	; 0x744

00011900 <free@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #159744	; 0x27000
   11908:	ldr	pc, [ip, #1852]!	; 0x73c

0001190c <faccessat@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #159744	; 0x27000
   11914:	ldr	pc, [ip, #1844]!	; 0x734

00011918 <clock_gettime@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #159744	; 0x27000
   11920:	ldr	pc, [ip, #1836]!	; 0x72c

00011924 <_exit@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #159744	; 0x27000
   1192c:	ldr	pc, [ip, #1828]!	; 0x724

00011930 <memcpy@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #159744	; 0x27000
   11938:	ldr	pc, [ip, #1820]!	; 0x71c

0001193c <__strtoull_internal@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #159744	; 0x27000
   11944:	ldr	pc, [ip, #1812]!	; 0x714

00011948 <mbsinit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #159744	; 0x27000
   11950:	ldr	pc, [ip, #1804]!	; 0x70c

00011954 <signal@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #159744	; 0x27000
   1195c:	ldr	pc, [ip, #1796]!	; 0x704

00011960 <fwrite_unlocked@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #159744	; 0x27000
   11968:	ldr	pc, [ip, #1788]!	; 0x6fc

0001196c <memcmp@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #159744	; 0x27000
   11974:	ldr	pc, [ip, #1780]!	; 0x6f4

00011978 <fputc_unlocked@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #159744	; 0x27000
   11980:	ldr	pc, [ip, #1772]!	; 0x6ec

00011984 <dcgettext@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #159744	; 0x27000
   1198c:	ldr	pc, [ip, #1764]!	; 0x6e4

00011990 <realloc@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #159744	; 0x27000
   11998:	ldr	pc, [ip, #1756]!	; 0x6dc

0001199c <sigismember@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #159744	; 0x27000
   119a4:	ldr	pc, [ip, #1748]!	; 0x6d4

000119a8 <fgetfilecon@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #159744	; 0x27000
   119b0:	ldr	pc, [ip, #1740]!	; 0x6cc

000119b4 <localtime_r@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #159744	; 0x27000
   119bc:	ldr	pc, [ip, #1732]!	; 0x6c4

000119c0 <textdomain@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #159744	; 0x27000
   119c8:	ldr	pc, [ip, #1724]!	; 0x6bc

000119cc <iswcntrl@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #159744	; 0x27000
   119d4:	ldr	pc, [ip, #1716]!	; 0x6b4

000119d8 <rawmemchr@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #159744	; 0x27000
   119e0:	ldr	pc, [ip, #1708]!	; 0x6ac

000119e4 <fflush_unlocked@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #159744	; 0x27000
   119ec:	ldr	pc, [ip, #1700]!	; 0x6a4

000119f0 <iswprint@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #159744	; 0x27000
   119f8:	ldr	pc, [ip, #1692]!	; 0x69c

000119fc <tzset@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #159744	; 0x27000
   11a04:	ldr	pc, [ip, #1684]!	; 0x694

00011a08 <readlink@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #159744	; 0x27000
   11a10:	ldr	pc, [ip, #1676]!	; 0x68c

00011a14 <sigaction@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #159744	; 0x27000
   11a1c:	ldr	pc, [ip, #1668]!	; 0x684

00011a20 <__memcpy_chk@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #159744	; 0x27000
   11a28:	ldr	pc, [ip, #1660]!	; 0x67c

00011a2c <fwrite@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #159744	; 0x27000
   11a34:	ldr	pc, [ip, #1652]!	; 0x674

00011a38 <ioctl@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #159744	; 0x27000
   11a40:	ldr	pc, [ip, #1644]!	; 0x66c

00011a44 <lseek64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #159744	; 0x27000
   11a4c:	ldr	pc, [ip, #1636]!	; 0x664

00011a50 <__ctype_get_mb_cur_max@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #159744	; 0x27000
   11a58:	ldr	pc, [ip, #1628]!	; 0x65c

00011a5c <strcpy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #159744	; 0x27000
   11a64:	ldr	pc, [ip, #1620]!	; 0x654

00011a68 <__fpending@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #159744	; 0x27000
   11a70:	ldr	pc, [ip, #1612]!	; 0x64c

00011a74 <mbrtowc@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #159744	; 0x27000
   11a7c:	ldr	pc, [ip, #1604]!	; 0x644

00011a80 <wcstombs@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #159744	; 0x27000
   11a88:	ldr	pc, [ip, #1596]!	; 0x63c

00011a8c <error@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #159744	; 0x27000
   11a94:	ldr	pc, [ip, #1588]!	; 0x634

00011a98 <gethostname@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #159744	; 0x27000
   11aa0:	ldr	pc, [ip, #1580]!	; 0x62c

00011aa4 <opendir@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #159744	; 0x27000
   11aac:	ldr	pc, [ip, #1572]!	; 0x624

00011ab0 <fnmatch@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #159744	; 0x27000
   11ab8:	ldr	pc, [ip, #1564]!	; 0x61c

00011abc <strcoll@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #159744	; 0x27000
   11ac4:	ldr	pc, [ip, #1556]!	; 0x614

00011ac8 <getenv@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #159744	; 0x27000
   11ad0:	ldr	pc, [ip, #1548]!	; 0x60c

00011ad4 <lgetfilecon@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #159744	; 0x27000
   11adc:	ldr	pc, [ip, #1540]!	; 0x604

00011ae0 <malloc@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #159744	; 0x27000
   11ae8:	ldr	pc, [ip, #1532]!	; 0x5fc

00011aec <sigaddset@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #159744	; 0x27000
   11af4:	ldr	pc, [ip, #1524]!	; 0x5f4

00011af8 <__libc_start_main@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #159744	; 0x27000
   11b00:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b04 <strftime@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #159744	; 0x27000
   11b0c:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b10 <__freading@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #159744	; 0x27000
   11b18:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b1c <__ctype_tolower_loc@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #159744	; 0x27000
   11b24:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b28 <__ctype_toupper_loc@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #159744	; 0x27000
   11b30:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b34 <__gmon_start__@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #159744	; 0x27000
   11b3c:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b40 <mempcpy@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #159744	; 0x27000
   11b48:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b4c <getopt_long@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #159744	; 0x27000
   11b54:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b58 <__ctype_b_loc@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #159744	; 0x27000
   11b60:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b64 <getcwd@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #159744	; 0x27000
   11b6c:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b70 <exit@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #159744	; 0x27000
   11b78:	ldr	pc, [ip, #1436]!	; 0x59c

00011b7c <getfilecon@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #159744	; 0x27000
   11b84:	ldr	pc, [ip, #1428]!	; 0x594

00011b88 <tcgetpgrp@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #159744	; 0x27000
   11b90:	ldr	pc, [ip, #1420]!	; 0x58c

00011b94 <strlen@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #159744	; 0x27000
   11b9c:	ldr	pc, [ip, #1412]!	; 0x584

00011ba0 <strchr@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #159744	; 0x27000
   11ba8:	ldr	pc, [ip, #1404]!	; 0x57c

00011bac <setenv@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #159744	; 0x27000
   11bb4:	ldr	pc, [ip, #1396]!	; 0x574

00011bb8 <__errno_location@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #159744	; 0x27000
   11bc0:	ldr	pc, [ip, #1388]!	; 0x56c

00011bc4 <__sprintf_chk@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #159744	; 0x27000
   11bcc:	ldr	pc, [ip, #1380]!	; 0x564

00011bd0 <snprintf@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #159744	; 0x27000
   11bd8:	ldr	pc, [ip, #1372]!	; 0x55c

00011bdc <__cxa_atexit@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #159744	; 0x27000
   11be4:	ldr	pc, [ip, #1364]!	; 0x554

00011be8 <memset@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #159744	; 0x27000
   11bf0:	ldr	pc, [ip, #1356]!	; 0x54c

00011bf4 <__printf_chk@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #159744	; 0x27000
   11bfc:	ldr	pc, [ip, #1348]!	; 0x544

00011c00 <stpncpy@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #159744	; 0x27000
   11c08:	ldr	pc, [ip, #1340]!	; 0x53c

00011c0c <fileno@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #159744	; 0x27000
   11c14:	ldr	pc, [ip, #1332]!	; 0x534

00011c18 <__fprintf_chk@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #159744	; 0x27000
   11c20:	ldr	pc, [ip, #1324]!	; 0x52c

00011c24 <fclose@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #159744	; 0x27000
   11c2c:	ldr	pc, [ip, #1316]!	; 0x524

00011c30 <fseeko64@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #159744	; 0x27000
   11c38:	ldr	pc, [ip, #1308]!	; 0x51c

00011c3c <statx@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #159744	; 0x27000
   11c44:	ldr	pc, [ip, #1300]!	; 0x514

00011c48 <__overflow@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #159744	; 0x27000
   11c50:	ldr	pc, [ip, #1292]!	; 0x50c

00011c54 <setlocale@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #159744	; 0x27000
   11c5c:	ldr	pc, [ip, #1284]!	; 0x504

00011c60 <sigemptyset@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #159744	; 0x27000
   11c68:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c6c <wcswidth@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #159744	; 0x27000
   11c74:	ldr	pc, [ip, #1268]!	; 0x4f4

00011c78 <strrchr@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #159744	; 0x27000
   11c80:	ldr	pc, [ip, #1260]!	; 0x4ec

00011c84 <cap_get_file@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #159744	; 0x27000
   11c8c:	ldr	pc, [ip, #1252]!	; 0x4e4

00011c90 <nl_langinfo@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #159744	; 0x27000
   11c98:	ldr	pc, [ip, #1244]!	; 0x4dc

00011c9c <localeconv@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #159744	; 0x27000
   11ca4:	ldr	pc, [ip, #1236]!	; 0x4d4

00011ca8 <mbstowcs@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #159744	; 0x27000
   11cb0:	ldr	pc, [ip, #1228]!	; 0x4cc

00011cb4 <readdir64@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #159744	; 0x27000
   11cbc:	ldr	pc, [ip, #1220]!	; 0x4c4

00011cc0 <timegm@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #159744	; 0x27000
   11cc8:	ldr	pc, [ip, #1212]!	; 0x4bc

00011ccc <cap_free@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #159744	; 0x27000
   11cd4:	ldr	pc, [ip, #1204]!	; 0x4b4

00011cd8 <dirfd@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #159744	; 0x27000
   11ce0:	ldr	pc, [ip, #1196]!	; 0x4ac

00011ce4 <freecon@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #159744	; 0x27000
   11cec:	ldr	pc, [ip, #1188]!	; 0x4a4

00011cf0 <bindtextdomain@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #159744	; 0x27000
   11cf8:	ldr	pc, [ip, #1180]!	; 0x49c

00011cfc <__xstat64@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #159744	; 0x27000
   11d04:	ldr	pc, [ip, #1172]!	; 0x494

00011d08 <isatty@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #159744	; 0x27000
   11d10:	ldr	pc, [ip, #1164]!	; 0x48c

00011d14 <unsetenv@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #159744	; 0x27000
   11d1c:	ldr	pc, [ip, #1156]!	; 0x484

00011d20 <strncmp@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #159744	; 0x27000
   11d28:	ldr	pc, [ip, #1148]!	; 0x47c

00011d2c <abort@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #159744	; 0x27000
   11d34:	ldr	pc, [ip, #1140]!	; 0x474

00011d38 <closedir@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #159744	; 0x27000
   11d40:	ldr	pc, [ip, #1132]!	; 0x46c

00011d44 <getgrgid@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #159744	; 0x27000
   11d4c:	ldr	pc, [ip, #1124]!	; 0x464

00011d50 <getgrnam@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #159744	; 0x27000
   11d58:	ldr	pc, [ip, #1116]!	; 0x45c

00011d5c <__snprintf_chk@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #159744	; 0x27000
   11d64:	ldr	pc, [ip, #1108]!	; 0x454

00011d68 <strspn@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #159744	; 0x27000
   11d70:	ldr	pc, [ip, #1100]!	; 0x44c

00011d74 <__assert_fail@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #159744	; 0x27000
   11d7c:	ldr	pc, [ip, #1092]!	; 0x444

Disassembly of section .text:

00011d80 <_obstack_begin@@Base-0xd4fc>:
   11d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d84:	mov	r6, r0
   11d88:	sub	sp, sp, #92	; 0x5c
   11d8c:	ldr	r0, [r1]
   11d90:	mov	r5, r1
   11d94:	bl	1f4c0 <_obstack_memory_used@@Base+0x34>
   11d98:	ldr	r1, [pc, #3528]	; 12b68 <__assert_fail@plt+0xdf4>
   11d9c:	mov	r0, #6
   11da0:	bl	11c54 <setlocale@plt>
   11da4:	ldr	r1, [pc, #3236]	; 12a50 <__assert_fail@plt+0xcdc>
   11da8:	ldr	r0, [pc, #3236]	; 12a54 <__assert_fail@plt+0xce0>
   11dac:	bl	11cf0 <bindtextdomain@plt>
   11db0:	ldr	r0, [pc, #3228]	; 12a54 <__assert_fail@plt+0xce0>
   11db4:	bl	119c0 <textdomain@plt>
   11db8:	ldr	r3, [pc, #3224]	; 12a58 <__assert_fail@plt+0xce4>
   11dbc:	ldr	r4, [pc, #3224]	; 12a5c <__assert_fail@plt+0xce8>
   11dc0:	mov	r2, #2
   11dc4:	ldr	r0, [pc, #3220]	; 12a60 <__assert_fail@plt+0xcec>
   11dc8:	str	r2, [r3]
   11dcc:	bl	23d34 <_obstack_memory_used@@Base+0x48a8>
   11dd0:	add	r2, r4, #4000	; 0xfa0
   11dd4:	add	r2, r2, #4
   11dd8:	ldr	r9, [pc, #3204]	; 12a64 <__assert_fail@plt+0xcf0>
   11ddc:	str	r2, [sp, #56]	; 0x38
   11de0:	ldr	r8, [pc, #3200]	; 12a68 <__assert_fail@plt+0xcf4>
   11de4:	mov	r2, #0
   11de8:	ldr	r7, [pc, #3196]	; 12a6c <__assert_fail@plt+0xcf8>
   11dec:	mvn	r3, #0
   11df0:	str	r2, [sp, #52]	; 0x34
   11df4:	str	r2, [sp, #44]	; 0x2c
   11df8:	add	sl, sp, #72	; 0x48
   11dfc:	mov	r2, #-2147483648	; 0x80000000
   11e00:	mov	fp, r3
   11e04:	str	r3, [sp, #48]	; 0x30
   11e08:	str	r3, [sp, #32]
   11e0c:	str	r3, [sp, #36]	; 0x24
   11e10:	str	r3, [sp, #40]	; 0x28
   11e14:	str	r3, [sp, #28]
   11e18:	str	r2, [r4, #4040]	; 0xfc8
   11e1c:	str	r3, [r4, #4044]	; 0xfcc
   11e20:	mov	r2, #0
   11e24:	mov	r3, #1
   11e28:	str	r2, [r4, #3440]	; 0xd70
   11e2c:	str	r2, [r4, #3080]	; 0xc08
   11e30:	strb	r3, [r9, #-3999]	; 0xfffff061
   11e34:	mvn	ip, #0
   11e38:	str	sl, [sp]
   11e3c:	sub	r3, r8, #12
   11e40:	mov	r2, r7
   11e44:	mov	r1, r5
   11e48:	mov	r0, r6
   11e4c:	str	ip, [sp, #72]	; 0x48
   11e50:	bl	11b4c <getopt_long@plt>
   11e54:	cmn	r0, #1
   11e58:	beq	12c04 <__assert_fail@plt+0xe90>
   11e5c:	add	r0, r0, #3
   11e60:	cmp	r0, #276	; 0x114
   11e64:	ldrls	pc, [pc, r0, lsl #2]
   11e68:	b	12a48 <__assert_fail@plt+0xcd4>
   11e6c:	andeq	r2, r1, r0, ror r5
   11e70:	andeq	r2, r1, r8, ror #10
   11e74:	andeq	r2, r1, r8, asr #20
   11e78:	andeq	r2, r1, r8, asr #20
   11e7c:	andeq	r2, r1, r8, asr #20
   11e80:	andeq	r2, r1, r8, asr #20
   11e84:	andeq	r2, r1, r8, asr #20
   11e88:	andeq	r2, r1, r8, asr #20
   11e8c:	andeq	r2, r1, r8, asr #20
   11e90:	andeq	r2, r1, r8, asr #20
   11e94:	andeq	r2, r1, r8, asr #20
   11e98:	andeq	r2, r1, r8, asr #20
   11e9c:	andeq	r2, r1, r8, asr #20
   11ea0:	andeq	r2, r1, r8, asr #20
   11ea4:	andeq	r2, r1, r8, asr #20
   11ea8:	andeq	r2, r1, r8, asr #20
   11eac:	andeq	r2, r1, r8, asr #20
   11eb0:	andeq	r2, r1, r8, asr #20
   11eb4:	andeq	r2, r1, r8, asr #20
   11eb8:	andeq	r2, r1, r8, asr #20
   11ebc:	andeq	r2, r1, r8, asr #20
   11ec0:	andeq	r2, r1, r8, asr #20
   11ec4:	andeq	r2, r1, r8, asr #20
   11ec8:	andeq	r2, r1, r8, asr #20
   11ecc:	andeq	r2, r1, r8, asr #20
   11ed0:	andeq	r2, r1, r8, asr #20
   11ed4:	andeq	r2, r1, r8, asr #20
   11ed8:	andeq	r2, r1, r8, asr #20
   11edc:	andeq	r2, r1, r8, asr #20
   11ee0:	andeq	r2, r1, r8, asr #20
   11ee4:	andeq	r2, r1, r8, asr #20
   11ee8:	andeq	r2, r1, r8, asr #20
   11eec:	andeq	r2, r1, r8, asr #20
   11ef0:	andeq	r2, r1, r8, asr #20
   11ef4:	andeq	r2, r1, r8, asr #20
   11ef8:	andeq	r2, r1, r8, asr #20
   11efc:	andeq	r2, r1, r8, asr #20
   11f00:	andeq	r2, r1, r8, asr #20
   11f04:	andeq	r2, r1, r8, asr #20
   11f08:	andeq	r2, r1, r8, asr #20
   11f0c:	andeq	r2, r1, r8, asr #20
   11f10:	andeq	r2, r1, r8, asr #20
   11f14:	andeq	r2, r1, r8, asr #20
   11f18:	andeq	r2, r1, r8, asr #20
   11f1c:	andeq	r2, r1, r8, asr #20
   11f20:	andeq	r2, r1, r8, asr #20
   11f24:	andeq	r2, r1, r8, asr #20
   11f28:	andeq	r2, r1, r8, asr #20
   11f2c:	andeq	r2, r1, r8, asr #20
   11f30:	andeq	r2, r1, r8, asr #20
   11f34:	andeq	r2, r1, r8, asr #20
   11f38:	andeq	r2, r1, r8, asr #20
   11f3c:	andeq	r2, r1, r4, asr r5
   11f40:	andeq	r2, r1, r8, asr #20
   11f44:	andeq	r2, r1, r8, asr #20
   11f48:	andeq	r2, r1, r8, asr #20
   11f4c:	andeq	r2, r1, r8, asr #20
   11f50:	andeq	r2, r1, r8, asr #20
   11f54:	andeq	r2, r1, r8, asr #20
   11f58:	andeq	r2, r1, r8, asr #20
   11f5c:	andeq	r2, r1, r8, asr #20
   11f60:	andeq	r2, r1, r8, asr #20
   11f64:	andeq	r2, r1, r8, asr #20
   11f68:	andeq	r2, r1, r8, asr #20
   11f6c:	andeq	r2, r1, r8, asr #20
   11f70:	andeq	r2, r1, r8, asr #20
   11f74:	andeq	r2, r1, r8, asr #20
   11f78:	andeq	r2, r1, r8, asr #20
   11f7c:	andeq	r2, r1, r8, asr #10
   11f80:	andeq	r2, r1, ip, lsl #10
   11f84:	andeq	r2, r1, r0, lsl #10
   11f88:	strdeq	r2, [r1], -r4
   11f8c:	andeq	r2, r1, r8, asr #20
   11f90:	andeq	r2, r1, r8, lsl #9
   11f94:	andeq	r2, r1, r8, ror r4
   11f98:	andeq	r2, r1, ip, ror #8
   11f9c:	andeq	r2, r1, r4, asr #8
   11fa0:	andeq	r2, r1, r8, asr #20
   11fa4:	andeq	r2, r1, r8, asr #20
   11fa8:	andeq	r2, r1, r8, lsr r4
   11fac:	andeq	r2, r1, r8, asr #20
   11fb0:	andeq	r2, r1, ip, lsr #8
   11fb4:	andeq	r2, r1, r8, asr #20
   11fb8:	andeq	r2, r1, r8, asr #20
   11fbc:	andeq	r2, r1, r0, lsr #8
   11fc0:	andeq	r2, r1, r4, lsl r4
   11fc4:	andeq	r2, r1, r8, lsl #8
   11fc8:			; <UNDEFINED> instruction: 0x000123b0
   11fcc:	andeq	r2, r1, r4, lsr #7
   11fd0:	andeq	r2, r1, r8, asr #20
   11fd4:	andeq	r2, r1, r8, asr #20
   11fd8:	muleq	r1, r8, r3
   11fdc:	andeq	r2, r1, r8, asr #20
   11fe0:	andeq	r2, r1, ip, lsl #7
   11fe4:	andeq	r2, r1, r8, asr #20
   11fe8:	andeq	r2, r1, r8, asr #20
   11fec:	andeq	r2, r1, r8, asr #20
   11ff0:	andeq	r2, r1, r8, asr #20
   11ff4:	andeq	r2, r1, r8, asr #20
   11ff8:	andeq	r2, r1, r8, asr #20
   11ffc:	andeq	r2, r1, r0, lsl #7
   12000:	andeq	r2, r1, r4, ror r3
   12004:	andeq	r2, r1, r8, ror #6
   12008:	andeq	r2, r1, ip, asr r3
   1200c:	andeq	r2, r1, r8, asr #20
   12010:	andeq	r2, r1, r8, lsr #6
   12014:	andeq	r2, r1, r4, lsl r3
   12018:	andeq	r2, r1, ip, ror #5
   1201c:	andeq	r2, r1, r0, ror #5
   12020:	andeq	r2, r1, r8, asr #20
   12024:	ldrdeq	r2, [r1], -r4
   12028:	andeq	r2, r1, r8, asr #5
   1202c:	ldrdeq	r2, [r1], -r0
   12030:	andeq	r2, r1, r0, asr #5
   12034:			; <UNDEFINED> instruction: 0x000129bc
   12038:			; <UNDEFINED> instruction: 0x000129b0
   1203c:	andeq	r2, r1, r4, lsr #19
   12040:	muleq	r1, r8, r9
   12044:	andeq	r2, r1, ip, lsl #19
   12048:	andeq	r2, r1, r0, lsl #19
   1204c:	andeq	r2, r1, r4, ror r9
   12050:	andeq	r2, r1, r8, ror #18
   12054:	andeq	r2, r1, ip, lsl r9
   12058:	andeq	r2, r1, r0, lsl r9
   1205c:	andeq	r2, r1, r8, asr #20
   12060:	andeq	r2, r1, r8, asr #20
   12064:	andeq	r2, r1, r8, asr #20
   12068:	andeq	r2, r1, r8, asr #20
   1206c:	andeq	r2, r1, r8, asr #20
   12070:	andeq	r2, r1, r8, asr #20
   12074:	andeq	r2, r1, r8, asr #20
   12078:	andeq	r2, r1, r8, asr #20
   1207c:	andeq	r2, r1, r8, asr #20
   12080:	andeq	r2, r1, r8, asr #20
   12084:	andeq	r2, r1, r8, asr #20
   12088:	andeq	r2, r1, r8, asr #20
   1208c:	andeq	r2, r1, r8, asr #20
   12090:	andeq	r2, r1, r8, asr #20
   12094:	andeq	r2, r1, r8, asr #20
   12098:	andeq	r2, r1, r8, asr #20
   1209c:	andeq	r2, r1, r8, asr #20
   120a0:	andeq	r2, r1, r8, asr #20
   120a4:	andeq	r2, r1, r8, asr #20
   120a8:	andeq	r2, r1, r8, asr #20
   120ac:	andeq	r2, r1, r8, asr #20
   120b0:	andeq	r2, r1, r8, asr #20
   120b4:	andeq	r2, r1, r8, asr #20
   120b8:	andeq	r2, r1, r8, asr #20
   120bc:	andeq	r2, r1, r8, asr #20
   120c0:	andeq	r2, r1, r8, asr #20
   120c4:	andeq	r2, r1, r8, asr #20
   120c8:	andeq	r2, r1, r8, asr #20
   120cc:	andeq	r2, r1, r8, asr #20
   120d0:	andeq	r2, r1, r8, asr #20
   120d4:	andeq	r2, r1, r8, asr #20
   120d8:	andeq	r2, r1, r8, asr #20
   120dc:	andeq	r2, r1, r8, asr #20
   120e0:	andeq	r2, r1, r8, asr #20
   120e4:	andeq	r2, r1, r8, asr #20
   120e8:	andeq	r2, r1, r8, asr #20
   120ec:	andeq	r2, r1, r8, asr #20
   120f0:	andeq	r2, r1, r8, asr #20
   120f4:	andeq	r2, r1, r8, asr #20
   120f8:	andeq	r2, r1, r8, asr #20
   120fc:	andeq	r2, r1, r8, asr #20
   12100:	andeq	r2, r1, r8, asr #20
   12104:	andeq	r2, r1, r8, asr #20
   12108:	andeq	r2, r1, r8, asr #20
   1210c:	andeq	r2, r1, r8, asr #20
   12110:	andeq	r2, r1, r8, asr #20
   12114:	andeq	r2, r1, r8, asr #20
   12118:	andeq	r2, r1, r8, asr #20
   1211c:	andeq	r2, r1, r8, asr #20
   12120:	andeq	r2, r1, r8, asr #20
   12124:	andeq	r2, r1, r8, asr #20
   12128:	andeq	r2, r1, r8, asr #20
   1212c:	andeq	r2, r1, r8, asr #20
   12130:	andeq	r2, r1, r8, asr #20
   12134:	andeq	r2, r1, r8, asr #20
   12138:	andeq	r2, r1, r8, asr #20
   1213c:	andeq	r2, r1, r8, asr #20
   12140:	andeq	r2, r1, r8, asr #20
   12144:	andeq	r2, r1, r8, asr #20
   12148:	andeq	r2, r1, r8, asr #20
   1214c:	andeq	r2, r1, r8, asr #20
   12150:	andeq	r2, r1, r8, asr #20
   12154:	andeq	r2, r1, r8, asr #20
   12158:	andeq	r2, r1, r8, asr #20
   1215c:	andeq	r2, r1, r8, asr #20
   12160:	andeq	r2, r1, r8, asr #20
   12164:	andeq	r2, r1, r8, asr #20
   12168:	andeq	r2, r1, r8, asr #20
   1216c:	andeq	r2, r1, r8, asr #20
   12170:	andeq	r2, r1, r8, asr #20
   12174:	andeq	r2, r1, r8, asr #20
   12178:	andeq	r2, r1, r8, asr #20
   1217c:	andeq	r2, r1, r8, asr #20
   12180:	andeq	r2, r1, r8, asr #20
   12184:	andeq	r2, r1, r8, asr #20
   12188:	andeq	r2, r1, r8, asr #20
   1218c:	andeq	r2, r1, r8, asr #20
   12190:	andeq	r2, r1, r8, asr #20
   12194:	andeq	r2, r1, r8, asr #20
   12198:	andeq	r2, r1, r8, asr #20
   1219c:	andeq	r2, r1, r8, asr #20
   121a0:	andeq	r2, r1, r8, asr #20
   121a4:	andeq	r2, r1, r8, asr #20
   121a8:	andeq	r2, r1, r8, asr #20
   121ac:	andeq	r2, r1, r8, asr #20
   121b0:	andeq	r2, r1, r8, asr #20
   121b4:	andeq	r2, r1, r8, asr #20
   121b8:	andeq	r2, r1, r8, asr #20
   121bc:	andeq	r2, r1, r8, asr #20
   121c0:	andeq	r2, r1, r8, asr #20
   121c4:	andeq	r2, r1, r8, asr #20
   121c8:	andeq	r2, r1, r8, asr #20
   121cc:	andeq	r2, r1, r8, asr #20
   121d0:	andeq	r2, r1, r8, asr #20
   121d4:	andeq	r2, r1, r8, asr #20
   121d8:	andeq	r2, r1, r8, asr #20
   121dc:	andeq	r2, r1, r8, asr #20
   121e0:	andeq	r2, r1, r8, asr #20
   121e4:	andeq	r2, r1, r8, asr #20
   121e8:	andeq	r2, r1, r8, asr #20
   121ec:	andeq	r2, r1, r8, asr #20
   121f0:	andeq	r2, r1, r8, asr #20
   121f4:	andeq	r2, r1, r8, asr #20
   121f8:	andeq	r2, r1, r8, asr #20
   121fc:	andeq	r2, r1, r8, asr #20
   12200:	andeq	r2, r1, r8, asr #20
   12204:	andeq	r2, r1, r8, asr #20
   12208:	andeq	r2, r1, r8, asr #20
   1220c:	andeq	r2, r1, r8, asr #20
   12210:	andeq	r2, r1, r8, asr #20
   12214:	andeq	r2, r1, r8, asr #20
   12218:	andeq	r2, r1, r8, asr #20
   1221c:	andeq	r2, r1, r8, asr #20
   12220:	andeq	r2, r1, r8, asr #20
   12224:	andeq	r2, r1, r8, asr #20
   12228:	andeq	r2, r1, r8, asr #20
   1222c:	andeq	r2, r1, r8, asr #20
   12230:	andeq	r2, r1, r8, asr #20
   12234:	andeq	r2, r1, r8, asr #20
   12238:	andeq	r2, r1, r8, asr #20
   1223c:	andeq	r2, r1, r8, asr #20
   12240:	andeq	r2, r1, r8, asr #20
   12244:	andeq	r2, r1, r8, asr #20
   12248:	andeq	r2, r1, r8, asr #20
   1224c:	andeq	r2, r1, r8, asr #20
   12250:	andeq	r2, r1, r8, asr #20
   12254:	andeq	r2, r1, r8, asr #20
   12258:	andeq	r2, r1, r8, asr #20
   1225c:	andeq	r2, r1, r8, asr #20
   12260:	andeq	r2, r1, r8, asr #20
   12264:	andeq	r2, r1, r8, asr #20
   12268:	andeq	r2, r1, r8, asr #20
   1226c:	andeq	r2, r1, r8, asr #20
   12270:	andeq	r2, r1, r8, asr #20
   12274:	andeq	r2, r1, r8, asr #20
   12278:	andeq	r2, r1, r4, lsl #18
   1227c:	andeq	r2, r1, ip, asr #17
   12280:	andeq	r2, r1, r8, ror #16
   12284:	andeq	r2, r1, ip, asr r8
   12288:	andeq	r2, r1, r0, asr r8
   1228c:	andeq	r2, r1, r4, lsl #16
   12290:	strdeq	r2, [r1], -r0
   12294:	andeq	r2, r1, r4, ror #15
   12298:	andeq	r2, r1, r0, asr #15
   1229c:	andeq	r2, r1, ip, asr r7
   122a0:	andeq	r2, r1, r4, lsl r7
   122a4:	ldrdeq	r2, [r1], -r0
   122a8:	andeq	r2, r1, r4, asr #13
   122ac:	muleq	r1, ip, r6
   122b0:	andeq	r2, r1, r0, asr r6
   122b4:	andeq	r2, r1, r4, lsl #12
   122b8:	strdeq	r2, [r1], -r4
   122bc:	andeq	r2, r1, r4, asr #11
   122c0:	mov	r3, #1
   122c4:	strb	r3, [r4, #3448]	; 0xd78
   122c8:	mov	r3, #0
   122cc:	str	r3, [sp, #28]
   122d0:	b	11e34 <__assert_fail@plt+0xc0>
   122d4:	mov	r3, #1
   122d8:	str	r3, [sp, #52]	; 0x34
   122dc:	b	11e34 <__assert_fail@plt+0xc0>
   122e0:	mov	r3, #1
   122e4:	strb	r3, [r4, #3088]	; 0xc10
   122e8:	b	11e34 <__assert_fail@plt+0xc0>
   122ec:	ldr	ip, [pc, #2032]	; 12ae4 <__assert_fail@plt+0xd70>
   122f0:	ldr	r1, [pc, #2248]	; 12bc0 <__assert_fail@plt+0xe4c>
   122f4:	mov	r2, #1
   122f8:	mov	r3, #0
   122fc:	mov	r0, #176	; 0xb0
   12300:	strd	r2, [ip, #-8]
   12304:	strd	r2, [r1, #216]	; 0xd8
   12308:	str	r0, [r4, #4004]	; 0xfa4
   1230c:	str	r0, [r4, #4032]	; 0xfc0
   12310:	b	11e34 <__assert_fail@plt+0xc0>
   12314:	ldr	r1, [pc, #2212]	; 12bc0 <__assert_fail@plt+0xe4c>
   12318:	mov	r3, #0
   1231c:	str	r3, [sp, #28]
   12320:	strb	r3, [r1, #204]	; 0xcc
   12324:	b	11e34 <__assert_fail@plt+0xc0>
   12328:	ldr	r2, [sp, #28]
   1232c:	mov	r3, #2
   12330:	cmp	r2, #0
   12334:	mvneq	r2, #0
   12338:	str	r2, [sp, #28]
   1233c:	str	r3, [r9, #-3948]	; 0xfffff094
   12340:	mov	r2, #0
   12344:	mov	r3, #6
   12348:	strb	r2, [r4, #3580]	; 0xdfc
   1234c:	strb	r2, [r9, #-4088]	; 0xfffff008
   12350:	strb	r2, [r4, #3089]	; 0xc11
   12354:	str	r3, [sp, #32]
   12358:	b	11e34 <__assert_fail@plt+0xc0>
   1235c:	mov	r3, #1
   12360:	strb	r3, [r9, #-4048]	; 0xfffff030
   12364:	b	11e34 <__assert_fail@plt+0xc0>
   12368:	mov	r3, #1
   1236c:	str	r3, [r4, #3084]	; 0xc0c
   12370:	b	11e34 <__assert_fail@plt+0xc0>
   12374:	mov	r3, #7
   12378:	str	r3, [sp, #36]	; 0x24
   1237c:	b	11e34 <__assert_fail@plt+0xc0>
   12380:	mov	r3, #2
   12384:	str	r3, [r9, #-3948]	; 0xfffff094
   12388:	b	11e34 <__assert_fail@plt+0xc0>
   1238c:	mov	r3, #1
   12390:	strb	r3, [r4, #4016]	; 0xfb0
   12394:	b	11e34 <__assert_fail@plt+0xc0>
   12398:	mov	r3, #1
   1239c:	str	r3, [sp, #32]
   123a0:	b	11e34 <__assert_fail@plt+0xc0>
   123a4:	mov	r3, #6
   123a8:	str	r3, [sp, #32]
   123ac:	b	11e34 <__assert_fail@plt+0xc0>
   123b0:	ldr	r3, [pc, #2112]	; 12bf8 <__assert_fail@plt+0xe84>
   123b4:	mov	r2, #5
   123b8:	ldr	r1, [pc, #1712]	; 12a70 <__assert_fail@plt+0xcfc>
   123bc:	ldr	r3, [r3]
   123c0:	mov	r0, #0
   123c4:	str	r3, [sp, #48]	; 0x30
   123c8:	bl	11984 <dcgettext@plt>
   123cc:	ldr	r3, [pc, #1940]	; 12b68 <__assert_fail@plt+0xdf4>
   123d0:	mvn	r2, #-2147483648	; 0x80000000
   123d4:	str	r3, [sp, #8]
   123d8:	mov	r3, #0
   123dc:	mov	r1, #2
   123e0:	strd	r2, [sp]
   123e4:	str	r1, [sp, #16]
   123e8:	mov	r2, #0
   123ec:	mov	r3, #0
   123f0:	mov	r1, #0
   123f4:	str	r0, [sp, #12]
   123f8:	ldr	r0, [sp, #48]	; 0x30
   123fc:	bl	2256c <_obstack_memory_used@@Base+0x30e0>
   12400:	str	r0, [sp, #48]	; 0x30
   12404:	b	11e34 <__assert_fail@plt+0xc0>
   12408:	mov	r3, #3
   1240c:	str	r3, [sp, #32]
   12410:	b	11e34 <__assert_fail@plt+0xc0>
   12414:	mov	r3, #1
   12418:	strb	r3, [r9, #-4000]	; 0xfffff060
   1241c:	b	11e34 <__assert_fail@plt+0xc0>
   12420:	mov	r3, #5
   12424:	str	r3, [sp, #36]	; 0x24
   12428:	b	11e34 <__assert_fail@plt+0xc0>
   1242c:	mov	r3, #0
   12430:	str	r3, [sp, #36]	; 0x24
   12434:	b	11e34 <__assert_fail@plt+0xc0>
   12438:	mov	r3, #4
   1243c:	str	r3, [r9, #-4084]	; 0xfffff00c
   12440:	b	11e34 <__assert_fail@plt+0xc0>
   12444:	ldr	r3, [pc, #1964]	; 12bf8 <__assert_fail@plt+0xe84>
   12448:	mov	r0, #8
   1244c:	ldr	r2, [r3]
   12450:	str	r2, [sp, #60]	; 0x3c
   12454:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   12458:	ldr	r3, [r9, #-3944]	; 0xfffff098
   1245c:	ldr	r2, [sp, #60]	; 0x3c
   12460:	stm	r0, {r2, r3}
   12464:	str	r0, [r9, #-3944]	; 0xfffff098
   12468:	b	11e34 <__assert_fail@plt+0xc0>
   1246c:	mov	r3, #2
   12470:	str	r3, [r9, #-4084]	; 0xfffff00c
   12474:	b	11e34 <__assert_fail@plt+0xc0>
   12478:	ldr	r1, [pc, #1856]	; 12bc0 <__assert_fail@plt+0xe4c>
   1247c:	mov	r3, #0
   12480:	strb	r3, [r1, #205]	; 0xcd
   12484:	b	11e34 <__assert_fail@plt+0xc0>
   12488:	ldr	r3, [pc, #1896]	; 12bf8 <__assert_fail@plt+0xe84>
   1248c:	ldr	r1, [r3]
   12490:	cmp	r1, #0
   12494:	beq	124e8 <__assert_fail@plt+0x774>
   12498:	ldr	r0, [pc, #1492]	; 12a74 <__assert_fail@plt+0xd00>
   1249c:	mov	r3, #4
   124a0:	mov	r2, #1
   124a4:	ldr	r0, [r0]
   124a8:	str	r3, [sp]
   124ac:	ldr	r3, [pc, #1476]	; 12a78 <__assert_fail@plt+0xd04>
   124b0:	stmib	sp, {r0, r2}
   124b4:	add	r2, r3, #36	; 0x24
   124b8:	ldr	r0, [pc, #1468]	; 12a7c <__assert_fail@plt+0xd08>
   124bc:	bl	19a94 <__assert_fail@plt+0x7d20>
   124c0:	ldr	r3, [pc, #1464]	; 12a80 <__assert_fail@plt+0xd0c>
   124c4:	add	r3, r3, r0, lsl #2
   124c8:	ldr	r3, [r3, #-2620]	; 0xfffff5c4
   124cc:	cmp	r3, #1
   124d0:	beq	124e8 <__assert_fail@plt+0x774>
   124d4:	cmp	r3, #2
   124d8:	bne	11e34 <__assert_fail@plt+0xc0>
   124dc:	bl	13e4c <__assert_fail@plt+0x20d8>
   124e0:	cmp	r0, #0
   124e4:	beq	11e34 <__assert_fail@plt+0xc0>
   124e8:	mov	r3, #3
   124ec:	str	r3, [r4, #3444]	; 0xd74
   124f0:	b	11e34 <__assert_fail@plt+0xc0>
   124f4:	mov	r3, #1
   124f8:	strb	r3, [r4, #3588]	; 0xe04
   124fc:	b	11e34 <__assert_fail@plt+0xc0>
   12500:	mov	r3, #2
   12504:	str	r3, [sp, #28]
   12508:	b	11e34 <__assert_fail@plt+0xc0>
   1250c:	mov	r0, #8
   12510:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   12514:	ldr	r2, [r9, #-3944]	; 0xfffff098
   12518:	ldr	r1, [pc, #1380]	; 12a84 <__assert_fail@plt+0xd10>
   1251c:	mov	r3, r0
   12520:	str	r1, [r0]
   12524:	str	r2, [r3, #4]
   12528:	mov	r0, #8
   1252c:	str	r3, [r9, #-3944]	; 0xfffff098
   12530:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   12534:	ldr	r3, [r9, #-3944]	; 0xfffff098
   12538:	ldr	r2, [pc, #1352]	; 12a88 <__assert_fail@plt+0xd14>
   1253c:	stm	r0, {r2, r3}
   12540:	str	r0, [r9, #-3944]	; 0xfffff098
   12544:	b	11e34 <__assert_fail@plt+0xc0>
   12548:	mov	r3, #1
   1254c:	str	r3, [r9, #-3948]	; 0xfffff094
   12550:	b	11e34 <__assert_fail@plt+0xc0>
   12554:	ldr	r3, [sp, #28]
   12558:	adds	r3, r3, #0
   1255c:	movne	r3, #1
   12560:	str	r3, [sp, #28]
   12564:	b	11e34 <__assert_fail@plt+0xc0>
   12568:	mov	r0, #0
   1256c:	bl	1908c <__assert_fail@plt+0x7318>
   12570:	ldr	r3, [pc, #1572]	; 12b9c <__assert_fail@plt+0xe28>
   12574:	ldr	r2, [pc, #1428]	; 12b10 <__assert_fail@plt+0xd9c>
   12578:	ldr	r3, [r3]
   1257c:	ldr	r0, [r2]
   12580:	cmp	r3, #1
   12584:	beq	130e0 <__assert_fail@plt+0x136c>
   12588:	ldr	r2, [pc, #1276]	; 12a8c <__assert_fail@plt+0xd18>
   1258c:	cmp	r3, #2
   12590:	ldr	r1, [pc, #1272]	; 12a90 <__assert_fail@plt+0xd1c>
   12594:	moveq	r1, r2
   12598:	ldr	ip, [pc, #1268]	; 12a94 <__assert_fail@plt+0xd20>
   1259c:	ldr	r2, [pc, #1268]	; 12a98 <__assert_fail@plt+0xd24>
   125a0:	ldr	r3, [pc, #1268]	; 12a9c <__assert_fail@plt+0xd28>
   125a4:	mov	r4, #0
   125a8:	ldr	r3, [r3]
   125ac:	stm	sp, {r2, ip}
   125b0:	str	r4, [sp, #8]
   125b4:	ldr	r2, [pc, #1252]	; 12aa0 <__assert_fail@plt+0xd2c>
   125b8:	bl	21ee8 <_obstack_memory_used@@Base+0x2a5c>
   125bc:	mov	r0, r4
   125c0:	bl	11b70 <exit@plt>
   125c4:	ldr	r3, [sp, #28]
   125c8:	ldr	r1, [pc, #1520]	; 12bc0 <__assert_fail@plt+0xe4c>
   125cc:	adds	r3, r3, #0
   125d0:	movne	r3, #1
   125d4:	str	r3, [sp, #28]
   125d8:	mov	r3, #0
   125dc:	strb	r3, [r4, #3580]	; 0xdfc
   125e0:	strb	r3, [r1, #210]	; 0xd2
   125e4:	mov	r3, #0
   125e8:	str	r3, [sp, #36]	; 0x24
   125ec:	str	r3, [sp, #40]	; 0x28
   125f0:	b	11e34 <__assert_fail@plt+0xc0>
   125f4:	ldr	r3, [pc, #1532]	; 12bf8 <__assert_fail@plt+0xe84>
   125f8:	ldr	r3, [r3]
   125fc:	str	r3, [sp, #44]	; 0x2c
   12600:	b	11e34 <__assert_fail@plt+0xc0>
   12604:	ldr	r3, [pc, #1128]	; 12a74 <__assert_fail@plt+0xd00>
   12608:	ldr	r2, [pc, #1512]	; 12bf8 <__assert_fail@plt+0xe84>
   1260c:	mov	r0, #1
   12610:	ldr	r1, [r3]
   12614:	mov	r3, #4
   12618:	str	r1, [sp, #4]
   1261c:	ldr	r1, [r2]
   12620:	ldr	r2, [pc, #1112]	; 12a80 <__assert_fail@plt+0xd0c>
   12624:	str	r0, [sp, #8]
   12628:	sub	r2, r2, #2464	; 0x9a0
   1262c:	str	r3, [sp]
   12630:	ldr	r0, [pc, #1132]	; 12aa4 <__assert_fail@plt+0xd30>
   12634:	sub	r3, r2, #28
   12638:	bl	19a94 <__assert_fail@plt+0x7d20>
   1263c:	ldr	r3, [pc, #1084]	; 12a80 <__assert_fail@plt+0xd0c>
   12640:	add	r0, r3, r0, lsl #2
   12644:	ldr	r3, [r0, #-2492]	; 0xfffff644
   12648:	str	r3, [r4, #3084]	; 0xc0c
   1264c:	b	11e34 <__assert_fail@plt+0xc0>
   12650:	ldr	r2, [pc, #1052]	; 12a74 <__assert_fail@plt+0xd00>
   12654:	ldr	r3, [pc, #1436]	; 12bf8 <__assert_fail@plt+0xe84>
   12658:	mov	r0, #1
   1265c:	ldr	r1, [r2]
   12660:	mov	r2, #4
   12664:	str	r1, [sp, #4]
   12668:	ldr	r1, [r3]
   1266c:	ldr	r3, [pc, #1036]	; 12a80 <__assert_fail@plt+0xd0c>
   12670:	str	r0, [sp, #8]
   12674:	sub	r3, r3, #2544	; 0x9f0
   12678:	str	r2, [sp]
   1267c:	ldr	r0, [pc, #1060]	; 12aa8 <__assert_fail@plt+0xd34>
   12680:	add	r2, r3, #24
   12684:	bl	19a94 <__assert_fail@plt+0x7d20>
   12688:	ldr	r3, [pc, #1008]	; 12a80 <__assert_fail@plt+0xd0c>
   1268c:	add	r0, r3, r0, lsl #2
   12690:	ldr	r3, [r0, #-2544]	; 0xfffff610
   12694:	str	r3, [sp, #32]
   12698:	b	11e34 <__assert_fail@plt+0xc0>
   1269c:	ldr	ip, [pc, #1088]	; 12ae4 <__assert_fail@plt+0xd70>
   126a0:	ldr	r1, [pc, #1304]	; 12bc0 <__assert_fail@plt+0xe4c>
   126a4:	mov	r2, #1
   126a8:	mov	r3, #0
   126ac:	mov	r0, #144	; 0x90
   126b0:	strd	r2, [ip, #-8]
   126b4:	strd	r2, [r1, #216]	; 0xd8
   126b8:	str	r0, [r4, #4004]	; 0xfa4
   126bc:	str	r0, [r4, #4032]	; 0xfc0
   126c0:	b	11e34 <__assert_fail@plt+0xc0>
   126c4:	mov	r3, #0
   126c8:	str	r3, [sp, #40]	; 0x28
   126cc:	b	11e34 <__assert_fail@plt+0xc0>
   126d0:	ldr	r2, [pc, #924]	; 12a74 <__assert_fail@plt+0xd00>
   126d4:	ldr	r3, [pc, #1308]	; 12bf8 <__assert_fail@plt+0xe84>
   126d8:	mov	r0, #1
   126dc:	ldr	r1, [r2]
   126e0:	mov	r2, #4
   126e4:	str	r1, [sp, #4]
   126e8:	ldr	r1, [r3]
   126ec:	ldr	r3, [pc, #1184]	; 12b94 <__assert_fail@plt+0xe20>
   126f0:	str	r0, [sp, #8]
   126f4:	str	r2, [sp]
   126f8:	ldr	r0, [pc, #940]	; 12aac <__assert_fail@plt+0xd38>
   126fc:	ldr	r2, [pc, #1172]	; 12b98 <__assert_fail@plt+0xe24>
   12700:	bl	19a94 <__assert_fail@plt+0x7d20>
   12704:	ldr	r3, [pc, #1160]	; 12b94 <__assert_fail@plt+0xe20>
   12708:	ldr	r3, [r3, r0, lsl #2]
   1270c:	str	r3, [sp, #36]	; 0x24
   12710:	b	11e34 <__assert_fail@plt+0xc0>
   12714:	ldr	r3, [pc, #856]	; 12a74 <__assert_fail@plt+0xd00>
   12718:	ldr	r1, [pc, #1240]	; 12bf8 <__assert_fail@plt+0xe84>
   1271c:	mov	r2, #1
   12720:	ldr	r0, [r3]
   12724:	mov	r3, #4
   12728:	str	r0, [sp, #4]
   1272c:	ldr	r1, [r1]
   12730:	str	r3, [sp]
   12734:	ldr	r3, [pc, #884]	; 12ab0 <__assert_fail@plt+0xd3c>
   12738:	str	r2, [sp, #8]
   1273c:	ldr	r0, [pc, #880]	; 12ab4 <__assert_fail@plt+0xd40>
   12740:	add	r2, r3, #16
   12744:	bl	19a94 <__assert_fail@plt+0x7d20>
   12748:	ldr	r3, [pc, #816]	; 12a80 <__assert_fail@plt+0xd0c>
   1274c:	add	r0, r3, r0, lsl #2
   12750:	ldr	r3, [r0, #-2372]	; 0xfffff6bc
   12754:	str	r3, [r4, #3444]	; 0xd74
   12758:	b	11e34 <__assert_fail@plt+0xc0>
   1275c:	ldr	r3, [pc, #1172]	; 12bf8 <__assert_fail@plt+0xe84>
   12760:	ldr	r1, [r3]
   12764:	cmp	r1, #0
   12768:	beq	130d0 <__assert_fail@plt+0x135c>
   1276c:	ldr	r0, [pc, #768]	; 12a74 <__assert_fail@plt+0xd00>
   12770:	mov	r3, #4
   12774:	mov	r2, #1
   12778:	ldr	r0, [r0]
   1277c:	str	r3, [sp]
   12780:	ldr	r3, [pc, #752]	; 12a78 <__assert_fail@plt+0xd04>
   12784:	stmib	sp, {r0, r2}
   12788:	add	r2, r3, #36	; 0x24
   1278c:	ldr	r0, [pc, #804]	; 12ab8 <__assert_fail@plt+0xd44>
   12790:	bl	19a94 <__assert_fail@plt+0x7d20>
   12794:	ldr	r3, [pc, #740]	; 12a80 <__assert_fail@plt+0xd0c>
   12798:	add	r3, r3, r0, lsl #2
   1279c:	ldr	r3, [r3, #-2620]	; 0xfffff5c4
   127a0:	cmp	r3, #1
   127a4:	beq	130d0 <__assert_fail@plt+0x135c>
   127a8:	cmp	r3, #2
   127ac:	movne	r0, #0
   127b0:	beq	13848 <__assert_fail@plt+0x1ad4>
   127b4:	and	r0, r0, #1
   127b8:	strb	r0, [r9, #-4088]	; 0xfffff008
   127bc:	b	11e34 <__assert_fail@plt+0xc0>
   127c0:	mov	r0, #8
   127c4:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   127c8:	ldr	r3, [pc, #1064]	; 12bf8 <__assert_fail@plt+0xe84>
   127cc:	ldr	r2, [r9, #-3940]	; 0xfffff09c
   127d0:	ldr	r3, [r3]
   127d4:	str	r0, [r9, #-3940]	; 0xfffff09c
   127d8:	str	r2, [r0, #4]
   127dc:	str	r3, [r0]
   127e0:	b	11e34 <__assert_fail@plt+0xc0>
   127e4:	mov	r3, #1
   127e8:	strb	r3, [r4, #4001]	; 0xfa1
   127ec:	b	11e34 <__assert_fail@plt+0xc0>
   127f0:	mov	r3, #0
   127f4:	str	r3, [sp, #28]
   127f8:	ldr	r3, [pc, #700]	; 12abc <__assert_fail@plt+0xd48>
   127fc:	str	r3, [sp, #44]	; 0x2c
   12800:	b	11e34 <__assert_fail@plt+0xc0>
   12804:	ldr	r2, [pc, #616]	; 12a74 <__assert_fail@plt+0xd00>
   12808:	ldr	r3, [pc, #1000]	; 12bf8 <__assert_fail@plt+0xe84>
   1280c:	mov	r0, #1
   12810:	ldr	r1, [r2]
   12814:	mov	r2, #4
   12818:	str	r1, [sp, #4]
   1281c:	ldr	r1, [r3]
   12820:	ldr	r3, [pc, #600]	; 12a80 <__assert_fail@plt+0xd0c>
   12824:	str	r0, [sp, #8]
   12828:	sub	r3, r3, #2432	; 0x980
   1282c:	str	r2, [sp]
   12830:	ldr	r0, [pc, #648]	; 12ac0 <__assert_fail@plt+0xd4c>
   12834:	add	r2, r3, #28
   12838:	bl	19a94 <__assert_fail@plt+0x7d20>
   1283c:	ldr	r3, [pc, #572]	; 12a80 <__assert_fail@plt+0xd0c>
   12840:	add	r0, r3, r0, lsl #2
   12844:	ldr	r3, [r0, #-2432]	; 0xfffff680
   12848:	str	r3, [sp, #28]
   1284c:	b	11e34 <__assert_fail@plt+0xc0>
   12850:	mov	r3, #2
   12854:	str	r3, [r4, #3444]	; 0xd74
   12858:	b	11e34 <__assert_fail@plt+0xc0>
   1285c:	mov	r3, #3
   12860:	str	r3, [r9, #-4084]	; 0xfffff00c
   12864:	b	11e34 <__assert_fail@plt+0xc0>
   12868:	ldr	r3, [pc, #904]	; 12bf8 <__assert_fail@plt+0xe84>
   1286c:	ldr	r1, [r3]
   12870:	cmp	r1, #0
   12874:	beq	130d8 <__assert_fail@plt+0x1364>
   12878:	ldr	r0, [pc, #500]	; 12a74 <__assert_fail@plt+0xd00>
   1287c:	mov	r3, #4
   12880:	mov	r2, #1
   12884:	ldr	r0, [r0]
   12888:	str	r3, [sp]
   1288c:	ldr	r3, [pc, #484]	; 12a78 <__assert_fail@plt+0xd04>
   12890:	stmib	sp, {r0, r2}
   12894:	add	r2, r3, #36	; 0x24
   12898:	ldr	r0, [pc, #548]	; 12ac4 <__assert_fail@plt+0xd50>
   1289c:	bl	19a94 <__assert_fail@plt+0x7d20>
   128a0:	ldr	r3, [pc, #472]	; 12a80 <__assert_fail@plt+0xd0c>
   128a4:	add	r3, r3, r0, lsl #2
   128a8:	ldr	r3, [r3, #-2620]	; 0xfffff5c4
   128ac:	cmp	r3, #1
   128b0:	beq	130d8 <__assert_fail@plt+0x1364>
   128b4:	cmp	r3, #2
   128b8:	movne	r0, #0
   128bc:	beq	13850 <__assert_fail@plt+0x1adc>
   128c0:	and	r0, r0, #1
   128c4:	strb	r0, [r4, #3580]	; 0xdfc
   128c8:	b	11e34 <__assert_fail@plt+0xc0>
   128cc:	ldr	r3, [pc, #804]	; 12bf8 <__assert_fail@plt+0xe84>
   128d0:	ldr	r2, [pc, #596]	; 12b2c <__assert_fail@plt+0xdb8>
   128d4:	ldr	r1, [sp, #56]	; 0x38
   128d8:	ldr	r0, [r3]
   128dc:	bl	1c8c8 <__assert_fail@plt+0xab54>
   128e0:	ldr	r3, [pc, #508]	; 12ae4 <__assert_fail@plt+0xd70>
   128e4:	cmp	r0, #0
   128e8:	bne	13ba0 <__assert_fail@plt+0x1e2c>
   128ec:	ldr	r1, [pc, #716]	; 12bc0 <__assert_fail@plt+0xe4c>
   128f0:	ldrd	r2, [r3, #-8]
   128f4:	ldr	r0, [r4, #4004]	; 0xfa4
   128f8:	strd	r2, [r1, #216]	; 0xd8
   128fc:	str	r0, [r4, #4032]	; 0xfc0
   12900:	b	11e34 <__assert_fail@plt+0xc0>
   12904:	mov	r3, #1
   12908:	strb	r3, [r4, #3096]	; 0xc18
   1290c:	b	11e34 <__assert_fail@plt+0xc0>
   12910:	mov	r3, #3
   12914:	str	r3, [sp, #28]
   12918:	b	11e34 <__assert_fail@plt+0xc0>
   1291c:	ldr	r3, [pc, #724]	; 12bf8 <__assert_fail@plt+0xe84>
   12920:	ldr	r0, [r3]
   12924:	bl	13d84 <__assert_fail@plt+0x2010>
   12928:	subs	fp, r0, #0
   1292c:	bge	11e34 <__assert_fail@plt+0xc0>
   12930:	mov	r2, #5
   12934:	ldr	r1, [pc, #396]	; 12ac8 <__assert_fail@plt+0xd54>
   12938:	mov	r0, #0
   1293c:	bl	11984 <dcgettext@plt>
   12940:	ldr	r3, [pc, #688]	; 12bf8 <__assert_fail@plt+0xe84>
   12944:	mov	r4, r0
   12948:	ldr	r0, [r3]
   1294c:	bl	21380 <_obstack_memory_used@@Base+0x1ef4>
   12950:	mov	r3, r4
   12954:	ldr	r2, [pc, #368]	; 12acc <__assert_fail@plt+0xd58>
   12958:	mov	r1, #0
   1295c:	str	r0, [sp]
   12960:	mov	r0, #2
   12964:	bl	11a8c <error@plt>
   12968:	mov	r3, #4
   1296c:	str	r3, [sp, #32]
   12970:	b	11e34 <__assert_fail@plt+0xc0>
   12974:	mov	r3, #2
   12978:	str	r3, [r4, #3084]	; 0xc0c
   1297c:	b	11e34 <__assert_fail@plt+0xc0>
   12980:	mov	r3, #5
   12984:	str	r3, [sp, #32]
   12988:	b	11e34 <__assert_fail@plt+0xc0>
   1298c:	mov	r3, #1
   12990:	strb	r3, [r4, #3089]	; 0xc11
   12994:	b	11e34 <__assert_fail@plt+0xc0>
   12998:	mov	r3, #1
   1299c:	strb	r3, [r4, #4000]	; 0xfa0
   129a0:	b	11e34 <__assert_fail@plt+0xc0>
   129a4:	mov	r3, #1
   129a8:	str	r3, [sp, #40]	; 0x28
   129ac:	b	11e34 <__assert_fail@plt+0xc0>
   129b0:	mov	r3, #1
   129b4:	str	r3, [r4, #3444]	; 0xd74
   129b8:	b	11e34 <__assert_fail@plt+0xc0>
   129bc:	ldr	r1, [pc, #508]	; 12bc0 <__assert_fail@plt+0xe4c>
   129c0:	mov	r3, #0
   129c4:	str	r3, [sp, #28]
   129c8:	strb	r3, [r1, #205]	; 0xcd
   129cc:	b	11e34 <__assert_fail@plt+0xc0>
   129d0:	mov	r3, #4
   129d4:	str	r3, [sp, #28]
   129d8:	b	11e34 <__assert_fail@plt+0xc0>
   129dc:	ldr	r4, [pc, #236]	; 12ad0 <__assert_fail@plt+0xd5c>
   129e0:	ldr	r1, [sp, #44]	; 0x2c
   129e4:	ldr	r0, [pc, #232]	; 12ad4 <__assert_fail@plt+0xd60>
   129e8:	bl	19918 <__assert_fail@plt+0x7ba4>
   129ec:	mov	r2, #5
   129f0:	ldr	r1, [pc, #224]	; 12ad8 <__assert_fail@plt+0xd64>
   129f4:	mov	r0, #0
   129f8:	bl	11984 <dcgettext@plt>
   129fc:	ldr	r1, [r4]
   12a00:	bl	11864 <fputs_unlocked@plt>
   12a04:	ldr	r5, [pc, #280]	; 12b24 <__assert_fail@plt+0xdb0>
   12a08:	ldr	r3, [pc, #172]	; 12abc <__assert_fail@plt+0xd48>
   12a0c:	ldr	r7, [pc, #200]	; 12adc <__assert_fail@plt+0xd68>
   12a10:	mov	r6, #1
   12a14:	mov	r2, r7
   12a18:	mov	r1, r6
   12a1c:	ldr	r0, [r4]
   12a20:	bl	11c18 <__fprintf_chk@plt>
   12a24:	ldr	r3, [r5, #4]!
   12a28:	cmp	r3, #0
   12a2c:	bne	12a14 <__assert_fail@plt+0xca0>
   12a30:	ldr	r1, [pc, #168]	; 12ae0 <__assert_fail@plt+0xd6c>
   12a34:	mov	r0, r3
   12a38:	mov	r2, #5
   12a3c:	bl	11984 <dcgettext@plt>
   12a40:	ldr	r1, [r4]
   12a44:	bl	11864 <fputs_unlocked@plt>
   12a48:	mov	r0, #2
   12a4c:	bl	1908c <__assert_fail@plt+0x7318>
   12a50:	andeq	r7, r2, r8, lsr r5
   12a54:	andeq	r7, r2, r8, ror r4
   12a58:	andeq	r9, r3, r4, asr #5
   12a5c:	andeq	r9, r3, r0, lsr r3
   12a60:	andeq	sl, r1, ip, ror r3
   12a64:	andeq	fp, r3, r8, lsr #6
   12a68:	andeq	r5, r2, r0, asr r0
   12a6c:	andeq	r7, r2, r0, asr r5
   12a70:	andeq	r7, r2, ip, lsr #11
   12a74:	andeq	r9, r3, r0, asr #5
   12a78:	andeq	r5, r2, r4, lsl r3
   12a7c:	andeq	r7, r2, r0, lsr #11
   12a80:	andeq	r5, r2, r0, asr sp
   12a84:	muleq	r2, r8, r5
   12a88:	muleq	r2, ip, r5
   12a8c:	ldrdeq	r7, [r2], -r8
   12a90:	andeq	r5, r2, r4, ror #12
   12a94:	andeq	r7, r2, r4, lsl r6
   12a98:	andeq	r7, r2, r4, lsr #12
   12a9c:			; <UNDEFINED> instruction: 0x000392bc
   12aa0:	andeq	r7, r2, r4, ror r4
   12aa4:	andeq	r7, r2, r8, asr #11
   12aa8:	andeq	r7, r2, r0, asr #11
   12aac:	andeq	r7, r2, r4, lsl #12
   12ab0:	andeq	r5, r2, ip, lsl #8
   12ab4:	strdeq	r7, [r2], -r0
   12ab8:	andeq	r7, r2, r4, ror #11
   12abc:	andeq	r7, r2, r0, lsr #10
   12ac0:	ldrdeq	r7, [r2], -r0
   12ac4:	ldrdeq	r7, [r2], -ip
   12ac8:	andeq	r7, r2, ip, ror r5
   12acc:	muleq	r2, r0, r5
   12ad0:	andeq	r9, r3, r0, lsr #6
   12ad4:	andeq	r7, r2, r4, lsl #15
   12ad8:	muleq	r2, r0, r7
   12adc:	andeq	r7, r2, r8, lsr #15
   12ae0:			; <UNDEFINED> instruction: 0x000277b8
   12ae4:	andeq	sl, r3, r0, ror #5
   12ae8:	andeq	r7, r2, ip, lsr #14
   12aec:	andeq	r3, r1, r0, lsl #27
   12af0:	andeq	r3, r1, r4, lsr #26
   12af4:	andeq	r3, r1, r8, lsl #26
   12af8:	andeq	sl, r3, ip, asr r3
   12afc:	andeq	r7, r2, r0, ror #16
   12b00:	muleq	r2, r0, r6
   12b04:	muleq	r2, r8, r6
   12b08:	andeq	r5, r2, ip, ror #12
   12b0c:	ldrdeq	r9, [r3], -r8
   12b10:	andeq	r9, r3, r4, lsr #6
   12b14:	andeq	r3, r2, r4, asr sp
   12b18:	andeq	sl, r3, ip, lsr #1
   12b1c:	andeq	r5, r2, r0, lsr r4
   12b20:	andeq	r5, r2, r8, lsr r4
   12b24:	andeq	r3, r2, r8, asr pc
   12b28:	andeq	r7, r2, r8, lsr r6
   12b2c:	ldrdeq	sl, [r3], -r8
   12b30:	andeq	r7, r2, r0, lsr r8
   12b34:	andeq	r7, r2, ip, lsr r8
   12b38:	andeq	r7, r2, r8, asr #16
   12b3c:	andeq	r3, r2, ip, ror #30
   12b40:	ldrdeq	r1, [r0], -r5
   12b44:	andeq	r7, r2, r0, asr r8
   12b48:	andeq	r7, r2, ip, lsr #17
   12b4c:			; <UNDEFINED> instruction: 0x000278b8
   12b50:	andeq	r7, r2, r8, asr #17
   12b54:	andeq	r9, r3, fp, lsl #31
   12b58:	andeq	sl, r1, r0, lsr #26
   12b5c:	andeq	sl, r3, r0, lsl #6
   12b60:	ldrdeq	r2, [r2], -ip
   12b64:	muleq	r3, r0, r3
   12b68:	andeq	r7, r2, r4, lsl #29
   12b6c:	andeq	r9, r3, r8, lsl r3
   12b70:	andeq	r7, r2, r4, ror #16
   12b74:	andeq	r7, r2, r8, lsr #17
   12b78:	andeq	r7, r2, r8, ror #18
   12b7c:	andeq	r7, r2, r4, asr r6
   12b80:	andeq	r7, r2, r8, lsl r8
   12b84:	andeq	r7, r2, r4, lsr #16
   12b88:	andeq	r7, r2, r8, lsl #16
   12b8c:	strdeq	r7, [r2], -r0
   12b90:	ldrdeq	r7, [r2], -r8
   12b94:	andeq	r7, r2, r4, lsl #31
   12b98:	andeq	r7, r2, ip, lsr #31
   12b9c:			; <UNDEFINED> instruction: 0x000392b8
   12ba0:	andeq	r7, r2, r0, ror r9
   12ba4:	andeq	r5, r2, r8, asr #8
   12ba8:	andeq	r7, r2, r4, lsr r9
   12bac:	andeq	r7, r2, r8, asr r8
   12bb0:	andeq	r7, r2, r8, asr r7
   12bb4:	andeq	r7, r2, ip, lsr #10
   12bb8:	andeq	r5, r0, r3, lsl r4
   12bbc:	andeq	r7, r2, r8, asr #12
   12bc0:	ldrdeq	r9, [r3], -r0
   12bc4:	andeq	r7, r2, r4, lsr r5
   12bc8:	andeq	r7, r2, ip, lsl r9
   12bcc:	andeq	r7, r2, r4, ror #14
   12bd0:	andeq	r0, r0, sp, lsl #14
   12bd4:	andeq	r7, r2, r0, lsr #17
   12bd8:	andeq	r5, r2, ip, lsr #9
   12bdc:	andeq	r7, r2, r8, ror #16
   12be0:	andeq	r0, r0, sp, lsl r4
   12be4:	andeq	r0, r0, r1, asr #14
   12be8:	strdeq	r7, [r2], -r0
   12bec:	andeq	r5, r2, r8, lsl #10
   12bf0:			; <UNDEFINED> instruction: 0x000254b8
   12bf4:	andeq	r7, r2, r8, ror #13
   12bf8:	andeq	r9, r3, r8, lsr #6
   12bfc:	andeq	r5, r2, r4, asr #32
   12c00:	andeq	r7, r2, r4, lsr r7
   12c04:	ldr	r7, [pc, #-296]	; 12ae4 <__assert_fail@plt+0xd70>
   12c08:	ldrd	r2, [r7, #-8]
   12c0c:	orrs	r3, r2, r3
   12c10:	beq	1329c <__assert_fail@plt+0x1528>
   12c14:	ldr	r3, [pc, #-92]	; 12bc0 <__assert_fail@plt+0xe4c>
   12c18:	str	r3, [sp, #56]	; 0x38
   12c1c:	ldr	r3, [sp, #28]
   12c20:	cmp	r3, #0
   12c24:	blt	13094 <__assert_fail@plt+0x1320>
   12c28:	ldr	r2, [sp, #28]
   12c2c:	sub	r3, r2, #2
   12c30:	cmp	r3, #2
   12c34:	str	r2, [r4, #3092]	; 0xc14
   12c38:	bhi	130b4 <__assert_fail@plt+0x1340>
   12c3c:	cmn	fp, #1
   12c40:	beq	136b8 <__assert_fail@plt+0x1944>
   12c44:	mov	r1, #3
   12c48:	mov	r0, fp
   12c4c:	str	fp, [r4, #3596]	; 0xe0c
   12c50:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   12c54:	mov	r0, fp
   12c58:	adds	r7, r1, #0
   12c5c:	mov	r1, #3
   12c60:	movne	r7, #1
   12c64:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   12c68:	ldr	r3, [r4, #3092]	; 0xc14
   12c6c:	sub	r3, r3, #2
   12c70:	cmp	r3, #2
   12c74:	add	r0, r7, r0
   12c78:	str	r0, [r4, #4020]	; 0xfb4
   12c7c:	bls	12ffc <__assert_fail@plt+0x1288>
   12c80:	ldr	r3, [sp, #40]	; 0x28
   12c84:	cmn	r3, #1
   12c88:	ldrne	r3, [sp, #40]	; 0x28
   12c8c:	andne	r3, r3, #1
   12c90:	beq	13564 <__assert_fail@plt+0x17f0>
   12c94:	ldr	r2, [sp, #36]	; 0x24
   12c98:	strb	r3, [r4, #3581]	; 0xdfd
   12c9c:	cmp	r2, #0
   12ca0:	blt	137b0 <__assert_fail@plt+0x1a3c>
   12ca4:	ldr	r1, [sp, #36]	; 0x24
   12ca8:	mov	r0, #0
   12cac:	bl	20dec <_obstack_memory_used@@Base+0x1960>
   12cb0:	mov	r0, #0
   12cb4:	bl	20dd4 <_obstack_memory_used@@Base+0x1948>
   12cb8:	ldr	r3, [r4, #3092]	; 0xc14
   12cbc:	cmp	r3, #0
   12cc0:	mov	r7, r0
   12cc4:	bne	12fdc <__assert_fail@plt+0x1268>
   12cc8:	bic	r3, r7, #2
   12ccc:	cmp	r7, #6
   12cd0:	cmpne	r3, #1
   12cd4:	moveq	r3, #1
   12cd8:	movne	r3, #0
   12cdc:	mov	r0, #0
   12ce0:	strb	r3, [r4, #3582]	; 0xdfe
   12ce4:	bl	20da0 <_obstack_memory_used@@Base+0x1914>
   12ce8:	cmp	r7, #7
   12cec:	str	r0, [r4, #3156]	; 0xc54
   12cf0:	beq	137a0 <__assert_fail@plt+0x1a2c>
   12cf4:	ldr	r3, [r4, #3444]	; 0xd74
   12cf8:	cmp	r3, #1
   12cfc:	bls	12d34 <__assert_fail@plt+0xfc0>
   12d00:	ldr	r2, [pc, #-544]	; 12ae8 <__assert_fail@plt+0xd74>
   12d04:	sub	r3, r3, #2
   12d08:	add	r8, r3, r2
   12d0c:	ldrb	r1, [r2, r3]
   12d10:	cmp	r1, #0
   12d14:	beq	12d34 <__assert_fail@plt+0xfc0>
   12d18:	mov	r7, #1
   12d1c:	mov	r2, r7
   12d20:	ldr	r0, [r4, #3156]	; 0xc54
   12d24:	bl	20e04 <_obstack_memory_used@@Base+0x1978>
   12d28:	ldrb	r1, [r8, #1]!
   12d2c:	cmp	r1, #0
   12d30:	bne	12d1c <__assert_fail@plt+0xfa8>
   12d34:	mov	r0, #0
   12d38:	bl	20da0 <_obstack_memory_used@@Base+0x1914>
   12d3c:	mov	r2, #1
   12d40:	mov	r1, #58	; 0x3a
   12d44:	str	r0, [r9, #-3996]	; 0xfffff064
   12d48:	bl	20e04 <_obstack_memory_used@@Base+0x1978>
   12d4c:	ldrb	r3, [r9, #-4088]	; 0xfffff008
   12d50:	ldr	r1, [sp, #56]	; 0x38
   12d54:	ldrb	r0, [r4, #3588]	; 0xe04
   12d58:	ldr	r2, [r4, #3092]	; 0xc14
   12d5c:	eor	r3, r3, #1
   12d60:	ldrb	r1, [r1, #210]	; 0xd2
   12d64:	cmp	r2, #0
   12d68:	movne	r3, #0
   12d6c:	andeq	r3, r3, #1
   12d70:	and	r3, r3, r0
   12d74:	cmp	r3, r1
   12d78:	strb	r3, [r4, #3588]	; 0xe04
   12d7c:	bgt	13bbc <__assert_fail@plt+0x1e48>
   12d80:	ldr	r3, [sp, #32]
   12d84:	cmp	r3, #0
   12d88:	ldrge	r3, [sp, #32]
   12d8c:	blt	131e8 <__assert_fail@plt+0x1474>
   12d90:	cmp	r2, #0
   12d94:	str	r3, [r4, #3100]	; 0xc1c
   12d98:	beq	131f4 <__assert_fail@plt+0x1480>
   12d9c:	ldr	r3, [pc, #-568]	; 12b6c <__assert_fail@plt+0xdf8>
   12da0:	ldr	r7, [r3]
   12da4:	ldrb	r3, [r4, #3580]	; 0xdfc
   12da8:	cmp	r3, #0
   12dac:	bne	132fc <__assert_fail@plt+0x1588>
   12db0:	ldrb	r3, [r4, #4001]	; 0xfa1
   12db4:	cmp	r3, #0
   12db8:	beq	12dc4 <__assert_fail@plt+0x1050>
   12dbc:	mov	r3, #1
   12dc0:	strb	r3, [r9, #-4080]	; 0xfffff010
   12dc4:	ldr	r3, [r9, #-4084]	; 0xfffff00c
   12dc8:	cmp	r3, #0
   12dcc:	bne	12dfc <__assert_fail@plt+0x1088>
   12dd0:	ldrb	r3, [r9, #-4048]	; 0xfffff030
   12dd4:	cmp	r3, #0
   12dd8:	bne	13294 <__assert_fail@plt+0x1520>
   12ddc:	ldr	r3, [r4, #3444]	; 0xd74
   12de0:	cmp	r3, #3
   12de4:	beq	13294 <__assert_fail@plt+0x1520>
   12de8:	ldr	r3, [r4, #3092]	; 0xc14
   12dec:	cmp	r3, #0
   12df0:	movne	r3, #3
   12df4:	moveq	r3, #1
   12df8:	str	r3, [r9, #-4084]	; 0xfffff00c
   12dfc:	ldrb	r3, [r9, #-4000]	; 0xfffff060
   12e00:	cmp	r3, #0
   12e04:	beq	12e4c <__assert_fail@plt+0x10d8>
   12e08:	ldr	r2, [pc, #-804]	; 12aec <__assert_fail@plt+0xd78>
   12e0c:	ldr	r3, [pc, #-804]	; 12af0 <__assert_fail@plt+0xd7c>
   12e10:	str	r2, [sp]
   12e14:	mov	r1, #0
   12e18:	ldr	r2, [pc, #-812]	; 12af4 <__assert_fail@plt+0xd80>
   12e1c:	mov	r0, #30
   12e20:	bl	1b690 <__assert_fail@plt+0x991c>
   12e24:	cmp	r0, #0
   12e28:	str	r0, [r4, #3160]	; 0xc58
   12e2c:	beq	13b48 <__assert_fail@plt+0x1dd4>
   12e30:	ldr	r3, [pc, #-736]	; 12b58 <__assert_fail@plt+0xde4>
   12e34:	mov	r2, #0
   12e38:	str	r3, [sp]
   12e3c:	mov	r1, r2
   12e40:	ldr	r3, [pc, #-744]	; 12b60 <__assert_fail@plt+0xdec>
   12e44:	ldr	r0, [pc, #-852]	; 12af8 <__assert_fail@plt+0xd84>
   12e48:	bl	1f27c <_obstack_begin@@Base>
   12e4c:	ldr	r0, [pc, #-856]	; 12afc <__assert_fail@plt+0xd88>
   12e50:	bl	11ac8 <getenv@plt>
   12e54:	bl	216e0 <_obstack_memory_used@@Base+0x2254>
   12e58:	ldr	r3, [r4, #3100]	; 0xc1c
   12e5c:	sub	r3, r3, #3
   12e60:	bics	r3, r3, #2
   12e64:	str	r0, [r4, #4036]	; 0xfc4
   12e68:	beq	12e84 <__assert_fail@plt+0x1110>
   12e6c:	ldr	r3, [r4, #3092]	; 0xc14
   12e70:	cmp	r3, #0
   12e74:	beq	12e84 <__assert_fail@plt+0x1110>
   12e78:	ldrb	r3, [r4, #4016]	; 0xfb0
   12e7c:	cmp	r3, #0
   12e80:	beq	13640 <__assert_fail@plt+0x18cc>
   12e84:	mov	r3, #1
   12e88:	strb	r3, [r9, #-4087]	; 0xfffff009
   12e8c:	mov	r3, #0
   12e90:	ldrb	r2, [r4, #3588]	; 0xe04
   12e94:	and	r3, r3, #1
   12e98:	strb	r3, [r9, #-4086]	; 0xfffff00a
   12e9c:	cmp	r2, #0
   12ea0:	bne	1352c <__assert_fail@plt+0x17b8>
   12ea4:	ldrb	r3, [r9, #-4088]	; 0xfffff008
   12ea8:	cmp	r3, #0
   12eac:	bne	134a0 <__assert_fail@plt+0x172c>
   12eb0:	mov	r3, #100	; 0x64
   12eb4:	mov	r0, r3
   12eb8:	mov	r1, #152	; 0x98
   12ebc:	str	r3, [r4, #4092]	; 0xffc
   12ec0:	bl	220cc <_obstack_memory_used@@Base+0x2c40>
   12ec4:	sub	r3, r6, r7
   12ec8:	mov	fp, r3
   12ecc:	mov	r8, #0
   12ed0:	str	r3, [sp, #28]
   12ed4:	str	r8, [r4, #3104]	; 0xc20
   12ed8:	str	r0, [r4, #3604]	; 0xe14
   12edc:	bl	14720 <__assert_fail@plt+0x29ac>
   12ee0:	cmp	fp, r8
   12ee4:	addgt	r5, r5, r7, lsl #2
   12ee8:	movgt	fp, #1
   12eec:	ble	13580 <__assert_fail@plt+0x180c>
   12ef0:	add	r7, r7, #1
   12ef4:	ldr	r3, [pc, #-916]	; 12b68 <__assert_fail@plt+0xdf4>
   12ef8:	mov	r2, fp
   12efc:	mov	r1, r8
   12f00:	ldr	r0, [r5], #4
   12f04:	bl	17d40 <__assert_fail@plt+0x5fcc>
   12f08:	cmp	r6, r7
   12f0c:	bgt	12ef0 <__assert_fail@plt+0x117c>
   12f10:	ldr	r3, [r4, #3104]	; 0xc20
   12f14:	cmp	r3, #0
   12f18:	bne	13430 <__assert_fail@plt+0x16bc>
   12f1c:	ldr	r3, [sp, #28]
   12f20:	cmp	r3, #1
   12f24:	ble	130e8 <__assert_fail@plt+0x1374>
   12f28:	mov	r6, #1
   12f2c:	b	12f58 <__assert_fail@plt+0x11e4>
   12f30:	ldrb	r2, [r5, #8]
   12f34:	ldr	r1, [r5, #4]
   12f38:	bl	18ab4 <__assert_fail@plt+0x6d40>
   12f3c:	ldr	r0, [r5]
   12f40:	bl	1ad20 <__assert_fail@plt+0x8fac>
   12f44:	ldr	r0, [r5, #4]
   12f48:	bl	1ad20 <__assert_fail@plt+0x8fac>
   12f4c:	mov	r0, r5
   12f50:	bl	1ad20 <__assert_fail@plt+0x8fac>
   12f54:	strb	r6, [r9, #-3999]	; 0xfffff061
   12f58:	ldr	r5, [r4, #3080]	; 0xc08
   12f5c:	cmp	r5, #0
   12f60:	beq	130f4 <__assert_fail@plt+0x1380>
   12f64:	ldr	ip, [r4, #3160]	; 0xc58
   12f68:	ldr	r3, [r5, #12]
   12f6c:	cmp	ip, #0
   12f70:	str	r3, [r4, #3080]	; 0xc08
   12f74:	ldr	r0, [r5]
   12f78:	beq	12f30 <__assert_fail@plt+0x11bc>
   12f7c:	cmp	r0, #0
   12f80:	bne	12f30 <__assert_fail@plt+0x11bc>
   12f84:	ldr	r3, [r9, #-4032]	; 0xfffff040
   12f88:	ldr	r2, [r9, #-4036]	; 0xfffff03c
   12f8c:	sub	r2, r3, r2
   12f90:	cmp	r2, #15
   12f94:	bls	13b34 <__assert_fail@plt+0x1dc0>
   12f98:	sub	r3, r3, #16
   12f9c:	str	r3, [r9, #-4032]	; 0xfffff040
   12fa0:	ldm	r3, {r0, r1, r2, r3}
   12fa4:	stm	sl, {r0, r1, r2, r3}
   12fa8:	mov	r0, ip
   12fac:	mov	r1, sl
   12fb0:	bl	1bcbc <__assert_fail@plt+0x9f48>
   12fb4:	cmp	r0, #0
   12fb8:	beq	13b20 <__assert_fail@plt+0x1dac>
   12fbc:	bl	1ad20 <__assert_fail@plt+0x8fac>
   12fc0:	ldr	r0, [r5]
   12fc4:	bl	1ad20 <__assert_fail@plt+0x8fac>
   12fc8:	ldr	r0, [r5, #4]
   12fcc:	bl	1ad20 <__assert_fail@plt+0x8fac>
   12fd0:	mov	r0, r5
   12fd4:	bl	1ad20 <__assert_fail@plt+0x8fac>
   12fd8:	b	12f58 <__assert_fail@plt+0x11e4>
   12fdc:	sub	r3, r3, #2
   12fe0:	cmp	r3, #1
   12fe4:	movhi	r3, #0
   12fe8:	bhi	12cdc <__assert_fail@plt+0xf68>
   12fec:	ldr	r3, [r4, #3596]	; 0xe0c
   12ff0:	cmp	r3, #0
   12ff4:	beq	12cdc <__assert_fail@plt+0xf68>
   12ff8:	b	12cc8 <__assert_fail@plt+0xf54>
   12ffc:	ldr	r3, [sp, #48]	; 0x30
   13000:	cmp	r3, #0
   13004:	strge	r3, [r4, #3432]	; 0xd68
   13008:	bge	12c80 <__assert_fail@plt+0xf0c>
   1300c:	mov	r3, #8
   13010:	ldr	r0, [pc, #-1304]	; 12b00 <__assert_fail@plt+0xd8c>
   13014:	str	r3, [r4, #3432]	; 0xd68
   13018:	bl	11ac8 <getenv@plt>
   1301c:	subs	r7, r0, #0
   13020:	beq	12c80 <__assert_fail@plt+0xf0c>
   13024:	ldr	r3, [pc, #-1220]	; 12b68 <__assert_fail@plt+0xdf4>
   13028:	mov	r2, #0
   1302c:	str	r3, [sp]
   13030:	mov	r1, r2
   13034:	mov	r3, sl
   13038:	bl	228ec <_obstack_memory_used@@Base+0x3460>
   1303c:	cmp	r0, #0
   13040:	bne	13060 <__assert_fail@plt+0x12ec>
   13044:	ldrd	r2, [sp, #72]	; 0x48
   13048:	mov	r1, #0
   1304c:	mvn	r0, #0
   13050:	cmp	r3, r1
   13054:	cmpeq	r2, r0
   13058:	strls	r2, [r4, #3432]	; 0xd68
   1305c:	bls	12c80 <__assert_fail@plt+0xf0c>
   13060:	mov	r2, #5
   13064:	ldr	r1, [pc, #-1384]	; 12b04 <__assert_fail@plt+0xd90>
   13068:	mov	r0, #0
   1306c:	bl	11984 <dcgettext@plt>
   13070:	mov	r8, r0
   13074:	mov	r0, r7
   13078:	bl	21380 <_obstack_memory_used@@Base+0x1ef4>
   1307c:	mov	r1, #0
   13080:	mov	r2, r8
   13084:	mov	r3, r0
   13088:	mov	r0, r1
   1308c:	bl	11a8c <error@plt>
   13090:	b	12c80 <__assert_fail@plt+0xf0c>
   13094:	ldr	r3, [pc, #-1280]	; 12b9c <__assert_fail@plt+0xe28>
   13098:	ldr	r7, [r3]
   1309c:	cmp	r7, #1
   130a0:	beq	13830 <__assert_fail@plt+0x1abc>
   130a4:	cmp	r7, #2
   130a8:	movne	r7, #0
   130ac:	beq	1383c <__assert_fail@plt+0x1ac8>
   130b0:	str	r7, [r4, #3092]	; 0xc14
   130b4:	ldrb	r3, [r4, #3580]	; 0xdfc
   130b8:	cmp	r3, #0
   130bc:	bne	12c3c <__assert_fail@plt+0xec8>
   130c0:	cmn	fp, #1
   130c4:	bne	12c44 <__assert_fail@plt+0xed0>
   130c8:	mov	fp, #80	; 0x50
   130cc:	b	12c44 <__assert_fail@plt+0xed0>
   130d0:	mov	r0, #1
   130d4:	b	127b4 <__assert_fail@plt+0xa40>
   130d8:	mov	r0, #1
   130dc:	b	128c0 <__assert_fail@plt+0xb4c>
   130e0:	ldr	r1, [pc, #-1504]	; 12b08 <__assert_fail@plt+0xd94>
   130e4:	b	12598 <__assert_fail@plt+0x824>
   130e8:	ldr	r3, [r4, #3080]	; 0xc08
   130ec:	cmp	r3, #0
   130f0:	bne	13600 <__assert_fail@plt+0x188c>
   130f4:	ldrb	r3, [r4, #3580]	; 0xdfc
   130f8:	cmp	r3, #0
   130fc:	beq	131ac <__assert_fail@plt+0x1438>
   13100:	ldrb	r3, [r4, #3449]	; 0xd79
   13104:	cmp	r3, #0
   13108:	beq	131ac <__assert_fail@plt+0x1438>
   1310c:	ldr	r5, [sp, #56]	; 0x38
   13110:	ldr	r2, [r5]
   13114:	cmp	r2, #2
   13118:	beq	13680 <__assert_fail@plt+0x190c>
   1311c:	ldr	r0, [pc, #-1380]	; 12bc0 <__assert_fail@plt+0xe4c>
   13120:	bl	154a4 <__assert_fail@plt+0x3730>
   13124:	ldr	r0, [pc, #-1568]	; 12b0c <__assert_fail@plt+0xd98>
   13128:	bl	154a4 <__assert_fail@plt+0x3730>
   1312c:	ldr	r3, [pc, #-1572]	; 12b10 <__assert_fail@plt+0xd9c>
   13130:	ldr	r5, [pc, #-1572]	; 12b14 <__assert_fail@plt+0xda0>
   13134:	ldr	r8, [pc, #-1572]	; 12b18 <__assert_fail@plt+0xda4>
   13138:	ldr	r0, [r3]
   1313c:	bl	119e4 <fflush_unlocked@plt>
   13140:	add	r7, r5, #48	; 0x30
   13144:	mov	r9, #0
   13148:	b	13154 <__assert_fail@plt+0x13e0>
   1314c:	cmp	r7, r5
   13150:	beq	1317c <__assert_fail@plt+0x1408>
   13154:	ldr	r6, [r5, #4]!
   13158:	mov	r0, r8
   1315c:	mov	r1, r6
   13160:	bl	1199c <sigismember@plt>
   13164:	cmp	r0, #0
   13168:	beq	1314c <__assert_fail@plt+0x13d8>
   1316c:	mov	r0, r6
   13170:	mov	r1, r9
   13174:	bl	11954 <signal@plt>
   13178:	b	1314c <__assert_fail@plt+0x13d8>
   1317c:	ldr	r5, [r4, #3436]	; 0xd6c
   13180:	cmp	r5, #0
   13184:	movne	r6, #19
   13188:	beq	1319c <__assert_fail@plt+0x1428>
   1318c:	mov	r0, r6
   13190:	bl	1187c <raise@plt>
   13194:	subs	r5, r5, #1
   13198:	bne	1318c <__assert_fail@plt+0x1418>
   1319c:	ldr	r0, [r4]
   131a0:	cmp	r0, #0
   131a4:	beq	131ac <__assert_fail@plt+0x1438>
   131a8:	bl	1187c <raise@plt>
   131ac:	ldrb	r3, [r4, #3588]	; 0xe04
   131b0:	cmp	r3, #0
   131b4:	bne	13468 <__assert_fail@plt+0x16f4>
   131b8:	ldr	r5, [r4, #3160]	; 0xc58
   131bc:	cmp	r5, #0
   131c0:	beq	131dc <__assert_fail@plt+0x1468>
   131c4:	mov	r0, r5
   131c8:	bl	1b228 <__assert_fail@plt+0x94b4>
   131cc:	cmp	r0, #0
   131d0:	bne	13b4c <__assert_fail@plt+0x1dd8>
   131d4:	mov	r0, r5
   131d8:	bl	1b88c <__assert_fail@plt+0x9b18>
   131dc:	ldr	r0, [r4, #3440]	; 0xd70
   131e0:	add	sp, sp, #92	; 0x5c
   131e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e8:	cmp	r2, #0
   131ec:	bne	13610 <__assert_fail@plt+0x189c>
   131f0:	str	r2, [r4, #3100]	; 0xc1c
   131f4:	ldr	r3, [sp, #44]	; 0x2c
   131f8:	cmp	r3, #0
   131fc:	beq	1395c <__assert_fail@plt+0x1be8>
   13200:	str	r6, [sp, #28]
   13204:	mov	r8, #6
   13208:	ldr	r7, [pc, #-1780]	; 12b1c <__assert_fail@plt+0xda8>
   1320c:	mov	fp, #2
   13210:	ldr	r6, [sp, #44]	; 0x2c
   13214:	b	1322c <__assert_fail@plt+0x14b8>
   13218:	mov	r0, fp
   1321c:	bl	1adb0 <__assert_fail@plt+0x903c>
   13220:	cmp	r0, #0
   13224:	beq	135f0 <__assert_fail@plt+0x187c>
   13228:	add	r6, r6, #6
   1322c:	mov	r2, r8
   13230:	mov	r1, r7
   13234:	mov	r0, r6
   13238:	bl	11d20 <strncmp@plt>
   1323c:	cmp	r0, #0
   13240:	beq	13218 <__assert_fail@plt+0x14a4>
   13244:	mov	r3, r6
   13248:	str	r6, [sp, #44]	; 0x2c
   1324c:	ldrb	r3, [r3]
   13250:	ldr	r6, [sp, #28]
   13254:	cmp	r3, #43	; 0x2b
   13258:	beq	135a4 <__assert_fail@plt+0x1830>
   1325c:	ldr	r2, [pc, #-1860]	; 12b20 <__assert_fail@plt+0xdac>
   13260:	mov	r3, #4
   13264:	ldr	r1, [pc, #-1864]	; 12b24 <__assert_fail@plt+0xdb0>
   13268:	ldr	r0, [sp, #44]	; 0x2c
   1326c:	bl	197d0 <__assert_fail@plt+0x7a5c>
   13270:	subs	r2, r0, #0
   13274:	blt	129dc <__assert_fail@plt+0xc68>
   13278:	cmp	r2, #3
   1327c:	ldrls	pc, [pc, r2, lsl #2]
   13280:	b	135e8 <__assert_fail@plt+0x1874>
   13284:	andeq	r3, r1, ip, lsl #15
   13288:	andeq	r3, r1, r8, ror r7
   1328c:	andeq	r3, r1, r0, ror #14
   13290:	andeq	r3, r1, r0, lsr #14
   13294:	mov	r3, #1
   13298:	b	12df8 <__assert_fail@plt+0x1084>
   1329c:	ldr	r0, [pc, #-1916]	; 12b28 <__assert_fail@plt+0xdb4>
   132a0:	bl	11ac8 <getenv@plt>
   132a4:	ldr	r2, [pc, #-1920]	; 12b2c <__assert_fail@plt+0xdb8>
   132a8:	sub	r1, r2, #4
   132ac:	mov	r8, r0
   132b0:	bl	1c8c8 <__assert_fail@plt+0xab54>
   132b4:	cmp	r8, #0
   132b8:	beq	139ac <__assert_fail@plt+0x1c38>
   132bc:	ldr	r3, [pc, #-1796]	; 12bc0 <__assert_fail@plt+0xe4c>
   132c0:	ldr	r1, [r4, #4004]	; 0xfa4
   132c4:	mov	r0, r3
   132c8:	str	r3, [sp, #56]	; 0x38
   132cc:	ldrd	r2, [r7, #-8]
   132d0:	str	r1, [r4, #4032]	; 0xfc0
   132d4:	strd	r2, [r0, #216]	; 0xd8
   132d8:	ldr	r3, [sp, #52]	; 0x34
   132dc:	cmp	r3, #0
   132e0:	beq	12c1c <__assert_fail@plt+0xea8>
   132e4:	mov	r2, #1024	; 0x400
   132e8:	mov	r3, #0
   132ec:	mov	r1, #0
   132f0:	strd	r2, [r7, #-8]
   132f4:	str	r1, [r4, #4004]	; 0xfa4
   132f8:	b	12c1c <__assert_fail@plt+0xea8>
   132fc:	ldr	r0, [pc, #-2004]	; 12b30 <__assert_fail@plt+0xdbc>
   13300:	bl	11ac8 <getenv@plt>
   13304:	cmp	r0, #0
   13308:	str	r0, [sp, #68]	; 0x44
   1330c:	beq	1331c <__assert_fail@plt+0x15a8>
   13310:	ldrb	r3, [r0]
   13314:	cmp	r3, #0
   13318:	bne	13858 <__assert_fail@plt+0x1ae4>
   1331c:	ldr	r0, [pc, #-2032]	; 12b34 <__assert_fail@plt+0xdc0>
   13320:	bl	11ac8 <getenv@plt>
   13324:	cmp	r0, #0
   13328:	beq	13338 <__assert_fail@plt+0x15c4>
   1332c:	ldrb	r3, [r0]
   13330:	cmp	r3, #0
   13334:	bne	133c4 <__assert_fail@plt+0x1650>
   13338:	ldr	r0, [pc, #-2056]	; 12b38 <__assert_fail@plt+0xdc4>
   1333c:	bl	11ac8 <getenv@plt>
   13340:	subs	r3, r0, #0
   13344:	mov	r2, r3
   13348:	beq	13824 <__assert_fail@plt+0x1ab0>
   1334c:	ldrb	r3, [r3]
   13350:	cmp	r3, #0
   13354:	beq	13824 <__assert_fail@plt+0x1ab0>
   13358:	ldr	r8, [pc, #-2084]	; 12b3c <__assert_fail@plt+0xdc8>
   1335c:	str	r6, [sp, #28]
   13360:	mov	fp, r5
   13364:	mov	r6, r8
   13368:	mov	r5, r2
   1336c:	b	13380 <__assert_fail@plt+0x160c>
   13370:	mov	r0, r6
   13374:	bl	11b94 <strlen@plt>
   13378:	add	r0, r0, #1
   1337c:	add	r6, r6, r0
   13380:	ldr	r3, [pc, #-2120]	; 12b40 <__assert_fail@plt+0xdcc>
   13384:	sub	r2, r6, r8
   13388:	cmp	r2, r3
   1338c:	bhi	1381c <__assert_fail@plt+0x1aa8>
   13390:	mov	r2, #5
   13394:	ldr	r1, [pc, #-2136]	; 12b44 <__assert_fail@plt+0xdd0>
   13398:	mov	r0, r6
   1339c:	bl	11d20 <strncmp@plt>
   133a0:	subs	r2, r0, #0
   133a4:	bne	13370 <__assert_fail@plt+0x15fc>
   133a8:	mov	r1, r5
   133ac:	add	r0, r6, #5
   133b0:	bl	11ab0 <fnmatch@plt>
   133b4:	cmp	r0, #0
   133b8:	bne	13370 <__assert_fail@plt+0x15fc>
   133bc:	ldr	r6, [sp, #28]
   133c0:	mov	r5, fp
   133c4:	ldrb	r3, [r4, #3580]	; 0xdfc
   133c8:	cmp	r3, #0
   133cc:	ldrb	r3, [r4, #4001]	; 0xfa1
   133d0:	beq	13b60 <__assert_fail@plt+0x1dec>
   133d4:	mov	r2, #0
   133d8:	cmp	r3, r2
   133dc:	str	r2, [r4, #3432]	; 0xd68
   133e0:	bne	12dbc <__assert_fail@plt+0x1048>
   133e4:	mov	r0, #13
   133e8:	bl	13de4 <__assert_fail@plt+0x2070>
   133ec:	cmp	r0, #0
   133f0:	bne	12dbc <__assert_fail@plt+0x1048>
   133f4:	mov	r0, #14
   133f8:	bl	13de4 <__assert_fail@plt+0x2070>
   133fc:	cmp	r0, #0
   13400:	beq	13410 <__assert_fail@plt+0x169c>
   13404:	ldrb	r3, [r4, #3589]	; 0xe05
   13408:	cmp	r3, #0
   1340c:	bne	12dbc <__assert_fail@plt+0x1048>
   13410:	mov	r0, #12
   13414:	bl	13de4 <__assert_fail@plt+0x2070>
   13418:	cmp	r0, #0
   1341c:	beq	12dc4 <__assert_fail@plt+0x1050>
   13420:	ldr	r3, [r4, #3092]	; 0xc14
   13424:	cmp	r3, #0
   13428:	beq	12dbc <__assert_fail@plt+0x1048>
   1342c:	b	12dc4 <__assert_fail@plt+0x1050>
   13430:	bl	16378 <__assert_fail@plt+0x4604>
   13434:	ldrb	r0, [r9, #-4048]	; 0xfffff030
   13438:	cmp	r0, #0
   1343c:	beq	13950 <__assert_fail@plt+0x1bdc>
   13440:	ldr	r3, [r4, #3104]	; 0xc20
   13444:	cmp	r3, #0
   13448:	beq	12f1c <__assert_fail@plt+0x11a8>
   1344c:	bl	17994 <__assert_fail@plt+0x5c20>
   13450:	ldr	r3, [r4, #3080]	; 0xc08
   13454:	cmp	r3, #0
   13458:	beq	130f4 <__assert_fail@plt+0x1380>
   1345c:	mov	r0, #10
   13460:	bl	14c7c <__assert_fail@plt+0x2f08>
   13464:	b	12f28 <__assert_fail@plt+0x11b4>
   13468:	ldr	r1, [pc, #-2324]	; 12b5c <__assert_fail@plt+0xde8>
   1346c:	ldr	r0, [pc, #-2348]	; 12b48 <__assert_fail@plt+0xdd4>
   13470:	bl	14dc8 <__assert_fail@plt+0x3054>
   13474:	ldr	r1, [pc, #-2328]	; 12b64 <__assert_fail@plt+0xdf0>
   13478:	ldr	r0, [pc, #-2356]	; 12b4c <__assert_fail@plt+0xdd8>
   1347c:	bl	14dc8 <__assert_fail@plt+0x3054>
   13480:	ldr	r0, [r4, #3156]	; 0xc54
   13484:	bl	20dd4 <_obstack_memory_used@@Base+0x1948>
   13488:	ldr	r3, [pc, #-2296]	; 12b98 <__assert_fail@plt+0xe24>
   1348c:	ldr	r1, [pc, #-2372]	; 12b50 <__assert_fail@plt+0xddc>
   13490:	ldr	r2, [r3, r0, lsl #2]
   13494:	mov	r0, #1
   13498:	bl	11bf4 <__printf_chk@plt>
   1349c:	b	131b8 <__assert_fail@plt+0x1444>
   134a0:	ldr	r0, [pc, #-2388]	; 12b54 <__assert_fail@plt+0xde0>
   134a4:	mov	r3, #0
   134a8:	mov	ip, #1
   134ac:	b	134f8 <__assert_fail@plt+0x1784>
   134b0:	cmp	r3, #65	; 0x41
   134b4:	bge	1350c <__assert_fail@plt+0x1798>
   134b8:	sub	r2, r3, #48	; 0x30
   134bc:	cmp	r2, #9
   134c0:	bls	1350c <__assert_fail@plt+0x1798>
   134c4:	sub	r2, r3, #45	; 0x2d
   134c8:	cmp	r3, #126	; 0x7e
   134cc:	cmpne	r2, #1
   134d0:	bls	1350c <__assert_fail@plt+0x1798>
   134d4:	sub	r2, r3, #95	; 0x5f
   134d8:	clz	r2, r2
   134dc:	lsr	r2, r2, #5
   134e0:	ldrb	r1, [r0, #1]
   134e4:	add	r3, r3, #1
   134e8:	cmp	r3, #256	; 0x100
   134ec:	orr	r2, r2, r1
   134f0:	strb	r2, [r0, #1]!
   134f4:	beq	13514 <__assert_fail@plt+0x17a0>
   134f8:	cmp	r3, #90	; 0x5a
   134fc:	ble	134b0 <__assert_fail@plt+0x173c>
   13500:	sub	r2, r3, #97	; 0x61
   13504:	cmp	r2, #25
   13508:	bhi	134c4 <__assert_fail@plt+0x1750>
   1350c:	mov	r2, ip
   13510:	b	134e0 <__assert_fail@plt+0x176c>
   13514:	bl	226b8 <_obstack_memory_used@@Base+0x322c>
   13518:	cmp	r0, #0
   1351c:	str	r0, [r4, #3584]	; 0xe00
   13520:	ldreq	r3, [pc, #-2496]	; 12b68 <__assert_fail@plt+0xdf4>
   13524:	streq	r3, [r4, #3584]	; 0xe00
   13528:	b	12eb0 <__assert_fail@plt+0x113c>
   1352c:	ldr	r8, [pc, #-2524]	; 12b58 <__assert_fail@plt+0xde4>
   13530:	mov	r2, #0
   13534:	mov	r1, r2
   13538:	str	r8, [sp]
   1353c:	ldr	r3, [pc, #-2532]	; 12b60 <__assert_fail@plt+0xdec>
   13540:	ldr	r0, [pc, #-2540]	; 12b5c <__assert_fail@plt+0xde8>
   13544:	bl	1f27c <_obstack_begin@@Base>
   13548:	mov	r2, #0
   1354c:	str	r8, [sp]
   13550:	mov	r1, r2
   13554:	ldr	r3, [pc, #-2556]	; 12b60 <__assert_fail@plt+0xdec>
   13558:	ldr	r0, [pc, #-2556]	; 12b64 <__assert_fail@plt+0xdf0>
   1355c:	bl	1f27c <_obstack_begin@@Base>
   13560:	b	12ea4 <__assert_fail@plt+0x1130>
   13564:	ldr	r3, [pc, #-2512]	; 12b9c <__assert_fail@plt+0xe28>
   13568:	ldr	r3, [r3]
   1356c:	cmp	r3, #1
   13570:	movne	r0, #0
   13574:	beq	1397c <__assert_fail@plt+0x1c08>
   13578:	and	r3, r0, #1
   1357c:	b	12c94 <__assert_fail@plt+0xf20>
   13580:	ldrb	r1, [r9, #-4048]	; 0xfffff030
   13584:	cmp	r1, r8
   13588:	beq	13630 <__assert_fail@plt+0x18bc>
   1358c:	ldr	r3, [pc, #-2604]	; 12b68 <__assert_fail@plt+0xdf4>
   13590:	mov	r2, #1
   13594:	mov	r1, #3
   13598:	ldr	r0, [pc, #-2608]	; 12b70 <__assert_fail@plt+0xdfc>
   1359c:	bl	17d40 <__assert_fail@plt+0x5fcc>
   135a0:	b	12f10 <__assert_fail@plt+0x119c>
   135a4:	ldr	r3, [sp, #44]	; 0x2c
   135a8:	mov	r1, #10
   135ac:	add	fp, r3, #1
   135b0:	mov	r0, fp
   135b4:	bl	11ba0 <strchr@plt>
   135b8:	subs	r8, r0, #0
   135bc:	beq	13ae8 <__assert_fail@plt+0x1d74>
   135c0:	add	r7, r8, #1
   135c4:	mov	r0, r7
   135c8:	mov	r1, #10
   135cc:	bl	11ba0 <strchr@plt>
   135d0:	cmp	r0, #0
   135d4:	strbeq	r0, [r8]
   135d8:	bne	13af0 <__assert_fail@plt+0x1d7c>
   135dc:	ldr	r3, [sp, #56]	; 0x38
   135e0:	str	fp, [r3, #196]	; 0xc4
   135e4:	str	r7, [r3, #200]	; 0xc8
   135e8:	bl	13e84 <__assert_fail@plt+0x2110>
   135ec:	b	12d9c <__assert_fail@plt+0x1028>
   135f0:	ldr	r3, [pc, #-2700]	; 12b6c <__assert_fail@plt+0xdf8>
   135f4:	ldr	r6, [sp, #28]
   135f8:	ldr	r7, [r3]
   135fc:	b	12da4 <__assert_fail@plt+0x1030>
   13600:	ldr	r3, [r3, #12]
   13604:	cmp	r3, #0
   13608:	strbeq	r3, [r9, #-3999]	; 0xfffff061
   1360c:	b	12f28 <__assert_fail@plt+0x11b4>
   13610:	ldr	r3, [r4, #3084]	; 0xc0c
   13614:	sub	r3, r3, #1
   13618:	cmp	r3, #2
   1361c:	movhi	r3, #0
   13620:	bhi	12d90 <__assert_fail@plt+0x101c>
   13624:	mov	r3, #5
   13628:	str	r3, [r4, #3100]	; 0xc1c
   1362c:	b	12d9c <__assert_fail@plt+0x1028>
   13630:	mov	r2, #1
   13634:	ldr	r0, [pc, #-2764]	; 12b70 <__assert_fail@plt+0xdfc>
   13638:	bl	140b0 <__assert_fail@plt+0x233c>
   1363c:	b	12f10 <__assert_fail@plt+0x119c>
   13640:	ldrb	r2, [r4, #3089]	; 0xc11
   13644:	cmp	r2, #0
   13648:	bne	12e84 <__assert_fail@plt+0x1110>
   1364c:	ldrb	r3, [r9, #-4000]	; 0xfffff060
   13650:	strb	r2, [r9, #-4087]	; 0xfffff009
   13654:	cmp	r3, #0
   13658:	bne	13678 <__assert_fail@plt+0x1904>
   1365c:	ldrb	r3, [r4, #3580]	; 0xdfc
   13660:	cmp	r3, #0
   13664:	bne	13678 <__assert_fail@plt+0x1904>
   13668:	ldr	r3, [r4, #3444]	; 0xd74
   1366c:	cmp	r3, #0
   13670:	ldrbeq	r3, [r4, #4001]	; 0xfa1
   13674:	beq	12e90 <__assert_fail@plt+0x111c>
   13678:	mov	r3, #1
   1367c:	b	12e90 <__assert_fail@plt+0x111c>
   13680:	ldr	r1, [pc, #-2836]	; 12b74 <__assert_fail@plt+0xe00>
   13684:	ldr	r0, [r5, #4]
   13688:	bl	1196c <memcmp@plt>
   1368c:	cmp	r0, #0
   13690:	bne	1311c <__assert_fail@plt+0x13a8>
   13694:	ldr	r3, [r5, #8]
   13698:	cmp	r3, #1
   1369c:	bne	1311c <__assert_fail@plt+0x13a8>
   136a0:	ldr	r3, [sp, #56]	; 0x38
   136a4:	ldr	r3, [r3, #12]
   136a8:	ldrb	r3, [r3]
   136ac:	cmp	r3, #109	; 0x6d
   136b0:	bne	1311c <__assert_fail@plt+0x13a8>
   136b4:	b	1312c <__assert_fail@plt+0x13b8>
   136b8:	bl	13e4c <__assert_fail@plt+0x20d8>
   136bc:	cmp	r0, #0
   136c0:	bne	13984 <__assert_fail@plt+0x1c10>
   136c4:	ldr	r0, [pc, #-2900]	; 12b78 <__assert_fail@plt+0xe04>
   136c8:	bl	11ac8 <getenv@plt>
   136cc:	subs	r7, r0, #0
   136d0:	beq	130c8 <__assert_fail@plt+0x1354>
   136d4:	ldrb	r3, [r7]
   136d8:	cmp	r3, #0
   136dc:	beq	130c8 <__assert_fail@plt+0x1354>
   136e0:	bl	13d84 <__assert_fail@plt+0x2010>
   136e4:	subs	fp, r0, #0
   136e8:	bge	12c44 <__assert_fail@plt+0xed0>
   136ec:	mov	r2, #5
   136f0:	ldr	r1, [pc, #-2940]	; 12b7c <__assert_fail@plt+0xe08>
   136f4:	mov	r0, #0
   136f8:	bl	11984 <dcgettext@plt>
   136fc:	mov	r8, r0
   13700:	mov	r0, r7
   13704:	bl	21380 <_obstack_memory_used@@Base+0x1ef4>
   13708:	mov	r1, #0
   1370c:	mov	r2, r8
   13710:	mov	r3, r0
   13714:	mov	r0, r1
   13718:	bl	11a8c <error@plt>
   1371c:	b	130c8 <__assert_fail@plt+0x1354>
   13720:	mov	r0, #2
   13724:	bl	1adb0 <__assert_fail@plt+0x903c>
   13728:	cmp	r0, #0
   1372c:	beq	135e8 <__assert_fail@plt+0x1874>
   13730:	ldr	r7, [sp, #56]	; 0x38
   13734:	mov	r2, #2
   13738:	mov	r0, #0
   1373c:	ldr	r1, [r7, #196]	; 0xc4
   13740:	bl	11984 <dcgettext@plt>
   13744:	mov	r2, #2
   13748:	ldr	r1, [r7, #200]	; 0xc8
   1374c:	str	r0, [r7, #196]	; 0xc4
   13750:	mov	r0, #0
   13754:	bl	11984 <dcgettext@plt>
   13758:	str	r0, [r7, #200]	; 0xc8
   1375c:	b	135e8 <__assert_fail@plt+0x1874>
   13760:	ldr	r1, [sp, #56]	; 0x38
   13764:	ldr	r2, [pc, #-3052]	; 12b80 <__assert_fail@plt+0xe0c>
   13768:	ldr	r3, [pc, #-3052]	; 12b84 <__assert_fail@plt+0xe10>
   1376c:	str	r2, [r1, #196]	; 0xc4
   13770:	str	r3, [r1, #200]	; 0xc8
   13774:	b	135e8 <__assert_fail@plt+0x1874>
   13778:	ldr	r2, [sp, #56]	; 0x38
   1377c:	ldr	r3, [pc, #-3068]	; 12b88 <__assert_fail@plt+0xe14>
   13780:	str	r3, [r2, #200]	; 0xc8
   13784:	str	r3, [r2, #196]	; 0xc4
   13788:	b	135e8 <__assert_fail@plt+0x1874>
   1378c:	ldr	r2, [sp, #56]	; 0x38
   13790:	ldr	r3, [pc, #-3084]	; 12b8c <__assert_fail@plt+0xe18>
   13794:	str	r3, [r2, #200]	; 0xc8
   13798:	str	r3, [r2, #196]	; 0xc4
   1379c:	b	135e8 <__assert_fail@plt+0x1874>
   137a0:	mov	r2, #1
   137a4:	mov	r1, #32
   137a8:	bl	20e04 <_obstack_memory_used@@Base+0x1978>
   137ac:	b	12cf4 <__assert_fail@plt+0xf80>
   137b0:	ldr	r0, [pc, #-3112]	; 12b90 <__assert_fail@plt+0xe1c>
   137b4:	bl	11ac8 <getenv@plt>
   137b8:	subs	r8, r0, #0
   137bc:	beq	137ec <__assert_fail@plt+0x1a78>
   137c0:	ldr	r7, [pc, #-3124]	; 12b94 <__assert_fail@plt+0xe20>
   137c4:	mov	r3, #4
   137c8:	mov	r2, r7
   137cc:	ldr	r1, [pc, #-3132]	; 12b98 <__assert_fail@plt+0xe24>
   137d0:	bl	197d0 <__assert_fail@plt+0x7a5c>
   137d4:	cmp	r0, #0
   137d8:	blt	13b6c <__assert_fail@plt+0x1df8>
   137dc:	ldr	r3, [r7, r0, lsl #2]
   137e0:	cmp	r3, #0
   137e4:	str	r3, [sp, #36]	; 0x24
   137e8:	bge	12ca4 <__assert_fail@plt+0xf30>
   137ec:	ldr	r3, [pc, #-3160]	; 12b9c <__assert_fail@plt+0xe28>
   137f0:	ldr	r3, [r3]
   137f4:	cmp	r3, #1
   137f8:	movne	r3, #7
   137fc:	strne	r3, [sp, #36]	; 0x24
   13800:	bne	12ca4 <__assert_fail@plt+0xf30>
   13804:	bl	13e4c <__assert_fail@plt+0x20d8>
   13808:	cmp	r0, #0
   1380c:	beq	12cb0 <__assert_fail@plt+0xf3c>
   13810:	mov	r3, #3
   13814:	str	r3, [sp, #36]	; 0x24
   13818:	b	12ca4 <__assert_fail@plt+0xf30>
   1381c:	ldr	r6, [sp, #28]
   13820:	mov	r5, fp
   13824:	mov	r3, #0
   13828:	strb	r3, [r4, #3580]	; 0xdfc
   1382c:	b	133c4 <__assert_fail@plt+0x1650>
   13830:	bl	13e4c <__assert_fail@plt+0x20d8>
   13834:	cmp	r0, #0
   13838:	beq	130b0 <__assert_fail@plt+0x133c>
   1383c:	mov	r3, #2
   13840:	str	r3, [r4, #3092]	; 0xc14
   13844:	b	12c3c <__assert_fail@plt+0xec8>
   13848:	bl	13e4c <__assert_fail@plt+0x20d8>
   1384c:	b	127b4 <__assert_fail@plt+0xa40>
   13850:	bl	13e4c <__assert_fail@plt+0x20d8>
   13854:	b	128c0 <__assert_fail@plt+0xb4c>
   13858:	ldr	r3, [pc, #-3264]	; 12ba0 <__assert_fail@plt+0xe2c>
   1385c:	ldr	fp, [pc, #-3264]	; 12ba4 <__assert_fail@plt+0xe30>
   13860:	ldr	r3, [r3]
   13864:	strh	r3, [sp, #64]	; 0x40
   13868:	lsr	r3, r3, #16
   1386c:	strb	r3, [sp, #66]	; 0x42
   13870:	bl	22510 <_obstack_memory_used@@Base+0x3084>
   13874:	str	r0, [r9, #-3936]	; 0xfffff0a0
   13878:	str	r0, [sp, #72]	; 0x48
   1387c:	ldr	r3, [sp, #68]	; 0x44
   13880:	ldrb	r2, [r3]
   13884:	cmp	r2, #42	; 0x2a
   13888:	beq	139d4 <__assert_fail@plt+0x1c60>
   1388c:	cmp	r2, #58	; 0x3a
   13890:	beq	139c8 <__assert_fail@plt+0x1c54>
   13894:	cmp	r2, #0
   13898:	beq	13924 <__assert_fail@plt+0x1bb0>
   1389c:	add	r2, r3, #1
   138a0:	str	r2, [sp, #68]	; 0x44
   138a4:	ldrb	r2, [r3]
   138a8:	strb	r2, [sp, #64]	; 0x40
   138ac:	ldrb	r2, [r3, #1]
   138b0:	cmp	r2, #0
   138b4:	beq	138dc <__assert_fail@plt+0x1b68>
   138b8:	add	r2, r3, #2
   138bc:	str	r2, [sp, #68]	; 0x44
   138c0:	ldrb	r2, [r3, #1]
   138c4:	add	r1, r3, #3
   138c8:	str	r1, [sp, #68]	; 0x44
   138cc:	strb	r2, [sp, #65]	; 0x41
   138d0:	ldrb	r3, [r3, #2]
   138d4:	cmp	r3, #61	; 0x3d
   138d8:	beq	13a5c <__assert_fail@plt+0x1ce8>
   138dc:	mov	r2, #5
   138e0:	ldr	r1, [pc, #-3392]	; 12ba8 <__assert_fail@plt+0xe34>
   138e4:	mov	r0, #0
   138e8:	bl	11984 <dcgettext@plt>
   138ec:	mov	r1, #0
   138f0:	mov	r2, r0
   138f4:	mov	r0, r1
   138f8:	bl	11a8c <error@plt>
   138fc:	ldr	r0, [r9, #-3936]	; 0xfffff0a0
   13900:	bl	1ad20 <__assert_fail@plt+0x8fac>
   13904:	ldr	r0, [r4, #3592]	; 0xe08
   13908:	b	13918 <__assert_fail@plt+0x1ba4>
   1390c:	ldr	r8, [r0, #16]
   13910:	bl	1ad20 <__assert_fail@plt+0x8fac>
   13914:	mov	r0, r8
   13918:	cmp	r0, #0
   1391c:	bne	1390c <__assert_fail@plt+0x1b98>
   13920:	strb	r0, [r4, #3580]	; 0xdfc
   13924:	ldr	r3, [sp, #56]	; 0x38
   13928:	ldr	r2, [r3, #56]	; 0x38
   1392c:	cmp	r2, #6
   13930:	bne	133c4 <__assert_fail@plt+0x1650>
   13934:	ldr	r0, [r3, #60]	; 0x3c
   13938:	ldr	r1, [pc, #-3476]	; 12bac <__assert_fail@plt+0xe38>
   1393c:	bl	11d20 <strncmp@plt>
   13940:	cmp	r0, #0
   13944:	moveq	r3, #1
   13948:	strbeq	r3, [r4, #3589]	; 0xe05
   1394c:	b	133c4 <__assert_fail@plt+0x1650>
   13950:	mov	r1, #1
   13954:	bl	14a54 <__assert_fail@plt+0x2ce0>
   13958:	b	13440 <__assert_fail@plt+0x16cc>
   1395c:	ldr	r0, [pc, #-3508]	; 12bb0 <__assert_fail@plt+0xe3c>
   13960:	bl	11ac8 <getenv@plt>
   13964:	subs	r3, r0, #0
   13968:	str	r3, [sp, #44]	; 0x2c
   1396c:	bne	13200 <__assert_fail@plt+0x148c>
   13970:	ldr	r3, [pc, #-3524]	; 12bb4 <__assert_fail@plt+0xe40>
   13974:	str	r3, [sp, #44]	; 0x2c
   13978:	b	1325c <__assert_fail@plt+0x14e8>
   1397c:	bl	13e4c <__assert_fail@plt+0x20d8>
   13980:	b	13578 <__assert_fail@plt+0x1804>
   13984:	mov	r2, sl
   13988:	ldr	r1, [pc, #-3544]	; 12bb8 <__assert_fail@plt+0xe44>
   1398c:	mov	r0, #1
   13990:	bl	11a38 <ioctl@plt>
   13994:	cmp	r0, #0
   13998:	blt	136c4 <__assert_fail@plt+0x1950>
   1399c:	ldrh	fp, [sp, #74]	; 0x4a
   139a0:	cmp	fp, #0
   139a4:	beq	136c4 <__assert_fail@plt+0x1950>
   139a8:	b	12c44 <__assert_fail@plt+0xed0>
   139ac:	ldr	r0, [pc, #-3576]	; 12bbc <__assert_fail@plt+0xe48>
   139b0:	bl	11ac8 <getenv@plt>
   139b4:	cmp	r0, #0
   139b8:	bne	132bc <__assert_fail@plt+0x1548>
   139bc:	ldr	r3, [pc, #-3588]	; 12bc0 <__assert_fail@plt+0xe4c>
   139c0:	str	r3, [sp, #56]	; 0x38
   139c4:	b	132d8 <__assert_fail@plt+0x1564>
   139c8:	add	r3, r3, #1
   139cc:	str	r3, [sp, #68]	; 0x44
   139d0:	b	1387c <__assert_fail@plt+0x1b08>
   139d4:	mov	r0, #20
   139d8:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   139dc:	ldr	r1, [r4, #3592]	; 0xe08
   139e0:	ldr	ip, [sp, #68]	; 0x44
   139e4:	mov	r2, #1
   139e8:	add	ip, ip, #1
   139ec:	str	ip, [sp, #68]	; 0x44
   139f0:	mov	r8, r0
   139f4:	ldr	r0, [sp, #72]	; 0x48
   139f8:	str	r1, [r8, #16]
   139fc:	str	r0, [r8, #4]
   13a00:	mov	r3, r8
   13a04:	add	r1, sp, #68	; 0x44
   13a08:	mov	r0, sl
   13a0c:	str	r8, [r4, #3592]	; 0xe08
   13a10:	bl	14128 <__assert_fail@plt+0x23b4>
   13a14:	cmp	r0, #0
   13a18:	beq	138dc <__assert_fail@plt+0x1b68>
   13a1c:	ldr	r3, [sp, #68]	; 0x44
   13a20:	add	r2, r3, #1
   13a24:	str	r2, [sp, #68]	; 0x44
   13a28:	ldrb	r3, [r3]
   13a2c:	cmp	r3, #61	; 0x3d
   13a30:	bne	138dc <__assert_fail@plt+0x1b68>
   13a34:	ldr	r0, [sp, #72]	; 0x48
   13a38:	add	r3, r8, #8
   13a3c:	str	r0, [r8, #12]
   13a40:	mov	r2, #0
   13a44:	add	r1, sp, #68	; 0x44
   13a48:	mov	r0, sl
   13a4c:	bl	14128 <__assert_fail@plt+0x23b4>
   13a50:	cmp	r0, #0
   13a54:	beq	138dc <__assert_fail@plt+0x1b68>
   13a58:	b	1387c <__assert_fail@plt+0x1b08>
   13a5c:	mov	r8, #0
   13a60:	ldr	r1, [pc, #-3748]	; 12bc4 <__assert_fail@plt+0xe50>
   13a64:	b	13a78 <__assert_fail@plt+0x1d04>
   13a68:	add	r8, r8, #1
   13a6c:	ldr	r1, [fp, r8, lsl #2]
   13a70:	cmp	r1, #0
   13a74:	beq	13ab4 <__assert_fail@plt+0x1d40>
   13a78:	add	r0, sp, #64	; 0x40
   13a7c:	bl	118a0 <strcmp@plt>
   13a80:	cmp	r0, #0
   13a84:	bne	13a68 <__assert_fail@plt+0x1cf4>
   13a88:	ldr	r3, [sp, #56]	; 0x38
   13a8c:	mov	r2, r0
   13a90:	add	r8, r3, r8, lsl #3
   13a94:	ldr	r0, [sp, #72]	; 0x48
   13a98:	mov	r3, r8
   13a9c:	str	r0, [r8, #4]
   13aa0:	add	r1, sp, #68	; 0x44
   13aa4:	mov	r0, sl
   13aa8:	bl	14128 <__assert_fail@plt+0x23b4>
   13aac:	cmp	r0, #0
   13ab0:	bne	1387c <__assert_fail@plt+0x1b08>
   13ab4:	mov	r2, #5
   13ab8:	ldr	r1, [pc, #-3832]	; 12bc8 <__assert_fail@plt+0xe54>
   13abc:	mov	r0, #0
   13ac0:	bl	11984 <dcgettext@plt>
   13ac4:	mov	r8, r0
   13ac8:	add	r0, sp, #64	; 0x40
   13acc:	bl	21380 <_obstack_memory_used@@Base+0x1ef4>
   13ad0:	mov	r1, #0
   13ad4:	mov	r2, r8
   13ad8:	mov	r3, r0
   13adc:	mov	r0, r1
   13ae0:	bl	11a8c <error@plt>
   13ae4:	b	138dc <__assert_fail@plt+0x1b68>
   13ae8:	mov	r7, fp
   13aec:	b	135dc <__assert_fail@plt+0x1868>
   13af0:	mov	r2, #5
   13af4:	ldr	r1, [pc, #-3888]	; 12bcc <__assert_fail@plt+0xe58>
   13af8:	mov	r0, #0
   13afc:	bl	11984 <dcgettext@plt>
   13b00:	mov	r4, r0
   13b04:	mov	r0, fp
   13b08:	bl	21380 <_obstack_memory_used@@Base+0x1ef4>
   13b0c:	mov	r2, r4
   13b10:	mov	r1, #0
   13b14:	mov	r3, r0
   13b18:	mov	r0, #2
   13b1c:	bl	11a8c <error@plt>
   13b20:	ldr	r3, [pc, #-3896]	; 12bf0 <__assert_fail@plt+0xe7c>
   13b24:	ldr	r2, [pc, #-3932]	; 12bd0 <__assert_fail@plt+0xe5c>
   13b28:	ldr	r1, [pc, #-3908]	; 12bec <__assert_fail@plt+0xe78>
   13b2c:	ldr	r0, [pc, #-3936]	; 12bd4 <__assert_fail@plt+0xe60>
   13b30:	bl	11d74 <__assert_fail@plt>
   13b34:	ldr	r3, [pc, #-3940]	; 12bd8 <__assert_fail@plt+0xe64>
   13b38:	ldr	r2, [pc, #-3936]	; 12be0 <__assert_fail@plt+0xe6c>
   13b3c:	ldr	r1, [pc, #-3928]	; 12bec <__assert_fail@plt+0xe78>
   13b40:	ldr	r0, [pc, #-3948]	; 12bdc <__assert_fail@plt+0xe68>
   13b44:	bl	11d74 <__assert_fail@plt>
   13b48:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   13b4c:	ldr	r3, [pc, #-3940]	; 12bf0 <__assert_fail@plt+0xe7c>
   13b50:	ldr	r2, [pc, #-3956]	; 12be4 <__assert_fail@plt+0xe70>
   13b54:	ldr	r1, [pc, #-3952]	; 12bec <__assert_fail@plt+0xe78>
   13b58:	ldr	r0, [pc, #-3960]	; 12be8 <__assert_fail@plt+0xe74>
   13b5c:	bl	11d74 <__assert_fail@plt>
   13b60:	cmp	r3, #0
   13b64:	bne	12dbc <__assert_fail@plt+0x1048>
   13b68:	b	12dc4 <__assert_fail@plt+0x1050>
   13b6c:	mov	r2, #5
   13b70:	ldr	r1, [pc, #-3972]	; 12bf4 <__assert_fail@plt+0xe80>
   13b74:	mov	r0, #0
   13b78:	bl	11984 <dcgettext@plt>
   13b7c:	mov	r7, r0
   13b80:	mov	r0, r8
   13b84:	bl	21380 <_obstack_memory_used@@Base+0x1ef4>
   13b88:	mov	r1, #0
   13b8c:	mov	r2, r7
   13b90:	mov	r3, r0
   13b94:	mov	r0, r1
   13b98:	bl	11a8c <error@plt>
   13b9c:	b	137ec <__assert_fail@plt+0x1a78>
   13ba0:	ldr	r3, [pc, #-4016]	; 12bf8 <__assert_fail@plt+0xe84>
   13ba4:	ldr	r1, [sp, #72]	; 0x48
   13ba8:	ldr	r2, [r3]
   13bac:	ldr	r3, [pc, #-4024]	; 12bfc <__assert_fail@plt+0xe88>
   13bb0:	str	r2, [sp]
   13bb4:	mov	r2, #0
   13bb8:	bl	227a4 <_obstack_memory_used@@Base+0x3318>
   13bbc:	mov	r2, #5
   13bc0:	ldr	r1, [pc, #-4040]	; 12c00 <__assert_fail@plt+0xe8c>
   13bc4:	mov	r0, #0
   13bc8:	bl	11984 <dcgettext@plt>
   13bcc:	mov	r1, #0
   13bd0:	mov	r2, r0
   13bd4:	mov	r0, #2
   13bd8:	bl	11a8c <error@plt>
   13bdc:	mov	fp, #0
   13be0:	mov	lr, #0
   13be4:	pop	{r1}		; (ldr r1, [sp], #4)
   13be8:	mov	r2, sp
   13bec:	push	{r2}		; (str r2, [sp, #-4]!)
   13bf0:	push	{r0}		; (str r0, [sp, #-4]!)
   13bf4:	ldr	ip, [pc, #16]	; 13c0c <__assert_fail@plt+0x1e98>
   13bf8:	push	{ip}		; (str ip, [sp, #-4]!)
   13bfc:	ldr	r0, [pc, #12]	; 13c10 <__assert_fail@plt+0x1e9c>
   13c00:	ldr	r3, [pc, #12]	; 13c14 <__assert_fail@plt+0x1ea0>
   13c04:	bl	11af8 <__libc_start_main@plt>
   13c08:	bl	11d2c <abort@plt>
   13c0c:	andeq	r3, r2, r0, lsr sp
   13c10:	andeq	r1, r1, r0, lsl #27
   13c14:	ldrdeq	r3, [r2], -r0
   13c18:	ldr	r3, [pc, #20]	; 13c34 <__assert_fail@plt+0x1ec0>
   13c1c:	ldr	r2, [pc, #20]	; 13c38 <__assert_fail@plt+0x1ec4>
   13c20:	add	r3, pc, r3
   13c24:	ldr	r2, [r3, r2]
   13c28:	cmp	r2, #0
   13c2c:	bxeq	lr
   13c30:	b	11b34 <__gmon_start__@plt>
   13c34:	ldrdeq	r5, [r2], -r8
   13c38:	andeq	r0, r0, r4, asr #3
   13c3c:	ldr	r3, [pc, #28]	; 13c60 <__assert_fail@plt+0x1eec>
   13c40:	ldr	r0, [pc, #28]	; 13c64 <__assert_fail@plt+0x1ef0>
   13c44:	sub	r3, r3, r0
   13c48:	cmp	r3, #6
   13c4c:	bxls	lr
   13c50:	ldr	r3, [pc, #16]	; 13c68 <__assert_fail@plt+0x1ef4>
   13c54:	cmp	r3, #0
   13c58:	bxeq	lr
   13c5c:	bx	r3
   13c60:	andeq	r9, r3, pc, lsl #6
   13c64:	andeq	r9, r3, ip, lsl #6
   13c68:	andeq	r0, r0, r0
   13c6c:	ldr	r1, [pc, #36]	; 13c98 <__assert_fail@plt+0x1f24>
   13c70:	ldr	r0, [pc, #36]	; 13c9c <__assert_fail@plt+0x1f28>
   13c74:	sub	r1, r1, r0
   13c78:	asr	r1, r1, #2
   13c7c:	add	r1, r1, r1, lsr #31
   13c80:	asrs	r1, r1, #1
   13c84:	bxeq	lr
   13c88:	ldr	r3, [pc, #16]	; 13ca0 <__assert_fail@plt+0x1f2c>
   13c8c:	cmp	r3, #0
   13c90:	bxeq	lr
   13c94:	bx	r3
   13c98:	andeq	r9, r3, ip, lsl #6
   13c9c:	andeq	r9, r3, ip, lsl #6
   13ca0:	andeq	r0, r0, r0
   13ca4:	push	{r4, lr}
   13ca8:	ldr	r4, [pc, #24]	; 13cc8 <__assert_fail@plt+0x1f54>
   13cac:	ldrb	r3, [r4]
   13cb0:	cmp	r3, #0
   13cb4:	popne	{r4, pc}
   13cb8:	bl	13c3c <__assert_fail@plt+0x1ec8>
   13cbc:	mov	r3, #1
   13cc0:	strb	r3, [r4]
   13cc4:	pop	{r4, pc}
   13cc8:	andeq	r9, r3, ip, lsr #6
   13ccc:	ldr	r0, [pc, #40]	; 13cfc <__assert_fail@plt+0x1f88>
   13cd0:	ldr	r3, [r0]
   13cd4:	cmp	r3, #0
   13cd8:	bne	13ce0 <__assert_fail@plt+0x1f6c>
   13cdc:	b	13c6c <__assert_fail@plt+0x1ef8>
   13ce0:	ldr	r3, [pc, #24]	; 13d00 <__assert_fail@plt+0x1f8c>
   13ce4:	cmp	r3, #0
   13ce8:	beq	13cdc <__assert_fail@plt+0x1f68>
   13cec:	push	{r4, lr}
   13cf0:	blx	r3
   13cf4:	pop	{r4, lr}
   13cf8:	b	13c6c <__assert_fail@plt+0x1ef8>
   13cfc:	andeq	r8, r3, r4, lsl #30
	...
   13d08:	push	{r4, lr}
   13d0c:	mov	r2, r1
   13d10:	mov	r3, #0
   13d14:	ldrd	r0, [r0]
   13d18:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   13d1c:	mov	r0, r2
   13d20:	pop	{r4, pc}
   13d24:	ldrd	r2, [r1]
   13d28:	push	{r4, r5}
   13d2c:	ldrd	r4, [r0]
   13d30:	cmp	r5, r3
   13d34:	cmpeq	r4, r2
   13d38:	movne	r0, #0
   13d3c:	beq	13d48 <__assert_fail@plt+0x1fd4>
   13d40:	pop	{r4, r5}
   13d44:	bx	lr
   13d48:	ldrd	r4, [r0, #8]
   13d4c:	ldrd	r2, [r1, #8]
   13d50:	cmp	r5, r3
   13d54:	cmpeq	r4, r2
   13d58:	moveq	r0, #1
   13d5c:	movne	r0, #0
   13d60:	pop	{r4, r5}
   13d64:	bx	lr
   13d68:	ldr	r3, [pc, #12]	; 13d7c <__assert_fail@plt+0x2008>
   13d6c:	ldr	r2, [r3]
   13d70:	cmp	r2, #0
   13d74:	streq	r0, [r3]
   13d78:	bx	lr
   13d7c:	andeq	r9, r3, r0, lsr r3
   13d80:	b	1ad20 <__assert_fail@plt+0x8fac>
   13d84:	push	{lr}		; (str lr, [sp, #-4]!)
   13d88:	sub	sp, sp, #20
   13d8c:	ldr	r3, [pc, #76]	; 13de0 <__assert_fail@plt+0x206c>
   13d90:	mov	r2, #0
   13d94:	str	r3, [sp]
   13d98:	mov	r1, r2
   13d9c:	add	r3, sp, #8
   13da0:	bl	228ec <_obstack_memory_used@@Base+0x3460>
   13da4:	cmp	r0, #0
   13da8:	beq	13dc0 <__assert_fail@plt+0x204c>
   13dac:	cmp	r0, #1
   13db0:	moveq	r0, #0
   13db4:	mvnne	r0, #0
   13db8:	add	sp, sp, #20
   13dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   13dc0:	ldrd	r0, [sp, #8]
   13dc4:	mov	r3, #0
   13dc8:	mvn	r2, #-2147483648	; 0x80000000
   13dcc:	cmp	r1, r3
   13dd0:	cmpeq	r0, r2
   13dd4:	movhi	r0, #0
   13dd8:	add	sp, sp, #20
   13ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   13de0:	andeq	r7, r2, r4, lsl #29
   13de4:	ldr	r3, [pc, #88]	; 13e44 <__assert_fail@plt+0x20d0>
   13de8:	ldr	r2, [r3, r0, lsl #3]
   13dec:	cmp	r2, #0
   13df0:	beq	13e14 <__assert_fail@plt+0x20a0>
   13df4:	add	r3, r3, r0, lsl #3
   13df8:	cmp	r2, #1
   13dfc:	ldr	r0, [r3, #4]
   13e00:	beq	13e34 <__assert_fail@plt+0x20c0>
   13e04:	cmp	r2, #2
   13e08:	beq	13e1c <__assert_fail@plt+0x20a8>
   13e0c:	mov	r0, #1
   13e10:	bx	lr
   13e14:	mov	r0, r2
   13e18:	bx	lr
   13e1c:	push	{r4, lr}
   13e20:	ldr	r1, [pc, #32]	; 13e48 <__assert_fail@plt+0x20d4>
   13e24:	bl	11d20 <strncmp@plt>
   13e28:	adds	r0, r0, #0
   13e2c:	movne	r0, #1
   13e30:	pop	{r4, pc}
   13e34:	ldrb	r2, [r0]
   13e38:	subs	r0, r2, #48	; 0x30
   13e3c:	movne	r0, #1
   13e40:	bx	lr
   13e44:	ldrdeq	r9, [r3], -r0
   13e48:	andeq	r5, r2, r0, asr #9
   13e4c:	push	{r4, lr}
   13e50:	ldr	r4, [pc, #40]	; 13e80 <__assert_fail@plt+0x210c>
   13e54:	ldrsb	r0, [r4, #192]	; 0xc0
   13e58:	cmp	r0, #0
   13e5c:	blt	13e68 <__assert_fail@plt+0x20f4>
   13e60:	and	r0, r0, #1
   13e64:	pop	{r4, pc}
   13e68:	mov	r0, #1
   13e6c:	bl	11d08 <isatty@plt>
   13e70:	sxtb	r0, r0
   13e74:	strb	r0, [r4, #192]	; 0xc0
   13e78:	and	r0, r0, #1
   13e7c:	pop	{r4, pc}
   13e80:	ldrdeq	r9, [r3], -r0
   13e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e88:	sub	sp, sp, #1584	; 0x630
   13e8c:	sub	sp, sp, #4
   13e90:	mov	r1, #0
   13e94:	ldr	r3, [pc, #504]	; 14094 <__assert_fail@plt+0x2320>
   13e98:	ldr	r2, [r3, r1, lsl #2]
   13e9c:	ldrb	r3, [r2]
   13ea0:	cmp	r3, #0
   13ea4:	bne	13eb8 <__assert_fail@plt+0x2144>
   13ea8:	b	13fb0 <__assert_fail@plt+0x223c>
   13eac:	cmp	r3, #0
   13eb0:	add	r2, r2, #1
   13eb4:	beq	13fb0 <__assert_fail@plt+0x223c>
   13eb8:	cmp	r3, #37	; 0x25
   13ebc:	ldrb	r3, [r2, #1]
   13ec0:	bne	13eac <__assert_fail@plt+0x2138>
   13ec4:	cmp	r3, #37	; 0x25
   13ec8:	beq	13f9c <__assert_fail@plt+0x2228>
   13ecc:	cmp	r3, #98	; 0x62
   13ed0:	bne	13eac <__assert_fail@plt+0x2138>
   13ed4:	add	r3, sp, #40	; 0x28
   13ed8:	str	r2, [r3, r1, lsl #2]
   13edc:	add	r1, r1, #1
   13ee0:	cmp	r1, #2
   13ee4:	bne	13e94 <__assert_fail@plt+0x2120>
   13ee8:	ldr	r3, [sp, #40]	; 0x28
   13eec:	cmp	r3, #0
   13ef0:	beq	14074 <__assert_fail@plt+0x2300>
   13ef4:	mov	r9, #12
   13ef8:	mov	sl, #37	; 0x25
   13efc:	add	fp, sp, #36	; 0x24
   13f00:	ldr	r4, [pc, #400]	; 14098 <__assert_fail@plt+0x2324>
   13f04:	add	r6, sp, #48	; 0x30
   13f08:	mov	r5, #0
   13f0c:	mov	r0, r4
   13f10:	str	r9, [sp, #36]	; 0x24
   13f14:	bl	11c90 <nl_langinfo@plt>
   13f18:	mov	r1, sl
   13f1c:	add	r4, r4, #1
   13f20:	mov	r7, r0
   13f24:	bl	11ba0 <strchr@plt>
   13f28:	subs	r8, r0, #0
   13f2c:	bne	14068 <__assert_fail@plt+0x22f4>
   13f30:	bl	11b58 <__ctype_b_loc@plt>
   13f34:	str	r8, [sp, #4]
   13f38:	ldrb	ip, [r7]
   13f3c:	mov	r2, #128	; 0x80
   13f40:	mov	r1, r6
   13f44:	mov	r3, fp
   13f48:	lsl	ip, ip, #1
   13f4c:	add	r6, r6, r2
   13f50:	ldr	lr, [r0]
   13f54:	mov	r0, r7
   13f58:	ldrh	ip, [lr, ip]
   13f5c:	lsr	ip, ip, #11
   13f60:	and	ip, ip, #1
   13f64:	str	ip, [sp]
   13f68:	bl	1cf3c <__assert_fail@plt+0xb1c8>
   13f6c:	cmp	r0, #127	; 0x7f
   13f70:	bhi	14068 <__assert_fail@plt+0x22f4>
   13f74:	ldr	r3, [sp, #36]	; 0x24
   13f78:	cmp	r5, r3
   13f7c:	movcc	r5, r3
   13f80:	ldr	r3, [pc, #276]	; 1409c <__assert_fail@plt+0x2328>
   13f84:	cmp	r4, r3
   13f88:	bne	13f0c <__assert_fail@plt+0x2198>
   13f8c:	cmp	r9, r5
   13f90:	bls	13fb8 <__assert_fail@plt+0x2244>
   13f94:	mov	r9, r5
   13f98:	b	13f00 <__assert_fail@plt+0x218c>
   13f9c:	ldrb	r3, [r2, #2]
   13fa0:	add	r2, r2, #1
   13fa4:	add	r2, r2, #1
   13fa8:	cmp	r3, #0
   13fac:	bne	13eb8 <__assert_fail@plt+0x2144>
   13fb0:	mov	r2, r3
   13fb4:	b	13ed4 <__assert_fail@plt+0x2160>
   13fb8:	str	r8, [sp, #28]
   13fbc:	ldr	r3, [sp, #28]
   13fc0:	ldr	r2, [pc, #204]	; 14094 <__assert_fail@plt+0x2320>
   13fc4:	mov	r4, #0
   13fc8:	mvn	r9, #0
   13fcc:	ldr	r7, [r2, r3, lsl #2]
   13fd0:	add	r2, sp, #40	; 0x28
   13fd4:	mov	r8, #1
   13fd8:	ldr	r6, [r2, r3, lsl #2]
   13fdc:	mov	r2, #1536	; 0x600
   13fe0:	sub	r5, r6, r7
   13fe4:	mul	sl, r2, r3
   13fe8:	add	fp, r6, #2
   13fec:	ldr	r0, [pc, #172]	; 140a0 <__assert_fail@plt+0x232c>
   13ff0:	add	ip, sl, r4
   13ff4:	add	r3, sp, #48	; 0x30
   13ff8:	add	ip, r0, ip
   13ffc:	cmp	r6, #0
   14000:	add	lr, r3, r4
   14004:	mov	r2, r8
   14008:	mov	r3, r9
   1400c:	mov	r1, #128	; 0x80
   14010:	mov	r0, ip
   14014:	beq	14084 <__assert_fail@plt+0x2310>
   14018:	cmp	r5, #128	; 0x80
   1401c:	bgt	14068 <__assert_fail@plt+0x22f4>
   14020:	ldr	ip, [pc, #124]	; 140a4 <__assert_fail@plt+0x2330>
   14024:	str	fp, [sp, #16]
   14028:	stmib	sp, {r5, r7, lr}
   1402c:	str	ip, [sp]
   14030:	bl	11d5c <__snprintf_chk@plt>
   14034:	cmp	r0, #127	; 0x7f
   14038:	add	r4, r4, #128	; 0x80
   1403c:	bhi	14068 <__assert_fail@plt+0x22f4>
   14040:	cmp	r4, #1536	; 0x600
   14044:	bne	13fec <__assert_fail@plt+0x2278>
   14048:	ldr	r3, [sp, #28]
   1404c:	add	r3, r3, #1
   14050:	cmp	r3, #2
   14054:	str	r3, [sp, #28]
   14058:	bne	13fbc <__assert_fail@plt+0x2248>
   1405c:	ldr	r3, [pc, #68]	; 140a8 <__assert_fail@plt+0x2334>
   14060:	mov	r2, #1
   14064:	strb	r2, [r3, #3076]	; 0xc04
   14068:	add	sp, sp, #1584	; 0x630
   1406c:	add	sp, sp, #4
   14070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14074:	ldr	r3, [sp, #44]	; 0x2c
   14078:	cmp	r3, #0
   1407c:	bne	13ef4 <__assert_fail@plt+0x2180>
   14080:	b	14068 <__assert_fail@plt+0x22f4>
   14084:	mov	r3, r7
   14088:	ldr	r2, [pc, #28]	; 140ac <__assert_fail@plt+0x2338>
   1408c:	bl	11bd0 <snprintf@plt>
   14090:	b	14034 <__assert_fail@plt+0x22c0>
   14094:	muleq	r3, r4, r2
   14098:	andeq	r0, r2, lr
   1409c:	andeq	r0, r2, sl, lsl r0
   140a0:	andeq	r9, r3, r4, lsr r3
   140a4:	andeq	r5, r2, r4, asr #9
   140a8:	andeq	r9, r3, r0, lsr r3
   140ac:	andeq	r7, r2, ip, lsl #13
   140b0:	push	{r4, r5, r6, r7, r8, lr}
   140b4:	mov	r5, r0
   140b8:	mov	r0, #16
   140bc:	mov	r6, r1
   140c0:	mov	r7, r2
   140c4:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   140c8:	mov	r4, r0
   140cc:	subs	r0, r6, #0
   140d0:	beq	140d8 <__assert_fail@plt+0x2364>
   140d4:	bl	22510 <_obstack_memory_used@@Base+0x3084>
   140d8:	cmp	r5, #0
   140dc:	str	r0, [r4, #4]
   140e0:	mov	r0, r5
   140e4:	beq	140ec <__assert_fail@plt+0x2378>
   140e8:	bl	22510 <_obstack_memory_used@@Base+0x3084>
   140ec:	ldr	r3, [pc, #20]	; 14108 <__assert_fail@plt+0x2394>
   140f0:	str	r0, [r4]
   140f4:	strb	r7, [r4, #8]
   140f8:	ldr	r2, [r3, #3080]	; 0xc08
   140fc:	str	r4, [r3, #3080]	; 0xc08
   14100:	str	r2, [r4, #12]
   14104:	pop	{r4, r5, r6, r7, r8, pc}
   14108:	andeq	r9, r3, r0, lsr r3
   1410c:	ldr	r1, [r1]
   14110:	ldr	r0, [r0]
   14114:	b	118a0 <strcmp@plt>
   14118:	ldr	r3, [r1]
   1411c:	ldr	r1, [r0]
   14120:	mov	r0, r3
   14124:	b	118a0 <strcmp@plt>
   14128:	ldr	ip, [r1]
   1412c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14130:	mov	r6, #1
   14134:	ldrb	r4, [ip]
   14138:	ldr	lr, [r0]
   1413c:	mov	r9, #27
   14140:	cmp	r4, #61	; 0x3d
   14144:	mov	r8, #7
   14148:	mov	r7, #127	; 0x7f
   1414c:	sub	fp, r6, #1
   14150:	beq	141d8 <__assert_fail@plt+0x2464>
   14154:	bls	1419c <__assert_fail@plt+0x2428>
   14158:	cmp	r4, #92	; 0x5c
   1415c:	beq	141e8 <__assert_fail@plt+0x2474>
   14160:	cmp	r4, #94	; 0x5e
   14164:	bne	141b8 <__assert_fail@plt+0x2444>
   14168:	ldrb	r4, [ip, #1]
   1416c:	add	sl, ip, #1
   14170:	sub	r5, r4, #64	; 0x40
   14174:	cmp	r5, #62	; 0x3e
   14178:	bls	143ec <__assert_fail@plt+0x2678>
   1417c:	cmp	r4, #63	; 0x3f
   14180:	beq	145c4 <__assert_fail@plt+0x2850>
   14184:	mov	r2, #0
   14188:	str	lr, [r0]
   1418c:	str	sl, [r1]
   14190:	mov	r0, r2
   14194:	str	fp, [r3]
   14198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1419c:	cmp	r4, #0
   141a0:	beq	141ac <__assert_fail@plt+0x2438>
   141a4:	cmp	r4, #58	; 0x3a
   141a8:	bne	141b8 <__assert_fail@plt+0x2444>
   141ac:	mov	sl, ip
   141b0:	mov	r2, #1
   141b4:	b	14188 <__assert_fail@plt+0x2414>
   141b8:	add	ip, ip, #1
   141bc:	strb	r4, [lr]
   141c0:	ldrb	r4, [ip]
   141c4:	add	r6, r6, #1
   141c8:	add	lr, lr, #1
   141cc:	cmp	r4, #61	; 0x3d
   141d0:	sub	fp, r6, #1
   141d4:	bne	14154 <__assert_fail@plt+0x23e0>
   141d8:	cmp	r2, #0
   141dc:	beq	141b8 <__assert_fail@plt+0x2444>
   141e0:	mov	sl, ip
   141e4:	b	14188 <__assert_fail@plt+0x2414>
   141e8:	ldrb	r4, [ip, #1]
   141ec:	cmp	r4, #120	; 0x78
   141f0:	ldrls	pc, [pc, r4, lsl #2]
   141f4:	b	143e0 <__assert_fail@plt+0x266c>
   141f8:			; <UNDEFINED> instruction: 0x000145b4
   141fc:	andeq	r4, r1, r0, ror #7
   14200:	andeq	r4, r1, r0, ror #7
   14204:	andeq	r4, r1, r0, ror #7
   14208:	andeq	r4, r1, r0, ror #7
   1420c:	andeq	r4, r1, r0, ror #7
   14210:	andeq	r4, r1, r0, ror #7
   14214:	andeq	r4, r1, r0, ror #7
   14218:	andeq	r4, r1, r0, ror #7
   1421c:	andeq	r4, r1, r0, ror #7
   14220:	andeq	r4, r1, r0, ror #7
   14224:	andeq	r4, r1, r0, ror #7
   14228:	andeq	r4, r1, r0, ror #7
   1422c:	andeq	r4, r1, r0, ror #7
   14230:	andeq	r4, r1, r0, ror #7
   14234:	andeq	r4, r1, r0, ror #7
   14238:	andeq	r4, r1, r0, ror #7
   1423c:	andeq	r4, r1, r0, ror #7
   14240:	andeq	r4, r1, r0, ror #7
   14244:	andeq	r4, r1, r0, ror #7
   14248:	andeq	r4, r1, r0, ror #7
   1424c:	andeq	r4, r1, r0, ror #7
   14250:	andeq	r4, r1, r0, ror #7
   14254:	andeq	r4, r1, r0, ror #7
   14258:	andeq	r4, r1, r0, ror #7
   1425c:	andeq	r4, r1, r0, ror #7
   14260:	andeq	r4, r1, r0, ror #7
   14264:	andeq	r4, r1, r0, ror #7
   14268:	andeq	r4, r1, r0, ror #7
   1426c:	andeq	r4, r1, r0, ror #7
   14270:	andeq	r4, r1, r0, ror #7
   14274:	andeq	r4, r1, r0, ror #7
   14278:	andeq	r4, r1, r0, ror #7
   1427c:	andeq	r4, r1, r0, ror #7
   14280:	andeq	r4, r1, r0, ror #7
   14284:	andeq	r4, r1, r0, ror #7
   14288:	andeq	r4, r1, r0, ror #7
   1428c:	andeq	r4, r1, r0, ror #7
   14290:	andeq	r4, r1, r0, ror #7
   14294:	andeq	r4, r1, r0, ror #7
   14298:	andeq	r4, r1, r0, ror #7
   1429c:	andeq	r4, r1, r0, ror #7
   142a0:	andeq	r4, r1, r0, ror #7
   142a4:	andeq	r4, r1, r0, ror #7
   142a8:	andeq	r4, r1, r0, ror #7
   142ac:	andeq	r4, r1, r0, ror #7
   142b0:	andeq	r4, r1, r0, ror #7
   142b4:	andeq	r4, r1, r0, ror #7
   142b8:	andeq	r4, r1, r0, lsl #11
   142bc:	andeq	r4, r1, r0, lsl #11
   142c0:	andeq	r4, r1, r0, lsl #11
   142c4:	andeq	r4, r1, r0, lsl #11
   142c8:	andeq	r4, r1, r0, lsl #11
   142cc:	andeq	r4, r1, r0, lsl #11
   142d0:	andeq	r4, r1, r0, lsl #11
   142d4:	andeq	r4, r1, r0, lsl #11
   142d8:	andeq	r4, r1, r0, ror #7
   142dc:	andeq	r4, r1, r0, ror #7
   142e0:	andeq	r4, r1, r0, ror #7
   142e4:	andeq	r4, r1, r0, ror #7
   142e8:	andeq	r4, r1, r0, ror #7
   142ec:	andeq	r4, r1, r0, ror #7
   142f0:	andeq	r4, r1, r0, ror #7
   142f4:	andeq	r4, r1, r8, ror r5
   142f8:	andeq	r4, r1, r0, ror #7
   142fc:	andeq	r4, r1, r0, ror #7
   14300:	andeq	r4, r1, r0, ror #7
   14304:	andeq	r4, r1, r0, ror #7
   14308:	andeq	r4, r1, r0, ror #7
   1430c:	andeq	r4, r1, r0, ror #7
   14310:	andeq	r4, r1, r0, ror #7
   14314:	andeq	r4, r1, r0, ror #7
   14318:	andeq	r4, r1, r0, ror #7
   1431c:	andeq	r4, r1, r0, ror #7
   14320:	andeq	r4, r1, r0, ror #7
   14324:	andeq	r4, r1, r0, ror #7
   14328:	andeq	r4, r1, r0, ror #7
   1432c:	andeq	r4, r1, r0, ror #7
   14330:	andeq	r4, r1, r0, ror #7
   14334:	andeq	r4, r1, r0, ror #7
   14338:	andeq	r4, r1, r0, ror #7
   1433c:	andeq	r4, r1, r0, ror #7
   14340:	andeq	r4, r1, r0, ror #7
   14344:	andeq	r4, r1, r0, ror #7
   14348:	andeq	r4, r1, r0, ror #7
   1434c:	andeq	r4, r1, r0, ror #7
   14350:	andeq	r4, r1, r0, ror #7
   14354:	andeq	r4, r1, r0, ror #7
   14358:	andeq	r4, r1, ip, lsr r4
   1435c:	andeq	r4, r1, r0, ror #7
   14360:	andeq	r4, r1, r0, ror #7
   14364:	andeq	r4, r1, r0, ror #7
   14368:	andeq	r4, r1, r0, ror #7
   1436c:	andeq	r4, r1, r0, ror #7
   14370:	andeq	r4, r1, r0, ror #7
   14374:	andeq	r4, r1, r4, lsr r4
   14378:	andeq	r4, r1, r0, ror #7
   1437c:	andeq	r4, r1, ip, lsr #8
   14380:	andeq	r4, r1, r4, lsr #8
   14384:	andeq	r4, r1, r0, ror #7
   14388:	andeq	r4, r1, r0, ror #7
   1438c:	strdeq	r4, [r1], -ip
   14390:	andeq	r4, r1, ip, lsl #8
   14394:	andeq	r4, r1, r0, ror #7
   14398:	andeq	r4, r1, r0, ror #7
   1439c:	andeq	r4, r1, r0, ror #7
   143a0:	andeq	r4, r1, r0, ror #7
   143a4:	andeq	r4, r1, r0, ror #7
   143a8:	andeq	r4, r1, r0, ror #7
   143ac:	andeq	r4, r1, r0, ror #7
   143b0:	andeq	r4, r1, ip, lsl r4
   143b4:	andeq	r4, r1, r0, ror #7
   143b8:	andeq	r4, r1, r0, ror #7
   143bc:	andeq	r4, r1, r0, ror #7
   143c0:	andeq	r4, r1, r4, lsl r4
   143c4:	andeq	r4, r1, r0, ror #7
   143c8:	andeq	r4, r1, r4, lsl #8
   143cc:	andeq	r4, r1, r0, ror #7
   143d0:	ldrdeq	r4, [r1], -ip
   143d4:	andeq	r4, r1, r0, ror #7
   143d8:	andeq	r4, r1, ip, lsr r4
   143dc:	mov	r4, #11
   143e0:	strb	r4, [lr]
   143e4:	add	ip, ip, #2
   143e8:	b	141c0 <__assert_fail@plt+0x244c>
   143ec:	and	r4, r4, #31
   143f0:	strb	r4, [lr]
   143f4:	add	ip, ip, #2
   143f8:	b	141c0 <__assert_fail@plt+0x244c>
   143fc:	mov	r4, r9
   14400:	b	143e0 <__assert_fail@plt+0x266c>
   14404:	mov	r4, #9
   14408:	b	143e0 <__assert_fail@plt+0x266c>
   1440c:	mov	r4, #12
   14410:	b	143e0 <__assert_fail@plt+0x266c>
   14414:	mov	r4, #13
   14418:	b	143e0 <__assert_fail@plt+0x266c>
   1441c:	mov	r4, #10
   14420:	b	143e0 <__assert_fail@plt+0x266c>
   14424:	mov	r4, #8
   14428:	b	143e0 <__assert_fail@plt+0x266c>
   1442c:	mov	r4, r8
   14430:	b	143e0 <__assert_fail@plt+0x266c>
   14434:	mov	r4, #32
   14438:	b	143e0 <__assert_fail@plt+0x266c>
   1443c:	add	sl, ip, #2
   14440:	mov	r5, #0
   14444:	mov	ip, sl
   14448:	ldrb	r4, [sl], #1
   1444c:	sub	fp, r4, #48	; 0x30
   14450:	cmp	fp, #54	; 0x36
   14454:	ldrls	pc, [pc, fp, lsl #2]
   14458:	b	14570 <__assert_fail@plt+0x27fc>
   1445c:	andeq	r4, r1, r0, ror #10
   14460:	andeq	r4, r1, r0, ror #10
   14464:	andeq	r4, r1, r0, ror #10
   14468:	andeq	r4, r1, r0, ror #10
   1446c:	andeq	r4, r1, r0, ror #10
   14470:	andeq	r4, r1, r0, ror #10
   14474:	andeq	r4, r1, r0, ror #10
   14478:	andeq	r4, r1, r0, ror #10
   1447c:	andeq	r4, r1, r0, ror #10
   14480:	andeq	r4, r1, r0, ror #10
   14484:	andeq	r4, r1, r0, ror r5
   14488:	andeq	r4, r1, r0, ror r5
   1448c:	andeq	r4, r1, r0, ror r5
   14490:	andeq	r4, r1, r0, ror r5
   14494:	andeq	r4, r1, r0, ror r5
   14498:	andeq	r4, r1, r0, ror r5
   1449c:	andeq	r4, r1, r0, ror r5
   144a0:	andeq	r4, r1, ip, asr #10
   144a4:	andeq	r4, r1, ip, asr #10
   144a8:	andeq	r4, r1, ip, asr #10
   144ac:	andeq	r4, r1, ip, asr #10
   144b0:	andeq	r4, r1, ip, asr #10
   144b4:	andeq	r4, r1, ip, asr #10
   144b8:	andeq	r4, r1, r0, ror r5
   144bc:	andeq	r4, r1, r0, ror r5
   144c0:	andeq	r4, r1, r0, ror r5
   144c4:	andeq	r4, r1, r0, ror r5
   144c8:	andeq	r4, r1, r0, ror r5
   144cc:	andeq	r4, r1, r0, ror r5
   144d0:	andeq	r4, r1, r0, ror r5
   144d4:	andeq	r4, r1, r0, ror r5
   144d8:	andeq	r4, r1, r0, ror r5
   144dc:	andeq	r4, r1, r0, ror r5
   144e0:	andeq	r4, r1, r0, ror r5
   144e4:	andeq	r4, r1, r0, ror r5
   144e8:	andeq	r4, r1, r0, ror r5
   144ec:	andeq	r4, r1, r0, ror r5
   144f0:	andeq	r4, r1, r0, ror r5
   144f4:	andeq	r4, r1, r0, ror r5
   144f8:	andeq	r4, r1, r0, ror r5
   144fc:	andeq	r4, r1, r0, ror r5
   14500:	andeq	r4, r1, r0, ror r5
   14504:	andeq	r4, r1, r0, ror r5
   14508:	andeq	r4, r1, r0, ror r5
   1450c:	andeq	r4, r1, r0, ror r5
   14510:	andeq	r4, r1, r0, ror r5
   14514:	andeq	r4, r1, r0, ror r5
   14518:	andeq	r4, r1, r0, ror r5
   1451c:	andeq	r4, r1, r0, ror r5
   14520:	andeq	r4, r1, r8, lsr r5
   14524:	andeq	r4, r1, r8, lsr r5
   14528:	andeq	r4, r1, r8, lsr r5
   1452c:	andeq	r4, r1, r8, lsr r5
   14530:	andeq	r4, r1, r8, lsr r5
   14534:	andeq	r4, r1, r8, lsr r5
   14538:	lsl	r5, r5, #4
   1453c:	sub	r5, r5, #87	; 0x57
   14540:	uxtab	r5, r4, r5
   14544:	uxtb	r5, r5
   14548:	b	14444 <__assert_fail@plt+0x26d0>
   1454c:	lsl	r5, r5, #4
   14550:	sub	r5, r5, #55	; 0x37
   14554:	uxtab	r5, r4, r5
   14558:	uxtb	r5, r5
   1455c:	b	14444 <__assert_fail@plt+0x26d0>
   14560:	add	r5, r4, r5, lsl #4
   14564:	sub	r5, r5, #48	; 0x30
   14568:	and	r5, r5, #255	; 0xff
   1456c:	b	14444 <__assert_fail@plt+0x26d0>
   14570:	strb	r5, [lr]
   14574:	b	141c0 <__assert_fail@plt+0x244c>
   14578:	mov	r4, r7
   1457c:	b	143e0 <__assert_fail@plt+0x266c>
   14580:	sub	r4, r4, #48	; 0x30
   14584:	add	sl, ip, #2
   14588:	uxtb	r4, r4
   1458c:	ldrb	r5, [sl]
   14590:	mov	ip, sl
   14594:	add	sl, sl, #1
   14598:	sub	fp, r5, #48	; 0x30
   1459c:	cmp	fp, #7
   145a0:	add	r5, r5, r4, lsl #3
   145a4:	sub	r5, r5, #48	; 0x30
   145a8:	bls	145bc <__assert_fail@plt+0x2848>
   145ac:	strb	r4, [lr]
   145b0:	b	141c0 <__assert_fail@plt+0x244c>
   145b4:	add	sl, ip, #2
   145b8:	b	14184 <__assert_fail@plt+0x2410>
   145bc:	and	r4, r5, #255	; 0xff
   145c0:	b	1458c <__assert_fail@plt+0x2818>
   145c4:	strb	r7, [lr]
   145c8:	mov	ip, sl
   145cc:	b	141c0 <__assert_fail@plt+0x244c>
   145d0:	ldr	r3, [pc, #68]	; 1461c <__assert_fail@plt+0x28a8>
   145d4:	ldr	r3, [r3, #3084]	; 0xc0c
   145d8:	cmp	r3, #3
   145dc:	ldrls	pc, [pc, r3, lsl #2]
   145e0:	b	14614 <__assert_fail@plt+0x28a0>
   145e4:	andeq	r4, r1, r4, lsl #12
   145e8:	strdeq	r4, [r1], -ip
   145ec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145f0:	andeq	r4, r1, ip, lsl #12
   145f4:	mov	r0, #32
   145f8:	bx	lr
   145fc:	mov	r0, #128	; 0x80
   14600:	bx	lr
   14604:	mov	r0, #64	; 0x40
   14608:	bx	lr
   1460c:	mov	r0, #2048	; 0x800
   14610:	bx	lr
   14614:	push	{r4, lr}
   14618:	bl	11d2c <abort@plt>
   1461c:	andeq	r9, r3, r0, lsr r3
   14620:	push	{r4, r5, r6, lr}
   14624:	ldr	r5, [pc, #172]	; 146d8 <__assert_fail@plt+0x2964>
   14628:	ldr	r4, [pc, #172]	; 146dc <__assert_fail@plt+0x2968>
   1462c:	ldrb	r0, [r5, #3088]	; 0xc10
   14630:	ldrb	r3, [r5, #3089]	; 0xc11
   14634:	cmp	r0, #0
   14638:	moveq	r4, #2
   1463c:	cmp	r3, #0
   14640:	ldr	r3, [r5, #3092]	; 0xc14
   14644:	orrne	r4, r4, #1024	; 0x400
   14648:	cmp	r3, #0
   1464c:	bne	14678 <__assert_fail@plt+0x2904>
   14650:	bl	145d0 <__assert_fail@plt+0x285c>
   14654:	ldr	r3, [pc, #132]	; 146e0 <__assert_fail@plt+0x296c>
   14658:	ldrb	r2, [r3, #204]	; 0xcc
   1465c:	cmp	r2, #0
   14660:	orr	r4, r4, r0
   14664:	beq	146b4 <__assert_fail@plt+0x2940>
   14668:	orr	r4, r4, #524	; 0x20c
   1466c:	ldrb	r3, [r3, #205]	; 0xcd
   14670:	cmp	r3, #0
   14674:	orrne	r4, r4, #16
   14678:	ldr	r2, [r5, #3100]	; 0xc1c
   1467c:	cmp	r2, #6
   14680:	bhi	146d4 <__assert_fail@plt+0x2960>
   14684:	mov	r3, #1
   14688:	lsl	r3, r3, r2
   1468c:	tst	r3, #87	; 0x57
   14690:	bne	146ac <__assert_fail@plt+0x2938>
   14694:	tst	r3, #8
   14698:	bne	146c8 <__assert_fail@plt+0x2954>
   1469c:	tst	r3, #32
   146a0:	beq	146d4 <__assert_fail@plt+0x2960>
   146a4:	bl	145d0 <__assert_fail@plt+0x285c>
   146a8:	orr	r4, r4, r0
   146ac:	mov	r0, r4
   146b0:	pop	{r4, r5, r6, pc}
   146b4:	ldrb	r2, [r5, #3096]	; 0xc18
   146b8:	cmp	r2, #0
   146bc:	orreq	r4, r4, #516	; 0x204
   146c0:	beq	1466c <__assert_fail@plt+0x28f8>
   146c4:	b	14668 <__assert_fail@plt+0x28f4>
   146c8:	orr	r4, r4, #512	; 0x200
   146cc:	mov	r0, r4
   146d0:	pop	{r4, r5, r6, pc}
   146d4:	bl	11d2c <abort@plt>
   146d8:	andeq	r9, r3, r0, lsr r3
   146dc:	andeq	r0, r0, r2, lsl #2
   146e0:	ldrdeq	r9, [r3], -r0
   146e4:	push	{r4, lr}
   146e8:	mov	r4, r0
   146ec:	ldr	r0, [r0]
   146f0:	bl	1ad20 <__assert_fail@plt+0x8fac>
   146f4:	ldr	r0, [r4, #4]
   146f8:	bl	1ad20 <__assert_fail@plt+0x8fac>
   146fc:	ldr	r0, [r4, #8]
   14700:	bl	1ad20 <__assert_fail@plt+0x8fac>
   14704:	ldr	r0, [r4, #128]	; 0x80
   14708:	ldr	r3, [pc, #12]	; 1471c <__assert_fail@plt+0x29a8>
   1470c:	cmp	r0, r3
   14710:	popeq	{r4, pc}
   14714:	pop	{r4, lr}
   14718:	b	11ce4 <freecon@plt>
   1471c:	andeq	r9, r3, r0, lsr #5
   14720:	push	{r4, r5, r6, lr}
   14724:	ldr	r5, [pc, #100]	; 14790 <__assert_fail@plt+0x2a1c>
   14728:	ldr	r3, [r5, #3104]	; 0xc20
   1472c:	cmp	r3, #0
   14730:	movne	r4, #0
   14734:	beq	14754 <__assert_fail@plt+0x29e0>
   14738:	ldr	r3, [r5, #3152]	; 0xc50
   1473c:	ldr	r0, [r3, r4, lsl #2]
   14740:	bl	146e4 <__assert_fail@plt+0x2970>
   14744:	ldr	r3, [r5, #3104]	; 0xc20
   14748:	add	r4, r4, #1
   1474c:	cmp	r3, r4
   14750:	bhi	14738 <__assert_fail@plt+0x29c4>
   14754:	mov	r3, #0
   14758:	str	r3, [r5, #3104]	; 0xc20
   1475c:	strb	r3, [r5, #3108]	; 0xc24
   14760:	strb	r3, [r5, #3109]	; 0xc25
   14764:	str	r3, [r5, #3112]	; 0xc28
   14768:	str	r3, [r5, #3116]	; 0xc2c
   1476c:	str	r3, [r5, #3120]	; 0xc30
   14770:	str	r3, [r5, #3124]	; 0xc34
   14774:	str	r3, [r5, #3128]	; 0xc38
   14778:	str	r3, [r5, #3132]	; 0xc3c
   1477c:	str	r3, [r5, #3136]	; 0xc40
   14780:	str	r3, [r5, #3140]	; 0xc44
   14784:	str	r3, [r5, #3144]	; 0xc48
   14788:	str	r3, [r5, #3148]	; 0xc4c
   1478c:	pop	{r4, r5, r6, pc}
   14790:	andeq	r9, r3, r0, lsr r3
   14794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14798:	sub	sp, sp, #292	; 0x124
   1479c:	mov	ip, r3
   147a0:	add	r5, sp, #32
   147a4:	mov	r4, r2
   147a8:	ldr	r3, [sp, #328]	; 0x148
   147ac:	mov	r2, ip
   147b0:	str	r5, [sp]
   147b4:	bl	11c3c <statx@plt>
   147b8:	subs	ip, r0, #0
   147bc:	blt	14974 <__assert_fail@plt+0x2c00>
   147c0:	ldr	r1, [sp, #168]	; 0xa8
   147c4:	ldr	r2, [sp, #160]	; 0xa0
   147c8:	mov	fp, r1
   147cc:	lsr	r0, r1, #24
   147d0:	lsl	r1, r1, #8
   147d4:	str	r0, [sp, #12]
   147d8:	str	r1, [sp, #8]
   147dc:	ldrd	r6, [sp, #8]
   147e0:	ldr	r0, [pc, #416]	; 14988 <__assert_fail@plt+0x2c14>
   147e4:	mov	r1, #0
   147e8:	and	r6, r6, r0
   147ec:	and	r7, r7, r1
   147f0:	ldr	lr, [sp, #172]	; 0xac
   147f4:	strd	r6, [sp, #8]
   147f8:	mov	r3, #0
   147fc:	mov	r6, #0
   14800:	ldr	r7, [pc, #388]	; 1498c <__assert_fail@plt+0x2c18>
   14804:	and	r6, r6, r3
   14808:	lsr	r9, r2, #24
   1480c:	lsl	r8, r2, #8
   14810:	mov	sl, r6
   14814:	and	r7, r7, fp
   14818:	lsr	r6, lr, #20
   1481c:	mov	fp, r7
   14820:	str	r6, [sp, #20]
   14824:	and	r7, r9, r1
   14828:	and	r6, r8, r0
   1482c:	ldrd	r0, [sp, #8]
   14830:	strd	r6, [sp, #24]
   14834:	ldr	r7, [sp, #164]	; 0xa4
   14838:	orr	r0, r0, sl
   1483c:	orr	r1, r1, fp
   14840:	mov	sl, r0
   14844:	mov	fp, r1
   14848:	mov	r0, #0
   1484c:	ldr	r1, [pc, #312]	; 1498c <__assert_fail@plt+0x2c18>
   14850:	and	r0, r0, r3
   14854:	lsl	r3, lr, #12
   14858:	and	r1, r1, r2
   1485c:	str	r3, [sp, #16]
   14860:	ldrd	r2, [sp, #24]
   14864:	mov	r9, r1
   14868:	uxtb	r6, lr
   1486c:	orr	r2, r2, r0
   14870:	orr	r3, r3, r9
   14874:	orr	sl, sl, r6
   14878:	lsr	r1, r7, #20
   1487c:	lsl	r0, r7, #12
   14880:	uxtb	lr, r7
   14884:	mov	r8, r2
   14888:	ldrd	r6, [sp, #16]
   1488c:	mov	r9, r3
   14890:	add	r3, pc, #232	; 0xe8
   14894:	ldrd	r2, [r3]
   14898:	orr	r8, r8, lr
   1489c:	ldr	lr, [sp, #328]	; 0x148
   148a0:	and	r6, r6, r2
   148a4:	and	r7, r7, r3
   148a8:	tst	lr, #2048	; 0x800
   148ac:	strd	r6, [sp, #8]
   148b0:	and	r6, r2, r0
   148b4:	and	r7, r3, r1
   148b8:	mov	r2, r6
   148bc:	mov	r3, r7
   148c0:	ldrd	r6, [sp, #8]
   148c4:	orr	r2, r2, r8
   148c8:	orr	r3, r3, r9
   148cc:	orr	r6, r6, sl
   148d0:	orr	r7, r7, fp
   148d4:	ldrh	r1, [r5, #28]
   148d8:	ldrd	sl, [r5, #40]	; 0x28
   148dc:	strd	r6, [r4]
   148e0:	ldrd	r6, [r5, #32]
   148e4:	ldr	r0, [sp, #48]	; 0x30
   148e8:	strd	r2, [r4, #32]
   148ec:	ldr	r3, [sp, #36]	; 0x24
   148f0:	ldrd	r8, [r5, #48]	; 0x30
   148f4:	ldr	lr, [sp, #52]	; 0x34
   148f8:	ldr	r2, [sp, #104]	; 0x68
   148fc:	strd	r6, [r4, #96]	; 0x60
   14900:	str	r1, [r4, #16]
   14904:	ldr	r7, [r5, #64]	; 0x40
   14908:	ldr	r1, [r5, #112]	; 0x70
   1490c:	strd	sl, [r4, #48]	; 0x30
   14910:	ldr	fp, [sp, #136]	; 0x88
   14914:	ldr	sl, [r5, #96]	; 0x60
   14918:	str	r0, [r4, #20]
   1491c:	str	r3, [r4, #56]	; 0x38
   14920:	ldr	r0, [sp, #56]	; 0x38
   14924:	ldr	r3, [sp, #152]	; 0x98
   14928:	strd	r8, [r4, #64]	; 0x40
   1492c:	str	lr, [r4, #24]
   14930:	str	r0, [r4, #28]
   14934:	str	r2, [r4, #76]	; 0x4c
   14938:	str	r7, [r4, #72]	; 0x48
   1493c:	str	r3, [r4, #84]	; 0x54
   14940:	str	r1, [r4, #80]	; 0x50
   14944:	str	sl, [r4, #88]	; 0x58
   14948:	str	fp, [r4, #92]	; 0x5c
   1494c:	beq	14974 <__assert_fail@plt+0x2c00>
   14950:	ldr	r3, [sp, #32]
   14954:	tst	r3, #2048	; 0x800
   14958:	mvneq	r3, #0
   1495c:	ldrne	r2, [r5, #80]	; 0x50
   14960:	ldrne	r3, [sp, #120]	; 0x78
   14964:	strne	r2, [r4, #80]	; 0x50
   14968:	strne	r3, [r4, #84]	; 0x54
   1496c:	streq	r3, [r4, #84]	; 0x54
   14970:	streq	r3, [r4, #80]	; 0x50
   14974:	mov	r0, ip
   14978:	add	sp, sp, #292	; 0x124
   1497c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14980:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   14984:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14988:	andeq	pc, pc, r0, lsl #30
   1498c:			; <UNDEFINED> instruction: 0xfffff000
   14990:	ldr	r3, [pc, #84]	; 149ec <__assert_fail@plt+0x2c78>
   14994:	push	{r4, r5, lr}
   14998:	sub	sp, sp, #20
   1499c:	ldr	r1, [r3, #3156]	; 0xc54
   149a0:	mov	r4, r0
   149a4:	mov	r2, r0
   149a8:	mvn	r3, #0
   149ac:	str	r1, [sp]
   149b0:	add	r0, sp, #12
   149b4:	mov	r1, #2
   149b8:	bl	20e98 <_obstack_memory_used@@Base+0x1a0c>
   149bc:	ldrb	r2, [r4]
   149c0:	ldrb	r3, [sp, #12]
   149c4:	cmp	r2, r3
   149c8:	movne	r0, #1
   149cc:	bne	149e4 <__assert_fail@plt+0x2c70>
   149d0:	mov	r5, r0
   149d4:	mov	r0, r4
   149d8:	bl	11b94 <strlen@plt>
   149dc:	subs	r0, r5, r0
   149e0:	movne	r0, #1
   149e4:	add	sp, sp, #20
   149e8:	pop	{r4, r5, pc}
   149ec:	andeq	r9, r3, r0, lsr r3
   149f0:	push	{r4, r5, r6, lr}
   149f4:	mov	r4, r0
   149f8:	mov	r5, r1
   149fc:	bl	11bb8 <__errno_location@plt>
   14a00:	mov	r2, #0
   14a04:	mov	r1, r5
   14a08:	mov	r3, r0
   14a0c:	mov	r0, r4
   14a10:	str	r2, [r3]
   14a14:	pop	{r4, r5, r6, lr}
   14a18:	b	11abc <strcoll@plt>
   14a1c:	ldr	r1, [r1]
   14a20:	ldr	r0, [r0]
   14a24:	b	149f0 <__assert_fail@plt+0x2c7c>
   14a28:	ldr	r3, [r1]
   14a2c:	ldr	r1, [r0]
   14a30:	mov	r0, r3
   14a34:	b	149f0 <__assert_fail@plt+0x2c7c>
   14a38:	ldr	r3, [r1]
   14a3c:	ldr	r1, [r0]
   14a40:	mov	r0, r3
   14a44:	b	1a950 <__assert_fail@plt+0x8bdc>
   14a48:	ldr	r1, [r1]
   14a4c:	ldr	r0, [r0]
   14a50:	b	1a950 <__assert_fail@plt+0x8bdc>
   14a54:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a58:	subs	r8, r0, #0
   14a5c:	ldr	r7, [pc, #336]	; 14bb4 <__assert_fail@plt+0x2e40>
   14a60:	mov	r9, r1
   14a64:	beq	14a84 <__assert_fail@plt+0x2d10>
   14a68:	ldr	r3, [r7, #3160]	; 0xc58
   14a6c:	cmp	r3, #0
   14a70:	beq	14a84 <__assert_fail@plt+0x2d10>
   14a74:	mov	r2, #0
   14a78:	mov	r0, r2
   14a7c:	mov	r1, r8
   14a80:	bl	140b0 <__assert_fail@plt+0x233c>
   14a84:	ldr	r4, [r7, #3104]	; 0xc20
   14a88:	mov	sl, #0
   14a8c:	sub	r6, r4, #-1073741823	; 0xc0000001
   14a90:	cmp	r4, #0
   14a94:	lsl	r6, r6, #2
   14a98:	beq	14b0c <__assert_fail@plt+0x2d98>
   14a9c:	ldr	r3, [r7, #3152]	; 0xc50
   14aa0:	ldr	r5, [r3, r6]
   14aa4:	ldr	r3, [r5, #120]	; 0x78
   14aa8:	cmp	r3, #9
   14aac:	cmpne	r3, #3
   14ab0:	bne	14afc <__assert_fail@plt+0x2d88>
   14ab4:	cmp	r8, #0
   14ab8:	ldr	fp, [r5]
   14abc:	beq	14ae0 <__assert_fail@plt+0x2d6c>
   14ac0:	mov	r0, fp
   14ac4:	bl	19b6c <__assert_fail@plt+0x7df8>
   14ac8:	ldrb	r3, [r0]
   14acc:	cmp	r3, #46	; 0x2e
   14ad0:	beq	14b48 <__assert_fail@plt+0x2dd4>
   14ad4:	ldrb	r3, [fp]
   14ad8:	cmp	r3, #47	; 0x2f
   14adc:	bne	14b74 <__assert_fail@plt+0x2e00>
   14ae0:	mov	r0, fp
   14ae4:	mov	r2, r9
   14ae8:	ldr	r1, [r5, #4]
   14aec:	bl	140b0 <__assert_fail@plt+0x233c>
   14af0:	ldr	r3, [r5, #120]	; 0x78
   14af4:	cmp	r3, #9
   14af8:	beq	14ba8 <__assert_fail@plt+0x2e34>
   14afc:	sub	r4, r4, #1
   14b00:	cmp	r4, #0
   14b04:	sub	r6, r6, #4
   14b08:	bne	14a9c <__assert_fail@plt+0x2d28>
   14b0c:	ldr	r1, [r7, #3104]	; 0xc20
   14b10:	cmp	r1, #0
   14b14:	beq	14b40 <__assert_fail@plt+0x2dcc>
   14b18:	ldr	r0, [r7, #3152]	; 0xc50
   14b1c:	add	r1, r0, r1, lsl #2
   14b20:	mov	r3, r0
   14b24:	ldr	r2, [r3], #4
   14b28:	str	r2, [r0, r4, lsl #2]
   14b2c:	ldr	r2, [r2, #120]	; 0x78
   14b30:	cmp	r2, #9
   14b34:	addne	r4, r4, #1
   14b38:	cmp	r1, r3
   14b3c:	bne	14b24 <__assert_fail@plt+0x2db0>
   14b40:	str	r4, [r7, #3104]	; 0xc20
   14b44:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b48:	ldrb	r3, [r0, #1]
   14b4c:	cmp	r3, #46	; 0x2e
   14b50:	movne	r3, #1
   14b54:	moveq	r3, #2
   14b58:	ldrb	r3, [r0, r3]
   14b5c:	cmp	r3, #47	; 0x2f
   14b60:	cmpne	r3, #0
   14b64:	beq	14afc <__assert_fail@plt+0x2d88>
   14b68:	ldrb	r3, [fp]
   14b6c:	cmp	r3, #47	; 0x2f
   14b70:	beq	14ae0 <__assert_fail@plt+0x2d6c>
   14b74:	mov	r1, fp
   14b78:	mov	r2, sl
   14b7c:	mov	r0, r8
   14b80:	bl	1a738 <__assert_fail@plt+0x89c4>
   14b84:	mov	r2, r9
   14b88:	ldr	r1, [r5, #4]
   14b8c:	mov	fp, r0
   14b90:	bl	140b0 <__assert_fail@plt+0x233c>
   14b94:	mov	r0, fp
   14b98:	bl	1ad20 <__assert_fail@plt+0x8fac>
   14b9c:	ldr	r3, [r5, #120]	; 0x78
   14ba0:	cmp	r3, #9
   14ba4:	bne	14afc <__assert_fail@plt+0x2d88>
   14ba8:	mov	r0, r5
   14bac:	bl	146e4 <__assert_fail@plt+0x2970>
   14bb0:	b	14afc <__assert_fail@plt+0x2d88>
   14bb4:	andeq	r9, r3, r0, lsr r3
   14bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bbc:	sub	sp, sp, #12
   14bc0:	mov	r7, r1
   14bc4:	mov	r5, r0
   14bc8:	bl	11b94 <strlen@plt>
   14bcc:	mov	r8, #1
   14bd0:	ldr	r6, [pc, #156]	; 14c74 <__assert_fail@plt+0x2f00>
   14bd4:	ldr	sl, [pc, #156]	; 14c78 <__assert_fail@plt+0x2f04>
   14bd8:	mvn	r9, #0
   14bdc:	add	r1, r0, r8
   14be0:	mov	r0, #3
   14be4:	bl	220cc <_obstack_memory_used@@Base+0x2c40>
   14be8:	mov	fp, r0
   14bec:	mov	r4, r0
   14bf0:	ldrb	r3, [r5], #1
   14bf4:	cmp	r3, #0
   14bf8:	add	r2, r6, r3
   14bfc:	beq	14c44 <__assert_fail@plt+0x2ed0>
   14c00:	cmp	r3, #47	; 0x2f
   14c04:	movne	r1, #0
   14c08:	andeq	r1, r7, #1
   14c0c:	cmp	r1, #0
   14c10:	movne	r3, #47	; 0x2f
   14c14:	strbne	r3, [r4]
   14c18:	addne	r4, r4, #1
   14c1c:	bne	14bf0 <__assert_fail@plt+0x2e7c>
   14c20:	ldrb	r2, [r2, #3164]	; 0xc5c
   14c24:	cmp	r2, #0
   14c28:	beq	14c54 <__assert_fail@plt+0x2ee0>
   14c2c:	strb	r3, [r4]
   14c30:	ldrb	r3, [r5], #1
   14c34:	add	r4, r4, #1
   14c38:	cmp	r3, #0
   14c3c:	add	r2, r6, r3
   14c40:	bne	14c00 <__assert_fail@plt+0x2e8c>
   14c44:	mov	r0, fp
   14c48:	strb	r3, [r4]
   14c4c:	add	sp, sp, #12
   14c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c54:	str	r3, [sp]
   14c58:	mov	r0, r4
   14c5c:	mov	r3, sl
   14c60:	mov	r2, r9
   14c64:	mov	r1, r8
   14c68:	bl	11bc4 <__sprintf_chk@plt>
   14c6c:	add	r4, r4, r0
   14c70:	b	14bf0 <__assert_fail@plt+0x2e7c>
   14c74:	andeq	r9, r3, r0, lsr r3
   14c78:	ldrdeq	r5, [r2], -r0
   14c7c:	ldr	ip, [pc, #76]	; 14cd0 <__assert_fail@plt+0x2f5c>
   14c80:	ldr	r3, [pc, #76]	; 14cd4 <__assert_fail@plt+0x2f60>
   14c84:	push	{r4, r5}
   14c88:	ldr	r3, [r3]
   14c8c:	ldrd	r4, [ip]
   14c90:	ldr	r2, [r3, #20]
   14c94:	adds	r4, r4, #1
   14c98:	ldr	r1, [r3, #24]
   14c9c:	adc	r5, r5, #0
   14ca0:	cmp	r2, r1
   14ca4:	strd	r4, [ip]
   14ca8:	bcs	14cc0 <__assert_fail@plt+0x2f4c>
   14cac:	add	r1, r2, #1
   14cb0:	str	r1, [r3, #20]
   14cb4:	strb	r0, [r2]
   14cb8:	pop	{r4, r5}
   14cbc:	bx	lr
   14cc0:	mov	r1, r0
   14cc4:	pop	{r4, r5}
   14cc8:	mov	r0, r3
   14ccc:	b	11c48 <__overflow@plt>
   14cd0:	muleq	r3, r0, r0
   14cd4:	andeq	r9, r3, r4, lsr #6
   14cd8:	cmp	r0, r1
   14cdc:	bxcs	lr
   14ce0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ce4:	mov	r5, r0
   14ce8:	mov	sl, r1
   14cec:	ldr	r6, [pc, #204]	; 14dc0 <__assert_fail@plt+0x304c>
   14cf0:	ldr	r7, [pc, #204]	; 14dc4 <__assert_fail@plt+0x3050>
   14cf4:	mov	r8, #32
   14cf8:	b	14d64 <__assert_fail@plt+0x2ff0>
   14cfc:	mov	r1, r4
   14d00:	mov	r0, sl
   14d04:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   14d08:	add	fp, r5, #1
   14d0c:	mov	r1, r4
   14d10:	mov	r9, r0
   14d14:	mov	r0, fp
   14d18:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   14d1c:	cmp	r9, r0
   14d20:	bls	14da8 <__assert_fail@plt+0x3034>
   14d24:	ldr	r0, [r7]
   14d28:	ldr	r2, [r0, #24]
   14d2c:	ldr	r3, [r0, #20]
   14d30:	cmp	r3, r2
   14d34:	addcc	r2, r3, #1
   14d38:	strcc	r2, [r0, #20]
   14d3c:	movcc	r2, #9
   14d40:	strbcc	r2, [r3]
   14d44:	bcs	14db0 <__assert_fail@plt+0x303c>
   14d48:	mov	r1, r4
   14d4c:	mov	r0, r5
   14d50:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   14d54:	add	r4, r5, r4
   14d58:	sub	r5, r4, r1
   14d5c:	cmp	sl, r5
   14d60:	bls	14da4 <__assert_fail@plt+0x3030>
   14d64:	ldr	r4, [r6, #3432]	; 0xd68
   14d68:	cmp	r4, #0
   14d6c:	bne	14cfc <__assert_fail@plt+0x2f88>
   14d70:	add	r5, r5, #1
   14d74:	ldr	r0, [r7]
   14d78:	ldr	r3, [r0, #20]
   14d7c:	ldr	r2, [r0, #24]
   14d80:	cmp	r3, r2
   14d84:	addcc	r2, r3, #1
   14d88:	strcc	r2, [r0, #20]
   14d8c:	strbcc	r8, [r3]
   14d90:	bcc	14d5c <__assert_fail@plt+0x2fe8>
   14d94:	mov	r1, r8
   14d98:	bl	11c48 <__overflow@plt>
   14d9c:	cmp	sl, r5
   14da0:	bhi	14d64 <__assert_fail@plt+0x2ff0>
   14da4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14da8:	mov	r5, fp
   14dac:	b	14d74 <__assert_fail@plt+0x3000>
   14db0:	mov	r1, #9
   14db4:	bl	11c48 <__overflow@plt>
   14db8:	ldr	r4, [r6, #3432]	; 0xd68
   14dbc:	b	14d48 <__assert_fail@plt+0x2fd4>
   14dc0:	andeq	r9, r3, r0, lsr r3
   14dc4:	andeq	r9, r3, r4, lsr #6
   14dc8:	push	{r4, r5, r6, r7, r8, lr}
   14dcc:	ldr	r3, [r1, #12]
   14dd0:	ldr	r4, [r1, #8]
   14dd4:	sub	r5, r3, r4
   14dd8:	lsrs	r5, r5, #3
   14ddc:	popeq	{r4, r5, r6, r7, r8, pc}
   14de0:	cmp	r3, r4
   14de4:	ldr	ip, [r1, #24]
   14de8:	ldrbeq	r2, [r1, #40]	; 0x28
   14dec:	ldr	lr, [r1, #16]
   14df0:	add	r3, r3, ip
   14df4:	orreq	r2, r2, #2
   14df8:	strbeq	r2, [r1, #40]	; 0x28
   14dfc:	ldr	r2, [r1, #4]
   14e00:	bic	r3, r3, ip
   14e04:	sub	ip, r3, r2
   14e08:	sub	r2, lr, r2
   14e0c:	cmp	ip, r2
   14e10:	ldr	r8, [pc, #112]	; 14e88 <__assert_fail@plt+0x3114>
   14e14:	str	r3, [r1, #12]
   14e18:	strhi	lr, [r1, #12]
   14e1c:	mov	r3, r1
   14e20:	ldr	r2, [r1, #12]
   14e24:	ldr	r1, [r8]
   14e28:	str	r2, [r3, #8]
   14e2c:	bl	11864 <fputs_unlocked@plt>
   14e30:	ldr	r7, [pc, #84]	; 14e8c <__assert_fail@plt+0x3118>
   14e34:	add	r5, r4, r5, lsl #3
   14e38:	mov	r6, #1
   14e3c:	ldrd	r2, [r4], #8
   14e40:	mov	r1, r7
   14e44:	mov	r0, r6
   14e48:	bl	11bf4 <__printf_chk@plt>
   14e4c:	cmp	r5, r4
   14e50:	bne	14e3c <__assert_fail@plt+0x30c8>
   14e54:	ldr	r0, [r8]
   14e58:	ldr	r3, [r0, #20]
   14e5c:	ldr	r2, [r0, #24]
   14e60:	cmp	r3, r2
   14e64:	bcs	14e7c <__assert_fail@plt+0x3108>
   14e68:	add	r1, r3, #1
   14e6c:	mov	r2, #10
   14e70:	str	r1, [r0, #20]
   14e74:	strb	r2, [r3]
   14e78:	pop	{r4, r5, r6, r7, r8, pc}
   14e7c:	mov	r1, #10
   14e80:	pop	{r4, r5, r6, r7, r8, lr}
   14e84:	b	11c48 <__overflow@plt>
   14e88:	andeq	r9, r3, r4, lsr #6
   14e8c:	ldrdeq	r5, [r2], -r8
   14e90:	ldr	r3, [pc, #20]	; 14eac <__assert_fail@plt+0x3138>
   14e94:	ldr	r2, [r3]
   14e98:	cmp	r2, #0
   14e9c:	ldreq	r2, [r3, #3436]	; 0xd6c
   14ea0:	addeq	r2, r2, #1
   14ea4:	streq	r2, [r3, #3436]	; 0xd6c
   14ea8:	bx	lr
   14eac:	andeq	r9, r3, r0, lsr r3
   14eb0:	push	{r4, r5, r6, lr}
   14eb4:	mov	r5, r2
   14eb8:	mov	r6, r1
   14ebc:	mov	r4, r0
   14ec0:	bl	11bb8 <__errno_location@plt>
   14ec4:	mov	r1, r5
   14ec8:	ldr	r5, [r0]
   14ecc:	mov	r0, #4
   14ed0:	bl	21140 <_obstack_memory_used@@Base+0x1cb4>
   14ed4:	mov	r2, r6
   14ed8:	mov	r1, r5
   14edc:	mov	r3, r0
   14ee0:	mov	r0, #0
   14ee4:	bl	11a8c <error@plt>
   14ee8:	cmp	r4, #0
   14eec:	ldr	r3, [pc, #32]	; 14f14 <__assert_fail@plt+0x31a0>
   14ef0:	beq	14f00 <__assert_fail@plt+0x318c>
   14ef4:	mov	r2, #2
   14ef8:	str	r2, [r3, #3440]	; 0xd70
   14efc:	pop	{r4, r5, r6, pc}
   14f00:	ldr	r2, [r3, #3440]	; 0xd70
   14f04:	cmp	r2, #0
   14f08:	moveq	r2, #1
   14f0c:	streq	r2, [r3, #3440]	; 0xd70
   14f10:	pop	{r4, r5, r6, pc}
   14f14:	andeq	r9, r3, r0, lsr r3
   14f18:	ldr	r3, [r1, #120]	; 0x78
   14f1c:	cmp	r3, #9
   14f20:	cmpne	r3, #3
   14f24:	beq	14f5c <__assert_fail@plt+0x31e8>
   14f28:	ldr	r3, [r1, #124]	; 0x7c
   14f2c:	and	r3, r3, #61440	; 0xf000
   14f30:	cmp	r3, #16384	; 0x4000
   14f34:	beq	14f5c <__assert_fail@plt+0x31e8>
   14f38:	ldr	r3, [r0, #120]	; 0x78
   14f3c:	cmp	r3, #9
   14f40:	cmpne	r3, #3
   14f44:	moveq	r3, #1
   14f48:	movne	r3, #0
   14f4c:	mvneq	r3, #0
   14f50:	bne	14f70 <__assert_fail@plt+0x31fc>
   14f54:	mov	r0, r3
   14f58:	bx	lr
   14f5c:	ldr	r3, [r0, #120]	; 0x78
   14f60:	cmp	r3, #9
   14f64:	cmpne	r3, #3
   14f68:	movne	r3, #1
   14f6c:	beq	14f88 <__assert_fail@plt+0x3214>
   14f70:	ldr	ip, [r0, #124]	; 0x7c
   14f74:	and	ip, ip, #61440	; 0xf000
   14f78:	cmp	ip, #16384	; 0x4000
   14f7c:	subeq	r3, r3, #1
   14f80:	cmp	r3, #0
   14f84:	bne	14f54 <__assert_fail@plt+0x31e0>
   14f88:	bx	r2
   14f8c:	ldr	r2, [pc]	; 14f94 <__assert_fail@plt+0x3220>
   14f90:	b	14f18 <__assert_fail@plt+0x31a4>
   14f94:	andeq	r6, r1, r4, lsr fp
   14f98:	ldr	r2, [pc]	; 14fa0 <__assert_fail@plt+0x322c>
   14f9c:	b	14f18 <__assert_fail@plt+0x31a4>
   14fa0:	andeq	r6, r1, r0, asr #22
   14fa4:	ldr	r2, [pc]	; 14fac <__assert_fail@plt+0x3238>
   14fa8:	b	14f18 <__assert_fail@plt+0x31a4>
   14fac:	andeq	r6, r1, ip, asr #22
   14fb0:	ldr	r2, [pc]	; 14fb8 <__assert_fail@plt+0x3244>
   14fb4:	b	14f18 <__assert_fail@plt+0x31a4>
   14fb8:	andeq	r6, r1, r4, ror #22
   14fbc:	ldr	r2, [pc]	; 14fc4 <__assert_fail@plt+0x3250>
   14fc0:	b	14f18 <__assert_fail@plt+0x31a4>
   14fc4:	andeq	r6, r1, r0, ror #23
   14fc8:	ldr	r2, [pc]	; 14fd0 <__assert_fail@plt+0x325c>
   14fcc:	b	14f18 <__assert_fail@plt+0x31a4>
   14fd0:	andeq	r6, r1, ip, ror #23
   14fd4:	ldr	r2, [pc]	; 14fdc <__assert_fail@plt+0x3268>
   14fd8:	b	14f18 <__assert_fail@plt+0x31a4>
   14fdc:	strdeq	r6, [r1], -r8
   14fe0:	ldr	r2, [pc]	; 14fe8 <__assert_fail@plt+0x3274>
   14fe4:	b	14f18 <__assert_fail@plt+0x31a4>
   14fe8:	andeq	r6, r1, r0, lsl ip
   14fec:	ldr	r2, [pc]	; 14ff4 <__assert_fail@plt+0x3280>
   14ff0:	b	14f18 <__assert_fail@plt+0x31a4>
   14ff4:	andeq	r6, r1, ip, lsl #25
   14ff8:	ldr	r2, [pc]	; 15000 <__assert_fail@plt+0x328c>
   14ffc:	b	14f18 <__assert_fail@plt+0x31a4>
   15000:	muleq	r1, r8, ip
   15004:	ldr	r2, [pc]	; 1500c <__assert_fail@plt+0x3298>
   15008:	b	14f18 <__assert_fail@plt+0x31a4>
   1500c:	andeq	r6, r1, r4, lsr #25
   15010:	ldr	r2, [pc]	; 15018 <__assert_fail@plt+0x32a4>
   15014:	b	14f18 <__assert_fail@plt+0x31a4>
   15018:			; <UNDEFINED> instruction: 0x00016cbc
   1501c:	ldr	r2, [pc]	; 15024 <__assert_fail@plt+0x32b0>
   15020:	b	14f18 <__assert_fail@plt+0x31a4>
   15024:	andeq	r6, r1, r8, lsr sp
   15028:	ldr	r2, [pc]	; 15030 <__assert_fail@plt+0x32bc>
   1502c:	b	14f18 <__assert_fail@plt+0x31a4>
   15030:	andeq	r6, r1, r4, asr #26
   15034:	ldr	r2, [pc]	; 1503c <__assert_fail@plt+0x32c8>
   15038:	b	14f18 <__assert_fail@plt+0x31a4>
   1503c:	andeq	r6, r1, r0, asr sp
   15040:	ldr	r2, [pc]	; 15048 <__assert_fail@plt+0x32d4>
   15044:	b	14f18 <__assert_fail@plt+0x31a4>
   15048:	andeq	r6, r1, r8, ror #26
   1504c:	ldr	r2, [pc]	; 15054 <__assert_fail@plt+0x32e0>
   15050:	b	14f18 <__assert_fail@plt+0x31a4>
   15054:	andeq	r6, r1, r8, ror #19
   15058:	ldr	r2, [pc]	; 15060 <__assert_fail@plt+0x32ec>
   1505c:	b	14f18 <__assert_fail@plt+0x31a4>
   15060:	andeq	r6, r1, r4, lsr sl
   15064:	ldr	r2, [pc]	; 1506c <__assert_fail@plt+0x32f8>
   15068:	b	14f18 <__assert_fail@plt+0x31a4>
   1506c:	andeq	r6, r1, r0, lsl #21
   15070:	ldr	r2, [pc]	; 15078 <__assert_fail@plt+0x3304>
   15074:	b	14f18 <__assert_fail@plt+0x31a4>
   15078:	muleq	r1, r8, r9
   1507c:	ldr	r2, [pc]	; 15084 <__assert_fail@plt+0x3310>
   15080:	b	14f18 <__assert_fail@plt+0x31a4>
   15084:	andeq	r4, r1, ip, lsl sl
   15088:	ldr	r2, [pc]	; 15090 <__assert_fail@plt+0x331c>
   1508c:	b	14f18 <__assert_fail@plt+0x31a4>
   15090:	andeq	r4, r1, ip, lsl #2
   15094:	ldr	r2, [pc]	; 1509c <__assert_fail@plt+0x3328>
   15098:	b	14f18 <__assert_fail@plt+0x31a4>
   1509c:	andeq	r4, r1, r8, lsr #20
   150a0:	ldr	r2, [pc]	; 150a8 <__assert_fail@plt+0x3334>
   150a4:	b	14f18 <__assert_fail@plt+0x31a4>
   150a8:	andeq	r4, r1, r8, lsl r1
   150ac:	ldr	r2, [pc]	; 150b4 <__assert_fail@plt+0x3340>
   150b0:	b	14f18 <__assert_fail@plt+0x31a4>
   150b4:	andeq	r5, r1, r4, ror #5
   150b8:	ldr	r2, [pc]	; 150c0 <__assert_fail@plt+0x334c>
   150bc:	b	14f18 <__assert_fail@plt+0x31a4>
   150c0:	andeq	r5, r1, r0, asr #5
   150c4:	ldr	r2, [pc]	; 150cc <__assert_fail@plt+0x3358>
   150c8:	b	14f18 <__assert_fail@plt+0x31a4>
   150cc:	andeq	r5, r1, ip, asr #5
   150d0:	ldr	r2, [pc]	; 150d8 <__assert_fail@plt+0x3364>
   150d4:	b	14f18 <__assert_fail@plt+0x31a4>
   150d8:	andeq	r5, r1, r8, lsr #5
   150dc:	ldr	r2, [pc]	; 150e4 <__assert_fail@plt+0x3370>
   150e0:	b	14f18 <__assert_fail@plt+0x31a4>
   150e4:	andeq	r6, r1, ip, ror #6
   150e8:	ldr	r2, [pc]	; 150f0 <__assert_fail@plt+0x337c>
   150ec:	b	14f18 <__assert_fail@plt+0x31a4>
   150f0:	andeq	r6, r1, r8, asr #6
   150f4:	ldr	r2, [pc]	; 150fc <__assert_fail@plt+0x3388>
   150f8:	b	14f18 <__assert_fail@plt+0x31a4>
   150fc:	andeq	r6, r1, r4, asr r3
   15100:	ldr	r2, [pc]	; 15108 <__assert_fail@plt+0x3394>
   15104:	b	14f18 <__assert_fail@plt+0x31a4>
   15108:	andeq	r6, r1, r0, lsr r3
   1510c:	ldr	r2, [pc]	; 15114 <__assert_fail@plt+0x33a0>
   15110:	b	14f18 <__assert_fail@plt+0x31a4>
   15114:	andeq	r4, r1, r8, asr #20
   15118:	ldr	r2, [pc]	; 15120 <__assert_fail@plt+0x33ac>
   1511c:	b	14f18 <__assert_fail@plt+0x31a4>
   15120:	andeq	r4, r1, r8, lsr sl
   15124:	cmp	r0, #0
   15128:	beq	15150 <__assert_fail@plt+0x33dc>
   1512c:	and	r3, r1, #61440	; 0xf000
   15130:	cmp	r3, #32768	; 0x8000
   15134:	bne	15178 <__assert_fail@plt+0x3404>
   15138:	ldr	r3, [pc, #216]	; 15218 <__assert_fail@plt+0x34a4>
   1513c:	ldr	r3, [r3, #3444]	; 0xd74
   15140:	cmp	r3, #3
   15144:	beq	151bc <__assert_fail@plt+0x3448>
   15148:	mov	r0, #0
   1514c:	bx	lr
   15150:	cmp	r2, #5
   15154:	beq	151b8 <__assert_fail@plt+0x3444>
   15158:	cmp	r2, #9
   1515c:	cmpne	r2, #3
   15160:	moveq	r3, #1
   15164:	movne	r3, #0
   15168:	cmp	r3, #0
   1516c:	beq	1518c <__assert_fail@plt+0x3418>
   15170:	mov	r0, #47	; 0x2f
   15174:	bx	lr
   15178:	sub	r3, r3, #16384	; 0x4000
   1517c:	clz	r3, r3
   15180:	lsr	r3, r3, #5
   15184:	cmp	r3, #0
   15188:	bne	15170 <__assert_fail@plt+0x33fc>
   1518c:	ldr	ip, [pc, #132]	; 15218 <__assert_fail@plt+0x34a4>
   15190:	ldr	ip, [ip, #3444]	; 0xd74
   15194:	cmp	ip, #1
   15198:	beq	15148 <__assert_fail@plt+0x33d4>
   1519c:	cmp	r0, #0
   151a0:	beq	151cc <__assert_fail@plt+0x3458>
   151a4:	and	r1, r1, #61440	; 0xf000
   151a8:	cmp	r1, #40960	; 0xa000
   151ac:	bne	151e4 <__assert_fail@plt+0x3470>
   151b0:	mov	r0, #64	; 0x40
   151b4:	bx	lr
   151b8:	bx	lr
   151bc:	tst	r1, #73	; 0x49
   151c0:	moveq	r0, #0
   151c4:	movne	r0, #42	; 0x2a
   151c8:	bx	lr
   151cc:	cmp	r2, #6
   151d0:	beq	151b0 <__assert_fail@plt+0x343c>
   151d4:	cmp	r2, #1
   151d8:	bne	15208 <__assert_fail@plt+0x3494>
   151dc:	mov	r0, #124	; 0x7c
   151e0:	bx	lr
   151e4:	cmp	r1, #4096	; 0x1000
   151e8:	beq	151dc <__assert_fail@plt+0x3468>
   151ec:	sub	r0, r1, #49152	; 0xc000
   151f0:	clz	r0, r0
   151f4:	lsr	r0, r0, #5
   151f8:	cmp	r0, #0
   151fc:	movne	r0, #61	; 0x3d
   15200:	moveq	r0, #0
   15204:	bx	lr
   15208:	sub	r0, r2, #7
   1520c:	clz	r0, r0
   15210:	lsr	r0, r0, #5
   15214:	b	151f8 <__assert_fail@plt+0x3484>
   15218:	andeq	r9, r3, r0, lsr r3
   1521c:	push	{r4, lr}
   15220:	bl	15124 <__assert_fail@plt+0x33b0>
   15224:	subs	r4, r0, #0
   15228:	beq	15230 <__assert_fail@plt+0x34bc>
   1522c:	bl	14c7c <__assert_fail@plt+0x2f08>
   15230:	adds	r0, r4, #0
   15234:	movne	r0, #1
   15238:	pop	{r4, pc}
   1523c:	push	{r4, r5, r6, r7, r8, lr}
   15240:	mov	r7, r1
   15244:	mov	r6, r0
   15248:	mov	r1, #46	; 0x2e
   1524c:	ldr	r0, [r0]
   15250:	mov	r5, r2
   15254:	bl	11c78 <strrchr@plt>
   15258:	mov	r1, #46	; 0x2e
   1525c:	mov	r4, r0
   15260:	ldr	r0, [r7]
   15264:	bl	11c78 <strrchr@plt>
   15268:	ldr	r3, [pc, #52]	; 152a4 <__assert_fail@plt+0x3530>
   1526c:	cmp	r0, #0
   15270:	movne	r1, r0
   15274:	moveq	r1, r3
   15278:	cmp	r4, #0
   1527c:	movne	r0, r4
   15280:	moveq	r0, r3
   15284:	blx	r5
   15288:	cmp	r0, #0
   1528c:	popne	{r4, r5, r6, r7, r8, pc}
   15290:	ldr	r1, [r7]
   15294:	ldr	r0, [r6]
   15298:	mov	r3, r5
   1529c:	pop	{r4, r5, r6, r7, r8, lr}
   152a0:	bx	r3
   152a4:	andeq	r7, r2, r4, lsl #29
   152a8:	mov	r3, r1
   152ac:	ldr	r2, [pc, #8]	; 152bc <__assert_fail@plt+0x3548>
   152b0:	mov	r1, r0
   152b4:	mov	r0, r3
   152b8:	b	1523c <__assert_fail@plt+0x34c8>
   152bc:	andeq	r1, r1, r0, lsr #17
   152c0:	ldr	r2, [pc]	; 152c8 <__assert_fail@plt+0x3554>
   152c4:	b	1523c <__assert_fail@plt+0x34c8>
   152c8:	andeq	r1, r1, r0, lsr #17
   152cc:	mov	r3, r1
   152d0:	ldr	r2, [pc, #8]	; 152e0 <__assert_fail@plt+0x356c>
   152d4:	mov	r1, r0
   152d8:	mov	r0, r3
   152dc:	b	1523c <__assert_fail@plt+0x34c8>
   152e0:	strdeq	r4, [r1], -r0
   152e4:	ldr	r2, [pc]	; 152ec <__assert_fail@plt+0x3578>
   152e8:	b	1523c <__assert_fail@plt+0x34c8>
   152ec:	strdeq	r4, [r1], -r0
   152f0:	ldr	ip, [pc, #40]	; 15320 <__assert_fail@plt+0x35ac>
   152f4:	push	{r4, r5}
   152f8:	mov	r2, r1
   152fc:	ldrd	r4, [ip]
   15300:	ldr	r3, [pc, #28]	; 15324 <__assert_fail@plt+0x35b0>
   15304:	adds	r4, r4, r1
   15308:	adc	r5, r5, #0
   1530c:	ldr	r3, [r3]
   15310:	strd	r4, [ip]
   15314:	mov	r1, #1
   15318:	pop	{r4, r5}
   1531c:	b	11960 <fwrite_unlocked@plt>
   15320:	muleq	r3, r0, r0
   15324:	andeq	r9, r3, r4, lsr #6
   15328:	push	{r4, r5, r6, lr}
   1532c:	subs	r6, r0, #0
   15330:	sub	sp, sp, #8
   15334:	beq	15380 <__assert_fail@plt+0x360c>
   15338:	mov	r1, #0
   1533c:	bl	1d504 <__assert_fail@plt+0xb790>
   15340:	ldr	r3, [sp, #24]
   15344:	mov	r5, #32
   15348:	sub	r4, r3, r0
   1534c:	mov	r0, r6
   15350:	bl	11b94 <strlen@plt>
   15354:	bic	r4, r4, r4, asr #31
   15358:	mov	r1, r0
   1535c:	mov	r0, r6
   15360:	bl	152f0 <__assert_fail@plt+0x357c>
   15364:	sub	r4, r4, #1
   15368:	mov	r0, r5
   1536c:	bl	14c7c <__assert_fail@plt+0x2f08>
   15370:	cmn	r4, #1
   15374:	bne	15364 <__assert_fail@plt+0x35f0>
   15378:	add	sp, sp, #8
   1537c:	pop	{r4, r5, r6, pc}
   15380:	strd	r2, [sp]
   15384:	ldr	r1, [pc, #36]	; 153b0 <__assert_fail@plt+0x363c>
   15388:	ldr	r2, [sp, #24]
   1538c:	mov	r0, #1
   15390:	bl	11bf4 <__printf_chk@plt>
   15394:	ldr	r1, [pc, #24]	; 153b4 <__assert_fail@plt+0x3640>
   15398:	ldrd	r2, [r1]
   1539c:	adds	r2, r2, r0
   153a0:	adc	r3, r3, r0, asr #31
   153a4:	strd	r2, [r1]
   153a8:	add	sp, sp, #8
   153ac:	pop	{r4, r5, r6, pc}
   153b0:	andeq	r5, r2, r0, ror #9
   153b4:	muleq	r3, r0, r0
   153b8:	cmp	r2, #0
   153bc:	push	{r4, r5, lr}
   153c0:	mov	r5, r1
   153c4:	sub	sp, sp, #12
   153c8:	mov	r4, r0
   153cc:	beq	15404 <__assert_fail@plt+0x3690>
   153d0:	ldr	r3, [pc, #52]	; 1540c <__assert_fail@plt+0x3698>
   153d4:	ldrb	r3, [r3, #3448]	; 0xd78
   153d8:	cmp	r3, #0
   153dc:	movne	r0, #0
   153e0:	beq	153fc <__assert_fail@plt+0x3688>
   153e4:	str	r5, [sp]
   153e8:	mov	r2, r4
   153ec:	mov	r3, #0
   153f0:	bl	15328 <__assert_fail@plt+0x35b4>
   153f4:	add	sp, sp, #12
   153f8:	pop	{r4, r5, pc}
   153fc:	bl	1ca68 <__assert_fail@plt+0xacf4>
   15400:	b	153e4 <__assert_fail@plt+0x3670>
   15404:	ldr	r0, [pc, #4]	; 15410 <__assert_fail@plt+0x369c>
   15408:	b	153e4 <__assert_fail@plt+0x3670>
   1540c:	andeq	r9, r3, r0, lsr r3
   15410:	andeq	r5, r2, r8, ror #9
   15414:	ldr	r2, [r0, #12]
   15418:	ldr	r3, [r0, #16]
   1541c:	push	{r4, lr}
   15420:	sub	r3, r3, r2
   15424:	cmp	r3, #7
   15428:	mov	r4, r0
   1542c:	bls	15450 <__assert_fail@plt+0x36dc>
   15430:	ldr	r3, [pc, #40]	; 15460 <__assert_fail@plt+0x36ec>
   15434:	ldm	r3!, {r0, r1}
   15438:	str	r0, [r2]
   1543c:	str	r1, [r2, #4]
   15440:	ldr	r3, [r4, #12]
   15444:	add	r3, r3, #8
   15448:	str	r3, [r4, #12]
   1544c:	pop	{r4, pc}
   15450:	mov	r1, #8
   15454:	bl	1f2cc <_obstack_newchunk@@Base>
   15458:	ldr	r2, [r4, #12]
   1545c:	b	15430 <__assert_fail@plt+0x36bc>
   15460:	muleq	r3, r0, r0
   15464:	push	{r4, lr}
   15468:	ldr	r4, [pc, #48]	; 154a0 <__assert_fail@plt+0x372c>
   1546c:	ldr	r3, [r4, #20]
   15470:	cmp	r3, #0
   15474:	beq	15484 <__assert_fail@plt+0x3710>
   15478:	add	r0, r4, #16
   1547c:	pop	{r4, lr}
   15480:	b	154a4 <__assert_fail@plt+0x3730>
   15484:	mov	r0, r4
   15488:	bl	154a4 <__assert_fail@plt+0x3730>
   1548c:	add	r0, r4, #24
   15490:	bl	154a4 <__assert_fail@plt+0x3730>
   15494:	add	r0, r4, #8
   15498:	pop	{r4, lr}
   1549c:	b	154a4 <__assert_fail@plt+0x3730>
   154a0:	ldrdeq	r9, [r3], -r0
   154a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a8:	mov	r7, r0
   154ac:	ldr	r9, [pc, #276]	; 155c8 <__assert_fail@plt+0x3854>
   154b0:	sub	sp, sp, #148	; 0x94
   154b4:	ldrb	r8, [r9, #3449]	; 0xd79
   154b8:	cmp	r8, #0
   154bc:	beq	154e0 <__assert_fail@plt+0x376c>
   154c0:	ldr	r3, [pc, #260]	; 155cc <__assert_fail@plt+0x3858>
   154c4:	mov	r2, #1
   154c8:	ldr	r1, [r7]
   154cc:	ldr	r3, [r3]
   154d0:	ldr	r0, [r7, #4]
   154d4:	bl	11960 <fwrite_unlocked@plt>
   154d8:	add	sp, sp, #148	; 0x94
   154dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e0:	mov	r3, #1
   154e4:	mov	r0, r3
   154e8:	strb	r3, [r9, #3449]	; 0xd79
   154ec:	bl	11b88 <tcgetpgrp@plt>
   154f0:	cmp	r0, #0
   154f4:	blt	155c0 <__assert_fail@plt+0x384c>
   154f8:	ldr	r6, [pc, #208]	; 155d0 <__assert_fail@plt+0x385c>
   154fc:	ldr	r0, [pc, #208]	; 155d4 <__assert_fail@plt+0x3860>
   15500:	add	r9, r9, #3440	; 0xd70
   15504:	bl	11c60 <sigemptyset@plt>
   15508:	add	fp, r9, #12
   1550c:	add	sl, r6, #44	; 0x2c
   15510:	mov	r5, r6
   15514:	mov	r4, #20
   15518:	b	15520 <__assert_fail@plt+0x37ac>
   1551c:	ldr	r4, [r5, #4]!
   15520:	mov	r1, r8
   15524:	add	r2, sp, #4
   15528:	mov	r0, r4
   1552c:	bl	11a14 <sigaction@plt>
   15530:	ldr	r3, [sp, #4]
   15534:	mov	r1, r4
   15538:	cmp	r3, #1
   1553c:	mov	r0, fp
   15540:	beq	15548 <__assert_fail@plt+0x37d4>
   15544:	bl	11aec <sigaddset@plt>
   15548:	cmp	r5, sl
   1554c:	bne	1551c <__assert_fail@plt+0x37a8>
   15550:	add	r1, r9, #12
   15554:	mov	r2, #128	; 0x80
   15558:	add	r0, sp, #8
   1555c:	mov	r9, r1
   15560:	bl	11930 <memcpy@plt>
   15564:	mov	r3, #268435456	; 0x10000000
   15568:	ldr	fp, [pc, #104]	; 155d8 <__assert_fail@plt+0x3864>
   1556c:	ldr	sl, [pc, #104]	; 155dc <__assert_fail@plt+0x3868>
   15570:	mov	r4, #20
   15574:	mov	r8, #0
   15578:	str	r3, [sp, #136]	; 0x88
   1557c:	b	15584 <__assert_fail@plt+0x3810>
   15580:	ldr	r4, [r6, #4]!
   15584:	mov	r1, r4
   15588:	mov	r0, r9
   1558c:	bl	1199c <sigismember@plt>
   15590:	mov	r2, r8
   15594:	add	r1, sp, #4
   15598:	cmp	r0, #0
   1559c:	mov	r0, r4
   155a0:	beq	155b8 <__assert_fail@plt+0x3844>
   155a4:	cmp	r4, #20
   155a8:	movne	r4, fp
   155ac:	moveq	r4, sl
   155b0:	str	r4, [sp, #4]
   155b4:	bl	11a14 <sigaction@plt>
   155b8:	cmp	r5, r6
   155bc:	bne	15580 <__assert_fail@plt+0x380c>
   155c0:	bl	15464 <__assert_fail@plt+0x36f0>
   155c4:	b	154c0 <__assert_fail@plt+0x374c>
   155c8:	andeq	r9, r3, r0, lsr r3
   155cc:	andeq	r9, r3, r4, lsr #6
   155d0:	andeq	r3, r2, r8, asr sp
   155d4:	andeq	sl, r3, ip, lsr #1
   155d8:	andeq	r3, r1, r8, ror #26
   155dc:	muleq	r1, r0, lr
   155e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   155e4:	sub	sp, sp, #132	; 0x84
   155e8:	ldr	r4, [pc, #172]	; 1569c <__assert_fail@plt+0x3928>
   155ec:	ldr	r8, [pc, #172]	; 156a0 <__assert_fail@plt+0x392c>
   155f0:	add	r6, r4, #3440	; 0xd70
   155f4:	add	r6, r6, #12
   155f8:	add	r9, r8, #8
   155fc:	ldr	r7, [pc, #160]	; 156a4 <__assert_fail@plt+0x3930>
   15600:	b	15650 <__assert_fail@plt+0x38dc>
   15604:	ldr	r0, [r7]
   15608:	bl	119e4 <fflush_unlocked@plt>
   1560c:	mov	r1, r6
   15610:	mov	r2, sp
   15614:	mov	r0, #0
   15618:	bl	118dc <sigprocmask@plt>
   1561c:	ldr	r5, [r4]
   15620:	ldr	r1, [r4, #3436]	; 0xd6c
   15624:	cmp	r1, #0
   15628:	sub	r3, r1, #1
   1562c:	beq	15688 <__assert_fail@plt+0x3914>
   15630:	mov	r5, #19
   15634:	str	r3, [r4, #3436]	; 0xd6c
   15638:	mov	r0, r5
   1563c:	bl	1187c <raise@plt>
   15640:	mov	r2, #0
   15644:	mov	r1, sp
   15648:	mov	r0, #2
   1564c:	bl	118dc <sigprocmask@plt>
   15650:	ldr	r3, [r4]
   15654:	cmp	r3, #0
   15658:	bne	15668 <__assert_fail@plt+0x38f4>
   1565c:	ldr	r3, [r4, #3436]	; 0xd6c
   15660:	cmp	r3, #0
   15664:	beq	15694 <__assert_fail@plt+0x3920>
   15668:	ldrb	r3, [r4, #3449]	; 0xd79
   1566c:	cmp	r3, #0
   15670:	beq	15604 <__assert_fail@plt+0x3890>
   15674:	mov	r0, r8
   15678:	bl	154a4 <__assert_fail@plt+0x3730>
   1567c:	mov	r0, r9
   15680:	bl	154a4 <__assert_fail@plt+0x3730>
   15684:	b	15604 <__assert_fail@plt+0x3890>
   15688:	mov	r0, r5
   1568c:	bl	11954 <signal@plt>
   15690:	b	15638 <__assert_fail@plt+0x38c4>
   15694:	add	sp, sp, #132	; 0x84
   15698:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1569c:	andeq	r9, r3, r0, lsr r3
   156a0:	ldrdeq	r9, [r3], -r0
   156a4:	andeq	r9, r3, r4, lsr #6
   156a8:	ldr	r3, [pc, #56]	; 156e8 <__assert_fail@plt+0x3974>
   156ac:	ldrb	r3, [r3, #3580]	; 0xdfc
   156b0:	cmp	r3, #0
   156b4:	bxeq	lr
   156b8:	push	{r4, lr}
   156bc:	mov	r0, #4
   156c0:	bl	13de4 <__assert_fail@plt+0x2070>
   156c4:	cmp	r0, #0
   156c8:	popeq	{r4, pc}
   156cc:	ldr	r0, [pc, #24]	; 156ec <__assert_fail@plt+0x3978>
   156d0:	bl	154a4 <__assert_fail@plt+0x3730>
   156d4:	ldr	r0, [pc, #20]	; 156f0 <__assert_fail@plt+0x397c>
   156d8:	bl	154a4 <__assert_fail@plt+0x3730>
   156dc:	ldr	r0, [pc, #16]	; 156f4 <__assert_fail@plt+0x3980>
   156e0:	pop	{r4, lr}
   156e4:	b	154a4 <__assert_fail@plt+0x3730>
   156e8:	andeq	r9, r3, r0, lsr r3
   156ec:	ldrdeq	r9, [r3], -r0
   156f0:	strdeq	r9, [r3], -r0
   156f4:	ldrdeq	r9, [r3], -r8
   156f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156fc:	sub	sp, sp, #36	; 0x24
   15700:	mov	ip, r0
   15704:	str	r0, [sp, #12]
   15708:	mov	r0, r2
   1570c:	mov	r5, r3
   15710:	mov	r6, r2
   15714:	mov	r4, r1
   15718:	ldr	r8, [ip]
   1571c:	bl	20dd4 <_obstack_memory_used@@Base+0x1948>
   15720:	ldr	r3, [pc, #1024]	; 15b28 <__assert_fail@plt+0x3db4>
   15724:	ldrb	r9, [r3, #3581]	; 0xdfd
   15728:	cmp	r0, #2
   1572c:	movhi	r9, #0
   15730:	andls	r9, r9, #1
   15734:	cmp	r9, #0
   15738:	beq	1587c <__assert_fail@plt+0x3b08>
   1573c:	cmp	r5, #0
   15740:	bne	15b20 <__assert_fail@plt+0x3dac>
   15744:	mov	r0, r4
   15748:	bl	11b94 <strlen@plt>
   1574c:	cmp	r0, #8192	; 0x2000
   15750:	mov	r6, r0
   15754:	add	r5, r0, #1
   15758:	bcs	15ab4 <__assert_fail@plt+0x3d40>
   1575c:	mov	r2, r5
   15760:	mov	r1, r4
   15764:	mov	r0, r8
   15768:	bl	11930 <memcpy@plt>
   1576c:	mov	r9, #0
   15770:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   15774:	cmp	r0, #1
   15778:	bls	15a70 <__assert_fail@plt+0x3cfc>
   1577c:	add	r7, r8, r6
   15780:	cmp	r7, r8
   15784:	mov	r6, #0
   15788:	bls	15aac <__assert_fail@plt+0x3d38>
   1578c:	mov	r5, r8
   15790:	mov	r4, r8
   15794:	mov	sl, #63	; 0x3f
   15798:	ldrb	r3, [r4]
   1579c:	cmp	r3, #63	; 0x3f
   157a0:	bhi	159b0 <__assert_fail@plt+0x3c3c>
   157a4:	cmp	r3, #37	; 0x25
   157a8:	bcs	159cc <__assert_fail@plt+0x3c58>
   157ac:	sub	r2, r3, #32
   157b0:	cmp	r2, #3
   157b4:	bls	159cc <__assert_fail@plt+0x3c58>
   157b8:	mov	r3, #0
   157bc:	str	r3, [sp, #24]
   157c0:	str	r3, [sp, #28]
   157c4:	add	r3, sp, #24
   157c8:	sub	r2, r7, r4
   157cc:	mov	r1, r4
   157d0:	add	r0, sp, #20
   157d4:	bl	1cee8 <__assert_fail@plt+0xb174>
   157d8:	cmn	r0, #1
   157dc:	mov	fp, r0
   157e0:	beq	159e8 <__assert_fail@plt+0x3c74>
   157e4:	cmn	r0, #2
   157e8:	beq	15a04 <__assert_fail@plt+0x3c90>
   157ec:	ldr	r0, [sp, #20]
   157f0:	bl	118d0 <wcwidth@plt>
   157f4:	cmp	fp, #0
   157f8:	moveq	fp, #1
   157fc:	cmp	r0, #0
   15800:	blt	1599c <__assert_fail@plt+0x3c28>
   15804:	sub	r3, r5, #1
   15808:	add	r1, r4, fp
   1580c:	ldrb	r2, [r4], #1
   15810:	cmp	r4, r1
   15814:	strb	r2, [r3, #1]!
   15818:	bne	1580c <__assert_fail@plt+0x3a98>
   1581c:	add	r5, r5, fp
   15820:	add	r6, r6, r0
   15824:	add	r0, sp, #24
   15828:	bl	11948 <mbsinit@plt>
   1582c:	cmp	r0, #0
   15830:	beq	157c4 <__assert_fail@plt+0x3a50>
   15834:	cmp	r7, r4
   15838:	bhi	15798 <__assert_fail@plt+0x3a24>
   1583c:	sub	r5, r5, r8
   15840:	ldr	r3, [pc, #736]	; 15b28 <__assert_fail@plt+0x3db4>
   15844:	ldrb	r3, [r3, #3582]	; 0xdfe
   15848:	cmp	r3, #0
   1584c:	beq	15994 <__assert_fail@plt+0x3c20>
   15850:	ldr	r2, [pc, #720]	; 15b28 <__assert_fail@plt+0x3db4>
   15854:	ldrb	r2, [r2, #3108]	; 0xc24
   15858:	eor	r2, r2, #1
   1585c:	orrs	r2, r9, r2
   15860:	bne	15994 <__assert_fail@plt+0x3c20>
   15864:	ldr	r2, [sp, #72]	; 0x48
   15868:	cmp	r2, #0
   1586c:	ldr	r2, [sp, #76]	; 0x4c
   15870:	strb	r3, [r2]
   15874:	bne	15934 <__assert_fail@plt+0x3bc0>
   15878:	b	1593c <__assert_fail@plt+0x3bc8>
   1587c:	cmp	r5, #0
   15880:	movne	r7, r9
   15884:	beq	15950 <__assert_fail@plt+0x3bdc>
   15888:	str	r6, [sp]
   1588c:	mvn	r3, #0
   15890:	mov	r2, r4
   15894:	mov	r1, #8192	; 0x2000
   15898:	mov	r0, r8
   1589c:	bl	20e98 <_obstack_memory_used@@Base+0x1a0c>
   158a0:	cmp	r0, #8192	; 0x2000
   158a4:	mov	r5, r0
   158a8:	bcs	15ad8 <__assert_fail@plt+0x3d64>
   158ac:	ldrb	r2, [r4]
   158b0:	ldrb	r3, [r8]
   158b4:	cmp	r2, r3
   158b8:	movne	r9, #1
   158bc:	beq	15ac4 <__assert_fail@plt+0x3d50>
   158c0:	cmp	r7, #0
   158c4:	bne	15b18 <__assert_fail@plt+0x3da4>
   158c8:	ldr	r3, [sp, #72]	; 0x48
   158cc:	cmp	r3, #0
   158d0:	beq	1596c <__assert_fail@plt+0x3bf8>
   158d4:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   158d8:	cmp	r0, #1
   158dc:	bhi	15a20 <__assert_fail@plt+0x3cac>
   158e0:	add	r4, r8, r5
   158e4:	cmp	r4, r8
   158e8:	bls	15b00 <__assert_fail@plt+0x3d8c>
   158ec:	bl	11b58 <__ctype_b_loc@plt>
   158f0:	mov	r6, #0
   158f4:	sub	r1, r4, #1
   158f8:	sub	r2, r8, #1
   158fc:	ldr	r0, [r0]
   15900:	ldrb	r3, [r2, #1]!
   15904:	lsl	r3, r3, #1
   15908:	ldrh	r3, [r0, r3]
   1590c:	tst	r3, #16384	; 0x4000
   15910:	addne	r6, r6, #1
   15914:	cmp	r1, r2
   15918:	bne	15900 <__assert_fail@plt+0x3b8c>
   1591c:	ldr	r3, [pc, #516]	; 15b28 <__assert_fail@plt+0x3db4>
   15920:	ldrb	r3, [r3, #3582]	; 0xdfe
   15924:	cmp	r3, #0
   15928:	bne	15a44 <__assert_fail@plt+0x3cd0>
   1592c:	ldr	r2, [sp, #76]	; 0x4c
   15930:	strb	r3, [r2]
   15934:	ldr	r3, [sp, #72]	; 0x48
   15938:	str	r6, [r3]
   1593c:	ldr	r3, [sp, #12]
   15940:	mov	r0, r5
   15944:	str	r8, [r3]
   15948:	add	sp, sp, #36	; 0x24
   1594c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15950:	mov	r0, r4
   15954:	bl	11b94 <strlen@plt>
   15958:	ldr	r3, [sp, #72]	; 0x48
   1595c:	mov	r8, r4
   15960:	cmp	r3, #0
   15964:	mov	r5, r0
   15968:	bne	158d4 <__assert_fail@plt+0x3b60>
   1596c:	ldr	r3, [pc, #436]	; 15b28 <__assert_fail@plt+0x3db4>
   15970:	ldrb	r3, [r3, #3582]	; 0xdfe
   15974:	cmp	r3, #0
   15978:	beq	15a60 <__assert_fail@plt+0x3cec>
   1597c:	ldr	r3, [pc, #420]	; 15b28 <__assert_fail@plt+0x3db4>
   15980:	ldrb	r3, [r3, #3108]	; 0xc24
   15984:	eor	r3, r3, #1
   15988:	orrs	r3, r9, r3
   1598c:	ldrne	r6, [sp, #72]	; 0x48
   15990:	beq	15b08 <__assert_fail@plt+0x3d94>
   15994:	mov	r3, #0
   15998:	b	15864 <__assert_fail@plt+0x3af0>
   1599c:	strb	sl, [r5]
   159a0:	add	r4, r4, fp
   159a4:	add	r6, r6, #1
   159a8:	add	r5, r5, #1
   159ac:	b	15824 <__assert_fail@plt+0x3ab0>
   159b0:	cmp	r3, #65	; 0x41
   159b4:	bcc	157b8 <__assert_fail@plt+0x3a44>
   159b8:	cmp	r3, #95	; 0x5f
   159bc:	bls	159cc <__assert_fail@plt+0x3c58>
   159c0:	sub	r2, r3, #97	; 0x61
   159c4:	cmp	r2, #29
   159c8:	bhi	157b8 <__assert_fail@plt+0x3a44>
   159cc:	add	r4, r4, #1
   159d0:	cmp	r7, r4
   159d4:	strb	r3, [r5]
   159d8:	add	r6, r6, #1
   159dc:	add	r5, r5, #1
   159e0:	bhi	15798 <__assert_fail@plt+0x3a24>
   159e4:	b	1583c <__assert_fail@plt+0x3ac8>
   159e8:	add	r4, r4, #1
   159ec:	cmp	r7, r4
   159f0:	strb	sl, [r5]
   159f4:	add	r6, r6, #1
   159f8:	add	r5, r5, #1
   159fc:	bhi	15798 <__assert_fail@plt+0x3a24>
   15a00:	b	1583c <__assert_fail@plt+0x3ac8>
   15a04:	mov	r4, r7
   15a08:	cmp	r7, r4
   15a0c:	strb	sl, [r5]
   15a10:	add	r6, r6, #1
   15a14:	add	r5, r5, #1
   15a18:	bhi	15798 <__assert_fail@plt+0x3a24>
   15a1c:	b	1583c <__assert_fail@plt+0x3ac8>
   15a20:	mov	r2, #0
   15a24:	mov	r1, r5
   15a28:	mov	r0, r8
   15a2c:	bl	1d348 <__assert_fail@plt+0xb5d4>
   15a30:	ldr	r3, [pc, #240]	; 15b28 <__assert_fail@plt+0x3db4>
   15a34:	ldrb	r3, [r3, #3582]	; 0xdfe
   15a38:	cmp	r3, #0
   15a3c:	mov	r6, r0
   15a40:	beq	1592c <__assert_fail@plt+0x3bb8>
   15a44:	ldr	r3, [pc, #220]	; 15b28 <__assert_fail@plt+0x3db4>
   15a48:	ldrb	r3, [r3, #3108]	; 0xc24
   15a4c:	eor	r3, r3, #1
   15a50:	orrs	r3, r9, r3
   15a54:	moveq	r3, #1
   15a58:	beq	1592c <__assert_fail@plt+0x3bb8>
   15a5c:	b	15994 <__assert_fail@plt+0x3c20>
   15a60:	ldr	r3, [sp, #76]	; 0x4c
   15a64:	ldrb	r2, [sp, #72]	; 0x48
   15a68:	strb	r2, [r3]
   15a6c:	b	1593c <__assert_fail@plt+0x3bc8>
   15a70:	add	r4, r8, r6
   15a74:	cmp	r4, r8
   15a78:	bls	15aac <__assert_fail@plt+0x3d38>
   15a7c:	bl	11b58 <__ctype_b_loc@plt>
   15a80:	mov	r3, r8
   15a84:	mov	r1, #63	; 0x3f
   15a88:	ldrb	r2, [r3]
   15a8c:	ldr	ip, [r0]
   15a90:	add	r3, r3, #1
   15a94:	lsl	r2, r2, #1
   15a98:	ldrh	r2, [ip, r2]
   15a9c:	tst	r2, #16384	; 0x4000
   15aa0:	strbeq	r1, [r3, #-1]
   15aa4:	cmp	r4, r3
   15aa8:	bne	15a88 <__assert_fail@plt+0x3d14>
   15aac:	mov	r5, r6
   15ab0:	b	15840 <__assert_fail@plt+0x3acc>
   15ab4:	mov	r0, r5
   15ab8:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   15abc:	mov	r8, r0
   15ac0:	b	1575c <__assert_fail@plt+0x39e8>
   15ac4:	mov	r0, r4
   15ac8:	bl	11b94 <strlen@plt>
   15acc:	subs	r9, r5, r0
   15ad0:	movne	r9, #1
   15ad4:	b	158c0 <__assert_fail@plt+0x3b4c>
   15ad8:	add	r9, r0, #1
   15adc:	mov	r0, r9
   15ae0:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   15ae4:	mov	r1, r9
   15ae8:	str	r6, [sp]
   15aec:	mvn	r3, #0
   15af0:	mov	r2, r4
   15af4:	mov	r8, r0
   15af8:	bl	20e98 <_obstack_memory_used@@Base+0x1a0c>
   15afc:	b	158ac <__assert_fail@plt+0x3b38>
   15b00:	mov	r6, #0
   15b04:	b	1591c <__assert_fail@plt+0x3ba8>
   15b08:	ldr	r2, [sp, #76]	; 0x4c
   15b0c:	mov	r3, #1
   15b10:	strb	r3, [r2]
   15b14:	b	1593c <__assert_fail@plt+0x3bc8>
   15b18:	mov	r6, r5
   15b1c:	b	15770 <__assert_fail@plt+0x39fc>
   15b20:	mov	r7, #1
   15b24:	b	15888 <__assert_fail@plt+0x3b14>
   15b28:	andeq	r9, r3, r0, lsr r3
   15b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b30:	sub	sp, sp, #8192	; 0x2000
   15b34:	sub	sp, sp, #28
   15b38:	mov	ip, #0
   15b3c:	str	ip, [sp]
   15b40:	add	r4, sp, #24
   15b44:	add	ip, sp, #8256	; 0x2040
   15b48:	mov	sl, r0
   15b4c:	sub	r0, r4, #5
   15b50:	str	r0, [sp, #4]
   15b54:	ldrb	r8, [ip]
   15b58:	add	ip, sp, #8256	; 0x2040
   15b5c:	add	ip, ip, #8
   15b60:	mov	r5, r3
   15b64:	sub	r0, r4, #4
   15b68:	mov	r3, r2
   15b6c:	str	r4, [r4, #-4]
   15b70:	mov	r2, r1
   15b74:	mov	r1, sl
   15b78:	ldr	r7, [ip]
   15b7c:	bl	156f8 <__assert_fail@plt+0x3984>
   15b80:	ldrb	r3, [r4, #-5]
   15b84:	tst	r8, r3
   15b88:	mov	r6, r0
   15b8c:	bne	15e18 <__assert_fail@plt+0x40a4>
   15b90:	cmp	r5, #0
   15b94:	beq	15bc0 <__assert_fail@plt+0x3e4c>
   15b98:	mov	r0, #4
   15b9c:	bl	13de4 <__assert_fail@plt+0x2070>
   15ba0:	cmp	r0, #0
   15ba4:	bne	15da0 <__assert_fail@plt+0x402c>
   15ba8:	ldr	r0, [pc, #652]	; 15e3c <__assert_fail@plt+0x40c8>
   15bac:	bl	154a4 <__assert_fail@plt+0x3730>
   15bb0:	mov	r0, r5
   15bb4:	bl	154a4 <__assert_fail@plt+0x3730>
   15bb8:	ldr	r0, [pc, #640]	; 15e40 <__assert_fail@plt+0x40cc>
   15bbc:	bl	154a4 <__assert_fail@plt+0x3730>
   15bc0:	cmp	r7, #0
   15bc4:	beq	15dcc <__assert_fail@plt+0x4058>
   15bc8:	ldr	r8, [pc, #628]	; 15e44 <__assert_fail@plt+0x40d0>
   15bcc:	ldrb	r5, [r8, #3582]	; 0xdfe
   15bd0:	cmp	r5, #0
   15bd4:	bne	15cec <__assert_fail@plt+0x3f78>
   15bd8:	ldr	r9, [pc, #616]	; 15e48 <__assert_fail@plt+0x40d4>
   15bdc:	str	r5, [sp, #8]
   15be0:	str	r5, [sp, #12]
   15be4:	ldr	r0, [r8, #3584]	; 0xe00
   15be8:	mov	r1, #0
   15bec:	bl	14bb8 <__assert_fail@plt+0x2e44>
   15bf0:	mov	r1, #1
   15bf4:	mov	fp, r0
   15bf8:	mov	r0, r7
   15bfc:	bl	14bb8 <__assert_fail@plt+0x2e44>
   15c00:	ldr	r2, [pc, #580]	; 15e4c <__assert_fail@plt+0x40d8>
   15c04:	ldr	r3, [pc, #580]	; 15e50 <__assert_fail@plt+0x40dc>
   15c08:	ldrb	r1, [r0]
   15c0c:	mov	r8, r0
   15c10:	str	r0, [sp]
   15c14:	cmp	r1, #47	; 0x2f
   15c18:	moveq	r3, r2
   15c1c:	ldr	r1, [pc, #560]	; 15e54 <__assert_fail@plt+0x40e0>
   15c20:	mov	r2, fp
   15c24:	mov	r0, #1
   15c28:	bl	11bf4 <__printf_chk@plt>
   15c2c:	mov	r0, fp
   15c30:	bl	1ad20 <__assert_fail@plt+0x8fac>
   15c34:	mov	r0, r8
   15c38:	bl	1ad20 <__assert_fail@plt+0x8fac>
   15c3c:	add	r3, sp, #8256	; 0x2040
   15c40:	add	r3, r3, #4
   15c44:	ldr	r3, [r3]
   15c48:	cmp	r3, #0
   15c4c:	beq	15de0 <__assert_fail@plt+0x406c>
   15c50:	ldr	r8, [pc, #492]	; 15e44 <__assert_fail@plt+0x40d0>
   15c54:	ldrb	r3, [r8, #3588]	; 0xe04
   15c58:	cmp	r3, #0
   15c5c:	bne	15d8c <__assert_fail@plt+0x4018>
   15c60:	ldr	r3, [sp, #12]
   15c64:	ldr	r0, [r4, #-4]
   15c68:	sub	r2, r6, r3
   15c6c:	ldr	r3, [sp, #8]
   15c70:	mov	r1, #1
   15c74:	add	r0, r0, r3
   15c78:	ldr	r3, [r9]
   15c7c:	bl	11960 <fwrite_unlocked@plt>
   15c80:	ldr	r1, [pc, #464]	; 15e58 <__assert_fail@plt+0x40e4>
   15c84:	ldrb	r0, [r8, #3588]	; 0xe04
   15c88:	ldrd	r2, [r1]
   15c8c:	adds	r2, r2, r6
   15c90:	adc	r3, r3, #0
   15c94:	cmp	r0, #0
   15c98:	strd	r2, [r1]
   15c9c:	bne	15d78 <__assert_fail@plt+0x4004>
   15ca0:	cmp	r7, #0
   15ca4:	beq	15cc4 <__assert_fail@plt+0x3f50>
   15ca8:	ldr	r3, [r9]
   15cac:	mov	r2, #6
   15cb0:	mov	r1, #1
   15cb4:	ldr	r0, [pc, #416]	; 15e5c <__assert_fail@plt+0x40e8>
   15cb8:	bl	11960 <fwrite_unlocked@plt>
   15cbc:	cmp	r5, #0
   15cc0:	bne	15d44 <__assert_fail@plt+0x3fd0>
   15cc4:	ldr	r0, [r4, #-4]
   15cc8:	cmp	r0, r4
   15ccc:	cmpne	sl, r0
   15cd0:	beq	15cd8 <__assert_fail@plt+0x3f64>
   15cd4:	bl	1ad20 <__assert_fail@plt+0x8fac>
   15cd8:	ldrb	r0, [r4, #-5]
   15cdc:	add	r0, r0, r6
   15ce0:	add	sp, sp, #8192	; 0x2000
   15ce4:	add	sp, sp, #28
   15ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cec:	ldrb	r5, [r8, #3108]	; 0xc24
   15cf0:	cmp	r5, #0
   15cf4:	beq	15bd8 <__assert_fail@plt+0x3e64>
   15cf8:	ldrb	r3, [r4, #-5]
   15cfc:	cmp	r3, #0
   15d00:	bne	15db4 <__assert_fail@plt+0x4040>
   15d04:	ldr	r9, [pc, #316]	; 15e48 <__assert_fail@plt+0x40d4>
   15d08:	ldr	r3, [r4, #-4]
   15d0c:	ldr	r0, [r9]
   15d10:	ldrb	r1, [r3]
   15d14:	ldr	r2, [r0, #24]
   15d18:	ldr	r3, [r0, #20]
   15d1c:	cmp	r3, r2
   15d20:	bcs	15e24 <__assert_fail@plt+0x40b0>
   15d24:	add	r2, r3, #1
   15d28:	str	r2, [r0, #20]
   15d2c:	mov	r2, #1
   15d30:	strb	r1, [r3]
   15d34:	mov	r3, #2
   15d38:	str	r2, [sp, #8]
   15d3c:	str	r3, [sp, #12]
   15d40:	b	15be4 <__assert_fail@plt+0x3e70>
   15d44:	ldr	r0, [r9]
   15d48:	ldr	r3, [r4, #-4]
   15d4c:	ldr	r2, [r0, #20]
   15d50:	ldr	r1, [r0, #24]
   15d54:	add	r3, r3, r6
   15d58:	cmp	r2, r1
   15d5c:	ldrb	r1, [r3, #-1]
   15d60:	addcc	r3, r2, #1
   15d64:	strcc	r3, [r0, #20]
   15d68:	strbcc	r1, [r2]
   15d6c:	bcc	15cc4 <__assert_fail@plt+0x3f50>
   15d70:	bl	11c48 <__overflow@plt>
   15d74:	b	15cc4 <__assert_fail@plt+0x3f50>
   15d78:	add	r3, sp, #8256	; 0x2040
   15d7c:	add	r3, r3, #4
   15d80:	ldr	r0, [r3]
   15d84:	bl	15414 <__assert_fail@plt+0x36a0>
   15d88:	b	15ca0 <__assert_fail@plt+0x3f2c>
   15d8c:	add	r3, sp, #8256	; 0x2040
   15d90:	add	r3, r3, #4
   15d94:	ldr	r0, [r3]
   15d98:	bl	15414 <__assert_fail@plt+0x36a0>
   15d9c:	b	15c60 <__assert_fail@plt+0x3eec>
   15da0:	ldr	r0, [pc, #148]	; 15e3c <__assert_fail@plt+0x40c8>
   15da4:	bl	154a4 <__assert_fail@plt+0x3730>
   15da8:	ldr	r0, [pc, #144]	; 15e40 <__assert_fail@plt+0x40cc>
   15dac:	bl	154a4 <__assert_fail@plt+0x3730>
   15db0:	b	15ba8 <__assert_fail@plt+0x3e34>
   15db4:	mov	r3, #0
   15db8:	str	r3, [sp, #8]
   15dbc:	ldr	r9, [pc, #132]	; 15e48 <__assert_fail@plt+0x40d4>
   15dc0:	str	r3, [sp, #12]
   15dc4:	mov	r5, r3
   15dc8:	b	15be4 <__assert_fail@plt+0x3e70>
   15dcc:	ldr	r9, [pc, #116]	; 15e48 <__assert_fail@plt+0x40d4>
   15dd0:	str	r7, [sp, #8]
   15dd4:	str	r7, [sp, #12]
   15dd8:	mov	r5, r7
   15ddc:	b	15c3c <__assert_fail@plt+0x3ec8>
   15de0:	ldr	r3, [sp, #12]
   15de4:	ldr	r0, [r4, #-4]
   15de8:	sub	r2, r6, r3
   15dec:	ldr	r3, [sp, #8]
   15df0:	mov	r1, #1
   15df4:	add	r0, r0, r3
   15df8:	ldr	r3, [r9]
   15dfc:	bl	11960 <fwrite_unlocked@plt>
   15e00:	ldr	r1, [pc, #80]	; 15e58 <__assert_fail@plt+0x40e4>
   15e04:	ldrd	r2, [r1]
   15e08:	adds	r2, r2, r6
   15e0c:	adc	r3, r3, #0
   15e10:	strd	r2, [r1]
   15e14:	b	15ca0 <__assert_fail@plt+0x3f2c>
   15e18:	mov	r0, #32
   15e1c:	bl	14c7c <__assert_fail@plt+0x2f08>
   15e20:	b	15b90 <__assert_fail@plt+0x3e1c>
   15e24:	bl	11c48 <__overflow@plt>
   15e28:	mov	r3, #1
   15e2c:	str	r3, [sp, #8]
   15e30:	mov	r3, #2
   15e34:	str	r3, [sp, #12]
   15e38:	b	15be4 <__assert_fail@plt+0x3e70>
   15e3c:	ldrdeq	r9, [r3], -r0
   15e40:	ldrdeq	r9, [r3], -r8
   15e44:	andeq	r9, r3, r0, lsr r3
   15e48:	andeq	r9, r3, r4, lsr #6
   15e4c:	andeq	r7, r2, r4, lsl #29
   15e50:			; <UNDEFINED> instruction: 0x000278b4
   15e54:	andeq	r5, r2, ip, ror #9
   15e58:	muleq	r3, r0, r0
   15e5c:	andeq	r5, r2, r0, lsl #10
   15e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e64:	subs	r7, r1, #0
   15e68:	sub	sp, sp, #20
   15e6c:	mov	r5, r0
   15e70:	mov	r8, r2
   15e74:	mov	r9, r3
   15e78:	beq	15f44 <__assert_fail@plt+0x41d0>
   15e7c:	ldr	r6, [pc, #948]	; 16238 <__assert_fail@plt+0x44c4>
   15e80:	ldr	sl, [r0, #4]
   15e84:	ldrb	r3, [r6, #3580]	; 0xdfc
   15e88:	cmp	r3, #0
   15e8c:	beq	15f58 <__assert_fail@plt+0x41e4>
   15e90:	ldrb	r3, [r5, #133]	; 0x85
   15e94:	ldr	r4, [r5, #124]	; 0x7c
   15e98:	cmp	r3, #0
   15e9c:	bne	16020 <__assert_fail@plt+0x42ac>
   15ea0:	mov	r0, #12
   15ea4:	bl	13de4 <__assert_fail@plt+0x2070>
   15ea8:	cmp	r0, #0
   15eac:	mvneq	r1, #0
   15eb0:	beq	15fa8 <__assert_fail@plt+0x4234>
   15eb4:	mov	r0, #96	; 0x60
   15eb8:	ldr	r3, [pc, #892]	; 1623c <__assert_fail@plt+0x44c8>
   15ebc:	add	r3, r3, r0
   15ec0:	ldr	r4, [r3, #4]
   15ec4:	cmp	r4, #0
   15ec8:	beq	160e4 <__assert_fail@plt+0x4370>
   15ecc:	ldr	ip, [r5, #8]
   15ed0:	eor	r7, r7, #1
   15ed4:	ldr	r2, [r5, #144]	; 0x90
   15ed8:	mov	r0, sl
   15edc:	str	r7, [sp]
   15ee0:	ldr	r1, [r6, #3156]	; 0xc54
   15ee4:	str	ip, [sp, #8]
   15ee8:	str	r8, [sp, #4]
   15eec:	bl	15b2c <__assert_fail@plt+0x3db8>
   15ef0:	mov	r4, r0
   15ef4:	bl	155e0 <__assert_fail@plt+0x386c>
   15ef8:	bl	15464 <__assert_fail@plt+0x36f0>
   15efc:	ldr	r5, [r6, #3596]	; 0xe0c
   15f00:	cmp	r5, #0
   15f04:	beq	15f84 <__assert_fail@plt+0x4210>
   15f08:	mov	r1, r5
   15f0c:	mov	r0, r9
   15f10:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   15f14:	mov	r1, r5
   15f18:	mov	r6, r0
   15f1c:	sub	r0, r9, #1
   15f20:	add	r0, r0, r4
   15f24:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   15f28:	cmp	r6, r0
   15f2c:	beq	15f84 <__assert_fail@plt+0x4210>
   15f30:	ldr	r0, [pc, #776]	; 16240 <__assert_fail@plt+0x44cc>
   15f34:	bl	154a4 <__assert_fail@plt+0x3730>
   15f38:	mov	r0, r4
   15f3c:	add	sp, sp, #20
   15f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f44:	ldr	r6, [pc, #748]	; 16238 <__assert_fail@plt+0x44c4>
   15f48:	ldr	sl, [r0]
   15f4c:	ldrb	r3, [r6, #3580]	; 0xdfc
   15f50:	cmp	r3, #0
   15f54:	bne	15f90 <__assert_fail@plt+0x421c>
   15f58:	ldr	r3, [r5, #8]
   15f5c:	eor	r7, r7, #1
   15f60:	ldr	r1, [r6, #3156]	; 0xc54
   15f64:	ldr	r2, [r5, #144]	; 0x90
   15f68:	mov	r0, sl
   15f6c:	str	r3, [sp, #8]
   15f70:	stm	sp, {r7, r8}
   15f74:	mov	r3, #0
   15f78:	bl	15b2c <__assert_fail@plt+0x3db8>
   15f7c:	mov	r4, r0
   15f80:	bl	155e0 <__assert_fail@plt+0x386c>
   15f84:	mov	r0, r4
   15f88:	add	sp, sp, #20
   15f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f90:	ldrb	r3, [r6, #3589]	; 0xe05
   15f94:	ldrb	r2, [r5, #133]	; 0x85
   15f98:	cmp	r3, #0
   15f9c:	bne	16080 <__assert_fail@plt+0x430c>
   15fa0:	ldr	r4, [r5, #32]
   15fa4:	mov	r1, r2
   15fa8:	ldrb	r2, [r5, #132]	; 0x84
   15fac:	cmp	r2, #0
   15fb0:	bne	16030 <__assert_fail@plt+0x42bc>
   15fb4:	ldr	r2, [r5, #120]	; 0x78
   15fb8:	ldr	r3, [pc, #644]	; 16244 <__assert_fail@plt+0x44d0>
   15fbc:	add	r3, r3, r2, lsl #2
   15fc0:	ldr	r3, [r3, #48]	; 0x30
   15fc4:	cmp	r3, #5
   15fc8:	bne	16098 <__assert_fail@plt+0x4324>
   15fcc:	mov	r0, sl
   15fd0:	bl	11b94 <strlen@plt>
   15fd4:	ldr	r4, [r6, #3592]	; 0xe08
   15fd8:	cmp	r4, #0
   15fdc:	mov	fp, r0
   15fe0:	beq	16018 <__assert_fail@plt+0x42a4>
   15fe4:	ldr	r3, [r4]
   15fe8:	sub	r0, fp, r3
   15fec:	cmp	fp, r3
   15ff0:	mov	r2, r3
   15ff4:	add	r0, sl, r0
   15ff8:	bcc	1600c <__assert_fail@plt+0x4298>
   15ffc:	ldr	r1, [r4, #4]
   16000:	bl	19c18 <__assert_fail@plt+0x7ea4>
   16004:	cmp	r0, #0
   16008:	beq	16090 <__assert_fail@plt+0x431c>
   1600c:	ldr	r4, [r4, #16]
   16010:	cmp	r4, #0
   16014:	bne	15fe4 <__assert_fail@plt+0x4270>
   16018:	mov	r0, #40	; 0x28
   1601c:	b	15eb8 <__assert_fail@plt+0x4144>
   16020:	ldrb	r2, [r5, #132]	; 0x84
   16024:	mov	r1, #0
   16028:	cmp	r2, #0
   1602c:	beq	15fb4 <__assert_fail@plt+0x4240>
   16030:	and	r3, r4, #61440	; 0xf000
   16034:	cmp	r3, #32768	; 0x8000
   16038:	beq	160fc <__assert_fail@plt+0x4388>
   1603c:	cmp	r3, #16384	; 0x4000
   16040:	beq	16168 <__assert_fail@plt+0x43f4>
   16044:	cmp	r3, #40960	; 0xa000
   16048:	beq	161d8 <__assert_fail@plt+0x4464>
   1604c:	cmp	r3, #4096	; 0x1000
   16050:	moveq	r0, #64	; 0x40
   16054:	beq	15eb8 <__assert_fail@plt+0x4144>
   16058:	cmp	r3, #49152	; 0xc000
   1605c:	moveq	r0, #72	; 0x48
   16060:	beq	15eb8 <__assert_fail@plt+0x4144>
   16064:	cmp	r3, #24576	; 0x6000
   16068:	moveq	r0, #80	; 0x50
   1606c:	beq	15eb8 <__assert_fail@plt+0x4144>
   16070:	cmp	r3, #8192	; 0x2000
   16074:	movne	r0, #104	; 0x68
   16078:	moveq	r0, #88	; 0x58
   1607c:	b	15eb8 <__assert_fail@plt+0x4144>
   16080:	cmp	r2, #0
   16084:	beq	15fa0 <__assert_fail@plt+0x422c>
   16088:	ldr	r4, [r5, #124]	; 0x7c
   1608c:	b	15fa4 <__assert_fail@plt+0x4230>
   16090:	add	r3, r4, #8
   16094:	b	15ec0 <__assert_fail@plt+0x414c>
   16098:	sub	r2, r3, #7
   1609c:	clz	r2, r2
   160a0:	lsr	r2, r2, #5
   160a4:	cmp	r1, #0
   160a8:	movne	r2, #0
   160ac:	andeq	r2, r2, #1
   160b0:	cmp	r2, #0
   160b4:	lsleq	r0, r3, #3
   160b8:	beq	15eb8 <__assert_fail@plt+0x4144>
   160bc:	ldrb	r3, [r6, #3589]	; 0xe05
   160c0:	cmp	r3, #0
   160c4:	movne	r0, #104	; 0x68
   160c8:	bne	15eb8 <__assert_fail@plt+0x4144>
   160cc:	mov	r0, #13
   160d0:	bl	13de4 <__assert_fail@plt+0x2070>
   160d4:	cmp	r0, #0
   160d8:	movne	r0, #104	; 0x68
   160dc:	moveq	r0, #56	; 0x38
   160e0:	b	15eb8 <__assert_fail@plt+0x4144>
   160e4:	mov	r0, #4
   160e8:	bl	13de4 <__assert_fail@plt+0x2070>
   160ec:	subs	r3, r0, #0
   160f0:	beq	16124 <__assert_fail@plt+0x43b0>
   160f4:	mov	r3, r4
   160f8:	b	15ecc <__assert_fail@plt+0x4158>
   160fc:	tst	r4, #2048	; 0x800
   16100:	bne	16150 <__assert_fail@plt+0x43dc>
   16104:	tst	r4, #1024	; 0x400
   16108:	beq	161b4 <__assert_fail@plt+0x4440>
   1610c:	mov	r0, #17
   16110:	bl	13de4 <__assert_fail@plt+0x2070>
   16114:	cmp	r0, #0
   16118:	beq	161b4 <__assert_fail@plt+0x4440>
   1611c:	mov	r0, #136	; 0x88
   16120:	b	15eb8 <__assert_fail@plt+0x4144>
   16124:	ldr	ip, [r5, #8]
   16128:	eor	r7, r7, #1
   1612c:	ldr	r1, [r6, #3156]	; 0xc54
   16130:	ldr	r2, [r5, #144]	; 0x90
   16134:	mov	r0, sl
   16138:	stm	sp, {r7, r8}
   1613c:	str	ip, [sp, #8]
   16140:	bl	15b2c <__assert_fail@plt+0x3db8>
   16144:	mov	r4, r0
   16148:	bl	155e0 <__assert_fail@plt+0x386c>
   1614c:	b	15f84 <__assert_fail@plt+0x4210>
   16150:	mov	r0, #16
   16154:	bl	13de4 <__assert_fail@plt+0x2070>
   16158:	cmp	r0, #0
   1615c:	beq	16104 <__assert_fail@plt+0x4390>
   16160:	mov	r0, #128	; 0x80
   16164:	b	15eb8 <__assert_fail@plt+0x4144>
   16168:	ldr	r3, [pc, #216]	; 16248 <__assert_fail@plt+0x44d4>
   1616c:	bics	r3, r3, r4
   16170:	beq	16220 <__assert_fail@plt+0x44ac>
   16174:	tst	r4, #2
   16178:	beq	16190 <__assert_fail@plt+0x441c>
   1617c:	mov	r0, #19
   16180:	bl	13de4 <__assert_fail@plt+0x2070>
   16184:	cmp	r0, #0
   16188:	movne	r0, #152	; 0x98
   1618c:	bne	15eb8 <__assert_fail@plt+0x4144>
   16190:	tst	r4, #512	; 0x200
   16194:	moveq	r0, #48	; 0x30
   16198:	beq	15eb8 <__assert_fail@plt+0x4144>
   1619c:	mov	r0, #18
   161a0:	bl	13de4 <__assert_fail@plt+0x2070>
   161a4:	cmp	r0, #0
   161a8:	movne	r0, #144	; 0x90
   161ac:	moveq	r0, #48	; 0x30
   161b0:	b	15eb8 <__assert_fail@plt+0x4144>
   161b4:	mov	r0, #21
   161b8:	bl	13de4 <__assert_fail@plt+0x2070>
   161bc:	cmp	r0, #0
   161c0:	beq	161e0 <__assert_fail@plt+0x446c>
   161c4:	ldrb	r3, [r5, #140]	; 0x8c
   161c8:	cmp	r3, #0
   161cc:	beq	161e0 <__assert_fail@plt+0x446c>
   161d0:	mov	r0, #168	; 0xa8
   161d4:	b	15eb8 <__assert_fail@plt+0x4144>
   161d8:	mov	r3, #7
   161dc:	b	160a4 <__assert_fail@plt+0x4330>
   161e0:	tst	r4, #73	; 0x49
   161e4:	beq	161fc <__assert_fail@plt+0x4488>
   161e8:	mov	r0, #14
   161ec:	bl	13de4 <__assert_fail@plt+0x2070>
   161f0:	cmp	r0, #0
   161f4:	movne	r0, #112	; 0x70
   161f8:	bne	15eb8 <__assert_fail@plt+0x4144>
   161fc:	ldr	r3, [r5, #36]	; 0x24
   16200:	cmp	r3, #1
   16204:	bls	15fcc <__assert_fail@plt+0x4258>
   16208:	mov	r0, #22
   1620c:	bl	13de4 <__assert_fail@plt+0x2070>
   16210:	cmp	r0, #0
   16214:	beq	15fcc <__assert_fail@plt+0x4258>
   16218:	mov	r0, #176	; 0xb0
   1621c:	b	15eb8 <__assert_fail@plt+0x4144>
   16220:	mov	r0, #20
   16224:	bl	13de4 <__assert_fail@plt+0x2070>
   16228:	cmp	r0, #0
   1622c:	movne	r0, #160	; 0xa0
   16230:	bne	15eb8 <__assert_fail@plt+0x4144>
   16234:	b	16174 <__assert_fail@plt+0x4400>
   16238:	andeq	r9, r3, r0, lsr r3
   1623c:	ldrdeq	r9, [r3], -r0
   16240:	andeq	r9, r3, r8, lsl #5
   16244:	andeq	r3, r2, r8, asr sp
   16248:	andeq	r0, r0, r2, lsl #4
   1624c:	push	{r4, r5, lr}
   16250:	sub	sp, sp, #8192	; 0x2000
   16254:	sub	sp, sp, #28
   16258:	add	r4, sp, #24
   1625c:	mov	r5, r0
   16260:	sub	ip, r4, #9
   16264:	sub	r0, r4, #4
   16268:	str	r0, [sp]
   1626c:	mov	r3, r2
   16270:	str	ip, [sp, #4]
   16274:	mov	r2, r1
   16278:	sub	r0, r4, #8
   1627c:	mov	r1, r5
   16280:	str	r4, [r4, #-8]
   16284:	bl	156f8 <__assert_fail@plt+0x3984>
   16288:	ldr	r0, [r4, #-8]
   1628c:	cmp	r5, r0
   16290:	cmpne	r0, r4
   16294:	beq	1629c <__assert_fail@plt+0x4528>
   16298:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1629c:	ldrb	r0, [r4, #-9]
   162a0:	ldr	r3, [r4, #-4]
   162a4:	add	r0, r0, r3
   162a8:	add	sp, sp, #8192	; 0x2000
   162ac:	add	sp, sp, #28
   162b0:	pop	{r4, r5, pc}
   162b4:	ldr	r3, [pc, #12]	; 162c8 <__assert_fail@plt+0x4554>
   162b8:	ldr	r2, [r0, #144]	; 0x90
   162bc:	ldr	r0, [r0]
   162c0:	ldr	r1, [r3, #3156]	; 0xc54
   162c4:	b	1624c <__assert_fail@plt+0x44d8>
   162c8:	andeq	r9, r3, r0, lsr r3
   162cc:	push	{r4, r5, r6, r7, r8, lr}
   162d0:	mov	r6, r0
   162d4:	ldr	r4, [r0, #148]	; 0x94
   162d8:	mov	r5, r1
   162dc:	cmp	r4, #0
   162e0:	mov	r7, r2
   162e4:	beq	16324 <__assert_fail@plt+0x45b0>
   162e8:	ldr	r0, [r5, #148]	; 0x94
   162ec:	cmp	r0, #0
   162f0:	beq	16310 <__assert_fail@plt+0x459c>
   162f4:	subs	r0, r4, r0
   162f8:	popne	{r4, r5, r6, r7, r8, pc}
   162fc:	ldr	r1, [r5]
   16300:	ldr	r0, [r6]
   16304:	mov	r3, r7
   16308:	pop	{r4, r5, r6, r7, r8, lr}
   1630c:	bx	r3
   16310:	mov	r0, r5
   16314:	bl	162b4 <__assert_fail@plt+0x4540>
   16318:	subs	r0, r4, r0
   1631c:	popne	{r4, r5, r6, r7, r8, pc}
   16320:	b	162fc <__assert_fail@plt+0x4588>
   16324:	bl	162b4 <__assert_fail@plt+0x4540>
   16328:	mov	r4, r0
   1632c:	b	162e8 <__assert_fail@plt+0x4574>
   16330:	mov	r3, r1
   16334:	ldr	r2, [pc, #8]	; 16344 <__assert_fail@plt+0x45d0>
   16338:	mov	r1, r0
   1633c:	mov	r0, r3
   16340:	b	162cc <__assert_fail@plt+0x4558>
   16344:	andeq	r1, r1, r0, lsr #17
   16348:	ldr	r2, [pc]	; 16350 <__assert_fail@plt+0x45dc>
   1634c:	b	162cc <__assert_fail@plt+0x4558>
   16350:	andeq	r1, r1, r0, lsr #17
   16354:	mov	r3, r1
   16358:	ldr	r2, [pc, #8]	; 16368 <__assert_fail@plt+0x45f4>
   1635c:	mov	r1, r0
   16360:	mov	r0, r3
   16364:	b	162cc <__assert_fail@plt+0x4558>
   16368:	strdeq	r4, [r1], -r0
   1636c:	ldr	r2, [pc]	; 16374 <__assert_fail@plt+0x4600>
   16370:	b	162cc <__assert_fail@plt+0x4558>
   16374:	strdeq	r4, [r1], -r0
   16378:	push	{r4, r5, r6, lr}
   1637c:	ldr	r4, [pc, #444]	; 16540 <__assert_fail@plt+0x47cc>
   16380:	ldr	ip, [r4, #3104]	; 0xc20
   16384:	ldr	r3, [r4, #3600]	; 0xe10
   16388:	add	r2, ip, ip, lsr #1
   1638c:	cmp	r2, r3
   16390:	bhi	164f0 <__assert_fail@plt+0x477c>
   16394:	cmp	ip, #0
   16398:	beq	16518 <__assert_fail@plt+0x47a4>
   1639c:	ldr	r2, [pc, #412]	; 16540 <__assert_fail@plt+0x47cc>
   163a0:	ldr	r3, [r2, #3152]	; 0xc50
   163a4:	ldr	r2, [r2, #3604]	; 0xe14
   163a8:	add	r1, r3, ip, lsl #2
   163ac:	str	r2, [r3], #4
   163b0:	cmp	r1, r3
   163b4:	add	r2, r2, #152	; 0x98
   163b8:	bne	163ac <__assert_fail@plt+0x4638>
   163bc:	ldr	r3, [pc, #380]	; 16540 <__assert_fail@plt+0x47cc>
   163c0:	ldr	r3, [r3, #3100]	; 0xc1c
   163c4:	cmp	r3, #2
   163c8:	beq	164a0 <__assert_fail@plt+0x472c>
   163cc:	ldr	r2, [pc, #364]	; 16540 <__assert_fail@plt+0x47cc>
   163d0:	ldr	r1, [r2, #3596]	; 0xe0c
   163d4:	cmp	r1, #0
   163d8:	beq	163ec <__assert_fail@plt+0x4678>
   163dc:	ldr	r2, [r2, #3092]	; 0xc14
   163e0:	sub	r2, r2, #2
   163e4:	cmp	r2, #1
   163e8:	bls	16498 <__assert_fail@plt+0x4724>
   163ec:	cmp	r3, #6
   163f0:	popeq	{r4, r5, r6, pc}
   163f4:	ldr	r0, [pc, #328]	; 16544 <__assert_fail@plt+0x47d0>
   163f8:	bl	118e8 <_setjmp@plt>
   163fc:	subs	r3, r0, #0
   16400:	beq	16448 <__assert_fail@plt+0x46d4>
   16404:	ldr	r3, [pc, #308]	; 16540 <__assert_fail@plt+0x47cc>
   16408:	ldr	lr, [r3, #3100]	; 0xc1c
   1640c:	cmp	lr, #4
   16410:	beq	1652c <__assert_fail@plt+0x47b8>
   16414:	ldr	r1, [r3, #3104]	; 0xc20
   16418:	ldr	r0, [r3, #3152]	; 0xc50
   1641c:	cmp	r1, #0
   16420:	beq	16440 <__assert_fail@plt+0x46cc>
   16424:	ldr	r2, [r3, #3604]	; 0xe14
   16428:	add	ip, r0, r1, lsl #2
   1642c:	mov	r3, r0
   16430:	str	r2, [r3], #4
   16434:	cmp	ip, r3
   16438:	add	r2, r2, #152	; 0x98
   1643c:	bne	16430 <__assert_fail@plt+0x46bc>
   16440:	mov	r3, #1
   16444:	b	16458 <__assert_fail@plt+0x46e4>
   16448:	ldr	r2, [pc, #240]	; 16540 <__assert_fail@plt+0x47cc>
   1644c:	ldr	r1, [r2, #3104]	; 0xc20
   16450:	ldr	lr, [r2, #3100]	; 0xc1c
   16454:	ldr	r0, [r2, #3152]	; 0xc50
   16458:	cmp	lr, #5
   1645c:	ldr	r4, [pc, #220]	; 16540 <__assert_fail@plt+0x47cc>
   16460:	ldreq	r2, [pc, #216]	; 16540 <__assert_fail@plt+0x47cc>
   16464:	movne	ip, #0
   16468:	ldreq	ip, [r2, #3084]	; 0xc0c
   1646c:	ldr	r2, [pc, #212]	; 16548 <__assert_fail@plt+0x47d4>
   16470:	add	ip, ip, lr
   16474:	ldrb	lr, [r4, #4000]	; 0xfa0
   16478:	add	r3, r3, ip, lsl #1
   1647c:	ldrb	ip, [r4, #4001]	; 0xfa1
   16480:	add	r3, lr, r3, lsl #1
   16484:	add	r3, ip, r3, lsl #1
   16488:	add	r3, r2, r3, lsl #2
   1648c:	ldr	r2, [r3, #100]	; 0x64
   16490:	bl	1d71c <__assert_fail@plt+0xb9a8>
   16494:	pop	{r4, r5, r6, pc}
   16498:	cmp	ip, #0
   1649c:	beq	163ec <__assert_fail@plt+0x4678>
   164a0:	ldr	r6, [pc, #152]	; 16540 <__assert_fail@plt+0x47cc>
   164a4:	mov	r4, #0
   164a8:	b	164c0 <__assert_fail@plt+0x474c>
   164ac:	ldr	r3, [r6, #3104]	; 0xc20
   164b0:	add	r4, r4, #1
   164b4:	cmp	r4, r3
   164b8:	str	r0, [r5, #148]	; 0x94
   164bc:	bcs	164e0 <__assert_fail@plt+0x476c>
   164c0:	ldr	r3, [r6, #3152]	; 0xc50
   164c4:	ldr	r5, [r3, r4, lsl #2]
   164c8:	ldr	r0, [r5, #148]	; 0x94
   164cc:	cmp	r0, #0
   164d0:	bne	164ac <__assert_fail@plt+0x4738>
   164d4:	mov	r0, r5
   164d8:	bl	162b4 <__assert_fail@plt+0x4540>
   164dc:	b	164ac <__assert_fail@plt+0x4738>
   164e0:	ldr	r3, [r6, #3100]	; 0xc1c
   164e4:	cmp	r3, #6
   164e8:	bne	163f4 <__assert_fail@plt+0x4680>
   164ec:	pop	{r4, r5, r6, pc}
   164f0:	ldr	r0, [r4, #3152]	; 0xc50
   164f4:	bl	1ad20 <__assert_fail@plt+0x8fac>
   164f8:	mov	r1, #12
   164fc:	ldr	r0, [r4, #3104]	; 0xc20
   16500:	bl	220cc <_obstack_memory_used@@Base+0x2c40>
   16504:	ldr	ip, [r4, #3104]	; 0xc20
   16508:	add	r3, ip, ip, lsl #1
   1650c:	str	r3, [r4, #3600]	; 0xe10
   16510:	str	r0, [r4, #3152]	; 0xc50
   16514:	b	16394 <__assert_fail@plt+0x4620>
   16518:	ldr	r3, [pc, #32]	; 16540 <__assert_fail@plt+0x47cc>
   1651c:	ldr	r3, [r3, #3100]	; 0xc1c
   16520:	cmp	r3, #2
   16524:	bne	163cc <__assert_fail@plt+0x4658>
   16528:	b	163f4 <__assert_fail@plt+0x4680>
   1652c:	ldr	r3, [pc, #24]	; 1654c <__assert_fail@plt+0x47d8>
   16530:	ldr	r2, [pc, #24]	; 16550 <__assert_fail@plt+0x47dc>
   16534:	ldr	r1, [pc, #24]	; 16554 <__assert_fail@plt+0x47e0>
   16538:	ldr	r0, [pc, #24]	; 16558 <__assert_fail@plt+0x47e4>
   1653c:	bl	11d74 <__assert_fail@plt>
   16540:	andeq	r9, r3, r0, lsr r3
   16544:	andeq	sl, r3, r8, asr #2
   16548:	andeq	r3, r2, r8, asr sp
   1654c:			; <UNDEFINED> instruction: 0x00023db0
   16550:	andeq	r1, r0, r6
   16554:	andeq	r5, r2, r8, lsl #10
   16558:	andeq	r5, r2, r4, lsl r5
   1655c:	push	{r4, r5, r6, r8, r9, lr}
   16560:	mov	r6, r0
   16564:	ldr	r5, [pc, #324]	; 166b0 <__assert_fail@plt+0x493c>
   16568:	sub	sp, sp, #672	; 0x2a0
   1656c:	ldrb	r4, [r5, #3088]	; 0xc10
   16570:	cmp	r4, #0
   16574:	beq	165f8 <__assert_fail@plt+0x4884>
   16578:	ldr	r3, [r5, #3092]	; 0xc14
   1657c:	cmp	r3, #4
   16580:	beq	165e4 <__assert_fail@plt+0x4870>
   16584:	ldrb	r3, [r5, #3089]	; 0xc11
   16588:	ldr	r4, [r5, #3112]	; 0xc28
   1658c:	cmp	r3, #0
   16590:	add	r4, r4, #1
   16594:	bne	16610 <__assert_fail@plt+0x489c>
   16598:	ldrb	r3, [r5, #4016]	; 0xfb0
   1659c:	cmp	r3, #0
   165a0:	bne	16634 <__assert_fail@plt+0x48c0>
   165a4:	ldr	r0, [r6, #148]	; 0x94
   165a8:	cmp	r0, #0
   165ac:	beq	1664c <__assert_fail@plt+0x48d8>
   165b0:	ldr	r3, [r5, #3444]	; 0xd74
   165b4:	add	r4, r4, r0
   165b8:	cmp	r3, #0
   165bc:	beq	165d8 <__assert_fail@plt+0x4864>
   165c0:	ldr	r2, [r6, #120]	; 0x78
   165c4:	ldr	r1, [r6, #32]
   165c8:	ldrb	r0, [r6, #132]	; 0x84
   165cc:	bl	15124 <__assert_fail@plt+0x33b0>
   165d0:	cmp	r0, #0
   165d4:	addne	r4, r4, #1
   165d8:	mov	r0, r4
   165dc:	add	sp, sp, #672	; 0x2a0
   165e0:	pop	{r4, r5, r6, r8, r9, pc}
   165e4:	add	r2, sp, #20
   165e8:	ldrd	r0, [r0, #112]	; 0x70
   165ec:	bl	1ce80 <__assert_fail@plt+0xb10c>
   165f0:	bl	11b94 <strlen@plt>
   165f4:	add	r4, r0, #1
   165f8:	ldrb	r3, [r5, #3089]	; 0xc11
   165fc:	cmp	r3, #0
   16600:	beq	1661c <__assert_fail@plt+0x48a8>
   16604:	ldr	r3, [r5, #3092]	; 0xc14
   16608:	cmp	r3, #4
   1660c:	beq	16658 <__assert_fail@plt+0x48e4>
   16610:	ldr	r0, [r5, #3116]	; 0xc2c
   16614:	add	r0, r0, #1
   16618:	add	r4, r4, r0
   1661c:	ldrb	r3, [r5, #4016]	; 0xfb0
   16620:	cmp	r3, #0
   16624:	beq	165a4 <__assert_fail@plt+0x4830>
   16628:	ldr	r3, [r5, #3092]	; 0xc14
   1662c:	cmp	r3, #4
   16630:	beq	166a0 <__assert_fail@plt+0x492c>
   16634:	ldr	r0, [r5, #3136]	; 0xc40
   16638:	add	r0, r0, #1
   1663c:	add	r4, r4, r0
   16640:	ldr	r0, [r6, #148]	; 0x94
   16644:	cmp	r0, #0
   16648:	bne	165b0 <__assert_fail@plt+0x483c>
   1664c:	mov	r0, r6
   16650:	bl	162b4 <__assert_fail@plt+0x4540>
   16654:	b	165b0 <__assert_fail@plt+0x483c>
   16658:	ldrb	r3, [r6, #132]	; 0x84
   1665c:	cmp	r3, #0
   16660:	moveq	r0, #2
   16664:	beq	16618 <__assert_fail@plt+0x48a4>
   16668:	ldr	r3, [pc, #68]	; 166b4 <__assert_fail@plt+0x4940>
   1666c:	ldr	ip, [r5, #4004]	; 0xfa4
   16670:	mov	r8, #512	; 0x200
   16674:	ldrd	r2, [r3, #-8]
   16678:	mov	r9, #0
   1667c:	ldrd	r0, [r6, #80]	; 0x50
   16680:	strd	r2, [sp, #8]
   16684:	strd	r8, [sp]
   16688:	mov	r3, ip
   1668c:	add	r2, sp, #20
   16690:	bl	1be68 <__assert_fail@plt+0xa0f4>
   16694:	bl	11b94 <strlen@plt>
   16698:	add	r0, r0, #1
   1669c:	b	16618 <__assert_fail@plt+0x48a4>
   166a0:	ldr	r0, [r6, #128]	; 0x80
   166a4:	bl	11b94 <strlen@plt>
   166a8:	add	r0, r0, #1
   166ac:	b	1663c <__assert_fail@plt+0x48c8>
   166b0:	andeq	r9, r3, r0, lsr r3
   166b4:	andeq	sl, r3, r0, ror #5
   166b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166bc:	mov	r9, r0
   166c0:	ldr	r8, [pc, #716]	; 16994 <__assert_fail@plt+0x4c20>
   166c4:	sub	sp, sp, #20
   166c8:	ldr	r1, [r8, #4020]	; 0xfb4
   166cc:	ldr	fp, [r8, #3104]	; 0xc20
   166d0:	cmp	r1, #0
   166d4:	bne	16828 <__assert_fail@plt+0x4ab4>
   166d8:	ldr	r2, [r8, #4024]	; 0xfb8
   166dc:	cmp	r2, fp
   166e0:	bcc	16844 <__assert_fail@plt+0x4ad0>
   166e4:	cmp	fp, #0
   166e8:	mov	r7, fp
   166ec:	beq	168e4 <__assert_fail@plt+0x4b70>
   166f0:	ldr	lr, [r8, #4028]	; 0xfbc
   166f4:	mov	r0, #0
   166f8:	mov	r6, #1
   166fc:	mov	ip, #3
   16700:	ldr	r2, [lr, #8]
   16704:	add	r1, r0, #1
   16708:	sub	r2, r2, #4
   1670c:	mov	r3, #0
   16710:	add	r4, r1, r1, lsl #1
   16714:	strb	r6, [lr]
   16718:	str	r4, [lr, #4]
   1671c:	add	r3, r3, #1
   16720:	cmp	r3, r0
   16724:	str	ip, [r2, #4]!
   16728:	bls	1671c <__assert_fail@plt+0x49a8>
   1672c:	cmp	fp, r1
   16730:	add	lr, lr, #12
   16734:	mov	r0, r1
   16738:	bne	16700 <__assert_fail@plt+0x498c>
   1673c:	cmp	r7, #0
   16740:	beq	16944 <__assert_fail@plt+0x4bd0>
   16744:	mov	r6, #0
   16748:	ldr	r3, [r8, #3152]	; 0xc50
   1674c:	ldr	r0, [r3, r6, lsl #2]
   16750:	bl	1655c <__assert_fail@plt+0x47e8>
   16754:	ldr	r3, [r8, #3104]	; 0xc20
   16758:	cmp	fp, #0
   1675c:	str	r3, [sp, #12]
   16760:	mov	r5, r0
   16764:	beq	16934 <__assert_fail@plt+0x4bc0>
   16768:	ldr	r2, [r8, #3596]	; 0xe0c
   1676c:	sub	r3, r3, #1
   16770:	str	r2, [sp, #4]
   16774:	str	r3, [sp, #8]
   16778:	ldr	r7, [r8, #4028]	; 0xfbc
   1677c:	mov	r4, #1
   16780:	mov	sl, fp
   16784:	b	16800 <__assert_fail@plt+0x4a8c>
   16788:	ldr	r3, [sp, #8]
   1678c:	add	r0, r3, r4
   16790:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   16794:	mov	r1, r0
   16798:	mov	r0, r6
   1679c:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   167a0:	mov	r1, r0
   167a4:	ldr	r0, [r7, #8]
   167a8:	cmp	r1, fp
   167ac:	movne	r3, #2
   167b0:	moveq	r3, #0
   167b4:	ldr	lr, [r0, r1, lsl #2]
   167b8:	add	r3, r3, r5
   167bc:	cmp	r3, lr
   167c0:	bls	167f0 <__assert_fail@plt+0x4a7c>
   167c4:	ldr	ip, [r7, #4]
   167c8:	ldr	r2, [sp, #4]
   167cc:	sub	ip, ip, lr
   167d0:	add	ip, ip, r3
   167d4:	str	ip, [r7, #4]
   167d8:	str	r3, [r0, r1, lsl #2]
   167dc:	ldr	r3, [r7, #4]
   167e0:	cmp	r3, r2
   167e4:	movcs	r3, #0
   167e8:	movcc	r3, #1
   167ec:	strb	r3, [r7]
   167f0:	cmp	sl, r4
   167f4:	add	r7, r7, #12
   167f8:	add	r4, r4, #1
   167fc:	bls	16930 <__assert_fail@plt+0x4bbc>
   16800:	ldrb	r1, [r7]
   16804:	sub	fp, r4, #1
   16808:	cmp	r1, #0
   1680c:	beq	167f0 <__assert_fail@plt+0x4a7c>
   16810:	cmp	r9, #0
   16814:	mov	r1, r4
   16818:	bne	16788 <__assert_fail@plt+0x4a14>
   1681c:	mov	r0, r6
   16820:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   16824:	b	167a4 <__assert_fail@plt+0x4a30>
   16828:	cmp	r1, fp
   1682c:	bcc	168f8 <__assert_fail@plt+0x4b84>
   16830:	ldr	r2, [r8, #4024]	; 0xfb8
   16834:	cmp	fp, r2
   16838:	bls	166e4 <__assert_fail@plt+0x4970>
   1683c:	cmp	fp, r1, lsr #1
   16840:	bcs	16918 <__assert_fail@plt+0x4ba4>
   16844:	mov	r2, #24
   16848:	mov	r1, fp
   1684c:	ldr	r0, [r8, #4028]	; 0xfbc
   16850:	bl	22070 <_obstack_memory_used@@Base+0x2be4>
   16854:	lsl	r4, fp, #1
   16858:	str	r0, [r8, #4028]	; 0xfbc
   1685c:	ldr	r1, [r8, #4024]	; 0xfb8
   16860:	add	r5, r1, #1
   16864:	add	r5, r5, r4
   16868:	sub	r1, r4, r1
   1686c:	cmp	r4, r5
   16870:	mul	r6, r5, r1
   16874:	bhi	16990 <__assert_fail@plt+0x4c1c>
   16878:	mov	r0, r6
   1687c:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   16880:	cmp	r5, r0
   16884:	bne	16990 <__assert_fail@plt+0x4c1c>
   16888:	lsr	r0, r6, #1
   1688c:	mov	r1, #4
   16890:	bl	220cc <_obstack_memory_used@@Base+0x2c40>
   16894:	ldr	r2, [r8, #4024]	; 0xfb8
   16898:	cmp	r4, r2
   1689c:	bls	168d4 <__assert_fail@plt+0x4b60>
   168a0:	add	lr, r2, r2, lsl #1
   168a4:	ldr	r1, [r8, #4028]	; 0xfbc
   168a8:	add	r2, r2, #1
   168ac:	add	ip, r4, #1
   168b0:	lsl	r2, r2, #2
   168b4:	add	r1, r1, lr, lsl #2
   168b8:	lsl	ip, ip, #2
   168bc:	str	r0, [r1, #8]
   168c0:	add	r0, r0, r2
   168c4:	add	r2, r2, #4
   168c8:	cmp	ip, r2
   168cc:	add	r1, r1, #12
   168d0:	bne	168bc <__assert_fail@plt+0x4b48>
   168d4:	cmp	fp, #0
   168d8:	str	r4, [r8, #4024]	; 0xfb8
   168dc:	ldr	r7, [r8, #3104]	; 0xc20
   168e0:	bne	166f0 <__assert_fail@plt+0x497c>
   168e4:	cmp	r7, #0
   168e8:	bne	16744 <__assert_fail@plt+0x49d0>
   168ec:	mov	r0, fp
   168f0:	add	sp, sp, #20
   168f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168f8:	ldr	r2, [r8, #4024]	; 0xfb8
   168fc:	cmp	r1, r2
   16900:	movls	r7, fp
   16904:	movls	fp, r1
   16908:	bls	166f0 <__assert_fail@plt+0x497c>
   1690c:	mov	fp, r1
   16910:	cmp	fp, r1, lsr #1
   16914:	bcc	16844 <__assert_fail@plt+0x4ad0>
   16918:	mov	r2, #12
   1691c:	ldr	r0, [r8, #4028]	; 0xfbc
   16920:	bl	22070 <_obstack_memory_used@@Base+0x2be4>
   16924:	ldr	r4, [r8, #4020]	; 0xfb4
   16928:	str	r0, [r8, #4028]	; 0xfbc
   1692c:	b	1685c <__assert_fail@plt+0x4ae8>
   16930:	mov	fp, sl
   16934:	ldr	r3, [sp, #12]
   16938:	add	r6, r6, #1
   1693c:	cmp	r6, r3
   16940:	bcc	16748 <__assert_fail@plt+0x49d4>
   16944:	cmp	fp, #1
   16948:	bls	168ec <__assert_fail@plt+0x4b78>
   1694c:	add	r1, fp, fp, lsl #1
   16950:	ldr	r2, [r8, #4028]	; 0xfbc
   16954:	add	r2, r2, r1, lsl #2
   16958:	ldrb	r1, [r2, #-12]
   1695c:	cmp	r1, #0
   16960:	beq	16978 <__assert_fail@plt+0x4c04>
   16964:	b	168ec <__assert_fail@plt+0x4b78>
   16968:	sub	r2, r2, #12
   1696c:	ldrb	r3, [r2, #-12]
   16970:	cmp	r3, #0
   16974:	bne	168ec <__assert_fail@plt+0x4b78>
   16978:	sub	fp, fp, #1
   1697c:	cmp	fp, #1
   16980:	bne	16968 <__assert_fail@plt+0x4bf4>
   16984:	mov	r0, fp
   16988:	add	sp, sp, #20
   1698c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16990:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   16994:	andeq	r9, r3, r0, lsr r3
   16998:	ldrd	r2, [r0, #64]	; 0x40
   1699c:	push	{r4, r5}
   169a0:	mov	ip, r1
   169a4:	ldrd	r4, [r1, #64]	; 0x40
   169a8:	cmp	r2, r4
   169ac:	sbcs	r1, r3, r5
   169b0:	blt	169d0 <__assert_fail@plt+0x4c5c>
   169b4:	cmp	r4, r2
   169b8:	sbcs	r3, r5, r3
   169bc:	blt	169dc <__assert_fail@plt+0x4c68>
   169c0:	ldr	r1, [r0]
   169c4:	pop	{r4, r5}
   169c8:	ldr	r0, [ip]
   169cc:	b	118a0 <strcmp@plt>
   169d0:	mvn	r0, #0
   169d4:	pop	{r4, r5}
   169d8:	bx	lr
   169dc:	mov	r0, #1
   169e0:	pop	{r4, r5}
   169e4:	bx	lr
   169e8:	ldrd	r2, [r1, #64]	; 0x40
   169ec:	push	{r4, r5}
   169f0:	ldrd	r4, [r0, #64]	; 0x40
   169f4:	cmp	r2, r4
   169f8:	sbcs	ip, r3, r5
   169fc:	blt	16a1c <__assert_fail@plt+0x4ca8>
   16a00:	cmp	r4, r2
   16a04:	sbcs	r3, r5, r3
   16a08:	blt	16a28 <__assert_fail@plt+0x4cb4>
   16a0c:	ldr	r1, [r1]
   16a10:	ldr	r0, [r0]
   16a14:	pop	{r4, r5}
   16a18:	b	149f0 <__assert_fail@plt+0x2c7c>
   16a1c:	mvn	r0, #0
   16a20:	pop	{r4, r5}
   16a24:	bx	lr
   16a28:	mov	r0, #1
   16a2c:	pop	{r4, r5}
   16a30:	bx	lr
   16a34:	ldrd	r2, [r1, #64]	; 0x40
   16a38:	push	{r4, r5}
   16a3c:	ldrd	r4, [r0, #64]	; 0x40
   16a40:	cmp	r2, r4
   16a44:	sbcs	ip, r3, r5
   16a48:	blt	16a68 <__assert_fail@plt+0x4cf4>
   16a4c:	cmp	r4, r2
   16a50:	sbcs	r3, r5, r3
   16a54:	blt	16a74 <__assert_fail@plt+0x4d00>
   16a58:	ldr	r1, [r1]
   16a5c:	ldr	r0, [r0]
   16a60:	pop	{r4, r5}
   16a64:	b	118a0 <strcmp@plt>
   16a68:	mvn	r0, #0
   16a6c:	pop	{r4, r5}
   16a70:	bx	lr
   16a74:	mov	r0, #1
   16a78:	pop	{r4, r5}
   16a7c:	bx	lr
   16a80:	ldrd	r2, [r0, #64]	; 0x40
   16a84:	push	{r4, r5}
   16a88:	mov	ip, r1
   16a8c:	ldrd	r4, [r1, #64]	; 0x40
   16a90:	cmp	r2, r4
   16a94:	sbcs	r1, r3, r5
   16a98:	blt	16ab8 <__assert_fail@plt+0x4d44>
   16a9c:	cmp	r4, r2
   16aa0:	sbcs	r3, r5, r3
   16aa4:	blt	16ac4 <__assert_fail@plt+0x4d50>
   16aa8:	ldr	r1, [r0]
   16aac:	pop	{r4, r5}
   16ab0:	ldr	r0, [ip]
   16ab4:	b	149f0 <__assert_fail@plt+0x2c7c>
   16ab8:	mvn	r0, #0
   16abc:	pop	{r4, r5}
   16ac0:	bx	lr
   16ac4:	mov	r0, #1
   16ac8:	pop	{r4, r5}
   16acc:	bx	lr
   16ad0:	ldr	r3, [r0, #104]	; 0x68
   16ad4:	push	{r4, r5, lr}
   16ad8:	ldr	r5, [r1, #104]	; 0x68
   16adc:	ldr	r4, [r1, #108]	; 0x6c
   16ae0:	cmp	r5, r3
   16ae4:	ldr	lr, [r0, #108]	; 0x6c
   16ae8:	movge	ip, #0
   16aec:	movlt	ip, #1
   16af0:	cmp	r5, r3
   16af4:	rsble	ip, ip, #0
   16af8:	rsbgt	ip, ip, #1
   16afc:	cmp	r4, lr
   16b00:	movge	r3, #0
   16b04:	movlt	r3, #1
   16b08:	cmp	r4, lr
   16b0c:	rsble	r3, r3, #0
   16b10:	rsbgt	r3, r3, #1
   16b14:	adds	r3, r3, ip, lsl #1
   16b18:	beq	16b24 <__assert_fail@plt+0x4db0>
   16b1c:	mov	r0, r3
   16b20:	pop	{r4, r5, pc}
   16b24:	ldr	r1, [r1]
   16b28:	ldr	r0, [r0]
   16b2c:	pop	{r4, r5, lr}
   16b30:	bx	r2
   16b34:	ldr	r2, [pc]	; 16b3c <__assert_fail@plt+0x4dc8>
   16b38:	b	16ad0 <__assert_fail@plt+0x4d5c>
   16b3c:	strdeq	r4, [r1], -r0
   16b40:	ldr	r2, [pc]	; 16b48 <__assert_fail@plt+0x4dd4>
   16b44:	b	16ad0 <__assert_fail@plt+0x4d5c>
   16b48:	andeq	r1, r1, r0, lsr #17
   16b4c:	mov	r3, r1
   16b50:	ldr	r2, [pc, #8]	; 16b60 <__assert_fail@plt+0x4dec>
   16b54:	mov	r1, r0
   16b58:	mov	r0, r3
   16b5c:	b	16ad0 <__assert_fail@plt+0x4d5c>
   16b60:	strdeq	r4, [r1], -r0
   16b64:	mov	r3, r1
   16b68:	ldr	r2, [pc, #8]	; 16b78 <__assert_fail@plt+0x4e04>
   16b6c:	mov	r1, r0
   16b70:	mov	r0, r3
   16b74:	b	16ad0 <__assert_fail@plt+0x4d5c>
   16b78:	andeq	r1, r1, r0, lsr #17
   16b7c:	ldr	r3, [r0, #96]	; 0x60
   16b80:	push	{r4, r5, lr}
   16b84:	ldr	r5, [r1, #96]	; 0x60
   16b88:	ldr	r4, [r1, #100]	; 0x64
   16b8c:	cmp	r5, r3
   16b90:	ldr	lr, [r0, #100]	; 0x64
   16b94:	movge	ip, #0
   16b98:	movlt	ip, #1
   16b9c:	cmp	r5, r3
   16ba0:	rsble	ip, ip, #0
   16ba4:	rsbgt	ip, ip, #1
   16ba8:	cmp	r4, lr
   16bac:	movge	r3, #0
   16bb0:	movlt	r3, #1
   16bb4:	cmp	r4, lr
   16bb8:	rsble	r3, r3, #0
   16bbc:	rsbgt	r3, r3, #1
   16bc0:	adds	r3, r3, ip, lsl #1
   16bc4:	beq	16bd0 <__assert_fail@plt+0x4e5c>
   16bc8:	mov	r0, r3
   16bcc:	pop	{r4, r5, pc}
   16bd0:	ldr	r1, [r1]
   16bd4:	ldr	r0, [r0]
   16bd8:	pop	{r4, r5, lr}
   16bdc:	bx	r2
   16be0:	ldr	r2, [pc]	; 16be8 <__assert_fail@plt+0x4e74>
   16be4:	b	16b7c <__assert_fail@plt+0x4e08>
   16be8:	strdeq	r4, [r1], -r0
   16bec:	ldr	r2, [pc]	; 16bf4 <__assert_fail@plt+0x4e80>
   16bf0:	b	16b7c <__assert_fail@plt+0x4e08>
   16bf4:	andeq	r1, r1, r0, lsr #17
   16bf8:	mov	r3, r1
   16bfc:	ldr	r2, [pc, #8]	; 16c0c <__assert_fail@plt+0x4e98>
   16c00:	mov	r1, r0
   16c04:	mov	r0, r3
   16c08:	b	16b7c <__assert_fail@plt+0x4e08>
   16c0c:	strdeq	r4, [r1], -r0
   16c10:	mov	r3, r1
   16c14:	ldr	r2, [pc, #8]	; 16c24 <__assert_fail@plt+0x4eb0>
   16c18:	mov	r1, r0
   16c1c:	mov	r0, r3
   16c20:	b	16b7c <__assert_fail@plt+0x4e08>
   16c24:	andeq	r1, r1, r0, lsr #17
   16c28:	ldr	r3, [r0, #88]	; 0x58
   16c2c:	push	{r4, r5, lr}
   16c30:	ldr	r5, [r1, #88]	; 0x58
   16c34:	ldr	r4, [r1, #92]	; 0x5c
   16c38:	cmp	r5, r3
   16c3c:	ldr	lr, [r0, #92]	; 0x5c
   16c40:	movge	ip, #0
   16c44:	movlt	ip, #1
   16c48:	cmp	r5, r3
   16c4c:	rsble	ip, ip, #0
   16c50:	rsbgt	ip, ip, #1
   16c54:	cmp	r4, lr
   16c58:	movge	r3, #0
   16c5c:	movlt	r3, #1
   16c60:	cmp	r4, lr
   16c64:	rsble	r3, r3, #0
   16c68:	rsbgt	r3, r3, #1
   16c6c:	adds	r3, r3, ip, lsl #1
   16c70:	beq	16c7c <__assert_fail@plt+0x4f08>
   16c74:	mov	r0, r3
   16c78:	pop	{r4, r5, pc}
   16c7c:	ldr	r1, [r1]
   16c80:	ldr	r0, [r0]
   16c84:	pop	{r4, r5, lr}
   16c88:	bx	r2
   16c8c:	ldr	r2, [pc]	; 16c94 <__assert_fail@plt+0x4f20>
   16c90:	b	16c28 <__assert_fail@plt+0x4eb4>
   16c94:	strdeq	r4, [r1], -r0
   16c98:	ldr	r2, [pc]	; 16ca0 <__assert_fail@plt+0x4f2c>
   16c9c:	b	16c28 <__assert_fail@plt+0x4eb4>
   16ca0:	andeq	r1, r1, r0, lsr #17
   16ca4:	mov	r3, r1
   16ca8:	ldr	r2, [pc, #8]	; 16cb8 <__assert_fail@plt+0x4f44>
   16cac:	mov	r1, r0
   16cb0:	mov	r0, r3
   16cb4:	b	16c28 <__assert_fail@plt+0x4eb4>
   16cb8:	strdeq	r4, [r1], -r0
   16cbc:	mov	r3, r1
   16cc0:	ldr	r2, [pc, #8]	; 16cd0 <__assert_fail@plt+0x4f5c>
   16cc4:	mov	r1, r0
   16cc8:	mov	r0, r3
   16ccc:	b	16c28 <__assert_fail@plt+0x4eb4>
   16cd0:	andeq	r1, r1, r0, lsr #17
   16cd4:	ldr	r3, [r1, #96]	; 0x60
   16cd8:	push	{r4, r5, lr}
   16cdc:	ldr	r5, [r0, #96]	; 0x60
   16ce0:	ldr	lr, [r1, #100]	; 0x64
   16ce4:	cmp	r5, r3
   16ce8:	ldr	r4, [r0, #100]	; 0x64
   16cec:	movle	ip, #0
   16cf0:	movgt	ip, #1
   16cf4:	cmp	r5, r3
   16cf8:	rsbge	ip, ip, #0
   16cfc:	rsblt	ip, ip, #1
   16d00:	cmp	r4, lr
   16d04:	movle	r3, #0
   16d08:	movgt	r3, #1
   16d0c:	cmp	r4, lr
   16d10:	rsbge	r3, r3, #0
   16d14:	rsblt	r3, r3, #1
   16d18:	adds	r3, r3, ip, lsl #1
   16d1c:	beq	16d28 <__assert_fail@plt+0x4fb4>
   16d20:	mov	r0, r3
   16d24:	pop	{r4, r5, pc}
   16d28:	ldr	r1, [r1]
   16d2c:	ldr	r0, [r0]
   16d30:	pop	{r4, r5, lr}
   16d34:	bx	r2
   16d38:	ldr	r2, [pc]	; 16d40 <__assert_fail@plt+0x4fcc>
   16d3c:	b	16cd4 <__assert_fail@plt+0x4f60>
   16d40:	strdeq	r4, [r1], -r0
   16d44:	ldr	r2, [pc]	; 16d4c <__assert_fail@plt+0x4fd8>
   16d48:	b	16cd4 <__assert_fail@plt+0x4f60>
   16d4c:	andeq	r1, r1, r0, lsr #17
   16d50:	mov	r3, r1
   16d54:	ldr	r2, [pc, #8]	; 16d64 <__assert_fail@plt+0x4ff0>
   16d58:	mov	r1, r0
   16d5c:	mov	r0, r3
   16d60:	b	16cd4 <__assert_fail@plt+0x4f60>
   16d64:	strdeq	r4, [r1], -r0
   16d68:	mov	r3, r1
   16d6c:	ldr	r2, [pc, #8]	; 16d7c <__assert_fail@plt+0x5008>
   16d70:	mov	r1, r0
   16d74:	mov	r0, r3
   16d78:	b	16cd4 <__assert_fail@plt+0x4f60>
   16d7c:	andeq	r1, r1, r0, lsr #17
   16d80:	ldr	r3, [pc, #96]	; 16de8 <__assert_fail@plt+0x5074>
   16d84:	push	{r4, r5, lr}
   16d88:	mov	r5, r0
   16d8c:	ldrb	r4, [r3, #3448]	; 0xd78
   16d90:	sub	sp, sp, #20
   16d94:	cmp	r4, #0
   16d98:	beq	16dc8 <__assert_fail@plt+0x5054>
   16d9c:	ldr	r3, [pc, #72]	; 16dec <__assert_fail@plt+0x5078>
   16da0:	mov	r1, #0
   16da4:	str	r3, [sp]
   16da8:	str	r5, [sp, #8]
   16dac:	str	r1, [sp, #12]
   16db0:	mov	r0, r1
   16db4:	mvn	r3, #0
   16db8:	mov	r2, #1
   16dbc:	bl	11d5c <__snprintf_chk@plt>
   16dc0:	add	sp, sp, #20
   16dc4:	pop	{r4, r5, pc}
   16dc8:	bl	1ca68 <__assert_fail@plt+0xacf4>
   16dcc:	cmp	r0, #0
   16dd0:	beq	16d9c <__assert_fail@plt+0x5028>
   16dd4:	mov	r1, r4
   16dd8:	bl	1d504 <__assert_fail@plt+0xb790>
   16ddc:	bic	r0, r0, r0, asr #31
   16de0:	add	sp, sp, #20
   16de4:	pop	{r4, r5, pc}
   16de8:	andeq	r9, r3, r0, lsr r3
   16dec:	andeq	r5, r2, r0, lsr r5
   16df0:	push	{r4, r5, r6, r7, r8, r9, lr}
   16df4:	sub	sp, sp, #676	; 0x2a4
   16df8:	ldr	r4, [pc, #320]	; 16f40 <__assert_fail@plt+0x51cc>
   16dfc:	mov	r5, r0
   16e00:	mov	r6, r1
   16e04:	bl	156a8 <__assert_fail@plt+0x3934>
   16e08:	ldrb	r3, [r4, #3088]	; 0xc10
   16e0c:	cmp	r3, #0
   16e10:	beq	16e50 <__assert_fail@plt+0x50dc>
   16e14:	ldr	r3, [r4, #3092]	; 0xc14
   16e18:	cmp	r3, #4
   16e1c:	ldrb	r3, [r5, #132]	; 0x84
   16e20:	ldrne	r7, [r4, #3112]	; 0xc28
   16e24:	moveq	r7, #0
   16e28:	cmp	r3, #0
   16e2c:	beq	16e3c <__assert_fail@plt+0x50c8>
   16e30:	ldrd	r0, [r5, #112]	; 0x70
   16e34:	orrs	r3, r0, r1
   16e38:	bne	16f30 <__assert_fail@plt+0x51bc>
   16e3c:	ldr	r3, [pc, #256]	; 16f44 <__assert_fail@plt+0x51d0>
   16e40:	mov	r2, r7
   16e44:	ldr	r1, [pc, #252]	; 16f48 <__assert_fail@plt+0x51d4>
   16e48:	mov	r0, #1
   16e4c:	bl	11bf4 <__printf_chk@plt>
   16e50:	ldrb	r3, [r4, #3089]	; 0xc11
   16e54:	cmp	r3, #0
   16e58:	beq	16e8c <__assert_fail@plt+0x5118>
   16e5c:	ldr	r3, [r4, #3092]	; 0xc14
   16e60:	cmp	r3, #4
   16e64:	ldrb	r3, [r5, #132]	; 0x84
   16e68:	ldrne	r7, [r4, #3116]	; 0xc2c
   16e6c:	moveq	r7, #0
   16e70:	cmp	r3, #0
   16e74:	ldreq	r3, [pc, #200]	; 16f44 <__assert_fail@plt+0x51d0>
   16e78:	bne	16efc <__assert_fail@plt+0x5188>
   16e7c:	mov	r2, r7
   16e80:	ldr	r1, [pc, #192]	; 16f48 <__assert_fail@plt+0x51d4>
   16e84:	mov	r0, #1
   16e88:	bl	11bf4 <__printf_chk@plt>
   16e8c:	ldrb	r3, [r4, #4016]	; 0xfb0
   16e90:	cmp	r3, #0
   16e94:	beq	16eb8 <__assert_fail@plt+0x5144>
   16e98:	ldr	r3, [r4, #3092]	; 0xc14
   16e9c:	ldr	r1, [pc, #164]	; 16f48 <__assert_fail@plt+0x51d4>
   16ea0:	cmp	r3, #4
   16ea4:	moveq	r2, #0
   16ea8:	ldrne	r2, [r4, #3136]	; 0xc40
   16eac:	ldr	r3, [r5, #128]	; 0x80
   16eb0:	mov	r0, #1
   16eb4:	bl	11bf4 <__printf_chk@plt>
   16eb8:	mov	r2, #0
   16ebc:	mov	r3, r6
   16ec0:	mov	r1, r2
   16ec4:	mov	r0, r5
   16ec8:	bl	15e60 <__assert_fail@plt+0x40ec>
   16ecc:	ldr	r3, [r4, #3444]	; 0xd74
   16ed0:	cmp	r3, #0
   16ed4:	mov	r6, r0
   16ed8:	beq	16ef0 <__assert_fail@plt+0x517c>
   16edc:	ldr	r2, [r5, #120]	; 0x78
   16ee0:	ldr	r1, [r5, #32]
   16ee4:	ldrb	r0, [r5, #132]	; 0x84
   16ee8:	bl	1521c <__assert_fail@plt+0x34a8>
   16eec:	add	r6, r6, r0
   16ef0:	mov	r0, r6
   16ef4:	add	sp, sp, #676	; 0x2a4
   16ef8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16efc:	ldr	r3, [pc, #72]	; 16f4c <__assert_fail@plt+0x51d8>
   16f00:	ldr	ip, [r4, #4004]	; 0xfa4
   16f04:	mov	r8, #512	; 0x200
   16f08:	ldrd	r2, [r3, #-8]
   16f0c:	mov	r9, #0
   16f10:	ldrd	r0, [r5, #80]	; 0x50
   16f14:	strd	r2, [sp, #8]
   16f18:	strd	r8, [sp]
   16f1c:	mov	r3, ip
   16f20:	add	r2, sp, #20
   16f24:	bl	1be68 <__assert_fail@plt+0xa0f4>
   16f28:	mov	r3, r0
   16f2c:	b	16e7c <__assert_fail@plt+0x5108>
   16f30:	add	r2, sp, #20
   16f34:	bl	1ce80 <__assert_fail@plt+0xb10c>
   16f38:	mov	r3, r0
   16f3c:	b	16e40 <__assert_fail@plt+0x50cc>
   16f40:	andeq	r9, r3, r0, lsr r3
   16f44:	andeq	r5, r2, r8, ror #9
   16f48:	andeq	r5, r2, r8, lsr r5
   16f4c:	andeq	sl, r3, r0, ror #5
   16f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f54:	sub	sp, sp, #20
   16f58:	ldr	r5, [pc, #392]	; 170e8 <__assert_fail@plt+0x5374>
   16f5c:	ldr	r3, [r5, #3104]	; 0xc20
   16f60:	cmp	r3, #0
   16f64:	beq	17084 <__assert_fail@plt+0x5310>
   16f68:	ldr	r3, [pc, #380]	; 170ec <__assert_fail@plt+0x5378>
   16f6c:	mov	r8, #0
   16f70:	mov	sl, r0
   16f74:	str	r3, [sp, #4]
   16f78:	ldr	r9, [pc, #368]	; 170f0 <__assert_fail@plt+0x537c>
   16f7c:	mov	r4, r8
   16f80:	mov	fp, #32
   16f84:	b	16fb8 <__assert_fail@plt+0x5244>
   16f88:	cmp	r4, #0
   16f8c:	addne	r8, r8, #2
   16f90:	movne	r6, r8
   16f94:	bne	17018 <__assert_fail@plt+0x52a4>
   16f98:	mov	r6, r8
   16f9c:	mov	r1, r6
   16fa0:	mov	r0, r7
   16fa4:	bl	16df0 <__assert_fail@plt+0x507c>
   16fa8:	ldr	r3, [r5, #3104]	; 0xc20
   16fac:	add	r4, r4, #1
   16fb0:	cmp	r3, r4
   16fb4:	bls	17090 <__assert_fail@plt+0x531c>
   16fb8:	ldr	r3, [r5, #3152]	; 0xc50
   16fbc:	ldr	r2, [r5, #3596]	; 0xe0c
   16fc0:	cmp	r2, #0
   16fc4:	ldr	r7, [r3, r4, lsl #2]
   16fc8:	beq	16f88 <__assert_fail@plt+0x5214>
   16fcc:	mov	r0, r7
   16fd0:	bl	1655c <__assert_fail@plt+0x47e8>
   16fd4:	cmp	r4, #0
   16fd8:	moveq	r6, r8
   16fdc:	addeq	r8, r0, r8
   16fe0:	beq	16f9c <__assert_fail@plt+0x5228>
   16fe4:	ldr	r3, [r5, #3596]	; 0xe0c
   16fe8:	add	r6, r8, #2
   16fec:	cmp	r3, #0
   16ff0:	addeq	r8, r0, r6
   16ff4:	beq	17018 <__assert_fail@plt+0x52a4>
   16ff8:	add	r2, r6, r0
   16ffc:	cmp	r3, r2
   17000:	bls	1706c <__assert_fail@plt+0x52f8>
   17004:	mvn	r3, #2
   17008:	sub	r3, r3, r0
   1700c:	cmp	r3, r8
   17010:	bcc	1706c <__assert_fail@plt+0x52f8>
   17014:	mov	r8, r2
   17018:	mov	r2, fp
   1701c:	mov	r3, #32
   17020:	ldr	r0, [r9]
   17024:	ldr	r1, [r0, #20]
   17028:	ldr	ip, [r0, #24]
   1702c:	cmp	r1, ip
   17030:	addcc	ip, r1, #1
   17034:	strcc	ip, [r0, #20]
   17038:	strbcc	sl, [r1]
   1703c:	bcs	170c0 <__assert_fail@plt+0x534c>
   17040:	ldr	r0, [r9]
   17044:	ldr	r1, [r0, #20]
   17048:	ldr	ip, [r0, #24]
   1704c:	cmp	r1, ip
   17050:	addcc	r2, r1, #1
   17054:	strcc	r2, [r0, #20]
   17058:	strbcc	r3, [r1]
   1705c:	bcc	16f9c <__assert_fail@plt+0x5228>
   17060:	mov	r1, r2
   17064:	bl	11c48 <__overflow@plt>
   17068:	b	16f9c <__assert_fail@plt+0x5228>
   1706c:	ldr	r3, [sp, #4]
   17070:	mov	r8, r0
   17074:	mov	r6, #0
   17078:	ldrb	r3, [r3, #210]	; 0xd2
   1707c:	mov	r2, r3
   17080:	b	17020 <__assert_fail@plt+0x52ac>
   17084:	ldr	r9, [pc, #100]	; 170f0 <__assert_fail@plt+0x537c>
   17088:	ldr	r3, [pc, #92]	; 170ec <__assert_fail@plt+0x5378>
   1708c:	str	r3, [sp, #4]
   17090:	ldr	r0, [r9]
   17094:	ldr	r3, [sp, #4]
   17098:	ldr	r2, [r0, #24]
   1709c:	ldrb	r1, [r3, #210]	; 0xd2
   170a0:	ldr	r3, [r0, #20]
   170a4:	cmp	r3, r2
   170a8:	bcs	170dc <__assert_fail@plt+0x5368>
   170ac:	add	r2, r3, #1
   170b0:	str	r2, [r0, #20]
   170b4:	strb	r1, [r3]
   170b8:	add	sp, sp, #20
   170bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170c0:	mov	r1, sl
   170c4:	str	r2, [sp, #12]
   170c8:	str	r3, [sp, #8]
   170cc:	bl	11c48 <__overflow@plt>
   170d0:	ldr	r3, [sp, #8]
   170d4:	ldr	r2, [sp, #12]
   170d8:	b	17040 <__assert_fail@plt+0x52cc>
   170dc:	add	sp, sp, #20
   170e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170e4:	b	11c48 <__overflow@plt>
   170e8:	andeq	r9, r3, r0, lsr r3
   170ec:	ldrdeq	r9, [r3], -r0
   170f0:	andeq	r9, r3, r4, lsr #6
   170f4:	ldrb	r3, [r0, #132]	; 0x84
   170f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170fc:	sub	sp, sp, #4736	; 0x1280
   17100:	cmp	r3, #0
   17104:	sub	sp, sp, #60	; 0x3c
   17108:	mov	r5, r0
   1710c:	beq	17178 <__assert_fail@plt+0x5404>
   17110:	add	sl, sp, #56	; 0x38
   17114:	sub	r1, sl, #12
   17118:	add	r0, r0, #16
   1711c:	bl	1a730 <__assert_fail@plt+0x89bc>
   17120:	ldr	r6, [pc, #2088]	; 17950 <__assert_fail@plt+0x5bdc>
   17124:	ldrb	r3, [r6, #3109]	; 0xc25
   17128:	cmp	r3, #0
   1712c:	beq	17170 <__assert_fail@plt+0x53fc>
   17130:	ldr	r3, [r5, #136]	; 0x88
   17134:	cmp	r3, #1
   17138:	moveq	r3, #46	; 0x2e
   1713c:	strbeq	r3, [sp, #54]	; 0x36
   17140:	beq	1714c <__assert_fail@plt+0x53d8>
   17144:	cmp	r3, #2
   17148:	beq	1716c <__assert_fail@plt+0x53f8>
   1714c:	ldr	r3, [r6, #3084]	; 0xc0c
   17150:	cmp	r3, #3
   17154:	ldrls	pc, [pc, r3, lsl #2]
   17158:	b	175f4 <__assert_fail@plt+0x5880>
   1715c:	andeq	r7, r1, r0, lsl #10
   17160:	andeq	r7, r1, r0, lsr #10
   17164:	andeq	r7, r1, r8, lsl #9
   17168:	andeq	r7, r1, ip, lsr #3
   1716c:	mov	r3, #43	; 0x2b
   17170:	strb	r3, [sp, #54]	; 0x36
   17174:	b	1714c <__assert_fail@plt+0x53d8>
   17178:	ldr	r1, [r0, #120]	; 0x78
   1717c:	ldr	r2, [pc, #2000]	; 17954 <__assert_fail@plt+0x5be0>
   17180:	add	sl, sp, #56	; 0x38
   17184:	add	r2, r2, r1
   17188:	sub	r1, sl, #11
   1718c:	ldrb	r0, [r2, #388]	; 0x184
   17190:	ldr	r2, [pc, #1984]	; 17958 <__assert_fail@plt+0x5be4>
   17194:	strb	r0, [sp, #44]	; 0x2c
   17198:	str	r2, [sl, #-7]
   1719c:	strh	r2, [sl, #-3]
   171a0:	str	r2, [sl, #-11]
   171a4:	strb	r3, [sp, #55]	; 0x37
   171a8:	b	17120 <__assert_fail@plt+0x53ac>
   171ac:	ldr	r2, [r5, #96]	; 0x60
   171b0:	ldr	r3, [r5, #100]	; 0x64
   171b4:	add	fp, sp, #696	; 0x2b8
   171b8:	cmn	r2, #1
   171bc:	cmneq	r3, #1
   171c0:	moveq	r1, #1
   171c4:	movne	r1, #0
   171c8:	eor	r1, r1, #1
   171cc:	str	r1, [sp, #20]
   171d0:	str	r2, [fp, #-660]	; 0xfffffd6c
   171d4:	str	r3, [fp, #-656]	; 0xfffffd70
   171d8:	ldrb	r3, [r6, #3088]	; 0xc10
   171dc:	cmp	r3, #0
   171e0:	bne	174b0 <__assert_fail@plt+0x573c>
   171e4:	add	r7, sp, #1152	; 0x480
   171e8:	add	r7, r7, #8
   171ec:	sub	r7, r7, #12
   171f0:	mov	r4, r7
   171f4:	ldrb	r3, [r6, #3089]	; 0xc11
   171f8:	cmp	r3, #0
   171fc:	beq	17258 <__assert_fail@plt+0x54e4>
   17200:	ldrb	r3, [r5, #132]	; 0x84
   17204:	cmp	r3, #0
   17208:	ldreq	r8, [pc, #1868]	; 1795c <__assert_fail@plt+0x5be8>
   1720c:	bne	177a4 <__assert_fail@plt+0x5a30>
   17210:	mov	r1, #0
   17214:	mov	r0, r8
   17218:	ldr	r9, [r6, #3116]	; 0xc2c
   1721c:	bl	1d504 <__assert_fail@plt+0xb790>
   17220:	sub	r0, r9, r0
   17224:	cmp	r0, #0
   17228:	ble	17240 <__assert_fail@plt+0x54cc>
   1722c:	add	r0, r4, r0
   17230:	mov	r3, #32
   17234:	strb	r3, [r4], #1
   17238:	cmp	r4, r0
   1723c:	bne	17234 <__assert_fail@plt+0x54c0>
   17240:	ldrb	r3, [r8], #1
   17244:	cmp	r3, #0
   17248:	strb	r3, [r4], #1
   1724c:	bne	17240 <__assert_fail@plt+0x54cc>
   17250:	mov	r3, #32
   17254:	strb	r3, [r4, #-1]
   17258:	ldrb	r3, [r5, #132]	; 0x84
   1725c:	ldr	r8, [r6, #3120]	; 0xc30
   17260:	cmp	r3, #0
   17264:	ldreq	r0, [pc, #1776]	; 1795c <__assert_fail@plt+0x5be8>
   17268:	bne	17558 <__assert_fail@plt+0x57e4>
   1726c:	sub	r3, sl, #12
   17270:	str	r0, [sp, #8]
   17274:	stm	sp, {r3, r8}
   17278:	mov	r0, r4
   1727c:	ldr	r3, [pc, #1756]	; 17960 <__assert_fail@plt+0x5bec>
   17280:	mvn	r2, #0
   17284:	mov	r1, #1
   17288:	bl	11bc4 <__sprintf_chk@plt>
   1728c:	ldrb	r3, [r6, #3588]	; 0xe04
   17290:	cmp	r3, #0
   17294:	add	r4, r4, r0
   17298:	bne	17548 <__assert_fail@plt+0x57d4>
   1729c:	ldr	r3, [pc, #1728]	; 17964 <__assert_fail@plt+0x5bf0>
   172a0:	ldrb	r3, [r3, #204]	; 0xcc
   172a4:	cmp	r3, #0
   172a8:	bne	172c8 <__assert_fail@plt+0x5554>
   172ac:	ldr	r3, [pc, #1712]	; 17964 <__assert_fail@plt+0x5bf0>
   172b0:	ldrb	r3, [r3, #205]	; 0xcd
   172b4:	cmp	r3, #0
   172b8:	bne	172c8 <__assert_fail@plt+0x5554>
   172bc:	ldrb	r3, [r6, #3096]	; 0xc18
   172c0:	cmp	r3, #0
   172c4:	beq	175f8 <__assert_fail@plt+0x5884>
   172c8:	sub	r1, r4, r7
   172cc:	mov	r0, r7
   172d0:	bl	152f0 <__assert_fail@plt+0x357c>
   172d4:	ldr	r3, [pc, #1672]	; 17964 <__assert_fail@plt+0x5bf0>
   172d8:	ldrb	r3, [r3, #204]	; 0xcc
   172dc:	cmp	r3, #0
   172e0:	bne	175e0 <__assert_fail@plt+0x586c>
   172e4:	ldr	r3, [pc, #1656]	; 17964 <__assert_fail@plt+0x5bf0>
   172e8:	ldrb	r3, [r3, #205]	; 0xcd
   172ec:	cmp	r3, #0
   172f0:	bne	175a0 <__assert_fail@plt+0x582c>
   172f4:	ldrb	r3, [r6, #3096]	; 0xc18
   172f8:	cmp	r3, #0
   172fc:	bne	1758c <__assert_fail@plt+0x5818>
   17300:	ldrb	r3, [r6, #4016]	; 0xfb0
   17304:	cmp	r3, #0
   17308:	moveq	r4, r7
   1730c:	bne	1756c <__assert_fail@plt+0x57f8>
   17310:	ldrb	r3, [r5, #132]	; 0x84
   17314:	cmp	r3, #0
   17318:	beq	17540 <__assert_fail@plt+0x57cc>
   1731c:	ldr	r3, [r5, #32]
   17320:	and	r3, r3, #45056	; 0xb000
   17324:	cmp	r3, #8192	; 0x2000
   17328:	beq	177d8 <__assert_fail@plt+0x5a64>
   1732c:	ldr	r3, [pc, #1584]	; 17964 <__assert_fail@plt+0x5bf0>
   17330:	ldr	ip, [r6, #4032]	; 0xfc0
   17334:	mov	r9, #0
   17338:	ldrd	r2, [r3, #216]	; 0xd8
   1733c:	mov	r8, #1
   17340:	ldrd	r0, [r5, #64]	; 0x40
   17344:	strd	r2, [sp, #8]
   17348:	strd	r8, [sp]
   1734c:	mov	r3, ip
   17350:	add	r2, sp, #144	; 0x90
   17354:	bl	1be68 <__assert_fail@plt+0xa0f4>
   17358:	mov	r9, r0
   1735c:	ldr	r3, [r6, #3148]	; 0xc4c
   17360:	mov	r1, #0
   17364:	mov	r0, r9
   17368:	str	r3, [sp, #24]
   1736c:	bl	1d504 <__assert_fail@plt+0xb790>
   17370:	ldr	r3, [sp, #24]
   17374:	sub	r0, r3, r0
   17378:	cmp	r0, #0
   1737c:	ble	17394 <__assert_fail@plt+0x5620>
   17380:	add	r0, r4, r0
   17384:	mov	r3, #32
   17388:	strb	r3, [r4], #1
   1738c:	cmp	r0, r4
   17390:	bne	17388 <__assert_fail@plt+0x5614>
   17394:	ldrb	r3, [r9], #1
   17398:	cmp	r3, #0
   1739c:	strb	r3, [r4], #1
   173a0:	bne	17394 <__assert_fail@plt+0x5620>
   173a4:	mov	r3, #32
   173a8:	strb	r3, [r4, #-1]
   173ac:	ldrb	r3, [r5, #132]	; 0x84
   173b0:	mov	r2, #1
   173b4:	strb	r2, [r4]
   173b8:	ldr	r2, [sp, #20]
   173bc:	tst	r2, r3
   173c0:	bne	17610 <__assert_fail@plt+0x589c>
   173c4:	ldr	r3, [pc, #1432]	; 17964 <__assert_fail@plt+0x5bf0>
   173c8:	ldr	r9, [r3, #224]	; 0xe0
   173cc:	cmp	r9, #0
   173d0:	bge	17884 <__assert_fail@plt+0x5b10>
   173d4:	add	r3, sp, #100	; 0x64
   173d8:	str	r3, [sp, #24]
   173dc:	mov	r2, r3
   173e0:	sub	r1, sl, #24
   173e4:	mov	r3, #0
   173e8:	ldr	r0, [r6, #4036]	; 0xfc4
   173ec:	str	r3, [fp, #-664]	; 0xfffffd68
   173f0:	bl	21958 <_obstack_memory_used@@Base+0x24cc>
   173f4:	cmp	r0, #0
   173f8:	beq	17448 <__assert_fail@plt+0x56d4>
   173fc:	ldrb	r2, [r6, #3076]	; 0xc04
   17400:	ldr	r3, [r6, #4036]	; 0xfc4
   17404:	mov	r9, #0
   17408:	cmp	r2, #0
   1740c:	ldrne	r1, [fp, #-580]	; 0xfffffdbc
   17410:	ldrne	r2, [pc, #1360]	; 17968 <__assert_fail@plt+0x5bf4>
   17414:	ldreq	r2, [pc, #1352]	; 17964 <__assert_fail@plt+0x5bf0>
   17418:	addne	r2, r2, r1, lsl #7
   1741c:	add	r1, sp, #144	; 0x90
   17420:	ldreq	r2, [r2, #196]	; 0xc4
   17424:	str	r1, [sp, #28]
   17428:	str	r3, [sp]
   1742c:	mov	r0, r1
   17430:	ldr	r3, [sp, #24]
   17434:	ldr	r1, [pc, #1328]	; 1796c <__assert_fail@plt+0x5bf8>
   17438:	str	r9, [sp, #4]
   1743c:	bl	1f118 <__assert_fail@plt+0xd3a4>
   17440:	subs	r1, r0, #0
   17444:	bne	17934 <__assert_fail@plt+0x5bc0>
   17448:	ldr	r3, [pc, #1300]	; 17964 <__assert_fail@plt+0x5bf0>
   1744c:	ldr	r9, [r3, #224]	; 0xe0
   17450:	cmp	r9, #0
   17454:	movlt	r3, #0
   17458:	ldrlt	r2, [pc, #1284]	; 17964 <__assert_fail@plt+0x5bf0>
   1745c:	movlt	r9, r3
   17460:	strlt	r3, [r2, #224]	; 0xe0
   17464:	ldrb	r3, [r5, #132]	; 0x84
   17468:	ldr	r2, [sp, #20]
   1746c:	tst	r2, r3
   17470:	beq	17884 <__assert_fail@plt+0x5b10>
   17474:	ldr	r0, [fp, #-660]	; 0xfffffd6c
   17478:	add	r2, sp, #144	; 0x90
   1747c:	asr	r1, r0, #31
   17480:	bl	1cdb0 <__assert_fail@plt+0xb03c>
   17484:	b	17888 <__assert_fail@plt+0x5b14>
   17488:	add	fp, sp, #696	; 0x2b8
   1748c:	ldr	r3, [r5, #88]	; 0x58
   17490:	ldr	r2, [r5, #92]	; 0x5c
   17494:	str	r3, [fp, #-660]	; 0xfffffd6c
   17498:	mov	r3, #1
   1749c:	str	r3, [sp, #20]
   174a0:	ldrb	r3, [r6, #3088]	; 0xc10
   174a4:	str	r2, [fp, #-656]	; 0xfffffd70
   174a8:	cmp	r3, #0
   174ac:	beq	171e4 <__assert_fail@plt+0x5470>
   174b0:	ldrb	r3, [r5, #132]	; 0x84
   174b4:	ldr	r4, [r6, #3112]	; 0xc28
   174b8:	cmp	r3, #0
   174bc:	beq	174cc <__assert_fail@plt+0x5758>
   174c0:	ldrd	r0, [r5, #112]	; 0x70
   174c4:	orrs	r3, r0, r1
   174c8:	bne	178ac <__assert_fail@plt+0x5b38>
   174cc:	ldr	r0, [pc, #1160]	; 1795c <__assert_fail@plt+0x5be8>
   174d0:	add	r7, sp, #1152	; 0x480
   174d4:	add	r7, r7, #8
   174d8:	sub	r7, r7, #12
   174dc:	str	r0, [sp, #4]
   174e0:	str	r4, [sp]
   174e4:	mov	r0, r7
   174e8:	ldr	r3, [pc, #1152]	; 17970 <__assert_fail@plt+0x5bfc>
   174ec:	ldr	r2, [pc, #1152]	; 17974 <__assert_fail@plt+0x5c00>
   174f0:	mov	r1, #1
   174f4:	bl	11bc4 <__sprintf_chk@plt>
   174f8:	add	r4, r7, r0
   174fc:	b	171f4 <__assert_fail@plt+0x5480>
   17500:	add	fp, sp, #696	; 0x2b8
   17504:	ldr	r3, [r5, #96]	; 0x60
   17508:	ldr	r2, [r5, #100]	; 0x64
   1750c:	str	r3, [fp, #-660]	; 0xfffffd6c
   17510:	mov	r3, #1
   17514:	str	r2, [fp, #-656]	; 0xfffffd70
   17518:	str	r3, [sp, #20]
   1751c:	b	171d8 <__assert_fail@plt+0x5464>
   17520:	add	fp, sp, #696	; 0x2b8
   17524:	ldr	r3, [r5, #104]	; 0x68
   17528:	ldr	r2, [r5, #108]	; 0x6c
   1752c:	str	r3, [fp, #-660]	; 0xfffffd6c
   17530:	mov	r3, #1
   17534:	str	r2, [fp, #-656]	; 0xfffffd70
   17538:	str	r3, [sp, #20]
   1753c:	b	171d8 <__assert_fail@plt+0x5464>
   17540:	ldr	r9, [pc, #1044]	; 1795c <__assert_fail@plt+0x5be8>
   17544:	b	1735c <__assert_fail@plt+0x55e8>
   17548:	mov	r1, #2
   1754c:	ldr	r0, [pc, #1060]	; 17978 <__assert_fail@plt+0x5c04>
   17550:	bl	152f0 <__assert_fail@plt+0x357c>
   17554:	b	1729c <__assert_fail@plt+0x5528>
   17558:	add	r2, sp, #144	; 0x90
   1755c:	ldr	r0, [r5, #36]	; 0x24
   17560:	mov	r1, #0
   17564:	bl	1ce80 <__assert_fail@plt+0xb10c>
   17568:	b	1726c <__assert_fail@plt+0x54f8>
   1756c:	ldr	r3, [r6, #3136]	; 0xc40
   17570:	ldr	r0, [r5, #128]	; 0x80
   17574:	mov	r2, #0
   17578:	str	r3, [sp]
   1757c:	mov	r3, #0
   17580:	bl	15328 <__assert_fail@plt+0x35b4>
   17584:	mov	r4, r7
   17588:	b	17310 <__assert_fail@plt+0x559c>
   1758c:	ldrb	r2, [r5, #132]	; 0x84
   17590:	ldr	r1, [r6, #3132]	; 0xc3c
   17594:	ldr	r0, [r5, #40]	; 0x28
   17598:	bl	153b8 <__assert_fail@plt+0x3644>
   1759c:	b	17300 <__assert_fail@plt+0x558c>
   175a0:	ldrb	r3, [r5, #132]	; 0x84
   175a4:	ldr	r4, [r5, #44]	; 0x2c
   175a8:	ldr	r9, [r6, #3128]	; 0xc38
   175ac:	cmp	r3, #0
   175b0:	beq	17608 <__assert_fail@plt+0x5894>
   175b4:	ldrb	r3, [r6, #3448]	; 0xd78
   175b8:	cmp	r3, #0
   175bc:	movne	r0, #0
   175c0:	bne	175cc <__assert_fail@plt+0x5858>
   175c4:	mov	r0, r4
   175c8:	bl	1cc0c <__assert_fail@plt+0xae98>
   175cc:	str	r9, [sp]
   175d0:	mov	r2, r4
   175d4:	mov	r3, #0
   175d8:	bl	15328 <__assert_fail@plt+0x35b4>
   175dc:	b	172f4 <__assert_fail@plt+0x5580>
   175e0:	ldrb	r2, [r5, #132]	; 0x84
   175e4:	ldr	r1, [r6, #3124]	; 0xc34
   175e8:	ldr	r0, [r5, #40]	; 0x28
   175ec:	bl	153b8 <__assert_fail@plt+0x3644>
   175f0:	b	172e4 <__assert_fail@plt+0x5570>
   175f4:	bl	11d2c <abort@plt>
   175f8:	ldrb	r3, [r6, #4016]	; 0xfb0
   175fc:	cmp	r3, #0
   17600:	beq	17310 <__assert_fail@plt+0x559c>
   17604:	b	172c8 <__assert_fail@plt+0x5554>
   17608:	ldr	r0, [pc, #844]	; 1795c <__assert_fail@plt+0x5be8>
   1760c:	b	175cc <__assert_fail@plt+0x5858>
   17610:	mov	r2, sl
   17614:	sub	r1, sl, #20
   17618:	ldr	r0, [r6, #4036]	; 0xfc4
   1761c:	bl	21958 <_obstack_memory_used@@Base+0x24cc>
   17620:	cmp	r0, #0
   17624:	beq	178e0 <__assert_fail@plt+0x5b6c>
   17628:	ldr	r2, [r6, #4044]	; 0xfcc
   1762c:	ldr	ip, [fp, #-656]	; 0xfffffd70
   17630:	ldr	r1, [r6, #4040]	; 0xfc8
   17634:	ldr	r3, [fp, #-660]	; 0xfffffd6c
   17638:	cmp	r2, ip
   1763c:	movgt	r0, #1
   17640:	movle	r0, #0
   17644:	movlt	r9, #1
   17648:	movge	r9, #0
   1764c:	cmp	r1, r3
   17650:	movge	r2, #0
   17654:	movlt	r2, #1
   17658:	cmp	r1, r3
   1765c:	rsble	r2, r2, #0
   17660:	rsbgt	r2, r2, #1
   17664:	sub	lr, r0, r9
   17668:	adds	r2, lr, r2, lsl #1
   1766c:	bmi	17900 <__assert_fail@plt+0x5b8c>
   17670:	ldr	r2, [pc, #772]	; 1797c <__assert_fail@plt+0x5c08>
   17674:	add	r2, r1, r2
   17678:	cmp	r2, r3
   1767c:	movge	r8, #0
   17680:	movlt	r8, #1
   17684:	cmp	r2, r3
   17688:	rsble	r8, r8, #0
   1768c:	rsbgt	r8, r8, #1
   17690:	mov	r2, r8
   17694:	adds	r2, lr, r2, lsl #1
   17698:	movpl	r3, #0
   1769c:	bmi	178b8 <__assert_fail@plt+0x5b44>
   176a0:	ldrb	r2, [r6, #3076]	; 0xc04
   176a4:	ldr	r1, [r6, #4036]	; 0xfc4
   176a8:	cmp	r2, #0
   176ac:	lslne	r0, r3, #1
   176b0:	addne	r0, r0, r3
   176b4:	ldreq	r2, [pc, #680]	; 17964 <__assert_fail@plt+0x5bf0>
   176b8:	ldrne	r3, [fp, #-624]	; 0xfffffd90
   176bc:	addeq	r3, r2, r3, lsl #2
   176c0:	addne	r3, r3, r0, lsl #2
   176c4:	ldrne	r2, [pc, #668]	; 17968 <__assert_fail@plt+0x5bf4>
   176c8:	ldreq	r2, [r3, #196]	; 0xc4
   176cc:	addne	r2, r2, r3, lsl #7
   176d0:	stm	sp, {r1, ip}
   176d4:	mov	r3, sl
   176d8:	ldr	r1, [pc, #652]	; 1796c <__assert_fail@plt+0x5bf8>
   176dc:	mov	r0, r4
   176e0:	bl	1f118 <__assert_fail@plt+0xd3a4>
   176e4:	subs	r3, r0, #0
   176e8:	beq	178e0 <__assert_fail@plt+0x5b6c>
   176ec:	add	r0, r4, r3
   176f0:	add	r0, r0, #1
   176f4:	mov	r2, #32
   176f8:	strb	r2, [r4, r3]
   176fc:	sub	r4, r0, r7
   17700:	mov	r1, r4
   17704:	mov	r0, r7
   17708:	bl	152f0 <__assert_fail@plt+0x357c>
   1770c:	ldr	r2, [pc, #620]	; 17980 <__assert_fail@plt+0x5c0c>
   17710:	mov	r3, r4
   17714:	mov	r1, #0
   17718:	mov	r0, r5
   1771c:	bl	15e60 <__assert_fail@plt+0x40ec>
   17720:	ldr	r2, [r5, #120]	; 0x78
   17724:	cmp	r2, #6
   17728:	mov	r7, r0
   1772c:	beq	17754 <__assert_fail@plt+0x59e0>
   17730:	ldr	r3, [r6, #3444]	; 0xd74
   17734:	cmp	r3, #0
   17738:	beq	17748 <__assert_fail@plt+0x59d4>
   1773c:	ldr	r1, [r5, #32]
   17740:	ldrb	r0, [r5, #132]	; 0x84
   17744:	bl	1521c <__assert_fail@plt+0x34a8>
   17748:	add	sp, sp, #4736	; 0x1280
   1774c:	add	sp, sp, #60	; 0x3c
   17750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17754:	ldr	r3, [r5, #4]
   17758:	cmp	r3, #0
   1775c:	beq	17748 <__assert_fail@plt+0x59d4>
   17760:	mov	r1, #4
   17764:	ldr	r0, [pc, #536]	; 17984 <__assert_fail@plt+0x5c10>
   17768:	bl	152f0 <__assert_fail@plt+0x357c>
   1776c:	add	r3, r7, #4
   17770:	add	r3, r3, r4
   17774:	mov	r2, #0
   17778:	mov	r1, #1
   1777c:	mov	r0, r5
   17780:	bl	15e60 <__assert_fail@plt+0x40ec>
   17784:	ldr	r3, [r6, #3444]	; 0xd74
   17788:	cmp	r3, #0
   1778c:	beq	17748 <__assert_fail@plt+0x59d4>
   17790:	ldr	r1, [r5, #124]	; 0x7c
   17794:	mov	r2, #0
   17798:	mov	r0, #1
   1779c:	bl	1521c <__assert_fail@plt+0x34a8>
   177a0:	b	17748 <__assert_fail@plt+0x59d4>
   177a4:	ldr	r3, [pc, #476]	; 17988 <__assert_fail@plt+0x5c14>
   177a8:	ldr	ip, [r6, #4004]	; 0xfa4
   177ac:	mov	r8, #512	; 0x200
   177b0:	ldrd	r2, [r3, #-8]
   177b4:	mov	r9, #0
   177b8:	ldrd	r0, [r5, #80]	; 0x50
   177bc:	strd	r2, [sp, #8]
   177c0:	strd	r8, [sp]
   177c4:	mov	r3, ip
   177c8:	add	r2, sp, #144	; 0x90
   177cc:	bl	1be68 <__assert_fail@plt+0xa0f4>
   177d0:	mov	r8, r0
   177d4:	b	17210 <__assert_fail@plt+0x549c>
   177d8:	ldr	r0, [r5, #48]	; 0x30
   177dc:	ldr	lr, [r6, #3140]	; 0xc44
   177e0:	ldr	r3, [r5, #52]	; 0x34
   177e4:	ldr	r1, [r6, #3144]	; 0xc48
   177e8:	add	r2, lr, #2
   177ec:	ldr	ip, [r6, #3148]	; 0xc4c
   177f0:	bic	r3, r3, #4080	; 0xff0
   177f4:	lsl	r0, r0, #12
   177f8:	add	r2, r2, r1
   177fc:	bic	r3, r3, #15
   17800:	sub	ip, ip, r2
   17804:	mov	r1, #0
   17808:	orr	r0, r3, r0, lsr #20
   1780c:	add	r2, sp, #100	; 0x64
   17810:	cmp	ip, r1
   17814:	addge	r9, lr, ip
   17818:	addlt	r9, lr, r1
   1781c:	bl	1ce80 <__assert_fail@plt+0xb10c>
   17820:	ldr	r1, [r5, #48]	; 0x30
   17824:	ldr	r3, [r6, #3144]	; 0xc48
   17828:	lsr	r2, r1, #12
   1782c:	uxtb	r1, r1
   17830:	mov	r8, r3
   17834:	str	r0, [sp, #24]
   17838:	ldr	r0, [r5, #52]	; 0x34
   1783c:	orr	r2, r2, r0, lsl #20
   17840:	bic	r2, r2, #255	; 0xff
   17844:	orr	r0, r2, r1
   17848:	add	r2, sp, #144	; 0x90
   1784c:	mov	r1, #0
   17850:	bl	1ce80 <__assert_fail@plt+0xb10c>
   17854:	ldr	r3, [sp, #24]
   17858:	str	r9, [sp]
   1785c:	str	r3, [sp, #4]
   17860:	str	r8, [sp, #8]
   17864:	ldr	r3, [pc, #288]	; 1798c <__assert_fail@plt+0x5c18>
   17868:	mvn	r2, #0
   1786c:	mov	r1, #1
   17870:	str	r0, [sp, #12]
   17874:	mov	r0, r4
   17878:	bl	11bc4 <__sprintf_chk@plt>
   1787c:	add	r4, r4, r0
   17880:	b	173ac <__assert_fail@plt+0x5638>
   17884:	ldr	r0, [pc, #208]	; 1795c <__assert_fail@plt+0x5be8>
   17888:	str	r0, [sp, #4]
   1788c:	str	r9, [sp]
   17890:	ldr	r3, [pc, #216]	; 17970 <__assert_fail@plt+0x5bfc>
   17894:	mvn	r2, #0
   17898:	mov	r1, #1
   1789c:	mov	r0, r4
   178a0:	bl	11bc4 <__sprintf_chk@plt>
   178a4:	add	r0, r4, r0
   178a8:	b	176fc <__assert_fail@plt+0x5988>
   178ac:	add	r2, sp, #144	; 0x90
   178b0:	bl	1ce80 <__assert_fail@plt+0xb10c>
   178b4:	b	174d0 <__assert_fail@plt+0x575c>
   178b8:	cmp	r1, r3
   178bc:	movle	r2, #0
   178c0:	movgt	r2, #1
   178c4:	cmp	r1, r3
   178c8:	rsbge	r1, r2, #0
   178cc:	rsblt	r1, r2, #1
   178d0:	sub	r3, r9, r0
   178d4:	add	r3, r3, r1, lsl #1
   178d8:	lsr	r3, r3, #31
   178dc:	b	176a0 <__assert_fail@plt+0x592c>
   178e0:	ldrb	r3, [r4]
   178e4:	cmp	r3, #0
   178e8:	beq	176ec <__assert_fail@plt+0x5978>
   178ec:	ldr	r3, [pc, #112]	; 17964 <__assert_fail@plt+0x5bf0>
   178f0:	ldr	r9, [r3, #224]	; 0xe0
   178f4:	cmp	r9, #0
   178f8:	bge	17464 <__assert_fail@plt+0x56f0>
   178fc:	b	173d4 <__assert_fail@plt+0x5660>
   17900:	ldr	r0, [pc, #136]	; 17990 <__assert_fail@plt+0x5c1c>
   17904:	bl	1ad78 <__assert_fail@plt+0x9004>
   17908:	ldr	r3, [r6, #4044]	; 0xfcc
   1790c:	ldr	ip, [fp, #-656]	; 0xfffffd70
   17910:	ldr	r1, [r6, #4040]	; 0xfc8
   17914:	cmp	ip, r3
   17918:	movlt	r0, #1
   1791c:	movge	r0, #0
   17920:	movgt	r9, #1
   17924:	movle	r9, #0
   17928:	ldr	r3, [fp, #-660]	; 0xfffffd6c
   1792c:	sub	lr, r0, r9
   17930:	b	17670 <__assert_fail@plt+0x58fc>
   17934:	mov	r2, r9
   17938:	ldr	r0, [sp, #28]
   1793c:	bl	1d348 <__assert_fail@plt+0xb5d4>
   17940:	ldr	r3, [pc, #28]	; 17964 <__assert_fail@plt+0x5bf0>
   17944:	mov	r9, r0
   17948:	str	r0, [r3, #224]	; 0xe0
   1794c:	b	17450 <__assert_fail@plt+0x56dc>
   17950:	andeq	r9, r3, r0, lsr r3
   17954:	andeq	r3, r2, r8, asr sp
   17958:	svccc	0x003f3f3f
   1795c:	andeq	r5, r2, r8, ror #9
   17960:	andeq	r5, r2, r0, asr #10
   17964:	ldrdeq	r9, [r3], -r0
   17968:	andeq	r9, r3, r4, lsr r3
   1796c:	andeq	r0, r0, r9, ror #7
   17970:	andeq	r5, r2, r8, lsr r5
   17974:	andeq	r0, r0, fp, lsr lr
   17978:	andeq	r5, r2, r8, asr #10
   1797c:			; <UNDEFINED> instruction: 0xff0f3d54
   17980:	andeq	sl, r3, r0, lsl #6
   17984:	andeq	r5, r2, r8, asr r5
   17988:	andeq	sl, r3, r0, ror #5
   1798c:	andeq	r5, r2, ip, asr #10
   17990:	strdeq	sl, [r3], -r8
   17994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17998:	sub	sp, sp, #28
   1799c:	ldr	fp, [pc, #912]	; 17d34 <__assert_fail@plt+0x5fc0>
   179a0:	ldr	r2, [fp, #3092]	; 0xc14
   179a4:	cmp	r2, #4
   179a8:	ldrls	pc, [pc, r2, lsl #2]
   179ac:	b	179f0 <__assert_fail@plt+0x5c7c>
   179b0:	andeq	r7, r1, r8, lsl #20
   179b4:	andeq	r7, r1, r0, asr sl
   179b8:	andeq	r7, r1, r4, asr #21
   179bc:	strdeq	r7, [r1], -ip
   179c0:	strdeq	r7, [r1], -r8
   179c4:	ldr	r3, [sp, #20]
   179c8:	ldr	r0, [r3]
   179cc:	ldr	r3, [sp, #16]
   179d0:	ldr	r2, [r0, #24]
   179d4:	ldrb	r1, [r3, #210]	; 0xd2
   179d8:	ldr	r3, [r0, #20]
   179dc:	cmp	r3, r2
   179e0:	addcc	r2, r3, #1
   179e4:	strcc	r2, [r0, #20]
   179e8:	strbcc	r1, [r3]
   179ec:	bcs	17d28 <__assert_fail@plt+0x5fb4>
   179f0:	add	sp, sp, #28
   179f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179f8:	mov	r0, #44	; 0x2c
   179fc:	add	sp, sp, #28
   17a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a04:	b	16f50 <__assert_fail@plt+0x51dc>
   17a08:	ldr	r2, [fp, #3104]	; 0xc20
   17a0c:	cmp	r2, #0
   17a10:	beq	179f0 <__assert_fail@plt+0x5c7c>
   17a14:	ldr	r3, [pc, #796]	; 17d38 <__assert_fail@plt+0x5fc4>
   17a18:	mov	r4, #0
   17a1c:	mov	r5, r3
   17a20:	bl	156a8 <__assert_fail@plt+0x3934>
   17a24:	ldr	r3, [fp, #3152]	; 0xc50
   17a28:	ldr	r0, [r3, r4, lsl #2]
   17a2c:	bl	170f4 <__assert_fail@plt+0x5380>
   17a30:	ldrb	r0, [r5, #210]	; 0xd2
   17a34:	bl	14c7c <__assert_fail@plt+0x2f08>
   17a38:	ldr	r3, [fp, #3104]	; 0xc20
   17a3c:	add	r4, r4, #1
   17a40:	cmp	r3, r4
   17a44:	bhi	17a20 <__assert_fail@plt+0x5cac>
   17a48:	add	sp, sp, #28
   17a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a50:	ldr	r2, [fp, #3104]	; 0xc20
   17a54:	cmp	r2, #0
   17a58:	beq	179f0 <__assert_fail@plt+0x5c7c>
   17a5c:	ldr	r3, [pc, #724]	; 17d38 <__assert_fail@plt+0x5fc4>
   17a60:	ldr	r2, [pc, #724]	; 17d3c <__assert_fail@plt+0x5fc8>
   17a64:	mov	r4, #0
   17a68:	mov	r5, r4
   17a6c:	mov	r6, r3
   17a70:	mov	r7, r2
   17a74:	b	17a88 <__assert_fail@plt+0x5d14>
   17a78:	ldr	r3, [fp, #3104]	; 0xc20
   17a7c:	add	r4, r4, #1
   17a80:	cmp	r3, r4
   17a84:	bls	179f0 <__assert_fail@plt+0x5c7c>
   17a88:	ldr	r3, [fp, #3152]	; 0xc50
   17a8c:	mov	r1, r5
   17a90:	ldr	r0, [r3, r4, lsl #2]
   17a94:	bl	16df0 <__assert_fail@plt+0x507c>
   17a98:	ldr	r0, [r7]
   17a9c:	ldrb	r1, [r6, #210]	; 0xd2
   17aa0:	ldr	r3, [r0, #20]
   17aa4:	ldr	r2, [r0, #24]
   17aa8:	add	ip, r3, #1
   17aac:	cmp	r3, r2
   17ab0:	strcc	ip, [r0, #20]
   17ab4:	strbcc	r1, [r3]
   17ab8:	bcc	17a78 <__assert_fail@plt+0x5d04>
   17abc:	bl	11c48 <__overflow@plt>
   17ac0:	b	17a78 <__assert_fail@plt+0x5d04>
   17ac4:	ldr	r2, [fp, #3596]	; 0xe0c
   17ac8:	cmp	r2, #0
   17acc:	beq	17d08 <__assert_fail@plt+0x5f94>
   17ad0:	mov	r0, #1
   17ad4:	bl	166b8 <__assert_fail@plt+0x4944>
   17ad8:	ldr	r5, [fp, #3104]	; 0xc20
   17adc:	ldr	sl, [fp, #4028]	; 0xfbc
   17ae0:	add	r2, r0, r0, lsl #1
   17ae4:	mov	r4, r0
   17ae8:	lsl	r2, r2, #2
   17aec:	sub	r2, r2, #12
   17af0:	mov	r1, r0
   17af4:	mov	r0, r5
   17af8:	add	sl, sl, r2
   17afc:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   17b00:	mov	r0, r5
   17b04:	adds	r9, r1, #0
   17b08:	mov	r1, r4
   17b0c:	movne	r9, #1
   17b10:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   17b14:	adds	r3, r9, r0
   17b18:	str	r3, [sp, #4]
   17b1c:	beq	179f0 <__assert_fail@plt+0x5c7c>
   17b20:	ldr	r3, [pc, #528]	; 17d38 <__assert_fail@plt+0x5fc4>
   17b24:	str	r3, [sp, #16]
   17b28:	ldr	r3, [pc, #524]	; 17d3c <__assert_fail@plt+0x5fc8>
   17b2c:	str	r3, [sp, #20]
   17b30:	ldr	r3, [sp, #4]
   17b34:	lsl	r3, r3, #2
   17b38:	str	r3, [sp, #8]
   17b3c:	mov	r3, #0
   17b40:	str	r3, [sp, #12]
   17b44:	ldr	r3, [sp, #12]
   17b48:	mov	r5, #0
   17b4c:	mov	r4, r5
   17b50:	lsl	r7, r3, #2
   17b54:	mov	r6, r3
   17b58:	b	17b60 <__assert_fail@plt+0x5dec>
   17b5c:	bl	14cd8 <__assert_fail@plt+0x2f64>
   17b60:	ldr	r3, [fp, #3152]	; 0xc50
   17b64:	ldr	r2, [sp, #4]
   17b68:	ldr	r8, [r3, r7]
   17b6c:	ldr	r3, [sp, #8]
   17b70:	mov	r0, r8
   17b74:	add	r6, r6, r2
   17b78:	add	r7, r7, r3
   17b7c:	bl	1655c <__assert_fail@plt+0x47e8>
   17b80:	ldr	ip, [sl, #8]
   17b84:	mov	r1, r4
   17b88:	mov	r9, r0
   17b8c:	mov	r0, r8
   17b90:	ldr	r8, [ip, r5]
   17b94:	bl	16df0 <__assert_fail@plt+0x507c>
   17b98:	ldr	r1, [fp, #3104]	; 0xc20
   17b9c:	add	r0, r9, r4
   17ba0:	cmp	r6, r1
   17ba4:	add	r4, r4, r8
   17ba8:	mov	r1, r4
   17bac:	add	r5, r5, #4
   17bb0:	bcc	17b5c <__assert_fail@plt+0x5de8>
   17bb4:	ldr	r3, [sp, #20]
   17bb8:	ldr	r0, [r3]
   17bbc:	ldr	r3, [sp, #16]
   17bc0:	ldr	r2, [r0, #24]
   17bc4:	ldrb	r1, [r3, #210]	; 0xd2
   17bc8:	ldr	r3, [r0, #20]
   17bcc:	cmp	r3, r2
   17bd0:	addcc	r2, r3, #1
   17bd4:	strcc	r2, [r0, #20]
   17bd8:	strbcc	r1, [r3]
   17bdc:	bcs	17d18 <__assert_fail@plt+0x5fa4>
   17be0:	ldr	r3, [sp, #12]
   17be4:	ldr	r2, [sp, #4]
   17be8:	add	r3, r3, #1
   17bec:	cmp	r2, r3
   17bf0:	str	r3, [sp, #12]
   17bf4:	bne	17b44 <__assert_fail@plt+0x5dd0>
   17bf8:	b	179f0 <__assert_fail@plt+0x5c7c>
   17bfc:	ldr	r2, [fp, #3596]	; 0xe0c
   17c00:	cmp	r2, #0
   17c04:	beq	17d08 <__assert_fail@plt+0x5f94>
   17c08:	mov	r0, #0
   17c0c:	bl	166b8 <__assert_fail@plt+0x4944>
   17c10:	ldr	r1, [fp, #3152]	; 0xc50
   17c14:	ldr	r7, [fp, #4028]	; 0xfbc
   17c18:	ldr	r4, [r1]
   17c1c:	add	r2, r0, r0, lsl #1
   17c20:	mov	r8, r0
   17c24:	lsl	r2, r2, #2
   17c28:	sub	r2, r2, #12
   17c2c:	mov	r0, r4
   17c30:	add	r7, r7, r2
   17c34:	bl	1655c <__assert_fail@plt+0x47e8>
   17c38:	ldr	r2, [r7, #8]
   17c3c:	mov	r1, #0
   17c40:	ldr	r6, [r2]
   17c44:	mov	r5, r0
   17c48:	mov	r0, r4
   17c4c:	bl	16df0 <__assert_fail@plt+0x507c>
   17c50:	ldr	r3, [pc, #224]	; 17d38 <__assert_fail@plt+0x5fc4>
   17c54:	ldr	r2, [fp, #3104]	; 0xc20
   17c58:	str	r3, [sp, #16]
   17c5c:	ldr	r3, [pc, #216]	; 17d3c <__assert_fail@plt+0x5fc8>
   17c60:	cmp	r2, #1
   17c64:	str	r3, [sp, #20]
   17c68:	movhi	r4, #0
   17c6c:	movhi	r9, #1
   17c70:	bhi	17ce0 <__assert_fail@plt+0x5f6c>
   17c74:	b	179c4 <__assert_fail@plt+0x5c50>
   17c78:	ldr	r3, [sp, #20]
   17c7c:	mov	r4, sl
   17c80:	ldr	r0, [r3]
   17c84:	ldr	r3, [sp, #16]
   17c88:	ldr	ip, [r0, #20]
   17c8c:	ldr	r1, [r0, #24]
   17c90:	add	lr, ip, #1
   17c94:	cmp	ip, r1
   17c98:	ldrb	r1, [r3, #210]	; 0xd2
   17c9c:	strcc	lr, [r0, #20]
   17ca0:	strbcc	r1, [ip]
   17ca4:	bcs	17d20 <__assert_fail@plt+0x5fac>
   17ca8:	ldr	r0, [fp, #3152]	; 0xc50
   17cac:	mov	r1, r4
   17cb0:	ldr	r5, [r0, r9, lsl #2]
   17cb4:	add	r9, r9, #1
   17cb8:	mov	r0, r5
   17cbc:	bl	16df0 <__assert_fail@plt+0x507c>
   17cc0:	mov	r0, r5
   17cc4:	bl	1655c <__assert_fail@plt+0x47e8>
   17cc8:	ldr	r1, [r7, #8]
   17ccc:	ldr	r6, [r1, sl, lsl #2]
   17cd0:	mov	r5, r0
   17cd4:	ldr	r0, [fp, #3104]	; 0xc20
   17cd8:	cmp	r9, r0
   17cdc:	bcs	179c4 <__assert_fail@plt+0x5c50>
   17ce0:	mov	r1, r8
   17ce4:	mov	r0, r9
   17ce8:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   17cec:	subs	sl, r1, #0
   17cf0:	beq	17c78 <__assert_fail@plt+0x5f04>
   17cf4:	add	r0, r5, r4
   17cf8:	add	r4, r4, r6
   17cfc:	mov	r1, r4
   17d00:	bl	14cd8 <__assert_fail@plt+0x2f64>
   17d04:	b	17ca8 <__assert_fail@plt+0x5f34>
   17d08:	mov	r0, #32
   17d0c:	add	sp, sp, #28
   17d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d14:	b	16f50 <__assert_fail@plt+0x51dc>
   17d18:	bl	11c48 <__overflow@plt>
   17d1c:	b	17be0 <__assert_fail@plt+0x5e6c>
   17d20:	bl	11c48 <__overflow@plt>
   17d24:	b	17ca8 <__assert_fail@plt+0x5f34>
   17d28:	add	sp, sp, #28
   17d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d30:	b	11c48 <__overflow@plt>
   17d34:	andeq	r9, r3, r0, lsr r3
   17d38:	ldrdeq	r9, [r3], -r0
   17d3c:	andeq	r9, r3, r4, lsr #6
   17d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d44:	mov	r8, r0
   17d48:	ldr	r4, [pc, #3376]	; 18a80 <__assert_fail@plt+0x6d0c>
   17d4c:	add	fp, sp, #32
   17d50:	mov	r6, r1
   17d54:	sub	sp, sp, #724	; 0x2d4
   17d58:	ldr	r1, [r4, #3104]	; 0xc20
   17d5c:	ldr	r0, [r4, #4092]	; 0xffc
   17d60:	str	r2, [fp, #-724]	; 0xfffffd2c
   17d64:	cmp	r1, r0
   17d68:	mov	r7, r3
   17d6c:	beq	18700 <__assert_fail@plt+0x698c>
   17d70:	ldr	r3, [r4, #3604]	; 0xe14
   17d74:	mov	r5, #152	; 0x98
   17d78:	mov	r2, r5
   17d7c:	mla	r5, r5, r1, r3
   17d80:	mov	r1, #0
   17d84:	mov	r0, r5
   17d88:	bl	11be8 <memset@plt>
   17d8c:	ldrb	r2, [r4, #3108]	; 0xc24
   17d90:	mvn	r3, #0
   17d94:	str	r6, [r5, #120]	; 0x78
   17d98:	cmp	r2, #0
   17d9c:	str	r3, [r5, #144]	; 0x90
   17da0:	bne	17db0 <__assert_fail@plt+0x603c>
   17da4:	ldrb	r3, [r4, #3582]	; 0xdfe
   17da8:	cmp	r3, #0
   17dac:	bne	185ec <__assert_fail@plt+0x6878>
   17db0:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   17db4:	cmp	r3, #0
   17db8:	bne	1808c <__assert_fail@plt+0x6318>
   17dbc:	ldr	r3, [pc, #3264]	; 18a84 <__assert_fail@plt+0x6d10>
   17dc0:	str	r3, [fp, #-728]	; 0xfffffd28
   17dc4:	ldrb	r1, [r3, #-4088]	; 0xfffff008
   17dc8:	cmp	r1, #0
   17dcc:	beq	17e24 <__assert_fail@plt+0x60b0>
   17dd0:	ldrb	sl, [r8]
   17dd4:	cmp	sl, #47	; 0x2f
   17dd8:	beq	17de8 <__assert_fail@plt+0x6074>
   17ddc:	ldrb	r2, [r7]
   17de0:	cmp	r2, #0
   17de4:	bne	17fdc <__assert_fail@plt+0x6268>
   17de8:	mov	r9, r8
   17dec:	mov	r1, #2
   17df0:	mov	r0, r9
   17df4:	bl	19c90 <__assert_fail@plt+0x7f1c>
   17df8:	cmp	r0, #0
   17dfc:	str	r0, [r5, #8]
   17e00:	bne	180bc <__assert_fail@plt+0x6348>
   17e04:	mov	r2, #5
   17e08:	ldr	r1, [pc, #3192]	; 18a88 <__assert_fail@plt+0x6d14>
   17e0c:	bl	11984 <dcgettext@plt>
   17e10:	mov	r2, r9
   17e14:	mov	r1, r0
   17e18:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   17e1c:	bl	14eb0 <__assert_fail@plt+0x313c>
   17e20:	b	180bc <__assert_fail@plt+0x6348>
   17e24:	ldrb	r3, [r3, #-4087]	; 0xfffff009
   17e28:	cmp	r3, #0
   17e2c:	bne	17f24 <__assert_fail@plt+0x61b0>
   17e30:	cmp	r6, #3
   17e34:	beq	18914 <__assert_fail@plt+0x6ba0>
   17e38:	ldrb	r2, [r4, #3088]	; 0xc10
   17e3c:	cmp	r2, #0
   17e40:	bne	18818 <__assert_fail@plt+0x6aa4>
   17e44:	ldr	r3, [fp, #-728]	; 0xfffffd28
   17e48:	ldrb	r3, [r3, #-4086]	; 0xfffff00a
   17e4c:	cmp	r3, #0
   17e50:	beq	18844 <__assert_fail@plt+0x6ad0>
   17e54:	cmp	r6, #0
   17e58:	cmpne	r6, #6
   17e5c:	clz	r3, r6
   17e60:	lsr	r3, r3, #5
   17e64:	bne	17eb0 <__assert_fail@plt+0x613c>
   17e68:	ldr	ip, [fp, #-728]	; 0xfffffd28
   17e6c:	ldr	r0, [ip, #-4084]	; 0xfffff00c
   17e70:	cmp	r0, #4
   17e74:	beq	17f24 <__assert_fail@plt+0x61b0>
   17e78:	ldrb	r0, [r4, #3589]	; 0xe05
   17e7c:	cmp	r0, #0
   17e80:	bne	17f24 <__assert_fail@plt+0x61b0>
   17e84:	ldrb	r0, [ip, #-4080]	; 0xfffff010
   17e88:	cmp	r0, #0
   17e8c:	bne	17f24 <__assert_fail@plt+0x61b0>
   17e90:	cmp	r2, #0
   17e94:	bne	17f24 <__assert_fail@plt+0x61b0>
   17e98:	ldr	r2, [fp, #-728]	; 0xfffffd28
   17e9c:	ldrb	r2, [r2, #-4086]	; 0xfffff00a
   17ea0:	cmp	r2, #0
   17ea4:	beq	18844 <__assert_fail@plt+0x6ad0>
   17ea8:	cmp	r3, #0
   17eac:	bne	17f24 <__assert_fail@plt+0x61b0>
   17eb0:	cmp	r6, #5
   17eb4:	bne	18844 <__assert_fail@plt+0x6ad0>
   17eb8:	ldr	r3, [r4, #3444]	; 0xd74
   17ebc:	cmp	r3, #3
   17ec0:	beq	17f24 <__assert_fail@plt+0x61b0>
   17ec4:	ldrb	r3, [r4, #3580]	; 0xdfc
   17ec8:	str	r1, [fp, #-732]	; 0xfffffd24
   17ecc:	cmp	r3, #0
   17ed0:	beq	18844 <__assert_fail@plt+0x6ad0>
   17ed4:	mov	r0, #14
   17ed8:	bl	13de4 <__assert_fail@plt+0x2070>
   17edc:	ldr	r1, [fp, #-732]	; 0xfffffd24
   17ee0:	cmp	r0, #0
   17ee4:	bne	17f24 <__assert_fail@plt+0x61b0>
   17ee8:	mov	r0, #16
   17eec:	bl	13de4 <__assert_fail@plt+0x2070>
   17ef0:	ldr	r1, [fp, #-732]	; 0xfffffd24
   17ef4:	cmp	r0, #0
   17ef8:	bne	17f24 <__assert_fail@plt+0x61b0>
   17efc:	mov	r0, #17
   17f00:	bl	13de4 <__assert_fail@plt+0x2070>
   17f04:	ldr	r1, [fp, #-732]	; 0xfffffd24
   17f08:	cmp	r0, #0
   17f0c:	bne	17f24 <__assert_fail@plt+0x61b0>
   17f10:	mov	r0, #21
   17f14:	bl	13de4 <__assert_fail@plt+0x2070>
   17f18:	ldr	r1, [fp, #-732]	; 0xfffffd24
   17f1c:	cmp	r0, #0
   17f20:	beq	18844 <__assert_fail@plt+0x6ad0>
   17f24:	ldrb	sl, [r8]
   17f28:	cmp	sl, #47	; 0x2f
   17f2c:	bne	17fcc <__assert_fail@plt+0x6258>
   17f30:	ldr	r3, [fp, #-728]	; 0xfffffd28
   17f34:	ldr	r3, [r3, #-4084]	; 0xfffff00c
   17f38:	cmp	r3, #2
   17f3c:	bcc	17f54 <__assert_fail@plt+0x61e0>
   17f40:	cmp	r3, #3
   17f44:	bls	17f54 <__assert_fail@plt+0x61e0>
   17f48:	cmp	r3, #4
   17f4c:	moveq	r9, r8
   17f50:	beq	180dc <__assert_fail@plt+0x6368>
   17f54:	mov	r9, r8
   17f58:	add	sl, r5, #16
   17f5c:	bl	14620 <__assert_fail@plt+0x28ac>
   17f60:	mov	r3, #256	; 0x100
   17f64:	mov	r2, sl
   17f68:	mov	r1, r9
   17f6c:	mov	r7, #0
   17f70:	str	r0, [sp]
   17f74:	mvn	r0, #99	; 0x63
   17f78:	bl	14794 <__assert_fail@plt+0x2a20>
   17f7c:	cmp	r0, #0
   17f80:	beq	18108 <__assert_fail@plt+0x6394>
   17f84:	mov	r2, #5
   17f88:	ldr	r1, [pc, #2812]	; 18a8c <__assert_fail@plt+0x6d18>
   17f8c:	mov	r0, #0
   17f90:	bl	11984 <dcgettext@plt>
   17f94:	ldr	r6, [fp, #-724]	; 0xfffffd2c
   17f98:	mov	r2, r9
   17f9c:	mov	r1, r0
   17fa0:	mov	r0, r6
   17fa4:	bl	14eb0 <__assert_fail@plt+0x313c>
   17fa8:	ldr	r3, [pc, #2784]	; 18a90 <__assert_fail@plt+0x6d1c>
   17fac:	cmp	r6, #0
   17fb0:	str	r3, [r5, #128]	; 0x80
   17fb4:	beq	1864c <__assert_fail@plt+0x68d8>
   17fb8:	mov	r2, #0
   17fbc:	mov	r3, #0
   17fc0:	sub	r1, fp, #724	; 0x2d4
   17fc4:	strd	r2, [r1]
   17fc8:	b	182b0 <__assert_fail@plt+0x653c>
   17fcc:	ldrb	r2, [r7]
   17fd0:	cmp	r2, #0
   17fd4:	moveq	r9, r8
   17fd8:	beq	180bc <__assert_fail@plt+0x6348>
   17fdc:	mov	r0, r8
   17fe0:	str	r1, [fp, #-736]	; 0xfffffd20
   17fe4:	str	r2, [fp, #-732]	; 0xfffffd24
   17fe8:	bl	11b94 <strlen@plt>
   17fec:	mov	r9, r0
   17ff0:	mov	r0, r7
   17ff4:	bl	11b94 <strlen@plt>
   17ff8:	ldr	r2, [fp, #-732]	; 0xfffffd24
   17ffc:	ldr	r1, [fp, #-736]	; 0xfffffd20
   18000:	cmp	r2, #46	; 0x2e
   18004:	add	r0, r9, r0
   18008:	add	r0, r0, #16
   1800c:	bic	r0, r0, #7
   18010:	sub	sp, sp, r0
   18014:	add	r9, sp, #16
   18018:	ldrb	r0, [r7, #1]
   1801c:	beq	18678 <__assert_fail@plt+0x6904>
   18020:	add	ip, r7, #1
   18024:	mov	lr, r9
   18028:	b	18038 <__assert_fail@plt+0x62c4>
   1802c:	mov	r2, r0
   18030:	ldrb	r0, [ip, #1]!
   18034:	mov	lr, r3
   18038:	mov	r3, lr
   1803c:	cmp	r0, #0
   18040:	strb	r2, [r3], #1
   18044:	bne	1802c <__assert_fail@plt+0x62b8>
   18048:	cmp	r7, ip
   1804c:	bcs	18064 <__assert_fail@plt+0x62f0>
   18050:	ldrb	r2, [ip, #-1]
   18054:	cmp	r2, #47	; 0x2f
   18058:	movne	r2, #47	; 0x2f
   1805c:	strbne	r2, [r3]
   18060:	addne	r3, lr, #2
   18064:	cmp	sl, #0
   18068:	beq	18080 <__assert_fail@plt+0x630c>
   1806c:	mov	r2, r8
   18070:	strb	sl, [r3], #1
   18074:	ldrb	sl, [r2, #1]!
   18078:	cmp	sl, #0
   1807c:	bne	18070 <__assert_fail@plt+0x62fc>
   18080:	mov	r2, #0
   18084:	strb	r2, [r3]
   18088:	b	180b4 <__assert_fail@plt+0x6340>
   1808c:	ldrb	sl, [r8]
   18090:	cmp	sl, #47	; 0x2f
   18094:	beq	18830 <__assert_fail@plt+0x6abc>
   18098:	ldrb	r2, [r7]
   1809c:	ldr	r3, [pc, #2528]	; 18a84 <__assert_fail@plt+0x6d10>
   180a0:	cmp	r2, #0
   180a4:	str	r3, [fp, #-728]	; 0xfffffd28
   180a8:	ldrb	r1, [r3, #-4088]	; 0xfffff008
   180ac:	moveq	r9, r8
   180b0:	bne	17fdc <__assert_fail@plt+0x6268>
   180b4:	cmp	r1, #0
   180b8:	bne	17dec <__assert_fail@plt+0x6078>
   180bc:	ldr	r3, [fp, #-728]	; 0xfffffd28
   180c0:	ldr	r7, [r3, #-4084]	; 0xfffff00c
   180c4:	cmp	r7, #2
   180c8:	bcc	17f58 <__assert_fail@plt+0x61e4>
   180cc:	cmp	r7, #3
   180d0:	bls	1835c <__assert_fail@plt+0x65e8>
   180d4:	cmp	r7, #4
   180d8:	bne	17f58 <__assert_fail@plt+0x61e4>
   180dc:	bl	14620 <__assert_fail@plt+0x28ac>
   180e0:	add	sl, r5, #16
   180e4:	mov	r2, sl
   180e8:	mov	r3, #0
   180ec:	mov	r1, r9
   180f0:	mov	r7, #1
   180f4:	str	r0, [sp]
   180f8:	mvn	r0, #99	; 0x63
   180fc:	bl	14794 <__assert_fail@plt+0x2a20>
   18100:	cmp	r0, #0
   18104:	bne	17f84 <__assert_fail@plt+0x6210>
   18108:	mov	r3, #1
   1810c:	cmp	r6, #5
   18110:	strb	r3, [r5, #132]	; 0x84
   18114:	beq	182c0 <__assert_fail@plt+0x654c>
   18118:	ldr	r3, [r5, #32]
   1811c:	and	r3, r3, #61440	; 0xf000
   18120:	cmp	r3, #32768	; 0x8000
   18124:	beq	182c0 <__assert_fail@plt+0x654c>
   18128:	ldr	r3, [r4, #3092]	; 0xc14
   1812c:	cmp	r3, #0
   18130:	beq	18140 <__assert_fail@plt+0x63cc>
   18134:	ldrb	r3, [r4, #4016]	; 0xfb0
   18138:	cmp	r3, #0
   1813c:	beq	181a4 <__assert_fail@plt+0x6430>
   18140:	ldr	r6, [pc, #2380]	; 18a94 <__assert_fail@plt+0x6d20>
   18144:	ldrd	r0, [r5, #16]
   18148:	ldrd	r2, [r6]
   1814c:	cmp	r1, r3
   18150:	cmpeq	r0, r2
   18154:	beq	18964 <__assert_fail@plt+0x6bf0>
   18158:	cmp	r7, #0
   1815c:	add	r1, r5, #128	; 0x80
   18160:	mov	r0, r9
   18164:	beq	183b8 <__assert_fail@plt+0x6644>
   18168:	bl	21558 <_obstack_memory_used@@Base+0x20cc>
   1816c:	cmp	r0, #0
   18170:	blt	183c4 <__assert_fail@plt+0x6650>
   18174:	ldr	r1, [r5, #128]	; 0x80
   18178:	ldr	r0, [pc, #2328]	; 18a98 <__assert_fail@plt+0x6d24>
   1817c:	bl	118a0 <strcmp@plt>
   18180:	ldr	r3, [r4, #3092]	; 0xc14
   18184:	adds	r6, r0, #0
   18188:	movne	r6, #1
   1818c:	cmp	r3, #0
   18190:	beq	187c4 <__assert_fail@plt+0x6a50>
   18194:	cmp	r0, #0
   18198:	bne	18a70 <__assert_fail@plt+0x6cfc>
   1819c:	mov	r3, #0
   181a0:	str	r3, [r5, #136]	; 0x88
   181a4:	ldr	r3, [r5, #32]
   181a8:	and	r3, r3, #61440	; 0xf000
   181ac:	cmp	r3, #40960	; 0xa000
   181b0:	beq	186ec <__assert_fail@plt+0x6978>
   181b4:	cmp	r3, #16384	; 0x4000
   181b8:	movne	r3, #5
   181bc:	strne	r3, [r5, #120]	; 0x78
   181c0:	beq	186bc <__assert_fail@plt+0x6948>
   181c4:	ldr	r3, [r4, #3092]	; 0xc14
   181c8:	ldrd	r0, [r5, #80]	; 0x50
   181cc:	sub	r2, fp, #724	; 0x2d4
   181d0:	cmp	r3, #0
   181d4:	strd	r0, [r2]
   181d8:	beq	181e8 <__assert_fail@plt+0x6474>
   181dc:	ldrb	r3, [r4, #3089]	; 0xc11
   181e0:	cmp	r3, #0
   181e4:	beq	18260 <__assert_fail@plt+0x64ec>
   181e8:	ldr	r2, [pc, #2220]	; 18a9c <__assert_fail@plt+0x6d28>
   181ec:	mov	r0, #512	; 0x200
   181f0:	mov	r1, #0
   181f4:	ldrd	r2, [r2, #-8]
   181f8:	ldr	ip, [r4, #4004]	; 0xfa4
   181fc:	strd	r0, [sp]
   18200:	sub	r1, fp, #724	; 0x2d4
   18204:	strd	r2, [sp, #8]
   18208:	mov	r3, ip
   1820c:	sub	r2, fp, #692	; 0x2b4
   18210:	ldrd	r0, [r1]
   18214:	bl	1be68 <__assert_fail@plt+0xa0f4>
   18218:	mov	r1, #0
   1821c:	bl	1d504 <__assert_fail@plt+0xb790>
   18220:	ldr	r3, [r4, #3116]	; 0xc2c
   18224:	cmp	r0, r3
   18228:	ldr	r3, [r4, #3092]	; 0xc14
   1822c:	strgt	r0, [r4, #3116]	; 0xc2c
   18230:	cmp	r3, #0
   18234:	bne	187b4 <__assert_fail@plt+0x6a40>
   18238:	ldr	r9, [pc, #2144]	; 18aa0 <__assert_fail@plt+0x6d2c>
   1823c:	ldrb	r3, [r9, #204]	; 0xcc
   18240:	cmp	r3, #0
   18244:	bne	1879c <__assert_fail@plt+0x6a28>
   18248:	ldrb	r3, [r9, #205]	; 0xcd
   1824c:	cmp	r3, #0
   18250:	bne	18754 <__assert_fail@plt+0x69e0>
   18254:	ldrb	r3, [r4, #3096]	; 0xc18
   18258:	cmp	r3, #0
   1825c:	bne	1873c <__assert_fail@plt+0x69c8>
   18260:	ldrb	r3, [r4, #4016]	; 0xfb0
   18264:	cmp	r3, #0
   18268:	beq	18280 <__assert_fail@plt+0x650c>
   1826c:	ldr	r0, [r5, #128]	; 0x80
   18270:	bl	11b94 <strlen@plt>
   18274:	ldr	r3, [r4, #3136]	; 0xc40
   18278:	cmp	r0, r3
   1827c:	strgt	r0, [r4, #3136]	; 0xc40
   18280:	ldr	r1, [r4, #3092]	; 0xc14
   18284:	cmp	r1, #0
   18288:	beq	18534 <__assert_fail@plt+0x67c0>
   1828c:	ldrb	r3, [r4, #3088]	; 0xc10
   18290:	cmp	r3, #0
   18294:	bne	18514 <__assert_fail@plt+0x67a0>
   18298:	mov	r0, r8
   1829c:	bl	22510 <_obstack_memory_used@@Base+0x3084>
   182a0:	ldr	r3, [r4, #3104]	; 0xc20
   182a4:	add	r3, r3, #1
   182a8:	str	r3, [r4, #3104]	; 0xc20
   182ac:	str	r0, [r5]
   182b0:	sub	r3, fp, #724	; 0x2d4
   182b4:	ldrd	r0, [r3]
   182b8:	sub	sp, fp, #32
   182bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182c0:	ldrb	r3, [r4, #3580]	; 0xdfc
   182c4:	cmp	r3, #0
   182c8:	beq	18128 <__assert_fail@plt+0x63b4>
   182cc:	mov	r0, #21
   182d0:	bl	13de4 <__assert_fail@plt+0x2070>
   182d4:	subs	ip, r0, #0
   182d8:	beq	18128 <__assert_fail@plt+0x63b4>
   182dc:	ldr	r6, [pc, #1968]	; 18a94 <__assert_fail@plt+0x6d20>
   182e0:	ldrd	r0, [r5, #16]
   182e4:	ldrd	r2, [r6, #-8]
   182e8:	cmp	r1, r3
   182ec:	cmpeq	r0, r2
   182f0:	beq	189d4 <__assert_fail@plt+0x6c60>
   182f4:	mov	r0, r9
   182f8:	str	ip, [fp, #-732]	; 0xfffffd24
   182fc:	bl	11c84 <cap_get_file@plt>
   18300:	ldr	ip, [fp, #-732]	; 0xfffffd24
   18304:	subs	r3, r0, #0
   18308:	str	r3, [fp, #-736]	; 0xfffffd20
   1830c:	beq	189a4 <__assert_fail@plt+0x6c30>
   18310:	mov	r1, #0
   18314:	str	ip, [fp, #-740]	; 0xfffffd1c
   18318:	bl	11870 <cap_to_text@plt>
   1831c:	str	r0, [fp, #-732]	; 0xfffffd24
   18320:	ldr	r0, [fp, #-736]	; 0xfffffd20
   18324:	bl	11ccc <cap_free@plt>
   18328:	ldr	r3, [fp, #-732]	; 0xfffffd24
   1832c:	cmp	r3, #0
   18330:	beq	189a4 <__assert_fail@plt+0x6c30>
   18334:	ldrb	r1, [r3]
   18338:	mov	r0, r3
   1833c:	str	r1, [fp, #-732]	; 0xfffffd24
   18340:	bl	11ccc <cap_free@plt>
   18344:	ldr	r1, [fp, #-732]	; 0xfffffd24
   18348:	ldr	ip, [fp, #-740]	; 0xfffffd1c
   1834c:	cmp	r1, #0
   18350:	beq	189a4 <__assert_fail@plt+0x6c30>
   18354:	strb	ip, [r5, #140]	; 0x8c
   18358:	b	18128 <__assert_fail@plt+0x63b4>
   1835c:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   18360:	cmp	r3, #0
   18364:	beq	17f58 <__assert_fail@plt+0x61e4>
   18368:	bl	14620 <__assert_fail@plt+0x28ac>
   1836c:	add	sl, r5, #16
   18370:	mov	r2, sl
   18374:	mov	r3, #0
   18378:	mov	r1, r9
   1837c:	str	r0, [sp]
   18380:	mvn	r0, #99	; 0x63
   18384:	bl	14794 <__assert_fail@plt+0x2a20>
   18388:	cmp	r7, #2
   1838c:	beq	183a8 <__assert_fail@plt+0x6634>
   18390:	cmp	r0, #0
   18394:	blt	1889c <__assert_fail@plt+0x6b28>
   18398:	ldr	r3, [r5, #32]
   1839c:	and	r3, r3, #61440	; 0xf000
   183a0:	cmp	r3, #16384	; 0x4000
   183a4:	bne	17f5c <__assert_fail@plt+0x61e8>
   183a8:	cmp	r0, #0
   183ac:	bne	188ac <__assert_fail@plt+0x6b38>
   183b0:	ldr	r7, [fp, #-724]	; 0xfffffd2c
   183b4:	b	18108 <__assert_fail@plt+0x6394>
   183b8:	bl	21570 <_obstack_memory_used@@Base+0x20e4>
   183bc:	cmp	r0, #0
   183c0:	bge	18174 <__assert_fail@plt+0x6400>
   183c4:	bl	11bb8 <__errno_location@plt>
   183c8:	ldr	r7, [r0]
   183cc:	str	r0, [fp, #-732]	; 0xfffffd24
   183d0:	sub	r3, r7, #22
   183d4:	bics	r3, r3, #16
   183d8:	sub	r1, r7, #95	; 0x5f
   183dc:	clz	r1, r1
   183e0:	lsr	r1, r1, #5
   183e4:	movne	r3, r1
   183e8:	orreq	r3, r1, #1
   183ec:	cmp	r3, #0
   183f0:	bne	18728 <__assert_fail@plt+0x69b4>
   183f4:	sub	r1, r7, #61	; 0x3d
   183f8:	clz	r1, r1
   183fc:	lsr	r1, r1, #5
   18400:	ldr	r3, [pc, #1672]	; 18a90 <__assert_fail@plt+0x6d1c>
   18404:	cmp	r1, #0
   18408:	str	r3, [r5, #128]	; 0x80
   1840c:	streq	r1, [r5, #136]	; 0x88
   18410:	bne	1897c <__assert_fail@plt+0x6c08>
   18414:	mov	r2, r9
   18418:	mov	r1, #3
   1841c:	mov	r0, #0
   18420:	bl	211fc <_obstack_memory_used@@Base+0x1d70>
   18424:	mov	r1, r7
   18428:	ldr	r2, [pc, #1652]	; 18aa4 <__assert_fail@plt+0x6d30>
   1842c:	mov	r3, r0
   18430:	mov	r0, #0
   18434:	bl	11a8c <error@plt>
   18438:	ldr	r3, [r5, #32]
   1843c:	and	r3, r3, #61440	; 0xf000
   18440:	cmp	r3, #40960	; 0xa000
   18444:	bne	181b4 <__assert_fail@plt+0x6440>
   18448:	ldr	r3, [r4, #3092]	; 0xc14
   1844c:	cmp	r3, #0
   18450:	bne	186ec <__assert_fail@plt+0x6978>
   18454:	ldr	r1, [r5, #64]	; 0x40
   18458:	mov	r0, r9
   1845c:	bl	19680 <__assert_fail@plt+0x790c>
   18460:	cmp	r0, #0
   18464:	mov	r7, r0
   18468:	str	r0, [r5, #4]
   1846c:	beq	18a18 <__assert_fail@plt+0x6ca4>
   18470:	ldrb	r3, [r7]
   18474:	cmp	r3, #47	; 0x2f
   18478:	beq	18a48 <__assert_fail@plt+0x6cd4>
   1847c:	mov	r0, r9
   18480:	bl	1a460 <__assert_fail@plt+0x86ec>
   18484:	subs	sl, r0, #0
   18488:	mov	r0, r7
   1848c:	beq	188e8 <__assert_fail@plt+0x6b74>
   18490:	bl	11b94 <strlen@plt>
   18494:	add	r3, sl, #2
   18498:	add	r0, r3, r0
   1849c:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   184a0:	add	r3, r9, sl
   184a4:	mov	r1, r9
   184a8:	ldrb	r3, [r3, #-1]
   184ac:	cmp	r3, #47	; 0x2f
   184b0:	addne	sl, sl, #1
   184b4:	mov	r2, sl
   184b8:	mov	r6, r0
   184bc:	bl	11c00 <stpncpy@plt>
   184c0:	mov	r1, r7
   184c4:	bl	11a5c <strcpy@plt>
   184c8:	ldr	r3, [r5, #144]	; 0x90
   184cc:	cmp	r3, #0
   184d0:	beq	1898c <__assert_fail@plt+0x6c18>
   184d4:	ldr	r3, [r4, #3444]	; 0xd74
   184d8:	cmp	r3, #1
   184dc:	bhi	18688 <__assert_fail@plt+0x6914>
   184e0:	ldr	r3, [fp, #-728]	; 0xfffffd28
   184e4:	ldrb	r3, [r3, #-4080]	; 0xfffff010
   184e8:	cmp	r3, #0
   184ec:	bne	18688 <__assert_fail@plt+0x6914>
   184f0:	mov	r0, r6
   184f4:	bl	1ad20 <__assert_fail@plt+0x8fac>
   184f8:	ldr	r3, [r5, #32]
   184fc:	and	r3, r3, #61440	; 0xf000
   18500:	cmp	r3, #40960	; 0xa000
   18504:	bne	181b4 <__assert_fail@plt+0x6440>
   18508:	mov	r3, #6
   1850c:	str	r3, [r5, #120]	; 0x78
   18510:	b	181c4 <__assert_fail@plt+0x6450>
   18514:	sub	r2, fp, #692	; 0x2b4
   18518:	ldrd	r0, [r5, #112]	; 0x70
   1851c:	bl	1ce80 <__assert_fail@plt+0xb10c>
   18520:	bl	11b94 <strlen@plt>
   18524:	ldr	r3, [r4, #3112]	; 0xc28
   18528:	cmp	r0, r3
   1852c:	strgt	r0, [r4, #3112]	; 0xc28
   18530:	b	18298 <__assert_fail@plt+0x6524>
   18534:	sub	r2, fp, #716	; 0x2cc
   18538:	ldr	r0, [r5, #36]	; 0x24
   1853c:	bl	1ce80 <__assert_fail@plt+0xb10c>
   18540:	bl	11b94 <strlen@plt>
   18544:	ldr	r3, [r4, #3120]	; 0xc30
   18548:	cmp	r0, r3
   1854c:	ldr	r3, [r5, #32]
   18550:	strgt	r0, [r4, #3120]	; 0xc30
   18554:	and	r3, r3, #45056	; 0xb000
   18558:	cmp	r3, #8192	; 0x2000
   1855c:	bne	18608 <__assert_fail@plt+0x6894>
   18560:	ldr	r0, [r5, #48]	; 0x30
   18564:	ldr	r3, [r5, #52]	; 0x34
   18568:	sub	r2, fp, #692	; 0x2b4
   1856c:	bic	r3, r3, #4080	; 0xff0
   18570:	lsl	r0, r0, #12
   18574:	bic	r3, r3, #15
   18578:	orr	r0, r3, r0, lsr #20
   1857c:	mov	r1, #0
   18580:	bl	1ce80 <__assert_fail@plt+0xb10c>
   18584:	bl	11b94 <strlen@plt>
   18588:	ldr	r3, [r4, #3140]	; 0xc44
   1858c:	ldr	r1, [r5, #52]	; 0x34
   18590:	sub	r2, fp, #692	; 0x2b4
   18594:	cmp	r0, r3
   18598:	strgt	r0, [r4, #3140]	; 0xc44
   1859c:	ldr	r0, [r5, #48]	; 0x30
   185a0:	lsr	r3, r0, #12
   185a4:	orr	r3, r3, r1, lsl #20
   185a8:	bic	r3, r3, #255	; 0xff
   185ac:	uxtb	r0, r0
   185b0:	orr	r0, r3, r0
   185b4:	mov	r1, #0
   185b8:	bl	1ce80 <__assert_fail@plt+0xb10c>
   185bc:	bl	11b94 <strlen@plt>
   185c0:	ldr	r2, [r4, #3144]	; 0xc48
   185c4:	ldr	r3, [r4, #3140]	; 0xc44
   185c8:	ldr	r1, [r4, #3148]	; 0xc4c
   185cc:	add	r3, r3, #2
   185d0:	cmp	r0, r2
   185d4:	movgt	r2, r0
   185d8:	add	r3, r3, r2
   185dc:	strgt	r0, [r4, #3144]	; 0xc48
   185e0:	cmp	r3, r1
   185e4:	strgt	r3, [r4, #3148]	; 0xc4c
   185e8:	b	1828c <__assert_fail@plt+0x6518>
   185ec:	mov	r0, r8
   185f0:	bl	14990 <__assert_fail@plt+0x2c1c>
   185f4:	cmp	r0, #0
   185f8:	movne	r3, #1
   185fc:	str	r0, [r5, #144]	; 0x90
   18600:	strbne	r3, [r4, #3108]	; 0xc24
   18604:	b	17db0 <__assert_fail@plt+0x603c>
   18608:	ldr	r3, [pc, #1168]	; 18aa0 <__assert_fail@plt+0x6d2c>
   1860c:	ldr	ip, [r4, #4032]	; 0xfc0
   18610:	mov	r6, #1
   18614:	ldrd	r2, [r3, #216]	; 0xd8
   18618:	mov	r7, #0
   1861c:	ldrd	r0, [r5, #64]	; 0x40
   18620:	strd	r2, [sp, #8]
   18624:	strd	r6, [sp]
   18628:	mov	r3, ip
   1862c:	sub	r2, fp, #692	; 0x2b4
   18630:	bl	1be68 <__assert_fail@plt+0xa0f4>
   18634:	mov	r1, #0
   18638:	bl	1d504 <__assert_fail@plt+0xb790>
   1863c:	ldr	r3, [r4, #3148]	; 0xc4c
   18640:	cmp	r0, r3
   18644:	strgt	r0, [r4, #3148]	; 0xc4c
   18648:	b	1828c <__assert_fail@plt+0x6518>
   1864c:	mov	r0, r8
   18650:	bl	22510 <_obstack_memory_used@@Base+0x3084>
   18654:	ldr	r3, [r4, #3104]	; 0xc20
   18658:	mov	r6, #0
   1865c:	mov	r7, #0
   18660:	sub	r2, fp, #724	; 0x2d4
   18664:	add	r3, r3, #1
   18668:	strd	r6, [r2]
   1866c:	str	r3, [r4, #3104]	; 0xc20
   18670:	str	r0, [r5]
   18674:	b	182b0 <__assert_fail@plt+0x653c>
   18678:	cmp	r0, #0
   1867c:	moveq	r3, r9
   18680:	beq	18064 <__assert_fail@plt+0x62f0>
   18684:	b	18020 <__assert_fail@plt+0x62ac>
   18688:	mov	r3, #2
   1868c:	sub	r2, fp, #692	; 0x2b4
   18690:	str	r3, [sp]
   18694:	mov	r1, r6
   18698:	mov	r3, #0
   1869c:	mvn	r0, #99	; 0x63
   186a0:	bl	14794 <__assert_fail@plt+0x2a20>
   186a4:	cmp	r0, #0
   186a8:	moveq	r3, #1
   186ac:	ldreq	r2, [fp, #-676]	; 0xfffffd5c
   186b0:	strbeq	r3, [r5, #133]	; 0x85
   186b4:	streq	r2, [r5, #124]	; 0x7c
   186b8:	b	184f0 <__assert_fail@plt+0x677c>
   186bc:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   186c0:	cmp	r3, #0
   186c4:	beq	186e0 <__assert_fail@plt+0x696c>
   186c8:	ldr	r3, [fp, #-728]	; 0xfffffd28
   186cc:	ldrb	r3, [r3, #-4048]	; 0xfffff030
   186d0:	cmp	r3, #0
   186d4:	moveq	r3, #9
   186d8:	streq	r3, [r5, #120]	; 0x78
   186dc:	beq	181c4 <__assert_fail@plt+0x6450>
   186e0:	mov	r3, #3
   186e4:	str	r3, [r5, #120]	; 0x78
   186e8:	b	181c4 <__assert_fail@plt+0x6450>
   186ec:	ldr	r3, [fp, #-728]	; 0xfffffd28
   186f0:	ldrb	r3, [r3, #-4080]	; 0xfffff010
   186f4:	cmp	r3, #0
   186f8:	bne	18454 <__assert_fail@plt+0x66e0>
   186fc:	b	18508 <__assert_fail@plt+0x6794>
   18700:	mov	r2, #304	; 0x130
   18704:	ldr	r0, [r4, #3604]	; 0xe14
   18708:	bl	22070 <_obstack_memory_used@@Base+0x2be4>
   1870c:	ldr	r2, [r4, #4092]	; 0xffc
   18710:	ldr	r1, [r4, #3104]	; 0xc20
   18714:	lsl	r2, r2, #1
   18718:	str	r2, [r4, #4092]	; 0xffc
   1871c:	mov	r3, r0
   18720:	str	r0, [r4, #3604]	; 0xe14
   18724:	b	17d74 <__assert_fail@plt+0x6000>
   18728:	ldrd	r2, [r5, #16]
   1872c:	cmp	r7, #61	; 0x3d
   18730:	orreq	r1, r1, #1
   18734:	strd	r2, [r6]
   18738:	b	18400 <__assert_fail@plt+0x668c>
   1873c:	ldr	r0, [r5, #40]	; 0x28
   18740:	bl	16d80 <__assert_fail@plt+0x500c>
   18744:	ldr	r3, [r4, #3132]	; 0xc3c
   18748:	cmp	r0, r3
   1874c:	strgt	r0, [r4, #3132]	; 0xc3c
   18750:	b	18260 <__assert_fail@plt+0x64ec>
   18754:	ldrb	r9, [r4, #3448]	; 0xd78
   18758:	ldr	sl, [r5, #44]	; 0x2c
   1875c:	cmp	r9, #0
   18760:	movne	r3, #0
   18764:	beq	188f4 <__assert_fail@plt+0x6b80>
   18768:	ldr	r2, [pc, #824]	; 18aa8 <__assert_fail@plt+0x6d34>
   1876c:	mov	r1, #0
   18770:	str	r3, [sp, #12]
   18774:	str	r2, [sp]
   18778:	str	sl, [sp, #8]
   1877c:	mov	r0, r1
   18780:	mvn	r3, #0
   18784:	mov	r2, #1
   18788:	bl	11d5c <__snprintf_chk@plt>
   1878c:	ldr	r3, [r4, #3128]	; 0xc38
   18790:	cmp	r3, r0
   18794:	strlt	r0, [r4, #3128]	; 0xc38
   18798:	b	18254 <__assert_fail@plt+0x64e0>
   1879c:	ldr	r0, [r5, #40]	; 0x28
   187a0:	bl	16d80 <__assert_fail@plt+0x500c>
   187a4:	ldr	r3, [r4, #3124]	; 0xc34
   187a8:	cmp	r0, r3
   187ac:	strgt	r0, [r4, #3124]	; 0xc34
   187b0:	b	18248 <__assert_fail@plt+0x64d4>
   187b4:	ldrb	r3, [r4, #4016]	; 0xfb0
   187b8:	cmp	r3, #0
   187bc:	beq	1828c <__assert_fail@plt+0x6518>
   187c0:	b	1826c <__assert_fail@plt+0x64f8>
   187c4:	bl	11bb8 <__errno_location@plt>
   187c8:	str	r0, [fp, #-732]	; 0xfffffd24
   187cc:	ldr	r7, [pc, #728]	; 18aac <__assert_fail@plt+0x6d38>
   187d0:	ldrd	r0, [r5, #16]
   187d4:	ldrd	r2, [r7, #-8]
   187d8:	cmp	r1, r3
   187dc:	cmpeq	r0, r2
   187e0:	beq	18858 <__assert_fail@plt+0x6ae4>
   187e4:	ldr	r2, [fp, #-732]	; 0xfffffd24
   187e8:	mov	r3, #0
   187ec:	mov	r1, sl
   187f0:	str	r3, [r2]
   187f4:	mov	r0, r9
   187f8:	bl	1a530 <__assert_fail@plt+0x87bc>
   187fc:	cmp	r0, #0
   18800:	ble	189e8 <__assert_fail@plt+0x6c74>
   18804:	mov	r2, #2
   18808:	mov	r3, #1
   1880c:	str	r2, [r5, #136]	; 0x88
   18810:	strb	r3, [r4, #3109]	; 0xc25
   18814:	b	18438 <__assert_fail@plt+0x66c4>
   18818:	cmp	r6, #0
   1881c:	cmpne	r6, #6
   18820:	clz	r3, r6
   18824:	lsr	r3, r3, #5
   18828:	bne	17f24 <__assert_fail@plt+0x61b0>
   1882c:	b	17e68 <__assert_fail@plt+0x60f4>
   18830:	ldr	r3, [pc, #588]	; 18a84 <__assert_fail@plt+0x6d10>
   18834:	mov	r9, r8
   18838:	str	r3, [fp, #-728]	; 0xfffffd28
   1883c:	ldrb	r1, [r3, #-4088]	; 0xfffff008
   18840:	b	180b4 <__assert_fail@plt+0x6340>
   18844:	mov	r2, #0
   18848:	mov	r3, #0
   1884c:	sub	r1, fp, #724	; 0x2d4
   18850:	strd	r2, [r1]
   18854:	b	18298 <__assert_fail@plt+0x6524>
   18858:	ldr	r2, [fp, #-732]	; 0xfffffd24
   1885c:	cmp	r6, #0
   18860:	mov	r3, #95	; 0x5f
   18864:	str	r3, [r2]
   18868:	movne	r0, #0
   1886c:	beq	18a68 <__assert_fail@plt+0x6cf4>
   18870:	mov	r6, #1
   18874:	mov	r2, r6
   18878:	ldrb	r3, [r4, #3109]	; 0xc25
   1887c:	cmp	r0, #0
   18880:	str	r2, [r5, #136]	; 0x88
   18884:	orr	r6, r6, r3
   18888:	strb	r6, [r4, #3109]	; 0xc25
   1888c:	beq	18438 <__assert_fail@plt+0x66c4>
   18890:	bl	11bb8 <__errno_location@plt>
   18894:	ldr	r7, [r0]
   18898:	b	18414 <__assert_fail@plt+0x66a0>
   1889c:	bl	11bb8 <__errno_location@plt>
   188a0:	ldr	r3, [r0]
   188a4:	cmp	r3, #2
   188a8:	beq	17f5c <__assert_fail@plt+0x61e8>
   188ac:	mov	r2, #5
   188b0:	ldr	r1, [pc, #468]	; 18a8c <__assert_fail@plt+0x6d18>
   188b4:	mov	r0, #0
   188b8:	bl	11984 <dcgettext@plt>
   188bc:	mov	r2, r9
   188c0:	mov	r1, r0
   188c4:	mov	r0, #1
   188c8:	bl	14eb0 <__assert_fail@plt+0x313c>
   188cc:	ldr	r3, [pc, #444]	; 18a90 <__assert_fail@plt+0x6d1c>
   188d0:	mov	r0, #0
   188d4:	mov	r1, #0
   188d8:	sub	r2, fp, #724	; 0x2d4
   188dc:	str	r3, [r5, #128]	; 0x80
   188e0:	strd	r0, [r2]
   188e4:	b	182b0 <__assert_fail@plt+0x653c>
   188e8:	bl	22510 <_obstack_memory_used@@Base+0x3084>
   188ec:	mov	r6, r0
   188f0:	b	184c8 <__assert_fail@plt+0x6754>
   188f4:	mov	r0, sl
   188f8:	bl	1cc0c <__assert_fail@plt+0xae98>
   188fc:	subs	r3, r0, #0
   18900:	beq	18768 <__assert_fail@plt+0x69f4>
   18904:	mov	r1, r9
   18908:	bl	1d504 <__assert_fail@plt+0xb790>
   1890c:	bic	r0, r0, r0, asr #31
   18910:	b	1878c <__assert_fail@plt+0x6a18>
   18914:	ldrb	r3, [r4, #3580]	; 0xdfc
   18918:	cmp	r3, #0
   1891c:	beq	17e38 <__assert_fail@plt+0x60c4>
   18920:	mov	r0, #19
   18924:	str	r1, [fp, #-732]	; 0xfffffd24
   18928:	bl	13de4 <__assert_fail@plt+0x2070>
   1892c:	ldr	r1, [fp, #-732]	; 0xfffffd24
   18930:	cmp	r0, #0
   18934:	bne	17f24 <__assert_fail@plt+0x61b0>
   18938:	mov	r0, #18
   1893c:	bl	13de4 <__assert_fail@plt+0x2070>
   18940:	ldr	r1, [fp, #-732]	; 0xfffffd24
   18944:	cmp	r0, #0
   18948:	bne	17f24 <__assert_fail@plt+0x61b0>
   1894c:	mov	r0, #20
   18950:	bl	13de4 <__assert_fail@plt+0x2070>
   18954:	ldr	r1, [fp, #-732]	; 0xfffffd24
   18958:	cmp	r0, #0
   1895c:	bne	17f24 <__assert_fail@plt+0x61b0>
   18960:	b	17e38 <__assert_fail@plt+0x60c4>
   18964:	bl	11bb8 <__errno_location@plt>
   18968:	ldr	r3, [pc, #288]	; 18a90 <__assert_fail@plt+0x6d1c>
   1896c:	mov	r2, #95	; 0x5f
   18970:	str	r2, [r0]
   18974:	str	r0, [fp, #-732]	; 0xfffffd24
   18978:	str	r3, [r5, #128]	; 0x80
   1897c:	ldr	r6, [r4, #3092]	; 0xc14
   18980:	cmp	r6, #0
   18984:	bne	1819c <__assert_fail@plt+0x6428>
   18988:	b	187cc <__assert_fail@plt+0x6a58>
   1898c:	ldr	r0, [r5, #4]
   18990:	bl	14990 <__assert_fail@plt+0x2c1c>
   18994:	cmp	r0, #0
   18998:	mvnne	r3, #0
   1899c:	strne	r3, [r5, #144]	; 0x90
   189a0:	b	184d4 <__assert_fail@plt+0x6760>
   189a4:	bl	11bb8 <__errno_location@plt>
   189a8:	ldr	r2, [r0]
   189ac:	sub	r3, r2, #22
   189b0:	bic	r3, r3, #16
   189b4:	cmp	r3, #0
   189b8:	cmpne	r2, #95	; 0x5f
   189bc:	moveq	ip, #1
   189c0:	movne	ip, #0
   189c4:	ldrdeq	r0, [r5, #16]
   189c8:	moveq	ip, #0
   189cc:	strdeq	r0, [r6, #-8]
   189d0:	b	18354 <__assert_fail@plt+0x65e0>
   189d4:	bl	11bb8 <__errno_location@plt>
   189d8:	mov	r3, #95	; 0x5f
   189dc:	mov	ip, #0
   189e0:	str	r3, [r0]
   189e4:	b	18354 <__assert_fail@plt+0x65e0>
   189e8:	ldr	r3, [fp, #-732]	; 0xfffffd24
   189ec:	ldr	r2, [r3]
   189f0:	sub	r3, r2, #22
   189f4:	bic	r3, r3, #16
   189f8:	cmp	r3, #0
   189fc:	cmpne	r2, #95	; 0x5f
   18a00:	beq	18a58 <__assert_fail@plt+0x6ce4>
   18a04:	lsr	r0, r0, #31
   18a08:	cmp	r6, #0
   18a0c:	bne	18870 <__assert_fail@plt+0x6afc>
   18a10:	mov	r2, r6
   18a14:	b	18878 <__assert_fail@plt+0x6b04>
   18a18:	mov	r2, #5
   18a1c:	ldr	r1, [pc, #140]	; 18ab0 <__assert_fail@plt+0x6d3c>
   18a20:	bl	11984 <dcgettext@plt>
   18a24:	mov	r2, r9
   18a28:	mov	r1, r0
   18a2c:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   18a30:	bl	14eb0 <__assert_fail@plt+0x313c>
   18a34:	ldr	r7, [r5, #4]
   18a38:	cmp	r7, #0
   18a3c:	moveq	r6, r7
   18a40:	bne	18470 <__assert_fail@plt+0x66fc>
   18a44:	b	184f0 <__assert_fail@plt+0x677c>
   18a48:	mov	r0, r7
   18a4c:	bl	22510 <_obstack_memory_used@@Base+0x3084>
   18a50:	mov	r6, r0
   18a54:	b	184c8 <__assert_fail@plt+0x6754>
   18a58:	ldrd	r2, [r5, #16]
   18a5c:	lsr	r0, r0, #31
   18a60:	strd	r2, [r7, #-8]
   18a64:	b	18a08 <__assert_fail@plt+0x6c94>
   18a68:	str	r6, [r5, #136]	; 0x88
   18a6c:	b	18438 <__assert_fail@plt+0x66c4>
   18a70:	mov	r3, #1
   18a74:	str	r3, [r5, #136]	; 0x88
   18a78:	strb	r3, [r4, #3109]	; 0xc25
   18a7c:	b	18438 <__assert_fail@plt+0x66c4>
   18a80:	andeq	r9, r3, r0, lsr r3
   18a84:	andeq	fp, r3, r8, lsr #6
   18a88:	andeq	r5, r2, r0, ror #10
   18a8c:	andeq	r5, r2, r8, ror r5
   18a90:	andeq	r9, r3, r0, lsr #5
   18a94:	andeq	sl, r3, r8, asr #6
   18a98:	andeq	r5, r2, ip, lsr #11
   18a9c:	andeq	sl, r3, r0, ror #5
   18aa0:	ldrdeq	r9, [r3], -r0
   18aa4:	andeq	r7, r2, ip, lsl #13
   18aa8:	andeq	r5, r2, r0, lsr r5
   18aac:	andeq	sl, r3, r8, asr r3
   18ab0:	andeq	r5, r2, ip, lsl #11
   18ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ab8:	sub	sp, sp, #708	; 0x2c4
   18abc:	mov	r5, r0
   18ac0:	mov	fp, r1
   18ac4:	str	r2, [sp, #36]	; 0x24
   18ac8:	str	r0, [sp, #32]
   18acc:	bl	11bb8 <__errno_location@plt>
   18ad0:	mov	r8, #0
   18ad4:	str	r8, [r0]
   18ad8:	mov	r4, r0
   18adc:	mov	r0, r5
   18ae0:	bl	11aa4 <opendir@plt>
   18ae4:	subs	r3, r0, #0
   18ae8:	str	r3, [sp, #20]
   18aec:	beq	19024 <__assert_fail@plt+0x72b0>
   18af0:	ldr	r6, [pc, #1360]	; 19048 <__assert_fail@plt+0x72d4>
   18af4:	ldr	r3, [r6, #3160]	; 0xc58
   18af8:	cmp	r3, #0
   18afc:	ldreq	r9, [pc, #1352]	; 1904c <__assert_fail@plt+0x72d8>
   18b00:	beq	18c58 <__assert_fail@plt+0x6ee4>
   18b04:	bl	11cd8 <dirfd@plt>
   18b08:	add	r7, sp, #48	; 0x30
   18b0c:	cmp	r0, #0
   18b10:	blt	18f5c <__assert_fail@plt+0x71e8>
   18b14:	mov	r3, #256	; 0x100
   18b18:	str	r3, [sp]
   18b1c:	mov	r2, r7
   18b20:	mov	r3, #4096	; 0x1000
   18b24:	ldr	r1, [pc, #1316]	; 19050 <__assert_fail@plt+0x72dc>
   18b28:	bl	14794 <__assert_fail@plt+0x2a20>
   18b2c:	lsr	sl, r0, #31
   18b30:	cmp	sl, #0
   18b34:	bne	18bd8 <__assert_fail@plt+0x6e64>
   18b38:	ldrd	r2, [r7, #96]	; 0x60
   18b3c:	mov	r0, #16
   18b40:	ldrd	r8, [r7]
   18b44:	strd	r2, [sp, #24]
   18b48:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   18b4c:	strd	r8, [r0, #8]
   18b50:	ldrd	r8, [sp, #24]
   18b54:	mov	r3, r0
   18b58:	mov	r1, r0
   18b5c:	strd	r8, [r3]
   18b60:	ldr	r0, [r6, #3160]	; 0xc58
   18b64:	str	r3, [sp, #24]
   18b68:	bl	1bc84 <__assert_fail@plt+0x9f10>
   18b6c:	ldr	r3, [sp, #24]
   18b70:	cmp	r0, #0
   18b74:	beq	19044 <__assert_fail@plt+0x72d0>
   18b78:	cmp	r3, r0
   18b7c:	beq	18c08 <__assert_fail@plt+0x6e94>
   18b80:	mov	r0, r3
   18b84:	bl	1ad20 <__assert_fail@plt+0x8fac>
   18b88:	mov	r2, #5
   18b8c:	ldr	r1, [pc, #1216]	; 19054 <__assert_fail@plt+0x72e0>
   18b90:	mov	r0, sl
   18b94:	bl	11984 <dcgettext@plt>
   18b98:	ldr	r2, [sp, #32]
   18b9c:	mov	r1, #3
   18ba0:	mov	r4, r0
   18ba4:	mov	r0, sl
   18ba8:	bl	211fc <_obstack_memory_used@@Base+0x1d70>
   18bac:	mov	r2, r4
   18bb0:	mov	r1, sl
   18bb4:	mov	r3, r0
   18bb8:	mov	r0, sl
   18bbc:	bl	11a8c <error@plt>
   18bc0:	ldr	r0, [sp, #20]
   18bc4:	bl	11d38 <closedir@plt>
   18bc8:	mov	r3, #2
   18bcc:	str	r3, [r6, #3440]	; 0xd70
   18bd0:	add	sp, sp, #708	; 0x2c4
   18bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bd8:	mov	r2, #5
   18bdc:	ldr	r1, [pc, #1140]	; 19058 <__assert_fail@plt+0x72e4>
   18be0:	mov	r0, #0
   18be4:	bl	11984 <dcgettext@plt>
   18be8:	ldr	r2, [sp, #32]
   18bec:	mov	r1, r0
   18bf0:	ldr	r0, [sp, #36]	; 0x24
   18bf4:	bl	14eb0 <__assert_fail@plt+0x313c>
   18bf8:	ldr	r0, [sp, #20]
   18bfc:	bl	11d38 <closedir@plt>
   18c00:	add	sp, sp, #708	; 0x2c4
   18c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c08:	ldr	r9, [pc, #1084]	; 1904c <__assert_fail@plt+0x72d8>
   18c0c:	ldrd	r2, [r7]
   18c10:	ldr	r1, [r9, #-4032]	; 0xfffff040
   18c14:	ldr	r0, [r9, #-4028]	; 0xfffff044
   18c18:	strd	r2, [sp, #24]
   18c1c:	ldrd	r2, [r7, #96]	; 0x60
   18c20:	sub	r0, r0, r1
   18c24:	cmp	r0, #15
   18c28:	strd	r2, [sp, #40]	; 0x28
   18c2c:	bhi	18c40 <__assert_fail@plt+0x6ecc>
   18c30:	mov	r1, #16
   18c34:	ldr	r0, [pc, #1056]	; 1905c <__assert_fail@plt+0x72e8>
   18c38:	bl	1f2cc <_obstack_newchunk@@Base>
   18c3c:	ldr	r1, [r9, #-4032]	; 0xfffff040
   18c40:	ldrd	r2, [sp, #24]
   18c44:	add	r0, r1, #16
   18c48:	str	r0, [r9, #-4032]	; 0xfffff040
   18c4c:	strd	r2, [r1, #8]
   18c50:	ldrd	r2, [sp, #40]	; 0x28
   18c54:	strd	r2, [r1]
   18c58:	bl	14720 <__assert_fail@plt+0x29ac>
   18c5c:	ldrb	r3, [r9, #-4000]	; 0xfffff060
   18c60:	cmp	r3, #0
   18c64:	beq	18f80 <__assert_fail@plt+0x720c>
   18c68:	ldr	r7, [pc, #1008]	; 19060 <__assert_fail@plt+0x72ec>
   18c6c:	ldrb	r3, [r7, #228]	; 0xe4
   18c70:	cmp	r3, #0
   18c74:	beq	18fd4 <__assert_fail@plt+0x7260>
   18c78:	ldrb	r3, [r6, #3588]	; 0xe04
   18c7c:	mov	r2, #0
   18c80:	strb	r2, [r7, #228]	; 0xe4
   18c84:	cmp	r3, r2
   18c88:	bne	18fc4 <__assert_fail@plt+0x7250>
   18c8c:	ldrb	r7, [r9, #-4088]	; 0xfffff008
   18c90:	cmp	r7, #0
   18c94:	bne	18f90 <__assert_fail@plt+0x721c>
   18c98:	ldr	r2, [pc, #964]	; 19064 <__assert_fail@plt+0x72f0>
   18c9c:	cmp	fp, #0
   18ca0:	mov	r3, #1
   18ca4:	ldr	r1, [r9, #-3996]	; 0xfffff064
   18ca8:	ldr	r0, [sp, #32]
   18cac:	str	r2, [sp, #4]
   18cb0:	movne	r0, fp
   18cb4:	str	r3, [sp]
   18cb8:	mvn	r2, #0
   18cbc:	mov	r3, #0
   18cc0:	str	r7, [sp, #8]
   18cc4:	bl	15b2c <__assert_fail@plt+0x3db8>
   18cc8:	mov	r0, r7
   18ccc:	bl	1ad20 <__assert_fail@plt+0x8fac>
   18cd0:	mov	r1, #2
   18cd4:	ldr	r0, [pc, #908]	; 19068 <__assert_fail@plt+0x72f4>
   18cd8:	bl	152f0 <__assert_fail@plt+0x357c>
   18cdc:	mov	r2, #0
   18ce0:	mov	r3, #0
   18ce4:	mov	fp, #0
   18ce8:	mov	r8, #4
   18cec:	strd	r2, [sp, #24]
   18cf0:	str	fp, [r4]
   18cf4:	ldr	r0, [sp, #20]
   18cf8:	bl	11cb4 <readdir64@plt>
   18cfc:	subs	r7, r0, #0
   18d00:	beq	18e48 <__assert_fail@plt+0x70d4>
   18d04:	ldr	r3, [r9, #-3948]	; 0xfffff094
   18d08:	add	r5, r7, #19
   18d0c:	cmp	r3, #2
   18d10:	beq	18d8c <__assert_fail@plt+0x7018>
   18d14:	ldrb	r2, [r7, #19]
   18d18:	cmp	r2, #46	; 0x2e
   18d1c:	beq	18d68 <__assert_fail@plt+0x6ff4>
   18d20:	cmp	r3, #0
   18d24:	bne	18d8c <__assert_fail@plt+0x7018>
   18d28:	ldr	r3, [r9, #-3940]	; 0xfffff09c
   18d2c:	cmp	r3, #0
   18d30:	beq	18d8c <__assert_fail@plt+0x7018>
   18d34:	mov	sl, r3
   18d38:	b	18d48 <__assert_fail@plt+0x6fd4>
   18d3c:	ldr	sl, [sl, #4]
   18d40:	cmp	sl, #0
   18d44:	beq	18d8c <__assert_fail@plt+0x7018>
   18d48:	mov	r2, r8
   18d4c:	mov	r1, r5
   18d50:	ldr	r0, [sl]
   18d54:	bl	11ab0 <fnmatch@plt>
   18d58:	cmp	r0, #0
   18d5c:	bne	18d3c <__assert_fail@plt+0x6fc8>
   18d60:	bl	155e0 <__assert_fail@plt+0x386c>
   18d64:	b	18cf0 <__assert_fail@plt+0x6f7c>
   18d68:	cmp	r3, #0
   18d6c:	beq	18d60 <__assert_fail@plt+0x6fec>
   18d70:	ldrb	r3, [r7, #20]
   18d74:	cmp	r3, #46	; 0x2e
   18d78:	movne	r3, #1
   18d7c:	moveq	r3, #2
   18d80:	ldrb	r3, [r5, r3]
   18d84:	cmp	r3, #0
   18d88:	beq	18d60 <__assert_fail@plt+0x6fec>
   18d8c:	ldr	r3, [r9, #-3944]	; 0xfffff098
   18d90:	cmp	r3, #0
   18d94:	movne	sl, r3
   18d98:	bne	18dac <__assert_fail@plt+0x7038>
   18d9c:	b	18dc8 <__assert_fail@plt+0x7054>
   18da0:	ldr	sl, [sl, #4]
   18da4:	cmp	sl, #0
   18da8:	beq	18dc8 <__assert_fail@plt+0x7054>
   18dac:	mov	r2, r8
   18db0:	mov	r1, r5
   18db4:	ldr	r0, [sl]
   18db8:	bl	11ab0 <fnmatch@plt>
   18dbc:	cmp	r0, #0
   18dc0:	bne	18da0 <__assert_fail@plt+0x702c>
   18dc4:	b	18d60 <__assert_fail@plt+0x6fec>
   18dc8:	ldrb	r3, [r7, #18]
   18dcc:	sub	r3, r3, #1
   18dd0:	uxtb	r3, r3
   18dd4:	cmp	r3, #13
   18dd8:	movhi	r1, fp
   18ddc:	ldrls	r2, [pc, #648]	; 1906c <__assert_fail@plt+0x72f8>
   18de0:	addls	r3, r2, r3, lsl #2
   18de4:	ldrls	r1, [r3, #400]	; 0x190
   18de8:	ldr	r3, [sp, #32]
   18dec:	mov	r2, fp
   18df0:	mov	r0, r5
   18df4:	bl	17d40 <__assert_fail@plt+0x5fcc>
   18df8:	ldrd	r2, [sp, #24]
   18dfc:	ldr	ip, [r6, #3092]	; 0xc14
   18e00:	adds	r2, r2, r0
   18e04:	adc	r3, r3, r1
   18e08:	cmp	ip, #1
   18e0c:	strd	r2, [sp, #24]
   18e10:	bne	18d60 <__assert_fail@plt+0x6fec>
   18e14:	ldr	r3, [r6, #3100]	; 0xc1c
   18e18:	cmp	r3, #6
   18e1c:	bne	18d60 <__assert_fail@plt+0x6fec>
   18e20:	ldrb	r3, [r6, #3089]	; 0xc11
   18e24:	cmp	r3, #0
   18e28:	bne	18d60 <__assert_fail@plt+0x6fec>
   18e2c:	ldrb	r3, [r9, #-4000]	; 0xfffff060
   18e30:	cmp	r3, #0
   18e34:	bne	18d60 <__assert_fail@plt+0x6fec>
   18e38:	bl	16378 <__assert_fail@plt+0x4604>
   18e3c:	bl	17994 <__assert_fail@plt+0x5c20>
   18e40:	bl	14720 <__assert_fail@plt+0x29ac>
   18e44:	b	18d60 <__assert_fail@plt+0x6fec>
   18e48:	ldr	r3, [r4]
   18e4c:	cmp	r3, #0
   18e50:	beq	18e7c <__assert_fail@plt+0x7108>
   18e54:	mov	r2, #5
   18e58:	ldr	r1, [pc, #528]	; 19070 <__assert_fail@plt+0x72fc>
   18e5c:	bl	11984 <dcgettext@plt>
   18e60:	ldr	r2, [sp, #32]
   18e64:	mov	r1, r0
   18e68:	ldr	r0, [sp, #36]	; 0x24
   18e6c:	bl	14eb0 <__assert_fail@plt+0x313c>
   18e70:	ldr	r3, [r4]
   18e74:	cmp	r3, #75	; 0x4b
   18e78:	beq	18d60 <__assert_fail@plt+0x6fec>
   18e7c:	ldr	r0, [sp, #20]
   18e80:	bl	11d38 <closedir@plt>
   18e84:	cmp	r0, #0
   18e88:	bne	19000 <__assert_fail@plt+0x728c>
   18e8c:	bl	16378 <__assert_fail@plt+0x4604>
   18e90:	ldrb	r3, [r9, #-4000]	; 0xfffff060
   18e94:	cmp	r3, #0
   18e98:	bne	18ff0 <__assert_fail@plt+0x727c>
   18e9c:	ldr	r3, [r6, #3092]	; 0xc14
   18ea0:	cmp	r3, #0
   18ea4:	beq	18eb4 <__assert_fail@plt+0x7140>
   18ea8:	ldrb	r3, [r6, #3089]	; 0xc11
   18eac:	cmp	r3, #0
   18eb0:	beq	18f44 <__assert_fail@plt+0x71d0>
   18eb4:	ldr	r3, [pc, #440]	; 19074 <__assert_fail@plt+0x7300>
   18eb8:	ldr	ip, [r6, #4004]	; 0xfa4
   18ebc:	mov	r4, #512	; 0x200
   18ec0:	ldrd	r2, [r3, #-8]
   18ec4:	mov	r5, #0
   18ec8:	ldrd	r0, [sp, #24]
   18ecc:	strd	r2, [sp, #8]
   18ed0:	strd	r4, [sp]
   18ed4:	mov	r3, ip
   18ed8:	add	r2, sp, #49	; 0x31
   18edc:	bl	1be68 <__assert_fail@plt+0xa0f4>
   18ee0:	mov	r4, r0
   18ee4:	bl	11b94 <strlen@plt>
   18ee8:	ldr	r3, [pc, #368]	; 19060 <__assert_fail@plt+0x72ec>
   18eec:	ldrb	r1, [r6, #3588]	; 0xe04
   18ef0:	mov	r2, #32
   18ef4:	ldrb	r3, [r3, #210]	; 0xd2
   18ef8:	cmp	r1, #0
   18efc:	strb	r2, [r4, #-1]
   18f00:	add	r5, r4, r0
   18f04:	strb	r3, [r4, r0]
   18f08:	add	r5, r5, #1
   18f0c:	sub	r4, r4, #1
   18f10:	bne	18fe0 <__assert_fail@plt+0x726c>
   18f14:	mov	r2, #5
   18f18:	ldr	r1, [pc, #344]	; 19078 <__assert_fail@plt+0x7304>
   18f1c:	mov	r0, #0
   18f20:	bl	11984 <dcgettext@plt>
   18f24:	mov	r7, r0
   18f28:	bl	11b94 <strlen@plt>
   18f2c:	mov	r1, r0
   18f30:	mov	r0, r7
   18f34:	bl	152f0 <__assert_fail@plt+0x357c>
   18f38:	sub	r1, r5, r4
   18f3c:	mov	r0, r4
   18f40:	bl	152f0 <__assert_fail@plt+0x357c>
   18f44:	ldr	r3, [r6, #3104]	; 0xc20
   18f48:	cmp	r3, #0
   18f4c:	beq	18bd0 <__assert_fail@plt+0x6e5c>
   18f50:	bl	17994 <__assert_fail@plt+0x5c20>
   18f54:	add	sp, sp, #708	; 0x2c4
   18f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f5c:	mov	r1, #256	; 0x100
   18f60:	str	r1, [sp]
   18f64:	mov	r3, r8
   18f68:	mov	r2, r7
   18f6c:	ldr	r1, [sp, #32]
   18f70:	mvn	r0, #99	; 0x63
   18f74:	bl	14794 <__assert_fail@plt+0x2a20>
   18f78:	lsr	sl, r0, #31
   18f7c:	b	18b30 <__assert_fail@plt+0x6dbc>
   18f80:	ldrb	r3, [r9, #-3999]	; 0xfffff061
   18f84:	cmp	r3, #0
   18f88:	beq	18cdc <__assert_fail@plt+0x6f68>
   18f8c:	b	18c68 <__assert_fail@plt+0x6ef4>
   18f90:	mov	r1, #2
   18f94:	ldr	r0, [sp, #32]
   18f98:	bl	19c90 <__assert_fail@plt+0x7f1c>
   18f9c:	subs	r7, r0, #0
   18fa0:	bne	18c98 <__assert_fail@plt+0x6f24>
   18fa4:	mov	r2, #5
   18fa8:	ldr	r1, [pc, #204]	; 1907c <__assert_fail@plt+0x7308>
   18fac:	bl	11984 <dcgettext@plt>
   18fb0:	ldr	r2, [sp, #32]
   18fb4:	mov	r1, r0
   18fb8:	ldr	r0, [sp, #36]	; 0x24
   18fbc:	bl	14eb0 <__assert_fail@plt+0x313c>
   18fc0:	b	18c98 <__assert_fail@plt+0x6f24>
   18fc4:	mov	r1, #2
   18fc8:	ldr	r0, [pc, #176]	; 19080 <__assert_fail@plt+0x730c>
   18fcc:	bl	152f0 <__assert_fail@plt+0x357c>
   18fd0:	b	18c8c <__assert_fail@plt+0x6f18>
   18fd4:	mov	r0, #10
   18fd8:	bl	14c7c <__assert_fail@plt+0x2f08>
   18fdc:	b	18c78 <__assert_fail@plt+0x6f04>
   18fe0:	mov	r1, #2
   18fe4:	ldr	r0, [pc, #148]	; 19080 <__assert_fail@plt+0x730c>
   18fe8:	bl	152f0 <__assert_fail@plt+0x357c>
   18fec:	b	18f14 <__assert_fail@plt+0x71a0>
   18ff0:	ldr	r0, [sp, #32]
   18ff4:	mov	r1, #0
   18ff8:	bl	14a54 <__assert_fail@plt+0x2ce0>
   18ffc:	b	18e9c <__assert_fail@plt+0x7128>
   19000:	mov	r2, #5
   19004:	ldr	r1, [pc, #120]	; 19084 <__assert_fail@plt+0x7310>
   19008:	mov	r0, #0
   1900c:	bl	11984 <dcgettext@plt>
   19010:	ldr	r2, [sp, #32]
   19014:	mov	r1, r0
   19018:	ldr	r0, [sp, #36]	; 0x24
   1901c:	bl	14eb0 <__assert_fail@plt+0x313c>
   19020:	b	18e8c <__assert_fail@plt+0x7118>
   19024:	mov	r2, #5
   19028:	ldr	r1, [pc, #88]	; 19088 <__assert_fail@plt+0x7314>
   1902c:	bl	11984 <dcgettext@plt>
   19030:	ldr	r2, [sp, #32]
   19034:	mov	r1, r0
   19038:	ldr	r0, [sp, #36]	; 0x24
   1903c:	bl	14eb0 <__assert_fail@plt+0x313c>
   19040:	b	18bd0 <__assert_fail@plt+0x6e5c>
   19044:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   19048:	andeq	r9, r3, r0, lsr r3
   1904c:	andeq	fp, r3, r8, lsr #6
   19050:	andeq	r7, r2, r4, lsl #29
   19054:	strdeq	r5, [r2], -ip
   19058:	ldrdeq	r5, [r2], -r4
   1905c:	andeq	sl, r3, ip, asr r3
   19060:	ldrdeq	r9, [r3], -r0
   19064:	muleq	r3, r0, r3
   19068:	andeq	r5, r2, r8, lsr #12
   1906c:	andeq	r3, r2, r8, asr sp
   19070:	andeq	r5, r2, ip, lsr #12
   19074:	andeq	sl, r3, r0, ror #5
   19078:	andeq	r5, r2, ip, asr r6
   1907c:	andeq	r5, r2, r0, ror #10
   19080:	andeq	r5, r2, r8, asr #10
   19084:	andeq	r5, r2, r4, asr #12
   19088:			; <UNDEFINED> instruction: 0x000255b8
   1908c:	subs	r4, r0, #0
   19090:	push	{r7, lr}
   19094:	sub	sp, sp, #56	; 0x38
   19098:	beq	190d4 <__assert_fail@plt+0x7360>
   1909c:	ldr	r3, [pc, #1300]	; 195b8 <__assert_fail@plt+0x7844>
   190a0:	mov	r2, #5
   190a4:	ldr	r1, [pc, #1296]	; 195bc <__assert_fail@plt+0x7848>
   190a8:	mov	r0, #0
   190ac:	ldr	r5, [r3]
   190b0:	bl	11984 <dcgettext@plt>
   190b4:	ldr	r3, [pc, #1284]	; 195c0 <__assert_fail@plt+0x784c>
   190b8:	mov	r1, #1
   190bc:	ldr	r3, [r3]
   190c0:	mov	r2, r0
   190c4:	mov	r0, r5
   190c8:	bl	11c18 <__fprintf_chk@plt>
   190cc:	mov	r0, r4
   190d0:	bl	11b70 <exit@plt>
   190d4:	mov	r2, #5
   190d8:	ldr	r1, [pc, #1252]	; 195c4 <__assert_fail@plt+0x7850>
   190dc:	bl	11984 <dcgettext@plt>
   190e0:	ldr	r3, [pc, #1240]	; 195c0 <__assert_fail@plt+0x784c>
   190e4:	ldr	r5, [pc, #1244]	; 195c8 <__assert_fail@plt+0x7854>
   190e8:	ldr	r2, [r3]
   190ec:	mov	r1, r0
   190f0:	mov	r0, #1
   190f4:	bl	11bf4 <__printf_chk@plt>
   190f8:	mov	r2, #5
   190fc:	ldr	r1, [pc, #1224]	; 195cc <__assert_fail@plt+0x7858>
   19100:	mov	r0, r4
   19104:	bl	11984 <dcgettext@plt>
   19108:	ldr	r1, [r5]
   1910c:	bl	11864 <fputs_unlocked@plt>
   19110:	mov	r2, #5
   19114:	ldr	r1, [pc, #1204]	; 195d0 <__assert_fail@plt+0x785c>
   19118:	mov	r0, r4
   1911c:	bl	11984 <dcgettext@plt>
   19120:	ldr	r1, [r5]
   19124:	bl	11864 <fputs_unlocked@plt>
   19128:	mov	r2, #5
   1912c:	ldr	r1, [pc, #1184]	; 195d4 <__assert_fail@plt+0x7860>
   19130:	mov	r0, r4
   19134:	bl	11984 <dcgettext@plt>
   19138:	ldr	r1, [r5]
   1913c:	bl	11864 <fputs_unlocked@plt>
   19140:	mov	r2, #5
   19144:	ldr	r1, [pc, #1164]	; 195d8 <__assert_fail@plt+0x7864>
   19148:	mov	r0, r4
   1914c:	bl	11984 <dcgettext@plt>
   19150:	ldr	r1, [r5]
   19154:	bl	11864 <fputs_unlocked@plt>
   19158:	mov	r2, #5
   1915c:	ldr	r1, [pc, #1144]	; 195dc <__assert_fail@plt+0x7868>
   19160:	mov	r0, r4
   19164:	bl	11984 <dcgettext@plt>
   19168:	ldr	r1, [r5]
   1916c:	bl	11864 <fputs_unlocked@plt>
   19170:	mov	r2, #5
   19174:	ldr	r1, [pc, #1124]	; 195e0 <__assert_fail@plt+0x786c>
   19178:	mov	r0, r4
   1917c:	bl	11984 <dcgettext@plt>
   19180:	ldr	r1, [r5]
   19184:	bl	11864 <fputs_unlocked@plt>
   19188:	mov	r2, #5
   1918c:	ldr	r1, [pc, #1104]	; 195e4 <__assert_fail@plt+0x7870>
   19190:	mov	r0, r4
   19194:	bl	11984 <dcgettext@plt>
   19198:	ldr	r1, [r5]
   1919c:	bl	11864 <fputs_unlocked@plt>
   191a0:	mov	r2, #5
   191a4:	ldr	r1, [pc, #1084]	; 195e8 <__assert_fail@plt+0x7874>
   191a8:	mov	r0, r4
   191ac:	bl	11984 <dcgettext@plt>
   191b0:	ldr	r1, [r5]
   191b4:	bl	11864 <fputs_unlocked@plt>
   191b8:	mov	r2, #5
   191bc:	ldr	r1, [pc, #1064]	; 195ec <__assert_fail@plt+0x7878>
   191c0:	mov	r0, r4
   191c4:	bl	11984 <dcgettext@plt>
   191c8:	ldr	r1, [r5]
   191cc:	bl	11864 <fputs_unlocked@plt>
   191d0:	mov	r2, #5
   191d4:	ldr	r1, [pc, #1044]	; 195f0 <__assert_fail@plt+0x787c>
   191d8:	mov	r0, r4
   191dc:	bl	11984 <dcgettext@plt>
   191e0:	ldr	r1, [r5]
   191e4:	bl	11864 <fputs_unlocked@plt>
   191e8:	mov	r2, #5
   191ec:	ldr	r1, [pc, #1024]	; 195f4 <__assert_fail@plt+0x7880>
   191f0:	mov	r0, r4
   191f4:	bl	11984 <dcgettext@plt>
   191f8:	ldr	r1, [r5]
   191fc:	bl	11864 <fputs_unlocked@plt>
   19200:	mov	r2, #5
   19204:	ldr	r1, [pc, #1004]	; 195f8 <__assert_fail@plt+0x7884>
   19208:	mov	r0, r4
   1920c:	bl	11984 <dcgettext@plt>
   19210:	ldr	r1, [r5]
   19214:	bl	11864 <fputs_unlocked@plt>
   19218:	mov	r2, #5
   1921c:	ldr	r1, [pc, #984]	; 195fc <__assert_fail@plt+0x7888>
   19220:	mov	r0, r4
   19224:	bl	11984 <dcgettext@plt>
   19228:	ldr	r1, [r5]
   1922c:	bl	11864 <fputs_unlocked@plt>
   19230:	mov	r2, #5
   19234:	ldr	r1, [pc, #964]	; 19600 <__assert_fail@plt+0x788c>
   19238:	mov	r0, r4
   1923c:	bl	11984 <dcgettext@plt>
   19240:	ldr	r1, [r5]
   19244:	bl	11864 <fputs_unlocked@plt>
   19248:	mov	r2, #5
   1924c:	ldr	r1, [pc, #944]	; 19604 <__assert_fail@plt+0x7890>
   19250:	mov	r0, r4
   19254:	bl	11984 <dcgettext@plt>
   19258:	ldr	r1, [r5]
   1925c:	bl	11864 <fputs_unlocked@plt>
   19260:	mov	r2, #5
   19264:	ldr	r1, [pc, #924]	; 19608 <__assert_fail@plt+0x7894>
   19268:	mov	r0, r4
   1926c:	bl	11984 <dcgettext@plt>
   19270:	ldr	r1, [r5]
   19274:	bl	11864 <fputs_unlocked@plt>
   19278:	mov	r2, #5
   1927c:	ldr	r1, [pc, #904]	; 1960c <__assert_fail@plt+0x7898>
   19280:	mov	r0, r4
   19284:	bl	11984 <dcgettext@plt>
   19288:	ldr	r1, [r5]
   1928c:	bl	11864 <fputs_unlocked@plt>
   19290:	mov	r2, #5
   19294:	ldr	r1, [pc, #884]	; 19610 <__assert_fail@plt+0x789c>
   19298:	mov	r0, r4
   1929c:	bl	11984 <dcgettext@plt>
   192a0:	ldr	r1, [r5]
   192a4:	bl	11864 <fputs_unlocked@plt>
   192a8:	mov	r2, #5
   192ac:	ldr	r1, [pc, #864]	; 19614 <__assert_fail@plt+0x78a0>
   192b0:	mov	r0, r4
   192b4:	bl	11984 <dcgettext@plt>
   192b8:	ldr	r1, [r5]
   192bc:	bl	11864 <fputs_unlocked@plt>
   192c0:	mov	r2, #5
   192c4:	ldr	r1, [pc, #844]	; 19618 <__assert_fail@plt+0x78a4>
   192c8:	mov	r0, r4
   192cc:	bl	11984 <dcgettext@plt>
   192d0:	ldr	r1, [r5]
   192d4:	bl	11864 <fputs_unlocked@plt>
   192d8:	mov	r2, #5
   192dc:	ldr	r1, [pc, #824]	; 1961c <__assert_fail@plt+0x78a8>
   192e0:	mov	r0, r4
   192e4:	bl	11984 <dcgettext@plt>
   192e8:	ldr	r1, [r5]
   192ec:	bl	11864 <fputs_unlocked@plt>
   192f0:	mov	r2, #5
   192f4:	ldr	r1, [pc, #804]	; 19620 <__assert_fail@plt+0x78ac>
   192f8:	mov	r0, r4
   192fc:	bl	11984 <dcgettext@plt>
   19300:	ldr	r1, [r5]
   19304:	bl	11864 <fputs_unlocked@plt>
   19308:	mov	r2, #5
   1930c:	ldr	r1, [pc, #784]	; 19624 <__assert_fail@plt+0x78b0>
   19310:	mov	r0, r4
   19314:	bl	11984 <dcgettext@plt>
   19318:	ldr	r1, [r5]
   1931c:	bl	11864 <fputs_unlocked@plt>
   19320:	mov	r2, #5
   19324:	ldr	r1, [pc, #764]	; 19628 <__assert_fail@plt+0x78b4>
   19328:	mov	r0, r4
   1932c:	bl	11984 <dcgettext@plt>
   19330:	ldr	r1, [r5]
   19334:	bl	11864 <fputs_unlocked@plt>
   19338:	mov	r2, #5
   1933c:	ldr	r1, [pc, #744]	; 1962c <__assert_fail@plt+0x78b8>
   19340:	mov	r0, r4
   19344:	bl	11984 <dcgettext@plt>
   19348:	ldr	r1, [r5]
   1934c:	bl	11864 <fputs_unlocked@plt>
   19350:	mov	r2, #5
   19354:	ldr	r1, [pc, #724]	; 19630 <__assert_fail@plt+0x78bc>
   19358:	mov	r0, r4
   1935c:	bl	11984 <dcgettext@plt>
   19360:	ldr	r1, [r5]
   19364:	bl	11864 <fputs_unlocked@plt>
   19368:	mov	r2, #5
   1936c:	ldr	r1, [pc, #704]	; 19634 <__assert_fail@plt+0x78c0>
   19370:	mov	r0, r4
   19374:	bl	11984 <dcgettext@plt>
   19378:	ldr	r1, [r5]
   1937c:	bl	11864 <fputs_unlocked@plt>
   19380:	mov	r2, #5
   19384:	ldr	r1, [pc, #684]	; 19638 <__assert_fail@plt+0x78c4>
   19388:	mov	r0, r4
   1938c:	bl	11984 <dcgettext@plt>
   19390:	ldr	r1, [r5]
   19394:	bl	11864 <fputs_unlocked@plt>
   19398:	mov	r2, #5
   1939c:	ldr	r1, [pc, #664]	; 1963c <__assert_fail@plt+0x78c8>
   193a0:	mov	r0, r4
   193a4:	bl	11984 <dcgettext@plt>
   193a8:	ldr	r1, [r5]
   193ac:	bl	11864 <fputs_unlocked@plt>
   193b0:	mov	r2, #5
   193b4:	ldr	r1, [pc, #644]	; 19640 <__assert_fail@plt+0x78cc>
   193b8:	mov	r0, r4
   193bc:	bl	11984 <dcgettext@plt>
   193c0:	ldr	r1, [r5]
   193c4:	bl	11864 <fputs_unlocked@plt>
   193c8:	mov	r2, #5
   193cc:	ldr	r1, [pc, #624]	; 19644 <__assert_fail@plt+0x78d0>
   193d0:	mov	r0, r4
   193d4:	bl	11984 <dcgettext@plt>
   193d8:	ldr	r1, [r5]
   193dc:	bl	11864 <fputs_unlocked@plt>
   193e0:	ldr	r3, [pc, #608]	; 19648 <__assert_fail@plt+0x78d4>
   193e4:	ldr	r3, [r3]
   193e8:	cmp	r3, #1
   193ec:	beq	1950c <__assert_fail@plt+0x7798>
   193f0:	ldr	r2, [pc, #596]	; 1964c <__assert_fail@plt+0x78d8>
   193f4:	cmp	r3, #2
   193f8:	ldr	r7, [pc, #592]	; 19650 <__assert_fail@plt+0x78dc>
   193fc:	movne	r7, r2
   19400:	ldr	r6, [pc, #588]	; 19654 <__assert_fail@plt+0x78e0>
   19404:	mov	lr, sp
   19408:	ldm	r6!, {r0, r1, r2, r3}
   1940c:	stmia	lr!, {r0, r1, r2, r3}
   19410:	ldm	r6!, {r0, r1, r2, r3}
   19414:	ldr	ip, [sp]
   19418:	stmia	lr!, {r0, r1, r2, r3}
   1941c:	cmp	ip, #0
   19420:	ldm	r6!, {r0, r1, r2, r3}
   19424:	stmia	lr!, {r0, r1, r2, r3}
   19428:	ldm	r6, {r0, r1}
   1942c:	mov	r6, sp
   19430:	stm	lr, {r0, r1}
   19434:	bne	19448 <__assert_fail@plt+0x76d4>
   19438:	b	1945c <__assert_fail@plt+0x76e8>
   1943c:	ldr	ip, [r6, #8]!
   19440:	cmp	ip, #0
   19444:	beq	1945c <__assert_fail@plt+0x76e8>
   19448:	mov	r1, ip
   1944c:	mov	r0, r7
   19450:	bl	118a0 <strcmp@plt>
   19454:	cmp	r0, #0
   19458:	bne	1943c <__assert_fail@plt+0x76c8>
   1945c:	ldr	r6, [r6, #4]
   19460:	mov	r2, #5
   19464:	cmp	r6, #0
   19468:	ldr	r1, [pc, #488]	; 19658 <__assert_fail@plt+0x78e4>
   1946c:	beq	19514 <__assert_fail@plt+0x77a0>
   19470:	mov	r0, #0
   19474:	bl	11984 <dcgettext@plt>
   19478:	ldr	r3, [pc, #476]	; 1965c <__assert_fail@plt+0x78e8>
   1947c:	ldr	r2, [pc, #476]	; 19660 <__assert_fail@plt+0x78ec>
   19480:	mov	r1, r0
   19484:	mov	r0, #1
   19488:	bl	11bf4 <__printf_chk@plt>
   1948c:	mov	r1, #0
   19490:	mov	r0, #5
   19494:	bl	11c54 <setlocale@plt>
   19498:	cmp	r0, #0
   1949c:	beq	194b4 <__assert_fail@plt+0x7740>
   194a0:	mov	r2, #3
   194a4:	ldr	r1, [pc, #440]	; 19664 <__assert_fail@plt+0x78f0>
   194a8:	bl	11d20 <strncmp@plt>
   194ac:	cmp	r0, #0
   194b0:	bne	1955c <__assert_fail@plt+0x77e8>
   194b4:	mov	r2, #5
   194b8:	ldr	r1, [pc, #424]	; 19668 <__assert_fail@plt+0x78f4>
   194bc:	mov	r0, #0
   194c0:	bl	11984 <dcgettext@plt>
   194c4:	mov	r3, r7
   194c8:	ldr	r2, [pc, #396]	; 1965c <__assert_fail@plt+0x78e8>
   194cc:	mov	r1, r0
   194d0:	mov	r0, #1
   194d4:	bl	11bf4 <__printf_chk@plt>
   194d8:	mov	r2, #5
   194dc:	ldr	r1, [pc, #392]	; 1966c <__assert_fail@plt+0x78f8>
   194e0:	mov	r0, #0
   194e4:	bl	11984 <dcgettext@plt>
   194e8:	ldr	r2, [pc, #384]	; 19670 <__assert_fail@plt+0x78fc>
   194ec:	cmp	r7, r6
   194f0:	ldr	r3, [pc, #380]	; 19674 <__assert_fail@plt+0x7900>
   194f4:	movne	r3, r2
   194f8:	mov	r1, r0
   194fc:	mov	r2, r6
   19500:	mov	r0, #1
   19504:	bl	11bf4 <__printf_chk@plt>
   19508:	b	190cc <__assert_fail@plt+0x7358>
   1950c:	ldr	r7, [pc, #356]	; 19678 <__assert_fail@plt+0x7904>
   19510:	b	19400 <__assert_fail@plt+0x768c>
   19514:	mov	r0, r6
   19518:	bl	11984 <dcgettext@plt>
   1951c:	ldr	r3, [pc, #312]	; 1965c <__assert_fail@plt+0x78e8>
   19520:	ldr	r2, [pc, #312]	; 19660 <__assert_fail@plt+0x78ec>
   19524:	mov	r1, r0
   19528:	mov	r0, #1
   1952c:	bl	11bf4 <__printf_chk@plt>
   19530:	mov	r1, r6
   19534:	mov	r0, #5
   19538:	bl	11c54 <setlocale@plt>
   1953c:	cmp	r0, #0
   19540:	beq	19578 <__assert_fail@plt+0x7804>
   19544:	mov	r2, #3
   19548:	ldr	r1, [pc, #276]	; 19664 <__assert_fail@plt+0x78f0>
   1954c:	bl	11d20 <strncmp@plt>
   19550:	cmp	r0, #0
   19554:	beq	19578 <__assert_fail@plt+0x7804>
   19558:	mov	r6, r7
   1955c:	mov	r2, #5
   19560:	ldr	r1, [pc, #276]	; 1967c <__assert_fail@plt+0x7908>
   19564:	mov	r0, #0
   19568:	bl	11984 <dcgettext@plt>
   1956c:	ldr	r1, [r5]
   19570:	bl	11864 <fputs_unlocked@plt>
   19574:	b	194b4 <__assert_fail@plt+0x7740>
   19578:	mov	r2, #5
   1957c:	ldr	r1, [pc, #228]	; 19668 <__assert_fail@plt+0x78f4>
   19580:	bl	11984 <dcgettext@plt>
   19584:	mov	r3, r7
   19588:	ldr	r2, [pc, #204]	; 1965c <__assert_fail@plt+0x78e8>
   1958c:	mov	r1, r0
   19590:	mov	r0, #1
   19594:	bl	11bf4 <__printf_chk@plt>
   19598:	mov	r0, r6
   1959c:	ldr	r1, [pc, #200]	; 1966c <__assert_fail@plt+0x78f8>
   195a0:	mov	r2, #5
   195a4:	bl	11984 <dcgettext@plt>
   195a8:	mov	r6, r7
   195ac:	ldr	r3, [pc, #192]	; 19674 <__assert_fail@plt+0x7900>
   195b0:	mov	r1, r0
   195b4:	b	194fc <__assert_fail@plt+0x7788>
   195b8:	andeq	r9, r3, r0, lsr #6
   195bc:	andeq	r5, r2, r0, ror r6
   195c0:	andeq	sl, r3, r4, ror #7
   195c4:	muleq	r2, r8, r6
   195c8:	andeq	r9, r3, r4, lsr #6
   195cc:			; <UNDEFINED> instruction: 0x000256bc
   195d0:	andeq	r5, r2, ip, asr #14
   195d4:	muleq	r2, r8, r7
   195d8:	andeq	r5, r2, r8, lsr #17
   195dc:	andeq	r5, r2, r4, asr #18
   195e0:			; <UNDEFINED> instruction: 0x00025ab0
   195e4:	andeq	r5, r2, r4, asr #23
   195e8:	andeq	r5, r2, r4, ror #26
   195ec:	andeq	r5, r2, r4, lsr #27
   195f0:	muleq	r2, ip, lr
   195f4:	andeq	r5, r2, r8, ror #29
   195f8:	andeq	r5, r2, r0, lsl #31
   195fc:	andeq	r6, r2, r8, lsr #2
   19600:	andeq	r6, r2, r0, ror #2
   19604:	andeq	r6, r2, r4, asr #5
   19608:	andeq	r6, r2, r0, ror #6
   1960c:	andeq	r6, r2, r8, asr #9
   19610:	strdeq	r6, [r2], -r8
   19614:	andeq	r6, r2, r4, asr #16
   19618:	andeq	r6, r2, ip, lsl #18
   1961c:	muleq	r2, r0, fp
   19620:	andeq	r6, r2, r0, ror #23
   19624:	andeq	r6, r2, r0, ror ip
   19628:	andeq	r6, r2, r4, ror #27
   1962c:	andeq	r6, r2, ip, ror pc
   19630:	andeq	r6, r2, ip, lsr #31
   19634:	andeq	r6, r2, r4, ror #31
   19638:	strheq	r7, [r2], -r8
   1963c:	andeq	r7, r2, r0, lsr r2
   19640:	andeq	r7, r2, ip, ror r2
   19644:	muleq	r2, ip, r3
   19648:			; <UNDEFINED> instruction: 0x000392b8
   1964c:	andeq	r5, r2, r4, ror #12
   19650:	ldrdeq	r7, [r2], -r8
   19654:	andeq	r3, r2, r0, lsr #30
   19658:	andeq	r7, r2, r4, lsr r4
   1965c:	andeq	r7, r2, ip, asr #8
   19660:	andeq	r7, r2, r4, ror r4
   19664:	andeq	r7, r2, r4, lsl #9
   19668:	ldrdeq	r7, [r2], -r0
   1966c:	andeq	r7, r2, ip, ror #9
   19670:	andeq	r7, r2, r4, lsl #29
   19674:	andeq	r7, r2, ip, ror r9
   19678:	andeq	r5, r2, ip, ror #12
   1967c:	andeq	r7, r2, r8, lsl #9
   19680:	push	{r4, r5, r6, r7, r8, lr}
   19684:	subs	r7, r1, #0
   19688:	sub	sp, sp, #128	; 0x80
   1968c:	mov	r8, r0
   19690:	moveq	r4, #128	; 0x80
   19694:	beq	196a8 <__assert_fail@plt+0x7934>
   19698:	cmp	r7, #1024	; 0x400
   1969c:	addls	r4, r7, #1
   196a0:	ldrhi	r4, [pc, #284]	; 197c4 <__assert_fail@plt+0x7a50>
   196a4:	mov	r7, #1
   196a8:	cmp	r4, #128	; 0x80
   196ac:	moveq	r0, r7
   196b0:	orrne	r0, r7, #1
   196b4:	cmp	r0, #0
   196b8:	moveq	r5, r0
   196bc:	moveq	r6, sp
   196c0:	bne	19708 <__assert_fail@plt+0x7994>
   196c4:	mov	r1, r6
   196c8:	mov	r2, r4
   196cc:	mov	r0, r8
   196d0:	bl	11a08 <readlink@plt>
   196d4:	subs	r1, r0, #0
   196d8:	mov	r0, r5
   196dc:	blt	19734 <__assert_fail@plt+0x79c0>
   196e0:	cmp	r4, r1
   196e4:	bhi	19748 <__assert_fail@plt+0x79d4>
   196e8:	bl	1ad20 <__assert_fail@plt+0x8fac>
   196ec:	cmn	r4, #-1073741823	; 0xc0000001
   196f0:	lslls	r4, r4, #1
   196f4:	bls	196a8 <__assert_fail@plt+0x7934>
   196f8:	cmn	r4, #-2147483646	; 0x80000002
   196fc:	bhi	19780 <__assert_fail@plt+0x7a0c>
   19700:	mvn	r4, #-2147483648	; 0x80000000
   19704:	b	196a8 <__assert_fail@plt+0x7934>
   19708:	mov	r0, r4
   1970c:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   19710:	subs	r6, r0, #0
   19714:	mov	r5, r6
   19718:	bne	196c4 <__assert_fail@plt+0x7950>
   1971c:	bl	11bb8 <__errno_location@plt>
   19720:	mov	r3, #12
   19724:	str	r3, [r0]
   19728:	mov	r0, r5
   1972c:	add	sp, sp, #128	; 0x80
   19730:	pop	{r4, r5, r6, r7, r8, pc}
   19734:	bl	1ad20 <__assert_fail@plt+0x8fac>
   19738:	mov	r5, #0
   1973c:	mov	r0, r5
   19740:	add	sp, sp, #128	; 0x80
   19744:	pop	{r4, r5, r6, r7, r8, pc}
   19748:	mov	r3, #0
   1974c:	cmp	r5, #0
   19750:	strb	r3, [r6, r1]
   19754:	beq	1979c <__assert_fail@plt+0x7a28>
   19758:	add	r1, r1, #1
   1975c:	cmp	r4, r1
   19760:	bls	1973c <__assert_fail@plt+0x79c8>
   19764:	mov	r0, r5
   19768:	bl	22f08 <_obstack_memory_used@@Base+0x3a7c>
   1976c:	cmp	r0, #0
   19770:	movne	r5, r0
   19774:	mov	r0, r5
   19778:	add	sp, sp, #128	; 0x80
   1977c:	pop	{r4, r5, r6, r7, r8, pc}
   19780:	bl	11bb8 <__errno_location@plt>
   19784:	mov	r5, #0
   19788:	mov	r3, #12
   1978c:	str	r3, [r0]
   19790:	mov	r0, r5
   19794:	add	sp, sp, #128	; 0x80
   19798:	pop	{r4, r5, r6, r7, r8, pc}
   1979c:	add	r4, r1, #1
   197a0:	mov	r0, r4
   197a4:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   197a8:	subs	r5, r0, #0
   197ac:	beq	1973c <__assert_fail@plt+0x79c8>
   197b0:	mov	r2, r4
   197b4:	mov	r1, r6
   197b8:	bl	11930 <memcpy@plt>
   197bc:	mov	r5, r0
   197c0:	b	1973c <__assert_fail@plt+0x79c8>
   197c4:	andeq	r0, r0, r1, lsl #8
   197c8:	mov	r0, #1
   197cc:	b	1908c <__assert_fail@plt+0x7318>
   197d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197d4:	mov	r5, r1
   197d8:	sub	sp, sp, #12
   197dc:	mov	r4, r2
   197e0:	str	r2, [sp]
   197e4:	mov	r7, r3
   197e8:	mov	sl, r0
   197ec:	bl	11b94 <strlen@plt>
   197f0:	ldr	fp, [r5]
   197f4:	cmp	fp, #0
   197f8:	beq	198c0 <__assert_fail@plt+0x7b4c>
   197fc:	mov	r3, #0
   19800:	mov	r8, r0
   19804:	str	r3, [sp, #4]
   19808:	mov	r6, r3
   1980c:	mvn	r9, #0
   19810:	b	1983c <__assert_fail@plt+0x7ac8>
   19814:	bl	1196c <memcmp@plt>
   19818:	ldr	r3, [sp, #4]
   1981c:	cmp	r0, #0
   19820:	movne	r3, #1
   19824:	str	r3, [sp, #4]
   19828:	ldr	fp, [r5, #4]!
   1982c:	add	r6, r6, #1
   19830:	cmp	fp, #0
   19834:	add	r4, r4, r7
   19838:	beq	19898 <__assert_fail@plt+0x7b24>
   1983c:	mov	r2, r8
   19840:	mov	r1, sl
   19844:	mov	r0, fp
   19848:	bl	11d20 <strncmp@plt>
   1984c:	cmp	r0, #0
   19850:	mov	r0, fp
   19854:	bne	19828 <__assert_fail@plt+0x7ab4>
   19858:	bl	11b94 <strlen@plt>
   1985c:	ldr	r3, [sp]
   19860:	mov	r2, r7
   19864:	mov	r1, r4
   19868:	cmp	r8, r0
   1986c:	mla	r0, r7, r9, r3
   19870:	beq	198b0 <__assert_fail@plt+0x7b3c>
   19874:	cmn	r9, #1
   19878:	moveq	r9, r6
   1987c:	beq	19828 <__assert_fail@plt+0x7ab4>
   19880:	ldr	r3, [sp]
   19884:	cmp	r3, #0
   19888:	bne	19814 <__assert_fail@plt+0x7aa0>
   1988c:	mov	r3, #1
   19890:	str	r3, [sp, #4]
   19894:	b	19828 <__assert_fail@plt+0x7ab4>
   19898:	ldr	r3, [sp, #4]
   1989c:	cmp	r3, #0
   198a0:	mvnne	r9, #1
   198a4:	mov	r0, r9
   198a8:	add	sp, sp, #12
   198ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198b0:	mov	r9, r6
   198b4:	mov	r0, r9
   198b8:	add	sp, sp, #12
   198bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198c0:	mvn	r9, #0
   198c4:	b	198a4 <__assert_fail@plt+0x7b30>
   198c8:	push	{r4, r5, r6, lr}
   198cc:	mov	r6, r0
   198d0:	ldr	r0, [r1]
   198d4:	cmp	r0, #0
   198d8:	beq	19910 <__assert_fail@plt+0x7b9c>
   198dc:	mov	r4, r1
   198e0:	mov	r5, #0
   198e4:	b	198f8 <__assert_fail@plt+0x7b84>
   198e8:	ldr	r0, [r4, #4]!
   198ec:	add	r5, r5, #1
   198f0:	cmp	r0, #0
   198f4:	beq	19910 <__assert_fail@plt+0x7b9c>
   198f8:	mov	r1, r6
   198fc:	bl	118a0 <strcmp@plt>
   19900:	cmp	r0, #0
   19904:	bne	198e8 <__assert_fail@plt+0x7b74>
   19908:	mov	r0, r5
   1990c:	pop	{r4, r5, r6, pc}
   19910:	mvn	r0, #0
   19914:	pop	{r4, r5, r6, pc}
   19918:	cmn	r2, #1
   1991c:	push	{r4, r5, r6, lr}
   19920:	mov	r2, #5
   19924:	sub	sp, sp, #8
   19928:	mov	r4, r1
   1992c:	mov	r5, r0
   19930:	ldreq	r1, [pc, #76]	; 19984 <__assert_fail@plt+0x7c10>
   19934:	ldrne	r1, [pc, #76]	; 19988 <__assert_fail@plt+0x7c14>
   19938:	mov	r0, #0
   1993c:	bl	11984 <dcgettext@plt>
   19940:	mov	r2, r4
   19944:	mov	r1, #8
   19948:	mov	r6, r0
   1994c:	mov	r0, #0
   19950:	bl	210d4 <_obstack_memory_used@@Base+0x1c48>
   19954:	mov	r1, r5
   19958:	mov	r4, r0
   1995c:	mov	r0, #1
   19960:	bl	21370 <_obstack_memory_used@@Base+0x1ee4>
   19964:	mov	r1, #0
   19968:	mov	r3, r4
   1996c:	mov	r2, r6
   19970:	str	r0, [sp]
   19974:	mov	r0, r1
   19978:	bl	11a8c <error@plt>
   1997c:	add	sp, sp, #8
   19980:	pop	{r4, r5, r6, pc}
   19984:	andeq	r7, r2, r0, lsr #27
   19988:			; <UNDEFINED> instruction: 0x00027dbc
   1998c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19990:	mov	r6, r0
   19994:	ldr	r9, [pc, #232]	; 19a84 <__assert_fail@plt+0x7d10>
   19998:	mov	r4, r1
   1999c:	mov	r7, r2
   199a0:	ldr	r1, [pc, #224]	; 19a88 <__assert_fail@plt+0x7d14>
   199a4:	mov	r2, #5
   199a8:	mov	r0, #0
   199ac:	bl	11984 <dcgettext@plt>
   199b0:	ldr	r1, [r9]
   199b4:	bl	11864 <fputs_unlocked@plt>
   199b8:	ldr	fp, [r6]
   199bc:	cmp	fp, #0
   199c0:	movne	r8, #0
   199c4:	movne	r5, r8
   199c8:	movne	sl, #1
   199cc:	bne	19a0c <__assert_fail@plt+0x7c98>
   199d0:	b	19a50 <__assert_fail@plt+0x7cdc>
   199d4:	mov	r0, fp
   199d8:	ldr	r8, [r9]
   199dc:	bl	21380 <_obstack_memory_used@@Base+0x1ef4>
   199e0:	ldr	r2, [pc, #164]	; 19a8c <__assert_fail@plt+0x7d18>
   199e4:	mov	r1, sl
   199e8:	mov	r3, r0
   199ec:	mov	r0, r8
   199f0:	bl	11c18 <__fprintf_chk@plt>
   199f4:	mov	r8, r4
   199f8:	ldr	fp, [r6, #4]!
   199fc:	add	r5, r5, #1
   19a00:	cmp	fp, #0
   19a04:	add	r4, r4, r7
   19a08:	beq	19a50 <__assert_fail@plt+0x7cdc>
   19a0c:	cmp	r5, #0
   19a10:	mov	r1, r4
   19a14:	mov	r2, r7
   19a18:	mov	r0, r8
   19a1c:	beq	199d4 <__assert_fail@plt+0x7c60>
   19a20:	bl	1196c <memcmp@plt>
   19a24:	cmp	r0, #0
   19a28:	bne	199d4 <__assert_fail@plt+0x7c60>
   19a2c:	mov	r0, fp
   19a30:	ldr	fp, [r9]
   19a34:	bl	21380 <_obstack_memory_used@@Base+0x1ef4>
   19a38:	ldr	r2, [pc, #80]	; 19a90 <__assert_fail@plt+0x7d1c>
   19a3c:	mov	r1, sl
   19a40:	mov	r3, r0
   19a44:	mov	r0, fp
   19a48:	bl	11c18 <__fprintf_chk@plt>
   19a4c:	b	199f8 <__assert_fail@plt+0x7c84>
   19a50:	ldr	r0, [r9]
   19a54:	ldr	r3, [r0, #20]
   19a58:	ldr	r2, [r0, #24]
   19a5c:	cmp	r3, r2
   19a60:	bcs	19a78 <__assert_fail@plt+0x7d04>
   19a64:	add	r1, r3, #1
   19a68:	mov	r2, #10
   19a6c:	str	r1, [r0, #20]
   19a70:	strb	r2, [r3]
   19a74:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a78:	mov	r1, #10
   19a7c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a80:	b	11c48 <__overflow@plt>
   19a84:	andeq	r9, r3, r0, lsr #6
   19a88:	ldrdeq	r7, [r2], -ip
   19a8c:	strdeq	r7, [r2], -r4
   19a90:	strdeq	r7, [r2], -ip
   19a94:	push	{r4, r5, r6, r7, r8, lr}
   19a98:	mov	r7, r0
   19a9c:	ldrb	ip, [sp, #32]
   19aa0:	mov	r5, r1
   19aa4:	mov	r4, r2
   19aa8:	cmp	ip, #0
   19aac:	mov	r6, r3
   19ab0:	beq	19b00 <__assert_fail@plt+0x7d8c>
   19ab4:	ldr	r3, [sp, #24]
   19ab8:	mov	r2, r6
   19abc:	mov	r1, r4
   19ac0:	mov	r0, r5
   19ac4:	bl	197d0 <__assert_fail@plt+0x7a5c>
   19ac8:	cmp	r0, #0
   19acc:	popge	{r4, r5, r6, r7, r8, pc}
   19ad0:	mov	r2, r0
   19ad4:	mov	r1, r5
   19ad8:	mov	r0, r7
   19adc:	bl	19918 <__assert_fail@plt+0x7ba4>
   19ae0:	mov	r0, r4
   19ae4:	ldr	r2, [sp, #24]
   19ae8:	mov	r1, r6
   19aec:	bl	1998c <__assert_fail@plt+0x7c18>
   19af0:	ldr	r3, [sp, #28]
   19af4:	blx	r3
   19af8:	mvn	r0, #0
   19afc:	pop	{r4, r5, r6, r7, r8, pc}
   19b00:	mov	r1, r2
   19b04:	mov	r0, r5
   19b08:	bl	198c8 <__assert_fail@plt+0x7b54>
   19b0c:	cmp	r0, #0
   19b10:	popge	{r4, r5, r6, r7, r8, pc}
   19b14:	b	19ad0 <__assert_fail@plt+0x7d5c>
   19b18:	push	{r4, r5, r6, r7, r8, lr}
   19b1c:	ldr	r7, [r1]
   19b20:	cmp	r7, #0
   19b24:	beq	19b64 <__assert_fail@plt+0x7df0>
   19b28:	mov	r6, r3
   19b2c:	mov	r8, r0
   19b30:	mov	r4, r2
   19b34:	mov	r5, r1
   19b38:	b	19b48 <__assert_fail@plt+0x7dd4>
   19b3c:	ldr	r7, [r5, #4]!
   19b40:	cmp	r7, #0
   19b44:	beq	19b64 <__assert_fail@plt+0x7df0>
   19b48:	mov	r1, r4
   19b4c:	mov	r2, r6
   19b50:	mov	r0, r8
   19b54:	bl	1196c <memcmp@plt>
   19b58:	add	r4, r4, r6
   19b5c:	cmp	r0, #0
   19b60:	bne	19b3c <__assert_fail@plt+0x7dc8>
   19b64:	mov	r0, r7
   19b68:	pop	{r4, r5, r6, r7, r8, pc}
   19b6c:	ldrb	r3, [r0]
   19b70:	cmp	r3, #47	; 0x2f
   19b74:	bne	19b84 <__assert_fail@plt+0x7e10>
   19b78:	ldrb	r3, [r0, #1]!
   19b7c:	cmp	r3, #47	; 0x2f
   19b80:	beq	19b78 <__assert_fail@plt+0x7e04>
   19b84:	cmp	r3, #0
   19b88:	bxeq	lr
   19b8c:	mov	r2, #0
   19b90:	push	{lr}		; (str lr, [sp, #-4]!)
   19b94:	mov	ip, r2
   19b98:	mov	r1, r0
   19b9c:	mov	lr, #1
   19ba0:	cmp	r3, #47	; 0x2f
   19ba4:	moveq	r2, lr
   19ba8:	beq	19bb8 <__assert_fail@plt+0x7e44>
   19bac:	cmp	r2, #0
   19bb0:	movne	r0, r1
   19bb4:	movne	r2, ip
   19bb8:	ldrb	r3, [r1, #1]!
   19bbc:	cmp	r3, #0
   19bc0:	bne	19ba0 <__assert_fail@plt+0x7e2c>
   19bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   19bc8:	push	{r4, lr}
   19bcc:	mov	r4, r0
   19bd0:	bl	11b94 <strlen@plt>
   19bd4:	cmp	r0, #1
   19bd8:	popls	{r4, pc}
   19bdc:	sub	r3, r0, #1
   19be0:	add	r2, r4, r3
   19be4:	ldrb	r1, [r4, r3]
   19be8:	cmp	r1, #47	; 0x2f
   19bec:	popne	{r4, pc}
   19bf0:	cmp	r3, #1
   19bf4:	beq	19c08 <__assert_fail@plt+0x7e94>
   19bf8:	ldrb	r1, [r2, #-1]!
   19bfc:	sub	r0, r3, #1
   19c00:	cmp	r1, #47	; 0x2f
   19c04:	beq	19c10 <__assert_fail@plt+0x7e9c>
   19c08:	mov	r0, r3
   19c0c:	pop	{r4, pc}
   19c10:	mov	r3, r0
   19c14:	b	19bf0 <__assert_fail@plt+0x7e7c>
   19c18:	cmp	r2, #0
   19c1c:	cmpne	r0, r1
   19c20:	beq	19c88 <__assert_fail@plt+0x7f14>
   19c24:	push	{lr}		; (str lr, [sp, #-4]!)
   19c28:	sub	r1, r1, #1
   19c2c:	sub	lr, r0, #1
   19c30:	b	19c3c <__assert_fail@plt+0x7ec8>
   19c34:	cmp	r0, r3
   19c38:	bne	19c80 <__assert_fail@plt+0x7f0c>
   19c3c:	ldrb	r0, [lr, #1]!
   19c40:	sub	r3, r0, #65	; 0x41
   19c44:	cmp	r3, #25
   19c48:	ldrb	r3, [r1, #1]!
   19c4c:	addls	r0, r0, #32
   19c50:	sub	ip, r3, #65	; 0x41
   19c54:	cmp	ip, #25
   19c58:	addls	r3, r3, #32
   19c5c:	subs	r2, r2, #1
   19c60:	moveq	ip, #1
   19c64:	movne	ip, #0
   19c68:	uxtb	r0, r0
   19c6c:	cmp	r0, #0
   19c70:	orreq	ip, ip, #1
   19c74:	cmp	ip, #0
   19c78:	uxtb	r3, r3
   19c7c:	beq	19c34 <__assert_fail@plt+0x7ec0>
   19c80:	sub	r0, r0, r3
   19c84:	pop	{pc}		; (ldr pc, [sp], #4)
   19c88:	mov	r0, #0
   19c8c:	bx	lr
   19c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c94:	and	r9, r1, #3
   19c98:	sub	r3, r9, #1
   19c9c:	sub	sp, sp, #3232	; 0xca0
   19ca0:	tst	r3, r9
   19ca4:	sub	sp, sp, #12
   19ca8:	bne	19e88 <__assert_fail@plt+0x8114>
   19cac:	cmp	r0, #0
   19cb0:	mov	r8, r0
   19cb4:	beq	19e88 <__assert_fail@plt+0x8114>
   19cb8:	ldrb	r6, [r0]
   19cbc:	cmp	r6, #0
   19cc0:	beq	19ec4 <__assert_fail@plt+0x8150>
   19cc4:	add	fp, sp, #2208	; 0x8a0
   19cc8:	mov	r5, r1
   19ccc:	add	r3, sp, #1184	; 0x4a0
   19cd0:	mov	r1, #1024	; 0x400
   19cd4:	add	fp, fp, #8
   19cd8:	add	sl, sp, #152	; 0x98
   19cdc:	cmp	r6, #47	; 0x2f
   19ce0:	str	r3, [sp, #1176]	; 0x498
   19ce4:	str	r1, [sp, #1180]	; 0x49c
   19ce8:	str	r1, [sp, #2212]	; 0x8a4
   19cec:	str	r1, [sp, #148]	; 0x94
   19cf0:	str	fp, [sp, #2208]	; 0x8a0
   19cf4:	str	sl, [sp, #144]	; 0x90
   19cf8:	beq	19da4 <__assert_fail@plt+0x8030>
   19cfc:	mov	r4, sl
   19d00:	sub	r6, sl, #8
   19d04:	mov	r0, r4
   19d08:	bl	11b64 <getcwd@plt>
   19d0c:	cmp	r0, #0
   19d10:	bne	1a070 <__assert_fail@plt+0x82fc>
   19d14:	bl	11bb8 <__errno_location@plt>
   19d18:	ldr	r3, [r0]
   19d1c:	cmp	r3, #12
   19d20:	beq	19e84 <__assert_fail@plt+0x8110>
   19d24:	cmp	r3, #34	; 0x22
   19d28:	beq	19d88 <__assert_fail@plt+0x8014>
   19d2c:	mov	r5, r4
   19d30:	mov	r6, #1
   19d34:	ldr	r0, [sp, #1176]	; 0x498
   19d38:	add	r3, sp, #1184	; 0x4a0
   19d3c:	cmp	r0, r3
   19d40:	beq	19d48 <__assert_fail@plt+0x7fd4>
   19d44:	bl	1ad20 <__assert_fail@plt+0x8fac>
   19d48:	ldr	r0, [sp, #2208]	; 0x8a0
   19d4c:	cmp	r0, fp
   19d50:	beq	19d58 <__assert_fail@plt+0x7fe4>
   19d54:	bl	1ad20 <__assert_fail@plt+0x8fac>
   19d58:	cmp	r6, #0
   19d5c:	beq	19ea8 <__assert_fail@plt+0x8134>
   19d60:	ldr	r0, [sp, #144]	; 0x90
   19d64:	cmp	r0, sl
   19d68:	moveq	r6, #0
   19d6c:	beq	19d78 <__assert_fail@plt+0x8004>
   19d70:	bl	1ad20 <__assert_fail@plt+0x8fac>
   19d74:	mov	r6, #0
   19d78:	mov	r0, r6
   19d7c:	add	sp, sp, #3232	; 0xca0
   19d80:	add	sp, sp, #12
   19d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d88:	mov	r0, r6
   19d8c:	bl	213e8 <_obstack_memory_used@@Base+0x1f5c>
   19d90:	cmp	r0, #0
   19d94:	beq	19e84 <__assert_fail@plt+0x8110>
   19d98:	ldr	r4, [sp, #144]	; 0x90
   19d9c:	ldr	r1, [sp, #148]	; 0x94
   19da0:	b	19d04 <__assert_fail@plt+0x7f90>
   19da4:	mov	r4, sl
   19da8:	add	r0, sl, #1
   19dac:	strb	r6, [sp, #152]	; 0x98
   19db0:	mov	r3, #0
   19db4:	and	r2, r5, #4
   19db8:	str	r3, [sp, #24]
   19dbc:	str	r2, [sp, #8]
   19dc0:	str	r3, [sp, #12]
   19dc4:	str	r3, [sp, #16]
   19dc8:	str	r9, [sp, #20]
   19dcc:	cmp	r6, #0
   19dd0:	beq	1a1d4 <__assert_fail@plt+0x8460>
   19dd4:	cmp	r6, #47	; 0x2f
   19dd8:	bne	19df0 <__assert_fail@plt+0x807c>
   19ddc:	ldrb	r6, [r8, #1]!
   19de0:	cmp	r6, #47	; 0x2f
   19de4:	beq	19ddc <__assert_fail@plt+0x8068>
   19de8:	cmp	r6, #0
   19dec:	beq	1a1d4 <__assert_fail@plt+0x8460>
   19df0:	mov	r5, r8
   19df4:	ldrb	r3, [r5, #1]!
   19df8:	cmp	r3, #0
   19dfc:	cmpne	r3, #47	; 0x2f
   19e00:	bne	19df4 <__assert_fail@plt+0x8080>
   19e04:	subs	r7, r5, r8
   19e08:	beq	1a1d4 <__assert_fail@plt+0x8460>
   19e0c:	cmp	r7, #1
   19e10:	beq	19f94 <__assert_fail@plt+0x8220>
   19e14:	cmp	r7, #2
   19e18:	cmpeq	r6, #46	; 0x2e
   19e1c:	beq	19ed4 <__assert_fail@plt+0x8160>
   19e20:	ldrb	r3, [r0, #-1]
   19e24:	add	r6, r7, #2
   19e28:	cmp	r3, #47	; 0x2f
   19e2c:	movne	r3, #47	; 0x2f
   19e30:	strbne	r3, [r0]
   19e34:	ldr	r3, [sp, #148]	; 0x94
   19e38:	addne	r0, r0, #1
   19e3c:	add	r3, r4, r3
   19e40:	sub	r3, r3, r0
   19e44:	cmp	r3, r6
   19e48:	bcs	19f2c <__assert_fail@plt+0x81b8>
   19e4c:	mov	r9, r0
   19e50:	b	19e70 <__assert_fail@plt+0x80fc>
   19e54:	ldr	r3, [sp, #148]	; 0x94
   19e58:	ldr	r4, [sp, #144]	; 0x90
   19e5c:	sub	r3, r3, r9
   19e60:	cmp	r3, r6
   19e64:	add	r9, r4, r9
   19e68:	mov	r0, r9
   19e6c:	bcs	19f2c <__assert_fail@plt+0x81b8>
   19e70:	add	r0, sp, #144	; 0x90
   19e74:	bl	21454 <_obstack_memory_used@@Base+0x1fc8>
   19e78:	sub	r9, r9, r4
   19e7c:	cmp	r0, #0
   19e80:	bne	19e54 <__assert_fail@plt+0x80e0>
   19e84:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   19e88:	bl	11bb8 <__errno_location@plt>
   19e8c:	mov	r6, #0
   19e90:	mov	r3, #22
   19e94:	str	r3, [r0]
   19e98:	mov	r0, r6
   19e9c:	add	sp, sp, #3232	; 0xca0
   19ea0:	add	sp, sp, #12
   19ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ea8:	strb	r6, [r4], #1
   19eac:	sub	r0, sl, #8
   19eb0:	sub	r1, r4, r5
   19eb4:	bl	21398 <_obstack_memory_used@@Base+0x1f0c>
   19eb8:	subs	r6, r0, #0
   19ebc:	bne	19d78 <__assert_fail@plt+0x8004>
   19ec0:	b	19e84 <__assert_fail@plt+0x8110>
   19ec4:	bl	11bb8 <__errno_location@plt>
   19ec8:	mov	r3, #2
   19ecc:	str	r3, [r0]
   19ed0:	b	19d78 <__assert_fail@plt+0x8004>
   19ed4:	ldrb	r3, [r8, #1]
   19ed8:	cmp	r3, #46	; 0x2e
   19edc:	bne	19e20 <__assert_fail@plt+0x80ac>
   19ee0:	add	r3, r4, #1
   19ee4:	cmp	r0, r3
   19ee8:	bls	19f20 <__assert_fail@plt+0x81ac>
   19eec:	sub	r3, r0, #1
   19ef0:	cmp	r4, r3
   19ef4:	bcs	1a334 <__assert_fail@plt+0x85c0>
   19ef8:	ldrb	r2, [r0, #-2]
   19efc:	cmp	r2, #47	; 0x2f
   19f00:	beq	1a334 <__assert_fail@plt+0x85c0>
   19f04:	sub	r3, r0, #2
   19f08:	cmp	r3, r4
   19f0c:	mov	r0, r3
   19f10:	beq	19f20 <__assert_fail@plt+0x81ac>
   19f14:	ldrb	r2, [r3, #-1]!
   19f18:	cmp	r2, #47	; 0x2f
   19f1c:	bne	19f08 <__assert_fail@plt+0x8194>
   19f20:	ldrb	r6, [r5]
   19f24:	mov	r8, r5
   19f28:	b	19dcc <__assert_fail@plt+0x8058>
   19f2c:	mov	r2, r7
   19f30:	mov	r1, r8
   19f34:	bl	11b40 <mempcpy@plt>
   19f38:	ldr	r3, [sp, #8]
   19f3c:	cmp	r3, #0
   19f40:	mov	r3, #0
   19f44:	str	r0, [sp, #28]
   19f48:	strb	r3, [r0]
   19f4c:	bne	19fa0 <__assert_fail@plt+0x822c>
   19f50:	sub	r3, fp, #8
   19f54:	mov	r9, r3
   19f58:	str	r5, [sp, #32]
   19f5c:	ldr	r6, [sp, #2212]	; 0x8a4
   19f60:	ldr	r5, [sp, #2208]	; 0x8a0
   19f64:	sub	r6, r6, #1
   19f68:	mov	r2, r6
   19f6c:	mov	r1, r5
   19f70:	mov	r0, r4
   19f74:	bl	11a08 <readlink@plt>
   19f78:	cmp	r6, r0
   19f7c:	bgt	1a084 <__assert_fail@plt+0x8310>
   19f80:	mov	r0, r9
   19f84:	bl	213e8 <_obstack_memory_used@@Base+0x1f5c>
   19f88:	cmp	r0, #0
   19f8c:	bne	19f5c <__assert_fail@plt+0x81e8>
   19f90:	b	19e84 <__assert_fail@plt+0x8110>
   19f94:	cmp	r6, #46	; 0x2e
   19f98:	bne	19e20 <__assert_fail@plt+0x80ac>
   19f9c:	b	19f20 <__assert_fail@plt+0x81ac>
   19fa0:	ldr	r3, [sp, #20]
   19fa4:	cmp	r3, #2
   19fa8:	beq	1a068 <__assert_fail@plt+0x82f4>
   19fac:	ldrb	r2, [r5]
   19fb0:	mov	r3, r5
   19fb4:	mov	r1, r2
   19fb8:	cmp	r1, #47	; 0x2f
   19fbc:	beq	19fc8 <__assert_fail@plt+0x8254>
   19fc0:	b	1a010 <__assert_fail@plt+0x829c>
   19fc4:	mov	r3, r0
   19fc8:	ldrb	r1, [r3, #1]
   19fcc:	add	r0, r3, #1
   19fd0:	cmp	r1, #47	; 0x2f
   19fd4:	beq	19fc4 <__assert_fail@plt+0x8250>
   19fd8:	cmp	r1, #0
   19fdc:	add	r3, r3, #2
   19fe0:	beq	1a2a8 <__assert_fail@plt+0x8534>
   19fe4:	cmp	r1, #46	; 0x2e
   19fe8:	bne	1a010 <__assert_fail@plt+0x829c>
   19fec:	ldrb	r1, [r0, #1]
   19ff0:	cmp	r1, #0
   19ff4:	beq	1a2a8 <__assert_fail@plt+0x8534>
   19ff8:	cmp	r1, #46	; 0x2e
   19ffc:	bne	19fb8 <__assert_fail@plt+0x8244>
   1a000:	ldrb	r3, [r0, #2]
   1a004:	cmp	r3, #47	; 0x2f
   1a008:	cmpne	r3, #0
   1a00c:	beq	1a2a8 <__assert_fail@plt+0x8534>
   1a010:	ldr	r3, [sp, #8]
   1a014:	cmp	r3, #0
   1a018:	bne	1a2e8 <__assert_fail@plt+0x8574>
   1a01c:	bl	11bb8 <__errno_location@plt>
   1a020:	ldr	r6, [r0]
   1a024:	subs	r6, r6, #22
   1a028:	movne	r6, #1
   1a02c:	cmp	r6, #0
   1a030:	beq	1a068 <__assert_fail@plt+0x82f4>
   1a034:	ldr	r3, [sp, #20]
   1a038:	cmp	r3, #1
   1a03c:	bne	1a33c <__assert_fail@plt+0x85c8>
   1a040:	bl	11bb8 <__errno_location@plt>
   1a044:	ldr	r3, [r0]
   1a048:	cmp	r3, #2
   1a04c:	bne	1a33c <__assert_fail@plt+0x85c8>
   1a050:	ldr	r1, [pc, #752]	; 1a348 <__assert_fail@plt+0x85d4>
   1a054:	mov	r0, r5
   1a058:	bl	11d68 <strspn@plt>
   1a05c:	ldrb	r3, [r5, r0]
   1a060:	cmp	r3, #0
   1a064:	bne	1a33c <__assert_fail@plt+0x85c8>
   1a068:	ldr	r0, [sp, #28]
   1a06c:	b	19f20 <__assert_fail@plt+0x81ac>
   1a070:	mov	r1, #0
   1a074:	mov	r0, r4
   1a078:	bl	119d8 <rawmemchr@plt>
   1a07c:	ldrb	r6, [r8]
   1a080:	b	19db0 <__assert_fail@plt+0x803c>
   1a084:	cmp	r0, #0
   1a088:	mov	r9, r5
   1a08c:	mov	r6, r0
   1a090:	ldr	r5, [sp, #32]
   1a094:	blt	19fa0 <__assert_fail@plt+0x822c>
   1a098:	ldr	r3, [sp, #16]
   1a09c:	cmp	r3, #19
   1a0a0:	addle	r3, r3, #1
   1a0a4:	strle	r3, [sp, #16]
   1a0a8:	ble	1a16c <__assert_fail@plt+0x83f8>
   1a0ac:	ldrb	r3, [r8]
   1a0b0:	cmp	r3, #0
   1a0b4:	beq	1a16c <__assert_fail@plt+0x83f8>
   1a0b8:	ldr	r2, [sp, #28]
   1a0bc:	rsb	r7, r7, #0
   1a0c0:	mov	r3, #0
   1a0c4:	strb	r3, [r2, r7]
   1a0c8:	ldrb	r1, [r4]
   1a0cc:	add	r3, sp, #40	; 0x28
   1a0d0:	mov	r2, r3
   1a0d4:	cmp	r1, #0
   1a0d8:	ldr	r3, [pc, #620]	; 1a34c <__assert_fail@plt+0x85d8>
   1a0dc:	movne	r3, r4
   1a0e0:	mov	r1, r3
   1a0e4:	mov	r0, #3
   1a0e8:	bl	11cfc <__xstat64@plt>
   1a0ec:	cmp	r0, #0
   1a0f0:	bne	1a13c <__assert_fail@plt+0x83c8>
   1a0f4:	ldrb	r3, [r8]
   1a0f8:	ldr	r1, [sp, #24]
   1a0fc:	ldr	r2, [sp, #28]
   1a100:	cmp	r1, #0
   1a104:	strb	r3, [r2, r7]
   1a108:	beq	1a2f8 <__assert_fail@plt+0x8584>
   1a10c:	add	r2, sp, #40	; 0x28
   1a110:	mov	r1, r8
   1a114:	ldr	r0, [sp, #24]
   1a118:	bl	1a5a0 <__assert_fail@plt+0x882c>
   1a11c:	cmp	r0, #0
   1a120:	beq	1a15c <__assert_fail@plt+0x83e8>
   1a124:	ldr	r3, [sp, #20]
   1a128:	cmp	r3, #2
   1a12c:	beq	1a068 <__assert_fail@plt+0x82f4>
   1a130:	bl	11bb8 <__errno_location@plt>
   1a134:	mov	r3, #40	; 0x28
   1a138:	str	r3, [r0]
   1a13c:	mov	r5, r4
   1a140:	ldr	r4, [sp, #28]
   1a144:	mov	r6, #1
   1a148:	ldr	r0, [sp, #24]
   1a14c:	cmp	r0, #0
   1a150:	beq	19d34 <__assert_fail@plt+0x7fc0>
   1a154:	bl	1b88c <__assert_fail@plt+0x9b18>
   1a158:	b	19d34 <__assert_fail@plt+0x7fc0>
   1a15c:	add	r2, sp, #40	; 0x28
   1a160:	mov	r1, r8
   1a164:	ldr	r0, [sp, #24]
   1a168:	bl	1a538 <__assert_fail@plt+0x87c4>
   1a16c:	ldr	r2, [sp, #12]
   1a170:	mov	r3, #0
   1a174:	cmp	r2, r3
   1a178:	strb	r3, [r9, r6]
   1a17c:	ldr	r8, [sp, #1176]	; 0x498
   1a180:	ldreq	r3, [sp, #12]
   1a184:	subne	r3, r5, r8
   1a188:	mov	r0, r5
   1a18c:	str	r3, [sp, #36]	; 0x24
   1a190:	bl	11b94 <strlen@plt>
   1a194:	adds	r7, r6, r0
   1a198:	str	r0, [sp, #32]
   1a19c:	bcs	19e84 <__assert_fail@plt+0x8110>
   1a1a0:	ldr	r3, [sp, #1180]	; 0x49c
   1a1a4:	cmp	r3, r7
   1a1a8:	bls	1a1bc <__assert_fail@plt+0x8448>
   1a1ac:	b	1a200 <__assert_fail@plt+0x848c>
   1a1b0:	ldr	r3, [sp, #1180]	; 0x49c
   1a1b4:	cmp	r7, r3
   1a1b8:	bcc	1a1fc <__assert_fail@plt+0x8488>
   1a1bc:	add	r0, sp, #1168	; 0x490
   1a1c0:	add	r0, r0, #8
   1a1c4:	bl	21454 <_obstack_memory_used@@Base+0x1fc8>
   1a1c8:	cmp	r0, #0
   1a1cc:	bne	1a1b0 <__assert_fail@plt+0x843c>
   1a1d0:	b	19e84 <__assert_fail@plt+0x8110>
   1a1d4:	add	r3, r4, #1
   1a1d8:	cmp	r0, r3
   1a1dc:	bls	1a298 <__assert_fail@plt+0x8524>
   1a1e0:	ldrb	r3, [r0, #-1]
   1a1e4:	mov	r5, r4
   1a1e8:	mov	r6, #0
   1a1ec:	cmp	r3, #47	; 0x2f
   1a1f0:	subeq	r4, r0, #1
   1a1f4:	movne	r4, r0
   1a1f8:	b	1a148 <__assert_fail@plt+0x83d4>
   1a1fc:	ldr	r8, [sp, #1176]	; 0x498
   1a200:	ldr	r3, [sp, #12]
   1a204:	add	r0, r8, r6
   1a208:	cmp	r3, #0
   1a20c:	ldrne	r3, [sp, #36]	; 0x24
   1a210:	addne	r5, r8, r3
   1a214:	ldr	r3, [sp, #32]
   1a218:	mov	r1, r5
   1a21c:	add	r2, r3, #1
   1a220:	bl	118f4 <memmove@plt>
   1a224:	mov	r2, r6
   1a228:	mov	r1, r9
   1a22c:	mov	r0, r8
   1a230:	bl	11930 <memcpy@plt>
   1a234:	ldrb	r3, [r9]
   1a238:	cmp	r3, #47	; 0x2f
   1a23c:	mov	r5, r0
   1a240:	beq	1a320 <__assert_fail@plt+0x85ac>
   1a244:	ldr	r2, [sp, #28]
   1a248:	add	r3, r4, #1
   1a24c:	cmp	r2, r3
   1a250:	bls	1a2d8 <__assert_fail@plt+0x8564>
   1a254:	sub	r0, r2, #1
   1a258:	cmp	r0, r4
   1a25c:	bls	1a28c <__assert_fail@plt+0x8518>
   1a260:	ldrb	r3, [r2, #-2]
   1a264:	cmp	r3, #47	; 0x2f
   1a268:	beq	1a28c <__assert_fail@plt+0x8518>
   1a26c:	sub	r3, r2, #2
   1a270:	cmp	r4, r3
   1a274:	mov	r0, r3
   1a278:	beq	1a28c <__assert_fail@plt+0x8518>
   1a27c:	ldrb	r2, [r3, #-1]
   1a280:	sub	r3, r3, #1
   1a284:	cmp	r2, #47	; 0x2f
   1a288:	bne	1a270 <__assert_fail@plt+0x84fc>
   1a28c:	mov	r3, #1
   1a290:	str	r3, [sp, #12]
   1a294:	b	19f20 <__assert_fail@plt+0x81ac>
   1a298:	mov	r5, r4
   1a29c:	mov	r6, #0
   1a2a0:	mov	r4, r0
   1a2a4:	b	1a148 <__assert_fail@plt+0x83d4>
   1a2a8:	ldr	r3, [pc, #152]	; 1a348 <__assert_fail@plt+0x85d4>
   1a2ac:	ldr	r0, [sp, #28]
   1a2b0:	mov	r2, #0
   1a2b4:	ldrh	r1, [r3]
   1a2b8:	mov	r3, #512	; 0x200
   1a2bc:	strh	r1, [r0]
   1a2c0:	mov	r1, r4
   1a2c4:	mvn	r0, #99	; 0x63
   1a2c8:	bl	1190c <faccessat@plt>
   1a2cc:	adds	r6, r0, #0
   1a2d0:	movne	r6, #1
   1a2d4:	b	1a02c <__assert_fail@plt+0x82b8>
   1a2d8:	mov	r3, #1
   1a2dc:	ldr	r0, [sp, #28]
   1a2e0:	str	r3, [sp, #12]
   1a2e4:	b	19f20 <__assert_fail@plt+0x81ac>
   1a2e8:	cmp	r2, #0
   1a2ec:	bne	1a068 <__assert_fail@plt+0x82f4>
   1a2f0:	mov	r3, #512	; 0x200
   1a2f4:	b	1a2c0 <__assert_fail@plt+0x854c>
   1a2f8:	ldr	r3, [pc, #80]	; 1a350 <__assert_fail@plt+0x85dc>
   1a2fc:	ldr	r2, [pc, #80]	; 1a354 <__assert_fail@plt+0x85e0>
   1a300:	str	r3, [sp]
   1a304:	mov	r0, #7
   1a308:	ldr	r3, [pc, #72]	; 1a358 <__assert_fail@plt+0x85e4>
   1a30c:	bl	1b690 <__assert_fail@plt+0x991c>
   1a310:	subs	r3, r0, #0
   1a314:	str	r3, [sp, #24]
   1a318:	bne	1a10c <__assert_fail@plt+0x8398>
   1a31c:	b	19e84 <__assert_fail@plt+0x8110>
   1a320:	strb	r3, [r4]
   1a324:	mov	r3, #1
   1a328:	add	r0, r4, #1
   1a32c:	str	r3, [sp, #12]
   1a330:	b	19f20 <__assert_fail@plt+0x81ac>
   1a334:	mov	r0, r3
   1a338:	b	19f20 <__assert_fail@plt+0x81ac>
   1a33c:	mov	r5, r4
   1a340:	ldr	r4, [sp, #28]
   1a344:	b	1a148 <__assert_fail@plt+0x83d4>
   1a348:			; <UNDEFINED> instruction: 0x000278b4
   1a34c:	andeq	r7, r2, r4, ror #16
   1a350:	andeq	fp, r1, ip, asr #28
   1a354:	andeq	fp, r1, r8, asr #27
   1a358:	andeq	fp, r1, r0, lsl #28
   1a35c:	ldr	r3, [pc, #4]	; 1a368 <__assert_fail@plt+0x85f4>
   1a360:	str	r0, [r3]
   1a364:	bx	lr
   1a368:	andeq	sl, r3, ip, asr #7
   1a36c:	ldr	r3, [pc, #4]	; 1a378 <__assert_fail@plt+0x8604>
   1a370:	strb	r0, [r3, #4]
   1a374:	bx	lr
   1a378:	andeq	sl, r3, ip, asr #7
   1a37c:	ldr	r3, [pc, #192]	; 1a444 <__assert_fail@plt+0x86d0>
   1a380:	push	{r4, r5, r6, lr}
   1a384:	sub	sp, sp, #8
   1a388:	ldr	r0, [r3]
   1a38c:	bl	22f64 <_obstack_memory_used@@Base+0x3ad8>
   1a390:	cmp	r0, #0
   1a394:	beq	1a3b8 <__assert_fail@plt+0x8644>
   1a398:	ldr	r4, [pc, #168]	; 1a448 <__assert_fail@plt+0x86d4>
   1a39c:	ldrb	r3, [r4, #4]
   1a3a0:	cmp	r3, #0
   1a3a4:	beq	1a3d4 <__assert_fail@plt+0x8660>
   1a3a8:	bl	11bb8 <__errno_location@plt>
   1a3ac:	ldr	r3, [r0]
   1a3b0:	cmp	r3, #32
   1a3b4:	bne	1a3d4 <__assert_fail@plt+0x8660>
   1a3b8:	ldr	r3, [pc, #140]	; 1a44c <__assert_fail@plt+0x86d8>
   1a3bc:	ldr	r0, [r3]
   1a3c0:	bl	22f64 <_obstack_memory_used@@Base+0x3ad8>
   1a3c4:	cmp	r0, #0
   1a3c8:	bne	1a41c <__assert_fail@plt+0x86a8>
   1a3cc:	add	sp, sp, #8
   1a3d0:	pop	{r4, r5, r6, pc}
   1a3d4:	mov	r2, #5
   1a3d8:	ldr	r1, [pc, #112]	; 1a450 <__assert_fail@plt+0x86dc>
   1a3dc:	mov	r0, #0
   1a3e0:	bl	11984 <dcgettext@plt>
   1a3e4:	ldr	r4, [r4]
   1a3e8:	cmp	r4, #0
   1a3ec:	mov	r5, r0
   1a3f0:	beq	1a428 <__assert_fail@plt+0x86b4>
   1a3f4:	bl	11bb8 <__errno_location@plt>
   1a3f8:	ldr	r6, [r0]
   1a3fc:	mov	r0, r4
   1a400:	bl	211e8 <_obstack_memory_used@@Base+0x1d5c>
   1a404:	mov	r1, r6
   1a408:	str	r5, [sp]
   1a40c:	ldr	r2, [pc, #64]	; 1a454 <__assert_fail@plt+0x86e0>
   1a410:	mov	r3, r0
   1a414:	mov	r0, #0
   1a418:	bl	11a8c <error@plt>
   1a41c:	ldr	r3, [pc, #52]	; 1a458 <__assert_fail@plt+0x86e4>
   1a420:	ldr	r0, [r3]
   1a424:	bl	11924 <_exit@plt>
   1a428:	bl	11bb8 <__errno_location@plt>
   1a42c:	mov	r3, r5
   1a430:	ldr	r2, [pc, #36]	; 1a45c <__assert_fail@plt+0x86e8>
   1a434:	ldr	r1, [r0]
   1a438:	mov	r0, r4
   1a43c:	bl	11a8c <error@plt>
   1a440:	b	1a41c <__assert_fail@plt+0x86a8>
   1a444:	andeq	r9, r3, r4, lsr #6
   1a448:	andeq	sl, r3, ip, asr #7
   1a44c:	andeq	r9, r3, r0, lsr #6
   1a450:	andeq	r7, r2, r4, lsl #28
   1a454:	muleq	r2, r0, r5
   1a458:	andeq	r9, r3, r4, asr #5
   1a45c:	andeq	r7, r2, ip, lsl #13
   1a460:	push	{r4, r5, r6, lr}
   1a464:	mov	r5, r0
   1a468:	ldrb	r4, [r0]
   1a46c:	bl	19b6c <__assert_fail@plt+0x7df8>
   1a470:	sub	r4, r4, #47	; 0x2f
   1a474:	clz	r4, r4
   1a478:	lsr	r4, r4, #5
   1a47c:	sub	r0, r0, r5
   1a480:	cmp	r0, r4
   1a484:	bls	1a4d0 <__assert_fail@plt+0x875c>
   1a488:	sub	r3, r0, #1
   1a48c:	add	r2, r5, r3
   1a490:	ldrb	r1, [r5, r3]
   1a494:	cmp	r1, #47	; 0x2f
   1a498:	beq	1a4b4 <__assert_fail@plt+0x8740>
   1a49c:	b	1a4d0 <__assert_fail@plt+0x875c>
   1a4a0:	ldrb	r1, [r2, #-1]!
   1a4a4:	sub	r0, r3, #1
   1a4a8:	cmp	r1, #47	; 0x2f
   1a4ac:	bne	1a4c4 <__assert_fail@plt+0x8750>
   1a4b0:	mov	r3, r0
   1a4b4:	cmp	r4, r3
   1a4b8:	bne	1a4a0 <__assert_fail@plt+0x872c>
   1a4bc:	mov	r0, r4
   1a4c0:	pop	{r4, r5, r6, pc}
   1a4c4:	mov	r4, r3
   1a4c8:	mov	r0, r4
   1a4cc:	pop	{r4, r5, r6, pc}
   1a4d0:	mov	r4, r0
   1a4d4:	b	1a4bc <__assert_fail@plt+0x8748>
   1a4d8:	push	{r4, r5, r6, lr}
   1a4dc:	mov	r6, r0
   1a4e0:	bl	1a460 <__assert_fail@plt+0x86ec>
   1a4e4:	add	r3, r0, #1
   1a4e8:	mov	r4, r0
   1a4ec:	cmp	r0, #0
   1a4f0:	movne	r0, r3
   1a4f4:	addeq	r0, r3, #1
   1a4f8:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   1a4fc:	subs	r5, r0, #0
   1a500:	beq	1a528 <__assert_fail@plt+0x87b4>
   1a504:	mov	r2, r4
   1a508:	mov	r1, r6
   1a50c:	bl	11930 <memcpy@plt>
   1a510:	cmp	r4, #0
   1a514:	moveq	r3, #46	; 0x2e
   1a518:	moveq	r4, #1
   1a51c:	strbeq	r3, [r5]
   1a520:	mov	r3, #0
   1a524:	strb	r3, [r5, r4]
   1a528:	mov	r0, r5
   1a52c:	pop	{r4, r5, r6, pc}
   1a530:	mov	r0, #0
   1a534:	bx	lr
   1a538:	push	{r4, r5, r6, r7, r8, lr}
   1a53c:	subs	r8, r0, #0
   1a540:	popeq	{r4, r5, r6, r7, r8, pc}
   1a544:	mov	r0, #24
   1a548:	mov	r4, r1
   1a54c:	mov	r7, r2
   1a550:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   1a554:	mov	r6, r0
   1a558:	mov	r0, r4
   1a55c:	bl	22510 <_obstack_memory_used@@Base+0x3084>
   1a560:	ldrd	r4, [r7, #96]	; 0x60
   1a564:	ldrd	r2, [r7]
   1a568:	mov	r1, r6
   1a56c:	strd	r4, [r6, #8]
   1a570:	strd	r2, [r6, #16]
   1a574:	str	r0, [r6]
   1a578:	mov	r0, r8
   1a57c:	bl	1bc84 <__assert_fail@plt+0x9f10>
   1a580:	cmp	r0, #0
   1a584:	beq	1a59c <__assert_fail@plt+0x8828>
   1a588:	cmp	r6, r0
   1a58c:	popeq	{r4, r5, r6, r7, r8, pc}
   1a590:	mov	r0, r6
   1a594:	pop	{r4, r5, r6, r7, r8, lr}
   1a598:	b	1be4c <__assert_fail@plt+0xa0d8>
   1a59c:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   1a5a0:	subs	r3, r0, #0
   1a5a4:	beq	1a5e0 <__assert_fail@plt+0x886c>
   1a5a8:	push	{r4, r5, lr}
   1a5ac:	sub	sp, sp, #28
   1a5b0:	ldrd	r4, [r2, #96]	; 0x60
   1a5b4:	ldrd	r2, [r2]
   1a5b8:	mov	ip, r1
   1a5bc:	mov	r1, sp
   1a5c0:	str	ip, [sp]
   1a5c4:	strd	r4, [sp, #8]
   1a5c8:	strd	r2, [sp, #16]
   1a5cc:	bl	1b3f0 <__assert_fail@plt+0x967c>
   1a5d0:	adds	r0, r0, #0
   1a5d4:	movne	r0, #1
   1a5d8:	add	sp, sp, #28
   1a5dc:	pop	{r4, r5, pc}
   1a5e0:	mov	r0, r3
   1a5e4:	bx	lr
   1a5e8:	and	r3, r0, #61440	; 0xf000
   1a5ec:	cmp	r3, #32768	; 0x8000
   1a5f0:	moveq	r3, #45	; 0x2d
   1a5f4:	beq	1a640 <__assert_fail@plt+0x88cc>
   1a5f8:	cmp	r3, #16384	; 0x4000
   1a5fc:	moveq	r3, #100	; 0x64
   1a600:	beq	1a640 <__assert_fail@plt+0x88cc>
   1a604:	cmp	r3, #24576	; 0x6000
   1a608:	moveq	r3, #98	; 0x62
   1a60c:	beq	1a640 <__assert_fail@plt+0x88cc>
   1a610:	cmp	r3, #8192	; 0x2000
   1a614:	moveq	r3, #99	; 0x63
   1a618:	beq	1a640 <__assert_fail@plt+0x88cc>
   1a61c:	cmp	r3, #40960	; 0xa000
   1a620:	moveq	r3, #108	; 0x6c
   1a624:	beq	1a640 <__assert_fail@plt+0x88cc>
   1a628:	cmp	r3, #4096	; 0x1000
   1a62c:	moveq	r3, #112	; 0x70
   1a630:	beq	1a640 <__assert_fail@plt+0x88cc>
   1a634:	cmp	r3, #49152	; 0xc000
   1a638:	moveq	r3, #115	; 0x73
   1a63c:	movne	r3, #63	; 0x3f
   1a640:	tst	r0, #256	; 0x100
   1a644:	movne	ip, #114	; 0x72
   1a648:	moveq	ip, #45	; 0x2d
   1a64c:	tst	r0, #128	; 0x80
   1a650:	movne	r2, #119	; 0x77
   1a654:	moveq	r2, #45	; 0x2d
   1a658:	tst	r0, #2048	; 0x800
   1a65c:	strb	r3, [r1]
   1a660:	strb	ip, [r1, #1]
   1a664:	strb	r2, [r1, #2]
   1a668:	beq	1a700 <__assert_fail@plt+0x898c>
   1a66c:	tst	r0, #64	; 0x40
   1a670:	movne	ip, #115	; 0x73
   1a674:	moveq	ip, #83	; 0x53
   1a678:	tst	r0, #32
   1a67c:	movne	r2, #114	; 0x72
   1a680:	moveq	r2, #45	; 0x2d
   1a684:	tst	r0, #16
   1a688:	movne	r3, #119	; 0x77
   1a68c:	moveq	r3, #45	; 0x2d
   1a690:	tst	r0, #1024	; 0x400
   1a694:	strb	ip, [r1, #3]
   1a698:	strb	r2, [r1, #4]
   1a69c:	strb	r3, [r1, #5]
   1a6a0:	beq	1a720 <__assert_fail@plt+0x89ac>
   1a6a4:	tst	r0, #8
   1a6a8:	movne	ip, #115	; 0x73
   1a6ac:	moveq	ip, #83	; 0x53
   1a6b0:	tst	r0, #4
   1a6b4:	movne	r2, #114	; 0x72
   1a6b8:	moveq	r2, #45	; 0x2d
   1a6bc:	tst	r0, #2
   1a6c0:	movne	r3, #119	; 0x77
   1a6c4:	moveq	r3, #45	; 0x2d
   1a6c8:	tst	r0, #512	; 0x200
   1a6cc:	strb	ip, [r1, #6]
   1a6d0:	strb	r2, [r1, #7]
   1a6d4:	strb	r3, [r1, #8]
   1a6d8:	beq	1a710 <__assert_fail@plt+0x899c>
   1a6dc:	tst	r0, #1
   1a6e0:	movne	r0, #116	; 0x74
   1a6e4:	moveq	r0, #84	; 0x54
   1a6e8:	mov	r2, #32
   1a6ec:	mov	r3, #0
   1a6f0:	strb	r0, [r1, #9]
   1a6f4:	strb	r2, [r1, #10]
   1a6f8:	strb	r3, [r1, #11]
   1a6fc:	bx	lr
   1a700:	tst	r0, #64	; 0x40
   1a704:	movne	ip, #120	; 0x78
   1a708:	moveq	ip, #45	; 0x2d
   1a70c:	b	1a678 <__assert_fail@plt+0x8904>
   1a710:	tst	r0, #1
   1a714:	movne	r0, #120	; 0x78
   1a718:	moveq	r0, #45	; 0x2d
   1a71c:	b	1a6e8 <__assert_fail@plt+0x8974>
   1a720:	tst	r0, #8
   1a724:	movne	ip, #120	; 0x78
   1a728:	moveq	ip, #45	; 0x2d
   1a72c:	b	1a6b0 <__assert_fail@plt+0x893c>
   1a730:	ldr	r0, [r0, #16]
   1a734:	b	1a5e8 <__assert_fail@plt+0x8874>
   1a738:	push	{r4, lr}
   1a73c:	bl	1a74c <__assert_fail@plt+0x89d8>
   1a740:	cmp	r0, #0
   1a744:	popne	{r4, pc}
   1a748:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   1a74c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a750:	mov	r6, r1
   1a754:	mov	r8, r2
   1a758:	mov	fp, r0
   1a75c:	bl	19b6c <__assert_fail@plt+0x7df8>
   1a760:	mov	r4, r0
   1a764:	bl	19bc8 <__assert_fail@plt+0x7e54>
   1a768:	sub	r4, r4, fp
   1a76c:	mov	r5, r0
   1a770:	mov	r0, r6
   1a774:	bl	11b94 <strlen@plt>
   1a778:	cmp	r5, #0
   1a77c:	add	r4, r4, r5
   1a780:	mov	r7, r0
   1a784:	beq	1a7f8 <__assert_fail@plt+0x8a84>
   1a788:	add	r3, fp, r4
   1a78c:	ldrb	r3, [r3, #-1]
   1a790:	cmp	r3, #47	; 0x2f
   1a794:	beq	1a810 <__assert_fail@plt+0x8a9c>
   1a798:	ldrb	r3, [r6]
   1a79c:	cmp	r3, #47	; 0x2f
   1a7a0:	beq	1a810 <__assert_fail@plt+0x8a9c>
   1a7a4:	mov	r5, #1
   1a7a8:	mov	sl, #47	; 0x2f
   1a7ac:	add	r0, r7, #1
   1a7b0:	add	r0, r0, r4
   1a7b4:	add	r0, r0, r5
   1a7b8:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   1a7bc:	subs	r9, r0, #0
   1a7c0:	beq	1a7f0 <__assert_fail@plt+0x8a7c>
   1a7c4:	mov	r2, r4
   1a7c8:	mov	r1, fp
   1a7cc:	bl	11b40 <mempcpy@plt>
   1a7d0:	cmp	r8, #0
   1a7d4:	mov	r2, r7
   1a7d8:	mov	r1, r6
   1a7dc:	strb	sl, [r0], r5
   1a7e0:	strne	r0, [r8]
   1a7e4:	bl	11b40 <mempcpy@plt>
   1a7e8:	mov	r3, #0
   1a7ec:	strb	r3, [r0]
   1a7f0:	mov	r0, r9
   1a7f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7f8:	ldrb	r3, [r6]
   1a7fc:	cmp	r3, #47	; 0x2f
   1a800:	moveq	r5, #1
   1a804:	moveq	sl, #46	; 0x2e
   1a808:	movne	sl, r5
   1a80c:	b	1a7ac <__assert_fail@plt+0x8a38>
   1a810:	mov	r5, #0
   1a814:	mov	sl, r5
   1a818:	b	1a7ac <__assert_fail@plt+0x8a38>
   1a81c:	ldr	r2, [r0]
   1a820:	ldrb	r3, [r2]
   1a824:	cmp	r3, #0
   1a828:	beq	1a944 <__assert_fail@plt+0x8bd0>
   1a82c:	mov	ip, #0
   1a830:	cmp	r3, #46	; 0x2e
   1a834:	push	{r4, lr}
   1a838:	mov	r4, ip
   1a83c:	beq	1a8d4 <__assert_fail@plt+0x8b60>
   1a840:	mov	r1, r2
   1a844:	cmp	r3, #90	; 0x5a
   1a848:	sub	r2, r3, #48	; 0x30
   1a84c:	sub	lr, r3, #97	; 0x61
   1a850:	bhi	1a8b0 <__assert_fail@plt+0x8b3c>
   1a854:	cmp	r3, #65	; 0x41
   1a858:	bcs	1a8b8 <__assert_fail@plt+0x8b44>
   1a85c:	cmp	r2, #9
   1a860:	bls	1a8b8 <__assert_fail@plt+0x8b44>
   1a864:	cmp	r3, #126	; 0x7e
   1a868:	beq	1a8b8 <__assert_fail@plt+0x8b44>
   1a86c:	add	r1, r1, #1
   1a870:	str	r1, [r0]
   1a874:	ldrb	r3, [r1]
   1a878:	mov	ip, r4
   1a87c:	cmp	r3, #0
   1a880:	beq	1a938 <__assert_fail@plt+0x8bc4>
   1a884:	cmp	r3, #46	; 0x2e
   1a888:	bne	1a844 <__assert_fail@plt+0x8ad0>
   1a88c:	mov	r2, r1
   1a890:	add	r1, r2, #1
   1a894:	str	r1, [r0]
   1a898:	ldrb	r3, [r2, #1]
   1a89c:	mov	ip, r2
   1a8a0:	cmp	r3, #0
   1a8a4:	bne	1a8f0 <__assert_fail@plt+0x8b7c>
   1a8a8:	mov	r0, ip
   1a8ac:	pop	{r4, pc}
   1a8b0:	cmp	lr, #25
   1a8b4:	bhi	1a864 <__assert_fail@plt+0x8af0>
   1a8b8:	add	r2, r1, #1
   1a8bc:	str	r2, [r0]
   1a8c0:	ldrb	r3, [r1, #1]
   1a8c4:	cmp	r3, #0
   1a8c8:	beq	1a8a8 <__assert_fail@plt+0x8b34>
   1a8cc:	cmp	r3, #46	; 0x2e
   1a8d0:	bne	1a840 <__assert_fail@plt+0x8acc>
   1a8d4:	cmp	ip, #0
   1a8d8:	beq	1a890 <__assert_fail@plt+0x8b1c>
   1a8dc:	add	r1, r2, #1
   1a8e0:	str	r1, [r0]
   1a8e4:	ldrb	r3, [r2, #1]
   1a8e8:	cmp	r3, #0
   1a8ec:	beq	1a8a8 <__assert_fail@plt+0x8b34>
   1a8f0:	cmp	r3, #65	; 0x41
   1a8f4:	bcc	1a90c <__assert_fail@plt+0x8b98>
   1a8f8:	cmp	r3, #90	; 0x5a
   1a8fc:	bls	1a8b8 <__assert_fail@plt+0x8b44>
   1a900:	sub	r2, r3, #97	; 0x61
   1a904:	cmp	r2, #25
   1a908:	bls	1a8b8 <__assert_fail@plt+0x8b44>
   1a90c:	cmp	r3, #126	; 0x7e
   1a910:	beq	1a8b8 <__assert_fail@plt+0x8b44>
   1a914:	add	r2, r1, #1
   1a918:	str	r2, [r0]
   1a91c:	ldrb	r3, [r1, #1]
   1a920:	cmp	r3, #0
   1a924:	beq	1a938 <__assert_fail@plt+0x8bc4>
   1a928:	cmp	r3, #46	; 0x2e
   1a92c:	movne	ip, r4
   1a930:	bne	1a840 <__assert_fail@plt+0x8acc>
   1a934:	b	1a890 <__assert_fail@plt+0x8b1c>
   1a938:	mov	ip, #0
   1a93c:	mov	r0, ip
   1a940:	pop	{r4, pc}
   1a944:	mov	ip, #0
   1a948:	mov	r0, ip
   1a94c:	bx	lr
   1a950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a954:	sub	sp, sp, #20
   1a958:	mov	r6, r0
   1a95c:	mov	fp, r1
   1a960:	bl	118a0 <strcmp@plt>
   1a964:	subs	r7, r0, #0
   1a968:	beq	1ab7c <__assert_fail@plt+0x8e08>
   1a96c:	ldrb	r4, [r6]
   1a970:	cmp	r4, #0
   1a974:	beq	1acac <__assert_fail@plt+0x8f38>
   1a978:	ldrb	r5, [fp]
   1a97c:	cmp	r5, #0
   1a980:	beq	1ab88 <__assert_fail@plt+0x8e14>
   1a984:	mov	r1, r6
   1a988:	ldr	r0, [pc, #904]	; 1ad18 <__assert_fail@plt+0x8fa4>
   1a98c:	bl	118a0 <strcmp@plt>
   1a990:	cmp	r0, #0
   1a994:	beq	1acac <__assert_fail@plt+0x8f38>
   1a998:	mov	r1, fp
   1a99c:	ldr	r0, [pc, #884]	; 1ad18 <__assert_fail@plt+0x8fa4>
   1a9a0:	bl	118a0 <strcmp@plt>
   1a9a4:	cmp	r0, #0
   1a9a8:	beq	1ab88 <__assert_fail@plt+0x8e14>
   1a9ac:	mov	r1, r6
   1a9b0:	ldr	r0, [pc, #868]	; 1ad1c <__assert_fail@plt+0x8fa8>
   1a9b4:	bl	118a0 <strcmp@plt>
   1a9b8:	cmp	r0, #0
   1a9bc:	beq	1acac <__assert_fail@plt+0x8f38>
   1a9c0:	mov	r1, fp
   1a9c4:	ldr	r0, [pc, #848]	; 1ad1c <__assert_fail@plt+0x8fa8>
   1a9c8:	bl	118a0 <strcmp@plt>
   1a9cc:	cmp	r0, #0
   1a9d0:	beq	1ab88 <__assert_fail@plt+0x8e14>
   1a9d4:	cmp	r4, #46	; 0x2e
   1a9d8:	beq	1ac9c <__assert_fail@plt+0x8f28>
   1a9dc:	cmp	r5, #46	; 0x2e
   1a9e0:	beq	1ab88 <__assert_fail@plt+0x8e14>
   1a9e4:	add	r0, sp, #8
   1a9e8:	str	r6, [sp, #8]
   1a9ec:	str	fp, [sp, #12]
   1a9f0:	bl	1a81c <__assert_fail@plt+0x8aa8>
   1a9f4:	mov	r8, r0
   1a9f8:	add	r0, sp, #12
   1a9fc:	bl	1a81c <__assert_fail@plt+0x8aa8>
   1aa00:	cmp	r8, #0
   1aa04:	movne	r4, r8
   1aa08:	ldreq	r4, [sp, #8]
   1aa0c:	sub	r4, r4, r6
   1aa10:	cmp	r0, #0
   1aa14:	movne	r5, r0
   1aa18:	ldreq	r5, [sp, #12]
   1aa1c:	cmp	r0, #0
   1aa20:	cmpeq	r8, #0
   1aa24:	movne	r8, #1
   1aa28:	moveq	r8, #0
   1aa2c:	sub	r5, r5, fp
   1aa30:	cmp	r4, r5
   1aa34:	movne	r8, #0
   1aa38:	andeq	r8, r8, #1
   1aa3c:	cmp	r8, #0
   1aa40:	bne	1acb4 <__assert_fail@plt+0x8f40>
   1aa44:	mov	r3, #0
   1aa48:	mov	r1, r3
   1aa4c:	mov	r0, r3
   1aa50:	str	r7, [sp, #4]
   1aa54:	cmp	r5, r3
   1aa58:	cmpls	r4, r1
   1aa5c:	bls	1acec <__assert_fail@plt+0x8f78>
   1aa60:	add	lr, fp, r3
   1aa64:	add	ip, r6, r1
   1aa68:	b	1aaa4 <__assert_fail@plt+0x8d30>
   1aa6c:	mov	r8, r0
   1aa70:	cmp	r5, r3
   1aa74:	beq	1aa88 <__assert_fail@plt+0x8d14>
   1aa78:	ldrb	r2, [lr]
   1aa7c:	sub	r7, r2, #48	; 0x30
   1aa80:	cmp	r7, #9
   1aa84:	bhi	1abb4 <__assert_fail@plt+0x8e40>
   1aa88:	mov	r9, r0
   1aa8c:	cmp	r9, r8
   1aa90:	bne	1acf4 <__assert_fail@plt+0x8f80>
   1aa94:	add	r1, r1, #1
   1aa98:	add	r3, r3, #1
   1aa9c:	add	lr, lr, #1
   1aaa0:	add	ip, ip, #1
   1aaa4:	cmp	r4, r1
   1aaa8:	bls	1aabc <__assert_fail@plt+0x8d48>
   1aaac:	ldrb	r2, [ip]
   1aab0:	sub	r2, r2, #48	; 0x30
   1aab4:	cmp	r2, #9
   1aab8:	bhi	1aad4 <__assert_fail@plt+0x8d60>
   1aabc:	cmp	r5, r3
   1aac0:	bls	1abd8 <__assert_fail@plt+0x8e64>
   1aac4:	ldrb	r2, [lr]
   1aac8:	sub	r7, r2, #48	; 0x30
   1aacc:	cmp	r7, #9
   1aad0:	bls	1abdc <__assert_fail@plt+0x8e68>
   1aad4:	cmp	r4, r1
   1aad8:	beq	1ab98 <__assert_fail@plt+0x8e24>
   1aadc:	ldrb	r2, [ip]
   1aae0:	sub	r7, r2, #48	; 0x30
   1aae4:	cmp	r7, #9
   1aae8:	bls	1aa6c <__assert_fail@plt+0x8cf8>
   1aaec:	cmp	r2, #65	; 0x41
   1aaf0:	mov	r8, r2
   1aaf4:	bcc	1ab0c <__assert_fail@plt+0x8d98>
   1aaf8:	cmp	r2, #90	; 0x5a
   1aafc:	bls	1aa70 <__assert_fail@plt+0x8cfc>
   1ab00:	sub	r7, r2, #97	; 0x61
   1ab04:	cmp	r7, #25
   1ab08:	bls	1aa70 <__assert_fail@plt+0x8cfc>
   1ab0c:	cmp	r2, #126	; 0x7e
   1ab10:	addne	r8, r2, #256	; 0x100
   1ab14:	bne	1aa70 <__assert_fail@plt+0x8cfc>
   1ab18:	cmp	r5, r3
   1ab1c:	beq	1ad08 <__assert_fail@plt+0x8f94>
   1ab20:	ldrb	r2, [lr]
   1ab24:	sub	r7, r2, #48	; 0x30
   1ab28:	cmp	r7, #9
   1ab2c:	bls	1ab64 <__assert_fail@plt+0x8df0>
   1ab30:	cmp	r2, #65	; 0x41
   1ab34:	mov	r9, r2
   1ab38:	bcc	1ab50 <__assert_fail@plt+0x8ddc>
   1ab3c:	cmp	r2, #90	; 0x5a
   1ab40:	bls	1acfc <__assert_fail@plt+0x8f88>
   1ab44:	sub	r7, r2, #97	; 0x61
   1ab48:	cmp	r7, #25
   1ab4c:	bls	1acfc <__assert_fail@plt+0x8f88>
   1ab50:	mvn	r8, #0
   1ab54:	cmp	r2, #126	; 0x7e
   1ab58:	addne	r9, r2, #256	; 0x100
   1ab5c:	mvneq	r9, #0
   1ab60:	b	1aa8c <__assert_fail@plt+0x8d18>
   1ab64:	ldr	r7, [sp, #4]
   1ab68:	mvn	r8, #0
   1ab6c:	mov	r9, #0
   1ab70:	subs	r8, r8, r9
   1ab74:	beq	1ab7c <__assert_fail@plt+0x8e08>
   1ab78:	mov	r7, r8
   1ab7c:	mov	r0, r7
   1ab80:	add	sp, sp, #20
   1ab84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab88:	mov	r7, #1
   1ab8c:	mov	r0, r7
   1ab90:	add	sp, sp, #20
   1ab94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab98:	cmp	r5, r3
   1ab9c:	beq	1aa94 <__assert_fail@plt+0x8d20>
   1aba0:	ldrb	r2, [lr]
   1aba4:	sub	r7, r2, #48	; 0x30
   1aba8:	cmp	r7, #9
   1abac:	bls	1aa94 <__assert_fail@plt+0x8d20>
   1abb0:	mov	r8, r0
   1abb4:	cmp	r2, #65	; 0x41
   1abb8:	mov	r9, r2
   1abbc:	bcc	1ab54 <__assert_fail@plt+0x8de0>
   1abc0:	cmp	r2, #90	; 0x5a
   1abc4:	bls	1aa8c <__assert_fail@plt+0x8d18>
   1abc8:	sub	r7, r2, #97	; 0x61
   1abcc:	cmp	r7, #25
   1abd0:	bls	1aa8c <__assert_fail@plt+0x8d18>
   1abd4:	b	1ab54 <__assert_fail@plt+0x8de0>
   1abd8:	ldrb	r2, [fp, r3]
   1abdc:	ldrb	ip, [r6, r1]
   1abe0:	add	lr, r6, r1
   1abe4:	mov	r7, r1
   1abe8:	cmp	ip, #48	; 0x30
   1abec:	bne	1ac00 <__assert_fail@plt+0x8e8c>
   1abf0:	ldrb	ip, [lr, #1]!
   1abf4:	add	r7, r7, #1
   1abf8:	cmp	ip, #48	; 0x30
   1abfc:	beq	1abf0 <__assert_fail@plt+0x8e7c>
   1ac00:	cmp	r2, #48	; 0x30
   1ac04:	bne	1ac1c <__assert_fail@plt+0x8ea8>
   1ac08:	add	r2, fp, r3
   1ac0c:	ldrb	r1, [r2, #1]!
   1ac10:	add	r3, r3, #1
   1ac14:	cmp	r1, #48	; 0x30
   1ac18:	beq	1ac0c <__assert_fail@plt+0x8e98>
   1ac1c:	add	sl, r6, r7
   1ac20:	mov	r1, r7
   1ac24:	sub	r9, r3, r7
   1ac28:	add	r2, fp, r3
   1ac2c:	mov	r7, #0
   1ac30:	mov	r8, r4
   1ac34:	str	sl, [sp]
   1ac38:	sub	lr, ip, #48	; 0x30
   1ac3c:	cmp	lr, #9
   1ac40:	add	r3, r9, r1
   1ac44:	bls	1ac70 <__assert_fail@plt+0x8efc>
   1ac48:	cmp	lr, #9
   1ac4c:	mov	r4, r8
   1ac50:	bls	1acdc <__assert_fail@plt+0x8f68>
   1ac54:	ldrb	r2, [fp, r3]
   1ac58:	sub	r2, r2, #48	; 0x30
   1ac5c:	cmp	r2, #9
   1ac60:	bls	1ace4 <__assert_fail@plt+0x8f70>
   1ac64:	cmp	r7, #0
   1ac68:	beq	1aa54 <__assert_fail@plt+0x8ce0>
   1ac6c:	b	1ab7c <__assert_fail@plt+0x8e08>
   1ac70:	ldrb	r4, [r2], #1
   1ac74:	sub	sl, r4, #48	; 0x30
   1ac78:	cmp	sl, #9
   1ac7c:	bhi	1ac48 <__assert_fail@plt+0x8ed4>
   1ac80:	ldr	r3, [sp]
   1ac84:	cmp	r7, #0
   1ac88:	subeq	r7, ip, r4
   1ac8c:	ldrb	ip, [r3, #1]!
   1ac90:	add	r1, r1, #1
   1ac94:	str	r3, [sp]
   1ac98:	b	1ac38 <__assert_fail@plt+0x8ec4>
   1ac9c:	cmp	r5, #46	; 0x2e
   1aca0:	addeq	r6, r6, #1
   1aca4:	addeq	fp, fp, #1
   1aca8:	beq	1a9e4 <__assert_fail@plt+0x8c70>
   1acac:	mvn	r7, #0
   1acb0:	b	1ab7c <__assert_fail@plt+0x8e08>
   1acb4:	mov	r2, r4
   1acb8:	mov	r1, fp
   1acbc:	mov	r0, r6
   1acc0:	bl	11d20 <strncmp@plt>
   1acc4:	cmp	r0, #0
   1acc8:	ldreq	r4, [sp, #8]
   1accc:	ldreq	r5, [sp, #12]
   1acd0:	subeq	r4, r4, r6
   1acd4:	subeq	r5, r5, fp
   1acd8:	b	1aa44 <__assert_fail@plt+0x8cd0>
   1acdc:	mov	r8, #1
   1ace0:	b	1ab78 <__assert_fail@plt+0x8e04>
   1ace4:	mvn	r8, #0
   1ace8:	b	1ab78 <__assert_fail@plt+0x8e04>
   1acec:	ldr	r7, [sp, #4]
   1acf0:	b	1ab7c <__assert_fail@plt+0x8e08>
   1acf4:	ldr	r7, [sp, #4]
   1acf8:	b	1ab70 <__assert_fail@plt+0x8dfc>
   1acfc:	ldr	r7, [sp, #4]
   1ad00:	mvn	r8, #0
   1ad04:	b	1ab70 <__assert_fail@plt+0x8dfc>
   1ad08:	ldr	r7, [sp, #4]
   1ad0c:	mov	r9, #0
   1ad10:	mvn	r8, #0
   1ad14:	b	1ab70 <__assert_fail@plt+0x8dfc>
   1ad18:	andeq	r7, r2, r4, ror #16
   1ad1c:	andeq	r7, r2, r0, lsl lr
   1ad20:	push	{r4, r5, lr}
   1ad24:	sub	sp, sp, #12
   1ad28:	mov	r5, r0
   1ad2c:	bl	11bb8 <__errno_location@plt>
   1ad30:	mov	r2, #0
   1ad34:	mov	r4, r0
   1ad38:	ldr	r3, [r0]
   1ad3c:	str	r2, [r4]
   1ad40:	mov	r0, r5
   1ad44:	str	r3, [sp]
   1ad48:	str	r3, [sp, #4]
   1ad4c:	bl	11900 <free@plt>
   1ad50:	ldr	r3, [r4]
   1ad54:	add	r2, sp, #8
   1ad58:	cmp	r3, #0
   1ad5c:	moveq	r3, #4
   1ad60:	movne	r3, #0
   1ad64:	add	r3, r2, r3
   1ad68:	ldr	r3, [r3, #-8]
   1ad6c:	str	r3, [r4]
   1ad70:	add	sp, sp, #12
   1ad74:	pop	{r4, r5, pc}
   1ad78:	mov	r1, r0
   1ad7c:	mov	r0, #0
   1ad80:	b	11918 <clock_gettime@plt>
   1ad84:	push	{r4, r5, lr}
   1ad88:	sub	sp, sp, #12
   1ad8c:	mov	r4, r0
   1ad90:	mov	r1, sp
   1ad94:	mov	r0, #0
   1ad98:	bl	11918 <clock_gettime@plt>
   1ad9c:	ldm	sp, {r0, r1}
   1ada0:	stm	r4, {r0, r1}
   1ada4:	mov	r0, r4
   1ada8:	add	sp, sp, #12
   1adac:	pop	{r4, r5, pc}
   1adb0:	push	{lr}		; (str lr, [sp, #-4]!)
   1adb4:	sub	sp, sp, #268	; 0x10c
   1adb8:	add	r1, sp, #4
   1adbc:	ldr	r2, [pc, #60]	; 1ae00 <__assert_fail@plt+0x908c>
   1adc0:	bl	215a0 <_obstack_memory_used@@Base+0x2114>
   1adc4:	cmp	r0, #0
   1adc8:	movne	r0, #0
   1adcc:	bne	1adf8 <__assert_fail@plt+0x9084>
   1add0:	ldr	r1, [pc, #44]	; 1ae04 <__assert_fail@plt+0x9090>
   1add4:	add	r0, sp, #4
   1add8:	bl	118a0 <strcmp@plt>
   1addc:	cmp	r0, #0
   1ade0:	beq	1adf8 <__assert_fail@plt+0x9084>
   1ade4:	add	r0, sp, #4
   1ade8:	ldr	r1, [pc, #24]	; 1ae08 <__assert_fail@plt+0x9094>
   1adec:	bl	118a0 <strcmp@plt>
   1adf0:	adds	r0, r0, #0
   1adf4:	movne	r0, #1
   1adf8:	add	sp, sp, #268	; 0x10c
   1adfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae00:	andeq	r0, r0, r1, lsl #2
   1ae04:	andeq	r7, r2, r4, lsl lr
   1ae08:	andeq	r7, r2, r8, lsl lr
   1ae0c:	andeq	r0, r0, r0
   1ae10:	cmp	r0, #10
   1ae14:	movcc	r0, #10
   1ae18:	push	{r4, r5, r6, r7, r8, lr}
   1ae1c:	orr	r7, r0, #1
   1ae20:	cmn	r7, #1
   1ae24:	ldrne	r8, [pc, #132]	; 1aeb0 <__assert_fail@plt+0x913c>
   1ae28:	beq	1aea0 <__assert_fail@plt+0x912c>
   1ae2c:	cmp	r7, #9
   1ae30:	bls	1aea8 <__assert_fail@plt+0x9134>
   1ae34:	umull	r2, r3, r8, r7
   1ae38:	lsr	r3, r3, #1
   1ae3c:	add	r3, r3, r3, lsl #1
   1ae40:	cmp	r7, r3
   1ae44:	beq	1ae94 <__assert_fail@plt+0x9120>
   1ae48:	mov	r6, #16
   1ae4c:	mov	r5, #9
   1ae50:	mov	r4, #3
   1ae54:	b	1ae68 <__assert_fail@plt+0x90f4>
   1ae58:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   1ae5c:	add	r6, r6, #8
   1ae60:	cmp	r1, #0
   1ae64:	beq	1ae94 <__assert_fail@plt+0x9120>
   1ae68:	add	r5, r5, r6
   1ae6c:	add	r4, r4, #2
   1ae70:	cmp	r5, r7
   1ae74:	mov	r0, r7
   1ae78:	mov	r1, r4
   1ae7c:	bcc	1ae58 <__assert_fail@plt+0x90e4>
   1ae80:	mov	r1, r4
   1ae84:	mov	r0, r7
   1ae88:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   1ae8c:	cmp	r1, #0
   1ae90:	bne	1aea0 <__assert_fail@plt+0x912c>
   1ae94:	add	r7, r7, #2
   1ae98:	cmn	r7, #1
   1ae9c:	bne	1ae2c <__assert_fail@plt+0x90b8>
   1aea0:	mov	r0, r7
   1aea4:	pop	{r4, r5, r6, r7, r8, pc}
   1aea8:	mov	r4, #3
   1aeac:	b	1ae80 <__assert_fail@plt+0x910c>
   1aeb0:	bge	feac5964 <optarg@@GLIBC_2.4+0xfea8c63c>
   1aeb4:	push	{r4, lr}
   1aeb8:	ror	r0, r0, #3
   1aebc:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   1aec0:	mov	r0, r1
   1aec4:	pop	{r4, pc}
   1aec8:	sub	r0, r1, r0
   1aecc:	clz	r0, r0
   1aed0:	lsr	r0, r0, #5
   1aed4:	bx	lr
   1aed8:	push	{r4, lr}
   1aedc:	mov	r4, r0
   1aee0:	mov	r0, r1
   1aee4:	ldr	r3, [r4, #24]
   1aee8:	ldr	r1, [r4, #8]
   1aeec:	blx	r3
   1aef0:	ldr	r3, [r4, #8]
   1aef4:	cmp	r0, r3
   1aef8:	bcs	1af08 <__assert_fail@plt+0x9194>
   1aefc:	ldr	r3, [r4]
   1af00:	add	r0, r3, r0, lsl #3
   1af04:	pop	{r4, pc}
   1af08:	bl	11d2c <abort@plt>
   1af0c:	push	{r4, r5, r6, r7, r8, lr}
   1af10:	mov	r7, r2
   1af14:	mov	r8, r3
   1af18:	mov	r6, r0
   1af1c:	mov	r5, r1
   1af20:	bl	1aed8 <__assert_fail@plt+0x9164>
   1af24:	str	r0, [r7]
   1af28:	ldr	r3, [r0]
   1af2c:	cmp	r3, #0
   1af30:	beq	1afc8 <__assert_fail@plt+0x9254>
   1af34:	cmp	r5, r3
   1af38:	mov	r4, r0
   1af3c:	beq	1af5c <__assert_fail@plt+0x91e8>
   1af40:	mov	r1, r3
   1af44:	mov	r0, r5
   1af48:	ldr	r3, [r6, #28]
   1af4c:	blx	r3
   1af50:	cmp	r0, #0
   1af54:	beq	1afbc <__assert_fail@plt+0x9248>
   1af58:	ldr	r3, [r4]
   1af5c:	cmp	r8, #0
   1af60:	beq	1af8c <__assert_fail@plt+0x9218>
   1af64:	ldr	r2, [r4, #4]
   1af68:	cmp	r2, #0
   1af6c:	movne	ip, #0
   1af70:	ldmne	r2, {r0, r1}
   1af74:	streq	r2, [r4]
   1af78:	stmne	r4, {r0, r1}
   1af7c:	strne	ip, [r2]
   1af80:	ldrne	r1, [r6, #36]	; 0x24
   1af84:	strne	r1, [r2, #4]
   1af88:	strne	r2, [r6, #36]	; 0x24
   1af8c:	mov	r0, r3
   1af90:	pop	{r4, r5, r6, r7, r8, pc}
   1af94:	ldr	r3, [r2]
   1af98:	cmp	r5, r3
   1af9c:	beq	1afdc <__assert_fail@plt+0x9268>
   1afa0:	mov	r1, r3
   1afa4:	mov	r0, r5
   1afa8:	ldr	r3, [r6, #28]
   1afac:	blx	r3
   1afb0:	cmp	r0, #0
   1afb4:	bne	1afd4 <__assert_fail@plt+0x9260>
   1afb8:	ldr	r4, [r4, #4]
   1afbc:	ldr	r2, [r4, #4]
   1afc0:	cmp	r2, #0
   1afc4:	bne	1af94 <__assert_fail@plt+0x9220>
   1afc8:	mov	r3, #0
   1afcc:	mov	r0, r3
   1afd0:	pop	{r4, r5, r6, r7, r8, pc}
   1afd4:	ldr	r2, [r4, #4]
   1afd8:	ldr	r3, [r2]
   1afdc:	cmp	r8, #0
   1afe0:	beq	1af8c <__assert_fail@plt+0x9218>
   1afe4:	ldr	r0, [r2, #4]
   1afe8:	mov	r1, #0
   1afec:	str	r0, [r4, #4]
   1aff0:	str	r1, [r2]
   1aff4:	ldr	r1, [r6, #36]	; 0x24
   1aff8:	mov	r0, r3
   1affc:	str	r1, [r2, #4]
   1b000:	str	r2, [r6, #36]	; 0x24
   1b004:	pop	{r4, r5, r6, r7, r8, pc}
   1b008:	ldr	r2, [pc, #164]	; 1b0b4 <__assert_fail@plt+0x9340>
   1b00c:	ldr	r3, [r0]
   1b010:	cmp	r3, r2
   1b014:	beq	1b09c <__assert_fail@plt+0x9328>
   1b018:	vldr	s15, [r3, #8]
   1b01c:	vldr	s14, [pc, #128]	; 1b0a4 <__assert_fail@plt+0x9330>
   1b020:	vcmpe.f32	s15, s14
   1b024:	vmrs	APSR_nzcv, fpscr
   1b028:	ble	1b090 <__assert_fail@plt+0x931c>
   1b02c:	vldr	s13, [pc, #116]	; 1b0a8 <__assert_fail@plt+0x9334>
   1b030:	vcmpe.f32	s15, s13
   1b034:	vmrs	APSR_nzcv, fpscr
   1b038:	bpl	1b090 <__assert_fail@plt+0x931c>
   1b03c:	vldr	s13, [pc, #104]	; 1b0ac <__assert_fail@plt+0x9338>
   1b040:	vldr	s12, [r3, #12]
   1b044:	vcmpe.f32	s12, s13
   1b048:	vmrs	APSR_nzcv, fpscr
   1b04c:	ble	1b090 <__assert_fail@plt+0x931c>
   1b050:	vldr	s13, [r3]
   1b054:	vcmpe.f32	s13, #0.0
   1b058:	vmrs	APSR_nzcv, fpscr
   1b05c:	blt	1b090 <__assert_fail@plt+0x931c>
   1b060:	vadd.f32	s14, s13, s14
   1b064:	vldr	s13, [r3, #4]
   1b068:	vcmpe.f32	s14, s13
   1b06c:	vmrs	APSR_nzcv, fpscr
   1b070:	bpl	1b090 <__assert_fail@plt+0x931c>
   1b074:	vldr	s12, [pc, #52]	; 1b0b0 <__assert_fail@plt+0x933c>
   1b078:	vcmpe.f32	s13, s12
   1b07c:	vmrs	APSR_nzcv, fpscr
   1b080:	bhi	1b090 <__assert_fail@plt+0x931c>
   1b084:	vcmpe.f32	s15, s14
   1b088:	vmrs	APSR_nzcv, fpscr
   1b08c:	bgt	1b09c <__assert_fail@plt+0x9328>
   1b090:	str	r2, [r0]
   1b094:	mov	r0, #0
   1b098:	bx	lr
   1b09c:	mov	r0, #1
   1b0a0:	bx	lr
   1b0a4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b0a8:	svccc	0x00666666
   1b0ac:	svccc	0x008ccccd
   1b0b0:	svccc	0x00800000
   1b0b4:	andeq	r7, r2, r0, lsr #28
   1b0b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0bc:	ldm	r1, {r6, ip}
   1b0c0:	cmp	r6, ip
   1b0c4:	bcs	1b180 <__assert_fail@plt+0x940c>
   1b0c8:	mov	sl, r2
   1b0cc:	mov	r5, r0
   1b0d0:	mov	r8, r1
   1b0d4:	add	r6, r6, #8
   1b0d8:	mov	r9, #0
   1b0dc:	ldr	fp, [r6, #-8]
   1b0e0:	mov	r7, r6
   1b0e4:	cmp	fp, #0
   1b0e8:	beq	1b174 <__assert_fail@plt+0x9400>
   1b0ec:	ldr	r4, [r6, #-4]
   1b0f0:	cmp	r4, #0
   1b0f4:	bne	1b114 <__assert_fail@plt+0x93a0>
   1b0f8:	b	1b164 <__assert_fail@plt+0x93f0>
   1b0fc:	ldr	r3, [r0, #4]
   1b100:	cmp	r2, #0
   1b104:	str	r3, [r4, #4]
   1b108:	str	r4, [r0, #4]
   1b10c:	mov	r4, r2
   1b110:	beq	1b160 <__assert_fail@plt+0x93ec>
   1b114:	ldr	fp, [r4]
   1b118:	mov	r0, r5
   1b11c:	mov	r1, fp
   1b120:	bl	1aed8 <__assert_fail@plt+0x9164>
   1b124:	ldr	r2, [r4, #4]
   1b128:	ldr	r1, [r0]
   1b12c:	cmp	r1, #0
   1b130:	bne	1b0fc <__assert_fail@plt+0x9388>
   1b134:	ldr	ip, [r5, #12]
   1b138:	str	fp, [r0]
   1b13c:	add	r3, ip, #1
   1b140:	str	r3, [r5, #12]
   1b144:	str	r1, [r4]
   1b148:	ldr	r3, [r5, #36]	; 0x24
   1b14c:	cmp	r2, #0
   1b150:	str	r3, [r4, #4]
   1b154:	str	r4, [r5, #36]	; 0x24
   1b158:	mov	r4, r2
   1b15c:	bne	1b114 <__assert_fail@plt+0x93a0>
   1b160:	ldr	fp, [r6, #-8]
   1b164:	cmp	sl, #0
   1b168:	str	r9, [r6, #-4]
   1b16c:	beq	1b188 <__assert_fail@plt+0x9414>
   1b170:	ldr	ip, [r8, #4]
   1b174:	cmp	ip, r7
   1b178:	add	r6, r6, #8
   1b17c:	bhi	1b0dc <__assert_fail@plt+0x9368>
   1b180:	mov	r0, #1
   1b184:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b188:	mov	r1, fp
   1b18c:	mov	r0, r5
   1b190:	bl	1aed8 <__assert_fail@plt+0x9164>
   1b194:	ldr	r2, [r0]
   1b198:	mov	r4, r0
   1b19c:	cmp	r2, #0
   1b1a0:	beq	1b1ec <__assert_fail@plt+0x9478>
   1b1a4:	ldr	r0, [r5, #36]	; 0x24
   1b1a8:	cmp	r0, #0
   1b1ac:	beq	1b200 <__assert_fail@plt+0x948c>
   1b1b0:	ldr	r2, [r0, #4]
   1b1b4:	str	r2, [r5, #36]	; 0x24
   1b1b8:	ldr	r2, [r4, #4]
   1b1bc:	str	fp, [r0]
   1b1c0:	str	r2, [r0, #4]
   1b1c4:	str	r0, [r4, #4]
   1b1c8:	str	r9, [r6, #-8]
   1b1cc:	ldr	r3, [r8, #12]
   1b1d0:	ldr	ip, [r8, #4]
   1b1d4:	sub	r3, r3, #1
   1b1d8:	cmp	ip, r7
   1b1dc:	str	r3, [r8, #12]
   1b1e0:	add	r6, r6, #8
   1b1e4:	bhi	1b0dc <__assert_fail@plt+0x9368>
   1b1e8:	b	1b180 <__assert_fail@plt+0x940c>
   1b1ec:	ldr	r2, [r5, #12]
   1b1f0:	str	fp, [r0]
   1b1f4:	add	r3, r2, #1
   1b1f8:	str	r3, [r5, #12]
   1b1fc:	b	1b1c8 <__assert_fail@plt+0x9454>
   1b200:	mov	r0, #8
   1b204:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   1b208:	cmp	r0, #0
   1b20c:	bne	1b1b8 <__assert_fail@plt+0x9444>
   1b210:	mov	r0, sl
   1b214:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b218:	ldr	r0, [r0, #8]
   1b21c:	bx	lr
   1b220:	ldr	r0, [r0, #12]
   1b224:	bx	lr
   1b228:	ldr	r0, [r0, #16]
   1b22c:	bx	lr
   1b230:	ldm	r0, {r1, ip}
   1b234:	mov	r0, #0
   1b238:	cmp	r1, ip
   1b23c:	bcs	1b284 <__assert_fail@plt+0x9510>
   1b240:	ldr	r3, [r1]
   1b244:	cmp	r3, #0
   1b248:	beq	1b274 <__assert_fail@plt+0x9500>
   1b24c:	ldr	r3, [r1, #4]
   1b250:	mov	r2, #1
   1b254:	cmp	r3, #0
   1b258:	beq	1b26c <__assert_fail@plt+0x94f8>
   1b25c:	ldr	r3, [r3, #4]
   1b260:	add	r2, r2, #1
   1b264:	cmp	r3, #0
   1b268:	bne	1b25c <__assert_fail@plt+0x94e8>
   1b26c:	cmp	r0, r2
   1b270:	movcc	r0, r2
   1b274:	add	r1, r1, #8
   1b278:	cmp	r1, ip
   1b27c:	bcc	1b240 <__assert_fail@plt+0x94cc>
   1b280:	bx	lr
   1b284:	bx	lr
   1b288:	push	{lr}		; (str lr, [sp, #-4]!)
   1b28c:	mov	r2, #0
   1b290:	ldm	r0, {r1, lr}
   1b294:	mov	ip, r2
   1b298:	cmp	r1, lr
   1b29c:	bcs	1b2dc <__assert_fail@plt+0x9568>
   1b2a0:	ldr	r3, [r1]
   1b2a4:	cmp	r3, #0
   1b2a8:	beq	1b2d0 <__assert_fail@plt+0x955c>
   1b2ac:	ldr	r3, [r1, #4]
   1b2b0:	add	ip, ip, #1
   1b2b4:	cmp	r3, #0
   1b2b8:	add	r2, r2, #1
   1b2bc:	beq	1b2d0 <__assert_fail@plt+0x955c>
   1b2c0:	ldr	r3, [r3, #4]
   1b2c4:	add	r2, r2, #1
   1b2c8:	cmp	r3, #0
   1b2cc:	bne	1b2c0 <__assert_fail@plt+0x954c>
   1b2d0:	add	r1, r1, #8
   1b2d4:	cmp	r1, lr
   1b2d8:	bcc	1b2a0 <__assert_fail@plt+0x952c>
   1b2dc:	ldr	r3, [r0, #12]
   1b2e0:	cmp	r3, ip
   1b2e4:	ldreq	r0, [r0, #16]
   1b2e8:	subeq	r0, r0, r2
   1b2ec:	clzeq	r0, r0
   1b2f0:	lsreq	r0, r0, #5
   1b2f4:	movne	r0, #0
   1b2f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2fc:	push	{r4, r5, r6, r7, lr}
   1b300:	mov	r5, r1
   1b304:	ldm	r0, {ip, lr}
   1b308:	sub	sp, sp, #12
   1b30c:	ldr	r3, [r0, #16]
   1b310:	cmp	ip, lr
   1b314:	mov	r4, #0
   1b318:	ldr	r6, [r0, #8]
   1b31c:	ldr	r7, [r0, #12]
   1b320:	bcs	1b364 <__assert_fail@plt+0x95f0>
   1b324:	ldr	r2, [ip]
   1b328:	cmp	r2, #0
   1b32c:	beq	1b358 <__assert_fail@plt+0x95e4>
   1b330:	ldr	r2, [ip, #4]
   1b334:	mov	r1, #1
   1b338:	cmp	r2, #0
   1b33c:	beq	1b350 <__assert_fail@plt+0x95dc>
   1b340:	ldr	r2, [r2, #4]
   1b344:	add	r1, r1, #1
   1b348:	cmp	r2, #0
   1b34c:	bne	1b340 <__assert_fail@plt+0x95cc>
   1b350:	cmp	r4, r1
   1b354:	movcc	r4, r1
   1b358:	add	ip, ip, #8
   1b35c:	cmp	ip, lr
   1b360:	bcc	1b324 <__assert_fail@plt+0x95b0>
   1b364:	ldr	r2, [pc, #116]	; 1b3e0 <__assert_fail@plt+0x966c>
   1b368:	mov	r1, #1
   1b36c:	mov	r0, r5
   1b370:	bl	11c18 <__fprintf_chk@plt>
   1b374:	mov	r3, r6
   1b378:	ldr	r2, [pc, #100]	; 1b3e4 <__assert_fail@plt+0x9670>
   1b37c:	mov	r1, #1
   1b380:	mov	r0, r5
   1b384:	bl	11c18 <__fprintf_chk@plt>
   1b388:	vmov	s15, r7
   1b38c:	vldr	d5, [pc, #68]	; 1b3d8 <__assert_fail@plt+0x9664>
   1b390:	mov	r3, r7
   1b394:	ldr	r2, [pc, #76]	; 1b3e8 <__assert_fail@plt+0x9674>
   1b398:	vcvt.f64.u32	d6, s15
   1b39c:	vmov	s15, r6
   1b3a0:	mov	r1, #1
   1b3a4:	mov	r0, r5
   1b3a8:	vcvt.f64.u32	d7, s15
   1b3ac:	vmul.f64	d6, d6, d5
   1b3b0:	vdiv.f64	d5, d6, d7
   1b3b4:	vstr	d5, [sp]
   1b3b8:	bl	11c18 <__fprintf_chk@plt>
   1b3bc:	mov	r3, r4
   1b3c0:	mov	r0, r5
   1b3c4:	ldr	r2, [pc, #32]	; 1b3ec <__assert_fail@plt+0x9678>
   1b3c8:	mov	r1, #1
   1b3cc:	add	sp, sp, #12
   1b3d0:	pop	{r4, r5, r6, r7, lr}
   1b3d4:	b	11c18 <__fprintf_chk@plt>
   1b3d8:	andeq	r0, r0, r0
   1b3dc:	subsmi	r0, r9, r0
   1b3e0:	andeq	r7, r2, r4, lsr lr
   1b3e4:	andeq	r7, r2, ip, asr #28
   1b3e8:	andeq	r7, r2, r4, ror #28
   1b3ec:	andeq	r7, r2, r8, lsl #29
   1b3f0:	push	{r4, r5, r6, lr}
   1b3f4:	mov	r6, r0
   1b3f8:	mov	r5, r1
   1b3fc:	bl	1aed8 <__assert_fail@plt+0x9164>
   1b400:	ldr	r3, [r0]
   1b404:	cmp	r3, #0
   1b408:	movne	r4, r0
   1b40c:	bne	1b418 <__assert_fail@plt+0x96a4>
   1b410:	b	1b444 <__assert_fail@plt+0x96d0>
   1b414:	ldr	r3, [r4]
   1b418:	cmp	r5, r3
   1b41c:	mov	r1, r3
   1b420:	mov	r0, r5
   1b424:	beq	1b44c <__assert_fail@plt+0x96d8>
   1b428:	ldr	r3, [r6, #28]
   1b42c:	blx	r3
   1b430:	cmp	r0, #0
   1b434:	bne	1b454 <__assert_fail@plt+0x96e0>
   1b438:	ldr	r4, [r4, #4]
   1b43c:	cmp	r4, #0
   1b440:	bne	1b414 <__assert_fail@plt+0x96a0>
   1b444:	mov	r0, #0
   1b448:	pop	{r4, r5, r6, pc}
   1b44c:	mov	r0, r5
   1b450:	pop	{r4, r5, r6, pc}
   1b454:	ldr	r0, [r4]
   1b458:	pop	{r4, r5, r6, pc}
   1b45c:	ldr	r3, [r0, #16]
   1b460:	cmp	r3, #0
   1b464:	beq	1b498 <__assert_fail@plt+0x9724>
   1b468:	ldr	r3, [r0]
   1b46c:	ldr	r2, [r0, #4]
   1b470:	cmp	r3, r2
   1b474:	bcc	1b488 <__assert_fail@plt+0x9714>
   1b478:	b	1b4a0 <__assert_fail@plt+0x972c>
   1b47c:	add	r3, r3, #8
   1b480:	cmp	r3, r2
   1b484:	bcs	1b4a0 <__assert_fail@plt+0x972c>
   1b488:	ldr	r0, [r3]
   1b48c:	cmp	r0, #0
   1b490:	beq	1b47c <__assert_fail@plt+0x9708>
   1b494:	bx	lr
   1b498:	mov	r0, r3
   1b49c:	bx	lr
   1b4a0:	push	{r4, lr}
   1b4a4:	bl	11d2c <abort@plt>
   1b4a8:	push	{r4, r5, r6, lr}
   1b4ac:	mov	r5, r0
   1b4b0:	mov	r4, r1
   1b4b4:	bl	1aed8 <__assert_fail@plt+0x9164>
   1b4b8:	mov	r2, r0
   1b4bc:	mov	r3, r0
   1b4c0:	b	1b4cc <__assert_fail@plt+0x9758>
   1b4c4:	cmp	r3, #0
   1b4c8:	beq	1b4e0 <__assert_fail@plt+0x976c>
   1b4cc:	ldm	r3, {r1, r3}
   1b4d0:	cmp	r4, r1
   1b4d4:	bne	1b4c4 <__assert_fail@plt+0x9750>
   1b4d8:	cmp	r3, #0
   1b4dc:	bne	1b508 <__assert_fail@plt+0x9794>
   1b4e0:	ldr	r3, [r5, #4]
   1b4e4:	b	1b4f4 <__assert_fail@plt+0x9780>
   1b4e8:	ldr	r0, [r2]
   1b4ec:	cmp	r0, #0
   1b4f0:	popne	{r4, r5, r6, pc}
   1b4f4:	add	r2, r2, #8
   1b4f8:	cmp	r2, r3
   1b4fc:	bcc	1b4e8 <__assert_fail@plt+0x9774>
   1b500:	mov	r0, #0
   1b504:	pop	{r4, r5, r6, pc}
   1b508:	ldr	r0, [r3]
   1b50c:	pop	{r4, r5, r6, pc}
   1b510:	push	{r4, r5, r6, lr}
   1b514:	ldm	r0, {r5, lr}
   1b518:	cmp	r5, lr
   1b51c:	bcs	1b5a0 <__assert_fail@plt+0x982c>
   1b520:	add	r5, r5, #8
   1b524:	mov	ip, #0
   1b528:	ldr	r3, [r5, #-8]
   1b52c:	mov	r6, r5
   1b530:	cmp	r3, #0
   1b534:	beq	1b580 <__assert_fail@plt+0x980c>
   1b538:	cmp	r2, ip
   1b53c:	bls	1b58c <__assert_fail@plt+0x9818>
   1b540:	str	r3, [r1, ip, lsl #2]
   1b544:	ldr	r3, [r5, #-4]
   1b548:	add	r4, ip, #1
   1b54c:	cmp	r3, #0
   1b550:	add	lr, r1, ip, lsl #2
   1b554:	beq	1b594 <__assert_fail@plt+0x9820>
   1b558:	mov	ip, r4
   1b55c:	cmp	r2, ip
   1b560:	beq	1b58c <__assert_fail@plt+0x9818>
   1b564:	ldr	r4, [r3]
   1b568:	add	ip, ip, #1
   1b56c:	str	r4, [lr, #4]!
   1b570:	ldr	r3, [r3, #4]
   1b574:	cmp	r3, #0
   1b578:	bne	1b55c <__assert_fail@plt+0x97e8>
   1b57c:	ldr	lr, [r0, #4]
   1b580:	cmp	lr, r6
   1b584:	add	r5, r5, #8
   1b588:	bhi	1b528 <__assert_fail@plt+0x97b4>
   1b58c:	mov	r0, ip
   1b590:	pop	{r4, r5, r6, pc}
   1b594:	ldr	lr, [r0, #4]
   1b598:	mov	ip, r4
   1b59c:	b	1b580 <__assert_fail@plt+0x980c>
   1b5a0:	mov	ip, #0
   1b5a4:	b	1b58c <__assert_fail@plt+0x9818>
   1b5a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b5ac:	ldr	r3, [r0, #4]
   1b5b0:	ldr	r8, [r0]
   1b5b4:	cmp	r8, r3
   1b5b8:	bcs	1b61c <__assert_fail@plt+0x98a8>
   1b5bc:	mov	r7, r2
   1b5c0:	mov	r6, r1
   1b5c4:	mov	r9, r0
   1b5c8:	mov	r5, #0
   1b5cc:	ldr	r0, [r8]
   1b5d0:	cmp	r0, #0
   1b5d4:	beq	1b608 <__assert_fail@plt+0x9894>
   1b5d8:	mov	r4, r8
   1b5dc:	b	1b5e4 <__assert_fail@plt+0x9870>
   1b5e0:	ldr	r0, [r4]
   1b5e4:	mov	r1, r7
   1b5e8:	blx	r6
   1b5ec:	cmp	r0, #0
   1b5f0:	beq	1b614 <__assert_fail@plt+0x98a0>
   1b5f4:	ldr	r4, [r4, #4]
   1b5f8:	add	r5, r5, #1
   1b5fc:	cmp	r4, #0
   1b600:	bne	1b5e0 <__assert_fail@plt+0x986c>
   1b604:	ldr	r3, [r9, #4]
   1b608:	add	r8, r8, #8
   1b60c:	cmp	r3, r8
   1b610:	bhi	1b5cc <__assert_fail@plt+0x9858>
   1b614:	mov	r0, r5
   1b618:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b61c:	mov	r5, #0
   1b620:	b	1b614 <__assert_fail@plt+0x98a0>
   1b624:	push	{r4, r5, r6, lr}
   1b628:	mov	r4, r0
   1b62c:	ldrb	r0, [r0]
   1b630:	cmp	r0, #0
   1b634:	beq	1b664 <__assert_fail@plt+0x98f0>
   1b638:	mov	r5, r1
   1b63c:	mov	r1, #0
   1b640:	rsb	r1, r1, r1, lsl #5
   1b644:	add	r0, r1, r0
   1b648:	mov	r1, r5
   1b64c:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   1b650:	ldrb	r0, [r4, #1]!
   1b654:	cmp	r0, #0
   1b658:	bne	1b640 <__assert_fail@plt+0x98cc>
   1b65c:	mov	r0, r1
   1b660:	pop	{r4, r5, r6, pc}
   1b664:	mov	r1, r0
   1b668:	b	1b65c <__assert_fail@plt+0x98e8>
   1b66c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b670:	mov	ip, r0
   1b674:	ldr	lr, [pc, #16]	; 1b68c <__assert_fail@plt+0x9918>
   1b678:	ldm	lr!, {r0, r1, r2, r3}
   1b67c:	ldr	lr, [lr]
   1b680:	stmia	ip!, {r0, r1, r2, r3}
   1b684:	str	lr, [ip]
   1b688:	pop	{pc}		; (ldr pc, [sp], #4)
   1b68c:	andeq	r7, r2, r0, lsr #28
   1b690:	push	{r4, r5, r6, r7, lr}
   1b694:	sub	sp, sp, #12
   1b698:	cmp	r2, #0
   1b69c:	str	r0, [sp, #4]
   1b6a0:	ldr	r6, [pc, #304]	; 1b7d8 <__assert_fail@plt+0x9a64>
   1b6a4:	mov	r0, #40	; 0x28
   1b6a8:	movne	r6, r2
   1b6ac:	cmp	r3, #0
   1b6b0:	ldr	r7, [pc, #292]	; 1b7dc <__assert_fail@plt+0x9a68>
   1b6b4:	mov	r5, r1
   1b6b8:	movne	r7, r3
   1b6bc:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   1b6c0:	subs	r4, r0, #0
   1b6c4:	beq	1b75c <__assert_fail@plt+0x99e8>
   1b6c8:	cmp	r5, #0
   1b6cc:	beq	1b7b0 <__assert_fail@plt+0x9a3c>
   1b6d0:	mov	r0, r4
   1b6d4:	str	r5, [r0, #20]!
   1b6d8:	bl	1b008 <__assert_fail@plt+0x9294>
   1b6dc:	cmp	r0, #0
   1b6e0:	beq	1b798 <__assert_fail@plt+0x9a24>
   1b6e4:	ldrb	r3, [r5, #16]
   1b6e8:	cmp	r3, #0
   1b6ec:	beq	1b768 <__assert_fail@plt+0x99f4>
   1b6f0:	ldr	r0, [sp, #4]
   1b6f4:	bl	1ae10 <__assert_fail@plt+0x909c>
   1b6f8:	lsrs	r2, r0, #30
   1b6fc:	movne	r5, #1
   1b700:	moveq	r5, #0
   1b704:	tst	r0, #536870912	; 0x20000000
   1b708:	bne	1b790 <__assert_fail@plt+0x9a1c>
   1b70c:	cmp	r5, #0
   1b710:	bne	1b790 <__assert_fail@plt+0x9a1c>
   1b714:	cmp	r0, #0
   1b718:	str	r0, [r4, #8]
   1b71c:	beq	1b798 <__assert_fail@plt+0x9a24>
   1b720:	mov	r1, #8
   1b724:	bl	22e94 <_obstack_memory_used@@Base+0x3a08>
   1b728:	cmp	r0, #0
   1b72c:	str	r0, [r4]
   1b730:	beq	1b798 <__assert_fail@plt+0x9a24>
   1b734:	ldr	r3, [r4, #8]
   1b738:	str	r5, [r4, #12]
   1b73c:	str	r5, [r4, #16]
   1b740:	add	r0, r0, r3, lsl #3
   1b744:	ldr	r3, [sp, #32]
   1b748:	str	r6, [r4, #24]
   1b74c:	str	r7, [r4, #28]
   1b750:	str	r3, [r4, #32]
   1b754:	str	r5, [r4, #36]	; 0x24
   1b758:	str	r0, [r4, #4]
   1b75c:	mov	r0, r4
   1b760:	add	sp, sp, #12
   1b764:	pop	{r4, r5, r6, r7, pc}
   1b768:	vldr	s12, [r5, #8]
   1b76c:	vldr	s15, [sp, #4]
   1b770:	vldr	s14, [pc, #88]	; 1b7d0 <__assert_fail@plt+0x9a5c>
   1b774:	vcvt.f32.u32	s13, s15
   1b778:	vdiv.f32	s15, s13, s12
   1b77c:	vcmpe.f32	s15, s14
   1b780:	vmrs	APSR_nzcv, fpscr
   1b784:	vcvtlt.u32.f32	s15, s15
   1b788:	vstrlt	s15, [sp, #4]
   1b78c:	blt	1b6f0 <__assert_fail@plt+0x997c>
   1b790:	mov	r3, #0
   1b794:	str	r3, [r4, #8]
   1b798:	mov	r0, r4
   1b79c:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1b7a0:	mov	r4, #0
   1b7a4:	mov	r0, r4
   1b7a8:	add	sp, sp, #12
   1b7ac:	pop	{r4, r5, r6, r7, pc}
   1b7b0:	ldr	r3, [pc, #40]	; 1b7e0 <__assert_fail@plt+0x9a6c>
   1b7b4:	mov	r0, r4
   1b7b8:	str	r3, [r0, #20]!
   1b7bc:	bl	1b008 <__assert_fail@plt+0x9294>
   1b7c0:	cmp	r0, #0
   1b7c4:	vldrne	s12, [pc, #8]	; 1b7d4 <__assert_fail@plt+0x9a60>
   1b7c8:	bne	1b76c <__assert_fail@plt+0x99f8>
   1b7cc:	b	1b798 <__assert_fail@plt+0x9a24>
   1b7d0:	svcmi	0x00800000
   1b7d4:	svccc	0x004ccccd
   1b7d8:			; <UNDEFINED> instruction: 0x0001aeb4
   1b7dc:	andeq	sl, r1, r8, asr #29
   1b7e0:	andeq	r7, r2, r0, lsr #28
   1b7e4:	push	{r4, r5, r6, r7, r8, lr}
   1b7e8:	mov	r5, r0
   1b7ec:	ldr	r7, [r0]
   1b7f0:	ldr	r3, [r0, #4]
   1b7f4:	cmp	r7, r3
   1b7f8:	addcc	r7, r7, #8
   1b7fc:	movcc	r6, #0
   1b800:	bcs	1b87c <__assert_fail@plt+0x9b08>
   1b804:	ldr	r2, [r7, #-8]
   1b808:	mov	r8, r7
   1b80c:	cmp	r2, #0
   1b810:	beq	1b870 <__assert_fail@plt+0x9afc>
   1b814:	ldr	r4, [r7, #-4]
   1b818:	ldr	r2, [r5, #32]
   1b81c:	cmp	r4, #0
   1b820:	beq	1b854 <__assert_fail@plt+0x9ae0>
   1b824:	cmp	r2, #0
   1b828:	beq	1b838 <__assert_fail@plt+0x9ac4>
   1b82c:	ldr	r0, [r4]
   1b830:	blx	r2
   1b834:	ldr	r2, [r5, #32]
   1b838:	ldr	r3, [r4, #4]
   1b83c:	ldr	r1, [r5, #36]	; 0x24
   1b840:	str	r6, [r4]
   1b844:	str	r1, [r4, #4]
   1b848:	str	r4, [r5, #36]	; 0x24
   1b84c:	subs	r4, r3, #0
   1b850:	bne	1b824 <__assert_fail@plt+0x9ab0>
   1b854:	cmp	r2, #0
   1b858:	beq	1b864 <__assert_fail@plt+0x9af0>
   1b85c:	ldr	r0, [r7, #-8]
   1b860:	blx	r2
   1b864:	str	r6, [r7, #-8]
   1b868:	str	r6, [r7, #-4]
   1b86c:	ldr	r3, [r5, #4]
   1b870:	cmp	r3, r8
   1b874:	add	r7, r7, #8
   1b878:	bhi	1b804 <__assert_fail@plt+0x9a90>
   1b87c:	mov	r3, #0
   1b880:	str	r3, [r5, #12]
   1b884:	str	r3, [r5, #16]
   1b888:	pop	{r4, r5, r6, r7, r8, pc}
   1b88c:	ldr	r3, [r0, #32]
   1b890:	push	{r4, r5, r6, lr}
   1b894:	cmp	r3, #0
   1b898:	mov	r5, r0
   1b89c:	beq	1b8fc <__assert_fail@plt+0x9b88>
   1b8a0:	ldr	r3, [r0, #16]
   1b8a4:	cmp	r3, #0
   1b8a8:	beq	1b8fc <__assert_fail@plt+0x9b88>
   1b8ac:	ldr	r6, [r0]
   1b8b0:	ldr	r3, [r0, #4]
   1b8b4:	cmp	r6, r3
   1b8b8:	bcs	1b938 <__assert_fail@plt+0x9bc4>
   1b8bc:	ldr	r0, [r6]
   1b8c0:	cmp	r0, #0
   1b8c4:	movne	r4, r6
   1b8c8:	bne	1b8d4 <__assert_fail@plt+0x9b60>
   1b8cc:	b	1b8ec <__assert_fail@plt+0x9b78>
   1b8d0:	ldr	r0, [r4]
   1b8d4:	ldr	r3, [r5, #32]
   1b8d8:	blx	r3
   1b8dc:	ldr	r4, [r4, #4]
   1b8e0:	cmp	r4, #0
   1b8e4:	bne	1b8d0 <__assert_fail@plt+0x9b5c>
   1b8e8:	ldr	r3, [r5, #4]
   1b8ec:	add	r6, r6, #8
   1b8f0:	cmp	r3, r6
   1b8f4:	bhi	1b8bc <__assert_fail@plt+0x9b48>
   1b8f8:	b	1b900 <__assert_fail@plt+0x9b8c>
   1b8fc:	ldr	r3, [r5, #4]
   1b900:	ldr	r6, [r5]
   1b904:	cmp	r3, r6
   1b908:	bls	1b938 <__assert_fail@plt+0x9bc4>
   1b90c:	ldr	r0, [r6, #4]
   1b910:	cmp	r0, #0
   1b914:	beq	1b92c <__assert_fail@plt+0x9bb8>
   1b918:	ldr	r4, [r0, #4]
   1b91c:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1b920:	subs	r0, r4, #0
   1b924:	bne	1b918 <__assert_fail@plt+0x9ba4>
   1b928:	ldr	r3, [r5, #4]
   1b92c:	add	r6, r6, #8
   1b930:	cmp	r3, r6
   1b934:	bhi	1b90c <__assert_fail@plt+0x9b98>
   1b938:	ldr	r0, [r5, #36]	; 0x24
   1b93c:	cmp	r0, #0
   1b940:	beq	1b954 <__assert_fail@plt+0x9be0>
   1b944:	ldr	r4, [r0, #4]
   1b948:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1b94c:	subs	r0, r4, #0
   1b950:	bne	1b944 <__assert_fail@plt+0x9bd0>
   1b954:	ldr	r0, [r5]
   1b958:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1b95c:	mov	r0, r5
   1b960:	pop	{r4, r5, r6, lr}
   1b964:	b	1ad20 <__assert_fail@plt+0x8fac>
   1b968:	ldr	r3, [r0, #20]
   1b96c:	push	{r4, r5, r6, r7, lr}
   1b970:	sub	sp, sp, #52	; 0x34
   1b974:	ldrb	r2, [r3, #16]
   1b978:	mov	r5, r0
   1b97c:	str	r1, [sp, #4]
   1b980:	cmp	r2, #0
   1b984:	bne	1b9b0 <__assert_fail@plt+0x9c3c>
   1b988:	vmov	s15, r1
   1b98c:	vldr	s13, [r3, #8]
   1b990:	vldr	s14, [pc, #352]	; 1baf8 <__assert_fail@plt+0x9d84>
   1b994:	vcvt.f32.u32	s12, s15
   1b998:	vdiv.f32	s15, s12, s13
   1b99c:	vcmpe.f32	s15, s14
   1b9a0:	vmrs	APSR_nzcv, fpscr
   1b9a4:	bge	1bab4 <__assert_fail@plt+0x9d40>
   1b9a8:	vcvt.u32.f32	s15, s15
   1b9ac:	vstr	s15, [sp, #4]
   1b9b0:	ldr	r0, [sp, #4]
   1b9b4:	bl	1ae10 <__assert_fail@plt+0x909c>
   1b9b8:	lsrs	r3, r0, #30
   1b9bc:	movne	r2, #1
   1b9c0:	moveq	r2, #0
   1b9c4:	tst	r0, #536870912	; 0x20000000
   1b9c8:	movne	r2, #1
   1b9cc:	cmp	r0, #0
   1b9d0:	movne	r4, r2
   1b9d4:	orreq	r4, r2, #1
   1b9d8:	cmp	r4, #0
   1b9dc:	mov	r6, r0
   1b9e0:	bne	1bab4 <__assert_fail@plt+0x9d40>
   1b9e4:	ldr	r3, [r5, #8]
   1b9e8:	cmp	r3, r0
   1b9ec:	beq	1baa4 <__assert_fail@plt+0x9d30>
   1b9f0:	mov	r1, #8
   1b9f4:	bl	22e94 <_obstack_memory_used@@Base+0x3a08>
   1b9f8:	cmp	r0, #0
   1b9fc:	str	r0, [sp, #8]
   1ba00:	beq	1bab4 <__assert_fail@plt+0x9d40>
   1ba04:	ldr	r1, [r5, #24]
   1ba08:	ldr	r7, [r5, #20]
   1ba0c:	ldr	lr, [r5, #28]
   1ba10:	ldr	ip, [r5, #32]
   1ba14:	add	r0, r0, r6, lsl #3
   1ba18:	ldr	r3, [r5, #36]	; 0x24
   1ba1c:	str	r0, [sp, #12]
   1ba20:	mov	r2, r4
   1ba24:	str	r1, [sp, #32]
   1ba28:	add	r0, sp, #8
   1ba2c:	mov	r1, r5
   1ba30:	str	r4, [sp, #20]
   1ba34:	str	r4, [sp, #24]
   1ba38:	str	r6, [sp, #16]
   1ba3c:	str	r7, [sp, #28]
   1ba40:	str	lr, [sp, #36]	; 0x24
   1ba44:	str	ip, [sp, #40]	; 0x28
   1ba48:	str	r3, [sp, #44]	; 0x2c
   1ba4c:	bl	1b0b8 <__assert_fail@plt+0x9344>
   1ba50:	subs	r4, r0, #0
   1ba54:	bne	1bac4 <__assert_fail@plt+0x9d50>
   1ba58:	ldr	r3, [sp, #44]	; 0x2c
   1ba5c:	mov	r2, #1
   1ba60:	str	r3, [r5, #36]	; 0x24
   1ba64:	add	r1, sp, #8
   1ba68:	mov	r0, r5
   1ba6c:	bl	1b0b8 <__assert_fail@plt+0x9344>
   1ba70:	cmp	r0, #0
   1ba74:	beq	1baf4 <__assert_fail@plt+0x9d80>
   1ba78:	add	r1, sp, #8
   1ba7c:	mov	r0, r5
   1ba80:	mov	r2, r4
   1ba84:	bl	1b0b8 <__assert_fail@plt+0x9344>
   1ba88:	cmp	r0, #0
   1ba8c:	beq	1baf4 <__assert_fail@plt+0x9d80>
   1ba90:	ldr	r0, [sp, #8]
   1ba94:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1ba98:	mov	r0, r4
   1ba9c:	add	sp, sp, #52	; 0x34
   1baa0:	pop	{r4, r5, r6, r7, pc}
   1baa4:	mov	r4, #1
   1baa8:	mov	r0, r4
   1baac:	add	sp, sp, #52	; 0x34
   1bab0:	pop	{r4, r5, r6, r7, pc}
   1bab4:	mov	r4, #0
   1bab8:	mov	r0, r4
   1babc:	add	sp, sp, #52	; 0x34
   1bac0:	pop	{r4, r5, r6, r7, pc}
   1bac4:	ldr	r0, [r5]
   1bac8:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1bacc:	add	r0, sp, #12
   1bad0:	ldr	ip, [sp, #8]
   1bad4:	ldm	r0, {r0, r1, r2}
   1bad8:	ldr	r3, [sp, #44]	; 0x2c
   1badc:	str	ip, [r5]
   1bae0:	stmib	r5, {r0, r1, r2}
   1bae4:	mov	r0, r4
   1bae8:	str	r3, [r5, #36]	; 0x24
   1baec:	add	sp, sp, #52	; 0x34
   1baf0:	pop	{r4, r5, r6, r7, pc}
   1baf4:	bl	11d2c <abort@plt>
   1baf8:	svcmi	0x00800000
   1bafc:	push	{r4, r5, r6, lr}
   1bb00:	subs	r6, r1, #0
   1bb04:	sub	sp, sp, #8
   1bb08:	beq	1bc3c <__assert_fail@plt+0x9ec8>
   1bb0c:	mov	r4, r2
   1bb10:	mov	r3, #0
   1bb14:	add	r2, sp, #4
   1bb18:	mov	r5, r0
   1bb1c:	bl	1af0c <__assert_fail@plt+0x9198>
   1bb20:	cmp	r0, #0
   1bb24:	beq	1bb40 <__assert_fail@plt+0x9dcc>
   1bb28:	cmp	r4, #0
   1bb2c:	moveq	r0, r4
   1bb30:	strne	r0, [r4]
   1bb34:	movne	r0, #0
   1bb38:	add	sp, sp, #8
   1bb3c:	pop	{r4, r5, r6, pc}
   1bb40:	vldr	s15, [r5, #8]
   1bb44:	ldr	r3, [r5, #20]
   1bb48:	vldr	s14, [r5, #12]
   1bb4c:	vcvt.f32.u32	s15, s15
   1bb50:	vldr	s13, [r3, #8]
   1bb54:	vcvt.f32.u32	s14, s14
   1bb58:	vmul.f32	s15, s15, s13
   1bb5c:	vcmpe.f32	s14, s15
   1bb60:	vmrs	APSR_nzcv, fpscr
   1bb64:	bgt	1bbb4 <__assert_fail@plt+0x9e40>
   1bb68:	ldr	r2, [sp, #4]
   1bb6c:	ldr	r3, [r2]
   1bb70:	cmp	r3, #0
   1bb74:	beq	1bc40 <__assert_fail@plt+0x9ecc>
   1bb78:	ldr	r3, [r5, #36]	; 0x24
   1bb7c:	cmp	r3, #0
   1bb80:	beq	1bc64 <__assert_fail@plt+0x9ef0>
   1bb84:	ldr	r1, [r3, #4]
   1bb88:	str	r1, [r5, #36]	; 0x24
   1bb8c:	ldr	r1, [r5, #16]
   1bb90:	ldr	r0, [r2, #4]
   1bb94:	add	r1, r1, #1
   1bb98:	str	r0, [r3, #4]
   1bb9c:	str	r6, [r3]
   1bba0:	mov	r0, #1
   1bba4:	str	r3, [r2, #4]
   1bba8:	str	r1, [r5, #16]
   1bbac:	add	sp, sp, #8
   1bbb0:	pop	{r4, r5, r6, pc}
   1bbb4:	add	r0, r5, #20
   1bbb8:	bl	1b008 <__assert_fail@plt+0x9294>
   1bbbc:	vldr	s15, [r5, #8]
   1bbc0:	ldr	r3, [r5, #20]
   1bbc4:	vldr	s14, [r5, #12]
   1bbc8:	vcvt.f32.u32	s15, s15
   1bbcc:	vldr	s13, [r3, #8]
   1bbd0:	vcvt.f32.u32	s14, s14
   1bbd4:	vmul.f32	s12, s13, s15
   1bbd8:	vcmpe.f32	s14, s12
   1bbdc:	vmrs	APSR_nzcv, fpscr
   1bbe0:	ble	1bb68 <__assert_fail@plt+0x9df4>
   1bbe4:	vldr	s14, [r3, #12]
   1bbe8:	ldrb	r2, [r3, #16]
   1bbec:	vmul.f32	s15, s15, s14
   1bbf0:	cmp	r2, #0
   1bbf4:	vldr	s14, [pc, #132]	; 1bc80 <__assert_fail@plt+0x9f0c>
   1bbf8:	vmuleq.f32	s15, s15, s13
   1bbfc:	vcmpe.f32	s15, s14
   1bc00:	vmrs	APSR_nzcv, fpscr
   1bc04:	bge	1bc78 <__assert_fail@plt+0x9f04>
   1bc08:	vcvt.u32.f32	s15, s15
   1bc0c:	mov	r0, r5
   1bc10:	vmov	r1, s15
   1bc14:	bl	1b968 <__assert_fail@plt+0x9bf4>
   1bc18:	cmp	r0, #0
   1bc1c:	beq	1bc78 <__assert_fail@plt+0x9f04>
   1bc20:	add	r2, sp, #4
   1bc24:	mov	r3, #0
   1bc28:	mov	r1, r6
   1bc2c:	mov	r0, r5
   1bc30:	bl	1af0c <__assert_fail@plt+0x9198>
   1bc34:	cmp	r0, #0
   1bc38:	beq	1bb68 <__assert_fail@plt+0x9df4>
   1bc3c:	bl	11d2c <abort@plt>
   1bc40:	ldr	r1, [r5, #16]
   1bc44:	ldr	r3, [r5, #12]
   1bc48:	add	r1, r1, #1
   1bc4c:	add	r3, r3, #1
   1bc50:	str	r6, [r2]
   1bc54:	mov	r0, #1
   1bc58:	str	r1, [r5, #16]
   1bc5c:	str	r3, [r5, #12]
   1bc60:	b	1bb38 <__assert_fail@plt+0x9dc4>
   1bc64:	mov	r0, #8
   1bc68:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   1bc6c:	subs	r3, r0, #0
   1bc70:	ldrne	r2, [sp, #4]
   1bc74:	bne	1bb8c <__assert_fail@plt+0x9e18>
   1bc78:	mvn	r0, #0
   1bc7c:	b	1bb38 <__assert_fail@plt+0x9dc4>
   1bc80:	svcmi	0x00800000
   1bc84:	push	{r4, lr}
   1bc88:	sub	sp, sp, #8
   1bc8c:	add	r2, sp, #4
   1bc90:	mov	r4, r1
   1bc94:	bl	1bafc <__assert_fail@plt+0x9d88>
   1bc98:	cmn	r0, #1
   1bc9c:	beq	1bcb4 <__assert_fail@plt+0x9f40>
   1bca0:	cmp	r0, #0
   1bca4:	movne	r0, r4
   1bca8:	ldreq	r0, [sp, #4]
   1bcac:	add	sp, sp, #8
   1bcb0:	pop	{r4, pc}
   1bcb4:	mov	r0, #0
   1bcb8:	b	1bcac <__assert_fail@plt+0x9f38>
   1bcbc:	push	{r4, r5, r6, lr}
   1bcc0:	sub	sp, sp, #8
   1bcc4:	mov	r3, #1
   1bcc8:	add	r2, sp, #4
   1bccc:	mov	r4, r0
   1bcd0:	bl	1af0c <__assert_fail@plt+0x9198>
   1bcd4:	subs	r5, r0, #0
   1bcd8:	beq	1bcf8 <__assert_fail@plt+0x9f84>
   1bcdc:	ldr	r2, [sp, #4]
   1bce0:	ldr	r3, [r4, #16]
   1bce4:	ldr	r2, [r2]
   1bce8:	sub	r3, r3, #1
   1bcec:	cmp	r2, #0
   1bcf0:	str	r3, [r4, #16]
   1bcf4:	beq	1bd04 <__assert_fail@plt+0x9f90>
   1bcf8:	mov	r0, r5
   1bcfc:	add	sp, sp, #8
   1bd00:	pop	{r4, r5, r6, pc}
   1bd04:	vldr	s15, [r4, #8]
   1bd08:	ldr	r3, [r4, #12]
   1bd0c:	ldr	r2, [r4, #20]
   1bd10:	sub	r3, r3, #1
   1bd14:	vcvt.f32.u32	s14, s15
   1bd18:	vldr	s13, [r2]
   1bd1c:	vmov	s15, r3
   1bd20:	str	r3, [r4, #12]
   1bd24:	vcvt.f32.u32	s15, s15
   1bd28:	vmul.f32	s14, s14, s13
   1bd2c:	vcmpe.f32	s15, s14
   1bd30:	vmrs	APSR_nzcv, fpscr
   1bd34:	bpl	1bcf8 <__assert_fail@plt+0x9f84>
   1bd38:	add	r0, r4, #20
   1bd3c:	bl	1b008 <__assert_fail@plt+0x9294>
   1bd40:	vldr	s15, [r4, #8]
   1bd44:	ldr	r3, [r4, #20]
   1bd48:	vldr	s13, [r4, #12]
   1bd4c:	vcvt.f32.u32	s15, s15
   1bd50:	vldr	s14, [r3]
   1bd54:	vcvt.f32.u32	s13, s13
   1bd58:	vmul.f32	s14, s15, s14
   1bd5c:	vcmpe.f32	s13, s14
   1bd60:	vmrs	APSR_nzcv, fpscr
   1bd64:	bpl	1bcf8 <__assert_fail@plt+0x9f84>
   1bd68:	ldrb	r2, [r3, #16]
   1bd6c:	mov	r0, r4
   1bd70:	cmp	r2, #0
   1bd74:	vldreq	s13, [r3, #4]
   1bd78:	vldrne	s14, [r3, #4]
   1bd7c:	vldreq	s14, [r3, #8]
   1bd80:	vmuleq.f32	s15, s15, s13
   1bd84:	vmul.f32	s15, s15, s14
   1bd88:	vcvt.u32.f32	s15, s15
   1bd8c:	vmov	r1, s15
   1bd90:	bl	1b968 <__assert_fail@plt+0x9bf4>
   1bd94:	cmp	r0, #0
   1bd98:	bne	1bcf8 <__assert_fail@plt+0x9f84>
   1bd9c:	ldr	r0, [r4, #36]	; 0x24
   1bda0:	cmp	r0, #0
   1bda4:	beq	1bdb8 <__assert_fail@plt+0xa044>
   1bda8:	ldr	r6, [r0, #4]
   1bdac:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1bdb0:	subs	r0, r6, #0
   1bdb4:	bne	1bda8 <__assert_fail@plt+0xa034>
   1bdb8:	mov	r3, #0
   1bdbc:	str	r3, [r4, #36]	; 0x24
   1bdc0:	b	1bcf8 <__assert_fail@plt+0x9f84>
   1bdc4:	b	1bcbc <__assert_fail@plt+0x9f48>
   1bdc8:	push	{r4, r5, r6, lr}
   1bdcc:	mov	r4, r0
   1bdd0:	ldr	r0, [r0]
   1bdd4:	mov	r6, r1
   1bdd8:	bl	23180 <_obstack_memory_used@@Base+0x3cf4>
   1bddc:	ldrd	r4, [r4, #8]
   1bde0:	mov	r2, r6
   1bde4:	mov	r3, #0
   1bde8:	eor	r4, r4, r0
   1bdec:	mov	r0, r4
   1bdf0:	mov	r1, r5
   1bdf4:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1bdf8:	mov	r0, r2
   1bdfc:	pop	{r4, r5, r6, pc}
   1be00:	ldrd	r2, [r1, #8]
   1be04:	push	{r4, r5, r6, lr}
   1be08:	ldrd	r4, [r0, #8]
   1be0c:	cmp	r5, r3
   1be10:	cmpeq	r4, r2
   1be14:	beq	1be20 <__assert_fail@plt+0xa0ac>
   1be18:	mov	r0, #0
   1be1c:	pop	{r4, r5, r6, pc}
   1be20:	ldrd	r4, [r0, #16]
   1be24:	ldrd	r2, [r1, #16]
   1be28:	cmp	r5, r3
   1be2c:	cmpeq	r4, r2
   1be30:	bne	1be18 <__assert_fail@plt+0xa0a4>
   1be34:	ldr	r1, [r1]
   1be38:	ldr	r0, [r0]
   1be3c:	bl	118a0 <strcmp@plt>
   1be40:	clz	r0, r0
   1be44:	lsr	r0, r0, #5
   1be48:	pop	{r4, r5, r6, pc}
   1be4c:	push	{r4, lr}
   1be50:	mov	r4, r0
   1be54:	ldr	r0, [r0]
   1be58:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1be5c:	mov	r0, r4
   1be60:	pop	{r4, lr}
   1be64:	b	1ad20 <__assert_fail@plt+0x8fac>
   1be68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be6c:	vpush	{d8-d9}
   1be70:	mov	r8, r3
   1be74:	ands	r3, r3, #32
   1be78:	mov	r4, r2
   1be7c:	sub	sp, sp, #124	; 0x7c
   1be80:	mov	r7, r1
   1be84:	str	r3, [sp, #20]
   1be88:	moveq	r3, #1000	; 0x3e8
   1be8c:	movne	r3, #1024	; 0x400
   1be90:	str	r2, [sp, #12]
   1be94:	str	r3, [sp, #24]
   1be98:	mov	r6, r0
   1be9c:	bl	11c9c <localeconv@plt>
   1bea0:	add	r3, r4, #644	; 0x284
   1bea4:	str	r3, [sp, #36]	; 0x24
   1bea8:	add	r3, r3, #3
   1beac:	str	r3, [sp, #8]
   1beb0:	ldr	r9, [r0]
   1beb4:	mov	r5, r0
   1beb8:	mov	r0, r9
   1bebc:	bl	11b94 <strlen@plt>
   1bec0:	ldr	fp, [r5, #4]
   1bec4:	ldr	r3, [pc, #1036]	; 1c2d8 <__assert_fail@plt+0xa564>
   1bec8:	sub	r2, r0, #1
   1becc:	cmp	r2, #16
   1bed0:	movcc	r3, r9
   1bed4:	mov	r4, r0
   1bed8:	mov	r0, fp
   1bedc:	movcs	r4, #1
   1bee0:	str	r3, [sp, #32]
   1bee4:	bl	11b94 <strlen@plt>
   1bee8:	ldr	r3, [pc, #1004]	; 1c2dc <__assert_fail@plt+0xa568>
   1beec:	and	r2, r8, #3
   1bef0:	str	r2, [sp, #16]
   1bef4:	ldr	r9, [r5, #8]
   1bef8:	cmp	r0, #16
   1befc:	movhi	fp, r3
   1bf00:	ldrd	r0, [sp, #176]	; 0xb0
   1bf04:	ldrd	r2, [sp, #184]	; 0xb8
   1bf08:	str	fp, [sp, #28]
   1bf0c:	cmp	r3, r1
   1bf10:	cmpeq	r2, r0
   1bf14:	bhi	1c100 <__assert_fail@plt+0xa38c>
   1bf18:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1bf1c:	orrs	r3, r2, r3
   1bf20:	bne	1bf60 <__assert_fail@plt+0xa1ec>
   1bf24:	ldrd	r2, [sp, #184]	; 0xb8
   1bf28:	ldrd	r0, [sp, #176]	; 0xb0
   1bf2c:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1bf30:	mov	r2, r0
   1bf34:	mul	r0, r0, r7
   1bf38:	umull	sl, fp, r2, r6
   1bf3c:	mla	r0, r6, r1, r0
   1bf40:	mov	r3, r1
   1bf44:	add	fp, r0, fp
   1bf48:	mov	r1, fp
   1bf4c:	mov	r0, sl
   1bf50:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1bf54:	cmp	r7, r1
   1bf58:	cmpeq	r6, r0
   1bf5c:	beq	1c56c <__assert_fail@plt+0xa7f8>
   1bf60:	ldrd	r0, [sp, #176]	; 0xb0
   1bf64:	bl	239cc <_obstack_memory_used@@Base+0x4540>
   1bf68:	vmov	d9, r0, r1
   1bf6c:	ldrd	r0, [sp, #184]	; 0xb8
   1bf70:	bl	239cc <_obstack_memory_used@@Base+0x4540>
   1bf74:	vmov	d7, r0, r1
   1bf78:	mov	r0, r6
   1bf7c:	mov	r1, r7
   1bf80:	vdiv.f64	d8, d9, d7
   1bf84:	bl	239cc <_obstack_memory_used@@Base+0x4540>
   1bf88:	ands	r6, r8, #16
   1bf8c:	vmov	d7, r0, r1
   1bf90:	vmul.f64	d8, d8, d7
   1bf94:	beq	1c2e8 <__assert_fail@plt+0xa574>
   1bf98:	vldr	s15, [sp, #24]
   1bf9c:	mov	r5, #0
   1bfa0:	vcvt.f64.s32	d6, s15
   1bfa4:	vmov.f64	d7, d6
   1bfa8:	vmov.f64	d5, d7
   1bfac:	vmul.f64	d7, d7, d6
   1bfb0:	add	r5, r5, #1
   1bfb4:	vcmpe.f64	d8, d7
   1bfb8:	vmrs	APSR_nzcv, fpscr
   1bfbc:	blt	1bfc8 <__assert_fail@plt+0xa254>
   1bfc0:	cmp	r5, #8
   1bfc4:	bne	1bfa8 <__assert_fail@plt+0xa234>
   1bfc8:	ldr	sl, [sp, #16]
   1bfcc:	vdiv.f64	d9, d8, d5
   1bfd0:	cmp	sl, #1
   1bfd4:	beq	1c414 <__assert_fail@plt+0xa6a0>
   1bfd8:	vldr	d7, [pc, #744]	; 1c2c8 <__assert_fail@plt+0xa554>
   1bfdc:	vmov	r0, r1, d9
   1bfe0:	vcmpe.f64	d9, d7
   1bfe4:	vmrs	APSR_nzcv, fpscr
   1bfe8:	bpl	1c030 <__assert_fail@plt+0xa2bc>
   1bfec:	bl	23b60 <_obstack_memory_used@@Base+0x46d4>
   1bff0:	cmp	sl, #0
   1bff4:	mov	r6, r0
   1bff8:	mov	r7, r1
   1bffc:	movne	r0, #0
   1c000:	bne	1c01c <__assert_fail@plt+0xa2a8>
   1c004:	bl	239cc <_obstack_memory_used@@Base+0x4540>
   1c008:	vmov	d7, r0, r1
   1c00c:	vcmp.f64	d7, d9
   1c010:	vmrs	APSR_nzcv, fpscr
   1c014:	movne	r0, #1
   1c018:	moveq	r0, #0
   1c01c:	adds	r2, r6, r0
   1c020:	adc	r3, r7, #0
   1c024:	mov	r0, r2
   1c028:	mov	r1, r3
   1c02c:	bl	239cc <_obstack_memory_used@@Base+0x4540>
   1c030:	ldr	r6, [sp, #12]
   1c034:	strd	r0, [sp]
   1c038:	ldr	r3, [pc, #672]	; 1c2e0 <__assert_fail@plt+0xa56c>
   1c03c:	mvn	r2, #0
   1c040:	mov	r1, #1
   1c044:	mov	r0, r6
   1c048:	bl	11bc4 <__sprintf_chk@plt>
   1c04c:	mov	r0, r6
   1c050:	bl	11b94 <strlen@plt>
   1c054:	ldr	r3, [sp, #20]
   1c058:	add	r6, r4, #1
   1c05c:	cmp	r3, #0
   1c060:	movne	r3, #1
   1c064:	moveq	r3, #2
   1c068:	add	r3, r3, r6
   1c06c:	cmp	r0, r3
   1c070:	mov	r7, r0
   1c074:	bls	1c45c <__assert_fail@plt+0xa6e8>
   1c078:	vldr	d7, [pc, #592]	; 1c2d0 <__assert_fail@plt+0xa55c>
   1c07c:	vmul.f64	d9, d9, d7
   1c080:	vldr	d7, [pc, #576]	; 1c2c8 <__assert_fail@plt+0xa554>
   1c084:	vcmpe.f64	d9, d7
   1c088:	vmrs	APSR_nzcv, fpscr
   1c08c:	bpl	1c0c8 <__assert_fail@plt+0xa354>
   1c090:	vmov	r0, r1, d9
   1c094:	bl	23b60 <_obstack_memory_used@@Base+0x46d4>
   1c098:	ldr	r3, [sp, #16]
   1c09c:	cmp	r3, #0
   1c0a0:	mov	r6, r0
   1c0a4:	mov	r7, r1
   1c0a8:	movne	r0, #0
   1c0ac:	beq	1c720 <__assert_fail@plt+0xa9ac>
   1c0b0:	adds	r2, r6, r0
   1c0b4:	adc	r3, r7, #0
   1c0b8:	mov	r0, r2
   1c0bc:	mov	r1, r3
   1c0c0:	bl	239cc <_obstack_memory_used@@Base+0x4540>
   1c0c4:	vmov	d9, r0, r1
   1c0c8:	vldr	d6, [pc, #512]	; 1c2d0 <__assert_fail@plt+0xa55c>
   1c0cc:	ldr	r4, [sp, #12]
   1c0d0:	ldr	r3, [pc, #524]	; 1c2e4 <__assert_fail@plt+0xa570>
   1c0d4:	mvn	r2, #0
   1c0d8:	vdiv.f64	d7, d9, d6
   1c0dc:	mov	r1, #1
   1c0e0:	mov	r0, r4
   1c0e4:	mov	r6, #0
   1c0e8:	vstr	d7, [sp]
   1c0ec:	bl	11bc4 <__sprintf_chk@plt>
   1c0f0:	mov	r0, r4
   1c0f4:	bl	11b94 <strlen@plt>
   1c0f8:	mov	r7, r0
   1c0fc:	b	1c334 <__assert_fail@plt+0xa5c0>
   1c100:	ldrd	r2, [sp, #176]	; 0xb0
   1c104:	orrs	r3, r2, r3
   1c108:	beq	1bf60 <__assert_fail@plt+0xa1ec>
   1c10c:	ldrd	r2, [sp, #176]	; 0xb0
   1c110:	ldrd	r0, [sp, #184]	; 0xb8
   1c114:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c118:	orrs	r3, r2, r3
   1c11c:	bne	1bf60 <__assert_fail@plt+0xa1ec>
   1c120:	ldrd	r2, [sp, #176]	; 0xb0
   1c124:	ldrd	r0, [sp, #184]	; 0xb8
   1c128:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c12c:	mov	sl, r0
   1c130:	mov	fp, r1
   1c134:	mov	r2, r0
   1c138:	mov	r3, r1
   1c13c:	mov	r0, r6
   1c140:	mov	r1, r7
   1c144:	strd	sl, [sp, #48]	; 0x30
   1c148:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c14c:	mov	r1, #10
   1c150:	umull	sl, fp, r2, r1
   1c154:	mla	r3, r1, r3, fp
   1c158:	strd	sl, [sp, #40]	; 0x28
   1c15c:	ldrd	sl, [sp, #48]	; 0x30
   1c160:	str	r3, [sp, #44]	; 0x2c
   1c164:	ldrd	r0, [sp, #40]	; 0x28
   1c168:	mov	r2, sl
   1c16c:	mov	r3, fp
   1c170:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c174:	mov	r0, r6
   1c178:	mov	r1, r7
   1c17c:	lsls	r6, r2, #1
   1c180:	adc	r7, r3, r3
   1c184:	mov	r2, sl
   1c188:	mov	r3, fp
   1c18c:	strd	r6, [sp, #56]	; 0x38
   1c190:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c194:	mov	r7, fp
   1c198:	mov	r6, sl
   1c19c:	mov	r3, r7
   1c1a0:	mov	r2, r6
   1c1a4:	strd	r6, [sp, #48]	; 0x30
   1c1a8:	mov	sl, r0
   1c1ac:	mov	fp, r1
   1c1b0:	ldrd	r0, [sp, #40]	; 0x28
   1c1b4:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c1b8:	ldrd	r2, [sp, #48]	; 0x30
   1c1bc:	mov	r7, r0
   1c1c0:	ldrd	r0, [sp, #56]	; 0x38
   1c1c4:	cmp	r3, r1
   1c1c8:	cmpeq	r2, r0
   1c1cc:	bls	1c6fc <__assert_fail@plt+0xa988>
   1c1d0:	mov	r3, r0
   1c1d4:	orrs	r3, r3, r1
   1c1d8:	movne	r3, #1
   1c1dc:	moveq	r3, #0
   1c1e0:	str	r3, [sp, #48]	; 0x30
   1c1e4:	ands	r3, r8, #16
   1c1e8:	str	r3, [sp, #56]	; 0x38
   1c1ec:	beq	1c5c8 <__assert_fail@plt+0xa854>
   1c1f0:	ldr	r1, [sp, #24]
   1c1f4:	mov	r3, #0
   1c1f8:	mov	r2, r1
   1c1fc:	cmp	fp, r3
   1c200:	cmpeq	sl, r1
   1c204:	strd	r2, [sp, #40]	; 0x28
   1c208:	bcc	1c710 <__assert_fail@plt+0xa99c>
   1c20c:	mov	r5, #0
   1c210:	mov	r6, r7
   1c214:	str	r9, [sp, #64]	; 0x40
   1c218:	str	r8, [sp, #68]	; 0x44
   1c21c:	mov	r7, r1
   1c220:	mov	r8, r5
   1c224:	mov	r9, r4
   1c228:	ldr	r5, [sp, #48]	; 0x30
   1c22c:	b	1c258 <__assert_fail@plt+0xa4e4>
   1c230:	cmn	r5, r4
   1c234:	movne	r5, #1
   1c238:	moveq	r5, #0
   1c23c:	ldrd	r2, [sp, #40]	; 0x28
   1c240:	add	r8, r8, #1
   1c244:	cmp	r3, fp
   1c248:	cmpeq	r2, sl
   1c24c:	bhi	1c76c <__assert_fail@plt+0xa9f8>
   1c250:	cmp	r8, #8
   1c254:	beq	1c748 <__assert_fail@plt+0xa9d4>
   1c258:	mov	r0, sl
   1c25c:	mov	r1, fp
   1c260:	ldrd	r2, [sp, #40]	; 0x28
   1c264:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c268:	mov	r1, r7
   1c26c:	asr	r4, r5, #1
   1c270:	add	r2, r2, r2, lsl #2
   1c274:	add	r6, r6, r2, lsl #1
   1c278:	mov	r0, r6
   1c27c:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   1c280:	ldrd	r2, [sp, #40]	; 0x28
   1c284:	mov	r0, sl
   1c288:	add	r4, r4, r1, lsl #1
   1c28c:	mov	r1, fp
   1c290:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c294:	mov	sl, r0
   1c298:	mov	fp, r1
   1c29c:	mov	r0, r6
   1c2a0:	mov	r1, r7
   1c2a4:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   1c2a8:	cmp	r7, r4
   1c2ac:	add	r3, r5, r4
   1c2b0:	mov	r6, r0
   1c2b4:	bhi	1c230 <__assert_fail@plt+0xa4bc>
   1c2b8:	cmp	r7, r3
   1c2bc:	movcs	r5, #2
   1c2c0:	movcc	r5, #3
   1c2c4:	b	1c23c <__assert_fail@plt+0xa4c8>
   1c2c8:	andeq	r0, r0, r0
   1c2cc:	mvnsmi	r0, #0
   1c2d0:	andeq	r0, r0, r0
   1c2d4:	eormi	r0, r4, r0
   1c2d8:	andeq	r7, r2, r4, ror #16
   1c2dc:	andeq	r7, r2, r4, lsl #29
   1c2e0:	andeq	r7, r2, r8, asr #29
   1c2e4:	andeq	r7, r2, r0, asr #29
   1c2e8:	and	r7, r8, #3
   1c2ec:	cmp	r7, #1
   1c2f0:	beq	1c304 <__assert_fail@plt+0xa590>
   1c2f4:	vldr	d7, [pc, #996]	; 1c6e0 <__assert_fail@plt+0xa96c>
   1c2f8:	vcmpe.f64	d8, d7
   1c2fc:	vmrs	APSR_nzcv, fpscr
   1c300:	bmi	1c528 <__assert_fail@plt+0xa7b4>
   1c304:	ldr	r4, [sp, #12]
   1c308:	ldr	r3, [pc, #992]	; 1c6f0 <__assert_fail@plt+0xa97c>
   1c30c:	mvn	r2, #0
   1c310:	mov	r1, #1
   1c314:	vstr	d8, [sp]
   1c318:	mov	r0, r4
   1c31c:	bl	11bc4 <__sprintf_chk@plt>
   1c320:	mov	r0, r4
   1c324:	bl	11b94 <strlen@plt>
   1c328:	mov	r6, #0
   1c32c:	mvn	r5, #0
   1c330:	mov	r7, r0
   1c334:	ldr	r3, [sp, #8]
   1c338:	mov	r2, r7
   1c33c:	sub	r4, r3, r7
   1c340:	mov	r0, r4
   1c344:	ldr	r1, [sp, #12]
   1c348:	bl	118f4 <memmove@plt>
   1c34c:	sub	r7, r7, r6
   1c350:	add	r7, r4, r7
   1c354:	tst	r8, #4
   1c358:	bne	1c490 <__assert_fail@plt+0xa71c>
   1c35c:	tst	r8, #128	; 0x80
   1c360:	beq	1c3f8 <__assert_fail@plt+0xa684>
   1c364:	cmn	r5, #1
   1c368:	beq	1c57c <__assert_fail@plt+0xa808>
   1c36c:	and	r3, r8, #256	; 0x100
   1c370:	orrs	r2, r5, r3
   1c374:	beq	1c3f8 <__assert_fail@plt+0xa684>
   1c378:	tst	r8, #64	; 0x40
   1c37c:	ldrne	r1, [sp, #12]
   1c380:	addne	r2, r1, #648	; 0x288
   1c384:	strne	r2, [sp, #8]
   1c388:	movne	r2, #32
   1c38c:	strbne	r2, [r1, #647]	; 0x287
   1c390:	cmp	r5, #0
   1c394:	beq	1c8ac <__assert_fail@plt+0xab38>
   1c398:	ldr	r2, [sp, #20]
   1c39c:	ldr	r0, [sp, #8]
   1c3a0:	cmp	r2, #0
   1c3a4:	cmpeq	r5, #1
   1c3a8:	ldr	r2, [sp, #8]
   1c3ac:	ldrne	r1, [pc, #832]	; 1c6f4 <__assert_fail@plt+0xa980>
   1c3b0:	moveq	r1, #107	; 0x6b
   1c3b4:	add	r2, r2, #1
   1c3b8:	ldrbne	r1, [r1, r5]
   1c3bc:	cmp	r3, #0
   1c3c0:	streq	r2, [sp, #8]
   1c3c4:	strb	r1, [r0]
   1c3c8:	beq	1c3f8 <__assert_fail@plt+0xa684>
   1c3cc:	ldr	r3, [sp, #20]
   1c3d0:	cmp	r5, #0
   1c3d4:	cmpne	r3, #0
   1c3d8:	movne	r2, r0
   1c3dc:	movne	r3, #105	; 0x69
   1c3e0:	strbne	r3, [r2, #1]
   1c3e4:	addne	r2, r2, #2
   1c3e8:	mov	r3, #66	; 0x42
   1c3ec:	strb	r3, [r2]
   1c3f0:	add	r3, r2, #1
   1c3f4:	str	r3, [sp, #8]
   1c3f8:	ldr	r2, [sp, #8]
   1c3fc:	mov	r3, #0
   1c400:	mov	r0, r4
   1c404:	strb	r3, [r2]
   1c408:	add	sp, sp, #124	; 0x7c
   1c40c:	vpop	{d8-d9}
   1c410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c414:	ldr	r6, [sp, #12]
   1c418:	ldr	r3, [pc, #728]	; 1c6f8 <__assert_fail@plt+0xa984>
   1c41c:	mvn	r2, #0
   1c420:	ldr	r1, [sp, #16]
   1c424:	mov	r0, r6
   1c428:	vstr	d9, [sp]
   1c42c:	bl	11bc4 <__sprintf_chk@plt>
   1c430:	mov	r0, r6
   1c434:	bl	11b94 <strlen@plt>
   1c438:	ldr	r3, [sp, #20]
   1c43c:	add	r6, r4, #1
   1c440:	cmp	r3, #0
   1c444:	movne	r3, #1
   1c448:	moveq	r3, #2
   1c44c:	add	r3, r3, r6
   1c450:	cmp	r3, r0
   1c454:	mov	r7, r0
   1c458:	bcc	1c73c <__assert_fail@plt+0xa9c8>
   1c45c:	tst	r8, #8
   1c460:	beq	1c334 <__assert_fail@plt+0xa5c0>
   1c464:	ldr	r3, [sp, #12]
   1c468:	add	r3, r3, r7
   1c46c:	ldrb	r3, [r3, #-1]
   1c470:	cmp	r3, #48	; 0x30
   1c474:	bne	1c334 <__assert_fail@plt+0xa5c0>
   1c478:	vldr	d7, [pc, #616]	; 1c6e8 <__assert_fail@plt+0xa974>
   1c47c:	ldr	r3, [sp, #16]
   1c480:	cmp	r3, #1
   1c484:	vmul.f64	d9, d9, d7
   1c488:	beq	1c0c8 <__assert_fail@plt+0xa354>
   1c48c:	b	1c080 <__assert_fail@plt+0xa30c>
   1c490:	ldr	r0, [sp, #28]
   1c494:	bl	11b94 <strlen@plt>
   1c498:	sub	r6, r7, r4
   1c49c:	mov	r1, r4
   1c4a0:	mov	r2, r6
   1c4a4:	mov	r3, #41	; 0x29
   1c4a8:	mvn	sl, #0
   1c4ac:	mov	fp, r0
   1c4b0:	add	r0, sp, #76	; 0x4c
   1c4b4:	bl	11a20 <__memcpy_chk@plt>
   1c4b8:	ldr	r4, [sp, #28]
   1c4bc:	b	1c4c4 <__assert_fail@plt+0xa750>
   1c4c0:	bl	11930 <memcpy@plt>
   1c4c4:	ldrb	r3, [r9]
   1c4c8:	cmp	r3, #0
   1c4cc:	beq	1c4e0 <__assert_fail@plt+0xa76c>
   1c4d0:	cmp	r3, #255	; 0xff
   1c4d4:	movne	sl, r3
   1c4d8:	moveq	sl, r6
   1c4dc:	add	r9, r9, #1
   1c4e0:	cmp	sl, r6
   1c4e4:	movcs	sl, r6
   1c4e8:	sub	r3, r7, sl
   1c4ec:	sub	r6, r6, sl
   1c4f0:	add	r2, sp, #76	; 0x4c
   1c4f4:	add	r1, r2, r6
   1c4f8:	mov	r0, r3
   1c4fc:	mov	r2, sl
   1c500:	sub	r7, r3, fp
   1c504:	bl	11930 <memcpy@plt>
   1c508:	cmp	r6, #0
   1c50c:	mov	r2, fp
   1c510:	mov	r1, r4
   1c514:	mov	r3, r0
   1c518:	mov	r0, r7
   1c51c:	bne	1c4c0 <__assert_fail@plt+0xa74c>
   1c520:	mov	r4, r3
   1c524:	b	1c35c <__assert_fail@plt+0xa5e8>
   1c528:	vmov	r0, r1, d8
   1c52c:	bl	23b60 <_obstack_memory_used@@Base+0x46d4>
   1c530:	cmp	r7, #0
   1c534:	mov	r4, r0
   1c538:	mov	r5, r1
   1c53c:	bne	1c558 <__assert_fail@plt+0xa7e4>
   1c540:	bl	239cc <_obstack_memory_used@@Base+0x4540>
   1c544:	vmov	d7, r0, r1
   1c548:	vcmp.f64	d7, d8
   1c54c:	vmrs	APSR_nzcv, fpscr
   1c550:	movne	r6, #1
   1c554:	moveq	r6, #0
   1c558:	adds	r0, r4, r6
   1c55c:	adc	r1, r5, #0
   1c560:	bl	239cc <_obstack_memory_used@@Base+0x4540>
   1c564:	vmov	d8, r0, r1
   1c568:	b	1c304 <__assert_fail@plt+0xa590>
   1c56c:	mov	r3, #0
   1c570:	str	r3, [sp, #48]	; 0x30
   1c574:	mov	r7, r3
   1c578:	b	1c1e4 <__assert_fail@plt+0xa470>
   1c57c:	ldrd	r2, [sp, #184]	; 0xb8
   1c580:	cmp	r3, #0
   1c584:	cmpeq	r2, #1
   1c588:	bls	1c820 <__assert_fail@plt+0xaaac>
   1c58c:	ldr	r1, [sp, #24]
   1c590:	ldrd	r6, [sp, #184]	; 0xb8
   1c594:	mov	r5, #1
   1c598:	mov	r2, #1
   1c59c:	mov	r3, #0
   1c5a0:	mul	r0, r1, r3
   1c5a4:	umull	r2, r3, r2, r1
   1c5a8:	add	r3, r0, r3
   1c5ac:	cmp	r7, r3
   1c5b0:	cmpeq	r6, r2
   1c5b4:	bls	1c36c <__assert_fail@plt+0xa5f8>
   1c5b8:	add	r5, r5, #1
   1c5bc:	cmp	r5, #8
   1c5c0:	bne	1c5a0 <__assert_fail@plt+0xa82c>
   1c5c4:	b	1c36c <__assert_fail@plt+0xa5f8>
   1c5c8:	ldr	r3, [sp, #8]
   1c5cc:	mvn	r5, #0
   1c5d0:	str	r3, [sp, #36]	; 0x24
   1c5d4:	ldr	r3, [sp, #16]
   1c5d8:	cmp	r3, #1
   1c5dc:	beq	1c660 <__assert_fail@plt+0xa8ec>
   1c5e0:	ldr	r3, [sp, #16]
   1c5e4:	cmp	r3, #0
   1c5e8:	bne	1c688 <__assert_fail@plt+0xa914>
   1c5ec:	ldr	r3, [sp, #48]	; 0x30
   1c5f0:	add	r7, r7, r3
   1c5f4:	cmp	r7, #0
   1c5f8:	ble	1c688 <__assert_fail@plt+0xa914>
   1c5fc:	ldr	r3, [sp, #56]	; 0x38
   1c600:	adds	sl, sl, #1
   1c604:	adc	fp, fp, #0
   1c608:	cmp	r3, #0
   1c60c:	beq	1c688 <__assert_fail@plt+0xa914>
   1c610:	mov	r3, #0
   1c614:	ldr	r2, [sp, #24]
   1c618:	cmp	r3, fp
   1c61c:	cmpeq	r2, sl
   1c620:	moveq	r3, #1
   1c624:	movne	r3, #0
   1c628:	cmp	r5, #7
   1c62c:	movgt	r3, #0
   1c630:	andle	r3, r3, #1
   1c634:	cmp	r3, #0
   1c638:	beq	1c688 <__assert_fail@plt+0xa914>
   1c63c:	tst	r8, #8
   1c640:	add	r5, r5, #1
   1c644:	beq	1c880 <__assert_fail@plt+0xab0c>
   1c648:	ldr	r2, [sp, #36]	; 0x24
   1c64c:	mov	r3, #49	; 0x31
   1c650:	sub	r4, r2, #1
   1c654:	strb	r3, [r2, #-1]
   1c658:	mov	r7, r2
   1c65c:	b	1c354 <__assert_fail@plt+0xa5e0>
   1c660:	ldr	r1, [sp, #48]	; 0x30
   1c664:	and	r2, sl, #1
   1c668:	adds	r2, r2, r1
   1c66c:	mov	r3, #0
   1c670:	adc	r3, r3, r1, asr #31
   1c674:	orr	r2, r2, r3
   1c678:	cmp	r2, #0
   1c67c:	addne	r7, r7, #1
   1c680:	cmp	r7, #5
   1c684:	bgt	1c5fc <__assert_fail@plt+0xa888>
   1c688:	ldr	r4, [sp, #36]	; 0x24
   1c68c:	mov	r6, #10
   1c690:	mov	r7, #0
   1c694:	mov	r0, sl
   1c698:	mov	r1, fp
   1c69c:	mov	r2, r6
   1c6a0:	mov	r3, r7
   1c6a4:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c6a8:	mov	r0, sl
   1c6ac:	mov	r1, fp
   1c6b0:	mov	r3, r7
   1c6b4:	add	r2, r2, #48	; 0x30
   1c6b8:	strb	r2, [r4, #-1]!
   1c6bc:	mov	r2, r6
   1c6c0:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1c6c4:	mov	sl, r0
   1c6c8:	mov	fp, r1
   1c6cc:	orrs	r3, sl, fp
   1c6d0:	bne	1c694 <__assert_fail@plt+0xa920>
   1c6d4:	ldr	r7, [sp, #36]	; 0x24
   1c6d8:	b	1c354 <__assert_fail@plt+0xa5e0>
   1c6dc:	nop			; (mov r0, r0)
   1c6e0:	andeq	r0, r0, r0
   1c6e4:	mvnsmi	r0, #0
   1c6e8:	andeq	r0, r0, r0
   1c6ec:	eormi	r0, r4, r0
   1c6f0:	andeq	r7, r2, r0, asr #29
   1c6f4:	andeq	r7, r2, r0, lsr #29
   1c6f8:	andeq	r7, r2, r8, asr #29
   1c6fc:	movcc	r3, #3
   1c700:	strcc	r3, [sp, #48]	; 0x30
   1c704:	movcs	r3, #2
   1c708:	strcs	r3, [sp, #48]	; 0x30
   1c70c:	b	1c1e4 <__assert_fail@plt+0xa470>
   1c710:	ldr	r3, [sp, #8]
   1c714:	mov	r5, #0
   1c718:	str	r3, [sp, #36]	; 0x24
   1c71c:	b	1c5d4 <__assert_fail@plt+0xa860>
   1c720:	bl	239cc <_obstack_memory_used@@Base+0x4540>
   1c724:	vmov	d7, r0, r1
   1c728:	vcmp.f64	d7, d9
   1c72c:	vmrs	APSR_nzcv, fpscr
   1c730:	movne	r0, #1
   1c734:	moveq	r0, #0
   1c738:	b	1c0b0 <__assert_fail@plt+0xa33c>
   1c73c:	vldr	d7, [pc, #380]	; 1c8c0 <__assert_fail@plt+0xab4c>
   1c740:	vmul.f64	d9, d9, d7
   1c744:	b	1c0c8 <__assert_fail@plt+0xa354>
   1c748:	ldr	r3, [sp, #8]
   1c74c:	str	r5, [sp, #48]	; 0x30
   1c750:	mov	r4, r9
   1c754:	mov	r5, r8
   1c758:	mov	r7, r6
   1c75c:	ldr	r9, [sp, #64]	; 0x40
   1c760:	ldr	r8, [sp, #68]	; 0x44
   1c764:	str	r3, [sp, #36]	; 0x24
   1c768:	b	1c5d4 <__assert_fail@plt+0xa860>
   1c76c:	cmp	fp, #0
   1c770:	cmpeq	sl, #9
   1c774:	str	r5, [sp, #48]	; 0x30
   1c778:	mov	r4, r9
   1c77c:	mov	r5, r8
   1c780:	mov	r7, r6
   1c784:	ldr	r9, [sp, #64]	; 0x40
   1c788:	ldr	r8, [sp, #68]	; 0x44
   1c78c:	bhi	1c874 <__assert_fail@plt+0xab00>
   1c790:	ldr	r3, [sp, #16]
   1c794:	cmp	r3, #1
   1c798:	beq	1c828 <__assert_fail@plt+0xaab4>
   1c79c:	ldr	r2, [sp, #48]	; 0x30
   1c7a0:	ldr	r3, [sp, #16]
   1c7a4:	cmp	r2, #0
   1c7a8:	clz	r3, r3
   1c7ac:	lsr	r3, r3, #5
   1c7b0:	moveq	r3, #0
   1c7b4:	cmp	r3, #0
   1c7b8:	beq	1c808 <__assert_fail@plt+0xaa94>
   1c7bc:	add	r7, r7, #1
   1c7c0:	cmp	r7, #10
   1c7c4:	beq	1c854 <__assert_fail@plt+0xaae0>
   1c7c8:	add	r7, r7, #48	; 0x30
   1c7cc:	uxtb	r3, r7
   1c7d0:	ldr	r2, [sp, #36]	; 0x24
   1c7d4:	ldr	r1, [sp, #12]
   1c7d8:	add	r7, r2, #2
   1c7dc:	sub	r2, r7, r4
   1c7e0:	str	r2, [sp, #36]	; 0x24
   1c7e4:	strb	r3, [r1, #646]	; 0x286
   1c7e8:	mov	r0, r2
   1c7ec:	mov	r3, #0
   1c7f0:	mov	r2, r4
   1c7f4:	ldr	r1, [sp, #32]
   1c7f8:	mov	r7, r3
   1c7fc:	str	r3, [sp, #48]	; 0x30
   1c800:	bl	11930 <memcpy@plt>
   1c804:	b	1c5d4 <__assert_fail@plt+0xa860>
   1c808:	cmp	r7, #0
   1c80c:	bne	1c7c8 <__assert_fail@plt+0xaa54>
   1c810:	tst	r8, #8
   1c814:	bne	1c844 <__assert_fail@plt+0xaad0>
   1c818:	mov	r3, #48	; 0x30
   1c81c:	b	1c7d0 <__assert_fail@plt+0xaa5c>
   1c820:	mov	r5, #0
   1c824:	b	1c36c <__assert_fail@plt+0xa5f8>
   1c828:	ldr	r2, [sp, #48]	; 0x30
   1c82c:	and	r3, r6, #1
   1c830:	add	r3, r3, r2
   1c834:	cmp	r3, #2
   1c838:	movle	r3, #0
   1c83c:	movgt	r3, #1
   1c840:	b	1c7b4 <__assert_fail@plt+0xaa40>
   1c844:	ldr	r3, [sp, #8]
   1c848:	mov	r7, #0
   1c84c:	str	r3, [sp, #36]	; 0x24
   1c850:	b	1c5d4 <__assert_fail@plt+0xa860>
   1c854:	adds	sl, sl, #1
   1c858:	adc	fp, fp, #0
   1c85c:	cmp	fp, #0
   1c860:	mov	r3, #0
   1c864:	cmpeq	sl, #10
   1c868:	str	r3, [sp, #48]	; 0x30
   1c86c:	moveq	r7, r3
   1c870:	bne	1c810 <__assert_fail@plt+0xaa9c>
   1c874:	ldr	r3, [sp, #8]
   1c878:	str	r3, [sp, #36]	; 0x24
   1c87c:	b	1c5d4 <__assert_fail@plt+0xa860>
   1c880:	ldr	r1, [sp, #36]	; 0x24
   1c884:	mvn	r3, r4
   1c888:	add	r3, r1, r3
   1c88c:	mov	r2, #48	; 0x30
   1c890:	strb	r2, [r1, #-1]
   1c894:	mov	r0, r3
   1c898:	ldr	r1, [sp, #32]
   1c89c:	mov	r2, r4
   1c8a0:	str	r3, [sp, #36]	; 0x24
   1c8a4:	bl	11930 <memcpy@plt>
   1c8a8:	b	1c648 <__assert_fail@plt+0xa8d4>
   1c8ac:	cmp	r3, #0
   1c8b0:	ldrne	r2, [sp, #8]
   1c8b4:	bne	1c3e8 <__assert_fail@plt+0xa674>
   1c8b8:	b	1c3f8 <__assert_fail@plt+0xa684>
   1c8bc:	nop			; (mov r0, r0)
   1c8c0:	andeq	r0, r0, r0
   1c8c4:	eormi	r0, r4, r0
   1c8c8:	push	{r4, r5, r6, r7, r8, lr}
   1c8cc:	subs	r4, r0, #0
   1c8d0:	sub	sp, sp, #16
   1c8d4:	mov	r8, r1
   1c8d8:	mov	r7, r2
   1c8dc:	beq	1c9d4 <__assert_fail@plt+0xac60>
   1c8e0:	ldrb	r3, [r4]
   1c8e4:	ldr	r5, [pc, #360]	; 1ca54 <__assert_fail@plt+0xace0>
   1c8e8:	cmp	r3, #39	; 0x27
   1c8ec:	addeq	r4, r4, #1
   1c8f0:	mov	r3, #4
   1c8f4:	add	r2, r5, #12
   1c8f8:	add	r1, r5, #20
   1c8fc:	mov	r0, r4
   1c900:	moveq	r6, #4
   1c904:	movne	r6, #0
   1c908:	bl	197d0 <__assert_fail@plt+0x7a5c>
   1c90c:	cmp	r0, #0
   1c910:	blt	1c970 <__assert_fail@plt+0xabfc>
   1c914:	add	r5, r5, r0, lsl #2
   1c918:	mov	r1, #0
   1c91c:	ldr	ip, [r5, #12]
   1c920:	mov	r0, #1
   1c924:	mov	r2, r0
   1c928:	orr	r6, r6, ip
   1c92c:	mov	r3, r1
   1c930:	str	r0, [r7]
   1c934:	str	r1, [r7, #4]
   1c938:	mov	r0, #0
   1c93c:	str	r6, [r8]
   1c940:	orrs	r3, r2, r3
   1c944:	bne	1c968 <__assert_fail@plt+0xabf4>
   1c948:	ldr	r0, [pc, #264]	; 1ca58 <__assert_fail@plt+0xace4>
   1c94c:	bl	11ac8 <getenv@plt>
   1c950:	mov	r3, #0
   1c954:	cmp	r0, #0
   1c958:	movne	r2, #512	; 0x200
   1c95c:	moveq	r2, #1024	; 0x400
   1c960:	mov	r0, #4
   1c964:	strd	r2, [r7]
   1c968:	add	sp, sp, #16
   1c96c:	pop	{r4, r5, r6, r7, r8, pc}
   1c970:	ldr	r2, [pc, #228]	; 1ca5c <__assert_fail@plt+0xace8>
   1c974:	mov	r3, r7
   1c978:	str	r2, [sp]
   1c97c:	add	r1, sp, #12
   1c980:	mov	r2, #0
   1c984:	mov	r0, r4
   1c988:	bl	228ec <_obstack_memory_used@@Base+0x3460>
   1c98c:	cmp	r0, #0
   1c990:	bne	1ca18 <__assert_fail@plt+0xaca4>
   1c994:	ldrb	r3, [r4]
   1c998:	sub	r3, r3, #48	; 0x30
   1c99c:	cmp	r3, #9
   1c9a0:	bls	1c9cc <__assert_fail@plt+0xac58>
   1c9a4:	ldr	r2, [sp, #12]
   1c9a8:	cmp	r4, r2
   1c9ac:	bne	1c9bc <__assert_fail@plt+0xac48>
   1c9b0:	b	1ca28 <__assert_fail@plt+0xacb4>
   1c9b4:	cmp	r2, r4
   1c9b8:	beq	1ca28 <__assert_fail@plt+0xacb4>
   1c9bc:	ldrb	r3, [r4, #1]!
   1c9c0:	sub	r3, r3, #48	; 0x30
   1c9c4:	cmp	r3, #9
   1c9c8:	bhi	1c9b4 <__assert_fail@plt+0xac40>
   1c9cc:	ldrd	r2, [r7]
   1c9d0:	b	1c938 <__assert_fail@plt+0xabc4>
   1c9d4:	ldr	r0, [pc, #132]	; 1ca60 <__assert_fail@plt+0xacec>
   1c9d8:	bl	11ac8 <getenv@plt>
   1c9dc:	subs	r4, r0, #0
   1c9e0:	bne	1c8e0 <__assert_fail@plt+0xab6c>
   1c9e4:	ldr	r0, [pc, #120]	; 1ca64 <__assert_fail@plt+0xacf0>
   1c9e8:	bl	11ac8 <getenv@plt>
   1c9ec:	subs	r4, r0, #0
   1c9f0:	bne	1c8e0 <__assert_fail@plt+0xab6c>
   1c9f4:	ldr	r0, [pc, #92]	; 1ca58 <__assert_fail@plt+0xace4>
   1c9f8:	bl	11ac8 <getenv@plt>
   1c9fc:	mov	r3, #0
   1ca00:	mov	r6, #0
   1ca04:	cmp	r0, #0
   1ca08:	movne	r2, #512	; 0x200
   1ca0c:	moveq	r2, #1024	; 0x400
   1ca10:	strd	r2, [r7]
   1ca14:	b	1c938 <__assert_fail@plt+0xabc4>
   1ca18:	mov	r3, #0
   1ca1c:	str	r3, [r8]
   1ca20:	ldrd	r2, [r7]
   1ca24:	b	1c940 <__assert_fail@plt+0xabcc>
   1ca28:	ldrb	r3, [r2, #-1]
   1ca2c:	cmp	r3, #66	; 0x42
   1ca30:	orrne	r6, r6, #128	; 0x80
   1ca34:	beq	1ca40 <__assert_fail@plt+0xaccc>
   1ca38:	orr	r6, r6, #32
   1ca3c:	b	1c9cc <__assert_fail@plt+0xac58>
   1ca40:	ldrb	r3, [r2, #-2]
   1ca44:	orr	r6, r6, #384	; 0x180
   1ca48:	cmp	r3, #105	; 0x69
   1ca4c:	bne	1c9cc <__assert_fail@plt+0xac58>
   1ca50:	b	1ca38 <__assert_fail@plt+0xacc4>
   1ca54:	andeq	r7, r2, r0, lsr #29
   1ca58:	ldrdeq	r7, [r2], -ip
   1ca5c:	andeq	r7, r2, ip, ror #29
   1ca60:	andeq	r7, r2, r8, asr #12
   1ca64:	ldrdeq	r7, [r2], -r0
   1ca68:	push	{r4, r5, r6, r7, r8, lr}
   1ca6c:	ldr	r6, [pc, #144]	; 1cb04 <__assert_fail@plt+0xad90>
   1ca70:	ldr	r4, [r6]
   1ca74:	cmp	r4, #0
   1ca78:	beq	1caa4 <__assert_fail@plt+0xad30>
   1ca7c:	ldr	r3, [r4]
   1ca80:	cmp	r0, r3
   1ca84:	bne	1ca98 <__assert_fail@plt+0xad24>
   1ca88:	b	1cae8 <__assert_fail@plt+0xad74>
   1ca8c:	ldr	r3, [r4]
   1ca90:	cmp	r3, r0
   1ca94:	beq	1cae8 <__assert_fail@plt+0xad74>
   1ca98:	ldr	r4, [r4, #4]
   1ca9c:	cmp	r4, #0
   1caa0:	bne	1ca8c <__assert_fail@plt+0xad18>
   1caa4:	mov	r5, r0
   1caa8:	bl	118ac <getpwuid@plt>
   1caac:	cmp	r0, #0
   1cab0:	beq	1caf8 <__assert_fail@plt+0xad84>
   1cab4:	ldr	r7, [r0]
   1cab8:	mov	r0, r7
   1cabc:	bl	11b94 <strlen@plt>
   1cac0:	add	r0, r0, #12
   1cac4:	bic	r0, r0, #3
   1cac8:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   1cacc:	mov	r1, r7
   1cad0:	mov	r4, r0
   1cad4:	str	r5, [r0], #8
   1cad8:	bl	11a5c <strcpy@plt>
   1cadc:	ldr	r3, [r6]
   1cae0:	str	r4, [r6]
   1cae4:	str	r3, [r4, #4]
   1cae8:	ldrb	r0, [r4, #8]
   1caec:	cmp	r0, #0
   1caf0:	addne	r0, r4, #8
   1caf4:	pop	{r4, r5, r6, r7, r8, pc}
   1caf8:	mov	r0, #12
   1cafc:	ldr	r7, [pc, #4]	; 1cb08 <__assert_fail@plt+0xad94>
   1cb00:	b	1cac8 <__assert_fail@plt+0xad54>
   1cb04:	ldrdeq	sl, [r3], -r4
   1cb08:	andeq	r7, r2, r4, lsl #29
   1cb0c:	push	{r4, r5, r6, r7, r8, lr}
   1cb10:	mov	r6, r0
   1cb14:	ldr	r5, [pc, #236]	; 1cc08 <__assert_fail@plt+0xae94>
   1cb18:	ldr	r4, [r5]
   1cb1c:	cmp	r4, #0
   1cb20:	beq	1cb60 <__assert_fail@plt+0xadec>
   1cb24:	ldrb	r7, [r0]
   1cb28:	b	1cb38 <__assert_fail@plt+0xadc4>
   1cb2c:	ldr	r4, [r4, #4]
   1cb30:	cmp	r4, #0
   1cb34:	beq	1cb60 <__assert_fail@plt+0xadec>
   1cb38:	ldrb	r3, [r4, #8]
   1cb3c:	cmp	r3, r7
   1cb40:	bne	1cb2c <__assert_fail@plt+0xadb8>
   1cb44:	mov	r1, r6
   1cb48:	add	r0, r4, #8
   1cb4c:	bl	118a0 <strcmp@plt>
   1cb50:	cmp	r0, #0
   1cb54:	bne	1cb2c <__assert_fail@plt+0xadb8>
   1cb58:	mov	r0, r4
   1cb5c:	pop	{r4, r5, r6, r7, r8, pc}
   1cb60:	ldr	r4, [r5, #4]
   1cb64:	cmp	r4, #0
   1cb68:	beq	1cbac <__assert_fail@plt+0xae38>
   1cb6c:	ldrb	r7, [r6]
   1cb70:	b	1cb80 <__assert_fail@plt+0xae0c>
   1cb74:	ldr	r4, [r4, #4]
   1cb78:	cmp	r4, #0
   1cb7c:	beq	1cbac <__assert_fail@plt+0xae38>
   1cb80:	ldrb	r3, [r4, #8]
   1cb84:	cmp	r3, r7
   1cb88:	bne	1cb74 <__assert_fail@plt+0xae00>
   1cb8c:	mov	r1, r6
   1cb90:	add	r0, r4, #8
   1cb94:	bl	118a0 <strcmp@plt>
   1cb98:	cmp	r0, #0
   1cb9c:	popeq	{r4, r5, r6, r7, r8, pc}
   1cba0:	ldr	r4, [r4, #4]
   1cba4:	cmp	r4, #0
   1cba8:	bne	1cb80 <__assert_fail@plt+0xae0c>
   1cbac:	mov	r0, r6
   1cbb0:	bl	11894 <getpwnam@plt>
   1cbb4:	mov	r4, r0
   1cbb8:	mov	r0, r6
   1cbbc:	bl	11b94 <strlen@plt>
   1cbc0:	add	r0, r0, #12
   1cbc4:	bic	r0, r0, #3
   1cbc8:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   1cbcc:	mov	r1, r6
   1cbd0:	mov	r7, r0
   1cbd4:	add	r0, r0, #8
   1cbd8:	bl	11a5c <strcpy@plt>
   1cbdc:	cmp	r4, #0
   1cbe0:	movne	r0, r7
   1cbe4:	ldrne	r3, [r5]
   1cbe8:	ldrne	r2, [r4, #8]
   1cbec:	ldreq	r3, [r5, #4]
   1cbf0:	strne	r7, [r5]
   1cbf4:	moveq	r0, r4
   1cbf8:	streq	r7, [r5, #4]
   1cbfc:	stmne	r7, {r2, r3}
   1cc00:	streq	r3, [r7, #4]
   1cc04:	pop	{r4, r5, r6, r7, r8, pc}
   1cc08:	ldrdeq	sl, [r3], -r4
   1cc0c:	push	{r4, r5, r6, r7, r8, lr}
   1cc10:	ldr	r6, [pc, #144]	; 1cca8 <__assert_fail@plt+0xaf34>
   1cc14:	ldr	r4, [r6, #8]
   1cc18:	cmp	r4, #0
   1cc1c:	beq	1cc48 <__assert_fail@plt+0xaed4>
   1cc20:	ldr	r3, [r4]
   1cc24:	cmp	r0, r3
   1cc28:	bne	1cc3c <__assert_fail@plt+0xaec8>
   1cc2c:	b	1cc8c <__assert_fail@plt+0xaf18>
   1cc30:	ldr	r3, [r4]
   1cc34:	cmp	r3, r0
   1cc38:	beq	1cc8c <__assert_fail@plt+0xaf18>
   1cc3c:	ldr	r4, [r4, #4]
   1cc40:	cmp	r4, #0
   1cc44:	bne	1cc30 <__assert_fail@plt+0xaebc>
   1cc48:	mov	r5, r0
   1cc4c:	bl	11d44 <getgrgid@plt>
   1cc50:	cmp	r0, #0
   1cc54:	beq	1cc9c <__assert_fail@plt+0xaf28>
   1cc58:	ldr	r7, [r0]
   1cc5c:	mov	r0, r7
   1cc60:	bl	11b94 <strlen@plt>
   1cc64:	add	r0, r0, #12
   1cc68:	bic	r0, r0, #3
   1cc6c:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   1cc70:	mov	r1, r7
   1cc74:	mov	r4, r0
   1cc78:	str	r5, [r0], #8
   1cc7c:	bl	11a5c <strcpy@plt>
   1cc80:	ldr	r3, [r6, #8]
   1cc84:	str	r4, [r6, #8]
   1cc88:	str	r3, [r4, #4]
   1cc8c:	ldrb	r0, [r4, #8]
   1cc90:	cmp	r0, #0
   1cc94:	addne	r0, r4, #8
   1cc98:	pop	{r4, r5, r6, r7, r8, pc}
   1cc9c:	mov	r0, #12
   1cca0:	ldr	r7, [pc, #4]	; 1ccac <__assert_fail@plt+0xaf38>
   1cca4:	b	1cc6c <__assert_fail@plt+0xaef8>
   1cca8:	ldrdeq	sl, [r3], -r4
   1ccac:	andeq	r7, r2, r4, lsl #29
   1ccb0:	push	{r4, r5, r6, r7, r8, lr}
   1ccb4:	mov	r6, r0
   1ccb8:	ldr	r5, [pc, #236]	; 1cdac <__assert_fail@plt+0xb038>
   1ccbc:	ldr	r4, [r5, #8]
   1ccc0:	cmp	r4, #0
   1ccc4:	beq	1cd04 <__assert_fail@plt+0xaf90>
   1ccc8:	ldrb	r7, [r0]
   1cccc:	b	1ccdc <__assert_fail@plt+0xaf68>
   1ccd0:	ldr	r4, [r4, #4]
   1ccd4:	cmp	r4, #0
   1ccd8:	beq	1cd04 <__assert_fail@plt+0xaf90>
   1ccdc:	ldrb	r3, [r4, #8]
   1cce0:	cmp	r3, r7
   1cce4:	bne	1ccd0 <__assert_fail@plt+0xaf5c>
   1cce8:	mov	r1, r6
   1ccec:	add	r0, r4, #8
   1ccf0:	bl	118a0 <strcmp@plt>
   1ccf4:	cmp	r0, #0
   1ccf8:	bne	1ccd0 <__assert_fail@plt+0xaf5c>
   1ccfc:	mov	r0, r4
   1cd00:	pop	{r4, r5, r6, r7, r8, pc}
   1cd04:	ldr	r4, [r5, #12]
   1cd08:	cmp	r4, #0
   1cd0c:	beq	1cd50 <__assert_fail@plt+0xafdc>
   1cd10:	ldrb	r7, [r6]
   1cd14:	b	1cd24 <__assert_fail@plt+0xafb0>
   1cd18:	ldr	r4, [r4, #4]
   1cd1c:	cmp	r4, #0
   1cd20:	beq	1cd50 <__assert_fail@plt+0xafdc>
   1cd24:	ldrb	r3, [r4, #8]
   1cd28:	cmp	r3, r7
   1cd2c:	bne	1cd18 <__assert_fail@plt+0xafa4>
   1cd30:	mov	r1, r6
   1cd34:	add	r0, r4, #8
   1cd38:	bl	118a0 <strcmp@plt>
   1cd3c:	cmp	r0, #0
   1cd40:	popeq	{r4, r5, r6, r7, r8, pc}
   1cd44:	ldr	r4, [r4, #4]
   1cd48:	cmp	r4, #0
   1cd4c:	bne	1cd24 <__assert_fail@plt+0xafb0>
   1cd50:	mov	r0, r6
   1cd54:	bl	11d50 <getgrnam@plt>
   1cd58:	mov	r4, r0
   1cd5c:	mov	r0, r6
   1cd60:	bl	11b94 <strlen@plt>
   1cd64:	add	r0, r0, #12
   1cd68:	bic	r0, r0, #3
   1cd6c:	bl	21fe4 <_obstack_memory_used@@Base+0x2b58>
   1cd70:	mov	r1, r6
   1cd74:	mov	r7, r0
   1cd78:	add	r0, r0, #8
   1cd7c:	bl	11a5c <strcpy@plt>
   1cd80:	cmp	r4, #0
   1cd84:	movne	r0, r7
   1cd88:	ldrne	r3, [r5, #8]
   1cd8c:	ldrne	r2, [r4, #8]
   1cd90:	ldreq	r3, [r5, #12]
   1cd94:	strne	r7, [r5, #8]
   1cd98:	moveq	r0, r4
   1cd9c:	streq	r7, [r5, #12]
   1cda0:	stmne	r7, {r2, r3}
   1cda4:	streq	r3, [r7, #4]
   1cda8:	pop	{r4, r5, r6, r7, r8, pc}
   1cdac:	ldrdeq	sl, [r3], -r4
   1cdb0:	cmp	r0, #0
   1cdb4:	sbcs	r3, r1, #0
   1cdb8:	mov	r3, #0
   1cdbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cdc0:	mov	r4, r0
   1cdc4:	mov	r5, r1
   1cdc8:	strb	r3, [r2, #20]
   1cdcc:	add	r6, r2, #20
   1cdd0:	mov	r8, #10
   1cdd4:	mov	r9, #0
   1cdd8:	blt	1ce28 <__assert_fail@plt+0xb0b4>
   1cddc:	mov	r0, r4
   1cde0:	mov	r1, r5
   1cde4:	mov	r2, r8
   1cde8:	mov	r3, r9
   1cdec:	bl	23a40 <_obstack_memory_used@@Base+0x45b4>
   1cdf0:	mov	r0, r4
   1cdf4:	mov	r1, r5
   1cdf8:	mov	r3, r9
   1cdfc:	add	r2, r2, #48	; 0x30
   1ce00:	strb	r2, [r6, #-1]!
   1ce04:	mov	r2, r8
   1ce08:	bl	23a40 <_obstack_memory_used@@Base+0x45b4>
   1ce0c:	mov	r4, r0
   1ce10:	mov	r5, r1
   1ce14:	orrs	r3, r4, r5
   1ce18:	bne	1cddc <__assert_fail@plt+0xb068>
   1ce1c:	mov	r0, r6
   1ce20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce24:	mov	r6, r7
   1ce28:	mov	r0, r4
   1ce2c:	mov	r1, r5
   1ce30:	mov	r2, r8
   1ce34:	mov	r3, r9
   1ce38:	bl	23a40 <_obstack_memory_used@@Base+0x45b4>
   1ce3c:	mov	r0, r4
   1ce40:	mov	r1, r5
   1ce44:	mov	r3, r9
   1ce48:	sub	r7, r6, #1
   1ce4c:	rsb	r2, r2, #48	; 0x30
   1ce50:	strb	r2, [r6, #-1]
   1ce54:	mov	r2, r8
   1ce58:	bl	23a40 <_obstack_memory_used@@Base+0x45b4>
   1ce5c:	mov	r4, r0
   1ce60:	mov	r5, r1
   1ce64:	orrs	r3, r4, r5
   1ce68:	bne	1ce24 <__assert_fail@plt+0xb0b0>
   1ce6c:	mov	r3, #45	; 0x2d
   1ce70:	sub	r6, r6, #2
   1ce74:	strb	r3, [r7, #-1]
   1ce78:	mov	r0, r6
   1ce7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce80:	push	{r4, r5, r6, r8, r9, lr}
   1ce84:	mov	r4, r0
   1ce88:	mov	r5, r1
   1ce8c:	add	r6, r2, #20
   1ce90:	mov	r8, #10
   1ce94:	mov	r9, #0
   1ce98:	mov	r3, #0
   1ce9c:	strb	r3, [r2, #20]
   1cea0:	mov	r0, r4
   1cea4:	mov	r1, r5
   1cea8:	mov	r2, r8
   1ceac:	mov	r3, r9
   1ceb0:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1ceb4:	mov	r0, r4
   1ceb8:	mov	r1, r5
   1cebc:	mov	r3, r9
   1cec0:	add	r2, r2, #48	; 0x30
   1cec4:	strb	r2, [r6, #-1]!
   1cec8:	mov	r2, r8
   1cecc:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   1ced0:	mov	r4, r0
   1ced4:	mov	r5, r1
   1ced8:	orrs	r3, r4, r5
   1cedc:	bne	1cea0 <__assert_fail@plt+0xb12c>
   1cee0:	mov	r0, r6
   1cee4:	pop	{r4, r5, r6, r8, r9, pc}
   1cee8:	push	{r4, r5, r6, r7, lr}
   1ceec:	subs	r6, r0, #0
   1cef0:	sub	sp, sp, #12
   1cef4:	addeq	r6, sp, #4
   1cef8:	mov	r0, r6
   1cefc:	mov	r5, r2
   1cf00:	mov	r7, r1
   1cf04:	bl	11a74 <mbrtowc@plt>
   1cf08:	cmp	r5, #0
   1cf0c:	cmnne	r0, #3
   1cf10:	mov	r4, r0
   1cf14:	bls	1cf30 <__assert_fail@plt+0xb1bc>
   1cf18:	mov	r0, #0
   1cf1c:	bl	1adb0 <__assert_fail@plt+0x903c>
   1cf20:	cmp	r0, #0
   1cf24:	moveq	r4, #1
   1cf28:	ldrbeq	r3, [r7]
   1cf2c:	streq	r3, [r6]
   1cf30:	mov	r0, r4
   1cf34:	add	sp, sp, #12
   1cf38:	pop	{r4, r5, r6, r7, pc}
   1cf3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf40:	sub	sp, sp, #12
   1cf44:	mov	r9, r3
   1cf48:	mov	r4, r1
   1cf4c:	str	r2, [sp]
   1cf50:	mov	fp, r0
   1cf54:	bl	11b94 <strlen@plt>
   1cf58:	ldr	r3, [sp, #52]	; 0x34
   1cf5c:	ands	r5, r3, #2
   1cf60:	mov	r7, r0
   1cf64:	beq	1d0e8 <__assert_fail@plt+0xb374>
   1cf68:	mov	r8, #0
   1cf6c:	mov	sl, r8
   1cf70:	mov	r5, r7
   1cf74:	ldr	r2, [r9]
   1cf78:	cmp	r5, r2
   1cf7c:	movhi	r7, r2
   1cf80:	movhi	r6, #0
   1cf84:	bls	1d0a8 <__assert_fail@plt+0xb334>
   1cf88:	ldr	r3, [sp, #48]	; 0x30
   1cf8c:	str	r2, [r9]
   1cf90:	cmp	r3, #0
   1cf94:	beq	1d0cc <__assert_fail@plt+0xb358>
   1cf98:	cmp	r3, #1
   1cf9c:	moveq	r9, #0
   1cfa0:	bne	1d0d8 <__assert_fail@plt+0xb364>
   1cfa4:	ldr	r3, [sp, #52]	; 0x34
   1cfa8:	tst	r3, #4
   1cfac:	movne	r6, #0
   1cfb0:	tst	r3, #8
   1cfb4:	ldr	r3, [sp]
   1cfb8:	movne	r9, #0
   1cfbc:	cmp	r3, #0
   1cfc0:	beq	1d05c <__assert_fail@plt+0xb2e8>
   1cfc4:	sub	r5, r3, #1
   1cfc8:	add	r5, r4, r5
   1cfcc:	cmp	r6, #0
   1cfd0:	cmpne	r4, r5
   1cfd4:	sub	r3, r6, #1
   1cfd8:	bcs	1d000 <__assert_fail@plt+0xb28c>
   1cfdc:	mov	r1, #32
   1cfe0:	strb	r1, [r4], #1
   1cfe4:	cmp	r3, #0
   1cfe8:	cmpne	r5, r4
   1cfec:	movhi	r2, #1
   1cff0:	movls	r2, #0
   1cff4:	cmp	r2, #0
   1cff8:	sub	r3, r3, #1
   1cffc:	bne	1cfe0 <__assert_fail@plt+0xb26c>
   1d000:	sub	r2, r5, r4
   1d004:	cmp	r2, r7
   1d008:	mov	r3, #0
   1d00c:	movcs	r2, r7
   1d010:	strb	r3, [r4]
   1d014:	mov	r1, fp
   1d018:	mov	r0, r4
   1d01c:	bl	11b40 <mempcpy@plt>
   1d020:	sub	r3, r9, #1
   1d024:	cmp	r9, #0
   1d028:	cmpne	r5, r0
   1d02c:	bls	1d054 <__assert_fail@plt+0xb2e0>
   1d030:	mov	r1, #32
   1d034:	strb	r1, [r0], #1
   1d038:	cmp	r3, #0
   1d03c:	cmpne	r5, r0
   1d040:	movhi	r2, #1
   1d044:	movls	r2, #0
   1d048:	cmp	r2, #0
   1d04c:	sub	r3, r3, #1
   1d050:	bne	1d034 <__assert_fail@plt+0xb2c0>
   1d054:	mov	r3, #0
   1d058:	strb	r3, [r0]
   1d05c:	add	r6, r6, r7
   1d060:	add	r9, r6, r9
   1d064:	mov	r0, r8
   1d068:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1d06c:	mov	r0, sl
   1d070:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1d074:	mov	r0, r9
   1d078:	add	sp, sp, #12
   1d07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d080:	mov	r1, sl
   1d084:	mov	r0, r8
   1d088:	bl	11c6c <wcswidth@plt>
   1d08c:	mov	r5, r0
   1d090:	ldr	r2, [r9]
   1d094:	cmp	r2, r5
   1d098:	addcc	r3, r7, #1
   1d09c:	strcc	r3, [sp, #4]
   1d0a0:	bcc	1d1d4 <__assert_fail@plt+0xb460>
   1d0a4:	mov	sl, #0
   1d0a8:	ldr	r3, [sp, #48]	; 0x30
   1d0ac:	cmp	r5, r2
   1d0b0:	movcs	r2, r5
   1d0b4:	subcc	r6, r2, r5
   1d0b8:	movcs	r6, #0
   1d0bc:	movcc	r2, r5
   1d0c0:	cmp	r3, #0
   1d0c4:	str	r2, [r9]
   1d0c8:	bne	1cf98 <__assert_fail@plt+0xb224>
   1d0cc:	mov	r9, r6
   1d0d0:	ldr	r6, [sp, #48]	; 0x30
   1d0d4:	b	1cfa4 <__assert_fail@plt+0xb230>
   1d0d8:	lsr	r9, r6, #1
   1d0dc:	and	r6, r6, #1
   1d0e0:	add	r6, r6, r9
   1d0e4:	b	1cfa4 <__assert_fail@plt+0xb230>
   1d0e8:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1d0ec:	cmp	r0, #1
   1d0f0:	bls	1cf68 <__assert_fail@plt+0xb1f4>
   1d0f4:	mov	r2, r5
   1d0f8:	mov	r1, fp
   1d0fc:	mov	r0, r5
   1d100:	bl	11ca8 <mbstowcs@plt>
   1d104:	cmn	r0, #1
   1d108:	bne	1d128 <__assert_fail@plt+0xb3b4>
   1d10c:	ldr	r3, [sp, #52]	; 0x34
   1d110:	tst	r3, #1
   1d114:	bne	1cf68 <__assert_fail@plt+0xb1f4>
   1d118:	mov	r8, #0
   1d11c:	mov	sl, r8
   1d120:	mvn	r9, #0
   1d124:	b	1d064 <__assert_fail@plt+0xb2f0>
   1d128:	add	sl, r0, #1
   1d12c:	lsl	r6, sl, #2
   1d130:	mov	r0, r6
   1d134:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   1d138:	subs	r8, r0, #0
   1d13c:	beq	1d278 <__assert_fail@plt+0xb504>
   1d140:	mov	r2, sl
   1d144:	mov	r1, fp
   1d148:	bl	11ca8 <mbstowcs@plt>
   1d14c:	cmp	r0, #0
   1d150:	beq	1d258 <__assert_fail@plt+0xb4e4>
   1d154:	add	r6, r8, r6
   1d158:	str	r5, [r6, #-4]
   1d15c:	ldr	r6, [r8]
   1d160:	cmp	r6, #0
   1d164:	beq	1d080 <__assert_fail@plt+0xb30c>
   1d168:	mov	r3, r5
   1d16c:	mov	r0, r6
   1d170:	mov	r5, r8
   1d174:	mov	r6, r3
   1d178:	bl	119f0 <iswprint@plt>
   1d17c:	cmp	r0, #0
   1d180:	moveq	r6, #1
   1d184:	ldreq	r3, [pc, #272]	; 1d29c <__assert_fail@plt+0xb528>
   1d188:	streq	r3, [r5]
   1d18c:	ldr	r0, [r5, #4]!
   1d190:	cmp	r0, #0
   1d194:	bne	1d178 <__assert_fail@plt+0xb404>
   1d198:	str	r6, [sp, #4]
   1d19c:	mov	r1, sl
   1d1a0:	mov	r6, r0
   1d1a4:	mov	r0, r8
   1d1a8:	bl	11c6c <wcswidth@plt>
   1d1ac:	ldr	r3, [sp, #4]
   1d1b0:	cmp	r3, #0
   1d1b4:	mov	r5, r0
   1d1b8:	beq	1d090 <__assert_fail@plt+0xb31c>
   1d1bc:	mov	r2, r6
   1d1c0:	mov	r0, r6
   1d1c4:	mov	r1, r8
   1d1c8:	bl	11a80 <wcstombs@plt>
   1d1cc:	add	r3, r0, #1
   1d1d0:	str	r3, [sp, #4]
   1d1d4:	ldr	r0, [sp, #4]
   1d1d8:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   1d1dc:	subs	sl, r0, #0
   1d1e0:	beq	1d264 <__assert_fail@plt+0xb4f0>
   1d1e4:	ldr	r0, [r8]
   1d1e8:	ldr	r6, [r9]
   1d1ec:	cmp	r0, #0
   1d1f0:	beq	1d290 <__assert_fail@plt+0xb51c>
   1d1f4:	mov	r7, r8
   1d1f8:	mov	r5, #0
   1d1fc:	mov	fp, #1
   1d200:	b	1d214 <__assert_fail@plt+0xb4a0>
   1d204:	ldr	r0, [r7, #4]!
   1d208:	mov	r5, r3
   1d20c:	cmp	r0, #0
   1d210:	beq	1d234 <__assert_fail@plt+0xb4c0>
   1d214:	bl	118d0 <wcwidth@plt>
   1d218:	cmn	r0, #1
   1d21c:	moveq	r0, fp
   1d220:	ldreq	r3, [pc, #116]	; 1d29c <__assert_fail@plt+0xb528>
   1d224:	streq	r3, [r7]
   1d228:	add	r3, r0, r5
   1d22c:	cmp	r6, r3
   1d230:	bcs	1d204 <__assert_fail@plt+0xb490>
   1d234:	mov	r0, #0
   1d238:	str	r0, [r7]
   1d23c:	ldr	r2, [sp, #4]
   1d240:	mov	r1, r8
   1d244:	mov	r0, sl
   1d248:	bl	11a80 <wcstombs@plt>
   1d24c:	mov	fp, sl
   1d250:	mov	r7, r0
   1d254:	b	1cf74 <__assert_fail@plt+0xb200>
   1d258:	mov	sl, r0
   1d25c:	mov	r5, r7
   1d260:	b	1cf74 <__assert_fail@plt+0xb200>
   1d264:	ldr	r3, [sp, #52]	; 0x34
   1d268:	tst	r3, #1
   1d26c:	mvneq	r9, #0
   1d270:	beq	1d064 <__assert_fail@plt+0xb2f0>
   1d274:	b	1cf74 <__assert_fail@plt+0xb200>
   1d278:	ldr	r3, [sp, #52]	; 0x34
   1d27c:	tst	r3, #1
   1d280:	beq	1d118 <__assert_fail@plt+0xb3a4>
   1d284:	mov	r5, r7
   1d288:	mov	sl, r8
   1d28c:	b	1cf74 <__assert_fail@plt+0xb200>
   1d290:	mov	r5, r0
   1d294:	mov	r7, r8
   1d298:	b	1d234 <__assert_fail@plt+0xb4c0>
   1d29c:	strdeq	pc, [r0], -sp
   1d2a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2a4:	mov	r9, r0
   1d2a8:	ldr	r8, [r1]
   1d2ac:	sub	sp, sp, #12
   1d2b0:	mov	r6, r1
   1d2b4:	mov	fp, r2
   1d2b8:	mov	sl, r3
   1d2bc:	mov	r0, r8
   1d2c0:	mov	r7, #0
   1d2c4:	add	r4, r0, #1
   1d2c8:	mov	r1, r4
   1d2cc:	mov	r0, r7
   1d2d0:	bl	22f08 <_obstack_memory_used@@Base+0x3a7c>
   1d2d4:	mov	r3, r6
   1d2d8:	mov	r2, r4
   1d2dc:	subs	r5, r0, #0
   1d2e0:	mov	r1, r5
   1d2e4:	mov	r0, r9
   1d2e8:	beq	1d31c <__assert_fail@plt+0xb5a8>
   1d2ec:	str	r8, [r6]
   1d2f0:	str	sl, [sp, #4]
   1d2f4:	str	fp, [sp]
   1d2f8:	bl	1cf3c <__assert_fail@plt+0xb1c8>
   1d2fc:	cmn	r0, #1
   1d300:	beq	1d330 <__assert_fail@plt+0xb5bc>
   1d304:	cmp	r4, r0
   1d308:	mov	r7, r5
   1d30c:	bls	1d2c4 <__assert_fail@plt+0xb550>
   1d310:	mov	r0, r5
   1d314:	add	sp, sp, #12
   1d318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d31c:	mov	r0, r7
   1d320:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1d324:	mov	r0, r5
   1d328:	add	sp, sp, #12
   1d32c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d330:	mov	r0, r5
   1d334:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1d338:	mov	r5, #0
   1d33c:	mov	r0, r5
   1d340:	add	sp, sp, #12
   1d344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d34c:	sub	sp, sp, #20
   1d350:	mov	r5, r0
   1d354:	add	r7, r0, r1
   1d358:	mov	sl, r2
   1d35c:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1d360:	cmp	r0, #1
   1d364:	bls	1d4a4 <__assert_fail@plt+0xb730>
   1d368:	cmp	r5, r7
   1d36c:	mov	r6, #0
   1d370:	bcs	1d46c <__assert_fail@plt+0xb6f8>
   1d374:	and	r9, sl, #2
   1d378:	mov	fp, r6
   1d37c:	and	sl, sl, #1
   1d380:	mvn	r8, #-2147483648	; 0x80000000
   1d384:	b	1d3ac <__assert_fail@plt+0xb638>
   1d388:	cmp	r3, #37	; 0x25
   1d38c:	bcs	1d39c <__assert_fail@plt+0xb628>
   1d390:	sub	r3, r3, #32
   1d394:	cmp	r3, #3
   1d398:	bhi	1d3d4 <__assert_fail@plt+0xb660>
   1d39c:	add	r5, r5, #1
   1d3a0:	add	r6, r6, #1
   1d3a4:	cmp	r7, r5
   1d3a8:	bls	1d46c <__assert_fail@plt+0xb6f8>
   1d3ac:	ldrb	r3, [r5]
   1d3b0:	cmp	r3, #63	; 0x3f
   1d3b4:	bls	1d388 <__assert_fail@plt+0xb614>
   1d3b8:	cmp	r3, #65	; 0x41
   1d3bc:	bcc	1d3d4 <__assert_fail@plt+0xb660>
   1d3c0:	cmp	r3, #95	; 0x5f
   1d3c4:	bls	1d39c <__assert_fail@plt+0xb628>
   1d3c8:	sub	r3, r3, #97	; 0x61
   1d3cc:	cmp	r3, #29
   1d3d0:	bls	1d39c <__assert_fail@plt+0xb628>
   1d3d4:	str	fp, [sp, #8]
   1d3d8:	str	fp, [sp, #12]
   1d3dc:	b	1d400 <__assert_fail@plt+0xb68c>
   1d3e0:	cmp	r0, r3
   1d3e4:	bgt	1d468 <__assert_fail@plt+0xb6f4>
   1d3e8:	add	r6, r6, r0
   1d3ec:	add	r0, sp, #8
   1d3f0:	bl	11948 <mbsinit@plt>
   1d3f4:	add	r5, r5, r4
   1d3f8:	cmp	r0, #0
   1d3fc:	bne	1d3a4 <__assert_fail@plt+0xb630>
   1d400:	add	r3, sp, #8
   1d404:	sub	r2, r7, r5
   1d408:	mov	r1, r5
   1d40c:	add	r0, sp, #4
   1d410:	bl	1cee8 <__assert_fail@plt+0xb174>
   1d414:	cmn	r0, #1
   1d418:	mov	r4, r0
   1d41c:	beq	1d478 <__assert_fail@plt+0xb704>
   1d420:	cmn	r0, #2
   1d424:	beq	1d490 <__assert_fail@plt+0xb71c>
   1d428:	ldr	r0, [sp, #4]
   1d42c:	bl	118d0 <wcwidth@plt>
   1d430:	cmp	r4, #0
   1d434:	moveq	r4, #1
   1d438:	sub	r3, r8, r6
   1d43c:	cmp	r0, #0
   1d440:	bge	1d3e0 <__assert_fail@plt+0xb66c>
   1d444:	cmp	r9, #0
   1d448:	bne	1d480 <__assert_fail@plt+0xb70c>
   1d44c:	ldr	r0, [sp, #4]
   1d450:	bl	119cc <iswcntrl@plt>
   1d454:	cmp	r0, #0
   1d458:	bne	1d3ec <__assert_fail@plt+0xb678>
   1d45c:	cmn	r6, #-2147483647	; 0x80000001
   1d460:	add	r6, r6, #1
   1d464:	bne	1d3ec <__assert_fail@plt+0xb678>
   1d468:	mvn	r6, #-2147483648	; 0x80000000
   1d46c:	mov	r0, r6
   1d470:	add	sp, sp, #20
   1d474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d478:	cmp	sl, #0
   1d47c:	beq	1d39c <__assert_fail@plt+0xb628>
   1d480:	mvn	r6, #0
   1d484:	mov	r0, r6
   1d488:	add	sp, sp, #20
   1d48c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d490:	cmp	sl, #0
   1d494:	bne	1d480 <__assert_fail@plt+0xb70c>
   1d498:	add	r6, r6, #1
   1d49c:	mov	r5, r7
   1d4a0:	b	1d3a4 <__assert_fail@plt+0xb630>
   1d4a4:	cmp	r5, r7
   1d4a8:	movcs	r6, #0
   1d4ac:	bcs	1d46c <__assert_fail@plt+0xb6f8>
   1d4b0:	bl	11b58 <__ctype_b_loc@plt>
   1d4b4:	mov	r6, #0
   1d4b8:	and	r2, sl, #2
   1d4bc:	ldr	r1, [r0]
   1d4c0:	ldrb	r3, [r5], #1
   1d4c4:	lsl	r3, r3, #1
   1d4c8:	ldrh	r3, [r1, r3]
   1d4cc:	tst	r3, #16384	; 0x4000
   1d4d0:	bne	1d4e4 <__assert_fail@plt+0xb770>
   1d4d4:	cmp	r2, #0
   1d4d8:	bne	1d480 <__assert_fail@plt+0xb70c>
   1d4dc:	tst	r3, #2
   1d4e0:	bne	1d4f0 <__assert_fail@plt+0xb77c>
   1d4e4:	cmn	r6, #-2147483647	; 0x80000001
   1d4e8:	beq	1d46c <__assert_fail@plt+0xb6f8>
   1d4ec:	add	r6, r6, #1
   1d4f0:	cmp	r7, r5
   1d4f4:	bne	1d4c0 <__assert_fail@plt+0xb74c>
   1d4f8:	mov	r0, r6
   1d4fc:	add	sp, sp, #20
   1d500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d504:	push	{r4, r5, r6, lr}
   1d508:	mov	r5, r1
   1d50c:	mov	r4, r0
   1d510:	bl	11b94 <strlen@plt>
   1d514:	mov	r2, r5
   1d518:	mov	r1, r0
   1d51c:	mov	r0, r4
   1d520:	pop	{r4, r5, r6, lr}
   1d524:	b	1d348 <__assert_fail@plt+0xb5d4>
   1d528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d52c:	sub	sp, sp, #20
   1d530:	cmp	r1, #2
   1d534:	mov	r4, r0
   1d538:	str	r2, [sp]
   1d53c:	mov	r5, r3
   1d540:	bhi	1d550 <__assert_fail@plt+0xb7dc>
   1d544:	beq	1d6b8 <__assert_fail@plt+0xb944>
   1d548:	add	sp, sp, #20
   1d54c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d550:	mov	r7, r1
   1d554:	lsr	r1, r1, #1
   1d558:	mov	r6, r1
   1d55c:	str	r1, [sp, #4]
   1d560:	add	r0, r4, r6, lsl #2
   1d564:	sub	r1, r7, r1
   1d568:	bl	1d528 <__assert_fail@plt+0xb7b4>
   1d56c:	cmp	r6, #1
   1d570:	beq	1d61c <__assert_fail@plt+0xb8a8>
   1d574:	ldr	sl, [sp]
   1d578:	ldr	r2, [sp, #4]
   1d57c:	lsr	r3, r7, #2
   1d580:	bic	r6, r7, #3
   1d584:	sub	r1, r2, r3
   1d588:	add	r0, r4, r6
   1d58c:	mov	r2, sl
   1d590:	mov	fp, r3
   1d594:	str	r3, [sp, #8]
   1d598:	mov	r3, r5
   1d59c:	bl	1d528 <__assert_fail@plt+0xb7b4>
   1d5a0:	mov	r2, sl
   1d5a4:	mov	r3, r5
   1d5a8:	mov	r1, fp
   1d5ac:	mov	r0, r4
   1d5b0:	bl	1d528 <__assert_fail@plt+0xb7b4>
   1d5b4:	ldr	r8, [r4, r6]
   1d5b8:	str	r7, [sp, #12]
   1d5bc:	add	r6, sl, #4
   1d5c0:	mov	r7, r8
   1d5c4:	ldr	r9, [r4]
   1d5c8:	mov	sl, #0
   1d5cc:	ldr	r8, [sp, #4]
   1d5d0:	b	1d5ec <__assert_fail@plt+0xb878>
   1d5d4:	add	fp, fp, #1
   1d5d8:	cmp	r8, fp
   1d5dc:	str	r7, [r6, #-4]
   1d5e0:	beq	1d6e0 <__assert_fail@plt+0xb96c>
   1d5e4:	ldr	r7, [r4, fp, lsl #2]
   1d5e8:	add	r6, r6, #4
   1d5ec:	mov	r1, r7
   1d5f0:	mov	r0, r9
   1d5f4:	blx	r5
   1d5f8:	cmp	r0, #0
   1d5fc:	bgt	1d5d4 <__assert_fail@plt+0xb860>
   1d600:	ldr	r3, [sp, #8]
   1d604:	add	sl, sl, #1
   1d608:	cmp	r3, sl
   1d60c:	str	r9, [r6, #-4]
   1d610:	beq	1d708 <__assert_fail@plt+0xb994>
   1d614:	ldr	r9, [r4, sl, lsl #2]
   1d618:	b	1d5e8 <__assert_fail@plt+0xb874>
   1d61c:	ldr	r3, [sp]
   1d620:	ldr	r9, [r4]
   1d624:	str	r9, [r3]
   1d628:	ldr	r3, [sp, #4]
   1d62c:	mov	r6, #0
   1d630:	mov	sl, r6
   1d634:	ldr	r8, [r4, r3, lsl #2]
   1d638:	mov	fp, r8
   1d63c:	mov	r8, r3
   1d640:	b	1d65c <__assert_fail@plt+0xb8e8>
   1d644:	add	r8, r8, #1
   1d648:	cmp	r7, r8
   1d64c:	str	fp, [r4, r6, lsl #2]
   1d650:	beq	1d694 <__assert_fail@plt+0xb920>
   1d654:	ldr	fp, [r4, r8, lsl #2]
   1d658:	mov	r6, ip
   1d65c:	mov	r1, fp
   1d660:	mov	r0, r9
   1d664:	blx	r5
   1d668:	add	ip, r6, #1
   1d66c:	cmp	r0, #0
   1d670:	bgt	1d644 <__assert_fail@plt+0xb8d0>
   1d674:	ldr	r3, [sp, #4]
   1d678:	add	sl, sl, #1
   1d67c:	cmp	r3, sl
   1d680:	str	r9, [r4, r6, lsl #2]
   1d684:	beq	1d548 <__assert_fail@plt+0xb7d4>
   1d688:	ldr	r3, [sp]
   1d68c:	ldr	r9, [r3, sl, lsl #2]
   1d690:	b	1d658 <__assert_fail@plt+0xb8e4>
   1d694:	ldr	r3, [sp, #4]
   1d698:	add	r0, r4, ip, lsl #2
   1d69c:	sub	r2, r3, sl
   1d6a0:	ldr	r3, [sp]
   1d6a4:	lsl	r2, r2, #2
   1d6a8:	add	r1, r3, sl, lsl #2
   1d6ac:	add	sp, sp, #20
   1d6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6b4:	b	11930 <memcpy@plt>
   1d6b8:	ldm	r0, {r6, r7}
   1d6bc:	mov	r0, r6
   1d6c0:	mov	r1, r7
   1d6c4:	blx	r3
   1d6c8:	cmp	r0, #0
   1d6cc:	ble	1d548 <__assert_fail@plt+0xb7d4>
   1d6d0:	str	r7, [r4]
   1d6d4:	str	r6, [r4, #4]
   1d6d8:	add	sp, sp, #20
   1d6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6e0:	ldr	r7, [sp, #12]
   1d6e4:	ldr	r3, [sp, #8]
   1d6e8:	add	r1, r4, sl, lsl #2
   1d6ec:	sub	r2, r3, sl
   1d6f0:	mov	r0, r6
   1d6f4:	lsl	r2, r2, #2
   1d6f8:	bl	11930 <memcpy@plt>
   1d6fc:	ldr	r3, [sp]
   1d700:	ldr	r9, [r3]
   1d704:	b	1d628 <__assert_fail@plt+0xb8b4>
   1d708:	ldr	r3, [sp, #4]
   1d70c:	ldr	r7, [sp, #12]
   1d710:	mov	sl, fp
   1d714:	str	r3, [sp, #8]
   1d718:	b	1d6e4 <__assert_fail@plt+0xb970>
   1d71c:	mov	r3, r2
   1d720:	add	r2, r0, r1, lsl #2
   1d724:	b	1d528 <__assert_fail@plt+0xb7b4>
   1d728:	push	{r4, r5, r6, lr}
   1d72c:	subs	r4, r2, #0
   1d730:	mov	r6, r0
   1d734:	beq	1d760 <__assert_fail@plt+0xb9ec>
   1d738:	mov	r5, r1
   1d73c:	bl	11b1c <__ctype_tolower_loc@plt>
   1d740:	add	r3, r5, r4
   1d744:	add	r2, r6, r4
   1d748:	ldrb	lr, [r3, #-1]!
   1d74c:	ldr	ip, [r0]
   1d750:	cmp	r5, r3
   1d754:	ldr	ip, [ip, lr, lsl #2]
   1d758:	strb	ip, [r2, #-1]!
   1d75c:	bne	1d748 <__assert_fail@plt+0xb9d4>
   1d760:	mov	r0, r6
   1d764:	pop	{r4, r5, r6, pc}
   1d768:	push	{r4, r5, r6, lr}
   1d76c:	subs	r4, r2, #0
   1d770:	mov	r6, r0
   1d774:	beq	1d7a0 <__assert_fail@plt+0xba2c>
   1d778:	mov	r5, r1
   1d77c:	bl	11b28 <__ctype_toupper_loc@plt>
   1d780:	add	r3, r5, r4
   1d784:	add	r2, r6, r4
   1d788:	ldrb	lr, [r3, #-1]!
   1d78c:	ldr	ip, [r0]
   1d790:	cmp	r5, r3
   1d794:	ldr	ip, [ip, lr, lsl #2]
   1d798:	strb	ip, [r2, #-1]!
   1d79c:	bne	1d788 <__assert_fail@plt+0xba14>
   1d7a0:	mov	r0, r6
   1d7a4:	pop	{r4, r5, r6, pc}
   1d7a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7ac:	sub	sp, sp, #1104	; 0x450
   1d7b0:	sub	sp, sp, #12
   1d7b4:	mov	r4, r3
   1d7b8:	str	r3, [sp, #32]
   1d7bc:	str	r1, [sp, #28]
   1d7c0:	mov	r9, r2
   1d7c4:	mov	fp, r0
   1d7c8:	bl	11bb8 <__errno_location@plt>
   1d7cc:	ldr	r3, [r4, #40]	; 0x28
   1d7d0:	ldr	r2, [r4, #8]
   1d7d4:	mov	r1, r3
   1d7d8:	ldr	r3, [pc, #3936]	; 1e740 <__assert_fail@plt+0xc9cc>
   1d7dc:	mov	ip, r2
   1d7e0:	str	r2, [sp, #48]	; 0x30
   1d7e4:	subs	r2, r1, #0
   1d7e8:	moveq	r2, r3
   1d7ec:	cmp	ip, #12
   1d7f0:	str	r2, [sp, #56]	; 0x38
   1d7f4:	ldr	r6, [sp, #1160]	; 0x488
   1d7f8:	ldr	r3, [r0]
   1d7fc:	str	r0, [sp, #44]	; 0x2c
   1d800:	str	r3, [sp, #60]	; 0x3c
   1d804:	ldrb	r3, [sp, #1152]	; 0x480
   1d808:	str	r3, [sp, #52]	; 0x34
   1d80c:	ble	1dc94 <__assert_fail@plt+0xbf20>
   1d810:	mov	r2, ip
   1d814:	sub	r3, ip, #12
   1d818:	str	r3, [sp, #48]	; 0x30
   1d81c:	ldrb	r3, [r9]
   1d820:	cmp	r3, #0
   1d824:	beq	1edd8 <__assert_fail@plt+0xd064>
   1d828:	ldr	sl, [pc, #3860]	; 1e744 <__assert_fail@plt+0xc9d0>
   1d82c:	mov	r8, #0
   1d830:	cmp	r3, #37	; 0x25
   1d834:	beq	1d900 <__assert_fail@plt+0xbb8c>
   1d838:	bic	r6, r6, r6, asr #31
   1d83c:	ldr	r3, [sp, #28]
   1d840:	cmp	r6, #1
   1d844:	movcs	r4, r6
   1d848:	movcc	r4, #1
   1d84c:	sub	r3, r3, r8
   1d850:	cmp	r4, r3
   1d854:	bcs	1d8e0 <__assert_fail@plt+0xbb6c>
   1d858:	cmp	fp, #0
   1d85c:	beq	1d888 <__assert_fail@plt+0xbb14>
   1d860:	cmp	r6, #1
   1d864:	ble	1d880 <__assert_fail@plt+0xbb0c>
   1d868:	sub	r6, r6, #1
   1d86c:	mov	r0, fp
   1d870:	mov	r2, r6
   1d874:	mov	r1, #32
   1d878:	bl	11be8 <memset@plt>
   1d87c:	add	fp, fp, r6
   1d880:	ldrb	r3, [r9]
   1d884:	strb	r3, [fp], #1
   1d888:	add	r8, r8, r4
   1d88c:	mov	r4, r9
   1d890:	ldrb	r3, [r4, #1]
   1d894:	add	r9, r4, #1
   1d898:	mvn	r6, #0
   1d89c:	cmp	r3, #0
   1d8a0:	bne	1d830 <__assert_fail@plt+0xbabc>
   1d8a4:	ldr	r3, [sp, #28]
   1d8a8:	ldr	r2, [sp, #60]	; 0x3c
   1d8ac:	cmp	fp, #0
   1d8b0:	cmpne	r3, #0
   1d8b4:	movne	r3, #0
   1d8b8:	strbne	r3, [fp]
   1d8bc:	ldr	r3, [sp, #44]	; 0x2c
   1d8c0:	str	r2, [r3]
   1d8c4:	b	1d8f0 <__assert_fail@plt+0xbb7c>
   1d8c8:	ldr	r2, [sp, #28]
   1d8cc:	add	r8, r8, r7
   1d8d0:	sub	r2, r2, r8
   1d8d4:	cmp	r2, #1
   1d8d8:	sub	r6, r6, r7
   1d8dc:	bhi	1e094 <__assert_fail@plt+0xc320>
   1d8e0:	ldr	r2, [sp, #44]	; 0x2c
   1d8e4:	mov	r3, #34	; 0x22
   1d8e8:	str	r3, [r2]
   1d8ec:	mov	r8, #0
   1d8f0:	mov	r0, r8
   1d8f4:	add	sp, sp, #1104	; 0x450
   1d8f8:	add	sp, sp, #12
   1d8fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d900:	ldr	r3, [sp, #52]	; 0x34
   1d904:	mov	r4, r9
   1d908:	mov	r5, #0
   1d90c:	str	r5, [sp, #24]
   1d910:	str	r3, [sp, #40]	; 0x28
   1d914:	ldrb	r1, [r4, #1]!
   1d918:	sub	r3, r1, #35	; 0x23
   1d91c:	mov	r7, r1
   1d920:	cmp	r3, #60	; 0x3c
   1d924:	ldrls	pc, [pc, r3, lsl #2]
   1d928:	b	1da3c <__assert_fail@plt+0xbcc8>
   1d92c:	andeq	sp, r1, r4, lsr sl
   1d930:	andeq	sp, r1, ip, lsr sl
   1d934:	andeq	sp, r1, ip, lsr sl
   1d938:	andeq	sp, r1, ip, lsr sl
   1d93c:	andeq	sp, r1, ip, lsr sl
   1d940:	andeq	sp, r1, ip, lsr sl
   1d944:	andeq	sp, r1, ip, lsr sl
   1d948:	andeq	sp, r1, ip, lsr sl
   1d94c:	andeq	sp, r1, ip, lsr #20
   1d950:	andeq	sp, r1, ip, lsr sl
   1d954:	andeq	sp, r1, ip, lsr #20
   1d958:	andeq	sp, r1, ip, lsr sl
   1d95c:	andeq	sp, r1, ip, lsr sl
   1d960:	andeq	sp, r1, ip, lsr #20
   1d964:	andeq	sp, r1, ip, lsr sl
   1d968:	andeq	sp, r1, ip, lsr sl
   1d96c:	andeq	sp, r1, ip, lsr sl
   1d970:	andeq	sp, r1, ip, lsr sl
   1d974:	andeq	sp, r1, ip, lsr sl
   1d978:	andeq	sp, r1, ip, lsr sl
   1d97c:	andeq	sp, r1, ip, lsr sl
   1d980:	andeq	sp, r1, ip, lsr sl
   1d984:	andeq	sp, r1, ip, lsr sl
   1d988:	andeq	sp, r1, ip, lsr sl
   1d98c:	andeq	sp, r1, ip, lsr sl
   1d990:	andeq	sp, r1, ip, lsr sl
   1d994:	andeq	sp, r1, ip, lsr sl
   1d998:	andeq	sp, r1, ip, lsr sl
   1d99c:	andeq	sp, r1, ip, lsr sl
   1d9a0:	andeq	sp, r1, ip, lsr sl
   1d9a4:	andeq	sp, r1, ip, lsr sl
   1d9a8:	andeq	sp, r1, ip, lsr sl
   1d9ac:	andeq	sp, r1, ip, lsr sl
   1d9b0:	andeq	sp, r1, ip, lsr sl
   1d9b4:	andeq	sp, r1, ip, lsr sl
   1d9b8:	andeq	sp, r1, ip, lsr sl
   1d9bc:	andeq	sp, r1, ip, lsr sl
   1d9c0:	andeq	sp, r1, ip, lsr sl
   1d9c4:	andeq	sp, r1, ip, lsr sl
   1d9c8:	andeq	sp, r1, ip, lsr sl
   1d9cc:	andeq	sp, r1, ip, lsr sl
   1d9d0:	andeq	sp, r1, ip, lsr sl
   1d9d4:	andeq	sp, r1, ip, lsr sl
   1d9d8:	andeq	sp, r1, ip, lsr sl
   1d9dc:	andeq	sp, r1, ip, lsr sl
   1d9e0:	andeq	sp, r1, ip, lsr sl
   1d9e4:	andeq	sp, r1, ip, lsr sl
   1d9e8:	andeq	sp, r1, ip, lsr sl
   1d9ec:	andeq	sp, r1, ip, lsr sl
   1d9f0:	andeq	sp, r1, ip, lsr sl
   1d9f4:	andeq	sp, r1, ip, lsr sl
   1d9f8:	andeq	sp, r1, ip, lsr sl
   1d9fc:	andeq	sp, r1, ip, lsr sl
   1da00:	andeq	sp, r1, ip, lsr sl
   1da04:	andeq	sp, r1, ip, lsr sl
   1da08:	andeq	sp, r1, ip, lsr sl
   1da0c:	andeq	sp, r1, ip, lsr sl
   1da10:	andeq	sp, r1, ip, lsr sl
   1da14:	andeq	sp, r1, ip, lsr sl
   1da18:	andeq	sp, r1, r0, lsr #20
   1da1c:	andeq	sp, r1, ip, lsr #20
   1da20:	mov	r3, #1
   1da24:	str	r3, [sp, #40]	; 0x28
   1da28:	b	1d914 <__assert_fail@plt+0xbba0>
   1da2c:	str	r1, [sp, #24]
   1da30:	b	1d914 <__assert_fail@plt+0xbba0>
   1da34:	mov	r5, #1
   1da38:	b	1d914 <__assert_fail@plt+0xbba0>
   1da3c:	sub	r3, r1, #48	; 0x30
   1da40:	cmp	r3, #9
   1da44:	bhi	1da88 <__assert_fail@plt+0xbd14>
   1da48:	mov	r6, #0
   1da4c:	mvn	r7, #-2147483648	; 0x80000000
   1da50:	cmp	r6, #0
   1da54:	blt	1dd58 <__assert_fail@plt+0xbfe4>
   1da58:	ldr	r3, [pc, #3304]	; 1e748 <__assert_fail@plt+0xc9d4>
   1da5c:	cmp	r6, r3
   1da60:	ble	1dd74 <__assert_fail@plt+0xc000>
   1da64:	mov	r3, r4
   1da68:	ldrb	r1, [r3, #1]
   1da6c:	add	r4, r3, #1
   1da70:	mov	r3, r4
   1da74:	sub	r2, r1, #48	; 0x30
   1da78:	cmp	r2, #9
   1da7c:	bls	1da68 <__assert_fail@plt+0xbcf4>
   1da80:	mov	r7, r1
   1da84:	mvn	r6, #-2147483648	; 0x80000000
   1da88:	cmp	r1, #69	; 0x45
   1da8c:	beq	1dca8 <__assert_fail@plt+0xbf34>
   1da90:	cmp	r1, #79	; 0x4f
   1da94:	movne	r7, #0
   1da98:	beq	1dca8 <__assert_fail@plt+0xbf34>
   1da9c:	cmp	r1, #122	; 0x7a
   1daa0:	ldrls	pc, [pc, r1, lsl #2]
   1daa4:	b	1dcb8 <__assert_fail@plt+0xbf44>
   1daa8:			; <UNDEFINED> instruction: 0x0001dcb4
   1daac:			; <UNDEFINED> instruction: 0x0001dcb8
   1dab0:			; <UNDEFINED> instruction: 0x0001dcb8
   1dab4:			; <UNDEFINED> instruction: 0x0001dcb8
   1dab8:			; <UNDEFINED> instruction: 0x0001dcb8
   1dabc:			; <UNDEFINED> instruction: 0x0001dcb8
   1dac0:			; <UNDEFINED> instruction: 0x0001dcb8
   1dac4:			; <UNDEFINED> instruction: 0x0001dcb8
   1dac8:			; <UNDEFINED> instruction: 0x0001dcb8
   1dacc:			; <UNDEFINED> instruction: 0x0001dcb8
   1dad0:			; <UNDEFINED> instruction: 0x0001dcb8
   1dad4:			; <UNDEFINED> instruction: 0x0001dcb8
   1dad8:			; <UNDEFINED> instruction: 0x0001dcb8
   1dadc:			; <UNDEFINED> instruction: 0x0001dcb8
   1dae0:			; <UNDEFINED> instruction: 0x0001dcb8
   1dae4:			; <UNDEFINED> instruction: 0x0001dcb8
   1dae8:			; <UNDEFINED> instruction: 0x0001dcb8
   1daec:			; <UNDEFINED> instruction: 0x0001dcb8
   1daf0:			; <UNDEFINED> instruction: 0x0001dcb8
   1daf4:			; <UNDEFINED> instruction: 0x0001dcb8
   1daf8:			; <UNDEFINED> instruction: 0x0001dcb8
   1dafc:			; <UNDEFINED> instruction: 0x0001dcb8
   1db00:			; <UNDEFINED> instruction: 0x0001dcb8
   1db04:			; <UNDEFINED> instruction: 0x0001dcb8
   1db08:			; <UNDEFINED> instruction: 0x0001dcb8
   1db0c:			; <UNDEFINED> instruction: 0x0001dcb8
   1db10:			; <UNDEFINED> instruction: 0x0001dcb8
   1db14:			; <UNDEFINED> instruction: 0x0001dcb8
   1db18:			; <UNDEFINED> instruction: 0x0001dcb8
   1db1c:			; <UNDEFINED> instruction: 0x0001dcb8
   1db20:			; <UNDEFINED> instruction: 0x0001dcb8
   1db24:			; <UNDEFINED> instruction: 0x0001dcb8
   1db28:			; <UNDEFINED> instruction: 0x0001dcb8
   1db2c:			; <UNDEFINED> instruction: 0x0001dcb8
   1db30:			; <UNDEFINED> instruction: 0x0001dcb8
   1db34:			; <UNDEFINED> instruction: 0x0001dcb8
   1db38:			; <UNDEFINED> instruction: 0x0001dcb8
   1db3c:	andeq	lr, r1, r8, asr #21
   1db40:			; <UNDEFINED> instruction: 0x0001dcb8
   1db44:			; <UNDEFINED> instruction: 0x0001dcb8
   1db48:			; <UNDEFINED> instruction: 0x0001dcb8
   1db4c:			; <UNDEFINED> instruction: 0x0001dcb8
   1db50:			; <UNDEFINED> instruction: 0x0001dcb8
   1db54:			; <UNDEFINED> instruction: 0x0001dcb8
   1db58:			; <UNDEFINED> instruction: 0x0001dcb8
   1db5c:			; <UNDEFINED> instruction: 0x0001dcb8
   1db60:			; <UNDEFINED> instruction: 0x0001dcb8
   1db64:			; <UNDEFINED> instruction: 0x0001dcb8
   1db68:			; <UNDEFINED> instruction: 0x0001dcb8
   1db6c:			; <UNDEFINED> instruction: 0x0001dcb8
   1db70:			; <UNDEFINED> instruction: 0x0001dcb8
   1db74:			; <UNDEFINED> instruction: 0x0001dcb8
   1db78:			; <UNDEFINED> instruction: 0x0001dcb8
   1db7c:			; <UNDEFINED> instruction: 0x0001dcb8
   1db80:			; <UNDEFINED> instruction: 0x0001dcb8
   1db84:			; <UNDEFINED> instruction: 0x0001dcb8
   1db88:			; <UNDEFINED> instruction: 0x0001dcb8
   1db8c:			; <UNDEFINED> instruction: 0x0001dcb8
   1db90:	andeq	lr, r1, r8, asr #25
   1db94:			; <UNDEFINED> instruction: 0x0001dcb8
   1db98:			; <UNDEFINED> instruction: 0x0001dcb8
   1db9c:			; <UNDEFINED> instruction: 0x0001dcb8
   1dba0:			; <UNDEFINED> instruction: 0x0001dcb8
   1dba4:			; <UNDEFINED> instruction: 0x0001dcb8
   1dba8:			; <UNDEFINED> instruction: 0x0001dcb8
   1dbac:	andeq	lr, r1, r0, asr #2
   1dbb0:	andeq	sp, r1, ip, lsl lr
   1dbb4:	andeq	lr, r1, r4, ror #9
   1dbb8:	ldrdeq	lr, [r1], -r4
   1dbbc:			; <UNDEFINED> instruction: 0x0001dcb8
   1dbc0:	andeq	lr, r1, r8, lsr #19
   1dbc4:	andeq	lr, r1, r0, lsr #16
   1dbc8:	andeq	lr, r1, r8, lsr #26
   1dbcc:	ldrdeq	lr, [r1], -r4
   1dbd0:			; <UNDEFINED> instruction: 0x0001dcb8
   1dbd4:			; <UNDEFINED> instruction: 0x0001dcb8
   1dbd8:			; <UNDEFINED> instruction: 0x0001dcb8
   1dbdc:			; <UNDEFINED> instruction: 0x0001eab0
   1dbe0:	andeq	lr, r1, ip, lsl #23
   1dbe4:			; <UNDEFINED> instruction: 0x0001dcb8
   1dbe8:	andeq	lr, r1, r4, lsl #23
   1dbec:			; <UNDEFINED> instruction: 0x0001dcb8
   1dbf0:	andeq	lr, r1, r8, ror fp
   1dbf4:	andeq	lr, r1, r0, ror #22
   1dbf8:	andeq	lr, r1, r4, asr fp
   1dbfc:	andeq	lr, r1, r0, ror r5
   1dc00:	andeq	lr, r1, r0, lsr #16
   1dc04:	andeq	lr, r1, ip, ror #25
   1dc08:	andeq	lr, r1, r4, lsr r1
   1dc0c:	andeq	lr, r1, ip, ror #6
   1dc10:			; <UNDEFINED> instruction: 0x0001e2bc
   1dc14:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc18:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc1c:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc20:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc24:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc28:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc2c:	andeq	lr, r1, r0, asr #2
   1dc30:	andeq	lr, r1, r4, lsr r2
   1dc34:	andeq	lr, r1, r4, lsr r1
   1dc38:	andeq	sp, r1, r4, asr #30
   1dc3c:	andeq	lr, r1, r4, ror #11
   1dc40:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc44:	andeq	lr, r1, r0, lsr #16
   1dc48:	andeq	lr, r1, r4, lsr r2
   1dc4c:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc50:	andeq	lr, r1, r8, lsr #11
   1dc54:	ldrdeq	lr, [r1], -r8
   1dc58:	andeq	lr, r1, r8, asr #13
   1dc5c:	andeq	lr, r1, ip, lsl #13
   1dc60:	andeq	lr, r1, ip, lsl #12
   1dc64:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc68:	andeq	lr, r1, r0, lsr #14
   1dc6c:	andeq	lr, r1, ip, ror #13
   1dc70:	andeq	sp, r1, r0, lsr lr
   1dc74:	andeq	lr, r1, r8, lsl #15
   1dc78:	andeq	lr, r1, r4, lsr sl
   1dc7c:	andeq	lr, r1, r0, lsl #20
   1dc80:			; <UNDEFINED> instruction: 0x0001dcb8
   1dc84:	andeq	lr, r1, r8, ror #19
   1dc88:	andeq	lr, r1, r4, lsr r1
   1dc8c:	andeq	lr, r1, r8, asr r2
   1dc90:	andeq	lr, r1, r8, ror r1
   1dc94:	ldr	r2, [sp, #48]	; 0x30
   1dc98:	subs	r3, r2, #0
   1dc9c:	moveq	r3, #12
   1dca0:	str	r3, [sp, #48]	; 0x30
   1dca4:	b	1d81c <__assert_fail@plt+0xbaa8>
   1dca8:	ldrb	r1, [r4, #1]
   1dcac:	add	r4, r4, #1
   1dcb0:	b	1da9c <__assert_fail@plt+0xbd28>
   1dcb4:	sub	r4, r4, #1
   1dcb8:	ldr	r3, [sp, #24]
   1dcbc:	sub	r5, r4, r9
   1dcc0:	subs	r3, r3, #45	; 0x2d
   1dcc4:	movne	r3, #1
   1dcc8:	cmp	r6, #0
   1dccc:	movlt	r3, #0
   1dcd0:	cmp	r3, #0
   1dcd4:	add	r5, r5, #1
   1dcd8:	moveq	r6, #0
   1dcdc:	ldr	r3, [sp, #28]
   1dce0:	cmp	r5, r6
   1dce4:	movcs	r7, r5
   1dce8:	movcc	r7, r6
   1dcec:	sub	r3, r3, r8
   1dcf0:	cmp	r7, r3
   1dcf4:	bcs	1d8e0 <__assert_fail@plt+0xbb6c>
   1dcf8:	cmp	fp, #0
   1dcfc:	beq	1dd50 <__assert_fail@plt+0xbfdc>
   1dd00:	cmp	r5, r6
   1dd04:	bcs	1dd30 <__assert_fail@plt+0xbfbc>
   1dd08:	ldr	r3, [sp, #24]
   1dd0c:	sub	r6, r6, r5
   1dd10:	cmp	r3, #43	; 0x2b
   1dd14:	cmpne	r3, #48	; 0x30
   1dd18:	mov	r0, fp
   1dd1c:	mov	r2, r6
   1dd20:	moveq	r1, #48	; 0x30
   1dd24:	movne	r1, #32
   1dd28:	bl	11be8 <memset@plt>
   1dd2c:	add	fp, fp, r6
   1dd30:	ldr	r3, [sp, #40]	; 0x28
   1dd34:	mov	r1, r9
   1dd38:	cmp	r3, #0
   1dd3c:	mov	r2, r5
   1dd40:	mov	r0, fp
   1dd44:	beq	1e12c <__assert_fail@plt+0xc3b8>
   1dd48:	bl	1d768 <__assert_fail@plt+0xb9f4>
   1dd4c:	add	fp, fp, r5
   1dd50:	add	r8, r8, r7
   1dd54:	b	1d890 <__assert_fail@plt+0xbb1c>
   1dd58:	cmn	r6, #1
   1dd5c:	beq	1ddf0 <__assert_fail@plt+0xc07c>
   1dd60:	mov	r1, r6
   1dd64:	mov	r0, #-2147483648	; 0x80000000
   1dd68:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   1dd6c:	cmp	r0, #9
   1dd70:	ble	1da64 <__assert_fail@plt+0xbcf0>
   1dd74:	ldrb	r0, [r4]
   1dd78:	add	r6, r6, r6, lsl #2
   1dd7c:	cmp	r0, #47	; 0x2f
   1dd80:	lsl	r3, r6, #1
   1dd84:	mov	r1, r3
   1dd88:	ble	1de08 <__assert_fail@plt+0xc094>
   1dd8c:	cmp	r3, #0
   1dd90:	blt	1ddcc <__assert_fail@plt+0xc058>
   1dd94:	sub	r2, r0, #48	; 0x30
   1dd98:	sub	r2, r7, r2
   1dd9c:	cmp	r3, r2
   1dda0:	movle	r2, #0
   1dda4:	movgt	r2, #1
   1dda8:	cmp	r2, #0
   1ddac:	beq	1ddcc <__assert_fail@plt+0xc058>
   1ddb0:	ldrb	r1, [r4, #1]
   1ddb4:	add	r3, r4, #1
   1ddb8:	sub	r2, r1, #48	; 0x30
   1ddbc:	cmp	r2, #9
   1ddc0:	bls	1da68 <__assert_fail@plt+0xbcf4>
   1ddc4:	mov	r4, r3
   1ddc8:	b	1da80 <__assert_fail@plt+0xbd0c>
   1ddcc:	ldrb	r1, [r4, #1]
   1ddd0:	add	r3, r0, r3
   1ddd4:	sub	r6, r3, #48	; 0x30
   1ddd8:	sub	r3, r1, #48	; 0x30
   1dddc:	cmp	r3, #9
   1dde0:	add	r4, r4, #1
   1dde4:	bls	1da50 <__assert_fail@plt+0xbcdc>
   1dde8:	mov	r7, r1
   1ddec:	b	1da88 <__assert_fail@plt+0xbd14>
   1ddf0:	ldrb	r0, [r4]
   1ddf4:	cmp	r0, #47	; 0x2f
   1ddf8:	mvngt	r3, #9
   1ddfc:	bgt	1ddcc <__assert_fail@plt+0xc058>
   1de00:	mvn	r1, #9
   1de04:	mov	r3, r1
   1de08:	rsb	r2, r0, #-2147483600	; 0x80000030
   1de0c:	cmp	r2, r1
   1de10:	movle	r2, #0
   1de14:	movgt	r2, #1
   1de18:	b	1dda8 <__assert_fail@plt+0xc034>
   1de1c:	cmp	r7, #69	; 0x45
   1de20:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1de24:	cmp	r5, #0
   1de28:	beq	1de34 <__assert_fail@plt+0xc0c0>
   1de2c:	str	r5, [sp, #40]	; 0x28
   1de30:	mov	r5, #0
   1de34:	cmp	r7, #0
   1de38:	mov	r2, #32
   1de3c:	mov	r3, #37	; 0x25
   1de40:	strb	r2, [sp, #72]	; 0x48
   1de44:	strb	r3, [sp, #73]	; 0x49
   1de48:	addeq	r9, sp, #72	; 0x48
   1de4c:	addeq	ip, sp, #74	; 0x4a
   1de50:	bne	1df34 <__assert_fail@plt+0xc1c0>
   1de54:	mov	lr, #0
   1de58:	strb	r1, [ip]
   1de5c:	mov	r2, r9
   1de60:	add	r0, sp, #88	; 0x58
   1de64:	ldr	r3, [sp, #32]
   1de68:	strb	lr, [ip, #1]
   1de6c:	mov	r1, #1024	; 0x400
   1de70:	bl	11b04 <strftime@plt>
   1de74:	cmp	r0, #0
   1de78:	beq	1d890 <__assert_fail@plt+0xbb1c>
   1de7c:	ldr	r2, [sp, #24]
   1de80:	mvn	r3, r6
   1de84:	cmp	r2, #45	; 0x2d
   1de88:	lsr	r3, r3, #31
   1de8c:	moveq	r3, #0
   1de90:	cmp	r3, #0
   1de94:	sub	r7, r0, #1
   1de98:	moveq	r6, #0
   1de9c:	ldr	r3, [sp, #28]
   1dea0:	cmp	r7, r6
   1dea4:	movcs	r9, r7
   1dea8:	movcc	r9, r6
   1deac:	sub	r3, r3, r8
   1deb0:	cmp	r9, r3
   1deb4:	bcs	1d8e0 <__assert_fail@plt+0xbb6c>
   1deb8:	cmp	fp, #0
   1debc:	beq	1df18 <__assert_fail@plt+0xc1a4>
   1dec0:	cmp	r7, r6
   1dec4:	bcs	1def0 <__assert_fail@plt+0xc17c>
   1dec8:	ldr	r3, [sp, #24]
   1decc:	sub	r6, r6, r7
   1ded0:	cmp	r3, #43	; 0x2b
   1ded4:	cmpne	r3, #48	; 0x30
   1ded8:	mov	r0, fp
   1dedc:	mov	r2, r6
   1dee0:	moveq	r1, #48	; 0x30
   1dee4:	movne	r1, #32
   1dee8:	bl	11be8 <memset@plt>
   1deec:	add	fp, fp, r6
   1def0:	cmp	r5, #0
   1def4:	bne	1ed60 <__assert_fail@plt+0xcfec>
   1def8:	ldr	r3, [sp, #40]	; 0x28
   1defc:	add	r1, sp, #89	; 0x59
   1df00:	cmp	r3, #0
   1df04:	mov	r2, r7
   1df08:	mov	r0, fp
   1df0c:	beq	1e124 <__assert_fail@plt+0xc3b0>
   1df10:	bl	1d768 <__assert_fail@plt+0xb9f4>
   1df14:	add	fp, fp, r7
   1df18:	add	r8, r8, r9
   1df1c:	b	1d890 <__assert_fail@plt+0xbb1c>
   1df20:	mov	r5, #0
   1df24:	mov	r2, #32
   1df28:	mov	r3, #37	; 0x25
   1df2c:	strb	r2, [sp, #72]	; 0x48
   1df30:	strb	r3, [sp, #73]	; 0x49
   1df34:	add	r9, sp, #72	; 0x48
   1df38:	strb	r7, [sp, #74]	; 0x4a
   1df3c:	add	ip, r9, #3
   1df40:	b	1de54 <__assert_fail@plt+0xc0e0>
   1df44:	cmp	r7, #69	; 0x45
   1df48:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1df4c:	ldr	r3, [sp, #32]
   1df50:	mov	lr, #2
   1df54:	ldr	r2, [r3, #12]
   1df58:	mov	r3, r2
   1df5c:	mov	r0, #0
   1df60:	lsr	r2, r2, #31
   1df64:	cmp	r3, r0
   1df68:	str	r2, [sp, #36]	; 0x24
   1df6c:	mov	ip, r0
   1df70:	movlt	r2, #0
   1df74:	movge	r2, #1
   1df78:	cmp	r7, #79	; 0x4f
   1df7c:	movne	r2, #0
   1df80:	andeq	r2, r2, #1
   1df84:	cmp	r2, #0
   1df88:	uxtbne	r1, r1
   1df8c:	bne	1df20 <__assert_fail@plt+0xc1ac>
   1df90:	ldr	r2, [sp, #36]	; 0x24
   1df94:	cmp	r2, #0
   1df98:	rsbne	r3, r3, #0
   1df9c:	add	r9, sp, #72	; 0x48
   1dfa0:	add	r5, r9, #14
   1dfa4:	mov	r2, r5
   1dfa8:	mov	r5, r3
   1dfac:	mov	r3, r2
   1dfb0:	tst	r0, #1
   1dfb4:	movne	r2, #58	; 0x3a
   1dfb8:	mov	r7, r3
   1dfbc:	strbne	r2, [r3, #-1]
   1dfc0:	subne	r7, r3, #1
   1dfc4:	ldr	r3, [pc, #1920]	; 1e74c <__assert_fail@plt+0xc9d8>
   1dfc8:	asrs	r0, r0, #1
   1dfcc:	movne	r1, #1
   1dfd0:	umull	r3, r2, r3, r5
   1dfd4:	moveq	r1, #0
   1dfd8:	lsr	r2, r2, #3
   1dfdc:	cmp	r2, #0
   1dfe0:	orrne	r1, r1, #1
   1dfe4:	add	r3, r2, r2, lsl #2
   1dfe8:	cmp	r1, #0
   1dfec:	sub	r3, r5, r3, lsl #1
   1dff0:	add	r3, r3, #48	; 0x30
   1dff4:	strb	r3, [r7, #-1]
   1dff8:	mov	r5, r2
   1dffc:	sub	r3, r7, #1
   1e000:	bne	1dfb0 <__assert_fail@plt+0xc23c>
   1e004:	mov	r5, r3
   1e008:	ldr	r3, [sp, #24]
   1e00c:	cmp	r3, #0
   1e010:	beq	1ed4c <__assert_fail@plt+0xcfd8>
   1e014:	subs	r3, r3, #45	; 0x2d
   1e018:	movne	r3, #1
   1e01c:	str	r3, [sp, #64]	; 0x40
   1e020:	ldr	r3, [sp, #36]	; 0x24
   1e024:	cmp	r6, #0
   1e028:	movlt	r6, lr
   1e02c:	cmp	r3, #0
   1e030:	bne	1ed40 <__assert_fail@plt+0xcfcc>
   1e034:	cmp	ip, #0
   1e038:	beq	1ed74 <__assert_fail@plt+0xd000>
   1e03c:	mov	r3, #43	; 0x2b
   1e040:	str	r3, [sp, #36]	; 0x24
   1e044:	add	r3, r9, #14
   1e048:	sub	r3, r3, r5
   1e04c:	sub	r7, r6, #1
   1e050:	ldr	r2, [sp, #64]	; 0x40
   1e054:	sub	r7, r7, r3
   1e058:	cmp	r7, #0
   1e05c:	movle	r2, #0
   1e060:	andgt	r2, r2, #1
   1e064:	cmp	r2, #0
   1e068:	ldr	r2, [sp, #24]
   1e06c:	moveq	r7, #0
   1e070:	cmp	r2, #95	; 0x5f
   1e074:	beq	1eda8 <__assert_fail@plt+0xd034>
   1e078:	ldr	r2, [sp, #28]
   1e07c:	sub	r2, r2, r8
   1e080:	cmp	r2, #1
   1e084:	bls	1d8e0 <__assert_fail@plt+0xbb6c>
   1e088:	cmp	fp, #0
   1e08c:	ldrbne	r2, [sp, #36]	; 0x24
   1e090:	strbne	r2, [fp], #1
   1e094:	ldr	r9, [sp, #64]	; 0x40
   1e098:	sub	r6, r6, #1
   1e09c:	cmp	r6, #0
   1e0a0:	movlt	r9, #0
   1e0a4:	andge	r9, r9, #1
   1e0a8:	cmp	r9, #0
   1e0ac:	add	r8, r8, #1
   1e0b0:	mov	r7, r3
   1e0b4:	moveq	r6, r9
   1e0b8:	ldr	r3, [sp, #28]
   1e0bc:	cmp	r6, r7
   1e0c0:	movcs	r9, r6
   1e0c4:	movcc	r9, r7
   1e0c8:	sub	r3, r3, r8
   1e0cc:	cmp	r9, r3
   1e0d0:	bcs	1d8e0 <__assert_fail@plt+0xbb6c>
   1e0d4:	cmp	fp, #0
   1e0d8:	beq	1df18 <__assert_fail@plt+0xc1a4>
   1e0dc:	cmp	r6, r7
   1e0e0:	bls	1e10c <__assert_fail@plt+0xc398>
   1e0e4:	ldr	r3, [sp, #24]
   1e0e8:	sub	r6, r6, r7
   1e0ec:	cmp	r3, #43	; 0x2b
   1e0f0:	cmpne	r3, #48	; 0x30
   1e0f4:	mov	r0, fp
   1e0f8:	mov	r2, r6
   1e0fc:	moveq	r1, #48	; 0x30
   1e100:	movne	r1, #32
   1e104:	bl	11be8 <memset@plt>
   1e108:	add	fp, fp, r6
   1e10c:	ldr	r3, [sp, #40]	; 0x28
   1e110:	mov	r1, r5
   1e114:	cmp	r3, #0
   1e118:	mov	r2, r7
   1e11c:	mov	r0, fp
   1e120:	bne	1df10 <__assert_fail@plt+0xc19c>
   1e124:	bl	11930 <memcpy@plt>
   1e128:	b	1df14 <__assert_fail@plt+0xc1a0>
   1e12c:	bl	11930 <memcpy@plt>
   1e130:	b	1dd4c <__assert_fail@plt+0xbfd8>
   1e134:	cmp	r7, #79	; 0x4f
   1e138:	bne	1de30 <__assert_fail@plt+0xc0bc>
   1e13c:	b	1dcb8 <__assert_fail@plt+0xbf44>
   1e140:	cmp	r7, #0
   1e144:	bne	1dcb8 <__assert_fail@plt+0xbf44>
   1e148:	ldr	r3, [sp, #40]	; 0x28
   1e14c:	cmp	r5, #0
   1e150:	moveq	r5, r3
   1e154:	mov	r2, #32
   1e158:	mov	r3, #37	; 0x25
   1e15c:	add	r9, sp, #72	; 0x48
   1e160:	str	r5, [sp, #40]	; 0x28
   1e164:	strb	r2, [sp, #72]	; 0x48
   1e168:	strb	r3, [sp, #73]	; 0x49
   1e16c:	add	ip, r9, #2
   1e170:	mov	r5, #0
   1e174:	b	1de54 <__assert_fail@plt+0xc0e0>
   1e178:	mov	lr, #0
   1e17c:	ldr	r2, [sp, #32]
   1e180:	ldr	r3, [r2, #32]
   1e184:	cmp	r3, #0
   1e188:	blt	1d890 <__assert_fail@plt+0xbb1c>
   1e18c:	ldr	ip, [r2, #36]	; 0x24
   1e190:	mov	r3, r2
   1e194:	cmp	ip, #0
   1e198:	blt	1f054 <__assert_fail@plt+0xd2e0>
   1e19c:	movne	r3, #0
   1e1a0:	strne	r3, [sp, #36]	; 0x24
   1e1a4:	bne	1e1c0 <__assert_fail@plt+0xc44c>
   1e1a8:	ldr	r3, [sp, #56]	; 0x38
   1e1ac:	ldrb	r3, [r3]
   1e1b0:	sub	r3, r3, #45	; 0x2d
   1e1b4:	clz	r3, r3
   1e1b8:	lsr	r3, r3, #5
   1e1bc:	str	r3, [sp, #36]	; 0x24
   1e1c0:	ldr	r3, [pc, #1416]	; 1e750 <__assert_fail@plt+0xc9dc>
   1e1c4:	smull	r3, r2, r3, ip
   1e1c8:	ldr	r3, [pc, #1412]	; 1e754 <__assert_fail@plt+0xc9e0>
   1e1cc:	add	r2, r2, ip
   1e1d0:	smull	r3, r5, r3, ip
   1e1d4:	add	r0, r5, ip
   1e1d8:	asr	r3, ip, #31
   1e1dc:	str	r0, [sp, #64]	; 0x40
   1e1e0:	ldr	r0, [pc, #1384]	; 1e750 <__assert_fail@plt+0xc9dc>
   1e1e4:	rsb	r2, r3, r2, asr #5
   1e1e8:	smull	r5, r0, r0, r2
   1e1ec:	add	r0, r0, r2
   1e1f0:	asr	r5, r2, #31
   1e1f4:	rsb	r0, r5, r0, asr #5
   1e1f8:	rsb	r5, r2, r2, lsl #4
   1e1fc:	rsb	r0, r0, r0, lsl #4
   1e200:	str	r0, [sp, #68]	; 0x44
   1e204:	ldr	r0, [sp, #64]	; 0x40
   1e208:	sub	ip, ip, r5, lsl #2
   1e20c:	rsb	r3, r3, r0, asr #11
   1e210:	ldr	r0, [sp, #68]	; 0x44
   1e214:	sub	r0, r2, r0, lsl #2
   1e218:	cmp	lr, #3
   1e21c:	ldrls	pc, [pc, lr, lsl #2]
   1e220:	b	1dcb8 <__assert_fail@plt+0xbf44>
   1e224:	strdeq	pc, [r1], -r8
   1e228:	ldrdeq	pc, [r1], -r8
   1e22c:	andeq	pc, r1, ip, lsr #1
   1e230:	andeq	pc, r1, r8, lsl #1
   1e234:	ldr	r3, [sp, #40]	; 0x28
   1e238:	cmp	r5, #0
   1e23c:	movne	r3, r5
   1e240:	cmp	r7, #69	; 0x45
   1e244:	str	r3, [sp, #40]	; 0x28
   1e248:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e24c:	uxtb	r1, r1
   1e250:	mov	r5, #0
   1e254:	b	1de34 <__assert_fail@plt+0xc0c0>
   1e258:	cmp	r7, #69	; 0x45
   1e25c:	beq	1df20 <__assert_fail@plt+0xc1ac>
   1e260:	ldr	r3, [sp, #32]
   1e264:	mov	r0, #100	; 0x64
   1e268:	ldr	r2, [r3, #20]
   1e26c:	ldr	r3, [pc, #1272]	; 1e76c <__assert_fail@plt+0xc9f8>
   1e270:	smull	r3, ip, r3, r2
   1e274:	asr	r3, r2, #31
   1e278:	rsb	r3, r3, ip, asr #5
   1e27c:	mul	r3, r0, r3
   1e280:	subs	r3, r2, r3
   1e284:	bmi	1efb8 <__assert_fail@plt+0xd244>
   1e288:	ldr	r2, [sp, #24]
   1e28c:	cmp	r2, #0
   1e290:	beq	1e984 <__assert_fail@plt+0xcc10>
   1e294:	mov	r2, #1
   1e298:	mov	r0, #0
   1e29c:	str	r0, [sp, #36]	; 0x24
   1e2a0:	ldr	r0, [sp, #24]
   1e2a4:	cmp	r0, #43	; 0x2b
   1e2a8:	beq	1ee10 <__assert_fail@plt+0xd09c>
   1e2ac:	mov	ip, #0
   1e2b0:	mov	lr, #2
   1e2b4:	mov	r0, #0
   1e2b8:	b	1df78 <__assert_fail@plt+0xc204>
   1e2bc:	ldr	r0, [sp, #56]	; 0x38
   1e2c0:	bl	11b94 <strlen@plt>
   1e2c4:	ldr	r2, [sp, #24]
   1e2c8:	mvn	r3, r6
   1e2cc:	cmp	r2, #45	; 0x2d
   1e2d0:	lsr	r3, r3, #31
   1e2d4:	moveq	r3, #0
   1e2d8:	cmp	r3, #0
   1e2dc:	moveq	r6, #0
   1e2e0:	ldr	r3, [sp, #40]	; 0x28
   1e2e4:	cmp	r5, #0
   1e2e8:	movne	r3, #0
   1e2ec:	str	r3, [sp, #40]	; 0x28
   1e2f0:	ldr	r3, [sp, #28]
   1e2f4:	sub	r3, r3, r8
   1e2f8:	cmp	r0, r6
   1e2fc:	movcs	r9, r0
   1e300:	movcc	r9, r6
   1e304:	cmp	r9, r3
   1e308:	mov	r7, r0
   1e30c:	bcs	1d8e0 <__assert_fail@plt+0xbb6c>
   1e310:	cmp	fp, #0
   1e314:	beq	1df18 <__assert_fail@plt+0xc1a4>
   1e318:	cmp	r0, r6
   1e31c:	bcs	1e348 <__assert_fail@plt+0xc5d4>
   1e320:	ldr	r3, [sp, #24]
   1e324:	sub	r6, r6, r0
   1e328:	cmp	r3, #43	; 0x2b
   1e32c:	cmpne	r3, #48	; 0x30
   1e330:	mov	r0, fp
   1e334:	mov	r2, r6
   1e338:	moveq	r1, #48	; 0x30
   1e33c:	movne	r1, #32
   1e340:	bl	11be8 <memset@plt>
   1e344:	add	fp, fp, r6
   1e348:	cmp	r5, #0
   1e34c:	bne	1eef8 <__assert_fail@plt+0xd184>
   1e350:	ldr	r3, [sp, #40]	; 0x28
   1e354:	mov	r2, r7
   1e358:	cmp	r3, #0
   1e35c:	ldr	r1, [sp, #56]	; 0x38
   1e360:	mov	r0, fp
   1e364:	beq	1e124 <__assert_fail@plt+0xc3b0>
   1e368:	b	1df10 <__assert_fail@plt+0xc19c>
   1e36c:	cmp	r7, #69	; 0x45
   1e370:	beq	1df20 <__assert_fail@plt+0xc1ac>
   1e374:	cmp	r7, #79	; 0x4f
   1e378:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e37c:	ldr	r3, [sp, #32]
   1e380:	ldr	r0, [pc, #1012]	; 1e77c <__assert_fail@plt+0xca08>
   1e384:	ldr	r2, [r3, #20]
   1e388:	cmp	r2, r0
   1e38c:	movge	ip, #0
   1e390:	movlt	ip, #1
   1e394:	str	ip, [sp, #36]	; 0x24
   1e398:	ldr	ip, [sp, #24]
   1e39c:	add	r3, r2, #1888	; 0x760
   1e3a0:	cmp	ip, #0
   1e3a4:	add	r3, r3, #12
   1e3a8:	bne	1ede0 <__assert_fail@plt+0xd06c>
   1e3ac:	ldr	ip, [sp, #1156]	; 0x484
   1e3b0:	cmp	r2, r0
   1e3b4:	movlt	r2, #0
   1e3b8:	movge	r2, #1
   1e3bc:	cmp	ip, #43	; 0x2b
   1e3c0:	beq	1f060 <__assert_fail@plt+0xd2ec>
   1e3c4:	str	ip, [sp, #24]
   1e3c8:	mov	lr, #4
   1e3cc:	mov	ip, #0
   1e3d0:	b	1e2b4 <__assert_fail@plt+0xc540>
   1e3d4:	cmp	r7, #0
   1e3d8:	bne	1dcb8 <__assert_fail@plt+0xbf44>
   1e3dc:	ldr	r7, [pc, #884]	; 1e758 <__assert_fail@plt+0xc9e4>
   1e3e0:	mvn	r5, #0
   1e3e4:	ldr	r3, [sp, #1172]	; 0x494
   1e3e8:	ldr	r2, [sp, #40]	; 0x28
   1e3ec:	str	r3, [sp, #20]
   1e3f0:	ldr	r3, [sp, #1168]	; 0x490
   1e3f4:	str	r2, [sp]
   1e3f8:	str	r3, [sp, #16]
   1e3fc:	ldr	r3, [sp, #1164]	; 0x48c
   1e400:	str	r5, [sp, #8]
   1e404:	str	r3, [sp, #12]
   1e408:	ldr	r3, [sp, #24]
   1e40c:	mov	r2, r7
   1e410:	str	r3, [sp, #4]
   1e414:	mvn	r1, #0
   1e418:	ldr	r3, [sp, #32]
   1e41c:	mov	r0, #0
   1e420:	bl	1d7a8 <__assert_fail@plt+0xba34>
   1e424:	ldr	r3, [sp, #24]
   1e428:	cmp	r3, #45	; 0x2d
   1e42c:	moveq	r3, #0
   1e430:	bicne	r3, r6, r6, asr #31
   1e434:	mov	r9, r0
   1e438:	ldr	r1, [sp, #28]
   1e43c:	cmp	r3, r9
   1e440:	movcs	r2, r3
   1e444:	movcc	r2, r9
   1e448:	sub	r1, r1, r8
   1e44c:	cmp	r2, r1
   1e450:	str	r2, [sp, #36]	; 0x24
   1e454:	str	r1, [sp, #64]	; 0x40
   1e458:	bcs	1d8e0 <__assert_fail@plt+0xbb6c>
   1e45c:	cmp	fp, #0
   1e460:	beq	1e4d8 <__assert_fail@plt+0xc764>
   1e464:	cmp	r3, r9
   1e468:	bls	1e494 <__assert_fail@plt+0xc720>
   1e46c:	ldr	r2, [sp, #24]
   1e470:	sub	r6, r3, r9
   1e474:	cmp	r2, #43	; 0x2b
   1e478:	cmpne	r2, #48	; 0x30
   1e47c:	mov	r0, fp
   1e480:	mov	r2, r6
   1e484:	moveq	r1, #48	; 0x30
   1e488:	movne	r1, #32
   1e48c:	bl	11be8 <memset@plt>
   1e490:	add	fp, fp, r6
   1e494:	ldr	r3, [sp, #1172]	; 0x494
   1e498:	mov	r0, fp
   1e49c:	str	r3, [sp, #20]
   1e4a0:	ldr	r3, [sp, #1168]	; 0x490
   1e4a4:	str	r5, [sp, #8]
   1e4a8:	str	r3, [sp, #16]
   1e4ac:	ldr	r3, [sp, #1164]	; 0x48c
   1e4b0:	mov	r2, r7
   1e4b4:	str	r3, [sp, #12]
   1e4b8:	ldr	r3, [sp, #24]
   1e4bc:	ldr	r1, [sp, #64]	; 0x40
   1e4c0:	str	r3, [sp, #4]
   1e4c4:	ldr	r3, [sp, #40]	; 0x28
   1e4c8:	add	fp, fp, r9
   1e4cc:	str	r3, [sp]
   1e4d0:	ldr	r3, [sp, #32]
   1e4d4:	bl	1d7a8 <__assert_fail@plt+0xba34>
   1e4d8:	ldr	r3, [sp, #36]	; 0x24
   1e4dc:	add	r8, r8, r3
   1e4e0:	b	1d890 <__assert_fail@plt+0xbb1c>
   1e4e4:	cmp	r7, #69	; 0x45
   1e4e8:	beq	1df20 <__assert_fail@plt+0xc1ac>
   1e4ec:	ldr	r3, [sp, #32]
   1e4f0:	ldr	r0, [pc, #612]	; 1e75c <__assert_fail@plt+0xc9e8>
   1e4f4:	mvn	ip, #98	; 0x62
   1e4f8:	ldr	r2, [r3, #20]
   1e4fc:	add	r3, r2, #1888	; 0x760
   1e500:	add	r3, r3, #12
   1e504:	cmp	r3, r0
   1e508:	ldr	r0, [pc, #620]	; 1e77c <__assert_fail@plt+0xca08>
   1e50c:	movhi	r3, #0
   1e510:	movls	r3, #1
   1e514:	cmp	r2, r0
   1e518:	mla	r3, ip, r3, r2
   1e51c:	movge	ip, #0
   1e520:	movlt	ip, #1
   1e524:	str	ip, [sp, #36]	; 0x24
   1e528:	ldr	ip, [sp, #24]
   1e52c:	cmp	ip, #0
   1e530:	ldr	ip, [pc, #564]	; 1e76c <__assert_fail@plt+0xc9f8>
   1e534:	smull	lr, ip, ip, r3
   1e538:	asr	r3, r3, #31
   1e53c:	rsb	r3, r3, ip, asr #5
   1e540:	add	r3, r3, #19
   1e544:	bne	1ee00 <__assert_fail@plt+0xd08c>
   1e548:	ldr	ip, [sp, #1156]	; 0x484
   1e54c:	cmp	r2, r0
   1e550:	movlt	r2, #0
   1e554:	movge	r2, #1
   1e558:	cmp	ip, #43	; 0x2b
   1e55c:	beq	1ee10 <__assert_fail@plt+0xd09c>
   1e560:	str	ip, [sp, #24]
   1e564:	mov	lr, #2
   1e568:	mov	ip, #0
   1e56c:	b	1e2b4 <__assert_fail@plt+0xc540>
   1e570:	cmp	r7, #69	; 0x45
   1e574:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e578:	ldr	r2, [sp, #32]
   1e57c:	mov	lr, #2
   1e580:	ldr	r3, [r2, #28]
   1e584:	ldr	r2, [r2, #24]
   1e588:	sub	r3, r3, r2
   1e58c:	ldr	r2, [pc, #484]	; 1e778 <__assert_fail@plt+0xca04>
   1e590:	add	r3, r3, #7
   1e594:	smull	r0, r2, r2, r3
   1e598:	add	r2, r2, r3
   1e59c:	asr	r3, r3, #31
   1e5a0:	rsb	r2, r3, r2, asr lr
   1e5a4:	b	1df58 <__assert_fail@plt+0xc1e4>
   1e5a8:	cmp	r7, #69	; 0x45
   1e5ac:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e5b0:	ldr	r3, [sp, #32]
   1e5b4:	mov	r0, #0
   1e5b8:	mov	ip, r0
   1e5bc:	ldr	r3, [r3, #28]
   1e5c0:	mov	lr, #3
   1e5c4:	cmn	r3, #1
   1e5c8:	movlt	r2, #1
   1e5cc:	movge	r2, r0
   1e5d0:	str	r2, [sp, #36]	; 0x24
   1e5d4:	add	r3, r3, #1
   1e5d8:	movge	r2, #1
   1e5dc:	movlt	r2, r0
   1e5e0:	b	1df78 <__assert_fail@plt+0xc204>
   1e5e4:	cmp	r7, #69	; 0x45
   1e5e8:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e5ec:	ldr	r3, [sp, #32]
   1e5f0:	ldr	r2, [r3, #12]
   1e5f4:	ldr	r3, [sp, #24]
   1e5f8:	mov	lr, #2
   1e5fc:	cmp	r3, #0
   1e600:	moveq	r3, #95	; 0x5f
   1e604:	streq	r3, [sp, #24]
   1e608:	b	1df58 <__assert_fail@plt+0xc1e4>
   1e60c:	ldr	r2, [sp, #24]
   1e610:	mvn	r3, r6
   1e614:	cmp	r2, #45	; 0x2d
   1e618:	lsr	r3, r3, #31
   1e61c:	moveq	r3, #0
   1e620:	cmp	r3, #0
   1e624:	beq	1f07c <__assert_fail@plt+0xd308>
   1e628:	cmp	r6, #1
   1e62c:	movcs	r5, r6
   1e630:	movcc	r5, #1
   1e634:	ldr	r3, [sp, #28]
   1e638:	sub	r3, r3, r8
   1e63c:	cmp	r3, r5
   1e640:	bls	1d8e0 <__assert_fail@plt+0xbb6c>
   1e644:	cmp	fp, #0
   1e648:	beq	1e684 <__assert_fail@plt+0xc910>
   1e64c:	cmp	r6, #1
   1e650:	bls	1e67c <__assert_fail@plt+0xc908>
   1e654:	ldr	r3, [sp, #24]
   1e658:	sub	r6, r6, #1
   1e65c:	cmp	r3, #43	; 0x2b
   1e660:	cmpne	r3, #48	; 0x30
   1e664:	mov	r0, fp
   1e668:	mov	r2, r6
   1e66c:	moveq	r1, #48	; 0x30
   1e670:	movne	r1, #32
   1e674:	bl	11be8 <memset@plt>
   1e678:	add	fp, fp, r6
   1e67c:	mov	r3, #10
   1e680:	strb	r3, [fp], #1
   1e684:	add	r8, r8, r5
   1e688:	b	1d890 <__assert_fail@plt+0xbb1c>
   1e68c:	cmp	r7, #69	; 0x45
   1e690:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e694:	ldr	r3, [sp, #32]
   1e698:	mov	r0, #0
   1e69c:	mov	ip, r0
   1e6a0:	ldr	r3, [r3, #16]
   1e6a4:	mov	lr, #2
   1e6a8:	cmn	r3, #1
   1e6ac:	movlt	r2, #1
   1e6b0:	movge	r2, r0
   1e6b4:	str	r2, [sp, #36]	; 0x24
   1e6b8:	add	r3, r3, #1
   1e6bc:	movge	r2, #1
   1e6c0:	movlt	r2, r0
   1e6c4:	b	1df78 <__assert_fail@plt+0xc204>
   1e6c8:	cmp	r7, #69	; 0x45
   1e6cc:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e6d0:	ldr	r2, [sp, #48]	; 0x30
   1e6d4:	b	1e5f4 <__assert_fail@plt+0xc880>
   1e6d8:	cmp	r7, #69	; 0x45
   1e6dc:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e6e0:	ldr	r3, [sp, #32]
   1e6e4:	ldr	r2, [r3, #8]
   1e6e8:	b	1e5f4 <__assert_fail@plt+0xc880>
   1e6ec:	ldr	r3, [sp, #32]
   1e6f0:	cmp	r7, #79	; 0x4f
   1e6f4:	ldr	r3, [r3, #16]
   1e6f8:	beq	1df20 <__assert_fail@plt+0xc1ac>
   1e6fc:	add	r2, r3, r3, lsl #2
   1e700:	mov	ip, #0
   1e704:	add	r3, r3, r2, lsl #1
   1e708:	str	ip, [sp, #36]	; 0x24
   1e70c:	asr	r3, r3, #5
   1e710:	add	r3, r3, #1
   1e714:	mov	r0, ip
   1e718:	mov	lr, #1
   1e71c:	b	1df9c <__assert_fail@plt+0xc228>
   1e720:	mov	r3, #0
   1e724:	cmp	r5, #0
   1e728:	moveq	r5, r3
   1e72c:	moveq	r1, #112	; 0x70
   1e730:	movne	r3, #0
   1e734:	movne	r1, #112	; 0x70
   1e738:	strne	r3, [sp, #40]	; 0x28
   1e73c:	b	1de34 <__assert_fail@plt+0xc0c0>
   1e740:	andeq	r7, r2, r4, lsl #29
   1e744:	strbtvs	r6, [r6], -r7, ror #12
   1e748:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1e74c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e750:	stmhi	r8, {r0, r3, r7, fp, pc}
   1e754:			; <UNDEFINED> instruction: 0x91a2b3c5
   1e758:	andeq	r7, r2, r8, lsl #30
   1e75c:	andeq	r0, r0, fp, ror #14
   1e760:	andeq	r7, r2, r4, lsl pc
   1e764:	andeq	r7, r2, r0, lsl #30
   1e768:	andeq	r7, r2, r0, lsr #30
   1e76c:	mvnpl	r8, pc, lsl r5
   1e770:	andeq	r0, r0, lr, ror #2
   1e774:	andeq	r0, r0, sp, ror #2
   1e778:	subls	r2, r9, #-1828716544	; 0x93000000
   1e77c:			; <UNDEFINED> instruction: 0xfffff894
   1e780:	andeq	r2, r0, pc, lsl #14
   1e784:	andeq	r2, r0, r0, lsl r7
   1e788:	ldr	lr, [sp, #32]
   1e78c:	add	ip, sp, #88	; 0x58
   1e790:	mvn	r5, #0
   1e794:	ldm	lr!, {r0, r1, r2, r3}
   1e798:	stmia	ip!, {r0, r1, r2, r3}
   1e79c:	ldm	lr!, {r0, r1, r2, r3}
   1e7a0:	stmia	ip!, {r0, r1, r2, r3}
   1e7a4:	ldm	lr, {r0, r1, r2}
   1e7a8:	str	r5, [sp, #116]	; 0x74
   1e7ac:	stm	ip, {r0, r1, r2}
   1e7b0:	add	r1, sp, #88	; 0x58
   1e7b4:	ldr	r0, [sp, #1168]	; 0x490
   1e7b8:	bl	219dc <_obstack_memory_used@@Base+0x2550>
   1e7bc:	ldr	r3, [sp, #116]	; 0x74
   1e7c0:	cmp	r3, #0
   1e7c4:	blt	1f06c <__assert_fail@plt+0xd2f8>
   1e7c8:	add	r9, sp, #72	; 0x48
   1e7cc:	add	lr, r9, #13
   1e7d0:	mov	r1, r0
   1e7d4:	lsr	r3, r0, #31
   1e7d8:	str	r3, [sp, #36]	; 0x24
   1e7dc:	smull	r2, r3, sl, r1
   1e7e0:	asr	ip, r1, #31
   1e7e4:	rsb	ip, ip, r3, asr #2
   1e7e8:	cmp	r0, #0
   1e7ec:	add	r3, ip, ip, lsl #2
   1e7f0:	mov	r5, lr
   1e7f4:	sub	r3, r1, r3, lsl #1
   1e7f8:	add	r2, r3, #48	; 0x30
   1e7fc:	rsblt	r3, r3, #48	; 0x30
   1e800:	uxtb	r2, r2
   1e804:	uxtblt	r2, r3
   1e808:	cmp	ip, #0
   1e80c:	mov	r1, ip
   1e810:	strb	r2, [lr], #-1
   1e814:	bne	1e7dc <__assert_fail@plt+0xca68>
   1e818:	mov	lr, #1
   1e81c:	b	1e008 <__assert_fail@plt+0xc294>
   1e820:	cmp	r7, #69	; 0x45
   1e824:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e828:	ldr	r3, [sp, #32]
   1e82c:	ldr	r9, [r3, #28]
   1e830:	ldr	r2, [r3, #24]
   1e834:	ldr	r5, [r3, #20]
   1e838:	str	r2, [sp, #36]	; 0x24
   1e83c:	sub	r2, r9, r2
   1e840:	add	r2, r2, #380	; 0x17c
   1e844:	ldr	r3, [pc, #-212]	; 1e778 <__assert_fail@plt+0xca04>
   1e848:	add	r2, r2, #2
   1e84c:	cmp	r5, #0
   1e850:	smull	r0, r3, r3, r2
   1e854:	add	r3, r3, r2
   1e858:	asr	r0, r2, #31
   1e85c:	rsb	r0, r0, r3, asr #2
   1e860:	mvnge	r3, #99	; 0x63
   1e864:	rsb	r0, r0, r0, lsl #3
   1e868:	sub	r2, r2, r0
   1e86c:	sub	r2, r9, r2
   1e870:	movlt	r3, #300	; 0x12c
   1e874:	adds	r2, r2, #3
   1e878:	str	r2, [sp, #64]	; 0x40
   1e87c:	add	r3, r3, r5
   1e880:	bmi	1ef0c <__assert_fail@plt+0xd198>
   1e884:	tst	r3, #3
   1e888:	ldrne	r3, [pc, #-284]	; 1e774 <__assert_fail@plt+0xca00>
   1e88c:	bne	1e8d4 <__assert_fail@plt+0xcb60>
   1e890:	ldr	r2, [pc, #-300]	; 1e76c <__assert_fail@plt+0xc9f8>
   1e894:	mov	r0, #100	; 0x64
   1e898:	smull	r2, ip, r2, r3
   1e89c:	asr	r2, r3, #31
   1e8a0:	rsb	lr, r2, ip, asr #5
   1e8a4:	mul	r0, r0, lr
   1e8a8:	cmp	r3, r0
   1e8ac:	ldrne	r3, [pc, #-324]	; 1e770 <__assert_fail@plt+0xc9fc>
   1e8b0:	bne	1e8d4 <__assert_fail@plt+0xcb60>
   1e8b4:	rsb	r2, r2, ip, asr #7
   1e8b8:	mov	ip, #400	; 0x190
   1e8bc:	ldr	r0, [pc, #-336]	; 1e774 <__assert_fail@plt+0xca00>
   1e8c0:	mul	r2, ip, r2
   1e8c4:	sub	ip, ip, #34	; 0x22
   1e8c8:	cmp	r3, r2
   1e8cc:	movne	r3, r0
   1e8d0:	moveq	r3, ip
   1e8d4:	ldr	r2, [sp, #36]	; 0x24
   1e8d8:	sub	r3, r9, r3
   1e8dc:	sub	r2, r3, r2
   1e8e0:	ldr	r0, [pc, #-368]	; 1e778 <__assert_fail@plt+0xca04>
   1e8e4:	add	r2, r2, #380	; 0x17c
   1e8e8:	add	r2, r2, #2
   1e8ec:	smull	r0, ip, r0, r2
   1e8f0:	add	ip, ip, r2
   1e8f4:	asr	r0, r2, #31
   1e8f8:	rsb	r0, r0, ip, asr #2
   1e8fc:	rsb	r0, r0, r0, lsl #3
   1e900:	sub	r2, r2, r0
   1e904:	sub	r3, r3, r2
   1e908:	adds	r3, r3, #3
   1e90c:	movmi	lr, #0
   1e910:	ldrmi	r3, [sp, #64]	; 0x40
   1e914:	movpl	lr, #1
   1e918:	cmp	r1, #71	; 0x47
   1e91c:	beq	1effc <__assert_fail@plt+0xd288>
   1e920:	cmp	r1, #103	; 0x67
   1e924:	bne	1efdc <__assert_fail@plt+0xd268>
   1e928:	ldr	r3, [pc, #-452]	; 1e76c <__assert_fail@plt+0xc9f8>
   1e92c:	mov	r0, #100	; 0x64
   1e930:	smull	r2, r3, r3, r5
   1e934:	asr	r2, r5, #31
   1e938:	rsb	r2, r2, r3, asr #5
   1e93c:	ldr	r3, [pc, #-472]	; 1e76c <__assert_fail@plt+0xc9f8>
   1e940:	mul	r2, r0, r2
   1e944:	sub	r2, r5, r2
   1e948:	add	r2, r2, lr
   1e94c:	smull	r3, ip, r3, r2
   1e950:	asr	r3, r2, #31
   1e954:	rsb	r3, r3, ip, asr #5
   1e958:	mul	r3, r0, r3
   1e95c:	subs	r3, r2, r3
   1e960:	bpl	1e288 <__assert_fail@plt+0xc514>
   1e964:	ldr	r2, [pc, #-496]	; 1e77c <__assert_fail@plt+0xca08>
   1e968:	sub	r2, r2, lr
   1e96c:	cmp	r5, r2
   1e970:	ldr	r2, [sp, #24]
   1e974:	bge	1efcc <__assert_fail@plt+0xd258>
   1e978:	cmp	r2, #0
   1e97c:	rsb	r3, r3, #0
   1e980:	bne	1e294 <__assert_fail@plt+0xc520>
   1e984:	ldr	r2, [sp, #1156]	; 0x484
   1e988:	cmp	r2, #43	; 0x2b
   1e98c:	beq	1efa0 <__assert_fail@plt+0xd22c>
   1e990:	mov	ip, #0
   1e994:	str	r2, [sp, #24]
   1e998:	str	ip, [sp, #36]	; 0x24
   1e99c:	mov	r2, #1
   1e9a0:	mov	lr, #2
   1e9a4:	b	1e2b4 <__assert_fail@plt+0xc540>
   1e9a8:	cmp	r7, #0
   1e9ac:	bne	1dcb8 <__assert_fail@plt+0xbf44>
   1e9b0:	ldr	r3, [sp, #24]
   1e9b4:	clz	r3, r3
   1e9b8:	lsr	r3, r3, #5
   1e9bc:	ands	r3, r3, r6, lsr #31
   1e9c0:	bne	1ee80 <__assert_fail@plt+0xd10c>
   1e9c4:	sub	r5, r6, #6
   1e9c8:	ldr	r7, [pc, #-616]	; 1e768 <__assert_fail@plt+0xc9f4>
   1e9cc:	bic	r5, r5, r5, asr #31
   1e9d0:	b	1e3e4 <__assert_fail@plt+0xc670>
   1e9d4:	cmp	r7, #69	; 0x45
   1e9d8:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e9dc:	ldr	r2, [sp, #48]	; 0x30
   1e9e0:	mov	lr, #2
   1e9e4:	b	1df58 <__assert_fail@plt+0xc1e4>
   1e9e8:	cmp	r7, #69	; 0x45
   1e9ec:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1e9f0:	ldr	r3, [sp, #32]
   1e9f4:	mov	lr, #1
   1e9f8:	ldr	r2, [r3, #24]
   1e9fc:	b	1df58 <__assert_fail@plt+0xc1e4>
   1ea00:	ldr	r3, [sp, #32]
   1ea04:	ldr	r2, [pc, #-660]	; 1e778 <__assert_fail@plt+0xca04>
   1ea08:	mov	lr, #1
   1ea0c:	ldr	r3, [r3, #24]
   1ea10:	add	r3, r3, #6
   1ea14:	smull	r0, r2, r2, r3
   1ea18:	add	r0, r2, r3
   1ea1c:	asr	r2, r3, #31
   1ea20:	rsb	r2, r2, r0, asr #2
   1ea24:	rsb	r2, r2, r2, lsl #3
   1ea28:	sub	r3, r3, r2
   1ea2c:	add	r2, r3, lr
   1ea30:	b	1df58 <__assert_fail@plt+0xc1e4>
   1ea34:	ldr	r3, [sp, #24]
   1ea38:	subs	r3, r3, #45	; 0x2d
   1ea3c:	movne	r3, #1
   1ea40:	cmp	r6, #0
   1ea44:	movlt	r3, #0
   1ea48:	cmp	r3, #0
   1ea4c:	beq	1eeec <__assert_fail@plt+0xd178>
   1ea50:	cmp	r6, #1
   1ea54:	movcs	r5, r6
   1ea58:	movcc	r5, #1
   1ea5c:	ldr	r3, [sp, #28]
   1ea60:	sub	r3, r3, r8
   1ea64:	cmp	r3, r5
   1ea68:	bls	1d8e0 <__assert_fail@plt+0xbb6c>
   1ea6c:	cmp	fp, #0
   1ea70:	beq	1e684 <__assert_fail@plt+0xc910>
   1ea74:	cmp	r6, #1
   1ea78:	bls	1eaa4 <__assert_fail@plt+0xcd30>
   1ea7c:	ldr	r3, [sp, #24]
   1ea80:	sub	r6, r6, #1
   1ea84:	cmp	r3, #43	; 0x2b
   1ea88:	cmpne	r3, #48	; 0x30
   1ea8c:	mov	r0, fp
   1ea90:	mov	r2, r6
   1ea94:	moveq	r1, #48	; 0x30
   1ea98:	movne	r1, #32
   1ea9c:	bl	11be8 <memset@plt>
   1eaa0:	add	fp, fp, r6
   1eaa4:	mov	r3, #9
   1eaa8:	strb	r3, [fp], #1
   1eaac:	b	1e684 <__assert_fail@plt+0xc910>
   1eab0:	cmp	r7, #69	; 0x45
   1eab4:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1eab8:	ldr	r3, [sp, #32]
   1eabc:	mov	lr, #2
   1eac0:	ldr	r2, [r3, #4]
   1eac4:	b	1df58 <__assert_fail@plt+0xc1e4>
   1eac8:	sub	r3, r4, #1
   1eacc:	cmp	r3, r9
   1ead0:	movne	r4, r3
   1ead4:	bne	1dcb8 <__assert_fail@plt+0xbf44>
   1ead8:	ldr	r2, [sp, #24]
   1eadc:	mvn	r3, r6
   1eae0:	cmp	r2, #45	; 0x2d
   1eae4:	lsr	r3, r3, #31
   1eae8:	moveq	r3, #0
   1eaec:	cmp	r3, #0
   1eaf0:	beq	1ee3c <__assert_fail@plt+0xd0c8>
   1eaf4:	cmp	r6, #1
   1eaf8:	movcs	r5, r6
   1eafc:	movcc	r5, #1
   1eb00:	ldr	r3, [sp, #28]
   1eb04:	sub	r3, r3, r8
   1eb08:	cmp	r3, r5
   1eb0c:	bls	1d8e0 <__assert_fail@plt+0xbb6c>
   1eb10:	cmp	fp, #0
   1eb14:	beq	1e684 <__assert_fail@plt+0xc910>
   1eb18:	cmp	r6, #1
   1eb1c:	bls	1eb4c <__assert_fail@plt+0xcdd8>
   1eb20:	ldr	r3, [sp, #24]
   1eb24:	sub	r6, r6, #1
   1eb28:	cmp	r3, #43	; 0x2b
   1eb2c:	cmpne	r3, #48	; 0x30
   1eb30:	mov	r2, r6
   1eb34:	bne	1ee48 <__assert_fail@plt+0xd0d4>
   1eb38:	mov	r1, #48	; 0x30
   1eb3c:	mov	r0, fp
   1eb40:	bl	11be8 <memset@plt>
   1eb44:	ldrb	r1, [r4]
   1eb48:	add	fp, fp, r6
   1eb4c:	strb	r1, [fp], #1
   1eb50:	b	1e684 <__assert_fail@plt+0xc910>
   1eb54:	ldr	r7, [pc, #-1020]	; 1e760 <__assert_fail@plt+0xc9ec>
   1eb58:	mvn	r5, #0
   1eb5c:	b	1e3e4 <__assert_fail@plt+0xc670>
   1eb60:	cmp	r7, #69	; 0x45
   1eb64:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1eb68:	ldr	r3, [sp, #32]
   1eb6c:	mov	lr, #2
   1eb70:	ldr	r2, [r3]
   1eb74:	b	1df58 <__assert_fail@plt+0xc1e4>
   1eb78:	mvn	r5, #0
   1eb7c:	ldr	r7, [pc, #-1056]	; 1e764 <__assert_fail@plt+0xc9f0>
   1eb80:	b	1e3e4 <__assert_fail@plt+0xc670>
   1eb84:	mov	r3, #1
   1eb88:	b	1e724 <__assert_fail@plt+0xc9b0>
   1eb8c:	cmp	r7, #69	; 0x45
   1eb90:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1eb94:	cmp	r6, #0
   1eb98:	movle	r6, #9
   1eb9c:	ldr	r3, [sp, #1172]	; 0x494
   1eba0:	mov	r7, #9
   1eba4:	b	1ebb8 <__assert_fail@plt+0xce44>
   1eba8:	asr	r2, r3, #31
   1ebac:	smull	r1, r3, sl, r3
   1ebb0:	sub	r7, r7, #1
   1ebb4:	rsb	r3, r2, r3, asr #2
   1ebb8:	cmp	r7, r6
   1ebbc:	bgt	1eba8 <__assert_fail@plt+0xce34>
   1ebc0:	smull	r2, r1, sl, r3
   1ebc4:	asr	r2, r3, #31
   1ebc8:	rsb	r1, r2, r1, asr #2
   1ebcc:	cmp	r7, #1
   1ebd0:	add	r1, r1, r1, lsl #2
   1ebd4:	ble	1eed8 <__assert_fail@plt+0xd164>
   1ebd8:	cmp	r3, r1, lsl #1
   1ebdc:	beq	1ebac <__assert_fail@plt+0xce38>
   1ebe0:	add	r0, sp, #72	; 0x48
   1ebe4:	add	r1, r0, r7
   1ebe8:	b	1ebf0 <__assert_fail@plt+0xce7c>
   1ebec:	asr	r2, r2, #31
   1ebf0:	smull	lr, ip, sl, r3
   1ebf4:	rsb	r2, r2, ip, asr #2
   1ebf8:	add	ip, r2, r2, lsl #2
   1ebfc:	sub	r3, r3, ip, lsl #1
   1ec00:	add	r3, r3, #48	; 0x30
   1ec04:	strb	r3, [r1, #-1]!
   1ec08:	cmp	r1, r0
   1ec0c:	mov	r3, r2
   1ec10:	bne	1ebec <__assert_fail@plt+0xce78>
   1ec14:	ldr	r2, [sp, #24]
   1ec18:	subs	r3, r2, #0
   1ec1c:	moveq	r3, #48	; 0x30
   1ec20:	str	r3, [sp, #24]
   1ec24:	ldr	r3, [sp, #28]
   1ec28:	cmp	r7, #0
   1ec2c:	movcs	r5, r7
   1ec30:	movcc	r5, #0
   1ec34:	sub	r3, r3, r8
   1ec38:	cmp	r5, r3
   1ec3c:	bcs	1d8e0 <__assert_fail@plt+0xbb6c>
   1ec40:	cmp	fp, #0
   1ec44:	beq	1ec68 <__assert_fail@plt+0xcef4>
   1ec48:	ldr	r3, [sp, #40]	; 0x28
   1ec4c:	mov	r2, r7
   1ec50:	cmp	r3, #0
   1ec54:	add	r1, sp, #72	; 0x48
   1ec58:	mov	r0, fp
   1ec5c:	beq	1eee4 <__assert_fail@plt+0xd170>
   1ec60:	bl	1d768 <__assert_fail@plt+0xb9f4>
   1ec64:	add	fp, fp, r7
   1ec68:	ldr	r3, [sp, #24]
   1ec6c:	add	r8, r5, r8
   1ec70:	cmp	r3, #45	; 0x2d
   1ec74:	subne	r5, r6, r7
   1ec78:	ldr	r3, [sp, #28]
   1ec7c:	bicne	r5, r5, r5, asr #31
   1ec80:	moveq	r5, #0
   1ec84:	sub	r3, r3, r8
   1ec88:	cmp	r5, r3
   1ec8c:	bcs	1d8e0 <__assert_fail@plt+0xbb6c>
   1ec90:	cmp	fp, #0
   1ec94:	beq	1e684 <__assert_fail@plt+0xc910>
   1ec98:	cmp	r5, #0
   1ec9c:	beq	1e684 <__assert_fail@plt+0xc910>
   1eca0:	ldr	r3, [sp, #24]
   1eca4:	mov	r0, fp
   1eca8:	cmp	r3, #43	; 0x2b
   1ecac:	cmpne	r3, #48	; 0x30
   1ecb0:	mov	r2, r5
   1ecb4:	moveq	r1, #48	; 0x30
   1ecb8:	movne	r1, #32
   1ecbc:	bl	11be8 <memset@plt>
   1ecc0:	add	fp, fp, r5
   1ecc4:	b	1e684 <__assert_fail@plt+0xc910>
   1ecc8:	ldrb	r3, [r4, #1]
   1eccc:	add	r0, r4, #1
   1ecd0:	cmp	r3, #58	; 0x3a
   1ecd4:	movne	lr, #1
   1ecd8:	beq	1ee60 <__assert_fail@plt+0xd0ec>
   1ecdc:	cmp	r3, #122	; 0x7a
   1ece0:	moveq	r4, r0
   1ece4:	bne	1dcb8 <__assert_fail@plt+0xbf44>
   1ece8:	b	1e17c <__assert_fail@plt+0xc408>
   1ecec:	cmp	r7, #69	; 0x45
   1ecf0:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1ecf4:	ldr	r3, [sp, #32]
   1ecf8:	ldr	r0, [pc, #-1416]	; 1e778 <__assert_fail@plt+0xca04>
   1ecfc:	mov	lr, #2
   1ed00:	ldr	r2, [r3, #24]
   1ed04:	ldr	r3, [r3, #28]
   1ed08:	add	r2, r2, #6
   1ed0c:	smull	ip, r0, r0, r2
   1ed10:	add	ip, r0, r2
   1ed14:	asr	r0, r2, #31
   1ed18:	rsb	r0, r0, ip, asr #2
   1ed1c:	rsb	r0, r0, r0, lsl #3
   1ed20:	sub	r2, r2, r0
   1ed24:	b	1e588 <__assert_fail@plt+0xc814>
   1ed28:	cmp	r7, #69	; 0x45
   1ed2c:	beq	1dcb8 <__assert_fail@plt+0xbf44>
   1ed30:	ldr	r3, [sp, #32]
   1ed34:	mov	lr, #2
   1ed38:	ldr	r2, [r3, #8]
   1ed3c:	b	1df58 <__assert_fail@plt+0xc1e4>
   1ed40:	mov	r3, #45	; 0x2d
   1ed44:	str	r3, [sp, #36]	; 0x24
   1ed48:	b	1e044 <__assert_fail@plt+0xc2d0>
   1ed4c:	mov	r3, #1
   1ed50:	str	r3, [sp, #64]	; 0x40
   1ed54:	mov	r3, #48	; 0x30
   1ed58:	str	r3, [sp, #24]
   1ed5c:	b	1e020 <__assert_fail@plt+0xc2ac>
   1ed60:	add	r1, sp, #89	; 0x59
   1ed64:	mov	r2, r7
   1ed68:	mov	r0, fp
   1ed6c:	bl	1d728 <__assert_fail@plt+0xb9b4>
   1ed70:	b	1df14 <__assert_fail@plt+0xc1a0>
   1ed74:	add	r7, r9, #14
   1ed78:	sub	r7, r7, r5
   1ed7c:	ldr	r2, [sp, #64]	; 0x40
   1ed80:	sub	r3, r6, r7
   1ed84:	cmp	r3, #0
   1ed88:	movle	r2, #0
   1ed8c:	andgt	r2, r2, #1
   1ed90:	cmp	r2, #0
   1ed94:	bne	1e0b8 <__assert_fail@plt+0xc344>
   1ed98:	ldr	r3, [sp, #64]	; 0x40
   1ed9c:	cmp	r3, #0
   1eda0:	moveq	r6, r3
   1eda4:	b	1e0b8 <__assert_fail@plt+0xc344>
   1eda8:	cmp	fp, #0
   1edac:	beq	1d8c8 <__assert_fail@plt+0xbb54>
   1edb0:	mov	r0, fp
   1edb4:	mov	r2, r7
   1edb8:	mov	r1, #32
   1edbc:	str	r3, [sp, #68]	; 0x44
   1edc0:	add	r8, r8, r7
   1edc4:	bl	11be8 <memset@plt>
   1edc8:	sub	r6, r6, r7
   1edcc:	add	fp, fp, r7
   1edd0:	ldr	r3, [sp, #68]	; 0x44
   1edd4:	b	1e078 <__assert_fail@plt+0xc304>
   1edd8:	mov	r8, r3
   1eddc:	b	1d8a4 <__assert_fail@plt+0xbb30>
   1ede0:	ldr	r2, [sp, #24]
   1ede4:	cmp	r2, #43	; 0x2b
   1ede8:	ldr	r2, [sp, #36]	; 0x24
   1edec:	eor	r2, r2, #1
   1edf0:	beq	1f060 <__assert_fail@plt+0xd2ec>
   1edf4:	mov	ip, #0
   1edf8:	mov	lr, #4
   1edfc:	b	1e2b4 <__assert_fail@plt+0xc540>
   1ee00:	cmp	r2, r0
   1ee04:	movlt	r2, #0
   1ee08:	movge	r2, #1
   1ee0c:	b	1e2a0 <__assert_fail@plt+0xc52c>
   1ee10:	mov	lr, #2
   1ee14:	mov	r0, #99	; 0x63
   1ee18:	cmp	r0, r3
   1ee1c:	movcs	r0, #0
   1ee20:	movcc	r0, #1
   1ee24:	cmp	r6, lr
   1ee28:	movle	ip, r0
   1ee2c:	orrgt	ip, r0, #1
   1ee30:	mov	r0, #43	; 0x2b
   1ee34:	str	r0, [sp, #24]
   1ee38:	b	1e2b4 <__assert_fail@plt+0xc540>
   1ee3c:	mov	r6, r3
   1ee40:	mov	r5, #1
   1ee44:	b	1eb00 <__assert_fail@plt+0xcd8c>
   1ee48:	mov	r1, #32
   1ee4c:	mov	r0, fp
   1ee50:	bl	11be8 <memset@plt>
   1ee54:	add	fp, fp, r6
   1ee58:	ldrb	r1, [r4]
   1ee5c:	b	1eb4c <__assert_fail@plt+0xcdd8>
   1ee60:	add	r2, r4, #2
   1ee64:	mov	lr, #1
   1ee68:	mov	r0, r2
   1ee6c:	ldrb	r3, [r2], #1
   1ee70:	add	lr, lr, #1
   1ee74:	cmp	r3, #58	; 0x3a
   1ee78:	bne	1ecdc <__assert_fail@plt+0xcf68>
   1ee7c:	b	1ee68 <__assert_fail@plt+0xd0f4>
   1ee80:	ldr	r3, [sp, #1172]	; 0x494
   1ee84:	mov	ip, #43	; 0x2b
   1ee88:	str	r3, [sp, #20]
   1ee8c:	ldr	r3, [sp, #1168]	; 0x490
   1ee90:	mov	r5, #4
   1ee94:	str	r3, [sp, #16]
   1ee98:	ldr	r3, [sp, #1164]	; 0x48c
   1ee9c:	mov	r0, r7
   1eea0:	str	r3, [sp, #12]
   1eea4:	ldr	r3, [sp, #40]	; 0x28
   1eea8:	str	r5, [sp, #8]
   1eeac:	str	r3, [sp]
   1eeb0:	str	ip, [sp, #4]
   1eeb4:	ldr	r3, [sp, #32]
   1eeb8:	ldr	r2, [pc, #-1880]	; 1e768 <__assert_fail@plt+0xc9f4>
   1eebc:	mvn	r1, #0
   1eec0:	str	ip, [sp, #24]
   1eec4:	bl	1d7a8 <__assert_fail@plt+0xba34>
   1eec8:	mov	r3, r7
   1eecc:	ldr	r7, [pc, #-1900]	; 1e768 <__assert_fail@plt+0xc9f4>
   1eed0:	mov	r9, r0
   1eed4:	b	1e438 <__assert_fail@plt+0xc6c4>
   1eed8:	cmp	r7, #0
   1eedc:	bgt	1ebe0 <__assert_fail@plt+0xce6c>
   1eee0:	b	1ec14 <__assert_fail@plt+0xcea0>
   1eee4:	bl	11930 <memcpy@plt>
   1eee8:	b	1ec64 <__assert_fail@plt+0xcef0>
   1eeec:	mov	r6, r3
   1eef0:	mov	r5, #1
   1eef4:	b	1ea5c <__assert_fail@plt+0xcce8>
   1eef8:	mov	r2, r7
   1eefc:	ldr	r1, [sp, #56]	; 0x38
   1ef00:	mov	r0, fp
   1ef04:	bl	1d728 <__assert_fail@plt+0xb9b4>
   1ef08:	b	1df14 <__assert_fail@plt+0xc1a0>
   1ef0c:	sub	r3, r3, #1
   1ef10:	tst	r3, #3
   1ef14:	ldrne	r3, [pc, #-1960]	; 1e774 <__assert_fail@plt+0xca00>
   1ef18:	bne	1ef60 <__assert_fail@plt+0xd1ec>
   1ef1c:	ldr	r2, [pc, #-1976]	; 1e76c <__assert_fail@plt+0xc9f8>
   1ef20:	mov	r0, #100	; 0x64
   1ef24:	smull	r2, ip, r2, r3
   1ef28:	asr	r2, r3, #31
   1ef2c:	rsb	lr, r2, ip, asr #5
   1ef30:	mul	r0, r0, lr
   1ef34:	cmp	r3, r0
   1ef38:	ldrne	r3, [pc, #-2000]	; 1e770 <__assert_fail@plt+0xc9fc>
   1ef3c:	bne	1ef60 <__assert_fail@plt+0xd1ec>
   1ef40:	rsb	r2, r2, ip, asr #7
   1ef44:	mov	ip, #400	; 0x190
   1ef48:	ldr	r0, [pc, #-2012]	; 1e774 <__assert_fail@plt+0xca00>
   1ef4c:	mul	r2, ip, r2
   1ef50:	sub	ip, ip, #34	; 0x22
   1ef54:	cmp	r3, r2
   1ef58:	movne	r3, r0
   1ef5c:	moveq	r3, ip
   1ef60:	ldr	r2, [sp, #36]	; 0x24
   1ef64:	add	r3, r9, r3
   1ef68:	sub	r2, r3, r2
   1ef6c:	ldr	r0, [pc, #-2044]	; 1e778 <__assert_fail@plt+0xca04>
   1ef70:	add	r2, r2, #380	; 0x17c
   1ef74:	add	r2, r2, #2
   1ef78:	mvn	lr, #0
   1ef7c:	smull	r0, ip, r0, r2
   1ef80:	add	ip, ip, r2
   1ef84:	asr	r0, r2, #31
   1ef88:	rsb	r0, r0, ip, asr #2
   1ef8c:	rsb	r0, r0, r0, lsl #3
   1ef90:	sub	r2, r2, r0
   1ef94:	sub	r3, r3, r2
   1ef98:	add	r3, r3, #3
   1ef9c:	b	1e918 <__assert_fail@plt+0xcba4>
   1efa0:	ldr	r2, [sp, #24]
   1efa4:	mov	lr, #2
   1efa8:	str	r2, [sp, #36]	; 0x24
   1efac:	mov	r0, #99	; 0x63
   1efb0:	mov	r2, #1
   1efb4:	b	1ee18 <__assert_fail@plt+0xd0a4>
   1efb8:	sub	r0, r0, #2000	; 0x7d0
   1efbc:	cmp	r2, r0
   1efc0:	rsblt	r3, r3, #0
   1efc4:	addge	r3, r3, #100	; 0x64
   1efc8:	b	1e288 <__assert_fail@plt+0xc514>
   1efcc:	cmp	r2, #0
   1efd0:	add	r3, r3, #100	; 0x64
   1efd4:	beq	1e984 <__assert_fail@plt+0xcc10>
   1efd8:	b	1e294 <__assert_fail@plt+0xc520>
   1efdc:	ldr	r2, [pc, #-2156]	; 1e778 <__assert_fail@plt+0xca04>
   1efe0:	mov	lr, #2
   1efe4:	smull	r0, r2, r2, r3
   1efe8:	add	r0, r2, r3
   1efec:	asr	r2, r3, #31
   1eff0:	rsb	r2, r2, r0, asr #2
   1eff4:	add	r2, r2, #1
   1eff8:	b	1df58 <__assert_fail@plt+0xc1e4>
   1effc:	ldr	r2, [pc, #-2184]	; 1e77c <__assert_fail@plt+0xca08>
   1f000:	add	r3, r5, #1888	; 0x760
   1f004:	sub	r2, r2, lr
   1f008:	cmp	r5, r2
   1f00c:	movge	r0, #0
   1f010:	movlt	r0, #1
   1f014:	str	r0, [sp, #36]	; 0x24
   1f018:	ldr	r0, [sp, #24]
   1f01c:	add	r3, r3, #12
   1f020:	cmp	r0, #0
   1f024:	add	r3, r3, lr
   1f028:	bne	1ede0 <__assert_fail@plt+0xd06c>
   1f02c:	ldr	r0, [sp, #1156]	; 0x484
   1f030:	cmp	r5, r2
   1f034:	movlt	r2, #0
   1f038:	movge	r2, #1
   1f03c:	cmp	r0, #43	; 0x2b
   1f040:	beq	1f060 <__assert_fail@plt+0xd2ec>
   1f044:	str	r0, [sp, #24]
   1f048:	mov	ip, #0
   1f04c:	mov	lr, #4
   1f050:	b	1e2b4 <__assert_fail@plt+0xc540>
   1f054:	mov	r3, #1
   1f058:	str	r3, [sp, #36]	; 0x24
   1f05c:	b	1e1c0 <__assert_fail@plt+0xc44c>
   1f060:	mov	lr, #4
   1f064:	ldr	r0, [pc, #-2284]	; 1e780 <__assert_fail@plt+0xca0c>
   1f068:	b	1ee18 <__assert_fail@plt+0xd0a4>
   1f06c:	ldr	r2, [sp, #44]	; 0x2c
   1f070:	mov	r3, #75	; 0x4b
   1f074:	str	r3, [r2]
   1f078:	b	1d8ec <__assert_fail@plt+0xbb78>
   1f07c:	mov	r6, r3
   1f080:	mov	r5, #1
   1f084:	b	1e634 <__assert_fail@plt+0xc8c0>
   1f088:	cmp	ip, #0
   1f08c:	bne	1f0ac <__assert_fail@plt+0xd338>
   1f090:	cmp	r0, #0
   1f094:	bne	1f0d8 <__assert_fail@plt+0xd364>
   1f098:	ldr	r2, [sp, #36]	; 0x24
   1f09c:	mov	ip, #1
   1f0a0:	eor	r2, r2, #1
   1f0a4:	mov	lr, #3
   1f0a8:	b	1df78 <__assert_fail@plt+0xc204>
   1f0ac:	mov	r2, #100	; 0x64
   1f0b0:	ldr	lr, [pc, #-2356]	; 1e784 <__assert_fail@plt+0xca10>
   1f0b4:	mul	r0, r2, r0
   1f0b8:	ldr	r2, [sp, #36]	; 0x24
   1f0bc:	mla	r3, lr, r3, r0
   1f0c0:	eor	r2, r2, #1
   1f0c4:	add	r3, r3, ip
   1f0c8:	mov	r0, #20
   1f0cc:	mov	ip, #1
   1f0d0:	mov	lr, #9
   1f0d4:	b	1df78 <__assert_fail@plt+0xc204>
   1f0d8:	mov	ip, #100	; 0x64
   1f0dc:	ldr	r2, [sp, #36]	; 0x24
   1f0e0:	mla	r3, ip, r3, r0
   1f0e4:	eor	r2, r2, #1
   1f0e8:	mov	ip, #1
   1f0ec:	mov	r0, #4
   1f0f0:	mov	lr, #6
   1f0f4:	b	1df78 <__assert_fail@plt+0xc204>
   1f0f8:	mov	ip, #100	; 0x64
   1f0fc:	ldr	r2, [sp, #36]	; 0x24
   1f100:	mla	r3, ip, r3, r0
   1f104:	eor	r2, r2, #1
   1f108:	mov	ip, #1
   1f10c:	mov	r0, #0
   1f110:	mov	lr, #5
   1f114:	b	1df78 <__assert_fail@plt+0xc204>
   1f118:	push	{r4, r5, lr}
   1f11c:	sub	sp, sp, #36	; 0x24
   1f120:	add	lr, sp, #32
   1f124:	mov	ip, #0
   1f128:	ldr	r5, [sp, #48]	; 0x30
   1f12c:	ldr	r4, [sp, #52]	; 0x34
   1f130:	strb	ip, [lr, #-1]!
   1f134:	str	lr, [sp, #12]
   1f138:	mvn	lr, #0
   1f13c:	str	ip, [sp, #4]
   1f140:	str	ip, [sp]
   1f144:	str	r5, [sp, #16]
   1f148:	str	r4, [sp, #20]
   1f14c:	str	lr, [sp, #8]
   1f150:	bl	1d7a8 <__assert_fail@plt+0xba34>
   1f154:	add	sp, sp, #36	; 0x24
   1f158:	pop	{r4, r5, pc}
   1f15c:	ldr	r3, [pc, #52]	; 1f198 <__assert_fail@plt+0xd424>
   1f160:	push	{r4, lr}
   1f164:	mov	r2, #5
   1f168:	ldr	r1, [pc, #44]	; 1f19c <__assert_fail@plt+0xd428>
   1f16c:	mov	r0, #0
   1f170:	ldr	r4, [r3]
   1f174:	bl	11984 <dcgettext@plt>
   1f178:	ldr	r2, [pc, #32]	; 1f1a0 <__assert_fail@plt+0xd42c>
   1f17c:	mov	r1, #1
   1f180:	mov	r3, r0
   1f184:	mov	r0, r4
   1f188:	bl	11c18 <__fprintf_chk@plt>
   1f18c:	ldr	r3, [pc, #16]	; 1f1a4 <__assert_fail@plt+0xd430>
   1f190:	ldr	r0, [r3]
   1f194:	bl	11b70 <exit@plt>
   1f198:	andeq	r9, r3, r0, lsr #6
   1f19c:	andeq	r7, r2, ip, lsr #30
   1f1a0:	andeq	r8, r2, r8, asr #32
   1f1a4:	andeq	r9, r3, r4, asr #5
   1f1a8:	ldrb	r3, [r0, #40]	; 0x28
   1f1ac:	tst	r3, #1
   1f1b0:	ldr	r3, [r0, #28]
   1f1b4:	bne	1f1c0 <__assert_fail@plt+0xd44c>
   1f1b8:	mov	r0, r1
   1f1bc:	bx	r3
   1f1c0:	ldr	r0, [r0, #36]	; 0x24
   1f1c4:	bx	r3
   1f1c8:	ldrb	r3, [r0, #40]	; 0x28
   1f1cc:	tst	r3, #1
   1f1d0:	ldr	r3, [r0, #32]
   1f1d4:	bne	1f1e0 <__assert_fail@plt+0xd46c>
   1f1d8:	mov	r0, r1
   1f1dc:	bx	r3
   1f1e0:	ldr	r0, [r0, #36]	; 0x24
   1f1e4:	bx	r3
   1f1e8:	push	{r4, r5, r6, lr}
   1f1ec:	subs	r5, r2, #0
   1f1f0:	ldr	r3, [pc, #124]	; 1f274 <__assert_fail@plt+0xd500>
   1f1f4:	subne	r6, r5, #1
   1f1f8:	moveq	r6, #7
   1f1fc:	moveq	r5, #8
   1f200:	cmp	r1, #0
   1f204:	moveq	r1, r3
   1f208:	str	r6, [r0, #24]
   1f20c:	str	r1, [r0]
   1f210:	mov	r4, r0
   1f214:	bl	1f1a8 <__assert_fail@plt+0xd434>
   1f218:	cmp	r0, #0
   1f21c:	str	r0, [r4, #4]
   1f220:	beq	1f268 <__assert_fail@plt+0xd4f4>
   1f224:	ldr	r3, [r4]
   1f228:	add	r2, r0, #8
   1f22c:	rsb	r5, r5, #0
   1f230:	add	r2, r2, r6
   1f234:	add	r3, r0, r3
   1f238:	and	r2, r2, r5
   1f23c:	mov	r1, #0
   1f240:	str	r2, [r4, #8]
   1f244:	str	r2, [r4, #12]
   1f248:	str	r3, [r0]
   1f24c:	str	r3, [r4, #16]
   1f250:	str	r1, [r0, #4]
   1f254:	ldrb	r3, [r4, #40]	; 0x28
   1f258:	mov	r0, #1
   1f25c:	and	r3, r3, #249	; 0xf9
   1f260:	strb	r3, [r4, #40]	; 0x28
   1f264:	pop	{r4, r5, r6, pc}
   1f268:	ldr	r3, [pc, #8]	; 1f278 <__assert_fail@plt+0xd504>
   1f26c:	ldr	r3, [r3]
   1f270:	blx	r3
   1f274:	andeq	r0, r0, r8, ror #31
   1f278:	andeq	r9, r3, r8, asr #5

0001f27c <_obstack_begin@@Base>:
   1f27c:	push	{r4, lr}
   1f280:	ldrb	lr, [r0, #40]	; 0x28
   1f284:	ldr	r4, [sp, #8]
   1f288:	str	r3, [r0, #28]
   1f28c:	bic	lr, lr, #1
   1f290:	str	r4, [r0, #32]
   1f294:	strb	lr, [r0, #40]	; 0x28
   1f298:	pop	{r4, lr}
   1f29c:	b	1f1e8 <__assert_fail@plt+0xd474>

0001f2a0 <_obstack_begin_1@@Base>:
   1f2a0:	push	{r4, r5, lr}
   1f2a4:	ldrb	lr, [r0, #40]	; 0x28
   1f2a8:	ldr	r5, [sp, #12]
   1f2ac:	ldr	r4, [sp, #16]
   1f2b0:	orr	lr, lr, #1
   1f2b4:	str	r3, [r0, #28]
   1f2b8:	str	r5, [r0, #32]
   1f2bc:	str	r4, [r0, #36]	; 0x24
   1f2c0:	strb	lr, [r0, #40]	; 0x28
   1f2c4:	pop	{r4, r5, lr}
   1f2c8:	b	1f1e8 <__assert_fail@plt+0xd474>

0001f2cc <_obstack_newchunk@@Base>:
   1f2cc:	ldr	r2, [r0, #8]
   1f2d0:	push	{r4, r5, r6, r7, r8, lr}
   1f2d4:	ldr	r6, [r0, #12]
   1f2d8:	ldr	r3, [r0, #24]
   1f2dc:	sub	r6, r6, r2
   1f2e0:	add	r1, r6, r1
   1f2e4:	adds	r3, r1, r3
   1f2e8:	movcc	r2, #1
   1f2ec:	movcs	r2, #0
   1f2f0:	cmp	r6, r1
   1f2f4:	movhi	r1, #0
   1f2f8:	andls	r1, r2, #1
   1f2fc:	cmp	r1, #0
   1f300:	bne	1f310 <_obstack_newchunk@@Base+0x44>
   1f304:	ldr	r3, [pc, #204]	; 1f3d8 <_obstack_newchunk@@Base+0x10c>
   1f308:	ldr	r3, [r3]
   1f30c:	blx	r3
   1f310:	ldr	r5, [r0]
   1f314:	add	r1, r3, r6, lsr #3
   1f318:	cmp	r3, r5
   1f31c:	movcc	r3, r5
   1f320:	add	r1, r1, #100	; 0x64
   1f324:	cmp	r3, r1
   1f328:	movcs	r5, r3
   1f32c:	movcc	r5, r1
   1f330:	mov	r1, r5
   1f334:	mov	r4, r0
   1f338:	ldr	r7, [r0, #4]
   1f33c:	bl	1f1a8 <__assert_fail@plt+0xd434>
   1f340:	subs	r8, r0, #0
   1f344:	beq	1f304 <_obstack_newchunk@@Base+0x38>
   1f348:	ldr	r2, [r4, #24]
   1f34c:	mov	r3, r8
   1f350:	add	r1, r8, r5
   1f354:	str	r8, [r4, #4]
   1f358:	str	r7, [r8, #4]
   1f35c:	str	r1, [r4, #16]
   1f360:	str	r1, [r3], #8
   1f364:	add	r3, r3, r2
   1f368:	bic	r5, r3, r2
   1f36c:	mov	r0, r5
   1f370:	mov	r2, r6
   1f374:	ldr	r1, [r4, #8]
   1f378:	bl	11930 <memcpy@plt>
   1f37c:	ldrb	r3, [r4, #40]	; 0x28
   1f380:	tst	r3, #2
   1f384:	bne	1f3a4 <_obstack_newchunk@@Base+0xd8>
   1f388:	ldr	r2, [r4, #24]
   1f38c:	add	r3, r7, #8
   1f390:	add	r3, r3, r2
   1f394:	ldr	r1, [r4, #8]
   1f398:	bic	r3, r3, r2
   1f39c:	cmp	r1, r3
   1f3a0:	beq	1f3c0 <_obstack_newchunk@@Base+0xf4>
   1f3a4:	ldrb	r3, [r4, #40]	; 0x28
   1f3a8:	add	r2, r5, r6
   1f3ac:	str	r2, [r4, #12]
   1f3b0:	bic	r3, r3, #2
   1f3b4:	str	r5, [r4, #8]
   1f3b8:	strb	r3, [r4, #40]	; 0x28
   1f3bc:	pop	{r4, r5, r6, r7, r8, pc}
   1f3c0:	ldr	r3, [r7, #4]
   1f3c4:	mov	r1, r7
   1f3c8:	str	r3, [r8, #4]
   1f3cc:	mov	r0, r4
   1f3d0:	bl	1f1c8 <__assert_fail@plt+0xd454>
   1f3d4:	b	1f3a4 <_obstack_newchunk@@Base+0xd8>
   1f3d8:	andeq	r9, r3, r8, asr #5

0001f3dc <_obstack_allocated_p@@Base>:
   1f3dc:	ldr	r0, [r0, #4]
   1f3e0:	cmp	r0, #0
   1f3e4:	bne	1f3f8 <_obstack_allocated_p@@Base+0x1c>
   1f3e8:	b	1f414 <_obstack_allocated_p@@Base+0x38>
   1f3ec:	ldr	r0, [r0, #4]
   1f3f0:	cmp	r0, #0
   1f3f4:	bxeq	lr
   1f3f8:	cmp	r1, r0
   1f3fc:	bls	1f3ec <_obstack_allocated_p@@Base+0x10>
   1f400:	ldr	r3, [r0]
   1f404:	cmp	r1, r3
   1f408:	bhi	1f3ec <_obstack_allocated_p@@Base+0x10>
   1f40c:	mov	r0, #1
   1f410:	bx	lr
   1f414:	bx	lr

0001f418 <_obstack_free@@Base>:
   1f418:	push	{r4, r5, r6, lr}
   1f41c:	mov	r6, r1
   1f420:	ldr	r4, [r0, #4]
   1f424:	cmp	r4, #0
   1f428:	movne	r5, r0
   1f42c:	beq	1f468 <_obstack_free@@Base+0x50>
   1f430:	cmp	r6, r4
   1f434:	bls	1f444 <_obstack_free@@Base+0x2c>
   1f438:	ldr	r2, [r4]
   1f43c:	cmp	r6, r2
   1f440:	bls	1f474 <_obstack_free@@Base+0x5c>
   1f444:	mov	r1, r4
   1f448:	mov	r0, r5
   1f44c:	ldr	r4, [r4, #4]
   1f450:	bl	1f1c8 <__assert_fail@plt+0xd454>
   1f454:	ldrb	r2, [r5, #40]	; 0x28
   1f458:	cmp	r4, #0
   1f45c:	orr	r2, r2, #2
   1f460:	strb	r2, [r5, #40]	; 0x28
   1f464:	bne	1f430 <_obstack_free@@Base+0x18>
   1f468:	cmp	r6, #0
   1f46c:	bne	1f488 <_obstack_free@@Base+0x70>
   1f470:	pop	{r4, r5, r6, pc}
   1f474:	str	r6, [r5, #12]
   1f478:	str	r6, [r5, #8]
   1f47c:	str	r2, [r5, #16]
   1f480:	str	r4, [r5, #4]
   1f484:	pop	{r4, r5, r6, pc}
   1f488:	bl	11d2c <abort@plt>

0001f48c <_obstack_memory_used@@Base>:
   1f48c:	ldr	r3, [r0, #4]
   1f490:	cmp	r3, #0
   1f494:	beq	1f4b8 <_obstack_memory_used@@Base+0x2c>
   1f498:	mov	r0, #0
   1f49c:	ldr	r2, [r3]
   1f4a0:	sub	r2, r2, r3
   1f4a4:	ldr	r3, [r3, #4]
   1f4a8:	add	r0, r0, r2
   1f4ac:	cmp	r3, #0
   1f4b0:	bne	1f49c <_obstack_memory_used@@Base+0x10>
   1f4b4:	bx	lr
   1f4b8:	mov	r0, r3
   1f4bc:	bx	lr
   1f4c0:	push	{r4, r5, r6, lr}
   1f4c4:	subs	r4, r0, #0
   1f4c8:	beq	1f53c <_obstack_memory_used@@Base+0xb0>
   1f4cc:	mov	r1, #47	; 0x2f
   1f4d0:	bl	11c78 <strrchr@plt>
   1f4d4:	subs	r5, r0, #0
   1f4d8:	beq	1f528 <_obstack_memory_used@@Base+0x9c>
   1f4dc:	add	r6, r5, #1
   1f4e0:	sub	r3, r6, r4
   1f4e4:	cmp	r3, #6
   1f4e8:	ble	1f528 <_obstack_memory_used@@Base+0x9c>
   1f4ec:	mov	r2, #7
   1f4f0:	ldr	r1, [pc, #96]	; 1f558 <_obstack_memory_used@@Base+0xcc>
   1f4f4:	sub	r0, r5, #6
   1f4f8:	bl	11d20 <strncmp@plt>
   1f4fc:	cmp	r0, #0
   1f500:	bne	1f528 <_obstack_memory_used@@Base+0x9c>
   1f504:	mov	r2, #3
   1f508:	ldr	r1, [pc, #76]	; 1f55c <_obstack_memory_used@@Base+0xd0>
   1f50c:	mov	r0, r6
   1f510:	bl	11d20 <strncmp@plt>
   1f514:	cmp	r0, #0
   1f518:	movne	r4, r6
   1f51c:	ldreq	r3, [pc, #60]	; 1f560 <_obstack_memory_used@@Base+0xd4>
   1f520:	addeq	r4, r5, #4
   1f524:	streq	r4, [r3]
   1f528:	ldr	r2, [pc, #52]	; 1f564 <_obstack_memory_used@@Base+0xd8>
   1f52c:	ldr	r3, [pc, #52]	; 1f568 <_obstack_memory_used@@Base+0xdc>
   1f530:	str	r4, [r2]
   1f534:	str	r4, [r3]
   1f538:	pop	{r4, r5, r6, pc}
   1f53c:	ldr	r3, [pc, #40]	; 1f56c <_obstack_memory_used@@Base+0xe0>
   1f540:	mov	r2, #55	; 0x37
   1f544:	mov	r1, #1
   1f548:	ldr	r3, [r3]
   1f54c:	ldr	r0, [pc, #28]	; 1f570 <_obstack_memory_used@@Base+0xe4>
   1f550:	bl	11a2c <fwrite@plt>
   1f554:	bl	11d2c <abort@plt>
   1f558:	andeq	r7, r2, r8, ror pc
   1f55c:	andeq	r7, r2, r0, lsl #31
   1f560:	andeq	r9, r3, r0, lsl r3
   1f564:	andeq	sl, r3, r4, ror #7
   1f568:	andeq	r9, r3, r4, lsl r3
   1f56c:	andeq	r9, r3, r0, lsr #6
   1f570:	andeq	r7, r2, r0, asr #30
   1f574:	push	{r4, r5, r6, lr}
   1f578:	mov	r2, #48	; 0x30
   1f57c:	mov	r4, r1
   1f580:	mov	r1, #0
   1f584:	mov	r5, r0
   1f588:	bl	11be8 <memset@plt>
   1f58c:	cmp	r4, #10
   1f590:	beq	1f5a0 <_obstack_memory_used@@Base+0x114>
   1f594:	str	r4, [r5]
   1f598:	mov	r0, r5
   1f59c:	pop	{r4, r5, r6, pc}
   1f5a0:	bl	11d2c <abort@plt>
   1f5a4:	push	{r4, r5, r6, lr}
   1f5a8:	mov	r4, r0
   1f5ac:	mov	r5, r1
   1f5b0:	bl	231bc <_obstack_memory_used@@Base+0x3d30>
   1f5b4:	ldrb	r3, [r0]
   1f5b8:	bic	r3, r3, #32
   1f5bc:	cmp	r3, #85	; 0x55
   1f5c0:	bne	1f620 <_obstack_memory_used@@Base+0x194>
   1f5c4:	ldrb	r3, [r0, #1]
   1f5c8:	bic	r3, r3, #32
   1f5cc:	cmp	r3, #84	; 0x54
   1f5d0:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f5d4:	ldrb	r3, [r0, #2]
   1f5d8:	bic	r3, r3, #32
   1f5dc:	cmp	r3, #70	; 0x46
   1f5e0:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f5e4:	ldrb	r3, [r0, #3]
   1f5e8:	cmp	r3, #45	; 0x2d
   1f5ec:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f5f0:	ldrb	r3, [r0, #4]
   1f5f4:	cmp	r3, #56	; 0x38
   1f5f8:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f5fc:	ldrb	r3, [r0, #5]
   1f600:	cmp	r3, #0
   1f604:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f608:	ldrb	r2, [r4]
   1f60c:	ldr	r3, [pc, #152]	; 1f6ac <_obstack_memory_used@@Base+0x220>
   1f610:	ldr	r0, [pc, #152]	; 1f6b0 <_obstack_memory_used@@Base+0x224>
   1f614:	cmp	r2, #96	; 0x60
   1f618:	movne	r0, r3
   1f61c:	pop	{r4, r5, r6, pc}
   1f620:	cmp	r3, #71	; 0x47
   1f624:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f628:	ldrb	r3, [r0, #1]
   1f62c:	bic	r3, r3, #32
   1f630:	cmp	r3, #66	; 0x42
   1f634:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f638:	ldrb	r3, [r0, #2]
   1f63c:	cmp	r3, #49	; 0x31
   1f640:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f644:	ldrb	r3, [r0, #3]
   1f648:	cmp	r3, #56	; 0x38
   1f64c:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f650:	ldrb	r3, [r0, #4]
   1f654:	cmp	r3, #48	; 0x30
   1f658:	beq	1f670 <_obstack_memory_used@@Base+0x1e4>
   1f65c:	ldr	r3, [pc, #80]	; 1f6b4 <_obstack_memory_used@@Base+0x228>
   1f660:	cmp	r5, #9
   1f664:	ldr	r0, [pc, #76]	; 1f6b8 <_obstack_memory_used@@Base+0x22c>
   1f668:	movne	r0, r3
   1f66c:	pop	{r4, r5, r6, pc}
   1f670:	ldrb	r3, [r0, #5]
   1f674:	cmp	r3, #51	; 0x33
   1f678:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f67c:	ldrb	r3, [r0, #6]
   1f680:	cmp	r3, #48	; 0x30
   1f684:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f688:	ldrb	r3, [r0, #7]
   1f68c:	cmp	r3, #0
   1f690:	bne	1f65c <_obstack_memory_used@@Base+0x1d0>
   1f694:	ldrb	r2, [r4]
   1f698:	ldr	r3, [pc, #28]	; 1f6bc <_obstack_memory_used@@Base+0x230>
   1f69c:	ldr	r0, [pc, #28]	; 1f6c0 <_obstack_memory_used@@Base+0x234>
   1f6a0:	cmp	r2, #96	; 0x60
   1f6a4:	movne	r0, r3
   1f6a8:	pop	{r4, r5, r6, pc}
   1f6ac:	ldrdeq	r7, [r2], -ip
   1f6b0:	ldrdeq	r7, [r2], -r8
   1f6b4:	andeq	r7, r2, ip, ror #31
   1f6b8:	andeq	r7, r2, r8, ror #31
   1f6bc:	andeq	r7, r2, r4, ror #31
   1f6c0:	andeq	r7, r2, r0, ror #31
   1f6c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6c8:	sub	sp, sp, #116	; 0x74
   1f6cc:	mov	sl, r0
   1f6d0:	str	r3, [sp, #24]
   1f6d4:	mov	r3, #1
   1f6d8:	mov	r8, r1
   1f6dc:	str	r2, [sp, #56]	; 0x38
   1f6e0:	str	r3, [sp, #36]	; 0x24
   1f6e4:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1f6e8:	ldr	r3, [sp, #156]	; 0x9c
   1f6ec:	mov	fp, r8
   1f6f0:	mov	r2, #0
   1f6f4:	lsr	r3, r3, #1
   1f6f8:	and	r3, r3, #1
   1f6fc:	str	r2, [sp, #68]	; 0x44
   1f700:	str	r3, [sp, #28]
   1f704:	str	r2, [sp, #40]	; 0x28
   1f708:	str	r2, [sp, #44]	; 0x2c
   1f70c:	str	r2, [sp, #52]	; 0x34
   1f710:	str	r2, [sp, #64]	; 0x40
   1f714:	str	r2, [sp, #72]	; 0x48
   1f718:	str	sl, [sp, #32]
   1f71c:	str	r0, [sp, #76]	; 0x4c
   1f720:	ldr	r3, [sp, #152]	; 0x98
   1f724:	cmp	r3, #10
   1f728:	ldrls	pc, [pc, r3, lsl #2]
   1f72c:	b	208ec <_obstack_memory_used@@Base+0x1460>
   1f730:	andeq	pc, r1, ip, asr r7	; <UNPREDICTABLE>
   1f734:	andeq	pc, r1, r4, asr #20
   1f738:	andeq	pc, r1, r8, ror #20
   1f73c:	andeq	pc, r1, ip, lsl #21
   1f740:			; <UNDEFINED> instruction: 0x0001fbb8
   1f744:	andeq	pc, r1, ip, lsl #23
   1f748:	andeq	pc, r1, r4, ror #22
   1f74c:	andeq	pc, r1, r0, lsr #21
   1f750:			; <UNDEFINED> instruction: 0x0001fab8
   1f754:			; <UNDEFINED> instruction: 0x0001fab8
   1f758:			; <UNDEFINED> instruction: 0x0001fab8
   1f75c:	mov	r3, #0
   1f760:	mov	r7, r3
   1f764:	str	r3, [sp, #28]
   1f768:	ldr	r3, [sp, #44]	; 0x2c
   1f76c:	mov	sl, #0
   1f770:	eor	r3, r3, #1
   1f774:	str	r3, [sp, #60]	; 0x3c
   1f778:	ldr	r3, [sp, #24]
   1f77c:	cmn	r3, #1
   1f780:	beq	1fce4 <_obstack_memory_used@@Base+0x858>
   1f784:	ldr	r3, [sp, #24]
   1f788:	subs	r5, r3, sl
   1f78c:	movne	r5, #1
   1f790:	cmp	r5, #0
   1f794:	beq	1fcfc <_obstack_memory_used@@Base+0x870>
   1f798:	ldr	r3, [sp, #152]	; 0x98
   1f79c:	ldr	r8, [sp, #44]	; 0x2c
   1f7a0:	cmp	r3, #2
   1f7a4:	moveq	r8, #0
   1f7a8:	andne	r8, r8, #1
   1f7ac:	ldr	r3, [sp, #52]	; 0x34
   1f7b0:	adds	r9, r3, #0
   1f7b4:	movne	r9, #1
   1f7b8:	ands	r6, r9, r8
   1f7bc:	beq	20164 <_obstack_memory_used@@Base+0xcd8>
   1f7c0:	ldr	r2, [sp, #52]	; 0x34
   1f7c4:	ldr	r1, [sp, #24]
   1f7c8:	cmp	r2, #1
   1f7cc:	mov	r3, r2
   1f7d0:	movls	r3, #0
   1f7d4:	movhi	r3, #1
   1f7d8:	cmn	r1, #1
   1f7dc:	movne	r3, #0
   1f7e0:	cmp	r3, #0
   1f7e4:	add	r4, sl, r2
   1f7e8:	beq	1f7f8 <_obstack_memory_used@@Base+0x36c>
   1f7ec:	ldr	r0, [sp, #56]	; 0x38
   1f7f0:	bl	11b94 <strlen@plt>
   1f7f4:	str	r0, [sp, #24]
   1f7f8:	ldr	r3, [sp, #24]
   1f7fc:	cmp	r3, r4
   1f800:	ldr	r3, [sp, #56]	; 0x38
   1f804:	add	r3, r3, sl
   1f808:	str	r3, [sp, #48]	; 0x30
   1f80c:	bcc	20170 <_obstack_memory_used@@Base+0xce4>
   1f810:	mov	r0, r3
   1f814:	ldr	r2, [sp, #52]	; 0x34
   1f818:	ldr	r1, [sp, #64]	; 0x40
   1f81c:	bl	1196c <memcmp@plt>
   1f820:	cmp	r0, #0
   1f824:	bne	20170 <_obstack_memory_used@@Base+0xce4>
   1f828:	ldr	r3, [sp, #28]
   1f82c:	cmp	r3, #0
   1f830:	bne	209ec <_obstack_memory_used@@Base+0x1560>
   1f834:	ldr	r3, [sp, #48]	; 0x30
   1f838:	ldrb	r4, [r3]
   1f83c:	cmp	r4, #126	; 0x7e
   1f840:	ldrls	pc, [pc, r4, lsl #2]
   1f844:	b	20104 <_obstack_memory_used@@Base+0xc78>
   1f848:	andeq	pc, r1, r8, lsr #30
   1f84c:	andeq	r0, r2, r4, lsl #2
   1f850:	andeq	r0, r2, r4, lsl #2
   1f854:	andeq	r0, r2, r4, lsl #2
   1f858:	andeq	r0, r2, r4, lsl #2
   1f85c:	andeq	r0, r2, r4, lsl #2
   1f860:	andeq	r0, r2, r4, lsl #2
   1f864:	andeq	pc, r1, ip, lsl #30
   1f868:	strdeq	pc, [r1], -r0
   1f86c:	andeq	r0, r2, ip, ror #1
   1f870:	andeq	pc, r1, r0, asr lr	; <UNPREDICTABLE>
   1f874:	andeq	pc, r1, r4, lsr lr	; <UNPREDICTABLE>
   1f878:	andeq	r0, r2, r8, asr #1
   1f87c:	andeq	r0, r2, r4, lsr #1
   1f880:	andeq	r0, r2, r4, lsl #2
   1f884:	andeq	r0, r2, r4, lsl #2
   1f888:	andeq	r0, r2, r4, lsl #2
   1f88c:	andeq	r0, r2, r4, lsl #2
   1f890:	andeq	r0, r2, r4, lsl #2
   1f894:	andeq	r0, r2, r4, lsl #2
   1f898:	andeq	r0, r2, r4, lsl #2
   1f89c:	andeq	r0, r2, r4, lsl #2
   1f8a0:	andeq	r0, r2, r4, lsl #2
   1f8a4:	andeq	r0, r2, r4, lsl #2
   1f8a8:	andeq	r0, r2, r4, lsl #2
   1f8ac:	andeq	r0, r2, r4, lsl #2
   1f8b0:	andeq	r0, r2, r4, lsl #2
   1f8b4:	andeq	r0, r2, r4, lsl #2
   1f8b8:	andeq	r0, r2, r4, lsl #2
   1f8bc:	andeq	r0, r2, r4, lsl #2
   1f8c0:	andeq	r0, r2, r4, lsl #2
   1f8c4:	andeq	r0, r2, r4, lsl #2
   1f8c8:	andeq	r0, r2, r4, ror #1
   1f8cc:	andeq	r0, r2, r8, lsl r0
   1f8d0:	andeq	r0, r2, r8, lsl r0
   1f8d4:	andeq	pc, r1, r8, lsr #24
   1f8d8:	andeq	r0, r2, r8, lsl r0
   1f8dc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f8e0:	andeq	r0, r2, r8, lsl r0
   1f8e4:	andeq	r0, r2, r4, lsl #1
   1f8e8:	andeq	r0, r2, r8, lsl r0
   1f8ec:	andeq	r0, r2, r8, lsl r0
   1f8f0:	andeq	r0, r2, r8, lsl r0
   1f8f4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f8f8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f8fc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f900:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f904:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f908:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f90c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f910:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f914:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f918:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f91c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f920:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f924:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f928:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f92c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f930:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f934:	andeq	r0, r2, r8, lsl r0
   1f938:	andeq	r0, r2, r8, lsl r0
   1f93c:	andeq	r0, r2, r8, lsl r0
   1f940:	andeq	r0, r2, r8, lsl r0
   1f944:	andeq	r0, r2, r4, asr r0
   1f948:	andeq	r0, r2, r4, lsl #2
   1f94c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f950:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f954:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f958:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f95c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f960:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f964:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f968:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f96c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f970:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f974:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f978:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f97c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f980:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f984:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f988:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f98c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f990:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f994:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f998:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f99c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9a0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9a4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9a8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9ac:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9b0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9b4:	andeq	r0, r2, r8, lsl r0
   1f9b8:	andeq	pc, r1, r4, ror sp	; <UNPREDICTABLE>
   1f9bc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9c0:	andeq	r0, r2, r8, lsl r0
   1f9c4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9c8:	andeq	r0, r2, r8, lsl r0
   1f9cc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9d0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9d4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9d8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9dc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9e0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9e4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9e8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9ec:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9f0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9f4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9f8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f9fc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa00:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa04:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa08:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa0c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa10:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa14:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa18:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa1c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa20:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa24:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa28:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa2c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa30:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fa34:	andeq	pc, r1, r8, lsl #24
   1fa38:	andeq	r0, r2, r8, lsl r0
   1fa3c:	andeq	pc, r1, r8, lsl #24
   1fa40:	andeq	pc, r1, r8, lsr #24
   1fa44:	mov	r3, #1
   1fa48:	str	r3, [sp, #28]
   1fa4c:	str	r3, [sp, #52]	; 0x34
   1fa50:	ldr	r3, [pc, #4000]	; 209f8 <_obstack_memory_used@@Base+0x156c>
   1fa54:	mov	r7, #0
   1fa58:	str	r3, [sp, #64]	; 0x40
   1fa5c:	mov	r3, #2
   1fa60:	str	r3, [sp, #152]	; 0x98
   1fa64:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   1fa68:	ldr	r3, [sp, #28]
   1fa6c:	cmp	r3, #0
   1fa70:	beq	1fbcc <_obstack_memory_used@@Base+0x740>
   1fa74:	mov	r3, #1
   1fa78:	str	r3, [sp, #52]	; 0x34
   1fa7c:	ldr	r3, [pc, #3956]	; 209f8 <_obstack_memory_used@@Base+0x156c>
   1fa80:	mov	r7, #0
   1fa84:	str	r3, [sp, #64]	; 0x40
   1fa88:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   1fa8c:	mov	r3, #1
   1fa90:	str	r3, [sp, #44]	; 0x2c
   1fa94:	str	r3, [sp, #52]	; 0x34
   1fa98:	str	r3, [sp, #28]
   1fa9c:	b	1fa50 <_obstack_memory_used@@Base+0x5c4>
   1faa0:	mov	r3, #0
   1faa4:	str	r3, [sp, #28]
   1faa8:	mov	r3, #1
   1faac:	str	r3, [sp, #44]	; 0x2c
   1fab0:	mov	r7, #0
   1fab4:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   1fab8:	ldr	r3, [sp, #152]	; 0x98
   1fabc:	cmp	r3, #10
   1fac0:	beq	1fb04 <_obstack_memory_used@@Base+0x678>
   1fac4:	mov	r2, #5
   1fac8:	ldr	r1, [pc, #3884]	; 209fc <_obstack_memory_used@@Base+0x1570>
   1facc:	mov	r0, #0
   1fad0:	bl	11984 <dcgettext@plt>
   1fad4:	ldr	r2, [pc, #3872]	; 209fc <_obstack_memory_used@@Base+0x1570>
   1fad8:	cmp	r0, r2
   1fadc:	str	r0, [sp, #164]	; 0xa4
   1fae0:	beq	20ae8 <_obstack_memory_used@@Base+0x165c>
   1fae4:	mov	r2, #5
   1fae8:	ldr	r1, [pc, #3848]	; 209f8 <_obstack_memory_used@@Base+0x156c>
   1faec:	mov	r0, #0
   1faf0:	bl	11984 <dcgettext@plt>
   1faf4:	ldr	r2, [pc, #3836]	; 209f8 <_obstack_memory_used@@Base+0x156c>
   1faf8:	cmp	r0, r2
   1fafc:	str	r0, [sp, #168]	; 0xa8
   1fb00:	beq	20ad8 <_obstack_memory_used@@Base+0x164c>
   1fb04:	ldr	r7, [sp, #28]
   1fb08:	cmp	r7, #0
   1fb0c:	movne	r7, #0
   1fb10:	bne	1fb44 <_obstack_memory_used@@Base+0x6b8>
   1fb14:	ldr	r3, [sp, #164]	; 0xa4
   1fb18:	ldrb	r3, [r3]
   1fb1c:	cmp	r3, #0
   1fb20:	beq	20af8 <_obstack_memory_used@@Base+0x166c>
   1fb24:	ldr	r2, [sp, #164]	; 0xa4
   1fb28:	ldr	r1, [sp, #32]
   1fb2c:	cmp	fp, r7
   1fb30:	strbhi	r3, [r1, r7]
   1fb34:	ldrb	r3, [r2, #1]!
   1fb38:	add	r7, r7, #1
   1fb3c:	cmp	r3, #0
   1fb40:	bne	1fb2c <_obstack_memory_used@@Base+0x6a0>
   1fb44:	ldr	r0, [sp, #168]	; 0xa8
   1fb48:	bl	11b94 <strlen@plt>
   1fb4c:	ldr	r3, [sp, #168]	; 0xa8
   1fb50:	str	r3, [sp, #64]	; 0x40
   1fb54:	mov	r3, #1
   1fb58:	str	r3, [sp, #44]	; 0x2c
   1fb5c:	str	r0, [sp, #52]	; 0x34
   1fb60:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   1fb64:	mov	r3, #1
   1fb68:	str	r3, [sp, #44]	; 0x2c
   1fb6c:	str	r3, [sp, #52]	; 0x34
   1fb70:	str	r3, [sp, #28]
   1fb74:	ldr	r3, [pc, #3716]	; 20a00 <_obstack_memory_used@@Base+0x1574>
   1fb78:	mov	r7, #0
   1fb7c:	str	r3, [sp, #64]	; 0x40
   1fb80:	mov	r3, #5
   1fb84:	str	r3, [sp, #152]	; 0x98
   1fb88:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   1fb8c:	ldr	r3, [sp, #28]
   1fb90:	cmp	r3, #0
   1fb94:	beq	20894 <_obstack_memory_used@@Base+0x1408>
   1fb98:	ldr	r3, [sp, #28]
   1fb9c:	mov	r7, #0
   1fba0:	str	r3, [sp, #44]	; 0x2c
   1fba4:	mov	r3, #1
   1fba8:	str	r3, [sp, #52]	; 0x34
   1fbac:	ldr	r3, [pc, #3660]	; 20a00 <_obstack_memory_used@@Base+0x1574>
   1fbb0:	str	r3, [sp, #64]	; 0x40
   1fbb4:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   1fbb8:	ldr	r3, [sp, #28]
   1fbbc:	cmp	r3, #0
   1fbc0:	mov	r3, #1
   1fbc4:	streq	r3, [sp, #44]	; 0x2c
   1fbc8:	bne	1fa4c <_obstack_memory_used@@Base+0x5c0>
   1fbcc:	cmp	fp, #0
   1fbd0:	beq	208c4 <_obstack_memory_used@@Base+0x1438>
   1fbd4:	ldr	r3, [sp, #32]
   1fbd8:	mov	r2, #39	; 0x27
   1fbdc:	mov	r7, #1
   1fbe0:	strb	r2, [r3]
   1fbe4:	mov	r3, #0
   1fbe8:	str	r3, [sp, #28]
   1fbec:	mov	r3, #1
   1fbf0:	str	r3, [sp, #52]	; 0x34
   1fbf4:	ldr	r3, [pc, #3580]	; 209f8 <_obstack_memory_used@@Base+0x156c>
   1fbf8:	str	r3, [sp, #64]	; 0x40
   1fbfc:	mov	r3, #2
   1fc00:	str	r3, [sp, #152]	; 0x98
   1fc04:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   1fc08:	ldr	r3, [sp, #24]
   1fc0c:	cmn	r3, #1
   1fc10:	beq	20828 <_obstack_memory_used@@Base+0x139c>
   1fc14:	ldr	r3, [sp, #24]
   1fc18:	subs	r3, r3, #1
   1fc1c:	movne	r3, #1
   1fc20:	cmp	r3, #0
   1fc24:	bne	1fc30 <_obstack_memory_used@@Base+0x7a4>
   1fc28:	cmp	sl, #0
   1fc2c:	beq	2001c <_obstack_memory_used@@Base+0xb90>
   1fc30:	ldr	r3, [sp, #152]	; 0x98
   1fc34:	mov	r5, #0
   1fc38:	sub	r2, r3, #2
   1fc3c:	mov	r8, r5
   1fc40:	clz	r2, r2
   1fc44:	lsr	r2, r2, #5
   1fc48:	ldr	r3, [sp, #60]	; 0x3c
   1fc4c:	ldr	r1, [sp, #28]
   1fc50:	orr	r3, r2, r3
   1fc54:	eor	r3, r3, #1
   1fc58:	orr	r3, r1, r3
   1fc5c:	tst	r3, #255	; 0xff
   1fc60:	bne	2038c <_obstack_memory_used@@Base+0xf00>
   1fc64:	cmp	r6, #0
   1fc68:	bne	1fdb8 <_obstack_memory_used@@Base+0x92c>
   1fc6c:	ldr	r3, [sp, #40]	; 0x28
   1fc70:	eor	r8, r8, #1
   1fc74:	and	r8, r8, r3
   1fc78:	add	sl, sl, #1
   1fc7c:	uxtb	r6, r8
   1fc80:	cmp	r6, #0
   1fc84:	beq	1fcb8 <_obstack_memory_used@@Base+0x82c>
   1fc88:	cmp	fp, r7
   1fc8c:	movhi	r2, #39	; 0x27
   1fc90:	ldrhi	r3, [sp, #32]
   1fc94:	strbhi	r2, [r3, r7]
   1fc98:	add	r3, r7, #1
   1fc9c:	cmp	fp, r3
   1fca0:	movhi	r1, #39	; 0x27
   1fca4:	ldrhi	r2, [sp, #32]
   1fca8:	add	r7, r7, #2
   1fcac:	strbhi	r1, [r2, r3]
   1fcb0:	mov	r3, #0
   1fcb4:	str	r3, [sp, #40]	; 0x28
   1fcb8:	cmp	r7, fp
   1fcbc:	ldrcc	r3, [sp, #32]
   1fcc0:	strbcc	r4, [r3, r7]
   1fcc4:	ldr	r3, [sp, #36]	; 0x24
   1fcc8:	cmp	r5, #0
   1fccc:	moveq	r3, #0
   1fcd0:	str	r3, [sp, #36]	; 0x24
   1fcd4:	ldr	r3, [sp, #24]
   1fcd8:	add	r7, r7, #1
   1fcdc:	cmn	r3, #1
   1fce0:	bne	1f784 <_obstack_memory_used@@Base+0x2f8>
   1fce4:	ldr	r3, [sp, #56]	; 0x38
   1fce8:	ldrb	r5, [r3, sl]
   1fcec:	adds	r5, r5, #0
   1fcf0:	movne	r5, #1
   1fcf4:	cmp	r5, #0
   1fcf8:	bne	1f798 <_obstack_memory_used@@Base+0x30c>
   1fcfc:	ldr	r3, [sp, #152]	; 0x98
   1fd00:	ldr	r1, [sp, #28]
   1fd04:	sub	r3, r3, #2
   1fd08:	clz	r3, r3
   1fd0c:	lsr	r3, r3, #5
   1fd10:	and	r9, r1, r3
   1fd14:	cmp	r7, #0
   1fd18:	movne	r2, #0
   1fd1c:	andeq	r2, r9, #1
   1fd20:	cmp	r2, #0
   1fd24:	bne	20700 <_obstack_memory_used@@Base+0x1274>
   1fd28:	eor	r2, r1, #1
   1fd2c:	ands	r3, r3, r2
   1fd30:	beq	20bbc <_obstack_memory_used@@Base+0x1730>
   1fd34:	ldr	r2, [sp, #68]	; 0x44
   1fd38:	cmp	r2, #0
   1fd3c:	beq	20ba8 <_obstack_memory_used@@Base+0x171c>
   1fd40:	ldr	r3, [sp, #36]	; 0x24
   1fd44:	cmp	r3, #0
   1fd48:	bne	20b60 <_obstack_memory_used@@Base+0x16d4>
   1fd4c:	ldr	r2, [sp, #72]	; 0x48
   1fd50:	clz	r3, fp
   1fd54:	cmp	r2, #0
   1fd58:	lsr	r3, r3, #5
   1fd5c:	moveq	r3, #0
   1fd60:	cmp	r3, #0
   1fd64:	beq	20b00 <_obstack_memory_used@@Base+0x1674>
   1fd68:	str	r3, [sp, #68]	; 0x44
   1fd6c:	ldr	fp, [sp, #72]	; 0x48
   1fd70:	b	1f720 <_obstack_memory_used@@Base+0x294>
   1fd74:	ldr	r3, [sp, #152]	; 0x98
   1fd78:	cmp	r3, #2
   1fd7c:	beq	203d0 <_obstack_memory_used@@Base+0xf44>
   1fd80:	ldr	r3, [sp, #44]	; 0x2c
   1fd84:	ldr	r2, [sp, #28]
   1fd88:	and	r2, r3, r2
   1fd8c:	ands	r2, r9, r2
   1fd90:	bne	203dc <_obstack_memory_used@@Base+0xf50>
   1fd94:	mov	r4, #92	; 0x5c
   1fd98:	mov	r3, r4
   1fd9c:	ldr	r1, [sp, #44]	; 0x2c
   1fda0:	cmp	r1, #0
   1fda4:	moveq	r5, #0
   1fda8:	moveq	r8, r1
   1fdac:	beq	1fc48 <_obstack_memory_used@@Base+0x7bc>
   1fdb0:	mov	r4, r3
   1fdb4:	mov	r5, #0
   1fdb8:	ldr	r3, [sp, #28]
   1fdbc:	cmp	r3, #0
   1fdc0:	bne	203c4 <_obstack_memory_used@@Base+0xf38>
   1fdc4:	ldr	r3, [sp, #40]	; 0x28
   1fdc8:	eor	r9, r3, #1
   1fdcc:	and	r9, r9, r2
   1fdd0:	ands	r9, r9, #255	; 0xff
   1fdd4:	beq	1fe18 <_obstack_memory_used@@Base+0x98c>
   1fdd8:	cmp	fp, r7
   1fddc:	movhi	r2, #39	; 0x27
   1fde0:	ldrhi	r3, [sp, #32]
   1fde4:	str	r9, [sp, #40]	; 0x28
   1fde8:	strbhi	r2, [r3, r7]
   1fdec:	add	r3, r7, #1
   1fdf0:	cmp	fp, r3
   1fdf4:	movhi	r1, #36	; 0x24
   1fdf8:	ldrhi	r2, [sp, #32]
   1fdfc:	strbhi	r1, [r2, r3]
   1fe00:	add	r3, r7, #2
   1fe04:	cmp	fp, r3
   1fe08:	add	r7, r7, #3
   1fe0c:	ldrhi	r2, [sp, #32]
   1fe10:	movhi	r1, #39	; 0x27
   1fe14:	strbhi	r1, [r2, r3]
   1fe18:	cmp	fp, r7
   1fe1c:	movhi	r2, #92	; 0x5c
   1fe20:	ldrhi	r3, [sp, #32]
   1fe24:	add	sl, sl, #1
   1fe28:	strbhi	r2, [r3, r7]
   1fe2c:	add	r7, r7, #1
   1fe30:	b	1fcb8 <_obstack_memory_used@@Base+0x82c>
   1fe34:	ldr	r3, [sp, #152]	; 0x98
   1fe38:	mov	r4, #11
   1fe3c:	sub	r2, r3, #2
   1fe40:	mov	r3, #118	; 0x76
   1fe44:	clz	r2, r2
   1fe48:	lsr	r2, r2, #5
   1fe4c:	b	1fd9c <_obstack_memory_used@@Base+0x910>
   1fe50:	mov	r4, #10
   1fe54:	mov	r3, #110	; 0x6e
   1fe58:	ldr	r2, [sp, #152]	; 0x98
   1fe5c:	ldr	r1, [sp, #28]
   1fe60:	sub	r2, r2, #2
   1fe64:	clz	r2, r2
   1fe68:	lsr	r2, r2, #5
   1fe6c:	ands	r1, r1, r2
   1fe70:	beq	1fd9c <_obstack_memory_used@@Base+0x910>
   1fe74:	ldr	sl, [sp, #32]
   1fe78:	mov	r8, fp
   1fe7c:	mov	r2, r1
   1fe80:	mov	r3, #2
   1fe84:	str	r3, [sp, #152]	; 0x98
   1fe88:	ldr	r9, [sp, #44]	; 0x2c
   1fe8c:	ldr	r3, [sp, #152]	; 0x98
   1fe90:	and	r9, r9, r2
   1fe94:	tst	r9, #255	; 0xff
   1fe98:	movne	r3, #4
   1fe9c:	str	r3, [sp, #152]	; 0x98
   1fea0:	ldr	r3, [sp, #156]	; 0x9c
   1fea4:	mov	ip, #0
   1fea8:	bic	r3, r3, #2
   1feac:	str	r3, [sp, #4]
   1feb0:	ldr	r3, [sp, #168]	; 0xa8
   1feb4:	ldr	r2, [sp, #56]	; 0x38
   1feb8:	str	r3, [sp, #16]
   1febc:	ldr	r3, [sp, #164]	; 0xa4
   1fec0:	mov	r1, r8
   1fec4:	str	r3, [sp, #12]
   1fec8:	ldr	r3, [sp, #152]	; 0x98
   1fecc:	mov	r0, sl
   1fed0:	str	r3, [sp]
   1fed4:	str	ip, [sp, #8]
   1fed8:	ldr	r3, [sp, #24]
   1fedc:	bl	1f6c4 <_obstack_memory_used@@Base+0x238>
   1fee0:	mov	fp, r0
   1fee4:	mov	r0, fp
   1fee8:	add	sp, sp, #116	; 0x74
   1feec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fef0:	ldr	r3, [sp, #152]	; 0x98
   1fef4:	mov	r4, #8
   1fef8:	sub	r2, r3, #2
   1fefc:	mov	r3, #98	; 0x62
   1ff00:	clz	r2, r2
   1ff04:	lsr	r2, r2, #5
   1ff08:	b	1fd9c <_obstack_memory_used@@Base+0x910>
   1ff0c:	ldr	r3, [sp, #152]	; 0x98
   1ff10:	mov	r4, #7
   1ff14:	sub	r2, r3, #2
   1ff18:	mov	r3, #97	; 0x61
   1ff1c:	clz	r2, r2
   1ff20:	lsr	r2, r2, #5
   1ff24:	b	1fd9c <_obstack_memory_used@@Base+0x910>
   1ff28:	ldr	r3, [sp, #44]	; 0x2c
   1ff2c:	cmp	r3, #0
   1ff30:	beq	20714 <_obstack_memory_used@@Base+0x1288>
   1ff34:	ldr	r3, [sp, #28]
   1ff38:	cmp	r3, #0
   1ff3c:	bne	209ec <_obstack_memory_used@@Base+0x1560>
   1ff40:	ldr	r3, [sp, #152]	; 0x98
   1ff44:	sub	r2, r3, #2
   1ff48:	ldr	r3, [sp, #40]	; 0x28
   1ff4c:	clz	r2, r2
   1ff50:	eor	r3, r3, #1
   1ff54:	lsr	r2, r2, #5
   1ff58:	ands	r3, r2, r3
   1ff5c:	moveq	r1, r7
   1ff60:	beq	1ffa4 <_obstack_memory_used@@Base+0xb18>
   1ff64:	cmp	fp, r7
   1ff68:	movhi	r0, #39	; 0x27
   1ff6c:	ldrhi	r1, [sp, #32]
   1ff70:	str	r3, [sp, #40]	; 0x28
   1ff74:	strbhi	r0, [r1, r7]
   1ff78:	add	r1, r7, #1
   1ff7c:	cmp	fp, r1
   1ff80:	movhi	ip, #36	; 0x24
   1ff84:	ldrhi	r0, [sp, #32]
   1ff88:	strbhi	ip, [r0, r1]
   1ff8c:	add	r1, r7, #2
   1ff90:	cmp	fp, r1
   1ff94:	movhi	ip, #39	; 0x27
   1ff98:	ldrhi	r0, [sp, #32]
   1ff9c:	strbhi	ip, [r0, r1]
   1ffa0:	add	r1, r7, #3
   1ffa4:	cmp	fp, r1
   1ffa8:	movhi	r0, #92	; 0x5c
   1ffac:	ldrhi	r3, [sp, #32]
   1ffb0:	add	r7, r1, #1
   1ffb4:	strbhi	r0, [r3, r1]
   1ffb8:	cmp	r8, #0
   1ffbc:	beq	20900 <_obstack_memory_used@@Base+0x1474>
   1ffc0:	ldr	r0, [sp, #24]
   1ffc4:	add	r3, sl, #1
   1ffc8:	cmp	r3, r0
   1ffcc:	bcs	2083c <_obstack_memory_used@@Base+0x13b0>
   1ffd0:	ldr	r0, [sp, #56]	; 0x38
   1ffd4:	ldrb	r3, [r0, r3]
   1ffd8:	sub	r3, r3, #48	; 0x30
   1ffdc:	cmp	r3, #9
   1ffe0:	bhi	2083c <_obstack_memory_used@@Base+0x13b0>
   1ffe4:	cmp	fp, r7
   1ffe8:	movhi	r3, #48	; 0x30
   1ffec:	ldrhi	r0, [sp, #32]
   1fff0:	ldr	r5, [sp, #28]
   1fff4:	mov	r4, #48	; 0x30
   1fff8:	strbhi	r3, [r0, r7]
   1fffc:	add	r3, r1, #2
   20000:	cmp	fp, r3
   20004:	movhi	r0, #48	; 0x30
   20008:	ldrhi	ip, [sp, #32]
   2000c:	add	r7, r1, #3
   20010:	strbhi	r0, [ip, r3]
   20014:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20018:	mov	r5, #0
   2001c:	ldr	r3, [sp, #152]	; 0x98
   20020:	sub	r2, r3, #2
   20024:	ldr	r3, [sp, #28]
   20028:	clz	r2, r2
   2002c:	lsr	r2, r2, #5
   20030:	ands	r8, r3, r2
   20034:	beq	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20038:	mov	r3, r8
   2003c:	mov	r2, r3
   20040:	mov	r3, #2
   20044:	ldr	sl, [sp, #32]
   20048:	mov	r8, fp
   2004c:	str	r3, [sp, #152]	; 0x98
   20050:	b	1fe88 <_obstack_memory_used@@Base+0x9fc>
   20054:	ldr	r3, [sp, #152]	; 0x98
   20058:	cmp	r3, #2
   2005c:	beq	20780 <_obstack_memory_used@@Base+0x12f4>
   20060:	cmp	r3, #5
   20064:	beq	20740 <_obstack_memory_used@@Base+0x12b4>
   20068:	mov	r5, #0
   2006c:	sub	r2, r3, #2
   20070:	mov	r8, r5
   20074:	clz	r2, r2
   20078:	mov	r4, #63	; 0x3f
   2007c:	lsr	r2, r2, #5
   20080:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20084:	ldr	r3, [sp, #152]	; 0x98
   20088:	cmp	r3, #2
   2008c:	beq	207a0 <_obstack_memory_used@@Base+0x1314>
   20090:	mov	r2, #0
   20094:	str	r5, [sp, #68]	; 0x44
   20098:	mov	r8, r2
   2009c:	mov	r4, #39	; 0x27
   200a0:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   200a4:	mov	r4, #13
   200a8:	mov	r3, #114	; 0x72
   200ac:	b	1fe58 <_obstack_memory_used@@Base+0x9cc>
   200b0:	ldr	r3, [sp, #152]	; 0x98
   200b4:	mov	r8, #0
   200b8:	sub	r2, r3, #2
   200bc:	clz	r2, r2
   200c0:	lsr	r2, r2, #5
   200c4:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   200c8:	ldr	r3, [sp, #152]	; 0x98
   200cc:	mov	r4, #12
   200d0:	sub	r2, r3, #2
   200d4:	mov	r3, #102	; 0x66
   200d8:	clz	r2, r2
   200dc:	lsr	r2, r2, #5
   200e0:	b	1fd9c <_obstack_memory_used@@Base+0x910>
   200e4:	mov	r5, r6
   200e8:	b	2001c <_obstack_memory_used@@Base+0xb90>
   200ec:	ldr	r3, [sp, #152]	; 0x98
   200f0:	sub	r2, r3, #2
   200f4:	mov	r3, #116	; 0x74
   200f8:	clz	r2, r2
   200fc:	lsr	r2, r2, #5
   20100:	b	1fd9c <_obstack_memory_used@@Base+0x910>
   20104:	ldr	r8, [sp, #76]	; 0x4c
   20108:	cmp	r8, #1
   2010c:	bne	205bc <_obstack_memory_used@@Base+0x1130>
   20110:	bl	11b58 <__ctype_b_loc@plt>
   20114:	sxth	r3, r4
   20118:	mov	ip, r8
   2011c:	lsl	r3, r3, #1
   20120:	ldr	r2, [r0]
   20124:	ldrh	r3, [r2, r3]
   20128:	and	r3, r3, #16384	; 0x4000
   2012c:	cmp	r3, #0
   20130:	movne	r5, #1
   20134:	moveq	r5, #0
   20138:	moveq	r3, #1
   2013c:	movne	r3, #0
   20140:	ldr	r2, [sp, #44]	; 0x2c
   20144:	and	r3, r3, r2
   20148:	ands	r8, r3, #255	; 0xff
   2014c:	bne	20450 <_obstack_memory_used@@Base+0xfc4>
   20150:	ldr	r3, [sp, #152]	; 0x98
   20154:	sub	r2, r3, #2
   20158:	clz	r2, r2
   2015c:	lsr	r2, r2, #5
   20160:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20164:	ldr	r3, [sp, #56]	; 0x38
   20168:	add	r3, r3, sl
   2016c:	str	r3, [sp, #48]	; 0x30
   20170:	ldr	r3, [sp, #48]	; 0x30
   20174:	mov	r6, #0
   20178:	ldrb	r4, [r3]
   2017c:	cmp	r4, #126	; 0x7e
   20180:	ldrls	pc, [pc, r4, lsl #2]
   20184:	b	20104 <_obstack_memory_used@@Base+0xc78>
   20188:	andeq	pc, r1, r8, lsr #30
   2018c:	andeq	r0, r2, r4, lsl #2
   20190:	andeq	r0, r2, r4, lsl #2
   20194:	andeq	r0, r2, r4, lsl #2
   20198:	andeq	r0, r2, r4, lsl #2
   2019c:	andeq	r0, r2, r4, lsl #2
   201a0:	andeq	r0, r2, r4, lsl #2
   201a4:	andeq	pc, r1, ip, lsl #30
   201a8:	strdeq	pc, [r1], -r0
   201ac:	andeq	r0, r2, r4, lsl #7
   201b0:	andeq	pc, r1, r0, asr lr	; <UNPREDICTABLE>
   201b4:	andeq	pc, r1, r4, lsr lr	; <UNPREDICTABLE>
   201b8:	andeq	r0, r2, r8, asr #1
   201bc:	andeq	r0, r2, r4, lsr #1
   201c0:	andeq	r0, r2, r4, lsl #2
   201c4:	andeq	r0, r2, r4, lsl #2
   201c8:	andeq	r0, r2, r4, lsl #2
   201cc:	andeq	r0, r2, r4, lsl #2
   201d0:	andeq	r0, r2, r4, lsl #2
   201d4:	andeq	r0, r2, r4, lsl #2
   201d8:	andeq	r0, r2, r4, lsl #2
   201dc:	andeq	r0, r2, r4, lsl #2
   201e0:	andeq	r0, r2, r4, lsl #2
   201e4:	andeq	r0, r2, r4, lsl #2
   201e8:	andeq	r0, r2, r4, lsl #2
   201ec:	andeq	r0, r2, r4, lsl #2
   201f0:	andeq	r0, r2, r4, lsl #2
   201f4:	andeq	r0, r2, r4, lsl #2
   201f8:	andeq	r0, r2, r4, lsl #2
   201fc:	andeq	r0, r2, r4, lsl #2
   20200:	andeq	r0, r2, r4, lsl #2
   20204:	andeq	r0, r2, r4, lsl #2
   20208:	andeq	r0, r2, ip, lsl r0
   2020c:	andeq	r0, r2, r8, lsl r0
   20210:	andeq	r0, r2, r8, lsl r0
   20214:	andeq	pc, r1, r8, lsr #24
   20218:	andeq	r0, r2, r8, lsl r0
   2021c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20220:	andeq	r0, r2, r8, lsl r0
   20224:	andeq	r0, r2, r4, lsl #1
   20228:	andeq	r0, r2, r8, lsl r0
   2022c:	andeq	r0, r2, r8, lsl r0
   20230:	andeq	r0, r2, r8, lsl r0
   20234:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20238:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2023c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20240:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20244:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20248:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2024c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20250:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20254:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20258:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2025c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20260:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20264:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20268:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2026c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20270:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20274:	andeq	r0, r2, r8, lsl r0
   20278:	andeq	r0, r2, r8, lsl r0
   2027c:	andeq	r0, r2, r8, lsl r0
   20280:	andeq	r0, r2, r8, lsl r0
   20284:	andeq	r0, r2, r4, asr r0
   20288:	andeq	r0, r2, r4, lsl #2
   2028c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20290:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20294:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20298:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2029c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202a0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202a4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202a8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202ac:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202b0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202b4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202b8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202bc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202c0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202c4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202c8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202cc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202d0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202d4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202d8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202dc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202e0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202e4:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202e8:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202ec:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202f0:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   202f4:	andeq	r0, r2, r8, lsl r0
   202f8:	andeq	pc, r1, r4, ror sp	; <UNPREDICTABLE>
   202fc:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20300:	andeq	r0, r2, r8, lsl r0
   20304:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20308:	andeq	r0, r2, r8, lsl r0
   2030c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20310:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20314:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20318:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2031c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20320:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20324:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20328:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2032c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20330:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20334:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20338:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2033c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20340:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20344:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20348:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2034c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20350:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20354:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20358:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2035c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20360:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20364:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20368:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   2036c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20370:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20374:	andeq	pc, r1, r8, lsl #24
   20378:	andeq	r0, r2, r8, lsl r0
   2037c:	andeq	pc, r1, r8, lsl #24
   20380:	andeq	pc, r1, r8, lsr #24
   20384:	mov	r3, #116	; 0x74
   20388:	b	1fe58 <_obstack_memory_used@@Base+0x9cc>
   2038c:	ldr	r3, [sp, #160]	; 0xa0
   20390:	cmp	r3, #0
   20394:	beq	1fc64 <_obstack_memory_used@@Base+0x7d8>
   20398:	lsr	r3, r4, #5
   2039c:	ldr	r0, [sp, #160]	; 0xa0
   203a0:	uxtb	r3, r3
   203a4:	and	r1, r4, #31
   203a8:	ldr	r0, [r0, r3, lsl #2]
   203ac:	lsr	r3, r0, r1
   203b0:	tst	r3, #1
   203b4:	beq	1fc64 <_obstack_memory_used@@Base+0x7d8>
   203b8:	ldr	r3, [sp, #28]
   203bc:	cmp	r3, #0
   203c0:	beq	1fdc4 <_obstack_memory_used@@Base+0x938>
   203c4:	ldr	sl, [sp, #32]
   203c8:	mov	r8, fp
   203cc:	b	1fe88 <_obstack_memory_used@@Base+0x9fc>
   203d0:	ldr	r3, [sp, #28]
   203d4:	cmp	r3, #0
   203d8:	bne	2092c <_obstack_memory_used@@Base+0x14a0>
   203dc:	add	sl, sl, #1
   203e0:	ldr	r6, [sp, #40]	; 0x28
   203e4:	mov	r5, #0
   203e8:	mov	r4, #92	; 0x5c
   203ec:	b	1fc80 <_obstack_memory_used@@Base+0x7f4>
   203f0:	cmp	r9, r8
   203f4:	bne	20664 <_obstack_memory_used@@Base+0x11d8>
   203f8:	ldr	r0, [sp, #100]	; 0x64
   203fc:	bl	119f0 <iswprint@plt>
   20400:	add	r5, r5, r4
   20404:	cmp	r0, #0
   20408:	add	r0, sp, #104	; 0x68
   2040c:	moveq	r6, #0
   20410:	bl	11948 <mbsinit@plt>
   20414:	cmp	r0, #0
   20418:	beq	205f8 <_obstack_memory_used@@Base+0x116c>
   2041c:	mov	r2, r6
   20420:	mov	ip, r5
   20424:	eor	r5, r2, #1
   20428:	ldr	r4, [sp, #80]	; 0x50
   2042c:	ldr	r6, [sp, #84]	; 0x54
   20430:	ldr	r7, [sp, #88]	; 0x58
   20434:	uxtb	r5, r5
   20438:	cmp	ip, #1
   2043c:	bls	2093c <_obstack_memory_used@@Base+0x14b0>
   20440:	ldr	r3, [sp, #44]	; 0x2c
   20444:	and	r8, r3, r5
   20448:	mov	r5, r2
   2044c:	uxtb	r8, r8
   20450:	add	r2, sl, ip
   20454:	ldr	r0, [sp, #48]	; 0x30
   20458:	mov	r1, #0
   2045c:	str	r5, [sp, #48]	; 0x30
   20460:	ldr	r9, [sp, #28]
   20464:	ldr	ip, [sp, #40]	; 0x28
   20468:	ldr	r3, [sp, #32]
   2046c:	ldr	r5, [sp, #152]	; 0x98
   20470:	b	2052c <_obstack_memory_used@@Base+0x10a0>
   20474:	cmp	r9, #0
   20478:	bne	20850 <_obstack_memory_used@@Base+0x13c4>
   2047c:	eor	r1, ip, #1
   20480:	cmp	r5, #2
   20484:	movne	r1, #0
   20488:	andeq	r1, r1, #1
   2048c:	cmp	r1, #0
   20490:	beq	204c8 <_obstack_memory_used@@Base+0x103c>
   20494:	cmp	fp, r7
   20498:	movhi	ip, #39	; 0x27
   2049c:	strbhi	ip, [r3, r7]
   204a0:	add	ip, r7, #1
   204a4:	cmp	fp, ip
   204a8:	movhi	lr, #36	; 0x24
   204ac:	strbhi	lr, [r3, ip]
   204b0:	add	ip, r7, #2
   204b4:	cmp	fp, ip
   204b8:	movhi	lr, #39	; 0x27
   204bc:	strbhi	lr, [r3, ip]
   204c0:	add	r7, r7, #3
   204c4:	mov	ip, r1
   204c8:	cmp	fp, r7
   204cc:	movhi	r1, #92	; 0x5c
   204d0:	strbhi	r1, [r3, r7]
   204d4:	add	r1, r7, #1
   204d8:	cmp	fp, r1
   204dc:	lsrhi	lr, r4, #6
   204e0:	addhi	lr, lr, #48	; 0x30
   204e4:	strbhi	lr, [r3, r1]
   204e8:	add	lr, r7, #2
   204ec:	cmp	fp, lr
   204f0:	lsrhi	r1, r4, #3
   204f4:	andhi	r1, r1, #7
   204f8:	addhi	r1, r1, #48	; 0x30
   204fc:	add	sl, sl, #1
   20500:	strbhi	r1, [r3, lr]
   20504:	and	r4, r4, #7
   20508:	cmp	r2, sl
   2050c:	add	r4, r4, #48	; 0x30
   20510:	add	r7, r7, #3
   20514:	bls	20874 <_obstack_memory_used@@Base+0x13e8>
   20518:	mov	r1, r8
   2051c:	cmp	fp, r7
   20520:	strbhi	r4, [r3, r7]
   20524:	ldrb	r4, [r0, #1]!
   20528:	add	r7, r7, #1
   2052c:	cmp	r8, #0
   20530:	bne	20474 <_obstack_memory_used@@Base+0xfe8>
   20534:	cmp	r6, #0
   20538:	bne	20588 <_obstack_memory_used@@Base+0x10fc>
   2053c:	eor	r6, r1, #1
   20540:	and	r6, r6, ip
   20544:	add	sl, sl, #1
   20548:	cmp	r2, sl
   2054c:	uxtb	r6, r6
   20550:	bls	205b0 <_obstack_memory_used@@Base+0x1124>
   20554:	cmp	r6, #0
   20558:	beq	2051c <_obstack_memory_used@@Base+0x1090>
   2055c:	cmp	fp, r7
   20560:	movhi	ip, #39	; 0x27
   20564:	strbhi	ip, [r3, r7]
   20568:	add	ip, r7, #1
   2056c:	cmp	fp, ip
   20570:	movhi	lr, #39	; 0x27
   20574:	strbhi	lr, [r3, ip]
   20578:	add	r7, r7, #2
   2057c:	mov	r6, r8
   20580:	mov	ip, r8
   20584:	b	2051c <_obstack_memory_used@@Base+0x1090>
   20588:	cmp	fp, r7
   2058c:	eor	r6, r1, #1
   20590:	movhi	lr, #92	; 0x5c
   20594:	and	r6, r6, ip
   20598:	add	sl, sl, #1
   2059c:	strbhi	lr, [r3, r7]
   205a0:	cmp	r2, sl
   205a4:	add	r7, r7, #1
   205a8:	uxtb	r6, r6
   205ac:	bhi	20554 <_obstack_memory_used@@Base+0x10c8>
   205b0:	str	ip, [sp, #40]	; 0x28
   205b4:	ldr	r5, [sp, #48]	; 0x30
   205b8:	b	1fc80 <_obstack_memory_used@@Base+0x7f4>
   205bc:	ldr	r3, [sp, #24]
   205c0:	cmn	r3, #1
   205c4:	mov	r3, #0
   205c8:	str	r3, [sp, #104]	; 0x68
   205cc:	str	r3, [sp, #108]	; 0x6c
   205d0:	beq	208f0 <_obstack_memory_used@@Base+0x1464>
   205d4:	mov	r2, r5
   205d8:	mov	r3, #0
   205dc:	str	r7, [sp, #88]	; 0x58
   205e0:	ldr	r7, [sp, #152]	; 0x98
   205e4:	str	r5, [sp, #92]	; 0x5c
   205e8:	str	r6, [sp, #84]	; 0x54
   205ec:	mov	r5, r3
   205f0:	mov	r6, r2
   205f4:	str	r4, [sp, #80]	; 0x50
   205f8:	ldr	r3, [sp, #56]	; 0x38
   205fc:	add	r9, sl, r5
   20600:	add	r8, r3, r9
   20604:	ldr	r3, [sp, #24]
   20608:	mov	r1, r8
   2060c:	sub	r2, r3, r9
   20610:	add	r0, sp, #100	; 0x64
   20614:	add	r3, sp, #104	; 0x68
   20618:	bl	1cee8 <__assert_fail@plt+0xb174>
   2061c:	subs	r4, r0, #0
   20620:	beq	209c8 <_obstack_memory_used@@Base+0x153c>
   20624:	cmn	r4, #1
   20628:	beq	209a8 <_obstack_memory_used@@Base+0x151c>
   2062c:	cmn	r4, #2
   20630:	beq	20948 <_obstack_memory_used@@Base+0x14bc>
   20634:	ldr	r2, [sp, #28]
   20638:	cmp	r7, #2
   2063c:	movne	r2, #0
   20640:	andeq	r2, r2, #1
   20644:	cmp	r2, #0
   20648:	beq	203f8 <_obstack_memory_used@@Base+0xf6c>
   2064c:	cmp	r4, #1
   20650:	beq	203f8 <_obstack_memory_used@@Base+0xf6c>
   20654:	sub	r3, r4, #1
   20658:	add	r9, r3, r9
   2065c:	ldr	r3, [sp, #56]	; 0x38
   20660:	add	r9, r3, r9
   20664:	ldrb	r3, [r8, #1]!
   20668:	sub	r3, r3, #91	; 0x5b
   2066c:	cmp	r3, #33	; 0x21
   20670:	ldrls	pc, [pc, r3, lsl #2]
   20674:	b	203f0 <_obstack_memory_used@@Base+0xf64>
   20678:	andeq	r0, r2, r0, lsl #14
   2067c:	andeq	r0, r2, r0, lsl #14
   20680:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20684:	andeq	r0, r2, r0, lsl #14
   20688:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2068c:	andeq	r0, r2, r0, lsl #14
   20690:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20694:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20698:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2069c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206a0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206a4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206a8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206ac:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206b0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206b4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206b8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206bc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206c0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206c4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206c8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206cc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206d0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206d4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206d8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206dc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206e0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206e4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206e8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206ec:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206f0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206f4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206f8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   206fc:	andeq	r0, r2, r0, lsl #14
   20700:	mov	r3, #2
   20704:	ldr	sl, [sp, #32]
   20708:	mov	r8, fp
   2070c:	str	r3, [sp, #152]	; 0x98
   20710:	b	1fe88 <_obstack_memory_used@@Base+0x9fc>
   20714:	ldr	r3, [sp, #156]	; 0x9c
   20718:	tst	r3, #1
   2071c:	bne	20848 <_obstack_memory_used@@Base+0x13bc>
   20720:	ldr	r3, [sp, #152]	; 0x98
   20724:	ldr	r4, [sp, #44]	; 0x2c
   20728:	sub	r2, r3, #2
   2072c:	mov	r5, #0
   20730:	clz	r2, r2
   20734:	mov	r8, r4
   20738:	lsr	r2, r2, #5
   2073c:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20740:	ldr	r3, [sp, #156]	; 0x9c
   20744:	ands	r9, r3, #4
   20748:	beq	20880 <_obstack_memory_used@@Base+0x13f4>
   2074c:	ldr	r2, [sp, #24]
   20750:	add	r3, sl, #2
   20754:	cmp	r3, r2
   20758:	bcs	2076c <_obstack_memory_used@@Base+0x12e0>
   2075c:	ldr	r2, [sp, #48]	; 0x30
   20760:	ldrb	r4, [r2, #1]
   20764:	cmp	r4, #63	; 0x3f
   20768:	beq	20a08 <_obstack_memory_used@@Base+0x157c>
   2076c:	mov	r2, #0
   20770:	mov	r8, r2
   20774:	mov	r5, r2
   20778:	mov	r4, #63	; 0x3f
   2077c:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20780:	ldr	r3, [sp, #28]
   20784:	cmp	r3, #0
   20788:	bne	20aac <_obstack_memory_used@@Base+0x1620>
   2078c:	mov	r2, r5
   20790:	mov	r8, r3
   20794:	mov	r5, #0
   20798:	mov	r4, #63	; 0x3f
   2079c:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   207a0:	ldr	r3, [sp, #28]
   207a4:	cmp	r3, #0
   207a8:	bne	20aac <_obstack_memory_used@@Base+0x1620>
   207ac:	ldr	r2, [sp, #72]	; 0x48
   207b0:	adds	r3, fp, #0
   207b4:	movne	r3, #1
   207b8:	cmp	r2, #0
   207bc:	movne	r3, #0
   207c0:	cmp	r3, #0
   207c4:	strne	fp, [sp, #72]	; 0x48
   207c8:	movne	fp, #0
   207cc:	bne	20808 <_obstack_memory_used@@Base+0x137c>
   207d0:	cmp	fp, r7
   207d4:	movhi	r2, #39	; 0x27
   207d8:	ldrhi	r3, [sp, #32]
   207dc:	strbhi	r2, [r3, r7]
   207e0:	add	r3, r7, #1
   207e4:	cmp	fp, r3
   207e8:	movhi	r1, #92	; 0x5c
   207ec:	ldrhi	r2, [sp, #32]
   207f0:	strbhi	r1, [r2, r3]
   207f4:	add	r3, r7, #2
   207f8:	cmp	fp, r3
   207fc:	movhi	r1, #39	; 0x27
   20800:	ldrhi	r2, [sp, #32]
   20804:	strbhi	r1, [r2, r3]
   20808:	ldr	r3, [sp, #28]
   2080c:	add	r7, r7, #3
   20810:	mov	r2, r5
   20814:	mov	r8, r3
   20818:	str	r5, [sp, #68]	; 0x44
   2081c:	str	r3, [sp, #40]	; 0x28
   20820:	mov	r4, #39	; 0x27
   20824:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20828:	ldr	r3, [sp, #56]	; 0x38
   2082c:	ldrb	r3, [r3, #1]
   20830:	adds	r3, r3, #0
   20834:	movne	r3, #1
   20838:	b	1fc20 <_obstack_memory_used@@Base+0x794>
   2083c:	ldr	r5, [sp, #28]
   20840:	mov	r4, #48	; 0x30
   20844:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20848:	add	sl, sl, #1
   2084c:	b	1f778 <_obstack_memory_used@@Base+0x2ec>
   20850:	mov	sl, r3
   20854:	ldr	r3, [sp, #28]
   20858:	mov	r8, fp
   2085c:	str	r3, [sp, #44]	; 0x2c
   20860:	ldr	r3, [sp, #152]	; 0x98
   20864:	sub	r2, r3, #2
   20868:	clz	r2, r2
   2086c:	lsr	r2, r2, #5
   20870:	b	1fe88 <_obstack_memory_used@@Base+0x9fc>
   20874:	str	ip, [sp, #40]	; 0x28
   20878:	ldr	r5, [sp, #48]	; 0x30
   2087c:	b	1fcb8 <_obstack_memory_used@@Base+0x82c>
   20880:	mov	r2, r9
   20884:	mov	r8, r9
   20888:	mov	r5, #0
   2088c:	mov	r4, #63	; 0x3f
   20890:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20894:	cmp	fp, #0
   20898:	beq	20910 <_obstack_memory_used@@Base+0x1484>
   2089c:	ldr	r1, [sp, #32]
   208a0:	mov	r3, #34	; 0x22
   208a4:	mov	r2, #1
   208a8:	strb	r3, [r1]
   208ac:	ldr	r3, [pc, #332]	; 20a00 <_obstack_memory_used@@Base+0x1574>
   208b0:	str	r2, [sp, #52]	; 0x34
   208b4:	mov	r7, r2
   208b8:	str	r2, [sp, #44]	; 0x2c
   208bc:	str	r3, [sp, #64]	; 0x40
   208c0:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   208c4:	ldr	r3, [pc, #300]	; 209f8 <_obstack_memory_used@@Base+0x156c>
   208c8:	str	r3, [sp, #64]	; 0x40
   208cc:	mov	r3, #0
   208d0:	str	r3, [sp, #28]
   208d4:	mov	r3, #1
   208d8:	str	r3, [sp, #52]	; 0x34
   208dc:	mov	r7, r3
   208e0:	mov	r3, #2
   208e4:	str	r3, [sp, #152]	; 0x98
   208e8:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   208ec:	bl	11d2c <abort@plt>
   208f0:	ldr	r0, [sp, #56]	; 0x38
   208f4:	bl	11b94 <strlen@plt>
   208f8:	str	r0, [sp, #24]
   208fc:	b	205d4 <_obstack_memory_used@@Base+0x1148>
   20900:	mov	r5, r8
   20904:	mov	r4, #48	; 0x30
   20908:	ldr	r8, [sp, #44]	; 0x2c
   2090c:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20910:	mov	r3, #1
   20914:	str	r3, [sp, #52]	; 0x34
   20918:	mov	r7, r3
   2091c:	str	r3, [sp, #44]	; 0x2c
   20920:	ldr	r3, [pc, #216]	; 20a00 <_obstack_memory_used@@Base+0x1574>
   20924:	str	r3, [sp, #64]	; 0x40
   20928:	b	1f768 <_obstack_memory_used@@Base+0x2dc>
   2092c:	ldr	sl, [sp, #32]
   20930:	mov	r8, fp
   20934:	mov	r2, r3
   20938:	b	1fe88 <_obstack_memory_used@@Base+0x9fc>
   2093c:	mov	r3, r5
   20940:	mov	r5, r2
   20944:	b	20140 <_obstack_memory_used@@Base+0xcb4>
   20948:	ldr	r1, [sp, #24]
   2094c:	mov	r2, r5
   20950:	cmp	r1, r9
   20954:	mov	ip, r5
   20958:	ldr	r4, [sp, #80]	; 0x50
   2095c:	ldr	r5, [sp, #92]	; 0x5c
   20960:	ldr	r6, [sp, #84]	; 0x54
   20964:	ldr	r7, [sp, #88]	; 0x58
   20968:	bls	2099c <_obstack_memory_used@@Base+0x1510>
   2096c:	ldrb	r3, [r8]
   20970:	cmp	r3, #0
   20974:	bne	20988 <_obstack_memory_used@@Base+0x14fc>
   20978:	b	209a0 <_obstack_memory_used@@Base+0x1514>
   2097c:	ldrb	r3, [r8, #1]!
   20980:	cmp	r3, #0
   20984:	beq	20aa0 <_obstack_memory_used@@Base+0x1614>
   20988:	add	r2, r2, #1
   2098c:	add	r3, sl, r2
   20990:	cmp	r1, r3
   20994:	bhi	2097c <_obstack_memory_used@@Base+0x14f0>
   20998:	mov	ip, r2
   2099c:	mov	r3, #0
   209a0:	mov	r2, r3
   209a4:	b	20438 <_obstack_memory_used@@Base+0xfac>
   209a8:	mov	r3, #0
   209ac:	mov	ip, r5
   209b0:	ldr	r4, [sp, #80]	; 0x50
   209b4:	ldr	r5, [sp, #92]	; 0x5c
   209b8:	ldr	r6, [sp, #84]	; 0x54
   209bc:	ldr	r7, [sp, #88]	; 0x58
   209c0:	mov	r2, r3
   209c4:	b	20438 <_obstack_memory_used@@Base+0xfac>
   209c8:	mov	r3, r6
   209cc:	mov	ip, r5
   209d0:	eor	r5, r3, #1
   209d4:	mov	r2, r6
   209d8:	ldr	r4, [sp, #80]	; 0x50
   209dc:	ldr	r6, [sp, #84]	; 0x54
   209e0:	ldr	r7, [sp, #88]	; 0x58
   209e4:	uxtb	r5, r5
   209e8:	b	20438 <_obstack_memory_used@@Base+0xfac>
   209ec:	ldr	sl, [sp, #32]
   209f0:	mov	r8, fp
   209f4:	b	2085c <_obstack_memory_used@@Base+0x13d0>
   209f8:	andeq	r7, r2, ip, ror #31
   209fc:	strdeq	r7, [r2], -r0
   20a00:	andeq	r7, r2, r8, ror #31
   20a04:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   20a08:	ldr	r2, [sp, #56]	; 0x38
   20a0c:	ldrb	r1, [r2, r3]
   20a10:	sub	r2, r1, #33	; 0x21
   20a14:	uxtb	r2, r2
   20a18:	cmp	r2, #29
   20a1c:	bhi	20abc <_obstack_memory_used@@Base+0x1630>
   20a20:	ldr	r0, [pc, #-36]	; 20a04 <_obstack_memory_used@@Base+0x1578>
   20a24:	mov	ip, #1
   20a28:	ands	r2, r0, ip, lsl r2
   20a2c:	beq	20acc <_obstack_memory_used@@Base+0x1640>
   20a30:	ldr	r2, [sp, #28]
   20a34:	cmp	r2, #0
   20a38:	bne	20bcc <_obstack_memory_used@@Base+0x1740>
   20a3c:	cmp	fp, r7
   20a40:	ldr	r8, [sp, #28]
   20a44:	ldrhi	r2, [sp, #32]
   20a48:	mov	sl, r3
   20a4c:	mov	r5, r8
   20a50:	strbhi	r4, [r2, r7]
   20a54:	add	r2, r7, #1
   20a58:	cmp	fp, r2
   20a5c:	movhi	r0, #34	; 0x22
   20a60:	ldrhi	ip, [sp, #32]
   20a64:	mov	r4, r1
   20a68:	strbhi	r0, [ip, r2]
   20a6c:	add	r2, r7, #2
   20a70:	cmp	fp, r2
   20a74:	movhi	r0, #34	; 0x22
   20a78:	ldrhi	ip, [sp, #32]
   20a7c:	strbhi	r0, [ip, r2]
   20a80:	add	r2, r7, #3
   20a84:	cmp	fp, r2
   20a88:	movhi	r0, #63	; 0x3f
   20a8c:	ldrhi	ip, [sp, #32]
   20a90:	add	r7, r7, #4
   20a94:	strbhi	r0, [ip, r2]
   20a98:	mov	r2, r8
   20a9c:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20aa0:	mov	ip, r2
   20aa4:	mov	r2, r3
   20aa8:	b	20438 <_obstack_memory_used@@Base+0xfac>
   20aac:	ldr	sl, [sp, #32]
   20ab0:	mov	r8, fp
   20ab4:	ldr	r2, [sp, #28]
   20ab8:	b	1fe88 <_obstack_memory_used@@Base+0x9fc>
   20abc:	mov	r2, #0
   20ac0:	mov	r8, r2
   20ac4:	mov	r5, r2
   20ac8:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20acc:	mov	r8, r2
   20ad0:	mov	r5, #0
   20ad4:	b	1fc48 <_obstack_memory_used@@Base+0x7bc>
   20ad8:	ldr	r1, [sp, #152]	; 0x98
   20adc:	bl	1f5a4 <_obstack_memory_used@@Base+0x118>
   20ae0:	str	r0, [sp, #168]	; 0xa8
   20ae4:	b	1fb04 <_obstack_memory_used@@Base+0x678>
   20ae8:	ldr	r1, [sp, #152]	; 0x98
   20aec:	bl	1f5a4 <_obstack_memory_used@@Base+0x118>
   20af0:	str	r0, [sp, #164]	; 0xa4
   20af4:	b	1fae4 <_obstack_memory_used@@Base+0x658>
   20af8:	ldr	r7, [sp, #28]
   20afc:	b	1fb44 <_obstack_memory_used@@Base+0x6b8>
   20b00:	ldr	sl, [sp, #32]
   20b04:	ldr	r2, [sp, #68]	; 0x44
   20b08:	mov	r8, fp
   20b0c:	mov	fp, r7
   20b10:	ldr	r3, [sp, #64]	; 0x40
   20b14:	cmp	r3, #0
   20b18:	moveq	r2, #0
   20b1c:	andne	r2, r2, #1
   20b20:	cmp	r2, #0
   20b24:	beq	20b50 <_obstack_memory_used@@Base+0x16c4>
   20b28:	mov	r2, r3
   20b2c:	ldrb	r3, [r3]
   20b30:	cmp	r3, #0
   20b34:	beq	20b50 <_obstack_memory_used@@Base+0x16c4>
   20b38:	cmp	r8, fp
   20b3c:	strbhi	r3, [sl, fp]
   20b40:	ldrb	r3, [r2, #1]!
   20b44:	add	fp, fp, #1
   20b48:	cmp	r3, #0
   20b4c:	bne	20b38 <_obstack_memory_used@@Base+0x16ac>
   20b50:	cmp	r8, fp
   20b54:	movhi	r3, #0
   20b58:	strbhi	r3, [sl, fp]
   20b5c:	b	1fee4 <_obstack_memory_used@@Base+0xa58>
   20b60:	ldr	r3, [sp, #168]	; 0xa8
   20b64:	ldr	sl, [sp, #32]
   20b68:	str	r3, [sp, #16]
   20b6c:	ldr	r3, [sp, #164]	; 0xa4
   20b70:	mov	ip, #5
   20b74:	str	r3, [sp, #12]
   20b78:	ldr	r3, [sp, #160]	; 0xa0
   20b7c:	ldr	r2, [sp, #56]	; 0x38
   20b80:	str	r3, [sp, #8]
   20b84:	ldr	r3, [sp, #156]	; 0x9c
   20b88:	ldr	r1, [sp, #72]	; 0x48
   20b8c:	str	r3, [sp, #4]
   20b90:	mov	r0, sl
   20b94:	ldr	r3, [sp, #24]
   20b98:	str	ip, [sp]
   20b9c:	bl	1f6c4 <_obstack_memory_used@@Base+0x238>
   20ba0:	mov	fp, r0
   20ba4:	b	1fee4 <_obstack_memory_used@@Base+0xa58>
   20ba8:	mov	r8, fp
   20bac:	ldr	sl, [sp, #32]
   20bb0:	mov	fp, r7
   20bb4:	mov	r2, r3
   20bb8:	b	20b10 <_obstack_memory_used@@Base+0x1684>
   20bbc:	mov	r8, fp
   20bc0:	ldr	sl, [sp, #32]
   20bc4:	mov	fp, r7
   20bc8:	b	20b10 <_obstack_memory_used@@Base+0x1684>
   20bcc:	ldr	sl, [sp, #32]
   20bd0:	mov	r8, fp
   20bd4:	b	1fea0 <_obstack_memory_used@@Base+0xa14>
   20bd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bdc:	sub	sp, sp, #52	; 0x34
   20be0:	mov	r4, r0
   20be4:	mov	r5, r3
   20be8:	mov	sl, r1
   20bec:	mov	fp, r2
   20bf0:	bl	11bb8 <__errno_location@plt>
   20bf4:	ldr	r7, [pc, #412]	; 20d98 <_obstack_memory_used@@Base+0x190c>
   20bf8:	cmn	r4, #-2147483647	; 0x80000001
   20bfc:	ldr	r6, [r7]
   20c00:	mov	r8, r0
   20c04:	movne	r0, #0
   20c08:	moveq	r0, #1
   20c0c:	ldr	r3, [r8]
   20c10:	orrs	r0, r0, r4, lsr #31
   20c14:	str	r3, [sp, #24]
   20c18:	bne	20d94 <_obstack_memory_used@@Base+0x1908>
   20c1c:	ldr	r2, [r7, #4]
   20c20:	cmp	r4, r2
   20c24:	blt	20c84 <_obstack_memory_used@@Base+0x17f8>
   20c28:	add	r9, r7, #8
   20c2c:	cmp	r6, r9
   20c30:	str	r2, [sp, #44]	; 0x2c
   20c34:	beq	20d64 <_obstack_memory_used@@Base+0x18d8>
   20c38:	mov	r3, #8
   20c3c:	sub	r2, r4, r2
   20c40:	mov	r0, r6
   20c44:	str	r3, [sp]
   20c48:	add	r2, r2, #1
   20c4c:	mvn	r3, #-2147483648	; 0x80000000
   20c50:	add	r1, sp, #44	; 0x2c
   20c54:	bl	22170 <_obstack_memory_used@@Base+0x2ce4>
   20c58:	mov	r6, r0
   20c5c:	str	r0, [r7]
   20c60:	ldr	r0, [r7, #4]
   20c64:	ldr	r2, [sp, #44]	; 0x2c
   20c68:	mov	r1, #0
   20c6c:	sub	r2, r2, r0
   20c70:	add	r0, r6, r0, lsl #3
   20c74:	lsl	r2, r2, #3
   20c78:	bl	11be8 <memset@plt>
   20c7c:	ldr	r3, [sp, #44]	; 0x2c
   20c80:	str	r3, [r7, #4]
   20c84:	add	r3, r6, r4, lsl #3
   20c88:	ldr	r1, [r5, #4]
   20c8c:	ldr	r7, [r3, #4]
   20c90:	ldr	r9, [r6, r4, lsl #3]
   20c94:	ldr	r2, [r5, #40]	; 0x28
   20c98:	ldr	ip, [r5, #44]	; 0x2c
   20c9c:	add	r0, r5, #8
   20ca0:	str	r3, [sp, #28]
   20ca4:	ldr	r3, [r5]
   20ca8:	orr	r1, r1, #1
   20cac:	mov	lr, r0
   20cb0:	str	r1, [sp, #32]
   20cb4:	str	r0, [sp, #36]	; 0x24
   20cb8:	str	r1, [sp, #4]
   20cbc:	str	r2, [sp, #12]
   20cc0:	str	r3, [sp]
   20cc4:	mov	r0, r7
   20cc8:	mov	r1, r9
   20ccc:	str	ip, [sp, #16]
   20cd0:	str	lr, [sp, #8]
   20cd4:	mov	r3, fp
   20cd8:	mov	r2, sl
   20cdc:	bl	1f6c4 <_obstack_memory_used@@Base+0x238>
   20ce0:	cmp	r9, r0
   20ce4:	bhi	20d50 <_obstack_memory_used@@Base+0x18c4>
   20ce8:	ldr	r3, [pc, #172]	; 20d9c <_obstack_memory_used@@Base+0x1910>
   20cec:	add	r9, r0, #1
   20cf0:	cmp	r7, r3
   20cf4:	str	r9, [r6, r4, lsl #3]
   20cf8:	beq	20d04 <_obstack_memory_used@@Base+0x1878>
   20cfc:	mov	r0, r7
   20d00:	bl	1ad20 <__assert_fail@plt+0x8fac>
   20d04:	mov	r0, r9
   20d08:	bl	2200c <_obstack_memory_used@@Base+0x2b80>
   20d0c:	ldr	lr, [sp, #28]
   20d10:	ldr	ip, [r5, #44]	; 0x2c
   20d14:	ldr	r4, [r5, #40]	; 0x28
   20d18:	mov	r3, fp
   20d1c:	mov	r2, sl
   20d20:	mov	r1, r9
   20d24:	str	r0, [lr, #4]
   20d28:	ldr	lr, [r5]
   20d2c:	ldr	r5, [sp, #36]	; 0x24
   20d30:	str	ip, [sp, #16]
   20d34:	str	r5, [sp, #8]
   20d38:	ldr	r5, [sp, #32]
   20d3c:	str	r4, [sp, #12]
   20d40:	str	r5, [sp, #4]
   20d44:	str	lr, [sp]
   20d48:	mov	r7, r0
   20d4c:	bl	1f6c4 <_obstack_memory_used@@Base+0x238>
   20d50:	ldr	r3, [sp, #24]
   20d54:	mov	r0, r7
   20d58:	str	r3, [r8]
   20d5c:	add	sp, sp, #52	; 0x34
   20d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d64:	mov	r3, #8
   20d68:	sub	r2, r4, r2
   20d6c:	str	r3, [sp]
   20d70:	add	r1, sp, #44	; 0x2c
   20d74:	add	r2, r2, #1
   20d78:	mvn	r3, #-2147483648	; 0x80000000
   20d7c:	bl	22170 <_obstack_memory_used@@Base+0x2ce4>
   20d80:	mov	r6, r0
   20d84:	ldm	r9, {r0, r1}
   20d88:	str	r6, [r7]
   20d8c:	stm	r6, {r0, r1}
   20d90:	b	20c60 <_obstack_memory_used@@Base+0x17d4>
   20d94:	bl	11d2c <abort@plt>
   20d98:	andeq	r9, r3, ip, asr #5
   20d9c:	andeq	sl, r3, r8, ror #7
   20da0:	push	{r4, r5, r6, lr}
   20da4:	mov	r5, r0
   20da8:	bl	11bb8 <__errno_location@plt>
   20dac:	cmp	r5, #0
   20db0:	mov	r1, #48	; 0x30
   20db4:	mov	r4, r0
   20db8:	ldr	r0, [pc, #16]	; 20dd0 <_obstack_memory_used@@Base+0x1944>
   20dbc:	ldr	r6, [r4]
   20dc0:	movne	r0, r5
   20dc4:	bl	2246c <_obstack_memory_used@@Base+0x2fe0>
   20dc8:	str	r6, [r4]
   20dcc:	pop	{r4, r5, r6, pc}
   20dd0:	andeq	sl, r3, r8, ror #9
   20dd4:	ldr	r3, [pc, #12]	; 20de8 <_obstack_memory_used@@Base+0x195c>
   20dd8:	cmp	r0, #0
   20ddc:	moveq	r0, r3
   20de0:	ldr	r0, [r0]
   20de4:	bx	lr
   20de8:	andeq	sl, r3, r8, ror #9
   20dec:	ldr	r3, [pc, #12]	; 20e00 <_obstack_memory_used@@Base+0x1974>
   20df0:	cmp	r0, #0
   20df4:	moveq	r0, r3
   20df8:	str	r1, [r0]
   20dfc:	bx	lr
   20e00:	andeq	sl, r3, r8, ror #9
   20e04:	ldr	r3, [pc, #52]	; 20e40 <_obstack_memory_used@@Base+0x19b4>
   20e08:	cmp	r0, #0
   20e0c:	moveq	r0, r3
   20e10:	add	r3, r0, #8
   20e14:	push	{lr}		; (str lr, [sp, #-4]!)
   20e18:	lsr	lr, r1, #5
   20e1c:	and	r1, r1, #31
   20e20:	ldr	ip, [r3, lr, lsl #2]
   20e24:	lsr	r0, ip, r1
   20e28:	eor	r2, r2, r0
   20e2c:	and	r2, r2, #1
   20e30:	and	r0, r0, #1
   20e34:	eor	r1, ip, r2, lsl r1
   20e38:	str	r1, [r3, lr, lsl #2]
   20e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   20e40:	andeq	sl, r3, r8, ror #9
   20e44:	ldr	r3, [pc, #16]	; 20e5c <_obstack_memory_used@@Base+0x19d0>
   20e48:	cmp	r0, #0
   20e4c:	movne	r3, r0
   20e50:	ldr	r0, [r3, #4]
   20e54:	str	r1, [r3, #4]
   20e58:	bx	lr
   20e5c:	andeq	sl, r3, r8, ror #9
   20e60:	ldr	r3, [pc, #44]	; 20e94 <_obstack_memory_used@@Base+0x1a08>
   20e64:	cmp	r0, #0
   20e68:	moveq	r0, r3
   20e6c:	mov	ip, #10
   20e70:	cmp	r2, #0
   20e74:	cmpne	r1, #0
   20e78:	str	ip, [r0]
   20e7c:	beq	20e8c <_obstack_memory_used@@Base+0x1a00>
   20e80:	str	r1, [r0, #40]	; 0x28
   20e84:	str	r2, [r0, #44]	; 0x2c
   20e88:	bx	lr
   20e8c:	push	{r4, lr}
   20e90:	bl	11d2c <abort@plt>
   20e94:	andeq	sl, r3, r8, ror #9
   20e98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20e9c:	sub	sp, sp, #24
   20ea0:	ldr	ip, [pc, #108]	; 20f14 <_obstack_memory_used@@Base+0x1a88>
   20ea4:	ldr	r4, [sp, #56]	; 0x38
   20ea8:	mov	r9, r2
   20eac:	cmp	r4, #0
   20eb0:	moveq	r4, ip
   20eb4:	mov	sl, r3
   20eb8:	mov	r7, r0
   20ebc:	mov	r8, r1
   20ec0:	bl	11bb8 <__errno_location@plt>
   20ec4:	ldr	r3, [r4, #44]	; 0x2c
   20ec8:	mov	r1, r8
   20ecc:	ldr	r6, [r0]
   20ed0:	str	r3, [sp, #16]
   20ed4:	ldr	r2, [r4, #40]	; 0x28
   20ed8:	add	r3, r4, #8
   20edc:	str	r3, [sp, #8]
   20ee0:	str	r2, [sp, #12]
   20ee4:	ldr	r2, [r4, #4]
   20ee8:	mov	r5, r0
   20eec:	str	r2, [sp, #4]
   20ef0:	ldr	ip, [r4]
   20ef4:	mov	r3, sl
   20ef8:	mov	r2, r9
   20efc:	mov	r0, r7
   20f00:	str	ip, [sp]
   20f04:	bl	1f6c4 <_obstack_memory_used@@Base+0x238>
   20f08:	str	r6, [r5]
   20f0c:	add	sp, sp, #24
   20f10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20f14:	andeq	sl, r3, r8, ror #9
   20f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f1c:	cmp	r3, #0
   20f20:	sub	sp, sp, #44	; 0x2c
   20f24:	ldr	r4, [pc, #192]	; 20fec <_obstack_memory_used@@Base+0x1b60>
   20f28:	mov	r6, r2
   20f2c:	movne	r4, r3
   20f30:	mov	r9, r1
   20f34:	mov	r8, r0
   20f38:	bl	11bb8 <__errno_location@plt>
   20f3c:	ldr	r3, [r4, #44]	; 0x2c
   20f40:	ldr	r5, [r4, #4]
   20f44:	add	sl, r4, #8
   20f48:	cmp	r6, #0
   20f4c:	orreq	r5, r5, #1
   20f50:	mov	r1, #0
   20f54:	ldr	r2, [r0]
   20f58:	str	r3, [sp, #16]
   20f5c:	ldr	r3, [r4, #40]	; 0x28
   20f60:	stmib	sp, {r5, sl}
   20f64:	str	r3, [sp, #12]
   20f68:	ldr	r3, [r4]
   20f6c:	mov	r7, r0
   20f70:	str	r2, [sp, #28]
   20f74:	str	r3, [sp]
   20f78:	mov	r2, r8
   20f7c:	mov	r3, r9
   20f80:	mov	r0, r1
   20f84:	bl	1f6c4 <_obstack_memory_used@@Base+0x238>
   20f88:	add	r1, r0, #1
   20f8c:	mov	fp, r0
   20f90:	mov	r0, r1
   20f94:	str	r1, [sp, #36]	; 0x24
   20f98:	bl	2200c <_obstack_memory_used@@Base+0x2b80>
   20f9c:	ldr	r3, [r4, #44]	; 0x2c
   20fa0:	mov	r2, r8
   20fa4:	str	r3, [sp, #16]
   20fa8:	ldr	r3, [r4, #40]	; 0x28
   20fac:	str	r5, [sp, #4]
   20fb0:	str	r3, [sp, #12]
   20fb4:	str	sl, [sp, #8]
   20fb8:	ldr	ip, [r4]
   20fbc:	ldr	r1, [sp, #36]	; 0x24
   20fc0:	mov	r3, r9
   20fc4:	str	ip, [sp]
   20fc8:	str	r0, [sp, #32]
   20fcc:	bl	1f6c4 <_obstack_memory_used@@Base+0x238>
   20fd0:	ldr	r2, [sp, #28]
   20fd4:	cmp	r6, #0
   20fd8:	str	r2, [r7]
   20fdc:	ldr	r0, [sp, #32]
   20fe0:	strne	fp, [r6]
   20fe4:	add	sp, sp, #44	; 0x2c
   20fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fec:	andeq	sl, r3, r8, ror #9
   20ff0:	mov	r3, r2
   20ff4:	mov	r2, #0
   20ff8:	b	20f18 <_obstack_memory_used@@Base+0x1a8c>
   20ffc:	push	{r4, r5, r6, r7, r8, lr}
   21000:	ldr	r6, [pc, #116]	; 2107c <_obstack_memory_used@@Base+0x1bf0>
   21004:	ldr	r3, [r6, #4]
   21008:	ldr	r7, [r6]
   2100c:	cmp	r3, #1
   21010:	movgt	r5, r7
   21014:	movgt	r4, #1
   21018:	ble	21038 <_obstack_memory_used@@Base+0x1bac>
   2101c:	ldr	r0, [r5, #12]
   21020:	bl	1ad20 <__assert_fail@plt+0x8fac>
   21024:	ldr	r3, [r6, #4]
   21028:	add	r4, r4, #1
   2102c:	cmp	r3, r4
   21030:	add	r5, r5, #8
   21034:	bgt	2101c <_obstack_memory_used@@Base+0x1b90>
   21038:	ldr	r0, [r7, #4]
   2103c:	ldr	r4, [pc, #60]	; 21080 <_obstack_memory_used@@Base+0x1bf4>
   21040:	cmp	r0, r4
   21044:	beq	21058 <_obstack_memory_used@@Base+0x1bcc>
   21048:	bl	1ad20 <__assert_fail@plt+0x8fac>
   2104c:	mov	r3, #256	; 0x100
   21050:	str	r4, [r6, #12]
   21054:	str	r3, [r6, #8]
   21058:	ldr	r4, [pc, #36]	; 21084 <_obstack_memory_used@@Base+0x1bf8>
   2105c:	cmp	r7, r4
   21060:	beq	21070 <_obstack_memory_used@@Base+0x1be4>
   21064:	mov	r0, r7
   21068:	bl	1ad20 <__assert_fail@plt+0x8fac>
   2106c:	str	r4, [r6]
   21070:	mov	r3, #1
   21074:	str	r3, [r6, #4]
   21078:	pop	{r4, r5, r6, r7, r8, pc}
   2107c:	andeq	r9, r3, ip, asr #5
   21080:	andeq	sl, r3, r8, ror #7
   21084:	ldrdeq	r9, [r3], -r4
   21088:	ldr	r3, [pc, #4]	; 21094 <_obstack_memory_used@@Base+0x1c08>
   2108c:	mvn	r2, #0
   21090:	b	20bd8 <_obstack_memory_used@@Base+0x174c>
   21094:	andeq	sl, r3, r8, ror #9
   21098:	ldr	r3, [pc]	; 210a0 <_obstack_memory_used@@Base+0x1c14>
   2109c:	b	20bd8 <_obstack_memory_used@@Base+0x174c>
   210a0:	andeq	sl, r3, r8, ror #9
   210a4:	mov	r1, r0
   210a8:	ldr	r3, [pc, #8]	; 210b8 <_obstack_memory_used@@Base+0x1c2c>
   210ac:	mvn	r2, #0
   210b0:	mov	r0, #0
   210b4:	b	20bd8 <_obstack_memory_used@@Base+0x174c>
   210b8:	andeq	sl, r3, r8, ror #9
   210bc:	mov	r2, r1
   210c0:	ldr	r3, [pc, #8]	; 210d0 <_obstack_memory_used@@Base+0x1c44>
   210c4:	mov	r1, r0
   210c8:	mov	r0, #0
   210cc:	b	20bd8 <_obstack_memory_used@@Base+0x174c>
   210d0:	andeq	sl, r3, r8, ror #9
   210d4:	push	{r4, r5, lr}
   210d8:	sub	sp, sp, #52	; 0x34
   210dc:	mov	r5, r2
   210e0:	mov	r4, r0
   210e4:	mov	r0, sp
   210e8:	bl	1f574 <_obstack_memory_used@@Base+0xe8>
   210ec:	mov	r3, sp
   210f0:	mov	r1, r5
   210f4:	mov	r0, r4
   210f8:	mvn	r2, #0
   210fc:	bl	20bd8 <_obstack_memory_used@@Base+0x174c>
   21100:	add	sp, sp, #52	; 0x34
   21104:	pop	{r4, r5, pc}
   21108:	push	{r4, r5, r6, lr}
   2110c:	sub	sp, sp, #48	; 0x30
   21110:	mov	r5, r2
   21114:	mov	r6, r3
   21118:	mov	r4, r0
   2111c:	mov	r0, sp
   21120:	bl	1f574 <_obstack_memory_used@@Base+0xe8>
   21124:	mov	r3, sp
   21128:	mov	r2, r6
   2112c:	mov	r1, r5
   21130:	mov	r0, r4
   21134:	bl	20bd8 <_obstack_memory_used@@Base+0x174c>
   21138:	add	sp, sp, #48	; 0x30
   2113c:	pop	{r4, r5, r6, pc}
   21140:	mov	r2, r1
   21144:	mov	r1, r0
   21148:	mov	r0, #0
   2114c:	b	210d4 <_obstack_memory_used@@Base+0x1c48>
   21150:	mov	r3, r2
   21154:	mov	r2, r1
   21158:	mov	r1, r0
   2115c:	mov	r0, #0
   21160:	b	21108 <_obstack_memory_used@@Base+0x1c7c>
   21164:	push	{r4, r5, r6, r7, r8, lr}
   21168:	mov	r7, r0
   2116c:	ldr	lr, [pc, #100]	; 211d8 <_obstack_memory_used@@Base+0x1d4c>
   21170:	mov	r8, r1
   21174:	mov	r4, r2
   21178:	ldm	lr!, {r0, r1, r2, r3}
   2117c:	sub	sp, sp, #48	; 0x30
   21180:	mov	ip, sp
   21184:	lsr	r5, r4, #5
   21188:	stmia	ip!, {r0, r1, r2, r3}
   2118c:	add	r6, sp, #8
   21190:	ldm	lr!, {r0, r1, r2, r3}
   21194:	and	r4, r4, #31
   21198:	stmia	ip!, {r0, r1, r2, r3}
   2119c:	ldm	lr, {r0, r1, r2, r3}
   211a0:	stm	ip, {r0, r1, r2, r3}
   211a4:	mov	r2, r8
   211a8:	ldr	lr, [r6, r5, lsl #2]
   211ac:	mov	r1, r7
   211b0:	mov	r3, sp
   211b4:	lsr	ip, lr, r4
   211b8:	eor	ip, ip, #1
   211bc:	and	ip, ip, #1
   211c0:	mov	r0, #0
   211c4:	eor	r4, lr, ip, lsl r4
   211c8:	str	r4, [r6, r5, lsl #2]
   211cc:	bl	20bd8 <_obstack_memory_used@@Base+0x174c>
   211d0:	add	sp, sp, #48	; 0x30
   211d4:	pop	{r4, r5, r6, r7, r8, pc}
   211d8:	andeq	sl, r3, r8, ror #9
   211dc:	mov	r2, r1
   211e0:	mvn	r1, #0
   211e4:	b	21164 <_obstack_memory_used@@Base+0x1cd8>
   211e8:	mov	r2, #58	; 0x3a
   211ec:	mvn	r1, #0
   211f0:	b	21164 <_obstack_memory_used@@Base+0x1cd8>
   211f4:	mov	r2, #58	; 0x3a
   211f8:	b	21164 <_obstack_memory_used@@Base+0x1cd8>
   211fc:	push	{r4, r5, r6, r7, lr}
   21200:	sub	sp, sp, #100	; 0x64
   21204:	mov	r6, r0
   21208:	mov	r0, sp
   2120c:	mov	r7, r2
   21210:	bl	1f574 <_obstack_memory_used@@Base+0xe8>
   21214:	mov	ip, sp
   21218:	add	lr, sp, #48	; 0x30
   2121c:	ldm	ip!, {r0, r1, r2, r3}
   21220:	stmia	lr!, {r0, r1, r2, r3}
   21224:	ldm	ip!, {r0, r1, r2, r3}
   21228:	ldr	r5, [sp, #60]	; 0x3c
   2122c:	stmia	lr!, {r0, r1, r2, r3}
   21230:	mvn	r4, r5
   21234:	ldm	ip, {r0, r1, r2, r3}
   21238:	and	ip, r4, #67108864	; 0x4000000
   2123c:	eor	ip, ip, r5
   21240:	str	ip, [sp, #60]	; 0x3c
   21244:	stm	lr, {r0, r1, r2, r3}
   21248:	mov	r1, r7
   2124c:	mov	r0, r6
   21250:	add	r3, sp, #48	; 0x30
   21254:	mvn	r2, #0
   21258:	bl	20bd8 <_obstack_memory_used@@Base+0x174c>
   2125c:	add	sp, sp, #100	; 0x64
   21260:	pop	{r4, r5, r6, r7, pc}
   21264:	push	{r4, r5, r6, r7, r8, lr}
   21268:	mov	r5, r1
   2126c:	ldr	lr, [pc, #100]	; 212d8 <_obstack_memory_used@@Base+0x1e4c>
   21270:	mov	r4, r2
   21274:	mov	r7, r0
   21278:	mov	r8, r3
   2127c:	ldm	lr!, {r0, r1, r2, r3}
   21280:	sub	sp, sp, #48	; 0x30
   21284:	mov	ip, sp
   21288:	mov	r6, #10
   2128c:	stmia	ip!, {r0, r1, r2, r3}
   21290:	cmp	r4, #0
   21294:	cmpne	r5, #0
   21298:	ldm	lr!, {r0, r1, r2, r3}
   2129c:	str	r6, [sp]
   212a0:	stmia	ip!, {r0, r1, r2, r3}
   212a4:	ldm	lr, {r0, r1, r2, r3}
   212a8:	stm	ip, {r0, r1, r2, r3}
   212ac:	beq	212d4 <_obstack_memory_used@@Base+0x1e48>
   212b0:	mov	r3, sp
   212b4:	mov	r1, r8
   212b8:	mov	r0, r7
   212bc:	ldr	r2, [sp, #72]	; 0x48
   212c0:	str	r5, [sp, #40]	; 0x28
   212c4:	str	r4, [sp, #44]	; 0x2c
   212c8:	bl	20bd8 <_obstack_memory_used@@Base+0x174c>
   212cc:	add	sp, sp, #48	; 0x30
   212d0:	pop	{r4, r5, r6, r7, r8, pc}
   212d4:	bl	11d2c <abort@plt>
   212d8:	andeq	sl, r3, r8, ror #9
   212dc:	push	{lr}		; (str lr, [sp, #-4]!)
   212e0:	sub	sp, sp, #12
   212e4:	mvn	ip, #0
   212e8:	str	ip, [sp]
   212ec:	bl	21264 <_obstack_memory_used@@Base+0x1dd8>
   212f0:	add	sp, sp, #12
   212f4:	pop	{pc}		; (ldr pc, [sp], #4)
   212f8:	push	{lr}		; (str lr, [sp, #-4]!)
   212fc:	sub	sp, sp, #12
   21300:	mvn	ip, #0
   21304:	mov	r3, r2
   21308:	str	ip, [sp]
   2130c:	mov	r2, r1
   21310:	mov	r1, r0
   21314:	mov	r0, #0
   21318:	bl	21264 <_obstack_memory_used@@Base+0x1dd8>
   2131c:	add	sp, sp, #12
   21320:	pop	{pc}		; (ldr pc, [sp], #4)
   21324:	push	{lr}		; (str lr, [sp, #-4]!)
   21328:	sub	sp, sp, #12
   2132c:	str	r3, [sp]
   21330:	mov	r3, r2
   21334:	mov	r2, r1
   21338:	mov	r1, r0
   2133c:	mov	r0, #0
   21340:	bl	21264 <_obstack_memory_used@@Base+0x1dd8>
   21344:	add	sp, sp, #12
   21348:	pop	{pc}		; (ldr pc, [sp], #4)
   2134c:	ldr	r3, [pc]	; 21354 <_obstack_memory_used@@Base+0x1ec8>
   21350:	b	20bd8 <_obstack_memory_used@@Base+0x174c>
   21354:	ldrdeq	r9, [r3], -ip
   21358:	mov	r2, r1
   2135c:	ldr	r3, [pc, #8]	; 2136c <_obstack_memory_used@@Base+0x1ee0>
   21360:	mov	r1, r0
   21364:	mov	r0, #0
   21368:	b	20bd8 <_obstack_memory_used@@Base+0x174c>
   2136c:	ldrdeq	r9, [r3], -ip
   21370:	ldr	r3, [pc, #4]	; 2137c <_obstack_memory_used@@Base+0x1ef0>
   21374:	mvn	r2, #0
   21378:	b	20bd8 <_obstack_memory_used@@Base+0x174c>
   2137c:	ldrdeq	r9, [r3], -ip
   21380:	mov	r1, r0
   21384:	ldr	r3, [pc, #8]	; 21394 <_obstack_memory_used@@Base+0x1f08>
   21388:	mvn	r2, #0
   2138c:	mov	r0, #0
   21390:	b	20bd8 <_obstack_memory_used@@Base+0x174c>
   21394:	ldrdeq	r9, [r3], -ip
   21398:	push	{r4, r5, r6, lr}
   2139c:	ldr	r4, [r0], #8
   213a0:	cmp	r4, r0
   213a4:	beq	213c4 <_obstack_memory_used@@Base+0x1f38>
   213a8:	mov	r0, r4
   213ac:	bl	22f08 <_obstack_memory_used@@Base+0x3a7c>
   213b0:	cmp	r0, #0
   213b4:	movne	r3, r0
   213b8:	moveq	r3, r4
   213bc:	mov	r0, r3
   213c0:	pop	{r4, r5, r6, pc}
   213c4:	mov	r0, r1
   213c8:	mov	r5, r1
   213cc:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   213d0:	subs	r3, r0, #0
   213d4:	beq	213bc <_obstack_memory_used@@Base+0x1f30>
   213d8:	mov	r2, r5
   213dc:	mov	r1, r4
   213e0:	pop	{r4, r5, r6, lr}
   213e4:	b	11930 <memcpy@plt>
   213e8:	push	{r4, r5, r6, lr}
   213ec:	mov	r5, r0
   213f0:	ldr	r3, [r0, #4]
   213f4:	mov	r4, r0
   213f8:	ldr	r0, [r5], #8
   213fc:	lsl	r6, r3, #1
   21400:	cmp	r0, r5
   21404:	beq	21410 <_obstack_memory_used@@Base+0x1f84>
   21408:	bl	1ad20 <__assert_fail@plt+0x8fac>
   2140c:	ldr	r3, [r4, #4]
   21410:	cmp	r6, r3
   21414:	bcc	21434 <_obstack_memory_used@@Base+0x1fa8>
   21418:	mov	r0, r6
   2141c:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   21420:	subs	r3, r0, #0
   21424:	beq	21440 <_obstack_memory_used@@Base+0x1fb4>
   21428:	mov	r0, #1
   2142c:	stm	r4, {r3, r6}
   21430:	pop	{r4, r5, r6, pc}
   21434:	bl	11bb8 <__errno_location@plt>
   21438:	mov	r3, #12
   2143c:	str	r3, [r0]
   21440:	mov	r3, #1024	; 0x400
   21444:	str	r5, [r4]
   21448:	str	r3, [r4, #4]
   2144c:	mov	r0, #0
   21450:	pop	{r4, r5, r6, pc}
   21454:	push	{r4, r5, r6, r7, r8, lr}
   21458:	mov	r5, r0
   2145c:	ldr	r3, [r0, #4]
   21460:	ldr	r8, [r5], #8
   21464:	mov	r4, r0
   21468:	cmp	r8, r5
   2146c:	lsl	r7, r3, #1
   21470:	beq	214c8 <_obstack_memory_used@@Base+0x203c>
   21474:	cmp	r3, r7
   21478:	bhi	214a0 <_obstack_memory_used@@Base+0x2014>
   2147c:	mov	r0, r8
   21480:	mov	r1, r7
   21484:	bl	22f08 <_obstack_memory_used@@Base+0x3a7c>
   21488:	subs	r6, r0, #0
   2148c:	ldreq	r8, [r4]
   21490:	beq	214ac <_obstack_memory_used@@Base+0x2020>
   21494:	stm	r4, {r6, r7}
   21498:	mov	r0, #1
   2149c:	pop	{r4, r5, r6, r7, r8, pc}
   214a0:	bl	11bb8 <__errno_location@plt>
   214a4:	mov	r3, #12
   214a8:	str	r3, [r0]
   214ac:	mov	r0, r8
   214b0:	bl	1ad20 <__assert_fail@plt+0x8fac>
   214b4:	mov	r3, #1024	; 0x400
   214b8:	str	r5, [r4]
   214bc:	str	r3, [r4, #4]
   214c0:	mov	r0, #0
   214c4:	pop	{r4, r5, r6, r7, r8, pc}
   214c8:	mov	r0, r7
   214cc:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   214d0:	subs	r6, r0, #0
   214d4:	beq	214c0 <_obstack_memory_used@@Base+0x2034>
   214d8:	mov	r1, r8
   214dc:	ldr	r2, [r4, #4]
   214e0:	bl	11930 <memcpy@plt>
   214e4:	b	21494 <_obstack_memory_used@@Base+0x2008>
   214e8:	push	{r4, r5, r6, r7, r8, lr}
   214ec:	subs	r4, r0, #0
   214f0:	beq	21540 <_obstack_memory_used@@Base+0x20b4>
   214f4:	cmp	r4, #10
   214f8:	beq	21504 <_obstack_memory_used@@Base+0x2078>
   214fc:	mov	r0, r4
   21500:	pop	{r4, r5, r6, r7, r8, pc}
   21504:	ldr	r6, [r1]
   21508:	mov	r5, r1
   2150c:	mov	r0, r6
   21510:	ldr	r1, [pc, #60]	; 21554 <_obstack_memory_used@@Base+0x20c8>
   21514:	bl	118a0 <strcmp@plt>
   21518:	subs	r7, r0, #0
   2151c:	bne	214fc <_obstack_memory_used@@Base+0x2070>
   21520:	mov	r0, r6
   21524:	bl	11ce4 <freecon@plt>
   21528:	str	r7, [r5]
   2152c:	bl	11bb8 <__errno_location@plt>
   21530:	mov	r3, #61	; 0x3d
   21534:	mvn	r4, #0
   21538:	str	r3, [r0]
   2153c:	b	214fc <_obstack_memory_used@@Base+0x2070>
   21540:	bl	11bb8 <__errno_location@plt>
   21544:	mov	r3, #95	; 0x5f
   21548:	mvn	r4, #0
   2154c:	str	r3, [r0]
   21550:	b	214fc <_obstack_memory_used@@Base+0x2070>
   21554:	andeq	r5, r2, ip, lsr #11
   21558:	push	{r4, lr}
   2155c:	mov	r4, r1
   21560:	bl	11b7c <getfilecon@plt>
   21564:	mov	r1, r4
   21568:	pop	{r4, lr}
   2156c:	b	214e8 <_obstack_memory_used@@Base+0x205c>
   21570:	push	{r4, lr}
   21574:	mov	r4, r1
   21578:	bl	11ad4 <lgetfilecon@plt>
   2157c:	mov	r1, r4
   21580:	pop	{r4, lr}
   21584:	b	214e8 <_obstack_memory_used@@Base+0x205c>
   21588:	push	{r4, lr}
   2158c:	mov	r4, r1
   21590:	bl	119a8 <fgetfilecon@plt>
   21594:	mov	r1, r4
   21598:	pop	{r4, lr}
   2159c:	b	214e8 <_obstack_memory_used@@Base+0x205c>
   215a0:	push	{r4, r5, r6, lr}
   215a4:	mov	r5, r1
   215a8:	mov	r1, #0
   215ac:	mov	r4, r2
   215b0:	bl	11c54 <setlocale@plt>
   215b4:	subs	r6, r0, #0
   215b8:	beq	21614 <_obstack_memory_used@@Base+0x2188>
   215bc:	bl	11b94 <strlen@plt>
   215c0:	cmp	r4, r0
   215c4:	bhi	215fc <_obstack_memory_used@@Base+0x2170>
   215c8:	cmp	r4, #0
   215cc:	bne	215d8 <_obstack_memory_used@@Base+0x214c>
   215d0:	mov	r0, #34	; 0x22
   215d4:	pop	{r4, r5, r6, pc}
   215d8:	sub	r4, r4, #1
   215dc:	mov	r1, r6
   215e0:	mov	r2, r4
   215e4:	mov	r0, r5
   215e8:	bl	11930 <memcpy@plt>
   215ec:	mov	r3, #0
   215f0:	strb	r3, [r5, r4]
   215f4:	mov	r0, #34	; 0x22
   215f8:	pop	{r4, r5, r6, pc}
   215fc:	add	r2, r0, #1
   21600:	mov	r1, r6
   21604:	mov	r0, r5
   21608:	bl	11930 <memcpy@plt>
   2160c:	mov	r0, #0
   21610:	pop	{r4, r5, r6, pc}
   21614:	cmp	r4, #0
   21618:	beq	21628 <_obstack_memory_used@@Base+0x219c>
   2161c:	strb	r6, [r5]
   21620:	mov	r0, #22
   21624:	pop	{r4, r5, r6, pc}
   21628:	mov	r0, #22
   2162c:	pop	{r4, r5, r6, pc}
   21630:	mov	r1, #0
   21634:	b	11c54 <setlocale@plt>
   21638:	push	{r4, lr}
   2163c:	ldrb	r3, [r0, #4]
   21640:	cmp	r3, #0
   21644:	bne	21660 <_obstack_memory_used@@Base+0x21d4>
   21648:	ldr	r0, [pc, #52]	; 21684 <_obstack_memory_used@@Base+0x21f8>
   2164c:	bl	11d14 <unsetenv@plt>
   21650:	cmp	r0, #0
   21654:	beq	21678 <_obstack_memory_used@@Base+0x21ec>
   21658:	mov	r0, #0
   2165c:	pop	{r4, pc}
   21660:	add	r1, r0, #5
   21664:	mov	r2, #1
   21668:	ldr	r0, [pc, #20]	; 21684 <_obstack_memory_used@@Base+0x21f8>
   2166c:	bl	11bac <setenv@plt>
   21670:	cmp	r0, #0
   21674:	bne	21658 <_obstack_memory_used@@Base+0x21cc>
   21678:	bl	119fc <tzset@plt>
   2167c:	mov	r0, #1
   21680:	pop	{r4, pc}
   21684:	andeq	r7, r2, r0, ror #16
   21688:	cmp	r0, #1
   2168c:	push	{r4, r5, r6, r7, r8, lr}
   21690:	mov	r4, r0
   21694:	moveq	r7, r0
   21698:	beq	216d8 <_obstack_memory_used@@Base+0x224c>
   2169c:	bl	11bb8 <__errno_location@plt>
   216a0:	mov	r6, r0
   216a4:	mov	r0, r4
   216a8:	ldr	r8, [r6]
   216ac:	bl	21638 <_obstack_memory_used@@Base+0x21ac>
   216b0:	subs	r7, r0, #0
   216b4:	ldreq	r8, [r6]
   216b8:	cmp	r4, #0
   216bc:	beq	216d4 <_obstack_memory_used@@Base+0x2248>
   216c0:	ldr	r5, [r4]
   216c4:	mov	r0, r4
   216c8:	bl	1ad20 <__assert_fail@plt+0x8fac>
   216cc:	subs	r4, r5, #0
   216d0:	bne	216c0 <_obstack_memory_used@@Base+0x2234>
   216d4:	str	r8, [r6]
   216d8:	mov	r0, r7
   216dc:	pop	{r4, r5, r6, r7, r8, pc}
   216e0:	push	{r4, r5, r6, r7, r8, lr}
   216e4:	subs	r7, r0, #0
   216e8:	beq	21744 <_obstack_memory_used@@Base+0x22b8>
   216ec:	bl	11b94 <strlen@plt>
   216f0:	add	r5, r0, #1
   216f4:	cmp	r5, #58	; 0x3a
   216f8:	addhi	r0, r0, #10
   216fc:	bichi	r0, r0, #3
   21700:	movls	r0, #64	; 0x40
   21704:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   21708:	subs	r4, r0, #0
   2170c:	beq	2173c <_obstack_memory_used@@Base+0x22b0>
   21710:	mov	r3, r4
   21714:	mov	r6, #0
   21718:	mov	r2, #1
   2171c:	strb	r2, [r4, #4]
   21720:	str	r6, [r4]
   21724:	mov	r1, r7
   21728:	strb	r6, [r3, #5]!
   2172c:	mov	r2, r5
   21730:	mov	r0, r3
   21734:	bl	11930 <memcpy@plt>
   21738:	strb	r6, [r0, r5]
   2173c:	mov	r0, r4
   21740:	pop	{r4, r5, r6, r7, r8, pc}
   21744:	mov	r0, #64	; 0x40
   21748:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   2174c:	subs	r4, r0, #0
   21750:	beq	2173c <_obstack_memory_used@@Base+0x22b0>
   21754:	str	r7, [r4]
   21758:	strb	r7, [r4, #4]
   2175c:	strb	r7, [r4, #5]
   21760:	mov	r0, r4
   21764:	pop	{r4, r5, r6, r7, r8, pc}
   21768:	push	{r4, r5, r6, r7, r8, lr}
   2176c:	ldr	r6, [r1, #40]	; 0x28
   21770:	cmp	r6, #0
   21774:	beq	2183c <_obstack_memory_used@@Base+0x23b0>
   21778:	cmp	r1, r6
   2177c:	mov	r7, r1
   21780:	mov	r5, r0
   21784:	bhi	21794 <_obstack_memory_used@@Base+0x2308>
   21788:	add	r3, r1, #44	; 0x2c
   2178c:	cmp	r6, r3
   21790:	bcc	2183c <_obstack_memory_used@@Base+0x23b0>
   21794:	ldrb	r3, [r6]
   21798:	cmp	r3, #0
   2179c:	addne	r4, r5, #5
   217a0:	beq	21834 <_obstack_memory_used@@Base+0x23a8>
   217a4:	mov	r1, r6
   217a8:	mov	r0, r4
   217ac:	bl	118a0 <strcmp@plt>
   217b0:	add	r2, r5, #5
   217b4:	cmp	r0, #0
   217b8:	mov	r0, r4
   217bc:	beq	21828 <_obstack_memory_used@@Base+0x239c>
   217c0:	ldrb	r3, [r4]
   217c4:	cmp	r3, #0
   217c8:	bne	217e0 <_obstack_memory_used@@Base+0x2354>
   217cc:	cmp	r4, r2
   217d0:	bne	21844 <_obstack_memory_used@@Base+0x23b8>
   217d4:	ldrb	r3, [r5, #4]
   217d8:	cmp	r3, #0
   217dc:	beq	21844 <_obstack_memory_used@@Base+0x23b8>
   217e0:	bl	11b94 <strlen@plt>
   217e4:	add	r0, r0, #1
   217e8:	ldrb	r3, [r4, r0]!
   217ec:	cmp	r3, #0
   217f0:	bne	217a4 <_obstack_memory_used@@Base+0x2318>
   217f4:	ldr	r3, [r5]
   217f8:	cmp	r3, #0
   217fc:	addne	r4, r3, #5
   21800:	movne	r5, r3
   21804:	b	217a4 <_obstack_memory_used@@Base+0x2318>
   21808:	mov	r0, r6
   2180c:	bl	216e0 <_obstack_memory_used@@Base+0x2254>
   21810:	cmp	r0, #0
   21814:	str	r0, [r5]
   21818:	popeq	{r4, r5, r6, r7, r8, pc}
   2181c:	add	r4, r0, #5
   21820:	mov	r3, #0
   21824:	strb	r3, [r0, #4]
   21828:	str	r4, [r7, #40]	; 0x28
   2182c:	mov	r0, #1
   21830:	pop	{r4, r5, r6, r7, r8, pc}
   21834:	ldr	r4, [pc, #64]	; 2187c <_obstack_memory_used@@Base+0x23f0>
   21838:	b	21828 <_obstack_memory_used@@Base+0x239c>
   2183c:	mov	r0, #1
   21840:	pop	{r4, r5, r6, r7, r8, pc}
   21844:	mov	r0, r6
   21848:	bl	11b94 <strlen@plt>
   2184c:	add	r3, r5, #64	; 0x40
   21850:	sub	r3, r3, r4
   21854:	add	r8, r0, #1
   21858:	cmp	r8, r3
   2185c:	bge	21808 <_obstack_memory_used@@Base+0x237c>
   21860:	mov	r1, r6
   21864:	mov	r2, r8
   21868:	mov	r0, r4
   2186c:	bl	11930 <memcpy@plt>
   21870:	mov	r3, #0
   21874:	strb	r3, [r4, r8]
   21878:	b	21828 <_obstack_memory_used@@Base+0x239c>
   2187c:	andeq	r7, r2, r4, lsl #29
   21880:	push	{r4, r5, r6, r7, r8, lr}
   21884:	mov	r4, r0
   21888:	ldr	r0, [pc, #152]	; 21928 <_obstack_memory_used@@Base+0x249c>
   2188c:	bl	11ac8 <getenv@plt>
   21890:	ldrb	r3, [r4, #4]
   21894:	subs	r5, r0, #0
   21898:	beq	218e0 <_obstack_memory_used@@Base+0x2454>
   2189c:	cmp	r3, #0
   218a0:	beq	218b8 <_obstack_memory_used@@Base+0x242c>
   218a4:	mov	r1, r5
   218a8:	add	r0, r4, #5
   218ac:	bl	118a0 <strcmp@plt>
   218b0:	cmp	r0, #0
   218b4:	beq	218e8 <_obstack_memory_used@@Base+0x245c>
   218b8:	mov	r0, r5
   218bc:	bl	216e0 <_obstack_memory_used@@Base+0x2254>
   218c0:	subs	r5, r0, #0
   218c4:	beq	218d8 <_obstack_memory_used@@Base+0x244c>
   218c8:	mov	r0, r4
   218cc:	bl	21638 <_obstack_memory_used@@Base+0x21ac>
   218d0:	cmp	r0, #0
   218d4:	beq	218f4 <_obstack_memory_used@@Base+0x2468>
   218d8:	mov	r0, r5
   218dc:	pop	{r4, r5, r6, r7, r8, pc}
   218e0:	cmp	r3, #0
   218e4:	bne	218b8 <_obstack_memory_used@@Base+0x242c>
   218e8:	mov	r5, #1
   218ec:	mov	r0, r5
   218f0:	pop	{r4, r5, r6, r7, r8, pc}
   218f4:	bl	11bb8 <__errno_location@plt>
   218f8:	cmp	r5, #1
   218fc:	mov	r6, r0
   21900:	ldr	r7, [r0]
   21904:	beq	2191c <_obstack_memory_used@@Base+0x2490>
   21908:	ldr	r4, [r5]
   2190c:	mov	r0, r5
   21910:	bl	1ad20 <__assert_fail@plt+0x8fac>
   21914:	subs	r5, r4, #0
   21918:	bne	21908 <_obstack_memory_used@@Base+0x247c>
   2191c:	str	r7, [r6]
   21920:	mov	r5, #0
   21924:	b	218d8 <_obstack_memory_used@@Base+0x244c>
   21928:	andeq	r7, r2, r0, ror #16
   2192c:	cmp	r0, #1
   21930:	bxeq	lr
   21934:	cmp	r0, #0
   21938:	beq	21954 <_obstack_memory_used@@Base+0x24c8>
   2193c:	push	{r4, lr}
   21940:	ldr	r4, [r0]
   21944:	bl	1ad20 <__assert_fail@plt+0x8fac>
   21948:	subs	r0, r4, #0
   2194c:	bne	21940 <_obstack_memory_used@@Base+0x24b4>
   21950:	pop	{r4, pc}
   21954:	bx	lr
   21958:	subs	ip, r0, #0
   2195c:	push	{r4, r5, r6, r7, r8, lr}
   21960:	mov	r5, r1
   21964:	beq	219cc <_obstack_memory_used@@Base+0x2540>
   21968:	mov	r4, r2
   2196c:	mov	r6, ip
   21970:	bl	21880 <_obstack_memory_used@@Base+0x23f4>
   21974:	subs	r7, r0, #0
   21978:	beq	219c4 <_obstack_memory_used@@Base+0x2538>
   2197c:	mov	r0, r5
   21980:	mov	r1, r4
   21984:	bl	119b4 <localtime_r@plt>
   21988:	cmp	r0, #0
   2198c:	beq	219bc <_obstack_memory_used@@Base+0x2530>
   21990:	mov	r0, r6
   21994:	mov	r1, r4
   21998:	bl	21768 <_obstack_memory_used@@Base+0x22dc>
   2199c:	cmp	r0, #0
   219a0:	beq	219bc <_obstack_memory_used@@Base+0x2530>
   219a4:	mov	r0, r7
   219a8:	bl	21688 <_obstack_memory_used@@Base+0x21fc>
   219ac:	cmp	r0, #0
   219b0:	beq	219c4 <_obstack_memory_used@@Base+0x2538>
   219b4:	mov	r0, r4
   219b8:	pop	{r4, r5, r6, r7, r8, pc}
   219bc:	mov	r0, r7
   219c0:	bl	21688 <_obstack_memory_used@@Base+0x21fc>
   219c4:	mov	r0, #0
   219c8:	pop	{r4, r5, r6, r7, r8, pc}
   219cc:	mov	r0, r5
   219d0:	mov	r1, r2
   219d4:	pop	{r4, r5, r6, r7, r8, lr}
   219d8:	b	11888 <gmtime_r@plt>
   219dc:	push	{r4, r5, r6, r7, lr}
   219e0:	subs	r7, r0, #0
   219e4:	sub	sp, sp, #52	; 0x34
   219e8:	mov	r4, r1
   219ec:	beq	21aac <_obstack_memory_used@@Base+0x2620>
   219f0:	bl	21880 <_obstack_memory_used@@Base+0x23f4>
   219f4:	subs	r6, r0, #0
   219f8:	beq	21aa4 <_obstack_memory_used@@Base+0x2618>
   219fc:	ldm	r4, {r1, r2, ip}
   21a00:	ldr	r0, [r4, #12]
   21a04:	ldr	r3, [r4, #16]
   21a08:	str	r1, [sp, #4]
   21a0c:	str	r2, [sp, #8]
   21a10:	ldr	r1, [r4, #20]
   21a14:	ldr	r2, [r4, #32]
   21a18:	str	r0, [sp, #16]
   21a1c:	str	r3, [sp, #20]
   21a20:	add	r0, sp, #4
   21a24:	mvn	r3, #0
   21a28:	str	r3, [sp, #32]
   21a2c:	str	ip, [sp, #12]
   21a30:	str	r1, [sp, #24]
   21a34:	str	r2, [sp, #36]	; 0x24
   21a38:	bl	118b8 <mktime@plt>
   21a3c:	ldr	r3, [sp, #32]
   21a40:	cmp	r3, #0
   21a44:	mov	r5, r0
   21a48:	blt	21a9c <_obstack_memory_used@@Base+0x2610>
   21a4c:	mov	r0, r7
   21a50:	add	r1, sp, #4
   21a54:	bl	21768 <_obstack_memory_used@@Base+0x22dc>
   21a58:	cmp	r0, #0
   21a5c:	beq	21a9c <_obstack_memory_used@@Base+0x2610>
   21a60:	mov	r0, r6
   21a64:	bl	21688 <_obstack_memory_used@@Base+0x21fc>
   21a68:	cmp	r0, #0
   21a6c:	beq	21aa4 <_obstack_memory_used@@Base+0x2618>
   21a70:	add	lr, sp, #4
   21a74:	mov	ip, r4
   21a78:	ldm	lr!, {r0, r1, r2, r3}
   21a7c:	stmia	ip!, {r0, r1, r2, r3}
   21a80:	ldm	lr!, {r0, r1, r2, r3}
   21a84:	stmia	ip!, {r0, r1, r2, r3}
   21a88:	ldm	lr, {r0, r1, r2}
   21a8c:	stm	ip, {r0, r1, r2}
   21a90:	mov	r0, r5
   21a94:	add	sp, sp, #52	; 0x34
   21a98:	pop	{r4, r5, r6, r7, pc}
   21a9c:	mov	r0, r6
   21aa0:	bl	21688 <_obstack_memory_used@@Base+0x21fc>
   21aa4:	mvn	r5, #0
   21aa8:	b	21a90 <_obstack_memory_used@@Base+0x2604>
   21aac:	mov	r0, r1
   21ab0:	bl	11cc0 <timegm@plt>
   21ab4:	mov	r5, r0
   21ab8:	mov	r0, r5
   21abc:	add	sp, sp, #52	; 0x34
   21ac0:	pop	{r4, r5, r6, r7, pc}
   21ac4:	push	{r4, r5, r6, lr}
   21ac8:	sub	sp, sp, #32
   21acc:	cmp	r1, #0
   21ad0:	mov	r4, r0
   21ad4:	ldr	r5, [sp, #48]	; 0x30
   21ad8:	ldr	r6, [sp, #52]	; 0x34
   21adc:	beq	21df4 <_obstack_memory_used@@Base+0x2968>
   21ae0:	stm	sp, {r2, r3}
   21ae4:	mov	r3, r1
   21ae8:	ldr	r2, [pc, #808]	; 21e18 <_obstack_memory_used@@Base+0x298c>
   21aec:	mov	r1, #1
   21af0:	bl	11c18 <__fprintf_chk@plt>
   21af4:	mov	r2, #5
   21af8:	ldr	r1, [pc, #796]	; 21e1c <_obstack_memory_used@@Base+0x2990>
   21afc:	mov	r0, #0
   21b00:	bl	11984 <dcgettext@plt>
   21b04:	ldr	r3, [pc, #788]	; 21e20 <_obstack_memory_used@@Base+0x2994>
   21b08:	ldr	r2, [pc, #788]	; 21e24 <_obstack_memory_used@@Base+0x2998>
   21b0c:	str	r3, [sp]
   21b10:	mov	r1, #1
   21b14:	mov	r3, r0
   21b18:	mov	r0, r4
   21b1c:	bl	11c18 <__fprintf_chk@plt>
   21b20:	mov	r1, r4
   21b24:	mov	r0, #10
   21b28:	bl	11978 <fputc_unlocked@plt>
   21b2c:	mov	r2, #5
   21b30:	ldr	r1, [pc, #752]	; 21e28 <_obstack_memory_used@@Base+0x299c>
   21b34:	mov	r0, #0
   21b38:	bl	11984 <dcgettext@plt>
   21b3c:	mov	r1, #1
   21b40:	ldr	r3, [pc, #740]	; 21e2c <_obstack_memory_used@@Base+0x29a0>
   21b44:	mov	r2, r0
   21b48:	mov	r0, r4
   21b4c:	bl	11c18 <__fprintf_chk@plt>
   21b50:	mov	r1, r4
   21b54:	mov	r0, #10
   21b58:	bl	11978 <fputc_unlocked@plt>
   21b5c:	cmp	r6, #9
   21b60:	ldrls	pc, [pc, r6, lsl #2]
   21b64:	b	21e0c <_obstack_memory_used@@Base+0x2980>
   21b68:	andeq	r1, r2, ip, ror #23
   21b6c:	strdeq	r1, [r2], -r4
   21b70:	andeq	r1, r2, r0, lsr #24
   21b74:	andeq	r1, r2, r4, asr ip
   21b78:	muleq	r2, r0, ip
   21b7c:	andeq	r1, r2, ip, asr #25
   21b80:	andeq	r1, r2, r8, lsl #26
   21b84:	andeq	r1, r2, ip, asr #26
   21b88:	muleq	r2, ip, sp
   21b8c:	muleq	r2, r0, fp
   21b90:	ldr	r1, [pc, #664]	; 21e30 <_obstack_memory_used@@Base+0x29a4>
   21b94:	mov	r2, #5
   21b98:	mov	r0, #0
   21b9c:	bl	11984 <dcgettext@plt>
   21ba0:	ldr	ip, [r5, #32]
   21ba4:	ldr	r1, [r5, #28]
   21ba8:	ldr	r2, [r5, #24]
   21bac:	ldr	r3, [r5]
   21bb0:	ldr	r6, [r5, #20]
   21bb4:	str	ip, [sp, #28]
   21bb8:	ldr	lr, [r5, #16]
   21bbc:	str	r1, [sp, #24]
   21bc0:	ldr	ip, [r5, #12]
   21bc4:	str	r2, [sp, #20]
   21bc8:	ldr	r1, [r5, #8]
   21bcc:	ldr	r2, [r5, #4]
   21bd0:	str	r6, [sp, #16]
   21bd4:	stmib	sp, {r1, ip, lr}
   21bd8:	mov	r1, #1
   21bdc:	str	r2, [sp]
   21be0:	mov	r2, r0
   21be4:	mov	r0, r4
   21be8:	bl	11c18 <__fprintf_chk@plt>
   21bec:	add	sp, sp, #32
   21bf0:	pop	{r4, r5, r6, pc}
   21bf4:	mov	r2, #5
   21bf8:	ldr	r1, [pc, #564]	; 21e34 <_obstack_memory_used@@Base+0x29a8>
   21bfc:	mov	r0, #0
   21c00:	bl	11984 <dcgettext@plt>
   21c04:	ldr	r3, [r5]
   21c08:	mov	r1, #1
   21c0c:	mov	r2, r0
   21c10:	mov	r0, r4
   21c14:	add	sp, sp, #32
   21c18:	pop	{r4, r5, r6, lr}
   21c1c:	b	11c18 <__fprintf_chk@plt>
   21c20:	mov	r2, #5
   21c24:	ldr	r1, [pc, #524]	; 21e38 <_obstack_memory_used@@Base+0x29ac>
   21c28:	mov	r0, #0
   21c2c:	bl	11984 <dcgettext@plt>
   21c30:	ldr	r2, [r5, #4]
   21c34:	ldr	r3, [r5]
   21c38:	mov	r1, #1
   21c3c:	str	r2, [sp, #48]	; 0x30
   21c40:	mov	r2, r0
   21c44:	mov	r0, r4
   21c48:	add	sp, sp, #32
   21c4c:	pop	{r4, r5, r6, lr}
   21c50:	b	11c18 <__fprintf_chk@plt>
   21c54:	mov	r2, #5
   21c58:	ldr	r1, [pc, #476]	; 21e3c <_obstack_memory_used@@Base+0x29b0>
   21c5c:	mov	r0, #0
   21c60:	bl	11984 <dcgettext@plt>
   21c64:	ldr	r1, [r5, #8]
   21c68:	ldr	r2, [r5, #4]
   21c6c:	ldr	r3, [r5]
   21c70:	str	r1, [sp, #52]	; 0x34
   21c74:	str	r2, [sp, #48]	; 0x30
   21c78:	mov	r1, #1
   21c7c:	mov	r2, r0
   21c80:	mov	r0, r4
   21c84:	add	sp, sp, #32
   21c88:	pop	{r4, r5, r6, lr}
   21c8c:	b	11c18 <__fprintf_chk@plt>
   21c90:	mov	r2, #5
   21c94:	ldr	r1, [pc, #420]	; 21e40 <_obstack_memory_used@@Base+0x29b4>
   21c98:	mov	r0, #0
   21c9c:	bl	11984 <dcgettext@plt>
   21ca0:	ldr	r1, [r5, #8]
   21ca4:	ldr	ip, [r5, #12]
   21ca8:	ldr	r2, [r5, #4]
   21cac:	ldr	r3, [r5]
   21cb0:	stmib	sp, {r1, ip}
   21cb4:	str	r2, [sp]
   21cb8:	mov	r1, #1
   21cbc:	mov	r2, r0
   21cc0:	mov	r0, r4
   21cc4:	bl	11c18 <__fprintf_chk@plt>
   21cc8:	b	21bec <_obstack_memory_used@@Base+0x2760>
   21ccc:	mov	r2, #5
   21cd0:	ldr	r1, [pc, #364]	; 21e44 <_obstack_memory_used@@Base+0x29b8>
   21cd4:	mov	r0, #0
   21cd8:	bl	11984 <dcgettext@plt>
   21cdc:	add	r1, r5, #8
   21ce0:	ldr	r2, [r5, #4]
   21ce4:	ldm	r1, {r1, ip, lr}
   21ce8:	ldr	r3, [r5]
   21cec:	str	r2, [sp]
   21cf0:	stmib	sp, {r1, ip, lr}
   21cf4:	mov	r1, #1
   21cf8:	mov	r2, r0
   21cfc:	mov	r0, r4
   21d00:	bl	11c18 <__fprintf_chk@plt>
   21d04:	b	21bec <_obstack_memory_used@@Base+0x2760>
   21d08:	mov	r2, #5
   21d0c:	ldr	r1, [pc, #308]	; 21e48 <_obstack_memory_used@@Base+0x29bc>
   21d10:	mov	r0, #0
   21d14:	bl	11984 <dcgettext@plt>
   21d18:	add	r1, r5, #8
   21d1c:	ldr	r2, [r5, #4]
   21d20:	ldm	r1, {r1, ip, lr}
   21d24:	ldr	r6, [r5, #20]
   21d28:	ldr	r3, [r5]
   21d2c:	stmib	sp, {r1, ip, lr}
   21d30:	mov	r1, #1
   21d34:	str	r2, [sp]
   21d38:	str	r6, [sp, #16]
   21d3c:	mov	r2, r0
   21d40:	mov	r0, r4
   21d44:	bl	11c18 <__fprintf_chk@plt>
   21d48:	b	21bec <_obstack_memory_used@@Base+0x2760>
   21d4c:	mov	r2, #5
   21d50:	ldr	r1, [pc, #244]	; 21e4c <_obstack_memory_used@@Base+0x29c0>
   21d54:	mov	r0, #0
   21d58:	bl	11984 <dcgettext@plt>
   21d5c:	ldr	r2, [r5, #24]
   21d60:	ldr	r3, [r5]
   21d64:	ldr	r6, [r5, #20]
   21d68:	ldr	lr, [r5, #16]
   21d6c:	ldr	ip, [r5, #12]
   21d70:	str	r2, [sp, #20]
   21d74:	ldr	r1, [r5, #8]
   21d78:	ldr	r2, [r5, #4]
   21d7c:	str	r6, [sp, #16]
   21d80:	stmib	sp, {r1, ip, lr}
   21d84:	mov	r1, #1
   21d88:	str	r2, [sp]
   21d8c:	mov	r2, r0
   21d90:	mov	r0, r4
   21d94:	bl	11c18 <__fprintf_chk@plt>
   21d98:	b	21bec <_obstack_memory_used@@Base+0x2760>
   21d9c:	mov	r2, #5
   21da0:	ldr	r1, [pc, #168]	; 21e50 <_obstack_memory_used@@Base+0x29c4>
   21da4:	mov	r0, #0
   21da8:	bl	11984 <dcgettext@plt>
   21dac:	ldr	r1, [r5, #28]
   21db0:	ldr	r2, [r5, #24]
   21db4:	ldr	r3, [r5]
   21db8:	ldr	r6, [r5, #20]
   21dbc:	ldr	lr, [r5, #16]
   21dc0:	str	r1, [sp, #24]
   21dc4:	ldr	ip, [r5, #12]
   21dc8:	str	r2, [sp, #20]
   21dcc:	ldr	r1, [r5, #8]
   21dd0:	ldr	r2, [r5, #4]
   21dd4:	str	r6, [sp, #16]
   21dd8:	stmib	sp, {r1, ip, lr}
   21ddc:	mov	r1, #1
   21de0:	str	r2, [sp]
   21de4:	mov	r2, r0
   21de8:	mov	r0, r4
   21dec:	bl	11c18 <__fprintf_chk@plt>
   21df0:	b	21bec <_obstack_memory_used@@Base+0x2760>
   21df4:	str	r3, [sp]
   21df8:	mov	r1, #1
   21dfc:	mov	r3, r2
   21e00:	ldr	r2, [pc, #76]	; 21e54 <_obstack_memory_used@@Base+0x29c8>
   21e04:	bl	11c18 <__fprintf_chk@plt>
   21e08:	b	21af4 <_obstack_memory_used@@Base+0x2668>
   21e0c:	mov	r2, #5
   21e10:	ldr	r1, [pc, #64]	; 21e58 <_obstack_memory_used@@Base+0x29cc>
   21e14:	b	21b98 <_obstack_memory_used@@Base+0x270c>
   21e18:	andeq	r8, r2, r0, asr #32
   21e1c:	andeq	r8, r2, r4, asr r0
   21e20:	andeq	r0, r0, r6, ror #15
   21e24:	andeq	r8, r2, ip, lsr #6
   21e28:	andeq	r8, r2, r8, asr r0
   21e2c:	andeq	r8, r2, r4, lsl #2
   21e30:	andeq	r8, r2, r4, lsr r2
   21e34:	andeq	r8, r2, r8, lsr #2
   21e38:	andeq	r8, r2, r8, lsr r1
   21e3c:	andeq	r8, r2, r0, asr r1
   21e40:	andeq	r8, r2, ip, ror #2
   21e44:	andeq	r8, r2, ip, lsl #3
   21e48:			; <UNDEFINED> instruction: 0x000281b0
   21e4c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   21e50:	andeq	r8, r2, r4, lsl #4
   21e54:	andeq	r8, r2, ip, asr #32
   21e58:	andeq	r8, r2, r8, ror #4
   21e5c:	push	{r4, r5, lr}
   21e60:	sub	sp, sp, #12
   21e64:	ldr	r5, [sp, #24]
   21e68:	ldr	ip, [r5]
   21e6c:	cmp	ip, #0
   21e70:	beq	21e8c <_obstack_memory_used@@Base+0x2a00>
   21e74:	mov	lr, r5
   21e78:	mov	ip, #0
   21e7c:	ldr	r4, [lr, #4]!
   21e80:	add	ip, ip, #1
   21e84:	cmp	r4, #0
   21e88:	bne	21e7c <_obstack_memory_used@@Base+0x29f0>
   21e8c:	stm	sp, {r5, ip}
   21e90:	bl	21ac4 <_obstack_memory_used@@Base+0x2638>
   21e94:	add	sp, sp, #12
   21e98:	pop	{r4, r5, pc}
   21e9c:	push	{r4, r5, lr}
   21ea0:	sub	sp, sp, #52	; 0x34
   21ea4:	add	r5, sp, #4
   21ea8:	ldr	r4, [sp, #64]	; 0x40
   21eac:	mov	ip, #0
   21eb0:	sub	r4, r4, #4
   21eb4:	ldr	lr, [r4, #4]!
   21eb8:	cmp	lr, #0
   21ebc:	str	lr, [r5, #4]!
   21ec0:	beq	21ed0 <_obstack_memory_used@@Base+0x2a44>
   21ec4:	add	ip, ip, #1
   21ec8:	cmp	ip, #10
   21ecc:	bne	21eb4 <_obstack_memory_used@@Base+0x2a28>
   21ed0:	add	lr, sp, #8
   21ed4:	str	ip, [sp, #4]
   21ed8:	str	lr, [sp]
   21edc:	bl	21ac4 <_obstack_memory_used@@Base+0x2638>
   21ee0:	add	sp, sp, #52	; 0x34
   21ee4:	pop	{r4, r5, pc}
   21ee8:	push	{r3}		; (str r3, [sp, #-4]!)
   21eec:	push	{r4, lr}
   21ef0:	sub	sp, sp, #60	; 0x3c
   21ef4:	add	lr, sp, #56	; 0x38
   21ef8:	add	r3, sp, #72	; 0x48
   21efc:	str	r3, [lr, #-44]!	; 0xffffffd4
   21f00:	add	r4, sp, #68	; 0x44
   21f04:	mov	r3, #0
   21f08:	ldr	ip, [r4, #4]!
   21f0c:	cmp	ip, #0
   21f10:	str	ip, [lr, #4]!
   21f14:	beq	21f24 <_obstack_memory_used@@Base+0x2a98>
   21f18:	add	r3, r3, #1
   21f1c:	cmp	r3, #10
   21f20:	bne	21f08 <_obstack_memory_used@@Base+0x2a7c>
   21f24:	add	ip, sp, #16
   21f28:	str	r3, [sp, #4]
   21f2c:	str	ip, [sp]
   21f30:	ldr	r3, [sp, #68]	; 0x44
   21f34:	bl	21ac4 <_obstack_memory_used@@Base+0x2638>
   21f38:	add	sp, sp, #60	; 0x3c
   21f3c:	pop	{r4, lr}
   21f40:	add	sp, sp, #4
   21f44:	bx	lr
   21f48:	ldr	r3, [pc, #116]	; 21fc4 <_obstack_memory_used@@Base+0x2b38>
   21f4c:	push	{r4, lr}
   21f50:	mov	r0, #10
   21f54:	ldr	r1, [r3]
   21f58:	bl	11978 <fputc_unlocked@plt>
   21f5c:	mov	r2, #5
   21f60:	ldr	r1, [pc, #96]	; 21fc8 <_obstack_memory_used@@Base+0x2b3c>
   21f64:	mov	r0, #0
   21f68:	bl	11984 <dcgettext@plt>
   21f6c:	ldr	r2, [pc, #88]	; 21fcc <_obstack_memory_used@@Base+0x2b40>
   21f70:	mov	r1, r0
   21f74:	mov	r0, #1
   21f78:	bl	11bf4 <__printf_chk@plt>
   21f7c:	mov	r2, #5
   21f80:	ldr	r1, [pc, #72]	; 21fd0 <_obstack_memory_used@@Base+0x2b44>
   21f84:	mov	r0, #0
   21f88:	bl	11984 <dcgettext@plt>
   21f8c:	ldr	r3, [pc, #64]	; 21fd4 <_obstack_memory_used@@Base+0x2b48>
   21f90:	ldr	r2, [pc, #64]	; 21fd8 <_obstack_memory_used@@Base+0x2b4c>
   21f94:	mov	r1, r0
   21f98:	mov	r0, #1
   21f9c:	bl	11bf4 <__printf_chk@plt>
   21fa0:	mov	r2, #5
   21fa4:	ldr	r1, [pc, #48]	; 21fdc <_obstack_memory_used@@Base+0x2b50>
   21fa8:	mov	r0, #0
   21fac:	bl	11984 <dcgettext@plt>
   21fb0:	ldr	r2, [pc, #40]	; 21fe0 <_obstack_memory_used@@Base+0x2b54>
   21fb4:	pop	{r4, lr}
   21fb8:	mov	r1, r0
   21fbc:	mov	r0, #1
   21fc0:	b	11bf4 <__printf_chk@plt>
   21fc4:	andeq	r9, r3, r4, lsr #6
   21fc8:	andeq	r8, r2, r4, lsr #5
   21fcc:			; <UNDEFINED> instruction: 0x000282b8
   21fd0:	ldrdeq	r8, [r2], -r0
   21fd4:	andeq	r7, r2, ip, asr #8
   21fd8:	andeq	r7, r2, r4, ror r4
   21fdc:	andeq	r8, r2, r4, ror #5
   21fe0:	andeq	r8, r2, ip, lsl #6
   21fe4:	push	{r4, lr}
   21fe8:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   21fec:	cmp	r0, #0
   21ff0:	popne	{r4, pc}
   21ff4:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   21ff8:	push	{r4, lr}
   21ffc:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   22000:	cmp	r0, #0
   22004:	popne	{r4, pc}
   22008:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   2200c:	push	{r4, lr}
   22010:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   22014:	cmp	r0, #0
   22018:	popne	{r4, pc}
   2201c:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   22020:	push	{r4, r5, r6, lr}
   22024:	mov	r5, r0
   22028:	mov	r4, r1
   2202c:	bl	22f08 <_obstack_memory_used@@Base+0x3a7c>
   22030:	cmp	r0, #0
   22034:	popne	{r4, r5, r6, pc}
   22038:	adds	r4, r4, #0
   2203c:	movne	r4, #1
   22040:	cmp	r5, #0
   22044:	orreq	r4, r4, #1
   22048:	cmp	r4, #0
   2204c:	popeq	{r4, r5, r6, pc}
   22050:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   22054:	push	{r4, lr}
   22058:	cmp	r1, #0
   2205c:	orreq	r1, r1, #1
   22060:	bl	22f08 <_obstack_memory_used@@Base+0x3a7c>
   22064:	cmp	r0, #0
   22068:	popne	{r4, pc}
   2206c:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   22070:	push	{r4, r5, r6, lr}
   22074:	mov	r6, r0
   22078:	mov	r5, r1
   2207c:	mov	r4, r2
   22080:	bl	231f0 <_obstack_memory_used@@Base+0x3d64>
   22084:	cmp	r0, #0
   22088:	popne	{r4, r5, r6, pc}
   2208c:	cmp	r6, #0
   22090:	beq	220a0 <_obstack_memory_used@@Base+0x2c14>
   22094:	cmp	r5, #0
   22098:	cmpne	r4, #0
   2209c:	popeq	{r4, r5, r6, pc}
   220a0:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   220a4:	b	22070 <_obstack_memory_used@@Base+0x2be4>
   220a8:	cmp	r2, #0
   220ac:	cmpne	r1, #0
   220b0:	moveq	r2, #1
   220b4:	moveq	r1, r2
   220b8:	push	{r4, lr}
   220bc:	bl	231f0 <_obstack_memory_used@@Base+0x3d64>
   220c0:	cmp	r0, #0
   220c4:	popne	{r4, pc}
   220c8:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   220cc:	mov	r2, r1
   220d0:	mov	r1, r0
   220d4:	mov	r0, #0
   220d8:	b	22070 <_obstack_memory_used@@Base+0x2be4>
   220dc:	mov	r2, r1
   220e0:	mov	r1, r0
   220e4:	mov	r0, #0
   220e8:	b	220a8 <_obstack_memory_used@@Base+0x2c1c>
   220ec:	push	{r4, r5, r6, lr}
   220f0:	subs	r6, r0, #0
   220f4:	sub	sp, sp, #8
   220f8:	mov	r5, r1
   220fc:	ldr	r4, [r1]
   22100:	beq	2213c <_obstack_memory_used@@Base+0x2cb0>
   22104:	lsr	r1, r4, #1
   22108:	add	r3, r1, #1
   2210c:	mvn	r3, r3
   22110:	cmp	r4, r3
   22114:	bhi	22138 <_obstack_memory_used@@Base+0x2cac>
   22118:	add	r4, r4, #1
   2211c:	add	r4, r4, r1
   22120:	mov	r0, r6
   22124:	mov	r1, r4
   22128:	bl	22070 <_obstack_memory_used@@Base+0x2be4>
   2212c:	str	r4, [r5]
   22130:	add	sp, sp, #8
   22134:	pop	{r4, r5, r6, pc}
   22138:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   2213c:	cmp	r4, #0
   22140:	bne	22120 <_obstack_memory_used@@Base+0x2c94>
   22144:	mov	r1, r2
   22148:	mov	r0, #64	; 0x40
   2214c:	str	r2, [sp, #4]
   22150:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   22154:	ldr	r2, [sp, #4]
   22158:	cmp	r0, #0
   2215c:	movne	r4, r0
   22160:	addeq	r4, r0, #1
   22164:	b	22120 <_obstack_memory_used@@Base+0x2c94>
   22168:	mov	r2, #1
   2216c:	b	220ec <_obstack_memory_used@@Base+0x2c60>
   22170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22174:	sub	sp, sp, #12
   22178:	ldr	r6, [r1]
   2217c:	mov	sl, r1
   22180:	mov	r9, r0
   22184:	asrs	r4, r6, #1
   22188:	mov	r5, r2
   2218c:	mov	fp, r3
   22190:	ldr	r7, [sp, #48]	; 0x30
   22194:	bmi	22300 <_obstack_memory_used@@Base+0x2e74>
   22198:	mvn	r3, #-2147483648	; 0x80000000
   2219c:	sub	r3, r3, r4
   221a0:	cmp	r6, r3
   221a4:	movle	r3, #0
   221a8:	movgt	r3, #1
   221ac:	mvn	r8, fp
   221b0:	cmp	r3, #0
   221b4:	addeq	r4, r4, r6
   221b8:	mvnne	r4, #-2147483648	; 0x80000000
   221bc:	lsr	r8, r8, #31
   221c0:	cmp	fp, r4
   221c4:	movge	r3, #0
   221c8:	andlt	r3, r8, #1
   221cc:	cmp	r3, #0
   221d0:	beq	222b8 <_obstack_memory_used@@Base+0x2e2c>
   221d4:	cmp	r7, #0
   221d8:	blt	22388 <_obstack_memory_used@@Base+0x2efc>
   221dc:	bne	22380 <_obstack_memory_used@@Base+0x2ef4>
   221e0:	mov	r2, #64	; 0x40
   221e4:	mov	r1, r7
   221e8:	mov	r0, r2
   221ec:	str	r2, [sp, #4]
   221f0:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   221f4:	ldr	r2, [sp, #4]
   221f8:	mov	r1, r7
   221fc:	mov	r4, r0
   22200:	mov	r0, r2
   22204:	bl	23668 <_obstack_memory_used@@Base+0x41dc>
   22208:	ldr	r2, [sp, #4]
   2220c:	sub	r1, r2, r1
   22210:	cmp	r9, #0
   22214:	sub	r3, r4, r6
   22218:	streq	r9, [sl]
   2221c:	cmp	r3, r5
   22220:	bge	222a4 <_obstack_memory_used@@Base+0x2e18>
   22224:	cmp	r5, #0
   22228:	blt	22314 <_obstack_memory_used@@Base+0x2e88>
   2222c:	cmp	r6, #0
   22230:	blt	22250 <_obstack_memory_used@@Base+0x2dc4>
   22234:	mvn	r3, #-2147483648	; 0x80000000
   22238:	sub	r3, r3, r5
   2223c:	cmp	r6, r3
   22240:	movle	r3, #0
   22244:	movgt	r3, #1
   22248:	cmp	r3, #0
   2224c:	bne	22410 <_obstack_memory_used@@Base+0x2f84>
   22250:	add	r5, r6, r5
   22254:	cmp	fp, r5
   22258:	movge	r8, #0
   2225c:	andlt	r8, r8, #1
   22260:	cmp	r8, #0
   22264:	mov	r4, r5
   22268:	bne	22410 <_obstack_memory_used@@Base+0x2f84>
   2226c:	cmp	r7, #0
   22270:	blt	22328 <_obstack_memory_used@@Base+0x2e9c>
   22274:	beq	222a0 <_obstack_memory_used@@Base+0x2e14>
   22278:	cmp	r5, #0
   2227c:	blt	223d0 <_obstack_memory_used@@Base+0x2f44>
   22280:	mov	r1, r7
   22284:	mvn	r0, #-2147483648	; 0x80000000
   22288:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   2228c:	cmp	r5, r0
   22290:	movle	r0, #0
   22294:	movgt	r0, #1
   22298:	cmp	r0, #0
   2229c:	bne	22410 <_obstack_memory_used@@Base+0x2f84>
   222a0:	mul	r1, r5, r7
   222a4:	mov	r0, r9
   222a8:	bl	22020 <_obstack_memory_used@@Base+0x2b94>
   222ac:	str	r4, [sl]
   222b0:	add	sp, sp, #12
   222b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222b8:	cmp	r7, #0
   222bc:	blt	22354 <_obstack_memory_used@@Base+0x2ec8>
   222c0:	beq	221e0 <_obstack_memory_used@@Base+0x2d54>
   222c4:	cmp	r4, #0
   222c8:	blt	22390 <_obstack_memory_used@@Base+0x2f04>
   222cc:	mov	r1, r7
   222d0:	mvn	r0, #-2147483648	; 0x80000000
   222d4:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   222d8:	cmp	r0, r4
   222dc:	movge	r0, #0
   222e0:	movlt	r0, #1
   222e4:	cmp	r0, #0
   222e8:	mvnne	r2, #-2147483648	; 0x80000000
   222ec:	bne	221e4 <_obstack_memory_used@@Base+0x2d58>
   222f0:	mul	r1, r7, r4
   222f4:	cmp	r1, #63	; 0x3f
   222f8:	bgt	22210 <_obstack_memory_used@@Base+0x2d84>
   222fc:	b	221e0 <_obstack_memory_used@@Base+0x2d54>
   22300:	rsb	r3, r4, #-2147483648	; 0x80000000
   22304:	cmp	r6, r3
   22308:	movge	r3, #0
   2230c:	movlt	r3, #1
   22310:	b	221ac <_obstack_memory_used@@Base+0x2d20>
   22314:	rsb	r3, r5, #-2147483648	; 0x80000000
   22318:	cmp	r6, r3
   2231c:	movge	r3, #0
   22320:	movlt	r3, #1
   22324:	b	22248 <_obstack_memory_used@@Base+0x2dbc>
   22328:	cmp	r5, #0
   2232c:	blt	223b4 <_obstack_memory_used@@Base+0x2f28>
   22330:	cmn	r7, #1
   22334:	beq	222a0 <_obstack_memory_used@@Base+0x2e14>
   22338:	mov	r1, r7
   2233c:	mov	r0, #-2147483648	; 0x80000000
   22340:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   22344:	cmp	r5, r0
   22348:	movle	r0, #0
   2234c:	movgt	r0, #1
   22350:	b	22298 <_obstack_memory_used@@Base+0x2e0c>
   22354:	cmp	r4, #0
   22358:	blt	223f4 <_obstack_memory_used@@Base+0x2f68>
   2235c:	cmn	r7, #1
   22360:	beq	222f0 <_obstack_memory_used@@Base+0x2e64>
   22364:	mov	r1, r7
   22368:	mov	r0, #-2147483648	; 0x80000000
   2236c:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   22370:	cmp	r0, r4
   22374:	movge	r0, #0
   22378:	movlt	r0, #1
   2237c:	b	222e4 <_obstack_memory_used@@Base+0x2e58>
   22380:	mov	r4, fp
   22384:	b	222cc <_obstack_memory_used@@Base+0x2e40>
   22388:	mov	r4, fp
   2238c:	b	2235c <_obstack_memory_used@@Base+0x2ed0>
   22390:	cmn	r4, #1
   22394:	beq	222f0 <_obstack_memory_used@@Base+0x2e64>
   22398:	mov	r1, r4
   2239c:	mov	r0, #-2147483648	; 0x80000000
   223a0:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   223a4:	cmp	r7, r0
   223a8:	movle	r0, #0
   223ac:	movgt	r0, #1
   223b0:	b	222e4 <_obstack_memory_used@@Base+0x2e58>
   223b4:	mov	r1, r7
   223b8:	mvn	r0, #-2147483648	; 0x80000000
   223bc:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   223c0:	cmp	r5, r0
   223c4:	movge	r0, #0
   223c8:	movlt	r0, #1
   223cc:	b	22298 <_obstack_memory_used@@Base+0x2e0c>
   223d0:	cmn	r5, #1
   223d4:	beq	222a0 <_obstack_memory_used@@Base+0x2e14>
   223d8:	mov	r1, r5
   223dc:	mov	r0, #-2147483648	; 0x80000000
   223e0:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   223e4:	cmp	r7, r0
   223e8:	movle	r0, #0
   223ec:	movgt	r0, #1
   223f0:	b	22298 <_obstack_memory_used@@Base+0x2e0c>
   223f4:	mov	r1, r7
   223f8:	mvn	r0, #-2147483648	; 0x80000000
   223fc:	bl	23448 <_obstack_memory_used@@Base+0x3fbc>
   22400:	cmp	r0, r4
   22404:	movle	r0, #0
   22408:	movgt	r0, #1
   2240c:	b	222e4 <_obstack_memory_used@@Base+0x2e58>
   22410:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   22414:	push	{r4, lr}
   22418:	mov	r1, #1
   2241c:	bl	22e94 <_obstack_memory_used@@Base+0x3a08>
   22420:	cmp	r0, #0
   22424:	popne	{r4, pc}
   22428:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   2242c:	push	{r4, lr}
   22430:	mov	r1, #1
   22434:	bl	22e94 <_obstack_memory_used@@Base+0x3a08>
   22438:	cmp	r0, #0
   2243c:	popne	{r4, pc}
   22440:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   22444:	push	{r4, lr}
   22448:	bl	22e94 <_obstack_memory_used@@Base+0x3a08>
   2244c:	cmp	r0, #0
   22450:	popne	{r4, pc}
   22454:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   22458:	push	{r4, lr}
   2245c:	bl	22e94 <_obstack_memory_used@@Base+0x3a08>
   22460:	cmp	r0, #0
   22464:	popne	{r4, pc}
   22468:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   2246c:	push	{r4, r5, r6, lr}
   22470:	mov	r6, r0
   22474:	mov	r0, r1
   22478:	mov	r4, r1
   2247c:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   22480:	subs	r5, r0, #0
   22484:	beq	2249c <_obstack_memory_used@@Base+0x3010>
   22488:	mov	r2, r4
   2248c:	mov	r1, r6
   22490:	bl	11930 <memcpy@plt>
   22494:	mov	r0, r5
   22498:	pop	{r4, r5, r6, pc}
   2249c:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   224a0:	push	{r4, r5, r6, lr}
   224a4:	mov	r6, r0
   224a8:	mov	r0, r1
   224ac:	mov	r4, r1
   224b0:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   224b4:	subs	r5, r0, #0
   224b8:	beq	224d0 <_obstack_memory_used@@Base+0x3044>
   224bc:	mov	r2, r4
   224c0:	mov	r1, r6
   224c4:	bl	11930 <memcpy@plt>
   224c8:	mov	r0, r5
   224cc:	pop	{r4, r5, r6, pc}
   224d0:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   224d4:	push	{r4, r5, r6, lr}
   224d8:	mov	r6, r0
   224dc:	add	r0, r1, #1
   224e0:	mov	r4, r1
   224e4:	bl	22edc <_obstack_memory_used@@Base+0x3a50>
   224e8:	subs	r5, r0, #0
   224ec:	beq	2250c <_obstack_memory_used@@Base+0x3080>
   224f0:	mov	r3, #0
   224f4:	mov	r1, r6
   224f8:	strb	r3, [r5, r4]
   224fc:	mov	r2, r4
   22500:	bl	11930 <memcpy@plt>
   22504:	mov	r0, r5
   22508:	pop	{r4, r5, r6, pc}
   2250c:	bl	2252c <_obstack_memory_used@@Base+0x30a0>
   22510:	push	{r4, lr}
   22514:	mov	r4, r0
   22518:	bl	11b94 <strlen@plt>
   2251c:	add	r1, r0, #1
   22520:	mov	r0, r4
   22524:	pop	{r4, lr}
   22528:	b	2246c <_obstack_memory_used@@Base+0x2fe0>
   2252c:	ldr	r3, [pc, #44]	; 22560 <_obstack_memory_used@@Base+0x30d4>
   22530:	push	{r4, lr}
   22534:	mov	r2, #5
   22538:	ldr	r1, [pc, #36]	; 22564 <_obstack_memory_used@@Base+0x30d8>
   2253c:	mov	r0, #0
   22540:	ldr	r4, [r3]
   22544:	bl	11984 <dcgettext@plt>
   22548:	ldr	r2, [pc, #24]	; 22568 <_obstack_memory_used@@Base+0x30dc>
   2254c:	mov	r1, #0
   22550:	mov	r3, r0
   22554:	mov	r0, r4
   22558:	bl	11a8c <error@plt>
   2255c:	bl	11d2c <abort@plt>
   22560:	andeq	r9, r3, r4, asr #5
   22564:	andeq	r7, r2, ip, lsr #30
   22568:	andeq	r7, r2, ip, lsl #13
   2256c:	push	{r4, r5, r6, r7, lr}
   22570:	sub	sp, sp, #20
   22574:	mov	r6, r2
   22578:	ldr	ip, [sp, #48]	; 0x30
   2257c:	mov	r2, r1
   22580:	mov	r7, r3
   22584:	str	ip, [sp]
   22588:	add	r3, sp, #8
   2258c:	mov	r1, #0
   22590:	mov	r5, r0
   22594:	ldr	r4, [sp, #56]	; 0x38
   22598:	bl	228ec <_obstack_memory_used@@Base+0x3460>
   2259c:	cmp	r0, #0
   225a0:	bne	22624 <_obstack_memory_used@@Base+0x3198>
   225a4:	ldrd	r0, [sp, #8]
   225a8:	cmp	r1, r7
   225ac:	cmpeq	r0, r6
   225b0:	ldrd	r6, [sp, #40]	; 0x28
   225b4:	movcc	r3, #1
   225b8:	movcs	r3, #0
   225bc:	cmp	r1, r7
   225c0:	cmpeq	r0, r6
   225c4:	orrhi	r3, r3, #1
   225c8:	cmp	r3, #0
   225cc:	beq	2261c <_obstack_memory_used@@Base+0x3190>
   225d0:	mov	r3, #0
   225d4:	mvn	r2, #-1073741824	; 0xc0000000
   225d8:	cmp	r1, r3
   225dc:	cmpeq	r0, r2
   225e0:	bhi	22650 <_obstack_memory_used@@Base+0x31c4>
   225e4:	bl	11bb8 <__errno_location@plt>
   225e8:	mov	r3, #34	; 0x22
   225ec:	mov	r6, r3
   225f0:	str	r3, [r0]
   225f4:	cmp	r4, #0
   225f8:	moveq	r4, #1
   225fc:	mov	r0, r5
   22600:	bl	21380 <_obstack_memory_used@@Base+0x1ef4>
   22604:	mov	r1, r6
   22608:	ldr	r3, [sp, #52]	; 0x34
   2260c:	ldr	r2, [pc, #144]	; 226a4 <_obstack_memory_used@@Base+0x3218>
   22610:	str	r0, [sp]
   22614:	mov	r0, r4
   22618:	bl	11a8c <error@plt>
   2261c:	add	sp, sp, #20
   22620:	pop	{r4, r5, r6, r7, pc}
   22624:	cmp	r0, #1
   22628:	beq	22664 <_obstack_memory_used@@Base+0x31d8>
   2262c:	cmp	r0, #3
   22630:	beq	22694 <_obstack_memory_used@@Base+0x3208>
   22634:	cmp	r4, #0
   22638:	beq	22684 <_obstack_memory_used@@Base+0x31f8>
   2263c:	bl	11bb8 <__errno_location@plt>
   22640:	ldr	r6, [r0]
   22644:	cmp	r6, #22
   22648:	moveq	r6, #0
   2264c:	b	225fc <_obstack_memory_used@@Base+0x3170>
   22650:	bl	11bb8 <__errno_location@plt>
   22654:	mov	r3, #75	; 0x4b
   22658:	mov	r6, r3
   2265c:	str	r3, [r0]
   22660:	b	225f4 <_obstack_memory_used@@Base+0x3168>
   22664:	bl	11bb8 <__errno_location@plt>
   22668:	mov	r3, #75	; 0x4b
   2266c:	mov	r6, r3
   22670:	str	r3, [r0]
   22674:	cmp	r4, #0
   22678:	moveq	r4, #1
   2267c:	bne	22644 <_obstack_memory_used@@Base+0x31b8>
   22680:	b	225fc <_obstack_memory_used@@Base+0x3170>
   22684:	bl	11bb8 <__errno_location@plt>
   22688:	mov	r4, #1
   2268c:	ldr	r6, [r0]
   22690:	b	22644 <_obstack_memory_used@@Base+0x31b8>
   22694:	bl	11bb8 <__errno_location@plt>
   22698:	mov	r6, #0
   2269c:	str	r6, [r0]
   226a0:	b	22674 <_obstack_memory_used@@Base+0x31e8>
   226a4:	muleq	r2, r0, r5
   226a8:	push	{r4, r5}
   226ac:	mov	r1, #10
   226b0:	pop	{r4, r5}
   226b4:	b	2256c <_obstack_memory_used@@Base+0x30e0>
   226b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226bc:	sub	sp, sp, #116	; 0x74
   226c0:	mov	r4, #100	; 0x64
   226c4:	str	r4, [sp, #8]
   226c8:	bl	11bb8 <__errno_location@plt>
   226cc:	mov	r7, #0
   226d0:	mov	r5, r7
   226d4:	add	fp, sp, #12
   226d8:	mov	r8, #1
   226dc:	mvn	sl, #0
   226e0:	mov	r6, r0
   226e4:	b	226fc <_obstack_memory_used@@Base+0x3270>
   226e8:	str	r8, [sp]
   226ec:	bl	22170 <_obstack_memory_used@@Base+0x2ce4>
   226f0:	ldr	r4, [sp, #8]
   226f4:	mov	fp, r0
   226f8:	mov	r7, r0
   226fc:	sub	r4, r4, #1
   22700:	mov	r1, r4
   22704:	strb	r5, [fp, r4]
   22708:	mov	r0, fp
   2270c:	str	r5, [r6]
   22710:	bl	11a98 <gethostname@plt>
   22714:	subs	r9, r0, #0
   22718:	mov	r0, fp
   2271c:	bne	22734 <_obstack_memory_used@@Base+0x32a8>
   22720:	bl	11b94 <strlen@plt>
   22724:	add	r0, r0, #1
   22728:	cmp	r4, r0
   2272c:	bgt	22784 <_obstack_memory_used@@Base+0x32f8>
   22730:	str	r9, [r6]
   22734:	mov	r0, r7
   22738:	bl	1ad20 <__assert_fail@plt+0x8fac>
   2273c:	ldr	ip, [r6]
   22740:	mov	r3, r8
   22744:	cmp	ip, #22
   22748:	mov	r2, #1
   2274c:	ldrls	r3, [pc, #76]	; 227a0 <_obstack_memory_used@@Base+0x3314>
   22750:	add	r1, sp, #8
   22754:	mov	r0, r5
   22758:	mvnls	r3, r3, lsr ip
   2275c:	cmp	ip, #36	; 0x24
   22760:	moveq	ip, #0
   22764:	andne	ip, r3, #1
   22768:	cmp	ip, #0
   2276c:	mov	r3, sl
   22770:	beq	226e8 <_obstack_memory_used@@Base+0x325c>
   22774:	mov	r7, #0
   22778:	mov	r0, r7
   2277c:	add	sp, sp, #116	; 0x74
   22780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22784:	cmp	r7, #0
   22788:	bne	22778 <_obstack_memory_used@@Base+0x32ec>
   2278c:	mov	r1, r0
   22790:	mov	r0, fp
   22794:	bl	224a0 <_obstack_memory_used@@Base+0x3014>
   22798:	mov	r7, r0
   2279c:	b	22778 <_obstack_memory_used@@Base+0x32ec>
   227a0:	subeq	r1, r0, r1
   227a4:	ldr	ip, [pc, #148]	; 22840 <_obstack_memory_used@@Base+0x33b4>
   227a8:	sub	r0, r0, #1
   227ac:	push	{lr}		; (str lr, [sp, #-4]!)
   227b0:	sub	sp, sp, #20
   227b4:	ldr	r5, [ip]
   227b8:	cmp	r0, #3
   227bc:	ldrls	pc, [pc, r0, lsl #2]
   227c0:	b	2282c <_obstack_memory_used@@Base+0x33a0>
   227c4:	andeq	r2, r2, r8, lsr r8
   227c8:	andeq	r2, r2, r0, lsr r8
   227cc:	andeq	r2, r2, r0, lsr r8
   227d0:	ldrdeq	r2, [r2], -r4
   227d4:	ldr	r0, [pc, #104]	; 22844 <_obstack_memory_used@@Base+0x33b8>
   227d8:	cmp	r1, #0
   227dc:	movlt	r3, #0
   227e0:	ldrlt	r4, [pc, #96]	; 22848 <_obstack_memory_used@@Base+0x33bc>
   227e4:	ldrge	r6, [r3, r1, lsl #4]
   227e8:	sublt	r4, r4, r1
   227ec:	strblt	r2, [sp, #12]
   227f0:	mov	r1, r0
   227f4:	mov	r2, #5
   227f8:	mov	r0, #0
   227fc:	strblt	r3, [sp, #13]
   22800:	addlt	r6, sp, #12
   22804:	ldrge	r4, [pc, #60]	; 22848 <_obstack_memory_used@@Base+0x33bc>
   22808:	bl	11984 <dcgettext@plt>
   2280c:	ldr	r3, [sp, #24]
   22810:	str	r6, [sp]
   22814:	str	r3, [sp, #4]
   22818:	mov	r1, #0
   2281c:	mov	r3, r4
   22820:	mov	r2, r0
   22824:	mov	r0, r5
   22828:	bl	11a8c <error@plt>
   2282c:	bl	11d2c <abort@plt>
   22830:	ldr	r0, [pc, #20]	; 2284c <_obstack_memory_used@@Base+0x33c0>
   22834:	b	227d8 <_obstack_memory_used@@Base+0x334c>
   22838:	ldr	r0, [pc, #16]	; 22850 <_obstack_memory_used@@Base+0x33c4>
   2283c:	b	227d8 <_obstack_memory_used@@Base+0x334c>
   22840:	andeq	r9, r3, r4, asr #5
   22844:	andeq	r8, r2, ip, asr r3
   22848:	andeq	r8, r2, r0, asr #7
   2284c:	andeq	r8, r2, r8, ror r3
   22850:	andeq	r8, r2, r0, lsr #7
   22854:	push	{r4, r5, r6, r7, r8, lr}
   22858:	subs	r5, r1, #0
   2285c:	mov	r4, r0
   22860:	blt	228d4 <_obstack_memory_used@@Base+0x3448>
   22864:	moveq	r6, #0
   22868:	moveq	r7, #0
   2286c:	bne	22894 <_obstack_memory_used@@Base+0x3408>
   22870:	ldr	r2, [r4]
   22874:	ldr	r1, [r4, #4]
   22878:	mov	r0, #0
   2287c:	mul	ip, r2, r7
   22880:	umull	r2, r3, r2, r5
   22884:	mla	r5, r5, r1, ip
   22888:	add	r3, r5, r3
   2288c:	strd	r2, [r4]
   22890:	pop	{r4, r5, r6, r7, r8, pc}
   22894:	asr	r7, r5, #31
   22898:	mov	r2, r5
   2289c:	mov	r3, r7
   228a0:	mvn	r0, #0
   228a4:	mvn	r1, #0
   228a8:	bl	23b14 <_obstack_memory_used@@Base+0x4688>
   228ac:	ldrd	r2, [r4]
   228b0:	mov	r6, r5
   228b4:	cmp	r1, r3
   228b8:	cmpeq	r0, r2
   228bc:	bcs	22870 <_obstack_memory_used@@Base+0x33e4>
   228c0:	mvn	r2, #0
   228c4:	mvn	r3, #0
   228c8:	mov	r0, #1
   228cc:	strd	r2, [r4]
   228d0:	pop	{r4, r5, r6, r7, r8, pc}
   228d4:	ldrd	r2, [r0]
   228d8:	orrs	r3, r2, r3
   228dc:	moveq	r6, r5
   228e0:	asreq	r7, r6, #31
   228e4:	bne	228c0 <_obstack_memory_used@@Base+0x3434>
   228e8:	b	22870 <_obstack_memory_used@@Base+0x33e4>
   228ec:	cmp	r2, #36	; 0x24
   228f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228f4:	sub	sp, sp, #20
   228f8:	bhi	22e6c <_obstack_memory_used@@Base+0x39e0>
   228fc:	cmp	r1, #0
   22900:	mov	r8, r2
   22904:	mov	r7, r0
   22908:	mov	r5, r1
   2290c:	mov	r6, r3
   22910:	addeq	r5, sp, #4
   22914:	bl	11bb8 <__errno_location@plt>
   22918:	mov	r3, #0
   2291c:	str	r3, [r0]
   22920:	mov	r9, r0
   22924:	bl	11b58 <__ctype_b_loc@plt>
   22928:	ldrb	r3, [r7]
   2292c:	mov	r2, r7
   22930:	ldr	r0, [r0]
   22934:	b	2293c <_obstack_memory_used@@Base+0x34b0>
   22938:	ldrb	r3, [r2, #1]!
   2293c:	lsl	r1, r3, #1
   22940:	ldrh	r4, [r0, r1]
   22944:	ands	r4, r4, #8192	; 0x2000
   22948:	bne	22938 <_obstack_memory_used@@Base+0x34ac>
   2294c:	cmp	r3, #45	; 0x2d
   22950:	bne	22964 <_obstack_memory_used@@Base+0x34d8>
   22954:	mov	r4, #4
   22958:	mov	r0, r4
   2295c:	add	sp, sp, #20
   22960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22964:	mov	r2, r8
   22968:	mov	r3, r4
   2296c:	mov	r1, r5
   22970:	mov	r0, r7
   22974:	bl	1193c <__strtoull_internal@plt>
   22978:	ldr	r8, [r5]
   2297c:	cmp	r7, r8
   22980:	mov	r2, r0
   22984:	str	r0, [sp, #8]
   22988:	str	r1, [sp, #12]
   2298c:	beq	229d8 <_obstack_memory_used@@Base+0x354c>
   22990:	ldr	r4, [r9]
   22994:	cmp	r4, #0
   22998:	bne	229c8 <_obstack_memory_used@@Base+0x353c>
   2299c:	ldr	r3, [sp, #56]	; 0x38
   229a0:	cmp	r3, #0
   229a4:	beq	229b4 <_obstack_memory_used@@Base+0x3528>
   229a8:	ldrb	r9, [r8]
   229ac:	cmp	r9, #0
   229b0:	bne	22a10 <_obstack_memory_used@@Base+0x3584>
   229b4:	mov	r0, r4
   229b8:	str	r2, [r6]
   229bc:	str	r1, [r6, #4]
   229c0:	add	sp, sp, #20
   229c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229c8:	cmp	r4, #34	; 0x22
   229cc:	bne	22954 <_obstack_memory_used@@Base+0x34c8>
   229d0:	mov	r4, #1
   229d4:	b	2299c <_obstack_memory_used@@Base+0x3510>
   229d8:	ldr	r3, [sp, #56]	; 0x38
   229dc:	cmp	r3, #0
   229e0:	beq	22954 <_obstack_memory_used@@Base+0x34c8>
   229e4:	ldrb	r1, [r8]
   229e8:	cmp	r1, #0
   229ec:	beq	22954 <_obstack_memory_used@@Base+0x34c8>
   229f0:	mov	r0, r3
   229f4:	bl	11ba0 <strchr@plt>
   229f8:	cmp	r0, #0
   229fc:	beq	22954 <_obstack_memory_used@@Base+0x34c8>
   22a00:	ldrb	r9, [r8]
   22a04:	mov	r2, #1
   22a08:	mov	r3, #0
   22a0c:	strd	r2, [sp, #8]
   22a10:	mov	r1, r9
   22a14:	ldr	r0, [sp, #56]	; 0x38
   22a18:	bl	11ba0 <strchr@plt>
   22a1c:	cmp	r0, #0
   22a20:	beq	22e28 <_obstack_memory_used@@Base+0x399c>
   22a24:	sub	r3, r9, #69	; 0x45
   22a28:	cmp	r3, #47	; 0x2f
   22a2c:	ldrls	pc, [pc, r3, lsl #2]
   22a30:	b	22af4 <_obstack_memory_used@@Base+0x3668>
   22a34:	andeq	r2, r2, r4, ror #23
   22a38:	strdeq	r2, [r2], -r4
   22a3c:	andeq	r2, r2, r4, ror #23
   22a40:	strdeq	r2, [r2], -r4
   22a44:	strdeq	r2, [r2], -r4
   22a48:	strdeq	r2, [r2], -r4
   22a4c:	andeq	r2, r2, r4, ror #23
   22a50:	strdeq	r2, [r2], -r4
   22a54:	andeq	r2, r2, r4, ror #23
   22a58:	strdeq	r2, [r2], -r4
   22a5c:	strdeq	r2, [r2], -r4
   22a60:	andeq	r2, r2, r4, ror #23
   22a64:	strdeq	r2, [r2], -r4
   22a68:	strdeq	r2, [r2], -r4
   22a6c:	strdeq	r2, [r2], -r4
   22a70:	andeq	r2, r2, r4, ror #23
   22a74:	strdeq	r2, [r2], -r4
   22a78:	strdeq	r2, [r2], -r4
   22a7c:	strdeq	r2, [r2], -r4
   22a80:	strdeq	r2, [r2], -r4
   22a84:	andeq	r2, r2, r4, ror #23
   22a88:	andeq	r2, r2, r4, ror #23
   22a8c:	strdeq	r2, [r2], -r4
   22a90:	strdeq	r2, [r2], -r4
   22a94:	strdeq	r2, [r2], -r4
   22a98:	strdeq	r2, [r2], -r4
   22a9c:	strdeq	r2, [r2], -r4
   22aa0:	strdeq	r2, [r2], -r4
   22aa4:	strdeq	r2, [r2], -r4
   22aa8:	strdeq	r2, [r2], -r4
   22aac:	strdeq	r2, [r2], -r4
   22ab0:	strdeq	r2, [r2], -r4
   22ab4:	strdeq	r2, [r2], -r4
   22ab8:	strdeq	r2, [r2], -r4
   22abc:	andeq	r2, r2, r4, ror #23
   22ac0:	strdeq	r2, [r2], -r4
   22ac4:	strdeq	r2, [r2], -r4
   22ac8:	strdeq	r2, [r2], -r4
   22acc:	andeq	r2, r2, r4, ror #23
   22ad0:	strdeq	r2, [r2], -r4
   22ad4:	andeq	r2, r2, r4, ror #23
   22ad8:	strdeq	r2, [r2], -r4
   22adc:	strdeq	r2, [r2], -r4
   22ae0:	strdeq	r2, [r2], -r4
   22ae4:	strdeq	r2, [r2], -r4
   22ae8:	strdeq	r2, [r2], -r4
   22aec:	strdeq	r2, [r2], -r4
   22af0:	andeq	r2, r2, r4, ror #23
   22af4:	mov	r7, #1
   22af8:	mov	sl, #1024	; 0x400
   22afc:	sub	r9, r9, #66	; 0x42
   22b00:	cmp	r9, #53	; 0x35
   22b04:	ldrls	pc, [pc, r9, lsl #2]
   22b08:	b	22e28 <_obstack_memory_used@@Base+0x399c>
   22b0c:	andeq	r2, r2, r4, ror sp
   22b10:	andeq	r2, r2, r8, lsr #28
   22b14:	andeq	r2, r2, r8, lsr #28
   22b18:	andeq	r2, r2, ip, asr #26
   22b1c:	andeq	r2, r2, r8, lsr #28
   22b20:	andeq	r2, r2, r4, lsr #26
   22b24:	andeq	r2, r2, r8, lsr #28
   22b28:	andeq	r2, r2, r8, lsr #28
   22b2c:	andeq	r2, r2, r8, lsr #28
   22b30:	andeq	r2, r2, r4, lsl #26
   22b34:	andeq	r2, r2, r8, lsr #28
   22b38:	ldrdeq	r2, [r2], -r0
   22b3c:	andeq	r2, r2, r8, lsr #28
   22b40:	andeq	r2, r2, r8, lsr #28
   22b44:	andeq	r2, r2, r8, lsr #27
   22b48:	andeq	r2, r2, r8, lsr #28
   22b4c:	andeq	r2, r2, r8, lsr #28
   22b50:	andeq	r2, r2, r8, lsr #28
   22b54:	andeq	r2, r2, r0, lsl #28
   22b58:	andeq	r2, r2, r8, lsr #28
   22b5c:	andeq	r2, r2, r8, lsr #28
   22b60:	andeq	r2, r2, r8, lsr #28
   22b64:	andeq	r2, r2, r8, lsr #28
   22b68:	ldrdeq	r2, [r2], -ip
   22b6c:	andeq	r2, r2, r8, lsr #25
   22b70:	andeq	r2, r2, r8, lsr #28
   22b74:	andeq	r2, r2, r8, lsr #28
   22b78:	andeq	r2, r2, r8, lsr #28
   22b7c:	andeq	r2, r2, r8, lsr #28
   22b80:	andeq	r2, r2, r8, lsr #28
   22b84:	andeq	r2, r2, r8, lsr #28
   22b88:	andeq	r2, r2, r8, lsr #28
   22b8c:	andeq	r2, r2, r4, ror ip
   22b90:	andeq	r2, r2, r4, ror #24
   22b94:	andeq	r2, r2, r8, lsr #28
   22b98:	andeq	r2, r2, r8, lsr #28
   22b9c:	andeq	r2, r2, r8, lsr #28
   22ba0:	andeq	r2, r2, r4, lsr #26
   22ba4:	andeq	r2, r2, r8, lsr #28
   22ba8:	andeq	r2, r2, r8, lsr #28
   22bac:	andeq	r2, r2, r8, lsr #28
   22bb0:	andeq	r2, r2, r4, lsl #26
   22bb4:	andeq	r2, r2, r8, lsr #28
   22bb8:	ldrdeq	r2, [r2], -r0
   22bbc:	andeq	r2, r2, r8, lsr #28
   22bc0:	andeq	r2, r2, r8, lsr #28
   22bc4:	andeq	r2, r2, r8, lsr #28
   22bc8:	andeq	r2, r2, r8, lsr #28
   22bcc:	andeq	r2, r2, r8, lsr #28
   22bd0:	andeq	r2, r2, r8, lsr #28
   22bd4:	andeq	r2, r2, r0, lsl #28
   22bd8:	andeq	r2, r2, r8, lsr #28
   22bdc:	andeq	r2, r2, r8, lsr #28
   22be0:	andeq	r2, r2, r0, lsr #24
   22be4:	mov	r1, #48	; 0x30
   22be8:	ldr	r0, [sp, #56]	; 0x38
   22bec:	bl	11ba0 <strchr@plt>
   22bf0:	cmp	r0, #0
   22bf4:	beq	22af4 <_obstack_memory_used@@Base+0x3668>
   22bf8:	ldrb	r3, [r8, #1]
   22bfc:	cmp	r3, #68	; 0x44
   22c00:	beq	22c14 <_obstack_memory_used@@Base+0x3788>
   22c04:	cmp	r3, #105	; 0x69
   22c08:	beq	22e38 <_obstack_memory_used@@Base+0x39ac>
   22c0c:	cmp	r3, #66	; 0x42
   22c10:	bne	22af4 <_obstack_memory_used@@Base+0x3668>
   22c14:	mov	r7, #2
   22c18:	mov	sl, #1000	; 0x3e8
   22c1c:	b	22afc <_obstack_memory_used@@Base+0x3670>
   22c20:	ldrd	r2, [sp, #8]
   22c24:	cmp	r2, #0
   22c28:	sbcs	r1, r3, #0
   22c2c:	blt	22e50 <_obstack_memory_used@@Base+0x39c4>
   22c30:	adds	r2, r2, r2
   22c34:	adc	r3, r3, r3
   22c38:	mov	r1, r3
   22c3c:	mov	r9, #0
   22c40:	str	r2, [sp, #8]
   22c44:	str	r3, [sp, #12]
   22c48:	add	r3, r8, r7
   22c4c:	str	r3, [r5]
   22c50:	ldrb	r3, [r8, r7]
   22c54:	orr	r4, r4, r9
   22c58:	cmp	r3, #0
   22c5c:	orrne	r4, r4, #2
   22c60:	b	229b4 <_obstack_memory_used@@Base+0x3528>
   22c64:	ldr	r2, [sp, #8]
   22c68:	ldr	r1, [sp, #12]
   22c6c:	mov	r9, #0
   22c70:	b	22c48 <_obstack_memory_used@@Base+0x37bc>
   22c74:	ldrd	r2, [sp, #8]
   22c78:	ldr	r1, [pc, #512]	; 22e80 <_obstack_memory_used@@Base+0x39f4>
   22c7c:	mvn	r0, #0
   22c80:	cmp	r3, r1
   22c84:	cmpeq	r2, r0
   22c88:	bhi	22e50 <_obstack_memory_used@@Base+0x39c4>
   22c8c:	lsl	r1, r3, #9
   22c90:	orr	r1, r1, r2, lsr #23
   22c94:	lsl	r2, r2, #9
   22c98:	str	r1, [sp, #12]
   22c9c:	str	r2, [sp, #8]
   22ca0:	mov	r9, #0
   22ca4:	b	22c48 <_obstack_memory_used@@Base+0x37bc>
   22ca8:	mov	fp, #7
   22cac:	mov	r9, #0
   22cb0:	add	r8, sp, #8
   22cb4:	mov	r1, sl
   22cb8:	mov	r0, r8
   22cbc:	bl	22854 <_obstack_memory_used@@Base+0x33c8>
   22cc0:	subs	fp, fp, #1
   22cc4:	orr	r9, r9, r0
   22cc8:	bne	22cb4 <_obstack_memory_used@@Base+0x3828>
   22ccc:	ldr	r8, [r5]
   22cd0:	ldr	r2, [sp, #8]
   22cd4:	ldr	r1, [sp, #12]
   22cd8:	b	22c48 <_obstack_memory_used@@Base+0x37bc>
   22cdc:	mov	fp, #8
   22ce0:	mov	r9, #0
   22ce4:	add	r8, sp, fp
   22ce8:	mov	r1, sl
   22cec:	mov	r0, r8
   22cf0:	bl	22854 <_obstack_memory_used@@Base+0x33c8>
   22cf4:	subs	fp, fp, #1
   22cf8:	orr	r9, r9, r0
   22cfc:	bne	22ce8 <_obstack_memory_used@@Base+0x385c>
   22d00:	b	22ccc <_obstack_memory_used@@Base+0x3840>
   22d04:	mov	r1, sl
   22d08:	add	r0, sp, #8
   22d0c:	bl	22854 <_obstack_memory_used@@Base+0x33c8>
   22d10:	ldr	r8, [r5]
   22d14:	ldr	r2, [sp, #8]
   22d18:	ldr	r1, [sp, #12]
   22d1c:	mov	r9, r0
   22d20:	b	22c48 <_obstack_memory_used@@Base+0x37bc>
   22d24:	mov	fp, #3
   22d28:	mov	r9, #0
   22d2c:	add	r8, sp, #8
   22d30:	mov	r1, sl
   22d34:	mov	r0, r8
   22d38:	bl	22854 <_obstack_memory_used@@Base+0x33c8>
   22d3c:	subs	fp, fp, #1
   22d40:	orr	r9, r9, r0
   22d44:	bne	22d30 <_obstack_memory_used@@Base+0x38a4>
   22d48:	b	22ccc <_obstack_memory_used@@Base+0x3840>
   22d4c:	mov	fp, #6
   22d50:	mov	r9, #0
   22d54:	add	r8, sp, #8
   22d58:	mov	r1, sl
   22d5c:	mov	r0, r8
   22d60:	bl	22854 <_obstack_memory_used@@Base+0x33c8>
   22d64:	subs	fp, fp, #1
   22d68:	orr	r9, r9, r0
   22d6c:	bne	22d58 <_obstack_memory_used@@Base+0x38cc>
   22d70:	b	22ccc <_obstack_memory_used@@Base+0x3840>
   22d74:	ldrd	r0, [sp, #8]
   22d78:	ldr	r3, [pc, #260]	; 22e84 <_obstack_memory_used@@Base+0x39f8>
   22d7c:	mvn	r2, #0
   22d80:	cmp	r1, r3
   22d84:	cmpeq	r0, r2
   22d88:	bhi	22e50 <_obstack_memory_used@@Base+0x39c4>
   22d8c:	lsl	r1, r1, #10
   22d90:	orr	r1, r1, r0, lsr #22
   22d94:	lsl	r2, r0, #10
   22d98:	str	r1, [sp, #12]
   22d9c:	str	r2, [sp, #8]
   22da0:	mov	r9, #0
   22da4:	b	22c48 <_obstack_memory_used@@Base+0x37bc>
   22da8:	mov	fp, #5
   22dac:	mov	r9, #0
   22db0:	add	r8, sp, #8
   22db4:	mov	r1, sl
   22db8:	mov	r0, r8
   22dbc:	bl	22854 <_obstack_memory_used@@Base+0x33c8>
   22dc0:	subs	fp, fp, #1
   22dc4:	orr	r9, r9, r0
   22dc8:	bne	22db4 <_obstack_memory_used@@Base+0x3928>
   22dcc:	b	22ccc <_obstack_memory_used@@Base+0x3840>
   22dd0:	mov	r1, sl
   22dd4:	add	r0, sp, #8
   22dd8:	bl	22854 <_obstack_memory_used@@Base+0x33c8>
   22ddc:	mov	r1, sl
   22de0:	mov	r9, r0
   22de4:	add	r0, sp, #8
   22de8:	bl	22854 <_obstack_memory_used@@Base+0x33c8>
   22dec:	ldr	r8, [r5]
   22df0:	ldr	r2, [sp, #8]
   22df4:	ldr	r1, [sp, #12]
   22df8:	orr	r9, r9, r0
   22dfc:	b	22c48 <_obstack_memory_used@@Base+0x37bc>
   22e00:	mov	fp, #4
   22e04:	mov	r9, #0
   22e08:	add	r8, sp, #8
   22e0c:	mov	r1, sl
   22e10:	mov	r0, r8
   22e14:	bl	22854 <_obstack_memory_used@@Base+0x33c8>
   22e18:	subs	fp, fp, #1
   22e1c:	orr	r9, r9, r0
   22e20:	bne	22e0c <_obstack_memory_used@@Base+0x3980>
   22e24:	b	22ccc <_obstack_memory_used@@Base+0x3840>
   22e28:	ldrd	r2, [sp, #8]
   22e2c:	orr	r4, r4, #2
   22e30:	strd	r2, [r6]
   22e34:	b	22958 <_obstack_memory_used@@Base+0x34cc>
   22e38:	ldrb	r7, [r8, #2]
   22e3c:	mov	sl, #1024	; 0x400
   22e40:	cmp	r7, #66	; 0x42
   22e44:	movne	r7, #1
   22e48:	moveq	r7, #3
   22e4c:	b	22afc <_obstack_memory_used@@Base+0x3670>
   22e50:	mvn	r1, #0
   22e54:	mvn	r0, #0
   22e58:	mvn	r2, #0
   22e5c:	strd	r0, [sp, #8]
   22e60:	mov	r9, #1
   22e64:	mov	r1, r2
   22e68:	b	22c48 <_obstack_memory_used@@Base+0x37bc>
   22e6c:	ldr	r3, [pc, #20]	; 22e88 <_obstack_memory_used@@Base+0x39fc>
   22e70:	mov	r2, #85	; 0x55
   22e74:	ldr	r1, [pc, #16]	; 22e8c <_obstack_memory_used@@Base+0x3a00>
   22e78:	ldr	r0, [pc, #16]	; 22e90 <_obstack_memory_used@@Base+0x3a04>
   22e7c:	bl	11d74 <__assert_fail@plt>
   22e80:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   22e84:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   22e88:	andeq	r8, r2, r4, asr #7
   22e8c:	ldrdeq	r8, [r2], -r0
   22e90:	andeq	r8, r2, r0, ror #7
   22e94:	cmp	r1, #0
   22e98:	cmpne	r0, #0
   22e9c:	moveq	r1, #1
   22ea0:	moveq	r0, r1
   22ea4:	umull	r2, r3, r0, r1
   22ea8:	adds	r3, r3, #0
   22eac:	movne	r3, #1
   22eb0:	cmp	r2, #0
   22eb4:	blt	22ec4 <_obstack_memory_used@@Base+0x3a38>
   22eb8:	cmp	r3, #0
   22ebc:	bne	22ec4 <_obstack_memory_used@@Base+0x3a38>
   22ec0:	b	11858 <calloc@plt>
   22ec4:	push	{r4, lr}
   22ec8:	bl	11bb8 <__errno_location@plt>
   22ecc:	mov	r3, #12
   22ed0:	str	r3, [r0]
   22ed4:	mov	r0, #0
   22ed8:	pop	{r4, pc}
   22edc:	cmp	r0, #0
   22ee0:	moveq	r0, #1
   22ee4:	cmp	r0, #0
   22ee8:	blt	22ef0 <_obstack_memory_used@@Base+0x3a64>
   22eec:	b	11ae0 <malloc@plt>
   22ef0:	push	{r4, lr}
   22ef4:	bl	11bb8 <__errno_location@plt>
   22ef8:	mov	r3, #12
   22efc:	str	r3, [r0]
   22f00:	mov	r0, #0
   22f04:	pop	{r4, pc}
   22f08:	cmp	r0, #0
   22f0c:	beq	22f30 <_obstack_memory_used@@Base+0x3aa4>
   22f10:	cmp	r1, #0
   22f14:	push	{lr}		; (str lr, [sp, #-4]!)
   22f18:	sub	sp, sp, #12
   22f1c:	beq	22f38 <_obstack_memory_used@@Base+0x3aac>
   22f20:	blt	22f50 <_obstack_memory_used@@Base+0x3ac4>
   22f24:	add	sp, sp, #12
   22f28:	pop	{lr}		; (ldr lr, [sp], #4)
   22f2c:	b	11990 <realloc@plt>
   22f30:	mov	r0, r1
   22f34:	b	22edc <_obstack_memory_used@@Base+0x3a50>
   22f38:	str	r1, [sp, #4]
   22f3c:	bl	1ad20 <__assert_fail@plt+0x8fac>
   22f40:	ldr	r3, [sp, #4]
   22f44:	mov	r0, r3
   22f48:	add	sp, sp, #12
   22f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   22f50:	bl	11bb8 <__errno_location@plt>
   22f54:	mov	r2, #12
   22f58:	mov	r3, #0
   22f5c:	str	r2, [r0]
   22f60:	b	22f44 <_obstack_memory_used@@Base+0x3ab8>
   22f64:	push	{r4, r5, r6, lr}
   22f68:	mov	r4, r0
   22f6c:	bl	11a68 <__fpending@plt>
   22f70:	ldr	r5, [r4]
   22f74:	and	r5, r5, #32
   22f78:	mov	r6, r0
   22f7c:	mov	r0, r4
   22f80:	bl	22fe0 <_obstack_memory_used@@Base+0x3b54>
   22f84:	cmp	r5, #0
   22f88:	mov	r4, r0
   22f8c:	bne	22fac <_obstack_memory_used@@Base+0x3b20>
   22f90:	cmp	r0, #0
   22f94:	beq	22fa4 <_obstack_memory_used@@Base+0x3b18>
   22f98:	cmp	r6, #0
   22f9c:	beq	22fc8 <_obstack_memory_used@@Base+0x3b3c>
   22fa0:	mvn	r4, #0
   22fa4:	mov	r0, r4
   22fa8:	pop	{r4, r5, r6, pc}
   22fac:	cmp	r0, #0
   22fb0:	bne	22fa0 <_obstack_memory_used@@Base+0x3b14>
   22fb4:	bl	11bb8 <__errno_location@plt>
   22fb8:	str	r4, [r0]
   22fbc:	mvn	r4, #0
   22fc0:	mov	r0, r4
   22fc4:	pop	{r4, r5, r6, pc}
   22fc8:	bl	11bb8 <__errno_location@plt>
   22fcc:	ldr	r4, [r0]
   22fd0:	subs	r4, r4, #9
   22fd4:	mvnne	r4, #0
   22fd8:	mov	r0, r4
   22fdc:	pop	{r4, r5, r6, pc}
   22fe0:	push	{r4, r5, lr}
   22fe4:	sub	sp, sp, #12
   22fe8:	mov	r4, r0
   22fec:	bl	11c0c <fileno@plt>
   22ff0:	cmp	r0, #0
   22ff4:	mov	r0, r4
   22ff8:	blt	23074 <_obstack_memory_used@@Base+0x3be8>
   22ffc:	bl	11b10 <__freading@plt>
   23000:	cmp	r0, #0
   23004:	bne	23040 <_obstack_memory_used@@Base+0x3bb4>
   23008:	mov	r0, r4
   2300c:	bl	23080 <_obstack_memory_used@@Base+0x3bf4>
   23010:	cmp	r0, #0
   23014:	beq	23070 <_obstack_memory_used@@Base+0x3be4>
   23018:	bl	11bb8 <__errno_location@plt>
   2301c:	mov	r5, r0
   23020:	mov	r0, r4
   23024:	ldr	r4, [r5]
   23028:	bl	11c24 <fclose@plt>
   2302c:	cmp	r4, #0
   23030:	mvnne	r0, #0
   23034:	strne	r4, [r5]
   23038:	add	sp, sp, #12
   2303c:	pop	{r4, r5, pc}
   23040:	mov	r0, r4
   23044:	bl	11c0c <fileno@plt>
   23048:	mov	r3, #1
   2304c:	str	r3, [sp]
   23050:	mov	r2, #0
   23054:	mov	r3, #0
   23058:	bl	11a44 <lseek64@plt>
   2305c:	mvn	r3, #0
   23060:	mvn	r2, #0
   23064:	cmp	r1, r3
   23068:	cmpeq	r0, r2
   2306c:	bne	23008 <_obstack_memory_used@@Base+0x3b7c>
   23070:	mov	r0, r4
   23074:	add	sp, sp, #12
   23078:	pop	{r4, r5, lr}
   2307c:	b	11c24 <fclose@plt>
   23080:	push	{r4, lr}
   23084:	subs	r4, r0, #0
   23088:	sub	sp, sp, #8
   2308c:	beq	230a8 <_obstack_memory_used@@Base+0x3c1c>
   23090:	bl	11b10 <__freading@plt>
   23094:	cmp	r0, #0
   23098:	beq	230a8 <_obstack_memory_used@@Base+0x3c1c>
   2309c:	ldr	r3, [r4]
   230a0:	tst	r3, #256	; 0x100
   230a4:	bne	230b8 <_obstack_memory_used@@Base+0x3c2c>
   230a8:	mov	r0, r4
   230ac:	add	sp, sp, #8
   230b0:	pop	{r4, lr}
   230b4:	b	118c4 <fflush@plt>
   230b8:	mov	r3, #1
   230bc:	str	r3, [sp]
   230c0:	mov	r2, #0
   230c4:	mov	r3, #0
   230c8:	mov	r0, r4
   230cc:	bl	230e0 <_obstack_memory_used@@Base+0x3c54>
   230d0:	mov	r0, r4
   230d4:	add	sp, sp, #8
   230d8:	pop	{r4, lr}
   230dc:	b	118c4 <fflush@plt>
   230e0:	push	{r4, r5, r6, r7, r8, lr}
   230e4:	sub	sp, sp, #8
   230e8:	ldmib	r0, {ip, lr}
   230ec:	mov	r4, r0
   230f0:	ldr	r5, [sp, #32]
   230f4:	cmp	lr, ip
   230f8:	beq	23110 <_obstack_memory_used@@Base+0x3c84>
   230fc:	str	r5, [sp, #32]
   23100:	mov	r0, r4
   23104:	add	sp, sp, #8
   23108:	pop	{r4, r5, r6, r7, r8, lr}
   2310c:	b	11c30 <fseeko64@plt>
   23110:	ldr	lr, [r0, #20]
   23114:	ldr	ip, [r0, #16]
   23118:	cmp	lr, ip
   2311c:	bne	230fc <_obstack_memory_used@@Base+0x3c70>
   23120:	ldr	r8, [r0, #36]	; 0x24
   23124:	cmp	r8, #0
   23128:	bne	230fc <_obstack_memory_used@@Base+0x3c70>
   2312c:	mov	r6, r2
   23130:	mov	r7, r3
   23134:	bl	11c0c <fileno@plt>
   23138:	mov	r2, r6
   2313c:	mov	r3, r7
   23140:	str	r5, [sp]
   23144:	bl	11a44 <lseek64@plt>
   23148:	mvn	r3, #0
   2314c:	mvn	r2, #0
   23150:	cmp	r1, r3
   23154:	cmpeq	r0, r2
   23158:	beq	23178 <_obstack_memory_used@@Base+0x3cec>
   2315c:	ldr	r3, [r4]
   23160:	strd	r0, [r4, #80]	; 0x50
   23164:	mov	r0, r8
   23168:	bic	r3, r3, #16
   2316c:	str	r3, [r4]
   23170:	add	sp, sp, #8
   23174:	pop	{r4, r5, r6, r7, r8, pc}
   23178:	mvn	r0, #0
   2317c:	b	23170 <_obstack_memory_used@@Base+0x3ce4>
   23180:	ldrb	r3, [r0]
   23184:	cmp	r3, #0
   23188:	beq	231b4 <_obstack_memory_used@@Base+0x3d28>
   2318c:	mov	r2, r0
   23190:	mov	r0, #0
   23194:	push	{r4, lr}
   23198:	add	r0, r3, r0, ror #23
   2319c:	ldrb	r3, [r2, #1]!
   231a0:	cmp	r3, #0
   231a4:	bne	23198 <_obstack_memory_used@@Base+0x3d0c>
   231a8:	bl	23428 <_obstack_memory_used@@Base+0x3f9c>
   231ac:	mov	r0, r1
   231b0:	pop	{r4, pc}
   231b4:	mov	r0, r3
   231b8:	bx	lr
   231bc:	push	{r4, lr}
   231c0:	mov	r0, #14
   231c4:	bl	11c90 <nl_langinfo@plt>
   231c8:	cmp	r0, #0
   231cc:	beq	231e4 <_obstack_memory_used@@Base+0x3d58>
   231d0:	ldrb	r2, [r0]
   231d4:	ldr	r3, [pc, #16]	; 231ec <_obstack_memory_used@@Base+0x3d60>
   231d8:	cmp	r2, #0
   231dc:	moveq	r0, r3
   231e0:	pop	{r4, pc}
   231e4:	ldr	r0, [pc]	; 231ec <_obstack_memory_used@@Base+0x3d60>
   231e8:	pop	{r4, pc}
   231ec:	andeq	r8, r2, r8, lsl #8
   231f0:	push	{r4, r5, r6, lr}
   231f4:	subs	r4, r2, #0
   231f8:	mov	r6, r0
   231fc:	mov	r5, r1
   23200:	beq	2322c <_obstack_memory_used@@Base+0x3da0>
   23204:	mov	r1, r4
   23208:	mvn	r0, #0
   2320c:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   23210:	cmp	r0, r5
   23214:	bcs	2322c <_obstack_memory_used@@Base+0x3da0>
   23218:	bl	11bb8 <__errno_location@plt>
   2321c:	mov	r3, #12
   23220:	str	r3, [r0]
   23224:	mov	r0, #0
   23228:	pop	{r4, r5, r6, pc}
   2322c:	mul	r1, r5, r4
   23230:	mov	r0, r6
   23234:	pop	{r4, r5, r6, lr}
   23238:	b	22f08 <_obstack_memory_used@@Base+0x3a7c>
   2323c:	subs	r2, r1, #1
   23240:	bxeq	lr
   23244:	bcc	2341c <_obstack_memory_used@@Base+0x3f90>
   23248:	cmp	r0, r1
   2324c:	bls	23400 <_obstack_memory_used@@Base+0x3f74>
   23250:	tst	r1, r2
   23254:	beq	2340c <_obstack_memory_used@@Base+0x3f80>
   23258:	clz	r3, r0
   2325c:	clz	r2, r1
   23260:	sub	r3, r2, r3
   23264:	rsbs	r3, r3, #31
   23268:	addne	r3, r3, r3, lsl #1
   2326c:	mov	r2, #0
   23270:	addne	pc, pc, r3, lsl #2
   23274:	nop			; (mov r0, r0)
   23278:	cmp	r0, r1, lsl #31
   2327c:	adc	r2, r2, r2
   23280:	subcs	r0, r0, r1, lsl #31
   23284:	cmp	r0, r1, lsl #30
   23288:	adc	r2, r2, r2
   2328c:	subcs	r0, r0, r1, lsl #30
   23290:	cmp	r0, r1, lsl #29
   23294:	adc	r2, r2, r2
   23298:	subcs	r0, r0, r1, lsl #29
   2329c:	cmp	r0, r1, lsl #28
   232a0:	adc	r2, r2, r2
   232a4:	subcs	r0, r0, r1, lsl #28
   232a8:	cmp	r0, r1, lsl #27
   232ac:	adc	r2, r2, r2
   232b0:	subcs	r0, r0, r1, lsl #27
   232b4:	cmp	r0, r1, lsl #26
   232b8:	adc	r2, r2, r2
   232bc:	subcs	r0, r0, r1, lsl #26
   232c0:	cmp	r0, r1, lsl #25
   232c4:	adc	r2, r2, r2
   232c8:	subcs	r0, r0, r1, lsl #25
   232cc:	cmp	r0, r1, lsl #24
   232d0:	adc	r2, r2, r2
   232d4:	subcs	r0, r0, r1, lsl #24
   232d8:	cmp	r0, r1, lsl #23
   232dc:	adc	r2, r2, r2
   232e0:	subcs	r0, r0, r1, lsl #23
   232e4:	cmp	r0, r1, lsl #22
   232e8:	adc	r2, r2, r2
   232ec:	subcs	r0, r0, r1, lsl #22
   232f0:	cmp	r0, r1, lsl #21
   232f4:	adc	r2, r2, r2
   232f8:	subcs	r0, r0, r1, lsl #21
   232fc:	cmp	r0, r1, lsl #20
   23300:	adc	r2, r2, r2
   23304:	subcs	r0, r0, r1, lsl #20
   23308:	cmp	r0, r1, lsl #19
   2330c:	adc	r2, r2, r2
   23310:	subcs	r0, r0, r1, lsl #19
   23314:	cmp	r0, r1, lsl #18
   23318:	adc	r2, r2, r2
   2331c:	subcs	r0, r0, r1, lsl #18
   23320:	cmp	r0, r1, lsl #17
   23324:	adc	r2, r2, r2
   23328:	subcs	r0, r0, r1, lsl #17
   2332c:	cmp	r0, r1, lsl #16
   23330:	adc	r2, r2, r2
   23334:	subcs	r0, r0, r1, lsl #16
   23338:	cmp	r0, r1, lsl #15
   2333c:	adc	r2, r2, r2
   23340:	subcs	r0, r0, r1, lsl #15
   23344:	cmp	r0, r1, lsl #14
   23348:	adc	r2, r2, r2
   2334c:	subcs	r0, r0, r1, lsl #14
   23350:	cmp	r0, r1, lsl #13
   23354:	adc	r2, r2, r2
   23358:	subcs	r0, r0, r1, lsl #13
   2335c:	cmp	r0, r1, lsl #12
   23360:	adc	r2, r2, r2
   23364:	subcs	r0, r0, r1, lsl #12
   23368:	cmp	r0, r1, lsl #11
   2336c:	adc	r2, r2, r2
   23370:	subcs	r0, r0, r1, lsl #11
   23374:	cmp	r0, r1, lsl #10
   23378:	adc	r2, r2, r2
   2337c:	subcs	r0, r0, r1, lsl #10
   23380:	cmp	r0, r1, lsl #9
   23384:	adc	r2, r2, r2
   23388:	subcs	r0, r0, r1, lsl #9
   2338c:	cmp	r0, r1, lsl #8
   23390:	adc	r2, r2, r2
   23394:	subcs	r0, r0, r1, lsl #8
   23398:	cmp	r0, r1, lsl #7
   2339c:	adc	r2, r2, r2
   233a0:	subcs	r0, r0, r1, lsl #7
   233a4:	cmp	r0, r1, lsl #6
   233a8:	adc	r2, r2, r2
   233ac:	subcs	r0, r0, r1, lsl #6
   233b0:	cmp	r0, r1, lsl #5
   233b4:	adc	r2, r2, r2
   233b8:	subcs	r0, r0, r1, lsl #5
   233bc:	cmp	r0, r1, lsl #4
   233c0:	adc	r2, r2, r2
   233c4:	subcs	r0, r0, r1, lsl #4
   233c8:	cmp	r0, r1, lsl #3
   233cc:	adc	r2, r2, r2
   233d0:	subcs	r0, r0, r1, lsl #3
   233d4:	cmp	r0, r1, lsl #2
   233d8:	adc	r2, r2, r2
   233dc:	subcs	r0, r0, r1, lsl #2
   233e0:	cmp	r0, r1, lsl #1
   233e4:	adc	r2, r2, r2
   233e8:	subcs	r0, r0, r1, lsl #1
   233ec:	cmp	r0, r1
   233f0:	adc	r2, r2, r2
   233f4:	subcs	r0, r0, r1
   233f8:	mov	r0, r2
   233fc:	bx	lr
   23400:	moveq	r0, #1
   23404:	movne	r0, #0
   23408:	bx	lr
   2340c:	clz	r2, r1
   23410:	rsb	r2, r2, #31
   23414:	lsr	r0, r0, r2
   23418:	bx	lr
   2341c:	cmp	r0, #0
   23420:	mvnne	r0, #0
   23424:	b	23b50 <_obstack_memory_used@@Base+0x46c4>
   23428:	cmp	r1, #0
   2342c:	beq	2341c <_obstack_memory_used@@Base+0x3f90>
   23430:	push	{r0, r1, lr}
   23434:	bl	2323c <_obstack_memory_used@@Base+0x3db0>
   23438:	pop	{r1, r2, lr}
   2343c:	mul	r3, r2, r0
   23440:	sub	r1, r1, r3
   23444:	bx	lr
   23448:	cmp	r1, #0
   2344c:	beq	23658 <_obstack_memory_used@@Base+0x41cc>
   23450:	eor	ip, r0, r1
   23454:	rsbmi	r1, r1, #0
   23458:	subs	r2, r1, #1
   2345c:	beq	23624 <_obstack_memory_used@@Base+0x4198>
   23460:	movs	r3, r0
   23464:	rsbmi	r3, r0, #0
   23468:	cmp	r3, r1
   2346c:	bls	23630 <_obstack_memory_used@@Base+0x41a4>
   23470:	tst	r1, r2
   23474:	beq	23640 <_obstack_memory_used@@Base+0x41b4>
   23478:	clz	r2, r3
   2347c:	clz	r0, r1
   23480:	sub	r2, r0, r2
   23484:	rsbs	r2, r2, #31
   23488:	addne	r2, r2, r2, lsl #1
   2348c:	mov	r0, #0
   23490:	addne	pc, pc, r2, lsl #2
   23494:	nop			; (mov r0, r0)
   23498:	cmp	r3, r1, lsl #31
   2349c:	adc	r0, r0, r0
   234a0:	subcs	r3, r3, r1, lsl #31
   234a4:	cmp	r3, r1, lsl #30
   234a8:	adc	r0, r0, r0
   234ac:	subcs	r3, r3, r1, lsl #30
   234b0:	cmp	r3, r1, lsl #29
   234b4:	adc	r0, r0, r0
   234b8:	subcs	r3, r3, r1, lsl #29
   234bc:	cmp	r3, r1, lsl #28
   234c0:	adc	r0, r0, r0
   234c4:	subcs	r3, r3, r1, lsl #28
   234c8:	cmp	r3, r1, lsl #27
   234cc:	adc	r0, r0, r0
   234d0:	subcs	r3, r3, r1, lsl #27
   234d4:	cmp	r3, r1, lsl #26
   234d8:	adc	r0, r0, r0
   234dc:	subcs	r3, r3, r1, lsl #26
   234e0:	cmp	r3, r1, lsl #25
   234e4:	adc	r0, r0, r0
   234e8:	subcs	r3, r3, r1, lsl #25
   234ec:	cmp	r3, r1, lsl #24
   234f0:	adc	r0, r0, r0
   234f4:	subcs	r3, r3, r1, lsl #24
   234f8:	cmp	r3, r1, lsl #23
   234fc:	adc	r0, r0, r0
   23500:	subcs	r3, r3, r1, lsl #23
   23504:	cmp	r3, r1, lsl #22
   23508:	adc	r0, r0, r0
   2350c:	subcs	r3, r3, r1, lsl #22
   23510:	cmp	r3, r1, lsl #21
   23514:	adc	r0, r0, r0
   23518:	subcs	r3, r3, r1, lsl #21
   2351c:	cmp	r3, r1, lsl #20
   23520:	adc	r0, r0, r0
   23524:	subcs	r3, r3, r1, lsl #20
   23528:	cmp	r3, r1, lsl #19
   2352c:	adc	r0, r0, r0
   23530:	subcs	r3, r3, r1, lsl #19
   23534:	cmp	r3, r1, lsl #18
   23538:	adc	r0, r0, r0
   2353c:	subcs	r3, r3, r1, lsl #18
   23540:	cmp	r3, r1, lsl #17
   23544:	adc	r0, r0, r0
   23548:	subcs	r3, r3, r1, lsl #17
   2354c:	cmp	r3, r1, lsl #16
   23550:	adc	r0, r0, r0
   23554:	subcs	r3, r3, r1, lsl #16
   23558:	cmp	r3, r1, lsl #15
   2355c:	adc	r0, r0, r0
   23560:	subcs	r3, r3, r1, lsl #15
   23564:	cmp	r3, r1, lsl #14
   23568:	adc	r0, r0, r0
   2356c:	subcs	r3, r3, r1, lsl #14
   23570:	cmp	r3, r1, lsl #13
   23574:	adc	r0, r0, r0
   23578:	subcs	r3, r3, r1, lsl #13
   2357c:	cmp	r3, r1, lsl #12
   23580:	adc	r0, r0, r0
   23584:	subcs	r3, r3, r1, lsl #12
   23588:	cmp	r3, r1, lsl #11
   2358c:	adc	r0, r0, r0
   23590:	subcs	r3, r3, r1, lsl #11
   23594:	cmp	r3, r1, lsl #10
   23598:	adc	r0, r0, r0
   2359c:	subcs	r3, r3, r1, lsl #10
   235a0:	cmp	r3, r1, lsl #9
   235a4:	adc	r0, r0, r0
   235a8:	subcs	r3, r3, r1, lsl #9
   235ac:	cmp	r3, r1, lsl #8
   235b0:	adc	r0, r0, r0
   235b4:	subcs	r3, r3, r1, lsl #8
   235b8:	cmp	r3, r1, lsl #7
   235bc:	adc	r0, r0, r0
   235c0:	subcs	r3, r3, r1, lsl #7
   235c4:	cmp	r3, r1, lsl #6
   235c8:	adc	r0, r0, r0
   235cc:	subcs	r3, r3, r1, lsl #6
   235d0:	cmp	r3, r1, lsl #5
   235d4:	adc	r0, r0, r0
   235d8:	subcs	r3, r3, r1, lsl #5
   235dc:	cmp	r3, r1, lsl #4
   235e0:	adc	r0, r0, r0
   235e4:	subcs	r3, r3, r1, lsl #4
   235e8:	cmp	r3, r1, lsl #3
   235ec:	adc	r0, r0, r0
   235f0:	subcs	r3, r3, r1, lsl #3
   235f4:	cmp	r3, r1, lsl #2
   235f8:	adc	r0, r0, r0
   235fc:	subcs	r3, r3, r1, lsl #2
   23600:	cmp	r3, r1, lsl #1
   23604:	adc	r0, r0, r0
   23608:	subcs	r3, r3, r1, lsl #1
   2360c:	cmp	r3, r1
   23610:	adc	r0, r0, r0
   23614:	subcs	r3, r3, r1
   23618:	cmp	ip, #0
   2361c:	rsbmi	r0, r0, #0
   23620:	bx	lr
   23624:	teq	ip, r0
   23628:	rsbmi	r0, r0, #0
   2362c:	bx	lr
   23630:	movcc	r0, #0
   23634:	asreq	r0, ip, #31
   23638:	orreq	r0, r0, #1
   2363c:	bx	lr
   23640:	clz	r2, r1
   23644:	rsb	r2, r2, #31
   23648:	cmp	ip, #0
   2364c:	lsr	r0, r3, r2
   23650:	rsbmi	r0, r0, #0
   23654:	bx	lr
   23658:	cmp	r0, #0
   2365c:	mvngt	r0, #-2147483648	; 0x80000000
   23660:	movlt	r0, #-2147483648	; 0x80000000
   23664:	b	23b50 <_obstack_memory_used@@Base+0x46c4>
   23668:	cmp	r1, #0
   2366c:	beq	23658 <_obstack_memory_used@@Base+0x41cc>
   23670:	push	{r0, r1, lr}
   23674:	bl	23450 <_obstack_memory_used@@Base+0x3fc4>
   23678:	pop	{r1, r2, lr}
   2367c:	mul	r3, r2, r0
   23680:	sub	r1, r1, r3
   23684:	bx	lr
   23688:	eor	r1, r1, #-2147483648	; 0x80000000
   2368c:	b	23694 <_obstack_memory_used@@Base+0x4208>
   23690:	eor	r3, r3, #-2147483648	; 0x80000000
   23694:	push	{r4, r5, lr}
   23698:	lsl	r4, r1, #1
   2369c:	lsl	r5, r3, #1
   236a0:	teq	r4, r5
   236a4:	teqeq	r0, r2
   236a8:	orrsne	ip, r4, r0
   236ac:	orrsne	ip, r5, r2
   236b0:	mvnsne	ip, r4, asr #21
   236b4:	mvnsne	ip, r5, asr #21
   236b8:	beq	238a4 <_obstack_memory_used@@Base+0x4418>
   236bc:	lsr	r4, r4, #21
   236c0:	rsbs	r5, r4, r5, lsr #21
   236c4:	rsblt	r5, r5, #0
   236c8:	ble	236e8 <_obstack_memory_used@@Base+0x425c>
   236cc:	add	r4, r4, r5
   236d0:	eor	r2, r0, r2
   236d4:	eor	r3, r1, r3
   236d8:	eor	r0, r2, r0
   236dc:	eor	r1, r3, r1
   236e0:	eor	r2, r0, r2
   236e4:	eor	r3, r1, r3
   236e8:	cmp	r5, #54	; 0x36
   236ec:	pophi	{r4, r5, pc}
   236f0:	tst	r1, #-2147483648	; 0x80000000
   236f4:	lsl	r1, r1, #12
   236f8:	mov	ip, #1048576	; 0x100000
   236fc:	orr	r1, ip, r1, lsr #12
   23700:	beq	2370c <_obstack_memory_used@@Base+0x4280>
   23704:	rsbs	r0, r0, #0
   23708:	rsc	r1, r1, #0
   2370c:	tst	r3, #-2147483648	; 0x80000000
   23710:	lsl	r3, r3, #12
   23714:	orr	r3, ip, r3, lsr #12
   23718:	beq	23724 <_obstack_memory_used@@Base+0x4298>
   2371c:	rsbs	r2, r2, #0
   23720:	rsc	r3, r3, #0
   23724:	teq	r4, r5
   23728:	beq	2388c <_obstack_memory_used@@Base+0x4400>
   2372c:	sub	r4, r4, #1
   23730:	rsbs	lr, r5, #32
   23734:	blt	23750 <_obstack_memory_used@@Base+0x42c4>
   23738:	lsl	ip, r2, lr
   2373c:	adds	r0, r0, r2, lsr r5
   23740:	adc	r1, r1, #0
   23744:	adds	r0, r0, r3, lsl lr
   23748:	adcs	r1, r1, r3, asr r5
   2374c:	b	2376c <_obstack_memory_used@@Base+0x42e0>
   23750:	sub	r5, r5, #32
   23754:	add	lr, lr, #32
   23758:	cmp	r2, #1
   2375c:	lsl	ip, r3, lr
   23760:	orrcs	ip, ip, #2
   23764:	adds	r0, r0, r3, asr r5
   23768:	adcs	r1, r1, r3, asr #31
   2376c:	and	r5, r1, #-2147483648	; 0x80000000
   23770:	bpl	23780 <_obstack_memory_used@@Base+0x42f4>
   23774:	rsbs	ip, ip, #0
   23778:	rscs	r0, r0, #0
   2377c:	rsc	r1, r1, #0
   23780:	cmp	r1, #1048576	; 0x100000
   23784:	bcc	237c4 <_obstack_memory_used@@Base+0x4338>
   23788:	cmp	r1, #2097152	; 0x200000
   2378c:	bcc	237ac <_obstack_memory_used@@Base+0x4320>
   23790:	lsrs	r1, r1, #1
   23794:	rrxs	r0, r0
   23798:	rrx	ip, ip
   2379c:	add	r4, r4, #1
   237a0:	lsl	r2, r4, #21
   237a4:	cmn	r2, #4194304	; 0x400000
   237a8:	bcs	23904 <_obstack_memory_used@@Base+0x4478>
   237ac:	cmp	ip, #-2147483648	; 0x80000000
   237b0:	lsrseq	ip, r0, #1
   237b4:	adcs	r0, r0, #0
   237b8:	adc	r1, r1, r4, lsl #20
   237bc:	orr	r1, r1, r5
   237c0:	pop	{r4, r5, pc}
   237c4:	lsls	ip, ip, #1
   237c8:	adcs	r0, r0, r0
   237cc:	adc	r1, r1, r1
   237d0:	tst	r1, #1048576	; 0x100000
   237d4:	sub	r4, r4, #1
   237d8:	bne	237ac <_obstack_memory_used@@Base+0x4320>
   237dc:	teq	r1, #0
   237e0:	moveq	r1, r0
   237e4:	moveq	r0, #0
   237e8:	clz	r3, r1
   237ec:	addeq	r3, r3, #32
   237f0:	sub	r3, r3, #11
   237f4:	subs	r2, r3, #32
   237f8:	bge	2381c <_obstack_memory_used@@Base+0x4390>
   237fc:	adds	r2, r2, #12
   23800:	ble	23818 <_obstack_memory_used@@Base+0x438c>
   23804:	add	ip, r2, #20
   23808:	rsb	r2, r2, #12
   2380c:	lsl	r0, r1, ip
   23810:	lsr	r1, r1, r2
   23814:	b	2382c <_obstack_memory_used@@Base+0x43a0>
   23818:	add	r2, r2, #20
   2381c:	rsble	ip, r2, #32
   23820:	lsl	r1, r1, r2
   23824:	orrle	r1, r1, r0, lsr ip
   23828:	lslle	r0, r0, r2
   2382c:	subs	r4, r4, r3
   23830:	addge	r1, r1, r4, lsl #20
   23834:	orrge	r1, r1, r5
   23838:	popge	{r4, r5, pc}
   2383c:	mvn	r4, r4
   23840:	subs	r4, r4, #31
   23844:	bge	23880 <_obstack_memory_used@@Base+0x43f4>
   23848:	adds	r4, r4, #12
   2384c:	bgt	23868 <_obstack_memory_used@@Base+0x43dc>
   23850:	add	r4, r4, #20
   23854:	rsb	r2, r4, #32
   23858:	lsr	r0, r0, r4
   2385c:	orr	r0, r0, r1, lsl r2
   23860:	orr	r1, r5, r1, lsr r4
   23864:	pop	{r4, r5, pc}
   23868:	rsb	r4, r4, #12
   2386c:	rsb	r2, r4, #32
   23870:	lsr	r0, r0, r2
   23874:	orr	r0, r0, r1, lsl r4
   23878:	mov	r1, r5
   2387c:	pop	{r4, r5, pc}
   23880:	lsr	r0, r1, r4
   23884:	mov	r1, r5
   23888:	pop	{r4, r5, pc}
   2388c:	teq	r4, #0
   23890:	eor	r3, r3, #1048576	; 0x100000
   23894:	eoreq	r1, r1, #1048576	; 0x100000
   23898:	addeq	r4, r4, #1
   2389c:	subne	r5, r5, #1
   238a0:	b	2372c <_obstack_memory_used@@Base+0x42a0>
   238a4:	mvns	ip, r4, asr #21
   238a8:	mvnsne	ip, r5, asr #21
   238ac:	beq	23914 <_obstack_memory_used@@Base+0x4488>
   238b0:	teq	r4, r5
   238b4:	teqeq	r0, r2
   238b8:	beq	238cc <_obstack_memory_used@@Base+0x4440>
   238bc:	orrs	ip, r4, r0
   238c0:	moveq	r1, r3
   238c4:	moveq	r0, r2
   238c8:	pop	{r4, r5, pc}
   238cc:	teq	r1, r3
   238d0:	movne	r1, #0
   238d4:	movne	r0, #0
   238d8:	popne	{r4, r5, pc}
   238dc:	lsrs	ip, r4, #21
   238e0:	bne	238f4 <_obstack_memory_used@@Base+0x4468>
   238e4:	lsls	r0, r0, #1
   238e8:	adcs	r1, r1, r1
   238ec:	orrcs	r1, r1, #-2147483648	; 0x80000000
   238f0:	pop	{r4, r5, pc}
   238f4:	adds	r4, r4, #4194304	; 0x400000
   238f8:	addcc	r1, r1, #1048576	; 0x100000
   238fc:	popcc	{r4, r5, pc}
   23900:	and	r5, r1, #-2147483648	; 0x80000000
   23904:	orr	r1, r5, #2130706432	; 0x7f000000
   23908:	orr	r1, r1, #15728640	; 0xf00000
   2390c:	mov	r0, #0
   23910:	pop	{r4, r5, pc}
   23914:	mvns	ip, r4, asr #21
   23918:	movne	r1, r3
   2391c:	movne	r0, r2
   23920:	mvnseq	ip, r5, asr #21
   23924:	movne	r3, r1
   23928:	movne	r2, r0
   2392c:	orrs	r4, r0, r1, lsl #12
   23930:	orrseq	r5, r2, r3, lsl #12
   23934:	teqeq	r1, r3
   23938:	orrne	r1, r1, #524288	; 0x80000
   2393c:	pop	{r4, r5, pc}
   23940:	teq	r0, #0
   23944:	moveq	r1, #0
   23948:	bxeq	lr
   2394c:	push	{r4, r5, lr}
   23950:	mov	r4, #1024	; 0x400
   23954:	add	r4, r4, #50	; 0x32
   23958:	mov	r5, #0
   2395c:	mov	r1, #0
   23960:	b	237dc <_obstack_memory_used@@Base+0x4350>
   23964:	teq	r0, #0
   23968:	moveq	r1, #0
   2396c:	bxeq	lr
   23970:	push	{r4, r5, lr}
   23974:	mov	r4, #1024	; 0x400
   23978:	add	r4, r4, #50	; 0x32
   2397c:	ands	r5, r0, #-2147483648	; 0x80000000
   23980:	rsbmi	r0, r0, #0
   23984:	mov	r1, #0
   23988:	b	237dc <_obstack_memory_used@@Base+0x4350>
   2398c:	lsls	r2, r0, #1
   23990:	asr	r1, r2, #3
   23994:	rrx	r1, r1
   23998:	lsl	r0, r2, #28
   2399c:	andsne	r3, r2, #-16777216	; 0xff000000
   239a0:	teqne	r3, #-16777216	; 0xff000000
   239a4:	eorne	r1, r1, #939524096	; 0x38000000
   239a8:	bxne	lr
   239ac:	teq	r2, #0
   239b0:	teqne	r3, #-16777216	; 0xff000000
   239b4:	bxeq	lr
   239b8:	push	{r4, r5, lr}
   239bc:	mov	r4, #896	; 0x380
   239c0:	and	r5, r1, #-2147483648	; 0x80000000
   239c4:	bic	r1, r1, #-2147483648	; 0x80000000
   239c8:	b	237dc <_obstack_memory_used@@Base+0x4350>
   239cc:	orrs	r2, r0, r1
   239d0:	bxeq	lr
   239d4:	push	{r4, r5, lr}
   239d8:	mov	r5, #0
   239dc:	b	239fc <_obstack_memory_used@@Base+0x4570>
   239e0:	orrs	r2, r0, r1
   239e4:	bxeq	lr
   239e8:	push	{r4, r5, lr}
   239ec:	ands	r5, r1, #-2147483648	; 0x80000000
   239f0:	bpl	239fc <_obstack_memory_used@@Base+0x4570>
   239f4:	rsbs	r0, r0, #0
   239f8:	rsc	r1, r1, #0
   239fc:	mov	r4, #1024	; 0x400
   23a00:	add	r4, r4, #50	; 0x32
   23a04:	lsrs	ip, r1, #22
   23a08:	beq	23780 <_obstack_memory_used@@Base+0x42f4>
   23a0c:	mov	r2, #3
   23a10:	lsrs	ip, ip, #3
   23a14:	addne	r2, r2, #3
   23a18:	lsrs	ip, ip, #3
   23a1c:	addne	r2, r2, #3
   23a20:	add	r2, r2, ip, lsr #3
   23a24:	rsb	r3, r2, #32
   23a28:	lsl	ip, r0, r3
   23a2c:	lsr	r0, r0, r2
   23a30:	orr	r0, r0, r1, lsl r3
   23a34:	lsr	r1, r1, r2
   23a38:	add	r4, r4, r2
   23a3c:	b	23780 <_obstack_memory_used@@Base+0x42f4>
   23a40:	cmp	r3, #0
   23a44:	cmpeq	r2, #0
   23a48:	bne	23a6c <_obstack_memory_used@@Base+0x45e0>
   23a4c:	cmp	r1, #0
   23a50:	movlt	r1, #-2147483648	; 0x80000000
   23a54:	movlt	r0, #0
   23a58:	blt	23a68 <_obstack_memory_used@@Base+0x45dc>
   23a5c:	cmpeq	r0, #0
   23a60:	mvnne	r1, #-2147483648	; 0x80000000
   23a64:	mvnne	r0, #0
   23a68:	b	23b50 <_obstack_memory_used@@Base+0x46c4>
   23a6c:	sub	sp, sp, #8
   23a70:	push	{sp, lr}
   23a74:	cmp	r1, #0
   23a78:	blt	23a98 <_obstack_memory_used@@Base+0x460c>
   23a7c:	cmp	r3, #0
   23a80:	blt	23acc <_obstack_memory_used@@Base+0x4640>
   23a84:	bl	23ba8 <_obstack_memory_used@@Base+0x471c>
   23a88:	ldr	lr, [sp, #4]
   23a8c:	add	sp, sp, #8
   23a90:	pop	{r2, r3}
   23a94:	bx	lr
   23a98:	rsbs	r0, r0, #0
   23a9c:	sbc	r1, r1, r1, lsl #1
   23aa0:	cmp	r3, #0
   23aa4:	blt	23af0 <_obstack_memory_used@@Base+0x4664>
   23aa8:	bl	23ba8 <_obstack_memory_used@@Base+0x471c>
   23aac:	ldr	lr, [sp, #4]
   23ab0:	add	sp, sp, #8
   23ab4:	pop	{r2, r3}
   23ab8:	rsbs	r0, r0, #0
   23abc:	sbc	r1, r1, r1, lsl #1
   23ac0:	rsbs	r2, r2, #0
   23ac4:	sbc	r3, r3, r3, lsl #1
   23ac8:	bx	lr
   23acc:	rsbs	r2, r2, #0
   23ad0:	sbc	r3, r3, r3, lsl #1
   23ad4:	bl	23ba8 <_obstack_memory_used@@Base+0x471c>
   23ad8:	ldr	lr, [sp, #4]
   23adc:	add	sp, sp, #8
   23ae0:	pop	{r2, r3}
   23ae4:	rsbs	r0, r0, #0
   23ae8:	sbc	r1, r1, r1, lsl #1
   23aec:	bx	lr
   23af0:	rsbs	r2, r2, #0
   23af4:	sbc	r3, r3, r3, lsl #1
   23af8:	bl	23ba8 <_obstack_memory_used@@Base+0x471c>
   23afc:	ldr	lr, [sp, #4]
   23b00:	add	sp, sp, #8
   23b04:	pop	{r2, r3}
   23b08:	rsbs	r2, r2, #0
   23b0c:	sbc	r3, r3, r3, lsl #1
   23b10:	bx	lr
   23b14:	cmp	r3, #0
   23b18:	cmpeq	r2, #0
   23b1c:	bne	23b34 <_obstack_memory_used@@Base+0x46a8>
   23b20:	cmp	r1, #0
   23b24:	cmpeq	r0, #0
   23b28:	mvnne	r1, #0
   23b2c:	mvnne	r0, #0
   23b30:	b	23b50 <_obstack_memory_used@@Base+0x46c4>
   23b34:	sub	sp, sp, #8
   23b38:	push	{sp, lr}
   23b3c:	bl	23ba8 <_obstack_memory_used@@Base+0x471c>
   23b40:	ldr	lr, [sp, #4]
   23b44:	add	sp, sp, #8
   23b48:	pop	{r2, r3}
   23b4c:	bx	lr
   23b50:	push	{r1, lr}
   23b54:	mov	r0, #8
   23b58:	bl	1187c <raise@plt>
   23b5c:	pop	{r1, pc}
   23b60:	vmov	d7, r0, r1
   23b64:	vldr	d6, [pc, #44]	; 23b98 <_obstack_memory_used@@Base+0x470c>
   23b68:	vldr	d5, [pc, #48]	; 23ba0 <_obstack_memory_used@@Base+0x4714>
   23b6c:	mov	r0, #0
   23b70:	vmul.f64	d6, d7, d6
   23b74:	vcvt.u32.f64	s12, d6
   23b78:	vcvt.f64.u32	d4, s12
   23b7c:	vmov	r1, s12
   23b80:	vmls.f64	d7, d4, d5
   23b84:	vcvt.u32.f64	s14, d7
   23b88:	vmov	r3, s14
   23b8c:	orr	r0, r0, r3
   23b90:	bx	lr
   23b94:	nop			; (mov r0, r0)
   23b98:	andeq	r0, r0, r0
   23b9c:	ldclcc	0, cr0, [r0]
   23ba0:	andeq	r0, r0, r0
   23ba4:	mvnsmi	r0, r0
   23ba8:	cmp	r1, r3
   23bac:	push	{r4, r5, r6, r7, r8, r9, lr}
   23bb0:	cmpeq	r0, r2
   23bb4:	mov	r4, r0
   23bb8:	mov	r5, r1
   23bbc:	ldr	r9, [sp, #28]
   23bc0:	movcc	r0, #0
   23bc4:	movcc	r1, #0
   23bc8:	bcc	23cc0 <_obstack_memory_used@@Base+0x4834>
   23bcc:	cmp	r3, #0
   23bd0:	clzeq	ip, r2
   23bd4:	clzne	ip, r3
   23bd8:	addeq	ip, ip, #32
   23bdc:	cmp	r5, #0
   23be0:	clzeq	r1, r4
   23be4:	addeq	r1, r1, #32
   23be8:	clzne	r1, r5
   23bec:	sub	ip, ip, r1
   23bf0:	sub	lr, ip, #32
   23bf4:	lsl	r7, r3, ip
   23bf8:	rsb	r8, ip, #32
   23bfc:	orr	r7, r7, r2, lsl lr
   23c00:	orr	r7, r7, r2, lsr r8
   23c04:	lsl	r6, r2, ip
   23c08:	cmp	r5, r7
   23c0c:	cmpeq	r4, r6
   23c10:	movcc	r0, #0
   23c14:	movcc	r1, #0
   23c18:	bcc	23c34 <_obstack_memory_used@@Base+0x47a8>
   23c1c:	mov	r3, #1
   23c20:	subs	r4, r4, r6
   23c24:	lsl	r1, r3, lr
   23c28:	lsl	r0, r3, ip
   23c2c:	orr	r1, r1, r3, lsr r8
   23c30:	sbc	r5, r5, r7
   23c34:	cmp	ip, #0
   23c38:	beq	23cc0 <_obstack_memory_used@@Base+0x4834>
   23c3c:	lsrs	r3, r7, #1
   23c40:	rrx	r2, r6
   23c44:	mov	r6, ip
   23c48:	b	23c6c <_obstack_memory_used@@Base+0x47e0>
   23c4c:	subs	r4, r4, r2
   23c50:	sbc	r5, r5, r3
   23c54:	adds	r4, r4, r4
   23c58:	adc	r5, r5, r5
   23c5c:	adds	r4, r4, #1
   23c60:	adc	r5, r5, #0
   23c64:	subs	r6, r6, #1
   23c68:	beq	23c88 <_obstack_memory_used@@Base+0x47fc>
   23c6c:	cmp	r5, r3
   23c70:	cmpeq	r4, r2
   23c74:	bcs	23c4c <_obstack_memory_used@@Base+0x47c0>
   23c78:	adds	r4, r4, r4
   23c7c:	adc	r5, r5, r5
   23c80:	subs	r6, r6, #1
   23c84:	bne	23c6c <_obstack_memory_used@@Base+0x47e0>
   23c88:	lsr	r6, r4, ip
   23c8c:	lsr	r7, r5, ip
   23c90:	orr	r6, r6, r5, lsl r8
   23c94:	adds	r2, r0, r4
   23c98:	orr	r6, r6, r5, lsr lr
   23c9c:	adc	r3, r1, r5
   23ca0:	lsl	r1, r7, ip
   23ca4:	orr	r1, r1, r6, lsl lr
   23ca8:	lsl	r0, r6, ip
   23cac:	orr	r1, r1, r6, lsr r8
   23cb0:	subs	r0, r2, r0
   23cb4:	mov	r4, r6
   23cb8:	mov	r5, r7
   23cbc:	sbc	r1, r3, r1
   23cc0:	cmp	r9, #0
   23cc4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   23cc8:	strd	r4, [r9]
   23ccc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23cd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23cd4:	mov	r7, r0
   23cd8:	ldr	r6, [pc, #72]	; 23d28 <_obstack_memory_used@@Base+0x489c>
   23cdc:	ldr	r5, [pc, #72]	; 23d2c <_obstack_memory_used@@Base+0x48a0>
   23ce0:	add	r6, pc, r6
   23ce4:	add	r5, pc, r5
   23ce8:	sub	r6, r6, r5
   23cec:	mov	r8, r1
   23cf0:	mov	r9, r2
   23cf4:	bl	11838 <calloc@plt-0x20>
   23cf8:	asrs	r6, r6, #2
   23cfc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23d00:	mov	r4, #0
   23d04:	add	r4, r4, #1
   23d08:	ldr	r3, [r5], #4
   23d0c:	mov	r2, r9
   23d10:	mov	r1, r8
   23d14:	mov	r0, r7
   23d18:	blx	r3
   23d1c:	cmp	r6, r4
   23d20:	bne	23d04 <_obstack_memory_used@@Base+0x4878>
   23d24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23d28:	andeq	r5, r1, r8, lsl r2
   23d2c:	andeq	r5, r1, r0, lsl r2
   23d30:	bx	lr
   23d34:	ldr	r3, [pc, #12]	; 23d48 <_obstack_memory_used@@Base+0x48bc>
   23d38:	mov	r1, #0
   23d3c:	add	r3, pc, r3
   23d40:	ldr	r2, [r3]
   23d44:	b	11bdc <__cxa_atexit@plt>
   23d48:	andeq	r5, r1, r8, lsl #9

Disassembly of section .fini:

00023d4c <.fini>:
   23d4c:	push	{r3, lr}
   23d50:	pop	{r3, pc}
