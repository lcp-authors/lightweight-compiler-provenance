
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

000004c4 <.init>:
 4c4:	push	{r3, lr}
 4c8:	bl	560 <bloom_init@plt+0x10>
 4cc:	pop	{r3, pc}

Disassembly of section .plt:

000004d0 <calloc@plt-0x14>:
 4d0:	push	{lr}		; (str lr, [sp, #-4]!)
 4d4:	ldr	lr, [pc, #4]	; 4e0 <calloc@plt-0x4>
 4d8:	add	lr, pc, lr
 4dc:	ldr	pc, [lr, #8]!
 4e0:	andeq	r1, r1, r0, lsr #22

000004e4 <calloc@plt>:
 4e4:	add	ip, pc, #0, 12
 4e8:	add	ip, ip, #69632	; 0x11000
 4ec:	ldr	pc, [ip, #2848]!	; 0xb20

000004f0 <log@plt>:
 4f0:	add	ip, pc, #0, 12
 4f4:	add	ip, ip, #69632	; 0x11000
 4f8:	ldr	pc, [ip, #2840]!	; 0xb18

000004fc <__cxa_finalize@plt>:
 4fc:	add	ip, pc, #0, 12
 500:	add	ip, ip, #69632	; 0x11000
 504:	ldr	pc, [ip, #2832]!	; 0xb10

00000508 <printf@plt>:
 508:	add	ip, pc, #0, 12
 50c:	add	ip, ip, #69632	; 0x11000
 510:	ldr	pc, [ip, #2824]!	; 0xb08

00000514 <murmurhash2@plt>:
 514:	add	ip, pc, #0, 12
 518:	add	ip, ip, #69632	; 0x11000
 51c:	ldr	pc, [ip, #2816]!	; 0xb00

00000520 <free@plt>:
 520:	add	ip, pc, #0, 12
 524:	add	ip, ip, #69632	; 0x11000
 528:	ldr	pc, [ip, #2808]!	; 0xaf8

0000052c <__gmon_start__@plt>:
 52c:	add	ip, pc, #0, 12
 530:	add	ip, ip, #69632	; 0x11000
 534:	ldr	pc, [ip, #2800]!	; 0xaf0

00000538 <memset@plt>:
 538:	add	ip, pc, #0, 12
 53c:	add	ip, ip, #69632	; 0x11000
 540:	ldr	pc, [ip, #2792]!	; 0xae8

00000544 <ceil@plt>:
 544:	add	ip, pc, #0, 12
 548:	add	ip, ip, #69632	; 0x11000
 54c:	ldr	pc, [ip, #2784]!	; 0xae0

00000550 <bloom_init@plt>:
 550:	add	ip, pc, #0, 12
 554:	add	ip, ip, #69632	; 0x11000
 558:	ldr	pc, [ip, #2776]!	; 0xad8

Disassembly of section .text:

00000560 <bloom_init_size@@Base-0x31c>:
 560:	ldr	r3, [pc, #20]	; 57c <bloom_init@plt+0x2c>
 564:	ldr	r2, [pc, #20]	; 580 <bloom_init@plt+0x30>
 568:	add	r3, pc, r3
 56c:	ldr	r2, [r3, r2]
 570:	cmp	r2, #0
 574:	bxeq	lr
 578:	b	52c <__gmon_start__@plt>
 57c:	muleq	r1, r0, sl
 580:	andeq	r0, r0, ip, lsr r0
 584:	ldr	r0, [pc, #44]	; 5b8 <bloom_init@plt+0x68>
 588:	ldr	r3, [pc, #44]	; 5bc <bloom_init@plt+0x6c>
 58c:	add	r0, pc, r0
 590:	add	r3, pc, r3
 594:	cmp	r3, r0
 598:	ldr	r3, [pc, #32]	; 5c0 <bloom_init@plt+0x70>
 59c:	add	r3, pc, r3
 5a0:	bxeq	lr
 5a4:	ldr	r2, [pc, #24]	; 5c4 <bloom_init@plt+0x74>
 5a8:	ldr	r3, [r3, r2]
 5ac:	cmp	r3, #0
 5b0:	bxeq	lr
 5b4:	bx	r3
 5b8:			; <UNDEFINED> instruction: 0x00011ab4
 5bc:			; <UNDEFINED> instruction: 0x00011ab0
 5c0:	andeq	r1, r1, ip, asr sl
 5c4:	andeq	r0, r0, r8, lsr r0
 5c8:	ldr	r0, [pc, #56]	; 608 <bloom_init@plt+0xb8>
 5cc:	ldr	r3, [pc, #56]	; 60c <bloom_init@plt+0xbc>
 5d0:	add	r0, pc, r0
 5d4:	add	r3, pc, r3
 5d8:	sub	r1, r3, r0
 5dc:	ldr	r3, [pc, #44]	; 610 <bloom_init@plt+0xc0>
 5e0:	asr	r1, r1, #2
 5e4:	add	r3, pc, r3
 5e8:	add	r1, r1, r1, lsr #31
 5ec:	asrs	r1, r1, #1
 5f0:	bxeq	lr
 5f4:	ldr	r2, [pc, #24]	; 614 <bloom_init@plt+0xc4>
 5f8:	ldr	r3, [r3, r2]
 5fc:	cmp	r3, #0
 600:	bxeq	lr
 604:	bx	r3
 608:	andeq	r1, r1, r0, ror sl
 60c:	andeq	r1, r1, ip, ror #20
 610:	andeq	r1, r1, r4, lsl sl
 614:	andeq	r0, r0, r0, asr #32
 618:	ldr	r3, [pc, #76]	; 66c <bloom_init@plt+0x11c>
 61c:	ldr	r2, [pc, #76]	; 670 <bloom_init@plt+0x120>
 620:	add	r3, pc, r3
 624:	add	r2, pc, r2
 628:	ldrb	r3, [r3]
 62c:	cmp	r3, #0
 630:	bxne	lr
 634:	ldr	r3, [pc, #56]	; 674 <bloom_init@plt+0x124>
 638:	push	{r4, lr}
 63c:	ldr	r3, [r2, r3]
 640:	cmp	r3, #0
 644:	beq	654 <bloom_init@plt+0x104>
 648:	ldr	r3, [pc, #40]	; 678 <bloom_init@plt+0x128>
 64c:	ldr	r0, [pc, r3]
 650:	bl	4fc <__cxa_finalize@plt>
 654:	bl	584 <bloom_init@plt+0x34>
 658:	ldr	r3, [pc, #28]	; 67c <bloom_init@plt+0x12c>
 65c:	mov	r2, #1
 660:	add	r3, pc, r3
 664:	strb	r2, [r3]
 668:	pop	{r4, pc}
 66c:	andeq	r1, r1, r0, lsr #20
 670:	ldrdeq	r1, [r1], -r4
 674:	andeq	r0, r0, r4, lsr r0
 678:	strdeq	r1, [r1], -r0
 67c:	andeq	r1, r1, r0, ror #19
 680:	b	5c8 <bloom_init@plt+0x78>
 684:	andeq	r0, r0, r0
 688:	push	{fp}		; (str fp, [sp, #-4]!)
 68c:	add	fp, sp, #0
 690:	sub	sp, sp, #36	; 0x24
 694:	str	r0, [fp, #-24]	; 0xffffffe8
 698:	str	r1, [fp, #-28]	; 0xffffffe4
 69c:	str	r2, [fp, #-32]	; 0xffffffe0
 6a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
 6a4:	lsr	r3, r3, #3
 6a8:	str	r3, [fp, #-8]
 6ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
 6b0:	ldr	r3, [fp, #-8]
 6b4:	add	r3, r2, r3
 6b8:	ldrb	r3, [r3]
 6bc:	strb	r3, [fp, #-9]
 6c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
 6c4:	and	r3, r3, #7
 6c8:	mov	r2, #1
 6cc:	lsl	r3, r2, r3
 6d0:	str	r3, [fp, #-16]
 6d4:	ldrb	r2, [fp, #-9]
 6d8:	ldr	r3, [fp, #-16]
 6dc:	and	r3, r3, r2
 6e0:	cmp	r3, #0
 6e4:	beq	6f0 <bloom_init@plt+0x1a0>
 6e8:	mov	r3, #1
 6ec:	b	724 <bloom_init@plt+0x1d4>
 6f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 6f4:	cmp	r3, #0
 6f8:	beq	720 <bloom_init@plt+0x1d0>
 6fc:	ldr	r3, [fp, #-16]
 700:	uxtb	r1, r3
 704:	ldr	r2, [fp, #-24]	; 0xffffffe8
 708:	ldr	r3, [fp, #-8]
 70c:	add	r3, r2, r3
 710:	ldrb	r2, [fp, #-9]
 714:	orr	r2, r1, r2
 718:	uxtb	r2, r2
 71c:	strb	r2, [r3]
 720:	mov	r3, #0
 724:	mov	r0, r3
 728:	add	sp, fp, #0
 72c:	pop	{fp}		; (ldr fp, [sp], #4)
 730:	bx	lr
 734:	strd	r4, [sp, #-24]!	; 0xffffffe8
 738:	strd	r6, [sp, #8]
 73c:	str	fp, [sp, #16]
 740:	str	lr, [sp, #20]
 744:	add	fp, sp, #20
 748:	sub	sp, sp, #24
 74c:	str	r0, [fp, #-32]	; 0xffffffe0
 750:	str	r1, [fp, #-36]	; 0xffffffdc
 754:	str	r2, [fp, #-40]	; 0xffffffd8
 758:	str	r3, [fp, #-44]	; 0xffffffd4
 75c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 760:	ldr	r3, [r3, #44]	; 0x2c
 764:	cmp	r3, #0
 768:	bne	788 <bloom_init@plt+0x238>
 76c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 770:	ldr	r3, [pc, #256]	; 878 <bloom_init@plt+0x328>
 774:	add	r3, pc, r3
 778:	mov	r0, r3
 77c:	bl	508 <printf@plt>
 780:	mvn	r3, #0
 784:	b	85c <bloom_init@plt+0x30c>
 788:	mov	r3, #0
 78c:	str	r3, [fp, #-24]	; 0xffffffe8
 790:	movw	r2, #45708	; 0xb28c
 794:	movt	r2, #38727	; 0x9747
 798:	ldr	r1, [fp, #-40]	; 0xffffffd8
 79c:	ldr	r0, [fp, #-36]	; 0xffffffdc
 7a0:	bl	514 <murmurhash2@plt>
 7a4:	mov	r5, r0
 7a8:	mov	r2, r5
 7ac:	ldr	r1, [fp, #-40]	; 0xffffffd8
 7b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
 7b4:	bl	514 <murmurhash2@plt>
 7b8:	mov	r6, r0
 7bc:	mov	r4, #0
 7c0:	b	82c <bloom_init@plt+0x2dc>
 7c4:	mul	r3, r6, r4
 7c8:	add	r3, r5, r3
 7cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
 7d0:	ldr	r2, [r2, #16]
 7d4:	udiv	r1, r3, r2
 7d8:	mul	r2, r2, r1
 7dc:	sub	r7, r3, r2
 7e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 7e4:	ldr	r3, [r3, #40]	; 0x28
 7e8:	ldr	r2, [fp, #-44]	; 0xffffffd4
 7ec:	mov	r1, r7
 7f0:	mov	r0, r3
 7f4:	bl	688 <bloom_init@plt+0x138>
 7f8:	mov	r3, r0
 7fc:	cmp	r3, #0
 800:	beq	814 <bloom_init@plt+0x2c4>
 804:	ldr	r3, [fp, #-24]	; 0xffffffe8
 808:	add	r3, r3, #1
 80c:	str	r3, [fp, #-24]	; 0xffffffe8
 810:	b	828 <bloom_init@plt+0x2d8>
 814:	ldr	r3, [fp, #-44]	; 0xffffffd4
 818:	cmp	r3, #0
 81c:	bne	828 <bloom_init@plt+0x2d8>
 820:	mov	r3, #0
 824:	b	85c <bloom_init@plt+0x30c>
 828:	add	r4, r4, #1
 82c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 830:	ldr	r3, [r3, #24]
 834:	cmp	r4, r3
 838:	bcc	7c4 <bloom_init@plt+0x274>
 83c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 840:	ldr	r3, [r3, #24]
 844:	ldr	r2, [fp, #-24]	; 0xffffffe8
 848:	cmp	r2, r3
 84c:	bne	858 <bloom_init@plt+0x308>
 850:	mov	r3, #1
 854:	b	85c <bloom_init@plt+0x30c>
 858:	mov	r3, #0
 85c:	mov	r0, r3
 860:	sub	sp, fp, #20
 864:	ldrd	r4, [sp]
 868:	ldrd	r6, [sp, #8]
 86c:	ldr	fp, [sp, #16]
 870:	add	sp, sp, #20
 874:	pop	{pc}		; (ldr pc, [sp], #4)
 878:	andeq	r0, r0, r0, lsr r7

0000087c <bloom_init_size@@Base>:
 87c:	str	fp, [sp, #-8]!
 880:	str	lr, [sp, #4]
 884:	add	fp, sp, #4
 888:	sub	sp, sp, #24
 88c:	str	r0, [fp, #-8]
 890:	str	r1, [fp, #-12]
 894:	vstr	d0, [fp, #-20]	; 0xffffffec
 898:	str	r2, [fp, #-24]	; 0xffffffe8
 89c:	vldr	d0, [fp, #-20]	; 0xffffffec
 8a0:	ldr	r1, [fp, #-12]
 8a4:	ldr	r0, [fp, #-8]
 8a8:	bl	550 <bloom_init@plt>
 8ac:	mov	r3, r0
 8b0:	mov	r0, r3
 8b4:	sub	sp, fp, #4
 8b8:	ldr	fp, [sp]
 8bc:	add	sp, sp, #4
 8c0:	pop	{pc}		; (ldr pc, [sp], #4)

000008c4 <bloom_init@@Base>:
 8c4:	str	fp, [sp, #-8]!
 8c8:	str	lr, [sp, #4]
 8cc:	add	fp, sp, #4
 8d0:	sub	sp, sp, #40	; 0x28
 8d4:	str	r0, [fp, #-32]	; 0xffffffe0
 8d8:	str	r1, [fp, #-36]	; 0xffffffdc
 8dc:	vstr	d0, [fp, #-44]	; 0xffffffd4
 8e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 8e4:	mov	r2, #0
 8e8:	str	r2, [r3, #44]	; 0x2c
 8ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
 8f0:	cmp	r3, #1000	; 0x3e8
 8f4:	blt	908 <bloom_init@@Base+0x44>
 8f8:	vldr	d7, [fp, #-44]	; 0xffffffd4
 8fc:	vcmp.f64	d7, #0.0
 900:	vmrs	APSR_nzcv, fpscr
 904:	bne	910 <bloom_init@@Base+0x4c>
 908:	mov	r3, #1
 90c:	b	a78 <bloom_init@@Base+0x1b4>
 910:	ldr	r3, [fp, #-32]	; 0xffffffe0
 914:	ldr	r2, [fp, #-36]	; 0xffffffdc
 918:	str	r2, [r3]
 91c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 920:	ldrd	r2, [fp, #-44]	; 0xffffffd4
 924:	strd	r2, [r1, #8]
 928:	ldr	r3, [fp, #-32]	; 0xffffffe0
 92c:	vldr	d7, [r3, #8]
 930:	vmov.f64	d0, d7
 934:	bl	4f0 <log@plt>
 938:	vstr	d0, [fp, #-12]
 93c:	movw	r2, #50567	; 0xc587
 940:	movt	r2, #65410	; 0xff82
 944:	movw	r3, #49085	; 0xbfbd
 948:	movt	r3, #16350	; 0x3fde
 94c:	strd	r2, [fp, #-20]	; 0xffffffec
 950:	vldr	d5, [fp, #-12]
 954:	vldr	d6, [fp, #-20]	; 0xffffffec
 958:	vdiv.f64	d7, d5, d6
 95c:	vneg.f64	d7, d7
 960:	ldr	r3, [fp, #-32]	; 0xffffffe0
 964:	vstr	d7, [r3, #32]
 968:	ldr	r3, [fp, #-36]	; 0xffffffdc
 96c:	vmov	s15, r3
 970:	vcvt.f64.s32	d7, s15
 974:	vstr	d7, [fp, #-28]	; 0xffffffe4
 978:	ldr	r3, [fp, #-32]	; 0xffffffe0
 97c:	vldr	d6, [r3, #32]
 980:	vldr	d7, [fp, #-28]	; 0xffffffe4
 984:	vmul.f64	d7, d6, d7
 988:	vcvt.s32.f64	s15, d7
 98c:	vmov	r2, s15
 990:	ldr	r3, [fp, #-32]	; 0xffffffe0
 994:	str	r2, [r3, #16]
 998:	ldr	r3, [fp, #-32]	; 0xffffffe0
 99c:	ldr	r3, [r3, #16]
 9a0:	and	r3, r3, #7
 9a4:	cmp	r3, #0
 9a8:	beq	9d8 <bloom_init@@Base+0x114>
 9ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
 9b0:	ldr	r3, [r3, #16]
 9b4:	add	r2, r3, #7
 9b8:	cmp	r3, #0
 9bc:	movlt	r3, r2
 9c0:	movge	r3, r3
 9c4:	asr	r3, r3, #3
 9c8:	add	r2, r3, #1
 9cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
 9d0:	str	r2, [r3, #20]
 9d4:	b	a00 <bloom_init@@Base+0x13c>
 9d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
 9dc:	ldr	r3, [r3, #16]
 9e0:	add	r2, r3, #7
 9e4:	cmp	r3, #0
 9e8:	movlt	r3, r2
 9ec:	movge	r3, r3
 9f0:	asr	r3, r3, #3
 9f4:	mov	r2, r3
 9f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
 9fc:	str	r2, [r3, #20]
 a00:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a04:	vldr	d7, [r3, #32]
 a08:	vldr	d6, [pc, #128]	; a90 <bloom_init@@Base+0x1cc>
 a0c:	vmul.f64	d7, d7, d6
 a10:	vmov.f64	d0, d7
 a14:	bl	544 <ceil@plt>
 a18:	vmov.f64	d7, d0
 a1c:	vcvt.s32.f64	s15, d7
 a20:	vmov	r2, s15
 a24:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a28:	str	r2, [r3, #24]
 a2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a30:	ldr	r3, [r3, #20]
 a34:	mov	r1, #1
 a38:	mov	r0, r3
 a3c:	bl	4e4 <calloc@plt>
 a40:	mov	r3, r0
 a44:	mov	r2, r3
 a48:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a4c:	str	r2, [r3, #40]	; 0x28
 a50:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a54:	ldr	r3, [r3, #40]	; 0x28
 a58:	cmp	r3, #0
 a5c:	bne	a68 <bloom_init@@Base+0x1a4>
 a60:	mov	r3, #1
 a64:	b	a78 <bloom_init@@Base+0x1b4>
 a68:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a6c:	mov	r2, #1
 a70:	str	r2, [r3, #44]	; 0x2c
 a74:	mov	r3, #0
 a78:	mov	r0, r3
 a7c:	sub	sp, fp, #4
 a80:	ldr	fp, [sp]
 a84:	add	sp, sp, #4
 a88:	pop	{pc}		; (ldr pc, [sp], #4)
 a8c:	nop	{0}
 a90:			; <UNDEFINED> instruction: 0xfefa39ec
 a94:	svccc	0x00e62e42

00000a98 <bloom_check@@Base>:
 a98:	str	fp, [sp, #-8]!
 a9c:	str	lr, [sp, #4]
 aa0:	add	fp, sp, #4
 aa4:	sub	sp, sp, #16
 aa8:	str	r0, [fp, #-8]
 aac:	str	r1, [fp, #-12]
 ab0:	str	r2, [fp, #-16]
 ab4:	mov	r3, #0
 ab8:	ldr	r2, [fp, #-16]
 abc:	ldr	r1, [fp, #-12]
 ac0:	ldr	r0, [fp, #-8]
 ac4:	bl	734 <bloom_init@plt+0x1e4>
 ac8:	mov	r3, r0
 acc:	mov	r0, r3
 ad0:	sub	sp, fp, #4
 ad4:	ldr	fp, [sp]
 ad8:	add	sp, sp, #4
 adc:	pop	{pc}		; (ldr pc, [sp], #4)

00000ae0 <bloom_add@@Base>:
 ae0:	str	fp, [sp, #-8]!
 ae4:	str	lr, [sp, #4]
 ae8:	add	fp, sp, #4
 aec:	sub	sp, sp, #16
 af0:	str	r0, [fp, #-8]
 af4:	str	r1, [fp, #-12]
 af8:	str	r2, [fp, #-16]
 afc:	mov	r3, #1
 b00:	ldr	r2, [fp, #-16]
 b04:	ldr	r1, [fp, #-12]
 b08:	ldr	r0, [fp, #-8]
 b0c:	bl	734 <bloom_init@plt+0x1e4>
 b10:	mov	r3, r0
 b14:	mov	r0, r3
 b18:	sub	sp, fp, #4
 b1c:	ldr	fp, [sp]
 b20:	add	sp, sp, #4
 b24:	pop	{pc}		; (ldr pc, [sp], #4)

00000b28 <bloom_print@@Base>:
 b28:	str	fp, [sp, #-8]!
 b2c:	str	lr, [sp, #4]
 b30:	add	fp, sp, #4
 b34:	sub	sp, sp, #8
 b38:	str	r0, [fp, #-8]
 b3c:	ldr	r1, [fp, #-8]
 b40:	ldr	r3, [pc, #188]	; c04 <bloom_print@@Base+0xdc>
 b44:	add	r3, pc, r3
 b48:	mov	r0, r3
 b4c:	bl	508 <printf@plt>
 b50:	ldr	r3, [fp, #-8]
 b54:	ldr	r3, [r3]
 b58:	mov	r1, r3
 b5c:	ldr	r3, [pc, #164]	; c08 <bloom_print@@Base+0xe0>
 b60:	add	r3, pc, r3
 b64:	mov	r0, r3
 b68:	bl	508 <printf@plt>
 b6c:	ldr	r3, [fp, #-8]
 b70:	ldrd	r2, [r3, #8]
 b74:	ldr	r1, [pc, #144]	; c0c <bloom_print@@Base+0xe4>
 b78:	add	r1, pc, r1
 b7c:	mov	r0, r1
 b80:	bl	508 <printf@plt>
 b84:	ldr	r3, [fp, #-8]
 b88:	ldr	r3, [r3, #16]
 b8c:	mov	r1, r3
 b90:	ldr	r3, [pc, #120]	; c10 <bloom_print@@Base+0xe8>
 b94:	add	r3, pc, r3
 b98:	mov	r0, r3
 b9c:	bl	508 <printf@plt>
 ba0:	ldr	r3, [fp, #-8]
 ba4:	ldrd	r2, [r3, #32]
 ba8:	ldr	r1, [pc, #100]	; c14 <bloom_print@@Base+0xec>
 bac:	add	r1, pc, r1
 bb0:	mov	r0, r1
 bb4:	bl	508 <printf@plt>
 bb8:	ldr	r3, [fp, #-8]
 bbc:	ldr	r3, [r3, #20]
 bc0:	mov	r1, r3
 bc4:	ldr	r3, [pc, #76]	; c18 <bloom_print@@Base+0xf0>
 bc8:	add	r3, pc, r3
 bcc:	mov	r0, r3
 bd0:	bl	508 <printf@plt>
 bd4:	ldr	r3, [fp, #-8]
 bd8:	ldr	r3, [r3, #24]
 bdc:	mov	r1, r3
 be0:	ldr	r3, [pc, #52]	; c1c <bloom_print@@Base+0xf4>
 be4:	add	r3, pc, r3
 be8:	mov	r0, r3
 bec:	bl	508 <printf@plt>
 bf0:	nop	{0}
 bf4:	sub	sp, fp, #4
 bf8:	ldr	fp, [sp]
 bfc:	add	sp, sp, #4
 c00:	pop	{pc}		; (ldr pc, [sp], #4)
 c04:	andeq	r0, r0, r0, lsl #7
 c08:	andeq	r0, r0, r4, ror r3
 c0c:	andeq	r0, r0, r0, ror r3
 c10:	andeq	r0, r0, r4, ror #6
 c14:	andeq	r0, r0, ip, asr r3
 c18:	andeq	r0, r0, r8, asr r3
 c1c:	andeq	r0, r0, ip, asr #6

00000c20 <bloom_free@@Base>:
 c20:	str	fp, [sp, #-8]!
 c24:	str	lr, [sp, #4]
 c28:	add	fp, sp, #4
 c2c:	sub	sp, sp, #8
 c30:	str	r0, [fp, #-8]
 c34:	ldr	r3, [fp, #-8]
 c38:	ldr	r3, [r3, #44]	; 0x2c
 c3c:	cmp	r3, #0
 c40:	beq	c54 <bloom_free@@Base+0x34>
 c44:	ldr	r3, [fp, #-8]
 c48:	ldr	r3, [r3, #40]	; 0x28
 c4c:	mov	r0, r3
 c50:	bl	520 <free@plt>
 c54:	ldr	r3, [fp, #-8]
 c58:	mov	r2, #0
 c5c:	str	r2, [r3, #44]	; 0x2c
 c60:	nop	{0}
 c64:	sub	sp, fp, #4
 c68:	ldr	fp, [sp]
 c6c:	add	sp, sp, #4
 c70:	pop	{pc}		; (ldr pc, [sp], #4)

00000c74 <bloom_reset@@Base>:
 c74:	str	fp, [sp, #-8]!
 c78:	str	lr, [sp, #4]
 c7c:	add	fp, sp, #4
 c80:	sub	sp, sp, #8
 c84:	str	r0, [fp, #-8]
 c88:	ldr	r3, [fp, #-8]
 c8c:	ldr	r3, [r3, #44]	; 0x2c
 c90:	cmp	r3, #0
 c94:	bne	ca0 <bloom_reset@@Base+0x2c>
 c98:	mov	r3, #1
 c9c:	b	cc0 <bloom_reset@@Base+0x4c>
 ca0:	ldr	r3, [fp, #-8]
 ca4:	ldr	r0, [r3, #40]	; 0x28
 ca8:	ldr	r3, [fp, #-8]
 cac:	ldr	r3, [r3, #20]
 cb0:	mov	r2, r3
 cb4:	mov	r1, #0
 cb8:	bl	538 <memset@plt>
 cbc:	mov	r3, #0
 cc0:	mov	r0, r3
 cc4:	sub	sp, fp, #4
 cc8:	ldr	fp, [sp]
 ccc:	add	sp, sp, #4
 cd0:	pop	{pc}		; (ldr pc, [sp], #4)

00000cd4 <bloom_version@@Base>:
 cd4:	push	{fp}		; (str fp, [sp, #-4]!)
 cd8:	add	fp, sp, #0
 cdc:	ldr	r3, [pc, #16]	; cf4 <bloom_version@@Base+0x20>
 ce0:	add	r3, pc, r3
 ce4:	mov	r0, r3
 ce8:	add	sp, fp, #0
 cec:	pop	{fp}		; (ldr fp, [sp], #4)
 cf0:	bx	lr
 cf4:	andeq	r0, r0, r8, ror #4

00000cf8 <murmurhash2@@Base>:
 cf8:	push	{fp}		; (str fp, [sp, #-4]!)
 cfc:	add	fp, sp, #0
 d00:	sub	sp, sp, #44	; 0x2c
 d04:	str	r0, [fp, #-32]	; 0xffffffe0
 d08:	str	r1, [fp, #-36]	; 0xffffffdc
 d0c:	str	r2, [fp, #-40]	; 0xffffffd8
 d10:	movw	r3, #59797	; 0xe995
 d14:	movt	r3, #23505	; 0x5bd1
 d18:	str	r3, [fp, #-16]
 d1c:	mov	r3, #24
 d20:	str	r3, [fp, #-20]	; 0xffffffec
 d24:	ldr	r3, [fp, #-36]	; 0xffffffdc
 d28:	ldr	r2, [fp, #-40]	; 0xffffffd8
 d2c:	eor	r3, r3, r2
 d30:	str	r3, [fp, #-8]
 d34:	ldr	r3, [fp, #-32]	; 0xffffffe0
 d38:	str	r3, [fp, #-12]
 d3c:	b	dbc <murmurhash2@@Base+0xc4>
 d40:	ldr	r3, [fp, #-12]
 d44:	ldr	r3, [r3]
 d48:	str	r3, [fp, #-24]	; 0xffffffe8
 d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 d50:	ldr	r2, [fp, #-16]
 d54:	mul	r3, r2, r3
 d58:	str	r3, [fp, #-24]	; 0xffffffe8
 d5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 d60:	ldr	r3, [fp, #-20]	; 0xffffffec
 d64:	lsr	r3, r2, r3
 d68:	ldr	r2, [fp, #-24]	; 0xffffffe8
 d6c:	eor	r3, r3, r2
 d70:	str	r3, [fp, #-24]	; 0xffffffe8
 d74:	ldr	r3, [fp, #-24]	; 0xffffffe8
 d78:	ldr	r2, [fp, #-16]
 d7c:	mul	r3, r2, r3
 d80:	str	r3, [fp, #-24]	; 0xffffffe8
 d84:	ldr	r3, [fp, #-8]
 d88:	ldr	r2, [fp, #-16]
 d8c:	mul	r3, r2, r3
 d90:	str	r3, [fp, #-8]
 d94:	ldr	r2, [fp, #-8]
 d98:	ldr	r3, [fp, #-24]	; 0xffffffe8
 d9c:	eor	r3, r3, r2
 da0:	str	r3, [fp, #-8]
 da4:	ldr	r3, [fp, #-12]
 da8:	add	r3, r3, #4
 dac:	str	r3, [fp, #-12]
 db0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 db4:	sub	r3, r3, #4
 db8:	str	r3, [fp, #-36]	; 0xffffffdc
 dbc:	ldr	r3, [fp, #-36]	; 0xffffffdc
 dc0:	cmp	r3, #3
 dc4:	bgt	d40 <murmurhash2@@Base+0x48>
 dc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 dcc:	cmp	r3, #2
 dd0:	beq	e10 <murmurhash2@@Base+0x118>
 dd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
 dd8:	cmp	r3, #3
 ddc:	beq	df0 <murmurhash2@@Base+0xf8>
 de0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 de4:	cmp	r3, #1
 de8:	beq	e30 <murmurhash2@@Base+0x138>
 dec:	b	e58 <murmurhash2@@Base+0x160>
 df0:	ldr	r3, [fp, #-12]
 df4:	add	r3, r3, #2
 df8:	ldrb	r3, [r3]
 dfc:	lsl	r3, r3, #16
 e00:	mov	r2, r3
 e04:	ldr	r3, [fp, #-8]
 e08:	eor	r3, r3, r2
 e0c:	str	r3, [fp, #-8]
 e10:	ldr	r3, [fp, #-12]
 e14:	add	r3, r3, #1
 e18:	ldrb	r3, [r3]
 e1c:	lsl	r3, r3, #8
 e20:	mov	r2, r3
 e24:	ldr	r3, [fp, #-8]
 e28:	eor	r3, r3, r2
 e2c:	str	r3, [fp, #-8]
 e30:	ldr	r3, [fp, #-12]
 e34:	ldrb	r3, [r3]
 e38:	mov	r2, r3
 e3c:	ldr	r3, [fp, #-8]
 e40:	eor	r3, r3, r2
 e44:	str	r3, [fp, #-8]
 e48:	ldr	r3, [fp, #-8]
 e4c:	ldr	r2, [fp, #-16]
 e50:	mul	r3, r2, r3
 e54:	str	r3, [fp, #-8]
 e58:	ldr	r3, [fp, #-8]
 e5c:	lsr	r3, r3, #13
 e60:	ldr	r2, [fp, #-8]
 e64:	eor	r3, r3, r2
 e68:	str	r3, [fp, #-8]
 e6c:	ldr	r3, [fp, #-8]
 e70:	ldr	r2, [fp, #-16]
 e74:	mul	r3, r2, r3
 e78:	str	r3, [fp, #-8]
 e7c:	ldr	r3, [fp, #-8]
 e80:	lsr	r3, r3, #15
 e84:	ldr	r2, [fp, #-8]
 e88:	eor	r3, r3, r2
 e8c:	str	r3, [fp, #-8]
 e90:	ldr	r3, [fp, #-8]
 e94:	mov	r0, r3
 e98:	add	sp, fp, #0
 e9c:	pop	{fp}		; (ldr fp, [sp], #4)
 ea0:	bx	lr

Disassembly of section .fini:

00000ea4 <.fini>:
 ea4:	push	{r3, lr}
 ea8:	pop	{r3, pc}
