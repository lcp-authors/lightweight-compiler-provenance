
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010e60 <.init>:
   10e60:	push	{r3, lr}
   10e64:	bl	11144 <__assert_fail@plt+0x48>
   10e68:	pop	{r3, pc}

Disassembly of section .plt:

00010e6c <calloc@plt-0x14>:
   10e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e70:	ldr	lr, [pc, #4]	; 10e7c <calloc@plt-0x4>
   10e74:	add	lr, pc, lr
   10e78:	ldr	pc, [lr, #8]!
   10e7c:	andeq	r8, r1, r4, lsl #3

00010e80 <calloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #388]!	; 0x184

00010e8c <fputs_unlocked@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #380]!	; 0x17c

00010e98 <raise@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #372]!	; 0x174

00010ea4 <strcmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #364]!	; 0x16c

00010eb0 <posix_fadvise64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #356]!	; 0x164

00010ebc <fflush@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #348]!	; 0x15c

00010ec8 <memmove@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #340]!	; 0x154

00010ed4 <free@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #332]!	; 0x14c

00010ee0 <_exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #324]!	; 0x144

00010eec <memcpy@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #316]!	; 0x13c

00010ef8 <mbsinit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #308]!	; 0x134

00010f04 <fwrite_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #300]!	; 0x12c

00010f10 <fputc_unlocked@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #24, 20	; 0x18000
   10f18:	ldr	pc, [ip, #292]!	; 0x124

00010f1c <dcgettext@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #24, 20	; 0x18000
   10f24:	ldr	pc, [ip, #284]!	; 0x11c

00010f28 <realloc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #24, 20	; 0x18000
   10f30:	ldr	pc, [ip, #276]!	; 0x114

00010f34 <textdomain@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #268]!	; 0x10c

00010f40 <iswprint@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #260]!	; 0x104

00010f4c <fwrite@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #252]!	; 0xfc

00010f58 <lseek64@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #244]!	; 0xf4

00010f64 <__ctype_get_mb_cur_max@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #24, 20	; 0x18000
   10f6c:	ldr	pc, [ip, #236]!	; 0xec

00010f70 <__fpending@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #24, 20	; 0x18000
   10f78:	ldr	pc, [ip, #228]!	; 0xe4

00010f7c <ferror_unlocked@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #24, 20	; 0x18000
   10f84:	ldr	pc, [ip, #220]!	; 0xdc

00010f88 <mbrtowc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #24, 20	; 0x18000
   10f90:	ldr	pc, [ip, #212]!	; 0xd4

00010f94 <error@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #24, 20	; 0x18000
   10f9c:	ldr	pc, [ip, #204]!	; 0xcc

00010fa0 <malloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #24, 20	; 0x18000
   10fa8:	ldr	pc, [ip, #196]!	; 0xc4

00010fac <__libc_start_main@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #24, 20	; 0x18000
   10fb4:	ldr	pc, [ip, #188]!	; 0xbc

00010fb8 <__freading@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #24, 20	; 0x18000
   10fc0:	ldr	pc, [ip, #180]!	; 0xb4

00010fc4 <__gmon_start__@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #24, 20	; 0x18000
   10fcc:	ldr	pc, [ip, #172]!	; 0xac

00010fd0 <getopt_long@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #24, 20	; 0x18000
   10fd8:	ldr	pc, [ip, #164]!	; 0xa4

00010fdc <__ctype_b_loc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #24, 20	; 0x18000
   10fe4:	ldr	pc, [ip, #156]!	; 0x9c

00010fe8 <exit@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #24, 20	; 0x18000
   10ff0:	ldr	pc, [ip, #148]!	; 0x94

00010ff4 <bcmp@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #24, 20	; 0x18000
   10ffc:	ldr	pc, [ip, #140]!	; 0x8c

00011000 <strlen@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #24, 20	; 0x18000
   11008:	ldr	pc, [ip, #132]!	; 0x84

0001100c <strchr@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #24, 20	; 0x18000
   11014:	ldr	pc, [ip, #124]!	; 0x7c

00011018 <__errno_location@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #24, 20	; 0x18000
   11020:	ldr	pc, [ip, #116]!	; 0x74

00011024 <__cxa_atexit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #24, 20	; 0x18000
   1102c:	ldr	pc, [ip, #108]!	; 0x6c

00011030 <memset@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #24, 20	; 0x18000
   11038:	ldr	pc, [ip, #100]!	; 0x64

0001103c <__printf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #24, 20	; 0x18000
   11044:	ldr	pc, [ip, #92]!	; 0x5c

00011048 <fileno@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #24, 20	; 0x18000
   11050:	ldr	pc, [ip, #84]!	; 0x54

00011054 <__fprintf_chk@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #24, 20	; 0x18000
   1105c:	ldr	pc, [ip, #76]!	; 0x4c

00011060 <memchr@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #24, 20	; 0x18000
   11068:	ldr	pc, [ip, #68]!	; 0x44

0001106c <strtoimax@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #24, 20	; 0x18000
   11074:	ldr	pc, [ip, #60]!	; 0x3c

00011078 <fclose@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #24, 20	; 0x18000
   11080:	ldr	pc, [ip, #52]!	; 0x34

00011084 <fseeko64@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #24, 20	; 0x18000
   1108c:	ldr	pc, [ip, #44]!	; 0x2c

00011090 <setlocale@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #24, 20	; 0x18000
   11098:	ldr	pc, [ip, #36]!	; 0x24

0001109c <strrchr@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #24, 20	; 0x18000
   110a4:	ldr	pc, [ip, #28]!

000110a8 <nl_langinfo@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #24, 20	; 0x18000
   110b0:	ldr	pc, [ip, #20]!

000110b4 <fopen64@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #24, 20	; 0x18000
   110bc:	ldr	pc, [ip, #12]!

000110c0 <bindtextdomain@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #4]!

000110cc <fread_unlocked@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #94208	; 0x17000
   110d4:	ldr	pc, [ip, #4092]!	; 0xffc

000110d8 <strncmp@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #94208	; 0x17000
   110e0:	ldr	pc, [ip, #4084]!	; 0xff4

000110e4 <abort@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #94208	; 0x17000
   110ec:	ldr	pc, [ip, #4076]!	; 0xfec

000110f0 <feof_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #94208	; 0x17000
   110f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #94208	; 0x17000
   11104:	ldr	pc, [ip, #4060]!	; 0xfdc

Disassembly of section .text:

00011108 <.text>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <__assert_fail@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <__assert_fail@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <__assert_fail@plt+0x44>
   11130:	bl	10fac <__libc_start_main@plt>
   11134:	bl	110e4 <abort@plt>
   11138:	andeq	r7, r1, r4, lsl #5
   1113c:	andeq	r1, r1, ip, ror #11
   11140:	andeq	r7, r1, r4, lsr #4
   11144:	ldr	r3, [pc, #20]	; 11160 <__assert_fail@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <__assert_fail@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	10fc4 <__gmon_start__@plt>
   11160:	andeq	r7, r1, ip, lsr #29
   11164:	andeq	r0, r0, r4, ror #1
   11168:	ldr	r0, [pc, #24]	; 11188 <__assert_fail@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <__assert_fail@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r9, r2, r8, lsr r1
   1118c:	andeq	r9, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <__assert_fail@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <__assert_fail@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <__assert_fail@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r9, r2, r8, lsr r1
   111c4:	andeq	r9, r2, r8, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <__assert_fail@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <__assert_fail@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r9, r2, ip, asr r1
   111f4:	b	11194 <__assert_fail@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	mov	r4, r0
   11204:	cmp	r0, #0
   11208:	bne	113c0 <__assert_fail@plt+0x2c4>
   1120c:	movw	r1, #29395	; 0x72d3
   11210:	movt	r1, #1
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	bl	10f1c <dcgettext@plt>
   11220:	mov	r1, r0
   11224:	movw	r0, #37244	; 0x917c
   11228:	movt	r0, #2
   1122c:	ldr	r2, [r0]
   11230:	mov	r0, #1
   11234:	bl	1103c <__printf_chk@plt>
   11238:	movw	r1, #29425	; 0x72f1
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10f1c <dcgettext@plt>
   1124c:	movw	r5, #37204	; 0x9154
   11250:	movt	r5, #2
   11254:	ldr	r1, [r5]
   11258:	bl	10e8c <fputs_unlocked@plt>
   1125c:	bl	11404 <__assert_fail@plt+0x308>
   11260:	bl	11434 <__assert_fail@plt+0x338>
   11264:	movw	r1, #29495	; 0x7337
   11268:	movt	r1, #1
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	bl	10f1c <dcgettext@plt>
   11278:	ldr	r1, [r5]
   1127c:	bl	10e8c <fputs_unlocked@plt>
   11280:	movw	r1, #29565	; 0x737d
   11284:	movt	r1, #1
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	bl	10f1c <dcgettext@plt>
   11294:	ldr	r1, [r5]
   11298:	bl	10e8c <fputs_unlocked@plt>
   1129c:	movw	r1, #29636	; 0x73c4
   112a0:	movt	r1, #1
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	bl	10f1c <dcgettext@plt>
   112b0:	ldr	r1, [r5]
   112b4:	bl	10e8c <fputs_unlocked@plt>
   112b8:	movw	r1, #29706	; 0x740a
   112bc:	movt	r1, #1
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	bl	10f1c <dcgettext@plt>
   112cc:	ldr	r1, [r5]
   112d0:	bl	10e8c <fputs_unlocked@plt>
   112d4:	movw	r1, #29780	; 0x7454
   112d8:	movt	r1, #1
   112dc:	mov	r0, #0
   112e0:	mov	r2, #5
   112e4:	bl	10f1c <dcgettext@plt>
   112e8:	ldr	r1, [r5]
   112ec:	bl	10e8c <fputs_unlocked@plt>
   112f0:	movw	r1, #29838	; 0x748e
   112f4:	movt	r1, #1
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	bl	10f1c <dcgettext@plt>
   11304:	ldr	r1, [r5]
   11308:	bl	10e8c <fputs_unlocked@plt>
   1130c:	movw	r1, #29912	; 0x74d8
   11310:	movt	r1, #1
   11314:	mov	r0, #0
   11318:	mov	r2, #5
   1131c:	bl	10f1c <dcgettext@plt>
   11320:	ldr	r1, [r5]
   11324:	bl	10e8c <fputs_unlocked@plt>
   11328:	movw	r1, #29987	; 0x7523
   1132c:	movt	r1, #1
   11330:	mov	r0, #0
   11334:	mov	r2, #5
   11338:	bl	10f1c <dcgettext@plt>
   1133c:	ldr	r1, [r5]
   11340:	bl	10e8c <fputs_unlocked@plt>
   11344:	movw	r1, #30229	; 0x7615
   11348:	movt	r1, #1
   1134c:	mov	r0, #0
   11350:	mov	r2, #5
   11354:	bl	10f1c <dcgettext@plt>
   11358:	ldr	r1, [r5]
   1135c:	bl	10e8c <fputs_unlocked@plt>
   11360:	movw	r1, #30451	; 0x76f3
   11364:	movt	r1, #1
   11368:	mov	r0, #0
   1136c:	mov	r2, #5
   11370:	bl	10f1c <dcgettext@plt>
   11374:	ldr	r1, [r5]
   11378:	bl	10e8c <fputs_unlocked@plt>
   1137c:	movw	r1, #30496	; 0x7720
   11380:	movt	r1, #1
   11384:	mov	r0, #0
   11388:	mov	r2, #5
   1138c:	bl	10f1c <dcgettext@plt>
   11390:	ldr	r1, [r5]
   11394:	bl	10e8c <fputs_unlocked@plt>
   11398:	movw	r1, #30550	; 0x7756
   1139c:	movt	r1, #1
   113a0:	mov	r0, #0
   113a4:	mov	r2, #5
   113a8:	bl	10f1c <dcgettext@plt>
   113ac:	ldr	r1, [r5]
   113b0:	bl	10e8c <fputs_unlocked@plt>
   113b4:	bl	11464 <__assert_fail@plt+0x368>
   113b8:	mov	r0, r4
   113bc:	bl	10fe8 <exit@plt>
   113c0:	movw	r0, #37192	; 0x9148
   113c4:	movt	r0, #2
   113c8:	ldr	r5, [r0]
   113cc:	movw	r1, #29356	; 0x72ac
   113d0:	movt	r1, #1
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	bl	10f1c <dcgettext@plt>
   113e0:	mov	r2, r0
   113e4:	movw	r0, #37244	; 0x917c
   113e8:	movt	r0, #2
   113ec:	ldr	r3, [r0]
   113f0:	mov	r0, r5
   113f4:	mov	r1, #1
   113f8:	bl	11054 <__fprintf_chk@plt>
   113fc:	mov	r0, r4
   11400:	bl	10fe8 <exit@plt>
   11404:	push	{fp, lr}
   11408:	mov	fp, sp
   1140c:	movw	r1, #30894	; 0x78ae
   11410:	movt	r1, #1
   11414:	mov	r0, #0
   11418:	mov	r2, #5
   1141c:	bl	10f1c <dcgettext@plt>
   11420:	movw	r1, #37204	; 0x9154
   11424:	movt	r1, #2
   11428:	ldr	r1, [r1]
   1142c:	pop	{fp, lr}
   11430:	b	10e8c <fputs_unlocked@plt>
   11434:	push	{fp, lr}
   11438:	mov	fp, sp
   1143c:	movw	r1, #30950	; 0x78e6
   11440:	movt	r1, #1
   11444:	mov	r0, #0
   11448:	mov	r2, #5
   1144c:	bl	10f1c <dcgettext@plt>
   11450:	movw	r1, #37204	; 0x9154
   11454:	movt	r1, #2
   11458:	ldr	r1, [r1]
   1145c:	pop	{fp, lr}
   11460:	b	10e8c <fputs_unlocked@plt>
   11464:	push	{r4, r5, r6, sl, fp, lr}
   11468:	add	fp, sp, #16
   1146c:	sub	sp, sp, #56	; 0x38
   11470:	movw	r0, #31920	; 0x7cb0
   11474:	movt	r0, #1
   11478:	add	r1, r0, #32
   1147c:	mov	r2, #48	; 0x30
   11480:	vld1.64	{d16-d17}, [r1]
   11484:	mov	r6, sp
   11488:	add	r1, r6, #32
   1148c:	add	r3, r0, #16
   11490:	vld1.64	{d18-d19}, [r0], r2
   11494:	vld1.64	{d20-d21}, [r3]
   11498:	vldr	d22, [r0]
   1149c:	vst1.64	{d16-d17}, [r1]
   114a0:	add	r0, r6, #16
   114a4:	vst1.64	{d20-d21}, [r0]
   114a8:	mov	r0, r6
   114ac:	vst1.64	{d18-d19}, [r0], r2
   114b0:	vstr	d22, [r0]
   114b4:	ldr	r1, [sp]
   114b8:	cmp	r1, #0
   114bc:	movw	r4, #30748	; 0x781c
   114c0:	movt	r4, #1
   114c4:	beq	114ec <__assert_fail@plt+0x3f0>
   114c8:	mov	r6, sp
   114cc:	movw	r5, #30748	; 0x781c
   114d0:	movt	r5, #1
   114d4:	mov	r0, r5
   114d8:	bl	10ea4 <strcmp@plt>
   114dc:	cmp	r0, #0
   114e0:	ldrne	r1, [r6, #8]!
   114e4:	cmpne	r1, #0
   114e8:	bne	114d4 <__assert_fail@plt+0x3d8>
   114ec:	ldr	r5, [r6, #4]
   114f0:	movw	r1, #31120	; 0x7990
   114f4:	movt	r1, #1
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	bl	10f1c <dcgettext@plt>
   11504:	mov	r1, r0
   11508:	movw	r2, #30809	; 0x7859
   1150c:	movt	r2, #1
   11510:	movw	r3, #31143	; 0x79a7
   11514:	movt	r3, #1
   11518:	mov	r0, #1
   1151c:	bl	1103c <__printf_chk@plt>
   11520:	cmp	r5, #0
   11524:	moveq	r5, r4
   11528:	mov	r0, #5
   1152c:	mov	r1, #0
   11530:	bl	11090 <setlocale@plt>
   11534:	cmp	r0, #0
   11538:	beq	11578 <__assert_fail@plt+0x47c>
   1153c:	movw	r1, #31183	; 0x79cf
   11540:	movt	r1, #1
   11544:	mov	r2, #3
   11548:	bl	110d8 <strncmp@plt>
   1154c:	cmp	r0, #0
   11550:	beq	11578 <__assert_fail@plt+0x47c>
   11554:	movw	r1, #31187	; 0x79d3
   11558:	movt	r1, #1
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	bl	10f1c <dcgettext@plt>
   11568:	movw	r1, #37204	; 0x9154
   1156c:	movt	r1, #2
   11570:	ldr	r1, [r1]
   11574:	bl	10e8c <fputs_unlocked@plt>
   11578:	movw	r1, #31258	; 0x7a1a
   1157c:	movt	r1, #1
   11580:	mov	r0, #0
   11584:	mov	r2, #5
   11588:	bl	10f1c <dcgettext@plt>
   1158c:	mov	r1, r0
   11590:	movw	r2, #31143	; 0x79a7
   11594:	movt	r2, #1
   11598:	mov	r0, #1
   1159c:	mov	r3, r4
   115a0:	bl	1103c <__printf_chk@plt>
   115a4:	movw	r0, #31053	; 0x794d
   115a8:	movt	r0, #1
   115ac:	movw	r6, #31335	; 0x7a67
   115b0:	movt	r6, #1
   115b4:	cmp	r5, r4
   115b8:	moveq	r6, r0
   115bc:	movw	r1, #31285	; 0x7a35
   115c0:	movt	r1, #1
   115c4:	mov	r0, #0
   115c8:	mov	r2, #5
   115cc:	bl	10f1c <dcgettext@plt>
   115d0:	mov	r1, r0
   115d4:	mov	r0, #1
   115d8:	mov	r2, r5
   115dc:	mov	r3, r6
   115e0:	sub	sp, fp, #16
   115e4:	pop	{r4, r5, r6, sl, fp, lr}
   115e8:	b	1103c <__printf_chk@plt>
   115ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115f0:	add	fp, sp, #28
   115f4:	sub	sp, sp, #36	; 0x24
   115f8:	mov	r4, r1
   115fc:	mov	r6, r0
   11600:	ldr	r0, [r1]
   11604:	bl	14284 <__assert_fail@plt+0x3188>
   11608:	movw	r1, #31335	; 0x7a67
   1160c:	movt	r1, #1
   11610:	mov	r0, #6
   11614:	bl	11090 <setlocale@plt>
   11618:	movw	r5, #30813	; 0x785d
   1161c:	movt	r5, #1
   11620:	movw	r1, #30755	; 0x7823
   11624:	movt	r1, #1
   11628:	mov	r0, r5
   1162c:	bl	110c0 <bindtextdomain@plt>
   11630:	mov	r0, r5
   11634:	bl	10f34 <textdomain@plt>
   11638:	movw	r0, #16180	; 0x3f34
   1163c:	movt	r0, #1
   11640:	bl	17288 <__assert_fail@plt+0x618c>
   11644:	mov	sl, #0
   11648:	mov	r9, #76	; 0x4c
   1164c:	movw	r7, #30779	; 0x783b
   11650:	movt	r7, #1
   11654:	movw	r5, #31696	; 0x7bd0
   11658:	movt	r5, #1
   1165c:	mov	r0, #0
   11660:	str	r0, [sp, #20]
   11664:	mov	r0, #0
   11668:	str	r0, [sp, #16]
   1166c:	mov	r0, #0
   11670:	b	11680 <__assert_fail@plt+0x584>
   11674:	mov	r0, #1
   11678:	str	r0, [sp, #20]
   1167c:	mov	r0, r8
   11680:	mov	r8, r0
   11684:	str	sl, [sp]
   11688:	mov	r0, r6
   1168c:	mov	r1, r4
   11690:	mov	r2, r7
   11694:	mov	r3, r5
   11698:	bl	10fd0 <getopt_long@plt>
   1169c:	sub	r1, r0, #256	; 0x100
   116a0:	cmp	r1, #8
   116a4:	bcc	11680 <__assert_fail@plt+0x584>
   116a8:	cmp	r0, #99	; 0x63
   116ac:	ble	11730 <__assert_fail@plt+0x634>
   116b0:	cmp	r0, #100	; 0x64
   116b4:	beq	11674 <__assert_fail@plt+0x578>
   116b8:	cmp	r0, #105	; 0x69
   116bc:	beq	11724 <__assert_fail@plt+0x628>
   116c0:	cmp	r0, #119	; 0x77
   116c4:	bne	11884 <__assert_fail@plt+0x788>
   116c8:	movw	r0, #37208	; 0x9158
   116cc:	movt	r0, #2
   116d0:	ldr	r0, [r0]
   116d4:	movw	r1, #31335	; 0x7a67
   116d8:	movt	r1, #1
   116dc:	str	r1, [sp]
   116e0:	mov	r1, #0
   116e4:	mov	r2, #10
   116e8:	add	r3, sp, #24
   116ec:	bl	16768 <__assert_fail@plt+0x566c>
   116f0:	cmp	r0, #1
   116f4:	bhi	11998 <__assert_fail@plt+0x89c>
   116f8:	ldr	r1, [sp, #28]
   116fc:	cmn	r1, #1
   11700:	ble	11998 <__assert_fail@plt+0x89c>
   11704:	ldr	r2, [sp, #24]
   11708:	mvn	r3, #-2147483648	; 0x80000000
   1170c:	subs	r3, r3, r2
   11710:	rscs	r1, r1, #0
   11714:	movwlt	r2, #0
   11718:	subs	r9, r0, #1
   1171c:	movne	r9, r2
   11720:	b	1167c <__assert_fail@plt+0x580>
   11724:	mov	r0, #1
   11728:	str	r0, [sp, #16]
   1172c:	b	1167c <__assert_fail@plt+0x580>
   11730:	cmn	r0, #3
   11734:	beq	11828 <__assert_fail@plt+0x72c>
   11738:	cmn	r0, #2
   1173c:	beq	1187c <__assert_fail@plt+0x780>
   11740:	cmn	r0, #1
   11744:	bne	11884 <__assert_fail@plt+0x788>
   11748:	sub	r0, r8, #256	; 0x100
   1174c:	cmp	r0, #8
   11750:	bcs	1188c <__assert_fail@plt+0x790>
   11754:	movw	r1, #32268	; 0x7e0c
   11758:	movt	r1, #1
   1175c:	ldr	r1, [r1, r0, lsl #2]
   11760:	movw	r2, #37220	; 0x9164
   11764:	movt	r2, #2
   11768:	str	r1, [r2]
   1176c:	movw	r1, #32236	; 0x7dec
   11770:	movt	r1, #1
   11774:	ldr	r1, [r1, r0, lsl #2]
   11778:	movw	r2, #37216	; 0x9160
   1177c:	movt	r2, #2
   11780:	str	r1, [r2]
   11784:	movw	r1, #32300	; 0x7e2c
   11788:	movt	r1, #1
   1178c:	ldr	r1, [r1, r0, lsl #2]
   11790:	movw	r2, #37224	; 0x9168
   11794:	movt	r2, #2
   11798:	str	r1, [r2]
   1179c:	movw	r1, #32332	; 0x7e4c
   117a0:	movt	r1, #1
   117a4:	ldr	r1, [r1, r0, lsl #2]
   117a8:	movw	r2, #37228	; 0x916c
   117ac:	movt	r2, #2
   117b0:	str	r1, [r2]
   117b4:	movw	r1, #32364	; 0x7e6c
   117b8:	movt	r1, #1
   117bc:	ldr	r0, [r1, r0, lsl #2]
   117c0:	movw	r1, #37232	; 0x9170
   117c4:	movt	r1, #2
   117c8:	str	r0, [r1]
   117cc:	movw	r7, #37184	; 0x9140
   117d0:	movt	r7, #2
   117d4:	ldr	r0, [r7]
   117d8:	sub	r1, r6, r0
   117dc:	cmp	r1, #2
   117e0:	blt	118b8 <__assert_fail@plt+0x7bc>
   117e4:	movw	r1, #30874	; 0x789a
   117e8:	movt	r1, #1
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	bl	10f1c <dcgettext@plt>
   117f8:	mov	r5, r0
   117fc:	ldr	r0, [r7]
   11800:	add	r0, r4, r0, lsl #2
   11804:	ldr	r0, [r0, #4]
   11808:	bl	15a78 <__assert_fail@plt+0x497c>
   1180c:	mov	r3, r0
   11810:	mov	r0, #0
   11814:	mov	r1, #0
   11818:	mov	r2, r5
   1181c:	bl	10f94 <error@plt>
   11820:	mov	r0, #1
   11824:	bl	111f8 <__assert_fail@plt+0xfc>
   11828:	movw	r0, #37104	; 0x90f0
   1182c:	movt	r0, #2
   11830:	ldr	r3, [r0]
   11834:	movw	r0, #37204	; 0x9154
   11838:	movt	r0, #2
   1183c:	ldr	r0, [r0]
   11840:	mov	r1, #0
   11844:	movw	r2, #30839	; 0x7877
   11848:	movt	r2, #1
   1184c:	movw	r7, #30823	; 0x7867
   11850:	movt	r7, #1
   11854:	str	r7, [sp]
   11858:	str	r2, [sp, #4]
   1185c:	str	r1, [sp, #8]
   11860:	movw	r1, #30748	; 0x781c
   11864:	movt	r1, #1
   11868:	movw	r2, #30809	; 0x7859
   1186c:	movt	r2, #1
   11870:	bl	1628c <__assert_fail@plt+0x5190>
   11874:	mov	r0, #0
   11878:	bl	10fe8 <exit@plt>
   1187c:	mov	r0, #0
   11880:	bl	111f8 <__assert_fail@plt+0xfc>
   11884:	mov	r0, #1
   11888:	bl	111f8 <__assert_fail@plt+0xfc>
   1188c:	movw	r1, #30852	; 0x7884
   11890:	movt	r1, #1
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	bl	10f1c <dcgettext@plt>
   118a0:	mov	r2, r0
   118a4:	mov	r0, #0
   118a8:	mov	r1, #0
   118ac:	bl	10f94 <error@plt>
   118b0:	mov	r0, #1
   118b4:	bl	111f8 <__assert_fail@plt+0xfc>
   118b8:	cmp	r0, r6
   118bc:	bge	118c8 <__assert_fail@plt+0x7cc>
   118c0:	ldr	r4, [r4, r0, lsl #2]
   118c4:	b	118d0 <__assert_fail@plt+0x7d4>
   118c8:	movw	r4, #33101	; 0x814d
   118cc:	movt	r4, #1
   118d0:	movw	r1, #33101	; 0x814d
   118d4:	movt	r1, #1
   118d8:	mov	r0, r4
   118dc:	bl	10ea4 <strcmp@plt>
   118e0:	cmp	r0, #0
   118e4:	bne	11904 <__assert_fail@plt+0x808>
   118e8:	mov	r0, #0
   118ec:	mov	r1, #0
   118f0:	bl	16764 <__assert_fail@plt+0x5668>
   118f4:	movw	r0, #37200	; 0x9150
   118f8:	movt	r0, #2
   118fc:	ldr	r5, [r0]
   11900:	b	11950 <__assert_fail@plt+0x854>
   11904:	movw	r1, #30891	; 0x78ab
   11908:	movt	r1, #1
   1190c:	mov	r0, r4
   11910:	bl	110b4 <fopen64@plt>
   11914:	mov	r5, r0
   11918:	cmp	r0, #0
   1191c:	bne	11950 <__assert_fail@plt+0x854>
   11920:	bl	11018 <__errno_location@plt>
   11924:	ldr	r5, [r0]
   11928:	mov	r0, #0
   1192c:	mov	r1, #3
   11930:	mov	r2, r4
   11934:	bl	15938 <__assert_fail@plt+0x483c>
   11938:	mov	r3, r0
   1193c:	movw	r2, #30788	; 0x7844
   11940:	movt	r2, #1
   11944:	mov	r0, #1
   11948:	mov	r1, r5
   1194c:	bl	10f94 <error@plt>
   11950:	mov	r0, r5
   11954:	mov	r1, #2
   11958:	bl	14020 <__assert_fail@plt+0x2f24>
   1195c:	movw	r0, #37204	; 0x9154
   11960:	movt	r0, #2
   11964:	ldr	r2, [r0]
   11968:	ldr	r0, [sp, #20]
   1196c:	tst	r0, #1
   11970:	beq	11988 <__assert_fail@plt+0x88c>
   11974:	ldr	r0, [sp, #16]
   11978:	and	r3, r0, #1
   1197c:	mov	r0, r5
   11980:	mov	r1, r4
   11984:	bl	12400 <__assert_fail@plt+0x1304>
   11988:	mov	r0, r5
   1198c:	mov	r1, r4
   11990:	mov	r3, r9
   11994:	bl	12680 <__assert_fail@plt+0x1584>
   11998:	movw	r1, #30791	; 0x7847
   1199c:	movt	r1, #1
   119a0:	mov	r0, #0
   119a4:	mov	r2, #5
   119a8:	bl	10f1c <dcgettext@plt>
   119ac:	mov	r4, r0
   119b0:	movw	r0, #37208	; 0x9158
   119b4:	movt	r0, #2
   119b8:	ldr	r0, [r0]
   119bc:	bl	15a78 <__assert_fail@plt+0x497c>
   119c0:	str	r0, [sp]
   119c4:	movw	r2, #30784	; 0x7840
   119c8:	movt	r2, #1
   119cc:	mov	r0, #1
   119d0:	mov	r1, #0
   119d4:	mov	r3, r4
   119d8:	bl	10f94 <error@plt>
   119dc:	add	r0, r0, #2
   119e0:	movw	r1, #21846	; 0x5556
   119e4:	movt	r1, #21845	; 0x5555
   119e8:	smmul	r0, r0, r1
   119ec:	add	r0, r0, r0, lsr #31
   119f0:	lsl	r0, r0, #2
   119f4:	bx	lr
   119f8:	add	r0, r0, #4
   119fc:	b	136d0 <__assert_fail@plt+0x25d4>
   11a00:	push	{r4, sl, fp, lr}
   11a04:	add	fp, sp, #8
   11a08:	sub	sp, sp, #8
   11a0c:	mov	r4, r0
   11a10:	ldr	r0, [fp, #8]
   11a14:	str	r0, [sp]
   11a18:	add	r0, r4, #4
   11a1c:	bl	136dc <__assert_fail@plt+0x25e0>
   11a20:	ldr	r1, [r4, #4]
   11a24:	str	r1, [r4]
   11a28:	sub	sp, fp, #8
   11a2c:	pop	{r4, sl, fp, pc}
   11a30:	mov	r1, r0
   11a34:	mov	r0, #1
   11a38:	cmp	r1, #46	; 0x2e
   11a3c:	bgt	11a54 <__assert_fail@plt+0x958>
   11a40:	cmp	r1, #43	; 0x2b
   11a44:	beq	11a6c <__assert_fail@plt+0x970>
   11a48:	cmp	r1, #45	; 0x2d
   11a4c:	bne	11a64 <__assert_fail@plt+0x968>
   11a50:	bx	lr
   11a54:	cmp	r1, #47	; 0x2f
   11a58:	beq	11a6c <__assert_fail@plt+0x970>
   11a5c:	cmp	r1, #95	; 0x5f
   11a60:	bxeq	lr
   11a64:	mov	r0, r1
   11a68:	b	136a4 <__assert_fail@plt+0x25a8>
   11a6c:	mov	r0, #0
   11a70:	bx	lr
   11a74:	push	{r4, r5, fp, lr}
   11a78:	add	fp, sp, #8
   11a7c:	mov	r4, r3
   11a80:	mov	r5, r2
   11a84:	bl	133bc <__assert_fail@plt+0x22c0>
   11a88:	cmp	r4, #0
   11a8c:	bne	11aa8 <__assert_fail@plt+0x9ac>
   11a90:	b	11ac8 <__assert_fail@plt+0x9cc>
   11a94:	mov	r0, #45	; 0x2d
   11a98:	strb	r0, [r5]
   11a9c:	add	r5, r5, #1
   11aa0:	cmp	r4, #0
   11aa4:	beq	11ac8 <__assert_fail@plt+0x9cc>
   11aa8:	sub	r4, r4, #1
   11aac:	ldrb	r0, [r5]
   11ab0:	cmp	r0, #43	; 0x2b
   11ab4:	beq	11a94 <__assert_fail@plt+0x998>
   11ab8:	cmp	r0, #47	; 0x2f
   11abc:	bne	11a9c <__assert_fail@plt+0x9a0>
   11ac0:	mov	r0, #95	; 0x5f
   11ac4:	b	11a98 <__assert_fail@plt+0x99c>
   11ac8:	pop	{r4, r5, fp, pc}
   11acc:	push	{r4, sl, fp, lr}
   11ad0:	add	fp, sp, #8
   11ad4:	mov	r4, r0
   11ad8:	add	r0, r0, #4
   11adc:	bl	136d0 <__assert_fail@plt+0x25d4>
   11ae0:	mov	r0, r4
   11ae4:	pop	{r4, sl, fp, lr}
   11ae8:	b	1281c <__assert_fail@plt+0x1720>
   11aec:	push	{r4, r5, r6, r7, fp, lr}
   11af0:	add	fp, sp, #16
   11af4:	sub	sp, sp, #8
   11af8:	mov	r5, r3
   11afc:	mov	r6, r2
   11b00:	mov	r7, r1
   11b04:	mov	r4, r0
   11b08:	mov	r1, r2
   11b0c:	bl	12840 <__assert_fail@plt+0x1744>
   11b10:	ldr	r0, [r4, #16]
   11b14:	mov	r1, r7
   11b18:	mov	r2, r6
   11b1c:	bl	10eec <memcpy@plt>
   11b20:	ldr	r0, [fp, #8]
   11b24:	cmp	r6, #0
   11b28:	beq	11b94 <__assert_fail@plt+0xa98>
   11b2c:	ldr	r1, [r4, #16]
   11b30:	mov	r2, r6
   11b34:	b	11b54 <__assert_fail@plt+0xa58>
   11b38:	cmp	r3, #95	; 0x5f
   11b3c:	bne	11b78 <__assert_fail@plt+0xa7c>
   11b40:	mov	r7, #47	; 0x2f
   11b44:	strb	r7, [r1]
   11b48:	subs	r2, r2, #1
   11b4c:	add	r1, r1, #1
   11b50:	beq	11b94 <__assert_fail@plt+0xa98>
   11b54:	ldrb	r3, [r1]
   11b58:	cmp	r3, #46	; 0x2e
   11b5c:	bgt	11b38 <__assert_fail@plt+0xa3c>
   11b60:	mov	r7, #43	; 0x2b
   11b64:	cmp	r3, #45	; 0x2d
   11b68:	beq	11b44 <__assert_fail@plt+0xa48>
   11b6c:	cmp	r3, #43	; 0x2b
   11b70:	bne	11b48 <__assert_fail@plt+0xa4c>
   11b74:	b	11b80 <__assert_fail@plt+0xa84>
   11b78:	cmp	r3, #47	; 0x2f
   11b7c:	bne	11b48 <__assert_fail@plt+0xa4c>
   11b80:	mov	r1, #0
   11b84:	str	r1, [r0]
   11b88:	mov	r0, #0
   11b8c:	sub	sp, fp, #16
   11b90:	pop	{r4, r5, r6, r7, fp, pc}
   11b94:	ldr	r1, [r4, #16]
   11b98:	str	r0, [sp]
   11b9c:	add	r0, r4, #4
   11ba0:	mov	r2, r6
   11ba4:	mov	r3, r5
   11ba8:	bl	136dc <__assert_fail@plt+0x25e0>
   11bac:	ldr	r1, [r4, #4]
   11bb0:	str	r1, [r4]
   11bb4:	sub	sp, fp, #16
   11bb8:	pop	{r4, r5, r6, r7, fp, pc}
   11bbc:	add	r0, r0, #4
   11bc0:	movw	r1, #26215	; 0x6667
   11bc4:	movt	r1, #26214	; 0x6666
   11bc8:	smmul	r0, r0, r1
   11bcc:	lsr	r1, r0, #1
   11bd0:	add	r0, r1, r0, lsr #31
   11bd4:	lsl	r0, r0, #3
   11bd8:	bx	lr
   11bdc:	add	r0, r0, #4
   11be0:	b	12da0 <__assert_fail@plt+0x1ca4>
   11be4:	push	{r4, sl, fp, lr}
   11be8:	add	fp, sp, #8
   11bec:	sub	sp, sp, #8
   11bf0:	mov	r4, r0
   11bf4:	ldr	r0, [fp, #8]
   11bf8:	str	r0, [sp]
   11bfc:	add	r0, r4, #4
   11c00:	bl	12dac <__assert_fail@plt+0x1cb0>
   11c04:	ldr	r1, [r4, #4]
   11c08:	str	r1, [r4]
   11c0c:	sub	sp, fp, #8
   11c10:	pop	{r4, sl, fp, pc}
   11c14:	sub	r1, r0, #65	; 0x41
   11c18:	uxtb	r1, r1
   11c1c:	mov	r2, #0
   11c20:	cmp	r1, #22
   11c24:	mov	r1, #0
   11c28:	movwcc	r1, #1
   11c2c:	sub	r0, r0, #48	; 0x30
   11c30:	uxtb	r0, r0
   11c34:	cmp	r0, #10
   11c38:	movwcc	r2, #1
   11c3c:	orr	r0, r2, r1
   11c40:	bx	lr
   11c44:	push	{r4, r5, fp, lr}
   11c48:	add	fp, sp, #8
   11c4c:	mov	r4, r3
   11c50:	mov	r5, r2
   11c54:	bl	12a0c <__assert_fail@plt+0x1910>
   11c58:	cmp	r4, #0
   11c5c:	popeq	{r4, r5, fp, pc}
   11c60:	movw	r0, #31976	; 0x7ce8
   11c64:	movt	r0, #1
   11c68:	ldrb	r1, [r5]
   11c6c:	sub	r2, r1, #50	; 0x32
   11c70:	uxtb	r2, r2
   11c74:	cmp	r2, #41	; 0x29
   11c78:	bcs	11c94 <__assert_fail@plt+0xb98>
   11c7c:	subs	r4, r4, #1
   11c80:	add	r1, r1, r0
   11c84:	ldrb	r1, [r1, #-50]	; 0xffffffce
   11c88:	strb	r1, [r5], #1
   11c8c:	bne	11c68 <__assert_fail@plt+0xb6c>
   11c90:	pop	{r4, r5, fp, pc}
   11c94:	movw	r0, #31441	; 0x7ad1
   11c98:	movt	r0, #1
   11c9c:	movw	r1, #31466	; 0x7aea
   11ca0:	movt	r1, #1
   11ca4:	movw	r3, #31479	; 0x7af7
   11ca8:	movt	r3, #1
   11cac:	mov	r2, #452	; 0x1c4
   11cb0:	bl	110fc <__assert_fail@plt>
   11cb4:	push	{r4, sl, fp, lr}
   11cb8:	add	fp, sp, #8
   11cbc:	mov	r4, r0
   11cc0:	add	r0, r0, #4
   11cc4:	bl	12da0 <__assert_fail@plt+0x1ca4>
   11cc8:	mov	r0, r4
   11ccc:	pop	{r4, sl, fp, lr}
   11cd0:	b	1281c <__assert_fail@plt+0x1720>
   11cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cd8:	add	fp, sp, #28
   11cdc:	sub	sp, sp, #12
   11ce0:	str	r3, [sp, #8]
   11ce4:	mov	r8, r2
   11ce8:	mov	r7, r1
   11cec:	mov	r4, r0
   11cf0:	mov	r1, r2
   11cf4:	bl	12840 <__assert_fail@plt+0x1744>
   11cf8:	cmp	r8, #0
   11cfc:	beq	11d3c <__assert_fail@plt+0xc40>
   11d00:	ldr	r6, [r4, #16]
   11d04:	movw	r9, #32017	; 0x7d11
   11d08:	movt	r9, #1
   11d0c:	mov	sl, r8
   11d10:	ldrb	r5, [r7]
   11d14:	sub	sl, sl, #1
   11d18:	mov	r0, r5
   11d1c:	bl	11c14 <__assert_fail@plt+0xb18>
   11d20:	cmp	r0, #0
   11d24:	addne	r0, r5, r9
   11d28:	ldrbne	r5, [r0, #-48]	; 0xffffffd0
   11d2c:	strb	r5, [r6], #1
   11d30:	add	r7, r7, #1
   11d34:	cmp	sl, #0
   11d38:	bne	11d10 <__assert_fail@plt+0xc14>
   11d3c:	ldr	r1, [r4, #16]
   11d40:	ldr	r0, [fp, #8]
   11d44:	str	r0, [sp]
   11d48:	add	r0, r4, #4
   11d4c:	mov	r2, r8
   11d50:	ldr	r3, [sp, #8]
   11d54:	bl	12dac <__assert_fail@plt+0x1cb0>
   11d58:	ldr	r1, [r4, #4]
   11d5c:	str	r1, [r4]
   11d60:	sub	sp, fp, #28
   11d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d68:	lsl	r0, r0, #1
   11d6c:	bx	lr
   11d70:	sub	r1, r0, #65	; 0x41
   11d74:	uxtb	r1, r1
   11d78:	mov	r2, #0
   11d7c:	cmp	r1, #6
   11d80:	mov	r1, #0
   11d84:	movwcc	r1, #1
   11d88:	sub	r0, r0, #48	; 0x30
   11d8c:	uxtb	r0, r0
   11d90:	cmp	r0, #10
   11d94:	movwcc	r2, #1
   11d98:	orr	r0, r2, r1
   11d9c:	bx	lr
   11da0:	push	{fp, lr}
   11da4:	mov	fp, sp
   11da8:	cmp	r1, #0
   11dac:	popeq	{fp, pc}
   11db0:	movw	ip, #32396	; 0x7e8c
   11db4:	movt	ip, #1
   11db8:	ldrb	lr, [r0], #1
   11dbc:	ldrb	r3, [ip, lr, lsr #4]
   11dc0:	strb	r3, [r2]
   11dc4:	and	r3, lr, #15
   11dc8:	ldrb	r3, [ip, r3]
   11dcc:	strb	r3, [r2, #1]
   11dd0:	add	r2, r2, #2
   11dd4:	subs	r1, r1, #1
   11dd8:	bne	11db8 <__assert_fail@plt+0xcbc>
   11ddc:	pop	{fp, pc}
   11de0:	push	{r4, sl, fp, lr}
   11de4:	add	fp, sp, #8
   11de8:	mov	r4, r0
   11dec:	bl	1281c <__assert_fail@plt+0x1720>
   11df0:	mov	r0, #1
   11df4:	str	r0, [r4]
   11df8:	mov	r0, #0
   11dfc:	strb	r0, [r4, #5]
   11e00:	pop	{r4, sl, fp, pc}
   11e04:	push	{r4, r5, fp, lr}
   11e08:	add	fp, sp, #8
   11e0c:	ldr	ip, [fp, #8]
   11e10:	mov	r4, #0
   11e14:	str	r4, [ip]
   11e18:	cmp	r2, #0
   11e1c:	beq	11eac <__assert_fail@plt+0xdb0>
   11e20:	cmp	r2, #0
   11e24:	beq	11ea4 <__assert_fail@plt+0xda8>
   11e28:	sub	r2, r2, #1
   11e2c:	ldrb	lr, [r1], #1
   11e30:	cmp	lr, #10
   11e34:	beq	11e20 <__assert_fail@plt+0xd24>
   11e38:	sub	r4, lr, #48	; 0x30
   11e3c:	uxtb	r5, r4
   11e40:	mvn	r4, #47	; 0x2f
   11e44:	cmp	r5, #10
   11e48:	bcc	11e60 <__assert_fail@plt+0xd64>
   11e4c:	sub	r4, lr, #65	; 0x41
   11e50:	uxtb	r5, r4
   11e54:	mvn	r4, #54	; 0x36
   11e58:	cmp	r5, #5
   11e5c:	bhi	11ebc <__assert_fail@plt+0xdc0>
   11e60:	add	r4, r4, lr
   11e64:	ldrb	r5, [r0, #5]
   11e68:	cmp	r5, #0
   11e6c:	beq	11e8c <__assert_fail@plt+0xd90>
   11e70:	ldrb	r5, [r0, #4]
   11e74:	add	r5, r4, r5, lsl #4
   11e78:	strb	r5, [r3], #1
   11e7c:	ldr	r5, [ip]
   11e80:	add	r5, r5, #1
   11e84:	str	r5, [ip]
   11e88:	b	11e90 <__assert_fail@plt+0xd94>
   11e8c:	strb	r4, [r0, #4]
   11e90:	ldrb	r5, [r0, #5]
   11e94:	eor	r5, r5, #1
   11e98:	strb	r5, [r0, #5]
   11e9c:	cmp	r2, #0
   11ea0:	bne	11e28 <__assert_fail@plt+0xd2c>
   11ea4:	mov	r0, #1
   11ea8:	pop	{r4, r5, fp, pc}
   11eac:	ldrb	r0, [r0, #5]
   11eb0:	clz	r0, r0
   11eb4:	lsr	r0, r0, #5
   11eb8:	pop	{r4, r5, fp, pc}
   11ebc:	mov	r0, #0
   11ec0:	pop	{r4, r5, fp, pc}
   11ec4:	lsl	r0, r0, #3
   11ec8:	bx	lr
   11ecc:	orr	r0, r0, #1
   11ed0:	sub	r0, r0, #49	; 0x31
   11ed4:	clz	r0, r0
   11ed8:	lsr	r0, r0, #5
   11edc:	bx	lr
   11ee0:	push	{fp, lr}
   11ee4:	mov	fp, sp
   11ee8:	cmp	r1, #0
   11eec:	popeq	{fp, pc}
   11ef0:	ldrb	ip, [r0]
   11ef4:	mov	lr, #0
   11ef8:	sxtb	r3, ip
   11efc:	cmn	r3, #1
   11f00:	mov	r3, #49	; 0x31
   11f04:	movwgt	r3, #48	; 0x30
   11f08:	strb	r3, [r2, -lr]
   11f0c:	sub	lr, lr, #1
   11f10:	lsl	ip, ip, #1
   11f14:	cmn	lr, #8
   11f18:	bne	11ef8 <__assert_fail@plt+0xdfc>
   11f1c:	sub	r2, r2, lr
   11f20:	add	r0, r0, #1
   11f24:	subs	r1, r1, #1
   11f28:	bne	11ef0 <__assert_fail@plt+0xdf4>
   11f2c:	pop	{fp, pc}
   11f30:	push	{r4, sl, fp, lr}
   11f34:	add	fp, sp, #8
   11f38:	mov	r4, r0
   11f3c:	bl	1281c <__assert_fail@plt+0x1720>
   11f40:	mov	r0, #0
   11f44:	str	r0, [r4]
   11f48:	strb	r0, [r4, #4]
   11f4c:	pop	{r4, sl, fp, pc}
   11f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f54:	add	fp, sp, #28
   11f58:	sub	sp, sp, #4
   11f5c:	mov	r5, r0
   11f60:	ldr	r8, [fp, #8]
   11f64:	mov	r9, #0
   11f68:	str	r9, [r8]
   11f6c:	cmp	r2, #0
   11f70:	beq	1201c <__assert_fail@plt+0xf20>
   11f74:	mov	r4, r3
   11f78:	mov	r6, r1
   11f7c:	add	r6, r6, #1
   11f80:	rsb	sl, r2, #1
   11f84:	ldrb	r7, [r6, #-1]
   11f88:	cmp	r7, #10
   11f8c:	bne	11fa4 <__assert_fail@plt+0xea8>
   11f90:	add	r6, r6, #1
   11f94:	add	sl, sl, #1
   11f98:	cmp	sl, #1
   11f9c:	bne	11f84 <__assert_fail@plt+0xe88>
   11fa0:	b	12010 <__assert_fail@plt+0xf14>
   11fa4:	mov	r0, r7
   11fa8:	bl	11ecc <__assert_fail@plt+0xdd0>
   11fac:	cmp	r0, #0
   11fb0:	beq	12030 <__assert_fail@plt+0xf34>
   11fb4:	ldr	r0, [r5]
   11fb8:	cmp	r0, #0
   11fbc:	moveq	r0, #8
   11fc0:	streq	r0, [r5]
   11fc4:	ldr	r0, [r5]
   11fc8:	subs	r0, r0, #1
   11fcc:	str	r0, [r5]
   11fd0:	ldrb	r1, [r5, #4]
   11fd4:	sub	r2, r7, #49	; 0x31
   11fd8:	clz	r2, r2
   11fdc:	lsr	r2, r2, #5
   11fe0:	orr	r0, r1, r2, lsl r0
   11fe4:	strb	r0, [r5, #4]
   11fe8:	bne	12004 <__assert_fail@plt+0xf08>
   11fec:	strb	r0, [r4], #1
   11ff0:	strb	r9, [r5, #4]
   11ff4:	ldr	r0, [r8]
   11ff8:	add	r0, r0, #1
   11ffc:	str	r0, [r8]
   12000:	str	r9, [r5]
   12004:	rsb	r2, sl, #0
   12008:	cmp	sl, #0
   1200c:	bne	11f7c <__assert_fail@plt+0xe80>
   12010:	mov	r0, #1
   12014:	sub	sp, fp, #28
   12018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1201c:	ldr	r0, [r5]
   12020:	clz	r0, r0
   12024:	lsr	r0, r0, #5
   12028:	sub	sp, fp, #28
   1202c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12030:	mov	r0, #0
   12034:	sub	sp, fp, #28
   12038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1203c:	push	{r4, sl, fp, lr}
   12040:	add	fp, sp, #8
   12044:	cmp	r1, #0
   12048:	popeq	{r4, sl, fp, pc}
   1204c:	mov	ip, #24
   12050:	ldrb	r3, [r0]
   12054:	mov	lr, #0
   12058:	uxtb	r4, r3
   1205c:	bfi	r3, ip, #1, #31
   12060:	strb	r3, [r2, -lr]
   12064:	sub	lr, lr, #1
   12068:	lsr	r3, r4, #1
   1206c:	cmn	lr, #8
   12070:	bne	12058 <__assert_fail@plt+0xf5c>
   12074:	sub	r2, r2, lr
   12078:	add	r0, r0, #1
   1207c:	subs	r1, r1, #1
   12080:	bne	12050 <__assert_fail@plt+0xf54>
   12084:	pop	{r4, sl, fp, pc}
   12088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1208c:	add	fp, sp, #28
   12090:	sub	sp, sp, #4
   12094:	mov	r5, r0
   12098:	ldr	r8, [fp, #8]
   1209c:	mov	r9, #0
   120a0:	str	r9, [r8]
   120a4:	cmp	r2, #0
   120a8:	beq	12148 <__assert_fail@plt+0x104c>
   120ac:	mov	sl, r3
   120b0:	mov	r6, r1
   120b4:	add	r6, r6, #1
   120b8:	rsb	r4, r2, #1
   120bc:	ldrb	r7, [r6, #-1]
   120c0:	cmp	r7, #10
   120c4:	bne	120dc <__assert_fail@plt+0xfe0>
   120c8:	add	r6, r6, #1
   120cc:	add	r4, r4, #1
   120d0:	cmp	r4, #1
   120d4:	bne	120bc <__assert_fail@plt+0xfc0>
   120d8:	b	1213c <__assert_fail@plt+0x1040>
   120dc:	mov	r0, r7
   120e0:	bl	11ecc <__assert_fail@plt+0xdd0>
   120e4:	cmp	r0, #0
   120e8:	beq	1215c <__assert_fail@plt+0x1060>
   120ec:	ldr	r1, [r5]
   120f0:	ldrb	r0, [r5, #4]
   120f4:	sub	r2, r7, #49	; 0x31
   120f8:	clz	r2, r2
   120fc:	lsr	r2, r2, #5
   12100:	orr	r0, r0, r2, lsl r1
   12104:	strb	r0, [r5, #4]
   12108:	add	r1, r1, #1
   1210c:	str	r1, [r5]
   12110:	cmp	r1, #8
   12114:	bne	12130 <__assert_fail@plt+0x1034>
   12118:	strb	r0, [sl], #1
   1211c:	strb	r9, [r5, #4]
   12120:	ldr	r0, [r8]
   12124:	add	r0, r0, #1
   12128:	str	r0, [r8]
   1212c:	str	r9, [r5]
   12130:	rsb	r2, r4, #0
   12134:	cmp	r4, #0
   12138:	bne	120b4 <__assert_fail@plt+0xfb8>
   1213c:	mov	r0, #1
   12140:	sub	sp, fp, #28
   12144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12148:	ldr	r0, [r5]
   1214c:	clz	r0, r0
   12150:	lsr	r0, r0, #5
   12154:	sub	sp, fp, #28
   12158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1215c:	mov	r0, #0
   12160:	sub	sp, fp, #28
   12164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12168:	add	r0, r0, r0, lsl #2
   1216c:	asr	r1, r0, #31
   12170:	add	r0, r0, r1, lsr #30
   12174:	asr	r0, r0, #2
   12178:	bx	lr
   1217c:	push	{r4, sl, fp, lr}
   12180:	add	fp, sp, #8
   12184:	mov	r4, r0
   12188:	bl	13bf0 <__assert_fail@plt+0x2af4>
   1218c:	mov	r1, r0
   12190:	mov	r0, #1
   12194:	cmp	r1, #0
   12198:	popne	{r4, sl, fp, pc}
   1219c:	movw	r0, #31553	; 0x7b41
   121a0:	movt	r0, #1
   121a4:	mov	r1, r4
   121a8:	mov	r2, #24
   121ac:	bl	11060 <memchr@plt>
   121b0:	cmp	r0, #0
   121b4:	movwne	r0, #1
   121b8:	pop	{r4, sl, fp, pc}
   121bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121c0:	add	fp, sp, #28
   121c4:	sub	sp, sp, #12
   121c8:	cmp	r1, #0
   121cc:	beq	12284 <__assert_fail@plt+0x1188>
   121d0:	mov	r4, r3
   121d4:	mov	r5, r2
   121d8:	mov	r6, #0
   121dc:	add	r7, sp, #8
   121e0:	mov	sl, #85	; 0x55
   121e4:	movw	r8, #32058	; 0x7d3a
   121e8:	movt	r8, #1
   121ec:	mov	r3, #0
   121f0:	b	12210 <__assert_fail@plt+0x1114>
   121f4:	add	r6, r6, #5
   121f8:	add	r5, r5, #5
   121fc:	mov	r3, #0
   12200:	ldm	sp, {r0, r1}
   12204:	add	r7, sp, #8
   12208:	cmp	r1, #0
   1220c:	beq	1227c <__assert_fail@plt+0x1180>
   12210:	ldrb	r2, [r0], #1
   12214:	strb	r2, [r7, r3]
   12218:	sub	r1, r1, #1
   1221c:	add	r3, r3, #1
   12220:	cmp	r3, #4
   12224:	bne	12208 <__assert_fail@plt+0x110c>
   12228:	stm	sp, {r0, r1}
   1222c:	ldr	r0, [sp, #8]
   12230:	rev	r7, r0
   12234:	mov	r1, #0
   12238:	mov	r9, #4
   1223c:	b	12250 <__assert_fail@plt+0x1154>
   12240:	sub	r9, r9, #1
   12244:	cmn	r9, #1
   12248:	mov	r7, r0
   1224c:	beq	121f4 <__assert_fail@plt+0x10f8>
   12250:	mov	r0, r7
   12254:	mov	r2, #85	; 0x55
   12258:	mov	r3, #0
   1225c:	bl	17018 <__assert_fail@plt+0x5f1c>
   12260:	add	r2, r6, r9
   12264:	cmp	r2, r4
   12268:	bge	12240 <__assert_fail@plt+0x1144>
   1226c:	mls	r2, r0, sl, r7
   12270:	ldrb	r2, [r8, r2]
   12274:	strb	r2, [r5, r9]
   12278:	b	12240 <__assert_fail@plt+0x1144>
   1227c:	cmp	r3, #0
   12280:	bne	1228c <__assert_fail@plt+0x1190>
   12284:	sub	sp, fp, #28
   12288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1228c:	movw	r1, #31577	; 0x7b59
   12290:	movt	r1, #1
   12294:	mov	r0, #0
   12298:	mov	r2, #5
   1229c:	bl	10f1c <dcgettext@plt>
   122a0:	mov	r2, r0
   122a4:	mov	r0, #1
   122a8:	mov	r1, #0
   122ac:	bl	10f94 <error@plt>
   122b0:	push	{r4, sl, fp, lr}
   122b4:	add	fp, sp, #8
   122b8:	mov	r4, r0
   122bc:	bl	1281c <__assert_fail@plt+0x1720>
   122c0:	mov	r0, #1
   122c4:	mov	r1, #0
   122c8:	stm	r4, {r0, r1}
   122cc:	pop	{r4, sl, fp, pc}
   122d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122d4:	add	fp, sp, #28
   122d8:	ldr	lr, [fp, #8]
   122dc:	mov	ip, #0
   122e0:	str	ip, [lr]
   122e4:	cmp	r2, #0
   122e8:	beq	123ec <__assert_fail@plt+0x12f0>
   122ec:	movw	sl, #32143	; 0x7d8f
   122f0:	movt	sl, #1
   122f4:	movw	r9, #33969	; 0x84b1
   122f8:	movt	r9, #796	; 0x31c
   122fc:	add	r1, r1, #1
   12300:	rsb	r6, r2, #1
   12304:	ldrb	r7, [r1, #-1]
   12308:	cmp	r7, #10
   1230c:	bne	12324 <__assert_fail@plt+0x1228>
   12310:	add	r1, r1, #1
   12314:	add	r6, r6, #1
   12318:	cmp	r6, #1
   1231c:	bne	12304 <__assert_fail@plt+0x1208>
   12320:	b	123d8 <__assert_fail@plt+0x12dc>
   12324:	sub	r2, r7, #33	; 0x21
   12328:	uxtb	r8, r2
   1232c:	mov	r2, #0
   12330:	cmp	r8, #92	; 0x5c
   12334:	bhi	123e4 <__assert_fail@plt+0x12e8>
   12338:	add	r7, r7, sl
   1233c:	ldrsb	r7, [r7, #-33]	; 0xffffffdf
   12340:	cmp	r7, #0
   12344:	bmi	123e4 <__assert_fail@plt+0x12e8>
   12348:	mov	r4, r0
   1234c:	ldr	r5, [r4, #4]!
   12350:	add	r8, r5, #1
   12354:	mov	r2, r4
   12358:	str	r8, [r2], r5
   1235c:	strb	r7, [r2, #4]
   12360:	ldr	r2, [r4]
   12364:	cmp	r2, #5
   12368:	bne	123cc <__assert_fail@plt+0x12d0>
   1236c:	ldrb	r8, [r0, #8]
   12370:	ldrb	r2, [r0, #9]
   12374:	ldrb	r5, [r0, #10]
   12378:	ldrb	r7, [r0, #11]
   1237c:	movw	r4, #24301	; 0x5eed
   12380:	movt	r4, #9
   12384:	mul	r2, r2, r4
   12388:	movw	r4, #7225	; 0x1c39
   1238c:	smlabb	r2, r5, r4, r2
   12390:	mov	r4, #85	; 0x55
   12394:	smlabb	r2, r7, r4, r2
   12398:	ldrb	r5, [r0, #12]
   1239c:	add	r7, r2, r5
   123a0:	mov	r2, #0
   123a4:	mov	r5, #0
   123a8:	umlal	r7, r5, r8, r9
   123ac:	tst	r5, #7
   123b0:	bne	123e4 <__assert_fail@plt+0x12e8>
   123b4:	rev	r2, r7
   123b8:	str	r2, [r3], #4
   123bc:	ldr	r2, [lr]
   123c0:	add	r2, r2, #4
   123c4:	str	r2, [lr]
   123c8:	str	ip, [r0, #4]
   123cc:	rsb	r2, r6, #0
   123d0:	cmp	r6, #0
   123d4:	bne	122fc <__assert_fail@plt+0x1200>
   123d8:	ldr	r1, [r0, #4]
   123dc:	str	r1, [r0]
   123e0:	mov	r2, #1
   123e4:	mov	r0, r2
   123e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123ec:	ldr	r0, [r0, #4]
   123f0:	cmp	r0, #1
   123f4:	movwlt	ip, #1
   123f8:	mov	r0, ip
   123fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12400:	push	{fp, lr}
   12404:	mov	fp, sp
   12408:	sub	sp, sp, #48	; 0x30
   1240c:	stmib	sp, {r1, r2, r3}
   12410:	mov	r8, r0
   12414:	movw	r5, #37216	; 0x9160
   12418:	movt	r5, #2
   1241c:	ldr	r1, [r5]
   12420:	movw	r0, #4200	; 0x1068
   12424:	blx	r1
   12428:	bl	16394 <__assert_fail@plt+0x5298>
   1242c:	mov	r4, r0
   12430:	movw	r0, #4200	; 0x1068
   12434:	bl	16394 <__assert_fail@plt+0x5298>
   12438:	mov	r9, r0
   1243c:	mov	sl, #0
   12440:	str	sl, [sp, #40]	; 0x28
   12444:	movw	r0, #37228	; 0x916c
   12448:	movt	r0, #2
   1244c:	ldr	r1, [r0]
   12450:	add	r0, sp, #24
   12454:	blx	r1
   12458:	str	r8, [sp, #16]
   1245c:	b	1247c <__assert_fail@plt+0x1380>
   12460:	mov	r0, r8
   12464:	bl	110f0 <feof_unlocked@plt>
   12468:	mov	sl, #0
   1246c:	cmp	r0, #0
   12470:	movw	r5, #37216	; 0x9160
   12474:	movt	r5, #2
   12478:	bne	12674 <__assert_fail@plt+0x1578>
   1247c:	ldr	r1, [r5]
   12480:	movw	r0, #4200	; 0x1068
   12484:	blx	r1
   12488:	add	r1, r4, sl
   1248c:	sub	r2, r0, sl
   12490:	mov	r5, r1
   12494:	mov	r0, r1
   12498:	mov	r1, #1
   1249c:	mov	r3, r8
   124a0:	bl	110cc <fread_unlocked@plt>
   124a4:	mov	r8, r0
   124a8:	cmp	r0, #1
   124ac:	blt	12520 <__assert_fail@plt+0x1424>
   124b0:	ldr	r0, [sp, #12]
   124b4:	cmp	r0, #0
   124b8:	beq	12520 <__assert_fail@plt+0x1424>
   124bc:	mov	r6, #0
   124c0:	add	r7, r6, sl
   124c4:	ldrb	r0, [r4, r7]
   124c8:	movw	r1, #37220	; 0x9164
   124cc:	movt	r1, #2
   124d0:	ldr	r1, [r1]
   124d4:	blx	r1
   124d8:	cmp	r0, #0
   124dc:	bne	124ec <__assert_fail@plt+0x13f0>
   124e0:	ldrb	r0, [r4, r7]
   124e4:	cmp	r0, #61	; 0x3d
   124e8:	bne	12504 <__assert_fail@plt+0x1408>
   124ec:	add	r6, r6, #1
   124f0:	cmp	r8, #1
   124f4:	blt	12520 <__assert_fail@plt+0x1424>
   124f8:	cmp	r6, r8
   124fc:	blt	124c0 <__assert_fail@plt+0x13c4>
   12500:	b	12520 <__assert_fail@plt+0x1424>
   12504:	sub	r8, r8, #1
   12508:	sub	r2, r8, r6
   1250c:	add	r0, r5, r6
   12510:	add	r1, r0, #1
   12514:	bl	10ec8 <memmove@plt>
   12518:	cmp	r8, #1
   1251c:	bge	124f8 <__assert_fail@plt+0x13fc>
   12520:	ldr	r0, [sp, #16]
   12524:	bl	10f7c <ferror_unlocked@plt>
   12528:	cmp	r0, #0
   1252c:	bne	12660 <__assert_fail@plt+0x1564>
   12530:	add	sl, r8, sl
   12534:	movw	r5, #37216	; 0x9160
   12538:	movt	r5, #2
   1253c:	ldr	r1, [r5]
   12540:	movw	r0, #4200	; 0x1068
   12544:	blx	r1
   12548:	cmp	sl, r0
   1254c:	ldr	r8, [sp, #16]
   12550:	bge	12564 <__assert_fail@plt+0x1468>
   12554:	mov	r0, r8
   12558:	bl	110f0 <feof_unlocked@plt>
   1255c:	cmp	r0, #0
   12560:	beq	1247c <__assert_fail@plt+0x1380>
   12564:	mov	r0, r8
   12568:	bl	110f0 <feof_unlocked@plt>
   1256c:	mov	r6, #0
   12570:	ldr	r5, [sp, #8]
   12574:	cmp	r6, #1
   12578:	bne	12588 <__assert_fail@plt+0x148c>
   1257c:	ldr	r0, [sp, #24]
   12580:	cmp	r0, #0
   12584:	beq	12460 <__assert_fail@plt+0x1364>
   12588:	movw	r0, #4200	; 0x1068
   1258c:	str	r0, [sp, #20]
   12590:	movw	r0, #37232	; 0x9170
   12594:	movt	r0, #2
   12598:	ldr	r7, [r0]
   1259c:	add	r0, sp, #20
   125a0:	str	r0, [sp]
   125a4:	cmp	r6, #0
   125a8:	mov	r2, #0
   125ac:	moveq	r2, sl
   125b0:	add	r0, sp, #24
   125b4:	mov	r1, r4
   125b8:	mov	r3, r9
   125bc:	blx	r7
   125c0:	mov	r7, r0
   125c4:	ldr	r2, [sp, #20]
   125c8:	mov	r0, r9
   125cc:	mov	r1, #1
   125d0:	mov	r3, r5
   125d4:	bl	10f04 <fwrite_unlocked@plt>
   125d8:	ldr	r1, [sp, #20]
   125dc:	cmp	r0, r1
   125e0:	bcc	12610 <__assert_fail@plt+0x1514>
   125e4:	cmp	r7, #0
   125e8:	beq	1263c <__assert_fail@plt+0x1540>
   125ec:	mov	r0, r8
   125f0:	bl	110f0 <feof_unlocked@plt>
   125f4:	cmp	r0, #0
   125f8:	mov	r0, #2
   125fc:	movweq	r0, #1
   12600:	add	r6, r6, #1
   12604:	cmp	r6, r0
   12608:	bcc	12574 <__assert_fail@plt+0x1478>
   1260c:	b	12460 <__assert_fail@plt+0x1364>
   12610:	bl	11018 <__errno_location@plt>
   12614:	ldr	r4, [r0]
   12618:	movw	r1, #31644	; 0x7b9c
   1261c:	movt	r1, #1
   12620:	mov	r0, #0
   12624:	mov	r2, #5
   12628:	bl	10f1c <dcgettext@plt>
   1262c:	mov	r2, r0
   12630:	mov	r0, #1
   12634:	mov	r1, r4
   12638:	bl	10f94 <error@plt>
   1263c:	movw	r1, #31656	; 0x7ba8
   12640:	movt	r1, #1
   12644:	mov	r0, #0
   12648:	mov	r2, #5
   1264c:	bl	10f1c <dcgettext@plt>
   12650:	mov	r2, r0
   12654:	mov	r0, #1
   12658:	mov	r1, #0
   1265c:	bl	10f94 <error@plt>
   12660:	bl	11018 <__errno_location@plt>
   12664:	ldr	r4, [r0]
   12668:	movw	r1, #31633	; 0x7b91
   1266c:	movt	r1, #1
   12670:	b	12620 <__assert_fail@plt+0x1524>
   12674:	mov	r0, r8
   12678:	ldr	r1, [sp, #4]
   1267c:	bl	12874 <__assert_fail@plt+0x1778>
   12680:	push	{fp, lr}
   12684:	mov	fp, sp
   12688:	sub	sp, sp, #16
   1268c:	mov	sl, r3
   12690:	stmib	sp, {r1, r2}
   12694:	mov	r5, r0
   12698:	mov	r4, #0
   1269c:	str	r4, [fp, #-4]
   126a0:	mov	r0, #30720	; 0x7800
   126a4:	bl	16394 <__assert_fail@plt+0x5298>
   126a8:	mov	r6, r0
   126ac:	movw	r8, #37216	; 0x9160
   126b0:	movt	r8, #2
   126b4:	ldr	r1, [r8]
   126b8:	mov	r0, #30720	; 0x7800
   126bc:	blx	r1
   126c0:	bl	16394 <__assert_fail@plt+0x5298>
   126c4:	mov	r7, r0
   126c8:	add	r0, r6, r4
   126cc:	rsb	r2, r4, #30720	; 0x7800
   126d0:	mov	r1, #1
   126d4:	mov	r3, r5
   126d8:	bl	110cc <fread_unlocked@plt>
   126dc:	add	r4, r0, r4
   126e0:	mov	r0, r5
   126e4:	bl	110f0 <feof_unlocked@plt>
   126e8:	cmp	r0, #0
   126ec:	beq	1277c <__assert_fail@plt+0x1680>
   126f0:	cmp	r4, #1
   126f4:	blt	1274c <__assert_fail@plt+0x1650>
   126f8:	movw	r0, #37224	; 0x9168
   126fc:	movt	r0, #2
   12700:	ldr	r9, [r0]
   12704:	ldr	r1, [r8]
   12708:	mov	r0, r4
   1270c:	blx	r1
   12710:	mov	r3, r0
   12714:	mov	r0, r6
   12718:	mov	r1, r4
   1271c:	mov	r2, r7
   12720:	blx	r9
   12724:	ldr	r1, [r8]
   12728:	mov	r0, r4
   1272c:	blx	r1
   12730:	mov	r1, r0
   12734:	ldr	r0, [sp, #8]
   12738:	str	r0, [sp]
   1273c:	mov	r0, r7
   12740:	mov	r2, sl
   12744:	sub	r3, fp, #4
   12748:	bl	12904 <__assert_fail@plt+0x1808>
   1274c:	mov	r0, r5
   12750:	bl	110f0 <feof_unlocked@plt>
   12754:	cmp	r0, #0
   12758:	bne	12798 <__assert_fail@plt+0x169c>
   1275c:	mov	r0, r5
   12760:	bl	10f7c <ferror_unlocked@plt>
   12764:	cmp	r4, #30720	; 0x7800
   12768:	bne	12798 <__assert_fail@plt+0x169c>
   1276c:	cmp	r0, #0
   12770:	mov	r4, #0
   12774:	beq	126c8 <__assert_fail@plt+0x15cc>
   12778:	b	12798 <__assert_fail@plt+0x169c>
   1277c:	mov	r0, r5
   12780:	bl	10f7c <ferror_unlocked@plt>
   12784:	cmp	r4, #30720	; 0x7800
   12788:	bge	126f0 <__assert_fail@plt+0x15f4>
   1278c:	cmp	r0, #0
   12790:	beq	126c8 <__assert_fail@plt+0x15cc>
   12794:	b	126f0 <__assert_fail@plt+0x15f4>
   12798:	cmp	sl, #0
   1279c:	beq	127d4 <__assert_fail@plt+0x16d8>
   127a0:	ldr	r0, [fp, #-4]
   127a4:	cmp	r0, #1
   127a8:	blt	127d4 <__assert_fail@plt+0x16d8>
   127ac:	mov	r0, #10
   127b0:	ldr	r1, [sp, #8]
   127b4:	bl	10f10 <fputc_unlocked@plt>
   127b8:	cmn	r0, #1
   127bc:	bne	127d4 <__assert_fail@plt+0x16d8>
   127c0:	bl	11018 <__errno_location@plt>
   127c4:	ldr	r4, [r0]
   127c8:	movw	r1, #31644	; 0x7b9c
   127cc:	movt	r1, #1
   127d0:	b	12800 <__assert_fail@plt+0x1704>
   127d4:	mov	r0, r5
   127d8:	bl	10f7c <ferror_unlocked@plt>
   127dc:	cmp	r0, #0
   127e0:	bne	127f0 <__assert_fail@plt+0x16f4>
   127e4:	mov	r0, r5
   127e8:	ldr	r1, [sp, #4]
   127ec:	bl	12874 <__assert_fail@plt+0x1778>
   127f0:	bl	11018 <__errno_location@plt>
   127f4:	ldr	r4, [r0]
   127f8:	movw	r1, #31633	; 0x7b91
   127fc:	movt	r1, #1
   12800:	mov	r0, #0
   12804:	mov	r2, #5
   12808:	bl	10f1c <dcgettext@plt>
   1280c:	mov	r2, r0
   12810:	mov	r0, #1
   12814:	mov	r1, r4
   12818:	bl	10f94 <error@plt>
   1281c:	push	{r4, sl, fp, lr}
   12820:	add	fp, sp, #8
   12824:	mov	r4, r0
   12828:	movw	r0, #4200	; 0x1068
   1282c:	str	r0, [r4, #20]
   12830:	movw	r0, #4200	; 0x1068
   12834:	bl	163d0 <__assert_fail@plt+0x52d4>
   12838:	str	r0, [r4, #16]
   1283c:	pop	{r4, sl, fp, pc}
   12840:	push	{r4, sl, fp, lr}
   12844:	add	fp, sp, #8
   12848:	mov	r4, r0
   1284c:	ldr	r0, [r0, #20]
   12850:	cmp	r0, r1
   12854:	popge	{r4, sl, fp, pc}
   12858:	lsl	r1, r1, #1
   1285c:	str	r1, [r4, #20]
   12860:	ldr	r0, [r4, #16]
   12864:	mov	r2, #1
   12868:	bl	16354 <__assert_fail@plt+0x5258>
   1286c:	str	r0, [r4, #16]
   12870:	pop	{r4, sl, fp, pc}
   12874:	push	{fp, lr}
   12878:	mov	fp, sp
   1287c:	mov	r5, r1
   12880:	bl	1405c <__assert_fail@plt+0x2f60>
   12884:	cmp	r0, #0
   12888:	bne	12894 <__assert_fail@plt+0x1798>
   1288c:	mov	r0, #0
   12890:	bl	10fe8 <exit@plt>
   12894:	movw	r1, #33101	; 0x814d
   12898:	movt	r1, #1
   1289c:	mov	r0, r5
   128a0:	bl	10ea4 <strcmp@plt>
   128a4:	mov	r6, r0
   128a8:	bl	11018 <__errno_location@plt>
   128ac:	ldr	r4, [r0]
   128b0:	cmp	r6, #0
   128b4:	bne	128dc <__assert_fail@plt+0x17e0>
   128b8:	movw	r1, #31670	; 0x7bb6
   128bc:	movt	r1, #1
   128c0:	mov	r0, #0
   128c4:	mov	r2, #5
   128c8:	bl	10f1c <dcgettext@plt>
   128cc:	mov	r2, r0
   128d0:	mov	r0, #1
   128d4:	mov	r1, r4
   128d8:	bl	10f94 <error@plt>
   128dc:	mov	r0, #0
   128e0:	mov	r1, #3
   128e4:	mov	r2, r5
   128e8:	bl	15938 <__assert_fail@plt+0x483c>
   128ec:	mov	r3, r0
   128f0:	movw	r2, #30788	; 0x7844
   128f4:	movt	r2, #1
   128f8:	mov	r0, #1
   128fc:	mov	r1, r4
   12900:	bl	10f94 <error@plt>
   12904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12908:	add	fp, sp, #28
   1290c:	sub	sp, sp, #4
   12910:	mov	r4, r1
   12914:	mov	r9, r0
   12918:	cmp	r2, #0
   1291c:	beq	129b4 <__assert_fail@plt+0x18b8>
   12920:	cmp	r4, #1
   12924:	blt	129d8 <__assert_fail@plt+0x18dc>
   12928:	mov	r6, r3
   1292c:	mov	r7, r2
   12930:	movw	r8, #37204	; 0x9154
   12934:	movt	r8, #2
   12938:	mov	sl, #0
   1293c:	b	12948 <__assert_fail@plt+0x184c>
   12940:	cmp	sl, r4
   12944:	bge	129d8 <__assert_fail@plt+0x18dc>
   12948:	sub	r5, r4, sl
   1294c:	ldr	r0, [r6]
   12950:	sub	r0, r7, r0
   12954:	cmp	r0, r5
   12958:	movlt	r5, r0
   1295c:	cmp	r5, #0
   12960:	beq	12994 <__assert_fail@plt+0x1898>
   12964:	add	r0, r9, sl
   12968:	ldr	r3, [r8]
   1296c:	mov	r1, #1
   12970:	mov	r2, r5
   12974:	bl	10f04 <fwrite_unlocked@plt>
   12978:	cmp	r0, r5
   1297c:	bcc	129e0 <__assert_fail@plt+0x18e4>
   12980:	ldr	r0, [r6]
   12984:	add	r0, r0, r5
   12988:	str	r0, [r6]
   1298c:	add	sl, r5, sl
   12990:	b	12940 <__assert_fail@plt+0x1844>
   12994:	mov	r0, #10
   12998:	ldr	r1, [fp, #8]
   1299c:	bl	10f10 <fputc_unlocked@plt>
   129a0:	cmn	r0, #1
   129a4:	beq	129e0 <__assert_fail@plt+0x18e4>
   129a8:	mov	r0, #0
   129ac:	str	r0, [r6]
   129b0:	b	12940 <__assert_fail@plt+0x1844>
   129b4:	movw	r0, #37204	; 0x9154
   129b8:	movt	r0, #2
   129bc:	ldr	r3, [r0]
   129c0:	mov	r0, r9
   129c4:	mov	r1, #1
   129c8:	mov	r2, r4
   129cc:	bl	10f04 <fwrite_unlocked@plt>
   129d0:	cmp	r0, r4
   129d4:	bcc	129e0 <__assert_fail@plt+0x18e4>
   129d8:	sub	sp, fp, #28
   129dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129e0:	bl	11018 <__errno_location@plt>
   129e4:	ldr	r4, [r0]
   129e8:	movw	r1, #31644	; 0x7b9c
   129ec:	movt	r1, #1
   129f0:	mov	r0, #0
   129f4:	mov	r2, #5
   129f8:	bl	10f1c <dcgettext@plt>
   129fc:	mov	r2, r0
   12a00:	mov	r0, #1
   12a04:	mov	r1, r4
   12a08:	bl	10f94 <error@plt>
   12a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a10:	add	fp, sp, #28
   12a14:	sub	sp, sp, #36	; 0x24
   12a18:	str	r2, [sp, #32]
   12a1c:	cmp	r1, #0
   12a20:	cmpne	r3, #0
   12a24:	bne	12a44 <__assert_fail@plt+0x1948>
   12a28:	cmp	r3, #0
   12a2c:	beq	12a3c <__assert_fail@plt+0x1940>
   12a30:	mov	r0, #0
   12a34:	ldr	r1, [sp, #32]
   12a38:	strb	r0, [r1]
   12a3c:	sub	sp, fp, #28
   12a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a44:	mov	r6, r1
   12a48:	mov	r9, r0
   12a4c:	sub	r0, r3, #7
   12a50:	str	r0, [sp, #4]
   12a54:	sub	r0, r3, #6
   12a58:	str	r0, [sp, #8]
   12a5c:	sub	r0, r3, #5
   12a60:	str	r0, [sp, #12]
   12a64:	sub	r0, r3, #4
   12a68:	str	r0, [sp, #16]
   12a6c:	sub	r0, r3, #3
   12a70:	str	r0, [sp, #20]
   12a74:	sub	r0, r3, #2
   12a78:	str	r0, [sp, #24]
   12a7c:	sub	r0, r3, #1
   12a80:	str	r0, [sp, #28]
   12a84:	sub	r0, r3, #8
   12a88:	str	r0, [sp]
   12a8c:	mov	r7, #0
   12a90:	movw	r8, #32427	; 0x7eab
   12a94:	movt	r8, #1
   12a98:	ldrb	r0, [r9]
   12a9c:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12aa0:	ldrb	r0, [r8, r0, lsr #3]
   12aa4:	ldr	r4, [sp, #32]
   12aa8:	strb	r0, [r4, r7]!
   12aac:	ldr	r0, [sp, #28]
   12ab0:	cmp	r0, r7
   12ab4:	beq	12a3c <__assert_fail@plt+0x1940>
   12ab8:	ldrb	r0, [r9]
   12abc:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12ac0:	lsl	r5, r0, #2
   12ac4:	mov	r0, #0
   12ac8:	cmp	r6, #1
   12acc:	beq	12adc <__assert_fail@plt+0x19e0>
   12ad0:	ldrb	r0, [r9, #1]
   12ad4:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12ad8:	lsr	r0, r0, #6
   12adc:	add	r0, r0, r5
   12ae0:	and	r0, r0, #31
   12ae4:	ldrb	r0, [r8, r0]
   12ae8:	strb	r0, [r4, #1]
   12aec:	ldr	r0, [sp, #24]
   12af0:	cmp	r0, r7
   12af4:	beq	12a3c <__assert_fail@plt+0x1940>
   12af8:	mov	r0, #61	; 0x3d
   12afc:	cmp	r6, #1
   12b00:	beq	12b14 <__assert_fail@plt+0x1a18>
   12b04:	ldrb	r0, [r9, #1]
   12b08:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12b0c:	ubfx	r0, r0, #1, #5
   12b10:	ldrb	r0, [r8, r0]
   12b14:	strb	r0, [r4, #2]
   12b18:	ldr	r0, [sp, #20]
   12b1c:	cmp	r0, r7
   12b20:	beq	12a3c <__assert_fail@plt+0x1940>
   12b24:	cmp	r6, #1
   12b28:	beq	12b50 <__assert_fail@plt+0x1a54>
   12b2c:	ldrb	r0, [r9, #1]
   12b30:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12b34:	subs	r6, r6, #2
   12b38:	lsl	r5, r0, #4
   12b3c:	beq	12b5c <__assert_fail@plt+0x1a60>
   12b40:	ldrb	r0, [r9, #2]
   12b44:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12b48:	lsr	r0, r0, #4
   12b4c:	b	12b60 <__assert_fail@plt+0x1a64>
   12b50:	mov	r0, #61	; 0x3d
   12b54:	mov	r6, #0
   12b58:	b	12b6c <__assert_fail@plt+0x1a70>
   12b5c:	mov	r0, #0
   12b60:	add	r0, r0, r5
   12b64:	and	r0, r0, #31
   12b68:	ldrb	r0, [r8, r0]
   12b6c:	strb	r0, [r4, #3]
   12b70:	ldr	r0, [sp, #16]
   12b74:	cmp	r0, r7
   12b78:	beq	12a3c <__assert_fail@plt+0x1940>
   12b7c:	cmp	r6, #0
   12b80:	beq	12ba8 <__assert_fail@plt+0x1aac>
   12b84:	ldrb	r0, [r9, #2]
   12b88:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12b8c:	subs	r6, r6, #1
   12b90:	lsl	r5, r0, #1
   12b94:	beq	12bb4 <__assert_fail@plt+0x1ab8>
   12b98:	ldrb	r0, [r9, #3]
   12b9c:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12ba0:	lsr	r0, r0, #7
   12ba4:	b	12bb8 <__assert_fail@plt+0x1abc>
   12ba8:	mov	r0, #61	; 0x3d
   12bac:	mov	r6, #0
   12bb0:	b	12bc4 <__assert_fail@plt+0x1ac8>
   12bb4:	mov	r0, #0
   12bb8:	add	r0, r0, r5
   12bbc:	and	r0, r0, #31
   12bc0:	ldrb	r0, [r8, r0]
   12bc4:	strb	r0, [r4, #4]
   12bc8:	ldr	r0, [sp, #12]
   12bcc:	cmp	r0, r7
   12bd0:	beq	12a3c <__assert_fail@plt+0x1940>
   12bd4:	cmp	r6, #0
   12bd8:	beq	12bf0 <__assert_fail@plt+0x1af4>
   12bdc:	ldrb	r0, [r9, #3]
   12be0:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12be4:	ubfx	r0, r0, #2, #5
   12be8:	ldrb	r0, [r8, r0]
   12bec:	b	12bf4 <__assert_fail@plt+0x1af8>
   12bf0:	mov	r0, #61	; 0x3d
   12bf4:	strb	r0, [r4, #5]
   12bf8:	ldr	r0, [sp, #8]
   12bfc:	cmp	r0, r7
   12c00:	beq	12a3c <__assert_fail@plt+0x1940>
   12c04:	cmp	r6, #0
   12c08:	beq	12c30 <__assert_fail@plt+0x1b34>
   12c0c:	ldrb	r0, [r9, #3]
   12c10:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12c14:	subs	sl, r6, #1
   12c18:	lsl	r5, r0, #3
   12c1c:	beq	12c3c <__assert_fail@plt+0x1b40>
   12c20:	ldrb	r0, [r9, #4]
   12c24:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12c28:	lsr	r0, r0, #5
   12c2c:	b	12c40 <__assert_fail@plt+0x1b44>
   12c30:	mov	r0, #61	; 0x3d
   12c34:	mov	sl, #0
   12c38:	b	12c4c <__assert_fail@plt+0x1b50>
   12c3c:	mov	r0, #0
   12c40:	add	r0, r0, r5
   12c44:	and	r0, r0, #31
   12c48:	ldrb	r0, [r8, r0]
   12c4c:	strb	r0, [r4, #6]
   12c50:	ldr	r0, [sp, #4]
   12c54:	cmp	r0, r7
   12c58:	beq	12a3c <__assert_fail@plt+0x1940>
   12c5c:	cmp	sl, #0
   12c60:	beq	12c78 <__assert_fail@plt+0x1b7c>
   12c64:	ldrb	r0, [r9, #4]
   12c68:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12c6c:	and	r0, r0, #31
   12c70:	ldrb	r0, [r8, r0]
   12c74:	b	12c7c <__assert_fail@plt+0x1b80>
   12c78:	mov	r0, #61	; 0x3d
   12c7c:	strb	r0, [r4, #7]
   12c80:	ldr	r0, [sp]
   12c84:	cmp	r0, r7
   12c88:	beq	12a3c <__assert_fail@plt+0x1940>
   12c8c:	sub	r6, sl, #1
   12c90:	cmp	r6, sl
   12c94:	mov	r0, r6
   12c98:	movwcs	r0, #0
   12c9c:	cmp	r0, #0
   12ca0:	addne	r9, r9, #5
   12ca4:	add	r7, r7, #8
   12ca8:	bne	12a98 <__assert_fail@plt+0x199c>
   12cac:	ldr	r0, [sp, #32]
   12cb0:	add	r0, r0, r7
   12cb4:	str	r0, [sp, #32]
   12cb8:	b	12a30 <__assert_fail@plt+0x1934>
   12cbc:	bx	lr
   12cc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12cc4:	add	fp, sp, #24
   12cc8:	mov	r6, r2
   12ccc:	mov	r4, r1
   12cd0:	mov	r8, r0
   12cd4:	movw	r0, #26215	; 0x6667
   12cd8:	movt	r0, #26214	; 0x6666
   12cdc:	smmul	r0, r1, r0
   12ce0:	asr	r1, r0, #1
   12ce4:	add	r0, r1, r0, lsr #31
   12ce8:	add	r1, r0, r0, lsl #2
   12cec:	subs	r1, r4, r1
   12cf0:	addne	r0, r0, #1
   12cf4:	cmn	r0, #1
   12cf8:	ble	12d08 <__assert_fail@plt+0x1c0c>
   12cfc:	cmn	r0, #-268435455	; 0xf0000001
   12d00:	ble	12d1c <__assert_fail@plt+0x1c20>
   12d04:	b	12d5c <__assert_fail@plt+0x1c60>
   12d08:	beq	12d1c <__assert_fail@plt+0x1c20>
   12d0c:	mov	r1, #-2147483648	; 0x80000000
   12d10:	sdiv	r1, r1, r0
   12d14:	cmp	r1, #8
   12d18:	blt	12d5c <__assert_fail@plt+0x1c60>
   12d1c:	cmn	r4, #1
   12d20:	ble	12d5c <__assert_fail@plt+0x1c60>
   12d24:	lsl	r7, r0, #3
   12d28:	orr	r5, r7, #1
   12d2c:	mov	r0, r5
   12d30:	bl	14250 <__assert_fail@plt+0x3154>
   12d34:	str	r0, [r6]
   12d38:	cmp	r0, #0
   12d3c:	beq	12d6c <__assert_fail@plt+0x1c70>
   12d40:	mov	r2, r0
   12d44:	mov	r0, r8
   12d48:	mov	r1, r4
   12d4c:	mov	r3, r5
   12d50:	bl	12a0c <__assert_fail@plt+0x1910>
   12d54:	mov	r0, r7
   12d58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d5c:	mov	r7, #0
   12d60:	str	r7, [r6]
   12d64:	mov	r0, r7
   12d68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d6c:	mov	r0, r5
   12d70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d74:	push	{fp, lr}
   12d78:	mov	fp, sp
   12d7c:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12d80:	movw	r1, #32459	; 0x7ecb
   12d84:	movt	r1, #1
   12d88:	add	r0, r1, r0
   12d8c:	ldrsb	r1, [r0]
   12d90:	mov	r0, #0
   12d94:	cmn	r1, #1
   12d98:	movwgt	r0, #1
   12d9c:	pop	{fp, pc}
   12da0:	mov	r1, #0
   12da4:	str	r1, [r0]
   12da8:	bx	lr
   12dac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12db0:	add	fp, sp, #28
   12db4:	sub	sp, sp, #28
   12db8:	mov	r9, r0
   12dbc:	str	r2, [sp, #20]
   12dc0:	str	r1, [sp, #24]
   12dc4:	str	r3, [sp, #16]
   12dc8:	ldr	r0, [fp, #8]
   12dcc:	ldr	r0, [r0]
   12dd0:	str	r0, [sp, #12]
   12dd4:	mov	r0, #0
   12dd8:	cmp	r9, #0
   12ddc:	mov	r4, #0
   12de0:	beq	12df8 <__assert_fail@plt+0x1cfc>
   12de4:	clz	r0, r2
   12de8:	lsr	r4, r0, #5
   12dec:	ldr	r0, [r9]
   12df0:	cmp	r0, #0
   12df4:	movwne	r0, #1
   12df8:	orr	r8, r0, r4
   12dfc:	clz	r0, r9
   12e00:	lsr	r0, r0, #5
   12e04:	str	r0, [sp, #8]
   12e08:	add	r7, sp, #16
   12e0c:	add	r5, sp, #12
   12e10:	str	r4, [sp, #4]
   12e14:	b	12e28 <__assert_fail@plt+0x1d2c>
   12e18:	add	r0, r0, #1
   12e1c:	str	r0, [sp, #24]
   12e20:	sub	r0, r6, #1
   12e24:	str	r0, [sp, #20]
   12e28:	ldr	sl, [sp, #12]
   12e2c:	cmp	r8, #0
   12e30:	beq	12e3c <__assert_fail@plt+0x1d40>
   12e34:	ldr	r6, [sp, #20]
   12e38:	b	12e94 <__assert_fail@plt+0x1d98>
   12e3c:	ldr	r6, [sp, #20]
   12e40:	ldr	r4, [sp, #24]
   12e44:	mov	r0, r4
   12e48:	mov	r1, r6
   12e4c:	mov	r2, r7
   12e50:	mov	r3, r5
   12e54:	bl	12f8c <__assert_fail@plt+0x1e90>
   12e58:	cmp	r0, #0
   12e5c:	beq	12e90 <__assert_fail@plt+0x1d94>
   12e60:	ldr	sl, [sp, #12]
   12e64:	add	r4, r4, #8
   12e68:	sub	r6, r6, #8
   12e6c:	mov	r0, r4
   12e70:	mov	r1, r6
   12e74:	mov	r2, r7
   12e78:	mov	r3, r5
   12e7c:	bl	12f8c <__assert_fail@plt+0x1e90>
   12e80:	cmp	r0, #0
   12e84:	bne	12e60 <__assert_fail@plt+0x1d64>
   12e88:	str	r6, [sp, #20]
   12e8c:	str	r4, [sp, #24]
   12e90:	ldr	r4, [sp, #4]
   12e94:	cmp	r6, #0
   12e98:	mov	r0, r6
   12e9c:	movwne	r0, #1
   12ea0:	orr	r0, r4, r0
   12ea4:	cmp	r0, #1
   12ea8:	bne	12f60 <__assert_fail@plt+0x1e64>
   12eac:	cmp	r6, #0
   12eb0:	beq	12ed0 <__assert_fail@plt+0x1dd4>
   12eb4:	ldr	r0, [sp, #24]
   12eb8:	ldrb	r1, [r0]
   12ebc:	subs	r1, r1, #10
   12ec0:	movwne	r1, #1
   12ec4:	ldr	r2, [sp, #8]
   12ec8:	orrs	r1, r1, r2
   12ecc:	beq	12e18 <__assert_fail@plt+0x1d1c>
   12ed0:	ldr	r0, [sp, #12]
   12ed4:	str	sl, [sp, #12]
   12ed8:	sub	r0, r0, sl
   12edc:	ldr	r1, [sp, #16]
   12ee0:	add	r0, r1, r0
   12ee4:	str	r0, [sp, #16]
   12ee8:	ldr	r0, [sp, #24]
   12eec:	add	r6, r0, r6
   12ef0:	cmp	r9, #0
   12ef4:	beq	12f0c <__assert_fail@plt+0x1e10>
   12ef8:	mov	r0, r9
   12efc:	add	r1, sp, #24
   12f00:	mov	r2, r6
   12f04:	add	r3, sp, #20
   12f08:	bl	13264 <__assert_fail@plt+0x2168>
   12f0c:	ldr	r1, [sp, #20]
   12f10:	cmp	r1, #0
   12f14:	beq	12f58 <__assert_fail@plt+0x1e5c>
   12f18:	cmp	r1, #7
   12f1c:	mov	r2, #0
   12f20:	movwgt	r2, #1
   12f24:	orr	r2, r4, r2
   12f28:	ldr	r3, [sp, #8]
   12f2c:	orrs	r2, r2, r3
   12f30:	beq	12f58 <__assert_fail@plt+0x1e5c>
   12f34:	mov	r2, r7
   12f38:	mov	r3, r5
   12f3c:	bl	12f8c <__assert_fail@plt+0x1e90>
   12f40:	cmp	r0, #0
   12f44:	beq	12f60 <__assert_fail@plt+0x1e64>
   12f48:	ldr	r0, [sp, #24]
   12f4c:	sub	r0, r6, r0
   12f50:	str	r0, [sp, #20]
   12f54:	b	12e28 <__assert_fail@plt+0x1d2c>
   12f58:	mov	r0, #0
   12f5c:	str	r0, [sp, #20]
   12f60:	ldr	r0, [fp, #8]
   12f64:	mov	r2, r0
   12f68:	ldr	r0, [r0]
   12f6c:	ldr	r1, [sp, #12]
   12f70:	sub	r0, r0, r1
   12f74:	str	r0, [r2]
   12f78:	ldr	r0, [sp, #20]
   12f7c:	clz	r0, r0
   12f80:	lsr	r0, r0, #5
   12f84:	sub	sp, fp, #28
   12f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f90:	add	fp, sp, #28
   12f94:	sub	sp, sp, #4
   12f98:	mov	r5, #0
   12f9c:	cmp	r1, #8
   12fa0:	blt	13258 <__assert_fail@plt+0x215c>
   12fa4:	mov	sl, r3
   12fa8:	mov	r8, r2
   12fac:	mov	r6, r0
   12fb0:	ldr	r9, [r2]
   12fb4:	ldrb	r7, [r0]
   12fb8:	mov	r0, r7
   12fbc:	bl	12d74 <__assert_fail@plt+0x1c78>
   12fc0:	cmp	r0, #0
   12fc4:	beq	13258 <__assert_fail@plt+0x215c>
   12fc8:	ldrb	r4, [r6, #1]
   12fcc:	mov	r0, r4
   12fd0:	bl	12d74 <__assert_fail@plt+0x1c78>
   12fd4:	cmp	r0, #0
   12fd8:	beq	13258 <__assert_fail@plt+0x215c>
   12fdc:	ldr	r0, [sl]
   12fe0:	cmp	r0, #0
   12fe4:	beq	13024 <__assert_fail@plt+0x1f28>
   12fe8:	mov	r0, r7
   12fec:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12ff0:	mov	r0, r4
   12ff4:	bl	12cbc <__assert_fail@plt+0x1bc0>
   12ff8:	movw	r0, #32459	; 0x7ecb
   12ffc:	movt	r0, #1
   13000:	ldrb	r1, [r0, r7]
   13004:	add	r0, r0, r4
   13008:	ldrsb	r0, [r0]
   1300c:	lsr	r0, r0, #2
   13010:	orr	r0, r0, r1, lsl #3
   13014:	strb	r0, [r9], #1
   13018:	ldr	r0, [sl]
   1301c:	sub	r0, r0, #1
   13020:	str	r0, [sl]
   13024:	ldrb	r7, [r6, #2]
   13028:	cmp	r7, #61	; 0x3d
   1302c:	bne	1304c <__assert_fail@plt+0x1f50>
   13030:	ldrb	r0, [r6, #3]
   13034:	cmp	r0, #61	; 0x3d
   13038:	bne	13254 <__assert_fail@plt+0x2158>
   1303c:	ldrb	r0, [r6, #4]
   13040:	cmp	r0, #61	; 0x3d
   13044:	beq	130d4 <__assert_fail@plt+0x1fd8>
   13048:	b	13254 <__assert_fail@plt+0x2158>
   1304c:	mov	r0, r7
   13050:	bl	12d74 <__assert_fail@plt+0x1c78>
   13054:	cmp	r0, #0
   13058:	beq	13254 <__assert_fail@plt+0x2158>
   1305c:	ldrb	r0, [r6, #3]
   13060:	str	r0, [sp]
   13064:	bl	12d74 <__assert_fail@plt+0x1c78>
   13068:	cmp	r0, #0
   1306c:	beq	13254 <__assert_fail@plt+0x2158>
   13070:	ldr	r0, [sl]
   13074:	cmp	r0, #0
   13078:	beq	130c8 <__assert_fail@plt+0x1fcc>
   1307c:	mov	r0, r4
   13080:	bl	12cbc <__assert_fail@plt+0x1bc0>
   13084:	mov	r0, r7
   13088:	bl	12cbc <__assert_fail@plt+0x1bc0>
   1308c:	ldr	r0, [sp]
   13090:	bl	12cbc <__assert_fail@plt+0x1bc0>
   13094:	movw	r3, #32459	; 0x7ecb
   13098:	movt	r3, #1
   1309c:	ldrb	r1, [r3, r4]
   130a0:	ldrb	r2, [r3, r7]
   130a4:	lsl	r2, r2, #1
   130a8:	orr	r1, r2, r1, lsl #6
   130ac:	add	r0, r3, r0
   130b0:	ldrsb	r0, [r0]
   130b4:	orr	r0, r1, r0, lsr #4
   130b8:	strb	r0, [r9], #1
   130bc:	ldr	r0, [sl]
   130c0:	sub	r0, r0, #1
   130c4:	str	r0, [sl]
   130c8:	ldrb	r4, [r6, #4]
   130cc:	cmp	r4, #61	; 0x3d
   130d0:	bne	13104 <__assert_fail@plt+0x2008>
   130d4:	ldrb	r0, [r6, #5]
   130d8:	cmp	r0, #61	; 0x3d
   130dc:	bne	13254 <__assert_fail@plt+0x2158>
   130e0:	ldrb	r0, [r6, #6]
   130e4:	cmp	r0, #61	; 0x3d
   130e8:	bne	13254 <__assert_fail@plt+0x2158>
   130ec:	ldrb	r0, [r6, #7]
   130f0:	cmp	r0, #61	; 0x3d
   130f4:	bne	13254 <__assert_fail@plt+0x2158>
   130f8:	str	r9, [r8]
   130fc:	mov	r5, #1
   13100:	b	13258 <__assert_fail@plt+0x215c>
   13104:	mov	r0, r4
   13108:	bl	12d74 <__assert_fail@plt+0x1c78>
   1310c:	cmp	r0, #0
   13110:	beq	13254 <__assert_fail@plt+0x2158>
   13114:	ldr	r0, [sl]
   13118:	cmp	r0, #0
   1311c:	beq	13160 <__assert_fail@plt+0x2064>
   13120:	ldr	r7, [sp]
   13124:	mov	r0, r7
   13128:	bl	12cbc <__assert_fail@plt+0x1bc0>
   1312c:	mov	r0, r4
   13130:	bl	12cbc <__assert_fail@plt+0x1bc0>
   13134:	movw	r0, #32459	; 0x7ecb
   13138:	movt	r0, #1
   1313c:	ldrb	r1, [r0, r7]
   13140:	add	r0, r0, r4
   13144:	ldrsb	r0, [r0]
   13148:	lsr	r0, r0, #1
   1314c:	orr	r0, r0, r1, lsl #4
   13150:	strb	r0, [r9], #1
   13154:	ldr	r0, [sl]
   13158:	sub	r0, r0, #1
   1315c:	str	r0, [sl]
   13160:	ldrb	r4, [r6, #5]
   13164:	cmp	r4, #61	; 0x3d
   13168:	beq	130e0 <__assert_fail@plt+0x1fe4>
   1316c:	mov	r0, r4
   13170:	bl	12d74 <__assert_fail@plt+0x1c78>
   13174:	cmp	r0, #0
   13178:	beq	13254 <__assert_fail@plt+0x2158>
   1317c:	ldrb	r7, [r6, #6]
   13180:	mov	r0, r7
   13184:	bl	12d74 <__assert_fail@plt+0x1c78>
   13188:	cmp	r0, #0
   1318c:	beq	13254 <__assert_fail@plt+0x2158>
   13190:	ldr	r0, [sl]
   13194:	cmp	r0, #0
   13198:	beq	131f0 <__assert_fail@plt+0x20f4>
   1319c:	ldrb	r0, [r6, #4]
   131a0:	str	r0, [sp]
   131a4:	bl	12cbc <__assert_fail@plt+0x1bc0>
   131a8:	mov	r0, r4
   131ac:	bl	12cbc <__assert_fail@plt+0x1bc0>
   131b0:	mov	r0, r7
   131b4:	bl	12cbc <__assert_fail@plt+0x1bc0>
   131b8:	movw	r0, #32459	; 0x7ecb
   131bc:	movt	r0, #1
   131c0:	ldr	r1, [sp]
   131c4:	ldrb	r1, [r0, r1]
   131c8:	ldrb	r2, [r0, r4]
   131cc:	lsl	r2, r2, #2
   131d0:	orr	r1, r2, r1, lsl #7
   131d4:	add	r0, r0, r7
   131d8:	ldrsb	r0, [r0]
   131dc:	orr	r0, r1, r0, lsr #3
   131e0:	strb	r0, [r9], #1
   131e4:	ldr	r0, [sl]
   131e8:	sub	r0, r0, #1
   131ec:	str	r0, [sl]
   131f0:	ldrb	r4, [r6, #7]
   131f4:	cmp	r4, #61	; 0x3d
   131f8:	beq	130f8 <__assert_fail@plt+0x1ffc>
   131fc:	mov	r0, r4
   13200:	bl	12d74 <__assert_fail@plt+0x1c78>
   13204:	cmp	r0, #0
   13208:	beq	13254 <__assert_fail@plt+0x2158>
   1320c:	ldr	r0, [sl]
   13210:	cmp	r0, #0
   13214:	beq	130f8 <__assert_fail@plt+0x1ffc>
   13218:	ldrb	r5, [r6, #6]
   1321c:	mov	r0, r5
   13220:	bl	12cbc <__assert_fail@plt+0x1bc0>
   13224:	mov	r0, r4
   13228:	bl	12cbc <__assert_fail@plt+0x1bc0>
   1322c:	movw	r0, #32459	; 0x7ecb
   13230:	movt	r0, #1
   13234:	ldrb	r1, [r0, r4]
   13238:	ldrb	r0, [r0, r5]
   1323c:	orr	r0, r1, r0, lsl #5
   13240:	strb	r0, [r9], #1
   13244:	ldr	r0, [sl]
   13248:	sub	r0, r0, #1
   1324c:	str	r0, [sl]
   13250:	b	130f8 <__assert_fail@plt+0x1ffc>
   13254:	str	r9, [r8]
   13258:	mov	r0, r5
   1325c:	sub	sp, fp, #28
   13260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13264:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13268:	add	fp, sp, #24
   1326c:	mov	r8, r3
   13270:	mov	r7, r2
   13274:	mov	r6, r1
   13278:	mov	r4, r0
   1327c:	ldr	r0, [r0]
   13280:	cmp	r0, #0
   13284:	beq	13298 <__assert_fail@plt+0x219c>
   13288:	cmp	r0, #8
   1328c:	bne	132c4 <__assert_fail@plt+0x21c8>
   13290:	mov	r0, #0
   13294:	str	r0, [r4]
   13298:	ldr	r5, [r6]
   1329c:	sub	r0, r7, r5
   132a0:	cmp	r0, #8
   132a4:	blt	132c4 <__assert_fail@plt+0x21c8>
   132a8:	mov	r9, #8
   132ac:	mov	r0, r5
   132b0:	mov	r1, #10
   132b4:	mov	r2, #8
   132b8:	bl	11060 <memchr@plt>
   132bc:	cmp	r0, #0
   132c0:	beq	13314 <__assert_fail@plt+0x2218>
   132c4:	ldr	r0, [r6]
   132c8:	cmp	r0, r7
   132cc:	bcs	13300 <__assert_fail@plt+0x2204>
   132d0:	add	r0, r0, #1
   132d4:	ldrb	r1, [r0, #-1]
   132d8:	cmp	r1, #10
   132dc:	beq	132c8 <__assert_fail@plt+0x21cc>
   132e0:	ldr	r2, [r4]
   132e4:	add	r3, r2, #1
   132e8:	mov	r5, r4
   132ec:	str	r3, [r5], r2
   132f0:	strb	r1, [r5, #4]
   132f4:	ldr	r1, [r4]
   132f8:	cmp	r1, #8
   132fc:	bne	132c8 <__assert_fail@plt+0x21cc>
   13300:	str	r0, [r6]
   13304:	ldr	r0, [r4], #4
   13308:	str	r0, [r8]
   1330c:	mov	r0, r4
   13310:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13314:	add	r0, r5, #8
   13318:	str	r0, [r6]
   1331c:	str	r9, [r8]
   13320:	mov	r0, r5
   13324:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13328:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1332c:	add	fp, sp, #24
   13330:	sub	sp, sp, #8
   13334:	mov	r4, r3
   13338:	mov	r6, r2
   1333c:	mov	r8, r1
   13340:	mov	r7, r0
   13344:	asr	r0, r2, #3
   13348:	add	r0, r0, r0, lsl #2
   1334c:	add	r0, r0, #5
   13350:	str	r0, [sp, #4]
   13354:	bl	14250 <__assert_fail@plt+0x3154>
   13358:	str	r0, [r4]
   1335c:	mov	r5, #1
   13360:	cmp	r0, #0
   13364:	beq	133b0 <__assert_fail@plt+0x22b4>
   13368:	mov	r3, r0
   1336c:	add	r0, sp, #4
   13370:	str	r0, [sp]
   13374:	mov	r0, r7
   13378:	mov	r1, r8
   1337c:	mov	r2, r6
   13380:	bl	12dac <__assert_fail@plt+0x1cb0>
   13384:	cmp	r0, #0
   13388:	beq	133a0 <__assert_fail@plt+0x22a4>
   1338c:	ldr	r0, [fp, #8]
   13390:	cmp	r0, #0
   13394:	ldrne	r1, [sp, #4]
   13398:	strne	r1, [r0]
   1339c:	b	133b0 <__assert_fail@plt+0x22b4>
   133a0:	ldr	r0, [r4]
   133a4:	bl	14164 <__assert_fail@plt+0x3068>
   133a8:	mov	r5, #0
   133ac:	str	r5, [r4]
   133b0:	mov	r0, r5
   133b4:	sub	sp, fp, #24
   133b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   133bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133c0:	add	fp, sp, #28
   133c4:	sub	sp, sp, #20
   133c8:	mov	r9, r2
   133cc:	mov	r6, r1
   133d0:	mov	r5, r0
   133d4:	tst	r3, #3
   133d8:	bne	13404 <__assert_fail@plt+0x2308>
   133dc:	asr	r0, r3, #2
   133e0:	add	r0, r0, r0, lsl #1
   133e4:	cmp	r0, r6
   133e8:	bne	13404 <__assert_fail@plt+0x2308>
   133ec:	mov	r0, r5
   133f0:	mov	r1, r6
   133f4:	mov	r2, r9
   133f8:	sub	sp, fp, #28
   133fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13400:	b	13564 <__assert_fail@plt+0x2468>
   13404:	cmp	r6, #0
   13408:	cmpne	r3, #0
   1340c:	bne	13428 <__assert_fail@plt+0x232c>
   13410:	cmp	r3, #0
   13414:	beq	13420 <__assert_fail@plt+0x2324>
   13418:	mov	r0, #0
   1341c:	strb	r0, [r9]
   13420:	sub	sp, fp, #28
   13424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13428:	sub	r0, r3, #3
   1342c:	str	r0, [sp, #8]
   13430:	sub	r0, r3, #2
   13434:	str	r0, [sp, #12]
   13438:	sub	r0, r3, #1
   1343c:	str	r0, [sp, #16]
   13440:	sub	r0, r3, #4
   13444:	str	r0, [sp, #4]
   13448:	mov	r7, #0
   1344c:	movw	r8, #32715	; 0x7fcb
   13450:	movt	r8, #1
   13454:	ldrb	r0, [r5]
   13458:	bl	135f0 <__assert_fail@plt+0x24f4>
   1345c:	ldrb	r0, [r8, r0, lsr #2]
   13460:	mov	r4, r9
   13464:	strb	r0, [r4, r7]!
   13468:	ldr	r0, [sp, #16]
   1346c:	cmp	r0, r7
   13470:	beq	13420 <__assert_fail@plt+0x2324>
   13474:	ldrb	r0, [r5]
   13478:	bl	135f0 <__assert_fail@plt+0x24f4>
   1347c:	lsl	sl, r0, #4
   13480:	mov	r0, #0
   13484:	cmp	r6, #1
   13488:	beq	13498 <__assert_fail@plt+0x239c>
   1348c:	ldrb	r0, [r5, #1]
   13490:	bl	135f0 <__assert_fail@plt+0x24f4>
   13494:	lsr	r0, r0, #4
   13498:	add	r0, r0, sl
   1349c:	and	r0, r0, #63	; 0x3f
   134a0:	ldrb	r0, [r8, r0]
   134a4:	strb	r0, [r4, #1]
   134a8:	ldr	r0, [sp, #12]
   134ac:	cmp	r0, r7
   134b0:	beq	13420 <__assert_fail@plt+0x2324>
   134b4:	cmp	r6, #1
   134b8:	beq	134e0 <__assert_fail@plt+0x23e4>
   134bc:	ldrb	r0, [r5, #1]
   134c0:	bl	135f0 <__assert_fail@plt+0x24f4>
   134c4:	subs	sl, r6, #2
   134c8:	lsl	r6, r0, #2
   134cc:	beq	134ec <__assert_fail@plt+0x23f0>
   134d0:	ldrb	r0, [r5, #2]
   134d4:	bl	135f0 <__assert_fail@plt+0x24f4>
   134d8:	lsr	r0, r0, #6
   134dc:	b	134f0 <__assert_fail@plt+0x23f4>
   134e0:	mov	r0, #61	; 0x3d
   134e4:	mov	sl, #0
   134e8:	b	134fc <__assert_fail@plt+0x2400>
   134ec:	mov	r0, #0
   134f0:	add	r0, r0, r6
   134f4:	and	r0, r0, #63	; 0x3f
   134f8:	ldrb	r0, [r8, r0]
   134fc:	strb	r0, [r4, #2]
   13500:	ldr	r0, [sp, #8]
   13504:	cmp	r0, r7
   13508:	beq	13420 <__assert_fail@plt+0x2324>
   1350c:	cmp	sl, #0
   13510:	beq	13528 <__assert_fail@plt+0x242c>
   13514:	ldrb	r0, [r5, #2]
   13518:	bl	135f0 <__assert_fail@plt+0x24f4>
   1351c:	and	r0, r0, #63	; 0x3f
   13520:	ldrb	r0, [r8, r0]
   13524:	b	1352c <__assert_fail@plt+0x2430>
   13528:	mov	r0, #61	; 0x3d
   1352c:	strb	r0, [r4, #3]
   13530:	ldr	r0, [sp, #4]
   13534:	cmp	r0, r7
   13538:	beq	13420 <__assert_fail@plt+0x2324>
   1353c:	sub	r6, sl, #1
   13540:	cmp	r6, sl
   13544:	mov	r0, r6
   13548:	movwcs	r0, #0
   1354c:	cmp	r0, #0
   13550:	addne	r5, r5, #3
   13554:	add	r7, r7, #4
   13558:	bne	13454 <__assert_fail@plt+0x2358>
   1355c:	add	r9, r9, r7
   13560:	b	13418 <__assert_fail@plt+0x231c>
   13564:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13568:	add	fp, sp, #24
   1356c:	cmp	r1, #0
   13570:	beq	135ec <__assert_fail@plt+0x24f0>
   13574:	mov	r4, r2
   13578:	mov	r8, r1
   1357c:	mov	r6, r0
   13580:	movw	r9, #32715	; 0x7fcb
   13584:	movt	r9, #1
   13588:	ldrb	r7, [r6]
   1358c:	mov	r0, r7
   13590:	bl	135f0 <__assert_fail@plt+0x24f4>
   13594:	ldrb	r0, [r9, r7, lsr #2]
   13598:	strb	r0, [r4]
   1359c:	ldrb	r5, [r6, #1]
   135a0:	mov	r0, r5
   135a4:	bl	135f0 <__assert_fail@plt+0x24f4>
   135a8:	lsr	r0, r5, #4
   135ac:	bfi	r0, r7, #4, #2
   135b0:	ldrb	r0, [r9, r0]
   135b4:	strb	r0, [r4, #1]
   135b8:	ldrb	r0, [r6, #2]
   135bc:	bl	135f0 <__assert_fail@plt+0x24f4>
   135c0:	and	r1, r0, #63	; 0x3f
   135c4:	ldrb	r1, [r9, r1]
   135c8:	strb	r1, [r4, #3]
   135cc:	lsr	r0, r0, #6
   135d0:	bfi	r0, r5, #2, #4
   135d4:	ldrb	r0, [r9, r0]
   135d8:	strb	r0, [r4, #2]
   135dc:	add	r4, r4, #4
   135e0:	add	r6, r6, #3
   135e4:	subs	r8, r8, #3
   135e8:	bne	13588 <__assert_fail@plt+0x248c>
   135ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135f0:	bx	lr
   135f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135f8:	add	fp, sp, #24
   135fc:	mov	r6, r2
   13600:	mov	r4, r1
   13604:	mov	r8, r0
   13608:	movw	r0, #21846	; 0x5556
   1360c:	movt	r0, #21845	; 0x5555
   13610:	smmul	r0, r1, r0
   13614:	add	r0, r0, r0, lsr #31
   13618:	add	r1, r0, r0, lsl #1
   1361c:	subs	r1, r4, r1
   13620:	addne	r0, r0, #1
   13624:	cmn	r0, #1
   13628:	ble	13638 <__assert_fail@plt+0x253c>
   1362c:	cmn	r0, #-536870911	; 0xe0000001
   13630:	ble	1364c <__assert_fail@plt+0x2550>
   13634:	b	1368c <__assert_fail@plt+0x2590>
   13638:	beq	1364c <__assert_fail@plt+0x2550>
   1363c:	mov	r1, #-2147483648	; 0x80000000
   13640:	sdiv	r1, r1, r0
   13644:	cmp	r1, #4
   13648:	blt	1368c <__assert_fail@plt+0x2590>
   1364c:	cmn	r4, #1
   13650:	ble	1368c <__assert_fail@plt+0x2590>
   13654:	lsl	r7, r0, #2
   13658:	orr	r5, r7, #1
   1365c:	mov	r0, r5
   13660:	bl	14250 <__assert_fail@plt+0x3154>
   13664:	str	r0, [r6]
   13668:	cmp	r0, #0
   1366c:	beq	1369c <__assert_fail@plt+0x25a0>
   13670:	mov	r2, r0
   13674:	mov	r0, r8
   13678:	mov	r1, r4
   1367c:	mov	r3, r5
   13680:	bl	133bc <__assert_fail@plt+0x22c0>
   13684:	mov	r0, r7
   13688:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1368c:	mov	r7, #0
   13690:	str	r7, [r6]
   13694:	mov	r0, r7
   13698:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1369c:	mov	r0, r5
   136a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136a4:	push	{fp, lr}
   136a8:	mov	fp, sp
   136ac:	bl	135f0 <__assert_fail@plt+0x24f4>
   136b0:	movw	r1, #32779	; 0x800b
   136b4:	movt	r1, #1
   136b8:	add	r0, r1, r0
   136bc:	ldrsb	r1, [r0]
   136c0:	mov	r0, #0
   136c4:	cmn	r1, #1
   136c8:	movwgt	r0, #1
   136cc:	pop	{fp, pc}
   136d0:	mov	r1, #0
   136d4:	str	r1, [r0]
   136d8:	bx	lr
   136dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136e0:	add	fp, sp, #28
   136e4:	sub	sp, sp, #28
   136e8:	mov	r9, r0
   136ec:	str	r2, [sp, #20]
   136f0:	str	r1, [sp, #24]
   136f4:	str	r3, [sp, #16]
   136f8:	ldr	r0, [fp, #8]
   136fc:	ldr	r0, [r0]
   13700:	str	r0, [sp, #12]
   13704:	mov	r0, #0
   13708:	cmp	r9, #0
   1370c:	mov	r4, #0
   13710:	beq	13728 <__assert_fail@plt+0x262c>
   13714:	clz	r0, r2
   13718:	lsr	r4, r0, #5
   1371c:	ldr	r0, [r9]
   13720:	cmp	r0, #0
   13724:	movwne	r0, #1
   13728:	orr	r8, r0, r4
   1372c:	clz	r0, r9
   13730:	lsr	r0, r0, #5
   13734:	str	r0, [sp, #8]
   13738:	add	r7, sp, #16
   1373c:	add	r5, sp, #12
   13740:	str	r4, [sp, #4]
   13744:	b	13758 <__assert_fail@plt+0x265c>
   13748:	add	r0, r0, #1
   1374c:	str	r0, [sp, #24]
   13750:	sub	r0, r6, #1
   13754:	str	r0, [sp, #20]
   13758:	ldr	sl, [sp, #12]
   1375c:	cmp	r8, #0
   13760:	beq	1376c <__assert_fail@plt+0x2670>
   13764:	ldr	r6, [sp, #20]
   13768:	b	137c4 <__assert_fail@plt+0x26c8>
   1376c:	ldr	r6, [sp, #20]
   13770:	ldr	r4, [sp, #24]
   13774:	mov	r0, r4
   13778:	mov	r1, r6
   1377c:	mov	r2, r7
   13780:	mov	r3, r5
   13784:	bl	138bc <__assert_fail@plt+0x27c0>
   13788:	cmp	r0, #0
   1378c:	beq	137c0 <__assert_fail@plt+0x26c4>
   13790:	ldr	sl, [sp, #12]
   13794:	add	r4, r4, #4
   13798:	sub	r6, r6, #4
   1379c:	mov	r0, r4
   137a0:	mov	r1, r6
   137a4:	mov	r2, r7
   137a8:	mov	r3, r5
   137ac:	bl	138bc <__assert_fail@plt+0x27c0>
   137b0:	cmp	r0, #0
   137b4:	bne	13790 <__assert_fail@plt+0x2694>
   137b8:	str	r6, [sp, #20]
   137bc:	str	r4, [sp, #24]
   137c0:	ldr	r4, [sp, #4]
   137c4:	cmp	r6, #0
   137c8:	mov	r0, r6
   137cc:	movwne	r0, #1
   137d0:	orr	r0, r4, r0
   137d4:	cmp	r0, #1
   137d8:	bne	13890 <__assert_fail@plt+0x2794>
   137dc:	cmp	r6, #0
   137e0:	beq	13800 <__assert_fail@plt+0x2704>
   137e4:	ldr	r0, [sp, #24]
   137e8:	ldrb	r1, [r0]
   137ec:	subs	r1, r1, #10
   137f0:	movwne	r1, #1
   137f4:	ldr	r2, [sp, #8]
   137f8:	orrs	r1, r1, r2
   137fc:	beq	13748 <__assert_fail@plt+0x264c>
   13800:	ldr	r0, [sp, #12]
   13804:	str	sl, [sp, #12]
   13808:	sub	r0, r0, sl
   1380c:	ldr	r1, [sp, #16]
   13810:	add	r0, r1, r0
   13814:	str	r0, [sp, #16]
   13818:	ldr	r0, [sp, #24]
   1381c:	add	r6, r0, r6
   13820:	cmp	r9, #0
   13824:	beq	1383c <__assert_fail@plt+0x2740>
   13828:	mov	r0, r9
   1382c:	add	r1, sp, #24
   13830:	mov	r2, r6
   13834:	add	r3, sp, #20
   13838:	bl	13a98 <__assert_fail@plt+0x299c>
   1383c:	ldr	r1, [sp, #20]
   13840:	cmp	r1, #0
   13844:	beq	13888 <__assert_fail@plt+0x278c>
   13848:	cmp	r1, #3
   1384c:	mov	r2, #0
   13850:	movwgt	r2, #1
   13854:	orr	r2, r4, r2
   13858:	ldr	r3, [sp, #8]
   1385c:	orrs	r2, r2, r3
   13860:	beq	13888 <__assert_fail@plt+0x278c>
   13864:	mov	r2, r7
   13868:	mov	r3, r5
   1386c:	bl	138bc <__assert_fail@plt+0x27c0>
   13870:	cmp	r0, #0
   13874:	beq	13890 <__assert_fail@plt+0x2794>
   13878:	ldr	r0, [sp, #24]
   1387c:	sub	r0, r6, r0
   13880:	str	r0, [sp, #20]
   13884:	b	13758 <__assert_fail@plt+0x265c>
   13888:	mov	r0, #0
   1388c:	str	r0, [sp, #20]
   13890:	ldr	r0, [fp, #8]
   13894:	mov	r2, r0
   13898:	ldr	r0, [r0]
   1389c:	ldr	r1, [sp, #12]
   138a0:	sub	r0, r0, r1
   138a4:	str	r0, [r2]
   138a8:	ldr	r0, [sp, #20]
   138ac:	clz	r0, r0
   138b0:	lsr	r0, r0, #5
   138b4:	sub	sp, fp, #28
   138b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138c0:	add	fp, sp, #28
   138c4:	sub	sp, sp, #4
   138c8:	mov	sl, #0
   138cc:	cmp	r1, #2
   138d0:	blt	13a0c <__assert_fail@plt+0x2910>
   138d4:	mov	r8, r3
   138d8:	mov	r9, r2
   138dc:	mov	r7, r1
   138e0:	mov	r6, r0
   138e4:	ldr	r5, [r2]
   138e8:	ldrb	r4, [r0]
   138ec:	mov	r0, r4
   138f0:	bl	136a4 <__assert_fail@plt+0x25a8>
   138f4:	cmp	r0, #0
   138f8:	beq	13a0c <__assert_fail@plt+0x2910>
   138fc:	str	r5, [sp]
   13900:	ldrb	r5, [r6, #1]
   13904:	mov	r0, r5
   13908:	bl	136a4 <__assert_fail@plt+0x25a8>
   1390c:	cmp	r0, #0
   13910:	beq	13a0c <__assert_fail@plt+0x2910>
   13914:	ldr	r0, [r8]
   13918:	cmp	r0, #0
   1391c:	beq	13964 <__assert_fail@plt+0x2868>
   13920:	mov	r0, r4
   13924:	bl	135f0 <__assert_fail@plt+0x24f4>
   13928:	mov	r0, r5
   1392c:	bl	135f0 <__assert_fail@plt+0x24f4>
   13930:	movw	r0, #32779	; 0x800b
   13934:	movt	r0, #1
   13938:	ldrb	r1, [r0, r4]
   1393c:	add	r0, r0, r5
   13940:	ldrsb	r0, [r0]
   13944:	lsr	r0, r0, #4
   13948:	orr	r0, r0, r1, lsl #2
   1394c:	ldr	r1, [sp]
   13950:	strb	r0, [r1], #1
   13954:	str	r1, [sp]
   13958:	ldr	r0, [r8]
   1395c:	sub	r0, r0, #1
   13960:	str	r0, [r8]
   13964:	cmp	r7, #2
   13968:	beq	13a04 <__assert_fail@plt+0x2908>
   1396c:	ldrb	r4, [r6, #2]
   13970:	cmp	r4, #61	; 0x3d
   13974:	bne	1399c <__assert_fail@plt+0x28a0>
   13978:	cmp	r7, #4
   1397c:	bne	13a04 <__assert_fail@plt+0x2908>
   13980:	ldrb	r0, [r6, #3]
   13984:	cmp	r0, #61	; 0x3d
   13988:	bne	13a04 <__assert_fail@plt+0x2908>
   1398c:	ldr	r5, [sp]
   13990:	str	r5, [r9]
   13994:	mov	sl, #1
   13998:	b	13a0c <__assert_fail@plt+0x2910>
   1399c:	mov	r0, r4
   139a0:	bl	136a4 <__assert_fail@plt+0x25a8>
   139a4:	cmp	r0, #0
   139a8:	beq	13a04 <__assert_fail@plt+0x2908>
   139ac:	ldr	r0, [r8]
   139b0:	cmp	r0, #0
   139b4:	beq	13a18 <__assert_fail@plt+0x291c>
   139b8:	mov	r0, r5
   139bc:	bl	135f0 <__assert_fail@plt+0x24f4>
   139c0:	mov	r0, r4
   139c4:	bl	135f0 <__assert_fail@plt+0x24f4>
   139c8:	movw	r0, #32779	; 0x800b
   139cc:	movt	r0, #1
   139d0:	ldrb	r1, [r0, r5]
   139d4:	add	r0, r0, r4
   139d8:	ldrsb	r0, [r0]
   139dc:	lsr	r0, r0, #2
   139e0:	orr	r0, r0, r1, lsl #4
   139e4:	ldr	r5, [sp]
   139e8:	strb	r0, [r5], #1
   139ec:	ldr	r0, [r8]
   139f0:	sub	r0, r0, #1
   139f4:	str	r0, [r8]
   139f8:	cmp	r7, #3
   139fc:	beq	13a90 <__assert_fail@plt+0x2994>
   13a00:	b	13a24 <__assert_fail@plt+0x2928>
   13a04:	ldr	r0, [sp]
   13a08:	str	r0, [r9]
   13a0c:	mov	r0, sl
   13a10:	sub	sp, fp, #28
   13a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a18:	ldr	r5, [sp]
   13a1c:	cmp	r7, #3
   13a20:	beq	13a90 <__assert_fail@plt+0x2994>
   13a24:	ldrb	r6, [r6, #3]
   13a28:	cmp	r6, #61	; 0x3d
   13a2c:	bne	13a3c <__assert_fail@plt+0x2940>
   13a30:	cmp	r7, #4
   13a34:	beq	13990 <__assert_fail@plt+0x2894>
   13a38:	b	13a90 <__assert_fail@plt+0x2994>
   13a3c:	mov	r0, r6
   13a40:	bl	136a4 <__assert_fail@plt+0x25a8>
   13a44:	cmp	r0, #0
   13a48:	beq	13a90 <__assert_fail@plt+0x2994>
   13a4c:	ldr	r0, [r8]
   13a50:	cmp	r0, #0
   13a54:	beq	13990 <__assert_fail@plt+0x2894>
   13a58:	mov	r0, r4
   13a5c:	bl	135f0 <__assert_fail@plt+0x24f4>
   13a60:	mov	r0, r6
   13a64:	bl	135f0 <__assert_fail@plt+0x24f4>
   13a68:	movw	r0, #32779	; 0x800b
   13a6c:	movt	r0, #1
   13a70:	ldrb	r1, [r0, r4]
   13a74:	ldrb	r0, [r0, r6]
   13a78:	orr	r0, r0, r1, lsl #6
   13a7c:	strb	r0, [r5], #1
   13a80:	ldr	r0, [r8]
   13a84:	sub	r0, r0, #1
   13a88:	str	r0, [r8]
   13a8c:	b	13990 <__assert_fail@plt+0x2894>
   13a90:	str	r5, [r9]
   13a94:	b	13a0c <__assert_fail@plt+0x2910>
   13a98:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a9c:	add	fp, sp, #24
   13aa0:	mov	r8, r3
   13aa4:	mov	r7, r2
   13aa8:	mov	r6, r1
   13aac:	mov	r4, r0
   13ab0:	ldr	r0, [r0]
   13ab4:	cmp	r0, #0
   13ab8:	beq	13acc <__assert_fail@plt+0x29d0>
   13abc:	cmp	r0, #4
   13ac0:	bne	13af8 <__assert_fail@plt+0x29fc>
   13ac4:	mov	r0, #0
   13ac8:	str	r0, [r4]
   13acc:	ldr	r5, [r6]
   13ad0:	sub	r0, r7, r5
   13ad4:	cmp	r0, #4
   13ad8:	blt	13af8 <__assert_fail@plt+0x29fc>
   13adc:	mov	r9, #4
   13ae0:	mov	r0, r5
   13ae4:	mov	r1, #10
   13ae8:	mov	r2, #4
   13aec:	bl	11060 <memchr@plt>
   13af0:	cmp	r0, #0
   13af4:	beq	13b48 <__assert_fail@plt+0x2a4c>
   13af8:	ldr	r0, [r6]
   13afc:	cmp	r0, r7
   13b00:	bcs	13b34 <__assert_fail@plt+0x2a38>
   13b04:	add	r0, r0, #1
   13b08:	ldrb	r1, [r0, #-1]
   13b0c:	cmp	r1, #10
   13b10:	beq	13afc <__assert_fail@plt+0x2a00>
   13b14:	ldr	r2, [r4]
   13b18:	add	r3, r2, #1
   13b1c:	mov	r5, r4
   13b20:	str	r3, [r5], r2
   13b24:	strb	r1, [r5, #4]
   13b28:	ldr	r1, [r4]
   13b2c:	cmp	r1, #4
   13b30:	bne	13afc <__assert_fail@plt+0x2a00>
   13b34:	str	r0, [r6]
   13b38:	ldr	r0, [r4], #4
   13b3c:	str	r0, [r8]
   13b40:	mov	r0, r4
   13b44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b48:	add	r0, r5, #4
   13b4c:	str	r0, [r6]
   13b50:	str	r9, [r8]
   13b54:	mov	r0, r5
   13b58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b60:	add	fp, sp, #24
   13b64:	sub	sp, sp, #8
   13b68:	mov	r4, r3
   13b6c:	mov	r6, r2
   13b70:	mov	r8, r1
   13b74:	mov	r7, r0
   13b78:	asr	r0, r2, #2
   13b7c:	add	r0, r0, r0, lsl #1
   13b80:	add	r0, r0, #3
   13b84:	str	r0, [sp, #4]
   13b88:	bl	14250 <__assert_fail@plt+0x3154>
   13b8c:	str	r0, [r4]
   13b90:	mov	r5, #1
   13b94:	cmp	r0, #0
   13b98:	beq	13be4 <__assert_fail@plt+0x2ae8>
   13b9c:	mov	r3, r0
   13ba0:	add	r0, sp, #4
   13ba4:	str	r0, [sp]
   13ba8:	mov	r0, r7
   13bac:	mov	r1, r8
   13bb0:	mov	r2, r6
   13bb4:	bl	136dc <__assert_fail@plt+0x25e0>
   13bb8:	cmp	r0, #0
   13bbc:	beq	13bd4 <__assert_fail@plt+0x2ad8>
   13bc0:	ldr	r0, [fp, #8]
   13bc4:	cmp	r0, #0
   13bc8:	ldrne	r1, [sp, #4]
   13bcc:	strne	r1, [r0]
   13bd0:	b	13be4 <__assert_fail@plt+0x2ae8>
   13bd4:	ldr	r0, [r4]
   13bd8:	bl	14164 <__assert_fail@plt+0x3068>
   13bdc:	mov	r5, #0
   13be0:	str	r5, [r4]
   13be4:	mov	r0, r5
   13be8:	sub	sp, fp, #24
   13bec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bf0:	mov	r1, r0
   13bf4:	sub	r2, r0, #65	; 0x41
   13bf8:	mov	r0, #1
   13bfc:	cmp	r2, #26
   13c00:	subcs	r2, r1, #97	; 0x61
   13c04:	cmpcs	r2, #26
   13c08:	bcs	13c10 <__assert_fail@plt+0x2b14>
   13c0c:	bx	lr
   13c10:	sub	r1, r1, #48	; 0x30
   13c14:	cmp	r1, #10
   13c18:	movcs	r0, #0
   13c1c:	bx	lr
   13c20:	mov	r1, r0
   13c24:	sub	r2, r0, #65	; 0x41
   13c28:	mov	r0, #1
   13c2c:	cmp	r2, #26
   13c30:	subcs	r1, r1, #97	; 0x61
   13c34:	cmpcs	r1, #26
   13c38:	movcs	r0, #0
   13c3c:	bx	lr
   13c40:	mov	r1, #0
   13c44:	cmp	r0, #128	; 0x80
   13c48:	movwcc	r1, #1
   13c4c:	mov	r0, r1
   13c50:	bx	lr
   13c54:	sub	r1, r0, #9
   13c58:	clz	r1, r1
   13c5c:	lsr	r1, r1, #5
   13c60:	sub	r0, r0, #32
   13c64:	clz	r0, r0
   13c68:	lsr	r0, r0, #5
   13c6c:	orr	r0, r0, r1
   13c70:	bx	lr
   13c74:	mov	r1, r0
   13c78:	mov	r0, #1
   13c7c:	cmp	r1, #32
   13c80:	bxcc	lr
   13c84:	cmp	r1, #127	; 0x7f
   13c88:	movne	r0, #0
   13c8c:	bx	lr
   13c90:	sub	r1, r0, #48	; 0x30
   13c94:	mov	r0, #0
   13c98:	cmp	r1, #10
   13c9c:	movwcc	r0, #1
   13ca0:	bx	lr
   13ca4:	sub	r1, r0, #33	; 0x21
   13ca8:	mov	r0, #0
   13cac:	cmp	r1, #94	; 0x5e
   13cb0:	movwcc	r0, #1
   13cb4:	bx	lr
   13cb8:	sub	r1, r0, #97	; 0x61
   13cbc:	mov	r0, #0
   13cc0:	cmp	r1, #26
   13cc4:	movwcc	r0, #1
   13cc8:	bx	lr
   13ccc:	sub	r1, r0, #32
   13cd0:	mov	r0, #0
   13cd4:	cmp	r1, #95	; 0x5f
   13cd8:	movwcc	r0, #1
   13cdc:	bx	lr
   13ce0:	sub	r1, r0, #33	; 0x21
   13ce4:	cmp	r1, #93	; 0x5d
   13ce8:	bhi	13e74 <__assert_fail@plt+0x2d78>
   13cec:	mov	r0, #1
   13cf0:	add	r2, pc, #0
   13cf4:	ldr	pc, [r2, r1, lsl #2]
   13cf8:	andeq	r3, r1, r0, ror lr
   13cfc:	andeq	r3, r1, r0, ror lr
   13d00:	andeq	r3, r1, r0, ror lr
   13d04:	andeq	r3, r1, r0, ror lr
   13d08:	andeq	r3, r1, r0, ror lr
   13d0c:	andeq	r3, r1, r0, ror lr
   13d10:	andeq	r3, r1, r0, ror lr
   13d14:	andeq	r3, r1, r0, ror lr
   13d18:	andeq	r3, r1, r0, ror lr
   13d1c:	andeq	r3, r1, r0, ror lr
   13d20:	andeq	r3, r1, r0, ror lr
   13d24:	andeq	r3, r1, r0, ror lr
   13d28:	andeq	r3, r1, r0, ror lr
   13d2c:	andeq	r3, r1, r0, ror lr
   13d30:	andeq	r3, r1, r0, ror lr
   13d34:	andeq	r3, r1, r4, ror lr
   13d38:	andeq	r3, r1, r4, ror lr
   13d3c:	andeq	r3, r1, r4, ror lr
   13d40:	andeq	r3, r1, r4, ror lr
   13d44:	andeq	r3, r1, r4, ror lr
   13d48:	andeq	r3, r1, r4, ror lr
   13d4c:	andeq	r3, r1, r4, ror lr
   13d50:	andeq	r3, r1, r4, ror lr
   13d54:	andeq	r3, r1, r4, ror lr
   13d58:	andeq	r3, r1, r4, ror lr
   13d5c:	andeq	r3, r1, r0, ror lr
   13d60:	andeq	r3, r1, r0, ror lr
   13d64:	andeq	r3, r1, r0, ror lr
   13d68:	andeq	r3, r1, r0, ror lr
   13d6c:	andeq	r3, r1, r0, ror lr
   13d70:	andeq	r3, r1, r0, ror lr
   13d74:	andeq	r3, r1, r0, ror lr
   13d78:	andeq	r3, r1, r4, ror lr
   13d7c:	andeq	r3, r1, r4, ror lr
   13d80:	andeq	r3, r1, r4, ror lr
   13d84:	andeq	r3, r1, r4, ror lr
   13d88:	andeq	r3, r1, r4, ror lr
   13d8c:	andeq	r3, r1, r4, ror lr
   13d90:	andeq	r3, r1, r4, ror lr
   13d94:	andeq	r3, r1, r4, ror lr
   13d98:	andeq	r3, r1, r4, ror lr
   13d9c:	andeq	r3, r1, r4, ror lr
   13da0:	andeq	r3, r1, r4, ror lr
   13da4:	andeq	r3, r1, r4, ror lr
   13da8:	andeq	r3, r1, r4, ror lr
   13dac:	andeq	r3, r1, r4, ror lr
   13db0:	andeq	r3, r1, r4, ror lr
   13db4:	andeq	r3, r1, r4, ror lr
   13db8:	andeq	r3, r1, r4, ror lr
   13dbc:	andeq	r3, r1, r4, ror lr
   13dc0:	andeq	r3, r1, r4, ror lr
   13dc4:	andeq	r3, r1, r4, ror lr
   13dc8:	andeq	r3, r1, r4, ror lr
   13dcc:	andeq	r3, r1, r4, ror lr
   13dd0:	andeq	r3, r1, r4, ror lr
   13dd4:	andeq	r3, r1, r4, ror lr
   13dd8:	andeq	r3, r1, r4, ror lr
   13ddc:	andeq	r3, r1, r4, ror lr
   13de0:	andeq	r3, r1, r0, ror lr
   13de4:	andeq	r3, r1, r0, ror lr
   13de8:	andeq	r3, r1, r0, ror lr
   13dec:	andeq	r3, r1, r0, ror lr
   13df0:	andeq	r3, r1, r0, ror lr
   13df4:	andeq	r3, r1, r0, ror lr
   13df8:	andeq	r3, r1, r4, ror lr
   13dfc:	andeq	r3, r1, r4, ror lr
   13e00:	andeq	r3, r1, r4, ror lr
   13e04:	andeq	r3, r1, r4, ror lr
   13e08:	andeq	r3, r1, r4, ror lr
   13e0c:	andeq	r3, r1, r4, ror lr
   13e10:	andeq	r3, r1, r4, ror lr
   13e14:	andeq	r3, r1, r4, ror lr
   13e18:	andeq	r3, r1, r4, ror lr
   13e1c:	andeq	r3, r1, r4, ror lr
   13e20:	andeq	r3, r1, r4, ror lr
   13e24:	andeq	r3, r1, r4, ror lr
   13e28:	andeq	r3, r1, r4, ror lr
   13e2c:	andeq	r3, r1, r4, ror lr
   13e30:	andeq	r3, r1, r4, ror lr
   13e34:	andeq	r3, r1, r4, ror lr
   13e38:	andeq	r3, r1, r4, ror lr
   13e3c:	andeq	r3, r1, r4, ror lr
   13e40:	andeq	r3, r1, r4, ror lr
   13e44:	andeq	r3, r1, r4, ror lr
   13e48:	andeq	r3, r1, r4, ror lr
   13e4c:	andeq	r3, r1, r4, ror lr
   13e50:	andeq	r3, r1, r4, ror lr
   13e54:	andeq	r3, r1, r4, ror lr
   13e58:	andeq	r3, r1, r4, ror lr
   13e5c:	andeq	r3, r1, r4, ror lr
   13e60:	andeq	r3, r1, r0, ror lr
   13e64:	andeq	r3, r1, r0, ror lr
   13e68:	andeq	r3, r1, r0, ror lr
   13e6c:	andeq	r3, r1, r0, ror lr
   13e70:	bx	lr
   13e74:	mov	r0, #0
   13e78:	bx	lr
   13e7c:	sub	r0, r0, #9
   13e80:	cmp	r0, #23
   13e84:	movhi	r0, #0
   13e88:	bxhi	lr
   13e8c:	bic	r0, r0, #-16777216	; 0xff000000
   13e90:	movw	r1, #31
   13e94:	movt	r1, #128	; 0x80
   13e98:	mov	r2, #1
   13e9c:	and	r0, r2, r1, lsr r0
   13ea0:	bx	lr
   13ea4:	sub	r1, r0, #65	; 0x41
   13ea8:	mov	r0, #0
   13eac:	cmp	r1, #26
   13eb0:	movwcc	r0, #1
   13eb4:	bx	lr
   13eb8:	mov	r1, r0
   13ebc:	sub	r2, r0, #48	; 0x30
   13ec0:	mov	r0, #1
   13ec4:	cmp	r2, #22
   13ec8:	bhi	13ee0 <__assert_fail@plt+0x2de4>
   13ecc:	mov	ip, #1
   13ed0:	movw	r3, #1023	; 0x3ff
   13ed4:	movt	r3, #126	; 0x7e
   13ed8:	tst	r3, ip, lsl r2
   13edc:	bxne	lr
   13ee0:	sub	r1, r1, #97	; 0x61
   13ee4:	cmp	r1, #6
   13ee8:	movcs	r0, #0
   13eec:	bxcs	lr
   13ef0:	bx	lr
   13ef4:	sub	r1, r0, #65	; 0x41
   13ef8:	cmp	r1, #26
   13efc:	addcc	r0, r0, #32
   13f00:	bx	lr
   13f04:	sub	r1, r0, #97	; 0x61
   13f08:	cmp	r1, #26
   13f0c:	subcc	r0, r0, #32
   13f10:	bx	lr
   13f14:	movw	r1, #37236	; 0x9174
   13f18:	movt	r1, #2
   13f1c:	str	r0, [r1]
   13f20:	bx	lr
   13f24:	movw	r1, #37240	; 0x9178
   13f28:	movt	r1, #2
   13f2c:	strb	r0, [r1]
   13f30:	bx	lr
   13f34:	push	{r4, r5, r6, sl, fp, lr}
   13f38:	add	fp, sp, #16
   13f3c:	sub	sp, sp, #8
   13f40:	movw	r0, #37204	; 0x9154
   13f44:	movt	r0, #2
   13f48:	ldr	r0, [r0]
   13f4c:	bl	16de8 <__assert_fail@plt+0x5cec>
   13f50:	cmp	r0, #0
   13f54:	beq	13f7c <__assert_fail@plt+0x2e80>
   13f58:	movw	r0, #37240	; 0x9178
   13f5c:	movt	r0, #2
   13f60:	ldrb	r0, [r0]
   13f64:	cmp	r0, #0
   13f68:	beq	13f9c <__assert_fail@plt+0x2ea0>
   13f6c:	bl	11018 <__errno_location@plt>
   13f70:	ldr	r0, [r0]
   13f74:	cmp	r0, #32
   13f78:	bne	13f9c <__assert_fail@plt+0x2ea0>
   13f7c:	movw	r0, #37192	; 0x9148
   13f80:	movt	r0, #2
   13f84:	ldr	r0, [r0]
   13f88:	bl	16de8 <__assert_fail@plt+0x5cec>
   13f8c:	cmp	r0, #0
   13f90:	subeq	sp, fp, #16
   13f94:	popeq	{r4, r5, r6, sl, fp, pc}
   13f98:	b	1400c <__assert_fail@plt+0x2f10>
   13f9c:	movw	r1, #31644	; 0x7b9c
   13fa0:	movt	r1, #1
   13fa4:	mov	r0, #0
   13fa8:	mov	r2, #5
   13fac:	bl	10f1c <dcgettext@plt>
   13fb0:	mov	r4, r0
   13fb4:	movw	r0, #37236	; 0x9174
   13fb8:	movt	r0, #2
   13fbc:	ldr	r6, [r0]
   13fc0:	bl	11018 <__errno_location@plt>
   13fc4:	ldr	r5, [r0]
   13fc8:	cmp	r6, #0
   13fcc:	bne	13fe8 <__assert_fail@plt+0x2eec>
   13fd0:	movw	r2, #30788	; 0x7844
   13fd4:	movt	r2, #1
   13fd8:	mov	r0, #0
   13fdc:	mov	r1, r5
   13fe0:	mov	r3, r4
   13fe4:	b	14008 <__assert_fail@plt+0x2f0c>
   13fe8:	mov	r0, r6
   13fec:	bl	15928 <__assert_fail@plt+0x482c>
   13ff0:	mov	r3, r0
   13ff4:	str	r4, [sp]
   13ff8:	movw	r2, #30784	; 0x7840
   13ffc:	movt	r2, #1
   14000:	mov	r0, #0
   14004:	mov	r1, r5
   14008:	bl	10f94 <error@plt>
   1400c:	movw	r0, #37108	; 0x90f4
   14010:	movt	r0, #2
   14014:	ldr	r0, [r0]
   14018:	bl	10ee0 <_exit@plt>
   1401c:	b	10eb0 <posix_fadvise64@plt>
   14020:	cmp	r0, #0
   14024:	bxeq	lr
   14028:	push	{r4, sl, fp, lr}
   1402c:	add	fp, sp, #8
   14030:	sub	sp, sp, #16
   14034:	mov	r4, r1
   14038:	bl	11048 <fileno@plt>
   1403c:	mov	r1, #0
   14040:	str	r1, [sp]
   14044:	stmib	sp, {r1, r4}
   14048:	mov	r2, #0
   1404c:	mov	r3, #0
   14050:	bl	1401c <__assert_fail@plt+0x2f20>
   14054:	sub	sp, fp, #8
   14058:	pop	{r4, sl, fp, pc}
   1405c:	push	{r4, r5, fp, lr}
   14060:	add	fp, sp, #8
   14064:	sub	sp, sp, #8
   14068:	mov	r4, r0
   1406c:	bl	11048 <fileno@plt>
   14070:	cmn	r0, #1
   14074:	ble	140ec <__assert_fail@plt+0x2ff0>
   14078:	mov	r0, r4
   1407c:	bl	10fb8 <__freading@plt>
   14080:	cmp	r0, #0
   14084:	beq	140b0 <__assert_fail@plt+0x2fb4>
   14088:	mov	r0, r4
   1408c:	bl	11048 <fileno@plt>
   14090:	mov	r1, #1
   14094:	str	r1, [sp]
   14098:	mov	r2, #0
   1409c:	mov	r3, #0
   140a0:	bl	10f58 <lseek64@plt>
   140a4:	and	r0, r0, r1
   140a8:	cmn	r0, #1
   140ac:	beq	140ec <__assert_fail@plt+0x2ff0>
   140b0:	mov	r0, r4
   140b4:	bl	140fc <__assert_fail@plt+0x3000>
   140b8:	cmp	r0, #0
   140bc:	beq	140ec <__assert_fail@plt+0x2ff0>
   140c0:	bl	11018 <__errno_location@plt>
   140c4:	ldr	r5, [r0]
   140c8:	mov	r0, r4
   140cc:	bl	11078 <fclose@plt>
   140d0:	cmp	r5, #0
   140d4:	beq	140e4 <__assert_fail@plt+0x2fe8>
   140d8:	bl	11018 <__errno_location@plt>
   140dc:	str	r5, [r0]
   140e0:	mvn	r0, #0
   140e4:	sub	sp, fp, #8
   140e8:	pop	{r4, r5, fp, pc}
   140ec:	mov	r0, r4
   140f0:	sub	sp, fp, #8
   140f4:	pop	{r4, r5, fp, lr}
   140f8:	b	11078 <fclose@plt>
   140fc:	push	{r4, sl, fp, lr}
   14100:	add	fp, sp, #8
   14104:	mov	r4, r0
   14108:	cmp	r0, #0
   1410c:	beq	14124 <__assert_fail@plt+0x3028>
   14110:	mov	r0, r4
   14114:	bl	10fb8 <__freading@plt>
   14118:	cmp	r0, #0
   1411c:	movne	r0, r4
   14120:	blne	14130 <__assert_fail@plt+0x3034>
   14124:	mov	r0, r4
   14128:	pop	{r4, sl, fp, lr}
   1412c:	b	10ebc <fflush@plt>
   14130:	push	{fp, lr}
   14134:	mov	fp, sp
   14138:	sub	sp, sp, #8
   1413c:	ldrb	r1, [r0, #1]
   14140:	tst	r1, #1
   14144:	beq	1415c <__assert_fail@plt+0x3060>
   14148:	mov	r1, #1
   1414c:	str	r1, [sp]
   14150:	mov	r2, #0
   14154:	mov	r3, #0
   14158:	bl	1418c <__assert_fail@plt+0x3090>
   1415c:	mov	sp, fp
   14160:	pop	{fp, pc}
   14164:	push	{r4, r5, r6, sl, fp, lr}
   14168:	add	fp, sp, #16
   1416c:	mov	r4, r0
   14170:	bl	11018 <__errno_location@plt>
   14174:	mov	r5, r0
   14178:	ldr	r6, [r0]
   1417c:	mov	r0, r4
   14180:	bl	10ed4 <free@plt>
   14184:	str	r6, [r5]
   14188:	pop	{r4, r5, r6, sl, fp, pc}
   1418c:	push	{r4, r5, r6, r7, fp, lr}
   14190:	add	fp, sp, #16
   14194:	sub	sp, sp, #8
   14198:	mov	r5, r3
   1419c:	mov	r6, r2
   141a0:	mov	r4, r0
   141a4:	ldr	r0, [r0, #4]
   141a8:	ldr	r1, [r4, #8]
   141ac:	cmp	r1, r0
   141b0:	bne	141cc <__assert_fail@plt+0x30d0>
   141b4:	ldrd	r0, [r4, #16]
   141b8:	cmp	r1, r0
   141bc:	bne	141cc <__assert_fail@plt+0x30d0>
   141c0:	ldr	r0, [r4, #36]	; 0x24
   141c4:	cmp	r0, #0
   141c8:	beq	141e4 <__assert_fail@plt+0x30e8>
   141cc:	mov	r0, r4
   141d0:	mov	r2, r6
   141d4:	mov	r3, r5
   141d8:	sub	sp, fp, #16
   141dc:	pop	{r4, r5, r6, r7, fp, lr}
   141e0:	b	11084 <fseeko64@plt>
   141e4:	ldr	r7, [fp, #8]
   141e8:	mov	r0, r4
   141ec:	bl	11048 <fileno@plt>
   141f0:	str	r7, [sp]
   141f4:	mov	r2, r6
   141f8:	mov	r3, r5
   141fc:	bl	10f58 <lseek64@plt>
   14200:	and	r2, r0, r1
   14204:	cmn	r2, #1
   14208:	beq	14228 <__assert_fail@plt+0x312c>
   1420c:	strd	r0, [r4, #80]	; 0x50
   14210:	ldr	r0, [r4]
   14214:	bic	r0, r0, #16
   14218:	str	r0, [r4]
   1421c:	mov	r0, #0
   14220:	sub	sp, fp, #16
   14224:	pop	{r4, r5, r6, r7, fp, pc}
   14228:	mvn	r0, #0
   1422c:	sub	sp, fp, #16
   14230:	pop	{r4, r5, r6, r7, fp, pc}
   14234:	push	{fp, lr}
   14238:	mov	fp, sp
   1423c:	bl	11018 <__errno_location@plt>
   14240:	mov	r1, #12
   14244:	str	r1, [r0]
   14248:	mov	r0, #0
   1424c:	pop	{fp, pc}
   14250:	b	16d54 <__assert_fail@plt+0x5c58>
   14254:	cmp	r1, #0
   14258:	orreq	r1, r1, #1
   1425c:	b	16d84 <__assert_fail@plt+0x5c88>
   14260:	b	16d00 <__assert_fail@plt+0x5c04>
   14264:	clz	r3, r2
   14268:	lsr	ip, r3, #5
   1426c:	clz	r3, r1
   14270:	lsr	r3, r3, #5
   14274:	orrs	r3, r3, ip
   14278:	movwne	r1, #1
   1427c:	movwne	r2, #1
   14280:	b	15e90 <__assert_fail@plt+0x4d94>
   14284:	push	{r4, r5, fp, lr}
   14288:	add	fp, sp, #8
   1428c:	cmp	r0, #0
   14290:	beq	14324 <__assert_fail@plt+0x3228>
   14294:	mov	r4, r0
   14298:	mov	r1, #47	; 0x2f
   1429c:	bl	1109c <strrchr@plt>
   142a0:	cmp	r0, #0
   142a4:	mov	r5, r4
   142a8:	addne	r5, r0, #1
   142ac:	sub	r0, r5, r4
   142b0:	cmp	r0, #7
   142b4:	blt	14308 <__assert_fail@plt+0x320c>
   142b8:	sub	r0, r5, #7
   142bc:	movw	r1, #33091	; 0x8143
   142c0:	movt	r1, #1
   142c4:	mov	r2, #7
   142c8:	bl	110d8 <strncmp@plt>
   142cc:	cmp	r0, #0
   142d0:	bne	14308 <__assert_fail@plt+0x320c>
   142d4:	movw	r1, #33099	; 0x814b
   142d8:	movt	r1, #1
   142dc:	mov	r0, r5
   142e0:	mov	r2, #3
   142e4:	bl	110d8 <strncmp@plt>
   142e8:	cmp	r0, #0
   142ec:	beq	142f8 <__assert_fail@plt+0x31fc>
   142f0:	mov	r4, r5
   142f4:	b	14308 <__assert_fail@plt+0x320c>
   142f8:	add	r4, r5, #3
   142fc:	movw	r0, #37176	; 0x9138
   14300:	movt	r0, #2
   14304:	str	r4, [r0]
   14308:	movw	r0, #37180	; 0x913c
   1430c:	movt	r0, #2
   14310:	str	r4, [r0]
   14314:	movw	r0, #37244	; 0x917c
   14318:	movt	r0, #2
   1431c:	str	r4, [r0]
   14320:	pop	{r4, r5, fp, pc}
   14324:	movw	r0, #37192	; 0x9148
   14328:	movt	r0, #2
   1432c:	ldr	r3, [r0]
   14330:	movw	r0, #33035	; 0x810b
   14334:	movt	r0, #1
   14338:	mov	r1, #55	; 0x37
   1433c:	mov	r2, #1
   14340:	bl	10f4c <fwrite@plt>
   14344:	bl	110e4 <abort@plt>
   14348:	push	{r4, r5, r6, sl, fp, lr}
   1434c:	add	fp, sp, #16
   14350:	mov	r4, r0
   14354:	movw	r0, #37248	; 0x9180
   14358:	movt	r0, #2
   1435c:	cmp	r4, #0
   14360:	moveq	r4, r0
   14364:	bl	11018 <__errno_location@plt>
   14368:	mov	r5, r0
   1436c:	ldr	r6, [r0]
   14370:	mov	r0, r4
   14374:	mov	r1, #48	; 0x30
   14378:	bl	1667c <__assert_fail@plt+0x5580>
   1437c:	str	r6, [r5]
   14380:	pop	{r4, r5, r6, sl, fp, pc}
   14384:	movw	r1, #37248	; 0x9180
   14388:	movt	r1, #2
   1438c:	cmp	r0, #0
   14390:	movne	r1, r0
   14394:	ldr	r0, [r1]
   14398:	bx	lr
   1439c:	movw	r2, #37248	; 0x9180
   143a0:	movt	r2, #2
   143a4:	cmp	r0, #0
   143a8:	movne	r2, r0
   143ac:	str	r1, [r2]
   143b0:	bx	lr
   143b4:	movw	r3, #37248	; 0x9180
   143b8:	movt	r3, #2
   143bc:	cmp	r0, #0
   143c0:	movne	r3, r0
   143c4:	ubfx	r0, r1, #5, #3
   143c8:	add	ip, r3, r0, lsl #2
   143cc:	ldr	r3, [ip, #8]
   143d0:	and	r1, r1, #31
   143d4:	mov	r0, #1
   143d8:	and	r0, r0, r3, lsr r1
   143dc:	and	r2, r2, #1
   143e0:	eor	r2, r0, r2
   143e4:	eor	r1, r3, r2, lsl r1
   143e8:	str	r1, [ip, #8]
   143ec:	bx	lr
   143f0:	movw	r2, #37248	; 0x9180
   143f4:	movt	r2, #2
   143f8:	cmp	r0, #0
   143fc:	movne	r2, r0
   14400:	ldr	r0, [r2, #4]
   14404:	str	r1, [r2, #4]
   14408:	bx	lr
   1440c:	push	{fp, lr}
   14410:	mov	fp, sp
   14414:	movw	r3, #37248	; 0x9180
   14418:	movt	r3, #2
   1441c:	cmp	r0, #0
   14420:	movne	r3, r0
   14424:	mov	r0, #10
   14428:	str	r0, [r3]
   1442c:	cmp	r1, #0
   14430:	cmpne	r2, #0
   14434:	bne	1443c <__assert_fail@plt+0x3340>
   14438:	bl	110e4 <abort@plt>
   1443c:	str	r1, [r3, #40]	; 0x28
   14440:	str	r2, [r3, #44]	; 0x2c
   14444:	pop	{fp, pc}
   14448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1444c:	add	fp, sp, #28
   14450:	sub	sp, sp, #20
   14454:	mov	r8, r3
   14458:	mov	r9, r2
   1445c:	mov	sl, r1
   14460:	mov	r7, r0
   14464:	ldr	r0, [fp, #8]
   14468:	movw	r5, #37248	; 0x9180
   1446c:	movt	r5, #2
   14470:	cmp	r0, #0
   14474:	movne	r5, r0
   14478:	bl	11018 <__errno_location@plt>
   1447c:	mov	r4, r0
   14480:	ldm	r5, {r0, r1}
   14484:	ldr	r2, [r5, #40]	; 0x28
   14488:	ldr	r3, [r5, #44]	; 0x2c
   1448c:	ldr	r6, [r4]
   14490:	add	r5, r5, #8
   14494:	stm	sp, {r0, r1, r5}
   14498:	str	r2, [sp, #12]
   1449c:	str	r3, [sp, #16]
   144a0:	mov	r0, r7
   144a4:	mov	r1, sl
   144a8:	mov	r2, r9
   144ac:	mov	r3, r8
   144b0:	bl	144c0 <__assert_fail@plt+0x33c4>
   144b4:	str	r6, [r4]
   144b8:	sub	sp, fp, #28
   144bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144c4:	add	fp, sp, #28
   144c8:	sub	sp, sp, #156	; 0x9c
   144cc:	mov	r9, r3
   144d0:	mov	r7, r1
   144d4:	mov	r6, r0
   144d8:	str	r2, [fp, #-80]	; 0xffffffb0
   144dc:	add	r0, r2, #1
   144e0:	str	r0, [sp, #76]	; 0x4c
   144e4:	ldr	r0, [fp, #12]
   144e8:	and	r1, r0, #1
   144ec:	str	r1, [sp, #40]	; 0x28
   144f0:	and	r1, r0, #4
   144f4:	str	r1, [sp, #36]	; 0x24
   144f8:	ubfx	r4, r0, #1, #1
   144fc:	bl	10f64 <__ctype_get_mb_cur_max@plt>
   14500:	str	r0, [sp, #44]	; 0x2c
   14504:	ldr	r0, [fp, #24]
   14508:	str	r0, [sp, #88]	; 0x58
   1450c:	ldr	r0, [fp, #20]
   14510:	str	r0, [sp, #80]	; 0x50
   14514:	ldr	r1, [fp, #8]
   14518:	mov	r0, #0
   1451c:	str	r0, [sp, #84]	; 0x54
   14520:	mov	r0, #0
   14524:	str	r0, [fp, #-84]	; 0xffffffac
   14528:	mov	r0, #0
   1452c:	str	r0, [fp, #-72]	; 0xffffffb8
   14530:	mov	r0, #0
   14534:	mov	r2, #0
   14538:	str	r2, [fp, #-56]	; 0xffffffc8
   1453c:	mov	r2, #0
   14540:	str	r2, [sp, #64]	; 0x40
   14544:	mov	r2, #1
   14548:	str	r2, [fp, #-48]	; 0xffffffd0
   1454c:	cmp	r1, #10
   14550:	bhi	1547c <__assert_fail@plt+0x4380>
   14554:	mov	sl, r7
   14558:	mov	r7, r1
   1455c:	add	r1, pc, #24
   14560:	mov	r8, #0
   14564:	mov	r2, #1
   14568:	mov	r3, #0
   1456c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14570:	mov	lr, r9
   14574:	mov	r5, r6
   14578:	ldr	pc, [r1, r7, lsl #2]
   1457c:	andeq	r4, r1, r0, asr r6
   14580:	muleq	r1, r0, r6
   14584:	andeq	r4, r1, r0, ror #12
   14588:	andeq	r4, r1, r8, asr #12
   1458c:	andeq	r4, r1, r4, lsl #13
   14590:	andeq	r4, r1, r4, ror #13
   14594:	andeq	r4, r1, r0, ror r6
   14598:	andeq	r4, r1, r0, asr #14
   1459c:	andeq	r4, r1, r8, lsr #11
   145a0:	andeq	r4, r1, r8, lsr #11
   145a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145a8:	movw	r0, #33181	; 0x819d
   145ac:	movt	r0, #1
   145b0:	mov	r1, r7
   145b4:	bl	15a84 <__assert_fail@plt+0x4988>
   145b8:	str	r0, [sp, #80]	; 0x50
   145bc:	movw	r0, #33183	; 0x819f
   145c0:	movt	r0, #1
   145c4:	mov	r1, r7
   145c8:	bl	15a84 <__assert_fail@plt+0x4988>
   145cc:	mov	r5, r6
   145d0:	str	r0, [sp, #88]	; 0x58
   145d4:	mov	r8, #0
   145d8:	tst	r4, #1
   145dc:	str	r7, [fp, #-64]	; 0xffffffc0
   145e0:	bne	14618 <__assert_fail@plt+0x351c>
   145e4:	ldr	r0, [sp, #80]	; 0x50
   145e8:	ldrb	r0, [r0]
   145ec:	cmp	r0, #0
   145f0:	beq	14618 <__assert_fail@plt+0x351c>
   145f4:	ldr	r1, [sp, #80]	; 0x50
   145f8:	add	r1, r1, #1
   145fc:	mov	r8, #0
   14600:	cmp	r8, sl
   14604:	strbcc	r0, [r5, r8]
   14608:	ldrb	r0, [r1, r8]
   1460c:	add	r8, r8, #1
   14610:	cmp	r0, #0
   14614:	bne	14600 <__assert_fail@plt+0x3504>
   14618:	ldr	r7, [sp, #88]	; 0x58
   1461c:	mov	r0, r7
   14620:	bl	11000 <strlen@plt>
   14624:	mov	r5, r6
   14628:	str	r0, [fp, #-72]	; 0xffffffb8
   1462c:	str	r7, [fp, #-84]	; 0xffffffac
   14630:	mov	r2, #1
   14634:	mov	r3, r4
   14638:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1463c:	mov	lr, r9
   14640:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14644:	b	14740 <__assert_fail@plt+0x3644>
   14648:	mov	r0, #1
   1464c:	b	14690 <__assert_fail@plt+0x3594>
   14650:	mov	r7, #0
   14654:	mov	r8, #0
   14658:	mov	r2, r0
   1465c:	b	1473c <__assert_fail@plt+0x3640>
   14660:	tst	r4, #1
   14664:	bne	14690 <__assert_fail@plt+0x3594>
   14668:	mov	r2, r0
   1466c:	b	146b8 <__assert_fail@plt+0x35bc>
   14670:	mov	r0, #1
   14674:	str	r0, [fp, #-72]	; 0xffffffb8
   14678:	mov	r8, #0
   1467c:	mov	r7, #5
   14680:	b	146fc <__assert_fail@plt+0x3600>
   14684:	mov	r2, #1
   14688:	tst	r4, #1
   1468c:	beq	146b8 <__assert_fail@plt+0x35bc>
   14690:	mov	r1, #1
   14694:	str	r1, [fp, #-72]	; 0xffffffb8
   14698:	mov	r8, #0
   1469c:	mov	r7, #2
   146a0:	movw	r1, #33183	; 0x819f
   146a4:	movt	r1, #1
   146a8:	str	r1, [fp, #-84]	; 0xffffffac
   146ac:	mov	r2, r0
   146b0:	mov	r3, #1
   146b4:	b	14740 <__assert_fail@plt+0x3644>
   146b8:	mov	r8, #1
   146bc:	mov	r7, #2
   146c0:	cmp	sl, #0
   146c4:	movne	r0, #39	; 0x27
   146c8:	strbne	r0, [r5]
   146cc:	movw	r0, #33183	; 0x819f
   146d0:	movt	r0, #1
   146d4:	str	r0, [fp, #-84]	; 0xffffffac
   146d8:	mov	r0, #1
   146dc:	str	r0, [fp, #-72]	; 0xffffffb8
   146e0:	b	1473c <__assert_fail@plt+0x3640>
   146e4:	mov	r7, #5
   146e8:	tst	r4, #1
   146ec:	beq	14714 <__assert_fail@plt+0x3618>
   146f0:	mov	r0, #1
   146f4:	str	r0, [fp, #-72]	; 0xffffffb8
   146f8:	mov	r8, #0
   146fc:	movw	r0, #33179	; 0x819b
   14700:	movt	r0, #1
   14704:	str	r0, [fp, #-84]	; 0xffffffac
   14708:	mov	r2, #1
   1470c:	mov	r3, #1
   14710:	b	14740 <__assert_fail@plt+0x3644>
   14714:	cmp	sl, #0
   14718:	movne	r0, #34	; 0x22
   1471c:	strbne	r0, [r5]
   14720:	mov	r8, #1
   14724:	movw	r0, #33179	; 0x819b
   14728:	movt	r0, #1
   1472c:	str	r0, [fp, #-84]	; 0xffffffac
   14730:	mov	r0, #1
   14734:	str	r0, [fp, #-72]	; 0xffffffb8
   14738:	mov	r2, #1
   1473c:	mov	r3, #0
   14740:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14744:	cmp	r0, #0
   14748:	movwne	r0, #1
   1474c:	and	r1, r0, r3
   14750:	and	r1, r2, r1
   14754:	str	r1, [sp, #56]	; 0x38
   14758:	sub	r1, r7, #2
   1475c:	clz	r1, r1
   14760:	lsr	r1, r1, #5
   14764:	and	r1, r1, r3
   14768:	str	r1, [sp, #68]	; 0x44
   1476c:	str	r7, [fp, #-64]	; 0xffffffc0
   14770:	subs	r1, r7, #2
   14774:	movwne	r1, #1
   14778:	eor	r4, r3, #1
   1477c:	str	r4, [fp, #-88]	; 0xffffffa8
   14780:	orr	r4, r1, r4
   14784:	str	r4, [sp, #72]	; 0x48
   14788:	and	r1, r1, r2
   1478c:	and	r0, r0, r1
   14790:	str	r0, [fp, #-60]	; 0xffffffc4
   14794:	str	r3, [fp, #-76]	; 0xffffffb4
   14798:	orr	r0, r1, r3
   1479c:	eor	r0, r0, #1
   147a0:	ldr	r1, [fp, #16]
   147a4:	clz	r1, r1
   147a8:	lsr	r1, r1, #5
   147ac:	orr	r0, r1, r0
   147b0:	str	r0, [fp, #-68]	; 0xffffffbc
   147b4:	str	r2, [sp, #92]	; 0x5c
   147b8:	eor	r0, r2, #1
   147bc:	str	r0, [sp, #60]	; 0x3c
   147c0:	mov	r7, #0
   147c4:	cmn	lr, #1
   147c8:	beq	147d8 <__assert_fail@plt+0x36dc>
   147cc:	cmp	r7, lr
   147d0:	bne	147e4 <__assert_fail@plt+0x36e8>
   147d4:	b	152f0 <__assert_fail@plt+0x41f4>
   147d8:	ldrb	r0, [ip, r7]
   147dc:	cmp	r0, #0
   147e0:	beq	152f0 <__assert_fail@plt+0x41f4>
   147e4:	mov	r9, #0
   147e8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   147ec:	cmp	r0, #0
   147f0:	beq	14824 <__assert_fail@plt+0x3728>
   147f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   147f8:	add	r4, r7, r0
   147fc:	cmp	r0, #2
   14800:	bcc	1481c <__assert_fail@plt+0x3720>
   14804:	cmn	lr, #1
   14808:	bne	1481c <__assert_fail@plt+0x3720>
   1480c:	mov	r0, ip
   14810:	bl	11000 <strlen@plt>
   14814:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14818:	mov	lr, r0
   1481c:	cmp	r4, lr
   14820:	bls	14830 <__assert_fail@plt+0x3734>
   14824:	mov	r0, #0
   14828:	str	r0, [fp, #-52]	; 0xffffffcc
   1482c:	b	14874 <__assert_fail@plt+0x3778>
   14830:	mov	r4, lr
   14834:	add	r0, ip, r7
   14838:	ldr	r1, [fp, #-84]	; 0xffffffac
   1483c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14840:	bl	10ff4 <bcmp@plt>
   14844:	cmp	r0, #0
   14848:	mov	r1, r0
   1484c:	movwne	r1, #1
   14850:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14854:	orr	r1, r1, r2
   14858:	tst	r1, #1
   1485c:	beq	153c4 <__assert_fail@plt+0x42c8>
   14860:	clz	r0, r0
   14864:	lsr	r0, r0, #5
   14868:	str	r0, [fp, #-52]	; 0xffffffcc
   1486c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14870:	mov	lr, r4
   14874:	ldrb	r4, [ip, r7]
   14878:	cmp	r4, #126	; 0x7e
   1487c:	bhi	14dac <__assert_fail@plt+0x3cb0>
   14880:	mov	r6, #1
   14884:	mov	r2, #110	; 0x6e
   14888:	mov	r0, #97	; 0x61
   1488c:	add	r3, pc, #4
   14890:	mov	r1, #0
   14894:	ldr	pc, [r3, r4, lsl #2]
   14898:	andeq	r4, r1, ip, lsl #24
   1489c:	andeq	r4, r1, ip, lsr #27
   148a0:	andeq	r4, r1, ip, lsr #27
   148a4:	andeq	r4, r1, ip, lsr #27
   148a8:	andeq	r4, r1, ip, lsr #27
   148ac:	andeq	r4, r1, ip, lsr #27
   148b0:	andeq	r4, r1, ip, lsr #27
   148b4:	andeq	r4, r1, r0, lsl #29
   148b8:	andeq	r4, r1, ip, ror #23
   148bc:	andeq	r4, r1, r4, ror #23
   148c0:	strdeq	r4, [r1], -r8
   148c4:	andeq	r4, r1, r4, lsl sp
   148c8:	ldrdeq	r4, [r1], -ip
   148cc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148d0:	andeq	r4, r1, ip, lsr #27
   148d4:	andeq	r4, r1, ip, lsr #27
   148d8:	andeq	r4, r1, ip, lsr #27
   148dc:	andeq	r4, r1, ip, lsr #27
   148e0:	andeq	r4, r1, ip, lsr #27
   148e4:	andeq	r4, r1, ip, lsr #27
   148e8:	andeq	r4, r1, ip, lsr #27
   148ec:	andeq	r4, r1, ip, lsr #27
   148f0:	andeq	r4, r1, ip, lsr #27
   148f4:	andeq	r4, r1, ip, lsr #27
   148f8:	andeq	r4, r1, ip, lsr #27
   148fc:	andeq	r4, r1, ip, lsr #27
   14900:	andeq	r4, r1, ip, lsr #27
   14904:	andeq	r4, r1, ip, lsr #27
   14908:	andeq	r4, r1, ip, lsr #27
   1490c:	andeq	r4, r1, ip, lsr #27
   14910:	andeq	r4, r1, ip, lsr #27
   14914:	andeq	r4, r1, ip, lsr #27
   14918:	muleq	r1, r0, fp
   1491c:	muleq	r1, r4, fp
   14920:	muleq	r1, r4, fp
   14924:	andeq	r4, r1, ip, ror fp
   14928:	muleq	r1, r4, fp
   1492c:	muleq	r1, r4, sl
   14930:	muleq	r1, r4, fp
   14934:	andeq	r4, r1, ip, lsl sp
   14938:	muleq	r1, r4, fp
   1493c:	muleq	r1, r4, fp
   14940:	muleq	r1, r4, fp
   14944:	muleq	r1, r4, sl
   14948:	muleq	r1, r4, sl
   1494c:	muleq	r1, r4, sl
   14950:	muleq	r1, r4, sl
   14954:	muleq	r1, r4, sl
   14958:	muleq	r1, r4, sl
   1495c:	muleq	r1, r4, sl
   14960:	muleq	r1, r4, sl
   14964:	muleq	r1, r4, sl
   14968:	muleq	r1, r4, sl
   1496c:	muleq	r1, r4, sl
   14970:	muleq	r1, r4, sl
   14974:	muleq	r1, r4, sl
   14978:	muleq	r1, r4, sl
   1497c:	muleq	r1, r4, sl
   14980:	muleq	r1, r4, sl
   14984:	muleq	r1, r4, fp
   14988:	muleq	r1, r4, fp
   1498c:	muleq	r1, r4, fp
   14990:	muleq	r1, r4, fp
   14994:	andeq	r4, r1, r4, ror #25
   14998:	andeq	r4, r1, ip, lsr #27
   1499c:	muleq	r1, r4, sl
   149a0:	muleq	r1, r4, sl
   149a4:	muleq	r1, r4, sl
   149a8:	muleq	r1, r4, sl
   149ac:	muleq	r1, r4, sl
   149b0:	muleq	r1, r4, sl
   149b4:	muleq	r1, r4, sl
   149b8:	muleq	r1, r4, sl
   149bc:	muleq	r1, r4, sl
   149c0:	muleq	r1, r4, sl
   149c4:	muleq	r1, r4, sl
   149c8:	muleq	r1, r4, sl
   149cc:	muleq	r1, r4, sl
   149d0:	muleq	r1, r4, sl
   149d4:	muleq	r1, r4, sl
   149d8:	muleq	r1, r4, sl
   149dc:	muleq	r1, r4, sl
   149e0:	muleq	r1, r4, sl
   149e4:	muleq	r1, r4, sl
   149e8:	muleq	r1, r4, sl
   149ec:	muleq	r1, r4, sl
   149f0:	muleq	r1, r4, sl
   149f4:	muleq	r1, r4, sl
   149f8:	muleq	r1, r4, sl
   149fc:	muleq	r1, r4, sl
   14a00:	muleq	r1, r4, sl
   14a04:	muleq	r1, r4, fp
   14a08:			; <UNDEFINED> instruction: 0x00014bbc
   14a0c:	muleq	r1, r4, sl
   14a10:	muleq	r1, r4, fp
   14a14:	muleq	r1, r4, sl
   14a18:	muleq	r1, r4, fp
   14a1c:	muleq	r1, r4, sl
   14a20:	muleq	r1, r4, sl
   14a24:	muleq	r1, r4, sl
   14a28:	muleq	r1, r4, sl
   14a2c:	muleq	r1, r4, sl
   14a30:	muleq	r1, r4, sl
   14a34:	muleq	r1, r4, sl
   14a38:	muleq	r1, r4, sl
   14a3c:	muleq	r1, r4, sl
   14a40:	muleq	r1, r4, sl
   14a44:	muleq	r1, r4, sl
   14a48:	muleq	r1, r4, sl
   14a4c:	muleq	r1, r4, sl
   14a50:	muleq	r1, r4, sl
   14a54:	muleq	r1, r4, sl
   14a58:	muleq	r1, r4, sl
   14a5c:	muleq	r1, r4, sl
   14a60:	muleq	r1, r4, sl
   14a64:	muleq	r1, r4, sl
   14a68:	muleq	r1, r4, sl
   14a6c:	muleq	r1, r4, sl
   14a70:	muleq	r1, r4, sl
   14a74:	muleq	r1, r4, sl
   14a78:	muleq	r1, r4, sl
   14a7c:	muleq	r1, r4, sl
   14a80:	muleq	r1, r4, sl
   14a84:	andeq	r4, r1, r0, asr fp
   14a88:	muleq	r1, r4, fp
   14a8c:	andeq	r4, r1, r0, asr fp
   14a90:	andeq	r4, r1, ip, ror fp
   14a94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14a98:	tst	r0, #1
   14a9c:	bne	14ac8 <__assert_fail@plt+0x39cc>
   14aa0:	ubfx	r0, r4, #5, #3
   14aa4:	ldr	r1, [fp, #16]
   14aa8:	ldr	r0, [r1, r0, lsl #2]
   14aac:	and	r1, r4, #31
   14ab0:	mov	r2, #1
   14ab4:	tst	r0, r2, lsl r1
   14ab8:	beq	14ac8 <__assert_fail@plt+0x39cc>
   14abc:	mov	r0, r4
   14ac0:	mov	r1, r6
   14ac4:	b	14adc <__assert_fail@plt+0x39e0>
   14ac8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14acc:	cmp	r0, #0
   14ad0:	mov	r0, r4
   14ad4:	mov	r1, r6
   14ad8:	beq	14e14 <__assert_fail@plt+0x3d18>
   14adc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ae0:	tst	r2, #1
   14ae4:	bne	153d8 <__assert_fail@plt+0x42dc>
   14ae8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14aec:	subs	r2, r2, #2
   14af0:	movwne	r2, #1
   14af4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14af8:	orr	r2, r2, r3
   14afc:	tst	r2, #1
   14b00:	bne	14b3c <__assert_fail@plt+0x3a40>
   14b04:	cmp	r8, sl
   14b08:	movcc	r2, #39	; 0x27
   14b0c:	strbcc	r2, [r5, r8]
   14b10:	add	r2, r8, #1
   14b14:	cmp	r2, sl
   14b18:	movcc	r3, #36	; 0x24
   14b1c:	strbcc	r3, [r5, r2]
   14b20:	add	r2, r8, #2
   14b24:	cmp	r2, sl
   14b28:	movcc	r3, #39	; 0x27
   14b2c:	strbcc	r3, [r5, r2]
   14b30:	add	r8, r8, #3
   14b34:	mov	r2, #1
   14b38:	str	r2, [fp, #-56]	; 0xffffffc8
   14b3c:	cmp	r8, sl
   14b40:	movcc	r2, #92	; 0x5c
   14b44:	strbcc	r2, [r5, r8]
   14b48:	add	r8, r8, #1
   14b4c:	b	14e58 <__assert_fail@plt+0x3d5c>
   14b50:	cmp	lr, #1
   14b54:	beq	14b7c <__assert_fail@plt+0x3a80>
   14b58:	mov	r6, #0
   14b5c:	cmn	lr, #1
   14b60:	bne	14b88 <__assert_fail@plt+0x3a8c>
   14b64:	ldrb	r0, [ip, #1]
   14b68:	cmp	r0, #0
   14b6c:	beq	14b7c <__assert_fail@plt+0x3a80>
   14b70:	mvn	lr, #0
   14b74:	mov	r9, #0
   14b78:	b	14a94 <__assert_fail@plt+0x3998>
   14b7c:	mov	r6, #0
   14b80:	cmp	r7, #0
   14b84:	beq	14b90 <__assert_fail@plt+0x3a94>
   14b88:	mov	r9, #0
   14b8c:	b	14a94 <__assert_fail@plt+0x3998>
   14b90:	mov	r1, #1
   14b94:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14b98:	cmp	r0, #2
   14b9c:	bne	14bb4 <__assert_fail@plt+0x3ab8>
   14ba0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ba4:	tst	r0, #1
   14ba8:	mov	r6, r1
   14bac:	beq	14a94 <__assert_fail@plt+0x3998>
   14bb0:	b	153d8 <__assert_fail@plt+0x42dc>
   14bb4:	mov	r6, r1
   14bb8:	b	14a94 <__assert_fail@plt+0x3998>
   14bbc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14bc0:	cmp	r0, #2
   14bc4:	bne	14df8 <__assert_fail@plt+0x3cfc>
   14bc8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14bcc:	tst	r0, #1
   14bd0:	bne	153d8 <__assert_fail@plt+0x42dc>
   14bd4:	mov	r9, #0
   14bd8:	b	14e0c <__assert_fail@plt+0x3d10>
   14bdc:	mov	r0, #102	; 0x66
   14be0:	b	14e80 <__assert_fail@plt+0x3d84>
   14be4:	mov	r2, #116	; 0x74
   14be8:	b	14bf8 <__assert_fail@plt+0x3afc>
   14bec:	mov	r0, #98	; 0x62
   14bf0:	b	14e80 <__assert_fail@plt+0x3d84>
   14bf4:	mov	r2, #114	; 0x72
   14bf8:	ldr	r0, [sp, #72]	; 0x48
   14bfc:	tst	r0, #1
   14c00:	mov	r0, r2
   14c04:	bne	14e80 <__assert_fail@plt+0x3d84>
   14c08:	b	153d8 <__assert_fail@plt+0x42dc>
   14c0c:	ldr	r0, [sp, #92]	; 0x5c
   14c10:	tst	r0, #1
   14c14:	beq	14e9c <__assert_fail@plt+0x3da0>
   14c18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14c1c:	tst	r0, #1
   14c20:	bne	153d8 <__assert_fail@plt+0x42dc>
   14c24:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14c28:	subs	r0, r0, #2
   14c2c:	movwne	r0, #1
   14c30:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14c34:	orr	r0, r0, r1
   14c38:	tst	r0, #1
   14c3c:	bne	14c78 <__assert_fail@plt+0x3b7c>
   14c40:	cmp	r8, sl
   14c44:	movcc	r0, #39	; 0x27
   14c48:	strbcc	r0, [r5, r8]
   14c4c:	add	r0, r8, #1
   14c50:	cmp	r0, sl
   14c54:	movcc	r1, #36	; 0x24
   14c58:	strbcc	r1, [r5, r0]
   14c5c:	add	r0, r8, #2
   14c60:	cmp	r0, sl
   14c64:	movcc	r1, #39	; 0x27
   14c68:	strbcc	r1, [r5, r0]
   14c6c:	add	r8, r8, #3
   14c70:	mov	r0, #1
   14c74:	str	r0, [fp, #-56]	; 0xffffffc8
   14c78:	cmp	r8, sl
   14c7c:	movcc	r0, #92	; 0x5c
   14c80:	strbcc	r0, [r5, r8]
   14c84:	add	r0, r8, #1
   14c88:	mov	r6, #0
   14c8c:	mov	r9, #1
   14c90:	mov	r4, #48	; 0x30
   14c94:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14c98:	cmp	r1, #2
   14c9c:	beq	15060 <__assert_fail@plt+0x3f64>
   14ca0:	add	r1, r7, #1
   14ca4:	cmp	r1, lr
   14ca8:	bcs	15060 <__assert_fail@plt+0x3f64>
   14cac:	ldrb	r1, [ip, r1]
   14cb0:	sub	r1, r1, #48	; 0x30
   14cb4:	uxtb	r1, r1
   14cb8:	cmp	r1, #9
   14cbc:	bhi	15060 <__assert_fail@plt+0x3f64>
   14cc0:	cmp	r0, sl
   14cc4:	movcc	r1, #48	; 0x30
   14cc8:	strbcc	r1, [r5, r0]
   14ccc:	add	r0, r8, #2
   14cd0:	cmp	r0, sl
   14cd4:	movcc	r1, #48	; 0x30
   14cd8:	strbcc	r1, [r5, r0]
   14cdc:	add	r8, r8, #3
   14ce0:	b	14a94 <__assert_fail@plt+0x3998>
   14ce4:	mov	r9, #0
   14ce8:	mov	r4, #63	; 0x3f
   14cec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14cf0:	cmp	r0, #5
   14cf4:	beq	15068 <__assert_fail@plt+0x3f6c>
   14cf8:	cmp	r0, #2
   14cfc:	bne	15110 <__assert_fail@plt+0x4014>
   14d00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14d04:	tst	r0, #1
   14d08:	mov	r6, #0
   14d0c:	beq	14a94 <__assert_fail@plt+0x3998>
   14d10:	b	153d8 <__assert_fail@plt+0x42dc>
   14d14:	mov	r0, #118	; 0x76
   14d18:	b	14e80 <__assert_fail@plt+0x3d84>
   14d1c:	mov	r4, #39	; 0x27
   14d20:	mov	r0, #1
   14d24:	str	r0, [sp, #64]	; 0x40
   14d28:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14d2c:	cmp	r0, #2
   14d30:	bne	14eb8 <__assert_fail@plt+0x3dbc>
   14d34:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14d38:	tst	r0, #1
   14d3c:	bne	153d8 <__assert_fail@plt+0x42dc>
   14d40:	ldr	r2, [sp, #84]	; 0x54
   14d44:	cmp	r2, #0
   14d48:	mov	r0, r2
   14d4c:	movwne	r0, #1
   14d50:	clz	r1, sl
   14d54:	lsr	r1, r1, #5
   14d58:	orrs	r0, r0, r1
   14d5c:	moveq	r2, sl
   14d60:	str	r2, [sp, #84]	; 0x54
   14d64:	moveq	sl, r0
   14d68:	cmp	r8, sl
   14d6c:	movcc	r0, #39	; 0x27
   14d70:	strbcc	r0, [r5, r8]
   14d74:	add	r0, r8, #1
   14d78:	cmp	r0, sl
   14d7c:	movcc	r1, #92	; 0x5c
   14d80:	strbcc	r1, [r5, r0]
   14d84:	add	r0, r8, #2
   14d88:	cmp	r0, sl
   14d8c:	movcc	r1, #39	; 0x27
   14d90:	strbcc	r1, [r5, r0]
   14d94:	add	r8, r8, #3
   14d98:	mov	r0, #0
   14d9c:	str	r0, [fp, #-56]	; 0xffffffc8
   14da0:	mov	r9, #0
   14da4:	mov	r6, #1
   14da8:	b	14a94 <__assert_fail@plt+0x3998>
   14dac:	ldr	r0, [sp, #44]	; 0x2c
   14db0:	cmp	r0, #1
   14db4:	bne	14ec0 <__assert_fail@plt+0x3dc4>
   14db8:	str	lr, [sp, #32]
   14dbc:	bl	10fdc <__ctype_b_loc@plt>
   14dc0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14dc4:	ldr	r0, [r0]
   14dc8:	add	r0, r0, r4, lsl #1
   14dcc:	ldrb	r0, [r0, #1]
   14dd0:	ubfx	r6, r0, #6, #1
   14dd4:	mov	r2, #1
   14dd8:	ldr	r0, [sp, #60]	; 0x3c
   14ddc:	orr	r1, r6, r0
   14de0:	cmp	r2, #1
   14de4:	bhi	15118 <__assert_fail@plt+0x401c>
   14de8:	tst	r1, #1
   14dec:	beq	15118 <__assert_fail@plt+0x401c>
   14df0:	ldr	lr, [sp, #32]
   14df4:	b	14a94 <__assert_fail@plt+0x3998>
   14df8:	mov	r9, #0
   14dfc:	mov	r0, #92	; 0x5c
   14e00:	ldr	r1, [sp, #56]	; 0x38
   14e04:	cmp	r1, #0
   14e08:	beq	14e80 <__assert_fail@plt+0x3d84>
   14e0c:	mov	r4, #92	; 0x5c
   14e10:	mov	r6, #0
   14e14:	cmp	r9, #0
   14e18:	bne	14e50 <__assert_fail@plt+0x3d54>
   14e1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14e20:	tst	r0, #1
   14e24:	beq	14e50 <__assert_fail@plt+0x3d54>
   14e28:	cmp	r8, sl
   14e2c:	movcc	r0, #39	; 0x27
   14e30:	strbcc	r0, [r5, r8]
   14e34:	add	r0, r8, #1
   14e38:	cmp	r0, sl
   14e3c:	movcc	r1, #39	; 0x27
   14e40:	strbcc	r1, [r5, r0]
   14e44:	add	r8, r8, #2
   14e48:	mov	r0, #0
   14e4c:	str	r0, [fp, #-56]	; 0xffffffc8
   14e50:	mov	r1, r6
   14e54:	mov	r0, r4
   14e58:	cmp	r8, sl
   14e5c:	strbcc	r0, [r5, r8]
   14e60:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14e64:	and	r0, r0, r1
   14e68:	str	r0, [fp, #-48]	; 0xffffffd0
   14e6c:	add	r8, r8, #1
   14e70:	add	r7, r7, #1
   14e74:	cmn	lr, #1
   14e78:	bne	147cc <__assert_fail@plt+0x36d0>
   14e7c:	b	147d8 <__assert_fail@plt+0x36dc>
   14e80:	mov	r9, #0
   14e84:	ldr	r1, [sp, #92]	; 0x5c
   14e88:	tst	r1, #1
   14e8c:	mov	r6, #0
   14e90:	mov	r1, #0
   14e94:	beq	14a94 <__assert_fail@plt+0x3998>
   14e98:	b	14adc <__assert_fail@plt+0x39e0>
   14e9c:	mov	r4, #0
   14ea0:	ldr	r0, [sp, #40]	; 0x28
   14ea4:	cmp	r0, #0
   14ea8:	mov	r9, #0
   14eac:	mov	r6, #0
   14eb0:	beq	14a94 <__assert_fail@plt+0x3998>
   14eb4:	b	14e70 <__assert_fail@plt+0x3d74>
   14eb8:	mov	r6, #1
   14ebc:	b	14a94 <__assert_fail@plt+0x3998>
   14ec0:	mov	r0, #0
   14ec4:	str	r0, [fp, #-36]	; 0xffffffdc
   14ec8:	str	r0, [fp, #-40]	; 0xffffffd8
   14ecc:	cmn	lr, #1
   14ed0:	bne	14ee4 <__assert_fail@plt+0x3de8>
   14ed4:	mov	r0, ip
   14ed8:	bl	11000 <strlen@plt>
   14edc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14ee0:	mov	lr, r0
   14ee4:	ldr	r0, [sp, #76]	; 0x4c
   14ee8:	add	r0, r0, r7
   14eec:	str	r0, [sp, #24]
   14ef0:	mov	r6, #1
   14ef4:	mov	r2, #0
   14ef8:	sub	r0, fp, #40	; 0x28
   14efc:	mov	r3, r0
   14f00:	str	r5, [sp, #28]
   14f04:	str	lr, [sp, #32]
   14f08:	b	14f4c <__assert_fail@plt+0x3e50>
   14f0c:	ldr	r5, [sp, #52]	; 0x34
   14f10:	add	r5, r0, r5
   14f14:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14f18:	bl	10f40 <iswprint@plt>
   14f1c:	cmp	r0, #0
   14f20:	movwne	r0, #1
   14f24:	and	r6, r6, r0
   14f28:	sub	r0, fp, #40	; 0x28
   14f2c:	bl	10ef8 <mbsinit@plt>
   14f30:	sub	r3, fp, #40	; 0x28
   14f34:	mov	r2, r5
   14f38:	ldr	lr, [sp, #32]
   14f3c:	cmp	r0, #0
   14f40:	ldr	r5, [sp, #28]
   14f44:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14f48:	bne	14dd8 <__assert_fail@plt+0x3cdc>
   14f4c:	str	r2, [sp, #52]	; 0x34
   14f50:	add	r0, r2, r7
   14f54:	add	r1, ip, r0
   14f58:	str	r0, [sp, #48]	; 0x30
   14f5c:	sub	r2, lr, r0
   14f60:	sub	r0, fp, #44	; 0x2c
   14f64:	bl	16ea4 <__assert_fail@plt+0x5da8>
   14f68:	cmp	r0, #0
   14f6c:	beq	152e4 <__assert_fail@plt+0x41e8>
   14f70:	cmn	r0, #1
   14f74:	beq	152a0 <__assert_fail@plt+0x41a4>
   14f78:	cmn	r0, #2
   14f7c:	ldr	lr, [sp, #32]
   14f80:	beq	152a8 <__assert_fail@plt+0x41ac>
   14f84:	cmp	r0, #2
   14f88:	mov	r1, #0
   14f8c:	movwcc	r1, #1
   14f90:	ldr	r2, [sp, #68]	; 0x44
   14f94:	eor	r2, r2, #1
   14f98:	orrs	r1, r2, r1
   14f9c:	bne	14f0c <__assert_fail@plt+0x3e10>
   14fa0:	ldr	r1, [sp, #52]	; 0x34
   14fa4:	ldr	r2, [sp, #24]
   14fa8:	add	r1, r2, r1
   14fac:	sub	r2, r0, #1
   14fb0:	b	14fc0 <__assert_fail@plt+0x3ec4>
   14fb4:	add	r1, r1, #1
   14fb8:	subs	r2, r2, #1
   14fbc:	beq	14f0c <__assert_fail@plt+0x3e10>
   14fc0:	ldrb	r3, [r1]
   14fc4:	sub	r3, r3, #91	; 0x5b
   14fc8:	cmp	r3, #33	; 0x21
   14fcc:	bhi	14fb4 <__assert_fail@plt+0x3eb8>
   14fd0:	add	r5, pc, #0
   14fd4:	ldr	pc, [r5, r3, lsl #2]
   14fd8:	ldrdeq	r5, [r1], -r0
   14fdc:	ldrdeq	r5, [r1], -r0
   14fe0:			; <UNDEFINED> instruction: 0x00014fb4
   14fe4:	ldrdeq	r5, [r1], -r0
   14fe8:			; <UNDEFINED> instruction: 0x00014fb4
   14fec:	ldrdeq	r5, [r1], -r0
   14ff0:			; <UNDEFINED> instruction: 0x00014fb4
   14ff4:			; <UNDEFINED> instruction: 0x00014fb4
   14ff8:			; <UNDEFINED> instruction: 0x00014fb4
   14ffc:			; <UNDEFINED> instruction: 0x00014fb4
   15000:			; <UNDEFINED> instruction: 0x00014fb4
   15004:			; <UNDEFINED> instruction: 0x00014fb4
   15008:			; <UNDEFINED> instruction: 0x00014fb4
   1500c:			; <UNDEFINED> instruction: 0x00014fb4
   15010:			; <UNDEFINED> instruction: 0x00014fb4
   15014:			; <UNDEFINED> instruction: 0x00014fb4
   15018:			; <UNDEFINED> instruction: 0x00014fb4
   1501c:			; <UNDEFINED> instruction: 0x00014fb4
   15020:			; <UNDEFINED> instruction: 0x00014fb4
   15024:			; <UNDEFINED> instruction: 0x00014fb4
   15028:			; <UNDEFINED> instruction: 0x00014fb4
   1502c:			; <UNDEFINED> instruction: 0x00014fb4
   15030:			; <UNDEFINED> instruction: 0x00014fb4
   15034:			; <UNDEFINED> instruction: 0x00014fb4
   15038:			; <UNDEFINED> instruction: 0x00014fb4
   1503c:			; <UNDEFINED> instruction: 0x00014fb4
   15040:			; <UNDEFINED> instruction: 0x00014fb4
   15044:			; <UNDEFINED> instruction: 0x00014fb4
   15048:			; <UNDEFINED> instruction: 0x00014fb4
   1504c:			; <UNDEFINED> instruction: 0x00014fb4
   15050:			; <UNDEFINED> instruction: 0x00014fb4
   15054:			; <UNDEFINED> instruction: 0x00014fb4
   15058:			; <UNDEFINED> instruction: 0x00014fb4
   1505c:	ldrdeq	r5, [r1], -r0
   15060:	mov	r8, r0
   15064:	b	14a94 <__assert_fail@plt+0x3998>
   15068:	ldr	r0, [sp, #36]	; 0x24
   1506c:	cmp	r0, #0
   15070:	beq	15110 <__assert_fail@plt+0x4014>
   15074:	add	r0, r7, #2
   15078:	cmp	r0, lr
   1507c:	bcs	15110 <__assert_fail@plt+0x4014>
   15080:	add	r1, r7, ip
   15084:	ldrb	r1, [r1, #1]
   15088:	cmp	r1, #63	; 0x3f
   1508c:	bne	15110 <__assert_fail@plt+0x4014>
   15090:	ldrb	r1, [ip, r0]
   15094:	sub	r2, r1, #33	; 0x21
   15098:	cmp	r2, #29
   1509c:	bhi	15110 <__assert_fail@plt+0x4014>
   150a0:	mov	r3, #1
   150a4:	movw	r6, #20929	; 0x51c1
   150a8:	movt	r6, #14336	; 0x3800
   150ac:	tst	r6, r3, lsl r2
   150b0:	beq	15110 <__assert_fail@plt+0x4014>
   150b4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   150b8:	tst	r2, #1
   150bc:	bne	153d8 <__assert_fail@plt+0x42dc>
   150c0:	cmp	r8, sl
   150c4:	movcc	r2, #63	; 0x3f
   150c8:	strbcc	r2, [r5, r8]
   150cc:	add	r2, r8, #1
   150d0:	cmp	r2, sl
   150d4:	movcc	r3, #34	; 0x22
   150d8:	strbcc	r3, [r5, r2]
   150dc:	add	r2, r8, #2
   150e0:	cmp	r2, sl
   150e4:	movcc	r3, #34	; 0x22
   150e8:	strbcc	r3, [r5, r2]
   150ec:	add	r2, r8, #3
   150f0:	cmp	r2, sl
   150f4:	movcc	r3, #63	; 0x3f
   150f8:	strbcc	r3, [r5, r2]
   150fc:	add	r8, r8, #4
   15100:	mov	r7, r0
   15104:	mov	r4, r1
   15108:	mov	r6, #0
   1510c:	b	14a94 <__assert_fail@plt+0x3998>
   15110:	mov	r6, #0
   15114:	b	14a94 <__assert_fail@plt+0x3998>
   15118:	add	r0, r2, r7
   1511c:	str	r0, [sp, #52]	; 0x34
   15120:	mov	r2, #0
   15124:	ldr	lr, [sp, #32]
   15128:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1512c:	str	r1, [sp, #48]	; 0x30
   15130:	tst	r1, #1
   15134:	bne	15210 <__assert_fail@plt+0x4114>
   15138:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1513c:	tst	r1, #1
   15140:	bne	153d8 <__assert_fail@plt+0x42dc>
   15144:	mov	r3, r0
   15148:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1514c:	subs	r1, r0, #2
   15150:	movwne	r1, #1
   15154:	orr	r1, r1, r3
   15158:	tst	r1, #1
   1515c:	bne	15194 <__assert_fail@plt+0x4098>
   15160:	cmp	r8, sl
   15164:	movcc	r0, #39	; 0x27
   15168:	strbcc	r0, [r5, r8]
   1516c:	add	r2, r8, #1
   15170:	cmp	r2, sl
   15174:	movcc	r0, #36	; 0x24
   15178:	strbcc	r0, [r5, r2]
   1517c:	add	r2, r8, #2
   15180:	cmp	r2, sl
   15184:	movcc	r0, #39	; 0x27
   15188:	strbcc	r0, [r5, r2]
   1518c:	add	r8, r8, #3
   15190:	mov	r3, #1
   15194:	cmp	r8, sl
   15198:	movcc	r1, #92	; 0x5c
   1519c:	strbcc	r1, [r5, r8]
   151a0:	add	r2, r8, #1
   151a4:	cmp	r2, sl
   151a8:	bcs	151bc <__assert_fail@plt+0x40c0>
   151ac:	uxtb	r1, r4
   151b0:	mov	r0, #48	; 0x30
   151b4:	orr	r1, r0, r1, lsr #6
   151b8:	strb	r1, [r5, r2]
   151bc:	add	r2, r8, #2
   151c0:	cmp	r2, sl
   151c4:	lsrcc	r1, r4, #3
   151c8:	movcc	r0, #6
   151cc:	bficc	r1, r0, #3, #29
   151d0:	strbcc	r1, [r5, r2]
   151d4:	mov	r0, #6
   151d8:	bfi	r4, r0, #3, #29
   151dc:	add	r8, r8, #3
   151e0:	mov	r2, #1
   151e4:	mov	r0, r3
   151e8:	b	15234 <__assert_fail@plt+0x4138>
   151ec:	cmp	r8, sl
   151f0:	strbcc	r4, [r5, r8]
   151f4:	ldr	r1, [sp, #76]	; 0x4c
   151f8:	ldrb	r4, [r1, r7]
   151fc:	add	r8, r8, #1
   15200:	mov	r7, r3
   15204:	ldr	r1, [sp, #48]	; 0x30
   15208:	tst	r1, #1
   1520c:	beq	15138 <__assert_fail@plt+0x403c>
   15210:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15214:	tst	r1, #1
   15218:	beq	1522c <__assert_fail@plt+0x4130>
   1521c:	cmp	r8, sl
   15220:	movcc	r1, #92	; 0x5c
   15224:	strbcc	r1, [r5, r8]
   15228:	add	r8, r8, #1
   1522c:	mov	r1, #0
   15230:	str	r1, [fp, #-52]	; 0xffffffcc
   15234:	and	r9, r2, #1
   15238:	add	r3, r7, #1
   1523c:	ldr	r1, [sp, #52]	; 0x34
   15240:	cmp	r1, r3
   15244:	bls	15288 <__assert_fail@plt+0x418c>
   15248:	cmp	r9, #0
   1524c:	movwne	r9, #1
   15250:	mvn	r1, r0
   15254:	orr	r1, r1, r9
   15258:	tst	r1, #1
   1525c:	bne	151ec <__assert_fail@plt+0x40f0>
   15260:	cmp	r8, sl
   15264:	movcc	r1, #39	; 0x27
   15268:	strbcc	r1, [r5, r8]
   1526c:	add	r1, r8, #1
   15270:	cmp	r1, sl
   15274:	movcc	r0, #39	; 0x27
   15278:	strbcc	r0, [r5, r1]
   1527c:	add	r8, r8, #2
   15280:	mov	r0, #0
   15284:	b	151ec <__assert_fail@plt+0x40f0>
   15288:	str	r0, [fp, #-56]	; 0xffffffc8
   1528c:	cmp	r9, #0
   15290:	movwne	r9, #1
   15294:	cmp	r9, #0
   15298:	beq	14e1c <__assert_fail@plt+0x3d20>
   1529c:	b	14e50 <__assert_fail@plt+0x3d54>
   152a0:	mov	r6, #0
   152a4:	b	152e4 <__assert_fail@plt+0x41e8>
   152a8:	mov	r6, #0
   152ac:	ldr	r0, [sp, #48]	; 0x30
   152b0:	cmp	r0, lr
   152b4:	bcs	152e4 <__assert_fail@plt+0x41e8>
   152b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   152bc:	add	r0, ip, r7
   152c0:	ldr	r2, [sp, #52]	; 0x34
   152c4:	ldrb	r1, [r0, r2]
   152c8:	cmp	r1, #0
   152cc:	beq	14dd8 <__assert_fail@plt+0x3cdc>
   152d0:	add	r2, r2, #1
   152d4:	add	r1, r7, r2
   152d8:	cmp	r1, lr
   152dc:	bcc	152c4 <__assert_fail@plt+0x41c8>
   152e0:	b	14dd8 <__assert_fail@plt+0x3cdc>
   152e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   152e8:	ldr	r2, [sp, #52]	; 0x34
   152ec:	b	14dd8 <__assert_fail@plt+0x3cdc>
   152f0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   152f4:	eor	r0, r1, #2
   152f8:	orr	r0, r0, r8
   152fc:	clz	r0, r0
   15300:	lsr	r0, r0, #5
   15304:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15308:	tst	r3, r0
   1530c:	bne	153d8 <__assert_fail@plt+0x42dc>
   15310:	mov	r6, r5
   15314:	subs	r0, r1, #2
   15318:	movwne	r0, #1
   1531c:	orr	r0, r3, r0
   15320:	tst	r0, #1
   15324:	ldr	r2, [sp, #92]	; 0x5c
   15328:	ldreq	r0, [sp, #64]	; 0x40
   1532c:	eoreq	r0, r0, #1
   15330:	tsteq	r0, #1
   15334:	bne	15374 <__assert_fail@plt+0x4278>
   15338:	mov	r9, lr
   1533c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15340:	tst	r0, #1
   15344:	bne	15440 <__assert_fail@plt+0x4344>
   15348:	ldr	r0, [sp, #84]	; 0x54
   1534c:	cmp	r0, #0
   15350:	beq	15374 <__assert_fail@plt+0x4278>
   15354:	mov	r0, #0
   15358:	str	r0, [fp, #-48]	; 0xffffffd0
   1535c:	mov	r1, #2
   15360:	cmp	sl, #0
   15364:	mov	r0, r2
   15368:	mov	r4, r3
   1536c:	ldr	r7, [sp, #84]	; 0x54
   15370:	beq	1454c <__assert_fail@plt+0x3450>
   15374:	ldr	r1, [fp, #-84]	; 0xffffffac
   15378:	clz	r0, r1
   1537c:	lsr	r0, r0, #5
   15380:	orr	r0, r0, r3
   15384:	tst	r0, #1
   15388:	bne	153b4 <__assert_fail@plt+0x42b8>
   1538c:	ldrb	r0, [r1]
   15390:	cmp	r0, #0
   15394:	beq	153b4 <__assert_fail@plt+0x42b8>
   15398:	add	r1, r1, #1
   1539c:	cmp	r8, sl
   153a0:	strbcc	r0, [r6, r8]
   153a4:	add	r8, r8, #1
   153a8:	ldrb	r0, [r1], #1
   153ac:	cmp	r0, #0
   153b0:	bne	1539c <__assert_fail@plt+0x42a0>
   153b4:	cmp	r8, sl
   153b8:	movcc	r0, #0
   153bc:	strbcc	r0, [r6, r8]
   153c0:	b	15434 <__assert_fail@plt+0x4338>
   153c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   153c8:	mov	lr, r4
   153cc:	b	153d8 <__assert_fail@plt+0x42dc>
   153d0:	ldr	r5, [sp, #28]
   153d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   153d8:	mov	r0, #0
   153dc:	ldr	r1, [fp, #12]
   153e0:	bic	r1, r1, #2
   153e4:	mov	r2, #2
   153e8:	ldr	r3, [sp, #92]	; 0x5c
   153ec:	tst	r3, #1
   153f0:	movwne	r2, #4
   153f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   153f8:	cmp	r3, #2
   153fc:	movne	r2, r3
   15400:	str	r2, [sp]
   15404:	str	r1, [sp, #4]
   15408:	str	r0, [sp, #8]
   1540c:	ldr	r0, [sp, #80]	; 0x50
   15410:	str	r0, [sp, #12]
   15414:	ldr	r0, [sp, #88]	; 0x58
   15418:	str	r0, [sp, #16]
   1541c:	mov	r0, r5
   15420:	mov	r1, sl
   15424:	mov	r2, ip
   15428:	mov	r3, lr
   1542c:	bl	144c0 <__assert_fail@plt+0x33c4>
   15430:	mov	r8, r0
   15434:	mov	r0, r8
   15438:	sub	sp, fp, #28
   1543c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15440:	mov	r0, #5
   15444:	str	r0, [sp]
   15448:	ldr	r0, [fp, #12]
   1544c:	str	r0, [sp, #4]
   15450:	ldr	r0, [fp, #16]
   15454:	str	r0, [sp, #8]
   15458:	ldr	r0, [sp, #80]	; 0x50
   1545c:	str	r0, [sp, #12]
   15460:	ldr	r0, [sp, #88]	; 0x58
   15464:	str	r0, [sp, #16]
   15468:	mov	r0, r6
   1546c:	ldr	r1, [sp, #84]	; 0x54
   15470:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15474:	mov	r3, r9
   15478:	b	1542c <__assert_fail@plt+0x4330>
   1547c:	bl	110e4 <abort@plt>
   15480:	mov	r3, r2
   15484:	mov	r2, #0
   15488:	b	1548c <__assert_fail@plt+0x4390>
   1548c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15490:	add	fp, sp, #28
   15494:	sub	sp, sp, #36	; 0x24
   15498:	mov	r4, r2
   1549c:	str	r2, [sp, #24]
   154a0:	mov	r5, r1
   154a4:	mov	r6, r0
   154a8:	str	r0, [sp, #20]
   154ac:	movw	r8, #37248	; 0x9180
   154b0:	movt	r8, #2
   154b4:	cmp	r3, #0
   154b8:	movne	r8, r3
   154bc:	bl	11018 <__errno_location@plt>
   154c0:	str	r0, [sp, #28]
   154c4:	ldm	r8, {r3, r9}
   154c8:	ldr	r1, [r8, #40]	; 0x28
   154cc:	ldr	r2, [r8, #44]	; 0x2c
   154d0:	ldr	r7, [r0]
   154d4:	str	r7, [sp, #32]
   154d8:	add	sl, r8, #8
   154dc:	cmp	r4, #0
   154e0:	orreq	r9, r9, #1
   154e4:	stm	sp, {r3, r9, sl}
   154e8:	str	r1, [sp, #12]
   154ec:	str	r2, [sp, #16]
   154f0:	mov	r0, #0
   154f4:	mov	r1, #0
   154f8:	mov	r2, r6
   154fc:	mov	r3, r5
   15500:	mov	r7, r5
   15504:	bl	144c0 <__assert_fail@plt+0x33c4>
   15508:	mov	r5, r0
   1550c:	add	r4, r0, #1
   15510:	mov	r0, r4
   15514:	bl	163d0 <__assert_fail@plt+0x52d4>
   15518:	mov	r6, r0
   1551c:	ldr	r0, [r8]
   15520:	ldr	r1, [r8, #40]	; 0x28
   15524:	ldr	r2, [r8, #44]	; 0x2c
   15528:	stm	sp, {r0, r9, sl}
   1552c:	str	r1, [sp, #12]
   15530:	str	r2, [sp, #16]
   15534:	mov	r0, r6
   15538:	mov	r1, r4
   1553c:	ldr	r2, [sp, #20]
   15540:	mov	r3, r7
   15544:	bl	144c0 <__assert_fail@plt+0x33c4>
   15548:	ldr	r0, [sp, #24]
   1554c:	ldr	r1, [sp, #32]
   15550:	ldr	r2, [sp, #28]
   15554:	str	r1, [r2]
   15558:	cmp	r0, #0
   1555c:	strne	r5, [r0]
   15560:	mov	r0, r6
   15564:	sub	sp, fp, #28
   15568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1556c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15570:	add	fp, sp, #24
   15574:	movw	r8, #37112	; 0x90f8
   15578:	movt	r8, #2
   1557c:	ldr	r4, [r8]
   15580:	movw	r5, #37116	; 0x90fc
   15584:	movt	r5, #2
   15588:	ldr	r0, [r5]
   1558c:	cmp	r0, #2
   15590:	blt	155bc <__assert_fail@plt+0x44c0>
   15594:	add	r7, r4, #12
   15598:	mov	r6, #0
   1559c:	ldr	r0, [r7, r6, lsl #3]
   155a0:	bl	14164 <__assert_fail@plt+0x3068>
   155a4:	add	r0, r6, #1
   155a8:	ldr	r1, [r5]
   155ac:	add	r2, r6, #2
   155b0:	cmp	r2, r1
   155b4:	mov	r6, r0
   155b8:	blt	1559c <__assert_fail@plt+0x44a0>
   155bc:	ldr	r0, [r4, #4]
   155c0:	movw	r9, #37296	; 0x91b0
   155c4:	movt	r9, #2
   155c8:	cmp	r0, r9
   155cc:	movw	r7, #37120	; 0x9100
   155d0:	movt	r7, #2
   155d4:	beq	155e4 <__assert_fail@plt+0x44e8>
   155d8:	bl	14164 <__assert_fail@plt+0x3068>
   155dc:	mov	r0, #256	; 0x100
   155e0:	stm	r7, {r0, r9}
   155e4:	cmp	r4, r7
   155e8:	beq	155f8 <__assert_fail@plt+0x44fc>
   155ec:	mov	r0, r4
   155f0:	bl	14164 <__assert_fail@plt+0x3068>
   155f4:	str	r7, [r8]
   155f8:	mov	r0, #1
   155fc:	str	r0, [r5]
   15600:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15604:	movw	r3, #37248	; 0x9180
   15608:	movt	r3, #2
   1560c:	mvn	r2, #0
   15610:	b	15614 <__assert_fail@plt+0x4518>
   15614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15618:	add	fp, sp, #28
   1561c:	sub	sp, sp, #44	; 0x2c
   15620:	mov	r7, r3
   15624:	str	r2, [sp, #36]	; 0x24
   15628:	str	r1, [sp, #32]
   1562c:	mov	r5, r0
   15630:	bl	11018 <__errno_location@plt>
   15634:	cmp	r5, #0
   15638:	bmi	157a8 <__assert_fail@plt+0x46ac>
   1563c:	cmn	r5, #-2147483647	; 0x80000001
   15640:	beq	157a8 <__assert_fail@plt+0x46ac>
   15644:	movw	r4, #37112	; 0x90f8
   15648:	movt	r4, #2
   1564c:	ldr	r6, [r4]
   15650:	str	r0, [sp, #28]
   15654:	ldr	r0, [r0]
   15658:	str	r0, [sp, #24]
   1565c:	movw	r8, #37116	; 0x90fc
   15660:	movt	r8, #2
   15664:	ldr	r1, [r8]
   15668:	cmp	r1, r5
   1566c:	ble	15678 <__assert_fail@plt+0x457c>
   15670:	mov	sl, r6
   15674:	b	156e4 <__assert_fail@plt+0x45e8>
   15678:	str	r1, [fp, #-32]	; 0xffffffe0
   1567c:	mov	r0, #8
   15680:	str	r0, [sp]
   15684:	movw	r9, #37120	; 0x9100
   15688:	movt	r9, #2
   1568c:	subs	r0, r6, r9
   15690:	movne	r0, r6
   15694:	sub	r1, r5, r1
   15698:	add	r2, r1, #1
   1569c:	sub	r1, fp, #32
   156a0:	mvn	r3, #-2147483648	; 0x80000000
   156a4:	bl	164ac <__assert_fail@plt+0x53b0>
   156a8:	mov	sl, r0
   156ac:	str	r0, [r4]
   156b0:	cmp	r6, r9
   156b4:	bne	156c0 <__assert_fail@plt+0x45c4>
   156b8:	ldrd	r0, [r9]
   156bc:	stm	sl, {r0, r1}
   156c0:	ldr	r1, [r8]
   156c4:	add	r0, sl, r1, lsl #3
   156c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   156cc:	sub	r1, r2, r1
   156d0:	lsl	r2, r1, #3
   156d4:	mov	r1, #0
   156d8:	bl	11030 <memset@plt>
   156dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   156e0:	str	r0, [r8]
   156e4:	mov	r9, sl
   156e8:	ldr	r6, [r9, r5, lsl #3]!
   156ec:	ldr	r4, [r9, #4]!
   156f0:	ldm	r7, {r0, r1}
   156f4:	ldr	r2, [r7, #40]	; 0x28
   156f8:	ldr	r3, [r7, #44]	; 0x2c
   156fc:	orr	r8, r1, #1
   15700:	add	r1, r7, #8
   15704:	stm	sp, {r0, r8}
   15708:	str	r1, [sp, #20]
   1570c:	add	r0, sp, #8
   15710:	stm	r0, {r1, r2, r3}
   15714:	mov	r0, r4
   15718:	mov	r1, r6
   1571c:	ldr	r2, [sp, #32]
   15720:	ldr	r3, [sp, #36]	; 0x24
   15724:	bl	144c0 <__assert_fail@plt+0x33c4>
   15728:	cmp	r6, r0
   1572c:	bhi	15790 <__assert_fail@plt+0x4694>
   15730:	add	r6, r0, #1
   15734:	str	r6, [sl, r5, lsl #3]
   15738:	movw	r0, #37296	; 0x91b0
   1573c:	movt	r0, #2
   15740:	cmp	r4, r0
   15744:	beq	15750 <__assert_fail@plt+0x4654>
   15748:	mov	r0, r4
   1574c:	bl	14164 <__assert_fail@plt+0x3068>
   15750:	mov	r0, r6
   15754:	bl	163d0 <__assert_fail@plt+0x52d4>
   15758:	mov	r4, r0
   1575c:	str	r0, [r9]
   15760:	ldr	r0, [r7]
   15764:	ldr	r1, [r7, #40]	; 0x28
   15768:	ldr	r2, [r7, #44]	; 0x2c
   1576c:	stm	sp, {r0, r8}
   15770:	ldr	r0, [sp, #20]
   15774:	add	r3, sp, #8
   15778:	stm	r3, {r0, r1, r2}
   1577c:	mov	r0, r4
   15780:	mov	r1, r6
   15784:	ldr	r2, [sp, #32]
   15788:	ldr	r3, [sp, #36]	; 0x24
   1578c:	bl	144c0 <__assert_fail@plt+0x33c4>
   15790:	ldr	r0, [sp, #28]
   15794:	ldr	r1, [sp, #24]
   15798:	str	r1, [r0]
   1579c:	mov	r0, r4
   157a0:	sub	sp, fp, #28
   157a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157a8:	bl	110e4 <abort@plt>
   157ac:	movw	r3, #37248	; 0x9180
   157b0:	movt	r3, #2
   157b4:	b	15614 <__assert_fail@plt+0x4518>
   157b8:	mov	r1, r0
   157bc:	mov	r0, #0
   157c0:	b	15604 <__assert_fail@plt+0x4508>
   157c4:	mov	r2, r1
   157c8:	mov	r1, r0
   157cc:	mov	r0, #0
   157d0:	b	157ac <__assert_fail@plt+0x46b0>
   157d4:	push	{r4, r5, r6, sl, fp, lr}
   157d8:	add	fp, sp, #16
   157dc:	sub	sp, sp, #48	; 0x30
   157e0:	mov	r4, r2
   157e4:	mov	r5, r0
   157e8:	mov	r6, sp
   157ec:	mov	r0, r6
   157f0:	bl	15810 <__assert_fail@plt+0x4714>
   157f4:	mov	r0, r5
   157f8:	mov	r1, r4
   157fc:	mvn	r2, #0
   15800:	mov	r3, r6
   15804:	bl	15614 <__assert_fail@plt+0x4518>
   15808:	sub	sp, fp, #16
   1580c:	pop	{r4, r5, r6, sl, fp, pc}
   15810:	push	{fp, lr}
   15814:	mov	fp, sp
   15818:	vmov.i32	q8, #0	; 0x00000000
   1581c:	mov	r2, #32
   15820:	mov	r3, r0
   15824:	vst1.32	{d16-d17}, [r3], r2
   15828:	vst1.32	{d16-d17}, [r3]
   1582c:	add	r2, r0, #16
   15830:	vst1.32	{d16-d17}, [r2]
   15834:	cmp	r1, #10
   15838:	strne	r1, [r0]
   1583c:	popne	{fp, pc}
   15840:	bl	110e4 <abort@plt>
   15844:	push	{r4, r5, r6, r7, fp, lr}
   15848:	add	fp, sp, #16
   1584c:	sub	sp, sp, #48	; 0x30
   15850:	mov	r4, r3
   15854:	mov	r5, r2
   15858:	mov	r6, r0
   1585c:	mov	r7, sp
   15860:	mov	r0, r7
   15864:	bl	15810 <__assert_fail@plt+0x4714>
   15868:	mov	r0, r6
   1586c:	mov	r1, r5
   15870:	mov	r2, r4
   15874:	mov	r3, r7
   15878:	bl	15614 <__assert_fail@plt+0x4518>
   1587c:	sub	sp, fp, #16
   15880:	pop	{r4, r5, r6, r7, fp, pc}
   15884:	mov	r2, r1
   15888:	mov	r1, r0
   1588c:	mov	r0, #0
   15890:	b	157d4 <__assert_fail@plt+0x46d8>
   15894:	mov	r3, r2
   15898:	mov	r2, r1
   1589c:	mov	r1, r0
   158a0:	mov	r0, #0
   158a4:	b	15844 <__assert_fail@plt+0x4748>
   158a8:	push	{r4, r5, r6, sl, fp, lr}
   158ac:	add	fp, sp, #16
   158b0:	sub	sp, sp, #48	; 0x30
   158b4:	mov	r4, r1
   158b8:	mov	r5, r0
   158bc:	movw	r0, #37248	; 0x9180
   158c0:	movt	r0, #2
   158c4:	add	r1, r0, #16
   158c8:	mov	r3, #32
   158cc:	vld1.64	{d16-d17}, [r0], r3
   158d0:	vld1.64	{d18-d19}, [r1]
   158d4:	mov	r6, sp
   158d8:	add	r1, r6, #16
   158dc:	vld1.64	{d20-d21}, [r0]
   158e0:	vst1.64	{d18-d19}, [r1]
   158e4:	mov	r0, r6
   158e8:	vst1.64	{d16-d17}, [r0], r3
   158ec:	vst1.64	{d20-d21}, [r0]
   158f0:	mov	r0, r6
   158f4:	mov	r1, r2
   158f8:	mov	r2, #1
   158fc:	bl	143b4 <__assert_fail@plt+0x32b8>
   15900:	mov	r0, #0
   15904:	mov	r1, r5
   15908:	mov	r2, r4
   1590c:	mov	r3, r6
   15910:	bl	15614 <__assert_fail@plt+0x4518>
   15914:	sub	sp, fp, #16
   15918:	pop	{r4, r5, r6, sl, fp, pc}
   1591c:	mov	r2, r1
   15920:	mvn	r1, #0
   15924:	b	158a8 <__assert_fail@plt+0x47ac>
   15928:	mov	r1, #58	; 0x3a
   1592c:	b	1591c <__assert_fail@plt+0x4820>
   15930:	mov	r2, #58	; 0x3a
   15934:	b	158a8 <__assert_fail@plt+0x47ac>
   15938:	push	{r4, r5, r6, sl, fp, lr}
   1593c:	add	fp, sp, #16
   15940:	sub	sp, sp, #48	; 0x30
   15944:	mov	r4, r2
   15948:	mov	r5, r0
   1594c:	mov	r6, sp
   15950:	mov	r0, r6
   15954:	bl	15810 <__assert_fail@plt+0x4714>
   15958:	mov	r0, r6
   1595c:	mov	r1, #58	; 0x3a
   15960:	mov	r2, #1
   15964:	bl	143b4 <__assert_fail@plt+0x32b8>
   15968:	mov	r0, r5
   1596c:	mov	r1, r4
   15970:	mvn	r2, #0
   15974:	mov	r3, r6
   15978:	bl	15614 <__assert_fail@plt+0x4518>
   1597c:	sub	sp, fp, #16
   15980:	pop	{r4, r5, r6, sl, fp, pc}
   15984:	push	{fp, lr}
   15988:	mov	fp, sp
   1598c:	sub	sp, sp, #8
   15990:	mvn	ip, #0
   15994:	str	ip, [sp]
   15998:	bl	159a4 <__assert_fail@plt+0x48a8>
   1599c:	mov	sp, fp
   159a0:	pop	{fp, pc}
   159a4:	push	{r4, r5, r6, r7, fp, lr}
   159a8:	add	fp, sp, #16
   159ac:	sub	sp, sp, #48	; 0x30
   159b0:	mov	r7, r3
   159b4:	mov	r5, r0
   159b8:	movw	r0, #37248	; 0x9180
   159bc:	movt	r0, #2
   159c0:	add	r3, r0, #16
   159c4:	mov	r4, #32
   159c8:	vld1.64	{d16-d17}, [r0], r4
   159cc:	vld1.64	{d18-d19}, [r3]
   159d0:	mov	r6, sp
   159d4:	add	r3, r6, #16
   159d8:	vld1.64	{d20-d21}, [r0]
   159dc:	vst1.64	{d18-d19}, [r3]
   159e0:	mov	r0, r6
   159e4:	vst1.64	{d16-d17}, [r0], r4
   159e8:	vst1.64	{d20-d21}, [r0]
   159ec:	mov	r0, r6
   159f0:	bl	1440c <__assert_fail@plt+0x3310>
   159f4:	ldr	r2, [fp, #8]
   159f8:	mov	r0, r5
   159fc:	mov	r1, r7
   15a00:	mov	r3, r6
   15a04:	bl	15614 <__assert_fail@plt+0x4518>
   15a08:	sub	sp, fp, #16
   15a0c:	pop	{r4, r5, r6, r7, fp, pc}
   15a10:	mov	r3, r2
   15a14:	mov	r2, r1
   15a18:	mov	r1, r0
   15a1c:	mov	r0, #0
   15a20:	b	15984 <__assert_fail@plt+0x4888>
   15a24:	push	{fp, lr}
   15a28:	mov	fp, sp
   15a2c:	sub	sp, sp, #8
   15a30:	mov	ip, r2
   15a34:	mov	r2, r1
   15a38:	mov	r1, r0
   15a3c:	str	r3, [sp]
   15a40:	mov	r0, #0
   15a44:	mov	r3, ip
   15a48:	bl	159a4 <__assert_fail@plt+0x48a8>
   15a4c:	mov	sp, fp
   15a50:	pop	{fp, pc}
   15a54:	movw	r3, #37128	; 0x9108
   15a58:	movt	r3, #2
   15a5c:	b	15614 <__assert_fail@plt+0x4518>
   15a60:	mov	r2, r1
   15a64:	mov	r1, r0
   15a68:	mov	r0, #0
   15a6c:	b	15a54 <__assert_fail@plt+0x4958>
   15a70:	mvn	r2, #0
   15a74:	b	15a54 <__assert_fail@plt+0x4958>
   15a78:	mov	r1, r0
   15a7c:	mov	r0, #0
   15a80:	b	15a70 <__assert_fail@plt+0x4974>
   15a84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a88:	add	fp, sp, #24
   15a8c:	sub	sp, sp, #16
   15a90:	mov	r4, r1
   15a94:	mov	r5, r0
   15a98:	mov	r7, #0
   15a9c:	mov	r0, #0
   15aa0:	mov	r1, r5
   15aa4:	mov	r2, #5
   15aa8:	bl	10f1c <dcgettext@plt>
   15aac:	cmp	r0, r5
   15ab0:	beq	15abc <__assert_fail@plt+0x49c0>
   15ab4:	sub	sp, fp, #24
   15ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15abc:	bl	16e6c <__assert_fail@plt+0x5d70>
   15ac0:	mov	r6, r0
   15ac4:	mov	r8, #56	; 0x38
   15ac8:	mov	r0, #45	; 0x2d
   15acc:	stm	sp, {r0, r8}
   15ad0:	str	r7, [sp, #8]
   15ad4:	str	r7, [sp, #12]
   15ad8:	mov	r0, r6
   15adc:	mov	r1, #85	; 0x55
   15ae0:	mov	r2, #84	; 0x54
   15ae4:	mov	r3, #70	; 0x46
   15ae8:	bl	15b80 <__assert_fail@plt+0x4a84>
   15aec:	cmp	r0, #0
   15af0:	beq	15b0c <__assert_fail@plt+0x4a10>
   15af4:	ldrb	r1, [r5]
   15af8:	movw	r2, #33185	; 0x81a1
   15afc:	movt	r2, #1
   15b00:	movw	r0, #33189	; 0x81a5
   15b04:	movt	r0, #1
   15b08:	b	15b50 <__assert_fail@plt+0x4a54>
   15b0c:	mov	r0, #48	; 0x30
   15b10:	mov	r1, #51	; 0x33
   15b14:	str	r8, [sp]
   15b18:	stmib	sp, {r0, r1}
   15b1c:	str	r0, [sp, #12]
   15b20:	mov	r0, r6
   15b24:	mov	r1, #71	; 0x47
   15b28:	mov	r2, #66	; 0x42
   15b2c:	mov	r3, #49	; 0x31
   15b30:	bl	15b80 <__assert_fail@plt+0x4a84>
   15b34:	cmp	r0, #0
   15b38:	beq	15b60 <__assert_fail@plt+0x4a64>
   15b3c:	ldrb	r1, [r5]
   15b40:	movw	r2, #33193	; 0x81a9
   15b44:	movt	r2, #1
   15b48:	movw	r0, #33197	; 0x81ad
   15b4c:	movt	r0, #1
   15b50:	cmp	r1, #96	; 0x60
   15b54:	moveq	r0, r2
   15b58:	sub	sp, fp, #24
   15b5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b60:	movw	r1, #33179	; 0x819b
   15b64:	movt	r1, #1
   15b68:	movw	r0, #33183	; 0x819f
   15b6c:	movt	r0, #1
   15b70:	cmp	r4, #9
   15b74:	moveq	r0, r1
   15b78:	sub	sp, fp, #24
   15b7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b80:	push	{r4, r5, r6, r7, fp, lr}
   15b84:	add	fp, sp, #16
   15b88:	sub	sp, sp, #16
   15b8c:	mov	r4, r3
   15b90:	mov	r5, r2
   15b94:	mov	r7, r1
   15b98:	mov	r6, r0
   15b9c:	mov	r0, r1
   15ba0:	bl	13ea4 <__assert_fail@plt+0x2da8>
   15ba4:	ldrb	r1, [r6]
   15ba8:	cmp	r0, #0
   15bac:	andne	r1, r1, #223	; 0xdf
   15bb0:	mov	r0, #0
   15bb4:	cmp	r1, r7
   15bb8:	bne	15bf0 <__assert_fail@plt+0x4af4>
   15bbc:	cmp	r7, #0
   15bc0:	beq	15bf8 <__assert_fail@plt+0x4afc>
   15bc4:	ldr	r0, [fp, #20]
   15bc8:	ldr	r1, [fp, #16]
   15bcc:	ldr	r2, [fp, #12]
   15bd0:	ldr	r3, [fp, #8]
   15bd4:	str	r2, [sp]
   15bd8:	str	r1, [sp, #4]
   15bdc:	str	r0, [sp, #8]
   15be0:	mov	r0, r6
   15be4:	mov	r1, r5
   15be8:	mov	r2, r4
   15bec:	bl	15c04 <__assert_fail@plt+0x4b08>
   15bf0:	sub	sp, fp, #16
   15bf4:	pop	{r4, r5, r6, r7, fp, pc}
   15bf8:	mov	r0, #1
   15bfc:	sub	sp, fp, #16
   15c00:	pop	{r4, r5, r6, r7, fp, pc}
   15c04:	push	{r4, r5, r6, r7, fp, lr}
   15c08:	add	fp, sp, #16
   15c0c:	sub	sp, sp, #8
   15c10:	mov	r4, r3
   15c14:	mov	r5, r2
   15c18:	mov	r7, r1
   15c1c:	mov	r6, r0
   15c20:	mov	r0, r1
   15c24:	bl	13ea4 <__assert_fail@plt+0x2da8>
   15c28:	ldrb	r1, [r6, #1]
   15c2c:	cmp	r0, #0
   15c30:	andne	r1, r1, #223	; 0xdf
   15c34:	mov	r0, #0
   15c38:	cmp	r1, r7
   15c3c:	bne	15c6c <__assert_fail@plt+0x4b70>
   15c40:	cmp	r7, #0
   15c44:	beq	15c74 <__assert_fail@plt+0x4b78>
   15c48:	ldr	r0, [fp, #16]
   15c4c:	ldr	r1, [fp, #12]
   15c50:	ldr	r3, [fp, #8]
   15c54:	str	r1, [sp]
   15c58:	str	r0, [sp, #4]
   15c5c:	mov	r0, r6
   15c60:	mov	r1, r5
   15c64:	mov	r2, r4
   15c68:	bl	15c80 <__assert_fail@plt+0x4b84>
   15c6c:	sub	sp, fp, #16
   15c70:	pop	{r4, r5, r6, r7, fp, pc}
   15c74:	mov	r0, #1
   15c78:	sub	sp, fp, #16
   15c7c:	pop	{r4, r5, r6, r7, fp, pc}
   15c80:	push	{r4, r5, r6, r7, fp, lr}
   15c84:	add	fp, sp, #16
   15c88:	sub	sp, sp, #8
   15c8c:	mov	r4, r3
   15c90:	mov	r5, r2
   15c94:	mov	r7, r1
   15c98:	mov	r6, r0
   15c9c:	mov	r0, r1
   15ca0:	bl	13ea4 <__assert_fail@plt+0x2da8>
   15ca4:	ldrb	r1, [r6, #2]
   15ca8:	cmp	r0, #0
   15cac:	andne	r1, r1, #223	; 0xdf
   15cb0:	mov	r0, #0
   15cb4:	cmp	r1, r7
   15cb8:	bne	15ce0 <__assert_fail@plt+0x4be4>
   15cbc:	cmp	r7, #0
   15cc0:	beq	15ce8 <__assert_fail@plt+0x4bec>
   15cc4:	ldr	r0, [fp, #12]
   15cc8:	ldr	r3, [fp, #8]
   15ccc:	str	r0, [sp]
   15cd0:	mov	r0, r6
   15cd4:	mov	r1, r5
   15cd8:	mov	r2, r4
   15cdc:	bl	15cf4 <__assert_fail@plt+0x4bf8>
   15ce0:	sub	sp, fp, #16
   15ce4:	pop	{r4, r5, r6, r7, fp, pc}
   15ce8:	mov	r0, #1
   15cec:	sub	sp, fp, #16
   15cf0:	pop	{r4, r5, r6, r7, fp, pc}
   15cf4:	push	{r4, r5, r6, r7, fp, lr}
   15cf8:	add	fp, sp, #16
   15cfc:	mov	r4, r3
   15d00:	mov	r5, r2
   15d04:	mov	r7, r1
   15d08:	mov	r6, r0
   15d0c:	mov	r0, r1
   15d10:	bl	13ea4 <__assert_fail@plt+0x2da8>
   15d14:	ldrb	r1, [r6, #3]
   15d18:	ldr	r3, [fp, #8]
   15d1c:	cmp	r0, #0
   15d20:	andne	r1, r1, #223	; 0xdf
   15d24:	mov	r0, #0
   15d28:	cmp	r1, r7
   15d2c:	bne	15d50 <__assert_fail@plt+0x4c54>
   15d30:	cmp	r7, #0
   15d34:	beq	15d4c <__assert_fail@plt+0x4c50>
   15d38:	mov	r0, r6
   15d3c:	mov	r1, r5
   15d40:	mov	r2, r4
   15d44:	pop	{r4, r5, r6, r7, fp, lr}
   15d48:	b	15d54 <__assert_fail@plt+0x4c58>
   15d4c:	mov	r0, #1
   15d50:	pop	{r4, r5, r6, r7, fp, pc}
   15d54:	push	{r4, r5, r6, r7, fp, lr}
   15d58:	add	fp, sp, #16
   15d5c:	mov	r4, r3
   15d60:	mov	r5, r2
   15d64:	mov	r7, r1
   15d68:	mov	r6, r0
   15d6c:	mov	r0, r1
   15d70:	bl	13ea4 <__assert_fail@plt+0x2da8>
   15d74:	ldrb	r1, [r6, #4]
   15d78:	cmp	r0, #0
   15d7c:	andne	r1, r1, #223	; 0xdf
   15d80:	mov	r0, #0
   15d84:	cmp	r1, r7
   15d88:	bne	15dac <__assert_fail@plt+0x4cb0>
   15d8c:	cmp	r7, #0
   15d90:	beq	15da8 <__assert_fail@plt+0x4cac>
   15d94:	mov	r0, r6
   15d98:	mov	r1, r5
   15d9c:	mov	r2, r4
   15da0:	pop	{r4, r5, r6, r7, fp, lr}
   15da4:	b	15db0 <__assert_fail@plt+0x4cb4>
   15da8:	mov	r0, #1
   15dac:	pop	{r4, r5, r6, r7, fp, pc}
   15db0:	push	{r4, r5, r6, sl, fp, lr}
   15db4:	add	fp, sp, #16
   15db8:	mov	r4, r2
   15dbc:	mov	r6, r1
   15dc0:	mov	r5, r0
   15dc4:	mov	r0, r1
   15dc8:	bl	13ea4 <__assert_fail@plt+0x2da8>
   15dcc:	ldrb	r1, [r5, #5]
   15dd0:	cmp	r0, #0
   15dd4:	andne	r1, r1, #223	; 0xdf
   15dd8:	mov	r0, #0
   15ddc:	cmp	r1, r6
   15de0:	bne	15e00 <__assert_fail@plt+0x4d04>
   15de4:	cmp	r6, #0
   15de8:	beq	15dfc <__assert_fail@plt+0x4d00>
   15dec:	mov	r0, r5
   15df0:	mov	r1, r4
   15df4:	pop	{r4, r5, r6, sl, fp, lr}
   15df8:	b	15e04 <__assert_fail@plt+0x4d08>
   15dfc:	mov	r0, #1
   15e00:	pop	{r4, r5, r6, sl, fp, pc}
   15e04:	push	{r4, r5, fp, lr}
   15e08:	add	fp, sp, #8
   15e0c:	mov	r5, r1
   15e10:	mov	r4, r0
   15e14:	mov	r0, r1
   15e18:	bl	13ea4 <__assert_fail@plt+0x2da8>
   15e1c:	ldrb	r1, [r4, #6]
   15e20:	cmp	r0, #0
   15e24:	andne	r1, r1, #223	; 0xdf
   15e28:	mov	r0, #0
   15e2c:	cmp	r1, r5
   15e30:	popne	{r4, r5, fp, pc}
   15e34:	cmp	r5, #0
   15e38:	beq	15e48 <__assert_fail@plt+0x4d4c>
   15e3c:	mov	r0, r4
   15e40:	pop	{r4, r5, fp, lr}
   15e44:	b	15e50 <__assert_fail@plt+0x4d54>
   15e48:	mov	r0, #1
   15e4c:	pop	{r4, r5, fp, pc}
   15e50:	push	{r4, sl, fp, lr}
   15e54:	add	fp, sp, #8
   15e58:	mov	r4, r0
   15e5c:	mov	r0, #0
   15e60:	bl	13ea4 <__assert_fail@plt+0x2da8>
   15e64:	ldrb	r1, [r4, #7]
   15e68:	cmp	r0, #0
   15e6c:	beq	15e80 <__assert_fail@plt+0x4d84>
   15e70:	tst	r1, #223	; 0xdf
   15e74:	bne	15e88 <__assert_fail@plt+0x4d8c>
   15e78:	mov	r0, #1
   15e7c:	pop	{r4, sl, fp, pc}
   15e80:	cmp	r1, #0
   15e84:	beq	15e78 <__assert_fail@plt+0x4d7c>
   15e88:	mov	r0, #0
   15e8c:	pop	{r4, sl, fp, pc}
   15e90:	cmp	r2, #0
   15e94:	beq	15ec4 <__assert_fail@plt+0x4dc8>
   15e98:	mvn	r3, #0
   15e9c:	udiv	r3, r3, r2
   15ea0:	cmp	r3, r1
   15ea4:	bcs	15ec4 <__assert_fail@plt+0x4dc8>
   15ea8:	push	{fp, lr}
   15eac:	mov	fp, sp
   15eb0:	bl	11018 <__errno_location@plt>
   15eb4:	mov	r1, #12
   15eb8:	str	r1, [r0]
   15ebc:	mov	r0, #0
   15ec0:	pop	{fp, pc}
   15ec4:	mul	r1, r2, r1
   15ec8:	b	16d84 <__assert_fail@plt+0x5c88>
   15ecc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ed0:	add	fp, sp, #24
   15ed4:	sub	sp, sp, #32
   15ed8:	mov	r4, r2
   15edc:	mov	r8, r0
   15ee0:	ldr	r6, [fp, #12]
   15ee4:	ldr	r7, [fp, #8]
   15ee8:	cmp	r1, #0
   15eec:	beq	15f14 <__assert_fail@plt+0x4e18>
   15ef0:	mov	r5, r1
   15ef4:	str	r4, [sp]
   15ef8:	str	r3, [sp, #4]
   15efc:	movw	r2, #33284	; 0x8204
   15f00:	movt	r2, #1
   15f04:	mov	r0, r8
   15f08:	mov	r1, #1
   15f0c:	mov	r3, r5
   15f10:	b	15f2c <__assert_fail@plt+0x4e30>
   15f14:	str	r3, [sp]
   15f18:	movw	r2, #33296	; 0x8210
   15f1c:	movt	r2, #1
   15f20:	mov	r0, r8
   15f24:	mov	r1, #1
   15f28:	mov	r3, r4
   15f2c:	bl	11054 <__fprintf_chk@plt>
   15f30:	movw	r1, #33303	; 0x8217
   15f34:	movt	r1, #1
   15f38:	mov	r0, #0
   15f3c:	mov	r2, #5
   15f40:	bl	10f1c <dcgettext@plt>
   15f44:	mov	r3, r0
   15f48:	movw	r0, #2022	; 0x7e6
   15f4c:	str	r0, [sp]
   15f50:	movw	r2, #34021	; 0x84e5
   15f54:	movt	r2, #1
   15f58:	mov	r0, r8
   15f5c:	mov	r1, #1
   15f60:	bl	11054 <__fprintf_chk@plt>
   15f64:	movw	r4, #31334	; 0x7a66
   15f68:	movt	r4, #1
   15f6c:	mov	r0, r4
   15f70:	mov	r1, r8
   15f74:	bl	10e8c <fputs_unlocked@plt>
   15f78:	movw	r1, #33307	; 0x821b
   15f7c:	movt	r1, #1
   15f80:	mov	r0, #0
   15f84:	mov	r2, #5
   15f88:	bl	10f1c <dcgettext@plt>
   15f8c:	mov	r2, r0
   15f90:	movw	r3, #33478	; 0x82c6
   15f94:	movt	r3, #1
   15f98:	mov	r0, r8
   15f9c:	mov	r1, #1
   15fa0:	bl	11054 <__fprintf_chk@plt>
   15fa4:	mov	r0, r4
   15fa8:	mov	r1, r8
   15fac:	bl	10e8c <fputs_unlocked@plt>
   15fb0:	cmp	r6, #9
   15fb4:	bhi	15ff0 <__assert_fail@plt+0x4ef4>
   15fb8:	add	r0, pc, #0
   15fbc:	ldr	pc, [r0, r6, lsl #2]
   15fc0:	andeq	r5, r1, r8, ror #31
   15fc4:	strdeq	r5, [r1], -ip
   15fc8:	andeq	r6, r1, ip, lsr #32
   15fcc:	andeq	r6, r1, r4, asr r0
   15fd0:	andeq	r6, r1, ip, ror r0
   15fd4:	andeq	r6, r1, r4, lsr #1
   15fd8:	andeq	r6, r1, ip, asr #1
   15fdc:	andeq	r6, r1, r4, lsl #2
   15fe0:	andeq	r6, r1, r4, lsr #3
   15fe4:	andeq	r6, r1, ip, asr #2
   15fe8:	sub	sp, fp, #24
   15fec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ff0:	movw	r1, #33831	; 0x8427
   15ff4:	movt	r1, #1
   15ff8:	b	16154 <__assert_fail@plt+0x5058>
   15ffc:	movw	r1, #33512	; 0x82e8
   16000:	movt	r1, #1
   16004:	mov	r0, #0
   16008:	mov	r2, #5
   1600c:	bl	10f1c <dcgettext@plt>
   16010:	mov	r2, r0
   16014:	ldr	r3, [r7]
   16018:	mov	r0, r8
   1601c:	mov	r1, #1
   16020:	sub	sp, fp, #24
   16024:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16028:	b	11054 <__fprintf_chk@plt>
   1602c:	movw	r1, #33528	; 0x82f8
   16030:	movt	r1, #1
   16034:	mov	r0, #0
   16038:	mov	r2, #5
   1603c:	bl	10f1c <dcgettext@plt>
   16040:	mov	r2, r0
   16044:	ldr	r3, [r7]
   16048:	ldr	r0, [r7, #4]
   1604c:	str	r0, [sp]
   16050:	b	16140 <__assert_fail@plt+0x5044>
   16054:	movw	r1, #33551	; 0x830f
   16058:	movt	r1, #1
   1605c:	mov	r0, #0
   16060:	mov	r2, #5
   16064:	bl	10f1c <dcgettext@plt>
   16068:	mov	r2, r0
   1606c:	ldr	r3, [r7]
   16070:	ldmib	r7, {r0, r1}
   16074:	stm	sp, {r0, r1}
   16078:	b	16140 <__assert_fail@plt+0x5044>
   1607c:	movw	r1, #33579	; 0x832b
   16080:	movt	r1, #1
   16084:	mov	r0, #0
   16088:	mov	r2, #5
   1608c:	bl	10f1c <dcgettext@plt>
   16090:	mov	r2, r0
   16094:	ldr	r3, [r7]
   16098:	ldmib	r7, {r0, r1, r7}
   1609c:	stm	sp, {r0, r1, r7}
   160a0:	b	16140 <__assert_fail@plt+0x5044>
   160a4:	movw	r1, #33611	; 0x834b
   160a8:	movt	r1, #1
   160ac:	mov	r0, #0
   160b0:	mov	r2, #5
   160b4:	bl	10f1c <dcgettext@plt>
   160b8:	mov	r2, r0
   160bc:	ldr	r3, [r7]
   160c0:	ldmib	r7, {r0, r1, r6, r7}
   160c4:	stm	sp, {r0, r1, r6, r7}
   160c8:	b	16140 <__assert_fail@plt+0x5044>
   160cc:	movw	r1, #33647	; 0x836f
   160d0:	movt	r1, #1
   160d4:	mov	r0, #0
   160d8:	mov	r2, #5
   160dc:	bl	10f1c <dcgettext@plt>
   160e0:	mov	r2, r0
   160e4:	ldr	r3, [r7]
   160e8:	ldmib	r7, {r0, r1, r6}
   160ec:	ldr	r5, [r7, #16]
   160f0:	ldr	r7, [r7, #20]
   160f4:	stm	sp, {r0, r1, r6}
   160f8:	str	r5, [sp, #12]
   160fc:	str	r7, [sp, #16]
   16100:	b	16140 <__assert_fail@plt+0x5044>
   16104:	movw	r1, #33687	; 0x8397
   16108:	movt	r1, #1
   1610c:	mov	r0, #0
   16110:	mov	r2, #5
   16114:	bl	10f1c <dcgettext@plt>
   16118:	mov	r2, r0
   1611c:	ldr	r3, [r7]
   16120:	ldmib	r7, {r0, r1, r6}
   16124:	ldr	r5, [r7, #16]
   16128:	ldr	r4, [r7, #20]
   1612c:	ldr	r7, [r7, #24]
   16130:	stm	sp, {r0, r1, r6}
   16134:	str	r5, [sp, #12]
   16138:	str	r4, [sp, #16]
   1613c:	str	r7, [sp, #20]
   16140:	mov	r0, r8
   16144:	mov	r1, #1
   16148:	b	161f4 <__assert_fail@plt+0x50f8>
   1614c:	movw	r1, #33779	; 0x83f3
   16150:	movt	r1, #1
   16154:	mov	r0, #0
   16158:	mov	r2, #5
   1615c:	bl	10f1c <dcgettext@plt>
   16160:	mov	ip, r0
   16164:	ldr	r3, [r7]
   16168:	ldr	r0, [r7, #4]
   1616c:	ldr	r1, [r7, #8]
   16170:	ldr	r6, [r7, #12]
   16174:	ldr	r5, [r7, #16]
   16178:	ldr	r4, [r7, #20]
   1617c:	ldr	r2, [r7, #24]
   16180:	ldr	lr, [r7, #28]
   16184:	ldr	r7, [r7, #32]
   16188:	stm	sp, {r0, r1, r6}
   1618c:	str	r5, [sp, #12]
   16190:	str	r4, [sp, #16]
   16194:	str	r2, [sp, #20]
   16198:	str	lr, [sp, #24]
   1619c:	str	r7, [sp, #28]
   161a0:	b	161e8 <__assert_fail@plt+0x50ec>
   161a4:	movw	r1, #33731	; 0x83c3
   161a8:	movt	r1, #1
   161ac:	mov	r0, #0
   161b0:	mov	r2, #5
   161b4:	bl	10f1c <dcgettext@plt>
   161b8:	mov	ip, r0
   161bc:	ldr	r3, [r7]
   161c0:	ldmib	r7, {r0, r1, r6}
   161c4:	ldr	r5, [r7, #16]
   161c8:	ldr	r4, [r7, #20]
   161cc:	ldr	r2, [r7, #24]
   161d0:	ldr	r7, [r7, #28]
   161d4:	stm	sp, {r0, r1, r6}
   161d8:	str	r5, [sp, #12]
   161dc:	str	r4, [sp, #16]
   161e0:	str	r2, [sp, #20]
   161e4:	str	r7, [sp, #24]
   161e8:	mov	r0, r8
   161ec:	mov	r1, #1
   161f0:	mov	r2, ip
   161f4:	bl	11054 <__fprintf_chk@plt>
   161f8:	sub	sp, fp, #24
   161fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16200:	push	{r4, sl, fp, lr}
   16204:	add	fp, sp, #8
   16208:	sub	sp, sp, #8
   1620c:	mov	lr, #0
   16210:	ldr	ip, [fp, #8]
   16214:	ldr	r4, [ip, lr, lsl #2]
   16218:	add	lr, lr, #1
   1621c:	cmp	r4, #0
   16220:	bne	16214 <__assert_fail@plt+0x5118>
   16224:	sub	r4, lr, #1
   16228:	str	ip, [sp]
   1622c:	str	r4, [sp, #4]
   16230:	bl	15ecc <__assert_fail@plt+0x4dd0>
   16234:	sub	sp, fp, #8
   16238:	pop	{r4, sl, fp, pc}
   1623c:	push	{r4, r5, fp, lr}
   16240:	add	fp, sp, #8
   16244:	sub	sp, sp, #48	; 0x30
   16248:	mov	ip, #0
   1624c:	ldr	r4, [fp, #8]
   16250:	add	lr, sp, #8
   16254:	ldr	r5, [r4]
   16258:	str	r5, [lr, ip, lsl #2]
   1625c:	cmp	r5, #0
   16260:	beq	16278 <__assert_fail@plt+0x517c>
   16264:	add	ip, ip, #1
   16268:	add	r4, r4, #4
   1626c:	cmp	ip, #10
   16270:	bne	16254 <__assert_fail@plt+0x5158>
   16274:	mov	ip, #10
   16278:	str	lr, [sp]
   1627c:	str	ip, [sp, #4]
   16280:	bl	15ecc <__assert_fail@plt+0x4dd0>
   16284:	sub	sp, fp, #8
   16288:	pop	{r4, r5, fp, pc}
   1628c:	push	{fp, lr}
   16290:	mov	fp, sp
   16294:	sub	sp, sp, #8
   16298:	add	ip, fp, #8
   1629c:	str	ip, [sp, #4]
   162a0:	str	ip, [sp]
   162a4:	bl	1623c <__assert_fail@plt+0x5140>
   162a8:	mov	sp, fp
   162ac:	pop	{fp, pc}
   162b0:	push	{fp, lr}
   162b4:	mov	fp, sp
   162b8:	movw	r0, #37204	; 0x9154
   162bc:	movt	r0, #2
   162c0:	ldr	r1, [r0]
   162c4:	movw	r0, #31334	; 0x7a66
   162c8:	movt	r0, #1
   162cc:	bl	10e8c <fputs_unlocked@plt>
   162d0:	movw	r1, #33891	; 0x8463
   162d4:	movt	r1, #1
   162d8:	mov	r0, #0
   162dc:	mov	r2, #5
   162e0:	bl	10f1c <dcgettext@plt>
   162e4:	mov	r1, r0
   162e8:	movw	r2, #33911	; 0x8477
   162ec:	movt	r2, #1
   162f0:	mov	r0, #1
   162f4:	bl	1103c <__printf_chk@plt>
   162f8:	movw	r1, #33933	; 0x848d
   162fc:	movt	r1, #1
   16300:	mov	r0, #0
   16304:	mov	r2, #5
   16308:	bl	10f1c <dcgettext@plt>
   1630c:	mov	r1, r0
   16310:	movw	r2, #30809	; 0x7859
   16314:	movt	r2, #1
   16318:	movw	r3, #31143	; 0x79a7
   1631c:	movt	r3, #1
   16320:	mov	r0, #1
   16324:	bl	1103c <__printf_chk@plt>
   16328:	movw	r1, #33953	; 0x84a1
   1632c:	movt	r1, #1
   16330:	mov	r0, #0
   16334:	mov	r2, #5
   16338:	bl	10f1c <dcgettext@plt>
   1633c:	mov	r1, r0
   16340:	movw	r2, #33992	; 0x84c8
   16344:	movt	r2, #1
   16348:	mov	r0, #1
   1634c:	pop	{fp, lr}
   16350:	b	1103c <__printf_chk@plt>
   16354:	b	16358 <__assert_fail@plt+0x525c>
   16358:	push	{r4, r5, r6, sl, fp, lr}
   1635c:	add	fp, sp, #16
   16360:	mov	r4, r2
   16364:	mov	r5, r1
   16368:	mov	r6, r0
   1636c:	bl	15e90 <__assert_fail@plt+0x4d94>
   16370:	cmp	r0, #0
   16374:	popne	{r4, r5, r6, sl, fp, pc}
   16378:	cmp	r6, #0
   1637c:	beq	16390 <__assert_fail@plt+0x5294>
   16380:	cmp	r5, #0
   16384:	cmpne	r4, #0
   16388:	bne	16390 <__assert_fail@plt+0x5294>
   1638c:	pop	{r4, r5, r6, sl, fp, pc}
   16390:	bl	1671c <__assert_fail@plt+0x5620>
   16394:	push	{fp, lr}
   16398:	mov	fp, sp
   1639c:	bl	16d54 <__assert_fail@plt+0x5c58>
   163a0:	pop	{fp, lr}
   163a4:	b	163a8 <__assert_fail@plt+0x52ac>
   163a8:	cmp	r0, #0
   163ac:	bxne	lr
   163b0:	push	{fp, lr}
   163b4:	mov	fp, sp
   163b8:	bl	1671c <__assert_fail@plt+0x5620>
   163bc:	push	{fp, lr}
   163c0:	mov	fp, sp
   163c4:	bl	14250 <__assert_fail@plt+0x3154>
   163c8:	pop	{fp, lr}
   163cc:	b	163a8 <__assert_fail@plt+0x52ac>
   163d0:	b	16394 <__assert_fail@plt+0x5298>
   163d4:	push	{r4, r5, fp, lr}
   163d8:	add	fp, sp, #8
   163dc:	mov	r4, r1
   163e0:	mov	r5, r0
   163e4:	bl	16d84 <__assert_fail@plt+0x5c88>
   163e8:	cmp	r0, #0
   163ec:	popne	{r4, r5, fp, pc}
   163f0:	cmp	r5, #0
   163f4:	beq	16404 <__assert_fail@plt+0x5308>
   163f8:	cmp	r4, #0
   163fc:	bne	16404 <__assert_fail@plt+0x5308>
   16400:	pop	{r4, r5, fp, pc}
   16404:	bl	1671c <__assert_fail@plt+0x5620>
   16408:	push	{fp, lr}
   1640c:	mov	fp, sp
   16410:	bl	14254 <__assert_fail@plt+0x3158>
   16414:	pop	{fp, lr}
   16418:	b	163a8 <__assert_fail@plt+0x52ac>
   1641c:	push	{fp, lr}
   16420:	mov	fp, sp
   16424:	bl	14264 <__assert_fail@plt+0x3168>
   16428:	pop	{fp, lr}
   1642c:	b	163a8 <__assert_fail@plt+0x52ac>
   16430:	mov	r2, r1
   16434:	mov	r1, r0
   16438:	mov	r0, #0
   1643c:	b	16358 <__assert_fail@plt+0x525c>
   16440:	mov	r2, r1
   16444:	mov	r1, r0
   16448:	mov	r0, #0
   1644c:	b	1641c <__assert_fail@plt+0x5320>
   16450:	mov	r2, #1
   16454:	b	16458 <__assert_fail@plt+0x535c>
   16458:	push	{r4, r5, fp, lr}
   1645c:	add	fp, sp, #8
   16460:	mov	r4, r1
   16464:	ldr	r5, [r1]
   16468:	cmp	r0, #0
   1646c:	beq	16484 <__assert_fail@plt+0x5388>
   16470:	mov	r1, #1
   16474:	add	r1, r1, r5, lsr #1
   16478:	adds	r5, r5, r1
   1647c:	bcc	1649c <__assert_fail@plt+0x53a0>
   16480:	bl	1671c <__assert_fail@plt+0x5620>
   16484:	cmp	r5, #0
   16488:	bne	1649c <__assert_fail@plt+0x53a0>
   1648c:	mov	r1, #64	; 0x40
   16490:	udiv	r5, r1, r2
   16494:	cmp	r2, #64	; 0x40
   16498:	addhi	r5, r5, #1
   1649c:	mov	r1, r5
   164a0:	bl	16358 <__assert_fail@plt+0x525c>
   164a4:	str	r5, [r4]
   164a8:	pop	{r4, r5, fp, pc}
   164ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   164b0:	add	fp, sp, #24
   164b4:	mov	r8, r1
   164b8:	ldr	r6, [r1]
   164bc:	add	r1, r6, r6, asr #1
   164c0:	cmp	r1, r6
   164c4:	mvnvs	r1, #-2147483648	; 0x80000000
   164c8:	cmp	r1, r3
   164cc:	mov	r5, r1
   164d0:	movgt	r5, r3
   164d4:	cmn	r3, #1
   164d8:	movle	r5, r1
   164dc:	ldr	r4, [fp, #8]
   164e0:	cmn	r4, #1
   164e4:	ble	1650c <__assert_fail@plt+0x5410>
   164e8:	cmp	r4, #0
   164ec:	beq	16560 <__assert_fail@plt+0x5464>
   164f0:	cmn	r5, #1
   164f4:	ble	16534 <__assert_fail@plt+0x5438>
   164f8:	mvn	r7, #-2147483648	; 0x80000000
   164fc:	udiv	r1, r7, r4
   16500:	cmp	r1, r5
   16504:	bge	16560 <__assert_fail@plt+0x5464>
   16508:	b	16570 <__assert_fail@plt+0x5474>
   1650c:	cmn	r5, #1
   16510:	ble	16550 <__assert_fail@plt+0x5454>
   16514:	cmn	r4, #1
   16518:	beq	16560 <__assert_fail@plt+0x5464>
   1651c:	mov	r1, #-2147483648	; 0x80000000
   16520:	sdiv	r1, r1, r4
   16524:	mvn	r7, #-2147483648	; 0x80000000
   16528:	cmp	r1, r5
   1652c:	bge	16560 <__assert_fail@plt+0x5464>
   16530:	b	16570 <__assert_fail@plt+0x5474>
   16534:	beq	16560 <__assert_fail@plt+0x5464>
   16538:	mov	r1, #-2147483648	; 0x80000000
   1653c:	sdiv	r1, r1, r5
   16540:	mvn	r7, #-2147483648	; 0x80000000
   16544:	cmp	r1, r4
   16548:	bge	16560 <__assert_fail@plt+0x5464>
   1654c:	b	16570 <__assert_fail@plt+0x5474>
   16550:	mvn	r7, #-2147483648	; 0x80000000
   16554:	sdiv	r1, r7, r4
   16558:	cmp	r5, r1
   1655c:	blt	16570 <__assert_fail@plt+0x5474>
   16560:	mul	r1, r5, r4
   16564:	mov	r7, #64	; 0x40
   16568:	cmp	r1, #63	; 0x3f
   1656c:	bgt	16578 <__assert_fail@plt+0x547c>
   16570:	sdiv	r5, r7, r4
   16574:	mul	r1, r5, r4
   16578:	cmp	r0, #0
   1657c:	moveq	r7, #0
   16580:	streq	r7, [r8]
   16584:	sub	r7, r5, r6
   16588:	cmp	r7, r2
   1658c:	bge	16638 <__assert_fail@plt+0x553c>
   16590:	add	r5, r6, r2
   16594:	mov	r1, #0
   16598:	cmp	r5, r3
   1659c:	mov	r2, #0
   165a0:	movwgt	r2, #1
   165a4:	cmn	r3, #1
   165a8:	movwgt	r1, #1
   165ac:	cmp	r5, r6
   165b0:	bvs	16620 <__assert_fail@plt+0x5524>
   165b4:	ands	r1, r1, r2
   165b8:	bne	16620 <__assert_fail@plt+0x5524>
   165bc:	cmn	r4, #1
   165c0:	ble	165e8 <__assert_fail@plt+0x54ec>
   165c4:	cmp	r4, #0
   165c8:	beq	16634 <__assert_fail@plt+0x5538>
   165cc:	cmn	r5, #1
   165d0:	ble	1660c <__assert_fail@plt+0x5510>
   165d4:	mvn	r1, #-2147483648	; 0x80000000
   165d8:	udiv	r1, r1, r4
   165dc:	cmp	r1, r5
   165e0:	bge	16634 <__assert_fail@plt+0x5538>
   165e4:	b	16620 <__assert_fail@plt+0x5524>
   165e8:	cmn	r5, #1
   165ec:	ble	16624 <__assert_fail@plt+0x5528>
   165f0:	cmn	r4, #1
   165f4:	beq	16634 <__assert_fail@plt+0x5538>
   165f8:	mov	r1, #-2147483648	; 0x80000000
   165fc:	sdiv	r1, r1, r4
   16600:	cmp	r1, r5
   16604:	bge	16634 <__assert_fail@plt+0x5538>
   16608:	b	16620 <__assert_fail@plt+0x5524>
   1660c:	beq	16634 <__assert_fail@plt+0x5538>
   16610:	mov	r1, #-2147483648	; 0x80000000
   16614:	sdiv	r1, r1, r5
   16618:	cmp	r1, r4
   1661c:	bge	16634 <__assert_fail@plt+0x5538>
   16620:	bl	1671c <__assert_fail@plt+0x5620>
   16624:	mvn	r1, #-2147483648	; 0x80000000
   16628:	sdiv	r1, r1, r4
   1662c:	cmp	r5, r1
   16630:	blt	16620 <__assert_fail@plt+0x5524>
   16634:	mul	r1, r5, r4
   16638:	bl	163d4 <__assert_fail@plt+0x52d8>
   1663c:	str	r5, [r8]
   16640:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16644:	mov	r1, #1
   16648:	b	1664c <__assert_fail@plt+0x5550>
   1664c:	push	{fp, lr}
   16650:	mov	fp, sp
   16654:	bl	16d00 <__assert_fail@plt+0x5c04>
   16658:	pop	{fp, lr}
   1665c:	b	163a8 <__assert_fail@plt+0x52ac>
   16660:	mov	r1, #1
   16664:	b	16668 <__assert_fail@plt+0x556c>
   16668:	push	{fp, lr}
   1666c:	mov	fp, sp
   16670:	bl	14260 <__assert_fail@plt+0x3164>
   16674:	pop	{fp, lr}
   16678:	b	163a8 <__assert_fail@plt+0x52ac>
   1667c:	push	{r4, r5, fp, lr}
   16680:	add	fp, sp, #8
   16684:	mov	r4, r1
   16688:	mov	r5, r0
   1668c:	mov	r0, r1
   16690:	bl	16394 <__assert_fail@plt+0x5298>
   16694:	mov	r1, r5
   16698:	mov	r2, r4
   1669c:	pop	{r4, r5, fp, lr}
   166a0:	b	10eec <memcpy@plt>
   166a4:	push	{r4, r5, fp, lr}
   166a8:	add	fp, sp, #8
   166ac:	mov	r4, r1
   166b0:	mov	r5, r0
   166b4:	mov	r0, r1
   166b8:	bl	163bc <__assert_fail@plt+0x52c0>
   166bc:	mov	r1, r5
   166c0:	mov	r2, r4
   166c4:	pop	{r4, r5, fp, lr}
   166c8:	b	10eec <memcpy@plt>
   166cc:	push	{r4, r5, fp, lr}
   166d0:	add	fp, sp, #8
   166d4:	mov	r4, r1
   166d8:	mov	r5, r0
   166dc:	add	r0, r1, #1
   166e0:	bl	163bc <__assert_fail@plt+0x52c0>
   166e4:	mov	r1, #0
   166e8:	strb	r1, [r0, r4]
   166ec:	mov	r1, r5
   166f0:	mov	r2, r4
   166f4:	pop	{r4, r5, fp, lr}
   166f8:	b	10eec <memcpy@plt>
   166fc:	push	{r4, sl, fp, lr}
   16700:	add	fp, sp, #8
   16704:	mov	r4, r0
   16708:	bl	11000 <strlen@plt>
   1670c:	add	r1, r0, #1
   16710:	mov	r0, r4
   16714:	pop	{r4, sl, fp, lr}
   16718:	b	1667c <__assert_fail@plt+0x5580>
   1671c:	push	{fp, lr}
   16720:	mov	fp, sp
   16724:	movw	r0, #37108	; 0x90f4
   16728:	movt	r0, #2
   1672c:	ldr	r4, [r0]
   16730:	movw	r1, #34068	; 0x8514
   16734:	movt	r1, #1
   16738:	mov	r0, #0
   1673c:	mov	r2, #5
   16740:	bl	10f1c <dcgettext@plt>
   16744:	mov	r3, r0
   16748:	movw	r2, #30788	; 0x7844
   1674c:	movt	r2, #1
   16750:	mov	r0, r4
   16754:	mov	r1, #0
   16758:	bl	10f94 <error@plt>
   1675c:	bl	110e4 <abort@plt>
   16760:	bx	lr
   16764:	b	16de0 <__assert_fail@plt+0x5ce4>
   16768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1676c:	add	fp, sp, #28
   16770:	sub	sp, sp, #20
   16774:	cmp	r2, #37	; 0x25
   16778:	bcs	16b90 <__assert_fail@plt+0x5a94>
   1677c:	mov	r9, r3
   16780:	mov	r7, r2
   16784:	mov	r6, r1
   16788:	mov	r4, r0
   1678c:	ldr	sl, [fp, #8]
   16790:	bl	11018 <__errno_location@plt>
   16794:	mov	r5, r0
   16798:	mov	r0, #0
   1679c:	str	r0, [r5]
   167a0:	add	r8, sp, #16
   167a4:	cmp	r6, #0
   167a8:	movne	r8, r6
   167ac:	mov	r0, r4
   167b0:	mov	r1, r8
   167b4:	mov	r2, r7
   167b8:	bl	1106c <strtoimax@plt>
   167bc:	str	r1, [sp, #12]
   167c0:	str	r0, [sp, #8]
   167c4:	ldr	r7, [r8]
   167c8:	cmp	r7, r4
   167cc:	beq	167f8 <__assert_fail@plt+0x56fc>
   167d0:	ldr	r0, [r5]
   167d4:	cmp	r0, #0
   167d8:	beq	16834 <__assert_fail@plt+0x5738>
   167dc:	mov	r5, #4
   167e0:	cmp	r0, #34	; 0x22
   167e4:	bne	16b84 <__assert_fail@plt+0x5a88>
   167e8:	mov	r5, #1
   167ec:	cmp	sl, #0
   167f0:	bne	16840 <__assert_fail@plt+0x5744>
   167f4:	b	16b78 <__assert_fail@plt+0x5a7c>
   167f8:	mov	r5, #4
   167fc:	cmp	sl, #0
   16800:	beq	16b84 <__assert_fail@plt+0x5a88>
   16804:	ldrb	r1, [r7]
   16808:	cmp	r1, #0
   1680c:	beq	16b84 <__assert_fail@plt+0x5a88>
   16810:	mov	r0, sl
   16814:	bl	1100c <strchr@plt>
   16818:	cmp	r0, #0
   1681c:	beq	16b84 <__assert_fail@plt+0x5a88>
   16820:	mov	r5, #0
   16824:	str	r5, [sp, #12]
   16828:	mov	r0, #1
   1682c:	str	r0, [sp, #8]
   16830:	b	16840 <__assert_fail@plt+0x5744>
   16834:	mov	r5, r0
   16838:	cmp	sl, #0
   1683c:	beq	16b78 <__assert_fail@plt+0x5a7c>
   16840:	ldrb	r4, [r7]
   16844:	cmp	r4, #0
   16848:	beq	16b78 <__assert_fail@plt+0x5a7c>
   1684c:	mov	r0, sl
   16850:	mov	r1, r4
   16854:	bl	1100c <strchr@plt>
   16858:	cmp	r0, #0
   1685c:	beq	16a94 <__assert_fail@plt+0x5998>
   16860:	sub	r0, r4, #69	; 0x45
   16864:	mov	r1, #1
   16868:	str	r1, [sp, #4]
   1686c:	mov	r6, #1024	; 0x400
   16870:	cmp	r0, #47	; 0x2f
   16874:	bhi	16990 <__assert_fail@plt+0x5894>
   16878:	add	r1, pc, #0
   1687c:	ldr	pc, [r1, r0, lsl #2]
   16880:	andeq	r6, r1, r0, asr #18
   16884:	muleq	r1, r0, r9
   16888:	andeq	r6, r1, r0, asr #18
   1688c:	muleq	r1, r0, r9
   16890:	muleq	r1, r0, r9
   16894:	muleq	r1, r0, r9
   16898:	andeq	r6, r1, r0, asr #18
   1689c:	muleq	r1, r0, r9
   168a0:	andeq	r6, r1, r0, asr #18
   168a4:	muleq	r1, r0, r9
   168a8:	muleq	r1, r0, r9
   168ac:	andeq	r6, r1, r0, asr #18
   168b0:	muleq	r1, r0, r9
   168b4:	muleq	r1, r0, r9
   168b8:	muleq	r1, r0, r9
   168bc:	andeq	r6, r1, r0, asr #18
   168c0:	muleq	r1, r0, r9
   168c4:	muleq	r1, r0, r9
   168c8:	muleq	r1, r0, r9
   168cc:	muleq	r1, r0, r9
   168d0:	andeq	r6, r1, r0, asr #18
   168d4:	andeq	r6, r1, r0, asr #18
   168d8:	muleq	r1, r0, r9
   168dc:	muleq	r1, r0, r9
   168e0:	muleq	r1, r0, r9
   168e4:	muleq	r1, r0, r9
   168e8:	muleq	r1, r0, r9
   168ec:	muleq	r1, r0, r9
   168f0:	muleq	r1, r0, r9
   168f4:	muleq	r1, r0, r9
   168f8:	muleq	r1, r0, r9
   168fc:	muleq	r1, r0, r9
   16900:	muleq	r1, r0, r9
   16904:	muleq	r1, r0, r9
   16908:	andeq	r6, r1, r0, asr #18
   1690c:	muleq	r1, r0, r9
   16910:	muleq	r1, r0, r9
   16914:	muleq	r1, r0, r9
   16918:	andeq	r6, r1, r0, asr #18
   1691c:	muleq	r1, r0, r9
   16920:	andeq	r6, r1, r0, asr #18
   16924:	muleq	r1, r0, r9
   16928:	muleq	r1, r0, r9
   1692c:	muleq	r1, r0, r9
   16930:	muleq	r1, r0, r9
   16934:	muleq	r1, r0, r9
   16938:	muleq	r1, r0, r9
   1693c:	andeq	r6, r1, r0, asr #18
   16940:	mov	r0, sl
   16944:	mov	r1, #48	; 0x30
   16948:	bl	1100c <strchr@plt>
   1694c:	cmp	r0, #0
   16950:	beq	16990 <__assert_fail@plt+0x5894>
   16954:	ldrb	r0, [r7, #1]
   16958:	cmp	r0, #66	; 0x42
   1695c:	cmpne	r0, #68	; 0x44
   16960:	bne	16974 <__assert_fail@plt+0x5878>
   16964:	mov	r0, #2
   16968:	str	r0, [sp, #4]
   1696c:	mov	r6, #1000	; 0x3e8
   16970:	b	16990 <__assert_fail@plt+0x5894>
   16974:	cmp	r0, #105	; 0x69
   16978:	bne	16990 <__assert_fail@plt+0x5894>
   1697c:	ldrb	r0, [r7, #2]
   16980:	mov	r1, #1
   16984:	cmp	r0, #66	; 0x42
   16988:	movweq	r1, #3
   1698c:	str	r1, [sp, #4]
   16990:	sub	r1, r4, #66	; 0x42
   16994:	cmp	r1, #53	; 0x35
   16998:	bhi	16a94 <__assert_fail@plt+0x5998>
   1699c:	mov	r0, #0
   169a0:	add	r2, pc, #0
   169a4:	ldr	pc, [r2, r1, lsl #2]
   169a8:	strdeq	r6, [r1], -r8
   169ac:	muleq	r1, r4, sl
   169b0:	muleq	r1, r4, sl
   169b4:	andeq	r6, r1, r4, lsl #22
   169b8:	muleq	r1, r4, sl
   169bc:	andeq	r6, r1, r0, lsl #21
   169c0:	muleq	r1, r4, sl
   169c4:	muleq	r1, r4, sl
   169c8:	muleq	r1, r4, sl
   169cc:	andeq	r6, r1, r8, lsr #21
   169d0:	muleq	r1, r4, sl
   169d4:			; <UNDEFINED> instruction: 0x00016abc
   169d8:	muleq	r1, r4, sl
   169dc:	muleq	r1, r4, sl
   169e0:	andeq	r6, r1, r8, lsl fp
   169e4:	muleq	r1, r4, sl
   169e8:	muleq	r1, r4, sl
   169ec:	muleq	r1, r4, sl
   169f0:	ldrdeq	r6, [r1], -r0
   169f4:	muleq	r1, r4, sl
   169f8:	muleq	r1, r4, sl
   169fc:	muleq	r1, r4, sl
   16a00:	muleq	r1, r4, sl
   16a04:	andeq	r6, r1, ip, lsr #22
   16a08:	andeq	r6, r1, r4, ror #21
   16a0c:	muleq	r1, r4, sl
   16a10:	muleq	r1, r4, sl
   16a14:	muleq	r1, r4, sl
   16a18:	muleq	r1, r4, sl
   16a1c:	muleq	r1, r4, sl
   16a20:	muleq	r1, r4, sl
   16a24:	muleq	r1, r4, sl
   16a28:	andeq	r6, r1, r0, asr #22
   16a2c:	andeq	r6, r1, r8, asr fp
   16a30:	muleq	r1, r4, sl
   16a34:	muleq	r1, r4, sl
   16a38:	muleq	r1, r4, sl
   16a3c:	andeq	r6, r1, r0, lsl #21
   16a40:	muleq	r1, r4, sl
   16a44:	muleq	r1, r4, sl
   16a48:	muleq	r1, r4, sl
   16a4c:	andeq	r6, r1, r8, lsr #21
   16a50:	muleq	r1, r4, sl
   16a54:			; <UNDEFINED> instruction: 0x00016abc
   16a58:	muleq	r1, r4, sl
   16a5c:	muleq	r1, r4, sl
   16a60:	muleq	r1, r4, sl
   16a64:	muleq	r1, r4, sl
   16a68:	muleq	r1, r4, sl
   16a6c:	muleq	r1, r4, sl
   16a70:	ldrdeq	r6, [r1], -r0
   16a74:	muleq	r1, r4, sl
   16a78:	muleq	r1, r4, sl
   16a7c:	andeq	r6, r1, ip, asr #22
   16a80:	add	r0, sp, #8
   16a84:	mov	r1, r6
   16a88:	mov	r2, #3
   16a8c:	bl	16cb4 <__assert_fail@plt+0x5bb8>
   16a90:	b	16b58 <__assert_fail@plt+0x5a5c>
   16a94:	ldr	r0, [sp, #8]
   16a98:	ldr	r1, [sp, #12]
   16a9c:	strd	r0, [r9]
   16aa0:	orr	r5, r5, #2
   16aa4:	b	16b84 <__assert_fail@plt+0x5a88>
   16aa8:	add	r0, sp, #8
   16aac:	mov	r1, r6
   16ab0:	mov	r2, #1
   16ab4:	bl	16cb4 <__assert_fail@plt+0x5bb8>
   16ab8:	b	16b58 <__assert_fail@plt+0x5a5c>
   16abc:	add	r0, sp, #8
   16ac0:	mov	r1, r6
   16ac4:	mov	r2, #2
   16ac8:	bl	16cb4 <__assert_fail@plt+0x5bb8>
   16acc:	b	16b58 <__assert_fail@plt+0x5a5c>
   16ad0:	add	r0, sp, #8
   16ad4:	mov	r1, r6
   16ad8:	mov	r2, #4
   16adc:	bl	16cb4 <__assert_fail@plt+0x5bb8>
   16ae0:	b	16b58 <__assert_fail@plt+0x5a5c>
   16ae4:	add	r0, sp, #8
   16ae8:	mov	r1, r6
   16aec:	mov	r2, #7
   16af0:	bl	16cb4 <__assert_fail@plt+0x5bb8>
   16af4:	b	16b58 <__assert_fail@plt+0x5a5c>
   16af8:	add	r0, sp, #8
   16afc:	mov	r1, #1024	; 0x400
   16b00:	b	16b54 <__assert_fail@plt+0x5a58>
   16b04:	add	r0, sp, #8
   16b08:	mov	r1, r6
   16b0c:	mov	r2, #6
   16b10:	bl	16cb4 <__assert_fail@plt+0x5bb8>
   16b14:	b	16b58 <__assert_fail@plt+0x5a5c>
   16b18:	add	r0, sp, #8
   16b1c:	mov	r1, r6
   16b20:	mov	r2, #5
   16b24:	bl	16cb4 <__assert_fail@plt+0x5bb8>
   16b28:	b	16b58 <__assert_fail@plt+0x5a5c>
   16b2c:	add	r0, sp, #8
   16b30:	mov	r1, r6
   16b34:	mov	r2, #8
   16b38:	bl	16cb4 <__assert_fail@plt+0x5bb8>
   16b3c:	b	16b58 <__assert_fail@plt+0x5a5c>
   16b40:	add	r0, sp, #8
   16b44:	mov	r1, #512	; 0x200
   16b48:	b	16b54 <__assert_fail@plt+0x5a58>
   16b4c:	add	r0, sp, #8
   16b50:	mov	r1, #2
   16b54:	bl	16bb0 <__assert_fail@plt+0x5ab4>
   16b58:	ldr	r1, [r8]
   16b5c:	ldr	r3, [sp, #4]
   16b60:	add	r2, r1, r3
   16b64:	str	r2, [r8]
   16b68:	ldrb	r1, [r1, r3]
   16b6c:	orr	r5, r0, r5
   16b70:	cmp	r1, #0
   16b74:	orrne	r5, r5, #2
   16b78:	ldr	r0, [sp, #8]
   16b7c:	ldr	r1, [sp, #12]
   16b80:	strd	r0, [r9]
   16b84:	mov	r0, r5
   16b88:	sub	sp, fp, #28
   16b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b90:	movw	r0, #34085	; 0x8525
   16b94:	movt	r0, #1
   16b98:	movw	r1, #34123	; 0x854b
   16b9c:	movt	r1, #1
   16ba0:	movw	r3, #34139	; 0x855b
   16ba4:	movt	r3, #1
   16ba8:	mov	r2, #85	; 0x55
   16bac:	bl	110fc <__assert_fail@plt>
   16bb0:	push	{r4, r5, r6, r7, fp, lr}
   16bb4:	add	fp, sp, #16
   16bb8:	mov	r5, r1
   16bbc:	mov	r4, r0
   16bc0:	cmn	r1, #1
   16bc4:	ble	16bec <__assert_fail@plt+0x5af0>
   16bc8:	cmp	r5, #0
   16bcc:	beq	16c50 <__assert_fail@plt+0x5b54>
   16bd0:	ldrd	r6, [r4]
   16bd4:	cmn	r7, #1
   16bd8:	ble	16c24 <__assert_fail@plt+0x5b28>
   16bdc:	asr	r3, r5, #31
   16be0:	mvn	r0, #0
   16be4:	mvn	r1, #-2147483648	; 0x80000000
   16be8:	b	16c0c <__assert_fail@plt+0x5b10>
   16bec:	ldrd	r6, [r4]
   16bf0:	cmn	r7, #1
   16bf4:	ble	16c6c <__assert_fail@plt+0x5b70>
   16bf8:	cmn	r5, #1
   16bfc:	beq	16c50 <__assert_fail@plt+0x5b54>
   16c00:	asr	r3, r5, #31
   16c04:	mov	r0, #0
   16c08:	mov	r1, #-2147483648	; 0x80000000
   16c0c:	mov	r2, r5
   16c10:	bl	17018 <__assert_fail@plt+0x5f1c>
   16c14:	subs	r0, r0, r6
   16c18:	sbcs	r0, r1, r7
   16c1c:	bge	16c50 <__assert_fail@plt+0x5b54>
   16c20:	b	16c8c <__assert_fail@plt+0x5b90>
   16c24:	and	r0, r6, r7
   16c28:	cmn	r0, #1
   16c2c:	beq	16c50 <__assert_fail@plt+0x5b54>
   16c30:	mov	r0, #0
   16c34:	mov	r1, #-2147483648	; 0x80000000
   16c38:	mov	r2, r6
   16c3c:	mov	r3, r7
   16c40:	bl	17018 <__assert_fail@plt+0x5f1c>
   16c44:	subs	r0, r0, r5
   16c48:	sbcs	r0, r1, r5, asr #31
   16c4c:	blt	16c8c <__assert_fail@plt+0x5b90>
   16c50:	ldrd	r0, [r4]
   16c54:	umull	r2, r3, r0, r5
   16c58:	asr	r7, r5, #31
   16c5c:	mla	r0, r0, r7, r3
   16c60:	mla	r1, r1, r5, r0
   16c64:	mov	r0, #0
   16c68:	b	16ca8 <__assert_fail@plt+0x5bac>
   16c6c:	asr	r3, r5, #31
   16c70:	mvn	r0, #0
   16c74:	mvn	r1, #-2147483648	; 0x80000000
   16c78:	mov	r2, r5
   16c7c:	bl	17018 <__assert_fail@plt+0x5f1c>
   16c80:	subs	r0, r6, r0
   16c84:	sbcs	r0, r7, r1
   16c88:	bge	16c50 <__assert_fail@plt+0x5b54>
   16c8c:	ldr	r0, [r4, #4]
   16c90:	mvn	r1, #-2147483648	; 0x80000000
   16c94:	cmp	r0, #0
   16c98:	movmi	r1, #-2147483648	; 0x80000000
   16c9c:	mvn	r2, #0
   16ca0:	movwmi	r2, #0
   16ca4:	mov	r0, #1
   16ca8:	str	r2, [r4]
   16cac:	str	r1, [r4, #4]
   16cb0:	pop	{r4, r5, r6, r7, fp, pc}
   16cb4:	push	{r4, r5, r6, r7, fp, lr}
   16cb8:	add	fp, sp, #16
   16cbc:	cmp	r2, #0
   16cc0:	beq	16cf4 <__assert_fail@plt+0x5bf8>
   16cc4:	mov	r4, r2
   16cc8:	mov	r5, r1
   16ccc:	mov	r7, r0
   16cd0:	mov	r6, #0
   16cd4:	mov	r0, r7
   16cd8:	mov	r1, r5
   16cdc:	bl	16bb0 <__assert_fail@plt+0x5ab4>
   16ce0:	orr	r6, r0, r6
   16ce4:	subs	r4, r4, #1
   16ce8:	bne	16cd4 <__assert_fail@plt+0x5bd8>
   16cec:	mov	r0, r6
   16cf0:	pop	{r4, r5, r6, r7, fp, pc}
   16cf4:	mov	r6, #0
   16cf8:	mov	r0, r6
   16cfc:	pop	{r4, r5, r6, r7, fp, pc}
   16d00:	clz	r2, r1
   16d04:	lsr	r2, r2, #5
   16d08:	clz	r3, r0
   16d0c:	lsr	r3, r3, #5
   16d10:	orrs	r2, r3, r2
   16d14:	movwne	r1, #1
   16d18:	movwne	r0, #1
   16d1c:	cmp	r1, #0
   16d20:	beq	16d50 <__assert_fail@plt+0x5c54>
   16d24:	mvn	r2, #-2147483648	; 0x80000000
   16d28:	udiv	r2, r2, r1
   16d2c:	cmp	r2, r0
   16d30:	bcs	16d50 <__assert_fail@plt+0x5c54>
   16d34:	push	{fp, lr}
   16d38:	mov	fp, sp
   16d3c:	bl	11018 <__errno_location@plt>
   16d40:	mov	r1, #12
   16d44:	str	r1, [r0]
   16d48:	mov	r0, #0
   16d4c:	pop	{fp, pc}
   16d50:	b	10e80 <calloc@plt>
   16d54:	cmp	r0, #0
   16d58:	movweq	r0, #1
   16d5c:	cmn	r0, #1
   16d60:	ble	16d68 <__assert_fail@plt+0x5c6c>
   16d64:	b	10fa0 <malloc@plt>
   16d68:	push	{fp, lr}
   16d6c:	mov	fp, sp
   16d70:	bl	11018 <__errno_location@plt>
   16d74:	mov	r1, #12
   16d78:	str	r1, [r0]
   16d7c:	mov	r0, #0
   16d80:	pop	{fp, pc}
   16d84:	push	{fp, lr}
   16d88:	mov	fp, sp
   16d8c:	cmp	r0, #0
   16d90:	beq	16dac <__assert_fail@plt+0x5cb0>
   16d94:	cmp	r1, #0
   16d98:	beq	16db8 <__assert_fail@plt+0x5cbc>
   16d9c:	cmn	r1, #1
   16da0:	ble	16dc4 <__assert_fail@plt+0x5cc8>
   16da4:	pop	{fp, lr}
   16da8:	b	10f28 <realloc@plt>
   16dac:	mov	r0, r1
   16db0:	pop	{fp, lr}
   16db4:	b	16d54 <__assert_fail@plt+0x5c58>
   16db8:	bl	14164 <__assert_fail@plt+0x3068>
   16dbc:	mov	r0, #0
   16dc0:	pop	{fp, pc}
   16dc4:	bl	11018 <__errno_location@plt>
   16dc8:	mov	r1, #12
   16dcc:	str	r1, [r0]
   16dd0:	mov	r0, #0
   16dd4:	pop	{fp, pc}
   16dd8:	mov	r0, #0
   16ddc:	bx	lr
   16de0:	mov	r0, #0
   16de4:	bx	lr
   16de8:	push	{r4, r5, r6, sl, fp, lr}
   16dec:	add	fp, sp, #16
   16df0:	mov	r4, r0
   16df4:	bl	10f70 <__fpending@plt>
   16df8:	mov	r5, r0
   16dfc:	mov	r0, r4
   16e00:	bl	10f7c <ferror_unlocked@plt>
   16e04:	mov	r6, r0
   16e08:	mov	r0, r4
   16e0c:	bl	1405c <__assert_fail@plt+0x2f60>
   16e10:	cmp	r6, #0
   16e14:	beq	16e38 <__assert_fail@plt+0x5d3c>
   16e18:	mvn	r4, #0
   16e1c:	cmp	r0, #0
   16e20:	bne	16e64 <__assert_fail@plt+0x5d68>
   16e24:	bl	11018 <__errno_location@plt>
   16e28:	mov	r1, #0
   16e2c:	str	r1, [r0]
   16e30:	mov	r0, r4
   16e34:	pop	{r4, r5, r6, sl, fp, pc}
   16e38:	cmp	r0, #0
   16e3c:	mov	r4, r0
   16e40:	mvnne	r4, #0
   16e44:	cmp	r5, #0
   16e48:	bne	16e64 <__assert_fail@plt+0x5d68>
   16e4c:	cmp	r0, #0
   16e50:	beq	16e64 <__assert_fail@plt+0x5d68>
   16e54:	bl	11018 <__errno_location@plt>
   16e58:	ldr	r0, [r0]
   16e5c:	subs	r4, r0, #9
   16e60:	mvnne	r4, #0
   16e64:	mov	r0, r4
   16e68:	pop	{r4, r5, r6, sl, fp, pc}
   16e6c:	push	{fp, lr}
   16e70:	mov	fp, sp
   16e74:	mov	r0, #14
   16e78:	bl	110a8 <nl_langinfo@plt>
   16e7c:	movw	r1, #31335	; 0x7a67
   16e80:	movt	r1, #1
   16e84:	cmp	r0, #0
   16e88:	movne	r1, r0
   16e8c:	ldrb	r2, [r1]
   16e90:	movw	r0, #34217	; 0x85a9
   16e94:	movt	r0, #1
   16e98:	cmp	r2, #0
   16e9c:	movne	r0, r1
   16ea0:	pop	{fp, pc}
   16ea4:	push	{r4, r5, r6, r7, fp, lr}
   16ea8:	add	fp, sp, #16
   16eac:	sub	sp, sp, #8
   16eb0:	mov	r7, r2
   16eb4:	mov	r4, r1
   16eb8:	add	r5, sp, #4
   16ebc:	cmp	r0, #0
   16ec0:	movne	r5, r0
   16ec4:	mov	r0, r5
   16ec8:	bl	10f88 <mbrtowc@plt>
   16ecc:	mov	r6, r0
   16ed0:	cmp	r7, #0
   16ed4:	beq	16efc <__assert_fail@plt+0x5e00>
   16ed8:	cmn	r6, #2
   16edc:	bcc	16efc <__assert_fail@plt+0x5e00>
   16ee0:	mov	r0, #0
   16ee4:	bl	16f08 <__assert_fail@plt+0x5e0c>
   16ee8:	cmp	r0, #0
   16eec:	bne	16efc <__assert_fail@plt+0x5e00>
   16ef0:	ldrb	r0, [r4]
   16ef4:	str	r0, [r5]
   16ef8:	mov	r6, #1
   16efc:	mov	r0, r6
   16f00:	sub	sp, fp, #16
   16f04:	pop	{r4, r5, r6, r7, fp, pc}
   16f08:	push	{r4, sl, fp, lr}
   16f0c:	add	fp, sp, #8
   16f10:	sub	sp, sp, #264	; 0x108
   16f14:	add	r1, sp, #7
   16f18:	movw	r2, #257	; 0x101
   16f1c:	bl	16f74 <__assert_fail@plt+0x5e78>
   16f20:	mov	r4, #0
   16f24:	cmp	r0, #0
   16f28:	bne	16f68 <__assert_fail@plt+0x5e6c>
   16f2c:	add	r0, sp, #7
   16f30:	movw	r1, #34223	; 0x85af
   16f34:	movt	r1, #1
   16f38:	mov	r2, #2
   16f3c:	bl	10ff4 <bcmp@plt>
   16f40:	cmp	r0, #0
   16f44:	beq	16f68 <__assert_fail@plt+0x5e6c>
   16f48:	add	r0, sp, #7
   16f4c:	movw	r1, #34225	; 0x85b1
   16f50:	movt	r1, #1
   16f54:	mov	r2, #6
   16f58:	bl	10ff4 <bcmp@plt>
   16f5c:	mov	r4, r0
   16f60:	cmp	r0, #0
   16f64:	movwne	r4, #1
   16f68:	mov	r0, r4
   16f6c:	sub	sp, fp, #8
   16f70:	pop	{r4, sl, fp, pc}
   16f74:	b	16f78 <__assert_fail@plt+0x5e7c>
   16f78:	push	{r4, r5, r6, r7, fp, lr}
   16f7c:	add	fp, sp, #16
   16f80:	mov	r6, r2
   16f84:	mov	r4, r1
   16f88:	bl	17010 <__assert_fail@plt+0x5f14>
   16f8c:	cmp	r0, #0
   16f90:	beq	16fc0 <__assert_fail@plt+0x5ec4>
   16f94:	mov	r7, r0
   16f98:	bl	11000 <strlen@plt>
   16f9c:	cmp	r0, r6
   16fa0:	bcs	16fdc <__assert_fail@plt+0x5ee0>
   16fa4:	add	r2, r0, #1
   16fa8:	mov	r0, r4
   16fac:	mov	r1, r7
   16fb0:	bl	10eec <memcpy@plt>
   16fb4:	mov	r5, #0
   16fb8:	mov	r0, r5
   16fbc:	pop	{r4, r5, r6, r7, fp, pc}
   16fc0:	mov	r5, #22
   16fc4:	cmp	r6, #0
   16fc8:	beq	17004 <__assert_fail@plt+0x5f08>
   16fcc:	mov	r0, #0
   16fd0:	strb	r0, [r4]
   16fd4:	mov	r0, r5
   16fd8:	pop	{r4, r5, r6, r7, fp, pc}
   16fdc:	mov	r5, #34	; 0x22
   16fe0:	cmp	r6, #0
   16fe4:	beq	17004 <__assert_fail@plt+0x5f08>
   16fe8:	sub	r6, r6, #1
   16fec:	mov	r0, r4
   16ff0:	mov	r1, r7
   16ff4:	mov	r2, r6
   16ff8:	bl	10eec <memcpy@plt>
   16ffc:	mov	r0, #0
   17000:	strb	r0, [r4, r6]
   17004:	mov	r0, r5
   17008:	pop	{r4, r5, r6, r7, fp, pc}
   1700c:	b	17010 <__assert_fail@plt+0x5f14>
   17010:	mov	r1, #0
   17014:	b	11090 <setlocale@plt>
   17018:	cmp	r3, #0
   1701c:	cmpeq	r2, #0
   17020:	bne	17044 <__assert_fail@plt+0x5f48>
   17024:	cmp	r1, #0
   17028:	movlt	r1, #-2147483648	; 0x80000000
   1702c:	movlt	r0, #0
   17030:	blt	17040 <__assert_fail@plt+0x5f44>
   17034:	cmpeq	r0, #0
   17038:	mvnne	r1, #-2147483648	; 0x80000000
   1703c:	mvnne	r0, #0
   17040:	b	170ec <__assert_fail@plt+0x5ff0>
   17044:	sub	sp, sp, #8
   17048:	push	{sp, lr}
   1704c:	cmp	r1, #0
   17050:	blt	17070 <__assert_fail@plt+0x5f74>
   17054:	cmp	r3, #0
   17058:	blt	170a4 <__assert_fail@plt+0x5fa8>
   1705c:	bl	170fc <__assert_fail@plt+0x6000>
   17060:	ldr	lr, [sp, #4]
   17064:	add	sp, sp, #8
   17068:	pop	{r2, r3}
   1706c:	bx	lr
   17070:	rsbs	r0, r0, #0
   17074:	sbc	r1, r1, r1, lsl #1
   17078:	cmp	r3, #0
   1707c:	blt	170c8 <__assert_fail@plt+0x5fcc>
   17080:	bl	170fc <__assert_fail@plt+0x6000>
   17084:	ldr	lr, [sp, #4]
   17088:	add	sp, sp, #8
   1708c:	pop	{r2, r3}
   17090:	rsbs	r0, r0, #0
   17094:	sbc	r1, r1, r1, lsl #1
   17098:	rsbs	r2, r2, #0
   1709c:	sbc	r3, r3, r3, lsl #1
   170a0:	bx	lr
   170a4:	rsbs	r2, r2, #0
   170a8:	sbc	r3, r3, r3, lsl #1
   170ac:	bl	170fc <__assert_fail@plt+0x6000>
   170b0:	ldr	lr, [sp, #4]
   170b4:	add	sp, sp, #8
   170b8:	pop	{r2, r3}
   170bc:	rsbs	r0, r0, #0
   170c0:	sbc	r1, r1, r1, lsl #1
   170c4:	bx	lr
   170c8:	rsbs	r2, r2, #0
   170cc:	sbc	r3, r3, r3, lsl #1
   170d0:	bl	170fc <__assert_fail@plt+0x6000>
   170d4:	ldr	lr, [sp, #4]
   170d8:	add	sp, sp, #8
   170dc:	pop	{r2, r3}
   170e0:	rsbs	r2, r2, #0
   170e4:	sbc	r3, r3, r3, lsl #1
   170e8:	bx	lr
   170ec:	push	{r1, lr}
   170f0:	mov	r0, #8
   170f4:	bl	10e98 <raise@plt>
   170f8:	pop	{r1, pc}
   170fc:	cmp	r1, r3
   17100:	cmpeq	r0, r2
   17104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17108:	mov	r4, r0
   1710c:	movcc	r0, #0
   17110:	mov	r5, r1
   17114:	ldr	lr, [sp, #36]	; 0x24
   17118:	movcc	r1, r0
   1711c:	bcc	17218 <__assert_fail@plt+0x611c>
   17120:	cmp	r3, #0
   17124:	clzeq	ip, r2
   17128:	clzne	ip, r3
   1712c:	addeq	ip, ip, #32
   17130:	cmp	r5, #0
   17134:	clzeq	r1, r4
   17138:	addeq	r1, r1, #32
   1713c:	clzne	r1, r5
   17140:	sub	ip, ip, r1
   17144:	sub	sl, ip, #32
   17148:	lsl	r9, r3, ip
   1714c:	rsb	fp, ip, #32
   17150:	orr	r9, r9, r2, lsl sl
   17154:	orr	r9, r9, r2, lsr fp
   17158:	lsl	r8, r2, ip
   1715c:	cmp	r5, r9
   17160:	cmpeq	r4, r8
   17164:	movcc	r0, #0
   17168:	movcc	r1, r0
   1716c:	bcc	17188 <__assert_fail@plt+0x608c>
   17170:	mov	r0, #1
   17174:	subs	r4, r4, r8
   17178:	lsl	r1, r0, sl
   1717c:	orr	r1, r1, r0, lsr fp
   17180:	lsl	r0, r0, ip
   17184:	sbc	r5, r5, r9
   17188:	cmp	ip, #0
   1718c:	beq	17218 <__assert_fail@plt+0x611c>
   17190:	lsr	r6, r8, #1
   17194:	orr	r6, r6, r9, lsl #31
   17198:	lsr	r7, r9, #1
   1719c:	mov	r2, ip
   171a0:	b	171c4 <__assert_fail@plt+0x60c8>
   171a4:	subs	r3, r4, r6
   171a8:	sbc	r8, r5, r7
   171ac:	adds	r3, r3, r3
   171b0:	adc	r8, r8, r8
   171b4:	adds	r4, r3, #1
   171b8:	adc	r5, r8, #0
   171bc:	subs	r2, r2, #1
   171c0:	beq	171e0 <__assert_fail@plt+0x60e4>
   171c4:	cmp	r5, r7
   171c8:	cmpeq	r4, r6
   171cc:	bcs	171a4 <__assert_fail@plt+0x60a8>
   171d0:	adds	r4, r4, r4
   171d4:	adc	r5, r5, r5
   171d8:	subs	r2, r2, #1
   171dc:	bne	171c4 <__assert_fail@plt+0x60c8>
   171e0:	lsr	r3, r4, ip
   171e4:	orr	r3, r3, r5, lsl fp
   171e8:	lsr	r2, r5, ip
   171ec:	orr	r3, r3, r5, lsr sl
   171f0:	adds	r0, r0, r4
   171f4:	mov	r4, r3
   171f8:	lsl	r3, r2, ip
   171fc:	orr	r3, r3, r4, lsl sl
   17200:	lsl	ip, r4, ip
   17204:	orr	r3, r3, r4, lsr fp
   17208:	adc	r1, r1, r5
   1720c:	subs	r0, r0, ip
   17210:	mov	r5, r2
   17214:	sbc	r1, r1, r3
   17218:	cmp	lr, #0
   1721c:	strdne	r4, [lr]
   17220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17224:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17228:	mov	r7, r0
   1722c:	ldr	r6, [pc, #72]	; 1727c <__assert_fail@plt+0x6180>
   17230:	ldr	r5, [pc, #72]	; 17280 <__assert_fail@plt+0x6184>
   17234:	add	r6, pc, r6
   17238:	add	r5, pc, r5
   1723c:	sub	r6, r6, r5
   17240:	mov	r8, r1
   17244:	mov	r9, r2
   17248:	bl	10e60 <calloc@plt-0x20>
   1724c:	asrs	r6, r6, #2
   17250:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17254:	mov	r4, #0
   17258:	add	r4, r4, #1
   1725c:	ldr	r3, [r5], #4
   17260:	mov	r2, r9
   17264:	mov	r1, r8
   17268:	mov	r0, r7
   1726c:	blx	r3
   17270:	cmp	r6, r4
   17274:	bne	17258 <__assert_fail@plt+0x615c>
   17278:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1727c:	ldrdeq	r1, [r1], -r0
   17280:	andeq	r1, r1, r8, asr #25
   17284:	bx	lr
   17288:	ldr	r3, [pc, #12]	; 1729c <__assert_fail@plt+0x61a0>
   1728c:	mov	r1, #0
   17290:	add	r3, pc, r3
   17294:	ldr	r2, [r3]
   17298:	b	11024 <__cxa_atexit@plt>
   1729c:	andeq	r1, r1, r4, asr lr

Disassembly of section .fini:

000172a0 <.fini>:
   172a0:	push	{r3, lr}
   172a4:	pop	{r3, pc}
