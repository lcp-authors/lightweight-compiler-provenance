
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

00011268 <.init>:
   11268:	push	{r3, lr}
   1126c:	bl	11634 <__assert_fail@plt+0x4c>
   11270:	pop	{r3, pc}

Disassembly of section .plt:

00011274 <fstatfs64@plt-0x14>:
   11274:	push	{lr}		; (str lr, [sp, #-4]!)
   11278:	ldr	lr, [pc, #4]	; 11284 <fstatfs64@plt-0x4>
   1127c:	add	lr, pc, lr
   11280:	ldr	pc, [lr, #8]!
   11284:	andeq	sp, r1, ip, ror sp

00011288 <fstatfs64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3452]!	; 0xd7c

00011294 <calloc@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3444]!	; 0xd74

000112a0 <fputs_unlocked@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3436]!	; 0xd6c

000112ac <raise@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3428]!	; 0xd64

000112b8 <strcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3420]!	; 0xd5c

000112c4 <strtol@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3412]!	; 0xd54

000112d0 <pause@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3404]!	; 0xd4c

000112dc <read@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3396]!	; 0xd44

000112e8 <fflush@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3388]!	; 0xd3c

000112f4 <free@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3380]!	; 0xd34

00011300 <nanosleep@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3372]!	; 0xd2c

0001130c <_exit@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3364]!	; 0xd24

00011318 <memcpy@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3356]!	; 0xd1c

00011324 <__strtoull_internal@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3348]!	; 0xd14

00011330 <mbsinit@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3340]!	; 0xd0c

0001133c <fwrite_unlocked@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #118784	; 0x1d000
   11344:	ldr	pc, [ip, #3332]!	; 0xd04

00011348 <dcgettext@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #118784	; 0x1d000
   11350:	ldr	pc, [ip, #3324]!	; 0xcfc

00011354 <realloc@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #118784	; 0x1d000
   1135c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011360 <textdomain@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #118784	; 0x1d000
   11368:	ldr	pc, [ip, #3308]!	; 0xcec

0001136c <rawmemchr@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #118784	; 0x1d000
   11374:	ldr	pc, [ip, #3300]!	; 0xce4

00011378 <fflush_unlocked@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #118784	; 0x1d000
   11380:	ldr	pc, [ip, #3292]!	; 0xcdc

00011384 <iswprint@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #118784	; 0x1d000
   1138c:	ldr	pc, [ip, #3284]!	; 0xcd4

00011390 <poll@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #118784	; 0x1d000
   11398:	ldr	pc, [ip, #3276]!	; 0xccc

0001139c <__fxstat64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #118784	; 0x1d000
   113a4:	ldr	pc, [ip, #3268]!	; 0xcc4

000113a8 <fwrite@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #118784	; 0x1d000
   113b0:	ldr	pc, [ip, #3260]!	; 0xcbc

000113b4 <lseek64@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #118784	; 0x1d000
   113bc:	ldr	pc, [ip, #3252]!	; 0xcb4

000113c0 <__ctype_get_mb_cur_max@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3244]!	; 0xcac

000113cc <__fpending@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3236]!	; 0xca4

000113d8 <mbrtowc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3228]!	; 0xc9c

000113e4 <error@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3220]!	; 0xc94

000113f0 <open64@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #118784	; 0x1d000
   113f8:	ldr	pc, [ip, #3212]!	; 0xc8c

000113fc <getenv@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #118784	; 0x1d000
   11404:	ldr	pc, [ip, #3204]!	; 0xc84

00011408 <malloc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #118784	; 0x1d000
   11410:	ldr	pc, [ip, #3196]!	; 0xc7c

00011414 <__libc_start_main@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #118784	; 0x1d000
   1141c:	ldr	pc, [ip, #3188]!	; 0xc74

00011420 <__freading@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #118784	; 0x1d000
   11428:	ldr	pc, [ip, #3180]!	; 0xc6c

0001142c <__gmon_start__@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #118784	; 0x1d000
   11434:	ldr	pc, [ip, #3172]!	; 0xc64

00011438 <getopt_long@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #118784	; 0x1d000
   11440:	ldr	pc, [ip, #3164]!	; 0xc5c

00011444 <kill@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #118784	; 0x1d000
   1144c:	ldr	pc, [ip, #3156]!	; 0xc54

00011450 <__ctype_b_loc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #118784	; 0x1d000
   11458:	ldr	pc, [ip, #3148]!	; 0xc4c

0001145c <exit@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #118784	; 0x1d000
   11464:	ldr	pc, [ip, #3140]!	; 0xc44

00011468 <bcmp@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #118784	; 0x1d000
   11470:	ldr	pc, [ip, #3132]!	; 0xc3c

00011474 <strlen@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #118784	; 0x1d000
   1147c:	ldr	pc, [ip, #3124]!	; 0xc34

00011480 <inotify_init@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #118784	; 0x1d000
   11488:	ldr	pc, [ip, #3116]!	; 0xc2c

0001148c <strchr@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #118784	; 0x1d000
   11494:	ldr	pc, [ip, #3108]!	; 0xc24

00011498 <memrchr@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #118784	; 0x1d000
   114a0:	ldr	pc, [ip, #3100]!	; 0xc1c

000114a4 <inotify_add_watch@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #118784	; 0x1d000
   114ac:	ldr	pc, [ip, #3092]!	; 0xc14

000114b0 <__errno_location@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #118784	; 0x1d000
   114b8:	ldr	pc, [ip, #3084]!	; 0xc0c

000114bc <__cxa_atexit@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #118784	; 0x1d000
   114c4:	ldr	pc, [ip, #3076]!	; 0xc04

000114c8 <memset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #118784	; 0x1d000
   114d0:	ldr	pc, [ip, #3068]!	; 0xbfc

000114d4 <__printf_chk@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #118784	; 0x1d000
   114dc:	ldr	pc, [ip, #3060]!	; 0xbf4

000114e0 <strtod@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #118784	; 0x1d000
   114e8:	ldr	pc, [ip, #3052]!	; 0xbec

000114ec <fileno@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #118784	; 0x1d000
   114f4:	ldr	pc, [ip, #3044]!	; 0xbe4

000114f8 <__fprintf_chk@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #118784	; 0x1d000
   11500:	ldr	pc, [ip, #3036]!	; 0xbdc

00011504 <memchr@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #118784	; 0x1d000
   1150c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011510 <fclose@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #118784	; 0x1d000
   11518:	ldr	pc, [ip, #3020]!	; 0xbcc

0001151c <fseeko64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #118784	; 0x1d000
   11524:	ldr	pc, [ip, #3012]!	; 0xbc4

00011528 <strtod_l@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #118784	; 0x1d000
   11530:	ldr	pc, [ip, #3004]!	; 0xbbc

00011534 <fcntl64@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #118784	; 0x1d000
   1153c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011540 <__overflow@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #118784	; 0x1d000
   11548:	ldr	pc, [ip, #2988]!	; 0xbac

0001154c <setlocale@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #118784	; 0x1d000
   11554:	ldr	pc, [ip, #2980]!	; 0xba4

00011558 <strrchr@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #118784	; 0x1d000
   11560:	ldr	pc, [ip, #2972]!	; 0xb9c

00011564 <nl_langinfo@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #118784	; 0x1d000
   1156c:	ldr	pc, [ip, #2964]!	; 0xb94

00011570 <newlocale@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #118784	; 0x1d000
   11578:	ldr	pc, [ip, #2956]!	; 0xb8c

0001157c <clearerr_unlocked@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #118784	; 0x1d000
   11584:	ldr	pc, [ip, #2948]!	; 0xb84

00011588 <bindtextdomain@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #118784	; 0x1d000
   11590:	ldr	pc, [ip, #2940]!	; 0xb7c

00011594 <__xstat64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #118784	; 0x1d000
   1159c:	ldr	pc, [ip, #2932]!	; 0xb74

000115a0 <isatty@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #118784	; 0x1d000
   115a8:	ldr	pc, [ip, #2924]!	; 0xb6c

000115ac <inotify_rm_watch@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #118784	; 0x1d000
   115b4:	ldr	pc, [ip, #2916]!	; 0xb64

000115b8 <strncmp@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #118784	; 0x1d000
   115c0:	ldr	pc, [ip, #2908]!	; 0xb5c

000115c4 <abort@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #118784	; 0x1d000
   115cc:	ldr	pc, [ip, #2900]!	; 0xb54

000115d0 <close@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #118784	; 0x1d000
   115d8:	ldr	pc, [ip, #2892]!	; 0xb4c

000115dc <__lxstat64@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #118784	; 0x1d000
   115e4:	ldr	pc, [ip, #2884]!	; 0xb44

000115e8 <__assert_fail@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #118784	; 0x1d000
   115f0:	ldr	pc, [ip, #2876]!	; 0xb3c

Disassembly of section .text:

000115f8 <.text>:
   115f8:	mov	fp, #0
   115fc:	mov	lr, #0
   11600:	pop	{r1}		; (ldr r1, [sp], #4)
   11604:	mov	r2, sp
   11608:	push	{r2}		; (str r2, [sp, #-4]!)
   1160c:	push	{r0}		; (str r0, [sp, #-4]!)
   11610:	ldr	ip, [pc, #16]	; 11628 <__assert_fail@plt+0x40>
   11614:	push	{ip}		; (str ip, [sp, #-4]!)
   11618:	ldr	r0, [pc, #12]	; 1162c <__assert_fail@plt+0x44>
   1161c:	ldr	r3, [pc, #12]	; 11630 <__assert_fail@plt+0x48>
   11620:	bl	11414 <__libc_start_main@plt>
   11624:	bl	115c4 <abort@plt>
   11628:			; <UNDEFINED> instruction: 0x0001cab8
   1162c:	andeq	r1, r1, r8, asr sl
   11630:	andeq	ip, r1, r8, asr sl
   11634:	ldr	r3, [pc, #20]	; 11650 <__assert_fail@plt+0x68>
   11638:	ldr	r2, [pc, #20]	; 11654 <__assert_fail@plt+0x6c>
   1163c:	add	r3, pc, r3
   11640:	ldr	r2, [r3, r2]
   11644:	cmp	r2, #0
   11648:	bxeq	lr
   1164c:	b	1142c <__gmon_start__@plt>
   11650:			; <UNDEFINED> instruction: 0x0001d9bc
   11654:	andeq	r0, r0, r0, lsr r1
   11658:	ldr	r0, [pc, #24]	; 11678 <__assert_fail@plt+0x90>
   1165c:	ldr	r3, [pc, #24]	; 1167c <__assert_fail@plt+0x94>
   11660:	cmp	r3, r0
   11664:	bxeq	lr
   11668:	ldr	r3, [pc, #16]	; 11680 <__assert_fail@plt+0x98>
   1166c:	cmp	r3, #0
   11670:	bxeq	lr
   11674:	bx	r3
   11678:	andeq	pc, r2, r0, lsr #3
   1167c:	andeq	pc, r2, r0, lsr #3
   11680:	andeq	r0, r0, r0
   11684:	ldr	r0, [pc, #36]	; 116b0 <__assert_fail@plt+0xc8>
   11688:	ldr	r1, [pc, #36]	; 116b4 <__assert_fail@plt+0xcc>
   1168c:	sub	r1, r1, r0
   11690:	asr	r1, r1, #2
   11694:	add	r1, r1, r1, lsr #31
   11698:	asrs	r1, r1, #1
   1169c:	bxeq	lr
   116a0:	ldr	r3, [pc, #16]	; 116b8 <__assert_fail@plt+0xd0>
   116a4:	cmp	r3, #0
   116a8:	bxeq	lr
   116ac:	bx	r3
   116b0:	andeq	pc, r2, r0, lsr #3
   116b4:	andeq	pc, r2, r0, lsr #3
   116b8:	andeq	r0, r0, r0
   116bc:	push	{r4, lr}
   116c0:	ldr	r4, [pc, #24]	; 116e0 <__assert_fail@plt+0xf8>
   116c4:	ldrb	r3, [r4]
   116c8:	cmp	r3, #0
   116cc:	popne	{r4, pc}
   116d0:	bl	11658 <__assert_fail@plt+0x70>
   116d4:	mov	r3, #1
   116d8:	strb	r3, [r4]
   116dc:	pop	{r4, pc}
   116e0:			; <UNDEFINED> instruction: 0x0002f1bc
   116e4:	b	11684 <__assert_fail@plt+0x9c>
   116e8:	push	{fp, lr}
   116ec:	mov	fp, sp
   116f0:	sub	sp, sp, #56	; 0x38
   116f4:	mov	r4, r0
   116f8:	cmp	r0, #0
   116fc:	bne	11a14 <__assert_fail@plt+0x42c>
   11700:	movw	r1, #51979	; 0xcb0b
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	11348 <dcgettext@plt>
   11714:	mov	r1, r0
   11718:	movw	r0, #61920	; 0xf1e0
   1171c:	movt	r0, #2
   11720:	ldr	r2, [r0]
   11724:	mov	r0, #1
   11728:	bl	114d4 <__printf_chk@plt>
   1172c:	movw	r1, #52012	; 0xcb2c
   11730:	mov	r0, #0
   11734:	mov	r2, #5
   11738:	movt	r1, #1
   1173c:	bl	11348 <dcgettext@plt>
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	mov	r2, #10
   1174c:	bl	114d4 <__printf_chk@plt>
   11750:	movw	r1, #54625	; 0xd561
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	11348 <dcgettext@plt>
   11764:	movw	r7, #61876	; 0xf1b4
   11768:	movt	r7, #2
   1176c:	ldr	r1, [r7]
   11770:	bl	112a0 <fputs_unlocked@plt>
   11774:	movw	r1, #54681	; 0xd599
   11778:	mov	r0, #0
   1177c:	mov	r2, #5
   11780:	movt	r1, #1
   11784:	bl	11348 <dcgettext@plt>
   11788:	ldr	r1, [r7]
   1178c:	bl	112a0 <fputs_unlocked@plt>
   11790:	movw	r1, #52144	; 0xcbb0
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	movt	r1, #1
   117a0:	bl	11348 <dcgettext@plt>
   117a4:	ldr	r1, [r7]
   117a8:	bl	112a0 <fputs_unlocked@plt>
   117ac:	movw	r1, #52289	; 0xcc41
   117b0:	mov	r0, #0
   117b4:	mov	r2, #5
   117b8:	movt	r1, #1
   117bc:	bl	11348 <dcgettext@plt>
   117c0:	ldr	r1, [r7]
   117c4:	bl	112a0 <fputs_unlocked@plt>
   117c8:	movw	r1, #52523	; 0xcd2b
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #1
   117d8:	bl	11348 <dcgettext@plt>
   117dc:	mov	r1, r0
   117e0:	mov	r0, #1
   117e4:	mov	r2, #10
   117e8:	mov	r3, #5
   117ec:	bl	114d4 <__printf_chk@plt>
   117f0:	movw	r1, #53077	; 0xcf55
   117f4:	mov	r0, #0
   117f8:	mov	r2, #5
   117fc:	movt	r1, #1
   11800:	bl	11348 <dcgettext@plt>
   11804:	ldr	r1, [r7]
   11808:	bl	112a0 <fputs_unlocked@plt>
   1180c:	movw	r1, #53293	; 0xd02d
   11810:	mov	r0, #0
   11814:	mov	r2, #5
   11818:	movt	r1, #1
   1181c:	bl	11348 <dcgettext@plt>
   11820:	ldr	r1, [r7]
   11824:	bl	112a0 <fputs_unlocked@plt>
   11828:	movw	r1, #53624	; 0xd178
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	movt	r1, #1
   11838:	bl	11348 <dcgettext@plt>
   1183c:	ldr	r1, [r7]
   11840:	bl	112a0 <fputs_unlocked@plt>
   11844:	movw	r1, #53687	; 0xd1b7
   11848:	mov	r0, #0
   1184c:	mov	r2, #5
   11850:	movt	r1, #1
   11854:	bl	11348 <dcgettext@plt>
   11858:	ldr	r1, [r7]
   1185c:	bl	112a0 <fputs_unlocked@plt>
   11860:	movw	r1, #53732	; 0xd1e4
   11864:	mov	r0, #0
   11868:	mov	r2, #5
   1186c:	movt	r1, #1
   11870:	bl	11348 <dcgettext@plt>
   11874:	ldr	r1, [r7]
   11878:	bl	112a0 <fputs_unlocked@plt>
   1187c:	movw	r1, #53786	; 0xd21a
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	movt	r1, #1
   1188c:	bl	11348 <dcgettext@plt>
   11890:	ldr	r1, [r7]
   11894:	bl	112a0 <fputs_unlocked@plt>
   11898:	movw	r1, #53999	; 0xd2ef
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	movt	r1, #1
   118a8:	bl	11348 <dcgettext@plt>
   118ac:	ldr	r1, [r7]
   118b0:	bl	112a0 <fputs_unlocked@plt>
   118b4:	movw	r0, #56816	; 0xddf0
   118b8:	mov	r2, #48	; 0x30
   118bc:	mov	r6, sp
   118c0:	movw	r5, #54436	; 0xd4a4
   118c4:	movt	r0, #1
   118c8:	movt	r5, #1
   118cc:	add	r1, r0, #32
   118d0:	add	r3, r0, #16
   118d4:	vld1.64	{d18-d19}, [r0], r2
   118d8:	vld1.64	{d16-d17}, [r1]
   118dc:	vld1.64	{d20-d21}, [r3]
   118e0:	vldr	d22, [r0]
   118e4:	add	r1, r6, #32
   118e8:	add	r0, r6, #16
   118ec:	vst1.64	{d16-d17}, [r1]
   118f0:	movw	r1, #54756	; 0xd5e4
   118f4:	vst1.64	{d20-d21}, [r0]
   118f8:	mov	r0, r6
   118fc:	movt	r1, #1
   11900:	vst1.64	{d18-d19}, [r0], r2
   11904:	vstr	d22, [r0]
   11908:	mov	r0, r5
   1190c:	bl	112b8 <strcmp@plt>
   11910:	cmp	r0, #0
   11914:	ldrne	r1, [r6, #8]!
   11918:	cmpne	r1, #0
   1191c:	bne	11908 <__assert_fail@plt+0x320>
   11920:	movw	r1, #54851	; 0xd643
   11924:	ldr	r6, [r6, #4]
   11928:	mov	r0, #0
   1192c:	mov	r2, #5
   11930:	movt	r1, #1
   11934:	bl	11348 <dcgettext@plt>
   11938:	movw	r2, #54874	; 0xd65a
   1193c:	movw	r3, #54888	; 0xd668
   11940:	mov	r1, r0
   11944:	mov	r0, #1
   11948:	movt	r2, #1
   1194c:	movt	r3, #1
   11950:	bl	114d4 <__printf_chk@plt>
   11954:	cmp	r6, #0
   11958:	mov	r0, #5
   1195c:	mov	r1, #0
   11960:	moveq	r6, r5
   11964:	bl	1154c <setlocale@plt>
   11968:	cmp	r0, #0
   1196c:	beq	119a4 <__assert_fail@plt+0x3bc>
   11970:	movw	r1, #54928	; 0xd690
   11974:	mov	r2, #3
   11978:	movt	r1, #1
   1197c:	bl	115b8 <strncmp@plt>
   11980:	cmp	r0, #0
   11984:	beq	119a4 <__assert_fail@plt+0x3bc>
   11988:	movw	r1, #54932	; 0xd694
   1198c:	mov	r0, #0
   11990:	mov	r2, #5
   11994:	movt	r1, #1
   11998:	bl	11348 <dcgettext@plt>
   1199c:	ldr	r1, [r7]
   119a0:	bl	112a0 <fputs_unlocked@plt>
   119a4:	movw	r1, #55003	; 0xd6db
   119a8:	mov	r0, #0
   119ac:	mov	r2, #5
   119b0:	movt	r1, #1
   119b4:	bl	11348 <dcgettext@plt>
   119b8:	movw	r2, #54888	; 0xd668
   119bc:	mov	r1, r0
   119c0:	mov	r0, #1
   119c4:	mov	r3, r5
   119c8:	movt	r2, #1
   119cc:	bl	114d4 <__printf_chk@plt>
   119d0:	movw	r1, #55030	; 0xd6f6
   119d4:	mov	r0, #0
   119d8:	mov	r2, #5
   119dc:	movt	r1, #1
   119e0:	bl	11348 <dcgettext@plt>
   119e4:	mov	r1, r0
   119e8:	movw	r0, #54784	; 0xd600
   119ec:	movw	r3, #53998	; 0xd2ee
   119f0:	cmp	r6, r5
   119f4:	mov	r2, r6
   119f8:	movt	r0, #1
   119fc:	movt	r3, #1
   11a00:	moveq	r3, r0
   11a04:	mov	r0, #1
   11a08:	bl	114d4 <__printf_chk@plt>
   11a0c:	mov	r0, r4
   11a10:	bl	1145c <exit@plt>
   11a14:	movw	r0, #61872	; 0xf1b0
   11a18:	movw	r1, #51940	; 0xcae4
   11a1c:	mov	r2, #5
   11a20:	movt	r0, #2
   11a24:	movt	r1, #1
   11a28:	ldr	r5, [r0]
   11a2c:	mov	r0, #0
   11a30:	bl	11348 <dcgettext@plt>
   11a34:	mov	r2, r0
   11a38:	movw	r0, #61920	; 0xf1e0
   11a3c:	mov	r1, #1
   11a40:	movt	r0, #2
   11a44:	ldr	r3, [r0]
   11a48:	mov	r0, r5
   11a4c:	bl	114f8 <__fprintf_chk@plt>
   11a50:	mov	r0, r4
   11a54:	bl	1145c <exit@plt>
   11a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a5c:	add	fp, sp, #28
   11a60:	sub	sp, sp, #4
   11a64:	vpush	{d8-d11}
   11a68:	sub	sp, sp, #232	; 0xe8
   11a6c:	sub	sp, sp, #8192	; 0x2000
   11a70:	mov	r5, r0
   11a74:	mov	r7, #0
   11a78:	mov	r0, #10
   11a7c:	mov	r4, r1
   11a80:	str	r7, [sp, #116]	; 0x74
   11a84:	str	r0, [sp, #112]	; 0x70
   11a88:	ldr	r0, [r1]
   11a8c:	bl	18874 <__assert_fail@plt+0x728c>
   11a90:	movw	r1, #53998	; 0xd2ee
   11a94:	mov	r0, #6
   11a98:	movt	r1, #1
   11a9c:	bl	1154c <setlocale@plt>
   11aa0:	movw	r6, #54878	; 0xd65e
   11aa4:	movw	r1, #54441	; 0xd4a9
   11aa8:	movt	r6, #1
   11aac:	movt	r1, #1
   11ab0:	mov	r0, r6
   11ab4:	bl	11588 <bindtextdomain@plt>
   11ab8:	mov	r0, r6
   11abc:	bl	11360 <textdomain@plt>
   11ac0:	movw	r0, #28780	; 0x706c
   11ac4:	movt	r0, #1
   11ac8:	bl	1cabc <__assert_fail@plt+0xb4d4>
   11acc:	movw	r0, #61888	; 0xf1c0
   11ad0:	movw	r1, #61889	; 0xf1c1
   11ad4:	cmp	r5, #2
   11ad8:	movt	r0, #2
   11adc:	movt	r1, #2
   11ae0:	strb	r7, [r0]
   11ae4:	mov	r0, #1
   11ae8:	strb	r0, [r1]
   11aec:	movw	r1, #61890	; 0xf1c2
   11af0:	movt	r1, #2
   11af4:	strb	r7, [r1]
   11af8:	movw	r1, #61891	; 0xf1c3
   11afc:	movt	r1, #2
   11b00:	strb	r7, [r1]
   11b04:	movw	r1, #61892	; 0xf1c4
   11b08:	movt	r1, #2
   11b0c:	strb	r7, [r1]
   11b10:	movw	r1, #61893	; 0xf1c5
   11b14:	movt	r1, #2
   11b18:	strb	r0, [r1]
   11b1c:	beq	11b74 <__assert_fail@plt+0x58c>
   11b20:	cmp	r5, #3
   11b24:	bne	11b48 <__assert_fail@plt+0x560>
   11b28:	ldr	r0, [r4, #8]
   11b2c:	ldrb	r1, [r0]
   11b30:	cmp	r1, #45	; 0x2d
   11b34:	bne	11b74 <__assert_fail@plt+0x58c>
   11b38:	ldrb	r1, [r0, #1]
   11b3c:	cmp	r1, #0
   11b40:	bne	11b5c <__assert_fail@plt+0x574>
   11b44:	b	11b74 <__assert_fail@plt+0x58c>
   11b48:	sub	r0, r5, #3
   11b4c:	mov	r3, #0
   11b50:	cmp	r0, #1
   11b54:	bhi	11d1c <__assert_fail@plt+0x734>
   11b58:	ldr	r0, [r4, #8]
   11b5c:	movw	r1, #55081	; 0xd729
   11b60:	movt	r1, #1
   11b64:	bl	112b8 <strcmp@plt>
   11b68:	mov	r3, #0
   11b6c:	cmp	r0, #0
   11b70:	bne	11d1c <__assert_fail@plt+0x734>
   11b74:	bl	18818 <__assert_fail@plt+0x7230>
   11b78:	ldr	r2, [r4, #4]
   11b7c:	mov	r1, r0
   11b80:	mov	r0, r2
   11b84:	ldrb	r3, [r0], #1
   11b88:	cmp	r3, #45	; 0x2d
   11b8c:	beq	11bb4 <__assert_fail@plt+0x5cc>
   11b90:	cmp	r3, #43	; 0x2b
   11b94:	bne	11c38 <__assert_fail@plt+0x650>
   11b98:	sub	r1, r1, #3504	; 0xdb0
   11b9c:	mov	r8, #1
   11ba0:	mov	r3, #0
   11ba4:	sub	r1, r1, #196608	; 0x30000
   11ba8:	cmp	r1, #696	; 0x2b8
   11bac:	bhi	11bec <__assert_fail@plt+0x604>
   11bb0:	b	11d1c <__assert_fail@plt+0x734>
   11bb4:	movw	r3, #3504	; 0xdb0
   11bb8:	mov	r8, #0
   11bbc:	movt	r3, #3
   11bc0:	cmp	r1, r3
   11bc4:	blt	11bec <__assert_fail@plt+0x604>
   11bc8:	mov	r1, r0
   11bcc:	ldrb	r3, [r1], #1
   11bd0:	cmp	r3, #99	; 0x63
   11bd4:	mov	r3, #0
   11bd8:	movne	r1, r0
   11bdc:	ldrb	r1, [r1]
   11be0:	cmp	r1, #0
   11be4:	beq	11d1c <__assert_fail@plt+0x734>
   11be8:	mov	r8, #0
   11bec:	mov	r1, #0
   11bf0:	sub	r3, r2, r1
   11bf4:	sub	r1, r1, #1
   11bf8:	ldrb	r7, [r3, #1]
   11bfc:	sub	r3, r7, #48	; 0x30
   11c00:	cmp	r3, #10
   11c04:	bcc	11bf0 <__assert_fail@plt+0x608>
   11c08:	cmp	r7, #98	; 0x62
   11c0c:	beq	11c40 <__assert_fail@plt+0x658>
   11c10:	mov	ip, #10
   11c14:	cmp	r7, #99	; 0x63
   11c18:	beq	11c44 <__assert_fail@plt+0x65c>
   11c1c:	mov	r6, #1
   11c20:	cmp	r7, #108	; 0x6c
   11c24:	beq	11c48 <__assert_fail@plt+0x660>
   11c28:	sub	r2, r2, r1
   11c2c:	mov	ip, #10
   11c30:	mov	r6, #1
   11c34:	b	11c50 <__assert_fail@plt+0x668>
   11c38:	mov	r3, #0
   11c3c:	b	11d1c <__assert_fail@plt+0x734>
   11c40:	mov	ip, #5120	; 0x1400
   11c44:	mov	r6, #0
   11c48:	sub	r2, r2, r1
   11c4c:	ldrb	r7, [r2, #1]!
   11c50:	cmp	r7, #102	; 0x66
   11c54:	mov	r3, #0
   11c58:	addeq	r2, r2, #1
   11c5c:	ldrb	r2, [r2]
   11c60:	cmp	r2, #0
   11c64:	bne	11d1c <__assert_fail@plt+0x734>
   11c68:	cmn	r1, #1
   11c6c:	beq	11cdc <__assert_fail@plt+0x6f4>
   11c70:	movw	r1, #55084	; 0xd72c
   11c74:	add	r3, sp, #112	; 0x70
   11c78:	mov	r2, #10
   11c7c:	movt	r1, #1
   11c80:	str	r1, [sp]
   11c84:	mov	r1, #0
   11c88:	bl	1b550 <__assert_fail@plt+0x9f68>
   11c8c:	mvn	r1, #2
   11c90:	tst	r0, r1
   11c94:	beq	11ce8 <__assert_fail@plt+0x700>
   11c98:	bl	114b0 <__errno_location@plt>
   11c9c:	movw	r1, #55093	; 0xd735
   11ca0:	ldr	r5, [r0]
   11ca4:	mov	r0, #0
   11ca8:	mov	r2, #5
   11cac:	movt	r1, #1
   11cb0:	bl	11348 <dcgettext@plt>
   11cb4:	mov	r6, r0
   11cb8:	ldr	r0, [r4, #4]
   11cbc:	bl	1a4c8 <__assert_fail@plt+0x8ee0>
   11cc0:	movw	r2, #55086	; 0xd72e
   11cc4:	str	r0, [sp]
   11cc8:	mov	r0, #1
   11ccc:	mov	r1, r5
   11cd0:	mov	r3, r6
   11cd4:	movt	r2, #1
   11cd8:	bl	113e4 <error@plt>
   11cdc:	mov	r0, #0
   11ce0:	str	ip, [sp, #112]	; 0x70
   11ce4:	str	r0, [sp, #116]	; 0x74
   11ce8:	movw	r1, #61889	; 0xf1c1
   11cec:	sub	r0, r7, #102	; 0x66
   11cf0:	mov	r3, #1
   11cf4:	movt	r1, #2
   11cf8:	clz	r0, r0
   11cfc:	lsr	r0, r0, #5
   11d00:	strb	r6, [r1]
   11d04:	movw	r1, #61891	; 0xf1c3
   11d08:	movt	r1, #2
   11d0c:	strb	r8, [r1]
   11d10:	movw	r1, #61892	; 0xf1c4
   11d14:	movt	r1, #2
   11d18:	strb	r0, [r1]
   11d1c:	add	r0, sp, #120	; 0x78
   11d20:	movw	r6, #55108	; 0xd744
   11d24:	add	r7, r4, r3, lsl #2
   11d28:	movw	r4, #61880	; 0xf1b8
   11d2c:	vmov.f64	d8, #112	; 0x3f800000  1.0
   11d30:	sub	r9, r5, r3
   11d34:	mov	r5, #0
   11d38:	add	r1, r0, #80	; 0x50
   11d3c:	movt	r6, #1
   11d40:	movt	r4, #2
   11d44:	str	r9, [sp, #108]	; 0x6c
   11d48:	str	r1, [sp, #40]	; 0x28
   11d4c:	add	r1, r0, #96	; 0x60
   11d50:	add	r0, r0, #48	; 0x30
   11d54:	str	r0, [sp, #36]	; 0x24
   11d58:	mov	r0, #0
   11d5c:	str	r1, [sp, #32]
   11d60:	b	11de4 <__assert_fail@plt+0x7fc>
   11d64:	add	r9, r9, #1
   11d68:	str	r9, [r4]
   11d6c:	movw	r0, #55143	; 0xd767
   11d70:	movw	r1, #55167	; 0xd77f
   11d74:	cmp	r8, #110	; 0x6e
   11d78:	mov	r2, #5
   11d7c:	movt	r0, #1
   11d80:	movt	r1, #1
   11d84:	moveq	r1, r0
   11d88:	mov	r0, #0
   11d8c:	bl	11348 <dcgettext@plt>
   11d90:	mvn	r1, #0
   11d94:	str	r0, [sp, #12]
   11d98:	mov	r0, #0
   11d9c:	mov	r2, #0
   11da0:	mov	r3, #0
   11da4:	mov	r5, #0
   11da8:	str	r1, [sp]
   11dac:	str	r1, [sp, #4]
   11db0:	movw	r1, #55130	; 0xd75a
   11db4:	str	r0, [sp, #16]
   11db8:	mov	r0, r9
   11dbc:	movt	r1, #1
   11dc0:	str	r1, [sp, #8]
   11dc4:	bl	1b3ec <__assert_fail@plt+0x9e04>
   11dc8:	ldr	r9, [sp, #108]	; 0x6c
   11dcc:	mov	r7, r6
   11dd0:	movw	r6, #55108	; 0xd744
   11dd4:	str	r0, [sp, #112]	; 0x70
   11dd8:	str	r1, [sp, #116]	; 0x74
   11ddc:	mov	r0, sl
   11de0:	movt	r6, #1
   11de4:	movw	r3, #56872	; 0xde28
   11de8:	mov	sl, r0
   11dec:	mov	r0, r9
   11df0:	mov	r1, r7
   11df4:	mov	r2, r6
   11df8:	str	r5, [sp]
   11dfc:	movt	r3, #1
   11e00:	bl	11438 <getopt_long@plt>
   11e04:	add	r1, r0, #3
   11e08:	cmp	r1, #264	; 0x108
   11e0c:	bhi	150e0 <__assert_fail@plt+0x3af8>
   11e10:	add	r2, pc, #8
   11e14:	mov	r8, r0
   11e18:	mov	r0, #2
   11e1c:	ldr	pc, [r2, r1, lsl #2]
   11e20:	andeq	r5, r1, r8, ror #1
   11e24:	andeq	r5, r1, ip, asr #2
   11e28:	andeq	r2, r1, ip, lsl #9
   11e2c:	andeq	r5, r1, r0, ror #1
   11e30:	andeq	r5, r1, r0, ror #1
   11e34:	andeq	r5, r1, r0, ror #1
   11e38:	andeq	r5, r1, r0, ror #1
   11e3c:	andeq	r5, r1, r0, ror #1
   11e40:	andeq	r5, r1, r0, ror #1
   11e44:	andeq	r5, r1, r0, ror #1
   11e48:	andeq	r5, r1, r0, ror #1
   11e4c:	andeq	r5, r1, r0, ror #1
   11e50:	andeq	r5, r1, r0, ror #1
   11e54:	andeq	r5, r1, r0, ror #1
   11e58:	andeq	r5, r1, r0, ror #1
   11e5c:	andeq	r5, r1, r0, ror #1
   11e60:	andeq	r5, r1, r0, ror #1
   11e64:	andeq	r5, r1, r0, ror #1
   11e68:	andeq	r5, r1, r0, ror #1
   11e6c:	andeq	r5, r1, r0, ror #1
   11e70:	andeq	r5, r1, r0, ror #1
   11e74:	andeq	r5, r1, r0, ror #1
   11e78:	andeq	r5, r1, r0, ror #1
   11e7c:	andeq	r5, r1, r0, ror #1
   11e80:	andeq	r5, r1, r0, ror #1
   11e84:	andeq	r5, r1, r0, ror #1
   11e88:	andeq	r5, r1, r0, ror #1
   11e8c:	andeq	r5, r1, r0, ror #1
   11e90:	andeq	r5, r1, r0, ror #1
   11e94:	andeq	r5, r1, r0, ror #1
   11e98:	andeq	r5, r1, r0, ror #1
   11e9c:	andeq	r5, r1, r0, ror #1
   11ea0:	andeq	r5, r1, r0, ror #1
   11ea4:	andeq	r5, r1, r0, ror #1
   11ea8:	andeq	r5, r1, r0, ror #1
   11eac:	andeq	r5, r1, r0, ror #1
   11eb0:	andeq	r5, r1, r0, ror #1
   11eb4:	andeq	r5, r1, r0, ror #1
   11eb8:	andeq	r5, r1, r0, ror #1
   11ebc:	andeq	r5, r1, r0, ror #1
   11ec0:	andeq	r5, r1, r0, ror #1
   11ec4:	andeq	r5, r1, r0, ror #1
   11ec8:	andeq	r5, r1, r0, ror #1
   11ecc:	andeq	r5, r1, r0, ror #1
   11ed0:	andeq	r5, r1, r0, ror #1
   11ed4:	andeq	r5, r1, r0, ror #1
   11ed8:	andeq	r5, r1, r0, ror #1
   11edc:	andeq	r5, r1, r0, ror #1
   11ee0:	andeq	r5, r1, r0, ror #1
   11ee4:	andeq	r5, r1, r0, ror #1
   11ee8:	andeq	r5, r1, r0, ror #1
   11eec:	strheq	r5, [r1], -r8
   11ef0:	strheq	r5, [r1], -r8
   11ef4:	strheq	r5, [r1], -r8
   11ef8:	strheq	r5, [r1], -r8
   11efc:	strheq	r5, [r1], -r8
   11f00:	strheq	r5, [r1], -r8
   11f04:	strheq	r5, [r1], -r8
   11f08:	strheq	r5, [r1], -r8
   11f0c:	strheq	r5, [r1], -r8
   11f10:	strheq	r5, [r1], -r8
   11f14:	andeq	r5, r1, r0, ror #1
   11f18:	andeq	r5, r1, r0, ror #1
   11f1c:	andeq	r5, r1, r0, ror #1
   11f20:	andeq	r5, r1, r0, ror #1
   11f24:	andeq	r5, r1, r0, ror #1
   11f28:	andeq	r5, r1, r0, ror #1
   11f2c:	andeq	r5, r1, r0, ror #1
   11f30:	andeq	r5, r1, r0, ror #1
   11f34:	andeq	r5, r1, r0, ror #1
   11f38:	andeq	r5, r1, r0, ror #1
   11f3c:	andeq	r5, r1, r0, ror #1
   11f40:	andeq	r5, r1, r0, ror #1
   11f44:	andeq	r2, r1, ip, lsl #8
   11f48:	andeq	r5, r1, r0, ror #1
   11f4c:	andeq	r5, r1, r0, ror #1
   11f50:	andeq	r5, r1, r0, ror #1
   11f54:	andeq	r5, r1, r0, ror #1
   11f58:	andeq	r5, r1, r0, ror #1
   11f5c:	andeq	r5, r1, r0, ror #1
   11f60:	andeq	r5, r1, r0, ror #1
   11f64:	andeq	r5, r1, r0, ror #1
   11f68:	andeq	r5, r1, r0, ror #1
   11f6c:	andeq	r5, r1, r0, ror #1
   11f70:	andeq	r5, r1, r0, ror #1
   11f74:	andeq	r5, r1, r0, ror #1
   11f78:	andeq	r5, r1, r0, ror #1
   11f7c:	andeq	r5, r1, r0, ror #1
   11f80:	andeq	r5, r1, r0, ror #1
   11f84:	andeq	r5, r1, r0, ror #1
   11f88:	andeq	r5, r1, r0, ror #1
   11f8c:	andeq	r5, r1, r0, ror #1
   11f90:	andeq	r5, r1, r0, ror #1
   11f94:	andeq	r5, r1, r0, ror #1
   11f98:	andeq	r5, r1, r0, ror #1
   11f9c:	andeq	r5, r1, r0, ror #1
   11fa0:	andeq	r5, r1, r0, ror #1
   11fa4:	andeq	r5, r1, r0, ror #1
   11fa8:	andeq	r5, r1, r0, ror #1
   11fac:	andeq	r5, r1, r0, ror #1
   11fb0:	andeq	r5, r1, r0, ror #1
   11fb4:	andeq	r5, r1, r0, ror #1
   11fb8:	andeq	r2, r1, r4, asr #4
   11fbc:	andeq	r5, r1, r0, ror #1
   11fc0:	andeq	r5, r1, r0, ror #1
   11fc4:	muleq	r1, r0, r2
   11fc8:	andeq	r5, r1, r0, ror #1
   11fcc:	andeq	r5, r1, r0, ror #1
   11fd0:	andeq	r5, r1, r0, ror #1
   11fd4:	andeq	r5, r1, r0, ror #1
   11fd8:	andeq	r5, r1, r0, ror #1
   11fdc:	andeq	r5, r1, r0, ror #1
   11fe0:	andeq	r5, r1, r0, ror #1
   11fe4:	andeq	r2, r1, r4, asr #4
   11fe8:	andeq	r5, r1, r0, ror #1
   11fec:	andeq	r5, r1, r0, ror #1
   11ff0:	andeq	r1, r1, r4, ror #27
   11ff4:	andeq	r5, r1, r0, ror #1
   11ff8:	ldrdeq	r2, [r1], -r4
   11ffc:	andeq	r5, r1, r0, ror #1
   12000:	andeq	r5, r1, r0, ror #1
   12004:	andeq	r2, r1, r4, asr r4
   12008:	andeq	r5, r1, r0, ror #1
   1200c:	andeq	r5, r1, r0, ror #1
   12010:	andeq	r5, r1, r0, ror #1
   12014:	andeq	r2, r1, r4, lsr r4
   12018:	andeq	r5, r1, r0, ror #1
   1201c:	andeq	r5, r1, r0, ror #1
   12020:	andeq	r5, r1, r0, ror #1
   12024:	andeq	r5, r1, r0, ror #1
   12028:	andeq	r5, r1, r0, ror #1
   1202c:	andeq	r5, r1, r0, ror #1
   12030:	andeq	r5, r1, r0, ror #1
   12034:	andeq	r5, r1, r0, ror #1
   12038:	andeq	r5, r1, r0, ror #1
   1203c:	andeq	r5, r1, r0, ror #1
   12040:	andeq	r5, r1, r0, ror #1
   12044:	andeq	r5, r1, r0, ror #1
   12048:	andeq	r5, r1, r0, ror #1
   1204c:	andeq	r5, r1, r0, ror #1
   12050:	andeq	r5, r1, r0, ror #1
   12054:	andeq	r5, r1, r0, ror #1
   12058:	andeq	r5, r1, r0, ror #1
   1205c:	andeq	r5, r1, r0, ror #1
   12060:	andeq	r5, r1, r0, ror #1
   12064:	andeq	r5, r1, r0, ror #1
   12068:	andeq	r5, r1, r0, ror #1
   1206c:	andeq	r5, r1, r0, ror #1
   12070:	andeq	r5, r1, r0, ror #1
   12074:	andeq	r5, r1, r0, ror #1
   12078:	andeq	r5, r1, r0, ror #1
   1207c:	andeq	r5, r1, r0, ror #1
   12080:	andeq	r5, r1, r0, ror #1
   12084:	andeq	r5, r1, r0, ror #1
   12088:	andeq	r5, r1, r0, ror #1
   1208c:	andeq	r5, r1, r0, ror #1
   12090:	andeq	r5, r1, r0, ror #1
   12094:	andeq	r5, r1, r0, ror #1
   12098:	andeq	r5, r1, r0, ror #1
   1209c:	andeq	r5, r1, r0, ror #1
   120a0:	andeq	r5, r1, r0, ror #1
   120a4:	andeq	r5, r1, r0, ror #1
   120a8:	andeq	r5, r1, r0, ror #1
   120ac:	andeq	r5, r1, r0, ror #1
   120b0:	andeq	r5, r1, r0, ror #1
   120b4:	andeq	r5, r1, r0, ror #1
   120b8:	andeq	r5, r1, r0, ror #1
   120bc:	andeq	r5, r1, r0, ror #1
   120c0:	andeq	r5, r1, r0, ror #1
   120c4:	andeq	r5, r1, r0, ror #1
   120c8:	andeq	r5, r1, r0, ror #1
   120cc:	andeq	r5, r1, r0, ror #1
   120d0:	andeq	r5, r1, r0, ror #1
   120d4:	andeq	r5, r1, r0, ror #1
   120d8:	andeq	r5, r1, r0, ror #1
   120dc:	andeq	r5, r1, r0, ror #1
   120e0:	andeq	r5, r1, r0, ror #1
   120e4:	andeq	r5, r1, r0, ror #1
   120e8:	andeq	r5, r1, r0, ror #1
   120ec:	andeq	r5, r1, r0, ror #1
   120f0:	andeq	r5, r1, r0, ror #1
   120f4:	andeq	r5, r1, r0, ror #1
   120f8:	andeq	r5, r1, r0, ror #1
   120fc:	andeq	r5, r1, r0, ror #1
   12100:	andeq	r5, r1, r0, ror #1
   12104:	andeq	r5, r1, r0, ror #1
   12108:	andeq	r5, r1, r0, ror #1
   1210c:	andeq	r5, r1, r0, ror #1
   12110:	andeq	r5, r1, r0, ror #1
   12114:	andeq	r5, r1, r0, ror #1
   12118:	andeq	r5, r1, r0, ror #1
   1211c:	andeq	r5, r1, r0, ror #1
   12120:	andeq	r5, r1, r0, ror #1
   12124:	andeq	r5, r1, r0, ror #1
   12128:	andeq	r5, r1, r0, ror #1
   1212c:	andeq	r5, r1, r0, ror #1
   12130:	andeq	r5, r1, r0, ror #1
   12134:	andeq	r5, r1, r0, ror #1
   12138:	andeq	r5, r1, r0, ror #1
   1213c:	andeq	r5, r1, r0, ror #1
   12140:	andeq	r5, r1, r0, ror #1
   12144:	andeq	r5, r1, r0, ror #1
   12148:	andeq	r5, r1, r0, ror #1
   1214c:	andeq	r5, r1, r0, ror #1
   12150:	andeq	r5, r1, r0, ror #1
   12154:	andeq	r5, r1, r0, ror #1
   12158:	andeq	r5, r1, r0, ror #1
   1215c:	andeq	r5, r1, r0, ror #1
   12160:	andeq	r5, r1, r0, ror #1
   12164:	andeq	r5, r1, r0, ror #1
   12168:	andeq	r5, r1, r0, ror #1
   1216c:	andeq	r5, r1, r0, ror #1
   12170:	andeq	r5, r1, r0, ror #1
   12174:	andeq	r5, r1, r0, ror #1
   12178:	andeq	r5, r1, r0, ror #1
   1217c:	andeq	r5, r1, r0, ror #1
   12180:	andeq	r5, r1, r0, ror #1
   12184:	andeq	r5, r1, r0, ror #1
   12188:	andeq	r5, r1, r0, ror #1
   1218c:	andeq	r5, r1, r0, ror #1
   12190:	andeq	r5, r1, r0, ror #1
   12194:	andeq	r5, r1, r0, ror #1
   12198:	andeq	r5, r1, r0, ror #1
   1219c:	andeq	r5, r1, r0, ror #1
   121a0:	andeq	r5, r1, r0, ror #1
   121a4:	andeq	r5, r1, r0, ror #1
   121a8:	andeq	r5, r1, r0, ror #1
   121ac:	andeq	r5, r1, r0, ror #1
   121b0:	andeq	r5, r1, r0, ror #1
   121b4:	andeq	r5, r1, r0, ror #1
   121b8:	andeq	r5, r1, r0, ror #1
   121bc:	andeq	r5, r1, r0, ror #1
   121c0:	andeq	r5, r1, r0, ror #1
   121c4:	andeq	r5, r1, r0, ror #1
   121c8:	andeq	r5, r1, r0, ror #1
   121cc:	andeq	r5, r1, r0, ror #1
   121d0:	andeq	r5, r1, r0, ror #1
   121d4:	andeq	r5, r1, r0, ror #1
   121d8:	andeq	r5, r1, r0, ror #1
   121dc:	andeq	r5, r1, r0, ror #1
   121e0:	andeq	r5, r1, r0, ror #1
   121e4:	andeq	r5, r1, r0, ror #1
   121e8:	andeq	r5, r1, r0, ror #1
   121ec:	andeq	r5, r1, r0, ror #1
   121f0:	andeq	r5, r1, r0, ror #1
   121f4:	andeq	r5, r1, r0, ror #1
   121f8:	andeq	r5, r1, r0, ror #1
   121fc:	andeq	r5, r1, r0, ror #1
   12200:	andeq	r5, r1, r0, ror #1
   12204:	andeq	r5, r1, r0, ror #1
   12208:	andeq	r5, r1, r0, ror #1
   1220c:	andeq	r5, r1, r0, ror #1
   12210:	andeq	r5, r1, r0, ror #1
   12214:	andeq	r5, r1, r0, ror #1
   12218:	andeq	r5, r1, r0, ror #1
   1221c:	andeq	r5, r1, r0, ror #1
   12220:	andeq	r5, r1, r0, ror #1
   12224:	andeq	r5, r1, r0, ror #1
   12228:	andeq	r5, r1, r0, ror #1
   1222c:	andeq	r2, r1, r8, asr #8
   12230:	andeq	r2, r1, r0, ror r3
   12234:	andeq	r2, r1, r4, lsl #6
   12238:	andeq	r2, r1, r4, ror #6
   1223c:	muleq	r1, r0, r2
   12240:	andeq	r2, r1, ip, asr r4
   12244:	sub	r0, r8, #110	; 0x6e
   12248:	movw	r1, #61889	; 0xf1c1
   1224c:	ldr	r9, [r4]
   12250:	mov	r6, r7
   12254:	mov	r7, r4
   12258:	clz	r0, r0
   1225c:	movt	r1, #2
   12260:	lsr	r0, r0, #5
   12264:	strb	r0, [r1]
   12268:	ldrb	r0, [r9]
   1226c:	cmp	r0, #45	; 0x2d
   12270:	beq	11d64 <__assert_fail@plt+0x77c>
   12274:	cmp	r0, #43	; 0x2b
   12278:	bne	11d6c <__assert_fail@plt+0x784>
   1227c:	movw	r0, #61891	; 0xf1c3
   12280:	mov	r1, #1
   12284:	movt	r0, #2
   12288:	strb	r1, [r0]
   1228c:	b	11d6c <__assert_fail@plt+0x784>
   12290:	ldr	r1, [r4]
   12294:	movw	r0, #61892	; 0xf1c4
   12298:	mov	r2, #1
   1229c:	movt	r0, #2
   122a0:	strb	r2, [r0]
   122a4:	cmp	r1, #0
   122a8:	beq	12474 <__assert_fail@plt+0xe8c>
   122ac:	movw	r0, #61780	; 0xf154
   122b0:	mov	r3, #4
   122b4:	mov	r8, r7
   122b8:	mov	r7, r4
   122bc:	movw	r4, #57128	; 0xdf28
   122c0:	movt	r0, #2
   122c4:	str	r3, [sp]
   122c8:	movt	r4, #1
   122cc:	ldr	r0, [r0]
   122d0:	mov	r3, r4
   122d4:	stmib	sp, {r0, r2}
   122d8:	movw	r0, #55191	; 0xd797
   122dc:	movw	r2, #57136	; 0xdf30
   122e0:	movt	r0, #1
   122e4:	movt	r2, #1
   122e8:	bl	16cd0 <__assert_fail@plt+0x56e8>
   122ec:	ldr	r0, [r4, r0, lsl #2]
   122f0:	movw	r1, #61760	; 0xf140
   122f4:	mov	r4, r7
   122f8:	mov	r7, r8
   122fc:	movt	r1, #2
   12300:	b	12358 <__assert_fail@plt+0xd70>
   12304:	movw	r1, #55256	; 0xd7d8
   12308:	ldr	r6, [r4]
   1230c:	mov	r0, #0
   12310:	mov	r2, #5
   12314:	movt	r1, #1
   12318:	bl	11348 <dcgettext@plt>
   1231c:	mvn	r1, #-2147483648	; 0x80000000
   12320:	mov	r2, #0
   12324:	mov	r3, #0
   12328:	stm	sp, {r1, r5}
   1232c:	movw	r1, #53998	; 0xd2ee
   12330:	str	r0, [sp, #12]
   12334:	mov	r0, r6
   12338:	movw	r6, #55108	; 0xd744
   1233c:	str	r5, [sp, #16]
   12340:	movt	r1, #1
   12344:	movt	r6, #1
   12348:	str	r1, [sp, #8]
   1234c:	bl	1b3ec <__assert_fail@plt+0x9e04>
   12350:	movw	r1, #61896	; 0xf1c8
   12354:	movt	r1, #2
   12358:	str	r0, [r1]
   1235c:	mov	r0, sl
   12360:	b	11de4 <__assert_fail@plt+0x7fc>
   12364:	movw	r0, #61903	; 0xf1cf
   12368:	movt	r0, #2
   1236c:	b	12464 <__assert_fail@plt+0xe7c>
   12370:	movw	r1, #55200	; 0xd7a0
   12374:	ldr	r6, [r4]
   12378:	mov	r0, #0
   1237c:	mov	r2, #5
   12380:	movt	r1, #1
   12384:	bl	11348 <dcgettext@plt>
   12388:	mvn	r1, #0
   1238c:	str	r0, [sp, #12]
   12390:	mov	r0, r6
   12394:	movw	r6, #55108	; 0xd744
   12398:	mov	r2, #0
   1239c:	mov	r3, #0
   123a0:	str	r5, [sp, #16]
   123a4:	str	r1, [sp]
   123a8:	str	r1, [sp, #4]
   123ac:	movw	r1, #53998	; 0xd2ee
   123b0:	movt	r6, #1
   123b4:	movt	r1, #1
   123b8:	str	r1, [sp, #8]
   123bc:	bl	1b3ec <__assert_fail@plt+0x9e04>
   123c0:	movw	r2, #61768	; 0xf148
   123c4:	movt	r2, #2
   123c8:	strd	r0, [r2]
   123cc:	mov	r0, sl
   123d0:	b	11de4 <__assert_fail@plt+0x7fc>
   123d4:	ldr	r0, [r4]
   123d8:	movw	r3, #28616	; 0x6fc8
   123dc:	mov	r1, #0
   123e0:	add	r2, sp, #120	; 0x78
   123e4:	movt	r3, #1
   123e8:	bl	1b4b8 <__assert_fail@plt+0x9ed0>
   123ec:	cmp	r0, #0
   123f0:	beq	15154 <__assert_fail@plt+0x3b6c>
   123f4:	vldr	d8, [sp, #120]	; 0x78
   123f8:	vcmpe.f64	d8, #0.0
   123fc:	vmrs	APSR_nzcv, fpscr
   12400:	blt	15154 <__assert_fail@plt+0x3b6c>
   12404:	mov	r0, sl
   12408:	b	11de4 <__assert_fail@plt+0x7fc>
   1240c:	movw	r0, #61760	; 0xf140
   12410:	mov	r1, #1
   12414:	movt	r0, #2
   12418:	str	r1, [r0]
   1241c:	movw	r0, #61892	; 0xf1c4
   12420:	movt	r0, #2
   12424:	strb	r1, [r0]
   12428:	movw	r0, #61902	; 0xf1ce
   1242c:	movt	r0, #2
   12430:	b	12468 <__assert_fail@plt+0xe80>
   12434:	movw	r0, #61893	; 0xf1c5
   12438:	movt	r0, #2
   1243c:	strb	r5, [r0]
   12440:	mov	r0, sl
   12444:	b	11de4 <__assert_fail@plt+0x7fc>
   12448:	movw	r0, #61902	; 0xf1ce
   1244c:	movt	r0, #2
   12450:	b	12464 <__assert_fail@plt+0xe7c>
   12454:	mov	r0, #1
   12458:	b	11de4 <__assert_fail@plt+0x7fc>
   1245c:	movw	r0, #61901	; 0xf1cd
   12460:	movt	r0, #2
   12464:	mov	r1, #1
   12468:	strb	r1, [r0]
   1246c:	mov	r0, sl
   12470:	b	11de4 <__assert_fail@plt+0x7fc>
   12474:	movw	r0, #61760	; 0xf140
   12478:	mov	r1, #2
   1247c:	movt	r0, #2
   12480:	str	r1, [r0]
   12484:	mov	r0, sl
   12488:	b	11de4 <__assert_fail@plt+0x7fc>
   1248c:	movw	r0, #61902	; 0xf1ce
   12490:	movt	r0, #2
   12494:	ldrb	r0, [r0]
   12498:	cmp	r0, #1
   1249c:	bne	12508 <__assert_fail@plt+0xf20>
   124a0:	movw	r0, #61892	; 0xf1c4
   124a4:	movt	r0, #2
   124a8:	ldrb	r0, [r0]
   124ac:	cmp	r0, #0
   124b0:	beq	124d4 <__assert_fail@plt+0xeec>
   124b4:	movw	r0, #61760	; 0xf140
   124b8:	movt	r0, #2
   124bc:	ldr	r0, [r0]
   124c0:	cmp	r0, #2
   124c4:	bne	12508 <__assert_fail@plt+0xf20>
   124c8:	movw	r1, #55456	; 0xd8a0
   124cc:	movt	r1, #1
   124d0:	b	124ec <__assert_fail@plt+0xf04>
   124d4:	movw	r1, #61902	; 0xf1ce
   124d8:	mov	r0, #0
   124dc:	movt	r1, #2
   124e0:	strb	r0, [r1]
   124e4:	movw	r1, #55392	; 0xd860
   124e8:	movt	r1, #1
   124ec:	mov	r0, #0
   124f0:	mov	r2, #5
   124f4:	bl	11348 <dcgettext@plt>
   124f8:	mov	r2, r0
   124fc:	mov	r0, #0
   12500:	mov	r1, #0
   12504:	bl	113e4 <error@plt>
   12508:	movw	r0, #61896	; 0xf1c8
   1250c:	movt	r0, #2
   12510:	ldr	r0, [r0]
   12514:	cmp	r0, #0
   12518:	beq	12558 <__assert_fail@plt+0xf70>
   1251c:	movw	r1, #61892	; 0xf1c4
   12520:	movt	r1, #2
   12524:	ldrb	r1, [r1]
   12528:	cmp	r1, #0
   1252c:	bne	12558 <__assert_fail@plt+0xf70>
   12530:	movw	r1, #55509	; 0xd8d5
   12534:	mov	r0, #0
   12538:	mov	r2, #5
   1253c:	movt	r1, #1
   12540:	bl	11348 <dcgettext@plt>
   12544:	mov	r2, r0
   12548:	mov	r0, #0
   1254c:	mov	r1, #0
   12550:	bl	113e4 <error@plt>
   12554:	b	125b4 <__assert_fail@plt+0xfcc>
   12558:	cmp	r0, #0
   1255c:	beq	125b4 <__assert_fail@plt+0xfcc>
   12560:	mov	r1, #0
   12564:	bl	11444 <kill@plt>
   12568:	cmp	r0, #0
   1256c:	beq	125b4 <__assert_fail@plt+0xfcc>
   12570:	bl	114b0 <__errno_location@plt>
   12574:	ldr	r0, [r0]
   12578:	cmp	r0, #38	; 0x26
   1257c:	bne	125b4 <__assert_fail@plt+0xfcc>
   12580:	movw	r1, #55571	; 0xd913
   12584:	mov	r0, #0
   12588:	mov	r2, #5
   1258c:	mov	r6, #0
   12590:	movt	r1, #1
   12594:	bl	11348 <dcgettext@plt>
   12598:	mov	r2, r0
   1259c:	mov	r0, #0
   125a0:	mov	r1, #0
   125a4:	bl	113e4 <error@plt>
   125a8:	movw	r0, #61896	; 0xf1c8
   125ac:	movt	r0, #2
   125b0:	str	r6, [r0]
   125b4:	movw	r0, #61891	; 0xf1c3
   125b8:	ldr	r3, [sp, #112]	; 0x70
   125bc:	ldr	r5, [sp, #116]	; 0x74
   125c0:	movt	r0, #2
   125c4:	ldrb	r2, [r0]
   125c8:	cmp	r2, #0
   125cc:	orrsne	r0, r3, r5
   125d0:	beq	125e4 <__assert_fail@plt+0xffc>
   125d4:	subs	r3, r3, #1
   125d8:	sbc	r5, r5, #0
   125dc:	str	r3, [sp, #112]	; 0x70
   125e0:	str	r5, [sp, #116]	; 0x74
   125e4:	movw	r0, #61864	; 0xf1a8
   125e8:	movw	r6, #56808	; 0xdde8
   125ec:	mov	r8, #1
   125f0:	movt	r0, #2
   125f4:	movt	r6, #1
   125f8:	ldr	r0, [r0]
   125fc:	cmp	r9, r0
   12600:	subgt	r8, r9, r0
   12604:	addgt	r6, r7, r0, lsl #2
   12608:	cmp	r8, #0
   1260c:	str	r8, [sp, #64]	; 0x40
   12610:	beq	1272c <__assert_fail@plt+0x1144>
   12614:	movw	r4, #55082	; 0xd72a
   12618:	str	r5, [sp, #104]	; 0x68
   1261c:	mov	r9, r8
   12620:	mov	r7, r2
   12624:	mov	r5, #0
   12628:	mov	r8, #0
   1262c:	str	r3, [sp, #108]	; 0x6c
   12630:	movt	r4, #1
   12634:	ldr	r0, [r6, r8, lsl #2]
   12638:	mov	r1, r4
   1263c:	bl	112b8 <strcmp@plt>
   12640:	clz	r0, r0
   12644:	add	r8, r8, #1
   12648:	lsr	r0, r0, #5
   1264c:	cmp	r9, r8
   12650:	orr	r5, r5, r0
   12654:	bne	12634 <__assert_fail@plt+0x104c>
   12658:	movw	r0, #61760	; 0xf140
   1265c:	mvn	r2, r5
   12660:	movt	r0, #2
   12664:	ldr	r1, [r0]
   12668:	subs	r0, r1, #1
   1266c:	movwne	r0, #1
   12670:	orr	r0, r2, r0
   12674:	tst	r0, #1
   12678:	beq	151c4 <__assert_fail@plt+0x3bdc>
   1267c:	movw	r0, #61892	; 0xf1c4
   12680:	ldr	r8, [sp, #64]	; 0x40
   12684:	movt	r0, #2
   12688:	ldrb	r0, [r0]
   1268c:	cmp	r0, #0
   12690:	beq	12744 <__assert_fail@plt+0x115c>
   12694:	eor	r2, r5, #1
   12698:	ldr	r3, [sp, #108]	; 0x6c
   1269c:	ldr	r5, [sp, #104]	; 0x68
   126a0:	tst	r2, #1
   126a4:	mov	r2, r7
   126a8:	bne	12720 <__assert_fail@plt+0x1138>
   126ac:	cmp	r8, #1
   126b0:	bne	126cc <__assert_fail@plt+0x10e4>
   126b4:	cmp	r1, #2
   126b8:	movweq	r0, #61896	; 0xf1c8
   126bc:	movteq	r0, #2
   126c0:	ldreq	r0, [r0]
   126c4:	cmpeq	r0, #0
   126c8:	beq	13f2c <__assert_fail@plt+0x2944>
   126cc:	mov	r0, #0
   126d0:	bl	115a0 <isatty@plt>
   126d4:	cmp	r0, #0
   126d8:	beq	12700 <__assert_fail@plt+0x1118>
   126dc:	movw	r1, #54490	; 0xd4da
   126e0:	mov	r0, #0
   126e4:	mov	r2, #5
   126e8:	movt	r1, #1
   126ec:	bl	11348 <dcgettext@plt>
   126f0:	mov	r2, r0
   126f4:	mov	r0, #0
   126f8:	mov	r1, #0
   126fc:	bl	113e4 <error@plt>
   12700:	movw	r0, #61891	; 0xf1c3
   12704:	ldr	r3, [sp, #112]	; 0x70
   12708:	ldr	r5, [sp, #116]	; 0x74
   1270c:	movt	r0, #2
   12710:	ldrb	r2, [r0]
   12714:	movw	r0, #61892	; 0xf1c4
   12718:	movt	r0, #2
   1271c:	ldrb	r0, [r0]
   12720:	orrs	r1, r3, r5
   12724:	beq	12758 <__assert_fail@plt+0x1170>
   12728:	b	12764 <__assert_fail@plt+0x117c>
   1272c:	movw	r0, #61892	; 0xf1c4
   12730:	movt	r0, #2
   12734:	ldrb	r0, [r0]
   12738:	orrs	r1, r3, r5
   1273c:	beq	12758 <__assert_fail@plt+0x1170>
   12740:	b	12764 <__assert_fail@plt+0x117c>
   12744:	ldr	r3, [sp, #108]	; 0x6c
   12748:	ldr	r5, [sp, #104]	; 0x68
   1274c:	mov	r2, r7
   12750:	orrs	r1, r3, r5
   12754:	bne	12764 <__assert_fail@plt+0x117c>
   12758:	orrs	r0, r2, r0
   1275c:	mov	r0, #0
   12760:	beq	13e04 <__assert_fail@plt+0x281c>
   12764:	mov	r0, r8
   12768:	mov	r1, #80	; 0x50
   1276c:	bl	1ae48 <__assert_fail@plt+0x9860>
   12770:	mov	r9, r0
   12774:	cmp	r8, #0
   12778:	beq	127d4 <__assert_fail@plt+0x11ec>
   1277c:	and	r0, r8, #1
   12780:	mov	r1, #0
   12784:	cmp	r8, #1
   12788:	beq	127c0 <__assert_fail@plt+0x11d8>
   1278c:	sub	r2, r8, r0
   12790:	add	r3, r9, #80	; 0x50
   12794:	add	r7, r6, #4
   12798:	mov	r1, #0
   1279c:	ldr	r5, [r7, #-4]
   127a0:	ldr	r4, [r7]
   127a4:	add	r1, r1, #2
   127a8:	add	r7, r7, #8
   127ac:	cmp	r2, r1
   127b0:	str	r5, [r3, #-80]	; 0xffffffb0
   127b4:	str	r4, [r3]
   127b8:	add	r3, r3, #160	; 0xa0
   127bc:	bne	1279c <__assert_fail@plt+0x11b4>
   127c0:	cmp	r0, #0
   127c4:	beq	127d4 <__assert_fail@plt+0x11ec>
   127c8:	ldr	r0, [r6, r1, lsl #2]
   127cc:	add	r1, r1, r1, lsl #2
   127d0:	str	r0, [r9, r1, lsl #4]
   127d4:	movw	r7, #61890	; 0xf1c2
   127d8:	cmp	sl, #1
   127dc:	movt	r7, #2
   127e0:	beq	127f4 <__assert_fail@plt+0x120c>
   127e4:	cmp	sl, #0
   127e8:	bne	127fc <__assert_fail@plt+0x1214>
   127ec:	cmp	r8, #2
   127f0:	bcc	127fc <__assert_fail@plt+0x1214>
   127f4:	mov	r0, #1
   127f8:	strb	r0, [r7]
   127fc:	cmp	r8, #0
   12800:	str	r9, [sp, #48]	; 0x30
   12804:	beq	13dbc <__assert_fail@plt+0x27d4>
   12808:	sub	r0, fp, #176	; 0xb0
   1280c:	vmov.i32	q5, #0	; 0x00000000
   12810:	mov	r6, #1
   12814:	add	r0, r0, #48	; 0x30
   12818:	str	r0, [sp, #24]
   1281c:	mov	r0, #0
   12820:	b	12864 <__assert_fail@plt+0x127c>
   12824:	mov	r0, #4
   12828:	mov	r1, r6
   1282c:	bl	19fa0 <__assert_fail@plt+0x89b8>
   12830:	mov	r3, r0
   12834:	mov	r0, #0
   12838:	mov	r1, r4
   1283c:	mov	r2, r5
   12840:	mov	r6, #0
   12844:	bl	113e4 <error@plt>
   12848:	ldr	r0, [sp, #88]	; 0x58
   1284c:	and	r0, r0, r6
   12850:	mov	r6, r0
   12854:	ldr	r0, [sp, #84]	; 0x54
   12858:	add	r0, r0, #1
   1285c:	cmp	r0, r8
   12860:	beq	13db4 <__assert_fail@plt+0x27cc>
   12864:	str	r0, [sp, #84]	; 0x54
   12868:	add	r5, r0, r0, lsl #2
   1286c:	ldr	r0, [sp, #112]	; 0x70
   12870:	mov	sl, r9
   12874:	movw	r1, #55082	; 0xd72a
   12878:	movt	r1, #1
   1287c:	ldr	r4, [sl, r5, lsl #4]!
   12880:	str	r0, [sp, #108]	; 0x6c
   12884:	ldr	r0, [sp, #116]	; 0x74
   12888:	str	r0, [sp, #104]	; 0x68
   1288c:	mov	r0, r4
   12890:	bl	112b8 <strcmp@plt>
   12894:	mov	r7, r0
   12898:	cmp	r0, #0
   1289c:	beq	128b4 <__assert_fail@plt+0x12cc>
   128a0:	mov	r0, r4
   128a4:	mov	r1, #0
   128a8:	bl	17410 <__assert_fail@plt+0x5e28>
   128ac:	mov	r2, r0
   128b0:	b	128c8 <__assert_fail@plt+0x12e0>
   128b4:	movw	r1, #61888	; 0xf1c0
   128b8:	mov	r0, #1
   128bc:	mov	r2, #0
   128c0:	movt	r1, #2
   128c4:	strb	r0, [r1]
   128c8:	movw	r1, #61902	; 0xf1ce
   128cc:	mvn	r0, #0
   128d0:	add	r5, r9, r5, lsl #4
   128d4:	str	r6, [sp, #88]	; 0x58
   128d8:	movt	r1, #2
   128dc:	subs	r0, r2, r0
   128e0:	movwne	r0, #1
   128e4:	cmn	r2, #1
   128e8:	ldrb	r4, [r1]
   128ec:	mvn	r1, r4
   128f0:	orr	r0, r1, r0
   128f4:	mov	r1, r5
   128f8:	and	r0, r0, #1
   128fc:	strb	r0, [r1, #46]!	; 0x2e
   12900:	beq	12ac0 <__assert_fail@plt+0x14d8>
   12904:	movw	r0, #61890	; 0xf1c2
   12908:	str	r1, [sp, #44]	; 0x2c
   1290c:	str	r2, [sp, #100]	; 0x64
   12910:	str	r5, [sp, #80]	; 0x50
   12914:	movt	r0, #2
   12918:	ldrb	r0, [r0]
   1291c:	cmp	r0, #1
   12920:	bne	129a0 <__assert_fail@plt+0x13b8>
   12924:	ldr	r4, [sl]
   12928:	movw	r1, #55082	; 0xd72a
   1292c:	movt	r1, #1
   12930:	mov	r0, r4
   12934:	bl	112b8 <strcmp@plt>
   12938:	cmp	r0, #0
   1293c:	bne	12958 <__assert_fail@plt+0x1370>
   12940:	movw	r1, #55879	; 0xda47
   12944:	mov	r0, #0
   12948:	mov	r2, #5
   1294c:	movt	r1, #1
   12950:	bl	11348 <dcgettext@plt>
   12954:	mov	r4, r0
   12958:	movw	r0, #61904	; 0xf1d0
   1295c:	movw	r1, #55894	; 0xda56
   12960:	movw	r2, #53998	; 0xd2ee
   12964:	mov	r3, r4
   12968:	movt	r0, #2
   1296c:	movt	r1, #1
   12970:	movt	r2, #1
   12974:	mov	r5, r0
   12978:	ldrb	r0, [r0]
   1297c:	cmp	r0, #0
   12980:	movw	r0, #53997	; 0xd2ed
   12984:	movt	r0, #1
   12988:	movne	r2, r0
   1298c:	mov	r0, #1
   12990:	bl	114d4 <__printf_chk@plt>
   12994:	mov	r0, #1
   12998:	strb	r0, [r5]
   1299c:	ldr	r5, [sp, #80]	; 0x50
   129a0:	ldr	r0, [sl]
   129a4:	movw	r1, #55082	; 0xd72a
   129a8:	movt	r1, #1
   129ac:	str	r0, [sp, #68]	; 0x44
   129b0:	bl	112b8 <strcmp@plt>
   129b4:	cmp	r0, #0
   129b8:	bne	129d4 <__assert_fail@plt+0x13ec>
   129bc:	movw	r1, #55879	; 0xda47
   129c0:	mov	r0, #0
   129c4:	mov	r2, #5
   129c8:	movt	r1, #1
   129cc:	bl	11348 <dcgettext@plt>
   129d0:	str	r0, [sp, #68]	; 0x44
   129d4:	movw	r0, #61889	; 0xf1c1
   129d8:	movt	r0, #2
   129dc:	ldrb	r0, [r0]
   129e0:	cmp	r0, #0
   129e4:	beq	12b00 <__assert_fail@plt+0x1518>
   129e8:	ldr	r1, [sp, #100]	; 0x64
   129ec:	mov	r0, #3
   129f0:	sub	r2, fp, #176	; 0xb0
   129f4:	bl	1139c <__fxstat64@plt>
   129f8:	cmp	r0, #0
   129fc:	bne	12b18 <__assert_fail@plt+0x1530>
   12a00:	movw	r0, #61891	; 0xf1c3
   12a04:	movt	r0, #2
   12a08:	ldrb	r0, [r0]
   12a0c:	cmp	r0, #0
   12a10:	beq	12ca0 <__assert_fail@plt+0x16b8>
   12a14:	ldr	r0, [sp, #108]	; 0x6c
   12a18:	ldr	r1, [sp, #104]	; 0x68
   12a1c:	add	r6, sp, #120	; 0x78
   12a20:	mov	r8, #0
   12a24:	mov	r9, #0
   12a28:	orrs	r0, r0, r1
   12a2c:	beq	12e2c <__assert_fail@plt+0x1844>
   12a30:	ldr	r0, [sp, #100]	; 0x64
   12a34:	mov	r1, r6
   12a38:	mov	r2, #8192	; 0x2000
   12a3c:	bl	1a614 <__assert_fail@plt+0x902c>
   12a40:	cmp	r0, #0
   12a44:	beq	13b20 <__assert_fail@plt+0x2538>
   12a48:	ldr	r2, [sp, #108]	; 0x6c
   12a4c:	ldr	r3, [sp, #104]	; 0x68
   12a50:	cmn	r0, #1
   12a54:	beq	13b28 <__assert_fail@plt+0x2540>
   12a58:	adds	r8, r8, r0
   12a5c:	add	r5, r6, r0
   12a60:	movw	r0, #61893	; 0xf1c5
   12a64:	movt	r0, #2
   12a68:	adc	r9, r9, #0
   12a6c:	ldrb	r4, [r0]
   12a70:	mov	r0, r6
   12a74:	cmp	r4, #0
   12a78:	movwne	r4, #10
   12a7c:	str	r2, [sp, #108]	; 0x6c
   12a80:	sub	r2, r5, r0
   12a84:	mov	r1, r4
   12a88:	str	r3, [sp, #104]	; 0x68
   12a8c:	bl	11504 <memchr@plt>
   12a90:	cmp	r0, #0
   12a94:	beq	12ab8 <__assert_fail@plt+0x14d0>
   12a98:	ldr	r2, [sp, #108]	; 0x6c
   12a9c:	ldr	r3, [sp, #104]	; 0x68
   12aa0:	add	r0, r0, #1
   12aa4:	subs	r2, r2, #1
   12aa8:	sbc	r3, r3, #0
   12aac:	orrs	r1, r2, r3
   12ab0:	bne	12a7c <__assert_fail@plt+0x1494>
   12ab4:	b	12e1c <__assert_fail@plt+0x1834>
   12ab8:	ldr	r5, [sp, #80]	; 0x50
   12abc:	b	12a30 <__assert_fail@plt+0x1448>
   12ac0:	movw	r0, #61892	; 0xf1c4
   12ac4:	movt	r0, #2
   12ac8:	ldrb	r0, [r0]
   12acc:	cmp	r0, #0
   12ad0:	beq	12b70 <__assert_fail@plt+0x1588>
   12ad4:	mvn	r0, #0
   12ad8:	mov	r6, r5
   12adc:	str	r0, [r5, #48]	; 0x30
   12ae0:	add	r5, r5, #24
   12ae4:	bl	114b0 <__errno_location@plt>
   12ae8:	ldr	r1, [r0]
   12aec:	eor	r2, r4, #1
   12af0:	vst1.64	{d10-d11}, [r5]
   12af4:	strb	r2, [r6, #44]	; 0x2c
   12af8:	str	r1, [r6, #52]	; 0x34
   12afc:	b	12b74 <__assert_fail@plt+0x158c>
   12b00:	ldr	r1, [sp, #100]	; 0x64
   12b04:	mov	r0, #3
   12b08:	sub	r2, fp, #176	; 0xb0
   12b0c:	bl	1139c <__fxstat64@plt>
   12b10:	cmp	r0, #0
   12b14:	beq	12bc8 <__assert_fail@plt+0x15e0>
   12b18:	bl	114b0 <__errno_location@plt>
   12b1c:	movw	r1, #55908	; 0xda64
   12b20:	ldr	r4, [r0]
   12b24:	mov	r0, #0
   12b28:	mov	r2, #5
   12b2c:	movt	r1, #1
   12b30:	str	r0, [sp, #96]	; 0x60
   12b34:	mov	r0, #0
   12b38:	bl	11348 <dcgettext@plt>
   12b3c:	ldr	r1, [sp, #68]	; 0x44
   12b40:	mov	r5, r0
   12b44:	mov	r0, #4
   12b48:	bl	19fa0 <__assert_fail@plt+0x89b8>
   12b4c:	mov	r2, r5
   12b50:	ldr	r5, [sp, #80]	; 0x50
   12b54:	mov	r3, r0
   12b58:	mov	r0, #0
   12b5c:	mov	r1, r4
   12b60:	bl	113e4 <error@plt>
   12b64:	mov	r9, #0
   12b68:	mov	r6, #0
   12b6c:	b	136ec <__assert_fail@plt+0x2104>
   12b70:	bl	114b0 <__errno_location@plt>
   12b74:	ldr	r4, [r0]
   12b78:	movw	r1, #55765	; 0xd9d5
   12b7c:	mov	r0, #0
   12b80:	movt	r1, #1
   12b84:	mov	r2, #5
   12b88:	bl	11348 <dcgettext@plt>
   12b8c:	ldr	r6, [sl]
   12b90:	movw	r1, #55082	; 0xd72a
   12b94:	mov	r5, r0
   12b98:	movt	r1, #1
   12b9c:	mov	r0, r6
   12ba0:	bl	112b8 <strcmp@plt>
   12ba4:	cmp	r0, #0
   12ba8:	bne	12824 <__assert_fail@plt+0x123c>
   12bac:	movw	r1, #55879	; 0xda47
   12bb0:	mov	r0, #0
   12bb4:	mov	r2, #5
   12bb8:	movt	r1, #1
   12bbc:	bl	11348 <dcgettext@plt>
   12bc0:	mov	r6, r0
   12bc4:	b	12824 <__assert_fail@plt+0x123c>
   12bc8:	ldr	r4, [sp, #108]	; 0x6c
   12bcc:	ldr	r3, [sp, #104]	; 0x68
   12bd0:	mvn	r1, #0
   12bd4:	str	r7, [sp, #56]	; 0x38
   12bd8:	subs	r0, r1, r4
   12bdc:	sbcs	r0, r1, r3
   12be0:	movw	r1, #61903	; 0xf1cf
   12be4:	mov	r0, #0
   12be8:	movt	r1, #2
   12bec:	movwlt	r0, #1
   12bf0:	ldrb	r1, [r1]
   12bf4:	eor	r1, r1, #1
   12bf8:	and	r0, r0, r1
   12bfc:	movw	r1, #61891	; 0xf1c3
   12c00:	movt	r1, #2
   12c04:	ldrb	r1, [r1]
   12c08:	cmp	r1, #0
   12c0c:	beq	12ed8 <__assert_fail@plt+0x18f0>
   12c10:	cmp	r0, #0
   12c14:	beq	12e60 <__assert_fail@plt+0x1878>
   12c18:	ldr	r0, [fp, #-160]	; 0xffffff60
   12c1c:	ldr	r7, [sp, #100]	; 0x64
   12c20:	and	r0, r0, #61440	; 0xf000
   12c24:	cmp	r0, #32768	; 0x8000
   12c28:	bne	12c64 <__assert_fail@plt+0x167c>
   12c2c:	mov	r0, #1
   12c30:	mov	r2, r4
   12c34:	str	r0, [sp]
   12c38:	ldr	r0, [sp, #68]	; 0x44
   12c3c:	str	r0, [sp, #4]
   12c40:	mov	r0, r7
   12c44:	bl	15cc0 <__assert_fail@plt+0x46d8>
   12c48:	mvn	r7, #0
   12c4c:	ldr	r3, [sp, #104]	; 0x68
   12c50:	ldr	r4, [sp, #108]	; 0x6c
   12c54:	subs	r0, r7, r0
   12c58:	sbcs	r0, r7, r1
   12c5c:	ldr	r7, [sp, #100]	; 0x64
   12c60:	blt	12c98 <__assert_fail@plt+0x16b0>
   12c64:	mov	r0, #1
   12c68:	mov	r2, r4
   12c6c:	str	r0, [sp]
   12c70:	mov	r0, r7
   12c74:	bl	113b4 <lseek64@plt>
   12c78:	ldr	r3, [sp, #104]	; 0x68
   12c7c:	ldr	r4, [sp, #108]	; 0x6c
   12c80:	mvn	r7, #0
   12c84:	eor	r1, r1, r7
   12c88:	eor	r0, r0, r7
   12c8c:	orrs	r0, r0, r1
   12c90:	beq	12e60 <__assert_fail@plt+0x1878>
   12c94:	ldr	r7, [sp, #100]	; 0x64
   12c98:	mov	r9, r3
   12c9c:	b	12f44 <__assert_fail@plt+0x195c>
   12ca0:	movw	r0, #61903	; 0xf1cf
   12ca4:	str	sl, [sp, #28]
   12ca8:	str	r7, [sp, #56]	; 0x38
   12cac:	movt	r0, #2
   12cb0:	ldrb	r0, [r0]
   12cb4:	cmp	r0, #0
   12cb8:	bne	13328 <__assert_fail@plt+0x1d40>
   12cbc:	ldr	r0, [fp, #-160]	; 0xffffff60
   12cc0:	and	r0, r0, #61440	; 0xf000
   12cc4:	cmp	r0, #32768	; 0x8000
   12cc8:	bne	13328 <__assert_fail@plt+0x1d40>
   12ccc:	mov	r0, #1
   12cd0:	mov	r2, #0
   12cd4:	mov	r3, #0
   12cd8:	str	r0, [sp]
   12cdc:	ldr	r0, [sp, #100]	; 0x64
   12ce0:	bl	113b4 <lseek64@plt>
   12ce4:	mov	sl, r0
   12ce8:	mvn	r2, #0
   12cec:	eor	r0, r1, r2
   12cf0:	eor	r2, sl, r2
   12cf4:	orrs	r0, r2, r0
   12cf8:	beq	13328 <__assert_fail@plt+0x1d40>
   12cfc:	ldr	r4, [sp, #100]	; 0x64
   12d00:	mov	r0, #2
   12d04:	mov	r2, #0
   12d08:	mov	r3, #0
   12d0c:	str	r1, [sp, #76]	; 0x4c
   12d10:	str	r0, [sp]
   12d14:	mov	r0, r4
   12d18:	bl	113b4 <lseek64@plt>
   12d1c:	ldr	r3, [sp, #76]	; 0x4c
   12d20:	mov	ip, r0
   12d24:	subs	r0, sl, r0
   12d28:	sbcs	r0, r3, r1
   12d2c:	bge	1330c <__assert_fail@plt+0x1d24>
   12d30:	mov	r2, r1
   12d34:	orrs	r0, ip, r1
   12d38:	mov	r6, #1
   12d3c:	beq	13b7c <__assert_fail@plt+0x2594>
   12d40:	ldr	r0, [sp, #108]	; 0x6c
   12d44:	ldr	r1, [sp, #104]	; 0x68
   12d48:	orrs	r0, r0, r1
   12d4c:	beq	13b90 <__assert_fail@plt+0x25a8>
   12d50:	mov	r0, #0
   12d54:	ldr	r4, [sp, #100]	; 0x64
   12d58:	str	r2, [sp, #72]	; 0x48
   12d5c:	str	ip, [sp, #60]	; 0x3c
   12d60:	str	r0, [sp]
   12d64:	ldr	r0, [sp, #68]	; 0x44
   12d68:	str	r0, [sp, #4]
   12d6c:	subs	r0, ip, sl
   12d70:	sbc	r1, r2, r3
   12d74:	asr	r1, r1, #31
   12d78:	add	r1, r0, r1, lsr #19
   12d7c:	bfc	r1, #0, #13
   12d80:	subs	r5, r0, r1
   12d84:	mov	r0, r4
   12d88:	movweq	r5, #8192	; 0x2000
   12d8c:	subs	r8, ip, r5
   12d90:	sbc	r9, r2, #0
   12d94:	mov	r2, r8
   12d98:	mov	r3, r9
   12d9c:	bl	15cc0 <__assert_fail@plt+0x46d8>
   12da0:	mov	r0, r4
   12da4:	add	r1, sp, #120	; 0x78
   12da8:	mov	r2, r5
   12dac:	bl	1a614 <__assert_fail@plt+0x902c>
   12db0:	cmn	r0, #1
   12db4:	beq	13b9c <__assert_fail@plt+0x25b4>
   12db8:	mov	r4, r0
   12dbc:	adds	r0, r8, r0
   12dc0:	mov	r2, r8
   12dc4:	mov	r3, r9
   12dc8:	str	r0, [sp, #96]	; 0x60
   12dcc:	adc	r0, r9, #0
   12dd0:	cmp	r4, #0
   12dd4:	str	r0, [sp, #92]	; 0x5c
   12dd8:	beq	13bf8 <__assert_fail@plt+0x2610>
   12ddc:	movw	r1, #61893	; 0xf1c5
   12de0:	ldr	ip, [sp, #108]	; 0x6c
   12de4:	add	r0, sp, #120	; 0x78
   12de8:	ldr	r5, [sp, #104]	; 0x68
   12dec:	movt	r1, #2
   12df0:	add	r0, r4, r0
   12df4:	ldrb	r0, [r0, #-1]
   12df8:	ldrb	r1, [r1]
   12dfc:	subs	r8, ip, #1
   12e00:	sbc	r9, r5, #0
   12e04:	cmp	r1, #0
   12e08:	movwne	r1, #10
   12e0c:	cmp	r1, r0
   12e10:	moveq	r9, r5
   12e14:	moveq	r8, ip
   12e18:	b	13c00 <__assert_fail@plt+0x2618>
   12e1c:	cmp	r0, r5
   12e20:	subcc	r1, r5, r0
   12e24:	blcc	15d68 <__assert_fail@plt+0x4780>
   12e28:	ldr	r5, [sp, #80]	; 0x50
   12e2c:	ldr	r2, [sp, #100]	; 0x64
   12e30:	ldr	r1, [sp, #68]	; 0x44
   12e34:	mvn	r0, #0
   12e38:	str	r0, [sp]
   12e3c:	str	r0, [sp, #4]
   12e40:	mov	r0, #0
   12e44:	bl	15b58 <__assert_fail@plt+0x4570>
   12e48:	adds	r8, r0, r8
   12e4c:	str	r8, [sp, #96]	; 0x60
   12e50:	adc	r9, r1, r9
   12e54:	ldr	r8, [sp, #64]	; 0x40
   12e58:	mov	r6, #1
   12e5c:	b	136ec <__assert_fail@plt+0x2104>
   12e60:	ldr	r7, [sp, #100]	; 0x64
   12e64:	orrs	r0, r4, r3
   12e68:	mov	r0, #0
   12e6c:	beq	12f18 <__assert_fail@plt+0x1930>
   12e70:	mov	r9, #0
   12e74:	str	r0, [sp, #96]	; 0x60
   12e78:	mov	r0, r7
   12e7c:	add	r1, sp, #120	; 0x78
   12e80:	mov	r2, #8192	; 0x2000
   12e84:	mov	r8, r3
   12e88:	bl	1a614 <__assert_fail@plt+0x902c>
   12e8c:	cmp	r0, #0
   12e90:	beq	13b14 <__assert_fail@plt+0x252c>
   12e94:	ldr	r7, [sp, #56]	; 0x38
   12e98:	cmn	r0, #1
   12e9c:	beq	13ac4 <__assert_fail@plt+0x24dc>
   12ea0:	ldr	r1, [sp, #96]	; 0x60
   12ea4:	adds	r1, r1, r0
   12ea8:	str	r1, [sp, #96]	; 0x60
   12eac:	adc	r9, r9, #0
   12eb0:	subs	r1, r4, r0
   12eb4:	sbcs	r1, r8, #0
   12eb8:	bcc	12f24 <__assert_fail@plt+0x193c>
   12ebc:	ldr	r7, [sp, #100]	; 0x64
   12ec0:	subs	r4, r4, r0
   12ec4:	mov	r3, r8
   12ec8:	sbc	r3, r8, #0
   12ecc:	orrs	r0, r4, r3
   12ed0:	bne	12e78 <__assert_fail@plt+0x1890>
   12ed4:	b	12f3c <__assert_fail@plt+0x1954>
   12ed8:	cmp	r0, #0
   12edc:	mvn	r4, #0
   12ee0:	mvn	r5, #0
   12ee4:	mvn	ip, #0
   12ee8:	mvn	lr, #0
   12eec:	beq	12fbc <__assert_fail@plt+0x19d4>
   12ef0:	ldr	r0, [fp, #-160]	; 0xffffff60
   12ef4:	and	r0, r0, #53248	; 0xd000
   12ef8:	orr	r0, r0, #8192	; 0x2000
   12efc:	cmp	r0, #40960	; 0xa000
   12f00:	bne	12f74 <__assert_fail@plt+0x198c>
   12f04:	ldr	r0, [sp, #24]
   12f08:	mvn	ip, #0
   12f0c:	mvn	lr, #0
   12f10:	ldrd	r4, [r0]
   12f14:	b	12fbc <__assert_fail@plt+0x19d4>
   12f18:	str	r0, [sp, #96]	; 0x60
   12f1c:	mov	r9, #0
   12f20:	b	12f3c <__assert_fail@plt+0x1954>
   12f24:	add	r1, sp, #120	; 0x78
   12f28:	add	r3, r1, r4
   12f2c:	sub	r1, r0, r4
   12f30:	mov	r0, r3
   12f34:	bl	15d68 <__assert_fail@plt+0x4780>
   12f38:	ldr	r7, [sp, #100]	; 0x64
   12f3c:	ldr	r4, [sp, #96]	; 0x60
   12f40:	ldr	r8, [sp, #64]	; 0x40
   12f44:	mvn	r1, #0
   12f48:	mvn	r2, #0
   12f4c:	stm	sp, {r1, r2}
   12f50:	ldr	r1, [sp, #68]	; 0x44
   12f54:	mov	r0, #0
   12f58:	mov	r2, r7
   12f5c:	bl	15b58 <__assert_fail@plt+0x4570>
   12f60:	adds	r4, r0, r4
   12f64:	mov	r6, #1
   12f68:	adc	r9, r1, r9
   12f6c:	str	r4, [sp, #96]	; 0x60
   12f70:	b	136e8 <__assert_fail@plt+0x2100>
   12f74:	ldr	r4, [sp, #108]	; 0x6c
   12f78:	mov	r0, #2
   12f7c:	ldr	r5, [sp, #104]	; 0x68
   12f80:	str	r0, [sp]
   12f84:	ldr	r0, [sp, #100]	; 0x64
   12f88:	rsbs	r2, r4, #0
   12f8c:	rsc	r3, r5, #0
   12f90:	bl	113b4 <lseek64@plt>
   12f94:	adds	r4, r0, r4
   12f98:	mvn	r2, #0
   12f9c:	mov	lr, r1
   12fa0:	mov	ip, r0
   12fa4:	adc	r5, r1, r5
   12fa8:	eor	r3, r1, r2
   12fac:	eor	r1, r0, r2
   12fb0:	orrs	r0, r1, r3
   12fb4:	moveq	r5, r2
   12fb8:	moveq	r4, r2
   12fbc:	ldr	r0, [fp, #-120]	; 0xffffff88
   12fc0:	mov	r3, #0
   12fc4:	subs	r1, r0, #536870913	; 0x20000001
   12fc8:	rscs	r1, r3, r0, asr #31
   12fcc:	mov	r1, #0
   12fd0:	movwcc	r1, #1
   12fd4:	rsbs	r2, r0, #0
   12fd8:	sbcs	r2, r3, r0, asr #31
   12fdc:	mov	r2, #0
   12fe0:	movwlt	r2, #1
   12fe4:	ands	r1, r2, r1
   12fe8:	asrne	r1, r0, #31
   12fec:	moveq	r0, #512	; 0x200
   12ff0:	subs	r0, r0, r4
   12ff4:	sbcs	r0, r1, r5
   12ff8:	bge	130a8 <__assert_fail@plt+0x1ac0>
   12ffc:	mvn	r3, #0
   13000:	mov	r0, ip
   13004:	mov	r1, lr
   13008:	eor	r2, ip, r3
   1300c:	eor	r3, lr, r3
   13010:	orrs	r2, r2, r3
   13014:	bne	13038 <__assert_fail@plt+0x1a50>
   13018:	mov	r0, #1
   1301c:	mov	r2, #0
   13020:	mov	r3, #0
   13024:	str	r0, [sp]
   13028:	ldr	r0, [sp, #68]	; 0x44
   1302c:	str	r0, [sp, #4]
   13030:	ldr	r0, [sp, #100]	; 0x64
   13034:	bl	15cc0 <__assert_fail@plt+0x46d8>
   13038:	subs	r6, r4, r0
   1303c:	mov	ip, r0
   13040:	mov	r9, r1
   13044:	sbc	r3, r5, r1
   13048:	subs	r2, r0, r4
   1304c:	sbcs	r2, r1, r5
   13050:	bge	13a74 <__assert_fail@plt+0x248c>
   13054:	ldr	r1, [sp, #108]	; 0x6c
   13058:	ldr	r2, [sp, #104]	; 0x68
   1305c:	ldr	r7, [sp, #100]	; 0x64
   13060:	subs	r0, r1, r6
   13064:	sbcs	r0, r2, r3
   13068:	bcs	13a6c <__assert_fail@plt+0x2484>
   1306c:	mov	r0, #0
   13070:	subs	r4, r4, r1
   13074:	str	r0, [sp]
   13078:	ldr	r0, [sp, #68]	; 0x44
   1307c:	sbc	r9, r5, r2
   13080:	mov	r2, r4
   13084:	mov	r3, r9
   13088:	str	r0, [sp, #4]
   1308c:	mov	r0, r7
   13090:	bl	15cc0 <__assert_fail@plt+0x46d8>
   13094:	ldr	r2, [sp, #104]	; 0x68
   13098:	ldr	r1, [sp, #108]	; 0x6c
   1309c:	ldr	r7, [sp, #100]	; 0x64
   130a0:	ldr	r5, [sp, #80]	; 0x50
   130a4:	b	12f4c <__assert_fail@plt+0x1964>
   130a8:	movw	r0, #8200	; 0x2008
   130ac:	str	sl, [sp, #28]
   130b0:	bl	1ad78 <__assert_fail@plt+0x9790>
   130b4:	mov	r9, #0
   130b8:	mov	r1, #8192	; 0x2000
   130bc:	mov	sl, r0
   130c0:	str	r9, [r0, r1]!
   130c4:	str	r9, [r0, #4]
   130c8:	movw	r0, #8200	; 0x2008
   130cc:	bl	1ad78 <__assert_fail@plt+0x9790>
   130d0:	mov	r8, r0
   130d4:	ldr	r0, [sp, #100]	; 0x64
   130d8:	mov	r2, #8192	; 0x2000
   130dc:	mov	r1, r8
   130e0:	bl	1a614 <__assert_fail@plt+0x902c>
   130e4:	mov	r6, r0
   130e8:	add	r0, r0, #1
   130ec:	cmp	r0, #2
   130f0:	bcs	13104 <__assert_fail@plt+0x1b1c>
   130f4:	mov	r0, #0
   130f8:	mov	r5, #0
   130fc:	str	r0, [sp, #92]	; 0x5c
   13100:	b	131f4 <__assert_fail@plt+0x1c0c>
   13104:	mov	r0, #0
   13108:	mov	r9, #0
   1310c:	mov	r5, #0
   13110:	mov	r3, sl
   13114:	str	r0, [sp, #92]	; 0x5c
   13118:	b	13168 <__assert_fail@plt+0x1b80>
   1311c:	add	r0, r3, r0
   13120:	mov	r1, r8
   13124:	mov	r2, r6
   13128:	str	r3, [sp, #96]	; 0x60
   1312c:	bl	11318 <memcpy@plt>
   13130:	ldr	r0, [r7]
   13134:	ldr	r1, [r4]
   13138:	add	r0, r1, r0
   1313c:	str	r0, [r4]
   13140:	ldr	r0, [sp, #100]	; 0x64
   13144:	ldr	r7, [sp, #56]	; 0x38
   13148:	mov	r1, r8
   1314c:	mov	r2, #8192	; 0x2000
   13150:	bl	1a614 <__assert_fail@plt+0x902c>
   13154:	ldr	r3, [sp, #96]	; 0x60
   13158:	mov	r6, r0
   1315c:	add	r0, r0, #1
   13160:	cmp	r0, #1
   13164:	bls	131f4 <__assert_fail@plt+0x1c0c>
   13168:	mov	r7, r8
   1316c:	mov	r0, #8192	; 0x2000
   13170:	mov	r2, #0
   13174:	mov	r4, r3
   13178:	adds	r9, r9, r6
   1317c:	add	r5, r5, r6
   13180:	str	r6, [r7, r0]!
   13184:	ldr	r1, [sp, #92]	; 0x5c
   13188:	str	r2, [r7, #4]
   1318c:	ldr	r0, [r4, r0]!
   13190:	adc	r1, r1, #0
   13194:	str	r1, [sp, #92]	; 0x5c
   13198:	add	r1, r0, r6
   1319c:	cmp	r2, r1, lsr #13
   131a0:	beq	1311c <__assert_fail@plt+0x1b34>
   131a4:	add	r0, sl, #8192	; 0x2000
   131a8:	str	r8, [r4, #4]
   131ac:	ldr	r2, [sp, #108]	; 0x6c
   131b0:	ldr	r1, [r0]
   131b4:	sub	r1, r5, r1
   131b8:	subs	r2, r2, r1
   131bc:	ldr	r2, [sp, #104]	; 0x68
   131c0:	sbcs	r2, r2, #0
   131c4:	bcs	131e0 <__assert_fail@plt+0x1bf8>
   131c8:	ldr	r0, [r0, #4]
   131cc:	str	r8, [sp, #96]	; 0x60
   131d0:	mov	r8, sl
   131d4:	mov	r5, r1
   131d8:	mov	sl, r0
   131dc:	b	13140 <__assert_fail@plt+0x1b58>
   131e0:	movw	r0, #8200	; 0x2008
   131e4:	bl	1ad78 <__assert_fail@plt+0x9790>
   131e8:	str	r8, [sp, #96]	; 0x60
   131ec:	mov	r8, r0
   131f0:	b	13140 <__assert_fail@plt+0x1b58>
   131f4:	mov	r0, r8
   131f8:	str	r9, [sp, #96]	; 0x60
   131fc:	bl	1744c <__assert_fail@plt+0x5e64>
   13200:	cmn	r6, #1
   13204:	beq	132b0 <__assert_fail@plt+0x1cc8>
   13208:	mov	r3, #8192	; 0x2000
   1320c:	ldr	r7, [sp, #108]	; 0x6c
   13210:	ldr	r4, [sp, #104]	; 0x68
   13214:	mov	r6, sl
   13218:	movw	r8, #8196	; 0x2004
   1321c:	ldr	r1, [sl, r3]
   13220:	sub	r0, r5, r1
   13224:	subs	r2, r7, r0
   13228:	sbcs	r2, r4, #0
   1322c:	bcs	1324c <__assert_fail@plt+0x1c64>
   13230:	ldr	r6, [r6, r8]
   13234:	mov	r5, r0
   13238:	ldr	r1, [r6, r3]
   1323c:	sub	r0, r0, r1
   13240:	subs	r2, r7, r0
   13244:	sbcs	r2, r4, #0
   13248:	bcc	13230 <__assert_fail@plt+0x1c48>
   1324c:	subs	r0, r7, r5
   13250:	mov	r2, #0
   13254:	sbcs	r0, r4, #0
   13258:	movwcc	r2, #1
   1325c:	cmp	r2, #0
   13260:	subne	r2, r5, r7
   13264:	add	r0, r6, r2
   13268:	sub	r1, r1, r2
   1326c:	bl	15d68 <__assert_fail@plt+0x4780>
   13270:	ldr	r0, [r6, r8]
   13274:	ldr	r8, [sp, #64]	; 0x40
   13278:	mov	r6, #1
   1327c:	cmp	r0, #0
   13280:	beq	13a8c <__assert_fail@plt+0x24a4>
   13284:	ldr	r7, [sp, #56]	; 0x38
   13288:	mov	r5, #8192	; 0x2000
   1328c:	mov	r4, r0
   13290:	ldr	r1, [r4, r5]!
   13294:	bl	15d68 <__assert_fail@plt+0x4780>
   13298:	ldr	r0, [r4, #4]
   1329c:	cmp	r0, #0
   132a0:	bne	1328c <__assert_fail@plt+0x1ca4>
   132a4:	cmp	sl, #0
   132a8:	bne	13a98 <__assert_fail@plt+0x24b0>
   132ac:	b	13ab4 <__assert_fail@plt+0x24cc>
   132b0:	bl	114b0 <__errno_location@plt>
   132b4:	movw	r1, #55792	; 0xd9f0
   132b8:	ldr	r5, [r0]
   132bc:	mov	r0, #0
   132c0:	mov	r2, #5
   132c4:	mov	r6, #0
   132c8:	movt	r1, #1
   132cc:	bl	11348 <dcgettext@plt>
   132d0:	ldr	r1, [sp, #68]	; 0x44
   132d4:	mov	r4, r7
   132d8:	mov	r7, r0
   132dc:	mov	r0, #4
   132e0:	bl	19fa0 <__assert_fail@plt+0x89b8>
   132e4:	mov	r3, r0
   132e8:	mov	r0, #0
   132ec:	mov	r1, r5
   132f0:	mov	r2, r7
   132f4:	bl	113e4 <error@plt>
   132f8:	ldr	r8, [sp, #64]	; 0x40
   132fc:	mov	r7, r4
   13300:	cmp	sl, #0
   13304:	bne	13a98 <__assert_fail@plt+0x24b0>
   13308:	b	13ab4 <__assert_fail@plt+0x24cc>
   1330c:	mov	r0, #0
   13310:	mov	r2, sl
   13314:	str	r0, [sp]
   13318:	ldr	r0, [sp, #68]	; 0x44
   1331c:	str	r0, [sp, #4]
   13320:	mov	r0, r4
   13324:	bl	15cc0 <__assert_fail@plt+0x46d8>
   13328:	movw	r0, #8204	; 0x200c
   1332c:	bl	1ad78 <__assert_fail@plt+0x9790>
   13330:	mov	r1, #0
   13334:	mov	r7, #8192	; 0x2000
   13338:	mov	r4, r0
   1333c:	str	r1, [r0, r7]!
   13340:	str	r1, [r0, #4]
   13344:	str	r1, [r0, #8]
   13348:	movw	r0, #8204	; 0x200c
   1334c:	bl	1ad78 <__assert_fail@plt+0x9790>
   13350:	mov	sl, r0
   13354:	ldr	r0, [sp, #100]	; 0x64
   13358:	mov	r2, #8192	; 0x2000
   1335c:	mov	r1, sl
   13360:	bl	1a614 <__assert_fail@plt+0x902c>
   13364:	mov	r6, r0
   13368:	add	r0, r0, #1
   1336c:	str	r4, [sp, #76]	; 0x4c
   13370:	cmp	r0, #2
   13374:	mov	r0, #0
   13378:	bcs	13398 <__assert_fail@plt+0x1db0>
   1337c:	str	r0, [sp, #96]	; 0x60
   13380:	mov	r0, #0
   13384:	str	r4, [sp, #52]	; 0x34
   13388:	str	r0, [sp, #92]	; 0x5c
   1338c:	mov	r0, #0
   13390:	str	r0, [sp, #72]	; 0x48
   13394:	b	13524 <__assert_fail@plt+0x1f3c>
   13398:	str	r0, [sp, #96]	; 0x60
   1339c:	mov	r0, #0
   133a0:	str	r4, [sp, #52]	; 0x34
   133a4:	str	r0, [sp, #92]	; 0x5c
   133a8:	mov	r0, #0
   133ac:	str	r0, [sp, #72]	; 0x48
   133b0:	b	13414 <__assert_fail@plt+0x1e2c>
   133b4:	ldr	r1, [sp, #76]	; 0x4c
   133b8:	ldr	sl, [sp, #60]	; 0x3c
   133bc:	mov	r2, r6
   133c0:	str	r3, [sp, #72]	; 0x48
   133c4:	add	r0, r1, r0
   133c8:	mov	r1, sl
   133cc:	bl	11318 <memcpy@plt>
   133d0:	ldr	r0, [r4]
   133d4:	ldm	r7, {r1, r2}
   133d8:	ldr	r8, [sp, #64]	; 0x40
   133dc:	add	r0, r1, r0
   133e0:	str	r0, [r7]
   133e4:	ldr	r0, [r4, #4]
   133e8:	add	r0, r2, r0
   133ec:	str	r0, [r7, #4]
   133f0:	ldr	r0, [sp, #100]	; 0x64
   133f4:	mov	r1, sl
   133f8:	mov	r2, #8192	; 0x2000
   133fc:	mov	r7, #8192	; 0x2000
   13400:	bl	1a614 <__assert_fail@plt+0x902c>
   13404:	mov	r6, r0
   13408:	add	r0, r0, #1
   1340c:	cmp	r0, #1
   13410:	bls	13524 <__assert_fail@plt+0x1f3c>
   13414:	mov	r4, sl
   13418:	mov	r0, #0
   1341c:	mov	r5, sl
   13420:	mov	r1, sl
   13424:	add	sl, sl, r6
   13428:	str	r6, [r4, r7]!
   1342c:	sub	r2, sl, r1
   13430:	str	r1, [sp, #60]	; 0x3c
   13434:	str	r0, [r4, #4]
   13438:	str	r0, [r4, #8]
   1343c:	ldr	r0, [sp, #96]	; 0x60
   13440:	adds	r0, r0, r6
   13444:	str	r0, [sp, #96]	; 0x60
   13448:	ldr	r0, [sp, #92]	; 0x5c
   1344c:	adc	r0, r0, #0
   13450:	str	r0, [sp, #92]	; 0x5c
   13454:	movw	r0, #61893	; 0xf1c5
   13458:	movt	r0, #2
   1345c:	ldrb	r9, [r0]
   13460:	mov	r0, r1
   13464:	cmp	r9, #0
   13468:	movwne	r9, #10
   1346c:	mov	r1, r9
   13470:	bl	11504 <memchr@plt>
   13474:	ldr	r1, [sp, #76]	; 0x4c
   13478:	cmp	r0, #0
   1347c:	mov	r8, #0
   13480:	add	r7, r1, #8192	; 0x2000
   13484:	beq	134ac <__assert_fail@plt+0x1ec4>
   13488:	mov	r8, #0
   1348c:	add	r0, r0, #1
   13490:	add	r8, r8, #1
   13494:	mov	r1, r9
   13498:	sub	r2, sl, r0
   1349c:	str	r8, [r4, #4]
   134a0:	bl	11504 <memchr@plt>
   134a4:	cmp	r0, #0
   134a8:	bne	1348c <__assert_fail@plt+0x1ea4>
   134ac:	ldr	r0, [r7]
   134b0:	ldr	r3, [sp, #72]	; 0x48
   134b4:	mov	r2, #0
   134b8:	add	r1, r0, r6
   134bc:	add	r3, r8, r3
   134c0:	cmp	r2, r1, lsr #13
   134c4:	beq	133b4 <__assert_fail@plt+0x1dcc>
   134c8:	ldr	sl, [sp, #52]	; 0x34
   134cc:	movw	r0, #8196	; 0x2004
   134d0:	str	r5, [r7, #8]
   134d4:	ldr	r2, [sp, #108]	; 0x6c
   134d8:	ldr	r8, [sp, #64]	; 0x40
   134dc:	add	r0, sl, r0
   134e0:	ldr	r1, [r0]
   134e4:	sub	r1, r3, r1
   134e8:	subs	r2, r2, r1
   134ec:	ldr	r2, [sp, #104]	; 0x68
   134f0:	sbcs	r2, r2, #0
   134f4:	bcs	1350c <__assert_fail@plt+0x1f24>
   134f8:	ldr	r0, [r0, #4]
   134fc:	str	r1, [sp, #72]	; 0x48
   13500:	str	r5, [sp, #76]	; 0x4c
   13504:	str	r0, [sp, #52]	; 0x34
   13508:	b	133f0 <__assert_fail@plt+0x1e08>
   1350c:	movw	r0, #8204	; 0x200c
   13510:	str	r3, [sp, #72]	; 0x48
   13514:	bl	1ad78 <__assert_fail@plt+0x9790>
   13518:	mov	sl, r0
   1351c:	str	r5, [sp, #76]	; 0x4c
   13520:	b	133f0 <__assert_fail@plt+0x1e08>
   13524:	mov	r0, sl
   13528:	bl	1744c <__assert_fail@plt+0x5e64>
   1352c:	cmn	r6, #1
   13530:	beq	13598 <__assert_fail@plt+0x1fb0>
   13534:	ldr	lr, [sp, #108]	; 0x6c
   13538:	ldr	r4, [sp, #104]	; 0x68
   1353c:	mov	r6, #1
   13540:	orrs	r0, lr, r4
   13544:	beq	135dc <__assert_fail@plt+0x1ff4>
   13548:	ldr	r2, [sp, #76]	; 0x4c
   1354c:	ldr	sl, [sp, #28]
   13550:	ldr	r7, [sp, #52]	; 0x34
   13554:	add	r0, r2, #8192	; 0x2000
   13558:	ldr	r1, [r0]
   1355c:	cmp	r1, #0
   13560:	beq	136bc <__assert_fail@plt+0x20d4>
   13564:	add	r1, r1, r2
   13568:	movw	r2, #61893	; 0xf1c5
   1356c:	movt	r2, #2
   13570:	ldrb	r1, [r1, #-1]
   13574:	ldrb	r8, [r2]
   13578:	cmp	r8, #0
   1357c:	movwne	r8, #10
   13580:	cmp	r8, r1
   13584:	bne	135e4 <__assert_fail@plt+0x1ffc>
   13588:	ldr	ip, [sp, #72]	; 0x48
   1358c:	movw	r3, #8200	; 0x2008
   13590:	movw	r5, #8196	; 0x2004
   13594:	b	13600 <__assert_fail@plt+0x2018>
   13598:	bl	114b0 <__errno_location@plt>
   1359c:	movw	r1, #55792	; 0xd9f0
   135a0:	ldr	r4, [r0]
   135a4:	mov	r0, #0
   135a8:	mov	r2, #5
   135ac:	mov	r6, #0
   135b0:	movt	r1, #1
   135b4:	bl	11348 <dcgettext@plt>
   135b8:	ldr	r1, [sp, #68]	; 0x44
   135bc:	mov	r7, r0
   135c0:	mov	r0, #4
   135c4:	bl	19fa0 <__assert_fail@plt+0x89b8>
   135c8:	mov	r3, r0
   135cc:	mov	r0, #0
   135d0:	mov	r1, r4
   135d4:	mov	r2, r7
   135d8:	bl	113e4 <error@plt>
   135dc:	ldr	sl, [sp, #28]
   135e0:	b	136b8 <__assert_fail@plt+0x20d0>
   135e4:	ldr	r1, [r0, #4]
   135e8:	ldr	ip, [sp, #72]	; 0x48
   135ec:	movw	r3, #8200	; 0x2008
   135f0:	movw	r5, #8196	; 0x2004
   135f4:	add	r1, r1, #1
   135f8:	add	ip, ip, #1
   135fc:	str	r1, [r0, #4]
   13600:	ldr	r0, [r7, r5]
   13604:	sub	r1, ip, r0
   13608:	subs	r0, lr, r1
   1360c:	sbcs	r0, r4, #0
   13610:	mov	r0, r7
   13614:	bcs	13638 <__assert_fail@plt+0x2050>
   13618:	mov	r0, r7
   1361c:	ldr	r0, [r0, r3]
   13620:	mov	ip, r1
   13624:	ldr	r1, [r0, r5]
   13628:	sub	r1, ip, r1
   1362c:	subs	r2, lr, r1
   13630:	sbcs	r2, r4, #0
   13634:	bcc	1361c <__assert_fail@plt+0x2034>
   13638:	mov	r5, r0
   1363c:	mov	r1, #8192	; 0x2000
   13640:	ldr	r1, [r5, r1]!
   13644:	add	r1, r0, r1
   13648:	str	r1, [sp, #76]	; 0x4c
   1364c:	subs	r1, lr, ip
   13650:	sbcs	r1, r4, #0
   13654:	bcs	13678 <__assert_fail@plt+0x2090>
   13658:	subs	r1, ip, lr
   1365c:	beq	13678 <__assert_fail@plt+0x2090>
   13660:	sub	r7, lr, ip
   13664:	mov	r1, r8
   13668:	bl	1136c <rawmemchr@plt>
   1366c:	add	r0, r0, #1
   13670:	adds	r7, r7, #1
   13674:	bcc	13664 <__assert_fail@plt+0x207c>
   13678:	ldr	r1, [sp, #76]	; 0x4c
   1367c:	sub	r1, r1, r0
   13680:	bl	15d68 <__assert_fail@plt+0x4780>
   13684:	ldr	r0, [r5, #8]
   13688:	cmp	r0, #0
   1368c:	beq	136b4 <__assert_fail@plt+0x20cc>
   13690:	ldr	r8, [sp, #64]	; 0x40
   13694:	mov	r5, #8192	; 0x2000
   13698:	mov	r4, r0
   1369c:	ldr	r1, [r4, r5]!
   136a0:	bl	15d68 <__assert_fail@plt+0x4780>
   136a4:	ldr	r0, [r4, #8]
   136a8:	cmp	r0, #0
   136ac:	bne	13698 <__assert_fail@plt+0x20b0>
   136b0:	b	136b8 <__assert_fail@plt+0x20d0>
   136b4:	ldr	r8, [sp, #64]	; 0x40
   136b8:	ldr	r7, [sp, #52]	; 0x34
   136bc:	cmp	r7, #0
   136c0:	beq	136e0 <__assert_fail@plt+0x20f8>
   136c4:	movw	r5, #8200	; 0x2008
   136c8:	ldr	r4, [r7, r5]
   136cc:	mov	r0, r7
   136d0:	bl	1744c <__assert_fail@plt+0x5e64>
   136d4:	cmp	r4, #0
   136d8:	mov	r7, r4
   136dc:	bne	136c8 <__assert_fail@plt+0x20e0>
   136e0:	ldr	r5, [sp, #80]	; 0x50
   136e4:	ldr	r9, [sp, #92]	; 0x5c
   136e8:	ldr	r7, [sp, #56]	; 0x38
   136ec:	movw	r0, #61892	; 0xf1c4
   136f0:	movt	r0, #2
   136f4:	ldrb	r0, [r0]
   136f8:	cmp	r0, #0
   136fc:	beq	13814 <__assert_fail@plt+0x222c>
   13700:	ldr	r1, [sp, #100]	; 0x64
   13704:	eor	r0, r6, #1
   13708:	mov	r4, r5
   1370c:	add	r2, sp, #120	; 0x78
   13710:	rsb	r0, r0, #0
   13714:	str	r0, [r4, #52]!	; 0x34
   13718:	mov	r0, #3
   1371c:	bl	1139c <__fxstat64@plt>
   13720:	cmn	r0, #1
   13724:	ble	13848 <__assert_fail@plt+0x2260>
   13728:	ldr	r0, [sp, #136]	; 0x88
   1372c:	and	r1, r0, #61440	; 0xf000
   13730:	cmp	r1, #32768	; 0x8000
   13734:	bge	138cc <__assert_fail@plt+0x22e4>
   13738:	cmp	r1, #4096	; 0x1000
   1373c:	cmpne	r1, #8192	; 0x2000
   13740:	beq	138d4 <__assert_fail@plt+0x22ec>
   13744:	ldr	r1, [sp, #44]	; 0x2c
   13748:	mvn	r0, #0
   1374c:	mov	r6, r5
   13750:	mov	r2, #5
   13754:	str	r0, [r4]
   13758:	mov	r0, #0
   1375c:	strb	r0, [r1]
   13760:	movw	r0, #61902	; 0xf1ce
   13764:	mov	r1, #1
   13768:	movt	r0, #2
   1376c:	ldrb	r0, [r0]
   13770:	bic	r0, r1, r0
   13774:	movw	r1, #55809	; 0xda01
   13778:	movt	r1, #1
   1377c:	strb	r0, [r6, #44]!	; 0x2c
   13780:	mov	r0, #0
   13784:	bl	11348 <dcgettext@plt>
   13788:	ldr	r5, [sl]
   1378c:	movw	r1, #55082	; 0xd72a
   13790:	mov	r4, r0
   13794:	movt	r1, #1
   13798:	mov	r0, r5
   1379c:	bl	112b8 <strcmp@plt>
   137a0:	cmp	r0, #0
   137a4:	bne	137c0 <__assert_fail@plt+0x21d8>
   137a8:	movw	r1, #55879	; 0xda47
   137ac:	mov	r0, #0
   137b0:	mov	r2, #5
   137b4:	movt	r1, #1
   137b8:	bl	11348 <dcgettext@plt>
   137bc:	mov	r5, r0
   137c0:	mov	r0, #0
   137c4:	mov	r1, #3
   137c8:	mov	r2, r5
   137cc:	bl	1a21c <__assert_fail@plt+0x8c34>
   137d0:	mov	r5, r0
   137d4:	ldrb	r0, [r6]
   137d8:	cmp	r0, #0
   137dc:	movw	r0, #53998	; 0xd2ee
   137e0:	movt	r0, #1
   137e4:	beq	137fc <__assert_fail@plt+0x2214>
   137e8:	movw	r1, #55854	; 0xda2e
   137ec:	mov	r0, #0
   137f0:	mov	r2, #5
   137f4:	movt	r1, #1
   137f8:	bl	11348 <dcgettext@plt>
   137fc:	str	r0, [sp]
   13800:	mov	r0, #0
   13804:	mov	r1, #0
   13808:	mov	r2, r4
   1380c:	mov	r3, r5
   13810:	b	138c0 <__assert_fail@plt+0x22d8>
   13814:	ldr	r0, [sp, #100]	; 0x64
   13818:	cmp	r7, #0
   1381c:	beq	13a64 <__assert_fail@plt+0x247c>
   13820:	bl	115d0 <close@plt>
   13824:	ldr	r9, [sp, #48]	; 0x30
   13828:	cmp	r0, #0
   1382c:	beq	12848 <__assert_fail@plt+0x1260>
   13830:	bl	114b0 <__errno_location@plt>
   13834:	ldr	r4, [r0]
   13838:	movw	r1, #55792	; 0xd9f0
   1383c:	mov	r0, #0
   13840:	movt	r1, #1
   13844:	b	12b84 <__assert_fail@plt+0x159c>
   13848:	bl	114b0 <__errno_location@plt>
   1384c:	ldr	r1, [r0]
   13850:	mov	r2, #5
   13854:	str	r1, [r4]
   13858:	movw	r1, #55792	; 0xd9f0
   1385c:	ldr	r4, [r0]
   13860:	movt	r1, #1
   13864:	mov	r0, #0
   13868:	bl	11348 <dcgettext@plt>
   1386c:	ldr	r6, [sl]
   13870:	movw	r1, #55082	; 0xd72a
   13874:	mov	r5, r0
   13878:	movt	r1, #1
   1387c:	mov	r0, r6
   13880:	bl	112b8 <strcmp@plt>
   13884:	cmp	r0, #0
   13888:	bne	138a4 <__assert_fail@plt+0x22bc>
   1388c:	movw	r1, #55879	; 0xda47
   13890:	mov	r0, #0
   13894:	mov	r2, #5
   13898:	movt	r1, #1
   1389c:	bl	11348 <dcgettext@plt>
   138a0:	mov	r6, r0
   138a4:	mov	r0, #4
   138a8:	mov	r1, r6
   138ac:	bl	19fa0 <__assert_fail@plt+0x89b8>
   138b0:	mov	r3, r0
   138b4:	mov	r0, #0
   138b8:	mov	r1, r4
   138bc:	mov	r2, r5
   138c0:	bl	113e4 <error@plt>
   138c4:	ldr	r5, [sp, #80]	; 0x50
   138c8:	b	13998 <__assert_fail@plt+0x23b0>
   138cc:	cmpne	r1, #49152	; 0xc000
   138d0:	bne	13744 <__assert_fail@plt+0x215c>
   138d4:	cmp	r6, #0
   138d8:	beq	13998 <__assert_fail@plt+0x23b0>
   138dc:	ldr	r1, [sp, #96]	; 0x60
   138e0:	mov	r4, sl
   138e4:	ldr	sl, [sp, #100]	; 0x64
   138e8:	str	r9, [r5, #12]
   138ec:	cmp	r7, #0
   138f0:	mov	r6, #0
   138f4:	str	r1, [r5, #8]
   138f8:	ldr	r1, [sp, #40]	; 0x28
   138fc:	str	sl, [r5, #48]	; 0x30
   13900:	ldrd	r2, [r1]
   13904:	ldr	r1, [sp, #120]	; 0x78
   13908:	str	r2, [r5, #16]
   1390c:	str	r3, [r5, #20]
   13910:	ldr	r2, [sp, #124]	; 0x7c
   13914:	str	r1, [r5, #24]
   13918:	ldr	r1, [sp, #32]
   1391c:	str	r2, [r5, #28]
   13920:	ldrd	r2, [r1]
   13924:	mov	r1, #1
   13928:	mvneq	r1, #0
   1392c:	str	r6, [r5, #72]	; 0x48
   13930:	str	r6, [r5, #76]	; 0x4c
   13934:	str	r1, [r5, #56]	; 0x38
   13938:	str	r0, [r5, #40]	; 0x28
   1393c:	strb	r6, [r5, #44]	; 0x2c
   13940:	movw	r1, #55082	; 0xd72a
   13944:	movt	r1, #1
   13948:	str	r3, [r5, #36]	; 0x24
   1394c:	str	r2, [r5, #32]
   13950:	ldr	r4, [r4]
   13954:	mov	r0, r4
   13958:	bl	112b8 <strcmp@plt>
   1395c:	cmp	r0, #0
   13960:	bne	1397c <__assert_fail@plt+0x2394>
   13964:	movw	r1, #55879	; 0xda47
   13968:	mov	r0, #0
   1396c:	mov	r2, #5
   13970:	movt	r1, #1
   13974:	bl	11348 <dcgettext@plt>
   13978:	mov	r4, r0
   1397c:	mov	r0, sl
   13980:	mov	r1, r4
   13984:	bl	152d0 <__assert_fail@plt+0x3ce8>
   13988:	ldr	r9, [sp, #48]	; 0x30
   1398c:	strb	r0, [r5, #45]	; 0x2d
   13990:	mov	r6, #1
   13994:	b	12848 <__assert_fail@plt+0x1260>
   13998:	movw	r0, #61902	; 0xf1ce
   1399c:	mov	r1, #1
   139a0:	movt	r0, #2
   139a4:	ldrb	r0, [r0]
   139a8:	bic	r0, r1, r0
   139ac:	movw	r1, #55082	; 0xd72a
   139b0:	strb	r0, [r5, #44]	; 0x2c
   139b4:	movt	r1, #1
   139b8:	ldr	r4, [sl]
   139bc:	mov	r0, r4
   139c0:	bl	112b8 <strcmp@plt>
   139c4:	cmp	r0, #0
   139c8:	bne	139e4 <__assert_fail@plt+0x23fc>
   139cc:	movw	r1, #55879	; 0xda47
   139d0:	mov	r0, #0
   139d4:	mov	r2, #5
   139d8:	movt	r1, #1
   139dc:	bl	11348 <dcgettext@plt>
   139e0:	mov	r4, r0
   139e4:	ldr	r0, [sp, #100]	; 0x64
   139e8:	ldr	r9, [sp, #48]	; 0x30
   139ec:	add	r1, r0, #1
   139f0:	cmp	r1, #2
   139f4:	bcc	13a54 <__assert_fail@plt+0x246c>
   139f8:	bl	115d0 <close@plt>
   139fc:	ldr	r1, [sp, #100]	; 0x64
   13a00:	cmp	r0, #0
   13a04:	beq	13a54 <__assert_fail@plt+0x246c>
   13a08:	mov	r7, r1
   13a0c:	bl	114b0 <__errno_location@plt>
   13a10:	movw	r1, #56050	; 0xdaf2
   13a14:	ldr	r5, [r0]
   13a18:	mov	r0, #0
   13a1c:	mov	r2, #5
   13a20:	movt	r1, #1
   13a24:	bl	11348 <dcgettext@plt>
   13a28:	mov	r6, r0
   13a2c:	mov	r0, #4
   13a30:	mov	r1, r4
   13a34:	bl	19fa0 <__assert_fail@plt+0x89b8>
   13a38:	mov	r1, r5
   13a3c:	ldr	r5, [sp, #80]	; 0x50
   13a40:	mov	r3, r0
   13a44:	mov	r0, #0
   13a48:	mov	r2, r6
   13a4c:	str	r7, [sp]
   13a50:	bl	113e4 <error@plt>
   13a54:	mvn	r0, #0
   13a58:	mov	r6, #0
   13a5c:	str	r0, [r5, #48]	; 0x30
   13a60:	b	12848 <__assert_fail@plt+0x1260>
   13a64:	ldr	r9, [sp, #48]	; 0x30
   13a68:	b	12848 <__assert_fail@plt+0x1260>
   13a6c:	ldr	r5, [sp, #80]	; 0x50
   13a70:	b	13a84 <__assert_fail@plt+0x249c>
   13a74:	ldr	r5, [sp, #80]	; 0x50
   13a78:	ldr	r7, [sp, #100]	; 0x64
   13a7c:	ldr	r1, [sp, #108]	; 0x6c
   13a80:	ldr	r2, [sp, #104]	; 0x68
   13a84:	mov	r4, ip
   13a88:	b	12f4c <__assert_fail@plt+0x1964>
   13a8c:	ldr	r7, [sp, #56]	; 0x38
   13a90:	cmp	sl, #0
   13a94:	beq	13ab4 <__assert_fail@plt+0x24cc>
   13a98:	movw	r5, #8196	; 0x2004
   13a9c:	ldr	r4, [sl, r5]
   13aa0:	mov	r0, sl
   13aa4:	bl	1744c <__assert_fail@plt+0x5e64>
   13aa8:	cmp	r4, #0
   13aac:	mov	sl, r4
   13ab0:	bne	13a9c <__assert_fail@plt+0x24b4>
   13ab4:	ldr	r5, [sp, #80]	; 0x50
   13ab8:	ldr	sl, [sp, #28]
   13abc:	ldr	r9, [sp, #92]	; 0x5c
   13ac0:	b	136ec <__assert_fail@plt+0x2104>
   13ac4:	bl	114b0 <__errno_location@plt>
   13ac8:	movw	r1, #55792	; 0xd9f0
   13acc:	ldr	r4, [r0]
   13ad0:	mov	r0, #0
   13ad4:	mov	r2, #5
   13ad8:	mov	r6, #0
   13adc:	movt	r1, #1
   13ae0:	bl	11348 <dcgettext@plt>
   13ae4:	ldr	r1, [sp, #68]	; 0x44
   13ae8:	mov	r5, r0
   13aec:	mov	r0, #4
   13af0:	bl	19fa0 <__assert_fail@plt+0x89b8>
   13af4:	mov	r2, r5
   13af8:	ldr	r5, [sp, #80]	; 0x50
   13afc:	mov	r3, r0
   13b00:	mov	r0, #0
   13b04:	mov	r1, r4
   13b08:	bl	113e4 <error@plt>
   13b0c:	ldr	r8, [sp, #64]	; 0x40
   13b10:	b	136ec <__assert_fail@plt+0x2104>
   13b14:	ldr	r8, [sp, #64]	; 0x40
   13b18:	mov	r6, #1
   13b1c:	b	136e8 <__assert_fail@plt+0x2100>
   13b20:	str	r8, [sp, #96]	; 0x60
   13b24:	b	12e54 <__assert_fail@plt+0x186c>
   13b28:	str	r8, [sp, #96]	; 0x60
   13b2c:	bl	114b0 <__errno_location@plt>
   13b30:	movw	r1, #55792	; 0xd9f0
   13b34:	ldr	r4, [r0]
   13b38:	mov	r0, #0
   13b3c:	mov	r2, #5
   13b40:	mov	r6, #0
   13b44:	movt	r1, #1
   13b48:	bl	11348 <dcgettext@plt>
   13b4c:	ldr	r1, [sp, #68]	; 0x44
   13b50:	mov	r5, r0
   13b54:	mov	r0, #4
   13b58:	bl	19fa0 <__assert_fail@plt+0x89b8>
   13b5c:	mov	r3, r0
   13b60:	mov	r0, #0
   13b64:	mov	r1, r4
   13b68:	mov	r2, r5
   13b6c:	bl	113e4 <error@plt>
   13b70:	ldr	r5, [sp, #80]	; 0x50
   13b74:	ldr	r8, [sp, #64]	; 0x40
   13b78:	b	136ec <__assert_fail@plt+0x2104>
   13b7c:	ldr	sl, [sp, #28]
   13b80:	mov	r0, #0
   13b84:	mov	r9, #0
   13b88:	str	r0, [sp, #96]	; 0x60
   13b8c:	b	136ec <__assert_fail@plt+0x2104>
   13b90:	str	ip, [sp, #96]	; 0x60
   13b94:	str	r2, [sp, #92]	; 0x5c
   13b98:	b	13d58 <__assert_fail@plt+0x2770>
   13b9c:	ldr	r0, [sp, #60]	; 0x3c
   13ba0:	str	r0, [sp, #96]	; 0x60
   13ba4:	ldr	r0, [sp, #72]	; 0x48
   13ba8:	str	r0, [sp, #92]	; 0x5c
   13bac:	bl	114b0 <__errno_location@plt>
   13bb0:	movw	r1, #55792	; 0xd9f0
   13bb4:	ldr	r4, [r0]
   13bb8:	mov	r0, #0
   13bbc:	mov	r2, #5
   13bc0:	mov	r6, #0
   13bc4:	movt	r1, #1
   13bc8:	bl	11348 <dcgettext@plt>
   13bcc:	ldr	r1, [sp, #68]	; 0x44
   13bd0:	mov	r5, r0
   13bd4:	mov	r0, #4
   13bd8:	bl	19fa0 <__assert_fail@plt+0x89b8>
   13bdc:	mov	r2, r5
   13be0:	ldr	r5, [sp, #80]	; 0x50
   13be4:	mov	r3, r0
   13be8:	mov	r0, #0
   13bec:	mov	r1, r4
   13bf0:	bl	113e4 <error@plt>
   13bf4:	b	13d58 <__assert_fail@plt+0x2770>
   13bf8:	ldr	r8, [sp, #108]	; 0x6c
   13bfc:	ldr	r9, [sp, #104]	; 0x68
   13c00:	movw	r0, #61893	; 0xf1c5
   13c04:	str	r2, [sp, #104]	; 0x68
   13c08:	mov	r2, r4
   13c0c:	str	r3, [sp, #108]	; 0x6c
   13c10:	movt	r0, #2
   13c14:	ldrb	r7, [r0]
   13c18:	cmp	r7, #0
   13c1c:	movwne	r7, #10
   13c20:	cmp	r2, #0
   13c24:	add	r5, sp, #120	; 0x78
   13c28:	beq	13c60 <__assert_fail@plt+0x2678>
   13c2c:	mov	r0, r5
   13c30:	mov	r1, r7
   13c34:	bl	11498 <memrchr@plt>
   13c38:	cmp	r0, #0
   13c3c:	beq	13c60 <__assert_fail@plt+0x2678>
   13c40:	subs	r1, r8, #1
   13c44:	sub	r2, r0, r5
   13c48:	sbc	r3, r9, #0
   13c4c:	orrs	r5, r8, r9
   13c50:	mov	r8, r1
   13c54:	mov	r9, r3
   13c58:	bne	13c20 <__assert_fail@plt+0x2638>
   13c5c:	b	13cf4 <__assert_fail@plt+0x270c>
   13c60:	ldr	r4, [sp, #104]	; 0x68
   13c64:	ldr	r7, [sp, #76]	; 0x4c
   13c68:	ldr	r3, [sp, #108]	; 0x6c
   13c6c:	eor	r0, r4, sl
   13c70:	eor	r1, r3, r7
   13c74:	orrs	r0, r0, r1
   13c78:	beq	13d60 <__assert_fail@plt+0x2778>
   13c7c:	mov	r0, #0
   13c80:	ldr	r5, [sp, #100]	; 0x64
   13c84:	subs	r4, r4, #8192	; 0x2000
   13c88:	str	r0, [sp]
   13c8c:	ldr	r0, [sp, #68]	; 0x44
   13c90:	sbc	r3, r3, #0
   13c94:	mov	r2, r4
   13c98:	str	r3, [sp, #108]	; 0x6c
   13c9c:	str	r0, [sp, #4]
   13ca0:	mov	r0, r5
   13ca4:	bl	15cc0 <__assert_fail@plt+0x46d8>
   13ca8:	mov	r0, r5
   13cac:	add	r1, sp, #120	; 0x78
   13cb0:	mov	r2, #8192	; 0x2000
   13cb4:	bl	1a614 <__assert_fail@plt+0x902c>
   13cb8:	ldr	r5, [sp, #80]	; 0x50
   13cbc:	ldr	r7, [sp, #56]	; 0x38
   13cc0:	cmn	r0, #1
   13cc4:	beq	13bac <__assert_fail@plt+0x25c4>
   13cc8:	ldr	r3, [sp, #108]	; 0x6c
   13ccc:	mov	r1, r0
   13cd0:	adds	r0, r4, r0
   13cd4:	mov	r2, r4
   13cd8:	str	r0, [sp, #96]	; 0x60
   13cdc:	mov	r4, r1
   13ce0:	adc	r0, r3, #0
   13ce4:	cmp	r1, #0
   13ce8:	str	r0, [sp, #92]	; 0x5c
   13cec:	bne	13c00 <__assert_fail@plt+0x2618>
   13cf0:	b	13d58 <__assert_fail@plt+0x2770>
   13cf4:	mvn	r1, r2
   13cf8:	add	r0, r0, #1
   13cfc:	add	r1, r4, r1
   13d00:	bl	15d68 <__assert_fail@plt+0x4780>
   13d04:	ldr	r0, [sp, #60]	; 0x3c
   13d08:	ldr	r1, [sp, #72]	; 0x48
   13d0c:	ldr	r2, [sp, #104]	; 0x68
   13d10:	subs	r0, r0, r4
   13d14:	sbc	r1, r1, #0
   13d18:	subs	r0, r0, r2
   13d1c:	ldr	r2, [sp, #108]	; 0x6c
   13d20:	sbc	r1, r1, r2
   13d24:	stm	sp, {r0, r1}
   13d28:	ldr	r1, [sp, #68]	; 0x44
   13d2c:	ldr	r2, [sp, #100]	; 0x64
   13d30:	mov	r0, #0
   13d34:	bl	15b58 <__assert_fail@plt+0x4570>
   13d38:	ldr	r2, [sp, #96]	; 0x60
   13d3c:	adds	r2, r0, r2
   13d40:	ldr	r0, [sp, #92]	; 0x5c
   13d44:	str	r2, [sp, #96]	; 0x60
   13d48:	adc	r0, r1, r0
   13d4c:	ldr	r5, [sp, #80]	; 0x50
   13d50:	ldr	r7, [sp, #56]	; 0x38
   13d54:	str	r0, [sp, #92]	; 0x5c
   13d58:	ldr	r8, [sp, #64]	; 0x40
   13d5c:	b	13ab8 <__assert_fail@plt+0x24d0>
   13d60:	ldr	r4, [sp, #100]	; 0x64
   13d64:	ldr	r5, [sp, #68]	; 0x44
   13d68:	mov	r0, #0
   13d6c:	mov	r2, sl
   13d70:	mov	r3, r7
   13d74:	str	r0, [sp]
   13d78:	mov	r0, r4
   13d7c:	str	r5, [sp, #4]
   13d80:	bl	15cc0 <__assert_fail@plt+0x46d8>
   13d84:	ldr	r0, [sp, #60]	; 0x3c
   13d88:	mov	r1, r5
   13d8c:	mov	r2, r4
   13d90:	str	r0, [sp]
   13d94:	ldr	r0, [sp, #72]	; 0x48
   13d98:	str	r0, [sp, #4]
   13d9c:	mov	r0, #0
   13da0:	bl	15b58 <__assert_fail@plt+0x4570>
   13da4:	adds	r0, r0, sl
   13da8:	str	r0, [sp, #96]	; 0x60
   13dac:	adc	r0, r1, r7
   13db0:	b	13d4c <__assert_fail@plt+0x2764>
   13db4:	eor	r0, r6, #1
   13db8:	b	13dc0 <__assert_fail@plt+0x27d8>
   13dbc:	mov	r0, #0
   13dc0:	str	r0, [sp, #84]	; 0x54
   13dc4:	movw	r0, #61892	; 0xf1c4
   13dc8:	movt	r0, #2
   13dcc:	ldrb	r0, [r0]
   13dd0:	cmp	r0, #0
   13dd4:	cmpne	r8, #0
   13dd8:	bne	13e14 <__assert_fail@plt+0x282c>
   13ddc:	movw	r0, #61888	; 0xf1c0
   13de0:	movt	r0, #2
   13de4:	ldrb	r0, [r0]
   13de8:	cmp	r0, #1
   13dec:	bne	13e00 <__assert_fail@plt+0x2818>
   13df0:	mov	r0, #0
   13df4:	bl	115d0 <close@plt>
   13df8:	cmn	r0, #1
   13dfc:	ble	15214 <__assert_fail@plt+0x3c2c>
   13e00:	ldr	r0, [sp, #84]	; 0x54
   13e04:	sub	sp, fp, #64	; 0x40
   13e08:	vpop	{d8-d11}
   13e0c:	add	sp, sp, #4
   13e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e14:	movw	r4, #55082	; 0xd72a
   13e18:	add	r6, r9, #48	; 0x30
   13e1c:	mov	r7, r8
   13e20:	mov	r5, #0
   13e24:	mov	r8, #1
   13e28:	mvn	r9, #0
   13e2c:	movt	r4, #1
   13e30:	ldr	r0, [r6, #-48]	; 0xffffffd0
   13e34:	mov	r1, r4
   13e38:	bl	112b8 <strcmp@plt>
   13e3c:	cmp	r0, #0
   13e40:	bne	13e50 <__assert_fail@plt+0x2868>
   13e44:	ldrb	r0, [r6, #-4]
   13e48:	cmp	r0, #0
   13e4c:	beq	13e64 <__assert_fail@plt+0x287c>
   13e50:	add	r5, r5, #1
   13e54:	subs	r7, r7, #1
   13e58:	add	r6, r6, #80	; 0x50
   13e5c:	bne	13e30 <__assert_fail@plt+0x2848>
   13e60:	b	13e8c <__assert_fail@plt+0x28a4>
   13e64:	ldr	r0, [r6]
   13e68:	cmp	r0, #0
   13e6c:	bmi	13e50 <__assert_fail@plt+0x2868>
   13e70:	ldr	r0, [r6, #-8]
   13e74:	and	r0, r0, #61440	; 0xf000
   13e78:	cmp	r0, #4096	; 0x1000
   13e7c:	bne	13e50 <__assert_fail@plt+0x2868>
   13e80:	strb	r8, [r6, #-4]
   13e84:	str	r9, [r6]
   13e88:	b	13e54 <__assert_fail@plt+0x286c>
   13e8c:	ldr	r8, [sp, #64]	; 0x40
   13e90:	ldr	r9, [sp, #48]	; 0x30
   13e94:	cmp	r5, #0
   13e98:	beq	13ddc <__assert_fail@plt+0x27f4>
   13e9c:	sub	r2, fp, #176	; 0xb0
   13ea0:	mov	r0, #3
   13ea4:	mov	r1, #1
   13ea8:	bl	1139c <__fxstat64@plt>
   13eac:	cmn	r0, #1
   13eb0:	ble	15244 <__assert_fail@plt+0x3c5c>
   13eb4:	ldr	r0, [fp, #-160]	; 0xffffff60
   13eb8:	movw	r1, #61900	; 0xf1cc
   13ebc:	movw	r7, #61901	; 0xf1cd
   13ec0:	movt	r1, #2
   13ec4:	movt	r7, #2
   13ec8:	and	r0, r0, #61440	; 0xf000
   13ecc:	sub	r0, r0, #4096	; 0x1000
   13ed0:	clz	r0, r0
   13ed4:	lsr	r0, r0, #5
   13ed8:	strb	r0, [r1]
   13edc:	ldrb	r0, [r7]
   13ee0:	cmp	r0, #0
   13ee4:	bne	1406c <__assert_fail@plt+0x2a84>
   13ee8:	movw	r4, #55082	; 0xd72a
   13eec:	add	r5, r9, #44	; 0x2c
   13ef0:	mov	r6, r8
   13ef4:	movt	r4, #1
   13ef8:	b	13f08 <__assert_fail@plt+0x2920>
   13efc:	subs	r6, r6, #1
   13f00:	add	r5, r5, #80	; 0x50
   13f04:	beq	13f58 <__assert_fail@plt+0x2970>
   13f08:	ldrb	r0, [r5]
   13f0c:	cmp	r0, #0
   13f10:	bne	13efc <__assert_fail@plt+0x2914>
   13f14:	ldr	r0, [r5, #-44]	; 0xffffffd4
   13f18:	mov	r1, r4
   13f1c:	bl	112b8 <strcmp@plt>
   13f20:	cmp	r0, #0
   13f24:	bne	13efc <__assert_fail@plt+0x2914>
   13f28:	b	14064 <__assert_fail@plt+0x2a7c>
   13f2c:	add	r2, sp, #120	; 0x78
   13f30:	mov	r0, #3
   13f34:	mov	r1, #0
   13f38:	bl	1139c <__fxstat64@plt>
   13f3c:	cmp	r0, #0
   13f40:	bne	126cc <__assert_fail@plt+0x10e4>
   13f44:	ldr	r0, [sp, #136]	; 0x88
   13f48:	and	r0, r0, #61440	; 0xf000
   13f4c:	cmp	r0, #32768	; 0x8000
   13f50:	beq	126cc <__assert_fail@plt+0x10e4>
   13f54:	b	12700 <__assert_fail@plt+0x1118>
   13f58:	add	r0, r9, #45	; 0x2d
   13f5c:	mov	r1, r8
   13f60:	b	13f70 <__assert_fail@plt+0x2988>
   13f64:	subs	r1, r1, #1
   13f68:	add	r0, r0, #80	; 0x50
   13f6c:	beq	13f8c <__assert_fail@plt+0x29a4>
   13f70:	ldr	r2, [r0, #3]
   13f74:	cmp	r2, #0
   13f78:	bmi	13f64 <__assert_fail@plt+0x297c>
   13f7c:	ldrb	r2, [r0]
   13f80:	cmp	r2, #0
   13f84:	beq	13f64 <__assert_fail@plt+0x297c>
   13f88:	b	14064 <__assert_fail@plt+0x2a7c>
   13f8c:	add	r0, r9, #45	; 0x2d
   13f90:	mov	r1, r8
   13f94:	b	13fa4 <__assert_fail@plt+0x29bc>
   13f98:	subs	r1, r1, #1
   13f9c:	add	r0, r0, #80	; 0x50
   13fa0:	beq	14064 <__assert_fail@plt+0x2a7c>
   13fa4:	ldr	r2, [r0, #3]
   13fa8:	cmp	r2, #0
   13fac:	bmi	13f98 <__assert_fail@plt+0x29b0>
   13fb0:	ldrb	r2, [r0]
   13fb4:	cmp	r2, #0
   13fb8:	bne	13f98 <__assert_fail@plt+0x29b0>
   13fbc:	add	r6, sp, #120	; 0x78
   13fc0:	mov	r4, r9
   13fc4:	mov	r5, r8
   13fc8:	b	13fd8 <__assert_fail@plt+0x29f0>
   13fcc:	add	r4, r4, #80	; 0x50
   13fd0:	subs	r5, r5, #1
   13fd4:	beq	14004 <__assert_fail@plt+0x2a1c>
   13fd8:	ldr	r1, [r4]
   13fdc:	mov	r0, #3
   13fe0:	mov	r2, r6
   13fe4:	bl	115dc <__lxstat64@plt>
   13fe8:	cmp	r0, #0
   13fec:	bne	13fcc <__assert_fail@plt+0x29e4>
   13ff0:	ldr	r0, [sp, #136]	; 0x88
   13ff4:	and	r0, r0, #61440	; 0xf000
   13ff8:	cmp	r0, #40960	; 0xa000
   13ffc:	bne	13fcc <__assert_fail@plt+0x29e4>
   14000:	b	14064 <__assert_fail@plt+0x2a7c>
   14004:	add	r0, r9, #40	; 0x28
   14008:	mov	r1, r8
   1400c:	b	1401c <__assert_fail@plt+0x2a34>
   14010:	subs	r1, r1, #1
   14014:	add	r0, r0, #80	; 0x50
   14018:	beq	14040 <__assert_fail@plt+0x2a58>
   1401c:	ldr	r2, [r0, #8]
   14020:	cmp	r2, #0
   14024:	bmi	14010 <__assert_fail@plt+0x2a28>
   14028:	ldr	r2, [r0]
   1402c:	and	r2, r2, #61440	; 0xf000
   14030:	cmp	r2, #32768	; 0x8000
   14034:	cmpne	r2, #4096	; 0x1000
   14038:	beq	14010 <__assert_fail@plt+0x2a28>
   1403c:	b	14064 <__assert_fail@plt+0x2a7c>
   14040:	movw	r0, #61760	; 0xf140
   14044:	ldr	r1, [sp, #84]	; 0x54
   14048:	movt	r0, #2
   1404c:	ldr	r0, [r0]
   14050:	eor	r1, r1, #1
   14054:	subs	r0, r0, #2
   14058:	movwne	r0, #1
   1405c:	orrs	r0, r0, r1
   14060:	bne	14690 <__assert_fail@plt+0x30a8>
   14064:	mov	r0, #1
   14068:	strb	r0, [r7]
   1406c:	mov	r0, #1
   14070:	cmp	r8, #1
   14074:	strb	r0, [r7]
   14078:	bne	140a0 <__assert_fail@plt+0x2ab8>
   1407c:	movw	r0, #61896	; 0xf1c8
   14080:	movt	r0, #2
   14084:	ldr	r0, [r0]
   14088:	cmp	r0, #0
   1408c:	movweq	r0, #61760	; 0xf140
   14090:	movteq	r0, #2
   14094:	ldreq	r0, [r0]
   14098:	cmpeq	r0, #2
   1409c:	beq	14654 <__assert_fail@plt+0x306c>
   140a0:	sub	r0, r8, #1
   140a4:	mov	r6, #0
   140a8:	str	r0, [sp, #92]	; 0x5c
   140ac:	mov	r0, #2048	; 0x800
   140b0:	str	r0, [sp, #96]	; 0x60
   140b4:	add	r0, r9, #44	; 0x2c
   140b8:	str	r6, [sp, #100]	; 0x64
   140bc:	str	r0, [sp, #76]	; 0x4c
   140c0:	add	r0, r9, #72	; 0x48
   140c4:	str	r0, [sp, #80]	; 0x50
   140c8:	mov	r0, #0
   140cc:	str	r0, [sp, #88]	; 0x58
   140d0:	b	140f8 <__assert_fail@plt+0x2b10>
   140d4:	vmov.f64	d0, d8
   140d8:	bl	1b3f8 <__assert_fail@plt+0x9e10>
   140dc:	cmp	r0, #0
   140e0:	bne	15230 <__assert_fail@plt+0x3c48>
   140e4:	mov	r0, #0
   140e8:	mov	r4, #1
   140ec:	str	r0, [sp, #88]	; 0x58
   140f0:	tst	r4, #1
   140f4:	beq	13ddc <__assert_fail@plt+0x27f4>
   140f8:	ldr	r7, [sp, #80]	; 0x50
   140fc:	mov	sl, #0
   14100:	mov	r0, #0
   14104:	str	r0, [sp, #108]	; 0x6c
   14108:	b	14128 <__assert_fail@plt+0x2b40>
   1410c:	mov	r0, r9
   14110:	mov	r1, r6
   14114:	bl	15e14 <__assert_fail@plt+0x482c>
   14118:	add	sl, sl, #1
   1411c:	add	r7, r7, #80	; 0x50
   14120:	cmp	r8, sl
   14124:	beq	14500 <__assert_fail@plt+0x2f18>
   14128:	ldrb	r0, [r7, #-28]	; 0xffffffe4
   1412c:	cmp	r0, #0
   14130:	bne	14118 <__assert_fail@plt+0x2b30>
   14134:	ldr	r4, [r7, #-24]	; 0xffffffe8
   14138:	sub	r9, r7, #72	; 0x48
   1413c:	cmn	r4, #1
   14140:	ble	1410c <__assert_fail@plt+0x2b24>
   14144:	ldr	r5, [r7, #-72]	; 0xffffffb8
   14148:	movw	r1, #55082	; 0xd72a
   1414c:	movt	r1, #1
   14150:	mov	r0, r5
   14154:	bl	112b8 <strcmp@plt>
   14158:	cmp	r0, #0
   1415c:	bne	14178 <__assert_fail@plt+0x2b90>
   14160:	movw	r1, #55879	; 0xda47
   14164:	mov	r0, #0
   14168:	mov	r2, #5
   1416c:	movt	r1, #1
   14170:	bl	11348 <dcgettext@plt>
   14174:	mov	r5, r0
   14178:	ldr	r0, [r7, #-32]	; 0xffffffe0
   1417c:	str	r0, [sp, #104]	; 0x68
   14180:	ldr	r0, [r7, #-16]
   14184:	cmp	r0, r6
   14188:	mov	r0, r6
   1418c:	beq	141d0 <__assert_fail@plt+0x2be8>
   14190:	mov	r0, r4
   14194:	mov	r1, #3
   14198:	bl	17230 <__assert_fail@plt+0x5c48>
   1419c:	cmp	r0, #0
   141a0:	bmi	1426c <__assert_fail@plt+0x2c84>
   141a4:	ldr	r1, [sp, #96]	; 0x60
   141a8:	orr	r2, r0, r1
   141ac:	cmp	r2, r0
   141b0:	beq	141c8 <__assert_fail@plt+0x2be0>
   141b4:	mov	r0, r4
   141b8:	mov	r1, #4
   141bc:	bl	17230 <__assert_fail@plt+0x5c48>
   141c0:	cmn	r0, #1
   141c4:	beq	1426c <__assert_fail@plt+0x2c84>
   141c8:	str	r6, [r7, #-16]
   141cc:	mov	r0, r6
   141d0:	cmp	r0, #0
   141d4:	beq	1429c <__assert_fail@plt+0x2cb4>
   141d8:	ldr	r2, [r7, #-16]
   141dc:	mvn	r1, #0
   141e0:	subs	r0, r1, #1
   141e4:	sbc	r1, r1, #0
   141e8:	cmp	r2, #0
   141ec:	bne	14230 <__assert_fail@plt+0x2c48>
   141f0:	ldr	r0, [sp, #104]	; 0x68
   141f4:	mvn	r1, #0
   141f8:	and	r0, r0, #61440	; 0xf000
   141fc:	cmp	r0, #32768	; 0x8000
   14200:	mvn	r0, #0
   14204:	bne	14230 <__assert_fail@plt+0x2c48>
   14208:	ldrb	r0, [r7, #-27]	; 0xffffffe5
   1420c:	mvn	r1, #0
   14210:	cmp	r0, #0
   14214:	mvn	r0, #0
   14218:	beq	14230 <__assert_fail@plt+0x2c48>
   1421c:	ldr	r2, [sp, #36]	; 0x24
   14220:	ldrd	r0, [r7, #-64]	; 0xffffffc0
   14224:	ldrd	r2, [r2]
   14228:	subs	r0, r2, r0
   1422c:	sbc	r1, r3, r1
   14230:	stm	sp, {r0, r1}
   14234:	mov	r0, #0
   14238:	mov	r1, r5
   1423c:	mov	r2, r4
   14240:	bl	15b58 <__assert_fail@plt+0x4570>
   14244:	ldrd	r2, [r7, #-64]	; 0xffffffc0
   14248:	adds	r2, r2, r0
   1424c:	adc	r3, r3, r1
   14250:	orrs	r0, r0, r1
   14254:	ldr	r1, [sp, #108]	; 0x6c
   14258:	movwne	r0, #1
   1425c:	strd	r2, [r7, #-64]	; 0xffffffc0
   14260:	orr	r1, r1, r0
   14264:	str	r1, [sp, #108]	; 0x6c
   14268:	b	14118 <__assert_fail@plt+0x2b30>
   1426c:	ldr	r6, [r7, #-32]	; 0xffffffe0
   14270:	bl	114b0 <__errno_location@plt>
   14274:	ldr	r8, [r0]
   14278:	and	r0, r6, #61440	; 0xf000
   1427c:	cmp	r0, #32768	; 0x8000
   14280:	cmpeq	r8, #1
   14284:	bne	15188 <__assert_fail@plt+0x3ba0>
   14288:	ldr	r0, [r7, #-16]
   1428c:	ldr	r8, [sp, #64]	; 0x40
   14290:	ldr	r6, [sp, #100]	; 0x64
   14294:	cmp	r0, #0
   14298:	bne	141d8 <__assert_fail@plt+0x2bf0>
   1429c:	mov	r0, #3
   142a0:	mov	r1, r4
   142a4:	add	r2, sp, #120	; 0x78
   142a8:	bl	1139c <__fxstat64@plt>
   142ac:	cmp	r0, #0
   142b0:	beq	14304 <__assert_fail@plt+0x2d1c>
   142b4:	mvn	r0, #0
   142b8:	str	r0, [r7, #-24]	; 0xffffffe8
   142bc:	bl	114b0 <__errno_location@plt>
   142c0:	ldr	r1, [r0]
   142c4:	mov	r2, r5
   142c8:	str	r1, [r7, #-20]	; 0xffffffec
   142cc:	mov	r1, #3
   142d0:	ldr	r6, [r0]
   142d4:	mov	r0, #0
   142d8:	bl	1a21c <__assert_fail@plt+0x8c34>
   142dc:	movw	r2, #57262	; 0xdfae
   142e0:	mov	r1, r6
   142e4:	ldr	r6, [sp, #100]	; 0x64
   142e8:	mov	r3, r0
   142ec:	mov	r0, #0
   142f0:	movt	r2, #1
   142f4:	bl	113e4 <error@plt>
   142f8:	mov	r0, r4
   142fc:	bl	115d0 <close@plt>
   14300:	b	14118 <__assert_fail@plt+0x2b30>
   14304:	ldr	r1, [r7, #-32]	; 0xffffffe0
   14308:	ldr	r0, [sp, #136]	; 0x88
   1430c:	cmp	r1, r0
   14310:	bne	143e0 <__assert_fail@plt+0x2df8>
   14314:	and	r1, r1, #61440	; 0xf000
   14318:	cmp	r1, #32768	; 0x8000
   1431c:	bne	14344 <__assert_fail@plt+0x2d5c>
   14320:	ldr	r1, [sp, #36]	; 0x24
   14324:	ldr	r6, [r7, #-64]	; 0xffffffc0
   14328:	ldrd	r2, [r1]
   1432c:	ldr	r1, [r7, #-60]	; 0xffffffc4
   14330:	eor	r2, r6, r2
   14334:	ldr	r6, [sp, #100]	; 0x64
   14338:	eor	r1, r1, r3
   1433c:	orrs	r1, r2, r1
   14340:	bne	143e0 <__assert_fail@plt+0x2df8>
   14344:	ldr	r1, [sp, #40]	; 0x28
   14348:	ldr	r6, [r7, #-56]	; 0xffffffc8
   1434c:	ldrd	r2, [r1]
   14350:	ldr	r1, [r7, #-52]	; 0xffffffcc
   14354:	cmp	r6, r2
   14358:	mov	r2, #0
   1435c:	ldr	r6, [sp, #100]	; 0x64
   14360:	movwgt	r2, #1
   14364:	sublt	r2, r2, #1
   14368:	cmp	r1, r3
   1436c:	mov	r1, #0
   14370:	movwgt	r1, #1
   14374:	sublt	r1, r1, #1
   14378:	cmn	r1, r2, lsl #1
   1437c:	bne	143e0 <__assert_fail@plt+0x2df8>
   14380:	movw	r0, #61768	; 0xf148
   14384:	ldrd	r2, [r7]
   14388:	movt	r0, #2
   1438c:	ldrd	r0, [r0]
   14390:	adds	r4, r2, #1
   14394:	adc	r5, r3, #0
   14398:	strd	r4, [r7]
   1439c:	subs	r0, r2, r0
   143a0:	sbcs	r0, r3, r1
   143a4:	bcc	14118 <__assert_fail@plt+0x2b30>
   143a8:	movw	r0, #61760	; 0xf140
   143ac:	movt	r0, #2
   143b0:	ldr	r0, [r0]
   143b4:	cmp	r0, #1
   143b8:	bne	14118 <__assert_fail@plt+0x2b30>
   143bc:	ldr	r1, [r7, #-16]
   143c0:	mov	r0, r9
   143c4:	cmp	r1, #0
   143c8:	movwne	r1, #1
   143cc:	bl	15e14 <__assert_fail@plt+0x482c>
   143d0:	mov	r0, #0
   143d4:	str	r0, [r7]
   143d8:	str	r0, [r7, #4]
   143dc:	b	14118 <__assert_fail@plt+0x2b30>
   143e0:	ldr	r1, [sp, #40]	; 0x28
   143e4:	ldrd	r2, [r1]
   143e8:	mov	r1, #0
   143ec:	str	r1, [r7]
   143f0:	str	r1, [r7, #4]
   143f4:	str	r0, [r7, #-32]	; 0xffffffe0
   143f8:	ldr	r0, [sp, #104]	; 0x68
   143fc:	strd	r2, [r7, #-56]	; 0xffffffc8
   14400:	and	r0, r0, #61440	; 0xf000
   14404:	cmp	r0, #32768	; 0x8000
   14408:	bne	14490 <__assert_fail@plt+0x2ea8>
   1440c:	ldr	r2, [sp, #36]	; 0x24
   14410:	mov	r9, r7
   14414:	ldr	r0, [r9, #-64]!	; 0xffffffc0
   14418:	ldr	r1, [r9, #4]
   1441c:	ldrd	r2, [r2]
   14420:	subs	r0, r2, r0
   14424:	sbcs	r0, r3, r1
   14428:	bge	14490 <__assert_fail@plt+0x2ea8>
   1442c:	movw	r1, #56725	; 0xdd95
   14430:	mov	r0, #0
   14434:	mov	r2, #5
   14438:	movt	r1, #1
   1443c:	bl	11348 <dcgettext@plt>
   14440:	mov	r8, r0
   14444:	mov	r0, #0
   14448:	mov	r1, #3
   1444c:	mov	r2, r5
   14450:	bl	1a21c <__assert_fail@plt+0x8c34>
   14454:	mov	r2, r8
   14458:	ldr	r8, [sp, #64]	; 0x40
   1445c:	mov	r3, r0
   14460:	mov	r0, #0
   14464:	mov	r1, #0
   14468:	bl	113e4 <error@plt>
   1446c:	mov	r0, #0
   14470:	mov	r2, #0
   14474:	mov	r3, #0
   14478:	stm	sp, {r0, r5}
   1447c:	mov	r0, r4
   14480:	bl	15cc0 <__assert_fail@plt+0x46d8>
   14484:	mov	r0, #0
   14488:	str	r0, [r9]
   1448c:	str	r0, [r9, #4]
   14490:	ldr	r0, [sp, #92]	; 0x5c
   14494:	cmp	sl, r0
   14498:	beq	141d8 <__assert_fail@plt+0x2bf0>
   1449c:	movw	r0, #61890	; 0xf1c2
   144a0:	str	sl, [sp, #92]	; 0x5c
   144a4:	movt	r0, #2
   144a8:	ldrb	r0, [r0]
   144ac:	cmp	r0, #1
   144b0:	bne	141d8 <__assert_fail@plt+0x2bf0>
   144b4:	movw	r0, #61904	; 0xf1d0
   144b8:	movw	r1, #55894	; 0xda56
   144bc:	movw	r2, #53998	; 0xd2ee
   144c0:	mov	r3, r5
   144c4:	movt	r0, #2
   144c8:	movt	r1, #1
   144cc:	movt	r2, #1
   144d0:	mov	r9, r0
   144d4:	ldrb	r0, [r0]
   144d8:	cmp	r0, #0
   144dc:	movw	r0, #53997	; 0xd2ed
   144e0:	movt	r0, #1
   144e4:	movne	r2, r0
   144e8:	mov	r0, #1
   144ec:	bl	114d4 <__printf_chk@plt>
   144f0:	mov	r0, #1
   144f4:	str	sl, [sp, #92]	; 0x5c
   144f8:	strb	r0, [r9]
   144fc:	b	141d8 <__assert_fail@plt+0x2bf0>
   14500:	movw	r0, #61902	; 0xf1ce
   14504:	ldr	r4, [sp, #108]	; 0x6c
   14508:	movt	r0, #2
   1450c:	ldrb	r0, [r0]
   14510:	cmp	r0, #1
   14514:	bne	1452c <__assert_fail@plt+0x2f44>
   14518:	movw	r1, #61760	; 0xf140
   1451c:	movt	r1, #2
   14520:	ldr	r1, [r1]
   14524:	cmp	r1, #1
   14528:	beq	14568 <__assert_fail@plt+0x2f80>
   1452c:	ldr	r1, [sp, #76]	; 0x4c
   14530:	eor	r0, r0, #1
   14534:	mov	r2, r8
   14538:	ldr	r3, [r1, #4]
   1453c:	cmn	r3, #1
   14540:	bgt	14568 <__assert_fail@plt+0x2f80>
   14544:	ldrb	r3, [r1]
   14548:	cmp	r3, #0
   1454c:	movwne	r3, #1
   14550:	orrs	r3, r3, r0
   14554:	beq	14568 <__assert_fail@plt+0x2f80>
   14558:	add	r1, r1, #80	; 0x50
   1455c:	subs	r2, r2, #1
   14560:	bne	14538 <__assert_fail@plt+0x2f50>
   14564:	b	1462c <__assert_fail@plt+0x3044>
   14568:	mvn	r0, r4
   1456c:	orr	r0, r6, r0
   14570:	tst	r0, #1
   14574:	beq	14590 <__assert_fail@plt+0x2fa8>
   14578:	movw	r0, #61876	; 0xf1b4
   1457c:	movt	r0, #2
   14580:	ldr	r0, [r0]
   14584:	bl	11378 <fflush_unlocked@plt>
   14588:	cmp	r0, #0
   1458c:	bne	15200 <__assert_fail@plt+0x3c18>
   14590:	movw	r0, #61900	; 0xf1cc
   14594:	movt	r0, #2
   14598:	ldrb	r0, [r0]
   1459c:	cmp	r0, #0
   145a0:	beq	145d8 <__assert_fail@plt+0x2ff0>
   145a4:	mov	r0, #8
   145a8:	mov	r1, #1
   145ac:	mov	r2, #0
   145b0:	strh	r0, [sp, #124]	; 0x7c
   145b4:	mov	r0, #1
   145b8:	str	r0, [sp, #120]	; 0x78
   145bc:	add	r0, sp, #120	; 0x78
   145c0:	bl	11390 <poll@plt>
   145c4:	cmp	r0, #0
   145c8:	bmi	145d8 <__assert_fail@plt+0x2ff0>
   145cc:	ldrb	r0, [sp, #126]	; 0x7e
   145d0:	tst	r0, #8
   145d4:	bne	1522c <__assert_fail@plt+0x3c44>
   145d8:	ldr	r0, [sp, #88]	; 0x58
   145dc:	orr	r0, r0, r4
   145e0:	tst	r0, #1
   145e4:	bne	140f0 <__assert_fail@plt+0x2b08>
   145e8:	movw	r0, #61896	; 0xf1c8
   145ec:	movt	r0, #2
   145f0:	ldr	r0, [r0]
   145f4:	cmp	r0, #0
   145f8:	beq	140d4 <__assert_fail@plt+0x2aec>
   145fc:	mov	r1, #0
   14600:	bl	11444 <kill@plt>
   14604:	cmp	r0, #0
   14608:	beq	140d4 <__assert_fail@plt+0x2aec>
   1460c:	bl	114b0 <__errno_location@plt>
   14610:	ldr	r0, [r0]
   14614:	mov	r4, #1
   14618:	cmp	r0, #1
   1461c:	mov	r0, #1
   14620:	str	r0, [sp, #88]	; 0x58
   14624:	beq	140d4 <__assert_fail@plt+0x2aec>
   14628:	b	140f0 <__assert_fail@plt+0x2b08>
   1462c:	movw	r1, #56232	; 0xdba8
   14630:	mov	r0, #0
   14634:	mov	r2, #5
   14638:	movt	r1, #1
   1463c:	bl	11348 <dcgettext@plt>
   14640:	mov	r2, r0
   14644:	mov	r0, #0
   14648:	mov	r1, #0
   1464c:	bl	113e4 <error@plt>
   14650:	b	13ddc <__assert_fail@plt+0x27f4>
   14654:	ldr	r0, [r9, #48]	; 0x30
   14658:	cmn	r0, #1
   1465c:	beq	140a0 <__assert_fail@plt+0x2ab8>
   14660:	ldr	r0, [r9, #40]	; 0x28
   14664:	and	r0, r0, #61440	; 0xf000
   14668:	subs	r6, r0, #32768	; 0x8000
   1466c:	sub	r0, r0, #32768	; 0x8000
   14670:	clz	r0, r0
   14674:	movwne	r6, #1
   14678:	lsr	r0, r0, #5
   1467c:	lsl	r0, r0, #11
   14680:	str	r0, [sp, #96]	; 0x60
   14684:	mov	r0, #0
   14688:	str	r0, [sp, #92]	; 0x5c
   1468c:	b	140b4 <__assert_fail@plt+0x2acc>
   14690:	ldrb	r0, [r7]
   14694:	cmp	r0, #0
   14698:	bne	1406c <__assert_fail@plt+0x2a84>
   1469c:	bl	11480 <inotify_init@plt>
   146a0:	cmn	r0, #1
   146a4:	ble	14a34 <__assert_fail@plt+0x344c>
   146a8:	mov	r4, r0
   146ac:	movw	r0, #61876	; 0xf1b4
   146b0:	movt	r0, #2
   146b4:	ldr	r0, [r0]
   146b8:	bl	11378 <fflush_unlocked@plt>
   146bc:	cmp	r0, #0
   146c0:	bne	15200 <__assert_fail@plt+0x3c18>
   146c4:	movw	r2, #24044	; 0x5dec
   146c8:	movw	r3, #24060	; 0x5dfc
   146cc:	mov	r0, #0
   146d0:	mov	r1, #0
   146d4:	movt	r2, #1
   146d8:	movt	r3, #1
   146dc:	str	r0, [sp]
   146e0:	mov	r0, r8
   146e4:	bl	1791c <__assert_fail@plt+0x6334>
   146e8:	cmp	r0, #0
   146ec:	str	r0, [sp, #100]	; 0x64
   146f0:	beq	15278 <__assert_fail@plt+0x3c90>
   146f4:	movw	r0, #61760	; 0xf140
   146f8:	mov	r9, r8
   146fc:	mov	sl, #2
   14700:	str	r4, [sp, #104]	; 0x68
   14704:	movt	r0, #2
   14708:	ldr	r0, [r0]
   1470c:	cmp	r0, #1
   14710:	ldr	r0, [sp, #48]	; 0x30
   14714:	movweq	sl, #3078	; 0xc06
   14718:	str	sl, [sp, #88]	; 0x58
   1471c:	add	r8, r0, #68	; 0x44
   14720:	mov	r0, #0
   14724:	str	r0, [sp, #92]	; 0x5c
   14728:	mov	r0, #0
   1472c:	str	r0, [sp, #96]	; 0x60
   14730:	mov	r0, #0
   14734:	str	r0, [sp, #108]	; 0x6c
   14738:	b	14780 <__assert_fail@plt+0x3198>
   1473c:	mov	r0, r4
   14740:	mov	r1, r5
   14744:	mov	r2, sl
   14748:	bl	114a4 <inotify_add_watch@plt>
   1474c:	cmn	r0, #1
   14750:	str	r0, [r8, #-8]
   14754:	ble	14838 <__assert_fail@plt+0x3250>
   14758:	ldr	r0, [sp, #100]	; 0x64
   1475c:	sub	r1, r8, #68	; 0x44
   14760:	bl	18470 <__assert_fail@plt+0x6e88>
   14764:	mov	r1, #1
   14768:	cmp	r0, #0
   1476c:	str	r1, [sp, #92]	; 0x5c
   14770:	beq	15278 <__assert_fail@plt+0x3c90>
   14774:	subs	r9, r9, #1
   14778:	add	r8, r8, #80	; 0x50
   1477c:	beq	148b4 <__assert_fail@plt+0x32cc>
   14780:	ldrb	r0, [r8, #-24]	; 0xffffffe8
   14784:	cmp	r0, #0
   14788:	bne	14774 <__assert_fail@plt+0x318c>
   1478c:	ldr	r5, [r8, #-68]	; 0xffffffbc
   14790:	mov	r0, r5
   14794:	bl	11474 <strlen@plt>
   14798:	mvn	r1, #0
   1479c:	str	r1, [r8, #-8]
   147a0:	ldr	r1, [sp, #108]	; 0x6c
   147a4:	cmp	r1, r0
   147a8:	movcc	r1, r0
   147ac:	movw	r0, #61760	; 0xf140
   147b0:	movt	r0, #2
   147b4:	str	r1, [sp, #108]	; 0x6c
   147b8:	ldr	r0, [r0]
   147bc:	cmp	r0, #1
   147c0:	bne	1473c <__assert_fail@plt+0x3154>
   147c4:	mov	r0, r5
   147c8:	bl	17154 <__assert_fail@plt+0x5b6c>
   147cc:	ldrb	sl, [r5, r0]
   147d0:	mov	r4, r0
   147d4:	mov	r0, r5
   147d8:	bl	16f44 <__assert_fail@plt+0x595c>
   147dc:	sub	r0, r0, r5
   147e0:	movw	r1, #56134	; 0xdb46
   147e4:	cmp	r4, #0
   147e8:	movw	r2, #1924	; 0x784
   147ec:	str	r0, [r8]
   147f0:	mov	r0, #0
   147f4:	movt	r1, #1
   147f8:	strb	r0, [r5, r4]
   147fc:	ldr	r0, [sp, #104]	; 0x68
   14800:	ldrne	r1, [r8, #-68]	; 0xffffffbc
   14804:	bl	114a4 <inotify_add_watch@plt>
   14808:	str	r0, [r8, #-4]
   1480c:	ldr	r0, [r8, #-68]	; 0xffffffbc
   14810:	strb	sl, [r0, r4]
   14814:	ldr	r0, [r8, #-4]
   14818:	cmp	r0, #0
   1481c:	bmi	14fc4 <__assert_fail@plt+0x39dc>
   14820:	ldr	r5, [r8, #-68]	; 0xffffffbc
   14824:	ldr	r4, [sp, #104]	; 0x68
   14828:	ldr	sl, [sp, #88]	; 0x58
   1482c:	movw	r7, #61901	; 0xf1cd
   14830:	movt	r7, #2
   14834:	b	1473c <__assert_fail@plt+0x3154>
   14838:	ldr	r0, [r8, #-20]	; 0xffffffec
   1483c:	mvn	r1, #0
   14840:	subs	r5, r0, r1
   14844:	movwne	r5, #1
   14848:	bl	114b0 <__errno_location@plt>
   1484c:	ldr	r4, [r0]
   14850:	orr	r0, r4, #16
   14854:	cmp	r0, #28
   14858:	beq	14fdc <__assert_fail@plt+0x39f4>
   1485c:	ldr	r0, [sp, #96]	; 0x60
   14860:	orr	r0, r0, r5
   14864:	str	r0, [sp, #96]	; 0x60
   14868:	ldr	r0, [r8, #-16]
   1486c:	cmp	r4, r0
   14870:	beq	148ac <__assert_fail@plt+0x32c4>
   14874:	movw	r1, #56200	; 0xdb88
   14878:	mov	r0, #0
   1487c:	mov	r2, #5
   14880:	movt	r1, #1
   14884:	bl	11348 <dcgettext@plt>
   14888:	ldr	r1, [r8, #-68]	; 0xffffffbc
   1488c:	mov	r5, r0
   14890:	mov	r0, #4
   14894:	bl	19fa0 <__assert_fail@plt+0x89b8>
   14898:	mov	r3, r0
   1489c:	mov	r0, #0
   148a0:	mov	r1, r4
   148a4:	mov	r2, r5
   148a8:	bl	113e4 <error@plt>
   148ac:	ldr	r4, [sp, #104]	; 0x68
   148b0:	b	14774 <__assert_fail@plt+0x318c>
   148b4:	movw	r0, #61760	; 0xf140
   148b8:	ldr	r8, [sp, #64]	; 0x40
   148bc:	ldr	r9, [sp, #48]	; 0x30
   148c0:	movt	r0, #2
   148c4:	ldr	r0, [r0]
   148c8:	cmp	r0, #2
   148cc:	ldreq	r1, [sp, #96]	; 0x60
   148d0:	eoreq	r1, r1, #1
   148d4:	tsteq	r1, #1
   148d8:	beq	15048 <__assert_fail@plt+0x3a60>
   148dc:	ldr	r1, [sp, #92]	; 0x5c
   148e0:	subs	r0, r0, #2
   148e4:	movwne	r0, #1
   148e8:	orr	r0, r0, r1
   148ec:	tst	r0, #1
   148f0:	beq	152b4 <__assert_fail@plt+0x3ccc>
   148f4:	add	r0, r8, r8, lsl #2
   148f8:	mov	r7, r8
   148fc:	add	r8, r6, #96	; 0x60
   14900:	mov	r4, r9
   14904:	add	r0, r9, r0, lsl #4
   14908:	sub	r9, fp, #72	; 0x48
   1490c:	sub	r0, r0, #80	; 0x50
   14910:	str	r0, [fp, #-72]	; 0xffffffb8
   14914:	b	1493c <__assert_fail@plt+0x3354>
   14918:	mov	r0, r4
   1491c:	mov	r1, #0
   14920:	bl	15e14 <__assert_fail@plt+0x482c>
   14924:	mov	r0, r4
   14928:	mov	r1, r9
   1492c:	bl	16730 <__assert_fail@plt+0x5148>
   14930:	subs	r7, r7, #1
   14934:	add	r4, r4, #80	; 0x50
   14938:	beq	14a3c <__assert_fail@plt+0x3454>
   1493c:	ldrb	r0, [r4, #44]	; 0x2c
   14940:	cmp	r0, #0
   14944:	bne	14930 <__assert_fail@plt+0x3348>
   14948:	movw	r0, #61760	; 0xf140
   1494c:	movt	r0, #2
   14950:	ldr	r0, [r0]
   14954:	cmp	r0, #1
   14958:	beq	14918 <__assert_fail@plt+0x3330>
   1495c:	ldr	r0, [r4, #48]	; 0x30
   14960:	cmn	r0, #1
   14964:	beq	14924 <__assert_fail@plt+0x333c>
   14968:	ldr	r1, [r4]
   1496c:	mov	r0, #3
   14970:	mov	r2, r6
   14974:	bl	11594 <__xstat64@plt>
   14978:	cmp	r0, #0
   1497c:	bne	14924 <__assert_fail@plt+0x333c>
   14980:	ldrd	r0, [r4, #24]
   14984:	ldr	r2, [sp, #120]	; 0x78
   14988:	ldr	r3, [sp, #124]	; 0x7c
   1498c:	eor	r1, r1, r3
   14990:	eor	r0, r0, r2
   14994:	orrs	r0, r0, r1
   14998:	ldrdeq	r0, [r8]
   1499c:	ldrdeq	r2, [r4, #32]
   149a0:	eoreq	r1, r3, r1
   149a4:	eoreq	r0, r2, r0
   149a8:	orrseq	r0, r0, r1
   149ac:	beq	14924 <__assert_fail@plt+0x333c>
   149b0:	bl	114b0 <__errno_location@plt>
   149b4:	movw	r1, #56216	; 0xdb98
   149b8:	ldr	r6, [r0]
   149bc:	mov	r0, #0
   149c0:	mov	r2, #5
   149c4:	movt	r1, #1
   149c8:	bl	11348 <dcgettext@plt>
   149cc:	ldr	r4, [r4]
   149d0:	movw	r1, #55082	; 0xd72a
   149d4:	mov	r7, r0
   149d8:	movt	r1, #1
   149dc:	mov	r0, r4
   149e0:	bl	112b8 <strcmp@plt>
   149e4:	cmp	r0, #0
   149e8:	bne	14a04 <__assert_fail@plt+0x341c>
   149ec:	movw	r1, #55879	; 0xda47
   149f0:	mov	r0, #0
   149f4:	mov	r2, #5
   149f8:	movt	r1, #1
   149fc:	bl	11348 <dcgettext@plt>
   14a00:	mov	r4, r0
   14a04:	mov	r0, #4
   14a08:	mov	r1, r4
   14a0c:	bl	19fa0 <__assert_fail@plt+0x89b8>
   14a10:	mov	r3, r0
   14a14:	mov	r0, #0
   14a18:	mov	r1, r6
   14a1c:	mov	r2, r7
   14a20:	bl	113e4 <error@plt>
   14a24:	ldr	r8, [sp, #64]	; 0x40
   14a28:	movw	r7, #61901	; 0xf1cd
   14a2c:	movt	r7, #2
   14a30:	b	15040 <__assert_fail@plt+0x3a58>
   14a34:	bl	114b0 <__errno_location@plt>
   14a38:	b	15064 <__assert_fail@plt+0x3a7c>
   14a3c:	vldr	d16, [pc, #924]	; 14de0 <__assert_fail@plt+0x37f8>
   14a40:	vmul.f64	d16, d8, d16
   14a44:	vcvt.s32.f64	s0, d16
   14a48:	vcvt.f64.s32	d17, s0
   14a4c:	ldr	r0, [sp, #108]	; 0x6c
   14a50:	vmov	r8, s0
   14a54:	add	r0, r0, #17
   14a58:	vcmpe.f64	d16, d17
   14a5c:	str	r0, [sp, #72]	; 0x48
   14a60:	vmrs	APSR_nzcv, fpscr
   14a64:	addgt	r8, r8, #1
   14a68:	bl	1ad78 <__assert_fail@plt+0x9790>
   14a6c:	ldr	r9, [sp, #48]	; 0x30
   14a70:	vldr	d9, [pc, #880]	; 14de8 <__assert_fail@plt+0x3800>
   14a74:	str	r0, [sp, #80]	; 0x50
   14a78:	mov	r5, #0
   14a7c:	add	r7, sp, #120	; 0x78
   14a80:	mov	sl, #1
   14a84:	mov	r6, #0
   14a88:	add	r0, r9, #64	; 0x40
   14a8c:	str	r0, [sp, #68]	; 0x44
   14a90:	mov	r0, #3
   14a94:	str	r0, [sp, #60]	; 0x3c
   14a98:	mov	r0, #0
   14a9c:	str	r0, [sp, #76]	; 0x4c
   14aa0:	mov	r0, #0
   14aa4:	str	r0, [sp, #108]	; 0x6c
   14aa8:	b	14ab8 <__assert_fail@plt+0x34d0>
   14aac:	ldr	r9, [sp, #48]	; 0x30
   14ab0:	mov	r5, #0
   14ab4:	add	r7, sp, #120	; 0x78
   14ab8:	movw	r0, #61760	; 0xf140
   14abc:	movt	r0, #2
   14ac0:	ldr	r0, [r0]
   14ac4:	cmp	r0, #1
   14ac8:	bne	14af0 <__assert_fail@plt+0x3508>
   14acc:	movw	r0, #61902	; 0xf1ce
   14ad0:	movt	r0, #2
   14ad4:	ldrb	r0, [r0]
   14ad8:	cmp	r0, #0
   14adc:	bne	14af0 <__assert_fail@plt+0x3508>
   14ae0:	ldr	r0, [sp, #100]	; 0x64
   14ae4:	bl	17488 <__assert_fail@plt+0x5ea0>
   14ae8:	cmp	r0, #0
   14aec:	beq	1527c <__assert_fail@plt+0x3c94>
   14af0:	ldr	r0, [sp, #76]	; 0x4c
   14af4:	ldr	r1, [sp, #108]	; 0x6c
   14af8:	ldr	r4, [sp, #104]	; 0x68
   14afc:	cmp	r0, r1
   14b00:	bls	14b44 <__assert_fail@plt+0x355c>
   14b04:	ldr	r1, [sp, #108]	; 0x6c
   14b08:	b	14bf4 <__assert_fail@plt+0x360c>
   14b0c:	mvn	r2, #0
   14b10:	movw	r0, #61900	; 0xf1cc
   14b14:	str	sl, [sp, #128]	; 0x80
   14b18:	strh	sl, [sp, #124]	; 0x7c
   14b1c:	str	r4, [sp, #120]	; 0x78
   14b20:	str	r5, [sp, #132]	; 0x84
   14b24:	movt	r0, #2
   14b28:	ldrb	r0, [r0]
   14b2c:	add	r0, r0, #1
   14b30:	uxtb	r1, r0
   14b34:	mov	r0, r7
   14b38:	bl	11390 <poll@plt>
   14b3c:	cmp	r0, #0
   14b40:	bne	14bb8 <__assert_fail@plt+0x35d0>
   14b44:	movw	r0, #61896	; 0xf1c8
   14b48:	movt	r0, #2
   14b4c:	ldr	r0, [r0]
   14b50:	cmp	r0, #0
   14b54:	beq	14b0c <__assert_fail@plt+0x3524>
   14b58:	tst	r6, #1
   14b5c:	bne	15270 <__assert_fail@plt+0x3c88>
   14b60:	mov	r1, #0
   14b64:	mov	r6, #0
   14b68:	bl	11444 <kill@plt>
   14b6c:	cmp	r0, #0
   14b70:	beq	14b84 <__assert_fail@plt+0x359c>
   14b74:	bl	114b0 <__errno_location@plt>
   14b78:	ldr	r0, [r0]
   14b7c:	subs	r6, r0, #1
   14b80:	movwne	r6, #1
   14b84:	vcmpe.f64	d8, #0.0
   14b88:	mov	r0, #0
   14b8c:	mov	r2, r8
   14b90:	vmrs	APSR_nzcv, fpscr
   14b94:	movwls	r0, #1
   14b98:	vcmpe.f64	d8, d9
   14b9c:	orrs	r0, r0, r6
   14ba0:	eor	r0, r0, #1
   14ba4:	rsb	r0, r0, #0
   14ba8:	movne	r2, r0
   14bac:	vmrs	APSR_nzcv, fpscr
   14bb0:	movpl	r2, r0
   14bb4:	b	14b10 <__assert_fail@plt+0x3528>
   14bb8:	cmn	r0, #1
   14bbc:	ble	152a0 <__assert_fail@plt+0x3cb8>
   14bc0:	ldrh	r0, [sp, #134]	; 0x86
   14bc4:	cmp	r0, #0
   14bc8:	bne	1522c <__assert_fail@plt+0x3c44>
   14bcc:	ldr	r1, [sp, #80]	; 0x50
   14bd0:	ldr	r2, [sp, #72]	; 0x48
   14bd4:	mov	r0, r4
   14bd8:	bl	1a614 <__assert_fail@plt+0x902c>
   14bdc:	cmp	r0, #0
   14be0:	beq	14f30 <__assert_fail@plt+0x3948>
   14be4:	cmn	r0, #1
   14be8:	beq	14f40 <__assert_fail@plt+0x3958>
   14bec:	mov	r1, #0
   14bf0:	str	r0, [sp, #76]	; 0x4c
   14bf4:	ldr	r0, [sp, #80]	; 0x50
   14bf8:	mov	ip, r1
   14bfc:	add	r0, r0, r1
   14c00:	ldr	r1, [r0, #4]
   14c04:	str	r0, [sp, #96]	; 0x60
   14c08:	ldr	r0, [r0, #12]
   14c0c:	cmp	r0, #0
   14c10:	str	r1, [sp, #92]	; 0x5c
   14c14:	bne	14c4c <__assert_fail@plt+0x3664>
   14c18:	ldr	r1, [sp, #92]	; 0x5c
   14c1c:	ands	r1, r1, #1024	; 0x400
   14c20:	beq	14c4c <__assert_fail@plt+0x3664>
   14c24:	ldr	r1, [sp, #96]	; 0x60
   14c28:	ldr	r2, [sp, #68]	; 0x44
   14c2c:	ldr	r3, [sp, #64]	; 0x40
   14c30:	ldr	r1, [r1]
   14c34:	ldr	r7, [r2]
   14c38:	cmp	r1, r7
   14c3c:	beq	14f90 <__assert_fail@plt+0x39a8>
   14c40:	add	r2, r2, #80	; 0x50
   14c44:	subs	r3, r3, #1
   14c48:	bne	14c34 <__assert_fail@plt+0x364c>
   14c4c:	add	r1, ip, r0
   14c50:	cmp	r0, #0
   14c54:	add	r1, r1, #16
   14c58:	str	r1, [sp, #108]	; 0x6c
   14c5c:	beq	14df0 <__assert_fail@plt+0x3808>
   14c60:	ldr	r7, [sp, #96]	; 0x60
   14c64:	mov	r4, r9
   14c68:	ldr	r5, [sp, #64]	; 0x40
   14c6c:	ldr	r9, [r7], #16
   14c70:	b	14c80 <__assert_fail@plt+0x3698>
   14c74:	add	r4, r4, #80	; 0x50
   14c78:	subs	r5, r5, #1
   14c7c:	beq	14aac <__assert_fail@plt+0x34c4>
   14c80:	ldr	r0, [r4, #64]	; 0x40
   14c84:	cmp	r0, r9
   14c88:	bne	14c74 <__assert_fail@plt+0x368c>
   14c8c:	ldr	r0, [r4]
   14c90:	ldr	r1, [r4, #68]	; 0x44
   14c94:	add	r1, r0, r1
   14c98:	mov	r0, r7
   14c9c:	bl	112b8 <strcmp@plt>
   14ca0:	cmp	r0, #0
   14ca4:	bne	14c74 <__assert_fail@plt+0x368c>
   14ca8:	ldr	r9, [sp, #48]	; 0x30
   14cac:	cmp	r5, #0
   14cb0:	mov	r5, #0
   14cb4:	add	r7, sp, #120	; 0x78
   14cb8:	beq	14ab8 <__assert_fail@plt+0x34d0>
   14cbc:	ldr	r0, [sp, #92]	; 0x5c
   14cc0:	tst	r0, #512	; 0x200
   14cc4:	bne	14db8 <__assert_fail@plt+0x37d0>
   14cc8:	ldr	r1, [r4]
   14ccc:	ldr	r0, [sp, #104]	; 0x68
   14cd0:	ldr	r2, [sp, #88]	; 0x58
   14cd4:	bl	114a4 <inotify_add_watch@plt>
   14cd8:	mov	r7, r0
   14cdc:	cmn	r0, #1
   14ce0:	bgt	14d30 <__assert_fail@plt+0x3748>
   14ce4:	bl	114b0 <__errno_location@plt>
   14ce8:	ldr	r5, [r0]
   14cec:	orr	r0, r5, #16
   14cf0:	cmp	r0, #28
   14cf4:	beq	15090 <__assert_fail@plt+0x3aa8>
   14cf8:	movw	r1, #56200	; 0xdb88
   14cfc:	mov	r0, #0
   14d00:	mov	r2, #5
   14d04:	movt	r1, #1
   14d08:	bl	11348 <dcgettext@plt>
   14d0c:	ldr	r1, [r4]
   14d10:	mov	r9, r0
   14d14:	mov	r0, #4
   14d18:	bl	19fa0 <__assert_fail@plt+0x89b8>
   14d1c:	mov	r3, r0
   14d20:	mov	r0, #0
   14d24:	mov	r1, r5
   14d28:	mov	r2, r9
   14d2c:	bl	113e4 <error@plt>
   14d30:	ldr	r1, [r4, #60]	; 0x3c
   14d34:	ldr	r9, [sp, #48]	; 0x30
   14d38:	mov	r5, #0
   14d3c:	cmp	r1, #0
   14d40:	bmi	14d4c <__assert_fail@plt+0x3764>
   14d44:	cmp	r7, r1
   14d48:	beq	14db8 <__assert_fail@plt+0x37d0>
   14d4c:	cmp	r1, #0
   14d50:	bmi	14d68 <__assert_fail@plt+0x3780>
   14d54:	ldr	r0, [sp, #104]	; 0x68
   14d58:	bl	115ac <inotify_rm_watch@plt>
   14d5c:	ldr	r0, [sp, #100]	; 0x64
   14d60:	mov	r1, r4
   14d64:	bl	184b0 <__assert_fail@plt+0x6ec8>
   14d68:	ldr	r9, [sp, #48]	; 0x30
   14d6c:	str	r7, [r4, #60]	; 0x3c
   14d70:	cmn	r7, #1
   14d74:	mov	r5, #0
   14d78:	add	r7, sp, #120	; 0x78
   14d7c:	beq	14ab8 <__assert_fail@plt+0x34d0>
   14d80:	ldr	r0, [sp, #100]	; 0x64
   14d84:	mov	r1, r4
   14d88:	bl	184b0 <__assert_fail@plt+0x6ec8>
   14d8c:	cmp	r0, #0
   14d90:	movne	r7, r0
   14d94:	cmpne	r0, r4
   14d98:	bne	14e6c <__assert_fail@plt+0x3884>
   14d9c:	ldr	r0, [sp, #100]	; 0x64
   14da0:	mov	r1, r4
   14da4:	bl	18470 <__assert_fail@plt+0x6e88>
   14da8:	ldr	r9, [sp, #48]	; 0x30
   14dac:	cmp	r0, #0
   14db0:	mov	r5, #0
   14db4:	beq	15278 <__assert_fail@plt+0x3c90>
   14db8:	movw	r0, #61760	; 0xf140
   14dbc:	add	r7, sp, #120	; 0x78
   14dc0:	movt	r0, #2
   14dc4:	ldr	r0, [r0]
   14dc8:	cmp	r0, #1
   14dcc:	bne	14e18 <__assert_fail@plt+0x3830>
   14dd0:	mov	r0, r4
   14dd4:	mov	r1, #0
   14dd8:	bl	15e14 <__assert_fail@plt+0x482c>
   14ddc:	b	14e18 <__assert_fail@plt+0x3830>
   14de0:	andeq	r0, r0, r0
   14de4:	addmi	r4, pc, r0
   14de8:	andeq	r0, r0, r0
   14dec:	cmpmi	r0, sp, asr #4
   14df0:	ldr	r0, [sp, #96]	; 0x60
   14df4:	add	r7, sp, #120	; 0x78
   14df8:	mov	r1, r7
   14dfc:	ldr	r0, [r0]
   14e00:	str	r0, [sp, #180]	; 0xb4
   14e04:	ldr	r0, [sp, #100]	; 0x64
   14e08:	bl	17668 <__assert_fail@plt+0x6080>
   14e0c:	mov	r4, r0
   14e10:	cmp	r0, #0
   14e14:	beq	14ab8 <__assert_fail@plt+0x34d0>
   14e18:	ldr	r0, [sp, #96]	; 0x60
   14e1c:	movw	r1, #3588	; 0xe04
   14e20:	ldr	r0, [r0, #4]
   14e24:	tst	r0, r1
   14e28:	beq	14e5c <__assert_fail@plt+0x3874>
   14e2c:	tst	r0, #1024	; 0x400
   14e30:	beq	14e4c <__assert_fail@plt+0x3864>
   14e34:	ldr	r1, [r4, #60]	; 0x3c
   14e38:	ldr	r0, [sp, #104]	; 0x68
   14e3c:	bl	115ac <inotify_rm_watch@plt>
   14e40:	ldr	r0, [sp, #100]	; 0x64
   14e44:	mov	r1, r4
   14e48:	bl	184b0 <__assert_fail@plt+0x6ec8>
   14e4c:	mov	r0, r4
   14e50:	mov	r1, #0
   14e54:	bl	15e14 <__assert_fail@plt+0x482c>
   14e58:	b	14ab8 <__assert_fail@plt+0x34d0>
   14e5c:	mov	r0, r4
   14e60:	sub	r1, fp, #72	; 0x48
   14e64:	bl	16730 <__assert_fail@plt+0x5148>
   14e68:	b	14ab8 <__assert_fail@plt+0x34d0>
   14e6c:	movw	r0, #61760	; 0xf140
   14e70:	movt	r0, #2
   14e74:	ldr	r0, [r0]
   14e78:	cmp	r0, #1
   14e7c:	moveq	r0, r7
   14e80:	moveq	r1, #0
   14e84:	bleq	15e14 <__assert_fail@plt+0x482c>
   14e88:	mvn	r0, #0
   14e8c:	movw	r1, #55082	; 0xd72a
   14e90:	str	r0, [r7, #60]	; 0x3c
   14e94:	movt	r1, #1
   14e98:	ldr	r5, [r7]
   14e9c:	ldr	r9, [r7, #48]	; 0x30
   14ea0:	mov	r0, r5
   14ea4:	bl	112b8 <strcmp@plt>
   14ea8:	cmp	r0, #0
   14eac:	bne	14ec8 <__assert_fail@plt+0x38e0>
   14eb0:	movw	r1, #55879	; 0xda47
   14eb4:	mov	r0, #0
   14eb8:	mov	r2, #5
   14ebc:	movt	r1, #1
   14ec0:	bl	11348 <dcgettext@plt>
   14ec4:	mov	r5, r0
   14ec8:	add	r0, r9, #1
   14ecc:	cmp	r0, #2
   14ed0:	bcc	14d9c <__assert_fail@plt+0x37b4>
   14ed4:	mov	r0, r9
   14ed8:	bl	115d0 <close@plt>
   14edc:	cmp	r0, #0
   14ee0:	beq	14d9c <__assert_fail@plt+0x37b4>
   14ee4:	bl	114b0 <__errno_location@plt>
   14ee8:	ldr	r0, [r0]
   14eec:	movw	r1, #56050	; 0xdaf2
   14ef0:	mov	r2, #5
   14ef4:	movt	r1, #1
   14ef8:	str	r0, [sp, #92]	; 0x5c
   14efc:	mov	r0, #0
   14f00:	bl	11348 <dcgettext@plt>
   14f04:	mov	r7, r0
   14f08:	mov	r0, #4
   14f0c:	mov	r1, r5
   14f10:	bl	19fa0 <__assert_fail@plt+0x89b8>
   14f14:	ldr	r1, [sp, #92]	; 0x5c
   14f18:	mov	r3, r0
   14f1c:	mov	r0, #0
   14f20:	mov	r2, r7
   14f24:	str	r9, [sp]
   14f28:	bl	113e4 <error@plt>
   14f2c:	b	14d9c <__assert_fail@plt+0x37b4>
   14f30:	ldr	r0, [sp, #60]	; 0x3c
   14f34:	cmp	r0, #0
   14f38:	bne	14f5c <__assert_fail@plt+0x3974>
   14f3c:	b	152bc <__assert_fail@plt+0x3cd4>
   14f40:	bl	114b0 <__errno_location@plt>
   14f44:	ldr	r4, [r0]
   14f48:	ldr	r0, [sp, #60]	; 0x3c
   14f4c:	cmp	r0, #0
   14f50:	beq	152c4 <__assert_fail@plt+0x3cdc>
   14f54:	cmp	r4, #22
   14f58:	bne	152c4 <__assert_fail@plt+0x3cdc>
   14f5c:	ldr	r1, [sp, #72]	; 0x48
   14f60:	ldr	r0, [sp, #80]	; 0x50
   14f64:	lsl	r1, r1, #1
   14f68:	str	r1, [sp, #72]	; 0x48
   14f6c:	bl	1adc0 <__assert_fail@plt+0x97d8>
   14f70:	str	r0, [sp, #80]	; 0x50
   14f74:	ldr	r0, [sp, #60]	; 0x3c
   14f78:	ldr	r9, [sp, #48]	; 0x30
   14f7c:	mov	r5, #0
   14f80:	add	r7, sp, #120	; 0x78
   14f84:	sub	r0, r0, #1
   14f88:	str	r0, [sp, #60]	; 0x3c
   14f8c:	b	14a98 <__assert_fail@plt+0x34b0>
   14f90:	movw	r1, #56323	; 0xdc03
   14f94:	mov	r0, #0
   14f98:	mov	r2, #5
   14f9c:	movt	r1, #1
   14fa0:	bl	11348 <dcgettext@plt>
   14fa4:	mov	r2, r0
   14fa8:	mov	r0, #0
   14fac:	mov	r1, #0
   14fb0:	bl	113e4 <error@plt>
   14fb4:	ldr	r8, [sp, #64]	; 0x40
   14fb8:	movw	r7, #61901	; 0xf1cd
   14fbc:	movt	r7, #2
   14fc0:	b	15048 <__assert_fail@plt+0x3a60>
   14fc4:	bl	114b0 <__errno_location@plt>
   14fc8:	ldr	r4, [r0]
   14fcc:	movw	r7, #61901	; 0xf1cd
   14fd0:	movt	r7, #2
   14fd4:	cmp	r4, #28
   14fd8:	bne	15004 <__assert_fail@plt+0x3a1c>
   14fdc:	movw	r1, #56172	; 0xdb6c
   14fe0:	mov	r0, #0
   14fe4:	mov	r2, #5
   14fe8:	movt	r1, #1
   14fec:	bl	11348 <dcgettext@plt>
   14ff0:	mov	r2, r0
   14ff4:	mov	r0, #0
   14ff8:	mov	r1, #0
   14ffc:	bl	113e4 <error@plt>
   15000:	b	1503c <__assert_fail@plt+0x3a54>
   15004:	movw	r1, #56136	; 0xdb48
   15008:	mov	r0, #0
   1500c:	mov	r2, #5
   15010:	movt	r1, #1
   15014:	bl	11348 <dcgettext@plt>
   15018:	ldr	r1, [r8, #-68]	; 0xffffffbc
   1501c:	mov	r6, r0
   15020:	mov	r0, #4
   15024:	bl	19fa0 <__assert_fail@plt+0x89b8>
   15028:	mov	r3, r0
   1502c:	mov	r0, #0
   15030:	mov	r1, r4
   15034:	mov	r2, r6
   15038:	bl	113e4 <error@plt>
   1503c:	ldr	r8, [sp, #64]	; 0x40
   15040:	ldr	r9, [sp, #48]	; 0x30
   15044:	ldr	r4, [sp, #104]	; 0x68
   15048:	ldr	r0, [sp, #100]	; 0x64
   1504c:	bl	17c20 <__assert_fail@plt+0x6638>
   15050:	mov	r0, r4
   15054:	bl	115d0 <close@plt>
   15058:	bl	114b0 <__errno_location@plt>
   1505c:	mov	r1, #0
   15060:	str	r1, [r0]
   15064:	movw	r1, #54580	; 0xd534
   15068:	ldr	r4, [r0]
   1506c:	mov	r0, #0
   15070:	mov	r2, #5
   15074:	movt	r1, #1
   15078:	bl	11348 <dcgettext@plt>
   1507c:	mov	r2, r0
   15080:	mov	r0, #0
   15084:	mov	r1, r4
   15088:	bl	113e4 <error@plt>
   1508c:	b	1406c <__assert_fail@plt+0x2a84>
   15090:	movw	r1, #56172	; 0xdb6c
   15094:	mov	r0, #0
   15098:	mov	r2, #5
   1509c:	movt	r1, #1
   150a0:	bl	11348 <dcgettext@plt>
   150a4:	mov	r2, r0
   150a8:	mov	r0, #0
   150ac:	mov	r1, #0
   150b0:	bl	113e4 <error@plt>
   150b4:	b	14a24 <__assert_fail@plt+0x343c>
   150b8:	movw	r1, #55355	; 0xd83b
   150bc:	mov	r0, #0
   150c0:	mov	r2, #5
   150c4:	movt	r1, #1
   150c8:	bl	11348 <dcgettext@plt>
   150cc:	mov	r2, r0
   150d0:	mov	r0, #1
   150d4:	mov	r1, #0
   150d8:	mov	r3, r8
   150dc:	bl	113e4 <error@plt>
   150e0:	mov	r0, #1
   150e4:	bl	116e8 <__assert_fail@plt+0x100>
   150e8:	movw	r0, #61776	; 0xf150
   150ec:	movw	r2, #55342	; 0xd82e
   150f0:	movw	r5, #55298	; 0xd802
   150f4:	movw	r7, #55325	; 0xd81d
   150f8:	movw	r6, #55309	; 0xd80d
   150fc:	mov	r1, #0
   15100:	movt	r0, #2
   15104:	movt	r2, #1
   15108:	movt	r5, #1
   1510c:	movt	r7, #1
   15110:	movt	r6, #1
   15114:	ldr	r3, [r0]
   15118:	movw	r0, #61876	; 0xf1b4
   1511c:	stm	sp, {r5, r6, r7}
   15120:	str	r2, [sp, #12]
   15124:	movw	r2, #54874	; 0xd65a
   15128:	str	r1, [sp, #16]
   1512c:	movw	r1, #54436	; 0xd4a4
   15130:	movt	r0, #2
   15134:	movt	r1, #1
   15138:	movt	r2, #1
   1513c:	ldr	r0, [r0]
   15140:	bl	1ab44 <__assert_fail@plt+0x955c>
   15144:	mov	r0, #0
   15148:	bl	1145c <exit@plt>
   1514c:	mov	r0, #0
   15150:	bl	116e8 <__assert_fail@plt+0x100>
   15154:	movw	r1, #55268	; 0xd7e4
   15158:	mov	r0, #0
   1515c:	mov	r2, #5
   15160:	movt	r1, #1
   15164:	bl	11348 <dcgettext@plt>
   15168:	mov	r5, r0
   1516c:	ldr	r0, [r4]
   15170:	bl	1a4c8 <__assert_fail@plt+0x8ee0>
   15174:	mov	r3, r0
   15178:	mov	r0, #1
   1517c:	mov	r1, #0
   15180:	mov	r2, r5
   15184:	bl	113e4 <error@plt>
   15188:	movw	r1, #56744	; 0xdda8
   1518c:	mov	r0, #0
   15190:	mov	r2, #5
   15194:	movt	r1, #1
   15198:	bl	11348 <dcgettext@plt>
   1519c:	mov	r4, r0
   151a0:	mov	r0, #0
   151a4:	mov	r1, #3
   151a8:	mov	r2, r5
   151ac:	bl	1a21c <__assert_fail@plt+0x8c34>
   151b0:	mov	r3, r0
   151b4:	mov	r0, #1
   151b8:	mov	r1, r8
   151bc:	mov	r2, r4
   151c0:	bl	113e4 <error@plt>
   151c4:	movw	r1, #54465	; 0xd4c1
   151c8:	mov	r0, #0
   151cc:	mov	r2, #5
   151d0:	movt	r1, #1
   151d4:	bl	11348 <dcgettext@plt>
   151d8:	movw	r1, #55082	; 0xd72a
   151dc:	mov	r4, r0
   151e0:	mov	r0, #4
   151e4:	movt	r1, #1
   151e8:	bl	19fa0 <__assert_fail@plt+0x89b8>
   151ec:	mov	r3, r0
   151f0:	mov	r0, #1
   151f4:	mov	r1, #0
   151f8:	mov	r2, r4
   151fc:	bl	113e4 <error@plt>
   15200:	bl	114b0 <__errno_location@plt>
   15204:	ldr	r4, [r0]
   15208:	movw	r1, #54568	; 0xd528
   1520c:	movt	r1, #1
   15210:	b	15254 <__assert_fail@plt+0x3c6c>
   15214:	bl	114b0 <__errno_location@plt>
   15218:	ldr	r1, [r0]
   1521c:	movw	r2, #55082	; 0xd72a
   15220:	mov	r0, #1
   15224:	movt	r2, #1
   15228:	bl	113e4 <error@plt>
   1522c:	bl	169a4 <__assert_fail@plt+0x53bc>
   15230:	bl	114b0 <__errno_location@plt>
   15234:	ldr	r4, [r0]
   15238:	movw	r1, #56779	; 0xddcb
   1523c:	movt	r1, #1
   15240:	b	15254 <__assert_fail@plt+0x3c6c>
   15244:	bl	114b0 <__errno_location@plt>
   15248:	ldr	r4, [r0]
   1524c:	movw	r1, #54552	; 0xd518
   15250:	movt	r1, #1
   15254:	mov	r0, #0
   15258:	mov	r2, #5
   1525c:	bl	11348 <dcgettext@plt>
   15260:	mov	r2, r0
   15264:	mov	r0, #1
   15268:	mov	r1, r4
   1526c:	bl	113e4 <error@plt>
   15270:	mov	r0, #0
   15274:	bl	1145c <exit@plt>
   15278:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1527c:	movw	r1, #56232	; 0xdba8
   15280:	mov	r0, #0
   15284:	mov	r2, #5
   15288:	movt	r1, #1
   1528c:	bl	11348 <dcgettext@plt>
   15290:	mov	r2, r0
   15294:	mov	r0, #1
   15298:	mov	r1, #0
   1529c:	bl	113e4 <error@plt>
   152a0:	bl	114b0 <__errno_location@plt>
   152a4:	ldr	r4, [r0]
   152a8:	movw	r1, #56251	; 0xdbbb
   152ac:	movt	r1, #1
   152b0:	b	15254 <__assert_fail@plt+0x3c6c>
   152b4:	mov	r0, #1
   152b8:	bl	1145c <exit@plt>
   152bc:	bl	114b0 <__errno_location@plt>
   152c0:	ldr	r4, [r0]
   152c4:	movw	r1, #56295	; 0xdbe7
   152c8:	movt	r1, #1
   152cc:	b	15254 <__assert_fail@plt+0x3c6c>
   152d0:	push	{r4, r5, r6, r7, fp, lr}
   152d4:	add	fp, sp, #16
   152d8:	sub	sp, sp, #88	; 0x58
   152dc:	mov	r5, r1
   152e0:	mov	r1, sp
   152e4:	bl	11288 <fstatfs64@plt>
   152e8:	cmp	r0, #0
   152ec:	beq	15340 <__assert_fail@plt+0x3d58>
   152f0:	bl	114b0 <__errno_location@plt>
   152f4:	ldr	r6, [r0]
   152f8:	mov	r4, #1
   152fc:	cmp	r6, #38	; 0x26
   15300:	beq	15b44 <__assert_fail@plt+0x455c>
   15304:	movw	r1, #56069	; 0xdb05
   15308:	mov	r0, #0
   1530c:	mov	r2, #5
   15310:	movt	r1, #1
   15314:	bl	11348 <dcgettext@plt>
   15318:	mov	r7, r0
   1531c:	mov	r0, #4
   15320:	mov	r1, r5
   15324:	bl	19fa0 <__assert_fail@plt+0x89b8>
   15328:	mov	r3, r0
   1532c:	mov	r0, #0
   15330:	mov	r1, r6
   15334:	mov	r2, r7
   15338:	bl	113e4 <error@plt>
   1533c:	b	15b44 <__assert_fail@plt+0x455c>
   15340:	ldr	r0, [sp]
   15344:	movw	r1, #63411	; 0xf7b3
   15348:	mov	r4, #0
   1534c:	movt	r1, #303	; 0x12f
   15350:	cmp	r0, r1
   15354:	ble	153b0 <__assert_fail@plt+0x3dc8>
   15358:	movw	r1, #12620	; 0x314c
   1535c:	movt	r1, #21318	; 0x5346
   15360:	cmp	r0, r1
   15364:	bgt	1541c <__assert_fail@plt+0x3e34>
   15368:	movw	r1, #15684	; 0x3d44
   1536c:	movt	r1, #10445	; 0x28cd
   15370:	cmp	r0, r1
   15374:	bgt	154c8 <__assert_fail@plt+0x3ee0>
   15378:	movw	r1, #30803	; 0x7853
   1537c:	movt	r1, #4400	; 0x1130
   15380:	cmp	r0, r1
   15384:	bgt	155fc <__assert_fail@plt+0x4014>
   15388:	movw	r1, #22560	; 0x5820
   1538c:	movt	r1, #1893	; 0x765
   15390:	cmp	r0, r1
   15394:	bgt	157d8 <__assert_fail@plt+0x41f0>
   15398:	movw	r1, #2124	; 0x84c
   1539c:	movt	r1, #65232	; 0xfed0
   153a0:	add	r0, r0, r1
   153a4:	cmp	r0, #4
   153a8:	movcs	r4, #1
   153ac:	b	15b44 <__assert_fail@plt+0x455c>
   153b0:	movw	r1, #16963	; 0x4243
   153b4:	cmp	r0, r1
   153b8:	bgt	15480 <__assert_fail@plt+0x3e98>
   153bc:	movw	r1, #390	; 0x186
   153c0:	cmp	r0, r1
   153c4:	bgt	1551c <__assert_fail@plt+0x3f34>
   153c8:	movw	r1, #33251	; 0x81e3
   153cc:	movt	r1, #56926	; 0xde5e
   153d0:	cmp	r0, r1
   153d4:	bgt	15640 <__assert_fail@plt+0x4058>
   153d8:	movw	r1, #6515	; 0x1973
   153dc:	movt	r1, #43962	; 0xabba
   153e0:	cmp	r0, r1
   153e4:	ble	15808 <__assert_fail@plt+0x4220>
   153e8:	movw	r1, #33127	; 0x8167
   153ec:	movt	r1, #51582	; 0xc97e
   153f0:	cmp	r0, r1
   153f4:	bgt	15a80 <__assert_fail@plt+0x4498>
   153f8:	movw	r1, #6516	; 0x1974
   153fc:	movt	r1, #43962	; 0xabba
   15400:	cmp	r0, r1
   15404:	beq	15b44 <__assert_fail@plt+0x455c>
   15408:	movw	r1, #5520	; 0x1590
   1540c:	movt	r1, #51031	; 0xc757
   15410:	cmp	r0, r1
   15414:	beq	15b44 <__assert_fail@plt+0x455c>
   15418:	b	15b50 <__assert_fail@plt+0x4568>
   1541c:	movw	r1, #25967	; 0x656f
   15420:	movt	r1, #25189	; 0x6265
   15424:	cmp	r0, r1
   15428:	bgt	15568 <__assert_fail@plt+0x3f80>
   1542c:	movw	r1, #22568	; 0x5828
   15430:	movt	r1, #22569	; 0x5829
   15434:	cmp	r0, r1
   15438:	ble	1567c <__assert_fail@plt+0x4094>
   1543c:	movw	r1, #18002	; 0x4652
   15440:	movt	r1, #23119	; 0x5a4f
   15444:	cmp	r0, r1
   15448:	ble	15838 <__assert_fail@plt+0x4250>
   1544c:	movw	r1, #26475	; 0x676b
   15450:	movt	r1, #24933	; 0x6165
   15454:	cmp	r0, r1
   15458:	bgt	15aa4 <__assert_fail@plt+0x44bc>
   1545c:	movw	r1, #18003	; 0x4653
   15460:	movt	r1, #23119	; 0x5a4f
   15464:	cmp	r0, r1
   15468:	beq	15b44 <__assert_fail@plt+0x455c>
   1546c:	movw	r1, #11765	; 0x2df5
   15470:	movt	r1, #24010	; 0x5dca
   15474:	cmp	r0, r1
   15478:	beq	15b44 <__assert_fail@plt+0x455c>
   1547c:	b	15b50 <__assert_fail@plt+0x4568>
   15480:	movw	r1, #44532	; 0xadf4
   15484:	cmp	r0, r1
   15488:	bgt	155bc <__assert_fail@plt+0x3fd4>
   1548c:	movw	r1, #29300	; 0x7274
   15490:	cmp	r0, r1
   15494:	bgt	156bc <__assert_fail@plt+0x40d4>
   15498:	movw	r1, #19779	; 0x4d43
   1549c:	cmp	r0, r1
   154a0:	bgt	15868 <__assert_fail@plt+0x4280>
   154a4:	movw	r1, #16964	; 0x4244
   154a8:	cmp	r0, r1
   154ac:	movwne	r1, #18475	; 0x482b
   154b0:	cmpne	r0, r1
   154b4:	beq	15b44 <__assert_fail@plt+0x455c>
   154b8:	movw	r1, #18520	; 0x4858
   154bc:	cmp	r0, r1
   154c0:	beq	15b44 <__assert_fail@plt+0x455c>
   154c4:	b	15b50 <__assert_fail@plt+0x4568>
   154c8:	movw	r1, #23890	; 0x5d52
   154cc:	movt	r1, #17217	; 0x4341
   154d0:	cmp	r0, r1
   154d4:	ble	156ec <__assert_fail@plt+0x4104>
   154d8:	movw	r1, #17484	; 0x444c
   154dc:	movt	r1, #17741	; 0x454d
   154e0:	cmp	r0, r1
   154e4:	ble	1588c <__assert_fail@plt+0x42a4>
   154e8:	movw	r1, #18802	; 0x4972
   154ec:	movt	r1, #21093	; 0x5265
   154f0:	cmp	r0, r1
   154f4:	bgt	15ac8 <__assert_fail@plt+0x44e0>
   154f8:	movw	r1, #17485	; 0x444d
   154fc:	movt	r1, #17741	; 0x454d
   15500:	cmp	r0, r1
   15504:	beq	15b44 <__assert_fail@plt+0x455c>
   15508:	movw	r1, #18003	; 0x4653
   1550c:	movt	r1, #17752	; 0x4558
   15510:	cmp	r0, r1
   15514:	beq	15b44 <__assert_fail@plt+0x455c>
   15518:	b	15b50 <__assert_fail@plt+0x4568>
   1551c:	movw	r1, #9319	; 0x2467
   15520:	cmp	r0, r1
   15524:	bgt	1572c <__assert_fail@plt+0x4144>
   15528:	movw	r1, #4978	; 0x1372
   1552c:	cmp	r0, r1
   15530:	ble	15a68 <__assert_fail@plt+0x4480>
   15534:	movw	r1, #4979	; 0x1373
   15538:	sub	r1, r0, r1
   1553c:	cmp	r1, #28
   15540:	bhi	15558 <__assert_fail@plt+0x3f70>
   15544:	movw	r3, #5121	; 0x1401
   15548:	mov	r2, #1
   1554c:	movt	r3, #4096	; 0x1000
   15550:	tst	r3, r2, lsl r1
   15554:	bne	15b44 <__assert_fail@plt+0x455c>
   15558:	movw	r1, #7377	; 0x1cd1
   1555c:	cmp	r0, r1
   15560:	beq	15b44 <__assert_fail@plt+0x455c>
   15564:	b	15b50 <__assert_fail@plt+0x4568>
   15568:	movw	r1, #4385	; 0x1121
   1556c:	movt	r1, #26649	; 0x6819
   15570:	cmp	r0, r1
   15574:	ble	15758 <__assert_fail@plt+0x4170>
   15578:	movw	r1, #26226	; 0x6672
   1557c:	movt	r1, #29539	; 0x7363
   15580:	cmp	r0, r1
   15584:	ble	158bc <__assert_fail@plt+0x42d4>
   15588:	movw	r1, #29304	; 0x7278
   1558c:	movt	r1, #29554	; 0x7372
   15590:	cmp	r0, r1
   15594:	bgt	15aec <__assert_fail@plt+0x4504>
   15598:	movw	r1, #26227	; 0x6673
   1559c:	movt	r1, #29539	; 0x7363
   155a0:	cmp	r0, r1
   155a4:	beq	15b44 <__assert_fail@plt+0x455c>
   155a8:	movw	r1, #29544	; 0x7368
   155ac:	movt	r1, #29553	; 0x7371
   155b0:	cmp	r0, r1
   155b4:	beq	15b44 <__assert_fail@plt+0x455c>
   155b8:	b	15b50 <__assert_fail@plt+0x4568>
   155bc:	movw	r1, #57578	; 0xe0ea
   155c0:	movt	r1, #39	; 0x27
   155c4:	cmp	r0, r1
   155c8:	bgt	15798 <__assert_fail@plt+0x41b0>
   155cc:	movw	r1, #61266	; 0xef52
   155d0:	cmp	r0, r1
   155d4:	bgt	158ec <__assert_fail@plt+0x4304>
   155d8:	movw	r1, #44533	; 0xadf5
   155dc:	cmp	r0, r1
   155e0:	movwne	r1, #44543	; 0xadff
   155e4:	cmpne	r0, r1
   155e8:	beq	15b44 <__assert_fail@plt+0x455c>
   155ec:	movw	r1, #61265	; 0xef51
   155f0:	cmp	r0, r1
   155f4:	beq	15b44 <__assert_fail@plt+0x455c>
   155f8:	b	15b50 <__assert_fail@plt+0x4568>
   155fc:	movw	r1, #513	; 0x201
   15600:	movt	r1, #6528	; 0x1980
   15604:	cmp	r0, r1
   15608:	ble	15914 <__assert_fail@plt+0x432c>
   1560c:	movw	r1, #47791	; 0xbaaf
   15610:	movt	r1, #8209	; 0x2011
   15614:	cmp	r0, r1
   15618:	bgt	15b10 <__assert_fail@plt+0x4528>
   1561c:	movw	r1, #514	; 0x202
   15620:	movt	r1, #6528	; 0x1980
   15624:	cmp	r0, r1
   15628:	beq	15b44 <__assert_fail@plt+0x455c>
   1562c:	movw	r1, #64206	; 0xface
   15630:	movt	r1, #7085	; 0x1bad
   15634:	cmp	r0, r1
   15638:	beq	15b44 <__assert_fail@plt+0x455c>
   1563c:	b	15b50 <__assert_fail@plt+0x4568>
   15640:	movw	r1, #65419	; 0xff8b
   15644:	movt	r1, #63868	; 0xf97c
   15648:	cmp	r0, r1
   1564c:	ble	15944 <__assert_fail@plt+0x435c>
   15650:	cmp	r0, #46	; 0x2e
   15654:	bgt	15b34 <__assert_fail@plt+0x454c>
   15658:	movw	r1, #65420	; 0xff8c
   1565c:	movt	r1, #63868	; 0xf97c
   15660:	cmp	r0, r1
   15664:	beq	15b44 <__assert_fail@plt+0x455c>
   15668:	movw	r1, #59465	; 0xe849
   1566c:	movt	r1, #63893	; 0xf995
   15670:	cmp	r0, r1
   15674:	beq	15b44 <__assert_fail@plt+0x455c>
   15678:	b	15b50 <__assert_fail@plt+0x4568>
   1567c:	movw	r1, #17226	; 0x434a
   15680:	movt	r1, #21327	; 0x534f
   15684:	cmp	r0, r1
   15688:	bgt	15974 <__assert_fail@plt+0x438c>
   1568c:	movw	r1, #12621	; 0x314d
   15690:	movt	r1, #21318	; 0x5346
   15694:	cmp	r0, r1
   15698:	movwne	r1, #18502	; 0x4846
   1569c:	movtne	r1, #21318	; 0x5346
   156a0:	cmpne	r0, r1
   156a4:	beq	15b44 <__assert_fail@plt+0x455c>
   156a8:	movw	r1, #21582	; 0x544e
   156ac:	movt	r1, #21318	; 0x5346
   156b0:	cmp	r0, r1
   156b4:	beq	15b44 <__assert_fail@plt+0x455c>
   156b8:	b	15b50 <__assert_fail@plt+0x4568>
   156bc:	movw	r1, #40863	; 0x9f9f
   156c0:	cmp	r0, r1
   156c4:	bgt	159a4 <__assert_fail@plt+0x43bc>
   156c8:	movw	r1, #29301	; 0x7275
   156cc:	cmp	r0, r1
   156d0:	movwne	r1, #29366	; 0x72b6
   156d4:	cmpne	r0, r1
   156d8:	beq	15b44 <__assert_fail@plt+0x455c>
   156dc:	movw	r1, #38496	; 0x9660
   156e0:	cmp	r0, r1
   156e4:	beq	15b44 <__assert_fail@plt+0x455c>
   156e8:	b	15b50 <__assert_fail@plt+0x4568>
   156ec:	movw	r1, #17993	; 0x4649
   156f0:	movt	r1, #12627	; 0x3153
   156f4:	cmp	r0, r1
   156f8:	bgt	159b8 <__assert_fail@plt+0x43d0>
   156fc:	movw	r1, #15685	; 0x3d45
   15700:	movt	r1, #10445	; 0x28cd
   15704:	cmp	r0, r1
   15708:	movwne	r1, #7658	; 0x1dea
   1570c:	movtne	r1, #11181	; 0x2bad
   15710:	cmpne	r0, r1
   15714:	beq	15b44 <__assert_fail@plt+0x455c>
   15718:	movw	r1, #12225	; 0x2fc1
   1571c:	movt	r1, #12225	; 0x2fc1
   15720:	cmp	r0, r1
   15724:	beq	15b44 <__assert_fail@plt+0x455c>
   15728:	b	15b50 <__assert_fail@plt+0x4568>
   1572c:	cmp	r0, #16384	; 0x4000
   15730:	bge	159e8 <__assert_fail@plt+0x4400>
   15734:	movw	r1, #9320	; 0x2468
   15738:	cmp	r0, r1
   1573c:	movwne	r1, #9336	; 0x2478
   15740:	cmpne	r0, r1
   15744:	beq	15b44 <__assert_fail@plt+0x455c>
   15748:	movw	r1, #13364	; 0x3434
   1574c:	cmp	r0, r1
   15750:	beq	15b44 <__assert_fail@plt+0x455c>
   15754:	b	15b50 <__assert_fail@plt+0x4568>
   15758:	movw	r1, #26399	; 0x671f
   1575c:	movt	r1, #25698	; 0x6462
   15760:	cmp	r0, r1
   15764:	bgt	15a08 <__assert_fail@plt+0x4420>
   15768:	movw	r1, #25968	; 0x6570
   1576c:	movt	r1, #25189	; 0x6265
   15770:	cmp	r0, r1
   15774:	movwne	r1, #25970	; 0x6572
   15778:	movtne	r1, #25189	; 0x6265
   1577c:	cmpne	r0, r1
   15780:	beq	15b44 <__assert_fail@plt+0x455c>
   15784:	movw	r1, #29296	; 0x7270
   15788:	movt	r1, #25447	; 0x6367
   1578c:	cmp	r0, r1
   15790:	beq	15b44 <__assert_fail@plt+0x455c>
   15794:	b	15b50 <__assert_fail@plt+0x4568>
   15798:	movw	r1, #6547	; 0x1993
   1579c:	movt	r1, #258	; 0x102
   157a0:	cmp	r0, r1
   157a4:	bgt	15a38 <__assert_fail@plt+0x4450>
   157a8:	movw	r1, #57579	; 0xe0eb
   157ac:	movt	r1, #39	; 0x27
   157b0:	cmp	r0, r1
   157b4:	movwne	r1, #19027	; 0x4a53
   157b8:	movtne	r1, #65	; 0x41
   157bc:	cmpne	r0, r1
   157c0:	beq	15b44 <__assert_fail@plt+0x455c>
   157c4:	movw	r1, #65518	; 0xffee
   157c8:	movt	r1, #192	; 0xc0
   157cc:	cmp	r0, r1
   157d0:	beq	15b44 <__assert_fail@plt+0x455c>
   157d4:	b	15b50 <__assert_fail@plt+0x4568>
   157d8:	movw	r1, #22561	; 0x5821
   157dc:	movt	r1, #1893	; 0x765
   157e0:	cmp	r0, r1
   157e4:	movwne	r1, #6452	; 0x1934
   157e8:	movtne	r1, #2308	; 0x904
   157ec:	cmpne	r0, r1
   157f0:	beq	15b44 <__assert_fail@plt+0x455c>
   157f4:	movw	r1, #7658	; 0x1dea
   157f8:	movt	r1, #2989	; 0xbad
   157fc:	cmp	r0, r1
   15800:	beq	15b44 <__assert_fail@plt+0x455c>
   15804:	b	15b50 <__assert_fail@plt+0x4568>
   15808:	movw	r1, #22774	; 0x58f6
   1580c:	movt	r1, #34180	; 0x8584
   15810:	cmp	r0, r1
   15814:	movwne	r1, #26686	; 0x683e
   15818:	movtne	r1, #37155	; 0x9123
   1581c:	cmpne	r0, r1
   15820:	beq	15b44 <__assert_fail@plt+0x455c>
   15824:	movw	r1, #22774	; 0x58f6
   15828:	movt	r1, #38276	; 0x9584
   1582c:	cmp	r0, r1
   15830:	beq	15b44 <__assert_fail@plt+0x455c>
   15834:	b	15b50 <__assert_fail@plt+0x4568>
   15838:	movw	r1, #22569	; 0x5829
   1583c:	movt	r1, #22569	; 0x5829
   15840:	cmp	r0, r1
   15844:	movwne	r1, #21314	; 0x5342
   15848:	movtne	r1, #22598	; 0x5846
   1584c:	cmpne	r0, r1
   15850:	beq	15b44 <__assert_fail@plt+0x455c>
   15854:	movw	r1, #27120	; 0x69f0
   15858:	movt	r1, #23100	; 0x5a3c
   1585c:	cmp	r0, r1
   15860:	beq	15b44 <__assert_fail@plt+0x455c>
   15864:	b	15b50 <__assert_fail@plt+0x4568>
   15868:	movw	r1, #19780	; 0x4d44
   1586c:	cmp	r0, r1
   15870:	movwne	r1, #19802	; 0x4d5a
   15874:	cmpne	r0, r1
   15878:	beq	15b44 <__assert_fail@plt+0x455c>
   1587c:	movw	r1, #24053	; 0x5df5
   15880:	cmp	r0, r1
   15884:	beq	15b44 <__assert_fail@plt+0x455c>
   15888:	b	15b50 <__assert_fail@plt+0x4568>
   1588c:	movw	r1, #23891	; 0x5d53
   15890:	movt	r1, #17217	; 0x4341
   15894:	cmp	r0, r1
   15898:	movwne	r1, #16706	; 0x4142
   1589c:	movtne	r1, #17485	; 0x444d
   158a0:	cmpne	r0, r1
   158a4:	beq	15b44 <__assert_fail@plt+0x455c>
   158a8:	movw	r1, #52520	; 0xcd28
   158ac:	movt	r1, #17725	; 0x453d
   158b0:	cmp	r0, r1
   158b4:	beq	15b44 <__assert_fail@plt+0x455c>
   158b8:	b	15b50 <__assert_fail@plt+0x4568>
   158bc:	movw	r1, #4386	; 0x1122
   158c0:	movt	r1, #26649	; 0x6819
   158c4:	cmp	r0, r1
   158c8:	movwne	r1, #28528	; 0x6f70
   158cc:	movtne	r1, #27759	; 0x6c6f
   158d0:	cmpne	r0, r1
   158d4:	beq	15b44 <__assert_fail@plt+0x455c>
   158d8:	movw	r1, #26227	; 0x6673
   158dc:	movt	r1, #28275	; 0x6e73
   158e0:	cmp	r0, r1
   158e4:	beq	15b44 <__assert_fail@plt+0x455c>
   158e8:	b	15b50 <__assert_fail@plt+0x4568>
   158ec:	movw	r1, #61267	; 0xef53
   158f0:	cmp	r0, r1
   158f4:	movwne	r1, #61791	; 0xf15f
   158f8:	cmpne	r0, r1
   158fc:	beq	15b44 <__assert_fail@plt+0x455c>
   15900:	movw	r1, #6484	; 0x1954
   15904:	movt	r1, #1
   15908:	cmp	r0, r1
   1590c:	beq	15b44 <__assert_fail@plt+0x455c>
   15910:	b	15b50 <__assert_fail@plt+0x4568>
   15914:	movw	r1, #30804	; 0x7854
   15918:	movt	r1, #4400	; 0x1130
   1591c:	cmp	r0, r1
   15920:	movwne	r1, #4966	; 0x1366
   15924:	movtne	r1, #4966	; 0x1366
   15928:	cmpne	r0, r1
   1592c:	beq	15b44 <__assert_fail@plt+0x455c>
   15930:	movw	r1, #13126	; 0x3346
   15934:	movt	r1, #5377	; 0x1501
   15938:	cmp	r0, r1
   1593c:	beq	15b44 <__assert_fail@plt+0x455c>
   15940:	b	15b50 <__assert_fail@plt+0x4568>
   15944:	movw	r1, #33252	; 0x81e4
   15948:	movt	r1, #56926	; 0xde5e
   1594c:	cmp	r0, r1
   15950:	movwne	r1, #57826	; 0xe1e2
   15954:	movtne	r1, #57589	; 0xe0f5
   15958:	cmpne	r0, r1
   1595c:	beq	15b44 <__assert_fail@plt+0x455c>
   15960:	movw	r1, #8208	; 0x2010
   15964:	movt	r1, #62197	; 0xf2f5
   15968:	cmp	r0, r1
   1596c:	beq	15b44 <__assert_fail@plt+0x455c>
   15970:	b	15b50 <__assert_fail@plt+0x4568>
   15974:	movw	r1, #17227	; 0x434b
   15978:	movt	r1, #21327	; 0x534f
   1597c:	cmp	r0, r1
   15980:	movwne	r1, #256	; 0x100
   15984:	movtne	r1, #21529	; 0x5419
   15988:	cmpne	r0, r1
   1598c:	beq	15b44 <__assert_fail@plt+0x455c>
   15990:	movw	r1, #18003	; 0x4653
   15994:	movt	r1, #22106	; 0x565a
   15998:	cmp	r0, r1
   1599c:	beq	15b44 <__assert_fail@plt+0x455c>
   159a0:	b	15b50 <__assert_fail@plt+0x4568>
   159a4:	movw	r1, #40864	; 0x9fa0
   159a8:	sub	r0, r0, r1
   159ac:	cmp	r0, #3
   159b0:	bcc	15b44 <__assert_fail@plt+0x455c>
   159b4:	b	15b50 <__assert_fail@plt+0x4568>
   159b8:	movw	r1, #17994	; 0x464a
   159bc:	movt	r1, #12627	; 0x3153
   159c0:	cmp	r0, r1
   159c4:	movwne	r1, #21297	; 0x5331
   159c8:	movtne	r1, #16966	; 0x4246
   159cc:	cmpne	r0, r1
   159d0:	beq	15b44 <__assert_fail@plt+0x455c>
   159d4:	movw	r1, #20045	; 0x4e4d
   159d8:	movt	r1, #16969	; 0x4249
   159dc:	cmp	r0, r1
   159e0:	beq	15b44 <__assert_fail@plt+0x455c>
   159e4:	b	15b50 <__assert_fail@plt+0x4568>
   159e8:	sub	r0, r0, #16384	; 0x4000
   159ec:	cmp	r0, #6
   159f0:	bhi	15b50 <__assert_fail@plt+0x4568>
   159f4:	mov	r1, #1
   159f8:	mov	r2, #81	; 0x51
   159fc:	tst	r2, r1, lsl r0
   15a00:	bne	15b44 <__assert_fail@plt+0x455c>
   15a04:	b	15b50 <__assert_fail@plt+0x4568>
   15a08:	movw	r1, #26400	; 0x6720
   15a0c:	movt	r1, #25698	; 0x6462
   15a10:	cmp	r0, r1
   15a14:	movwne	r1, #24952	; 0x6178
   15a18:	movtne	r1, #25700	; 0x6464
   15a1c:	cmpne	r0, r1
   15a20:	beq	15b44 <__assert_fail@plt+0x455c>
   15a24:	movw	r1, #26985	; 0x6969
   15a28:	movt	r1, #26457	; 0x6759
   15a2c:	cmp	r0, r1
   15a30:	beq	15b44 <__assert_fail@plt+0x455c>
   15a34:	b	15b50 <__assert_fail@plt+0x4568>
   15a38:	movw	r1, #6548	; 0x1994
   15a3c:	movt	r1, #258	; 0x102
   15a40:	cmp	r0, r1
   15a44:	movwne	r1, #6551	; 0x1997
   15a48:	movtne	r1, #258	; 0x102
   15a4c:	cmpne	r0, r1
   15a50:	beq	15b44 <__assert_fail@plt+0x455c>
   15a54:	movw	r1, #53613	; 0xd16d
   15a58:	movt	r1, #303	; 0x12f
   15a5c:	cmp	r0, r1
   15a60:	beq	15b44 <__assert_fail@plt+0x455c>
   15a64:	b	15b50 <__assert_fail@plt+0x4568>
   15a68:	movw	r1, #391	; 0x187
   15a6c:	cmp	r0, r1
   15a70:	beq	15b44 <__assert_fail@plt+0x455c>
   15a74:	cmp	r0, #1984	; 0x7c0
   15a78:	beq	15b44 <__assert_fail@plt+0x455c>
   15a7c:	b	15b50 <__assert_fail@plt+0x4568>
   15a80:	movw	r1, #33128	; 0x8168
   15a84:	movt	r1, #51582	; 0xc97e
   15a88:	cmp	r0, r1
   15a8c:	beq	15b44 <__assert_fail@plt+0x455c>
   15a90:	movw	r1, #18961	; 0x4a11
   15a94:	movt	r1, #51966	; 0xcafe
   15a98:	cmp	r0, r1
   15a9c:	beq	15b44 <__assert_fail@plt+0x455c>
   15aa0:	b	15b50 <__assert_fail@plt+0x4568>
   15aa4:	movw	r1, #26476	; 0x676c
   15aa8:	movt	r1, #24933	; 0x6165
   15aac:	cmp	r0, r1
   15ab0:	beq	15b44 <__assert_fail@plt+0x455c>
   15ab4:	movw	r1, #25974	; 0x6576
   15ab8:	movt	r1, #25188	; 0x6264
   15abc:	cmp	r0, r1
   15ac0:	beq	15b44 <__assert_fail@plt+0x455c>
   15ac4:	b	15b50 <__assert_fail@plt+0x4568>
   15ac8:	movw	r1, #18803	; 0x4973
   15acc:	movt	r1, #21093	; 0x5265
   15ad0:	cmp	r0, r1
   15ad4:	beq	15b44 <__assert_fail@plt+0x455c>
   15ad8:	movw	r1, #17229	; 0x434d
   15adc:	movt	r1, #21317	; 0x5345
   15ae0:	cmp	r0, r1
   15ae4:	beq	15b44 <__assert_fail@plt+0x455c>
   15ae8:	b	15b50 <__assert_fail@plt+0x4568>
   15aec:	movw	r1, #29305	; 0x7279
   15af0:	movt	r1, #29554	; 0x7372
   15af4:	cmp	r0, r1
   15af8:	beq	15b44 <__assert_fail@plt+0x455c>
   15afc:	movw	r1, #24931	; 0x6163
   15b00:	movt	r1, #29810	; 0x7472
   15b04:	cmp	r0, r1
   15b08:	beq	15b44 <__assert_fail@plt+0x455c>
   15b0c:	b	15b50 <__assert_fail@plt+0x4568>
   15b10:	movw	r1, #47792	; 0xbab0
   15b14:	movt	r1, #8209	; 0x2011
   15b18:	cmp	r0, r1
   15b1c:	beq	15b44 <__assert_fail@plt+0x455c>
   15b20:	movw	r1, #6405	; 0x1905
   15b24:	movt	r1, #9221	; 0x2405
   15b28:	cmp	r0, r1
   15b2c:	beq	15b44 <__assert_fail@plt+0x455c>
   15b30:	b	15b50 <__assert_fail@plt+0x4568>
   15b34:	cmp	r0, #47	; 0x2f
   15b38:	beq	15b44 <__assert_fail@plt+0x455c>
   15b3c:	cmp	r0, #51	; 0x33
   15b40:	bne	15b50 <__assert_fail@plt+0x4568>
   15b44:	mov	r0, r4
   15b48:	sub	sp, fp, #16
   15b4c:	pop	{r4, r5, r6, r7, fp, pc}
   15b50:	mov	r4, #1
   15b54:	b	15b44 <__assert_fail@plt+0x455c>
   15b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b5c:	add	fp, sp, #28
   15b60:	sub	sp, sp, #20
   15b64:	sub	sp, sp, #8192	; 0x2000
   15b68:	ldr	r8, [fp, #12]
   15b6c:	ldr	r4, [fp, #8]
   15b70:	mov	r7, r0
   15b74:	mvn	r0, #1
   15b78:	str	r1, [sp, #8]
   15b7c:	mvn	r1, #0
   15b80:	mov	r5, #0
   15b84:	mov	r6, #0
   15b88:	str	r2, [sp, #12]
   15b8c:	orr	r0, r0, #1
   15b90:	eor	r1, r8, r1
   15b94:	eor	r0, r4, r0
   15b98:	orr	sl, r0, r1
   15b9c:	str	r1, [sp, #4]
   15ba0:	b	15ba8 <__assert_fail@plt+0x45c0>
   15ba4:	mov	r7, #0
   15ba8:	subs	r0, r4, #8192	; 0x2000
   15bac:	mov	r2, r4
   15bb0:	add	r1, sp, #16
   15bb4:	sbcs	r0, r8, #0
   15bb8:	ldr	r0, [sp, #12]
   15bbc:	movcs	r2, #8192	; 0x2000
   15bc0:	bl	1a614 <__assert_fail@plt+0x902c>
   15bc4:	cmp	r0, #0
   15bc8:	beq	15c68 <__assert_fail@plt+0x4680>
   15bcc:	mov	r9, r0
   15bd0:	cmn	r0, #1
   15bd4:	beq	15c78 <__assert_fail@plt+0x4690>
   15bd8:	tst	r7, #1
   15bdc:	beq	15c24 <__assert_fail@plt+0x463c>
   15be0:	movw	r0, #61904	; 0xf1d0
   15be4:	ldr	r3, [sp, #8]
   15be8:	movw	r1, #55894	; 0xda56
   15bec:	movw	r2, #53998	; 0xd2ee
   15bf0:	movt	r0, #2
   15bf4:	movt	r1, #1
   15bf8:	movt	r2, #1
   15bfc:	mov	r7, r0
   15c00:	ldrb	r0, [r0]
   15c04:	cmp	r0, #0
   15c08:	movw	r0, #53997	; 0xd2ed
   15c0c:	movt	r0, #1
   15c10:	movne	r2, r0
   15c14:	mov	r0, #1
   15c18:	bl	114d4 <__printf_chk@plt>
   15c1c:	mov	r0, #1
   15c20:	strb	r0, [r7]
   15c24:	add	r0, sp, #16
   15c28:	mov	r1, r9
   15c2c:	bl	15d68 <__assert_fail@plt+0x4780>
   15c30:	adds	r5, r5, r9
   15c34:	adc	r6, r6, #0
   15c38:	cmp	sl, #0
   15c3c:	beq	15ba4 <__assert_fail@plt+0x45bc>
   15c40:	ldr	r1, [fp, #8]
   15c44:	mvn	r0, #1
   15c48:	subs	r4, r4, r9
   15c4c:	sbc	r8, r8, #0
   15c50:	eor	r0, r1, r0
   15c54:	ldr	r1, [sp, #4]
   15c58:	orr	r0, r0, r1
   15c5c:	cmp	r0, #0
   15c60:	orrsne	r0, r4, r8
   15c64:	bne	15ba4 <__assert_fail@plt+0x45bc>
   15c68:	mov	r0, r5
   15c6c:	mov	r1, r6
   15c70:	sub	sp, fp, #28
   15c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c78:	bl	114b0 <__errno_location@plt>
   15c7c:	ldr	r4, [r0]
   15c80:	cmp	r4, #11
   15c84:	beq	15c68 <__assert_fail@plt+0x4680>
   15c88:	movw	r1, #55792	; 0xd9f0
   15c8c:	mov	r0, #0
   15c90:	mov	r2, #5
   15c94:	movt	r1, #1
   15c98:	bl	11348 <dcgettext@plt>
   15c9c:	ldr	r1, [sp, #8]
   15ca0:	mov	r5, r0
   15ca4:	mov	r0, #4
   15ca8:	bl	19fa0 <__assert_fail@plt+0x89b8>
   15cac:	mov	r3, r0
   15cb0:	mov	r0, #1
   15cb4:	mov	r1, r4
   15cb8:	mov	r2, r5
   15cbc:	bl	113e4 <error@plt>
   15cc0:	push	{r4, r5, r6, r7, fp, lr}
   15cc4:	add	fp, sp, #16
   15cc8:	sub	sp, sp, #32
   15ccc:	ldr	r6, [fp, #8]
   15cd0:	mov	r4, r3
   15cd4:	mov	r5, r2
   15cd8:	str	r6, [sp]
   15cdc:	bl	113b4 <lseek64@plt>
   15ce0:	cmp	r1, #0
   15ce4:	subpl	sp, fp, #16
   15ce8:	poppl	{r4, r5, r6, r7, fp, pc}
   15cec:	add	r2, sp, #11
   15cf0:	mov	r0, r5
   15cf4:	mov	r1, r4
   15cf8:	bl	18758 <__assert_fail@plt+0x7170>
   15cfc:	cmp	r6, #3
   15d00:	bcs	15d64 <__assert_fail@plt+0x477c>
   15d04:	mov	r4, r0
   15d08:	movw	r0, #57148	; 0xdf3c
   15d0c:	ldr	r5, [fp, #12]
   15d10:	movt	r0, #1
   15d14:	ldr	r6, [r0, r6, lsl #2]
   15d18:	bl	114b0 <__errno_location@plt>
   15d1c:	ldr	r7, [r0]
   15d20:	mov	r0, #0
   15d24:	mov	r1, r6
   15d28:	mov	r2, #5
   15d2c:	bl	11348 <dcgettext@plt>
   15d30:	mov	r6, r0
   15d34:	mov	r0, #0
   15d38:	mov	r1, #3
   15d3c:	mov	r2, r5
   15d40:	bl	1a21c <__assert_fail@plt+0x8c34>
   15d44:	mov	r3, r0
   15d48:	mov	r0, #0
   15d4c:	mov	r1, r7
   15d50:	mov	r2, r6
   15d54:	str	r4, [sp]
   15d58:	bl	113e4 <error@plt>
   15d5c:	mov	r0, #1
   15d60:	bl	1145c <exit@plt>
   15d64:	bl	115c4 <abort@plt>
   15d68:	push	{r4, r5, fp, lr}
   15d6c:	add	fp, sp, #8
   15d70:	cmp	r1, #0
   15d74:	popeq	{r4, r5, fp, pc}
   15d78:	movw	r5, #61876	; 0xf1b4
   15d7c:	mov	r4, r1
   15d80:	mov	r1, #1
   15d84:	movt	r5, #2
   15d88:	mov	r2, r4
   15d8c:	ldr	r3, [r5]
   15d90:	bl	1133c <fwrite_unlocked@plt>
   15d94:	cmp	r0, r4
   15d98:	bcc	15da0 <__assert_fail@plt+0x47b8>
   15d9c:	pop	{r4, r5, fp, pc}
   15da0:	ldr	r0, [r5]
   15da4:	bl	1157c <clearerr_unlocked@plt>
   15da8:	bl	114b0 <__errno_location@plt>
   15dac:	movw	r1, #55924	; 0xda74
   15db0:	ldr	r4, [r0]
   15db4:	mov	r0, #0
   15db8:	mov	r2, #5
   15dbc:	movt	r1, #1
   15dc0:	bl	11348 <dcgettext@plt>
   15dc4:	movw	r1, #54552	; 0xd518
   15dc8:	mov	r5, r0
   15dcc:	mov	r0, #4
   15dd0:	movt	r1, #1
   15dd4:	bl	19fa0 <__assert_fail@plt+0x89b8>
   15dd8:	mov	r3, r0
   15ddc:	mov	r0, #1
   15de0:	mov	r1, r4
   15de4:	mov	r2, r5
   15de8:	bl	113e4 <error@plt>
   15dec:	ldr	r0, [r0, #60]	; 0x3c
   15df0:	udiv	r2, r0, r1
   15df4:	mls	r0, r2, r1, r0
   15df8:	bx	lr
   15dfc:	ldr	r1, [r1, #60]	; 0x3c
   15e00:	ldr	r0, [r0, #60]	; 0x3c
   15e04:	sub	r0, r0, r1
   15e08:	clz	r0, r0
   15e0c:	lsr	r0, r0, #5
   15e10:	bx	lr
   15e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e18:	add	fp, sp, #28
   15e1c:	sub	sp, sp, #140	; 0x8c
   15e20:	ldr	r5, [r0]
   15e24:	mov	r6, r1
   15e28:	movw	r1, #55082	; 0xd72a
   15e2c:	mov	r4, r0
   15e30:	movt	r1, #1
   15e34:	mov	r0, r5
   15e38:	bl	112b8 <strcmp@plt>
   15e3c:	ldr	r7, [r4, #52]	; 0x34
   15e40:	ldrb	sl, [r4, #46]	; 0x2e
   15e44:	mov	r8, r0
   15e48:	cmp	r0, #0
   15e4c:	beq	15e70 <__assert_fail@plt+0x4888>
   15e50:	cmp	r6, #0
   15e54:	mov	r1, #2048	; 0x800
   15e58:	mov	r0, r5
   15e5c:	movwne	r1, #0
   15e60:	bl	17410 <__assert_fail@plt+0x5e28>
   15e64:	mov	r9, r0
   15e68:	ldr	r0, [r4, #52]	; 0x34
   15e6c:	b	15e78 <__assert_fail@plt+0x4890>
   15e70:	mov	r9, #0
   15e74:	mov	r0, r7
   15e78:	ldr	r1, [r4, #48]	; 0x30
   15e7c:	clz	r0, r0
   15e80:	str	r6, [sp, #28]
   15e84:	lsr	r0, r0, #5
   15e88:	add	r1, r1, #1
   15e8c:	clz	r1, r1
   15e90:	lsr	r1, r1, #5
   15e94:	teq	r1, r0
   15e98:	beq	166f8 <__assert_fail@plt+0x5110>
   15e9c:	movw	r6, #61902	; 0xf1ce
   15ea0:	mvn	r0, #0
   15ea4:	movw	r5, #61901	; 0xf1cd
   15ea8:	movt	r6, #2
   15eac:	subs	r0, r9, r0
   15eb0:	movt	r5, #2
   15eb4:	movwne	r0, #1
   15eb8:	ldrb	r1, [r6]
   15ebc:	mvn	r1, r1
   15ec0:	orr	r0, r0, r1
   15ec4:	and	r0, r0, #1
   15ec8:	strb	r0, [r4, #46]	; 0x2e
   15ecc:	ldrb	r0, [r5]
   15ed0:	cmp	r0, #0
   15ed4:	bne	15f7c <__assert_fail@plt+0x4994>
   15ed8:	ldr	r1, [r4]
   15edc:	add	r2, sp, #32
   15ee0:	mov	r0, #3
   15ee4:	bl	115dc <__lxstat64@plt>
   15ee8:	cmp	r0, #0
   15eec:	bne	15f7c <__assert_fail@plt+0x4994>
   15ef0:	ldr	r0, [sp, #48]	; 0x30
   15ef4:	and	r0, r0, #61440	; 0xf000
   15ef8:	cmp	r0, #40960	; 0xa000
   15efc:	bne	15f7c <__assert_fail@plt+0x4994>
   15f00:	movw	r1, #56429	; 0xdc6d
   15f04:	mov	r0, #1
   15f08:	mov	r2, #5
   15f0c:	strb	r0, [r4, #44]	; 0x2c
   15f10:	mvn	r0, #0
   15f14:	movt	r1, #1
   15f18:	str	r0, [r4, #52]	; 0x34
   15f1c:	mov	r0, #0
   15f20:	bl	11348 <dcgettext@plt>
   15f24:	ldr	r7, [r4]
   15f28:	movw	r1, #55082	; 0xd72a
   15f2c:	mov	r6, r0
   15f30:	movt	r1, #1
   15f34:	mov	r0, r7
   15f38:	bl	112b8 <strcmp@plt>
   15f3c:	cmp	r0, #0
   15f40:	bne	15f5c <__assert_fail@plt+0x4974>
   15f44:	movw	r1, #55879	; 0xda47
   15f48:	mov	r0, #0
   15f4c:	mov	r2, #5
   15f50:	movt	r1, #1
   15f54:	bl	11348 <dcgettext@plt>
   15f58:	mov	r7, r0
   15f5c:	mov	r0, #4
   15f60:	mov	r1, r7
   15f64:	bl	19fa0 <__assert_fail@plt+0x89b8>
   15f68:	mov	r3, r0
   15f6c:	mov	r0, #0
   15f70:	mov	r1, #0
   15f74:	mov	r2, r6
   15f78:	b	165b8 <__assert_fail@plt+0x4fd0>
   15f7c:	cmn	r9, #1
   15f80:	beq	1607c <__assert_fail@plt+0x4a94>
   15f84:	add	r2, sp, #32
   15f88:	mov	r0, #3
   15f8c:	mov	r1, r9
   15f90:	bl	1139c <__fxstat64@plt>
   15f94:	cmn	r0, #1
   15f98:	ble	1607c <__assert_fail@plt+0x4a94>
   15f9c:	ldr	r0, [sp, #48]	; 0x30
   15fa0:	and	r0, r0, #61440	; 0xf000
   15fa4:	cmp	r0, #32768	; 0x8000
   15fa8:	bge	16170 <__assert_fail@plt+0x4b88>
   15fac:	cmp	r0, #4096	; 0x1000
   15fb0:	cmpne	r0, #8192	; 0x2000
   15fb4:	beq	16178 <__assert_fail@plt+0x4b90>
   15fb8:	mov	r0, #0
   15fbc:	strb	r0, [r4, #46]	; 0x2e
   15fc0:	mvn	r0, #0
   15fc4:	str	r0, [r4, #52]	; 0x34
   15fc8:	movw	r0, #61760	; 0xf140
   15fcc:	movt	r0, #2
   15fd0:	ldrb	r1, [r6]
   15fd4:	ldr	r0, [r0]
   15fd8:	mvn	r1, r1
   15fdc:	subs	r0, r0, #1
   15fe0:	movwne	r0, #1
   15fe4:	cmn	r7, #1
   15fe8:	orr	r0, r1, r0
   15fec:	cmpeq	sl, #0
   15ff0:	and	r0, r0, #1
   15ff4:	strb	r0, [r4, #44]	; 0x2c
   15ff8:	beq	165bc <__assert_fail@plt+0x4fd4>
   15ffc:	movw	r1, #56510	; 0xdcbe
   16000:	mov	r0, #0
   16004:	mov	r2, #5
   16008:	movt	r1, #1
   1600c:	bl	11348 <dcgettext@plt>
   16010:	ldr	r7, [r4]
   16014:	movw	r1, #55082	; 0xd72a
   16018:	mov	r6, r0
   1601c:	movt	r1, #1
   16020:	mov	r0, r7
   16024:	bl	112b8 <strcmp@plt>
   16028:	cmp	r0, #0
   1602c:	bne	16048 <__assert_fail@plt+0x4a60>
   16030:	movw	r1, #55879	; 0xda47
   16034:	mov	r0, #0
   16038:	mov	r2, #5
   1603c:	movt	r1, #1
   16040:	bl	11348 <dcgettext@plt>
   16044:	mov	r7, r0
   16048:	mov	r0, #4
   1604c:	mov	r1, r7
   16050:	bl	19fa0 <__assert_fail@plt+0x89b8>
   16054:	mov	r7, r0
   16058:	ldrb	r0, [r4, #44]	; 0x2c
   1605c:	cmp	r0, #0
   16060:	beq	1659c <__assert_fail@plt+0x4fb4>
   16064:	movw	r1, #55854	; 0xda2e
   16068:	mov	r0, #0
   1606c:	mov	r2, #5
   16070:	movt	r1, #1
   16074:	bl	11348 <dcgettext@plt>
   16078:	b	165a4 <__assert_fail@plt+0x4fbc>
   1607c:	bl	114b0 <__errno_location@plt>
   16080:	ldr	r6, [r0]
   16084:	str	r6, [r4, #52]	; 0x34
   16088:	ldrb	r1, [r4, #46]	; 0x2e
   1608c:	cmp	r1, #0
   16090:	beq	160fc <__assert_fail@plt+0x4b14>
   16094:	ldr	r6, [r0]
   16098:	cmp	r7, r6
   1609c:	beq	165bc <__assert_fail@plt+0x4fd4>
   160a0:	ldr	r7, [r4]
   160a4:	movw	r1, #55082	; 0xd72a
   160a8:	movt	r1, #1
   160ac:	mov	r0, r7
   160b0:	bl	112b8 <strcmp@plt>
   160b4:	cmp	r0, #0
   160b8:	bne	160d4 <__assert_fail@plt+0x4aec>
   160bc:	movw	r1, #55879	; 0xda47
   160c0:	mov	r0, #0
   160c4:	mov	r2, #5
   160c8:	movt	r1, #1
   160cc:	bl	11348 <dcgettext@plt>
   160d0:	mov	r7, r0
   160d4:	mov	r0, #0
   160d8:	mov	r1, #3
   160dc:	mov	r2, r7
   160e0:	bl	1a21c <__assert_fail@plt+0x8c34>
   160e4:	movw	r2, #57262	; 0xdfae
   160e8:	mov	r3, r0
   160ec:	mov	r0, #0
   160f0:	mov	r1, r6
   160f4:	movt	r2, #1
   160f8:	b	165b8 <__assert_fail@plt+0x4fd0>
   160fc:	cmp	sl, #0
   16100:	beq	165bc <__assert_fail@plt+0x4fd4>
   16104:	movw	r1, #56483	; 0xdca3
   16108:	mov	r0, #0
   1610c:	mov	r2, #5
   16110:	movt	r1, #1
   16114:	bl	11348 <dcgettext@plt>
   16118:	ldr	r7, [r4]
   1611c:	movw	r1, #55082	; 0xd72a
   16120:	mov	r8, r0
   16124:	movt	r1, #1
   16128:	mov	r0, r7
   1612c:	bl	112b8 <strcmp@plt>
   16130:	cmp	r0, #0
   16134:	bne	16150 <__assert_fail@plt+0x4b68>
   16138:	movw	r1, #55879	; 0xda47
   1613c:	mov	r0, #0
   16140:	mov	r2, #5
   16144:	movt	r1, #1
   16148:	bl	11348 <dcgettext@plt>
   1614c:	mov	r7, r0
   16150:	mov	r0, #4
   16154:	mov	r1, r7
   16158:	bl	19fa0 <__assert_fail@plt+0x89b8>
   1615c:	mov	r3, r0
   16160:	mov	r0, #0
   16164:	mov	r1, r6
   16168:	mov	r2, r8
   1616c:	b	165b8 <__assert_fail@plt+0x4fd0>
   16170:	cmpne	r0, #49152	; 0xc000
   16174:	bne	15fb8 <__assert_fail@plt+0x49d0>
   16178:	ldr	r6, [r4]
   1617c:	movw	r1, #55082	; 0xd72a
   16180:	movt	r1, #1
   16184:	mov	r0, r6
   16188:	bl	112b8 <strcmp@plt>
   1618c:	cmp	r0, #0
   16190:	bne	161ac <__assert_fail@plt+0x4bc4>
   16194:	movw	r1, #55879	; 0xda47
   16198:	mov	r0, #0
   1619c:	mov	r2, #5
   161a0:	movt	r1, #1
   161a4:	bl	11348 <dcgettext@plt>
   161a8:	mov	r6, r0
   161ac:	mov	r0, r9
   161b0:	mov	r1, r6
   161b4:	bl	152d0 <__assert_fail@plt+0x3ce8>
   161b8:	cmp	r0, #0
   161bc:	strb	r0, [r4, #45]	; 0x2d
   161c0:	beq	161d0 <__assert_fail@plt+0x4be8>
   161c4:	ldrb	r0, [r5]
   161c8:	cmp	r0, #0
   161cc:	beq	1640c <__assert_fail@plt+0x4e24>
   161d0:	mov	r0, #0
   161d4:	add	sl, sp, #32
   161d8:	mvn	r1, #2
   161dc:	add	r6, r4, #24
   161e0:	add	r2, r4, #32
   161e4:	str	r0, [r4, #52]	; 0x34
   161e8:	tst	r7, r1
   161ec:	add	r5, sl, #96	; 0x60
   161f0:	add	r1, sp, #16
   161f4:	ldr	r0, [r4, #48]	; 0x30
   161f8:	stm	r1, {r2, r5, r6}
   161fc:	beq	16334 <__assert_fail@plt+0x4d4c>
   16200:	cmn	r0, #1
   16204:	bne	16718 <__assert_fail@plt+0x5130>
   16208:	movw	r1, #56621	; 0xdd2d
   1620c:	movt	r1, #1
   16210:	mov	r0, #0
   16214:	mov	r2, #5
   16218:	bl	11348 <dcgettext@plt>
   1621c:	ldr	r6, [r4]
   16220:	movw	r1, #55082	; 0xd72a
   16224:	mov	r7, r0
   16228:	movt	r1, #1
   1622c:	mov	r0, r6
   16230:	bl	112b8 <strcmp@plt>
   16234:	cmp	r0, #0
   16238:	bne	16254 <__assert_fail@plt+0x4c6c>
   1623c:	movw	r1, #55879	; 0xda47
   16240:	mov	r0, #0
   16244:	mov	r2, #5
   16248:	movt	r1, #1
   1624c:	bl	11348 <dcgettext@plt>
   16250:	mov	r6, r0
   16254:	mov	r0, #4
   16258:	mov	r1, r6
   1625c:	bl	19fa0 <__assert_fail@plt+0x89b8>
   16260:	mov	r3, r0
   16264:	mov	r0, #0
   16268:	mov	r1, #0
   1626c:	mov	r2, r7
   16270:	bl	113e4 <error@plt>
   16274:	add	r1, r4, #8
   16278:	mov	r6, #0
   1627c:	str	r9, [r4, #48]	; 0x30
   16280:	add	r0, sl, #80	; 0x50
   16284:	add	r2, r4, #16
   16288:	cmp	r8, #0
   1628c:	add	r3, r4, #72	; 0x48
   16290:	str	r6, [r1]
   16294:	str	r6, [r1, #4]
   16298:	ldrd	r0, [r0]
   1629c:	strd	r0, [r2]
   162a0:	ldr	r0, [sp, #32]
   162a4:	ldr	r1, [sp, #36]	; 0x24
   162a8:	ldr	r2, [sp, #24]
   162ac:	strd	r0, [r2]
   162b0:	ldr	r0, [sp, #20]
   162b4:	ldr	r2, [sp, #16]
   162b8:	ldrd	r0, [r0]
   162bc:	strd	r0, [r2]
   162c0:	ldr	r0, [sp, #48]	; 0x30
   162c4:	ldr	r1, [sp, #28]
   162c8:	mvneq	r1, #0
   162cc:	str	r1, [r4, #56]	; 0x38
   162d0:	movw	r1, #55082	; 0xd72a
   162d4:	movt	r1, #1
   162d8:	str	r0, [r4, #40]	; 0x28
   162dc:	str	r6, [r3]
   162e0:	str	r6, [r3, #4]
   162e4:	strb	r6, [r4, #44]	; 0x2c
   162e8:	ldr	r4, [r4]
   162ec:	mov	r0, r4
   162f0:	bl	112b8 <strcmp@plt>
   162f4:	cmp	r0, #0
   162f8:	bne	16314 <__assert_fail@plt+0x4d2c>
   162fc:	movw	r1, #55879	; 0xda47
   16300:	mov	r0, #0
   16304:	mov	r2, #5
   16308:	movt	r1, #1
   1630c:	bl	11348 <dcgettext@plt>
   16310:	mov	r4, r0
   16314:	mov	r0, r9
   16318:	mov	r2, #0
   1631c:	mov	r3, #0
   16320:	str	r6, [sp]
   16324:	str	r4, [sp, #4]
   16328:	bl	15cc0 <__assert_fail@plt+0x46d8>
   1632c:	sub	sp, fp, #28
   16330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16334:	cmn	r0, #1
   16338:	beq	16590 <__assert_fail@plt+0x4fa8>
   1633c:	ldr	r7, [r5]
   16340:	ldr	r1, [r5, #4]
   16344:	ldm	r2, {r0, r3}
   16348:	eor	r1, r3, r1
   1634c:	eor	r0, r0, r7
   16350:	orrs	r0, r0, r1
   16354:	bne	1648c <__assert_fail@plt+0x4ea4>
   16358:	ldrd	r0, [r6]
   1635c:	ldr	r7, [sp, #32]
   16360:	ldr	r3, [sp, #36]	; 0x24
   16364:	eor	r1, r1, r3
   16368:	eor	r0, r0, r7
   1636c:	orrs	r0, r0, r1
   16370:	bne	1648c <__assert_fail@plt+0x4ea4>
   16374:	ldr	r4, [r4]
   16378:	movw	r1, #55082	; 0xd72a
   1637c:	movt	r1, #1
   16380:	mov	r0, r4
   16384:	bl	112b8 <strcmp@plt>
   16388:	cmp	r0, #0
   1638c:	bne	163a8 <__assert_fail@plt+0x4dc0>
   16390:	movw	r1, #55879	; 0xda47
   16394:	mov	r0, #0
   16398:	mov	r2, #5
   1639c:	movt	r1, #1
   163a0:	bl	11348 <dcgettext@plt>
   163a4:	mov	r4, r0
   163a8:	cmp	r9, #0
   163ac:	beq	16404 <__assert_fail@plt+0x4e1c>
   163b0:	mov	r0, r9
   163b4:	bl	115d0 <close@plt>
   163b8:	cmp	r0, #0
   163bc:	beq	16404 <__assert_fail@plt+0x4e1c>
   163c0:	bl	114b0 <__errno_location@plt>
   163c4:	movw	r1, #56050	; 0xdaf2
   163c8:	ldr	r5, [r0]
   163cc:	mov	r0, #0
   163d0:	mov	r2, #5
   163d4:	movt	r1, #1
   163d8:	bl	11348 <dcgettext@plt>
   163dc:	mov	r6, r0
   163e0:	mov	r0, #4
   163e4:	mov	r1, r4
   163e8:	bl	19fa0 <__assert_fail@plt+0x89b8>
   163ec:	mov	r3, r0
   163f0:	mov	r0, #0
   163f4:	mov	r1, r5
   163f8:	mov	r2, r6
   163fc:	str	r9, [sp]
   16400:	bl	113e4 <error@plt>
   16404:	sub	sp, fp, #28
   16408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1640c:	movw	r1, #56557	; 0xdced
   16410:	mvn	r0, #0
   16414:	mov	r2, #5
   16418:	movt	r1, #1
   1641c:	str	r0, [r4, #52]	; 0x34
   16420:	mov	r0, #0
   16424:	bl	11348 <dcgettext@plt>
   16428:	ldr	r7, [r4]
   1642c:	movw	r1, #55082	; 0xd72a
   16430:	mov	r6, r0
   16434:	movt	r1, #1
   16438:	mov	r0, r7
   1643c:	bl	112b8 <strcmp@plt>
   16440:	cmp	r0, #0
   16444:	bne	16460 <__assert_fail@plt+0x4e78>
   16448:	movw	r1, #55879	; 0xda47
   1644c:	mov	r0, #0
   16450:	mov	r2, #5
   16454:	movt	r1, #1
   16458:	bl	11348 <dcgettext@plt>
   1645c:	mov	r7, r0
   16460:	mov	r0, #4
   16464:	mov	r1, r7
   16468:	bl	19fa0 <__assert_fail@plt+0x89b8>
   1646c:	mov	r3, r0
   16470:	mov	r0, #0
   16474:	mov	r1, #0
   16478:	mov	r2, r6
   1647c:	bl	113e4 <error@plt>
   16480:	movw	r0, #257	; 0x101
   16484:	strh	r0, [r4, #44]	; 0x2c
   16488:	b	165bc <__assert_fail@plt+0x4fd4>
   1648c:	movw	r1, #56683	; 0xdd6b
   16490:	mov	r0, #0
   16494:	mov	r2, #5
   16498:	movt	r1, #1
   1649c:	bl	11348 <dcgettext@plt>
   164a0:	ldr	r6, [r4]
   164a4:	movw	r1, #55082	; 0xd72a
   164a8:	mov	r7, r0
   164ac:	movt	r1, #1
   164b0:	mov	r0, r6
   164b4:	bl	112b8 <strcmp@plt>
   164b8:	cmp	r0, #0
   164bc:	bne	164d8 <__assert_fail@plt+0x4ef0>
   164c0:	movw	r1, #55879	; 0xda47
   164c4:	mov	r0, #0
   164c8:	mov	r2, #5
   164cc:	movt	r1, #1
   164d0:	bl	11348 <dcgettext@plt>
   164d4:	mov	r6, r0
   164d8:	mov	r0, #4
   164dc:	mov	r1, r6
   164e0:	bl	19fa0 <__assert_fail@plt+0x89b8>
   164e4:	mov	r3, r0
   164e8:	mov	r0, #0
   164ec:	mov	r1, #0
   164f0:	mov	r2, r7
   164f4:	bl	113e4 <error@plt>
   164f8:	ldr	r6, [r4]
   164fc:	movw	r1, #55082	; 0xd72a
   16500:	ldr	r7, [r4, #48]	; 0x30
   16504:	movt	r1, #1
   16508:	mov	r0, r6
   1650c:	bl	112b8 <strcmp@plt>
   16510:	cmp	r0, #0
   16514:	bne	16530 <__assert_fail@plt+0x4f48>
   16518:	movw	r1, #55879	; 0xda47
   1651c:	mov	r0, #0
   16520:	mov	r2, #5
   16524:	movt	r1, #1
   16528:	bl	11348 <dcgettext@plt>
   1652c:	mov	r6, r0
   16530:	add	r0, r7, #1
   16534:	cmp	r0, #2
   16538:	bcc	16274 <__assert_fail@plt+0x4c8c>
   1653c:	mov	r0, r7
   16540:	bl	115d0 <close@plt>
   16544:	cmp	r0, #0
   16548:	beq	16274 <__assert_fail@plt+0x4c8c>
   1654c:	bl	114b0 <__errno_location@plt>
   16550:	movw	r1, #56050	; 0xdaf2
   16554:	ldr	r5, [r0]
   16558:	mov	r0, #0
   1655c:	mov	r2, #5
   16560:	movt	r1, #1
   16564:	bl	11348 <dcgettext@plt>
   16568:	str	r0, [sp, #12]
   1656c:	mov	r0, #4
   16570:	mov	r1, r6
   16574:	bl	19fa0 <__assert_fail@plt+0x89b8>
   16578:	ldr	r2, [sp, #12]
   1657c:	mov	r3, r0
   16580:	str	r7, [sp]
   16584:	mov	r0, #0
   16588:	mov	r1, r5
   1658c:	b	16270 <__assert_fail@plt+0x4c88>
   16590:	movw	r1, #56646	; 0xdd46
   16594:	movt	r1, #1
   16598:	b	16210 <__assert_fail@plt+0x4c28>
   1659c:	movw	r0, #53998	; 0xd2ee
   165a0:	movt	r0, #1
   165a4:	str	r0, [sp]
   165a8:	mov	r0, #0
   165ac:	mov	r1, #0
   165b0:	mov	r2, r6
   165b4:	mov	r3, r7
   165b8:	bl	113e4 <error@plt>
   165bc:	ldr	r6, [r4]
   165c0:	movw	r1, #55082	; 0xd72a
   165c4:	movt	r1, #1
   165c8:	mov	r0, r6
   165cc:	bl	112b8 <strcmp@plt>
   165d0:	cmp	r0, #0
   165d4:	bne	165f0 <__assert_fail@plt+0x5008>
   165d8:	movw	r1, #55879	; 0xda47
   165dc:	mov	r0, #0
   165e0:	mov	r2, #5
   165e4:	movt	r1, #1
   165e8:	bl	11348 <dcgettext@plt>
   165ec:	mov	r6, r0
   165f0:	add	r0, r9, #1
   165f4:	cmp	r0, #2
   165f8:	bcc	16650 <__assert_fail@plt+0x5068>
   165fc:	mov	r0, r9
   16600:	bl	115d0 <close@plt>
   16604:	cmp	r0, #0
   16608:	beq	16650 <__assert_fail@plt+0x5068>
   1660c:	bl	114b0 <__errno_location@plt>
   16610:	movw	r1, #56050	; 0xdaf2
   16614:	ldr	r7, [r0]
   16618:	mov	r0, #0
   1661c:	mov	r2, #5
   16620:	movt	r1, #1
   16624:	bl	11348 <dcgettext@plt>
   16628:	mov	r5, r0
   1662c:	mov	r0, #4
   16630:	mov	r1, r6
   16634:	bl	19fa0 <__assert_fail@plt+0x89b8>
   16638:	mov	r3, r0
   1663c:	mov	r0, #0
   16640:	mov	r1, r7
   16644:	mov	r2, r5
   16648:	str	r9, [sp]
   1664c:	bl	113e4 <error@plt>
   16650:	ldr	r6, [r4]
   16654:	movw	r1, #55082	; 0xd72a
   16658:	ldr	r5, [r4, #48]	; 0x30
   1665c:	movt	r1, #1
   16660:	mov	r0, r6
   16664:	bl	112b8 <strcmp@plt>
   16668:	cmp	r0, #0
   1666c:	bne	16688 <__assert_fail@plt+0x50a0>
   16670:	movw	r1, #55879	; 0xda47
   16674:	mov	r0, #0
   16678:	mov	r2, #5
   1667c:	movt	r1, #1
   16680:	bl	11348 <dcgettext@plt>
   16684:	mov	r6, r0
   16688:	add	r0, r5, #1
   1668c:	cmp	r0, #2
   16690:	bcc	166e8 <__assert_fail@plt+0x5100>
   16694:	mov	r0, r5
   16698:	bl	115d0 <close@plt>
   1669c:	cmp	r0, #0
   166a0:	beq	166e8 <__assert_fail@plt+0x5100>
   166a4:	bl	114b0 <__errno_location@plt>
   166a8:	movw	r1, #56050	; 0xdaf2
   166ac:	ldr	r8, [r0]
   166b0:	mov	r0, #0
   166b4:	mov	r2, #5
   166b8:	movt	r1, #1
   166bc:	bl	11348 <dcgettext@plt>
   166c0:	mov	r7, r0
   166c4:	mov	r0, #4
   166c8:	mov	r1, r6
   166cc:	bl	19fa0 <__assert_fail@plt+0x89b8>
   166d0:	mov	r3, r0
   166d4:	mov	r0, #0
   166d8:	mov	r1, r8
   166dc:	mov	r2, r7
   166e0:	str	r5, [sp]
   166e4:	bl	113e4 <error@plt>
   166e8:	mvn	r0, #0
   166ec:	str	r0, [r4, #48]	; 0x30
   166f0:	sub	sp, fp, #28
   166f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166f8:	movw	r0, #56369	; 0xdc31
   166fc:	movw	r1, #56123	; 0xdb3b
   16700:	movw	r3, #56389	; 0xdc45
   16704:	movw	r2, #994	; 0x3e2
   16708:	movt	r0, #1
   1670c:	movt	r1, #1
   16710:	movt	r3, #1
   16714:	bl	115e8 <__assert_fail@plt>
   16718:	movw	r0, #56609	; 0xdd21
   1671c:	movw	r1, #56123	; 0xdb3b
   16720:	movw	r3, #56389	; 0xdc45
   16724:	movw	r2, #1071	; 0x42f
   16728:	movt	r0, #1
   1672c:	b	1670c <__assert_fail@plt+0x5124>
   16730:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16734:	add	fp, sp, #24
   16738:	sub	sp, sp, #112	; 0x70
   1673c:	ldr	r7, [r0, #48]	; 0x30
   16740:	cmn	r7, #1
   16744:	beq	16970 <__assert_fail@plt+0x5388>
   16748:	ldr	r5, [r0]
   1674c:	mov	r6, r1
   16750:	movw	r1, #55082	; 0xd72a
   16754:	mov	r4, r0
   16758:	movt	r1, #1
   1675c:	mov	r0, r5
   16760:	bl	112b8 <strcmp@plt>
   16764:	cmp	r0, #0
   16768:	bne	16788 <__assert_fail@plt+0x51a0>
   1676c:	movw	r1, #55879	; 0xda47
   16770:	mov	r0, #0
   16774:	mov	r2, #5
   16778:	movt	r1, #1
   1677c:	bl	11348 <dcgettext@plt>
   16780:	ldr	r7, [r4, #48]	; 0x30
   16784:	mov	r5, r0
   16788:	add	r2, sp, #8
   1678c:	mov	r0, #3
   16790:	mov	r1, r7
   16794:	bl	1139c <__fxstat64@plt>
   16798:	cmp	r0, #0
   1679c:	beq	16820 <__assert_fail@plt+0x5238>
   167a0:	bl	114b0 <__errno_location@plt>
   167a4:	mov	r7, r0
   167a8:	ldr	r0, [r0]
   167ac:	str	r0, [r4, #52]	; 0x34
   167b0:	ldr	r6, [r4, #48]	; 0x30
   167b4:	add	r0, r6, #1
   167b8:	cmp	r0, #2
   167bc:	bcc	16810 <__assert_fail@plt+0x5228>
   167c0:	mov	r0, r6
   167c4:	bl	115d0 <close@plt>
   167c8:	cmp	r0, #0
   167cc:	beq	16810 <__assert_fail@plt+0x5228>
   167d0:	movw	r1, #56050	; 0xdaf2
   167d4:	ldr	r8, [r7]
   167d8:	mov	r0, #0
   167dc:	mov	r2, #5
   167e0:	movt	r1, #1
   167e4:	bl	11348 <dcgettext@plt>
   167e8:	mov	r7, r0
   167ec:	mov	r0, #4
   167f0:	mov	r1, r5
   167f4:	bl	19fa0 <__assert_fail@plt+0x89b8>
   167f8:	mov	r3, r0
   167fc:	mov	r0, #0
   16800:	mov	r1, r8
   16804:	mov	r2, r7
   16808:	str	r6, [sp]
   1680c:	bl	113e4 <error@plt>
   16810:	mvn	r0, #0
   16814:	str	r0, [r4, #48]	; 0x30
   16818:	sub	sp, fp, #24
   1681c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16820:	ldr	r0, [r4, #40]	; 0x28
   16824:	and	r0, r0, #61440	; 0xf000
   16828:	cmp	r0, #32768	; 0x8000
   1682c:	bne	16900 <__assert_fail@plt+0x5318>
   16830:	add	ip, sp, #8
   16834:	mov	r7, r4
   16838:	add	r3, ip, #48	; 0x30
   1683c:	ldr	r1, [r7, #8]!
   16840:	ldr	r8, [r3]
   16844:	ldr	r2, [r7, #4]
   16848:	ldr	r3, [r3, #4]
   1684c:	subs	r0, r8, r1
   16850:	sbcs	r0, r3, r2
   16854:	bge	168bc <__assert_fail@plt+0x52d4>
   16858:	movw	r1, #56725	; 0xdd95
   1685c:	mov	r0, #0
   16860:	mov	r2, #5
   16864:	mov	r9, #0
   16868:	movt	r1, #1
   1686c:	bl	11348 <dcgettext@plt>
   16870:	mov	r8, r0
   16874:	mov	r0, #0
   16878:	mov	r1, #3
   1687c:	mov	r2, r5
   16880:	bl	1a21c <__assert_fail@plt+0x8c34>
   16884:	mov	r3, r0
   16888:	mov	r0, #0
   1688c:	mov	r1, #0
   16890:	mov	r2, r8
   16894:	bl	113e4 <error@plt>
   16898:	ldr	r0, [r4, #48]	; 0x30
   1689c:	mov	r2, #0
   168a0:	mov	r3, #0
   168a4:	str	r9, [sp]
   168a8:	str	r5, [sp, #4]
   168ac:	bl	15cc0 <__assert_fail@plt+0x46d8>
   168b0:	str	r9, [r7]
   168b4:	str	r9, [r7, #4]
   168b8:	b	16900 <__assert_fail@plt+0x5318>
   168bc:	eor	r0, r8, r1
   168c0:	eor	r1, r3, r2
   168c4:	orrs	r0, r0, r1
   168c8:	bne	16900 <__assert_fail@plt+0x5318>
   168cc:	add	r0, ip, #80	; 0x50
   168d0:	ldrd	r2, [r4, #16]
   168d4:	mov	r7, #0
   168d8:	ldrd	r0, [r0]
   168dc:	cmp	r2, r0
   168e0:	mov	r0, #0
   168e4:	movwgt	r0, #1
   168e8:	sublt	r0, r0, #1
   168ec:	cmp	r3, r1
   168f0:	movwgt	r7, #1
   168f4:	sublt	r7, r7, #1
   168f8:	cmn	r7, r0, lsl #1
   168fc:	beq	16970 <__assert_fail@plt+0x5388>
   16900:	movw	r0, #61890	; 0xf1c2
   16904:	movt	r0, #2
   16908:	ldrb	r1, [r0]
   1690c:	mov	r0, #0
   16910:	cmp	r1, #1
   16914:	bne	16924 <__assert_fail@plt+0x533c>
   16918:	ldr	r0, [r6]
   1691c:	subs	r0, r0, r4
   16920:	movwne	r0, #1
   16924:	ldr	r2, [r4, #48]	; 0x30
   16928:	mvn	r1, #0
   1692c:	str	r1, [sp]
   16930:	str	r1, [sp, #4]
   16934:	mov	r1, r5
   16938:	bl	15b58 <__assert_fail@plt+0x4570>
   1693c:	ldrd	r2, [r4, #8]
   16940:	adds	r2, r2, r0
   16944:	adc	r3, r3, r1
   16948:	orrs	r0, r0, r1
   1694c:	strd	r2, [r4, #8]
   16950:	beq	16970 <__assert_fail@plt+0x5388>
   16954:	movw	r0, #61876	; 0xf1b4
   16958:	str	r4, [r6]
   1695c:	movt	r0, #2
   16960:	ldr	r0, [r0]
   16964:	bl	11378 <fflush_unlocked@plt>
   16968:	cmp	r0, #0
   1696c:	bne	16978 <__assert_fail@plt+0x5390>
   16970:	sub	sp, fp, #24
   16974:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16978:	bl	114b0 <__errno_location@plt>
   1697c:	movw	r1, #54568	; 0xd528
   16980:	ldr	r4, [r0]
   16984:	mov	r0, #0
   16988:	mov	r2, #5
   1698c:	movt	r1, #1
   16990:	bl	11348 <dcgettext@plt>
   16994:	mov	r2, r0
   16998:	mov	r0, #1
   1699c:	mov	r1, r4
   169a0:	bl	113e4 <error@plt>
   169a4:	push	{fp, lr}
   169a8:	mov	fp, sp
   169ac:	mov	r0, #13
   169b0:	bl	112ac <raise@plt>
   169b4:	mov	r0, #1
   169b8:	bl	1145c <exit@plt>
   169bc:	mov	r0, #1
   169c0:	b	116e8 <__assert_fail@plt+0x100>
   169c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169c8:	add	fp, sp, #28
   169cc:	sub	sp, sp, #12
   169d0:	mov	r4, r3
   169d4:	mov	r6, r2
   169d8:	mov	r5, r1
   169dc:	mov	sl, r0
   169e0:	bl	11474 <strlen@plt>
   169e4:	ldr	r8, [r5]
   169e8:	cmp	r8, #0
   169ec:	beq	16aac <__assert_fail@plt+0x54c4>
   169f0:	mov	r7, r0
   169f4:	mov	r0, #0
   169f8:	add	r9, r5, #4
   169fc:	mov	r5, #0
   16a00:	str	r6, [sp, #4]
   16a04:	str	r0, [sp]
   16a08:	mvn	r0, #0
   16a0c:	str	r0, [sp, #8]
   16a10:	b	16a2c <__assert_fail@plt+0x5444>
   16a14:	str	r5, [sp, #8]
   16a18:	ldr	r8, [r9, r5, lsl #2]
   16a1c:	add	r6, r6, r4
   16a20:	add	r5, r5, #1
   16a24:	cmp	r8, #0
   16a28:	beq	16a94 <__assert_fail@plt+0x54ac>
   16a2c:	mov	r0, r8
   16a30:	mov	r1, sl
   16a34:	mov	r2, r7
   16a38:	bl	115b8 <strncmp@plt>
   16a3c:	cmp	r0, #0
   16a40:	bne	16a18 <__assert_fail@plt+0x5430>
   16a44:	mov	r0, r8
   16a48:	bl	11474 <strlen@plt>
   16a4c:	cmp	r0, r7
   16a50:	beq	16ab0 <__assert_fail@plt+0x54c8>
   16a54:	ldr	r0, [sp, #8]
   16a58:	cmn	r0, #1
   16a5c:	beq	16a14 <__assert_fail@plt+0x542c>
   16a60:	ldr	r0, [sp, #4]
   16a64:	cmp	r0, #0
   16a68:	beq	16a88 <__assert_fail@plt+0x54a0>
   16a6c:	ldr	r1, [sp, #8]
   16a70:	mov	r2, r4
   16a74:	mla	r0, r1, r4, r0
   16a78:	mov	r1, r6
   16a7c:	bl	11468 <bcmp@plt>
   16a80:	cmp	r0, #0
   16a84:	beq	16a18 <__assert_fail@plt+0x5430>
   16a88:	mov	r0, #1
   16a8c:	str	r0, [sp]
   16a90:	b	16a18 <__assert_fail@plt+0x5430>
   16a94:	ldr	r0, [sp]
   16a98:	tst	r0, #1
   16a9c:	ldr	r0, [sp, #8]
   16aa0:	mvnne	r0, #1
   16aa4:	sub	sp, fp, #28
   16aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aac:	mvn	r5, #0
   16ab0:	mov	r0, r5
   16ab4:	sub	sp, fp, #28
   16ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16abc:	push	{r4, r5, r6, r7, fp, lr}
   16ac0:	add	fp, sp, #16
   16ac4:	mov	r5, r0
   16ac8:	ldr	r0, [r1]
   16acc:	mvn	r4, #0
   16ad0:	cmp	r0, #0
   16ad4:	beq	16b00 <__assert_fail@plt+0x5518>
   16ad8:	add	r7, r1, #4
   16adc:	mov	r6, #0
   16ae0:	mov	r1, r5
   16ae4:	bl	112b8 <strcmp@plt>
   16ae8:	cmp	r0, #0
   16aec:	beq	16b08 <__assert_fail@plt+0x5520>
   16af0:	ldr	r0, [r7, r6, lsl #2]
   16af4:	add	r6, r6, #1
   16af8:	cmp	r0, #0
   16afc:	bne	16ae0 <__assert_fail@plt+0x54f8>
   16b00:	mov	r0, r4
   16b04:	pop	{r4, r5, r6, r7, fp, pc}
   16b08:	mov	r0, r6
   16b0c:	pop	{r4, r5, r6, r7, fp, pc}
   16b10:	push	{r4, r5, r6, sl, fp, lr}
   16b14:	add	fp, sp, #16
   16b18:	sub	sp, sp, #8
   16b1c:	mov	r5, r0
   16b20:	movw	r0, #57175	; 0xdf57
   16b24:	mov	r4, r1
   16b28:	movw	r1, #57202	; 0xdf72
   16b2c:	cmn	r2, #1
   16b30:	mov	r2, #5
   16b34:	movt	r0, #1
   16b38:	movt	r1, #1
   16b3c:	moveq	r1, r0
   16b40:	mov	r0, #0
   16b44:	bl	11348 <dcgettext@plt>
   16b48:	mov	r6, r0
   16b4c:	mov	r0, #0
   16b50:	mov	r1, #8
   16b54:	mov	r2, r4
   16b58:	bl	19ef8 <__assert_fail@plt+0x8910>
   16b5c:	mov	r4, r0
   16b60:	mov	r0, #1
   16b64:	mov	r1, r5
   16b68:	bl	1a4b8 <__assert_fail@plt+0x8ed0>
   16b6c:	str	r0, [sp]
   16b70:	mov	r0, #0
   16b74:	mov	r1, #0
   16b78:	mov	r2, r6
   16b7c:	mov	r3, r4
   16b80:	bl	113e4 <error@plt>
   16b84:	sub	sp, fp, #16
   16b88:	pop	{r4, r5, r6, sl, fp, pc}
   16b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b90:	add	fp, sp, #28
   16b94:	sub	sp, sp, #4
   16b98:	mov	sl, r1
   16b9c:	movw	r1, #57231	; 0xdf8f
   16ba0:	mov	r4, r2
   16ba4:	mov	r6, r0
   16ba8:	mov	r0, #0
   16bac:	mov	r2, #5
   16bb0:	mov	r8, #0
   16bb4:	movt	r1, #1
   16bb8:	bl	11348 <dcgettext@plt>
   16bbc:	movw	r1, #61872	; 0xf1b0
   16bc0:	movt	r1, #2
   16bc4:	ldr	r1, [r1]
   16bc8:	bl	112a0 <fputs_unlocked@plt>
   16bcc:	ldr	r7, [r6]
   16bd0:	cmp	r7, #0
   16bd4:	beq	16c90 <__assert_fail@plt+0x56a8>
   16bd8:	add	r0, r6, #4
   16bdc:	mov	r9, #0
   16be0:	mov	r6, #0
   16be4:	str	r0, [sp]
   16be8:	cmp	r9, #0
   16bec:	bne	16c44 <__assert_fail@plt+0x565c>
   16bf0:	mov	r5, #0
   16bf4:	movw	r0, #61872	; 0xf1b0
   16bf8:	movt	r0, #2
   16bfc:	ldr	r6, [r0]
   16c00:	mov	r0, r7
   16c04:	bl	1a4c8 <__assert_fail@plt+0x8ee0>
   16c08:	movw	r2, #57252	; 0xdfa4
   16c0c:	mov	r3, r0
   16c10:	mov	r0, r6
   16c14:	mov	r1, #1
   16c18:	movt	r2, #1
   16c1c:	bl	114f8 <__fprintf_chk@plt>
   16c20:	add	r6, sl, r5
   16c24:	ldr	r0, [sp]
   16c28:	add	r8, r8, r4
   16c2c:	ldr	r7, [r0, -r9, lsl #2]
   16c30:	sub	r9, r9, #1
   16c34:	cmp	r7, #0
   16c38:	beq	16c90 <__assert_fail@plt+0x56a8>
   16c3c:	cmp	r9, #0
   16c40:	beq	16bf0 <__assert_fail@plt+0x5608>
   16c44:	add	r1, sl, r8
   16c48:	mov	r0, r6
   16c4c:	mov	r2, r4
   16c50:	bl	11468 <bcmp@plt>
   16c54:	cmp	r0, #0
   16c58:	mov	r5, r8
   16c5c:	bne	16bf4 <__assert_fail@plt+0x560c>
   16c60:	movw	r0, #61872	; 0xf1b0
   16c64:	movt	r0, #2
   16c68:	ldr	r5, [r0]
   16c6c:	mov	r0, r7
   16c70:	bl	1a4c8 <__assert_fail@plt+0x8ee0>
   16c74:	movw	r2, #57260	; 0xdfac
   16c78:	mov	r3, r0
   16c7c:	mov	r0, r5
   16c80:	mov	r1, #1
   16c84:	movt	r2, #1
   16c88:	bl	114f8 <__fprintf_chk@plt>
   16c8c:	b	16c24 <__assert_fail@plt+0x563c>
   16c90:	movw	r0, #61872	; 0xf1b0
   16c94:	movt	r0, #2
   16c98:	ldr	r0, [r0]
   16c9c:	ldr	r1, [r0, #20]
   16ca0:	ldr	r2, [r0, #24]
   16ca4:	cmp	r1, r2
   16ca8:	addcc	r2, r1, #1
   16cac:	strcc	r2, [r0, #20]
   16cb0:	movcc	r0, #10
   16cb4:	strbcc	r0, [r1]
   16cb8:	subcc	sp, fp, #28
   16cbc:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cc0:	mov	r1, #10
   16cc4:	sub	sp, fp, #28
   16cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ccc:	b	11540 <__overflow@plt>
   16cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cd4:	add	fp, sp, #28
   16cd8:	sub	sp, sp, #20
   16cdc:	mov	r9, r0
   16ce0:	ldr	r0, [fp, #16]
   16ce4:	mov	r8, r3
   16ce8:	mov	sl, r2
   16cec:	mov	r7, r1
   16cf0:	cmp	r0, #0
   16cf4:	beq	16db4 <__assert_fail@plt+0x57cc>
   16cf8:	mov	r0, r7
   16cfc:	str	r9, [sp, #8]
   16d00:	str	r8, [sp, #16]
   16d04:	bl	11474 <strlen@plt>
   16d08:	ldr	r9, [sl]
   16d0c:	cmp	r9, #0
   16d10:	beq	16e24 <__assert_fail@plt+0x583c>
   16d14:	str	sl, [sp, #4]
   16d18:	add	r8, sl, #4
   16d1c:	ldr	sl, [sp, #16]
   16d20:	mov	r4, r0
   16d24:	mov	r0, #0
   16d28:	mvn	r6, #0
   16d2c:	mov	r5, #0
   16d30:	str	r0, [sp, #12]
   16d34:	b	16d54 <__assert_fail@plt+0x576c>
   16d38:	mov	r6, r5
   16d3c:	ldr	r9, [r8, r5, lsl #2]
   16d40:	ldr	r0, [fp, #8]
   16d44:	add	r5, r5, #1
   16d48:	add	sl, sl, r0
   16d4c:	cmp	r9, #0
   16d50:	beq	16df4 <__assert_fail@plt+0x580c>
   16d54:	mov	r0, r9
   16d58:	mov	r1, r7
   16d5c:	mov	r2, r4
   16d60:	bl	115b8 <strncmp@plt>
   16d64:	cmp	r0, #0
   16d68:	bne	16d3c <__assert_fail@plt+0x5754>
   16d6c:	mov	r0, r9
   16d70:	bl	11474 <strlen@plt>
   16d74:	cmp	r0, r4
   16d78:	beq	16ea8 <__assert_fail@plt+0x58c0>
   16d7c:	cmn	r6, #1
   16d80:	beq	16d38 <__assert_fail@plt+0x5750>
   16d84:	ldr	r0, [sp, #16]
   16d88:	cmp	r0, #0
   16d8c:	beq	16da8 <__assert_fail@plt+0x57c0>
   16d90:	ldr	r2, [fp, #8]
   16d94:	mov	r1, sl
   16d98:	mla	r0, r6, r2, r0
   16d9c:	bl	11468 <bcmp@plt>
   16da0:	cmp	r0, #0
   16da4:	beq	16d3c <__assert_fail@plt+0x5754>
   16da8:	mov	r0, #1
   16dac:	str	r0, [sp, #12]
   16db0:	b	16d3c <__assert_fail@plt+0x5754>
   16db4:	ldr	r0, [sl]
   16db8:	movw	r4, #57175	; 0xdf57
   16dbc:	movt	r4, #1
   16dc0:	cmp	r0, #0
   16dc4:	beq	16e34 <__assert_fail@plt+0x584c>
   16dc8:	add	r5, sl, #4
   16dcc:	mov	r6, #0
   16dd0:	mov	r1, r7
   16dd4:	bl	112b8 <strcmp@plt>
   16dd8:	cmp	r0, #0
   16ddc:	beq	16e0c <__assert_fail@plt+0x5824>
   16de0:	ldr	r0, [r5, r6, lsl #2]
   16de4:	add	r6, r6, #1
   16de8:	cmp	r0, #0
   16dec:	bne	16dd0 <__assert_fail@plt+0x57e8>
   16df0:	b	16e34 <__assert_fail@plt+0x584c>
   16df4:	ldr	r0, [sp, #12]
   16df8:	ldr	r8, [sp, #16]
   16dfc:	ldr	sl, [sp, #4]
   16e00:	ldr	r9, [sp, #8]
   16e04:	tst	r0, #1
   16e08:	bne	16e18 <__assert_fail@plt+0x5830>
   16e0c:	cmn	r6, #1
   16e10:	bgt	16e9c <__assert_fail@plt+0x58b4>
   16e14:	beq	16e2c <__assert_fail@plt+0x5844>
   16e18:	movw	r4, #57202	; 0xdf72
   16e1c:	movt	r4, #1
   16e20:	b	16e34 <__assert_fail@plt+0x584c>
   16e24:	ldr	r8, [sp, #16]
   16e28:	ldr	r9, [sp, #8]
   16e2c:	movw	r4, #57175	; 0xdf57
   16e30:	movt	r4, #1
   16e34:	ldr	r6, [fp, #12]
   16e38:	mov	r0, #0
   16e3c:	mov	r1, r4
   16e40:	mov	r2, #5
   16e44:	bl	11348 <dcgettext@plt>
   16e48:	mov	r4, r0
   16e4c:	mov	r0, #0
   16e50:	mov	r1, #8
   16e54:	mov	r2, r7
   16e58:	bl	19ef8 <__assert_fail@plt+0x8910>
   16e5c:	mov	r5, r0
   16e60:	mov	r0, #1
   16e64:	mov	r1, r9
   16e68:	bl	1a4b8 <__assert_fail@plt+0x8ed0>
   16e6c:	str	r0, [sp]
   16e70:	mov	r0, #0
   16e74:	mov	r1, #0
   16e78:	mov	r2, r4
   16e7c:	mov	r3, r5
   16e80:	bl	113e4 <error@plt>
   16e84:	ldr	r2, [fp, #8]
   16e88:	mov	r0, sl
   16e8c:	mov	r1, r8
   16e90:	bl	16b8c <__assert_fail@plt+0x55a4>
   16e94:	blx	r6
   16e98:	mvn	r6, #0
   16e9c:	mov	r0, r6
   16ea0:	sub	sp, fp, #28
   16ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea8:	ldr	r8, [sp, #16]
   16eac:	ldr	sl, [sp, #4]
   16eb0:	ldr	r9, [sp, #8]
   16eb4:	mov	r6, r5
   16eb8:	cmn	r6, #1
   16ebc:	bgt	16e9c <__assert_fail@plt+0x58b4>
   16ec0:	b	16e14 <__assert_fail@plt+0x582c>
   16ec4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16ec8:	add	fp, sp, #24
   16ecc:	ldr	r6, [r1]
   16ed0:	cmp	r6, #0
   16ed4:	beq	16f38 <__assert_fail@plt+0x5950>
   16ed8:	mov	r8, r1
   16edc:	mov	r7, r2
   16ee0:	mov	r1, r2
   16ee4:	mov	r2, r3
   16ee8:	mov	r4, r3
   16eec:	mov	r9, r0
   16ef0:	bl	11468 <bcmp@plt>
   16ef4:	cmp	r0, #0
   16ef8:	beq	16f30 <__assert_fail@plt+0x5948>
   16efc:	add	r7, r7, r4
   16f00:	add	r5, r8, #4
   16f04:	ldr	r6, [r5]
   16f08:	cmp	r6, #0
   16f0c:	beq	16f38 <__assert_fail@plt+0x5950>
   16f10:	mov	r0, r9
   16f14:	mov	r1, r7
   16f18:	mov	r2, r4
   16f1c:	bl	11468 <bcmp@plt>
   16f20:	add	r7, r7, r4
   16f24:	add	r5, r5, #4
   16f28:	cmp	r0, #0
   16f2c:	bne	16f04 <__assert_fail@plt+0x591c>
   16f30:	mov	r0, r6
   16f34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16f38:	mov	r6, #0
   16f3c:	mov	r0, r6
   16f40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16f44:	sub	r0, r0, #1
   16f48:	ldrb	r3, [r0, #1]!
   16f4c:	cmp	r3, #47	; 0x2f
   16f50:	beq	16f48 <__assert_fail@plt+0x5960>
   16f54:	mov	r2, #0
   16f58:	mov	r1, r0
   16f5c:	b	16f68 <__assert_fail@plt+0x5980>
   16f60:	ldrb	r3, [r1, #1]!
   16f64:	mov	r2, #1
   16f68:	uxtb	r3, r3
   16f6c:	cmp	r3, #47	; 0x2f
   16f70:	beq	16f60 <__assert_fail@plt+0x5978>
   16f74:	cmp	r3, #0
   16f78:	bxeq	lr
   16f7c:	tst	r2, #1
   16f80:	mov	r2, #0
   16f84:	movne	r0, r1
   16f88:	ldrb	r3, [r1, #1]!
   16f8c:	b	16f68 <__assert_fail@plt+0x5980>
   16f90:	push	{r4, sl, fp, lr}
   16f94:	add	fp, sp, #8
   16f98:	mov	r4, r0
   16f9c:	bl	11474 <strlen@plt>
   16fa0:	mov	r1, r0
   16fa4:	sub	r2, r4, #1
   16fa8:	mov	r0, r1
   16fac:	cmp	r1, #2
   16fb0:	bcc	16fc4 <__assert_fail@plt+0x59dc>
   16fb4:	ldrb	r3, [r2, r0]
   16fb8:	sub	r1, r0, #1
   16fbc:	cmp	r3, #47	; 0x2f
   16fc0:	beq	16fa8 <__assert_fail@plt+0x59c0>
   16fc4:	pop	{r4, sl, fp, pc}
   16fc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16fcc:	add	fp, sp, #24
   16fd0:	vpush	{d8}
   16fd4:	sub	sp, sp, #8
   16fd8:	mov	r4, r1
   16fdc:	add	r1, sp, #4
   16fe0:	mov	r5, r0
   16fe4:	bl	114e0 <strtod@plt>
   16fe8:	ldr	r7, [sp, #4]
   16fec:	vmov.f64	d8, d0
   16ff0:	ldrb	r0, [r7]
   16ff4:	cmp	r0, #0
   16ff8:	beq	17034 <__assert_fail@plt+0x5a4c>
   16ffc:	bl	114b0 <__errno_location@plt>
   17000:	ldr	r8, [r0]
   17004:	mov	r6, r0
   17008:	mov	r1, sp
   1700c:	mov	r0, r5
   17010:	bl	1c2c8 <__assert_fail@plt+0xace0>
   17014:	ldr	r0, [sp]
   17018:	cmp	r7, r0
   1701c:	bcs	17030 <__assert_fail@plt+0x5a48>
   17020:	str	r0, [sp, #4]
   17024:	mov	r7, r0
   17028:	vmov.f64	d8, d0
   1702c:	b	17034 <__assert_fail@plt+0x5a4c>
   17030:	str	r8, [r6]
   17034:	cmp	r4, #0
   17038:	vmov.f64	d0, d8
   1703c:	strne	r7, [r4]
   17040:	sub	sp, fp, #32
   17044:	vpop	{d8}
   17048:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1704c:	movw	r1, #61908	; 0xf1d4
   17050:	movt	r1, #2
   17054:	str	r0, [r1]
   17058:	bx	lr
   1705c:	movw	r1, #61912	; 0xf1d8
   17060:	movt	r1, #2
   17064:	strb	r0, [r1]
   17068:	bx	lr
   1706c:	push	{r4, r5, r6, sl, fp, lr}
   17070:	add	fp, sp, #16
   17074:	sub	sp, sp, #8
   17078:	movw	r0, #61876	; 0xf1b4
   1707c:	movt	r0, #2
   17080:	ldr	r0, [r0]
   17084:	bl	1c330 <__assert_fail@plt+0xad48>
   17088:	cmp	r0, #0
   1708c:	beq	170b4 <__assert_fail@plt+0x5acc>
   17090:	movw	r0, #61912	; 0xf1d8
   17094:	movt	r0, #2
   17098:	ldrb	r0, [r0]
   1709c:	cmp	r0, #0
   170a0:	beq	170d4 <__assert_fail@plt+0x5aec>
   170a4:	bl	114b0 <__errno_location@plt>
   170a8:	ldr	r0, [r0]
   170ac:	cmp	r0, #32
   170b0:	bne	170d4 <__assert_fail@plt+0x5aec>
   170b4:	movw	r0, #61872	; 0xf1b0
   170b8:	movt	r0, #2
   170bc:	ldr	r0, [r0]
   170c0:	bl	1c330 <__assert_fail@plt+0xad48>
   170c4:	cmp	r0, #0
   170c8:	subeq	sp, fp, #16
   170cc:	popeq	{r4, r5, r6, sl, fp, pc}
   170d0:	b	17144 <__assert_fail@plt+0x5b5c>
   170d4:	movw	r1, #54568	; 0xd528
   170d8:	mov	r0, #0
   170dc:	mov	r2, #5
   170e0:	movt	r1, #1
   170e4:	bl	11348 <dcgettext@plt>
   170e8:	mov	r4, r0
   170ec:	movw	r0, #61908	; 0xf1d4
   170f0:	movt	r0, #2
   170f4:	ldr	r6, [r0]
   170f8:	bl	114b0 <__errno_location@plt>
   170fc:	ldr	r5, [r0]
   17100:	cmp	r6, #0
   17104:	bne	17120 <__assert_fail@plt+0x5b38>
   17108:	movw	r2, #57262	; 0xdfae
   1710c:	mov	r0, #0
   17110:	mov	r1, r5
   17114:	mov	r3, r4
   17118:	movt	r2, #1
   1711c:	b	17140 <__assert_fail@plt+0x5b58>
   17120:	mov	r0, r6
   17124:	bl	1a140 <__assert_fail@plt+0x8b58>
   17128:	movw	r2, #55086	; 0xd72e
   1712c:	mov	r3, r0
   17130:	str	r4, [sp]
   17134:	mov	r0, #0
   17138:	mov	r1, r5
   1713c:	movt	r2, #1
   17140:	bl	113e4 <error@plt>
   17144:	movw	r0, #61784	; 0xf158
   17148:	movt	r0, #2
   1714c:	ldr	r0, [r0]
   17150:	bl	1130c <_exit@plt>
   17154:	push	{r4, r5, r6, sl, fp, lr}
   17158:	add	fp, sp, #16
   1715c:	mov	r5, r0
   17160:	mov	r4, r0
   17164:	ldrb	r6, [r5], #-1
   17168:	bl	16f44 <__assert_fail@plt+0x595c>
   1716c:	sub	r2, r0, r4
   17170:	sub	r0, r6, #47	; 0x2f
   17174:	clz	r0, r0
   17178:	lsr	r1, r0, #5
   1717c:	mov	r0, r2
   17180:	cmp	r2, r1
   17184:	bls	17198 <__assert_fail@plt+0x5bb0>
   17188:	ldrb	r3, [r5, r0]
   1718c:	sub	r2, r0, #1
   17190:	cmp	r3, #47	; 0x2f
   17194:	beq	1717c <__assert_fail@plt+0x5b94>
   17198:	pop	{r4, r5, r6, sl, fp, pc}
   1719c:	push	{r4, r5, r6, sl, fp, lr}
   171a0:	add	fp, sp, #16
   171a4:	mov	r6, r0
   171a8:	mov	r4, r0
   171ac:	ldrb	r5, [r6], #-1
   171b0:	bl	16f44 <__assert_fail@plt+0x595c>
   171b4:	sub	r1, r0, r4
   171b8:	sub	r0, r5, #47	; 0x2f
   171bc:	clz	r0, r0
   171c0:	lsr	r0, r0, #5
   171c4:	mov	r5, r1
   171c8:	cmp	r1, r0
   171cc:	bls	171e0 <__assert_fail@plt+0x5bf8>
   171d0:	ldrb	r2, [r6, r5]
   171d4:	sub	r1, r5, #1
   171d8:	cmp	r2, #47	; 0x2f
   171dc:	beq	171c4 <__assert_fail@plt+0x5bdc>
   171e0:	cmp	r5, #0
   171e4:	mov	r0, r5
   171e8:	addeq	r0, r0, #1
   171ec:	add	r0, r0, #1
   171f0:	bl	1c244 <__assert_fail@plt+0xac5c>
   171f4:	mov	r6, r0
   171f8:	cmp	r0, #0
   171fc:	beq	17228 <__assert_fail@plt+0x5c40>
   17200:	mov	r0, r6
   17204:	mov	r1, r4
   17208:	mov	r2, r5
   1720c:	bl	11318 <memcpy@plt>
   17210:	cmp	r5, #0
   17214:	moveq	r0, #46	; 0x2e
   17218:	moveq	r5, #1
   1721c:	strbeq	r0, [r6]
   17220:	mov	r0, #0
   17224:	strb	r0, [r6, r5]
   17228:	mov	r0, r6
   1722c:	pop	{r4, r5, r6, sl, fp, pc}
   17230:	sub	sp, sp, #8
   17234:	push	{r4, r5, r6, r7, fp, lr}
   17238:	add	fp, sp, #16
   1723c:	sub	sp, sp, #8
   17240:	mov	r5, r0
   17244:	add	r0, fp, #8
   17248:	cmp	r1, #11
   1724c:	str	r2, [fp, #8]
   17250:	str	r3, [fp, #12]
   17254:	str	r0, [sp, #4]
   17258:	bhi	17294 <__assert_fail@plt+0x5cac>
   1725c:	mov	r0, #1
   17260:	movw	r2, #1300	; 0x514
   17264:	tst	r2, r0, lsl r1
   17268:	bne	17354 <__assert_fail@plt+0x5d6c>
   1726c:	movw	r2, #2570	; 0xa0a
   17270:	tst	r2, r0, lsl r1
   17274:	bne	172bc <__assert_fail@plt+0x5cd4>
   17278:	cmp	r1, #0
   1727c:	bne	17294 <__assert_fail@plt+0x5cac>
   17280:	ldr	r0, [sp, #4]
   17284:	add	r1, r0, #4
   17288:	str	r1, [sp, #4]
   1728c:	mov	r1, #0
   17290:	b	17360 <__assert_fail@plt+0x5d78>
   17294:	sub	r0, r1, #1024	; 0x400
   17298:	cmp	r0, #10
   1729c:	bhi	17354 <__assert_fail@plt+0x5d6c>
   172a0:	mov	r2, #1
   172a4:	movw	r3, #645	; 0x285
   172a8:	tst	r3, r2, lsl r0
   172ac:	bne	17354 <__assert_fail@plt+0x5d6c>
   172b0:	movw	r3, #1282	; 0x502
   172b4:	tst	r3, r2, lsl r0
   172b8:	beq	172c8 <__assert_fail@plt+0x5ce0>
   172bc:	mov	r0, r5
   172c0:	bl	11534 <fcntl64@plt>
   172c4:	b	1736c <__assert_fail@plt+0x5d84>
   172c8:	cmp	r0, #6
   172cc:	bne	17354 <__assert_fail@plt+0x5d6c>
   172d0:	ldr	r0, [sp, #4]
   172d4:	movw	r7, #61916	; 0xf1dc
   172d8:	movt	r7, #2
   172dc:	add	r1, r0, #4
   172e0:	str	r1, [sp, #4]
   172e4:	ldr	r6, [r0]
   172e8:	ldr	r0, [r7]
   172ec:	cmp	r0, #0
   172f0:	bmi	17390 <__assert_fail@plt+0x5da8>
   172f4:	mov	r0, r5
   172f8:	movw	r1, #1030	; 0x406
   172fc:	mov	r2, r6
   17300:	bl	11534 <fcntl64@plt>
   17304:	mov	r4, r0
   17308:	cmn	r0, #1
   1730c:	bgt	17384 <__assert_fail@plt+0x5d9c>
   17310:	bl	114b0 <__errno_location@plt>
   17314:	ldr	r0, [r0]
   17318:	cmp	r0, #22
   1731c:	bne	17384 <__assert_fail@plt+0x5d9c>
   17320:	mov	r0, r5
   17324:	mov	r1, #0
   17328:	mov	r2, r6
   1732c:	bl	11534 <fcntl64@plt>
   17330:	mov	r4, r0
   17334:	cmp	r0, #0
   17338:	bmi	17370 <__assert_fail@plt+0x5d88>
   1733c:	mvn	r0, #0
   17340:	str	r0, [r7]
   17344:	mov	r0, #1
   17348:	cmp	r0, #0
   1734c:	bne	173bc <__assert_fail@plt+0x5dd4>
   17350:	b	17370 <__assert_fail@plt+0x5d88>
   17354:	ldr	r0, [sp, #4]
   17358:	add	r2, r0, #4
   1735c:	str	r2, [sp, #4]
   17360:	ldr	r2, [r0]
   17364:	mov	r0, r5
   17368:	bl	11534 <fcntl64@plt>
   1736c:	mov	r4, r0
   17370:	mov	r0, r4
   17374:	sub	sp, fp, #16
   17378:	pop	{r4, r5, r6, r7, fp, lr}
   1737c:	add	sp, sp, #8
   17380:	bx	lr
   17384:	mov	r0, #1
   17388:	str	r0, [r7]
   1738c:	b	17370 <__assert_fail@plt+0x5d88>
   17390:	mov	r0, r5
   17394:	mov	r1, #0
   17398:	mov	r2, r6
   1739c:	bl	11534 <fcntl64@plt>
   173a0:	mov	r4, r0
   173a4:	ldr	r0, [r7]
   173a8:	add	r0, r0, #1
   173ac:	clz	r0, r0
   173b0:	lsr	r0, r0, #5
   173b4:	cmp	r0, #0
   173b8:	beq	17370 <__assert_fail@plt+0x5d88>
   173bc:	cmp	r4, #0
   173c0:	bmi	17370 <__assert_fail@plt+0x5d88>
   173c4:	mov	r0, r4
   173c8:	mov	r1, #1
   173cc:	bl	11534 <fcntl64@plt>
   173d0:	cmp	r0, #0
   173d4:	bmi	173f0 <__assert_fail@plt+0x5e08>
   173d8:	orr	r2, r0, #1
   173dc:	mov	r0, r4
   173e0:	mov	r1, #2
   173e4:	bl	11534 <fcntl64@plt>
   173e8:	cmn	r0, #1
   173ec:	bne	17370 <__assert_fail@plt+0x5d88>
   173f0:	bl	114b0 <__errno_location@plt>
   173f4:	ldr	r6, [r0]
   173f8:	mov	r5, r0
   173fc:	mov	r0, r4
   17400:	bl	115d0 <close@plt>
   17404:	str	r6, [r5]
   17408:	mvn	r4, #0
   1740c:	b	17370 <__assert_fail@plt+0x5d88>
   17410:	sub	sp, sp, #8
   17414:	push	{fp, lr}
   17418:	mov	fp, sp
   1741c:	sub	sp, sp, #8
   17420:	str	r2, [fp, #8]
   17424:	str	r3, [fp, #12]
   17428:	tst	r1, #64	; 0x40
   1742c:	mov	r2, #0
   17430:	ldrne	r2, [fp, #8]
   17434:	bl	113f0 <open64@plt>
   17438:	bl	1a678 <__assert_fail@plt+0x9090>
   1743c:	mov	sp, fp
   17440:	pop	{fp, lr}
   17444:	add	sp, sp, #8
   17448:	bx	lr
   1744c:	push	{r4, r5, r6, sl, fp, lr}
   17450:	add	fp, sp, #16
   17454:	mov	r4, r0
   17458:	bl	114b0 <__errno_location@plt>
   1745c:	ldr	r6, [r0]
   17460:	mov	r5, r0
   17464:	mov	r0, r4
   17468:	bl	112f4 <free@plt>
   1746c:	str	r6, [r5]
   17470:	pop	{r4, r5, r6, sl, fp, pc}
   17474:	andeq	r0, r0, r0
   17478:	ldr	r0, [r0, #8]
   1747c:	bx	lr
   17480:	ldr	r0, [r0, #12]
   17484:	bx	lr
   17488:	ldr	r0, [r0, #16]
   1748c:	bx	lr
   17490:	ldm	r0, {r2, ip}
   17494:	mov	r0, #0
   17498:	cmp	r2, ip
   1749c:	bxcs	lr
   174a0:	mov	r0, #0
   174a4:	b	174b4 <__assert_fail@plt+0x5ecc>
   174a8:	add	r2, r2, #8
   174ac:	cmp	r2, ip
   174b0:	bcs	174e4 <__assert_fail@plt+0x5efc>
   174b4:	ldr	r1, [r2]
   174b8:	cmp	r1, #0
   174bc:	beq	174a8 <__assert_fail@plt+0x5ec0>
   174c0:	mov	r3, #0
   174c4:	mov	r1, r2
   174c8:	ldr	r1, [r1, #4]
   174cc:	add	r3, r3, #1
   174d0:	cmp	r1, #0
   174d4:	bne	174c8 <__assert_fail@plt+0x5ee0>
   174d8:	cmp	r3, r0
   174dc:	movhi	r0, r3
   174e0:	b	174a8 <__assert_fail@plt+0x5ec0>
   174e4:	bx	lr
   174e8:	push	{fp, lr}
   174ec:	mov	fp, sp
   174f0:	ldm	r0, {r3, ip}
   174f4:	mov	lr, #0
   174f8:	mov	r1, #0
   174fc:	cmp	r3, ip
   17500:	bcs	17544 <__assert_fail@plt+0x5f5c>
   17504:	mov	r1, #0
   17508:	mov	lr, #0
   1750c:	b	1751c <__assert_fail@plt+0x5f34>
   17510:	add	r3, r3, #8
   17514:	cmp	r3, ip
   17518:	bcs	17544 <__assert_fail@plt+0x5f5c>
   1751c:	ldr	r2, [r3]
   17520:	cmp	r2, #0
   17524:	beq	17510 <__assert_fail@plt+0x5f28>
   17528:	mov	r2, r3
   1752c:	ldr	r2, [r2, #4]
   17530:	add	r1, r1, #1
   17534:	cmp	r2, #0
   17538:	bne	1752c <__assert_fail@plt+0x5f44>
   1753c:	add	lr, lr, #1
   17540:	b	17510 <__assert_fail@plt+0x5f28>
   17544:	ldr	r2, [r0, #12]
   17548:	cmp	lr, r2
   1754c:	bne	17564 <__assert_fail@plt+0x5f7c>
   17550:	ldr	r2, [r0, #16]
   17554:	mov	r0, #1
   17558:	cmp	r1, r2
   1755c:	movne	r0, #0
   17560:	pop	{fp, pc}
   17564:	mov	r0, #0
   17568:	pop	{fp, pc}
   1756c:	nop	{0}
   17570:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17574:	add	fp, sp, #24
   17578:	sub	sp, sp, #8
   1757c:	ldr	r6, [r0]
   17580:	ldmib	r0, {r2, r7, r8}
   17584:	ldr	r3, [r0, #16]
   17588:	mov	r4, r1
   1758c:	mov	r5, #0
   17590:	cmp	r6, r2
   17594:	bcs	175dc <__assert_fail@plt+0x5ff4>
   17598:	mov	r5, #0
   1759c:	b	175ac <__assert_fail@plt+0x5fc4>
   175a0:	add	r6, r6, #8
   175a4:	cmp	r6, r2
   175a8:	bcs	175dc <__assert_fail@plt+0x5ff4>
   175ac:	ldr	r0, [r6]
   175b0:	cmp	r0, #0
   175b4:	beq	175a0 <__assert_fail@plt+0x5fb8>
   175b8:	mov	r0, #0
   175bc:	mov	r1, r6
   175c0:	ldr	r1, [r1, #4]
   175c4:	add	r0, r0, #1
   175c8:	cmp	r1, #0
   175cc:	bne	175c0 <__assert_fail@plt+0x5fd8>
   175d0:	cmp	r0, r5
   175d4:	movhi	r5, r0
   175d8:	b	175a0 <__assert_fail@plt+0x5fb8>
   175dc:	movw	r2, #57265	; 0xdfb1
   175e0:	mov	r0, r4
   175e4:	mov	r1, #1
   175e8:	movt	r2, #1
   175ec:	bl	114f8 <__fprintf_chk@plt>
   175f0:	movw	r2, #57289	; 0xdfc9
   175f4:	mov	r0, r4
   175f8:	mov	r1, #1
   175fc:	mov	r3, r7
   17600:	movt	r2, #1
   17604:	bl	114f8 <__fprintf_chk@plt>
   17608:	vmov	s0, r8
   1760c:	vldr	d16, [pc, #76]	; 17660 <__assert_fail@plt+0x6078>
   17610:	movw	r2, #57313	; 0xdfe1
   17614:	mov	r0, r4
   17618:	mov	r1, #1
   1761c:	mov	r3, r8
   17620:	movt	r2, #1
   17624:	vcvt.f64.u32	d17, s0
   17628:	vmov	s0, r7
   1762c:	vcvt.f64.u32	d18, s0
   17630:	vmul.f64	d16, d17, d16
   17634:	vdiv.f64	d16, d16, d18
   17638:	vstr	d16, [sp]
   1763c:	bl	114f8 <__fprintf_chk@plt>
   17640:	movw	r2, #57346	; 0xe002
   17644:	mov	r0, r4
   17648:	mov	r1, #1
   1764c:	mov	r3, r5
   17650:	movt	r2, #1
   17654:	sub	sp, fp, #24
   17658:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1765c:	b	114f8 <__fprintf_chk@plt>
   17660:	andeq	r0, r0, r0
   17664:	subsmi	r0, r9, r0
   17668:	push	{r4, r5, r6, r7, fp, lr}
   1766c:	add	fp, sp, #16
   17670:	mov	r4, r1
   17674:	ldr	r1, [r0, #8]
   17678:	ldr	r2, [r0, #24]
   1767c:	mov	r5, r0
   17680:	mov	r0, r4
   17684:	blx	r2
   17688:	ldr	r1, [r5, #8]
   1768c:	cmp	r0, r1
   17690:	bcs	176f8 <__assert_fail@plt+0x6110>
   17694:	ldr	r7, [r5]
   17698:	mov	r6, #0
   1769c:	ldr	r1, [r7, r0, lsl #3]!
   176a0:	cmp	r1, #0
   176a4:	cmpne	r7, #0
   176a8:	bne	176d8 <__assert_fail@plt+0x60f0>
   176ac:	mov	r0, r6
   176b0:	pop	{r4, r5, r6, r7, fp, pc}
   176b4:	ldr	r2, [r5, #28]
   176b8:	mov	r0, r4
   176bc:	blx	r2
   176c0:	cmp	r0, #0
   176c4:	bne	176ec <__assert_fail@plt+0x6104>
   176c8:	ldr	r7, [r7, #4]
   176cc:	cmp	r7, #0
   176d0:	beq	176ac <__assert_fail@plt+0x60c4>
   176d4:	ldr	r1, [r7]
   176d8:	cmp	r1, r4
   176dc:	bne	176b4 <__assert_fail@plt+0x60cc>
   176e0:	mov	r6, r4
   176e4:	mov	r0, r6
   176e8:	pop	{r4, r5, r6, r7, fp, pc}
   176ec:	ldr	r6, [r7]
   176f0:	mov	r0, r6
   176f4:	pop	{r4, r5, r6, r7, fp, pc}
   176f8:	bl	115c4 <abort@plt>
   176fc:	push	{fp, lr}
   17700:	mov	fp, sp
   17704:	ldr	r1, [r0, #16]
   17708:	cmp	r1, #0
   1770c:	beq	1772c <__assert_fail@plt+0x6144>
   17710:	ldm	r0, {r1, r2}
   17714:	cmp	r1, r2
   17718:	bcs	17734 <__assert_fail@plt+0x614c>
   1771c:	ldr	r0, [r1], #8
   17720:	cmp	r0, #0
   17724:	beq	17714 <__assert_fail@plt+0x612c>
   17728:	pop	{fp, pc}
   1772c:	mov	r0, #0
   17730:	pop	{fp, pc}
   17734:	bl	115c4 <abort@plt>
   17738:	push	{r4, r5, fp, lr}
   1773c:	add	fp, sp, #8
   17740:	mov	r5, r1
   17744:	ldr	r1, [r0, #8]
   17748:	ldr	r2, [r0, #24]
   1774c:	mov	r4, r0
   17750:	mov	r0, r5
   17754:	blx	r2
   17758:	ldr	r1, [r4, #8]
   1775c:	cmp	r0, r1
   17760:	bcs	177c4 <__assert_fail@plt+0x61dc>
   17764:	ldr	r1, [r4]
   17768:	add	r2, r1, r0, lsl #3
   1776c:	ldr	r3, [r2]
   17770:	ldr	r2, [r2, #4]
   17774:	cmp	r3, r5
   17778:	beq	17788 <__assert_fail@plt+0x61a0>
   1777c:	cmp	r2, #0
   17780:	bne	1776c <__assert_fail@plt+0x6184>
   17784:	b	17798 <__assert_fail@plt+0x61b0>
   17788:	cmp	r2, #0
   1778c:	beq	17798 <__assert_fail@plt+0x61b0>
   17790:	ldr	r0, [r2]
   17794:	pop	{r4, r5, fp, pc}
   17798:	ldr	r2, [r4, #4]
   1779c:	add	r0, r1, r0, lsl #3
   177a0:	add	r1, r0, #8
   177a4:	cmp	r1, r2
   177a8:	bcs	177bc <__assert_fail@plt+0x61d4>
   177ac:	ldr	r0, [r1], #8
   177b0:	cmp	r0, #0
   177b4:	beq	177a4 <__assert_fail@plt+0x61bc>
   177b8:	pop	{r4, r5, fp, pc}
   177bc:	mov	r0, #0
   177c0:	pop	{r4, r5, fp, pc}
   177c4:	bl	115c4 <abort@plt>
   177c8:	push	{r4, r5, fp, lr}
   177cc:	add	fp, sp, #8
   177d0:	ldm	r0, {r5, lr}
   177d4:	mov	ip, r0
   177d8:	mov	r0, #0
   177dc:	cmp	r5, lr
   177e0:	popcs	{r4, r5, fp, pc}
   177e4:	mov	r0, #0
   177e8:	b	177fc <__assert_fail@plt+0x6214>
   177ec:	ldr	lr, [ip, #4]
   177f0:	add	r5, r5, #8
   177f4:	cmp	r5, lr
   177f8:	bcs	17834 <__assert_fail@plt+0x624c>
   177fc:	ldr	r3, [r5]
   17800:	cmp	r3, #0
   17804:	cmpne	r5, #0
   17808:	beq	177f0 <__assert_fail@plt+0x6208>
   1780c:	mov	r3, r5
   17810:	cmp	r0, r2
   17814:	bcs	17834 <__assert_fail@plt+0x624c>
   17818:	ldr	r4, [r3]
   1781c:	str	r4, [r1, r0, lsl #2]
   17820:	add	r0, r0, #1
   17824:	ldr	r3, [r3, #4]
   17828:	cmp	r3, #0
   1782c:	bne	17810 <__assert_fail@plt+0x6228>
   17830:	b	177ec <__assert_fail@plt+0x6204>
   17834:	pop	{r4, r5, fp, pc}
   17838:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1783c:	add	fp, sp, #24
   17840:	mov	r5, r1
   17844:	ldr	r4, [r0]
   17848:	ldr	r1, [r0, #4]
   1784c:	mov	r6, #0
   17850:	cmp	r4, r1
   17854:	bcs	178c0 <__assert_fail@plt+0x62d8>
   17858:	mov	r9, r2
   1785c:	mov	r8, r0
   17860:	mov	r6, #0
   17864:	b	17878 <__assert_fail@plt+0x6290>
   17868:	ldr	r1, [r8, #4]
   1786c:	add	r4, r4, #8
   17870:	cmp	r4, r1
   17874:	bcs	178c0 <__assert_fail@plt+0x62d8>
   17878:	ldr	r0, [r4]
   1787c:	cmp	r0, #0
   17880:	cmpne	r4, #0
   17884:	beq	1786c <__assert_fail@plt+0x6284>
   17888:	mov	r1, r9
   1788c:	blx	r5
   17890:	cmp	r0, #0
   17894:	beq	178c0 <__assert_fail@plt+0x62d8>
   17898:	mov	r7, r4
   1789c:	ldr	r7, [r7, #4]
   178a0:	add	r6, r6, #1
   178a4:	cmp	r7, #0
   178a8:	beq	17868 <__assert_fail@plt+0x6280>
   178ac:	ldr	r0, [r7]
   178b0:	mov	r1, r9
   178b4:	blx	r5
   178b8:	cmp	r0, #0
   178bc:	bne	1789c <__assert_fail@plt+0x62b4>
   178c0:	mov	r0, r6
   178c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   178c8:	ldrb	r2, [r0]
   178cc:	cmp	r2, #0
   178d0:	moveq	r0, #0
   178d4:	bxeq	lr
   178d8:	add	r3, r0, #1
   178dc:	mov	r0, #0
   178e0:	rsb	r0, r0, r0, lsl #5
   178e4:	uxtab	r0, r0, r2
   178e8:	udiv	r2, r0, r1
   178ec:	mls	r0, r2, r1, r0
   178f0:	ldrb	r2, [r3], #1
   178f4:	cmp	r2, #0
   178f8:	bne	178e0 <__assert_fail@plt+0x62f8>
   178fc:	bx	lr
   17900:	movw	r1, #57376	; 0xe020
   17904:	movt	r1, #1
   17908:	vld1.32	{d16-d17}, [r1]!
   1790c:	ldr	r1, [r1]
   17910:	vst1.32	{d16-d17}, [r0]!
   17914:	str	r1, [r0]
   17918:	bx	lr
   1791c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17920:	add	fp, sp, #24
   17924:	movw	r9, #31556	; 0x7b44
   17928:	cmp	r3, #0
   1792c:	movw	r5, #31536	; 0x7b30
   17930:	mov	r6, r0
   17934:	mov	r0, #40	; 0x28
   17938:	mov	r7, r1
   1793c:	movt	r9, #1
   17940:	movne	r9, r3
   17944:	cmp	r2, #0
   17948:	movt	r5, #1
   1794c:	movne	r5, r2
   17950:	bl	1c244 <__assert_fail@plt+0xac5c>
   17954:	mov	r8, #0
   17958:	cmp	r0, #0
   1795c:	beq	17b18 <__assert_fail@plt+0x6530>
   17960:	mov	r4, r0
   17964:	movw	r0, #57376	; 0xe020
   17968:	cmp	r7, #0
   1796c:	movt	r0, #1
   17970:	moveq	r7, r0
   17974:	cmp	r7, r0
   17978:	str	r7, [r4, #20]
   1797c:	beq	179f8 <__assert_fail@plt+0x6410>
   17980:	vldr	s2, [pc, #408]	; 17b20 <__assert_fail@plt+0x6538>
   17984:	vldr	s0, [r7, #8]
   17988:	vcmpe.f32	s0, s2
   1798c:	vmrs	APSR_nzcv, fpscr
   17990:	ble	17aa4 <__assert_fail@plt+0x64bc>
   17994:	vldr	s4, [pc, #392]	; 17b24 <__assert_fail@plt+0x653c>
   17998:	vcmpe.f32	s0, s4
   1799c:	vmrs	APSR_nzcv, fpscr
   179a0:	bpl	17aa4 <__assert_fail@plt+0x64bc>
   179a4:	vldr	s4, [pc, #380]	; 17b28 <__assert_fail@plt+0x6540>
   179a8:	vldr	s6, [r7, #12]
   179ac:	vcmpe.f32	s6, s4
   179b0:	vmrs	APSR_nzcv, fpscr
   179b4:	ble	17aa4 <__assert_fail@plt+0x64bc>
   179b8:	vldr	s4, [r7]
   179bc:	vcmpe.f32	s4, #0.0
   179c0:	vmrs	APSR_nzcv, fpscr
   179c4:	blt	17aa4 <__assert_fail@plt+0x64bc>
   179c8:	vadd.f32	s2, s4, s2
   179cc:	vcmpe.f32	s2, s0
   179d0:	vmrs	APSR_nzcv, fpscr
   179d4:	bpl	17aa4 <__assert_fail@plt+0x64bc>
   179d8:	vldr	s0, [r7, #4]
   179dc:	vmov.f32	s4, #112	; 0x3f800000  1.0
   179e0:	vcmpe.f32	s0, s4
   179e4:	vmrs	APSR_nzcv, fpscr
   179e8:	bhi	17aa4 <__assert_fail@plt+0x64bc>
   179ec:	vcmpe.f32	s2, s0
   179f0:	vmrs	APSR_nzcv, fpscr
   179f4:	bpl	17aa4 <__assert_fail@plt+0x64bc>
   179f8:	ldrb	r0, [r7, #16]
   179fc:	cmp	r0, #0
   17a00:	bne	17a2c <__assert_fail@plt+0x6444>
   17a04:	vmov	s2, r6
   17a08:	vldr	s0, [r7, #8]
   17a0c:	vldr	s4, [pc, #280]	; 17b2c <__assert_fail@plt+0x6544>
   17a10:	vcvt.f32.u32	s2, s2
   17a14:	vdiv.f32	s2, s2, s0
   17a18:	vcvt.u32.f32	s0, s2
   17a1c:	vcmpe.f32	s2, s4
   17a20:	vmrs	APSR_nzcv, fpscr
   17a24:	bge	17ab4 <__assert_fail@plt+0x64cc>
   17a28:	vmov	r6, s0
   17a2c:	cmp	r6, #10
   17a30:	movls	r6, #10
   17a34:	orr	r0, r6, #1
   17a38:	cmn	r0, #1
   17a3c:	beq	17ab4 <__assert_fail@plt+0x64cc>
   17a40:	ldr	r6, [fp, #8]
   17a44:	mov	r1, #3
   17a48:	cmp	r0, #10
   17a4c:	bcc	17a84 <__assert_fail@plt+0x649c>
   17a50:	mov	r1, #3
   17a54:	mov	r3, #9
   17a58:	mov	r2, #12
   17a5c:	udiv	r7, r0, r1
   17a60:	mls	r7, r7, r1, r0
   17a64:	cmp	r7, #0
   17a68:	beq	17a84 <__assert_fail@plt+0x649c>
   17a6c:	add	r3, r3, r2
   17a70:	add	r2, r2, #8
   17a74:	add	r1, r1, #2
   17a78:	add	r3, r3, #4
   17a7c:	cmp	r3, r0
   17a80:	bcc	17a5c <__assert_fail@plt+0x6474>
   17a84:	udiv	r2, r0, r1
   17a88:	mls	r1, r2, r1, r0
   17a8c:	cmp	r1, #0
   17a90:	bne	17aac <__assert_fail@plt+0x64c4>
   17a94:	add	r0, r0, #2
   17a98:	cmn	r0, #1
   17a9c:	bne	17a44 <__assert_fail@plt+0x645c>
   17aa0:	b	17ab4 <__assert_fail@plt+0x64cc>
   17aa4:	str	r0, [r4, #20]
   17aa8:	b	17abc <__assert_fail@plt+0x64d4>
   17aac:	cmp	r0, #536870912	; 0x20000000
   17ab0:	bcc	17acc <__assert_fail@plt+0x64e4>
   17ab4:	mov	r0, #0
   17ab8:	str	r0, [r4, #8]
   17abc:	mov	r0, r4
   17ac0:	bl	1744c <__assert_fail@plt+0x5e64>
   17ac4:	mov	r0, r8
   17ac8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17acc:	cmp	r0, #0
   17ad0:	str	r0, [r4, #8]
   17ad4:	beq	17abc <__assert_fail@plt+0x64d4>
   17ad8:	mov	r1, #8
   17adc:	bl	1c1f0 <__assert_fail@plt+0xac08>
   17ae0:	cmp	r0, #0
   17ae4:	str	r0, [r4]
   17ae8:	beq	17abc <__assert_fail@plt+0x64d4>
   17aec:	mov	r1, #0
   17af0:	str	r5, [r4, #24]
   17af4:	str	r9, [r4, #28]
   17af8:	str	r6, [r4, #32]
   17afc:	mov	r8, r4
   17b00:	str	r1, [r4, #36]	; 0x24
   17b04:	str	r1, [r4, #12]
   17b08:	str	r1, [r4, #16]
   17b0c:	ldr	r1, [r4, #8]
   17b10:	add	r0, r0, r1, lsl #3
   17b14:	str	r0, [r4, #4]
   17b18:	mov	r0, r8
   17b1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b20:	stclcc	12, cr12, [ip, #820]	; 0x334
   17b24:	svccc	0x00666666
   17b28:	svccc	0x008ccccd
   17b2c:	svcmi	0x00800000
   17b30:	ror	r2, r0, #3
   17b34:	udiv	r2, r2, r1
   17b38:	mul	r1, r2, r1
   17b3c:	rsb	r0, r1, r0, ror #3
   17b40:	bx	lr
   17b44:	sub	r0, r0, r1
   17b48:	clz	r0, r0
   17b4c:	lsr	r0, r0, #5
   17b50:	bx	lr
   17b54:	push	{r4, r5, r6, r7, fp, lr}
   17b58:	add	fp, sp, #16
   17b5c:	mov	r4, r0
   17b60:	ldr	r5, [r0]
   17b64:	ldr	r0, [r0, #4]
   17b68:	cmp	r5, r0
   17b6c:	bcs	17c10 <__assert_fail@plt+0x6628>
   17b70:	mov	r6, #0
   17b74:	b	17b90 <__assert_fail@plt+0x65a8>
   17b78:	str	r6, [r5]
   17b7c:	str	r6, [r5, #4]
   17b80:	ldr	r0, [r4, #4]
   17b84:	add	r5, r5, #8
   17b88:	cmp	r5, r0
   17b8c:	bcs	17c10 <__assert_fail@plt+0x6628>
   17b90:	ldr	r1, [r5]
   17b94:	cmp	r1, #0
   17b98:	beq	17b84 <__assert_fail@plt+0x659c>
   17b9c:	ldr	r1, [r4, #32]
   17ba0:	ldr	r7, [r5, #4]
   17ba4:	cmp	r1, #0
   17ba8:	mov	r0, r1
   17bac:	movwne	r0, #1
   17bb0:	cmp	r7, #0
   17bb4:	bne	17bf8 <__assert_fail@plt+0x6610>
   17bb8:	cmp	r0, #0
   17bbc:	beq	17b78 <__assert_fail@plt+0x6590>
   17bc0:	ldr	r0, [r5]
   17bc4:	blx	r1
   17bc8:	b	17b78 <__assert_fail@plt+0x6590>
   17bcc:	str	r6, [r7]
   17bd0:	cmp	r1, #0
   17bd4:	ldr	r2, [r7, #4]
   17bd8:	ldr	r0, [r4, #36]	; 0x24
   17bdc:	str	r0, [r7, #4]
   17be0:	mov	r0, r1
   17be4:	str	r7, [r4, #36]	; 0x24
   17be8:	movwne	r0, #1
   17bec:	cmp	r2, #0
   17bf0:	mov	r7, r2
   17bf4:	beq	17bb8 <__assert_fail@plt+0x65d0>
   17bf8:	tst	r0, #1
   17bfc:	beq	17bcc <__assert_fail@plt+0x65e4>
   17c00:	ldr	r0, [r7]
   17c04:	blx	r1
   17c08:	ldr	r1, [r4, #32]
   17c0c:	b	17bcc <__assert_fail@plt+0x65e4>
   17c10:	mov	r0, #0
   17c14:	str	r0, [r4, #12]
   17c18:	str	r0, [r4, #16]
   17c1c:	pop	{r4, r5, r6, r7, fp, pc}
   17c20:	push	{r4, r5, r6, sl, fp, lr}
   17c24:	add	fp, sp, #16
   17c28:	mov	r4, r0
   17c2c:	ldr	r0, [r0, #32]
   17c30:	cmp	r0, #0
   17c34:	beq	17ca8 <__assert_fail@plt+0x66c0>
   17c38:	ldr	r0, [r4, #16]
   17c3c:	cmp	r0, #0
   17c40:	beq	17ca8 <__assert_fail@plt+0x66c0>
   17c44:	ldr	r5, [r4]
   17c48:	ldr	r1, [r4, #4]
   17c4c:	cmp	r5, r1
   17c50:	bcc	17c68 <__assert_fail@plt+0x6680>
   17c54:	b	17ca8 <__assert_fail@plt+0x66c0>
   17c58:	ldr	r1, [r4, #4]
   17c5c:	add	r5, r5, #8
   17c60:	cmp	r5, r1
   17c64:	bcs	17ca8 <__assert_fail@plt+0x66c0>
   17c68:	ldr	r0, [r5]
   17c6c:	cmp	r0, #0
   17c70:	cmpne	r5, #0
   17c74:	beq	17c5c <__assert_fail@plt+0x6674>
   17c78:	ldr	r1, [r4, #32]
   17c7c:	blx	r1
   17c80:	ldr	r6, [r5, #4]
   17c84:	cmp	r6, #0
   17c88:	beq	17c58 <__assert_fail@plt+0x6670>
   17c8c:	ldr	r1, [r4, #32]
   17c90:	ldr	r0, [r6]
   17c94:	blx	r1
   17c98:	ldr	r6, [r6, #4]
   17c9c:	cmp	r6, #0
   17ca0:	bne	17c8c <__assert_fail@plt+0x66a4>
   17ca4:	b	17c58 <__assert_fail@plt+0x6670>
   17ca8:	ldr	r5, [r4]
   17cac:	ldr	r1, [r4, #4]
   17cb0:	cmp	r5, r1
   17cb4:	bcc	17cc8 <__assert_fail@plt+0x66e0>
   17cb8:	b	17cf0 <__assert_fail@plt+0x6708>
   17cbc:	add	r5, r5, #8
   17cc0:	cmp	r5, r1
   17cc4:	bcs	17cf0 <__assert_fail@plt+0x6708>
   17cc8:	ldr	r0, [r5, #4]
   17ccc:	cmp	r0, #0
   17cd0:	beq	17cbc <__assert_fail@plt+0x66d4>
   17cd4:	ldr	r6, [r0, #4]
   17cd8:	bl	1744c <__assert_fail@plt+0x5e64>
   17cdc:	cmp	r6, #0
   17ce0:	mov	r0, r6
   17ce4:	bne	17cd4 <__assert_fail@plt+0x66ec>
   17ce8:	ldr	r1, [r4, #4]
   17cec:	b	17cbc <__assert_fail@plt+0x66d4>
   17cf0:	ldr	r0, [r4, #36]	; 0x24
   17cf4:	cmp	r0, #0
   17cf8:	beq	17d10 <__assert_fail@plt+0x6728>
   17cfc:	ldr	r5, [r0, #4]
   17d00:	bl	1744c <__assert_fail@plt+0x5e64>
   17d04:	cmp	r5, #0
   17d08:	mov	r0, r5
   17d0c:	bne	17cfc <__assert_fail@plt+0x6714>
   17d10:	ldr	r0, [r4]
   17d14:	bl	1744c <__assert_fail@plt+0x5e64>
   17d18:	mov	r0, r4
   17d1c:	pop	{r4, r5, r6, sl, fp, lr}
   17d20:	b	1744c <__assert_fail@plt+0x5e64>
   17d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d28:	add	fp, sp, #28
   17d2c:	sub	sp, sp, #44	; 0x2c
   17d30:	mov	r7, r0
   17d34:	mov	r4, r0
   17d38:	ldr	r0, [r7, #20]!
   17d3c:	ldrb	r2, [r0, #16]
   17d40:	cmp	r2, #0
   17d44:	bne	17d74 <__assert_fail@plt+0x678c>
   17d48:	vmov	s2, r1
   17d4c:	vldr	s0, [r0, #8]
   17d50:	vldr	s4, [pc, #564]	; 17f8c <__assert_fail@plt+0x69a4>
   17d54:	mov	r5, #0
   17d58:	vcvt.f32.u32	s2, s2
   17d5c:	vdiv.f32	s2, s2, s0
   17d60:	vcvt.u32.f32	s0, s2
   17d64:	vcmpe.f32	s2, s4
   17d68:	vmrs	APSR_nzcv, fpscr
   17d6c:	bge	17f7c <__assert_fail@plt+0x6994>
   17d70:	vmov	r1, s0
   17d74:	cmp	r1, #10
   17d78:	mov	r5, #0
   17d7c:	movls	r1, #10
   17d80:	orr	r6, r1, #1
   17d84:	cmn	r6, #1
   17d88:	beq	17f7c <__assert_fail@plt+0x6994>
   17d8c:	mov	r0, #3
   17d90:	cmp	r6, #10
   17d94:	bcc	17dcc <__assert_fail@plt+0x67e4>
   17d98:	mov	r0, #3
   17d9c:	mov	r2, #9
   17da0:	mov	r1, #12
   17da4:	udiv	r3, r6, r0
   17da8:	mls	r3, r3, r0, r6
   17dac:	cmp	r3, #0
   17db0:	beq	17dcc <__assert_fail@plt+0x67e4>
   17db4:	add	r2, r2, r1
   17db8:	add	r1, r1, #8
   17dbc:	add	r0, r0, #2
   17dc0:	add	r2, r2, #4
   17dc4:	cmp	r2, r6
   17dc8:	bcc	17da4 <__assert_fail@plt+0x67bc>
   17dcc:	udiv	r1, r6, r0
   17dd0:	mls	r0, r1, r0, r6
   17dd4:	cmp	r0, #0
   17dd8:	bne	17dec <__assert_fail@plt+0x6804>
   17ddc:	add	r6, r6, #2
   17de0:	cmn	r6, #1
   17de4:	bne	17d8c <__assert_fail@plt+0x67a4>
   17de8:	b	17f7c <__assert_fail@plt+0x6994>
   17dec:	sub	r0, r6, #1
   17df0:	cmn	r0, #-536870910	; 0xe0000002
   17df4:	bhi	17f7c <__assert_fail@plt+0x6994>
   17df8:	ldr	r0, [r4, #8]
   17dfc:	cmp	r6, r0
   17e00:	bne	17e0c <__assert_fail@plt+0x6824>
   17e04:	mov	r5, #1
   17e08:	b	17f7c <__assert_fail@plt+0x6994>
   17e0c:	mov	r0, r6
   17e10:	mov	r1, #8
   17e14:	bl	1c1f0 <__assert_fail@plt+0xac08>
   17e18:	cmp	r0, #0
   17e1c:	str	r0, [sp, #4]
   17e20:	beq	17f7c <__assert_fail@plt+0x6994>
   17e24:	add	r0, r0, r6, lsl #3
   17e28:	mov	r1, #0
   17e2c:	add	r5, sp, #4
   17e30:	mov	sl, r4
   17e34:	mov	r2, #0
   17e38:	str	r1, [sp, #20]
   17e3c:	str	r1, [sp, #16]
   17e40:	str	r6, [sp, #12]
   17e44:	mov	r1, r4
   17e48:	str	r0, [sp, #8]
   17e4c:	add	r0, r5, #20
   17e50:	vld1.32	{d16-d17}, [r7]
   17e54:	vst1.32	{d16-d17}, [r0]
   17e58:	ldr	r0, [sl, #36]!	; 0x24
   17e5c:	str	r0, [sp, #40]	; 0x28
   17e60:	mov	r0, r5
   17e64:	bl	17f90 <__assert_fail@plt+0x69a8>
   17e68:	cmp	r0, #0
   17e6c:	beq	17e94 <__assert_fail@plt+0x68ac>
   17e70:	ldr	r0, [r4]
   17e74:	bl	1744c <__assert_fail@plt+0x5e64>
   17e78:	mov	r0, #36	; 0x24
   17e7c:	vld1.32	{d16-d17}, [r5], r0
   17e80:	vst1.32	{d16-d17}, [r4], r0
   17e84:	ldr	r0, [r5]
   17e88:	mov	r5, #1
   17e8c:	str	r0, [r4]
   17e90:	b	17f7c <__assert_fail@plt+0x6994>
   17e94:	ldr	r0, [sp, #40]	; 0x28
   17e98:	str	r0, [sl]
   17e9c:	ldr	r0, [sp, #8]
   17ea0:	ldr	r8, [sp, #4]
   17ea4:	cmp	r8, r0
   17ea8:	str	r0, [sp]
   17eac:	bcs	17f58 <__assert_fail@plt+0x6970>
   17eb0:	mov	r9, #0
   17eb4:	b	17ecc <__assert_fail@plt+0x68e4>
   17eb8:	str	r9, [r8, #4]
   17ebc:	ldr	r0, [sp]
   17ec0:	add	r8, r8, #8
   17ec4:	cmp	r8, r0
   17ec8:	bcs	17f58 <__assert_fail@plt+0x6970>
   17ecc:	ldr	r0, [r8]
   17ed0:	cmp	r0, #0
   17ed4:	beq	17ebc <__assert_fail@plt+0x68d4>
   17ed8:	ldr	r6, [r8, #4]
   17edc:	cmp	r6, #0
   17ee0:	beq	17eb8 <__assert_fail@plt+0x68d0>
   17ee4:	ldr	r1, [r4, #8]
   17ee8:	b	17f0c <__assert_fail@plt+0x6924>
   17eec:	add	r0, r3, r0, lsl #3
   17ef0:	add	r0, r0, #4
   17ef4:	ldr	r3, [r0]
   17ef8:	cmp	r2, #0
   17efc:	str	r3, [r6, #4]
   17f00:	str	r6, [r0]
   17f04:	mov	r6, r2
   17f08:	beq	17eb8 <__assert_fail@plt+0x68d0>
   17f0c:	ldr	r5, [r6]
   17f10:	ldr	r2, [r4, #24]
   17f14:	mov	r0, r5
   17f18:	blx	r2
   17f1c:	ldr	r1, [r4, #8]
   17f20:	cmp	r0, r1
   17f24:	bcs	17f88 <__assert_fail@plt+0x69a0>
   17f28:	ldr	r3, [r4]
   17f2c:	ldr	r2, [r6, #4]
   17f30:	ldr	r7, [r3, r0, lsl #3]
   17f34:	cmp	r7, #0
   17f38:	bne	17eec <__assert_fail@plt+0x6904>
   17f3c:	str	r5, [r3, r0, lsl #3]
   17f40:	ldr	r0, [r4, #12]
   17f44:	add	r0, r0, #1
   17f48:	str	r0, [r4, #12]
   17f4c:	mov	r0, sl
   17f50:	str	r9, [r6]
   17f54:	b	17ef4 <__assert_fail@plt+0x690c>
   17f58:	add	r1, sp, #4
   17f5c:	mov	r0, r4
   17f60:	mov	r2, #0
   17f64:	mov	r5, #0
   17f68:	bl	17f90 <__assert_fail@plt+0x69a8>
   17f6c:	cmp	r0, #0
   17f70:	beq	17f88 <__assert_fail@plt+0x69a0>
   17f74:	ldr	r0, [sp, #4]
   17f78:	bl	1744c <__assert_fail@plt+0x5e64>
   17f7c:	mov	r0, r5
   17f80:	sub	sp, fp, #28
   17f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f88:	bl	115c4 <abort@plt>
   17f8c:	svcmi	0x00800000
   17f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f94:	add	fp, sp, #28
   17f98:	sub	sp, sp, #12
   17f9c:	ldr	sl, [r1]
   17fa0:	str	r1, [sp, #8]
   17fa4:	ldr	r1, [r1, #4]
   17fa8:	mov	r7, r0
   17fac:	mov	r0, #1
   17fb0:	str	r2, [sp, #4]
   17fb4:	cmp	sl, r1
   17fb8:	bcs	18114 <__assert_fail@plt+0x6b2c>
   17fbc:	add	r8, r7, #36	; 0x24
   17fc0:	mov	r9, #0
   17fc4:	b	18000 <__assert_fail@plt+0x6a18>
   17fc8:	str	r4, [r6, r5, lsl #3]
   17fcc:	ldr	r0, [r7, #12]
   17fd0:	add	r0, r0, #1
   17fd4:	str	r0, [r7, #12]
   17fd8:	ldr	r1, [sp, #8]
   17fdc:	str	r9, [sl]
   17fe0:	ldr	r0, [r1, #12]
   17fe4:	sub	r0, r0, #1
   17fe8:	str	r0, [r1, #12]
   17fec:	ldr	r0, [sp, #8]
   17ff0:	add	sl, sl, #8
   17ff4:	ldr	r0, [r0, #4]
   17ff8:	cmp	sl, r0
   17ffc:	bcs	18110 <__assert_fail@plt+0x6b28>
   18000:	ldr	r4, [sl]
   18004:	cmp	r4, #0
   18008:	beq	17fec <__assert_fail@plt+0x6a04>
   1800c:	ldr	r5, [sl, #4]
   18010:	cmp	r5, #0
   18014:	beq	18090 <__assert_fail@plt+0x6aa8>
   18018:	ldr	r1, [r7, #8]
   1801c:	b	18050 <__assert_fail@plt+0x6a68>
   18020:	str	r4, [r3, r0, lsl #3]
   18024:	ldr	r0, [r7, #12]
   18028:	add	r0, r0, #1
   1802c:	str	r0, [r7, #12]
   18030:	mov	r0, r8
   18034:	str	r9, [r5]
   18038:	ldr	r3, [r0]
   1803c:	cmp	r2, #0
   18040:	str	r3, [r5, #4]
   18044:	str	r5, [r0]
   18048:	mov	r5, r2
   1804c:	beq	1808c <__assert_fail@plt+0x6aa4>
   18050:	ldr	r4, [r5]
   18054:	ldr	r2, [r7, #24]
   18058:	mov	r0, r4
   1805c:	blx	r2
   18060:	ldr	r1, [r7, #8]
   18064:	cmp	r0, r1
   18068:	bcs	18128 <__assert_fail@plt+0x6b40>
   1806c:	ldr	r3, [r7]
   18070:	ldr	r2, [r5, #4]
   18074:	ldr	r6, [r3, r0, lsl #3]
   18078:	cmp	r6, #0
   1807c:	beq	18020 <__assert_fail@plt+0x6a38>
   18080:	add	r0, r3, r0, lsl #3
   18084:	add	r0, r0, #4
   18088:	b	18038 <__assert_fail@plt+0x6a50>
   1808c:	ldr	r4, [sl]
   18090:	ldr	r0, [sp, #4]
   18094:	str	r9, [sl, #4]
   18098:	cmp	r0, #0
   1809c:	bne	17fec <__assert_fail@plt+0x6a04>
   180a0:	ldr	r1, [r7, #8]
   180a4:	ldr	r2, [r7, #24]
   180a8:	mov	r0, r4
   180ac:	blx	r2
   180b0:	mov	r5, r0
   180b4:	ldr	r0, [r7, #8]
   180b8:	cmp	r5, r0
   180bc:	bcs	18128 <__assert_fail@plt+0x6b40>
   180c0:	ldr	r6, [r7]
   180c4:	ldr	r0, [r6, r5, lsl #3]
   180c8:	cmp	r0, #0
   180cc:	beq	17fc8 <__assert_fail@plt+0x69e0>
   180d0:	ldr	r0, [r8]
   180d4:	cmp	r0, #0
   180d8:	beq	180e8 <__assert_fail@plt+0x6b00>
   180dc:	ldr	r1, [r0, #4]
   180e0:	str	r1, [r8]
   180e4:	b	180f8 <__assert_fail@plt+0x6b10>
   180e8:	mov	r0, #8
   180ec:	bl	1c244 <__assert_fail@plt+0xac5c>
   180f0:	cmp	r0, #0
   180f4:	beq	1811c <__assert_fail@plt+0x6b34>
   180f8:	add	r1, r6, r5, lsl #3
   180fc:	str	r4, [r0]
   18100:	ldr	r2, [r1, #4]
   18104:	str	r2, [r0, #4]
   18108:	str	r0, [r1, #4]
   1810c:	b	17fd8 <__assert_fail@plt+0x69f0>
   18110:	mov	r0, #1
   18114:	sub	sp, fp, #28
   18118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1811c:	mov	r0, #0
   18120:	sub	sp, fp, #28
   18124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18128:	bl	115c4 <abort@plt>
   1812c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18130:	add	fp, sp, #28
   18134:	sub	sp, sp, #4
   18138:	cmp	r1, #0
   1813c:	beq	18458 <__assert_fail@plt+0x6e70>
   18140:	mov	r8, r2
   18144:	mov	sl, r1
   18148:	ldr	r1, [r0, #8]
   1814c:	ldr	r2, [r0, #24]
   18150:	mov	r4, r0
   18154:	mov	r0, sl
   18158:	blx	r2
   1815c:	mov	r7, r0
   18160:	ldr	r0, [r4, #8]
   18164:	cmp	r7, r0
   18168:	bcs	18458 <__assert_fail@plt+0x6e70>
   1816c:	ldr	r5, [r4]
   18170:	mov	r9, r5
   18174:	ldr	r1, [r9, r7, lsl #3]!
   18178:	cmp	r1, #0
   1817c:	beq	18208 <__assert_fail@plt+0x6c20>
   18180:	cmp	r1, sl
   18184:	beq	181b0 <__assert_fail@plt+0x6bc8>
   18188:	ldr	r2, [r4, #28]
   1818c:	mov	r0, sl
   18190:	blx	r2
   18194:	cmp	r0, #0
   18198:	mov	r6, r9
   1819c:	beq	181c4 <__assert_fail@plt+0x6bdc>
   181a0:	ldr	r0, [r6]
   181a4:	cmp	r0, #0
   181a8:	bne	181b4 <__assert_fail@plt+0x6bcc>
   181ac:	b	18208 <__assert_fail@plt+0x6c20>
   181b0:	mov	r0, sl
   181b4:	cmp	r8, #0
   181b8:	mov	r7, #0
   181bc:	strne	r0, [r8]
   181c0:	b	183f4 <__assert_fail@plt+0x6e0c>
   181c4:	add	r6, r5, r7, lsl #3
   181c8:	ldr	r0, [r6, #4]!
   181cc:	cmp	r0, #0
   181d0:	beq	18208 <__assert_fail@plt+0x6c20>
   181d4:	ldr	r1, [r0]
   181d8:	cmp	r1, sl
   181dc:	beq	181fc <__assert_fail@plt+0x6c14>
   181e0:	ldr	r2, [r4, #28]
   181e4:	mov	r0, sl
   181e8:	blx	r2
   181ec:	ldr	r6, [r6]
   181f0:	cmp	r0, #0
   181f4:	beq	181c8 <__assert_fail@plt+0x6be0>
   181f8:	b	181a0 <__assert_fail@plt+0x6bb8>
   181fc:	mov	r0, sl
   18200:	cmp	r0, #0
   18204:	bne	181b4 <__assert_fail@plt+0x6bcc>
   18208:	vldr	s0, [r4, #8]
   1820c:	vldr	s2, [r4, #12]
   18210:	ldr	r0, [r4, #20]
   18214:	vcvt.f32.u32	s0, s0
   18218:	vcvt.f32.u32	s4, s2
   1821c:	vldr	s2, [r0, #8]
   18220:	vmul.f32	s6, s2, s0
   18224:	vcmpe.f32	s6, s4
   18228:	vmrs	APSR_nzcv, fpscr
   1822c:	bpl	18380 <__assert_fail@plt+0x6d98>
   18230:	movw	r1, #57376	; 0xe020
   18234:	movt	r1, #1
   18238:	cmp	r0, r1
   1823c:	beq	182c8 <__assert_fail@plt+0x6ce0>
   18240:	vldr	s6, [pc, #532]	; 1845c <__assert_fail@plt+0x6e74>
   18244:	vcmpe.f32	s2, s6
   18248:	vmrs	APSR_nzcv, fpscr
   1824c:	ble	182b4 <__assert_fail@plt+0x6ccc>
   18250:	vldr	s8, [pc, #520]	; 18460 <__assert_fail@plt+0x6e78>
   18254:	vcmpe.f32	s2, s8
   18258:	vmrs	APSR_nzcv, fpscr
   1825c:	bpl	182b4 <__assert_fail@plt+0x6ccc>
   18260:	vldr	s8, [pc, #508]	; 18464 <__assert_fail@plt+0x6e7c>
   18264:	vldr	s10, [r0, #12]
   18268:	vcmpe.f32	s10, s8
   1826c:	vmrs	APSR_nzcv, fpscr
   18270:	ble	182b4 <__assert_fail@plt+0x6ccc>
   18274:	vldr	s8, [r0]
   18278:	vcmpe.f32	s8, #0.0
   1827c:	vmrs	APSR_nzcv, fpscr
   18280:	blt	182b4 <__assert_fail@plt+0x6ccc>
   18284:	vadd.f32	s6, s8, s6
   18288:	vcmpe.f32	s6, s2
   1828c:	vmrs	APSR_nzcv, fpscr
   18290:	bpl	182b4 <__assert_fail@plt+0x6ccc>
   18294:	vldr	s8, [r0, #4]
   18298:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1829c:	vcmpe.f32	s8, s10
   182a0:	vmrs	APSR_nzcv, fpscr
   182a4:	bhi	182b4 <__assert_fail@plt+0x6ccc>
   182a8:	vcmpe.f32	s6, s8
   182ac:	vmrs	APSR_nzcv, fpscr
   182b0:	bmi	182cc <__assert_fail@plt+0x6ce4>
   182b4:	vldr	s2, [pc, #428]	; 18468 <__assert_fail@plt+0x6e80>
   182b8:	movw	r0, #57376	; 0xe020
   182bc:	movt	r0, #1
   182c0:	str	r0, [r4, #20]
   182c4:	b	182cc <__assert_fail@plt+0x6ce4>
   182c8:	mov	r0, r1
   182cc:	vmul.f32	s6, s2, s0
   182d0:	vcmpe.f32	s6, s4
   182d4:	vmrs	APSR_nzcv, fpscr
   182d8:	bpl	18380 <__assert_fail@plt+0x6d98>
   182dc:	vldr	s4, [r0, #12]
   182e0:	ldrb	r0, [r0, #16]
   182e4:	mvn	r7, #0
   182e8:	cmp	r0, #0
   182ec:	vmul.f32	s0, s4, s0
   182f0:	vldr	s4, [pc, #372]	; 1846c <__assert_fail@plt+0x6e84>
   182f4:	vmul.f32	s2, s2, s0
   182f8:	vseleq.f32	s0, s2, s0
   182fc:	vcmpe.f32	s0, s4
   18300:	vmrs	APSR_nzcv, fpscr
   18304:	bge	183f4 <__assert_fail@plt+0x6e0c>
   18308:	vcvt.u32.f32	s0, s0
   1830c:	mov	r0, r4
   18310:	vmov	r1, s0
   18314:	bl	17d24 <__assert_fail@plt+0x673c>
   18318:	cmp	r0, #0
   1831c:	beq	183f4 <__assert_fail@plt+0x6e0c>
   18320:	ldr	r1, [r4, #8]
   18324:	ldr	r2, [r4, #24]
   18328:	mov	r0, sl
   1832c:	blx	r2
   18330:	mov	r7, r0
   18334:	ldr	r0, [r4, #8]
   18338:	cmp	r7, r0
   1833c:	bcs	18458 <__assert_fail@plt+0x6e70>
   18340:	ldr	r5, [r4]
   18344:	mov	r9, r5
   18348:	ldr	r1, [r9, r7, lsl #3]!
   1834c:	cmp	r1, #0
   18350:	beq	18380 <__assert_fail@plt+0x6d98>
   18354:	cmp	r1, sl
   18358:	mov	r0, sl
   1835c:	beq	18378 <__assert_fail@plt+0x6d90>
   18360:	ldr	r2, [r4, #28]
   18364:	mov	r0, sl
   18368:	blx	r2
   1836c:	cmp	r0, #0
   18370:	beq	18408 <__assert_fail@plt+0x6e20>
   18374:	ldr	r0, [r9]
   18378:	cmp	r0, #0
   1837c:	bne	18458 <__assert_fail@plt+0x6e70>
   18380:	ldr	r0, [r9]
   18384:	cmp	r0, #0
   18388:	beq	183a4 <__assert_fail@plt+0x6dbc>
   1838c:	ldr	r0, [r4, #36]	; 0x24
   18390:	cmp	r0, #0
   18394:	beq	183c4 <__assert_fail@plt+0x6ddc>
   18398:	ldr	r1, [r0, #4]
   1839c:	str	r1, [r4, #36]	; 0x24
   183a0:	b	183d4 <__assert_fail@plt+0x6dec>
   183a4:	str	sl, [r9]
   183a8:	ldr	r0, [r4, #12]
   183ac:	ldr	r1, [r4, #16]
   183b0:	add	r0, r0, #1
   183b4:	add	r1, r1, #1
   183b8:	str	r0, [r4, #12]
   183bc:	str	r1, [r4, #16]
   183c0:	b	183f0 <__assert_fail@plt+0x6e08>
   183c4:	mov	r0, #8
   183c8:	bl	1c244 <__assert_fail@plt+0xac5c>
   183cc:	cmp	r0, #0
   183d0:	beq	18400 <__assert_fail@plt+0x6e18>
   183d4:	str	sl, [r0]
   183d8:	ldr	r1, [r9, #4]
   183dc:	str	r1, [r0, #4]
   183e0:	str	r0, [r9, #4]
   183e4:	ldr	r0, [r4, #16]
   183e8:	add	r0, r0, #1
   183ec:	str	r0, [r4, #16]
   183f0:	mov	r7, #1
   183f4:	mov	r0, r7
   183f8:	sub	sp, fp, #28
   183fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18400:	mvn	r7, #0
   18404:	b	183f4 <__assert_fail@plt+0x6e0c>
   18408:	add	r6, r5, r7, lsl #3
   1840c:	ldr	r0, [r6, #4]!
   18410:	cmp	r0, #0
   18414:	beq	18380 <__assert_fail@plt+0x6d98>
   18418:	ldr	r1, [r0]
   1841c:	cmp	r1, sl
   18420:	beq	1844c <__assert_fail@plt+0x6e64>
   18424:	ldr	r2, [r4, #28]
   18428:	mov	r0, sl
   1842c:	blx	r2
   18430:	ldr	r6, [r6]
   18434:	cmp	r0, #0
   18438:	beq	1840c <__assert_fail@plt+0x6e24>
   1843c:	ldr	r0, [r6]
   18440:	cmp	r0, #0
   18444:	beq	18380 <__assert_fail@plt+0x6d98>
   18448:	b	18458 <__assert_fail@plt+0x6e70>
   1844c:	mov	r0, sl
   18450:	cmp	r0, #0
   18454:	beq	18380 <__assert_fail@plt+0x6d98>
   18458:	bl	115c4 <abort@plt>
   1845c:	stclcc	12, cr12, [ip, #820]	; 0x334
   18460:	svccc	0x00666666
   18464:	svccc	0x008ccccd
   18468:	svccc	0x004ccccd
   1846c:	svcmi	0x00800000
   18470:	push	{r4, sl, fp, lr}
   18474:	add	fp, sp, #8
   18478:	sub	sp, sp, #8
   1847c:	add	r2, sp, #4
   18480:	mov	r4, r1
   18484:	bl	1812c <__assert_fail@plt+0x6b44>
   18488:	cmn	r0, #1
   1848c:	beq	184a0 <__assert_fail@plt+0x6eb8>
   18490:	ldr	r1, [sp, #4]
   18494:	cmp	r0, #0
   18498:	moveq	r4, r1
   1849c:	b	184a4 <__assert_fail@plt+0x6ebc>
   184a0:	mov	r4, #0
   184a4:	mov	r0, r4
   184a8:	sub	sp, fp, #8
   184ac:	pop	{r4, sl, fp, pc}
   184b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   184b4:	add	fp, sp, #24
   184b8:	mov	r9, r1
   184bc:	ldr	r1, [r0, #8]
   184c0:	ldr	r2, [r0, #24]
   184c4:	mov	r5, r0
   184c8:	mov	r0, r9
   184cc:	blx	r2
   184d0:	mov	r7, r0
   184d4:	ldr	r0, [r5, #8]
   184d8:	cmp	r7, r0
   184dc:	bcs	18740 <__assert_fail@plt+0x7158>
   184e0:	ldr	r6, [r5]
   184e4:	mov	r8, #0
   184e8:	mov	r4, r6
   184ec:	ldr	r1, [r4, r7, lsl #3]!
   184f0:	cmp	r1, #0
   184f4:	beq	185a8 <__assert_fail@plt+0x6fc0>
   184f8:	cmp	r1, r9
   184fc:	beq	18518 <__assert_fail@plt+0x6f30>
   18500:	ldr	r2, [r5, #28]
   18504:	mov	r0, r9
   18508:	blx	r2
   1850c:	cmp	r0, #0
   18510:	beq	18550 <__assert_fail@plt+0x6f68>
   18514:	ldr	r9, [r4]
   18518:	add	r0, r6, r7, lsl #3
   1851c:	ldr	r0, [r0, #4]
   18520:	cmp	r0, #0
   18524:	beq	18598 <__assert_fail@plt+0x6fb0>
   18528:	ldm	r0, {r1, r2}
   1852c:	stm	r4, {r1, r2}
   18530:	mov	r1, #0
   18534:	str	r1, [r0]
   18538:	ldr	r1, [r5, #36]	; 0x24
   1853c:	str	r1, [r0, #4]
   18540:	str	r0, [r5, #36]	; 0x24
   18544:	cmp	r9, #0
   18548:	bne	185e0 <__assert_fail@plt+0x6ff8>
   1854c:	b	185a8 <__assert_fail@plt+0x6fc0>
   18550:	add	r7, r6, r7, lsl #3
   18554:	ldr	r0, [r7, #4]!
   18558:	cmp	r0, #0
   1855c:	beq	185a8 <__assert_fail@plt+0x6fc0>
   18560:	ldr	r1, [r0]
   18564:	cmp	r1, r9
   18568:	beq	185b0 <__assert_fail@plt+0x6fc8>
   1856c:	ldr	r2, [r5, #28]
   18570:	mov	r0, r9
   18574:	blx	r2
   18578:	ldr	r1, [r7]
   1857c:	cmp	r0, #0
   18580:	bne	185b8 <__assert_fail@plt+0x6fd0>
   18584:	ldr	r0, [r1, #4]!
   18588:	mov	r7, r1
   1858c:	cmp	r0, #0
   18590:	bne	18560 <__assert_fail@plt+0x6f78>
   18594:	b	185a8 <__assert_fail@plt+0x6fc0>
   18598:	mov	r0, #0
   1859c:	str	r0, [r4]
   185a0:	cmp	r9, #0
   185a4:	bne	185e0 <__assert_fail@plt+0x6ff8>
   185a8:	mov	r0, r8
   185ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   185b0:	mov	r1, r0
   185b4:	b	185bc <__assert_fail@plt+0x6fd4>
   185b8:	ldr	r9, [r1]
   185bc:	ldr	r0, [r1, #4]
   185c0:	str	r0, [r7]
   185c4:	mov	r0, #0
   185c8:	str	r0, [r1]
   185cc:	ldr	r0, [r5, #36]	; 0x24
   185d0:	str	r0, [r1, #4]
   185d4:	str	r1, [r5, #36]	; 0x24
   185d8:	cmp	r9, #0
   185dc:	beq	185a8 <__assert_fail@plt+0x6fc0>
   185e0:	ldr	r0, [r5, #16]
   185e4:	sub	r0, r0, #1
   185e8:	str	r0, [r5, #16]
   185ec:	ldr	r0, [r4]
   185f0:	cmp	r0, #0
   185f4:	bne	18734 <__assert_fail@plt+0x714c>
   185f8:	ldr	r0, [r5, #12]
   185fc:	vldr	s0, [r5, #8]
   18600:	sub	r1, r0, #1
   18604:	str	r1, [r5, #12]
   18608:	vmov	s2, r1
   1860c:	ldr	r0, [r5, #20]
   18610:	vcvt.f32.u32	s0, s0
   18614:	vcvt.f32.u32	s2, s2
   18618:	vldr	s4, [r0]
   1861c:	vmul.f32	s6, s4, s0
   18620:	vcmpe.f32	s6, s2
   18624:	vmrs	APSR_nzcv, fpscr
   18628:	ble	18734 <__assert_fail@plt+0x714c>
   1862c:	movw	r1, #57376	; 0xe020
   18630:	movt	r1, #1
   18634:	cmp	r0, r1
   18638:	beq	186c4 <__assert_fail@plt+0x70dc>
   1863c:	vldr	s8, [pc, #256]	; 18744 <__assert_fail@plt+0x715c>
   18640:	vldr	s6, [r0, #8]
   18644:	vcmpe.f32	s6, s8
   18648:	vmrs	APSR_nzcv, fpscr
   1864c:	ble	186b0 <__assert_fail@plt+0x70c8>
   18650:	vldr	s10, [pc, #240]	; 18748 <__assert_fail@plt+0x7160>
   18654:	vcmpe.f32	s6, s10
   18658:	vmrs	APSR_nzcv, fpscr
   1865c:	bpl	186b0 <__assert_fail@plt+0x70c8>
   18660:	vcmpe.f32	s4, #0.0
   18664:	vmrs	APSR_nzcv, fpscr
   18668:	blt	186b0 <__assert_fail@plt+0x70c8>
   1866c:	vldr	s10, [r0, #12]
   18670:	vldr	s12, [pc, #212]	; 1874c <__assert_fail@plt+0x7164>
   18674:	vcmpe.f32	s10, s12
   18678:	vmrs	APSR_nzcv, fpscr
   1867c:	ble	186b0 <__assert_fail@plt+0x70c8>
   18680:	vadd.f32	s8, s4, s8
   18684:	vcmpe.f32	s8, s6
   18688:	vmrs	APSR_nzcv, fpscr
   1868c:	bpl	186b0 <__assert_fail@plt+0x70c8>
   18690:	vldr	s6, [r0, #4]
   18694:	vmov.f32	s10, #112	; 0x3f800000  1.0
   18698:	vcmpe.f32	s6, s10
   1869c:	vmrs	APSR_nzcv, fpscr
   186a0:	bhi	186b0 <__assert_fail@plt+0x70c8>
   186a4:	vcmpe.f32	s8, s6
   186a8:	vmrs	APSR_nzcv, fpscr
   186ac:	bmi	186c8 <__assert_fail@plt+0x70e0>
   186b0:	vldr	s4, [pc, #152]	; 18750 <__assert_fail@plt+0x7168>
   186b4:	movw	r0, #57376	; 0xe020
   186b8:	movt	r0, #1
   186bc:	str	r0, [r5, #20]
   186c0:	b	186c8 <__assert_fail@plt+0x70e0>
   186c4:	mov	r0, r1
   186c8:	vmul.f32	s4, s4, s0
   186cc:	vcmpe.f32	s4, s2
   186d0:	vmrs	APSR_nzcv, fpscr
   186d4:	ble	18734 <__assert_fail@plt+0x714c>
   186d8:	vldr	s2, [r0, #4]
   186dc:	ldrb	r1, [r0, #16]
   186e0:	cmp	r1, #0
   186e4:	vmul.f32	s0, s2, s0
   186e8:	bne	186f4 <__assert_fail@plt+0x710c>
   186ec:	vldr	s2, [r0, #8]
   186f0:	vmul.f32	s0, s0, s2
   186f4:	vcvt.u32.f32	s0, s0
   186f8:	mov	r0, r5
   186fc:	vmov	r1, s0
   18700:	bl	17d24 <__assert_fail@plt+0x673c>
   18704:	cmp	r0, #0
   18708:	bne	18734 <__assert_fail@plt+0x714c>
   1870c:	ldr	r0, [r5, #36]	; 0x24
   18710:	cmp	r0, #0
   18714:	beq	1872c <__assert_fail@plt+0x7144>
   18718:	ldr	r4, [r0, #4]
   1871c:	bl	1744c <__assert_fail@plt+0x5e64>
   18720:	cmp	r4, #0
   18724:	mov	r0, r4
   18728:	bne	18718 <__assert_fail@plt+0x7130>
   1872c:	mov	r0, #0
   18730:	str	r0, [r5, #36]	; 0x24
   18734:	mov	r8, r9
   18738:	mov	r0, r8
   1873c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18740:	bl	115c4 <abort@plt>
   18744:	stclcc	12, cr12, [ip, #820]	; 0x334
   18748:	svccc	0x00666666
   1874c:	svccc	0x008ccccd
   18750:	andeq	r0, r0, r0
   18754:	b	184b0 <__assert_fail@plt+0x6ec8>
   18758:	push	{r4, r5, r6, sl, fp, lr}
   1875c:	add	fp, sp, #16
   18760:	mov	r5, r0
   18764:	mov	r0, #0
   18768:	mov	r4, r1
   1876c:	add	r6, r2, #19
   18770:	cmp	r1, #0
   18774:	strb	r0, [r2, #20]
   18778:	bmi	187c8 <__assert_fail@plt+0x71e0>
   1877c:	mov	r0, r5
   18780:	mov	r1, r4
   18784:	mov	r2, #10
   18788:	mov	r3, #0
   1878c:	bl	1c810 <__assert_fail@plt+0xb228>
   18790:	add	r2, r0, r0, lsl #2
   18794:	sub	r2, r5, r2, lsl #1
   18798:	add	r2, r2, #48	; 0x30
   1879c:	strb	r2, [r6], #-1
   187a0:	adds	r2, r5, #9
   187a4:	mov	r5, r0
   187a8:	adc	r3, r4, #0
   187ac:	rsbs	r2, r2, #18
   187b0:	mov	r4, r1
   187b4:	rscs	r2, r3, #0
   187b8:	bcc	1877c <__assert_fail@plt+0x7194>
   187bc:	add	r6, r6, #1
   187c0:	mov	r0, r6
   187c4:	pop	{r4, r5, r6, sl, fp, pc}
   187c8:	mov	r0, r5
   187cc:	mov	r1, r4
   187d0:	mov	r2, #10
   187d4:	mov	r3, #0
   187d8:	bl	1c810 <__assert_fail@plt+0xb228>
   187dc:	add	r2, r0, r0, lsl #2
   187e0:	rsb	r2, r5, r2, lsl #1
   187e4:	add	r2, r2, #48	; 0x30
   187e8:	strb	r2, [r6], #-1
   187ec:	adds	r2, r5, #9
   187f0:	mov	r5, r0
   187f4:	adc	r3, r4, #0
   187f8:	rsbs	r2, r2, #18
   187fc:	mov	r4, r1
   18800:	rscs	r2, r3, #0
   18804:	bcc	187c8 <__assert_fail@plt+0x71e0>
   18808:	mov	r0, #45	; 0x2d
   1880c:	strb	r0, [r6]
   18810:	mov	r0, r6
   18814:	pop	{r4, r5, r6, sl, fp, pc}
   18818:	push	{r4, sl, fp, lr}
   1881c:	add	fp, sp, #8
   18820:	sub	sp, sp, #8
   18824:	movw	r0, #57396	; 0xe034
   18828:	movt	r0, #1
   1882c:	bl	113fc <getenv@plt>
   18830:	movw	r4, #4201	; 0x1069
   18834:	cmp	r0, #0
   18838:	movt	r4, #3
   1883c:	beq	18868 <__assert_fail@plt+0x7280>
   18840:	ldrb	r1, [r0]
   18844:	cmp	r1, #0
   18848:	beq	18868 <__assert_fail@plt+0x7280>
   1884c:	add	r1, sp, #4
   18850:	mov	r2, #10
   18854:	bl	112c4 <strtol@plt>
   18858:	ldr	r1, [sp, #4]
   1885c:	ldrb	r1, [r1]
   18860:	cmp	r1, #0
   18864:	moveq	r4, r0
   18868:	mov	r0, r4
   1886c:	sub	sp, fp, #8
   18870:	pop	{r4, sl, fp, pc}
   18874:	push	{r4, r5, fp, lr}
   18878:	add	fp, sp, #8
   1887c:	cmp	r0, #0
   18880:	beq	18914 <__assert_fail@plt+0x732c>
   18884:	mov	r1, #47	; 0x2f
   18888:	mov	r4, r0
   1888c:	bl	11558 <strrchr@plt>
   18890:	cmp	r0, #0
   18894:	mov	r5, r4
   18898:	addne	r5, r0, #1
   1889c:	sub	r0, r5, r4
   188a0:	cmp	r0, #7
   188a4:	blt	188f8 <__assert_fail@plt+0x7310>
   188a8:	movw	r1, #57468	; 0xe07c
   188ac:	sub	r0, r5, #7
   188b0:	mov	r2, #7
   188b4:	movt	r1, #1
   188b8:	bl	115b8 <strncmp@plt>
   188bc:	cmp	r0, #0
   188c0:	bne	188f8 <__assert_fail@plt+0x7310>
   188c4:	movw	r1, #57476	; 0xe084
   188c8:	mov	r0, r5
   188cc:	mov	r2, #3
   188d0:	movt	r1, #1
   188d4:	bl	115b8 <strncmp@plt>
   188d8:	cmp	r0, #0
   188dc:	beq	188e8 <__assert_fail@plt+0x7300>
   188e0:	mov	r4, r5
   188e4:	b	188f8 <__assert_fail@plt+0x7310>
   188e8:	movw	r0, #61856	; 0xf1a0
   188ec:	add	r4, r5, #3
   188f0:	movt	r0, #2
   188f4:	str	r4, [r0]
   188f8:	movw	r0, #61860	; 0xf1a4
   188fc:	movt	r0, #2
   18900:	str	r4, [r0]
   18904:	movw	r0, #61920	; 0xf1e0
   18908:	movt	r0, #2
   1890c:	str	r4, [r0]
   18910:	pop	{r4, r5, fp, pc}
   18914:	movw	r0, #61872	; 0xf1b0
   18918:	mov	r1, #55	; 0x37
   1891c:	mov	r2, #1
   18920:	movt	r0, #2
   18924:	ldr	r3, [r0]
   18928:	movw	r0, #57412	; 0xe044
   1892c:	movt	r0, #1
   18930:	bl	113a8 <fwrite@plt>
   18934:	bl	115c4 <abort@plt>
   18938:	push	{r4, r5, r6, sl, fp, lr}
   1893c:	add	fp, sp, #16
   18940:	mov	r4, r0
   18944:	movw	r0, #61928	; 0xf1e8
   18948:	movt	r0, #2
   1894c:	cmp	r4, #0
   18950:	moveq	r4, r0
   18954:	bl	114b0 <__errno_location@plt>
   18958:	ldr	r6, [r0]
   1895c:	mov	r5, r0
   18960:	mov	r0, r4
   18964:	mov	r1, #48	; 0x30
   18968:	bl	1b1d8 <__assert_fail@plt+0x9bf0>
   1896c:	str	r6, [r5]
   18970:	pop	{r4, r5, r6, sl, fp, pc}
   18974:	movw	r1, #61928	; 0xf1e8
   18978:	cmp	r0, #0
   1897c:	movt	r1, #2
   18980:	movne	r1, r0
   18984:	ldr	r0, [r1]
   18988:	bx	lr
   1898c:	movw	r2, #61928	; 0xf1e8
   18990:	cmp	r0, #0
   18994:	movt	r2, #2
   18998:	movne	r2, r0
   1899c:	str	r1, [r2]
   189a0:	bx	lr
   189a4:	movw	r3, #61928	; 0xf1e8
   189a8:	cmp	r0, #0
   189ac:	and	r2, r2, #1
   189b0:	movt	r3, #2
   189b4:	movne	r3, r0
   189b8:	ubfx	r0, r1, #5, #3
   189bc:	and	r1, r1, #31
   189c0:	add	ip, r3, r0, lsl #2
   189c4:	mov	r0, #1
   189c8:	ldr	r3, [ip, #8]
   189cc:	and	r0, r0, r3, lsr r1
   189d0:	eor	r2, r0, r2
   189d4:	eor	r1, r3, r2, lsl r1
   189d8:	str	r1, [ip, #8]
   189dc:	bx	lr
   189e0:	movw	r2, #61928	; 0xf1e8
   189e4:	cmp	r0, #0
   189e8:	movt	r2, #2
   189ec:	movne	r2, r0
   189f0:	ldr	r0, [r2, #4]
   189f4:	str	r1, [r2, #4]
   189f8:	bx	lr
   189fc:	push	{fp, lr}
   18a00:	mov	fp, sp
   18a04:	movw	r3, #61928	; 0xf1e8
   18a08:	cmp	r0, #0
   18a0c:	movt	r3, #2
   18a10:	movne	r3, r0
   18a14:	cmp	r1, #0
   18a18:	mov	r0, #10
   18a1c:	cmpne	r2, #0
   18a20:	str	r0, [r3]
   18a24:	bne	18a2c <__assert_fail@plt+0x7444>
   18a28:	bl	115c4 <abort@plt>
   18a2c:	str	r1, [r3, #40]	; 0x28
   18a30:	str	r2, [r3, #44]	; 0x2c
   18a34:	pop	{fp, pc}
   18a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a3c:	add	fp, sp, #28
   18a40:	sub	sp, sp, #20
   18a44:	mov	r7, r0
   18a48:	ldr	r0, [fp, #8]
   18a4c:	movw	r5, #61928	; 0xf1e8
   18a50:	mov	r8, r3
   18a54:	mov	r9, r2
   18a58:	mov	sl, r1
   18a5c:	movt	r5, #2
   18a60:	cmp	r0, #0
   18a64:	movne	r5, r0
   18a68:	bl	114b0 <__errno_location@plt>
   18a6c:	ldr	r2, [r5, #40]	; 0x28
   18a70:	ldr	r3, [r5, #44]	; 0x2c
   18a74:	mov	r4, r0
   18a78:	ldm	r5, {r0, r1}
   18a7c:	add	r5, r5, #8
   18a80:	ldr	r6, [r4]
   18a84:	stm	sp, {r0, r1, r5}
   18a88:	mov	r0, r7
   18a8c:	mov	r1, sl
   18a90:	str	r2, [sp, #12]
   18a94:	str	r3, [sp, #16]
   18a98:	mov	r2, r9
   18a9c:	mov	r3, r8
   18aa0:	bl	18ab0 <__assert_fail@plt+0x74c8>
   18aa4:	str	r6, [r4]
   18aa8:	sub	sp, fp, #28
   18aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ab4:	add	fp, sp, #28
   18ab8:	sub	sp, sp, #156	; 0x9c
   18abc:	mov	r5, r0
   18ac0:	add	r0, r2, #1
   18ac4:	mov	r6, r1
   18ac8:	mov	sl, r3
   18acc:	str	r2, [fp, #-80]	; 0xffffffb0
   18ad0:	str	r0, [sp, #72]	; 0x48
   18ad4:	ldr	r0, [fp, #12]
   18ad8:	and	r1, r0, #1
   18adc:	str	r1, [sp, #36]	; 0x24
   18ae0:	and	r1, r0, #4
   18ae4:	str	r1, [sp, #32]
   18ae8:	ubfx	r9, r0, #1, #1
   18aec:	bl	113c0 <__ctype_get_mb_cur_max@plt>
   18af0:	str	r0, [sp, #40]	; 0x28
   18af4:	ldr	r0, [fp, #24]
   18af8:	ldr	r7, [fp, #8]
   18afc:	mov	r1, #0
   18b00:	str	r5, [fp, #-84]	; 0xffffffac
   18b04:	str	r1, [fp, #-56]	; 0xffffffc8
   18b08:	mov	r1, #0
   18b0c:	str	r1, [sp, #60]	; 0x3c
   18b10:	mov	r1, #1
   18b14:	str	r1, [fp, #-48]	; 0xffffffd0
   18b18:	str	r0, [sp, #80]	; 0x50
   18b1c:	ldr	r0, [fp, #20]
   18b20:	str	r0, [sp, #76]	; 0x4c
   18b24:	mov	r0, #0
   18b28:	str	r0, [sp, #56]	; 0x38
   18b2c:	mov	r0, #0
   18b30:	str	r0, [fp, #-88]	; 0xffffffa8
   18b34:	mov	r0, #0
   18b38:	str	r0, [fp, #-72]	; 0xffffffb8
   18b3c:	mov	r0, #0
   18b40:	cmp	r7, #10
   18b44:	bhi	19ad8 <__assert_fail@plt+0x84f0>
   18b48:	add	r1, pc, #24
   18b4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18b50:	mov	r4, r6
   18b54:	mov	r8, #0
   18b58:	mov	r2, #1
   18b5c:	mov	r3, #0
   18b60:	mov	lr, sl
   18b64:	ldr	pc, [r1, r7, lsl #2]
   18b68:	andeq	r8, r1, ip, lsr #24
   18b6c:	andeq	r8, r1, r0, lsl #25
   18b70:	andeq	r8, r1, r0, asr #24
   18b74:	andeq	r8, r1, r4, lsr #24
   18b78:	andeq	r8, r1, r4, ror ip
   18b7c:	andeq	r8, r1, r8, lsr #25
   18b80:	andeq	r8, r1, r0, asr ip
   18b84:	andeq	r8, r1, ip, lsr #26
   18b88:	muleq	r1, r4, fp
   18b8c:	muleq	r1, r4, fp
   18b90:			; <UNDEFINED> instruction: 0x00018bbc
   18b94:	movw	r0, #57558	; 0xe0d6
   18b98:	mov	r1, r7
   18b9c:	movt	r0, #1
   18ba0:	bl	1a4e0 <__assert_fail@plt+0x8ef8>
   18ba4:	str	r0, [sp, #76]	; 0x4c
   18ba8:	movw	r0, #57560	; 0xe0d8
   18bac:	mov	r1, r7
   18bb0:	movt	r0, #1
   18bb4:	bl	1a4e0 <__assert_fail@plt+0x8ef8>
   18bb8:	str	r0, [sp, #80]	; 0x50
   18bbc:	mov	r8, #0
   18bc0:	tst	r9, #1
   18bc4:	bne	18bfc <__assert_fail@plt+0x7614>
   18bc8:	ldr	r0, [sp, #76]	; 0x4c
   18bcc:	ldrb	r0, [r0]
   18bd0:	cmp	r0, #0
   18bd4:	beq	18bfc <__assert_fail@plt+0x7614>
   18bd8:	ldr	r1, [sp, #76]	; 0x4c
   18bdc:	mov	r8, #0
   18be0:	add	r1, r1, #1
   18be4:	cmp	r8, r4
   18be8:	strbcc	r0, [r5, r8]
   18bec:	ldrb	r0, [r1, r8]
   18bf0:	add	r8, r8, #1
   18bf4:	cmp	r0, #0
   18bf8:	bne	18be4 <__assert_fail@plt+0x75fc>
   18bfc:	ldr	r6, [sp, #80]	; 0x50
   18c00:	mov	r0, r6
   18c04:	bl	11474 <strlen@plt>
   18c08:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18c0c:	str	r0, [fp, #-72]	; 0xffffffb8
   18c10:	str	r6, [fp, #-88]	; 0xffffffa8
   18c14:	mov	r2, #1
   18c18:	mov	r3, r9
   18c1c:	mov	lr, sl
   18c20:	b	18d2c <__assert_fail@plt+0x7744>
   18c24:	mov	r0, #1
   18c28:	b	18c80 <__assert_fail@plt+0x7698>
   18c2c:	mov	r7, #0
   18c30:	mov	r8, #0
   18c34:	mov	r2, r0
   18c38:	mov	r3, #0
   18c3c:	b	18d2c <__assert_fail@plt+0x7744>
   18c40:	tst	r9, #1
   18c44:	bne	18c80 <__assert_fail@plt+0x7698>
   18c48:	mov	r2, r0
   18c4c:	b	18cd8 <__assert_fail@plt+0x76f0>
   18c50:	mov	r0, #1
   18c54:	mov	r8, #0
   18c58:	mov	r7, #5
   18c5c:	mov	r2, #1
   18c60:	str	r0, [fp, #-72]	; 0xffffffb8
   18c64:	movw	r0, #57556	; 0xe0d4
   18c68:	movt	r0, #1
   18c6c:	str	r0, [fp, #-88]	; 0xffffffa8
   18c70:	b	18ca0 <__assert_fail@plt+0x76b8>
   18c74:	mov	r2, #1
   18c78:	tst	r9, #1
   18c7c:	beq	18cd8 <__assert_fail@plt+0x76f0>
   18c80:	mov	r1, #1
   18c84:	mov	r8, #0
   18c88:	mov	r7, #2
   18c8c:	mov	r2, r0
   18c90:	str	r1, [fp, #-72]	; 0xffffffb8
   18c94:	movw	r1, #57560	; 0xe0d8
   18c98:	movt	r1, #1
   18c9c:	str	r1, [fp, #-88]	; 0xffffffa8
   18ca0:	mov	r3, #1
   18ca4:	b	18d2c <__assert_fail@plt+0x7744>
   18ca8:	tst	r9, #1
   18cac:	beq	18cfc <__assert_fail@plt+0x7714>
   18cb0:	mov	r0, #1
   18cb4:	mov	r8, #0
   18cb8:	mov	r2, #1
   18cbc:	mov	r3, #1
   18cc0:	mov	r7, #5
   18cc4:	str	r0, [fp, #-72]	; 0xffffffb8
   18cc8:	movw	r0, #57556	; 0xe0d4
   18ccc:	movt	r0, #1
   18cd0:	str	r0, [fp, #-88]	; 0xffffffa8
   18cd4:	b	18d2c <__assert_fail@plt+0x7744>
   18cd8:	cmp	r4, #0
   18cdc:	mov	r8, #1
   18ce0:	mov	r3, #0
   18ce4:	mov	r7, #2
   18ce8:	movne	r0, #39	; 0x27
   18cec:	strbne	r0, [r5]
   18cf0:	movw	r0, #57560	; 0xe0d8
   18cf4:	movt	r0, #1
   18cf8:	b	18d20 <__assert_fail@plt+0x7738>
   18cfc:	cmp	r4, #0
   18d00:	mov	r8, #1
   18d04:	mov	r2, #1
   18d08:	mov	r7, #5
   18d0c:	mov	r3, #0
   18d10:	movne	r0, #34	; 0x22
   18d14:	strbne	r0, [r5]
   18d18:	movw	r0, #57556	; 0xe0d4
   18d1c:	movt	r0, #1
   18d20:	str	r0, [fp, #-88]	; 0xffffffa8
   18d24:	mov	r0, #1
   18d28:	str	r0, [fp, #-72]	; 0xffffffb8
   18d2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18d30:	eor	r6, r3, #1
   18d34:	str	r7, [fp, #-68]	; 0xffffffbc
   18d38:	str	r3, [fp, #-76]	; 0xffffffb4
   18d3c:	str	r2, [sp, #84]	; 0x54
   18d40:	str	r6, [sp, #92]	; 0x5c
   18d44:	cmp	r0, #0
   18d48:	movwne	r0, #1
   18d4c:	and	r1, r0, r3
   18d50:	and	r1, r2, r1
   18d54:	str	r1, [sp, #48]	; 0x30
   18d58:	sub	r1, r7, #2
   18d5c:	clz	r1, r1
   18d60:	lsr	r1, r1, #5
   18d64:	and	r1, r1, r3
   18d68:	str	r1, [sp, #64]	; 0x40
   18d6c:	subs	r1, r7, #2
   18d70:	mov	r7, #0
   18d74:	movwne	r1, #1
   18d78:	orr	r6, r1, r6
   18d7c:	and	r1, r1, r2
   18d80:	and	r0, r0, r1
   18d84:	str	r6, [sp, #68]	; 0x44
   18d88:	str	r0, [fp, #-60]	; 0xffffffc4
   18d8c:	orr	r0, r1, r3
   18d90:	ldr	r1, [fp, #16]
   18d94:	eor	r0, r0, #1
   18d98:	clz	r1, r1
   18d9c:	lsr	r1, r1, #5
   18da0:	orr	r0, r1, r0
   18da4:	str	r0, [fp, #-64]	; 0xffffffc0
   18da8:	eor	r0, r2, #1
   18dac:	str	r0, [sp, #52]	; 0x34
   18db0:	cmn	lr, #1
   18db4:	beq	18dc4 <__assert_fail@plt+0x77dc>
   18db8:	cmp	r7, lr
   18dbc:	bne	18dd0 <__assert_fail@plt+0x77e8>
   18dc0:	b	19918 <__assert_fail@plt+0x8330>
   18dc4:	ldrb	r0, [ip, r7]
   18dc8:	cmp	r0, #0
   18dcc:	beq	19920 <__assert_fail@plt+0x8338>
   18dd0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18dd4:	mov	sl, #0
   18dd8:	cmp	r0, #0
   18ddc:	beq	18e14 <__assert_fail@plt+0x782c>
   18de0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18de4:	add	r5, r7, r0
   18de8:	cmp	r0, #2
   18dec:	bcc	18e08 <__assert_fail@plt+0x7820>
   18df0:	cmn	lr, #1
   18df4:	bne	18e08 <__assert_fail@plt+0x7820>
   18df8:	mov	r0, ip
   18dfc:	bl	11474 <strlen@plt>
   18e00:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18e04:	mov	lr, r0
   18e08:	cmp	r5, lr
   18e0c:	bls	18e1c <__assert_fail@plt+0x7834>
   18e10:	ldr	r5, [fp, #-84]	; 0xffffffac
   18e14:	mov	r0, #0
   18e18:	b	18e68 <__assert_fail@plt+0x7880>
   18e1c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18e20:	ldr	r2, [fp, #-72]	; 0xffffffb8
   18e24:	add	r0, ip, r7
   18e28:	mov	r6, r4
   18e2c:	mov	r4, lr
   18e30:	bl	11468 <bcmp@plt>
   18e34:	ldr	r2, [sp, #92]	; 0x5c
   18e38:	cmp	r0, #0
   18e3c:	ldr	r5, [fp, #-84]	; 0xffffffac
   18e40:	mov	r1, r0
   18e44:	movwne	r1, #1
   18e48:	orr	r1, r1, r2
   18e4c:	tst	r1, #1
   18e50:	beq	199a8 <__assert_fail@plt+0x83c0>
   18e54:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18e58:	clz	r0, r0
   18e5c:	mov	lr, r4
   18e60:	mov	r4, r6
   18e64:	lsr	r0, r0, #5
   18e68:	str	r0, [fp, #-52]	; 0xffffffcc
   18e6c:	ldrb	r6, [ip, r7]
   18e70:	cmp	r6, #126	; 0x7e
   18e74:	bhi	193a4 <__assert_fail@plt+0x7dbc>
   18e78:	add	r3, pc, #16
   18e7c:	mov	r9, #1
   18e80:	mov	r2, #110	; 0x6e
   18e84:	mov	r0, #97	; 0x61
   18e88:	mov	r1, #0
   18e8c:	ldr	pc, [r3, r6, lsl #2]
   18e90:	andeq	r9, r1, r4, lsl #4
   18e94:	andeq	r9, r1, r4, lsr #7
   18e98:	andeq	r9, r1, r4, lsr #7
   18e9c:	andeq	r9, r1, r4, lsr #7
   18ea0:	andeq	r9, r1, r4, lsr #7
   18ea4:	andeq	r9, r1, r4, lsr #7
   18ea8:	andeq	r9, r1, r4, lsr #7
   18eac:	andeq	r9, r1, r0, lsl #9
   18eb0:	andeq	r9, r1, r4, ror #3
   18eb4:	ldrdeq	r9, [r1], -ip
   18eb8:	strdeq	r9, [r1], -r0
   18ebc:	andeq	r9, r1, ip, lsl #6
   18ec0:	ldrdeq	r9, [r1], -r4
   18ec4:	andeq	r9, r1, ip, ror #3
   18ec8:	andeq	r9, r1, r4, lsr #7
   18ecc:	andeq	r9, r1, r4, lsr #7
   18ed0:	andeq	r9, r1, r4, lsr #7
   18ed4:	andeq	r9, r1, r4, lsr #7
   18ed8:	andeq	r9, r1, r4, lsr #7
   18edc:	andeq	r9, r1, r4, lsr #7
   18ee0:	andeq	r9, r1, r4, lsr #7
   18ee4:	andeq	r9, r1, r4, lsr #7
   18ee8:	andeq	r9, r1, r4, lsr #7
   18eec:	andeq	r9, r1, r4, lsr #7
   18ef0:	andeq	r9, r1, r4, lsr #7
   18ef4:	andeq	r9, r1, r4, lsr #7
   18ef8:	andeq	r9, r1, r4, lsr #7
   18efc:	andeq	r9, r1, r4, lsr #7
   18f00:	andeq	r9, r1, r4, lsr #7
   18f04:	andeq	r9, r1, r4, lsr #7
   18f08:	andeq	r9, r1, r4, lsr #7
   18f0c:	andeq	r9, r1, r4, lsr #7
   18f10:	andeq	r9, r1, r8, lsl #3
   18f14:	andeq	r9, r1, ip, lsl #3
   18f18:	andeq	r9, r1, ip, lsl #3
   18f1c:	andeq	r9, r1, r4, ror r1
   18f20:	andeq	r9, r1, ip, lsl #3
   18f24:	andeq	r9, r1, ip, lsl #1
   18f28:	andeq	r9, r1, ip, lsl #3
   18f2c:	andeq	r9, r1, r4, lsl r3
   18f30:	andeq	r9, r1, ip, lsl #3
   18f34:	andeq	r9, r1, ip, lsl #3
   18f38:	andeq	r9, r1, ip, lsl #3
   18f3c:	andeq	r9, r1, ip, lsl #1
   18f40:	andeq	r9, r1, ip, lsl #1
   18f44:	andeq	r9, r1, ip, lsl #1
   18f48:	andeq	r9, r1, ip, lsl #1
   18f4c:	andeq	r9, r1, ip, lsl #1
   18f50:	andeq	r9, r1, ip, lsl #1
   18f54:	andeq	r9, r1, ip, lsl #1
   18f58:	andeq	r9, r1, ip, lsl #1
   18f5c:	andeq	r9, r1, ip, lsl #1
   18f60:	andeq	r9, r1, ip, lsl #1
   18f64:	andeq	r9, r1, ip, lsl #1
   18f68:	andeq	r9, r1, ip, lsl #1
   18f6c:	andeq	r9, r1, ip, lsl #1
   18f70:	andeq	r9, r1, ip, lsl #1
   18f74:	andeq	r9, r1, ip, lsl #1
   18f78:	andeq	r9, r1, ip, lsl #1
   18f7c:	andeq	r9, r1, ip, lsl #3
   18f80:	andeq	r9, r1, ip, lsl #3
   18f84:	andeq	r9, r1, ip, lsl #3
   18f88:	andeq	r9, r1, ip, lsl #3
   18f8c:	ldrdeq	r9, [r1], -ip
   18f90:	andeq	r9, r1, r4, lsr #7
   18f94:	andeq	r9, r1, ip, lsl #1
   18f98:	andeq	r9, r1, ip, lsl #1
   18f9c:	andeq	r9, r1, ip, lsl #1
   18fa0:	andeq	r9, r1, ip, lsl #1
   18fa4:	andeq	r9, r1, ip, lsl #1
   18fa8:	andeq	r9, r1, ip, lsl #1
   18fac:	andeq	r9, r1, ip, lsl #1
   18fb0:	andeq	r9, r1, ip, lsl #1
   18fb4:	andeq	r9, r1, ip, lsl #1
   18fb8:	andeq	r9, r1, ip, lsl #1
   18fbc:	andeq	r9, r1, ip, lsl #1
   18fc0:	andeq	r9, r1, ip, lsl #1
   18fc4:	andeq	r9, r1, ip, lsl #1
   18fc8:	andeq	r9, r1, ip, lsl #1
   18fcc:	andeq	r9, r1, ip, lsl #1
   18fd0:	andeq	r9, r1, ip, lsl #1
   18fd4:	andeq	r9, r1, ip, lsl #1
   18fd8:	andeq	r9, r1, ip, lsl #1
   18fdc:	andeq	r9, r1, ip, lsl #1
   18fe0:	andeq	r9, r1, ip, lsl #1
   18fe4:	andeq	r9, r1, ip, lsl #1
   18fe8:	andeq	r9, r1, ip, lsl #1
   18fec:	andeq	r9, r1, ip, lsl #1
   18ff0:	andeq	r9, r1, ip, lsl #1
   18ff4:	andeq	r9, r1, ip, lsl #1
   18ff8:	andeq	r9, r1, ip, lsl #1
   18ffc:	andeq	r9, r1, ip, lsl #3
   19000:			; <UNDEFINED> instruction: 0x000191b4
   19004:	andeq	r9, r1, ip, lsl #1
   19008:	andeq	r9, r1, ip, lsl #3
   1900c:	andeq	r9, r1, ip, lsl #1
   19010:	andeq	r9, r1, ip, lsl #3
   19014:	andeq	r9, r1, ip, lsl #1
   19018:	andeq	r9, r1, ip, lsl #1
   1901c:	andeq	r9, r1, ip, lsl #1
   19020:	andeq	r9, r1, ip, lsl #1
   19024:	andeq	r9, r1, ip, lsl #1
   19028:	andeq	r9, r1, ip, lsl #1
   1902c:	andeq	r9, r1, ip, lsl #1
   19030:	andeq	r9, r1, ip, lsl #1
   19034:	andeq	r9, r1, ip, lsl #1
   19038:	andeq	r9, r1, ip, lsl #1
   1903c:	andeq	r9, r1, ip, lsl #1
   19040:	andeq	r9, r1, ip, lsl #1
   19044:	andeq	r9, r1, ip, lsl #1
   19048:	andeq	r9, r1, ip, lsl #1
   1904c:	andeq	r9, r1, ip, lsl #1
   19050:	andeq	r9, r1, ip, lsl #1
   19054:	andeq	r9, r1, ip, lsl #1
   19058:	andeq	r9, r1, ip, lsl #1
   1905c:	andeq	r9, r1, ip, lsl #1
   19060:	andeq	r9, r1, ip, lsl #1
   19064:	andeq	r9, r1, ip, lsl #1
   19068:	andeq	r9, r1, ip, lsl #1
   1906c:	andeq	r9, r1, ip, lsl #1
   19070:	andeq	r9, r1, ip, lsl #1
   19074:	andeq	r9, r1, ip, lsl #1
   19078:	andeq	r9, r1, ip, lsl #1
   1907c:	andeq	r9, r1, r8, asr #2
   19080:	andeq	r9, r1, ip, lsl #3
   19084:	andeq	r9, r1, r8, asr #2
   19088:	andeq	r9, r1, r4, ror r1
   1908c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19090:	tst	r0, #1
   19094:	bne	190c0 <__assert_fail@plt+0x7ad8>
   19098:	ldr	r1, [fp, #16]
   1909c:	ubfx	r0, r6, #5, #3
   190a0:	mov	r2, #1
   190a4:	ldr	r0, [r1, r0, lsl #2]
   190a8:	and	r1, r6, #31
   190ac:	tst	r0, r2, lsl r1
   190b0:	beq	190c0 <__assert_fail@plt+0x7ad8>
   190b4:	mov	r0, r6
   190b8:	mov	r1, r9
   190bc:	b	190d4 <__assert_fail@plt+0x7aec>
   190c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   190c4:	mov	r1, r9
   190c8:	cmp	r0, #0
   190cc:	mov	r0, r6
   190d0:	beq	19414 <__assert_fail@plt+0x7e2c>
   190d4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   190d8:	tst	r2, #1
   190dc:	bne	199e4 <__assert_fail@plt+0x83fc>
   190e0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   190e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   190e8:	subs	r2, r2, #2
   190ec:	movwne	r2, #1
   190f0:	orr	r2, r2, r3
   190f4:	tst	r2, #1
   190f8:	bne	19134 <__assert_fail@plt+0x7b4c>
   190fc:	cmp	r8, r4
   19100:	movcc	r2, #39	; 0x27
   19104:	strbcc	r2, [r5, r8]
   19108:	add	r2, r8, #1
   1910c:	cmp	r2, r4
   19110:	movcc	r3, #36	; 0x24
   19114:	strbcc	r3, [r5, r2]
   19118:	add	r2, r8, #2
   1911c:	add	r8, r8, #3
   19120:	cmp	r2, r4
   19124:	movcc	r3, #39	; 0x27
   19128:	strbcc	r3, [r5, r2]
   1912c:	mov	r2, #1
   19130:	str	r2, [fp, #-56]	; 0xffffffc8
   19134:	cmp	r8, r4
   19138:	movcc	r2, #92	; 0x5c
   1913c:	strbcc	r2, [r5, r8]
   19140:	add	r8, r8, #1
   19144:	b	19458 <__assert_fail@plt+0x7e70>
   19148:	cmp	lr, #1
   1914c:	beq	19174 <__assert_fail@plt+0x7b8c>
   19150:	mov	r9, #0
   19154:	cmn	lr, #1
   19158:	bne	19180 <__assert_fail@plt+0x7b98>
   1915c:	ldrb	r0, [ip, #1]
   19160:	cmp	r0, #0
   19164:	beq	19174 <__assert_fail@plt+0x7b8c>
   19168:	mvn	lr, #0
   1916c:	mov	sl, #0
   19170:	b	1908c <__assert_fail@plt+0x7aa4>
   19174:	mov	r9, #0
   19178:	cmp	r7, #0
   1917c:	beq	19188 <__assert_fail@plt+0x7ba0>
   19180:	mov	sl, #0
   19184:	b	1908c <__assert_fail@plt+0x7aa4>
   19188:	mov	r1, #1
   1918c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19190:	cmp	r0, #2
   19194:	bne	191ac <__assert_fail@plt+0x7bc4>
   19198:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1919c:	mov	r9, r1
   191a0:	tst	r0, #1
   191a4:	beq	1908c <__assert_fail@plt+0x7aa4>
   191a8:	b	199e4 <__assert_fail@plt+0x83fc>
   191ac:	mov	r9, r1
   191b0:	b	1908c <__assert_fail@plt+0x7aa4>
   191b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   191b8:	cmp	r0, #2
   191bc:	bne	193f8 <__assert_fail@plt+0x7e10>
   191c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   191c4:	tst	r0, #1
   191c8:	bne	199e4 <__assert_fail@plt+0x83fc>
   191cc:	mov	sl, #0
   191d0:	b	1940c <__assert_fail@plt+0x7e24>
   191d4:	mov	r0, #102	; 0x66
   191d8:	b	19480 <__assert_fail@plt+0x7e98>
   191dc:	mov	r2, #116	; 0x74
   191e0:	b	191f0 <__assert_fail@plt+0x7c08>
   191e4:	mov	r0, #98	; 0x62
   191e8:	b	19480 <__assert_fail@plt+0x7e98>
   191ec:	mov	r2, #114	; 0x72
   191f0:	ldr	r0, [sp, #68]	; 0x44
   191f4:	tst	r0, #1
   191f8:	mov	r0, r2
   191fc:	bne	19480 <__assert_fail@plt+0x7e98>
   19200:	b	199e4 <__assert_fail@plt+0x83fc>
   19204:	ldr	r0, [sp, #84]	; 0x54
   19208:	tst	r0, #1
   1920c:	beq	1949c <__assert_fail@plt+0x7eb4>
   19210:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19214:	tst	r0, #1
   19218:	bne	19ad0 <__assert_fail@plt+0x84e8>
   1921c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19220:	ldr	r1, [fp, #-56]	; 0xffffffc8
   19224:	subs	r0, r0, #2
   19228:	movwne	r0, #1
   1922c:	orr	r0, r0, r1
   19230:	tst	r0, #1
   19234:	bne	19270 <__assert_fail@plt+0x7c88>
   19238:	cmp	r8, r4
   1923c:	movcc	r0, #39	; 0x27
   19240:	strbcc	r0, [r5, r8]
   19244:	add	r0, r8, #1
   19248:	cmp	r0, r4
   1924c:	movcc	r1, #36	; 0x24
   19250:	strbcc	r1, [r5, r0]
   19254:	add	r0, r8, #2
   19258:	add	r8, r8, #3
   1925c:	cmp	r0, r4
   19260:	movcc	r1, #39	; 0x27
   19264:	strbcc	r1, [r5, r0]
   19268:	mov	r0, #1
   1926c:	str	r0, [fp, #-56]	; 0xffffffc8
   19270:	ldr	r1, [fp, #-68]	; 0xffffffbc
   19274:	cmp	r8, r4
   19278:	mov	r9, #0
   1927c:	mov	sl, #1
   19280:	mov	r6, #48	; 0x30
   19284:	movcc	r0, #92	; 0x5c
   19288:	strbcc	r0, [r5, r8]
   1928c:	add	r0, r8, #1
   19290:	cmp	r1, #2
   19294:	beq	19664 <__assert_fail@plt+0x807c>
   19298:	add	r1, r7, #1
   1929c:	cmp	r1, lr
   192a0:	bcs	19664 <__assert_fail@plt+0x807c>
   192a4:	ldrb	r1, [ip, r1]
   192a8:	sub	r1, r1, #48	; 0x30
   192ac:	uxtb	r1, r1
   192b0:	cmp	r1, #9
   192b4:	bhi	19664 <__assert_fail@plt+0x807c>
   192b8:	cmp	r0, r4
   192bc:	movcc	r1, #48	; 0x30
   192c0:	strbcc	r1, [r5, r0]
   192c4:	add	r0, r8, #2
   192c8:	add	r8, r8, #3
   192cc:	cmp	r0, r4
   192d0:	movcc	r1, #48	; 0x30
   192d4:	strbcc	r1, [r5, r0]
   192d8:	b	1908c <__assert_fail@plt+0x7aa4>
   192dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   192e0:	mov	sl, #0
   192e4:	mov	r6, #63	; 0x3f
   192e8:	cmp	r0, #5
   192ec:	beq	1966c <__assert_fail@plt+0x8084>
   192f0:	cmp	r0, #2
   192f4:	bne	19714 <__assert_fail@plt+0x812c>
   192f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   192fc:	mov	r9, #0
   19300:	tst	r0, #1
   19304:	beq	1908c <__assert_fail@plt+0x7aa4>
   19308:	b	199e4 <__assert_fail@plt+0x83fc>
   1930c:	mov	r0, #118	; 0x76
   19310:	b	19480 <__assert_fail@plt+0x7e98>
   19314:	mov	r0, #1
   19318:	mov	r6, #39	; 0x27
   1931c:	str	r0, [sp, #60]	; 0x3c
   19320:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19324:	cmp	r0, #2
   19328:	bne	194b8 <__assert_fail@plt+0x7ed0>
   1932c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19330:	tst	r0, #1
   19334:	bne	199e4 <__assert_fail@plt+0x83fc>
   19338:	ldr	r2, [sp, #56]	; 0x38
   1933c:	clz	r1, r4
   19340:	mov	sl, #0
   19344:	mov	r9, #1
   19348:	lsr	r1, r1, #5
   1934c:	cmp	r2, #0
   19350:	mov	r0, r2
   19354:	movwne	r0, #1
   19358:	orrs	r0, r0, r1
   1935c:	moveq	r2, r4
   19360:	moveq	r4, r0
   19364:	cmp	r8, r4
   19368:	str	r2, [sp, #56]	; 0x38
   1936c:	movcc	r0, #39	; 0x27
   19370:	strbcc	r0, [r5, r8]
   19374:	add	r0, r8, #1
   19378:	cmp	r0, r4
   1937c:	movcc	r1, #92	; 0x5c
   19380:	strbcc	r1, [r5, r0]
   19384:	add	r0, r8, #2
   19388:	add	r8, r8, #3
   1938c:	cmp	r0, r4
   19390:	movcc	r1, #39	; 0x27
   19394:	strbcc	r1, [r5, r0]
   19398:	mov	r0, #0
   1939c:	str	r0, [fp, #-56]	; 0xffffffc8
   193a0:	b	1908c <__assert_fail@plt+0x7aa4>
   193a4:	ldr	r0, [sp, #40]	; 0x28
   193a8:	str	r4, [sp, #88]	; 0x58
   193ac:	cmp	r0, #1
   193b0:	bne	194c0 <__assert_fail@plt+0x7ed8>
   193b4:	str	lr, [sp, #28]
   193b8:	bl	11450 <__ctype_b_loc@plt>
   193bc:	ldr	r0, [r0]
   193c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   193c4:	mov	r2, #1
   193c8:	add	r0, r0, r6, lsl #1
   193cc:	ldrb	r0, [r0, #1]
   193d0:	ubfx	r9, r0, #6, #1
   193d4:	ldr	r0, [sp, #52]	; 0x34
   193d8:	cmp	r2, #1
   193dc:	orr	r0, r9, r0
   193e0:	bhi	1971c <__assert_fail@plt+0x8134>
   193e4:	tst	r0, #1
   193e8:	beq	1971c <__assert_fail@plt+0x8134>
   193ec:	ldr	lr, [sp, #28]
   193f0:	ldr	r4, [sp, #88]	; 0x58
   193f4:	b	1908c <__assert_fail@plt+0x7aa4>
   193f8:	ldr	r1, [sp, #48]	; 0x30
   193fc:	mov	sl, #0
   19400:	mov	r0, #92	; 0x5c
   19404:	cmp	r1, #0
   19408:	beq	19480 <__assert_fail@plt+0x7e98>
   1940c:	mov	r6, #92	; 0x5c
   19410:	mov	r9, #0
   19414:	cmp	sl, #0
   19418:	bne	19450 <__assert_fail@plt+0x7e68>
   1941c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19420:	tst	r0, #1
   19424:	beq	19450 <__assert_fail@plt+0x7e68>
   19428:	cmp	r8, r4
   1942c:	movcc	r0, #39	; 0x27
   19430:	strbcc	r0, [r5, r8]
   19434:	add	r0, r8, #1
   19438:	add	r8, r8, #2
   1943c:	cmp	r0, r4
   19440:	movcc	r1, #39	; 0x27
   19444:	strbcc	r1, [r5, r0]
   19448:	mov	r0, #0
   1944c:	str	r0, [fp, #-56]	; 0xffffffc8
   19450:	mov	r1, r9
   19454:	mov	r0, r6
   19458:	cmp	r8, r4
   1945c:	strbcc	r0, [r5, r8]
   19460:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19464:	add	r8, r8, #1
   19468:	and	r0, r0, r1
   1946c:	str	r0, [fp, #-48]	; 0xffffffd0
   19470:	add	r7, r7, #1
   19474:	cmn	lr, #1
   19478:	bne	18db8 <__assert_fail@plt+0x77d0>
   1947c:	b	18dc4 <__assert_fail@plt+0x77dc>
   19480:	ldr	r1, [sp, #84]	; 0x54
   19484:	mov	sl, #0
   19488:	mov	r9, #0
   1948c:	tst	r1, #1
   19490:	mov	r1, #0
   19494:	beq	1908c <__assert_fail@plt+0x7aa4>
   19498:	b	190d4 <__assert_fail@plt+0x7aec>
   1949c:	ldr	r0, [sp, #36]	; 0x24
   194a0:	mov	r6, #0
   194a4:	mov	sl, #0
   194a8:	mov	r9, #0
   194ac:	cmp	r0, #0
   194b0:	beq	1908c <__assert_fail@plt+0x7aa4>
   194b4:	b	19470 <__assert_fail@plt+0x7e88>
   194b8:	mov	r9, #1
   194bc:	b	1908c <__assert_fail@plt+0x7aa4>
   194c0:	mov	r0, #0
   194c4:	cmn	lr, #1
   194c8:	sub	r4, fp, #40	; 0x28
   194cc:	str	r0, [fp, #-36]	; 0xffffffdc
   194d0:	str	r0, [fp, #-40]	; 0xffffffd8
   194d4:	bne	194e8 <__assert_fail@plt+0x7f00>
   194d8:	mov	r0, ip
   194dc:	bl	11474 <strlen@plt>
   194e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   194e4:	mov	lr, r0
   194e8:	ldr	r0, [sp, #72]	; 0x48
   194ec:	mov	r9, #1
   194f0:	mov	r2, #0
   194f4:	str	lr, [sp, #28]
   194f8:	add	r0, r0, r7
   194fc:	str	r0, [sp, #20]
   19500:	b	19544 <__assert_fail@plt+0x7f5c>
   19504:	ldr	r5, [sp, #44]	; 0x2c
   19508:	add	r5, r0, r5
   1950c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19510:	bl	11384 <iswprint@plt>
   19514:	cmp	r0, #0
   19518:	sub	r4, fp, #40	; 0x28
   1951c:	movwne	r0, #1
   19520:	and	r9, r9, r0
   19524:	mov	r0, r4
   19528:	bl	11330 <mbsinit@plt>
   1952c:	mov	r2, r5
   19530:	ldr	lr, [sp, #28]
   19534:	ldr	r5, [fp, #-84]	; 0xffffffac
   19538:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1953c:	cmp	r0, #0
   19540:	bne	193d4 <__assert_fail@plt+0x7dec>
   19544:	add	r0, r2, r7
   19548:	str	r2, [sp, #44]	; 0x2c
   1954c:	mov	r3, r4
   19550:	add	r1, ip, r0
   19554:	str	r0, [sp, #24]
   19558:	sub	r2, lr, r0
   1955c:	sub	r0, fp, #44	; 0x2c
   19560:	bl	1c658 <__assert_fail@plt+0xb070>
   19564:	cmp	r0, #0
   19568:	beq	1990c <__assert_fail@plt+0x8324>
   1956c:	cmn	r0, #1
   19570:	beq	198c8 <__assert_fail@plt+0x82e0>
   19574:	ldr	lr, [sp, #28]
   19578:	cmn	r0, #2
   1957c:	beq	198d0 <__assert_fail@plt+0x82e8>
   19580:	ldr	r2, [sp, #64]	; 0x40
   19584:	ldr	r4, [sp, #88]	; 0x58
   19588:	ldr	ip, [sp, #84]	; 0x54
   1958c:	cmp	r0, #2
   19590:	mov	r1, #0
   19594:	movwcc	r1, #1
   19598:	eor	r2, r2, #1
   1959c:	orrs	r1, r2, r1
   195a0:	bne	19504 <__assert_fail@plt+0x7f1c>
   195a4:	ldr	r1, [sp, #44]	; 0x2c
   195a8:	ldr	r2, [sp, #20]
   195ac:	add	r1, r2, r1
   195b0:	sub	r2, r0, #1
   195b4:	b	195c4 <__assert_fail@plt+0x7fdc>
   195b8:	add	r1, r1, #1
   195bc:	subs	r2, r2, #1
   195c0:	beq	19504 <__assert_fail@plt+0x7f1c>
   195c4:	ldrb	r3, [r1]
   195c8:	sub	r3, r3, #91	; 0x5b
   195cc:	cmp	r3, #33	; 0x21
   195d0:	bhi	195b8 <__assert_fail@plt+0x7fd0>
   195d4:	add	r5, pc, #0
   195d8:	ldr	pc, [r5, r3, lsl #2]
   195dc:	andeq	r9, r1, r0, asr #19
   195e0:	andeq	r9, r1, r0, asr #19
   195e4:			; <UNDEFINED> instruction: 0x000195b8
   195e8:	andeq	r9, r1, r0, asr #19
   195ec:			; <UNDEFINED> instruction: 0x000195b8
   195f0:	andeq	r9, r1, r0, asr #19
   195f4:			; <UNDEFINED> instruction: 0x000195b8
   195f8:			; <UNDEFINED> instruction: 0x000195b8
   195fc:			; <UNDEFINED> instruction: 0x000195b8
   19600:			; <UNDEFINED> instruction: 0x000195b8
   19604:			; <UNDEFINED> instruction: 0x000195b8
   19608:			; <UNDEFINED> instruction: 0x000195b8
   1960c:			; <UNDEFINED> instruction: 0x000195b8
   19610:			; <UNDEFINED> instruction: 0x000195b8
   19614:			; <UNDEFINED> instruction: 0x000195b8
   19618:			; <UNDEFINED> instruction: 0x000195b8
   1961c:			; <UNDEFINED> instruction: 0x000195b8
   19620:			; <UNDEFINED> instruction: 0x000195b8
   19624:			; <UNDEFINED> instruction: 0x000195b8
   19628:			; <UNDEFINED> instruction: 0x000195b8
   1962c:			; <UNDEFINED> instruction: 0x000195b8
   19630:			; <UNDEFINED> instruction: 0x000195b8
   19634:			; <UNDEFINED> instruction: 0x000195b8
   19638:			; <UNDEFINED> instruction: 0x000195b8
   1963c:			; <UNDEFINED> instruction: 0x000195b8
   19640:			; <UNDEFINED> instruction: 0x000195b8
   19644:			; <UNDEFINED> instruction: 0x000195b8
   19648:			; <UNDEFINED> instruction: 0x000195b8
   1964c:			; <UNDEFINED> instruction: 0x000195b8
   19650:			; <UNDEFINED> instruction: 0x000195b8
   19654:			; <UNDEFINED> instruction: 0x000195b8
   19658:			; <UNDEFINED> instruction: 0x000195b8
   1965c:			; <UNDEFINED> instruction: 0x000195b8
   19660:	andeq	r9, r1, r0, asr #19
   19664:	mov	r8, r0
   19668:	b	1908c <__assert_fail@plt+0x7aa4>
   1966c:	ldr	r0, [sp, #32]
   19670:	cmp	r0, #0
   19674:	beq	19714 <__assert_fail@plt+0x812c>
   19678:	add	r0, r7, #2
   1967c:	cmp	r0, lr
   19680:	bcs	19714 <__assert_fail@plt+0x812c>
   19684:	add	r1, r7, ip
   19688:	ldrb	r1, [r1, #1]
   1968c:	cmp	r1, #63	; 0x3f
   19690:	bne	19714 <__assert_fail@plt+0x812c>
   19694:	ldrb	r9, [ip, r0]
   19698:	sub	r2, r9, #33	; 0x21
   1969c:	cmp	r2, #29
   196a0:	bhi	19714 <__assert_fail@plt+0x812c>
   196a4:	movw	r1, #20929	; 0x51c1
   196a8:	mov	r3, #1
   196ac:	movt	r1, #14336	; 0x3800
   196b0:	tst	r1, r3, lsl r2
   196b4:	beq	19714 <__assert_fail@plt+0x812c>
   196b8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   196bc:	tst	r1, #1
   196c0:	bne	199e4 <__assert_fail@plt+0x83fc>
   196c4:	cmp	r8, r4
   196c8:	add	r2, r8, #1
   196cc:	mov	r6, r9
   196d0:	mov	r7, r0
   196d4:	mov	r9, #0
   196d8:	movcc	r1, #63	; 0x3f
   196dc:	strbcc	r1, [r5, r8]
   196e0:	cmp	r2, r4
   196e4:	movcc	r1, #34	; 0x22
   196e8:	strbcc	r1, [r5, r2]
   196ec:	add	r2, r8, #2
   196f0:	cmp	r2, r4
   196f4:	movcc	r1, #34	; 0x22
   196f8:	strbcc	r1, [r5, r2]
   196fc:	add	r2, r8, #3
   19700:	add	r8, r8, #4
   19704:	cmp	r2, r4
   19708:	movcc	r1, #63	; 0x3f
   1970c:	strbcc	r1, [r5, r2]
   19710:	b	1908c <__assert_fail@plt+0x7aa4>
   19714:	mov	r9, #0
   19718:	b	1908c <__assert_fail@plt+0x7aa4>
   1971c:	ldr	lr, [sp, #28]
   19720:	ldr	r4, [fp, #-56]	; 0xffffffc8
   19724:	add	r1, r2, r7
   19728:	mov	r2, #0
   1972c:	str	r1, [sp, #44]	; 0x2c
   19730:	tst	r0, #1
   19734:	bne	19850 <__assert_fail@plt+0x8268>
   19738:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1973c:	tst	r1, #1
   19740:	bne	199e0 <__assert_fail@plt+0x83f8>
   19744:	ldr	r1, [fp, #-68]	; 0xffffffbc
   19748:	subs	r2, r1, #2
   1974c:	movwne	r2, #1
   19750:	orr	r2, r2, r4
   19754:	tst	r2, #1
   19758:	bne	1979c <__assert_fail@plt+0x81b4>
   1975c:	ldr	r1, [sp, #88]	; 0x58
   19760:	add	r2, r8, #1
   19764:	mov	r4, #1
   19768:	cmp	r8, r1
   1976c:	movcc	r1, #39	; 0x27
   19770:	strbcc	r1, [r5, r8]
   19774:	ldr	r1, [sp, #88]	; 0x58
   19778:	cmp	r2, r1
   1977c:	movcc	r1, #36	; 0x24
   19780:	strbcc	r1, [r5, r2]
   19784:	ldr	r1, [sp, #88]	; 0x58
   19788:	add	r2, r8, #2
   1978c:	add	r8, r8, #3
   19790:	cmp	r2, r1
   19794:	movcc	r1, #39	; 0x27
   19798:	strbcc	r1, [r5, r2]
   1979c:	ldr	r1, [sp, #88]	; 0x58
   197a0:	add	r2, r8, #1
   197a4:	cmp	r8, r1
   197a8:	movcc	r1, #92	; 0x5c
   197ac:	strbcc	r1, [r5, r8]
   197b0:	ldr	r1, [sp, #88]	; 0x58
   197b4:	cmp	r2, r1
   197b8:	bcs	197cc <__assert_fail@plt+0x81e4>
   197bc:	uxtb	r3, r6
   197c0:	mov	r1, #48	; 0x30
   197c4:	orr	r3, r1, r3, lsr #6
   197c8:	strb	r3, [r5, r2]
   197cc:	ldr	r1, [sp, #88]	; 0x58
   197d0:	add	r2, r8, #2
   197d4:	add	r8, r8, #3
   197d8:	cmp	r2, r1
   197dc:	lsrcc	r3, r6, #3
   197e0:	movcc	r1, #6
   197e4:	bficc	r3, r1, #3, #29
   197e8:	mov	r1, #6
   197ec:	bfi	r6, r1, #3, #29
   197f0:	strbcc	r3, [r5, r2]
   197f4:	mov	r2, #1
   197f8:	b	19878 <__assert_fail@plt+0x8290>
   197fc:	ldr	r1, [sp, #88]	; 0x58
   19800:	ldr	r5, [fp, #-84]	; 0xffffffac
   19804:	ldr	r4, [sp, #88]	; 0x58
   19808:	cmp	r8, r1
   1980c:	movcc	r1, #39	; 0x27
   19810:	strbcc	r1, [r5, r8]
   19814:	add	r1, r8, #1
   19818:	add	r8, r8, #2
   1981c:	cmp	r1, r4
   19820:	movcc	r4, #39	; 0x27
   19824:	strbcc	r4, [r5, r1]
   19828:	mov	r4, #0
   1982c:	ldr	r1, [sp, #88]	; 0x58
   19830:	cmp	r8, r1
   19834:	ldr	r1, [sp, #72]	; 0x48
   19838:	strbcc	r6, [r5, r8]
   1983c:	add	r8, r8, #1
   19840:	ldrb	r6, [r1, r7]
   19844:	mov	r7, r3
   19848:	tst	r0, #1
   1984c:	beq	19738 <__assert_fail@plt+0x8150>
   19850:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19854:	tst	r1, #1
   19858:	beq	19870 <__assert_fail@plt+0x8288>
   1985c:	ldr	r1, [sp, #88]	; 0x58
   19860:	cmp	r8, r1
   19864:	movcc	r1, #92	; 0x5c
   19868:	strbcc	r1, [r5, r8]
   1986c:	add	r8, r8, #1
   19870:	mov	r1, #0
   19874:	str	r1, [fp, #-52]	; 0xffffffcc
   19878:	ldr	r1, [sp, #44]	; 0x2c
   1987c:	add	r3, r7, #1
   19880:	and	sl, r2, #1
   19884:	cmp	r1, r3
   19888:	bls	198ac <__assert_fail@plt+0x82c4>
   1988c:	cmp	sl, #0
   19890:	mvn	r5, r4
   19894:	movwne	sl, #1
   19898:	orr	r5, r5, sl
   1989c:	tst	r5, #1
   198a0:	beq	197fc <__assert_fail@plt+0x8214>
   198a4:	ldr	r5, [fp, #-84]	; 0xffffffac
   198a8:	b	1982c <__assert_fail@plt+0x8244>
   198ac:	str	r4, [fp, #-56]	; 0xffffffc8
   198b0:	ldr	r4, [sp, #88]	; 0x58
   198b4:	cmp	sl, #0
   198b8:	movwne	sl, #1
   198bc:	cmp	sl, #0
   198c0:	beq	1941c <__assert_fail@plt+0x7e34>
   198c4:	b	19450 <__assert_fail@plt+0x7e68>
   198c8:	mov	r9, #0
   198cc:	b	1990c <__assert_fail@plt+0x8324>
   198d0:	ldr	r0, [sp, #24]
   198d4:	mov	r9, #0
   198d8:	cmp	lr, r0
   198dc:	bls	1990c <__assert_fail@plt+0x8324>
   198e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   198e4:	ldr	r2, [sp, #44]	; 0x2c
   198e8:	add	r0, ip, r7
   198ec:	ldrb	r1, [r0, r2]
   198f0:	cmp	r1, #0
   198f4:	beq	193d4 <__assert_fail@plt+0x7dec>
   198f8:	add	r2, r2, #1
   198fc:	add	r1, r7, r2
   19900:	cmp	r1, lr
   19904:	bcc	198ec <__assert_fail@plt+0x8304>
   19908:	b	193d4 <__assert_fail@plt+0x7dec>
   1990c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19910:	ldr	r2, [sp, #44]	; 0x2c
   19914:	b	193d4 <__assert_fail@plt+0x7dec>
   19918:	mov	lr, r7
   1991c:	b	19924 <__assert_fail@plt+0x833c>
   19920:	mvn	lr, #0
   19924:	ldr	r1, [fp, #-68]	; 0xffffffbc
   19928:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1992c:	eor	r0, r1, #2
   19930:	orr	r0, r0, r8
   19934:	clz	r0, r0
   19938:	lsr	r0, r0, #5
   1993c:	tst	r2, r0
   19940:	bne	199e4 <__assert_fail@plt+0x83fc>
   19944:	subs	r0, r1, #2
   19948:	movwne	r0, #1
   1994c:	orr	r0, r2, r0
   19950:	tst	r0, #1
   19954:	ldreq	r0, [sp, #60]	; 0x3c
   19958:	eoreq	r0, r0, #1
   1995c:	tsteq	r0, #1
   19960:	bne	19a78 <__assert_fail@plt+0x8490>
   19964:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19968:	mov	sl, lr
   1996c:	tst	r0, #1
   19970:	bne	19a44 <__assert_fail@plt+0x845c>
   19974:	ldr	r6, [sp, #56]	; 0x38
   19978:	mov	r9, #0
   1997c:	cmp	r6, #0
   19980:	beq	19a70 <__assert_fail@plt+0x8488>
   19984:	ldr	r0, [sp, #84]	; 0x54
   19988:	mov	r1, #0
   1998c:	mov	r7, #2
   19990:	cmp	r4, #0
   19994:	str	r1, [fp, #-48]	; 0xffffffd0
   19998:	mov	r1, #0
   1999c:	str	r1, [fp, #-76]	; 0xffffffb4
   199a0:	beq	18b40 <__assert_fail@plt+0x7558>
   199a4:	b	19a78 <__assert_fail@plt+0x8490>
   199a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   199ac:	ldr	r1, [fp, #12]
   199b0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   199b4:	mov	lr, r4
   199b8:	mov	r4, r6
   199bc:	b	19a04 <__assert_fail@plt+0x841c>
   199c0:	tst	ip, #1
   199c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   199c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   199cc:	ldr	r1, [fp, #12]
   199d0:	mov	r0, #2
   199d4:	movwne	r0, #4
   199d8:	mov	r2, r0
   199dc:	b	19a04 <__assert_fail@plt+0x841c>
   199e0:	ldr	r4, [sp, #88]	; 0x58
   199e4:	ldr	r1, [sp, #84]	; 0x54
   199e8:	mov	r0, #2
   199ec:	tst	r1, #1
   199f0:	movwne	r0, #4
   199f4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   199f8:	ldr	r1, [fp, #12]
   199fc:	cmp	r2, #2
   19a00:	moveq	r2, r0
   19a04:	mov	r0, #0
   19a08:	bic	r1, r1, #2
   19a0c:	str	r2, [sp]
   19a10:	mov	r2, ip
   19a14:	mov	r3, lr
   19a18:	str	r0, [sp, #8]
   19a1c:	ldr	r0, [sp, #76]	; 0x4c
   19a20:	str	r1, [sp, #4]
   19a24:	mov	r1, r4
   19a28:	str	r0, [sp, #12]
   19a2c:	ldr	r0, [sp, #80]	; 0x50
   19a30:	str	r0, [sp, #16]
   19a34:	mov	r0, r5
   19a38:	bl	18ab0 <__assert_fail@plt+0x74c8>
   19a3c:	mov	r8, r0
   19a40:	b	19ac4 <__assert_fail@plt+0x84dc>
   19a44:	mov	r0, #5
   19a48:	ldr	r1, [sp, #56]	; 0x38
   19a4c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   19a50:	mov	r3, sl
   19a54:	str	r0, [sp]
   19a58:	ldr	r0, [fp, #12]
   19a5c:	str	r0, [sp, #4]
   19a60:	ldr	r0, [fp, #16]
   19a64:	str	r0, [sp, #8]
   19a68:	ldr	r0, [sp, #76]	; 0x4c
   19a6c:	b	19a28 <__assert_fail@plt+0x8440>
   19a70:	mov	r0, #0
   19a74:	str	r0, [fp, #-76]	; 0xffffffb4
   19a78:	ldr	r1, [fp, #-88]	; 0xffffffa8
   19a7c:	cmp	r1, #0
   19a80:	beq	19ab8 <__assert_fail@plt+0x84d0>
   19a84:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19a88:	tst	r0, #1
   19a8c:	bne	19ab8 <__assert_fail@plt+0x84d0>
   19a90:	ldrb	r0, [r1]
   19a94:	cmp	r0, #0
   19a98:	beq	19ab8 <__assert_fail@plt+0x84d0>
   19a9c:	add	r1, r1, #1
   19aa0:	cmp	r8, r4
   19aa4:	strbcc	r0, [r5, r8]
   19aa8:	add	r8, r8, #1
   19aac:	ldrb	r0, [r1], #1
   19ab0:	cmp	r0, #0
   19ab4:	bne	19aa0 <__assert_fail@plt+0x84b8>
   19ab8:	cmp	r8, r4
   19abc:	movcc	r0, #0
   19ac0:	strbcc	r0, [r5, r8]
   19ac4:	mov	r0, r8
   19ac8:	sub	sp, fp, #28
   19acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ad0:	mov	r0, #4
   19ad4:	b	199f4 <__assert_fail@plt+0x840c>
   19ad8:	bl	115c4 <abort@plt>
   19adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ae0:	add	fp, sp, #28
   19ae4:	sub	sp, sp, #28
   19ae8:	movw	r5, #61928	; 0xf1e8
   19aec:	cmp	r2, #0
   19af0:	mov	r4, r1
   19af4:	mov	r7, r0
   19af8:	str	r0, [sp, #20]
   19afc:	movt	r5, #2
   19b00:	movne	r5, r2
   19b04:	bl	114b0 <__errno_location@plt>
   19b08:	mov	sl, r0
   19b0c:	ldr	r2, [r5, #40]	; 0x28
   19b10:	ldr	r3, [r5, #44]	; 0x2c
   19b14:	ldm	r5, {r0, r1}
   19b18:	orr	r8, r1, #1
   19b1c:	add	r9, r5, #8
   19b20:	mov	r1, #0
   19b24:	ldr	r6, [sl]
   19b28:	stm	sp, {r0, r8, r9}
   19b2c:	mov	r0, #0
   19b30:	str	r2, [sp, #12]
   19b34:	str	r3, [sp, #16]
   19b38:	mov	r2, r7
   19b3c:	mov	r3, r4
   19b40:	str	r6, [sp, #24]
   19b44:	mov	r6, r4
   19b48:	bl	18ab0 <__assert_fail@plt+0x74c8>
   19b4c:	add	r7, r0, #1
   19b50:	mov	r0, r7
   19b54:	bl	1ada8 <__assert_fail@plt+0x97c0>
   19b58:	mov	r4, r0
   19b5c:	ldr	r0, [r5]
   19b60:	ldr	r2, [r5, #44]	; 0x2c
   19b64:	ldr	r1, [r5, #40]	; 0x28
   19b68:	mov	r3, r6
   19b6c:	stm	sp, {r0, r8, r9}
   19b70:	str	r2, [sp, #16]
   19b74:	ldr	r2, [sp, #20]
   19b78:	str	r1, [sp, #12]
   19b7c:	mov	r0, r4
   19b80:	mov	r1, r7
   19b84:	bl	18ab0 <__assert_fail@plt+0x74c8>
   19b88:	ldr	r0, [sp, #24]
   19b8c:	str	r0, [sl]
   19b90:	mov	r0, r4
   19b94:	sub	sp, fp, #28
   19b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ba0:	add	fp, sp, #28
   19ba4:	sub	sp, sp, #36	; 0x24
   19ba8:	movw	r8, #61928	; 0xf1e8
   19bac:	cmp	r3, #0
   19bb0:	mov	r4, r2
   19bb4:	str	r2, [sp, #24]
   19bb8:	mov	r5, r1
   19bbc:	mov	r6, r0
   19bc0:	str	r0, [sp, #20]
   19bc4:	movt	r8, #2
   19bc8:	movne	r8, r3
   19bcc:	bl	114b0 <__errno_location@plt>
   19bd0:	str	r0, [sp, #28]
   19bd4:	ldr	r1, [r8, #40]	; 0x28
   19bd8:	ldr	r2, [r8, #44]	; 0x2c
   19bdc:	ldr	r7, [r0]
   19be0:	cmp	r4, #0
   19be4:	add	sl, r8, #8
   19be8:	mov	r0, #0
   19bec:	ldm	r8, {r3, r9}
   19bf0:	orreq	r9, r9, #1
   19bf4:	stm	sp, {r3, r9, sl}
   19bf8:	str	r1, [sp, #12]
   19bfc:	str	r2, [sp, #16]
   19c00:	mov	r1, #0
   19c04:	mov	r2, r6
   19c08:	mov	r3, r5
   19c0c:	str	r7, [sp, #32]
   19c10:	mov	r7, r5
   19c14:	bl	18ab0 <__assert_fail@plt+0x74c8>
   19c18:	add	r4, r0, #1
   19c1c:	mov	r5, r0
   19c20:	mov	r0, r4
   19c24:	bl	1ada8 <__assert_fail@plt+0x97c0>
   19c28:	mov	r6, r0
   19c2c:	ldr	r0, [r8]
   19c30:	ldr	r2, [r8, #44]	; 0x2c
   19c34:	ldr	r1, [r8, #40]	; 0x28
   19c38:	mov	r3, r7
   19c3c:	stm	sp, {r0, r9, sl}
   19c40:	str	r2, [sp, #16]
   19c44:	ldr	r2, [sp, #20]
   19c48:	str	r1, [sp, #12]
   19c4c:	mov	r0, r6
   19c50:	mov	r1, r4
   19c54:	bl	18ab0 <__assert_fail@plt+0x74c8>
   19c58:	ldr	r0, [sp, #24]
   19c5c:	ldr	r1, [sp, #32]
   19c60:	ldr	r2, [sp, #28]
   19c64:	cmp	r0, #0
   19c68:	str	r1, [r2]
   19c6c:	strne	r5, [r0]
   19c70:	mov	r0, r6
   19c74:	sub	sp, fp, #28
   19c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19c80:	add	fp, sp, #24
   19c84:	movw	r5, #61796	; 0xf164
   19c88:	movw	r8, #61792	; 0xf160
   19c8c:	movt	r5, #2
   19c90:	movt	r8, #2
   19c94:	ldr	r0, [r5]
   19c98:	ldr	r4, [r8]
   19c9c:	cmp	r0, #2
   19ca0:	blt	19ccc <__assert_fail@plt+0x86e4>
   19ca4:	add	r7, r4, #12
   19ca8:	mov	r6, #0
   19cac:	ldr	r0, [r7, r6, lsl #3]
   19cb0:	bl	1744c <__assert_fail@plt+0x5e64>
   19cb4:	ldr	r1, [r5]
   19cb8:	add	r2, r6, #2
   19cbc:	add	r0, r6, #1
   19cc0:	mov	r6, r0
   19cc4:	cmp	r2, r1
   19cc8:	blt	19cac <__assert_fail@plt+0x86c4>
   19ccc:	ldr	r0, [r4, #4]
   19cd0:	movw	r9, #61976	; 0xf218
   19cd4:	movw	r7, #61800	; 0xf168
   19cd8:	movt	r9, #2
   19cdc:	movt	r7, #2
   19ce0:	cmp	r0, r9
   19ce4:	beq	19cf4 <__assert_fail@plt+0x870c>
   19ce8:	bl	1744c <__assert_fail@plt+0x5e64>
   19cec:	mov	r0, #256	; 0x100
   19cf0:	stm	r7, {r0, r9}
   19cf4:	cmp	r4, r7
   19cf8:	beq	19d08 <__assert_fail@plt+0x8720>
   19cfc:	mov	r0, r4
   19d00:	bl	1744c <__assert_fail@plt+0x5e64>
   19d04:	str	r7, [r8]
   19d08:	mov	r0, #1
   19d0c:	str	r0, [r5]
   19d10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19d14:	movw	r3, #61928	; 0xf1e8
   19d18:	mvn	r2, #0
   19d1c:	movt	r3, #2
   19d20:	b	19d24 <__assert_fail@plt+0x873c>
   19d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d28:	add	fp, sp, #28
   19d2c:	sub	sp, sp, #44	; 0x2c
   19d30:	mov	r7, r3
   19d34:	str	r2, [sp, #36]	; 0x24
   19d38:	str	r1, [sp, #32]
   19d3c:	mov	r5, r0
   19d40:	bl	114b0 <__errno_location@plt>
   19d44:	cmp	r5, #0
   19d48:	bmi	19eb8 <__assert_fail@plt+0x88d0>
   19d4c:	cmn	r5, #-2147483647	; 0x80000001
   19d50:	beq	19eb8 <__assert_fail@plt+0x88d0>
   19d54:	movw	r8, #61796	; 0xf164
   19d58:	movw	r4, #61792	; 0xf160
   19d5c:	str	r0, [sp, #28]
   19d60:	ldr	r0, [r0]
   19d64:	movt	r8, #2
   19d68:	movt	r4, #2
   19d6c:	ldr	r1, [r8]
   19d70:	ldr	r6, [r4]
   19d74:	str	r0, [sp, #24]
   19d78:	cmp	r1, r5
   19d7c:	ble	19d88 <__assert_fail@plt+0x87a0>
   19d80:	mov	sl, r6
   19d84:	b	19df4 <__assert_fail@plt+0x880c>
   19d88:	movw	r9, #61800	; 0xf168
   19d8c:	mov	r0, #8
   19d90:	str	r1, [fp, #-32]	; 0xffffffe0
   19d94:	sub	r1, r5, r1
   19d98:	mvn	r3, #-2147483648	; 0x80000000
   19d9c:	movt	r9, #2
   19da0:	str	r0, [sp]
   19da4:	add	r2, r1, #1
   19da8:	sub	r1, fp, #32
   19dac:	subs	r0, r6, r9
   19db0:	movne	r0, r6
   19db4:	bl	1afa8 <__assert_fail@plt+0x99c0>
   19db8:	mov	sl, r0
   19dbc:	cmp	r6, r9
   19dc0:	str	r0, [r4]
   19dc4:	bne	19dd0 <__assert_fail@plt+0x87e8>
   19dc8:	ldrd	r0, [r9]
   19dcc:	stm	sl, {r0, r1}
   19dd0:	ldr	r1, [r8]
   19dd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19dd8:	add	r0, sl, r1, lsl #3
   19ddc:	sub	r1, r2, r1
   19de0:	lsl	r2, r1, #3
   19de4:	mov	r1, #0
   19de8:	bl	114c8 <memset@plt>
   19dec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19df0:	str	r0, [r8]
   19df4:	mov	r9, sl
   19df8:	ldm	r7, {r0, r1}
   19dfc:	orr	r8, r1, #1
   19e00:	add	r1, r7, #8
   19e04:	ldr	r2, [r7, #40]	; 0x28
   19e08:	ldr	r3, [r7, #44]	; 0x2c
   19e0c:	ldr	r6, [r9, r5, lsl #3]!
   19e10:	str	r1, [sp, #20]
   19e14:	ldr	r4, [r9, #4]!
   19e18:	stm	sp, {r0, r8}
   19e1c:	add	r0, sp, #8
   19e20:	stm	r0, {r1, r2, r3}
   19e24:	ldr	r2, [sp, #32]
   19e28:	ldr	r3, [sp, #36]	; 0x24
   19e2c:	mov	r1, r6
   19e30:	mov	r0, r4
   19e34:	bl	18ab0 <__assert_fail@plt+0x74c8>
   19e38:	cmp	r6, r0
   19e3c:	bhi	19ea0 <__assert_fail@plt+0x88b8>
   19e40:	add	r6, r0, #1
   19e44:	movw	r0, #61976	; 0xf218
   19e48:	movt	r0, #2
   19e4c:	str	r6, [sl, r5, lsl #3]
   19e50:	cmp	r4, r0
   19e54:	beq	19e60 <__assert_fail@plt+0x8878>
   19e58:	mov	r0, r4
   19e5c:	bl	1744c <__assert_fail@plt+0x5e64>
   19e60:	mov	r0, r6
   19e64:	bl	1ada8 <__assert_fail@plt+0x97c0>
   19e68:	str	r0, [r9]
   19e6c:	mov	r4, r0
   19e70:	add	r3, sp, #8
   19e74:	ldr	r0, [r7]
   19e78:	ldr	r1, [r7, #40]	; 0x28
   19e7c:	ldr	r2, [r7, #44]	; 0x2c
   19e80:	stm	sp, {r0, r8}
   19e84:	ldr	r0, [sp, #20]
   19e88:	stm	r3, {r0, r1, r2}
   19e8c:	ldr	r2, [sp, #32]
   19e90:	ldr	r3, [sp, #36]	; 0x24
   19e94:	mov	r0, r4
   19e98:	mov	r1, r6
   19e9c:	bl	18ab0 <__assert_fail@plt+0x74c8>
   19ea0:	ldr	r0, [sp, #28]
   19ea4:	ldr	r1, [sp, #24]
   19ea8:	str	r1, [r0]
   19eac:	mov	r0, r4
   19eb0:	sub	sp, fp, #28
   19eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eb8:	bl	115c4 <abort@plt>
   19ebc:	movw	r3, #61928	; 0xf1e8
   19ec0:	movt	r3, #2
   19ec4:	b	19d24 <__assert_fail@plt+0x873c>
   19ec8:	movw	r3, #61928	; 0xf1e8
   19ecc:	mov	r1, r0
   19ed0:	mov	r0, #0
   19ed4:	mvn	r2, #0
   19ed8:	movt	r3, #2
   19edc:	b	19d24 <__assert_fail@plt+0x873c>
   19ee0:	movw	r3, #61928	; 0xf1e8
   19ee4:	mov	r2, r1
   19ee8:	mov	r1, r0
   19eec:	mov	r0, #0
   19ef0:	movt	r3, #2
   19ef4:	b	19d24 <__assert_fail@plt+0x873c>
   19ef8:	push	{fp, lr}
   19efc:	mov	fp, sp
   19f00:	sub	sp, sp, #48	; 0x30
   19f04:	vmov.i32	q8, #0	; 0x00000000
   19f08:	mov	ip, #32
   19f0c:	mov	r3, sp
   19f10:	mov	lr, r2
   19f14:	cmp	r1, #10
   19f18:	add	r2, r3, #16
   19f1c:	vst1.64	{d16-d17}, [r3], ip
   19f20:	vst1.64	{d16-d17}, [r2]
   19f24:	vst1.64	{d16-d17}, [r3]
   19f28:	beq	19f48 <__assert_fail@plt+0x8960>
   19f2c:	str	r1, [sp]
   19f30:	mov	r3, sp
   19f34:	mov	r1, lr
   19f38:	mvn	r2, #0
   19f3c:	bl	19d24 <__assert_fail@plt+0x873c>
   19f40:	mov	sp, fp
   19f44:	pop	{fp, pc}
   19f48:	bl	115c4 <abort@plt>
   19f4c:	push	{r4, sl, fp, lr}
   19f50:	add	fp, sp, #8
   19f54:	sub	sp, sp, #48	; 0x30
   19f58:	vmov.i32	q8, #0	; 0x00000000
   19f5c:	mov	ip, r3
   19f60:	mov	r3, sp
   19f64:	mov	lr, #32
   19f68:	cmp	r1, #10
   19f6c:	add	r4, r3, #16
   19f70:	vst1.64	{d16-d17}, [r3], lr
   19f74:	vst1.64	{d16-d17}, [r4]
   19f78:	vst1.64	{d16-d17}, [r3]
   19f7c:	beq	19f9c <__assert_fail@plt+0x89b4>
   19f80:	str	r1, [sp]
   19f84:	mov	r1, r2
   19f88:	mov	r3, sp
   19f8c:	mov	r2, ip
   19f90:	bl	19d24 <__assert_fail@plt+0x873c>
   19f94:	sub	sp, fp, #8
   19f98:	pop	{r4, sl, fp, pc}
   19f9c:	bl	115c4 <abort@plt>
   19fa0:	push	{fp, lr}
   19fa4:	mov	fp, sp
   19fa8:	sub	sp, sp, #48	; 0x30
   19fac:	vmov.i32	q8, #0	; 0x00000000
   19fb0:	mov	r3, sp
   19fb4:	mov	ip, #32
   19fb8:	cmp	r0, #10
   19fbc:	add	r2, r3, #16
   19fc0:	vst1.64	{d16-d17}, [r3], ip
   19fc4:	vst1.64	{d16-d17}, [r2]
   19fc8:	vst1.64	{d16-d17}, [r3]
   19fcc:	beq	19fec <__assert_fail@plt+0x8a04>
   19fd0:	str	r0, [sp]
   19fd4:	mov	r3, sp
   19fd8:	mov	r0, #0
   19fdc:	mvn	r2, #0
   19fe0:	bl	19d24 <__assert_fail@plt+0x873c>
   19fe4:	mov	sp, fp
   19fe8:	pop	{fp, pc}
   19fec:	bl	115c4 <abort@plt>
   19ff0:	push	{fp, lr}
   19ff4:	mov	fp, sp
   19ff8:	sub	sp, sp, #48	; 0x30
   19ffc:	vmov.i32	q8, #0	; 0x00000000
   1a000:	mov	r3, sp
   1a004:	mov	ip, #32
   1a008:	cmp	r0, #10
   1a00c:	add	lr, r3, #16
   1a010:	vst1.64	{d16-d17}, [r3], ip
   1a014:	vst1.64	{d16-d17}, [lr]
   1a018:	vst1.64	{d16-d17}, [r3]
   1a01c:	beq	1a038 <__assert_fail@plt+0x8a50>
   1a020:	str	r0, [sp]
   1a024:	mov	r3, sp
   1a028:	mov	r0, #0
   1a02c:	bl	19d24 <__assert_fail@plt+0x873c>
   1a030:	mov	sp, fp
   1a034:	pop	{fp, pc}
   1a038:	bl	115c4 <abort@plt>
   1a03c:	push	{r4, sl, fp, lr}
   1a040:	add	fp, sp, #8
   1a044:	sub	sp, sp, #48	; 0x30
   1a048:	mov	lr, r0
   1a04c:	movw	r0, #61928	; 0xf1e8
   1a050:	mov	ip, r1
   1a054:	mov	r1, #32
   1a058:	mov	r4, #1
   1a05c:	movt	r0, #2
   1a060:	add	r3, r0, #16
   1a064:	vld1.64	{d16-d17}, [r0], r1
   1a068:	vld1.64	{d20-d21}, [r0]
   1a06c:	vld1.64	{d18-d19}, [r3]
   1a070:	mov	r3, sp
   1a074:	add	r0, r3, #32
   1a078:	add	r1, r3, #16
   1a07c:	vst1.64	{d20-d21}, [r0]
   1a080:	mov	r0, #28
   1a084:	vst1.64	{d18-d19}, [r1]
   1a088:	mov	r1, r3
   1a08c:	and	r0, r0, r2, lsr #3
   1a090:	and	r2, r2, #31
   1a094:	vst1.64	{d16-d17}, [r1], r0
   1a098:	ldr	r0, [r1, #8]
   1a09c:	bic	r4, r4, r0, lsr r2
   1a0a0:	eor	r0, r0, r4, lsl r2
   1a0a4:	mov	r2, ip
   1a0a8:	str	r0, [r1, #8]
   1a0ac:	mov	r0, #0
   1a0b0:	mov	r1, lr
   1a0b4:	bl	19d24 <__assert_fail@plt+0x873c>
   1a0b8:	sub	sp, fp, #8
   1a0bc:	pop	{r4, sl, fp, pc}
   1a0c0:	push	{fp, lr}
   1a0c4:	mov	fp, sp
   1a0c8:	sub	sp, sp, #48	; 0x30
   1a0cc:	mov	ip, r0
   1a0d0:	movw	r0, #61928	; 0xf1e8
   1a0d4:	mov	r2, #32
   1a0d8:	movt	r0, #2
   1a0dc:	add	r3, r0, #16
   1a0e0:	vld1.64	{d16-d17}, [r0], r2
   1a0e4:	vld1.64	{d20-d21}, [r0]
   1a0e8:	vld1.64	{d18-d19}, [r3]
   1a0ec:	mov	r3, sp
   1a0f0:	add	r0, r3, #32
   1a0f4:	add	r2, r3, #16
   1a0f8:	vst1.64	{d20-d21}, [r0]
   1a0fc:	mov	r0, #28
   1a100:	vst1.64	{d18-d19}, [r2]
   1a104:	mov	r2, r3
   1a108:	and	r0, r0, r1, lsr #3
   1a10c:	and	r1, r1, #31
   1a110:	vst1.64	{d16-d17}, [r2], r0
   1a114:	mov	r0, #1
   1a118:	ldr	lr, [r2, #8]
   1a11c:	bic	r0, r0, lr, lsr r1
   1a120:	eor	r0, lr, r0, lsl r1
   1a124:	mov	r1, ip
   1a128:	str	r0, [r2, #8]
   1a12c:	mov	r0, #0
   1a130:	mvn	r2, #0
   1a134:	bl	19d24 <__assert_fail@plt+0x873c>
   1a138:	mov	sp, fp
   1a13c:	pop	{fp, pc}
   1a140:	push	{fp, lr}
   1a144:	mov	fp, sp
   1a148:	sub	sp, sp, #48	; 0x30
   1a14c:	mov	r1, r0
   1a150:	movw	r0, #61928	; 0xf1e8
   1a154:	mov	r3, #32
   1a158:	movt	r0, #2
   1a15c:	add	r2, r0, #16
   1a160:	vld1.64	{d16-d17}, [r0], r3
   1a164:	mov	r3, sp
   1a168:	vld1.64	{d18-d19}, [r2]
   1a16c:	vld1.64	{d20-d21}, [r0]
   1a170:	add	r2, r3, #16
   1a174:	add	r0, r3, #32
   1a178:	vst1.64	{d18-d19}, [r2]
   1a17c:	vst1.64	{d20-d21}, [r0]
   1a180:	mov	r0, #12
   1a184:	mov	r2, r3
   1a188:	vst1.64	{d16-d17}, [r2], r0
   1a18c:	ldr	r0, [r2]
   1a190:	orr	r0, r0, #67108864	; 0x4000000
   1a194:	str	r0, [r2]
   1a198:	mov	r0, #0
   1a19c:	mvn	r2, #0
   1a1a0:	bl	19d24 <__assert_fail@plt+0x873c>
   1a1a4:	mov	sp, fp
   1a1a8:	pop	{fp, pc}
   1a1ac:	push	{fp, lr}
   1a1b0:	mov	fp, sp
   1a1b4:	sub	sp, sp, #48	; 0x30
   1a1b8:	mov	ip, r1
   1a1bc:	mov	r1, r0
   1a1c0:	movw	r0, #61928	; 0xf1e8
   1a1c4:	mov	r2, #32
   1a1c8:	movt	r0, #2
   1a1cc:	add	r3, r0, #16
   1a1d0:	vld1.64	{d16-d17}, [r0], r2
   1a1d4:	vld1.64	{d18-d19}, [r3]
   1a1d8:	vld1.64	{d20-d21}, [r0]
   1a1dc:	mov	r3, sp
   1a1e0:	add	r2, r3, #16
   1a1e4:	add	r0, r3, #32
   1a1e8:	vst1.64	{d18-d19}, [r2]
   1a1ec:	vst1.64	{d20-d21}, [r0]
   1a1f0:	mov	r0, #12
   1a1f4:	mov	r2, r3
   1a1f8:	vst1.64	{d16-d17}, [r2], r0
   1a1fc:	ldr	r0, [r2]
   1a200:	orr	r0, r0, #67108864	; 0x4000000
   1a204:	str	r0, [r2]
   1a208:	mov	r0, #0
   1a20c:	mov	r2, ip
   1a210:	bl	19d24 <__assert_fail@plt+0x873c>
   1a214:	mov	sp, fp
   1a218:	pop	{fp, pc}
   1a21c:	push	{r4, sl, fp, lr}
   1a220:	add	fp, sp, #8
   1a224:	sub	sp, sp, #96	; 0x60
   1a228:	vmov.i32	q8, #0	; 0x00000000
   1a22c:	mov	ip, r2
   1a230:	mov	r2, sp
   1a234:	mov	r4, #28
   1a238:	cmp	r1, #10
   1a23c:	mov	r3, r2
   1a240:	add	lr, r2, #16
   1a244:	vst1.64	{d16-d17}, [r3], r4
   1a248:	vst1.64	{d16-d17}, [lr]
   1a24c:	vst1.32	{d16-d17}, [r3]
   1a250:	beq	1a2a0 <__assert_fail@plt+0x8cb8>
   1a254:	vld1.64	{d16-d17}, [r2], r4
   1a258:	vld1.64	{d18-d19}, [lr]
   1a25c:	add	r3, sp, #48	; 0x30
   1a260:	vld1.32	{d20-d21}, [r2]
   1a264:	add	r2, r3, #20
   1a268:	add	r4, r3, #4
   1a26c:	vst1.32	{d18-d19}, [r2]
   1a270:	add	r2, r3, #32
   1a274:	vst1.32	{d16-d17}, [r4]
   1a278:	vst1.32	{d20-d21}, [r2]
   1a27c:	str	r1, [sp, #48]	; 0x30
   1a280:	mvn	r2, #0
   1a284:	ldr	r1, [sp, #60]	; 0x3c
   1a288:	orr	r1, r1, #67108864	; 0x4000000
   1a28c:	str	r1, [sp, #60]	; 0x3c
   1a290:	mov	r1, ip
   1a294:	bl	19d24 <__assert_fail@plt+0x873c>
   1a298:	sub	sp, fp, #8
   1a29c:	pop	{r4, sl, fp, pc}
   1a2a0:	bl	115c4 <abort@plt>
   1a2a4:	push	{r4, r5, r6, sl, fp, lr}
   1a2a8:	add	fp, sp, #16
   1a2ac:	sub	sp, sp, #48	; 0x30
   1a2b0:	mov	ip, r3
   1a2b4:	movw	r3, #61928	; 0xf1e8
   1a2b8:	mov	r6, #32
   1a2bc:	cmp	r1, #0
   1a2c0:	mov	r4, sp
   1a2c4:	movt	r3, #2
   1a2c8:	cmpne	r2, #0
   1a2cc:	add	r5, r4, #16
   1a2d0:	add	lr, r3, #16
   1a2d4:	vld1.64	{d16-d17}, [r3], r6
   1a2d8:	vld1.64	{d18-d19}, [lr]
   1a2dc:	vld1.64	{d20-d21}, [r3]
   1a2e0:	mov	r3, #10
   1a2e4:	vst1.64	{d16-d17}, [r4], r6
   1a2e8:	vst1.64	{d18-d19}, [r5]
   1a2ec:	vst1.64	{d20-d21}, [r4]
   1a2f0:	str	r3, [sp]
   1a2f4:	bne	1a2fc <__assert_fail@plt+0x8d14>
   1a2f8:	bl	115c4 <abort@plt>
   1a2fc:	str	r2, [sp, #44]	; 0x2c
   1a300:	str	r1, [sp, #40]	; 0x28
   1a304:	mov	r3, sp
   1a308:	mov	r1, ip
   1a30c:	mvn	r2, #0
   1a310:	bl	19d24 <__assert_fail@plt+0x873c>
   1a314:	sub	sp, fp, #16
   1a318:	pop	{r4, r5, r6, sl, fp, pc}
   1a31c:	push	{r4, r5, r6, sl, fp, lr}
   1a320:	add	fp, sp, #16
   1a324:	sub	sp, sp, #48	; 0x30
   1a328:	mov	lr, r3
   1a32c:	movw	r3, #61928	; 0xf1e8
   1a330:	mov	r6, #32
   1a334:	cmp	r1, #0
   1a338:	mov	r4, sp
   1a33c:	movt	r3, #2
   1a340:	cmpne	r2, #0
   1a344:	add	r5, r4, #16
   1a348:	add	ip, r3, #16
   1a34c:	vld1.64	{d16-d17}, [r3], r6
   1a350:	vld1.64	{d18-d19}, [ip]
   1a354:	vld1.64	{d20-d21}, [r3]
   1a358:	mov	r3, #10
   1a35c:	vst1.64	{d16-d17}, [r4], r6
   1a360:	vst1.64	{d18-d19}, [r5]
   1a364:	vst1.64	{d20-d21}, [r4]
   1a368:	str	r3, [sp]
   1a36c:	bne	1a374 <__assert_fail@plt+0x8d8c>
   1a370:	bl	115c4 <abort@plt>
   1a374:	ldr	ip, [fp, #8]
   1a378:	str	r2, [sp, #44]	; 0x2c
   1a37c:	str	r1, [sp, #40]	; 0x28
   1a380:	mov	r3, sp
   1a384:	mov	r1, lr
   1a388:	mov	r2, ip
   1a38c:	bl	19d24 <__assert_fail@plt+0x873c>
   1a390:	sub	sp, fp, #16
   1a394:	pop	{r4, r5, r6, sl, fp, pc}
   1a398:	push	{r4, sl, fp, lr}
   1a39c:	add	fp, sp, #8
   1a3a0:	sub	sp, sp, #48	; 0x30
   1a3a4:	movw	r3, #61928	; 0xf1e8
   1a3a8:	mov	lr, #32
   1a3ac:	mov	ip, r2
   1a3b0:	cmp	r0, #0
   1a3b4:	movt	r3, #2
   1a3b8:	cmpne	r1, #0
   1a3bc:	add	r2, r3, #16
   1a3c0:	vld1.64	{d16-d17}, [r3], lr
   1a3c4:	vld1.64	{d20-d21}, [r3]
   1a3c8:	vld1.64	{d18-d19}, [r2]
   1a3cc:	mov	r2, sp
   1a3d0:	add	r4, r2, #16
   1a3d4:	vst1.64	{d16-d17}, [r2], lr
   1a3d8:	vst1.64	{d20-d21}, [r2]
   1a3dc:	mov	r2, #10
   1a3e0:	vst1.64	{d18-d19}, [r4]
   1a3e4:	str	r2, [sp]
   1a3e8:	bne	1a3f0 <__assert_fail@plt+0x8e08>
   1a3ec:	bl	115c4 <abort@plt>
   1a3f0:	str	r1, [sp, #44]	; 0x2c
   1a3f4:	str	r0, [sp, #40]	; 0x28
   1a3f8:	mov	r3, sp
   1a3fc:	mov	r0, #0
   1a400:	mov	r1, ip
   1a404:	mvn	r2, #0
   1a408:	bl	19d24 <__assert_fail@plt+0x873c>
   1a40c:	sub	sp, fp, #8
   1a410:	pop	{r4, sl, fp, pc}
   1a414:	push	{r4, r5, fp, lr}
   1a418:	add	fp, sp, #8
   1a41c:	sub	sp, sp, #48	; 0x30
   1a420:	mov	ip, r3
   1a424:	movw	r3, #61928	; 0xf1e8
   1a428:	mov	r4, #32
   1a42c:	mov	lr, r2
   1a430:	cmp	r0, #0
   1a434:	movt	r3, #2
   1a438:	cmpne	r1, #0
   1a43c:	add	r2, r3, #16
   1a440:	vld1.64	{d16-d17}, [r3], r4
   1a444:	vld1.64	{d20-d21}, [r3]
   1a448:	vld1.64	{d18-d19}, [r2]
   1a44c:	mov	r2, sp
   1a450:	add	r5, r2, #16
   1a454:	vst1.64	{d16-d17}, [r2], r4
   1a458:	vst1.64	{d20-d21}, [r2]
   1a45c:	mov	r2, #10
   1a460:	vst1.64	{d18-d19}, [r5]
   1a464:	str	r2, [sp]
   1a468:	bne	1a470 <__assert_fail@plt+0x8e88>
   1a46c:	bl	115c4 <abort@plt>
   1a470:	str	r1, [sp, #44]	; 0x2c
   1a474:	str	r0, [sp, #40]	; 0x28
   1a478:	mov	r3, sp
   1a47c:	mov	r0, #0
   1a480:	mov	r1, lr
   1a484:	mov	r2, ip
   1a488:	bl	19d24 <__assert_fail@plt+0x873c>
   1a48c:	sub	sp, fp, #8
   1a490:	pop	{r4, r5, fp, pc}
   1a494:	movw	r3, #61808	; 0xf170
   1a498:	movt	r3, #2
   1a49c:	b	19d24 <__assert_fail@plt+0x873c>
   1a4a0:	movw	r3, #61808	; 0xf170
   1a4a4:	mov	r2, r1
   1a4a8:	mov	r1, r0
   1a4ac:	mov	r0, #0
   1a4b0:	movt	r3, #2
   1a4b4:	b	19d24 <__assert_fail@plt+0x873c>
   1a4b8:	movw	r3, #61808	; 0xf170
   1a4bc:	mvn	r2, #0
   1a4c0:	movt	r3, #2
   1a4c4:	b	19d24 <__assert_fail@plt+0x873c>
   1a4c8:	movw	r3, #61808	; 0xf170
   1a4cc:	mov	r1, r0
   1a4d0:	mov	r0, #0
   1a4d4:	mvn	r2, #0
   1a4d8:	movt	r3, #2
   1a4dc:	b	19d24 <__assert_fail@plt+0x873c>
   1a4e0:	push	{r4, r5, fp, lr}
   1a4e4:	add	fp, sp, #8
   1a4e8:	mov	r5, r0
   1a4ec:	mov	r4, r1
   1a4f0:	mov	r0, #0
   1a4f4:	mov	r2, #5
   1a4f8:	mov	r1, r5
   1a4fc:	bl	11348 <dcgettext@plt>
   1a500:	cmp	r0, r5
   1a504:	popne	{r4, r5, fp, pc}
   1a508:	bl	1c620 <__assert_fail@plt+0xb038>
   1a50c:	ldrb	r1, [r0]
   1a510:	and	r1, r1, #223	; 0xdf
   1a514:	cmp	r1, #71	; 0x47
   1a518:	beq	1a580 <__assert_fail@plt+0x8f98>
   1a51c:	cmp	r1, #85	; 0x55
   1a520:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a524:	ldrb	r1, [r0, #1]
   1a528:	and	r1, r1, #223	; 0xdf
   1a52c:	cmp	r1, #84	; 0x54
   1a530:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a534:	ldrb	r1, [r0, #2]
   1a538:	and	r1, r1, #223	; 0xdf
   1a53c:	cmp	r1, #70	; 0x46
   1a540:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a544:	ldrb	r1, [r0, #3]
   1a548:	cmp	r1, #45	; 0x2d
   1a54c:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a550:	ldrb	r1, [r0, #4]
   1a554:	cmp	r1, #56	; 0x38
   1a558:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a55c:	ldrb	r0, [r0, #5]
   1a560:	cmp	r0, #0
   1a564:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a568:	ldrb	r1, [r5]
   1a56c:	movw	r2, #57562	; 0xe0da
   1a570:	movw	r0, #57566	; 0xe0de
   1a574:	movt	r2, #1
   1a578:	movt	r0, #1
   1a57c:	b	1a608 <__assert_fail@plt+0x9020>
   1a580:	ldrb	r1, [r0, #1]
   1a584:	and	r1, r1, #223	; 0xdf
   1a588:	cmp	r1, #66	; 0x42
   1a58c:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a590:	ldrb	r1, [r0, #2]
   1a594:	cmp	r1, #49	; 0x31
   1a598:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a59c:	ldrb	r1, [r0, #3]
   1a5a0:	cmp	r1, #56	; 0x38
   1a5a4:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a5a8:	ldrb	r1, [r0, #4]
   1a5ac:	cmp	r1, #48	; 0x30
   1a5b0:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a5b4:	ldrb	r1, [r0, #5]
   1a5b8:	cmp	r1, #51	; 0x33
   1a5bc:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a5c0:	ldrb	r1, [r0, #6]
   1a5c4:	cmp	r1, #48	; 0x30
   1a5c8:	bne	1a5d8 <__assert_fail@plt+0x8ff0>
   1a5cc:	ldrb	r0, [r0, #7]
   1a5d0:	cmp	r0, #0
   1a5d4:	beq	1a5f4 <__assert_fail@plt+0x900c>
   1a5d8:	movw	r1, #57556	; 0xe0d4
   1a5dc:	movw	r0, #57560	; 0xe0d8
   1a5e0:	cmp	r4, #9
   1a5e4:	movt	r1, #1
   1a5e8:	movt	r0, #1
   1a5ec:	moveq	r0, r1
   1a5f0:	pop	{r4, r5, fp, pc}
   1a5f4:	ldrb	r1, [r5]
   1a5f8:	movw	r2, #57570	; 0xe0e2
   1a5fc:	movw	r0, #57574	; 0xe0e6
   1a600:	movt	r2, #1
   1a604:	movt	r0, #1
   1a608:	cmp	r1, #96	; 0x60
   1a60c:	moveq	r0, r2
   1a610:	pop	{r4, r5, fp, pc}
   1a614:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a618:	add	fp, sp, #24
   1a61c:	movw	r8, #0
   1a620:	mov	r6, r2
   1a624:	mov	r4, r1
   1a628:	mov	r5, r0
   1a62c:	movt	r8, #32752	; 0x7ff0
   1a630:	mov	r0, r5
   1a634:	mov	r1, r4
   1a638:	mov	r2, r6
   1a63c:	bl	112dc <read@plt>
   1a640:	mov	r7, r0
   1a644:	cmn	r0, #1
   1a648:	bgt	1a670 <__assert_fail@plt+0x9088>
   1a64c:	bl	114b0 <__errno_location@plt>
   1a650:	ldr	r0, [r0]
   1a654:	cmp	r0, #4
   1a658:	beq	1a630 <__assert_fail@plt+0x9048>
   1a65c:	cmp	r6, r8
   1a660:	bls	1a670 <__assert_fail@plt+0x9088>
   1a664:	cmp	r0, #22
   1a668:	mov	r6, r8
   1a66c:	beq	1a630 <__assert_fail@plt+0x9048>
   1a670:	mov	r0, r7
   1a674:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a678:	push	{r4, r5, r6, r7, fp, lr}
   1a67c:	add	fp, sp, #16
   1a680:	mov	r4, r0
   1a684:	cmp	r0, #2
   1a688:	bhi	1a6b8 <__assert_fail@plt+0x90d0>
   1a68c:	mov	r0, r4
   1a690:	bl	1c6f8 <__assert_fail@plt+0xb110>
   1a694:	mov	r5, r0
   1a698:	bl	114b0 <__errno_location@plt>
   1a69c:	ldr	r7, [r0]
   1a6a0:	mov	r6, r0
   1a6a4:	mov	r0, r4
   1a6a8:	bl	115d0 <close@plt>
   1a6ac:	mov	r0, r5
   1a6b0:	str	r7, [r6]
   1a6b4:	pop	{r4, r5, r6, r7, fp, pc}
   1a6b8:	mov	r0, r4
   1a6bc:	pop	{r4, r5, r6, r7, fp, pc}
   1a6c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a6c4:	add	fp, sp, #24
   1a6c8:	sub	sp, sp, #32
   1a6cc:	ldr	r6, [fp, #12]
   1a6d0:	ldr	r7, [fp, #8]
   1a6d4:	mov	r4, r2
   1a6d8:	mov	r8, r0
   1a6dc:	cmp	r1, #0
   1a6e0:	beq	1a708 <__assert_fail@plt+0x9120>
   1a6e4:	movw	r2, #57664	; 0xe140
   1a6e8:	mov	r5, r1
   1a6ec:	str	r3, [sp, #4]
   1a6f0:	str	r4, [sp]
   1a6f4:	mov	r0, r8
   1a6f8:	mov	r1, #1
   1a6fc:	movt	r2, #1
   1a700:	mov	r3, r5
   1a704:	b	1a720 <__assert_fail@plt+0x9138>
   1a708:	movw	r2, #57676	; 0xe14c
   1a70c:	str	r3, [sp]
   1a710:	mov	r0, r8
   1a714:	mov	r1, #1
   1a718:	mov	r3, r4
   1a71c:	movt	r2, #1
   1a720:	bl	114f8 <__fprintf_chk@plt>
   1a724:	movw	r1, #57683	; 0xe153
   1a728:	mov	r0, #0
   1a72c:	mov	r2, #5
   1a730:	movt	r1, #1
   1a734:	bl	11348 <dcgettext@plt>
   1a738:	movw	r2, #58401	; 0xe421
   1a73c:	mov	r3, r0
   1a740:	movw	r0, #2022	; 0x7e6
   1a744:	mov	r1, #1
   1a748:	movt	r2, #1
   1a74c:	str	r0, [sp]
   1a750:	mov	r0, r8
   1a754:	bl	114f8 <__fprintf_chk@plt>
   1a758:	movw	r4, #53997	; 0xd2ed
   1a75c:	mov	r1, r8
   1a760:	movt	r4, #1
   1a764:	mov	r0, r4
   1a768:	bl	112a0 <fputs_unlocked@plt>
   1a76c:	movw	r1, #57687	; 0xe157
   1a770:	mov	r0, #0
   1a774:	mov	r2, #5
   1a778:	movt	r1, #1
   1a77c:	bl	11348 <dcgettext@plt>
   1a780:	movw	r3, #57858	; 0xe202
   1a784:	mov	r2, r0
   1a788:	mov	r0, r8
   1a78c:	mov	r1, #1
   1a790:	movt	r3, #1
   1a794:	bl	114f8 <__fprintf_chk@plt>
   1a798:	mov	r0, r4
   1a79c:	mov	r1, r8
   1a7a0:	bl	112a0 <fputs_unlocked@plt>
   1a7a4:	cmp	r6, #9
   1a7a8:	bhi	1a7e4 <__assert_fail@plt+0x91fc>
   1a7ac:	add	r0, pc, #0
   1a7b0:	ldr	pc, [r0, r6, lsl #2]
   1a7b4:	ldrdeq	sl, [r1], -ip
   1a7b8:	strdeq	sl, [r1], -r0
   1a7bc:	andeq	sl, r1, r0, lsr #16
   1a7c0:	andeq	sl, r1, r8, asr #16
   1a7c4:	andeq	sl, r1, r0, ror r8
   1a7c8:	muleq	r1, r8, r8
   1a7cc:	andeq	sl, r1, r0, asr #17
   1a7d0:	strdeq	sl, [r1], -r8
   1a7d4:	muleq	r1, r8, r9
   1a7d8:	andeq	sl, r1, r0, asr #18
   1a7dc:	sub	sp, fp, #24
   1a7e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a7e4:	movw	r1, #58211	; 0xe363
   1a7e8:	movt	r1, #1
   1a7ec:	b	1a948 <__assert_fail@plt+0x9360>
   1a7f0:	movw	r1, #57892	; 0xe224
   1a7f4:	mov	r0, #0
   1a7f8:	mov	r2, #5
   1a7fc:	movt	r1, #1
   1a800:	bl	11348 <dcgettext@plt>
   1a804:	ldr	r3, [r7]
   1a808:	mov	r2, r0
   1a80c:	mov	r0, r8
   1a810:	mov	r1, #1
   1a814:	sub	sp, fp, #24
   1a818:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a81c:	b	114f8 <__fprintf_chk@plt>
   1a820:	movw	r1, #57908	; 0xe234
   1a824:	mov	r0, #0
   1a828:	mov	r2, #5
   1a82c:	movt	r1, #1
   1a830:	bl	11348 <dcgettext@plt>
   1a834:	mov	r2, r0
   1a838:	ldr	r3, [r7]
   1a83c:	ldr	r0, [r7, #4]
   1a840:	str	r0, [sp]
   1a844:	b	1a934 <__assert_fail@plt+0x934c>
   1a848:	movw	r1, #57931	; 0xe24b
   1a84c:	mov	r0, #0
   1a850:	mov	r2, #5
   1a854:	movt	r1, #1
   1a858:	bl	11348 <dcgettext@plt>
   1a85c:	mov	r2, r0
   1a860:	ldr	r3, [r7]
   1a864:	ldmib	r7, {r0, r1}
   1a868:	stm	sp, {r0, r1}
   1a86c:	b	1a934 <__assert_fail@plt+0x934c>
   1a870:	movw	r1, #57959	; 0xe267
   1a874:	mov	r0, #0
   1a878:	mov	r2, #5
   1a87c:	movt	r1, #1
   1a880:	bl	11348 <dcgettext@plt>
   1a884:	ldr	r3, [r7]
   1a888:	mov	r2, r0
   1a88c:	ldmib	r7, {r0, r1, r7}
   1a890:	stm	sp, {r0, r1, r7}
   1a894:	b	1a934 <__assert_fail@plt+0x934c>
   1a898:	movw	r1, #57991	; 0xe287
   1a89c:	mov	r0, #0
   1a8a0:	mov	r2, #5
   1a8a4:	movt	r1, #1
   1a8a8:	bl	11348 <dcgettext@plt>
   1a8ac:	ldr	r3, [r7]
   1a8b0:	mov	r2, r0
   1a8b4:	ldmib	r7, {r0, r1, r6, r7}
   1a8b8:	stm	sp, {r0, r1, r6, r7}
   1a8bc:	b	1a934 <__assert_fail@plt+0x934c>
   1a8c0:	movw	r1, #58027	; 0xe2ab
   1a8c4:	mov	r0, #0
   1a8c8:	mov	r2, #5
   1a8cc:	movt	r1, #1
   1a8d0:	bl	11348 <dcgettext@plt>
   1a8d4:	mov	r2, r0
   1a8d8:	ldr	r3, [r7]
   1a8dc:	ldmib	r7, {r0, r1, r6}
   1a8e0:	ldr	r5, [r7, #16]
   1a8e4:	ldr	r7, [r7, #20]
   1a8e8:	stm	sp, {r0, r1, r6}
   1a8ec:	str	r5, [sp, #12]
   1a8f0:	str	r7, [sp, #16]
   1a8f4:	b	1a934 <__assert_fail@plt+0x934c>
   1a8f8:	movw	r1, #58067	; 0xe2d3
   1a8fc:	mov	r0, #0
   1a900:	mov	r2, #5
   1a904:	movt	r1, #1
   1a908:	bl	11348 <dcgettext@plt>
   1a90c:	mov	r2, r0
   1a910:	ldr	r3, [r7]
   1a914:	ldmib	r7, {r0, r1, r6}
   1a918:	ldr	r5, [r7, #16]
   1a91c:	ldr	r4, [r7, #20]
   1a920:	ldr	r7, [r7, #24]
   1a924:	stm	sp, {r0, r1, r6}
   1a928:	str	r5, [sp, #12]
   1a92c:	str	r4, [sp, #16]
   1a930:	str	r7, [sp, #20]
   1a934:	mov	r0, r8
   1a938:	mov	r1, #1
   1a93c:	b	1a9e8 <__assert_fail@plt+0x9400>
   1a940:	movw	r1, #58159	; 0xe32f
   1a944:	movt	r1, #1
   1a948:	mov	r0, #0
   1a94c:	mov	r2, #5
   1a950:	bl	11348 <dcgettext@plt>
   1a954:	mov	ip, r0
   1a958:	ldr	r3, [r7]
   1a95c:	ldr	r0, [r7, #4]
   1a960:	ldr	r1, [r7, #8]
   1a964:	ldr	r6, [r7, #12]
   1a968:	ldr	r5, [r7, #16]
   1a96c:	ldr	r4, [r7, #20]
   1a970:	ldr	r2, [r7, #24]
   1a974:	ldr	lr, [r7, #28]
   1a978:	ldr	r7, [r7, #32]
   1a97c:	stm	sp, {r0, r1, r6}
   1a980:	str	r5, [sp, #12]
   1a984:	str	r4, [sp, #16]
   1a988:	str	r2, [sp, #20]
   1a98c:	str	lr, [sp, #24]
   1a990:	str	r7, [sp, #28]
   1a994:	b	1a9dc <__assert_fail@plt+0x93f4>
   1a998:	movw	r1, #58111	; 0xe2ff
   1a99c:	mov	r0, #0
   1a9a0:	mov	r2, #5
   1a9a4:	movt	r1, #1
   1a9a8:	bl	11348 <dcgettext@plt>
   1a9ac:	mov	ip, r0
   1a9b0:	ldr	r3, [r7]
   1a9b4:	ldmib	r7, {r0, r1, r6}
   1a9b8:	ldr	r5, [r7, #16]
   1a9bc:	ldr	r4, [r7, #20]
   1a9c0:	ldr	r2, [r7, #24]
   1a9c4:	ldr	r7, [r7, #28]
   1a9c8:	stm	sp, {r0, r1, r6}
   1a9cc:	str	r5, [sp, #12]
   1a9d0:	str	r4, [sp, #16]
   1a9d4:	str	r2, [sp, #20]
   1a9d8:	str	r7, [sp, #24]
   1a9dc:	mov	r0, r8
   1a9e0:	mov	r1, #1
   1a9e4:	mov	r2, ip
   1a9e8:	bl	114f8 <__fprintf_chk@plt>
   1a9ec:	sub	sp, fp, #24
   1a9f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a9f4:	push	{r4, sl, fp, lr}
   1a9f8:	add	fp, sp, #8
   1a9fc:	sub	sp, sp, #8
   1aa00:	ldr	ip, [fp, #8]
   1aa04:	mov	lr, #0
   1aa08:	ldr	r4, [ip, lr, lsl #2]
   1aa0c:	add	lr, lr, #1
   1aa10:	cmp	r4, #0
   1aa14:	bne	1aa08 <__assert_fail@plt+0x9420>
   1aa18:	sub	r4, lr, #1
   1aa1c:	str	ip, [sp]
   1aa20:	str	r4, [sp, #4]
   1aa24:	bl	1a6c0 <__assert_fail@plt+0x90d8>
   1aa28:	sub	sp, fp, #8
   1aa2c:	pop	{r4, sl, fp, pc}
   1aa30:	push	{fp, lr}
   1aa34:	mov	fp, sp
   1aa38:	sub	sp, sp, #48	; 0x30
   1aa3c:	ldr	ip, [fp, #8]
   1aa40:	ldr	lr, [ip]
   1aa44:	cmp	lr, #0
   1aa48:	str	lr, [sp, #8]
   1aa4c:	beq	1aae8 <__assert_fail@plt+0x9500>
   1aa50:	ldr	lr, [ip, #4]
   1aa54:	cmp	lr, #0
   1aa58:	str	lr, [sp, #12]
   1aa5c:	beq	1aaf0 <__assert_fail@plt+0x9508>
   1aa60:	ldr	lr, [ip, #8]
   1aa64:	cmp	lr, #0
   1aa68:	str	lr, [sp, #16]
   1aa6c:	beq	1aaf8 <__assert_fail@plt+0x9510>
   1aa70:	ldr	lr, [ip, #12]
   1aa74:	cmp	lr, #0
   1aa78:	str	lr, [sp, #20]
   1aa7c:	beq	1ab00 <__assert_fail@plt+0x9518>
   1aa80:	ldr	lr, [ip, #16]
   1aa84:	cmp	lr, #0
   1aa88:	str	lr, [sp, #24]
   1aa8c:	beq	1ab08 <__assert_fail@plt+0x9520>
   1aa90:	ldr	lr, [ip, #20]
   1aa94:	cmp	lr, #0
   1aa98:	str	lr, [sp, #28]
   1aa9c:	beq	1ab10 <__assert_fail@plt+0x9528>
   1aaa0:	ldr	lr, [ip, #24]
   1aaa4:	cmp	lr, #0
   1aaa8:	str	lr, [sp, #32]
   1aaac:	beq	1ab18 <__assert_fail@plt+0x9530>
   1aab0:	ldr	lr, [ip, #28]
   1aab4:	cmp	lr, #0
   1aab8:	str	lr, [sp, #36]	; 0x24
   1aabc:	beq	1ab20 <__assert_fail@plt+0x9538>
   1aac0:	ldr	lr, [ip, #32]
   1aac4:	cmp	lr, #0
   1aac8:	str	lr, [sp, #40]	; 0x28
   1aacc:	beq	1ab28 <__assert_fail@plt+0x9540>
   1aad0:	ldr	lr, [ip, #36]	; 0x24
   1aad4:	mov	ip, #10
   1aad8:	cmp	lr, #0
   1aadc:	str	lr, [sp, #44]	; 0x2c
   1aae0:	movweq	ip, #9
   1aae4:	b	1ab2c <__assert_fail@plt+0x9544>
   1aae8:	mov	ip, #0
   1aaec:	b	1ab2c <__assert_fail@plt+0x9544>
   1aaf0:	mov	ip, #1
   1aaf4:	b	1ab2c <__assert_fail@plt+0x9544>
   1aaf8:	mov	ip, #2
   1aafc:	b	1ab2c <__assert_fail@plt+0x9544>
   1ab00:	mov	ip, #3
   1ab04:	b	1ab2c <__assert_fail@plt+0x9544>
   1ab08:	mov	ip, #4
   1ab0c:	b	1ab2c <__assert_fail@plt+0x9544>
   1ab10:	mov	ip, #5
   1ab14:	b	1ab2c <__assert_fail@plt+0x9544>
   1ab18:	mov	ip, #6
   1ab1c:	b	1ab2c <__assert_fail@plt+0x9544>
   1ab20:	mov	ip, #7
   1ab24:	b	1ab2c <__assert_fail@plt+0x9544>
   1ab28:	mov	ip, #8
   1ab2c:	add	lr, sp, #8
   1ab30:	str	ip, [sp, #4]
   1ab34:	str	lr, [sp]
   1ab38:	bl	1a6c0 <__assert_fail@plt+0x90d8>
   1ab3c:	mov	sp, fp
   1ab40:	pop	{fp, pc}
   1ab44:	push	{fp, lr}
   1ab48:	mov	fp, sp
   1ab4c:	sub	sp, sp, #56	; 0x38
   1ab50:	add	ip, fp, #8
   1ab54:	str	ip, [sp, #12]
   1ab58:	ldr	lr, [fp, #8]
   1ab5c:	cmp	lr, #0
   1ab60:	str	lr, [sp, #16]
   1ab64:	beq	1ac00 <__assert_fail@plt+0x9618>
   1ab68:	ldr	lr, [ip, #4]
   1ab6c:	cmp	lr, #0
   1ab70:	str	lr, [sp, #20]
   1ab74:	beq	1ac08 <__assert_fail@plt+0x9620>
   1ab78:	ldr	lr, [ip, #8]
   1ab7c:	cmp	lr, #0
   1ab80:	str	lr, [sp, #24]
   1ab84:	beq	1ac10 <__assert_fail@plt+0x9628>
   1ab88:	ldr	lr, [ip, #12]
   1ab8c:	cmp	lr, #0
   1ab90:	str	lr, [sp, #28]
   1ab94:	beq	1ac18 <__assert_fail@plt+0x9630>
   1ab98:	ldr	lr, [ip, #16]
   1ab9c:	cmp	lr, #0
   1aba0:	str	lr, [sp, #32]
   1aba4:	beq	1ac20 <__assert_fail@plt+0x9638>
   1aba8:	ldr	lr, [ip, #20]
   1abac:	cmp	lr, #0
   1abb0:	str	lr, [sp, #36]	; 0x24
   1abb4:	beq	1ac28 <__assert_fail@plt+0x9640>
   1abb8:	ldr	lr, [ip, #24]
   1abbc:	cmp	lr, #0
   1abc0:	str	lr, [sp, #40]	; 0x28
   1abc4:	beq	1ac30 <__assert_fail@plt+0x9648>
   1abc8:	ldr	lr, [ip, #28]
   1abcc:	cmp	lr, #0
   1abd0:	str	lr, [sp, #44]	; 0x2c
   1abd4:	beq	1ac38 <__assert_fail@plt+0x9650>
   1abd8:	ldr	lr, [ip, #32]
   1abdc:	cmp	lr, #0
   1abe0:	str	lr, [sp, #48]	; 0x30
   1abe4:	beq	1ac40 <__assert_fail@plt+0x9658>
   1abe8:	ldr	lr, [ip, #36]	; 0x24
   1abec:	mov	ip, #10
   1abf0:	cmp	lr, #0
   1abf4:	str	lr, [sp, #52]	; 0x34
   1abf8:	movweq	ip, #9
   1abfc:	b	1ac44 <__assert_fail@plt+0x965c>
   1ac00:	mov	ip, #0
   1ac04:	b	1ac44 <__assert_fail@plt+0x965c>
   1ac08:	mov	ip, #1
   1ac0c:	b	1ac44 <__assert_fail@plt+0x965c>
   1ac10:	mov	ip, #2
   1ac14:	b	1ac44 <__assert_fail@plt+0x965c>
   1ac18:	mov	ip, #3
   1ac1c:	b	1ac44 <__assert_fail@plt+0x965c>
   1ac20:	mov	ip, #4
   1ac24:	b	1ac44 <__assert_fail@plt+0x965c>
   1ac28:	mov	ip, #5
   1ac2c:	b	1ac44 <__assert_fail@plt+0x965c>
   1ac30:	mov	ip, #6
   1ac34:	b	1ac44 <__assert_fail@plt+0x965c>
   1ac38:	mov	ip, #7
   1ac3c:	b	1ac44 <__assert_fail@plt+0x965c>
   1ac40:	mov	ip, #8
   1ac44:	add	lr, sp, #16
   1ac48:	str	ip, [sp, #4]
   1ac4c:	str	lr, [sp]
   1ac50:	bl	1a6c0 <__assert_fail@plt+0x90d8>
   1ac54:	mov	sp, fp
   1ac58:	pop	{fp, pc}
   1ac5c:	push	{fp, lr}
   1ac60:	mov	fp, sp
   1ac64:	movw	r0, #61876	; 0xf1b4
   1ac68:	movt	r0, #2
   1ac6c:	ldr	r1, [r0]
   1ac70:	movw	r0, #53997	; 0xd2ed
   1ac74:	movt	r0, #1
   1ac78:	bl	112a0 <fputs_unlocked@plt>
   1ac7c:	movw	r1, #58271	; 0xe39f
   1ac80:	mov	r0, #0
   1ac84:	mov	r2, #5
   1ac88:	movt	r1, #1
   1ac8c:	bl	11348 <dcgettext@plt>
   1ac90:	movw	r2, #58291	; 0xe3b3
   1ac94:	mov	r1, r0
   1ac98:	mov	r0, #1
   1ac9c:	movt	r2, #1
   1aca0:	bl	114d4 <__printf_chk@plt>
   1aca4:	movw	r1, #58313	; 0xe3c9
   1aca8:	mov	r0, #0
   1acac:	mov	r2, #5
   1acb0:	movt	r1, #1
   1acb4:	bl	11348 <dcgettext@plt>
   1acb8:	movw	r2, #54874	; 0xd65a
   1acbc:	movw	r3, #54888	; 0xd668
   1acc0:	mov	r1, r0
   1acc4:	mov	r0, #1
   1acc8:	movt	r2, #1
   1accc:	movt	r3, #1
   1acd0:	bl	114d4 <__printf_chk@plt>
   1acd4:	movw	r1, #58333	; 0xe3dd
   1acd8:	mov	r0, #0
   1acdc:	mov	r2, #5
   1ace0:	movt	r1, #1
   1ace4:	bl	11348 <dcgettext@plt>
   1ace8:	movw	r2, #58372	; 0xe404
   1acec:	mov	r1, r0
   1acf0:	mov	r0, #1
   1acf4:	movt	r2, #1
   1acf8:	pop	{fp, lr}
   1acfc:	b	114d4 <__printf_chk@plt>
   1ad00:	push	{r4, r5, r6, sl, fp, lr}
   1ad04:	add	fp, sp, #16
   1ad08:	mov	r4, r2
   1ad0c:	mov	r5, r1
   1ad10:	mov	r6, r0
   1ad14:	bl	1c6bc <__assert_fail@plt+0xb0d4>
   1ad18:	cmp	r0, #0
   1ad1c:	popne	{r4, r5, r6, sl, fp, pc}
   1ad20:	cmp	r6, #0
   1ad24:	beq	1ad38 <__assert_fail@plt+0x9750>
   1ad28:	cmp	r5, #0
   1ad2c:	cmpne	r4, #0
   1ad30:	bne	1ad38 <__assert_fail@plt+0x9750>
   1ad34:	pop	{r4, r5, r6, sl, fp, pc}
   1ad38:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1ad3c:	push	{r4, r5, r6, sl, fp, lr}
   1ad40:	add	fp, sp, #16
   1ad44:	mov	r4, r2
   1ad48:	mov	r5, r1
   1ad4c:	mov	r6, r0
   1ad50:	bl	1c6bc <__assert_fail@plt+0xb0d4>
   1ad54:	cmp	r0, #0
   1ad58:	popne	{r4, r5, r6, sl, fp, pc}
   1ad5c:	cmp	r6, #0
   1ad60:	beq	1ad74 <__assert_fail@plt+0x978c>
   1ad64:	cmp	r5, #0
   1ad68:	cmpne	r4, #0
   1ad6c:	bne	1ad74 <__assert_fail@plt+0x978c>
   1ad70:	pop	{r4, r5, r6, sl, fp, pc}
   1ad74:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1ad78:	push	{fp, lr}
   1ad7c:	mov	fp, sp
   1ad80:	bl	1c244 <__assert_fail@plt+0xac5c>
   1ad84:	cmp	r0, #0
   1ad88:	popne	{fp, pc}
   1ad8c:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1ad90:	push	{fp, lr}
   1ad94:	mov	fp, sp
   1ad98:	bl	1c244 <__assert_fail@plt+0xac5c>
   1ad9c:	cmp	r0, #0
   1ada0:	popne	{fp, pc}
   1ada4:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1ada8:	push	{fp, lr}
   1adac:	mov	fp, sp
   1adb0:	bl	1c244 <__assert_fail@plt+0xac5c>
   1adb4:	cmp	r0, #0
   1adb8:	popne	{fp, pc}
   1adbc:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1adc0:	push	{r4, r5, fp, lr}
   1adc4:	add	fp, sp, #8
   1adc8:	mov	r4, r1
   1adcc:	mov	r5, r0
   1add0:	bl	1c274 <__assert_fail@plt+0xac8c>
   1add4:	cmp	r0, #0
   1add8:	popne	{r4, r5, fp, pc}
   1addc:	cmp	r5, #0
   1ade0:	beq	1adf0 <__assert_fail@plt+0x9808>
   1ade4:	cmp	r4, #0
   1ade8:	bne	1adf0 <__assert_fail@plt+0x9808>
   1adec:	pop	{r4, r5, fp, pc}
   1adf0:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1adf4:	push	{fp, lr}
   1adf8:	mov	fp, sp
   1adfc:	cmp	r1, #0
   1ae00:	orreq	r1, r1, #1
   1ae04:	bl	1c274 <__assert_fail@plt+0xac8c>
   1ae08:	cmp	r0, #0
   1ae0c:	popne	{fp, pc}
   1ae10:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1ae14:	push	{fp, lr}
   1ae18:	mov	fp, sp
   1ae1c:	clz	r3, r2
   1ae20:	lsr	ip, r3, #5
   1ae24:	clz	r3, r1
   1ae28:	lsr	r3, r3, #5
   1ae2c:	orrs	r3, r3, ip
   1ae30:	movwne	r1, #1
   1ae34:	movwne	r2, #1
   1ae38:	bl	1c6bc <__assert_fail@plt+0xb0d4>
   1ae3c:	cmp	r0, #0
   1ae40:	popne	{fp, pc}
   1ae44:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1ae48:	push	{fp, lr}
   1ae4c:	mov	fp, sp
   1ae50:	mov	r2, r1
   1ae54:	mov	r1, r0
   1ae58:	mov	r0, #0
   1ae5c:	bl	1c6bc <__assert_fail@plt+0xb0d4>
   1ae60:	cmp	r0, #0
   1ae64:	popne	{fp, pc}
   1ae68:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1ae6c:	push	{fp, lr}
   1ae70:	mov	fp, sp
   1ae74:	mov	r2, r1
   1ae78:	mov	r1, r0
   1ae7c:	clz	r0, r2
   1ae80:	clz	r3, r1
   1ae84:	lsr	r0, r0, #5
   1ae88:	lsr	r3, r3, #5
   1ae8c:	orrs	r0, r3, r0
   1ae90:	mov	r0, #0
   1ae94:	movwne	r1, #1
   1ae98:	movwne	r2, #1
   1ae9c:	bl	1c6bc <__assert_fail@plt+0xb0d4>
   1aea0:	cmp	r0, #0
   1aea4:	popne	{fp, pc}
   1aea8:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1aeac:	push	{r4, r5, r6, sl, fp, lr}
   1aeb0:	add	fp, sp, #16
   1aeb4:	ldr	r5, [r1]
   1aeb8:	mov	r4, r1
   1aebc:	mov	r6, r0
   1aec0:	cmp	r0, #0
   1aec4:	beq	1aedc <__assert_fail@plt+0x98f4>
   1aec8:	mov	r0, #1
   1aecc:	add	r0, r0, r5, lsr #1
   1aed0:	adds	r5, r5, r0
   1aed4:	bcc	1aee4 <__assert_fail@plt+0x98fc>
   1aed8:	b	1af20 <__assert_fail@plt+0x9938>
   1aedc:	cmp	r5, #0
   1aee0:	movweq	r5, #64	; 0x40
   1aee4:	mov	r0, r6
   1aee8:	mov	r1, r5
   1aeec:	mov	r2, #1
   1aef0:	bl	1c6bc <__assert_fail@plt+0xb0d4>
   1aef4:	cmp	r5, #0
   1aef8:	mov	r1, r5
   1aefc:	movwne	r1, #1
   1af00:	cmp	r0, #0
   1af04:	bne	1af18 <__assert_fail@plt+0x9930>
   1af08:	clz	r2, r6
   1af0c:	lsr	r2, r2, #5
   1af10:	orrs	r1, r2, r1
   1af14:	bne	1af20 <__assert_fail@plt+0x9938>
   1af18:	str	r5, [r4]
   1af1c:	pop	{r4, r5, r6, sl, fp, pc}
   1af20:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1af24:	push	{r4, r5, r6, r7, fp, lr}
   1af28:	add	fp, sp, #16
   1af2c:	ldr	r5, [r1]
   1af30:	mov	r6, r2
   1af34:	mov	r4, r1
   1af38:	mov	r7, r0
   1af3c:	cmp	r0, #0
   1af40:	beq	1af58 <__assert_fail@plt+0x9970>
   1af44:	mov	r0, #1
   1af48:	add	r0, r0, r5, lsr #1
   1af4c:	adds	r5, r5, r0
   1af50:	bcc	1af70 <__assert_fail@plt+0x9988>
   1af54:	b	1afa4 <__assert_fail@plt+0x99bc>
   1af58:	cmp	r5, #0
   1af5c:	bne	1af70 <__assert_fail@plt+0x9988>
   1af60:	mov	r0, #64	; 0x40
   1af64:	cmp	r6, #64	; 0x40
   1af68:	udiv	r5, r0, r6
   1af6c:	addhi	r5, r5, #1
   1af70:	mov	r0, r7
   1af74:	mov	r1, r5
   1af78:	mov	r2, r6
   1af7c:	bl	1c6bc <__assert_fail@plt+0xb0d4>
   1af80:	cmp	r0, #0
   1af84:	bne	1af9c <__assert_fail@plt+0x99b4>
   1af88:	cmp	r7, #0
   1af8c:	beq	1afa4 <__assert_fail@plt+0x99bc>
   1af90:	cmp	r6, #0
   1af94:	cmpne	r5, #0
   1af98:	bne	1afa4 <__assert_fail@plt+0x99bc>
   1af9c:	str	r5, [r4]
   1afa0:	pop	{r4, r5, r6, r7, fp, pc}
   1afa4:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1afa8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1afac:	add	fp, sp, #24
   1afb0:	mov	r8, r1
   1afb4:	ldr	r1, [r1]
   1afb8:	mov	r5, r0
   1afbc:	add	r0, r1, r1, asr #1
   1afc0:	cmp	r0, r1
   1afc4:	mvnvs	r0, #-2147483648	; 0x80000000
   1afc8:	cmp	r0, r3
   1afcc:	mov	r7, r0
   1afd0:	movgt	r7, r3
   1afd4:	cmn	r3, #1
   1afd8:	movle	r7, r0
   1afdc:	ldr	r0, [fp, #8]
   1afe0:	cmn	r0, #1
   1afe4:	ble	1b00c <__assert_fail@plt+0x9a24>
   1afe8:	cmp	r0, #0
   1afec:	beq	1b060 <__assert_fail@plt+0x9a78>
   1aff0:	cmn	r7, #1
   1aff4:	ble	1b034 <__assert_fail@plt+0x9a4c>
   1aff8:	mvn	r4, #-2147483648	; 0x80000000
   1affc:	udiv	r6, r4, r0
   1b000:	cmp	r6, r7
   1b004:	bge	1b060 <__assert_fail@plt+0x9a78>
   1b008:	b	1b070 <__assert_fail@plt+0x9a88>
   1b00c:	cmn	r7, #1
   1b010:	ble	1b050 <__assert_fail@plt+0x9a68>
   1b014:	cmn	r0, #1
   1b018:	beq	1b060 <__assert_fail@plt+0x9a78>
   1b01c:	mov	r6, #-2147483648	; 0x80000000
   1b020:	mvn	r4, #-2147483648	; 0x80000000
   1b024:	sdiv	r6, r6, r0
   1b028:	cmp	r6, r7
   1b02c:	bge	1b060 <__assert_fail@plt+0x9a78>
   1b030:	b	1b070 <__assert_fail@plt+0x9a88>
   1b034:	beq	1b060 <__assert_fail@plt+0x9a78>
   1b038:	mov	r6, #-2147483648	; 0x80000000
   1b03c:	mvn	r4, #-2147483648	; 0x80000000
   1b040:	sdiv	r6, r6, r7
   1b044:	cmp	r6, r0
   1b048:	bge	1b060 <__assert_fail@plt+0x9a78>
   1b04c:	b	1b070 <__assert_fail@plt+0x9a88>
   1b050:	mvn	r4, #-2147483648	; 0x80000000
   1b054:	sdiv	r6, r4, r0
   1b058:	cmp	r7, r6
   1b05c:	blt	1b070 <__assert_fail@plt+0x9a88>
   1b060:	mul	r6, r7, r0
   1b064:	mov	r4, #64	; 0x40
   1b068:	cmp	r6, #63	; 0x3f
   1b06c:	bgt	1b078 <__assert_fail@plt+0x9a90>
   1b070:	sdiv	r7, r4, r0
   1b074:	mul	r6, r7, r0
   1b078:	cmp	r5, #0
   1b07c:	moveq	r4, #0
   1b080:	streq	r4, [r8]
   1b084:	sub	r4, r7, r1
   1b088:	cmp	r4, r2
   1b08c:	bge	1b138 <__assert_fail@plt+0x9b50>
   1b090:	add	r7, r1, r2
   1b094:	mov	r6, #0
   1b098:	mov	r2, #0
   1b09c:	cmp	r7, r3
   1b0a0:	movwgt	r6, #1
   1b0a4:	cmn	r3, #1
   1b0a8:	movwgt	r2, #1
   1b0ac:	cmp	r7, r1
   1b0b0:	bvs	1b16c <__assert_fail@plt+0x9b84>
   1b0b4:	ands	r1, r2, r6
   1b0b8:	bne	1b16c <__assert_fail@plt+0x9b84>
   1b0bc:	cmn	r0, #1
   1b0c0:	ble	1b0e8 <__assert_fail@plt+0x9b00>
   1b0c4:	cmp	r0, #0
   1b0c8:	beq	1b134 <__assert_fail@plt+0x9b4c>
   1b0cc:	cmn	r7, #1
   1b0d0:	ble	1b10c <__assert_fail@plt+0x9b24>
   1b0d4:	mvn	r1, #-2147483648	; 0x80000000
   1b0d8:	udiv	r1, r1, r0
   1b0dc:	cmp	r1, r7
   1b0e0:	bge	1b134 <__assert_fail@plt+0x9b4c>
   1b0e4:	b	1b16c <__assert_fail@plt+0x9b84>
   1b0e8:	cmn	r7, #1
   1b0ec:	ble	1b124 <__assert_fail@plt+0x9b3c>
   1b0f0:	cmn	r0, #1
   1b0f4:	beq	1b134 <__assert_fail@plt+0x9b4c>
   1b0f8:	mov	r1, #-2147483648	; 0x80000000
   1b0fc:	sdiv	r1, r1, r0
   1b100:	cmp	r1, r7
   1b104:	bge	1b134 <__assert_fail@plt+0x9b4c>
   1b108:	b	1b16c <__assert_fail@plt+0x9b84>
   1b10c:	beq	1b134 <__assert_fail@plt+0x9b4c>
   1b110:	mov	r1, #-2147483648	; 0x80000000
   1b114:	sdiv	r1, r1, r7
   1b118:	cmp	r1, r0
   1b11c:	bge	1b134 <__assert_fail@plt+0x9b4c>
   1b120:	b	1b16c <__assert_fail@plt+0x9b84>
   1b124:	mvn	r1, #-2147483648	; 0x80000000
   1b128:	sdiv	r1, r1, r0
   1b12c:	cmp	r7, r1
   1b130:	blt	1b16c <__assert_fail@plt+0x9b84>
   1b134:	mul	r6, r7, r0
   1b138:	mov	r0, r5
   1b13c:	mov	r1, r6
   1b140:	bl	1c274 <__assert_fail@plt+0xac8c>
   1b144:	cmp	r6, #0
   1b148:	movwne	r6, #1
   1b14c:	cmp	r0, #0
   1b150:	bne	1b164 <__assert_fail@plt+0x9b7c>
   1b154:	clz	r1, r5
   1b158:	lsr	r1, r1, #5
   1b15c:	orrs	r1, r1, r6
   1b160:	bne	1b16c <__assert_fail@plt+0x9b84>
   1b164:	str	r7, [r8]
   1b168:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b16c:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1b170:	push	{fp, lr}
   1b174:	mov	fp, sp
   1b178:	mov	r1, #1
   1b17c:	bl	1c1f0 <__assert_fail@plt+0xac08>
   1b180:	cmp	r0, #0
   1b184:	popne	{fp, pc}
   1b188:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1b18c:	push	{fp, lr}
   1b190:	mov	fp, sp
   1b194:	bl	1c1f0 <__assert_fail@plt+0xac08>
   1b198:	cmp	r0, #0
   1b19c:	popne	{fp, pc}
   1b1a0:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1b1a4:	push	{fp, lr}
   1b1a8:	mov	fp, sp
   1b1ac:	mov	r1, #1
   1b1b0:	bl	1c1f0 <__assert_fail@plt+0xac08>
   1b1b4:	cmp	r0, #0
   1b1b8:	popne	{fp, pc}
   1b1bc:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1b1c0:	push	{fp, lr}
   1b1c4:	mov	fp, sp
   1b1c8:	bl	1c1f0 <__assert_fail@plt+0xac08>
   1b1cc:	cmp	r0, #0
   1b1d0:	popne	{fp, pc}
   1b1d4:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1b1d8:	push	{r4, r5, fp, lr}
   1b1dc:	add	fp, sp, #8
   1b1e0:	mov	r5, r0
   1b1e4:	mov	r0, r1
   1b1e8:	mov	r4, r1
   1b1ec:	bl	1c244 <__assert_fail@plt+0xac5c>
   1b1f0:	cmp	r0, #0
   1b1f4:	beq	1b208 <__assert_fail@plt+0x9c20>
   1b1f8:	mov	r1, r5
   1b1fc:	mov	r2, r4
   1b200:	pop	{r4, r5, fp, lr}
   1b204:	b	11318 <memcpy@plt>
   1b208:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1b20c:	push	{r4, r5, fp, lr}
   1b210:	add	fp, sp, #8
   1b214:	mov	r5, r0
   1b218:	mov	r0, r1
   1b21c:	mov	r4, r1
   1b220:	bl	1c244 <__assert_fail@plt+0xac5c>
   1b224:	cmp	r0, #0
   1b228:	beq	1b23c <__assert_fail@plt+0x9c54>
   1b22c:	mov	r1, r5
   1b230:	mov	r2, r4
   1b234:	pop	{r4, r5, fp, lr}
   1b238:	b	11318 <memcpy@plt>
   1b23c:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1b240:	push	{r4, r5, fp, lr}
   1b244:	add	fp, sp, #8
   1b248:	mov	r5, r0
   1b24c:	add	r0, r1, #1
   1b250:	mov	r4, r1
   1b254:	bl	1c244 <__assert_fail@plt+0xac5c>
   1b258:	cmp	r0, #0
   1b25c:	beq	1b278 <__assert_fail@plt+0x9c90>
   1b260:	mov	r1, #0
   1b264:	mov	r2, r4
   1b268:	strb	r1, [r0, r4]
   1b26c:	mov	r1, r5
   1b270:	pop	{r4, r5, fp, lr}
   1b274:	b	11318 <memcpy@plt>
   1b278:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1b27c:	push	{r4, r5, fp, lr}
   1b280:	add	fp, sp, #8
   1b284:	mov	r4, r0
   1b288:	bl	11474 <strlen@plt>
   1b28c:	add	r5, r0, #1
   1b290:	mov	r0, r5
   1b294:	bl	1c244 <__assert_fail@plt+0xac5c>
   1b298:	cmp	r0, #0
   1b29c:	beq	1b2b0 <__assert_fail@plt+0x9cc8>
   1b2a0:	mov	r1, r4
   1b2a4:	mov	r2, r5
   1b2a8:	pop	{r4, r5, fp, lr}
   1b2ac:	b	11318 <memcpy@plt>
   1b2b0:	bl	1b2b4 <__assert_fail@plt+0x9ccc>
   1b2b4:	push	{fp, lr}
   1b2b8:	mov	fp, sp
   1b2bc:	movw	r0, #61784	; 0xf158
   1b2c0:	movw	r1, #58448	; 0xe450
   1b2c4:	mov	r2, #5
   1b2c8:	movt	r0, #2
   1b2cc:	movt	r1, #1
   1b2d0:	ldr	r4, [r0]
   1b2d4:	mov	r0, #0
   1b2d8:	bl	11348 <dcgettext@plt>
   1b2dc:	movw	r2, #57262	; 0xdfae
   1b2e0:	mov	r3, r0
   1b2e4:	mov	r0, r4
   1b2e8:	mov	r1, #0
   1b2ec:	movt	r2, #1
   1b2f0:	bl	113e4 <error@plt>
   1b2f4:	bl	115c4 <abort@plt>
   1b2f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b2fc:	add	fp, sp, #24
   1b300:	sub	sp, sp, #16
   1b304:	mov	r8, r0
   1b308:	ldr	r0, [fp, #16]
   1b30c:	mov	r5, r3
   1b310:	mov	r6, r2
   1b314:	mov	r2, r1
   1b318:	add	r3, sp, #8
   1b31c:	mov	r1, #0
   1b320:	str	r0, [sp]
   1b324:	mov	r0, r8
   1b328:	bl	1b550 <__assert_fail@plt+0x9f68>
   1b32c:	cmp	r0, #0
   1b330:	bne	1b3bc <__assert_fail@plt+0x9dd4>
   1b334:	ldr	r4, [sp, #8]
   1b338:	ldr	r7, [sp, #12]
   1b33c:	subs	r0, r4, r6
   1b340:	sbcs	r0, r7, r5
   1b344:	bcc	1b368 <__assert_fail@plt+0x9d80>
   1b348:	ldr	r1, [fp, #8]
   1b34c:	ldr	r0, [fp, #12]
   1b350:	subs	r1, r1, r4
   1b354:	sbcs	r0, r0, r7
   1b358:	movcs	r0, r4
   1b35c:	movcs	r1, r7
   1b360:	subcs	sp, fp, #24
   1b364:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b368:	bl	114b0 <__errno_location@plt>
   1b36c:	subs	r1, r4, #1073741824	; 0x40000000
   1b370:	sbcs	r1, r7, #0
   1b374:	movcc	r1, #34	; 0x22
   1b378:	movcs	r1, #75	; 0x4b
   1b37c:	str	r1, [r0]
   1b380:	ldr	r6, [r0]
   1b384:	ldr	r4, [fp, #24]
   1b388:	ldr	r5, [fp, #20]
   1b38c:	mov	r0, r8
   1b390:	bl	1a4c8 <__assert_fail@plt+0x8ee0>
   1b394:	subs	r1, r6, #22
   1b398:	movw	r2, #55086	; 0xd72e
   1b39c:	str	r0, [sp]
   1b3a0:	mov	r3, r5
   1b3a4:	movne	r1, r6
   1b3a8:	cmp	r4, #0
   1b3ac:	movt	r2, #1
   1b3b0:	movweq	r4, #1
   1b3b4:	mov	r0, r4
   1b3b8:	bl	113e4 <error@plt>
   1b3bc:	cmp	r0, #1
   1b3c0:	beq	1b3d8 <__assert_fail@plt+0x9df0>
   1b3c4:	cmp	r0, #3
   1b3c8:	bne	1b3e4 <__assert_fail@plt+0x9dfc>
   1b3cc:	bl	114b0 <__errno_location@plt>
   1b3d0:	mov	r1, #0
   1b3d4:	b	1b37c <__assert_fail@plt+0x9d94>
   1b3d8:	bl	114b0 <__errno_location@plt>
   1b3dc:	mov	r1, #75	; 0x4b
   1b3e0:	b	1b37c <__assert_fail@plt+0x9d94>
   1b3e4:	bl	114b0 <__errno_location@plt>
   1b3e8:	b	1b380 <__assert_fail@plt+0x9d98>
   1b3ec:	mov	r1, #10
   1b3f0:	b	1b2f8 <__assert_fail@plt+0x9d10>
   1b3f4:	andeq	r0, r0, r0
   1b3f8:	push	{r4, r5, r6, sl, fp, lr}
   1b3fc:	add	fp, sp, #16
   1b400:	vpush	{d8}
   1b404:	sub	sp, sp, #8
   1b408:	vldr	d16, [pc, #160]	; 1b4b0 <__assert_fail@plt+0x9ec8>
   1b40c:	vmov.f64	d8, d0
   1b410:	vcmpe.f64	d0, d16
   1b414:	vmrs	APSR_nzcv, fpscr
   1b418:	blt	1b430 <__assert_fail@plt+0x9e48>
   1b41c:	bl	112d0 <pause@plt>
   1b420:	bl	114b0 <__errno_location@plt>
   1b424:	ldr	r0, [r0]
   1b428:	cmp	r0, #4
   1b42c:	beq	1b41c <__assert_fail@plt+0x9e34>
   1b430:	vmov.f64	d0, d8
   1b434:	mov	r6, sp
   1b438:	mov	r0, r6
   1b43c:	bl	1c3b8 <__assert_fail@plt+0xadd0>
   1b440:	bl	114b0 <__errno_location@plt>
   1b444:	mov	r5, #0
   1b448:	mov	r4, r0
   1b44c:	mov	r1, r6
   1b450:	str	r5, [r0]
   1b454:	mov	r0, r6
   1b458:	bl	11300 <nanosleep@plt>
   1b45c:	cmp	r0, #0
   1b460:	beq	1b49c <__assert_fail@plt+0x9eb4>
   1b464:	mov	r6, sp
   1b468:	mov	r5, #0
   1b46c:	ldr	r0, [r4]
   1b470:	orr	r0, r0, #4
   1b474:	cmp	r0, #4
   1b478:	bne	1b498 <__assert_fail@plt+0x9eb0>
   1b47c:	mov	r0, r6
   1b480:	mov	r1, r6
   1b484:	str	r5, [r4]
   1b488:	bl	11300 <nanosleep@plt>
   1b48c:	cmp	r0, #0
   1b490:	bne	1b46c <__assert_fail@plt+0x9e84>
   1b494:	b	1b49c <__assert_fail@plt+0x9eb4>
   1b498:	mvn	r5, #0
   1b49c:	mov	r0, r5
   1b4a0:	sub	sp, fp, #24
   1b4a4:	vpop	{d8}
   1b4a8:	pop	{r4, r5, r6, sl, fp, pc}
   1b4ac:	nop	{0}
   1b4b0:	andeq	r0, r0, r0
   1b4b4:	mvnmi	r0, r0
   1b4b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b4bc:	add	fp, sp, #24
   1b4c0:	sub	sp, sp, #8
   1b4c4:	mov	r4, r3
   1b4c8:	mov	r8, r2
   1b4cc:	mov	r9, r1
   1b4d0:	mov	r5, r0
   1b4d4:	bl	114b0 <__errno_location@plt>
   1b4d8:	mov	r6, #0
   1b4dc:	mov	r7, r0
   1b4e0:	add	r1, sp, #4
   1b4e4:	str	r6, [r0]
   1b4e8:	mov	r0, r5
   1b4ec:	blx	r4
   1b4f0:	ldr	r0, [sp, #4]
   1b4f4:	cmp	r0, r5
   1b4f8:	beq	1b538 <__assert_fail@plt+0x9f50>
   1b4fc:	cmp	r9, #0
   1b500:	beq	1b520 <__assert_fail@plt+0x9f38>
   1b504:	vcmp.f64	d0, #0.0
   1b508:	vmrs	APSR_nzcv, fpscr
   1b50c:	beq	1b534 <__assert_fail@plt+0x9f4c>
   1b510:	ldr	r1, [r7]
   1b514:	subs	r6, r1, #34	; 0x22
   1b518:	movwne	r6, #1
   1b51c:	b	1b538 <__assert_fail@plt+0x9f50>
   1b520:	ldrb	r1, [r0]
   1b524:	mov	r6, #0
   1b528:	cmp	r1, #0
   1b52c:	bne	1b540 <__assert_fail@plt+0x9f58>
   1b530:	b	1b504 <__assert_fail@plt+0x9f1c>
   1b534:	mov	r6, #1
   1b538:	cmp	r9, #0
   1b53c:	strne	r0, [r9]
   1b540:	vstr	d0, [r8]
   1b544:	mov	r0, r6
   1b548:	sub	sp, fp, #24
   1b54c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b554:	add	fp, sp, #28
   1b558:	sub	sp, sp, #44	; 0x2c
   1b55c:	cmp	r2, #37	; 0x25
   1b560:	bcs	1c1d0 <__assert_fail@plt+0xabe8>
   1b564:	ldr	sl, [fp, #8]
   1b568:	mov	r6, r2
   1b56c:	mov	r7, r1
   1b570:	mov	r4, r0
   1b574:	str	r3, [sp, #36]	; 0x24
   1b578:	bl	114b0 <__errno_location@plt>
   1b57c:	mov	r5, r0
   1b580:	mov	r0, #0
   1b584:	str	r0, [r5]
   1b588:	bl	11450 <__ctype_b_loc@plt>
   1b58c:	ldr	r1, [r0]
   1b590:	mov	r2, r4
   1b594:	ldrb	r0, [r2], #1
   1b598:	add	r3, r1, r0, lsl #1
   1b59c:	ldrb	r3, [r3, #1]
   1b5a0:	tst	r3, #32
   1b5a4:	bne	1b594 <__assert_fail@plt+0x9fac>
   1b5a8:	cmp	r7, #0
   1b5ac:	sub	r9, fp, #32
   1b5b0:	mov	r8, #4
   1b5b4:	movne	r9, r7
   1b5b8:	cmp	r0, #45	; 0x2d
   1b5bc:	beq	1c1c4 <__assert_fail@plt+0xabdc>
   1b5c0:	mov	r0, r4
   1b5c4:	mov	r1, r9
   1b5c8:	mov	r2, r6
   1b5cc:	mov	r3, #0
   1b5d0:	bl	11324 <__strtoull_internal@plt>
   1b5d4:	mov	r7, r1
   1b5d8:	ldr	r1, [r9]
   1b5dc:	cmp	r1, r4
   1b5e0:	beq	1b60c <__assert_fail@plt+0xa024>
   1b5e4:	mov	r6, r0
   1b5e8:	ldr	r0, [r5]
   1b5ec:	cmp	r0, #0
   1b5f0:	beq	1b648 <__assert_fail@plt+0xa060>
   1b5f4:	cmp	r0, #34	; 0x22
   1b5f8:	bne	1c1c4 <__assert_fail@plt+0xabdc>
   1b5fc:	mov	r8, #1
   1b600:	cmp	sl, #0
   1b604:	bne	1b654 <__assert_fail@plt+0xa06c>
   1b608:	b	1c1bc <__assert_fail@plt+0xabd4>
   1b60c:	cmp	sl, #0
   1b610:	beq	1c1c4 <__assert_fail@plt+0xabdc>
   1b614:	mov	r5, r1
   1b618:	ldrb	r1, [r4]
   1b61c:	cmp	r1, #0
   1b620:	beq	1c1c4 <__assert_fail@plt+0xabdc>
   1b624:	mov	r0, sl
   1b628:	bl	1148c <strchr@plt>
   1b62c:	cmp	r0, #0
   1b630:	beq	1c1c4 <__assert_fail@plt+0xabdc>
   1b634:	mov	r1, r5
   1b638:	mov	r8, #0
   1b63c:	mov	r6, #1
   1b640:	mov	r7, #0
   1b644:	b	1b654 <__assert_fail@plt+0xa06c>
   1b648:	mov	r8, r0
   1b64c:	cmp	sl, #0
   1b650:	beq	1c1bc <__assert_fail@plt+0xabd4>
   1b654:	ldrb	r4, [r1]
   1b658:	cmp	r4, #0
   1b65c:	beq	1c1bc <__assert_fail@plt+0xabd4>
   1b660:	str	r1, [sp, #32]
   1b664:	mov	r0, sl
   1b668:	mov	r1, r4
   1b66c:	bl	1148c <strchr@plt>
   1b670:	cmp	r0, #0
   1b674:	beq	1b93c <__assert_fail@plt+0xa354>
   1b678:	sub	r0, r4, #69	; 0x45
   1b67c:	mov	r1, #1
   1b680:	mov	r3, #0
   1b684:	mov	r5, #1024	; 0x400
   1b688:	cmp	r0, #47	; 0x2f
   1b68c:	str	r1, [sp, #28]
   1b690:	bhi	1b794 <__assert_fail@plt+0xa1ac>
   1b694:	add	r1, pc, #0
   1b698:	ldr	pc, [r1, r0, lsl #2]
   1b69c:	andeq	fp, r1, ip, asr r7
   1b6a0:	muleq	r1, r4, r7
   1b6a4:	andeq	fp, r1, ip, asr r7
   1b6a8:	muleq	r1, r4, r7
   1b6ac:	muleq	r1, r4, r7
   1b6b0:	muleq	r1, r4, r7
   1b6b4:	andeq	fp, r1, ip, asr r7
   1b6b8:	muleq	r1, r4, r7
   1b6bc:	andeq	fp, r1, ip, asr r7
   1b6c0:	muleq	r1, r4, r7
   1b6c4:	muleq	r1, r4, r7
   1b6c8:	andeq	fp, r1, ip, asr r7
   1b6cc:	muleq	r1, r4, r7
   1b6d0:	muleq	r1, r4, r7
   1b6d4:	muleq	r1, r4, r7
   1b6d8:	andeq	fp, r1, ip, asr r7
   1b6dc:	muleq	r1, r4, r7
   1b6e0:	muleq	r1, r4, r7
   1b6e4:	muleq	r1, r4, r7
   1b6e8:	muleq	r1, r4, r7
   1b6ec:	andeq	fp, r1, ip, asr r7
   1b6f0:	andeq	fp, r1, ip, asr r7
   1b6f4:	muleq	r1, r4, r7
   1b6f8:	muleq	r1, r4, r7
   1b6fc:	muleq	r1, r4, r7
   1b700:	muleq	r1, r4, r7
   1b704:	muleq	r1, r4, r7
   1b708:	muleq	r1, r4, r7
   1b70c:	muleq	r1, r4, r7
   1b710:	muleq	r1, r4, r7
   1b714:	muleq	r1, r4, r7
   1b718:	muleq	r1, r4, r7
   1b71c:	muleq	r1, r4, r7
   1b720:	muleq	r1, r4, r7
   1b724:	andeq	fp, r1, ip, asr r7
   1b728:	muleq	r1, r4, r7
   1b72c:	muleq	r1, r4, r7
   1b730:	muleq	r1, r4, r7
   1b734:	andeq	fp, r1, ip, asr r7
   1b738:	muleq	r1, r4, r7
   1b73c:	andeq	fp, r1, ip, asr r7
   1b740:	muleq	r1, r4, r7
   1b744:	muleq	r1, r4, r7
   1b748:	muleq	r1, r4, r7
   1b74c:	muleq	r1, r4, r7
   1b750:	muleq	r1, r4, r7
   1b754:	muleq	r1, r4, r7
   1b758:	andeq	fp, r1, ip, asr r7
   1b75c:	mov	r0, sl
   1b760:	mov	r1, #48	; 0x30
   1b764:	bl	1148c <strchr@plt>
   1b768:	cmp	r0, #0
   1b76c:	beq	1b790 <__assert_fail@plt+0xa1a8>
   1b770:	ldr	r1, [sp, #32]
   1b774:	ldrb	r0, [r1, #1]
   1b778:	cmp	r0, #66	; 0x42
   1b77c:	cmpne	r0, #68	; 0x44
   1b780:	bne	1b948 <__assert_fail@plt+0xa360>
   1b784:	mov	r5, #1000	; 0x3e8
   1b788:	mov	r0, #2
   1b78c:	str	r0, [sp, #28]
   1b790:	mov	r3, #0
   1b794:	sub	r0, r4, #66	; 0x42
   1b798:	cmp	r0, #53	; 0x35
   1b79c:	bhi	1b93c <__assert_fail@plt+0xa354>
   1b7a0:	add	r1, pc, #0
   1b7a4:	ldr	pc, [r1, r0, lsl #2]
   1b7a8:	andeq	fp, r1, r4, asr #25
   1b7ac:	andeq	fp, r1, ip, lsr r9
   1b7b0:	andeq	fp, r1, ip, lsr r9
   1b7b4:	andeq	fp, r1, ip, ror #25
   1b7b8:	andeq	fp, r1, ip, lsr r9
   1b7bc:	andeq	fp, r1, r0, lsl #17
   1b7c0:	andeq	fp, r1, ip, lsr r9
   1b7c4:	andeq	fp, r1, ip, lsr r9
   1b7c8:	andeq	fp, r1, ip, lsr r9
   1b7cc:	andeq	fp, r1, ip, ror #18
   1b7d0:	andeq	fp, r1, ip, lsr r9
   1b7d4:			; <UNDEFINED> instruction: 0x0001b9b4
   1b7d8:	andeq	fp, r1, ip, lsr r9
   1b7dc:	andeq	fp, r1, ip, lsr r9
   1b7e0:	andeq	fp, r1, r4, asr #28
   1b7e4:	andeq	fp, r1, ip, lsr r9
   1b7e8:	andeq	fp, r1, ip, lsr r9
   1b7ec:	andeq	fp, r1, ip, lsr r9
   1b7f0:	andeq	fp, r1, r0, asr #20
   1b7f4:	andeq	fp, r1, ip, lsr r9
   1b7f8:	andeq	fp, r1, ip, lsr r9
   1b7fc:	andeq	fp, r1, ip, lsr r9
   1b800:	andeq	fp, r1, ip, lsr r9
   1b804:	andeq	fp, r1, ip, ror #30
   1b808:	andeq	fp, r1, r8, lsr #22
   1b80c:	andeq	fp, r1, ip, lsr r9
   1b810:	andeq	fp, r1, ip, lsr r9
   1b814:	andeq	fp, r1, ip, lsr r9
   1b818:	andeq	fp, r1, ip, lsr r9
   1b81c:	andeq	fp, r1, ip, lsr r9
   1b820:	andeq	fp, r1, ip, lsr r9
   1b824:	andeq	fp, r1, ip, lsr r9
   1b828:	andeq	ip, r1, r4, asr #2
   1b82c:	muleq	r1, ip, r1
   1b830:	andeq	fp, r1, ip, lsr r9
   1b834:	andeq	fp, r1, ip, lsr r9
   1b838:	andeq	fp, r1, ip, lsr r9
   1b83c:	andeq	fp, r1, r0, lsl #17
   1b840:	andeq	fp, r1, ip, lsr r9
   1b844:	andeq	fp, r1, ip, lsr r9
   1b848:	andeq	fp, r1, ip, lsr r9
   1b84c:	andeq	fp, r1, ip, ror #18
   1b850:	andeq	fp, r1, ip, lsr r9
   1b854:			; <UNDEFINED> instruction: 0x0001b9b4
   1b858:	andeq	fp, r1, ip, lsr r9
   1b85c:	andeq	fp, r1, ip, lsr r9
   1b860:	andeq	fp, r1, ip, lsr r9
   1b864:	andeq	fp, r1, ip, lsr r9
   1b868:	andeq	fp, r1, ip, lsr r9
   1b86c:	andeq	fp, r1, ip, lsr r9
   1b870:	andeq	fp, r1, r0, asr #20
   1b874:	andeq	fp, r1, ip, lsr r9
   1b878:	andeq	fp, r1, ip, lsr r9
   1b87c:	andeq	ip, r1, r8, ror r1
   1b880:	mvn	r0, #0
   1b884:	mvn	r1, #0
   1b888:	mov	r2, r5
   1b88c:	mov	sl, r3
   1b890:	bl	1c8e4 <__assert_fail@plt+0xb2fc>
   1b894:	subs	r3, r0, r6
   1b898:	umull	r4, r2, r6, r5
   1b89c:	mov	lr, #0
   1b8a0:	str	r1, [sp, #20]
   1b8a4:	sbcs	r3, r1, r7
   1b8a8:	movwcc	lr, #1
   1b8ac:	mla	ip, r6, sl, r2
   1b8b0:	mov	r2, r1
   1b8b4:	mov	r2, #0
   1b8b8:	cmp	lr, #0
   1b8bc:	mla	r7, r7, r5, ip
   1b8c0:	mvnne	r4, #0
   1b8c4:	mvnne	r7, #0
   1b8c8:	subs	r6, r0, r4
   1b8cc:	sbcs	r6, r1, r7
   1b8d0:	umull	r3, r6, r4, r5
   1b8d4:	movwcc	r2, #1
   1b8d8:	cmp	r2, #0
   1b8dc:	mvnne	r3, #0
   1b8e0:	cmp	r2, #0
   1b8e4:	str	r6, [sp, #16]
   1b8e8:	umull	r6, ip, r3, r5
   1b8ec:	mla	r1, r3, sl, ip
   1b8f0:	ldr	ip, [sp, #16]
   1b8f4:	str	r1, [sp, #12]
   1b8f8:	mla	r4, r4, sl, ip
   1b8fc:	mla	r4, r7, r5, r4
   1b900:	mvnne	r4, #0
   1b904:	subs	r0, r0, r3
   1b908:	ldr	r0, [sp, #20]
   1b90c:	ldr	r7, [sp, #12]
   1b910:	sbcs	r0, r0, r4
   1b914:	mov	r0, #0
   1b918:	mla	r7, r4, r5, r7
   1b91c:	movwcc	r0, #1
   1b920:	cmp	r0, #0
   1b924:	mov	r1, r0
   1b928:	orr	r0, lr, r2
   1b92c:	mvnne	r7, #0
   1b930:	mvnne	r6, #0
   1b934:	orr	r3, r0, r1
   1b938:	b	1c19c <__assert_fail@plt+0xabb4>
   1b93c:	ldr	r0, [sp, #36]	; 0x24
   1b940:	orr	r8, r8, #2
   1b944:	b	1c1c0 <__assert_fail@plt+0xabd8>
   1b948:	cmp	r0, #105	; 0x69
   1b94c:	mov	r3, #0
   1b950:	bne	1b794 <__assert_fail@plt+0xa1ac>
   1b954:	ldrb	r0, [r1, #2]
   1b958:	mov	r1, #1
   1b95c:	cmp	r0, #66	; 0x42
   1b960:	movweq	r1, #3
   1b964:	str	r1, [sp, #28]
   1b968:	b	1b794 <__assert_fail@plt+0xa1ac>
   1b96c:	mvn	r0, #0
   1b970:	mvn	r1, #0
   1b974:	mov	r2, r5
   1b978:	mov	r4, r3
   1b97c:	bl	1c8e4 <__assert_fail@plt+0xb2fc>
   1b980:	subs	r0, r0, r6
   1b984:	mov	r2, #0
   1b988:	sbcs	r0, r1, r7
   1b98c:	umull	r0, r1, r6, r5
   1b990:	movwcc	r2, #1
   1b994:	cmp	r2, #0
   1b998:	mla	r1, r6, r4, r1
   1b99c:	mov	r3, r2
   1b9a0:	mvnne	r0, #0
   1b9a4:	mla	r7, r7, r5, r1
   1b9a8:	mvnne	r7, #0
   1b9ac:	mov	r6, r0
   1b9b0:	b	1c19c <__assert_fail@plt+0xabb4>
   1b9b4:	mvn	r0, #0
   1b9b8:	mvn	r1, #0
   1b9bc:	mov	r2, r5
   1b9c0:	str	r3, [sp, #24]
   1b9c4:	bl	1c8e4 <__assert_fail@plt+0xb2fc>
   1b9c8:	subs	r3, r0, r6
   1b9cc:	mov	ip, r0
   1b9d0:	umull	r4, r0, r6, r5
   1b9d4:	mov	sl, #0
   1b9d8:	sbcs	r3, r1, r7
   1b9dc:	mov	r3, #0
   1b9e0:	movwcc	r3, #1
   1b9e4:	cmp	r3, #0
   1b9e8:	str	r0, [sp, #20]
   1b9ec:	ldr	r0, [sp, #24]
   1b9f0:	mvnne	r4, #0
   1b9f4:	cmp	r3, #0
   1b9f8:	umull	lr, r2, r4, r5
   1b9fc:	mla	r2, r4, r0, r2
   1ba00:	str	r2, [sp, #16]
   1ba04:	ldr	r2, [sp, #20]
   1ba08:	mla	r6, r6, r0, r2
   1ba0c:	ldr	r0, [sp, #16]
   1ba10:	mla	r6, r7, r5, r6
   1ba14:	mvnne	r6, #0
   1ba18:	mla	r7, r6, r5, r0
   1ba1c:	subs	r0, ip, r4
   1ba20:	sbcs	r0, r1, r6
   1ba24:	movwcc	sl, #1
   1ba28:	cmp	sl, #0
   1ba2c:	orr	r3, r3, sl
   1ba30:	mvnne	lr, #0
   1ba34:	mvnne	r7, #0
   1ba38:	mov	r6, lr
   1ba3c:	b	1c19c <__assert_fail@plt+0xabb4>
   1ba40:	mvn	r0, #0
   1ba44:	mvn	r1, #0
   1ba48:	mov	r2, r5
   1ba4c:	mov	sl, r3
   1ba50:	bl	1c8e4 <__assert_fail@plt+0xb2fc>
   1ba54:	subs	r3, r0, r6
   1ba58:	mov	ip, r1
   1ba5c:	umull	r2, lr, r6, r5
   1ba60:	str	r0, [sp, #20]
   1ba64:	sbcs	r3, r1, r7
   1ba68:	mov	r1, #0
   1ba6c:	str	ip, [sp, #16]
   1ba70:	movwcc	r1, #1
   1ba74:	mla	r6, r6, sl, lr
   1ba78:	mov	lr, #0
   1ba7c:	cmp	r1, #0
   1ba80:	mla	r7, r7, r5, r6
   1ba84:	mvnne	r2, #0
   1ba88:	cmp	r1, #0
   1ba8c:	umull	r3, r4, r2, r5
   1ba90:	mvnne	r7, #0
   1ba94:	mla	r4, r2, sl, r4
   1ba98:	subs	r2, r0, r2
   1ba9c:	sbcs	r2, ip, r7
   1baa0:	mla	r4, r7, r5, r4
   1baa4:	mov	r2, #0
   1baa8:	movwcc	lr, #1
   1baac:	cmp	lr, #0
   1bab0:	mvnne	r3, #0
   1bab4:	mvnne	r4, #0
   1bab8:	subs	r7, r0, r3
   1babc:	mov	r0, r5
   1bac0:	sbcs	r7, ip, r4
   1bac4:	umull	r5, r7, r3, r5
   1bac8:	movwcc	r2, #1
   1bacc:	cmp	r2, #0
   1bad0:	mla	r3, r3, sl, r7
   1bad4:	mvnne	r5, #0
   1bad8:	cmp	r2, #0
   1badc:	mla	r3, r4, r0, r3
   1bae0:	umull	r6, ip, r5, r0
   1bae4:	mvnne	r3, #0
   1bae8:	mla	ip, r5, sl, ip
   1baec:	mla	r7, r3, r0, ip
   1baf0:	ldr	r0, [sp, #20]
   1baf4:	subs	r0, r0, r5
   1baf8:	ldr	r0, [sp, #16]
   1bafc:	sbcs	r0, r0, r3
   1bb00:	mov	r0, #0
   1bb04:	movwcc	r0, #1
   1bb08:	cmp	r0, #0
   1bb0c:	mov	r3, r0
   1bb10:	orr	r0, r1, lr
   1bb14:	orr	r0, r0, r2
   1bb18:	mvnne	r7, #0
   1bb1c:	mvnne	r6, #0
   1bb20:	orr	r3, r0, r3
   1bb24:	b	1c19c <__assert_fail@plt+0xabb4>
   1bb28:	mvn	r0, #0
   1bb2c:	mvn	r1, #0
   1bb30:	mov	r2, r5
   1bb34:	mov	r4, r3
   1bb38:	str	r3, [sp, #24]
   1bb3c:	bl	1c8e4 <__assert_fail@plt+0xb2fc>
   1bb40:	umull	r3, r2, r6, r5
   1bb44:	mla	r2, r6, r4, r2
   1bb48:	subs	r6, r0, r6
   1bb4c:	sbcs	r6, r1, r7
   1bb50:	mov	r6, #0
   1bb54:	mla	ip, r7, r5, r2
   1bb58:	ldr	r2, [sp, #24]
   1bb5c:	movwcc	r6, #1
   1bb60:	cmp	r6, #0
   1bb64:	str	r6, [sp, #20]
   1bb68:	mov	r6, #0
   1bb6c:	mvnne	r3, #0
   1bb70:	mvnne	ip, #0
   1bb74:	subs	r4, r0, r3
   1bb78:	umull	r7, lr, r3, r5
   1bb7c:	sbcs	r4, r1, ip
   1bb80:	movwcc	r6, #1
   1bb84:	mla	r3, r3, r2, lr
   1bb88:	cmp	r6, #0
   1bb8c:	str	r6, [sp, #16]
   1bb90:	mvnne	r7, #0
   1bb94:	cmp	r6, #0
   1bb98:	umull	sl, r4, r7, r5
   1bb9c:	mla	r4, r7, r2, r4
   1bba0:	mla	r2, ip, r5, r3
   1bba4:	mvnne	r2, #0
   1bba8:	subs	r3, r0, r7
   1bbac:	mov	ip, #0
   1bbb0:	mla	r6, r2, r5, r4
   1bbb4:	sbcs	r2, r1, r2
   1bbb8:	mov	r4, r0
   1bbbc:	mov	r0, #0
   1bbc0:	movwcc	r0, #1
   1bbc4:	mov	r3, r4
   1bbc8:	cmp	r0, #0
   1bbcc:	str	r0, [sp, #12]
   1bbd0:	mov	r0, r1
   1bbd4:	str	r3, [sp, #4]
   1bbd8:	mvnne	sl, #0
   1bbdc:	mvnne	r6, #0
   1bbe0:	str	r0, [sp, #8]
   1bbe4:	subs	r2, r4, sl
   1bbe8:	ldr	r4, [sp, #24]
   1bbec:	sbcs	r2, r1, r6
   1bbf0:	umull	r7, r2, sl, r5
   1bbf4:	movwcc	ip, #1
   1bbf8:	cmp	ip, #0
   1bbfc:	mvnne	r7, #0
   1bc00:	mla	r2, sl, r4, r2
   1bc04:	cmp	ip, #0
   1bc08:	mov	sl, #0
   1bc0c:	umull	r1, lr, r7, r5
   1bc10:	mla	r2, r6, r5, r2
   1bc14:	mvnne	r2, #0
   1bc18:	subs	r6, r3, r7
   1bc1c:	mla	lr, r7, r4, lr
   1bc20:	mla	lr, r2, r5, lr
   1bc24:	sbcs	r2, r0, r2
   1bc28:	mov	r2, #0
   1bc2c:	movwcc	sl, #1
   1bc30:	cmp	sl, #0
   1bc34:	mvnne	r1, #0
   1bc38:	mvnne	lr, #0
   1bc3c:	subs	r6, r3, r1
   1bc40:	ldr	r3, [sp, #24]
   1bc44:	sbcs	r6, r0, lr
   1bc48:	umull	r0, r7, r1, r5
   1bc4c:	movwcc	r2, #1
   1bc50:	cmp	r2, #0
   1bc54:	mvnne	r0, #0
   1bc58:	mla	r1, r1, r3, r7
   1bc5c:	cmp	r2, #0
   1bc60:	umull	r6, r4, r0, r5
   1bc64:	mla	r1, lr, r5, r1
   1bc68:	mvnne	r1, #0
   1bc6c:	mla	r4, r0, r3, r4
   1bc70:	ldr	r3, [sp, #4]
   1bc74:	mla	r7, r1, r5, r4
   1bc78:	ldr	r5, [sp, #16]
   1bc7c:	subs	r0, r3, r0
   1bc80:	ldr	r0, [sp, #8]
   1bc84:	sbcs	r0, r0, r1
   1bc88:	mov	r0, #0
   1bc8c:	movwcc	r0, #1
   1bc90:	cmp	r0, #0
   1bc94:	mov	r1, r0
   1bc98:	ldr	r0, [sp, #20]
   1bc9c:	mvnne	r7, #0
   1bca0:	mvnne	r6, #0
   1bca4:	orr	r0, r0, r5
   1bca8:	ldr	r5, [sp, #12]
   1bcac:	orr	r0, r0, r5
   1bcb0:	orr	r0, r0, ip
   1bcb4:	orr	r0, r0, sl
   1bcb8:	orr	r0, r0, r2
   1bcbc:	orr	r0, r0, r1
   1bcc0:	b	1c13c <__assert_fail@plt+0xab54>
   1bcc4:	mov	r1, #0
   1bcc8:	lsl	r2, r7, #10
   1bccc:	lsl	r0, r6, #10
   1bcd0:	lsr	r3, r7, #22
   1bcd4:	cmp	r1, r7, lsr #22
   1bcd8:	orr	r2, r2, r6, lsr #22
   1bcdc:	mvnne	r0, #0
   1bce0:	movwne	r3, #1
   1bce4:	cmp	r1, r7, lsr #22
   1bce8:	b	1c168 <__assert_fail@plt+0xab80>
   1bcec:	mvn	r0, #0
   1bcf0:	mvn	r1, #0
   1bcf4:	mov	r2, r5
   1bcf8:	mov	sl, r3
   1bcfc:	bl	1c8e4 <__assert_fail@plt+0xb2fc>
   1bd00:	subs	r2, r0, r6
   1bd04:	mov	ip, r0
   1bd08:	mov	r0, #0
   1bd0c:	sbcs	r2, r1, r7
   1bd10:	umull	r4, r2, r6, r5
   1bd14:	movwcc	r0, #1
   1bd18:	cmp	r0, #0
   1bd1c:	mla	r2, r6, sl, r2
   1bd20:	str	r0, [sp, #20]
   1bd24:	mvnne	r4, #0
   1bd28:	cmp	r0, #0
   1bd2c:	mla	r2, r7, r5, r2
   1bd30:	mov	r0, #0
   1bd34:	umull	lr, r3, r4, r5
   1bd38:	mvnne	r2, #0
   1bd3c:	mla	r3, r4, sl, r3
   1bd40:	mla	r6, r2, r5, r3
   1bd44:	subs	r3, ip, r4
   1bd48:	mov	r3, r1
   1bd4c:	sbcs	r2, r1, r2
   1bd50:	str	r3, [sp, #8]
   1bd54:	movwcc	r0, #1
   1bd58:	cmp	r0, #0
   1bd5c:	str	r0, [sp, #16]
   1bd60:	mov	r0, ip
   1bd64:	mvnne	lr, #0
   1bd68:	mvnne	r6, #0
   1bd6c:	str	r0, [sp, #12]
   1bd70:	subs	r2, ip, lr
   1bd74:	umull	r7, r4, lr, r5
   1bd78:	sbcs	r2, r1, r6
   1bd7c:	mov	r2, #0
   1bd80:	movwcc	r2, #1
   1bd84:	mla	r4, lr, sl, r4
   1bd88:	cmp	r2, #0
   1bd8c:	mla	r6, r6, r5, r4
   1bd90:	mov	r4, #0
   1bd94:	mvnne	r7, #0
   1bd98:	cmp	r2, #0
   1bd9c:	umull	r1, ip, r7, r5
   1bda0:	mvnne	r6, #0
   1bda4:	mla	ip, r7, sl, ip
   1bda8:	subs	r7, r0, r7
   1bdac:	sbcs	r7, r3, r6
   1bdb0:	mla	lr, r6, r5, ip
   1bdb4:	mov	ip, #0
   1bdb8:	movwcc	ip, #1
   1bdbc:	cmp	ip, #0
   1bdc0:	mvnne	r1, #0
   1bdc4:	mvnne	lr, #0
   1bdc8:	subs	r7, r0, r1
   1bdcc:	sbcs	r7, r3, lr
   1bdd0:	umull	r0, r7, r1, r5
   1bdd4:	movwcc	r4, #1
   1bdd8:	cmp	r4, #0
   1bddc:	mla	r1, r1, sl, r7
   1bde0:	mvnne	r0, #0
   1bde4:	cmp	r4, #0
   1bde8:	mla	r1, lr, r5, r1
   1bdec:	umull	r6, r3, r0, r5
   1bdf0:	mvnne	r1, #0
   1bdf4:	mla	r3, r0, sl, r3
   1bdf8:	mla	r7, r1, r5, r3
   1bdfc:	ldr	r3, [sp, #12]
   1be00:	subs	r0, r3, r0
   1be04:	ldr	r0, [sp, #8]
   1be08:	ldr	r3, [sp, #16]
   1be0c:	sbcs	r0, r0, r1
   1be10:	mov	r0, #0
   1be14:	movwcc	r0, #1
   1be18:	cmp	r0, #0
   1be1c:	mov	r1, r0
   1be20:	ldr	r0, [sp, #20]
   1be24:	mvnne	r7, #0
   1be28:	mvnne	r6, #0
   1be2c:	orr	r0, r0, r3
   1be30:	orr	r0, r0, r2
   1be34:	orr	r0, r0, ip
   1be38:	orr	r0, r0, r4
   1be3c:	orr	r3, r0, r1
   1be40:	b	1c19c <__assert_fail@plt+0xabb4>
   1be44:	mvn	r0, #0
   1be48:	mvn	r1, #0
   1be4c:	mov	r2, r5
   1be50:	mov	sl, r3
   1be54:	bl	1c8e4 <__assert_fail@plt+0xb2fc>
   1be58:	umull	r3, r2, r6, r5
   1be5c:	mov	lr, r1
   1be60:	mov	r1, r0
   1be64:	mla	r2, r6, sl, r2
   1be68:	subs	r6, r0, r6
   1be6c:	mov	r0, #0
   1be70:	sbcs	r6, lr, r7
   1be74:	mla	r2, r7, r5, r2
   1be78:	movwcc	r0, #1
   1be7c:	cmp	r0, #0
   1be80:	str	r0, [sp, #20]
   1be84:	mov	r0, r1
   1be88:	mvnne	r3, #0
   1be8c:	mvnne	r2, #0
   1be90:	str	r0, [sp, #16]
   1be94:	subs	r4, r1, r3
   1be98:	umull	r7, ip, r3, r5
   1be9c:	sbcs	r4, lr, r2
   1bea0:	mov	r4, #0
   1bea4:	movwcc	r4, #1
   1bea8:	mla	r3, r3, sl, ip
   1beac:	mov	ip, #0
   1beb0:	cmp	r4, #0
   1beb4:	mla	r2, r2, r5, r3
   1beb8:	mvnne	r7, #0
   1bebc:	cmp	r4, #0
   1bec0:	umull	r1, r6, r7, r5
   1bec4:	mvnne	r2, #0
   1bec8:	mla	r6, r7, sl, r6
   1becc:	mla	r3, r2, r5, r6
   1bed0:	subs	r6, r0, r7
   1bed4:	sbcs	r2, lr, r2
   1bed8:	mov	r2, #0
   1bedc:	movwcc	ip, #1
   1bee0:	cmp	ip, #0
   1bee4:	mvnne	r1, #0
   1bee8:	mvnne	r3, #0
   1beec:	subs	r6, r0, r1
   1bef0:	sbcs	r6, lr, r3
   1bef4:	umull	r0, r6, r1, r5
   1bef8:	movwcc	r2, #1
   1befc:	cmp	r2, #0
   1bf00:	mvnne	r0, #0
   1bf04:	cmp	r2, #0
   1bf08:	str	r6, [sp, #12]
   1bf0c:	umull	r6, r7, r0, r5
   1bf10:	mla	r7, r0, sl, r7
   1bf14:	str	r7, [sp, #8]
   1bf18:	ldr	r7, [sp, #12]
   1bf1c:	mla	r1, r1, sl, r7
   1bf20:	mla	r1, r3, r5, r1
   1bf24:	ldr	r3, [sp, #8]
   1bf28:	mvnne	r1, #0
   1bf2c:	mla	r7, r1, r5, r3
   1bf30:	ldr	r3, [sp, #16]
   1bf34:	subs	r0, r3, r0
   1bf38:	sbcs	r0, lr, r1
   1bf3c:	mov	r0, #0
   1bf40:	movwcc	r0, #1
   1bf44:	cmp	r0, #0
   1bf48:	mov	r1, r0
   1bf4c:	ldr	r0, [sp, #20]
   1bf50:	mvnne	r7, #0
   1bf54:	mvnne	r6, #0
   1bf58:	orr	r0, r0, r4
   1bf5c:	orr	r0, r0, ip
   1bf60:	orr	r0, r0, r2
   1bf64:	orr	r3, r0, r1
   1bf68:	b	1c19c <__assert_fail@plt+0xabb4>
   1bf6c:	mvn	r0, #0
   1bf70:	mvn	r1, #0
   1bf74:	mov	r2, r5
   1bf78:	mov	sl, r3
   1bf7c:	bl	1c8e4 <__assert_fail@plt+0xb2fc>
   1bf80:	mov	lr, r0
   1bf84:	subs	r0, r0, r6
   1bf88:	mov	r2, #0
   1bf8c:	mov	ip, r1
   1bf90:	str	sl, [sp, #24]
   1bf94:	sbcs	r0, r1, r7
   1bf98:	umull	r3, r1, r6, r5
   1bf9c:	str	lr, [sp, #4]
   1bfa0:	movwcc	r2, #1
   1bfa4:	cmp	r2, #0
   1bfa8:	mla	r6, r6, sl, r1
   1bfac:	mov	r1, #0
   1bfb0:	str	r2, [sp, #20]
   1bfb4:	mvnne	r3, #0
   1bfb8:	cmp	r2, #0
   1bfbc:	mla	r7, r7, r5, r6
   1bfc0:	mov	r2, #0
   1bfc4:	umull	r0, r4, r3, r5
   1bfc8:	mvnne	r7, #0
   1bfcc:	mla	r4, r3, sl, r4
   1bfd0:	subs	r3, lr, r3
   1bfd4:	sbcs	r3, ip, r7
   1bfd8:	mla	r4, r7, r5, r4
   1bfdc:	movwcc	r1, #1
   1bfe0:	cmp	r1, #0
   1bfe4:	str	r1, [sp, #16]
   1bfe8:	mvnne	r0, #0
   1bfec:	mvnne	r4, #0
   1bff0:	subs	r3, lr, r0
   1bff4:	sbcs	r3, ip, r4
   1bff8:	umull	r6, r3, r0, r5
   1bffc:	movwcc	r2, #1
   1c000:	cmp	r2, #0
   1c004:	mla	r0, r0, sl, r3
   1c008:	str	r2, [sp, #12]
   1c00c:	mvnne	r6, #0
   1c010:	cmp	r2, #0
   1c014:	mla	r0, r4, r5, r0
   1c018:	ldr	r4, [sp, #24]
   1c01c:	umull	r1, r7, r6, r5
   1c020:	mvnne	r0, #0
   1c024:	subs	r3, lr, r6
   1c028:	mov	r3, ip
   1c02c:	str	r3, [sp]
   1c030:	mla	r7, r6, sl, r7
   1c034:	mla	r7, r0, r5, r7
   1c038:	sbcs	r0, ip, r0
   1c03c:	mov	r0, #0
   1c040:	movwcc	r0, #1
   1c044:	cmp	r0, #0
   1c048:	str	r0, [sp, #8]
   1c04c:	mvnne	r1, #0
   1c050:	mvnne	r7, #0
   1c054:	subs	r0, lr, r1
   1c058:	sbcs	r0, ip, r7
   1c05c:	mov	ip, #0
   1c060:	umull	r6, r0, r1, r5
   1c064:	movwcc	ip, #1
   1c068:	cmp	ip, #0
   1c06c:	mla	r1, r1, r4, r0
   1c070:	mov	r0, lr
   1c074:	mvnne	r6, #0
   1c078:	cmp	ip, #0
   1c07c:	mla	r1, r7, r5, r1
   1c080:	umull	r2, sl, r6, r5
   1c084:	mvnne	r1, #0
   1c088:	mla	sl, r6, r4, sl
   1c08c:	subs	r6, lr, r6
   1c090:	mov	lr, #0
   1c094:	mla	r7, r1, r5, sl
   1c098:	sbcs	r1, r3, r1
   1c09c:	ldr	r1, [sp, #24]
   1c0a0:	movwcc	lr, #1
   1c0a4:	cmp	lr, #0
   1c0a8:	mvnne	r2, #0
   1c0ac:	mvnne	r7, #0
   1c0b0:	subs	r6, r0, r2
   1c0b4:	umull	r0, sl, r2, r5
   1c0b8:	sbcs	r6, r3, r7
   1c0bc:	mov	r3, #0
   1c0c0:	movwcc	r3, #1
   1c0c4:	mla	r2, r2, r1, sl
   1c0c8:	cmp	r3, #0
   1c0cc:	mla	r2, r7, r5, r2
   1c0d0:	mvnne	r0, #0
   1c0d4:	cmp	r3, #0
   1c0d8:	umull	r6, r4, r0, r5
   1c0dc:	mvnne	r2, #0
   1c0e0:	mla	r4, r0, r1, r4
   1c0e4:	ldr	r1, [sp, #4]
   1c0e8:	mla	r7, r2, r5, r4
   1c0ec:	ldr	r5, [sp, #16]
   1c0f0:	subs	r0, r1, r0
   1c0f4:	ldr	r0, [sp]
   1c0f8:	sbcs	r0, r0, r2
   1c0fc:	mov	r0, #0
   1c100:	movwcc	r0, #1
   1c104:	cmp	r0, #0
   1c108:	mov	r2, r0
   1c10c:	ldr	r0, [sp, #20]
   1c110:	mvnne	r7, #0
   1c114:	mvnne	r6, #0
   1c118:	orr	r0, r0, r5
   1c11c:	ldr	r5, [sp, #12]
   1c120:	orr	r0, r0, r5
   1c124:	ldr	r5, [sp, #8]
   1c128:	orr	r0, r0, r5
   1c12c:	orr	r0, r0, ip
   1c130:	orr	r0, r0, lr
   1c134:	orr	r0, r0, r3
   1c138:	orr	r0, r0, r2
   1c13c:	and	r3, r0, #1
   1c140:	b	1c19c <__assert_fail@plt+0xabb4>
   1c144:	mov	r1, #0
   1c148:	lsl	r2, r7, #9
   1c14c:	lsl	r0, r6, #9
   1c150:	lsr	r3, r7, #23
   1c154:	cmp	r1, r7, lsr #23
   1c158:	orr	r2, r2, r6, lsr #23
   1c15c:	mvnne	r0, #0
   1c160:	movwne	r3, #1
   1c164:	cmp	r1, r7, lsr #23
   1c168:	mvnne	r2, #0
   1c16c:	mov	r6, r0
   1c170:	mov	r7, r2
   1c174:	b	1c19c <__assert_fail@plt+0xabb4>
   1c178:	lsl	r1, r7, #1
   1c17c:	cmp	r7, #0
   1c180:	lsl	r0, r6, #1
   1c184:	lsr	r3, r7, #31
   1c188:	orr	r1, r1, r6, lsr #31
   1c18c:	mvnmi	r0, #0
   1c190:	mvnmi	r1, #0
   1c194:	mov	r6, r0
   1c198:	mov	r7, r1
   1c19c:	ldr	r1, [sp, #32]
   1c1a0:	ldr	r2, [sp, #28]
   1c1a4:	orr	r8, r3, r8
   1c1a8:	add	r0, r1, r2
   1c1ac:	str	r0, [r9]
   1c1b0:	ldrb	r0, [r1, r2]
   1c1b4:	cmp	r0, #0
   1c1b8:	orrne	r8, r8, #2
   1c1bc:	ldr	r0, [sp, #36]	; 0x24
   1c1c0:	strd	r6, [r0]
   1c1c4:	mov	r0, r8
   1c1c8:	sub	sp, fp, #28
   1c1cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1d0:	movw	r0, #58465	; 0xe461
   1c1d4:	movw	r1, #58503	; 0xe487
   1c1d8:	movw	r3, #58519	; 0xe497
   1c1dc:	mov	r2, #85	; 0x55
   1c1e0:	movt	r0, #1
   1c1e4:	movt	r1, #1
   1c1e8:	movt	r3, #1
   1c1ec:	bl	115e8 <__assert_fail@plt>
   1c1f0:	clz	r2, r1
   1c1f4:	clz	r3, r0
   1c1f8:	lsr	r2, r2, #5
   1c1fc:	lsr	r3, r3, #5
   1c200:	orrs	r2, r3, r2
   1c204:	movwne	r1, #1
   1c208:	movwne	r0, #1
   1c20c:	cmp	r1, #0
   1c210:	beq	1c240 <__assert_fail@plt+0xac58>
   1c214:	mvn	r2, #-2147483648	; 0x80000000
   1c218:	udiv	r2, r2, r1
   1c21c:	cmp	r2, r0
   1c220:	bcs	1c240 <__assert_fail@plt+0xac58>
   1c224:	push	{fp, lr}
   1c228:	mov	fp, sp
   1c22c:	bl	114b0 <__errno_location@plt>
   1c230:	mov	r1, #12
   1c234:	str	r1, [r0]
   1c238:	mov	r0, #0
   1c23c:	pop	{fp, pc}
   1c240:	b	11294 <calloc@plt>
   1c244:	cmp	r0, #0
   1c248:	movweq	r0, #1
   1c24c:	cmn	r0, #1
   1c250:	ble	1c258 <__assert_fail@plt+0xac70>
   1c254:	b	11408 <malloc@plt>
   1c258:	push	{fp, lr}
   1c25c:	mov	fp, sp
   1c260:	bl	114b0 <__errno_location@plt>
   1c264:	mov	r1, #12
   1c268:	str	r1, [r0]
   1c26c:	mov	r0, #0
   1c270:	pop	{fp, pc}
   1c274:	push	{fp, lr}
   1c278:	mov	fp, sp
   1c27c:	cmp	r0, #0
   1c280:	beq	1c29c <__assert_fail@plt+0xacb4>
   1c284:	cmp	r1, #0
   1c288:	beq	1c2a8 <__assert_fail@plt+0xacc0>
   1c28c:	cmn	r1, #1
   1c290:	ble	1c2b4 <__assert_fail@plt+0xaccc>
   1c294:	pop	{fp, lr}
   1c298:	b	11354 <realloc@plt>
   1c29c:	mov	r0, r1
   1c2a0:	pop	{fp, lr}
   1c2a4:	b	1c244 <__assert_fail@plt+0xac5c>
   1c2a8:	bl	1744c <__assert_fail@plt+0x5e64>
   1c2ac:	mov	r0, #0
   1c2b0:	pop	{fp, pc}
   1c2b4:	bl	114b0 <__errno_location@plt>
   1c2b8:	mov	r1, #12
   1c2bc:	str	r1, [r0]
   1c2c0:	mov	r0, #0
   1c2c4:	pop	{fp, pc}
   1c2c8:	push	{r4, r5, r6, sl, fp, lr}
   1c2cc:	add	fp, sp, #16
   1c2d0:	movw	r6, #62232	; 0xf318
   1c2d4:	mov	r5, r0
   1c2d8:	mov	r4, r1
   1c2dc:	movt	r6, #2
   1c2e0:	ldr	r0, [r6]
   1c2e4:	cmp	r0, #0
   1c2e8:	bne	1c304 <__assert_fail@plt+0xad1c>
   1c2ec:	movw	r1, #58598	; 0xe4e6
   1c2f0:	movw	r0, #8127	; 0x1fbf
   1c2f4:	mov	r2, #0
   1c2f8:	movt	r1, #1
   1c2fc:	bl	11570 <newlocale@plt>
   1c300:	str	r0, [r6]
   1c304:	ldr	r2, [r6]
   1c308:	cmp	r2, #0
   1c30c:	beq	1c320 <__assert_fail@plt+0xad38>
   1c310:	mov	r0, r5
   1c314:	mov	r1, r4
   1c318:	pop	{r4, r5, r6, sl, fp, lr}
   1c31c:	b	11528 <strtod_l@plt>
   1c320:	vmov.i32	d0, #0	; 0x00000000
   1c324:	cmp	r4, #0
   1c328:	strne	r5, [r4]
   1c32c:	pop	{r4, r5, r6, sl, fp, pc}
   1c330:	push	{r4, r5, r6, sl, fp, lr}
   1c334:	add	fp, sp, #16
   1c338:	mov	r4, r0
   1c33c:	bl	113cc <__fpending@plt>
   1c340:	ldr	r6, [r4]
   1c344:	mov	r5, r0
   1c348:	mov	r0, r4
   1c34c:	bl	1c480 <__assert_fail@plt+0xae98>
   1c350:	tst	r6, #32
   1c354:	bne	1c38c <__assert_fail@plt+0xada4>
   1c358:	cmp	r0, #0
   1c35c:	mov	r4, r0
   1c360:	mvnne	r4, #0
   1c364:	cmp	r5, #0
   1c368:	bne	1c398 <__assert_fail@plt+0xadb0>
   1c36c:	cmp	r0, #0
   1c370:	beq	1c398 <__assert_fail@plt+0xadb0>
   1c374:	bl	114b0 <__errno_location@plt>
   1c378:	ldr	r0, [r0]
   1c37c:	subs	r4, r0, #9
   1c380:	mvnne	r4, #0
   1c384:	mov	r0, r4
   1c388:	pop	{r4, r5, r6, sl, fp, pc}
   1c38c:	mvn	r4, #0
   1c390:	cmp	r0, #0
   1c394:	beq	1c3a0 <__assert_fail@plt+0xadb8>
   1c398:	mov	r0, r4
   1c39c:	pop	{r4, r5, r6, sl, fp, pc}
   1c3a0:	bl	114b0 <__errno_location@plt>
   1c3a4:	mov	r1, #0
   1c3a8:	str	r1, [r0]
   1c3ac:	mov	r0, r4
   1c3b0:	pop	{r4, r5, r6, sl, fp, pc}
   1c3b4:	andeq	r0, r0, r0
   1c3b8:	push	{fp, lr}
   1c3bc:	mov	fp, sp
   1c3c0:	vldr	d16, [pc, #160]	; 1c468 <__assert_fail@plt+0xae80>
   1c3c4:	vcmpe.f64	d0, d16
   1c3c8:	vmrs	APSR_nzcv, fpscr
   1c3cc:	ble	1c444 <__assert_fail@plt+0xae5c>
   1c3d0:	vldr	d16, [pc, #152]	; 1c470 <__assert_fail@plt+0xae88>
   1c3d4:	movw	ip, #51712	; 0xca00
   1c3d8:	movt	ip, #15258	; 0x3b9a
   1c3dc:	vcmpe.f64	d0, d16
   1c3e0:	vmrs	APSR_nzcv, fpscr
   1c3e4:	bpl	1c450 <__assert_fail@plt+0xae68>
   1c3e8:	vcvt.s32.f64	s2, d0
   1c3ec:	vldr	d16, [pc, #132]	; 1c478 <__assert_fail@plt+0xae90>
   1c3f0:	movw	r1, #12193	; 0x2fa1
   1c3f4:	movt	r1, #17592	; 0x44b8
   1c3f8:	vcvt.f64.s32	d17, s2
   1c3fc:	vmov	lr, s2
   1c400:	vsub.f64	d17, d0, d17
   1c404:	vmul.f64	d16, d17, d16
   1c408:	vcvt.s32.f64	s0, d16
   1c40c:	vcvt.f64.s32	d17, s0
   1c410:	vmov	r2, s0
   1c414:	vcmpe.f64	d16, d17
   1c418:	vmrs	APSR_nzcv, fpscr
   1c41c:	addgt	r2, r2, #1
   1c420:	smmul	r1, r2, r1
   1c424:	asr	r3, r1, #28
   1c428:	add	r1, r3, r1, lsr #31
   1c42c:	mls	r2, r1, ip, r2
   1c430:	add	r1, r1, lr
   1c434:	add	r3, r1, r2, asr #31
   1c438:	cmp	r2, #0
   1c43c:	addmi	r2, r2, ip
   1c440:	b	1c458 <__assert_fail@plt+0xae70>
   1c444:	mov	r2, #0
   1c448:	mov	r3, #-2147483648	; 0x80000000
   1c44c:	b	1c458 <__assert_fail@plt+0xae70>
   1c450:	sub	r2, ip, #1
   1c454:	mvn	r3, #-2147483648	; 0x80000000
   1c458:	str	r3, [r0]
   1c45c:	str	r2, [r0, #4]
   1c460:	pop	{fp, pc}
   1c464:	nop	{0}
   1c468:	andeq	r0, r0, r0
   1c46c:	mvngt	r0, r0
   1c470:	andeq	r0, r0, r0
   1c474:	mvnmi	r0, r0
   1c478:	andeq	r0, r0, r0
   1c47c:	bicmi	ip, sp, r5, ror #26
   1c480:	push	{r4, r5, r6, sl, fp, lr}
   1c484:	add	fp, sp, #16
   1c488:	sub	sp, sp, #8
   1c48c:	mov	r4, r0
   1c490:	bl	114ec <fileno@plt>
   1c494:	cmn	r0, #1
   1c498:	ble	1c50c <__assert_fail@plt+0xaf24>
   1c49c:	mov	r0, r4
   1c4a0:	bl	11420 <__freading@plt>
   1c4a4:	cmp	r0, #0
   1c4a8:	beq	1c4d4 <__assert_fail@plt+0xaeec>
   1c4ac:	mov	r0, r4
   1c4b0:	bl	114ec <fileno@plt>
   1c4b4:	mov	r1, #1
   1c4b8:	mov	r2, #0
   1c4bc:	mov	r3, #0
   1c4c0:	str	r1, [sp]
   1c4c4:	bl	113b4 <lseek64@plt>
   1c4c8:	and	r0, r0, r1
   1c4cc:	cmn	r0, #1
   1c4d0:	beq	1c50c <__assert_fail@plt+0xaf24>
   1c4d4:	mov	r0, r4
   1c4d8:	bl	1c51c <__assert_fail@plt+0xaf34>
   1c4dc:	cmp	r0, #0
   1c4e0:	beq	1c50c <__assert_fail@plt+0xaf24>
   1c4e4:	bl	114b0 <__errno_location@plt>
   1c4e8:	ldr	r6, [r0]
   1c4ec:	mov	r5, r0
   1c4f0:	mov	r0, r4
   1c4f4:	bl	11510 <fclose@plt>
   1c4f8:	cmp	r6, #0
   1c4fc:	strne	r6, [r5]
   1c500:	mvnne	r0, #0
   1c504:	sub	sp, fp, #16
   1c508:	pop	{r4, r5, r6, sl, fp, pc}
   1c50c:	mov	r0, r4
   1c510:	sub	sp, fp, #16
   1c514:	pop	{r4, r5, r6, sl, fp, lr}
   1c518:	b	11510 <fclose@plt>
   1c51c:	push	{r4, sl, fp, lr}
   1c520:	add	fp, sp, #8
   1c524:	sub	sp, sp, #8
   1c528:	mov	r4, r0
   1c52c:	cmp	r0, #0
   1c530:	beq	1c568 <__assert_fail@plt+0xaf80>
   1c534:	mov	r0, r4
   1c538:	bl	11420 <__freading@plt>
   1c53c:	cmp	r0, #0
   1c540:	beq	1c568 <__assert_fail@plt+0xaf80>
   1c544:	ldrb	r0, [r4, #1]
   1c548:	tst	r0, #1
   1c54c:	beq	1c568 <__assert_fail@plt+0xaf80>
   1c550:	mov	r0, #1
   1c554:	mov	r2, #0
   1c558:	mov	r3, #0
   1c55c:	str	r0, [sp]
   1c560:	mov	r0, r4
   1c564:	bl	1c578 <__assert_fail@plt+0xaf90>
   1c568:	mov	r0, r4
   1c56c:	sub	sp, fp, #8
   1c570:	pop	{r4, sl, fp, lr}
   1c574:	b	112e8 <fflush@plt>
   1c578:	push	{r4, r5, r6, r7, fp, lr}
   1c57c:	add	fp, sp, #16
   1c580:	sub	sp, sp, #8
   1c584:	mov	r4, r0
   1c588:	ldr	r0, [r0, #4]
   1c58c:	mov	r5, r3
   1c590:	mov	r6, r2
   1c594:	ldr	r1, [r4, #8]
   1c598:	cmp	r1, r0
   1c59c:	bne	1c5b8 <__assert_fail@plt+0xafd0>
   1c5a0:	ldrd	r0, [r4, #16]
   1c5a4:	cmp	r1, r0
   1c5a8:	bne	1c5b8 <__assert_fail@plt+0xafd0>
   1c5ac:	ldr	r0, [r4, #36]	; 0x24
   1c5b0:	cmp	r0, #0
   1c5b4:	beq	1c5d0 <__assert_fail@plt+0xafe8>
   1c5b8:	mov	r0, r4
   1c5bc:	mov	r2, r6
   1c5c0:	mov	r3, r5
   1c5c4:	sub	sp, fp, #16
   1c5c8:	pop	{r4, r5, r6, r7, fp, lr}
   1c5cc:	b	1151c <fseeko64@plt>
   1c5d0:	ldr	r7, [fp, #8]
   1c5d4:	mov	r0, r4
   1c5d8:	bl	114ec <fileno@plt>
   1c5dc:	mov	r2, r6
   1c5e0:	mov	r3, r5
   1c5e4:	str	r7, [sp]
   1c5e8:	bl	113b4 <lseek64@plt>
   1c5ec:	and	r2, r0, r1
   1c5f0:	cmn	r2, #1
   1c5f4:	beq	1c614 <__assert_fail@plt+0xb02c>
   1c5f8:	strd	r0, [r4, #80]	; 0x50
   1c5fc:	ldr	r0, [r4]
   1c600:	bic	r0, r0, #16
   1c604:	str	r0, [r4]
   1c608:	mov	r0, #0
   1c60c:	sub	sp, fp, #16
   1c610:	pop	{r4, r5, r6, r7, fp, pc}
   1c614:	mvn	r0, #0
   1c618:	sub	sp, fp, #16
   1c61c:	pop	{r4, r5, r6, r7, fp, pc}
   1c620:	push	{fp, lr}
   1c624:	mov	fp, sp
   1c628:	mov	r0, #14
   1c62c:	bl	11564 <nl_langinfo@plt>
   1c630:	movw	r1, #53998	; 0xd2ee
   1c634:	cmp	r0, #0
   1c638:	movt	r1, #1
   1c63c:	movne	r1, r0
   1c640:	movw	r0, #58600	; 0xe4e8
   1c644:	ldrb	r2, [r1]
   1c648:	movt	r0, #1
   1c64c:	cmp	r2, #0
   1c650:	movne	r0, r1
   1c654:	pop	{fp, pc}
   1c658:	push	{r4, r5, r6, r7, fp, lr}
   1c65c:	add	fp, sp, #16
   1c660:	sub	sp, sp, #8
   1c664:	cmp	r0, #0
   1c668:	add	r5, sp, #4
   1c66c:	mov	r7, r2
   1c670:	mov	r4, r1
   1c674:	movne	r5, r0
   1c678:	mov	r0, r5
   1c67c:	bl	113d8 <mbrtowc@plt>
   1c680:	mov	r6, r0
   1c684:	cmp	r7, #0
   1c688:	beq	1c6b0 <__assert_fail@plt+0xb0c8>
   1c68c:	cmn	r6, #2
   1c690:	bcc	1c6b0 <__assert_fail@plt+0xb0c8>
   1c694:	mov	r0, #0
   1c698:	bl	1c704 <__assert_fail@plt+0xb11c>
   1c69c:	cmp	r0, #0
   1c6a0:	bne	1c6b0 <__assert_fail@plt+0xb0c8>
   1c6a4:	ldrb	r0, [r4]
   1c6a8:	mov	r6, #1
   1c6ac:	str	r0, [r5]
   1c6b0:	mov	r0, r6
   1c6b4:	sub	sp, fp, #16
   1c6b8:	pop	{r4, r5, r6, r7, fp, pc}
   1c6bc:	cmp	r2, #0
   1c6c0:	beq	1c6f0 <__assert_fail@plt+0xb108>
   1c6c4:	mvn	r3, #0
   1c6c8:	udiv	r3, r3, r2
   1c6cc:	cmp	r3, r1
   1c6d0:	bcs	1c6f0 <__assert_fail@plt+0xb108>
   1c6d4:	push	{fp, lr}
   1c6d8:	mov	fp, sp
   1c6dc:	bl	114b0 <__errno_location@plt>
   1c6e0:	mov	r1, #12
   1c6e4:	str	r1, [r0]
   1c6e8:	mov	r0, #0
   1c6ec:	pop	{fp, pc}
   1c6f0:	mul	r1, r2, r1
   1c6f4:	b	1c274 <__assert_fail@plt+0xac8c>
   1c6f8:	mov	r1, #0
   1c6fc:	mov	r2, #3
   1c700:	b	17230 <__assert_fail@plt+0x5c48>
   1c704:	push	{r4, sl, fp, lr}
   1c708:	add	fp, sp, #8
   1c70c:	sub	sp, sp, #264	; 0x108
   1c710:	add	r1, sp, #7
   1c714:	movw	r2, #257	; 0x101
   1c718:	bl	1c770 <__assert_fail@plt+0xb188>
   1c71c:	mov	r4, #0
   1c720:	cmp	r0, #0
   1c724:	bne	1c764 <__assert_fail@plt+0xb17c>
   1c728:	movw	r1, #58598	; 0xe4e6
   1c72c:	add	r0, sp, #7
   1c730:	mov	r2, #2
   1c734:	movt	r1, #1
   1c738:	bl	11468 <bcmp@plt>
   1c73c:	cmp	r0, #0
   1c740:	beq	1c764 <__assert_fail@plt+0xb17c>
   1c744:	movw	r1, #58606	; 0xe4ee
   1c748:	add	r0, sp, #7
   1c74c:	mov	r2, #6
   1c750:	movt	r1, #1
   1c754:	bl	11468 <bcmp@plt>
   1c758:	cmp	r0, #0
   1c75c:	mov	r4, r0
   1c760:	movwne	r4, #1
   1c764:	mov	r0, r4
   1c768:	sub	sp, fp, #8
   1c76c:	pop	{r4, sl, fp, pc}
   1c770:	push	{r4, r5, r6, r7, fp, lr}
   1c774:	add	fp, sp, #16
   1c778:	mov	r4, r1
   1c77c:	mov	r1, #0
   1c780:	mov	r6, r2
   1c784:	bl	1154c <setlocale@plt>
   1c788:	cmp	r0, #0
   1c78c:	beq	1c7bc <__assert_fail@plt+0xb1d4>
   1c790:	mov	r7, r0
   1c794:	bl	11474 <strlen@plt>
   1c798:	cmp	r0, r6
   1c79c:	bcs	1c7d8 <__assert_fail@plt+0xb1f0>
   1c7a0:	add	r2, r0, #1
   1c7a4:	mov	r0, r4
   1c7a8:	mov	r1, r7
   1c7ac:	bl	11318 <memcpy@plt>
   1c7b0:	mov	r5, #0
   1c7b4:	mov	r0, r5
   1c7b8:	pop	{r4, r5, r6, r7, fp, pc}
   1c7bc:	mov	r5, #22
   1c7c0:	cmp	r6, #0
   1c7c4:	beq	1c800 <__assert_fail@plt+0xb218>
   1c7c8:	mov	r0, #0
   1c7cc:	strb	r0, [r4]
   1c7d0:	mov	r0, r5
   1c7d4:	pop	{r4, r5, r6, r7, fp, pc}
   1c7d8:	mov	r5, #34	; 0x22
   1c7dc:	cmp	r6, #0
   1c7e0:	beq	1c800 <__assert_fail@plt+0xb218>
   1c7e4:	sub	r6, r6, #1
   1c7e8:	mov	r0, r4
   1c7ec:	mov	r1, r7
   1c7f0:	mov	r2, r6
   1c7f4:	bl	11318 <memcpy@plt>
   1c7f8:	mov	r0, #0
   1c7fc:	strb	r0, [r4, r6]
   1c800:	mov	r0, r5
   1c804:	pop	{r4, r5, r6, r7, fp, pc}
   1c808:	mov	r1, #0
   1c80c:	b	1154c <setlocale@plt>
   1c810:	cmp	r3, #0
   1c814:	cmpeq	r2, #0
   1c818:	bne	1c83c <__assert_fail@plt+0xb254>
   1c81c:	cmp	r1, #0
   1c820:	movlt	r1, #-2147483648	; 0x80000000
   1c824:	movlt	r0, #0
   1c828:	blt	1c838 <__assert_fail@plt+0xb250>
   1c82c:	cmpeq	r0, #0
   1c830:	mvnne	r1, #-2147483648	; 0x80000000
   1c834:	mvnne	r0, #0
   1c838:	b	1c920 <__assert_fail@plt+0xb338>
   1c83c:	sub	sp, sp, #8
   1c840:	push	{sp, lr}
   1c844:	cmp	r1, #0
   1c848:	blt	1c868 <__assert_fail@plt+0xb280>
   1c84c:	cmp	r3, #0
   1c850:	blt	1c89c <__assert_fail@plt+0xb2b4>
   1c854:	bl	1c930 <__assert_fail@plt+0xb348>
   1c858:	ldr	lr, [sp, #4]
   1c85c:	add	sp, sp, #8
   1c860:	pop	{r2, r3}
   1c864:	bx	lr
   1c868:	rsbs	r0, r0, #0
   1c86c:	sbc	r1, r1, r1, lsl #1
   1c870:	cmp	r3, #0
   1c874:	blt	1c8c0 <__assert_fail@plt+0xb2d8>
   1c878:	bl	1c930 <__assert_fail@plt+0xb348>
   1c87c:	ldr	lr, [sp, #4]
   1c880:	add	sp, sp, #8
   1c884:	pop	{r2, r3}
   1c888:	rsbs	r0, r0, #0
   1c88c:	sbc	r1, r1, r1, lsl #1
   1c890:	rsbs	r2, r2, #0
   1c894:	sbc	r3, r3, r3, lsl #1
   1c898:	bx	lr
   1c89c:	rsbs	r2, r2, #0
   1c8a0:	sbc	r3, r3, r3, lsl #1
   1c8a4:	bl	1c930 <__assert_fail@plt+0xb348>
   1c8a8:	ldr	lr, [sp, #4]
   1c8ac:	add	sp, sp, #8
   1c8b0:	pop	{r2, r3}
   1c8b4:	rsbs	r0, r0, #0
   1c8b8:	sbc	r1, r1, r1, lsl #1
   1c8bc:	bx	lr
   1c8c0:	rsbs	r2, r2, #0
   1c8c4:	sbc	r3, r3, r3, lsl #1
   1c8c8:	bl	1c930 <__assert_fail@plt+0xb348>
   1c8cc:	ldr	lr, [sp, #4]
   1c8d0:	add	sp, sp, #8
   1c8d4:	pop	{r2, r3}
   1c8d8:	rsbs	r2, r2, #0
   1c8dc:	sbc	r3, r3, r3, lsl #1
   1c8e0:	bx	lr
   1c8e4:	cmp	r3, #0
   1c8e8:	cmpeq	r2, #0
   1c8ec:	bne	1c904 <__assert_fail@plt+0xb31c>
   1c8f0:	cmp	r1, #0
   1c8f4:	cmpeq	r0, #0
   1c8f8:	mvnne	r1, #0
   1c8fc:	mvnne	r0, #0
   1c900:	b	1c920 <__assert_fail@plt+0xb338>
   1c904:	sub	sp, sp, #8
   1c908:	push	{sp, lr}
   1c90c:	bl	1c930 <__assert_fail@plt+0xb348>
   1c910:	ldr	lr, [sp, #4]
   1c914:	add	sp, sp, #8
   1c918:	pop	{r2, r3}
   1c91c:	bx	lr
   1c920:	push	{r1, lr}
   1c924:	mov	r0, #8
   1c928:	bl	112ac <raise@plt>
   1c92c:	pop	{r1, pc}
   1c930:	cmp	r1, r3
   1c934:	cmpeq	r0, r2
   1c938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c93c:	mov	r4, r0
   1c940:	movcc	r0, #0
   1c944:	mov	r5, r1
   1c948:	ldr	lr, [sp, #36]	; 0x24
   1c94c:	movcc	r1, r0
   1c950:	bcc	1ca4c <__assert_fail@plt+0xb464>
   1c954:	cmp	r3, #0
   1c958:	clzeq	ip, r2
   1c95c:	clzne	ip, r3
   1c960:	addeq	ip, ip, #32
   1c964:	cmp	r5, #0
   1c968:	clzeq	r1, r4
   1c96c:	addeq	r1, r1, #32
   1c970:	clzne	r1, r5
   1c974:	sub	ip, ip, r1
   1c978:	sub	sl, ip, #32
   1c97c:	lsl	r9, r3, ip
   1c980:	rsb	fp, ip, #32
   1c984:	orr	r9, r9, r2, lsl sl
   1c988:	orr	r9, r9, r2, lsr fp
   1c98c:	lsl	r8, r2, ip
   1c990:	cmp	r5, r9
   1c994:	cmpeq	r4, r8
   1c998:	movcc	r0, #0
   1c99c:	movcc	r1, r0
   1c9a0:	bcc	1c9bc <__assert_fail@plt+0xb3d4>
   1c9a4:	mov	r0, #1
   1c9a8:	subs	r4, r4, r8
   1c9ac:	lsl	r1, r0, sl
   1c9b0:	orr	r1, r1, r0, lsr fp
   1c9b4:	lsl	r0, r0, ip
   1c9b8:	sbc	r5, r5, r9
   1c9bc:	cmp	ip, #0
   1c9c0:	beq	1ca4c <__assert_fail@plt+0xb464>
   1c9c4:	lsr	r6, r8, #1
   1c9c8:	orr	r6, r6, r9, lsl #31
   1c9cc:	lsr	r7, r9, #1
   1c9d0:	mov	r2, ip
   1c9d4:	b	1c9f8 <__assert_fail@plt+0xb410>
   1c9d8:	subs	r3, r4, r6
   1c9dc:	sbc	r8, r5, r7
   1c9e0:	adds	r3, r3, r3
   1c9e4:	adc	r8, r8, r8
   1c9e8:	adds	r4, r3, #1
   1c9ec:	adc	r5, r8, #0
   1c9f0:	subs	r2, r2, #1
   1c9f4:	beq	1ca14 <__assert_fail@plt+0xb42c>
   1c9f8:	cmp	r5, r7
   1c9fc:	cmpeq	r4, r6
   1ca00:	bcs	1c9d8 <__assert_fail@plt+0xb3f0>
   1ca04:	adds	r4, r4, r4
   1ca08:	adc	r5, r5, r5
   1ca0c:	subs	r2, r2, #1
   1ca10:	bne	1c9f8 <__assert_fail@plt+0xb410>
   1ca14:	lsr	r3, r4, ip
   1ca18:	orr	r3, r3, r5, lsl fp
   1ca1c:	lsr	r2, r5, ip
   1ca20:	orr	r3, r3, r5, lsr sl
   1ca24:	adds	r0, r0, r4
   1ca28:	mov	r4, r3
   1ca2c:	lsl	r3, r2, ip
   1ca30:	orr	r3, r3, r4, lsl sl
   1ca34:	lsl	ip, r4, ip
   1ca38:	orr	r3, r3, r4, lsr fp
   1ca3c:	adc	r1, r1, r5
   1ca40:	subs	r0, r0, ip
   1ca44:	mov	r5, r2
   1ca48:	sbc	r1, r1, r3
   1ca4c:	cmp	lr, #0
   1ca50:	strdne	r4, [lr]
   1ca54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ca5c:	mov	r7, r0
   1ca60:	ldr	r6, [pc, #72]	; 1cab0 <__assert_fail@plt+0xb4c8>
   1ca64:	ldr	r5, [pc, #72]	; 1cab4 <__assert_fail@plt+0xb4cc>
   1ca68:	add	r6, pc, r6
   1ca6c:	add	r5, pc, r5
   1ca70:	sub	r6, r6, r5
   1ca74:	mov	r8, r1
   1ca78:	mov	r9, r2
   1ca7c:	bl	11268 <fstatfs64@plt-0x20>
   1ca80:	asrs	r6, r6, #2
   1ca84:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ca88:	mov	r4, #0
   1ca8c:	add	r4, r4, #1
   1ca90:	ldr	r3, [r5], #4
   1ca94:	mov	r2, r9
   1ca98:	mov	r1, r8
   1ca9c:	mov	r0, r7
   1caa0:	blx	r3
   1caa4:	cmp	r6, r4
   1caa8:	bne	1ca8c <__assert_fail@plt+0xb4a4>
   1caac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cab0:	muleq	r1, ip, r4
   1cab4:	muleq	r1, r4, r4
   1cab8:	bx	lr
   1cabc:	ldr	r3, [pc, #12]	; 1cad0 <__assert_fail@plt+0xb4e8>
   1cac0:	mov	r1, #0
   1cac4:	add	r3, pc, r3
   1cac8:	ldr	r2, [r3]
   1cacc:	b	114bc <__cxa_atexit@plt>
   1cad0:	andeq	r2, r1, r0, ror r6

Disassembly of section .fini:

0001cad4 <.fini>:
   1cad4:	push	{r3, lr}
   1cad8:	pop	{r3, pc}
