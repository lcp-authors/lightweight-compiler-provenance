
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010e14 <.init>:
   10e14:	push	{r3, lr}
   10e18:	bl	11134 <__assert_fail@plt+0x48>
   10e1c:	pop	{r3, pc}

Disassembly of section .plt:

00010e20 <fdopen@plt-0x14>:
   10e20:	push	{lr}		; (str lr, [sp, #-4]!)
   10e24:	ldr	lr, [pc, #4]	; 10e30 <fdopen@plt-0x4>
   10e28:	add	lr, pc, lr
   10e2c:	ldr	pc, [lr, #8]!
   10e30:	ldrdeq	r8, [r1], -r0

00010e34 <fdopen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e40 <calloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #456]!	; 0x1c8

00010e4c <fputs_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #448]!	; 0x1c0

00010e58 <raise@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #440]!	; 0x1b8

00010e64 <strcmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e70 <posix_fadvise64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #424]!	; 0x1a8

00010e7c <fflush@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #416]!	; 0x1a0

00010e88 <free@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #408]!	; 0x198

00010e94 <_exit@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #400]!	; 0x190

00010ea0 <memcpy@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #392]!	; 0x188

00010eac <__strtoull_internal@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #384]!	; 0x180

00010eb8 <mbsinit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #376]!	; 0x178

00010ec4 <fwrite_unlocked@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #368]!	; 0x170

00010ed0 <memcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #360]!	; 0x168

00010edc <fputc_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #352]!	; 0x160

00010ee8 <dcgettext@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #344]!	; 0x158

00010ef4 <realloc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #336]!	; 0x150

00010f00 <textdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #328]!	; 0x148

00010f0c <iswprint@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #320]!	; 0x140

00010f18 <fwrite@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #312]!	; 0x138

00010f24 <lseek64@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #304]!	; 0x130

00010f30 <__ctype_get_mb_cur_max@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #296]!	; 0x128

00010f3c <__fpending@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #24, 20	; 0x18000
   10f44:	ldr	pc, [ip, #288]!	; 0x120

00010f48 <mbrtowc@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #24, 20	; 0x18000
   10f50:	ldr	pc, [ip, #280]!	; 0x118

00010f54 <error@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #24, 20	; 0x18000
   10f5c:	ldr	pc, [ip, #272]!	; 0x110

00010f60 <strcoll@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #24, 20	; 0x18000
   10f68:	ldr	pc, [ip, #264]!	; 0x108

00010f6c <malloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #24, 20	; 0x18000
   10f74:	ldr	pc, [ip, #256]!	; 0x100

00010f78 <__libc_start_main@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #24, 20	; 0x18000
   10f80:	ldr	pc, [ip, #248]!	; 0xf8

00010f84 <__freading@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #24, 20	; 0x18000
   10f8c:	ldr	pc, [ip, #240]!	; 0xf0

00010f90 <__ctype_toupper_loc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #24, 20	; 0x18000
   10f98:	ldr	pc, [ip, #232]!	; 0xe8

00010f9c <__gmon_start__@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #24, 20	; 0x18000
   10fa4:	ldr	pc, [ip, #224]!	; 0xe0

00010fa8 <getopt_long@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #24, 20	; 0x18000
   10fb0:	ldr	pc, [ip, #216]!	; 0xd8

00010fb4 <__ctype_b_loc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #24, 20	; 0x18000
   10fbc:	ldr	pc, [ip, #208]!	; 0xd0

00010fc0 <exit@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #24, 20	; 0x18000
   10fc8:	ldr	pc, [ip, #200]!	; 0xc8

00010fcc <strtoul@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #24, 20	; 0x18000
   10fd4:	ldr	pc, [ip, #192]!	; 0xc0

00010fd8 <strlen@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #24, 20	; 0x18000
   10fe0:	ldr	pc, [ip, #184]!	; 0xb8

00010fe4 <strchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #24, 20	; 0x18000
   10fec:	ldr	pc, [ip, #176]!	; 0xb0

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #24, 20	; 0x18000
   10ff8:	ldr	pc, [ip, #168]!	; 0xa8

00010ffc <__cxa_atexit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #24, 20	; 0x18000
   11004:	ldr	pc, [ip, #160]!	; 0xa0

00011008 <memset@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #24, 20	; 0x18000
   11010:	ldr	pc, [ip, #152]!	; 0x98

00011014 <__printf_chk@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #24, 20	; 0x18000
   1101c:	ldr	pc, [ip, #144]!	; 0x90

00011020 <fileno@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #24, 20	; 0x18000
   11028:	ldr	pc, [ip, #136]!	; 0x88

0001102c <__fprintf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #24, 20	; 0x18000
   11034:	ldr	pc, [ip, #128]!	; 0x80

00011038 <memchr@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #24, 20	; 0x18000
   11040:	ldr	pc, [ip, #120]!	; 0x78

00011044 <fclose@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #24, 20	; 0x18000
   1104c:	ldr	pc, [ip, #112]!	; 0x70

00011050 <fseeko64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #24, 20	; 0x18000
   11058:	ldr	pc, [ip, #104]!	; 0x68

0001105c <fcntl64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #96]!	; 0x60

00011068 <__uflow@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #88]!	; 0x58

00011074 <__overflow@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #80]!	; 0x50

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #24, 20	; 0x18000
   11088:	ldr	pc, [ip, #72]!	; 0x48

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #24, 20	; 0x18000
   11094:	ldr	pc, [ip, #64]!	; 0x40

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #24, 20	; 0x18000
   110a0:	ldr	pc, [ip, #56]!	; 0x38

000110a4 <fopen64@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #24, 20	; 0x18000
   110ac:	ldr	pc, [ip, #48]!	; 0x30

000110b0 <strpbrk@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #24, 20	; 0x18000
   110b8:	ldr	pc, [ip, #40]!	; 0x28

000110bc <bindtextdomain@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #32]!

000110c8 <strncmp@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #24, 20	; 0x18000
   110d0:	ldr	pc, [ip, #24]!

000110d4 <abort@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #24, 20	; 0x18000
   110dc:	ldr	pc, [ip, #16]!

000110e0 <close@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #24, 20	; 0x18000
   110e8:	ldr	pc, [ip, #8]!

000110ec <__assert_fail@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #24, 20	; 0x18000
   110f4:	ldr	pc, [ip, #0]!

Disassembly of section .text:

000110f8 <.text>:
   110f8:	mov	fp, #0
   110fc:	mov	lr, #0
   11100:	pop	{r1}		; (ldr r1, [sp], #4)
   11104:	mov	r2, sp
   11108:	push	{r2}		; (str r2, [sp, #-4]!)
   1110c:	push	{r0}		; (str r0, [sp, #-4]!)
   11110:	ldr	ip, [pc, #16]	; 11128 <__assert_fail@plt+0x3c>
   11114:	push	{ip}		; (str ip, [sp, #-4]!)
   11118:	ldr	r0, [pc, #12]	; 1112c <__assert_fail@plt+0x40>
   1111c:	ldr	r3, [pc, #12]	; 11130 <__assert_fail@plt+0x44>
   11120:	bl	10f78 <__libc_start_main@plt>
   11124:	bl	110d4 <abort@plt>
   11128:	andeq	r7, r1, r0, lsr #14
   1112c:	andeq	r2, r1, r0, asr #6
   11130:	andeq	r7, r1, r0, asr #13
   11134:	ldr	r3, [pc, #20]	; 11150 <__assert_fail@plt+0x64>
   11138:	ldr	r2, [pc, #20]	; 11154 <__assert_fail@plt+0x68>
   1113c:	add	r3, pc, r3
   11140:	ldr	r2, [r3, r2]
   11144:	cmp	r2, #0
   11148:	bxeq	lr
   1114c:	b	10f9c <__gmon_start__@plt>
   11150:			; <UNDEFINED> instruction: 0x00017ebc
   11154:	strdeq	r0, [r0], -r8
   11158:	ldr	r3, [pc, #28]	; 1117c <__assert_fail@plt+0x90>
   1115c:	ldr	r0, [pc, #28]	; 11180 <__assert_fail@plt+0x94>
   11160:	sub	r3, r3, r0
   11164:	cmp	r3, #6
   11168:	bxls	lr
   1116c:	ldr	r3, [pc, #16]	; 11184 <__assert_fail@plt+0x98>
   11170:	cmp	r3, #0
   11174:	bxeq	lr
   11178:	bx	r3
   1117c:	andeq	r9, r2, r3, ror #2
   11180:	andeq	r9, r2, r0, ror #2
   11184:	andeq	r0, r0, r0
   11188:	ldr	r1, [pc, #36]	; 111b4 <__assert_fail@plt+0xc8>
   1118c:	ldr	r0, [pc, #36]	; 111b8 <__assert_fail@plt+0xcc>
   11190:	sub	r1, r1, r0
   11194:	asr	r1, r1, #2
   11198:	add	r1, r1, r1, lsr #31
   1119c:	asrs	r1, r1, #1
   111a0:	bxeq	lr
   111a4:	ldr	r3, [pc, #16]	; 111bc <__assert_fail@plt+0xd0>
   111a8:	cmp	r3, #0
   111ac:	bxeq	lr
   111b0:	bx	r3
   111b4:	andeq	r9, r2, r0, ror #2
   111b8:	andeq	r9, r2, r0, ror #2
   111bc:	andeq	r0, r0, r0
   111c0:	push	{r4, lr}
   111c4:	ldr	r4, [pc, #24]	; 111e4 <__assert_fail@plt+0xf8>
   111c8:	ldrb	r3, [r4]
   111cc:	cmp	r3, #0
   111d0:	popne	{r4, pc}
   111d4:	bl	11158 <__assert_fail@plt+0x6c>
   111d8:	mov	r3, #1
   111dc:	strb	r3, [r4]
   111e0:	pop	{r4, pc}
   111e4:	andeq	r9, r2, r4, lsl #3
   111e8:	ldr	r0, [pc, #40]	; 11218 <__assert_fail@plt+0x12c>
   111ec:	ldr	r3, [r0]
   111f0:	cmp	r3, #0
   111f4:	bne	111fc <__assert_fail@plt+0x110>
   111f8:	b	11188 <__assert_fail@plt+0x9c>
   111fc:	ldr	r3, [pc, #24]	; 1121c <__assert_fail@plt+0x130>
   11200:	cmp	r3, #0
   11204:	beq	111f8 <__assert_fail@plt+0x10c>
   11208:	push	{r4, lr}
   1120c:	blx	r3
   11210:	pop	{r4, lr}
   11214:	b	11188 <__assert_fail@plt+0x9c>
   11218:	andeq	r8, r2, r4, lsl pc
   1121c:	andeq	r0, r0, r0
   11220:	push	{r4, r5, lr}
   11224:	sub	sp, sp, #12
   11228:	ldr	r5, [r0]
   1122c:	cmp	r5, r1
   11230:	cmnne	r5, #1
   11234:	bne	11244 <__assert_fail@plt+0x158>
   11238:	str	r1, [r0]
   1123c:	add	sp, sp, #12
   11240:	pop	{r4, r5, pc}
   11244:	mov	r4, r1
   11248:	mov	r2, #5
   1124c:	ldr	r1, [pc, #32]	; 11274 <__assert_fail@plt+0x188>
   11250:	mov	r0, #0
   11254:	bl	10ee8 <dcgettext@plt>
   11258:	add	r1, r4, #1
   1125c:	str	r1, [sp]
   11260:	add	r3, r5, #1
   11264:	mov	r2, r0
   11268:	mov	r1, #0
   1126c:	mov	r0, #1
   11270:	bl	10f54 <error@plt>
   11274:	andeq	r7, r1, ip, lsl #16
   11278:	push	{r4, r5, r6, lr}
   1127c:	subs	r4, r0, #0
   11280:	popeq	{r4, r5, r6, pc}
   11284:	ldr	r0, [r4, #20]
   11288:	bl	13494 <__assert_fail@plt+0x23a8>
   1128c:	mov	r5, #0
   11290:	str	r5, [r4, #20]
   11294:	ldr	r0, [r4, #8]
   11298:	bl	13494 <__assert_fail@plt+0x23a8>
   1129c:	str	r5, [r4, #8]
   112a0:	pop	{r4, r5, r6, pc}
   112a4:	push	{r4, lr}
   112a8:	ldr	r3, [pc, #60]	; 112ec <__assert_fail@plt+0x200>
   112ac:	ldr	r0, [r3]
   112b0:	cmp	r0, #0
   112b4:	beq	112c8 <__assert_fail@plt+0x1dc>
   112b8:	bl	11278 <__assert_fail@plt+0x18c>
   112bc:	ldr	r3, [pc, #40]	; 112ec <__assert_fail@plt+0x200>
   112c0:	ldr	r0, [r3]
   112c4:	bl	13494 <__assert_fail@plt+0x23a8>
   112c8:	ldr	r3, [pc, #28]	; 112ec <__assert_fail@plt+0x200>
   112cc:	ldr	r0, [r3, #4]
   112d0:	cmp	r0, #0
   112d4:	popeq	{r4, pc}
   112d8:	bl	11278 <__assert_fail@plt+0x18c>
   112dc:	ldr	r3, [pc, #8]	; 112ec <__assert_fail@plt+0x200>
   112e0:	ldr	r0, [r3, #4]
   112e4:	bl	13494 <__assert_fail@plt+0x23a8>
   112e8:	pop	{r4, pc}
   112ec:	andeq	r9, r2, r8, lsl #3
   112f0:	push	{r4, r5, r6, lr}
   112f4:	mov	r5, r0
   112f8:	ldr	r3, [r0, #4]
   112fc:	cmp	r3, #0
   11300:	beq	11330 <__assert_fail@plt+0x244>
   11304:	mov	r4, #0
   11308:	ldr	r3, [r5, #8]
   1130c:	ldr	r0, [r3, r4, lsl #2]
   11310:	bl	11278 <__assert_fail@plt+0x18c>
   11314:	ldr	r3, [r5, #8]
   11318:	ldr	r0, [r3, r4, lsl #2]
   1131c:	bl	13494 <__assert_fail@plt+0x23a8>
   11320:	add	r4, r4, #1
   11324:	ldr	r3, [r5, #4]
   11328:	cmp	r3, r4
   1132c:	bhi	11308 <__assert_fail@plt+0x21c>
   11330:	ldr	r0, [r5, #8]
   11334:	bl	13494 <__assert_fail@plt+0x23a8>
   11338:	pop	{r4, r5, r6, pc}
   1133c:	push	{r4, r5, lr}
   11340:	sub	sp, sp, #20
   11344:	mov	r4, r0
   11348:	ldr	r3, [pc, #144]	; 113e0 <__assert_fail@plt+0x2f4>
   1134c:	str	r3, [sp]
   11350:	add	r3, sp, #8
   11354:	mov	r2, #10
   11358:	mov	r1, #0
   1135c:	bl	166a8 <__assert_fail@plt+0x55bc>
   11360:	cmp	r0, #1
   11364:	beq	113a0 <__assert_fail@plt+0x2b4>
   11368:	cmp	r0, #0
   1136c:	bne	113b0 <__assert_fail@plt+0x2c4>
   11370:	ldrd	r2, [sp, #8]
   11374:	mvn	r0, #0
   11378:	mov	r1, #0
   1137c:	cmp	r3, r1
   11380:	cmpeq	r2, r0
   11384:	bhi	113a0 <__assert_fail@plt+0x2b4>
   11388:	orrs	r3, r2, r3
   1138c:	beq	113b0 <__assert_fail@plt+0x2c4>
   11390:	ldr	r0, [sp, #8]
   11394:	sub	r0, r0, #1
   11398:	add	sp, sp, #20
   1139c:	pop	{r4, r5, pc}
   113a0:	mvn	r2, #0
   113a4:	mov	r3, #0
   113a8:	strd	r2, [sp, #8]
   113ac:	b	11390 <__assert_fail@plt+0x2a4>
   113b0:	mov	r2, #5
   113b4:	ldr	r1, [pc, #40]	; 113e4 <__assert_fail@plt+0x2f8>
   113b8:	mov	r0, #0
   113bc:	bl	10ee8 <dcgettext@plt>
   113c0:	mov	r5, r0
   113c4:	mov	r0, r4
   113c8:	bl	152dc <__assert_fail@plt+0x41f0>
   113cc:	mov	r3, r0
   113d0:	mov	r2, r5
   113d4:	mov	r1, #0
   113d8:	mov	r0, #1
   113dc:	bl	10f54 <error@plt>
   113e0:	andeq	r7, r1, r0, ror lr
   113e4:	andeq	r7, r1, r0, lsr r8
   113e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   113ec:	mov	sl, r0
   113f0:	ldr	r8, [pc, #376]	; 11570 <__assert_fail@plt+0x484>
   113f4:	mov	r5, #0
   113f8:	mov	r9, #12
   113fc:	ldr	r7, [pc, #368]	; 11574 <__assert_fail@plt+0x488>
   11400:	b	11444 <__assert_fail@plt+0x358>
   11404:	ldrb	r3, [sl, #1]
   11408:	cmp	r3, #0
   1140c:	bne	114c8 <__assert_fail@plt+0x3dc>
   11410:	mov	sl, r5
   11414:	mov	r4, r5
   11418:	mov	r0, r9
   1141c:	bl	15930 <__assert_fail@plt+0x4844>
   11420:	str	r4, [r0]
   11424:	str	sl, [r0, #4]
   11428:	str	r5, [r0, #8]
   1142c:	ldr	r3, [r7]
   11430:	str	r0, [r3, #8]
   11434:	str	r0, [r7]
   11438:	cmp	r6, #0
   1143c:	beq	1156c <__assert_fail@plt+0x480>
   11440:	mov	sl, r6
   11444:	mov	r1, r8
   11448:	mov	r0, sl
   1144c:	bl	110b0 <strpbrk@plt>
   11450:	cmp	r0, #0
   11454:	addne	r6, r0, #1
   11458:	strbne	r5, [r0]
   1145c:	moveq	r6, r0
   11460:	ldrb	r3, [sl]
   11464:	cmp	r3, #48	; 0x30
   11468:	beq	11404 <__assert_fail@plt+0x318>
   1146c:	bcc	11528 <__assert_fail@plt+0x43c>
   11470:	cmp	r3, #50	; 0x32
   11474:	bhi	11528 <__assert_fail@plt+0x43c>
   11478:	ldrb	r2, [sl, #1]
   1147c:	cmp	r2, #46	; 0x2e
   11480:	bne	114f8 <__assert_fail@plt+0x40c>
   11484:	sub	r4, r3, #48	; 0x30
   11488:	add	r0, sl, #2
   1148c:	bl	1133c <__assert_fail@plt+0x250>
   11490:	mov	sl, r0
   11494:	cmp	r4, #2
   11498:	bhi	11558 <__assert_fail@plt+0x46c>
   1149c:	clz	r3, r0
   114a0:	lsr	r3, r3, #5
   114a4:	cmp	r4, #0
   114a8:	orrne	r3, r3, #1
   114ac:	cmp	r3, #0
   114b0:	bne	11418 <__assert_fail@plt+0x32c>
   114b4:	ldr	r3, [pc, #188]	; 11578 <__assert_fail@plt+0x48c>
   114b8:	mov	r2, #820	; 0x334
   114bc:	ldr	r1, [pc, #184]	; 1157c <__assert_fail@plt+0x490>
   114c0:	ldr	r0, [pc, #184]	; 11580 <__assert_fail@plt+0x494>
   114c4:	bl	110ec <__assert_fail@plt>
   114c8:	mov	r2, #5
   114cc:	ldr	r1, [pc, #176]	; 11584 <__assert_fail@plt+0x498>
   114d0:	mov	r0, #0
   114d4:	bl	10ee8 <dcgettext@plt>
   114d8:	mov	r4, r0
   114dc:	mov	r0, sl
   114e0:	bl	152dc <__assert_fail@plt+0x41f0>
   114e4:	mov	r3, r0
   114e8:	mov	r2, r4
   114ec:	mov	r1, #0
   114f0:	mov	r0, #1
   114f4:	bl	10f54 <error@plt>
   114f8:	mov	r2, #5
   114fc:	ldr	r1, [pc, #128]	; 11584 <__assert_fail@plt+0x498>
   11500:	mov	r0, #0
   11504:	bl	10ee8 <dcgettext@plt>
   11508:	mov	r4, r0
   1150c:	mov	r0, sl
   11510:	bl	152dc <__assert_fail@plt+0x41f0>
   11514:	mov	r3, r0
   11518:	mov	r2, r4
   1151c:	mov	r1, #0
   11520:	mov	r0, #1
   11524:	bl	10f54 <error@plt>
   11528:	mov	r2, #5
   1152c:	ldr	r1, [pc, #84]	; 11588 <__assert_fail@plt+0x49c>
   11530:	mov	r0, #0
   11534:	bl	10ee8 <dcgettext@plt>
   11538:	mov	r4, r0
   1153c:	mov	r0, sl
   11540:	bl	152dc <__assert_fail@plt+0x41f0>
   11544:	mov	r3, r0
   11548:	mov	r2, r4
   1154c:	mov	r1, #0
   11550:	mov	r0, #1
   11554:	bl	10f54 <error@plt>
   11558:	ldr	r3, [pc, #24]	; 11578 <__assert_fail@plt+0x48c>
   1155c:	ldr	r2, [pc, #40]	; 1158c <__assert_fail@plt+0x4a0>
   11560:	ldr	r1, [pc, #20]	; 1157c <__assert_fail@plt+0x490>
   11564:	ldr	r0, [pc, #36]	; 11590 <__assert_fail@plt+0x4a4>
   11568:	bl	110ec <__assert_fail@plt>
   1156c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11570:	andeq	r7, r1, ip, asr #16
   11574:	andeq	r9, r2, r4, lsl #2
   11578:	andeq	r7, r1, r8, asr #14
   1157c:	muleq	r1, r4, r8
   11580:	andeq	r7, r1, r4, asr #17
   11584:	andeq	r7, r1, r0, asr r8
   11588:	andeq	r7, r1, ip, ror #16
   1158c:	andeq	r0, r0, r3, lsr r3
   11590:	andeq	r7, r1, r0, lsr #17
   11594:	push	{r4, r5, r6, lr}
   11598:	mov	r4, r0
   1159c:	mov	r6, r1
   115a0:	mov	r5, r2
   115a4:	ldr	r2, [r0, #12]
   115a8:	ldr	r3, [r0, #16]
   115ac:	cmp	r2, r3
   115b0:	bcs	115e0 <__assert_fail@plt+0x4f4>
   115b4:	ldr	r2, [r4, #12]
   115b8:	ldr	r3, [r4, #20]
   115bc:	str	r6, [r3, r2, lsl #3]
   115c0:	ldr	r2, [r4, #12]
   115c4:	ldr	r3, [r4, #20]
   115c8:	add	r3, r3, r2, lsl #3
   115cc:	str	r5, [r3, #4]
   115d0:	ldr	r3, [r4, #12]
   115d4:	add	r3, r3, #1
   115d8:	str	r3, [r4, #12]
   115dc:	pop	{r4, r5, r6, pc}
   115e0:	mov	r2, #8
   115e4:	add	r1, r0, #16
   115e8:	ldr	r0, [r0, #20]
   115ec:	bl	15a58 <__assert_fail@plt+0x496c>
   115f0:	str	r0, [r4, #20]
   115f4:	b	115b4 <__assert_fail@plt+0x4c8>
   115f8:	push	{r4, r5, r6, lr}
   115fc:	ldr	ip, [r0, #12]
   11600:	cmp	ip, r2
   11604:	bls	116e8 <__assert_fail@plt+0x5fc>
   11608:	ldr	r0, [r0, #20]
   1160c:	add	ip, r0, r2, lsl #3
   11610:	ldr	r0, [r0, r2, lsl #3]
   11614:	ldr	r4, [ip, #4]
   11618:	ldr	r2, [r1, #12]
   1161c:	cmp	r2, r3
   11620:	bls	116f8 <__assert_fail@plt+0x60c>
   11624:	ldr	r2, [r1, #20]
   11628:	add	r1, r2, r3, lsl #3
   1162c:	ldr	r5, [r1, #4]
   11630:	cmp	r4, #0
   11634:	beq	11680 <__assert_fail@plt+0x594>
   11638:	cmp	r5, #0
   1163c:	beq	116c0 <__assert_fail@plt+0x5d4>
   11640:	ldr	r1, [r2, r3, lsl #3]
   11644:	ldr	r3, [pc, #192]	; 1170c <__assert_fail@plt+0x620>
   11648:	ldrb	r3, [r3, #8]
   1164c:	cmp	r3, #0
   11650:	beq	11688 <__assert_fail@plt+0x59c>
   11654:	cmp	r4, r5
   11658:	movcc	r2, r4
   1165c:	movcs	r2, r5
   11660:	bl	13738 <__assert_fail@plt+0x264c>
   11664:	cmp	r0, #0
   11668:	popne	{r4, r5, r6, pc}
   1166c:	cmp	r4, r5
   11670:	bcc	116c8 <__assert_fail@plt+0x5dc>
   11674:	subs	r0, r4, r5
   11678:	movne	r0, #1
   1167c:	pop	{r4, r5, r6, pc}
   11680:	mov	r4, r5
   11684:	b	11700 <__assert_fail@plt+0x614>
   11688:	ldr	r3, [pc, #124]	; 1170c <__assert_fail@plt+0x620>
   1168c:	ldrb	r3, [r3, #9]
   11690:	cmp	r3, #0
   11694:	bne	116ac <__assert_fail@plt+0x5c0>
   11698:	cmp	r4, r5
   1169c:	movcc	r2, r4
   116a0:	movcs	r2, r5
   116a4:	bl	10ed0 <memcmp@plt>
   116a8:	b	11664 <__assert_fail@plt+0x578>
   116ac:	mov	r3, r5
   116b0:	mov	r2, r1
   116b4:	mov	r1, r4
   116b8:	bl	15fe4 <__assert_fail@plt+0x4ef8>
   116bc:	pop	{r4, r5, r6, pc}
   116c0:	mov	r0, #1
   116c4:	pop	{r4, r5, r6, pc}
   116c8:	mvn	r0, #0
   116cc:	pop	{r4, r5, r6, pc}
   116d0:	mov	r0, #1
   116d4:	pop	{r4, r5, r6, pc}
   116d8:	ldr	r2, [r1, #20]
   116dc:	add	r3, r2, r3, lsl #3
   116e0:	ldr	r4, [r3, #4]
   116e4:	b	11700 <__assert_fail@plt+0x614>
   116e8:	ldr	r2, [r1, #12]
   116ec:	cmp	r3, r2
   116f0:	movcs	r4, #0
   116f4:	bcc	116d8 <__assert_fail@plt+0x5ec>
   116f8:	cmp	r4, #0
   116fc:	bne	116d0 <__assert_fail@plt+0x5e4>
   11700:	adds	r0, r4, #0
   11704:	mvnne	r0, #0
   11708:	pop	{r4, r5, r6, pc}
   1170c:	andeq	r9, r2, r8, lsl #3
   11710:	push	{r4, lr}
   11714:	ldr	r3, [r1, #12]
   11718:	cmp	r3, r0
   1171c:	bls	1176c <__assert_fail@plt+0x680>
   11720:	ldr	ip, [r1, #20]
   11724:	add	r3, ip, r0, lsl #3
   11728:	ldr	r2, [r3, #4]
   1172c:	cmp	r2, #0
   11730:	beq	1174c <__assert_fail@plt+0x660>
   11734:	ldr	r3, [pc, #80]	; 1178c <__assert_fail@plt+0x6a0>
   11738:	ldr	r3, [r3]
   1173c:	mov	r1, #1
   11740:	ldr	r0, [ip, r0, lsl #3]
   11744:	bl	10ec4 <fwrite_unlocked@plt>
   11748:	pop	{r4, pc}
   1174c:	ldr	r3, [pc, #60]	; 11790 <__assert_fail@plt+0x6a4>
   11750:	ldr	r0, [r3, #12]
   11754:	cmp	r0, #0
   11758:	popeq	{r4, pc}
   1175c:	ldr	r3, [pc, #40]	; 1178c <__assert_fail@plt+0x6a0>
   11760:	ldr	r1, [r3]
   11764:	bl	10e4c <fputs_unlocked@plt>
   11768:	pop	{r4, pc}
   1176c:	ldr	r3, [pc, #28]	; 11790 <__assert_fail@plt+0x6a4>
   11770:	ldr	r0, [r3, #12]
   11774:	cmp	r0, #0
   11778:	popeq	{r4, pc}
   1177c:	ldr	r3, [pc, #8]	; 1178c <__assert_fail@plt+0x6a0>
   11780:	ldr	r1, [r3]
   11784:	bl	10e4c <fputs_unlocked@plt>
   11788:	pop	{r4, pc}
   1178c:	andeq	r9, r2, ip, ror r1
   11790:	andeq	r9, r2, r8, lsl #3
   11794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11798:	sub	sp, sp, #12
   1179c:	mov	r6, r0
   117a0:	mov	r4, r1
   117a4:	ldr	r3, [pc, #236]	; 11898 <__assert_fail@plt+0x7ac>
   117a8:	ldrb	r3, [r3, #16]
   117ac:	cmp	r3, #0
   117b0:	ldreq	r8, [r0, #12]
   117b4:	movne	r8, r2
   117b8:	ldr	r3, [pc, #220]	; 1189c <__assert_fail@plt+0x7b0>
   117bc:	ldr	fp, [r3, #4]
   117c0:	cmp	fp, #0
   117c4:	movlt	fp, #32
   117c8:	uxtb	r7, fp
   117cc:	cmp	r8, r1
   117d0:	movcc	r9, r8
   117d4:	movcs	r9, r1
   117d8:	cmp	r9, #0
   117dc:	beq	11834 <__assert_fail@plt+0x748>
   117e0:	mov	r5, #0
   117e4:	ldr	sl, [pc, #180]	; 118a0 <__assert_fail@plt+0x7b4>
   117e8:	str	r7, [sp, #4]
   117ec:	b	11808 <__assert_fail@plt+0x71c>
   117f0:	mov	r1, r6
   117f4:	mov	r0, r5
   117f8:	bl	11710 <__assert_fail@plt+0x624>
   117fc:	add	r5, r5, #1
   11800:	cmp	r5, r9
   11804:	beq	11834 <__assert_fail@plt+0x748>
   11808:	ldr	r0, [sl]
   1180c:	ldr	r3, [r0, #20]
   11810:	ldr	r2, [r0, #24]
   11814:	cmp	r3, r2
   11818:	addcc	r2, r3, #1
   1181c:	strcc	r2, [r0, #20]
   11820:	strbcc	r7, [r3]
   11824:	bcc	117f0 <__assert_fail@plt+0x704>
   11828:	ldr	r1, [sp, #4]
   1182c:	bl	11074 <__overflow@plt>
   11830:	b	117f0 <__assert_fail@plt+0x704>
   11834:	add	r4, r4, #1
   11838:	cmp	r8, r4
   1183c:	bls	11890 <__assert_fail@plt+0x7a4>
   11840:	ldr	r5, [pc, #88]	; 118a0 <__assert_fail@plt+0x7b4>
   11844:	uxtb	fp, fp
   11848:	b	11864 <__assert_fail@plt+0x778>
   1184c:	mov	r1, r6
   11850:	mov	r0, r4
   11854:	bl	11710 <__assert_fail@plt+0x624>
   11858:	add	r4, r4, #1
   1185c:	cmp	r8, r4
   11860:	bls	11890 <__assert_fail@plt+0x7a4>
   11864:	ldr	r0, [r5]
   11868:	ldr	r3, [r0, #20]
   1186c:	ldr	r2, [r0, #24]
   11870:	cmp	r3, r2
   11874:	addcc	r2, r3, #1
   11878:	strcc	r2, [r0, #20]
   1187c:	strbcc	r7, [r3]
   11880:	bcc	1184c <__assert_fail@plt+0x760>
   11884:	mov	r1, fp
   11888:	bl	11074 <__overflow@plt>
   1188c:	b	1184c <__assert_fail@plt+0x760>
   11890:	add	sp, sp, #12
   11894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11898:	andeq	r9, r2, r8, lsl #3
   1189c:	andeq	r9, r2, r4, lsl #2
   118a0:	andeq	r9, r2, ip, ror r1
   118a4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118a8:	mov	r5, r0
   118ac:	mov	r9, r1
   118b0:	ldr	r3, [pc, #336]	; 11a08 <__assert_fail@plt+0x91c>
   118b4:	ldr	r8, [r3, #4]
   118b8:	cmp	r8, #0
   118bc:	movlt	r8, #32
   118c0:	ldr	r3, [pc, #324]	; 11a0c <__assert_fail@plt+0x920>
   118c4:	ldr	r4, [r3, #28]
   118c8:	cmp	r4, #0
   118cc:	beq	11990 <__assert_fail@plt+0x8a4>
   118d0:	uxtb	r7, r8
   118d4:	add	fp, r3, #32
   118d8:	ldr	sl, [pc, #296]	; 11a08 <__assert_fail@plt+0x91c>
   118dc:	ldr	r6, [pc, #300]	; 11a10 <__assert_fail@plt+0x924>
   118e0:	mov	r8, r7
   118e4:	b	11928 <__assert_fail@plt+0x83c>
   118e8:	cmp	r1, #1
   118ec:	moveq	r1, r5
   118f0:	movne	r1, r9
   118f4:	ldr	r0, [r4, #4]
   118f8:	bl	11710 <__assert_fail@plt+0x624>
   118fc:	ldr	r4, [r4, #8]
   11900:	cmp	r4, #0
   11904:	beq	11958 <__assert_fail@plt+0x86c>
   11908:	ldr	r0, [r6]
   1190c:	ldr	r3, [r0, #20]
   11910:	ldr	r2, [r0, #24]
   11914:	cmp	r3, r2
   11918:	addcc	r2, r3, #1
   1191c:	strcc	r2, [r0, #20]
   11920:	strbcc	r7, [r3]
   11924:	bcs	1194c <__assert_fail@plt+0x860>
   11928:	ldr	r1, [r4]
   1192c:	cmp	r1, #0
   11930:	bne	118e8 <__assert_fail@plt+0x7fc>
   11934:	cmp	r5, fp
   11938:	ldreq	r0, [sl, #8]
   1193c:	moveq	r1, r9
   11940:	ldrne	r0, [sl, #12]
   11944:	movne	r1, r5
   11948:	b	118f8 <__assert_fail@plt+0x80c>
   1194c:	mov	r1, r8
   11950:	bl	11074 <__overflow@plt>
   11954:	b	11928 <__assert_fail@plt+0x83c>
   11958:	ldr	r3, [pc, #168]	; 11a08 <__assert_fail@plt+0x91c>
   1195c:	ldrb	r1, [r3, #16]
   11960:	ldr	r3, [pc, #168]	; 11a10 <__assert_fail@plt+0x924>
   11964:	ldr	r0, [r3]
   11968:	ldr	r3, [r0, #20]
   1196c:	ldr	r2, [r0, #24]
   11970:	cmp	r3, r2
   11974:	bcs	11988 <__assert_fail@plt+0x89c>
   11978:	add	r2, r3, #1
   1197c:	str	r2, [r0, #20]
   11980:	strb	r1, [r3]
   11984:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11988:	bl	11074 <__overflow@plt>
   1198c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11990:	ldr	r3, [pc, #124]	; 11a14 <__assert_fail@plt+0x928>
   11994:	cmp	r0, r3
   11998:	ldr	r3, [pc, #104]	; 11a08 <__assert_fail@plt+0x91c>
   1199c:	ldreq	r0, [r3, #8]
   119a0:	ldrne	r0, [r3, #12]
   119a4:	movne	r1, r5
   119a8:	bl	11710 <__assert_fail@plt+0x624>
   119ac:	ldr	r6, [pc, #88]	; 11a0c <__assert_fail@plt+0x920>
   119b0:	ldr	r4, [pc, #80]	; 11a08 <__assert_fail@plt+0x91c>
   119b4:	ldr	r2, [r6, #56]	; 0x38
   119b8:	ldr	r1, [r4, #12]
   119bc:	mov	r0, r5
   119c0:	bl	11794 <__assert_fail@plt+0x6a8>
   119c4:	ldr	r2, [r6, #60]	; 0x3c
   119c8:	ldr	r1, [r4, #8]
   119cc:	mov	r0, r9
   119d0:	bl	11794 <__assert_fail@plt+0x6a8>
   119d4:	ldrb	r1, [r4, #16]
   119d8:	ldr	r3, [pc, #48]	; 11a10 <__assert_fail@plt+0x924>
   119dc:	ldr	r0, [r3]
   119e0:	ldr	r3, [r0, #20]
   119e4:	ldr	r2, [r0, #24]
   119e8:	cmp	r3, r2
   119ec:	bcs	11a00 <__assert_fail@plt+0x914>
   119f0:	add	r2, r3, #1
   119f4:	str	r2, [r0, #20]
   119f8:	strb	r1, [r3]
   119fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a00:	bl	11074 <__overflow@plt>
   11a04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a08:	andeq	r9, r2, r4, lsl #2
   11a0c:	andeq	r9, r2, r8, lsl #3
   11a10:	andeq	r9, r2, ip, ror r1
   11a14:	andeq	r9, r2, r8, lsr #3
   11a18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11a1c:	sub	sp, sp, #16
   11a20:	mov	r4, r0
   11a24:	mov	r6, r1
   11a28:	mov	r9, r2
   11a2c:	ldr	r5, [r1]
   11a30:	sub	r8, r2, #1
   11a34:	ldr	r3, [pc, #896]	; 11dbc <__assert_fail@plt+0xcd0>
   11a38:	add	r3, r3, r8, lsl #2
   11a3c:	ldr	r3, [r3, #64]	; 0x40
   11a40:	cmp	r5, r3
   11a44:	ldreq	r2, [pc, #880]	; 11dbc <__assert_fail@plt+0xcd0>
   11a48:	ldreq	r3, [r2, r8, lsl #2]
   11a4c:	streq	r5, [r2, r8, lsl #2]
   11a50:	streq	r3, [r1]
   11a54:	moveq	r5, r3
   11a58:	cmp	r5, #0
   11a5c:	beq	11b18 <__assert_fail@plt+0xa2c>
   11a60:	mov	r3, #0
   11a64:	str	r3, [r5, #12]
   11a68:	ldr	r3, [pc, #848]	; 11dc0 <__assert_fail@plt+0xcd4>
   11a6c:	ldrb	r2, [r3, #16]
   11a70:	mov	r1, r4
   11a74:	mov	r0, r5
   11a78:	bl	13608 <__assert_fail@plt+0x251c>
   11a7c:	cmp	r0, #0
   11a80:	beq	11b30 <__assert_fail@plt+0xa44>
   11a84:	ldr	r1, [pc, #816]	; 11dbc <__assert_fail@plt+0xcd0>
   11a88:	add	r1, r1, r8, lsl #3
   11a8c:	ldrd	r2, [r1, #72]	; 0x48
   11a90:	adds	r2, r2, #1
   11a94:	adc	r3, r3, #0
   11a98:	strd	r2, [r1, #72]	; 0x48
   11a9c:	ldr	r4, [r5, #8]
   11aa0:	ldr	r6, [r5, #4]
   11aa4:	sub	r6, r6, #1
   11aa8:	add	r6, r4, r6
   11aac:	cmp	r4, r6
   11ab0:	beq	11bb0 <__assert_fail@plt+0xac4>
   11ab4:	ldr	r3, [pc, #772]	; 11dc0 <__assert_fail@plt+0xcd4>
   11ab8:	ldr	r3, [r3, #4]
   11abc:	mvn	r2, r3
   11ac0:	lsr	r2, r2, #31
   11ac4:	cmp	r3, #10
   11ac8:	moveq	r2, #0
   11acc:	cmp	r2, #0
   11ad0:	bne	11cc8 <__assert_fail@plt+0xbdc>
   11ad4:	cmp	r3, #0
   11ad8:	bge	11ba0 <__assert_fail@plt+0xab4>
   11adc:	bl	10fb4 <__ctype_b_loc@plt>
   11ae0:	mov	sl, r0
   11ae4:	ldr	r0, [r0]
   11ae8:	mov	r3, r4
   11aec:	mov	r4, r3
   11af0:	ldrb	r1, [r3], #1
   11af4:	lsl	r2, r1, #1
   11af8:	ldrh	r2, [r0, r2]
   11afc:	cmp	r1, #10
   11b00:	orreq	r2, r2, #1
   11b04:	tst	r2, #1
   11b08:	beq	11cd0 <__assert_fail@plt+0xbe4>
   11b0c:	cmp	r6, r3
   11b10:	bne	11aec <__assert_fail@plt+0xa00>
   11b14:	b	11bb0 <__assert_fail@plt+0xac4>
   11b18:	mov	r1, #24
   11b1c:	mov	r0, #1
   11b20:	bl	15dfc <__assert_fail@plt+0x4d10>
   11b24:	mov	r5, r0
   11b28:	str	r0, [r6]
   11b2c:	b	11a68 <__assert_fail@plt+0x97c>
   11b30:	ldr	r3, [r4]
   11b34:	tst	r3, #32
   11b38:	bne	11b4c <__assert_fail@plt+0xa60>
   11b3c:	mov	r0, r5
   11b40:	bl	11278 <__assert_fail@plt+0x18c>
   11b44:	mov	r0, #0
   11b48:	b	11cc0 <__assert_fail@plt+0xbd4>
   11b4c:	bl	10ff0 <__errno_location@plt>
   11b50:	ldr	r4, [r0]
   11b54:	mov	r2, #5
   11b58:	ldr	r1, [pc, #612]	; 11dc4 <__assert_fail@plt+0xcd8>
   11b5c:	mov	r0, #0
   11b60:	bl	10ee8 <dcgettext@plt>
   11b64:	mov	r2, r0
   11b68:	mov	r1, r4
   11b6c:	mov	r0, #1
   11b70:	bl	10f54 <error@plt>
   11b74:	sub	r2, r7, r4
   11b78:	mov	r1, r4
   11b7c:	mov	r0, r5
   11b80:	bl	11594 <__assert_fail@plt+0x4a8>
   11b84:	add	r4, r7, #1
   11b88:	sub	r2, r6, r4
   11b8c:	ldr	r1, [sl, #4]
   11b90:	mov	r0, r4
   11b94:	bl	11038 <memchr@plt>
   11b98:	subs	r7, r0, #0
   11b9c:	bne	11b74 <__assert_fail@plt+0xa88>
   11ba0:	sub	r2, r6, r4
   11ba4:	mov	r1, r4
   11ba8:	mov	r0, r5
   11bac:	bl	11594 <__assert_fail@plt+0x4a8>
   11bb0:	ldr	r3, [pc, #516]	; 11dbc <__assert_fail@plt+0xcd0>
   11bb4:	add	r3, r3, r8, lsl #2
   11bb8:	ldr	r0, [r3, #64]	; 0x40
   11bbc:	cmp	r0, #0
   11bc0:	beq	11cb0 <__assert_fail@plt+0xbc4>
   11bc4:	ldr	r3, [pc, #496]	; 11dbc <__assert_fail@plt+0xcd0>
   11bc8:	ldr	r3, [r3, #88]	; 0x58
   11bcc:	cmp	r3, #2
   11bd0:	beq	11cb0 <__assert_fail@plt+0xbc4>
   11bd4:	cmp	r3, #1
   11bd8:	beq	11bec <__assert_fail@plt+0xb00>
   11bdc:	ldr	r3, [pc, #472]	; 11dbc <__assert_fail@plt+0xcd0>
   11be0:	ldrb	r3, [r3, #92]	; 0x5c
   11be4:	cmp	r3, #0
   11be8:	beq	11cb0 <__assert_fail@plt+0xbc4>
   11bec:	ldr	r3, [pc, #456]	; 11dbc <__assert_fail@plt+0xcd0>
   11bf0:	add	r3, r3, r8
   11bf4:	ldrb	r3, [r3, #96]	; 0x60
   11bf8:	cmp	r3, #0
   11bfc:	bne	11cb0 <__assert_fail@plt+0xbc4>
   11c00:	cmp	r9, #1
   11c04:	ldr	r3, [pc, #436]	; 11dc0 <__assert_fail@plt+0xcd4>
   11c08:	ldreq	r2, [r3, #12]
   11c0c:	ldrne	r2, [r3, #8]
   11c10:	mov	r3, r2
   11c14:	mov	r1, r5
   11c18:	bl	115f8 <__assert_fail@plt+0x50c>
   11c1c:	cmp	r0, #0
   11c20:	ble	11cb0 <__assert_fail@plt+0xbc4>
   11c24:	ldr	r6, [r5, #4]
   11c28:	cmp	r6, #0
   11c2c:	beq	11c4c <__assert_fail@plt+0xb60>
   11c30:	sub	r3, r6, #1
   11c34:	ldr	r2, [r5, #8]
   11c38:	ldrb	r2, [r2, r3]
   11c3c:	cmp	r2, #10
   11c40:	moveq	r6, r3
   11c44:	cmp	r6, #0
   11c48:	mvnlt	r6, #-2147483648	; 0x80000000
   11c4c:	ldr	r4, [pc, #360]	; 11dbc <__assert_fail@plt+0xcd0>
   11c50:	ldr	r7, [r4, #88]	; 0x58
   11c54:	cmp	r7, #1
   11c58:	movne	r7, #0
   11c5c:	moveq	r7, #1
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #348]	; 11dc8 <__assert_fail@plt+0xcdc>
   11c68:	mov	r0, #0
   11c6c:	bl	10ee8 <dcgettext@plt>
   11c70:	add	r3, r4, r8, lsl #2
   11c74:	ldr	r1, [r3, #100]	; 0x64
   11c78:	ldr	r3, [r5, #8]
   11c7c:	str	r3, [sp, #12]
   11c80:	str	r6, [sp, #8]
   11c84:	add	r3, r4, r8, lsl #3
   11c88:	ldrd	r2, [r3, #72]	; 0x48
   11c8c:	strd	r2, [sp]
   11c90:	mov	r3, r1
   11c94:	mov	r2, r0
   11c98:	mov	r1, #0
   11c9c:	mov	r0, r7
   11ca0:	bl	10f54 <error@plt>
   11ca4:	add	r4, r4, r8
   11ca8:	mov	r3, #1
   11cac:	strb	r3, [r4, #96]	; 0x60
   11cb0:	ldr	r3, [pc, #260]	; 11dbc <__assert_fail@plt+0xcd0>
   11cb4:	add	r8, r3, r8, lsl #2
   11cb8:	str	r5, [r8, #64]	; 0x40
   11cbc:	mov	r0, #1
   11cc0:	add	sp, sp, #16
   11cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11cc8:	ldr	sl, [pc, #240]	; 11dc0 <__assert_fail@plt+0xcd4>
   11ccc:	b	11b88 <__assert_fail@plt+0xa9c>
   11cd0:	add	r7, r4, #1
   11cd4:	cmp	r6, r7
   11cd8:	beq	11d9c <__assert_fail@plt+0xcb0>
   11cdc:	ldrb	r2, [r4, #1]
   11ce0:	ldr	r1, [sl]
   11ce4:	lsl	r3, r2, #1
   11ce8:	ldrh	r3, [r1, r3]
   11cec:	cmp	r2, #10
   11cf0:	orreq	r3, r3, #1
   11cf4:	tst	r3, #1
   11cf8:	bne	11d2c <__assert_fail@plt+0xc40>
   11cfc:	add	r3, r4, #2
   11d00:	mov	ip, r6
   11d04:	mov	r7, r3
   11d08:	cmp	r3, ip
   11d0c:	beq	11da0 <__assert_fail@plt+0xcb4>
   11d10:	ldrb	r0, [r3], #1
   11d14:	lsl	r2, r0, #1
   11d18:	ldrh	r2, [r1, r2]
   11d1c:	cmp	r0, #10
   11d20:	orreq	r2, r2, #1
   11d24:	tst	r2, #1
   11d28:	beq	11d04 <__assert_fail@plt+0xc18>
   11d2c:	sub	r2, r7, r4
   11d30:	mov	r1, r4
   11d34:	mov	r0, r5
   11d38:	bl	11594 <__assert_fail@plt+0x4a8>
   11d3c:	add	r4, r7, #1
   11d40:	cmp	r6, r4
   11d44:	beq	11db4 <__assert_fail@plt+0xcc8>
   11d48:	ldrb	r2, [r7, #1]
   11d4c:	ldr	r1, [sl]
   11d50:	lsl	r3, r2, #1
   11d54:	ldrh	r3, [r1, r3]
   11d58:	cmp	r2, #10
   11d5c:	orreq	r3, r3, #1
   11d60:	tst	r3, #1
   11d64:	beq	11cd0 <__assert_fail@plt+0xbe4>
   11d68:	add	r7, r7, #2
   11d6c:	mov	r0, r6
   11d70:	mov	r4, r7
   11d74:	cmp	r0, r7
   11d78:	beq	11ba0 <__assert_fail@plt+0xab4>
   11d7c:	ldrb	r2, [r7], #1
   11d80:	lsl	r3, r2, #1
   11d84:	ldrh	r3, [r1, r3]
   11d88:	cmp	r2, #10
   11d8c:	orreq	r3, r3, #1
   11d90:	tst	r3, #1
   11d94:	bne	11d70 <__assert_fail@plt+0xc84>
   11d98:	b	11cd0 <__assert_fail@plt+0xbe4>
   11d9c:	mov	r7, r6
   11da0:	sub	r2, r7, r4
   11da4:	mov	r1, r4
   11da8:	mov	r0, r5
   11dac:	bl	11594 <__assert_fail@plt+0x4a8>
   11db0:	b	11bb0 <__assert_fail@plt+0xac4>
   11db4:	mov	r4, r6
   11db8:	b	11ba0 <__assert_fail@plt+0xab4>
   11dbc:	andeq	r9, r2, r8, lsl #3
   11dc0:	andeq	r9, r2, r4, lsl #2
   11dc4:	ldrdeq	r7, [r1], -ip
   11dc8:	andeq	r7, r1, r8, ror #17
   11dcc:	push	{r4, r5, r6, lr}
   11dd0:	mov	r5, r0
   11dd4:	mov	r4, r1
   11dd8:	mov	r6, r2
   11ddc:	ldr	r2, [r1]
   11de0:	ldr	r3, [r1, #4]
   11de4:	cmp	r2, r3
   11de8:	beq	11e18 <__assert_fail@plt+0xd2c>
   11dec:	ldr	r1, [r4]
   11df0:	ldr	r3, [r4, #8]
   11df4:	mov	r2, r6
   11df8:	add	r1, r3, r1, lsl #2
   11dfc:	mov	r0, r5
   11e00:	bl	11a18 <__assert_fail@plt+0x92c>
   11e04:	cmp	r0, #0
   11e08:	ldrne	r3, [r4]
   11e0c:	addne	r3, r3, #1
   11e10:	strne	r3, [r4]
   11e14:	pop	{r4, r5, r6, pc}
   11e18:	mov	r2, #4
   11e1c:	add	r1, r1, r2
   11e20:	ldr	r0, [r4, #8]
   11e24:	bl	15a58 <__assert_fail@plt+0x496c>
   11e28:	str	r0, [r4, #8]
   11e2c:	ldr	r3, [r4]
   11e30:	ldr	r2, [r4, #4]
   11e34:	cmp	r3, r2
   11e38:	bcs	11dec <__assert_fail@plt+0xd00>
   11e3c:	lsl	r2, r3, #2
   11e40:	mov	r0, #0
   11e44:	ldr	r1, [r4, #8]
   11e48:	str	r0, [r1, r2]
   11e4c:	add	r3, r3, #1
   11e50:	add	r2, r2, #4
   11e54:	ldr	r1, [r4, #4]
   11e58:	cmp	r1, r3
   11e5c:	bhi	11e44 <__assert_fail@plt+0xd58>
   11e60:	b	11dec <__assert_fail@plt+0xd00>
   11e64:	push	{lr}		; (str lr, [sp, #-4]!)
   11e68:	sub	sp, sp, #60	; 0x3c
   11e6c:	subs	r6, r0, #0
   11e70:	beq	11eac <__assert_fail@plt+0xdc0>
   11e74:	ldr	r3, [pc, #824]	; 121b4 <__assert_fail@plt+0x10c8>
   11e78:	ldr	r4, [r3]
   11e7c:	mov	r2, #5
   11e80:	ldr	r1, [pc, #816]	; 121b8 <__assert_fail@plt+0x10cc>
   11e84:	mov	r0, #0
   11e88:	bl	10ee8 <dcgettext@plt>
   11e8c:	ldr	r3, [pc, #808]	; 121bc <__assert_fail@plt+0x10d0>
   11e90:	ldr	r3, [r3]
   11e94:	mov	r2, r0
   11e98:	mov	r1, #1
   11e9c:	mov	r0, r4
   11ea0:	bl	1102c <__fprintf_chk@plt>
   11ea4:	mov	r0, r6
   11ea8:	bl	10fc0 <exit@plt>
   11eac:	mov	r2, #5
   11eb0:	ldr	r1, [pc, #776]	; 121c0 <__assert_fail@plt+0x10d4>
   11eb4:	mov	r0, #0
   11eb8:	bl	10ee8 <dcgettext@plt>
   11ebc:	ldr	r3, [pc, #760]	; 121bc <__assert_fail@plt+0x10d0>
   11ec0:	ldr	r2, [r3]
   11ec4:	mov	r1, r0
   11ec8:	mov	r0, #1
   11ecc:	bl	11014 <__printf_chk@plt>
   11ed0:	mov	r2, #5
   11ed4:	ldr	r1, [pc, #744]	; 121c4 <__assert_fail@plt+0x10d8>
   11ed8:	mov	r0, #0
   11edc:	bl	10ee8 <dcgettext@plt>
   11ee0:	ldr	r4, [pc, #736]	; 121c8 <__assert_fail@plt+0x10dc>
   11ee4:	ldr	r1, [r4]
   11ee8:	bl	10e4c <fputs_unlocked@plt>
   11eec:	mov	r2, #5
   11ef0:	ldr	r1, [pc, #724]	; 121cc <__assert_fail@plt+0x10e0>
   11ef4:	mov	r0, #0
   11ef8:	bl	10ee8 <dcgettext@plt>
   11efc:	ldr	r1, [r4]
   11f00:	bl	10e4c <fputs_unlocked@plt>
   11f04:	mov	r2, #5
   11f08:	ldr	r1, [pc, #704]	; 121d0 <__assert_fail@plt+0x10e4>
   11f0c:	mov	r0, #0
   11f10:	bl	10ee8 <dcgettext@plt>
   11f14:	ldr	r1, [r4]
   11f18:	bl	10e4c <fputs_unlocked@plt>
   11f1c:	mov	r2, #5
   11f20:	ldr	r1, [pc, #684]	; 121d4 <__assert_fail@plt+0x10e8>
   11f24:	mov	r0, #0
   11f28:	bl	10ee8 <dcgettext@plt>
   11f2c:	ldr	r1, [r4]
   11f30:	bl	10e4c <fputs_unlocked@plt>
   11f34:	mov	r2, #5
   11f38:	ldr	r1, [pc, #664]	; 121d8 <__assert_fail@plt+0x10ec>
   11f3c:	mov	r0, #0
   11f40:	bl	10ee8 <dcgettext@plt>
   11f44:	ldr	r1, [r4]
   11f48:	bl	10e4c <fputs_unlocked@plt>
   11f4c:	mov	r2, #5
   11f50:	ldr	r1, [pc, #644]	; 121dc <__assert_fail@plt+0x10f0>
   11f54:	mov	r0, #0
   11f58:	bl	10ee8 <dcgettext@plt>
   11f5c:	ldr	r1, [r4]
   11f60:	bl	10e4c <fputs_unlocked@plt>
   11f64:	mov	r2, #5
   11f68:	ldr	r1, [pc, #624]	; 121e0 <__assert_fail@plt+0x10f4>
   11f6c:	mov	r0, #0
   11f70:	bl	10ee8 <dcgettext@plt>
   11f74:	ldr	r1, [r4]
   11f78:	bl	10e4c <fputs_unlocked@plt>
   11f7c:	mov	r2, #5
   11f80:	ldr	r1, [pc, #604]	; 121e4 <__assert_fail@plt+0x10f8>
   11f84:	mov	r0, #0
   11f88:	bl	10ee8 <dcgettext@plt>
   11f8c:	ldr	r1, [r4]
   11f90:	bl	10e4c <fputs_unlocked@plt>
   11f94:	mov	r2, #5
   11f98:	ldr	r1, [pc, #584]	; 121e8 <__assert_fail@plt+0x10fc>
   11f9c:	mov	r0, #0
   11fa0:	bl	10ee8 <dcgettext@plt>
   11fa4:	ldr	r1, [r4]
   11fa8:	bl	10e4c <fputs_unlocked@plt>
   11fac:	mov	ip, sp
   11fb0:	ldr	lr, [pc, #564]	; 121ec <__assert_fail@plt+0x1100>
   11fb4:	ldm	lr!, {r0, r1, r2, r3}
   11fb8:	stmia	ip!, {r0, r1, r2, r3}
   11fbc:	ldm	lr!, {r0, r1, r2, r3}
   11fc0:	stmia	ip!, {r0, r1, r2, r3}
   11fc4:	ldm	lr!, {r0, r1, r2, r3}
   11fc8:	stmia	ip!, {r0, r1, r2, r3}
   11fcc:	ldm	lr, {r0, r1}
   11fd0:	stm	ip, {r0, r1}
   11fd4:	ldr	r1, [sp]
   11fd8:	cmp	r1, #0
   11fdc:	moveq	r4, sp
   11fe0:	beq	12008 <__assert_fail@plt+0xf1c>
   11fe4:	mov	r4, sp
   11fe8:	ldr	r5, [pc, #512]	; 121f0 <__assert_fail@plt+0x1104>
   11fec:	mov	r0, r5
   11ff0:	bl	10e64 <strcmp@plt>
   11ff4:	cmp	r0, #0
   11ff8:	beq	12008 <__assert_fail@plt+0xf1c>
   11ffc:	ldr	r1, [r4, #8]!
   12000:	cmp	r1, #0
   12004:	bne	11fec <__assert_fail@plt+0xf00>
   12008:	ldr	r4, [r4, #4]
   1200c:	cmp	r4, #0
   12010:	beq	12124 <__assert_fail@plt+0x1038>
   12014:	mov	r2, #5
   12018:	ldr	r1, [pc, #468]	; 121f4 <__assert_fail@plt+0x1108>
   1201c:	mov	r0, #0
   12020:	bl	10ee8 <dcgettext@plt>
   12024:	ldr	r3, [pc, #460]	; 121f8 <__assert_fail@plt+0x110c>
   12028:	ldr	r2, [pc, #460]	; 121fc <__assert_fail@plt+0x1110>
   1202c:	mov	r1, r0
   12030:	mov	r0, #1
   12034:	bl	11014 <__printf_chk@plt>
   12038:	mov	r1, #0
   1203c:	mov	r0, #5
   12040:	bl	11080 <setlocale@plt>
   12044:	cmp	r0, #0
   12048:	beq	12060 <__assert_fail@plt+0xf74>
   1204c:	mov	r2, #3
   12050:	ldr	r1, [pc, #424]	; 12200 <__assert_fail@plt+0x1114>
   12054:	bl	110c8 <strncmp@plt>
   12058:	cmp	r0, #0
   1205c:	bne	120c0 <__assert_fail@plt+0xfd4>
   12060:	mov	r2, #5
   12064:	ldr	r1, [pc, #408]	; 12204 <__assert_fail@plt+0x1118>
   12068:	mov	r0, #0
   1206c:	bl	10ee8 <dcgettext@plt>
   12070:	ldr	r5, [pc, #376]	; 121f0 <__assert_fail@plt+0x1104>
   12074:	mov	r3, r5
   12078:	ldr	r2, [pc, #376]	; 121f8 <__assert_fail@plt+0x110c>
   1207c:	mov	r1, r0
   12080:	mov	r0, #1
   12084:	bl	11014 <__printf_chk@plt>
   12088:	mov	r2, #5
   1208c:	ldr	r1, [pc, #372]	; 12208 <__assert_fail@plt+0x111c>
   12090:	mov	r0, #0
   12094:	bl	10ee8 <dcgettext@plt>
   12098:	mov	r1, r0
   1209c:	ldr	r2, [pc, #360]	; 1220c <__assert_fail@plt+0x1120>
   120a0:	ldr	r3, [pc, #360]	; 12210 <__assert_fail@plt+0x1124>
   120a4:	cmp	r4, r5
   120a8:	movne	r3, r2
   120ac:	mov	r2, r4
   120b0:	mov	r0, #1
   120b4:	bl	11014 <__printf_chk@plt>
   120b8:	b	11ea4 <__assert_fail@plt+0xdb8>
   120bc:	ldr	r4, [pc, #300]	; 121f0 <__assert_fail@plt+0x1104>
   120c0:	mov	r2, #5
   120c4:	ldr	r1, [pc, #328]	; 12214 <__assert_fail@plt+0x1128>
   120c8:	mov	r0, #0
   120cc:	bl	10ee8 <dcgettext@plt>
   120d0:	ldr	r3, [pc, #240]	; 121c8 <__assert_fail@plt+0x10dc>
   120d4:	ldr	r1, [r3]
   120d8:	bl	10e4c <fputs_unlocked@plt>
   120dc:	b	12060 <__assert_fail@plt+0xf74>
   120e0:	mov	r2, #5
   120e4:	ldr	r1, [pc, #280]	; 12204 <__assert_fail@plt+0x1118>
   120e8:	mov	r0, #0
   120ec:	bl	10ee8 <dcgettext@plt>
   120f0:	ldr	r4, [pc, #248]	; 121f0 <__assert_fail@plt+0x1104>
   120f4:	mov	r3, r4
   120f8:	ldr	r2, [pc, #248]	; 121f8 <__assert_fail@plt+0x110c>
   120fc:	mov	r1, r0
   12100:	mov	r0, #1
   12104:	bl	11014 <__printf_chk@plt>
   12108:	mov	r2, #5
   1210c:	ldr	r1, [pc, #244]	; 12208 <__assert_fail@plt+0x111c>
   12110:	mov	r0, #0
   12114:	bl	10ee8 <dcgettext@plt>
   12118:	mov	r1, r0
   1211c:	ldr	r3, [pc, #236]	; 12210 <__assert_fail@plt+0x1124>
   12120:	b	120ac <__assert_fail@plt+0xfc0>
   12124:	mov	r2, #5
   12128:	ldr	r1, [pc, #196]	; 121f4 <__assert_fail@plt+0x1108>
   1212c:	mov	r0, #0
   12130:	bl	10ee8 <dcgettext@plt>
   12134:	ldr	r3, [pc, #188]	; 121f8 <__assert_fail@plt+0x110c>
   12138:	ldr	r2, [pc, #188]	; 121fc <__assert_fail@plt+0x1110>
   1213c:	mov	r1, r0
   12140:	mov	r0, #1
   12144:	bl	11014 <__printf_chk@plt>
   12148:	mov	r1, #0
   1214c:	mov	r0, #5
   12150:	bl	11080 <setlocale@plt>
   12154:	cmp	r0, #0
   12158:	beq	120e0 <__assert_fail@plt+0xff4>
   1215c:	mov	r2, #3
   12160:	ldr	r1, [pc, #152]	; 12200 <__assert_fail@plt+0x1114>
   12164:	bl	110c8 <strncmp@plt>
   12168:	cmp	r0, #0
   1216c:	bne	120bc <__assert_fail@plt+0xfd0>
   12170:	mov	r2, #5
   12174:	ldr	r1, [pc, #136]	; 12204 <__assert_fail@plt+0x1118>
   12178:	mov	r0, #0
   1217c:	bl	10ee8 <dcgettext@plt>
   12180:	ldr	r4, [pc, #104]	; 121f0 <__assert_fail@plt+0x1104>
   12184:	mov	r3, r4
   12188:	ldr	r2, [pc, #104]	; 121f8 <__assert_fail@plt+0x110c>
   1218c:	mov	r1, r0
   12190:	mov	r0, #1
   12194:	bl	11014 <__printf_chk@plt>
   12198:	mov	r2, #5
   1219c:	ldr	r1, [pc, #100]	; 12208 <__assert_fail@plt+0x111c>
   121a0:	mov	r0, #0
   121a4:	bl	10ee8 <dcgettext@plt>
   121a8:	mov	r1, r0
   121ac:	ldr	r3, [pc, #92]	; 12210 <__assert_fail@plt+0x1124>
   121b0:	b	120ac <__assert_fail@plt+0xfc0>
   121b4:	andeq	r9, r2, r0, ror r1
   121b8:	andeq	r7, r1, r0, lsl r9
   121bc:	andeq	r9, r2, r0, lsl #4
   121c0:	andeq	r7, r1, r8, lsr r9
   121c4:	andeq	r7, r1, ip, asr r9
   121c8:	andeq	r9, r2, ip, ror r1
   121cc:	strdeq	r7, [r1], -r4
   121d0:	andeq	r7, r1, r0, lsr sl
   121d4:	andeq	r7, r1, r0, lsl fp
   121d8:	andeq	r7, r1, r0, lsr #24
   121dc:	andeq	r7, r1, r4, lsr lr
   121e0:	andeq	r7, r1, r4, ror lr
   121e4:	andeq	r7, r1, r4, lsr #29
   121e8:	ldrdeq	r7, [r1], -ip
   121ec:	andeq	r7, r1, r4, asr r7
   121f0:	andeq	r7, r1, r8, lsl #18
   121f4:	andeq	r8, r1, r0, lsl r2
   121f8:	andeq	r8, r1, r8, lsr #4
   121fc:	andeq	r8, r1, r0, asr r2
   12200:	andeq	r8, r1, r0, ror #4
   12204:	andeq	r8, r1, ip, lsr #5
   12208:	andeq	r8, r1, r8, asr #5
   1220c:	andeq	r7, r1, r0, ror lr
   12210:	andeq	r8, r1, ip, lsr #8
   12214:	andeq	r8, r1, r4, ror #4
   12218:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1221c:	mov	r8, r0
   12220:	mov	r7, r1
   12224:	mov	r6, r2
   12228:	ldr	r4, [sp, #32]
   1222c:	ldr	r5, [sp, #36]	; 0x24
   12230:	ldr	r2, [r4]
   12234:	cmp	r2, #2
   12238:	beq	12268 <__assert_fail@plt+0x117c>
   1223c:	ldr	r3, [r5]
   12240:	str	r3, [r6, r2, lsl #2]
   12244:	str	r8, [r7, r2, lsl #2]
   12248:	add	r2, r2, #1
   1224c:	str	r2, [r4]
   12250:	ldr	r3, [r5]
   12254:	cmp	r3, #3
   12258:	moveq	r2, #3
   1225c:	ldreq	r3, [sp, #40]	; 0x28
   12260:	streq	r2, [r3]
   12264:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12268:	ldr	r9, [r6]
   1226c:	clz	r2, r9
   12270:	lsr	r2, r2, #5
   12274:	ldr	r0, [r1, r2, lsl #2]
   12278:	ldr	r2, [r6, r2, lsl #2]
   1227c:	cmp	r2, #3
   12280:	ldrls	pc, [pc, r2, lsl #2]
   12284:	b	122f0 <__assert_fail@plt+0x1204>
   12288:	muleq	r1, r8, r2
   1228c:	ldrdeq	r2, [r1], -r4
   12290:	andeq	r2, r1, ip, lsl #6
   12294:	andeq	r2, r1, ip, lsr #6
   12298:	mov	r2, #5
   1229c:	ldr	r1, [pc, #144]	; 12334 <__assert_fail@plt+0x1248>
   122a0:	mov	r0, #0
   122a4:	bl	10ee8 <dcgettext@plt>
   122a8:	mov	r4, r0
   122ac:	mov	r1, r8
   122b0:	mov	r0, #4
   122b4:	bl	150a8 <__assert_fail@plt+0x3fbc>
   122b8:	mov	r3, r0
   122bc:	mov	r2, r4
   122c0:	mov	r1, #0
   122c4:	mov	r0, r1
   122c8:	bl	10f54 <error@plt>
   122cc:	mov	r0, #1
   122d0:	bl	11e64 <__assert_fail@plt+0xd78>
   122d4:	ldr	r2, [r3]
   122d8:	sub	r2, r2, #1
   122dc:	str	r2, [r3]
   122e0:	bl	1133c <__assert_fail@plt+0x250>
   122e4:	mov	r1, r0
   122e8:	ldr	r0, [pc, #72]	; 12338 <__assert_fail@plt+0x124c>
   122ec:	bl	11220 <__assert_fail@plt+0x134>
   122f0:	cmp	r9, #0
   122f4:	ldrne	r3, [r6, #4]
   122f8:	strne	r3, [r6]
   122fc:	ldrne	r3, [r7, #4]
   12300:	strne	r3, [r7]
   12304:	mov	r2, #1
   12308:	b	1223c <__assert_fail@plt+0x1150>
   1230c:	ldr	r2, [r3, #4]
   12310:	sub	r2, r2, #1
   12314:	str	r2, [r3, #4]
   12318:	bl	1133c <__assert_fail@plt+0x250>
   1231c:	mov	r1, r0
   12320:	ldr	r0, [pc, #20]	; 1233c <__assert_fail@plt+0x1250>
   12324:	bl	11220 <__assert_fail@plt+0x134>
   12328:	b	122f0 <__assert_fail@plt+0x1204>
   1232c:	bl	113e8 <__assert_fail@plt+0x2fc>
   12330:	b	122f0 <__assert_fail@plt+0x1204>
   12334:	strdeq	r8, [r1], -ip
   12338:	andeq	r9, r2, r0, lsl r1
   1233c:	andeq	r9, r2, ip, lsl #2
   12340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12344:	sub	sp, sp, #92	; 0x5c
   12348:	mov	r5, r0
   1234c:	mov	r4, r1
   12350:	mov	r6, #0
   12354:	str	r6, [sp, #80]	; 0x50
   12358:	str	r6, [sp, #64]	; 0x40
   1235c:	str	r6, [sp, #68]	; 0x44
   12360:	str	r6, [sp, #60]	; 0x3c
   12364:	ldr	r0, [r1]
   12368:	bl	1378c <__assert_fail@plt+0x26a0>
   1236c:	ldr	r1, [pc, #3464]	; 130fc <__assert_fail@plt+0x2010>
   12370:	mov	r0, #6
   12374:	bl	11080 <setlocale@plt>
   12378:	ldr	r7, [pc, #3456]	; 13100 <__assert_fail@plt+0x2014>
   1237c:	ldr	r1, [pc, #3456]	; 13104 <__assert_fail@plt+0x2018>
   12380:	mov	r0, r7
   12384:	bl	110bc <bindtextdomain@plt>
   12388:	mov	r0, r7
   1238c:	bl	10f00 <textdomain@plt>
   12390:	mov	r0, #3
   12394:	bl	13594 <__assert_fail@plt+0x24a8>
   12398:	ldr	r7, [pc, #3432]	; 13108 <__assert_fail@plt+0x201c>
   1239c:	strb	r0, [r7, #9]
   123a0:	ldr	r0, [pc, #3428]	; 1310c <__assert_fail@plt+0x2020>
   123a4:	bl	17724 <__assert_fail@plt+0x6638>
   123a8:	ldr	r0, [pc, #3424]	; 13110 <__assert_fail@plt+0x2024>
   123ac:	bl	17724 <__assert_fail@plt+0x6638>
   123b0:	mov	r3, #1
   123b4:	strb	r3, [r7, #108]	; 0x6c
   123b8:	strb	r6, [r7, #92]	; 0x5c
   123bc:	strb	r6, [r7, #97]	; 0x61
   123c0:	strb	r6, [r7, #96]	; 0x60
   123c4:	str	r6, [r7, #88]	; 0x58
   123c8:	ldr	r7, [pc, #3396]	; 13114 <__assert_fail@plt+0x2028>
   123cc:	ldr	r6, [pc, #3396]	; 13118 <__assert_fail@plt+0x202c>
   123d0:	ldr	r8, [pc, #3376]	; 13108 <__assert_fail@plt+0x201c>
   123d4:	ldr	r9, [pc, #3392]	; 1311c <__assert_fail@plt+0x2030>
   123d8:	add	sl, r9, #12
   123dc:	add	fp, r8, #100	; 0x64
   123e0:	b	12504 <__assert_fail@plt+0x1418>
   123e4:	cmp	r0, #49	; 0x31
   123e8:	beq	12608 <__assert_fail@plt+0x151c>
   123ec:	bgt	12410 <__assert_fail@plt+0x1324>
   123f0:	cmn	r0, #2
   123f4:	beq	127a8 <__assert_fail@plt+0x16bc>
   123f8:	cmp	r0, #1
   123fc:	beq	12774 <__assert_fail@plt+0x1688>
   12400:	cmn	r0, #3
   12404:	beq	127b0 <__assert_fail@plt+0x16c4>
   12408:	mov	r0, #1
   1240c:	bl	11e64 <__assert_fail@plt+0xd78>
   12410:	cmp	r0, #97	; 0x61
   12414:	beq	124b4 <__assert_fail@plt+0x13c8>
   12418:	cmp	r0, #101	; 0x65
   1241c:	beq	125ac <__assert_fail@plt+0x14c0>
   12420:	cmp	r0, #50	; 0x32
   12424:	bne	12408 <__assert_fail@plt+0x131c>
   12428:	ldr	r3, [pc, #3312]	; 13120 <__assert_fail@plt+0x2034>
   1242c:	ldr	r0, [r3]
   12430:	bl	1133c <__assert_fail@plt+0x250>
   12434:	mov	r1, r0
   12438:	add	r0, r9, #8
   1243c:	bl	11220 <__assert_fail@plt+0x134>
   12440:	b	124fc <__assert_fail@plt+0x1410>
   12444:	cmp	r0, #111	; 0x6f
   12448:	beq	12678 <__assert_fail@plt+0x158c>
   1244c:	cmp	r0, #116	; 0x74
   12450:	beq	126b4 <__assert_fail@plt+0x15c8>
   12454:	cmp	r0, #106	; 0x6a
   12458:	bne	12408 <__assert_fail@plt+0x131c>
   1245c:	ldr	r3, [pc, #3260]	; 13120 <__assert_fail@plt+0x2034>
   12460:	ldr	r0, [r3]
   12464:	ldrb	r2, [r0]
   12468:	sub	r3, r2, #49	; 0x31
   1246c:	uxtb	r3, r3
   12470:	cmp	r3, #1
   12474:	bls	12624 <__assert_fail@plt+0x1538>
   12478:	bl	1133c <__assert_fail@plt+0x250>
   1247c:	mov	r1, r0
   12480:	mov	r0, sl
   12484:	bl	11220 <__assert_fail@plt+0x134>
   12488:	ldr	r1, [r9, #12]
   1248c:	add	r0, r9, #8
   12490:	bl	11220 <__assert_fail@plt+0x134>
   12494:	b	124fc <__assert_fail@plt+0x1410>
   12498:	cmp	r0, #122	; 0x7a
   1249c:	bne	12408 <__assert_fail@plt+0x131c>
   124a0:	mov	r3, #0
   124a4:	strb	r3, [r9, #16]
   124a8:	b	124fc <__assert_fail@plt+0x1410>
   124ac:	mov	r3, #0
   124b0:	strb	r3, [r8, #108]	; 0x6c
   124b4:	ldr	r3, [pc, #3136]	; 130fc <__assert_fail@plt+0x2010>
   124b8:	str	r3, [sp]
   124bc:	add	r3, sp, #48	; 0x30
   124c0:	mov	r2, #10
   124c4:	mov	r1, #0
   124c8:	ldr	r0, [pc, #3152]	; 13120 <__assert_fail@plt+0x2034>
   124cc:	ldr	r0, [r0]
   124d0:	bl	1614c <__assert_fail@plt+0x5060>
   124d4:	cmp	r0, #0
   124d8:	bne	12578 <__assert_fail@plt+0x148c>
   124dc:	ldr	r3, [sp, #48]	; 0x30
   124e0:	sub	r2, r3, #1
   124e4:	cmp	r2, #1
   124e8:	bhi	12578 <__assert_fail@plt+0x148c>
   124ec:	cmp	r3, #1
   124f0:	strbeq	r3, [r8, #109]	; 0x6d
   124f4:	movne	r3, #1
   124f8:	strbne	r3, [r8, #110]	; 0x6e
   124fc:	ldr	r3, [sp, #84]	; 0x54
   12500:	str	r3, [sp, #80]	; 0x50
   12504:	mov	r3, #0
   12508:	str	r3, [sp]
   1250c:	mov	r3, r7
   12510:	mov	r2, r6
   12514:	mov	r1, r4
   12518:	mov	r0, r5
   1251c:	bl	10fa8 <getopt_long@plt>
   12520:	cmn	r0, #1
   12524:	beq	127e4 <__assert_fail@plt+0x16f8>
   12528:	mov	r3, #0
   1252c:	str	r3, [sp, #84]	; 0x54
   12530:	cmp	r0, #105	; 0x69
   12534:	beq	125fc <__assert_fail@plt+0x1510>
   12538:	ble	123e4 <__assert_fail@plt+0x12f8>
   1253c:	cmp	r0, #118	; 0x76
   12540:	beq	124ac <__assert_fail@plt+0x13c0>
   12544:	ble	12444 <__assert_fail@plt+0x1358>
   12548:	cmp	r0, #256	; 0x100
   1254c:	beq	12768 <__assert_fail@plt+0x167c>
   12550:	ble	12498 <__assert_fail@plt+0x13ac>
   12554:	ldr	r3, [pc, #3016]	; 13124 <__assert_fail@plt+0x2038>
   12558:	cmp	r0, r3
   1255c:	beq	1275c <__assert_fail@plt+0x1670>
   12560:	add	r3, r3, #1
   12564:	cmp	r0, r3
   12568:	bne	12408 <__assert_fail@plt+0x131c>
   1256c:	mov	r3, #1
   12570:	strb	r3, [r8, #111]	; 0x6f
   12574:	b	124fc <__assert_fail@plt+0x1410>
   12578:	mov	r2, #5
   1257c:	ldr	r1, [pc, #2980]	; 13128 <__assert_fail@plt+0x203c>
   12580:	mov	r0, #0
   12584:	bl	10ee8 <dcgettext@plt>
   12588:	mov	r4, r0
   1258c:	ldr	r3, [pc, #2956]	; 13120 <__assert_fail@plt+0x2034>
   12590:	ldr	r0, [r3]
   12594:	bl	152dc <__assert_fail@plt+0x41f0>
   12598:	mov	r3, r0
   1259c:	mov	r2, r4
   125a0:	mov	r1, #0
   125a4:	mov	r0, #1
   125a8:	bl	10f54 <error@plt>
   125ac:	ldr	r0, [r8, #12]
   125b0:	cmp	r0, #0
   125b4:	beq	125cc <__assert_fail@plt+0x14e0>
   125b8:	ldr	r3, [pc, #2912]	; 13120 <__assert_fail@plt+0x2034>
   125bc:	ldr	r1, [r3]
   125c0:	bl	10e64 <strcmp@plt>
   125c4:	cmp	r0, #0
   125c8:	bne	125dc <__assert_fail@plt+0x14f0>
   125cc:	ldr	r3, [pc, #2892]	; 13120 <__assert_fail@plt+0x2034>
   125d0:	ldr	r3, [r3]
   125d4:	str	r3, [r8, #12]
   125d8:	b	124fc <__assert_fail@plt+0x1410>
   125dc:	mov	r2, #5
   125e0:	ldr	r1, [pc, #2884]	; 1312c <__assert_fail@plt+0x2040>
   125e4:	mov	r0, #0
   125e8:	bl	10ee8 <dcgettext@plt>
   125ec:	mov	r2, r0
   125f0:	mov	r1, #0
   125f4:	mov	r0, #1
   125f8:	bl	10f54 <error@plt>
   125fc:	mov	r3, #1
   12600:	strb	r3, [r8, #8]
   12604:	b	124fc <__assert_fail@plt+0x1410>
   12608:	ldr	r3, [pc, #2832]	; 13120 <__assert_fail@plt+0x2034>
   1260c:	ldr	r0, [r3]
   12610:	bl	1133c <__assert_fail@plt+0x250>
   12614:	mov	r1, r0
   12618:	mov	r0, sl
   1261c:	bl	11220 <__assert_fail@plt+0x134>
   12620:	b	124fc <__assert_fail@plt+0x1410>
   12624:	ldrb	r3, [r0, #1]
   12628:	cmp	r3, #0
   1262c:	bne	12478 <__assert_fail@plt+0x138c>
   12630:	ldr	r3, [pc, #2808]	; 13130 <__assert_fail@plt+0x2044>
   12634:	ldr	r3, [r3]
   12638:	sub	r3, r3, #-1073741823	; 0xc0000001
   1263c:	ldr	r3, [r4, r3, lsl #2]
   12640:	add	r3, r3, #2
   12644:	cmp	r0, r3
   12648:	bne	12478 <__assert_fail@plt+0x138c>
   1264c:	cmp	r2, #50	; 0x32
   12650:	movne	r2, #0
   12654:	moveq	r2, #1
   12658:	add	r3, sp, #88	; 0x58
   1265c:	add	r1, r3, r2, lsl #2
   12660:	ldr	r3, [r1, #-24]	; 0xffffffe8
   12664:	add	r3, r3, #1
   12668:	str	r3, [r1, #-24]	; 0xffffffe8
   1266c:	add	r2, r2, #1
   12670:	str	r2, [sp, #84]	; 0x54
   12674:	b	124fc <__assert_fail@plt+0x1410>
   12678:	ldr	r3, [pc, #2720]	; 13120 <__assert_fail@plt+0x2034>
   1267c:	ldr	r3, [r3]
   12680:	str	r3, [sp, #20]
   12684:	ldr	r1, [pc, #2728]	; 13134 <__assert_fail@plt+0x2048>
   12688:	mov	r0, r3
   1268c:	bl	10e64 <strcmp@plt>
   12690:	cmp	r0, #0
   12694:	moveq	r3, #1
   12698:	strbeq	r3, [r8, #16]
   1269c:	beq	124fc <__assert_fail@plt+0x1410>
   126a0:	ldr	r0, [sp, #20]
   126a4:	bl	113e8 <__assert_fail@plt+0x2fc>
   126a8:	mov	r3, #3
   126ac:	str	r3, [sp, #84]	; 0x54
   126b0:	b	124fc <__assert_fail@plt+0x1410>
   126b4:	ldr	r3, [pc, #2660]	; 13120 <__assert_fail@plt+0x2034>
   126b8:	ldr	r0, [r3]
   126bc:	ldrb	r3, [r0]
   126c0:	cmp	r3, #0
   126c4:	beq	1271c <__assert_fail@plt+0x1630>
   126c8:	ldrb	r2, [r0, #1]
   126cc:	cmp	r2, #0
   126d0:	beq	12720 <__assert_fail@plt+0x1634>
   126d4:	ldr	r1, [pc, #2652]	; 13138 <__assert_fail@plt+0x204c>
   126d8:	bl	10e64 <strcmp@plt>
   126dc:	cmp	r0, #0
   126e0:	moveq	r3, #0
   126e4:	beq	12720 <__assert_fail@plt+0x1634>
   126e8:	mov	r2, #5
   126ec:	ldr	r1, [pc, #2632]	; 1313c <__assert_fail@plt+0x2050>
   126f0:	mov	r0, #0
   126f4:	bl	10ee8 <dcgettext@plt>
   126f8:	mov	r4, r0
   126fc:	ldr	r3, [pc, #2588]	; 13120 <__assert_fail@plt+0x2034>
   12700:	ldr	r0, [r3]
   12704:	bl	152dc <__assert_fail@plt+0x41f0>
   12708:	mov	r3, r0
   1270c:	mov	r2, r4
   12710:	mov	r1, #0
   12714:	mov	r0, #1
   12718:	bl	10f54 <error@plt>
   1271c:	mov	r3, #10
   12720:	ldr	r2, [r9, #4]
   12724:	cmp	r2, #0
   12728:	blt	12734 <__assert_fail@plt+0x1648>
   1272c:	cmp	r2, r3
   12730:	bne	1273c <__assert_fail@plt+0x1650>
   12734:	str	r3, [r9, #4]
   12738:	b	124fc <__assert_fail@plt+0x1410>
   1273c:	mov	r2, #5
   12740:	ldr	r1, [pc, #2552]	; 13140 <__assert_fail@plt+0x2054>
   12744:	mov	r0, #0
   12748:	bl	10ee8 <dcgettext@plt>
   1274c:	mov	r2, r0
   12750:	mov	r1, #0
   12754:	mov	r0, #1
   12758:	bl	10f54 <error@plt>
   1275c:	mov	r3, #2
   12760:	str	r3, [r8, #88]	; 0x58
   12764:	b	124fc <__assert_fail@plt+0x1410>
   12768:	mov	r3, #1
   1276c:	str	r3, [r8, #88]	; 0x58
   12770:	b	124fc <__assert_fail@plt+0x1410>
   12774:	add	r3, sp, #84	; 0x54
   12778:	str	r3, [sp, #8]
   1277c:	add	r3, sp, #80	; 0x50
   12780:	str	r3, [sp, #4]
   12784:	add	r3, sp, #60	; 0x3c
   12788:	str	r3, [sp]
   1278c:	add	r3, sp, #64	; 0x40
   12790:	add	r2, sp, #72	; 0x48
   12794:	mov	r1, fp
   12798:	ldr	r0, [pc, #2432]	; 13120 <__assert_fail@plt+0x2034>
   1279c:	ldr	r0, [r0]
   127a0:	bl	12218 <__assert_fail@plt+0x112c>
   127a4:	b	124fc <__assert_fail@plt+0x1410>
   127a8:	mov	r0, #0
   127ac:	bl	11e64 <__assert_fail@plt+0xd78>
   127b0:	mov	r4, #0
   127b4:	str	r4, [sp, #4]
   127b8:	ldr	r3, [pc, #2436]	; 13144 <__assert_fail@plt+0x2058>
   127bc:	str	r3, [sp]
   127c0:	ldr	r3, [pc, #2432]	; 13148 <__assert_fail@plt+0x205c>
   127c4:	ldr	r3, [r3]
   127c8:	ldr	r2, [pc, #2428]	; 1314c <__assert_fail@plt+0x2060>
   127cc:	ldr	r1, [pc, #2428]	; 13150 <__assert_fail@plt+0x2064>
   127d0:	ldr	r0, [pc, #2428]	; 13154 <__assert_fail@plt+0x2068>
   127d4:	ldr	r0, [r0]
   127d8:	bl	15864 <__assert_fail@plt+0x4778>
   127dc:	mov	r0, r4
   127e0:	bl	10fc0 <exit@plt>
   127e4:	mov	r3, #0
   127e8:	str	r3, [sp, #80]	; 0x50
   127ec:	ldr	r3, [pc, #2364]	; 13130 <__assert_fail@plt+0x2044>
   127f0:	ldr	r3, [r3]
   127f4:	cmp	r5, r3
   127f8:	ble	12844 <__assert_fail@plt+0x1758>
   127fc:	ldr	r6, [pc, #2348]	; 13130 <__assert_fail@plt+0x2044>
   12800:	ldr	r9, [pc, #2384]	; 13158 <__assert_fail@plt+0x206c>
   12804:	add	r8, sp, #84	; 0x54
   12808:	add	r7, sp, #80	; 0x50
   1280c:	add	r2, r3, #1
   12810:	str	r2, [r6]
   12814:	ldr	r0, [r4, r3, lsl #2]
   12818:	str	r8, [sp, #8]
   1281c:	str	r7, [sp, #4]
   12820:	add	r3, sp, #60	; 0x3c
   12824:	str	r3, [sp]
   12828:	add	r3, sp, #64	; 0x40
   1282c:	add	r2, sp, #72	; 0x48
   12830:	mov	r1, r9
   12834:	bl	12218 <__assert_fail@plt+0x112c>
   12838:	ldr	r3, [r6]
   1283c:	cmp	r5, r3
   12840:	bgt	1280c <__assert_fail@plt+0x1720>
   12844:	ldr	r3, [sp, #60]	; 0x3c
   12848:	cmp	r3, #2
   1284c:	bne	12a20 <__assert_fail@plt+0x1934>
   12850:	ldr	r3, [sp, #64]	; 0x40
   12854:	cmp	r3, #0
   12858:	bne	12a88 <__assert_fail@plt+0x199c>
   1285c:	ldr	r3, [sp, #68]	; 0x44
   12860:	cmp	r3, #0
   12864:	bne	12aa8 <__assert_fail@plt+0x19bc>
   12868:	ldr	r3, [pc, #2220]	; 1311c <__assert_fail@plt+0x2030>
   1286c:	ldr	r3, [r3, #12]
   12870:	cmn	r3, #1
   12874:	moveq	r2, #0
   12878:	ldreq	r3, [pc, #2204]	; 1311c <__assert_fail@plt+0x2030>
   1287c:	streq	r2, [r3, #12]
   12880:	ldr	r3, [pc, #2196]	; 1311c <__assert_fail@plt+0x2030>
   12884:	ldr	r3, [r3, #8]
   12888:	cmn	r3, #1
   1288c:	moveq	r2, #0
   12890:	ldreq	r3, [pc, #2180]	; 1311c <__assert_fail@plt+0x2030>
   12894:	streq	r2, [r3, #8]
   12898:	ldr	r3, [pc, #2152]	; 13108 <__assert_fail@plt+0x201c>
   1289c:	ldr	r4, [r3, #100]	; 0x64
   128a0:	ldr	r1, [pc, #2228]	; 1315c <__assert_fail@plt+0x2070>
   128a4:	mov	r0, r4
   128a8:	bl	10e64 <strcmp@plt>
   128ac:	cmp	r0, #0
   128b0:	ldreq	r3, [pc, #2216]	; 13160 <__assert_fail@plt+0x2074>
   128b4:	ldreq	sl, [r3]
   128b8:	bne	12ac8 <__assert_fail@plt+0x19dc>
   128bc:	cmp	sl, #0
   128c0:	beq	12adc <__assert_fail@plt+0x19f0>
   128c4:	ldr	r3, [pc, #2108]	; 13108 <__assert_fail@plt+0x201c>
   128c8:	ldr	r4, [r3, #104]	; 0x68
   128cc:	ldr	r1, [pc, #2184]	; 1315c <__assert_fail@plt+0x2070>
   128d0:	mov	r0, r4
   128d4:	bl	10e64 <strcmp@plt>
   128d8:	cmp	r0, #0
   128dc:	ldreq	r3, [pc, #2172]	; 13160 <__assert_fail@plt+0x2074>
   128e0:	ldreq	r8, [r3]
   128e4:	bne	12b0c <__assert_fail@plt+0x1a20>
   128e8:	cmp	r8, #0
   128ec:	beq	12b20 <__assert_fail@plt+0x1a34>
   128f0:	cmp	sl, r8
   128f4:	beq	12b50 <__assert_fail@plt+0x1a64>
   128f8:	mov	r1, #2
   128fc:	mov	r0, sl
   12900:	bl	132b8 <__assert_fail@plt+0x21cc>
   12904:	mov	r1, #2
   12908:	mov	r0, r8
   1290c:	bl	132b8 <__assert_fail@plt+0x21cc>
   12910:	mov	r4, #0
   12914:	str	r4, [sp, #36]	; 0x24
   12918:	str	r4, [sp, #40]	; 0x28
   1291c:	str	r4, [sp, #44]	; 0x2c
   12920:	mov	r2, #1
   12924:	add	r1, sp, #36	; 0x24
   12928:	mov	r0, sl
   1292c:	bl	11dcc <__assert_fail@plt+0xce0>
   12930:	str	r4, [sp, #48]	; 0x30
   12934:	str	r4, [sp, #52]	; 0x34
   12938:	str	r4, [sp, #56]	; 0x38
   1293c:	mov	r2, #2
   12940:	add	r1, sp, #48	; 0x30
   12944:	mov	r0, r8
   12948:	bl	11dcc <__assert_fail@plt+0xce0>
   1294c:	ldr	r3, [pc, #1972]	; 13108 <__assert_fail@plt+0x201c>
   12950:	ldrb	r3, [r3, #16]
   12954:	cmp	r3, r4
   12958:	beq	12994 <__assert_fail@plt+0x18a8>
   1295c:	ldr	r3, [sp, #36]	; 0x24
   12960:	cmp	r3, r4
   12964:	ldrne	r3, [sp, #44]	; 0x2c
   12968:	ldrne	r3, [r3]
   1296c:	ldrne	r3, [r3, #12]
   12970:	ldr	r2, [pc, #1936]	; 13108 <__assert_fail@plt+0x201c>
   12974:	str	r3, [r2, #56]	; 0x38
   12978:	ldr	r3, [sp, #48]	; 0x30
   1297c:	cmp	r3, #0
   12980:	ldrne	r3, [sp, #56]	; 0x38
   12984:	ldrne	r3, [r3]
   12988:	ldrne	r3, [r3, #12]
   1298c:	ldr	r2, [pc, #1908]	; 13108 <__assert_fail@plt+0x201c>
   12990:	str	r3, [r2, #60]	; 0x3c
   12994:	ldr	r3, [pc, #1900]	; 13108 <__assert_fail@plt+0x201c>
   12998:	ldrb	r3, [r3, #111]	; 0x6f
   1299c:	cmp	r3, #0
   129a0:	beq	12bbc <__assert_fail@plt+0x1ad0>
   129a4:	ldr	r3, [sp, #36]	; 0x24
   129a8:	cmp	r3, #0
   129ac:	bne	12b78 <__assert_fail@plt+0x1a8c>
   129b0:	ldr	r3, [sp, #48]	; 0x30
   129b4:	cmp	r3, #0
   129b8:	bne	12bd4 <__assert_fail@plt+0x1ae8>
   129bc:	mov	r3, #0
   129c0:	str	r3, [sp, #32]
   129c4:	ldr	r3, [pc, #1852]	; 13108 <__assert_fail@plt+0x201c>
   129c8:	ldr	r3, [r3, #88]	; 0x58
   129cc:	cmp	r3, #2
   129d0:	moveq	r4, #0
   129d4:	beq	12f50 <__assert_fail@plt+0x1e64>
   129d8:	ldr	r3, [pc, #1832]	; 13108 <__assert_fail@plt+0x201c>
   129dc:	ldrb	r3, [r3, #96]	; 0x60
   129e0:	cmp	r3, #0
   129e4:	movne	r3, #0
   129e8:	beq	130c0 <__assert_fail@plt+0x1fd4>
   129ec:	ldr	r2, [pc, #1812]	; 13108 <__assert_fail@plt+0x201c>
   129f0:	ldrb	r2, [r2, #97]	; 0x61
   129f4:	cmp	r2, #0
   129f8:	beq	130b8 <__assert_fail@plt+0x1fcc>
   129fc:	ldr	r2, [pc, #1796]	; 13108 <__assert_fail@plt+0x201c>
   12a00:	ldrb	r2, [r2, #109]	; 0x6d
   12a04:	cmp	r3, #0
   12a08:	moveq	r4, #0
   12a0c:	andne	r4, r2, #1
   12a10:	cmp	r4, #0
   12a14:	beq	12f50 <__assert_fail@plt+0x1e64>
   12a18:	mov	r4, #0
   12a1c:	b	12ec0 <__assert_fail@plt+0x1dd4>
   12a20:	cmp	r3, #0
   12a24:	bne	12a50 <__assert_fail@plt+0x1964>
   12a28:	mov	r2, #5
   12a2c:	ldr	r1, [pc, #1840]	; 13164 <__assert_fail@plt+0x2078>
   12a30:	mov	r0, #0
   12a34:	bl	10ee8 <dcgettext@plt>
   12a38:	mov	r2, r0
   12a3c:	mov	r1, #0
   12a40:	mov	r0, r1
   12a44:	bl	10f54 <error@plt>
   12a48:	mov	r0, #1
   12a4c:	bl	11e64 <__assert_fail@plt+0xd78>
   12a50:	mov	r2, #5
   12a54:	ldr	r1, [pc, #1804]	; 13168 <__assert_fail@plt+0x207c>
   12a58:	mov	r0, #0
   12a5c:	bl	10ee8 <dcgettext@plt>
   12a60:	mov	r6, r0
   12a64:	sub	r5, r5, #-1073741823	; 0xc0000001
   12a68:	ldr	r0, [r4, r5, lsl #2]
   12a6c:	bl	152dc <__assert_fail@plt+0x41f0>
   12a70:	mov	r3, r0
   12a74:	mov	r2, r6
   12a78:	mov	r1, #0
   12a7c:	mov	r0, r1
   12a80:	bl	10f54 <error@plt>
   12a84:	b	12a48 <__assert_fail@plt+0x195c>
   12a88:	ldr	r4, [pc, #1676]	; 1311c <__assert_fail@plt+0x2030>
   12a8c:	mov	r1, #0
   12a90:	add	r0, r4, #12
   12a94:	bl	11220 <__assert_fail@plt+0x134>
   12a98:	mov	r1, #0
   12a9c:	add	r0, r4, #8
   12aa0:	bl	11220 <__assert_fail@plt+0x134>
   12aa4:	b	1285c <__assert_fail@plt+0x1770>
   12aa8:	ldr	r4, [pc, #1644]	; 1311c <__assert_fail@plt+0x2030>
   12aac:	mov	r1, #1
   12ab0:	add	r0, r4, #12
   12ab4:	bl	11220 <__assert_fail@plt+0x134>
   12ab8:	mov	r1, #1
   12abc:	add	r0, r4, #8
   12ac0:	bl	11220 <__assert_fail@plt+0x134>
   12ac4:	b	12868 <__assert_fail@plt+0x177c>
   12ac8:	ldr	r1, [pc, #1692]	; 1316c <__assert_fail@plt+0x2080>
   12acc:	mov	r0, r4
   12ad0:	bl	133f8 <__assert_fail@plt+0x230c>
   12ad4:	mov	sl, r0
   12ad8:	b	128bc <__assert_fail@plt+0x17d0>
   12adc:	bl	10ff0 <__errno_location@plt>
   12ae0:	ldr	r4, [r0]
   12ae4:	ldr	r3, [pc, #1564]	; 13108 <__assert_fail@plt+0x201c>
   12ae8:	ldr	r2, [r3, #100]	; 0x64
   12aec:	mov	r1, #3
   12af0:	mov	r0, #0
   12af4:	bl	15174 <__assert_fail@plt+0x4088>
   12af8:	mov	r3, r0
   12afc:	ldr	r2, [pc, #1644]	; 13170 <__assert_fail@plt+0x2084>
   12b00:	mov	r1, r4
   12b04:	mov	r0, #1
   12b08:	bl	10f54 <error@plt>
   12b0c:	ldr	r1, [pc, #1624]	; 1316c <__assert_fail@plt+0x2080>
   12b10:	mov	r0, r4
   12b14:	bl	133f8 <__assert_fail@plt+0x230c>
   12b18:	mov	r8, r0
   12b1c:	b	128e8 <__assert_fail@plt+0x17fc>
   12b20:	bl	10ff0 <__errno_location@plt>
   12b24:	ldr	r4, [r0]
   12b28:	ldr	r3, [pc, #1496]	; 13108 <__assert_fail@plt+0x201c>
   12b2c:	ldr	r2, [r3, #104]	; 0x68
   12b30:	mov	r1, #3
   12b34:	mov	r0, #0
   12b38:	bl	15174 <__assert_fail@plt+0x4088>
   12b3c:	mov	r3, r0
   12b40:	ldr	r2, [pc, #1576]	; 13170 <__assert_fail@plt+0x2084>
   12b44:	mov	r1, r4
   12b48:	mov	r0, #1
   12b4c:	bl	10f54 <error@plt>
   12b50:	bl	10ff0 <__errno_location@plt>
   12b54:	ldr	r4, [r0]
   12b58:	mov	r2, #5
   12b5c:	ldr	r1, [pc, #1552]	; 13174 <__assert_fail@plt+0x2088>
   12b60:	mov	r0, #0
   12b64:	bl	10ee8 <dcgettext@plt>
   12b68:	mov	r2, r0
   12b6c:	mov	r1, r4
   12b70:	mov	r0, #1
   12b74:	bl	10f54 <error@plt>
   12b78:	ldr	r3, [sp, #44]	; 0x2c
   12b7c:	ldr	r0, [r3]
   12b80:	ldr	r3, [sp, #48]	; 0x30
   12b84:	cmp	r3, #0
   12b88:	ldreq	r1, [pc, #1512]	; 13178 <__assert_fail@plt+0x208c>
   12b8c:	bne	12bd8 <__assert_fail@plt+0x1aec>
   12b90:	bl	118a4 <__assert_fail@plt+0x7b8>
   12b94:	ldr	r3, [pc, #1388]	; 13108 <__assert_fail@plt+0x201c>
   12b98:	mov	r2, #0
   12b9c:	str	r2, [r3, #64]	; 0x40
   12ba0:	str	r2, [r3, #68]	; 0x44
   12ba4:	ldr	r3, [sp, #36]	; 0x24
   12ba8:	cmp	r3, r2
   12bac:	bne	12be4 <__assert_fail@plt+0x1af8>
   12bb0:	ldr	r3, [sp, #48]	; 0x30
   12bb4:	cmp	r3, #0
   12bb8:	bne	12bfc <__assert_fail@plt+0x1b10>
   12bbc:	ldr	r6, [pc, #1368]	; 1311c <__assert_fail@plt+0x2030>
   12bc0:	mov	r9, #1
   12bc4:	ldr	fp, [pc, #1340]	; 13108 <__assert_fail@plt+0x201c>
   12bc8:	add	r3, fp, #32
   12bcc:	str	r3, [sp, #28]
   12bd0:	b	12c84 <__assert_fail@plt+0x1b98>
   12bd4:	ldr	r0, [pc, #1436]	; 13178 <__assert_fail@plt+0x208c>
   12bd8:	ldr	r3, [sp, #56]	; 0x38
   12bdc:	ldr	r1, [r3]
   12be0:	b	12b90 <__assert_fail@plt+0x1aa4>
   12be4:	add	r1, sp, #88	; 0x58
   12be8:	str	r2, [r1, #-52]!	; 0xffffffcc
   12bec:	mov	r2, #1
   12bf0:	mov	r0, sl
   12bf4:	bl	11dcc <__assert_fail@plt+0xce0>
   12bf8:	b	12bb0 <__assert_fail@plt+0x1ac4>
   12bfc:	add	r1, sp, #88	; 0x58
   12c00:	mov	r3, #0
   12c04:	str	r3, [r1, #-40]!	; 0xffffffd8
   12c08:	mov	r2, #2
   12c0c:	mov	r0, r8
   12c10:	bl	11dcc <__assert_fail@plt+0xce0>
   12c14:	b	12bbc <__assert_fail@plt+0x1ad0>
   12c18:	ldrb	r3, [fp, #109]	; 0x6d
   12c1c:	cmp	r3, #0
   12c20:	bne	12c44 <__assert_fail@plt+0x1b58>
   12c24:	mov	r3, #0
   12c28:	str	r3, [sp, #36]	; 0x24
   12c2c:	mov	r2, r9
   12c30:	add	r1, sp, #36	; 0x24
   12c34:	mov	r0, sl
   12c38:	bl	11dcc <__assert_fail@plt+0xce0>
   12c3c:	strb	r9, [fp, #92]	; 0x5c
   12c40:	b	12c84 <__assert_fail@plt+0x1b98>
   12c44:	ldr	r1, [sp, #28]
   12c48:	ldr	r3, [sp, #44]	; 0x2c
   12c4c:	ldr	r0, [r3]
   12c50:	bl	118a4 <__assert_fail@plt+0x7b8>
   12c54:	b	12c24 <__assert_fail@plt+0x1b38>
   12c58:	ldr	r3, [sp, #56]	; 0x38
   12c5c:	ldr	r1, [r3]
   12c60:	ldr	r0, [sp, #28]
   12c64:	bl	118a4 <__assert_fail@plt+0x7b8>
   12c68:	mov	r3, #0
   12c6c:	str	r3, [sp, #48]	; 0x30
   12c70:	mov	r2, #2
   12c74:	add	r1, sp, #48	; 0x30
   12c78:	mov	r0, r8
   12c7c:	bl	11dcc <__assert_fail@plt+0xce0>
   12c80:	strb	r9, [fp, #92]	; 0x5c
   12c84:	ldr	r3, [sp, #36]	; 0x24
   12c88:	cmp	r3, #0
   12c8c:	beq	129bc <__assert_fail@plt+0x18d0>
   12c90:	ldr	r2, [sp, #48]	; 0x30
   12c94:	cmp	r2, #0
   12c98:	beq	12e90 <__assert_fail@plt+0x1da4>
   12c9c:	ldr	r3, [r6, #8]
   12ca0:	ldr	r2, [r6, #12]
   12ca4:	ldr	r1, [sp, #56]	; 0x38
   12ca8:	ldr	r1, [r1]
   12cac:	ldr	r0, [sp, #44]	; 0x2c
   12cb0:	ldr	r0, [r0]
   12cb4:	bl	115f8 <__assert_fail@plt+0x50c>
   12cb8:	cmp	r0, #0
   12cbc:	blt	12c18 <__assert_fail@plt+0x1b2c>
   12cc0:	cmp	r0, #0
   12cc4:	ble	12cd8 <__assert_fail@plt+0x1bec>
   12cc8:	ldrb	r3, [fp, #110]	; 0x6e
   12ccc:	cmp	r3, #0
   12cd0:	beq	12c68 <__assert_fail@plt+0x1b7c>
   12cd4:	b	12c58 <__assert_fail@plt+0x1b6c>
   12cd8:	mov	r2, r9
   12cdc:	add	r1, sp, #36	; 0x24
   12ce0:	mov	r0, sl
   12ce4:	bl	11dcc <__assert_fail@plt+0xce0>
   12ce8:	cmp	r0, #0
   12cec:	beq	12d28 <__assert_fail@plt+0x1c3c>
   12cf0:	ldr	r0, [sp, #36]	; 0x24
   12cf4:	sub	r0, r0, #-1073741823	; 0xc0000001
   12cf8:	ldr	r3, [r6, #8]
   12cfc:	ldr	r2, [r6, #12]
   12d00:	ldr	r1, [sp, #56]	; 0x38
   12d04:	ldr	r1, [r1]
   12d08:	ldr	ip, [sp, #44]	; 0x2c
   12d0c:	ldr	r0, [ip, r0, lsl #2]
   12d10:	bl	115f8 <__assert_fail@plt+0x50c>
   12d14:	cmp	r0, #0
   12d18:	beq	12cd8 <__assert_fail@plt+0x1bec>
   12d1c:	mov	r3, #0
   12d20:	str	r3, [sp, #20]
   12d24:	b	12d38 <__assert_fail@plt+0x1c4c>
   12d28:	ldr	r3, [sp, #36]	; 0x24
   12d2c:	add	r3, r3, #1
   12d30:	str	r3, [sp, #36]	; 0x24
   12d34:	str	r9, [sp, #20]
   12d38:	mov	r4, #2
   12d3c:	mov	r2, r4
   12d40:	add	r1, sp, #48	; 0x30
   12d44:	mov	r0, r8
   12d48:	bl	11dcc <__assert_fail@plt+0xce0>
   12d4c:	cmp	r0, #0
   12d50:	beq	12d8c <__assert_fail@plt+0x1ca0>
   12d54:	ldr	r1, [sp, #48]	; 0x30
   12d58:	sub	r1, r1, #-1073741823	; 0xc0000001
   12d5c:	ldr	r3, [r6, #8]
   12d60:	ldr	r2, [r6, #12]
   12d64:	ldr	r0, [sp, #56]	; 0x38
   12d68:	ldr	r1, [r0, r1, lsl #2]
   12d6c:	ldr	r0, [sp, #44]	; 0x2c
   12d70:	ldr	r0, [r0]
   12d74:	bl	115f8 <__assert_fail@plt+0x50c>
   12d78:	cmp	r0, #0
   12d7c:	beq	12d3c <__assert_fail@plt+0x1c50>
   12d80:	mov	r3, #0
   12d84:	str	r3, [sp, #24]
   12d88:	b	12d9c <__assert_fail@plt+0x1cb0>
   12d8c:	ldr	r3, [sp, #48]	; 0x30
   12d90:	add	r3, r3, #1
   12d94:	str	r3, [sp, #48]	; 0x30
   12d98:	str	r9, [sp, #24]
   12d9c:	ldrb	r3, [fp, #108]	; 0x6c
   12da0:	cmp	r3, #0
   12da4:	beq	12db8 <__assert_fail@plt+0x1ccc>
   12da8:	ldr	r3, [sp, #36]	; 0x24
   12dac:	cmp	r3, #1
   12db0:	movne	r7, #0
   12db4:	bne	12e78 <__assert_fail@plt+0x1d8c>
   12db8:	ldr	r3, [sp, #20]
   12dbc:	cmp	r3, #0
   12dc0:	movne	r3, #0
   12dc4:	strne	r3, [sp, #36]	; 0x24
   12dc8:	bne	12df8 <__assert_fail@plt+0x1d0c>
   12dcc:	ldr	r3, [sp, #44]	; 0x2c
   12dd0:	ldr	r1, [r3]
   12dd4:	ldr	r2, [sp, #36]	; 0x24
   12dd8:	sub	r2, r2, #-1073741823	; 0xc0000001
   12ddc:	ldr	r2, [r3, r2, lsl #2]
   12de0:	str	r2, [r3]
   12de4:	ldr	r3, [sp, #36]	; 0x24
   12de8:	sub	r3, r3, #-1073741823	; 0xc0000001
   12dec:	ldr	r2, [sp, #44]	; 0x2c
   12df0:	str	r1, [r2, r3, lsl #2]
   12df4:	str	r9, [sp, #36]	; 0x24
   12df8:	ldr	r3, [sp, #24]
   12dfc:	cmp	r3, #0
   12e00:	movne	r3, #0
   12e04:	strne	r3, [sp, #48]	; 0x30
   12e08:	bne	12c84 <__assert_fail@plt+0x1b98>
   12e0c:	ldr	r3, [sp, #56]	; 0x38
   12e10:	ldr	r1, [r3]
   12e14:	ldr	r2, [sp, #48]	; 0x30
   12e18:	sub	r2, r2, #-1073741823	; 0xc0000001
   12e1c:	ldr	r2, [r3, r2, lsl #2]
   12e20:	str	r2, [r3]
   12e24:	ldr	r3, [sp, #48]	; 0x30
   12e28:	sub	r3, r3, #-1073741823	; 0xc0000001
   12e2c:	ldr	r2, [sp, #56]	; 0x38
   12e30:	str	r1, [r2, r3, lsl #2]
   12e34:	str	r9, [sp, #48]	; 0x30
   12e38:	b	12c84 <__assert_fail@plt+0x1b98>
   12e3c:	ldr	r3, [sp, #56]	; 0x38
   12e40:	ldr	r1, [r3, r4, lsl #2]
   12e44:	ldr	r3, [sp, #44]	; 0x2c
   12e48:	ldr	r0, [r3, r5]
   12e4c:	bl	118a4 <__assert_fail@plt+0x7b8>
   12e50:	add	r4, r4, #1
   12e54:	ldr	r3, [sp, #48]	; 0x30
   12e58:	sub	r3, r3, #1
   12e5c:	cmp	r4, r3
   12e60:	bcc	12e3c <__assert_fail@plt+0x1d50>
   12e64:	add	r7, r7, #1
   12e68:	ldr	r3, [sp, #36]	; 0x24
   12e6c:	sub	r3, r3, #1
   12e70:	cmp	r7, r3
   12e74:	bcs	12db8 <__assert_fail@plt+0x1ccc>
   12e78:	ldr	r3, [sp, #48]	; 0x30
   12e7c:	cmp	r3, #1
   12e80:	beq	12e64 <__assert_fail@plt+0x1d78>
   12e84:	lsl	r5, r7, #2
   12e88:	mov	r4, #0
   12e8c:	b	12e3c <__assert_fail@plt+0x1d50>
   12e90:	str	r2, [sp, #32]
   12e94:	ldr	r2, [pc, #620]	; 13108 <__assert_fail@plt+0x201c>
   12e98:	ldr	r2, [r2, #88]	; 0x58
   12e9c:	cmp	r2, #2
   12ea0:	beq	129fc <__assert_fail@plt+0x1910>
   12ea4:	ldr	r2, [pc, #604]	; 13108 <__assert_fail@plt+0x201c>
   12ea8:	ldrb	r2, [r2, #96]	; 0x60
   12eac:	cmp	r2, #0
   12eb0:	bne	129ec <__assert_fail@plt+0x1900>
   12eb4:	ldr	r3, [pc, #588]	; 13108 <__assert_fail@plt+0x201c>
   12eb8:	ldrb	r2, [r3, #109]	; 0x6d
   12ebc:	mov	r4, #1
   12ec0:	cmp	r2, #0
   12ec4:	bne	12ee8 <__assert_fail@plt+0x1dfc>
   12ec8:	ldr	r3, [sp, #48]	; 0x30
   12ecc:	cmp	r3, #0
   12ed0:	movne	r2, #1
   12ed4:	ldrne	r3, [pc, #556]	; 13108 <__assert_fail@plt+0x201c>
   12ed8:	strbne	r2, [r3, #92]	; 0x5c
   12edc:	ldr	r5, [pc, #548]	; 13108 <__assert_fail@plt+0x201c>
   12ee0:	add	r6, r5, #32
   12ee4:	b	12f20 <__assert_fail@plt+0x1e34>
   12ee8:	ldr	r1, [pc, #648]	; 13178 <__assert_fail@plt+0x208c>
   12eec:	ldr	r3, [sp, #44]	; 0x2c
   12ef0:	ldr	r0, [r3]
   12ef4:	bl	118a4 <__assert_fail@plt+0x7b8>
   12ef8:	b	12ec8 <__assert_fail@plt+0x1ddc>
   12efc:	mov	r1, r6
   12f00:	ldr	r0, [sp, #32]
   12f04:	bl	118a4 <__assert_fail@plt+0x7b8>
   12f08:	ldrb	r3, [r5, #96]	; 0x60
   12f0c:	cmp	r3, #0
   12f10:	beq	12f20 <__assert_fail@plt+0x1e34>
   12f14:	ldrb	r3, [r5, #109]	; 0x6d
   12f18:	cmp	r3, #0
   12f1c:	beq	12f50 <__assert_fail@plt+0x1e64>
   12f20:	mov	r2, #1
   12f24:	add	r1, sp, #32
   12f28:	mov	r0, sl
   12f2c:	bl	11a18 <__assert_fail@plt+0x92c>
   12f30:	cmp	r0, #0
   12f34:	beq	12f50 <__assert_fail@plt+0x1e64>
   12f38:	ldrb	r3, [r5, #109]	; 0x6d
   12f3c:	cmp	r3, #0
   12f40:	bne	12efc <__assert_fail@plt+0x1e10>
   12f44:	ldrb	r3, [r5, #96]	; 0x60
   12f48:	cmp	r3, #0
   12f4c:	beq	12f20 <__assert_fail@plt+0x1e34>
   12f50:	ldr	r3, [pc, #432]	; 13108 <__assert_fail@plt+0x201c>
   12f54:	ldrb	r3, [r3, #110]	; 0x6e
   12f58:	orrs	r2, r3, r4
   12f5c:	bne	130c8 <__assert_fail@plt+0x1fdc>
   12f60:	ldr	r0, [sp, #32]
   12f64:	bl	11278 <__assert_fail@plt+0x18c>
   12f68:	ldr	r0, [sp, #32]
   12f6c:	bl	13494 <__assert_fail@plt+0x23a8>
   12f70:	add	r0, sp, #36	; 0x24
   12f74:	bl	112f0 <__assert_fail@plt+0x204>
   12f78:	add	r0, sp, #48	; 0x30
   12f7c:	bl	112f0 <__assert_fail@plt+0x204>
   12f80:	mov	r0, sl
   12f84:	bl	132ec <__assert_fail@plt+0x2200>
   12f88:	cmp	r0, #0
   12f8c:	bne	13038 <__assert_fail@plt+0x1f4c>
   12f90:	mov	r0, r8
   12f94:	bl	132ec <__assert_fail@plt+0x2200>
   12f98:	cmp	r0, #0
   12f9c:	bne	13068 <__assert_fail@plt+0x1f7c>
   12fa0:	ldr	r3, [pc, #352]	; 13108 <__assert_fail@plt+0x201c>
   12fa4:	ldrb	r3, [r3, #96]	; 0x60
   12fa8:	cmp	r3, #0
   12fac:	bne	13098 <__assert_fail@plt+0x1fac>
   12fb0:	ldr	r3, [pc, #336]	; 13108 <__assert_fail@plt+0x201c>
   12fb4:	ldrb	r3, [r3, #97]	; 0x61
   12fb8:	cmp	r3, #0
   12fbc:	bne	13098 <__assert_fail@plt+0x1fac>
   12fc0:	mov	r0, #0
   12fc4:	add	sp, sp, #92	; 0x5c
   12fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fcc:	ldr	r3, [sp, #56]	; 0x38
   12fd0:	ldr	r1, [r3]
   12fd4:	ldr	r0, [pc, #412]	; 13178 <__assert_fail@plt+0x208c>
   12fd8:	bl	118a4 <__assert_fail@plt+0x7b8>
   12fdc:	b	130dc <__assert_fail@plt+0x1ff0>
   12fe0:	ldr	r1, [sp, #32]
   12fe4:	mov	r0, r5
   12fe8:	bl	118a4 <__assert_fail@plt+0x7b8>
   12fec:	ldrb	r3, [r4, #97]	; 0x61
   12ff0:	cmp	r3, #0
   12ff4:	beq	13004 <__assert_fail@plt+0x1f18>
   12ff8:	ldrb	r3, [r4, #110]	; 0x6e
   12ffc:	cmp	r3, #0
   13000:	beq	12f60 <__assert_fail@plt+0x1e74>
   13004:	mov	r2, #2
   13008:	add	r1, sp, #32
   1300c:	mov	r0, r8
   13010:	bl	11a18 <__assert_fail@plt+0x92c>
   13014:	cmp	r0, #0
   13018:	beq	12f60 <__assert_fail@plt+0x1e74>
   1301c:	ldrb	r3, [r4, #110]	; 0x6e
   13020:	cmp	r3, #0
   13024:	bne	12fe0 <__assert_fail@plt+0x1ef4>
   13028:	ldrb	r3, [r4, #97]	; 0x61
   1302c:	cmp	r3, #0
   13030:	beq	13004 <__assert_fail@plt+0x1f18>
   13034:	b	12f60 <__assert_fail@plt+0x1e74>
   13038:	bl	10ff0 <__errno_location@plt>
   1303c:	ldr	r4, [r0]
   13040:	ldr	r3, [pc, #192]	; 13108 <__assert_fail@plt+0x201c>
   13044:	ldr	r2, [r3, #100]	; 0x64
   13048:	mov	r1, #3
   1304c:	mov	r0, #0
   13050:	bl	15174 <__assert_fail@plt+0x4088>
   13054:	mov	r3, r0
   13058:	ldr	r2, [pc, #272]	; 13170 <__assert_fail@plt+0x2084>
   1305c:	mov	r1, r4
   13060:	mov	r0, #1
   13064:	bl	10f54 <error@plt>
   13068:	bl	10ff0 <__errno_location@plt>
   1306c:	ldr	r4, [r0]
   13070:	ldr	r3, [pc, #144]	; 13108 <__assert_fail@plt+0x201c>
   13074:	ldr	r2, [r3, #104]	; 0x68
   13078:	mov	r1, #3
   1307c:	mov	r0, #0
   13080:	bl	15174 <__assert_fail@plt+0x4088>
   13084:	mov	r3, r0
   13088:	ldr	r2, [pc, #224]	; 13170 <__assert_fail@plt+0x2084>
   1308c:	mov	r1, r4
   13090:	mov	r0, #1
   13094:	bl	10f54 <error@plt>
   13098:	mov	r2, #5
   1309c:	ldr	r1, [pc, #216]	; 1317c <__assert_fail@plt+0x2090>
   130a0:	mov	r0, #0
   130a4:	bl	10ee8 <dcgettext@plt>
   130a8:	mov	r2, r0
   130ac:	mov	r1, #0
   130b0:	mov	r0, #1
   130b4:	bl	10f54 <error@plt>
   130b8:	cmp	r3, #0
   130bc:	bne	12eb4 <__assert_fail@plt+0x1dc8>
   130c0:	ldr	r3, [pc, #64]	; 13108 <__assert_fail@plt+0x201c>
   130c4:	ldrb	r3, [r3, #110]	; 0x6e
   130c8:	ldr	r2, [sp, #48]	; 0x30
   130cc:	cmp	r2, #0
   130d0:	beq	12f60 <__assert_fail@plt+0x1e74>
   130d4:	cmp	r3, #0
   130d8:	bne	12fcc <__assert_fail@plt+0x1ee0>
   130dc:	ldr	r3, [sp, #36]	; 0x24
   130e0:	cmp	r3, #0
   130e4:	movne	r2, #1
   130e8:	ldrne	r3, [pc, #24]	; 13108 <__assert_fail@plt+0x201c>
   130ec:	strbne	r2, [r3, #92]	; 0x5c
   130f0:	ldr	r4, [pc, #16]	; 13108 <__assert_fail@plt+0x201c>
   130f4:	add	r5, r4, #32
   130f8:	b	13004 <__assert_fail@plt+0x1f18>
   130fc:	andeq	r7, r1, r0, ror lr
   13100:	andeq	r8, r1, r4, asr r2
   13104:	andeq	r8, r1, r0, lsl r3
   13108:	andeq	r9, r2, r8, lsl #3
   1310c:	andeq	r3, r1, r0, lsr #3
   13110:	andeq	r1, r1, r4, lsr #5
   13114:	andeq	r7, r1, ip, lsl #15
   13118:	muleq	r1, ip, r3
   1311c:	andeq	r9, r2, r4, lsl #2
   13120:	andeq	r9, r2, r0, lsl #3
   13124:	andeq	r0, r0, r1, lsl #2
   13128:	andeq	r7, r1, r0, lsr r8
   1312c:	andeq	r8, r1, r8, lsr #6
   13130:	andeq	r9, r2, r8, ror #2
   13134:	andeq	r8, r1, r4, asr r3
   13138:	andeq	r8, r1, ip, asr r3
   1313c:	andeq	r8, r1, r0, ror #6
   13140:	andeq	r8, r1, r8, ror r3
   13144:	andeq	r8, r1, ip, lsl #7
   13148:	andeq	r9, r2, r8, lsl r1
   1314c:	andeq	r8, r1, r0, asr r2
   13150:	andeq	r7, r1, r8, lsl #18
   13154:	andeq	r9, r2, ip, ror r1
   13158:	andeq	r9, r2, ip, ror #3
   1315c:	ldrdeq	r8, [r1], -ip
   13160:	andeq	r9, r2, r8, ror r1
   13164:			; <UNDEFINED> instruction: 0x000183b0
   13168:	andeq	r8, r1, r0, asr #7
   1316c:			; <UNDEFINED> instruction: 0x000184b4
   13170:	andeq	r8, r1, r0, lsl #10
   13174:	andeq	r8, r1, r0, ror #7
   13178:	andeq	r9, r2, r8, lsr #3
   1317c:	andeq	r8, r1, r4, lsl #8
   13180:	ldr	r3, [pc, #4]	; 1318c <__assert_fail@plt+0x20a0>
   13184:	str	r0, [r3]
   13188:	bx	lr
   1318c:	strdeq	r9, [r2], -r8
   13190:	ldr	r3, [pc, #4]	; 1319c <__assert_fail@plt+0x20b0>
   13194:	strb	r0, [r3, #4]
   13198:	bx	lr
   1319c:	strdeq	r9, [r2], -r8
   131a0:	push	{r4, r5, r6, lr}
   131a4:	sub	sp, sp, #8
   131a8:	ldr	r3, [pc, #200]	; 13278 <__assert_fail@plt+0x218c>
   131ac:	ldr	r0, [r3]
   131b0:	bl	16bf8 <__assert_fail@plt+0x5b0c>
   131b4:	cmp	r0, #0
   131b8:	beq	131dc <__assert_fail@plt+0x20f0>
   131bc:	ldr	r3, [pc, #184]	; 1327c <__assert_fail@plt+0x2190>
   131c0:	ldrb	r3, [r3, #4]
   131c4:	cmp	r3, #0
   131c8:	beq	131f8 <__assert_fail@plt+0x210c>
   131cc:	bl	10ff0 <__errno_location@plt>
   131d0:	ldr	r3, [r0]
   131d4:	cmp	r3, #32
   131d8:	bne	131f8 <__assert_fail@plt+0x210c>
   131dc:	ldr	r3, [pc, #156]	; 13280 <__assert_fail@plt+0x2194>
   131e0:	ldr	r0, [r3]
   131e4:	bl	16bf8 <__assert_fail@plt+0x5b0c>
   131e8:	cmp	r0, #0
   131ec:	bne	1326c <__assert_fail@plt+0x2180>
   131f0:	add	sp, sp, #8
   131f4:	pop	{r4, r5, r6, pc}
   131f8:	mov	r2, #5
   131fc:	ldr	r1, [pc, #128]	; 13284 <__assert_fail@plt+0x2198>
   13200:	mov	r0, #0
   13204:	bl	10ee8 <dcgettext@plt>
   13208:	mov	r4, r0
   1320c:	ldr	r3, [pc, #104]	; 1327c <__assert_fail@plt+0x2190>
   13210:	ldr	r5, [r3]
   13214:	cmp	r5, #0
   13218:	beq	13250 <__assert_fail@plt+0x2164>
   1321c:	bl	10ff0 <__errno_location@plt>
   13220:	ldr	r6, [r0]
   13224:	mov	r0, r5
   13228:	bl	15154 <__assert_fail@plt+0x4068>
   1322c:	str	r4, [sp]
   13230:	mov	r3, r0
   13234:	ldr	r2, [pc, #76]	; 13288 <__assert_fail@plt+0x219c>
   13238:	mov	r1, r6
   1323c:	mov	r0, #0
   13240:	bl	10f54 <error@plt>
   13244:	ldr	r3, [pc, #64]	; 1328c <__assert_fail@plt+0x21a0>
   13248:	ldr	r0, [r3]
   1324c:	bl	10e94 <_exit@plt>
   13250:	bl	10ff0 <__errno_location@plt>
   13254:	mov	r3, r4
   13258:	ldr	r2, [pc, #48]	; 13290 <__assert_fail@plt+0x21a4>
   1325c:	ldr	r1, [r0]
   13260:	mov	r0, #0
   13264:	bl	10f54 <error@plt>
   13268:	b	13244 <__assert_fail@plt+0x2158>
   1326c:	ldr	r3, [pc, #24]	; 1328c <__assert_fail@plt+0x21a0>
   13270:	ldr	r0, [r3]
   13274:	bl	10e94 <_exit@plt>
   13278:	andeq	r9, r2, ip, ror r1
   1327c:	strdeq	r9, [r2], -r8
   13280:	andeq	r9, r2, r0, ror r1
   13284:	strdeq	r8, [r1], -r0
   13288:	strdeq	r8, [r1], -ip
   1328c:	andeq	r9, r2, ip, lsl r1
   13290:	andeq	r8, r1, r0, lsl #10
   13294:	push	{r4, r5, lr}
   13298:	sub	sp, sp, #20
   1329c:	ldr	r1, [sp, #40]	; 0x28
   132a0:	str	r1, [sp, #8]
   132a4:	ldrd	r4, [sp, #32]
   132a8:	strd	r4, [sp]
   132ac:	bl	10e70 <posix_fadvise64@plt>
   132b0:	add	sp, sp, #20
   132b4:	pop	{r4, r5, pc}
   132b8:	cmp	r0, #0
   132bc:	bxeq	lr
   132c0:	push	{r4, lr}
   132c4:	sub	sp, sp, #16
   132c8:	mov	r4, r1
   132cc:	bl	11020 <fileno@plt>
   132d0:	str	r4, [sp, #8]
   132d4:	mov	r2, #0
   132d8:	mov	r3, #0
   132dc:	strd	r2, [sp]
   132e0:	bl	10e70 <posix_fadvise64@plt>
   132e4:	add	sp, sp, #16
   132e8:	pop	{r4, pc}
   132ec:	push	{r4, r5, r6, lr}
   132f0:	sub	sp, sp, #8
   132f4:	mov	r4, r0
   132f8:	bl	11020 <fileno@plt>
   132fc:	cmp	r0, #0
   13300:	blt	13378 <__assert_fail@plt+0x228c>
   13304:	mov	r0, r4
   13308:	bl	10f84 <__freading@plt>
   1330c:	cmp	r0, #0
   13310:	beq	13344 <__assert_fail@plt+0x2258>
   13314:	mov	r0, r4
   13318:	bl	11020 <fileno@plt>
   1331c:	mov	r3, #1
   13320:	str	r3, [sp]
   13324:	mov	r2, #0
   13328:	mov	r3, #0
   1332c:	bl	10f24 <lseek64@plt>
   13330:	mvn	r2, #0
   13334:	mvn	r3, #0
   13338:	cmp	r1, r3
   1333c:	cmpeq	r0, r2
   13340:	beq	13384 <__assert_fail@plt+0x2298>
   13344:	mov	r0, r4
   13348:	bl	13394 <__assert_fail@plt+0x22a8>
   1334c:	cmp	r0, #0
   13350:	beq	13384 <__assert_fail@plt+0x2298>
   13354:	bl	10ff0 <__errno_location@plt>
   13358:	mov	r5, r0
   1335c:	ldr	r6, [r0]
   13360:	mov	r0, r4
   13364:	bl	11044 <fclose@plt>
   13368:	cmp	r6, #0
   1336c:	strne	r6, [r5]
   13370:	mvnne	r0, #0
   13374:	b	1338c <__assert_fail@plt+0x22a0>
   13378:	mov	r0, r4
   1337c:	bl	11044 <fclose@plt>
   13380:	b	1338c <__assert_fail@plt+0x22a0>
   13384:	mov	r0, r4
   13388:	bl	11044 <fclose@plt>
   1338c:	add	sp, sp, #8
   13390:	pop	{r4, r5, r6, pc}
   13394:	push	{r4, lr}
   13398:	sub	sp, sp, #8
   1339c:	subs	r4, r0, #0
   133a0:	beq	133b4 <__assert_fail@plt+0x22c8>
   133a4:	mov	r0, r4
   133a8:	bl	10f84 <__freading@plt>
   133ac:	cmp	r0, #0
   133b0:	bne	133c4 <__assert_fail@plt+0x22d8>
   133b4:	mov	r0, r4
   133b8:	bl	10e7c <fflush@plt>
   133bc:	add	sp, sp, #8
   133c0:	pop	{r4, pc}
   133c4:	ldr	r3, [r4]
   133c8:	tst	r3, #256	; 0x100
   133cc:	bne	133dc <__assert_fail@plt+0x22f0>
   133d0:	mov	r0, r4
   133d4:	bl	10e7c <fflush@plt>
   133d8:	b	133bc <__assert_fail@plt+0x22d0>
   133dc:	mov	r3, #1
   133e0:	str	r3, [sp]
   133e4:	mov	r2, #0
   133e8:	mov	r3, #0
   133ec:	mov	r0, r4
   133f0:	bl	134ec <__assert_fail@plt+0x2400>
   133f4:	b	133d0 <__assert_fail@plt+0x22e4>
   133f8:	push	{r4, r5, r6, lr}
   133fc:	mov	r5, r1
   13400:	bl	110a4 <fopen64@plt>
   13404:	subs	r4, r0, #0
   13408:	beq	1341c <__assert_fail@plt+0x2330>
   1340c:	mov	r0, r4
   13410:	bl	11020 <fileno@plt>
   13414:	cmp	r0, #2
   13418:	bls	13424 <__assert_fail@plt+0x2338>
   1341c:	mov	r0, r4
   13420:	pop	{r4, r5, r6, pc}
   13424:	bl	15398 <__assert_fail@plt+0x42ac>
   13428:	subs	r6, r0, #0
   1342c:	blt	13474 <__assert_fail@plt+0x2388>
   13430:	mov	r0, r4
   13434:	bl	132ec <__assert_fail@plt+0x2200>
   13438:	cmp	r0, #0
   1343c:	bne	13454 <__assert_fail@plt+0x2368>
   13440:	mov	r1, r5
   13444:	mov	r0, r6
   13448:	bl	10e34 <fdopen@plt>
   1344c:	subs	r4, r0, #0
   13450:	bne	1341c <__assert_fail@plt+0x2330>
   13454:	bl	10ff0 <__errno_location@plt>
   13458:	mov	r4, r0
   1345c:	ldr	r5, [r0]
   13460:	mov	r0, r6
   13464:	bl	110e0 <close@plt>
   13468:	str	r5, [r4]
   1346c:	mov	r4, #0
   13470:	b	1341c <__assert_fail@plt+0x2330>
   13474:	bl	10ff0 <__errno_location@plt>
   13478:	mov	r5, r0
   1347c:	ldr	r6, [r0]
   13480:	mov	r0, r4
   13484:	bl	132ec <__assert_fail@plt+0x2200>
   13488:	str	r6, [r5]
   1348c:	mov	r4, #0
   13490:	b	1341c <__assert_fail@plt+0x2330>
   13494:	push	{r4, r5, lr}
   13498:	sub	sp, sp, #12
   1349c:	mov	r5, r0
   134a0:	bl	10ff0 <__errno_location@plt>
   134a4:	mov	r4, r0
   134a8:	ldr	r3, [r0]
   134ac:	str	r3, [sp]
   134b0:	str	r3, [sp, #4]
   134b4:	mov	r3, #0
   134b8:	str	r3, [r0]
   134bc:	mov	r0, r5
   134c0:	bl	10e88 <free@plt>
   134c4:	ldr	r3, [r4]
   134c8:	cmp	r3, #0
   134cc:	moveq	r3, #4
   134d0:	movne	r3, #0
   134d4:	add	r2, sp, #8
   134d8:	add	r3, r2, r3
   134dc:	ldr	r3, [r3, #-8]
   134e0:	str	r3, [r4]
   134e4:	add	sp, sp, #12
   134e8:	pop	{r4, r5, pc}
   134ec:	push	{r4, r5, r6, r7, lr}
   134f0:	sub	sp, sp, #12
   134f4:	mov	r4, r0
   134f8:	mov	r6, r2
   134fc:	mov	r7, r3
   13500:	ldr	r5, [sp, #32]
   13504:	ldr	r2, [r0, #8]
   13508:	ldr	r3, [r0, #4]
   1350c:	cmp	r2, r3
   13510:	beq	13530 <__assert_fail@plt+0x2444>
   13514:	str	r5, [sp]
   13518:	mov	r2, r6
   1351c:	mov	r3, r7
   13520:	mov	r0, r4
   13524:	bl	11050 <fseeko64@plt>
   13528:	add	sp, sp, #12
   1352c:	pop	{r4, r5, r6, r7, pc}
   13530:	ldr	r2, [r0, #20]
   13534:	ldr	r3, [r0, #16]
   13538:	cmp	r2, r3
   1353c:	bne	13514 <__assert_fail@plt+0x2428>
   13540:	ldr	r3, [r0, #36]	; 0x24
   13544:	cmp	r3, #0
   13548:	bne	13514 <__assert_fail@plt+0x2428>
   1354c:	bl	11020 <fileno@plt>
   13550:	str	r5, [sp]
   13554:	mov	r2, r6
   13558:	mov	r3, r7
   1355c:	bl	10f24 <lseek64@plt>
   13560:	mvn	r2, #0
   13564:	mvn	r3, #0
   13568:	cmp	r1, r3
   1356c:	cmpeq	r0, r2
   13570:	beq	1358c <__assert_fail@plt+0x24a0>
   13574:	ldr	r3, [r4]
   13578:	bic	r3, r3, #16
   1357c:	str	r3, [r4]
   13580:	strd	r0, [r4, #80]	; 0x50
   13584:	mov	r0, #0
   13588:	b	13528 <__assert_fail@plt+0x243c>
   1358c:	mvn	r0, #0
   13590:	b	13528 <__assert_fail@plt+0x243c>
   13594:	push	{lr}		; (str lr, [sp, #-4]!)
   13598:	sub	sp, sp, #268	; 0x10c
   1359c:	ldr	r2, [pc, #68]	; 135e8 <__assert_fail@plt+0x24fc>
   135a0:	add	r1, sp, #4
   135a4:	bl	152f0 <__assert_fail@plt+0x4204>
   135a8:	cmp	r0, #0
   135ac:	movne	r0, #0
   135b0:	bne	135e0 <__assert_fail@plt+0x24f4>
   135b4:	ldr	r1, [pc, #48]	; 135ec <__assert_fail@plt+0x2500>
   135b8:	add	r0, sp, #4
   135bc:	bl	10e64 <strcmp@plt>
   135c0:	cmp	r0, #0
   135c4:	moveq	r0, #0
   135c8:	beq	135e0 <__assert_fail@plt+0x24f4>
   135cc:	ldr	r1, [pc, #28]	; 135f0 <__assert_fail@plt+0x2504>
   135d0:	add	r0, sp, #4
   135d4:	bl	10e64 <strcmp@plt>
   135d8:	adds	r0, r0, #0
   135dc:	movne	r0, #1
   135e0:	add	sp, sp, #268	; 0x10c
   135e4:	pop	{pc}		; (ldr pc, [sp], #4)
   135e8:	andeq	r0, r0, r1, lsl #2
   135ec:	andeq	r8, r1, r4, lsl #10
   135f0:	andeq	r8, r1, r8, lsl #10
   135f4:	mov	r3, #0
   135f8:	str	r3, [r0]
   135fc:	str	r3, [r0, #4]
   13600:	str	r3, [r0, #8]
   13604:	bx	lr
   13608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1360c:	sub	sp, sp, #12
   13610:	ldr	r9, [r0, #8]
   13614:	ldr	r8, [r0]
   13618:	add	r8, r9, r8
   1361c:	ldr	r3, [r1]
   13620:	tst	r3, #16
   13624:	bne	13700 <__assert_fail@plt+0x2614>
   13628:	mov	r7, r2
   1362c:	mov	r6, r1
   13630:	mov	sl, r0
   13634:	mov	r5, r9
   13638:	mov	fp, #1
   1363c:	b	1366c <__assert_fail@plt+0x2580>
   13640:	mov	r0, r6
   13644:	bl	11068 <__uflow@plt>
   13648:	mov	r4, r0
   1364c:	b	13688 <__assert_fail@plt+0x259c>
   13650:	cmp	r5, r8
   13654:	movne	r3, r5
   13658:	beq	136b8 <__assert_fail@plt+0x25cc>
   1365c:	add	r5, r3, #1
   13660:	strb	r4, [r3]
   13664:	cmp	r4, r7
   13668:	beq	136ec <__assert_fail@plt+0x2600>
   1366c:	ldr	r3, [r6, #4]
   13670:	ldr	r2, [r6, #8]
   13674:	cmp	r3, r2
   13678:	bcs	13640 <__assert_fail@plt+0x2554>
   1367c:	add	r2, r3, #1
   13680:	str	r2, [r6, #4]
   13684:	ldrb	r4, [r3]
   13688:	cmn	r4, #1
   1368c:	bne	13650 <__assert_fail@plt+0x2564>
   13690:	cmp	r9, r5
   13694:	beq	13708 <__assert_fail@plt+0x261c>
   13698:	ldr	r3, [r6]
   1369c:	tst	r3, #32
   136a0:	bne	13710 <__assert_fail@plt+0x2624>
   136a4:	ldrb	r3, [r5, #-1]
   136a8:	cmp	r3, r7
   136ac:	beq	136ec <__assert_fail@plt+0x2600>
   136b0:	mov	r4, r7
   136b4:	b	13650 <__assert_fail@plt+0x2564>
   136b8:	ldr	r5, [sl]
   136bc:	str	fp, [sp]
   136c0:	mvn	r3, #0
   136c4:	mov	r2, fp
   136c8:	mov	r1, sl
   136cc:	mov	r0, r9
   136d0:	bl	15adc <__assert_fail@plt+0x49f0>
   136d4:	mov	r9, r0
   136d8:	add	r3, r0, r5
   136dc:	str	r0, [sl, #8]
   136e0:	ldr	r8, [sl]
   136e4:	add	r8, r0, r8
   136e8:	b	1365c <__assert_fail@plt+0x2570>
   136ec:	sub	r5, r5, r9
   136f0:	str	r5, [sl, #4]
   136f4:	mov	r0, sl
   136f8:	add	sp, sp, #12
   136fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13700:	mov	r0, #0
   13704:	b	136f8 <__assert_fail@plt+0x260c>
   13708:	mov	r0, #0
   1370c:	b	136f8 <__assert_fail@plt+0x260c>
   13710:	mov	r0, #0
   13714:	b	136f8 <__assert_fail@plt+0x260c>
   13718:	push	{r4, lr}
   1371c:	mov	r2, #10
   13720:	bl	13608 <__assert_fail@plt+0x251c>
   13724:	pop	{r4, pc}
   13728:	push	{r4, lr}
   1372c:	ldr	r0, [r0, #8]
   13730:	bl	13494 <__assert_fail@plt+0x23a8>
   13734:	pop	{r4, pc}
   13738:	push	{r4, r5, r6, lr}
   1373c:	subs	r6, r2, #0
   13740:	beq	13784 <__assert_fail@plt+0x2698>
   13744:	mov	r4, r1
   13748:	mov	r5, r0
   1374c:	bl	10f90 <__ctype_toupper_loc@plt>
   13750:	ldr	ip, [r0]
   13754:	mov	r3, r5
   13758:	sub	r1, r4, #1
   1375c:	add	lr, r5, r6
   13760:	ldrb	r0, [r3], #1
   13764:	ldrb	r2, [r1, #1]!
   13768:	ldr	r0, [ip, r0, lsl #2]
   1376c:	ldr	r2, [ip, r2, lsl #2]
   13770:	subs	r0, r0, r2
   13774:	popne	{r4, r5, r6, pc}
   13778:	cmp	r3, lr
   1377c:	bne	13760 <__assert_fail@plt+0x2674>
   13780:	pop	{r4, r5, r6, pc}
   13784:	mov	r0, #0
   13788:	pop	{r4, r5, r6, pc}
   1378c:	push	{r4, r5, r6, lr}
   13790:	subs	r4, r0, #0
   13794:	beq	1380c <__assert_fail@plt+0x2720>
   13798:	mov	r1, #47	; 0x2f
   1379c:	mov	r0, r4
   137a0:	bl	1108c <strrchr@plt>
   137a4:	cmp	r0, #0
   137a8:	addne	r5, r0, #1
   137ac:	moveq	r5, r4
   137b0:	sub	r3, r5, r4
   137b4:	cmp	r3, #6
   137b8:	ble	137f8 <__assert_fail@plt+0x270c>
   137bc:	mov	r2, #7
   137c0:	ldr	r1, [pc, #96]	; 13828 <__assert_fail@plt+0x273c>
   137c4:	sub	r0, r5, #7
   137c8:	bl	110c8 <strncmp@plt>
   137cc:	cmp	r0, #0
   137d0:	bne	137f8 <__assert_fail@plt+0x270c>
   137d4:	mov	r2, #3
   137d8:	ldr	r1, [pc, #76]	; 1382c <__assert_fail@plt+0x2740>
   137dc:	mov	r0, r5
   137e0:	bl	110c8 <strncmp@plt>
   137e4:	cmp	r0, #0
   137e8:	addeq	r4, r5, #3
   137ec:	ldreq	r3, [pc, #60]	; 13830 <__assert_fail@plt+0x2744>
   137f0:	streq	r4, [r3]
   137f4:	movne	r4, r5
   137f8:	ldr	r3, [pc, #52]	; 13834 <__assert_fail@plt+0x2748>
   137fc:	str	r4, [r3]
   13800:	ldr	r3, [pc, #48]	; 13838 <__assert_fail@plt+0x274c>
   13804:	str	r4, [r3]
   13808:	pop	{r4, r5, r6, pc}
   1380c:	ldr	r3, [pc, #40]	; 1383c <__assert_fail@plt+0x2750>
   13810:	ldr	r3, [r3]
   13814:	mov	r2, #55	; 0x37
   13818:	mov	r1, #1
   1381c:	ldr	r0, [pc, #28]	; 13840 <__assert_fail@plt+0x2754>
   13820:	bl	10f18 <fwrite@plt>
   13824:	bl	110d4 <abort@plt>
   13828:	andeq	r8, r1, r8, asr #10
   1382c:	andeq	r8, r1, r0, asr r5
   13830:	andeq	r9, r2, r0, ror #2
   13834:	andeq	r9, r2, r0, lsl #4
   13838:	andeq	r9, r2, r4, ror #2
   1383c:	andeq	r9, r2, r0, ror r1
   13840:	andeq	r8, r1, r0, lsl r5
   13844:	push	{r4, r5, r6, lr}
   13848:	mov	r5, r0
   1384c:	mov	r4, r1
   13850:	mov	r2, #48	; 0x30
   13854:	mov	r1, #0
   13858:	bl	11008 <memset@plt>
   1385c:	cmp	r4, #10
   13860:	beq	13870 <__assert_fail@plt+0x2784>
   13864:	str	r4, [r5]
   13868:	mov	r0, r5
   1386c:	pop	{r4, r5, r6, pc}
   13870:	bl	110d4 <abort@plt>
   13874:	push	{r4, r5, r6, lr}
   13878:	mov	r4, r0
   1387c:	mov	r5, r1
   13880:	mov	r2, #5
   13884:	mov	r1, r0
   13888:	mov	r0, #0
   1388c:	bl	10ee8 <dcgettext@plt>
   13890:	cmp	r4, r0
   13894:	popne	{r4, r5, r6, pc}
   13898:	bl	16ec8 <__assert_fail@plt+0x5ddc>
   1389c:	ldrb	r3, [r0]
   138a0:	bic	r3, r3, #32
   138a4:	cmp	r3, #85	; 0x55
   138a8:	beq	13924 <__assert_fail@plt+0x2838>
   138ac:	cmp	r3, #71	; 0x47
   138b0:	bne	13980 <__assert_fail@plt+0x2894>
   138b4:	ldrb	r3, [r0, #1]
   138b8:	bic	r3, r3, #32
   138bc:	cmp	r3, #66	; 0x42
   138c0:	bne	13980 <__assert_fail@plt+0x2894>
   138c4:	ldrb	r3, [r0, #2]
   138c8:	cmp	r3, #49	; 0x31
   138cc:	bne	13980 <__assert_fail@plt+0x2894>
   138d0:	ldrb	r3, [r0, #3]
   138d4:	cmp	r3, #56	; 0x38
   138d8:	bne	13980 <__assert_fail@plt+0x2894>
   138dc:	ldrb	r3, [r0, #4]
   138e0:	cmp	r3, #48	; 0x30
   138e4:	bne	13980 <__assert_fail@plt+0x2894>
   138e8:	ldrb	r3, [r0, #5]
   138ec:	cmp	r3, #51	; 0x33
   138f0:	bne	13980 <__assert_fail@plt+0x2894>
   138f4:	ldrb	r3, [r0, #6]
   138f8:	cmp	r3, #48	; 0x30
   138fc:	bne	13980 <__assert_fail@plt+0x2894>
   13900:	ldrb	r3, [r0, #7]
   13904:	cmp	r3, #0
   13908:	bne	13980 <__assert_fail@plt+0x2894>
   1390c:	ldrb	r2, [r4]
   13910:	ldr	r3, [pc, #124]	; 13994 <__assert_fail@plt+0x28a8>
   13914:	ldr	r0, [pc, #124]	; 13998 <__assert_fail@plt+0x28ac>
   13918:	cmp	r2, #96	; 0x60
   1391c:	movne	r0, r3
   13920:	pop	{r4, r5, r6, pc}
   13924:	ldrb	r3, [r0, #1]
   13928:	bic	r3, r3, #32
   1392c:	cmp	r3, #84	; 0x54
   13930:	bne	13980 <__assert_fail@plt+0x2894>
   13934:	ldrb	r3, [r0, #2]
   13938:	bic	r3, r3, #32
   1393c:	cmp	r3, #70	; 0x46
   13940:	bne	13980 <__assert_fail@plt+0x2894>
   13944:	ldrb	r3, [r0, #3]
   13948:	cmp	r3, #45	; 0x2d
   1394c:	bne	13980 <__assert_fail@plt+0x2894>
   13950:	ldrb	r3, [r0, #4]
   13954:	cmp	r3, #56	; 0x38
   13958:	bne	13980 <__assert_fail@plt+0x2894>
   1395c:	ldrb	r3, [r0, #5]
   13960:	cmp	r3, #0
   13964:	bne	13980 <__assert_fail@plt+0x2894>
   13968:	ldrb	r2, [r4]
   1396c:	ldr	r3, [pc, #40]	; 1399c <__assert_fail@plt+0x28b0>
   13970:	ldr	r0, [pc, #40]	; 139a0 <__assert_fail@plt+0x28b4>
   13974:	cmp	r2, #96	; 0x60
   13978:	movne	r0, r3
   1397c:	pop	{r4, r5, r6, pc}
   13980:	ldr	r3, [pc, #28]	; 139a4 <__assert_fail@plt+0x28b8>
   13984:	ldr	r0, [pc, #28]	; 139a8 <__assert_fail@plt+0x28bc>
   13988:	cmp	r5, #9
   1398c:	movne	r0, r3
   13990:	pop	{r4, r5, r6, pc}
   13994:	andeq	r8, r1, ip, lsr #11
   13998:			; <UNDEFINED> instruction: 0x000185b8
   1399c:	andeq	r8, r1, r8, lsr #11
   139a0:			; <UNDEFINED> instruction: 0x000185bc
   139a4:			; <UNDEFINED> instruction: 0x000185b0
   139a8:			; <UNDEFINED> instruction: 0x000185b4
   139ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139b0:	sub	sp, sp, #116	; 0x74
   139b4:	str	r0, [sp, #36]	; 0x24
   139b8:	mov	sl, r1
   139bc:	str	r2, [sp, #52]	; 0x34
   139c0:	str	r3, [sp, #28]
   139c4:	ldr	r8, [sp, #152]	; 0x98
   139c8:	bl	10f30 <__ctype_get_mb_cur_max@plt>
   139cc:	str	r0, [sp, #84]	; 0x54
   139d0:	ldr	r3, [sp, #156]	; 0x9c
   139d4:	lsr	r3, r3, #1
   139d8:	and	r3, r3, #1
   139dc:	str	r3, [sp, #32]
   139e0:	mov	r3, #1
   139e4:	str	r3, [sp, #40]	; 0x28
   139e8:	mov	r3, #0
   139ec:	str	r3, [sp, #80]	; 0x50
   139f0:	str	r3, [sp, #44]	; 0x2c
   139f4:	str	r3, [sp, #48]	; 0x30
   139f8:	str	r3, [sp, #60]	; 0x3c
   139fc:	str	r3, [sp, #72]	; 0x48
   13a00:	str	r3, [sp, #76]	; 0x4c
   13a04:	mov	r7, sl
   13a08:	mov	sl, r8
   13a0c:	cmp	sl, #10
   13a10:	ldrls	pc, [pc, sl, lsl #2]
   13a14:	b	13bcc <__assert_fail@plt+0x2ae0>
   13a18:	andeq	r3, r1, ip, ror sl
   13a1c:	andeq	r3, r1, ip, asr #20
   13a20:	andeq	r3, r1, r8, lsr #23
   13a24:	andeq	r3, r1, r4, asr #20
   13a28:	andeq	r3, r1, ip, asr fp
   13a2c:	andeq	r3, r1, ip, lsl #21
   13a30:	strdeq	r4, [r1], -r8
   13a34:	ldrdeq	r3, [r1], -r0
   13a38:	andeq	r3, r1, r8, asr #21
   13a3c:	andeq	r3, r1, r8, asr #21
   13a40:	andeq	r3, r1, r8, asr #21
   13a44:	mov	r3, #1
   13a48:	str	r3, [sp, #48]	; 0x30
   13a4c:	mov	r3, #1
   13a50:	str	r3, [sp, #32]
   13a54:	str	r3, [sp, #60]	; 0x3c
   13a58:	ldr	r3, [pc, #4068]	; 14a44 <__assert_fail@plt+0x3958>
   13a5c:	str	r3, [sp, #72]	; 0x48
   13a60:	mov	fp, #0
   13a64:	mov	sl, #2
   13a68:	mov	r6, #0
   13a6c:	ldr	r3, [sp, #48]	; 0x30
   13a70:	eor	r3, r3, #1
   13a74:	str	r3, [sp, #68]	; 0x44
   13a78:	b	14360 <__assert_fail@plt+0x3274>
   13a7c:	mov	r3, #0
   13a80:	str	r3, [sp, #32]
   13a84:	mov	fp, r3
   13a88:	b	13a68 <__assert_fail@plt+0x297c>
   13a8c:	ldr	r3, [sp, #32]
   13a90:	cmp	r3, #0
   13a94:	bne	13be8 <__assert_fail@plt+0x2afc>
   13a98:	cmp	r7, #0
   13a9c:	beq	13c08 <__assert_fail@plt+0x2b1c>
   13aa0:	ldr	r3, [sp, #36]	; 0x24
   13aa4:	mov	r2, #34	; 0x22
   13aa8:	strb	r2, [r3]
   13aac:	mov	r3, #1
   13ab0:	str	r3, [sp, #48]	; 0x30
   13ab4:	str	r3, [sp, #60]	; 0x3c
   13ab8:	ldr	r3, [pc, #3980]	; 14a4c <__assert_fail@plt+0x3960>
   13abc:	str	r3, [sp, #72]	; 0x48
   13ac0:	mov	fp, #1
   13ac4:	b	13a68 <__assert_fail@plt+0x297c>
   13ac8:	cmp	sl, #10
   13acc:	beq	13af0 <__assert_fail@plt+0x2a04>
   13ad0:	mov	r1, sl
   13ad4:	ldr	r0, [pc, #3948]	; 14a48 <__assert_fail@plt+0x395c>
   13ad8:	bl	13874 <__assert_fail@plt+0x2788>
   13adc:	str	r0, [sp, #164]	; 0xa4
   13ae0:	mov	r1, sl
   13ae4:	ldr	r0, [pc, #3928]	; 14a44 <__assert_fail@plt+0x3958>
   13ae8:	bl	13874 <__assert_fail@plt+0x2788>
   13aec:	str	r0, [sp, #168]	; 0xa8
   13af0:	ldr	r3, [sp, #32]
   13af4:	cmp	r3, #0
   13af8:	movne	fp, #0
   13afc:	bne	13b34 <__assert_fail@plt+0x2a48>
   13b00:	ldr	r3, [sp, #164]	; 0xa4
   13b04:	ldrb	r3, [r3]
   13b08:	cmp	r3, #0
   13b0c:	beq	13b54 <__assert_fail@plt+0x2a68>
   13b10:	ldr	r2, [sp, #164]	; 0xa4
   13b14:	mov	fp, #0
   13b18:	ldr	r1, [sp, #36]	; 0x24
   13b1c:	cmp	r7, fp
   13b20:	strbhi	r3, [r1, fp]
   13b24:	add	fp, fp, #1
   13b28:	ldrb	r3, [r2, #1]!
   13b2c:	cmp	r3, #0
   13b30:	bne	13b1c <__assert_fail@plt+0x2a30>
   13b34:	ldr	r0, [sp, #168]	; 0xa8
   13b38:	bl	10fd8 <strlen@plt>
   13b3c:	str	r0, [sp, #60]	; 0x3c
   13b40:	ldr	r3, [sp, #168]	; 0xa8
   13b44:	str	r3, [sp, #72]	; 0x48
   13b48:	mov	r3, #1
   13b4c:	str	r3, [sp, #48]	; 0x30
   13b50:	b	13a68 <__assert_fail@plt+0x297c>
   13b54:	mov	fp, #0
   13b58:	b	13b34 <__assert_fail@plt+0x2a48>
   13b5c:	ldr	r3, [sp, #32]
   13b60:	cmp	r3, #0
   13b64:	bne	13c24 <__assert_fail@plt+0x2b38>
   13b68:	mov	r3, #1
   13b6c:	str	r3, [sp, #48]	; 0x30
   13b70:	cmp	r7, #0
   13b74:	beq	13c40 <__assert_fail@plt+0x2b54>
   13b78:	ldr	r3, [sp, #36]	; 0x24
   13b7c:	mov	r2, #39	; 0x27
   13b80:	strb	r2, [r3]
   13b84:	mov	r3, #0
   13b88:	str	r3, [sp, #32]
   13b8c:	mov	r3, #1
   13b90:	str	r3, [sp, #60]	; 0x3c
   13b94:	ldr	r3, [pc, #3752]	; 14a44 <__assert_fail@plt+0x3958>
   13b98:	str	r3, [sp, #72]	; 0x48
   13b9c:	mov	fp, #1
   13ba0:	mov	sl, #2
   13ba4:	b	13a68 <__assert_fail@plt+0x297c>
   13ba8:	ldr	r3, [sp, #32]
   13bac:	cmp	r3, #0
   13bb0:	beq	13b70 <__assert_fail@plt+0x2a84>
   13bb4:	mov	r3, #1
   13bb8:	str	r3, [sp, #60]	; 0x3c
   13bbc:	ldr	r3, [pc, #3712]	; 14a44 <__assert_fail@plt+0x3958>
   13bc0:	str	r3, [sp, #72]	; 0x48
   13bc4:	mov	fp, #0
   13bc8:	b	13a68 <__assert_fail@plt+0x297c>
   13bcc:	bl	110d4 <abort@plt>
   13bd0:	mov	r3, #0
   13bd4:	str	r3, [sp, #32]
   13bd8:	mov	r3, #1
   13bdc:	str	r3, [sp, #48]	; 0x30
   13be0:	mov	fp, #0
   13be4:	b	13a68 <__assert_fail@plt+0x297c>
   13be8:	ldr	r3, [sp, #32]
   13bec:	str	r3, [sp, #48]	; 0x30
   13bf0:	mov	r3, #1
   13bf4:	str	r3, [sp, #60]	; 0x3c
   13bf8:	ldr	r3, [pc, #3660]	; 14a4c <__assert_fail@plt+0x3960>
   13bfc:	str	r3, [sp, #72]	; 0x48
   13c00:	mov	fp, #0
   13c04:	b	13a68 <__assert_fail@plt+0x297c>
   13c08:	mov	r3, #1
   13c0c:	str	r3, [sp, #48]	; 0x30
   13c10:	str	r3, [sp, #60]	; 0x3c
   13c14:	ldr	r3, [pc, #3632]	; 14a4c <__assert_fail@plt+0x3960>
   13c18:	str	r3, [sp, #72]	; 0x48
   13c1c:	mov	fp, #1
   13c20:	b	13a68 <__assert_fail@plt+0x297c>
   13c24:	mov	r3, #1
   13c28:	str	r3, [sp, #60]	; 0x3c
   13c2c:	ldr	r3, [pc, #3600]	; 14a44 <__assert_fail@plt+0x3958>
   13c30:	str	r3, [sp, #72]	; 0x48
   13c34:	mov	fp, #0
   13c38:	mov	sl, #2
   13c3c:	b	13a68 <__assert_fail@plt+0x297c>
   13c40:	mov	r3, #0
   13c44:	str	r3, [sp, #32]
   13c48:	mov	r3, #1
   13c4c:	str	r3, [sp, #60]	; 0x3c
   13c50:	ldr	r3, [pc, #3564]	; 14a44 <__assert_fail@plt+0x3958>
   13c54:	str	r3, [sp, #72]	; 0x48
   13c58:	mov	fp, #1
   13c5c:	mov	sl, #2
   13c60:	b	13a68 <__assert_fail@plt+0x297c>
   13c64:	mov	r3, #0
   13c68:	str	r3, [sp, #56]	; 0x38
   13c6c:	ldr	r3, [sp, #52]	; 0x34
   13c70:	add	r2, r3, r6
   13c74:	str	r2, [sp, #64]	; 0x40
   13c78:	ldrb	r4, [r3, r6]
   13c7c:	cmp	r4, #126	; 0x7e
   13c80:	ldrls	pc, [pc, r4, lsl #2]
   13c84:	b	144c0 <__assert_fail@plt+0x33d4>
   13c88:	andeq	r3, r1, r0, lsr #29
   13c8c:	andeq	r4, r1, r0, asr #9
   13c90:	andeq	r4, r1, r0, asr #9
   13c94:	andeq	r4, r1, r0, asr #9
   13c98:	andeq	r4, r1, r0, asr #9
   13c9c:	andeq	r4, r1, r0, asr #9
   13ca0:	andeq	r4, r1, r0, asr #9
   13ca4:	strdeq	r4, [r1], -ip
   13ca8:	muleq	r1, r8, lr
   13cac:			; <UNDEFINED> instruction: 0x000141b4
   13cb0:	andeq	r4, r1, ip, lsr #3
   13cb4:	andeq	r4, r1, ip, lsl r1
   13cb8:	andeq	r4, r1, r4, lsl r1
   13cbc:	muleq	r1, r0, lr
   13cc0:	andeq	r4, r1, r0, asr #9
   13cc4:	andeq	r4, r1, r0, asr #9
   13cc8:	andeq	r4, r1, r0, asr #9
   13ccc:	andeq	r4, r1, r0, asr #9
   13cd0:	andeq	r4, r1, r0, asr #9
   13cd4:	andeq	r4, r1, r0, asr #9
   13cd8:	andeq	r4, r1, r0, asr #9
   13cdc:	andeq	r4, r1, r0, asr #9
   13ce0:	andeq	r4, r1, r0, asr #9
   13ce4:	andeq	r4, r1, r0, asr #9
   13ce8:	andeq	r4, r1, r0, asr #9
   13cec:	andeq	r4, r1, r0, asr #9
   13cf0:	andeq	r4, r1, r0, asr #9
   13cf4:	andeq	r4, r1, r0, asr #9
   13cf8:	andeq	r4, r1, r0, asr #9
   13cfc:	andeq	r4, r1, r0, asr #9
   13d00:	andeq	r4, r1, r0, asr #9
   13d04:	andeq	r4, r1, r0, asr #9
   13d08:	andeq	r4, r1, r0, asr r2
   13d0c:	andeq	r4, r1, ip, asr #4
   13d10:	andeq	r4, r1, ip, asr #4
   13d14:	andeq	r4, r1, r4, lsr #4
   13d18:	andeq	r4, r1, ip, asr #4
   13d1c:	muleq	r1, r4, r8
   13d20:	andeq	r4, r1, ip, asr #4
   13d24:	andeq	r4, r1, r4, lsr #8
   13d28:	andeq	r4, r1, ip, asr #4
   13d2c:	andeq	r4, r1, ip, asr #4
   13d30:	andeq	r4, r1, ip, asr #4
   13d34:	muleq	r1, r4, r8
   13d38:	muleq	r1, r4, r8
   13d3c:	muleq	r1, r4, r8
   13d40:	muleq	r1, r4, r8
   13d44:	muleq	r1, r4, r8
   13d48:	muleq	r1, r4, r8
   13d4c:	muleq	r1, r4, r8
   13d50:	muleq	r1, r4, r8
   13d54:	muleq	r1, r4, r8
   13d58:	muleq	r1, r4, r8
   13d5c:	muleq	r1, r4, r8
   13d60:	muleq	r1, r4, r8
   13d64:	muleq	r1, r4, r8
   13d68:	muleq	r1, r4, r8
   13d6c:	muleq	r1, r4, r8
   13d70:	muleq	r1, r4, r8
   13d74:	andeq	r4, r1, ip, asr #4
   13d78:	andeq	r4, r1, ip, asr #4
   13d7c:	andeq	r4, r1, ip, asr #4
   13d80:	andeq	r4, r1, ip, asr #4
   13d84:	andeq	r3, r1, r8, lsr #31
   13d88:	andeq	r4, r1, r0, asr #9
   13d8c:	muleq	r1, r4, r8
   13d90:	muleq	r1, r4, r8
   13d94:	muleq	r1, r4, r8
   13d98:	muleq	r1, r4, r8
   13d9c:	muleq	r1, r4, r8
   13da0:	muleq	r1, r4, r8
   13da4:	muleq	r1, r4, r8
   13da8:	muleq	r1, r4, r8
   13dac:	muleq	r1, r4, r8
   13db0:	muleq	r1, r4, r8
   13db4:	muleq	r1, r4, r8
   13db8:	muleq	r1, r4, r8
   13dbc:	muleq	r1, r4, r8
   13dc0:	muleq	r1, r4, r8
   13dc4:	muleq	r1, r4, r8
   13dc8:	muleq	r1, r4, r8
   13dcc:	muleq	r1, r4, r8
   13dd0:	muleq	r1, r4, r8
   13dd4:	muleq	r1, r4, r8
   13dd8:	muleq	r1, r4, r8
   13ddc:	muleq	r1, r4, r8
   13de0:	muleq	r1, r4, r8
   13de4:	muleq	r1, r4, r8
   13de8:	muleq	r1, r4, r8
   13dec:	muleq	r1, r4, r8
   13df0:	muleq	r1, r4, r8
   13df4:	andeq	r4, r1, ip, asr #4
   13df8:	andeq	r4, r1, r4, lsr #2
   13dfc:	muleq	r1, r4, r8
   13e00:	andeq	r4, r1, ip, asr #4
   13e04:	muleq	r1, r4, r8
   13e08:	andeq	r4, r1, ip, asr #4
   13e0c:	muleq	r1, r4, r8
   13e10:	muleq	r1, r4, r8
   13e14:	muleq	r1, r4, r8
   13e18:	muleq	r1, r4, r8
   13e1c:	muleq	r1, r4, r8
   13e20:	muleq	r1, r4, r8
   13e24:	muleq	r1, r4, r8
   13e28:	muleq	r1, r4, r8
   13e2c:	muleq	r1, r4, r8
   13e30:	muleq	r1, r4, r8
   13e34:	muleq	r1, r4, r8
   13e38:	muleq	r1, r4, r8
   13e3c:	muleq	r1, r4, r8
   13e40:	muleq	r1, r4, r8
   13e44:	muleq	r1, r4, r8
   13e48:	muleq	r1, r4, r8
   13e4c:	muleq	r1, r4, r8
   13e50:	muleq	r1, r4, r8
   13e54:	muleq	r1, r4, r8
   13e58:	muleq	r1, r4, r8
   13e5c:	muleq	r1, r4, r8
   13e60:	muleq	r1, r4, r8
   13e64:	muleq	r1, r4, r8
   13e68:	muleq	r1, r4, r8
   13e6c:	muleq	r1, r4, r8
   13e70:	muleq	r1, r4, r8
   13e74:	andeq	r4, r1, r4, lsl #4
   13e78:	andeq	r4, r1, ip, asr #4
   13e7c:	andeq	r4, r1, r4, lsl #4
   13e80:	andeq	r4, r1, r4, lsr #4
   13e84:	mov	r3, #0
   13e88:	str	r3, [sp, #56]	; 0x38
   13e8c:	b	13c6c <__assert_fail@plt+0x2b80>
   13e90:	mov	r3, #114	; 0x72
   13e94:	b	141b8 <__assert_fail@plt+0x30cc>
   13e98:	mov	r3, #98	; 0x62
   13e9c:	b	141d0 <__assert_fail@plt+0x30e4>
   13ea0:	ldr	r3, [sp, #48]	; 0x30
   13ea4:	cmp	r3, #0
   13ea8:	beq	13f90 <__assert_fail@plt+0x2ea4>
   13eac:	ldr	r3, [sp, #32]
   13eb0:	cmp	r3, #0
   13eb4:	bne	14a18 <__assert_fail@plt+0x392c>
   13eb8:	ldr	r3, [sp, #44]	; 0x2c
   13ebc:	eor	r3, r3, #1
   13ec0:	cmp	sl, #2
   13ec4:	movne	r3, #0
   13ec8:	andeq	r3, r3, #1
   13ecc:	cmp	r3, #0
   13ed0:	moveq	r2, fp
   13ed4:	beq	13f18 <__assert_fail@plt+0x2e2c>
   13ed8:	cmp	r7, fp
   13edc:	ldrhi	r2, [sp, #36]	; 0x24
   13ee0:	movhi	r1, #39	; 0x27
   13ee4:	strbhi	r1, [r2, fp]
   13ee8:	add	r2, fp, #1
   13eec:	cmp	r7, r2
   13ef0:	ldrhi	r1, [sp, #36]	; 0x24
   13ef4:	movhi	r0, #36	; 0x24
   13ef8:	strbhi	r0, [r1, r2]
   13efc:	add	r2, fp, #2
   13f00:	cmp	r7, r2
   13f04:	ldrhi	r1, [sp, #36]	; 0x24
   13f08:	movhi	r0, #39	; 0x27
   13f0c:	strbhi	r0, [r1, r2]
   13f10:	add	r2, fp, #3
   13f14:	str	r3, [sp, #44]	; 0x2c
   13f18:	cmp	r7, r2
   13f1c:	ldrhi	r3, [sp, #36]	; 0x24
   13f20:	movhi	r1, #92	; 0x5c
   13f24:	strbhi	r1, [r3, r2]
   13f28:	add	fp, r2, #1
   13f2c:	cmp	r5, #0
   13f30:	beq	1489c <__assert_fail@plt+0x37b0>
   13f34:	add	r3, r6, #1
   13f38:	ldr	r1, [sp, #28]
   13f3c:	cmp	r1, r3
   13f40:	bls	148ac <__assert_fail@plt+0x37c0>
   13f44:	ldr	r1, [sp, #52]	; 0x34
   13f48:	ldrb	r3, [r1, r3]
   13f4c:	sub	r3, r3, #48	; 0x30
   13f50:	uxtb	r3, r3
   13f54:	cmp	r3, #9
   13f58:	bhi	148b8 <__assert_fail@plt+0x37cc>
   13f5c:	cmp	r7, fp
   13f60:	movhi	r3, #48	; 0x30
   13f64:	ldrhi	r1, [sp, #36]	; 0x24
   13f68:	strbhi	r3, [r1, fp]
   13f6c:	add	r3, r2, #2
   13f70:	cmp	r7, r3
   13f74:	movhi	r1, #48	; 0x30
   13f78:	ldrhi	r0, [sp, #36]	; 0x24
   13f7c:	strbhi	r1, [r0, r3]
   13f80:	add	fp, r2, #3
   13f84:	ldr	r8, [sp, #32]
   13f88:	mov	r4, #48	; 0x30
   13f8c:	b	14268 <__assert_fail@plt+0x317c>
   13f90:	ldr	r3, [sp, #156]	; 0x9c
   13f94:	tst	r3, #1
   13f98:	bne	1435c <__assert_fail@plt+0x3270>
   13f9c:	ldr	r5, [sp, #48]	; 0x30
   13fa0:	mov	r8, r5
   13fa4:	b	14268 <__assert_fail@plt+0x317c>
   13fa8:	cmp	sl, #2
   13fac:	beq	13fc4 <__assert_fail@plt+0x2ed8>
   13fb0:	cmp	sl, #5
   13fb4:	beq	13fdc <__assert_fail@plt+0x2ef0>
   13fb8:	mov	r8, #0
   13fbc:	mov	r5, r8
   13fc0:	b	14268 <__assert_fail@plt+0x317c>
   13fc4:	ldr	r3, [sp, #32]
   13fc8:	cmp	r3, #0
   13fcc:	bne	14a2c <__assert_fail@plt+0x3940>
   13fd0:	mov	r8, r3
   13fd4:	mov	r5, r3
   13fd8:	b	14268 <__assert_fail@plt+0x317c>
   13fdc:	ldr	r3, [sp, #156]	; 0x9c
   13fe0:	tst	r3, #4
   13fe4:	beq	148c4 <__assert_fail@plt+0x37d8>
   13fe8:	add	r3, r6, #2
   13fec:	ldr	r2, [sp, #28]
   13ff0:	cmp	r2, r3
   13ff4:	bls	148d0 <__assert_fail@plt+0x37e4>
   13ff8:	ldr	r2, [sp, #52]	; 0x34
   13ffc:	add	r2, r2, r6
   14000:	ldrb	r2, [r2, #1]
   14004:	cmp	r2, #63	; 0x3f
   14008:	movne	r8, #0
   1400c:	movne	r5, r8
   14010:	bne	14268 <__assert_fail@plt+0x317c>
   14014:	ldr	r2, [sp, #52]	; 0x34
   14018:	ldrb	r2, [r2, r3]
   1401c:	sub	r1, r2, #33	; 0x21
   14020:	cmp	r1, #29
   14024:	ldrls	pc, [pc, r1, lsl #2]
   14028:	b	148dc <__assert_fail@plt+0x37f0>
   1402c:	andeq	r4, r1, r4, lsr #1
   14030:	ldrdeq	r4, [r1], -ip
   14034:	ldrdeq	r4, [r1], -ip
   14038:	ldrdeq	r4, [r1], -ip
   1403c:	ldrdeq	r4, [r1], -ip
   14040:	ldrdeq	r4, [r1], -ip
   14044:	andeq	r4, r1, r4, lsr #1
   14048:	andeq	r4, r1, r4, lsr #1
   1404c:	andeq	r4, r1, r4, lsr #1
   14050:	ldrdeq	r4, [r1], -ip
   14054:	ldrdeq	r4, [r1], -ip
   14058:	ldrdeq	r4, [r1], -ip
   1405c:	andeq	r4, r1, r4, lsr #1
   14060:	ldrdeq	r4, [r1], -ip
   14064:	andeq	r4, r1, r4, lsr #1
   14068:	ldrdeq	r4, [r1], -ip
   1406c:	ldrdeq	r4, [r1], -ip
   14070:	ldrdeq	r4, [r1], -ip
   14074:	ldrdeq	r4, [r1], -ip
   14078:	ldrdeq	r4, [r1], -ip
   1407c:	ldrdeq	r4, [r1], -ip
   14080:	ldrdeq	r4, [r1], -ip
   14084:	ldrdeq	r4, [r1], -ip
   14088:	ldrdeq	r4, [r1], -ip
   1408c:	ldrdeq	r4, [r1], -ip
   14090:	ldrdeq	r4, [r1], -ip
   14094:	ldrdeq	r4, [r1], -ip
   14098:	andeq	r4, r1, r4, lsr #1
   1409c:	andeq	r4, r1, r4, lsr #1
   140a0:	andeq	r4, r1, r4, lsr #1
   140a4:	ldr	r1, [sp, #32]
   140a8:	cmp	r1, #0
   140ac:	bne	14aec <__assert_fail@plt+0x3a00>
   140b0:	cmp	r7, fp
   140b4:	movhi	r1, #63	; 0x3f
   140b8:	ldrhi	r0, [sp, #36]	; 0x24
   140bc:	strbhi	r1, [r0, fp]
   140c0:	add	r1, fp, #1
   140c4:	cmp	r7, r1
   140c8:	ldrhi	r0, [sp, #36]	; 0x24
   140cc:	movhi	ip, #34	; 0x22
   140d0:	strbhi	ip, [r0, r1]
   140d4:	add	r1, fp, #2
   140d8:	cmp	r7, r1
   140dc:	ldrhi	r0, [sp, #36]	; 0x24
   140e0:	movhi	ip, #34	; 0x22
   140e4:	strbhi	ip, [r0, r1]
   140e8:	add	r1, fp, #3
   140ec:	cmp	r7, r1
   140f0:	movhi	r0, #63	; 0x3f
   140f4:	ldrhi	ip, [sp, #36]	; 0x24
   140f8:	strbhi	r0, [ip, r1]
   140fc:	add	fp, fp, #4
   14100:	ldr	r5, [sp, #32]
   14104:	mov	r8, r5
   14108:	mov	r4, r2
   1410c:	mov	r6, r3
   14110:	b	14268 <__assert_fail@plt+0x317c>
   14114:	mov	r3, #102	; 0x66
   14118:	b	141d0 <__assert_fail@plt+0x30e4>
   1411c:	mov	r3, #118	; 0x76
   14120:	b	141d0 <__assert_fail@plt+0x30e4>
   14124:	cmp	sl, #2
   14128:	beq	14194 <__assert_fail@plt+0x30a8>
   1412c:	ldr	r3, [sp, #48]	; 0x30
   14130:	ldr	r2, [sp, #32]
   14134:	and	r3, r3, r2
   14138:	tst	r9, r3
   1413c:	moveq	r3, r4
   14140:	beq	141d0 <__assert_fail@plt+0x30e4>
   14144:	mov	r8, #0
   14148:	mov	r5, r8
   1414c:	eor	r5, r5, #1
   14150:	ldr	r3, [sp, #44]	; 0x2c
   14154:	and	r5, r5, r3
   14158:	tst	r5, #255	; 0xff
   1415c:	beq	1433c <__assert_fail@plt+0x3250>
   14160:	cmp	r7, fp
   14164:	ldrhi	r3, [sp, #36]	; 0x24
   14168:	movhi	r2, #39	; 0x27
   1416c:	strbhi	r2, [r3, fp]
   14170:	add	r3, fp, #1
   14174:	cmp	r7, r3
   14178:	ldrhi	r2, [sp, #36]	; 0x24
   1417c:	movhi	r1, #39	; 0x27
   14180:	strbhi	r1, [r2, r3]
   14184:	add	fp, fp, #2
   14188:	mov	r3, #0
   1418c:	str	r3, [sp, #44]	; 0x2c
   14190:	b	1433c <__assert_fail@plt+0x3250>
   14194:	ldr	r3, [sp, #32]
   14198:	cmp	r3, #0
   1419c:	bne	14a38 <__assert_fail@plt+0x394c>
   141a0:	mov	r8, r3
   141a4:	mov	r5, r3
   141a8:	b	1414c <__assert_fail@plt+0x3060>
   141ac:	mov	r3, #110	; 0x6e
   141b0:	b	141b8 <__assert_fail@plt+0x30cc>
   141b4:	mov	r3, #116	; 0x74
   141b8:	ldr	r2, [sp, #32]
   141bc:	cmp	sl, #2
   141c0:	movne	r2, #0
   141c4:	andeq	r2, r2, #1
   141c8:	cmp	r2, #0
   141cc:	bne	141f0 <__assert_fail@plt+0x3104>
   141d0:	ldr	r2, [sp, #48]	; 0x30
   141d4:	cmp	r2, #0
   141d8:	moveq	r8, r2
   141dc:	moveq	r5, r2
   141e0:	beq	14268 <__assert_fail@plt+0x317c>
   141e4:	mov	r4, r3
   141e8:	mov	r8, #0
   141ec:	b	142c0 <__assert_fail@plt+0x31d4>
   141f0:	mov	r8, sl
   141f4:	mov	sl, r7
   141f8:	b	14a64 <__assert_fail@plt+0x3978>
   141fc:	mov	r3, #97	; 0x61
   14200:	b	141d0 <__assert_fail@plt+0x30e4>
   14204:	ldr	r3, [sp, #28]
   14208:	cmn	r3, #1
   1420c:	beq	14238 <__assert_fail@plt+0x314c>
   14210:	ldr	r3, [sp, #28]
   14214:	subs	r3, r3, #1
   14218:	movne	r3, #1
   1421c:	cmp	r3, #0
   14220:	bne	148e8 <__assert_fail@plt+0x37fc>
   14224:	cmp	r6, #0
   14228:	beq	14250 <__assert_fail@plt+0x3164>
   1422c:	mov	r8, #0
   14230:	mov	r5, r8
   14234:	b	14268 <__assert_fail@plt+0x317c>
   14238:	ldr	r3, [sp, #52]	; 0x34
   1423c:	ldrb	r3, [r3, #1]
   14240:	adds	r3, r3, #0
   14244:	movne	r3, #1
   14248:	b	1421c <__assert_fail@plt+0x3130>
   1424c:	mov	r8, #0
   14250:	ldr	r5, [sp, #32]
   14254:	cmp	sl, #2
   14258:	movne	r5, #0
   1425c:	andeq	r5, r5, #1
   14260:	cmp	r5, #0
   14264:	bne	14418 <__assert_fail@plt+0x332c>
   14268:	ldr	r3, [sp, #68]	; 0x44
   1426c:	cmp	sl, #2
   14270:	orreq	r3, r3, #1
   14274:	eor	r3, r3, #1
   14278:	ldr	r2, [sp, #32]
   1427c:	orr	r3, r2, r3
   14280:	tst	r3, #255	; 0xff
   14284:	beq	142b4 <__assert_fail@plt+0x31c8>
   14288:	ldr	r3, [sp, #160]	; 0xa0
   1428c:	cmp	r3, #0
   14290:	beq	142b4 <__assert_fail@plt+0x31c8>
   14294:	lsr	r2, r4, #5
   14298:	uxtb	r2, r2
   1429c:	and	r3, r4, #31
   142a0:	ldr	r1, [sp, #160]	; 0xa0
   142a4:	ldr	r2, [r1, r2, lsl #2]
   142a8:	lsr	r3, r2, r3
   142ac:	tst	r3, #1
   142b0:	bne	142c0 <__assert_fail@plt+0x31d4>
   142b4:	ldr	r3, [sp, #56]	; 0x38
   142b8:	cmp	r3, #0
   142bc:	beq	1414c <__assert_fail@plt+0x3060>
   142c0:	ldr	r3, [sp, #32]
   142c4:	cmp	r3, #0
   142c8:	bne	14ad4 <__assert_fail@plt+0x39e8>
   142cc:	ldr	r3, [sp, #44]	; 0x2c
   142d0:	eor	r3, r3, #1
   142d4:	cmp	sl, #2
   142d8:	movne	r3, #0
   142dc:	andeq	r3, r3, #1
   142e0:	cmp	r3, #0
   142e4:	beq	14328 <__assert_fail@plt+0x323c>
   142e8:	cmp	r7, fp
   142ec:	ldrhi	r2, [sp, #36]	; 0x24
   142f0:	movhi	r1, #39	; 0x27
   142f4:	strbhi	r1, [r2, fp]
   142f8:	add	r2, fp, #1
   142fc:	cmp	r7, r2
   14300:	ldrhi	r1, [sp, #36]	; 0x24
   14304:	movhi	r0, #36	; 0x24
   14308:	strbhi	r0, [r1, r2]
   1430c:	add	r2, fp, #2
   14310:	cmp	r7, r2
   14314:	ldrhi	r1, [sp, #36]	; 0x24
   14318:	movhi	r0, #39	; 0x27
   1431c:	strbhi	r0, [r1, r2]
   14320:	add	fp, fp, #3
   14324:	str	r3, [sp, #44]	; 0x2c
   14328:	cmp	r7, fp
   1432c:	ldrhi	r3, [sp, #36]	; 0x24
   14330:	movhi	r2, #92	; 0x5c
   14334:	strbhi	r2, [r3, fp]
   14338:	add	fp, fp, #1
   1433c:	cmp	fp, r7
   14340:	ldrcc	r3, [sp, #36]	; 0x24
   14344:	strbcc	r4, [r3, fp]
   14348:	add	fp, fp, #1
   1434c:	ldr	r3, [sp, #40]	; 0x28
   14350:	cmp	r8, #0
   14354:	moveq	r3, #0
   14358:	str	r3, [sp, #40]	; 0x28
   1435c:	add	r6, r6, #1
   14360:	ldr	r3, [sp, #28]
   14364:	cmn	r3, #1
   14368:	beq	148f4 <__assert_fail@plt+0x3808>
   1436c:	ldr	r3, [sp, #28]
   14370:	subs	r8, r3, r6
   14374:	movne	r8, #1
   14378:	cmp	r8, #0
   1437c:	beq	14908 <__assert_fail@plt+0x381c>
   14380:	ldr	r5, [sp, #48]	; 0x30
   14384:	cmp	sl, #2
   14388:	moveq	r5, #0
   1438c:	andne	r5, r5, #1
   14390:	ldr	r3, [sp, #60]	; 0x3c
   14394:	adds	r9, r3, #0
   14398:	movne	r9, #1
   1439c:	ands	r2, r5, r9
   143a0:	str	r2, [sp, #56]	; 0x38
   143a4:	beq	13c6c <__assert_fail@plt+0x2b80>
   143a8:	add	r4, r6, r3
   143ac:	ldr	r2, [sp, #28]
   143b0:	cmp	r3, #1
   143b4:	movls	r3, #0
   143b8:	movhi	r3, #1
   143bc:	cmn	r2, #1
   143c0:	movne	r3, #0
   143c4:	cmp	r3, #0
   143c8:	beq	143d8 <__assert_fail@plt+0x32ec>
   143cc:	ldr	r0, [sp, #52]	; 0x34
   143d0:	bl	10fd8 <strlen@plt>
   143d4:	str	r0, [sp, #28]
   143d8:	ldr	r3, [sp, #28]
   143dc:	cmp	r3, r4
   143e0:	bcc	13c64 <__assert_fail@plt+0x2b78>
   143e4:	ldr	r2, [sp, #60]	; 0x3c
   143e8:	ldr	r1, [sp, #72]	; 0x48
   143ec:	ldr	r3, [sp, #52]	; 0x34
   143f0:	add	r0, r3, r6
   143f4:	bl	10ed0 <memcmp@plt>
   143f8:	cmp	r0, #0
   143fc:	bne	13e84 <__assert_fail@plt+0x2d98>
   14400:	ldr	r3, [sp, #32]
   14404:	cmp	r3, #0
   14408:	beq	13c6c <__assert_fail@plt+0x2b80>
   1440c:	mov	r8, sl
   14410:	mov	sl, r7
   14414:	b	14a64 <__assert_fail@plt+0x3978>
   14418:	mov	r8, sl
   1441c:	mov	sl, r7
   14420:	b	14a64 <__assert_fail@plt+0x3978>
   14424:	cmp	sl, #2
   14428:	strne	r8, [sp, #80]	; 0x50
   1442c:	movne	r5, #0
   14430:	bne	14268 <__assert_fail@plt+0x317c>
   14434:	ldr	r3, [sp, #32]
   14438:	cmp	r3, #0
   1443c:	bne	14a50 <__assert_fail@plt+0x3964>
   14440:	ldr	r2, [sp, #76]	; 0x4c
   14444:	adds	r3, r7, #0
   14448:	movne	r3, #1
   1444c:	cmp	r2, #0
   14450:	movne	r3, #0
   14454:	cmp	r3, #0
   14458:	movne	r3, #0
   1445c:	bne	1448c <__assert_fail@plt+0x33a0>
   14460:	cmp	r7, fp
   14464:	ldrhi	r3, [sp, #36]	; 0x24
   14468:	movhi	r2, #39	; 0x27
   1446c:	strbhi	r2, [r3, fp]
   14470:	add	r3, fp, #1
   14474:	cmp	r7, r3
   14478:	ldrhi	r2, [sp, #36]	; 0x24
   1447c:	movhi	r1, #92	; 0x5c
   14480:	strbhi	r1, [r2, r3]
   14484:	mov	r3, r7
   14488:	ldr	r7, [sp, #76]	; 0x4c
   1448c:	add	r2, fp, #2
   14490:	cmp	r2, r3
   14494:	ldrcc	r1, [sp, #36]	; 0x24
   14498:	movcc	r0, #39	; 0x27
   1449c:	strbcc	r0, [r1, r2]
   144a0:	add	fp, fp, #3
   144a4:	ldr	r2, [sp, #32]
   144a8:	mov	r5, r2
   144ac:	str	r8, [sp, #80]	; 0x50
   144b0:	str	r2, [sp, #44]	; 0x2c
   144b4:	str	r7, [sp, #76]	; 0x4c
   144b8:	mov	r7, r3
   144bc:	b	14268 <__assert_fail@plt+0x317c>
   144c0:	ldr	r5, [sp, #84]	; 0x54
   144c4:	cmp	r5, #1
   144c8:	beq	144f8 <__assert_fail@plt+0x340c>
   144cc:	mov	r3, #0
   144d0:	str	r3, [sp, #104]	; 0x68
   144d4:	str	r3, [sp, #108]	; 0x6c
   144d8:	ldr	r3, [sp, #28]
   144dc:	cmn	r3, #1
   144e0:	beq	1452c <__assert_fail@plt+0x3440>
   144e4:	mov	r3, #0
   144e8:	str	r4, [sp, #88]	; 0x58
   144ec:	str	fp, [sp, #92]	; 0x5c
   144f0:	mov	fp, r3
   144f4:	b	14654 <__assert_fail@plt+0x3568>
   144f8:	bl	10fb4 <__ctype_b_loc@plt>
   144fc:	ldr	r2, [r0]
   14500:	lsl	r3, r4, #1
   14504:	ldrh	r8, [r2, r3]
   14508:	lsr	r8, r8, #14
   1450c:	and	r8, r8, #1
   14510:	mov	r2, r5
   14514:	eor	r5, r8, #1
   14518:	ldr	r3, [sp, #48]	; 0x30
   1451c:	and	r5, r5, r3
   14520:	ands	r5, r5, #255	; 0xff
   14524:	beq	14268 <__assert_fail@plt+0x317c>
   14528:	b	146ec <__assert_fail@plt+0x3600>
   1452c:	ldr	r0, [sp, #52]	; 0x34
   14530:	bl	10fd8 <strlen@plt>
   14534:	str	r0, [sp, #28]
   14538:	b	144e4 <__assert_fail@plt+0x33f8>
   1453c:	mov	r2, fp
   14540:	mov	r1, r4
   14544:	ldr	r4, [sp, #88]	; 0x58
   14548:	ldr	fp, [sp, #92]	; 0x5c
   1454c:	ldr	r0, [sp, #28]
   14550:	cmp	r0, r5
   14554:	bls	14720 <__assert_fail@plt+0x3634>
   14558:	ldrb	r3, [r1]
   1455c:	cmp	r3, #0
   14560:	beq	14728 <__assert_fail@plt+0x363c>
   14564:	mov	r3, r1
   14568:	add	r2, r2, #1
   1456c:	add	r1, r6, r2
   14570:	cmp	r0, r1
   14574:	bls	14730 <__assert_fail@plt+0x3644>
   14578:	ldrb	r1, [r3, #1]!
   1457c:	cmp	r1, #0
   14580:	bne	14568 <__assert_fail@plt+0x347c>
   14584:	mov	r8, #0
   14588:	b	146e4 <__assert_fail@plt+0x35f8>
   1458c:	cmp	r4, r5
   14590:	beq	14630 <__assert_fail@plt+0x3544>
   14594:	ldrb	r3, [r4, #1]!
   14598:	sub	r3, r3, #91	; 0x5b
   1459c:	cmp	r3, #33	; 0x21
   145a0:	ldrls	pc, [pc, r3, lsl #2]
   145a4:	b	1458c <__assert_fail@plt+0x34a0>
   145a8:	andeq	r4, r1, ip, asr sl
   145ac:	andeq	r4, r1, ip, asr sl
   145b0:	andeq	r4, r1, ip, lsl #11
   145b4:	andeq	r4, r1, ip, asr sl
   145b8:	andeq	r4, r1, ip, lsl #11
   145bc:	andeq	r4, r1, ip, asr sl
   145c0:	andeq	r4, r1, ip, lsl #11
   145c4:	andeq	r4, r1, ip, lsl #11
   145c8:	andeq	r4, r1, ip, lsl #11
   145cc:	andeq	r4, r1, ip, lsl #11
   145d0:	andeq	r4, r1, ip, lsl #11
   145d4:	andeq	r4, r1, ip, lsl #11
   145d8:	andeq	r4, r1, ip, lsl #11
   145dc:	andeq	r4, r1, ip, lsl #11
   145e0:	andeq	r4, r1, ip, lsl #11
   145e4:	andeq	r4, r1, ip, lsl #11
   145e8:	andeq	r4, r1, ip, lsl #11
   145ec:	andeq	r4, r1, ip, lsl #11
   145f0:	andeq	r4, r1, ip, lsl #11
   145f4:	andeq	r4, r1, ip, lsl #11
   145f8:	andeq	r4, r1, ip, lsl #11
   145fc:	andeq	r4, r1, ip, lsl #11
   14600:	andeq	r4, r1, ip, lsl #11
   14604:	andeq	r4, r1, ip, lsl #11
   14608:	andeq	r4, r1, ip, lsl #11
   1460c:	andeq	r4, r1, ip, lsl #11
   14610:	andeq	r4, r1, ip, lsl #11
   14614:	andeq	r4, r1, ip, lsl #11
   14618:	andeq	r4, r1, ip, lsl #11
   1461c:	andeq	r4, r1, ip, lsl #11
   14620:	andeq	r4, r1, ip, lsl #11
   14624:	andeq	r4, r1, ip, lsl #11
   14628:	andeq	r4, r1, ip, lsl #11
   1462c:	andeq	r4, r1, ip, asr sl
   14630:	ldr	r0, [sp, #100]	; 0x64
   14634:	bl	10f0c <iswprint@plt>
   14638:	cmp	r0, #0
   1463c:	moveq	r8, #0
   14640:	add	fp, fp, r9
   14644:	add	r0, sp, #104	; 0x68
   14648:	bl	10eb8 <mbsinit@plt>
   1464c:	cmp	r0, #0
   14650:	bne	146c4 <__assert_fail@plt+0x35d8>
   14654:	add	r5, r6, fp
   14658:	ldr	r3, [sp, #52]	; 0x34
   1465c:	add	r4, r3, r5
   14660:	add	r3, sp, #104	; 0x68
   14664:	ldr	r2, [sp, #28]
   14668:	sub	r2, r2, r5
   1466c:	mov	r1, r4
   14670:	add	r0, sp, #100	; 0x64
   14674:	bl	16efc <__assert_fail@plt+0x5e10>
   14678:	subs	r9, r0, #0
   1467c:	beq	14738 <__assert_fail@plt+0x364c>
   14680:	cmn	r9, #1
   14684:	beq	146d4 <__assert_fail@plt+0x35e8>
   14688:	cmn	r9, #2
   1468c:	beq	1453c <__assert_fail@plt+0x3450>
   14690:	ldr	r3, [sp, #32]
   14694:	cmp	sl, #2
   14698:	movne	r3, #0
   1469c:	andeq	r3, r3, #1
   146a0:	cmp	r3, #0
   146a4:	beq	14630 <__assert_fail@plt+0x3544>
   146a8:	cmp	r9, #1
   146ac:	bls	14630 <__assert_fail@plt+0x3544>
   146b0:	sub	r3, r9, #1
   146b4:	add	r5, r3, r5
   146b8:	ldr	r3, [sp, #52]	; 0x34
   146bc:	add	r5, r3, r5
   146c0:	b	14594 <__assert_fail@plt+0x34a8>
   146c4:	ldr	r4, [sp, #88]	; 0x58
   146c8:	mov	r2, fp
   146cc:	ldr	fp, [sp, #92]	; 0x5c
   146d0:	b	146e4 <__assert_fail@plt+0x35f8>
   146d4:	ldr	r4, [sp, #88]	; 0x58
   146d8:	mov	r2, fp
   146dc:	ldr	fp, [sp, #92]	; 0x5c
   146e0:	mov	r8, #0
   146e4:	cmp	r2, #1
   146e8:	bls	14514 <__assert_fail@plt+0x3428>
   146ec:	add	r1, r6, r2
   146f0:	ldr	ip, [sp, #64]	; 0x40
   146f4:	mov	r5, #0
   146f8:	eor	r3, r8, #1
   146fc:	ldr	r2, [sp, #48]	; 0x30
   14700:	and	r3, r3, r2
   14704:	uxtb	r3, r3
   14708:	ldr	r9, [sp, #32]
   1470c:	ldr	lr, [sp, #44]	; 0x2c
   14710:	ldr	r2, [sp, #56]	; 0x38
   14714:	str	r8, [sp, #56]	; 0x38
   14718:	ldr	r0, [sp, #36]	; 0x24
   1471c:	b	147b8 <__assert_fail@plt+0x36cc>
   14720:	mov	r8, #0
   14724:	b	146e4 <__assert_fail@plt+0x35f8>
   14728:	mov	r8, #0
   1472c:	b	146e4 <__assert_fail@plt+0x35f8>
   14730:	mov	r8, #0
   14734:	b	146e4 <__assert_fail@plt+0x35f8>
   14738:	ldr	r4, [sp, #88]	; 0x58
   1473c:	mov	r2, fp
   14740:	ldr	fp, [sp, #92]	; 0x5c
   14744:	b	146e4 <__assert_fail@plt+0x35f8>
   14748:	cmp	r2, #0
   1474c:	beq	14760 <__assert_fail@plt+0x3674>
   14750:	cmp	r7, fp
   14754:	movhi	r2, #92	; 0x5c
   14758:	strbhi	r2, [r0, fp]
   1475c:	add	fp, fp, #1
   14760:	add	r8, r6, #1
   14764:	cmp	r1, r8
   14768:	bls	14870 <__assert_fail@plt+0x3784>
   1476c:	eor	r2, r5, #1
   14770:	and	r2, r2, lr
   14774:	ands	r2, r2, #255	; 0xff
   14778:	beq	1488c <__assert_fail@plt+0x37a0>
   1477c:	cmp	r7, fp
   14780:	movhi	r2, #39	; 0x27
   14784:	strbhi	r2, [r0, fp]
   14788:	add	r2, fp, #1
   1478c:	cmp	r7, r2
   14790:	movhi	lr, #39	; 0x27
   14794:	strbhi	lr, [r0, r2]
   14798:	add	fp, fp, #2
   1479c:	mov	r6, r8
   147a0:	mov	r2, r3
   147a4:	mov	lr, r3
   147a8:	cmp	r7, fp
   147ac:	strbhi	r4, [r0, fp]
   147b0:	add	fp, fp, #1
   147b4:	ldrb	r4, [ip, #1]!
   147b8:	cmp	r3, #0
   147bc:	beq	14748 <__assert_fail@plt+0x365c>
   147c0:	cmp	r9, #0
   147c4:	bne	14ac8 <__assert_fail@plt+0x39dc>
   147c8:	eor	r5, lr, #1
   147cc:	cmp	sl, #2
   147d0:	movne	r5, #0
   147d4:	andeq	r5, r5, #1
   147d8:	cmp	r5, #0
   147dc:	beq	14814 <__assert_fail@plt+0x3728>
   147e0:	cmp	r7, fp
   147e4:	movhi	lr, #39	; 0x27
   147e8:	strbhi	lr, [r0, fp]
   147ec:	add	lr, fp, #1
   147f0:	cmp	r7, lr
   147f4:	movhi	r8, #36	; 0x24
   147f8:	strbhi	r8, [r0, lr]
   147fc:	add	lr, fp, #2
   14800:	cmp	r7, lr
   14804:	movhi	r8, #39	; 0x27
   14808:	strbhi	r8, [r0, lr]
   1480c:	add	fp, fp, #3
   14810:	mov	lr, r5
   14814:	cmp	r7, fp
   14818:	movhi	r5, #92	; 0x5c
   1481c:	strbhi	r5, [r0, fp]
   14820:	add	r5, fp, #1
   14824:	cmp	r7, r5
   14828:	lsrhi	r8, r4, #6
   1482c:	addhi	r8, r8, #48	; 0x30
   14830:	strbhi	r8, [r0, r5]
   14834:	add	r8, fp, #2
   14838:	cmp	r7, r8
   1483c:	lsrhi	r5, r4, #3
   14840:	andhi	r5, r5, #7
   14844:	addhi	r5, r5, #48	; 0x30
   14848:	strbhi	r5, [r0, r8]
   1484c:	add	fp, fp, #3
   14850:	and	r4, r4, #7
   14854:	add	r4, r4, #48	; 0x30
   14858:	add	r5, r6, #1
   1485c:	cmp	r1, r5
   14860:	bls	1487c <__assert_fail@plt+0x3790>
   14864:	mov	r6, r5
   14868:	mov	r5, r3
   1486c:	b	147a8 <__assert_fail@plt+0x36bc>
   14870:	str	lr, [sp, #44]	; 0x2c
   14874:	ldr	r8, [sp, #56]	; 0x38
   14878:	b	1414c <__assert_fail@plt+0x3060>
   1487c:	str	lr, [sp, #44]	; 0x2c
   14880:	ldr	r8, [sp, #56]	; 0x38
   14884:	mov	r5, r3
   14888:	b	1414c <__assert_fail@plt+0x3060>
   1488c:	mov	r6, r8
   14890:	b	147a8 <__assert_fail@plt+0x36bc>
   14894:	mov	r5, #0
   14898:	b	14268 <__assert_fail@plt+0x317c>
   1489c:	mov	r8, r5
   148a0:	ldr	r5, [sp, #48]	; 0x30
   148a4:	mov	r4, #48	; 0x30
   148a8:	b	14268 <__assert_fail@plt+0x317c>
   148ac:	ldr	r8, [sp, #32]
   148b0:	mov	r4, #48	; 0x30
   148b4:	b	14268 <__assert_fail@plt+0x317c>
   148b8:	ldr	r8, [sp, #32]
   148bc:	mov	r4, #48	; 0x30
   148c0:	b	14268 <__assert_fail@plt+0x317c>
   148c4:	mov	r8, #0
   148c8:	mov	r5, r8
   148cc:	b	14268 <__assert_fail@plt+0x317c>
   148d0:	mov	r8, #0
   148d4:	mov	r5, r8
   148d8:	b	14268 <__assert_fail@plt+0x317c>
   148dc:	mov	r8, #0
   148e0:	mov	r5, r8
   148e4:	b	14268 <__assert_fail@plt+0x317c>
   148e8:	mov	r8, #0
   148ec:	mov	r5, r8
   148f0:	b	14268 <__assert_fail@plt+0x317c>
   148f4:	ldr	r3, [sp, #52]	; 0x34
   148f8:	ldrb	r8, [r3, r6]
   148fc:	adds	r8, r8, #0
   14900:	movne	r8, #1
   14904:	b	14378 <__assert_fail@plt+0x328c>
   14908:	cmp	sl, #2
   1490c:	movne	r3, #0
   14910:	moveq	r3, #1
   14914:	ldr	r1, [sp, #32]
   14918:	mov	r2, r1
   1491c:	and	r2, r2, r3
   14920:	cmp	fp, #0
   14924:	movne	r2, #0
   14928:	andeq	r2, r2, #1
   1492c:	cmp	r2, #0
   14930:	bne	14ae0 <__assert_fail@plt+0x39f4>
   14934:	eor	r2, r1, #1
   14938:	and	r3, r3, r2
   1493c:	ldr	r1, [sp, #80]	; 0x50
   14940:	tst	r1, r3
   14944:	beq	149bc <__assert_fail@plt+0x38d0>
   14948:	ldr	r3, [sp, #40]	; 0x28
   1494c:	cmp	r3, #0
   14950:	bne	14978 <__assert_fail@plt+0x388c>
   14954:	ldr	r1, [sp, #76]	; 0x4c
   14958:	clz	r3, r7
   1495c:	lsr	r3, r3, #5
   14960:	cmp	r1, #0
   14964:	moveq	r3, #0
   14968:	cmp	r3, #0
   1496c:	beq	149bc <__assert_fail@plt+0x38d0>
   14970:	ldr	r7, [sp, #76]	; 0x4c
   14974:	b	13a0c <__assert_fail@plt+0x2920>
   14978:	ldr	r3, [sp, #168]	; 0xa8
   1497c:	str	r3, [sp, #16]
   14980:	ldr	r3, [sp, #164]	; 0xa4
   14984:	str	r3, [sp, #12]
   14988:	ldr	r3, [sp, #160]	; 0xa0
   1498c:	str	r3, [sp, #8]
   14990:	ldr	r3, [sp, #156]	; 0x9c
   14994:	str	r3, [sp, #4]
   14998:	mov	r3, #5
   1499c:	str	r3, [sp]
   149a0:	ldr	r3, [sp, #28]
   149a4:	ldr	r2, [sp, #52]	; 0x34
   149a8:	ldr	r1, [sp, #76]	; 0x4c
   149ac:	ldr	r0, [sp, #36]	; 0x24
   149b0:	bl	139ac <__assert_fail@plt+0x28c0>
   149b4:	mov	fp, r0
   149b8:	b	14abc <__assert_fail@plt+0x39d0>
   149bc:	mov	sl, r7
   149c0:	ldr	r3, [sp, #72]	; 0x48
   149c4:	cmp	r3, #0
   149c8:	moveq	r2, #0
   149cc:	andne	r2, r2, #1
   149d0:	cmp	r2, #0
   149d4:	beq	14a04 <__assert_fail@plt+0x3918>
   149d8:	mov	r2, r3
   149dc:	ldrb	r3, [r3]
   149e0:	cmp	r3, #0
   149e4:	beq	14a04 <__assert_fail@plt+0x3918>
   149e8:	ldr	r1, [sp, #36]	; 0x24
   149ec:	cmp	sl, fp
   149f0:	strbhi	r3, [r1, fp]
   149f4:	add	fp, fp, #1
   149f8:	ldrb	r3, [r2, #1]!
   149fc:	cmp	r3, #0
   14a00:	bne	149ec <__assert_fail@plt+0x3900>
   14a04:	cmp	sl, fp
   14a08:	movhi	r3, #0
   14a0c:	ldrhi	r2, [sp, #36]	; 0x24
   14a10:	strbhi	r3, [r2, fp]
   14a14:	b	14abc <__assert_fail@plt+0x39d0>
   14a18:	mov	r8, sl
   14a1c:	mov	sl, r7
   14a20:	ldr	r3, [sp, #32]
   14a24:	str	r3, [sp, #48]	; 0x30
   14a28:	b	14a64 <__assert_fail@plt+0x3978>
   14a2c:	mov	r8, sl
   14a30:	mov	sl, r7
   14a34:	b	14a64 <__assert_fail@plt+0x3978>
   14a38:	mov	r8, sl
   14a3c:	mov	sl, r7
   14a40:	b	14a64 <__assert_fail@plt+0x3978>
   14a44:			; <UNDEFINED> instruction: 0x000185b0
   14a48:	andeq	r8, r1, r0, asr #11
   14a4c:			; <UNDEFINED> instruction: 0x000185b4
   14a50:	mov	r8, sl
   14a54:	mov	sl, r7
   14a58:	b	14a64 <__assert_fail@plt+0x3978>
   14a5c:	mov	r8, sl
   14a60:	mov	sl, r7
   14a64:	ldr	r3, [sp, #48]	; 0x30
   14a68:	cmp	r8, #2
   14a6c:	movne	r3, #0
   14a70:	andeq	r3, r3, #1
   14a74:	cmp	r3, #0
   14a78:	movne	r8, #4
   14a7c:	ldr	r3, [sp, #168]	; 0xa8
   14a80:	str	r3, [sp, #16]
   14a84:	ldr	r3, [sp, #164]	; 0xa4
   14a88:	str	r3, [sp, #12]
   14a8c:	mov	r3, #0
   14a90:	str	r3, [sp, #8]
   14a94:	ldr	r3, [sp, #156]	; 0x9c
   14a98:	bic	r3, r3, #2
   14a9c:	str	r3, [sp, #4]
   14aa0:	str	r8, [sp]
   14aa4:	ldr	r3, [sp, #28]
   14aa8:	ldr	r2, [sp, #52]	; 0x34
   14aac:	mov	r1, sl
   14ab0:	ldr	r0, [sp, #36]	; 0x24
   14ab4:	bl	139ac <__assert_fail@plt+0x28c0>
   14ab8:	mov	fp, r0
   14abc:	mov	r0, fp
   14ac0:	add	sp, sp, #116	; 0x74
   14ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac8:	mov	r8, sl
   14acc:	mov	sl, r7
   14ad0:	b	14a64 <__assert_fail@plt+0x3978>
   14ad4:	mov	r8, sl
   14ad8:	mov	sl, r7
   14adc:	b	14a64 <__assert_fail@plt+0x3978>
   14ae0:	mov	r8, sl
   14ae4:	mov	sl, r7
   14ae8:	b	14a64 <__assert_fail@plt+0x3978>
   14aec:	mov	r8, sl
   14af0:	mov	sl, r7
   14af4:	b	14a7c <__assert_fail@plt+0x3990>
   14af8:	mov	r3, #1
   14afc:	str	r3, [sp, #32]
   14b00:	str	r3, [sp, #48]	; 0x30
   14b04:	str	r3, [sp, #60]	; 0x3c
   14b08:	ldr	r3, [pc, #-196]	; 14a4c <__assert_fail@plt+0x3960>
   14b0c:	str	r3, [sp, #72]	; 0x48
   14b10:	mov	fp, #0
   14b14:	mov	sl, #5
   14b18:	b	13a68 <__assert_fail@plt+0x297c>
   14b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b20:	sub	sp, sp, #52	; 0x34
   14b24:	mov	r5, r0
   14b28:	str	r1, [sp, #24]
   14b2c:	str	r2, [sp, #28]
   14b30:	mov	r4, r3
   14b34:	bl	10ff0 <__errno_location@plt>
   14b38:	str	r0, [sp, #32]
   14b3c:	ldr	r3, [r0]
   14b40:	str	r3, [sp, #36]	; 0x24
   14b44:	ldr	r3, [pc, #396]	; 14cd8 <__assert_fail@plt+0x3bec>
   14b48:	ldr	r6, [r3]
   14b4c:	cmn	r5, #-2147483647	; 0x80000001
   14b50:	movne	r3, #0
   14b54:	moveq	r3, #1
   14b58:	orrs	r3, r3, r5, lsr #31
   14b5c:	bne	14c9c <__assert_fail@plt+0x3bb0>
   14b60:	ldr	r3, [pc, #368]	; 14cd8 <__assert_fail@plt+0x3bec>
   14b64:	ldr	r2, [r3, #4]
   14b68:	cmp	r5, r2
   14b6c:	blt	14bd4 <__assert_fail@plt+0x3ae8>
   14b70:	str	r2, [sp, #44]	; 0x2c
   14b74:	add	r3, r3, #8
   14b78:	cmp	r6, r3
   14b7c:	beq	14ca0 <__assert_fail@plt+0x3bb4>
   14b80:	sub	r2, r5, r2
   14b84:	mov	r3, #8
   14b88:	str	r3, [sp]
   14b8c:	mvn	r3, #-2147483648	; 0x80000000
   14b90:	add	r2, r2, #1
   14b94:	add	r1, sp, #44	; 0x2c
   14b98:	mov	r0, r6
   14b9c:	bl	15adc <__assert_fail@plt+0x49f0>
   14ba0:	mov	r6, r0
   14ba4:	ldr	r3, [pc, #300]	; 14cd8 <__assert_fail@plt+0x3bec>
   14ba8:	str	r0, [r3]
   14bac:	ldr	r7, [pc, #292]	; 14cd8 <__assert_fail@plt+0x3bec>
   14bb0:	ldr	r0, [r7, #4]
   14bb4:	ldr	r2, [sp, #44]	; 0x2c
   14bb8:	sub	r2, r2, r0
   14bbc:	lsl	r2, r2, #3
   14bc0:	mov	r1, #0
   14bc4:	add	r0, r6, r0, lsl #3
   14bc8:	bl	11008 <memset@plt>
   14bcc:	ldr	r3, [sp, #44]	; 0x2c
   14bd0:	str	r3, [r7, #4]
   14bd4:	add	fp, r6, r5, lsl #3
   14bd8:	ldr	r8, [r6, r5, lsl #3]
   14bdc:	ldr	r7, [fp, #4]
   14be0:	ldr	r9, [r4, #4]
   14be4:	orr	r9, r9, #1
   14be8:	add	sl, r4, #8
   14bec:	ldr	r3, [r4, #44]	; 0x2c
   14bf0:	str	r3, [sp, #16]
   14bf4:	ldr	r3, [r4, #40]	; 0x28
   14bf8:	str	r3, [sp, #12]
   14bfc:	str	sl, [sp, #8]
   14c00:	str	r9, [sp, #4]
   14c04:	ldr	r3, [r4]
   14c08:	str	r3, [sp]
   14c0c:	ldr	r3, [sp, #28]
   14c10:	ldr	r2, [sp, #24]
   14c14:	mov	r1, r8
   14c18:	mov	r0, r7
   14c1c:	bl	139ac <__assert_fail@plt+0x28c0>
   14c20:	cmp	r8, r0
   14c24:	bhi	14c84 <__assert_fail@plt+0x3b98>
   14c28:	add	r8, r0, #1
   14c2c:	str	r8, [r6, r5, lsl #3]
   14c30:	ldr	r3, [pc, #164]	; 14cdc <__assert_fail@plt+0x3bf0>
   14c34:	cmp	r7, r3
   14c38:	beq	14c44 <__assert_fail@plt+0x3b58>
   14c3c:	mov	r0, r7
   14c40:	bl	13494 <__assert_fail@plt+0x23a8>
   14c44:	mov	r0, r8
   14c48:	bl	15958 <__assert_fail@plt+0x486c>
   14c4c:	mov	r7, r0
   14c50:	str	r0, [fp, #4]
   14c54:	ldr	r3, [r4, #44]	; 0x2c
   14c58:	str	r3, [sp, #16]
   14c5c:	ldr	r3, [r4, #40]	; 0x28
   14c60:	str	r3, [sp, #12]
   14c64:	str	sl, [sp, #8]
   14c68:	str	r9, [sp, #4]
   14c6c:	ldr	r3, [r4]
   14c70:	str	r3, [sp]
   14c74:	ldr	r3, [sp, #28]
   14c78:	ldr	r2, [sp, #24]
   14c7c:	mov	r1, r8
   14c80:	bl	139ac <__assert_fail@plt+0x28c0>
   14c84:	ldr	r3, [sp, #32]
   14c88:	ldr	r2, [sp, #36]	; 0x24
   14c8c:	str	r2, [r3]
   14c90:	mov	r0, r7
   14c94:	add	sp, sp, #52	; 0x34
   14c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c9c:	bl	110d4 <abort@plt>
   14ca0:	sub	r2, r5, r2
   14ca4:	mov	r3, #8
   14ca8:	str	r3, [sp]
   14cac:	mvn	r3, #-2147483648	; 0x80000000
   14cb0:	add	r2, r2, #1
   14cb4:	add	r1, sp, #44	; 0x2c
   14cb8:	mov	r0, #0
   14cbc:	bl	15adc <__assert_fail@plt+0x49f0>
   14cc0:	mov	r6, r0
   14cc4:	ldr	r3, [pc, #12]	; 14cd8 <__assert_fail@plt+0x3bec>
   14cc8:	str	r0, [r3], #8
   14ccc:	ldm	r3, {r0, r1}
   14cd0:	stm	r6, {r0, r1}
   14cd4:	b	14bac <__assert_fail@plt+0x3ac0>
   14cd8:	andeq	r9, r2, r0, lsr #2
   14cdc:	andeq	r9, r2, r4, lsl #4
   14ce0:	push	{r4, r5, r6, lr}
   14ce4:	mov	r4, r0
   14ce8:	bl	10ff0 <__errno_location@plt>
   14cec:	mov	r5, r0
   14cf0:	ldr	r6, [r0]
   14cf4:	cmp	r4, #0
   14cf8:	ldr	r3, [pc, #20]	; 14d14 <__assert_fail@plt+0x3c28>
   14cfc:	moveq	r4, r3
   14d00:	mov	r1, #48	; 0x30
   14d04:	mov	r0, r4
   14d08:	bl	15e44 <__assert_fail@plt+0x4d58>
   14d0c:	str	r6, [r5]
   14d10:	pop	{r4, r5, r6, pc}
   14d14:	andeq	r9, r2, r4, lsl #6
   14d18:	subs	r3, r0, #0
   14d1c:	ldr	r2, [pc, #8]	; 14d2c <__assert_fail@plt+0x3c40>
   14d20:	moveq	r3, r2
   14d24:	ldr	r0, [r3]
   14d28:	bx	lr
   14d2c:	andeq	r9, r2, r4, lsl #6
   14d30:	subs	r3, r0, #0
   14d34:	ldr	r2, [pc, #8]	; 14d44 <__assert_fail@plt+0x3c58>
   14d38:	moveq	r3, r2
   14d3c:	str	r1, [r3]
   14d40:	bx	lr
   14d44:	andeq	r9, r2, r4, lsl #6
   14d48:	push	{lr}		; (str lr, [sp, #-4]!)
   14d4c:	subs	r3, r0, #0
   14d50:	ldr	r0, [pc, #44]	; 14d84 <__assert_fail@plt+0x3c98>
   14d54:	moveq	r3, r0
   14d58:	add	r3, r3, #8
   14d5c:	lsr	lr, r1, #5
   14d60:	and	r1, r1, #31
   14d64:	ldr	ip, [r3, lr, lsl #2]
   14d68:	lsr	r0, ip, r1
   14d6c:	eor	r2, r2, r0
   14d70:	and	r2, r2, #1
   14d74:	eor	r1, ip, r2, lsl r1
   14d78:	str	r1, [r3, lr, lsl #2]
   14d7c:	and	r0, r0, #1
   14d80:	pop	{pc}		; (ldr pc, [sp], #4)
   14d84:	andeq	r9, r2, r4, lsl #6
   14d88:	subs	r3, r0, #0
   14d8c:	ldr	r2, [pc, #12]	; 14da0 <__assert_fail@plt+0x3cb4>
   14d90:	moveq	r3, r2
   14d94:	ldr	r0, [r3, #4]
   14d98:	str	r1, [r3, #4]
   14d9c:	bx	lr
   14da0:	andeq	r9, r2, r4, lsl #6
   14da4:	subs	r3, r0, #0
   14da8:	ldr	r0, [pc, #40]	; 14dd8 <__assert_fail@plt+0x3cec>
   14dac:	moveq	r3, r0
   14db0:	mov	r0, #10
   14db4:	str	r0, [r3]
   14db8:	cmp	r2, #0
   14dbc:	cmpne	r1, #0
   14dc0:	beq	14dd0 <__assert_fail@plt+0x3ce4>
   14dc4:	str	r1, [r3, #40]	; 0x28
   14dc8:	str	r2, [r3, #44]	; 0x2c
   14dcc:	bx	lr
   14dd0:	push	{r4, lr}
   14dd4:	bl	110d4 <abort@plt>
   14dd8:	andeq	r9, r2, r4, lsl #6
   14ddc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14de0:	sub	sp, sp, #24
   14de4:	mov	r7, r0
   14de8:	mov	r8, r1
   14dec:	mov	r9, r2
   14df0:	mov	sl, r3
   14df4:	ldr	r4, [sp, #56]	; 0x38
   14df8:	cmp	r4, #0
   14dfc:	ldr	r3, [pc, #84]	; 14e58 <__assert_fail@plt+0x3d6c>
   14e00:	moveq	r4, r3
   14e04:	bl	10ff0 <__errno_location@plt>
   14e08:	mov	r5, r0
   14e0c:	ldr	r6, [r0]
   14e10:	ldr	r3, [r4, #44]	; 0x2c
   14e14:	str	r3, [sp, #16]
   14e18:	ldr	r3, [r4, #40]	; 0x28
   14e1c:	str	r3, [sp, #12]
   14e20:	add	r3, r4, #8
   14e24:	str	r3, [sp, #8]
   14e28:	ldr	r3, [r4, #4]
   14e2c:	str	r3, [sp, #4]
   14e30:	ldr	r3, [r4]
   14e34:	str	r3, [sp]
   14e38:	mov	r3, sl
   14e3c:	mov	r2, r9
   14e40:	mov	r1, r8
   14e44:	mov	r0, r7
   14e48:	bl	139ac <__assert_fail@plt+0x28c0>
   14e4c:	str	r6, [r5]
   14e50:	add	sp, sp, #24
   14e54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e58:	andeq	r9, r2, r4, lsl #6
   14e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e60:	sub	sp, sp, #44	; 0x2c
   14e64:	str	r0, [sp, #28]
   14e68:	str	r1, [sp, #32]
   14e6c:	mov	r6, r2
   14e70:	subs	r4, r3, #0
   14e74:	ldr	r3, [pc, #172]	; 14f28 <__assert_fail@plt+0x3e3c>
   14e78:	moveq	r4, r3
   14e7c:	bl	10ff0 <__errno_location@plt>
   14e80:	mov	r7, r0
   14e84:	ldr	fp, [r0]
   14e88:	ldr	r5, [r4, #4]
   14e8c:	cmp	r6, #0
   14e90:	orreq	r5, r5, #1
   14e94:	add	r9, r4, #8
   14e98:	ldr	r3, [r4, #44]	; 0x2c
   14e9c:	str	r3, [sp, #16]
   14ea0:	ldr	r3, [r4, #40]	; 0x28
   14ea4:	str	r3, [sp, #12]
   14ea8:	str	r9, [sp, #8]
   14eac:	str	r5, [sp, #4]
   14eb0:	ldr	r3, [r4]
   14eb4:	str	r3, [sp]
   14eb8:	ldr	r3, [sp, #32]
   14ebc:	ldr	r2, [sp, #28]
   14ec0:	mov	r1, #0
   14ec4:	mov	r0, r1
   14ec8:	bl	139ac <__assert_fail@plt+0x28c0>
   14ecc:	mov	sl, r0
   14ed0:	add	r8, r0, #1
   14ed4:	mov	r0, r8
   14ed8:	bl	15958 <__assert_fail@plt+0x486c>
   14edc:	str	r0, [sp, #36]	; 0x24
   14ee0:	ldr	r3, [r4, #44]	; 0x2c
   14ee4:	str	r3, [sp, #16]
   14ee8:	ldr	r3, [r4, #40]	; 0x28
   14eec:	str	r3, [sp, #12]
   14ef0:	str	r9, [sp, #8]
   14ef4:	str	r5, [sp, #4]
   14ef8:	ldr	r3, [r4]
   14efc:	str	r3, [sp]
   14f00:	ldr	r3, [sp, #32]
   14f04:	ldr	r2, [sp, #28]
   14f08:	mov	r1, r8
   14f0c:	bl	139ac <__assert_fail@plt+0x28c0>
   14f10:	str	fp, [r7]
   14f14:	cmp	r6, #0
   14f18:	strne	sl, [r6]
   14f1c:	ldr	r0, [sp, #36]	; 0x24
   14f20:	add	sp, sp, #44	; 0x2c
   14f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f28:	andeq	r9, r2, r4, lsl #6
   14f2c:	push	{r4, lr}
   14f30:	mov	r3, r2
   14f34:	mov	r2, #0
   14f38:	bl	14e5c <__assert_fail@plt+0x3d70>
   14f3c:	pop	{r4, pc}
   14f40:	push	{r4, r5, r6, r7, r8, lr}
   14f44:	ldr	r3, [pc, #140]	; 14fd8 <__assert_fail@plt+0x3eec>
   14f48:	ldr	r7, [r3]
   14f4c:	ldr	r3, [r3, #4]
   14f50:	cmp	r3, #1
   14f54:	ble	14f80 <__assert_fail@plt+0x3e94>
   14f58:	mov	r5, r7
   14f5c:	mov	r4, #1
   14f60:	ldr	r6, [pc, #112]	; 14fd8 <__assert_fail@plt+0x3eec>
   14f64:	ldr	r0, [r5, #12]
   14f68:	bl	13494 <__assert_fail@plt+0x23a8>
   14f6c:	add	r4, r4, #1
   14f70:	add	r5, r5, #8
   14f74:	ldr	r3, [r6, #4]
   14f78:	cmp	r3, r4
   14f7c:	bgt	14f64 <__assert_fail@plt+0x3e78>
   14f80:	ldr	r0, [r7, #4]
   14f84:	ldr	r3, [pc, #80]	; 14fdc <__assert_fail@plt+0x3ef0>
   14f88:	cmp	r0, r3
   14f8c:	beq	14fa8 <__assert_fail@plt+0x3ebc>
   14f90:	bl	13494 <__assert_fail@plt+0x23a8>
   14f94:	ldr	r3, [pc, #60]	; 14fd8 <__assert_fail@plt+0x3eec>
   14f98:	mov	r2, #256	; 0x100
   14f9c:	str	r2, [r3, #8]
   14fa0:	ldr	r2, [pc, #52]	; 14fdc <__assert_fail@plt+0x3ef0>
   14fa4:	str	r2, [r3, #12]
   14fa8:	ldr	r3, [pc, #48]	; 14fe0 <__assert_fail@plt+0x3ef4>
   14fac:	cmp	r7, r3
   14fb0:	beq	14fc8 <__assert_fail@plt+0x3edc>
   14fb4:	mov	r0, r7
   14fb8:	bl	13494 <__assert_fail@plt+0x23a8>
   14fbc:	ldr	r3, [pc, #20]	; 14fd8 <__assert_fail@plt+0x3eec>
   14fc0:	add	r2, r3, #8
   14fc4:	str	r2, [r3]
   14fc8:	mov	r2, #1
   14fcc:	ldr	r3, [pc, #4]	; 14fd8 <__assert_fail@plt+0x3eec>
   14fd0:	str	r2, [r3, #4]
   14fd4:	pop	{r4, r5, r6, r7, r8, pc}
   14fd8:	andeq	r9, r2, r0, lsr #2
   14fdc:	andeq	r9, r2, r4, lsl #4
   14fe0:	andeq	r9, r2, r8, lsr #2
   14fe4:	push	{r4, lr}
   14fe8:	ldr	r3, [pc, #8]	; 14ff8 <__assert_fail@plt+0x3f0c>
   14fec:	mvn	r2, #0
   14ff0:	bl	14b1c <__assert_fail@plt+0x3a30>
   14ff4:	pop	{r4, pc}
   14ff8:	andeq	r9, r2, r4, lsl #6
   14ffc:	push	{r4, lr}
   15000:	ldr	r3, [pc, #4]	; 1500c <__assert_fail@plt+0x3f20>
   15004:	bl	14b1c <__assert_fail@plt+0x3a30>
   15008:	pop	{r4, pc}
   1500c:	andeq	r9, r2, r4, lsl #6
   15010:	push	{r4, lr}
   15014:	mov	r1, r0
   15018:	mov	r0, #0
   1501c:	bl	14fe4 <__assert_fail@plt+0x3ef8>
   15020:	pop	{r4, pc}
   15024:	push	{r4, lr}
   15028:	mov	r2, r1
   1502c:	mov	r1, r0
   15030:	mov	r0, #0
   15034:	bl	14ffc <__assert_fail@plt+0x3f10>
   15038:	pop	{r4, pc}
   1503c:	push	{r4, r5, lr}
   15040:	sub	sp, sp, #52	; 0x34
   15044:	mov	r4, r0
   15048:	mov	r5, r2
   1504c:	mov	r0, sp
   15050:	bl	13844 <__assert_fail@plt+0x2758>
   15054:	mov	r3, sp
   15058:	mvn	r2, #0
   1505c:	mov	r1, r5
   15060:	mov	r0, r4
   15064:	bl	14b1c <__assert_fail@plt+0x3a30>
   15068:	add	sp, sp, #52	; 0x34
   1506c:	pop	{r4, r5, pc}
   15070:	push	{r4, r5, r6, lr}
   15074:	sub	sp, sp, #48	; 0x30
   15078:	mov	r4, r0
   1507c:	mov	r5, r2
   15080:	mov	r6, r3
   15084:	mov	r0, sp
   15088:	bl	13844 <__assert_fail@plt+0x2758>
   1508c:	mov	r3, sp
   15090:	mov	r2, r6
   15094:	mov	r1, r5
   15098:	mov	r0, r4
   1509c:	bl	14b1c <__assert_fail@plt+0x3a30>
   150a0:	add	sp, sp, #48	; 0x30
   150a4:	pop	{r4, r5, r6, pc}
   150a8:	push	{r4, lr}
   150ac:	mov	r2, r1
   150b0:	mov	r1, r0
   150b4:	mov	r0, #0
   150b8:	bl	1503c <__assert_fail@plt+0x3f50>
   150bc:	pop	{r4, pc}
   150c0:	push	{r4, lr}
   150c4:	mov	r3, r2
   150c8:	mov	r2, r1
   150cc:	mov	r1, r0
   150d0:	mov	r0, #0
   150d4:	bl	15070 <__assert_fail@plt+0x3f84>
   150d8:	pop	{r4, pc}
   150dc:	push	{r4, r5, r6, lr}
   150e0:	sub	sp, sp, #48	; 0x30
   150e4:	mov	r4, r0
   150e8:	mov	r5, r1
   150ec:	mov	r6, r2
   150f0:	mov	ip, sp
   150f4:	ldr	lr, [pc, #64]	; 1513c <__assert_fail@plt+0x4050>
   150f8:	ldm	lr!, {r0, r1, r2, r3}
   150fc:	stmia	ip!, {r0, r1, r2, r3}
   15100:	ldm	lr!, {r0, r1, r2, r3}
   15104:	stmia	ip!, {r0, r1, r2, r3}
   15108:	ldm	lr, {r0, r1, r2, r3}
   1510c:	stm	ip, {r0, r1, r2, r3}
   15110:	mov	r2, #1
   15114:	mov	r1, r6
   15118:	mov	r0, sp
   1511c:	bl	14d48 <__assert_fail@plt+0x3c5c>
   15120:	mov	r3, sp
   15124:	mov	r2, r5
   15128:	mov	r1, r4
   1512c:	mov	r0, #0
   15130:	bl	14b1c <__assert_fail@plt+0x3a30>
   15134:	add	sp, sp, #48	; 0x30
   15138:	pop	{r4, r5, r6, pc}
   1513c:	andeq	r9, r2, r4, lsl #6
   15140:	push	{r4, lr}
   15144:	mov	r2, r1
   15148:	mvn	r1, #0
   1514c:	bl	150dc <__assert_fail@plt+0x3ff0>
   15150:	pop	{r4, pc}
   15154:	push	{r4, lr}
   15158:	mov	r1, #58	; 0x3a
   1515c:	bl	15140 <__assert_fail@plt+0x4054>
   15160:	pop	{r4, pc}
   15164:	push	{r4, lr}
   15168:	mov	r2, #58	; 0x3a
   1516c:	bl	150dc <__assert_fail@plt+0x3ff0>
   15170:	pop	{r4, pc}
   15174:	push	{r4, r5, lr}
   15178:	sub	sp, sp, #100	; 0x64
   1517c:	mov	r4, r0
   15180:	mov	r5, r2
   15184:	mov	r0, sp
   15188:	bl	13844 <__assert_fail@plt+0x2758>
   1518c:	add	lr, sp, #48	; 0x30
   15190:	mov	ip, sp
   15194:	ldm	ip!, {r0, r1, r2, r3}
   15198:	stmia	lr!, {r0, r1, r2, r3}
   1519c:	ldm	ip!, {r0, r1, r2, r3}
   151a0:	stmia	lr!, {r0, r1, r2, r3}
   151a4:	ldm	ip, {r0, r1, r2, r3}
   151a8:	stm	lr, {r0, r1, r2, r3}
   151ac:	mov	r2, #1
   151b0:	mov	r1, #58	; 0x3a
   151b4:	add	r0, sp, #48	; 0x30
   151b8:	bl	14d48 <__assert_fail@plt+0x3c5c>
   151bc:	add	r3, sp, #48	; 0x30
   151c0:	mvn	r2, #0
   151c4:	mov	r1, r5
   151c8:	mov	r0, r4
   151cc:	bl	14b1c <__assert_fail@plt+0x3a30>
   151d0:	add	sp, sp, #100	; 0x64
   151d4:	pop	{r4, r5, pc}
   151d8:	push	{r4, r5, r6, r7, lr}
   151dc:	sub	sp, sp, #52	; 0x34
   151e0:	mov	r4, r0
   151e4:	mov	r6, r1
   151e8:	mov	r7, r2
   151ec:	mov	r5, r3
   151f0:	mov	ip, sp
   151f4:	ldr	lr, [pc, #64]	; 1523c <__assert_fail@plt+0x4150>
   151f8:	ldm	lr!, {r0, r1, r2, r3}
   151fc:	stmia	ip!, {r0, r1, r2, r3}
   15200:	ldm	lr!, {r0, r1, r2, r3}
   15204:	stmia	ip!, {r0, r1, r2, r3}
   15208:	ldm	lr, {r0, r1, r2, r3}
   1520c:	stm	ip, {r0, r1, r2, r3}
   15210:	mov	r2, r7
   15214:	mov	r1, r6
   15218:	mov	r0, sp
   1521c:	bl	14da4 <__assert_fail@plt+0x3cb8>
   15220:	mov	r3, sp
   15224:	ldr	r2, [sp, #72]	; 0x48
   15228:	mov	r1, r5
   1522c:	mov	r0, r4
   15230:	bl	14b1c <__assert_fail@plt+0x3a30>
   15234:	add	sp, sp, #52	; 0x34
   15238:	pop	{r4, r5, r6, r7, pc}
   1523c:	andeq	r9, r2, r4, lsl #6
   15240:	push	{lr}		; (str lr, [sp, #-4]!)
   15244:	sub	sp, sp, #12
   15248:	mvn	ip, #0
   1524c:	str	ip, [sp]
   15250:	bl	151d8 <__assert_fail@plt+0x40ec>
   15254:	add	sp, sp, #12
   15258:	pop	{pc}		; (ldr pc, [sp], #4)
   1525c:	push	{r4, lr}
   15260:	mov	r3, r2
   15264:	mov	r2, r1
   15268:	mov	r1, r0
   1526c:	mov	r0, #0
   15270:	bl	15240 <__assert_fail@plt+0x4154>
   15274:	pop	{r4, pc}
   15278:	push	{lr}		; (str lr, [sp, #-4]!)
   1527c:	sub	sp, sp, #12
   15280:	str	r3, [sp]
   15284:	mov	r3, r2
   15288:	mov	r2, r1
   1528c:	mov	r1, r0
   15290:	mov	r0, #0
   15294:	bl	151d8 <__assert_fail@plt+0x40ec>
   15298:	add	sp, sp, #12
   1529c:	pop	{pc}		; (ldr pc, [sp], #4)
   152a0:	push	{r4, lr}
   152a4:	ldr	r3, [pc, #4]	; 152b0 <__assert_fail@plt+0x41c4>
   152a8:	bl	14b1c <__assert_fail@plt+0x3a30>
   152ac:	pop	{r4, pc}
   152b0:	andeq	r9, r2, r0, lsr r1
   152b4:	push	{r4, lr}
   152b8:	mov	r2, r1
   152bc:	mov	r1, r0
   152c0:	mov	r0, #0
   152c4:	bl	152a0 <__assert_fail@plt+0x41b4>
   152c8:	pop	{r4, pc}
   152cc:	push	{r4, lr}
   152d0:	mvn	r2, #0
   152d4:	bl	152a0 <__assert_fail@plt+0x41b4>
   152d8:	pop	{r4, pc}
   152dc:	push	{r4, lr}
   152e0:	mov	r1, r0
   152e4:	mov	r0, #0
   152e8:	bl	152cc <__assert_fail@plt+0x41e0>
   152ec:	pop	{r4, pc}
   152f0:	push	{r4, r5, r6, lr}
   152f4:	mov	r6, r1
   152f8:	mov	r4, r2
   152fc:	mov	r1, #0
   15300:	bl	11080 <setlocale@plt>
   15304:	subs	r5, r0, #0
   15308:	beq	1532c <__assert_fail@plt+0x4240>
   1530c:	mov	r0, r5
   15310:	bl	10fd8 <strlen@plt>
   15314:	cmp	r4, r0
   15318:	bhi	15344 <__assert_fail@plt+0x4258>
   1531c:	cmp	r4, #0
   15320:	bne	1535c <__assert_fail@plt+0x4270>
   15324:	mov	r0, #34	; 0x22
   15328:	pop	{r4, r5, r6, pc}
   1532c:	cmp	r4, #0
   15330:	beq	15380 <__assert_fail@plt+0x4294>
   15334:	mov	r3, #0
   15338:	strb	r3, [r6]
   1533c:	mov	r0, #22
   15340:	pop	{r4, r5, r6, pc}
   15344:	add	r2, r0, #1
   15348:	mov	r1, r5
   1534c:	mov	r0, r6
   15350:	bl	10ea0 <memcpy@plt>
   15354:	mov	r0, #0
   15358:	pop	{r4, r5, r6, pc}
   1535c:	sub	r4, r4, #1
   15360:	mov	r2, r4
   15364:	mov	r1, r5
   15368:	mov	r0, r6
   1536c:	bl	10ea0 <memcpy@plt>
   15370:	mov	r3, #0
   15374:	strb	r3, [r6, r4]
   15378:	mov	r0, #34	; 0x22
   1537c:	pop	{r4, r5, r6, pc}
   15380:	mov	r0, #22
   15384:	pop	{r4, r5, r6, pc}
   15388:	push	{r4, lr}
   1538c:	mov	r1, #0
   15390:	bl	11080 <setlocale@plt>
   15394:	pop	{r4, pc}
   15398:	push	{r4, lr}
   1539c:	mov	r2, #3
   153a0:	mov	r1, #0
   153a4:	bl	16c70 <__assert_fail@plt+0x5b84>
   153a8:	pop	{r4, pc}
   153ac:	push	{r4, r5, r6, lr}
   153b0:	sub	sp, sp, #32
   153b4:	mov	r4, r0
   153b8:	ldr	r5, [sp, #48]	; 0x30
   153bc:	ldr	r6, [sp, #52]	; 0x34
   153c0:	cmp	r1, #0
   153c4:	beq	1547c <__assert_fail@plt+0x4390>
   153c8:	str	r3, [sp, #4]
   153cc:	str	r2, [sp]
   153d0:	mov	r3, r1
   153d4:	ldr	r2, [pc, #940]	; 15788 <__assert_fail@plt+0x469c>
   153d8:	mov	r1, #1
   153dc:	bl	1102c <__fprintf_chk@plt>
   153e0:	mov	r2, #5
   153e4:	ldr	r1, [pc, #928]	; 1578c <__assert_fail@plt+0x46a0>
   153e8:	mov	r0, #0
   153ec:	bl	10ee8 <dcgettext@plt>
   153f0:	ldr	r3, [pc, #920]	; 15790 <__assert_fail@plt+0x46a4>
   153f4:	str	r3, [sp]
   153f8:	mov	r3, r0
   153fc:	ldr	r2, [pc, #912]	; 15794 <__assert_fail@plt+0x46a8>
   15400:	mov	r1, #1
   15404:	mov	r0, r4
   15408:	bl	1102c <__fprintf_chk@plt>
   1540c:	mov	r1, r4
   15410:	mov	r0, #10
   15414:	bl	10edc <fputc_unlocked@plt>
   15418:	mov	r2, #5
   1541c:	ldr	r1, [pc, #884]	; 15798 <__assert_fail@plt+0x46ac>
   15420:	mov	r0, #0
   15424:	bl	10ee8 <dcgettext@plt>
   15428:	ldr	r3, [pc, #876]	; 1579c <__assert_fail@plt+0x46b0>
   1542c:	mov	r2, r0
   15430:	mov	r1, #1
   15434:	mov	r0, r4
   15438:	bl	1102c <__fprintf_chk@plt>
   1543c:	mov	r1, r4
   15440:	mov	r0, #10
   15444:	bl	10edc <fputc_unlocked@plt>
   15448:	cmp	r6, #9
   1544c:	ldrls	pc, [pc, r6, lsl #2]
   15450:	b	15720 <__assert_fail@plt+0x4634>
   15454:			; <UNDEFINED> instruction: 0x000154b8
   15458:	muleq	r1, r4, r4
   1545c:	andeq	r5, r1, r0, asr #9
   15460:	strdeq	r5, [r1], -r0
   15464:	andeq	r5, r1, r8, lsr #10
   15468:	andeq	r5, r1, r8, ror #10
   1546c:			; <UNDEFINED> instruction: 0x000155b0
   15470:	andeq	r5, r1, r0, lsl #12
   15474:	andeq	r5, r1, r8, asr r6
   15478:			; <UNDEFINED> instruction: 0x000156b8
   1547c:	str	r3, [sp]
   15480:	mov	r3, r2
   15484:	ldr	r2, [pc, #788]	; 157a0 <__assert_fail@plt+0x46b4>
   15488:	mov	r1, #1
   1548c:	bl	1102c <__fprintf_chk@plt>
   15490:	b	153e0 <__assert_fail@plt+0x42f4>
   15494:	mov	r2, #5
   15498:	ldr	r1, [pc, #772]	; 157a4 <__assert_fail@plt+0x46b8>
   1549c:	mov	r0, #0
   154a0:	bl	10ee8 <dcgettext@plt>
   154a4:	ldr	r3, [r5]
   154a8:	mov	r2, r0
   154ac:	mov	r1, #1
   154b0:	mov	r0, r4
   154b4:	bl	1102c <__fprintf_chk@plt>
   154b8:	add	sp, sp, #32
   154bc:	pop	{r4, r5, r6, pc}
   154c0:	mov	r2, #5
   154c4:	ldr	r1, [pc, #732]	; 157a8 <__assert_fail@plt+0x46bc>
   154c8:	mov	r0, #0
   154cc:	bl	10ee8 <dcgettext@plt>
   154d0:	ldr	r3, [r5]
   154d4:	ldr	r2, [r5, #4]
   154d8:	str	r2, [sp]
   154dc:	mov	r2, r0
   154e0:	mov	r1, #1
   154e4:	mov	r0, r4
   154e8:	bl	1102c <__fprintf_chk@plt>
   154ec:	b	154b8 <__assert_fail@plt+0x43cc>
   154f0:	mov	r2, #5
   154f4:	ldr	r1, [pc, #688]	; 157ac <__assert_fail@plt+0x46c0>
   154f8:	mov	r0, #0
   154fc:	bl	10ee8 <dcgettext@plt>
   15500:	ldr	r3, [r5]
   15504:	ldr	r2, [r5, #8]
   15508:	str	r2, [sp, #4]
   1550c:	ldr	r2, [r5, #4]
   15510:	str	r2, [sp]
   15514:	mov	r2, r0
   15518:	mov	r1, #1
   1551c:	mov	r0, r4
   15520:	bl	1102c <__fprintf_chk@plt>
   15524:	b	154b8 <__assert_fail@plt+0x43cc>
   15528:	mov	r2, #5
   1552c:	ldr	r1, [pc, #636]	; 157b0 <__assert_fail@plt+0x46c4>
   15530:	mov	r0, #0
   15534:	bl	10ee8 <dcgettext@plt>
   15538:	ldr	r3, [r5]
   1553c:	ldr	r2, [r5, #12]
   15540:	str	r2, [sp, #8]
   15544:	ldr	r2, [r5, #8]
   15548:	str	r2, [sp, #4]
   1554c:	ldr	r2, [r5, #4]
   15550:	str	r2, [sp]
   15554:	mov	r2, r0
   15558:	mov	r1, #1
   1555c:	mov	r0, r4
   15560:	bl	1102c <__fprintf_chk@plt>
   15564:	b	154b8 <__assert_fail@plt+0x43cc>
   15568:	mov	r2, #5
   1556c:	ldr	r1, [pc, #576]	; 157b4 <__assert_fail@plt+0x46c8>
   15570:	mov	r0, #0
   15574:	bl	10ee8 <dcgettext@plt>
   15578:	ldr	r3, [r5]
   1557c:	ldr	r2, [r5, #16]
   15580:	str	r2, [sp, #12]
   15584:	ldr	r2, [r5, #12]
   15588:	str	r2, [sp, #8]
   1558c:	ldr	r2, [r5, #8]
   15590:	str	r2, [sp, #4]
   15594:	ldr	r2, [r5, #4]
   15598:	str	r2, [sp]
   1559c:	mov	r2, r0
   155a0:	mov	r1, #1
   155a4:	mov	r0, r4
   155a8:	bl	1102c <__fprintf_chk@plt>
   155ac:	b	154b8 <__assert_fail@plt+0x43cc>
   155b0:	mov	r2, #5
   155b4:	ldr	r1, [pc, #508]	; 157b8 <__assert_fail@plt+0x46cc>
   155b8:	mov	r0, #0
   155bc:	bl	10ee8 <dcgettext@plt>
   155c0:	ldr	r3, [r5]
   155c4:	ldr	r2, [r5, #20]
   155c8:	str	r2, [sp, #16]
   155cc:	ldr	r2, [r5, #16]
   155d0:	str	r2, [sp, #12]
   155d4:	ldr	r2, [r5, #12]
   155d8:	str	r2, [sp, #8]
   155dc:	ldr	r2, [r5, #8]
   155e0:	str	r2, [sp, #4]
   155e4:	ldr	r2, [r5, #4]
   155e8:	str	r2, [sp]
   155ec:	mov	r2, r0
   155f0:	mov	r1, #1
   155f4:	mov	r0, r4
   155f8:	bl	1102c <__fprintf_chk@plt>
   155fc:	b	154b8 <__assert_fail@plt+0x43cc>
   15600:	mov	r2, #5
   15604:	ldr	r1, [pc, #432]	; 157bc <__assert_fail@plt+0x46d0>
   15608:	mov	r0, #0
   1560c:	bl	10ee8 <dcgettext@plt>
   15610:	ldr	r3, [r5]
   15614:	ldr	r2, [r5, #24]
   15618:	str	r2, [sp, #20]
   1561c:	ldr	r2, [r5, #20]
   15620:	str	r2, [sp, #16]
   15624:	ldr	r2, [r5, #16]
   15628:	str	r2, [sp, #12]
   1562c:	ldr	r2, [r5, #12]
   15630:	str	r2, [sp, #8]
   15634:	ldr	r2, [r5, #8]
   15638:	str	r2, [sp, #4]
   1563c:	ldr	r2, [r5, #4]
   15640:	str	r2, [sp]
   15644:	mov	r2, r0
   15648:	mov	r1, #1
   1564c:	mov	r0, r4
   15650:	bl	1102c <__fprintf_chk@plt>
   15654:	b	154b8 <__assert_fail@plt+0x43cc>
   15658:	mov	r2, #5
   1565c:	ldr	r1, [pc, #348]	; 157c0 <__assert_fail@plt+0x46d4>
   15660:	mov	r0, #0
   15664:	bl	10ee8 <dcgettext@plt>
   15668:	ldr	r3, [r5]
   1566c:	ldr	r2, [r5, #28]
   15670:	str	r2, [sp, #24]
   15674:	ldr	r2, [r5, #24]
   15678:	str	r2, [sp, #20]
   1567c:	ldr	r2, [r5, #20]
   15680:	str	r2, [sp, #16]
   15684:	ldr	r2, [r5, #16]
   15688:	str	r2, [sp, #12]
   1568c:	ldr	r2, [r5, #12]
   15690:	str	r2, [sp, #8]
   15694:	ldr	r2, [r5, #8]
   15698:	str	r2, [sp, #4]
   1569c:	ldr	r2, [r5, #4]
   156a0:	str	r2, [sp]
   156a4:	mov	r2, r0
   156a8:	mov	r1, #1
   156ac:	mov	r0, r4
   156b0:	bl	1102c <__fprintf_chk@plt>
   156b4:	b	154b8 <__assert_fail@plt+0x43cc>
   156b8:	mov	r2, #5
   156bc:	ldr	r1, [pc, #256]	; 157c4 <__assert_fail@plt+0x46d8>
   156c0:	mov	r0, #0
   156c4:	bl	10ee8 <dcgettext@plt>
   156c8:	ldr	r3, [r5]
   156cc:	ldr	r2, [r5, #32]
   156d0:	str	r2, [sp, #28]
   156d4:	ldr	r2, [r5, #28]
   156d8:	str	r2, [sp, #24]
   156dc:	ldr	r2, [r5, #24]
   156e0:	str	r2, [sp, #20]
   156e4:	ldr	r2, [r5, #20]
   156e8:	str	r2, [sp, #16]
   156ec:	ldr	r2, [r5, #16]
   156f0:	str	r2, [sp, #12]
   156f4:	ldr	r2, [r5, #12]
   156f8:	str	r2, [sp, #8]
   156fc:	ldr	r2, [r5, #8]
   15700:	str	r2, [sp, #4]
   15704:	ldr	r2, [r5, #4]
   15708:	str	r2, [sp]
   1570c:	mov	r2, r0
   15710:	mov	r1, #1
   15714:	mov	r0, r4
   15718:	bl	1102c <__fprintf_chk@plt>
   1571c:	b	154b8 <__assert_fail@plt+0x43cc>
   15720:	mov	r2, #5
   15724:	ldr	r1, [pc, #156]	; 157c8 <__assert_fail@plt+0x46dc>
   15728:	mov	r0, #0
   1572c:	bl	10ee8 <dcgettext@plt>
   15730:	ldr	r3, [r5]
   15734:	ldr	r2, [r5, #32]
   15738:	str	r2, [sp, #28]
   1573c:	ldr	r2, [r5, #28]
   15740:	str	r2, [sp, #24]
   15744:	ldr	r2, [r5, #24]
   15748:	str	r2, [sp, #20]
   1574c:	ldr	r2, [r5, #20]
   15750:	str	r2, [sp, #16]
   15754:	ldr	r2, [r5, #16]
   15758:	str	r2, [sp, #12]
   1575c:	ldr	r2, [r5, #12]
   15760:	str	r2, [sp, #8]
   15764:	ldr	r2, [r5, #8]
   15768:	str	r2, [sp, #4]
   1576c:	ldr	r2, [r5, #4]
   15770:	str	r2, [sp]
   15774:	mov	r2, r0
   15778:	mov	r1, #1
   1577c:	mov	r0, r4
   15780:	bl	1102c <__fprintf_chk@plt>
   15784:	b	154b8 <__assert_fail@plt+0x43cc>
   15788:	andeq	r8, r1, r8, lsr #12
   1578c:	andeq	r8, r1, ip, lsr r6
   15790:	andeq	r0, r0, r6, ror #15
   15794:	andeq	r8, r1, r4, lsl r9
   15798:	andeq	r8, r1, r0, asr #12
   1579c:	andeq	r8, r1, ip, ror #13
   157a0:	andeq	r8, r1, r4, lsr r6
   157a4:	andeq	r8, r1, r0, lsl r7
   157a8:	andeq	r8, r1, r0, lsr #14
   157ac:	andeq	r8, r1, r8, lsr r7
   157b0:	andeq	r8, r1, r4, asr r7
   157b4:	andeq	r8, r1, r4, ror r7
   157b8:	muleq	r1, r8, r7
   157bc:	andeq	r8, r1, r0, asr #15
   157c0:	andeq	r8, r1, ip, ror #15
   157c4:	andeq	r8, r1, ip, lsl r8
   157c8:	andeq	r8, r1, r0, asr r8
   157cc:	push	{r4, r5, lr}
   157d0:	sub	sp, sp, #12
   157d4:	ldr	r5, [sp, #24]
   157d8:	ldr	ip, [r5]
   157dc:	cmp	ip, #0
   157e0:	beq	15810 <__assert_fail@plt+0x4724>
   157e4:	mov	lr, r5
   157e8:	mov	ip, #0
   157ec:	add	ip, ip, #1
   157f0:	ldr	r4, [lr, #4]!
   157f4:	cmp	r4, #0
   157f8:	bne	157ec <__assert_fail@plt+0x4700>
   157fc:	str	ip, [sp, #4]
   15800:	str	r5, [sp]
   15804:	bl	153ac <__assert_fail@plt+0x42c0>
   15808:	add	sp, sp, #12
   1580c:	pop	{r4, r5, pc}
   15810:	mov	ip, #0
   15814:	b	157fc <__assert_fail@plt+0x4710>
   15818:	push	{r4, r5, lr}
   1581c:	sub	sp, sp, #52	; 0x34
   15820:	ldr	r4, [sp, #64]	; 0x40
   15824:	sub	r4, r4, #4
   15828:	add	r5, sp, #4
   1582c:	mov	ip, #0
   15830:	ldr	lr, [r4, #4]!
   15834:	str	lr, [r5, #4]!
   15838:	cmp	lr, #0
   1583c:	beq	1584c <__assert_fail@plt+0x4760>
   15840:	add	ip, ip, #1
   15844:	cmp	ip, #10
   15848:	bne	15830 <__assert_fail@plt+0x4744>
   1584c:	str	ip, [sp, #4]
   15850:	add	ip, sp, #8
   15854:	str	ip, [sp]
   15858:	bl	153ac <__assert_fail@plt+0x42c0>
   1585c:	add	sp, sp, #52	; 0x34
   15860:	pop	{r4, r5, pc}
   15864:	push	{r3}		; (str r3, [sp, #-4]!)
   15868:	push	{lr}		; (str lr, [sp, #-4]!)
   1586c:	sub	sp, sp, #16
   15870:	add	r3, sp, #24
   15874:	str	r3, [sp, #12]
   15878:	str	r3, [sp]
   1587c:	ldr	r3, [sp, #20]
   15880:	bl	15818 <__assert_fail@plt+0x472c>
   15884:	add	sp, sp, #16
   15888:	pop	{lr}		; (ldr lr, [sp], #4)
   1588c:	add	sp, sp, #4
   15890:	bx	lr
   15894:	push	{r4, lr}
   15898:	ldr	r3, [pc, #112]	; 15910 <__assert_fail@plt+0x4824>
   1589c:	ldr	r1, [r3]
   158a0:	mov	r0, #10
   158a4:	bl	10edc <fputc_unlocked@plt>
   158a8:	mov	r2, #5
   158ac:	ldr	r1, [pc, #96]	; 15914 <__assert_fail@plt+0x4828>
   158b0:	mov	r0, #0
   158b4:	bl	10ee8 <dcgettext@plt>
   158b8:	ldr	r2, [pc, #88]	; 15918 <__assert_fail@plt+0x482c>
   158bc:	mov	r1, r0
   158c0:	mov	r0, #1
   158c4:	bl	11014 <__printf_chk@plt>
   158c8:	mov	r2, #5
   158cc:	ldr	r1, [pc, #72]	; 1591c <__assert_fail@plt+0x4830>
   158d0:	mov	r0, #0
   158d4:	bl	10ee8 <dcgettext@plt>
   158d8:	ldr	r3, [pc, #64]	; 15920 <__assert_fail@plt+0x4834>
   158dc:	ldr	r2, [pc, #64]	; 15924 <__assert_fail@plt+0x4838>
   158e0:	mov	r1, r0
   158e4:	mov	r0, #1
   158e8:	bl	11014 <__printf_chk@plt>
   158ec:	mov	r2, #5
   158f0:	ldr	r1, [pc, #48]	; 15928 <__assert_fail@plt+0x483c>
   158f4:	mov	r0, #0
   158f8:	bl	10ee8 <dcgettext@plt>
   158fc:	ldr	r2, [pc, #40]	; 1592c <__assert_fail@plt+0x4840>
   15900:	mov	r1, r0
   15904:	mov	r0, #1
   15908:	bl	11014 <__printf_chk@plt>
   1590c:	pop	{r4, pc}
   15910:	andeq	r9, r2, ip, ror r1
   15914:	andeq	r8, r1, ip, lsl #17
   15918:	andeq	r8, r1, r0, lsr #17
   1591c:			; <UNDEFINED> instruction: 0x000188b8
   15920:	andeq	r8, r1, r8, lsr #4
   15924:	andeq	r8, r1, r0, asr r2
   15928:	andeq	r8, r1, ip, asr #17
   1592c:	strdeq	r8, [r1], -r4
   15930:	push	{r4, lr}
   15934:	bl	16b78 <__assert_fail@plt+0x5a8c>
   15938:	cmp	r0, #0
   1593c:	popne	{r4, pc}
   15940:	bl	15ed4 <__assert_fail@plt+0x4de8>
   15944:	push	{r4, lr}
   15948:	bl	16b78 <__assert_fail@plt+0x5a8c>
   1594c:	cmp	r0, #0
   15950:	popne	{r4, pc}
   15954:	bl	15ed4 <__assert_fail@plt+0x4de8>
   15958:	push	{r4, lr}
   1595c:	bl	15930 <__assert_fail@plt+0x4844>
   15960:	pop	{r4, pc}
   15964:	push	{r4, r5, r6, lr}
   15968:	mov	r5, r0
   1596c:	mov	r4, r1
   15970:	bl	16ba8 <__assert_fail@plt+0x5abc>
   15974:	cmp	r0, #0
   15978:	popne	{r4, r5, r6, pc}
   1597c:	adds	r4, r4, #0
   15980:	movne	r4, #1
   15984:	cmp	r5, #0
   15988:	orreq	r4, r4, #1
   1598c:	cmp	r4, #0
   15990:	popeq	{r4, r5, r6, pc}
   15994:	bl	15ed4 <__assert_fail@plt+0x4de8>
   15998:	push	{r4, lr}
   1599c:	cmp	r1, #0
   159a0:	orreq	r1, r1, #1
   159a4:	bl	16ba8 <__assert_fail@plt+0x5abc>
   159a8:	cmp	r0, #0
   159ac:	popne	{r4, pc}
   159b0:	bl	15ed4 <__assert_fail@plt+0x4de8>
   159b4:	push	{r4, r5, r6, lr}
   159b8:	mov	r6, r0
   159bc:	mov	r5, r1
   159c0:	mov	r4, r2
   159c4:	bl	170b4 <__assert_fail@plt+0x5fc8>
   159c8:	cmp	r0, #0
   159cc:	popne	{r4, r5, r6, pc}
   159d0:	cmp	r6, #0
   159d4:	beq	159e4 <__assert_fail@plt+0x48f8>
   159d8:	cmp	r5, #0
   159dc:	cmpne	r4, #0
   159e0:	popeq	{r4, r5, r6, pc}
   159e4:	bl	15ed4 <__assert_fail@plt+0x4de8>
   159e8:	push	{r4, lr}
   159ec:	bl	159b4 <__assert_fail@plt+0x48c8>
   159f0:	pop	{r4, pc}
   159f4:	push	{r4, lr}
   159f8:	mov	ip, r1
   159fc:	mov	r3, r2
   15a00:	cmp	r2, #0
   15a04:	cmpne	r1, #0
   15a08:	moveq	r3, #1
   15a0c:	moveq	ip, r3
   15a10:	mov	r2, r3
   15a14:	mov	r1, ip
   15a18:	bl	170b4 <__assert_fail@plt+0x5fc8>
   15a1c:	cmp	r0, #0
   15a20:	popne	{r4, pc}
   15a24:	bl	15ed4 <__assert_fail@plt+0x4de8>
   15a28:	push	{r4, lr}
   15a2c:	mov	r2, r1
   15a30:	mov	r1, r0
   15a34:	mov	r0, #0
   15a38:	bl	159b4 <__assert_fail@plt+0x48c8>
   15a3c:	pop	{r4, pc}
   15a40:	push	{r4, lr}
   15a44:	mov	r2, r1
   15a48:	mov	r1, r0
   15a4c:	mov	r0, #0
   15a50:	bl	159f4 <__assert_fail@plt+0x4908>
   15a54:	pop	{r4, pc}
   15a58:	push	{r4, r5, r6, r7, r8, lr}
   15a5c:	mov	r5, r1
   15a60:	mov	r6, r2
   15a64:	ldr	r4, [r1]
   15a68:	subs	r7, r0, #0
   15a6c:	beq	15a88 <__assert_fail@plt+0x499c>
   15a70:	lsr	r2, r4, #1
   15a74:	add	r3, r2, #1
   15a78:	mvn	r3, r3
   15a7c:	cmp	r4, r3
   15a80:	bls	15aac <__assert_fail@plt+0x49c0>
   15a84:	bl	15ed4 <__assert_fail@plt+0x4de8>
   15a88:	cmp	r4, #0
   15a8c:	bne	15ab4 <__assert_fail@plt+0x49c8>
   15a90:	mov	r1, r2
   15a94:	mov	r0, #64	; 0x40
   15a98:	bl	17100 <__assert_fail@plt+0x6014>
   15a9c:	cmp	r0, #0
   15aa0:	movne	r4, r0
   15aa4:	addeq	r4, r0, #1
   15aa8:	b	15ab4 <__assert_fail@plt+0x49c8>
   15aac:	add	r4, r4, #1
   15ab0:	add	r4, r4, r2
   15ab4:	mov	r2, r6
   15ab8:	mov	r1, r4
   15abc:	mov	r0, r7
   15ac0:	bl	159b4 <__assert_fail@plt+0x48c8>
   15ac4:	str	r4, [r5]
   15ac8:	pop	{r4, r5, r6, r7, r8, pc}
   15acc:	push	{r4, lr}
   15ad0:	mov	r2, #1
   15ad4:	bl	15a58 <__assert_fail@plt+0x496c>
   15ad8:	pop	{r4, pc}
   15adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ae0:	sub	sp, sp, #12
   15ae4:	mov	fp, r0
   15ae8:	mov	sl, r1
   15aec:	mov	r9, r2
   15af0:	mov	r7, r3
   15af4:	ldr	r6, [sp, #48]	; 0x30
   15af8:	ldr	r5, [r1]
   15afc:	asrs	r4, r5, #1
   15b00:	bmi	15c5c <__assert_fail@plt+0x4b70>
   15b04:	cmp	r5, #0
   15b08:	blt	15c70 <__assert_fail@plt+0x4b84>
   15b0c:	mvn	r3, #-2147483648	; 0x80000000
   15b10:	sub	r3, r3, r4
   15b14:	cmp	r5, r3
   15b18:	movle	r3, #0
   15b1c:	movgt	r3, #1
   15b20:	cmp	r3, #0
   15b24:	addeq	r4, r4, r5
   15b28:	mvnne	r4, #-2147483648	; 0x80000000
   15b2c:	mvn	r8, r7
   15b30:	lsr	r8, r8, #31
   15b34:	cmp	r7, r4
   15b38:	movge	r3, #0
   15b3c:	andlt	r3, r8, #1
   15b40:	cmp	r3, #0
   15b44:	movne	r4, r7
   15b48:	cmp	r6, #0
   15b4c:	blt	15c84 <__assert_fail@plt+0x4b98>
   15b50:	cmp	r6, #0
   15b54:	beq	15d30 <__assert_fail@plt+0x4c44>
   15b58:	cmp	r4, #0
   15b5c:	blt	15ce0 <__assert_fail@plt+0x4bf4>
   15b60:	mov	r1, r6
   15b64:	mvn	r0, #-2147483648	; 0x80000000
   15b68:	bl	1730c <__assert_fail@plt+0x6220>
   15b6c:	cmp	r0, r4
   15b70:	movge	r0, #0
   15b74:	movlt	r0, #1
   15b78:	cmp	r0, #0
   15b7c:	mvnne	r3, #-2147483648	; 0x80000000
   15b80:	strne	r3, [sp, #4]
   15b84:	beq	15d18 <__assert_fail@plt+0x4c2c>
   15b88:	mov	r1, r6
   15b8c:	ldr	r0, [sp, #4]
   15b90:	bl	1730c <__assert_fail@plt+0x6220>
   15b94:	mov	r4, r0
   15b98:	mov	r1, r6
   15b9c:	ldr	r0, [sp, #4]
   15ba0:	bl	1752c <__assert_fail@plt+0x6440>
   15ba4:	ldr	r3, [sp, #4]
   15ba8:	sub	r1, r3, r1
   15bac:	cmp	fp, #0
   15bb0:	moveq	r3, #0
   15bb4:	streq	r3, [sl]
   15bb8:	sub	r3, r4, r5
   15bbc:	cmp	r3, r9
   15bc0:	bge	15c48 <__assert_fail@plt+0x4b5c>
   15bc4:	cmp	r9, #0
   15bc8:	blt	15d3c <__assert_fail@plt+0x4c50>
   15bcc:	cmp	r5, #0
   15bd0:	blt	15d50 <__assert_fail@plt+0x4c64>
   15bd4:	mvn	r3, #-2147483648	; 0x80000000
   15bd8:	sub	r3, r3, r9
   15bdc:	cmp	r5, r3
   15be0:	movle	r3, #0
   15be4:	movgt	r3, #1
   15be8:	cmp	r3, #0
   15bec:	bne	15df8 <__assert_fail@plt+0x4d0c>
   15bf0:	add	r5, r5, r9
   15bf4:	mov	r4, r5
   15bf8:	cmp	r7, r5
   15bfc:	movge	r7, #0
   15c00:	andlt	r7, r8, #1
   15c04:	cmp	r7, #0
   15c08:	bne	15df8 <__assert_fail@plt+0x4d0c>
   15c0c:	cmp	r6, #0
   15c10:	blt	15d64 <__assert_fail@plt+0x4c78>
   15c14:	cmp	r6, #0
   15c18:	beq	15c44 <__assert_fail@plt+0x4b58>
   15c1c:	cmp	r5, #0
   15c20:	blt	15dc0 <__assert_fail@plt+0x4cd4>
   15c24:	mov	r1, r6
   15c28:	mvn	r0, #-2147483648	; 0x80000000
   15c2c:	bl	1730c <__assert_fail@plt+0x6220>
   15c30:	cmp	r5, r0
   15c34:	movle	r0, #0
   15c38:	movgt	r0, #1
   15c3c:	cmp	r0, #0
   15c40:	bne	15df8 <__assert_fail@plt+0x4d0c>
   15c44:	mul	r1, r5, r6
   15c48:	mov	r0, fp
   15c4c:	bl	15964 <__assert_fail@plt+0x4878>
   15c50:	str	r4, [sl]
   15c54:	add	sp, sp, #12
   15c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c5c:	rsb	r3, r4, #-2147483648	; 0x80000000
   15c60:	cmp	r5, r3
   15c64:	movge	r3, #0
   15c68:	movlt	r3, #1
   15c6c:	b	15b20 <__assert_fail@plt+0x4a34>
   15c70:	rsb	r3, r5, #-2147483648	; 0x80000000
   15c74:	cmp	r4, r3
   15c78:	movge	r3, #0
   15c7c:	movlt	r3, #1
   15c80:	b	15b20 <__assert_fail@plt+0x4a34>
   15c84:	cmp	r4, #0
   15c88:	blt	15cb0 <__assert_fail@plt+0x4bc4>
   15c8c:	cmn	r6, #1
   15c90:	beq	15ccc <__assert_fail@plt+0x4be0>
   15c94:	mov	r1, r6
   15c98:	mov	r0, #-2147483648	; 0x80000000
   15c9c:	bl	1730c <__assert_fail@plt+0x6220>
   15ca0:	cmp	r0, r4
   15ca4:	movge	r0, #0
   15ca8:	movlt	r0, #1
   15cac:	b	15b78 <__assert_fail@plt+0x4a8c>
   15cb0:	mov	r1, r6
   15cb4:	mvn	r0, #-2147483648	; 0x80000000
   15cb8:	bl	1730c <__assert_fail@plt+0x6220>
   15cbc:	cmp	r0, r4
   15cc0:	movle	r0, #0
   15cc4:	movgt	r0, #1
   15cc8:	b	15b78 <__assert_fail@plt+0x4a8c>
   15ccc:	add	r0, r4, #-2147483648	; 0x80000000
   15cd0:	cmp	r0, #0
   15cd4:	movle	r0, #0
   15cd8:	movgt	r0, #1
   15cdc:	b	15b78 <__assert_fail@plt+0x4a8c>
   15ce0:	cmn	r4, #1
   15ce4:	beq	15d04 <__assert_fail@plt+0x4c18>
   15ce8:	mov	r1, r4
   15cec:	mov	r0, #-2147483648	; 0x80000000
   15cf0:	bl	1730c <__assert_fail@plt+0x6220>
   15cf4:	cmp	r6, r0
   15cf8:	movle	r0, #0
   15cfc:	movgt	r0, #1
   15d00:	b	15b78 <__assert_fail@plt+0x4a8c>
   15d04:	add	r0, r6, #-2147483648	; 0x80000000
   15d08:	cmp	r0, #0
   15d0c:	movle	r0, #0
   15d10:	movgt	r0, #1
   15d14:	b	15b78 <__assert_fail@plt+0x4a8c>
   15d18:	mul	r1, r6, r4
   15d1c:	cmp	r1, #63	; 0x3f
   15d20:	movle	r3, #64	; 0x40
   15d24:	strle	r3, [sp, #4]
   15d28:	bgt	15bac <__assert_fail@plt+0x4ac0>
   15d2c:	b	15b88 <__assert_fail@plt+0x4a9c>
   15d30:	mov	r3, #64	; 0x40
   15d34:	str	r3, [sp, #4]
   15d38:	b	15b88 <__assert_fail@plt+0x4a9c>
   15d3c:	rsb	r3, r9, #-2147483648	; 0x80000000
   15d40:	cmp	r5, r3
   15d44:	movge	r3, #0
   15d48:	movlt	r3, #1
   15d4c:	b	15be8 <__assert_fail@plt+0x4afc>
   15d50:	rsb	r3, r5, #-2147483648	; 0x80000000
   15d54:	cmp	r9, r3
   15d58:	movge	r3, #0
   15d5c:	movlt	r3, #1
   15d60:	b	15be8 <__assert_fail@plt+0x4afc>
   15d64:	cmp	r5, #0
   15d68:	blt	15d90 <__assert_fail@plt+0x4ca4>
   15d6c:	cmn	r6, #1
   15d70:	beq	15dac <__assert_fail@plt+0x4cc0>
   15d74:	mov	r1, r6
   15d78:	mov	r0, #-2147483648	; 0x80000000
   15d7c:	bl	1730c <__assert_fail@plt+0x6220>
   15d80:	cmp	r5, r0
   15d84:	movle	r0, #0
   15d88:	movgt	r0, #1
   15d8c:	b	15c3c <__assert_fail@plt+0x4b50>
   15d90:	mov	r1, r6
   15d94:	mvn	r0, #-2147483648	; 0x80000000
   15d98:	bl	1730c <__assert_fail@plt+0x6220>
   15d9c:	cmp	r5, r0
   15da0:	movge	r0, #0
   15da4:	movlt	r0, #1
   15da8:	b	15c3c <__assert_fail@plt+0x4b50>
   15dac:	add	r0, r5, #-2147483648	; 0x80000000
   15db0:	cmp	r0, #0
   15db4:	movle	r0, #0
   15db8:	movgt	r0, #1
   15dbc:	b	15c3c <__assert_fail@plt+0x4b50>
   15dc0:	cmn	r5, #1
   15dc4:	beq	15de4 <__assert_fail@plt+0x4cf8>
   15dc8:	mov	r1, r5
   15dcc:	mov	r0, #-2147483648	; 0x80000000
   15dd0:	bl	1730c <__assert_fail@plt+0x6220>
   15dd4:	cmp	r6, r0
   15dd8:	movle	r0, #0
   15ddc:	movgt	r0, #1
   15de0:	b	15c3c <__assert_fail@plt+0x4b50>
   15de4:	add	r0, r6, #-2147483648	; 0x80000000
   15de8:	cmp	r0, #0
   15dec:	movle	r0, #0
   15df0:	movgt	r0, #1
   15df4:	b	15c3c <__assert_fail@plt+0x4b50>
   15df8:	bl	15ed4 <__assert_fail@plt+0x4de8>
   15dfc:	push	{r4, lr}
   15e00:	bl	16b28 <__assert_fail@plt+0x5a3c>
   15e04:	cmp	r0, #0
   15e08:	popne	{r4, pc}
   15e0c:	bl	15ed4 <__assert_fail@plt+0x4de8>
   15e10:	push	{r4, lr}
   15e14:	mov	r1, #1
   15e18:	bl	15dfc <__assert_fail@plt+0x4d10>
   15e1c:	pop	{r4, pc}
   15e20:	push	{r4, lr}
   15e24:	bl	16b28 <__assert_fail@plt+0x5a3c>
   15e28:	cmp	r0, #0
   15e2c:	popne	{r4, pc}
   15e30:	bl	15ed4 <__assert_fail@plt+0x4de8>
   15e34:	push	{r4, lr}
   15e38:	mov	r1, #1
   15e3c:	bl	15e20 <__assert_fail@plt+0x4d34>
   15e40:	pop	{r4, pc}
   15e44:	push	{r4, r5, r6, lr}
   15e48:	mov	r5, r0
   15e4c:	mov	r4, r1
   15e50:	mov	r0, r1
   15e54:	bl	15930 <__assert_fail@plt+0x4844>
   15e58:	mov	r2, r4
   15e5c:	mov	r1, r5
   15e60:	bl	10ea0 <memcpy@plt>
   15e64:	pop	{r4, r5, r6, pc}
   15e68:	push	{r4, r5, r6, lr}
   15e6c:	mov	r5, r0
   15e70:	mov	r4, r1
   15e74:	mov	r0, r1
   15e78:	bl	15944 <__assert_fail@plt+0x4858>
   15e7c:	mov	r2, r4
   15e80:	mov	r1, r5
   15e84:	bl	10ea0 <memcpy@plt>
   15e88:	pop	{r4, r5, r6, pc}
   15e8c:	push	{r4, r5, r6, lr}
   15e90:	mov	r5, r0
   15e94:	mov	r4, r1
   15e98:	add	r0, r1, #1
   15e9c:	bl	15944 <__assert_fail@plt+0x4858>
   15ea0:	mov	r2, #0
   15ea4:	strb	r2, [r0, r4]
   15ea8:	mov	r2, r4
   15eac:	mov	r1, r5
   15eb0:	bl	10ea0 <memcpy@plt>
   15eb4:	pop	{r4, r5, r6, pc}
   15eb8:	push	{r4, lr}
   15ebc:	mov	r4, r0
   15ec0:	bl	10fd8 <strlen@plt>
   15ec4:	add	r1, r0, #1
   15ec8:	mov	r0, r4
   15ecc:	bl	15e44 <__assert_fail@plt+0x4d58>
   15ed0:	pop	{r4, pc}
   15ed4:	push	{r4, lr}
   15ed8:	ldr	r3, [pc, #40]	; 15f08 <__assert_fail@plt+0x4e1c>
   15edc:	ldr	r4, [r3]
   15ee0:	mov	r2, #5
   15ee4:	ldr	r1, [pc, #32]	; 15f0c <__assert_fail@plt+0x4e20>
   15ee8:	mov	r0, #0
   15eec:	bl	10ee8 <dcgettext@plt>
   15ef0:	mov	r3, r0
   15ef4:	ldr	r2, [pc, #20]	; 15f10 <__assert_fail@plt+0x4e24>
   15ef8:	mov	r1, #0
   15efc:	mov	r0, r4
   15f00:	bl	10f54 <error@plt>
   15f04:	bl	110d4 <abort@plt>
   15f08:	andeq	r9, r2, ip, lsl r1
   15f0c:	andeq	r8, r1, r4, asr #18
   15f10:	andeq	r8, r1, r0, lsl #10
   15f14:	push	{r4, r5, r6, r7, r8, lr}
   15f18:	sub	sp, sp, #8
   15f1c:	mov	r4, r0
   15f20:	mov	r6, r1
   15f24:	mov	r8, r2
   15f28:	mov	r7, r3
   15f2c:	mov	r2, #5
   15f30:	ldr	r1, [pc, #156]	; 15fd4 <__assert_fail@plt+0x4ee8>
   15f34:	mov	r0, #0
   15f38:	bl	10ee8 <dcgettext@plt>
   15f3c:	mov	r2, r0
   15f40:	mov	r1, r4
   15f44:	mov	r0, #0
   15f48:	bl	10f54 <error@plt>
   15f4c:	mov	r2, #5
   15f50:	ldr	r1, [pc, #128]	; 15fd8 <__assert_fail@plt+0x4eec>
   15f54:	mov	r0, #0
   15f58:	bl	10ee8 <dcgettext@plt>
   15f5c:	mov	r2, r0
   15f60:	mov	r1, #0
   15f64:	mov	r0, r1
   15f68:	bl	10f54 <error@plt>
   15f6c:	ldr	r3, [pc, #104]	; 15fdc <__assert_fail@plt+0x4ef0>
   15f70:	ldr	r4, [r3]
   15f74:	mov	r2, #5
   15f78:	ldr	r1, [pc, #96]	; 15fe0 <__assert_fail@plt+0x4ef4>
   15f7c:	mov	r0, #0
   15f80:	bl	10ee8 <dcgettext@plt>
   15f84:	mov	r5, r0
   15f88:	mov	r3, r8
   15f8c:	mov	r2, r6
   15f90:	mov	r1, #8
   15f94:	mov	r0, #0
   15f98:	bl	15070 <__assert_fail@plt+0x3f84>
   15f9c:	mov	r6, r0
   15fa0:	ldr	r3, [sp, #32]
   15fa4:	mov	r2, r7
   15fa8:	mov	r1, #8
   15fac:	mov	r0, #1
   15fb0:	bl	15070 <__assert_fail@plt+0x3f84>
   15fb4:	str	r0, [sp]
   15fb8:	mov	r3, r6
   15fbc:	mov	r2, r5
   15fc0:	mov	r1, #0
   15fc4:	mov	r0, r4
   15fc8:	bl	10f54 <error@plt>
   15fcc:	add	sp, sp, #8
   15fd0:	pop	{r4, r5, r6, r7, r8, pc}
   15fd4:	andeq	r8, r1, r8, asr r9
   15fd8:	andeq	r8, r1, r4, ror r9
   15fdc:	andeq	r9, r2, ip, lsl r1
   15fe0:	andeq	r8, r1, r0, lsr #19
   15fe4:	push	{r4, r5, r6, r7, r8, lr}
   15fe8:	sub	sp, sp, #8
   15fec:	mov	r5, r0
   15ff0:	mov	r6, r1
   15ff4:	mov	r7, r2
   15ff8:	mov	r8, r3
   15ffc:	bl	16fd8 <__assert_fail@plt+0x5eec>
   16000:	mov	r4, r0
   16004:	bl	10ff0 <__errno_location@plt>
   16008:	ldr	r0, [r0]
   1600c:	cmp	r0, #0
   16010:	bne	16020 <__assert_fail@plt+0x4f34>
   16014:	mov	r0, r4
   16018:	add	sp, sp, #8
   1601c:	pop	{r4, r5, r6, r7, r8, pc}
   16020:	str	r8, [sp]
   16024:	mov	r3, r7
   16028:	mov	r2, r6
   1602c:	mov	r1, r5
   16030:	bl	15f14 <__assert_fail@plt+0x4e28>
   16034:	b	16014 <__assert_fail@plt+0x4f28>
   16038:	push	{r4, r5, r6, r7, r8, lr}
   1603c:	sub	sp, sp, #8
   16040:	mov	r6, r0
   16044:	mov	r7, r1
   16048:	mov	r8, r2
   1604c:	mov	r4, r3
   16050:	bl	17054 <__assert_fail@plt+0x5f68>
   16054:	mov	r5, r0
   16058:	bl	10ff0 <__errno_location@plt>
   1605c:	ldr	r0, [r0]
   16060:	cmp	r0, #0
   16064:	bne	16074 <__assert_fail@plt+0x4f88>
   16068:	mov	r0, r5
   1606c:	add	sp, sp, #8
   16070:	pop	{r4, r5, r6, r7, r8, pc}
   16074:	sub	r4, r4, #1
   16078:	str	r4, [sp]
   1607c:	mov	r3, r8
   16080:	sub	r2, r7, #1
   16084:	mov	r1, r6
   16088:	bl	15f14 <__assert_fail@plt+0x4e28>
   1608c:	b	16068 <__assert_fail@plt+0x4f7c>
   16090:	push	{r4, r5, r6, lr}
   16094:	mov	r5, r0
   16098:	subs	r4, r1, #0
   1609c:	blt	160ec <__assert_fail@plt+0x5000>
   160a0:	cmp	r4, #0
   160a4:	moveq	r0, #0
   160a8:	beq	160c8 <__assert_fail@plt+0x4fdc>
   160ac:	mov	r1, r4
   160b0:	mvn	r0, #0
   160b4:	bl	17100 <__assert_fail@plt+0x6014>
   160b8:	ldr	r3, [r5]
   160bc:	cmp	r0, r3
   160c0:	movcs	r0, #0
   160c4:	movcc	r0, #1
   160c8:	cmp	r0, #0
   160cc:	mvnne	r3, #0
   160d0:	strne	r3, [r5]
   160d4:	movne	r0, #1
   160d8:	ldreq	r3, [r5]
   160dc:	muleq	r4, r4, r3
   160e0:	streq	r4, [r5]
   160e4:	moveq	r0, #0
   160e8:	pop	{r4, r5, r6, pc}
   160ec:	mov	r1, r4
   160f0:	mov	r0, #0
   160f4:	bl	1730c <__assert_fail@plt+0x6220>
   160f8:	ldr	r3, [r5]
   160fc:	cmp	r0, r3
   16100:	movcs	r0, #0
   16104:	movcc	r0, #1
   16108:	b	160c8 <__assert_fail@plt+0x4fdc>
   1610c:	push	{r4, r5, r6, r7, r8, lr}
   16110:	subs	r4, r2, #0
   16114:	beq	16144 <__assert_fail@plt+0x5058>
   16118:	mov	r7, r1
   1611c:	mov	r6, r0
   16120:	mov	r5, #0
   16124:	mov	r1, r7
   16128:	mov	r0, r6
   1612c:	bl	16090 <__assert_fail@plt+0x4fa4>
   16130:	orr	r5, r5, r0
   16134:	subs	r4, r4, #1
   16138:	bne	16124 <__assert_fail@plt+0x5038>
   1613c:	mov	r0, r5
   16140:	pop	{r4, r5, r6, r7, r8, pc}
   16144:	mov	r5, #0
   16148:	b	1613c <__assert_fail@plt+0x5050>
   1614c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16150:	sub	sp, sp, #12
   16154:	cmp	r2, #36	; 0x24
   16158:	bhi	16198 <__assert_fail@plt+0x50ac>
   1615c:	mov	r5, r0
   16160:	mov	r6, r1
   16164:	mov	r7, r2
   16168:	mov	r9, r3
   1616c:	cmp	r1, #0
   16170:	addeq	r6, sp, #4
   16174:	bl	10ff0 <__errno_location@plt>
   16178:	mov	r8, r0
   1617c:	mov	r3, #0
   16180:	str	r3, [r0]
   16184:	ldrb	r4, [r5]
   16188:	bl	10fb4 <__ctype_b_loc@plt>
   1618c:	ldr	r1, [r0]
   16190:	mov	r2, r5
   16194:	b	161b0 <__assert_fail@plt+0x50c4>
   16198:	ldr	r3, [pc, #1044]	; 165b4 <__assert_fail@plt+0x54c8>
   1619c:	mov	r2, #85	; 0x55
   161a0:	ldr	r1, [pc, #1040]	; 165b8 <__assert_fail@plt+0x54cc>
   161a4:	ldr	r0, [pc, #1040]	; 165bc <__assert_fail@plt+0x54d0>
   161a8:	bl	110ec <__assert_fail@plt>
   161ac:	ldrb	r4, [r2, #1]!
   161b0:	lsl	r3, r4, #1
   161b4:	ldrh	r3, [r1, r3]
   161b8:	tst	r3, #8192	; 0x2000
   161bc:	bne	161ac <__assert_fail@plt+0x50c0>
   161c0:	cmp	r4, #45	; 0x2d
   161c4:	moveq	r4, #4
   161c8:	bne	161d8 <__assert_fail@plt+0x50ec>
   161cc:	mov	r0, r4
   161d0:	add	sp, sp, #12
   161d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   161d8:	mov	r2, r7
   161dc:	mov	r1, r6
   161e0:	mov	r0, r5
   161e4:	bl	10fcc <strtoul@plt>
   161e8:	str	r0, [sp]
   161ec:	ldr	r7, [r6]
   161f0:	cmp	r5, r7
   161f4:	beq	16218 <__assert_fail@plt+0x512c>
   161f8:	ldr	r3, [r8]
   161fc:	cmp	r3, #0
   16200:	beq	1625c <__assert_fail@plt+0x5170>
   16204:	cmp	r3, #34	; 0x22
   16208:	moveq	r4, #1
   1620c:	beq	16260 <__assert_fail@plt+0x5174>
   16210:	mov	r4, #4
   16214:	b	161cc <__assert_fail@plt+0x50e0>
   16218:	ldr	r3, [sp, #40]	; 0x28
   1621c:	cmp	r3, #0
   16220:	moveq	r4, #4
   16224:	beq	161cc <__assert_fail@plt+0x50e0>
   16228:	ldrb	r1, [r7]
   1622c:	cmp	r1, #0
   16230:	moveq	r4, #4
   16234:	beq	161cc <__assert_fail@plt+0x50e0>
   16238:	mov	r0, r3
   1623c:	bl	10fe4 <strchr@plt>
   16240:	cmp	r0, #0
   16244:	moveq	r4, #4
   16248:	beq	161cc <__assert_fail@plt+0x50e0>
   1624c:	mov	r3, #1
   16250:	str	r3, [sp]
   16254:	mov	r4, #0
   16258:	b	16270 <__assert_fail@plt+0x5184>
   1625c:	mov	r4, #0
   16260:	ldr	r3, [sp, #40]	; 0x28
   16264:	cmp	r3, #0
   16268:	streq	r0, [r9]
   1626c:	beq	161cc <__assert_fail@plt+0x50e0>
   16270:	ldrb	r5, [r7]
   16274:	cmp	r5, #0
   16278:	beq	164f0 <__assert_fail@plt+0x5404>
   1627c:	mov	r1, r5
   16280:	ldr	r0, [sp, #40]	; 0x28
   16284:	bl	10fe4 <strchr@plt>
   16288:	cmp	r0, #0
   1628c:	beq	16360 <__assert_fail@plt+0x5274>
   16290:	sub	r3, r5, #69	; 0x45
   16294:	cmp	r3, #47	; 0x2f
   16298:	ldrls	pc, [pc, r3, lsl #2]
   1629c:	b	163cc <__assert_fail@plt+0x52e0>
   162a0:	andeq	r6, r1, r0, ror r3
   162a4:	andeq	r6, r1, ip, asr #7
   162a8:	andeq	r6, r1, r0, ror r3
   162ac:	andeq	r6, r1, ip, asr #7
   162b0:	andeq	r6, r1, ip, asr #7
   162b4:	andeq	r6, r1, ip, asr #7
   162b8:	andeq	r6, r1, r0, ror r3
   162bc:	andeq	r6, r1, ip, asr #7
   162c0:	andeq	r6, r1, r0, ror r3
   162c4:	andeq	r6, r1, ip, asr #7
   162c8:	andeq	r6, r1, ip, asr #7
   162cc:	andeq	r6, r1, r0, ror r3
   162d0:	andeq	r6, r1, ip, asr #7
   162d4:	andeq	r6, r1, ip, asr #7
   162d8:	andeq	r6, r1, ip, asr #7
   162dc:	andeq	r6, r1, r0, ror r3
   162e0:	andeq	r6, r1, ip, asr #7
   162e4:	andeq	r6, r1, ip, asr #7
   162e8:	andeq	r6, r1, ip, asr #7
   162ec:	andeq	r6, r1, ip, asr #7
   162f0:	andeq	r6, r1, r0, ror r3
   162f4:	andeq	r6, r1, r0, ror r3
   162f8:	andeq	r6, r1, ip, asr #7
   162fc:	andeq	r6, r1, ip, asr #7
   16300:	andeq	r6, r1, ip, asr #7
   16304:	andeq	r6, r1, ip, asr #7
   16308:	andeq	r6, r1, ip, asr #7
   1630c:	andeq	r6, r1, ip, asr #7
   16310:	andeq	r6, r1, ip, asr #7
   16314:	andeq	r6, r1, ip, asr #7
   16318:	andeq	r6, r1, ip, asr #7
   1631c:	andeq	r6, r1, ip, asr #7
   16320:	andeq	r6, r1, ip, asr #7
   16324:	andeq	r6, r1, ip, asr #7
   16328:	andeq	r6, r1, r0, ror r3
   1632c:	andeq	r6, r1, ip, asr #7
   16330:	andeq	r6, r1, ip, asr #7
   16334:	andeq	r6, r1, ip, asr #7
   16338:	andeq	r6, r1, r0, ror r3
   1633c:	andeq	r6, r1, ip, asr #7
   16340:	andeq	r6, r1, r0, ror r3
   16344:	andeq	r6, r1, ip, asr #7
   16348:	andeq	r6, r1, ip, asr #7
   1634c:	andeq	r6, r1, ip, asr #7
   16350:	andeq	r6, r1, ip, asr #7
   16354:	andeq	r6, r1, ip, asr #7
   16358:	andeq	r6, r1, ip, asr #7
   1635c:	andeq	r6, r1, r0, ror r3
   16360:	ldr	r3, [sp]
   16364:	str	r3, [r9]
   16368:	orr	r4, r4, #2
   1636c:	b	161cc <__assert_fail@plt+0x50e0>
   16370:	mov	r1, #48	; 0x30
   16374:	ldr	r0, [sp, #40]	; 0x28
   16378:	bl	10fe4 <strchr@plt>
   1637c:	cmp	r0, #0
   16380:	beq	164bc <__assert_fail@plt+0x53d0>
   16384:	ldrb	r3, [r7, #1]
   16388:	cmp	r3, #68	; 0x44
   1638c:	beq	163a8 <__assert_fail@plt+0x52bc>
   16390:	cmp	r3, #105	; 0x69
   16394:	beq	163b4 <__assert_fail@plt+0x52c8>
   16398:	cmp	r3, #66	; 0x42
   1639c:	movne	r7, #1
   163a0:	movne	r1, #1024	; 0x400
   163a4:	bne	163d4 <__assert_fail@plt+0x52e8>
   163a8:	mov	r7, #2
   163ac:	mov	r1, #1000	; 0x3e8
   163b0:	b	163d4 <__assert_fail@plt+0x52e8>
   163b4:	ldrb	r7, [r7, #2]
   163b8:	cmp	r7, #66	; 0x42
   163bc:	movne	r7, #1
   163c0:	moveq	r7, #3
   163c4:	mov	r1, #1024	; 0x400
   163c8:	b	163d4 <__assert_fail@plt+0x52e8>
   163cc:	mov	r7, #1
   163d0:	mov	r1, #1024	; 0x400
   163d4:	sub	r5, r5, #66	; 0x42
   163d8:	cmp	r5, #53	; 0x35
   163dc:	ldrls	pc, [pc, r5, lsl #2]
   163e0:	b	1659c <__assert_fail@plt+0x54b0>
   163e4:	strdeq	r6, [r1], -ip
   163e8:	muleq	r1, ip, r5
   163ec:	muleq	r1, ip, r5
   163f0:	andeq	r6, r1, ip, lsl #10
   163f4:	muleq	r1, ip, r5
   163f8:	andeq	r6, r1, ip, lsl r5
   163fc:	muleq	r1, ip, r5
   16400:	muleq	r1, ip, r5
   16404:	muleq	r1, ip, r5
   16408:	andeq	r6, r1, ip, lsr #10
   1640c:	muleq	r1, ip, r5
   16410:	andeq	r6, r1, ip, lsr r5
   16414:	muleq	r1, ip, r5
   16418:	muleq	r1, ip, r5
   1641c:	andeq	r6, r1, ip, asr #10
   16420:	muleq	r1, ip, r5
   16424:	muleq	r1, ip, r5
   16428:	muleq	r1, ip, r5
   1642c:	andeq	r6, r1, ip, asr r5
   16430:	muleq	r1, ip, r5
   16434:	muleq	r1, ip, r5
   16438:	muleq	r1, ip, r5
   1643c:	muleq	r1, ip, r5
   16440:	andeq	r6, r1, ip, ror r5
   16444:	andeq	r6, r1, ip, lsl #11
   16448:	muleq	r1, ip, r5
   1644c:	muleq	r1, ip, r5
   16450:	muleq	r1, ip, r5
   16454:	muleq	r1, ip, r5
   16458:	muleq	r1, ip, r5
   1645c:	muleq	r1, ip, r5
   16460:	muleq	r1, ip, r5
   16464:	andeq	r6, r1, r8, asr #9
   16468:	andeq	r6, r1, ip, lsr #11
   1646c:	muleq	r1, ip, r5
   16470:	muleq	r1, ip, r5
   16474:	muleq	r1, ip, r5
   16478:	andeq	r6, r1, ip, lsl r5
   1647c:	muleq	r1, ip, r5
   16480:	muleq	r1, ip, r5
   16484:	muleq	r1, ip, r5
   16488:	andeq	r6, r1, ip, lsr #10
   1648c:	muleq	r1, ip, r5
   16490:	andeq	r6, r1, ip, lsr r5
   16494:	muleq	r1, ip, r5
   16498:	muleq	r1, ip, r5
   1649c:	muleq	r1, ip, r5
   164a0:	muleq	r1, ip, r5
   164a4:	muleq	r1, ip, r5
   164a8:	muleq	r1, ip, r5
   164ac:	andeq	r6, r1, ip, asr r5
   164b0:	muleq	r1, ip, r5
   164b4:	muleq	r1, ip, r5
   164b8:	andeq	r6, r1, ip, ror #10
   164bc:	mov	r7, #1
   164c0:	mov	r1, #1024	; 0x400
   164c4:	b	163d4 <__assert_fail@plt+0x52e8>
   164c8:	mov	r1, #512	; 0x200
   164cc:	mov	r0, sp
   164d0:	bl	16090 <__assert_fail@plt+0x4fa4>
   164d4:	orr	r4, r4, r0
   164d8:	ldr	r3, [r6]
   164dc:	add	r2, r3, r7
   164e0:	str	r2, [r6]
   164e4:	ldrb	r3, [r3, r7]
   164e8:	cmp	r3, #0
   164ec:	orrne	r4, r4, #2
   164f0:	ldr	r3, [sp]
   164f4:	str	r3, [r9]
   164f8:	b	161cc <__assert_fail@plt+0x50e0>
   164fc:	mov	r1, #1024	; 0x400
   16500:	mov	r0, sp
   16504:	bl	16090 <__assert_fail@plt+0x4fa4>
   16508:	b	164d4 <__assert_fail@plt+0x53e8>
   1650c:	mov	r2, #6
   16510:	mov	r0, sp
   16514:	bl	1610c <__assert_fail@plt+0x5020>
   16518:	b	164d4 <__assert_fail@plt+0x53e8>
   1651c:	mov	r2, #3
   16520:	mov	r0, sp
   16524:	bl	1610c <__assert_fail@plt+0x5020>
   16528:	b	164d4 <__assert_fail@plt+0x53e8>
   1652c:	mov	r2, #1
   16530:	mov	r0, sp
   16534:	bl	1610c <__assert_fail@plt+0x5020>
   16538:	b	164d4 <__assert_fail@plt+0x53e8>
   1653c:	mov	r2, #2
   16540:	mov	r0, sp
   16544:	bl	1610c <__assert_fail@plt+0x5020>
   16548:	b	164d4 <__assert_fail@plt+0x53e8>
   1654c:	mov	r2, #5
   16550:	mov	r0, sp
   16554:	bl	1610c <__assert_fail@plt+0x5020>
   16558:	b	164d4 <__assert_fail@plt+0x53e8>
   1655c:	mov	r2, #4
   16560:	mov	r0, sp
   16564:	bl	1610c <__assert_fail@plt+0x5020>
   16568:	b	164d4 <__assert_fail@plt+0x53e8>
   1656c:	mov	r1, #2
   16570:	mov	r0, sp
   16574:	bl	16090 <__assert_fail@plt+0x4fa4>
   16578:	b	164d4 <__assert_fail@plt+0x53e8>
   1657c:	mov	r2, #8
   16580:	mov	r0, sp
   16584:	bl	1610c <__assert_fail@plt+0x5020>
   16588:	b	164d4 <__assert_fail@plt+0x53e8>
   1658c:	mov	r2, #7
   16590:	mov	r0, sp
   16594:	bl	1610c <__assert_fail@plt+0x5020>
   16598:	b	164d4 <__assert_fail@plt+0x53e8>
   1659c:	ldr	r3, [sp]
   165a0:	str	r3, [r9]
   165a4:	orr	r4, r4, #2
   165a8:	b	161cc <__assert_fail@plt+0x50e0>
   165ac:	mov	r0, #0
   165b0:	b	164d4 <__assert_fail@plt+0x53e8>
   165b4:	andeq	r8, r1, r8, asr #19
   165b8:	ldrdeq	r8, [r1], -r4
   165bc:	andeq	r8, r1, r4, ror #19
   165c0:	push	{r4, r5, r6, lr}
   165c4:	mov	r5, r0
   165c8:	subs	r4, r1, #0
   165cc:	blt	16620 <__assert_fail@plt+0x5534>
   165d0:	cmp	r4, #0
   165d4:	moveq	r3, #0
   165d8:	beq	16604 <__assert_fail@plt+0x5518>
   165dc:	mov	r2, r4
   165e0:	asr	r3, r4, #31
   165e4:	mvn	r0, #0
   165e8:	mvn	r1, #0
   165ec:	bl	1754c <__assert_fail@plt+0x6460>
   165f0:	ldrd	r2, [r5]
   165f4:	cmp	r1, r3
   165f8:	cmpeq	r0, r2
   165fc:	movcc	r3, #1
   16600:	movcs	r3, #0
   16604:	cmp	r3, #0
   16608:	beq	16640 <__assert_fail@plt+0x5554>
   1660c:	mvn	r2, #0
   16610:	mvn	r3, #0
   16614:	strd	r2, [r5]
   16618:	mov	r0, #1
   1661c:	pop	{r4, r5, r6, pc}
   16620:	mov	r1, r4
   16624:	mov	r0, #0
   16628:	bl	1730c <__assert_fail@plt+0x6220>
   1662c:	ldrd	r2, [r5]
   16630:	orrs	r3, r2, r3
   16634:	movne	r3, #1
   16638:	moveq	r3, #0
   1663c:	b	16604 <__assert_fail@plt+0x5518>
   16640:	asr	r3, r4, #31
   16644:	ldr	r1, [r5, #4]
   16648:	ldr	r2, [r5]
   1664c:	mul	r3, r3, r2
   16650:	mla	r1, r4, r1, r3
   16654:	umull	r2, r3, r2, r4
   16658:	add	r3, r1, r3
   1665c:	strd	r2, [r5]
   16660:	mov	r0, #0
   16664:	pop	{r4, r5, r6, pc}
   16668:	push	{r4, r5, r6, r7, r8, lr}
   1666c:	subs	r4, r2, #0
   16670:	beq	166a0 <__assert_fail@plt+0x55b4>
   16674:	mov	r7, r1
   16678:	mov	r6, r0
   1667c:	mov	r5, #0
   16680:	mov	r1, r7
   16684:	mov	r0, r6
   16688:	bl	165c0 <__assert_fail@plt+0x54d4>
   1668c:	orr	r5, r5, r0
   16690:	subs	r4, r4, #1
   16694:	bne	16680 <__assert_fail@plt+0x5594>
   16698:	mov	r0, r5
   1669c:	pop	{r4, r5, r6, r7, r8, pc}
   166a0:	mov	r5, #0
   166a4:	b	16698 <__assert_fail@plt+0x55ac>
   166a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   166ac:	sub	sp, sp, #20
   166b0:	cmp	r2, #36	; 0x24
   166b4:	bhi	166f4 <__assert_fail@plt+0x5608>
   166b8:	mov	r5, r0
   166bc:	mov	r6, r1
   166c0:	mov	r7, r2
   166c4:	mov	r9, r3
   166c8:	cmp	r1, #0
   166cc:	addeq	r6, sp, #12
   166d0:	bl	10ff0 <__errno_location@plt>
   166d4:	mov	r8, r0
   166d8:	mov	r3, #0
   166dc:	str	r3, [r0]
   166e0:	ldrb	r4, [r5]
   166e4:	bl	10fb4 <__ctype_b_loc@plt>
   166e8:	ldr	r1, [r0]
   166ec:	mov	r2, r5
   166f0:	b	1670c <__assert_fail@plt+0x5620>
   166f4:	ldr	r3, [pc, #1056]	; 16b1c <__assert_fail@plt+0x5a30>
   166f8:	mov	r2, #85	; 0x55
   166fc:	ldr	r1, [pc, #1052]	; 16b20 <__assert_fail@plt+0x5a34>
   16700:	ldr	r0, [pc, #1052]	; 16b24 <__assert_fail@plt+0x5a38>
   16704:	bl	110ec <__assert_fail@plt>
   16708:	ldrb	r4, [r2, #1]!
   1670c:	lsl	r3, r4, #1
   16710:	ldrh	r3, [r1, r3]
   16714:	tst	r3, #8192	; 0x2000
   16718:	bne	16708 <__assert_fail@plt+0x561c>
   1671c:	cmp	r4, #45	; 0x2d
   16720:	moveq	r4, #4
   16724:	bne	16734 <__assert_fail@plt+0x5648>
   16728:	mov	r0, r4
   1672c:	add	sp, sp, #20
   16730:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16734:	mov	r3, #0
   16738:	mov	r2, r7
   1673c:	mov	r1, r6
   16740:	mov	r0, r5
   16744:	bl	10eac <__strtoull_internal@plt>
   16748:	strd	r0, [sp]
   1674c:	ldr	r7, [r6]
   16750:	cmp	r5, r7
   16754:	beq	16778 <__assert_fail@plt+0x568c>
   16758:	ldr	r3, [r8]
   1675c:	cmp	r3, #0
   16760:	beq	167c0 <__assert_fail@plt+0x56d4>
   16764:	cmp	r3, #34	; 0x22
   16768:	moveq	r4, #1
   1676c:	beq	167c4 <__assert_fail@plt+0x56d8>
   16770:	mov	r4, #4
   16774:	b	16728 <__assert_fail@plt+0x563c>
   16778:	ldr	r3, [sp, #48]	; 0x30
   1677c:	cmp	r3, #0
   16780:	moveq	r4, #4
   16784:	beq	16728 <__assert_fail@plt+0x563c>
   16788:	ldrb	r1, [r7]
   1678c:	cmp	r1, #0
   16790:	moveq	r4, #4
   16794:	beq	16728 <__assert_fail@plt+0x563c>
   16798:	mov	r0, r3
   1679c:	bl	10fe4 <strchr@plt>
   167a0:	cmp	r0, #0
   167a4:	moveq	r4, #4
   167a8:	beq	16728 <__assert_fail@plt+0x563c>
   167ac:	mov	r2, #1
   167b0:	mov	r3, #0
   167b4:	strd	r2, [sp]
   167b8:	mov	r4, #0
   167bc:	b	167d0 <__assert_fail@plt+0x56e4>
   167c0:	mov	r4, #0
   167c4:	ldr	r3, [sp, #48]	; 0x30
   167c8:	cmp	r3, #0
   167cc:	beq	168c0 <__assert_fail@plt+0x57d4>
   167d0:	ldrb	r5, [r7]
   167d4:	cmp	r5, #0
   167d8:	beq	16a58 <__assert_fail@plt+0x596c>
   167dc:	mov	r1, r5
   167e0:	ldr	r0, [sp, #48]	; 0x30
   167e4:	bl	10fe4 <strchr@plt>
   167e8:	cmp	r0, #0
   167ec:	beq	168c8 <__assert_fail@plt+0x57dc>
   167f0:	sub	r3, r5, #69	; 0x45
   167f4:	cmp	r3, #47	; 0x2f
   167f8:	ldrls	pc, [pc, r3, lsl #2]
   167fc:	b	16934 <__assert_fail@plt+0x5848>
   16800:	ldrdeq	r6, [r1], -r8
   16804:	andeq	r6, r1, r4, lsr r9
   16808:	ldrdeq	r6, [r1], -r8
   1680c:	andeq	r6, r1, r4, lsr r9
   16810:	andeq	r6, r1, r4, lsr r9
   16814:	andeq	r6, r1, r4, lsr r9
   16818:	ldrdeq	r6, [r1], -r8
   1681c:	andeq	r6, r1, r4, lsr r9
   16820:	ldrdeq	r6, [r1], -r8
   16824:	andeq	r6, r1, r4, lsr r9
   16828:	andeq	r6, r1, r4, lsr r9
   1682c:	ldrdeq	r6, [r1], -r8
   16830:	andeq	r6, r1, r4, lsr r9
   16834:	andeq	r6, r1, r4, lsr r9
   16838:	andeq	r6, r1, r4, lsr r9
   1683c:	ldrdeq	r6, [r1], -r8
   16840:	andeq	r6, r1, r4, lsr r9
   16844:	andeq	r6, r1, r4, lsr r9
   16848:	andeq	r6, r1, r4, lsr r9
   1684c:	andeq	r6, r1, r4, lsr r9
   16850:	ldrdeq	r6, [r1], -r8
   16854:	ldrdeq	r6, [r1], -r8
   16858:	andeq	r6, r1, r4, lsr r9
   1685c:	andeq	r6, r1, r4, lsr r9
   16860:	andeq	r6, r1, r4, lsr r9
   16864:	andeq	r6, r1, r4, lsr r9
   16868:	andeq	r6, r1, r4, lsr r9
   1686c:	andeq	r6, r1, r4, lsr r9
   16870:	andeq	r6, r1, r4, lsr r9
   16874:	andeq	r6, r1, r4, lsr r9
   16878:	andeq	r6, r1, r4, lsr r9
   1687c:	andeq	r6, r1, r4, lsr r9
   16880:	andeq	r6, r1, r4, lsr r9
   16884:	andeq	r6, r1, r4, lsr r9
   16888:	ldrdeq	r6, [r1], -r8
   1688c:	andeq	r6, r1, r4, lsr r9
   16890:	andeq	r6, r1, r4, lsr r9
   16894:	andeq	r6, r1, r4, lsr r9
   16898:	ldrdeq	r6, [r1], -r8
   1689c:	andeq	r6, r1, r4, lsr r9
   168a0:	ldrdeq	r6, [r1], -r8
   168a4:	andeq	r6, r1, r4, lsr r9
   168a8:	andeq	r6, r1, r4, lsr r9
   168ac:	andeq	r6, r1, r4, lsr r9
   168b0:	andeq	r6, r1, r4, lsr r9
   168b4:	andeq	r6, r1, r4, lsr r9
   168b8:	andeq	r6, r1, r4, lsr r9
   168bc:	ldrdeq	r6, [r1], -r8
   168c0:	strd	r0, [r9]
   168c4:	b	16728 <__assert_fail@plt+0x563c>
   168c8:	ldrd	r2, [sp]
   168cc:	strd	r2, [r9]
   168d0:	orr	r4, r4, #2
   168d4:	b	16728 <__assert_fail@plt+0x563c>
   168d8:	mov	r1, #48	; 0x30
   168dc:	ldr	r0, [sp, #48]	; 0x30
   168e0:	bl	10fe4 <strchr@plt>
   168e4:	cmp	r0, #0
   168e8:	beq	16a24 <__assert_fail@plt+0x5938>
   168ec:	ldrb	r3, [r7, #1]
   168f0:	cmp	r3, #68	; 0x44
   168f4:	beq	16910 <__assert_fail@plt+0x5824>
   168f8:	cmp	r3, #105	; 0x69
   168fc:	beq	1691c <__assert_fail@plt+0x5830>
   16900:	cmp	r3, #66	; 0x42
   16904:	movne	r7, #1
   16908:	movne	r1, #1024	; 0x400
   1690c:	bne	1693c <__assert_fail@plt+0x5850>
   16910:	mov	r7, #2
   16914:	mov	r1, #1000	; 0x3e8
   16918:	b	1693c <__assert_fail@plt+0x5850>
   1691c:	ldrb	r7, [r7, #2]
   16920:	cmp	r7, #66	; 0x42
   16924:	movne	r7, #1
   16928:	moveq	r7, #3
   1692c:	mov	r1, #1024	; 0x400
   16930:	b	1693c <__assert_fail@plt+0x5850>
   16934:	mov	r7, #1
   16938:	mov	r1, #1024	; 0x400
   1693c:	sub	r5, r5, #66	; 0x42
   16940:	cmp	r5, #53	; 0x35
   16944:	ldrls	pc, [pc, r5, lsl #2]
   16948:	b	16b04 <__assert_fail@plt+0x5a18>
   1694c:	andeq	r6, r1, r4, ror #20
   16950:	andeq	r6, r1, r4, lsl #22
   16954:	andeq	r6, r1, r4, lsl #22
   16958:	andeq	r6, r1, r4, ror sl
   1695c:	andeq	r6, r1, r4, lsl #22
   16960:	andeq	r6, r1, r4, lsl #21
   16964:	andeq	r6, r1, r4, lsl #22
   16968:	andeq	r6, r1, r4, lsl #22
   1696c:	andeq	r6, r1, r4, lsl #22
   16970:	muleq	r1, r4, sl
   16974:	andeq	r6, r1, r4, lsl #22
   16978:	andeq	r6, r1, r4, lsr #21
   1697c:	andeq	r6, r1, r4, lsl #22
   16980:	andeq	r6, r1, r4, lsl #22
   16984:			; <UNDEFINED> instruction: 0x00016ab4
   16988:	andeq	r6, r1, r4, lsl #22
   1698c:	andeq	r6, r1, r4, lsl #22
   16990:	andeq	r6, r1, r4, lsl #22
   16994:	andeq	r6, r1, r4, asr #21
   16998:	andeq	r6, r1, r4, lsl #22
   1699c:	andeq	r6, r1, r4, lsl #22
   169a0:	andeq	r6, r1, r4, lsl #22
   169a4:	andeq	r6, r1, r4, lsl #22
   169a8:	andeq	r6, r1, r4, ror #21
   169ac:	strdeq	r6, [r1], -r4
   169b0:	andeq	r6, r1, r4, lsl #22
   169b4:	andeq	r6, r1, r4, lsl #22
   169b8:	andeq	r6, r1, r4, lsl #22
   169bc:	andeq	r6, r1, r4, lsl #22
   169c0:	andeq	r6, r1, r4, lsl #22
   169c4:	andeq	r6, r1, r4, lsl #22
   169c8:	andeq	r6, r1, r4, lsl #22
   169cc:	andeq	r6, r1, r0, lsr sl
   169d0:	andeq	r6, r1, r4, lsl fp
   169d4:	andeq	r6, r1, r4, lsl #22
   169d8:	andeq	r6, r1, r4, lsl #22
   169dc:	andeq	r6, r1, r4, lsl #22
   169e0:	andeq	r6, r1, r4, lsl #21
   169e4:	andeq	r6, r1, r4, lsl #22
   169e8:	andeq	r6, r1, r4, lsl #22
   169ec:	andeq	r6, r1, r4, lsl #22
   169f0:	muleq	r1, r4, sl
   169f4:	andeq	r6, r1, r4, lsl #22
   169f8:	andeq	r6, r1, r4, lsr #21
   169fc:	andeq	r6, r1, r4, lsl #22
   16a00:	andeq	r6, r1, r4, lsl #22
   16a04:	andeq	r6, r1, r4, lsl #22
   16a08:	andeq	r6, r1, r4, lsl #22
   16a0c:	andeq	r6, r1, r4, lsl #22
   16a10:	andeq	r6, r1, r4, lsl #22
   16a14:	andeq	r6, r1, r4, asr #21
   16a18:	andeq	r6, r1, r4, lsl #22
   16a1c:	andeq	r6, r1, r4, lsl #22
   16a20:	ldrdeq	r6, [r1], -r4
   16a24:	mov	r7, #1
   16a28:	mov	r1, #1024	; 0x400
   16a2c:	b	1693c <__assert_fail@plt+0x5850>
   16a30:	mov	r1, #512	; 0x200
   16a34:	mov	r0, sp
   16a38:	bl	165c0 <__assert_fail@plt+0x54d4>
   16a3c:	orr	r4, r4, r0
   16a40:	ldr	r3, [r6]
   16a44:	add	r2, r3, r7
   16a48:	str	r2, [r6]
   16a4c:	ldrb	r3, [r3, r7]
   16a50:	cmp	r3, #0
   16a54:	orrne	r4, r4, #2
   16a58:	ldrd	r2, [sp]
   16a5c:	strd	r2, [r9]
   16a60:	b	16728 <__assert_fail@plt+0x563c>
   16a64:	mov	r1, #1024	; 0x400
   16a68:	mov	r0, sp
   16a6c:	bl	165c0 <__assert_fail@plt+0x54d4>
   16a70:	b	16a3c <__assert_fail@plt+0x5950>
   16a74:	mov	r2, #6
   16a78:	mov	r0, sp
   16a7c:	bl	16668 <__assert_fail@plt+0x557c>
   16a80:	b	16a3c <__assert_fail@plt+0x5950>
   16a84:	mov	r2, #3
   16a88:	mov	r0, sp
   16a8c:	bl	16668 <__assert_fail@plt+0x557c>
   16a90:	b	16a3c <__assert_fail@plt+0x5950>
   16a94:	mov	r2, #1
   16a98:	mov	r0, sp
   16a9c:	bl	16668 <__assert_fail@plt+0x557c>
   16aa0:	b	16a3c <__assert_fail@plt+0x5950>
   16aa4:	mov	r2, #2
   16aa8:	mov	r0, sp
   16aac:	bl	16668 <__assert_fail@plt+0x557c>
   16ab0:	b	16a3c <__assert_fail@plt+0x5950>
   16ab4:	mov	r2, #5
   16ab8:	mov	r0, sp
   16abc:	bl	16668 <__assert_fail@plt+0x557c>
   16ac0:	b	16a3c <__assert_fail@plt+0x5950>
   16ac4:	mov	r2, #4
   16ac8:	mov	r0, sp
   16acc:	bl	16668 <__assert_fail@plt+0x557c>
   16ad0:	b	16a3c <__assert_fail@plt+0x5950>
   16ad4:	mov	r1, #2
   16ad8:	mov	r0, sp
   16adc:	bl	165c0 <__assert_fail@plt+0x54d4>
   16ae0:	b	16a3c <__assert_fail@plt+0x5950>
   16ae4:	mov	r2, #8
   16ae8:	mov	r0, sp
   16aec:	bl	16668 <__assert_fail@plt+0x557c>
   16af0:	b	16a3c <__assert_fail@plt+0x5950>
   16af4:	mov	r2, #7
   16af8:	mov	r0, sp
   16afc:	bl	16668 <__assert_fail@plt+0x557c>
   16b00:	b	16a3c <__assert_fail@plt+0x5950>
   16b04:	ldrd	r2, [sp]
   16b08:	strd	r2, [r9]
   16b0c:	orr	r4, r4, #2
   16b10:	b	16728 <__assert_fail@plt+0x563c>
   16b14:	mov	r0, #0
   16b18:	b	16a3c <__assert_fail@plt+0x5950>
   16b1c:	andeq	r8, r1, ip, lsl #20
   16b20:	ldrdeq	r8, [r1], -r4
   16b24:	andeq	r8, r1, r4, ror #19
   16b28:	push	{r4, lr}
   16b2c:	mov	r2, r0
   16b30:	mov	r3, r1
   16b34:	cmp	r1, #0
   16b38:	cmpne	r0, #0
   16b3c:	moveq	r3, #1
   16b40:	moveq	r2, r3
   16b44:	umull	r0, r1, r2, r3
   16b48:	cmp	r0, #0
   16b4c:	cmpge	r1, #0
   16b50:	bne	16b64 <__assert_fail@plt+0x5a78>
   16b54:	mov	r1, r3
   16b58:	mov	r0, r2
   16b5c:	bl	10e40 <calloc@plt>
   16b60:	pop	{r4, pc}
   16b64:	bl	10ff0 <__errno_location@plt>
   16b68:	mov	r3, #12
   16b6c:	str	r3, [r0]
   16b70:	mov	r0, #0
   16b74:	pop	{r4, pc}
   16b78:	push	{r4, lr}
   16b7c:	cmp	r0, #0
   16b80:	moveq	r0, #1
   16b84:	cmp	r0, #0
   16b88:	blt	16b94 <__assert_fail@plt+0x5aa8>
   16b8c:	bl	10f6c <malloc@plt>
   16b90:	pop	{r4, pc}
   16b94:	bl	10ff0 <__errno_location@plt>
   16b98:	mov	r3, #12
   16b9c:	str	r3, [r0]
   16ba0:	mov	r0, #0
   16ba4:	pop	{r4, pc}
   16ba8:	push	{r4, lr}
   16bac:	cmp	r0, #0
   16bb0:	beq	16bcc <__assert_fail@plt+0x5ae0>
   16bb4:	cmp	r1, #0
   16bb8:	beq	16bd8 <__assert_fail@plt+0x5aec>
   16bbc:	cmp	r1, #0
   16bc0:	blt	16be4 <__assert_fail@plt+0x5af8>
   16bc4:	bl	10ef4 <realloc@plt>
   16bc8:	pop	{r4, pc}
   16bcc:	mov	r0, r1
   16bd0:	bl	16b78 <__assert_fail@plt+0x5a8c>
   16bd4:	pop	{r4, pc}
   16bd8:	bl	13494 <__assert_fail@plt+0x23a8>
   16bdc:	mov	r0, #0
   16be0:	pop	{r4, pc}
   16be4:	bl	10ff0 <__errno_location@plt>
   16be8:	mov	r3, #12
   16bec:	str	r3, [r0]
   16bf0:	mov	r0, #0
   16bf4:	pop	{r4, pc}
   16bf8:	push	{r4, r5, r6, lr}
   16bfc:	mov	r5, r0
   16c00:	bl	10f3c <__fpending@plt>
   16c04:	mov	r6, r0
   16c08:	ldr	r4, [r5]
   16c0c:	and	r4, r4, #32
   16c10:	mov	r0, r5
   16c14:	bl	132ec <__assert_fail@plt+0x2200>
   16c18:	cmp	r4, #0
   16c1c:	bne	16c44 <__assert_fail@plt+0x5b58>
   16c20:	cmp	r0, #0
   16c24:	popeq	{r4, r5, r6, pc}
   16c28:	cmp	r6, #0
   16c2c:	bne	16c60 <__assert_fail@plt+0x5b74>
   16c30:	bl	10ff0 <__errno_location@plt>
   16c34:	ldr	r0, [r0]
   16c38:	subs	r0, r0, #9
   16c3c:	mvnne	r0, #0
   16c40:	pop	{r4, r5, r6, pc}
   16c44:	cmp	r0, #0
   16c48:	bne	16c68 <__assert_fail@plt+0x5b7c>
   16c4c:	bl	10ff0 <__errno_location@plt>
   16c50:	mov	r3, #0
   16c54:	str	r3, [r0]
   16c58:	mvn	r0, #0
   16c5c:	pop	{r4, r5, r6, pc}
   16c60:	mvn	r0, #0
   16c64:	pop	{r4, r5, r6, pc}
   16c68:	mvn	r0, #0
   16c6c:	pop	{r4, r5, r6, pc}
   16c70:	push	{r1, r2, r3}
   16c74:	push	{r4, r5, r6, lr}
   16c78:	sub	sp, sp, #12
   16c7c:	mov	r5, r0
   16c80:	ldr	r1, [sp, #28]
   16c84:	add	r3, sp, #32
   16c88:	str	r3, [sp, #4]
   16c8c:	cmp	r1, #0
   16c90:	beq	16cd8 <__assert_fail@plt+0x5bec>
   16c94:	ldr	r3, [pc, #540]	; 16eb8 <__assert_fail@plt+0x5dcc>
   16c98:	cmp	r1, r3
   16c9c:	beq	16d08 <__assert_fail@plt+0x5c1c>
   16ca0:	cmp	r1, #11
   16ca4:	beq	16ea8 <__assert_fail@plt+0x5dbc>
   16ca8:	bgt	16e34 <__assert_fail@plt+0x5d48>
   16cac:	cmp	r1, #3
   16cb0:	beq	16ea8 <__assert_fail@plt+0x5dbc>
   16cb4:	ble	16df4 <__assert_fail@plt+0x5d08>
   16cb8:	cmp	r1, #8
   16cbc:	beq	16e14 <__assert_fail@plt+0x5d28>
   16cc0:	ble	16e0c <__assert_fail@plt+0x5d20>
   16cc4:	cmp	r1, #9
   16cc8:	beq	16ea8 <__assert_fail@plt+0x5dbc>
   16ccc:	cmp	r1, #10
   16cd0:	bne	16e6c <__assert_fail@plt+0x5d80>
   16cd4:	b	16e14 <__assert_fail@plt+0x5d28>
   16cd8:	ldr	r3, [sp, #4]
   16cdc:	add	r2, r3, #4
   16ce0:	str	r2, [sp, #4]
   16ce4:	ldr	r2, [r3]
   16ce8:	mov	r1, #0
   16cec:	bl	1105c <fcntl64@plt>
   16cf0:	mov	r4, r0
   16cf4:	mov	r0, r4
   16cf8:	add	sp, sp, #12
   16cfc:	pop	{r4, r5, r6, lr}
   16d00:	add	sp, sp, #12
   16d04:	bx	lr
   16d08:	ldr	r3, [sp, #4]
   16d0c:	add	r2, r3, #4
   16d10:	str	r2, [sp, #4]
   16d14:	ldr	r6, [r3]
   16d18:	ldr	r3, [pc, #412]	; 16ebc <__assert_fail@plt+0x5dd0>
   16d1c:	ldr	r3, [r3]
   16d20:	cmp	r3, #0
   16d24:	blt	16d84 <__assert_fail@plt+0x5c98>
   16d28:	mov	r2, r6
   16d2c:	ldr	r1, [pc, #388]	; 16eb8 <__assert_fail@plt+0x5dcc>
   16d30:	bl	1105c <fcntl64@plt>
   16d34:	subs	r4, r0, #0
   16d38:	blt	16d4c <__assert_fail@plt+0x5c60>
   16d3c:	mov	r2, #1
   16d40:	ldr	r3, [pc, #372]	; 16ebc <__assert_fail@plt+0x5dd0>
   16d44:	str	r2, [r3]
   16d48:	b	16cf4 <__assert_fail@plt+0x5c08>
   16d4c:	bl	10ff0 <__errno_location@plt>
   16d50:	ldr	r3, [r0]
   16d54:	cmp	r3, #22
   16d58:	bne	16d3c <__assert_fail@plt+0x5c50>
   16d5c:	mov	r2, r6
   16d60:	mov	r1, #0
   16d64:	mov	r0, r5
   16d68:	bl	1105c <fcntl64@plt>
   16d6c:	subs	r4, r0, #0
   16d70:	blt	16cf4 <__assert_fail@plt+0x5c08>
   16d74:	mvn	r2, #0
   16d78:	ldr	r3, [pc, #316]	; 16ebc <__assert_fail@plt+0x5dd0>
   16d7c:	str	r2, [r3]
   16d80:	b	16da8 <__assert_fail@plt+0x5cbc>
   16d84:	mov	r2, r6
   16d88:	mov	r1, #0
   16d8c:	bl	1105c <fcntl64@plt>
   16d90:	subs	r4, r0, #0
   16d94:	blt	16cf4 <__assert_fail@plt+0x5c08>
   16d98:	ldr	r3, [pc, #284]	; 16ebc <__assert_fail@plt+0x5dd0>
   16d9c:	ldr	r3, [r3]
   16da0:	cmn	r3, #1
   16da4:	bne	16cf4 <__assert_fail@plt+0x5c08>
   16da8:	mov	r1, #1
   16dac:	mov	r0, r4
   16db0:	bl	1105c <fcntl64@plt>
   16db4:	subs	r2, r0, #0
   16db8:	blt	16dd4 <__assert_fail@plt+0x5ce8>
   16dbc:	orr	r2, r2, #1
   16dc0:	mov	r1, #2
   16dc4:	mov	r0, r4
   16dc8:	bl	1105c <fcntl64@plt>
   16dcc:	cmn	r0, #1
   16dd0:	bne	16cf4 <__assert_fail@plt+0x5c08>
   16dd4:	bl	10ff0 <__errno_location@plt>
   16dd8:	mov	r5, r0
   16ddc:	ldr	r6, [r0]
   16de0:	mov	r0, r4
   16de4:	bl	110e0 <close@plt>
   16de8:	str	r6, [r5]
   16dec:	mvn	r4, #0
   16df0:	b	16cf4 <__assert_fail@plt+0x5c08>
   16df4:	cmp	r1, #1
   16df8:	beq	16ea8 <__assert_fail@plt+0x5dbc>
   16dfc:	bgt	16e14 <__assert_fail@plt+0x5d28>
   16e00:	cmp	r1, #0
   16e04:	bne	16e6c <__assert_fail@plt+0x5d80>
   16e08:	b	16e14 <__assert_fail@plt+0x5d28>
   16e0c:	cmp	r1, #4
   16e10:	bne	16e6c <__assert_fail@plt+0x5d80>
   16e14:	ldr	r3, [sp, #4]
   16e18:	add	r2, r3, #4
   16e1c:	str	r2, [sp, #4]
   16e20:	ldr	r2, [r3]
   16e24:	mov	r0, r5
   16e28:	bl	1105c <fcntl64@plt>
   16e2c:	mov	r4, r0
   16e30:	b	16cf4 <__assert_fail@plt+0x5c08>
   16e34:	ldr	r3, [pc, #132]	; 16ec0 <__assert_fail@plt+0x5dd4>
   16e38:	cmp	r1, r3
   16e3c:	bgt	16e8c <__assert_fail@plt+0x5da0>
   16e40:	sub	r3, r3, #1
   16e44:	cmp	r1, r3
   16e48:	bge	16e14 <__assert_fail@plt+0x5d28>
   16e4c:	sub	r3, r3, #5
   16e50:	cmp	r1, r3
   16e54:	beq	16ea8 <__assert_fail@plt+0x5dbc>
   16e58:	add	r3, r3, #1
   16e5c:	cmp	r1, r3
   16e60:	beq	16e14 <__assert_fail@plt+0x5d28>
   16e64:	cmp	r1, #1024	; 0x400
   16e68:	beq	16e14 <__assert_fail@plt+0x5d28>
   16e6c:	ldr	r3, [sp, #4]
   16e70:	add	r2, r3, #4
   16e74:	str	r2, [sp, #4]
   16e78:	ldr	r2, [r3]
   16e7c:	mov	r0, r5
   16e80:	bl	1105c <fcntl64@plt>
   16e84:	mov	r4, r0
   16e88:	b	16cf4 <__assert_fail@plt+0x5c08>
   16e8c:	ldr	r3, [pc, #48]	; 16ec4 <__assert_fail@plt+0x5dd8>
   16e90:	cmp	r1, r3
   16e94:	beq	16e14 <__assert_fail@plt+0x5d28>
   16e98:	blt	16ea8 <__assert_fail@plt+0x5dbc>
   16e9c:	add	r3, r3, #1
   16ea0:	cmp	r1, r3
   16ea4:	bne	16e6c <__assert_fail@plt+0x5d80>
   16ea8:	mov	r0, r5
   16eac:	bl	1105c <fcntl64@plt>
   16eb0:	mov	r4, r0
   16eb4:	b	16cf4 <__assert_fail@plt+0x5c08>
   16eb8:	andeq	r0, r0, r6, lsl #8
   16ebc:	andeq	r9, r2, r4, lsr r3
   16ec0:	andeq	r0, r0, r7, lsl #8
   16ec4:	andeq	r0, r0, r9, lsl #8
   16ec8:	push	{r4, lr}
   16ecc:	mov	r0, #14
   16ed0:	bl	11098 <nl_langinfo@plt>
   16ed4:	cmp	r0, #0
   16ed8:	beq	16ef0 <__assert_fail@plt+0x5e04>
   16edc:	ldrb	r2, [r0]
   16ee0:	ldr	r3, [pc, #16]	; 16ef8 <__assert_fail@plt+0x5e0c>
   16ee4:	cmp	r2, #0
   16ee8:	moveq	r0, r3
   16eec:	pop	{r4, pc}
   16ef0:	ldr	r0, [pc]	; 16ef8 <__assert_fail@plt+0x5e0c>
   16ef4:	pop	{r4, pc}
   16ef8:	andeq	r8, r1, r8, lsl sl
   16efc:	push	{r4, r5, r6, r7, lr}
   16f00:	sub	sp, sp, #12
   16f04:	mov	r7, r1
   16f08:	mov	r5, r2
   16f0c:	subs	r6, r0, #0
   16f10:	addeq	r6, sp, #4
   16f14:	mov	r0, r6
   16f18:	bl	10f48 <mbrtowc@plt>
   16f1c:	mov	r4, r0
   16f20:	cmp	r5, #0
   16f24:	cmnne	r0, #3
   16f28:	bhi	16f38 <__assert_fail@plt+0x5e4c>
   16f2c:	mov	r0, r4
   16f30:	add	sp, sp, #12
   16f34:	pop	{r4, r5, r6, r7, pc}
   16f38:	mov	r0, #0
   16f3c:	bl	13594 <__assert_fail@plt+0x24a8>
   16f40:	cmp	r0, #0
   16f44:	ldrbeq	r3, [r7]
   16f48:	streq	r3, [r6]
   16f4c:	moveq	r4, #1
   16f50:	b	16f2c <__assert_fail@plt+0x5e40>
   16f54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f58:	mov	r5, r0
   16f5c:	mov	r7, r1
   16f60:	mov	r4, r2
   16f64:	mov	r8, r3
   16f68:	bl	10ff0 <__errno_location@plt>
   16f6c:	mov	sl, r0
   16f70:	mov	r9, #0
   16f74:	str	r9, [sl]
   16f78:	mov	r1, r4
   16f7c:	mov	r0, r5
   16f80:	bl	10f60 <strcoll@plt>
   16f84:	cmp	r0, #0
   16f88:	bne	16fd4 <__assert_fail@plt+0x5ee8>
   16f8c:	mov	r0, r5
   16f90:	bl	10fd8 <strlen@plt>
   16f94:	add	r6, r0, #1
   16f98:	mov	r0, r4
   16f9c:	bl	10fd8 <strlen@plt>
   16fa0:	add	r0, r0, #1
   16fa4:	add	r5, r5, r6
   16fa8:	add	r4, r4, r0
   16fac:	sub	r8, r8, r0
   16fb0:	subs	r7, r7, r6
   16fb4:	beq	16fc8 <__assert_fail@plt+0x5edc>
   16fb8:	cmp	r8, #0
   16fbc:	bne	16f74 <__assert_fail@plt+0x5e88>
   16fc0:	mov	r0, #1
   16fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fc8:	adds	r0, r8, #0
   16fcc:	mvnne	r0, #0
   16fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fdc:	mov	r7, r0
   16fe0:	mov	r4, r1
   16fe4:	mov	r6, r2
   16fe8:	mov	r5, r3
   16fec:	cmp	r1, r3
   16ff0:	beq	17030 <__assert_fail@plt+0x5f44>
   16ff4:	ldrb	sl, [r7, r4]
   16ff8:	ldrb	r9, [r6, r5]
   16ffc:	mov	r3, #0
   17000:	strb	r3, [r7, r4]
   17004:	strb	r3, [r6, r5]
   17008:	add	r3, r5, #1
   1700c:	mov	r2, r6
   17010:	add	r1, r4, #1
   17014:	mov	r0, r7
   17018:	bl	16f54 <__assert_fail@plt+0x5e68>
   1701c:	mov	r8, r0
   17020:	strb	sl, [r7, r4]
   17024:	strb	r9, [r6, r5]
   17028:	mov	r0, r8
   1702c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17030:	mov	r2, r1
   17034:	mov	r1, r6
   17038:	bl	10ed0 <memcmp@plt>
   1703c:	subs	r8, r0, #0
   17040:	bne	16ff4 <__assert_fail@plt+0x5f08>
   17044:	bl	10ff0 <__errno_location@plt>
   17048:	mov	r3, #0
   1704c:	str	r3, [r0]
   17050:	b	17028 <__assert_fail@plt+0x5f3c>
   17054:	push	{r4, r5, r6, r7, r8, lr}
   17058:	mov	r7, r0
   1705c:	mov	r4, r1
   17060:	mov	r8, r2
   17064:	mov	r5, r3
   17068:	cmp	r1, r3
   1706c:	beq	17090 <__assert_fail@plt+0x5fa4>
   17070:	mov	r3, r5
   17074:	mov	r2, r8
   17078:	mov	r1, r4
   1707c:	mov	r0, r7
   17080:	bl	16f54 <__assert_fail@plt+0x5e68>
   17084:	mov	r6, r0
   17088:	mov	r0, r6
   1708c:	pop	{r4, r5, r6, r7, r8, pc}
   17090:	mov	r2, r1
   17094:	mov	r1, r8
   17098:	bl	10ed0 <memcmp@plt>
   1709c:	subs	r6, r0, #0
   170a0:	bne	17070 <__assert_fail@plt+0x5f84>
   170a4:	bl	10ff0 <__errno_location@plt>
   170a8:	mov	r3, #0
   170ac:	str	r3, [r0]
   170b0:	b	17088 <__assert_fail@plt+0x5f9c>
   170b4:	push	{r4, r5, r6, lr}
   170b8:	mov	r6, r0
   170bc:	mov	r5, r1
   170c0:	subs	r4, r2, #0
   170c4:	beq	170f0 <__assert_fail@plt+0x6004>
   170c8:	mov	r1, r4
   170cc:	mvn	r0, #0
   170d0:	bl	17100 <__assert_fail@plt+0x6014>
   170d4:	cmp	r0, r5
   170d8:	bcs	170f0 <__assert_fail@plt+0x6004>
   170dc:	bl	10ff0 <__errno_location@plt>
   170e0:	mov	r3, #12
   170e4:	str	r3, [r0]
   170e8:	mov	r0, #0
   170ec:	pop	{r4, r5, r6, pc}
   170f0:	mul	r1, r5, r4
   170f4:	mov	r0, r6
   170f8:	bl	16ba8 <__assert_fail@plt+0x5abc>
   170fc:	pop	{r4, r5, r6, pc}
   17100:	subs	r2, r1, #1
   17104:	bxeq	lr
   17108:	bcc	172e0 <__assert_fail@plt+0x61f4>
   1710c:	cmp	r0, r1
   17110:	bls	172c4 <__assert_fail@plt+0x61d8>
   17114:	tst	r1, r2
   17118:	beq	172d0 <__assert_fail@plt+0x61e4>
   1711c:	clz	r3, r0
   17120:	clz	r2, r1
   17124:	sub	r3, r2, r3
   17128:	rsbs	r3, r3, #31
   1712c:	addne	r3, r3, r3, lsl #1
   17130:	mov	r2, #0
   17134:	addne	pc, pc, r3, lsl #2
   17138:	nop			; (mov r0, r0)
   1713c:	cmp	r0, r1, lsl #31
   17140:	adc	r2, r2, r2
   17144:	subcs	r0, r0, r1, lsl #31
   17148:	cmp	r0, r1, lsl #30
   1714c:	adc	r2, r2, r2
   17150:	subcs	r0, r0, r1, lsl #30
   17154:	cmp	r0, r1, lsl #29
   17158:	adc	r2, r2, r2
   1715c:	subcs	r0, r0, r1, lsl #29
   17160:	cmp	r0, r1, lsl #28
   17164:	adc	r2, r2, r2
   17168:	subcs	r0, r0, r1, lsl #28
   1716c:	cmp	r0, r1, lsl #27
   17170:	adc	r2, r2, r2
   17174:	subcs	r0, r0, r1, lsl #27
   17178:	cmp	r0, r1, lsl #26
   1717c:	adc	r2, r2, r2
   17180:	subcs	r0, r0, r1, lsl #26
   17184:	cmp	r0, r1, lsl #25
   17188:	adc	r2, r2, r2
   1718c:	subcs	r0, r0, r1, lsl #25
   17190:	cmp	r0, r1, lsl #24
   17194:	adc	r2, r2, r2
   17198:	subcs	r0, r0, r1, lsl #24
   1719c:	cmp	r0, r1, lsl #23
   171a0:	adc	r2, r2, r2
   171a4:	subcs	r0, r0, r1, lsl #23
   171a8:	cmp	r0, r1, lsl #22
   171ac:	adc	r2, r2, r2
   171b0:	subcs	r0, r0, r1, lsl #22
   171b4:	cmp	r0, r1, lsl #21
   171b8:	adc	r2, r2, r2
   171bc:	subcs	r0, r0, r1, lsl #21
   171c0:	cmp	r0, r1, lsl #20
   171c4:	adc	r2, r2, r2
   171c8:	subcs	r0, r0, r1, lsl #20
   171cc:	cmp	r0, r1, lsl #19
   171d0:	adc	r2, r2, r2
   171d4:	subcs	r0, r0, r1, lsl #19
   171d8:	cmp	r0, r1, lsl #18
   171dc:	adc	r2, r2, r2
   171e0:	subcs	r0, r0, r1, lsl #18
   171e4:	cmp	r0, r1, lsl #17
   171e8:	adc	r2, r2, r2
   171ec:	subcs	r0, r0, r1, lsl #17
   171f0:	cmp	r0, r1, lsl #16
   171f4:	adc	r2, r2, r2
   171f8:	subcs	r0, r0, r1, lsl #16
   171fc:	cmp	r0, r1, lsl #15
   17200:	adc	r2, r2, r2
   17204:	subcs	r0, r0, r1, lsl #15
   17208:	cmp	r0, r1, lsl #14
   1720c:	adc	r2, r2, r2
   17210:	subcs	r0, r0, r1, lsl #14
   17214:	cmp	r0, r1, lsl #13
   17218:	adc	r2, r2, r2
   1721c:	subcs	r0, r0, r1, lsl #13
   17220:	cmp	r0, r1, lsl #12
   17224:	adc	r2, r2, r2
   17228:	subcs	r0, r0, r1, lsl #12
   1722c:	cmp	r0, r1, lsl #11
   17230:	adc	r2, r2, r2
   17234:	subcs	r0, r0, r1, lsl #11
   17238:	cmp	r0, r1, lsl #10
   1723c:	adc	r2, r2, r2
   17240:	subcs	r0, r0, r1, lsl #10
   17244:	cmp	r0, r1, lsl #9
   17248:	adc	r2, r2, r2
   1724c:	subcs	r0, r0, r1, lsl #9
   17250:	cmp	r0, r1, lsl #8
   17254:	adc	r2, r2, r2
   17258:	subcs	r0, r0, r1, lsl #8
   1725c:	cmp	r0, r1, lsl #7
   17260:	adc	r2, r2, r2
   17264:	subcs	r0, r0, r1, lsl #7
   17268:	cmp	r0, r1, lsl #6
   1726c:	adc	r2, r2, r2
   17270:	subcs	r0, r0, r1, lsl #6
   17274:	cmp	r0, r1, lsl #5
   17278:	adc	r2, r2, r2
   1727c:	subcs	r0, r0, r1, lsl #5
   17280:	cmp	r0, r1, lsl #4
   17284:	adc	r2, r2, r2
   17288:	subcs	r0, r0, r1, lsl #4
   1728c:	cmp	r0, r1, lsl #3
   17290:	adc	r2, r2, r2
   17294:	subcs	r0, r0, r1, lsl #3
   17298:	cmp	r0, r1, lsl #2
   1729c:	adc	r2, r2, r2
   172a0:	subcs	r0, r0, r1, lsl #2
   172a4:	cmp	r0, r1, lsl #1
   172a8:	adc	r2, r2, r2
   172ac:	subcs	r0, r0, r1, lsl #1
   172b0:	cmp	r0, r1
   172b4:	adc	r2, r2, r2
   172b8:	subcs	r0, r0, r1
   172bc:	mov	r0, r2
   172c0:	bx	lr
   172c4:	moveq	r0, #1
   172c8:	movne	r0, #0
   172cc:	bx	lr
   172d0:	clz	r2, r1
   172d4:	rsb	r2, r2, #31
   172d8:	lsr	r0, r0, r2
   172dc:	bx	lr
   172e0:	cmp	r0, #0
   172e4:	mvnne	r0, #0
   172e8:	b	17588 <__assert_fail@plt+0x649c>
   172ec:	cmp	r1, #0
   172f0:	beq	172e0 <__assert_fail@plt+0x61f4>
   172f4:	push	{r0, r1, lr}
   172f8:	bl	17100 <__assert_fail@plt+0x6014>
   172fc:	pop	{r1, r2, lr}
   17300:	mul	r3, r2, r0
   17304:	sub	r1, r1, r3
   17308:	bx	lr
   1730c:	cmp	r1, #0
   17310:	beq	1751c <__assert_fail@plt+0x6430>
   17314:	eor	ip, r0, r1
   17318:	rsbmi	r1, r1, #0
   1731c:	subs	r2, r1, #1
   17320:	beq	174e8 <__assert_fail@plt+0x63fc>
   17324:	movs	r3, r0
   17328:	rsbmi	r3, r0, #0
   1732c:	cmp	r3, r1
   17330:	bls	174f4 <__assert_fail@plt+0x6408>
   17334:	tst	r1, r2
   17338:	beq	17504 <__assert_fail@plt+0x6418>
   1733c:	clz	r2, r3
   17340:	clz	r0, r1
   17344:	sub	r2, r0, r2
   17348:	rsbs	r2, r2, #31
   1734c:	addne	r2, r2, r2, lsl #1
   17350:	mov	r0, #0
   17354:	addne	pc, pc, r2, lsl #2
   17358:	nop			; (mov r0, r0)
   1735c:	cmp	r3, r1, lsl #31
   17360:	adc	r0, r0, r0
   17364:	subcs	r3, r3, r1, lsl #31
   17368:	cmp	r3, r1, lsl #30
   1736c:	adc	r0, r0, r0
   17370:	subcs	r3, r3, r1, lsl #30
   17374:	cmp	r3, r1, lsl #29
   17378:	adc	r0, r0, r0
   1737c:	subcs	r3, r3, r1, lsl #29
   17380:	cmp	r3, r1, lsl #28
   17384:	adc	r0, r0, r0
   17388:	subcs	r3, r3, r1, lsl #28
   1738c:	cmp	r3, r1, lsl #27
   17390:	adc	r0, r0, r0
   17394:	subcs	r3, r3, r1, lsl #27
   17398:	cmp	r3, r1, lsl #26
   1739c:	adc	r0, r0, r0
   173a0:	subcs	r3, r3, r1, lsl #26
   173a4:	cmp	r3, r1, lsl #25
   173a8:	adc	r0, r0, r0
   173ac:	subcs	r3, r3, r1, lsl #25
   173b0:	cmp	r3, r1, lsl #24
   173b4:	adc	r0, r0, r0
   173b8:	subcs	r3, r3, r1, lsl #24
   173bc:	cmp	r3, r1, lsl #23
   173c0:	adc	r0, r0, r0
   173c4:	subcs	r3, r3, r1, lsl #23
   173c8:	cmp	r3, r1, lsl #22
   173cc:	adc	r0, r0, r0
   173d0:	subcs	r3, r3, r1, lsl #22
   173d4:	cmp	r3, r1, lsl #21
   173d8:	adc	r0, r0, r0
   173dc:	subcs	r3, r3, r1, lsl #21
   173e0:	cmp	r3, r1, lsl #20
   173e4:	adc	r0, r0, r0
   173e8:	subcs	r3, r3, r1, lsl #20
   173ec:	cmp	r3, r1, lsl #19
   173f0:	adc	r0, r0, r0
   173f4:	subcs	r3, r3, r1, lsl #19
   173f8:	cmp	r3, r1, lsl #18
   173fc:	adc	r0, r0, r0
   17400:	subcs	r3, r3, r1, lsl #18
   17404:	cmp	r3, r1, lsl #17
   17408:	adc	r0, r0, r0
   1740c:	subcs	r3, r3, r1, lsl #17
   17410:	cmp	r3, r1, lsl #16
   17414:	adc	r0, r0, r0
   17418:	subcs	r3, r3, r1, lsl #16
   1741c:	cmp	r3, r1, lsl #15
   17420:	adc	r0, r0, r0
   17424:	subcs	r3, r3, r1, lsl #15
   17428:	cmp	r3, r1, lsl #14
   1742c:	adc	r0, r0, r0
   17430:	subcs	r3, r3, r1, lsl #14
   17434:	cmp	r3, r1, lsl #13
   17438:	adc	r0, r0, r0
   1743c:	subcs	r3, r3, r1, lsl #13
   17440:	cmp	r3, r1, lsl #12
   17444:	adc	r0, r0, r0
   17448:	subcs	r3, r3, r1, lsl #12
   1744c:	cmp	r3, r1, lsl #11
   17450:	adc	r0, r0, r0
   17454:	subcs	r3, r3, r1, lsl #11
   17458:	cmp	r3, r1, lsl #10
   1745c:	adc	r0, r0, r0
   17460:	subcs	r3, r3, r1, lsl #10
   17464:	cmp	r3, r1, lsl #9
   17468:	adc	r0, r0, r0
   1746c:	subcs	r3, r3, r1, lsl #9
   17470:	cmp	r3, r1, lsl #8
   17474:	adc	r0, r0, r0
   17478:	subcs	r3, r3, r1, lsl #8
   1747c:	cmp	r3, r1, lsl #7
   17480:	adc	r0, r0, r0
   17484:	subcs	r3, r3, r1, lsl #7
   17488:	cmp	r3, r1, lsl #6
   1748c:	adc	r0, r0, r0
   17490:	subcs	r3, r3, r1, lsl #6
   17494:	cmp	r3, r1, lsl #5
   17498:	adc	r0, r0, r0
   1749c:	subcs	r3, r3, r1, lsl #5
   174a0:	cmp	r3, r1, lsl #4
   174a4:	adc	r0, r0, r0
   174a8:	subcs	r3, r3, r1, lsl #4
   174ac:	cmp	r3, r1, lsl #3
   174b0:	adc	r0, r0, r0
   174b4:	subcs	r3, r3, r1, lsl #3
   174b8:	cmp	r3, r1, lsl #2
   174bc:	adc	r0, r0, r0
   174c0:	subcs	r3, r3, r1, lsl #2
   174c4:	cmp	r3, r1, lsl #1
   174c8:	adc	r0, r0, r0
   174cc:	subcs	r3, r3, r1, lsl #1
   174d0:	cmp	r3, r1
   174d4:	adc	r0, r0, r0
   174d8:	subcs	r3, r3, r1
   174dc:	cmp	ip, #0
   174e0:	rsbmi	r0, r0, #0
   174e4:	bx	lr
   174e8:	teq	ip, r0
   174ec:	rsbmi	r0, r0, #0
   174f0:	bx	lr
   174f4:	movcc	r0, #0
   174f8:	asreq	r0, ip, #31
   174fc:	orreq	r0, r0, #1
   17500:	bx	lr
   17504:	clz	r2, r1
   17508:	rsb	r2, r2, #31
   1750c:	cmp	ip, #0
   17510:	lsr	r0, r3, r2
   17514:	rsbmi	r0, r0, #0
   17518:	bx	lr
   1751c:	cmp	r0, #0
   17520:	mvngt	r0, #-2147483648	; 0x80000000
   17524:	movlt	r0, #-2147483648	; 0x80000000
   17528:	b	17588 <__assert_fail@plt+0x649c>
   1752c:	cmp	r1, #0
   17530:	beq	1751c <__assert_fail@plt+0x6430>
   17534:	push	{r0, r1, lr}
   17538:	bl	17314 <__assert_fail@plt+0x6228>
   1753c:	pop	{r1, r2, lr}
   17540:	mul	r3, r2, r0
   17544:	sub	r1, r1, r3
   17548:	bx	lr
   1754c:	cmp	r3, #0
   17550:	cmpeq	r2, #0
   17554:	bne	1756c <__assert_fail@plt+0x6480>
   17558:	cmp	r1, #0
   1755c:	cmpeq	r0, #0
   17560:	mvnne	r1, #0
   17564:	mvnne	r0, #0
   17568:	b	17588 <__assert_fail@plt+0x649c>
   1756c:	sub	sp, sp, #8
   17570:	push	{sp, lr}
   17574:	bl	17598 <__assert_fail@plt+0x64ac>
   17578:	ldr	lr, [sp, #4]
   1757c:	add	sp, sp, #8
   17580:	pop	{r2, r3}
   17584:	bx	lr
   17588:	push	{r1, lr}
   1758c:	mov	r0, #8
   17590:	bl	10e58 <raise@plt>
   17594:	pop	{r1, pc}
   17598:	cmp	r1, r3
   1759c:	push	{r4, r5, r6, r7, r8, r9, lr}
   175a0:	cmpeq	r0, r2
   175a4:	mov	r4, r0
   175a8:	mov	r5, r1
   175ac:	ldr	r9, [sp, #28]
   175b0:	movcc	r0, #0
   175b4:	movcc	r1, #0
   175b8:	bcc	176b0 <__assert_fail@plt+0x65c4>
   175bc:	cmp	r3, #0
   175c0:	clzeq	ip, r2
   175c4:	clzne	ip, r3
   175c8:	addeq	ip, ip, #32
   175cc:	cmp	r5, #0
   175d0:	clzeq	r1, r4
   175d4:	addeq	r1, r1, #32
   175d8:	clzne	r1, r5
   175dc:	sub	ip, ip, r1
   175e0:	sub	lr, ip, #32
   175e4:	lsl	r7, r3, ip
   175e8:	rsb	r8, ip, #32
   175ec:	orr	r7, r7, r2, lsl lr
   175f0:	orr	r7, r7, r2, lsr r8
   175f4:	lsl	r6, r2, ip
   175f8:	cmp	r5, r7
   175fc:	cmpeq	r4, r6
   17600:	movcc	r0, #0
   17604:	movcc	r1, #0
   17608:	bcc	17624 <__assert_fail@plt+0x6538>
   1760c:	mov	r3, #1
   17610:	subs	r4, r4, r6
   17614:	lsl	r1, r3, lr
   17618:	lsl	r0, r3, ip
   1761c:	orr	r1, r1, r3, lsr r8
   17620:	sbc	r5, r5, r7
   17624:	cmp	ip, #0
   17628:	beq	176b0 <__assert_fail@plt+0x65c4>
   1762c:	lsrs	r3, r7, #1
   17630:	rrx	r2, r6
   17634:	mov	r6, ip
   17638:	b	1765c <__assert_fail@plt+0x6570>
   1763c:	subs	r4, r4, r2
   17640:	sbc	r5, r5, r3
   17644:	adds	r4, r4, r4
   17648:	adc	r5, r5, r5
   1764c:	adds	r4, r4, #1
   17650:	adc	r5, r5, #0
   17654:	subs	r6, r6, #1
   17658:	beq	17678 <__assert_fail@plt+0x658c>
   1765c:	cmp	r5, r3
   17660:	cmpeq	r4, r2
   17664:	bcs	1763c <__assert_fail@plt+0x6550>
   17668:	adds	r4, r4, r4
   1766c:	adc	r5, r5, r5
   17670:	subs	r6, r6, #1
   17674:	bne	1765c <__assert_fail@plt+0x6570>
   17678:	lsr	r6, r4, ip
   1767c:	lsr	r7, r5, ip
   17680:	orr	r6, r6, r5, lsl r8
   17684:	adds	r2, r0, r4
   17688:	orr	r6, r6, r5, lsr lr
   1768c:	adc	r3, r1, r5
   17690:	lsl	r1, r7, ip
   17694:	orr	r1, r1, r6, lsl lr
   17698:	lsl	r0, r6, ip
   1769c:	orr	r1, r1, r6, lsr r8
   176a0:	subs	r0, r2, r0
   176a4:	mov	r4, r6
   176a8:	mov	r5, r7
   176ac:	sbc	r1, r3, r1
   176b0:	cmp	r9, #0
   176b4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   176b8:	strd	r4, [r9]
   176bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   176c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   176c4:	mov	r7, r0
   176c8:	ldr	r6, [pc, #72]	; 17718 <__assert_fail@plt+0x662c>
   176cc:	ldr	r5, [pc, #72]	; 1771c <__assert_fail@plt+0x6630>
   176d0:	add	r6, pc, r6
   176d4:	add	r5, pc, r5
   176d8:	sub	r6, r6, r5
   176dc:	mov	r8, r1
   176e0:	mov	r9, r2
   176e4:	bl	10e14 <fdopen@plt-0x20>
   176e8:	asrs	r6, r6, #2
   176ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   176f0:	mov	r4, #0
   176f4:	add	r4, r4, #1
   176f8:	ldr	r3, [r5], #4
   176fc:	mov	r2, r9
   17700:	mov	r1, r8
   17704:	mov	r0, r7
   17708:	blx	r3
   1770c:	cmp	r6, r4
   17710:	bne	176f4 <__assert_fail@plt+0x6608>
   17714:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17718:	andeq	r1, r1, r8, lsr r8
   1771c:	andeq	r1, r1, r0, lsr r8
   17720:	bx	lr
   17724:	ldr	r3, [pc, #12]	; 17738 <__assert_fail@plt+0x664c>
   17728:	mov	r1, #0
   1772c:	add	r3, pc, r3
   17730:	ldr	r2, [r3]
   17734:	b	10ffc <__cxa_atexit@plt>
   17738:	andeq	r1, r1, ip, asr #19

Disassembly of section .fini:

0001773c <.fini>:
   1773c:	push	{r3, lr}
   17740:	pop	{r3, pc}
