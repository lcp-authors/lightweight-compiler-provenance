
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	12218 <__assert_fail@plt+0x12c0>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	sl, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #106496	; 0x1a000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #106496	; 0x1a000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #106496	; 0x1a000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #106496	; 0x1a000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <read@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #106496	; 0x1a000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <fflush@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #106496	; 0x1a000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #106496	; 0x1a000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #106496	; 0x1a000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #106496	; 0x1a000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <__strtoull_internal@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #106496	; 0x1a000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <mbsinit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #106496	; 0x1a000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <fwrite_unlocked@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #106496	; 0x1a000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <memcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #106496	; 0x1a000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <fputc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #106496	; 0x1a000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #106496	; 0x1a000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #106496	; 0x1a000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #106496	; 0x1a000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <rawmemchr@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #106496	; 0x1a000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <iswprint@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #106496	; 0x1a000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <__fxstat64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #106496	; 0x1a000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <fwrite@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #106496	; 0x1a000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <lseek64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #106496	; 0x1a000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <__ctype_get_mb_cur_max@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #106496	; 0x1a000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <__fpending@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #106496	; 0x1a000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <mbrtowc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #106496	; 0x1a000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <error@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #106496	; 0x1a000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <open64@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #106496	; 0x1a000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <malloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #106496	; 0x1a000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__libc_start_main@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #106496	; 0x1a000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <__freading@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #106496	; 0x1a000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__gmon_start__@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #106496	; 0x1a000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <getopt_long@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #106496	; 0x1a000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <__ctype_b_loc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #106496	; 0x1a000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #106496	; 0x1a000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strlen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #106496	; 0x1a000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <strchr@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #106496	; 0x1a000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <memrchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #106496	; 0x1a000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #106496	; 0x1a000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <__cxa_atexit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #106496	; 0x1a000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <memset@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #106496	; 0x1a000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <__printf_chk@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #106496	; 0x1a000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <fileno@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #106496	; 0x1a000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <__fprintf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #106496	; 0x1a000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <memchr@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #106496	; 0x1a000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <fclose@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #106496	; 0x1a000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <fseeko64@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #106496	; 0x1a000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <setlocale@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #106496	; 0x1a000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <strrchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #106496	; 0x1a000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <nl_langinfo@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #106496	; 0x1a000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <clearerr_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #106496	; 0x1a000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <bindtextdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #106496	; 0x1a000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <strncmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #106496	; 0x1a000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <abort@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #106496	; 0x1a000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <close@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #106496	; 0x1a000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

00010f58 <__assert_fail@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #106496	; 0x1a000
   10f60:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f64 <.text>:
   10f64:	movw	r3, #45405	; 0xb15d
   10f68:	movt	r3, #2
   10f6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f70:	strd	r6, [sp, #8]
   10f74:	mov	r4, r3
   10f78:	mov	r6, r1
   10f7c:	strd	r8, [sp, #16]
   10f80:	mov	r8, r0
   10f84:	mov	r5, #0
   10f88:	strd	sl, [sp, #24]
   10f8c:	str	lr, [sp, #32]
   10f90:	sub	sp, sp, #332	; 0x14c
   10f94:	ldr	r0, [r1]
   10f98:	str	r3, [sp, #24]
   10f9c:	bl	13670 <__assert_fail@plt+0x2718>
   10fa0:	movw	r1, #39292	; 0x997c
   10fa4:	movt	r1, #1
   10fa8:	mov	r0, #6
   10fac:	bl	10ef8 <setlocale@plt>
   10fb0:	movw	r1, #40716	; 0x9f0c
   10fb4:	movt	r1, #1
   10fb8:	movw	r0, #40544	; 0x9e60
   10fbc:	movt	r0, #1
   10fc0:	bl	10f28 <bindtextdomain@plt>
   10fc4:	movw	r0, #40544	; 0x9e60
   10fc8:	movt	r0, #1
   10fcc:	bl	10d90 <textdomain@plt>
   10fd0:	movw	r0, #13124	; 0x3344
   10fd4:	movt	r0, #1
   10fd8:	bl	19748 <__assert_fail@plt+0x87f0>
   10fdc:	mov	r3, #10
   10fe0:	cmp	r8, #1
   10fe4:	strb	r3, [r4]
   10fe8:	strb	r5, [r4, #1]
   10fec:	strb	r5, [r4, #2]
   10ff0:	ble	11004 <__assert_fail@plt+0xac>
   10ff4:	ldr	r1, [r6, #4]
   10ff8:	ldrb	r3, [r1]
   10ffc:	cmp	r3, #45	; 0x2d
   11000:	beq	11190 <__assert_fail@plt+0x238>
   11004:	mov	r3, #1
   11008:	mov	r2, #10
   1100c:	str	r3, [sp, #32]
   11010:	mov	r3, #0
   11014:	strd	r2, [sp, #16]
   11018:	ldr	r9, [pc, #4032]	; 11fe0 <__assert_fail@plt+0x1088>
   1101c:	movw	r7, #40804	; 0x9f64
   11020:	movt	r7, #1
   11024:	movw	sl, #45400	; 0xb158
   11028:	movt	sl, #2
   1102c:	mov	r3, #0
   11030:	str	r3, [sp, #28]
   11034:	mov	r4, #0
   11038:	mov	r3, r9
   1103c:	mov	r2, r7
   11040:	mov	r1, r6
   11044:	mov	r0, r8
   11048:	str	r4, [sp]
   1104c:	bl	10e44 <getopt_long@plt>
   11050:	cmn	r0, #1
   11054:	beq	112cc <__assert_fail@plt+0x374>
   11058:	cmp	r0, #110	; 0x6e
   1105c:	beq	1111c <__assert_fail@plt+0x1c4>
   11060:	ble	11084 <__assert_fail@plt+0x12c>
   11064:	cmp	r0, #118	; 0x76
   11068:	beq	11114 <__assert_fail@plt+0x1bc>
   1106c:	ble	110e4 <__assert_fail@plt+0x18c>
   11070:	cmp	r0, #122	; 0x7a
   11074:	bne	110cc <__assert_fail@plt+0x174>
   11078:	ldr	r3, [sp, #24]
   1107c:	strb	r4, [r3]
   11080:	b	11034 <__assert_fail@plt+0xdc>
   11084:	cmn	r0, #2
   11088:	beq	12144 <__assert_fail@plt+0x11ec>
   1108c:	cmp	r0, #99	; 0x63
   11090:	bne	110f4 <__assert_fail@plt+0x19c>
   11094:	ldr	r3, [sl]
   11098:	mov	r0, #0
   1109c:	ldrb	r2, [r3]
   110a0:	cmp	r2, #45	; 0x2d
   110a4:	moveq	r2, #1
   110a8:	movne	r2, #0
   110ac:	addeq	r3, r3, #1
   110b0:	str	r2, [sp, #28]
   110b4:	streq	r3, [sl]
   110b8:	ldr	r1, [sl]
   110bc:	str	r0, [sp, #32]
   110c0:	bl	122cc <__assert_fail@plt+0x1374>
   110c4:	strd	r0, [sp, #16]
   110c8:	b	11034 <__assert_fail@plt+0xdc>
   110cc:	cmp	r0, #256	; 0x100
   110d0:	bne	120cc <__assert_fail@plt+0x1174>
   110d4:	ldr	r2, [sp, #24]
   110d8:	mov	r3, #1
   110dc:	strb	r3, [r2, #3]
   110e0:	b	11034 <__assert_fail@plt+0xdc>
   110e4:	cmp	r0, #113	; 0x71
   110e8:	bne	120cc <__assert_fail@plt+0x1174>
   110ec:	mov	r5, #2
   110f0:	b	11034 <__assert_fail@plt+0xdc>
   110f4:	cmn	r0, #3
   110f8:	mov	fp, r0
   110fc:	beq	11144 <__assert_fail@plt+0x1ec>
   11100:	sub	r3, fp, #48	; 0x30
   11104:	cmp	r3, #9
   11108:	bls	11c60 <__assert_fail@plt+0xd08>
   1110c:	mov	r0, #1
   11110:	bl	12f54 <__assert_fail@plt+0x1ffc>
   11114:	mov	r5, #1
   11118:	b	11034 <__assert_fail@plt+0xdc>
   1111c:	ldr	r3, [sl]
   11120:	mov	r0, #1
   11124:	ldrb	r2, [r3]
   11128:	cmp	r2, #45	; 0x2d
   1112c:	moveq	r2, #1
   11130:	movne	r2, #0
   11134:	addeq	r3, r3, #1
   11138:	str	r2, [sp, #28]
   1113c:	streq	r3, [sl]
   11140:	b	110b8 <__assert_fail@plt+0x160>
   11144:	movw	r1, #40772	; 0x9f44
   11148:	movt	r1, #1
   1114c:	movw	r2, #40788	; 0x9f54
   11150:	movt	r2, #1
   11154:	movw	r3, #45304	; 0xb0f8
   11158:	movt	r3, #2
   1115c:	movw	r0, #45396	; 0xb154
   11160:	movt	r0, #2
   11164:	str	r2, [sp]
   11168:	movw	r2, #40540	; 0x9e5c
   1116c:	movt	r2, #1
   11170:	stmib	sp, {r1, r4}
   11174:	movw	r1, #39212	; 0x992c
   11178:	movt	r1, #1
   1117c:	ldr	r0, [r0]
   11180:	ldr	r3, [r3]
   11184:	bl	17728 <__assert_fail@plt+0x67d0>
   11188:	mov	r0, r4
   1118c:	bl	10e5c <exit@plt>
   11190:	ldrb	r3, [r1, #1]
   11194:	sub	r3, r3, #48	; 0x30
   11198:	cmp	r3, #9
   1119c:	bhi	11004 <__assert_fail@plt+0xac>
   111a0:	add	r1, r1, #1
   111a4:	mov	r0, r1
   111a8:	ldrb	r3, [r0, #1]!
   111ac:	sub	r2, r3, #48	; 0x30
   111b0:	cmp	r2, #9
   111b4:	bls	111a8 <__assert_fail@plt+0x250>
   111b8:	cmp	r3, #0
   111bc:	beq	12130 <__assert_fail@plt+0x11d8>
   111c0:	mov	lr, #0
   111c4:	mov	r4, r0
   111c8:	mov	ip, lr
   111cc:	mov	r5, lr
   111d0:	mov	r7, #10
   111d4:	mov	r9, #1
   111d8:	sub	r2, r3, #98	; 0x62
   111dc:	cmp	r2, #24
   111e0:	ldrls	pc, [pc, r2, lsl #2]
   111e4:	b	11c8c <__assert_fail@plt+0xd34>
   111e8:	andeq	r1, r1, r0, asr #5
   111ec:			; <UNDEFINED> instruction: 0x000112b4
   111f0:	andeq	r1, r1, ip, lsl #25
   111f4:	andeq	r1, r1, ip, lsl #25
   111f8:	andeq	r1, r1, ip, lsl #25
   111fc:	andeq	r1, r1, ip, lsl #25
   11200:	andeq	r1, r1, ip, lsl #25
   11204:	andeq	r1, r1, ip, lsl #25
   11208:	andeq	r1, r1, ip, lsl #25
   1120c:	andeq	r1, r1, r0, asr #5
   11210:	andeq	r1, r1, ip, lsr #5
   11214:	andeq	r1, r1, r0, asr #5
   11218:	andeq	r1, r1, ip, lsl #25
   1121c:	andeq	r1, r1, ip, lsl #25
   11220:	andeq	r1, r1, ip, lsl #25
   11224:	andeq	r1, r1, r4, lsr #5
   11228:	andeq	r1, r1, ip, lsl #25
   1122c:	andeq	r1, r1, ip, lsl #25
   11230:	andeq	r1, r1, ip, lsl #25
   11234:	andeq	r1, r1, ip, lsl #25
   11238:	muleq	r1, ip, r2
   1123c:	andeq	r1, r1, ip, lsl #25
   11240:	andeq	r1, r1, ip, lsl #25
   11244:	andeq	r1, r1, ip, lsl #25
   11248:	andeq	r1, r1, ip, asr #4
   1124c:	mov	lr, #1
   11250:	mov	r7, #0
   11254:	ldrb	r3, [r4, #1]!
   11258:	cmp	r3, #0
   1125c:	bne	111d8 <__assert_fail@plt+0x280>
   11260:	cmp	lr, #0
   11264:	strb	ip, [r0]
   11268:	ldrne	r3, [sp, #24]
   1126c:	str	r9, [sp, #32]
   11270:	strbne	r7, [r3]
   11274:	cmp	ip, #0
   11278:	movne	r3, #0
   1127c:	strbne	r3, [r0, #1]
   11280:	ldr	r0, [sp, #32]
   11284:	sub	r8, r8, #1
   11288:	bl	122cc <__assert_fail@plt+0x1374>
   1128c:	ldr	r3, [r6]
   11290:	strd	r0, [sp, #16]
   11294:	str	r3, [r6, #4]!
   11298:	b	11018 <__assert_fail@plt+0xc0>
   1129c:	mov	r5, #1
   112a0:	b	11254 <__assert_fail@plt+0x2fc>
   112a4:	mov	r5, #2
   112a8:	b	11254 <__assert_fail@plt+0x2fc>
   112ac:	mov	r9, #1
   112b0:	b	11254 <__assert_fail@plt+0x2fc>
   112b4:	mov	ip, #0
   112b8:	mov	r9, ip
   112bc:	b	11254 <__assert_fail@plt+0x2fc>
   112c0:	mov	ip, r3
   112c4:	mov	r9, #0
   112c8:	b	11254 <__assert_fail@plt+0x2fc>
   112cc:	cmp	r5, #1
   112d0:	beq	114e4 <__assert_fail@plt+0x58c>
   112d4:	cmp	r5, r4
   112d8:	bne	112f4 <__assert_fail@plt+0x39c>
   112dc:	movw	r3, #45384	; 0xb148
   112e0:	movt	r3, #2
   112e4:	ldr	r3, [r3]
   112e8:	sub	r2, r8, #1
   112ec:	cmp	r2, r3
   112f0:	bgt	114e4 <__assert_fail@plt+0x58c>
   112f4:	ldrd	r2, [sp, #28]
   112f8:	eor	r3, r3, #1
   112fc:	tst	r2, r3
   11300:	beq	11314 <__assert_fail@plt+0x3bc>
   11304:	ldrd	r2, [sp, #16]
   11308:	cmp	r2, #0
   1130c:	sbcs	r3, r3, #0
   11310:	blt	12198 <__assert_fail@plt+0x1240>
   11314:	movw	r3, #45384	; 0xb148
   11318:	movt	r3, #2
   1131c:	ldr	r3, [r3]
   11320:	cmp	r3, r8
   11324:	bge	11ad8 <__assert_fail@plt+0xb80>
   11328:	ldr	fp, [r6, r3, lsl #2]
   1132c:	add	r6, r6, r3, lsl #2
   11330:	cmp	fp, #0
   11334:	beq	116f0 <__assert_fail@plt+0x798>
   11338:	ldrd	r2, [sp, #16]
   1133c:	str	r6, [sp, #40]	; 0x28
   11340:	adds	r0, r2, #8192	; 0x2000
   11344:	ubfx	r1, r2, #0, #13
   11348:	str	r0, [sp, #80]	; 0x50
   1134c:	adc	r0, r3, #0
   11350:	rsb	ip, r1, #8192	; 0x2000
   11354:	add	r3, ip, r2
   11358:	str	r0, [sp, #84]	; 0x54
   1135c:	movw	r0, #40712	; 0x9f08
   11360:	movt	r0, #1
   11364:	lsr	r3, r3, #13
   11368:	str	r0, [sp, #56]	; 0x38
   1136c:	mov	r0, r2
   11370:	movw	r2, #40944	; 0x9ff0
   11374:	movt	r2, #1
   11378:	str	r3, [sp, #76]	; 0x4c
   1137c:	str	r0, [sp, #92]	; 0x5c
   11380:	str	r2, [sp, #100]	; 0x64
   11384:	mov	r2, #1
   11388:	add	r3, r3, r2
   1138c:	str	r2, [sp, #36]	; 0x24
   11390:	str	r3, [sp, #112]	; 0x70
   11394:	lsr	r3, r3, r2
   11398:	str	ip, [sp, #116]	; 0x74
   1139c:	str	r1, [sp, #120]	; 0x78
   113a0:	str	r3, [sp, #96]	; 0x60
   113a4:	b	11470 <__assert_fail@plt+0x518>
   113a8:	ldr	ip, [sp, #24]
   113ac:	mov	r3, #1
   113b0:	movw	r1, #40832	; 0x9f80
   113b4:	movt	r1, #1
   113b8:	mov	r2, #5
   113bc:	strb	r3, [ip, #1]
   113c0:	bl	10d78 <dcgettext@plt>
   113c4:	mov	fp, r0
   113c8:	ldr	r3, [sp, #24]
   113cc:	ldrb	r3, [r3, #2]
   113d0:	cmp	r3, #0
   113d4:	beq	11418 <__assert_fail@plt+0x4c0>
   113d8:	movw	r4, #45300	; 0xb0f4
   113dc:	movt	r4, #2
   113e0:	ldrb	lr, [r4]
   113e4:	movw	ip, #40888	; 0x9fb8
   113e8:	movt	ip, #1
   113ec:	mov	r3, fp
   113f0:	movw	r2, #39292	; 0x997c
   113f4:	movt	r2, #1
   113f8:	movw	r1, #40876	; 0x9fac
   113fc:	movt	r1, #1
   11400:	mov	r0, #1
   11404:	cmp	lr, #0
   11408:	moveq	r2, ip
   1140c:	bl	10eb0 <__printf_chk@plt>
   11410:	mov	r3, #0
   11414:	strb	r3, [r4]
   11418:	ldr	r3, [sp, #28]
   1141c:	cmp	r3, #0
   11420:	bne	11500 <__assert_fail@plt+0x5a8>
   11424:	ldr	r3, [sp, #32]
   11428:	mov	r1, sl
   1142c:	mov	r0, fp
   11430:	cmp	r3, #0
   11434:	ldrd	r2, [sp, #16]
   11438:	beq	114f4 <__assert_fail@plt+0x59c>
   1143c:	bl	12cd8 <__assert_fail@plt+0x1d80>
   11440:	mov	r4, r0
   11444:	ldr	r3, [sp, #44]	; 0x2c
   11448:	cmp	r3, #0
   1144c:	bne	1165c <__assert_fail@plt+0x704>
   11450:	ldr	r3, [sp, #40]	; 0x28
   11454:	ldr	fp, [r3, #4]!
   11458:	str	r3, [sp, #40]	; 0x28
   1145c:	cmp	fp, #0
   11460:	ldr	r3, [sp, #36]	; 0x24
   11464:	and	r3, r3, r4
   11468:	str	r3, [sp, #36]	; 0x24
   1146c:	beq	116f8 <__assert_fail@plt+0x7a0>
   11470:	mov	r0, fp
   11474:	ldr	r1, [sp, #56]	; 0x38
   11478:	bl	10cf4 <strcmp@plt>
   1147c:	subs	sl, r0, #0
   11480:	str	sl, [sp, #44]	; 0x2c
   11484:	beq	113a8 <__assert_fail@plt+0x450>
   11488:	mov	r1, #0
   1148c:	mov	r0, fp
   11490:	bl	10e08 <open64@plt>
   11494:	subs	sl, r0, #0
   11498:	bge	113c8 <__assert_fail@plt+0x470>
   1149c:	bl	10e8c <__errno_location@plt>
   114a0:	movw	r1, #40848	; 0x9f90
   114a4:	movt	r1, #1
   114a8:	ldr	r5, [r0]
   114ac:	mov	r2, #5
   114b0:	mov	r0, #0
   114b4:	bl	10d78 <dcgettext@plt>
   114b8:	mov	r6, r0
   114bc:	mov	r4, #0
   114c0:	mov	r1, fp
   114c4:	mov	r0, #4
   114c8:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   114cc:	mov	r3, r0
   114d0:	mov	r2, r6
   114d4:	mov	r1, r5
   114d8:	mov	r0, r4
   114dc:	bl	10dfc <error@plt>
   114e0:	b	11450 <__assert_fail@plt+0x4f8>
   114e4:	ldr	r2, [sp, #24]
   114e8:	mov	r3, #1
   114ec:	strb	r3, [r2, #2]
   114f0:	b	112f4 <__assert_fail@plt+0x39c>
   114f4:	bl	12b84 <__assert_fail@plt+0x1c2c>
   114f8:	mov	r4, r0
   114fc:	b	11444 <__assert_fail@plt+0x4ec>
   11500:	add	r2, sp, #224	; 0xe0
   11504:	mov	r1, sl
   11508:	mov	r0, #3
   1150c:	bl	10db4 <__fxstat64@plt>
   11510:	cmp	r0, #0
   11514:	bne	11ae8 <__assert_fail@plt+0xb90>
   11518:	ldr	r3, [sp, #24]
   1151c:	ldrb	r4, [r3, #3]
   11520:	cmp	r4, #0
   11524:	bne	11538 <__assert_fail@plt+0x5e0>
   11528:	ldr	r3, [sp, #240]	; 0xf0
   1152c:	and	r3, r3, #53248	; 0xd000
   11530:	cmp	r3, #32768	; 0x8000
   11534:	beq	11b58 <__assert_fail@plt+0xc00>
   11538:	ldr	r3, [sp, #32]
   1153c:	mvn	r2, #0
   11540:	cmp	r3, #0
   11544:	mvn	r3, #0
   11548:	strd	r2, [sp, #64]	; 0x40
   1154c:	bne	11740 <__assert_fail@plt+0x7e8>
   11550:	ldrd	r0, [sp, #80]	; 0x50
   11554:	mov	r3, #0
   11558:	mvn	r2, #0
   1155c:	cmp	r1, r3
   11560:	cmpeq	r0, r2
   11564:	ldrd	r2, [sp, #64]	; 0x40
   11568:	strd	r2, [sp, #48]	; 0x30
   1156c:	bhi	12160 <__assert_fail@plt+0x1208>
   11570:	ldr	r3, [sp, #92]	; 0x5c
   11574:	cmp	r3, #1048576	; 0x100000
   11578:	bls	11e2c <__assert_fail@plt+0xed4>
   1157c:	ldr	r8, [sp, #112]	; 0x70
   11580:	mov	r6, #0
   11584:	mov	r5, #1
   11588:	mov	r4, r6
   1158c:	mov	r7, r6
   11590:	str	sl, [sp, #72]	; 0x48
   11594:	str	fp, [sp, #124]	; 0x7c
   11598:	mov	fp, r6
   1159c:	str	r6, [sp, #88]	; 0x58
   115a0:	cmp	fp, #0
   115a4:	bne	1172c <__assert_fail@plt+0x7d4>
   115a8:	cmp	r8, #16
   115ac:	movcc	fp, r8
   115b0:	movcs	fp, #16
   115b4:	mov	r0, r7
   115b8:	mov	r2, #4
   115bc:	mov	r1, fp
   115c0:	mov	sl, r6
   115c4:	bl	17a1c <__assert_fail@plt+0x6ac4>
   115c8:	mov	r7, r0
   115cc:	mov	r6, r5
   115d0:	cmp	r4, #0
   115d4:	beq	11698 <__assert_fail@plt+0x740>
   115d8:	mov	r2, #8192	; 0x2000
   115dc:	ldr	r1, [r7, sl, lsl #2]
   115e0:	ldr	r0, [sp, #72]	; 0x48
   115e4:	bl	13490 <__assert_fail@plt+0x2538>
   115e8:	cmp	r0, #8192	; 0x2000
   115ec:	mov	r9, r0
   115f0:	movcs	r2, #0
   115f4:	bcs	1160c <__assert_fail@plt+0x6b4>
   115f8:	bl	10e8c <__errno_location@plt>
   115fc:	ldr	r2, [r0]
   11600:	cmp	r2, #0
   11604:	bne	11fe8 <__assert_fail@plt+0x1090>
   11608:	mov	r2, r4
   1160c:	str	r2, [sp, #60]	; 0x3c
   11610:	mov	r1, r9
   11614:	ldr	r0, [r7, r5, lsl #2]
   11618:	ldrd	r2, [sp, #48]	; 0x30
   1161c:	ldr	r4, [sp, #28]
   11620:	adds	r2, r2, r9
   11624:	adc	r3, r3, #0
   11628:	strd	r2, [sp, #48]	; 0x30
   1162c:	bl	12354 <__assert_fail@plt+0x13fc>
   11630:	ldr	r2, [sp, #60]	; 0x3c
   11634:	add	r5, r5, #1
   11638:	cmp	r2, #0
   1163c:	udiv	r3, r5, r8
   11640:	mls	r5, r8, r3, r5
   11644:	bne	11d3c <__assert_fail@plt+0xde4>
   11648:	cmp	fp, r6
   1164c:	mov	sl, r6
   11650:	beq	115a0 <__assert_fail@plt+0x648>
   11654:	mov	r6, r5
   11658:	b	115d0 <__assert_fail@plt+0x678>
   1165c:	mov	r0, sl
   11660:	bl	10f4c <close@plt>
   11664:	cmp	r0, #0
   11668:	beq	11450 <__assert_fail@plt+0x4f8>
   1166c:	bl	10e8c <__errno_location@plt>
   11670:	mov	r2, #5
   11674:	ldr	r5, [r0]
   11678:	mov	r0, #0
   1167c:	mov	r4, r0
   11680:	ldr	r1, [sp, #100]	; 0x64
   11684:	bl	10d78 <dcgettext@plt>
   11688:	mov	r6, r0
   1168c:	mov	r1, fp
   11690:	mov	r0, #4
   11694:	b	114c8 <__assert_fail@plt+0x570>
   11698:	add	r3, sl, #1
   1169c:	mov	r0, #8192	; 0x2000
   116a0:	str	r3, [sp, #88]	; 0x58
   116a4:	bl	17938 <__assert_fail@plt+0x69e0>
   116a8:	mov	r1, r0
   116ac:	mov	r2, #8192	; 0x2000
   116b0:	str	r0, [r7, sl, lsl #2]
   116b4:	ldr	r0, [sp, #72]	; 0x48
   116b8:	bl	13490 <__assert_fail@plt+0x2538>
   116bc:	cmp	r0, #8192	; 0x2000
   116c0:	mov	r9, r0
   116c4:	movcs	r2, r4
   116c8:	bcs	116e0 <__assert_fail@plt+0x788>
   116cc:	bl	10e8c <__errno_location@plt>
   116d0:	ldr	r2, [r0]
   116d4:	cmp	r2, #0
   116d8:	bne	11fe8 <__assert_fail@plt+0x1090>
   116dc:	ldr	r2, [sp, #28]
   116e0:	ldr	r3, [sp, #76]	; 0x4c
   116e4:	cmp	r3, sl
   116e8:	bne	11634 <__assert_fail@plt+0x6dc>
   116ec:	b	1160c <__assert_fail@plt+0x6b4>
   116f0:	mov	r3, #1
   116f4:	str	r3, [sp, #36]	; 0x24
   116f8:	ldr	r3, [sp, #24]
   116fc:	ldrb	r3, [r3, #1]
   11700:	cmp	r3, #0
   11704:	bne	11b30 <__assert_fail@plt+0xbd8>
   11708:	ldr	r3, [sp, #36]	; 0x24
   1170c:	eor	r0, r3, #1
   11710:	add	sp, sp, #332	; 0x14c
   11714:	ldrd	r4, [sp]
   11718:	ldrd	r6, [sp, #8]
   1171c:	ldrd	r8, [sp, #16]
   11720:	ldrd	sl, [sp, #24]
   11724:	add	sp, sp, #32
   11728:	pop	{pc}		; (ldr pc, [sp], #4)
   1172c:	ldr	r3, [sp, #96]	; 0x60
   11730:	cmp	r3, fp
   11734:	lslcs	fp, fp, #1
   11738:	movcc	fp, r8
   1173c:	b	115b4 <__assert_fail@plt+0x65c>
   11740:	movw	r0, #8208	; 0x2010
   11744:	mov	r4, #0
   11748:	bl	17938 <__assert_fail@plt+0x69e0>
   1174c:	add	r3, r0, #8192	; 0x2000
   11750:	mov	r2, r0
   11754:	movw	r0, #8208	; 0x2010
   11758:	mov	r6, r4
   1175c:	str	r4, [r3, #4]
   11760:	str	r4, [r3, #8]
   11764:	str	r4, [r3, #12]
   11768:	str	r2, [sp, #60]	; 0x3c
   1176c:	str	r2, [sp, #72]	; 0x48
   11770:	ldrd	r2, [sp, #64]	; 0x40
   11774:	strd	r2, [sp, #48]	; 0x30
   11778:	bl	17938 <__assert_fail@plt+0x69e0>
   1177c:	mov	r8, r0
   11780:	mov	r2, #8192	; 0x2000
   11784:	mov	r1, r8
   11788:	mov	r0, sl
   1178c:	bl	17174 <__assert_fail@plt+0x621c>
   11790:	sub	r2, r0, #1
   11794:	mov	r3, r0
   11798:	cmn	r2, #3
   1179c:	bhi	118dc <__assert_fail@plt+0x984>
   117a0:	ldrd	r0, [sp, #16]
   117a4:	orrs	r2, r0, r1
   117a8:	beq	11880 <__assert_fail@plt+0x928>
   117ac:	ldr	r2, [sp, #24]
   117b0:	add	r4, r8, #8192	; 0x2000
   117b4:	add	r7, r8, r3
   117b8:	mov	r0, r8
   117bc:	str	r3, [r4, #4]
   117c0:	ldrb	r5, [r2]
   117c4:	mov	r2, #0
   117c8:	str	r2, [r4, #8]
   117cc:	str	r2, [r4, #12]
   117d0:	strb	r5, [r8, r3]
   117d4:	ldr	r9, [r4, #8]
   117d8:	b	117e8 <__assert_fail@plt+0x890>
   117dc:	add	r0, r0, #1
   117e0:	mov	r9, r3
   117e4:	str	r3, [r4, #8]
   117e8:	mov	r1, r5
   117ec:	bl	10d9c <rawmemchr@plt>
   117f0:	cmp	r7, r0
   117f4:	add	r3, r9, #1
   117f8:	bhi	117dc <__assert_fail@plt+0x884>
   117fc:	ldr	r3, [sp, #60]	; 0x3c
   11800:	add	r6, r6, r9
   11804:	ldr	r2, [r4, #4]
   11808:	add	r5, r3, #8192	; 0x2000
   1180c:	ldr	r0, [r5, #4]
   11810:	add	r3, r2, r0
   11814:	cmp	r3, #8192	; 0x2000
   11818:	bcc	118b4 <__assert_fail@plt+0x95c>
   1181c:	ldrd	r0, [sp, #16]
   11820:	mov	r3, #0
   11824:	ldr	ip, [sp, #72]	; 0x48
   11828:	cmp	r1, r3
   1182c:	add	r7, ip, #8192	; 0x2000
   11830:	ldr	r2, [r7, #8]
   11834:	str	r8, [r5, #12]
   11838:	sub	r2, r6, r2
   1183c:	cmpeq	r0, r2
   11840:	bcs	118a0 <__assert_fail@plt+0x948>
   11844:	ldr	r3, [r7, #4]
   11848:	mov	r0, ip
   1184c:	str	r8, [sp, #60]	; 0x3c
   11850:	mov	r8, ip
   11854:	ldrd	r4, [sp, #48]	; 0x30
   11858:	mov	r1, r3
   1185c:	adds	r4, r4, r3
   11860:	adc	r5, r5, #0
   11864:	strd	r4, [sp, #48]	; 0x30
   11868:	bl	12354 <__assert_fail@plt+0x13fc>
   1186c:	ldr	r3, [r7, #8]
   11870:	ldr	r2, [r7, #12]
   11874:	sub	r6, r6, r3
   11878:	str	r2, [sp, #72]	; 0x48
   1187c:	b	11780 <__assert_fail@plt+0x828>
   11880:	ldrd	r4, [sp, #48]	; 0x30
   11884:	mov	r1, r3
   11888:	mov	r0, r8
   1188c:	adds	r4, r4, r3
   11890:	adc	r5, r5, #0
   11894:	strd	r4, [sp, #48]	; 0x30
   11898:	bl	12354 <__assert_fail@plt+0x13fc>
   1189c:	b	11780 <__assert_fail@plt+0x828>
   118a0:	movw	r0, #8208	; 0x2010
   118a4:	str	r8, [sp, #60]	; 0x3c
   118a8:	bl	17938 <__assert_fail@plt+0x69e0>
   118ac:	mov	r8, r0
   118b0:	b	11780 <__assert_fail@plt+0x828>
   118b4:	ldr	r3, [sp, #60]	; 0x3c
   118b8:	mov	r1, r8
   118bc:	add	r0, r3, r0
   118c0:	bl	10d30 <memcpy@plt>
   118c4:	ldrd	r0, [r4, #4]
   118c8:	ldrd	r2, [r5, #4]
   118cc:	add	r2, r2, r0
   118d0:	add	r3, r3, r1
   118d4:	strd	r2, [r5, #4]
   118d8:	b	11780 <__assert_fail@plt+0x828>
   118dc:	mov	r0, r8
   118e0:	str	r3, [sp, #88]	; 0x58
   118e4:	bl	13430 <__assert_fail@plt+0x24d8>
   118e8:	ldr	r3, [sp, #88]	; 0x58
   118ec:	cmn	r3, #1
   118f0:	beq	12058 <__assert_fail@plt+0x1100>
   118f4:	ldr	r1, [sp, #60]	; 0x3c
   118f8:	add	r3, r1, #8192	; 0x2000
   118fc:	ldr	r2, [r3, #4]
   11900:	cmp	r2, #0
   11904:	bne	11bd4 <__assert_fail@plt+0xc7c>
   11908:	ldrd	r0, [sp, #16]
   1190c:	ldr	r3, [sp, #72]	; 0x48
   11910:	ldr	r5, [sp, #72]	; 0x48
   11914:	add	r7, r3, #8192	; 0x2000
   11918:	mov	r3, #0
   1191c:	ldr	r2, [r7, #8]
   11920:	cmp	r1, r3
   11924:	sub	r2, r6, r2
   11928:	cmpeq	r0, r2
   1192c:	bcs	11998 <__assert_fail@plt+0xa40>
   11930:	mov	r4, r7
   11934:	mov	ip, r5
   11938:	str	r7, [sp, #60]	; 0x3c
   1193c:	mov	r5, r6
   11940:	ldrd	r6, [sp, #16]
   11944:	ldrd	r8, [sp, #48]	; 0x30
   11948:	mov	r0, ip
   1194c:	ldr	r2, [r4, #4]
   11950:	adds	r8, r8, r2
   11954:	mov	r1, r2
   11958:	adc	r9, r9, #0
   1195c:	bl	12354 <__assert_fail@plt+0x13fc>
   11960:	ldr	r1, [r4, #8]
   11964:	mov	r3, #0
   11968:	cmp	r7, r3
   1196c:	ldr	ip, [r4, #12]
   11970:	sub	r5, r5, r1
   11974:	add	r4, ip, #8192	; 0x2000
   11978:	ldr	r2, [r4, #8]
   1197c:	sub	r2, r5, r2
   11980:	cmpeq	r6, r2
   11984:	bcc	11948 <__assert_fail@plt+0x9f0>
   11988:	ldr	r7, [sp, #60]	; 0x3c
   1198c:	mov	r6, r5
   11990:	mov	r5, ip
   11994:	strd	r8, [sp, #48]	; 0x30
   11998:	ldrd	r0, [sp, #16]
   1199c:	mov	r3, #0
   119a0:	cmp	r1, r3
   119a4:	cmpeq	r0, r6
   119a8:	bcs	11a20 <__assert_fail@plt+0xac8>
   119ac:	ldr	r3, [sp, #92]	; 0x5c
   119b0:	add	r4, r5, #8192	; 0x2000
   119b4:	mov	r0, r5
   119b8:	ldr	r8, [r4, #4]
   119bc:	sub	r6, r6, r3
   119c0:	ldr	r3, [sp, #24]
   119c4:	add	r8, r5, r8
   119c8:	ldrb	r9, [r3]
   119cc:	b	119f8 <__assert_fail@plt+0xaa0>
   119d0:	sub	r2, r8, r0
   119d4:	mov	r1, r9
   119d8:	bl	10ed4 <memchr@plt>
   119dc:	cmp	r0, #0
   119e0:	beq	11a00 <__assert_fail@plt+0xaa8>
   119e4:	ldr	r3, [r4, #8]
   119e8:	add	r0, r0, #1
   119ec:	sub	r6, r6, #1
   119f0:	add	r3, r3, #1
   119f4:	str	r3, [r4, #8]
   119f8:	cmp	r6, #0
   119fc:	bne	119d0 <__assert_fail@plt+0xa78>
   11a00:	sub	r3, r0, r5
   11a04:	mov	r0, r5
   11a08:	ldrd	r4, [sp, #48]	; 0x30
   11a0c:	mov	r1, r3
   11a10:	adds	r4, r4, r3
   11a14:	adc	r5, r5, r3, asr #31
   11a18:	strd	r4, [sp, #48]	; 0x30
   11a1c:	bl	12354 <__assert_fail@plt+0x13fc>
   11a20:	ldr	r4, [sp, #28]
   11a24:	ldr	r0, [sp, #72]	; 0x48
   11a28:	b	11a30 <__assert_fail@plt+0xad8>
   11a2c:	add	r7, r0, #8192	; 0x2000
   11a30:	ldr	r5, [r7, #12]
   11a34:	bl	13430 <__assert_fail@plt+0x24d8>
   11a38:	subs	r0, r5, #0
   11a3c:	bne	11a2c <__assert_fail@plt+0xad4>
   11a40:	ldrd	r2, [sp, #64]	; 0x40
   11a44:	mvn	r1, #0
   11a48:	mvn	r0, #0
   11a4c:	cmp	r3, r1
   11a50:	cmpeq	r2, r0
   11a54:	beq	11444 <__assert_fail@plt+0x4ec>
   11a58:	mov	r5, #0
   11a5c:	mov	r0, sl
   11a60:	ldrd	r2, [sp, #48]	; 0x30
   11a64:	str	r5, [sp]
   11a68:	bl	10dcc <lseek64@plt>
   11a6c:	cmp	r0, #0
   11a70:	sbcs	r3, r1, #0
   11a74:	bge	11444 <__assert_fail@plt+0x4ec>
   11a78:	bl	10e8c <__errno_location@plt>
   11a7c:	mov	r2, #5
   11a80:	movw	r1, #39140	; 0x98e4
   11a84:	movt	r1, #1
   11a88:	ldr	r7, [r0]
   11a8c:	mov	r0, r5
   11a90:	bl	10d78 <dcgettext@plt>
   11a94:	mov	r8, r0
   11a98:	mov	r2, fp
   11a9c:	mov	r1, #3
   11aa0:	mov	r0, r5
   11aa4:	bl	16834 <__assert_fail@plt+0x58dc>
   11aa8:	mov	r6, r0
   11aac:	add	r2, sp, #152	; 0x98
   11ab0:	ldrd	r0, [sp, #48]	; 0x30
   11ab4:	mov	r4, r5
   11ab8:	bl	13518 <__assert_fail@plt+0x25c0>
   11abc:	mov	r1, r7
   11ac0:	mov	r3, r6
   11ac4:	str	r0, [sp]
   11ac8:	mov	r2, r8
   11acc:	mov	r0, r5
   11ad0:	bl	10dfc <error@plt>
   11ad4:	b	11444 <__assert_fail@plt+0x4ec>
   11ad8:	movw	fp, #40712	; 0x9f08
   11adc:	movt	fp, #1
   11ae0:	ldr	r6, [pc, #1276]	; 11fe4 <__assert_fail@plt+0x108c>
   11ae4:	b	11338 <__assert_fail@plt+0x3e0>
   11ae8:	bl	10e8c <__errno_location@plt>
   11aec:	ldr	r5, [r0]
   11af0:	mov	r2, #5
   11af4:	movw	r1, #40892	; 0x9fbc
   11af8:	movt	r1, #1
   11afc:	mov	r0, #0
   11b00:	bl	10d78 <dcgettext@plt>
   11b04:	mov	r6, r0
   11b08:	mov	r1, fp
   11b0c:	mov	r0, #4
   11b10:	mov	r4, #0
   11b14:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   11b18:	mov	r3, r0
   11b1c:	mov	r2, r6
   11b20:	mov	r1, r5
   11b24:	mov	r0, r4
   11b28:	bl	10dfc <error@plt>
   11b2c:	b	11444 <__assert_fail@plt+0x4ec>
   11b30:	mov	r0, #0
   11b34:	bl	10f4c <close@plt>
   11b38:	cmp	r0, #0
   11b3c:	bge	11708 <__assert_fail@plt+0x7b0>
   11b40:	bl	10e8c <__errno_location@plt>
   11b44:	movw	r2, #40712	; 0x9f08
   11b48:	movt	r2, #1
   11b4c:	ldr	r1, [r0]
   11b50:	mov	r0, #1
   11b54:	bl	10dfc <error@plt>
   11b58:	mov	r5, #1
   11b5c:	mov	r2, #0
   11b60:	mov	r3, #0
   11b64:	mov	r0, sl
   11b68:	str	r5, [sp]
   11b6c:	bl	10dcc <lseek64@plt>
   11b70:	mov	r3, r1
   11b74:	mov	r2, r0
   11b78:	cmp	r0, #0
   11b7c:	strd	r2, [sp, #64]	; 0x40
   11b80:	sbcs	r3, r3, #0
   11b84:	blt	11c00 <__assert_fail@plt+0xca8>
   11b88:	ldr	r3, [sp, #32]
   11b8c:	ldr	r2, [sp, #280]	; 0x118
   11b90:	cmp	r3, #0
   11b94:	add	r3, sp, #272	; 0x110
   11b98:	ldrd	r6, [r3]
   11b9c:	sub	r3, r2, #1
   11ba0:	beq	11cc8 <__assert_fail@plt+0xd70>
   11ba4:	cmp	r3, #536870912	; 0x20000000
   11ba8:	movcs	r2, #512	; 0x200
   11bac:	asr	r3, r2, #31
   11bb0:	cmp	r2, r6
   11bb4:	sbcs	r3, r3, r7
   11bb8:	bge	11740 <__assert_fail@plt+0x7e8>
   11bbc:	ldrd	r2, [sp, #64]	; 0x40
   11bc0:	cmp	r2, r6
   11bc4:	sbcs	r3, r3, r7
   11bc8:	blt	12034 <__assert_fail@plt+0x10dc>
   11bcc:	and	r4, r5, #1
   11bd0:	b	11444 <__assert_fail@plt+0x4ec>
   11bd4:	add	r1, r1, r2
   11bd8:	ldr	r2, [sp, #24]
   11bdc:	ldrb	r1, [r1, #-1]
   11be0:	ldrb	r2, [r2]
   11be4:	cmp	r1, r2
   11be8:	beq	11908 <__assert_fail@plt+0x9b0>
   11bec:	ldr	r2, [r3, #8]
   11bf0:	add	r6, r6, #1
   11bf4:	add	r2, r2, #1
   11bf8:	str	r2, [r3, #8]
   11bfc:	b	11908 <__assert_fail@plt+0x9b0>
   11c00:	bl	10e8c <__errno_location@plt>
   11c04:	mov	r2, #5
   11c08:	movw	r1, #39172	; 0x9904
   11c0c:	movt	r1, #1
   11c10:	ldr	r6, [r0]
   11c14:	mov	r0, r4
   11c18:	bl	10d78 <dcgettext@plt>
   11c1c:	mov	r7, r0
   11c20:	mov	r2, fp
   11c24:	mov	r1, #3
   11c28:	mov	r0, r4
   11c2c:	bl	16834 <__assert_fail@plt+0x58dc>
   11c30:	mov	r5, r0
   11c34:	add	r2, sp, #128	; 0x80
   11c38:	mov	r1, #0
   11c3c:	mov	r0, #0
   11c40:	bl	13518 <__assert_fail@plt+0x25c0>
   11c44:	mov	r1, r6
   11c48:	mov	r3, r5
   11c4c:	str	r0, [sp]
   11c50:	mov	r2, r7
   11c54:	mov	r0, r4
   11c58:	bl	10dfc <error@plt>
   11c5c:	b	11444 <__assert_fail@plt+0x4ec>
   11c60:	mov	r2, #5
   11c64:	movw	r1, #40740	; 0x9f24
   11c68:	movt	r1, #1
   11c6c:	mov	r0, #0
   11c70:	bl	10d78 <dcgettext@plt>
   11c74:	mov	r1, #0
   11c78:	mov	r2, r0
   11c7c:	mov	r3, fp
   11c80:	mov	r0, r1
   11c84:	bl	10dfc <error@plt>
   11c88:	b	1110c <__assert_fail@plt+0x1b4>
   11c8c:	cmp	lr, #0
   11c90:	mov	r2, #5
   11c94:	ldrne	r3, [sp, #24]
   11c98:	movw	r1, #40740	; 0x9f24
   11c9c:	movt	r1, #1
   11ca0:	mov	r0, #0
   11ca4:	strbne	r7, [r3]
   11ca8:	bl	10d78 <dcgettext@plt>
   11cac:	mov	r1, #0
   11cb0:	mov	r2, r0
   11cb4:	ldrb	r3, [r4]
   11cb8:	mov	r0, r1
   11cbc:	bl	10dfc <error@plt>
   11cc0:	mov	r0, #1
   11cc4:	bl	12f54 <__assert_fail@plt+0x1ffc>
   11cc8:	cmp	r3, #536870912	; 0x20000000
   11ccc:	movcs	r2, #512	; 0x200
   11cd0:	asr	r3, r2, #31
   11cd4:	cmp	r2, r6
   11cd8:	sbcs	r3, r3, r7
   11cdc:	bge	11550 <__assert_fail@plt+0x5f8>
   11ce0:	ldrd	r2, [sp, #64]	; 0x40
   11ce4:	subs	r1, r6, r2
   11ce8:	sbc	r3, r7, r3
   11cec:	str	r1, [sp, #104]	; 0x68
   11cf0:	str	r3, [sp, #108]	; 0x6c
   11cf4:	ldrd	r2, [sp, #104]	; 0x68
   11cf8:	cmp	r2, #0
   11cfc:	sbcs	r1, r3, #0
   11d00:	blt	11d34 <__assert_fail@plt+0xddc>
   11d04:	ldrd	r0, [sp, #16]
   11d08:	cmp	r1, r3
   11d0c:	cmpeq	r0, r2
   11d10:	bcs	11d34 <__assert_fail@plt+0xddc>
   11d14:	ldrd	r4, [sp, #16]
   11d18:	mov	r0, sl
   11d1c:	ldrd	r6, [sp, #104]	; 0x68
   11d20:	subs	r2, r6, r4
   11d24:	sbc	r3, r7, r5
   11d28:	bl	12a64 <__assert_fail@plt+0x1b0c>
   11d2c:	cmp	r0, #0
   11d30:	bne	12120 <__assert_fail@plt+0x11c8>
   11d34:	ldr	r4, [sp, #28]
   11d38:	b	11444 <__assert_fail@plt+0x4ec>
   11d3c:	mov	ip, r4
   11d40:	mov	r8, r4
   11d44:	ldr	sl, [sp, #72]	; 0x48
   11d48:	cmp	ip, #0
   11d4c:	mov	r4, r2
   11d50:	ldr	fp, [sp, #124]	; 0x7c
   11d54:	beq	11fac <__assert_fail@plt+0x1054>
   11d58:	rsb	r1, r9, #8192	; 0x2000
   11d5c:	ldrd	r2, [sp, #48]	; 0x30
   11d60:	ldr	r0, [sp, #116]	; 0x74
   11d64:	ldr	lr, [r7, r6, lsl #2]
   11d68:	adds	r2, r2, r0
   11d6c:	adc	r3, r3, #0
   11d70:	cmp	r0, r1
   11d74:	strd	r2, [sp, #48]	; 0x30
   11d78:	mov	r3, r0
   11d7c:	add	r0, lr, r9
   11d80:	bcs	120b0 <__assert_fail@plt+0x1158>
   11d84:	mov	r1, r3
   11d88:	mov	r4, ip
   11d8c:	bl	12354 <__assert_fail@plt+0x13fc>
   11d90:	ldr	r3, [sp, #88]	; 0x58
   11d94:	mov	r5, r7
   11d98:	add	r6, r7, r3, lsl #2
   11d9c:	b	11da8 <__assert_fail@plt+0xe50>
   11da0:	ldr	r0, [r5], #4
   11da4:	bl	13430 <__assert_fail@plt+0x24d8>
   11da8:	cmp	r6, r5
   11dac:	bne	11da0 <__assert_fail@plt+0xe48>
   11db0:	mov	r0, r7
   11db4:	bl	13430 <__assert_fail@plt+0x24d8>
   11db8:	ldrd	r2, [sp, #64]	; 0x40
   11dbc:	mvn	r1, #0
   11dc0:	mvn	r0, #0
   11dc4:	cmp	r3, r1
   11dc8:	cmpeq	r2, r0
   11dcc:	beq	11444 <__assert_fail@plt+0x4ec>
   11dd0:	mov	r5, #0
   11dd4:	mov	r0, sl
   11dd8:	ldrd	r2, [sp, #48]	; 0x30
   11ddc:	str	r5, [sp]
   11de0:	bl	10dcc <lseek64@plt>
   11de4:	cmp	r0, #0
   11de8:	sbcs	r3, r1, #0
   11dec:	bge	11444 <__assert_fail@plt+0x4ec>
   11df0:	bl	10e8c <__errno_location@plt>
   11df4:	mov	r2, #5
   11df8:	movw	r1, #39140	; 0x98e4
   11dfc:	movt	r1, #1
   11e00:	ldr	r7, [r0]
   11e04:	mov	r0, r5
   11e08:	bl	10d78 <dcgettext@plt>
   11e0c:	mov	r8, r0
   11e10:	mov	r2, fp
   11e14:	mov	r1, #3
   11e18:	mov	r0, r5
   11e1c:	bl	16834 <__assert_fail@plt+0x58dc>
   11e20:	mov	r6, r0
   11e24:	add	r2, sp, #200	; 0xc8
   11e28:	b	11ab0 <__assert_fail@plt+0xb58>
   11e2c:	add	r7, r3, #8192	; 0x2000
   11e30:	mov	r0, #2
   11e34:	ldr	r4, [sp, #28]
   11e38:	mov	r1, r7
   11e3c:	mov	r9, r3
   11e40:	bl	17a9c <__assert_fail@plt+0x6b44>
   11e44:	mov	r2, r0
   11e48:	add	r3, r0, r7
   11e4c:	str	sl, [sp, #60]	; 0x3c
   11e50:	mov	r5, #0
   11e54:	str	fp, [sp, #72]	; 0x48
   11e58:	str	r0, [sp, #88]	; 0x58
   11e5c:	strd	r2, [sp, #176]	; 0xb0
   11e60:	ldrd	sl, [sp, #48]	; 0x30
   11e64:	b	11ef8 <__assert_fail@plt+0xfa0>
   11e68:	str	r0, [sp, #48]	; 0x30
   11e6c:	bl	10e8c <__errno_location@plt>
   11e70:	ldr	r8, [r0]
   11e74:	ldr	r3, [sp, #48]	; 0x30
   11e78:	cmp	r8, #0
   11e7c:	bne	120d4 <__assert_fail@plt+0x117c>
   11e80:	cmp	r9, r3
   11e84:	bcc	11f44 <__assert_fail@plt+0xfec>
   11e88:	cmp	r4, #0
   11e8c:	bne	11f94 <__assert_fail@plt+0x103c>
   11e90:	sub	r4, r9, r3
   11e94:	eor	r8, r5, #1
   11e98:	str	r3, [sp, #48]	; 0x30
   11e9c:	add	r3, sp, #328	; 0x148
   11ea0:	uxtb	r2, r8
   11ea4:	sub	r1, r9, r4
   11ea8:	add	r2, r3, r2, lsl #2
   11eac:	adds	sl, sl, r1
   11eb0:	adc	fp, fp, #0
   11eb4:	ldr	r0, [r2, #-152]	; 0xffffff68
   11eb8:	add	r0, r0, #8192	; 0x2000
   11ebc:	bl	12354 <__assert_fail@plt+0x13fc>
   11ec0:	ldr	r3, [sp, #48]	; 0x30
   11ec4:	cmp	r9, r3
   11ec8:	bcs	1214c <__assert_fail@plt+0x11f4>
   11ecc:	ldr	r4, [sp, #28]
   11ed0:	sub	r3, r3, r9
   11ed4:	mov	r0, r6
   11ed8:	adds	sl, sl, r3
   11edc:	mov	r1, r3
   11ee0:	adc	fp, fp, #0
   11ee4:	uxtb	r5, r8
   11ee8:	bl	12354 <__assert_fail@plt+0x13fc>
   11eec:	cmp	r4, #0
   11ef0:	bne	11f94 <__assert_fail@plt+0x103c>
   11ef4:	mov	r4, #0
   11ef8:	add	r3, sp, #328	; 0x148
   11efc:	mov	r2, r7
   11f00:	ldr	r0, [sp, #60]	; 0x3c
   11f04:	add	r3, r3, r5, lsl #2
   11f08:	ldr	r6, [r3, #-152]	; 0xffffff68
   11f0c:	mov	r1, r6
   11f10:	bl	13490 <__assert_fail@plt+0x2538>
   11f14:	cmp	r7, r0
   11f18:	mov	r3, r0
   11f1c:	bhi	11e68 <__assert_fail@plt+0xf10>
   11f20:	cmp	r4, #0
   11f24:	beq	11f54 <__assert_fail@plt+0xffc>
   11f28:	cmp	r9, r0
   11f2c:	eorcs	r5, r5, #1
   11f30:	uxtbcs	r5, r5
   11f34:	bcs	11ef4 <__assert_fail@plt+0xf9c>
   11f38:	eor	r8, r5, #1
   11f3c:	mov	r4, #0
   11f40:	b	11ed0 <__assert_fail@plt+0xf78>
   11f44:	cmp	r4, #0
   11f48:	eorne	r8, r5, #1
   11f4c:	bne	11ed0 <__assert_fail@plt+0xf78>
   11f50:	b	11e94 <__assert_fail@plt+0xf3c>
   11f54:	eor	r8, r5, #1
   11f58:	add	r3, sp, #328	; 0x148
   11f5c:	str	r0, [sp, #48]	; 0x30
   11f60:	uxtb	r5, r8
   11f64:	ldr	r2, [sp, #16]
   11f68:	mov	r1, r9
   11f6c:	add	r0, r3, r5, lsl #2
   11f70:	ldr	r0, [r0, #-152]	; 0xffffff68
   11f74:	adds	sl, sl, r2
   11f78:	adc	fp, fp, r4
   11f7c:	add	r0, r0, #8192	; 0x2000
   11f80:	bl	12354 <__assert_fail@plt+0x13fc>
   11f84:	ldr	r3, [sp, #48]	; 0x30
   11f88:	cmp	r9, r3
   11f8c:	bcs	11ef4 <__assert_fail@plt+0xf9c>
   11f90:	b	11ed0 <__assert_fail@plt+0xf78>
   11f94:	strd	sl, [sp, #48]	; 0x30
   11f98:	ldr	sl, [sp, #60]	; 0x3c
   11f9c:	ldr	fp, [sp, #72]	; 0x48
   11fa0:	ldr	r0, [sp, #88]	; 0x58
   11fa4:	bl	13430 <__assert_fail@plt+0x24d8>
   11fa8:	b	11db8 <__assert_fail@plt+0xe60>
   11fac:	ldr	r3, [sp, #76]	; 0x4c
   11fb0:	cmp	r3, r6
   11fb4:	bne	11d90 <__assert_fail@plt+0xe38>
   11fb8:	ldr	r3, [sp, #120]	; 0x78
   11fbc:	ldr	r0, [r7, r5, lsl #2]
   11fc0:	sub	r2, r9, r3
   11fc4:	ldrd	r8, [sp, #48]	; 0x30
   11fc8:	mov	r1, r2
   11fcc:	adds	r8, r8, r2
   11fd0:	adc	r9, r9, #0
   11fd4:	strd	r8, [sp, #48]	; 0x30
   11fd8:	bl	12354 <__assert_fail@plt+0x13fc>
   11fdc:	b	11d90 <__assert_fail@plt+0xe38>
   11fe0:	andeq	r9, r1, ip, lsr #15
   11fe4:	andeq	r9, r1, r4, lsr #15
   11fe8:	mov	r6, r2
   11fec:	movw	r1, #39088	; 0x98b0
   11ff0:	movt	r1, #1
   11ff4:	ldr	fp, [sp, #124]	; 0x7c
   11ff8:	mov	r2, #5
   11ffc:	mov	r0, #0
   12000:	mov	r4, #0
   12004:	ldr	sl, [sp, #72]	; 0x48
   12008:	bl	10d78 <dcgettext@plt>
   1200c:	mov	r5, r0
   12010:	mov	r0, #4
   12014:	mov	r1, fp
   12018:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   1201c:	mov	r3, r0
   12020:	mov	r2, r5
   12024:	mov	r1, r6
   12028:	mov	r0, r4
   1202c:	bl	10dfc <error@plt>
   12030:	b	11d90 <__assert_fail@plt+0xe38>
   12034:	ldrd	r2, [sp, #64]	; 0x40
   12038:	mov	r1, sl
   1203c:	mov	r0, fp
   12040:	strd	r2, [sp]
   12044:	strd	r6, [sp, #8]
   12048:	ldrd	r2, [sp, #16]
   1204c:	bl	1248c <__assert_fail@plt+0x1534>
   12050:	mov	r5, r0
   12054:	b	11bcc <__assert_fail@plt+0xc74>
   12058:	bl	10e8c <__errno_location@plt>
   1205c:	ldr	r4, [r0]
   12060:	mov	r2, #5
   12064:	movw	r1, #39088	; 0x98b0
   12068:	movt	r1, #1
   1206c:	mov	r0, #0
   12070:	bl	10d78 <dcgettext@plt>
   12074:	mov	r5, r0
   12078:	mov	r1, fp
   1207c:	mov	r0, #4
   12080:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   12084:	mov	r3, r0
   12088:	mov	r1, r4
   1208c:	mov	r2, r5
   12090:	mov	r0, #0
   12094:	bl	10dfc <error@plt>
   12098:	ldr	r4, [sp, #72]	; 0x48
   1209c:	cmp	r4, #0
   120a0:	beq	11a40 <__assert_fail@plt+0xae8>
   120a4:	mov	r4, #0
   120a8:	ldr	r0, [sp, #72]	; 0x48
   120ac:	b	11a2c <__assert_fail@plt+0xad4>
   120b0:	bl	12354 <__assert_fail@plt+0x13fc>
   120b4:	ldr	r3, [sp, #120]	; 0x78
   120b8:	mov	r4, r8
   120bc:	ldr	r0, [r7, r5, lsl #2]
   120c0:	sub	r1, r9, r3
   120c4:	bl	12354 <__assert_fail@plt+0x13fc>
   120c8:	b	11d90 <__assert_fail@plt+0xe38>
   120cc:	mov	fp, r0
   120d0:	b	11100 <__assert_fail@plt+0x1a8>
   120d4:	strd	sl, [sp, #48]	; 0x30
   120d8:	mov	r2, #5
   120dc:	movw	r1, #39088	; 0x98b0
   120e0:	movt	r1, #1
   120e4:	mov	r0, #0
   120e8:	ldr	sl, [sp, #60]	; 0x3c
   120ec:	mov	r4, #0
   120f0:	ldr	fp, [sp, #72]	; 0x48
   120f4:	bl	10d78 <dcgettext@plt>
   120f8:	mov	r5, r0
   120fc:	mov	r0, #4
   12100:	mov	r1, fp
   12104:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   12108:	mov	r3, r0
   1210c:	mov	r2, r5
   12110:	mov	r1, r8
   12114:	mov	r0, r4
   12118:	bl	10dfc <error@plt>
   1211c:	b	11fa0 <__assert_fail@plt+0x1048>
   12120:	mov	r1, fp
   12124:	mov	r4, #0
   12128:	bl	123e4 <__assert_fail@plt+0x148c>
   1212c:	b	11444 <__assert_fail@plt+0x4ec>
   12130:	mov	r5, r3
   12134:	strb	r3, [r0]
   12138:	mov	r3, #1
   1213c:	str	r3, [sp, #32]
   12140:	b	11280 <__assert_fail@plt+0x328>
   12144:	mov	r0, r4
   12148:	bl	12f54 <__assert_fail@plt+0x1ffc>
   1214c:	strd	sl, [sp, #48]	; 0x30
   12150:	ldr	r4, [sp, #28]
   12154:	ldr	sl, [sp, #60]	; 0x3c
   12158:	ldr	fp, [sp, #72]	; 0x48
   1215c:	b	11fa0 <__assert_fail@plt+0x1048>
   12160:	mov	r2, #5
   12164:	movw	r1, #40908	; 0x9fcc
   12168:	movt	r1, #1
   1216c:	mov	r0, #0
   12170:	bl	10d78 <dcgettext@plt>
   12174:	mov	r4, r0
   12178:	add	r2, sp, #176	; 0xb0
   1217c:	ldrd	r0, [sp, #16]
   12180:	bl	135f8 <__assert_fail@plt+0x26a0>
   12184:	mov	r3, r0
   12188:	mov	r2, r4
   1218c:	mov	r1, #0
   12190:	mov	r0, #1
   12194:	bl	10dfc <error@plt>
   12198:	mov	r2, #5
   1219c:	movw	r1, #39012	; 0x9864
   121a0:	movt	r1, #1
   121a4:	mov	r0, #0
   121a8:	bl	10d78 <dcgettext@plt>
   121ac:	mov	r4, r0
   121b0:	add	r2, sp, #224	; 0xe0
   121b4:	ldrd	r0, [sp, #16]
   121b8:	bl	135f8 <__assert_fail@plt+0x26a0>
   121bc:	bl	16fe0 <__assert_fail@plt+0x6088>
   121c0:	movw	r2, #40824	; 0x9f78
   121c4:	movt	r2, #1
   121c8:	str	r0, [sp]
   121cc:	mov	r3, r4
   121d0:	mov	r1, #75	; 0x4b
   121d4:	mov	r0, #1
   121d8:	bl	10dfc <error@plt>
   121dc:	mov	fp, #0
   121e0:	mov	lr, #0
   121e4:	pop	{r1}		; (ldr r1, [sp], #4)
   121e8:	mov	r2, sp
   121ec:	push	{r2}		; (str r2, [sp, #-4]!)
   121f0:	push	{r0}		; (str r0, [sp, #-4]!)
   121f4:	ldr	ip, [pc, #16]	; 1220c <__assert_fail@plt+0x12b4>
   121f8:	push	{ip}		; (str ip, [sp, #-4]!)
   121fc:	ldr	r0, [pc, #12]	; 12210 <__assert_fail@plt+0x12b8>
   12200:	ldr	r3, [pc, #12]	; 12214 <__assert_fail@plt+0x12bc>
   12204:	bl	10e20 <__libc_start_main@plt>
   12208:	bl	10f40 <abort@plt>
   1220c:	andeq	r9, r1, r4, asr #14
   12210:	andeq	r0, r1, r4, ror #30
   12214:	andeq	r9, r1, r4, ror #13
   12218:	ldr	r3, [pc, #20]	; 12234 <__assert_fail@plt+0x12dc>
   1221c:	ldr	r2, [pc, #20]	; 12238 <__assert_fail@plt+0x12e0>
   12220:	add	r3, pc, r3
   12224:	ldr	r2, [r3, r2]
   12228:	cmp	r2, #0
   1222c:	bxeq	lr
   12230:	b	10e38 <__gmon_start__@plt>
   12234:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12238:	andeq	r0, r0, r8, ror #1
   1223c:	ldr	r0, [pc, #24]	; 1225c <__assert_fail@plt+0x1304>
   12240:	ldr	r3, [pc, #24]	; 12260 <__assert_fail@plt+0x1308>
   12244:	cmp	r3, r0
   12248:	bxeq	lr
   1224c:	ldr	r3, [pc, #16]	; 12264 <__assert_fail@plt+0x130c>
   12250:	cmp	r3, #0
   12254:	bxeq	lr
   12258:	bx	r3
   1225c:	andeq	fp, r2, r0, asr #2
   12260:	andeq	fp, r2, r0, asr #2
   12264:	andeq	r0, r0, r0
   12268:	ldr	r0, [pc, #36]	; 12294 <__assert_fail@plt+0x133c>
   1226c:	ldr	r1, [pc, #36]	; 12298 <__assert_fail@plt+0x1340>
   12270:	sub	r1, r1, r0
   12274:	asr	r1, r1, #2
   12278:	add	r1, r1, r1, lsr #31
   1227c:	asrs	r1, r1, #1
   12280:	bxeq	lr
   12284:	ldr	r3, [pc, #16]	; 1229c <__assert_fail@plt+0x1344>
   12288:	cmp	r3, #0
   1228c:	bxeq	lr
   12290:	bx	r3
   12294:	andeq	fp, r2, r0, asr #2
   12298:	andeq	fp, r2, r0, asr #2
   1229c:	andeq	r0, r0, r0
   122a0:	push	{r4, lr}
   122a4:	ldr	r4, [pc, #24]	; 122c4 <__assert_fail@plt+0x136c>
   122a8:	ldrb	r3, [r4]
   122ac:	cmp	r3, #0
   122b0:	popne	{r4, pc}
   122b4:	bl	1223c <__assert_fail@plt+0x12e4>
   122b8:	mov	r3, #1
   122bc:	strb	r3, [r4]
   122c0:	pop	{r4, pc}
   122c4:	andeq	fp, r2, ip, asr r1
   122c8:	b	12268 <__assert_fail@plt+0x1310>
   122cc:	cmp	r0, #0
   122d0:	strd	r4, [sp, #-16]!
   122d4:	str	r6, [sp, #8]
   122d8:	mov	r6, r1
   122dc:	str	lr, [sp, #12]
   122e0:	sub	sp, sp, #24
   122e4:	beq	12340 <__assert_fail@plt+0x13e8>
   122e8:	movw	r1, #38988	; 0x984c
   122ec:	movt	r1, #1
   122f0:	mov	r2, #5
   122f4:	mov	r0, #0
   122f8:	bl	10d78 <dcgettext@plt>
   122fc:	mov	r1, #0
   12300:	mvn	r4, #0
   12304:	mvn	r5, #0
   12308:	movw	r3, #39036	; 0x987c
   1230c:	movt	r3, #1
   12310:	mov	r2, #0
   12314:	strd	r4, [sp]
   12318:	str	r3, [sp, #8]
   1231c:	mov	r3, #0
   12320:	strd	r0, [sp, #12]
   12324:	mov	r0, r6
   12328:	bl	18078 <__assert_fail@plt+0x7120>
   1232c:	add	sp, sp, #24
   12330:	ldrd	r4, [sp]
   12334:	ldr	r6, [sp, #8]
   12338:	add	sp, sp, #12
   1233c:	pop	{pc}		; (ldr pc, [sp], #4)
   12340:	movw	r1, #39012	; 0x9864
   12344:	movt	r1, #1
   12348:	mov	r2, #5
   1234c:	bl	10d78 <dcgettext@plt>
   12350:	b	122fc <__assert_fail@plt+0x13a4>
   12354:	strd	r4, [sp, #-16]!
   12358:	subs	r4, r1, #0
   1235c:	str	r6, [sp, #8]
   12360:	str	lr, [sp, #12]
   12364:	beq	12388 <__assert_fail@plt+0x1430>
   12368:	movw	r5, #45396	; 0xb154
   1236c:	movt	r5, #2
   12370:	mov	r2, r4
   12374:	mov	r1, #1
   12378:	ldr	r3, [r5]
   1237c:	bl	10d54 <fwrite_unlocked@plt>
   12380:	cmp	r4, r0
   12384:	bhi	12398 <__assert_fail@plt+0x1440>
   12388:	ldrd	r4, [sp]
   1238c:	ldr	r6, [sp, #8]
   12390:	add	sp, sp, #12
   12394:	pop	{pc}		; (ldr pc, [sp], #4)
   12398:	ldr	r0, [r5]
   1239c:	bl	10f1c <clearerr_unlocked@plt>
   123a0:	bl	10e8c <__errno_location@plt>
   123a4:	ldr	r4, [r0]
   123a8:	mov	r2, #5
   123ac:	movw	r1, #39052	; 0x988c
   123b0:	movt	r1, #1
   123b4:	mov	r0, #0
   123b8:	bl	10d78 <dcgettext@plt>
   123bc:	mov	r5, r0
   123c0:	movw	r1, #39072	; 0x98a0
   123c4:	movt	r1, #1
   123c8:	mov	r0, #4
   123cc:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   123d0:	mov	r3, r0
   123d4:	mov	r2, r5
   123d8:	mov	r1, r4
   123dc:	mov	r0, #1
   123e0:	bl	10dfc <error@plt>
   123e4:	cmp	r0, #1
   123e8:	strd	r4, [sp, #-16]!
   123ec:	mov	r4, r1
   123f0:	str	r6, [sp, #8]
   123f4:	str	lr, [sp, #12]
   123f8:	bne	1244c <__assert_fail@plt+0x14f4>
   123fc:	bl	10e8c <__errno_location@plt>
   12400:	movw	r1, #39088	; 0x98b0
   12404:	movt	r1, #1
   12408:	ldr	r5, [r0]
   1240c:	mov	r2, #5
   12410:	mov	r0, #0
   12414:	bl	10d78 <dcgettext@plt>
   12418:	mov	r6, r0
   1241c:	mov	r1, r4
   12420:	mov	r0, #4
   12424:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   12428:	mov	r3, r0
   1242c:	mov	r2, r6
   12430:	ldr	r6, [sp, #8]
   12434:	mov	r1, r5
   12438:	mov	r0, #0
   1243c:	ldrd	r4, [sp]
   12440:	ldr	lr, [sp, #12]
   12444:	add	sp, sp, #16
   12448:	b	10dfc <error@plt>
   1244c:	cmp	r0, #2
   12450:	bne	12488 <__assert_fail@plt+0x1530>
   12454:	bl	10e8c <__errno_location@plt>
   12458:	mov	r2, #5
   1245c:	movw	r1, #39108	; 0x98c4
   12460:	movt	r1, #1
   12464:	ldr	r5, [r0]
   12468:	mov	r0, #0
   1246c:	bl	10d78 <dcgettext@plt>
   12470:	mov	r6, r0
   12474:	mov	r2, r4
   12478:	mov	r1, #3
   1247c:	mov	r0, #0
   12480:	bl	16834 <__assert_fail@plt+0x58dc>
   12484:	b	12428 <__assert_fail@plt+0x14d0>
   12488:	bl	10f40 <abort@plt>
   1248c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12490:	mov	ip, #0
   12494:	strd	r6, [sp, #8]
   12498:	strd	r8, [sp, #16]
   1249c:	strd	sl, [sp, #24]
   124a0:	mov	fp, r1
   124a4:	mov	sl, #0
   124a8:	str	lr, [sp, #32]
   124ac:	sub	sp, sp, #16384	; 0x4000
   124b0:	sub	sp, sp, #100	; 0x64
   124b4:	add	r1, sp, #16384	; 0x4000
   124b8:	strd	r2, [sp, #16]
   124bc:	add	r3, sp, #16384	; 0x4000
   124c0:	add	r1, r1, #140	; 0x8c
   124c4:	add	r3, r3, #144	; 0x90
   124c8:	ldr	r2, [r3]
   124cc:	add	r3, sp, #16384	; 0x4000
   124d0:	add	r3, r3, #148	; 0x94
   124d4:	str	r0, [sp, #32]
   124d8:	ldr	lr, [r3]
   124dc:	add	r3, sp, #16384	; 0x4000
   124e0:	add	r3, r3, #136	; 0x88
   124e4:	ldr	r3, [r3]
   124e8:	ldr	r1, [r1]
   124ec:	str	sl, [sp]
   124f0:	subs	r3, r2, r3
   124f4:	sbc	r6, lr, r1
   124f8:	asr	r6, r6, #31
   124fc:	eor	r3, r3, r6
   12500:	mov	r0, r6
   12504:	subs	r3, r3, r6
   12508:	ubfx	r3, r3, #0, #13
   1250c:	eor	r6, r6, r3
   12510:	subs	r0, r6, r0
   12514:	cmp	r0, ip
   12518:	moveq	r0, #8192	; 0x2000
   1251c:	subs	r3, r2, r0
   12520:	mov	r6, r0
   12524:	mov	r0, fp
   12528:	str	r3, [sp, #8]
   1252c:	sbc	r3, lr, ip
   12530:	str	r3, [sp, #12]
   12534:	ldrd	r2, [sp, #8]
   12538:	bl	10dcc <lseek64@plt>
   1253c:	cmp	r0, #0
   12540:	sbcs	r3, r1, #0
   12544:	blt	12820 <__assert_fail@plt+0x18c8>
   12548:	add	r7, sp, #96	; 0x60
   1254c:	mov	r2, r6
   12550:	mov	r1, r7
   12554:	mov	r0, fp
   12558:	bl	17174 <__assert_fail@plt+0x621c>
   1255c:	cmn	r0, #1
   12560:	mov	r6, r0
   12564:	beq	129b8 <__assert_fail@plt+0x1a60>
   12568:	ldrd	r0, [sp, #16]
   1256c:	mov	r3, r0
   12570:	orrs	r3, r3, r1
   12574:	movne	r3, #1
   12578:	moveq	r3, #0
   1257c:	cmp	r6, #0
   12580:	moveq	r3, #0
   12584:	cmp	r3, #0
   12588:	bne	127ec <__assert_fail@plt+0x1894>
   1258c:	mov	r8, r0
   12590:	mov	r9, r1
   12594:	str	fp, [sp, #28]
   12598:	movw	r3, #45405	; 0xb15d
   1259c:	movt	r3, #2
   125a0:	ldrd	sl, [sp, #8]
   125a4:	mov	r2, r6
   125a8:	str	r3, [sp, #36]	; 0x24
   125ac:	cmp	r2, #0
   125b0:	beq	1277c <__assert_fail@plt+0x1824>
   125b4:	ldrd	r0, [sp, #16]
   125b8:	orrs	r3, r0, r1
   125bc:	ldr	r3, [sp, #36]	; 0x24
   125c0:	ldrb	r6, [r3]
   125c4:	bne	12768 <__assert_fail@plt+0x1810>
   125c8:	subs	r4, r8, #1
   125cc:	sbc	r5, r9, #0
   125d0:	b	125ec <__assert_fail@plt+0x1694>
   125d4:	subs	r1, r4, #1
   125d8:	sbc	r3, r5, #0
   125dc:	cmp	r2, #0
   125e0:	beq	12814 <__assert_fail@plt+0x18bc>
   125e4:	mov	r4, r1
   125e8:	mov	r5, r3
   125ec:	mvn	r1, #0
   125f0:	mvn	r0, #0
   125f4:	cmp	r5, r1
   125f8:	sub	r2, r2, #1
   125fc:	cmpeq	r4, r0
   12600:	bne	125d4 <__assert_fail@plt+0x167c>
   12604:	add	r3, sp, #16384	; 0x4000
   12608:	strd	sl, [sp, #8]
   1260c:	mov	r6, r2
   12610:	add	r3, r3, #136	; 0x88
   12614:	ldrd	r0, [sp, #8]
   12618:	ldrd	r2, [r3]
   1261c:	ldr	fp, [sp, #28]
   12620:	cmp	r2, r0
   12624:	sbcs	r3, r3, r1
   12628:	bge	126f0 <__assert_fail@plt+0x1798>
   1262c:	mov	sl, #0
   12630:	add	r3, sp, #16384	; 0x4000
   12634:	add	r3, r3, #136	; 0x88
   12638:	mov	r0, fp
   1263c:	ldrd	r2, [r3]
   12640:	str	sl, [sp]
   12644:	bl	10dcc <lseek64@plt>
   12648:	cmp	r0, #0
   1264c:	sbcs	r3, r1, #0
   12650:	blt	12904 <__assert_fail@plt+0x19ac>
   12654:	add	r1, sp, #16384	; 0x4000
   12658:	ldrd	r2, [sp, #8]
   1265c:	add	r1, r1, #136	; 0x88
   12660:	ldr	r1, [r1]
   12664:	subs	r1, r2, r1
   12668:	str	r1, [sp, #40]	; 0x28
   1266c:	add	r1, sp, #16384	; 0x4000
   12670:	add	r1, r1, #140	; 0x8c
   12674:	ldr	r2, [r1]
   12678:	sbc	r3, r3, r2
   1267c:	str	r3, [sp, #44]	; 0x2c
   12680:	ldrd	r4, [sp, #40]	; 0x28
   12684:	cmp	r5, #0
   12688:	add	r1, sp, #8256	; 0x2040
   1268c:	cmpeq	r4, #8192	; 0x2000
   12690:	add	r1, r1, #32
   12694:	mov	r2, r4
   12698:	mov	r0, fp
   1269c:	movhi	r2, #8192	; 0x2000
   126a0:	bl	17174 <__assert_fail@plt+0x621c>
   126a4:	mov	r3, r0
   126a8:	add	r0, sp, #8256	; 0x2040
   126ac:	cmn	r3, #1
   126b0:	add	r0, r0, #32
   126b4:	mov	r1, r3
   126b8:	beq	12a00 <__assert_fail@plt+0x1aa8>
   126bc:	subs	r4, r4, r3
   126c0:	sbc	r5, r5, #0
   126c4:	orrs	r2, r4, r5
   126c8:	movne	r2, #1
   126cc:	moveq	r2, #0
   126d0:	cmp	r3, #0
   126d4:	moveq	r3, r2
   126d8:	movne	r3, #0
   126dc:	cmp	r3, #0
   126e0:	bne	12a14 <__assert_fail@plt+0x1abc>
   126e4:	bl	12354 <__assert_fail@plt+0x13fc>
   126e8:	orrs	r3, r4, r5
   126ec:	bne	12684 <__assert_fail@plt+0x172c>
   126f0:	add	r1, r6, #1
   126f4:	mov	r0, r7
   126f8:	bl	12354 <__assert_fail@plt+0x13fc>
   126fc:	ldrd	r2, [sp, #8]
   12700:	mov	r4, #0
   12704:	mov	r0, fp
   12708:	str	r4, [sp]
   1270c:	adds	r2, r2, r6
   12710:	adc	r3, r3, #0
   12714:	adds	r5, r2, #1
   12718:	adc	r6, r3, r4
   1271c:	mov	r2, r5
   12720:	mov	r3, r6
   12724:	bl	10dcc <lseek64@plt>
   12728:	cmp	r0, #0
   1272c:	mov	r9, r1
   12730:	sbcs	r3, r1, #0
   12734:	blt	1294c <__assert_fail@plt+0x19f4>
   12738:	mvn	r0, r9
   1273c:	lsr	r0, r0, #31
   12740:	b	1287c <__assert_fail@plt+0x1924>
   12744:	subs	r4, r8, #1
   12748:	sub	r2, r0, r7
   1274c:	sbc	r5, r9, #0
   12750:	orrs	r3, r8, r9
   12754:	mov	r8, r4
   12758:	mov	r9, r5
   1275c:	beq	12604 <__assert_fail@plt+0x16ac>
   12760:	cmp	r2, #0
   12764:	beq	12814 <__assert_fail@plt+0x18bc>
   12768:	mov	r1, r6
   1276c:	mov	r0, r7
   12770:	bl	10e80 <memrchr@plt>
   12774:	cmp	r0, #0
   12778:	bne	12744 <__assert_fail@plt+0x17ec>
   1277c:	add	r3, sp, #16384	; 0x4000
   12780:	add	r3, r3, #136	; 0x88
   12784:	ldrd	r2, [r3]
   12788:	cmp	fp, r3
   1278c:	cmpeq	sl, r2
   12790:	beq	127e4 <__assert_fail@plt+0x188c>
   12794:	subs	sl, sl, #8192	; 0x2000
   12798:	mov	r3, #0
   1279c:	ldr	r0, [sp, #28]
   127a0:	sbc	fp, fp, #0
   127a4:	mov	r2, sl
   127a8:	str	r3, [sp]
   127ac:	mov	r3, fp
   127b0:	bl	10dcc <lseek64@plt>
   127b4:	cmp	r0, #0
   127b8:	sbcs	r3, r1, #0
   127bc:	blt	1289c <__assert_fail@plt+0x1944>
   127c0:	mov	r2, #8192	; 0x2000
   127c4:	mov	r1, r7
   127c8:	ldr	r0, [sp, #28]
   127cc:	bl	17174 <__assert_fail@plt+0x621c>
   127d0:	cmn	r0, #1
   127d4:	mov	r2, r0
   127d8:	beq	12a1c <__assert_fail@plt+0x1ac4>
   127dc:	cmp	r2, #0
   127e0:	bne	125ac <__assert_fail@plt+0x1654>
   127e4:	mov	r0, #1
   127e8:	b	1287c <__assert_fail@plt+0x1924>
   127ec:	movw	r2, #45405	; 0xb15d
   127f0:	movt	r2, #2
   127f4:	add	r3, r7, r6
   127f8:	ldrb	r2, [r2]
   127fc:	ldrb	r3, [r3, #-1]
   12800:	cmp	r3, r2
   12804:	beq	1258c <__assert_fail@plt+0x1634>
   12808:	subs	r8, r0, #1
   1280c:	sbc	r9, r1, #0
   12810:	b	12594 <__assert_fail@plt+0x163c>
   12814:	mov	r8, r4
   12818:	mov	r9, r5
   1281c:	b	1277c <__assert_fail@plt+0x1824>
   12820:	bl	10e8c <__errno_location@plt>
   12824:	mov	r2, #5
   12828:	movw	r1, #39140	; 0x98e4
   1282c:	movt	r1, #1
   12830:	ldr	r6, [r0]
   12834:	mov	r0, sl
   12838:	bl	10d78 <dcgettext@plt>
   1283c:	mov	r4, r0
   12840:	mov	r1, #3
   12844:	ldr	r2, [sp, #32]
   12848:	mov	r0, sl
   1284c:	bl	16834 <__assert_fail@plt+0x58dc>
   12850:	mov	r5, r0
   12854:	ldrd	r0, [sp, #8]
   12858:	add	r2, sp, #96	; 0x60
   1285c:	bl	13518 <__assert_fail@plt+0x25c0>
   12860:	mov	r1, r6
   12864:	mov	r3, r5
   12868:	str	r0, [sp]
   1286c:	mov	r2, r4
   12870:	mov	r0, sl
   12874:	bl	10dfc <error@plt>
   12878:	mov	r0, sl
   1287c:	add	sp, sp, #16384	; 0x4000
   12880:	add	sp, sp, #100	; 0x64
   12884:	ldrd	r4, [sp]
   12888:	ldrd	r6, [sp, #8]
   1288c:	ldrd	r8, [sp, #16]
   12890:	ldrd	sl, [sp, #24]
   12894:	add	sp, sp, #32
   12898:	pop	{pc}		; (ldr pc, [sp], #4)
   1289c:	bl	10e8c <__errno_location@plt>
   128a0:	mov	r2, #5
   128a4:	movw	r1, #39140	; 0x98e4
   128a8:	movt	r1, #1
   128ac:	ldr	r6, [r0]
   128b0:	mov	r0, #0
   128b4:	bl	10d78 <dcgettext@plt>
   128b8:	mov	r4, r0
   128bc:	mov	r1, #3
   128c0:	ldr	r2, [sp, #32]
   128c4:	mov	r0, #0
   128c8:	bl	16834 <__assert_fail@plt+0x58dc>
   128cc:	add	r2, sp, #8256	; 0x2040
   128d0:	mov	r5, r0
   128d4:	add	r2, r2, #32
   128d8:	mov	r1, fp
   128dc:	mov	r0, sl
   128e0:	bl	13518 <__assert_fail@plt+0x25c0>
   128e4:	mov	r1, r6
   128e8:	mov	r3, r5
   128ec:	str	r0, [sp]
   128f0:	mov	r2, r4
   128f4:	mov	r0, #0
   128f8:	bl	10dfc <error@plt>
   128fc:	mov	r0, #0
   12900:	b	1287c <__assert_fail@plt+0x1924>
   12904:	bl	10e8c <__errno_location@plt>
   12908:	mov	r2, #5
   1290c:	movw	r1, #39140	; 0x98e4
   12910:	movt	r1, #1
   12914:	ldr	r6, [r0]
   12918:	mov	r0, sl
   1291c:	bl	10d78 <dcgettext@plt>
   12920:	mov	r4, r0
   12924:	mov	r1, #3
   12928:	ldr	r2, [sp, #32]
   1292c:	mov	r0, sl
   12930:	bl	16834 <__assert_fail@plt+0x58dc>
   12934:	add	r3, sp, #16384	; 0x4000
   12938:	mov	r5, r0
   1293c:	add	r3, r3, #136	; 0x88
   12940:	sub	r2, r7, #48	; 0x30
   12944:	ldrd	r0, [r3]
   12948:	b	1285c <__assert_fail@plt+0x1904>
   1294c:	bl	10e8c <__errno_location@plt>
   12950:	mov	r2, #5
   12954:	movw	r1, #39140	; 0x98e4
   12958:	movt	r1, #1
   1295c:	ldr	fp, [r0]
   12960:	mov	r0, r4
   12964:	bl	10d78 <dcgettext@plt>
   12968:	mov	sl, r0
   1296c:	mov	r1, #3
   12970:	ldr	r2, [sp, #32]
   12974:	mov	r0, r4
   12978:	bl	16834 <__assert_fail@plt+0x58dc>
   1297c:	mov	r3, r0
   12980:	sub	r2, r7, #24
   12984:	mov	r1, r6
   12988:	mov	r0, r5
   1298c:	str	r3, [sp, #8]
   12990:	bl	13518 <__assert_fail@plt+0x25c0>
   12994:	mov	r1, fp
   12998:	mov	r2, sl
   1299c:	str	r0, [sp]
   129a0:	mov	r0, r4
   129a4:	ldr	r3, [sp, #8]
   129a8:	bl	10dfc <error@plt>
   129ac:	mvn	r0, r9
   129b0:	lsr	r0, r0, #31
   129b4:	b	1287c <__assert_fail@plt+0x1924>
   129b8:	bl	10e8c <__errno_location@plt>
   129bc:	ldr	r4, [r0]
   129c0:	mov	r2, #5
   129c4:	movw	r1, #39088	; 0x98b0
   129c8:	movt	r1, #1
   129cc:	mov	r0, sl
   129d0:	bl	10d78 <dcgettext@plt>
   129d4:	mov	r5, r0
   129d8:	mov	r0, #4
   129dc:	ldr	r1, [sp, #32]
   129e0:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   129e4:	mov	r3, r0
   129e8:	mov	r2, r5
   129ec:	mov	r0, sl
   129f0:	mov	r1, r4
   129f4:	bl	10dfc <error@plt>
   129f8:	mov	r0, sl
   129fc:	b	1287c <__assert_fail@plt+0x1924>
   12a00:	mov	r0, #1
   12a04:	ldr	r1, [sp, #32]
   12a08:	bl	123e4 <__assert_fail@plt+0x148c>
   12a0c:	mov	r0, #0
   12a10:	b	1287c <__assert_fail@plt+0x1924>
   12a14:	mov	r0, #2
   12a18:	b	12a04 <__assert_fail@plt+0x1aac>
   12a1c:	bl	10e8c <__errno_location@plt>
   12a20:	ldr	r4, [r0]
   12a24:	mov	r2, #5
   12a28:	movw	r1, #39088	; 0x98b0
   12a2c:	movt	r1, #1
   12a30:	mov	r0, #0
   12a34:	bl	10d78 <dcgettext@plt>
   12a38:	mov	r5, r0
   12a3c:	mov	r0, #4
   12a40:	ldr	r1, [sp, #32]
   12a44:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   12a48:	mov	r3, r0
   12a4c:	mov	r2, r5
   12a50:	mov	r0, #0
   12a54:	mov	r1, r4
   12a58:	bl	10dfc <error@plt>
   12a5c:	mov	r0, #0
   12a60:	b	1287c <__assert_fail@plt+0x1924>
   12a64:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12a68:	mov	r4, r2
   12a6c:	mov	r5, r3
   12a70:	strd	r6, [sp, #8]
   12a74:	strd	r8, [sp, #16]
   12a78:	movw	r9, #45396	; 0xb154
   12a7c:	movt	r9, #2
   12a80:	str	lr, [sp, #24]
   12a84:	sub	sp, sp, #8192	; 0x2000
   12a88:	mov	r8, r0
   12a8c:	sub	sp, sp, #4
   12a90:	cmp	r5, #0
   12a94:	mov	r2, r4
   12a98:	cmpeq	r4, #8192	; 0x2000
   12a9c:	mov	r1, sp
   12aa0:	movhi	r2, #8192	; 0x2000
   12aa4:	mov	r0, r8
   12aa8:	bl	17174 <__assert_fail@plt+0x621c>
   12aac:	cmn	r0, #1
   12ab0:	mov	r6, r0
   12ab4:	beq	12b28 <__assert_fail@plt+0x1bd0>
   12ab8:	subs	r4, r4, r0
   12abc:	sbc	r5, r5, #0
   12ac0:	orrs	r3, r4, r5
   12ac4:	movne	r7, #1
   12ac8:	moveq	r7, #0
   12acc:	cmp	r0, #0
   12ad0:	movne	r7, #0
   12ad4:	cmp	r7, #0
   12ad8:	bne	12b30 <__assert_fail@plt+0x1bd8>
   12adc:	cmp	r0, #0
   12ae0:	beq	12b00 <__assert_fail@plt+0x1ba8>
   12ae4:	mov	r2, r0
   12ae8:	mov	r1, #1
   12aec:	ldr	r3, [r9]
   12af0:	mov	r0, sp
   12af4:	bl	10d54 <fwrite_unlocked@plt>
   12af8:	cmp	r6, r0
   12afc:	bhi	12b38 <__assert_fail@plt+0x1be0>
   12b00:	orrs	r3, r4, r5
   12b04:	bne	12a90 <__assert_fail@plt+0x1b38>
   12b08:	mov	r0, #0
   12b0c:	add	sp, sp, #8192	; 0x2000
   12b10:	add	sp, sp, #4
   12b14:	ldrd	r4, [sp]
   12b18:	ldrd	r6, [sp, #8]
   12b1c:	ldrd	r8, [sp, #16]
   12b20:	add	sp, sp, #24
   12b24:	pop	{pc}		; (ldr pc, [sp], #4)
   12b28:	mov	r0, #1
   12b2c:	b	12b0c <__assert_fail@plt+0x1bb4>
   12b30:	mov	r0, #2
   12b34:	b	12b0c <__assert_fail@plt+0x1bb4>
   12b38:	ldr	r0, [r9]
   12b3c:	bl	10f1c <clearerr_unlocked@plt>
   12b40:	bl	10e8c <__errno_location@plt>
   12b44:	ldr	r4, [r0]
   12b48:	mov	r2, #5
   12b4c:	movw	r1, #39052	; 0x988c
   12b50:	movt	r1, #1
   12b54:	mov	r0, r7
   12b58:	bl	10d78 <dcgettext@plt>
   12b5c:	mov	r5, r0
   12b60:	movw	r1, #39072	; 0x98a0
   12b64:	movt	r1, #1
   12b68:	mov	r0, #4
   12b6c:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   12b70:	mov	r3, r0
   12b74:	mov	r2, r5
   12b78:	mov	r1, r4
   12b7c:	mov	r0, #1
   12b80:	bl	10dfc <error@plt>
   12b84:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12b88:	mov	r4, r2
   12b8c:	mov	r5, r3
   12b90:	orrs	r3, r4, r5
   12b94:	strd	r6, [sp, #8]
   12b98:	strd	r8, [sp, #16]
   12b9c:	str	sl, [sp, #24]
   12ba0:	str	lr, [sp, #28]
   12ba4:	sub	sp, sp, #8192	; 0x2000
   12ba8:	beq	12c6c <__assert_fail@plt+0x1d14>
   12bac:	movw	r9, #45396	; 0xb154
   12bb0:	movt	r9, #2
   12bb4:	mov	sl, r0
   12bb8:	mov	r8, r1
   12bbc:	mov	r7, #8192	; 0x2000
   12bc0:	b	12bf8 <__assert_fail@plt+0x1ca0>
   12bc4:	cmp	r0, #0
   12bc8:	beq	12c6c <__assert_fail@plt+0x1d14>
   12bcc:	mov	r2, r0
   12bd0:	mov	r1, #1
   12bd4:	ldr	r3, [r9]
   12bd8:	mov	r0, sp
   12bdc:	bl	10d54 <fwrite_unlocked@plt>
   12be0:	cmp	r6, r0
   12be4:	bhi	12c8c <__assert_fail@plt+0x1d34>
   12be8:	subs	r4, r4, r6
   12bec:	sbc	r5, r5, #0
   12bf0:	orrs	r3, r4, r5
   12bf4:	beq	12c6c <__assert_fail@plt+0x1d14>
   12bf8:	mov	r3, #0
   12bfc:	mov	r1, sp
   12c00:	cmp	r3, r5
   12c04:	mov	r0, r8
   12c08:	cmpeq	r7, r4
   12c0c:	movhi	r7, r4
   12c10:	mov	r2, r7
   12c14:	bl	17174 <__assert_fail@plt+0x621c>
   12c18:	cmn	r0, #1
   12c1c:	mov	r6, r0
   12c20:	bne	12bc4 <__assert_fail@plt+0x1c6c>
   12c24:	bl	10e8c <__errno_location@plt>
   12c28:	ldr	r4, [r0]
   12c2c:	mov	r2, #5
   12c30:	movw	r1, #39088	; 0x98b0
   12c34:	movt	r1, #1
   12c38:	mov	r0, #0
   12c3c:	bl	10d78 <dcgettext@plt>
   12c40:	mov	r5, r0
   12c44:	mov	r1, sl
   12c48:	mov	r0, #4
   12c4c:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   12c50:	mov	r3, r0
   12c54:	mov	r2, r5
   12c58:	mov	r0, #0
   12c5c:	mov	r1, r4
   12c60:	bl	10dfc <error@plt>
   12c64:	mov	r0, #0
   12c68:	b	12c70 <__assert_fail@plt+0x1d18>
   12c6c:	mov	r0, #1
   12c70:	add	sp, sp, #8192	; 0x2000
   12c74:	ldrd	r4, [sp]
   12c78:	ldrd	r6, [sp, #8]
   12c7c:	ldrd	r8, [sp, #16]
   12c80:	ldr	sl, [sp, #24]
   12c84:	add	sp, sp, #28
   12c88:	pop	{pc}		; (ldr pc, [sp], #4)
   12c8c:	ldr	r0, [r9]
   12c90:	bl	10f1c <clearerr_unlocked@plt>
   12c94:	bl	10e8c <__errno_location@plt>
   12c98:	ldr	r4, [r0]
   12c9c:	mov	r2, #5
   12ca0:	movw	r1, #39052	; 0x988c
   12ca4:	movt	r1, #1
   12ca8:	mov	r0, #0
   12cac:	bl	10d78 <dcgettext@plt>
   12cb0:	mov	r5, r0
   12cb4:	movw	r1, #39072	; 0x98a0
   12cb8:	movt	r1, #1
   12cbc:	mov	r0, #4
   12cc0:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   12cc4:	mov	r3, r0
   12cc8:	mov	r2, r5
   12ccc:	mov	r1, r4
   12cd0:	mov	r0, #1
   12cd4:	bl	10dfc <error@plt>
   12cd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12cdc:	strd	r6, [sp, #8]
   12ce0:	mov	r6, r2
   12ce4:	mov	r7, r3
   12ce8:	strd	r8, [sp, #16]
   12cec:	orrs	r3, r6, r7
   12cf0:	strd	sl, [sp, #24]
   12cf4:	str	lr, [sp, #32]
   12cf8:	sub	sp, sp, #8320	; 0x2080
   12cfc:	sub	sp, sp, #20
   12d00:	str	r0, [sp, #12]
   12d04:	beq	12f4c <__assert_fail@plt+0x1ff4>
   12d08:	movw	fp, #45405	; 0xb15d
   12d0c:	movt	fp, #2
   12d10:	movw	r8, #45396	; 0xb154
   12d14:	movt	r8, #2
   12d18:	mov	sl, r1
   12d1c:	mov	r2, #8192	; 0x2000
   12d20:	add	r1, sp, #144	; 0x90
   12d24:	mov	r0, sl
   12d28:	bl	17174 <__assert_fail@plt+0x621c>
   12d2c:	cmn	r0, #1
   12d30:	mov	r5, r0
   12d34:	beq	12ee8 <__assert_fail@plt+0x1f90>
   12d38:	cmp	r0, #0
   12d3c:	beq	12f4c <__assert_fail@plt+0x1ff4>
   12d40:	ldrb	r1, [fp]
   12d44:	add	r3, sp, #144	; 0x90
   12d48:	mov	r4, #0
   12d4c:	b	12d58 <__assert_fail@plt+0x1e00>
   12d50:	cmp	r5, r4
   12d54:	beq	12e18 <__assert_fail@plt+0x1ec0>
   12d58:	ldrb	r2, [r3], #1
   12d5c:	add	r4, r4, #1
   12d60:	cmp	r2, r1
   12d64:	bne	12d50 <__assert_fail@plt+0x1df8>
   12d68:	subs	r6, r6, #1
   12d6c:	sbc	r7, r7, #0
   12d70:	orrs	r2, r6, r7
   12d74:	bne	12d50 <__assert_fail@plt+0x1df8>
   12d78:	sub	r5, r5, r4
   12d7c:	mov	r1, #1
   12d80:	rsbs	r6, r5, #0
   12d84:	mov	r0, sl
   12d88:	sbc	r7, r7, r7
   12d8c:	mov	r2, r6
   12d90:	str	r1, [sp]
   12d94:	mov	r3, r7
   12d98:	bl	10dcc <lseek64@plt>
   12d9c:	cmp	r0, #0
   12da0:	sbcs	r3, r1, #0
   12da4:	blt	12e3c <__assert_fail@plt+0x1ee4>
   12da8:	movw	r9, #45396	; 0xb154
   12dac:	movt	r9, #2
   12db0:	add	r0, sp, #144	; 0x90
   12db4:	mov	r2, r4
   12db8:	ldr	r3, [r9]
   12dbc:	mov	r1, #1
   12dc0:	bl	10d54 <fwrite_unlocked@plt>
   12dc4:	cmp	r4, r0
   12dc8:	bls	12f4c <__assert_fail@plt+0x1ff4>
   12dcc:	ldr	r0, [r9]
   12dd0:	bl	10f1c <clearerr_unlocked@plt>
   12dd4:	bl	10e8c <__errno_location@plt>
   12dd8:	ldr	r4, [r0]
   12ddc:	mov	r2, #5
   12de0:	movw	r1, #39052	; 0x988c
   12de4:	movt	r1, #1
   12de8:	mov	r0, #0
   12dec:	bl	10d78 <dcgettext@plt>
   12df0:	mov	r5, r0
   12df4:	movw	r1, #39072	; 0x98a0
   12df8:	movt	r1, #1
   12dfc:	mov	r0, #4
   12e00:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   12e04:	mov	r3, r0
   12e08:	mov	r2, r5
   12e0c:	mov	r1, r4
   12e10:	mov	r0, #1
   12e14:	bl	10dfc <error@plt>
   12e18:	mov	r2, r5
   12e1c:	mov	r1, #1
   12e20:	ldr	r3, [r8]
   12e24:	add	r0, sp, #144	; 0x90
   12e28:	mov	r9, r8
   12e2c:	bl	10d54 <fwrite_unlocked@plt>
   12e30:	cmp	r5, r0
   12e34:	bls	12d1c <__assert_fail@plt+0x1dc4>
   12e38:	b	12dcc <__assert_fail@plt+0x1e74>
   12e3c:	add	r2, sp, #40	; 0x28
   12e40:	mov	r1, sl
   12e44:	mov	r0, #3
   12e48:	bl	10db4 <__fxstat64@plt>
   12e4c:	cmp	r0, #0
   12e50:	bne	12e64 <__assert_fail@plt+0x1f0c>
   12e54:	ldr	r3, [sp, #56]	; 0x38
   12e58:	and	r3, r3, #61440	; 0xf000
   12e5c:	cmp	r3, #32768	; 0x8000
   12e60:	bne	12da8 <__assert_fail@plt+0x1e50>
   12e64:	mov	r1, #1
   12e68:	mov	r3, r7
   12e6c:	mov	r0, sl
   12e70:	mov	r2, r6
   12e74:	str	r1, [sp]
   12e78:	bl	10dcc <lseek64@plt>
   12e7c:	cmp	r0, #0
   12e80:	sbcs	r3, r1, #0
   12e84:	bge	12da8 <__assert_fail@plt+0x1e50>
   12e88:	bl	10e8c <__errno_location@plt>
   12e8c:	mov	r2, #5
   12e90:	movw	r1, #39172	; 0x9904
   12e94:	movt	r1, #1
   12e98:	ldr	r9, [r0]
   12e9c:	mov	r0, #0
   12ea0:	bl	10d78 <dcgettext@plt>
   12ea4:	mov	r5, r0
   12ea8:	mov	r1, #3
   12eac:	ldr	r2, [sp, #12]
   12eb0:	mov	r0, #0
   12eb4:	bl	16834 <__assert_fail@plt+0x58dc>
   12eb8:	mov	r8, r0
   12ebc:	add	r2, sp, #16
   12ec0:	mov	r1, r7
   12ec4:	mov	r0, r6
   12ec8:	bl	13518 <__assert_fail@plt+0x25c0>
   12ecc:	mov	r1, r9
   12ed0:	mov	r3, r8
   12ed4:	str	r0, [sp]
   12ed8:	mov	r2, r5
   12edc:	mov	r0, #0
   12ee0:	bl	10dfc <error@plt>
   12ee4:	b	12da8 <__assert_fail@plt+0x1e50>
   12ee8:	bl	10e8c <__errno_location@plt>
   12eec:	ldr	r4, [r0]
   12ef0:	mov	r2, #5
   12ef4:	movw	r1, #39088	; 0x98b0
   12ef8:	movt	r1, #1
   12efc:	mov	r0, #0
   12f00:	bl	10d78 <dcgettext@plt>
   12f04:	mov	r5, r0
   12f08:	mov	r0, #4
   12f0c:	ldr	r1, [sp, #12]
   12f10:	bl	15cb4 <__assert_fail@plt+0x4d5c>
   12f14:	mov	r3, r0
   12f18:	mov	r2, r5
   12f1c:	mov	r0, #0
   12f20:	mov	r1, r4
   12f24:	bl	10dfc <error@plt>
   12f28:	mov	r0, #0
   12f2c:	add	sp, sp, #8320	; 0x2080
   12f30:	add	sp, sp, #20
   12f34:	ldrd	r4, [sp]
   12f38:	ldrd	r6, [sp, #8]
   12f3c:	ldrd	r8, [sp, #16]
   12f40:	ldrd	sl, [sp, #24]
   12f44:	add	sp, sp, #32
   12f48:	pop	{pc}		; (ldr pc, [sp], #4)
   12f4c:	mov	r0, #1
   12f50:	b	12f2c <__assert_fail@plt+0x1fd4>
   12f54:	subs	r6, r0, #0
   12f58:	str	r7, [sp, #-8]!
   12f5c:	str	lr, [sp, #4]
   12f60:	sub	sp, sp, #56	; 0x38
   12f64:	beq	12fac <__assert_fail@plt+0x2054>
   12f68:	movw	r3, #45392	; 0xb150
   12f6c:	movt	r3, #2
   12f70:	ldr	r4, [r3]
   12f74:	mov	r2, #5
   12f78:	movw	r1, #39220	; 0x9934
   12f7c:	movt	r1, #1
   12f80:	mov	r0, #0
   12f84:	bl	10d78 <dcgettext@plt>
   12f88:	movw	r3, #45420	; 0xb16c
   12f8c:	movt	r3, #2
   12f90:	mov	r2, r0
   12f94:	mov	r1, #1
   12f98:	ldr	r3, [r3]
   12f9c:	mov	r0, r4
   12fa0:	bl	10ec8 <__fprintf_chk@plt>
   12fa4:	mov	r0, r6
   12fa8:	bl	10e5c <exit@plt>
   12fac:	mov	r2, #5
   12fb0:	movw	r1, #39260	; 0x995c
   12fb4:	movt	r1, #1
   12fb8:	movw	r7, #45396	; 0xb154
   12fbc:	movt	r7, #2
   12fc0:	bl	10d78 <dcgettext@plt>
   12fc4:	movw	r3, #45420	; 0xb16c
   12fc8:	movt	r3, #2
   12fcc:	mov	r1, r0
   12fd0:	mov	r0, #1
   12fd4:	ldr	r2, [r3]
   12fd8:	bl	10eb0 <__printf_chk@plt>
   12fdc:	mov	r2, #5
   12fe0:	movw	r1, #39296	; 0x9980
   12fe4:	movt	r1, #1
   12fe8:	mov	r0, r6
   12fec:	bl	10d78 <dcgettext@plt>
   12ff0:	mov	r1, r0
   12ff4:	mov	r2, #10
   12ff8:	mov	r0, #1
   12ffc:	bl	10eb0 <__printf_chk@plt>
   13000:	mov	r2, #5
   13004:	movw	r1, #39432	; 0x9a08
   13008:	movt	r1, #1
   1300c:	mov	r0, r6
   13010:	bl	10d78 <dcgettext@plt>
   13014:	ldr	r1, [r7]
   13018:	bl	10cdc <fputs_unlocked@plt>
   1301c:	mov	r2, #5
   13020:	movw	r1, #39488	; 0x9a40
   13024:	movt	r1, #1
   13028:	mov	r0, r6
   1302c:	bl	10d78 <dcgettext@plt>
   13030:	ldr	r1, [r7]
   13034:	bl	10cdc <fputs_unlocked@plt>
   13038:	mov	r2, #5
   1303c:	movw	r1, #39564	; 0x9a8c
   13040:	movt	r1, #1
   13044:	mov	r0, r6
   13048:	bl	10d78 <dcgettext@plt>
   1304c:	mov	r1, r0
   13050:	mov	r2, #10
   13054:	mov	r0, #1
   13058:	bl	10eb0 <__printf_chk@plt>
   1305c:	mov	r2, #5
   13060:	movw	r1, #39964	; 0x9c1c
   13064:	movt	r1, #1
   13068:	mov	r0, r6
   1306c:	bl	10d78 <dcgettext@plt>
   13070:	ldr	r1, [r7]
   13074:	bl	10cdc <fputs_unlocked@plt>
   13078:	mov	r2, #5
   1307c:	movw	r1, #40096	; 0x9ca0
   13080:	movt	r1, #1
   13084:	mov	r0, r6
   13088:	bl	10d78 <dcgettext@plt>
   1308c:	ldr	r1, [r7]
   13090:	bl	10cdc <fputs_unlocked@plt>
   13094:	mov	r2, #5
   13098:	movw	r1, #40160	; 0x9ce0
   1309c:	movt	r1, #1
   130a0:	mov	r0, r6
   130a4:	bl	10d78 <dcgettext@plt>
   130a8:	ldr	r1, [r7]
   130ac:	bl	10cdc <fputs_unlocked@plt>
   130b0:	mov	r2, #5
   130b4:	movw	r1, #40208	; 0x9d10
   130b8:	movt	r1, #1
   130bc:	mov	r0, r6
   130c0:	bl	10d78 <dcgettext@plt>
   130c4:	ldr	r1, [r7]
   130c8:	bl	10cdc <fputs_unlocked@plt>
   130cc:	mov	r2, #5
   130d0:	movw	r1, #40264	; 0x9d48
   130d4:	movt	r1, #1
   130d8:	mov	r0, r6
   130dc:	bl	10d78 <dcgettext@plt>
   130e0:	ldr	r1, [r7]
   130e4:	bl	10cdc <fputs_unlocked@plt>
   130e8:	movw	lr, #38764	; 0x976c
   130ec:	movt	lr, #1
   130f0:	ldr	ip, [lr]
   130f4:	ldr	r4, [lr, #4]
   130f8:	ldrd	r8, [lr, #8]
   130fc:	subs	r1, ip, #0
   13100:	str	ip, [sp]
   13104:	ldrd	r2, [lr, #16]
   13108:	str	r4, [sp, #4]
   1310c:	ldrd	r4, [lr, #24]
   13110:	strd	r8, [sp, #8]
   13114:	ldrd	r8, [lr, #32]
   13118:	strd	r2, [sp, #16]
   1311c:	ldrd	r2, [lr, #40]	; 0x28
   13120:	strd	r4, [sp, #24]
   13124:	ldrd	r4, [lr, #48]	; 0x30
   13128:	strd	r8, [sp, #32]
   1312c:	strd	r2, [sp, #40]	; 0x28
   13130:	strd	r4, [sp, #48]	; 0x30
   13134:	movwne	r5, #39212	; 0x992c
   13138:	mov	r4, sp
   1313c:	movtne	r5, #1
   13140:	bne	13238 <__assert_fail@plt+0x22e0>
   13144:	ldr	r4, [r4, #4]
   13148:	movw	r1, #40476	; 0x9e1c
   1314c:	movt	r1, #1
   13150:	mov	r2, #5
   13154:	cmp	r4, #0
   13158:	beq	1324c <__assert_fail@plt+0x22f4>
   1315c:	mov	r0, #0
   13160:	bl	10d78 <dcgettext@plt>
   13164:	mov	r1, r0
   13168:	movw	r3, #40500	; 0x9e34
   1316c:	movt	r3, #1
   13170:	movw	r2, #40540	; 0x9e5c
   13174:	movt	r2, #1
   13178:	mov	r0, #1
   1317c:	bl	10eb0 <__printf_chk@plt>
   13180:	mov	r1, #0
   13184:	mov	r0, #5
   13188:	bl	10ef8 <setlocale@plt>
   1318c:	cmp	r0, #0
   13190:	movweq	r5, #39212	; 0x992c
   13194:	movteq	r5, #1
   13198:	beq	131bc <__assert_fail@plt+0x2264>
   1319c:	movw	r1, #40556	; 0x9e6c
   131a0:	movt	r1, #1
   131a4:	mov	r2, #3
   131a8:	movw	r5, #39212	; 0x992c
   131ac:	movt	r5, #1
   131b0:	bl	10f34 <strncmp@plt>
   131b4:	cmp	r0, #0
   131b8:	bne	13304 <__assert_fail@plt+0x23ac>
   131bc:	mov	r2, #5
   131c0:	movw	r1, #40632	; 0x9eb8
   131c4:	movt	r1, #1
   131c8:	mov	r0, #0
   131cc:	bl	10d78 <dcgettext@plt>
   131d0:	mov	r1, r0
   131d4:	movw	r3, #39212	; 0x992c
   131d8:	movt	r3, #1
   131dc:	movw	r2, #40500	; 0x9e34
   131e0:	movt	r2, #1
   131e4:	mov	r0, #1
   131e8:	bl	10eb0 <__printf_chk@plt>
   131ec:	mov	r2, #5
   131f0:	movw	r1, #40660	; 0x9ed4
   131f4:	movt	r1, #1
   131f8:	mov	r0, #0
   131fc:	bl	10d78 <dcgettext@plt>
   13200:	movw	r2, #40972	; 0xa00c
   13204:	movt	r2, #1
   13208:	cmp	r4, r5
   1320c:	movw	r3, #39292	; 0x997c
   13210:	movt	r3, #1
   13214:	mov	r1, r0
   13218:	moveq	r3, r2
   1321c:	mov	r2, r4
   13220:	mov	r0, #1
   13224:	bl	10eb0 <__printf_chk@plt>
   13228:	b	12fa4 <__assert_fail@plt+0x204c>
   1322c:	ldr	r1, [r4, #8]!
   13230:	cmp	r1, #0
   13234:	beq	13144 <__assert_fail@plt+0x21ec>
   13238:	mov	r0, r5
   1323c:	bl	10cf4 <strcmp@plt>
   13240:	cmp	r0, #0
   13244:	bne	1322c <__assert_fail@plt+0x22d4>
   13248:	b	13144 <__assert_fail@plt+0x21ec>
   1324c:	mov	r0, r4
   13250:	bl	10d78 <dcgettext@plt>
   13254:	mov	r1, r0
   13258:	movw	r3, #40500	; 0x9e34
   1325c:	movt	r3, #1
   13260:	movw	r2, #40540	; 0x9e5c
   13264:	movt	r2, #1
   13268:	mov	r0, #1
   1326c:	bl	10eb0 <__printf_chk@plt>
   13270:	mov	r1, r4
   13274:	mov	r0, #5
   13278:	bl	10ef8 <setlocale@plt>
   1327c:	cmp	r0, #0
   13280:	beq	1329c <__assert_fail@plt+0x2344>
   13284:	movw	r1, #40556	; 0x9e6c
   13288:	movt	r1, #1
   1328c:	mov	r2, #3
   13290:	bl	10f34 <strncmp@plt>
   13294:	cmp	r0, #0
   13298:	bne	132f8 <__assert_fail@plt+0x23a0>
   1329c:	mov	r2, #5
   132a0:	movw	r1, #40632	; 0x9eb8
   132a4:	movt	r1, #1
   132a8:	mov	r0, #0
   132ac:	bl	10d78 <dcgettext@plt>
   132b0:	mov	r1, r0
   132b4:	movw	r3, #39212	; 0x992c
   132b8:	movt	r3, #1
   132bc:	movw	r2, #40500	; 0x9e34
   132c0:	movt	r2, #1
   132c4:	mov	r0, #1
   132c8:	bl	10eb0 <__printf_chk@plt>
   132cc:	movw	r1, #40660	; 0x9ed4
   132d0:	movt	r1, #1
   132d4:	mov	r2, #5
   132d8:	mov	r0, #0
   132dc:	bl	10d78 <dcgettext@plt>
   132e0:	movw	r4, #39212	; 0x992c
   132e4:	movt	r4, #1
   132e8:	movw	r3, #40972	; 0xa00c
   132ec:	movt	r3, #1
   132f0:	mov	r1, r0
   132f4:	b	1321c <__assert_fail@plt+0x22c4>
   132f8:	movw	r5, #39212	; 0x992c
   132fc:	movt	r5, #1
   13300:	mov	r4, r5
   13304:	mov	r2, #5
   13308:	movw	r1, #40560	; 0x9e70
   1330c:	movt	r1, #1
   13310:	mov	r0, #0
   13314:	bl	10d78 <dcgettext@plt>
   13318:	ldr	r1, [r7]
   1331c:	bl	10cdc <fputs_unlocked@plt>
   13320:	b	131bc <__assert_fail@plt+0x2264>
   13324:	movw	r3, #45412	; 0xb164
   13328:	movt	r3, #2
   1332c:	str	r0, [r3]
   13330:	bx	lr
   13334:	movw	r3, #45412	; 0xb164
   13338:	movt	r3, #2
   1333c:	strb	r0, [r3, #4]
   13340:	bx	lr
   13344:	movw	r3, #45396	; 0xb154
   13348:	movt	r3, #2
   1334c:	strd	r4, [sp, #-16]!
   13350:	ldr	r0, [r3]
   13354:	str	r6, [sp, #8]
   13358:	str	lr, [sp, #12]
   1335c:	sub	sp, sp, #8
   13360:	bl	19020 <__assert_fail@plt+0x80c8>
   13364:	cmp	r0, #0
   13368:	beq	13394 <__assert_fail@plt+0x243c>
   1336c:	movw	r4, #45412	; 0xb164
   13370:	movt	r4, #2
   13374:	ldrb	r6, [r4, #4]
   13378:	bl	10e8c <__errno_location@plt>
   1337c:	mov	r5, r0
   13380:	cmp	r6, #0
   13384:	beq	133c0 <__assert_fail@plt+0x2468>
   13388:	ldr	r3, [r0]
   1338c:	cmp	r3, #32
   13390:	bne	133c0 <__assert_fail@plt+0x2468>
   13394:	movw	r3, #45392	; 0xb150
   13398:	movt	r3, #2
   1339c:	ldr	r0, [r3]
   133a0:	bl	19020 <__assert_fail@plt+0x80c8>
   133a4:	cmp	r0, #0
   133a8:	bne	13408 <__assert_fail@plt+0x24b0>
   133ac:	add	sp, sp, #8
   133b0:	ldrd	r4, [sp]
   133b4:	ldr	r6, [sp, #8]
   133b8:	add	sp, sp, #12
   133bc:	pop	{pc}		; (ldr pc, [sp], #4)
   133c0:	movw	r1, #41180	; 0xa0dc
   133c4:	movt	r1, #1
   133c8:	mov	r2, #5
   133cc:	mov	r0, #0
   133d0:	bl	10d78 <dcgettext@plt>
   133d4:	mov	r6, r0
   133d8:	ldr	r0, [r4]
   133dc:	cmp	r0, #0
   133e0:	beq	13418 <__assert_fail@plt+0x24c0>
   133e4:	ldr	r4, [r5]
   133e8:	bl	16464 <__assert_fail@plt+0x550c>
   133ec:	mov	r3, r0
   133f0:	movw	r2, #40824	; 0x9f78
   133f4:	movt	r2, #1
   133f8:	mov	r0, #0
   133fc:	str	r6, [sp]
   13400:	mov	r1, r4
   13404:	bl	10dfc <error@plt>
   13408:	movw	r3, #45308	; 0xb0fc
   1340c:	movt	r3, #2
   13410:	ldr	r0, [r3]
   13414:	bl	10d24 <_exit@plt>
   13418:	mov	r3, r6
   1341c:	movw	r2, #40828	; 0x9f7c
   13420:	movt	r2, #1
   13424:	ldr	r1, [r5]
   13428:	bl	10dfc <error@plt>
   1342c:	b	13408 <__assert_fail@plt+0x24b0>
   13430:	strd	r4, [sp, #-12]!
   13434:	mov	r5, r0
   13438:	str	lr, [sp, #8]
   1343c:	sub	sp, sp, #12
   13440:	bl	10e8c <__errno_location@plt>
   13444:	mov	r4, r0
   13448:	mov	r2, #0
   1344c:	ldr	r3, [r4]
   13450:	mov	r0, r5
   13454:	str	r2, [r4]
   13458:	str	r3, [sp]
   1345c:	str	r3, [sp, #4]
   13460:	bl	10d18 <free@plt>
   13464:	ldr	r3, [r4]
   13468:	add	r2, sp, #8
   1346c:	clz	r3, r3
   13470:	lsr	r3, r3, #5
   13474:	add	r3, r2, r3, lsl #2
   13478:	ldr	r3, [r3, #-8]
   1347c:	str	r3, [r4]
   13480:	add	sp, sp, #12
   13484:	ldrd	r4, [sp]
   13488:	add	sp, sp, #8
   1348c:	pop	{pc}		; (ldr pc, [sp], #4)
   13490:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13494:	subs	r5, r2, #0
   13498:	strd	r6, [sp, #8]
   1349c:	str	r8, [sp, #16]
   134a0:	str	lr, [sp, #20]
   134a4:	beq	13510 <__assert_fail@plt+0x25b8>
   134a8:	mov	r8, r0
   134ac:	mov	r6, r1
   134b0:	mov	r7, #0
   134b4:	b	134cc <__assert_fail@plt+0x2574>
   134b8:	cmp	r0, #0
   134bc:	beq	13504 <__assert_fail@plt+0x25ac>
   134c0:	subs	r5, r5, r0
   134c4:	add	r7, r7, r0
   134c8:	beq	134ec <__assert_fail@plt+0x2594>
   134cc:	mov	r1, r6
   134d0:	mov	r2, r5
   134d4:	mov	r0, r8
   134d8:	bl	17174 <__assert_fail@plt+0x621c>
   134dc:	cmn	r0, #1
   134e0:	mov	r4, r0
   134e4:	add	r6, r6, r0
   134e8:	bne	134b8 <__assert_fail@plt+0x2560>
   134ec:	mov	r0, r7
   134f0:	ldrd	r4, [sp]
   134f4:	ldrd	r6, [sp, #8]
   134f8:	ldr	r8, [sp, #16]
   134fc:	add	sp, sp, #20
   13500:	pop	{pc}		; (ldr pc, [sp], #4)
   13504:	bl	10e8c <__errno_location@plt>
   13508:	str	r4, [r0]
   1350c:	b	134ec <__assert_fail@plt+0x2594>
   13510:	mov	r7, r5
   13514:	b	134ec <__assert_fail@plt+0x2594>
   13518:	mov	r3, #0
   1351c:	cmp	r0, #0
   13520:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13524:	mov	r5, r1
   13528:	sbcs	r1, r1, #0
   1352c:	strd	r6, [sp, #8]
   13530:	mov	r4, r0
   13534:	add	r6, r2, #20
   13538:	str	r8, [sp, #16]
   1353c:	str	lr, [sp, #20]
   13540:	strb	r3, [r2, #20]
   13544:	blt	135a4 <__assert_fail@plt+0x264c>
   13548:	mov	r0, r4
   1354c:	mov	r1, r5
   13550:	mov	r2, #10
   13554:	mov	r3, #0
   13558:	bl	1949c <__assert_fail@plt+0x8544>
   1355c:	add	ip, r2, #48	; 0x30
   13560:	mov	r0, r4
   13564:	mov	r1, r5
   13568:	mov	r3, #0
   1356c:	mov	r2, #10
   13570:	strb	ip, [r6, #-1]!
   13574:	bl	1949c <__assert_fail@plt+0x8544>
   13578:	mov	r4, r0
   1357c:	mov	r5, r1
   13580:	orrs	r3, r4, r5
   13584:	bne	13548 <__assert_fail@plt+0x25f0>
   13588:	mov	r0, r6
   1358c:	ldrd	r4, [sp]
   13590:	ldrd	r6, [sp, #8]
   13594:	ldr	r8, [sp, #16]
   13598:	add	sp, sp, #20
   1359c:	pop	{pc}		; (ldr pc, [sp], #4)
   135a0:	mov	r6, r7
   135a4:	mov	r0, r4
   135a8:	mov	r1, r5
   135ac:	mov	r2, #10
   135b0:	mov	r3, #0
   135b4:	bl	1949c <__assert_fail@plt+0x8544>
   135b8:	rsb	ip, r2, #48	; 0x30
   135bc:	mov	r0, r4
   135c0:	mov	r1, r5
   135c4:	mov	r3, #0
   135c8:	mov	r2, #10
   135cc:	strb	ip, [r6, #-1]
   135d0:	sub	r7, r6, #1
   135d4:	bl	1949c <__assert_fail@plt+0x8544>
   135d8:	mov	r4, r0
   135dc:	mov	r5, r1
   135e0:	orrs	r3, r4, r5
   135e4:	bne	135a0 <__assert_fail@plt+0x2648>
   135e8:	mov	r3, #45	; 0x2d
   135ec:	sub	r6, r6, #2
   135f0:	strb	r3, [r7, #-1]
   135f4:	b	13588 <__assert_fail@plt+0x2630>
   135f8:	mov	r3, #0
   135fc:	strd	r4, [sp, #-16]!
   13600:	mov	r4, r0
   13604:	mov	r5, r1
   13608:	str	r6, [sp, #8]
   1360c:	add	r6, r2, #20
   13610:	str	lr, [sp, #12]
   13614:	strb	r3, [r2, #20]
   13618:	mov	r0, r4
   1361c:	mov	r1, r5
   13620:	mov	r2, #10
   13624:	mov	r3, #0
   13628:	bl	19570 <__assert_fail@plt+0x8618>
   1362c:	add	ip, r2, #48	; 0x30
   13630:	mov	r0, r4
   13634:	mov	r1, r5
   13638:	mov	r2, #10
   1363c:	mov	r3, #0
   13640:	strb	ip, [r6, #-1]!
   13644:	bl	19570 <__assert_fail@plt+0x8618>
   13648:	cmp	r5, #0
   1364c:	mov	r5, r1
   13650:	cmpeq	r4, #9
   13654:	mov	r4, r0
   13658:	bhi	13618 <__assert_fail@plt+0x26c0>
   1365c:	mov	r0, r6
   13660:	ldrd	r4, [sp]
   13664:	ldr	r6, [sp, #8]
   13668:	add	sp, sp, #12
   1366c:	pop	{pc}		; (ldr pc, [sp], #4)
   13670:	strd	r4, [sp, #-16]!
   13674:	subs	r4, r0, #0
   13678:	str	r6, [sp, #8]
   1367c:	str	lr, [sp, #12]
   13680:	beq	13718 <__assert_fail@plt+0x27c0>
   13684:	mov	r1, #47	; 0x2f
   13688:	bl	10f04 <strrchr@plt>
   1368c:	subs	r5, r0, #0
   13690:	beq	136f0 <__assert_fail@plt+0x2798>
   13694:	add	r6, r5, #1
   13698:	sub	r3, r6, r4
   1369c:	cmp	r3, #6
   136a0:	ble	136f0 <__assert_fail@plt+0x2798>
   136a4:	movw	r1, #41248	; 0xa120
   136a8:	movt	r1, #1
   136ac:	mov	r2, #7
   136b0:	sub	r0, r5, #6
   136b4:	bl	10f34 <strncmp@plt>
   136b8:	cmp	r0, #0
   136bc:	bne	136f0 <__assert_fail@plt+0x2798>
   136c0:	movw	r1, #41256	; 0xa128
   136c4:	movt	r1, #1
   136c8:	mov	r2, #3
   136cc:	mov	r0, r6
   136d0:	bl	10f34 <strncmp@plt>
   136d4:	cmp	r0, #0
   136d8:	movne	r4, r6
   136dc:	bne	136f0 <__assert_fail@plt+0x2798>
   136e0:	add	r4, r5, #4
   136e4:	movw	r3, #45376	; 0xb140
   136e8:	movt	r3, #2
   136ec:	str	r4, [r3]
   136f0:	movw	r2, #45420	; 0xb16c
   136f4:	movt	r2, #2
   136f8:	ldr	r6, [sp, #8]
   136fc:	movw	r3, #45380	; 0xb144
   13700:	movt	r3, #2
   13704:	str	r4, [r2]
   13708:	str	r4, [r3]
   1370c:	ldrd	r4, [sp]
   13710:	add	sp, sp, #12
   13714:	pop	{pc}		; (ldr pc, [sp], #4)
   13718:	movw	r3, #45392	; 0xb150
   1371c:	movt	r3, #2
   13720:	movw	r0, #41192	; 0xa0e8
   13724:	movt	r0, #1
   13728:	ldr	r3, [r3]
   1372c:	mov	r2, #55	; 0x37
   13730:	mov	r1, #1
   13734:	bl	10dc0 <fwrite@plt>
   13738:	bl	10f40 <abort@plt>
   1373c:	mov	r2, #5
   13740:	strd	r4, [sp, #-16]!
   13744:	mov	r5, r0
   13748:	str	r6, [sp, #8]
   1374c:	mov	r6, r1
   13750:	mov	r1, r0
   13754:	mov	r0, #0
   13758:	str	lr, [sp, #12]
   1375c:	bl	10d78 <dcgettext@plt>
   13760:	cmp	r5, r0
   13764:	mov	r4, r0
   13768:	beq	13780 <__assert_fail@plt+0x2828>
   1376c:	mov	r0, r4
   13770:	ldrd	r4, [sp]
   13774:	ldr	r6, [sp, #8]
   13778:	add	sp, sp, #12
   1377c:	pop	{pc}		; (ldr pc, [sp], #4)
   13780:	bl	1928c <__assert_fail@plt+0x8334>
   13784:	ldrb	r3, [r0]
   13788:	bic	r3, r3, #32
   1378c:	cmp	r3, #85	; 0x55
   13790:	bne	137f8 <__assert_fail@plt+0x28a0>
   13794:	ldrb	r3, [r0, #1]
   13798:	bic	r3, r3, #32
   1379c:	cmp	r3, #84	; 0x54
   137a0:	bne	13878 <__assert_fail@plt+0x2920>
   137a4:	ldrb	r3, [r0, #2]
   137a8:	bic	r3, r3, #32
   137ac:	cmp	r3, #70	; 0x46
   137b0:	bne	13878 <__assert_fail@plt+0x2920>
   137b4:	ldrb	r3, [r0, #3]
   137b8:	cmp	r3, #45	; 0x2d
   137bc:	bne	13878 <__assert_fail@plt+0x2920>
   137c0:	ldrb	r3, [r0, #4]
   137c4:	cmp	r3, #56	; 0x38
   137c8:	bne	13878 <__assert_fail@plt+0x2920>
   137cc:	ldrb	r3, [r0, #5]
   137d0:	cmp	r3, #0
   137d4:	bne	13878 <__assert_fail@plt+0x2920>
   137d8:	ldrb	r2, [r4]
   137dc:	movw	r3, #41348	; 0xa184
   137e0:	movt	r3, #1
   137e4:	movw	r4, #41360	; 0xa190
   137e8:	movt	r4, #1
   137ec:	cmp	r2, #96	; 0x60
   137f0:	movne	r4, r3
   137f4:	b	1376c <__assert_fail@plt+0x2814>
   137f8:	cmp	r3, #71	; 0x47
   137fc:	bne	13878 <__assert_fail@plt+0x2920>
   13800:	ldrb	r3, [r0, #1]
   13804:	bic	r3, r3, #32
   13808:	cmp	r3, #66	; 0x42
   1380c:	bne	13878 <__assert_fail@plt+0x2920>
   13810:	ldrb	r3, [r0, #2]
   13814:	cmp	r3, #49	; 0x31
   13818:	bne	13878 <__assert_fail@plt+0x2920>
   1381c:	ldrb	r3, [r0, #3]
   13820:	cmp	r3, #56	; 0x38
   13824:	bne	13878 <__assert_fail@plt+0x2920>
   13828:	ldrb	r3, [r0, #4]
   1382c:	cmp	r3, #48	; 0x30
   13830:	bne	13878 <__assert_fail@plt+0x2920>
   13834:	ldrb	r3, [r0, #5]
   13838:	cmp	r3, #51	; 0x33
   1383c:	bne	13878 <__assert_fail@plt+0x2920>
   13840:	ldrb	r3, [r0, #6]
   13844:	cmp	r3, #48	; 0x30
   13848:	bne	13878 <__assert_fail@plt+0x2920>
   1384c:	ldrb	r3, [r0, #7]
   13850:	cmp	r3, #0
   13854:	bne	13878 <__assert_fail@plt+0x2920>
   13858:	ldrb	r2, [r4]
   1385c:	movw	r3, #41352	; 0xa188
   13860:	movt	r3, #1
   13864:	movw	r4, #41356	; 0xa18c
   13868:	movt	r4, #1
   1386c:	cmp	r2, #96	; 0x60
   13870:	movne	r4, r3
   13874:	b	1376c <__assert_fail@plt+0x2814>
   13878:	movw	r3, #41364	; 0xa194
   1387c:	movt	r3, #1
   13880:	cmp	r6, #9
   13884:	movw	r4, #41344	; 0xa180
   13888:	movt	r4, #1
   1388c:	movne	r4, r3
   13890:	b	1376c <__assert_fail@plt+0x2814>
   13894:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13898:	strd	r6, [sp, #8]
   1389c:	strd	r8, [sp, #16]
   138a0:	mov	r8, r3
   138a4:	strd	sl, [sp, #24]
   138a8:	mov	fp, r0
   138ac:	mov	sl, r1
   138b0:	str	lr, [sp, #32]
   138b4:	sub	sp, sp, #140	; 0x8c
   138b8:	ldr	r3, [sp, #180]	; 0xb4
   138bc:	str	r2, [sp, #28]
   138c0:	and	r4, r3, #2
   138c4:	ubfx	r3, r3, #1, #1
   138c8:	str	r3, [sp, #44]	; 0x2c
   138cc:	bl	10dd8 <__ctype_get_mb_cur_max@plt>
   138d0:	ldr	r3, [sp, #176]	; 0xb0
   138d4:	str	r0, [sp, #76]	; 0x4c
   138d8:	cmp	r3, #10
   138dc:	ldrls	pc, [pc, r3, lsl #2]
   138e0:	b	1527c <__assert_fail@plt+0x4324>
   138e4:	andeq	r3, r1, r4, ror #26
   138e8:	andeq	r3, r1, r0, lsl #29
   138ec:	strdeq	r4, [r1], -ip
   138f0:	andeq	r3, r1, ip, ror #29
   138f4:	andeq	r3, r1, ip, ror #24
   138f8:	andeq	r3, r1, r8, ror #25
   138fc:	andeq	r3, r1, r0, asr #27
   13900:	andeq	r3, r1, r8, lsr #28
   13904:	andeq	r3, r1, r0, lsl r9
   13908:	andeq	r3, r1, r0, lsl r9
   1390c:	andeq	r3, r1, r0, lsl r9
   13910:	ldr	r3, [sp, #176]	; 0xb0
   13914:	cmp	r3, #10
   13918:	beq	13944 <__assert_fail@plt+0x29ec>
   1391c:	mov	r1, r3
   13920:	movw	r0, #41368	; 0xa198
   13924:	movt	r0, #1
   13928:	bl	1373c <__assert_fail@plt+0x27e4>
   1392c:	str	r0, [sp, #188]	; 0xbc
   13930:	movw	r0, #41364	; 0xa194
   13934:	movt	r0, #1
   13938:	ldr	r1, [sp, #176]	; 0xb0
   1393c:	bl	1373c <__assert_fail@plt+0x27e4>
   13940:	str	r0, [sp, #192]	; 0xc0
   13944:	cmp	r4, #0
   13948:	movne	r4, #0
   1394c:	beq	15008 <__assert_fail@plt+0x40b0>
   13950:	mov	r5, #0
   13954:	ldr	r0, [sp, #192]	; 0xc0
   13958:	mov	r9, r5
   1395c:	str	r5, [sp, #64]	; 0x40
   13960:	bl	10e68 <strlen@plt>
   13964:	mov	r3, #1
   13968:	ldr	r2, [sp, #44]	; 0x2c
   1396c:	cmp	r0, r5
   13970:	moveq	r2, r5
   13974:	str	r3, [sp, #32]
   13978:	str	r3, [sp, #48]	; 0x30
   1397c:	str	r5, [sp, #52]	; 0x34
   13980:	str	r3, [sp, #60]	; 0x3c
   13984:	ldr	r3, [sp, #180]	; 0xb4
   13988:	str	r0, [sp, #56]	; 0x38
   1398c:	str	r5, [sp, #68]	; 0x44
   13990:	str	r5, [sp, #80]	; 0x50
   13994:	str	r5, [sp, #84]	; 0x54
   13998:	and	r3, r3, #1
   1399c:	str	r2, [sp, #88]	; 0x58
   139a0:	str	r3, [sp, #92]	; 0x5c
   139a4:	ldr	r3, [sp, #180]	; 0xb4
   139a8:	and	r3, r3, #4
   139ac:	str	r3, [sp, #96]	; 0x60
   139b0:	ldr	r3, [sp, #192]	; 0xc0
   139b4:	str	r3, [sp, #72]	; 0x48
   139b8:	mov	r3, fp
   139bc:	mov	r7, #0
   139c0:	mov	fp, r9
   139c4:	mov	r9, r3
   139c8:	cmn	r8, #1
   139cc:	beq	13fd0 <__assert_fail@plt+0x3078>
   139d0:	subs	r6, r8, r7
   139d4:	movne	r6, #1
   139d8:	cmp	r6, #0
   139dc:	beq	13fe8 <__assert_fail@plt+0x3090>
   139e0:	ldr	r0, [sp, #28]
   139e4:	ldr	r3, [sp, #48]	; 0x30
   139e8:	cmp	r3, #0
   139ec:	add	r3, r0, r7
   139f0:	str	r3, [sp, #36]	; 0x24
   139f4:	beq	14474 <__assert_fail@plt+0x351c>
   139f8:	ldr	r2, [sp, #56]	; 0x38
   139fc:	cmp	r2, #0
   13a00:	beq	14974 <__assert_fail@plt+0x3a1c>
   13a04:	cmp	r2, #1
   13a08:	mov	r3, r2
   13a0c:	movls	r3, #0
   13a10:	movhi	r3, #1
   13a14:	cmn	r8, #1
   13a18:	add	r5, r7, r2
   13a1c:	movne	r3, #0
   13a20:	cmp	r3, #0
   13a24:	beq	13a30 <__assert_fail@plt+0x2ad8>
   13a28:	bl	10e68 <strlen@plt>
   13a2c:	mov	r8, r0
   13a30:	cmp	r5, r8
   13a34:	bhi	14974 <__assert_fail@plt+0x3a1c>
   13a38:	ldr	r0, [sp, #36]	; 0x24
   13a3c:	ldr	r2, [sp, #56]	; 0x38
   13a40:	ldr	r1, [sp, #72]	; 0x48
   13a44:	bl	10d60 <memcmp@plt>
   13a48:	cmp	r0, #0
   13a4c:	bne	14974 <__assert_fail@plt+0x3a1c>
   13a50:	ldr	r3, [sp, #44]	; 0x2c
   13a54:	cmp	r3, #0
   13a58:	bne	15120 <__assert_fail@plt+0x41c8>
   13a5c:	ldr	r3, [sp, #36]	; 0x24
   13a60:	ldrb	r5, [r3]
   13a64:	cmp	r5, #126	; 0x7e
   13a68:	ldrls	pc, [pc, r5, lsl #2]
   13a6c:	b	14f08 <__assert_fail@plt+0x3fb0>
   13a70:	andeq	r4, r1, r4, asr #2
   13a74:	andeq	r4, r1, r8, lsl #30
   13a78:	andeq	r4, r1, r8, lsl #30
   13a7c:	andeq	r4, r1, r8, lsl #30
   13a80:	andeq	r4, r1, r8, lsl #30
   13a84:	andeq	r4, r1, r8, lsl #30
   13a88:	andeq	r4, r1, r8, lsl #30
   13a8c:	muleq	r1, ip, r0
   13a90:	muleq	r1, r4, r0
   13a94:	andeq	r4, r1, r4, lsr #1
   13a98:	andeq	r4, r1, r8, lsr #4
   13a9c:	andeq	r4, r1, r8, lsl r2
   13aa0:	andeq	r3, r1, r0, asr #30
   13aa4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13aa8:	andeq	r4, r1, r8, lsl #30
   13aac:	andeq	r4, r1, r8, lsl #30
   13ab0:	andeq	r4, r1, r8, lsl #30
   13ab4:	andeq	r4, r1, r8, lsl #30
   13ab8:	andeq	r4, r1, r8, lsl #30
   13abc:	andeq	r4, r1, r8, lsl #30
   13ac0:	andeq	r4, r1, r8, lsl #30
   13ac4:	andeq	r4, r1, r8, lsl #30
   13ac8:	andeq	r4, r1, r8, lsl #30
   13acc:	andeq	r4, r1, r8, lsl #30
   13ad0:	andeq	r4, r1, r8, lsl #30
   13ad4:	andeq	r4, r1, r8, lsl #30
   13ad8:	andeq	r4, r1, r8, lsl #30
   13adc:	andeq	r4, r1, r8, lsl #30
   13ae0:	andeq	r4, r1, r8, lsl #30
   13ae4:	andeq	r4, r1, r8, lsl #30
   13ae8:	andeq	r4, r1, r8, lsl #30
   13aec:	andeq	r4, r1, r8, lsl #30
   13af0:	andeq	r4, r1, r0, lsr #5
   13af4:	muleq	r1, r4, r2
   13af8:	muleq	r1, r4, r2
   13afc:	andeq	r4, r1, r8, lsl #5
   13b00:	muleq	r1, r4, r2
   13b04:	andeq	r4, r1, ip, ror #6
   13b08:	muleq	r1, r4, r2
   13b0c:	ldrdeq	r4, [r1], -ip
   13b10:	muleq	r1, r4, r2
   13b14:	muleq	r1, r4, r2
   13b18:	muleq	r1, r4, r2
   13b1c:	andeq	r4, r1, ip, ror #6
   13b20:	andeq	r4, r1, ip, ror #6
   13b24:	andeq	r4, r1, ip, ror #6
   13b28:	andeq	r4, r1, ip, ror #6
   13b2c:	andeq	r4, r1, ip, ror #6
   13b30:	andeq	r4, r1, ip, ror #6
   13b34:	andeq	r4, r1, ip, ror #6
   13b38:	andeq	r4, r1, ip, ror #6
   13b3c:	andeq	r4, r1, ip, ror #6
   13b40:	andeq	r4, r1, ip, ror #6
   13b44:	andeq	r4, r1, ip, ror #6
   13b48:	andeq	r4, r1, ip, ror #6
   13b4c:	andeq	r4, r1, ip, ror #6
   13b50:	andeq	r4, r1, ip, ror #6
   13b54:	andeq	r4, r1, ip, ror #6
   13b58:	andeq	r4, r1, ip, ror #6
   13b5c:	muleq	r1, r4, r2
   13b60:	muleq	r1, r4, r2
   13b64:	muleq	r1, r4, r2
   13b68:	muleq	r1, r4, r2
   13b6c:	andeq	r4, r1, ip, lsl #7
   13b70:	andeq	r4, r1, r8, lsl #30
   13b74:	andeq	r4, r1, ip, ror #6
   13b78:	andeq	r4, r1, ip, ror #6
   13b7c:	andeq	r4, r1, ip, ror #6
   13b80:	andeq	r4, r1, ip, ror #6
   13b84:	andeq	r4, r1, ip, ror #6
   13b88:	andeq	r4, r1, ip, ror #6
   13b8c:	andeq	r4, r1, ip, ror #6
   13b90:	andeq	r4, r1, ip, ror #6
   13b94:	andeq	r4, r1, ip, ror #6
   13b98:	andeq	r4, r1, ip, ror #6
   13b9c:	andeq	r4, r1, ip, ror #6
   13ba0:	andeq	r4, r1, ip, ror #6
   13ba4:	andeq	r4, r1, ip, ror #6
   13ba8:	andeq	r4, r1, ip, ror #6
   13bac:	andeq	r4, r1, ip, ror #6
   13bb0:	andeq	r4, r1, ip, ror #6
   13bb4:	andeq	r4, r1, ip, ror #6
   13bb8:	andeq	r4, r1, ip, ror #6
   13bbc:	andeq	r4, r1, ip, ror #6
   13bc0:	andeq	r4, r1, ip, ror #6
   13bc4:	andeq	r4, r1, ip, ror #6
   13bc8:	andeq	r4, r1, ip, ror #6
   13bcc:	andeq	r4, r1, ip, ror #6
   13bd0:	andeq	r4, r1, ip, ror #6
   13bd4:	andeq	r4, r1, ip, ror #6
   13bd8:	andeq	r4, r1, ip, ror #6
   13bdc:	muleq	r1, r4, r2
   13be0:	andeq	r4, r1, r0, lsr r3
   13be4:	andeq	r4, r1, ip, ror #6
   13be8:	muleq	r1, r4, r2
   13bec:	andeq	r4, r1, ip, ror #6
   13bf0:	muleq	r1, r4, r2
   13bf4:	andeq	r4, r1, ip, ror #6
   13bf8:	andeq	r4, r1, ip, ror #6
   13bfc:	andeq	r4, r1, ip, ror #6
   13c00:	andeq	r4, r1, ip, ror #6
   13c04:	andeq	r4, r1, ip, ror #6
   13c08:	andeq	r4, r1, ip, ror #6
   13c0c:	andeq	r4, r1, ip, ror #6
   13c10:	andeq	r4, r1, ip, ror #6
   13c14:	andeq	r4, r1, ip, ror #6
   13c18:	andeq	r4, r1, ip, ror #6
   13c1c:	andeq	r4, r1, ip, ror #6
   13c20:	andeq	r4, r1, ip, ror #6
   13c24:	andeq	r4, r1, ip, ror #6
   13c28:	andeq	r4, r1, ip, ror #6
   13c2c:	andeq	r4, r1, ip, ror #6
   13c30:	andeq	r4, r1, ip, ror #6
   13c34:	andeq	r4, r1, ip, ror #6
   13c38:	andeq	r4, r1, ip, ror #6
   13c3c:	andeq	r4, r1, ip, ror #6
   13c40:	andeq	r4, r1, ip, ror #6
   13c44:	andeq	r4, r1, ip, ror #6
   13c48:	andeq	r4, r1, ip, ror #6
   13c4c:	andeq	r4, r1, ip, ror #6
   13c50:	andeq	r4, r1, ip, ror #6
   13c54:	andeq	r4, r1, ip, ror #6
   13c58:	andeq	r4, r1, ip, ror #6
   13c5c:	andeq	r4, r1, ip, lsr r2
   13c60:	muleq	r1, r4, r2
   13c64:	andeq	r4, r1, ip, lsr r2
   13c68:	andeq	r4, r1, r8, lsl #5
   13c6c:	ldr	r3, [sp, #180]	; 0xb4
   13c70:	cmp	r4, #0
   13c74:	and	r3, r3, #1
   13c78:	str	r3, [sp, #92]	; 0x5c
   13c7c:	ldr	r3, [sp, #180]	; 0xb4
   13c80:	and	r3, r3, #4
   13c84:	str	r3, [sp, #96]	; 0x60
   13c88:	moveq	r3, #1
   13c8c:	streq	r3, [sp, #60]	; 0x3c
   13c90:	beq	14420 <__assert_fail@plt+0x34c8>
   13c94:	mov	r3, #0
   13c98:	mov	r2, #1
   13c9c:	mov	r4, r3
   13ca0:	mov	r9, r3
   13ca4:	str	r2, [sp, #32]
   13ca8:	str	r2, [sp, #44]	; 0x2c
   13cac:	str	r3, [sp, #48]	; 0x30
   13cb0:	str	r2, [sp, #52]	; 0x34
   13cb4:	str	r2, [sp, #56]	; 0x38
   13cb8:	str	r3, [sp, #60]	; 0x3c
   13cbc:	str	r2, [sp, #64]	; 0x40
   13cc0:	str	r2, [sp, #68]	; 0x44
   13cc4:	str	r3, [sp, #80]	; 0x50
   13cc8:	str	r3, [sp, #84]	; 0x54
   13ccc:	str	r3, [sp, #88]	; 0x58
   13cd0:	movw	r3, #41364	; 0xa194
   13cd4:	movt	r3, #1
   13cd8:	str	r3, [sp, #72]	; 0x48
   13cdc:	mov	r3, #2
   13ce0:	str	r3, [sp, #176]	; 0xb0
   13ce4:	b	139b8 <__assert_fail@plt+0x2a60>
   13ce8:	ldr	r3, [sp, #180]	; 0xb4
   13cec:	cmp	r4, #0
   13cf0:	and	r3, r3, #1
   13cf4:	str	r3, [sp, #92]	; 0x5c
   13cf8:	ldr	r3, [sp, #180]	; 0xb4
   13cfc:	and	r3, r3, #4
   13d00:	str	r3, [sp, #96]	; 0x60
   13d04:	bne	150d8 <__assert_fail@plt+0x4180>
   13d08:	cmp	sl, #0
   13d0c:	beq	14e84 <__assert_fail@plt+0x3f2c>
   13d10:	mov	r3, #34	; 0x22
   13d14:	mov	r2, r4
   13d18:	mov	r1, #1
   13d1c:	mov	r9, r2
   13d20:	strb	r3, [fp]
   13d24:	movw	r3, #41344	; 0xa180
   13d28:	movt	r3, #1
   13d2c:	mov	r4, r1
   13d30:	str	r1, [sp, #32]
   13d34:	str	r2, [sp, #44]	; 0x2c
   13d38:	str	r1, [sp, #48]	; 0x30
   13d3c:	str	r2, [sp, #52]	; 0x34
   13d40:	str	r1, [sp, #56]	; 0x38
   13d44:	str	r1, [sp, #60]	; 0x3c
   13d48:	str	r2, [sp, #64]	; 0x40
   13d4c:	str	r2, [sp, #68]	; 0x44
   13d50:	str	r3, [sp, #72]	; 0x48
   13d54:	str	r2, [sp, #80]	; 0x50
   13d58:	str	r2, [sp, #84]	; 0x54
   13d5c:	str	r2, [sp, #88]	; 0x58
   13d60:	b	139b8 <__assert_fail@plt+0x2a60>
   13d64:	mov	r3, #0
   13d68:	mov	r2, #1
   13d6c:	mov	r9, r3
   13d70:	str	r2, [sp, #32]
   13d74:	str	r3, [sp, #44]	; 0x2c
   13d78:	str	r3, [sp, #48]	; 0x30
   13d7c:	str	r3, [sp, #52]	; 0x34
   13d80:	str	r3, [sp, #60]	; 0x3c
   13d84:	strd	r2, [sp, #64]	; 0x40
   13d88:	str	r3, [sp, #72]	; 0x48
   13d8c:	str	r3, [sp, #80]	; 0x50
   13d90:	str	r3, [sp, #88]	; 0x58
   13d94:	ldr	r3, [sp, #180]	; 0xb4
   13d98:	and	r3, r3, r2
   13d9c:	str	r3, [sp, #92]	; 0x5c
   13da0:	ldr	r3, [sp, #180]	; 0xb4
   13da4:	and	r3, r3, #4
   13da8:	str	r3, [sp, #96]	; 0x60
   13dac:	ldr	r3, [sp, #176]	; 0xb0
   13db0:	mov	r4, r3
   13db4:	str	r3, [sp, #56]	; 0x38
   13db8:	str	r3, [sp, #84]	; 0x54
   13dbc:	b	139b8 <__assert_fail@plt+0x2a60>
   13dc0:	mov	r3, #1
   13dc4:	mov	r4, #0
   13dc8:	mov	r9, r4
   13dcc:	str	r3, [sp, #32]
   13dd0:	str	r3, [sp, #44]	; 0x2c
   13dd4:	str	r3, [sp, #48]	; 0x30
   13dd8:	str	r4, [sp, #52]	; 0x34
   13ddc:	str	r3, [sp, #56]	; 0x38
   13de0:	str	r3, [sp, #60]	; 0x3c
   13de4:	str	r3, [sp, #88]	; 0x58
   13de8:	movw	r3, #41344	; 0xa180
   13dec:	movt	r3, #1
   13df0:	str	r4, [sp, #64]	; 0x40
   13df4:	str	r4, [sp, #68]	; 0x44
   13df8:	str	r3, [sp, #72]	; 0x48
   13dfc:	ldr	r3, [sp, #180]	; 0xb4
   13e00:	str	r4, [sp, #80]	; 0x50
   13e04:	str	r4, [sp, #84]	; 0x54
   13e08:	and	r3, r3, #1
   13e0c:	str	r3, [sp, #92]	; 0x5c
   13e10:	ldr	r3, [sp, #180]	; 0xb4
   13e14:	and	r3, r3, #4
   13e18:	str	r3, [sp, #96]	; 0x60
   13e1c:	mov	r3, #5
   13e20:	str	r3, [sp, #176]	; 0xb0
   13e24:	b	139b8 <__assert_fail@plt+0x2a60>
   13e28:	mov	r3, #1
   13e2c:	mov	r4, #0
   13e30:	mov	r9, r4
   13e34:	str	r3, [sp, #32]
   13e38:	str	r4, [sp, #44]	; 0x2c
   13e3c:	str	r3, [sp, #48]	; 0x30
   13e40:	str	r3, [sp, #60]	; 0x3c
   13e44:	ldr	r3, [sp, #180]	; 0xb4
   13e48:	str	r4, [sp, #52]	; 0x34
   13e4c:	str	r4, [sp, #56]	; 0x38
   13e50:	str	r4, [sp, #64]	; 0x40
   13e54:	str	r4, [sp, #68]	; 0x44
   13e58:	and	r3, r3, #1
   13e5c:	str	r4, [sp, #72]	; 0x48
   13e60:	str	r4, [sp, #80]	; 0x50
   13e64:	str	r4, [sp, #84]	; 0x54
   13e68:	str	r3, [sp, #92]	; 0x5c
   13e6c:	ldr	r3, [sp, #180]	; 0xb4
   13e70:	str	r4, [sp, #88]	; 0x58
   13e74:	and	r3, r3, #4
   13e78:	str	r3, [sp, #96]	; 0x60
   13e7c:	b	139b8 <__assert_fail@plt+0x2a60>
   13e80:	mov	r3, #0
   13e84:	mov	r2, #1
   13e88:	ldr	r1, [sp, #176]	; 0xb0
   13e8c:	mov	r4, r3
   13e90:	mov	r9, r3
   13e94:	movw	r3, #41364	; 0xa194
   13e98:	movt	r3, #1
   13e9c:	str	r2, [sp, #32]
   13ea0:	str	r2, [sp, #44]	; 0x2c
   13ea4:	str	r4, [sp, #48]	; 0x30
   13ea8:	strd	r2, [sp, #68]	; 0x44
   13eac:	ldr	r3, [sp, #180]	; 0xb4
   13eb0:	str	r2, [sp, #52]	; 0x34
   13eb4:	str	r1, [sp, #56]	; 0x38
   13eb8:	str	r4, [sp, #60]	; 0x3c
   13ebc:	str	r2, [sp, #64]	; 0x40
   13ec0:	and	r3, r3, r2
   13ec4:	str	r4, [sp, #80]	; 0x50
   13ec8:	str	r4, [sp, #84]	; 0x54
   13ecc:	str	r4, [sp, #88]	; 0x58
   13ed0:	str	r3, [sp, #92]	; 0x5c
   13ed4:	ldr	r3, [sp, #180]	; 0xb4
   13ed8:	and	r3, r3, #4
   13edc:	str	r3, [sp, #96]	; 0x60
   13ee0:	mov	r3, #2
   13ee4:	str	r3, [sp, #176]	; 0xb0
   13ee8:	b	139b8 <__assert_fail@plt+0x2a60>
   13eec:	mov	r3, #1
   13ef0:	mov	r2, #0
   13ef4:	mov	r4, r2
   13ef8:	mov	r9, r2
   13efc:	str	r3, [sp, #32]
   13f00:	str	r3, [sp, #44]	; 0x2c
   13f04:	str	r2, [sp, #48]	; 0x30
   13f08:	str	r3, [sp, #52]	; 0x34
   13f0c:	str	r3, [sp, #56]	; 0x38
   13f10:	str	r3, [sp, #60]	; 0x3c
   13f14:	str	r3, [sp, #64]	; 0x40
   13f18:	str	r3, [sp, #68]	; 0x44
   13f1c:	str	r3, [sp, #88]	; 0x58
   13f20:	movw	r3, #41364	; 0xa194
   13f24:	movt	r3, #1
   13f28:	str	r3, [sp, #72]	; 0x48
   13f2c:	ldr	r3, [sp, #180]	; 0xb4
   13f30:	str	r2, [sp, #80]	; 0x50
   13f34:	str	r2, [sp, #84]	; 0x54
   13f38:	and	r3, r3, #1
   13f3c:	b	13ed0 <__assert_fail@plt+0x2f78>
   13f40:	mov	r5, #102	; 0x66
   13f44:	mov	r6, #0
   13f48:	ldr	r3, [sp, #44]	; 0x2c
   13f4c:	cmp	r3, #0
   13f50:	bne	14e00 <__assert_fail@plt+0x3ea8>
   13f54:	ldr	r2, [sp, #52]	; 0x34
   13f58:	eor	r3, fp, #1
   13f5c:	ands	r3, r2, r3
   13f60:	beq	13f98 <__assert_fail@plt+0x3040>
   13f64:	cmp	sl, r4
   13f68:	mov	fp, r3
   13f6c:	movhi	r2, #39	; 0x27
   13f70:	strbhi	r2, [r9, r4]
   13f74:	add	r2, r4, #1
   13f78:	cmp	sl, r2
   13f7c:	movhi	r1, #36	; 0x24
   13f80:	strbhi	r1, [r9, r2]
   13f84:	add	r2, r4, #2
   13f88:	add	r4, r4, #3
   13f8c:	cmp	sl, r2
   13f90:	movhi	r1, #39	; 0x27
   13f94:	strbhi	r1, [r9, r2]
   13f98:	cmp	sl, r4
   13f9c:	add	r7, r7, #1
   13fa0:	movhi	r3, #92	; 0x5c
   13fa4:	strbhi	r3, [r9, r4]
   13fa8:	add	r4, r4, #1
   13fac:	cmp	r4, sl
   13fb0:	ldr	r3, [sp, #32]
   13fb4:	strbcc	r5, [r9, r4]
   13fb8:	cmp	r6, #0
   13fbc:	add	r4, r4, #1
   13fc0:	moveq	r3, #0
   13fc4:	cmn	r8, #1
   13fc8:	str	r3, [sp, #32]
   13fcc:	bne	139d0 <__assert_fail@plt+0x2a78>
   13fd0:	ldr	r3, [sp, #28]
   13fd4:	ldrb	r6, [r3, r7]
   13fd8:	adds	r6, r6, #0
   13fdc:	movne	r6, #1
   13fe0:	cmp	r6, #0
   13fe4:	bne	139e0 <__assert_fail@plt+0x2a88>
   13fe8:	mov	r3, r9
   13fec:	mov	r9, fp
   13ff0:	mov	fp, r3
   13ff4:	ldr	r3, [sp, #68]	; 0x44
   13ff8:	cmp	r4, #0
   13ffc:	movne	r3, #0
   14000:	cmp	r3, #0
   14004:	bne	151f8 <__assert_fail@plt+0x42a0>
   14008:	ldr	r3, [sp, #44]	; 0x2c
   1400c:	ldr	r2, [sp, #52]	; 0x34
   14010:	eor	r3, r3, #1
   14014:	ands	r2, r3, r2
   14018:	beq	15130 <__assert_fail@plt+0x41d8>
   1401c:	ldr	r3, [sp, #80]	; 0x50
   14020:	cmp	r3, #0
   14024:	beq	15134 <__assert_fail@plt+0x41dc>
   14028:	ldr	r3, [sp, #32]
   1402c:	cmp	r3, #0
   14030:	bne	151a8 <__assert_fail@plt+0x4250>
   14034:	ldr	r3, [sp, #84]	; 0x54
   14038:	adds	r3, r3, #0
   1403c:	movne	r3, #1
   14040:	cmp	sl, #0
   14044:	movne	r3, #0
   14048:	cmp	r3, #0
   1404c:	ldreq	r2, [sp, #80]	; 0x50
   14050:	beq	15134 <__assert_fail@plt+0x41dc>
   14054:	ldr	r2, [sp, #84]	; 0x54
   14058:	mov	sl, r2
   1405c:	mov	r0, #0
   14060:	mov	r4, #1
   14064:	mov	r1, #39	; 0x27
   14068:	str	r0, [sp, #44]	; 0x2c
   1406c:	strb	r1, [fp]
   14070:	str	r0, [sp, #48]	; 0x30
   14074:	str	r4, [sp, #52]	; 0x34
   14078:	str	r4, [sp, #56]	; 0x38
   1407c:	str	r4, [sp, #64]	; 0x40
   14080:	str	r0, [sp, #68]	; 0x44
   14084:	str	r3, [sp, #80]	; 0x50
   14088:	str	r2, [sp, #84]	; 0x54
   1408c:	str	r0, [sp, #88]	; 0x58
   14090:	b	13cd0 <__assert_fail@plt+0x2d78>
   14094:	mov	r5, #98	; 0x62
   14098:	b	13f44 <__assert_fail@plt+0x2fec>
   1409c:	mov	r5, #97	; 0x61
   140a0:	b	13f44 <__assert_fail@plt+0x2fec>
   140a4:	ldr	r3, [sp, #48]	; 0x30
   140a8:	str	r3, [sp, #40]	; 0x28
   140ac:	mov	r3, #116	; 0x74
   140b0:	ldr	r2, [sp, #68]	; 0x44
   140b4:	cmp	r2, #0
   140b8:	bne	142b4 <__assert_fail@plt+0x335c>
   140bc:	ldr	r2, [sp, #60]	; 0x3c
   140c0:	cmp	r2, #0
   140c4:	bne	14210 <__assert_fail@plt+0x32b8>
   140c8:	ldr	r3, [sp, #44]	; 0x2c
   140cc:	mov	r6, #0
   140d0:	cmp	r3, #0
   140d4:	beq	14280 <__assert_fail@plt+0x3328>
   140d8:	mov	r3, fp
   140dc:	ldr	r2, [sp, #184]	; 0xb8
   140e0:	cmp	r2, #0
   140e4:	beq	14104 <__assert_fail@plt+0x31ac>
   140e8:	ubfx	r1, r5, #5, #8
   140ec:	mov	r0, r2
   140f0:	and	r2, r5, #31
   140f4:	ldr	r1, [r0, r1, lsl #2]
   140f8:	lsr	r2, r1, r2
   140fc:	tst	r2, #1
   14100:	bne	13f48 <__assert_fail@plt+0x2ff0>
   14104:	ldr	r2, [sp, #40]	; 0x28
   14108:	cmp	r2, #0
   1410c:	addeq	r7, r7, #1
   14110:	bne	13f48 <__assert_fail@plt+0x2ff0>
   14114:	cmp	r3, #0
   14118:	beq	13fac <__assert_fail@plt+0x3054>
   1411c:	cmp	sl, r4
   14120:	mov	fp, #0
   14124:	movhi	r3, #39	; 0x27
   14128:	strbhi	r3, [r9, r4]
   1412c:	add	r3, r4, #1
   14130:	add	r4, r4, #2
   14134:	cmp	sl, r3
   14138:	movhi	r2, #39	; 0x27
   1413c:	strbhi	r2, [r9, r3]
   14140:	b	13fac <__assert_fail@plt+0x3054>
   14144:	ldr	r3, [sp, #48]	; 0x30
   14148:	str	r3, [sp, #40]	; 0x28
   1414c:	eor	r3, fp, #1
   14150:	ldr	r2, [sp, #52]	; 0x34
   14154:	ands	r2, r2, r3
   14158:	beq	14e18 <__assert_fail@plt+0x3ec0>
   1415c:	cmp	sl, r4
   14160:	movhi	r3, #39	; 0x27
   14164:	strbhi	r3, [r9, r4]
   14168:	add	r3, r4, #1
   1416c:	cmp	sl, r3
   14170:	movhi	r1, #36	; 0x24
   14174:	strbhi	r1, [r9, r3]
   14178:	add	r3, r4, #2
   1417c:	cmp	sl, r3
   14180:	movhi	r1, #39	; 0x27
   14184:	strbhi	r1, [r9, r3]
   14188:	add	r3, r4, #3
   1418c:	cmp	sl, r3
   14190:	bls	14e64 <__assert_fail@plt+0x3f0c>
   14194:	mov	r4, r3
   14198:	mov	r3, #92	; 0x5c
   1419c:	mov	fp, r2
   141a0:	mov	r2, r4
   141a4:	strb	r3, [r9, r4]
   141a8:	ldr	r3, [sp, #176]	; 0xb0
   141ac:	add	r4, r4, #1
   141b0:	cmp	r3, #2
   141b4:	beq	14ecc <__assert_fail@plt+0x3f74>
   141b8:	add	r3, r7, #1
   141bc:	cmp	r3, r8
   141c0:	bcs	141d8 <__assert_fail@plt+0x3280>
   141c4:	ldr	r1, [sp, #28]
   141c8:	ldrb	r3, [r1, r3]
   141cc:	sub	r3, r3, #48	; 0x30
   141d0:	cmp	r3, #9
   141d4:	bls	14edc <__assert_fail@plt+0x3f84>
   141d8:	mov	r3, #0
   141dc:	mov	r5, #48	; 0x30
   141e0:	ldr	r6, [sp, #64]	; 0x40
   141e4:	cmp	r6, #0
   141e8:	beq	140dc <__assert_fail@plt+0x3184>
   141ec:	mov	r6, #0
   141f0:	b	14104 <__assert_fail@plt+0x31ac>
   141f4:	ldr	r3, [sp, #48]	; 0x30
   141f8:	str	r3, [sp, #40]	; 0x28
   141fc:	ldr	r2, [sp, #60]	; 0x3c
   14200:	mov	r5, #13
   14204:	mov	r3, #114	; 0x72
   14208:	cmp	r2, #0
   1420c:	beq	140c8 <__assert_fail@plt+0x3170>
   14210:	mov	r5, r3
   14214:	b	13f44 <__assert_fail@plt+0x2fec>
   14218:	ldr	r3, [sp, #48]	; 0x30
   1421c:	str	r3, [sp, #40]	; 0x28
   14220:	mov	r3, #118	; 0x76
   14224:	b	140bc <__assert_fail@plt+0x3164>
   14228:	ldr	r3, [sp, #48]	; 0x30
   1422c:	str	r3, [sp, #40]	; 0x28
   14230:	mov	r5, #10
   14234:	mov	r3, #110	; 0x6e
   14238:	b	140bc <__assert_fail@plt+0x3164>
   1423c:	ldr	r3, [sp, #48]	; 0x30
   14240:	cmn	r8, #1
   14244:	str	r3, [sp, #40]	; 0x28
   14248:	beq	14690 <__assert_fail@plt+0x3738>
   1424c:	subs	r3, r8, #1
   14250:	movne	r3, #1
   14254:	cmp	r3, #0
   14258:	bne	14264 <__assert_fail@plt+0x330c>
   1425c:	cmp	r7, #0
   14260:	beq	142a8 <__assert_fail@plt+0x3350>
   14264:	mov	r6, #0
   14268:	ldr	r3, [sp, #64]	; 0x40
   1426c:	cmp	r3, #0
   14270:	beq	140d8 <__assert_fail@plt+0x3180>
   14274:	ldr	r3, [sp, #44]	; 0x2c
   14278:	cmp	r3, #0
   1427c:	bne	140d8 <__assert_fail@plt+0x3180>
   14280:	mov	r3, fp
   14284:	b	14104 <__assert_fail@plt+0x31ac>
   14288:	ldr	r3, [sp, #48]	; 0x30
   1428c:	str	r3, [sp, #40]	; 0x28
   14290:	b	1425c <__assert_fail@plt+0x3304>
   14294:	ldr	r3, [sp, #48]	; 0x30
   14298:	str	r3, [sp, #40]	; 0x28
   1429c:	b	14264 <__assert_fail@plt+0x330c>
   142a0:	ldr	r6, [sp, #48]	; 0x30
   142a4:	str	r6, [sp, #40]	; 0x28
   142a8:	ldr	r3, [sp, #68]	; 0x44
   142ac:	cmp	r3, #0
   142b0:	beq	14268 <__assert_fail@plt+0x3310>
   142b4:	mov	r3, #2
   142b8:	mov	fp, r9
   142bc:	str	r3, [sp, #176]	; 0xb0
   142c0:	ldr	r3, [sp, #60]	; 0x3c
   142c4:	cmp	r3, #0
   142c8:	ldr	r3, [sp, #176]	; 0xb0
   142cc:	movne	r3, #4
   142d0:	str	r3, [sp, #176]	; 0xb0
   142d4:	mov	lr, #0
   142d8:	mov	r0, fp
   142dc:	ldr	r2, [sp, #28]
   142e0:	ldr	r3, [sp, #180]	; 0xb4
   142e4:	ldr	r1, [sp, #188]	; 0xbc
   142e8:	bic	ip, r3, #2
   142ec:	ldr	r3, [sp, #176]	; 0xb0
   142f0:	stm	sp, {r3, ip, lr}
   142f4:	mov	r3, r8
   142f8:	ldr	ip, [sp, #192]	; 0xc0
   142fc:	str	r1, [sp, #12]
   14300:	mov	r1, sl
   14304:	str	ip, [sp, #16]
   14308:	bl	13894 <__assert_fail@plt+0x293c>
   1430c:	mov	r4, r0
   14310:	mov	r0, r4
   14314:	add	sp, sp, #140	; 0x8c
   14318:	ldrd	r4, [sp]
   1431c:	ldrd	r6, [sp, #8]
   14320:	ldrd	r8, [sp, #16]
   14324:	ldrd	sl, [sp, #24]
   14328:	add	sp, sp, #32
   1432c:	pop	{pc}		; (ldr pc, [sp], #4)
   14330:	ldr	r3, [sp, #48]	; 0x30
   14334:	str	r3, [sp, #40]	; 0x28
   14338:	ldr	r3, [sp, #176]	; 0xb0
   1433c:	cmp	r3, #2
   14340:	beq	146b8 <__assert_fail@plt+0x3760>
   14344:	ldr	r3, [sp, #88]	; 0x58
   14348:	cmp	r3, #0
   1434c:	moveq	r5, #92	; 0x5c
   14350:	moveq	r3, r5
   14354:	beq	140bc <__assert_fail@plt+0x3164>
   14358:	add	r7, r7, #1
   1435c:	mov	r3, fp
   14360:	mov	r6, #0
   14364:	mov	r5, #92	; 0x5c
   14368:	b	14114 <__assert_fail@plt+0x31bc>
   1436c:	ldr	r3, [sp, #64]	; 0x40
   14370:	cmp	r3, #0
   14374:	bne	151ec <__assert_fail@plt+0x4294>
   14378:	ldr	r2, [sp, #48]	; 0x30
   1437c:	mov	r3, fp
   14380:	mov	r6, r2
   14384:	str	r2, [sp, #40]	; 0x28
   14388:	b	140dc <__assert_fail@plt+0x3184>
   1438c:	ldr	r3, [sp, #176]	; 0xb0
   14390:	cmp	r3, #2
   14394:	beq	15128 <__assert_fail@plt+0x41d0>
   14398:	cmp	r3, #5
   1439c:	ldr	r3, [sp, #48]	; 0x30
   143a0:	str	r3, [sp, #40]	; 0x28
   143a4:	bne	143d0 <__assert_fail@plt+0x3478>
   143a8:	ldr	r3, [sp, #96]	; 0x60
   143ac:	cmp	r3, #0
   143b0:	beq	14e2c <__assert_fail@plt+0x3ed4>
   143b4:	add	r3, r7, #2
   143b8:	cmp	r3, r8
   143bc:	bcs	143d0 <__assert_fail@plt+0x3478>
   143c0:	ldr	r2, [sp, #36]	; 0x24
   143c4:	ldrb	r5, [r2, #1]
   143c8:	cmp	r5, #63	; 0x3f
   143cc:	beq	14f14 <__assert_fail@plt+0x3fbc>
   143d0:	mov	r6, #0
   143d4:	mov	r5, #63	; 0x3f
   143d8:	b	14268 <__assert_fail@plt+0x3310>
   143dc:	ldr	r3, [sp, #176]	; 0xb0
   143e0:	cmp	r3, #2
   143e4:	ldr	r3, [sp, #48]	; 0x30
   143e8:	beq	14bd0 <__assert_fail@plt+0x3c78>
   143ec:	mov	r5, #39	; 0x27
   143f0:	str	r3, [sp, #40]	; 0x28
   143f4:	str	r6, [sp, #80]	; 0x50
   143f8:	b	14268 <__assert_fail@plt+0x3310>
   143fc:	ldr	r3, [sp, #180]	; 0xb4
   14400:	cmp	r4, #0
   14404:	and	r3, r3, #1
   14408:	str	r3, [sp, #92]	; 0x5c
   1440c:	ldr	r3, [sp, #180]	; 0xb4
   14410:	and	r3, r3, #4
   14414:	str	r3, [sp, #96]	; 0x60
   14418:	bne	15238 <__assert_fail@plt+0x42e0>
   1441c:	str	r4, [sp, #60]	; 0x3c
   14420:	cmp	sl, #0
   14424:	bne	1521c <__assert_fail@plt+0x42c4>
   14428:	mov	r3, #1
   1442c:	movw	r2, #41364	; 0xa194
   14430:	movt	r2, #1
   14434:	mov	r4, r3
   14438:	mov	r3, #2
   1443c:	mov	r9, sl
   14440:	str	r4, [sp, #32]
   14444:	str	sl, [sp, #44]	; 0x2c
   14448:	str	sl, [sp, #48]	; 0x30
   1444c:	str	r4, [sp, #52]	; 0x34
   14450:	str	r4, [sp, #56]	; 0x38
   14454:	str	r4, [sp, #64]	; 0x40
   14458:	str	sl, [sp, #68]	; 0x44
   1445c:	str	r2, [sp, #72]	; 0x48
   14460:	str	sl, [sp, #80]	; 0x50
   14464:	str	sl, [sp, #84]	; 0x54
   14468:	str	sl, [sp, #88]	; 0x58
   1446c:	str	r3, [sp, #176]	; 0xb0
   14470:	b	139b8 <__assert_fail@plt+0x2a60>
   14474:	ldrb	r5, [r0, r7]
   14478:	cmp	r5, #126	; 0x7e
   1447c:	ldrls	pc, [pc, r5, lsl #2]
   14480:	b	147e4 <__assert_fail@plt+0x388c>
   14484:			; <UNDEFINED> instruction: 0x000147b0
   14488:	andeq	r4, r1, r4, ror #15
   1448c:	andeq	r4, r1, r4, ror #15
   14490:	andeq	r4, r1, r4, ror #15
   14494:	andeq	r4, r1, r4, ror #15
   14498:	andeq	r4, r1, r4, ror #15
   1449c:	andeq	r4, r1, r4, ror #15
   144a0:	andeq	r4, r1, r0, lsr #15
   144a4:	muleq	r1, r0, r7
   144a8:	andeq	r4, r1, r4, lsl r7
   144ac:	andeq	r4, r1, r0, lsl #15
   144b0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144b4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144b8:	andeq	r4, r1, r0, ror #14
   144bc:	andeq	r4, r1, r4, ror #15
   144c0:	andeq	r4, r1, r4, ror #15
   144c4:	andeq	r4, r1, r4, ror #15
   144c8:	andeq	r4, r1, r4, ror #15
   144cc:	andeq	r4, r1, r4, ror #15
   144d0:	andeq	r4, r1, r4, ror #15
   144d4:	andeq	r4, r1, r4, ror #15
   144d8:	andeq	r4, r1, r4, ror #15
   144dc:	andeq	r4, r1, r4, ror #15
   144e0:	andeq	r4, r1, r4, ror #15
   144e4:	andeq	r4, r1, r4, ror #15
   144e8:	andeq	r4, r1, r4, ror #15
   144ec:	andeq	r4, r1, r4, ror #15
   144f0:	andeq	r4, r1, r4, ror #15
   144f4:	andeq	r4, r1, r4, ror #15
   144f8:	andeq	r4, r1, r4, ror #15
   144fc:	andeq	r4, r1, r4, ror #15
   14500:	andeq	r4, r1, r4, ror #15
   14504:	andeq	r4, r1, r8, lsl #14
   14508:	andeq	r4, r1, r0, ror r7
   1450c:	andeq	r4, r1, r0, ror r7
   14510:	andeq	r4, r1, r8, ror #13
   14514:	andeq	r4, r1, r0, ror r7
   14518:	ldrdeq	r4, [r1], -ip
   1451c:	andeq	r4, r1, r0, ror r7
   14520:	andeq	r4, r1, ip, asr #14
   14524:	andeq	r4, r1, r0, ror r7
   14528:	andeq	r4, r1, r0, ror r7
   1452c:	andeq	r4, r1, r0, ror r7
   14530:	ldrdeq	r4, [r1], -ip
   14534:	ldrdeq	r4, [r1], -ip
   14538:	ldrdeq	r4, [r1], -ip
   1453c:	ldrdeq	r4, [r1], -ip
   14540:	ldrdeq	r4, [r1], -ip
   14544:	ldrdeq	r4, [r1], -ip
   14548:	ldrdeq	r4, [r1], -ip
   1454c:	ldrdeq	r4, [r1], -ip
   14550:	ldrdeq	r4, [r1], -ip
   14554:	ldrdeq	r4, [r1], -ip
   14558:	ldrdeq	r4, [r1], -ip
   1455c:	ldrdeq	r4, [r1], -ip
   14560:	ldrdeq	r4, [r1], -ip
   14564:	ldrdeq	r4, [r1], -ip
   14568:	ldrdeq	r4, [r1], -ip
   1456c:	ldrdeq	r4, [r1], -ip
   14570:	andeq	r4, r1, r0, ror r7
   14574:	andeq	r4, r1, r0, ror r7
   14578:	andeq	r4, r1, r0, ror r7
   1457c:	andeq	r4, r1, r0, ror r7
   14580:	andeq	r4, r1, r4, lsr #14
   14584:	andeq	r4, r1, r4, ror #15
   14588:	ldrdeq	r4, [r1], -ip
   1458c:	ldrdeq	r4, [r1], -ip
   14590:	ldrdeq	r4, [r1], -ip
   14594:	ldrdeq	r4, [r1], -ip
   14598:	ldrdeq	r4, [r1], -ip
   1459c:	ldrdeq	r4, [r1], -ip
   145a0:	ldrdeq	r4, [r1], -ip
   145a4:	ldrdeq	r4, [r1], -ip
   145a8:	ldrdeq	r4, [r1], -ip
   145ac:	ldrdeq	r4, [r1], -ip
   145b0:	ldrdeq	r4, [r1], -ip
   145b4:	ldrdeq	r4, [r1], -ip
   145b8:	ldrdeq	r4, [r1], -ip
   145bc:	ldrdeq	r4, [r1], -ip
   145c0:	ldrdeq	r4, [r1], -ip
   145c4:	ldrdeq	r4, [r1], -ip
   145c8:	ldrdeq	r4, [r1], -ip
   145cc:	ldrdeq	r4, [r1], -ip
   145d0:	ldrdeq	r4, [r1], -ip
   145d4:	ldrdeq	r4, [r1], -ip
   145d8:	ldrdeq	r4, [r1], -ip
   145dc:	ldrdeq	r4, [r1], -ip
   145e0:	ldrdeq	r4, [r1], -ip
   145e4:	ldrdeq	r4, [r1], -ip
   145e8:	ldrdeq	r4, [r1], -ip
   145ec:	ldrdeq	r4, [r1], -ip
   145f0:	andeq	r4, r1, r0, ror r7
   145f4:	andeq	r4, r1, r4, lsr #13
   145f8:	ldrdeq	r4, [r1], -ip
   145fc:	andeq	r4, r1, r0, ror r7
   14600:	ldrdeq	r4, [r1], -ip
   14604:	andeq	r4, r1, r0, ror r7
   14608:	ldrdeq	r4, [r1], -ip
   1460c:	ldrdeq	r4, [r1], -ip
   14610:	ldrdeq	r4, [r1], -ip
   14614:	ldrdeq	r4, [r1], -ip
   14618:	ldrdeq	r4, [r1], -ip
   1461c:	ldrdeq	r4, [r1], -ip
   14620:	ldrdeq	r4, [r1], -ip
   14624:	ldrdeq	r4, [r1], -ip
   14628:	ldrdeq	r4, [r1], -ip
   1462c:	ldrdeq	r4, [r1], -ip
   14630:	ldrdeq	r4, [r1], -ip
   14634:	ldrdeq	r4, [r1], -ip
   14638:	ldrdeq	r4, [r1], -ip
   1463c:	ldrdeq	r4, [r1], -ip
   14640:	ldrdeq	r4, [r1], -ip
   14644:	ldrdeq	r4, [r1], -ip
   14648:	ldrdeq	r4, [r1], -ip
   1464c:	ldrdeq	r4, [r1], -ip
   14650:	ldrdeq	r4, [r1], -ip
   14654:	ldrdeq	r4, [r1], -ip
   14658:	ldrdeq	r4, [r1], -ip
   1465c:	ldrdeq	r4, [r1], -ip
   14660:	ldrdeq	r4, [r1], -ip
   14664:	ldrdeq	r4, [r1], -ip
   14668:	ldrdeq	r4, [r1], -ip
   1466c:	ldrdeq	r4, [r1], -ip
   14670:	andeq	r4, r1, r0, lsl #13
   14674:	andeq	r4, r1, r0, ror r7
   14678:	andeq	r4, r1, r0, lsl #13
   1467c:	andeq	r4, r1, r8, ror #13
   14680:	mov	r3, #0
   14684:	cmn	r8, #1
   14688:	str	r3, [sp, #40]	; 0x28
   1468c:	bne	1424c <__assert_fail@plt+0x32f4>
   14690:	ldr	r3, [sp, #28]
   14694:	ldrb	r3, [r3, #1]
   14698:	adds	r3, r3, #0
   1469c:	movne	r3, #1
   146a0:	b	14254 <__assert_fail@plt+0x32fc>
   146a4:	mov	r3, #0
   146a8:	str	r3, [sp, #40]	; 0x28
   146ac:	ldr	r3, [sp, #176]	; 0xb0
   146b0:	cmp	r3, #2
   146b4:	bne	14344 <__assert_fail@plt+0x33ec>
   146b8:	ldr	r3, [sp, #44]	; 0x2c
   146bc:	cmp	r3, #0
   146c0:	bne	15000 <__assert_fail@plt+0x40a8>
   146c4:	mov	r6, r3
   146c8:	add	r7, r7, #1
   146cc:	mov	r3, fp
   146d0:	mov	r5, #92	; 0x5c
   146d4:	b	14114 <__assert_fail@plt+0x31bc>
   146d8:	ldr	r6, [sp, #48]	; 0x30
   146dc:	mov	r3, #0
   146e0:	str	r3, [sp, #40]	; 0x28
   146e4:	b	14268 <__assert_fail@plt+0x3310>
   146e8:	mov	r3, #0
   146ec:	str	r3, [sp, #40]	; 0x28
   146f0:	b	1425c <__assert_fail@plt+0x3304>
   146f4:	mov	r3, #0
   146f8:	str	r3, [sp, #40]	; 0x28
   146fc:	mov	r3, #118	; 0x76
   14700:	b	140bc <__assert_fail@plt+0x3164>
   14704:	ldr	r6, [sp, #48]	; 0x30
   14708:	mov	r3, #0
   1470c:	str	r3, [sp, #40]	; 0x28
   14710:	b	142a8 <__assert_fail@plt+0x3350>
   14714:	mov	r3, #0
   14718:	str	r3, [sp, #40]	; 0x28
   1471c:	mov	r3, #116	; 0x74
   14720:	b	140b0 <__assert_fail@plt+0x3158>
   14724:	ldr	r3, [sp, #176]	; 0xb0
   14728:	cmp	r3, #2
   1472c:	beq	14c3c <__assert_fail@plt+0x3ce4>
   14730:	cmp	r3, #5
   14734:	mov	r3, #0
   14738:	str	r3, [sp, #40]	; 0x28
   1473c:	beq	143a8 <__assert_fail@plt+0x3450>
   14740:	mov	r6, #0
   14744:	mov	r5, #63	; 0x3f
   14748:	b	14268 <__assert_fail@plt+0x3310>
   1474c:	ldr	r3, [sp, #176]	; 0xb0
   14750:	cmp	r3, #2
   14754:	beq	14bc4 <__assert_fail@plt+0x3c6c>
   14758:	mov	r3, #0
   1475c:	b	143ec <__assert_fail@plt+0x3494>
   14760:	mov	r3, #0
   14764:	str	r3, [sp, #40]	; 0x28
   14768:	mov	r3, #114	; 0x72
   1476c:	b	140b0 <__assert_fail@plt+0x3158>
   14770:	mov	r3, #0
   14774:	mov	r6, r3
   14778:	str	r3, [sp, #40]	; 0x28
   1477c:	b	142a8 <__assert_fail@plt+0x3350>
   14780:	mov	r3, #0
   14784:	str	r3, [sp, #40]	; 0x28
   14788:	mov	r3, #110	; 0x6e
   1478c:	b	140b0 <__assert_fail@plt+0x3158>
   14790:	mov	r3, #0
   14794:	str	r3, [sp, #40]	; 0x28
   14798:	mov	r3, #98	; 0x62
   1479c:	b	140bc <__assert_fail@plt+0x3164>
   147a0:	mov	r3, #0
   147a4:	str	r3, [sp, #40]	; 0x28
   147a8:	mov	r3, #97	; 0x61
   147ac:	b	140bc <__assert_fail@plt+0x3164>
   147b0:	ldr	r3, [sp, #60]	; 0x3c
   147b4:	cmp	r3, #0
   147b8:	bne	14ba8 <__assert_fail@plt+0x3c50>
   147bc:	ldr	r3, [sp, #92]	; 0x5c
   147c0:	cmp	r3, #0
   147c4:	addne	r7, r7, #1
   147c8:	bne	139c8 <__assert_fail@plt+0x2a70>
   147cc:	str	r3, [sp, #40]	; 0x28
   147d0:	b	140c8 <__assert_fail@plt+0x3170>
   147d4:	mov	r3, #0
   147d8:	str	r3, [sp, #40]	; 0x28
   147dc:	mov	r3, #102	; 0x66
   147e0:	b	140bc <__assert_fail@plt+0x3164>
   147e4:	mov	r3, #0
   147e8:	str	r3, [sp, #40]	; 0x28
   147ec:	ldr	r3, [sp, #76]	; 0x4c
   147f0:	cmp	r3, #1
   147f4:	bne	14c5c <__assert_fail@plt+0x3d04>
   147f8:	bl	10e50 <__ctype_b_loc@plt>
   147fc:	ldr	r2, [r0]
   14800:	sxth	r3, r5
   14804:	lsl	r3, r3, #1
   14808:	ldr	r1, [sp, #76]	; 0x4c
   1480c:	ldrh	r3, [r2, r3]
   14810:	mov	r0, r1
   14814:	and	r3, r3, #16384	; 0x4000
   14818:	cmp	r3, #0
   1481c:	ldr	r3, [sp, #60]	; 0x3c
   14820:	movne	r6, #1
   14824:	moveq	r6, #0
   14828:	movne	r2, #0
   1482c:	andeq	r2, r3, #1
   14830:	cmp	r2, #0
   14834:	beq	14268 <__assert_fail@plt+0x3310>
   14838:	ldr	r2, [sp, #60]	; 0x3c
   1483c:	mov	r6, #0
   14840:	add	r1, r0, r7
   14844:	mov	ip, #39	; 0x27
   14848:	str	r6, [sp, #100]	; 0x64
   1484c:	mov	r0, #0
   14850:	ldr	lr, [sp, #36]	; 0x24
   14854:	str	r8, [sp, #36]	; 0x24
   14858:	ldr	r6, [sp, #40]	; 0x28
   1485c:	ldr	r8, [sp, #44]	; 0x2c
   14860:	b	14910 <__assert_fail@plt+0x39b8>
   14864:	cmp	r8, #0
   14868:	bne	14e44 <__assert_fail@plt+0x3eec>
   1486c:	ldr	r0, [sp, #52]	; 0x34
   14870:	eor	r3, fp, #1
   14874:	ands	r3, r0, r3
   14878:	beq	148a8 <__assert_fail@plt+0x3950>
   1487c:	cmp	sl, r4
   14880:	add	r0, r4, #1
   14884:	strbhi	ip, [r9, r4]
   14888:	cmp	sl, r0
   1488c:	movhi	fp, #36	; 0x24
   14890:	strbhi	fp, [r9, r0]
   14894:	add	r0, r4, #2
   14898:	mov	fp, r3
   1489c:	cmp	sl, r0
   148a0:	add	r4, r4, #3
   148a4:	strbhi	ip, [r9, r0]
   148a8:	cmp	sl, r4
   148ac:	movhi	r3, #92	; 0x5c
   148b0:	strbhi	r3, [r9, r4]
   148b4:	add	r3, r4, #1
   148b8:	cmp	sl, r3
   148bc:	bls	148cc <__assert_fail@plt+0x3974>
   148c0:	lsr	r0, r5, #6
   148c4:	add	r0, r0, #48	; 0x30
   148c8:	strb	r0, [r9, r3]
   148cc:	add	r3, r4, #2
   148d0:	cmp	sl, r3
   148d4:	bls	148e4 <__assert_fail@plt+0x398c>
   148d8:	ubfx	r0, r5, #3, #3
   148dc:	add	r0, r0, #48	; 0x30
   148e0:	strb	r0, [r9, r3]
   148e4:	add	r7, r7, #1
   148e8:	and	r5, r5, #7
   148ec:	cmp	r1, r7
   148f0:	add	r5, r5, #48	; 0x30
   148f4:	add	r4, r4, #3
   148f8:	bls	14e58 <__assert_fail@plt+0x3f00>
   148fc:	mov	r0, r2
   14900:	cmp	sl, r4
   14904:	strbhi	r5, [r9, r4]
   14908:	add	r4, r4, #1
   1490c:	ldrb	r5, [lr, #1]!
   14910:	cmp	r2, #0
   14914:	bne	14864 <__assert_fail@plt+0x390c>
   14918:	eor	r3, r0, #1
   1491c:	cmp	r6, #0
   14920:	and	r3, r3, fp
   14924:	uxtb	r3, r3
   14928:	beq	1493c <__assert_fail@plt+0x39e4>
   1492c:	cmp	sl, r4
   14930:	movhi	r6, #92	; 0x5c
   14934:	strbhi	r6, [r9, r4]
   14938:	add	r4, r4, #1
   1493c:	add	r7, r7, #1
   14940:	cmp	r7, r1
   14944:	bcs	14e38 <__assert_fail@plt+0x3ee0>
   14948:	cmp	r3, #0
   1494c:	beq	14e7c <__assert_fail@plt+0x3f24>
   14950:	cmp	sl, r4
   14954:	add	r3, r4, #1
   14958:	mov	r6, #0
   1495c:	strbhi	ip, [r9, r4]
   14960:	cmp	sl, r3
   14964:	add	r4, r4, #2
   14968:	mov	fp, r6
   1496c:	strbhi	ip, [r9, r3]
   14970:	b	14900 <__assert_fail@plt+0x39a8>
   14974:	ldr	r3, [sp, #36]	; 0x24
   14978:	ldrb	r5, [r3]
   1497c:	cmp	r5, #126	; 0x7e
   14980:	ldrls	pc, [pc, r5, lsl #2]
   14984:	b	147e4 <__assert_fail@plt+0x388c>
   14988:	andeq	r4, r1, r8, lsr #23
   1498c:	andeq	r4, r1, r4, ror #15
   14990:	andeq	r4, r1, r4, ror #15
   14994:	andeq	r4, r1, r4, ror #15
   14998:	andeq	r4, r1, r4, ror #15
   1499c:	andeq	r4, r1, r4, ror #15
   149a0:	andeq	r4, r1, r4, ror #15
   149a4:	muleq	r1, ip, r0
   149a8:	muleq	r1, r4, r0
   149ac:	andeq	r4, r1, r4, lsl r7
   149b0:	muleq	r1, ip, fp
   149b4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149b8:	andeq	r3, r1, r0, asr #30
   149bc:	muleq	r1, r0, fp
   149c0:	andeq	r4, r1, r4, ror #15
   149c4:	andeq	r4, r1, r4, ror #15
   149c8:	andeq	r4, r1, r4, ror #15
   149cc:	andeq	r4, r1, r4, ror #15
   149d0:	andeq	r4, r1, r4, ror #15
   149d4:	andeq	r4, r1, r4, ror #15
   149d8:	andeq	r4, r1, r4, ror #15
   149dc:	andeq	r4, r1, r4, ror #15
   149e0:	andeq	r4, r1, r4, ror #15
   149e4:	andeq	r4, r1, r4, ror #15
   149e8:	andeq	r4, r1, r4, ror #15
   149ec:	andeq	r4, r1, r4, ror #15
   149f0:	andeq	r4, r1, r4, ror #15
   149f4:	andeq	r4, r1, r4, ror #15
   149f8:	andeq	r4, r1, r4, ror #15
   149fc:	andeq	r4, r1, r4, ror #15
   14a00:	andeq	r4, r1, r4, ror #15
   14a04:	andeq	r4, r1, r4, ror #15
   14a08:	andeq	r4, r1, r4, lsl #14
   14a0c:	andeq	r4, r1, r4, lsl #23
   14a10:	andeq	r4, r1, r4, lsl #23
   14a14:	andeq	r4, r1, r8, ror #13
   14a18:	andeq	r4, r1, r4, lsl #23
   14a1c:	ldrdeq	r4, [r1], -r8
   14a20:	andeq	r4, r1, r4, lsl #23
   14a24:	andeq	r4, r1, ip, asr #14
   14a28:	andeq	r4, r1, r4, lsl #23
   14a2c:	andeq	r4, r1, r4, lsl #23
   14a30:	andeq	r4, r1, r4, lsl #23
   14a34:	ldrdeq	r4, [r1], -r8
   14a38:	ldrdeq	r4, [r1], -r8
   14a3c:	ldrdeq	r4, [r1], -r8
   14a40:	ldrdeq	r4, [r1], -r8
   14a44:	ldrdeq	r4, [r1], -r8
   14a48:	ldrdeq	r4, [r1], -r8
   14a4c:	ldrdeq	r4, [r1], -r8
   14a50:	ldrdeq	r4, [r1], -r8
   14a54:	ldrdeq	r4, [r1], -r8
   14a58:	ldrdeq	r4, [r1], -r8
   14a5c:	ldrdeq	r4, [r1], -r8
   14a60:	ldrdeq	r4, [r1], -r8
   14a64:	ldrdeq	r4, [r1], -r8
   14a68:	ldrdeq	r4, [r1], -r8
   14a6c:	ldrdeq	r4, [r1], -r8
   14a70:	ldrdeq	r4, [r1], -r8
   14a74:	andeq	r4, r1, r4, lsl #23
   14a78:	andeq	r4, r1, r4, lsl #23
   14a7c:	andeq	r4, r1, r4, lsl #23
   14a80:	andeq	r4, r1, r4, lsl #23
   14a84:	andeq	r4, r1, r4, lsr #14
   14a88:	andeq	r4, r1, r4, ror #15
   14a8c:	ldrdeq	r4, [r1], -r8
   14a90:	ldrdeq	r4, [r1], -r8
   14a94:	ldrdeq	r4, [r1], -r8
   14a98:	ldrdeq	r4, [r1], -r8
   14a9c:	ldrdeq	r4, [r1], -r8
   14aa0:	ldrdeq	r4, [r1], -r8
   14aa4:	ldrdeq	r4, [r1], -r8
   14aa8:	ldrdeq	r4, [r1], -r8
   14aac:	ldrdeq	r4, [r1], -r8
   14ab0:	ldrdeq	r4, [r1], -r8
   14ab4:	ldrdeq	r4, [r1], -r8
   14ab8:	ldrdeq	r4, [r1], -r8
   14abc:	ldrdeq	r4, [r1], -r8
   14ac0:	ldrdeq	r4, [r1], -r8
   14ac4:	ldrdeq	r4, [r1], -r8
   14ac8:	ldrdeq	r4, [r1], -r8
   14acc:	ldrdeq	r4, [r1], -r8
   14ad0:	ldrdeq	r4, [r1], -r8
   14ad4:	ldrdeq	r4, [r1], -r8
   14ad8:	ldrdeq	r4, [r1], -r8
   14adc:	ldrdeq	r4, [r1], -r8
   14ae0:	ldrdeq	r4, [r1], -r8
   14ae4:	ldrdeq	r4, [r1], -r8
   14ae8:	ldrdeq	r4, [r1], -r8
   14aec:	ldrdeq	r4, [r1], -r8
   14af0:	ldrdeq	r4, [r1], -r8
   14af4:	andeq	r4, r1, r4, lsl #23
   14af8:	andeq	r4, r1, r4, lsr #13
   14afc:	ldrdeq	r4, [r1], -r8
   14b00:	andeq	r4, r1, r4, lsl #23
   14b04:	ldrdeq	r4, [r1], -r8
   14b08:	andeq	r4, r1, r4, lsl #23
   14b0c:	ldrdeq	r4, [r1], -r8
   14b10:	ldrdeq	r4, [r1], -r8
   14b14:	ldrdeq	r4, [r1], -r8
   14b18:	ldrdeq	r4, [r1], -r8
   14b1c:	ldrdeq	r4, [r1], -r8
   14b20:	ldrdeq	r4, [r1], -r8
   14b24:	ldrdeq	r4, [r1], -r8
   14b28:	ldrdeq	r4, [r1], -r8
   14b2c:	ldrdeq	r4, [r1], -r8
   14b30:	ldrdeq	r4, [r1], -r8
   14b34:	ldrdeq	r4, [r1], -r8
   14b38:	ldrdeq	r4, [r1], -r8
   14b3c:	ldrdeq	r4, [r1], -r8
   14b40:	ldrdeq	r4, [r1], -r8
   14b44:	ldrdeq	r4, [r1], -r8
   14b48:	ldrdeq	r4, [r1], -r8
   14b4c:	ldrdeq	r4, [r1], -r8
   14b50:	ldrdeq	r4, [r1], -r8
   14b54:	ldrdeq	r4, [r1], -r8
   14b58:	ldrdeq	r4, [r1], -r8
   14b5c:	ldrdeq	r4, [r1], -r8
   14b60:	ldrdeq	r4, [r1], -r8
   14b64:	ldrdeq	r4, [r1], -r8
   14b68:	ldrdeq	r4, [r1], -r8
   14b6c:	ldrdeq	r4, [r1], -r8
   14b70:	ldrdeq	r4, [r1], -r8
   14b74:	andeq	r4, r1, r0, lsl #13
   14b78:	andeq	r4, r1, r4, lsl #23
   14b7c:	andeq	r4, r1, r0, lsl #13
   14b80:	andeq	r4, r1, r8, ror #13
   14b84:	mov	r3, #0
   14b88:	str	r3, [sp, #40]	; 0x28
   14b8c:	b	14264 <__assert_fail@plt+0x330c>
   14b90:	mov	r3, #0
   14b94:	str	r3, [sp, #40]	; 0x28
   14b98:	b	141fc <__assert_fail@plt+0x32a4>
   14b9c:	mov	r3, #0
   14ba0:	str	r3, [sp, #40]	; 0x28
   14ba4:	b	14230 <__assert_fail@plt+0x32d8>
   14ba8:	ldr	r3, [sp, #44]	; 0x2c
   14bac:	cmp	r3, #0
   14bb0:	beq	14148 <__assert_fail@plt+0x31f0>
   14bb4:	ldr	r3, [sp, #52]	; 0x34
   14bb8:	mov	fp, r9
   14bbc:	str	r3, [sp, #60]	; 0x3c
   14bc0:	b	142c0 <__assert_fail@plt+0x3368>
   14bc4:	ldr	r3, [sp, #44]	; 0x2c
   14bc8:	cmp	r3, #0
   14bcc:	bne	15000 <__assert_fail@plt+0x40a8>
   14bd0:	str	r3, [sp, #40]	; 0x28
   14bd4:	cmp	sl, #0
   14bd8:	ldr	r3, [sp, #84]	; 0x54
   14bdc:	clz	r3, r3
   14be0:	lsr	r3, r3, #5
   14be4:	moveq	r3, #0
   14be8:	cmp	r3, #0
   14bec:	strne	sl, [sp, #84]	; 0x54
   14bf0:	movne	sl, #0
   14bf4:	bne	14c24 <__assert_fail@plt+0x3ccc>
   14bf8:	cmp	sl, r4
   14bfc:	movhi	r3, #39	; 0x27
   14c00:	strbhi	r3, [r9, r4]
   14c04:	add	r3, r4, #1
   14c08:	cmp	sl, r3
   14c0c:	movhi	r2, #92	; 0x5c
   14c10:	strbhi	r2, [r9, r3]
   14c14:	add	r3, r4, #2
   14c18:	cmp	sl, r3
   14c1c:	movhi	r2, #39	; 0x27
   14c20:	strbhi	r2, [r9, r3]
   14c24:	mov	r3, #0
   14c28:	add	r4, r4, #3
   14c2c:	str	r6, [sp, #80]	; 0x50
   14c30:	mov	fp, r3
   14c34:	mov	r5, #39	; 0x27
   14c38:	b	14104 <__assert_fail@plt+0x31ac>
   14c3c:	ldr	r3, [sp, #44]	; 0x2c
   14c40:	cmp	r3, #0
   14c44:	bne	15000 <__assert_fail@plt+0x40a8>
   14c48:	mov	r6, #0
   14c4c:	mov	r5, #63	; 0x3f
   14c50:	str	r3, [sp, #40]	; 0x28
   14c54:	mov	r3, fp
   14c58:	b	14104 <__assert_fail@plt+0x31ac>
   14c5c:	mov	r2, #0
   14c60:	mov	r3, #0
   14c64:	cmn	r8, #1
   14c68:	strd	r2, [sp, #128]	; 0x80
   14c6c:	bne	14c7c <__assert_fail@plt+0x3d24>
   14c70:	ldr	r0, [sp, #28]
   14c74:	bl	10e68 <strlen@plt>
   14c78:	mov	r8, r0
   14c7c:	str	r9, [sp, #100]	; 0x64
   14c80:	mov	r3, #0
   14c84:	strd	sl, [sp, #104]	; 0x68
   14c88:	ldr	sl, [sp, #28]
   14c8c:	str	r5, [sp, #112]	; 0x70
   14c90:	mov	r5, r3
   14c94:	ldr	r9, [sp, #68]	; 0x44
   14c98:	str	r4, [sp, #116]	; 0x74
   14c9c:	add	r4, r7, r5
   14ca0:	add	r3, sp, #128	; 0x80
   14ca4:	add	fp, sl, r4
   14ca8:	sub	r2, r8, r4
   14cac:	mov	r1, fp
   14cb0:	add	r0, sp, #124	; 0x7c
   14cb4:	bl	192d8 <__assert_fail@plt+0x8380>
   14cb8:	subs	r1, r0, #0
   14cbc:	beq	14cfc <__assert_fail@plt+0x3da4>
   14cc0:	cmn	r1, #1
   14cc4:	beq	15054 <__assert_fail@plt+0x40fc>
   14cc8:	cmn	r1, #2
   14ccc:	beq	15074 <__assert_fail@plt+0x411c>
   14cd0:	cmp	r9, #0
   14cd4:	bne	14d2c <__assert_fail@plt+0x3dd4>
   14cd8:	ldr	r0, [sp, #124]	; 0x7c
   14cdc:	add	r5, r5, r1
   14ce0:	bl	10da8 <iswprint@plt>
   14ce4:	cmp	r0, #0
   14ce8:	add	r0, sp, #128	; 0x80
   14cec:	moveq	r6, #0
   14cf0:	bl	10d48 <mbsinit@plt>
   14cf4:	cmp	r0, #0
   14cf8:	beq	14c9c <__assert_fail@plt+0x3d44>
   14cfc:	ldr	r3, [sp, #60]	; 0x3c
   14d00:	add	r9, sp, #100	; 0x64
   14d04:	mov	r0, r5
   14d08:	ldm	r9, {r9, sl, fp}
   14d0c:	eor	r2, r6, #1
   14d10:	ldr	r5, [sp, #112]	; 0x70
   14d14:	and	r2, r2, r3
   14d18:	uxtb	r2, r2
   14d1c:	ldr	r4, [sp, #116]	; 0x74
   14d20:	cmp	r0, #1
   14d24:	bhi	14840 <__assert_fail@plt+0x38e8>
   14d28:	b	14830 <__assert_fail@plt+0x38d8>
   14d2c:	cmp	r1, #1
   14d30:	beq	14cd8 <__assert_fail@plt+0x3d80>
   14d34:	add	r2, r4, #1
   14d38:	add	r3, sl, r1
   14d3c:	add	r2, sl, r2
   14d40:	add	r4, r3, r4
   14d44:	ldrb	r3, [r2], #1
   14d48:	sub	r3, r3, #91	; 0x5b
   14d4c:	cmp	r3, #33	; 0x21
   14d50:	ldrls	pc, [pc, r3, lsl #2]
   14d54:	b	14de0 <__assert_fail@plt+0x3e88>
   14d58:	andeq	r4, r1, ip, ror #27
   14d5c:	andeq	r4, r1, ip, ror #27
   14d60:	andeq	r4, r1, r0, ror #27
   14d64:	andeq	r4, r1, ip, ror #27
   14d68:	andeq	r4, r1, r0, ror #27
   14d6c:	andeq	r4, r1, ip, ror #27
   14d70:	andeq	r4, r1, r0, ror #27
   14d74:	andeq	r4, r1, r0, ror #27
   14d78:	andeq	r4, r1, r0, ror #27
   14d7c:	andeq	r4, r1, r0, ror #27
   14d80:	andeq	r4, r1, r0, ror #27
   14d84:	andeq	r4, r1, r0, ror #27
   14d88:	andeq	r4, r1, r0, ror #27
   14d8c:	andeq	r4, r1, r0, ror #27
   14d90:	andeq	r4, r1, r0, ror #27
   14d94:	andeq	r4, r1, r0, ror #27
   14d98:	andeq	r4, r1, r0, ror #27
   14d9c:	andeq	r4, r1, r0, ror #27
   14da0:	andeq	r4, r1, r0, ror #27
   14da4:	andeq	r4, r1, r0, ror #27
   14da8:	andeq	r4, r1, r0, ror #27
   14dac:	andeq	r4, r1, r0, ror #27
   14db0:	andeq	r4, r1, r0, ror #27
   14db4:	andeq	r4, r1, r0, ror #27
   14db8:	andeq	r4, r1, r0, ror #27
   14dbc:	andeq	r4, r1, r0, ror #27
   14dc0:	andeq	r4, r1, r0, ror #27
   14dc4:	andeq	r4, r1, r0, ror #27
   14dc8:	andeq	r4, r1, r0, ror #27
   14dcc:	andeq	r4, r1, r0, ror #27
   14dd0:	andeq	r4, r1, r0, ror #27
   14dd4:	andeq	r4, r1, r0, ror #27
   14dd8:	andeq	r4, r1, r0, ror #27
   14ddc:	andeq	r4, r1, ip, ror #27
   14de0:	cmp	r4, r2
   14de4:	bne	14d44 <__assert_fail@plt+0x3dec>
   14de8:	b	14cd8 <__assert_fail@plt+0x3d80>
   14dec:	mov	r3, #2
   14df0:	ldr	fp, [sp, #100]	; 0x64
   14df4:	str	r3, [sp, #176]	; 0xb0
   14df8:	ldr	sl, [sp, #104]	; 0x68
   14dfc:	b	142c0 <__assert_fail@plt+0x3368>
   14e00:	ldr	r2, [sp, #52]	; 0x34
   14e04:	mov	fp, r9
   14e08:	ldr	r3, [sp, #60]	; 0x3c
   14e0c:	and	r3, r3, r2
   14e10:	str	r3, [sp, #60]	; 0x3c
   14e14:	b	142c0 <__assert_fail@plt+0x3368>
   14e18:	cmp	sl, r4
   14e1c:	movhi	r2, fp
   14e20:	bhi	14198 <__assert_fail@plt+0x3240>
   14e24:	mov	r2, r4
   14e28:	b	141a8 <__assert_fail@plt+0x3250>
   14e2c:	mov	r6, r3
   14e30:	mov	r5, #63	; 0x3f
   14e34:	b	14268 <__assert_fail@plt+0x3310>
   14e38:	ldr	r8, [sp, #36]	; 0x24
   14e3c:	ldr	r6, [sp, #100]	; 0x64
   14e40:	b	14114 <__assert_fail@plt+0x31bc>
   14e44:	mov	fp, r9
   14e48:	ldr	r8, [sp, #36]	; 0x24
   14e4c:	ldr	r3, [sp, #52]	; 0x34
   14e50:	str	r3, [sp, #60]	; 0x3c
   14e54:	b	142c0 <__assert_fail@plt+0x3368>
   14e58:	ldr	r8, [sp, #36]	; 0x24
   14e5c:	ldr	r6, [sp, #100]	; 0x64
   14e60:	b	13fac <__assert_fail@plt+0x3054>
   14e64:	mov	r3, #0
   14e68:	add	r4, r4, #4
   14e6c:	mov	fp, r2
   14e70:	mov	r6, r3
   14e74:	mov	r5, #48	; 0x30
   14e78:	b	14104 <__assert_fail@plt+0x31ac>
   14e7c:	mov	r6, r3
   14e80:	b	14900 <__assert_fail@plt+0x39a8>
   14e84:	mov	r3, #1
   14e88:	movw	r2, #41344	; 0xa180
   14e8c:	movt	r2, #1
   14e90:	mov	r4, r3
   14e94:	mov	r9, sl
   14e98:	str	r3, [sp, #32]
   14e9c:	str	sl, [sp, #44]	; 0x2c
   14ea0:	str	r3, [sp, #48]	; 0x30
   14ea4:	str	sl, [sp, #52]	; 0x34
   14ea8:	str	r3, [sp, #56]	; 0x38
   14eac:	str	r3, [sp, #60]	; 0x3c
   14eb0:	str	sl, [sp, #64]	; 0x40
   14eb4:	str	sl, [sp, #68]	; 0x44
   14eb8:	str	r2, [sp, #72]	; 0x48
   14ebc:	str	sl, [sp, #80]	; 0x50
   14ec0:	str	sl, [sp, #84]	; 0x54
   14ec4:	str	sl, [sp, #88]	; 0x58
   14ec8:	b	139b8 <__assert_fail@plt+0x2a60>
   14ecc:	mov	r3, #0
   14ed0:	mov	r5, #48	; 0x30
   14ed4:	mov	r6, r3
   14ed8:	b	14104 <__assert_fail@plt+0x31ac>
   14edc:	cmp	sl, r4
   14ee0:	mov	r5, #48	; 0x30
   14ee4:	movhi	r3, #48	; 0x30
   14ee8:	strbhi	r3, [r9, r4]
   14eec:	add	r3, r2, #2
   14ef0:	add	r4, r2, #3
   14ef4:	cmp	sl, r3
   14ef8:	movhi	r1, #48	; 0x30
   14efc:	strbhi	r1, [r9, r3]
   14f00:	mov	r3, #0
   14f04:	b	141e0 <__assert_fail@plt+0x3288>
   14f08:	ldr	r3, [sp, #48]	; 0x30
   14f0c:	str	r3, [sp, #40]	; 0x28
   14f10:	b	147ec <__assert_fail@plt+0x3894>
   14f14:	ldr	r2, [sp, #28]
   14f18:	ldrb	r2, [r2, r3]
   14f1c:	sub	r1, r2, #33	; 0x21
   14f20:	cmp	r1, #29
   14f24:	ldrls	pc, [pc, r1, lsl #2]
   14f28:	b	14264 <__assert_fail@plt+0x330c>
   14f2c:	andeq	r4, r1, r4, lsr #31
   14f30:	andeq	r4, r1, r4, ror #4
   14f34:	andeq	r4, r1, r4, ror #4
   14f38:	andeq	r4, r1, r4, ror #4
   14f3c:	andeq	r4, r1, r4, ror #4
   14f40:	andeq	r4, r1, r4, ror #4
   14f44:	andeq	r4, r1, r4, lsr #31
   14f48:	andeq	r4, r1, r4, lsr #31
   14f4c:	andeq	r4, r1, r4, lsr #31
   14f50:	andeq	r4, r1, r4, ror #4
   14f54:	andeq	r4, r1, r4, ror #4
   14f58:	andeq	r4, r1, r4, ror #4
   14f5c:	andeq	r4, r1, r4, lsr #31
   14f60:	andeq	r4, r1, r4, ror #4
   14f64:	andeq	r4, r1, r4, lsr #31
   14f68:	andeq	r4, r1, r4, ror #4
   14f6c:	andeq	r4, r1, r4, ror #4
   14f70:	andeq	r4, r1, r4, ror #4
   14f74:	andeq	r4, r1, r4, ror #4
   14f78:	andeq	r4, r1, r4, ror #4
   14f7c:	andeq	r4, r1, r4, ror #4
   14f80:	andeq	r4, r1, r4, ror #4
   14f84:	andeq	r4, r1, r4, ror #4
   14f88:	andeq	r4, r1, r4, ror #4
   14f8c:	andeq	r4, r1, r4, ror #4
   14f90:	andeq	r4, r1, r4, ror #4
   14f94:	andeq	r4, r1, r4, ror #4
   14f98:	andeq	r4, r1, r4, lsr #31
   14f9c:	andeq	r4, r1, r4, lsr #31
   14fa0:	andeq	r4, r1, r4, lsr #31
   14fa4:	ldr	r1, [sp, #44]	; 0x2c
   14fa8:	cmp	r1, #0
   14fac:	bne	1520c <__assert_fail@plt+0x42b4>
   14fb0:	cmp	sl, r4
   14fb4:	mov	r7, r3
   14fb8:	movhi	r1, #63	; 0x3f
   14fbc:	mov	r5, r2
   14fc0:	mov	r3, fp
   14fc4:	strbhi	r1, [r9, r4]
   14fc8:	add	r1, r4, #1
   14fcc:	cmp	sl, r1
   14fd0:	movhi	r0, #34	; 0x22
   14fd4:	strbhi	r0, [r9, r1]
   14fd8:	add	r1, r4, #2
   14fdc:	cmp	sl, r1
   14fe0:	movhi	r0, #34	; 0x22
   14fe4:	strbhi	r0, [r9, r1]
   14fe8:	add	r1, r4, #3
   14fec:	add	r4, r4, #4
   14ff0:	cmp	sl, r1
   14ff4:	movhi	r0, #63	; 0x3f
   14ff8:	strbhi	r0, [r9, r1]
   14ffc:	b	141e0 <__assert_fail@plt+0x3288>
   15000:	mov	fp, r9
   15004:	b	142c0 <__assert_fail@plt+0x3368>
   15008:	ldr	r3, [sp, #188]	; 0xbc
   1500c:	ldrb	r3, [r3]
   15010:	cmp	r3, #0
   15014:	beq	13950 <__assert_fail@plt+0x29f8>
   15018:	ldr	r2, [sp, #188]	; 0xbc
   1501c:	cmp	sl, r4
   15020:	bls	15040 <__assert_fail@plt+0x40e8>
   15024:	strb	r3, [fp, r4]
   15028:	add	r4, r4, #1
   1502c:	ldrb	r3, [r2, #1]!
   15030:	cmp	r3, #0
   15034:	beq	13950 <__assert_fail@plt+0x29f8>
   15038:	cmp	sl, r4
   1503c:	bhi	15024 <__assert_fail@plt+0x40cc>
   15040:	ldrb	r3, [r2, #1]!
   15044:	add	r4, r4, #1
   15048:	cmp	r3, #0
   1504c:	bne	1501c <__assert_fail@plt+0x40c4>
   15050:	b	13950 <__assert_fail@plt+0x29f8>
   15054:	add	r9, sp, #100	; 0x64
   15058:	mov	r0, r5
   1505c:	ldr	r2, [sp, #60]	; 0x3c
   15060:	mov	r6, #0
   15064:	ldm	r9, {r9, sl, fp}
   15068:	ldr	r5, [sp, #112]	; 0x70
   1506c:	ldr	r4, [sp, #116]	; 0x74
   15070:	b	14d20 <__assert_fail@plt+0x3dc8>
   15074:	cmp	r4, r8
   15078:	add	r9, sp, #100	; 0x64
   1507c:	mov	r1, r4
   15080:	mov	r2, fp
   15084:	ldm	r9, {r9, sl, fp}
   15088:	mov	r3, r5
   1508c:	mov	r0, r5
   15090:	ldr	r5, [sp, #112]	; 0x70
   15094:	ldr	r4, [sp, #116]	; 0x74
   15098:	bcs	150cc <__assert_fail@plt+0x4174>
   1509c:	ldrb	r6, [r2]
   150a0:	cmp	r6, #0
   150a4:	bne	150b8 <__assert_fail@plt+0x4160>
   150a8:	b	15204 <__assert_fail@plt+0x42ac>
   150ac:	ldrb	r6, [r2, #1]!
   150b0:	cmp	r6, #0
   150b4:	beq	1519c <__assert_fail@plt+0x4244>
   150b8:	add	r3, r3, #1
   150bc:	add	r1, r7, r3
   150c0:	cmp	r8, r1
   150c4:	bhi	150ac <__assert_fail@plt+0x4154>
   150c8:	mov	r0, r3
   150cc:	mov	r6, #0
   150d0:	ldr	r2, [sp, #60]	; 0x3c
   150d4:	b	14d20 <__assert_fail@plt+0x3dc8>
   150d8:	mov	r3, #1
   150dc:	mov	r4, #0
   150e0:	mov	r9, r4
   150e4:	str	r3, [sp, #32]
   150e8:	str	r3, [sp, #44]	; 0x2c
   150ec:	str	r3, [sp, #48]	; 0x30
   150f0:	str	r4, [sp, #52]	; 0x34
   150f4:	str	r3, [sp, #56]	; 0x38
   150f8:	str	r3, [sp, #60]	; 0x3c
   150fc:	str	r3, [sp, #88]	; 0x58
   15100:	movw	r3, #41344	; 0xa180
   15104:	movt	r3, #1
   15108:	str	r4, [sp, #64]	; 0x40
   1510c:	str	r4, [sp, #68]	; 0x44
   15110:	str	r3, [sp, #72]	; 0x48
   15114:	str	r4, [sp, #80]	; 0x50
   15118:	str	r4, [sp, #84]	; 0x54
   1511c:	b	139b8 <__assert_fail@plt+0x2a60>
   15120:	mov	fp, r9
   15124:	b	142d4 <__assert_fail@plt+0x337c>
   15128:	ldr	r3, [sp, #48]	; 0x30
   1512c:	b	14c48 <__assert_fail@plt+0x3cf0>
   15130:	mov	r2, r3
   15134:	ldr	r3, [sp, #72]	; 0x48
   15138:	cmp	r3, #0
   1513c:	moveq	r2, #0
   15140:	andne	r2, r2, #1
   15144:	cmp	r2, #0
   15148:	beq	15178 <__assert_fail@plt+0x4220>
   1514c:	mov	r2, r3
   15150:	ldrb	r3, [r3]
   15154:	cmp	r3, #0
   15158:	beq	15178 <__assert_fail@plt+0x4220>
   1515c:	cmp	sl, r4
   15160:	bls	15188 <__assert_fail@plt+0x4230>
   15164:	strb	r3, [fp, r4]
   15168:	add	r4, r4, #1
   1516c:	ldrb	r3, [r2, #1]!
   15170:	cmp	r3, #0
   15174:	bne	1515c <__assert_fail@plt+0x4204>
   15178:	cmp	sl, r4
   1517c:	movhi	r3, #0
   15180:	strbhi	r3, [fp, r4]
   15184:	b	14310 <__assert_fail@plt+0x33b8>
   15188:	ldrb	r3, [r2, #1]!
   1518c:	add	r4, r4, #1
   15190:	cmp	r3, #0
   15194:	bne	1515c <__assert_fail@plt+0x4204>
   15198:	b	15178 <__assert_fail@plt+0x4220>
   1519c:	mov	r0, r3
   151a0:	ldr	r2, [sp, #60]	; 0x3c
   151a4:	b	14d20 <__assert_fail@plt+0x3dc8>
   151a8:	mov	ip, #5
   151ac:	mov	r3, r8
   151b0:	ldr	r1, [sp, #84]	; 0x54
   151b4:	str	ip, [sp]
   151b8:	ldr	r2, [sp, #180]	; 0xb4
   151bc:	ldr	ip, [sp, #188]	; 0xbc
   151c0:	ldr	r0, [sp, #184]	; 0xb8
   151c4:	str	r2, [sp, #4]
   151c8:	ldr	r2, [sp, #28]
   151cc:	str	ip, [sp, #12]
   151d0:	ldr	ip, [sp, #192]	; 0xc0
   151d4:	str	r0, [sp, #8]
   151d8:	mov	r0, fp
   151dc:	str	ip, [sp, #16]
   151e0:	bl	13894 <__assert_fail@plt+0x293c>
   151e4:	mov	r4, r0
   151e8:	b	14310 <__assert_fail@plt+0x33b8>
   151ec:	mov	r6, r3
   151f0:	str	r3, [sp, #40]	; 0x28
   151f4:	b	14280 <__assert_fail@plt+0x3328>
   151f8:	mov	r3, #2
   151fc:	str	r3, [sp, #176]	; 0xb0
   15200:	b	142c0 <__assert_fail@plt+0x3368>
   15204:	ldr	r2, [sp, #60]	; 0x3c
   15208:	b	14d20 <__assert_fail@plt+0x3dc8>
   1520c:	mov	r3, #5
   15210:	mov	fp, r9
   15214:	str	r3, [sp, #176]	; 0xb0
   15218:	b	142d4 <__assert_fail@plt+0x337c>
   1521c:	mov	r1, #1
   15220:	mov	r9, #0
   15224:	mov	r3, r9
   15228:	mov	r2, r9
   1522c:	str	r1, [sp, #32]
   15230:	str	sl, [sp, #84]	; 0x54
   15234:	b	1405c <__assert_fail@plt+0x3104>
   15238:	mov	r3, #0
   1523c:	mov	r2, #1
   15240:	mov	r9, r3
   15244:	mov	r4, r3
   15248:	str	r2, [sp, #32]
   1524c:	strd	r2, [sp, #44]	; 0x2c
   15250:	strd	r2, [sp, #56]	; 0x38
   15254:	str	r3, [sp, #80]	; 0x50
   15258:	str	r3, [sp, #84]	; 0x54
   1525c:	str	r3, [sp, #88]	; 0x58
   15260:	movw	r3, #41364	; 0xa194
   15264:	movt	r3, #1
   15268:	str	r2, [sp, #52]	; 0x34
   1526c:	str	r2, [sp, #64]	; 0x40
   15270:	str	r2, [sp, #68]	; 0x44
   15274:	str	r3, [sp, #72]	; 0x48
   15278:	b	139b8 <__assert_fail@plt+0x2a60>
   1527c:	bl	10f40 <abort@plt>
   15280:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15284:	mov	r4, r0
   15288:	mov	r5, r3
   1528c:	strd	r6, [sp, #8]
   15290:	movw	r7, #45312	; 0xb100
   15294:	movt	r7, #2
   15298:	strd	r8, [sp, #16]
   1529c:	strd	sl, [sp, #24]
   152a0:	mov	sl, r1
   152a4:	mov	fp, r2
   152a8:	str	lr, [sp, #32]
   152ac:	sub	sp, sp, #60	; 0x3c
   152b0:	bl	10e8c <__errno_location@plt>
   152b4:	mov	r8, r0
   152b8:	cmn	r4, #-2147483647	; 0x80000001
   152bc:	ldr	r6, [r7]
   152c0:	movne	r0, #0
   152c4:	moveq	r0, #1
   152c8:	ldr	r3, [r8]
   152cc:	orrs	r0, r0, r4, lsr #31
   152d0:	str	r3, [sp, #28]
   152d4:	bne	15464 <__assert_fail@plt+0x450c>
   152d8:	ldr	r3, [r7, #4]
   152dc:	cmp	r3, r4
   152e0:	bgt	15340 <__assert_fail@plt+0x43e8>
   152e4:	add	r1, r7, #8
   152e8:	sub	r2, r4, r3
   152ec:	str	r3, [sp, #52]	; 0x34
   152f0:	cmp	r6, r1
   152f4:	add	r2, r2, #1
   152f8:	beq	1543c <__assert_fail@plt+0x44e4>
   152fc:	mov	r1, #8
   15300:	mov	r0, r6
   15304:	mvn	r3, #-2147483648	; 0x80000000
   15308:	str	r1, [sp]
   1530c:	add	r1, sp, #52	; 0x34
   15310:	bl	17c24 <__assert_fail@plt+0x6ccc>
   15314:	mov	r6, r0
   15318:	str	r0, [r7]
   1531c:	ldr	r0, [r7, #4]
   15320:	mov	r1, #0
   15324:	ldr	r2, [sp, #52]	; 0x34
   15328:	sub	r2, r2, r0
   1532c:	add	r0, r6, r0, lsl #3
   15330:	lsl	r2, r2, #3
   15334:	bl	10ea4 <memset@plt>
   15338:	ldr	r3, [sp, #52]	; 0x34
   1533c:	str	r3, [r7, #4]
   15340:	ldr	r1, [r5, #4]
   15344:	add	r0, r6, r4, lsl #3
   15348:	add	ip, r5, #8
   1534c:	mov	r3, fp
   15350:	mov	r2, sl
   15354:	ldr	r7, [r0, #4]
   15358:	str	r0, [sp, #36]	; 0x24
   1535c:	str	ip, [sp, #40]	; 0x28
   15360:	orr	r0, r1, #1
   15364:	ldr	r9, [r6, r4, lsl #3]
   15368:	str	ip, [sp, #8]
   1536c:	ldr	lr, [r5, #44]	; 0x2c
   15370:	str	r0, [sp, #4]
   15374:	ldr	ip, [r5]
   15378:	mov	r1, r9
   1537c:	str	ip, [sp, #32]
   15380:	ldr	ip, [r5, #40]	; 0x28
   15384:	str	ip, [sp, #12]
   15388:	ldr	ip, [sp, #32]
   1538c:	str	lr, [sp, #16]
   15390:	str	r0, [sp, #44]	; 0x2c
   15394:	mov	r0, r7
   15398:	str	ip, [sp]
   1539c:	bl	13894 <__assert_fail@plt+0x293c>
   153a0:	cmp	r9, r0
   153a4:	bhi	15414 <__assert_fail@plt+0x44bc>
   153a8:	add	r9, r0, #1
   153ac:	movw	r3, #45424	; 0xb170
   153b0:	movt	r3, #2
   153b4:	cmp	r7, r3
   153b8:	str	r9, [r6, r4, lsl #3]
   153bc:	beq	153c8 <__assert_fail@plt+0x4470>
   153c0:	mov	r0, r7
   153c4:	bl	13430 <__assert_fail@plt+0x24d8>
   153c8:	mov	r0, r9
   153cc:	bl	17980 <__assert_fail@plt+0x6a28>
   153d0:	ldr	ip, [r5]
   153d4:	mov	r3, fp
   153d8:	mov	r2, sl
   153dc:	mov	r1, r9
   153e0:	mov	r7, r0
   153e4:	ldr	lr, [sp, #36]	; 0x24
   153e8:	ldr	r4, [r5, #40]	; 0x28
   153ec:	str	r0, [lr, #4]
   153f0:	ldr	lr, [r5, #44]	; 0x2c
   153f4:	str	ip, [sp]
   153f8:	ldr	ip, [sp, #44]	; 0x2c
   153fc:	str	ip, [sp, #4]
   15400:	ldr	ip, [sp, #40]	; 0x28
   15404:	str	r4, [sp, #12]
   15408:	str	lr, [sp, #16]
   1540c:	str	ip, [sp, #8]
   15410:	bl	13894 <__assert_fail@plt+0x293c>
   15414:	ldr	r3, [sp, #28]
   15418:	mov	r0, r7
   1541c:	str	r3, [r8]
   15420:	add	sp, sp, #60	; 0x3c
   15424:	ldrd	r4, [sp]
   15428:	ldrd	r6, [sp, #8]
   1542c:	ldrd	r8, [sp, #16]
   15430:	ldrd	sl, [sp, #24]
   15434:	add	sp, sp, #32
   15438:	pop	{pc}		; (ldr pc, [sp], #4)
   1543c:	mov	r1, #8
   15440:	mvn	r3, #-2147483648	; 0x80000000
   15444:	str	r1, [sp]
   15448:	add	r1, sp, #52	; 0x34
   1544c:	bl	17c24 <__assert_fail@plt+0x6ccc>
   15450:	ldrd	r2, [r7, #8]
   15454:	mov	r6, r0
   15458:	str	r0, [r7]
   1545c:	strd	r2, [r0]
   15460:	b	1531c <__assert_fail@plt+0x43c4>
   15464:	bl	10f40 <abort@plt>
   15468:	strd	r4, [sp, #-16]!
   1546c:	mov	r5, r0
   15470:	str	r6, [sp, #8]
   15474:	str	lr, [sp, #12]
   15478:	bl	10e8c <__errno_location@plt>
   1547c:	mov	r4, r0
   15480:	cmp	r5, #0
   15484:	ldr	r0, [pc, #32]	; 154ac <__assert_fail@plt+0x4554>
   15488:	mov	r1, #48	; 0x30
   1548c:	movne	r0, r5
   15490:	ldr	r6, [r4]
   15494:	bl	17dc4 <__assert_fail@plt+0x6e6c>
   15498:	str	r6, [r4]
   1549c:	ldrd	r4, [sp]
   154a0:	ldr	r6, [sp, #8]
   154a4:	add	sp, sp, #12
   154a8:	pop	{pc}		; (ldr pc, [sp], #4)
   154ac:	andeq	fp, r2, r0, ror r2
   154b0:	ldr	r3, [pc, #12]	; 154c4 <__assert_fail@plt+0x456c>
   154b4:	cmp	r0, #0
   154b8:	moveq	r0, r3
   154bc:	ldr	r0, [r0]
   154c0:	bx	lr
   154c4:	andeq	fp, r2, r0, ror r2
   154c8:	ldr	r3, [pc, #12]	; 154dc <__assert_fail@plt+0x4584>
   154cc:	cmp	r0, #0
   154d0:	moveq	r0, r3
   154d4:	str	r1, [r0]
   154d8:	bx	lr
   154dc:	andeq	fp, r2, r0, ror r2
   154e0:	ldr	r3, [pc, #52]	; 1551c <__assert_fail@plt+0x45c4>
   154e4:	cmp	r0, #0
   154e8:	push	{lr}		; (str lr, [sp, #-4]!)
   154ec:	lsr	lr, r1, #5
   154f0:	and	r1, r1, #31
   154f4:	moveq	r0, r3
   154f8:	add	r3, r0, #8
   154fc:	ldr	ip, [r3, lr, lsl #2]
   15500:	lsr	r0, ip, r1
   15504:	eor	r2, r2, r0
   15508:	and	r0, r0, #1
   1550c:	and	r2, r2, #1
   15510:	eor	r1, ip, r2, lsl r1
   15514:	str	r1, [r3, lr, lsl #2]
   15518:	pop	{pc}		; (ldr pc, [sp], #4)
   1551c:	andeq	fp, r2, r0, ror r2
   15520:	ldr	r3, [pc, #16]	; 15538 <__assert_fail@plt+0x45e0>
   15524:	cmp	r0, #0
   15528:	movne	r3, r0
   1552c:	ldr	r0, [r3, #4]
   15530:	str	r1, [r3, #4]
   15534:	bx	lr
   15538:	andeq	fp, r2, r0, ror r2
   1553c:	ldr	r3, [pc, #48]	; 15574 <__assert_fail@plt+0x461c>
   15540:	cmp	r0, #0
   15544:	mov	ip, #10
   15548:	moveq	r0, r3
   1554c:	cmp	r2, #0
   15550:	cmpne	r1, #0
   15554:	str	ip, [r0]
   15558:	beq	15568 <__assert_fail@plt+0x4610>
   1555c:	str	r1, [r0, #40]	; 0x28
   15560:	str	r2, [r0, #44]	; 0x2c
   15564:	bx	lr
   15568:	str	r4, [sp, #-8]!
   1556c:	str	lr, [sp, #4]
   15570:	bl	10f40 <abort@plt>
   15574:	andeq	fp, r2, r0, ror r2
   15578:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1557c:	strd	r6, [sp, #8]
   15580:	mov	r7, r0
   15584:	mov	r6, r1
   15588:	strd	r8, [sp, #16]
   1558c:	mov	r8, r2
   15590:	mov	r9, r3
   15594:	str	lr, [sp, #24]
   15598:	sub	sp, sp, #28
   1559c:	ldr	r4, [sp, #56]	; 0x38
   155a0:	ldr	ip, [pc, #104]	; 15610 <__assert_fail@plt+0x46b8>
   155a4:	cmp	r4, #0
   155a8:	moveq	r4, ip
   155ac:	bl	10e8c <__errno_location@plt>
   155b0:	ldr	ip, [r4, #44]	; 0x2c
   155b4:	mov	r5, r0
   155b8:	mov	r1, r6
   155bc:	add	lr, r4, #8
   155c0:	mov	r3, r9
   155c4:	ldr	r6, [r5]
   155c8:	mov	r2, r8
   155cc:	mov	r0, r7
   155d0:	str	ip, [sp, #16]
   155d4:	ldr	ip, [r4, #40]	; 0x28
   155d8:	str	lr, [sp, #8]
   155dc:	str	ip, [sp, #12]
   155e0:	ldr	ip, [r4, #4]
   155e4:	str	ip, [sp, #4]
   155e8:	ldr	ip, [r4]
   155ec:	str	ip, [sp]
   155f0:	bl	13894 <__assert_fail@plt+0x293c>
   155f4:	str	r6, [r5]
   155f8:	add	sp, sp, #28
   155fc:	ldrd	r4, [sp]
   15600:	ldrd	r6, [sp, #8]
   15604:	ldrd	r8, [sp, #16]
   15608:	add	sp, sp, #24
   1560c:	pop	{pc}		; (ldr pc, [sp], #4)
   15610:	andeq	fp, r2, r0, ror r2
   15614:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15618:	cmp	r2, #0
   1561c:	ldr	r4, [pc, #192]	; 156e4 <__assert_fail@plt+0x478c>
   15620:	movne	r4, r2
   15624:	strd	r6, [sp, #8]
   15628:	strd	r8, [sp, #16]
   1562c:	mov	r9, r1
   15630:	mov	r8, r0
   15634:	strd	sl, [sp, #24]
   15638:	str	lr, [sp, #32]
   1563c:	sub	sp, sp, #36	; 0x24
   15640:	bl	10e8c <__errno_location@plt>
   15644:	ldr	r5, [r4, #4]
   15648:	mov	r6, r0
   1564c:	add	r7, r4, #8
   15650:	mov	r1, #0
   15654:	mov	r3, r9
   15658:	ldr	ip, [r4, #44]	; 0x2c
   1565c:	mov	r2, r8
   15660:	mov	r0, r1
   15664:	ldr	sl, [r6]
   15668:	orr	r5, r5, #1
   1566c:	str	ip, [sp, #16]
   15670:	ldr	ip, [r4, #40]	; 0x28
   15674:	stmib	sp, {r5, r7, ip}
   15678:	ldr	ip, [r4]
   1567c:	str	ip, [sp]
   15680:	bl	13894 <__assert_fail@plt+0x293c>
   15684:	add	r1, r0, #1
   15688:	mov	r0, r1
   1568c:	str	r1, [sp, #28]
   15690:	bl	17980 <__assert_fail@plt+0x6a28>
   15694:	ldr	ip, [r4, #44]	; 0x2c
   15698:	mov	fp, r0
   1569c:	mov	r3, r9
   156a0:	mov	r2, r8
   156a4:	ldr	r1, [sp, #28]
   156a8:	str	ip, [sp, #16]
   156ac:	ldr	ip, [r4, #40]	; 0x28
   156b0:	stmib	sp, {r5, r7, ip}
   156b4:	ldr	ip, [r4]
   156b8:	str	ip, [sp]
   156bc:	bl	13894 <__assert_fail@plt+0x293c>
   156c0:	mov	r0, fp
   156c4:	str	sl, [r6]
   156c8:	add	sp, sp, #36	; 0x24
   156cc:	ldrd	r4, [sp]
   156d0:	ldrd	r6, [sp, #8]
   156d4:	ldrd	r8, [sp, #16]
   156d8:	ldrd	sl, [sp, #24]
   156dc:	add	sp, sp, #32
   156e0:	pop	{pc}		; (ldr pc, [sp], #4)
   156e4:	andeq	fp, r2, r0, ror r2
   156e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   156ec:	cmp	r3, #0
   156f0:	ldr	r4, [pc, #220]	; 157d4 <__assert_fail@plt+0x487c>
   156f4:	movne	r4, r3
   156f8:	strd	r6, [sp, #8]
   156fc:	mov	r6, r2
   15700:	strd	r8, [sp, #16]
   15704:	mov	r9, r0
   15708:	strd	sl, [sp, #24]
   1570c:	mov	sl, r1
   15710:	str	lr, [sp, #32]
   15714:	sub	sp, sp, #44	; 0x2c
   15718:	bl	10e8c <__errno_location@plt>
   1571c:	ldr	r5, [r4, #4]
   15720:	mov	r7, r0
   15724:	mov	r1, #0
   15728:	add	r8, r4, #8
   1572c:	mov	r3, sl
   15730:	ldr	ip, [r4, #44]	; 0x2c
   15734:	mov	r2, r9
   15738:	mov	r0, r1
   1573c:	ldr	lr, [r7]
   15740:	cmp	r6, r1
   15744:	orreq	r5, r5, #1
   15748:	str	ip, [sp, #16]
   1574c:	ldr	ip, [r4, #40]	; 0x28
   15750:	stmib	sp, {r5, r8, ip}
   15754:	ldr	ip, [r4]
   15758:	str	lr, [sp, #28]
   1575c:	str	ip, [sp]
   15760:	bl	13894 <__assert_fail@plt+0x293c>
   15764:	add	r1, r0, #1
   15768:	mov	fp, r0
   1576c:	mov	r0, r1
   15770:	str	r1, [sp, #36]	; 0x24
   15774:	bl	17980 <__assert_fail@plt+0x6a28>
   15778:	ldr	ip, [r4, #44]	; 0x2c
   1577c:	mov	r3, sl
   15780:	mov	r2, r9
   15784:	ldr	r1, [sp, #36]	; 0x24
   15788:	str	ip, [sp, #16]
   1578c:	ldr	ip, [r4, #40]	; 0x28
   15790:	str	r0, [sp, #32]
   15794:	stmib	sp, {r5, r8, ip}
   15798:	ldr	ip, [r4]
   1579c:	str	ip, [sp]
   157a0:	bl	13894 <__assert_fail@plt+0x293c>
   157a4:	ldr	lr, [sp, #28]
   157a8:	cmp	r6, #0
   157ac:	ldr	r0, [sp, #32]
   157b0:	str	lr, [r7]
   157b4:	strne	fp, [r6]
   157b8:	add	sp, sp, #44	; 0x2c
   157bc:	ldrd	r4, [sp]
   157c0:	ldrd	r6, [sp, #8]
   157c4:	ldrd	r8, [sp, #16]
   157c8:	ldrd	sl, [sp, #24]
   157cc:	add	sp, sp, #32
   157d0:	pop	{pc}		; (ldr pc, [sp], #4)
   157d4:	andeq	fp, r2, r0, ror r2
   157d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   157dc:	movw	r5, #45312	; 0xb100
   157e0:	movt	r5, #2
   157e4:	ldr	r3, [r5, #4]
   157e8:	strd	r6, [sp, #8]
   157ec:	str	r8, [sp, #16]
   157f0:	str	lr, [sp, #20]
   157f4:	ldr	r7, [r5]
   157f8:	cmp	r3, #1
   157fc:	ble	15820 <__assert_fail@plt+0x48c8>
   15800:	mov	r4, #1
   15804:	add	r6, r7, #4
   15808:	ldr	r0, [r6, r4, lsl #3]
   1580c:	add	r4, r4, #1
   15810:	bl	13430 <__assert_fail@plt+0x24d8>
   15814:	ldr	r3, [r5, #4]
   15818:	cmp	r3, r4
   1581c:	bgt	15808 <__assert_fail@plt+0x48b0>
   15820:	ldr	r0, [r7, #4]
   15824:	movw	r4, #45424	; 0xb170
   15828:	movt	r4, #2
   1582c:	cmp	r0, r4
   15830:	beq	15844 <__assert_fail@plt+0x48ec>
   15834:	bl	13430 <__assert_fail@plt+0x24d8>
   15838:	mov	r3, #256	; 0x100
   1583c:	str	r3, [r5, #8]
   15840:	str	r4, [r5, #12]
   15844:	ldr	r4, [pc, #44]	; 15878 <__assert_fail@plt+0x4920>
   15848:	cmp	r7, r4
   1584c:	beq	1585c <__assert_fail@plt+0x4904>
   15850:	mov	r0, r7
   15854:	bl	13430 <__assert_fail@plt+0x24d8>
   15858:	str	r4, [r5]
   1585c:	mov	r3, #1
   15860:	ldrd	r6, [sp, #8]
   15864:	str	r3, [r5, #4]
   15868:	ldrd	r4, [sp]
   1586c:	ldr	r8, [sp, #16]
   15870:	add	sp, sp, #20
   15874:	pop	{pc}		; (ldr pc, [sp], #4)
   15878:	andeq	fp, r2, r8, lsl #2
   1587c:	ldr	r3, [pc, #4]	; 15888 <__assert_fail@plt+0x4930>
   15880:	mvn	r2, #0
   15884:	b	15280 <__assert_fail@plt+0x4328>
   15888:	andeq	fp, r2, r0, ror r2
   1588c:	ldr	r3, [pc]	; 15894 <__assert_fail@plt+0x493c>
   15890:	b	15280 <__assert_fail@plt+0x4328>
   15894:	andeq	fp, r2, r0, ror r2
   15898:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1589c:	movw	r4, #45312	; 0xb100
   158a0:	movt	r4, #2
   158a4:	strd	r6, [sp, #8]
   158a8:	strd	r8, [sp, #16]
   158ac:	strd	sl, [sp, #24]
   158b0:	mov	sl, r0
   158b4:	str	lr, [sp, #32]
   158b8:	sub	sp, sp, #44	; 0x2c
   158bc:	bl	10e8c <__errno_location@plt>
   158c0:	ldr	r3, [r0]
   158c4:	mov	r8, r0
   158c8:	ldr	r2, [r4, #4]
   158cc:	ldr	r5, [r4]
   158d0:	str	r3, [sp, #28]
   158d4:	cmp	r2, #0
   158d8:	bgt	15934 <__assert_fail@plt+0x49dc>
   158dc:	add	r3, r4, #8
   158e0:	str	r2, [sp, #36]	; 0x24
   158e4:	rsb	r2, r2, #1
   158e8:	cmp	r5, r3
   158ec:	beq	15a00 <__assert_fail@plt+0x4aa8>
   158f0:	mov	r1, #8
   158f4:	mov	r0, r5
   158f8:	mvn	r3, #-2147483648	; 0x80000000
   158fc:	str	r1, [sp]
   15900:	add	r1, sp, #36	; 0x24
   15904:	bl	17c24 <__assert_fail@plt+0x6ccc>
   15908:	mov	r5, r0
   1590c:	str	r0, [r4]
   15910:	ldr	r0, [r4, #4]
   15914:	mov	r1, #0
   15918:	ldr	r2, [sp, #36]	; 0x24
   1591c:	sub	r2, r2, r0
   15920:	add	r0, r5, r0, lsl #3
   15924:	lsl	r2, r2, #3
   15928:	bl	10ea4 <memset@plt>
   1592c:	ldr	r3, [sp, #36]	; 0x24
   15930:	str	r3, [r4, #4]
   15934:	movw	r4, #45424	; 0xb170
   15938:	movt	r4, #2
   1593c:	ldr	r9, [r5]
   15940:	add	fp, r4, #264	; 0x108
   15944:	mvn	r3, #0
   15948:	ldr	r7, [r4, #260]	; 0x104
   1594c:	mov	r2, sl
   15950:	ldr	r6, [r5, #4]
   15954:	str	fp, [sp, #8]
   15958:	mov	r1, r9
   1595c:	ldr	ip, [r4, #256]	; 0x100
   15960:	orr	r7, r7, #1
   15964:	ldr	lr, [r4, #300]	; 0x12c
   15968:	mov	r0, r6
   1596c:	str	ip, [sp]
   15970:	str	r7, [sp, #4]
   15974:	str	lr, [sp, #16]
   15978:	ldr	ip, [r4, #296]	; 0x128
   1597c:	str	ip, [sp, #12]
   15980:	bl	13894 <__assert_fail@plt+0x293c>
   15984:	cmp	r9, r0
   15988:	bhi	159d8 <__assert_fail@plt+0x4a80>
   1598c:	add	r9, r0, #1
   15990:	cmp	r6, r4
   15994:	str	r9, [r5]
   15998:	beq	159a4 <__assert_fail@plt+0x4a4c>
   1599c:	mov	r0, r6
   159a0:	bl	13430 <__assert_fail@plt+0x24d8>
   159a4:	mov	r0, r9
   159a8:	bl	17980 <__assert_fail@plt+0x6a28>
   159ac:	ldr	r3, [r4, #256]	; 0x100
   159b0:	mov	r2, sl
   159b4:	mov	r1, r9
   159b8:	mov	r6, r0
   159bc:	ldr	lr, [r4, #296]	; 0x128
   159c0:	ldr	ip, [r4, #300]	; 0x12c
   159c4:	str	r0, [r5, #4]
   159c8:	stm	sp, {r3, r7, fp, lr}
   159cc:	mvn	r3, #0
   159d0:	str	ip, [sp, #16]
   159d4:	bl	13894 <__assert_fail@plt+0x293c>
   159d8:	ldr	r3, [sp, #28]
   159dc:	mov	r0, r6
   159e0:	str	r3, [r8]
   159e4:	add	sp, sp, #44	; 0x2c
   159e8:	ldrd	r4, [sp]
   159ec:	ldrd	r6, [sp, #8]
   159f0:	ldrd	r8, [sp, #16]
   159f4:	ldrd	sl, [sp, #24]
   159f8:	add	sp, sp, #32
   159fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15a00:	mov	r0, #8
   15a04:	mvn	r3, #-2147483648	; 0x80000000
   15a08:	add	r1, sp, #36	; 0x24
   15a0c:	str	r0, [sp]
   15a10:	mov	r0, #0
   15a14:	bl	17c24 <__assert_fail@plt+0x6ccc>
   15a18:	ldrd	r2, [r4, #8]
   15a1c:	mov	r5, r0
   15a20:	str	r0, [r4]
   15a24:	strd	r2, [r0]
   15a28:	b	15910 <__assert_fail@plt+0x49b8>
   15a2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a30:	movw	r4, #45312	; 0xb100
   15a34:	movt	r4, #2
   15a38:	strd	r6, [sp, #8]
   15a3c:	strd	r8, [sp, #16]
   15a40:	strd	sl, [sp, #24]
   15a44:	mov	sl, r0
   15a48:	mov	fp, r1
   15a4c:	str	lr, [sp, #32]
   15a50:	sub	sp, sp, #44	; 0x2c
   15a54:	bl	10e8c <__errno_location@plt>
   15a58:	ldr	r3, [r0]
   15a5c:	mov	r8, r0
   15a60:	ldr	r2, [r4, #4]
   15a64:	ldr	r5, [r4]
   15a68:	str	r3, [sp, #28]
   15a6c:	cmp	r2, #0
   15a70:	bgt	15acc <__assert_fail@plt+0x4b74>
   15a74:	add	r3, r4, #8
   15a78:	str	r2, [sp, #36]	; 0x24
   15a7c:	rsb	r2, r2, #1
   15a80:	cmp	r5, r3
   15a84:	beq	15ba8 <__assert_fail@plt+0x4c50>
   15a88:	mov	r1, #8
   15a8c:	mov	r0, r5
   15a90:	mvn	r3, #-2147483648	; 0x80000000
   15a94:	str	r1, [sp]
   15a98:	add	r1, sp, #36	; 0x24
   15a9c:	bl	17c24 <__assert_fail@plt+0x6ccc>
   15aa0:	mov	r5, r0
   15aa4:	str	r0, [r4]
   15aa8:	ldr	r0, [r4, #4]
   15aac:	mov	r1, #0
   15ab0:	ldr	r2, [sp, #36]	; 0x24
   15ab4:	sub	r2, r2, r0
   15ab8:	add	r0, r5, r0, lsl #3
   15abc:	lsl	r2, r2, #3
   15ac0:	bl	10ea4 <memset@plt>
   15ac4:	ldr	r3, [sp, #36]	; 0x24
   15ac8:	str	r3, [r4, #4]
   15acc:	movw	r4, #45424	; 0xb170
   15ad0:	movt	r4, #2
   15ad4:	ldr	r9, [r5]
   15ad8:	add	r0, r4, #264	; 0x108
   15adc:	mov	r3, fp
   15ae0:	ldr	r7, [r4, #260]	; 0x104
   15ae4:	mov	r2, sl
   15ae8:	ldr	r6, [r5, #4]
   15aec:	str	r0, [sp, #8]
   15af0:	mov	r1, r9
   15af4:	ldr	ip, [r4, #256]	; 0x100
   15af8:	orr	r7, r7, #1
   15afc:	ldr	lr, [r4, #300]	; 0x12c
   15b00:	mov	r0, r6
   15b04:	str	ip, [sp]
   15b08:	str	r7, [sp, #4]
   15b0c:	str	lr, [sp, #16]
   15b10:	ldr	ip, [r4, #296]	; 0x128
   15b14:	str	ip, [sp, #12]
   15b18:	bl	13894 <__assert_fail@plt+0x293c>
   15b1c:	cmp	r9, r0
   15b20:	bhi	15b80 <__assert_fail@plt+0x4c28>
   15b24:	add	r9, r0, #1
   15b28:	cmp	r6, r4
   15b2c:	str	r9, [r5]
   15b30:	beq	15b3c <__assert_fail@plt+0x4be4>
   15b34:	mov	r0, r6
   15b38:	bl	13430 <__assert_fail@plt+0x24d8>
   15b3c:	mov	r0, r9
   15b40:	bl	17980 <__assert_fail@plt+0x6a28>
   15b44:	ldr	ip, [r4, #256]	; 0x100
   15b48:	mov	r1, r9
   15b4c:	mov	r3, fp
   15b50:	mov	r2, sl
   15b54:	mov	r6, r0
   15b58:	ldr	r9, [r4, #296]	; 0x128
   15b5c:	ldr	lr, [r4, #300]	; 0x12c
   15b60:	str	r0, [r5, #4]
   15b64:	str	ip, [sp]
   15b68:	ldr	ip, [pc, #100]	; 15bd4 <__assert_fail@plt+0x4c7c>
   15b6c:	str	r7, [sp, #4]
   15b70:	str	ip, [sp, #8]
   15b74:	str	r9, [sp, #12]
   15b78:	str	lr, [sp, #16]
   15b7c:	bl	13894 <__assert_fail@plt+0x293c>
   15b80:	ldr	r3, [sp, #28]
   15b84:	mov	r0, r6
   15b88:	str	r3, [r8]
   15b8c:	add	sp, sp, #44	; 0x2c
   15b90:	ldrd	r4, [sp]
   15b94:	ldrd	r6, [sp, #8]
   15b98:	ldrd	r8, [sp, #16]
   15b9c:	ldrd	sl, [sp, #24]
   15ba0:	add	sp, sp, #32
   15ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ba8:	mov	r0, #8
   15bac:	mvn	r3, #-2147483648	; 0x80000000
   15bb0:	add	r1, sp, #36	; 0x24
   15bb4:	str	r0, [sp]
   15bb8:	mov	r0, #0
   15bbc:	bl	17c24 <__assert_fail@plt+0x6ccc>
   15bc0:	ldrd	r2, [r4, #8]
   15bc4:	mov	r5, r0
   15bc8:	str	r0, [r4]
   15bcc:	strd	r2, [r0]
   15bd0:	b	15aa8 <__assert_fail@plt+0x4b50>
   15bd4:	andeq	fp, r2, r8, ror r2
   15bd8:	strd	r4, [sp, #-20]!	; 0xffffffec
   15bdc:	mov	r4, #0
   15be0:	mov	r5, #0
   15be4:	strd	r6, [sp, #8]
   15be8:	cmp	r1, #10
   15bec:	str	lr, [sp, #16]
   15bf0:	sub	sp, sp, #100	; 0x64
   15bf4:	strd	r4, [sp, #48]	; 0x30
   15bf8:	beq	15c40 <__assert_fail@plt+0x4ce8>
   15bfc:	mov	r3, sp
   15c00:	strd	r4, [sp, #8]
   15c04:	str	r1, [sp, #48]	; 0x30
   15c08:	mov	r1, r2
   15c0c:	mvn	r2, #0
   15c10:	ldrd	r6, [sp, #48]	; 0x30
   15c14:	strd	r6, [sp]
   15c18:	strd	r4, [sp, #16]
   15c1c:	strd	r4, [sp, #24]
   15c20:	strd	r4, [sp, #32]
   15c24:	strd	r4, [sp, #40]	; 0x28
   15c28:	bl	15280 <__assert_fail@plt+0x4328>
   15c2c:	add	sp, sp, #100	; 0x64
   15c30:	ldrd	r4, [sp]
   15c34:	ldrd	r6, [sp, #8]
   15c38:	add	sp, sp, #16
   15c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c40:	bl	10f40 <abort@plt>
   15c44:	strd	r4, [sp, #-20]!	; 0xffffffec
   15c48:	mov	r4, #0
   15c4c:	mov	r5, #0
   15c50:	strd	r6, [sp, #8]
   15c54:	cmp	r1, #10
   15c58:	str	lr, [sp, #16]
   15c5c:	sub	sp, sp, #100	; 0x64
   15c60:	strd	r4, [sp, #48]	; 0x30
   15c64:	beq	15cb0 <__assert_fail@plt+0x4d58>
   15c68:	mov	ip, r2
   15c6c:	mov	r2, r3
   15c70:	strd	r4, [sp, #8]
   15c74:	str	r1, [sp, #48]	; 0x30
   15c78:	mov	r3, sp
   15c7c:	mov	r1, ip
   15c80:	ldrd	r6, [sp, #48]	; 0x30
   15c84:	strd	r6, [sp]
   15c88:	strd	r4, [sp, #16]
   15c8c:	strd	r4, [sp, #24]
   15c90:	strd	r4, [sp, #32]
   15c94:	strd	r4, [sp, #40]	; 0x28
   15c98:	bl	15280 <__assert_fail@plt+0x4328>
   15c9c:	add	sp, sp, #100	; 0x64
   15ca0:	ldrd	r4, [sp]
   15ca4:	ldrd	r6, [sp, #8]
   15ca8:	add	sp, sp, #16
   15cac:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb0:	bl	10f40 <abort@plt>
   15cb4:	mov	r2, #0
   15cb8:	mov	r3, #0
   15cbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15cc0:	strd	r6, [sp, #8]
   15cc4:	cmp	r0, #10
   15cc8:	strd	r8, [sp, #16]
   15ccc:	strd	sl, [sp, #24]
   15cd0:	str	lr, [sp, #32]
   15cd4:	sub	sp, sp, #124	; 0x7c
   15cd8:	strd	r2, [sp, #72]	; 0x48
   15cdc:	strd	r2, [sp, #80]	; 0x50
   15ce0:	strd	r2, [sp, #88]	; 0x58
   15ce4:	strd	r2, [sp, #96]	; 0x60
   15ce8:	strd	r2, [sp, #104]	; 0x68
   15cec:	strd	r2, [sp, #112]	; 0x70
   15cf0:	beq	15e94 <__assert_fail@plt+0x4f3c>
   15cf4:	mov	r6, r1
   15cf8:	movw	r4, #45312	; 0xb100
   15cfc:	movt	r4, #2
   15d00:	str	r0, [sp, #72]	; 0x48
   15d04:	ldrd	r0, [sp, #72]	; 0x48
   15d08:	strd	r0, [sp, #24]
   15d0c:	strd	r2, [sp, #32]
   15d10:	strd	r2, [sp, #40]	; 0x28
   15d14:	strd	r2, [sp, #48]	; 0x30
   15d18:	strd	r2, [sp, #56]	; 0x38
   15d1c:	strd	r2, [sp, #64]	; 0x40
   15d20:	bl	10e8c <__errno_location@plt>
   15d24:	mov	r8, r0
   15d28:	ldr	r5, [r4]
   15d2c:	ldr	r2, [r4, #4]
   15d30:	ldr	r9, [r0]
   15d34:	cmp	r2, #0
   15d38:	bgt	15d94 <__assert_fail@plt+0x4e3c>
   15d3c:	add	r3, r4, #8
   15d40:	str	r2, [sp, #72]	; 0x48
   15d44:	rsb	r2, r2, #1
   15d48:	cmp	r5, r3
   15d4c:	beq	15e68 <__assert_fail@plt+0x4f10>
   15d50:	mov	r3, #8
   15d54:	mov	r0, r5
   15d58:	add	r1, sp, #72	; 0x48
   15d5c:	str	r3, [sp]
   15d60:	mvn	r3, #-2147483648	; 0x80000000
   15d64:	bl	17c24 <__assert_fail@plt+0x6ccc>
   15d68:	mov	r5, r0
   15d6c:	str	r0, [r4]
   15d70:	ldr	r0, [r4, #4]
   15d74:	mov	r1, #0
   15d78:	ldr	r2, [sp, #72]	; 0x48
   15d7c:	sub	r2, r2, r0
   15d80:	add	r0, r5, r0, lsl #3
   15d84:	lsl	r2, r2, #3
   15d88:	bl	10ea4 <memset@plt>
   15d8c:	ldr	r3, [sp, #72]	; 0x48
   15d90:	str	r3, [r4, #4]
   15d94:	ldr	sl, [r5]
   15d98:	add	r0, sp, #32
   15d9c:	mvn	r3, #0
   15da0:	mov	r2, r6
   15da4:	ldr	r7, [sp, #28]
   15da8:	ldr	r4, [r5, #4]
   15dac:	mov	r1, sl
   15db0:	str	r0, [sp, #8]
   15db4:	ldr	lr, [sp, #24]
   15db8:	orr	r7, r7, #1
   15dbc:	ldr	ip, [sp, #64]	; 0x40
   15dc0:	mov	r0, r4
   15dc4:	ldr	fp, [sp, #68]	; 0x44
   15dc8:	str	lr, [sp]
   15dcc:	str	r7, [sp, #4]
   15dd0:	str	ip, [sp, #12]
   15dd4:	str	fp, [sp, #16]
   15dd8:	bl	13894 <__assert_fail@plt+0x293c>
   15ddc:	cmp	sl, r0
   15de0:	bhi	15e44 <__assert_fail@plt+0x4eec>
   15de4:	add	sl, r0, #1
   15de8:	movw	r3, #45424	; 0xb170
   15dec:	movt	r3, #2
   15df0:	cmp	r4, r3
   15df4:	str	sl, [r5]
   15df8:	beq	15e04 <__assert_fail@plt+0x4eac>
   15dfc:	mov	r0, r4
   15e00:	bl	13430 <__assert_fail@plt+0x24d8>
   15e04:	mov	r0, sl
   15e08:	bl	17980 <__assert_fail@plt+0x6a28>
   15e0c:	ldr	r3, [sp, #24]
   15e10:	mov	r2, r6
   15e14:	mov	r1, sl
   15e18:	mov	r4, r0
   15e1c:	ldr	lr, [sp, #64]	; 0x40
   15e20:	ldr	ip, [sp, #68]	; 0x44
   15e24:	str	r0, [r5, #4]
   15e28:	add	r5, sp, #32
   15e2c:	stm	sp, {r3, r7}
   15e30:	mvn	r3, #0
   15e34:	str	r5, [sp, #8]
   15e38:	str	lr, [sp, #12]
   15e3c:	str	ip, [sp, #16]
   15e40:	bl	13894 <__assert_fail@plt+0x293c>
   15e44:	mov	r0, r4
   15e48:	str	r9, [r8]
   15e4c:	add	sp, sp, #124	; 0x7c
   15e50:	ldrd	r4, [sp]
   15e54:	ldrd	r6, [sp, #8]
   15e58:	ldrd	r8, [sp, #16]
   15e5c:	ldrd	sl, [sp, #24]
   15e60:	add	sp, sp, #32
   15e64:	pop	{pc}		; (ldr pc, [sp], #4)
   15e68:	mov	r0, #8
   15e6c:	mvn	r3, #-2147483648	; 0x80000000
   15e70:	add	r1, sp, #72	; 0x48
   15e74:	str	r0, [sp]
   15e78:	mov	r0, #0
   15e7c:	bl	17c24 <__assert_fail@plt+0x6ccc>
   15e80:	ldrd	r2, [r4, #8]
   15e84:	mov	r5, r0
   15e88:	str	r0, [r4]
   15e8c:	strd	r2, [r0]
   15e90:	b	15d70 <__assert_fail@plt+0x4e18>
   15e94:	bl	10f40 <abort@plt>
   15e98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e9c:	cmp	r0, #10
   15ea0:	strd	r6, [sp, #8]
   15ea4:	mov	r6, #0
   15ea8:	mov	r7, #0
   15eac:	strd	r8, [sp, #16]
   15eb0:	strd	sl, [sp, #24]
   15eb4:	str	lr, [sp, #32]
   15eb8:	sub	sp, sp, #124	; 0x7c
   15ebc:	strd	r6, [sp, #72]	; 0x48
   15ec0:	strd	r6, [sp, #80]	; 0x50
   15ec4:	strd	r6, [sp, #88]	; 0x58
   15ec8:	strd	r6, [sp, #96]	; 0x60
   15ecc:	strd	r6, [sp, #104]	; 0x68
   15ed0:	strd	r6, [sp, #112]	; 0x70
   15ed4:	beq	16080 <__assert_fail@plt+0x5128>
   15ed8:	mov	sl, r2
   15edc:	movw	r5, #45312	; 0xb100
   15ee0:	movt	r5, #2
   15ee4:	str	r0, [sp, #72]	; 0x48
   15ee8:	mov	r9, r1
   15eec:	ldrd	r2, [sp, #72]	; 0x48
   15ef0:	strd	r2, [sp, #24]
   15ef4:	strd	r6, [sp, #32]
   15ef8:	strd	r6, [sp, #40]	; 0x28
   15efc:	strd	r6, [sp, #48]	; 0x30
   15f00:	strd	r6, [sp, #56]	; 0x38
   15f04:	strd	r6, [sp, #64]	; 0x40
   15f08:	bl	10e8c <__errno_location@plt>
   15f0c:	mov	r7, r0
   15f10:	ldr	r4, [r5]
   15f14:	ldr	r2, [r5, #4]
   15f18:	ldr	fp, [r0]
   15f1c:	cmp	r2, #0
   15f20:	bgt	15f7c <__assert_fail@plt+0x5024>
   15f24:	add	r3, r5, #8
   15f28:	str	r2, [sp, #72]	; 0x48
   15f2c:	rsb	r2, r2, #1
   15f30:	cmp	r4, r3
   15f34:	beq	16054 <__assert_fail@plt+0x50fc>
   15f38:	mov	r3, #8
   15f3c:	mov	r0, r4
   15f40:	add	r1, sp, #72	; 0x48
   15f44:	str	r3, [sp]
   15f48:	mvn	r3, #-2147483648	; 0x80000000
   15f4c:	bl	17c24 <__assert_fail@plt+0x6ccc>
   15f50:	mov	r4, r0
   15f54:	str	r0, [r5]
   15f58:	ldr	r0, [r5, #4]
   15f5c:	mov	r1, #0
   15f60:	ldr	r2, [sp, #72]	; 0x48
   15f64:	sub	r2, r2, r0
   15f68:	add	r0, r4, r0, lsl #3
   15f6c:	lsl	r2, r2, #3
   15f70:	bl	10ea4 <memset@plt>
   15f74:	ldr	r3, [sp, #72]	; 0x48
   15f78:	str	r3, [r5, #4]
   15f7c:	ldr	ip, [sp, #24]
   15f80:	add	r0, sp, #32
   15f84:	mov	r3, sl
   15f88:	mov	r2, r9
   15f8c:	ldr	r6, [sp, #28]
   15f90:	ldr	r8, [r4]
   15f94:	ldr	r5, [r4, #4]
   15f98:	str	ip, [sp]
   15f9c:	orr	r6, r6, #1
   15fa0:	ldr	ip, [sp, #64]	; 0x40
   15fa4:	mov	r1, r8
   15fa8:	str	r6, [sp, #4]
   15fac:	ldr	lr, [sp, #68]	; 0x44
   15fb0:	str	r0, [sp, #8]
   15fb4:	mov	r0, r5
   15fb8:	str	ip, [sp, #12]
   15fbc:	str	lr, [sp, #16]
   15fc0:	bl	13894 <__assert_fail@plt+0x293c>
   15fc4:	cmp	r8, r0
   15fc8:	bhi	16030 <__assert_fail@plt+0x50d8>
   15fcc:	add	r8, r0, #1
   15fd0:	movw	r3, #45424	; 0xb170
   15fd4:	movt	r3, #2
   15fd8:	cmp	r5, r3
   15fdc:	str	r8, [r4]
   15fe0:	beq	15fec <__assert_fail@plt+0x5094>
   15fe4:	mov	r0, r5
   15fe8:	bl	13430 <__assert_fail@plt+0x24d8>
   15fec:	mov	r0, r8
   15ff0:	bl	17980 <__assert_fail@plt+0x6a28>
   15ff4:	ldr	lr, [sp, #24]
   15ff8:	mov	r1, r8
   15ffc:	mov	r3, sl
   16000:	mov	r2, r9
   16004:	mov	r5, r0
   16008:	ldr	r8, [sp, #64]	; 0x40
   1600c:	ldr	ip, [sp, #68]	; 0x44
   16010:	str	r0, [r4, #4]
   16014:	str	lr, [sp]
   16018:	add	lr, sp, #32
   1601c:	str	r6, [sp, #4]
   16020:	str	lr, [sp, #8]
   16024:	str	r8, [sp, #12]
   16028:	str	ip, [sp, #16]
   1602c:	bl	13894 <__assert_fail@plt+0x293c>
   16030:	mov	r0, r5
   16034:	str	fp, [r7]
   16038:	add	sp, sp, #124	; 0x7c
   1603c:	ldrd	r4, [sp]
   16040:	ldrd	r6, [sp, #8]
   16044:	ldrd	r8, [sp, #16]
   16048:	ldrd	sl, [sp, #24]
   1604c:	add	sp, sp, #32
   16050:	pop	{pc}		; (ldr pc, [sp], #4)
   16054:	mov	r0, #8
   16058:	mvn	r3, #-2147483648	; 0x80000000
   1605c:	add	r1, sp, #72	; 0x48
   16060:	str	r0, [sp]
   16064:	mov	r0, #0
   16068:	bl	17c24 <__assert_fail@plt+0x6ccc>
   1606c:	ldrd	r2, [r5, #8]
   16070:	mov	r4, r0
   16074:	str	r0, [r5]
   16078:	strd	r2, [r0]
   1607c:	b	15f58 <__assert_fail@plt+0x5000>
   16080:	bl	10f40 <abort@plt>
   16084:	ldr	r3, [pc, #492]	; 16278 <__assert_fail@plt+0x5320>
   16088:	lsr	ip, r2, #5
   1608c:	and	r2, r2, #31
   16090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16094:	movw	r5, #45312	; 0xb100
   16098:	movt	r5, #2
   1609c:	strd	r6, [sp, #8]
   160a0:	strd	r8, [sp, #16]
   160a4:	strd	sl, [sp, #24]
   160a8:	mov	sl, r0
   160ac:	mov	fp, r1
   160b0:	ldrd	r0, [r3]
   160b4:	str	lr, [sp, #32]
   160b8:	sub	sp, sp, #92	; 0x5c
   160bc:	ldrd	r8, [r3, #8]
   160c0:	add	r6, sp, #48	; 0x30
   160c4:	strd	r0, [sp, #40]	; 0x28
   160c8:	ldrd	r0, [r3, #16]
   160cc:	strd	r8, [sp, #48]	; 0x30
   160d0:	ldrd	r8, [r3, #24]
   160d4:	strd	r0, [sp, #56]	; 0x38
   160d8:	ldrd	r0, [r3, #32]
   160dc:	strd	r8, [sp, #64]	; 0x40
   160e0:	ldrd	r8, [r3, #40]	; 0x28
   160e4:	strd	r0, [sp, #72]	; 0x48
   160e8:	strd	r8, [sp, #80]	; 0x50
   160ec:	ldr	r3, [r6, ip, lsl #2]
   160f0:	mvn	r1, r3, lsr r2
   160f4:	and	r1, r1, #1
   160f8:	eor	r2, r3, r1, lsl r2
   160fc:	str	r2, [r6, ip, lsl #2]
   16100:	bl	10e8c <__errno_location@plt>
   16104:	ldr	r3, [r0]
   16108:	mov	r8, r0
   1610c:	ldr	r2, [r5, #4]
   16110:	ldr	r4, [r5]
   16114:	str	r3, [sp, #28]
   16118:	cmp	r2, #0
   1611c:	bgt	16178 <__assert_fail@plt+0x5220>
   16120:	add	r3, r5, #8
   16124:	str	r2, [sp, #36]	; 0x24
   16128:	rsb	r2, r2, #1
   1612c:	cmp	r4, r3
   16130:	beq	1624c <__assert_fail@plt+0x52f4>
   16134:	mov	r1, #8
   16138:	mov	r0, r4
   1613c:	mvn	r3, #-2147483648	; 0x80000000
   16140:	str	r1, [sp]
   16144:	add	r1, sp, #36	; 0x24
   16148:	bl	17c24 <__assert_fail@plt+0x6ccc>
   1614c:	mov	r4, r0
   16150:	str	r0, [r5]
   16154:	ldr	r0, [r5, #4]
   16158:	mov	r1, #0
   1615c:	ldr	r2, [sp, #36]	; 0x24
   16160:	sub	r2, r2, r0
   16164:	add	r0, r4, r0, lsl #3
   16168:	lsl	r2, r2, #3
   1616c:	bl	10ea4 <memset@plt>
   16170:	ldr	r3, [sp, #36]	; 0x24
   16174:	str	r3, [r5, #4]
   16178:	ldr	ip, [sp, #40]	; 0x28
   1617c:	mov	r3, fp
   16180:	mov	r2, sl
   16184:	ldr	r7, [sp, #44]	; 0x2c
   16188:	ldr	r9, [r4]
   1618c:	ldr	r5, [r4, #4]
   16190:	str	ip, [sp]
   16194:	orr	r7, r7, #1
   16198:	ldr	ip, [sp, #80]	; 0x50
   1619c:	mov	r1, r9
   161a0:	str	r7, [sp, #4]
   161a4:	ldr	lr, [sp, #84]	; 0x54
   161a8:	mov	r0, r5
   161ac:	str	r6, [sp, #8]
   161b0:	str	ip, [sp, #12]
   161b4:	str	lr, [sp, #16]
   161b8:	bl	13894 <__assert_fail@plt+0x293c>
   161bc:	cmp	r9, r0
   161c0:	bhi	16224 <__assert_fail@plt+0x52cc>
   161c4:	add	r9, r0, #1
   161c8:	movw	r3, #45424	; 0xb170
   161cc:	movt	r3, #2
   161d0:	cmp	r5, r3
   161d4:	str	r9, [r4]
   161d8:	beq	161e4 <__assert_fail@plt+0x528c>
   161dc:	mov	r0, r5
   161e0:	bl	13430 <__assert_fail@plt+0x24d8>
   161e4:	mov	r0, r9
   161e8:	bl	17980 <__assert_fail@plt+0x6a28>
   161ec:	mov	r1, r9
   161f0:	ldr	ip, [sp, #40]	; 0x28
   161f4:	mov	r3, fp
   161f8:	mov	r2, sl
   161fc:	mov	r5, r0
   16200:	ldr	r9, [sp, #80]	; 0x50
   16204:	ldr	lr, [sp, #84]	; 0x54
   16208:	str	r0, [r4, #4]
   1620c:	str	ip, [sp]
   16210:	str	r7, [sp, #4]
   16214:	str	r6, [sp, #8]
   16218:	str	r9, [sp, #12]
   1621c:	str	lr, [sp, #16]
   16220:	bl	13894 <__assert_fail@plt+0x293c>
   16224:	ldr	r3, [sp, #28]
   16228:	mov	r0, r5
   1622c:	str	r3, [r8]
   16230:	add	sp, sp, #92	; 0x5c
   16234:	ldrd	r4, [sp]
   16238:	ldrd	r6, [sp, #8]
   1623c:	ldrd	r8, [sp, #16]
   16240:	ldrd	sl, [sp, #24]
   16244:	add	sp, sp, #32
   16248:	pop	{pc}		; (ldr pc, [sp], #4)
   1624c:	mov	r0, #8
   16250:	mvn	r3, #-2147483648	; 0x80000000
   16254:	add	r1, sp, #36	; 0x24
   16258:	str	r0, [sp]
   1625c:	mov	r0, #0
   16260:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16264:	ldrd	r2, [r5, #8]
   16268:	mov	r4, r0
   1626c:	str	r0, [r5]
   16270:	strd	r2, [r0]
   16274:	b	16154 <__assert_fail@plt+0x51fc>
   16278:	andeq	fp, r2, r0, ror r2
   1627c:	ldr	ip, [pc, #476]	; 16460 <__assert_fail@plt+0x5508>
   16280:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16284:	movw	r4, #45312	; 0xb100
   16288:	movt	r4, #2
   1628c:	ldrd	r2, [ip, #8]
   16290:	strd	r6, [sp, #8]
   16294:	lsr	r7, r1, #5
   16298:	mov	r6, r0
   1629c:	strd	r8, [sp, #16]
   162a0:	str	lr, [sp, #32]
   162a4:	and	lr, r1, #31
   162a8:	ldrd	r0, [ip]
   162ac:	strd	sl, [sp, #24]
   162b0:	sub	sp, sp, #84	; 0x54
   162b4:	add	r5, sp, #40	; 0x28
   162b8:	strd	r0, [sp, #32]
   162bc:	strd	r2, [sp, #40]	; 0x28
   162c0:	ldrd	r0, [ip, #16]
   162c4:	ldrd	r2, [ip, #24]
   162c8:	strd	r0, [sp, #48]	; 0x30
   162cc:	ldrd	r0, [ip, #32]
   162d0:	strd	r2, [sp, #56]	; 0x38
   162d4:	ldrd	r2, [ip, #40]	; 0x28
   162d8:	strd	r0, [sp, #64]	; 0x40
   162dc:	strd	r2, [sp, #72]	; 0x48
   162e0:	ldr	r1, [r5, r7, lsl #2]
   162e4:	mvn	r3, r1, lsr lr
   162e8:	and	r3, r3, #1
   162ec:	eor	r1, r1, r3, lsl lr
   162f0:	str	r1, [r5, r7, lsl #2]
   162f4:	bl	10e8c <__errno_location@plt>
   162f8:	mov	r9, r0
   162fc:	ldr	sl, [r0]
   16300:	ldr	r2, [r4, #4]
   16304:	ldr	r7, [r4]
   16308:	cmp	r2, #0
   1630c:	bgt	16368 <__assert_fail@plt+0x5410>
   16310:	add	r3, r4, #8
   16314:	str	r2, [sp, #28]
   16318:	rsb	r2, r2, #1
   1631c:	cmp	r7, r3
   16320:	beq	16434 <__assert_fail@plt+0x54dc>
   16324:	mov	r1, #8
   16328:	mov	r0, r7
   1632c:	mvn	r3, #-2147483648	; 0x80000000
   16330:	str	r1, [sp]
   16334:	add	r1, sp, #28
   16338:	bl	17c24 <__assert_fail@plt+0x6ccc>
   1633c:	mov	r7, r0
   16340:	str	r0, [r4]
   16344:	ldr	r0, [r4, #4]
   16348:	mov	r1, #0
   1634c:	ldr	r2, [sp, #28]
   16350:	sub	r2, r2, r0
   16354:	add	r0, r7, r0, lsl #3
   16358:	lsl	r2, r2, #3
   1635c:	bl	10ea4 <memset@plt>
   16360:	ldr	r3, [sp, #28]
   16364:	str	r3, [r4, #4]
   16368:	ldr	ip, [sp, #32]
   1636c:	mvn	r3, #0
   16370:	mov	r2, r6
   16374:	ldr	r8, [sp, #36]	; 0x24
   16378:	ldr	fp, [r7]
   1637c:	ldr	r4, [r7, #4]
   16380:	str	ip, [sp]
   16384:	orr	r8, r8, #1
   16388:	ldr	ip, [sp, #72]	; 0x48
   1638c:	mov	r1, fp
   16390:	str	r8, [sp, #4]
   16394:	ldr	lr, [sp, #76]	; 0x4c
   16398:	mov	r0, r4
   1639c:	str	r5, [sp, #8]
   163a0:	str	ip, [sp, #12]
   163a4:	str	lr, [sp, #16]
   163a8:	bl	13894 <__assert_fail@plt+0x293c>
   163ac:	cmp	fp, r0
   163b0:	bhi	16410 <__assert_fail@plt+0x54b8>
   163b4:	add	fp, r0, #1
   163b8:	movw	r3, #45424	; 0xb170
   163bc:	movt	r3, #2
   163c0:	cmp	r4, r3
   163c4:	str	fp, [r7]
   163c8:	beq	163d4 <__assert_fail@plt+0x547c>
   163cc:	mov	r0, r4
   163d0:	bl	13430 <__assert_fail@plt+0x24d8>
   163d4:	mov	r0, fp
   163d8:	bl	17980 <__assert_fail@plt+0x6a28>
   163dc:	ldr	r3, [sp, #32]
   163e0:	mov	r2, r6
   163e4:	mov	r1, fp
   163e8:	mov	r4, r0
   163ec:	ldr	lr, [sp, #72]	; 0x48
   163f0:	ldr	ip, [sp, #76]	; 0x4c
   163f4:	str	r0, [r7, #4]
   163f8:	stm	sp, {r3, r8}
   163fc:	mvn	r3, #0
   16400:	str	r5, [sp, #8]
   16404:	str	lr, [sp, #12]
   16408:	str	ip, [sp, #16]
   1640c:	bl	13894 <__assert_fail@plt+0x293c>
   16410:	mov	r0, r4
   16414:	str	sl, [r9]
   16418:	add	sp, sp, #84	; 0x54
   1641c:	ldrd	r4, [sp]
   16420:	ldrd	r6, [sp, #8]
   16424:	ldrd	r8, [sp, #16]
   16428:	ldrd	sl, [sp, #24]
   1642c:	add	sp, sp, #32
   16430:	pop	{pc}		; (ldr pc, [sp], #4)
   16434:	mov	r0, #8
   16438:	mvn	r3, #-2147483648	; 0x80000000
   1643c:	add	r1, sp, #28
   16440:	str	r0, [sp]
   16444:	mov	r0, #0
   16448:	bl	17c24 <__assert_fail@plt+0x6ccc>
   1644c:	ldrd	r2, [r4, #8]
   16450:	mov	r7, r0
   16454:	str	r0, [r4]
   16458:	strd	r2, [r0]
   1645c:	b	16344 <__assert_fail@plt+0x53ec>
   16460:	andeq	fp, r2, r0, ror r2
   16464:	ldr	ip, [pc, #472]	; 16644 <__assert_fail@plt+0x56ec>
   16468:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1646c:	mov	r5, r0
   16470:	movw	r4, #45312	; 0xb100
   16474:	movt	r4, #2
   16478:	ldrd	r2, [ip]
   1647c:	ldrd	r0, [ip, #8]
   16480:	strd	r6, [sp, #8]
   16484:	strd	r8, [sp, #16]
   16488:	strd	sl, [sp, #24]
   1648c:	str	lr, [sp, #32]
   16490:	sub	sp, sp, #84	; 0x54
   16494:	strd	r2, [sp, #32]
   16498:	strd	r0, [sp, #40]	; 0x28
   1649c:	ldr	r6, [sp, #44]	; 0x2c
   164a0:	ldrd	r2, [ip, #16]
   164a4:	ldrd	r0, [ip, #24]
   164a8:	mvn	lr, r6
   164ac:	and	lr, lr, #67108864	; 0x4000000
   164b0:	eor	lr, lr, r6
   164b4:	ldrd	r6, [ip, #40]	; 0x28
   164b8:	strd	r2, [sp, #48]	; 0x30
   164bc:	ldrd	r2, [ip, #32]
   164c0:	str	lr, [sp, #44]	; 0x2c
   164c4:	strd	r0, [sp, #56]	; 0x38
   164c8:	strd	r2, [sp, #64]	; 0x40
   164cc:	strd	r6, [sp, #72]	; 0x48
   164d0:	bl	10e8c <__errno_location@plt>
   164d4:	mov	r8, r0
   164d8:	ldr	r9, [r0]
   164dc:	ldr	r2, [r4, #4]
   164e0:	ldr	r6, [r4]
   164e4:	cmp	r2, #0
   164e8:	bgt	16544 <__assert_fail@plt+0x55ec>
   164ec:	add	r3, r4, #8
   164f0:	str	r2, [sp, #28]
   164f4:	rsb	r2, r2, #1
   164f8:	cmp	r6, r3
   164fc:	beq	16618 <__assert_fail@plt+0x56c0>
   16500:	mov	r1, #8
   16504:	mov	r0, r6
   16508:	mvn	r3, #-2147483648	; 0x80000000
   1650c:	str	r1, [sp]
   16510:	add	r1, sp, #28
   16514:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16518:	mov	r6, r0
   1651c:	str	r0, [r4]
   16520:	ldr	r0, [r4, #4]
   16524:	mov	r1, #0
   16528:	ldr	r2, [sp, #28]
   1652c:	sub	r2, r2, r0
   16530:	add	r0, r6, r0, lsl #3
   16534:	lsl	r2, r2, #3
   16538:	bl	10ea4 <memset@plt>
   1653c:	ldr	r3, [sp, #28]
   16540:	str	r3, [r4, #4]
   16544:	ldr	sl, [r6]
   16548:	add	r0, sp, #40	; 0x28
   1654c:	mvn	r3, #0
   16550:	mov	r2, r5
   16554:	ldr	r7, [sp, #36]	; 0x24
   16558:	ldr	r4, [r6, #4]
   1655c:	mov	r1, sl
   16560:	str	r0, [sp, #8]
   16564:	ldr	lr, [sp, #32]
   16568:	orr	r7, r7, #1
   1656c:	ldr	ip, [sp, #72]	; 0x48
   16570:	mov	r0, r4
   16574:	ldr	fp, [sp, #76]	; 0x4c
   16578:	str	lr, [sp]
   1657c:	str	r7, [sp, #4]
   16580:	str	ip, [sp, #12]
   16584:	str	fp, [sp, #16]
   16588:	bl	13894 <__assert_fail@plt+0x293c>
   1658c:	cmp	sl, r0
   16590:	bhi	165f4 <__assert_fail@plt+0x569c>
   16594:	add	sl, r0, #1
   16598:	movw	r3, #45424	; 0xb170
   1659c:	movt	r3, #2
   165a0:	cmp	r4, r3
   165a4:	str	sl, [r6]
   165a8:	beq	165b4 <__assert_fail@plt+0x565c>
   165ac:	mov	r0, r4
   165b0:	bl	13430 <__assert_fail@plt+0x24d8>
   165b4:	mov	r0, sl
   165b8:	bl	17980 <__assert_fail@plt+0x6a28>
   165bc:	ldr	r3, [sp, #32]
   165c0:	mov	r2, r5
   165c4:	add	r5, sp, #40	; 0x28
   165c8:	mov	r1, sl
   165cc:	mov	r4, r0
   165d0:	ldr	lr, [sp, #72]	; 0x48
   165d4:	ldr	ip, [sp, #76]	; 0x4c
   165d8:	str	r0, [r6, #4]
   165dc:	stm	sp, {r3, r7}
   165e0:	mvn	r3, #0
   165e4:	str	r5, [sp, #8]
   165e8:	str	lr, [sp, #12]
   165ec:	str	ip, [sp, #16]
   165f0:	bl	13894 <__assert_fail@plt+0x293c>
   165f4:	mov	r0, r4
   165f8:	str	r9, [r8]
   165fc:	add	sp, sp, #84	; 0x54
   16600:	ldrd	r4, [sp]
   16604:	ldrd	r6, [sp, #8]
   16608:	ldrd	r8, [sp, #16]
   1660c:	ldrd	sl, [sp, #24]
   16610:	add	sp, sp, #32
   16614:	pop	{pc}		; (ldr pc, [sp], #4)
   16618:	mov	r0, #8
   1661c:	mvn	r3, #-2147483648	; 0x80000000
   16620:	add	r1, sp, #28
   16624:	str	r0, [sp]
   16628:	mov	r0, #0
   1662c:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16630:	ldrd	r2, [r4, #8]
   16634:	mov	r6, r0
   16638:	str	r0, [r4]
   1663c:	strd	r2, [r0]
   16640:	b	16520 <__assert_fail@plt+0x55c8>
   16644:	andeq	fp, r2, r0, ror r2
   16648:	ldr	ip, [pc, #480]	; 16830 <__assert_fail@plt+0x58d8>
   1664c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16650:	mov	r5, r0
   16654:	movw	r4, #45312	; 0xb100
   16658:	movt	r4, #2
   1665c:	ldrd	r2, [ip]
   16660:	strd	r6, [sp, #8]
   16664:	mov	r6, r1
   16668:	ldrd	r0, [ip, #8]
   1666c:	strd	r8, [sp, #16]
   16670:	strd	sl, [sp, #24]
   16674:	str	lr, [sp, #32]
   16678:	sub	sp, sp, #84	; 0x54
   1667c:	ldrd	r8, [ip, #40]	; 0x28
   16680:	strd	r2, [sp, #32]
   16684:	strd	r0, [sp, #40]	; 0x28
   16688:	ldrd	r2, [ip, #16]
   1668c:	ldr	r7, [sp, #44]	; 0x2c
   16690:	ldrd	r0, [ip, #24]
   16694:	strd	r2, [sp, #48]	; 0x30
   16698:	ldrd	r2, [ip, #32]
   1669c:	mvn	lr, r7
   166a0:	and	lr, lr, #67108864	; 0x4000000
   166a4:	eor	lr, lr, r7
   166a8:	str	lr, [sp, #44]	; 0x2c
   166ac:	strd	r0, [sp, #56]	; 0x38
   166b0:	strd	r2, [sp, #64]	; 0x40
   166b4:	strd	r8, [sp, #72]	; 0x48
   166b8:	bl	10e8c <__errno_location@plt>
   166bc:	mov	r9, r0
   166c0:	ldr	sl, [r0]
   166c4:	ldr	r2, [r4, #4]
   166c8:	ldr	r7, [r4]
   166cc:	cmp	r2, #0
   166d0:	bgt	1672c <__assert_fail@plt+0x57d4>
   166d4:	add	r3, r4, #8
   166d8:	str	r2, [sp, #28]
   166dc:	rsb	r2, r2, #1
   166e0:	cmp	r7, r3
   166e4:	beq	16804 <__assert_fail@plt+0x58ac>
   166e8:	mov	r1, #8
   166ec:	mov	r0, r7
   166f0:	mvn	r3, #-2147483648	; 0x80000000
   166f4:	str	r1, [sp]
   166f8:	add	r1, sp, #28
   166fc:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16700:	mov	r7, r0
   16704:	str	r0, [r4]
   16708:	ldr	r0, [r4, #4]
   1670c:	mov	r1, #0
   16710:	ldr	r2, [sp, #28]
   16714:	sub	r2, r2, r0
   16718:	add	r0, r7, r0, lsl #3
   1671c:	lsl	r2, r2, #3
   16720:	bl	10ea4 <memset@plt>
   16724:	ldr	r3, [sp, #28]
   16728:	str	r3, [r4, #4]
   1672c:	ldr	ip, [sp, #32]
   16730:	add	r0, sp, #40	; 0x28
   16734:	mov	r3, r6
   16738:	mov	r2, r5
   1673c:	ldr	r8, [sp, #36]	; 0x24
   16740:	ldr	fp, [r7]
   16744:	ldr	r4, [r7, #4]
   16748:	str	ip, [sp]
   1674c:	orr	r8, r8, #1
   16750:	ldr	ip, [sp, #72]	; 0x48
   16754:	mov	r1, fp
   16758:	str	r8, [sp, #4]
   1675c:	ldr	lr, [sp, #76]	; 0x4c
   16760:	str	r0, [sp, #8]
   16764:	mov	r0, r4
   16768:	str	ip, [sp, #12]
   1676c:	str	lr, [sp, #16]
   16770:	bl	13894 <__assert_fail@plt+0x293c>
   16774:	cmp	fp, r0
   16778:	bhi	167e0 <__assert_fail@plt+0x5888>
   1677c:	add	fp, r0, #1
   16780:	movw	r3, #45424	; 0xb170
   16784:	movt	r3, #2
   16788:	cmp	r4, r3
   1678c:	str	fp, [r7]
   16790:	beq	1679c <__assert_fail@plt+0x5844>
   16794:	mov	r0, r4
   16798:	bl	13430 <__assert_fail@plt+0x24d8>
   1679c:	mov	r0, fp
   167a0:	bl	17980 <__assert_fail@plt+0x6a28>
   167a4:	ldr	lr, [sp, #32]
   167a8:	mov	r2, r5
   167ac:	mov	r3, r6
   167b0:	mov	r1, fp
   167b4:	mov	r4, r0
   167b8:	ldr	r5, [sp, #72]	; 0x48
   167bc:	ldr	ip, [sp, #76]	; 0x4c
   167c0:	str	r0, [r7, #4]
   167c4:	str	lr, [sp]
   167c8:	add	lr, sp, #40	; 0x28
   167cc:	str	r8, [sp, #4]
   167d0:	str	lr, [sp, #8]
   167d4:	str	r5, [sp, #12]
   167d8:	str	ip, [sp, #16]
   167dc:	bl	13894 <__assert_fail@plt+0x293c>
   167e0:	mov	r0, r4
   167e4:	str	sl, [r9]
   167e8:	add	sp, sp, #84	; 0x54
   167ec:	ldrd	r4, [sp]
   167f0:	ldrd	r6, [sp, #8]
   167f4:	ldrd	r8, [sp, #16]
   167f8:	ldrd	sl, [sp, #24]
   167fc:	add	sp, sp, #32
   16800:	pop	{pc}		; (ldr pc, [sp], #4)
   16804:	mov	r0, #8
   16808:	mvn	r3, #-2147483648	; 0x80000000
   1680c:	add	r1, sp, #28
   16810:	str	r0, [sp]
   16814:	mov	r0, #0
   16818:	bl	17c24 <__assert_fail@plt+0x6ccc>
   1681c:	ldrd	r2, [r4, #8]
   16820:	mov	r7, r0
   16824:	str	r0, [r4]
   16828:	strd	r2, [r0]
   1682c:	b	16708 <__assert_fail@plt+0x57b0>
   16830:	andeq	fp, r2, r0, ror r2
   16834:	strd	r4, [sp, #-12]!
   16838:	mov	r4, #0
   1683c:	mov	r5, #0
   16840:	str	lr, [sp, #8]
   16844:	sub	sp, sp, #100	; 0x64
   16848:	cmp	r1, #10
   1684c:	strd	r4, [sp]
   16850:	strd	r4, [sp, #8]
   16854:	strd	r4, [sp, #16]
   16858:	strd	r4, [sp, #24]
   1685c:	strd	r4, [sp, #32]
   16860:	strd	r4, [sp, #40]	; 0x28
   16864:	beq	16894 <__assert_fail@plt+0x593c>
   16868:	mov	ip, #67108864	; 0x4000000
   1686c:	mov	r3, sp
   16870:	str	r1, [sp]
   16874:	mov	r1, r2
   16878:	mvn	r2, #0
   1687c:	str	ip, [sp, #12]
   16880:	bl	15280 <__assert_fail@plt+0x4328>
   16884:	add	sp, sp, #100	; 0x64
   16888:	ldrd	r4, [sp]
   1688c:	add	sp, sp, #8
   16890:	pop	{pc}		; (ldr pc, [sp], #4)
   16894:	bl	10f40 <abort@plt>
   16898:	ldr	ip, [pc, #156]	; 1693c <__assert_fail@plt+0x59e4>
   1689c:	cmp	r2, #0
   168a0:	cmpne	r1, #0
   168a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   168a8:	strd	r6, [sp, #8]
   168ac:	mov	r6, r2
   168b0:	str	r8, [sp, #16]
   168b4:	mov	r8, r3
   168b8:	strd	sl, [sp, #20]
   168bc:	ldrd	r4, [ip]
   168c0:	str	lr, [sp, #28]
   168c4:	sub	sp, sp, #48	; 0x30
   168c8:	mov	lr, #10
   168cc:	ldrd	r2, [ip, #8]
   168d0:	ldrd	sl, [ip, #16]
   168d4:	strd	r4, [sp]
   168d8:	ldrd	r4, [ip, #32]
   168dc:	str	lr, [sp]
   168e0:	strd	r2, [sp, #8]
   168e4:	strd	sl, [sp, #16]
   168e8:	ldrd	r2, [ip, #24]
   168ec:	ldrd	sl, [ip, #40]	; 0x28
   168f0:	strd	r2, [sp, #24]
   168f4:	strd	r4, [sp, #32]
   168f8:	strd	sl, [sp, #40]	; 0x28
   168fc:	beq	16938 <__assert_fail@plt+0x59e0>
   16900:	mov	r7, r1
   16904:	mov	r3, sp
   16908:	mov	r1, r8
   1690c:	mvn	r2, #0
   16910:	str	r7, [sp, #40]	; 0x28
   16914:	str	r6, [sp, #44]	; 0x2c
   16918:	bl	15280 <__assert_fail@plt+0x4328>
   1691c:	add	sp, sp, #48	; 0x30
   16920:	ldrd	r4, [sp]
   16924:	ldrd	r6, [sp, #8]
   16928:	ldr	r8, [sp, #16]
   1692c:	ldrd	sl, [sp, #20]
   16930:	add	sp, sp, #28
   16934:	pop	{pc}		; (ldr pc, [sp], #4)
   16938:	bl	10f40 <abort@plt>
   1693c:	andeq	fp, r2, r0, ror r2
   16940:	ldr	ip, [pc, #156]	; 169e4 <__assert_fail@plt+0x5a8c>
   16944:	cmp	r2, #0
   16948:	cmpne	r1, #0
   1694c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16950:	strd	r6, [sp, #8]
   16954:	mov	r6, r2
   16958:	str	r8, [sp, #16]
   1695c:	mov	r8, r3
   16960:	strd	sl, [sp, #20]
   16964:	ldrd	r4, [ip]
   16968:	str	lr, [sp, #28]
   1696c:	sub	sp, sp, #48	; 0x30
   16970:	mov	lr, #10
   16974:	ldrd	r2, [ip, #8]
   16978:	ldrd	sl, [ip, #16]
   1697c:	strd	r4, [sp]
   16980:	ldrd	r4, [ip, #32]
   16984:	str	lr, [sp]
   16988:	strd	r2, [sp, #8]
   1698c:	strd	sl, [sp, #16]
   16990:	ldrd	r2, [ip, #24]
   16994:	ldrd	sl, [ip, #40]	; 0x28
   16998:	strd	r2, [sp, #24]
   1699c:	strd	r4, [sp, #32]
   169a0:	strd	sl, [sp, #40]	; 0x28
   169a4:	beq	169e0 <__assert_fail@plt+0x5a88>
   169a8:	ldr	r2, [sp, #80]	; 0x50
   169ac:	mov	r7, r1
   169b0:	mov	r3, sp
   169b4:	mov	r1, r8
   169b8:	str	r7, [sp, #40]	; 0x28
   169bc:	str	r6, [sp, #44]	; 0x2c
   169c0:	bl	15280 <__assert_fail@plt+0x4328>
   169c4:	add	sp, sp, #48	; 0x30
   169c8:	ldrd	r4, [sp]
   169cc:	ldrd	r6, [sp, #8]
   169d0:	ldr	r8, [sp, #16]
   169d4:	ldrd	sl, [sp, #20]
   169d8:	add	sp, sp, #28
   169dc:	pop	{pc}		; (ldr pc, [sp], #4)
   169e0:	bl	10f40 <abort@plt>
   169e4:	andeq	fp, r2, r0, ror r2
   169e8:	ldr	ip, [pc, #512]	; 16bf0 <__assert_fail@plt+0x5c98>
   169ec:	cmp	r0, #0
   169f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   169f4:	ldrd	r4, [ip, #16]
   169f8:	strd	r6, [sp, #8]
   169fc:	clz	r6, r1
   16a00:	mov	r7, r1
   16a04:	strd	r8, [sp, #16]
   16a08:	mov	r8, r0
   16a0c:	lsr	r6, r6, #5
   16a10:	strd	sl, [sp, #24]
   16a14:	mov	fp, r2
   16a18:	mov	sl, #10
   16a1c:	ldrd	r2, [ip]
   16a20:	moveq	r6, #1
   16a24:	str	lr, [sp, #32]
   16a28:	sub	sp, sp, #92	; 0x5c
   16a2c:	cmp	r6, #0
   16a30:	ldrd	r0, [ip, #8]
   16a34:	strd	r2, [sp, #40]	; 0x28
   16a38:	strd	r4, [sp, #56]	; 0x38
   16a3c:	ldrd	r2, [ip, #24]
   16a40:	strd	r0, [sp, #48]	; 0x30
   16a44:	ldrd	r0, [ip, #32]
   16a48:	str	sl, [sp, #40]	; 0x28
   16a4c:	ldrd	r4, [ip, #40]	; 0x28
   16a50:	strd	r2, [sp, #64]	; 0x40
   16a54:	strd	r0, [sp, #72]	; 0x48
   16a58:	strd	r4, [sp, #80]	; 0x50
   16a5c:	bne	16bec <__assert_fail@plt+0x5c94>
   16a60:	movw	r5, #45312	; 0xb100
   16a64:	movt	r5, #2
   16a68:	str	r8, [sp, #80]	; 0x50
   16a6c:	str	r7, [sp, #84]	; 0x54
   16a70:	bl	10e8c <__errno_location@plt>
   16a74:	ldr	r3, [r0]
   16a78:	mov	r9, r0
   16a7c:	ldr	r2, [r5, #4]
   16a80:	ldr	r4, [r5]
   16a84:	str	r3, [sp, #28]
   16a88:	cmp	r2, #0
   16a8c:	movgt	r1, sl
   16a90:	bgt	16af8 <__assert_fail@plt+0x5ba0>
   16a94:	add	r3, r5, #8
   16a98:	str	r2, [sp, #36]	; 0x24
   16a9c:	rsb	r2, r2, #1
   16aa0:	cmp	r4, r3
   16aa4:	beq	16bc0 <__assert_fail@plt+0x5c68>
   16aa8:	mov	r1, #8
   16aac:	mov	r0, r4
   16ab0:	mvn	r3, #-2147483648	; 0x80000000
   16ab4:	str	r1, [sp]
   16ab8:	add	r1, sp, #36	; 0x24
   16abc:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16ac0:	mov	r4, r0
   16ac4:	str	r0, [r5]
   16ac8:	ldr	r0, [r5, #4]
   16acc:	mov	r1, #0
   16ad0:	ldr	r2, [sp, #36]	; 0x24
   16ad4:	sub	r2, r2, r0
   16ad8:	add	r0, r4, r0, lsl #3
   16adc:	lsl	r2, r2, #3
   16ae0:	bl	10ea4 <memset@plt>
   16ae4:	ldr	r3, [sp, #36]	; 0x24
   16ae8:	ldr	r1, [sp, #40]	; 0x28
   16aec:	ldr	r8, [sp, #80]	; 0x50
   16af0:	str	r3, [r5, #4]
   16af4:	ldr	r7, [sp, #84]	; 0x54
   16af8:	mvn	r3, #0
   16afc:	mov	r2, fp
   16b00:	ldr	r6, [sp, #44]	; 0x2c
   16b04:	ldr	sl, [r4]
   16b08:	ldr	r5, [r4, #4]
   16b0c:	orr	r6, r6, #1
   16b10:	stm	sp, {r1, r6}
   16b14:	add	r1, sp, #48	; 0x30
   16b18:	str	r8, [sp, #12]
   16b1c:	mov	r0, r5
   16b20:	str	r1, [sp, #8]
   16b24:	mov	r1, sl
   16b28:	str	r7, [sp, #16]
   16b2c:	bl	13894 <__assert_fail@plt+0x293c>
   16b30:	cmp	sl, r0
   16b34:	bhi	16b98 <__assert_fail@plt+0x5c40>
   16b38:	add	r7, r0, #1
   16b3c:	movw	r3, #45424	; 0xb170
   16b40:	movt	r3, #2
   16b44:	cmp	r5, r3
   16b48:	str	r7, [r4]
   16b4c:	beq	16b58 <__assert_fail@plt+0x5c00>
   16b50:	mov	r0, r5
   16b54:	bl	13430 <__assert_fail@plt+0x24d8>
   16b58:	mov	r0, r7
   16b5c:	bl	17980 <__assert_fail@plt+0x6a28>
   16b60:	ldr	r3, [sp, #40]	; 0x28
   16b64:	mov	r2, fp
   16b68:	mov	r1, r7
   16b6c:	mov	r5, r0
   16b70:	ldr	lr, [sp, #80]	; 0x50
   16b74:	ldr	ip, [sp, #84]	; 0x54
   16b78:	str	r0, [r4, #4]
   16b7c:	add	r4, sp, #48	; 0x30
   16b80:	stm	sp, {r3, r6}
   16b84:	mvn	r3, #0
   16b88:	str	r4, [sp, #8]
   16b8c:	str	lr, [sp, #12]
   16b90:	str	ip, [sp, #16]
   16b94:	bl	13894 <__assert_fail@plt+0x293c>
   16b98:	ldr	r3, [sp, #28]
   16b9c:	mov	r0, r5
   16ba0:	str	r3, [r9]
   16ba4:	add	sp, sp, #92	; 0x5c
   16ba8:	ldrd	r4, [sp]
   16bac:	ldrd	r6, [sp, #8]
   16bb0:	ldrd	r8, [sp, #16]
   16bb4:	ldrd	sl, [sp, #24]
   16bb8:	add	sp, sp, #32
   16bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc0:	mov	r1, #8
   16bc4:	mvn	r3, #-2147483648	; 0x80000000
   16bc8:	mov	r0, r6
   16bcc:	str	r1, [sp]
   16bd0:	add	r1, sp, #36	; 0x24
   16bd4:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16bd8:	ldrd	r2, [r5, #8]
   16bdc:	mov	r4, r0
   16be0:	str	r0, [r5]
   16be4:	strd	r2, [r0]
   16be8:	b	16ac8 <__assert_fail@plt+0x5b70>
   16bec:	bl	10f40 <abort@plt>
   16bf0:	andeq	fp, r2, r0, ror r2
   16bf4:	ldr	ip, [pc, #536]	; 16e14 <__assert_fail@plt+0x5ebc>
   16bf8:	cmp	r0, #0
   16bfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c00:	ldrd	r4, [ip, #16]
   16c04:	strd	r6, [sp, #8]
   16c08:	mov	r6, r1
   16c0c:	mov	r7, r0
   16c10:	strd	r8, [sp, #16]
   16c14:	mov	r9, #10
   16c18:	strd	sl, [sp, #24]
   16c1c:	mov	sl, r2
   16c20:	mov	fp, r3
   16c24:	str	lr, [sp, #32]
   16c28:	clz	lr, r1
   16c2c:	sub	sp, sp, #92	; 0x5c
   16c30:	ldrd	r2, [ip]
   16c34:	lsr	lr, lr, #5
   16c38:	moveq	lr, #1
   16c3c:	ldrd	r0, [ip, #8]
   16c40:	cmp	lr, #0
   16c44:	strd	r4, [sp, #56]	; 0x38
   16c48:	ldrd	r4, [ip, #40]	; 0x28
   16c4c:	str	lr, [sp, #28]
   16c50:	strd	r2, [sp, #40]	; 0x28
   16c54:	ldrd	r2, [ip, #24]
   16c58:	strd	r0, [sp, #48]	; 0x30
   16c5c:	ldrd	r0, [ip, #32]
   16c60:	str	r9, [sp, #40]	; 0x28
   16c64:	strd	r2, [sp, #64]	; 0x40
   16c68:	strd	r4, [sp, #80]	; 0x50
   16c6c:	strd	r0, [sp, #72]	; 0x48
   16c70:	bne	16e10 <__assert_fail@plt+0x5eb8>
   16c74:	movw	r5, #45312	; 0xb100
   16c78:	movt	r5, #2
   16c7c:	str	r7, [sp, #80]	; 0x50
   16c80:	str	r6, [sp, #84]	; 0x54
   16c84:	bl	10e8c <__errno_location@plt>
   16c88:	ldr	r3, [r0]
   16c8c:	mov	r8, r0
   16c90:	ldr	r2, [r5, #4]
   16c94:	ldr	r4, [r5]
   16c98:	str	r3, [sp, #24]
   16c9c:	cmp	r2, #0
   16ca0:	movgt	r1, r9
   16ca4:	bgt	16d0c <__assert_fail@plt+0x5db4>
   16ca8:	add	r3, r5, #8
   16cac:	str	r2, [sp, #36]	; 0x24
   16cb0:	rsb	r2, r2, #1
   16cb4:	cmp	r4, r3
   16cb8:	beq	16de4 <__assert_fail@plt+0x5e8c>
   16cbc:	mov	r1, #8
   16cc0:	mov	r0, r4
   16cc4:	mvn	r3, #-2147483648	; 0x80000000
   16cc8:	str	r1, [sp]
   16ccc:	add	r1, sp, #36	; 0x24
   16cd0:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16cd4:	mov	r4, r0
   16cd8:	str	r0, [r5]
   16cdc:	ldr	r0, [r5, #4]
   16ce0:	mov	r1, #0
   16ce4:	ldr	r2, [sp, #36]	; 0x24
   16ce8:	sub	r2, r2, r0
   16cec:	add	r0, r4, r0, lsl #3
   16cf0:	lsl	r2, r2, #3
   16cf4:	bl	10ea4 <memset@plt>
   16cf8:	ldr	r3, [sp, #36]	; 0x24
   16cfc:	ldr	r1, [sp, #40]	; 0x28
   16d00:	ldr	r7, [sp, #80]	; 0x50
   16d04:	str	r3, [r5, #4]
   16d08:	ldr	r6, [sp, #84]	; 0x54
   16d0c:	mov	r3, fp
   16d10:	mov	r2, sl
   16d14:	ldr	r0, [sp, #44]	; 0x2c
   16d18:	ldr	r9, [r4]
   16d1c:	ldr	r5, [r4, #4]
   16d20:	orr	r0, r0, #1
   16d24:	str	r1, [sp]
   16d28:	add	r1, sp, #48	; 0x30
   16d2c:	str	r0, [sp, #4]
   16d30:	str	r1, [sp, #8]
   16d34:	mov	r1, r9
   16d38:	str	r7, [sp, #12]
   16d3c:	str	r6, [sp, #16]
   16d40:	str	r0, [sp, #28]
   16d44:	mov	r0, r5
   16d48:	bl	13894 <__assert_fail@plt+0x293c>
   16d4c:	cmp	r9, r0
   16d50:	bhi	16dbc <__assert_fail@plt+0x5e64>
   16d54:	add	r6, r0, #1
   16d58:	movw	r3, #45424	; 0xb170
   16d5c:	movt	r3, #2
   16d60:	cmp	r5, r3
   16d64:	str	r6, [r4]
   16d68:	beq	16d74 <__assert_fail@plt+0x5e1c>
   16d6c:	mov	r0, r5
   16d70:	bl	13430 <__assert_fail@plt+0x24d8>
   16d74:	mov	r0, r6
   16d78:	bl	17980 <__assert_fail@plt+0x6a28>
   16d7c:	ldr	lr, [sp, #40]	; 0x28
   16d80:	mov	r1, r6
   16d84:	mov	r3, fp
   16d88:	mov	r2, sl
   16d8c:	mov	r5, r0
   16d90:	ldr	r6, [sp, #80]	; 0x50
   16d94:	ldr	ip, [sp, #84]	; 0x54
   16d98:	str	r0, [r4, #4]
   16d9c:	str	lr, [sp]
   16da0:	ldr	lr, [sp, #28]
   16da4:	str	lr, [sp, #4]
   16da8:	add	lr, sp, #48	; 0x30
   16dac:	str	r6, [sp, #12]
   16db0:	str	lr, [sp, #8]
   16db4:	str	ip, [sp, #16]
   16db8:	bl	13894 <__assert_fail@plt+0x293c>
   16dbc:	ldr	r3, [sp, #24]
   16dc0:	mov	r0, r5
   16dc4:	str	r3, [r8]
   16dc8:	add	sp, sp, #92	; 0x5c
   16dcc:	ldrd	r4, [sp]
   16dd0:	ldrd	r6, [sp, #8]
   16dd4:	ldrd	r8, [sp, #16]
   16dd8:	ldrd	sl, [sp, #24]
   16ddc:	add	sp, sp, #32
   16de0:	pop	{pc}		; (ldr pc, [sp], #4)
   16de4:	mov	r1, #8
   16de8:	mvn	r3, #-2147483648	; 0x80000000
   16dec:	ldr	r0, [sp, #28]
   16df0:	str	r1, [sp]
   16df4:	add	r1, sp, #36	; 0x24
   16df8:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16dfc:	ldrd	r2, [r5, #8]
   16e00:	mov	r4, r0
   16e04:	str	r0, [r5]
   16e08:	strd	r2, [r0]
   16e0c:	b	16cdc <__assert_fail@plt+0x5d84>
   16e10:	bl	10f40 <abort@plt>
   16e14:	andeq	fp, r2, r0, ror r2
   16e18:	ldr	r3, [pc]	; 16e20 <__assert_fail@plt+0x5ec8>
   16e1c:	b	15280 <__assert_fail@plt+0x4328>
   16e20:	andeq	fp, r2, r0, lsl r1
   16e24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e28:	movw	r4, #45312	; 0xb100
   16e2c:	movt	r4, #2
   16e30:	strd	r6, [sp, #8]
   16e34:	strd	r8, [sp, #16]
   16e38:	strd	sl, [sp, #24]
   16e3c:	mov	sl, r0
   16e40:	mov	fp, r1
   16e44:	str	lr, [sp, #32]
   16e48:	sub	sp, sp, #44	; 0x2c
   16e4c:	bl	10e8c <__errno_location@plt>
   16e50:	ldr	r3, [r0]
   16e54:	mov	r8, r0
   16e58:	ldr	r2, [r4, #4]
   16e5c:	ldr	r5, [r4]
   16e60:	str	r3, [sp, #28]
   16e64:	cmp	r2, #0
   16e68:	bgt	16ec4 <__assert_fail@plt+0x5f6c>
   16e6c:	add	r3, r4, #8
   16e70:	str	r2, [sp, #36]	; 0x24
   16e74:	rsb	r2, r2, #1
   16e78:	cmp	r5, r3
   16e7c:	beq	16fa0 <__assert_fail@plt+0x6048>
   16e80:	mov	r1, #8
   16e84:	mov	r0, r5
   16e88:	mvn	r3, #-2147483648	; 0x80000000
   16e8c:	str	r1, [sp]
   16e90:	add	r1, sp, #36	; 0x24
   16e94:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16e98:	mov	r5, r0
   16e9c:	str	r0, [r4]
   16ea0:	ldr	r0, [r4, #4]
   16ea4:	mov	r1, #0
   16ea8:	ldr	r2, [sp, #36]	; 0x24
   16eac:	sub	r2, r2, r0
   16eb0:	add	r0, r5, r0, lsl #3
   16eb4:	lsl	r2, r2, #3
   16eb8:	bl	10ea4 <memset@plt>
   16ebc:	ldr	r3, [sp, #36]	; 0x24
   16ec0:	str	r3, [r4, #4]
   16ec4:	ldr	ip, [r4, #16]
   16ec8:	mov	r3, fp
   16ecc:	mov	r2, sl
   16ed0:	ldr	r7, [r4, #20]
   16ed4:	ldr	r0, [pc, #240]	; 16fcc <__assert_fail@plt+0x6074>
   16ed8:	ldr	r9, [r5]
   16edc:	orr	r7, r7, #1
   16ee0:	ldr	r6, [r5, #4]
   16ee4:	str	ip, [sp]
   16ee8:	ldr	ip, [r4, #56]	; 0x38
   16eec:	mov	r1, r9
   16ef0:	str	r7, [sp, #4]
   16ef4:	ldr	lr, [r4, #60]	; 0x3c
   16ef8:	str	r0, [sp, #8]
   16efc:	mov	r0, r6
   16f00:	str	ip, [sp, #12]
   16f04:	str	lr, [sp, #16]
   16f08:	bl	13894 <__assert_fail@plt+0x293c>
   16f0c:	cmp	r9, r0
   16f10:	bhi	16f78 <__assert_fail@plt+0x6020>
   16f14:	add	r9, r0, #1
   16f18:	movw	r3, #45424	; 0xb170
   16f1c:	movt	r3, #2
   16f20:	cmp	r6, r3
   16f24:	str	r9, [r5]
   16f28:	beq	16f34 <__assert_fail@plt+0x5fdc>
   16f2c:	mov	r0, r6
   16f30:	bl	13430 <__assert_fail@plt+0x24d8>
   16f34:	mov	r0, r9
   16f38:	bl	17980 <__assert_fail@plt+0x6a28>
   16f3c:	ldr	ip, [r4, #16]
   16f40:	mov	r1, r9
   16f44:	mov	r3, fp
   16f48:	mov	r2, sl
   16f4c:	mov	r6, r0
   16f50:	ldr	r9, [r4, #56]	; 0x38
   16f54:	ldr	lr, [r4, #60]	; 0x3c
   16f58:	str	r0, [r5, #4]
   16f5c:	str	ip, [sp]
   16f60:	ldr	ip, [pc, #100]	; 16fcc <__assert_fail@plt+0x6074>
   16f64:	str	r7, [sp, #4]
   16f68:	str	ip, [sp, #8]
   16f6c:	str	r9, [sp, #12]
   16f70:	str	lr, [sp, #16]
   16f74:	bl	13894 <__assert_fail@plt+0x293c>
   16f78:	ldr	r3, [sp, #28]
   16f7c:	mov	r0, r6
   16f80:	str	r3, [r8]
   16f84:	add	sp, sp, #44	; 0x2c
   16f88:	ldrd	r4, [sp]
   16f8c:	ldrd	r6, [sp, #8]
   16f90:	ldrd	r8, [sp, #16]
   16f94:	ldrd	sl, [sp, #24]
   16f98:	add	sp, sp, #32
   16f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   16fa0:	mov	r0, #8
   16fa4:	mvn	r3, #-2147483648	; 0x80000000
   16fa8:	add	r1, sp, #36	; 0x24
   16fac:	str	r0, [sp]
   16fb0:	mov	r0, #0
   16fb4:	bl	17c24 <__assert_fail@plt+0x6ccc>
   16fb8:	ldrd	r2, [r4, #8]
   16fbc:	mov	r5, r0
   16fc0:	str	r0, [r4]
   16fc4:	strd	r2, [r0]
   16fc8:	b	16ea0 <__assert_fail@plt+0x5f48>
   16fcc:	andeq	fp, r2, r8, lsl r1
   16fd0:	ldr	r3, [pc, #4]	; 16fdc <__assert_fail@plt+0x6084>
   16fd4:	mvn	r2, #0
   16fd8:	b	15280 <__assert_fail@plt+0x4328>
   16fdc:	andeq	fp, r2, r0, lsl r1
   16fe0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16fe4:	movw	r4, #45312	; 0xb100
   16fe8:	movt	r4, #2
   16fec:	strd	r6, [sp, #8]
   16ff0:	strd	r8, [sp, #16]
   16ff4:	strd	sl, [sp, #24]
   16ff8:	mov	sl, r0
   16ffc:	str	lr, [sp, #32]
   17000:	sub	sp, sp, #44	; 0x2c
   17004:	bl	10e8c <__errno_location@plt>
   17008:	ldr	r3, [r0]
   1700c:	mov	r8, r0
   17010:	ldr	r2, [r4, #4]
   17014:	ldr	r5, [r4]
   17018:	str	r3, [sp, #28]
   1701c:	cmp	r2, #0
   17020:	bgt	1707c <__assert_fail@plt+0x6124>
   17024:	add	r3, r4, #8
   17028:	str	r2, [sp, #36]	; 0x24
   1702c:	rsb	r2, r2, #1
   17030:	cmp	r5, r3
   17034:	beq	17144 <__assert_fail@plt+0x61ec>
   17038:	mov	r1, #8
   1703c:	mov	r0, r5
   17040:	mvn	r3, #-2147483648	; 0x80000000
   17044:	str	r1, [sp]
   17048:	add	r1, sp, #36	; 0x24
   1704c:	bl	17c24 <__assert_fail@plt+0x6ccc>
   17050:	mov	r5, r0
   17054:	str	r0, [r4]
   17058:	ldr	r0, [r4, #4]
   1705c:	mov	r1, #0
   17060:	ldr	r2, [sp, #36]	; 0x24
   17064:	sub	r2, r2, r0
   17068:	add	r0, r5, r0, lsl #3
   1706c:	lsl	r2, r2, #3
   17070:	bl	10ea4 <memset@plt>
   17074:	ldr	r3, [sp, #36]	; 0x24
   17078:	str	r3, [r4, #4]
   1707c:	ldr	ip, [r4, #16]
   17080:	mvn	r3, #0
   17084:	mov	r2, sl
   17088:	ldr	r7, [r4, #20]
   1708c:	ldr	fp, [pc, #220]	; 17170 <__assert_fail@plt+0x6218>
   17090:	ldr	r9, [r5]
   17094:	orr	r7, r7, #1
   17098:	ldr	r6, [r5, #4]
   1709c:	str	ip, [sp]
   170a0:	ldr	ip, [r4, #56]	; 0x38
   170a4:	mov	r1, r9
   170a8:	stmib	sp, {r7, fp}
   170ac:	ldr	lr, [r4, #60]	; 0x3c
   170b0:	mov	r0, r6
   170b4:	str	ip, [sp, #12]
   170b8:	str	lr, [sp, #16]
   170bc:	bl	13894 <__assert_fail@plt+0x293c>
   170c0:	cmp	r9, r0
   170c4:	bhi	1711c <__assert_fail@plt+0x61c4>
   170c8:	add	r9, r0, #1
   170cc:	movw	r3, #45424	; 0xb170
   170d0:	movt	r3, #2
   170d4:	cmp	r6, r3
   170d8:	str	r9, [r5]
   170dc:	beq	170e8 <__assert_fail@plt+0x6190>
   170e0:	mov	r0, r6
   170e4:	bl	13430 <__assert_fail@plt+0x24d8>
   170e8:	mov	r0, r9
   170ec:	bl	17980 <__assert_fail@plt+0x6a28>
   170f0:	ldr	r3, [r4, #16]
   170f4:	mov	r2, sl
   170f8:	mov	r1, r9
   170fc:	mov	r6, r0
   17100:	ldr	lr, [r4, #56]	; 0x38
   17104:	ldr	ip, [r4, #60]	; 0x3c
   17108:	str	r0, [r5, #4]
   1710c:	stm	sp, {r3, r7, fp, lr}
   17110:	mvn	r3, #0
   17114:	str	ip, [sp, #16]
   17118:	bl	13894 <__assert_fail@plt+0x293c>
   1711c:	ldr	r3, [sp, #28]
   17120:	mov	r0, r6
   17124:	str	r3, [r8]
   17128:	add	sp, sp, #44	; 0x2c
   1712c:	ldrd	r4, [sp]
   17130:	ldrd	r6, [sp, #8]
   17134:	ldrd	r8, [sp, #16]
   17138:	ldrd	sl, [sp, #24]
   1713c:	add	sp, sp, #32
   17140:	pop	{pc}		; (ldr pc, [sp], #4)
   17144:	mov	r0, #8
   17148:	mvn	r3, #-2147483648	; 0x80000000
   1714c:	add	r1, sp, #36	; 0x24
   17150:	str	r0, [sp]
   17154:	mov	r0, #0
   17158:	bl	17c24 <__assert_fail@plt+0x6ccc>
   1715c:	ldrd	r2, [r4, #8]
   17160:	mov	r5, r0
   17164:	str	r0, [r4]
   17168:	strd	r2, [r0]
   1716c:	b	17058 <__assert_fail@plt+0x6100>
   17170:	andeq	fp, r2, r8, lsl r1
   17174:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17178:	mov	r5, #0
   1717c:	movt	r5, #32752	; 0x7ff0
   17180:	mov	r4, r2
   17184:	strd	r6, [sp, #8]
   17188:	mov	r7, r1
   1718c:	str	r8, [sp, #16]
   17190:	mov	r8, r0
   17194:	str	lr, [sp, #20]
   17198:	mov	r2, r4
   1719c:	mov	r1, r7
   171a0:	mov	r0, r8
   171a4:	bl	10d00 <read@plt>
   171a8:	subs	r6, r0, #0
   171ac:	bge	171e0 <__assert_fail@plt+0x6288>
   171b0:	bl	10e8c <__errno_location@plt>
   171b4:	ldr	r3, [r0]
   171b8:	cmp	r3, #4
   171bc:	beq	17198 <__assert_fail@plt+0x6240>
   171c0:	cmp	r4, r5
   171c4:	mov	r4, r5
   171c8:	movls	r2, #0
   171cc:	movhi	r2, #1
   171d0:	cmp	r3, #22
   171d4:	movne	r2, #0
   171d8:	cmp	r2, #0
   171dc:	bne	17198 <__assert_fail@plt+0x6240>
   171e0:	mov	r0, r6
   171e4:	ldrd	r4, [sp]
   171e8:	ldrd	r6, [sp, #8]
   171ec:	ldr	r8, [sp, #16]
   171f0:	add	sp, sp, #20
   171f4:	pop	{pc}		; (ldr pc, [sp], #4)
   171f8:	cmp	r1, #0
   171fc:	strd	r4, [sp, #-16]!
   17200:	mov	ip, r3
   17204:	str	r6, [sp, #8]
   17208:	mov	r4, r0
   1720c:	str	lr, [sp, #12]
   17210:	sub	sp, sp, #32
   17214:	ldr	r5, [sp, #48]	; 0x30
   17218:	ldr	r6, [sp, #52]	; 0x34
   1721c:	beq	17360 <__assert_fail@plt+0x6408>
   17220:	mov	r3, r1
   17224:	mov	r1, #1
   17228:	stm	sp, {r2, ip}
   1722c:	movw	r2, #41472	; 0xa200
   17230:	movt	r2, #1
   17234:	bl	10ec8 <__fprintf_chk@plt>
   17238:	mov	r2, #5
   1723c:	movw	r1, #41492	; 0xa214
   17240:	movt	r1, #1
   17244:	mov	r0, #0
   17248:	bl	10d78 <dcgettext@plt>
   1724c:	movw	ip, #2022	; 0x7e6
   17250:	mov	r3, r0
   17254:	mov	r1, #1
   17258:	movw	r2, #42220	; 0xa4ec
   1725c:	movt	r2, #1
   17260:	mov	r0, r4
   17264:	str	ip, [sp]
   17268:	bl	10ec8 <__fprintf_chk@plt>
   1726c:	mov	r1, r4
   17270:	mov	r0, #10
   17274:	bl	10d6c <fputc_unlocked@plt>
   17278:	mov	r2, #5
   1727c:	movw	r1, #41496	; 0xa218
   17280:	movt	r1, #1
   17284:	mov	r0, #0
   17288:	bl	10d78 <dcgettext@plt>
   1728c:	mov	r2, r0
   17290:	mov	r1, #1
   17294:	movw	r3, #41668	; 0xa2c4
   17298:	movt	r3, #1
   1729c:	mov	r0, r4
   172a0:	bl	10ec8 <__fprintf_chk@plt>
   172a4:	mov	r1, r4
   172a8:	mov	r0, #10
   172ac:	bl	10d6c <fputc_unlocked@plt>
   172b0:	cmp	r6, #9
   172b4:	ldrls	pc, [pc, r6, lsl #2]
   172b8:	b	175cc <__assert_fail@plt+0x6674>
   172bc:	andeq	r7, r1, ip, asr #6
   172c0:	andeq	r7, r1, ip, ror r3
   172c4:			; <UNDEFINED> instruction: 0x000173b8
   172c8:	strdeq	r7, [r1], -r8
   172cc:	andeq	r7, r1, r0, asr #8
   172d0:	andeq	r7, r1, r8, ror r4
   172d4:	andeq	r7, r1, r0, asr #9
   172d8:	andeq	r7, r1, r4, lsl r5
   172dc:	andeq	r7, r1, ip, ror #10
   172e0:	andeq	r7, r1, r4, ror #5
   172e4:	movw	r1, #41972	; 0xa3f4
   172e8:	movt	r1, #1
   172ec:	mov	r2, #5
   172f0:	mov	r0, #0
   172f4:	bl	10d78 <dcgettext@plt>
   172f8:	ldr	lr, [r5, #4]
   172fc:	mov	r2, r0
   17300:	mov	r1, #1
   17304:	mov	r0, r4
   17308:	ldr	r3, [r5, #8]
   1730c:	ldr	ip, [r5, #32]
   17310:	str	lr, [sp]
   17314:	ldr	lr, [r5, #12]
   17318:	str	ip, [sp, #28]
   1731c:	ldr	ip, [r5, #28]
   17320:	str	r3, [sp, #4]
   17324:	ldr	r3, [r5, #16]
   17328:	str	lr, [sp, #8]
   1732c:	ldr	lr, [r5, #20]
   17330:	str	ip, [sp, #24]
   17334:	ldr	ip, [r5, #24]
   17338:	str	r3, [sp, #12]
   1733c:	ldr	r3, [r5]
   17340:	str	lr, [sp, #16]
   17344:	str	ip, [sp, #20]
   17348:	bl	10ec8 <__fprintf_chk@plt>
   1734c:	add	sp, sp, #32
   17350:	ldrd	r4, [sp]
   17354:	ldr	r6, [sp, #8]
   17358:	add	sp, sp, #12
   1735c:	pop	{pc}		; (ldr pc, [sp], #4)
   17360:	mov	r3, r2
   17364:	mov	r1, #1
   17368:	str	ip, [sp]
   1736c:	movw	r2, #41484	; 0xa20c
   17370:	movt	r2, #1
   17374:	bl	10ec8 <__fprintf_chk@plt>
   17378:	b	17238 <__assert_fail@plt+0x62e0>
   1737c:	mov	r2, #5
   17380:	movw	r1, #41704	; 0xa2e8
   17384:	movt	r1, #1
   17388:	mov	r0, #0
   1738c:	bl	10d78 <dcgettext@plt>
   17390:	ldr	r3, [r5]
   17394:	mov	r2, r0
   17398:	mov	r1, #1
   1739c:	mov	r0, r4
   173a0:	add	sp, sp, #32
   173a4:	ldrd	r4, [sp]
   173a8:	ldr	r6, [sp, #8]
   173ac:	ldr	lr, [sp, #12]
   173b0:	add	sp, sp, #16
   173b4:	b	10ec8 <__fprintf_chk@plt>
   173b8:	mov	r2, #5
   173bc:	movw	r1, #41720	; 0xa2f8
   173c0:	movt	r1, #1
   173c4:	mov	r0, #0
   173c8:	bl	10d78 <dcgettext@plt>
   173cc:	ldm	r5, {r3, ip}
   173d0:	mov	r2, r0
   173d4:	mov	r1, #1
   173d8:	mov	r0, r4
   173dc:	str	ip, [sp, #48]	; 0x30
   173e0:	add	sp, sp, #32
   173e4:	ldrd	r4, [sp]
   173e8:	ldr	r6, [sp, #8]
   173ec:	ldr	lr, [sp, #12]
   173f0:	add	sp, sp, #16
   173f4:	b	10ec8 <__fprintf_chk@plt>
   173f8:	mov	r2, #5
   173fc:	movw	r1, #41744	; 0xa310
   17400:	movt	r1, #1
   17404:	mov	r0, #0
   17408:	bl	10d78 <dcgettext@plt>
   1740c:	ldm	r5, {r3, lr}
   17410:	mov	r2, r0
   17414:	mov	r1, #1
   17418:	mov	r0, r4
   1741c:	ldr	ip, [r5, #8]
   17420:	str	lr, [sp, #48]	; 0x30
   17424:	str	ip, [sp, #52]	; 0x34
   17428:	add	sp, sp, #32
   1742c:	ldrd	r4, [sp]
   17430:	ldr	r6, [sp, #8]
   17434:	ldr	lr, [sp, #12]
   17438:	add	sp, sp, #16
   1743c:	b	10ec8 <__fprintf_chk@plt>
   17440:	mov	r2, #5
   17444:	movw	r1, #41772	; 0xa32c
   17448:	movt	r1, #1
   1744c:	mov	r0, #0
   17450:	bl	10d78 <dcgettext@plt>
   17454:	ldmib	r5, {r3, ip, lr}
   17458:	mov	r2, r0
   1745c:	mov	r1, #1
   17460:	mov	r0, r4
   17464:	str	r3, [sp]
   17468:	ldr	r3, [r5]
   1746c:	stmib	sp, {ip, lr}
   17470:	bl	10ec8 <__fprintf_chk@plt>
   17474:	b	1734c <__assert_fail@plt+0x63f4>
   17478:	mov	r2, #5
   1747c:	movw	r1, #41804	; 0xa34c
   17480:	movt	r1, #1
   17484:	mov	r0, #0
   17488:	bl	10d78 <dcgettext@plt>
   1748c:	ldmib	r5, {ip, lr}
   17490:	mov	r2, r0
   17494:	mov	r1, #1
   17498:	mov	r0, r4
   1749c:	ldr	r3, [r5, #16]
   174a0:	str	ip, [sp]
   174a4:	ldr	ip, [r5, #12]
   174a8:	str	r3, [sp, #12]
   174ac:	ldr	r3, [r5]
   174b0:	str	lr, [sp, #4]
   174b4:	str	ip, [sp, #8]
   174b8:	bl	10ec8 <__fprintf_chk@plt>
   174bc:	b	1734c <__assert_fail@plt+0x63f4>
   174c0:	mov	r2, #5
   174c4:	movw	r1, #41840	; 0xa370
   174c8:	movt	r1, #1
   174cc:	mov	r0, #0
   174d0:	bl	10d78 <dcgettext@plt>
   174d4:	ldr	lr, [r5, #4]
   174d8:	mov	r2, r0
   174dc:	mov	r1, #1
   174e0:	mov	r0, r4
   174e4:	ldr	r3, [r5, #8]
   174e8:	ldr	ip, [r5, #20]
   174ec:	str	lr, [sp]
   174f0:	ldr	lr, [r5, #12]
   174f4:	str	ip, [sp, #16]
   174f8:	ldr	ip, [r5, #16]
   174fc:	str	r3, [sp, #4]
   17500:	ldr	r3, [r5]
   17504:	str	lr, [sp, #8]
   17508:	str	ip, [sp, #12]
   1750c:	bl	10ec8 <__fprintf_chk@plt>
   17510:	b	1734c <__assert_fail@plt+0x63f4>
   17514:	mov	r2, #5
   17518:	movw	r1, #41880	; 0xa398
   1751c:	movt	r1, #1
   17520:	mov	r0, #0
   17524:	bl	10d78 <dcgettext@plt>
   17528:	ldmib	r5, {r3, ip}
   1752c:	mov	r2, r0
   17530:	mov	r1, #1
   17534:	mov	r0, r4
   17538:	ldr	lr, [r5, #24]
   1753c:	str	r3, [sp]
   17540:	ldr	r3, [r5, #12]
   17544:	str	lr, [sp, #20]
   17548:	ldr	lr, [r5, #20]
   1754c:	str	ip, [sp, #4]
   17550:	ldr	ip, [r5, #16]
   17554:	str	r3, [sp, #8]
   17558:	ldr	r3, [r5]
   1755c:	str	ip, [sp, #12]
   17560:	str	lr, [sp, #16]
   17564:	bl	10ec8 <__fprintf_chk@plt>
   17568:	b	1734c <__assert_fail@plt+0x63f4>
   1756c:	mov	r2, #5
   17570:	movw	r1, #41924	; 0xa3c4
   17574:	movt	r1, #1
   17578:	mov	r0, #0
   1757c:	bl	10d78 <dcgettext@plt>
   17580:	ldmib	r5, {ip, lr}
   17584:	mov	r2, r0
   17588:	mov	r1, #1
   1758c:	mov	r0, r4
   17590:	ldr	r3, [r5, #28]
   17594:	str	ip, [sp]
   17598:	ldr	ip, [r5, #12]
   1759c:	str	r3, [sp, #24]
   175a0:	ldr	r3, [r5, #24]
   175a4:	str	lr, [sp, #4]
   175a8:	ldr	lr, [r5, #16]
   175ac:	str	ip, [sp, #8]
   175b0:	ldr	ip, [r5, #20]
   175b4:	str	r3, [sp, #20]
   175b8:	ldr	r3, [r5]
   175bc:	str	lr, [sp, #12]
   175c0:	str	ip, [sp, #16]
   175c4:	bl	10ec8 <__fprintf_chk@plt>
   175c8:	b	1734c <__assert_fail@plt+0x63f4>
   175cc:	movw	r1, #42024	; 0xa428
   175d0:	movt	r1, #1
   175d4:	b	172ec <__assert_fail@plt+0x6394>
   175d8:	strd	r4, [sp, #-12]!
   175dc:	str	lr, [sp, #8]
   175e0:	sub	sp, sp, #12
   175e4:	ldr	r5, [sp, #24]
   175e8:	ldr	ip, [r5]
   175ec:	cmp	ip, #0
   175f0:	beq	1760c <__assert_fail@plt+0x66b4>
   175f4:	mov	lr, r5
   175f8:	mov	ip, #0
   175fc:	ldr	r4, [lr, #4]!
   17600:	add	ip, ip, #1
   17604:	cmp	r4, #0
   17608:	bne	175fc <__assert_fail@plt+0x66a4>
   1760c:	stm	sp, {r5, ip}
   17610:	bl	171f8 <__assert_fail@plt+0x62a0>
   17614:	add	sp, sp, #12
   17618:	ldrd	r4, [sp]
   1761c:	add	sp, sp, #8
   17620:	pop	{pc}		; (ldr pc, [sp], #4)
   17624:	push	{lr}		; (str lr, [sp, #-4]!)
   17628:	sub	sp, sp, #52	; 0x34
   1762c:	ldr	ip, [sp, #56]	; 0x38
   17630:	ldr	lr, [ip]
   17634:	cmp	lr, #0
   17638:	str	lr, [sp, #8]
   1763c:	beq	176d4 <__assert_fail@plt+0x677c>
   17640:	ldr	lr, [ip, #4]
   17644:	cmp	lr, #0
   17648:	str	lr, [sp, #12]
   1764c:	beq	176e8 <__assert_fail@plt+0x6790>
   17650:	ldr	lr, [ip, #8]
   17654:	cmp	lr, #0
   17658:	str	lr, [sp, #16]
   1765c:	beq	176f0 <__assert_fail@plt+0x6798>
   17660:	ldr	lr, [ip, #12]
   17664:	cmp	lr, #0
   17668:	str	lr, [sp, #20]
   1766c:	beq	176f8 <__assert_fail@plt+0x67a0>
   17670:	ldr	lr, [ip, #16]
   17674:	cmp	lr, #0
   17678:	str	lr, [sp, #24]
   1767c:	beq	17700 <__assert_fail@plt+0x67a8>
   17680:	ldr	lr, [ip, #20]
   17684:	cmp	lr, #0
   17688:	str	lr, [sp, #28]
   1768c:	beq	17708 <__assert_fail@plt+0x67b0>
   17690:	ldr	lr, [ip, #24]
   17694:	cmp	lr, #0
   17698:	str	lr, [sp, #32]
   1769c:	beq	17710 <__assert_fail@plt+0x67b8>
   176a0:	ldr	lr, [ip, #28]
   176a4:	cmp	lr, #0
   176a8:	str	lr, [sp, #36]	; 0x24
   176ac:	beq	17718 <__assert_fail@plt+0x67c0>
   176b0:	ldr	lr, [ip, #32]
   176b4:	cmp	lr, #0
   176b8:	str	lr, [sp, #40]	; 0x28
   176bc:	beq	17720 <__assert_fail@plt+0x67c8>
   176c0:	ldr	ip, [ip, #36]	; 0x24
   176c4:	cmp	ip, #0
   176c8:	str	ip, [sp, #44]	; 0x2c
   176cc:	movne	lr, #10
   176d0:	moveq	lr, #9
   176d4:	add	ip, sp, #8
   176d8:	stm	sp, {ip, lr}
   176dc:	bl	171f8 <__assert_fail@plt+0x62a0>
   176e0:	add	sp, sp, #52	; 0x34
   176e4:	pop	{pc}		; (ldr pc, [sp], #4)
   176e8:	mov	lr, #1
   176ec:	b	176d4 <__assert_fail@plt+0x677c>
   176f0:	mov	lr, #2
   176f4:	b	176d4 <__assert_fail@plt+0x677c>
   176f8:	mov	lr, #3
   176fc:	b	176d4 <__assert_fail@plt+0x677c>
   17700:	mov	lr, #4
   17704:	b	176d4 <__assert_fail@plt+0x677c>
   17708:	mov	lr, #5
   1770c:	b	176d4 <__assert_fail@plt+0x677c>
   17710:	mov	lr, #6
   17714:	b	176d4 <__assert_fail@plt+0x677c>
   17718:	mov	lr, #7
   1771c:	b	176d4 <__assert_fail@plt+0x677c>
   17720:	mov	lr, #8
   17724:	b	176d4 <__assert_fail@plt+0x677c>
   17728:	push	{r3}		; (str r3, [sp, #-4]!)
   1772c:	push	{lr}		; (str lr, [sp, #-4]!)
   17730:	sub	sp, sp, #56	; 0x38
   17734:	ldr	ip, [sp, #64]	; 0x40
   17738:	add	r3, sp, #64	; 0x40
   1773c:	str	r3, [sp, #12]
   17740:	cmp	ip, #0
   17744:	str	ip, [sp, #16]
   17748:	beq	177e0 <__assert_fail@plt+0x6888>
   1774c:	ldr	ip, [sp, #68]	; 0x44
   17750:	cmp	ip, #0
   17754:	str	ip, [sp, #20]
   17758:	beq	17804 <__assert_fail@plt+0x68ac>
   1775c:	ldr	ip, [sp, #72]	; 0x48
   17760:	cmp	ip, #0
   17764:	str	ip, [sp, #24]
   17768:	beq	1780c <__assert_fail@plt+0x68b4>
   1776c:	ldr	ip, [sp, #76]	; 0x4c
   17770:	cmp	ip, #0
   17774:	str	ip, [sp, #28]
   17778:	beq	17814 <__assert_fail@plt+0x68bc>
   1777c:	ldr	ip, [sp, #80]	; 0x50
   17780:	cmp	ip, #0
   17784:	str	ip, [sp, #32]
   17788:	beq	1781c <__assert_fail@plt+0x68c4>
   1778c:	ldr	ip, [sp, #84]	; 0x54
   17790:	cmp	ip, #0
   17794:	str	ip, [sp, #36]	; 0x24
   17798:	beq	17824 <__assert_fail@plt+0x68cc>
   1779c:	ldr	ip, [sp, #88]	; 0x58
   177a0:	cmp	ip, #0
   177a4:	str	ip, [sp, #40]	; 0x28
   177a8:	beq	1782c <__assert_fail@plt+0x68d4>
   177ac:	ldr	ip, [sp, #92]	; 0x5c
   177b0:	cmp	ip, #0
   177b4:	str	ip, [sp, #44]	; 0x2c
   177b8:	beq	17834 <__assert_fail@plt+0x68dc>
   177bc:	ldr	ip, [sp, #96]	; 0x60
   177c0:	cmp	ip, #0
   177c4:	str	ip, [sp, #48]	; 0x30
   177c8:	beq	1783c <__assert_fail@plt+0x68e4>
   177cc:	ldr	r3, [sp, #100]	; 0x64
   177d0:	cmp	r3, #0
   177d4:	str	r3, [sp, #52]	; 0x34
   177d8:	movne	ip, #10
   177dc:	moveq	ip, #9
   177e0:	ldr	r3, [sp, #60]	; 0x3c
   177e4:	add	lr, sp, #16
   177e8:	str	lr, [sp]
   177ec:	str	ip, [sp, #4]
   177f0:	bl	171f8 <__assert_fail@plt+0x62a0>
   177f4:	add	sp, sp, #56	; 0x38
   177f8:	pop	{lr}		; (ldr lr, [sp], #4)
   177fc:	add	sp, sp, #4
   17800:	bx	lr
   17804:	mov	ip, #1
   17808:	b	177e0 <__assert_fail@plt+0x6888>
   1780c:	mov	ip, #2
   17810:	b	177e0 <__assert_fail@plt+0x6888>
   17814:	mov	ip, #3
   17818:	b	177e0 <__assert_fail@plt+0x6888>
   1781c:	mov	ip, #4
   17820:	b	177e0 <__assert_fail@plt+0x6888>
   17824:	mov	ip, #5
   17828:	b	177e0 <__assert_fail@plt+0x6888>
   1782c:	mov	ip, #6
   17830:	b	177e0 <__assert_fail@plt+0x6888>
   17834:	mov	ip, #7
   17838:	b	177e0 <__assert_fail@plt+0x6888>
   1783c:	mov	ip, #8
   17840:	b	177e0 <__assert_fail@plt+0x6888>
   17844:	movw	r3, #45396	; 0xb154
   17848:	movt	r3, #2
   1784c:	str	r4, [sp, #-8]!
   17850:	mov	r0, #10
   17854:	ldr	r1, [r3]
   17858:	str	lr, [sp, #4]
   1785c:	bl	10d6c <fputc_unlocked@plt>
   17860:	mov	r2, #5
   17864:	movw	r1, #42084	; 0xa464
   17868:	movt	r1, #1
   1786c:	mov	r0, #0
   17870:	bl	10d78 <dcgettext@plt>
   17874:	mov	r1, r0
   17878:	movw	r2, #42104	; 0xa478
   1787c:	movt	r2, #1
   17880:	mov	r0, #1
   17884:	bl	10eb0 <__printf_chk@plt>
   17888:	mov	r2, #5
   1788c:	movw	r1, #42128	; 0xa490
   17890:	movt	r1, #1
   17894:	mov	r0, #0
   17898:	bl	10d78 <dcgettext@plt>
   1789c:	mov	r1, r0
   178a0:	movw	r3, #40500	; 0x9e34
   178a4:	movt	r3, #1
   178a8:	movw	r2, #40540	; 0x9e5c
   178ac:	movt	r2, #1
   178b0:	mov	r0, #1
   178b4:	bl	10eb0 <__printf_chk@plt>
   178b8:	mov	r2, #5
   178bc:	movw	r1, #42148	; 0xa4a4
   178c0:	movt	r1, #1
   178c4:	mov	r0, #0
   178c8:	bl	10d78 <dcgettext@plt>
   178cc:	mov	r1, r0
   178d0:	movw	r2, #42188	; 0xa4cc
   178d4:	movt	r2, #1
   178d8:	mov	r0, #1
   178dc:	ldr	r4, [sp]
   178e0:	ldr	lr, [sp, #4]
   178e4:	add	sp, sp, #8
   178e8:	b	10eb0 <__printf_chk@plt>
   178ec:	strd	r4, [sp, #-16]!
   178f0:	mov	r4, r0
   178f4:	mov	r5, r2
   178f8:	str	r6, [sp, #8]
   178fc:	mov	r6, r1
   17900:	str	lr, [sp, #12]
   17904:	bl	19348 <__assert_fail@plt+0x83f0>
   17908:	cmp	r0, #0
   1790c:	beq	17920 <__assert_fail@plt+0x69c8>
   17910:	ldrd	r4, [sp]
   17914:	ldr	r6, [sp, #8]
   17918:	add	sp, sp, #12
   1791c:	pop	{pc}		; (ldr pc, [sp], #4)
   17920:	cmp	r4, #0
   17924:	beq	17934 <__assert_fail@plt+0x69dc>
   17928:	cmp	r6, #0
   1792c:	cmpne	r5, #0
   17930:	beq	17910 <__assert_fail@plt+0x69b8>
   17934:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17938:	str	r4, [sp, #-8]!
   1793c:	str	lr, [sp, #4]
   17940:	bl	18f8c <__assert_fail@plt+0x8034>
   17944:	cmp	r0, #0
   17948:	beq	17958 <__assert_fail@plt+0x6a00>
   1794c:	ldr	r4, [sp]
   17950:	add	sp, sp, #4
   17954:	pop	{pc}		; (ldr pc, [sp], #4)
   17958:	bl	17ef0 <__assert_fail@plt+0x6f98>
   1795c:	str	r4, [sp, #-8]!
   17960:	str	lr, [sp, #4]
   17964:	bl	18f8c <__assert_fail@plt+0x8034>
   17968:	cmp	r0, #0
   1796c:	beq	1797c <__assert_fail@plt+0x6a24>
   17970:	ldr	r4, [sp]
   17974:	add	sp, sp, #4
   17978:	pop	{pc}		; (ldr pc, [sp], #4)
   1797c:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17980:	str	r4, [sp, #-8]!
   17984:	str	lr, [sp, #4]
   17988:	bl	18f8c <__assert_fail@plt+0x8034>
   1798c:	cmp	r0, #0
   17990:	beq	179a0 <__assert_fail@plt+0x6a48>
   17994:	ldr	r4, [sp]
   17998:	add	sp, sp, #4
   1799c:	pop	{pc}		; (ldr pc, [sp], #4)
   179a0:	bl	17ef0 <__assert_fail@plt+0x6f98>
   179a4:	strd	r4, [sp, #-16]!
   179a8:	mov	r5, r0
   179ac:	mov	r4, r1
   179b0:	str	r6, [sp, #8]
   179b4:	str	lr, [sp, #12]
   179b8:	bl	18fc8 <__assert_fail@plt+0x8070>
   179bc:	cmp	r0, #0
   179c0:	beq	179d4 <__assert_fail@plt+0x6a7c>
   179c4:	ldrd	r4, [sp]
   179c8:	ldr	r6, [sp, #8]
   179cc:	add	sp, sp, #12
   179d0:	pop	{pc}		; (ldr pc, [sp], #4)
   179d4:	adds	r4, r4, #0
   179d8:	movne	r4, #1
   179dc:	cmp	r5, #0
   179e0:	moveq	r4, #1
   179e4:	cmp	r4, #0
   179e8:	beq	179c4 <__assert_fail@plt+0x6a6c>
   179ec:	bl	17ef0 <__assert_fail@plt+0x6f98>
   179f0:	cmp	r1, #0
   179f4:	orreq	r1, r1, #1
   179f8:	str	r4, [sp, #-8]!
   179fc:	str	lr, [sp, #4]
   17a00:	bl	18fc8 <__assert_fail@plt+0x8070>
   17a04:	cmp	r0, #0
   17a08:	beq	17a18 <__assert_fail@plt+0x6ac0>
   17a0c:	ldr	r4, [sp]
   17a10:	add	sp, sp, #4
   17a14:	pop	{pc}		; (ldr pc, [sp], #4)
   17a18:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17a1c:	strd	r4, [sp, #-16]!
   17a20:	mov	r4, r0
   17a24:	mov	r5, r2
   17a28:	str	r6, [sp, #8]
   17a2c:	mov	r6, r1
   17a30:	str	lr, [sp, #12]
   17a34:	bl	19348 <__assert_fail@plt+0x83f0>
   17a38:	cmp	r0, #0
   17a3c:	beq	17a50 <__assert_fail@plt+0x6af8>
   17a40:	ldrd	r4, [sp]
   17a44:	ldr	r6, [sp, #8]
   17a48:	add	sp, sp, #12
   17a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a50:	cmp	r4, #0
   17a54:	beq	17a64 <__assert_fail@plt+0x6b0c>
   17a58:	cmp	r6, #0
   17a5c:	cmpne	r5, #0
   17a60:	beq	17a40 <__assert_fail@plt+0x6ae8>
   17a64:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17a68:	cmp	r2, #0
   17a6c:	cmpne	r1, #0
   17a70:	str	r4, [sp, #-8]!
   17a74:	moveq	r2, #1
   17a78:	str	lr, [sp, #4]
   17a7c:	moveq	r1, r2
   17a80:	bl	19348 <__assert_fail@plt+0x83f0>
   17a84:	cmp	r0, #0
   17a88:	beq	17a98 <__assert_fail@plt+0x6b40>
   17a8c:	ldr	r4, [sp]
   17a90:	add	sp, sp, #4
   17a94:	pop	{pc}		; (ldr pc, [sp], #4)
   17a98:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17a9c:	mov	r2, r1
   17aa0:	mov	r1, r0
   17aa4:	str	r4, [sp, #-8]!
   17aa8:	mov	r0, #0
   17aac:	str	lr, [sp, #4]
   17ab0:	bl	19348 <__assert_fail@plt+0x83f0>
   17ab4:	cmp	r0, #0
   17ab8:	beq	17ac8 <__assert_fail@plt+0x6b70>
   17abc:	ldr	r4, [sp]
   17ac0:	add	sp, sp, #4
   17ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ac8:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17acc:	cmp	r1, #0
   17ad0:	cmpne	r0, #0
   17ad4:	str	r4, [sp, #-8]!
   17ad8:	moveq	r2, #1
   17adc:	movne	r2, r1
   17ae0:	str	lr, [sp, #4]
   17ae4:	movne	r1, r0
   17ae8:	moveq	r1, r2
   17aec:	mov	r0, #0
   17af0:	bl	19348 <__assert_fail@plt+0x83f0>
   17af4:	cmp	r0, #0
   17af8:	beq	17b08 <__assert_fail@plt+0x6bb0>
   17afc:	ldr	r4, [sp]
   17b00:	add	sp, sp, #4
   17b04:	pop	{pc}		; (ldr pc, [sp], #4)
   17b08:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17b0c:	cmp	r0, #0
   17b10:	strd	r4, [sp, #-16]!
   17b14:	mov	r5, r1
   17b18:	ldr	r4, [r1]
   17b1c:	str	r6, [sp, #8]
   17b20:	str	lr, [sp, #12]
   17b24:	beq	17b6c <__assert_fail@plt+0x6c14>
   17b28:	lsr	r3, r4, #1
   17b2c:	add	r3, r3, #1
   17b30:	adds	r4, r4, r3
   17b34:	bcs	17b68 <__assert_fail@plt+0x6c10>
   17b38:	mov	r2, #1
   17b3c:	mov	r1, r4
   17b40:	bl	19348 <__assert_fail@plt+0x83f0>
   17b44:	cmp	r0, #0
   17b48:	beq	17b60 <__assert_fail@plt+0x6c08>
   17b4c:	ldr	r6, [sp, #8]
   17b50:	str	r4, [r5]
   17b54:	ldrd	r4, [sp]
   17b58:	add	sp, sp, #12
   17b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b60:	cmp	r4, #0
   17b64:	beq	17b4c <__assert_fail@plt+0x6bf4>
   17b68:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17b6c:	cmp	r4, #0
   17b70:	mov	r2, #1
   17b74:	moveq	r4, #64	; 0x40
   17b78:	mov	r1, r4
   17b7c:	bl	19348 <__assert_fail@plt+0x83f0>
   17b80:	cmp	r0, #0
   17b84:	bne	17b4c <__assert_fail@plt+0x6bf4>
   17b88:	b	17b68 <__assert_fail@plt+0x6c10>
   17b8c:	cmp	r0, #0
   17b90:	strd	r4, [sp, #-16]!
   17b94:	mov	r5, r1
   17b98:	ldr	r4, [r1]
   17b9c:	str	r6, [sp, #8]
   17ba0:	mov	r6, r2
   17ba4:	str	lr, [sp, #12]
   17ba8:	beq	17bf0 <__assert_fail@plt+0x6c98>
   17bac:	lsr	r3, r4, #1
   17bb0:	add	r3, r3, #1
   17bb4:	adds	r4, r4, r3
   17bb8:	bcs	17bec <__assert_fail@plt+0x6c94>
   17bbc:	mov	r1, r4
   17bc0:	bl	19348 <__assert_fail@plt+0x83f0>
   17bc4:	cmp	r0, #0
   17bc8:	beq	17be0 <__assert_fail@plt+0x6c88>
   17bcc:	ldr	r6, [sp, #8]
   17bd0:	str	r4, [r5]
   17bd4:	ldrd	r4, [sp]
   17bd8:	add	sp, sp, #12
   17bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   17be0:	cmp	r4, #0
   17be4:	cmpne	r6, #0
   17be8:	beq	17bcc <__assert_fail@plt+0x6c74>
   17bec:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17bf0:	cmp	r4, #0
   17bf4:	bne	17c08 <__assert_fail@plt+0x6cb0>
   17bf8:	mov	r4, #64	; 0x40
   17bfc:	udiv	r4, r4, r2
   17c00:	cmp	r2, #64	; 0x40
   17c04:	addhi	r4, r4, #1
   17c08:	mov	r2, r6
   17c0c:	mov	r1, r4
   17c10:	mov	r0, #0
   17c14:	bl	19348 <__assert_fail@plt+0x83f0>
   17c18:	cmp	r0, #0
   17c1c:	bne	17bcc <__assert_fail@plt+0x6c74>
   17c20:	b	17bec <__assert_fail@plt+0x6c94>
   17c24:	ldr	ip, [r1]
   17c28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17c2c:	strd	r6, [sp, #8]
   17c30:	mov	r7, r1
   17c34:	mov	r6, r0
   17c38:	str	r8, [sp, #16]
   17c3c:	mvn	r8, r3
   17c40:	lsr	r8, r8, #31
   17c44:	str	lr, [sp, #20]
   17c48:	asr	r1, ip, #1
   17c4c:	ldr	lr, [sp, #24]
   17c50:	adds	r4, ip, r1
   17c54:	mvnvs	r4, #-2147483648	; 0x80000000
   17c58:	cmp	r3, r4
   17c5c:	movge	r1, #0
   17c60:	andlt	r1, r8, #1
   17c64:	cmp	r1, #0
   17c68:	movne	r4, r3
   17c6c:	smull	r0, r1, r4, lr
   17c70:	cmp	r1, r0, asr #31
   17c74:	bne	17d24 <__assert_fail@plt+0x6dcc>
   17c78:	cmp	r0, #63	; 0x3f
   17c7c:	mov	r5, r0
   17c80:	ble	17cf0 <__assert_fail@plt+0x6d98>
   17c84:	cmp	r6, #0
   17c88:	sub	r1, r4, ip
   17c8c:	streq	r6, [r7]
   17c90:	cmp	r1, r2
   17c94:	bge	17cc4 <__assert_fail@plt+0x6d6c>
   17c98:	adds	r4, ip, r2
   17c9c:	bvs	17d20 <__assert_fail@plt+0x6dc8>
   17ca0:	cmp	r4, r3
   17ca4:	movle	r3, #0
   17ca8:	andgt	r3, r8, #1
   17cac:	cmp	r3, #0
   17cb0:	bne	17d20 <__assert_fail@plt+0x6dc8>
   17cb4:	smull	r0, r1, r4, lr
   17cb8:	cmp	r1, r0, asr #31
   17cbc:	mov	r5, r0
   17cc0:	bne	17d20 <__assert_fail@plt+0x6dc8>
   17cc4:	mov	r1, r5
   17cc8:	mov	r0, r6
   17ccc:	bl	18fc8 <__assert_fail@plt+0x8070>
   17cd0:	cmp	r0, #0
   17cd4:	beq	17d04 <__assert_fail@plt+0x6dac>
   17cd8:	ldr	r8, [sp, #16]
   17cdc:	str	r4, [r7]
   17ce0:	ldrd	r4, [sp]
   17ce4:	ldrd	r6, [sp, #8]
   17ce8:	add	sp, sp, #20
   17cec:	pop	{pc}		; (ldr pc, [sp], #4)
   17cf0:	mov	r0, #64	; 0x40
   17cf4:	sdiv	r4, r0, lr
   17cf8:	mls	r5, lr, r4, r0
   17cfc:	sub	r5, r0, r5
   17d00:	b	17c84 <__assert_fail@plt+0x6d2c>
   17d04:	adds	r5, r5, #0
   17d08:	movne	r5, #1
   17d0c:	cmp	r6, #0
   17d10:	movne	r6, r5
   17d14:	moveq	r6, #1
   17d18:	cmp	r6, #0
   17d1c:	beq	17cd8 <__assert_fail@plt+0x6d80>
   17d20:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17d24:	mvn	r0, #-2147483648	; 0x80000000
   17d28:	b	17cf4 <__assert_fail@plt+0x6d9c>
   17d2c:	mov	r1, #1
   17d30:	str	r4, [sp, #-8]!
   17d34:	str	lr, [sp, #4]
   17d38:	bl	18f18 <__assert_fail@plt+0x7fc0>
   17d3c:	cmp	r0, #0
   17d40:	beq	17d50 <__assert_fail@plt+0x6df8>
   17d44:	ldr	r4, [sp]
   17d48:	add	sp, sp, #4
   17d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d50:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17d54:	mov	r1, #1
   17d58:	str	r4, [sp, #-8]!
   17d5c:	str	lr, [sp, #4]
   17d60:	bl	18f18 <__assert_fail@plt+0x7fc0>
   17d64:	cmp	r0, #0
   17d68:	beq	17d78 <__assert_fail@plt+0x6e20>
   17d6c:	ldr	r4, [sp]
   17d70:	add	sp, sp, #4
   17d74:	pop	{pc}		; (ldr pc, [sp], #4)
   17d78:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17d7c:	str	r4, [sp, #-8]!
   17d80:	str	lr, [sp, #4]
   17d84:	bl	18f18 <__assert_fail@plt+0x7fc0>
   17d88:	cmp	r0, #0
   17d8c:	beq	17d9c <__assert_fail@plt+0x6e44>
   17d90:	ldr	r4, [sp]
   17d94:	add	sp, sp, #4
   17d98:	pop	{pc}		; (ldr pc, [sp], #4)
   17d9c:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17da0:	str	r4, [sp, #-8]!
   17da4:	str	lr, [sp, #4]
   17da8:	bl	18f18 <__assert_fail@plt+0x7fc0>
   17dac:	cmp	r0, #0
   17db0:	beq	17dc0 <__assert_fail@plt+0x6e68>
   17db4:	ldr	r4, [sp]
   17db8:	add	sp, sp, #4
   17dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   17dc0:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17dc4:	strd	r4, [sp, #-16]!
   17dc8:	mov	r4, r1
   17dcc:	str	r6, [sp, #8]
   17dd0:	mov	r6, r0
   17dd4:	mov	r0, r1
   17dd8:	str	lr, [sp, #12]
   17ddc:	bl	18f8c <__assert_fail@plt+0x8034>
   17de0:	subs	r5, r0, #0
   17de4:	beq	17e08 <__assert_fail@plt+0x6eb0>
   17de8:	mov	r2, r4
   17dec:	mov	r1, r6
   17df0:	bl	10d30 <memcpy@plt>
   17df4:	mov	r0, r5
   17df8:	ldrd	r4, [sp]
   17dfc:	ldr	r6, [sp, #8]
   17e00:	add	sp, sp, #12
   17e04:	pop	{pc}		; (ldr pc, [sp], #4)
   17e08:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17e0c:	strd	r4, [sp, #-16]!
   17e10:	mov	r4, r1
   17e14:	str	r6, [sp, #8]
   17e18:	mov	r6, r0
   17e1c:	mov	r0, r1
   17e20:	str	lr, [sp, #12]
   17e24:	bl	18f8c <__assert_fail@plt+0x8034>
   17e28:	subs	r5, r0, #0
   17e2c:	beq	17e50 <__assert_fail@plt+0x6ef8>
   17e30:	mov	r2, r4
   17e34:	mov	r1, r6
   17e38:	bl	10d30 <memcpy@plt>
   17e3c:	mov	r0, r5
   17e40:	ldrd	r4, [sp]
   17e44:	ldr	r6, [sp, #8]
   17e48:	add	sp, sp, #12
   17e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e50:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17e54:	strd	r4, [sp, #-16]!
   17e58:	mov	r4, r1
   17e5c:	str	r6, [sp, #8]
   17e60:	mov	r6, r0
   17e64:	add	r0, r1, #1
   17e68:	str	lr, [sp, #12]
   17e6c:	bl	18f8c <__assert_fail@plt+0x8034>
   17e70:	subs	r5, r0, #0
   17e74:	beq	17ea0 <__assert_fail@plt+0x6f48>
   17e78:	mov	r3, #0
   17e7c:	mov	r1, r6
   17e80:	mov	r2, r4
   17e84:	strb	r3, [r5, r4]
   17e88:	bl	10d30 <memcpy@plt>
   17e8c:	mov	r0, r5
   17e90:	ldrd	r4, [sp]
   17e94:	ldr	r6, [sp, #8]
   17e98:	add	sp, sp, #12
   17e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   17ea0:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17ea4:	strd	r4, [sp, #-16]!
   17ea8:	str	r6, [sp, #8]
   17eac:	mov	r6, r0
   17eb0:	str	lr, [sp, #12]
   17eb4:	bl	10e68 <strlen@plt>
   17eb8:	add	r4, r0, #1
   17ebc:	mov	r0, r4
   17ec0:	bl	18f8c <__assert_fail@plt+0x8034>
   17ec4:	subs	r5, r0, #0
   17ec8:	beq	17eec <__assert_fail@plt+0x6f94>
   17ecc:	mov	r2, r4
   17ed0:	mov	r1, r6
   17ed4:	bl	10d30 <memcpy@plt>
   17ed8:	mov	r0, r5
   17edc:	ldrd	r4, [sp]
   17ee0:	ldr	r6, [sp, #8]
   17ee4:	add	sp, sp, #12
   17ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   17eec:	bl	17ef0 <__assert_fail@plt+0x6f98>
   17ef0:	movw	r3, #45308	; 0xb0fc
   17ef4:	movt	r3, #2
   17ef8:	str	r4, [sp, #-8]!
   17efc:	ldr	r4, [r3]
   17f00:	mov	r2, #5
   17f04:	movw	r1, #42268	; 0xa51c
   17f08:	movt	r1, #1
   17f0c:	mov	r0, #0
   17f10:	str	lr, [sp, #4]
   17f14:	bl	10d78 <dcgettext@plt>
   17f18:	mov	r3, r0
   17f1c:	movw	r2, #40828	; 0x9f7c
   17f20:	movt	r2, #1
   17f24:	mov	r1, #0
   17f28:	mov	r0, r4
   17f2c:	bl	10dfc <error@plt>
   17f30:	bl	10f40 <abort@plt>
   17f34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17f38:	strd	r6, [sp, #8]
   17f3c:	mov	r6, r2
   17f40:	mov	r7, r3
   17f44:	str	r8, [sp, #16]
   17f48:	mov	r2, r1
   17f4c:	mov	r1, #0
   17f50:	str	lr, [sp, #20]
   17f54:	sub	sp, sp, #16
   17f58:	mov	r8, r0
   17f5c:	ldr	ip, [sp, #48]	; 0x30
   17f60:	add	r3, sp, #8
   17f64:	str	ip, [sp]
   17f68:	bl	181bc <__assert_fail@plt+0x7264>
   17f6c:	subs	r4, r0, #0
   17f70:	bne	17fc0 <__assert_fail@plt+0x7068>
   17f74:	ldrd	r4, [sp, #8]
   17f78:	ldrd	r0, [sp, #40]	; 0x28
   17f7c:	cmp	r5, r7
   17f80:	cmpeq	r4, r6
   17f84:	movcc	r3, #1
   17f88:	movcs	r3, #0
   17f8c:	cmp	r5, r1
   17f90:	cmpeq	r4, r0
   17f94:	orrhi	r3, r3, #1
   17f98:	cmp	r3, #0
   17f9c:	bne	18040 <__assert_fail@plt+0x70e8>
   17fa0:	mov	r0, r4
   17fa4:	mov	r1, r5
   17fa8:	add	sp, sp, #16
   17fac:	ldrd	r4, [sp]
   17fb0:	ldrd	r6, [sp, #8]
   17fb4:	ldr	r8, [sp, #16]
   17fb8:	add	sp, sp, #20
   17fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   17fc0:	bl	10e8c <__errno_location@plt>
   17fc4:	cmp	r4, #1
   17fc8:	moveq	r3, #75	; 0x4b
   17fcc:	moveq	r4, r3
   17fd0:	streq	r3, [r0]
   17fd4:	beq	18028 <__assert_fail@plt+0x70d0>
   17fd8:	cmp	r4, #3
   17fdc:	beq	1801c <__assert_fail@plt+0x70c4>
   17fe0:	ldr	r3, [sp, #56]	; 0x38
   17fe4:	ldr	r4, [r0]
   17fe8:	cmp	r3, #0
   17fec:	beq	18034 <__assert_fail@plt+0x70dc>
   17ff0:	cmp	r4, #22
   17ff4:	moveq	r4, #0
   17ff8:	mov	r0, r8
   17ffc:	bl	16fe0 <__assert_fail@plt+0x6088>
   18000:	movw	r2, #40824	; 0x9f78
   18004:	movt	r2, #1
   18008:	str	r0, [sp]
   1800c:	mov	r1, r4
   18010:	ldr	r3, [sp, #52]	; 0x34
   18014:	ldr	r0, [sp, #56]	; 0x38
   18018:	bl	10dfc <error@plt>
   1801c:	mov	r3, #0
   18020:	mov	r4, r3
   18024:	str	r3, [r0]
   18028:	ldr	r3, [sp, #56]	; 0x38
   1802c:	cmp	r3, #0
   18030:	bne	17ff8 <__assert_fail@plt+0x70a0>
   18034:	mov	r3, #1
   18038:	str	r3, [sp, #56]	; 0x38
   1803c:	b	17ff0 <__assert_fail@plt+0x7098>
   18040:	bl	10e8c <__errno_location@plt>
   18044:	mov	r3, #0
   18048:	mvn	r2, #-1073741824	; 0xc0000000
   1804c:	cmp	r5, r3
   18050:	cmpeq	r4, r2
   18054:	movhi	r3, #75	; 0x4b
   18058:	movls	r3, #34	; 0x22
   1805c:	mov	r4, r3
   18060:	str	r3, [r0]
   18064:	ldr	r3, [sp, #56]	; 0x38
   18068:	cmp	r3, #0
   1806c:	moveq	r3, #1
   18070:	str	r3, [sp, #56]	; 0x38
   18074:	b	17ff8 <__assert_fail@plt+0x70a0>
   18078:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1807c:	mov	r1, #0
   18080:	strd	r6, [sp, #8]
   18084:	mov	r6, r2
   18088:	mov	r7, r3
   1808c:	str	r8, [sp, #16]
   18090:	mov	r2, #10
   18094:	mov	r8, r0
   18098:	str	lr, [sp, #20]
   1809c:	sub	sp, sp, #16
   180a0:	ldr	ip, [sp, #48]	; 0x30
   180a4:	add	r3, sp, #8
   180a8:	str	ip, [sp]
   180ac:	bl	181bc <__assert_fail@plt+0x7264>
   180b0:	subs	r4, r0, #0
   180b4:	bne	18104 <__assert_fail@plt+0x71ac>
   180b8:	ldrd	r4, [sp, #8]
   180bc:	ldrd	r0, [sp, #40]	; 0x28
   180c0:	cmp	r7, r5
   180c4:	cmpeq	r6, r4
   180c8:	movhi	r3, #1
   180cc:	movls	r3, #0
   180d0:	cmp	r1, r5
   180d4:	cmpeq	r0, r4
   180d8:	orrcc	r3, r3, #1
   180dc:	cmp	r3, #0
   180e0:	bne	18184 <__assert_fail@plt+0x722c>
   180e4:	mov	r0, r4
   180e8:	mov	r1, r5
   180ec:	add	sp, sp, #16
   180f0:	ldrd	r4, [sp]
   180f4:	ldrd	r6, [sp, #8]
   180f8:	ldr	r8, [sp, #16]
   180fc:	add	sp, sp, #20
   18100:	pop	{pc}		; (ldr pc, [sp], #4)
   18104:	bl	10e8c <__errno_location@plt>
   18108:	cmp	r4, #1
   1810c:	moveq	r3, #75	; 0x4b
   18110:	moveq	r4, r3
   18114:	streq	r3, [r0]
   18118:	beq	18174 <__assert_fail@plt+0x721c>
   1811c:	cmp	r4, #3
   18120:	beq	18168 <__assert_fail@plt+0x7210>
   18124:	ldr	r3, [sp, #56]	; 0x38
   18128:	ldr	r4, [r0]
   1812c:	cmp	r3, #0
   18130:	bne	1813c <__assert_fail@plt+0x71e4>
   18134:	mov	r3, #1
   18138:	str	r3, [sp, #56]	; 0x38
   1813c:	cmp	r4, #22
   18140:	moveq	r4, #0
   18144:	mov	r0, r8
   18148:	bl	16fe0 <__assert_fail@plt+0x6088>
   1814c:	movw	r2, #40824	; 0x9f78
   18150:	movt	r2, #1
   18154:	str	r0, [sp]
   18158:	mov	r1, r4
   1815c:	ldr	r3, [sp, #52]	; 0x34
   18160:	ldr	r0, [sp, #56]	; 0x38
   18164:	bl	10dfc <error@plt>
   18168:	mov	r3, #0
   1816c:	mov	r4, r3
   18170:	str	r3, [r0]
   18174:	ldr	r3, [sp, #56]	; 0x38
   18178:	cmp	r3, #0
   1817c:	bne	18144 <__assert_fail@plt+0x71ec>
   18180:	b	18134 <__assert_fail@plt+0x71dc>
   18184:	bl	10e8c <__errno_location@plt>
   18188:	mov	r3, #0
   1818c:	mvn	r2, #-1073741824	; 0xc0000000
   18190:	cmp	r5, r3
   18194:	cmpeq	r4, r2
   18198:	movhi	r3, #75	; 0x4b
   1819c:	movls	r3, #34	; 0x22
   181a0:	mov	r4, r3
   181a4:	str	r3, [r0]
   181a8:	ldr	r3, [sp, #56]	; 0x38
   181ac:	cmp	r3, #0
   181b0:	moveq	r3, #1
   181b4:	str	r3, [sp, #56]	; 0x38
   181b8:	b	18144 <__assert_fail@plt+0x71ec>
   181bc:	cmp	r2, #36	; 0x24
   181c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   181c4:	strd	r6, [sp, #8]
   181c8:	strd	r8, [sp, #16]
   181cc:	strd	sl, [sp, #24]
   181d0:	str	lr, [sp, #32]
   181d4:	sub	sp, sp, #36	; 0x24
   181d8:	bhi	18e50 <__assert_fail@plt+0x7ef8>
   181dc:	cmp	r1, #0
   181e0:	mov	r6, r2
   181e4:	mov	r5, r1
   181e8:	mov	sl, r0
   181ec:	addeq	r5, sp, #28
   181f0:	mov	r9, r3
   181f4:	bl	10e8c <__errno_location@plt>
   181f8:	mov	r3, #0
   181fc:	mov	fp, r0
   18200:	str	r3, [r0]
   18204:	ldrb	r4, [sl]
   18208:	bl	10e50 <__ctype_b_loc@plt>
   1820c:	ldr	r2, [r0]
   18210:	lsl	r3, r4, #1
   18214:	ldrh	r3, [r2, r3]
   18218:	tst	r3, #8192	; 0x2000
   1821c:	beq	18238 <__assert_fail@plt+0x72e0>
   18220:	mov	r3, sl
   18224:	ldrb	r4, [r3, #1]!
   18228:	lsl	r1, r4, #1
   1822c:	ldrh	r1, [r2, r1]
   18230:	tst	r1, #8192	; 0x2000
   18234:	bne	18224 <__assert_fail@plt+0x72cc>
   18238:	cmp	r4, #45	; 0x2d
   1823c:	beq	182d8 <__assert_fail@plt+0x7380>
   18240:	mov	r2, r6
   18244:	mov	r3, #0
   18248:	mov	r1, r5
   1824c:	mov	r0, sl
   18250:	bl	10d3c <__strtoull_internal@plt>
   18254:	ldr	r8, [r5]
   18258:	mov	r6, r0
   1825c:	mov	r7, r1
   18260:	cmp	r8, sl
   18264:	beq	182c0 <__assert_fail@plt+0x7368>
   18268:	ldr	r4, [fp]
   1826c:	cmp	r4, #0
   18270:	bne	182b0 <__assert_fail@plt+0x7358>
   18274:	ldr	r3, [sp, #72]	; 0x48
   18278:	cmp	r3, #0
   1827c:	beq	1828c <__assert_fail@plt+0x7334>
   18280:	ldrb	sl, [r8]
   18284:	cmp	sl, #0
   18288:	bne	18644 <__assert_fail@plt+0x76ec>
   1828c:	strd	r6, [r9]
   18290:	mov	r0, r4
   18294:	add	sp, sp, #36	; 0x24
   18298:	ldrd	r4, [sp]
   1829c:	ldrd	r6, [sp, #8]
   182a0:	ldrd	r8, [sp, #16]
   182a4:	ldrd	sl, [sp, #24]
   182a8:	add	sp, sp, #32
   182ac:	pop	{pc}		; (ldr pc, [sp], #4)
   182b0:	cmp	r4, #34	; 0x22
   182b4:	bne	182d8 <__assert_fail@plt+0x7380>
   182b8:	mov	r4, #1
   182bc:	b	18274 <__assert_fail@plt+0x731c>
   182c0:	ldr	r3, [sp, #72]	; 0x48
   182c4:	cmp	r3, #0
   182c8:	beq	182d8 <__assert_fail@plt+0x7380>
   182cc:	ldrb	sl, [sl]
   182d0:	cmp	sl, #0
   182d4:	bne	182e0 <__assert_fail@plt+0x7388>
   182d8:	mov	r4, #4
   182dc:	b	18290 <__assert_fail@plt+0x7338>
   182e0:	mov	r1, sl
   182e4:	mov	r0, r3
   182e8:	bl	10e74 <strchr@plt>
   182ec:	cmp	r0, #0
   182f0:	movne	r4, #0
   182f4:	movne	r6, #1
   182f8:	movne	r7, r4
   182fc:	beq	182d8 <__assert_fail@plt+0x7380>
   18300:	sub	r3, sl, #69	; 0x45
   18304:	cmp	r3, #47	; 0x2f
   18308:	ldrls	pc, [pc, r3, lsl #2]
   1830c:	b	18414 <__assert_fail@plt+0x74bc>
   18310:	ldrdeq	r8, [r1], -r0
   18314:	andeq	r8, r1, r4, lsl r4
   18318:	ldrdeq	r8, [r1], -r0
   1831c:	andeq	r8, r1, r4, lsl r4
   18320:	andeq	r8, r1, r4, lsl r4
   18324:	andeq	r8, r1, r4, lsl r4
   18328:	ldrdeq	r8, [r1], -r0
   1832c:	andeq	r8, r1, r4, lsl r4
   18330:	ldrdeq	r8, [r1], -r0
   18334:	andeq	r8, r1, r4, lsl r4
   18338:	andeq	r8, r1, r4, lsl r4
   1833c:	ldrdeq	r8, [r1], -r0
   18340:	andeq	r8, r1, r4, lsl r4
   18344:	andeq	r8, r1, r4, lsl r4
   18348:	andeq	r8, r1, r4, lsl r4
   1834c:	ldrdeq	r8, [r1], -r0
   18350:	andeq	r8, r1, r4, lsl r4
   18354:	andeq	r8, r1, r4, lsl r4
   18358:	andeq	r8, r1, r4, lsl r4
   1835c:	andeq	r8, r1, r4, lsl r4
   18360:	ldrdeq	r8, [r1], -r0
   18364:	ldrdeq	r8, [r1], -r0
   18368:	andeq	r8, r1, r4, lsl r4
   1836c:	andeq	r8, r1, r4, lsl r4
   18370:	andeq	r8, r1, r4, lsl r4
   18374:	andeq	r8, r1, r4, lsl r4
   18378:	andeq	r8, r1, r4, lsl r4
   1837c:	andeq	r8, r1, r4, lsl r4
   18380:	andeq	r8, r1, r4, lsl r4
   18384:	andeq	r8, r1, r4, lsl r4
   18388:	andeq	r8, r1, r4, lsl r4
   1838c:	andeq	r8, r1, r4, lsl r4
   18390:	andeq	r8, r1, r4, lsl r4
   18394:	andeq	r8, r1, r4, lsl r4
   18398:	ldrdeq	r8, [r1], -r0
   1839c:	andeq	r8, r1, r4, lsl r4
   183a0:	andeq	r8, r1, r4, lsl r4
   183a4:	andeq	r8, r1, r4, lsl r4
   183a8:	ldrdeq	r8, [r1], -r0
   183ac:	andeq	r8, r1, r4, lsl r4
   183b0:	ldrdeq	r8, [r1], -r0
   183b4:	andeq	r8, r1, r4, lsl r4
   183b8:	andeq	r8, r1, r4, lsl r4
   183bc:	andeq	r8, r1, r4, lsl r4
   183c0:	andeq	r8, r1, r4, lsl r4
   183c4:	andeq	r8, r1, r4, lsl r4
   183c8:	andeq	r8, r1, r4, lsl r4
   183cc:	ldrdeq	r8, [r1], -r0
   183d0:	mov	r1, #48	; 0x30
   183d4:	ldr	r0, [sp, #72]	; 0x48
   183d8:	bl	10e74 <strchr@plt>
   183dc:	cmp	r0, #0
   183e0:	beq	18414 <__assert_fail@plt+0x74bc>
   183e4:	ldrb	r3, [r8, #1]
   183e8:	cmp	r3, #68	; 0x44
   183ec:	beq	189a4 <__assert_fail@plt+0x7a4c>
   183f0:	cmp	r3, #105	; 0x69
   183f4:	beq	1865c <__assert_fail@plt+0x7704>
   183f8:	cmp	r3, #66	; 0x42
   183fc:	moveq	r3, #2
   18400:	movne	r3, #1
   18404:	moveq	ip, #1000	; 0x3e8
   18408:	movne	ip, #1024	; 0x400
   1840c:	str	r3, [sp, #12]
   18410:	b	18420 <__assert_fail@plt+0x74c8>
   18414:	mov	r3, #1
   18418:	mov	ip, #1024	; 0x400
   1841c:	str	r3, [sp, #12]
   18420:	sub	sl, sl, #66	; 0x42
   18424:	cmp	sl, #53	; 0x35
   18428:	ldrls	pc, [pc, sl, lsl #2]
   1842c:	b	18608 <__assert_fail@plt+0x76b0>
   18430:	strdeq	r8, [r1], -r0
   18434:	andeq	r8, r1, r8, lsl #12
   18438:	andeq	r8, r1, r8, lsl #12
   1843c:	muleq	r1, r0, r8
   18440:	andeq	r8, r1, r8, lsl #12
   18444:	andeq	r8, r1, ip, lsl #18
   18448:	andeq	r8, r1, r8, lsl #12
   1844c:	andeq	r8, r1, r8, lsl #12
   18450:	andeq	r8, r1, r8, lsl #12
   18454:	andeq	r8, r1, r0, lsl r6
   18458:	andeq	r8, r1, r8, lsl #12
   1845c:	andeq	r8, r1, r8, lsr r8
   18460:	andeq	r8, r1, r8, lsl #12
   18464:	andeq	r8, r1, r8, lsl #12
   18468:	ldrdeq	r8, [r1], -ip
   1846c:	andeq	r8, r1, r8, lsl #12
   18470:	andeq	r8, r1, r8, lsl #12
   18474:	andeq	r8, r1, r8, lsl #12
   18478:	andeq	r8, r1, ip, ror r7
   1847c:	andeq	r8, r1, r8, lsl #12
   18480:	andeq	r8, r1, r8, lsl #12
   18484:	andeq	r8, r1, r8, lsl #12
   18488:	andeq	r8, r1, r8, lsl #12
   1848c:			; <UNDEFINED> instruction: 0x000186b0
   18490:	andeq	r8, r1, r8, lsl #10
   18494:	andeq	r8, r1, r8, lsl #12
   18498:	andeq	r8, r1, r8, lsl #12
   1849c:	andeq	r8, r1, r8, lsl #12
   184a0:	andeq	r8, r1, r8, lsl #12
   184a4:	andeq	r8, r1, r8, lsl #12
   184a8:	andeq	r8, r1, r8, lsl #12
   184ac:	andeq	r8, r1, r8, lsl #12
   184b0:	muleq	r1, r0, r6
   184b4:	strdeq	r8, [r1], -r0
   184b8:	andeq	r8, r1, r8, lsl #12
   184bc:	andeq	r8, r1, r8, lsl #12
   184c0:	andeq	r8, r1, r8, lsl #12
   184c4:	andeq	r8, r1, ip, lsl #18
   184c8:	andeq	r8, r1, r8, lsl #12
   184cc:	andeq	r8, r1, r8, lsl #12
   184d0:	andeq	r8, r1, r8, lsl #12
   184d4:	andeq	r8, r1, r0, lsl r6
   184d8:	andeq	r8, r1, r8, lsl #12
   184dc:	andeq	r8, r1, r8, lsr r8
   184e0:	andeq	r8, r1, r8, lsl #12
   184e4:	andeq	r8, r1, r8, lsl #12
   184e8:	andeq	r8, r1, r8, lsl #12
   184ec:	andeq	r8, r1, r8, lsl #12
   184f0:	andeq	r8, r1, r8, lsl #12
   184f4:	andeq	r8, r1, r8, lsl #12
   184f8:	andeq	r8, r1, ip, ror r7
   184fc:	andeq	r8, r1, r8, lsl #12
   18500:	andeq	r8, r1, r8, lsl #12
   18504:	andeq	r8, r1, r8, ror r6
   18508:	asr	r3, ip, #31
   1850c:	mov	r2, ip
   18510:	cmp	r7, #0
   18514:	mov	r1, #0
   18518:	strd	r2, [sp]
   1851c:	bne	18a5c <__assert_fail@plt+0x7b04>
   18520:	umull	r6, r7, r6, ip
   18524:	mov	r2, r6
   18528:	mov	r3, r7
   1852c:	cmp	r1, #0
   18530:	bne	18970 <__assert_fail@plt+0x7a18>
   18534:	cmp	r3, #0
   18538:	mov	lr, r1
   1853c:	bne	18b88 <__assert_fail@plt+0x7c30>
   18540:	umull	r2, r3, r2, ip
   18544:	mov	r0, r2
   18548:	mov	r1, r3
   1854c:	cmp	lr, #0
   18550:	bne	18970 <__assert_fail@plt+0x7a18>
   18554:	cmp	r1, #0
   18558:	bne	18b64 <__assert_fail@plt+0x7c0c>
   1855c:	umull	r0, r1, r0, ip
   18560:	mov	r2, r0
   18564:	mov	r3, r1
   18568:	cmp	lr, #0
   1856c:	bne	18970 <__assert_fail@plt+0x7a18>
   18570:	cmp	r3, #0
   18574:	bne	18814 <__assert_fail@plt+0x78bc>
   18578:	umull	r2, r3, r2, ip
   1857c:	mov	r0, r2
   18580:	mov	r1, r3
   18584:	cmp	lr, #0
   18588:	bne	18970 <__assert_fail@plt+0x7a18>
   1858c:	cmp	r1, #0
   18590:	bne	18a14 <__assert_fail@plt+0x7abc>
   18594:	umull	r0, r1, r0, ip
   18598:	mov	r2, r0
   1859c:	mov	r3, r1
   185a0:	cmp	lr, #0
   185a4:	bne	18970 <__assert_fail@plt+0x7a18>
   185a8:	cmp	r3, #0
   185ac:	mov	r7, lr
   185b0:	bne	189f0 <__assert_fail@plt+0x7a98>
   185b4:	umull	r2, r3, r2, ip
   185b8:	mov	r6, r2
   185bc:	mov	lr, r3
   185c0:	cmp	r7, #0
   185c4:	bne	18970 <__assert_fail@plt+0x7a18>
   185c8:	cmp	lr, #0
   185cc:	bne	189b4 <__assert_fail@plt+0x7a5c>
   185d0:	umull	r2, r3, r6, ip
   185d4:	mov	r0, r2
   185d8:	mov	r2, r3
   185dc:	subs	r3, r7, #0
   185e0:	bne	18970 <__assert_fail@plt+0x7a18>
   185e4:	mov	r6, r0
   185e8:	mov	r7, r2
   185ec:	orr	r4, r4, r3
   185f0:	ldr	r2, [sp, #12]
   185f4:	add	r3, r8, r2
   185f8:	str	r3, [r5]
   185fc:	ldrb	r3, [r8, r2]
   18600:	cmp	r3, #0
   18604:	beq	1828c <__assert_fail@plt+0x7334>
   18608:	orr	r4, r4, #2
   1860c:	b	1828c <__assert_fail@plt+0x7334>
   18610:	cmp	r7, #0
   18614:	asr	r1, ip, #31
   18618:	mov	lr, #0
   1861c:	bne	18980 <__assert_fail@plt+0x7a28>
   18620:	umull	r2, r3, r6, ip
   18624:	mov	r6, r2
   18628:	mov	r7, r3
   1862c:	cmp	lr, #0
   18630:	beq	185f0 <__assert_fail@plt+0x7698>
   18634:	mvn	r6, #0
   18638:	mov	r4, #1
   1863c:	mov	r7, r6
   18640:	b	185f0 <__assert_fail@plt+0x7698>
   18644:	mov	r0, r3
   18648:	mov	r1, sl
   1864c:	bl	10e74 <strchr@plt>
   18650:	cmp	r0, #0
   18654:	bne	18300 <__assert_fail@plt+0x73a8>
   18658:	b	18608 <__assert_fail@plt+0x76b0>
   1865c:	ldrb	r3, [r8, #2]
   18660:	mov	ip, #1024	; 0x400
   18664:	cmp	r3, #66	; 0x42
   18668:	movne	r3, #1
   1866c:	moveq	r3, #3
   18670:	str	r3, [sp, #12]
   18674:	b	18420 <__assert_fail@plt+0x74c8>
   18678:	lsr	r3, r7, #31
   1867c:	adds	r6, r6, r6
   18680:	adc	r7, r7, r7
   18684:	cmp	r3, #0
   18688:	beq	185f0 <__assert_fail@plt+0x7698>
   1868c:	b	18634 <__assert_fail@plt+0x76dc>
   18690:	lsr	r3, r7, #23
   18694:	lsl	r7, r7, #9
   18698:	cmp	r3, #0
   1869c:	lsl	r3, r6, #9
   186a0:	orr	r7, r7, r6, lsr #23
   186a4:	bne	18634 <__assert_fail@plt+0x76dc>
   186a8:	mov	r6, r3
   186ac:	b	185f0 <__assert_fail@plt+0x7698>
   186b0:	asr	r3, ip, #31
   186b4:	mov	r2, ip
   186b8:	cmp	r7, #0
   186bc:	mov	r1, #0
   186c0:	strd	r2, [sp]
   186c4:	bne	18ad0 <__assert_fail@plt+0x7b78>
   186c8:	umull	r6, r7, r6, ip
   186cc:	mov	r0, r6
   186d0:	mov	fp, r7
   186d4:	cmp	r1, #0
   186d8:	bne	18970 <__assert_fail@plt+0x7a18>
   186dc:	cmp	fp, #0
   186e0:	mov	lr, r1
   186e4:	bne	18c60 <__assert_fail@plt+0x7d08>
   186e8:	umull	r0, r1, r0, ip
   186ec:	mov	r2, r0
   186f0:	mov	r3, r1
   186f4:	cmp	lr, #0
   186f8:	bne	18970 <__assert_fail@plt+0x7a18>
   186fc:	cmp	r3, #0
   18700:	bne	18c88 <__assert_fail@plt+0x7d30>
   18704:	umull	r2, r3, r2, ip
   18708:	mov	r0, r2
   1870c:	mov	r1, r3
   18710:	cmp	lr, #0
   18714:	bne	18970 <__assert_fail@plt+0x7a18>
   18718:	cmp	r1, #0
   1871c:	bne	18c08 <__assert_fail@plt+0x7cb0>
   18720:	umull	r0, r1, r0, ip
   18724:	mov	r2, r0
   18728:	mov	r3, r1
   1872c:	cmp	lr, #0
   18730:	bne	18970 <__assert_fail@plt+0x7a18>
   18734:	cmp	r3, #0
   18738:	bne	18a38 <__assert_fail@plt+0x7ae0>
   1873c:	umull	r2, r3, r2, ip
   18740:	mov	r0, r2
   18744:	mov	r1, r3
   18748:	cmp	lr, #0
   1874c:	bne	18970 <__assert_fail@plt+0x7a18>
   18750:	cmp	r1, #0
   18754:	beq	18594 <__assert_fail@plt+0x763c>
   18758:	umull	r6, r7, r0, ip
   1875c:	mov	fp, lr
   18760:	mov	sl, r7
   18764:	umlal	sl, fp, r1, ip
   18768:	cmp	fp, #0
   1876c:	bne	18e70 <__assert_fail@plt+0x7f18>
   18770:	mov	r2, r6
   18774:	mov	r3, sl
   18778:	b	185a0 <__assert_fail@plt+0x7648>
   1877c:	asr	r3, ip, #31
   18780:	mov	r2, ip
   18784:	cmp	r7, #0
   18788:	mov	r1, #0
   1878c:	strd	r2, [sp]
   18790:	bne	18af4 <__assert_fail@plt+0x7b9c>
   18794:	umull	r6, r7, r6, ip
   18798:	mov	r0, r6
   1879c:	mov	fp, r7
   187a0:	cmp	r1, #0
   187a4:	bne	18970 <__assert_fail@plt+0x7a18>
   187a8:	cmp	fp, #0
   187ac:	mov	lr, r1
   187b0:	beq	18594 <__assert_fail@plt+0x763c>
   187b4:	umull	r6, r7, r0, ip
   187b8:	mov	r3, r1
   187bc:	mov	r2, r7
   187c0:	umlal	r2, r3, fp, ip
   187c4:	cmp	r3, #0
   187c8:	strd	r2, [sp, #16]
   187cc:	bne	18d54 <__assert_fail@plt+0x7dfc>
   187d0:	mov	r2, r6
   187d4:	ldr	r3, [sp, #16]
   187d8:	b	185a0 <__assert_fail@plt+0x7648>
   187dc:	asr	r3, ip, #31
   187e0:	mov	r2, ip
   187e4:	cmp	r7, #0
   187e8:	mov	r1, #0
   187ec:	strd	r2, [sp]
   187f0:	bne	18b3c <__assert_fail@plt+0x7be4>
   187f4:	umull	r6, r7, r6, ip
   187f8:	mov	r2, r6
   187fc:	mov	r3, r7
   18800:	cmp	r1, #0
   18804:	bne	18970 <__assert_fail@plt+0x7a18>
   18808:	cmp	r3, #0
   1880c:	mov	lr, r1
   18810:	beq	18578 <__assert_fail@plt+0x7620>
   18814:	umull	r6, r7, r2, ip
   18818:	mov	fp, lr
   1881c:	mov	sl, r7
   18820:	umlal	sl, fp, r3, ip
   18824:	cmp	fp, #0
   18828:	bne	18e34 <__assert_fail@plt+0x7edc>
   1882c:	mov	r0, r6
   18830:	mov	r1, sl
   18834:	b	18584 <__assert_fail@plt+0x762c>
   18838:	asr	r3, ip, #31
   1883c:	mov	r2, ip
   18840:	cmp	r7, #0
   18844:	mov	r1, #0
   18848:	strd	r2, [sp]
   1884c:	bne	18b18 <__assert_fail@plt+0x7bc0>
   18850:	umull	r6, r7, r6, ip
   18854:	mov	sl, r6
   18858:	mov	lr, r7
   1885c:	cmp	r1, #0
   18860:	bne	18634 <__assert_fail@plt+0x76dc>
   18864:	cmp	lr, #0
   18868:	mov	r7, r1
   1886c:	bne	18c2c <__assert_fail@plt+0x7cd4>
   18870:	umull	sl, fp, sl, ip
   18874:	mov	r0, sl
   18878:	mov	r2, fp
   1887c:	cmp	r7, #0
   18880:	mov	r6, r0
   18884:	mov	r7, r2
   18888:	beq	185f0 <__assert_fail@plt+0x7698>
   1888c:	b	18634 <__assert_fail@plt+0x76dc>
   18890:	asr	r3, ip, #31
   18894:	mov	r2, ip
   18898:	cmp	r7, #0
   1889c:	mov	r1, #0
   188a0:	strd	r2, [sp]
   188a4:	bne	18aac <__assert_fail@plt+0x7b54>
   188a8:	umull	r6, r7, r6, ip
   188ac:	mov	r0, r6
   188b0:	mov	fp, r7
   188b4:	cmp	r1, #0
   188b8:	bne	18970 <__assert_fail@plt+0x7a18>
   188bc:	cmp	fp, #0
   188c0:	mov	lr, r1
   188c4:	beq	18720 <__assert_fail@plt+0x77c8>
   188c8:	umull	r6, r7, r0, ip
   188cc:	mov	r3, r1
   188d0:	mov	r2, r7
   188d4:	umlal	r2, r3, fp, ip
   188d8:	cmp	r3, #0
   188dc:	strd	r2, [sp, #16]
   188e0:	bne	18dc4 <__assert_fail@plt+0x7e6c>
   188e4:	mov	r2, r6
   188e8:	ldr	r3, [sp, #16]
   188ec:	b	1872c <__assert_fail@plt+0x77d4>
   188f0:	lsr	r3, r7, #22
   188f4:	lsl	r7, r7, #10
   188f8:	cmp	r3, #0
   188fc:	lsl	r3, r6, #10
   18900:	orr	r7, r7, r6, lsr #22
   18904:	beq	186a8 <__assert_fail@plt+0x7750>
   18908:	b	18634 <__assert_fail@plt+0x76dc>
   1890c:	asr	r3, ip, #31
   18910:	mov	r2, ip
   18914:	cmp	r7, #0
   18918:	mov	r1, #0
   1891c:	strd	r2, [sp]
   18920:	bne	18a84 <__assert_fail@plt+0x7b2c>
   18924:	umull	r6, r7, r6, ip
   18928:	mov	r2, r6
   1892c:	mov	r3, r7
   18930:	cmp	r1, #0
   18934:	bne	18634 <__assert_fail@plt+0x76dc>
   18938:	cmp	r3, #0
   1893c:	mov	r7, r1
   18940:	bne	18be8 <__assert_fail@plt+0x7c90>
   18944:	umull	r2, r3, r2, ip
   18948:	mov	r6, r2
   1894c:	mov	lr, r3
   18950:	cmp	r7, #0
   18954:	bne	18634 <__assert_fail@plt+0x76dc>
   18958:	cmp	lr, #0
   1895c:	bne	18bac <__assert_fail@plt+0x7c54>
   18960:	umull	r2, r3, r6, ip
   18964:	mov	r0, r2
   18968:	mov	r2, r3
   1896c:	b	1887c <__assert_fail@plt+0x7924>
   18970:	mvn	r6, #0
   18974:	mov	r3, #1
   18978:	mov	r7, r6
   1897c:	b	185ec <__assert_fail@plt+0x7694>
   18980:	umull	sl, fp, r6, ip
   18984:	mov	r3, lr
   18988:	mov	r2, fp
   1898c:	umlal	r2, r3, r7, ip
   18990:	cmp	r3, #0
   18994:	bne	18d8c <__assert_fail@plt+0x7e34>
   18998:	mov	r6, sl
   1899c:	mov	r7, r2
   189a0:	b	1862c <__assert_fail@plt+0x76d4>
   189a4:	mov	r3, #2
   189a8:	mov	ip, #1000	; 0x3e8
   189ac:	str	r3, [sp, #12]
   189b0:	b	18420 <__assert_fail@plt+0x74c8>
   189b4:	umull	r0, r1, r6, ip
   189b8:	mov	r3, r7
   189bc:	mov	r2, r1
   189c0:	strd	r0, [sp, #16]
   189c4:	umlal	r2, r3, lr, ip
   189c8:	cmp	r3, #0
   189cc:	beq	185dc <__assert_fail@plt+0x7684>
   189d0:	ldrd	sl, [sp]
   189d4:	mov	r7, #1
   189d8:	ldr	r0, [sp, #16]
   189dc:	ldr	r3, [sp, #20]
   189e0:	mul	r2, r6, fp
   189e4:	mla	r2, lr, sl, r2
   189e8:	add	r2, r2, r3
   189ec:	b	185dc <__assert_fail@plt+0x7684>
   189f0:	umull	sl, fp, r2, ip
   189f4:	mov	r1, lr
   189f8:	mov	r0, fp
   189fc:	umlal	r0, r1, r3, ip
   18a00:	cmp	r1, #0
   18a04:	bne	18ce4 <__assert_fail@plt+0x7d8c>
   18a08:	mov	r6, sl
   18a0c:	mov	lr, r0
   18a10:	b	185c0 <__assert_fail@plt+0x7668>
   18a14:	umull	sl, fp, r0, ip
   18a18:	mov	r7, lr
   18a1c:	mov	r6, fp
   18a20:	umlal	r6, r7, r1, ip
   18a24:	cmp	r7, #0
   18a28:	bne	18e8c <__assert_fail@plt+0x7f34>
   18a2c:	mov	r2, sl
   18a30:	mov	r3, r6
   18a34:	b	185a0 <__assert_fail@plt+0x7648>
   18a38:	umull	sl, fp, r2, ip
   18a3c:	mov	r7, lr
   18a40:	mov	r6, fp
   18a44:	umlal	r6, r7, r3, ip
   18a48:	cmp	r7, #0
   18a4c:	bne	18d1c <__assert_fail@plt+0x7dc4>
   18a50:	mov	r0, sl
   18a54:	mov	r1, r6
   18a58:	b	18748 <__assert_fail@plt+0x77f0>
   18a5c:	umull	sl, fp, r6, ip
   18a60:	mov	r3, r1
   18a64:	mov	r2, fp
   18a68:	umlal	r2, r3, r7, ip
   18a6c:	cmp	r3, #0
   18a70:	strd	r2, [sp, #16]
   18a74:	bne	18d00 <__assert_fail@plt+0x7da8>
   18a78:	mov	r2, sl
   18a7c:	ldr	r3, [sp, #16]
   18a80:	b	1852c <__assert_fail@plt+0x75d4>
   18a84:	umull	sl, fp, r6, ip
   18a88:	mov	r3, r1
   18a8c:	mov	r2, fp
   18a90:	umlal	r2, r3, r7, ip
   18a94:	cmp	r3, #0
   18a98:	strd	r2, [sp, #16]
   18a9c:	bne	18de0 <__assert_fail@plt+0x7e88>
   18aa0:	mov	r2, sl
   18aa4:	ldr	r3, [sp, #16]
   18aa8:	b	18930 <__assert_fail@plt+0x79d8>
   18aac:	umull	sl, fp, r6, ip
   18ab0:	mov	r3, r1
   18ab4:	mov	r2, fp
   18ab8:	umlal	r2, r3, r7, ip
   18abc:	cmp	r3, #0
   18ac0:	bne	18cac <__assert_fail@plt+0x7d54>
   18ac4:	mov	r0, sl
   18ac8:	mov	fp, r2
   18acc:	b	188b4 <__assert_fail@plt+0x795c>
   18ad0:	umull	sl, fp, r6, ip
   18ad4:	mov	r3, r1
   18ad8:	mov	r2, fp
   18adc:	umlal	r2, r3, r7, ip
   18ae0:	cmp	r3, #0
   18ae4:	bne	18d70 <__assert_fail@plt+0x7e18>
   18ae8:	mov	r0, sl
   18aec:	mov	fp, r2
   18af0:	b	186d4 <__assert_fail@plt+0x777c>
   18af4:	umull	sl, fp, r6, ip
   18af8:	mov	r3, r1
   18afc:	mov	r2, fp
   18b00:	umlal	r2, r3, r7, ip
   18b04:	cmp	r3, #0
   18b08:	bne	18dfc <__assert_fail@plt+0x7ea4>
   18b0c:	mov	r0, sl
   18b10:	mov	fp, r2
   18b14:	b	187a0 <__assert_fail@plt+0x7848>
   18b18:	umull	sl, fp, r6, ip
   18b1c:	mov	r3, r1
   18b20:	mov	r2, fp
   18b24:	strd	sl, [sp, #16]
   18b28:	umlal	r2, r3, r7, ip
   18b2c:	cmp	r3, #0
   18b30:	bne	18da4 <__assert_fail@plt+0x7e4c>
   18b34:	mov	lr, r2
   18b38:	b	1885c <__assert_fail@plt+0x7904>
   18b3c:	umull	sl, fp, r6, ip
   18b40:	mov	r3, r1
   18b44:	mov	r2, fp
   18b48:	umlal	r2, r3, r7, ip
   18b4c:	cmp	r3, #0
   18b50:	strd	r2, [sp, #16]
   18b54:	bne	18ea8 <__assert_fail@plt+0x7f50>
   18b58:	mov	r2, sl
   18b5c:	ldr	r3, [sp, #16]
   18b60:	b	18800 <__assert_fail@plt+0x78a8>
   18b64:	umull	sl, fp, r0, ip
   18b68:	mov	r7, lr
   18b6c:	mov	r6, fp
   18b70:	umlal	r6, r7, r1, ip
   18b74:	cmp	r7, #0
   18b78:	bne	18ec4 <__assert_fail@plt+0x7f6c>
   18b7c:	mov	r2, sl
   18b80:	mov	r3, r6
   18b84:	b	18568 <__assert_fail@plt+0x7610>
   18b88:	umull	r6, r7, r2, ip
   18b8c:	mov	fp, r1
   18b90:	mov	sl, r7
   18b94:	umlal	sl, fp, r3, ip
   18b98:	cmp	fp, #0
   18b9c:	bne	18d38 <__assert_fail@plt+0x7de0>
   18ba0:	mov	r0, r6
   18ba4:	mov	r1, sl
   18ba8:	b	1854c <__assert_fail@plt+0x75f4>
   18bac:	umull	r0, r1, r6, ip
   18bb0:	mov	r3, r7
   18bb4:	mov	r2, r1
   18bb8:	strd	r0, [sp, #16]
   18bbc:	umlal	r2, r3, lr, ip
   18bc0:	cmp	r3, #0
   18bc4:	beq	1887c <__assert_fail@plt+0x7924>
   18bc8:	ldrd	sl, [sp]
   18bcc:	mov	r7, #1
   18bd0:	ldr	r0, [sp, #16]
   18bd4:	ldr	r3, [sp, #20]
   18bd8:	mul	r2, r6, fp
   18bdc:	mla	r2, lr, sl, r2
   18be0:	add	r2, r2, r3
   18be4:	b	1887c <__assert_fail@plt+0x7924>
   18be8:	umull	sl, fp, r2, ip
   18bec:	mov	r0, fp
   18bf0:	umlal	r0, r1, r3, ip
   18bf4:	cmp	r1, #0
   18bf8:	bne	18ee0 <__assert_fail@plt+0x7f88>
   18bfc:	mov	r6, sl
   18c00:	mov	lr, r0
   18c04:	b	18950 <__assert_fail@plt+0x79f8>
   18c08:	umull	r6, r7, r0, ip
   18c0c:	mov	fp, lr
   18c10:	mov	sl, r7
   18c14:	umlal	sl, fp, r1, ip
   18c18:	cmp	fp, #0
   18c1c:	bne	18e18 <__assert_fail@plt+0x7ec0>
   18c20:	mov	r2, r6
   18c24:	mov	r3, sl
   18c28:	b	1872c <__assert_fail@plt+0x77d4>
   18c2c:	umull	r0, r1, sl, ip
   18c30:	mov	r3, r7
   18c34:	mov	r2, r1
   18c38:	umlal	r2, r3, lr, ip
   18c3c:	cmp	r3, #0
   18c40:	beq	1887c <__assert_fail@plt+0x7924>
   18c44:	ldr	r3, [sp, #4]
   18c48:	mov	r7, #1
   18c4c:	mul	r2, sl, r3
   18c50:	ldr	r3, [sp]
   18c54:	mla	r2, lr, r3, r2
   18c58:	add	r2, r2, r1
   18c5c:	b	1887c <__assert_fail@plt+0x7924>
   18c60:	umull	r6, r7, r0, ip
   18c64:	mov	r3, r1
   18c68:	mov	r2, r7
   18c6c:	umlal	r2, r3, fp, ip
   18c70:	cmp	r3, #0
   18c74:	strd	r2, [sp, #16]
   18c78:	bne	18efc <__assert_fail@plt+0x7fa4>
   18c7c:	mov	r2, r6
   18c80:	ldr	r3, [sp, #16]
   18c84:	b	186f4 <__assert_fail@plt+0x779c>
   18c88:	umull	sl, fp, r2, ip
   18c8c:	mov	r7, lr
   18c90:	mov	r6, fp
   18c94:	umlal	r6, r7, r3, ip
   18c98:	cmp	r7, #0
   18c9c:	bne	18cc8 <__assert_fail@plt+0x7d70>
   18ca0:	mov	r0, sl
   18ca4:	mov	r1, r6
   18ca8:	b	18710 <__assert_fail@plt+0x77b8>
   18cac:	ldrd	r2, [sp]
   18cb0:	mov	r0, sl
   18cb4:	mov	r1, #1
   18cb8:	mul	r6, r6, r3
   18cbc:	mla	r7, r2, r7, r6
   18cc0:	add	fp, r7, fp
   18cc4:	b	188b4 <__assert_fail@plt+0x795c>
   18cc8:	ldrd	r6, [sp]
   18ccc:	mov	r0, sl
   18cd0:	mov	lr, #1
   18cd4:	mul	r2, r2, r7
   18cd8:	mla	r1, r3, r6, r2
   18cdc:	add	r1, r1, fp
   18ce0:	b	18710 <__assert_fail@plt+0x77b8>
   18ce4:	ldrd	r0, [sp]
   18ce8:	mov	r6, sl
   18cec:	mov	r7, #1
   18cf0:	mul	r2, r2, r1
   18cf4:	mla	lr, r3, r0, r2
   18cf8:	add	lr, lr, fp
   18cfc:	b	185c0 <__assert_fail@plt+0x7668>
   18d00:	ldm	sp, {r0, r3}
   18d04:	mov	r2, sl
   18d08:	mov	r1, #1
   18d0c:	mul	r3, r6, r3
   18d10:	mla	r3, r0, r7, r3
   18d14:	add	r3, r3, fp
   18d18:	b	1852c <__assert_fail@plt+0x75d4>
   18d1c:	ldrd	r6, [sp]
   18d20:	mov	r0, sl
   18d24:	mov	lr, #1
   18d28:	mul	r2, r2, r7
   18d2c:	mla	r1, r3, r6, r2
   18d30:	add	r1, r1, fp
   18d34:	b	18748 <__assert_fail@plt+0x77f0>
   18d38:	ldrd	sl, [sp]
   18d3c:	mov	r0, r6
   18d40:	mov	lr, #1
   18d44:	mul	r2, r2, fp
   18d48:	mla	r1, r3, sl, r2
   18d4c:	add	r1, r1, r7
   18d50:	b	1854c <__assert_fail@plt+0x75f4>
   18d54:	ldm	sp, {r1, r3}
   18d58:	mov	r2, r6
   18d5c:	mov	lr, #1
   18d60:	mul	r3, r0, r3
   18d64:	mla	r3, fp, r1, r3
   18d68:	add	r3, r3, r7
   18d6c:	b	185a0 <__assert_fail@plt+0x7648>
   18d70:	ldrd	r2, [sp]
   18d74:	mov	r0, sl
   18d78:	mov	r1, #1
   18d7c:	mul	r6, r6, r3
   18d80:	mla	r7, r2, r7, r6
   18d84:	add	fp, r7, fp
   18d88:	b	186d4 <__assert_fail@plt+0x777c>
   18d8c:	mul	r3, r6, r1
   18d90:	mov	lr, #1
   18d94:	mov	r6, sl
   18d98:	mla	r7, ip, r7, r3
   18d9c:	add	r7, r7, fp
   18da0:	b	1862c <__assert_fail@plt+0x76d4>
   18da4:	ldrd	r2, [sp]
   18da8:	mov	r1, #1
   18dac:	ldr	sl, [sp, #16]
   18db0:	mul	lr, r6, r3
   18db4:	ldr	r3, [sp, #20]
   18db8:	mla	lr, r2, r7, lr
   18dbc:	add	lr, lr, r3
   18dc0:	b	1885c <__assert_fail@plt+0x7904>
   18dc4:	ldm	sp, {r1, r3}
   18dc8:	mov	r2, r6
   18dcc:	mov	lr, #1
   18dd0:	mul	r3, r0, r3
   18dd4:	mla	r3, fp, r1, r3
   18dd8:	add	r3, r3, r7
   18ddc:	b	1872c <__assert_fail@plt+0x77d4>
   18de0:	ldm	sp, {r0, r3}
   18de4:	mov	r2, sl
   18de8:	mov	r1, #1
   18dec:	mul	r3, r6, r3
   18df0:	mla	r3, r0, r7, r3
   18df4:	add	r3, r3, fp
   18df8:	b	18930 <__assert_fail@plt+0x79d8>
   18dfc:	ldrd	r2, [sp]
   18e00:	mov	r0, sl
   18e04:	mov	r1, #1
   18e08:	mul	r6, r6, r3
   18e0c:	mla	r7, r2, r7, r6
   18e10:	add	fp, r7, fp
   18e14:	b	187a0 <__assert_fail@plt+0x7848>
   18e18:	ldrd	sl, [sp]
   18e1c:	mov	r2, r6
   18e20:	mov	lr, #1
   18e24:	mul	r3, r0, fp
   18e28:	mla	r3, r1, sl, r3
   18e2c:	add	r3, r3, r7
   18e30:	b	1872c <__assert_fail@plt+0x77d4>
   18e34:	ldrd	sl, [sp]
   18e38:	mov	r0, r6
   18e3c:	mov	lr, #1
   18e40:	mul	r2, r2, fp
   18e44:	mla	r1, r3, sl, r2
   18e48:	add	r1, r1, r7
   18e4c:	b	18584 <__assert_fail@plt+0x762c>
   18e50:	movw	r3, #42288	; 0xa530
   18e54:	movt	r3, #1
   18e58:	movw	r1, #42300	; 0xa53c
   18e5c:	movt	r1, #1
   18e60:	movw	r0, #42316	; 0xa54c
   18e64:	movt	r0, #1
   18e68:	mov	r2, #85	; 0x55
   18e6c:	bl	10f58 <__assert_fail@plt>
   18e70:	ldrd	sl, [sp]
   18e74:	mov	r2, r6
   18e78:	mov	lr, #1
   18e7c:	mul	r3, r0, fp
   18e80:	mla	r3, r1, sl, r3
   18e84:	add	r3, r3, r7
   18e88:	b	185a0 <__assert_fail@plt+0x7648>
   18e8c:	ldrd	r6, [sp]
   18e90:	mov	r2, sl
   18e94:	mov	lr, #1
   18e98:	mul	r3, r0, r7
   18e9c:	mla	r3, r1, r6, r3
   18ea0:	add	r3, r3, fp
   18ea4:	b	185a0 <__assert_fail@plt+0x7648>
   18ea8:	ldm	sp, {r0, r3}
   18eac:	mov	r2, sl
   18eb0:	mov	r1, #1
   18eb4:	mul	r3, r6, r3
   18eb8:	mla	r3, r0, r7, r3
   18ebc:	add	r3, r3, fp
   18ec0:	b	18800 <__assert_fail@plt+0x78a8>
   18ec4:	ldrd	r6, [sp]
   18ec8:	mov	r2, sl
   18ecc:	mov	lr, #1
   18ed0:	mul	r3, r0, r7
   18ed4:	mla	r3, r1, r6, r3
   18ed8:	add	r3, r3, fp
   18edc:	b	18568 <__assert_fail@plt+0x7610>
   18ee0:	ldrd	r0, [sp]
   18ee4:	mov	r6, sl
   18ee8:	mov	r7, #1
   18eec:	mul	r2, r2, r1
   18ef0:	mla	lr, r3, r0, r2
   18ef4:	add	lr, lr, fp
   18ef8:	b	18950 <__assert_fail@plt+0x79f8>
   18efc:	ldm	sp, {r1, r3}
   18f00:	mov	r2, r6
   18f04:	mov	lr, #1
   18f08:	mul	r3, r0, r3
   18f0c:	mla	r3, fp, r1, r3
   18f10:	add	r3, r3, r7
   18f14:	b	186f4 <__assert_fail@plt+0x779c>
   18f18:	cmp	r1, #0
   18f1c:	cmpne	r0, #0
   18f20:	beq	18f6c <__assert_fail@plt+0x8014>
   18f24:	strd	r4, [sp, #-16]!
   18f28:	umull	r4, r5, r0, r1
   18f2c:	str	r6, [sp, #8]
   18f30:	str	lr, [sp, #12]
   18f34:	adds	r3, r5, #0
   18f38:	movne	r3, #1
   18f3c:	cmp	r4, #0
   18f40:	blt	18f4c <__assert_fail@plt+0x7ff4>
   18f44:	cmp	r3, #0
   18f48:	beq	18f78 <__assert_fail@plt+0x8020>
   18f4c:	bl	10e8c <__errno_location@plt>
   18f50:	mov	r3, #12
   18f54:	ldrd	r4, [sp]
   18f58:	ldr	r6, [sp, #8]
   18f5c:	add	sp, sp, #12
   18f60:	str	r3, [r0]
   18f64:	mov	r0, #0
   18f68:	pop	{pc}		; (ldr pc, [sp], #4)
   18f6c:	mov	r1, #1
   18f70:	mov	r0, r1
   18f74:	b	10cd0 <calloc@plt>
   18f78:	ldrd	r4, [sp]
   18f7c:	ldr	r6, [sp, #8]
   18f80:	ldr	lr, [sp, #12]
   18f84:	add	sp, sp, #16
   18f88:	b	10cd0 <calloc@plt>
   18f8c:	cmp	r0, #0
   18f90:	beq	18f9c <__assert_fail@plt+0x8044>
   18f94:	blt	18fa4 <__assert_fail@plt+0x804c>
   18f98:	b	10e14 <malloc@plt>
   18f9c:	mov	r0, #1
   18fa0:	b	10e14 <malloc@plt>
   18fa4:	str	r4, [sp, #-8]!
   18fa8:	str	lr, [sp, #4]
   18fac:	bl	10e8c <__errno_location@plt>
   18fb0:	mov	r3, #12
   18fb4:	ldr	r4, [sp]
   18fb8:	add	sp, sp, #4
   18fbc:	str	r3, [r0]
   18fc0:	mov	r0, #0
   18fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   18fc8:	cmp	r0, #0
   18fcc:	beq	18ff4 <__assert_fail@plt+0x809c>
   18fd0:	cmp	r1, #0
   18fd4:	str	r4, [sp, #-8]!
   18fd8:	str	lr, [sp, #4]
   18fdc:	beq	18ffc <__assert_fail@plt+0x80a4>
   18fe0:	blt	19010 <__assert_fail@plt+0x80b8>
   18fe4:	ldr	r4, [sp]
   18fe8:	ldr	lr, [sp, #4]
   18fec:	add	sp, sp, #8
   18ff0:	b	10d84 <realloc@plt>
   18ff4:	mov	r0, r1
   18ff8:	b	18f8c <__assert_fail@plt+0x8034>
   18ffc:	bl	13430 <__assert_fail@plt+0x24d8>
   19000:	ldr	r4, [sp]
   19004:	add	sp, sp, #4
   19008:	mov	r0, #0
   1900c:	pop	{pc}		; (ldr pc, [sp], #4)
   19010:	bl	10e8c <__errno_location@plt>
   19014:	mov	r3, #12
   19018:	str	r3, [r0]
   1901c:	b	19000 <__assert_fail@plt+0x80a8>
   19020:	strd	r4, [sp, #-16]!
   19024:	mov	r4, r0
   19028:	str	r6, [sp, #8]
   1902c:	str	lr, [sp, #12]
   19030:	bl	10de4 <__fpending@plt>
   19034:	ldr	r5, [r4]
   19038:	mov	r6, r0
   1903c:	mov	r0, r4
   19040:	bl	190a8 <__assert_fail@plt+0x8150>
   19044:	mov	r4, r0
   19048:	and	r5, r5, #32
   1904c:	cmp	r5, #0
   19050:	bne	19088 <__assert_fail@plt+0x8130>
   19054:	cmp	r0, #0
   19058:	beq	19074 <__assert_fail@plt+0x811c>
   1905c:	cmp	r6, #0
   19060:	bne	190a0 <__assert_fail@plt+0x8148>
   19064:	bl	10e8c <__errno_location@plt>
   19068:	ldr	r4, [r0]
   1906c:	subs	r4, r4, #9
   19070:	mvnne	r4, #0
   19074:	mov	r0, r4
   19078:	ldrd	r4, [sp]
   1907c:	ldr	r6, [sp, #8]
   19080:	add	sp, sp, #12
   19084:	pop	{pc}		; (ldr pc, [sp], #4)
   19088:	cmp	r0, #0
   1908c:	bne	190a0 <__assert_fail@plt+0x8148>
   19090:	bl	10e8c <__errno_location@plt>
   19094:	str	r4, [r0]
   19098:	mvn	r4, #0
   1909c:	b	19074 <__assert_fail@plt+0x811c>
   190a0:	mvn	r4, #0
   190a4:	b	19074 <__assert_fail@plt+0x811c>
   190a8:	strd	r4, [sp, #-12]!
   190ac:	mov	r4, r0
   190b0:	str	lr, [sp, #8]
   190b4:	sub	sp, sp, #12
   190b8:	bl	10ebc <fileno@plt>
   190bc:	cmp	r0, #0
   190c0:	mov	r0, r4
   190c4:	blt	19148 <__assert_fail@plt+0x81f0>
   190c8:	bl	10e2c <__freading@plt>
   190cc:	cmp	r0, #0
   190d0:	bne	19114 <__assert_fail@plt+0x81bc>
   190d4:	mov	r0, r4
   190d8:	bl	1915c <__assert_fail@plt+0x8204>
   190dc:	cmp	r0, #0
   190e0:	beq	19144 <__assert_fail@plt+0x81ec>
   190e4:	bl	10e8c <__errno_location@plt>
   190e8:	mov	r5, r0
   190ec:	mov	r0, r4
   190f0:	ldr	r4, [r5]
   190f4:	bl	10ee0 <fclose@plt>
   190f8:	cmp	r4, #0
   190fc:	mvnne	r0, #0
   19100:	strne	r4, [r5]
   19104:	add	sp, sp, #12
   19108:	ldrd	r4, [sp]
   1910c:	add	sp, sp, #8
   19110:	pop	{pc}		; (ldr pc, [sp], #4)
   19114:	mov	r0, r4
   19118:	bl	10ebc <fileno@plt>
   1911c:	mov	r1, #1
   19120:	mov	r2, #0
   19124:	mov	r3, #0
   19128:	str	r1, [sp]
   1912c:	bl	10dcc <lseek64@plt>
   19130:	mvn	r3, #0
   19134:	mvn	r2, #0
   19138:	cmp	r1, r3
   1913c:	cmpeq	r0, r2
   19140:	bne	190d4 <__assert_fail@plt+0x817c>
   19144:	mov	r0, r4
   19148:	add	sp, sp, #12
   1914c:	ldrd	r4, [sp]
   19150:	ldr	lr, [sp, #8]
   19154:	add	sp, sp, #12
   19158:	b	10ee0 <fclose@plt>
   1915c:	str	r4, [sp, #-8]!
   19160:	subs	r4, r0, #0
   19164:	str	lr, [sp, #4]
   19168:	sub	sp, sp, #8
   1916c:	beq	19188 <__assert_fail@plt+0x8230>
   19170:	bl	10e2c <__freading@plt>
   19174:	cmp	r0, #0
   19178:	beq	19188 <__assert_fail@plt+0x8230>
   1917c:	ldr	r3, [r4]
   19180:	tst	r3, #256	; 0x100
   19184:	bne	191a0 <__assert_fail@plt+0x8248>
   19188:	mov	r0, r4
   1918c:	add	sp, sp, #8
   19190:	ldr	r4, [sp]
   19194:	ldr	lr, [sp, #4]
   19198:	add	sp, sp, #8
   1919c:	b	10d0c <fflush@plt>
   191a0:	mov	r1, #1
   191a4:	mov	r2, #0
   191a8:	mov	r3, #0
   191ac:	mov	r0, r4
   191b0:	str	r1, [sp]
   191b4:	bl	191bc <__assert_fail@plt+0x8264>
   191b8:	b	19188 <__assert_fail@plt+0x8230>
   191bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   191c0:	mov	r4, r0
   191c4:	ldr	ip, [r0, #4]
   191c8:	strd	r6, [sp, #8]
   191cc:	str	lr, [sp, #20]
   191d0:	ldr	lr, [r0, #8]
   191d4:	str	r8, [sp, #16]
   191d8:	sub	sp, sp, #8
   191dc:	ldr	r5, [sp, #32]
   191e0:	cmp	lr, ip
   191e4:	beq	1920c <__assert_fail@plt+0x82b4>
   191e8:	mov	r0, r4
   191ec:	str	r5, [sp, #32]
   191f0:	add	sp, sp, #8
   191f4:	ldrd	r4, [sp]
   191f8:	ldrd	r6, [sp, #8]
   191fc:	ldr	r8, [sp, #16]
   19200:	ldr	lr, [sp, #20]
   19204:	add	sp, sp, #24
   19208:	b	10eec <fseeko64@plt>
   1920c:	ldr	ip, [r0, #16]
   19210:	ldr	lr, [r0, #20]
   19214:	cmp	lr, ip
   19218:	bne	191e8 <__assert_fail@plt+0x8290>
   1921c:	ldr	r8, [r0, #36]	; 0x24
   19220:	cmp	r8, #0
   19224:	bne	191e8 <__assert_fail@plt+0x8290>
   19228:	mov	r6, r2
   1922c:	mov	r7, r3
   19230:	bl	10ebc <fileno@plt>
   19234:	mov	r2, r6
   19238:	mov	r3, r7
   1923c:	str	r5, [sp]
   19240:	bl	10dcc <lseek64@plt>
   19244:	mvn	r3, #0
   19248:	mvn	r2, #0
   1924c:	cmp	r1, r3
   19250:	cmpeq	r0, r2
   19254:	beq	19284 <__assert_fail@plt+0x832c>
   19258:	ldr	r3, [r4]
   1925c:	strd	r0, [r4, #80]	; 0x50
   19260:	bic	r3, r3, #16
   19264:	str	r3, [r4]
   19268:	mov	r0, r8
   1926c:	add	sp, sp, #8
   19270:	ldrd	r4, [sp]
   19274:	ldrd	r6, [sp, #8]
   19278:	ldr	r8, [sp, #16]
   1927c:	add	sp, sp, #20
   19280:	pop	{pc}		; (ldr pc, [sp], #4)
   19284:	mvn	r8, #0
   19288:	b	19268 <__assert_fail@plt+0x8310>
   1928c:	mov	r0, #14
   19290:	str	r4, [sp, #-8]!
   19294:	str	lr, [sp, #4]
   19298:	bl	10f10 <nl_langinfo@plt>
   1929c:	cmp	r0, #0
   192a0:	beq	192c4 <__assert_fail@plt+0x836c>
   192a4:	ldrb	r2, [r0]
   192a8:	movw	r3, #42356	; 0xa574
   192ac:	movt	r3, #1
   192b0:	ldr	r4, [sp]
   192b4:	add	sp, sp, #4
   192b8:	cmp	r2, #0
   192bc:	moveq	r0, r3
   192c0:	pop	{pc}		; (ldr pc, [sp], #4)
   192c4:	ldr	r4, [sp]
   192c8:	add	sp, sp, #4
   192cc:	movw	r0, #42356	; 0xa574
   192d0:	movt	r0, #1
   192d4:	pop	{pc}		; (ldr pc, [sp], #4)
   192d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   192dc:	mov	r5, r2
   192e0:	strd	r6, [sp, #8]
   192e4:	subs	r6, r0, #0
   192e8:	mov	r7, r1
   192ec:	str	lr, [sp, #16]
   192f0:	sub	sp, sp, #12
   192f4:	addeq	r6, sp, #4
   192f8:	mov	r0, r6
   192fc:	bl	10df0 <mbrtowc@plt>
   19300:	cmp	r5, #0
   19304:	cmnne	r0, #3
   19308:	mov	r4, r0
   1930c:	bhi	19328 <__assert_fail@plt+0x83d0>
   19310:	mov	r0, r4
   19314:	add	sp, sp, #12
   19318:	ldrd	r4, [sp]
   1931c:	ldrd	r6, [sp, #8]
   19320:	add	sp, sp, #16
   19324:	pop	{pc}		; (ldr pc, [sp], #4)
   19328:	mov	r0, #0
   1932c:	bl	19380 <__assert_fail@plt+0x8428>
   19330:	cmp	r0, #0
   19334:	bne	19310 <__assert_fail@plt+0x83b8>
   19338:	ldrb	r3, [r7]
   1933c:	mov	r4, #1
   19340:	str	r3, [r6]
   19344:	b	19310 <__assert_fail@plt+0x83b8>
   19348:	umull	r2, r3, r1, r2
   1934c:	cmp	r3, #0
   19350:	bne	1935c <__assert_fail@plt+0x8404>
   19354:	mov	r1, r2
   19358:	b	18fc8 <__assert_fail@plt+0x8070>
   1935c:	str	r4, [sp, #-8]!
   19360:	str	lr, [sp, #4]
   19364:	bl	10e8c <__errno_location@plt>
   19368:	mov	r3, #12
   1936c:	ldr	r4, [sp]
   19370:	add	sp, sp, #4
   19374:	str	r3, [r0]
   19378:	mov	r0, #0
   1937c:	pop	{pc}		; (ldr pc, [sp], #4)
   19380:	push	{lr}		; (str lr, [sp, #-4]!)
   19384:	sub	sp, sp, #268	; 0x10c
   19388:	movw	r2, #257	; 0x101
   1938c:	add	r1, sp, #4
   19390:	bl	193d8 <__assert_fail@plt+0x8480>
   19394:	cmp	r0, #0
   19398:	movne	r0, #0
   1939c:	bne	193d0 <__assert_fail@plt+0x8478>
   193a0:	movw	r1, #42364	; 0xa57c
   193a4:	movt	r1, #1
   193a8:	add	r0, sp, #4
   193ac:	bl	10cf4 <strcmp@plt>
   193b0:	cmp	r0, #0
   193b4:	beq	193d0 <__assert_fail@plt+0x8478>
   193b8:	add	r0, sp, #4
   193bc:	movw	r1, #42368	; 0xa580
   193c0:	movt	r1, #1
   193c4:	bl	10cf4 <strcmp@plt>
   193c8:	adds	r0, r0, #0
   193cc:	movne	r0, #1
   193d0:	add	sp, sp, #268	; 0x10c
   193d4:	pop	{pc}		; (ldr pc, [sp], #4)
   193d8:	strd	r4, [sp, #-16]!
   193dc:	mov	r5, r1
   193e0:	mov	r1, #0
   193e4:	mov	r4, r2
   193e8:	str	r6, [sp, #8]
   193ec:	str	lr, [sp, #12]
   193f0:	bl	10ef8 <setlocale@plt>
   193f4:	subs	r6, r0, #0
   193f8:	beq	19478 <__assert_fail@plt+0x8520>
   193fc:	bl	10e68 <strlen@plt>
   19400:	cmp	r4, r0
   19404:	bhi	19424 <__assert_fail@plt+0x84cc>
   19408:	cmp	r4, #0
   1940c:	moveq	r0, #34	; 0x22
   19410:	bne	19448 <__assert_fail@plt+0x84f0>
   19414:	ldrd	r4, [sp]
   19418:	ldr	r6, [sp, #8]
   1941c:	add	sp, sp, #12
   19420:	pop	{pc}		; (ldr pc, [sp], #4)
   19424:	add	r2, r0, #1
   19428:	mov	r1, r6
   1942c:	mov	r0, r5
   19430:	bl	10d30 <memcpy@plt>
   19434:	ldrd	r4, [sp]
   19438:	mov	r0, #0
   1943c:	ldr	r6, [sp, #8]
   19440:	add	sp, sp, #12
   19444:	pop	{pc}		; (ldr pc, [sp], #4)
   19448:	sub	r4, r4, #1
   1944c:	mov	r1, r6
   19450:	mov	r2, r4
   19454:	mov	r0, r5
   19458:	bl	10d30 <memcpy@plt>
   1945c:	mov	r3, #0
   19460:	mov	r0, #34	; 0x22
   19464:	strb	r3, [r5, r4]
   19468:	ldrd	r4, [sp]
   1946c:	ldr	r6, [sp, #8]
   19470:	add	sp, sp, #12
   19474:	pop	{pc}		; (ldr pc, [sp], #4)
   19478:	cmp	r4, #0
   1947c:	mov	r0, #22
   19480:	strbne	r6, [r5]
   19484:	ldrd	r4, [sp]
   19488:	ldr	r6, [sp, #8]
   1948c:	add	sp, sp, #12
   19490:	pop	{pc}		; (ldr pc, [sp], #4)
   19494:	mov	r1, #0
   19498:	b	10ef8 <setlocale@plt>
   1949c:	cmp	r3, #0
   194a0:	cmpeq	r2, #0
   194a4:	bne	194c8 <__assert_fail@plt+0x8570>
   194a8:	cmp	r1, #0
   194ac:	movlt	r1, #-2147483648	; 0x80000000
   194b0:	movlt	r0, #0
   194b4:	blt	194c4 <__assert_fail@plt+0x856c>
   194b8:	cmpeq	r0, #0
   194bc:	mvnne	r1, #-2147483648	; 0x80000000
   194c0:	mvnne	r0, #0
   194c4:	b	195ac <__assert_fail@plt+0x8654>
   194c8:	sub	sp, sp, #8
   194cc:	push	{sp, lr}
   194d0:	cmp	r1, #0
   194d4:	blt	194f4 <__assert_fail@plt+0x859c>
   194d8:	cmp	r3, #0
   194dc:	blt	19528 <__assert_fail@plt+0x85d0>
   194e0:	bl	195bc <__assert_fail@plt+0x8664>
   194e4:	ldr	lr, [sp, #4]
   194e8:	add	sp, sp, #8
   194ec:	pop	{r2, r3}
   194f0:	bx	lr
   194f4:	rsbs	r0, r0, #0
   194f8:	sbc	r1, r1, r1, lsl #1
   194fc:	cmp	r3, #0
   19500:	blt	1954c <__assert_fail@plt+0x85f4>
   19504:	bl	195bc <__assert_fail@plt+0x8664>
   19508:	ldr	lr, [sp, #4]
   1950c:	add	sp, sp, #8
   19510:	pop	{r2, r3}
   19514:	rsbs	r0, r0, #0
   19518:	sbc	r1, r1, r1, lsl #1
   1951c:	rsbs	r2, r2, #0
   19520:	sbc	r3, r3, r3, lsl #1
   19524:	bx	lr
   19528:	rsbs	r2, r2, #0
   1952c:	sbc	r3, r3, r3, lsl #1
   19530:	bl	195bc <__assert_fail@plt+0x8664>
   19534:	ldr	lr, [sp, #4]
   19538:	add	sp, sp, #8
   1953c:	pop	{r2, r3}
   19540:	rsbs	r0, r0, #0
   19544:	sbc	r1, r1, r1, lsl #1
   19548:	bx	lr
   1954c:	rsbs	r2, r2, #0
   19550:	sbc	r3, r3, r3, lsl #1
   19554:	bl	195bc <__assert_fail@plt+0x8664>
   19558:	ldr	lr, [sp, #4]
   1955c:	add	sp, sp, #8
   19560:	pop	{r2, r3}
   19564:	rsbs	r2, r2, #0
   19568:	sbc	r3, r3, r3, lsl #1
   1956c:	bx	lr
   19570:	cmp	r3, #0
   19574:	cmpeq	r2, #0
   19578:	bne	19590 <__assert_fail@plt+0x8638>
   1957c:	cmp	r1, #0
   19580:	cmpeq	r0, #0
   19584:	mvnne	r1, #0
   19588:	mvnne	r0, #0
   1958c:	b	195ac <__assert_fail@plt+0x8654>
   19590:	sub	sp, sp, #8
   19594:	push	{sp, lr}
   19598:	bl	195bc <__assert_fail@plt+0x8664>
   1959c:	ldr	lr, [sp, #4]
   195a0:	add	sp, sp, #8
   195a4:	pop	{r2, r3}
   195a8:	bx	lr
   195ac:	push	{r1, lr}
   195b0:	mov	r0, #8
   195b4:	bl	10ce8 <raise@plt>
   195b8:	pop	{r1, pc}
   195bc:	cmp	r1, r3
   195c0:	cmpeq	r0, r2
   195c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195c8:	mov	r4, r0
   195cc:	movcc	r0, #0
   195d0:	mov	r5, r1
   195d4:	ldr	lr, [sp, #36]	; 0x24
   195d8:	movcc	r1, r0
   195dc:	bcc	196d8 <__assert_fail@plt+0x8780>
   195e0:	cmp	r3, #0
   195e4:	clzeq	ip, r2
   195e8:	clzne	ip, r3
   195ec:	addeq	ip, ip, #32
   195f0:	cmp	r5, #0
   195f4:	clzeq	r1, r4
   195f8:	addeq	r1, r1, #32
   195fc:	clzne	r1, r5
   19600:	sub	ip, ip, r1
   19604:	sub	sl, ip, #32
   19608:	lsl	r9, r3, ip
   1960c:	rsb	fp, ip, #32
   19610:	orr	r9, r9, r2, lsl sl
   19614:	orr	r9, r9, r2, lsr fp
   19618:	lsl	r8, r2, ip
   1961c:	cmp	r5, r9
   19620:	cmpeq	r4, r8
   19624:	movcc	r0, #0
   19628:	movcc	r1, r0
   1962c:	bcc	19648 <__assert_fail@plt+0x86f0>
   19630:	mov	r0, #1
   19634:	subs	r4, r4, r8
   19638:	lsl	r1, r0, sl
   1963c:	orr	r1, r1, r0, lsr fp
   19640:	lsl	r0, r0, ip
   19644:	sbc	r5, r5, r9
   19648:	cmp	ip, #0
   1964c:	beq	196d8 <__assert_fail@plt+0x8780>
   19650:	lsr	r6, r8, #1
   19654:	orr	r6, r6, r9, lsl #31
   19658:	lsr	r7, r9, #1
   1965c:	mov	r2, ip
   19660:	b	19684 <__assert_fail@plt+0x872c>
   19664:	subs	r3, r4, r6
   19668:	sbc	r8, r5, r7
   1966c:	adds	r3, r3, r3
   19670:	adc	r8, r8, r8
   19674:	adds	r4, r3, #1
   19678:	adc	r5, r8, #0
   1967c:	subs	r2, r2, #1
   19680:	beq	196a0 <__assert_fail@plt+0x8748>
   19684:	cmp	r5, r7
   19688:	cmpeq	r4, r6
   1968c:	bcs	19664 <__assert_fail@plt+0x870c>
   19690:	adds	r4, r4, r4
   19694:	adc	r5, r5, r5
   19698:	subs	r2, r2, #1
   1969c:	bne	19684 <__assert_fail@plt+0x872c>
   196a0:	lsr	r3, r4, ip
   196a4:	orr	r3, r3, r5, lsl fp
   196a8:	lsr	r2, r5, ip
   196ac:	orr	r3, r3, r5, lsr sl
   196b0:	adds	r0, r0, r4
   196b4:	mov	r4, r3
   196b8:	lsl	r3, r2, ip
   196bc:	orr	r3, r3, r4, lsl sl
   196c0:	lsl	ip, r4, ip
   196c4:	orr	r3, r3, r4, lsr fp
   196c8:	adc	r1, r1, r5
   196cc:	subs	r0, r0, ip
   196d0:	mov	r5, r2
   196d4:	sbc	r1, r1, r3
   196d8:	cmp	lr, #0
   196dc:	strdne	r4, [lr]
   196e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   196e8:	mov	r7, r0
   196ec:	ldr	r6, [pc, #72]	; 1973c <__assert_fail@plt+0x87e4>
   196f0:	ldr	r5, [pc, #72]	; 19740 <__assert_fail@plt+0x87e8>
   196f4:	add	r6, pc, r6
   196f8:	add	r5, pc, r5
   196fc:	sub	r6, r6, r5
   19700:	mov	r8, r1
   19704:	mov	r9, r2
   19708:	bl	10cb0 <calloc@plt-0x20>
   1970c:	asrs	r6, r6, #2
   19710:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19714:	mov	r4, #0
   19718:	add	r4, r4, #1
   1971c:	ldr	r3, [r5], #4
   19720:	mov	r2, r9
   19724:	mov	r1, r8
   19728:	mov	r0, r7
   1972c:	blx	r3
   19730:	cmp	r6, r4
   19734:	bne	19718 <__assert_fail@plt+0x87c0>
   19738:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1973c:	andeq	r1, r1, r8, lsl r8
   19740:	andeq	r1, r1, r0, lsl r8
   19744:	bx	lr
   19748:	ldr	r3, [pc, #12]	; 1975c <__assert_fail@plt+0x8804>
   1974c:	mov	r1, #0
   19750:	add	r3, pc, r3
   19754:	ldr	r2, [r3]
   19758:	b	10e98 <__cxa_atexit@plt>
   1975c:	muleq	r1, r8, r9

Disassembly of section .fini:

00019760 <.fini>:
   19760:	push	{r3, lr}
   19764:	pop	{r3, pc}
