
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	1154c <__assert_fail@plt+0x448>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <fdopen@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <fdopen@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	r8, r1, r4, asr #3

00010e40 <fdopen@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <calloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <fputs_unlocked@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <raise@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <strcmp@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <posix_fadvise64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <fflush@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <memmove@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <free@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <_exit@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <memcpy@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <__strtoull_internal@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <memcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <fputc_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <__memcpy_chk@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <fwrite@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <lseek64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #24, 20	; 0x18000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <__ctype_get_mb_cur_max@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #24, 20	; 0x18000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <__fpending@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #24, 20	; 0x18000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <mbrtowc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #24, 20	; 0x18000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <error@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #24, 20	; 0x18000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <getenv@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #24, 20	; 0x18000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <malloc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #24, 20	; 0x18000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__libc_start_main@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #24, 20	; 0x18000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <__freading@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #24, 20	; 0x18000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <__gmon_start__@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #24, 20	; 0x18000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <getopt_long@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #24, 20	; 0x18000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <__ctype_b_loc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #24, 20	; 0x18000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <exit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #24, 20	; 0x18000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <strlen@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #24, 20	; 0x18000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <strchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #24, 20	; 0x18000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #24, 20	; 0x18000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <__sprintf_chk@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #24, 20	; 0x18000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <__cxa_atexit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #24, 20	; 0x18000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <setvbuf@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #24, 20	; 0x18000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <memset@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #24, 20	; 0x18000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <__printf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #24, 20	; 0x18000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <fileno@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #24, 20	; 0x18000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <__fprintf_chk@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #24, 20	; 0x18000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <fclose@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #24, 20	; 0x18000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <fseeko64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <fcntl64@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <__overflow@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #24, 20	; 0x18000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #24, 20	; 0x18000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #24, 20	; 0x18000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <localeconv@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #24, 20	; 0x18000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #24, 20	; 0x18000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <fopen64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #28]!

000110c8 <bindtextdomain@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #24, 20	; 0x18000
   110d0:	ldr	pc, [ip, #20]!

000110d4 <fread_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #24, 20	; 0x18000
   110dc:	ldr	pc, [ip, #12]!

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #24, 20	; 0x18000
   110e8:	ldr	pc, [ip, #4]!

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #94208	; 0x17000
   110f4:	ldr	pc, [ip, #4092]!	; 0xffc

000110f8 <close@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #94208	; 0x17000
   11100:	ldr	pc, [ip, #4084]!	; 0xff4

00011104 <__assert_fail@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #94208	; 0x17000
   1110c:	ldr	pc, [ip, #4076]!	; 0xfec

Disassembly of section .text:

00011110 <.text>:
   11110:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11114:	mov	r5, r0
   11118:	mov	r4, r1
   1111c:	ldr	r0, [r1]
   11120:	strd	r6, [sp, #8]
   11124:	movw	r7, #30940	; 0x78dc
   11128:	movt	r7, #1
   1112c:	strd	r8, [sp, #16]
   11130:	movw	r8, #37236	; 0x9174
   11134:	movt	r8, #2
   11138:	strd	sl, [sp, #24]
   1113c:	movw	r9, #37244	; 0x917c
   11140:	movt	r9, #2
   11144:	str	lr, [sp, #32]
   11148:	sub	sp, sp, #60	; 0x3c
   1114c:	bl	12e6c <__assert_fail@plt+0x1d68>
   11150:	movw	r1, #30296	; 0x7658
   11154:	movt	r1, #1
   11158:	ldr	sl, [pc, #940]	; 1150c <__assert_fail@plt+0x408>
   1115c:	mov	r0, #6
   11160:	bl	11080 <setlocale@plt>
   11164:	movw	r1, #30880	; 0x78a0
   11168:	movt	r1, #1
   1116c:	movw	r0, #30712	; 0x77f8
   11170:	movt	r0, #1
   11174:	bl	110c8 <bindtextdomain@plt>
   11178:	movw	r0, #30712	; 0x77f8
   1117c:	movt	r0, #1
   11180:	bl	10f0c <textdomain@plt>
   11184:	movw	r0, #7744	; 0x1e40
   11188:	movt	r0, #1
   1118c:	bl	1754c <__assert_fail@plt+0x6448>
   11190:	mov	r3, #0
   11194:	mov	r2, #1
   11198:	ldr	r0, [r8]
   1119c:	mov	r1, r3
   111a0:	bl	11014 <setvbuf@plt>
   111a4:	mov	r6, #0
   111a8:	mov	r3, sl
   111ac:	mov	r2, r7
   111b0:	mov	r1, r4
   111b4:	mov	r0, r5
   111b8:	str	r6, [sp]
   111bc:	bl	10fb4 <getopt_long@plt>
   111c0:	cmn	r0, #1
   111c4:	beq	11244 <__assert_fail@plt+0x140>
   111c8:	cmn	r0, #2
   111cc:	beq	11504 <__assert_fail@plt+0x400>
   111d0:	ble	111e4 <__assert_fail@plt+0xe0>
   111d4:	cmp	r0, #114	; 0x72
   111d8:	bne	11230 <__assert_fail@plt+0x12c>
   111dc:	str	r6, [r9]
   111e0:	b	111a4 <__assert_fail@plt+0xa0>
   111e4:	cmn	r0, #3
   111e8:	bne	114fc <__assert_fail@plt+0x3f8>
   111ec:	movw	r2, #30904	; 0x78b8
   111f0:	movt	r2, #1
   111f4:	str	r6, [sp, #8]
   111f8:	movw	r1, #30920	; 0x78c8
   111fc:	movt	r1, #1
   11200:	ldr	r0, [r8]
   11204:	movw	r3, #37128	; 0x9108
   11208:	movt	r3, #2
   1120c:	stm	sp, {r1, r2}
   11210:	movw	r2, #30708	; 0x77f4
   11214:	movt	r2, #1
   11218:	movw	r1, #30220	; 0x760c
   1121c:	movt	r1, #1
   11220:	ldr	r3, [r3]
   11224:	bl	15604 <__assert_fail@plt+0x4500>
   11228:	mov	r0, r6
   1122c:	bl	10fcc <exit@plt>
   11230:	cmp	r0, #115	; 0x73
   11234:	bne	114fc <__assert_fail@plt+0x3f8>
   11238:	mov	r3, #1
   1123c:	str	r3, [r9]
   11240:	b	111a4 <__assert_fail@plt+0xa0>
   11244:	movw	r3, #37216	; 0x9160
   11248:	movt	r3, #2
   1124c:	add	r2, r4, r5, lsl #2
   11250:	mov	r1, r3
   11254:	ldr	r3, [r3]
   11258:	str	r2, [sp, #16]
   1125c:	cmp	r3, r5
   11260:	bne	11278 <__assert_fail@plt+0x174>
   11264:	add	r2, r2, #4
   11268:	str	r2, [sp, #16]
   1126c:	movw	r2, #30944	; 0x78e0
   11270:	movt	r2, #1
   11274:	str	r2, [r4, r5, lsl #2]
   11278:	add	r4, r4, r3, lsl #2
   1127c:	ldr	r3, [sp, #16]
   11280:	movw	r8, #37244	; 0x917c
   11284:	movt	r8, #2
   11288:	cmp	r3, r4
   1128c:	bls	1144c <__assert_fail@plt+0x348>
   11290:	movw	r3, #30944	; 0x78e0
   11294:	movt	r3, #1
   11298:	mov	fp, r1
   1129c:	str	r3, [sp, #20]
   112a0:	movw	r3, #31128	; 0x7998
   112a4:	movt	r3, #1
   112a8:	str	r5, [sp, #24]
   112ac:	str	r3, [sp, #36]	; 0x24
   112b0:	movw	r3, #30936	; 0x78d8
   112b4:	movt	r3, #1
   112b8:	str	r3, [sp, #32]
   112bc:	mov	r3, #1
   112c0:	str	r3, [sp, #28]
   112c4:	b	11380 <__assert_fail@plt+0x27c>
   112c8:	movw	r3, #37232	; 0x9170
   112cc:	movt	r3, #2
   112d0:	ldr	r9, [r3]
   112d4:	mov	r3, #1
   112d8:	mov	r1, #2
   112dc:	movw	r5, #30084	; 0x7584
   112e0:	movt	r5, #1
   112e4:	strb	r3, [r8, #4]
   112e8:	add	r7, sp, #40	; 0x28
   112ec:	mov	r0, r9
   112f0:	bl	11f30 <__assert_fail@plt+0xe2c>
   112f4:	ldr	r3, [r8]
   112f8:	mov	r0, r9
   112fc:	mov	r1, r7
   11300:	add	r2, sp, #48	; 0x30
   11304:	add	r3, r5, r3, lsl #2
   11308:	ldr	r3, [r3, #120]	; 0x78
   1130c:	blx	r3
   11310:	subs	sl, r0, #0
   11314:	beq	11320 <__assert_fail@plt+0x21c>
   11318:	bl	10ff0 <__errno_location@plt>
   1131c:	ldr	sl, [r0]
   11320:	mov	r0, r9
   11324:	bl	110b0 <clearerr_unlocked@plt>
   11328:	cmp	sl, #0
   1132c:	bne	11420 <__assert_fail@plt+0x31c>
   11330:	ldr	ip, [r8]
   11334:	mov	r2, r7
   11338:	mov	r0, r6
   1133c:	mov	lr, #10
   11340:	mov	r3, #0
   11344:	ldr	r1, [fp]
   11348:	str	lr, [sp]
   1134c:	ldrd	r6, [sp, #48]	; 0x30
   11350:	add	r5, r5, ip, lsl #2
   11354:	ldr	ip, [sp, #24]
   11358:	ldr	r5, [r5, #128]	; 0x80
   1135c:	strd	r6, [sp, #8]
   11360:	subs	r1, r1, ip
   11364:	movne	r1, #1
   11368:	str	r1, [sp, #4]
   1136c:	mov	r1, r3
   11370:	blx	r5
   11374:	ldr	r3, [sp, #16]
   11378:	cmp	r3, r4
   1137c:	bls	11454 <__assert_fail@plt+0x350>
   11380:	ldr	r6, [r4], #4
   11384:	ldr	r1, [sp, #20]
   11388:	mov	r0, r6
   1138c:	bl	10e70 <strcmp@plt>
   11390:	cmp	r0, #0
   11394:	beq	112c8 <__assert_fail@plt+0x1c4>
   11398:	mov	r0, r6
   1139c:	ldr	r1, [sp, #32]
   113a0:	bl	12094 <__assert_fail@plt+0xf90>
   113a4:	subs	r9, r0, #0
   113a8:	beq	11484 <__assert_fail@plt+0x380>
   113ac:	mov	r1, #2
   113b0:	movw	r5, #30084	; 0x7584
   113b4:	movt	r5, #1
   113b8:	add	r7, sp, #40	; 0x28
   113bc:	bl	11f30 <__assert_fail@plt+0xe2c>
   113c0:	ldr	r3, [r8]
   113c4:	mov	r1, r7
   113c8:	add	r2, sp, #48	; 0x30
   113cc:	mov	r0, r9
   113d0:	add	r3, r5, r3, lsl #2
   113d4:	ldr	r3, [r3, #120]	; 0x78
   113d8:	blx	r3
   113dc:	cmp	r0, #0
   113e0:	bne	11400 <__assert_fail@plt+0x2fc>
   113e4:	mov	r0, r9
   113e8:	bl	11f80 <__assert_fail@plt+0xe7c>
   113ec:	cmp	r0, #0
   113f0:	beq	11330 <__assert_fail@plt+0x22c>
   113f4:	bl	10ff0 <__errno_location@plt>
   113f8:	ldr	sl, [r0]
   113fc:	b	11328 <__assert_fail@plt+0x224>
   11400:	bl	10ff0 <__errno_location@plt>
   11404:	ldr	sl, [r0]
   11408:	mov	r0, r9
   1140c:	bl	11f80 <__assert_fail@plt+0xe7c>
   11410:	cmp	r0, #0
   11414:	beq	11328 <__assert_fail@plt+0x224>
   11418:	cmp	sl, #0
   1141c:	beq	113f4 <__assert_fail@plt+0x2f0>
   11420:	mov	r0, #0
   11424:	mov	r2, r6
   11428:	mov	r1, #3
   1142c:	str	r0, [sp, #28]
   11430:	bl	14f84 <__assert_fail@plt+0x3e80>
   11434:	mov	r3, r0
   11438:	mov	r1, sl
   1143c:	ldr	r2, [sp, #36]	; 0x24
   11440:	mov	r0, #0
   11444:	bl	10f6c <error@plt>
   11448:	b	11374 <__assert_fail@plt+0x270>
   1144c:	mov	r3, #1
   11450:	str	r3, [sp, #28]
   11454:	ldrb	r3, [r8, #4]
   11458:	cmp	r3, #0
   1145c:	bne	114b8 <__assert_fail@plt+0x3b4>
   11460:	ldr	r3, [sp, #28]
   11464:	eor	r0, r3, #1
   11468:	add	sp, sp, #60	; 0x3c
   1146c:	ldrd	r4, [sp]
   11470:	ldrd	r6, [sp, #8]
   11474:	ldrd	r8, [sp, #16]
   11478:	ldrd	sl, [sp, #24]
   1147c:	add	sp, sp, #32
   11480:	pop	{pc}		; (ldr pc, [sp], #4)
   11484:	bl	10ff0 <__errno_location@plt>
   11488:	ldr	r5, [r0]
   1148c:	mov	r2, r6
   11490:	mov	r1, #3
   11494:	mov	r0, r9
   11498:	str	r9, [sp, #28]
   1149c:	bl	14f84 <__assert_fail@plt+0x3e80>
   114a0:	mov	r3, r0
   114a4:	mov	r0, r9
   114a8:	ldr	r2, [sp, #36]	; 0x24
   114ac:	mov	r1, r5
   114b0:	bl	10f6c <error@plt>
   114b4:	b	11374 <__assert_fail@plt+0x270>
   114b8:	movw	r3, #37232	; 0x9170
   114bc:	movt	r3, #2
   114c0:	ldr	r0, [r3]
   114c4:	bl	11f80 <__assert_fail@plt+0xe7c>
   114c8:	cmn	r0, #1
   114cc:	bne	11460 <__assert_fail@plt+0x35c>
   114d0:	bl	10ff0 <__errno_location@plt>
   114d4:	ldr	r4, [r0]
   114d8:	mov	r2, #5
   114dc:	movw	r1, #30948	; 0x78e4
   114e0:	movt	r1, #1
   114e4:	mov	r0, #0
   114e8:	bl	10ef4 <dcgettext@plt>
   114ec:	mov	r2, r0
   114f0:	mov	r0, #1
   114f4:	mov	r1, r4
   114f8:	bl	10f6c <error@plt>
   114fc:	mov	r0, #1
   11500:	bl	11ac0 <__assert_fail@plt+0x9bc>
   11504:	mov	r0, r6
   11508:	bl	11ac0 <__assert_fail@plt+0x9bc>
   1150c:			; <UNDEFINED> instruction: 0x000175bc
   11510:	mov	fp, #0
   11514:	mov	lr, #0
   11518:	pop	{r1}		; (ldr r1, [sp], #4)
   1151c:	mov	r2, sp
   11520:	push	{r2}		; (str r2, [sp, #-4]!)
   11524:	push	{r0}		; (str r0, [sp, #-4]!)
   11528:	ldr	ip, [pc, #16]	; 11540 <__assert_fail@plt+0x43c>
   1152c:	push	{ip}		; (str ip, [sp, #-4]!)
   11530:	ldr	r0, [pc, #12]	; 11544 <__assert_fail@plt+0x440>
   11534:	ldr	r3, [pc, #12]	; 11548 <__assert_fail@plt+0x444>
   11538:	bl	10f90 <__libc_start_main@plt>
   1153c:	bl	110ec <abort@plt>
   11540:	andeq	r7, r1, r8, asr #10
   11544:	andeq	r1, r1, r0, lsl r1
   11548:	andeq	r7, r1, r8, ror #9
   1154c:	ldr	r3, [pc, #20]	; 11568 <__assert_fail@plt+0x464>
   11550:	ldr	r2, [pc, #20]	; 1156c <__assert_fail@plt+0x468>
   11554:	add	r3, pc, r3
   11558:	ldr	r2, [r3, r2]
   1155c:	cmp	r2, #0
   11560:	bxeq	lr
   11564:	b	10fa8 <__gmon_start__@plt>
   11568:	andeq	r7, r1, r4, lsr #21
   1156c:	strdeq	r0, [r0], -ip
   11570:	ldr	r0, [pc, #24]	; 11590 <__assert_fail@plt+0x48c>
   11574:	ldr	r3, [pc, #24]	; 11594 <__assert_fail@plt+0x490>
   11578:	cmp	r3, r0
   1157c:	bxeq	lr
   11580:	ldr	r3, [pc, #16]	; 11598 <__assert_fail@plt+0x494>
   11584:	cmp	r3, #0
   11588:	bxeq	lr
   1158c:	bx	r3
   11590:	andeq	r9, r2, r4, asr r1
   11594:	andeq	r9, r2, r4, asr r1
   11598:	andeq	r0, r0, r0
   1159c:	ldr	r0, [pc, #36]	; 115c8 <__assert_fail@plt+0x4c4>
   115a0:	ldr	r1, [pc, #36]	; 115cc <__assert_fail@plt+0x4c8>
   115a4:	sub	r1, r1, r0
   115a8:	asr	r1, r1, #2
   115ac:	add	r1, r1, r1, lsr #31
   115b0:	asrs	r1, r1, #1
   115b4:	bxeq	lr
   115b8:	ldr	r3, [pc, #16]	; 115d0 <__assert_fail@plt+0x4cc>
   115bc:	cmp	r3, #0
   115c0:	bxeq	lr
   115c4:	bx	r3
   115c8:	andeq	r9, r2, r4, asr r1
   115cc:	andeq	r9, r2, r4, asr r1
   115d0:	andeq	r0, r0, r0
   115d4:	push	{r4, lr}
   115d8:	ldr	r4, [pc, #24]	; 115f8 <__assert_fail@plt+0x4f4>
   115dc:	ldrb	r3, [r4]
   115e0:	cmp	r3, #0
   115e4:	popne	{r4, pc}
   115e8:	bl	11570 <__assert_fail@plt+0x46c>
   115ec:	mov	r3, #1
   115f0:	strb	r3, [r4]
   115f4:	pop	{r4, pc}
   115f8:	andeq	r9, r2, r8, ror r1
   115fc:	b	1159c <__assert_fail@plt+0x498>
   11600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11604:	strd	r6, [sp, #8]
   11608:	mov	r7, r0
   1160c:	mov	r0, #32768	; 0x8000
   11610:	strd	r8, [sp, #16]
   11614:	mov	r9, r2
   11618:	strd	sl, [sp, #24]
   1161c:	str	lr, [sp, #32]
   11620:	sub	sp, sp, #12
   11624:	str	r1, [sp, #4]
   11628:	bl	165ec <__assert_fail@plt+0x54e8>
   1162c:	subs	r8, r0, #0
   11630:	beq	11784 <__assert_fail@plt+0x680>
   11634:	add	r6, r8, #32512	; 0x7f00
   11638:	mov	r4, #0
   1163c:	add	r6, r6, #255	; 0xff
   11640:	mov	sl, #0
   11644:	mov	fp, #0
   11648:	mov	r5, #0
   1164c:	b	11664 <__assert_fail@plt+0x560>
   11650:	cmp	r0, #0
   11654:	ldr	r3, [r7]
   11658:	beq	11710 <__assert_fail@plt+0x60c>
   1165c:	tst	r3, #16
   11660:	bne	1171c <__assert_fail@plt+0x618>
   11664:	rsb	r2, r5, #32768	; 0x8000
   11668:	add	r0, r8, r5
   1166c:	mov	r3, r7
   11670:	mov	r1, #1
   11674:	bl	110d4 <fread_unlocked@plt>
   11678:	add	r5, r5, r0
   1167c:	cmp	r5, #32768	; 0x8000
   11680:	bne	11650 <__assert_fail@plt+0x54c>
   11684:	sub	r2, r8, #1
   11688:	lsl	r3, r4, #15
   1168c:	ldrb	r1, [r2, #1]!
   11690:	uxth	r3, r3
   11694:	add	r3, r3, r4, lsr #1
   11698:	cmp	r6, r2
   1169c:	add	r3, r3, r1
   116a0:	uxth	r4, r3
   116a4:	bne	11688 <__assert_fail@plt+0x584>
   116a8:	mov	r2, #32768	; 0x8000
   116ac:	mov	r3, #0
   116b0:	adds	r0, sl, r2
   116b4:	mov	r2, #0
   116b8:	adcs	r1, fp, r3
   116bc:	mov	r3, #0
   116c0:	movcs	r2, #1
   116c4:	movcs	r3, #0
   116c8:	orrs	r3, r2, r3
   116cc:	mov	sl, r0
   116d0:	mov	fp, r1
   116d4:	beq	11648 <__assert_fail@plt+0x544>
   116d8:	bl	10ff0 <__errno_location@plt>
   116dc:	mvn	r4, #0
   116e0:	mov	r3, #75	; 0x4b
   116e4:	str	r3, [r0]
   116e8:	mov	r0, r8
   116ec:	bl	12140 <__assert_fail@plt+0x103c>
   116f0:	mov	r0, r4
   116f4:	add	sp, sp, #12
   116f8:	ldrd	r4, [sp]
   116fc:	ldrd	r6, [sp, #8]
   11700:	ldrd	r8, [sp, #16]
   11704:	ldrd	sl, [sp, #24]
   11708:	add	sp, sp, #32
   1170c:	pop	{pc}		; (ldr pc, [sp], #4)
   11710:	tst	r3, #32
   11714:	mvnne	r4, #0
   11718:	bne	116e8 <__assert_fail@plt+0x5e4>
   1171c:	mov	r3, #0
   11720:	adds	r0, sl, r5
   11724:	adcs	r1, fp, r3
   11728:	mov	r2, #0
   1172c:	mov	r3, #0
   11730:	movcs	r2, #1
   11734:	movcs	r3, #0
   11738:	cmp	r5, #0
   1173c:	subne	lr, r8, #1
   11740:	addne	r5, lr, r5
   11744:	beq	11770 <__assert_fail@plt+0x66c>
   11748:	lsl	ip, r4, #15
   1174c:	ldrb	r6, [lr, #1]!
   11750:	uxth	ip, ip
   11754:	add	ip, ip, r4, lsr #1
   11758:	cmp	r5, lr
   1175c:	add	ip, ip, r6
   11760:	uxth	r4, ip
   11764:	bne	11748 <__assert_fail@plt+0x644>
   11768:	orrs	r3, r2, r3
   1176c:	bne	116d8 <__assert_fail@plt+0x5d4>
   11770:	ldr	r3, [sp, #4]
   11774:	str	r4, [r3]
   11778:	mov	r4, #0
   1177c:	strd	r0, [r9]
   11780:	b	116e8 <__assert_fail@plt+0x5e4>
   11784:	mvn	r4, #0
   11788:	b	116f0 <__assert_fail@plt+0x5ec>
   1178c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11790:	strd	r6, [sp, #8]
   11794:	mov	r7, r0
   11798:	mov	r0, #32768	; 0x8000
   1179c:	strd	r8, [sp, #16]
   117a0:	mov	r9, r2
   117a4:	strd	sl, [sp, #24]
   117a8:	str	lr, [sp, #32]
   117ac:	sub	sp, sp, #12
   117b0:	str	r1, [sp, #4]
   117b4:	bl	165ec <__assert_fail@plt+0x54e8>
   117b8:	subs	r8, r0, #0
   117bc:	beq	11900 <__assert_fail@plt+0x7fc>
   117c0:	add	r6, r8, #32512	; 0x7f00
   117c4:	mov	r4, #0
   117c8:	add	r6, r6, #255	; 0xff
   117cc:	mov	sl, #0
   117d0:	mov	fp, #0
   117d4:	mov	r5, #0
   117d8:	b	117f0 <__assert_fail@plt+0x6ec>
   117dc:	cmp	r0, #0
   117e0:	ldr	r3, [r7]
   117e4:	beq	1188c <__assert_fail@plt+0x788>
   117e8:	tst	r3, #16
   117ec:	bne	11898 <__assert_fail@plt+0x794>
   117f0:	rsb	r2, r5, #32768	; 0x8000
   117f4:	add	r0, r8, r5
   117f8:	mov	r3, r7
   117fc:	mov	r1, #1
   11800:	bl	110d4 <fread_unlocked@plt>
   11804:	add	r5, r5, r0
   11808:	cmp	r5, #32768	; 0x8000
   1180c:	bne	117dc <__assert_fail@plt+0x6d8>
   11810:	sub	r3, r8, #1
   11814:	ldrb	r2, [r3, #1]!
   11818:	cmp	r6, r3
   1181c:	add	r4, r4, r2
   11820:	bne	11814 <__assert_fail@plt+0x710>
   11824:	mov	r2, #32768	; 0x8000
   11828:	mov	r3, #0
   1182c:	adds	r0, sl, r2
   11830:	mov	r2, #0
   11834:	adcs	r1, fp, r3
   11838:	mov	r3, #0
   1183c:	movcs	r2, #1
   11840:	movcs	r3, #0
   11844:	orrs	r3, r2, r3
   11848:	mov	sl, r0
   1184c:	mov	fp, r1
   11850:	beq	117d4 <__assert_fail@plt+0x6d0>
   11854:	bl	10ff0 <__errno_location@plt>
   11858:	mvn	r5, #0
   1185c:	mov	r3, #75	; 0x4b
   11860:	str	r3, [r0]
   11864:	mov	r0, r8
   11868:	bl	12140 <__assert_fail@plt+0x103c>
   1186c:	mov	r0, r5
   11870:	add	sp, sp, #12
   11874:	ldrd	r4, [sp]
   11878:	ldrd	r6, [sp, #8]
   1187c:	ldrd	r8, [sp, #16]
   11880:	ldrd	sl, [sp, #24]
   11884:	add	sp, sp, #32
   11888:	pop	{pc}		; (ldr pc, [sp], #4)
   1188c:	tst	r3, #32
   11890:	mvnne	r5, #0
   11894:	bne	11864 <__assert_fail@plt+0x760>
   11898:	mov	r1, #0
   1189c:	adds	r2, sl, r5
   118a0:	adcs	r3, fp, r1
   118a4:	mov	r0, #0
   118a8:	mov	r1, #0
   118ac:	movcs	r0, #1
   118b0:	movcs	r1, #0
   118b4:	cmp	r5, #0
   118b8:	subne	ip, r8, #1
   118bc:	addne	r5, ip, r5
   118c0:	beq	118dc <__assert_fail@plt+0x7d8>
   118c4:	ldrb	lr, [ip, #1]!
   118c8:	cmp	r5, ip
   118cc:	add	r4, r4, lr
   118d0:	bne	118c4 <__assert_fail@plt+0x7c0>
   118d4:	orrs	r1, r0, r1
   118d8:	bne	11854 <__assert_fail@plt+0x750>
   118dc:	lsr	r1, r4, #16
   118e0:	mov	r5, #0
   118e4:	uxtah	r4, r1, r4
   118e8:	asr	r1, r4, #16
   118ec:	uxtah	r4, r1, r4
   118f0:	ldr	r1, [sp, #4]
   118f4:	str	r4, [r1]
   118f8:	strd	r2, [r9]
   118fc:	b	11864 <__assert_fail@plt+0x760>
   11900:	mvn	r5, #0
   11904:	b	1186c <__assert_fail@plt+0x768>
   11908:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1190c:	mov	r3, #0
   11910:	strd	r6, [sp, #8]
   11914:	mov	r7, r0
   11918:	strd	r8, [sp, #16]
   1191c:	mov	r8, #1024	; 0x400
   11920:	mov	r9, #0
   11924:	strd	sl, [sp, #24]
   11928:	mov	sl, #1
   1192c:	mov	fp, #0
   11930:	str	lr, [sp, #32]
   11934:	sub	sp, sp, #676	; 0x2a4
   11938:	ldr	r6, [r2]
   1193c:	add	r1, sp, #720	; 0x2d0
   11940:	add	r2, sp, #20
   11944:	strd	sl, [sp]
   11948:	ldrb	r5, [sp, #716]	; 0x2cc
   1194c:	strd	r8, [sp, #8]
   11950:	ldrd	r0, [r1]
   11954:	ldrb	r4, [sp, #712]	; 0x2c8
   11958:	bl	12270 <__assert_fail@plt+0x116c>
   1195c:	mov	r3, r0
   11960:	mov	r2, r6
   11964:	movw	r1, #30064	; 0x7570
   11968:	movt	r1, #1
   1196c:	mov	r0, #1
   11970:	bl	1102c <__printf_chk@plt>
   11974:	cmp	r5, #0
   11978:	bne	119c0 <__assert_fail@plt+0x8bc>
   1197c:	movw	r3, #37236	; 0x9174
   11980:	movt	r3, #2
   11984:	ldr	r0, [r3]
   11988:	ldr	r3, [r0, #20]
   1198c:	ldr	r2, [r0, #24]
   11990:	cmp	r3, r2
   11994:	addcc	r2, r3, #1
   11998:	strcc	r2, [r0, #20]
   1199c:	strbcc	r4, [r3]
   119a0:	bcs	119d8 <__assert_fail@plt+0x8d4>
   119a4:	add	sp, sp, #676	; 0x2a4
   119a8:	ldrd	r4, [sp]
   119ac:	ldrd	r6, [sp, #8]
   119b0:	ldrd	r8, [sp, #16]
   119b4:	ldrd	sl, [sp, #24]
   119b8:	add	sp, sp, #32
   119bc:	pop	{pc}		; (ldr pc, [sp], #4)
   119c0:	mov	r2, r7
   119c4:	movw	r1, #32516	; 0x7f04
   119c8:	movt	r1, #1
   119cc:	mov	r0, #1
   119d0:	bl	1102c <__printf_chk@plt>
   119d4:	b	1197c <__assert_fail@plt+0x878>
   119d8:	mov	r1, r4
   119dc:	bl	11074 <__overflow@plt>
   119e0:	b	119a4 <__assert_fail@plt+0x8a0>
   119e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   119e8:	mov	r3, #0
   119ec:	strd	r6, [sp, #8]
   119f0:	mov	r7, r0
   119f4:	strd	r8, [sp, #16]
   119f8:	mov	r8, #512	; 0x200
   119fc:	mov	r9, #0
   11a00:	strd	sl, [sp, #24]
   11a04:	mov	sl, #1
   11a08:	mov	fp, #0
   11a0c:	str	lr, [sp, #32]
   11a10:	sub	sp, sp, #676	; 0x2a4
   11a14:	ldr	r6, [r2]
   11a18:	add	r1, sp, #720	; 0x2d0
   11a1c:	add	r2, sp, #20
   11a20:	strd	sl, [sp]
   11a24:	ldrb	r5, [sp, #716]	; 0x2cc
   11a28:	strd	r8, [sp, #8]
   11a2c:	ldrd	r0, [r1]
   11a30:	ldrb	r4, [sp, #712]	; 0x2c8
   11a34:	bl	12270 <__assert_fail@plt+0x116c>
   11a38:	mov	r3, r0
   11a3c:	mov	r2, r6
   11a40:	movw	r1, #30076	; 0x757c
   11a44:	movt	r1, #1
   11a48:	mov	r0, #1
   11a4c:	bl	1102c <__printf_chk@plt>
   11a50:	cmp	r5, #0
   11a54:	bne	11a9c <__assert_fail@plt+0x998>
   11a58:	movw	r3, #37236	; 0x9174
   11a5c:	movt	r3, #2
   11a60:	ldr	r0, [r3]
   11a64:	ldr	r3, [r0, #20]
   11a68:	ldr	r2, [r0, #24]
   11a6c:	cmp	r3, r2
   11a70:	addcc	r2, r3, #1
   11a74:	strcc	r2, [r0, #20]
   11a78:	strbcc	r4, [r3]
   11a7c:	bcs	11ab4 <__assert_fail@plt+0x9b0>
   11a80:	add	sp, sp, #676	; 0x2a4
   11a84:	ldrd	r4, [sp]
   11a88:	ldrd	r6, [sp, #8]
   11a8c:	ldrd	r8, [sp, #16]
   11a90:	ldrd	sl, [sp, #24]
   11a94:	add	sp, sp, #32
   11a98:	pop	{pc}		; (ldr pc, [sp], #4)
   11a9c:	mov	r2, r7
   11aa0:	movw	r1, #32516	; 0x7f04
   11aa4:	movt	r1, #1
   11aa8:	mov	r0, #1
   11aac:	bl	1102c <__printf_chk@plt>
   11ab0:	b	11a58 <__assert_fail@plt+0x954>
   11ab4:	mov	r1, r4
   11ab8:	bl	11074 <__overflow@plt>
   11abc:	b	11a80 <__assert_fail@plt+0x97c>
   11ac0:	subs	r6, r0, #0
   11ac4:	str	r7, [sp, #-8]!
   11ac8:	str	lr, [sp, #4]
   11acc:	sub	sp, sp, #56	; 0x38
   11ad0:	beq	11b18 <__assert_fail@plt+0xa14>
   11ad4:	movw	r3, #37224	; 0x9168
   11ad8:	movt	r3, #2
   11adc:	ldr	r4, [r3]
   11ae0:	mov	r2, #5
   11ae4:	movw	r1, #30224	; 0x7610
   11ae8:	movt	r1, #1
   11aec:	mov	r0, #0
   11af0:	bl	10ef4 <dcgettext@plt>
   11af4:	movw	r3, #37260	; 0x918c
   11af8:	movt	r3, #2
   11afc:	mov	r2, r0
   11b00:	mov	r1, #1
   11b04:	ldr	r3, [r3]
   11b08:	mov	r0, r4
   11b0c:	bl	11044 <__fprintf_chk@plt>
   11b10:	mov	r0, r6
   11b14:	bl	10fcc <exit@plt>
   11b18:	mov	r2, #5
   11b1c:	movw	r1, #30264	; 0x7638
   11b20:	movt	r1, #1
   11b24:	movw	r7, #37236	; 0x9174
   11b28:	movt	r7, #2
   11b2c:	bl	10ef4 <dcgettext@plt>
   11b30:	movw	r3, #37260	; 0x918c
   11b34:	movt	r3, #2
   11b38:	mov	r1, r0
   11b3c:	mov	r0, #1
   11b40:	ldr	r2, [r3]
   11b44:	bl	1102c <__printf_chk@plt>
   11b48:	mov	r2, #5
   11b4c:	movw	r1, #30300	; 0x765c
   11b50:	movt	r1, #1
   11b54:	mov	r0, r6
   11b58:	bl	10ef4 <dcgettext@plt>
   11b5c:	mov	r1, r0
   11b60:	mov	r3, #16
   11b64:	movw	r2, #30340	; 0x7684
   11b68:	movt	r2, #1
   11b6c:	mov	r0, #1
   11b70:	bl	1102c <__printf_chk@plt>
   11b74:	mov	r2, #5
   11b78:	movw	r1, #30344	; 0x7688
   11b7c:	movt	r1, #1
   11b80:	mov	r0, r6
   11b84:	bl	10ef4 <dcgettext@plt>
   11b88:	ldr	r1, [r7]
   11b8c:	bl	10e58 <fputs_unlocked@plt>
   11b90:	mov	r2, #5
   11b94:	movw	r1, #30400	; 0x76c0
   11b98:	movt	r1, #1
   11b9c:	mov	r0, r6
   11ba0:	bl	10ef4 <dcgettext@plt>
   11ba4:	ldr	r1, [r7]
   11ba8:	bl	10e58 <fputs_unlocked@plt>
   11bac:	mov	r2, #5
   11bb0:	movw	r1, #30540	; 0x774c
   11bb4:	movt	r1, #1
   11bb8:	mov	r0, r6
   11bbc:	bl	10ef4 <dcgettext@plt>
   11bc0:	ldr	r1, [r7]
   11bc4:	bl	10e58 <fputs_unlocked@plt>
   11bc8:	mov	r2, #5
   11bcc:	movw	r1, #30588	; 0x777c
   11bd0:	movt	r1, #1
   11bd4:	mov	r0, r6
   11bd8:	bl	10ef4 <dcgettext@plt>
   11bdc:	ldr	r1, [r7]
   11be0:	bl	10e58 <fputs_unlocked@plt>
   11be4:	movw	lr, #30084	; 0x7584
   11be8:	movt	lr, #1
   11bec:	ldr	ip, [lr]
   11bf0:	ldr	r4, [lr, #4]
   11bf4:	ldrd	r8, [lr, #8]
   11bf8:	subs	r1, ip, #0
   11bfc:	str	ip, [sp]
   11c00:	ldrd	r2, [lr, #16]
   11c04:	str	r4, [sp, #4]
   11c08:	ldrd	r4, [lr, #24]
   11c0c:	strd	r8, [sp, #8]
   11c10:	ldrd	r8, [lr, #32]
   11c14:	strd	r2, [sp, #16]
   11c18:	ldrd	r2, [lr, #40]	; 0x28
   11c1c:	strd	r4, [sp, #24]
   11c20:	ldrd	r4, [lr, #48]	; 0x30
   11c24:	strd	r8, [sp, #32]
   11c28:	strd	r2, [sp, #40]	; 0x28
   11c2c:	strd	r4, [sp, #48]	; 0x30
   11c30:	movwne	r5, #30220	; 0x760c
   11c34:	mov	r4, sp
   11c38:	movtne	r5, #1
   11c3c:	bne	11d34 <__assert_fail@plt+0xc30>
   11c40:	ldr	r4, [r4, #4]
   11c44:	movw	r1, #30644	; 0x77b4
   11c48:	movt	r1, #1
   11c4c:	mov	r2, #5
   11c50:	cmp	r4, #0
   11c54:	beq	11d48 <__assert_fail@plt+0xc44>
   11c58:	mov	r0, #0
   11c5c:	bl	10ef4 <dcgettext@plt>
   11c60:	mov	r1, r0
   11c64:	movw	r3, #30668	; 0x77cc
   11c68:	movt	r3, #1
   11c6c:	movw	r2, #30708	; 0x77f4
   11c70:	movt	r2, #1
   11c74:	mov	r0, #1
   11c78:	bl	1102c <__printf_chk@plt>
   11c7c:	mov	r1, #0
   11c80:	mov	r0, #5
   11c84:	bl	11080 <setlocale@plt>
   11c88:	cmp	r0, #0
   11c8c:	movweq	r5, #30220	; 0x760c
   11c90:	movteq	r5, #1
   11c94:	beq	11cb8 <__assert_fail@plt+0xbb4>
   11c98:	movw	r1, #30724	; 0x7804
   11c9c:	movt	r1, #1
   11ca0:	mov	r2, #3
   11ca4:	movw	r5, #30220	; 0x760c
   11ca8:	movt	r5, #1
   11cac:	bl	110e0 <strncmp@plt>
   11cb0:	cmp	r0, #0
   11cb4:	bne	11e00 <__assert_fail@plt+0xcfc>
   11cb8:	mov	r2, #5
   11cbc:	movw	r1, #30800	; 0x7850
   11cc0:	movt	r1, #1
   11cc4:	mov	r0, #0
   11cc8:	bl	10ef4 <dcgettext@plt>
   11ccc:	mov	r1, r0
   11cd0:	movw	r3, #30220	; 0x760c
   11cd4:	movt	r3, #1
   11cd8:	movw	r2, #30668	; 0x77cc
   11cdc:	movt	r2, #1
   11ce0:	mov	r0, #1
   11ce4:	bl	1102c <__printf_chk@plt>
   11ce8:	mov	r2, #5
   11cec:	movw	r1, #30828	; 0x786c
   11cf0:	movt	r1, #1
   11cf4:	mov	r0, #0
   11cf8:	bl	10ef4 <dcgettext@plt>
   11cfc:	movw	r2, #30972	; 0x78fc
   11d00:	movt	r2, #1
   11d04:	cmp	r4, r5
   11d08:	movw	r3, #30296	; 0x7658
   11d0c:	movt	r3, #1
   11d10:	mov	r1, r0
   11d14:	moveq	r3, r2
   11d18:	mov	r2, r4
   11d1c:	mov	r0, #1
   11d20:	bl	1102c <__printf_chk@plt>
   11d24:	b	11b10 <__assert_fail@plt+0xa0c>
   11d28:	ldr	r1, [r4, #8]!
   11d2c:	cmp	r1, #0
   11d30:	beq	11c40 <__assert_fail@plt+0xb3c>
   11d34:	mov	r0, r5
   11d38:	bl	10e70 <strcmp@plt>
   11d3c:	cmp	r0, #0
   11d40:	bne	11d28 <__assert_fail@plt+0xc24>
   11d44:	b	11c40 <__assert_fail@plt+0xb3c>
   11d48:	mov	r0, r4
   11d4c:	bl	10ef4 <dcgettext@plt>
   11d50:	mov	r1, r0
   11d54:	movw	r3, #30668	; 0x77cc
   11d58:	movt	r3, #1
   11d5c:	movw	r2, #30708	; 0x77f4
   11d60:	movt	r2, #1
   11d64:	mov	r0, #1
   11d68:	bl	1102c <__printf_chk@plt>
   11d6c:	mov	r1, r4
   11d70:	mov	r0, #5
   11d74:	bl	11080 <setlocale@plt>
   11d78:	cmp	r0, #0
   11d7c:	beq	11d98 <__assert_fail@plt+0xc94>
   11d80:	movw	r1, #30724	; 0x7804
   11d84:	movt	r1, #1
   11d88:	mov	r2, #3
   11d8c:	bl	110e0 <strncmp@plt>
   11d90:	cmp	r0, #0
   11d94:	bne	11df4 <__assert_fail@plt+0xcf0>
   11d98:	mov	r2, #5
   11d9c:	movw	r1, #30800	; 0x7850
   11da0:	movt	r1, #1
   11da4:	mov	r0, #0
   11da8:	bl	10ef4 <dcgettext@plt>
   11dac:	mov	r1, r0
   11db0:	movw	r3, #30220	; 0x760c
   11db4:	movt	r3, #1
   11db8:	movw	r2, #30668	; 0x77cc
   11dbc:	movt	r2, #1
   11dc0:	mov	r0, #1
   11dc4:	bl	1102c <__printf_chk@plt>
   11dc8:	movw	r1, #30828	; 0x786c
   11dcc:	movt	r1, #1
   11dd0:	mov	r2, #5
   11dd4:	mov	r0, #0
   11dd8:	bl	10ef4 <dcgettext@plt>
   11ddc:	movw	r4, #30220	; 0x760c
   11de0:	movt	r4, #1
   11de4:	movw	r3, #30972	; 0x78fc
   11de8:	movt	r3, #1
   11dec:	mov	r1, r0
   11df0:	b	11d18 <__assert_fail@plt+0xc14>
   11df4:	movw	r5, #30220	; 0x760c
   11df8:	movt	r5, #1
   11dfc:	mov	r4, r5
   11e00:	mov	r2, #5
   11e04:	movw	r1, #30728	; 0x7808
   11e08:	movt	r1, #1
   11e0c:	mov	r0, #0
   11e10:	bl	10ef4 <dcgettext@plt>
   11e14:	ldr	r1, [r7]
   11e18:	bl	10e58 <fputs_unlocked@plt>
   11e1c:	b	11cb8 <__assert_fail@plt+0xbb4>
   11e20:	movw	r3, #37252	; 0x9184
   11e24:	movt	r3, #2
   11e28:	str	r0, [r3]
   11e2c:	bx	lr
   11e30:	movw	r3, #37252	; 0x9184
   11e34:	movt	r3, #2
   11e38:	strb	r0, [r3, #4]
   11e3c:	bx	lr
   11e40:	movw	r3, #37236	; 0x9174
   11e44:	movt	r3, #2
   11e48:	strd	r4, [sp, #-16]!
   11e4c:	ldr	r0, [r3]
   11e50:	str	r6, [sp, #8]
   11e54:	str	lr, [sp, #12]
   11e58:	sub	sp, sp, #8
   11e5c:	bl	16af0 <__assert_fail@plt+0x59ec>
   11e60:	cmp	r0, #0
   11e64:	beq	11e90 <__assert_fail@plt+0xd8c>
   11e68:	movw	r4, #37252	; 0x9184
   11e6c:	movt	r4, #2
   11e70:	ldrb	r6, [r4, #4]
   11e74:	bl	10ff0 <__errno_location@plt>
   11e78:	mov	r5, r0
   11e7c:	cmp	r6, #0
   11e80:	beq	11ebc <__assert_fail@plt+0xdb8>
   11e84:	ldr	r3, [r0]
   11e88:	cmp	r3, #32
   11e8c:	bne	11ebc <__assert_fail@plt+0xdb8>
   11e90:	movw	r3, #37224	; 0x9168
   11e94:	movt	r3, #2
   11e98:	ldr	r0, [r3]
   11e9c:	bl	16af0 <__assert_fail@plt+0x59ec>
   11ea0:	cmp	r0, #0
   11ea4:	bne	11f04 <__assert_fail@plt+0xe00>
   11ea8:	add	sp, sp, #8
   11eac:	ldrd	r4, [sp]
   11eb0:	ldr	r6, [sp, #8]
   11eb4:	add	sp, sp, #12
   11eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   11ebc:	movw	r1, #31112	; 0x7988
   11ec0:	movt	r1, #1
   11ec4:	mov	r2, #5
   11ec8:	mov	r0, #0
   11ecc:	bl	10ef4 <dcgettext@plt>
   11ed0:	mov	r6, r0
   11ed4:	ldr	r0, [r4]
   11ed8:	cmp	r0, #0
   11edc:	beq	11f14 <__assert_fail@plt+0xe10>
   11ee0:	ldr	r4, [r5]
   11ee4:	bl	14f70 <__assert_fail@plt+0x3e6c>
   11ee8:	mov	r3, r0
   11eec:	movw	r2, #31124	; 0x7994
   11ef0:	movt	r2, #1
   11ef4:	mov	r0, #0
   11ef8:	str	r6, [sp]
   11efc:	mov	r1, r4
   11f00:	bl	10f6c <error@plt>
   11f04:	movw	r3, #37132	; 0x910c
   11f08:	movt	r3, #2
   11f0c:	ldr	r0, [r3]
   11f10:	bl	10eac <_exit@plt>
   11f14:	mov	r3, r6
   11f18:	movw	r2, #31128	; 0x7998
   11f1c:	movt	r2, #1
   11f20:	ldr	r1, [r5]
   11f24:	bl	10f6c <error@plt>
   11f28:	b	11f04 <__assert_fail@plt+0xe00>
   11f2c:	b	10e7c <posix_fadvise64@plt>
   11f30:	cmp	r0, #0
   11f34:	bxeq	lr
   11f38:	str	r4, [sp, #-16]!
   11f3c:	mov	r4, r1
   11f40:	strd	r6, [sp, #4]
   11f44:	mov	r6, #0
   11f48:	mov	r7, #0
   11f4c:	str	lr, [sp, #12]
   11f50:	sub	sp, sp, #16
   11f54:	bl	11038 <fileno@plt>
   11f58:	mov	r2, r6
   11f5c:	mov	r3, r7
   11f60:	strd	r6, [sp]
   11f64:	str	r4, [sp, #8]
   11f68:	bl	10e7c <posix_fadvise64@plt>
   11f6c:	add	sp, sp, #16
   11f70:	ldr	r4, [sp]
   11f74:	ldrd	r6, [sp, #4]
   11f78:	add	sp, sp, #12
   11f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f80:	strd	r4, [sp, #-12]!
   11f84:	mov	r4, r0
   11f88:	str	lr, [sp, #8]
   11f8c:	sub	sp, sp, #12
   11f90:	bl	11038 <fileno@plt>
   11f94:	cmp	r0, #0
   11f98:	mov	r0, r4
   11f9c:	blt	12020 <__assert_fail@plt+0xf1c>
   11fa0:	bl	10f9c <__freading@plt>
   11fa4:	cmp	r0, #0
   11fa8:	bne	11fec <__assert_fail@plt+0xee8>
   11fac:	mov	r0, r4
   11fb0:	bl	12034 <__assert_fail@plt+0xf30>
   11fb4:	cmp	r0, #0
   11fb8:	beq	1201c <__assert_fail@plt+0xf18>
   11fbc:	bl	10ff0 <__errno_location@plt>
   11fc0:	mov	r5, r0
   11fc4:	mov	r0, r4
   11fc8:	ldr	r4, [r5]
   11fcc:	bl	11050 <fclose@plt>
   11fd0:	cmp	r4, #0
   11fd4:	mvnne	r0, #0
   11fd8:	strne	r4, [r5]
   11fdc:	add	sp, sp, #12
   11fe0:	ldrd	r4, [sp]
   11fe4:	add	sp, sp, #8
   11fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   11fec:	mov	r0, r4
   11ff0:	bl	11038 <fileno@plt>
   11ff4:	mov	r1, #1
   11ff8:	mov	r2, #0
   11ffc:	mov	r3, #0
   12000:	str	r1, [sp]
   12004:	bl	10f3c <lseek64@plt>
   12008:	mvn	r3, #0
   1200c:	mvn	r2, #0
   12010:	cmp	r1, r3
   12014:	cmpeq	r0, r2
   12018:	bne	11fac <__assert_fail@plt+0xea8>
   1201c:	mov	r0, r4
   12020:	add	sp, sp, #12
   12024:	ldrd	r4, [sp]
   12028:	ldr	lr, [sp, #8]
   1202c:	add	sp, sp, #12
   12030:	b	11050 <fclose@plt>
   12034:	str	r4, [sp, #-8]!
   12038:	subs	r4, r0, #0
   1203c:	str	lr, [sp, #4]
   12040:	sub	sp, sp, #8
   12044:	beq	12060 <__assert_fail@plt+0xf5c>
   12048:	bl	10f9c <__freading@plt>
   1204c:	cmp	r0, #0
   12050:	beq	12060 <__assert_fail@plt+0xf5c>
   12054:	ldr	r3, [r4]
   12058:	tst	r3, #256	; 0x100
   1205c:	bne	12078 <__assert_fail@plt+0xf74>
   12060:	mov	r0, r4
   12064:	add	sp, sp, #8
   12068:	ldr	r4, [sp]
   1206c:	ldr	lr, [sp, #4]
   12070:	add	sp, sp, #8
   12074:	b	10e88 <fflush@plt>
   12078:	mov	r1, #1
   1207c:	mov	r2, #0
   12080:	mov	r3, #0
   12084:	mov	r0, r4
   12088:	str	r1, [sp]
   1208c:	bl	121a0 <__assert_fail@plt+0x109c>
   12090:	b	12060 <__assert_fail@plt+0xf5c>
   12094:	strd	r4, [sp, #-16]!
   12098:	mov	r5, r1
   1209c:	str	r6, [sp, #8]
   120a0:	str	lr, [sp, #12]
   120a4:	bl	110bc <fopen64@plt>
   120a8:	subs	r4, r0, #0
   120ac:	beq	120bc <__assert_fail@plt+0xfb8>
   120b0:	bl	11038 <fileno@plt>
   120b4:	cmp	r0, #2
   120b8:	bls	120d0 <__assert_fail@plt+0xfcc>
   120bc:	mov	r0, r4
   120c0:	ldrd	r4, [sp]
   120c4:	ldr	r6, [sp, #8]
   120c8:	add	sp, sp, #12
   120cc:	pop	{pc}		; (ldr pc, [sp], #4)
   120d0:	bl	15174 <__assert_fail@plt+0x4070>
   120d4:	subs	r6, r0, #0
   120d8:	blt	12120 <__assert_fail@plt+0x101c>
   120dc:	mov	r0, r4
   120e0:	bl	11f80 <__assert_fail@plt+0xe7c>
   120e4:	cmp	r0, #0
   120e8:	bne	12100 <__assert_fail@plt+0xffc>
   120ec:	mov	r1, r5
   120f0:	mov	r0, r6
   120f4:	bl	10e40 <fdopen@plt>
   120f8:	subs	r4, r0, #0
   120fc:	bne	120bc <__assert_fail@plt+0xfb8>
   12100:	bl	10ff0 <__errno_location@plt>
   12104:	mov	r5, r0
   12108:	mov	r0, r6
   1210c:	ldr	r6, [r5]
   12110:	mov	r4, #0
   12114:	bl	110f8 <close@plt>
   12118:	str	r6, [r5]
   1211c:	b	120bc <__assert_fail@plt+0xfb8>
   12120:	bl	10ff0 <__errno_location@plt>
   12124:	mov	r5, r0
   12128:	mov	r0, r4
   1212c:	ldr	r6, [r5]
   12130:	mov	r4, #0
   12134:	bl	11f80 <__assert_fail@plt+0xe7c>
   12138:	str	r6, [r5]
   1213c:	b	120bc <__assert_fail@plt+0xfb8>
   12140:	strd	r4, [sp, #-12]!
   12144:	mov	r5, r0
   12148:	str	lr, [sp, #8]
   1214c:	sub	sp, sp, #12
   12150:	bl	10ff0 <__errno_location@plt>
   12154:	mov	r4, r0
   12158:	mov	r2, #0
   1215c:	ldr	r3, [r4]
   12160:	mov	r0, r5
   12164:	str	r2, [r4]
   12168:	str	r3, [sp]
   1216c:	str	r3, [sp, #4]
   12170:	bl	10ea0 <free@plt>
   12174:	ldr	r3, [r4]
   12178:	add	r2, sp, #8
   1217c:	clz	r3, r3
   12180:	lsr	r3, r3, #5
   12184:	add	r3, r2, r3, lsl #2
   12188:	ldr	r3, [r3, #-8]
   1218c:	str	r3, [r4]
   12190:	add	sp, sp, #12
   12194:	ldrd	r4, [sp]
   12198:	add	sp, sp, #8
   1219c:	pop	{pc}		; (ldr pc, [sp], #4)
   121a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   121a4:	mov	r4, r0
   121a8:	ldr	ip, [r0, #4]
   121ac:	strd	r6, [sp, #8]
   121b0:	str	lr, [sp, #20]
   121b4:	ldr	lr, [r0, #8]
   121b8:	str	r8, [sp, #16]
   121bc:	sub	sp, sp, #8
   121c0:	ldr	r5, [sp, #32]
   121c4:	cmp	lr, ip
   121c8:	beq	121f0 <__assert_fail@plt+0x10ec>
   121cc:	mov	r0, r4
   121d0:	str	r5, [sp, #32]
   121d4:	add	sp, sp, #8
   121d8:	ldrd	r4, [sp]
   121dc:	ldrd	r6, [sp, #8]
   121e0:	ldr	r8, [sp, #16]
   121e4:	ldr	lr, [sp, #20]
   121e8:	add	sp, sp, #24
   121ec:	b	1105c <fseeko64@plt>
   121f0:	ldr	ip, [r0, #16]
   121f4:	ldr	lr, [r0, #20]
   121f8:	cmp	lr, ip
   121fc:	bne	121cc <__assert_fail@plt+0x10c8>
   12200:	ldr	r8, [r0, #36]	; 0x24
   12204:	cmp	r8, #0
   12208:	bne	121cc <__assert_fail@plt+0x10c8>
   1220c:	mov	r6, r2
   12210:	mov	r7, r3
   12214:	bl	11038 <fileno@plt>
   12218:	mov	r2, r6
   1221c:	mov	r3, r7
   12220:	str	r5, [sp]
   12224:	bl	10f3c <lseek64@plt>
   12228:	mvn	r3, #0
   1222c:	mvn	r2, #0
   12230:	cmp	r1, r3
   12234:	cmpeq	r0, r2
   12238:	beq	12268 <__assert_fail@plt+0x1164>
   1223c:	ldr	r3, [r4]
   12240:	strd	r0, [r4, #80]	; 0x50
   12244:	bic	r3, r3, #16
   12248:	str	r3, [r4]
   1224c:	mov	r0, r8
   12250:	add	sp, sp, #8
   12254:	ldrd	r4, [sp]
   12258:	ldrd	r6, [sp, #8]
   1225c:	ldr	r8, [sp, #16]
   12260:	add	sp, sp, #20
   12264:	pop	{pc}		; (ldr pc, [sp], #4)
   12268:	mvn	r8, #0
   1226c:	b	1224c <__assert_fail@plt+0x1148>
   12270:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12274:	strd	r6, [sp, #8]
   12278:	mov	r7, r1
   1227c:	mov	r6, r0
   12280:	strd	r8, [sp, #16]
   12284:	mov	r9, r3
   12288:	ands	r3, r3, #32
   1228c:	strd	sl, [sp, #24]
   12290:	str	lr, [sp, #32]
   12294:	vpush	{d8-d9}
   12298:	sub	sp, sp, #124	; 0x7c
   1229c:	str	r2, [sp, #20]
   122a0:	str	r3, [sp, #48]	; 0x30
   122a4:	movne	r3, #1024	; 0x400
   122a8:	moveq	r3, #1000	; 0x3e8
   122ac:	strd	r6, [sp, #32]
   122b0:	str	r3, [sp, #44]	; 0x2c
   122b4:	add	r3, r2, #644	; 0x284
   122b8:	mov	r5, r3
   122bc:	bl	110a4 <localeconv@plt>
   122c0:	ldr	fp, [r0]
   122c4:	add	r3, r5, #3
   122c8:	mov	r4, r0
   122cc:	str	r3, [sp, #16]
   122d0:	and	r3, r9, #3
   122d4:	str	r3, [sp, #40]	; 0x28
   122d8:	mov	r0, fp
   122dc:	bl	10fd8 <strlen@plt>
   122e0:	sub	r2, r0, #1
   122e4:	ldr	sl, [r4, #4]
   122e8:	movw	r3, #31164	; 0x79bc
   122ec:	movt	r3, #1
   122f0:	cmp	r2, #16
   122f4:	ldr	r2, [r4, #8]
   122f8:	movcs	fp, r3
   122fc:	str	r2, [sp, #52]	; 0x34
   12300:	mov	r2, r0
   12304:	movcc	r2, r0
   12308:	movcs	r2, #1
   1230c:	mov	r0, sl
   12310:	str	r2, [sp, #12]
   12314:	bl	10fd8 <strlen@plt>
   12318:	cmp	r0, #16
   1231c:	movw	r3, #30296	; 0x7658
   12320:	movt	r3, #1
   12324:	ldrd	r4, [sp, #176]	; 0xb0
   12328:	movhi	sl, r3
   1232c:	ldrd	r2, [sp, #184]	; 0xb8
   12330:	cmp	r3, r5
   12334:	cmpeq	r2, r4
   12338:	bhi	125f0 <__assert_fail@plt+0x14ec>
   1233c:	mov	r0, r4
   12340:	mov	r1, r5
   12344:	bl	17330 <__assert_fail@plt+0x622c>
   12348:	orrs	r3, r2, r3
   1234c:	bne	1238c <__assert_fail@plt+0x1288>
   12350:	mul	ip, r0, r7
   12354:	mov	r4, r6
   12358:	mov	r5, r7
   1235c:	mov	r3, r1
   12360:	umull	r6, r7, r0, r6
   12364:	mov	r2, r0
   12368:	mla	r1, r4, r1, ip
   1236c:	strd	r6, [sp, #24]
   12370:	add	r1, r1, r7
   12374:	str	r1, [sp, #28]
   12378:	ldrd	r0, [sp, #24]
   1237c:	bl	17330 <__assert_fail@plt+0x622c>
   12380:	cmp	r1, r5
   12384:	cmpeq	r0, r4
   12388:	beq	1293c <__assert_fail@plt+0x1838>
   1238c:	ldrd	r0, [sp, #176]	; 0xb0
   12390:	bl	172bc <__assert_fail@plt+0x61b8>
   12394:	vmov	d9, r0, r1
   12398:	ldrd	r0, [sp, #184]	; 0xb8
   1239c:	bl	172bc <__assert_fail@plt+0x61b8>
   123a0:	vmov	d7, r0, r1
   123a4:	ldrd	r0, [sp, #32]
   123a8:	vdiv.f64	d8, d9, d7
   123ac:	bl	172bc <__assert_fail@plt+0x61b8>
   123b0:	vmov	d7, r0, r1
   123b4:	tst	r9, #16
   123b8:	vmul.f64	d8, d8, d7
   123bc:	beq	12534 <__assert_fail@plt+0x1430>
   123c0:	ldr	r6, [sp, #12]
   123c4:	mov	r7, #0
   123c8:	vldr	s15, [sp, #44]	; 0x2c
   123cc:	vcvt.f64.s32	d6, s15
   123d0:	vmov.f64	d7, d6
   123d4:	vmov.f64	d5, d7
   123d8:	vmul.f64	d7, d7, d6
   123dc:	add	r7, r7, #1
   123e0:	vcmpe.f64	d7, d8
   123e4:	vmrs	APSR_nzcv, fpscr
   123e8:	bhi	123f4 <__assert_fail@plt+0x12f0>
   123ec:	cmp	r7, #8
   123f0:	bne	123d4 <__assert_fail@plt+0x12d0>
   123f4:	ldr	fp, [sp, #40]	; 0x28
   123f8:	add	r8, r6, #1
   123fc:	vdiv.f64	d9, d8, d5
   12400:	str	r6, [sp, #12]
   12404:	ldr	r3, [sp, #48]	; 0x30
   12408:	cmp	fp, #1
   1240c:	clz	r4, r3
   12410:	lsr	r4, r4, #5
   12414:	add	r4, r4, #1
   12418:	add	r4, r4, r8
   1241c:	beq	12a0c <__assert_fail@plt+0x1908>
   12420:	vldr	d7, [pc, #1000]	; 12810 <__assert_fail@plt+0x170c>
   12424:	vcmpe.f64	d9, d7
   12428:	vmrs	APSR_nzcv, fpscr
   1242c:	vmovpl.f64	d7, d9
   12430:	bpl	12470 <__assert_fail@plt+0x136c>
   12434:	vmov	r0, r1, d9
   12438:	bl	17380 <__assert_fail@plt+0x627c>
   1243c:	mov	r5, r0
   12440:	mov	r6, r1
   12444:	bl	172bc <__assert_fail@plt+0x61b8>
   12448:	cmp	fp, #0
   1244c:	vmov	d7, r0, r1
   12450:	bne	12470 <__assert_fail@plt+0x136c>
   12454:	vcmp.f64	d9, d7
   12458:	vmrs	APSR_nzcv, fpscr
   1245c:	beq	12470 <__assert_fail@plt+0x136c>
   12460:	adds	r0, r5, #1
   12464:	adc	r1, r6, #0
   12468:	bl	172bc <__assert_fail@plt+0x61b8>
   1246c:	vmov	d7, r0, r1
   12470:	ldr	r5, [sp, #20]
   12474:	mvn	r2, #0
   12478:	mov	r1, #1
   1247c:	movw	r3, #31176	; 0x79c8
   12480:	movt	r3, #1
   12484:	vstr	d7, [sp]
   12488:	mov	r0, r5
   1248c:	bl	10ffc <__sprintf_chk@plt>
   12490:	mov	r0, r5
   12494:	bl	10fd8 <strlen@plt>
   12498:	cmp	r0, r4
   1249c:	bls	128d4 <__assert_fail@plt+0x17d0>
   124a0:	vldr	d7, [pc, #880]	; 12818 <__assert_fail@plt+0x1714>
   124a4:	vmul.f64	d9, d9, d7
   124a8:	vldr	d7, [pc, #864]	; 12810 <__assert_fail@plt+0x170c>
   124ac:	vcmpe.f64	d9, d7
   124b0:	vmrs	APSR_nzcv, fpscr
   124b4:	bpl	124fc <__assert_fail@plt+0x13f8>
   124b8:	vmov	r0, r1, d9
   124bc:	bl	17380 <__assert_fail@plt+0x627c>
   124c0:	mov	r4, r0
   124c4:	mov	r5, r1
   124c8:	bl	172bc <__assert_fail@plt+0x61b8>
   124cc:	ldr	r3, [sp, #40]	; 0x28
   124d0:	vmov	d7, r0, r1
   124d4:	cmp	r3, #0
   124d8:	bne	124f8 <__assert_fail@plt+0x13f4>
   124dc:	vcmp.f64	d9, d7
   124e0:	vmrs	APSR_nzcv, fpscr
   124e4:	beq	124f8 <__assert_fail@plt+0x13f4>
   124e8:	adds	r0, r4, #1
   124ec:	adc	r1, r5, #0
   124f0:	bl	172bc <__assert_fail@plt+0x61b8>
   124f4:	vmov	d7, r0, r1
   124f8:	vmov.f64	d9, d7
   124fc:	vldr	d6, [pc, #788]	; 12818 <__assert_fail@plt+0x1714>
   12500:	mvn	r2, #0
   12504:	mov	r1, #1
   12508:	movw	r3, #31168	; 0x79c0
   1250c:	movt	r3, #1
   12510:	ldr	r4, [sp, #20]
   12514:	vdiv.f64	d7, d9, d6
   12518:	mov	r0, r4
   1251c:	vstr	d7, [sp]
   12520:	bl	10ffc <__sprintf_chk@plt>
   12524:	mov	r0, r4
   12528:	bl	10fd8 <strlen@plt>
   1252c:	mov	r8, r0
   12530:	b	12580 <__assert_fail@plt+0x147c>
   12534:	and	r6, r9, #3
   12538:	cmp	r6, #1
   1253c:	beq	12550 <__assert_fail@plt+0x144c>
   12540:	vldr	d7, [pc, #712]	; 12810 <__assert_fail@plt+0x170c>
   12544:	vcmpe.f64	d8, d7
   12548:	vmrs	APSR_nzcv, fpscr
   1254c:	bmi	128f8 <__assert_fail@plt+0x17f4>
   12550:	ldr	r4, [sp, #20]
   12554:	mvn	r2, #0
   12558:	mov	r1, #1
   1255c:	movw	r3, #31168	; 0x79c0
   12560:	movt	r3, #1
   12564:	vstr	d8, [sp]
   12568:	mov	r7, r2
   1256c:	mov	r0, r4
   12570:	bl	10ffc <__sprintf_chk@plt>
   12574:	mov	r0, r4
   12578:	bl	10fd8 <strlen@plt>
   1257c:	mov	r8, r0
   12580:	ldr	r3, [sp, #16]
   12584:	mov	r2, r0
   12588:	ldr	r1, [sp, #20]
   1258c:	sub	r6, r3, r0
   12590:	mov	r0, r6
   12594:	add	r8, r6, r8
   12598:	bl	10e94 <memmove@plt>
   1259c:	tst	r9, #4
   125a0:	bne	12764 <__assert_fail@plt+0x1660>
   125a4:	tst	r9, #128	; 0x80
   125a8:	beq	125c0 <__assert_fail@plt+0x14bc>
   125ac:	cmn	r7, #1
   125b0:	beq	12820 <__assert_fail@plt+0x171c>
   125b4:	and	r3, r9, #256	; 0x100
   125b8:	orrs	r2, r3, r7
   125bc:	bne	12a94 <__assert_fail@plt+0x1990>
   125c0:	ldr	r2, [sp, #16]
   125c4:	mov	r3, #0
   125c8:	mov	r0, r6
   125cc:	strb	r3, [r2]
   125d0:	add	sp, sp, #124	; 0x7c
   125d4:	vpop	{d8-d9}
   125d8:	ldrd	r4, [sp]
   125dc:	ldrd	r6, [sp, #8]
   125e0:	ldrd	r8, [sp, #16]
   125e4:	ldrd	sl, [sp, #24]
   125e8:	add	sp, sp, #32
   125ec:	pop	{pc}		; (ldr pc, [sp], #4)
   125f0:	ldrd	r2, [sp, #176]	; 0xb0
   125f4:	orrs	r3, r2, r3
   125f8:	beq	1238c <__assert_fail@plt+0x1288>
   125fc:	ldrd	r2, [sp, #176]	; 0xb0
   12600:	ldrd	r0, [sp, #184]	; 0xb8
   12604:	bl	17330 <__assert_fail@plt+0x622c>
   12608:	orrs	r3, r2, r3
   1260c:	mov	r4, r0
   12610:	mov	r5, r1
   12614:	bne	1238c <__assert_fail@plt+0x1288>
   12618:	mov	r2, r4
   1261c:	mov	r3, r5
   12620:	ldrd	r0, [sp, #32]
   12624:	bl	17330 <__assert_fail@plt+0x622c>
   12628:	mov	lr, r2
   1262c:	mov	r8, r1
   12630:	lsl	r1, r3, #2
   12634:	mov	r7, r0
   12638:	lsl	r0, lr, #2
   1263c:	mov	ip, r3
   12640:	orr	r1, r1, lr, lsr #30
   12644:	mov	r2, r4
   12648:	mov	r3, r5
   1264c:	adds	r0, r0, lr
   12650:	adc	r1, r1, ip
   12654:	adds	r0, r0, r0
   12658:	adc	r1, r1, r1
   1265c:	bl	17330 <__assert_fail@plt+0x622c>
   12660:	adds	r1, r2, r2
   12664:	mov	r2, r4
   12668:	str	r7, [sp, #24]
   1266c:	adc	r3, r3, r3
   12670:	mov	lr, r0
   12674:	str	r8, [sp, #28]
   12678:	str	r1, [sp, #56]	; 0x38
   1267c:	str	r3, [sp, #60]	; 0x3c
   12680:	mov	r3, r5
   12684:	ldrd	r4, [sp, #56]	; 0x38
   12688:	cmp	r3, r5
   1268c:	cmpeq	r2, r4
   12690:	bls	12a7c <__assert_fail@plt+0x1978>
   12694:	mov	r3, r4
   12698:	orrs	r3, r3, r5
   1269c:	movne	r3, #1
   126a0:	moveq	r3, #0
   126a4:	mov	r6, r3
   126a8:	ands	r3, r9, #16
   126ac:	str	r3, [sp, #56]	; 0x38
   126b0:	beq	12954 <__assert_fail@plt+0x1850>
   126b4:	ldrd	r4, [sp, #24]
   126b8:	mov	r3, #0
   126bc:	mov	r7, #0
   126c0:	ldr	r8, [sp, #44]	; 0x2c
   126c4:	cmp	r3, r5
   126c8:	mov	r2, r8
   126cc:	cmpeq	r8, r4
   126d0:	strd	r2, [sp, #32]
   126d4:	bhi	12958 <__assert_fail@plt+0x1854>
   126d8:	str	fp, [sp, #64]	; 0x40
   126dc:	mov	fp, r6
   126e0:	mov	r6, lr
   126e4:	str	r9, [sp, #68]	; 0x44
   126e8:	ldr	r9, [sp, #12]
   126ec:	b	12714 <__assert_fail@plt+0x1610>
   126f0:	adds	fp, fp, #0
   126f4:	movne	fp, #1
   126f8:	ldrd	r2, [sp, #32]
   126fc:	add	r7, r7, #1
   12700:	cmp	r3, r1
   12704:	cmpeq	r2, r0
   12708:	bhi	12b18 <__assert_fail@plt+0x1a14>
   1270c:	cmp	r7, #8
   12710:	beq	12ae0 <__assert_fail@plt+0x19dc>
   12714:	mov	r0, r4
   12718:	mov	r1, r5
   1271c:	ldrd	r2, [sp, #32]
   12720:	bl	17330 <__assert_fail@plt+0x622c>
   12724:	add	r2, r2, r2, lsl #2
   12728:	mov	r4, r0
   1272c:	mov	r5, r1
   12730:	asr	r3, fp, #1
   12734:	add	r6, r6, r2, lsl #1
   12738:	udiv	ip, r6, r8
   1273c:	mls	r2, r8, ip, r6
   12740:	mov	r6, ip
   12744:	add	r3, r3, r2, lsl #1
   12748:	cmp	r8, r3
   1274c:	add	fp, fp, r3
   12750:	bhi	126f0 <__assert_fail@plt+0x15ec>
   12754:	cmp	r8, fp
   12758:	movcc	fp, #3
   1275c:	movcs	fp, #2
   12760:	b	126f8 <__assert_fail@plt+0x15f4>
   12764:	mov	r0, sl
   12768:	sub	r4, r8, r6
   1276c:	bl	10fd8 <strlen@plt>
   12770:	mov	fp, r0
   12774:	mov	r1, r6
   12778:	mov	r2, r4
   1277c:	add	r0, sp, #76	; 0x4c
   12780:	mov	r3, #41	; 0x29
   12784:	mvn	r5, #0
   12788:	bl	10f24 <__memcpy_chk@plt>
   1278c:	ldr	r6, [sp, #52]	; 0x34
   12790:	str	r7, [sp, #12]
   12794:	ldrb	r3, [r6]
   12798:	cmp	r3, #0
   1279c:	beq	127b0 <__assert_fail@plt+0x16ac>
   127a0:	cmp	r3, #255	; 0xff
   127a4:	add	r6, r6, #1
   127a8:	movne	r5, r3
   127ac:	moveq	r5, r4
   127b0:	sub	r7, r8, r5
   127b4:	cmp	r5, r4
   127b8:	mov	r2, r5
   127bc:	mov	r0, r7
   127c0:	bls	127e0 <__assert_fail@plt+0x16dc>
   127c4:	sub	r6, r8, r4
   127c8:	mov	r2, r4
   127cc:	ldr	r7, [sp, #12]
   127d0:	add	r1, sp, #76	; 0x4c
   127d4:	mov	r0, r6
   127d8:	bl	10eb8 <memcpy@plt>
   127dc:	b	125a4 <__assert_fail@plt+0x14a0>
   127e0:	sub	r4, r4, r5
   127e4:	add	r3, sp, #76	; 0x4c
   127e8:	add	r1, r3, r4
   127ec:	sub	r8, r7, fp
   127f0:	bl	10eb8 <memcpy@plt>
   127f4:	cmp	r4, #0
   127f8:	mov	r2, fp
   127fc:	mov	r1, sl
   12800:	mov	r0, r8
   12804:	beq	12c84 <__assert_fail@plt+0x1b80>
   12808:	bl	10eb8 <memcpy@plt>
   1280c:	b	12794 <__assert_fail@plt+0x1690>
   12810:	andeq	r0, r0, r0
   12814:	mvnsmi	r0, #0
   12818:	andeq	r0, r0, r0
   1281c:	eormi	r0, r4, r0
   12820:	ldrd	r2, [sp, #184]	; 0xb8
   12824:	cmp	r3, #0
   12828:	cmpeq	r2, #1
   1282c:	bls	12ad8 <__assert_fail@plt+0x19d4>
   12830:	ldr	r1, [sp, #44]	; 0x2c
   12834:	mov	r7, #1
   12838:	mov	r2, #1
   1283c:	mov	r3, #0
   12840:	ldrd	r4, [sp, #184]	; 0xb8
   12844:	mul	r0, r1, r3
   12848:	umull	r2, r3, r2, r1
   1284c:	add	r3, r0, r3
   12850:	cmp	r5, r3
   12854:	cmpeq	r4, r2
   12858:	bls	12868 <__assert_fail@plt+0x1764>
   1285c:	add	r7, r7, #1
   12860:	cmp	r7, #8
   12864:	bne	12844 <__assert_fail@plt+0x1740>
   12868:	tst	r9, #64	; 0x40
   1286c:	and	r3, r9, #256	; 0x100
   12870:	beq	12890 <__assert_fail@plt+0x178c>
   12874:	ldr	r1, [sp, #20]
   12878:	mov	r2, #32
   1287c:	add	r0, r1, #648	; 0x288
   12880:	strb	r2, [r1, #647]	; 0x287
   12884:	str	r0, [sp, #16]
   12888:	cmp	r7, #0
   1288c:	beq	12c74 <__assert_fail@plt+0x1b70>
   12890:	ldr	r0, [sp, #48]	; 0x30
   12894:	cmp	r0, #0
   12898:	cmpeq	r7, #1
   1289c:	beq	12afc <__assert_fail@plt+0x19f8>
   128a0:	movw	r2, #31132	; 0x799c
   128a4:	movt	r2, #1
   128a8:	ldrb	r1, [r2, r7]
   128ac:	cmp	r3, #0
   128b0:	ldr	r2, [sp, #16]
   128b4:	strb	r1, [r2], #1
   128b8:	beq	12b10 <__assert_fail@plt+0x1a0c>
   128bc:	cmp	r0, #0
   128c0:	bne	12aa0 <__assert_fail@plt+0x199c>
   128c4:	mov	r3, #66	; 0x42
   128c8:	strb	r3, [r2], #1
   128cc:	str	r2, [sp, #16]
   128d0:	b	125c0 <__assert_fail@plt+0x14bc>
   128d4:	tst	r9, #8
   128d8:	beq	128f0 <__assert_fail@plt+0x17ec>
   128dc:	ldr	r3, [sp, #20]
   128e0:	add	r3, r3, r0
   128e4:	ldrb	r3, [r3, #-1]
   128e8:	cmp	r3, #48	; 0x30
   128ec:	beq	12bc4 <__assert_fail@plt+0x1ac0>
   128f0:	sub	r8, r0, r8
   128f4:	b	12580 <__assert_fail@plt+0x147c>
   128f8:	vmov	r0, r1, d8
   128fc:	bl	17380 <__assert_fail@plt+0x627c>
   12900:	mov	r4, r0
   12904:	mov	r5, r1
   12908:	bl	172bc <__assert_fail@plt+0x61b8>
   1290c:	cmp	r6, #0
   12910:	vmov	d7, r0, r1
   12914:	bne	12934 <__assert_fail@plt+0x1830>
   12918:	vcmp.f64	d8, d7
   1291c:	vmrs	APSR_nzcv, fpscr
   12920:	beq	12934 <__assert_fail@plt+0x1830>
   12924:	adds	r0, r4, #1
   12928:	adc	r1, r5, #0
   1292c:	bl	172bc <__assert_fail@plt+0x61b8>
   12930:	vmov	d7, r0, r1
   12934:	vmov.f64	d8, d7
   12938:	b	12550 <__assert_fail@plt+0x144c>
   1293c:	mov	r3, #0
   12940:	mov	r6, r3
   12944:	mov	lr, r3
   12948:	ands	r3, r9, #16
   1294c:	str	r3, [sp, #56]	; 0x38
   12950:	bne	126b4 <__assert_fail@plt+0x15b0>
   12954:	mvn	r7, #0
   12958:	ldr	r3, [sp, #40]	; 0x28
   1295c:	cmp	r3, #1
   12960:	beq	12a48 <__assert_fail@plt+0x1944>
   12964:	ldr	r8, [sp, #16]
   12968:	ldr	r3, [sp, #40]	; 0x28
   1296c:	cmp	r3, #0
   12970:	bne	129bc <__assert_fail@plt+0x18b8>
   12974:	add	r3, r6, lr
   12978:	cmp	r3, #0
   1297c:	ble	129bc <__assert_fail@plt+0x18b8>
   12980:	ldr	r3, [sp, #24]
   12984:	adds	r3, r3, #1
   12988:	str	r3, [sp, #24]
   1298c:	ldr	r3, [sp, #28]
   12990:	adc	r3, r3, #0
   12994:	str	r3, [sp, #28]
   12998:	ldr	r3, [sp, #56]	; 0x38
   1299c:	cmp	r3, #0
   129a0:	beq	129bc <__assert_fail@plt+0x18b8>
   129a4:	ldrd	r0, [sp, #24]
   129a8:	mov	r3, #0
   129ac:	ldr	r2, [sp, #44]	; 0x2c
   129b0:	cmp	r3, r1
   129b4:	cmpeq	r2, r0
   129b8:	beq	12ab4 <__assert_fail@plt+0x19b0>
   129bc:	ldrd	r4, [sp, #24]
   129c0:	mov	r6, r8
   129c4:	mov	r0, r4
   129c8:	mov	r1, r5
   129cc:	mov	r2, #10
   129d0:	mov	r3, #0
   129d4:	bl	17330 <__assert_fail@plt+0x622c>
   129d8:	add	r2, r2, #48	; 0x30
   129dc:	mov	r0, r4
   129e0:	mov	r1, r5
   129e4:	mov	r3, #0
   129e8:	strb	r2, [r6, #-1]!
   129ec:	mov	r2, #10
   129f0:	bl	17330 <__assert_fail@plt+0x622c>
   129f4:	cmp	r5, #0
   129f8:	mov	r5, r1
   129fc:	cmpeq	r4, #9
   12a00:	mov	r4, r0
   12a04:	bhi	129c4 <__assert_fail@plt+0x18c0>
   12a08:	b	1259c <__assert_fail@plt+0x1498>
   12a0c:	ldr	r5, [sp, #20]
   12a10:	mvn	r2, #0
   12a14:	movw	r3, #31176	; 0x79c8
   12a18:	movt	r3, #1
   12a1c:	vstr	d9, [sp]
   12a20:	ldr	r1, [sp, #40]	; 0x28
   12a24:	mov	r0, r5
   12a28:	bl	10ffc <__sprintf_chk@plt>
   12a2c:	mov	r0, r5
   12a30:	bl	10fd8 <strlen@plt>
   12a34:	cmp	r0, r4
   12a38:	bls	128d4 <__assert_fail@plt+0x17d0>
   12a3c:	vldr	d7, [pc, #-556]	; 12818 <__assert_fail@plt+0x1714>
   12a40:	vmul.f64	d9, d9, d7
   12a44:	b	124fc <__assert_fail@plt+0x13f8>
   12a48:	mov	r5, #0
   12a4c:	ldr	r8, [sp, #16]
   12a50:	ldr	r3, [sp, #24]
   12a54:	and	r4, r3, #1
   12a58:	adds	r2, r4, r6
   12a5c:	adc	r3, r5, r6, asr #31
   12a60:	orr	r2, r2, r3
   12a64:	mov	r3, lr
   12a68:	cmp	r2, r5
   12a6c:	addne	r3, r3, #1
   12a70:	cmp	r3, #5
   12a74:	bgt	12980 <__assert_fail@plt+0x187c>
   12a78:	b	129bc <__assert_fail@plt+0x18b8>
   12a7c:	movcs	r3, #2
   12a80:	movcs	r6, r3
   12a84:	bcs	126a8 <__assert_fail@plt+0x15a4>
   12a88:	mov	r3, #3
   12a8c:	mov	r6, r3
   12a90:	b	126a8 <__assert_fail@plt+0x15a4>
   12a94:	tst	r9, #64	; 0x40
   12a98:	beq	12888 <__assert_fail@plt+0x1784>
   12a9c:	b	12874 <__assert_fail@plt+0x1770>
   12aa0:	ldr	r1, [sp, #16]
   12aa4:	mov	r3, #105	; 0x69
   12aa8:	add	r2, r1, #2
   12aac:	strb	r3, [r1, #1]
   12ab0:	b	128c4 <__assert_fail@plt+0x17c0>
   12ab4:	cmp	r7, #8
   12ab8:	beq	129bc <__assert_fail@plt+0x18b8>
   12abc:	tst	r9, #8
   12ac0:	add	r7, r7, #1
   12ac4:	beq	12c3c <__assert_fail@plt+0x1b38>
   12ac8:	mov	r3, #49	; 0x31
   12acc:	sub	r6, r8, #1
   12ad0:	strb	r3, [r8, #-1]
   12ad4:	b	1259c <__assert_fail@plt+0x1498>
   12ad8:	mov	r7, #0
   12adc:	b	125b4 <__assert_fail@plt+0x14b0>
   12ae0:	mov	lr, r6
   12ae4:	mov	r6, fp
   12ae8:	str	r9, [sp, #12]
   12aec:	strd	r4, [sp, #24]
   12af0:	ldr	fp, [sp, #64]	; 0x40
   12af4:	ldr	r9, [sp, #68]	; 0x44
   12af8:	b	12958 <__assert_fail@plt+0x1854>
   12afc:	ldr	r2, [sp, #16]
   12b00:	mov	r1, #107	; 0x6b
   12b04:	cmp	r3, #0
   12b08:	strb	r1, [r2], #1
   12b0c:	bne	128c4 <__assert_fail@plt+0x17c0>
   12b10:	str	r2, [sp, #16]
   12b14:	b	125c0 <__assert_fail@plt+0x14bc>
   12b18:	cmp	r1, #0
   12b1c:	mov	lr, r6
   12b20:	str	r9, [sp, #12]
   12b24:	cmpeq	r0, #9
   12b28:	mov	r6, fp
   12b2c:	strd	r4, [sp, #24]
   12b30:	ldr	fp, [sp, #64]	; 0x40
   12b34:	ldr	r9, [sp, #68]	; 0x44
   12b38:	bhi	12958 <__assert_fail@plt+0x1854>
   12b3c:	ldr	r3, [sp, #40]	; 0x28
   12b40:	cmp	r3, #1
   12b44:	beq	12bf0 <__assert_fail@plt+0x1aec>
   12b48:	ldr	r2, [sp, #40]	; 0x28
   12b4c:	adds	r3, r6, #0
   12b50:	movne	r3, #1
   12b54:	cmp	r2, #0
   12b58:	movne	r3, #0
   12b5c:	cmp	r3, #0
   12b60:	bne	12bdc <__assert_fail@plt+0x1ad8>
   12b64:	cmp	ip, #0
   12b68:	addne	r3, ip, #48	; 0x30
   12b6c:	uxtbne	r3, r3
   12b70:	bne	12b80 <__assert_fail@plt+0x1a7c>
   12b74:	tst	r9, #8
   12b78:	bne	12c34 <__assert_fail@plt+0x1b30>
   12b7c:	mov	r3, #48	; 0x30
   12b80:	ldr	r2, [sp, #12]
   12b84:	ldr	r1, [sp, #20]
   12b88:	add	r8, r1, #644	; 0x284
   12b8c:	strb	r3, [r1, #646]	; 0x286
   12b90:	mov	r3, #0
   12b94:	add	r8, r8, #2
   12b98:	mov	r1, fp
   12b9c:	sub	r8, r8, r2
   12ba0:	mov	r6, r3
   12ba4:	mov	r0, r8
   12ba8:	bl	10eb8 <memcpy@plt>
   12bac:	ldr	r3, [sp, #40]	; 0x28
   12bb0:	cmp	r3, #1
   12bb4:	beq	129bc <__assert_fail@plt+0x18b8>
   12bb8:	mov	r3, #0
   12bbc:	mov	lr, r3
   12bc0:	b	12968 <__assert_fail@plt+0x1864>
   12bc4:	vldr	d7, [pc, #-948]	; 12818 <__assert_fail@plt+0x1714>
   12bc8:	ldr	r3, [sp, #40]	; 0x28
   12bcc:	vmul.f64	d9, d9, d7
   12bd0:	cmp	r3, #1
   12bd4:	bne	124a8 <__assert_fail@plt+0x13a4>
   12bd8:	b	124fc <__assert_fail@plt+0x13f8>
   12bdc:	cmp	ip, #9
   12be0:	beq	12c08 <__assert_fail@plt+0x1b04>
   12be4:	add	r3, ip, #49	; 0x31
   12be8:	uxtb	r3, r3
   12bec:	b	12b80 <__assert_fail@plt+0x1a7c>
   12bf0:	and	r3, ip, #1
   12bf4:	add	r3, r3, r6
   12bf8:	cmp	r3, #2
   12bfc:	movle	r3, #0
   12c00:	movgt	r3, #1
   12c04:	b	12b5c <__assert_fail@plt+0x1a58>
   12c08:	adds	r3, r0, #1
   12c0c:	str	r3, [sp, #24]
   12c10:	adc	r3, r1, #0
   12c14:	str	r3, [sp, #28]
   12c18:	ldrd	r2, [sp, #24]
   12c1c:	cmp	r3, #0
   12c20:	cmpeq	r2, #10
   12c24:	beq	12c64 <__assert_fail@plt+0x1b60>
   12c28:	mov	r3, #0
   12c2c:	mov	r6, r3
   12c30:	b	12b74 <__assert_fail@plt+0x1a70>
   12c34:	ldr	r8, [sp, #16]
   12c38:	b	12bac <__assert_fail@plt+0x1aa8>
   12c3c:	ldr	r3, [sp, #12]
   12c40:	mov	r0, #48	; 0x30
   12c44:	mov	r1, fp
   12c48:	strb	r0, [r8, #-1]
   12c4c:	ldr	r2, [sp, #12]
   12c50:	mvn	r3, r3
   12c54:	add	r8, r8, r3
   12c58:	mov	r0, r8
   12c5c:	bl	10eb8 <memcpy@plt>
   12c60:	b	12ac8 <__assert_fail@plt+0x19c4>
   12c64:	mov	r3, #0
   12c68:	ldr	r8, [sp, #16]
   12c6c:	mov	r6, r3
   12c70:	b	12bac <__assert_fail@plt+0x1aa8>
   12c74:	cmp	r3, #0
   12c78:	ldrne	r2, [sp, #16]
   12c7c:	bne	128c4 <__assert_fail@plt+0x17c0>
   12c80:	b	125c0 <__assert_fail@plt+0x14bc>
   12c84:	mov	r6, r7
   12c88:	ldr	r7, [sp, #12]
   12c8c:	b	125a4 <__assert_fail@plt+0x14a0>
   12c90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12c94:	subs	r4, r0, #0
   12c98:	strd	r6, [sp, #8]
   12c9c:	mov	r7, r1
   12ca0:	mov	r6, r2
   12ca4:	str	r8, [sp, #16]
   12ca8:	strd	sl, [sp, #20]
   12cac:	str	lr, [sp, #28]
   12cb0:	sub	sp, sp, #16
   12cb4:	beq	12dd4 <__assert_fail@plt+0x1cd0>
   12cb8:	ldrb	r3, [r4]
   12cbc:	movw	r5, #31132	; 0x799c
   12cc0:	movt	r5, #1
   12cc4:	add	r2, r5, #12
   12cc8:	add	r1, r5, #20
   12ccc:	cmp	r3, #39	; 0x27
   12cd0:	mov	r3, #4
   12cd4:	addeq	r4, r4, #1
   12cd8:	moveq	r8, #4
   12cdc:	mov	r0, r4
   12ce0:	movne	r8, #0
   12ce4:	bl	16688 <__assert_fail@plt+0x5584>
   12ce8:	cmp	r0, #0
   12cec:	blt	12d2c <__assert_fail@plt+0x1c28>
   12cf0:	add	r5, r5, r0, lsl #2
   12cf4:	mov	sl, #1
   12cf8:	mov	fp, #0
   12cfc:	mov	r0, #0
   12d00:	ldr	r3, [r5, #12]
   12d04:	strd	sl, [r6]
   12d08:	orr	r3, r8, r3
   12d0c:	str	r3, [r7]
   12d10:	add	sp, sp, #16
   12d14:	ldrd	r4, [sp]
   12d18:	ldrd	r6, [sp, #8]
   12d1c:	ldr	r8, [sp, #16]
   12d20:	ldrd	sl, [sp, #20]
   12d24:	add	sp, sp, #28
   12d28:	pop	{pc}		; (ldr pc, [sp], #4)
   12d2c:	movw	r0, #31224	; 0x79f8
   12d30:	movt	r0, #1
   12d34:	mov	r3, r6
   12d38:	mov	r2, #0
   12d3c:	add	r1, sp, #12
   12d40:	str	r0, [sp]
   12d44:	mov	r0, r4
   12d48:	bl	15bd0 <__assert_fail@plt+0x4acc>
   12d4c:	cmp	r0, #0
   12d50:	bne	12d98 <__assert_fail@plt+0x1c94>
   12d54:	ldrb	r3, [r4]
   12d58:	sub	r3, r3, #48	; 0x30
   12d5c:	cmp	r3, #9
   12d60:	bls	12d8c <__assert_fail@plt+0x1c88>
   12d64:	ldr	r2, [sp, #12]
   12d68:	cmp	r4, r2
   12d6c:	bne	12d7c <__assert_fail@plt+0x1c78>
   12d70:	b	12e28 <__assert_fail@plt+0x1d24>
   12d74:	cmp	r2, r4
   12d78:	beq	12e28 <__assert_fail@plt+0x1d24>
   12d7c:	ldrb	r3, [r4, #1]!
   12d80:	sub	r3, r3, #48	; 0x30
   12d84:	cmp	r3, #9
   12d88:	bhi	12d74 <__assert_fail@plt+0x1c70>
   12d8c:	ldrd	r2, [r6]
   12d90:	str	r8, [r7]
   12d94:	b	12da4 <__assert_fail@plt+0x1ca0>
   12d98:	mov	r1, #0
   12d9c:	ldrd	r2, [r6]
   12da0:	str	r1, [r7]
   12da4:	orrs	r3, r2, r3
   12da8:	bne	12d10 <__assert_fail@plt+0x1c0c>
   12dac:	movw	r0, #31208	; 0x79e8
   12db0:	movt	r0, #1
   12db4:	bl	10f78 <getenv@plt>
   12db8:	cmp	r0, #0
   12dbc:	mov	r3, #0
   12dc0:	moveq	r2, #1024	; 0x400
   12dc4:	movne	r2, #512	; 0x200
   12dc8:	mov	r0, #4
   12dcc:	strd	r2, [r6]
   12dd0:	b	12d10 <__assert_fail@plt+0x1c0c>
   12dd4:	movw	r0, #31184	; 0x79d0
   12dd8:	movt	r0, #1
   12ddc:	bl	10f78 <getenv@plt>
   12de0:	subs	r4, r0, #0
   12de4:	bne	12cb8 <__assert_fail@plt+0x1bb4>
   12de8:	movw	r0, #31196	; 0x79dc
   12dec:	movt	r0, #1
   12df0:	bl	10f78 <getenv@plt>
   12df4:	subs	r4, r0, #0
   12df8:	bne	12cb8 <__assert_fail@plt+0x1bb4>
   12dfc:	movw	r0, #31208	; 0x79e8
   12e00:	movt	r0, #1
   12e04:	bl	10f78 <getenv@plt>
   12e08:	subs	r3, r0, #0
   12e0c:	beq	12e54 <__assert_fail@plt+0x1d50>
   12e10:	mov	r2, #512	; 0x200
   12e14:	mov	r3, #0
   12e18:	mov	r0, r4
   12e1c:	strd	r2, [r6]
   12e20:	str	r4, [r7]
   12e24:	b	12d10 <__assert_fail@plt+0x1c0c>
   12e28:	ldrb	r3, [r2, #-1]
   12e2c:	cmp	r3, #66	; 0x42
   12e30:	orrne	r8, r8, #128	; 0x80
   12e34:	beq	12e40 <__assert_fail@plt+0x1d3c>
   12e38:	orr	r8, r8, #32
   12e3c:	b	12d8c <__assert_fail@plt+0x1c88>
   12e40:	ldrb	r3, [r2, #-2]
   12e44:	orr	r8, r8, #384	; 0x180
   12e48:	cmp	r3, #105	; 0x69
   12e4c:	bne	12d8c <__assert_fail@plt+0x1c88>
   12e50:	b	12e38 <__assert_fail@plt+0x1d34>
   12e54:	mov	r4, #1024	; 0x400
   12e58:	mov	r5, #0
   12e5c:	mov	r0, r3
   12e60:	strd	r4, [r6]
   12e64:	str	r3, [r7]
   12e68:	b	12d10 <__assert_fail@plt+0x1c0c>
   12e6c:	strd	r4, [sp, #-16]!
   12e70:	subs	r4, r0, #0
   12e74:	str	r6, [sp, #8]
   12e78:	str	lr, [sp, #12]
   12e7c:	beq	12f14 <__assert_fail@plt+0x1e10>
   12e80:	mov	r1, #47	; 0x2f
   12e84:	bl	1108c <strrchr@plt>
   12e88:	subs	r5, r0, #0
   12e8c:	beq	12eec <__assert_fail@plt+0x1de8>
   12e90:	add	r6, r5, #1
   12e94:	sub	r3, r6, r4
   12e98:	cmp	r3, #6
   12e9c:	ble	12eec <__assert_fail@plt+0x1de8>
   12ea0:	movw	r1, #31320	; 0x7a58
   12ea4:	movt	r1, #1
   12ea8:	mov	r2, #7
   12eac:	sub	r0, r5, #6
   12eb0:	bl	110e0 <strncmp@plt>
   12eb4:	cmp	r0, #0
   12eb8:	bne	12eec <__assert_fail@plt+0x1de8>
   12ebc:	movw	r1, #31328	; 0x7a60
   12ec0:	movt	r1, #1
   12ec4:	mov	r2, #3
   12ec8:	mov	r0, r6
   12ecc:	bl	110e0 <strncmp@plt>
   12ed0:	cmp	r0, #0
   12ed4:	movne	r4, r6
   12ed8:	bne	12eec <__assert_fail@plt+0x1de8>
   12edc:	add	r4, r5, #4
   12ee0:	movw	r3, #37208	; 0x9158
   12ee4:	movt	r3, #2
   12ee8:	str	r4, [r3]
   12eec:	movw	r2, #37260	; 0x918c
   12ef0:	movt	r2, #2
   12ef4:	ldr	r6, [sp, #8]
   12ef8:	movw	r3, #37212	; 0x915c
   12efc:	movt	r3, #2
   12f00:	str	r4, [r2]
   12f04:	str	r4, [r3]
   12f08:	ldrd	r4, [sp]
   12f0c:	add	sp, sp, #12
   12f10:	pop	{pc}		; (ldr pc, [sp], #4)
   12f14:	movw	r3, #37224	; 0x9168
   12f18:	movt	r3, #2
   12f1c:	movw	r0, #31264	; 0x7a20
   12f20:	movt	r0, #1
   12f24:	ldr	r3, [r3]
   12f28:	mov	r2, #55	; 0x37
   12f2c:	mov	r1, #1
   12f30:	bl	10f30 <fwrite@plt>
   12f34:	bl	110ec <abort@plt>
   12f38:	strd	r4, [sp, #-16]!
   12f3c:	mov	r4, #0
   12f40:	mov	r5, #0
   12f44:	cmp	r1, #10
   12f48:	str	r6, [sp, #8]
   12f4c:	strd	r4, [r0]
   12f50:	strd	r4, [r0, #8]
   12f54:	str	lr, [sp, #12]
   12f58:	strd	r4, [r0, #16]
   12f5c:	strd	r4, [r0, #24]
   12f60:	strd	r4, [r0, #32]
   12f64:	strd	r4, [r0, #40]	; 0x28
   12f68:	beq	12f80 <__assert_fail@plt+0x1e7c>
   12f6c:	ldrd	r4, [sp]
   12f70:	str	r1, [r0]
   12f74:	ldr	r6, [sp, #8]
   12f78:	add	sp, sp, #12
   12f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f80:	bl	110ec <abort@plt>
   12f84:	mov	r2, #5
   12f88:	strd	r4, [sp, #-16]!
   12f8c:	mov	r5, r0
   12f90:	str	r6, [sp, #8]
   12f94:	mov	r6, r1
   12f98:	mov	r1, r0
   12f9c:	mov	r0, #0
   12fa0:	str	lr, [sp, #12]
   12fa4:	bl	10ef4 <dcgettext@plt>
   12fa8:	cmp	r5, r0
   12fac:	mov	r4, r0
   12fb0:	beq	12fc8 <__assert_fail@plt+0x1ec4>
   12fb4:	mov	r0, r4
   12fb8:	ldrd	r4, [sp]
   12fbc:	ldr	r6, [sp, #8]
   12fc0:	add	sp, sp, #12
   12fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc8:	bl	16d60 <__assert_fail@plt+0x5c5c>
   12fcc:	ldrb	r3, [r0]
   12fd0:	bic	r3, r3, #32
   12fd4:	cmp	r3, #85	; 0x55
   12fd8:	bne	13040 <__assert_fail@plt+0x1f3c>
   12fdc:	ldrb	r3, [r0, #1]
   12fe0:	bic	r3, r3, #32
   12fe4:	cmp	r3, #84	; 0x54
   12fe8:	bne	130c0 <__assert_fail@plt+0x1fbc>
   12fec:	ldrb	r3, [r0, #2]
   12ff0:	bic	r3, r3, #32
   12ff4:	cmp	r3, #70	; 0x46
   12ff8:	bne	130c0 <__assert_fail@plt+0x1fbc>
   12ffc:	ldrb	r3, [r0, #3]
   13000:	cmp	r3, #45	; 0x2d
   13004:	bne	130c0 <__assert_fail@plt+0x1fbc>
   13008:	ldrb	r3, [r0, #4]
   1300c:	cmp	r3, #56	; 0x38
   13010:	bne	130c0 <__assert_fail@plt+0x1fbc>
   13014:	ldrb	r3, [r0, #5]
   13018:	cmp	r3, #0
   1301c:	bne	130c0 <__assert_fail@plt+0x1fbc>
   13020:	ldrb	r2, [r4]
   13024:	movw	r3, #31420	; 0x7abc
   13028:	movt	r3, #1
   1302c:	movw	r4, #31432	; 0x7ac8
   13030:	movt	r4, #1
   13034:	cmp	r2, #96	; 0x60
   13038:	movne	r4, r3
   1303c:	b	12fb4 <__assert_fail@plt+0x1eb0>
   13040:	cmp	r3, #71	; 0x47
   13044:	bne	130c0 <__assert_fail@plt+0x1fbc>
   13048:	ldrb	r3, [r0, #1]
   1304c:	bic	r3, r3, #32
   13050:	cmp	r3, #66	; 0x42
   13054:	bne	130c0 <__assert_fail@plt+0x1fbc>
   13058:	ldrb	r3, [r0, #2]
   1305c:	cmp	r3, #49	; 0x31
   13060:	bne	130c0 <__assert_fail@plt+0x1fbc>
   13064:	ldrb	r3, [r0, #3]
   13068:	cmp	r3, #56	; 0x38
   1306c:	bne	130c0 <__assert_fail@plt+0x1fbc>
   13070:	ldrb	r3, [r0, #4]
   13074:	cmp	r3, #48	; 0x30
   13078:	bne	130c0 <__assert_fail@plt+0x1fbc>
   1307c:	ldrb	r3, [r0, #5]
   13080:	cmp	r3, #51	; 0x33
   13084:	bne	130c0 <__assert_fail@plt+0x1fbc>
   13088:	ldrb	r3, [r0, #6]
   1308c:	cmp	r3, #48	; 0x30
   13090:	bne	130c0 <__assert_fail@plt+0x1fbc>
   13094:	ldrb	r3, [r0, #7]
   13098:	cmp	r3, #0
   1309c:	bne	130c0 <__assert_fail@plt+0x1fbc>
   130a0:	ldrb	r2, [r4]
   130a4:	movw	r3, #31424	; 0x7ac0
   130a8:	movt	r3, #1
   130ac:	movw	r4, #31428	; 0x7ac4
   130b0:	movt	r4, #1
   130b4:	cmp	r2, #96	; 0x60
   130b8:	movne	r4, r3
   130bc:	b	12fb4 <__assert_fail@plt+0x1eb0>
   130c0:	movw	r3, #31436	; 0x7acc
   130c4:	movt	r3, #1
   130c8:	cmp	r6, #9
   130cc:	movw	r4, #31416	; 0x7ab8
   130d0:	movt	r4, #1
   130d4:	movne	r4, r3
   130d8:	b	12fb4 <__assert_fail@plt+0x1eb0>
   130dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130e0:	strd	r6, [sp, #8]
   130e4:	strd	r8, [sp, #16]
   130e8:	strd	sl, [sp, #24]
   130ec:	mov	fp, r0
   130f0:	mov	sl, r1
   130f4:	str	lr, [sp, #32]
   130f8:	sub	sp, sp, #116	; 0x74
   130fc:	ldr	r8, [sp, #152]	; 0x98
   13100:	str	r3, [sp, #28]
   13104:	ldr	r3, [sp, #156]	; 0x9c
   13108:	str	r2, [sp, #32]
   1310c:	and	r4, r3, #2
   13110:	ubfx	r3, r3, #1, #1
   13114:	str	r3, [sp, #44]	; 0x2c
   13118:	bl	10f48 <__ctype_get_mb_cur_max@plt>
   1311c:	str	r0, [sp, #64]	; 0x40
   13120:	cmp	r8, #10
   13124:	ldrls	pc, [pc, r8, lsl #2]
   13128:	b	14898 <__assert_fail@plt+0x3794>
   1312c:	andeq	r3, r1, r0, lsr r5
   13130:	andeq	r3, r1, ip, asr #11
   13134:	andeq	r3, r1, r8, lsr #23
   13138:	andeq	r3, r1, ip, ror #11
   1313c:	muleq	r1, r4, r4
   13140:	andeq	r3, r1, r0, ror #9
   13144:	andeq	r3, r1, r0, ror #10
   13148:	muleq	r1, ip, r5
   1314c:	andeq	r3, r1, r8, asr r1
   13150:	andeq	r3, r1, r8, asr r1
   13154:	andeq	r3, r1, r8, asr r1
   13158:	cmp	r8, #10
   1315c:	beq	13188 <__assert_fail@plt+0x2084>
   13160:	mov	r1, r8
   13164:	movw	r0, #31440	; 0x7ad0
   13168:	movt	r0, #1
   1316c:	bl	12f84 <__assert_fail@plt+0x1e80>
   13170:	mov	r1, r8
   13174:	str	r0, [sp, #164]	; 0xa4
   13178:	movw	r0, #31436	; 0x7acc
   1317c:	movt	r0, #1
   13180:	bl	12f84 <__assert_fail@plt+0x1e80>
   13184:	str	r0, [sp, #168]	; 0xa8
   13188:	cmp	r4, #0
   1318c:	movne	r4, #0
   13190:	beq	14574 <__assert_fail@plt+0x3470>
   13194:	mov	r3, #1
   13198:	mov	r5, #0
   1319c:	ldr	r0, [sp, #168]	; 0xa8
   131a0:	str	r3, [sp, #36]	; 0x24
   131a4:	str	r3, [sp, #40]	; 0x28
   131a8:	str	r5, [sp, #68]	; 0x44
   131ac:	bl	10fd8 <strlen@plt>
   131b0:	ldr	r3, [sp, #168]	; 0xa8
   131b4:	str	r5, [sp, #48]	; 0x30
   131b8:	str	r0, [sp, #56]	; 0x38
   131bc:	str	r3, [sp, #60]	; 0x3c
   131c0:	str	r5, [sp, #72]	; 0x48
   131c4:	str	r8, [sp, #152]	; 0x98
   131c8:	mov	r8, fp
   131cc:	mov	r9, #0
   131d0:	ldr	fp, [sp, #152]	; 0x98
   131d4:	ldr	r3, [sp, #28]
   131d8:	cmn	r3, #1
   131dc:	beq	1373c <__assert_fail@plt+0x2638>
   131e0:	ldr	r3, [sp, #28]
   131e4:	subs	r6, r3, r9
   131e8:	movne	r6, #1
   131ec:	cmp	r6, #0
   131f0:	beq	13754 <__assert_fail@plt+0x2650>
   131f4:	ldr	r0, [sp, #32]
   131f8:	ldr	r7, [sp, #40]	; 0x28
   131fc:	add	r3, r0, r9
   13200:	cmp	fp, #2
   13204:	moveq	r7, #0
   13208:	andne	r7, r7, #1
   1320c:	str	r3, [sp, #52]	; 0x34
   13210:	cmp	r7, #0
   13214:	beq	13bf0 <__assert_fail@plt+0x2aec>
   13218:	ldr	r2, [sp, #56]	; 0x38
   1321c:	cmp	r2, #0
   13220:	beq	13e8c <__assert_fail@plt+0x2d88>
   13224:	ldr	r1, [sp, #28]
   13228:	cmp	r2, #1
   1322c:	mov	r3, r2
   13230:	movls	r3, #0
   13234:	movhi	r3, #1
   13238:	add	r5, r9, r2
   1323c:	cmn	r1, #1
   13240:	movne	r3, #0
   13244:	cmp	r3, #0
   13248:	beq	13254 <__assert_fail@plt+0x2150>
   1324c:	bl	10fd8 <strlen@plt>
   13250:	str	r0, [sp, #28]
   13254:	ldr	r3, [sp, #28]
   13258:	cmp	r5, r3
   1325c:	bhi	13e8c <__assert_fail@plt+0x2d88>
   13260:	ldr	r0, [sp, #52]	; 0x34
   13264:	ldr	r2, [sp, #56]	; 0x38
   13268:	ldr	r1, [sp, #60]	; 0x3c
   1326c:	bl	10edc <memcmp@plt>
   13270:	cmp	r0, #0
   13274:	bne	13e8c <__assert_fail@plt+0x2d88>
   13278:	ldr	r3, [sp, #44]	; 0x2c
   1327c:	cmp	r3, #0
   13280:	bne	147bc <__assert_fail@plt+0x36b8>
   13284:	ldr	r3, [sp, #52]	; 0x34
   13288:	ldrb	r5, [r3]
   1328c:	cmp	r5, #126	; 0x7e
   13290:	ldrls	pc, [pc, r5, lsl #2]
   13294:	b	13b4c <__assert_fail@plt+0x2a48>
   13298:	andeq	r3, r1, r0, asr sl
   1329c:	andeq	r3, r1, ip, asr #22
   132a0:	andeq	r3, r1, ip, asr #22
   132a4:	andeq	r3, r1, ip, asr #22
   132a8:	andeq	r3, r1, ip, asr #22
   132ac:	andeq	r3, r1, ip, asr #22
   132b0:	andeq	r3, r1, ip, asr #22
   132b4:	andeq	r3, r1, r4, lsr #20
   132b8:	andeq	r3, r1, ip, lsl sl
   132bc:	andeq	r3, r1, r4, ror #18
   132c0:	andeq	r3, r1, r0, lsl sl
   132c4:	andeq	r3, r1, ip, asr r9
   132c8:	andeq	r3, r1, ip, ror #19
   132cc:	andeq	r3, r1, r8, lsr sl
   132d0:	andeq	r3, r1, ip, asr #22
   132d4:	andeq	r3, r1, ip, asr #22
   132d8:	andeq	r3, r1, ip, asr #22
   132dc:	andeq	r3, r1, ip, asr #22
   132e0:	andeq	r3, r1, ip, asr #22
   132e4:	andeq	r3, r1, ip, asr #22
   132e8:	andeq	r3, r1, ip, asr #22
   132ec:	andeq	r3, r1, ip, asr #22
   132f0:	andeq	r3, r1, ip, asr #22
   132f4:	andeq	r3, r1, ip, asr #22
   132f8:	andeq	r3, r1, ip, asr #22
   132fc:	andeq	r3, r1, ip, asr #22
   13300:	andeq	r3, r1, ip, asr #22
   13304:	andeq	r3, r1, ip, asr #22
   13308:	andeq	r3, r1, ip, asr #22
   1330c:	andeq	r3, r1, ip, asr #22
   13310:	andeq	r3, r1, ip, asr #22
   13314:	andeq	r3, r1, ip, asr #22
   13318:	andeq	r3, r1, r8, lsr #22
   1331c:	andeq	r3, r1, r0, lsr sl
   13320:	andeq	r3, r1, r0, lsr sl
   13324:	andeq	r3, r1, ip, lsl #22
   13328:	andeq	r3, r1, r0, lsr sl
   1332c:	andeq	r3, r1, r0, asr #22
   13330:	andeq	r3, r1, r0, lsr sl
   13334:	andeq	r3, r1, ip, lsl #17
   13338:	andeq	r3, r1, r0, lsr sl
   1333c:	andeq	r3, r1, r0, lsr sl
   13340:	andeq	r3, r1, r0, lsr sl
   13344:	andeq	r3, r1, r0, asr #22
   13348:	andeq	r3, r1, r0, asr #22
   1334c:	andeq	r3, r1, r0, asr #22
   13350:	andeq	r3, r1, r0, asr #22
   13354:	andeq	r3, r1, r0, asr #22
   13358:	andeq	r3, r1, r0, asr #22
   1335c:	andeq	r3, r1, r0, asr #22
   13360:	andeq	r3, r1, r0, asr #22
   13364:	andeq	r3, r1, r0, asr #22
   13368:	andeq	r3, r1, r0, asr #22
   1336c:	andeq	r3, r1, r0, asr #22
   13370:	andeq	r3, r1, r0, asr #22
   13374:	andeq	r3, r1, r0, asr #22
   13378:	andeq	r3, r1, r0, asr #22
   1337c:	andeq	r3, r1, r0, asr #22
   13380:	andeq	r3, r1, r0, asr #22
   13384:	andeq	r3, r1, r0, lsr sl
   13388:	andeq	r3, r1, r0, lsr sl
   1338c:	andeq	r3, r1, r0, lsr sl
   13390:	andeq	r3, r1, r0, lsr sl
   13394:	andeq	r3, r1, r0, ror #16
   13398:	andeq	r3, r1, ip, asr #22
   1339c:	andeq	r3, r1, r0, asr #22
   133a0:	andeq	r3, r1, r0, asr #22
   133a4:	andeq	r3, r1, r0, asr #22
   133a8:	andeq	r3, r1, r0, asr #22
   133ac:	andeq	r3, r1, r0, asr #22
   133b0:	andeq	r3, r1, r0, asr #22
   133b4:	andeq	r3, r1, r0, asr #22
   133b8:	andeq	r3, r1, r0, asr #22
   133bc:	andeq	r3, r1, r0, asr #22
   133c0:	andeq	r3, r1, r0, asr #22
   133c4:	andeq	r3, r1, r0, asr #22
   133c8:	andeq	r3, r1, r0, asr #22
   133cc:	andeq	r3, r1, r0, asr #22
   133d0:	andeq	r3, r1, r0, asr #22
   133d4:	andeq	r3, r1, r0, asr #22
   133d8:	andeq	r3, r1, r0, asr #22
   133dc:	andeq	r3, r1, r0, asr #22
   133e0:	andeq	r3, r1, r0, asr #22
   133e4:	andeq	r3, r1, r0, asr #22
   133e8:	andeq	r3, r1, r0, asr #22
   133ec:	andeq	r3, r1, r0, asr #22
   133f0:	andeq	r3, r1, r0, asr #22
   133f4:	andeq	r3, r1, r0, asr #22
   133f8:	andeq	r3, r1, r0, asr #22
   133fc:	andeq	r3, r1, r0, asr #22
   13400:	andeq	r3, r1, r0, asr #22
   13404:	andeq	r3, r1, r0, lsr sl
   13408:	andeq	r3, r1, r8, lsl #16
   1340c:	andeq	r3, r1, r0, asr #22
   13410:	andeq	r3, r1, r0, lsr sl
   13414:	andeq	r3, r1, r0, asr #22
   13418:	andeq	r3, r1, r0, lsr sl
   1341c:	andeq	r3, r1, r0, asr #22
   13420:	andeq	r3, r1, r0, asr #22
   13424:	andeq	r3, r1, r0, asr #22
   13428:	andeq	r3, r1, r0, asr #22
   1342c:	andeq	r3, r1, r0, asr #22
   13430:	andeq	r3, r1, r0, asr #22
   13434:	andeq	r3, r1, r0, asr #22
   13438:	andeq	r3, r1, r0, asr #22
   1343c:	andeq	r3, r1, r0, asr #22
   13440:	andeq	r3, r1, r0, asr #22
   13444:	andeq	r3, r1, r0, asr #22
   13448:	andeq	r3, r1, r0, asr #22
   1344c:	andeq	r3, r1, r0, asr #22
   13450:	andeq	r3, r1, r0, asr #22
   13454:	andeq	r3, r1, r0, asr #22
   13458:	andeq	r3, r1, r0, asr #22
   1345c:	andeq	r3, r1, r0, asr #22
   13460:	andeq	r3, r1, r0, asr #22
   13464:	andeq	r3, r1, r0, asr #22
   13468:	andeq	r3, r1, r0, asr #22
   1346c:	andeq	r3, r1, r0, asr #22
   13470:	andeq	r3, r1, r0, asr #22
   13474:	andeq	r3, r1, r0, asr #22
   13478:	andeq	r3, r1, r0, asr #22
   1347c:	andeq	r3, r1, r0, asr #22
   13480:	andeq	r3, r1, r0, asr #22
   13484:	andeq	r3, r1, ip, lsr #12
   13488:	andeq	r3, r1, r0, lsr sl
   1348c:	andeq	r3, r1, ip, lsr #12
   13490:	andeq	r3, r1, ip, lsl #22
   13494:	cmp	r4, #0
   13498:	moveq	r3, #1
   1349c:	streq	r3, [sp, #40]	; 0x28
   134a0:	beq	13bb4 <__assert_fail@plt+0x2ab0>
   134a4:	mov	r3, #0
   134a8:	mov	r2, #1
   134ac:	mov	r4, r3
   134b0:	str	r2, [sp, #36]	; 0x24
   134b4:	str	r2, [sp, #44]	; 0x2c
   134b8:	str	r2, [sp, #56]	; 0x38
   134bc:	str	r3, [sp, #68]	; 0x44
   134c0:	movw	r3, #31436	; 0x7acc
   134c4:	movt	r3, #1
   134c8:	str	r4, [sp, #40]	; 0x28
   134cc:	mov	r8, #2
   134d0:	str	r4, [sp, #48]	; 0x30
   134d4:	str	r3, [sp, #60]	; 0x3c
   134d8:	str	r4, [sp, #72]	; 0x48
   134dc:	b	131c4 <__assert_fail@plt+0x20c0>
   134e0:	cmp	r4, #0
   134e4:	bne	14730 <__assert_fail@plt+0x362c>
   134e8:	cmp	sl, #0
   134ec:	beq	144f0 <__assert_fail@plt+0x33ec>
   134f0:	mov	r3, #34	; 0x22
   134f4:	mov	r1, r4
   134f8:	mov	r2, #1
   134fc:	strb	r3, [fp]
   13500:	movw	r3, #31416	; 0x7ab8
   13504:	movt	r3, #1
   13508:	mov	r4, r2
   1350c:	str	r2, [sp, #36]	; 0x24
   13510:	str	r2, [sp, #40]	; 0x28
   13514:	str	r1, [sp, #44]	; 0x2c
   13518:	str	r1, [sp, #48]	; 0x30
   1351c:	str	r2, [sp, #56]	; 0x38
   13520:	str	r3, [sp, #60]	; 0x3c
   13524:	str	r1, [sp, #68]	; 0x44
   13528:	str	r1, [sp, #72]	; 0x48
   1352c:	b	131c4 <__assert_fail@plt+0x20c0>
   13530:	mov	r3, #0
   13534:	mov	r4, r8
   13538:	str	r3, [sp, #40]	; 0x28
   1353c:	str	r3, [sp, #44]	; 0x2c
   13540:	str	r3, [sp, #48]	; 0x30
   13544:	str	r8, [sp, #56]	; 0x38
   13548:	str	r3, [sp, #60]	; 0x3c
   1354c:	str	r3, [sp, #68]	; 0x44
   13550:	mov	r3, #1
   13554:	str	r3, [sp, #36]	; 0x24
   13558:	str	r8, [sp, #72]	; 0x48
   1355c:	b	131c4 <__assert_fail@plt+0x20c0>
   13560:	mov	r3, #1
   13564:	mov	r2, #0
   13568:	mov	r4, r2
   1356c:	mov	r8, #5
   13570:	str	r3, [sp, #36]	; 0x24
   13574:	str	r3, [sp, #40]	; 0x28
   13578:	str	r3, [sp, #44]	; 0x2c
   1357c:	str	r2, [sp, #48]	; 0x30
   13580:	str	r3, [sp, #56]	; 0x38
   13584:	movw	r3, #31416	; 0x7ab8
   13588:	movt	r3, #1
   1358c:	str	r3, [sp, #60]	; 0x3c
   13590:	str	r2, [sp, #68]	; 0x44
   13594:	str	r2, [sp, #72]	; 0x48
   13598:	b	131c4 <__assert_fail@plt+0x20c0>
   1359c:	mov	r3, #0
   135a0:	mov	r2, #1
   135a4:	mov	r4, r3
   135a8:	str	r2, [sp, #36]	; 0x24
   135ac:	str	r2, [sp, #40]	; 0x28
   135b0:	str	r3, [sp, #44]	; 0x2c
   135b4:	str	r3, [sp, #48]	; 0x30
   135b8:	str	r3, [sp, #56]	; 0x38
   135bc:	str	r3, [sp, #60]	; 0x3c
   135c0:	str	r3, [sp, #68]	; 0x44
   135c4:	str	r3, [sp, #72]	; 0x48
   135c8:	b	131c4 <__assert_fail@plt+0x20c0>
   135cc:	mov	r2, #1
   135d0:	mov	r3, #0
   135d4:	mov	r4, r3
   135d8:	str	r2, [sp, #36]	; 0x24
   135dc:	str	r2, [sp, #44]	; 0x2c
   135e0:	str	r8, [sp, #56]	; 0x38
   135e4:	str	r3, [sp, #68]	; 0x44
   135e8:	b	134c0 <__assert_fail@plt+0x23bc>
   135ec:	mov	r3, #1
   135f0:	mov	r2, #0
   135f4:	mov	r4, r2
   135f8:	mov	r8, #2
   135fc:	str	r3, [sp, #36]	; 0x24
   13600:	str	r3, [sp, #40]	; 0x28
   13604:	str	r3, [sp, #44]	; 0x2c
   13608:	str	r2, [sp, #48]	; 0x30
   1360c:	str	r3, [sp, #56]	; 0x38
   13610:	movw	r3, #31436	; 0x7acc
   13614:	movt	r3, #1
   13618:	str	r3, [sp, #60]	; 0x3c
   1361c:	str	r2, [sp, #68]	; 0x44
   13620:	str	r2, [sp, #72]	; 0x48
   13624:	b	131c4 <__assert_fail@plt+0x20c0>
   13628:	mov	r7, #0
   1362c:	ldr	r3, [sp, #28]
   13630:	cmn	r3, #1
   13634:	beq	1410c <__assert_fail@plt+0x3008>
   13638:	ldr	r3, [sp, #28]
   1363c:	subs	r2, r3, #1
   13640:	movne	r2, #1
   13644:	sub	r3, fp, #2
   13648:	cmp	r2, #0
   1364c:	clz	r3, r3
   13650:	lsr	r3, r3, #5
   13654:	bne	13660 <__assert_fail@plt+0x255c>
   13658:	cmp	r9, #0
   1365c:	beq	13e6c <__assert_fail@plt+0x2d68>
   13660:	mov	r6, #0
   13664:	ldr	r2, [sp, #40]	; 0x28
   13668:	eor	r2, r2, #1
   1366c:	orrs	r3, r3, r2
   13670:	bne	13848 <__assert_fail@plt+0x2744>
   13674:	ldr	r2, [sp, #160]	; 0xa0
   13678:	cmp	r2, #0
   1367c:	beq	1369c <__assert_fail@plt+0x2598>
   13680:	ldr	r0, [sp, #160]	; 0xa0
   13684:	ubfx	r1, r5, #5, #8
   13688:	and	r2, r5, #31
   1368c:	ldr	r1, [r0, r1, lsl #2]
   13690:	lsr	r2, r1, r2
   13694:	tst	r2, #1
   13698:	bne	136a4 <__assert_fail@plt+0x25a0>
   1369c:	cmp	r7, #0
   136a0:	beq	13914 <__assert_fail@plt+0x2810>
   136a4:	ldr	r2, [sp, #44]	; 0x2c
   136a8:	sub	r3, fp, #2
   136ac:	clz	r3, r3
   136b0:	lsr	r3, r3, #5
   136b4:	cmp	r2, #0
   136b8:	bne	14460 <__assert_fail@plt+0x335c>
   136bc:	ldr	r2, [sp, #48]	; 0x30
   136c0:	eor	r2, r2, #1
   136c4:	ands	r3, r3, r2
   136c8:	beq	13700 <__assert_fail@plt+0x25fc>
   136cc:	cmp	sl, r4
   136d0:	str	r3, [sp, #48]	; 0x30
   136d4:	movhi	r2, #39	; 0x27
   136d8:	strbhi	r2, [r8, r4]
   136dc:	add	r2, r4, #1
   136e0:	cmp	sl, r2
   136e4:	movhi	r1, #36	; 0x24
   136e8:	strbhi	r1, [r8, r2]
   136ec:	add	r2, r4, #2
   136f0:	add	r4, r4, #3
   136f4:	cmp	sl, r2
   136f8:	movhi	r1, #39	; 0x27
   136fc:	strbhi	r1, [r8, r2]
   13700:	cmp	r4, sl
   13704:	add	r9, r9, #1
   13708:	movcc	r3, #92	; 0x5c
   1370c:	strbcc	r3, [r8, r4]
   13710:	add	r4, r4, #1
   13714:	cmp	r4, sl
   13718:	ldr	r3, [sp, #36]	; 0x24
   1371c:	strbcc	r5, [r8, r4]
   13720:	cmp	r6, #0
   13724:	add	r4, r4, #1
   13728:	moveq	r3, #0
   1372c:	str	r3, [sp, #36]	; 0x24
   13730:	ldr	r3, [sp, #28]
   13734:	cmn	r3, #1
   13738:	bne	131e0 <__assert_fail@plt+0x20dc>
   1373c:	ldr	r3, [sp, #32]
   13740:	ldrb	r6, [r3, r9]
   13744:	adds	r6, r6, #0
   13748:	movne	r6, #1
   1374c:	cmp	r6, #0
   13750:	bne	131f4 <__assert_fail@plt+0x20f0>
   13754:	str	fp, [sp, #152]	; 0x98
   13758:	mov	fp, r8
   1375c:	cmp	r4, #0
   13760:	ldr	r1, [sp, #44]	; 0x2c
   13764:	movne	r3, #0
   13768:	ldr	r8, [sp, #152]	; 0x98
   1376c:	sub	r2, r8, #2
   13770:	clz	r2, r2
   13774:	lsr	r2, r2, #5
   13778:	andeq	r3, r2, r1
   1377c:	cmp	r3, #0
   13780:	bne	1483c <__assert_fail@plt+0x3738>
   13784:	eor	r3, r1, #1
   13788:	ands	r2, r2, r3
   1378c:	beq	14768 <__assert_fail@plt+0x3664>
   13790:	ldr	r3, [sp, #68]	; 0x44
   13794:	cmp	r3, #0
   13798:	beq	1476c <__assert_fail@plt+0x3668>
   1379c:	ldr	r3, [sp, #36]	; 0x24
   137a0:	cmp	r3, #0
   137a4:	bne	147f8 <__assert_fail@plt+0x36f4>
   137a8:	ldr	r3, [sp, #72]	; 0x48
   137ac:	adds	r3, r3, #0
   137b0:	movne	r3, #1
   137b4:	cmp	sl, #0
   137b8:	movne	r3, #0
   137bc:	cmp	r3, #0
   137c0:	ldreq	r2, [sp, #68]	; 0x44
   137c4:	beq	1476c <__assert_fail@plt+0x3668>
   137c8:	ldr	r2, [sp, #72]	; 0x48
   137cc:	str	r3, [sp, #68]	; 0x44
   137d0:	movw	r3, #31436	; 0x7acc
   137d4:	movt	r3, #1
   137d8:	mov	r1, #39	; 0x27
   137dc:	mov	r4, #1
   137e0:	ldr	sl, [sp, #72]	; 0x48
   137e4:	mov	r8, #2
   137e8:	str	r3, [sp, #60]	; 0x3c
   137ec:	mov	r3, #0
   137f0:	strb	r1, [fp]
   137f4:	str	r3, [sp, #44]	; 0x2c
   137f8:	str	r4, [sp, #56]	; 0x38
   137fc:	str	r2, [sp, #72]	; 0x48
   13800:	b	131c4 <__assert_fail@plt+0x20c0>
   13804:	mov	r7, #0
   13808:	cmp	fp, #2
   1380c:	beq	140ec <__assert_fail@plt+0x2fe8>
   13810:	ldr	r2, [sp, #40]	; 0x28
   13814:	ldr	r3, [sp, #56]	; 0x38
   13818:	ldr	r1, [sp, #44]	; 0x2c
   1381c:	cmp	r3, #0
   13820:	moveq	r3, #0
   13824:	andne	r3, r2, r1
   13828:	cmp	r3, #0
   1382c:	moveq	r5, #92	; 0x5c
   13830:	moveq	r3, r5
   13834:	bne	140f8 <__assert_fail@plt+0x2ff4>
   13838:	ldr	r2, [sp, #40]	; 0x28
   1383c:	cmp	r2, #0
   13840:	bne	14534 <__assert_fail@plt+0x3430>
   13844:	mov	r6, #0
   13848:	ldr	r3, [sp, #44]	; 0x2c
   1384c:	cmp	r3, #0
   13850:	beq	140e4 <__assert_fail@plt+0x2fe0>
   13854:	mov	r3, #0
   13858:	b	13674 <__assert_fail@plt+0x2570>
   1385c:	mov	r7, #0
   13860:	cmp	fp, #2
   13864:	beq	1415c <__assert_fail@plt+0x3058>
   13868:	cmp	fp, #5
   1386c:	beq	14120 <__assert_fail@plt+0x301c>
   13870:	sub	r3, fp, #2
   13874:	mov	r6, #0
   13878:	clz	r3, r3
   1387c:	mov	r5, #63	; 0x3f
   13880:	lsr	r3, r3, #5
   13884:	b	13664 <__assert_fail@plt+0x2560>
   13888:	mov	r7, #0
   1388c:	cmp	fp, #2
   13890:	movne	r3, #0
   13894:	movne	r5, #39	; 0x27
   13898:	strne	r6, [sp, #68]	; 0x44
   1389c:	bne	13664 <__assert_fail@plt+0x2560>
   138a0:	ldr	r3, [sp, #44]	; 0x2c
   138a4:	cmp	r3, #0
   138a8:	bne	14564 <__assert_fail@plt+0x3460>
   138ac:	ldr	r3, [sp, #72]	; 0x48
   138b0:	cmp	sl, #0
   138b4:	clz	r3, r3
   138b8:	lsr	r3, r3, #5
   138bc:	moveq	r3, #0
   138c0:	cmp	r3, #0
   138c4:	bne	14490 <__assert_fail@plt+0x338c>
   138c8:	cmp	sl, r4
   138cc:	movhi	r3, #39	; 0x27
   138d0:	strbhi	r3, [r8, r4]
   138d4:	add	r3, r4, #1
   138d8:	cmp	sl, r3
   138dc:	movhi	r2, #92	; 0x5c
   138e0:	strbhi	r2, [r8, r3]
   138e4:	add	r3, r4, #2
   138e8:	cmp	sl, r3
   138ec:	bls	138f8 <__assert_fail@plt+0x27f4>
   138f0:	mov	r2, #39	; 0x27
   138f4:	strb	r2, [r8, r3]
   138f8:	mov	r3, #0
   138fc:	cmp	r7, #0
   13900:	add	r4, r4, #3
   13904:	mov	r5, #39	; 0x27
   13908:	str	r3, [sp, #48]	; 0x30
   1390c:	str	r6, [sp, #68]	; 0x44
   13910:	bne	136a4 <__assert_fail@plt+0x25a0>
   13914:	ldr	r2, [sp, #48]	; 0x30
   13918:	eor	r3, r3, #1
   1391c:	add	r9, r9, #1
   13920:	and	r3, r3, r2
   13924:	uxtb	r3, r3
   13928:	cmp	r3, #0
   1392c:	beq	13714 <__assert_fail@plt+0x2610>
   13930:	cmp	sl, r4
   13934:	movhi	r3, #39	; 0x27
   13938:	strbhi	r3, [r8, r4]
   1393c:	add	r3, r4, #1
   13940:	add	r4, r4, #2
   13944:	cmp	sl, r3
   13948:	movhi	r2, #39	; 0x27
   1394c:	strbhi	r2, [r8, r3]
   13950:	mov	r3, #0
   13954:	str	r3, [sp, #48]	; 0x30
   13958:	b	13714 <__assert_fail@plt+0x2610>
   1395c:	mov	r3, #118	; 0x76
   13960:	b	13838 <__assert_fail@plt+0x2734>
   13964:	mov	r3, #116	; 0x74
   13968:	ldr	r2, [sp, #44]	; 0x2c
   1396c:	cmp	fp, #2
   13970:	movne	r2, #0
   13974:	andeq	r2, r2, #1
   13978:	cmp	r2, #0
   1397c:	beq	13838 <__assert_fail@plt+0x2734>
   13980:	mov	fp, r8
   13984:	mov	r8, #2
   13988:	ldr	r3, [sp, #40]	; 0x28
   1398c:	cmp	r3, #0
   13990:	movne	r8, #4
   13994:	mov	lr, #0
   13998:	mov	r0, fp
   1399c:	ldr	r2, [sp, #32]
   139a0:	ldr	r3, [sp, #156]	; 0x9c
   139a4:	ldr	r1, [sp, #164]	; 0xa4
   139a8:	bic	ip, r3, #2
   139ac:	ldr	r3, [sp, #28]
   139b0:	stm	sp, {r8, ip, lr}
   139b4:	ldr	ip, [sp, #168]	; 0xa8
   139b8:	str	r1, [sp, #12]
   139bc:	mov	r1, sl
   139c0:	str	ip, [sp, #16]
   139c4:	bl	130dc <__assert_fail@plt+0x1fd8>
   139c8:	mov	r4, r0
   139cc:	mov	r0, r4
   139d0:	add	sp, sp, #116	; 0x74
   139d4:	ldrd	r4, [sp]
   139d8:	ldrd	r6, [sp, #8]
   139dc:	ldrd	r8, [sp, #16]
   139e0:	ldrd	sl, [sp, #24]
   139e4:	add	sp, sp, #32
   139e8:	pop	{pc}		; (ldr pc, [sp], #4)
   139ec:	mov	r5, #102	; 0x66
   139f0:	ldr	r2, [sp, #44]	; 0x2c
   139f4:	sub	r3, fp, #2
   139f8:	clz	r3, r3
   139fc:	lsr	r3, r3, #5
   13a00:	cmp	r2, #0
   13a04:	bne	14460 <__assert_fail@plt+0x335c>
   13a08:	mov	r6, r2
   13a0c:	b	13700 <__assert_fail@plt+0x25fc>
   13a10:	mov	r5, #110	; 0x6e
   13a14:	mov	r6, #0
   13a18:	b	136a4 <__assert_fail@plt+0x25a0>
   13a1c:	mov	r5, #98	; 0x62
   13a20:	b	139f0 <__assert_fail@plt+0x28ec>
   13a24:	mov	r5, #97	; 0x61
   13a28:	b	139f0 <__assert_fail@plt+0x28ec>
   13a2c:	mov	r7, #0
   13a30:	mov	r6, #0
   13a34:	b	13854 <__assert_fail@plt+0x2750>
   13a38:	mov	r5, #114	; 0x72
   13a3c:	b	13a14 <__assert_fail@plt+0x2910>
   13a40:	ldr	r3, [sp, #44]	; 0x2c
   13a44:	cmp	r3, #0
   13a48:	bne	147d8 <__assert_fail@plt+0x36d4>
   13a4c:	mov	r7, r3
   13a50:	ldr	r3, [sp, #48]	; 0x30
   13a54:	sub	r2, fp, #2
   13a58:	clz	r2, r2
   13a5c:	lsr	r2, r2, #5
   13a60:	eor	r3, r3, #1
   13a64:	ands	r3, r2, r3
   13a68:	beq	1447c <__assert_fail@plt+0x3378>
   13a6c:	cmp	sl, r4
   13a70:	movhi	r1, #39	; 0x27
   13a74:	strbhi	r1, [r8, r4]
   13a78:	add	r1, r4, #1
   13a7c:	cmp	sl, r1
   13a80:	movhi	r0, #36	; 0x24
   13a84:	strbhi	r0, [r8, r1]
   13a88:	add	r1, r4, #2
   13a8c:	cmp	sl, r1
   13a90:	movhi	r0, #39	; 0x27
   13a94:	strbhi	r0, [r8, r1]
   13a98:	add	r1, r4, #3
   13a9c:	cmp	sl, r1
   13aa0:	bls	144d4 <__assert_fail@plt+0x33d0>
   13aa4:	mov	r4, r1
   13aa8:	mov	r1, #92	; 0x5c
   13aac:	mov	r0, r4
   13ab0:	str	r3, [sp, #48]	; 0x30
   13ab4:	strb	r1, [r8, r4]
   13ab8:	cmp	fp, #2
   13abc:	add	r4, r4, #1
   13ac0:	beq	14524 <__assert_fail@plt+0x3420>
   13ac4:	ldr	r1, [sp, #28]
   13ac8:	add	r3, r9, #1
   13acc:	cmp	r3, r1
   13ad0:	bcs	13ae8 <__assert_fail@plt+0x29e4>
   13ad4:	ldr	r1, [sp, #32]
   13ad8:	ldrb	r3, [r1, r3]
   13adc:	sub	r3, r3, #48	; 0x30
   13ae0:	cmp	r3, #9
   13ae4:	bls	1453c <__assert_fail@plt+0x3438>
   13ae8:	mov	r5, #48	; 0x30
   13aec:	ldr	r3, [sp, #40]	; 0x28
   13af0:	eor	r3, r3, #1
   13af4:	orrs	r2, r2, r3
   13af8:	mov	r3, r6
   13afc:	moveq	r6, r2
   13b00:	beq	13674 <__assert_fail@plt+0x2570>
   13b04:	mov	r6, #0
   13b08:	b	1369c <__assert_fail@plt+0x2598>
   13b0c:	cmp	r9, #0
   13b10:	mov	r2, r7
   13b14:	bne	140b4 <__assert_fail@plt+0x2fb0>
   13b18:	mov	r6, r7
   13b1c:	mov	r3, r9
   13b20:	mov	r7, r2
   13b24:	b	13664 <__assert_fail@plt+0x2560>
   13b28:	mov	r2, r7
   13b2c:	mov	r6, r7
   13b30:	mov	r3, #0
   13b34:	mov	r7, r2
   13b38:	mov	r5, #32
   13b3c:	b	13664 <__assert_fail@plt+0x2560>
   13b40:	mov	r6, r7
   13b44:	b	13854 <__assert_fail@plt+0x2750>
   13b48:	mov	r7, #0
   13b4c:	ldr	r3, [sp, #64]	; 0x40
   13b50:	cmp	r3, #1
   13b54:	bne	14174 <__assert_fail@plt+0x3070>
   13b58:	bl	10fc0 <__ctype_b_loc@plt>
   13b5c:	ldr	r2, [r0]
   13b60:	sxth	r3, r5
   13b64:	lsl	r3, r3, #1
   13b68:	ldr	r1, [sp, #64]	; 0x40
   13b6c:	ldrh	r3, [r2, r3]
   13b70:	mov	ip, r1
   13b74:	and	r3, r3, #16384	; 0x4000
   13b78:	cmp	r3, #0
   13b7c:	ldr	r3, [sp, #40]	; 0x28
   13b80:	movne	r6, #1
   13b84:	moveq	r6, #0
   13b88:	movne	r2, #0
   13b8c:	andeq	r2, r3, #1
   13b90:	cmp	r2, #0
   13b94:	bne	144bc <__assert_fail@plt+0x33b8>
   13b98:	sub	r3, fp, #2
   13b9c:	clz	r3, r3
   13ba0:	lsr	r3, r3, #5
   13ba4:	b	13664 <__assert_fail@plt+0x2560>
   13ba8:	cmp	r4, #0
   13bac:	bne	1484c <__assert_fail@plt+0x3748>
   13bb0:	str	r4, [sp, #40]	; 0x28
   13bb4:	cmp	sl, #0
   13bb8:	bne	1487c <__assert_fail@plt+0x3778>
   13bbc:	mov	r3, #1
   13bc0:	movw	r2, #31436	; 0x7acc
   13bc4:	movt	r2, #1
   13bc8:	mov	r4, r3
   13bcc:	mov	r8, #2
   13bd0:	str	r3, [sp, #36]	; 0x24
   13bd4:	str	sl, [sp, #44]	; 0x2c
   13bd8:	str	sl, [sp, #48]	; 0x30
   13bdc:	str	r3, [sp, #56]	; 0x38
   13be0:	str	r2, [sp, #60]	; 0x3c
   13be4:	str	sl, [sp, #68]	; 0x44
   13be8:	str	sl, [sp, #72]	; 0x48
   13bec:	b	131c4 <__assert_fail@plt+0x20c0>
   13bf0:	ldr	r3, [sp, #32]
   13bf4:	ldrb	r5, [r3, r9]
   13bf8:	cmp	r5, #126	; 0x7e
   13bfc:	ldrls	pc, [pc, r5, lsl #2]
   13c00:	b	13b4c <__assert_fail@plt+0x2a48>
   13c04:	andeq	r3, r1, r8, lsr #28
   13c08:	andeq	r3, r1, ip, asr #22
   13c0c:	andeq	r3, r1, ip, asr #22
   13c10:	andeq	r3, r1, ip, asr #22
   13c14:	andeq	r3, r1, ip, asr #22
   13c18:	andeq	r3, r1, ip, asr #22
   13c1c:	andeq	r3, r1, ip, asr #22
   13c20:	andeq	r3, r1, r0, lsr #28
   13c24:	andeq	r3, r1, r8, lsl lr
   13c28:	andeq	r3, r1, r4, ror #18
   13c2c:	andeq	r3, r1, r0, lsl lr
   13c30:	andeq	r3, r1, ip, asr r9
   13c34:	andeq	r3, r1, r8, lsl #28
   13c38:	andeq	r3, r1, r0, lsl #28
   13c3c:	andeq	r3, r1, ip, asr #22
   13c40:	andeq	r3, r1, ip, asr #22
   13c44:	andeq	r3, r1, ip, asr #22
   13c48:	andeq	r3, r1, ip, asr #22
   13c4c:	andeq	r3, r1, ip, asr #22
   13c50:	andeq	r3, r1, ip, asr #22
   13c54:	andeq	r3, r1, ip, asr #22
   13c58:	andeq	r3, r1, ip, asr #22
   13c5c:	andeq	r3, r1, ip, asr #22
   13c60:	andeq	r3, r1, ip, asr #22
   13c64:	andeq	r3, r1, ip, asr #22
   13c68:	andeq	r3, r1, ip, asr #22
   13c6c:	andeq	r3, r1, ip, asr #22
   13c70:	andeq	r3, r1, ip, asr #22
   13c74:	andeq	r3, r1, ip, asr #22
   13c78:	andeq	r3, r1, ip, asr #22
   13c7c:	andeq	r3, r1, ip, asr #22
   13c80:	andeq	r3, r1, ip, asr #22
   13c84:	andeq	r3, r1, ip, ror lr
   13c88:	andeq	r3, r1, ip, asr lr
   13c8c:	andeq	r3, r1, ip, asr lr
   13c90:	andeq	r3, r1, ip, asr #28
   13c94:	andeq	r3, r1, ip, asr lr
   13c98:	muleq	r1, r8, fp
   13c9c:	andeq	r3, r1, ip, asr lr
   13ca0:	andeq	r3, r1, ip, lsl #17
   13ca4:	andeq	r3, r1, ip, asr lr
   13ca8:	andeq	r3, r1, ip, asr lr
   13cac:	andeq	r3, r1, ip, asr lr
   13cb0:	muleq	r1, r8, fp
   13cb4:	muleq	r1, r8, fp
   13cb8:	muleq	r1, r8, fp
   13cbc:	muleq	r1, r8, fp
   13cc0:	muleq	r1, r8, fp
   13cc4:	muleq	r1, r8, fp
   13cc8:	muleq	r1, r8, fp
   13ccc:	muleq	r1, r8, fp
   13cd0:	muleq	r1, r8, fp
   13cd4:	muleq	r1, r8, fp
   13cd8:	muleq	r1, r8, fp
   13cdc:	muleq	r1, r8, fp
   13ce0:	muleq	r1, r8, fp
   13ce4:	muleq	r1, r8, fp
   13ce8:	muleq	r1, r8, fp
   13cec:	muleq	r1, r8, fp
   13cf0:	andeq	r3, r1, ip, asr lr
   13cf4:	andeq	r3, r1, ip, asr lr
   13cf8:	andeq	r3, r1, ip, asr lr
   13cfc:	andeq	r3, r1, ip, asr lr
   13d00:	andeq	r3, r1, r0, ror #16
   13d04:	andeq	r3, r1, ip, asr #22
   13d08:	muleq	r1, r8, fp
   13d0c:	muleq	r1, r8, fp
   13d10:	muleq	r1, r8, fp
   13d14:	muleq	r1, r8, fp
   13d18:	muleq	r1, r8, fp
   13d1c:	muleq	r1, r8, fp
   13d20:	muleq	r1, r8, fp
   13d24:	muleq	r1, r8, fp
   13d28:	muleq	r1, r8, fp
   13d2c:	muleq	r1, r8, fp
   13d30:	muleq	r1, r8, fp
   13d34:	muleq	r1, r8, fp
   13d38:	muleq	r1, r8, fp
   13d3c:	muleq	r1, r8, fp
   13d40:	muleq	r1, r8, fp
   13d44:	muleq	r1, r8, fp
   13d48:	muleq	r1, r8, fp
   13d4c:	muleq	r1, r8, fp
   13d50:	muleq	r1, r8, fp
   13d54:	muleq	r1, r8, fp
   13d58:	muleq	r1, r8, fp
   13d5c:	muleq	r1, r8, fp
   13d60:	muleq	r1, r8, fp
   13d64:	muleq	r1, r8, fp
   13d68:	muleq	r1, r8, fp
   13d6c:	muleq	r1, r8, fp
   13d70:	andeq	r3, r1, ip, asr lr
   13d74:	andeq	r3, r1, r8, lsl #16
   13d78:	muleq	r1, r8, fp
   13d7c:	andeq	r3, r1, ip, asr lr
   13d80:	muleq	r1, r8, fp
   13d84:	andeq	r3, r1, ip, asr lr
   13d88:	muleq	r1, r8, fp
   13d8c:	muleq	r1, r8, fp
   13d90:	muleq	r1, r8, fp
   13d94:	muleq	r1, r8, fp
   13d98:	muleq	r1, r8, fp
   13d9c:	muleq	r1, r8, fp
   13da0:	muleq	r1, r8, fp
   13da4:	muleq	r1, r8, fp
   13da8:	muleq	r1, r8, fp
   13dac:	muleq	r1, r8, fp
   13db0:	muleq	r1, r8, fp
   13db4:	muleq	r1, r8, fp
   13db8:	muleq	r1, r8, fp
   13dbc:	muleq	r1, r8, fp
   13dc0:	muleq	r1, r8, fp
   13dc4:	muleq	r1, r8, fp
   13dc8:	muleq	r1, r8, fp
   13dcc:	muleq	r1, r8, fp
   13dd0:	muleq	r1, r8, fp
   13dd4:	muleq	r1, r8, fp
   13dd8:	muleq	r1, r8, fp
   13ddc:	muleq	r1, r8, fp
   13de0:	muleq	r1, r8, fp
   13de4:	muleq	r1, r8, fp
   13de8:	muleq	r1, r8, fp
   13dec:	muleq	r1, r8, fp
   13df0:	andeq	r3, r1, ip, lsr #12
   13df4:	andeq	r3, r1, ip, asr lr
   13df8:	andeq	r3, r1, ip, lsr #12
   13dfc:	andeq	r3, r1, ip, asr #28
   13e00:	mov	r3, #114	; 0x72
   13e04:	b	13968 <__assert_fail@plt+0x2864>
   13e08:	mov	r3, #102	; 0x66
   13e0c:	b	13838 <__assert_fail@plt+0x2734>
   13e10:	mov	r3, #110	; 0x6e
   13e14:	b	13968 <__assert_fail@plt+0x2864>
   13e18:	mov	r3, #98	; 0x62
   13e1c:	b	13838 <__assert_fail@plt+0x2734>
   13e20:	mov	r3, #97	; 0x61
   13e24:	b	13838 <__assert_fail@plt+0x2734>
   13e28:	ldr	r3, [sp, #40]	; 0x28
   13e2c:	cmp	r3, #0
   13e30:	bne	13a40 <__assert_fail@plt+0x293c>
   13e34:	ldr	r3, [sp, #156]	; 0x9c
   13e38:	tst	r3, #1
   13e3c:	addne	r9, r9, #1
   13e40:	bne	131d4 <__assert_fail@plt+0x20d0>
   13e44:	ldr	r7, [sp, #40]	; 0x28
   13e48:	b	13844 <__assert_fail@plt+0x2740>
   13e4c:	sub	r3, fp, #2
   13e50:	clz	r3, r3
   13e54:	lsr	r3, r3, #5
   13e58:	b	13658 <__assert_fail@plt+0x2554>
   13e5c:	sub	r3, fp, #2
   13e60:	mov	r6, #0
   13e64:	clz	r3, r3
   13e68:	lsr	r3, r3, #5
   13e6c:	ldr	r2, [sp, #44]	; 0x2c
   13e70:	tst	r2, r3
   13e74:	beq	13664 <__assert_fail@plt+0x2560>
   13e78:	b	13980 <__assert_fail@plt+0x287c>
   13e7c:	sub	r3, fp, #2
   13e80:	clz	r3, r3
   13e84:	lsr	r3, r3, #5
   13e88:	b	13e6c <__assert_fail@plt+0x2d68>
   13e8c:	ldr	r3, [sp, #52]	; 0x34
   13e90:	ldrb	r5, [r3]
   13e94:	cmp	r5, #126	; 0x7e
   13e98:	ldrls	pc, [pc, r5, lsl #2]
   13e9c:	b	13b48 <__assert_fail@plt+0x2a44>
   13ea0:	andeq	r3, r1, r0, asr #20
   13ea4:	andeq	r3, r1, r8, asr #22
   13ea8:	andeq	r3, r1, r8, asr #22
   13eac:	andeq	r3, r1, r8, asr #22
   13eb0:	andeq	r3, r1, r8, asr #22
   13eb4:	andeq	r3, r1, r8, asr #22
   13eb8:	andeq	r3, r1, r8, asr #22
   13ebc:	andeq	r3, r1, r4, lsr #20
   13ec0:	andeq	r3, r1, ip, lsl sl
   13ec4:	ldrdeq	r4, [r1], -r8
   13ec8:	andeq	r3, r1, r0, lsl sl
   13ecc:	andeq	r4, r1, ip, asr #1
   13ed0:	andeq	r3, r1, ip, ror #19
   13ed4:	andeq	r3, r1, r8, lsr sl
   13ed8:	andeq	r3, r1, r8, asr #22
   13edc:	andeq	r3, r1, r8, asr #22
   13ee0:	andeq	r3, r1, r8, asr #22
   13ee4:	andeq	r3, r1, r8, asr #22
   13ee8:	andeq	r3, r1, r8, asr #22
   13eec:	andeq	r3, r1, r8, asr #22
   13ef0:	andeq	r3, r1, r8, asr #22
   13ef4:	andeq	r3, r1, r8, asr #22
   13ef8:	andeq	r3, r1, r8, asr #22
   13efc:	andeq	r3, r1, r8, asr #22
   13f00:	andeq	r3, r1, r8, asr #22
   13f04:	andeq	r3, r1, r8, asr #22
   13f08:	andeq	r3, r1, r8, asr #22
   13f0c:	andeq	r3, r1, r8, asr #22
   13f10:	andeq	r3, r1, r8, asr #22
   13f14:	andeq	r3, r1, r8, asr #22
   13f18:	andeq	r3, r1, r8, asr #22
   13f1c:	andeq	r3, r1, r8, asr #22
   13f20:	andeq	r4, r1, r4, asr #1
   13f24:	andeq	r3, r1, ip, lsr #20
   13f28:	andeq	r3, r1, ip, lsr #20
   13f2c:	andeq	r4, r1, r8, lsr #1
   13f30:	andeq	r3, r1, ip, lsr #20
   13f34:	muleq	r1, ip, r0
   13f38:	andeq	r3, r1, ip, lsr #20
   13f3c:	andeq	r3, r1, r8, lsl #17
   13f40:	andeq	r3, r1, ip, lsr #20
   13f44:	andeq	r3, r1, ip, lsr #20
   13f48:	andeq	r3, r1, ip, lsr #20
   13f4c:	muleq	r1, ip, r0
   13f50:	muleq	r1, ip, r0
   13f54:	muleq	r1, ip, r0
   13f58:	muleq	r1, ip, r0
   13f5c:	muleq	r1, ip, r0
   13f60:	muleq	r1, ip, r0
   13f64:	muleq	r1, ip, r0
   13f68:	muleq	r1, ip, r0
   13f6c:	muleq	r1, ip, r0
   13f70:	muleq	r1, ip, r0
   13f74:	muleq	r1, ip, r0
   13f78:	muleq	r1, ip, r0
   13f7c:	muleq	r1, ip, r0
   13f80:	muleq	r1, ip, r0
   13f84:	muleq	r1, ip, r0
   13f88:	muleq	r1, ip, r0
   13f8c:	andeq	r3, r1, ip, lsr #20
   13f90:	andeq	r3, r1, ip, lsr #20
   13f94:	andeq	r3, r1, ip, lsr #20
   13f98:	andeq	r3, r1, ip, lsr #20
   13f9c:	andeq	r3, r1, ip, asr r8
   13fa0:	andeq	r3, r1, r8, asr #22
   13fa4:	muleq	r1, ip, r0
   13fa8:	muleq	r1, ip, r0
   13fac:	muleq	r1, ip, r0
   13fb0:	muleq	r1, ip, r0
   13fb4:	muleq	r1, ip, r0
   13fb8:	muleq	r1, ip, r0
   13fbc:	muleq	r1, ip, r0
   13fc0:	muleq	r1, ip, r0
   13fc4:	muleq	r1, ip, r0
   13fc8:	muleq	r1, ip, r0
   13fcc:	muleq	r1, ip, r0
   13fd0:	muleq	r1, ip, r0
   13fd4:	muleq	r1, ip, r0
   13fd8:	muleq	r1, ip, r0
   13fdc:	muleq	r1, ip, r0
   13fe0:	muleq	r1, ip, r0
   13fe4:	muleq	r1, ip, r0
   13fe8:	muleq	r1, ip, r0
   13fec:	muleq	r1, ip, r0
   13ff0:	muleq	r1, ip, r0
   13ff4:	muleq	r1, ip, r0
   13ff8:	muleq	r1, ip, r0
   13ffc:	muleq	r1, ip, r0
   14000:	muleq	r1, ip, r0
   14004:	muleq	r1, ip, r0
   14008:	muleq	r1, ip, r0
   1400c:	andeq	r3, r1, ip, lsr #20
   14010:	andeq	r3, r1, r4, lsl #16
   14014:	muleq	r1, ip, r0
   14018:	andeq	r3, r1, ip, lsr #20
   1401c:	muleq	r1, ip, r0
   14020:	andeq	r3, r1, ip, lsr #20
   14024:	muleq	r1, ip, r0
   14028:	muleq	r1, ip, r0
   1402c:	muleq	r1, ip, r0
   14030:	muleq	r1, ip, r0
   14034:	muleq	r1, ip, r0
   14038:	muleq	r1, ip, r0
   1403c:	muleq	r1, ip, r0
   14040:	muleq	r1, ip, r0
   14044:	muleq	r1, ip, r0
   14048:	muleq	r1, ip, r0
   1404c:	muleq	r1, ip, r0
   14050:	muleq	r1, ip, r0
   14054:	muleq	r1, ip, r0
   14058:	muleq	r1, ip, r0
   1405c:	muleq	r1, ip, r0
   14060:	muleq	r1, ip, r0
   14064:	muleq	r1, ip, r0
   14068:	muleq	r1, ip, r0
   1406c:	muleq	r1, ip, r0
   14070:	muleq	r1, ip, r0
   14074:	muleq	r1, ip, r0
   14078:	muleq	r1, ip, r0
   1407c:	muleq	r1, ip, r0
   14080:	muleq	r1, ip, r0
   14084:	muleq	r1, ip, r0
   14088:	muleq	r1, ip, r0
   1408c:	andeq	r3, r1, r8, lsr #12
   14090:	andeq	r3, r1, ip, lsr #20
   14094:	andeq	r3, r1, r8, lsr #12
   14098:	andeq	r4, r1, r8, lsr #1
   1409c:	mov	r6, r7
   140a0:	mov	r7, #0
   140a4:	b	13854 <__assert_fail@plt+0x2750>
   140a8:	cmp	r9, #0
   140ac:	mov	r2, #0
   140b0:	beq	13b18 <__assert_fail@plt+0x2a14>
   140b4:	mov	r6, #0
   140b8:	mov	r7, r2
   140bc:	mov	r3, r6
   140c0:	b	13674 <__assert_fail@plt+0x2570>
   140c4:	mov	r2, #0
   140c8:	b	13b2c <__assert_fail@plt+0x2a28>
   140cc:	mov	r7, #0
   140d0:	mov	r3, #118	; 0x76
   140d4:	b	13838 <__assert_fail@plt+0x2734>
   140d8:	mov	r7, #0
   140dc:	mov	r3, #116	; 0x74
   140e0:	b	13968 <__assert_fail@plt+0x2864>
   140e4:	ldr	r3, [sp, #44]	; 0x2c
   140e8:	b	1369c <__assert_fail@plt+0x2598>
   140ec:	ldr	r3, [sp, #44]	; 0x2c
   140f0:	cmp	r3, #0
   140f4:	bne	14564 <__assert_fail@plt+0x3460>
   140f8:	add	r9, r9, #1
   140fc:	mov	r6, #0
   14100:	ldr	r3, [sp, #48]	; 0x30
   14104:	mov	r5, #92	; 0x5c
   14108:	b	13928 <__assert_fail@plt+0x2824>
   1410c:	ldr	r3, [sp, #32]
   14110:	ldrb	r2, [r3, #1]
   14114:	adds	r2, r2, #0
   14118:	movne	r2, #1
   1411c:	b	13644 <__assert_fail@plt+0x2540>
   14120:	ldr	r3, [sp, #156]	; 0x9c
   14124:	ands	r3, r3, #4
   14128:	beq	14150 <__assert_fail@plt+0x304c>
   1412c:	ldr	r2, [sp, #28]
   14130:	add	r3, r9, #2
   14134:	cmp	r3, r2
   14138:	bcs	1414c <__assert_fail@plt+0x3048>
   1413c:	ldr	r2, [sp, #52]	; 0x34
   14140:	ldrb	r5, [r2, #1]
   14144:	cmp	r5, #63	; 0x3f
   14148:	beq	145c8 <__assert_fail@plt+0x34c4>
   1414c:	mov	r3, #0
   14150:	mov	r5, #63	; 0x3f
   14154:	mov	r6, r3
   14158:	b	13664 <__assert_fail@plt+0x2560>
   1415c:	ldr	r3, [sp, #44]	; 0x2c
   14160:	cmp	r3, #0
   14164:	bne	14564 <__assert_fail@plt+0x3460>
   14168:	mov	r6, r3
   1416c:	mov	r5, #63	; 0x3f
   14170:	b	1369c <__assert_fail@plt+0x2598>
   14174:	ldr	r1, [sp, #28]
   14178:	mov	r2, #0
   1417c:	mov	r3, #0
   14180:	strd	r2, [sp, #104]	; 0x68
   14184:	cmn	r1, #1
   14188:	bne	14198 <__assert_fail@plt+0x3094>
   1418c:	ldr	r0, [sp, #32]
   14190:	bl	10fd8 <strlen@plt>
   14194:	str	r0, [sp, #28]
   14198:	str	r8, [sp, #76]	; 0x4c
   1419c:	mov	r3, #0
   141a0:	str	sl, [sp, #80]	; 0x50
   141a4:	ldr	sl, [sp, #32]
   141a8:	str	r5, [sp, #84]	; 0x54
   141ac:	mov	r5, r3
   141b0:	ldr	r8, [sp, #44]	; 0x2c
   141b4:	str	r7, [sp, #88]	; 0x58
   141b8:	str	r4, [sp, #92]	; 0x5c
   141bc:	ldr	r2, [sp, #28]
   141c0:	add	r4, r9, r5
   141c4:	add	r3, sp, #104	; 0x68
   141c8:	add	r7, sl, r4
   141cc:	add	r0, sp, #100	; 0x64
   141d0:	mov	r1, r7
   141d4:	sub	r2, r2, r4
   141d8:	bl	16dac <__assert_fail@plt+0x5ca8>
   141dc:	subs	r1, r0, #0
   141e0:	beq	1422c <__assert_fail@plt+0x3128>
   141e4:	cmn	r1, #1
   141e8:	beq	145a4 <__assert_fail@plt+0x34a0>
   141ec:	cmn	r1, #2
   141f0:	beq	146c4 <__assert_fail@plt+0x35c0>
   141f4:	cmp	fp, #2
   141f8:	movne	r3, #0
   141fc:	andeq	r3, r8, #1
   14200:	cmp	r3, #0
   14204:	bne	14390 <__assert_fail@plt+0x328c>
   14208:	ldr	r0, [sp, #100]	; 0x64
   1420c:	add	r5, r5, r1
   14210:	bl	10f18 <iswprint@plt>
   14214:	cmp	r0, #0
   14218:	add	r0, sp, #104	; 0x68
   1421c:	moveq	r6, #0
   14220:	bl	10ed0 <mbsinit@plt>
   14224:	cmp	r0, #0
   14228:	beq	141bc <__assert_fail@plt+0x30b8>
   1422c:	ldr	r3, [sp, #40]	; 0x28
   14230:	mov	ip, r5
   14234:	eor	r2, r6, #1
   14238:	ldr	r8, [sp, #76]	; 0x4c
   1423c:	ldr	sl, [sp, #80]	; 0x50
   14240:	and	r2, r2, r3
   14244:	ldr	r5, [sp, #84]	; 0x54
   14248:	ldr	r7, [sp, #88]	; 0x58
   1424c:	ldr	r4, [sp, #92]	; 0x5c
   14250:	cmp	ip, #1
   14254:	bls	13b90 <__assert_fail@plt+0x2a8c>
   14258:	add	r1, ip, r9
   1425c:	mov	r0, #39	; 0x27
   14260:	ldr	lr, [sp, #52]	; 0x34
   14264:	mov	ip, #0
   14268:	str	r6, [sp, #52]	; 0x34
   1426c:	ldr	r6, [sp, #48]	; 0x30
   14270:	b	1432c <__assert_fail@plt+0x3228>
   14274:	ldr	ip, [sp, #44]	; 0x2c
   14278:	sub	r3, fp, #2
   1427c:	clz	r3, r3
   14280:	lsr	r3, r3, #5
   14284:	cmp	ip, #0
   14288:	bne	1449c <__assert_fail@plt+0x3398>
   1428c:	eor	ip, r6, #1
   14290:	ands	r3, r3, ip
   14294:	beq	142c4 <__assert_fail@plt+0x31c0>
   14298:	cmp	sl, r4
   1429c:	add	ip, r4, #1
   142a0:	strbhi	r0, [r8, r4]
   142a4:	cmp	sl, ip
   142a8:	movhi	r6, #36	; 0x24
   142ac:	strbhi	r6, [r8, ip]
   142b0:	add	ip, r4, #2
   142b4:	mov	r6, r3
   142b8:	cmp	sl, ip
   142bc:	add	r4, r4, #3
   142c0:	strbhi	r0, [r8, ip]
   142c4:	cmp	sl, r4
   142c8:	movhi	r3, #92	; 0x5c
   142cc:	strbhi	r3, [r8, r4]
   142d0:	add	r3, r4, #1
   142d4:	cmp	sl, r3
   142d8:	bls	142e8 <__assert_fail@plt+0x31e4>
   142dc:	lsr	ip, r5, #6
   142e0:	add	ip, ip, #48	; 0x30
   142e4:	strb	ip, [r8, r3]
   142e8:	add	r3, r4, #2
   142ec:	cmp	sl, r3
   142f0:	bls	14300 <__assert_fail@plt+0x31fc>
   142f4:	ubfx	ip, r5, #3, #3
   142f8:	add	ip, ip, #48	; 0x30
   142fc:	strb	ip, [r8, r3]
   14300:	add	r9, r9, #1
   14304:	and	r5, r5, #7
   14308:	cmp	r9, r1
   1430c:	add	r5, r5, #48	; 0x30
   14310:	add	r4, r4, #3
   14314:	bcs	144c8 <__assert_fail@plt+0x33c4>
   14318:	mov	ip, r2
   1431c:	cmp	sl, r4
   14320:	strbhi	r5, [r8, r4]
   14324:	add	r4, r4, #1
   14328:	ldrb	r5, [lr, #1]!
   1432c:	cmp	r2, #0
   14330:	bne	14274 <__assert_fail@plt+0x3170>
   14334:	eor	r3, ip, #1
   14338:	cmp	r7, #0
   1433c:	and	r3, r3, r6
   14340:	uxtb	r3, r3
   14344:	beq	14358 <__assert_fail@plt+0x3254>
   14348:	cmp	sl, r4
   1434c:	movhi	r7, #92	; 0x5c
   14350:	strbhi	r7, [r8, r4]
   14354:	add	r4, r4, #1
   14358:	add	r9, r9, #1
   1435c:	cmp	r9, r1
   14360:	bcs	144b0 <__assert_fail@plt+0x33ac>
   14364:	cmp	r3, #0
   14368:	beq	144e8 <__assert_fail@plt+0x33e4>
   1436c:	cmp	sl, r4
   14370:	add	r3, r4, #1
   14374:	mov	r7, #0
   14378:	strbhi	r0, [r8, r4]
   1437c:	cmp	sl, r3
   14380:	add	r4, r4, #2
   14384:	mov	r6, r7
   14388:	strbhi	r0, [r8, r3]
   1438c:	b	1431c <__assert_fail@plt+0x3218>
   14390:	cmp	r1, #1
   14394:	beq	14208 <__assert_fail@plt+0x3104>
   14398:	add	r2, r4, #1
   1439c:	add	r3, sl, r1
   143a0:	add	r2, sl, r2
   143a4:	add	r4, r3, r4
   143a8:	ldrb	r3, [r2], #1
   143ac:	sub	r3, r3, #91	; 0x5b
   143b0:	cmp	r3, #33	; 0x21
   143b4:	ldrls	pc, [pc, r3, lsl #2]
   143b8:	b	14444 <__assert_fail@plt+0x3340>
   143bc:	andeq	r4, r1, r0, asr r4
   143c0:	andeq	r4, r1, r0, asr r4
   143c4:	andeq	r4, r1, r4, asr #8
   143c8:	andeq	r4, r1, r0, asr r4
   143cc:	andeq	r4, r1, r4, asr #8
   143d0:	andeq	r4, r1, r0, asr r4
   143d4:	andeq	r4, r1, r4, asr #8
   143d8:	andeq	r4, r1, r4, asr #8
   143dc:	andeq	r4, r1, r4, asr #8
   143e0:	andeq	r4, r1, r4, asr #8
   143e4:	andeq	r4, r1, r4, asr #8
   143e8:	andeq	r4, r1, r4, asr #8
   143ec:	andeq	r4, r1, r4, asr #8
   143f0:	andeq	r4, r1, r4, asr #8
   143f4:	andeq	r4, r1, r4, asr #8
   143f8:	andeq	r4, r1, r4, asr #8
   143fc:	andeq	r4, r1, r4, asr #8
   14400:	andeq	r4, r1, r4, asr #8
   14404:	andeq	r4, r1, r4, asr #8
   14408:	andeq	r4, r1, r4, asr #8
   1440c:	andeq	r4, r1, r4, asr #8
   14410:	andeq	r4, r1, r4, asr #8
   14414:	andeq	r4, r1, r4, asr #8
   14418:	andeq	r4, r1, r4, asr #8
   1441c:	andeq	r4, r1, r4, asr #8
   14420:	andeq	r4, r1, r4, asr #8
   14424:	andeq	r4, r1, r4, asr #8
   14428:	andeq	r4, r1, r4, asr #8
   1442c:	andeq	r4, r1, r4, asr #8
   14430:	andeq	r4, r1, r4, asr #8
   14434:	andeq	r4, r1, r4, asr #8
   14438:	andeq	r4, r1, r4, asr #8
   1443c:	andeq	r4, r1, r4, asr #8
   14440:	andeq	r4, r1, r0, asr r4
   14444:	cmp	r4, r2
   14448:	bne	143a8 <__assert_fail@plt+0x32a4>
   1444c:	b	14208 <__assert_fail@plt+0x3104>
   14450:	mov	r8, #2
   14454:	ldr	fp, [sp, #76]	; 0x4c
   14458:	ldr	sl, [sp, #80]	; 0x50
   1445c:	b	13988 <__assert_fail@plt+0x2884>
   14460:	ldr	r2, [sp, #40]	; 0x28
   14464:	str	fp, [sp, #152]	; 0x98
   14468:	mov	fp, r8
   1446c:	ldr	r8, [sp, #152]	; 0x98
   14470:	and	r2, r2, r3
   14474:	str	r2, [sp, #40]	; 0x28
   14478:	b	13988 <__assert_fail@plt+0x2884>
   1447c:	cmp	sl, r4
   14480:	movls	r0, r4
   14484:	bls	13ab8 <__assert_fail@plt+0x29b4>
   14488:	ldr	r3, [sp, #48]	; 0x30
   1448c:	b	13aa8 <__assert_fail@plt+0x29a4>
   14490:	str	sl, [sp, #72]	; 0x48
   14494:	ldr	sl, [sp, #44]	; 0x2c
   14498:	b	138f8 <__assert_fail@plt+0x27f4>
   1449c:	str	r3, [sp, #40]	; 0x28
   144a0:	str	fp, [sp, #152]	; 0x98
   144a4:	mov	fp, r8
   144a8:	ldr	r8, [sp, #152]	; 0x98
   144ac:	b	13988 <__assert_fail@plt+0x2884>
   144b0:	str	r6, [sp, #48]	; 0x30
   144b4:	ldr	r6, [sp, #52]	; 0x34
   144b8:	b	13928 <__assert_fail@plt+0x2824>
   144bc:	mov	r6, #0
   144c0:	ldr	r2, [sp, #40]	; 0x28
   144c4:	b	14258 <__assert_fail@plt+0x3154>
   144c8:	str	r6, [sp, #48]	; 0x30
   144cc:	ldr	r6, [sp, #52]	; 0x34
   144d0:	b	13714 <__assert_fail@plt+0x2610>
   144d4:	add	r4, r4, #4
   144d8:	mov	r6, #0
   144dc:	str	r3, [sp, #48]	; 0x30
   144e0:	mov	r5, #48	; 0x30
   144e4:	b	1369c <__assert_fail@plt+0x2598>
   144e8:	mov	r7, r3
   144ec:	b	1431c <__assert_fail@plt+0x3218>
   144f0:	mov	r3, #1
   144f4:	movw	r2, #31416	; 0x7ab8
   144f8:	movt	r2, #1
   144fc:	mov	r4, r3
   14500:	str	r3, [sp, #36]	; 0x24
   14504:	str	r3, [sp, #40]	; 0x28
   14508:	str	sl, [sp, #44]	; 0x2c
   1450c:	str	sl, [sp, #48]	; 0x30
   14510:	str	r3, [sp, #56]	; 0x38
   14514:	str	r2, [sp, #60]	; 0x3c
   14518:	str	sl, [sp, #68]	; 0x44
   1451c:	str	sl, [sp, #72]	; 0x48
   14520:	b	131c4 <__assert_fail@plt+0x20c0>
   14524:	mov	r3, r6
   14528:	mov	r5, #48	; 0x30
   1452c:	mov	r6, #0
   14530:	b	1369c <__assert_fail@plt+0x2598>
   14534:	mov	r5, r3
   14538:	b	13a14 <__assert_fail@plt+0x2910>
   1453c:	cmp	sl, r4
   14540:	mov	r5, #48	; 0x30
   14544:	movhi	r3, #48	; 0x30
   14548:	strbhi	r3, [r8, r4]
   1454c:	add	r3, r0, #2
   14550:	add	r4, r0, #3
   14554:	cmp	sl, r3
   14558:	movhi	r1, #48	; 0x30
   1455c:	strbhi	r1, [r8, r3]
   14560:	b	13aec <__assert_fail@plt+0x29e8>
   14564:	str	fp, [sp, #152]	; 0x98
   14568:	mov	fp, r8
   1456c:	ldr	r8, [sp, #152]	; 0x98
   14570:	b	13988 <__assert_fail@plt+0x2884>
   14574:	ldr	r3, [sp, #164]	; 0xa4
   14578:	ldrb	r3, [r3]
   1457c:	cmp	r3, #0
   14580:	beq	13194 <__assert_fail@plt+0x2090>
   14584:	ldr	r2, [sp, #164]	; 0xa4
   14588:	cmp	sl, r4
   1458c:	strbhi	r3, [fp, r4]
   14590:	add	r4, r4, #1
   14594:	ldrb	r3, [r2, #1]!
   14598:	cmp	r3, #0
   1459c:	bne	14588 <__assert_fail@plt+0x3484>
   145a0:	b	13194 <__assert_fail@plt+0x2090>
   145a4:	mov	ip, r5
   145a8:	mov	r6, #0
   145ac:	ldr	r2, [sp, #40]	; 0x28
   145b0:	ldr	r8, [sp, #76]	; 0x4c
   145b4:	ldr	sl, [sp, #80]	; 0x50
   145b8:	ldr	r5, [sp, #84]	; 0x54
   145bc:	ldr	r7, [sp, #88]	; 0x58
   145c0:	ldr	r4, [sp, #92]	; 0x5c
   145c4:	b	14250 <__assert_fail@plt+0x314c>
   145c8:	ldr	r2, [sp, #32]
   145cc:	ldrb	r1, [r2, r3]
   145d0:	sub	r2, r1, #33	; 0x21
   145d4:	cmp	r2, #29
   145d8:	ldrls	pc, [pc, r2, lsl #2]
   145dc:	b	146b8 <__assert_fail@plt+0x35b4>
   145e0:	andeq	r4, r1, r8, asr r6
   145e4:			; <UNDEFINED> instruction: 0x000146b8
   145e8:			; <UNDEFINED> instruction: 0x000146b8
   145ec:			; <UNDEFINED> instruction: 0x000146b8
   145f0:			; <UNDEFINED> instruction: 0x000146b8
   145f4:			; <UNDEFINED> instruction: 0x000146b8
   145f8:	andeq	r4, r1, r8, asr r6
   145fc:	andeq	r4, r1, r8, asr r6
   14600:	andeq	r4, r1, r8, asr r6
   14604:			; <UNDEFINED> instruction: 0x000146b8
   14608:			; <UNDEFINED> instruction: 0x000146b8
   1460c:			; <UNDEFINED> instruction: 0x000146b8
   14610:	andeq	r4, r1, r8, asr r6
   14614:			; <UNDEFINED> instruction: 0x000146b8
   14618:	andeq	r4, r1, r8, asr r6
   1461c:			; <UNDEFINED> instruction: 0x000146b8
   14620:			; <UNDEFINED> instruction: 0x000146b8
   14624:			; <UNDEFINED> instruction: 0x000146b8
   14628:			; <UNDEFINED> instruction: 0x000146b8
   1462c:			; <UNDEFINED> instruction: 0x000146b8
   14630:			; <UNDEFINED> instruction: 0x000146b8
   14634:			; <UNDEFINED> instruction: 0x000146b8
   14638:			; <UNDEFINED> instruction: 0x000146b8
   1463c:			; <UNDEFINED> instruction: 0x000146b8
   14640:			; <UNDEFINED> instruction: 0x000146b8
   14644:			; <UNDEFINED> instruction: 0x000146b8
   14648:			; <UNDEFINED> instruction: 0x000146b8
   1464c:	andeq	r4, r1, r8, asr r6
   14650:	andeq	r4, r1, r8, asr r6
   14654:	andeq	r4, r1, r8, asr r6
   14658:	ldr	r2, [sp, #44]	; 0x2c
   1465c:	cmp	r2, #0
   14660:	bne	147bc <__assert_fail@plt+0x36b8>
   14664:	cmp	sl, r4
   14668:	mov	r5, r1
   1466c:	movhi	r2, #63	; 0x3f
   14670:	mov	r9, r3
   14674:	strbhi	r2, [r8, r4]
   14678:	add	r2, r4, #1
   1467c:	cmp	sl, r2
   14680:	movhi	r0, #34	; 0x22
   14684:	strbhi	r0, [r8, r2]
   14688:	add	r2, r4, #2
   1468c:	cmp	sl, r2
   14690:	movhi	r0, #34	; 0x22
   14694:	strbhi	r0, [r8, r2]
   14698:	add	r2, r4, #3
   1469c:	add	r4, r4, #4
   146a0:	cmp	sl, r2
   146a4:	movhi	r0, #63	; 0x3f
   146a8:	strbhi	r0, [r8, r2]
   146ac:	mov	r2, #0
   146b0:	mov	r6, r2
   146b4:	b	13aec <__assert_fail@plt+0x29e8>
   146b8:	mov	r3, #0
   146bc:	mov	r6, r3
   146c0:	b	13664 <__assert_fail@plt+0x2560>
   146c4:	ldr	r0, [sp, #28]
   146c8:	mov	r1, r4
   146cc:	mov	r2, r7
   146d0:	mov	r3, r5
   146d4:	mov	ip, r5
   146d8:	ldr	r8, [sp, #76]	; 0x4c
   146dc:	ldr	sl, [sp, #80]	; 0x50
   146e0:	cmp	r1, r0
   146e4:	ldr	r5, [sp, #84]	; 0x54
   146e8:	ldr	r7, [sp, #88]	; 0x58
   146ec:	ldr	r4, [sp, #92]	; 0x5c
   146f0:	bcs	14724 <__assert_fail@plt+0x3620>
   146f4:	ldrb	r6, [r2]
   146f8:	cmp	r6, #0
   146fc:	bne	14710 <__assert_fail@plt+0x360c>
   14700:	b	14844 <__assert_fail@plt+0x3740>
   14704:	ldrb	r6, [r2, #1]!
   14708:	cmp	r6, #0
   1470c:	beq	147cc <__assert_fail@plt+0x36c8>
   14710:	add	r3, r3, #1
   14714:	add	r1, r9, r3
   14718:	cmp	r1, r0
   1471c:	bcc	14704 <__assert_fail@plt+0x3600>
   14720:	mov	ip, r3
   14724:	mov	r6, #0
   14728:	ldr	r2, [sp, #40]	; 0x28
   1472c:	b	14250 <__assert_fail@plt+0x314c>
   14730:	mov	r3, #1
   14734:	mov	r2, #0
   14738:	mov	r4, r2
   1473c:	str	r3, [sp, #36]	; 0x24
   14740:	str	r3, [sp, #40]	; 0x28
   14744:	str	r3, [sp, #44]	; 0x2c
   14748:	str	r2, [sp, #48]	; 0x30
   1474c:	str	r3, [sp, #56]	; 0x38
   14750:	movw	r3, #31416	; 0x7ab8
   14754:	movt	r3, #1
   14758:	str	r3, [sp, #60]	; 0x3c
   1475c:	str	r2, [sp, #68]	; 0x44
   14760:	str	r2, [sp, #72]	; 0x48
   14764:	b	131c4 <__assert_fail@plt+0x20c0>
   14768:	mov	r2, r3
   1476c:	ldr	r3, [sp, #60]	; 0x3c
   14770:	cmp	r3, #0
   14774:	moveq	r2, #0
   14778:	andne	r2, r2, #1
   1477c:	cmp	r2, #0
   14780:	beq	147ac <__assert_fail@plt+0x36a8>
   14784:	mov	r2, r3
   14788:	ldrb	r3, [r3]
   1478c:	cmp	r3, #0
   14790:	beq	147ac <__assert_fail@plt+0x36a8>
   14794:	cmp	sl, r4
   14798:	strbhi	r3, [fp, r4]
   1479c:	add	r4, r4, #1
   147a0:	ldrb	r3, [r2, #1]!
   147a4:	cmp	r3, #0
   147a8:	bne	14794 <__assert_fail@plt+0x3690>
   147ac:	cmp	sl, r4
   147b0:	movhi	r3, #0
   147b4:	strbhi	r3, [fp, r4]
   147b8:	b	139cc <__assert_fail@plt+0x28c8>
   147bc:	str	fp, [sp, #152]	; 0x98
   147c0:	mov	fp, r8
   147c4:	ldr	r8, [sp, #152]	; 0x98
   147c8:	b	13994 <__assert_fail@plt+0x2890>
   147cc:	mov	ip, r3
   147d0:	ldr	r2, [sp, #40]	; 0x28
   147d4:	b	14250 <__assert_fail@plt+0x314c>
   147d8:	str	fp, [sp, #152]	; 0x98
   147dc:	mov	fp, r8
   147e0:	ldr	r8, [sp, #152]	; 0x98
   147e4:	sub	r3, r8, #2
   147e8:	clz	r3, r3
   147ec:	lsr	r3, r3, #5
   147f0:	str	r3, [sp, #40]	; 0x28
   147f4:	b	13988 <__assert_fail@plt+0x2884>
   147f8:	mov	ip, #5
   147fc:	ldr	r3, [sp, #28]
   14800:	str	ip, [sp]
   14804:	ldr	r2, [sp, #156]	; 0x9c
   14808:	ldr	ip, [sp, #164]	; 0xa4
   1480c:	ldr	r0, [sp, #160]	; 0xa0
   14810:	str	r2, [sp, #4]
   14814:	ldr	r2, [sp, #32]
   14818:	ldr	r1, [sp, #72]	; 0x48
   1481c:	str	ip, [sp, #12]
   14820:	ldr	ip, [sp, #168]	; 0xa8
   14824:	str	r0, [sp, #8]
   14828:	mov	r0, fp
   1482c:	str	ip, [sp, #16]
   14830:	bl	130dc <__assert_fail@plt+0x1fd8>
   14834:	mov	r4, r0
   14838:	b	139cc <__assert_fail@plt+0x28c8>
   1483c:	mov	r8, #2
   14840:	b	13988 <__assert_fail@plt+0x2884>
   14844:	ldr	r2, [sp, #40]	; 0x28
   14848:	b	14250 <__assert_fail@plt+0x314c>
   1484c:	mov	r3, #0
   14850:	mov	r2, #1
   14854:	mov	r4, r3
   14858:	strd	r2, [sp, #36]	; 0x24
   1485c:	strd	r2, [sp, #44]	; 0x2c
   14860:	str	r2, [sp, #56]	; 0x38
   14864:	str	r3, [sp, #68]	; 0x44
   14868:	str	r3, [sp, #72]	; 0x48
   1486c:	movw	r3, #31436	; 0x7acc
   14870:	movt	r3, #1
   14874:	str	r3, [sp, #60]	; 0x3c
   14878:	b	131c4 <__assert_fail@plt+0x20c0>
   1487c:	mov	r3, #0
   14880:	mov	r1, #1
   14884:	mov	r2, r3
   14888:	str	r1, [sp, #36]	; 0x24
   1488c:	str	r3, [sp, #48]	; 0x30
   14890:	str	sl, [sp, #72]	; 0x48
   14894:	b	137cc <__assert_fail@plt+0x26c8>
   14898:	bl	110ec <abort@plt>
   1489c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   148a0:	mov	r4, r0
   148a4:	mov	r5, r3
   148a8:	strd	r6, [sp, #8]
   148ac:	movw	r7, #37136	; 0x9110
   148b0:	movt	r7, #2
   148b4:	strd	r8, [sp, #16]
   148b8:	strd	sl, [sp, #24]
   148bc:	mov	sl, r1
   148c0:	mov	fp, r2
   148c4:	str	lr, [sp, #32]
   148c8:	sub	sp, sp, #60	; 0x3c
   148cc:	bl	10ff0 <__errno_location@plt>
   148d0:	mov	r8, r0
   148d4:	cmn	r4, #-2147483647	; 0x80000001
   148d8:	ldr	r6, [r7]
   148dc:	movne	r0, #0
   148e0:	moveq	r0, #1
   148e4:	ldr	r3, [r8]
   148e8:	orrs	r0, r0, r4, lsr #31
   148ec:	str	r3, [sp, #28]
   148f0:	bne	14a80 <__assert_fail@plt+0x397c>
   148f4:	ldr	r3, [r7, #4]
   148f8:	cmp	r3, r4
   148fc:	bgt	1495c <__assert_fail@plt+0x3858>
   14900:	add	r1, r7, #8
   14904:	sub	r2, r4, r3
   14908:	str	r3, [sp, #52]	; 0x34
   1490c:	cmp	r6, r1
   14910:	add	r2, r2, #1
   14914:	beq	14a58 <__assert_fail@plt+0x3954>
   14918:	mov	r1, #8
   1491c:	mov	r0, r6
   14920:	mvn	r3, #-2147483648	; 0x80000000
   14924:	str	r1, [sp]
   14928:	add	r1, sp, #52	; 0x34
   1492c:	bl	1590c <__assert_fail@plt+0x4808>
   14930:	mov	r6, r0
   14934:	str	r0, [r7]
   14938:	ldr	r0, [r7, #4]
   1493c:	mov	r1, #0
   14940:	ldr	r2, [sp, #52]	; 0x34
   14944:	sub	r2, r2, r0
   14948:	add	r0, r6, r0, lsl #3
   1494c:	lsl	r2, r2, #3
   14950:	bl	11020 <memset@plt>
   14954:	ldr	r3, [sp, #52]	; 0x34
   14958:	str	r3, [r7, #4]
   1495c:	ldr	r1, [r5, #4]
   14960:	add	r0, r6, r4, lsl #3
   14964:	add	ip, r5, #8
   14968:	mov	r3, fp
   1496c:	mov	r2, sl
   14970:	ldr	r7, [r0, #4]
   14974:	str	r0, [sp, #36]	; 0x24
   14978:	str	ip, [sp, #40]	; 0x28
   1497c:	orr	r0, r1, #1
   14980:	ldr	r9, [r6, r4, lsl #3]
   14984:	str	ip, [sp, #8]
   14988:	ldr	lr, [r5, #44]	; 0x2c
   1498c:	str	r0, [sp, #4]
   14990:	ldr	ip, [r5]
   14994:	mov	r1, r9
   14998:	str	ip, [sp, #32]
   1499c:	ldr	ip, [r5, #40]	; 0x28
   149a0:	str	ip, [sp, #12]
   149a4:	ldr	ip, [sp, #32]
   149a8:	str	lr, [sp, #16]
   149ac:	str	r0, [sp, #44]	; 0x2c
   149b0:	mov	r0, r7
   149b4:	str	ip, [sp]
   149b8:	bl	130dc <__assert_fail@plt+0x1fd8>
   149bc:	cmp	r9, r0
   149c0:	bhi	14a30 <__assert_fail@plt+0x392c>
   149c4:	add	r9, r0, #1
   149c8:	movw	r3, #37264	; 0x9190
   149cc:	movt	r3, #2
   149d0:	cmp	r7, r3
   149d4:	str	r9, [r6, r4, lsl #3]
   149d8:	beq	149e4 <__assert_fail@plt+0x38e0>
   149dc:	mov	r0, r7
   149e0:	bl	12140 <__assert_fail@plt+0x103c>
   149e4:	mov	r0, r9
   149e8:	bl	1575c <__assert_fail@plt+0x4658>
   149ec:	ldr	ip, [r5]
   149f0:	mov	r3, fp
   149f4:	mov	r2, sl
   149f8:	mov	r1, r9
   149fc:	mov	r7, r0
   14a00:	ldr	lr, [sp, #36]	; 0x24
   14a04:	ldr	r4, [r5, #40]	; 0x28
   14a08:	str	r0, [lr, #4]
   14a0c:	ldr	lr, [r5, #44]	; 0x2c
   14a10:	str	ip, [sp]
   14a14:	ldr	ip, [sp, #44]	; 0x2c
   14a18:	str	ip, [sp, #4]
   14a1c:	ldr	ip, [sp, #40]	; 0x28
   14a20:	str	r4, [sp, #12]
   14a24:	str	lr, [sp, #16]
   14a28:	str	ip, [sp, #8]
   14a2c:	bl	130dc <__assert_fail@plt+0x1fd8>
   14a30:	ldr	r3, [sp, #28]
   14a34:	mov	r0, r7
   14a38:	str	r3, [r8]
   14a3c:	add	sp, sp, #60	; 0x3c
   14a40:	ldrd	r4, [sp]
   14a44:	ldrd	r6, [sp, #8]
   14a48:	ldrd	r8, [sp, #16]
   14a4c:	ldrd	sl, [sp, #24]
   14a50:	add	sp, sp, #32
   14a54:	pop	{pc}		; (ldr pc, [sp], #4)
   14a58:	mov	r1, #8
   14a5c:	mvn	r3, #-2147483648	; 0x80000000
   14a60:	str	r1, [sp]
   14a64:	add	r1, sp, #52	; 0x34
   14a68:	bl	1590c <__assert_fail@plt+0x4808>
   14a6c:	ldrd	r2, [r7, #8]
   14a70:	mov	r6, r0
   14a74:	str	r0, [r7]
   14a78:	strd	r2, [r0]
   14a7c:	b	14938 <__assert_fail@plt+0x3834>
   14a80:	bl	110ec <abort@plt>
   14a84:	strd	r4, [sp, #-16]!
   14a88:	mov	r5, r0
   14a8c:	str	r6, [sp, #8]
   14a90:	str	lr, [sp, #12]
   14a94:	bl	10ff0 <__errno_location@plt>
   14a98:	mov	r4, r0
   14a9c:	cmp	r5, #0
   14aa0:	ldr	r0, [pc, #32]	; 14ac8 <__assert_fail@plt+0x39c4>
   14aa4:	mov	r1, #48	; 0x30
   14aa8:	movne	r0, r5
   14aac:	ldr	r6, [r4]
   14ab0:	bl	15a84 <__assert_fail@plt+0x4980>
   14ab4:	str	r6, [r4]
   14ab8:	ldrd	r4, [sp]
   14abc:	ldr	r6, [sp, #8]
   14ac0:	add	sp, sp, #12
   14ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac8:	muleq	r2, r0, r2
   14acc:	ldr	r3, [pc, #12]	; 14ae0 <__assert_fail@plt+0x39dc>
   14ad0:	cmp	r0, #0
   14ad4:	moveq	r0, r3
   14ad8:	ldr	r0, [r0]
   14adc:	bx	lr
   14ae0:	muleq	r2, r0, r2
   14ae4:	ldr	r3, [pc, #12]	; 14af8 <__assert_fail@plt+0x39f4>
   14ae8:	cmp	r0, #0
   14aec:	moveq	r0, r3
   14af0:	str	r1, [r0]
   14af4:	bx	lr
   14af8:	muleq	r2, r0, r2
   14afc:	ldr	r3, [pc, #52]	; 14b38 <__assert_fail@plt+0x3a34>
   14b00:	cmp	r0, #0
   14b04:	push	{lr}		; (str lr, [sp, #-4]!)
   14b08:	lsr	lr, r1, #5
   14b0c:	and	r1, r1, #31
   14b10:	moveq	r0, r3
   14b14:	add	r3, r0, #8
   14b18:	ldr	ip, [r3, lr, lsl #2]
   14b1c:	lsr	r0, ip, r1
   14b20:	eor	r2, r2, r0
   14b24:	and	r0, r0, #1
   14b28:	and	r2, r2, #1
   14b2c:	eor	r1, ip, r2, lsl r1
   14b30:	str	r1, [r3, lr, lsl #2]
   14b34:	pop	{pc}		; (ldr pc, [sp], #4)
   14b38:	muleq	r2, r0, r2
   14b3c:	ldr	r3, [pc, #16]	; 14b54 <__assert_fail@plt+0x3a50>
   14b40:	cmp	r0, #0
   14b44:	movne	r3, r0
   14b48:	ldr	r0, [r3, #4]
   14b4c:	str	r1, [r3, #4]
   14b50:	bx	lr
   14b54:	muleq	r2, r0, r2
   14b58:	ldr	r3, [pc, #48]	; 14b90 <__assert_fail@plt+0x3a8c>
   14b5c:	cmp	r0, #0
   14b60:	mov	ip, #10
   14b64:	moveq	r0, r3
   14b68:	cmp	r2, #0
   14b6c:	cmpne	r1, #0
   14b70:	str	ip, [r0]
   14b74:	beq	14b84 <__assert_fail@plt+0x3a80>
   14b78:	str	r1, [r0, #40]	; 0x28
   14b7c:	str	r2, [r0, #44]	; 0x2c
   14b80:	bx	lr
   14b84:	str	r4, [sp, #-8]!
   14b88:	str	lr, [sp, #4]
   14b8c:	bl	110ec <abort@plt>
   14b90:	muleq	r2, r0, r2
   14b94:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14b98:	strd	r6, [sp, #8]
   14b9c:	mov	r7, r0
   14ba0:	mov	r6, r1
   14ba4:	strd	r8, [sp, #16]
   14ba8:	mov	r8, r2
   14bac:	mov	r9, r3
   14bb0:	str	lr, [sp, #24]
   14bb4:	sub	sp, sp, #28
   14bb8:	ldr	r4, [sp, #56]	; 0x38
   14bbc:	ldr	ip, [pc, #104]	; 14c2c <__assert_fail@plt+0x3b28>
   14bc0:	cmp	r4, #0
   14bc4:	moveq	r4, ip
   14bc8:	bl	10ff0 <__errno_location@plt>
   14bcc:	ldr	ip, [r4, #44]	; 0x2c
   14bd0:	mov	r5, r0
   14bd4:	mov	r1, r6
   14bd8:	add	lr, r4, #8
   14bdc:	mov	r3, r9
   14be0:	ldr	r6, [r5]
   14be4:	mov	r2, r8
   14be8:	mov	r0, r7
   14bec:	str	ip, [sp, #16]
   14bf0:	ldr	ip, [r4, #40]	; 0x28
   14bf4:	str	lr, [sp, #8]
   14bf8:	str	ip, [sp, #12]
   14bfc:	ldr	ip, [r4, #4]
   14c00:	str	ip, [sp, #4]
   14c04:	ldr	ip, [r4]
   14c08:	str	ip, [sp]
   14c0c:	bl	130dc <__assert_fail@plt+0x1fd8>
   14c10:	str	r6, [r5]
   14c14:	add	sp, sp, #28
   14c18:	ldrd	r4, [sp]
   14c1c:	ldrd	r6, [sp, #8]
   14c20:	ldrd	r8, [sp, #16]
   14c24:	add	sp, sp, #24
   14c28:	pop	{pc}		; (ldr pc, [sp], #4)
   14c2c:	muleq	r2, r0, r2
   14c30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c34:	cmp	r3, #0
   14c38:	ldr	r4, [pc, #220]	; 14d1c <__assert_fail@plt+0x3c18>
   14c3c:	movne	r4, r3
   14c40:	strd	r6, [sp, #8]
   14c44:	mov	r6, r2
   14c48:	strd	r8, [sp, #16]
   14c4c:	mov	r9, r0
   14c50:	strd	sl, [sp, #24]
   14c54:	mov	sl, r1
   14c58:	str	lr, [sp, #32]
   14c5c:	sub	sp, sp, #44	; 0x2c
   14c60:	bl	10ff0 <__errno_location@plt>
   14c64:	ldr	r5, [r4, #4]
   14c68:	mov	r7, r0
   14c6c:	mov	r1, #0
   14c70:	add	r8, r4, #8
   14c74:	mov	r3, sl
   14c78:	ldr	ip, [r4, #44]	; 0x2c
   14c7c:	mov	r2, r9
   14c80:	mov	r0, r1
   14c84:	ldr	lr, [r7]
   14c88:	cmp	r6, r1
   14c8c:	orreq	r5, r5, #1
   14c90:	str	ip, [sp, #16]
   14c94:	ldr	ip, [r4, #40]	; 0x28
   14c98:	stmib	sp, {r5, r8, ip}
   14c9c:	ldr	ip, [r4]
   14ca0:	str	lr, [sp, #28]
   14ca4:	str	ip, [sp]
   14ca8:	bl	130dc <__assert_fail@plt+0x1fd8>
   14cac:	add	r1, r0, #1
   14cb0:	mov	fp, r0
   14cb4:	mov	r0, r1
   14cb8:	str	r1, [sp, #36]	; 0x24
   14cbc:	bl	1575c <__assert_fail@plt+0x4658>
   14cc0:	ldr	ip, [r4, #44]	; 0x2c
   14cc4:	mov	r3, sl
   14cc8:	mov	r2, r9
   14ccc:	ldr	r1, [sp, #36]	; 0x24
   14cd0:	str	ip, [sp, #16]
   14cd4:	ldr	ip, [r4, #40]	; 0x28
   14cd8:	str	r0, [sp, #32]
   14cdc:	stmib	sp, {r5, r8, ip}
   14ce0:	ldr	ip, [r4]
   14ce4:	str	ip, [sp]
   14ce8:	bl	130dc <__assert_fail@plt+0x1fd8>
   14cec:	ldr	lr, [sp, #28]
   14cf0:	cmp	r6, #0
   14cf4:	ldr	r0, [sp, #32]
   14cf8:	str	lr, [r7]
   14cfc:	strne	fp, [r6]
   14d00:	add	sp, sp, #44	; 0x2c
   14d04:	ldrd	r4, [sp]
   14d08:	ldrd	r6, [sp, #8]
   14d0c:	ldrd	r8, [sp, #16]
   14d10:	ldrd	sl, [sp, #24]
   14d14:	add	sp, sp, #32
   14d18:	pop	{pc}		; (ldr pc, [sp], #4)
   14d1c:	muleq	r2, r0, r2
   14d20:	mov	r3, r2
   14d24:	mov	r2, #0
   14d28:	b	14c30 <__assert_fail@plt+0x3b2c>
   14d2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14d30:	movw	r5, #37136	; 0x9110
   14d34:	movt	r5, #2
   14d38:	ldr	r3, [r5, #4]
   14d3c:	strd	r6, [sp, #8]
   14d40:	str	r8, [sp, #16]
   14d44:	str	lr, [sp, #20]
   14d48:	ldr	r7, [r5]
   14d4c:	cmp	r3, #1
   14d50:	ble	14d74 <__assert_fail@plt+0x3c70>
   14d54:	mov	r4, #1
   14d58:	add	r6, r7, #4
   14d5c:	ldr	r0, [r6, r4, lsl #3]
   14d60:	add	r4, r4, #1
   14d64:	bl	12140 <__assert_fail@plt+0x103c>
   14d68:	ldr	r3, [r5, #4]
   14d6c:	cmp	r3, r4
   14d70:	bgt	14d5c <__assert_fail@plt+0x3c58>
   14d74:	ldr	r0, [r7, #4]
   14d78:	movw	r4, #37264	; 0x9190
   14d7c:	movt	r4, #2
   14d80:	cmp	r0, r4
   14d84:	beq	14d98 <__assert_fail@plt+0x3c94>
   14d88:	bl	12140 <__assert_fail@plt+0x103c>
   14d8c:	mov	r3, #256	; 0x100
   14d90:	str	r3, [r5, #8]
   14d94:	str	r4, [r5, #12]
   14d98:	ldr	r4, [pc, #44]	; 14dcc <__assert_fail@plt+0x3cc8>
   14d9c:	cmp	r7, r4
   14da0:	beq	14db0 <__assert_fail@plt+0x3cac>
   14da4:	mov	r0, r7
   14da8:	bl	12140 <__assert_fail@plt+0x103c>
   14dac:	str	r4, [r5]
   14db0:	mov	r3, #1
   14db4:	ldrd	r6, [sp, #8]
   14db8:	str	r3, [r5, #4]
   14dbc:	ldrd	r4, [sp]
   14dc0:	ldr	r8, [sp, #16]
   14dc4:	add	sp, sp, #20
   14dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dcc:	andeq	r9, r2, r8, lsl r1
   14dd0:	ldr	r3, [pc, #4]	; 14ddc <__assert_fail@plt+0x3cd8>
   14dd4:	mvn	r2, #0
   14dd8:	b	1489c <__assert_fail@plt+0x3798>
   14ddc:	muleq	r2, r0, r2
   14de0:	ldr	r3, [pc]	; 14de8 <__assert_fail@plt+0x3ce4>
   14de4:	b	1489c <__assert_fail@plt+0x3798>
   14de8:	muleq	r2, r0, r2
   14dec:	mov	r1, r0
   14df0:	ldr	r3, [pc, #8]	; 14e00 <__assert_fail@plt+0x3cfc>
   14df4:	mvn	r2, #0
   14df8:	mov	r0, #0
   14dfc:	b	1489c <__assert_fail@plt+0x3798>
   14e00:	muleq	r2, r0, r2
   14e04:	mov	r2, r1
   14e08:	ldr	r3, [pc, #8]	; 14e18 <__assert_fail@plt+0x3d14>
   14e0c:	mov	r1, r0
   14e10:	mov	r0, #0
   14e14:	b	1489c <__assert_fail@plt+0x3798>
   14e18:	muleq	r2, r0, r2
   14e1c:	strd	r4, [sp, #-12]!
   14e20:	mov	r5, r2
   14e24:	mov	r4, r0
   14e28:	str	lr, [sp, #8]
   14e2c:	sub	sp, sp, #52	; 0x34
   14e30:	mov	r0, sp
   14e34:	bl	12f38 <__assert_fail@plt+0x1e34>
   14e38:	mov	r3, sp
   14e3c:	mov	r1, r5
   14e40:	mov	r0, r4
   14e44:	mvn	r2, #0
   14e48:	bl	1489c <__assert_fail@plt+0x3798>
   14e4c:	add	sp, sp, #52	; 0x34
   14e50:	ldrd	r4, [sp]
   14e54:	add	sp, sp, #8
   14e58:	pop	{pc}		; (ldr pc, [sp], #4)
   14e5c:	strd	r4, [sp, #-16]!
   14e60:	mov	r5, r2
   14e64:	mov	r4, r0
   14e68:	str	r6, [sp, #8]
   14e6c:	mov	r6, r3
   14e70:	str	lr, [sp, #12]
   14e74:	sub	sp, sp, #48	; 0x30
   14e78:	mov	r0, sp
   14e7c:	bl	12f38 <__assert_fail@plt+0x1e34>
   14e80:	mov	r3, sp
   14e84:	mov	r2, r6
   14e88:	mov	r1, r5
   14e8c:	mov	r0, r4
   14e90:	bl	1489c <__assert_fail@plt+0x3798>
   14e94:	add	sp, sp, #48	; 0x30
   14e98:	ldrd	r4, [sp]
   14e9c:	ldr	r6, [sp, #8]
   14ea0:	add	sp, sp, #12
   14ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea8:	mov	r2, r1
   14eac:	mov	r1, r0
   14eb0:	mov	r0, #0
   14eb4:	b	14e1c <__assert_fail@plt+0x3d18>
   14eb8:	mov	r3, r2
   14ebc:	mov	r2, r1
   14ec0:	mov	r1, r0
   14ec4:	mov	r0, #0
   14ec8:	b	14e5c <__assert_fail@plt+0x3d58>
   14ecc:	ldr	ip, [pc, #140]	; 14f60 <__assert_fail@plt+0x3e5c>
   14ed0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14ed4:	ldrd	r4, [ip]
   14ed8:	strd	r6, [sp, #8]
   14edc:	ldrd	r6, [ip, #8]
   14ee0:	strd	r8, [sp, #16]
   14ee4:	lsr	r9, r2, #5
   14ee8:	str	lr, [sp, #24]
   14eec:	sub	sp, sp, #52	; 0x34
   14ef0:	and	lr, r2, #31
   14ef4:	add	r8, sp, #8
   14ef8:	mov	r2, r1
   14efc:	strd	r4, [sp]
   14f00:	mov	r1, r0
   14f04:	mov	r3, sp
   14f08:	strd	r6, [sp, #8]
   14f0c:	mov	r0, #0
   14f10:	ldrd	r4, [ip, #16]
   14f14:	ldrd	r6, [ip, #24]
   14f18:	strd	r4, [sp, #16]
   14f1c:	ldrd	r4, [ip, #32]
   14f20:	strd	r6, [sp, #24]
   14f24:	ldrd	r6, [ip, #40]	; 0x28
   14f28:	strd	r4, [sp, #32]
   14f2c:	strd	r6, [sp, #40]	; 0x28
   14f30:	ldr	ip, [r8, r9, lsl #2]
   14f34:	mvn	r4, ip, lsr lr
   14f38:	and	r4, r4, #1
   14f3c:	eor	lr, ip, r4, lsl lr
   14f40:	str	lr, [r8, r9, lsl #2]
   14f44:	bl	1489c <__assert_fail@plt+0x3798>
   14f48:	add	sp, sp, #52	; 0x34
   14f4c:	ldrd	r4, [sp]
   14f50:	ldrd	r6, [sp, #8]
   14f54:	ldrd	r8, [sp, #16]
   14f58:	add	sp, sp, #24
   14f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f60:	muleq	r2, r0, r2
   14f64:	mov	r2, r1
   14f68:	mvn	r1, #0
   14f6c:	b	14ecc <__assert_fail@plt+0x3dc8>
   14f70:	mov	r2, #58	; 0x3a
   14f74:	mvn	r1, #0
   14f78:	b	14ecc <__assert_fail@plt+0x3dc8>
   14f7c:	mov	r2, #58	; 0x3a
   14f80:	b	14ecc <__assert_fail@plt+0x3dc8>
   14f84:	strd	r4, [sp, #-20]!	; 0xffffffec
   14f88:	strd	r6, [sp, #8]
   14f8c:	mov	r6, r0
   14f90:	mov	r7, r2
   14f94:	str	lr, [sp, #16]
   14f98:	sub	sp, sp, #100	; 0x64
   14f9c:	mov	r0, sp
   14fa0:	bl	12f38 <__assert_fail@plt+0x1e34>
   14fa4:	ldrd	r4, [sp, #8]
   14fa8:	mov	r1, r7
   14fac:	mov	r0, r6
   14fb0:	add	r3, sp, #48	; 0x30
   14fb4:	mvn	r2, #0
   14fb8:	ldrd	r6, [sp]
   14fbc:	strd	r4, [sp, #56]	; 0x38
   14fc0:	ldrd	r4, [sp, #16]
   14fc4:	strd	r6, [sp, #48]	; 0x30
   14fc8:	ldrd	r6, [sp, #32]
   14fcc:	ldr	lr, [sp, #60]	; 0x3c
   14fd0:	strd	r4, [sp, #64]	; 0x40
   14fd4:	ldrd	r4, [sp, #24]
   14fd8:	mvn	ip, lr
   14fdc:	and	ip, ip, #67108864	; 0x4000000
   14fe0:	strd	r4, [sp, #72]	; 0x48
   14fe4:	eor	ip, ip, lr
   14fe8:	ldrd	r4, [sp, #40]	; 0x28
   14fec:	str	ip, [sp, #60]	; 0x3c
   14ff0:	strd	r6, [sp, #80]	; 0x50
   14ff4:	strd	r4, [sp, #88]	; 0x58
   14ff8:	bl	1489c <__assert_fail@plt+0x3798>
   14ffc:	add	sp, sp, #100	; 0x64
   15000:	ldrd	r4, [sp]
   15004:	ldrd	r6, [sp, #8]
   15008:	add	sp, sp, #16
   1500c:	pop	{pc}		; (ldr pc, [sp], #4)
   15010:	ldr	ip, [pc, #156]	; 150b4 <__assert_fail@plt+0x3fb0>
   15014:	cmp	r2, #0
   15018:	cmpne	r1, #0
   1501c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15020:	strd	r6, [sp, #8]
   15024:	mov	r6, r2
   15028:	str	r8, [sp, #16]
   1502c:	mov	r8, r3
   15030:	strd	sl, [sp, #20]
   15034:	ldrd	r4, [ip]
   15038:	str	lr, [sp, #28]
   1503c:	sub	sp, sp, #48	; 0x30
   15040:	mov	lr, #10
   15044:	ldrd	r2, [ip, #8]
   15048:	ldrd	sl, [ip, #16]
   1504c:	strd	r4, [sp]
   15050:	ldrd	r4, [ip, #32]
   15054:	str	lr, [sp]
   15058:	strd	r2, [sp, #8]
   1505c:	strd	sl, [sp, #16]
   15060:	ldrd	r2, [ip, #24]
   15064:	ldrd	sl, [ip, #40]	; 0x28
   15068:	strd	r2, [sp, #24]
   1506c:	strd	r4, [sp, #32]
   15070:	strd	sl, [sp, #40]	; 0x28
   15074:	beq	150b0 <__assert_fail@plt+0x3fac>
   15078:	ldr	r2, [sp, #80]	; 0x50
   1507c:	mov	r7, r1
   15080:	mov	r3, sp
   15084:	mov	r1, r8
   15088:	str	r7, [sp, #40]	; 0x28
   1508c:	str	r6, [sp, #44]	; 0x2c
   15090:	bl	1489c <__assert_fail@plt+0x3798>
   15094:	add	sp, sp, #48	; 0x30
   15098:	ldrd	r4, [sp]
   1509c:	ldrd	r6, [sp, #8]
   150a0:	ldr	r8, [sp, #16]
   150a4:	ldrd	sl, [sp, #20]
   150a8:	add	sp, sp, #28
   150ac:	pop	{pc}		; (ldr pc, [sp], #4)
   150b0:	bl	110ec <abort@plt>
   150b4:	muleq	r2, r0, r2
   150b8:	mvn	ip, #0
   150bc:	push	{lr}		; (str lr, [sp, #-4]!)
   150c0:	sub	sp, sp, #12
   150c4:	str	ip, [sp]
   150c8:	bl	15010 <__assert_fail@plt+0x3f0c>
   150cc:	add	sp, sp, #12
   150d0:	pop	{pc}		; (ldr pc, [sp], #4)
   150d4:	mvn	ip, #0
   150d8:	push	{lr}		; (str lr, [sp, #-4]!)
   150dc:	sub	sp, sp, #12
   150e0:	mov	r3, r2
   150e4:	mov	r2, r1
   150e8:	mov	r1, r0
   150ec:	mov	r0, #0
   150f0:	str	ip, [sp]
   150f4:	bl	15010 <__assert_fail@plt+0x3f0c>
   150f8:	add	sp, sp, #12
   150fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15100:	push	{lr}		; (str lr, [sp, #-4]!)
   15104:	sub	sp, sp, #12
   15108:	str	r3, [sp]
   1510c:	mov	r3, r2
   15110:	mov	r2, r1
   15114:	mov	r1, r0
   15118:	mov	r0, #0
   1511c:	bl	15010 <__assert_fail@plt+0x3f0c>
   15120:	add	sp, sp, #12
   15124:	pop	{pc}		; (ldr pc, [sp], #4)
   15128:	ldr	r3, [pc]	; 15130 <__assert_fail@plt+0x402c>
   1512c:	b	1489c <__assert_fail@plt+0x3798>
   15130:	andeq	r9, r2, r0, lsr #2
   15134:	mov	r2, r1
   15138:	ldr	r3, [pc, #8]	; 15148 <__assert_fail@plt+0x4044>
   1513c:	mov	r1, r0
   15140:	mov	r0, #0
   15144:	b	1489c <__assert_fail@plt+0x3798>
   15148:	andeq	r9, r2, r0, lsr #2
   1514c:	ldr	r3, [pc, #4]	; 15158 <__assert_fail@plt+0x4054>
   15150:	mvn	r2, #0
   15154:	b	1489c <__assert_fail@plt+0x3798>
   15158:	andeq	r9, r2, r0, lsr #2
   1515c:	mov	r1, r0
   15160:	ldr	r3, [pc, #8]	; 15170 <__assert_fail@plt+0x406c>
   15164:	mvn	r2, #0
   15168:	mov	r0, #0
   1516c:	b	1489c <__assert_fail@plt+0x3798>
   15170:	andeq	r9, r2, r0, lsr #2
   15174:	mov	r2, #3
   15178:	mov	r1, #0
   1517c:	b	16b78 <__assert_fail@plt+0x5a74>
   15180:	cmp	r1, #0
   15184:	strd	r4, [sp, #-16]!
   15188:	mov	ip, r3
   1518c:	str	r6, [sp, #8]
   15190:	mov	r4, r0
   15194:	str	lr, [sp, #12]
   15198:	sub	sp, sp, #32
   1519c:	ldr	r5, [sp, #48]	; 0x30
   151a0:	ldr	r6, [sp, #52]	; 0x34
   151a4:	beq	152e8 <__assert_fail@plt+0x41e4>
   151a8:	mov	r3, r1
   151ac:	mov	r1, #1
   151b0:	stm	sp, {r2, ip}
   151b4:	movw	r2, #31544	; 0x7b38
   151b8:	movt	r2, #1
   151bc:	bl	11044 <__fprintf_chk@plt>
   151c0:	mov	r2, #5
   151c4:	movw	r1, #31564	; 0x7b4c
   151c8:	movt	r1, #1
   151cc:	mov	r0, #0
   151d0:	bl	10ef4 <dcgettext@plt>
   151d4:	movw	ip, #2022	; 0x7e6
   151d8:	mov	r3, r0
   151dc:	mov	r1, #1
   151e0:	movw	r2, #32292	; 0x7e24
   151e4:	movt	r2, #1
   151e8:	mov	r0, r4
   151ec:	str	ip, [sp]
   151f0:	bl	11044 <__fprintf_chk@plt>
   151f4:	mov	r1, r4
   151f8:	mov	r0, #10
   151fc:	bl	10ee8 <fputc_unlocked@plt>
   15200:	mov	r2, #5
   15204:	movw	r1, #31568	; 0x7b50
   15208:	movt	r1, #1
   1520c:	mov	r0, #0
   15210:	bl	10ef4 <dcgettext@plt>
   15214:	mov	r2, r0
   15218:	mov	r1, #1
   1521c:	movw	r3, #31740	; 0x7bfc
   15220:	movt	r3, #1
   15224:	mov	r0, r4
   15228:	bl	11044 <__fprintf_chk@plt>
   1522c:	mov	r1, r4
   15230:	mov	r0, #10
   15234:	bl	10ee8 <fputc_unlocked@plt>
   15238:	cmp	r6, #9
   1523c:	ldrls	pc, [pc, r6, lsl #2]
   15240:	b	15554 <__assert_fail@plt+0x4450>
   15244:	ldrdeq	r5, [r1], -r4
   15248:	andeq	r5, r1, r4, lsl #6
   1524c:	andeq	r5, r1, r0, asr #6
   15250:	andeq	r5, r1, r0, lsl #7
   15254:	andeq	r5, r1, r8, asr #7
   15258:	andeq	r5, r1, r0, lsl #8
   1525c:	andeq	r5, r1, r8, asr #8
   15260:	muleq	r1, ip, r4
   15264:	strdeq	r5, [r1], -r4
   15268:	andeq	r5, r1, ip, ror #4
   1526c:	movw	r1, #32044	; 0x7d2c
   15270:	movt	r1, #1
   15274:	mov	r2, #5
   15278:	mov	r0, #0
   1527c:	bl	10ef4 <dcgettext@plt>
   15280:	ldr	lr, [r5, #4]
   15284:	mov	r2, r0
   15288:	mov	r1, #1
   1528c:	mov	r0, r4
   15290:	ldr	r3, [r5, #8]
   15294:	ldr	ip, [r5, #32]
   15298:	str	lr, [sp]
   1529c:	ldr	lr, [r5, #12]
   152a0:	str	ip, [sp, #28]
   152a4:	ldr	ip, [r5, #28]
   152a8:	str	r3, [sp, #4]
   152ac:	ldr	r3, [r5, #16]
   152b0:	str	lr, [sp, #8]
   152b4:	ldr	lr, [r5, #20]
   152b8:	str	ip, [sp, #24]
   152bc:	ldr	ip, [r5, #24]
   152c0:	str	r3, [sp, #12]
   152c4:	ldr	r3, [r5]
   152c8:	str	lr, [sp, #16]
   152cc:	str	ip, [sp, #20]
   152d0:	bl	11044 <__fprintf_chk@plt>
   152d4:	add	sp, sp, #32
   152d8:	ldrd	r4, [sp]
   152dc:	ldr	r6, [sp, #8]
   152e0:	add	sp, sp, #12
   152e4:	pop	{pc}		; (ldr pc, [sp], #4)
   152e8:	mov	r3, r2
   152ec:	mov	r1, #1
   152f0:	str	ip, [sp]
   152f4:	movw	r2, #31556	; 0x7b44
   152f8:	movt	r2, #1
   152fc:	bl	11044 <__fprintf_chk@plt>
   15300:	b	151c0 <__assert_fail@plt+0x40bc>
   15304:	mov	r2, #5
   15308:	movw	r1, #31776	; 0x7c20
   1530c:	movt	r1, #1
   15310:	mov	r0, #0
   15314:	bl	10ef4 <dcgettext@plt>
   15318:	ldr	r3, [r5]
   1531c:	mov	r2, r0
   15320:	mov	r1, #1
   15324:	mov	r0, r4
   15328:	add	sp, sp, #32
   1532c:	ldrd	r4, [sp]
   15330:	ldr	r6, [sp, #8]
   15334:	ldr	lr, [sp, #12]
   15338:	add	sp, sp, #16
   1533c:	b	11044 <__fprintf_chk@plt>
   15340:	mov	r2, #5
   15344:	movw	r1, #31792	; 0x7c30
   15348:	movt	r1, #1
   1534c:	mov	r0, #0
   15350:	bl	10ef4 <dcgettext@plt>
   15354:	ldm	r5, {r3, ip}
   15358:	mov	r2, r0
   1535c:	mov	r1, #1
   15360:	mov	r0, r4
   15364:	str	ip, [sp, #48]	; 0x30
   15368:	add	sp, sp, #32
   1536c:	ldrd	r4, [sp]
   15370:	ldr	r6, [sp, #8]
   15374:	ldr	lr, [sp, #12]
   15378:	add	sp, sp, #16
   1537c:	b	11044 <__fprintf_chk@plt>
   15380:	mov	r2, #5
   15384:	movw	r1, #31816	; 0x7c48
   15388:	movt	r1, #1
   1538c:	mov	r0, #0
   15390:	bl	10ef4 <dcgettext@plt>
   15394:	ldm	r5, {r3, lr}
   15398:	mov	r2, r0
   1539c:	mov	r1, #1
   153a0:	mov	r0, r4
   153a4:	ldr	ip, [r5, #8]
   153a8:	str	lr, [sp, #48]	; 0x30
   153ac:	str	ip, [sp, #52]	; 0x34
   153b0:	add	sp, sp, #32
   153b4:	ldrd	r4, [sp]
   153b8:	ldr	r6, [sp, #8]
   153bc:	ldr	lr, [sp, #12]
   153c0:	add	sp, sp, #16
   153c4:	b	11044 <__fprintf_chk@plt>
   153c8:	mov	r2, #5
   153cc:	movw	r1, #31844	; 0x7c64
   153d0:	movt	r1, #1
   153d4:	mov	r0, #0
   153d8:	bl	10ef4 <dcgettext@plt>
   153dc:	ldmib	r5, {r3, ip, lr}
   153e0:	mov	r2, r0
   153e4:	mov	r1, #1
   153e8:	mov	r0, r4
   153ec:	str	r3, [sp]
   153f0:	ldr	r3, [r5]
   153f4:	stmib	sp, {ip, lr}
   153f8:	bl	11044 <__fprintf_chk@plt>
   153fc:	b	152d4 <__assert_fail@plt+0x41d0>
   15400:	mov	r2, #5
   15404:	movw	r1, #31876	; 0x7c84
   15408:	movt	r1, #1
   1540c:	mov	r0, #0
   15410:	bl	10ef4 <dcgettext@plt>
   15414:	ldmib	r5, {ip, lr}
   15418:	mov	r2, r0
   1541c:	mov	r1, #1
   15420:	mov	r0, r4
   15424:	ldr	r3, [r5, #16]
   15428:	str	ip, [sp]
   1542c:	ldr	ip, [r5, #12]
   15430:	str	r3, [sp, #12]
   15434:	ldr	r3, [r5]
   15438:	str	lr, [sp, #4]
   1543c:	str	ip, [sp, #8]
   15440:	bl	11044 <__fprintf_chk@plt>
   15444:	b	152d4 <__assert_fail@plt+0x41d0>
   15448:	mov	r2, #5
   1544c:	movw	r1, #31912	; 0x7ca8
   15450:	movt	r1, #1
   15454:	mov	r0, #0
   15458:	bl	10ef4 <dcgettext@plt>
   1545c:	ldr	lr, [r5, #4]
   15460:	mov	r2, r0
   15464:	mov	r1, #1
   15468:	mov	r0, r4
   1546c:	ldr	r3, [r5, #8]
   15470:	ldr	ip, [r5, #20]
   15474:	str	lr, [sp]
   15478:	ldr	lr, [r5, #12]
   1547c:	str	ip, [sp, #16]
   15480:	ldr	ip, [r5, #16]
   15484:	str	r3, [sp, #4]
   15488:	ldr	r3, [r5]
   1548c:	str	lr, [sp, #8]
   15490:	str	ip, [sp, #12]
   15494:	bl	11044 <__fprintf_chk@plt>
   15498:	b	152d4 <__assert_fail@plt+0x41d0>
   1549c:	mov	r2, #5
   154a0:	movw	r1, #31952	; 0x7cd0
   154a4:	movt	r1, #1
   154a8:	mov	r0, #0
   154ac:	bl	10ef4 <dcgettext@plt>
   154b0:	ldmib	r5, {r3, ip}
   154b4:	mov	r2, r0
   154b8:	mov	r1, #1
   154bc:	mov	r0, r4
   154c0:	ldr	lr, [r5, #24]
   154c4:	str	r3, [sp]
   154c8:	ldr	r3, [r5, #12]
   154cc:	str	lr, [sp, #20]
   154d0:	ldr	lr, [r5, #20]
   154d4:	str	ip, [sp, #4]
   154d8:	ldr	ip, [r5, #16]
   154dc:	str	r3, [sp, #8]
   154e0:	ldr	r3, [r5]
   154e4:	str	ip, [sp, #12]
   154e8:	str	lr, [sp, #16]
   154ec:	bl	11044 <__fprintf_chk@plt>
   154f0:	b	152d4 <__assert_fail@plt+0x41d0>
   154f4:	mov	r2, #5
   154f8:	movw	r1, #31996	; 0x7cfc
   154fc:	movt	r1, #1
   15500:	mov	r0, #0
   15504:	bl	10ef4 <dcgettext@plt>
   15508:	ldmib	r5, {ip, lr}
   1550c:	mov	r2, r0
   15510:	mov	r1, #1
   15514:	mov	r0, r4
   15518:	ldr	r3, [r5, #28]
   1551c:	str	ip, [sp]
   15520:	ldr	ip, [r5, #12]
   15524:	str	r3, [sp, #24]
   15528:	ldr	r3, [r5, #24]
   1552c:	str	lr, [sp, #4]
   15530:	ldr	lr, [r5, #16]
   15534:	str	ip, [sp, #8]
   15538:	ldr	ip, [r5, #20]
   1553c:	str	r3, [sp, #20]
   15540:	ldr	r3, [r5]
   15544:	str	lr, [sp, #12]
   15548:	str	ip, [sp, #16]
   1554c:	bl	11044 <__fprintf_chk@plt>
   15550:	b	152d4 <__assert_fail@plt+0x41d0>
   15554:	movw	r1, #32096	; 0x7d60
   15558:	movt	r1, #1
   1555c:	b	15274 <__assert_fail@plt+0x4170>
   15560:	strd	r4, [sp, #-12]!
   15564:	str	lr, [sp, #8]
   15568:	sub	sp, sp, #12
   1556c:	ldr	r5, [sp, #24]
   15570:	ldr	ip, [r5]
   15574:	cmp	ip, #0
   15578:	beq	15594 <__assert_fail@plt+0x4490>
   1557c:	mov	lr, r5
   15580:	mov	ip, #0
   15584:	ldr	r4, [lr, #4]!
   15588:	add	ip, ip, #1
   1558c:	cmp	r4, #0
   15590:	bne	15584 <__assert_fail@plt+0x4480>
   15594:	stm	sp, {r5, ip}
   15598:	bl	15180 <__assert_fail@plt+0x407c>
   1559c:	add	sp, sp, #12
   155a0:	ldrd	r4, [sp]
   155a4:	add	sp, sp, #8
   155a8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ac:	strd	r4, [sp, #-16]!
   155b0:	mov	ip, #0
   155b4:	str	r6, [sp, #8]
   155b8:	str	lr, [sp, #12]
   155bc:	sub	sp, sp, #48	; 0x30
   155c0:	ldr	r5, [sp, #64]	; 0x40
   155c4:	add	r6, sp, #8
   155c8:	mov	r4, r6
   155cc:	ldr	lr, [r5], #4
   155d0:	cmp	lr, #0
   155d4:	str	lr, [r4], #4
   155d8:	beq	155e8 <__assert_fail@plt+0x44e4>
   155dc:	add	ip, ip, #1
   155e0:	cmp	ip, #10
   155e4:	bne	155cc <__assert_fail@plt+0x44c8>
   155e8:	stm	sp, {r6, ip}
   155ec:	bl	15180 <__assert_fail@plt+0x407c>
   155f0:	add	sp, sp, #48	; 0x30
   155f4:	ldrd	r4, [sp]
   155f8:	ldr	r6, [sp, #8]
   155fc:	add	sp, sp, #12
   15600:	pop	{pc}		; (ldr pc, [sp], #4)
   15604:	push	{r3}		; (str r3, [sp, #-4]!)
   15608:	mov	ip, #0
   1560c:	strd	r4, [sp, #-12]!
   15610:	str	lr, [sp, #8]
   15614:	sub	sp, sp, #56	; 0x38
   15618:	add	r3, sp, #72	; 0x48
   1561c:	add	r5, sp, #16
   15620:	mov	r4, r3
   15624:	mov	lr, r5
   15628:	str	r3, [sp, #12]
   1562c:	ldr	r3, [r4], #4
   15630:	cmp	r3, #0
   15634:	str	r3, [lr], #4
   15638:	beq	15648 <__assert_fail@plt+0x4544>
   1563c:	add	ip, ip, #1
   15640:	cmp	ip, #10
   15644:	bne	1562c <__assert_fail@plt+0x4528>
   15648:	ldr	r3, [sp, #68]	; 0x44
   1564c:	stm	sp, {r5, ip}
   15650:	bl	15180 <__assert_fail@plt+0x407c>
   15654:	add	sp, sp, #56	; 0x38
   15658:	ldrd	r4, [sp]
   1565c:	ldr	lr, [sp, #8]
   15660:	add	sp, sp, #12
   15664:	add	sp, sp, #4
   15668:	bx	lr
   1566c:	movw	r3, #37236	; 0x9174
   15670:	movt	r3, #2
   15674:	str	r4, [sp, #-8]!
   15678:	mov	r0, #10
   1567c:	ldr	r1, [r3]
   15680:	str	lr, [sp, #4]
   15684:	bl	10ee8 <fputc_unlocked@plt>
   15688:	mov	r2, #5
   1568c:	movw	r1, #32156	; 0x7d9c
   15690:	movt	r1, #1
   15694:	mov	r0, #0
   15698:	bl	10ef4 <dcgettext@plt>
   1569c:	mov	r1, r0
   156a0:	movw	r2, #32176	; 0x7db0
   156a4:	movt	r2, #1
   156a8:	mov	r0, #1
   156ac:	bl	1102c <__printf_chk@plt>
   156b0:	mov	r2, #5
   156b4:	movw	r1, #32200	; 0x7dc8
   156b8:	movt	r1, #1
   156bc:	mov	r0, #0
   156c0:	bl	10ef4 <dcgettext@plt>
   156c4:	mov	r1, r0
   156c8:	movw	r3, #30668	; 0x77cc
   156cc:	movt	r3, #1
   156d0:	movw	r2, #30708	; 0x77f4
   156d4:	movt	r2, #1
   156d8:	mov	r0, #1
   156dc:	bl	1102c <__printf_chk@plt>
   156e0:	mov	r2, #5
   156e4:	movw	r1, #32220	; 0x7ddc
   156e8:	movt	r1, #1
   156ec:	mov	r0, #0
   156f0:	bl	10ef4 <dcgettext@plt>
   156f4:	mov	r1, r0
   156f8:	movw	r2, #32260	; 0x7e04
   156fc:	movt	r2, #1
   15700:	mov	r0, #1
   15704:	ldr	r4, [sp]
   15708:	ldr	lr, [sp, #4]
   1570c:	add	sp, sp, #8
   15710:	b	1102c <__printf_chk@plt>
   15714:	str	r4, [sp, #-8]!
   15718:	str	lr, [sp, #4]
   1571c:	bl	165ec <__assert_fail@plt+0x54e8>
   15720:	cmp	r0, #0
   15724:	beq	15734 <__assert_fail@plt+0x4630>
   15728:	ldr	r4, [sp]
   1572c:	add	sp, sp, #4
   15730:	pop	{pc}		; (ldr pc, [sp], #4)
   15734:	bl	15b8c <__assert_fail@plt+0x4a88>
   15738:	str	r4, [sp, #-8]!
   1573c:	str	lr, [sp, #4]
   15740:	bl	165ec <__assert_fail@plt+0x54e8>
   15744:	cmp	r0, #0
   15748:	beq	15758 <__assert_fail@plt+0x4654>
   1574c:	ldr	r4, [sp]
   15750:	add	sp, sp, #4
   15754:	pop	{pc}		; (ldr pc, [sp], #4)
   15758:	bl	15b8c <__assert_fail@plt+0x4a88>
   1575c:	str	r4, [sp, #-8]!
   15760:	str	lr, [sp, #4]
   15764:	bl	165ec <__assert_fail@plt+0x54e8>
   15768:	cmp	r0, #0
   1576c:	beq	1577c <__assert_fail@plt+0x4678>
   15770:	ldr	r4, [sp]
   15774:	add	sp, sp, #4
   15778:	pop	{pc}		; (ldr pc, [sp], #4)
   1577c:	bl	15b8c <__assert_fail@plt+0x4a88>
   15780:	strd	r4, [sp, #-16]!
   15784:	mov	r5, r0
   15788:	mov	r4, r1
   1578c:	str	r6, [sp, #8]
   15790:	str	lr, [sp, #12]
   15794:	bl	16628 <__assert_fail@plt+0x5524>
   15798:	cmp	r0, #0
   1579c:	beq	157b0 <__assert_fail@plt+0x46ac>
   157a0:	ldrd	r4, [sp]
   157a4:	ldr	r6, [sp, #8]
   157a8:	add	sp, sp, #12
   157ac:	pop	{pc}		; (ldr pc, [sp], #4)
   157b0:	adds	r4, r4, #0
   157b4:	movne	r4, #1
   157b8:	cmp	r5, #0
   157bc:	moveq	r4, #1
   157c0:	cmp	r4, #0
   157c4:	beq	157a0 <__assert_fail@plt+0x469c>
   157c8:	bl	15b8c <__assert_fail@plt+0x4a88>
   157cc:	cmp	r1, #0
   157d0:	orreq	r1, r1, #1
   157d4:	str	r4, [sp, #-8]!
   157d8:	str	lr, [sp, #4]
   157dc:	bl	16628 <__assert_fail@plt+0x5524>
   157e0:	cmp	r0, #0
   157e4:	beq	157f4 <__assert_fail@plt+0x46f0>
   157e8:	ldr	r4, [sp]
   157ec:	add	sp, sp, #4
   157f0:	pop	{pc}		; (ldr pc, [sp], #4)
   157f4:	bl	15b8c <__assert_fail@plt+0x4a88>
   157f8:	strd	r4, [sp, #-16]!
   157fc:	mov	r4, r0
   15800:	mov	r5, r2
   15804:	str	r6, [sp, #8]
   15808:	mov	r6, r1
   1580c:	str	lr, [sp, #12]
   15810:	bl	16e1c <__assert_fail@plt+0x5d18>
   15814:	cmp	r0, #0
   15818:	beq	1582c <__assert_fail@plt+0x4728>
   1581c:	ldrd	r4, [sp]
   15820:	ldr	r6, [sp, #8]
   15824:	add	sp, sp, #12
   15828:	pop	{pc}		; (ldr pc, [sp], #4)
   1582c:	cmp	r4, #0
   15830:	beq	15840 <__assert_fail@plt+0x473c>
   15834:	cmp	r6, #0
   15838:	cmpne	r5, #0
   1583c:	beq	1581c <__assert_fail@plt+0x4718>
   15840:	bl	15b8c <__assert_fail@plt+0x4a88>
   15844:	b	157f8 <__assert_fail@plt+0x46f4>
   15848:	cmp	r2, #0
   1584c:	cmpne	r1, #0
   15850:	str	r4, [sp, #-8]!
   15854:	moveq	r2, #1
   15858:	str	lr, [sp, #4]
   1585c:	moveq	r1, r2
   15860:	bl	16e1c <__assert_fail@plt+0x5d18>
   15864:	cmp	r0, #0
   15868:	beq	15878 <__assert_fail@plt+0x4774>
   1586c:	ldr	r4, [sp]
   15870:	add	sp, sp, #4
   15874:	pop	{pc}		; (ldr pc, [sp], #4)
   15878:	bl	15b8c <__assert_fail@plt+0x4a88>
   1587c:	mov	r2, r1
   15880:	mov	r1, r0
   15884:	mov	r0, #0
   15888:	b	157f8 <__assert_fail@plt+0x46f4>
   1588c:	mov	r2, r1
   15890:	mov	r1, r0
   15894:	mov	r0, #0
   15898:	b	15848 <__assert_fail@plt+0x4744>
   1589c:	cmp	r0, #0
   158a0:	strd	r4, [sp, #-16]!
   158a4:	mov	r5, r1
   158a8:	ldr	r4, [r1]
   158ac:	str	r6, [sp, #8]
   158b0:	str	lr, [sp, #12]
   158b4:	beq	158e4 <__assert_fail@plt+0x47e0>
   158b8:	lsr	r3, r4, #1
   158bc:	add	r3, r3, #1
   158c0:	adds	r4, r4, r3
   158c4:	bcs	15900 <__assert_fail@plt+0x47fc>
   158c8:	mov	r1, r4
   158cc:	bl	157f8 <__assert_fail@plt+0x46f4>
   158d0:	ldr	r6, [sp, #8]
   158d4:	str	r4, [r5]
   158d8:	ldrd	r4, [sp]
   158dc:	add	sp, sp, #12
   158e0:	pop	{pc}		; (ldr pc, [sp], #4)
   158e4:	cmp	r4, #0
   158e8:	bne	158c8 <__assert_fail@plt+0x47c4>
   158ec:	mov	r4, #64	; 0x40
   158f0:	udiv	r4, r4, r2
   158f4:	cmp	r2, #64	; 0x40
   158f8:	addhi	r4, r4, #1
   158fc:	b	158c8 <__assert_fail@plt+0x47c4>
   15900:	bl	15b8c <__assert_fail@plt+0x4a88>
   15904:	mov	r2, #1
   15908:	b	1589c <__assert_fail@plt+0x4798>
   1590c:	ldr	ip, [r1]
   15910:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15914:	mov	r5, r1
   15918:	strd	r6, [sp, #8]
   1591c:	str	lr, [sp, #28]
   15920:	strd	r8, [sp, #16]
   15924:	asr	lr, ip, #1
   15928:	ldr	r8, [sp, #32]
   1592c:	str	sl, [sp, #24]
   15930:	adds	r4, ip, lr
   15934:	mvn	lr, r3
   15938:	lsr	lr, lr, #31
   1593c:	mvnvs	r4, #-2147483648	; 0x80000000
   15940:	cmp	r3, r4
   15944:	movge	r1, #0
   15948:	andlt	r1, lr, #1
   1594c:	cmp	r1, #0
   15950:	movne	r4, r3
   15954:	smull	r6, r7, r4, r8
   15958:	cmp	r7, r6, asr #31
   1595c:	bne	159e4 <__assert_fail@plt+0x48e0>
   15960:	cmp	r6, #63	; 0x3f
   15964:	mov	r1, r6
   15968:	ble	159cc <__assert_fail@plt+0x48c8>
   1596c:	cmp	r0, #0
   15970:	sub	r6, r4, ip
   15974:	streq	r0, [r5]
   15978:	cmp	r6, r2
   1597c:	bge	159ac <__assert_fail@plt+0x48a8>
   15980:	adds	r4, ip, r2
   15984:	bvs	159e0 <__assert_fail@plt+0x48dc>
   15988:	cmp	r4, r3
   1598c:	movle	r3, #0
   15990:	andgt	r3, lr, #1
   15994:	cmp	r3, #0
   15998:	bne	159e0 <__assert_fail@plt+0x48dc>
   1599c:	smull	r8, r9, r4, r8
   159a0:	cmp	r9, r8, asr #31
   159a4:	mov	r1, r8
   159a8:	bne	159e0 <__assert_fail@plt+0x48dc>
   159ac:	bl	15780 <__assert_fail@plt+0x467c>
   159b0:	ldrd	r6, [sp, #8]
   159b4:	ldrd	r8, [sp, #16]
   159b8:	ldr	sl, [sp, #24]
   159bc:	str	r4, [r5]
   159c0:	ldrd	r4, [sp]
   159c4:	add	sp, sp, #28
   159c8:	pop	{pc}		; (ldr pc, [sp], #4)
   159cc:	mov	r6, #64	; 0x40
   159d0:	sdiv	r4, r6, r8
   159d4:	mls	r1, r8, r4, r6
   159d8:	sub	r1, r6, r1
   159dc:	b	1596c <__assert_fail@plt+0x4868>
   159e0:	bl	15b8c <__assert_fail@plt+0x4a88>
   159e4:	mvn	r6, #-2147483648	; 0x80000000
   159e8:	b	159d0 <__assert_fail@plt+0x48cc>
   159ec:	mov	r1, #1
   159f0:	str	r4, [sp, #-8]!
   159f4:	str	lr, [sp, #4]
   159f8:	bl	16578 <__assert_fail@plt+0x5474>
   159fc:	cmp	r0, #0
   15a00:	beq	15a10 <__assert_fail@plt+0x490c>
   15a04:	ldr	r4, [sp]
   15a08:	add	sp, sp, #4
   15a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a10:	bl	15b8c <__assert_fail@plt+0x4a88>
   15a14:	mov	r1, #1
   15a18:	str	r4, [sp, #-8]!
   15a1c:	str	lr, [sp, #4]
   15a20:	bl	16578 <__assert_fail@plt+0x5474>
   15a24:	cmp	r0, #0
   15a28:	beq	15a38 <__assert_fail@plt+0x4934>
   15a2c:	ldr	r4, [sp]
   15a30:	add	sp, sp, #4
   15a34:	pop	{pc}		; (ldr pc, [sp], #4)
   15a38:	bl	15b8c <__assert_fail@plt+0x4a88>
   15a3c:	str	r4, [sp, #-8]!
   15a40:	str	lr, [sp, #4]
   15a44:	bl	16578 <__assert_fail@plt+0x5474>
   15a48:	cmp	r0, #0
   15a4c:	beq	15a5c <__assert_fail@plt+0x4958>
   15a50:	ldr	r4, [sp]
   15a54:	add	sp, sp, #4
   15a58:	pop	{pc}		; (ldr pc, [sp], #4)
   15a5c:	bl	15b8c <__assert_fail@plt+0x4a88>
   15a60:	str	r4, [sp, #-8]!
   15a64:	str	lr, [sp, #4]
   15a68:	bl	16578 <__assert_fail@plt+0x5474>
   15a6c:	cmp	r0, #0
   15a70:	beq	15a80 <__assert_fail@plt+0x497c>
   15a74:	ldr	r4, [sp]
   15a78:	add	sp, sp, #4
   15a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a80:	bl	15b8c <__assert_fail@plt+0x4a88>
   15a84:	strd	r4, [sp, #-16]!
   15a88:	mov	r4, r1
   15a8c:	str	r6, [sp, #8]
   15a90:	mov	r6, r0
   15a94:	mov	r0, r1
   15a98:	str	lr, [sp, #12]
   15a9c:	bl	165ec <__assert_fail@plt+0x54e8>
   15aa0:	subs	r5, r0, #0
   15aa4:	beq	15ac8 <__assert_fail@plt+0x49c4>
   15aa8:	mov	r2, r4
   15aac:	mov	r1, r6
   15ab0:	bl	10eb8 <memcpy@plt>
   15ab4:	mov	r0, r5
   15ab8:	ldrd	r4, [sp]
   15abc:	ldr	r6, [sp, #8]
   15ac0:	add	sp, sp, #12
   15ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac8:	bl	15b8c <__assert_fail@plt+0x4a88>
   15acc:	strd	r4, [sp, #-16]!
   15ad0:	mov	r4, r1
   15ad4:	str	r6, [sp, #8]
   15ad8:	mov	r6, r0
   15adc:	mov	r0, r1
   15ae0:	str	lr, [sp, #12]
   15ae4:	bl	165ec <__assert_fail@plt+0x54e8>
   15ae8:	subs	r5, r0, #0
   15aec:	beq	15b10 <__assert_fail@plt+0x4a0c>
   15af0:	mov	r2, r4
   15af4:	mov	r1, r6
   15af8:	bl	10eb8 <memcpy@plt>
   15afc:	mov	r0, r5
   15b00:	ldrd	r4, [sp]
   15b04:	ldr	r6, [sp, #8]
   15b08:	add	sp, sp, #12
   15b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b10:	bl	15b8c <__assert_fail@plt+0x4a88>
   15b14:	strd	r4, [sp, #-16]!
   15b18:	mov	r4, r1
   15b1c:	str	r6, [sp, #8]
   15b20:	mov	r6, r0
   15b24:	add	r0, r1, #1
   15b28:	str	lr, [sp, #12]
   15b2c:	bl	165ec <__assert_fail@plt+0x54e8>
   15b30:	subs	r5, r0, #0
   15b34:	beq	15b60 <__assert_fail@plt+0x4a5c>
   15b38:	mov	r3, #0
   15b3c:	mov	r1, r6
   15b40:	mov	r2, r4
   15b44:	strb	r3, [r5, r4]
   15b48:	bl	10eb8 <memcpy@plt>
   15b4c:	mov	r0, r5
   15b50:	ldrd	r4, [sp]
   15b54:	ldr	r6, [sp, #8]
   15b58:	add	sp, sp, #12
   15b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b60:	bl	15b8c <__assert_fail@plt+0x4a88>
   15b64:	str	r4, [sp, #-8]!
   15b68:	mov	r4, r0
   15b6c:	str	lr, [sp, #4]
   15b70:	bl	10fd8 <strlen@plt>
   15b74:	add	r1, r0, #1
   15b78:	mov	r0, r4
   15b7c:	ldr	r4, [sp]
   15b80:	ldr	lr, [sp, #4]
   15b84:	add	sp, sp, #8
   15b88:	b	15a84 <__assert_fail@plt+0x4980>
   15b8c:	movw	r3, #37132	; 0x910c
   15b90:	movt	r3, #2
   15b94:	str	r4, [sp, #-8]!
   15b98:	ldr	r4, [r3]
   15b9c:	mov	r2, #5
   15ba0:	movw	r1, #32340	; 0x7e54
   15ba4:	movt	r1, #1
   15ba8:	mov	r0, #0
   15bac:	str	lr, [sp, #4]
   15bb0:	bl	10ef4 <dcgettext@plt>
   15bb4:	mov	r3, r0
   15bb8:	movw	r2, #31128	; 0x7998
   15bbc:	movt	r2, #1
   15bc0:	mov	r1, #0
   15bc4:	mov	r0, r4
   15bc8:	bl	10f6c <error@plt>
   15bcc:	bl	110ec <abort@plt>
   15bd0:	cmp	r2, #36	; 0x24
   15bd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15bd8:	strd	r6, [sp, #8]
   15bdc:	strd	r8, [sp, #16]
   15be0:	strd	sl, [sp, #24]
   15be4:	str	lr, [sp, #32]
   15be8:	sub	sp, sp, #36	; 0x24
   15bec:	bhi	1647c <__assert_fail@plt+0x5378>
   15bf0:	cmp	r1, #0
   15bf4:	mov	r8, r2
   15bf8:	mov	r6, r0
   15bfc:	mov	r5, r1
   15c00:	mov	sl, r3
   15c04:	addeq	r5, sp, #28
   15c08:	bl	10ff0 <__errno_location@plt>
   15c0c:	mov	r3, #0
   15c10:	mov	r7, r0
   15c14:	str	r3, [r0]
   15c18:	bl	10fc0 <__ctype_b_loc@plt>
   15c1c:	ldrb	r3, [r6]
   15c20:	mov	r2, r6
   15c24:	ldr	r0, [r0]
   15c28:	b	15c30 <__assert_fail@plt+0x4b2c>
   15c2c:	ldrb	r3, [r2, #1]!
   15c30:	lsl	r1, r3, #1
   15c34:	ldrh	r4, [r0, r1]
   15c38:	ands	r4, r4, #8192	; 0x2000
   15c3c:	bne	15c2c <__assert_fail@plt+0x4b28>
   15c40:	cmp	r3, #45	; 0x2d
   15c44:	beq	15ce4 <__assert_fail@plt+0x4be0>
   15c48:	mov	r2, r8
   15c4c:	mov	r3, r4
   15c50:	mov	r1, r5
   15c54:	mov	r0, r6
   15c58:	bl	10ec4 <__strtoull_internal@plt>
   15c5c:	ldr	fp, [r5]
   15c60:	mov	r9, r0
   15c64:	mov	r8, r1
   15c68:	cmp	fp, r6
   15c6c:	beq	15ccc <__assert_fail@plt+0x4bc8>
   15c70:	ldr	r4, [r7]
   15c74:	cmp	r4, #0
   15c78:	bne	15cbc <__assert_fail@plt+0x4bb8>
   15c7c:	ldr	r3, [sp, #72]	; 0x48
   15c80:	cmp	r3, #0
   15c84:	beq	15c94 <__assert_fail@plt+0x4b90>
   15c88:	ldrb	r6, [fp]
   15c8c:	cmp	r6, #0
   15c90:	bne	15fd4 <__assert_fail@plt+0x4ed0>
   15c94:	str	r9, [sl]
   15c98:	str	r8, [sl, #4]
   15c9c:	mov	r0, r4
   15ca0:	add	sp, sp, #36	; 0x24
   15ca4:	ldrd	r4, [sp]
   15ca8:	ldrd	r6, [sp, #8]
   15cac:	ldrd	r8, [sp, #16]
   15cb0:	ldrd	sl, [sp, #24]
   15cb4:	add	sp, sp, #32
   15cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cbc:	cmp	r4, #34	; 0x22
   15cc0:	bne	15ce4 <__assert_fail@plt+0x4be0>
   15cc4:	mov	r4, #1
   15cc8:	b	15c7c <__assert_fail@plt+0x4b78>
   15ccc:	ldr	r3, [sp, #72]	; 0x48
   15cd0:	cmp	r3, #0
   15cd4:	beq	15ce4 <__assert_fail@plt+0x4be0>
   15cd8:	ldrb	r6, [r6]
   15cdc:	cmp	r6, #0
   15ce0:	bne	15cec <__assert_fail@plt+0x4be8>
   15ce4:	mov	r4, #4
   15ce8:	b	15c9c <__assert_fail@plt+0x4b98>
   15cec:	mov	r1, r6
   15cf0:	mov	r0, r3
   15cf4:	bl	10fe4 <strchr@plt>
   15cf8:	cmp	r0, #0
   15cfc:	movne	r9, #1
   15d00:	movne	r8, #0
   15d04:	beq	15ce4 <__assert_fail@plt+0x4be0>
   15d08:	sub	r3, r6, #69	; 0x45
   15d0c:	cmp	r3, #47	; 0x2f
   15d10:	ldrls	pc, [pc, r3, lsl #2]
   15d14:	b	15e1c <__assert_fail@plt+0x4d18>
   15d18:	ldrdeq	r5, [r1], -r8
   15d1c:	andeq	r5, r1, ip, lsl lr
   15d20:	ldrdeq	r5, [r1], -r8
   15d24:	andeq	r5, r1, ip, lsl lr
   15d28:	andeq	r5, r1, ip, lsl lr
   15d2c:	andeq	r5, r1, ip, lsl lr
   15d30:	ldrdeq	r5, [r1], -r8
   15d34:	andeq	r5, r1, ip, lsl lr
   15d38:	ldrdeq	r5, [r1], -r8
   15d3c:	andeq	r5, r1, ip, lsl lr
   15d40:	andeq	r5, r1, ip, lsl lr
   15d44:	ldrdeq	r5, [r1], -r8
   15d48:	andeq	r5, r1, ip, lsl lr
   15d4c:	andeq	r5, r1, ip, lsl lr
   15d50:	andeq	r5, r1, ip, lsl lr
   15d54:	ldrdeq	r5, [r1], -r8
   15d58:	andeq	r5, r1, ip, lsl lr
   15d5c:	andeq	r5, r1, ip, lsl lr
   15d60:	andeq	r5, r1, ip, lsl lr
   15d64:	andeq	r5, r1, ip, lsl lr
   15d68:	ldrdeq	r5, [r1], -r8
   15d6c:	ldrdeq	r5, [r1], -r8
   15d70:	andeq	r5, r1, ip, lsl lr
   15d74:	andeq	r5, r1, ip, lsl lr
   15d78:	andeq	r5, r1, ip, lsl lr
   15d7c:	andeq	r5, r1, ip, lsl lr
   15d80:	andeq	r5, r1, ip, lsl lr
   15d84:	andeq	r5, r1, ip, lsl lr
   15d88:	andeq	r5, r1, ip, lsl lr
   15d8c:	andeq	r5, r1, ip, lsl lr
   15d90:	andeq	r5, r1, ip, lsl lr
   15d94:	andeq	r5, r1, ip, lsl lr
   15d98:	andeq	r5, r1, ip, lsl lr
   15d9c:	andeq	r5, r1, ip, lsl lr
   15da0:	ldrdeq	r5, [r1], -r8
   15da4:	andeq	r5, r1, ip, lsl lr
   15da8:	andeq	r5, r1, ip, lsl lr
   15dac:	andeq	r5, r1, ip, lsl lr
   15db0:	ldrdeq	r5, [r1], -r8
   15db4:	andeq	r5, r1, ip, lsl lr
   15db8:	ldrdeq	r5, [r1], -r8
   15dbc:	andeq	r5, r1, ip, lsl lr
   15dc0:	andeq	r5, r1, ip, lsl lr
   15dc4:	andeq	r5, r1, ip, lsl lr
   15dc8:	andeq	r5, r1, ip, lsl lr
   15dcc:	andeq	r5, r1, ip, lsl lr
   15dd0:	andeq	r5, r1, ip, lsl lr
   15dd4:	ldrdeq	r5, [r1], -r8
   15dd8:	mov	r1, #48	; 0x30
   15ddc:	ldr	r0, [sp, #72]	; 0x48
   15de0:	bl	10fe4 <strchr@plt>
   15de4:	cmp	r0, #0
   15de8:	beq	15e1c <__assert_fail@plt+0x4d18>
   15dec:	ldrb	r3, [fp, #1]
   15df0:	cmp	r3, #68	; 0x44
   15df4:	beq	16348 <__assert_fail@plt+0x5244>
   15df8:	cmp	r3, #105	; 0x69
   15dfc:	beq	15fec <__assert_fail@plt+0x4ee8>
   15e00:	cmp	r3, #66	; 0x42
   15e04:	moveq	r3, #2
   15e08:	movne	r3, #1
   15e0c:	moveq	r7, #1000	; 0x3e8
   15e10:	movne	r7, #1024	; 0x400
   15e14:	str	r3, [sp, #4]
   15e18:	b	15e28 <__assert_fail@plt+0x4d24>
   15e1c:	mov	r3, #1
   15e20:	mov	r7, #1024	; 0x400
   15e24:	str	r3, [sp, #4]
   15e28:	sub	r6, r6, #66	; 0x42
   15e2c:	cmp	r6, #53	; 0x35
   15e30:	ldrls	pc, [pc, r6, lsl #2]
   15e34:	b	15f98 <__assert_fail@plt+0x4e94>
   15e38:	strdeq	r6, [r1], -r0
   15e3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e40:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e44:	strdeq	r6, [r1], -ip
   15e48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e4c:	andeq	r5, r1, r0, lsl pc
   15e50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e5c:	andeq	r5, r1, r0, lsr #31
   15e60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e64:	muleq	r1, ip, r2
   15e68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e6c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e70:	andeq	r6, r1, ip, ror #3
   15e74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e80:	andeq	r6, r1, r4, ror r1
   15e84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e8c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e90:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e94:	andeq	r6, r1, r4, lsl #1
   15e98:	andeq	r6, r1, r8
   15e9c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ea0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ea4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ea8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eac:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eb0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eb4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eb8:	andeq	r6, r1, ip, ror r2
   15ebc:	andeq	r5, r1, r0, lsl #31
   15ec0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ec4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ec8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ecc:	andeq	r5, r1, r0, lsl pc
   15ed0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ed4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ed8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15edc:	andeq	r5, r1, r0, lsr #31
   15ee0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ee4:	muleq	r1, ip, r2
   15ee8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ef0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ef4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ef8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15efc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f00:	andeq	r6, r1, r4, ror r1
   15f04:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f08:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f0c:	andeq	r6, r1, r4, ror #4
   15f10:	asr	r3, r7, #31
   15f14:	mov	r2, r7
   15f18:	cmp	r8, #0
   15f1c:	umull	r0, r1, r9, r7
   15f20:	mov	ip, #0
   15f24:	strd	r2, [sp, #8]
   15f28:	bne	1637c <__assert_fail@plt+0x5278>
   15f2c:	mov	r2, r0
   15f30:	mov	r3, r1
   15f34:	cmp	ip, #0
   15f38:	bne	15fc4 <__assert_fail@plt+0x4ec0>
   15f3c:	cmp	r3, #0
   15f40:	mov	lr, ip
   15f44:	bne	163e0 <__assert_fail@plt+0x52dc>
   15f48:	umull	r2, r3, r2, r7
   15f4c:	mov	ip, r2
   15f50:	mov	r1, r3
   15f54:	subs	r0, lr, #0
   15f58:	bne	15fc4 <__assert_fail@plt+0x4ec0>
   15f5c:	cmp	r1, #0
   15f60:	bne	163c0 <__assert_fail@plt+0x52bc>
   15f64:	umull	r2, r3, ip, r7
   15f68:	mov	r6, r2
   15f6c:	mov	r2, r3
   15f70:	cmp	r0, #0
   15f74:	mov	r9, r6
   15f78:	mov	r8, r2
   15f7c:	bne	15fc4 <__assert_fail@plt+0x4ec0>
   15f80:	ldr	r2, [sp, #4]
   15f84:	add	r3, fp, r2
   15f88:	str	r3, [r5]
   15f8c:	ldrb	r3, [fp, r2]
   15f90:	cmp	r3, #0
   15f94:	beq	15c94 <__assert_fail@plt+0x4b90>
   15f98:	orr	r4, r4, #2
   15f9c:	b	15c94 <__assert_fail@plt+0x4b90>
   15fa0:	cmp	r8, #0
   15fa4:	umull	r2, r3, r9, r7
   15fa8:	mov	ip, #0
   15fac:	asr	r1, r7, #31
   15fb0:	bne	16318 <__assert_fail@plt+0x5214>
   15fb4:	mov	r9, r2
   15fb8:	mov	r8, r3
   15fbc:	cmp	ip, #0
   15fc0:	beq	15f80 <__assert_fail@plt+0x4e7c>
   15fc4:	mvn	r9, #0
   15fc8:	mov	r4, #1
   15fcc:	mov	r8, r9
   15fd0:	b	15f80 <__assert_fail@plt+0x4e7c>
   15fd4:	mov	r1, r6
   15fd8:	ldr	r0, [sp, #72]	; 0x48
   15fdc:	bl	10fe4 <strchr@plt>
   15fe0:	cmp	r0, #0
   15fe4:	bne	15d08 <__assert_fail@plt+0x4c04>
   15fe8:	b	15f98 <__assert_fail@plt+0x4e94>
   15fec:	ldrb	r3, [fp, #2]
   15ff0:	mov	r7, #1024	; 0x400
   15ff4:	cmp	r3, #66	; 0x42
   15ff8:	movne	r3, #1
   15ffc:	moveq	r3, #3
   16000:	str	r3, [sp, #4]
   16004:	b	15e28 <__assert_fail@plt+0x4d24>
   16008:	asr	r3, r7, #31
   1600c:	mov	r2, r7
   16010:	mov	ip, #0
   16014:	mov	r0, #7
   16018:	mov	lr, ip
   1601c:	mov	r6, r4
   16020:	strd	r2, [sp, #8]
   16024:	str	r5, [sp, #16]
   16028:	b	16054 <__assert_fail@plt+0x4f50>
   1602c:	umull	r2, r3, r9, r7
   16030:	mov	r9, r2
   16034:	mov	r8, r3
   16038:	cmp	r1, #0
   1603c:	beq	1604c <__assert_fail@plt+0x4f48>
   16040:	mvn	r9, #0
   16044:	mov	ip, #1
   16048:	mov	r8, r9
   1604c:	subs	r0, r0, #1
   16050:	beq	1633c <__assert_fail@plt+0x5238>
   16054:	cmp	r8, #0
   16058:	mov	r1, #0
   1605c:	beq	1602c <__assert_fail@plt+0x4f28>
   16060:	umull	r4, r5, r9, r7
   16064:	mov	r3, lr
   16068:	mov	r2, r5
   1606c:	umlal	r2, r3, r8, r7
   16070:	cmp	r3, #0
   16074:	bne	1649c <__assert_fail@plt+0x5398>
   16078:	mov	r9, r4
   1607c:	mov	r8, r2
   16080:	b	16038 <__assert_fail@plt+0x4f34>
   16084:	asr	r3, r7, #31
   16088:	mov	r2, r7
   1608c:	mov	r6, #0
   16090:	mov	lr, #8
   16094:	mov	r0, r4
   16098:	mov	ip, r5
   1609c:	strd	r2, [sp, #8]
   160a0:	b	160cc <__assert_fail@plt+0x4fc8>
   160a4:	umull	r2, r3, r9, r7
   160a8:	mov	r9, r2
   160ac:	mov	r8, r3
   160b0:	cmp	r1, #0
   160b4:	beq	160c4 <__assert_fail@plt+0x4fc0>
   160b8:	mvn	r9, #0
   160bc:	mov	r6, #1
   160c0:	mov	r8, r9
   160c4:	subs	lr, lr, #1
   160c8:	beq	1630c <__assert_fail@plt+0x5208>
   160cc:	cmp	r8, #0
   160d0:	mov	r1, #0
   160d4:	beq	160a4 <__assert_fail@plt+0x4fa0>
   160d8:	umull	r4, r5, r9, r7
   160dc:	mov	r3, #0
   160e0:	mov	r2, r5
   160e4:	umlal	r2, r3, r8, r7
   160e8:	cmp	r3, #0
   160ec:	bne	164f4 <__assert_fail@plt+0x53f0>
   160f0:	mov	r9, r4
   160f4:	mov	r8, r2
   160f8:	b	160b0 <__assert_fail@plt+0x4fac>
   160fc:	asr	r3, r7, #31
   16100:	mov	r2, r7
   16104:	mov	r6, #0
   16108:	mov	lr, #6
   1610c:	mov	r0, r4
   16110:	mov	ip, r5
   16114:	strd	r2, [sp, #8]
   16118:	b	16144 <__assert_fail@plt+0x5040>
   1611c:	umull	r2, r3, r9, r7
   16120:	mov	r9, r2
   16124:	mov	r8, r3
   16128:	cmp	r1, #0
   1612c:	beq	1613c <__assert_fail@plt+0x5038>
   16130:	mvn	r9, #0
   16134:	mov	r6, #1
   16138:	mov	r8, r9
   1613c:	subs	lr, lr, #1
   16140:	beq	1630c <__assert_fail@plt+0x5208>
   16144:	cmp	r8, #0
   16148:	mov	r1, #0
   1614c:	beq	1611c <__assert_fail@plt+0x5018>
   16150:	umull	r4, r5, r9, r7
   16154:	mov	r3, #0
   16158:	mov	r2, r5
   1615c:	umlal	r2, r3, r8, r7
   16160:	cmp	r3, #0
   16164:	bne	164bc <__assert_fail@plt+0x53b8>
   16168:	mov	r9, r4
   1616c:	mov	r8, r2
   16170:	b	16128 <__assert_fail@plt+0x5024>
   16174:	asr	r3, r7, #31
   16178:	mov	r2, r7
   1617c:	mov	r6, #0
   16180:	mov	lr, #4
   16184:	mov	r0, r4
   16188:	mov	ip, r5
   1618c:	strd	r2, [sp, #8]
   16190:	b	161bc <__assert_fail@plt+0x50b8>
   16194:	umull	r2, r3, r9, r7
   16198:	mov	r9, r2
   1619c:	mov	r8, r3
   161a0:	cmp	r1, #0
   161a4:	beq	161b4 <__assert_fail@plt+0x50b0>
   161a8:	mvn	r9, #0
   161ac:	mov	r6, #1
   161b0:	mov	r8, r9
   161b4:	subs	lr, lr, #1
   161b8:	beq	1630c <__assert_fail@plt+0x5208>
   161bc:	cmp	r8, #0
   161c0:	mov	r1, #0
   161c4:	beq	16194 <__assert_fail@plt+0x5090>
   161c8:	umull	r4, r5, r9, r7
   161cc:	mov	r3, #0
   161d0:	mov	r2, r5
   161d4:	umlal	r2, r3, r8, r7
   161d8:	cmp	r3, #0
   161dc:	bne	164d8 <__assert_fail@plt+0x53d4>
   161e0:	mov	r9, r4
   161e4:	mov	r8, r2
   161e8:	b	161a0 <__assert_fail@plt+0x509c>
   161ec:	asr	r3, r7, #31
   161f0:	mov	r2, r7
   161f4:	mov	r6, #0
   161f8:	mov	lr, #5
   161fc:	mov	r0, r4
   16200:	mov	ip, r5
   16204:	strd	r2, [sp, #8]
   16208:	b	16234 <__assert_fail@plt+0x5130>
   1620c:	umull	r2, r3, r9, r7
   16210:	mov	r9, r2
   16214:	mov	r8, r3
   16218:	cmp	r1, #0
   1621c:	beq	1622c <__assert_fail@plt+0x5128>
   16220:	mvn	r9, #0
   16224:	mov	r6, #1
   16228:	mov	r8, r9
   1622c:	subs	lr, lr, #1
   16230:	beq	1630c <__assert_fail@plt+0x5208>
   16234:	cmp	r8, #0
   16238:	mov	r1, #0
   1623c:	beq	1620c <__assert_fail@plt+0x5108>
   16240:	umull	r4, r5, r9, r7
   16244:	mov	r3, #0
   16248:	mov	r2, r5
   1624c:	umlal	r2, r3, r8, r7
   16250:	cmp	r3, #0
   16254:	bne	16444 <__assert_fail@plt+0x5340>
   16258:	mov	r9, r4
   1625c:	mov	r8, r2
   16260:	b	16218 <__assert_fail@plt+0x5114>
   16264:	lsr	r3, r8, #31
   16268:	adds	r9, r9, r9
   1626c:	adc	r8, r8, r8
   16270:	cmp	r3, #0
   16274:	beq	15f80 <__assert_fail@plt+0x4e7c>
   16278:	b	15fc4 <__assert_fail@plt+0x4ec0>
   1627c:	lsr	r3, r8, #23
   16280:	lsl	r8, r8, #9
   16284:	cmp	r3, #0
   16288:	lsl	r3, r9, #9
   1628c:	orr	r8, r8, r9, lsr #23
   16290:	bne	15fc4 <__assert_fail@plt+0x4ec0>
   16294:	mov	r9, r3
   16298:	b	15f80 <__assert_fail@plt+0x4e7c>
   1629c:	asr	r3, r7, #31
   162a0:	mov	r2, r7
   162a4:	cmp	r8, #0
   162a8:	mov	r1, #0
   162ac:	strd	r2, [sp, #8]
   162b0:	umull	r2, r3, r9, r7
   162b4:	bne	16358 <__assert_fail@plt+0x5254>
   162b8:	mov	r0, r2
   162bc:	mov	ip, r3
   162c0:	cmp	r1, #0
   162c4:	bne	15fc4 <__assert_fail@plt+0x4ec0>
   162c8:	cmp	ip, #0
   162cc:	bne	163a0 <__assert_fail@plt+0x529c>
   162d0:	umull	r2, r3, r0, r7
   162d4:	mov	r6, r2
   162d8:	mov	r2, r3
   162dc:	cmp	r1, #0
   162e0:	mov	r9, r6
   162e4:	mov	r8, r2
   162e8:	beq	15f80 <__assert_fail@plt+0x4e7c>
   162ec:	b	15fc4 <__assert_fail@plt+0x4ec0>
   162f0:	lsr	r3, r8, #22
   162f4:	lsl	r8, r8, #10
   162f8:	cmp	r3, #0
   162fc:	lsl	r3, r9, #10
   16300:	orr	r8, r8, r9, lsr #22
   16304:	beq	16294 <__assert_fail@plt+0x5190>
   16308:	b	15fc4 <__assert_fail@plt+0x4ec0>
   1630c:	mov	r5, ip
   16310:	orr	r4, r0, r6
   16314:	b	15f80 <__assert_fail@plt+0x4e7c>
   16318:	strd	r2, [sp, #8]
   1631c:	mov	r3, ip
   16320:	ldr	r2, [sp, #12]
   16324:	umlal	r2, r3, r8, r7
   16328:	cmp	r3, #0
   1632c:	bne	16460 <__assert_fail@plt+0x535c>
   16330:	mov	r8, r2
   16334:	ldr	r9, [sp, #8]
   16338:	b	15fbc <__assert_fail@plt+0x4eb8>
   1633c:	orr	r4, r6, ip
   16340:	ldr	r5, [sp, #16]
   16344:	b	15f80 <__assert_fail@plt+0x4e7c>
   16348:	mov	r3, #2
   1634c:	mov	r7, #1000	; 0x3e8
   16350:	str	r3, [sp, #4]
   16354:	b	15e28 <__assert_fail@plt+0x4d24>
   16358:	strd	r2, [sp, #16]
   1635c:	mov	r3, r1
   16360:	ldr	r2, [sp, #20]
   16364:	umlal	r2, r3, r8, r7
   16368:	cmp	r3, #0
   1636c:	bne	16530 <__assert_fail@plt+0x542c>
   16370:	mov	ip, r2
   16374:	ldr	r0, [sp, #16]
   16378:	b	162c0 <__assert_fail@plt+0x51bc>
   1637c:	mov	r2, r1
   16380:	mov	r3, ip
   16384:	umlal	r2, r3, r8, r7
   16388:	cmp	r3, #0
   1638c:	strd	r2, [sp, #16]
   16390:	bne	16404 <__assert_fail@plt+0x5300>
   16394:	mov	r2, r0
   16398:	ldr	r3, [sp, #16]
   1639c:	b	15f34 <__assert_fail@plt+0x4e30>
   163a0:	umull	r8, r9, r0, r7
   163a4:	mov	r3, r1
   163a8:	mov	r2, r9
   163ac:	umlal	r2, r3, ip, r7
   163b0:	cmp	r3, #0
   163b4:	bne	16510 <__assert_fail@plt+0x540c>
   163b8:	mov	r6, r8
   163bc:	b	162dc <__assert_fail@plt+0x51d8>
   163c0:	umull	r8, r9, ip, r7
   163c4:	mov	r3, r0
   163c8:	mov	r2, r9
   163cc:	umlal	r2, r3, r1, r7
   163d0:	cmp	r3, #0
   163d4:	bne	16558 <__assert_fail@plt+0x5454>
   163d8:	mov	r6, r8
   163dc:	b	15f70 <__assert_fail@plt+0x4e6c>
   163e0:	umull	r8, r9, r2, r7
   163e4:	mov	r1, ip
   163e8:	mov	r0, r9
   163ec:	umlal	r0, r1, r3, r7
   163f0:	cmp	r1, #0
   163f4:	bne	16424 <__assert_fail@plt+0x5320>
   163f8:	mov	ip, r8
   163fc:	mov	r1, r0
   16400:	b	15f54 <__assert_fail@plt+0x4e50>
   16404:	ldr	lr, [sp, #8]
   16408:	mov	r2, r0
   1640c:	mov	ip, #1
   16410:	ldr	r3, [sp, #12]
   16414:	mul	r3, r9, r3
   16418:	mla	r3, lr, r8, r3
   1641c:	add	r3, r3, r1
   16420:	b	15f34 <__assert_fail@plt+0x4e30>
   16424:	ldr	r1, [sp, #12]
   16428:	mov	lr, #1
   1642c:	mov	ip, r8
   16430:	mul	r1, r2, r1
   16434:	ldr	r2, [sp, #8]
   16438:	mla	r1, r3, r2, r1
   1643c:	add	r1, r1, r9
   16440:	b	15f54 <__assert_fail@plt+0x4e50>
   16444:	ldrd	r2, [sp, #8]
   16448:	mov	r1, #1
   1644c:	mul	r3, r9, r3
   16450:	mov	r9, r4
   16454:	mla	r8, r2, r8, r3
   16458:	add	r8, r8, r5
   1645c:	b	16218 <__assert_fail@plt+0x5114>
   16460:	mul	r3, r9, r1
   16464:	mov	ip, #1
   16468:	mla	r8, r7, r8, r3
   1646c:	ldrd	r6, [sp, #8]
   16470:	mov	r9, r6
   16474:	add	r8, r8, r7
   16478:	b	15fbc <__assert_fail@plt+0x4eb8>
   1647c:	movw	r3, #32360	; 0x7e68
   16480:	movt	r3, #1
   16484:	movw	r1, #32372	; 0x7e74
   16488:	movt	r1, #1
   1648c:	movw	r0, #32388	; 0x7e84
   16490:	movt	r0, #1
   16494:	mov	r2, #85	; 0x55
   16498:	bl	11104 <__assert_fail@plt>
   1649c:	ldr	r3, [sp, #12]
   164a0:	mov	r1, #1
   164a4:	mul	r2, r9, r3
   164a8:	ldr	r3, [sp, #8]
   164ac:	mov	r9, r4
   164b0:	mla	r8, r3, r8, r2
   164b4:	add	r8, r8, r5
   164b8:	b	16038 <__assert_fail@plt+0x4f34>
   164bc:	ldrd	r2, [sp, #8]
   164c0:	mov	r1, #1
   164c4:	mul	r3, r9, r3
   164c8:	mov	r9, r4
   164cc:	mla	r8, r2, r8, r3
   164d0:	add	r8, r8, r5
   164d4:	b	16128 <__assert_fail@plt+0x5024>
   164d8:	ldrd	r2, [sp, #8]
   164dc:	mov	r1, #1
   164e0:	mul	r3, r9, r3
   164e4:	mov	r9, r4
   164e8:	mla	r8, r2, r8, r3
   164ec:	add	r8, r8, r5
   164f0:	b	161a0 <__assert_fail@plt+0x509c>
   164f4:	ldrd	r2, [sp, #8]
   164f8:	mov	r1, #1
   164fc:	mul	r3, r9, r3
   16500:	mov	r9, r4
   16504:	mla	r8, r2, r8, r3
   16508:	add	r8, r8, r5
   1650c:	b	160b0 <__assert_fail@plt+0x4fac>
   16510:	ldr	r3, [sp, #12]
   16514:	mov	r6, r8
   16518:	mov	r1, #1
   1651c:	mul	r2, r0, r3
   16520:	ldr	r3, [sp, #8]
   16524:	mla	r2, ip, r3, r2
   16528:	add	r2, r2, r9
   1652c:	b	162dc <__assert_fail@plt+0x51d8>
   16530:	ldr	r3, [sp, #12]
   16534:	mov	r1, #1
   16538:	ldr	r2, [sp, #16]
   1653c:	mul	ip, r9, r3
   16540:	ldr	r3, [sp, #8]
   16544:	mov	r0, r2
   16548:	mla	ip, r3, r8, ip
   1654c:	ldr	r3, [sp, #20]
   16550:	add	ip, ip, r3
   16554:	b	162c0 <__assert_fail@plt+0x51bc>
   16558:	ldr	r3, [sp, #12]
   1655c:	mov	r6, r8
   16560:	mov	r0, #1
   16564:	mul	r2, ip, r3
   16568:	ldr	r3, [sp, #8]
   1656c:	mla	r2, r1, r3, r2
   16570:	add	r2, r2, r9
   16574:	b	15f70 <__assert_fail@plt+0x4e6c>
   16578:	cmp	r1, #0
   1657c:	cmpne	r0, #0
   16580:	beq	165cc <__assert_fail@plt+0x54c8>
   16584:	strd	r4, [sp, #-16]!
   16588:	umull	r4, r5, r0, r1
   1658c:	str	r6, [sp, #8]
   16590:	str	lr, [sp, #12]
   16594:	adds	r3, r5, #0
   16598:	movne	r3, #1
   1659c:	cmp	r4, #0
   165a0:	blt	165ac <__assert_fail@plt+0x54a8>
   165a4:	cmp	r3, #0
   165a8:	beq	165d8 <__assert_fail@plt+0x54d4>
   165ac:	bl	10ff0 <__errno_location@plt>
   165b0:	mov	r3, #12
   165b4:	ldrd	r4, [sp]
   165b8:	ldr	r6, [sp, #8]
   165bc:	add	sp, sp, #12
   165c0:	str	r3, [r0]
   165c4:	mov	r0, #0
   165c8:	pop	{pc}		; (ldr pc, [sp], #4)
   165cc:	mov	r1, #1
   165d0:	mov	r0, r1
   165d4:	b	10e4c <calloc@plt>
   165d8:	ldrd	r4, [sp]
   165dc:	ldr	r6, [sp, #8]
   165e0:	ldr	lr, [sp, #12]
   165e4:	add	sp, sp, #16
   165e8:	b	10e4c <calloc@plt>
   165ec:	cmp	r0, #0
   165f0:	beq	165fc <__assert_fail@plt+0x54f8>
   165f4:	blt	16604 <__assert_fail@plt+0x5500>
   165f8:	b	10f84 <malloc@plt>
   165fc:	mov	r0, #1
   16600:	b	10f84 <malloc@plt>
   16604:	str	r4, [sp, #-8]!
   16608:	str	lr, [sp, #4]
   1660c:	bl	10ff0 <__errno_location@plt>
   16610:	mov	r3, #12
   16614:	ldr	r4, [sp]
   16618:	add	sp, sp, #4
   1661c:	str	r3, [r0]
   16620:	mov	r0, #0
   16624:	pop	{pc}		; (ldr pc, [sp], #4)
   16628:	cmp	r0, #0
   1662c:	beq	16654 <__assert_fail@plt+0x5550>
   16630:	cmp	r1, #0
   16634:	str	r4, [sp, #-8]!
   16638:	str	lr, [sp, #4]
   1663c:	beq	1665c <__assert_fail@plt+0x5558>
   16640:	blt	16670 <__assert_fail@plt+0x556c>
   16644:	ldr	r4, [sp]
   16648:	ldr	lr, [sp, #4]
   1664c:	add	sp, sp, #8
   16650:	b	10f00 <realloc@plt>
   16654:	mov	r0, r1
   16658:	b	165ec <__assert_fail@plt+0x54e8>
   1665c:	bl	12140 <__assert_fail@plt+0x103c>
   16660:	ldr	r4, [sp]
   16664:	add	sp, sp, #4
   16668:	mov	r0, #0
   1666c:	pop	{pc}		; (ldr pc, [sp], #4)
   16670:	bl	10ff0 <__errno_location@plt>
   16674:	mov	r3, #12
   16678:	str	r3, [r0]
   1667c:	b	16660 <__assert_fail@plt+0x555c>
   16680:	mov	r0, #1
   16684:	b	11ac0 <__assert_fail@plt+0x9bc>
   16688:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1668c:	mov	r5, r1
   16690:	mov	r4, r2
   16694:	strd	r6, [sp, #8]
   16698:	mov	r7, r3
   1669c:	strd	r8, [sp, #16]
   166a0:	strd	sl, [sp, #24]
   166a4:	mov	sl, r0
   166a8:	str	lr, [sp, #32]
   166ac:	sub	sp, sp, #12
   166b0:	str	r2, [sp]
   166b4:	bl	10fd8 <strlen@plt>
   166b8:	ldr	fp, [r5]
   166bc:	cmp	fp, #0
   166c0:	beq	16790 <__assert_fail@plt+0x568c>
   166c4:	mov	r6, #0
   166c8:	mov	r8, r0
   166cc:	mvn	r9, #0
   166d0:	str	r6, [sp, #4]
   166d4:	b	16700 <__assert_fail@plt+0x55fc>
   166d8:	bl	10edc <memcmp@plt>
   166dc:	ldr	r3, [sp, #4]
   166e0:	cmp	r0, #0
   166e4:	movne	r3, #1
   166e8:	str	r3, [sp, #4]
   166ec:	ldr	fp, [r5, #4]!
   166f0:	add	r6, r6, #1
   166f4:	add	r4, r4, r7
   166f8:	cmp	fp, #0
   166fc:	beq	1675c <__assert_fail@plt+0x5658>
   16700:	mov	r2, r8
   16704:	mov	r1, sl
   16708:	mov	r0, fp
   1670c:	bl	110e0 <strncmp@plt>
   16710:	cmp	r0, #0
   16714:	mov	r0, fp
   16718:	bne	166ec <__assert_fail@plt+0x55e8>
   1671c:	bl	10fd8 <strlen@plt>
   16720:	ldr	r3, [sp]
   16724:	cmp	r0, r8
   16728:	mov	r2, r7
   1672c:	mov	r1, r4
   16730:	mla	r0, r7, r9, r3
   16734:	beq	16788 <__assert_fail@plt+0x5684>
   16738:	cmn	r9, #1
   1673c:	moveq	r9, r6
   16740:	beq	166ec <__assert_fail@plt+0x55e8>
   16744:	ldr	r3, [sp]
   16748:	cmp	r3, #0
   1674c:	bne	166d8 <__assert_fail@plt+0x55d4>
   16750:	mov	r3, #1
   16754:	str	r3, [sp, #4]
   16758:	b	166ec <__assert_fail@plt+0x55e8>
   1675c:	ldr	r3, [sp, #4]
   16760:	cmp	r3, #0
   16764:	mvnne	r9, #1
   16768:	mov	r0, r9
   1676c:	add	sp, sp, #12
   16770:	ldrd	r4, [sp]
   16774:	ldrd	r6, [sp, #8]
   16778:	ldrd	r8, [sp, #16]
   1677c:	ldrd	sl, [sp, #24]
   16780:	add	sp, sp, #32
   16784:	pop	{pc}		; (ldr pc, [sp], #4)
   16788:	mov	r9, r6
   1678c:	b	16768 <__assert_fail@plt+0x5664>
   16790:	mvn	r9, #0
   16794:	b	16768 <__assert_fail@plt+0x5664>
   16798:	strd	r4, [sp, #-16]!
   1679c:	str	r6, [sp, #8]
   167a0:	mov	r6, r0
   167a4:	ldr	r0, [r1]
   167a8:	str	lr, [sp, #12]
   167ac:	cmp	r0, #0
   167b0:	beq	167f4 <__assert_fail@plt+0x56f0>
   167b4:	mov	r4, r1
   167b8:	mov	r5, #0
   167bc:	b	167d0 <__assert_fail@plt+0x56cc>
   167c0:	ldr	r0, [r4, #4]!
   167c4:	add	r5, r5, #1
   167c8:	cmp	r0, #0
   167cc:	beq	167f4 <__assert_fail@plt+0x56f0>
   167d0:	mov	r1, r6
   167d4:	bl	10e70 <strcmp@plt>
   167d8:	cmp	r0, #0
   167dc:	bne	167c0 <__assert_fail@plt+0x56bc>
   167e0:	mov	r0, r5
   167e4:	ldrd	r4, [sp]
   167e8:	ldr	r6, [sp, #8]
   167ec:	add	sp, sp, #12
   167f0:	pop	{pc}		; (ldr pc, [sp], #4)
   167f4:	ldrd	r4, [sp]
   167f8:	mvn	r0, #0
   167fc:	ldr	r6, [sp, #8]
   16800:	add	sp, sp, #12
   16804:	pop	{pc}		; (ldr pc, [sp], #4)
   16808:	cmn	r2, #1
   1680c:	strd	r4, [sp, #-16]!
   16810:	mov	r5, r1
   16814:	movweq	r1, #32428	; 0x7eac
   16818:	movwne	r1, #32456	; 0x7ec8
   1681c:	str	r6, [sp, #8]
   16820:	movteq	r1, #1
   16824:	movtne	r1, #1
   16828:	str	lr, [sp, #12]
   1682c:	mov	r6, r0
   16830:	sub	sp, sp, #8
   16834:	mov	r2, #5
   16838:	mov	r0, #0
   1683c:	bl	10ef4 <dcgettext@plt>
   16840:	mov	r4, r0
   16844:	mov	r2, r5
   16848:	mov	r1, #8
   1684c:	mov	r0, #0
   16850:	bl	14e1c <__assert_fail@plt+0x3d18>
   16854:	mov	r5, r0
   16858:	mov	r1, r6
   1685c:	mov	r0, #1
   16860:	bl	1514c <__assert_fail@plt+0x4048>
   16864:	mov	r1, #0
   16868:	mov	r3, r5
   1686c:	str	r0, [sp]
   16870:	mov	r2, r4
   16874:	mov	r0, r1
   16878:	bl	10f6c <error@plt>
   1687c:	add	sp, sp, #8
   16880:	ldrd	r4, [sp]
   16884:	ldr	r6, [sp, #8]
   16888:	add	sp, sp, #12
   1688c:	pop	{pc}		; (ldr pc, [sp], #4)
   16890:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16894:	mov	r4, r1
   16898:	movw	r1, #32488	; 0x7ee8
   1689c:	movt	r1, #1
   168a0:	strd	r6, [sp, #8]
   168a4:	mov	r6, r0
   168a8:	mov	r7, r2
   168ac:	mov	r0, #0
   168b0:	strd	r8, [sp, #16]
   168b4:	mov	r2, #5
   168b8:	strd	sl, [sp, #24]
   168bc:	movw	sl, #37224	; 0x9168
   168c0:	movt	sl, #2
   168c4:	str	lr, [sp, #32]
   168c8:	sub	sp, sp, #12
   168cc:	bl	10ef4 <dcgettext@plt>
   168d0:	ldr	r1, [sl]
   168d4:	bl	10e58 <fputs_unlocked@plt>
   168d8:	ldr	fp, [r6]
   168dc:	cmp	fp, #0
   168e0:	beq	16980 <__assert_fail@plt+0x587c>
   168e4:	movw	r3, #32512	; 0x7f00
   168e8:	movt	r3, #1
   168ec:	mov	r9, #0
   168f0:	str	r3, [sp]
   168f4:	movw	r3, #32520	; 0x7f08
   168f8:	movt	r3, #1
   168fc:	mov	r5, r9
   16900:	str	r3, [sp, #4]
   16904:	b	1693c <__assert_fail@plt+0x5838>
   16908:	mov	r0, fp
   1690c:	mov	r9, r4
   16910:	bl	1515c <__assert_fail@plt+0x4058>
   16914:	mov	r3, r0
   16918:	mov	r1, #1
   1691c:	ldr	r2, [sp]
   16920:	mov	r0, r8
   16924:	bl	11044 <__fprintf_chk@plt>
   16928:	ldr	fp, [r6, #4]!
   1692c:	add	r5, r5, #1
   16930:	add	r4, r4, r7
   16934:	cmp	fp, #0
   16938:	beq	16980 <__assert_fail@plt+0x587c>
   1693c:	cmp	r5, #0
   16940:	mov	r1, r4
   16944:	ldr	r8, [sl]
   16948:	mov	r2, r7
   1694c:	mov	r0, r9
   16950:	beq	16908 <__assert_fail@plt+0x5804>
   16954:	bl	10edc <memcmp@plt>
   16958:	cmp	r0, #0
   1695c:	bne	16908 <__assert_fail@plt+0x5804>
   16960:	mov	r0, fp
   16964:	bl	1515c <__assert_fail@plt+0x4058>
   16968:	mov	r3, r0
   1696c:	mov	r1, #1
   16970:	ldr	r2, [sp, #4]
   16974:	mov	r0, r8
   16978:	bl	11044 <__fprintf_chk@plt>
   1697c:	b	16928 <__assert_fail@plt+0x5824>
   16980:	ldr	r0, [sl]
   16984:	ldr	r3, [r0, #20]
   16988:	ldr	r2, [r0, #24]
   1698c:	cmp	r3, r2
   16990:	bcs	169c0 <__assert_fail@plt+0x58bc>
   16994:	add	r1, r3, #1
   16998:	mov	r2, #10
   1699c:	str	r1, [r0, #20]
   169a0:	strb	r2, [r3]
   169a4:	add	sp, sp, #12
   169a8:	ldrd	r4, [sp]
   169ac:	ldrd	r6, [sp, #8]
   169b0:	ldrd	r8, [sp, #16]
   169b4:	ldrd	sl, [sp, #24]
   169b8:	add	sp, sp, #32
   169bc:	pop	{pc}		; (ldr pc, [sp], #4)
   169c0:	mov	r1, #10
   169c4:	add	sp, sp, #12
   169c8:	ldrd	r4, [sp]
   169cc:	ldrd	r6, [sp, #8]
   169d0:	ldrd	r8, [sp, #16]
   169d4:	ldrd	sl, [sp, #24]
   169d8:	ldr	lr, [sp, #32]
   169dc:	add	sp, sp, #36	; 0x24
   169e0:	b	11074 <__overflow@plt>
   169e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   169e8:	mov	r5, r1
   169ec:	mov	r4, r2
   169f0:	ldrb	ip, [sp, #32]
   169f4:	strd	r6, [sp, #8]
   169f8:	mov	r7, r0
   169fc:	mov	r6, r3
   16a00:	str	r8, [sp, #16]
   16a04:	str	lr, [sp, #20]
   16a08:	cmp	ip, #0
   16a0c:	beq	16a40 <__assert_fail@plt+0x593c>
   16a10:	mov	r2, r3
   16a14:	mov	r1, r4
   16a18:	ldr	r3, [sp, #24]
   16a1c:	mov	r0, r5
   16a20:	bl	16688 <__assert_fail@plt+0x5584>
   16a24:	cmp	r0, #0
   16a28:	blt	16a50 <__assert_fail@plt+0x594c>
   16a2c:	ldrd	r4, [sp]
   16a30:	ldrd	r6, [sp, #8]
   16a34:	ldr	r8, [sp, #16]
   16a38:	add	sp, sp, #20
   16a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a40:	mov	r1, r2
   16a44:	mov	r0, r5
   16a48:	bl	16798 <__assert_fail@plt+0x5694>
   16a4c:	b	16a24 <__assert_fail@plt+0x5920>
   16a50:	mov	r2, r0
   16a54:	mov	r1, r5
   16a58:	mov	r0, r7
   16a5c:	bl	16808 <__assert_fail@plt+0x5704>
   16a60:	mov	r0, r4
   16a64:	mov	r1, r6
   16a68:	ldr	r2, [sp, #24]
   16a6c:	bl	16890 <__assert_fail@plt+0x578c>
   16a70:	ldr	r3, [sp, #28]
   16a74:	blx	r3
   16a78:	mvn	r0, #0
   16a7c:	b	16a2c <__assert_fail@plt+0x5928>
   16a80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16a84:	strd	r6, [sp, #8]
   16a88:	ldr	r7, [r1]
   16a8c:	str	r8, [sp, #16]
   16a90:	str	lr, [sp, #20]
   16a94:	cmp	r7, #0
   16a98:	beq	16ad8 <__assert_fail@plt+0x59d4>
   16a9c:	mov	r6, r3
   16aa0:	mov	r8, r0
   16aa4:	mov	r4, r2
   16aa8:	mov	r5, r1
   16aac:	b	16abc <__assert_fail@plt+0x59b8>
   16ab0:	ldr	r7, [r5, #4]!
   16ab4:	cmp	r7, #0
   16ab8:	beq	16ad8 <__assert_fail@plt+0x59d4>
   16abc:	mov	r1, r4
   16ac0:	mov	r2, r6
   16ac4:	mov	r0, r8
   16ac8:	add	r4, r4, r6
   16acc:	bl	10edc <memcmp@plt>
   16ad0:	cmp	r0, #0
   16ad4:	bne	16ab0 <__assert_fail@plt+0x59ac>
   16ad8:	mov	r0, r7
   16adc:	ldrd	r4, [sp]
   16ae0:	ldrd	r6, [sp, #8]
   16ae4:	ldr	r8, [sp, #16]
   16ae8:	add	sp, sp, #20
   16aec:	pop	{pc}		; (ldr pc, [sp], #4)
   16af0:	strd	r4, [sp, #-16]!
   16af4:	mov	r4, r0
   16af8:	str	r6, [sp, #8]
   16afc:	str	lr, [sp, #12]
   16b00:	bl	10f54 <__fpending@plt>
   16b04:	ldr	r5, [r4]
   16b08:	mov	r6, r0
   16b0c:	mov	r0, r4
   16b10:	bl	11f80 <__assert_fail@plt+0xe7c>
   16b14:	mov	r4, r0
   16b18:	and	r5, r5, #32
   16b1c:	cmp	r5, #0
   16b20:	bne	16b58 <__assert_fail@plt+0x5a54>
   16b24:	cmp	r0, #0
   16b28:	beq	16b44 <__assert_fail@plt+0x5a40>
   16b2c:	cmp	r6, #0
   16b30:	bne	16b70 <__assert_fail@plt+0x5a6c>
   16b34:	bl	10ff0 <__errno_location@plt>
   16b38:	ldr	r4, [r0]
   16b3c:	subs	r4, r4, #9
   16b40:	mvnne	r4, #0
   16b44:	mov	r0, r4
   16b48:	ldrd	r4, [sp]
   16b4c:	ldr	r6, [sp, #8]
   16b50:	add	sp, sp, #12
   16b54:	pop	{pc}		; (ldr pc, [sp], #4)
   16b58:	cmp	r0, #0
   16b5c:	bne	16b70 <__assert_fail@plt+0x5a6c>
   16b60:	bl	10ff0 <__errno_location@plt>
   16b64:	str	r4, [r0]
   16b68:	mvn	r4, #0
   16b6c:	b	16b44 <__assert_fail@plt+0x5a40>
   16b70:	mvn	r4, #0
   16b74:	b	16b44 <__assert_fail@plt+0x5a40>
   16b78:	push	{r1, r2, r3}
   16b7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16b80:	strd	r6, [sp, #8]
   16b84:	str	lr, [sp, #16]
   16b88:	sub	sp, sp, #8
   16b8c:	ldr	r1, [sp, #28]
   16b90:	add	r2, sp, #32
   16b94:	str	r2, [sp, #4]
   16b98:	cmp	r1, #0
   16b9c:	beq	16c78 <__assert_fail@plt+0x5b74>
   16ba0:	movw	r3, #1030	; 0x406
   16ba4:	mov	r6, r0
   16ba8:	cmp	r1, r3
   16bac:	beq	16c88 <__assert_fail@plt+0x5b84>
   16bb0:	cmp	r1, #11
   16bb4:	beq	16c30 <__assert_fail@plt+0x5b2c>
   16bb8:	ble	16c10 <__assert_fail@plt+0x5b0c>
   16bbc:	movw	r2, #1031	; 0x407
   16bc0:	cmp	r1, r2
   16bc4:	bgt	16c4c <__assert_fail@plt+0x5b48>
   16bc8:	cmp	r1, r3
   16bcc:	bge	16bdc <__assert_fail@plt+0x5ad8>
   16bd0:	movw	r3, #1025	; 0x401
   16bd4:	cmp	r1, r3
   16bd8:	beq	16c30 <__assert_fail@plt+0x5b2c>
   16bdc:	ldr	r3, [sp, #4]
   16be0:	mov	r0, r6
   16be4:	ldr	r2, [r3]
   16be8:	bl	11068 <fcntl64@plt>
   16bec:	mov	r4, r0
   16bf0:	mov	r0, r4
   16bf4:	add	sp, sp, #8
   16bf8:	ldrd	r4, [sp]
   16bfc:	ldrd	r6, [sp, #8]
   16c00:	ldr	lr, [sp, #16]
   16c04:	add	sp, sp, #20
   16c08:	add	sp, sp, #12
   16c0c:	bx	lr
   16c10:	cmp	r1, #4
   16c14:	beq	16bdc <__assert_fail@plt+0x5ad8>
   16c18:	bgt	16c40 <__assert_fail@plt+0x5b3c>
   16c1c:	cmp	r1, #2
   16c20:	beq	16bdc <__assert_fail@plt+0x5ad8>
   16c24:	bgt	16c30 <__assert_fail@plt+0x5b2c>
   16c28:	cmp	r1, #1
   16c2c:	bne	16bdc <__assert_fail@plt+0x5ad8>
   16c30:	mov	r0, r6
   16c34:	bl	11068 <fcntl64@plt>
   16c38:	mov	r4, r0
   16c3c:	b	16bf0 <__assert_fail@plt+0x5aec>
   16c40:	cmp	r1, #9
   16c44:	bne	16bdc <__assert_fail@plt+0x5ad8>
   16c48:	b	16c30 <__assert_fail@plt+0x5b2c>
   16c4c:	movw	r3, #1033	; 0x409
   16c50:	cmp	r1, r3
   16c54:	beq	16bdc <__assert_fail@plt+0x5ad8>
   16c58:	blt	16c30 <__assert_fail@plt+0x5b2c>
   16c5c:	movw	r3, #1034	; 0x40a
   16c60:	cmp	r1, r3
   16c64:	bne	16bdc <__assert_fail@plt+0x5ad8>
   16c68:	mov	r0, r6
   16c6c:	bl	11068 <fcntl64@plt>
   16c70:	mov	r4, r0
   16c74:	b	16bf0 <__assert_fail@plt+0x5aec>
   16c78:	ldr	r2, [sp, #32]
   16c7c:	bl	11068 <fcntl64@plt>
   16c80:	mov	r4, r0
   16c84:	b	16bf0 <__assert_fail@plt+0x5aec>
   16c88:	movw	r5, #37568	; 0x92c0
   16c8c:	movt	r5, #2
   16c90:	ldr	r7, [r2]
   16c94:	add	r2, sp, #36	; 0x24
   16c98:	ldr	r3, [r5]
   16c9c:	str	r2, [sp, #4]
   16ca0:	mov	r2, r7
   16ca4:	cmp	r3, #0
   16ca8:	blt	16cc4 <__assert_fail@plt+0x5bc0>
   16cac:	bl	11068 <fcntl64@plt>
   16cb0:	subs	r4, r0, #0
   16cb4:	blt	16d2c <__assert_fail@plt+0x5c28>
   16cb8:	mov	r3, #1
   16cbc:	str	r3, [r5]
   16cc0:	b	16bf0 <__assert_fail@plt+0x5aec>
   16cc4:	mov	r1, #0
   16cc8:	bl	11068 <fcntl64@plt>
   16ccc:	subs	r4, r0, #0
   16cd0:	blt	16bf0 <__assert_fail@plt+0x5aec>
   16cd4:	ldr	r3, [r5]
   16cd8:	cmn	r3, #1
   16cdc:	bne	16bf0 <__assert_fail@plt+0x5aec>
   16ce0:	mov	r1, #1
   16ce4:	mov	r0, r4
   16ce8:	bl	11068 <fcntl64@plt>
   16cec:	subs	r2, r0, #0
   16cf0:	blt	16d0c <__assert_fail@plt+0x5c08>
   16cf4:	orr	r2, r2, #1
   16cf8:	mov	r1, #2
   16cfc:	mov	r0, r4
   16d00:	bl	11068 <fcntl64@plt>
   16d04:	cmn	r0, #1
   16d08:	bne	16bf0 <__assert_fail@plt+0x5aec>
   16d0c:	bl	10ff0 <__errno_location@plt>
   16d10:	mov	r5, r0
   16d14:	mov	r0, r4
   16d18:	ldr	r6, [r5]
   16d1c:	mvn	r4, #0
   16d20:	bl	110f8 <close@plt>
   16d24:	str	r6, [r5]
   16d28:	b	16bf0 <__assert_fail@plt+0x5aec>
   16d2c:	bl	10ff0 <__errno_location@plt>
   16d30:	ldr	r3, [r0]
   16d34:	cmp	r3, #22
   16d38:	bne	16cb8 <__assert_fail@plt+0x5bb4>
   16d3c:	mov	r2, r7
   16d40:	mov	r0, r6
   16d44:	mov	r1, #0
   16d48:	bl	11068 <fcntl64@plt>
   16d4c:	subs	r4, r0, #0
   16d50:	mvnge	r3, #0
   16d54:	strge	r3, [r5]
   16d58:	bge	16ce0 <__assert_fail@plt+0x5bdc>
   16d5c:	b	16bf0 <__assert_fail@plt+0x5aec>
   16d60:	mov	r0, #14
   16d64:	str	r4, [sp, #-8]!
   16d68:	str	lr, [sp, #4]
   16d6c:	bl	11098 <nl_langinfo@plt>
   16d70:	cmp	r0, #0
   16d74:	beq	16d98 <__assert_fail@plt+0x5c94>
   16d78:	ldrb	r2, [r0]
   16d7c:	movw	r3, #32528	; 0x7f10
   16d80:	movt	r3, #1
   16d84:	ldr	r4, [sp]
   16d88:	add	sp, sp, #4
   16d8c:	cmp	r2, #0
   16d90:	moveq	r0, r3
   16d94:	pop	{pc}		; (ldr pc, [sp], #4)
   16d98:	ldr	r4, [sp]
   16d9c:	add	sp, sp, #4
   16da0:	movw	r0, #32528	; 0x7f10
   16da4:	movt	r0, #1
   16da8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dac:	strd	r4, [sp, #-20]!	; 0xffffffec
   16db0:	mov	r5, r2
   16db4:	strd	r6, [sp, #8]
   16db8:	subs	r6, r0, #0
   16dbc:	mov	r7, r1
   16dc0:	str	lr, [sp, #16]
   16dc4:	sub	sp, sp, #12
   16dc8:	addeq	r6, sp, #4
   16dcc:	mov	r0, r6
   16dd0:	bl	10f60 <mbrtowc@plt>
   16dd4:	cmp	r5, #0
   16dd8:	cmnne	r0, #3
   16ddc:	mov	r4, r0
   16de0:	bhi	16dfc <__assert_fail@plt+0x5cf8>
   16de4:	mov	r0, r4
   16de8:	add	sp, sp, #12
   16dec:	ldrd	r4, [sp]
   16df0:	ldrd	r6, [sp, #8]
   16df4:	add	sp, sp, #16
   16df8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dfc:	mov	r0, #0
   16e00:	bl	16e54 <__assert_fail@plt+0x5d50>
   16e04:	cmp	r0, #0
   16e08:	bne	16de4 <__assert_fail@plt+0x5ce0>
   16e0c:	ldrb	r3, [r7]
   16e10:	mov	r4, #1
   16e14:	str	r3, [r6]
   16e18:	b	16de4 <__assert_fail@plt+0x5ce0>
   16e1c:	umull	r2, r3, r1, r2
   16e20:	cmp	r3, #0
   16e24:	bne	16e30 <__assert_fail@plt+0x5d2c>
   16e28:	mov	r1, r2
   16e2c:	b	16628 <__assert_fail@plt+0x5524>
   16e30:	str	r4, [sp, #-8]!
   16e34:	str	lr, [sp, #4]
   16e38:	bl	10ff0 <__errno_location@plt>
   16e3c:	mov	r3, #12
   16e40:	ldr	r4, [sp]
   16e44:	add	sp, sp, #4
   16e48:	str	r3, [r0]
   16e4c:	mov	r0, #0
   16e50:	pop	{pc}		; (ldr pc, [sp], #4)
   16e54:	push	{lr}		; (str lr, [sp, #-4]!)
   16e58:	sub	sp, sp, #268	; 0x10c
   16e5c:	movw	r2, #257	; 0x101
   16e60:	add	r1, sp, #4
   16e64:	bl	16eac <__assert_fail@plt+0x5da8>
   16e68:	cmp	r0, #0
   16e6c:	movne	r0, #0
   16e70:	bne	16ea4 <__assert_fail@plt+0x5da0>
   16e74:	movw	r1, #32536	; 0x7f18
   16e78:	movt	r1, #1
   16e7c:	add	r0, sp, #4
   16e80:	bl	10e70 <strcmp@plt>
   16e84:	cmp	r0, #0
   16e88:	beq	16ea4 <__assert_fail@plt+0x5da0>
   16e8c:	add	r0, sp, #4
   16e90:	movw	r1, #32540	; 0x7f1c
   16e94:	movt	r1, #1
   16e98:	bl	10e70 <strcmp@plt>
   16e9c:	adds	r0, r0, #0
   16ea0:	movne	r0, #1
   16ea4:	add	sp, sp, #268	; 0x10c
   16ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   16eac:	strd	r4, [sp, #-16]!
   16eb0:	mov	r5, r1
   16eb4:	mov	r1, #0
   16eb8:	mov	r4, r2
   16ebc:	str	r6, [sp, #8]
   16ec0:	str	lr, [sp, #12]
   16ec4:	bl	11080 <setlocale@plt>
   16ec8:	subs	r6, r0, #0
   16ecc:	beq	16f4c <__assert_fail@plt+0x5e48>
   16ed0:	bl	10fd8 <strlen@plt>
   16ed4:	cmp	r4, r0
   16ed8:	bhi	16ef8 <__assert_fail@plt+0x5df4>
   16edc:	cmp	r4, #0
   16ee0:	moveq	r0, #34	; 0x22
   16ee4:	bne	16f1c <__assert_fail@plt+0x5e18>
   16ee8:	ldrd	r4, [sp]
   16eec:	ldr	r6, [sp, #8]
   16ef0:	add	sp, sp, #12
   16ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ef8:	add	r2, r0, #1
   16efc:	mov	r1, r6
   16f00:	mov	r0, r5
   16f04:	bl	10eb8 <memcpy@plt>
   16f08:	ldrd	r4, [sp]
   16f0c:	mov	r0, #0
   16f10:	ldr	r6, [sp, #8]
   16f14:	add	sp, sp, #12
   16f18:	pop	{pc}		; (ldr pc, [sp], #4)
   16f1c:	sub	r4, r4, #1
   16f20:	mov	r1, r6
   16f24:	mov	r2, r4
   16f28:	mov	r0, r5
   16f2c:	bl	10eb8 <memcpy@plt>
   16f30:	mov	r3, #0
   16f34:	mov	r0, #34	; 0x22
   16f38:	strb	r3, [r5, r4]
   16f3c:	ldrd	r4, [sp]
   16f40:	ldr	r6, [sp, #8]
   16f44:	add	sp, sp, #12
   16f48:	pop	{pc}		; (ldr pc, [sp], #4)
   16f4c:	cmp	r4, #0
   16f50:	mov	r0, #22
   16f54:	strbne	r6, [r5]
   16f58:	ldrd	r4, [sp]
   16f5c:	ldr	r6, [sp, #8]
   16f60:	add	sp, sp, #12
   16f64:	pop	{pc}		; (ldr pc, [sp], #4)
   16f68:	mov	r1, #0
   16f6c:	b	11080 <setlocale@plt>
   16f70:	eor	r1, r1, #-2147483648	; 0x80000000
   16f74:	b	16f7c <__assert_fail@plt+0x5e78>
   16f78:	eor	r3, r3, #-2147483648	; 0x80000000
   16f7c:	push	{r4, r5, lr}
   16f80:	lsl	r4, r1, #1
   16f84:	lsl	r5, r3, #1
   16f88:	teq	r4, r5
   16f8c:	teqeq	r0, r2
   16f90:	orrsne	ip, r4, r0
   16f94:	orrsne	ip, r5, r2
   16f98:	mvnsne	ip, r4, asr #21
   16f9c:	mvnsne	ip, r5, asr #21
   16fa0:	beq	1718c <__assert_fail@plt+0x6088>
   16fa4:	lsr	r4, r4, #21
   16fa8:	rsbs	r5, r4, r5, lsr #21
   16fac:	rsblt	r5, r5, #0
   16fb0:	ble	16fd0 <__assert_fail@plt+0x5ecc>
   16fb4:	add	r4, r4, r5
   16fb8:	eor	r2, r0, r2
   16fbc:	eor	r3, r1, r3
   16fc0:	eor	r0, r2, r0
   16fc4:	eor	r1, r3, r1
   16fc8:	eor	r2, r0, r2
   16fcc:	eor	r3, r1, r3
   16fd0:	cmp	r5, #54	; 0x36
   16fd4:	pophi	{r4, r5, pc}
   16fd8:	tst	r1, #-2147483648	; 0x80000000
   16fdc:	lsl	r1, r1, #12
   16fe0:	mov	ip, #1048576	; 0x100000
   16fe4:	orr	r1, ip, r1, lsr #12
   16fe8:	beq	16ff4 <__assert_fail@plt+0x5ef0>
   16fec:	rsbs	r0, r0, #0
   16ff0:	rsc	r1, r1, #0
   16ff4:	tst	r3, #-2147483648	; 0x80000000
   16ff8:	lsl	r3, r3, #12
   16ffc:	orr	r3, ip, r3, lsr #12
   17000:	beq	1700c <__assert_fail@plt+0x5f08>
   17004:	rsbs	r2, r2, #0
   17008:	rsc	r3, r3, #0
   1700c:	teq	r4, r5
   17010:	beq	17174 <__assert_fail@plt+0x6070>
   17014:	sub	r4, r4, #1
   17018:	rsbs	lr, r5, #32
   1701c:	blt	17038 <__assert_fail@plt+0x5f34>
   17020:	lsl	ip, r2, lr
   17024:	adds	r0, r0, r2, lsr r5
   17028:	adc	r1, r1, #0
   1702c:	adds	r0, r0, r3, lsl lr
   17030:	adcs	r1, r1, r3, asr r5
   17034:	b	17054 <__assert_fail@plt+0x5f50>
   17038:	sub	r5, r5, #32
   1703c:	add	lr, lr, #32
   17040:	cmp	r2, #1
   17044:	lsl	ip, r3, lr
   17048:	orrcs	ip, ip, #2
   1704c:	adds	r0, r0, r3, asr r5
   17050:	adcs	r1, r1, r3, asr #31
   17054:	and	r5, r1, #-2147483648	; 0x80000000
   17058:	bpl	17068 <__assert_fail@plt+0x5f64>
   1705c:	rsbs	ip, ip, #0
   17060:	rscs	r0, r0, #0
   17064:	rsc	r1, r1, #0
   17068:	cmp	r1, #1048576	; 0x100000
   1706c:	bcc	170ac <__assert_fail@plt+0x5fa8>
   17070:	cmp	r1, #2097152	; 0x200000
   17074:	bcc	17094 <__assert_fail@plt+0x5f90>
   17078:	lsrs	r1, r1, #1
   1707c:	rrxs	r0, r0
   17080:	rrx	ip, ip
   17084:	add	r4, r4, #1
   17088:	lsl	r2, r4, #21
   1708c:	cmn	r2, #4194304	; 0x400000
   17090:	bcs	171ec <__assert_fail@plt+0x60e8>
   17094:	cmp	ip, #-2147483648	; 0x80000000
   17098:	lsrseq	ip, r0, #1
   1709c:	adcs	r0, r0, #0
   170a0:	adc	r1, r1, r4, lsl #20
   170a4:	orr	r1, r1, r5
   170a8:	pop	{r4, r5, pc}
   170ac:	lsls	ip, ip, #1
   170b0:	adcs	r0, r0, r0
   170b4:	adc	r1, r1, r1
   170b8:	tst	r1, #1048576	; 0x100000
   170bc:	sub	r4, r4, #1
   170c0:	bne	17094 <__assert_fail@plt+0x5f90>
   170c4:	teq	r1, #0
   170c8:	moveq	r1, r0
   170cc:	moveq	r0, #0
   170d0:	clz	r3, r1
   170d4:	addeq	r3, r3, #32
   170d8:	sub	r3, r3, #11
   170dc:	subs	r2, r3, #32
   170e0:	bge	17104 <__assert_fail@plt+0x6000>
   170e4:	adds	r2, r2, #12
   170e8:	ble	17100 <__assert_fail@plt+0x5ffc>
   170ec:	add	ip, r2, #20
   170f0:	rsb	r2, r2, #12
   170f4:	lsl	r0, r1, ip
   170f8:	lsr	r1, r1, r2
   170fc:	b	17114 <__assert_fail@plt+0x6010>
   17100:	add	r2, r2, #20
   17104:	rsble	ip, r2, #32
   17108:	lsl	r1, r1, r2
   1710c:	orrle	r1, r1, r0, lsr ip
   17110:	lslle	r0, r0, r2
   17114:	subs	r4, r4, r3
   17118:	addge	r1, r1, r4, lsl #20
   1711c:	orrge	r1, r1, r5
   17120:	popge	{r4, r5, pc}
   17124:	mvn	r4, r4
   17128:	subs	r4, r4, #31
   1712c:	bge	17168 <__assert_fail@plt+0x6064>
   17130:	adds	r4, r4, #12
   17134:	bgt	17150 <__assert_fail@plt+0x604c>
   17138:	add	r4, r4, #20
   1713c:	rsb	r2, r4, #32
   17140:	lsr	r0, r0, r4
   17144:	orr	r0, r0, r1, lsl r2
   17148:	orr	r1, r5, r1, lsr r4
   1714c:	pop	{r4, r5, pc}
   17150:	rsb	r4, r4, #12
   17154:	rsb	r2, r4, #32
   17158:	lsr	r0, r0, r2
   1715c:	orr	r0, r0, r1, lsl r4
   17160:	mov	r1, r5
   17164:	pop	{r4, r5, pc}
   17168:	lsr	r0, r1, r4
   1716c:	mov	r1, r5
   17170:	pop	{r4, r5, pc}
   17174:	teq	r4, #0
   17178:	eor	r3, r3, #1048576	; 0x100000
   1717c:	eoreq	r1, r1, #1048576	; 0x100000
   17180:	addeq	r4, r4, #1
   17184:	subne	r5, r5, #1
   17188:	b	17014 <__assert_fail@plt+0x5f10>
   1718c:	mvns	ip, r4, asr #21
   17190:	mvnsne	ip, r5, asr #21
   17194:	beq	171fc <__assert_fail@plt+0x60f8>
   17198:	teq	r4, r5
   1719c:	teqeq	r0, r2
   171a0:	beq	171b4 <__assert_fail@plt+0x60b0>
   171a4:	orrs	ip, r4, r0
   171a8:	moveq	r1, r3
   171ac:	moveq	r0, r2
   171b0:	pop	{r4, r5, pc}
   171b4:	teq	r1, r3
   171b8:	movne	r1, #0
   171bc:	movne	r0, #0
   171c0:	popne	{r4, r5, pc}
   171c4:	lsrs	ip, r4, #21
   171c8:	bne	171dc <__assert_fail@plt+0x60d8>
   171cc:	lsls	r0, r0, #1
   171d0:	adcs	r1, r1, r1
   171d4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   171d8:	pop	{r4, r5, pc}
   171dc:	adds	r4, r4, #4194304	; 0x400000
   171e0:	addcc	r1, r1, #1048576	; 0x100000
   171e4:	popcc	{r4, r5, pc}
   171e8:	and	r5, r1, #-2147483648	; 0x80000000
   171ec:	orr	r1, r5, #2130706432	; 0x7f000000
   171f0:	orr	r1, r1, #15728640	; 0xf00000
   171f4:	mov	r0, #0
   171f8:	pop	{r4, r5, pc}
   171fc:	mvns	ip, r4, asr #21
   17200:	movne	r1, r3
   17204:	movne	r0, r2
   17208:	mvnseq	ip, r5, asr #21
   1720c:	movne	r3, r1
   17210:	movne	r2, r0
   17214:	orrs	r4, r0, r1, lsl #12
   17218:	orrseq	r5, r2, r3, lsl #12
   1721c:	teqeq	r1, r3
   17220:	orrne	r1, r1, #524288	; 0x80000
   17224:	pop	{r4, r5, pc}
   17228:	teq	r0, #0
   1722c:	moveq	r1, #0
   17230:	bxeq	lr
   17234:	push	{r4, r5, lr}
   17238:	mov	r4, #1024	; 0x400
   1723c:	add	r4, r4, #50	; 0x32
   17240:	mov	r5, #0
   17244:	mov	r1, #0
   17248:	b	170c4 <__assert_fail@plt+0x5fc0>
   1724c:	teq	r0, #0
   17250:	moveq	r1, #0
   17254:	bxeq	lr
   17258:	push	{r4, r5, lr}
   1725c:	mov	r4, #1024	; 0x400
   17260:	add	r4, r4, #50	; 0x32
   17264:	ands	r5, r0, #-2147483648	; 0x80000000
   17268:	rsbmi	r0, r0, #0
   1726c:	mov	r1, #0
   17270:	b	170c4 <__assert_fail@plt+0x5fc0>
   17274:	lsls	r2, r0, #1
   17278:	asr	r1, r2, #3
   1727c:	rrx	r1, r1
   17280:	lsl	r0, r2, #28
   17284:	andsne	r3, r2, #-16777216	; 0xff000000
   17288:	teqne	r3, #-16777216	; 0xff000000
   1728c:	eorne	r1, r1, #939524096	; 0x38000000
   17290:	bxne	lr
   17294:	bics	r2, r2, #-16777216	; 0xff000000
   17298:	bxeq	lr
   1729c:	teq	r3, #-16777216	; 0xff000000
   172a0:	orreq	r1, r1, #524288	; 0x80000
   172a4:	bxeq	lr
   172a8:	push	{r4, r5, lr}
   172ac:	mov	r4, #896	; 0x380
   172b0:	and	r5, r1, #-2147483648	; 0x80000000
   172b4:	bic	r1, r1, #-2147483648	; 0x80000000
   172b8:	b	170c4 <__assert_fail@plt+0x5fc0>
   172bc:	orrs	r2, r0, r1
   172c0:	bxeq	lr
   172c4:	push	{r4, r5, lr}
   172c8:	mov	r5, #0
   172cc:	b	172ec <__assert_fail@plt+0x61e8>
   172d0:	orrs	r2, r0, r1
   172d4:	bxeq	lr
   172d8:	push	{r4, r5, lr}
   172dc:	ands	r5, r1, #-2147483648	; 0x80000000
   172e0:	bpl	172ec <__assert_fail@plt+0x61e8>
   172e4:	rsbs	r0, r0, #0
   172e8:	rsc	r1, r1, #0
   172ec:	mov	r4, #1024	; 0x400
   172f0:	add	r4, r4, #50	; 0x32
   172f4:	lsrs	ip, r1, #22
   172f8:	beq	17068 <__assert_fail@plt+0x5f64>
   172fc:	mov	r2, #3
   17300:	lsrs	ip, ip, #3
   17304:	addne	r2, r2, #3
   17308:	lsrs	ip, ip, #3
   1730c:	addne	r2, r2, #3
   17310:	add	r2, r2, ip, lsr #3
   17314:	rsb	r3, r2, #32
   17318:	lsl	ip, r0, r3
   1731c:	lsr	r0, r0, r2
   17320:	orr	r0, r0, r1, lsl r3
   17324:	lsr	r1, r1, r2
   17328:	add	r4, r4, r2
   1732c:	b	17068 <__assert_fail@plt+0x5f64>
   17330:	cmp	r3, #0
   17334:	cmpeq	r2, #0
   17338:	bne	17350 <__assert_fail@plt+0x624c>
   1733c:	cmp	r1, #0
   17340:	cmpeq	r0, #0
   17344:	mvnne	r1, #0
   17348:	mvnne	r0, #0
   1734c:	b	1736c <__assert_fail@plt+0x6268>
   17350:	sub	sp, sp, #8
   17354:	push	{sp, lr}
   17358:	bl	173c0 <__assert_fail@plt+0x62bc>
   1735c:	ldr	lr, [sp, #4]
   17360:	add	sp, sp, #8
   17364:	pop	{r2, r3}
   17368:	bx	lr
   1736c:	push	{r1, lr}
   17370:	mov	r0, #8
   17374:	bl	10e64 <raise@plt>
   17378:	pop	{r1, pc}
   1737c:	andeq	r0, r0, r0
   17380:	vmov	d6, r0, r1
   17384:	vldr	d7, [pc, #36]	; 173b0 <__assert_fail@plt+0x62ac>
   17388:	vldr	d5, [pc, #40]	; 173b8 <__assert_fail@plt+0x62b4>
   1738c:	vmul.f64	d7, d6, d7
   17390:	vcvt.u32.f64	s14, d7
   17394:	vcvt.f64.u32	d4, s14
   17398:	vmov	r1, s14
   1739c:	vmls.f64	d6, d4, d5
   173a0:	vcvt.u32.f64	s15, d6
   173a4:	vmov	r0, s15
   173a8:	bx	lr
   173ac:	nop			; (mov r0, r0)
   173b0:	andeq	r0, r0, r0
   173b4:	ldclcc	0, cr0, [r0]
   173b8:	andeq	r0, r0, r0
   173bc:	mvnsmi	r0, r0
   173c0:	cmp	r1, r3
   173c4:	cmpeq	r0, r2
   173c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173cc:	mov	r4, r0
   173d0:	movcc	r0, #0
   173d4:	mov	r5, r1
   173d8:	ldr	lr, [sp, #36]	; 0x24
   173dc:	movcc	r1, r0
   173e0:	bcc	174dc <__assert_fail@plt+0x63d8>
   173e4:	cmp	r3, #0
   173e8:	clzeq	ip, r2
   173ec:	clzne	ip, r3
   173f0:	addeq	ip, ip, #32
   173f4:	cmp	r5, #0
   173f8:	clzeq	r1, r4
   173fc:	addeq	r1, r1, #32
   17400:	clzne	r1, r5
   17404:	sub	ip, ip, r1
   17408:	sub	sl, ip, #32
   1740c:	lsl	r9, r3, ip
   17410:	rsb	fp, ip, #32
   17414:	orr	r9, r9, r2, lsl sl
   17418:	orr	r9, r9, r2, lsr fp
   1741c:	lsl	r8, r2, ip
   17420:	cmp	r5, r9
   17424:	cmpeq	r4, r8
   17428:	movcc	r0, #0
   1742c:	movcc	r1, r0
   17430:	bcc	1744c <__assert_fail@plt+0x6348>
   17434:	mov	r0, #1
   17438:	subs	r4, r4, r8
   1743c:	lsl	r1, r0, sl
   17440:	orr	r1, r1, r0, lsr fp
   17444:	lsl	r0, r0, ip
   17448:	sbc	r5, r5, r9
   1744c:	cmp	ip, #0
   17450:	beq	174dc <__assert_fail@plt+0x63d8>
   17454:	lsr	r6, r8, #1
   17458:	orr	r6, r6, r9, lsl #31
   1745c:	lsr	r7, r9, #1
   17460:	mov	r2, ip
   17464:	b	17488 <__assert_fail@plt+0x6384>
   17468:	subs	r3, r4, r6
   1746c:	sbc	r8, r5, r7
   17470:	adds	r3, r3, r3
   17474:	adc	r8, r8, r8
   17478:	adds	r4, r3, #1
   1747c:	adc	r5, r8, #0
   17480:	subs	r2, r2, #1
   17484:	beq	174a4 <__assert_fail@plt+0x63a0>
   17488:	cmp	r5, r7
   1748c:	cmpeq	r4, r6
   17490:	bcs	17468 <__assert_fail@plt+0x6364>
   17494:	adds	r4, r4, r4
   17498:	adc	r5, r5, r5
   1749c:	subs	r2, r2, #1
   174a0:	bne	17488 <__assert_fail@plt+0x6384>
   174a4:	lsr	r3, r4, ip
   174a8:	orr	r3, r3, r5, lsl fp
   174ac:	lsr	r2, r5, ip
   174b0:	orr	r3, r3, r5, lsr sl
   174b4:	adds	r0, r0, r4
   174b8:	mov	r4, r3
   174bc:	lsl	r3, r2, ip
   174c0:	orr	r3, r3, r4, lsl sl
   174c4:	lsl	ip, r4, ip
   174c8:	orr	r3, r3, r4, lsr fp
   174cc:	adc	r1, r1, r5
   174d0:	subs	r0, r0, ip
   174d4:	mov	r5, r2
   174d8:	sbc	r1, r1, r3
   174dc:	cmp	lr, #0
   174e0:	strdne	r4, [lr]
   174e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174ec:	mov	r7, r0
   174f0:	ldr	r6, [pc, #72]	; 17540 <__assert_fail@plt+0x643c>
   174f4:	ldr	r5, [pc, #72]	; 17544 <__assert_fail@plt+0x6440>
   174f8:	add	r6, pc, r6
   174fc:	add	r5, pc, r5
   17500:	sub	r6, r6, r5
   17504:	mov	r8, r1
   17508:	mov	r9, r2
   1750c:	bl	10e20 <fdopen@plt-0x20>
   17510:	asrs	r6, r6, #2
   17514:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17518:	mov	r4, #0
   1751c:	add	r4, r4, #1
   17520:	ldr	r3, [r5], #4
   17524:	mov	r2, r9
   17528:	mov	r1, r8
   1752c:	mov	r0, r7
   17530:	blx	r3
   17534:	cmp	r6, r4
   17538:	bne	1751c <__assert_fail@plt+0x6418>
   1753c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17540:	andeq	r1, r1, r4, lsl sl
   17544:	andeq	r1, r1, ip, lsl #20
   17548:	bx	lr
   1754c:	ldr	r3, [pc, #12]	; 17560 <__assert_fail@plt+0x645c>
   17550:	mov	r1, #0
   17554:	add	r3, pc, r3
   17558:	ldr	r2, [r3]
   1755c:	b	11008 <__cxa_atexit@plt>
   17560:	andeq	r1, r1, r8, lsr #23

Disassembly of section .fini:

00017564 <.fini>:
   17564:	push	{r3, lr}
   17568:	pop	{r3, pc}
