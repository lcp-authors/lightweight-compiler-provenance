
../repos/prog2/0.7:     file format elf32-littlearm


Disassembly of section .init:

000105b4 <.init>:
   105b4:	push	{r3, lr}
   105b8:	bl	106a8 <_start@@Base+0x3c>
   105bc:	pop	{r3, pc}

Disassembly of section .plt:

000105c0 <printf@plt-0x14>:
   105c0:	push	{lr}		; (str lr, [sp, #-4]!)
   105c4:	ldr	lr, [pc, #4]	; 105d0 <printf@plt-0x4>
   105c8:	add	lr, pc, lr
   105cc:	ldr	pc, [lr, #8]!
   105d0:	andeq	r0, r1, r0, lsr sl

000105d4 <printf@plt>:
   105d4:	add	ip, pc, #0, 12
   105d8:	add	ip, ip, #16, 20	; 0x10000
   105dc:	ldr	pc, [ip, #2608]!	; 0xa30

000105e0 <__libc_start_main@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #16, 20	; 0x10000
   105e8:	ldr	pc, [ip, #2600]!	; 0xa28

000105ec <__gmon_start__@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #16, 20	; 0x10000
   105f4:	ldr	pc, [ip, #2592]!	; 0xa20

000105f8 <memset@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #16, 20	; 0x10000
   10600:	ldr	pc, [ip, #2584]!	; 0xa18

00010604 <__isoc99_scanf@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2576]!	; 0xa10

00010610 <abort@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2568]!	; 0xa08

Disassembly of section .text:

00010620 <main@@Base>:
   10620:	push	{lr}		; (str lr, [sp, #-4]!)
   10624:	sub	sp, sp, #404	; 0x194
   10628:	mov	r2, #400	; 0x190
   1062c:	mov	r1, #0
   10630:	mov	r0, sp
   10634:	bl	105f8 <memset@plt>
   10638:	mov	r0, sp
   1063c:	bl	107c8 <lernotas@@Base>
   10640:	mov	r1, r0
   10644:	mov	r0, sp
   10648:	bl	10760 <media@@Base>
   1064c:	vcvt.f64.f32	d7, s0
   10650:	ldr	r0, [pc, #16]	; 10668 <main@@Base+0x48>
   10654:	vmov	r2, r3, d7
   10658:	bl	105d4 <printf@plt>
   1065c:	mov	r0, #0
   10660:	add	sp, sp, #404	; 0x194
   10664:	pop	{pc}		; (ldr pc, [sp], #4)
   10668:	andeq	r0, r1, r2, asr #17

0001066c <_start@@Base>:
   1066c:	mov	fp, #0
   10670:	mov	lr, #0
   10674:	pop	{r1}		; (ldr r1, [sp], #4)
   10678:	mov	r2, sp
   1067c:	push	{r2}		; (str r2, [sp, #-4]!)
   10680:	push	{r0}		; (str r0, [sp, #-4]!)
   10684:	ldr	ip, [pc, #16]	; 1069c <_start@@Base+0x30>
   10688:	push	{ip}		; (str ip, [sp, #-4]!)
   1068c:	ldr	r0, [pc, #12]	; 106a0 <_start@@Base+0x34>
   10690:	ldr	r3, [pc, #12]	; 106a4 <_start@@Base+0x38>
   10694:	bl	105e0 <__libc_start_main@plt>
   10698:	bl	10610 <abort@plt>
   1069c:	andeq	r0, r1, ip, lsr #17
   106a0:	andeq	r0, r1, r0, lsr #12
   106a4:	andeq	r0, r1, ip, asr #16
   106a8:	ldr	r3, [pc, #20]	; 106c4 <_start@@Base+0x58>
   106ac:	ldr	r2, [pc, #20]	; 106c8 <_start@@Base+0x5c>
   106b0:	add	r3, pc, r3
   106b4:	ldr	r2, [r3, r2]
   106b8:	cmp	r2, #0
   106bc:	bxeq	lr
   106c0:	b	105ec <__gmon_start__@plt>
   106c4:	andeq	r0, r1, r8, asr #18
   106c8:	andeq	r0, r0, r4, lsr #32
   106cc:	ldr	r0, [pc, #24]	; 106ec <_start@@Base+0x80>
   106d0:	ldr	r3, [pc, #24]	; 106f0 <_start@@Base+0x84>
   106d4:	cmp	r3, r0
   106d8:	bxeq	lr
   106dc:	ldr	r3, [pc, #16]	; 106f4 <_start@@Base+0x88>
   106e0:	cmp	r3, #0
   106e4:	bxeq	lr
   106e8:	bx	r3
   106ec:	andeq	r1, r2, r0, lsr r0
   106f0:	andeq	r1, r2, r0, lsr r0
   106f4:	andeq	r0, r0, r0
   106f8:	ldr	r0, [pc, #36]	; 10724 <_start@@Base+0xb8>
   106fc:	ldr	r1, [pc, #36]	; 10728 <_start@@Base+0xbc>
   10700:	sub	r1, r1, r0
   10704:	asr	r1, r1, #2
   10708:	add	r1, r1, r1, lsr #31
   1070c:	asrs	r1, r1, #1
   10710:	bxeq	lr
   10714:	ldr	r3, [pc, #16]	; 1072c <_start@@Base+0xc0>
   10718:	cmp	r3, #0
   1071c:	bxeq	lr
   10720:	bx	r3
   10724:	andeq	r1, r2, r0, lsr r0
   10728:	andeq	r1, r2, r0, lsr r0
   1072c:	andeq	r0, r0, r0
   10730:	push	{r4, lr}
   10734:	ldr	r4, [pc, #24]	; 10754 <_start@@Base+0xe8>
   10738:	ldrb	r3, [r4]
   1073c:	cmp	r3, #0
   10740:	popne	{r4, pc}
   10744:	bl	106cc <_start@@Base+0x60>
   10748:	mov	r3, #1
   1074c:	strb	r3, [r4]
   10750:	pop	{r4, pc}
   10754:	andeq	r1, r2, r0, lsr r0
   10758:	b	106f8 <_start@@Base+0x8c>
   1075c:	andeq	r0, r0, r0

00010760 <media@@Base>:
   10760:	vldr	s15, [pc, #88]	; 107c0 <media@@Base+0x60>
   10764:	mov	r3, #0
   10768:	vldr	d5, [pc, #72]	; 107b8 <media@@Base+0x58>
   1076c:	vldr	s13, [pc, #80]	; 107c4 <media@@Base+0x64>
   10770:	cmp	r3, r1
   10774:	blt	10788 <media@@Base+0x28>
   10778:	vmov	s14, r1
   1077c:	vcvt.f32.s32	s0, s14
   10780:	vdiv.f32	s0, s15, s0
   10784:	bx	lr
   10788:	vldmia	r0!, {s14}
   1078c:	vcvt.f64.f32	d4, s14
   10790:	vcmpe.f64	d4, d5
   10794:	vmrs	APSR_nzcv, fpscr
   10798:	blt	107ac <media@@Base+0x4c>
   1079c:	vcmpe.f32	s14, s13
   107a0:	vmrs	APSR_nzcv, fpscr
   107a4:	vaddmi.f32	s15, s15, s13
   107a8:	bmi	107b0 <media@@Base+0x50>
   107ac:	vadd.f32	s15, s15, s14
   107b0:	add	r3, r3, #1
   107b4:	b	10770 <media@@Base+0x10>
   107b8:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   107bc:	mlami	r2, r9, r9, r9
   107c0:	andeq	r0, r0, r0
   107c4:	tstmi	r8, r0

000107c8 <lernotas@@Base>:
   107c8:	push	{r4, r5, r6, lr}
   107cc:	mov	r5, r0
   107d0:	mov	r4, #0
   107d4:	vpush	{d8-d9}
   107d8:	sub	sp, sp, #8
   107dc:	vldr	d8, [pc, #84]	; 10838 <lernotas@@Base+0x70>
   107e0:	vldr	d9, [pc, #88]	; 10840 <lernotas@@Base+0x78>
   107e4:	ldr	r6, [pc, #92]	; 10848 <lernotas@@Base+0x80>
   107e8:	add	r2, sp, #4
   107ec:	mov	r1, sp
   107f0:	mov	r0, r6
   107f4:	bl	10604 <__isoc99_scanf@plt>
   107f8:	cmp	r0, #2
   107fc:	beq	10810 <lernotas@@Base+0x48>
   10800:	mov	r0, r4
   10804:	add	sp, sp, #8
   10808:	vpop	{d8-d9}
   1080c:	pop	{r4, r5, r6, pc}
   10810:	vldr	s12, [sp]
   10814:	add	r4, r4, #1
   10818:	vldr	s14, [sp, #4]
   1081c:	vcvt.f64.f32	d6, s12
   10820:	vcvt.f64.f32	d7, s14
   10824:	vmul.f64	d7, d7, d9
   10828:	vmla.f64	d7, d6, d8
   1082c:	vcvt.f32.f64	s14, d7
   10830:	vstmia	r5!, {s14}
   10834:	b	107e8 <lernotas@@Base+0x20>
   10838:	teqcc	r3, #-872415232	; 0xcc000000
   1083c:	svccc	0x00e33333
   10840:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   10844:	svccc	0x00d99999
   10848:			; <UNDEFINED> instruction: 0x000108bc

0001084c <__libc_csu_init@@Base>:
   1084c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10850:	mov	r7, r0
   10854:	ldr	r6, [pc, #72]	; 108a4 <__libc_csu_init@@Base+0x58>
   10858:	ldr	r5, [pc, #72]	; 108a8 <__libc_csu_init@@Base+0x5c>
   1085c:	add	r6, pc, r6
   10860:	add	r5, pc, r5
   10864:	sub	r6, r6, r5
   10868:	mov	r8, r1
   1086c:	mov	r9, r2
   10870:	bl	105b4 <printf@plt-0x20>
   10874:	asrs	r6, r6, #2
   10878:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1087c:	mov	r4, #0
   10880:	add	r4, r4, #1
   10884:	ldr	r3, [r5], #4
   10888:	mov	r2, r9
   1088c:	mov	r1, r8
   10890:	mov	r0, r7
   10894:	blx	r3
   10898:	cmp	r6, r4
   1089c:	bne	10880 <__libc_csu_init@@Base+0x34>
   108a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108a4:			; <UNDEFINED> instruction: 0x000106b0
   108a8:	andeq	r0, r1, r8, lsr #13

000108ac <__libc_csu_fini@@Base>:
   108ac:	bx	lr

Disassembly of section .fini:

000108b0 <.fini>:
   108b0:	push	{r3, lr}
   108b4:	pop	{r3, pc}
