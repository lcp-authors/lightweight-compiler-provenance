
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

00010648 <.init>:
   10648:	push	{r3, lr}
   1064c:	bl	1071c <_start@@Base+0x3c>
   10650:	pop	{r3, pc}

Disassembly of section .plt:

00010654 <printf@plt-0x14>:
   10654:	push	{lr}		; (str lr, [sp, #-4]!)
   10658:	ldr	lr, [pc, #4]	; 10664 <printf@plt-0x4>
   1065c:	add	lr, pc, lr
   10660:	ldr	pc, [lr, #8]!
   10664:	muleq	r1, ip, r9

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2460]!	; 0x99c

00010674 <fopen@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2452]!	; 0x994

00010680 <puts@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2444]!	; 0x98c

0001068c <__libc_start_main@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2436]!	; 0x984

00010698 <__ctype_tolower_loc@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2428]!	; 0x97c

000106a4 <__gmon_start__@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2420]!	; 0x974

000106b0 <memset@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2412]!	; 0x96c

000106bc <fclose@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2404]!	; 0x964

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2396]!	; 0x95c

000106d4 <getc@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2388]!	; 0x954

Disassembly of section .text:

000106e0 <_start@@Base>:
   106e0:	mov	fp, #0
   106e4:	mov	lr, #0
   106e8:	pop	{r1}		; (ldr r1, [sp], #4)
   106ec:	mov	r2, sp
   106f0:	push	{r2}		; (str r2, [sp, #-4]!)
   106f4:	push	{r0}		; (str r0, [sp, #-4]!)
   106f8:	ldr	ip, [pc, #16]	; 10710 <_start@@Base+0x30>
   106fc:	push	{ip}		; (str ip, [sp, #-4]!)
   10700:	ldr	r0, [pc, #12]	; 10714 <_start@@Base+0x34>
   10704:	ldr	r3, [pc, #12]	; 10718 <_start@@Base+0x38>
   10708:	bl	1068c <__libc_start_main@plt>
   1070c:	bl	106c8 <abort@plt>
   10710:	andeq	r0, r1, r4, lsr #22
   10714:	andeq	r0, r1, r8, asr r8
   10718:	andeq	r0, r1, r4, asr #21
   1071c:	ldr	r3, [pc, #20]	; 10738 <_start@@Base+0x58>
   10720:	ldr	r2, [pc, #20]	; 1073c <_start@@Base+0x5c>
   10724:	add	r3, pc, r3
   10728:	ldr	r2, [r3, r2]
   1072c:	cmp	r2, #0
   10730:	bxeq	lr
   10734:	b	106a4 <__gmon_start__@plt>
   10738:	ldrdeq	r0, [r1], -r4
   1073c:	andeq	r0, r0, r4, lsr r0
   10740:	ldr	r3, [pc, #28]	; 10764 <_start@@Base+0x84>
   10744:	ldr	r0, [pc, #28]	; 10768 <_start@@Base+0x88>
   10748:	sub	r3, r3, r0
   1074c:	cmp	r3, #6
   10750:	bxls	lr
   10754:	ldr	r3, [pc, #16]	; 1076c <_start@@Base+0x8c>
   10758:	cmp	r3, #0
   1075c:	bxeq	lr
   10760:	bx	r3
   10764:	andeq	r1, r2, r3, asr #32
   10768:	andeq	r1, r2, r0, asr #32
   1076c:	andeq	r0, r0, r0
   10770:	ldr	r1, [pc, #36]	; 1079c <_start@@Base+0xbc>
   10774:	ldr	r0, [pc, #36]	; 107a0 <_start@@Base+0xc0>
   10778:	sub	r1, r1, r0
   1077c:	asr	r1, r1, #2
   10780:	add	r1, r1, r1, lsr #31
   10784:	asrs	r1, r1, #1
   10788:	bxeq	lr
   1078c:	ldr	r3, [pc, #16]	; 107a4 <_start@@Base+0xc4>
   10790:	cmp	r3, #0
   10794:	bxeq	lr
   10798:	bx	r3
   1079c:	andeq	r1, r2, r0, asr #32
   107a0:	andeq	r1, r2, r0, asr #32
   107a4:	andeq	r0, r0, r0
   107a8:	push	{r4, lr}
   107ac:	ldr	r4, [pc, #24]	; 107cc <_start@@Base+0xec>
   107b0:	ldrb	r3, [r4]
   107b4:	cmp	r3, #0
   107b8:	popne	{r4, pc}
   107bc:	bl	10740 <_start@@Base+0x60>
   107c0:	mov	r3, #1
   107c4:	strb	r3, [r4]
   107c8:	pop	{r4, pc}
   107cc:	andeq	r1, r2, r0, asr #32
   107d0:	ldr	r0, [pc, #40]	; 10800 <_start@@Base+0x120>
   107d4:	ldr	r3, [r0]
   107d8:	cmp	r3, #0
   107dc:	bne	107e4 <_start@@Base+0x104>
   107e0:	b	10770 <_start@@Base+0x90>
   107e4:	ldr	r3, [pc, #24]	; 10804 <_start@@Base+0x124>
   107e8:	cmp	r3, #0
   107ec:	beq	107e0 <_start@@Base+0x100>
   107f0:	push	{r4, lr}
   107f4:	blx	r3
   107f8:	pop	{r4, lr}
   107fc:	b	10770 <_start@@Base+0x90>
   10800:	andeq	r0, r2, r4, lsl pc
   10804:	andeq	r0, r0, r0

00010808 <in_array@@Base>:
   10808:	cmp	r2, #0
   1080c:	blt	10848 <in_array@@Base+0x40>
   10810:	ldr	r3, [r1]
   10814:	cmp	r0, r3
   10818:	beq	10850 <in_array@@Base+0x48>
   1081c:	mov	r3, #0
   10820:	add	r3, r3, #1
   10824:	cmp	r2, r3
   10828:	blt	10840 <in_array@@Base+0x38>
   1082c:	ldr	ip, [r1, #4]!
   10830:	cmp	ip, r0
   10834:	bne	10820 <in_array@@Base+0x18>
   10838:	mov	r0, #1
   1083c:	bx	lr
   10840:	mov	r0, #0
   10844:	bx	lr
   10848:	mov	r0, #0
   1084c:	bx	lr
   10850:	mov	r0, #1
   10854:	bx	lr

00010858 <main@@Base>:
   10858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1085c:	vpush	{d8}
   10860:	sub	sp, sp, #204	; 0xcc
   10864:	ldr	ip, [pc, #572]	; 10aa8 <main@@Base+0x250>
   10868:	add	lr, sp, #168	; 0xa8
   1086c:	mov	r4, ip
   10870:	ldm	r4!, {r0, r1, r2, r3}
   10874:	stmia	lr!, {r0, r1, r2, r3}
   10878:	ldm	r4, {r0, r1, r2, r3}
   1087c:	stm	lr, {r0, r1, r2, r3}
   10880:	add	lr, sp, #152	; 0x98
   10884:	add	r3, ip, #32
   10888:	ldm	r3, {r0, r1, r2, r3}
   1088c:	stm	lr, {r0, r1, r2, r3}
   10890:	mov	r3, #205	; 0xcd
   10894:	str	r3, [sp, #144]	; 0x90
   10898:	mov	r3, #237	; 0xed
   1089c:	str	r3, [sp, #148]	; 0x94
   108a0:	add	lr, sp, #120	; 0x78
   108a4:	add	ip, ip, #48	; 0x30
   108a8:	ldm	ip!, {r0, r1, r2, r3}
   108ac:	stmia	lr!, {r0, r1, r2, r3}
   108b0:	ldm	ip, {r0, r1}
   108b4:	stm	lr, {r0, r1}
   108b8:	mov	r3, #218	; 0xda
   108bc:	str	r3, [sp, #112]	; 0x70
   108c0:	mov	r3, #250	; 0xfa
   108c4:	str	r3, [sp, #116]	; 0x74
   108c8:	mov	r3, #199	; 0xc7
   108cc:	str	r3, [sp, #104]	; 0x68
   108d0:	mov	r3, #231	; 0xe7
   108d4:	str	r3, [sp, #108]	; 0x6c
   108d8:	ldr	r1, [pc, #460]	; 10aac <main@@Base+0x254>
   108dc:	ldr	r0, [pc, #460]	; 10ab0 <main@@Base+0x258>
   108e0:	bl	10674 <fopen@plt>
   108e4:	mov	r5, r0
   108e8:	mov	r2, #104	; 0x68
   108ec:	mov	r1, #0
   108f0:	mov	r0, sp
   108f4:	bl	106b0 <memset@plt>
   108f8:	mov	r6, #0
   108fc:	ldr	r9, [pc, #432]	; 10ab4 <main@@Base+0x25c>
   10900:	mov	r8, #99	; 0x63
   10904:	mov	r7, #8
   10908:	mov	sl, #97	; 0x61
   1090c:	b	109c8 <main@@Base+0x170>
   10910:	add	r3, sp, #200	; 0xc8
   10914:	add	r4, r3, r4, lsl #2
   10918:	ldr	r3, [r4, #-200]	; 0xffffff38
   1091c:	add	r3, r3, #1
   10920:	str	r3, [r4, #-200]	; 0xffffff38
   10924:	add	r6, r6, #1
   10928:	b	10904 <main@@Base+0xac>
   1092c:	mov	r0, r5
   10930:	bl	106bc <fclose@plt>
   10934:	ldr	r0, [pc, #380]	; 10ab8 <main@@Base+0x260>
   10938:	bl	10680 <puts@plt>
   1093c:	mov	r1, r6
   10940:	ldr	r0, [pc, #372]	; 10abc <main@@Base+0x264>
   10944:	bl	10668 <printf@plt>
   10948:	sub	r5, sp, #4
   1094c:	add	r7, sp, #100	; 0x64
   10950:	mov	r4, #97	; 0x61
   10954:	vmov	s15, r6
   10958:	vcvt.f32.s32	s16, s15
   1095c:	vldr	s17, [pc, #320]	; 10aa4 <main@@Base+0x24c>
   10960:	ldr	r6, [pc, #344]	; 10ac0 <main@@Base+0x268>
   10964:	ldr	r3, [r5, #4]!
   10968:	vmov	s14, r3
   1096c:	vcvt.f32.s32	s14, s14
   10970:	vdiv.f32	s15, s14, s16
   10974:	vmul.f32	s15, s15, s17
   10978:	vcvt.f64.f32	d7, s15
   1097c:	vmov	r2, r3, d7
   10980:	mov	r1, r4
   10984:	mov	r0, r6
   10988:	bl	10668 <printf@plt>
   1098c:	add	r4, r4, #1
   10990:	cmp	r5, r7
   10994:	bne	10964 <main@@Base+0x10c>
   10998:	mov	r0, #0
   1099c:	add	sp, sp, #204	; 0xcc
   109a0:	vpop	{d8}
   109a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109a8:	mov	r3, sl
   109ac:	mov	fp, r3
   109b0:	bl	10698 <__ctype_tolower_loc@plt>
   109b4:	ldr	r3, [r0]
   109b8:	ldr	r4, [r3, fp, lsl #2]
   109bc:	sub	r4, r4, #97	; 0x61
   109c0:	cmp	r4, #25
   109c4:	bls	10910 <main@@Base+0xb8>
   109c8:	mov	r0, r5
   109cc:	bl	106d4 <getc@plt>
   109d0:	mov	r4, r0
   109d4:	cmn	r0, #1
   109d8:	beq	1092c <main@@Base+0xd4>
   109dc:	mov	r2, r7
   109e0:	add	r1, sp, #168	; 0xa8
   109e4:	bl	10808 <in_array@@Base>
   109e8:	cmp	r0, #0
   109ec:	bne	109a8 <main@@Base+0x150>
   109f0:	mov	r2, #4
   109f4:	add	r1, sp, #152	; 0x98
   109f8:	mov	r0, r4
   109fc:	bl	10808 <in_array@@Base>
   10a00:	cmp	r0, #0
   10a04:	bne	10a7c <main@@Base+0x224>
   10a08:	mov	r2, #2
   10a0c:	add	r1, sp, #144	; 0x90
   10a10:	mov	r0, r4
   10a14:	bl	10808 <in_array@@Base>
   10a18:	cmp	r0, #0
   10a1c:	bne	10a84 <main@@Base+0x22c>
   10a20:	mov	r2, #6
   10a24:	add	r1, sp, #120	; 0x78
   10a28:	mov	r0, r4
   10a2c:	bl	10808 <in_array@@Base>
   10a30:	cmp	r0, #0
   10a34:	bne	10a8c <main@@Base+0x234>
   10a38:	mov	r2, #2
   10a3c:	add	r1, sp, #112	; 0x70
   10a40:	mov	r0, r4
   10a44:	bl	10808 <in_array@@Base>
   10a48:	cmp	r0, #0
   10a4c:	bne	10a94 <main@@Base+0x23c>
   10a50:	mov	r2, #2
   10a54:	add	r1, sp, #104	; 0x68
   10a58:	mov	r0, r4
   10a5c:	bl	10808 <in_array@@Base>
   10a60:	cmp	r0, #0
   10a64:	bne	10a9c <main@@Base+0x244>
   10a68:	mov	fp, r4
   10a6c:	add	r3, r4, #128	; 0x80
   10a70:	cmp	r3, r9
   10a74:	bhi	109bc <main@@Base+0x164>
   10a78:	b	109b0 <main@@Base+0x158>
   10a7c:	mov	r3, #101	; 0x65
   10a80:	b	109ac <main@@Base+0x154>
   10a84:	mov	r3, #105	; 0x69
   10a88:	b	109ac <main@@Base+0x154>
   10a8c:	mov	r3, #111	; 0x6f
   10a90:	b	109ac <main@@Base+0x154>
   10a94:	mov	r3, #117	; 0x75
   10a98:	b	109ac <main@@Base+0x154>
   10a9c:	mov	r3, r8
   10aa0:	b	109ac <main@@Base+0x154>
   10aa4:	sbcmi	r0, r8, #0
   10aa8:	andeq	r0, r1, r4, lsr fp
   10aac:	andeq	r0, r1, ip, ror fp
   10ab0:	andeq	r0, r1, r0, lsl #23
   10ab4:	andeq	r0, r0, pc, ror r1
   10ab8:	andeq	r0, r1, ip, asr #23
   10abc:	muleq	r1, r8, fp
   10ac0:			; <UNDEFINED> instruction: 0x00010bb8

00010ac4 <__libc_csu_init@@Base>:
   10ac4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10ac8:	mov	r7, r0
   10acc:	ldr	r6, [pc, #72]	; 10b1c <__libc_csu_init@@Base+0x58>
   10ad0:	ldr	r5, [pc, #72]	; 10b20 <__libc_csu_init@@Base+0x5c>
   10ad4:	add	r6, pc, r6
   10ad8:	add	r5, pc, r5
   10adc:	sub	r6, r6, r5
   10ae0:	mov	r8, r1
   10ae4:	mov	r9, r2
   10ae8:	bl	10648 <printf@plt-0x20>
   10aec:	asrs	r6, r6, #2
   10af0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10af4:	mov	r4, #0
   10af8:	add	r4, r4, #1
   10afc:	ldr	r3, [r5], #4
   10b00:	mov	r2, r9
   10b04:	mov	r1, r8
   10b08:	mov	r0, r7
   10b0c:	blx	r3
   10b10:	cmp	r6, r4
   10b14:	bne	10af8 <__libc_csu_init@@Base+0x34>
   10b18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b1c:	andeq	r0, r1, r4, lsr r4
   10b20:	andeq	r0, r1, ip, lsr #8

00010b24 <__libc_csu_fini@@Base>:
   10b24:	bx	lr

Disassembly of section .fini:

00010b28 <.fini>:
   10b28:	push	{r3, lr}
   10b2c:	pop	{r3, pc}
