
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011274 <.init>:
   11274:	push	{r3, lr}
   11278:	bl	115fc <__assert_fail@plt+0x50>
   1127c:	pop	{r3, pc}

Disassembly of section .plt:

00011280 <calloc@plt-0x14>:
   11280:	push	{lr}		; (str lr, [sp, #-4]!)
   11284:	ldr	lr, [pc, #4]	; 11290 <calloc@plt-0x4>
   11288:	add	lr, pc, lr
   1128c:	ldr	pc, [lr, #8]!
   11290:	andeq	r7, r1, r0, ror sp

00011294 <calloc@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #94208	; 0x17000
   1129c:	ldr	pc, [ip, #3440]!	; 0xd70

000112a0 <fputs_unlocked@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #94208	; 0x17000
   112a8:	ldr	pc, [ip, #3432]!	; 0xd68

000112ac <raise@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #94208	; 0x17000
   112b4:	ldr	pc, [ip, #3424]!	; 0xd60

000112b8 <strcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #94208	; 0x17000
   112c0:	ldr	pc, [ip, #3416]!	; 0xd58

000112c4 <posix_fadvise64@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #94208	; 0x17000
   112cc:	ldr	pc, [ip, #3408]!	; 0xd50

000112d0 <read@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #94208	; 0x17000
   112d8:	ldr	pc, [ip, #3400]!	; 0xd48

000112dc <fflush@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #94208	; 0x17000
   112e4:	ldr	pc, [ip, #3392]!	; 0xd40

000112e8 <wcwidth@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #94208	; 0x17000
   112f0:	ldr	pc, [ip, #3384]!	; 0xd38

000112f4 <memmove@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #94208	; 0x17000
   112fc:	ldr	pc, [ip, #3376]!	; 0xd30

00011300 <free@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #94208	; 0x17000
   11308:	ldr	pc, [ip, #3368]!	; 0xd28

0001130c <ferror@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #94208	; 0x17000
   11314:	ldr	pc, [ip, #3360]!	; 0xd20

00011318 <_exit@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #94208	; 0x17000
   11320:	ldr	pc, [ip, #3352]!	; 0xd18

00011324 <memcpy@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #94208	; 0x17000
   1132c:	ldr	pc, [ip, #3344]!	; 0xd10

00011330 <mbsinit@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #94208	; 0x17000
   11338:	ldr	pc, [ip, #3336]!	; 0xd08

0001133c <dcgettext@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #94208	; 0x17000
   11344:	ldr	pc, [ip, #3328]!	; 0xd00

00011348 <sysconf@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #94208	; 0x17000
   11350:	ldr	pc, [ip, #3320]!	; 0xcf8

00011354 <realloc@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #94208	; 0x17000
   1135c:	ldr	pc, [ip, #3312]!	; 0xcf0

00011360 <textdomain@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #94208	; 0x17000
   11368:	ldr	pc, [ip, #3304]!	; 0xce8

0001136c <iswcntrl@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #94208	; 0x17000
   11374:	ldr	pc, [ip, #3296]!	; 0xce0

00011378 <rawmemchr@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #94208	; 0x17000
   11380:	ldr	pc, [ip, #3288]!	; 0xcd8

00011384 <iswprint@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #94208	; 0x17000
   1138c:	ldr	pc, [ip, #3280]!	; 0xcd0

00011390 <__fxstat64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #94208	; 0x17000
   11398:	ldr	pc, [ip, #3272]!	; 0xcc8

0001139c <fwrite@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #94208	; 0x17000
   113a4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113a8 <lseek64@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #94208	; 0x17000
   113b0:	ldr	pc, [ip, #3256]!	; 0xcb8

000113b4 <__ctype_get_mb_cur_max@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #94208	; 0x17000
   113bc:	ldr	pc, [ip, #3248]!	; 0xcb0

000113c0 <__fpending@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #94208	; 0x17000
   113c8:	ldr	pc, [ip, #3240]!	; 0xca8

000113cc <mbrtowc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #94208	; 0x17000
   113d4:	ldr	pc, [ip, #3232]!	; 0xca0

000113d8 <error@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #94208	; 0x17000
   113e0:	ldr	pc, [ip, #3224]!	; 0xc98

000113e4 <open64@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #94208	; 0x17000
   113ec:	ldr	pc, [ip, #3216]!	; 0xc90

000113f0 <getenv@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #94208	; 0x17000
   113f8:	ldr	pc, [ip, #3208]!	; 0xc88

000113fc <sysinfo@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #94208	; 0x17000
   11404:	ldr	pc, [ip, #3200]!	; 0xc80

00011408 <malloc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #94208	; 0x17000
   11410:	ldr	pc, [ip, #3192]!	; 0xc78

00011414 <__libc_start_main@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #94208	; 0x17000
   1141c:	ldr	pc, [ip, #3184]!	; 0xc70

00011420 <__freading@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #94208	; 0x17000
   11428:	ldr	pc, [ip, #3176]!	; 0xc68

0001142c <__gmon_start__@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #94208	; 0x17000
   11434:	ldr	pc, [ip, #3168]!	; 0xc60

00011438 <getopt_long@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #94208	; 0x17000
   11440:	ldr	pc, [ip, #3160]!	; 0xc58

00011444 <__ctype_b_loc@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #94208	; 0x17000
   1144c:	ldr	pc, [ip, #3152]!	; 0xc50

00011450 <exit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #94208	; 0x17000
   11458:	ldr	pc, [ip, #3144]!	; 0xc48

0001145c <feof@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #94208	; 0x17000
   11464:	ldr	pc, [ip, #3136]!	; 0xc40

00011468 <iswspace@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #94208	; 0x17000
   11470:	ldr	pc, [ip, #3128]!	; 0xc38

00011474 <bcmp@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #94208	; 0x17000
   1147c:	ldr	pc, [ip, #3120]!	; 0xc30

00011480 <strlen@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #94208	; 0x17000
   11488:	ldr	pc, [ip, #3112]!	; 0xc28

0001148c <strchr@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #94208	; 0x17000
   11494:	ldr	pc, [ip, #3104]!	; 0xc20

00011498 <getpagesize@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #94208	; 0x17000
   114a0:	ldr	pc, [ip, #3096]!	; 0xc18

000114a4 <__errno_location@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #94208	; 0x17000
   114ac:	ldr	pc, [ip, #3088]!	; 0xc10

000114b0 <__cxa_atexit@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #94208	; 0x17000
   114b8:	ldr	pc, [ip, #3080]!	; 0xc08

000114bc <setvbuf@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #94208	; 0x17000
   114c4:	ldr	pc, [ip, #3072]!	; 0xc00

000114c8 <memset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #94208	; 0x17000
   114d0:	ldr	pc, [ip, #3064]!	; 0xbf8

000114d4 <btowc@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #94208	; 0x17000
   114dc:	ldr	pc, [ip, #3056]!	; 0xbf0

000114e0 <fgetc@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #94208	; 0x17000
   114e8:	ldr	pc, [ip, #3048]!	; 0xbe8

000114ec <__printf_chk@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #94208	; 0x17000
   114f4:	ldr	pc, [ip, #3040]!	; 0xbe0

000114f8 <fileno@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #94208	; 0x17000
   11500:	ldr	pc, [ip, #3032]!	; 0xbd8

00011504 <__fprintf_chk@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #94208	; 0x17000
   1150c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011510 <fclose@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #94208	; 0x17000
   11518:	ldr	pc, [ip, #3016]!	; 0xbc8

0001151c <fseeko64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #94208	; 0x17000
   11524:	ldr	pc, [ip, #3008]!	; 0xbc0

00011528 <__overflow@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #94208	; 0x17000
   11530:	ldr	pc, [ip, #3000]!	; 0xbb8

00011534 <setlocale@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #94208	; 0x17000
   1153c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011540 <strrchr@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #94208	; 0x17000
   11548:	ldr	pc, [ip, #2984]!	; 0xba8

0001154c <nl_langinfo@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #94208	; 0x17000
   11554:	ldr	pc, [ip, #2976]!	; 0xba0

00011558 <fopen64@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #94208	; 0x17000
   11560:	ldr	pc, [ip, #2968]!	; 0xb98

00011564 <bindtextdomain@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #94208	; 0x17000
   1156c:	ldr	pc, [ip, #2960]!	; 0xb90

00011570 <getdelim@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #94208	; 0x17000
   11578:	ldr	pc, [ip, #2952]!	; 0xb88

0001157c <__xstat64@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #94208	; 0x17000
   11584:	ldr	pc, [ip, #2944]!	; 0xb80

00011588 <strncmp@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #94208	; 0x17000
   11590:	ldr	pc, [ip, #2936]!	; 0xb78

00011594 <abort@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #94208	; 0x17000
   1159c:	ldr	pc, [ip, #2928]!	; 0xb70

000115a0 <close@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #94208	; 0x17000
   115a8:	ldr	pc, [ip, #2920]!	; 0xb68

000115ac <__assert_fail@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #94208	; 0x17000
   115b4:	ldr	pc, [ip, #2912]!	; 0xb60

Disassembly of section .text:

000115c0 <_obstack_begin@@Base-0x5a1c>:
   115c0:	mov	fp, #0
   115c4:	mov	lr, #0
   115c8:	pop	{r1}		; (ldr r1, [sp], #4)
   115cc:	mov	r2, sp
   115d0:	push	{r2}		; (str r2, [sp, #-4]!)
   115d4:	push	{r0}		; (str r0, [sp, #-4]!)
   115d8:	ldr	ip, [pc, #16]	; 115f0 <__assert_fail@plt+0x44>
   115dc:	push	{ip}		; (str ip, [sp, #-4]!)
   115e0:	ldr	r0, [pc, #12]	; 115f4 <__assert_fail@plt+0x48>
   115e4:	ldr	r3, [pc, #12]	; 115f8 <__assert_fail@plt+0x4c>
   115e8:	bl	11414 <__libc_start_main@plt>
   115ec:	bl	11594 <abort@plt>
   115f0:	andeq	r7, r1, r0, ror #20
   115f4:	andeq	r1, r1, r0, asr r9
   115f8:	andeq	r7, r1, r0, lsl #20
   115fc:	ldr	r3, [pc, #20]	; 11618 <__assert_fail@plt+0x6c>
   11600:	ldr	r2, [pc, #20]	; 1161c <__assert_fail@plt+0x70>
   11604:	add	r3, pc, r3
   11608:	ldr	r2, [r3, r2]
   1160c:	cmp	r2, #0
   11610:	bxeq	lr
   11614:	b	1142c <__gmon_start__@plt>
   11618:	strdeq	r7, [r1], -r4
   1161c:	andeq	r0, r0, r8, lsl r1
   11620:	ldr	r0, [pc, #24]	; 11640 <__assert_fail@plt+0x94>
   11624:	ldr	r3, [pc, #24]	; 11644 <__assert_fail@plt+0x98>
   11628:	cmp	r3, r0
   1162c:	bxeq	lr
   11630:	ldr	r3, [pc, #16]	; 11648 <__assert_fail@plt+0x9c>
   11634:	cmp	r3, #0
   11638:	bxeq	lr
   1163c:	bx	r3
   11640:	andeq	r9, r2, r4, ror r1
   11644:	andeq	r9, r2, r4, ror r1
   11648:	andeq	r0, r0, r0
   1164c:	ldr	r0, [pc, #36]	; 11678 <__assert_fail@plt+0xcc>
   11650:	ldr	r1, [pc, #36]	; 1167c <__assert_fail@plt+0xd0>
   11654:	sub	r1, r1, r0
   11658:	asr	r1, r1, #2
   1165c:	add	r1, r1, r1, lsr #31
   11660:	asrs	r1, r1, #1
   11664:	bxeq	lr
   11668:	ldr	r3, [pc, #16]	; 11680 <__assert_fail@plt+0xd4>
   1166c:	cmp	r3, #0
   11670:	bxeq	lr
   11674:	bx	r3
   11678:	andeq	r9, r2, r4, ror r1
   1167c:	andeq	r9, r2, r4, ror r1
   11680:	andeq	r0, r0, r0
   11684:	push	{r4, lr}
   11688:	ldr	r4, [pc, #24]	; 116a8 <__assert_fail@plt+0xfc>
   1168c:	ldrb	r3, [r4]
   11690:	cmp	r3, #0
   11694:	popne	{r4, pc}
   11698:	bl	11620 <__assert_fail@plt+0x74>
   1169c:	mov	r3, #1
   116a0:	strb	r3, [r4]
   116a4:	pop	{r4, pc}
   116a8:	muleq	r2, ip, r1
   116ac:	b	1164c <__assert_fail@plt+0xa0>
   116b0:	push	{fp, lr}
   116b4:	mov	fp, sp
   116b8:	sub	sp, sp, #56	; 0x38
   116bc:	mov	r4, r0
   116c0:	cmp	r0, #0
   116c4:	bne	11908 <__assert_fail@plt+0x35c>
   116c8:	movw	r1, #31411	; 0x7ab3
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	movt	r1, #1
   116d8:	bl	1133c <dcgettext@plt>
   116dc:	mov	r1, r0
   116e0:	movw	r0, #37352	; 0x91e8
   116e4:	movt	r0, #2
   116e8:	ldr	r2, [r0]
   116ec:	mov	r0, #1
   116f0:	mov	r3, r2
   116f4:	bl	114ec <__printf_chk@plt>
   116f8:	movw	r1, #31482	; 0x7afa
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	1133c <dcgettext@plt>
   1170c:	movw	r7, #37268	; 0x9194
   11710:	movt	r7, #2
   11714:	ldr	r1, [r7]
   11718:	bl	112a0 <fputs_unlocked@plt>
   1171c:	movw	r1, #32791	; 0x8017
   11720:	mov	r0, #0
   11724:	mov	r2, #5
   11728:	movt	r1, #1
   1172c:	bl	1133c <dcgettext@plt>
   11730:	ldr	r1, [r7]
   11734:	bl	112a0 <fputs_unlocked@plt>
   11738:	movw	r1, #31676	; 0x7bbc
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	movt	r1, #1
   11748:	bl	1133c <dcgettext@plt>
   1174c:	ldr	r1, [r7]
   11750:	bl	112a0 <fputs_unlocked@plt>
   11754:	movw	r1, #31977	; 0x7ce9
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	movt	r1, #1
   11764:	bl	1133c <dcgettext@plt>
   11768:	ldr	r1, [r7]
   1176c:	bl	112a0 <fputs_unlocked@plt>
   11770:	movw	r1, #32278	; 0x7e16
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	movt	r1, #1
   11780:	bl	1133c <dcgettext@plt>
   11784:	ldr	r1, [r7]
   11788:	bl	112a0 <fputs_unlocked@plt>
   1178c:	movw	r1, #32323	; 0x7e43
   11790:	mov	r0, #0
   11794:	mov	r2, #5
   11798:	movt	r1, #1
   1179c:	bl	1133c <dcgettext@plt>
   117a0:	ldr	r1, [r7]
   117a4:	bl	112a0 <fputs_unlocked@plt>
   117a8:	movw	r0, #33392	; 0x8270
   117ac:	mov	r2, #48	; 0x30
   117b0:	mov	r6, sp
   117b4:	movw	r5, #32377	; 0x7e79
   117b8:	movt	r0, #1
   117bc:	movt	r5, #1
   117c0:	add	r1, r0, #32
   117c4:	add	r3, r0, #16
   117c8:	vld1.64	{d18-d19}, [r0], r2
   117cc:	vld1.64	{d16-d17}, [r1]
   117d0:	vld1.64	{d20-d21}, [r3]
   117d4:	vldr	d22, [r0]
   117d8:	add	r1, r6, #32
   117dc:	add	r0, r6, #16
   117e0:	vst1.64	{d16-d17}, [r1]
   117e4:	movw	r1, #32847	; 0x804f
   117e8:	vst1.64	{d20-d21}, [r0]
   117ec:	mov	r0, r6
   117f0:	movt	r1, #1
   117f4:	vst1.64	{d18-d19}, [r0], r2
   117f8:	vstr	d22, [r0]
   117fc:	mov	r0, r5
   11800:	bl	112b8 <strcmp@plt>
   11804:	cmp	r0, #0
   11808:	ldrne	r1, [r6, #8]!
   1180c:	cmpne	r1, #0
   11810:	bne	117fc <__assert_fail@plt+0x250>
   11814:	movw	r1, #32942	; 0x80ae
   11818:	ldr	r6, [r6, #4]
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #1
   11828:	bl	1133c <dcgettext@plt>
   1182c:	movw	r2, #32426	; 0x7eaa
   11830:	movw	r3, #32965	; 0x80c5
   11834:	mov	r1, r0
   11838:	mov	r0, #1
   1183c:	movt	r2, #1
   11840:	movt	r3, #1
   11844:	bl	114ec <__printf_chk@plt>
   11848:	cmp	r6, #0
   1184c:	mov	r0, #5
   11850:	mov	r1, #0
   11854:	moveq	r6, r5
   11858:	bl	11534 <setlocale@plt>
   1185c:	cmp	r0, #0
   11860:	beq	11898 <__assert_fail@plt+0x2ec>
   11864:	movw	r1, #33005	; 0x80ed
   11868:	mov	r2, #3
   1186c:	movt	r1, #1
   11870:	bl	11588 <strncmp@plt>
   11874:	cmp	r0, #0
   11878:	beq	11898 <__assert_fail@plt+0x2ec>
   1187c:	movw	r1, #33009	; 0x80f1
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	movt	r1, #1
   1188c:	bl	1133c <dcgettext@plt>
   11890:	ldr	r1, [r7]
   11894:	bl	112a0 <fputs_unlocked@plt>
   11898:	movw	r1, #33080	; 0x8138
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	movt	r1, #1
   118a8:	bl	1133c <dcgettext@plt>
   118ac:	movw	r2, #32965	; 0x80c5
   118b0:	mov	r1, r0
   118b4:	mov	r0, #1
   118b8:	mov	r3, r5
   118bc:	movt	r2, #1
   118c0:	bl	114ec <__printf_chk@plt>
   118c4:	movw	r1, #33107	; 0x8153
   118c8:	mov	r0, #0
   118cc:	mov	r2, #5
   118d0:	movt	r1, #1
   118d4:	bl	1133c <dcgettext@plt>
   118d8:	mov	r1, r0
   118dc:	movw	r0, #32875	; 0x806b
   118e0:	movw	r3, #33157	; 0x8185
   118e4:	cmp	r6, r5
   118e8:	mov	r2, r6
   118ec:	movt	r0, #1
   118f0:	movt	r3, #1
   118f4:	moveq	r3, r0
   118f8:	mov	r0, #1
   118fc:	bl	114ec <__printf_chk@plt>
   11900:	mov	r0, r4
   11904:	bl	11450 <exit@plt>
   11908:	movw	r0, #37256	; 0x9188
   1190c:	movw	r1, #31372	; 0x7a8c
   11910:	mov	r2, #5
   11914:	movt	r0, #2
   11918:	movt	r1, #1
   1191c:	ldr	r5, [r0]
   11920:	mov	r0, #0
   11924:	bl	1133c <dcgettext@plt>
   11928:	mov	r2, r0
   1192c:	movw	r0, #37352	; 0x91e8
   11930:	mov	r1, #1
   11934:	movt	r0, #2
   11938:	ldr	r3, [r0]
   1193c:	mov	r0, r5
   11940:	bl	11504 <__fprintf_chk@plt>
   11944:	mov	r0, r4
   11948:	bl	11450 <exit@plt>
   1194c:	nop	{0}
   11950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11954:	add	fp, sp, #28
   11958:	sub	sp, sp, #4
   1195c:	vpush	{d8-d10}
   11960:	sub	sp, sp, #312	; 0x138
   11964:	mov	r6, r0
   11968:	ldr	r0, [r1]
   1196c:	mov	r5, r1
   11970:	bl	13e20 <__assert_fail@plt+0x2874>
   11974:	movw	r1, #33157	; 0x8185
   11978:	mov	r0, #6
   1197c:	movt	r1, #1
   11980:	bl	11534 <setlocale@plt>
   11984:	movw	r4, #32430	; 0x7eae
   11988:	movw	r1, #32380	; 0x7e7c
   1198c:	movt	r4, #1
   11990:	movt	r1, #1
   11994:	mov	r0, r4
   11998:	bl	11564 <bindtextdomain@plt>
   1199c:	mov	r0, r4
   119a0:	bl	11360 <textdomain@plt>
   119a4:	movw	r0, #14388	; 0x3834
   119a8:	movt	r0, #1
   119ac:	bl	17a64 <_obstack_memory_used@@Base+0x6ec>
   119b0:	bl	11498 <getpagesize@plt>
   119b4:	movw	r7, #37280	; 0x91a0
   119b8:	mov	r1, #0
   119bc:	mov	r2, #1
   119c0:	mov	r3, #0
   119c4:	mov	r4, #0
   119c8:	movt	r7, #2
   119cc:	str	r0, [r7, #8]
   119d0:	movw	r0, #37268	; 0x9194
   119d4:	movt	r0, #2
   119d8:	ldr	r0, [r0]
   119dc:	bl	114bc <setvbuf@plt>
   119e0:	movw	r0, #32404	; 0x7e94
   119e4:	movt	r0, #1
   119e8:	bl	113f0 <getenv@plt>
   119ec:	cmp	r0, #0
   119f0:	str	r4, [r7, #56]	; 0x38
   119f4:	str	r4, [r7, #60]	; 0x3c
   119f8:	str	r4, [r7, #24]
   119fc:	str	r4, [r7, #28]
   11a00:	str	r4, [r7, #32]
   11a04:	str	r4, [r7, #36]	; 0x24
   11a08:	str	r4, [r7, #40]	; 0x28
   11a0c:	str	r4, [r7, #44]	; 0x2c
   11a10:	str	r4, [r7, #48]	; 0x30
   11a14:	str	r4, [r7, #52]	; 0x34
   11a18:	strb	r4, [r7, #5]
   11a1c:	str	r4, [r7, #1]
   11a20:	movw	sl, #32420	; 0x7ea4
   11a24:	movw	r8, #33232	; 0x81d0
   11a28:	add	r9, r7, #1
   11a2c:	movwne	r0, #1
   11a30:	movt	sl, #1
   11a34:	movt	r8, #1
   11a38:	strb	r0, [r7]
   11a3c:	add	r0, r7, #5
   11a40:	str	r0, [sp, #52]	; 0x34
   11a44:	add	r0, r7, #4
   11a48:	str	r0, [sp, #48]	; 0x30
   11a4c:	add	r0, r7, #2
   11a50:	add	r7, r7, #3
   11a54:	str	r0, [sp, #40]	; 0x28
   11a58:	mov	r0, #0
   11a5c:	str	r0, [sp, #44]	; 0x2c
   11a60:	mov	r0, r6
   11a64:	mov	r1, r5
   11a68:	mov	r2, sl
   11a6c:	mov	r3, r8
   11a70:	str	r4, [sp]
   11a74:	bl	11438 <getopt_long@plt>
   11a78:	cmp	r0, #75	; 0x4b
   11a7c:	ble	11b98 <__assert_fail@plt+0x5ec>
   11a80:	sub	r1, r0, #76	; 0x4c
   11a84:	cmp	r1, #43	; 0x2b
   11a88:	bhi	11b50 <__assert_fail@plt+0x5a4>
   11a8c:	add	r2, pc, #4
   11a90:	mov	r0, r9
   11a94:	ldr	pc, [r2, r1, lsl #2]
   11a98:	andeq	r1, r1, r8, asr #22
   11a9c:	muleq	r1, r8, r4
   11aa0:	muleq	r1, r8, r4
   11aa4:	muleq	r1, r8, r4
   11aa8:	muleq	r1, r8, r4
   11aac:	muleq	r1, r8, r4
   11ab0:	muleq	r1, r8, r4
   11ab4:	muleq	r1, r8, r4
   11ab8:	muleq	r1, r8, r4
   11abc:	muleq	r1, r8, r4
   11ac0:	muleq	r1, r8, r4
   11ac4:	muleq	r1, r8, r4
   11ac8:	muleq	r1, r8, r4
   11acc:	muleq	r1, r8, r4
   11ad0:	muleq	r1, r8, r4
   11ad4:	muleq	r1, r8, r4
   11ad8:	muleq	r1, r8, r4
   11adc:	muleq	r1, r8, r4
   11ae0:	muleq	r1, r8, r4
   11ae4:	muleq	r1, r8, r4
   11ae8:	muleq	r1, r8, r4
   11aec:	muleq	r1, r8, r4
   11af0:	muleq	r1, r8, r4
   11af4:	andeq	r1, r1, r0, ror fp
   11af8:	muleq	r1, r8, r4
   11afc:	muleq	r1, r8, r4
   11b00:	muleq	r1, r8, r4
   11b04:	muleq	r1, r8, r4
   11b08:	muleq	r1, r8, r4
   11b0c:	muleq	r1, r8, r4
   11b10:	muleq	r1, r8, r4
   11b14:	muleq	r1, r8, r4
   11b18:	andeq	r1, r1, r4, ror #22
   11b1c:	andeq	r1, r1, ip, asr fp
   11b20:	muleq	r1, r8, r4
   11b24:	muleq	r1, r8, r4
   11b28:	muleq	r1, r8, r4
   11b2c:	muleq	r1, r8, r4
   11b30:	muleq	r1, r8, r4
   11b34:	muleq	r1, r8, r4
   11b38:	muleq	r1, r8, r4
   11b3c:	muleq	r1, r8, r4
   11b40:	muleq	r1, r8, r4
   11b44:	andeq	r1, r1, ip, ror #22
   11b48:	ldr	r0, [sp, #52]	; 0x34
   11b4c:	b	11b70 <__assert_fail@plt+0x5c4>
   11b50:	cmp	r0, #256	; 0x100
   11b54:	beq	11a60 <__assert_fail@plt+0x4b4>
   11b58:	b	11b7c <__assert_fail@plt+0x5d0>
   11b5c:	ldr	r0, [sp, #40]	; 0x28
   11b60:	b	11b70 <__assert_fail@plt+0x5c4>
   11b64:	ldr	r0, [sp, #48]	; 0x30
   11b68:	b	11b70 <__assert_fail@plt+0x5c4>
   11b6c:	mov	r0, r7
   11b70:	mov	r1, #1
   11b74:	strb	r1, [r0]
   11b78:	b	11a60 <__assert_fail@plt+0x4b4>
   11b7c:	movw	r1, #257	; 0x101
   11b80:	cmp	r0, r1
   11b84:	bne	12498 <__assert_fail@plt+0xeec>
   11b88:	movw	r0, #37272	; 0x9198
   11b8c:	movt	r0, #2
   11b90:	ldr	r0, [r0]
   11b94:	b	11a5c <__assert_fail@plt+0x4b0>
   11b98:	cmn	r0, #1
   11b9c:	bne	12420 <__assert_fail@plt+0xe74>
   11ba0:	movw	sl, #37280	; 0x91a0
   11ba4:	movt	sl, #2
   11ba8:	ldrb	r0, [sl, #4]
   11bac:	cmp	r0, #0
   11bb0:	bne	11bf0 <__assert_fail@plt+0x644>
   11bb4:	ldrb	r0, [sl, #3]
   11bb8:	cmp	r0, #0
   11bbc:	bne	11bf0 <__assert_fail@plt+0x644>
   11bc0:	ldrb	r0, [sl, #2]
   11bc4:	cmp	r0, #0
   11bc8:	bne	11bf0 <__assert_fail@plt+0x644>
   11bcc:	ldrb	r0, [sl, #1]
   11bd0:	cmp	r0, #0
   11bd4:	bne	11bf0 <__assert_fail@plt+0x644>
   11bd8:	ldrb	r0, [sl, #5]
   11bdc:	cmp	r0, #0
   11be0:	movweq	r0, #257	; 0x101
   11be4:	strheq	r0, [sl, #3]
   11be8:	moveq	r0, #1
   11bec:	strbeq	r0, [sl, #1]
   11bf0:	movw	r7, #37248	; 0x9180
   11bf4:	ldr	r1, [sp, #44]	; 0x2c
   11bf8:	movt	r7, #2
   11bfc:	ldr	r0, [r7]
   11c00:	cmp	r1, #0
   11c04:	beq	11c88 <__assert_fail@plt+0x6dc>
   11c08:	cmp	r0, r6
   11c0c:	blt	124c0 <__assert_fail@plt+0xf14>
   11c10:	ldr	r6, [sp, #44]	; 0x2c
   11c14:	movw	r1, #33586	; 0x8332
   11c18:	movt	r1, #1
   11c1c:	mov	r0, r6
   11c20:	bl	112b8 <strcmp@plt>
   11c24:	cmp	r0, #0
   11c28:	beq	11cb0 <__assert_fail@plt+0x704>
   11c2c:	movw	r1, #32607	; 0x7f5f
   11c30:	mov	r0, r6
   11c34:	movt	r1, #1
   11c38:	bl	11558 <fopen64@plt>
   11c3c:	mov	r5, r0
   11c40:	cmp	r0, #0
   11c44:	bne	11cbc <__assert_fail@plt+0x710>
   11c48:	bl	114a4 <__errno_location@plt>
   11c4c:	movw	r1, #32536	; 0x7f18
   11c50:	ldr	r4, [r0]
   11c54:	mov	r0, #0
   11c58:	mov	r2, #5
   11c5c:	movt	r1, #1
   11c60:	bl	1133c <dcgettext@plt>
   11c64:	mov	r5, r0
   11c68:	mov	r0, #4
   11c6c:	mov	r1, r6
   11c70:	bl	158bc <__assert_fail@plt+0x4310>
   11c74:	mov	r3, r0
   11c78:	mov	r0, #1
   11c7c:	mov	r1, r4
   11c80:	mov	r2, r5
   11c84:	bl	113d8 <error@plt>
   11c88:	subs	r9, r6, r0
   11c8c:	add	r7, sl, #12
   11c90:	addgt	r7, r5, r0, lsl #2
   11c94:	movle	r9, #1
   11c98:	mov	r0, r7
   11c9c:	bl	136a4 <__assert_fail@plt+0x20f8>
   11ca0:	mov	r4, #0
   11ca4:	cmp	r0, #0
   11ca8:	bne	11d48 <__assert_fail@plt+0x79c>
   11cac:	b	12494 <__assert_fail@plt+0xee8>
   11cb0:	movw	r0, #37264	; 0x9190
   11cb4:	movt	r0, #2
   11cb8:	ldr	r5, [r0]
   11cbc:	mov	r0, r5
   11cc0:	bl	114f8 <fileno@plt>
   11cc4:	mov	r1, r0
   11cc8:	add	r2, sp, #56	; 0x38
   11ccc:	mov	r0, #3
   11cd0:	bl	11390 <__fxstat64@plt>
   11cd4:	cmp	r0, #0
   11cd8:	bne	11d2c <__assert_fail@plt+0x780>
   11cdc:	ldr	r0, [sp, #72]	; 0x48
   11ce0:	and	r0, r0, #61440	; 0xf000
   11ce4:	cmp	r0, #32768	; 0x8000
   11ce8:	bne	11d2c <__assert_fail@plt+0x780>
   11cec:	ldr	r0, [sp, #104]	; 0x68
   11cf0:	ldr	r1, [sp, #108]	; 0x6c
   11cf4:	bl	1782c <_obstack_memory_used@@Base+0x4b4>
   11cf8:	vldr	d9, [pc, #576]	; 11f40 <__assert_fail@plt+0x994>
   11cfc:	vmov	d8, r0, r1
   11d00:	bl	13d20 <__assert_fail@plt+0x2774>
   11d04:	vmov.f64	d10, #96	; 0x3f000000  0.5
   11d08:	vmul.f64	d16, d0, d10
   11d0c:	vcmpe.f64	d16, d9
   11d10:	vmrs	APSR_nzcv, fpscr
   11d14:	bgt	11d20 <__assert_fail@plt+0x774>
   11d18:	bl	13d20 <__assert_fail@plt+0x2774>
   11d1c:	vmul.f64	d9, d0, d10
   11d20:	vcmpe.f64	d9, d8
   11d24:	vmrs	APSR_nzcv, fpscr
   11d28:	bge	123d0 <__assert_fail@plt+0xe24>
   11d2c:	mov	r0, r5
   11d30:	bl	136d4 <__assert_fail@plt+0x2128>
   11d34:	mov	r7, #0
   11d38:	mov	r9, #0
   11d3c:	mov	r4, #0
   11d40:	cmp	r0, #0
   11d44:	beq	12494 <__assert_fail@plt+0xee8>
   11d48:	cmp	r9, #0
   11d4c:	str	r0, [sp, #48]	; 0x30
   11d50:	mov	r0, r9
   11d54:	mov	r1, #112	; 0x70
   11d58:	movweq	r0, #1
   11d5c:	bl	1692c <__assert_fail@plt+0x5380>
   11d60:	cmp	r9, #0
   11d64:	str	r0, [sp, #52]	; 0x34
   11d68:	str	r4, [sp, #40]	; 0x28
   11d6c:	beq	11da4 <__assert_fail@plt+0x7f8>
   11d70:	cmp	r9, #1
   11d74:	bne	11db4 <__assert_fail@plt+0x808>
   11d78:	ldrb	r2, [sl, #3]
   11d7c:	ldrb	r3, [sl, #4]
   11d80:	ldrb	r1, [sl, #2]
   11d84:	ldrb	r0, [sl, #1]
   11d88:	add	r2, r2, r3
   11d8c:	add	r1, r2, r1
   11d90:	add	r0, r1, r0
   11d94:	ldrb	r1, [sl, #5]
   11d98:	add	r0, r0, r1
   11d9c:	cmp	r0, #1
   11da0:	bne	11db4 <__assert_fail@plt+0x808>
   11da4:	ldr	r1, [sp, #52]	; 0x34
   11da8:	mov	r0, #1
   11dac:	str	r0, [r1]
   11db0:	b	11e2c <__assert_fail@plt+0x880>
   11db4:	ldr	r0, [sp, #52]	; 0x34
   11db8:	movw	r8, #33586	; 0x8332
   11dbc:	mov	r5, r9
   11dc0:	movt	r8, #1
   11dc4:	add	r6, r0, #8
   11dc8:	ldr	r4, [r7]
   11dcc:	cmp	r4, #0
   11dd0:	bne	11e04 <__assert_fail@plt+0x858>
   11dd4:	mov	r0, #3
   11dd8:	mov	r1, #0
   11ddc:	mov	r2, r6
   11de0:	bl	11390 <__fxstat64@plt>
   11de4:	str	r0, [r6, #-8]
   11de8:	add	r7, r7, #4
   11dec:	subs	r5, r5, #1
   11df0:	add	r6, r6, #112	; 0x70
   11df4:	beq	11e2c <__assert_fail@plt+0x880>
   11df8:	ldr	r4, [r7]
   11dfc:	cmp	r4, #0
   11e00:	beq	11dd4 <__assert_fail@plt+0x828>
   11e04:	mov	r0, r4
   11e08:	mov	r1, r8
   11e0c:	bl	112b8 <strcmp@plt>
   11e10:	cmp	r0, #0
   11e14:	beq	11dd4 <__assert_fail@plt+0x828>
   11e18:	mov	r0, #3
   11e1c:	mov	r1, r4
   11e20:	mov	r2, r6
   11e24:	bl	1157c <__xstat64@plt>
   11e28:	b	11de4 <__assert_fail@plt+0x838>
   11e2c:	mov	r4, #1
   11e30:	cmp	r9, #0
   11e34:	mov	r5, #1
   11e38:	beq	11f04 <__assert_fail@plt+0x958>
   11e3c:	ldr	r0, [sp, #52]	; 0x34
   11e40:	mov	r5, #1
   11e44:	ldr	r2, [r0]
   11e48:	cmp	r2, #0
   11e4c:	bgt	11f04 <__assert_fail@plt+0x958>
   11e50:	ldr	r1, [sp, #52]	; 0x34
   11e54:	sub	r0, r9, #1
   11e58:	mov	r7, #0
   11e5c:	mov	r8, #1
   11e60:	mov	r6, #0
   11e64:	add	r1, r1, #112	; 0x70
   11e68:	cmp	r2, #0
   11e6c:	beq	11e88 <__assert_fail@plt+0x8dc>
   11e70:	cmp	r0, #0
   11e74:	beq	11ebc <__assert_fail@plt+0x910>
   11e78:	ldr	r2, [r1], #112	; 0x70
   11e7c:	sub	r0, r0, #1
   11e80:	cmp	r2, #0
   11e84:	bne	11e70 <__assert_fail@plt+0x8c4>
   11e88:	ldr	r2, [r1, #-88]	; 0xffffffa8
   11e8c:	and	r2, r2, #61440	; 0xf000
   11e90:	cmp	r2, #32768	; 0x8000
   11e94:	bne	11eb0 <__assert_fail@plt+0x904>
   11e98:	ldrd	r2, [r1, #-56]	; 0xffffffc8
   11e9c:	adds	r7, r2, r7
   11ea0:	adc	r6, r3, r6
   11ea4:	cmp	r0, #0
   11ea8:	bne	11e78 <__assert_fail@plt+0x8cc>
   11eac:	b	11ebc <__assert_fail@plt+0x910>
   11eb0:	mov	r8, #7
   11eb4:	cmp	r0, #0
   11eb8:	bne	11e78 <__assert_fail@plt+0x8cc>
   11ebc:	subs	r0, r7, #10
   11ec0:	mov	r5, #1
   11ec4:	sbcs	r0, r6, #0
   11ec8:	bcc	11efc <__assert_fail@plt+0x950>
   11ecc:	mov	r5, #1
   11ed0:	mov	r0, r7
   11ed4:	mov	r1, r6
   11ed8:	mov	r2, #10
   11edc:	mov	r3, #0
   11ee0:	bl	1788c <_obstack_memory_used@@Base+0x514>
   11ee4:	rsbs	r2, r7, #99	; 0x63
   11ee8:	add	r5, r5, #1
   11eec:	mov	r7, r0
   11ef0:	rscs	r2, r6, #0
   11ef4:	mov	r6, r1
   11ef8:	bcc	11ed0 <__assert_fail@plt+0x924>
   11efc:	cmp	r5, r8
   11f00:	movlt	r5, r8
   11f04:	str	r5, [sl, #16]
   11f08:	ldr	r5, [sp, #48]	; 0x30
   11f0c:	add	r1, sp, #56	; 0x38
   11f10:	mov	r0, r5
   11f14:	bl	1370c <__assert_fail@plt+0x2160>
   11f18:	ldr	r6, [sp, #44]	; 0x2c
   11f1c:	cmp	r0, #0
   11f20:	beq	121dc <__assert_fail@plt+0xc30>
   11f24:	mov	sl, r0
   11f28:	mov	r8, #1
   11f2c:	mov	r7, #0
   11f30:	cmp	r6, #0
   11f34:	mov	r0, #0
   11f38:	bne	11fec <__assert_fail@plt+0xa40>
   11f3c:	b	12024 <__assert_fail@plt+0xa78>
   11f40:	andeq	r0, r0, r0
   11f44:	cmnmi	r4, r0
   11f48:	cmp	r6, #0
   11f4c:	beq	12100 <__assert_fail@plt+0xb54>
   11f50:	mov	r0, r5
   11f54:	bl	137c4 <__assert_fail@plt+0x2218>
   11f58:	mov	r5, r0
   11f5c:	mov	r0, #0
   11f60:	mov	r1, #3
   11f64:	mov	r2, r6
   11f68:	mov	r4, #0
   11f6c:	bl	15b38 <__assert_fail@plt+0x458c>
   11f70:	movw	r1, #32744	; 0x7fe8
   11f74:	mov	r6, r0
   11f78:	mov	r0, #0
   11f7c:	mov	r2, #5
   11f80:	movt	r1, #1
   11f84:	bl	1133c <dcgettext@plt>
   11f88:	movw	r2, #32774	; 0x8006
   11f8c:	str	r5, [sp]
   11f90:	mov	r3, r6
   11f94:	ldr	r5, [sp, #48]	; 0x30
   11f98:	ldr	r6, [sp, #44]	; 0x2c
   11f9c:	str	r0, [sp, #4]
   11fa0:	mov	r0, #0
   11fa4:	mov	r1, #0
   11fa8:	movt	r2, #1
   11fac:	bl	113d8 <error@plt>
   11fb0:	cmp	r9, #0
   11fb4:	beq	1217c <__assert_fail@plt+0xbd0>
   11fb8:	mov	r0, r5
   11fbc:	add	r1, sp, #56	; 0x38
   11fc0:	bl	1370c <__assert_fail@plt+0x2160>
   11fc4:	cmp	r4, #0
   11fc8:	mov	sl, r0
   11fcc:	add	r7, r7, #1
   11fd0:	movwne	r4, #1
   11fd4:	cmp	r0, #0
   11fd8:	mov	r8, r4
   11fdc:	beq	121dc <__assert_fail@plt+0xc30>
   11fe0:	cmp	r6, #0
   11fe4:	mov	r0, #0
   11fe8:	beq	12024 <__assert_fail@plt+0xa78>
   11fec:	movw	r1, #33586	; 0x8332
   11ff0:	mov	r0, r6
   11ff4:	movt	r1, #1
   11ff8:	bl	112b8 <strcmp@plt>
   11ffc:	cmp	r0, #0
   12000:	mov	r0, #0
   12004:	bne	12024 <__assert_fail@plt+0xa78>
   12008:	movw	r1, #33586	; 0x8332
   1200c:	mov	r0, sl
   12010:	movt	r1, #1
   12014:	bl	112b8 <strcmp@plt>
   12018:	cmp	r0, #0
   1201c:	mov	r0, #0
   12020:	beq	1218c <__assert_fail@plt+0xbe0>
   12024:	ldrb	r1, [sl]
   12028:	cmp	r1, #0
   1202c:	beq	11f48 <__assert_fail@plt+0x99c>
   12030:	mov	r4, #0
   12034:	cmp	r0, #0
   12038:	bne	11fb0 <__assert_fail@plt+0xa04>
   1203c:	cmp	r9, #0
   12040:	ldr	r1, [sp, #52]	; 0x34
   12044:	mov	r0, r9
   12048:	movne	r0, r7
   1204c:	rsb	r0, r0, r0, lsl #3
   12050:	add	r5, r1, r0, lsl #4
   12054:	movw	r1, #33586	; 0x8332
   12058:	mov	r0, sl
   1205c:	movt	r1, #1
   12060:	bl	112b8 <strcmp@plt>
   12064:	cmp	r0, #0
   12068:	beq	1213c <__assert_fail@plt+0xb90>
   1206c:	mov	r0, sl
   12070:	mov	r1, #0
   12074:	bl	113e4 <open64@plt>
   12078:	cmn	r0, #1
   1207c:	beq	120b4 <__assert_fail@plt+0xb08>
   12080:	mov	r6, r0
   12084:	mov	r0, #0
   12088:	mov	r1, sl
   1208c:	mov	r2, r5
   12090:	str	r0, [sp]
   12094:	str	r0, [sp, #4]
   12098:	mov	r0, r6
   1209c:	bl	12790 <__assert_fail@plt+0x11e4>
   120a0:	mov	r5, r0
   120a4:	mov	r0, r6
   120a8:	bl	115a0 <close@plt>
   120ac:	cmp	r0, #0
   120b0:	beq	120e8 <__assert_fail@plt+0xb3c>
   120b4:	bl	114a4 <__errno_location@plt>
   120b8:	ldr	r6, [r0]
   120bc:	mov	r0, #0
   120c0:	mov	r1, #3
   120c4:	mov	r2, sl
   120c8:	mov	r5, #0
   120cc:	bl	15b38 <__assert_fail@plt+0x458c>
   120d0:	movw	r2, #33484	; 0x82cc
   120d4:	mov	r3, r0
   120d8:	mov	r0, #0
   120dc:	mov	r1, r6
   120e0:	movt	r2, #1
   120e4:	bl	113d8 <error@plt>
   120e8:	ldr	r6, [sp, #44]	; 0x2c
   120ec:	and	r4, r8, r5
   120f0:	ldr	r5, [sp, #48]	; 0x30
   120f4:	cmp	r9, #0
   120f8:	bne	11fb8 <__assert_fail@plt+0xa0c>
   120fc:	b	1217c <__assert_fail@plt+0xbd0>
   12100:	movw	r1, #32744	; 0x7fe8
   12104:	mov	r0, #0
   12108:	mov	r2, #5
   1210c:	mov	r4, #0
   12110:	movt	r1, #1
   12114:	bl	1133c <dcgettext@plt>
   12118:	movw	r2, #33484	; 0x82cc
   1211c:	mov	r3, r0
   12120:	mov	r0, #0
   12124:	mov	r1, #0
   12128:	movt	r2, #1
   1212c:	bl	113d8 <error@plt>
   12130:	cmp	r9, #0
   12134:	bne	11fb8 <__assert_fail@plt+0xa0c>
   12138:	b	1217c <__assert_fail@plt+0xbd0>
   1213c:	movw	r0, #37280	; 0x91a0
   12140:	mov	r1, #1
   12144:	mov	r2, r5
   12148:	movt	r0, #2
   1214c:	strb	r1, [r0, #6]
   12150:	mvn	r0, #0
   12154:	mov	r1, sl
   12158:	str	r0, [sp]
   1215c:	str	r0, [sp, #4]
   12160:	mov	r0, #0
   12164:	bl	12790 <__assert_fail@plt+0x11e4>
   12168:	mov	r5, r0
   1216c:	and	r4, r8, r5
   12170:	ldr	r5, [sp, #48]	; 0x30
   12174:	cmp	r9, #0
   12178:	bne	11fb8 <__assert_fail@plt+0xa0c>
   1217c:	ldr	r0, [sp, #52]	; 0x34
   12180:	mov	r1, #1
   12184:	str	r1, [r0]
   12188:	b	11fb8 <__assert_fail@plt+0xa0c>
   1218c:	movw	r1, #32681	; 0x7fa9
   12190:	mov	r0, #0
   12194:	mov	r2, #5
   12198:	movt	r1, #1
   1219c:	bl	1133c <dcgettext@plt>
   121a0:	mov	r5, r0
   121a4:	mov	r0, #4
   121a8:	mov	r1, sl
   121ac:	bl	158bc <__assert_fail@plt+0x4310>
   121b0:	mov	r2, r5
   121b4:	ldr	r5, [sp, #48]	; 0x30
   121b8:	mov	r3, r0
   121bc:	mov	r0, #0
   121c0:	mov	r1, #0
   121c4:	bl	113d8 <error@plt>
   121c8:	mov	r0, #1
   121cc:	ldrb	r1, [sl]
   121d0:	cmp	r1, #0
   121d4:	bne	12030 <__assert_fail@plt+0xa84>
   121d8:	b	11f48 <__assert_fail@plt+0x99c>
   121dc:	ldr	r0, [sp, #56]	; 0x38
   121e0:	cmp	r0, #2
   121e4:	beq	12254 <__assert_fail@plt+0xca8>
   121e8:	movw	r7, #37280	; 0x91a0
   121ec:	cmp	r0, #4
   121f0:	movt	r7, #2
   121f4:	bne	1248c <__assert_fail@plt+0xee0>
   121f8:	bl	114a4 <__errno_location@plt>
   121fc:	movw	r1, #32594	; 0x7f52
   12200:	ldr	r6, [r0]
   12204:	mov	r0, #0
   12208:	mov	r2, #5
   1220c:	mov	r4, #0
   12210:	movt	r1, #1
   12214:	bl	1133c <dcgettext@plt>
   12218:	ldr	r2, [sp, #44]	; 0x2c
   1221c:	mov	r5, r0
   12220:	mov	r0, #0
   12224:	mov	r1, #3
   12228:	bl	15b38 <__assert_fail@plt+0x458c>
   1222c:	mov	r3, r0
   12230:	mov	r0, #0
   12234:	mov	r1, r6
   12238:	mov	r2, r5
   1223c:	bl	113d8 <error@plt>
   12240:	ldr	r5, [sp, #48]	; 0x30
   12244:	ldr	r0, [sp, #40]	; 0x28
   12248:	cmp	r0, #0
   1224c:	bne	12274 <__assert_fail@plt+0xcc8>
   12250:	b	1227c <__assert_fail@plt+0xcd0>
   12254:	movw	r7, #37280	; 0x91a0
   12258:	cmp	r6, #0
   1225c:	movt	r7, #2
   12260:	eorseq	r0, r4, #1
   12264:	beq	12388 <__assert_fail@plt+0xddc>
   12268:	ldr	r0, [sp, #40]	; 0x28
   1226c:	cmp	r0, #0
   12270:	beq	1227c <__assert_fail@plt+0xcd0>
   12274:	add	r0, sp, #164	; 0xa4
   12278:	bl	15e7c <__assert_fail@plt+0x48d0>
   1227c:	mov	r0, r5
   12280:	bl	137c4 <__assert_fail@plt+0x2218>
   12284:	cmp	r0, #2
   12288:	bcc	12348 <__assert_fail@plt+0xd9c>
   1228c:	ldr	r0, [r7, #24]
   12290:	movw	r1, #32785	; 0x8011
   12294:	mov	r2, #5
   12298:	movt	r1, #1
   1229c:	str	r0, [sp, #44]	; 0x2c
   122a0:	ldr	r0, [r7, #28]
   122a4:	ldr	r7, [r7, #32]
   122a8:	str	r0, [sp, #40]	; 0x28
   122ac:	movw	r0, #37280	; 0x91a0
   122b0:	movt	r0, #2
   122b4:	ldr	sl, [r0, #36]	; 0x24
   122b8:	movw	r0, #37280	; 0x91a0
   122bc:	movt	r0, #2
   122c0:	ldr	r8, [r0, #40]	; 0x28
   122c4:	movw	r0, #37280	; 0x91a0
   122c8:	movt	r0, #2
   122cc:	ldr	r9, [r0, #44]	; 0x2c
   122d0:	movw	r0, #37280	; 0x91a0
   122d4:	movt	r0, #2
   122d8:	ldr	r0, [r0, #48]	; 0x30
   122dc:	str	r0, [sp, #32]
   122e0:	movw	r0, #37280	; 0x91a0
   122e4:	movt	r0, #2
   122e8:	ldr	r0, [r0, #52]	; 0x34
   122ec:	str	r0, [sp, #36]	; 0x24
   122f0:	movw	r0, #37280	; 0x91a0
   122f4:	movt	r0, #2
   122f8:	ldr	r6, [r0, #56]	; 0x38
   122fc:	ldr	r5, [r0, #60]	; 0x3c
   12300:	mov	r0, #0
   12304:	bl	1133c <dcgettext@plt>
   12308:	ldr	r1, [sp, #44]	; 0x2c
   1230c:	stm	sp, {r8, r9}
   12310:	ldr	r2, [sp, #32]
   12314:	ldr	r3, [sp, #36]	; 0x24
   12318:	str	r7, [sp, #8]
   1231c:	movw	r7, #37280	; 0x91a0
   12320:	str	r0, [sp, #24]
   12324:	mov	r0, r6
   12328:	str	sl, [sp, #12]
   1232c:	movt	r7, #2
   12330:	str	r1, [sp, #16]
   12334:	ldr	r1, [sp, #40]	; 0x28
   12338:	str	r1, [sp, #20]
   1233c:	mov	r1, r5
   12340:	ldr	r5, [sp, #48]	; 0x30
   12344:	bl	1258c <__assert_fail@plt+0xfe0>
   12348:	mov	r0, r5
   1234c:	bl	137e8 <__assert_fail@plt+0x223c>
   12350:	ldr	r0, [sp, #52]	; 0x34
   12354:	bl	13a58 <__assert_fail@plt+0x24ac>
   12358:	ldrb	r0, [r7, #6]
   1235c:	cmp	r0, #1
   12360:	bne	12374 <__assert_fail@plt+0xdc8>
   12364:	mov	r0, #0
   12368:	bl	115a0 <close@plt>
   1236c:	cmp	r0, #0
   12370:	bne	1253c <__assert_fail@plt+0xf90>
   12374:	eor	r0, r4, #1
   12378:	sub	sp, fp, #56	; 0x38
   1237c:	vpop	{d8-d10}
   12380:	add	sp, sp, #4
   12384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12388:	mov	r0, r5
   1238c:	bl	137c4 <__assert_fail@plt+0x2218>
   12390:	cmp	r0, #0
   12394:	bne	12268 <__assert_fail@plt+0xcbc>
   12398:	ldr	r2, [sp, #52]	; 0x34
   1239c:	mov	r0, #1
   123a0:	mov	r1, #0
   123a4:	strb	r0, [r7, #6]
   123a8:	mvn	r0, #0
   123ac:	str	r0, [sp]
   123b0:	str	r0, [sp, #4]
   123b4:	mov	r0, #0
   123b8:	bl	12790 <__assert_fail@plt+0x11e4>
   123bc:	and	r4, r4, r0
   123c0:	ldr	r0, [sp, #40]	; 0x28
   123c4:	cmp	r0, #0
   123c8:	bne	12274 <__assert_fail@plt+0xcc8>
   123cc:	b	1227c <__assert_fail@plt+0xcd0>
   123d0:	add	r4, sp, #164	; 0xa4
   123d4:	mov	r0, r4
   123d8:	bl	15dfc <__assert_fail@plt+0x4850>
   123dc:	mov	r0, r5
   123e0:	mov	r1, r4
   123e4:	bl	15eb0 <__assert_fail@plt+0x4904>
   123e8:	cmp	r0, #0
   123ec:	beq	12554 <__assert_fail@plt+0xfa8>
   123f0:	mov	r0, r5
   123f4:	bl	13960 <__assert_fail@plt+0x23b4>
   123f8:	cmp	r0, #0
   123fc:	bne	12554 <__assert_fail@plt+0xfa8>
   12400:	ldr	r7, [sp, #168]	; 0xa8
   12404:	ldr	r9, [sp, #164]	; 0xa4
   12408:	mov	r0, r7
   1240c:	bl	136a4 <__assert_fail@plt+0x20f8>
   12410:	mov	r4, #1
   12414:	cmp	r0, #0
   12418:	bne	11d48 <__assert_fail@plt+0x79c>
   1241c:	b	12494 <__assert_fail@plt+0xee8>
   12420:	cmn	r0, #3
   12424:	bne	1247c <__assert_fail@plt+0xed0>
   12428:	movw	r0, #37160	; 0x9128
   1242c:	movw	r2, #32451	; 0x7ec3
   12430:	mov	r1, #0
   12434:	movw	r7, #32440	; 0x7eb8
   12438:	movt	r0, #2
   1243c:	movt	r2, #1
   12440:	str	r1, [sp, #8]
   12444:	movw	r1, #32377	; 0x7e79
   12448:	movt	r7, #1
   1244c:	movt	r1, #1
   12450:	ldr	r3, [r0]
   12454:	movw	r0, #37268	; 0x9194
   12458:	str	r2, [sp, #4]
   1245c:	movw	r2, #32426	; 0x7eaa
   12460:	str	r7, [sp]
   12464:	movt	r0, #2
   12468:	movt	r2, #1
   1246c:	ldr	r0, [r0]
   12470:	bl	16628 <__assert_fail@plt+0x507c>
   12474:	mov	r0, #0
   12478:	bl	11450 <exit@plt>
   1247c:	cmn	r0, #2
   12480:	bne	12498 <__assert_fail@plt+0xeec>
   12484:	mov	r0, #0
   12488:	bl	116b0 <__assert_fail@plt+0x104>
   1248c:	cmp	r0, #3
   12490:	bne	124a0 <__assert_fail@plt+0xef4>
   12494:	bl	16d98 <__assert_fail@plt+0x57ec>
   12498:	mov	r0, #1
   1249c:	bl	116b0 <__assert_fail@plt+0x104>
   124a0:	movw	r0, #32609	; 0x7f61
   124a4:	movw	r1, #32649	; 0x7f89
   124a8:	movw	r3, #32658	; 0x7f92
   124ac:	movw	r2, #938	; 0x3aa
   124b0:	movt	r0, #1
   124b4:	movt	r1, #1
   124b8:	movt	r3, #1
   124bc:	bl	115ac <__assert_fail@plt>
   124c0:	movw	r1, #32467	; 0x7ed3
   124c4:	mov	r0, #0
   124c8:	mov	r2, #5
   124cc:	movt	r1, #1
   124d0:	bl	1133c <dcgettext@plt>
   124d4:	mov	r4, r0
   124d8:	ldr	r0, [r7]
   124dc:	ldr	r1, [r5, r0, lsl #2]
   124e0:	mov	r0, #4
   124e4:	bl	158bc <__assert_fail@plt+0x4310>
   124e8:	mov	r3, r0
   124ec:	mov	r0, #0
   124f0:	mov	r1, #0
   124f4:	mov	r2, r4
   124f8:	bl	113d8 <error@plt>
   124fc:	movw	r0, #37256	; 0x9188
   12500:	movw	r1, #32484	; 0x7ee4
   12504:	mov	r2, #5
   12508:	movt	r0, #2
   1250c:	movt	r1, #1
   12510:	ldr	r4, [r0]
   12514:	mov	r0, #0
   12518:	bl	1133c <dcgettext@plt>
   1251c:	movw	r2, #33776	; 0x83f0
   12520:	mov	r3, r0
   12524:	mov	r0, r4
   12528:	mov	r1, #1
   1252c:	movt	r2, #1
   12530:	bl	11504 <__fprintf_chk@plt>
   12534:	mov	r0, #1
   12538:	bl	116b0 <__assert_fail@plt+0x104>
   1253c:	bl	114a4 <__errno_location@plt>
   12540:	ldr	r1, [r0]
   12544:	movw	r2, #33586	; 0x8332
   12548:	mov	r0, #1
   1254c:	movt	r2, #1
   12550:	bl	113d8 <error@plt>
   12554:	movw	r1, #32563	; 0x7f33
   12558:	mov	r0, #0
   1255c:	mov	r2, #5
   12560:	movt	r1, #1
   12564:	bl	1133c <dcgettext@plt>
   12568:	mov	r4, r0
   1256c:	mov	r0, #4
   12570:	mov	r1, r6
   12574:	bl	158bc <__assert_fail@plt+0x4310>
   12578:	mov	r3, r0
   1257c:	mov	r0, #1
   12580:	mov	r1, #0
   12584:	mov	r2, r4
   12588:	bl	113d8 <error@plt>
   1258c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12590:	add	fp, sp, #24
   12594:	sub	sp, sp, #24
   12598:	movw	r6, #37280	; 0x91a0
   1259c:	mov	r7, r2
   125a0:	movw	r8, #33448	; 0x82a8
   125a4:	mov	r9, r3
   125a8:	movt	r6, #2
   125ac:	movt	r8, #1
   125b0:	ldrb	r2, [r6, #4]
   125b4:	cmp	r2, #1
   125b8:	bne	125f4 <__assert_fail@plt+0x1048>
   125bc:	ldr	r4, [r6, #16]
   125c0:	add	r2, sp, #3
   125c4:	bl	13b28 <__assert_fail@plt+0x257c>
   125c8:	movw	r5, #33448	; 0x82a8
   125cc:	mov	r3, r0
   125d0:	mov	r0, #1
   125d4:	mov	r2, r4
   125d8:	movt	r5, #1
   125dc:	add	r1, r5, #1
   125e0:	bl	114ec <__printf_chk@plt>
   125e4:	ldrb	r0, [r6, #3]
   125e8:	cmp	r0, #1
   125ec:	beq	12604 <__assert_fail@plt+0x1058>
   125f0:	b	12634 <__assert_fail@plt+0x1088>
   125f4:	add	r5, r8, #1
   125f8:	ldrb	r0, [r6, #3]
   125fc:	cmp	r0, #1
   12600:	bne	12634 <__assert_fail@plt+0x1088>
   12604:	ldr	r4, [r6, #16]
   12608:	add	r2, sp, #3
   1260c:	mov	r0, r7
   12610:	mov	r1, r9
   12614:	bl	13b28 <__assert_fail@plt+0x257c>
   12618:	mov	r3, r0
   1261c:	mov	r0, #1
   12620:	mov	r1, r5
   12624:	mov	r2, r4
   12628:	bl	114ec <__printf_chk@plt>
   1262c:	movw	r5, #33448	; 0x82a8
   12630:	movt	r5, #1
   12634:	ldrb	r0, [r6, #2]
   12638:	cmp	r0, #1
   1263c:	beq	12688 <__assert_fail@plt+0x10dc>
   12640:	ldrb	r0, [r6, #1]
   12644:	cmp	r0, #1
   12648:	bne	126c4 <__assert_fail@plt+0x1118>
   1264c:	ldr	r1, [fp, #20]
   12650:	ldr	r0, [fp, #16]
   12654:	ldr	r4, [r6, #16]
   12658:	add	r2, sp, #3
   1265c:	bl	13b28 <__assert_fail@plt+0x257c>
   12660:	mov	r3, r0
   12664:	mov	r0, #1
   12668:	mov	r1, r5
   1266c:	mov	r2, r4
   12670:	bl	114ec <__printf_chk@plt>
   12674:	ldrb	r0, [r6, #5]
   12678:	ldr	r5, [fp, #32]
   1267c:	cmp	r0, #1
   12680:	beq	126d8 <__assert_fail@plt+0x112c>
   12684:	b	12700 <__assert_fail@plt+0x1154>
   12688:	ldr	r1, [fp, #12]
   1268c:	ldr	r0, [fp, #8]
   12690:	ldr	r4, [r6, #16]
   12694:	add	r2, sp, #3
   12698:	bl	13b28 <__assert_fail@plt+0x257c>
   1269c:	mov	r3, r0
   126a0:	mov	r0, #1
   126a4:	mov	r1, r5
   126a8:	mov	r2, r4
   126ac:	bl	114ec <__printf_chk@plt>
   126b0:	movw	r5, #33448	; 0x82a8
   126b4:	movt	r5, #1
   126b8:	ldrb	r0, [r6, #1]
   126bc:	cmp	r0, #1
   126c0:	beq	1264c <__assert_fail@plt+0x10a0>
   126c4:	mov	r8, r5
   126c8:	ldrb	r0, [r6, #5]
   126cc:	ldr	r5, [fp, #32]
   126d0:	cmp	r0, #1
   126d4:	bne	12700 <__assert_fail@plt+0x1154>
   126d8:	ldr	r1, [fp, #28]
   126dc:	ldr	r0, [fp, #24]
   126e0:	ldr	r4, [r6, #16]
   126e4:	add	r2, sp, #3
   126e8:	bl	13b28 <__assert_fail@plt+0x257c>
   126ec:	mov	r3, r0
   126f0:	mov	r0, #1
   126f4:	mov	r1, r8
   126f8:	mov	r2, r4
   126fc:	bl	114ec <__printf_chk@plt>
   12700:	cmp	r5, #0
   12704:	beq	12744 <__assert_fail@plt+0x1198>
   12708:	mov	r0, r5
   1270c:	mov	r1, #10
   12710:	bl	1148c <strchr@plt>
   12714:	cmp	r0, #0
   12718:	beq	12730 <__assert_fail@plt+0x1184>
   1271c:	mov	r0, #0
   12720:	mov	r1, #3
   12724:	mov	r2, r5
   12728:	bl	15b38 <__assert_fail@plt+0x458c>
   1272c:	mov	r5, r0
   12730:	movw	r1, #33483	; 0x82cb
   12734:	mov	r0, #1
   12738:	mov	r2, r5
   1273c:	movt	r1, #1
   12740:	bl	114ec <__printf_chk@plt>
   12744:	movw	r0, #37268	; 0x9194
   12748:	movt	r0, #2
   1274c:	ldr	r0, [r0]
   12750:	ldr	r1, [r0, #20]
   12754:	ldr	r2, [r0, #24]
   12758:	cmp	r1, r2
   1275c:	addcc	r2, r1, #1
   12760:	strcc	r2, [r0, #20]
   12764:	movcc	r0, #10
   12768:	strbcc	r0, [r1]
   1276c:	subcc	sp, fp, #24
   12770:	popcc	{r4, r5, r6, r7, r8, r9, fp, pc}
   12774:	mov	r1, #10
   12778:	bl	11528 <__overflow@plt>
   1277c:	sub	sp, fp, #24
   12780:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12784:	nop	{0}
   12788:	nop	{0}
   1278c:	nop	{0}
   12790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12794:	add	fp, sp, #28
   12798:	sub	sp, sp, #4
   1279c:	vpush	{d8-d10}
   127a0:	sub	sp, sp, #120	; 0x78
   127a4:	sub	sp, sp, #16384	; 0x4000
   127a8:	str	r0, [sp, #44]	; 0x2c
   127ac:	mov	r4, r2
   127b0:	cmp	r1, #0
   127b4:	mov	r0, r1
   127b8:	str	r1, [sp, #36]	; 0x24
   127bc:	bne	127d4 <__assert_fail@plt+0x1228>
   127c0:	movw	r1, #33217	; 0x81c1
   127c4:	mov	r0, #0
   127c8:	mov	r2, #5
   127cc:	movt	r1, #1
   127d0:	bl	1133c <dcgettext@plt>
   127d4:	str	r0, [sp, #28]
   127d8:	bl	113b4 <__ctype_get_mb_cur_max@plt>
   127dc:	movw	r8, #37280	; 0x91a0
   127e0:	cmp	r0, #1
   127e4:	mov	r2, #0
   127e8:	mov	r1, #0
   127ec:	movt	r8, #2
   127f0:	movwhi	r2, #1
   127f4:	cmp	r0, #2
   127f8:	mov	r0, #0
   127fc:	movwcc	r0, #1
   12800:	ldrb	r7, [r8, #2]
   12804:	ldrb	r3, [r8, #1]
   12808:	ldrb	r5, [r8, #3]
   1280c:	and	r0, r7, r0
   12810:	and	sl, r2, r7
   12814:	orr	r0, r3, r0
   12818:	eor	r0, r0, #1
   1281c:	orr	r6, sl, r0
   12820:	ldrb	r0, [r8, #5]
   12824:	tst	r6, #1
   12828:	orr	r5, r5, r0
   1282c:	ldrbeq	r0, [r8, #4]
   12830:	cmpeq	r0, #0
   12834:	beq	12864 <__assert_fail@plt+0x12b8>
   12838:	mov	r0, #2
   1283c:	mov	r1, #0
   12840:	mov	r2, #0
   12844:	mov	r3, #0
   12848:	str	r0, [sp, #8]
   1284c:	ldr	r0, [sp, #44]	; 0x2c
   12850:	str	r1, [sp]
   12854:	str	r1, [sp, #4]
   12858:	bl	13920 <__assert_fail@plt+0x2374>
   1285c:	ldrb	r1, [r8, #4]
   12860:	b	1286c <__assert_fail@plt+0x12c0>
   12864:	tst	r5, #1
   12868:	bne	12838 <__assert_fail@plt+0x128c>
   1286c:	orr	r0, r5, r1
   12870:	str	sl, [sp, #32]
   12874:	orr	r0, r6, r0
   12878:	tst	r0, #1
   1287c:	beq	12cac <__assert_fail@plt+0x1700>
   12880:	orr	r0, sl, r5
   12884:	tst	r0, #1
   12888:	beq	12d1c <__assert_fail@plt+0x1770>
   1288c:	bl	113b4 <__ctype_get_mb_cur_max@plt>
   12890:	cmp	r0, #1
   12894:	bls	12f48 <__assert_fail@plt+0x199c>
   12898:	mov	r0, #0
   1289c:	mov	r1, #0
   128a0:	mov	r8, #0
   128a4:	mov	r4, #0
   128a8:	mov	r7, #0
   128ac:	str	r0, [sp, #40]	; 0x28
   128b0:	mov	r0, #0
   128b4:	str	r1, [sp, #108]	; 0x6c
   128b8:	str	r1, [sp, #104]	; 0x68
   128bc:	str	r0, [sp, #52]	; 0x34
   128c0:	mov	r0, #0
   128c4:	str	r0, [sp, #64]	; 0x40
   128c8:	mov	r0, #0
   128cc:	str	r0, [sp, #48]	; 0x30
   128d0:	mov	r0, #0
   128d4:	str	r0, [sp, #68]	; 0x44
   128d8:	mov	r0, #0
   128dc:	str	r0, [sp, #84]	; 0x54
   128e0:	mov	r0, #0
   128e4:	str	r0, [sp, #76]	; 0x4c
   128e8:	mov	r0, #0
   128ec:	str	r0, [sp, #72]	; 0x48
   128f0:	mov	r0, #0
   128f4:	str	r0, [sp, #80]	; 0x50
   128f8:	mov	r0, #0
   128fc:	str	r0, [sp, #60]	; 0x3c
   12900:	mov	r0, #0
   12904:	str	r0, [sp, #56]	; 0x38
   12908:	mov	r5, #0
   1290c:	add	r0, sp, #112	; 0x70
   12910:	rsb	r2, r5, #16384	; 0x4000
   12914:	add	r1, r0, r5
   12918:	ldr	r0, [sp, #44]	; 0x2c
   1291c:	bl	16138 <__assert_fail@plt+0x4b8c>
   12920:	cmp	r0, #0
   12924:	beq	13360 <__assert_fail@plt+0x1db4>
   12928:	cmn	r0, #1
   1292c:	beq	1336c <__assert_fail@plt+0x1dc0>
   12930:	ldr	r1, [sp, #40]	; 0x28
   12934:	add	r9, r0, r5
   12938:	add	sl, sp, #112	; 0x70
   1293c:	adds	r1, r1, r0
   12940:	ldr	r0, [sp, #52]	; 0x34
   12944:	str	r1, [sp, #40]	; 0x28
   12948:	adc	r0, r0, #0
   1294c:	str	r0, [sp, #52]	; 0x34
   12950:	tst	r7, #1
   12954:	beq	12978 <__assert_fail@plt+0x13cc>
   12958:	b	129bc <__assert_fail@plt+0x1410>
   1295c:	sub	r9, r9, #1
   12960:	add	sl, sl, #1
   12964:	mov	r7, #1
   12968:	cmp	r9, #0
   1296c:	beq	12908 <__assert_fail@plt+0x135c>
   12970:	tst	r7, #1
   12974:	bne	129bc <__assert_fail@plt+0x1410>
   12978:	ldrb	r0, [sl]
   1297c:	movw	r2, #33488	; 0x82d0
   12980:	mov	r3, #1
   12984:	movt	r2, #1
   12988:	ubfx	r1, r0, #5, #3
   1298c:	ldr	r1, [r2, r1, lsl #2]
   12990:	and	r2, r0, #31
   12994:	tst	r1, r3, lsl r2
   12998:	beq	129bc <__assert_fail@plt+0x1410>
   1299c:	str	r0, [sp, #100]	; 0x64
   129a0:	mov	r6, #1
   129a4:	mov	r7, #0
   129a8:	mov	r1, #0
   129ac:	sub	r2, r0, #9
   129b0:	cmp	r2, #23
   129b4:	bls	12a18 <__assert_fail@plt+0x146c>
   129b8:	b	12b14 <__assert_fail@plt+0x1568>
   129bc:	ldr	r5, [sp, #104]	; 0x68
   129c0:	ldr	r7, [sp, #108]	; 0x6c
   129c4:	add	r0, sp, #100	; 0x64
   129c8:	mov	r1, sl
   129cc:	mov	r2, r9
   129d0:	add	r3, sp, #104	; 0x68
   129d4:	bl	13c34 <__assert_fail@plt+0x2688>
   129d8:	cmn	r0, #1
   129dc:	beq	1295c <__assert_fail@plt+0x13b0>
   129e0:	mov	r6, r0
   129e4:	cmn	r0, #2
   129e8:	beq	12c70 <__assert_fail@plt+0x16c4>
   129ec:	add	r0, sp, #104	; 0x68
   129f0:	bl	11330 <mbsinit@plt>
   129f4:	clz	r0, r0
   129f8:	cmp	r6, #0
   129fc:	lsr	r7, r0, #5
   12a00:	beq	12aa4 <__assert_fail@plt+0x14f8>
   12a04:	ldr	r0, [sp, #100]	; 0x64
   12a08:	mov	r1, #1
   12a0c:	sub	r2, r0, #9
   12a10:	cmp	r2, #23
   12a14:	bhi	12b14 <__assert_fail@plt+0x1568>
   12a18:	add	r3, pc, #0
   12a1c:	ldr	pc, [r3, r2, lsl #2]
   12a20:	andeq	r2, r1, r0, lsl #21
   12a24:	andeq	r2, r1, r0, asr #21
   12a28:	andeq	r2, r1, r4, asr #23
   12a2c:	ldrdeq	r2, [r1], -r8
   12a30:	ldrdeq	r2, [r1], -r8
   12a34:	andeq	r2, r1, r4, lsl fp
   12a38:	andeq	r2, r1, r4, lsl fp
   12a3c:	andeq	r2, r1, r4, lsl fp
   12a40:	andeq	r2, r1, r4, lsl fp
   12a44:	andeq	r2, r1, r4, lsl fp
   12a48:	andeq	r2, r1, r4, lsl fp
   12a4c:	andeq	r2, r1, r4, lsl fp
   12a50:	andeq	r2, r1, r4, lsl fp
   12a54:	andeq	r2, r1, r4, lsl fp
   12a58:	andeq	r2, r1, r4, lsl fp
   12a5c:	andeq	r2, r1, r4, lsl fp
   12a60:	andeq	r2, r1, r4, lsl fp
   12a64:	andeq	r2, r1, r4, lsl fp
   12a68:	andeq	r2, r1, r4, lsl fp
   12a6c:	andeq	r2, r1, r4, lsl fp
   12a70:	andeq	r2, r1, r4, lsl fp
   12a74:	andeq	r2, r1, r4, lsl fp
   12a78:	andeq	r2, r1, r4, lsl fp
   12a7c:	andeq	r2, r1, ip, lsr #23
   12a80:	ldr	r1, [sp, #60]	; 0x3c
   12a84:	and	r0, r1, #7
   12a88:	subs	r0, r1, r0
   12a8c:	ldr	r1, [sp, #56]	; 0x38
   12a90:	sbc	r1, r1, #0
   12a94:	adds	r0, r0, #8
   12a98:	str	r0, [sp, #60]	; 0x3c
   12a9c:	adc	r0, r1, #0
   12aa0:	b	12bc0 <__assert_fail@plt+0x1614>
   12aa4:	mov	r0, #0
   12aa8:	mov	r6, #1
   12aac:	str	r0, [sp, #100]	; 0x64
   12ab0:	bl	11384 <iswprint@plt>
   12ab4:	cmp	r0, #0
   12ab8:	bne	12b28 <__assert_fail@plt+0x157c>
   12abc:	b	12bec <__assert_fail@plt+0x1640>
   12ac0:	ldr	r0, [sp, #64]	; 0x40
   12ac4:	adds	r0, r0, #1
   12ac8:	str	r0, [sp, #64]	; 0x40
   12acc:	ldr	r0, [sp, #48]	; 0x30
   12ad0:	adc	r0, r0, #0
   12ad4:	str	r0, [sp, #48]	; 0x30
   12ad8:	ldr	r2, [sp, #60]	; 0x3c
   12adc:	ldr	r1, [sp, #68]	; 0x44
   12ae0:	ldr	r3, [sp, #56]	; 0x38
   12ae4:	subs	r0, r8, r2
   12ae8:	sbcs	r0, r1, r3
   12aec:	mov	r0, #0
   12af0:	movwcc	r0, #1
   12af4:	cmp	r0, #0
   12af8:	mov	r0, #0
   12afc:	movne	r1, r3
   12b00:	str	r0, [sp, #60]	; 0x3c
   12b04:	movne	r8, r2
   12b08:	mov	r0, #0
   12b0c:	str	r1, [sp, #68]	; 0x44
   12b10:	b	12bc0 <__assert_fail@plt+0x1614>
   12b14:	cmp	r1, #0
   12b18:	beq	12c10 <__assert_fail@plt+0x1664>
   12b1c:	bl	11384 <iswprint@plt>
   12b20:	cmp	r0, #0
   12b24:	beq	12bec <__assert_fail@plt+0x1640>
   12b28:	movw	r0, #37280	; 0x91a0
   12b2c:	movt	r0, #2
   12b30:	ldrb	r0, [r0, #5]
   12b34:	cmp	r0, #1
   12b38:	bne	12b60 <__assert_fail@plt+0x15b4>
   12b3c:	ldr	r0, [sp, #100]	; 0x64
   12b40:	bl	112e8 <wcwidth@plt>
   12b44:	ldr	r1, [sp, #60]	; 0x3c
   12b48:	bic	r0, r0, r0, asr #31
   12b4c:	adds	r1, r1, r0
   12b50:	ldr	r0, [sp, #56]	; 0x38
   12b54:	str	r1, [sp, #60]	; 0x3c
   12b58:	adc	r0, r0, #0
   12b5c:	str	r0, [sp, #56]	; 0x38
   12b60:	ldr	r0, [sp, #100]	; 0x64
   12b64:	bl	11468 <iswspace@plt>
   12b68:	cmp	r0, #0
   12b6c:	bne	12bc4 <__assert_fail@plt+0x1618>
   12b70:	movw	r0, #37280	; 0x91a0
   12b74:	movt	r0, #2
   12b78:	ldrb	r0, [r0]
   12b7c:	cmp	r0, #0
   12b80:	bne	12c4c <__assert_fail@plt+0x16a0>
   12b84:	ldr	r0, [sp, #100]	; 0x64
   12b88:	movw	r1, #8238	; 0x202e
   12b8c:	cmp	r0, r1
   12b90:	bgt	12c54 <__assert_fail@plt+0x16a8>
   12b94:	cmp	r0, #160	; 0xa0
   12b98:	beq	12bc4 <__assert_fail@plt+0x1618>
   12b9c:	movw	r1, #8199	; 0x2007
   12ba0:	cmp	r0, r1
   12ba4:	beq	12bc4 <__assert_fail@plt+0x1618>
   12ba8:	b	12c4c <__assert_fail@plt+0x16a0>
   12bac:	ldr	r0, [sp, #60]	; 0x3c
   12bb0:	adds	r0, r0, #1
   12bb4:	str	r0, [sp, #60]	; 0x3c
   12bb8:	ldr	r0, [sp, #56]	; 0x38
   12bbc:	adc	r0, r0, #0
   12bc0:	str	r0, [sp, #56]	; 0x38
   12bc4:	ldr	r0, [sp, #80]	; 0x50
   12bc8:	ldr	r1, [sp, #76]	; 0x4c
   12bcc:	and	r0, r0, #1
   12bd0:	adds	r1, r1, r0
   12bd4:	ldr	r0, [sp, #72]	; 0x48
   12bd8:	str	r1, [sp, #76]	; 0x4c
   12bdc:	adc	r0, r0, #0
   12be0:	str	r0, [sp, #72]	; 0x48
   12be4:	mov	r0, #0
   12be8:	str	r0, [sp, #80]	; 0x50
   12bec:	ldr	r0, [sp, #84]	; 0x54
   12bf0:	sub	r9, r9, r6
   12bf4:	add	sl, sl, r6
   12bf8:	adds	r0, r0, #1
   12bfc:	adc	r4, r4, #0
   12c00:	str	r0, [sp, #84]	; 0x54
   12c04:	cmp	r9, #0
   12c08:	bne	12970 <__assert_fail@plt+0x13c4>
   12c0c:	b	12908 <__assert_fail@plt+0x135c>
   12c10:	bl	11444 <__ctype_b_loc@plt>
   12c14:	ldrb	r1, [sl]
   12c18:	ldr	r0, [r0]
   12c1c:	add	r0, r0, r1, lsl #1
   12c20:	ldrh	r0, [r0]
   12c24:	tst	r0, #16384	; 0x4000
   12c28:	beq	12bec <__assert_fail@plt+0x1640>
   12c2c:	ldr	r1, [sp, #60]	; 0x3c
   12c30:	adds	r1, r1, #1
   12c34:	str	r1, [sp, #60]	; 0x3c
   12c38:	ldr	r1, [sp, #56]	; 0x38
   12c3c:	adc	r1, r1, #0
   12c40:	tst	r0, #8192	; 0x2000
   12c44:	str	r1, [sp, #56]	; 0x38
   12c48:	bne	12bc4 <__assert_fail@plt+0x1618>
   12c4c:	mov	r0, #1
   12c50:	b	12be8 <__assert_fail@plt+0x163c>
   12c54:	movw	r1, #8239	; 0x202f
   12c58:	cmp	r0, r1
   12c5c:	beq	12bc4 <__assert_fail@plt+0x1618>
   12c60:	movw	r1, #8288	; 0x2060
   12c64:	cmp	r0, r1
   12c68:	beq	12bc4 <__assert_fail@plt+0x1618>
   12c6c:	b	12c4c <__assert_fail@plt+0x16a0>
   12c70:	str	r5, [sp, #104]	; 0x68
   12c74:	str	r7, [sp, #108]	; 0x6c
   12c78:	mov	r7, #1
   12c7c:	cmp	r9, #0
   12c80:	mov	r5, #0
   12c84:	beq	1290c <__assert_fail@plt+0x1360>
   12c88:	cmp	r9, #16384	; 0x4000
   12c8c:	add	r0, sp, #112	; 0x70
   12c90:	addeq	sl, sl, #1
   12c94:	movweq	r9, #16383	; 0x3fff
   12c98:	mov	r1, sl
   12c9c:	mov	r2, r9
   12ca0:	bl	112f4 <memmove@plt>
   12ca4:	mov	r5, r9
   12ca8:	b	1290c <__assert_fail@plt+0x1360>
   12cac:	ldr	r0, [r4]
   12cb0:	cmp	r0, #1
   12cb4:	blt	12ccc <__assert_fail@plt+0x1720>
   12cb8:	ldr	r1, [sp, #44]	; 0x2c
   12cbc:	add	r2, r4, #8
   12cc0:	mov	r0, #3
   12cc4:	bl	11390 <__fxstat64@plt>
   12cc8:	str	r0, [r4]
   12ccc:	cmp	r0, #0
   12cd0:	mov	r0, #0
   12cd4:	mov	r7, #0
   12cd8:	mov	r6, #0
   12cdc:	str	r0, [sp, #52]	; 0x34
   12ce0:	bne	13298 <__assert_fail@plt+0x1cec>
   12ce4:	ldr	r0, [r4, #24]
   12ce8:	and	r0, r0, #53248	; 0xd000
   12cec:	orr	r0, r0, #8192	; 0x2000
   12cf0:	cmp	r0, #40960	; 0xa000
   12cf4:	bne	1328c <__assert_fail@plt+0x1ce0>
   12cf8:	ldr	r0, [r4, #60]	; 0x3c
   12cfc:	cmp	r0, #0
   12d00:	bmi	1328c <__assert_fail@plt+0x1ce0>
   12d04:	ldr	r8, [fp, #12]
   12d08:	ldr	r6, [r4, #56]	; 0x38
   12d0c:	cmn	r8, #1
   12d10:	ble	134a0 <__assert_fail@plt+0x1ef4>
   12d14:	ldr	r5, [fp, #8]
   12d18:	b	134c0 <__assert_fail@plt+0x1f14>
   12d1c:	vmov.i32	d9, #0	; 0x00000000
   12d20:	vmov.i32	d10, #10	; 0x0000000a
   12d24:	mov	r0, #0
   12d28:	add	r4, sp, #112	; 0x70
   12d2c:	mov	r5, #0
   12d30:	mov	sl, #0
   12d34:	mov	r7, #0
   12d38:	str	r0, [sp, #40]	; 0x28
   12d3c:	mov	r0, #0
   12d40:	str	r0, [sp, #52]	; 0x34
   12d44:	b	12d78 <__assert_fail@plt+0x17cc>
   12d48:	movw	r2, #34953	; 0x8889
   12d4c:	ldr	r0, [sp, #64]	; 0x40
   12d50:	movw	r8, #37280	; 0x91a0
   12d54:	mov	r5, #0
   12d58:	movt	r2, #34952	; 0x8888
   12d5c:	movt	r8, #2
   12d60:	umull	r2, r3, r6, r2
   12d64:	subs	r0, sl, r0
   12d68:	sbc	r1, r7, r9
   12d6c:	rsbs	r0, r0, r3, lsr #3
   12d70:	rscs	r0, r1, #0
   12d74:	movwcs	r5, #1
   12d78:	ldr	r0, [sp, #44]	; 0x2c
   12d7c:	mov	r1, r4
   12d80:	mov	r2, #16384	; 0x4000
   12d84:	bl	16138 <__assert_fail@plt+0x4b8c>
   12d88:	cmp	r0, #0
   12d8c:	beq	131fc <__assert_fail@plt+0x1c50>
   12d90:	mov	r6, r0
   12d94:	cmn	r0, #1
   12d98:	beq	13220 <__assert_fail@plt+0x1c74>
   12d9c:	ldr	r0, [sp, #40]	; 0x28
   12da0:	add	r8, r4, r6
   12da4:	str	sl, [sp, #64]	; 0x40
   12da8:	adds	r0, r0, r6
   12dac:	str	r0, [sp, #40]	; 0x28
   12db0:	ldr	r0, [sp, #52]	; 0x34
   12db4:	adc	r0, r0, #0
   12db8:	tst	r5, #1
   12dbc:	str	r0, [sp, #52]	; 0x34
   12dc0:	beq	12e0c <__assert_fail@plt+0x1860>
   12dc4:	mov	r0, #10
   12dc8:	mov	r1, #10
   12dcc:	strb	r0, [r8]
   12dd0:	mov	r0, r4
   12dd4:	bl	11378 <rawmemchr@plt>
   12dd8:	cmp	r0, r8
   12ddc:	mov	r9, r7
   12de0:	bcs	12d48 <__assert_fail@plt+0x179c>
   12de4:	ldr	sl, [sp, #64]	; 0x40
   12de8:	mov	r7, r9
   12dec:	adds	sl, sl, #1
   12df0:	add	r0, r0, #1
   12df4:	mov	r1, #10
   12df8:	adc	r7, r7, #0
   12dfc:	bl	11378 <rawmemchr@plt>
   12e00:	cmp	r0, r8
   12e04:	bcc	12dec <__assert_fail@plt+0x1840>
   12e08:	b	12d48 <__assert_fail@plt+0x179c>
   12e0c:	cmp	r6, #2
   12e10:	mov	r9, r7
   12e14:	mov	r0, r4
   12e18:	bcc	12f10 <__assert_fail@plt+0x1964>
   12e1c:	ldr	r0, [sp, #64]	; 0x40
   12e20:	bic	ip, r6, #1
   12e24:	mov	r1, r9
   12e28:	mov	r2, #1
   12e2c:	subs	r1, ip, #2
   12e30:	add	r2, r2, r1, lsr #1
   12e34:	vmov.32	d8[0], r0
   12e38:	and	lr, r2, #1
   12e3c:	vmov.32	d8[1], r9
   12e40:	beq	12f34 <__assert_fail@plt+0x1988>
   12e44:	vorr	q8, q4, q4
   12e48:	sub	r3, r2, lr
   12e4c:	mov	r2, #0
   12e50:	add	r0, sp, #96	; 0x60
   12e54:	add	r1, sp, #92	; 0x5c
   12e58:	add	r7, r4, r2
   12e5c:	subs	r3, r3, #2
   12e60:	add	r2, r2, #4
   12e64:	ldrh	r5, [r7]
   12e68:	strh	r5, [sp, #92]	; 0x5c
   12e6c:	ldrh	r7, [r7, #2]
   12e70:	strh	r7, [sp, #96]	; 0x60
   12e74:	vld1.16	{d18[0]}, [r1 :16]
   12e78:	vld1.16	{d19[0]}, [r0 :16]
   12e7c:	add	r7, pc, #908	; 0x38c
   12e80:	vld1.64	{d22-d23}, [r7 :128]
   12e84:	vmovl.u8	q10, d18
   12e88:	vmovl.u8	q9, d19
   12e8c:	vmovl.u16	q10, d20
   12e90:	vmovl.u16	q9, d18
   12e94:	vceq.i32	d20, d20, d10
   12e98:	vceq.i32	d18, d18, d10
   12e9c:	vmovl.u32	q10, d20
   12ea0:	vmovl.u32	q9, d18
   12ea4:	vand	q10, q10, q11
   12ea8:	vand	q9, q9, q11
   12eac:	vadd.i64	q8, q8, q10
   12eb0:	vadd.i64	q8, q8, q9
   12eb4:	bne	12e58 <__assert_fail@plt+0x18ac>
   12eb8:	cmp	lr, #0
   12ebc:	beq	12ef4 <__assert_fail@plt+0x1948>
   12ec0:	add	r1, r4, r2
   12ec4:	ldrh	r1, [r1]
   12ec8:	strh	r1, [sp, #88]	; 0x58
   12ecc:	add	r1, sp, #88	; 0x58
   12ed0:	vld1.16	{d18[0]}, [r1 :16]
   12ed4:	add	r1, pc, #820	; 0x334
   12ed8:	vld1.64	{d20-d21}, [r1 :128]
   12edc:	vmovl.u8	q9, d18
   12ee0:	vmovl.u16	q9, d18
   12ee4:	vceq.i32	d18, d18, d10
   12ee8:	vmovl.u32	q9, d18
   12eec:	vand	q9, q9, q10
   12ef0:	vadd.i64	q8, q8, q9
   12ef4:	vorr	d18, d17, d17
   12ef8:	cmp	r6, ip
   12efc:	vadd.i64	q8, q8, q9
   12f00:	vmov.32	r7, d16[1]
   12f04:	vmov.32	sl, d16[0]
   12f08:	beq	12d48 <__assert_fail@plt+0x179c>
   12f0c:	add	r0, r4, ip
   12f10:	ldrb	r3, [r0], #1
   12f14:	adds	r1, sl, #1
   12f18:	adc	r2, r7, #0
   12f1c:	cmp	r3, #10
   12f20:	moveq	sl, r1
   12f24:	moveq	r7, r2
   12f28:	cmp	r8, r0
   12f2c:	bne	12f10 <__assert_fail@plt+0x1964>
   12f30:	b	12d48 <__assert_fail@plt+0x179c>
   12f34:	mov	r2, #0
   12f38:	vorr	q8, q4, q4
   12f3c:	cmp	lr, #0
   12f40:	bne	12ec0 <__assert_fail@plt+0x1914>
   12f44:	b	12ef4 <__assert_fail@plt+0x1948>
   12f48:	mov	r0, #0
   12f4c:	mov	r7, #0
   12f50:	add	r8, sp, #112	; 0x70
   12f54:	mov	r6, #0
   12f58:	mov	r4, #0
   12f5c:	mov	sl, #0
   12f60:	mov	r9, #0
   12f64:	str	r0, [sp, #52]	; 0x34
   12f68:	mov	r0, #0
   12f6c:	str	r0, [sp, #64]	; 0x40
   12f70:	mov	r0, #0
   12f74:	str	r0, [sp, #48]	; 0x30
   12f78:	mov	r0, #0
   12f7c:	str	r0, [sp, #68]	; 0x44
   12f80:	mov	r0, #0
   12f84:	str	r0, [sp, #80]	; 0x50
   12f88:	mov	r0, #0
   12f8c:	str	r0, [sp, #84]	; 0x54
   12f90:	b	12fc4 <__assert_fail@plt+0x1a18>
   12f94:	str	r7, [sp, #84]	; 0x54
   12f98:	ldr	r7, [sp, #40]	; 0x28
   12f9c:	ldr	r0, [sp, #76]	; 0x4c
   12fa0:	str	r6, [sp, #80]	; 0x50
   12fa4:	mov	r4, r2
   12fa8:	mov	r6, ip
   12fac:	add	r8, sp, #112	; 0x70
   12fb0:	str	r3, [sp, #68]	; 0x44
   12fb4:	adds	r7, r7, r0
   12fb8:	ldr	r0, [sp, #52]	; 0x34
   12fbc:	adc	r0, r0, #0
   12fc0:	str	r0, [sp, #52]	; 0x34
   12fc4:	ldr	r0, [sp, #44]	; 0x2c
   12fc8:	mov	r1, r8
   12fcc:	mov	r2, #16384	; 0x4000
   12fd0:	bl	16138 <__assert_fail@plt+0x4b8c>
   12fd4:	cmp	r0, #0
   12fd8:	beq	13408 <__assert_fail@plt+0x1e5c>
   12fdc:	cmn	r0, #1
   12fe0:	beq	13414 <__assert_fail@plt+0x1e68>
   12fe4:	str	r7, [sp, #40]	; 0x28
   12fe8:	mov	ip, r6
   12fec:	ldr	r3, [sp, #68]	; 0x44
   12ff0:	ldr	r6, [sp, #80]	; 0x50
   12ff4:	ldr	r7, [sp, #84]	; 0x54
   12ff8:	mov	r5, r0
   12ffc:	mov	r2, r4
   13000:	str	r0, [sp, #76]	; 0x4c
   13004:	ldrb	r4, [r8], #1
   13008:	sub	r0, r4, #9
   1300c:	cmp	r0, #23
   13010:	bls	1307c <__assert_fail@plt+0x1ad0>
   13014:	b	130fc <__assert_fail@plt+0x1b50>
   13018:	ldr	r0, [sp, #64]	; 0x40
   1301c:	adds	r0, r0, #1
   13020:	str	r0, [sp, #64]	; 0x40
   13024:	ldr	r0, [sp, #48]	; 0x30
   13028:	adc	r0, r0, #0
   1302c:	str	r0, [sp, #48]	; 0x30
   13030:	subs	r0, ip, sl
   13034:	sbcs	r0, r3, r9
   13038:	mov	r0, #0
   1303c:	movwcc	r0, #1
   13040:	cmp	r0, #0
   13044:	movne	r3, r9
   13048:	movne	ip, sl
   1304c:	mov	sl, #0
   13050:	mov	r9, #0
   13054:	and	r0, r2, #1
   13058:	mov	r2, #0
   1305c:	adds	r6, r6, r0
   13060:	adc	r7, r7, #0
   13064:	subs	r5, r5, #1
   13068:	beq	12f94 <__assert_fail@plt+0x19e8>
   1306c:	ldrb	r4, [r8], #1
   13070:	sub	r0, r4, #9
   13074:	cmp	r0, #23
   13078:	bhi	130fc <__assert_fail@plt+0x1b50>
   1307c:	add	r1, pc, #0
   13080:	ldr	pc, [r1, r0, lsl #2]
   13084:	andeq	r3, r1, r4, ror #1
   13088:	andeq	r3, r1, r8, lsl r0
   1308c:	andeq	r3, r1, r4, asr r0
   13090:	andeq	r3, r1, r0, lsr r0
   13094:	andeq	r3, r1, r0, lsr r0
   13098:	strdeq	r3, [r1], -ip
   1309c:	strdeq	r3, [r1], -ip
   130a0:	strdeq	r3, [r1], -ip
   130a4:	strdeq	r3, [r1], -ip
   130a8:	strdeq	r3, [r1], -ip
   130ac:	strdeq	r3, [r1], -ip
   130b0:	strdeq	r3, [r1], -ip
   130b4:	strdeq	r3, [r1], -ip
   130b8:	strdeq	r3, [r1], -ip
   130bc:	strdeq	r3, [r1], -ip
   130c0:	strdeq	r3, [r1], -ip
   130c4:	strdeq	r3, [r1], -ip
   130c8:	strdeq	r3, [r1], -ip
   130cc:	strdeq	r3, [r1], -ip
   130d0:	strdeq	r3, [r1], -ip
   130d4:	strdeq	r3, [r1], -ip
   130d8:	strdeq	r3, [r1], -ip
   130dc:	strdeq	r3, [r1], -ip
   130e0:	andeq	r3, r1, r8, lsr r1
   130e4:	and	r0, sl, #7
   130e8:	subs	r0, sl, r0
   130ec:	sbc	r1, r9, #0
   130f0:	adds	sl, r0, #8
   130f4:	adc	r9, r1, #0
   130f8:	b	13054 <__assert_fail@plt+0x1aa8>
   130fc:	str	r2, [sp, #84]	; 0x54
   13100:	str	r3, [sp, #68]	; 0x44
   13104:	str	ip, [sp, #80]	; 0x50
   13108:	bl	11444 <__ctype_b_loc@plt>
   1310c:	ldr	r0, [r0]
   13110:	add	r0, r0, r4, lsl #1
   13114:	ldrh	r0, [r0]
   13118:	tst	r0, #16384	; 0x4000
   1311c:	bne	13144 <__assert_fail@plt+0x1b98>
   13120:	ldr	ip, [sp, #80]	; 0x50
   13124:	ldr	r3, [sp, #68]	; 0x44
   13128:	ldr	r2, [sp, #84]	; 0x54
   1312c:	subs	r5, r5, #1
   13130:	bne	1306c <__assert_fail@plt+0x1ac0>
   13134:	b	12f94 <__assert_fail@plt+0x19e8>
   13138:	adds	sl, sl, #1
   1313c:	adc	r9, r9, #0
   13140:	b	13054 <__assert_fail@plt+0x1aa8>
   13144:	adds	sl, sl, #1
   13148:	adc	r9, r9, #0
   1314c:	tst	r0, #8192	; 0x2000
   13150:	bne	13188 <__assert_fail@plt+0x1bdc>
   13154:	mov	r0, r4
   13158:	bl	114d4 <btowc@plt>
   1315c:	movw	r1, #37280	; 0x91a0
   13160:	movt	r1, #2
   13164:	ldrb	r1, [r1]
   13168:	cmp	r1, #0
   1316c:	beq	13198 <__assert_fail@plt+0x1bec>
   13170:	ldr	ip, [sp, #80]	; 0x50
   13174:	ldr	r3, [sp, #68]	; 0x44
   13178:	mov	r2, #1
   1317c:	subs	r5, r5, #1
   13180:	bne	1306c <__assert_fail@plt+0x1ac0>
   13184:	b	12f94 <__assert_fail@plt+0x19e8>
   13188:	ldr	ip, [sp, #80]	; 0x50
   1318c:	ldr	r3, [sp, #68]	; 0x44
   13190:	ldr	r2, [sp, #84]	; 0x54
   13194:	b	13054 <__assert_fail@plt+0x1aa8>
   13198:	movw	r1, #8238	; 0x202e
   1319c:	cmp	r0, r1
   131a0:	bgt	131d4 <__assert_fail@plt+0x1c28>
   131a4:	ldr	ip, [sp, #80]	; 0x50
   131a8:	ldr	r3, [sp, #68]	; 0x44
   131ac:	ldr	r2, [sp, #84]	; 0x54
   131b0:	cmp	r0, #160	; 0xa0
   131b4:	beq	13054 <__assert_fail@plt+0x1aa8>
   131b8:	movw	r1, #8199	; 0x2007
   131bc:	cmp	r0, r1
   131c0:	beq	13054 <__assert_fail@plt+0x1aa8>
   131c4:	mov	r2, #1
   131c8:	subs	r5, r5, #1
   131cc:	bne	1306c <__assert_fail@plt+0x1ac0>
   131d0:	b	12f94 <__assert_fail@plt+0x19e8>
   131d4:	ldr	ip, [sp, #80]	; 0x50
   131d8:	ldr	r3, [sp, #68]	; 0x44
   131dc:	ldr	r2, [sp, #84]	; 0x54
   131e0:	movw	r1, #8239	; 0x202f
   131e4:	cmp	r0, r1
   131e8:	beq	13054 <__assert_fail@plt+0x1aa8>
   131ec:	movw	r1, #8288	; 0x2060
   131f0:	cmp	r0, r1
   131f4:	beq	13054 <__assert_fail@plt+0x1aa8>
   131f8:	b	131c4 <__assert_fail@plt+0x1c18>
   131fc:	mov	r1, r7
   13200:	ldr	r7, [sp, #40]	; 0x28
   13204:	mov	ip, sl
   13208:	mov	r0, #1
   1320c:	b	13268 <__assert_fail@plt+0x1cbc>
   13210:	andeq	r0, r0, r1
   13214:	andeq	r0, r0, r0
   13218:	andeq	r0, r0, r1
   1321c:	andeq	r0, r0, r0
   13220:	bl	114a4 <__errno_location@plt>
   13224:	ldr	r2, [sp, #28]
   13228:	ldr	r4, [r0]
   1322c:	mov	r0, #0
   13230:	mov	r1, #3
   13234:	mov	r7, #0
   13238:	bl	15b38 <__assert_fail@plt+0x458c>
   1323c:	movw	r2, #33484	; 0x82cc
   13240:	mov	r3, r0
   13244:	mov	r0, #0
   13248:	mov	r1, r4
   1324c:	movt	r2, #1
   13250:	bl	113d8 <error@plt>
   13254:	mov	r0, #0
   13258:	mov	ip, #0
   1325c:	mov	r1, #0
   13260:	str	r0, [sp, #52]	; 0x34
   13264:	mov	r0, #0
   13268:	str	r0, [sp, #44]	; 0x2c
   1326c:	mov	lr, #0
   13270:	mov	r3, #0
   13274:	mov	r5, #0
   13278:	mov	r9, #0
   1327c:	mov	r2, #0
   13280:	mov	r6, #0
   13284:	mov	sl, r1
   13288:	b	1352c <__assert_fail@plt+0x1f80>
   1328c:	mov	r0, #0
   13290:	mov	r6, #0
   13294:	str	r0, [sp, #52]	; 0x34
   13298:	mov	r0, #2
   1329c:	mov	r2, #0
   132a0:	mov	r3, #0
   132a4:	str	r7, [sp]
   132a8:	str	r7, [sp, #4]
   132ac:	str	r0, [sp, #8]
   132b0:	ldr	r0, [sp, #44]	; 0x2c
   132b4:	bl	13920 <__assert_fail@plt+0x2374>
   132b8:	movw	r8, #37280	; 0x91a0
   132bc:	add	r4, sp, #112	; 0x70
   132c0:	mov	r7, r6
   132c4:	movt	r8, #2
   132c8:	ldr	r0, [sp, #44]	; 0x2c
   132cc:	mov	r1, r4
   132d0:	mov	r2, #16384	; 0x4000
   132d4:	bl	16138 <__assert_fail@plt+0x4b8c>
   132d8:	cmp	r0, #0
   132dc:	beq	132fc <__assert_fail@plt+0x1d50>
   132e0:	cmn	r0, #1
   132e4:	beq	13304 <__assert_fail@plt+0x1d58>
   132e8:	adds	r7, r7, r0
   132ec:	ldr	r0, [sp, #52]	; 0x34
   132f0:	adc	r0, r0, #0
   132f4:	str	r0, [sp, #52]	; 0x34
   132f8:	b	132c8 <__assert_fail@plt+0x1d1c>
   132fc:	mov	r0, #1
   13300:	b	13338 <__assert_fail@plt+0x1d8c>
   13304:	bl	114a4 <__errno_location@plt>
   13308:	ldr	r2, [sp, #28]
   1330c:	ldr	r4, [r0]
   13310:	mov	r0, #0
   13314:	mov	r1, #3
   13318:	bl	15b38 <__assert_fail@plt+0x458c>
   1331c:	movw	r2, #33484	; 0x82cc
   13320:	mov	r3, r0
   13324:	mov	r0, #0
   13328:	mov	r1, r4
   1332c:	movt	r2, #1
   13330:	bl	113d8 <error@plt>
   13334:	mov	r0, #0
   13338:	mov	ip, #0
   1333c:	mov	sl, #0
   13340:	mov	lr, #0
   13344:	mov	r3, #0
   13348:	mov	r5, #0
   1334c:	mov	r9, #0
   13350:	mov	r2, #0
   13354:	mov	r6, #0
   13358:	str	r0, [sp, #44]	; 0x2c
   1335c:	b	1352c <__assert_fail@plt+0x1f80>
   13360:	mov	r0, #1
   13364:	str	r0, [sp, #44]	; 0x2c
   13368:	b	133a4 <__assert_fail@plt+0x1df8>
   1336c:	bl	114a4 <__errno_location@plt>
   13370:	ldr	r2, [sp, #28]
   13374:	ldr	r6, [r0]
   13378:	mov	r0, #0
   1337c:	mov	r1, #3
   13380:	str	r0, [sp, #44]	; 0x2c
   13384:	mov	r0, #0
   13388:	bl	15b38 <__assert_fail@plt+0x458c>
   1338c:	movw	r2, #33484	; 0x82cc
   13390:	mov	r3, r0
   13394:	mov	r0, #0
   13398:	mov	r1, r6
   1339c:	movt	r2, #1
   133a0:	bl	113d8 <error@plt>
   133a4:	ldr	r7, [sp, #60]	; 0x3c
   133a8:	ldr	r3, [sp, #68]	; 0x44
   133ac:	ldr	r6, [sp, #56]	; 0x38
   133b0:	mov	r0, #0
   133b4:	mov	lr, r8
   133b8:	ldr	ip, [sp, #64]	; 0x40
   133bc:	ldr	sl, [sp, #48]	; 0x30
   133c0:	ldr	r5, [sp, #84]	; 0x54
   133c4:	mov	r9, r4
   133c8:	subs	r1, r8, r7
   133cc:	movw	r8, #37280	; 0x91a0
   133d0:	sbcs	r1, r3, r6
   133d4:	ldr	r1, [sp, #76]	; 0x4c
   133d8:	movt	r8, #2
   133dc:	movwcc	r0, #1
   133e0:	cmp	r0, #0
   133e4:	ldr	r0, [sp, #80]	; 0x50
   133e8:	movne	lr, r7
   133ec:	movne	r3, r6
   133f0:	ldr	r7, [sp, #40]	; 0x28
   133f4:	and	r0, r0, #1
   133f8:	adds	r2, r1, r0
   133fc:	ldr	r0, [sp, #72]	; 0x48
   13400:	adc	r6, r0, #0
   13404:	b	1352c <__assert_fail@plt+0x1f80>
   13408:	mov	r0, #1
   1340c:	str	r0, [sp, #44]	; 0x2c
   13410:	b	1344c <__assert_fail@plt+0x1ea0>
   13414:	bl	114a4 <__errno_location@plt>
   13418:	ldr	r2, [sp, #28]
   1341c:	ldr	r5, [r0]
   13420:	mov	r0, #0
   13424:	mov	r1, #3
   13428:	str	r0, [sp, #44]	; 0x2c
   1342c:	mov	r0, #0
   13430:	bl	15b38 <__assert_fail@plt+0x458c>
   13434:	movw	r2, #33484	; 0x82cc
   13438:	mov	r3, r0
   1343c:	mov	r0, #0
   13440:	mov	r1, r5
   13444:	movt	r2, #1
   13448:	bl	113d8 <error@plt>
   1344c:	ldr	r3, [sp, #68]	; 0x44
   13450:	subs	r0, r6, sl
   13454:	ldr	r1, [sp, #80]	; 0x50
   13458:	mov	lr, r6
   1345c:	ldr	ip, [sp, #64]	; 0x40
   13460:	movw	r8, #37280	; 0x91a0
   13464:	mov	r5, #0
   13468:	movt	r8, #2
   1346c:	sbcs	r0, r3, r9
   13470:	mov	r0, #0
   13474:	movwcc	r0, #1
   13478:	cmp	r0, #0
   1347c:	and	r0, r4, #1
   13480:	movne	r3, r9
   13484:	movne	lr, sl
   13488:	adds	r2, r1, r0
   1348c:	ldr	r0, [sp, #84]	; 0x54
   13490:	ldr	sl, [sp, #48]	; 0x30
   13494:	mov	r9, #0
   13498:	adc	r6, r0, #0
   1349c:	b	1352c <__assert_fail@plt+0x1f80>
   134a0:	mov	r0, #1
   134a4:	mov	r2, #0
   134a8:	mov	r3, #0
   134ac:	str	r0, [sp]
   134b0:	ldr	r0, [sp, #44]	; 0x2c
   134b4:	bl	113a8 <lseek64@plt>
   134b8:	mov	r5, r0
   134bc:	mov	r8, r1
   134c0:	movw	r0, #37280	; 0x91a0
   134c4:	movt	r0, #2
   134c8:	ldr	r0, [r0, #8]
   134cc:	udiv	r1, r6, r0
   134d0:	mls	r0, r1, r0, r6
   134d4:	cmp	r0, #0
   134d8:	beq	1361c <__assert_fail@plt+0x2070>
   134dc:	subs	r7, r6, r5
   134e0:	mov	r0, #0
   134e4:	mov	ip, #0
   134e8:	mov	sl, #0
   134ec:	mov	lr, #0
   134f0:	mov	r3, #0
   134f4:	mov	r5, #0
   134f8:	mov	r9, #0
   134fc:	mov	r2, #0
   13500:	mov	r6, #0
   13504:	rscs	r1, r8, #0
   13508:	movw	r8, #37280	; 0x91a0
   1350c:	movwlt	r0, #1
   13510:	movt	r8, #2
   13514:	cmp	r0, #0
   13518:	mov	r0, #1
   1351c:	movwne	r1, #0
   13520:	movwne	r7, #0
   13524:	str	r0, [sp, #44]	; 0x2c
   13528:	str	r1, [sp, #52]	; 0x34
   1352c:	ldr	r1, [sp, #32]
   13530:	ldrb	r0, [r8, #2]
   13534:	ldr	r4, [sp, #52]	; 0x34
   13538:	str	r3, [sp, #68]	; 0x44
   1353c:	str	r2, [sp, #76]	; 0x4c
   13540:	str	lr, [sp, #80]	; 0x50
   13544:	eor	r1, r1, #1
   13548:	ands	r0, r0, r1
   1354c:	ldr	r0, [sp, #36]	; 0x24
   13550:	mov	r1, sl
   13554:	movne	r5, r7
   13558:	movne	r9, r4
   1355c:	stm	sp, {r5, r9}
   13560:	str	r3, [sp, #20]
   13564:	mov	r3, r6
   13568:	str	r5, [sp, #84]	; 0x54
   1356c:	str	r7, [sp, #8]
   13570:	str	r4, [sp, #12]
   13574:	str	lr, [sp, #16]
   13578:	mov	r5, ip
   1357c:	str	r0, [sp, #24]
   13580:	mov	r0, ip
   13584:	bl	1258c <__assert_fail@plt+0xfe0>
   13588:	ldr	r0, [r8, #56]	; 0x38
   1358c:	ldr	r1, [sp, #76]	; 0x4c
   13590:	ldr	r2, [sp, #84]	; 0x54
   13594:	add	r3, r8, #24
   13598:	adds	r0, r0, r5
   1359c:	ldr	r5, [sp, #80]	; 0x50
   135a0:	str	r0, [r8, #56]	; 0x38
   135a4:	ldr	r0, [r8, #60]	; 0x3c
   135a8:	adc	r0, r0, sl
   135ac:	str	r0, [r8, #60]	; 0x3c
   135b0:	ldr	r0, [r8, #48]	; 0x30
   135b4:	adds	r0, r0, r1
   135b8:	str	r0, [r8, #48]	; 0x30
   135bc:	ldr	r0, [r8, #52]	; 0x34
   135c0:	ldr	r1, [r8, #40]	; 0x28
   135c4:	adc	r0, r0, r6
   135c8:	ldr	r6, [sp, #68]	; 0x44
   135cc:	adds	r1, r1, r2
   135d0:	str	r1, [r8, #40]	; 0x28
   135d4:	str	r0, [r8, #52]	; 0x34
   135d8:	ldr	r0, [r8, #44]	; 0x2c
   135dc:	adc	r0, r0, r9
   135e0:	str	r0, [r8, #44]	; 0x2c
   135e4:	ldm	r3, {r0, r1, r2, r3}
   135e8:	adds	r2, r2, r7
   135ec:	str	r2, [r8, #32]
   135f0:	adc	r2, r3, r4
   135f4:	str	r2, [r8, #36]	; 0x24
   135f8:	subs	r0, r0, r5
   135fc:	sbcs	r0, r1, r6
   13600:	ldr	r0, [sp, #44]	; 0x2c
   13604:	strcc	r5, [r8, #24]
   13608:	strcc	r6, [r8, #28]
   1360c:	sub	sp, fp, #56	; 0x38
   13610:	vpop	{d8-d10}
   13614:	add	sp, sp, #4
   13618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1361c:	ldr	r0, [r4, #64]	; 0x40
   13620:	movw	r1, #513	; 0x201
   13624:	movw	r2, #513	; 0x201
   13628:	cmp	r0, #536870913	; 0x20000001
   1362c:	addcc	r2, r0, #1
   13630:	cmp	r0, #0
   13634:	movle	r2, r1
   13638:	udiv	r0, r6, r2
   1363c:	mov	r6, #0
   13640:	mul	r4, r0, r2
   13644:	subs	r0, r5, r4
   13648:	sbcs	r0, r8, #0
   1364c:	mov	r0, #0
   13650:	str	r0, [sp, #52]	; 0x34
   13654:	bcs	13298 <__assert_fail@plt+0x1cec>
   13658:	mov	r0, #1
   1365c:	mov	r2, r4
   13660:	mov	r3, #0
   13664:	mvn	r9, #0
   13668:	mov	r6, #0
   1366c:	str	r0, [sp]
   13670:	ldr	r0, [sp, #44]	; 0x2c
   13674:	bl	113a8 <lseek64@plt>
   13678:	subs	r0, r9, r0
   1367c:	sbcs	r0, r9, r1
   13680:	movwlt	r6, #1
   13684:	subs	r0, r4, r5
   13688:	rsc	r1, r8, #0
   1368c:	cmp	r6, #0
   13690:	moveq	r0, r6
   13694:	moveq	r1, r6
   13698:	mov	r6, r0
   1369c:	str	r1, [sp, #52]	; 0x34
   136a0:	b	13298 <__assert_fail@plt+0x1cec>
   136a4:	push	{r4, sl, fp, lr}
   136a8:	add	fp, sp, #8
   136ac:	mov	r4, r0
   136b0:	mov	r0, #24
   136b4:	bl	16e30 <__assert_fail@plt+0x5884>
   136b8:	cmp	r0, #0
   136bc:	moveq	r0, #0
   136c0:	movne	r1, #0
   136c4:	strne	r4, [r0, #16]
   136c8:	strne	r4, [r0, #20]
   136cc:	strne	r1, [r0]
   136d0:	pop	{r4, sl, fp, pc}
   136d4:	push	{r4, sl, fp, lr}
   136d8:	add	fp, sp, #8
   136dc:	mov	r4, r0
   136e0:	mov	r0, #24
   136e4:	bl	16e30 <__assert_fail@plt+0x5884>
   136e8:	cmp	r0, #0
   136ec:	beq	13704 <__assert_fail@plt+0x2158>
   136f0:	vmov.i32	q8, #0	; 0x00000000
   136f4:	mov	r1, r0
   136f8:	str	r4, [r1], #4
   136fc:	vst1.32	{d16-d17}, [r1]
   13700:	pop	{r4, sl, fp, pc}
   13704:	mov	r0, #0
   13708:	pop	{r4, sl, fp, pc}
   1370c:	push	{r4, r5, r6, sl, fp, lr}
   13710:	add	fp, sp, #16
   13714:	ldr	r3, [r0]
   13718:	mov	r4, r1
   1371c:	mov	r5, r0
   13720:	cmp	r3, #0
   13724:	beq	13760 <__assert_fail@plt+0x21b4>
   13728:	add	r0, r5, #8
   1372c:	add	r1, r5, #12
   13730:	mov	r2, #0
   13734:	mov	r6, #0
   13738:	bl	11570 <getdelim@plt>
   1373c:	cmn	r0, #1
   13740:	ble	13790 <__assert_fail@plt+0x21e4>
   13744:	mov	r0, #1
   13748:	str	r0, [r4]
   1374c:	ldmib	r5, {r0, r6}
   13750:	add	r0, r0, #1
   13754:	str	r0, [r5, #4]
   13758:	mov	r0, r6
   1375c:	pop	{r4, r5, r6, sl, fp, pc}
   13760:	ldr	r0, [r5, #20]
   13764:	ldr	r0, [r0]
   13768:	cmp	r0, #0
   1376c:	beq	137b0 <__assert_fail@plt+0x2204>
   13770:	mov	r0, #1
   13774:	str	r0, [r4]
   13778:	ldr	r0, [r5, #20]
   1377c:	add	r1, r0, #4
   13780:	str	r1, [r5, #20]
   13784:	ldr	r6, [r0]
   13788:	mov	r0, r6
   1378c:	pop	{r4, r5, r6, sl, fp, pc}
   13790:	ldr	r0, [r5]
   13794:	bl	1145c <feof@plt>
   13798:	cmp	r0, #0
   1379c:	mov	r1, #2
   137a0:	mov	r0, r6
   137a4:	movweq	r1, #4
   137a8:	str	r1, [r4]
   137ac:	pop	{r4, r5, r6, sl, fp, pc}
   137b0:	mov	r0, #2
   137b4:	mov	r6, #0
   137b8:	str	r0, [r4]
   137bc:	mov	r0, r6
   137c0:	pop	{r4, r5, r6, sl, fp, pc}
   137c4:	ldr	r1, [r0]
   137c8:	cmp	r1, #0
   137cc:	ldrne	r0, [r0, #4]
   137d0:	bxne	lr
   137d4:	ldr	r1, [r0, #16]
   137d8:	ldr	r0, [r0, #20]
   137dc:	sub	r0, r0, r1
   137e0:	asr	r0, r0, #2
   137e4:	bx	lr
   137e8:	push	{r4, sl, fp, lr}
   137ec:	add	fp, sp, #8
   137f0:	mov	r4, r0
   137f4:	ldr	r0, [r0]
   137f8:	cmp	r0, #0
   137fc:	beq	13808 <__assert_fail@plt+0x225c>
   13800:	ldr	r0, [r4, #8]
   13804:	bl	13a58 <__assert_fail@plt+0x24ac>
   13808:	mov	r0, r4
   1380c:	pop	{r4, sl, fp, lr}
   13810:	b	13a58 <__assert_fail@plt+0x24ac>
   13814:	movw	r1, #37344	; 0x91e0
   13818:	movt	r1, #2
   1381c:	str	r0, [r1, #4]
   13820:	bx	lr
   13824:	movw	r1, #37344	; 0x91e0
   13828:	movt	r1, #2
   1382c:	strb	r0, [r1]
   13830:	bx	lr
   13834:	push	{r4, r5, r6, sl, fp, lr}
   13838:	add	fp, sp, #16
   1383c:	sub	sp, sp, #8
   13840:	movw	r0, #37268	; 0x9194
   13844:	movt	r0, #2
   13848:	ldr	r0, [r0]
   1384c:	bl	16eb4 <__assert_fail@plt+0x5908>
   13850:	cmp	r0, #0
   13854:	beq	1387c <__assert_fail@plt+0x22d0>
   13858:	movw	r5, #37344	; 0x91e0
   1385c:	movt	r5, #2
   13860:	ldrb	r0, [r5]
   13864:	cmp	r0, #0
   13868:	beq	138a8 <__assert_fail@plt+0x22fc>
   1386c:	bl	114a4 <__errno_location@plt>
   13870:	ldr	r0, [r0]
   13874:	cmp	r0, #32
   13878:	bne	138a8 <__assert_fail@plt+0x22fc>
   1387c:	movw	r0, #37256	; 0x9188
   13880:	movt	r0, #2
   13884:	ldr	r0, [r0]
   13888:	bl	16eb4 <__assert_fail@plt+0x5908>
   1388c:	cmp	r0, #0
   13890:	subeq	sp, fp, #16
   13894:	popeq	{r4, r5, r6, sl, fp, pc}
   13898:	movw	r0, #37164	; 0x912c
   1389c:	movt	r0, #2
   138a0:	ldr	r0, [r0]
   138a4:	bl	11318 <_exit@plt>
   138a8:	movw	r1, #33468	; 0x82bc
   138ac:	mov	r0, #0
   138b0:	mov	r2, #5
   138b4:	movt	r1, #1
   138b8:	bl	1133c <dcgettext@plt>
   138bc:	ldr	r6, [r5, #4]
   138c0:	mov	r4, r0
   138c4:	bl	114a4 <__errno_location@plt>
   138c8:	ldr	r5, [r0]
   138cc:	cmp	r6, #0
   138d0:	bne	138ec <__assert_fail@plt+0x2340>
   138d4:	movw	r2, #33484	; 0x82cc
   138d8:	mov	r0, #0
   138dc:	mov	r1, r5
   138e0:	mov	r3, r4
   138e4:	movt	r2, #1
   138e8:	b	1390c <__assert_fail@plt+0x2360>
   138ec:	mov	r0, r6
   138f0:	bl	15a5c <__assert_fail@plt+0x44b0>
   138f4:	movw	r2, #33480	; 0x82c8
   138f8:	mov	r3, r0
   138fc:	str	r4, [sp]
   13900:	mov	r0, #0
   13904:	mov	r1, r5
   13908:	movt	r2, #1
   1390c:	bl	113d8 <error@plt>
   13910:	movw	r0, #37164	; 0x912c
   13914:	movt	r0, #2
   13918:	ldr	r0, [r0]
   1391c:	bl	11318 <_exit@plt>
   13920:	b	112c4 <posix_fadvise64@plt>
   13924:	cmp	r0, #0
   13928:	bxeq	lr
   1392c:	push	{r4, sl, fp, lr}
   13930:	add	fp, sp, #8
   13934:	sub	sp, sp, #16
   13938:	mov	r4, r1
   1393c:	bl	114f8 <fileno@plt>
   13940:	mov	r1, #0
   13944:	mov	r2, #0
   13948:	mov	r3, #0
   1394c:	str	r1, [sp]
   13950:	stmib	sp, {r1, r4}
   13954:	bl	112c4 <posix_fadvise64@plt>
   13958:	sub	sp, fp, #8
   1395c:	pop	{r4, sl, fp, pc}
   13960:	push	{r4, r5, r6, sl, fp, lr}
   13964:	add	fp, sp, #16
   13968:	sub	sp, sp, #8
   1396c:	mov	r4, r0
   13970:	bl	114f8 <fileno@plt>
   13974:	cmn	r0, #1
   13978:	ble	139ec <__assert_fail@plt+0x2440>
   1397c:	mov	r0, r4
   13980:	bl	11420 <__freading@plt>
   13984:	cmp	r0, #0
   13988:	beq	139b4 <__assert_fail@plt+0x2408>
   1398c:	mov	r0, r4
   13990:	bl	114f8 <fileno@plt>
   13994:	mov	r1, #1
   13998:	mov	r2, #0
   1399c:	mov	r3, #0
   139a0:	str	r1, [sp]
   139a4:	bl	113a8 <lseek64@plt>
   139a8:	and	r0, r0, r1
   139ac:	cmn	r0, #1
   139b0:	beq	139ec <__assert_fail@plt+0x2440>
   139b4:	mov	r0, r4
   139b8:	bl	139fc <__assert_fail@plt+0x2450>
   139bc:	cmp	r0, #0
   139c0:	beq	139ec <__assert_fail@plt+0x2440>
   139c4:	bl	114a4 <__errno_location@plt>
   139c8:	ldr	r6, [r0]
   139cc:	mov	r5, r0
   139d0:	mov	r0, r4
   139d4:	bl	11510 <fclose@plt>
   139d8:	cmp	r6, #0
   139dc:	strne	r6, [r5]
   139e0:	mvnne	r0, #0
   139e4:	sub	sp, fp, #16
   139e8:	pop	{r4, r5, r6, sl, fp, pc}
   139ec:	mov	r0, r4
   139f0:	sub	sp, fp, #16
   139f4:	pop	{r4, r5, r6, sl, fp, lr}
   139f8:	b	11510 <fclose@plt>
   139fc:	push	{r4, sl, fp, lr}
   13a00:	add	fp, sp, #8
   13a04:	sub	sp, sp, #8
   13a08:	mov	r4, r0
   13a0c:	cmp	r0, #0
   13a10:	beq	13a48 <__assert_fail@plt+0x249c>
   13a14:	mov	r0, r4
   13a18:	bl	11420 <__freading@plt>
   13a1c:	cmp	r0, #0
   13a20:	beq	13a48 <__assert_fail@plt+0x249c>
   13a24:	ldrb	r0, [r4, #1]
   13a28:	tst	r0, #1
   13a2c:	beq	13a48 <__assert_fail@plt+0x249c>
   13a30:	mov	r0, #1
   13a34:	mov	r2, #0
   13a38:	mov	r3, #0
   13a3c:	str	r0, [sp]
   13a40:	mov	r0, r4
   13a44:	bl	13a80 <__assert_fail@plt+0x24d4>
   13a48:	mov	r0, r4
   13a4c:	sub	sp, fp, #8
   13a50:	pop	{r4, sl, fp, lr}
   13a54:	b	112dc <fflush@plt>
   13a58:	push	{r4, r5, r6, sl, fp, lr}
   13a5c:	add	fp, sp, #16
   13a60:	mov	r4, r0
   13a64:	bl	114a4 <__errno_location@plt>
   13a68:	ldr	r6, [r0]
   13a6c:	mov	r5, r0
   13a70:	mov	r0, r4
   13a74:	bl	11300 <free@plt>
   13a78:	str	r6, [r5]
   13a7c:	pop	{r4, r5, r6, sl, fp, pc}
   13a80:	push	{r4, r5, r6, r7, fp, lr}
   13a84:	add	fp, sp, #16
   13a88:	sub	sp, sp, #8
   13a8c:	mov	r4, r0
   13a90:	ldr	r0, [r0, #4]
   13a94:	mov	r5, r3
   13a98:	mov	r6, r2
   13a9c:	ldr	r1, [r4, #8]
   13aa0:	cmp	r1, r0
   13aa4:	bne	13ac0 <__assert_fail@plt+0x2514>
   13aa8:	ldrd	r0, [r4, #16]
   13aac:	cmp	r1, r0
   13ab0:	bne	13ac0 <__assert_fail@plt+0x2514>
   13ab4:	ldr	r0, [r4, #36]	; 0x24
   13ab8:	cmp	r0, #0
   13abc:	beq	13ad8 <__assert_fail@plt+0x252c>
   13ac0:	mov	r0, r4
   13ac4:	mov	r2, r6
   13ac8:	mov	r3, r5
   13acc:	sub	sp, fp, #16
   13ad0:	pop	{r4, r5, r6, r7, fp, lr}
   13ad4:	b	1151c <fseeko64@plt>
   13ad8:	ldr	r7, [fp, #8]
   13adc:	mov	r0, r4
   13ae0:	bl	114f8 <fileno@plt>
   13ae4:	mov	r2, r6
   13ae8:	mov	r3, r5
   13aec:	str	r7, [sp]
   13af0:	bl	113a8 <lseek64@plt>
   13af4:	and	r2, r0, r1
   13af8:	cmn	r2, #1
   13afc:	beq	13b1c <__assert_fail@plt+0x2570>
   13b00:	strd	r0, [r4, #80]	; 0x50
   13b04:	ldr	r0, [r4]
   13b08:	bic	r0, r0, #16
   13b0c:	str	r0, [r4]
   13b10:	mov	r0, #0
   13b14:	sub	sp, fp, #16
   13b18:	pop	{r4, r5, r6, r7, fp, pc}
   13b1c:	mvn	r0, #0
   13b20:	sub	sp, fp, #16
   13b24:	pop	{r4, r5, r6, r7, fp, pc}
   13b28:	push	{r4, r5, r6, sl, fp, lr}
   13b2c:	add	fp, sp, #16
   13b30:	mov	r5, r0
   13b34:	mov	r0, #0
   13b38:	mov	r4, r1
   13b3c:	add	r6, r2, #19
   13b40:	strb	r0, [r2, #20]
   13b44:	mov	r0, r5
   13b48:	mov	r1, r4
   13b4c:	mov	r2, #10
   13b50:	mov	r3, #0
   13b54:	bl	1788c <_obstack_memory_used@@Base+0x514>
   13b58:	add	r2, r0, r0, lsl #2
   13b5c:	sub	r2, r5, r2, lsl #1
   13b60:	orr	r2, r2, #48	; 0x30
   13b64:	strb	r2, [r6], #-1
   13b68:	rsbs	r2, r5, #9
   13b6c:	mov	r5, r0
   13b70:	rscs	r2, r4, #0
   13b74:	mov	r4, r1
   13b78:	bcc	13b44 <__assert_fail@plt+0x2598>
   13b7c:	add	r0, r6, #1
   13b80:	pop	{r4, r5, r6, sl, fp, pc}
   13b84:	push	{r4, sl, fp, lr}
   13b88:	add	fp, sp, #8
   13b8c:	mov	r4, r0
   13b90:	bl	112e8 <wcwidth@plt>
   13b94:	cmn	r0, #1
   13b98:	popgt	{r4, sl, fp, pc}
   13b9c:	mov	r0, r4
   13ba0:	bl	1136c <iswcntrl@plt>
   13ba4:	clz	r0, r0
   13ba8:	lsr	r0, r0, #5
   13bac:	pop	{r4, sl, fp, pc}
   13bb0:	push	{r4, r5, r6, sl, fp, lr}
   13bb4:	add	fp, sp, #16
   13bb8:	mov	r4, r0
   13bbc:	mov	r0, r1
   13bc0:	mov	r5, r1
   13bc4:	ldr	r1, [r0], #16
   13bc8:	cmp	r1, r0
   13bcc:	beq	13bd8 <__assert_fail@plt+0x262c>
   13bd0:	mov	r6, r1
   13bd4:	b	13be8 <__assert_fail@plt+0x263c>
   13bd8:	ldr	r2, [r5, #4]
   13bdc:	add	r6, r4, #16
   13be0:	mov	r0, r6
   13be4:	bl	11324 <memcpy@plt>
   13be8:	str	r6, [r4]
   13bec:	ldr	r0, [r5, #4]
   13bf0:	str	r0, [r4, #4]
   13bf4:	ldrb	r0, [r5, #8]
   13bf8:	strb	r0, [r4, #8]
   13bfc:	cmp	r0, #0
   13c00:	ldrne	r0, [r5, #12]
   13c04:	strne	r0, [r4, #12]
   13c08:	pop	{r4, r5, r6, sl, fp, pc}
   13c0c:	movw	r2, #33488	; 0x82d0
   13c10:	ubfx	r1, r0, #5, #3
   13c14:	and	r0, r0, #31
   13c18:	movt	r2, #1
   13c1c:	ldr	r1, [r2, r1, lsl #2]
   13c20:	mov	r2, #1
   13c24:	and	r0, r1, r2, lsl r0
   13c28:	cmp	r0, #0
   13c2c:	movwne	r0, #1
   13c30:	bx	lr
   13c34:	push	{r4, r5, r6, r7, fp, lr}
   13c38:	add	fp, sp, #16
   13c3c:	sub	sp, sp, #8
   13c40:	cmp	r0, #0
   13c44:	add	r5, sp, #4
   13c48:	mov	r7, r2
   13c4c:	mov	r4, r1
   13c50:	movne	r5, r0
   13c54:	mov	r0, r5
   13c58:	bl	113cc <mbrtowc@plt>
   13c5c:	mov	r6, r0
   13c60:	cmp	r7, #0
   13c64:	beq	13c8c <__assert_fail@plt+0x26e0>
   13c68:	cmn	r6, #2
   13c6c:	bcc	13c8c <__assert_fail@plt+0x26e0>
   13c70:	mov	r0, #0
   13c74:	bl	16f38 <__assert_fail@plt+0x598c>
   13c78:	cmp	r0, #0
   13c7c:	bne	13c8c <__assert_fail@plt+0x26e0>
   13c80:	ldrb	r0, [r4]
   13c84:	mov	r6, #1
   13c88:	str	r0, [r5]
   13c8c:	mov	r0, r6
   13c90:	sub	sp, fp, #16
   13c94:	pop	{r4, r5, r6, r7, fp, pc}
   13c98:	push	{r4, sl, fp, lr}
   13c9c:	add	fp, sp, #8
   13ca0:	sub	sp, sp, #64	; 0x40
   13ca4:	mov	r0, #85	; 0x55
   13ca8:	bl	11348 <sysconf@plt>
   13cac:	mov	r4, r0
   13cb0:	mov	r0, #30
   13cb4:	bl	11348 <sysconf@plt>
   13cb8:	orr	r1, r0, r4
   13cbc:	cmn	r1, #1
   13cc0:	ble	13ce0 <__assert_fail@plt+0x2734>
   13cc4:	vmov	s0, r0
   13cc8:	vcvt.f64.s32	d16, s0
   13ccc:	vmov	s0, r4
   13cd0:	vcvt.f64.s32	d17, s0
   13cd4:	vmul.f64	d0, d17, d16
   13cd8:	sub	sp, fp, #8
   13cdc:	pop	{r4, sl, fp, pc}
   13ce0:	mov	r0, sp
   13ce4:	bl	113fc <sysinfo@plt>
   13ce8:	cmp	r0, #0
   13cec:	beq	13cfc <__assert_fail@plt+0x2750>
   13cf0:	vldr	d0, [pc, #32]	; 13d18 <__assert_fail@plt+0x276c>
   13cf4:	sub	sp, fp, #8
   13cf8:	pop	{r4, sl, fp, pc}
   13cfc:	vldr	s0, [sp, #16]
   13d00:	vldr	s2, [sp, #52]	; 0x34
   13d04:	vcvt.f64.u32	d16, s2
   13d08:	vcvt.f64.u32	d17, s0
   13d0c:	vmul.f64	d0, d17, d16
   13d10:	sub	sp, fp, #8
   13d14:	pop	{r4, sl, fp, pc}
   13d18:	andeq	r0, r0, r0
   13d1c:	orrsmi	r0, r0, r0
   13d20:	push	{r4, sl, fp, lr}
   13d24:	add	fp, sp, #8
   13d28:	sub	sp, sp, #64	; 0x40
   13d2c:	mov	r0, #86	; 0x56
   13d30:	bl	11348 <sysconf@plt>
   13d34:	mov	r4, r0
   13d38:	mov	r0, #30
   13d3c:	bl	11348 <sysconf@plt>
   13d40:	orrs	r1, r0, r4
   13d44:	bmi	13d64 <__assert_fail@plt+0x27b8>
   13d48:	vmov	s0, r0
   13d4c:	vcvt.f64.s32	d16, s0
   13d50:	vmov	s0, r4
   13d54:	vcvt.f64.s32	d17, s0
   13d58:	vmul.f64	d0, d17, d16
   13d5c:	sub	sp, fp, #8
   13d60:	pop	{r4, sl, fp, pc}
   13d64:	mov	r0, sp
   13d68:	bl	113fc <sysinfo@plt>
   13d6c:	cmp	r0, #0
   13d70:	beq	13db8 <__assert_fail@plt+0x280c>
   13d74:	mov	r0, #85	; 0x55
   13d78:	bl	11348 <sysconf@plt>
   13d7c:	mov	r4, r0
   13d80:	mov	r0, #30
   13d84:	bl	11348 <sysconf@plt>
   13d88:	orr	r1, r0, r4
   13d8c:	cmn	r1, #1
   13d90:	ble	13de0 <__assert_fail@plt+0x2834>
   13d94:	vmov	s0, r0
   13d98:	vcvt.f64.s32	d16, s0
   13d9c:	vmov	s0, r4
   13da0:	vcvt.f64.s32	d17, s0
   13da4:	vmul.f64	d16, d17, d16
   13da8:	vmov.f64	d17, #80	; 0x3e800000  0.250
   13dac:	vmul.f64	d0, d16, d17
   13db0:	sub	sp, fp, #8
   13db4:	pop	{r4, sl, fp, pc}
   13db8:	vldr	s0, [sp, #20]
   13dbc:	vldr	s2, [sp, #28]
   13dc0:	vldr	s4, [sp, #52]	; 0x34
   13dc4:	vcvt.f64.u32	d16, s2
   13dc8:	vcvt.f64.u32	d17, s0
   13dcc:	vcvt.f64.u32	d18, s4
   13dd0:	vadd.f64	d16, d17, d16
   13dd4:	vmul.f64	d0, d16, d18
   13dd8:	sub	sp, fp, #8
   13ddc:	pop	{r4, sl, fp, pc}
   13de0:	mov	r0, sp
   13de4:	bl	113fc <sysinfo@plt>
   13de8:	cmp	r0, #0
   13dec:	beq	13e04 <__assert_fail@plt+0x2858>
   13df0:	vldr	d16, [pc, #32]	; 13e18 <__assert_fail@plt+0x286c>
   13df4:	vmov.f64	d17, #80	; 0x3e800000  0.250
   13df8:	vmul.f64	d0, d16, d17
   13dfc:	sub	sp, fp, #8
   13e00:	pop	{r4, sl, fp, pc}
   13e04:	vldr	s0, [sp, #16]
   13e08:	vldr	s2, [sp, #52]	; 0x34
   13e0c:	vcvt.f64.u32	d16, s2
   13e10:	vcvt.f64.u32	d17, s0
   13e14:	b	13da4 <__assert_fail@plt+0x27f8>
   13e18:	andeq	r0, r0, r0
   13e1c:	orrsmi	r0, r0, r0
   13e20:	push	{r4, r5, fp, lr}
   13e24:	add	fp, sp, #8
   13e28:	cmp	r0, #0
   13e2c:	beq	13ec0 <__assert_fail@plt+0x2914>
   13e30:	mov	r1, #47	; 0x2f
   13e34:	mov	r4, r0
   13e38:	bl	11540 <strrchr@plt>
   13e3c:	cmp	r0, #0
   13e40:	mov	r5, r4
   13e44:	addne	r5, r0, #1
   13e48:	sub	r0, r5, r4
   13e4c:	cmp	r0, #7
   13e50:	blt	13ea4 <__assert_fail@plt+0x28f8>
   13e54:	movw	r1, #33576	; 0x8328
   13e58:	sub	r0, r5, #7
   13e5c:	mov	r2, #7
   13e60:	movt	r1, #1
   13e64:	bl	11588 <strncmp@plt>
   13e68:	cmp	r0, #0
   13e6c:	bne	13ea4 <__assert_fail@plt+0x28f8>
   13e70:	movw	r1, #33584	; 0x8330
   13e74:	mov	r0, r5
   13e78:	mov	r2, #3
   13e7c:	movt	r1, #1
   13e80:	bl	11588 <strncmp@plt>
   13e84:	cmp	r0, #0
   13e88:	beq	13e94 <__assert_fail@plt+0x28e8>
   13e8c:	mov	r4, r5
   13e90:	b	13ea4 <__assert_fail@plt+0x28f8>
   13e94:	movw	r0, #37240	; 0x9178
   13e98:	add	r4, r5, #3
   13e9c:	movt	r0, #2
   13ea0:	str	r4, [r0]
   13ea4:	movw	r0, #37244	; 0x917c
   13ea8:	movt	r0, #2
   13eac:	str	r4, [r0]
   13eb0:	movw	r0, #37352	; 0x91e8
   13eb4:	movt	r0, #2
   13eb8:	str	r4, [r0]
   13ebc:	pop	{r4, r5, fp, pc}
   13ec0:	movw	r0, #37256	; 0x9188
   13ec4:	mov	r1, #55	; 0x37
   13ec8:	mov	r2, #1
   13ecc:	movt	r0, #2
   13ed0:	ldr	r3, [r0]
   13ed4:	movw	r0, #33520	; 0x82f0
   13ed8:	movt	r0, #1
   13edc:	bl	1139c <fwrite@plt>
   13ee0:	bl	11594 <abort@plt>
   13ee4:	push	{r4, r5, r6, sl, fp, lr}
   13ee8:	add	fp, sp, #16
   13eec:	mov	r4, r0
   13ef0:	movw	r0, #37360	; 0x91f0
   13ef4:	movt	r0, #2
   13ef8:	cmp	r4, #0
   13efc:	moveq	r4, r0
   13f00:	bl	114a4 <__errno_location@plt>
   13f04:	ldr	r6, [r0]
   13f08:	mov	r5, r0
   13f0c:	mov	r0, r4
   13f10:	mov	r1, #48	; 0x30
   13f14:	bl	16cbc <__assert_fail@plt+0x5710>
   13f18:	str	r6, [r5]
   13f1c:	pop	{r4, r5, r6, sl, fp, pc}
   13f20:	movw	r1, #37360	; 0x91f0
   13f24:	cmp	r0, #0
   13f28:	movt	r1, #2
   13f2c:	movne	r1, r0
   13f30:	ldr	r0, [r1]
   13f34:	bx	lr
   13f38:	movw	r2, #37360	; 0x91f0
   13f3c:	cmp	r0, #0
   13f40:	movt	r2, #2
   13f44:	movne	r2, r0
   13f48:	str	r1, [r2]
   13f4c:	bx	lr
   13f50:	movw	r3, #37360	; 0x91f0
   13f54:	cmp	r0, #0
   13f58:	and	r2, r2, #1
   13f5c:	movt	r3, #2
   13f60:	movne	r3, r0
   13f64:	ubfx	r0, r1, #5, #3
   13f68:	and	r1, r1, #31
   13f6c:	add	ip, r3, r0, lsl #2
   13f70:	mov	r0, #1
   13f74:	ldr	r3, [ip, #8]
   13f78:	and	r0, r0, r3, lsr r1
   13f7c:	eor	r2, r0, r2
   13f80:	eor	r1, r3, r2, lsl r1
   13f84:	str	r1, [ip, #8]
   13f88:	bx	lr
   13f8c:	movw	r2, #37360	; 0x91f0
   13f90:	cmp	r0, #0
   13f94:	movt	r2, #2
   13f98:	movne	r2, r0
   13f9c:	ldr	r0, [r2, #4]
   13fa0:	str	r1, [r2, #4]
   13fa4:	bx	lr
   13fa8:	push	{fp, lr}
   13fac:	mov	fp, sp
   13fb0:	movw	r3, #37360	; 0x91f0
   13fb4:	cmp	r0, #0
   13fb8:	movt	r3, #2
   13fbc:	movne	r3, r0
   13fc0:	cmp	r1, #0
   13fc4:	mov	r0, #10
   13fc8:	cmpne	r2, #0
   13fcc:	str	r0, [r3]
   13fd0:	bne	13fd8 <__assert_fail@plt+0x2a2c>
   13fd4:	bl	11594 <abort@plt>
   13fd8:	str	r1, [r3, #40]	; 0x28
   13fdc:	str	r2, [r3, #44]	; 0x2c
   13fe0:	pop	{fp, pc}
   13fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fe8:	add	fp, sp, #28
   13fec:	sub	sp, sp, #20
   13ff0:	mov	r7, r0
   13ff4:	ldr	r0, [fp, #8]
   13ff8:	movw	r5, #37360	; 0x91f0
   13ffc:	mov	r8, r3
   14000:	mov	r9, r2
   14004:	mov	sl, r1
   14008:	movt	r5, #2
   1400c:	cmp	r0, #0
   14010:	movne	r5, r0
   14014:	bl	114a4 <__errno_location@plt>
   14018:	ldr	r2, [r5, #40]	; 0x28
   1401c:	ldr	r3, [r5, #44]	; 0x2c
   14020:	mov	r4, r0
   14024:	ldm	r5, {r0, r1}
   14028:	add	r5, r5, #8
   1402c:	ldr	r6, [r4]
   14030:	stm	sp, {r0, r1, r5}
   14034:	mov	r0, r7
   14038:	mov	r1, sl
   1403c:	str	r2, [sp, #12]
   14040:	str	r3, [sp, #16]
   14044:	mov	r2, r9
   14048:	mov	r3, r8
   1404c:	bl	1405c <__assert_fail@plt+0x2ab0>
   14050:	str	r6, [r4]
   14054:	sub	sp, fp, #28
   14058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1405c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14060:	add	fp, sp, #28
   14064:	sub	sp, sp, #156	; 0x9c
   14068:	str	r0, [fp, #-84]	; 0xffffffac
   1406c:	add	r0, r2, #1
   14070:	mov	r6, r1
   14074:	mov	r7, r3
   14078:	str	r2, [fp, #-80]	; 0xffffffb0
   1407c:	str	r0, [sp, #80]	; 0x50
   14080:	ldr	r0, [fp, #12]
   14084:	and	r1, r0, #1
   14088:	str	r1, [sp, #36]	; 0x24
   1408c:	and	r1, r0, #4
   14090:	str	r1, [sp, #32]
   14094:	ubfx	r8, r0, #1, #1
   14098:	bl	113b4 <__ctype_get_mb_cur_max@plt>
   1409c:	str	r0, [sp, #40]	; 0x28
   140a0:	ldr	r0, [fp, #24]
   140a4:	ldr	r4, [fp, #8]
   140a8:	mov	r1, #0
   140ac:	str	r1, [fp, #-52]	; 0xffffffcc
   140b0:	mov	r1, #0
   140b4:	str	r1, [sp, #60]	; 0x3c
   140b8:	mov	r1, #1
   140bc:	str	r1, [sp, #84]	; 0x54
   140c0:	str	r0, [sp, #76]	; 0x4c
   140c4:	ldr	r0, [fp, #20]
   140c8:	str	r0, [sp, #72]	; 0x48
   140cc:	mov	r0, #0
   140d0:	str	r0, [sp, #56]	; 0x38
   140d4:	mov	r0, #0
   140d8:	str	r0, [fp, #-88]	; 0xffffffa8
   140dc:	mov	r0, #0
   140e0:	str	r0, [fp, #-72]	; 0xffffffb8
   140e4:	mov	r0, #0
   140e8:	cmp	r4, #10
   140ec:	bhi	15408 <__assert_fail@plt+0x3e5c>
   140f0:	add	r1, pc, #24
   140f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   140f8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   140fc:	mov	r5, r6
   14100:	mov	r9, #0
   14104:	mov	r2, #1
   14108:	mov	r3, #0
   1410c:	ldr	pc, [r1, r4, lsl #2]
   14110:	ldrdeq	r4, [r1], -r8
   14114:	andeq	r4, r1, r4, lsl r2
   14118:	andeq	r4, r1, r8, ror #3
   1411c:	ldrdeq	r4, [r1], -r0
   14120:	andeq	r4, r1, r8, lsl #4
   14124:	andeq	r4, r1, ip, ror #4
   14128:	strdeq	r4, [r1], -r8
   1412c:	andeq	r4, r1, r4, ror #9
   14130:	andeq	r4, r1, ip, lsr r1
   14134:	andeq	r4, r1, ip, lsr r1
   14138:	andeq	r4, r1, r4, ror r3
   1413c:	movw	r6, #33664	; 0x8380
   14140:	mov	r0, #0
   14144:	mov	r2, #5
   14148:	movt	r6, #1
   1414c:	mov	r1, r6
   14150:	bl	1133c <dcgettext@plt>
   14154:	cmp	r0, r6
   14158:	str	r0, [sp, #72]	; 0x48
   1415c:	bne	1434c <__assert_fail@plt+0x2da0>
   14160:	bl	16fa4 <__assert_fail@plt+0x59f8>
   14164:	ldrb	r1, [r0]
   14168:	and	r1, r1, #223	; 0xdf
   1416c:	cmp	r1, #71	; 0x47
   14170:	beq	142cc <__assert_fail@plt+0x2d20>
   14174:	cmp	r1, #85	; 0x55
   14178:	bne	14330 <__assert_fail@plt+0x2d84>
   1417c:	ldrb	r1, [r0, #1]
   14180:	and	r1, r1, #223	; 0xdf
   14184:	cmp	r1, #84	; 0x54
   14188:	bne	14330 <__assert_fail@plt+0x2d84>
   1418c:	ldrb	r1, [r0, #2]
   14190:	and	r1, r1, #223	; 0xdf
   14194:	cmp	r1, #70	; 0x46
   14198:	bne	14330 <__assert_fail@plt+0x2d84>
   1419c:	ldrb	r1, [r0, #3]
   141a0:	cmp	r1, #45	; 0x2d
   141a4:	bne	14330 <__assert_fail@plt+0x2d84>
   141a8:	ldrb	r1, [r0, #4]
   141ac:	cmp	r1, #56	; 0x38
   141b0:	bne	14330 <__assert_fail@plt+0x2d84>
   141b4:	ldrb	r0, [r0, #5]
   141b8:	cmp	r0, #0
   141bc:	movw	r0, #33668	; 0x8384
   141c0:	movt	r0, #1
   141c4:	str	r0, [sp, #72]	; 0x48
   141c8:	bne	14330 <__assert_fail@plt+0x2d84>
   141cc:	b	1434c <__assert_fail@plt+0x2da0>
   141d0:	mov	r0, #1
   141d4:	b	14214 <__assert_fail@plt+0x2c68>
   141d8:	mov	r4, #0
   141dc:	mov	r9, #0
   141e0:	mov	r2, r0
   141e4:	b	14264 <__assert_fail@plt+0x2cb8>
   141e8:	tst	r8, #1
   141ec:	bne	14214 <__assert_fail@plt+0x2c68>
   141f0:	mov	r2, r0
   141f4:	b	1423c <__assert_fail@plt+0x2c90>
   141f8:	mov	r0, #1
   141fc:	mov	r9, #0
   14200:	mov	r4, #5
   14204:	b	14280 <__assert_fail@plt+0x2cd4>
   14208:	mov	r2, #1
   1420c:	tst	r8, #1
   14210:	beq	1423c <__assert_fail@plt+0x2c90>
   14214:	mov	r1, #1
   14218:	mov	r9, #0
   1421c:	mov	r4, #2
   14220:	mov	r2, r0
   14224:	mov	r3, #1
   14228:	str	r1, [fp, #-72]	; 0xffffffb8
   1422c:	movw	r1, #33666	; 0x8382
   14230:	movt	r1, #1
   14234:	str	r1, [fp, #-88]	; 0xffffffa8
   14238:	b	144e4 <__assert_fail@plt+0x2f38>
   1423c:	cmp	r5, #0
   14240:	mov	r9, #1
   14244:	mov	r4, #2
   14248:	movne	r0, #39	; 0x27
   1424c:	strbne	r0, [ip]
   14250:	movw	r0, #33666	; 0x8382
   14254:	movt	r0, #1
   14258:	str	r0, [fp, #-88]	; 0xffffffa8
   1425c:	mov	r0, #1
   14260:	str	r0, [fp, #-72]	; 0xffffffb8
   14264:	mov	r3, #0
   14268:	b	144e4 <__assert_fail@plt+0x2f38>
   1426c:	mov	r4, #5
   14270:	tst	r8, #1
   14274:	beq	1429c <__assert_fail@plt+0x2cf0>
   14278:	mov	r0, #1
   1427c:	mov	r9, #0
   14280:	str	r0, [fp, #-72]	; 0xffffffb8
   14284:	movw	r0, #32647	; 0x7f87
   14288:	mov	r2, #1
   1428c:	mov	r3, #1
   14290:	movt	r0, #1
   14294:	str	r0, [fp, #-88]	; 0xffffffa8
   14298:	b	144e4 <__assert_fail@plt+0x2f38>
   1429c:	cmp	r5, #0
   142a0:	mov	r3, #0
   142a4:	mov	r9, #1
   142a8:	mov	r2, #1
   142ac:	movne	r0, #34	; 0x22
   142b0:	strbne	r0, [ip]
   142b4:	movw	r0, #32647	; 0x7f87
   142b8:	movt	r0, #1
   142bc:	str	r0, [fp, #-88]	; 0xffffffa8
   142c0:	mov	r0, #1
   142c4:	str	r0, [fp, #-72]	; 0xffffffb8
   142c8:	b	144e4 <__assert_fail@plt+0x2f38>
   142cc:	ldrb	r1, [r0, #1]
   142d0:	and	r1, r1, #223	; 0xdf
   142d4:	cmp	r1, #66	; 0x42
   142d8:	bne	14330 <__assert_fail@plt+0x2d84>
   142dc:	ldrb	r1, [r0, #2]
   142e0:	cmp	r1, #49	; 0x31
   142e4:	bne	14330 <__assert_fail@plt+0x2d84>
   142e8:	ldrb	r1, [r0, #3]
   142ec:	cmp	r1, #56	; 0x38
   142f0:	bne	14330 <__assert_fail@plt+0x2d84>
   142f4:	ldrb	r1, [r0, #4]
   142f8:	cmp	r1, #48	; 0x30
   142fc:	bne	14330 <__assert_fail@plt+0x2d84>
   14300:	ldrb	r1, [r0, #5]
   14304:	cmp	r1, #51	; 0x33
   14308:	bne	14330 <__assert_fail@plt+0x2d84>
   1430c:	ldrb	r1, [r0, #6]
   14310:	cmp	r1, #48	; 0x30
   14314:	bne	14330 <__assert_fail@plt+0x2d84>
   14318:	ldrb	r0, [r0, #7]
   1431c:	cmp	r0, #0
   14320:	movw	r0, #33676	; 0x838c
   14324:	movt	r0, #1
   14328:	str	r0, [sp, #72]	; 0x48
   1432c:	beq	1434c <__assert_fail@plt+0x2da0>
   14330:	movw	r1, #32647	; 0x7f87
   14334:	movw	r0, #33666	; 0x8382
   14338:	cmp	r4, #9
   1433c:	movt	r1, #1
   14340:	movt	r0, #1
   14344:	moveq	r0, r1
   14348:	str	r0, [sp, #72]	; 0x48
   1434c:	movw	r6, #33666	; 0x8382
   14350:	mov	r0, #0
   14354:	mov	r2, #5
   14358:	movt	r6, #1
   1435c:	mov	r1, r6
   14360:	bl	1133c <dcgettext@plt>
   14364:	cmp	r0, r6
   14368:	str	r0, [sp, #76]	; 0x4c
   1436c:	beq	143b8 <__assert_fail@plt+0x2e0c>
   14370:	ldr	ip, [fp, #-84]	; 0xffffffac
   14374:	mov	r9, #0
   14378:	tst	r8, #1
   1437c:	bne	144c0 <__assert_fail@plt+0x2f14>
   14380:	ldr	r0, [sp, #72]	; 0x48
   14384:	ldrb	r0, [r0]
   14388:	cmp	r0, #0
   1438c:	beq	144c0 <__assert_fail@plt+0x2f14>
   14390:	ldr	r1, [sp, #72]	; 0x48
   14394:	mov	r9, #0
   14398:	add	r1, r1, #1
   1439c:	cmp	r9, r5
   143a0:	strbcc	r0, [ip, r9]
   143a4:	ldrb	r0, [r1, r9]
   143a8:	add	r9, r9, #1
   143ac:	cmp	r0, #0
   143b0:	bne	1439c <__assert_fail@plt+0x2df0>
   143b4:	b	144c0 <__assert_fail@plt+0x2f14>
   143b8:	bl	16fa4 <__assert_fail@plt+0x59f8>
   143bc:	ldrb	r1, [r0]
   143c0:	and	r1, r1, #223	; 0xdf
   143c4:	cmp	r1, #71	; 0x47
   143c8:	beq	14438 <__assert_fail@plt+0x2e8c>
   143cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   143d0:	cmp	r1, #85	; 0x55
   143d4:	bne	14494 <__assert_fail@plt+0x2ee8>
   143d8:	ldrb	r1, [r0, #1]
   143dc:	and	r1, r1, #223	; 0xdf
   143e0:	cmp	r1, #84	; 0x54
   143e4:	bne	14494 <__assert_fail@plt+0x2ee8>
   143e8:	ldrb	r1, [r0, #2]
   143ec:	and	r1, r1, #223	; 0xdf
   143f0:	cmp	r1, #70	; 0x46
   143f4:	bne	14494 <__assert_fail@plt+0x2ee8>
   143f8:	ldrb	r1, [r0, #3]
   143fc:	cmp	r1, #45	; 0x2d
   14400:	bne	14494 <__assert_fail@plt+0x2ee8>
   14404:	ldrb	r1, [r0, #4]
   14408:	cmp	r1, #56	; 0x38
   1440c:	bne	14494 <__assert_fail@plt+0x2ee8>
   14410:	ldrb	r0, [r0, #5]
   14414:	cmp	r0, #0
   14418:	bne	14494 <__assert_fail@plt+0x2ee8>
   1441c:	movw	r0, #33672	; 0x8388
   14420:	movt	r0, #1
   14424:	str	r0, [sp, #76]	; 0x4c
   14428:	mov	r9, #0
   1442c:	tst	r8, #1
   14430:	beq	14380 <__assert_fail@plt+0x2dd4>
   14434:	b	144c0 <__assert_fail@plt+0x2f14>
   14438:	ldrb	r1, [r0, #1]
   1443c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14440:	and	r1, r1, #223	; 0xdf
   14444:	cmp	r1, #66	; 0x42
   14448:	bne	14494 <__assert_fail@plt+0x2ee8>
   1444c:	ldrb	r1, [r0, #2]
   14450:	cmp	r1, #49	; 0x31
   14454:	bne	14494 <__assert_fail@plt+0x2ee8>
   14458:	ldrb	r1, [r0, #3]
   1445c:	cmp	r1, #56	; 0x38
   14460:	bne	14494 <__assert_fail@plt+0x2ee8>
   14464:	ldrb	r1, [r0, #4]
   14468:	cmp	r1, #48	; 0x30
   1446c:	bne	14494 <__assert_fail@plt+0x2ee8>
   14470:	ldrb	r1, [r0, #5]
   14474:	cmp	r1, #51	; 0x33
   14478:	bne	14494 <__assert_fail@plt+0x2ee8>
   1447c:	ldrb	r1, [r0, #6]
   14480:	cmp	r1, #48	; 0x30
   14484:	bne	14494 <__assert_fail@plt+0x2ee8>
   14488:	ldrb	r0, [r0, #7]
   1448c:	cmp	r0, #0
   14490:	beq	152a8 <__assert_fail@plt+0x3cfc>
   14494:	movw	r0, #33666	; 0x8382
   14498:	cmp	r4, #9
   1449c:	movt	r0, #1
   144a0:	mov	r1, r0
   144a4:	movw	r0, #32647	; 0x7f87
   144a8:	movt	r0, #1
   144ac:	moveq	r1, r0
   144b0:	str	r1, [sp, #76]	; 0x4c
   144b4:	mov	r9, #0
   144b8:	tst	r8, #1
   144bc:	beq	14380 <__assert_fail@plt+0x2dd4>
   144c0:	ldr	r6, [sp, #76]	; 0x4c
   144c4:	mov	r0, r6
   144c8:	bl	11480 <strlen@plt>
   144cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   144d0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   144d4:	str	r0, [fp, #-72]	; 0xffffffb8
   144d8:	str	r6, [fp, #-88]	; 0xffffffa8
   144dc:	mov	r2, #1
   144e0:	mov	r3, r8
   144e4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   144e8:	str	r4, [fp, #-64]	; 0xffffffc0
   144ec:	mov	sl, #0
   144f0:	str	r3, [fp, #-76]	; 0xffffffb4
   144f4:	str	r2, [sp, #88]	; 0x58
   144f8:	cmp	r0, #0
   144fc:	movwne	r0, #1
   14500:	and	r1, r0, r3
   14504:	and	r1, r2, r1
   14508:	str	r1, [sp, #48]	; 0x30
   1450c:	sub	r1, r4, #2
   14510:	clz	r1, r1
   14514:	lsr	r1, r1, #5
   14518:	and	r1, r1, r3
   1451c:	str	r1, [sp, #44]	; 0x2c
   14520:	subs	r1, r4, #2
   14524:	eor	r4, r3, #1
   14528:	movwne	r1, #1
   1452c:	str	r4, [sp, #92]	; 0x5c
   14530:	orr	r4, r1, r4
   14534:	and	r1, r1, r2
   14538:	and	r0, r0, r1
   1453c:	str	r4, [sp, #64]	; 0x40
   14540:	ldr	r4, [sp, #84]	; 0x54
   14544:	str	r0, [fp, #-60]	; 0xffffffc4
   14548:	orr	r0, r1, r3
   1454c:	ldr	r1, [fp, #16]
   14550:	eor	r0, r0, #1
   14554:	clz	r1, r1
   14558:	lsr	r1, r1, #5
   1455c:	orr	r0, r1, r0
   14560:	str	r0, [fp, #-68]	; 0xffffffbc
   14564:	eor	r0, r2, #1
   14568:	str	r0, [sp, #52]	; 0x34
   1456c:	cmn	r7, #1
   14570:	beq	14580 <__assert_fail@plt+0x2fd4>
   14574:	cmp	sl, r7
   14578:	bne	1458c <__assert_fail@plt+0x2fe0>
   1457c:	b	15220 <__assert_fail@plt+0x3c74>
   14580:	ldrb	r0, [lr, sl]
   14584:	cmp	r0, #0
   14588:	beq	15228 <__assert_fail@plt+0x3c7c>
   1458c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14590:	cmp	r0, #0
   14594:	beq	145f4 <__assert_fail@plt+0x3048>
   14598:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1459c:	mov	r6, r5
   145a0:	add	r5, sl, r0
   145a4:	cmp	r0, #2
   145a8:	bcc	14614 <__assert_fail@plt+0x3068>
   145ac:	mov	r0, #0
   145b0:	cmn	r7, #1
   145b4:	str	r0, [fp, #-56]	; 0xffffffc8
   145b8:	bne	145d0 <__assert_fail@plt+0x3024>
   145bc:	mov	r0, lr
   145c0:	bl	11480 <strlen@plt>
   145c4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   145c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   145cc:	mov	r7, r0
   145d0:	cmp	r5, r7
   145d4:	bls	14624 <__assert_fail@plt+0x3078>
   145d8:	mov	r0, #0
   145dc:	mov	r5, r6
   145e0:	str	r0, [fp, #-48]	; 0xffffffd0
   145e4:	ldrb	r6, [lr, sl]
   145e8:	cmp	r6, #126	; 0x7e
   145ec:	bls	14674 <__assert_fail@plt+0x30c8>
   145f0:	b	14bd0 <__assert_fail@plt+0x3624>
   145f4:	mov	r0, #0
   145f8:	str	r0, [fp, #-56]	; 0xffffffc8
   145fc:	mov	r0, #0
   14600:	str	r0, [fp, #-48]	; 0xffffffd0
   14604:	ldrb	r6, [lr, sl]
   14608:	cmp	r6, #126	; 0x7e
   1460c:	bls	14674 <__assert_fail@plt+0x30c8>
   14610:	b	14bd0 <__assert_fail@plt+0x3624>
   14614:	mov	r0, #0
   14618:	str	r0, [fp, #-56]	; 0xffffffc8
   1461c:	cmp	r5, r7
   14620:	bhi	145d8 <__assert_fail@plt+0x302c>
   14624:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14628:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1462c:	add	r0, lr, sl
   14630:	bl	11474 <bcmp@plt>
   14634:	ldr	r2, [sp, #92]	; 0x5c
   14638:	cmp	r0, #0
   1463c:	mov	r1, r0
   14640:	mov	r5, r6
   14644:	movwne	r1, #1
   14648:	orr	r1, r1, r2
   1464c:	tst	r1, #1
   14650:	beq	152e8 <__assert_fail@plt+0x3d3c>
   14654:	ldr	ip, [fp, #-84]	; 0xffffffac
   14658:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1465c:	clz	r0, r0
   14660:	lsr	r0, r0, #5
   14664:	str	r0, [fp, #-48]	; 0xffffffd0
   14668:	ldrb	r6, [lr, sl]
   1466c:	cmp	r6, #126	; 0x7e
   14670:	bhi	14bd0 <__assert_fail@plt+0x3624>
   14674:	add	r3, pc, #16
   14678:	mov	r8, #1
   1467c:	mov	r2, #110	; 0x6e
   14680:	mov	r0, #97	; 0x61
   14684:	mov	r1, #0
   14688:	ldr	pc, [r3, r6, lsl #2]
   1468c:	andeq	r4, r1, r8, lsl #19
   14690:	ldrdeq	r4, [r1], -r0
   14694:	ldrdeq	r4, [r1], -r0
   14698:	ldrdeq	r4, [r1], -r0
   1469c:	ldrdeq	r4, [r1], -r0
   146a0:	ldrdeq	r4, [r1], -r0
   146a4:	ldrdeq	r4, [r1], -r0
   146a8:	andeq	r4, r1, r4, lsl #25
   146ac:	andeq	r4, r1, r8, ror #18
   146b0:	andeq	r4, r1, r0, ror #18
   146b4:	andeq	r4, r1, r4, ror r9
   146b8:	andeq	r4, r1, r4, lsr #21
   146bc:	andeq	r4, r1, r8, asr r9
   146c0:	andeq	r4, r1, r0, ror r9
   146c4:	ldrdeq	r4, [r1], -r0
   146c8:	ldrdeq	r4, [r1], -r0
   146cc:	ldrdeq	r4, [r1], -r0
   146d0:	ldrdeq	r4, [r1], -r0
   146d4:	ldrdeq	r4, [r1], -r0
   146d8:	ldrdeq	r4, [r1], -r0
   146dc:	ldrdeq	r4, [r1], -r0
   146e0:	ldrdeq	r4, [r1], -r0
   146e4:	ldrdeq	r4, [r1], -r0
   146e8:	ldrdeq	r4, [r1], -r0
   146ec:	ldrdeq	r4, [r1], -r0
   146f0:	ldrdeq	r4, [r1], -r0
   146f4:	ldrdeq	r4, [r1], -r0
   146f8:	ldrdeq	r4, [r1], -r0
   146fc:	ldrdeq	r4, [r1], -r0
   14700:	ldrdeq	r4, [r1], -r0
   14704:	ldrdeq	r4, [r1], -r0
   14708:	ldrdeq	r4, [r1], -r0
   1470c:	strdeq	r4, [r1], -ip
   14710:	andeq	r4, r1, r0, lsl #18
   14714:	andeq	r4, r1, r0, lsl #18
   14718:	strdeq	r4, [r1], -r0
   1471c:	andeq	r4, r1, r0, lsl #18
   14720:	andeq	r4, r1, r8, lsl #17
   14724:	andeq	r4, r1, r0, lsl #18
   14728:	andeq	r4, r1, ip, lsr #21
   1472c:	andeq	r4, r1, r0, lsl #18
   14730:	andeq	r4, r1, r0, lsl #18
   14734:	andeq	r4, r1, r0, lsl #18
   14738:	andeq	r4, r1, r8, lsl #17
   1473c:	andeq	r4, r1, r8, lsl #17
   14740:	andeq	r4, r1, r8, lsl #17
   14744:	andeq	r4, r1, r8, lsl #17
   14748:	andeq	r4, r1, r8, lsl #17
   1474c:	andeq	r4, r1, r8, lsl #17
   14750:	andeq	r4, r1, r8, lsl #17
   14754:	andeq	r4, r1, r8, lsl #17
   14758:	andeq	r4, r1, r8, lsl #17
   1475c:	andeq	r4, r1, r8, lsl #17
   14760:	andeq	r4, r1, r8, lsl #17
   14764:	andeq	r4, r1, r8, lsl #17
   14768:	andeq	r4, r1, r8, lsl #17
   1476c:	andeq	r4, r1, r8, lsl #17
   14770:	andeq	r4, r1, r8, lsl #17
   14774:	andeq	r4, r1, r8, lsl #17
   14778:	andeq	r4, r1, r0, lsl #18
   1477c:	andeq	r4, r1, r0, lsl #18
   14780:	andeq	r4, r1, r0, lsl #18
   14784:	andeq	r4, r1, r0, lsl #18
   14788:	andeq	r4, r1, r0, ror sl
   1478c:	ldrdeq	r4, [r1], -r0
   14790:	andeq	r4, r1, r8, lsl #17
   14794:	andeq	r4, r1, r8, lsl #17
   14798:	andeq	r4, r1, r8, lsl #17
   1479c:	andeq	r4, r1, r8, lsl #17
   147a0:	andeq	r4, r1, r8, lsl #17
   147a4:	andeq	r4, r1, r8, lsl #17
   147a8:	andeq	r4, r1, r8, lsl #17
   147ac:	andeq	r4, r1, r8, lsl #17
   147b0:	andeq	r4, r1, r8, lsl #17
   147b4:	andeq	r4, r1, r8, lsl #17
   147b8:	andeq	r4, r1, r8, lsl #17
   147bc:	andeq	r4, r1, r8, lsl #17
   147c0:	andeq	r4, r1, r8, lsl #17
   147c4:	andeq	r4, r1, r8, lsl #17
   147c8:	andeq	r4, r1, r8, lsl #17
   147cc:	andeq	r4, r1, r8, lsl #17
   147d0:	andeq	r4, r1, r8, lsl #17
   147d4:	andeq	r4, r1, r8, lsl #17
   147d8:	andeq	r4, r1, r8, lsl #17
   147dc:	andeq	r4, r1, r8, lsl #17
   147e0:	andeq	r4, r1, r8, lsl #17
   147e4:	andeq	r4, r1, r8, lsl #17
   147e8:	andeq	r4, r1, r8, lsl #17
   147ec:	andeq	r4, r1, r8, lsl #17
   147f0:	andeq	r4, r1, r8, lsl #17
   147f4:	andeq	r4, r1, r8, lsl #17
   147f8:	andeq	r4, r1, r0, lsl #18
   147fc:	andeq	r4, r1, r4, lsr r9
   14800:	andeq	r4, r1, r8, lsl #17
   14804:	andeq	r4, r1, r0, lsl #18
   14808:	andeq	r4, r1, r8, lsl #17
   1480c:	andeq	r4, r1, r0, lsl #18
   14810:	andeq	r4, r1, r8, lsl #17
   14814:	andeq	r4, r1, r8, lsl #17
   14818:	andeq	r4, r1, r8, lsl #17
   1481c:	andeq	r4, r1, r8, lsl #17
   14820:	andeq	r4, r1, r8, lsl #17
   14824:	andeq	r4, r1, r8, lsl #17
   14828:	andeq	r4, r1, r8, lsl #17
   1482c:	andeq	r4, r1, r8, lsl #17
   14830:	andeq	r4, r1, r8, lsl #17
   14834:	andeq	r4, r1, r8, lsl #17
   14838:	andeq	r4, r1, r8, lsl #17
   1483c:	andeq	r4, r1, r8, lsl #17
   14840:	andeq	r4, r1, r8, lsl #17
   14844:	andeq	r4, r1, r8, lsl #17
   14848:	andeq	r4, r1, r8, lsl #17
   1484c:	andeq	r4, r1, r8, lsl #17
   14850:	andeq	r4, r1, r8, lsl #17
   14854:	andeq	r4, r1, r8, lsl #17
   14858:	andeq	r4, r1, r8, lsl #17
   1485c:	andeq	r4, r1, r8, lsl #17
   14860:	andeq	r4, r1, r8, lsl #17
   14864:	andeq	r4, r1, r8, lsl #17
   14868:	andeq	r4, r1, r8, lsl #17
   1486c:	andeq	r4, r1, r8, lsl #17
   14870:	andeq	r4, r1, r8, lsl #17
   14874:	andeq	r4, r1, r8, lsl #17
   14878:	andeq	r4, r1, r8, asr #17
   1487c:	andeq	r4, r1, r0, lsl #18
   14880:	andeq	r4, r1, r8, asr #17
   14884:	strdeq	r4, [r1], -r0
   14888:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1488c:	tst	r0, #1
   14890:	bne	14b48 <__assert_fail@plt+0x359c>
   14894:	ldr	r1, [fp, #16]
   14898:	ubfx	r0, r6, #5, #3
   1489c:	mov	r2, #1
   148a0:	ldr	r0, [r1, r0, lsl #2]
   148a4:	and	r1, r6, #31
   148a8:	tst	r0, r2, lsl r1
   148ac:	beq	14b48 <__assert_fail@plt+0x359c>
   148b0:	mov	r0, r6
   148b4:	mov	r1, r8
   148b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   148bc:	tst	r2, #1
   148c0:	beq	14b68 <__assert_fail@plt+0x35bc>
   148c4:	b	152c4 <__assert_fail@plt+0x3d18>
   148c8:	cmp	r7, #1
   148cc:	beq	148f0 <__assert_fail@plt+0x3344>
   148d0:	mov	r8, #0
   148d4:	cmn	r7, #1
   148d8:	bne	14b34 <__assert_fail@plt+0x3588>
   148dc:	ldrb	r0, [lr, #1]
   148e0:	cmp	r0, #0
   148e4:	beq	148f0 <__assert_fail@plt+0x3344>
   148e8:	mvn	r7, #0
   148ec:	b	14b34 <__assert_fail@plt+0x3588>
   148f0:	mov	r8, #0
   148f4:	cmp	sl, #0
   148f8:	bne	14b34 <__assert_fail@plt+0x3588>
   148fc:	mov	r1, #1
   14900:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14904:	cmp	r0, #2
   14908:	bne	14920 <__assert_fail@plt+0x3374>
   1490c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14910:	mov	r8, r1
   14914:	tst	r0, #1
   14918:	beq	14888 <__assert_fail@plt+0x32dc>
   1491c:	b	152c4 <__assert_fail@plt+0x3d18>
   14920:	mov	r8, r1
   14924:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14928:	tst	r0, #1
   1492c:	beq	14894 <__assert_fail@plt+0x32e8>
   14930:	b	14b48 <__assert_fail@plt+0x359c>
   14934:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14938:	cmp	r0, #2
   1493c:	bne	14bfc <__assert_fail@plt+0x3650>
   14940:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14944:	tst	r0, #1
   14948:	bne	152c4 <__assert_fail@plt+0x3d18>
   1494c:	mov	r0, #0
   14950:	str	r0, [fp, #-56]	; 0xffffffc8
   14954:	b	14c14 <__assert_fail@plt+0x3668>
   14958:	mov	r0, #102	; 0x66
   1495c:	b	14c84 <__assert_fail@plt+0x36d8>
   14960:	mov	r2, #116	; 0x74
   14964:	b	14974 <__assert_fail@plt+0x33c8>
   14968:	mov	r0, #98	; 0x62
   1496c:	b	14c84 <__assert_fail@plt+0x36d8>
   14970:	mov	r2, #114	; 0x72
   14974:	ldr	r0, [sp, #64]	; 0x40
   14978:	tst	r0, #1
   1497c:	mov	r0, r2
   14980:	bne	14c84 <__assert_fail@plt+0x36d8>
   14984:	b	152c4 <__assert_fail@plt+0x3d18>
   14988:	ldr	r0, [sp, #88]	; 0x58
   1498c:	tst	r0, #1
   14990:	beq	14ca4 <__assert_fail@plt+0x36f8>
   14994:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14998:	tst	r0, #1
   1499c:	bne	15400 <__assert_fail@plt+0x3e54>
   149a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   149a4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   149a8:	subs	r0, r0, #2
   149ac:	movwne	r0, #1
   149b0:	orr	r0, r0, r1
   149b4:	tst	r0, #1
   149b8:	bne	149f4 <__assert_fail@plt+0x3448>
   149bc:	cmp	r9, r5
   149c0:	movcc	r0, #39	; 0x27
   149c4:	strbcc	r0, [ip, r9]
   149c8:	add	r0, r9, #1
   149cc:	cmp	r0, r5
   149d0:	movcc	r1, #36	; 0x24
   149d4:	strbcc	r1, [ip, r0]
   149d8:	add	r0, r9, #2
   149dc:	add	r9, r9, #3
   149e0:	cmp	r0, r5
   149e4:	movcc	r1, #39	; 0x27
   149e8:	strbcc	r1, [ip, r0]
   149ec:	mov	r0, #1
   149f0:	str	r0, [fp, #-52]	; 0xffffffcc
   149f4:	mov	r1, #1
   149f8:	cmp	r9, r5
   149fc:	mov	r8, #0
   14a00:	mov	r6, #48	; 0x30
   14a04:	str	r1, [fp, #-56]	; 0xffffffc8
   14a08:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14a0c:	movcc	r0, #92	; 0x5c
   14a10:	strbcc	r0, [ip, r9]
   14a14:	add	r0, r9, #1
   14a18:	cmp	r1, #2
   14a1c:	beq	14e70 <__assert_fail@plt+0x38c4>
   14a20:	add	r1, sl, #1
   14a24:	cmp	r1, r7
   14a28:	bcs	14e70 <__assert_fail@plt+0x38c4>
   14a2c:	ldrb	r1, [lr, r1]
   14a30:	sub	r1, r1, #48	; 0x30
   14a34:	uxtb	r1, r1
   14a38:	cmp	r1, #9
   14a3c:	bhi	14e70 <__assert_fail@plt+0x38c4>
   14a40:	cmp	r0, r5
   14a44:	movcc	r1, #48	; 0x30
   14a48:	strbcc	r1, [ip, r0]
   14a4c:	add	r0, r9, #2
   14a50:	add	r9, r9, #3
   14a54:	cmp	r0, r5
   14a58:	movcc	r1, #48	; 0x30
   14a5c:	strbcc	r1, [ip, r0]
   14a60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14a64:	tst	r0, #1
   14a68:	beq	14894 <__assert_fail@plt+0x32e8>
   14a6c:	b	14b48 <__assert_fail@plt+0x359c>
   14a70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14a74:	mov	r6, #63	; 0x3f
   14a78:	cmp	r0, #5
   14a7c:	beq	14e84 <__assert_fail@plt+0x38d8>
   14a80:	mov	r1, #0
   14a84:	cmp	r0, #2
   14a88:	str	r1, [fp, #-56]	; 0xffffffc8
   14a8c:	bne	14f4c <__assert_fail@plt+0x39a0>
   14a90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14a94:	mov	r8, #0
   14a98:	tst	r0, #1
   14a9c:	beq	14888 <__assert_fail@plt+0x32dc>
   14aa0:	b	152c4 <__assert_fail@plt+0x3d18>
   14aa4:	mov	r0, #118	; 0x76
   14aa8:	b	14c84 <__assert_fail@plt+0x36d8>
   14aac:	mov	r0, #1
   14ab0:	mov	r6, #39	; 0x27
   14ab4:	str	r0, [sp, #60]	; 0x3c
   14ab8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14abc:	cmp	r0, #2
   14ac0:	bne	14cc4 <__assert_fail@plt+0x3718>
   14ac4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ac8:	tst	r0, #1
   14acc:	bne	152c4 <__assert_fail@plt+0x3d18>
   14ad0:	ldr	r2, [sp, #56]	; 0x38
   14ad4:	clz	r1, r5
   14ad8:	mov	r8, #1
   14adc:	lsr	r1, r1, #5
   14ae0:	cmp	r2, #0
   14ae4:	mov	r0, r2
   14ae8:	movwne	r0, #1
   14aec:	orrs	r0, r0, r1
   14af0:	moveq	r2, r5
   14af4:	moveq	r5, r0
   14af8:	cmp	r9, r5
   14afc:	str	r2, [sp, #56]	; 0x38
   14b00:	movcc	r0, #39	; 0x27
   14b04:	strbcc	r0, [ip, r9]
   14b08:	add	r0, r9, #1
   14b0c:	cmp	r0, r5
   14b10:	movcc	r1, #92	; 0x5c
   14b14:	strbcc	r1, [ip, r0]
   14b18:	add	r0, r9, #2
   14b1c:	add	r9, r9, #3
   14b20:	cmp	r0, r5
   14b24:	movcc	r1, #39	; 0x27
   14b28:	strbcc	r1, [ip, r0]
   14b2c:	mov	r0, #0
   14b30:	str	r0, [fp, #-52]	; 0xffffffcc
   14b34:	mov	r0, #0
   14b38:	str	r0, [fp, #-56]	; 0xffffffc8
   14b3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14b40:	tst	r0, #1
   14b44:	beq	14894 <__assert_fail@plt+0x32e8>
   14b48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b4c:	mov	r1, r8
   14b50:	cmp	r0, #0
   14b54:	mov	r0, r6
   14b58:	beq	14c1c <__assert_fail@plt+0x3670>
   14b5c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14b60:	tst	r2, #1
   14b64:	bne	152c4 <__assert_fail@plt+0x3d18>
   14b68:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14b6c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14b70:	subs	r2, r2, #2
   14b74:	movwne	r2, #1
   14b78:	orr	r2, r2, r3
   14b7c:	tst	r2, #1
   14b80:	bne	14bbc <__assert_fail@plt+0x3610>
   14b84:	cmp	r9, r5
   14b88:	movcc	r2, #39	; 0x27
   14b8c:	strbcc	r2, [ip, r9]
   14b90:	add	r2, r9, #1
   14b94:	cmp	r2, r5
   14b98:	movcc	r3, #36	; 0x24
   14b9c:	strbcc	r3, [ip, r2]
   14ba0:	add	r2, r9, #2
   14ba4:	add	r9, r9, #3
   14ba8:	cmp	r2, r5
   14bac:	movcc	r3, #39	; 0x27
   14bb0:	strbcc	r3, [ip, r2]
   14bb4:	mov	r2, #1
   14bb8:	str	r2, [fp, #-52]	; 0xffffffcc
   14bbc:	cmp	r9, r5
   14bc0:	movcc	r2, #92	; 0x5c
   14bc4:	strbcc	r2, [ip, r9]
   14bc8:	add	r9, r9, #1
   14bcc:	b	14c64 <__assert_fail@plt+0x36b8>
   14bd0:	ldr	r0, [sp, #40]	; 0x28
   14bd4:	cmp	r0, #1
   14bd8:	bne	14cd8 <__assert_fail@plt+0x372c>
   14bdc:	bl	11444 <__ctype_b_loc@plt>
   14be0:	ldr	r0, [r0]
   14be4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14be8:	mov	r1, #1
   14bec:	add	r0, r0, r6, lsl #1
   14bf0:	ldrb	r0, [r0, #1]
   14bf4:	ubfx	r8, r0, #6, #1
   14bf8:	b	15030 <__assert_fail@plt+0x3a84>
   14bfc:	ldr	r1, [sp, #48]	; 0x30
   14c00:	mov	r0, #0
   14c04:	str	r0, [fp, #-56]	; 0xffffffc8
   14c08:	mov	r0, #92	; 0x5c
   14c0c:	cmp	r1, #0
   14c10:	beq	14c84 <__assert_fail@plt+0x36d8>
   14c14:	mov	r6, #92	; 0x5c
   14c18:	mov	r8, #0
   14c1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14c20:	cmp	r0, #0
   14c24:	bne	14c5c <__assert_fail@plt+0x36b0>
   14c28:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14c2c:	tst	r0, #1
   14c30:	beq	14c5c <__assert_fail@plt+0x36b0>
   14c34:	cmp	r9, r5
   14c38:	movcc	r0, #39	; 0x27
   14c3c:	strbcc	r0, [ip, r9]
   14c40:	add	r0, r9, #1
   14c44:	add	r9, r9, #2
   14c48:	cmp	r0, r5
   14c4c:	movcc	r1, #39	; 0x27
   14c50:	strbcc	r1, [ip, r0]
   14c54:	mov	r0, #0
   14c58:	str	r0, [fp, #-52]	; 0xffffffcc
   14c5c:	mov	r1, r8
   14c60:	mov	r0, r6
   14c64:	cmp	r9, r5
   14c68:	and	r4, r4, r1
   14c6c:	strbcc	r0, [ip, r9]
   14c70:	add	r9, r9, #1
   14c74:	add	sl, sl, #1
   14c78:	cmn	r7, #1
   14c7c:	bne	14574 <__assert_fail@plt+0x2fc8>
   14c80:	b	14580 <__assert_fail@plt+0x2fd4>
   14c84:	mov	r1, #0
   14c88:	mov	r8, #0
   14c8c:	str	r1, [fp, #-56]	; 0xffffffc8
   14c90:	ldr	r1, [sp, #88]	; 0x58
   14c94:	tst	r1, #1
   14c98:	mov	r1, #0
   14c9c:	beq	14888 <__assert_fail@plt+0x32dc>
   14ca0:	b	14b5c <__assert_fail@plt+0x35b0>
   14ca4:	ldr	r0, [sp, #36]	; 0x24
   14ca8:	mov	r6, #0
   14cac:	mov	r8, #0
   14cb0:	cmp	r0, #0
   14cb4:	mov	r0, #0
   14cb8:	str	r0, [fp, #-56]	; 0xffffffc8
   14cbc:	bne	14c74 <__assert_fail@plt+0x36c8>
   14cc0:	b	14888 <__assert_fail@plt+0x32dc>
   14cc4:	mov	r8, #1
   14cc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14ccc:	tst	r0, #1
   14cd0:	beq	14894 <__assert_fail@plt+0x32e8>
   14cd4:	b	14b48 <__assert_fail@plt+0x359c>
   14cd8:	mov	r0, #0
   14cdc:	cmn	r7, #1
   14ce0:	str	r0, [fp, #-36]	; 0xffffffdc
   14ce4:	str	r0, [fp, #-40]	; 0xffffffd8
   14ce8:	bne	14cfc <__assert_fail@plt+0x3750>
   14cec:	mov	r0, lr
   14cf0:	bl	11480 <strlen@plt>
   14cf4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14cf8:	mov	r7, r0
   14cfc:	ldr	r0, [sp, #44]	; 0x2c
   14d00:	str	r4, [sp, #84]	; 0x54
   14d04:	str	r5, [sp, #28]
   14d08:	cmp	r0, #0
   14d0c:	beq	14f60 <__assert_fail@plt+0x39b4>
   14d10:	ldr	r0, [sp, #80]	; 0x50
   14d14:	mov	r8, #1
   14d18:	mov	r5, #0
   14d1c:	add	r0, r0, sl
   14d20:	str	r0, [sp, #24]
   14d24:	sub	r0, fp, #40	; 0x28
   14d28:	mov	r3, r0
   14d2c:	b	14d68 <__assert_fail@plt+0x37bc>
   14d30:	ldr	r5, [sp, #68]	; 0x44
   14d34:	add	r5, r0, r5
   14d38:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14d3c:	bl	11384 <iswprint@plt>
   14d40:	cmp	r0, #0
   14d44:	sub	r4, fp, #40	; 0x28
   14d48:	movwne	r0, #1
   14d4c:	and	r8, r8, r0
   14d50:	mov	r0, r4
   14d54:	bl	11330 <mbsinit@plt>
   14d58:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14d5c:	mov	r3, r4
   14d60:	cmp	r0, #0
   14d64:	bne	15024 <__assert_fail@plt+0x3a78>
   14d68:	str	r5, [sp, #68]	; 0x44
   14d6c:	add	r5, r5, sl
   14d70:	sub	r0, fp, #44	; 0x2c
   14d74:	add	r1, lr, r5
   14d78:	sub	r2, r7, r5
   14d7c:	bl	13c34 <__assert_fail@plt+0x2688>
   14d80:	cmn	r0, #2
   14d84:	beq	14fe4 <__assert_fail@plt+0x3a38>
   14d88:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d8c:	cmn	r0, #1
   14d90:	beq	14fd8 <__assert_fail@plt+0x3a2c>
   14d94:	cmp	r0, #0
   14d98:	beq	14fdc <__assert_fail@plt+0x3a30>
   14d9c:	cmp	r0, #2
   14da0:	bcc	14d30 <__assert_fail@plt+0x3784>
   14da4:	ldr	r1, [sp, #68]	; 0x44
   14da8:	ldr	r2, [sp, #24]
   14dac:	add	r1, r2, r1
   14db0:	sub	r2, r0, #1
   14db4:	ldrb	r3, [r1]
   14db8:	sub	r3, r3, #91	; 0x5b
   14dbc:	cmp	r3, #33	; 0x21
   14dc0:	bls	14de0 <__assert_fail@plt+0x3834>
   14dc4:	add	r1, r1, #1
   14dc8:	subs	r2, r2, #1
   14dcc:	beq	14d30 <__assert_fail@plt+0x3784>
   14dd0:	ldrb	r3, [r1]
   14dd4:	sub	r3, r3, #91	; 0x5b
   14dd8:	cmp	r3, #33	; 0x21
   14ddc:	bhi	14dc4 <__assert_fail@plt+0x3818>
   14de0:	add	r5, pc, #0
   14de4:	ldr	pc, [r5, r3, lsl #2]
   14de8:	strdeq	r5, [r1], -ip
   14dec:	strdeq	r5, [r1], -ip
   14df0:	andeq	r4, r1, r4, asr #27
   14df4:	strdeq	r5, [r1], -ip
   14df8:	andeq	r4, r1, r4, asr #27
   14dfc:	strdeq	r5, [r1], -ip
   14e00:	andeq	r4, r1, r4, asr #27
   14e04:	andeq	r4, r1, r4, asr #27
   14e08:	andeq	r4, r1, r4, asr #27
   14e0c:	andeq	r4, r1, r4, asr #27
   14e10:	andeq	r4, r1, r4, asr #27
   14e14:	andeq	r4, r1, r4, asr #27
   14e18:	andeq	r4, r1, r4, asr #27
   14e1c:	andeq	r4, r1, r4, asr #27
   14e20:	andeq	r4, r1, r4, asr #27
   14e24:	andeq	r4, r1, r4, asr #27
   14e28:	andeq	r4, r1, r4, asr #27
   14e2c:	andeq	r4, r1, r4, asr #27
   14e30:	andeq	r4, r1, r4, asr #27
   14e34:	andeq	r4, r1, r4, asr #27
   14e38:	andeq	r4, r1, r4, asr #27
   14e3c:	andeq	r4, r1, r4, asr #27
   14e40:	andeq	r4, r1, r4, asr #27
   14e44:	andeq	r4, r1, r4, asr #27
   14e48:	andeq	r4, r1, r4, asr #27
   14e4c:	andeq	r4, r1, r4, asr #27
   14e50:	andeq	r4, r1, r4, asr #27
   14e54:	andeq	r4, r1, r4, asr #27
   14e58:	andeq	r4, r1, r4, asr #27
   14e5c:	andeq	r4, r1, r4, asr #27
   14e60:	andeq	r4, r1, r4, asr #27
   14e64:	andeq	r4, r1, r4, asr #27
   14e68:	andeq	r4, r1, r4, asr #27
   14e6c:	strdeq	r5, [r1], -ip
   14e70:	mov	r9, r0
   14e74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14e78:	tst	r0, #1
   14e7c:	beq	14894 <__assert_fail@plt+0x32e8>
   14e80:	b	14b48 <__assert_fail@plt+0x359c>
   14e84:	mov	r0, #0
   14e88:	str	r0, [fp, #-56]	; 0xffffffc8
   14e8c:	ldr	r0, [sp, #32]
   14e90:	cmp	r0, #0
   14e94:	beq	14f4c <__assert_fail@plt+0x39a0>
   14e98:	add	r0, sl, #2
   14e9c:	mov	r1, r7
   14ea0:	cmp	r0, r7
   14ea4:	bcs	14f4c <__assert_fail@plt+0x39a0>
   14ea8:	add	r1, sl, lr
   14eac:	ldrb	r1, [r1, #1]
   14eb0:	cmp	r1, #63	; 0x3f
   14eb4:	bne	14f4c <__assert_fail@plt+0x39a0>
   14eb8:	ldrb	r8, [lr, r0]
   14ebc:	sub	r2, r8, #33	; 0x21
   14ec0:	cmp	r2, #29
   14ec4:	bhi	14f4c <__assert_fail@plt+0x39a0>
   14ec8:	mov	r1, r4
   14ecc:	movw	r4, #20929	; 0x51c1
   14ed0:	mov	r3, #1
   14ed4:	movt	r4, #14336	; 0x3800
   14ed8:	tst	r4, r3, lsl r2
   14edc:	beq	15208 <__assert_fail@plt+0x3c5c>
   14ee0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ee4:	tst	r2, #1
   14ee8:	bne	152c4 <__assert_fail@plt+0x3d18>
   14eec:	cmp	r9, r5
   14ef0:	mov	r6, r8
   14ef4:	mov	r4, r1
   14ef8:	mov	sl, r0
   14efc:	mov	r8, #0
   14f00:	movcc	r2, #63	; 0x3f
   14f04:	strbcc	r2, [ip, r9]
   14f08:	add	r2, r9, #1
   14f0c:	cmp	r2, r5
   14f10:	movcc	r3, #34	; 0x22
   14f14:	strbcc	r3, [ip, r2]
   14f18:	add	r2, r9, #2
   14f1c:	cmp	r2, r5
   14f20:	movcc	r3, #34	; 0x22
   14f24:	strbcc	r3, [ip, r2]
   14f28:	add	r2, r9, #3
   14f2c:	add	r9, r9, #4
   14f30:	cmp	r2, r5
   14f34:	movcc	r3, #63	; 0x3f
   14f38:	strbcc	r3, [ip, r2]
   14f3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f40:	tst	r0, #1
   14f44:	beq	14894 <__assert_fail@plt+0x32e8>
   14f48:	b	14b48 <__assert_fail@plt+0x359c>
   14f4c:	mov	r8, #0
   14f50:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f54:	tst	r0, #1
   14f58:	beq	14894 <__assert_fail@plt+0x32e8>
   14f5c:	b	14b48 <__assert_fail@plt+0x359c>
   14f60:	mov	r8, #1
   14f64:	mov	r5, #0
   14f68:	sub	r4, fp, #40	; 0x28
   14f6c:	str	r5, [sp, #68]	; 0x44
   14f70:	add	r5, r5, sl
   14f74:	sub	r0, fp, #44	; 0x2c
   14f78:	mov	r3, r4
   14f7c:	add	r1, lr, r5
   14f80:	sub	r2, r7, r5
   14f84:	bl	13c34 <__assert_fail@plt+0x2688>
   14f88:	cmn	r0, #2
   14f8c:	beq	14fe4 <__assert_fail@plt+0x3a38>
   14f90:	cmn	r0, #1
   14f94:	beq	14fd8 <__assert_fail@plt+0x3a2c>
   14f98:	ldr	r5, [sp, #68]	; 0x44
   14f9c:	cmp	r0, #0
   14fa0:	beq	15020 <__assert_fail@plt+0x3a74>
   14fa4:	add	r5, r0, r5
   14fa8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14fac:	bl	11384 <iswprint@plt>
   14fb0:	cmp	r0, #0
   14fb4:	sub	r4, fp, #40	; 0x28
   14fb8:	movwne	r0, #1
   14fbc:	and	r8, r8, r0
   14fc0:	mov	r0, r4
   14fc4:	bl	11330 <mbsinit@plt>
   14fc8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14fcc:	cmp	r0, #0
   14fd0:	beq	14f6c <__assert_fail@plt+0x39c0>
   14fd4:	b	15024 <__assert_fail@plt+0x3a78>
   14fd8:	mov	r8, #0
   14fdc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14fe0:	b	15018 <__assert_fail@plt+0x3a6c>
   14fe4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14fe8:	mov	r8, #0
   14fec:	cmp	r5, r7
   14ff0:	bcs	15018 <__assert_fail@plt+0x3a6c>
   14ff4:	ldrb	r0, [lr, r5]
   14ff8:	cmp	r0, #0
   14ffc:	beq	15018 <__assert_fail@plt+0x3a6c>
   15000:	ldr	r0, [sp, #68]	; 0x44
   15004:	add	r0, r0, #1
   15008:	add	r5, r0, sl
   1500c:	str	r0, [sp, #68]	; 0x44
   15010:	cmp	r5, r7
   15014:	bcc	14ff4 <__assert_fail@plt+0x3a48>
   15018:	ldr	r5, [sp, #68]	; 0x44
   1501c:	b	15024 <__assert_fail@plt+0x3a78>
   15020:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15024:	mov	r1, r5
   15028:	ldr	r5, [sp, #28]
   1502c:	ldr	r4, [sp, #84]	; 0x54
   15030:	ldr	r0, [sp, #52]	; 0x34
   15034:	ldr	ip, [fp, #-84]	; 0xffffffac
   15038:	cmp	r1, #1
   1503c:	orr	r2, r8, r0
   15040:	mov	r0, r1
   15044:	bhi	15050 <__assert_fail@plt+0x3aa4>
   15048:	tst	r2, #1
   1504c:	bne	14888 <__assert_fail@plt+0x32dc>
   15050:	add	r0, r0, sl
   15054:	str	r2, [sp, #84]	; 0x54
   15058:	str	r0, [fp, #-56]	; 0xffffffc8
   1505c:	mov	r0, #0
   15060:	tst	r2, #1
   15064:	bne	15144 <__assert_fail@plt+0x3b98>
   15068:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1506c:	tst	r1, #1
   15070:	bne	152c4 <__assert_fail@plt+0x3d18>
   15074:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15078:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1507c:	subs	r2, r1, #2
   15080:	movwne	r2, #1
   15084:	orr	r2, r2, r0
   15088:	tst	r2, #1
   1508c:	bne	150c8 <__assert_fail@plt+0x3b1c>
   15090:	cmp	r9, r5
   15094:	add	r2, r9, #1
   15098:	mov	r0, #1
   1509c:	movcc	r1, #39	; 0x27
   150a0:	str	r0, [fp, #-52]	; 0xffffffcc
   150a4:	strbcc	r1, [ip, r9]
   150a8:	cmp	r2, r5
   150ac:	movcc	r1, #36	; 0x24
   150b0:	strbcc	r1, [ip, r2]
   150b4:	add	r2, r9, #2
   150b8:	add	r9, r9, #3
   150bc:	cmp	r2, r5
   150c0:	movcc	r1, #39	; 0x27
   150c4:	strbcc	r1, [ip, r2]
   150c8:	cmp	r9, r5
   150cc:	add	r2, r9, #1
   150d0:	movcc	r1, #92	; 0x5c
   150d4:	strbcc	r1, [ip, r9]
   150d8:	cmp	r2, r5
   150dc:	bcs	150f0 <__assert_fail@plt+0x3b44>
   150e0:	uxtb	r3, r6
   150e4:	mov	r1, #48	; 0x30
   150e8:	orr	r3, r1, r3, lsr #6
   150ec:	strb	r3, [ip, r2]
   150f0:	add	r2, r9, #2
   150f4:	add	r9, r9, #3
   150f8:	cmp	r2, r5
   150fc:	lsrcc	r3, r6, #3
   15100:	movcc	r1, #6
   15104:	bficc	r3, r1, #3, #29
   15108:	mov	r1, #6
   1510c:	bfi	r6, r1, #3, #29
   15110:	strbcc	r3, [ip, r2]
   15114:	mov	r2, #1
   15118:	b	15178 <__assert_fail@plt+0x3bcc>
   1511c:	ldr	r1, [sp, #80]	; 0x50
   15120:	cmp	r9, r2
   15124:	mov	r5, r2
   15128:	ldr	r2, [sp, #84]	; 0x54
   1512c:	strbcc	r6, [ip, r9]
   15130:	add	r9, r9, #1
   15134:	ldrb	r6, [r1, sl]
   15138:	mov	sl, r3
   1513c:	tst	r2, #1
   15140:	beq	15068 <__assert_fail@plt+0x3abc>
   15144:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15148:	tst	r1, #1
   1514c:	beq	1516c <__assert_fail@plt+0x3bc0>
   15150:	cmp	r9, r5
   15154:	mov	r2, r0
   15158:	movcc	r1, #92	; 0x5c
   1515c:	strbcc	r1, [ip, r9]
   15160:	add	r9, r9, #1
   15164:	mov	r1, #0
   15168:	b	15174 <__assert_fail@plt+0x3bc8>
   1516c:	mov	r1, #0
   15170:	mov	r2, r0
   15174:	str	r1, [fp, #-48]	; 0xffffffd0
   15178:	mov	r0, r2
   1517c:	and	r1, r2, #1
   15180:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15184:	add	r3, sl, #1
   15188:	cmp	r2, r3
   1518c:	bls	151ec <__assert_fail@plt+0x3c40>
   15190:	mov	r2, r5
   15194:	ldr	r5, [fp, #-52]	; 0xffffffcc
   15198:	cmp	r1, #0
   1519c:	movwne	r1, #1
   151a0:	mvn	r5, r5
   151a4:	orr	r5, r5, r1
   151a8:	tst	r5, #1
   151ac:	bne	1511c <__assert_fail@plt+0x3b70>
   151b0:	cmp	r9, r2
   151b4:	movcc	r5, r4
   151b8:	movcc	r4, #39	; 0x27
   151bc:	strbcc	r4, [ip, r9]
   151c0:	movcc	r4, r5
   151c4:	add	r5, r9, #1
   151c8:	add	r9, r9, #2
   151cc:	cmp	r5, r2
   151d0:	movcc	r1, r4
   151d4:	movcc	r4, #39	; 0x27
   151d8:	strbcc	r4, [ip, r5]
   151dc:	movcc	r4, r1
   151e0:	mov	r1, #0
   151e4:	str	r1, [fp, #-52]	; 0xffffffcc
   151e8:	b	1511c <__assert_fail@plt+0x3b70>
   151ec:	cmp	r1, #0
   151f0:	movwne	r1, #1
   151f4:	str	r1, [fp, #-56]	; 0xffffffc8
   151f8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   151fc:	cmp	r0, #0
   15200:	beq	14c28 <__assert_fail@plt+0x367c>
   15204:	b	14c5c <__assert_fail@plt+0x36b0>
   15208:	mov	r8, #0
   1520c:	mov	r4, r1
   15210:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15214:	tst	r0, #1
   15218:	beq	14894 <__assert_fail@plt+0x32e8>
   1521c:	b	14b48 <__assert_fail@plt+0x359c>
   15220:	mov	r7, sl
   15224:	b	1522c <__assert_fail@plt+0x3c80>
   15228:	mvn	r7, #0
   1522c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15230:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15234:	ldr	r2, [sp, #88]	; 0x58
   15238:	eor	r0, r1, #2
   1523c:	orr	r0, r0, r9
   15240:	clz	r0, r0
   15244:	lsr	r0, r0, #5
   15248:	tst	r3, r0
   1524c:	bne	152c4 <__assert_fail@plt+0x3d18>
   15250:	subs	r0, r1, #2
   15254:	movwne	r0, #1
   15258:	orr	r0, r3, r0
   1525c:	tst	r0, #1
   15260:	ldreq	r0, [sp, #60]	; 0x3c
   15264:	eoreq	r0, r0, #1
   15268:	tsteq	r0, #1
   1526c:	bne	153a0 <__assert_fail@plt+0x3df4>
   15270:	tst	r4, #1
   15274:	bne	15364 <__assert_fail@plt+0x3db8>
   15278:	ldr	r6, [sp, #56]	; 0x38
   1527c:	mov	r8, #0
   15280:	cmp	r6, #0
   15284:	beq	1539c <__assert_fail@plt+0x3df0>
   15288:	mov	r1, #0
   1528c:	mov	r4, #2
   15290:	cmp	r5, #0
   15294:	mov	r0, r2
   15298:	mov	r3, #0
   1529c:	str	r1, [sp, #84]	; 0x54
   152a0:	beq	140e8 <__assert_fail@plt+0x2b3c>
   152a4:	b	153a0 <__assert_fail@plt+0x3df4>
   152a8:	movw	r0, #33680	; 0x8390
   152ac:	movt	r0, #1
   152b0:	str	r0, [sp, #76]	; 0x4c
   152b4:	mov	r9, #0
   152b8:	tst	r8, #1
   152bc:	beq	14380 <__assert_fail@plt+0x2dd4>
   152c0:	b	144c0 <__assert_fail@plt+0x2f14>
   152c4:	ldr	r1, [sp, #88]	; 0x58
   152c8:	mov	r0, #2
   152cc:	tst	r1, #1
   152d0:	movwne	r0, #4
   152d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   152d8:	ldr	r1, [fp, #12]
   152dc:	cmp	r2, #2
   152e0:	moveq	r2, r0
   152e4:	b	1531c <__assert_fail@plt+0x3d70>
   152e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   152ec:	ldr	lr, [fp, #-80]	; 0xffffffb0
   152f0:	ldr	r1, [fp, #12]
   152f4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   152f8:	b	1531c <__assert_fail@plt+0x3d70>
   152fc:	ldr	r1, [sp, #88]	; 0x58
   15300:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15304:	ldr	r5, [sp, #28]
   15308:	mov	r0, #2
   1530c:	tst	r1, #1
   15310:	ldr	r1, [fp, #12]
   15314:	movwne	r0, #4
   15318:	mov	r2, r0
   1531c:	mov	r0, #0
   15320:	bic	r1, r1, #2
   15324:	str	r2, [sp]
   15328:	mov	r2, lr
   1532c:	str	r0, [sp, #8]
   15330:	ldr	r0, [sp, #72]	; 0x48
   15334:	str	r1, [sp, #4]
   15338:	mov	r1, r5
   1533c:	str	r0, [sp, #12]
   15340:	ldr	r0, [sp, #76]	; 0x4c
   15344:	str	r0, [sp, #16]
   15348:	mov	r0, ip
   1534c:	mov	r3, r7
   15350:	bl	1405c <__assert_fail@plt+0x2ab0>
   15354:	mov	r9, r0
   15358:	mov	r0, r9
   1535c:	sub	sp, fp, #28
   15360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15364:	mov	r0, #5
   15368:	ldr	r1, [sp, #56]	; 0x38
   1536c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15370:	str	r0, [sp]
   15374:	ldr	r0, [fp, #12]
   15378:	str	r0, [sp, #4]
   1537c:	ldr	r0, [fp, #16]
   15380:	str	r0, [sp, #8]
   15384:	ldr	r0, [sp, #72]	; 0x48
   15388:	str	r0, [sp, #12]
   1538c:	ldr	r0, [sp, #76]	; 0x4c
   15390:	str	r0, [sp, #16]
   15394:	ldr	r0, [fp, #-84]	; 0xffffffac
   15398:	b	1534c <__assert_fail@plt+0x3da0>
   1539c:	mov	r3, #0
   153a0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   153a4:	cmp	r1, #0
   153a8:	beq	153e4 <__assert_fail@plt+0x3e38>
   153ac:	ldr	r2, [fp, #-84]	; 0xffffffac
   153b0:	tst	r3, #1
   153b4:	bne	153e8 <__assert_fail@plt+0x3e3c>
   153b8:	ldrb	r0, [r1]
   153bc:	cmp	r0, #0
   153c0:	beq	153e8 <__assert_fail@plt+0x3e3c>
   153c4:	add	r1, r1, #1
   153c8:	cmp	r9, r5
   153cc:	strbcc	r0, [r2, r9]
   153d0:	add	r9, r9, #1
   153d4:	ldrb	r0, [r1], #1
   153d8:	cmp	r0, #0
   153dc:	bne	153c8 <__assert_fail@plt+0x3e1c>
   153e0:	b	153e8 <__assert_fail@plt+0x3e3c>
   153e4:	ldr	r2, [fp, #-84]	; 0xffffffac
   153e8:	cmp	r9, r5
   153ec:	movcc	r0, #0
   153f0:	strbcc	r0, [r2, r9]
   153f4:	mov	r0, r9
   153f8:	sub	sp, fp, #28
   153fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15400:	mov	r0, #4
   15404:	b	152d4 <__assert_fail@plt+0x3d28>
   15408:	bl	11594 <abort@plt>
   1540c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15410:	add	fp, sp, #28
   15414:	sub	sp, sp, #28
   15418:	movw	r5, #37360	; 0x91f0
   1541c:	cmp	r2, #0
   15420:	mov	r4, r1
   15424:	mov	r7, r0
   15428:	str	r0, [sp, #20]
   1542c:	movt	r5, #2
   15430:	movne	r5, r2
   15434:	bl	114a4 <__errno_location@plt>
   15438:	mov	sl, r0
   1543c:	ldr	r2, [r5, #40]	; 0x28
   15440:	ldr	r3, [r5, #44]	; 0x2c
   15444:	ldm	r5, {r0, r1}
   15448:	orr	r8, r1, #1
   1544c:	add	r9, r5, #8
   15450:	mov	r1, #0
   15454:	ldr	r6, [sl]
   15458:	stm	sp, {r0, r8, r9}
   1545c:	mov	r0, #0
   15460:	str	r2, [sp, #12]
   15464:	str	r3, [sp, #16]
   15468:	mov	r2, r7
   1546c:	mov	r3, r4
   15470:	str	r6, [sp, #24]
   15474:	mov	r6, r4
   15478:	bl	1405c <__assert_fail@plt+0x2ab0>
   1547c:	add	r7, r0, #1
   15480:	mov	r0, r7
   15484:	bl	1688c <__assert_fail@plt+0x52e0>
   15488:	mov	r4, r0
   1548c:	ldr	r0, [r5]
   15490:	ldr	r2, [r5, #44]	; 0x2c
   15494:	ldr	r1, [r5, #40]	; 0x28
   15498:	mov	r3, r6
   1549c:	stm	sp, {r0, r8, r9}
   154a0:	str	r2, [sp, #16]
   154a4:	ldr	r2, [sp, #20]
   154a8:	str	r1, [sp, #12]
   154ac:	mov	r0, r4
   154b0:	mov	r1, r7
   154b4:	bl	1405c <__assert_fail@plt+0x2ab0>
   154b8:	ldr	r0, [sp, #24]
   154bc:	str	r0, [sl]
   154c0:	mov	r0, r4
   154c4:	sub	sp, fp, #28
   154c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154d0:	add	fp, sp, #28
   154d4:	sub	sp, sp, #36	; 0x24
   154d8:	movw	r8, #37360	; 0x91f0
   154dc:	cmp	r3, #0
   154e0:	mov	r4, r2
   154e4:	str	r2, [sp, #24]
   154e8:	mov	r5, r1
   154ec:	mov	r6, r0
   154f0:	str	r0, [sp, #20]
   154f4:	movt	r8, #2
   154f8:	movne	r8, r3
   154fc:	bl	114a4 <__errno_location@plt>
   15500:	str	r0, [sp, #28]
   15504:	ldr	r1, [r8, #40]	; 0x28
   15508:	ldr	r2, [r8, #44]	; 0x2c
   1550c:	ldr	r7, [r0]
   15510:	cmp	r4, #0
   15514:	add	sl, r8, #8
   15518:	mov	r0, #0
   1551c:	ldm	r8, {r3, r9}
   15520:	orreq	r9, r9, #1
   15524:	stm	sp, {r3, r9, sl}
   15528:	str	r1, [sp, #12]
   1552c:	str	r2, [sp, #16]
   15530:	mov	r1, #0
   15534:	mov	r2, r6
   15538:	mov	r3, r5
   1553c:	str	r7, [sp, #32]
   15540:	mov	r7, r5
   15544:	bl	1405c <__assert_fail@plt+0x2ab0>
   15548:	add	r4, r0, #1
   1554c:	mov	r5, r0
   15550:	mov	r0, r4
   15554:	bl	1688c <__assert_fail@plt+0x52e0>
   15558:	mov	r6, r0
   1555c:	ldr	r0, [r8]
   15560:	ldr	r2, [r8, #44]	; 0x2c
   15564:	ldr	r1, [r8, #40]	; 0x28
   15568:	mov	r3, r7
   1556c:	stm	sp, {r0, r9, sl}
   15570:	str	r2, [sp, #16]
   15574:	ldr	r2, [sp, #20]
   15578:	str	r1, [sp, #12]
   1557c:	mov	r0, r6
   15580:	mov	r1, r4
   15584:	bl	1405c <__assert_fail@plt+0x2ab0>
   15588:	ldr	r0, [sp, #24]
   1558c:	ldr	r1, [sp, #32]
   15590:	ldr	r2, [sp, #28]
   15594:	cmp	r0, #0
   15598:	str	r1, [r2]
   1559c:	strne	r5, [r0]
   155a0:	mov	r0, r6
   155a4:	sub	sp, fp, #28
   155a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155ac:	push	{r4, r5, r6, r7, fp, lr}
   155b0:	add	fp, sp, #16
   155b4:	movw	r4, #37216	; 0x9160
   155b8:	movt	r4, #2
   155bc:	ldrd	r6, [r4]
   155c0:	cmp	r7, #2
   155c4:	blt	155f0 <__assert_fail@plt+0x4044>
   155c8:	add	r5, r6, #12
   155cc:	mov	r7, #0
   155d0:	ldr	r0, [r5, r7, lsl #3]
   155d4:	bl	13a58 <__assert_fail@plt+0x24ac>
   155d8:	ldr	r1, [r4, #4]
   155dc:	add	r2, r7, #2
   155e0:	add	r0, r7, #1
   155e4:	mov	r7, r0
   155e8:	cmp	r2, r1
   155ec:	blt	155d0 <__assert_fail@plt+0x4024>
   155f0:	ldr	r0, [r6, #4]
   155f4:	movw	r5, #37408	; 0x9220
   155f8:	movt	r5, #2
   155fc:	cmp	r0, r5
   15600:	beq	15614 <__assert_fail@plt+0x4068>
   15604:	bl	13a58 <__assert_fail@plt+0x24ac>
   15608:	mov	r0, #256	; 0x100
   1560c:	str	r0, [r4, #8]
   15610:	str	r5, [r4, #12]
   15614:	add	r5, r4, #8
   15618:	cmp	r6, r5
   1561c:	beq	1562c <__assert_fail@plt+0x4080>
   15620:	mov	r0, r6
   15624:	bl	13a58 <__assert_fail@plt+0x24ac>
   15628:	str	r5, [r4]
   1562c:	mov	r0, #1
   15630:	str	r0, [r4, #4]
   15634:	pop	{r4, r5, r6, r7, fp, pc}
   15638:	movw	r3, #37360	; 0x91f0
   1563c:	mvn	r2, #0
   15640:	movt	r3, #2
   15644:	b	15648 <__assert_fail@plt+0x409c>
   15648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1564c:	add	fp, sp, #28
   15650:	sub	sp, sp, #44	; 0x2c
   15654:	mov	r7, r3
   15658:	str	r2, [sp, #36]	; 0x24
   1565c:	str	r1, [sp, #32]
   15660:	mov	r5, r0
   15664:	bl	114a4 <__errno_location@plt>
   15668:	cmp	r5, #0
   1566c:	bmi	157d4 <__assert_fail@plt+0x4228>
   15670:	cmn	r5, #-2147483647	; 0x80000001
   15674:	beq	157d4 <__assert_fail@plt+0x4228>
   15678:	movw	r8, #37216	; 0x9160
   1567c:	mov	r4, r0
   15680:	ldr	r0, [r0]
   15684:	movt	r8, #2
   15688:	str	r4, [sp, #28]
   1568c:	ldr	r1, [r8, #4]
   15690:	ldr	r6, [r8]
   15694:	str	r0, [sp, #24]
   15698:	cmp	r1, r5
   1569c:	ble	156a8 <__assert_fail@plt+0x40fc>
   156a0:	mov	sl, r6
   156a4:	b	15710 <__assert_fail@plt+0x4164>
   156a8:	mov	r0, #8
   156ac:	add	r9, r8, #8
   156b0:	str	r1, [fp, #-32]	; 0xffffffe0
   156b4:	sub	r1, r5, r1
   156b8:	mvn	r3, #-2147483648	; 0x80000000
   156bc:	str	r0, [sp]
   156c0:	subs	r0, r6, r9
   156c4:	add	r2, r1, #1
   156c8:	sub	r1, fp, #32
   156cc:	movne	r0, r6
   156d0:	bl	16a8c <__assert_fail@plt+0x54e0>
   156d4:	mov	sl, r0
   156d8:	cmp	r6, r9
   156dc:	str	r0, [r8]
   156e0:	bne	156ec <__assert_fail@plt+0x4140>
   156e4:	ldrd	r0, [r8, #8]
   156e8:	stm	sl, {r0, r1}
   156ec:	ldr	r1, [r8, #4]
   156f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   156f4:	add	r0, sl, r1, lsl #3
   156f8:	sub	r1, r2, r1
   156fc:	lsl	r2, r1, #3
   15700:	mov	r1, #0
   15704:	bl	114c8 <memset@plt>
   15708:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1570c:	str	r0, [r8, #4]
   15710:	mov	r9, sl
   15714:	ldm	r7, {r0, r1}
   15718:	orr	r8, r1, #1
   1571c:	add	r1, r7, #8
   15720:	ldr	r2, [r7, #40]	; 0x28
   15724:	ldr	r3, [r7, #44]	; 0x2c
   15728:	ldr	r6, [r9, r5, lsl #3]!
   1572c:	str	r1, [sp, #20]
   15730:	ldr	r4, [r9, #4]!
   15734:	stm	sp, {r0, r8}
   15738:	add	r0, sp, #8
   1573c:	stm	r0, {r1, r2, r3}
   15740:	ldr	r2, [sp, #32]
   15744:	ldr	r3, [sp, #36]	; 0x24
   15748:	mov	r1, r6
   1574c:	mov	r0, r4
   15750:	bl	1405c <__assert_fail@plt+0x2ab0>
   15754:	cmp	r6, r0
   15758:	bhi	157bc <__assert_fail@plt+0x4210>
   1575c:	add	r6, r0, #1
   15760:	movw	r0, #37408	; 0x9220
   15764:	movt	r0, #2
   15768:	str	r6, [sl, r5, lsl #3]
   1576c:	cmp	r4, r0
   15770:	beq	1577c <__assert_fail@plt+0x41d0>
   15774:	mov	r0, r4
   15778:	bl	13a58 <__assert_fail@plt+0x24ac>
   1577c:	mov	r0, r6
   15780:	bl	1688c <__assert_fail@plt+0x52e0>
   15784:	str	r0, [r9]
   15788:	mov	r4, r0
   1578c:	add	r3, sp, #8
   15790:	ldr	r0, [r7]
   15794:	ldr	r1, [r7, #40]	; 0x28
   15798:	ldr	r2, [r7, #44]	; 0x2c
   1579c:	stm	sp, {r0, r8}
   157a0:	ldr	r0, [sp, #20]
   157a4:	stm	r3, {r0, r1, r2}
   157a8:	ldr	r2, [sp, #32]
   157ac:	ldr	r3, [sp, #36]	; 0x24
   157b0:	mov	r0, r4
   157b4:	mov	r1, r6
   157b8:	bl	1405c <__assert_fail@plt+0x2ab0>
   157bc:	ldr	r1, [sp, #24]
   157c0:	ldr	r0, [sp, #28]
   157c4:	str	r1, [r0]
   157c8:	mov	r0, r4
   157cc:	sub	sp, fp, #28
   157d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157d4:	bl	11594 <abort@plt>
   157d8:	movw	r3, #37360	; 0x91f0
   157dc:	movt	r3, #2
   157e0:	b	15648 <__assert_fail@plt+0x409c>
   157e4:	movw	r3, #37360	; 0x91f0
   157e8:	mov	r1, r0
   157ec:	mov	r0, #0
   157f0:	mvn	r2, #0
   157f4:	movt	r3, #2
   157f8:	b	15648 <__assert_fail@plt+0x409c>
   157fc:	movw	r3, #37360	; 0x91f0
   15800:	mov	r2, r1
   15804:	mov	r1, r0
   15808:	mov	r0, #0
   1580c:	movt	r3, #2
   15810:	b	15648 <__assert_fail@plt+0x409c>
   15814:	push	{fp, lr}
   15818:	mov	fp, sp
   1581c:	sub	sp, sp, #48	; 0x30
   15820:	vmov.i32	q8, #0	; 0x00000000
   15824:	mov	ip, #32
   15828:	mov	r3, sp
   1582c:	mov	lr, r2
   15830:	cmp	r1, #10
   15834:	add	r2, r3, #16
   15838:	vst1.64	{d16-d17}, [r3], ip
   1583c:	vst1.64	{d16-d17}, [r2]
   15840:	vst1.64	{d16-d17}, [r3]
   15844:	beq	15864 <__assert_fail@plt+0x42b8>
   15848:	str	r1, [sp]
   1584c:	mov	r3, sp
   15850:	mov	r1, lr
   15854:	mvn	r2, #0
   15858:	bl	15648 <__assert_fail@plt+0x409c>
   1585c:	mov	sp, fp
   15860:	pop	{fp, pc}
   15864:	bl	11594 <abort@plt>
   15868:	push	{r4, sl, fp, lr}
   1586c:	add	fp, sp, #8
   15870:	sub	sp, sp, #48	; 0x30
   15874:	vmov.i32	q8, #0	; 0x00000000
   15878:	mov	ip, r3
   1587c:	mov	r3, sp
   15880:	mov	lr, #32
   15884:	cmp	r1, #10
   15888:	add	r4, r3, #16
   1588c:	vst1.64	{d16-d17}, [r3], lr
   15890:	vst1.64	{d16-d17}, [r4]
   15894:	vst1.64	{d16-d17}, [r3]
   15898:	beq	158b8 <__assert_fail@plt+0x430c>
   1589c:	str	r1, [sp]
   158a0:	mov	r1, r2
   158a4:	mov	r3, sp
   158a8:	mov	r2, ip
   158ac:	bl	15648 <__assert_fail@plt+0x409c>
   158b0:	sub	sp, fp, #8
   158b4:	pop	{r4, sl, fp, pc}
   158b8:	bl	11594 <abort@plt>
   158bc:	push	{fp, lr}
   158c0:	mov	fp, sp
   158c4:	sub	sp, sp, #48	; 0x30
   158c8:	vmov.i32	q8, #0	; 0x00000000
   158cc:	mov	r3, sp
   158d0:	mov	ip, #32
   158d4:	cmp	r0, #10
   158d8:	add	r2, r3, #16
   158dc:	vst1.64	{d16-d17}, [r3], ip
   158e0:	vst1.64	{d16-d17}, [r2]
   158e4:	vst1.64	{d16-d17}, [r3]
   158e8:	beq	15908 <__assert_fail@plt+0x435c>
   158ec:	str	r0, [sp]
   158f0:	mov	r3, sp
   158f4:	mov	r0, #0
   158f8:	mvn	r2, #0
   158fc:	bl	15648 <__assert_fail@plt+0x409c>
   15900:	mov	sp, fp
   15904:	pop	{fp, pc}
   15908:	bl	11594 <abort@plt>
   1590c:	push	{fp, lr}
   15910:	mov	fp, sp
   15914:	sub	sp, sp, #48	; 0x30
   15918:	vmov.i32	q8, #0	; 0x00000000
   1591c:	mov	r3, sp
   15920:	mov	ip, #32
   15924:	cmp	r0, #10
   15928:	add	lr, r3, #16
   1592c:	vst1.64	{d16-d17}, [r3], ip
   15930:	vst1.64	{d16-d17}, [lr]
   15934:	vst1.64	{d16-d17}, [r3]
   15938:	beq	15954 <__assert_fail@plt+0x43a8>
   1593c:	str	r0, [sp]
   15940:	mov	r3, sp
   15944:	mov	r0, #0
   15948:	bl	15648 <__assert_fail@plt+0x409c>
   1594c:	mov	sp, fp
   15950:	pop	{fp, pc}
   15954:	bl	11594 <abort@plt>
   15958:	push	{r4, sl, fp, lr}
   1595c:	add	fp, sp, #8
   15960:	sub	sp, sp, #48	; 0x30
   15964:	mov	lr, r0
   15968:	movw	r0, #37360	; 0x91f0
   1596c:	mov	ip, r1
   15970:	mov	r1, #32
   15974:	mov	r4, #1
   15978:	movt	r0, #2
   1597c:	add	r3, r0, #16
   15980:	vld1.64	{d16-d17}, [r0], r1
   15984:	vld1.64	{d20-d21}, [r0]
   15988:	vld1.64	{d18-d19}, [r3]
   1598c:	mov	r3, sp
   15990:	add	r0, r3, #32
   15994:	add	r1, r3, #16
   15998:	vst1.64	{d20-d21}, [r0]
   1599c:	mov	r0, #28
   159a0:	vst1.64	{d18-d19}, [r1]
   159a4:	mov	r1, r3
   159a8:	and	r0, r0, r2, lsr #3
   159ac:	and	r2, r2, #31
   159b0:	vst1.64	{d16-d17}, [r1], r0
   159b4:	ldr	r0, [r1, #8]
   159b8:	bic	r4, r4, r0, lsr r2
   159bc:	eor	r0, r0, r4, lsl r2
   159c0:	mov	r2, ip
   159c4:	str	r0, [r1, #8]
   159c8:	mov	r0, #0
   159cc:	mov	r1, lr
   159d0:	bl	15648 <__assert_fail@plt+0x409c>
   159d4:	sub	sp, fp, #8
   159d8:	pop	{r4, sl, fp, pc}
   159dc:	push	{fp, lr}
   159e0:	mov	fp, sp
   159e4:	sub	sp, sp, #48	; 0x30
   159e8:	mov	ip, r0
   159ec:	movw	r0, #37360	; 0x91f0
   159f0:	mov	r2, #32
   159f4:	movt	r0, #2
   159f8:	add	r3, r0, #16
   159fc:	vld1.64	{d16-d17}, [r0], r2
   15a00:	vld1.64	{d20-d21}, [r0]
   15a04:	vld1.64	{d18-d19}, [r3]
   15a08:	mov	r3, sp
   15a0c:	add	r0, r3, #32
   15a10:	add	r2, r3, #16
   15a14:	vst1.64	{d20-d21}, [r0]
   15a18:	mov	r0, #28
   15a1c:	vst1.64	{d18-d19}, [r2]
   15a20:	mov	r2, r3
   15a24:	and	r0, r0, r1, lsr #3
   15a28:	and	r1, r1, #31
   15a2c:	vst1.64	{d16-d17}, [r2], r0
   15a30:	mov	r0, #1
   15a34:	ldr	lr, [r2, #8]
   15a38:	bic	r0, r0, lr, lsr r1
   15a3c:	eor	r0, lr, r0, lsl r1
   15a40:	mov	r1, ip
   15a44:	str	r0, [r2, #8]
   15a48:	mov	r0, #0
   15a4c:	mvn	r2, #0
   15a50:	bl	15648 <__assert_fail@plt+0x409c>
   15a54:	mov	sp, fp
   15a58:	pop	{fp, pc}
   15a5c:	push	{fp, lr}
   15a60:	mov	fp, sp
   15a64:	sub	sp, sp, #48	; 0x30
   15a68:	mov	r1, r0
   15a6c:	movw	r0, #37360	; 0x91f0
   15a70:	mov	r3, #32
   15a74:	movt	r0, #2
   15a78:	add	r2, r0, #16
   15a7c:	vld1.64	{d16-d17}, [r0], r3
   15a80:	mov	r3, sp
   15a84:	vld1.64	{d18-d19}, [r2]
   15a88:	vld1.64	{d20-d21}, [r0]
   15a8c:	add	r2, r3, #16
   15a90:	add	r0, r3, #32
   15a94:	vst1.64	{d18-d19}, [r2]
   15a98:	vst1.64	{d20-d21}, [r0]
   15a9c:	mov	r0, #12
   15aa0:	mov	r2, r3
   15aa4:	vst1.64	{d16-d17}, [r2], r0
   15aa8:	ldr	r0, [r2]
   15aac:	orr	r0, r0, #67108864	; 0x4000000
   15ab0:	str	r0, [r2]
   15ab4:	mov	r0, #0
   15ab8:	mvn	r2, #0
   15abc:	bl	15648 <__assert_fail@plt+0x409c>
   15ac0:	mov	sp, fp
   15ac4:	pop	{fp, pc}
   15ac8:	push	{fp, lr}
   15acc:	mov	fp, sp
   15ad0:	sub	sp, sp, #48	; 0x30
   15ad4:	mov	ip, r1
   15ad8:	mov	r1, r0
   15adc:	movw	r0, #37360	; 0x91f0
   15ae0:	mov	r2, #32
   15ae4:	movt	r0, #2
   15ae8:	add	r3, r0, #16
   15aec:	vld1.64	{d16-d17}, [r0], r2
   15af0:	vld1.64	{d18-d19}, [r3]
   15af4:	vld1.64	{d20-d21}, [r0]
   15af8:	mov	r3, sp
   15afc:	add	r2, r3, #16
   15b00:	add	r0, r3, #32
   15b04:	vst1.64	{d18-d19}, [r2]
   15b08:	vst1.64	{d20-d21}, [r0]
   15b0c:	mov	r0, #12
   15b10:	mov	r2, r3
   15b14:	vst1.64	{d16-d17}, [r2], r0
   15b18:	ldr	r0, [r2]
   15b1c:	orr	r0, r0, #67108864	; 0x4000000
   15b20:	str	r0, [r2]
   15b24:	mov	r0, #0
   15b28:	mov	r2, ip
   15b2c:	bl	15648 <__assert_fail@plt+0x409c>
   15b30:	mov	sp, fp
   15b34:	pop	{fp, pc}
   15b38:	push	{r4, sl, fp, lr}
   15b3c:	add	fp, sp, #8
   15b40:	sub	sp, sp, #96	; 0x60
   15b44:	vmov.i32	q8, #0	; 0x00000000
   15b48:	mov	ip, r2
   15b4c:	mov	r2, sp
   15b50:	mov	r4, #28
   15b54:	cmp	r1, #10
   15b58:	mov	r3, r2
   15b5c:	add	lr, r2, #16
   15b60:	vst1.64	{d16-d17}, [r3], r4
   15b64:	vst1.64	{d16-d17}, [lr]
   15b68:	vst1.32	{d16-d17}, [r3]
   15b6c:	beq	15bbc <__assert_fail@plt+0x4610>
   15b70:	vld1.64	{d16-d17}, [r2], r4
   15b74:	vld1.64	{d18-d19}, [lr]
   15b78:	add	r3, sp, #48	; 0x30
   15b7c:	vld1.32	{d20-d21}, [r2]
   15b80:	add	r2, r3, #20
   15b84:	add	r4, r3, #4
   15b88:	vst1.32	{d18-d19}, [r2]
   15b8c:	add	r2, r3, #32
   15b90:	vst1.32	{d16-d17}, [r4]
   15b94:	vst1.32	{d20-d21}, [r2]
   15b98:	str	r1, [sp, #48]	; 0x30
   15b9c:	mvn	r2, #0
   15ba0:	ldr	r1, [sp, #60]	; 0x3c
   15ba4:	orr	r1, r1, #67108864	; 0x4000000
   15ba8:	str	r1, [sp, #60]	; 0x3c
   15bac:	mov	r1, ip
   15bb0:	bl	15648 <__assert_fail@plt+0x409c>
   15bb4:	sub	sp, fp, #8
   15bb8:	pop	{r4, sl, fp, pc}
   15bbc:	bl	11594 <abort@plt>
   15bc0:	push	{r4, r5, r6, sl, fp, lr}
   15bc4:	add	fp, sp, #16
   15bc8:	sub	sp, sp, #48	; 0x30
   15bcc:	mov	ip, r3
   15bd0:	movw	r3, #37360	; 0x91f0
   15bd4:	mov	r6, #32
   15bd8:	cmp	r1, #0
   15bdc:	mov	r4, sp
   15be0:	movt	r3, #2
   15be4:	cmpne	r2, #0
   15be8:	add	r5, r4, #16
   15bec:	add	lr, r3, #16
   15bf0:	vld1.64	{d16-d17}, [r3], r6
   15bf4:	vld1.64	{d18-d19}, [lr]
   15bf8:	vld1.64	{d20-d21}, [r3]
   15bfc:	mov	r3, #10
   15c00:	vst1.64	{d16-d17}, [r4], r6
   15c04:	vst1.64	{d18-d19}, [r5]
   15c08:	vst1.64	{d20-d21}, [r4]
   15c0c:	str	r3, [sp]
   15c10:	bne	15c18 <__assert_fail@plt+0x466c>
   15c14:	bl	11594 <abort@plt>
   15c18:	str	r2, [sp, #44]	; 0x2c
   15c1c:	str	r1, [sp, #40]	; 0x28
   15c20:	mov	r3, sp
   15c24:	mov	r1, ip
   15c28:	mvn	r2, #0
   15c2c:	bl	15648 <__assert_fail@plt+0x409c>
   15c30:	sub	sp, fp, #16
   15c34:	pop	{r4, r5, r6, sl, fp, pc}
   15c38:	push	{r4, r5, r6, sl, fp, lr}
   15c3c:	add	fp, sp, #16
   15c40:	sub	sp, sp, #48	; 0x30
   15c44:	mov	lr, r3
   15c48:	movw	r3, #37360	; 0x91f0
   15c4c:	mov	r6, #32
   15c50:	cmp	r1, #0
   15c54:	mov	r4, sp
   15c58:	movt	r3, #2
   15c5c:	cmpne	r2, #0
   15c60:	add	r5, r4, #16
   15c64:	add	ip, r3, #16
   15c68:	vld1.64	{d16-d17}, [r3], r6
   15c6c:	vld1.64	{d18-d19}, [ip]
   15c70:	vld1.64	{d20-d21}, [r3]
   15c74:	mov	r3, #10
   15c78:	vst1.64	{d16-d17}, [r4], r6
   15c7c:	vst1.64	{d18-d19}, [r5]
   15c80:	vst1.64	{d20-d21}, [r4]
   15c84:	str	r3, [sp]
   15c88:	bne	15c90 <__assert_fail@plt+0x46e4>
   15c8c:	bl	11594 <abort@plt>
   15c90:	ldr	ip, [fp, #8]
   15c94:	str	r2, [sp, #44]	; 0x2c
   15c98:	str	r1, [sp, #40]	; 0x28
   15c9c:	mov	r3, sp
   15ca0:	mov	r1, lr
   15ca4:	mov	r2, ip
   15ca8:	bl	15648 <__assert_fail@plt+0x409c>
   15cac:	sub	sp, fp, #16
   15cb0:	pop	{r4, r5, r6, sl, fp, pc}
   15cb4:	push	{r4, sl, fp, lr}
   15cb8:	add	fp, sp, #8
   15cbc:	sub	sp, sp, #48	; 0x30
   15cc0:	movw	r3, #37360	; 0x91f0
   15cc4:	mov	lr, #32
   15cc8:	mov	ip, r2
   15ccc:	cmp	r0, #0
   15cd0:	movt	r3, #2
   15cd4:	cmpne	r1, #0
   15cd8:	add	r2, r3, #16
   15cdc:	vld1.64	{d16-d17}, [r3], lr
   15ce0:	vld1.64	{d20-d21}, [r3]
   15ce4:	vld1.64	{d18-d19}, [r2]
   15ce8:	mov	r2, sp
   15cec:	add	r4, r2, #16
   15cf0:	vst1.64	{d16-d17}, [r2], lr
   15cf4:	vst1.64	{d20-d21}, [r2]
   15cf8:	mov	r2, #10
   15cfc:	vst1.64	{d18-d19}, [r4]
   15d00:	str	r2, [sp]
   15d04:	bne	15d0c <__assert_fail@plt+0x4760>
   15d08:	bl	11594 <abort@plt>
   15d0c:	str	r1, [sp, #44]	; 0x2c
   15d10:	str	r0, [sp, #40]	; 0x28
   15d14:	mov	r3, sp
   15d18:	mov	r0, #0
   15d1c:	mov	r1, ip
   15d20:	mvn	r2, #0
   15d24:	bl	15648 <__assert_fail@plt+0x409c>
   15d28:	sub	sp, fp, #8
   15d2c:	pop	{r4, sl, fp, pc}
   15d30:	push	{r4, r5, fp, lr}
   15d34:	add	fp, sp, #8
   15d38:	sub	sp, sp, #48	; 0x30
   15d3c:	mov	ip, r3
   15d40:	movw	r3, #37360	; 0x91f0
   15d44:	mov	r4, #32
   15d48:	mov	lr, r2
   15d4c:	cmp	r0, #0
   15d50:	movt	r3, #2
   15d54:	cmpne	r1, #0
   15d58:	add	r2, r3, #16
   15d5c:	vld1.64	{d16-d17}, [r3], r4
   15d60:	vld1.64	{d20-d21}, [r3]
   15d64:	vld1.64	{d18-d19}, [r2]
   15d68:	mov	r2, sp
   15d6c:	add	r5, r2, #16
   15d70:	vst1.64	{d16-d17}, [r2], r4
   15d74:	vst1.64	{d20-d21}, [r2]
   15d78:	mov	r2, #10
   15d7c:	vst1.64	{d18-d19}, [r5]
   15d80:	str	r2, [sp]
   15d84:	bne	15d8c <__assert_fail@plt+0x47e0>
   15d88:	bl	11594 <abort@plt>
   15d8c:	str	r1, [sp, #44]	; 0x2c
   15d90:	str	r0, [sp, #40]	; 0x28
   15d94:	mov	r3, sp
   15d98:	mov	r0, #0
   15d9c:	mov	r1, lr
   15da0:	mov	r2, ip
   15da4:	bl	15648 <__assert_fail@plt+0x409c>
   15da8:	sub	sp, fp, #8
   15dac:	pop	{r4, r5, fp, pc}
   15db0:	movw	r3, #37168	; 0x9130
   15db4:	movt	r3, #2
   15db8:	b	15648 <__assert_fail@plt+0x409c>
   15dbc:	movw	r3, #37168	; 0x9130
   15dc0:	mov	r2, r1
   15dc4:	mov	r1, r0
   15dc8:	mov	r0, #0
   15dcc:	movt	r3, #2
   15dd0:	b	15648 <__assert_fail@plt+0x409c>
   15dd4:	movw	r3, #37168	; 0x9130
   15dd8:	mvn	r2, #0
   15ddc:	movt	r3, #2
   15de0:	b	15648 <__assert_fail@plt+0x409c>
   15de4:	movw	r3, #37168	; 0x9130
   15de8:	mov	r1, r0
   15dec:	mov	r0, #0
   15df0:	mvn	r2, #0
   15df4:	movt	r3, #2
   15df8:	b	15648 <__assert_fail@plt+0x409c>
   15dfc:	push	{r4, r5, r6, sl, fp, lr}
   15e00:	add	fp, sp, #16
   15e04:	sub	sp, sp, #8
   15e08:	movw	r5, #28208	; 0x6e30
   15e0c:	movw	r6, #14936	; 0x3a58
   15e10:	mov	r4, r0
   15e14:	mov	r0, #0
   15e18:	mov	r1, #0
   15e1c:	mov	r2, #0
   15e20:	movt	r5, #1
   15e24:	movt	r6, #1
   15e28:	str	r0, [r4]
   15e2c:	str	r0, [r4, #4]
   15e30:	str	r0, [r4, #8]
   15e34:	add	r0, r4, #12
   15e38:	mov	r3, r5
   15e3c:	str	r6, [sp]
   15e40:	bl	16fdc <_obstack_begin@@Base>
   15e44:	add	r0, r4, #56	; 0x38
   15e48:	mov	r1, #0
   15e4c:	mov	r2, #0
   15e50:	mov	r3, r5
   15e54:	str	r6, [sp]
   15e58:	bl	16fdc <_obstack_begin@@Base>
   15e5c:	add	r0, r4, #100	; 0x64
   15e60:	mov	r1, #0
   15e64:	mov	r2, #0
   15e68:	mov	r3, r5
   15e6c:	str	r6, [sp]
   15e70:	bl	16fdc <_obstack_begin@@Base>
   15e74:	sub	sp, fp, #16
   15e78:	pop	{r4, r5, r6, sl, fp, pc}
   15e7c:	push	{r4, sl, fp, lr}
   15e80:	add	fp, sp, #8
   15e84:	mov	r4, r0
   15e88:	add	r0, r0, #12
   15e8c:	mov	r1, #0
   15e90:	bl	172d4 <_obstack_free@@Base>
   15e94:	add	r0, r4, #56	; 0x38
   15e98:	mov	r1, #0
   15e9c:	bl	172d4 <_obstack_free@@Base>
   15ea0:	add	r0, r4, #100	; 0x64
   15ea4:	mov	r1, #0
   15ea8:	pop	{r4, sl, fp, lr}
   15eac:	b	172d4 <_obstack_free@@Base>
   15eb0:	push	{r4, r5, r6, r7, fp, lr}
   15eb4:	add	fp, sp, #16
   15eb8:	mov	r5, r1
   15ebc:	mov	r4, r0
   15ec0:	bl	114e0 <fgetc@plt>
   15ec4:	cmn	r0, #1
   15ec8:	beq	15f34 <__assert_fail@plt+0x4988>
   15ecc:	mov	r7, r0
   15ed0:	add	r6, r5, #12
   15ed4:	ldr	r0, [r5, #24]
   15ed8:	ldr	r1, [r5, #28]
   15edc:	cmp	r1, r0
   15ee0:	beq	15f20 <__assert_fail@plt+0x4974>
   15ee4:	add	r1, r0, #1
   15ee8:	cmp	r7, #0
   15eec:	str	r1, [r5, #24]
   15ef0:	strb	r7, [r0]
   15ef4:	moveq	r0, r5
   15ef8:	bleq	16060 <__assert_fail@plt+0x4ab4>
   15efc:	mov	r0, r4
   15f00:	bl	114e0 <fgetc@plt>
   15f04:	mov	r7, r0
   15f08:	cmn	r0, #1
   15f0c:	beq	15f34 <__assert_fail@plt+0x4988>
   15f10:	ldr	r0, [r5, #24]
   15f14:	ldr	r1, [r5, #28]
   15f18:	cmp	r1, r0
   15f1c:	bne	15ee4 <__assert_fail@plt+0x4938>
   15f20:	mov	r0, r6
   15f24:	mov	r1, #1
   15f28:	bl	17130 <_obstack_newchunk@@Base>
   15f2c:	ldr	r0, [r5, #24]
   15f30:	b	15ee4 <__assert_fail@plt+0x4938>
   15f34:	ldr	r1, [r5, #20]
   15f38:	ldr	r0, [r5, #24]
   15f3c:	cmp	r0, r1
   15f40:	beq	15f78 <__assert_fail@plt+0x49cc>
   15f44:	ldr	r1, [r5, #28]
   15f48:	cmp	r1, r0
   15f4c:	bne	15f60 <__assert_fail@plt+0x49b4>
   15f50:	add	r0, r5, #12
   15f54:	mov	r1, #1
   15f58:	bl	17130 <_obstack_newchunk@@Base>
   15f5c:	ldr	r0, [r5, #24]
   15f60:	add	r1, r0, #1
   15f64:	str	r1, [r5, #24]
   15f68:	mov	r1, #0
   15f6c:	strb	r1, [r0]
   15f70:	mov	r0, r5
   15f74:	bl	16060 <__assert_fail@plt+0x4ab4>
   15f78:	ldr	r0, [r5, #68]	; 0x44
   15f7c:	ldr	r1, [r5, #72]	; 0x48
   15f80:	sub	r1, r1, r0
   15f84:	cmp	r1, #4
   15f88:	bcs	15f9c <__assert_fail@plt+0x49f0>
   15f8c:	add	r0, r5, #56	; 0x38
   15f90:	mov	r1, #4
   15f94:	bl	17130 <_obstack_newchunk@@Base>
   15f98:	ldr	r0, [r5, #68]	; 0x44
   15f9c:	mov	r1, #0
   15fa0:	str	r1, [r0]
   15fa4:	ldr	r1, [r5, #68]	; 0x44
   15fa8:	ldr	r0, [r5, #64]	; 0x40
   15fac:	add	r2, r1, #4
   15fb0:	cmp	r2, r0
   15fb4:	str	r2, [r5, #68]	; 0x44
   15fb8:	bne	15fc8 <__assert_fail@plt+0x4a1c>
   15fbc:	ldrb	r1, [r5, #96]	; 0x60
   15fc0:	orr	r1, r1, #2
   15fc4:	strb	r1, [r5, #96]	; 0x60
   15fc8:	ldr	r7, [r5, #80]	; 0x50
   15fcc:	ldr	r3, [r5, #60]	; 0x3c
   15fd0:	ldr	r1, [r5, #72]	; 0x48
   15fd4:	add	r2, r7, r2
   15fd8:	bic	r2, r2, r7
   15fdc:	sub	r7, r2, r3
   15fe0:	sub	r3, r1, r3
   15fe4:	str	r2, [r5, #68]	; 0x44
   15fe8:	cmp	r7, r3
   15fec:	movhi	r2, r1
   15ff0:	strhi	r1, [r5, #68]	; 0x44
   15ff4:	str	r0, [r5, #4]
   15ff8:	str	r2, [r5, #64]	; 0x40
   15ffc:	ldr	r0, [r5, #108]	; 0x6c
   16000:	ldr	r2, [r5, #112]	; 0x70
   16004:	cmp	r2, r0
   16008:	bne	16018 <__assert_fail@plt+0x4a6c>
   1600c:	ldrb	r1, [r5, #140]	; 0x8c
   16010:	orr	r1, r1, #2
   16014:	strb	r1, [r5, #140]	; 0x8c
   16018:	ldr	r7, [r5, #124]	; 0x7c
   1601c:	ldr	r3, [r5, #104]	; 0x68
   16020:	ldr	r1, [r5, #116]	; 0x74
   16024:	add	r2, r7, r2
   16028:	bic	r2, r2, r7
   1602c:	sub	r7, r2, r3
   16030:	sub	r3, r1, r3
   16034:	str	r2, [r5, #112]	; 0x70
   16038:	cmp	r7, r3
   1603c:	strhi	r1, [r5, #112]	; 0x70
   16040:	str	r0, [r5, #8]
   16044:	movhi	r2, r1
   16048:	mov	r0, r4
   1604c:	str	r2, [r5, #108]	; 0x6c
   16050:	bl	1130c <ferror@plt>
   16054:	clz	r0, r0
   16058:	lsr	r0, r0, #5
   1605c:	pop	{r4, r5, r6, r7, fp, pc}
   16060:	push	{r4, r5, r6, r7, fp, lr}
   16064:	add	fp, sp, #16
   16068:	ldr	r5, [r0, #20]
   1606c:	ldr	r6, [r0, #24]
   16070:	mov	r4, r0
   16074:	cmp	r6, r5
   16078:	bne	16088 <__assert_fail@plt+0x4adc>
   1607c:	ldrb	r0, [r4, #52]	; 0x34
   16080:	orr	r0, r0, #2
   16084:	strb	r0, [r4, #52]	; 0x34
   16088:	ldr	r1, [r4, #36]	; 0x24
   1608c:	ldr	r2, [r4, #16]
   16090:	ldr	r0, [r4, #28]
   16094:	mvn	r7, r5
   16098:	add	r3, r1, r6
   1609c:	bic	r1, r3, r1
   160a0:	sub	r3, r1, r2
   160a4:	sub	r2, r0, r2
   160a8:	str	r1, [r4, #24]
   160ac:	cmp	r3, r2
   160b0:	movhi	r1, r0
   160b4:	strhi	r0, [r4, #24]
   160b8:	str	r1, [r4, #20]
   160bc:	ldr	r0, [r4, #68]	; 0x44
   160c0:	ldr	r1, [r4, #72]	; 0x48
   160c4:	sub	r1, r1, r0
   160c8:	cmp	r1, #4
   160cc:	bcs	160e0 <__assert_fail@plt+0x4b34>
   160d0:	add	r0, r4, #56	; 0x38
   160d4:	mov	r1, #4
   160d8:	bl	17130 <_obstack_newchunk@@Base>
   160dc:	ldr	r0, [r4, #68]	; 0x44
   160e0:	str	r5, [r0]
   160e4:	add	r6, r6, r7
   160e8:	ldr	r1, [r4, #68]	; 0x44
   160ec:	ldr	r0, [r4, #112]	; 0x70
   160f0:	ldr	r2, [r4, #116]	; 0x74
   160f4:	add	r1, r1, #4
   160f8:	str	r1, [r4, #68]	; 0x44
   160fc:	sub	r1, r2, r0
   16100:	cmp	r1, #4
   16104:	bcs	16118 <__assert_fail@plt+0x4b6c>
   16108:	add	r0, r4, #100	; 0x64
   1610c:	mov	r1, #4
   16110:	bl	17130 <_obstack_newchunk@@Base>
   16114:	ldr	r0, [r4, #112]	; 0x70
   16118:	str	r6, [r0]
   1611c:	ldr	r0, [r4]
   16120:	ldr	r1, [r4, #112]	; 0x70
   16124:	add	r1, r1, #4
   16128:	add	r0, r0, #1
   1612c:	str	r1, [r4, #112]	; 0x70
   16130:	str	r0, [r4]
   16134:	pop	{r4, r5, r6, r7, fp, pc}
   16138:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1613c:	add	fp, sp, #24
   16140:	movw	r8, #0
   16144:	mov	r6, r2
   16148:	mov	r4, r1
   1614c:	mov	r5, r0
   16150:	movt	r8, #32752	; 0x7ff0
   16154:	mov	r0, r5
   16158:	mov	r1, r4
   1615c:	mov	r2, r6
   16160:	bl	112d0 <read@plt>
   16164:	mov	r7, r0
   16168:	cmn	r0, #1
   1616c:	bgt	16194 <__assert_fail@plt+0x4be8>
   16170:	bl	114a4 <__errno_location@plt>
   16174:	ldr	r0, [r0]
   16178:	cmp	r0, #4
   1617c:	beq	16154 <__assert_fail@plt+0x4ba8>
   16180:	cmp	r6, r8
   16184:	bls	16194 <__assert_fail@plt+0x4be8>
   16188:	cmp	r0, #22
   1618c:	mov	r6, r8
   16190:	beq	16154 <__assert_fail@plt+0x4ba8>
   16194:	mov	r0, r7
   16198:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1619c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   161a0:	add	fp, sp, #24
   161a4:	sub	sp, sp, #32
   161a8:	ldr	r6, [fp, #12]
   161ac:	ldr	r7, [fp, #8]
   161b0:	mov	r4, r2
   161b4:	mov	r8, r0
   161b8:	cmp	r1, #0
   161bc:	beq	161e4 <__assert_fail@plt+0x4c38>
   161c0:	movw	r2, #33768	; 0x83e8
   161c4:	mov	r5, r1
   161c8:	str	r3, [sp, #4]
   161cc:	str	r4, [sp]
   161d0:	mov	r0, r8
   161d4:	mov	r1, #1
   161d8:	movt	r2, #1
   161dc:	mov	r3, r5
   161e0:	b	161fc <__assert_fail@plt+0x4c50>
   161e4:	movw	r2, #33780	; 0x83f4
   161e8:	str	r3, [sp]
   161ec:	mov	r0, r8
   161f0:	mov	r1, #1
   161f4:	mov	r3, r4
   161f8:	movt	r2, #1
   161fc:	bl	11504 <__fprintf_chk@plt>
   16200:	movw	r1, #33787	; 0x83fb
   16204:	mov	r0, #0
   16208:	mov	r2, #5
   1620c:	movt	r1, #1
   16210:	bl	1133c <dcgettext@plt>
   16214:	movw	r2, #34505	; 0x86c9
   16218:	mov	r3, r0
   1621c:	movw	r0, #2022	; 0x7e6
   16220:	mov	r1, #1
   16224:	movt	r2, #1
   16228:	str	r0, [sp]
   1622c:	mov	r0, r8
   16230:	bl	11504 <__fprintf_chk@plt>
   16234:	movw	r4, #33156	; 0x8184
   16238:	mov	r1, r8
   1623c:	movt	r4, #1
   16240:	mov	r0, r4
   16244:	bl	112a0 <fputs_unlocked@plt>
   16248:	movw	r1, #33791	; 0x83ff
   1624c:	mov	r0, #0
   16250:	mov	r2, #5
   16254:	movt	r1, #1
   16258:	bl	1133c <dcgettext@plt>
   1625c:	movw	r3, #33962	; 0x84aa
   16260:	mov	r2, r0
   16264:	mov	r0, r8
   16268:	mov	r1, #1
   1626c:	movt	r3, #1
   16270:	bl	11504 <__fprintf_chk@plt>
   16274:	mov	r0, r4
   16278:	mov	r1, r8
   1627c:	bl	112a0 <fputs_unlocked@plt>
   16280:	cmp	r6, #9
   16284:	bhi	162c0 <__assert_fail@plt+0x4d14>
   16288:	add	r0, pc, #0
   1628c:	ldr	pc, [r0, r6, lsl #2]
   16290:			; <UNDEFINED> instruction: 0x000162b8
   16294:	andeq	r6, r1, ip, asr #5
   16298:	strdeq	r6, [r1], -ip
   1629c:	andeq	r6, r1, r4, lsr #6
   162a0:	andeq	r6, r1, ip, asr #6
   162a4:	andeq	r6, r1, r4, ror r3
   162a8:	muleq	r1, ip, r3
   162ac:	ldrdeq	r6, [r1], -r4
   162b0:	andeq	r6, r1, ip, ror r4
   162b4:	andeq	r6, r1, r4, lsr #8
   162b8:	sub	sp, fp, #24
   162bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162c0:	movw	r1, #34315	; 0x860b
   162c4:	movt	r1, #1
   162c8:	b	1642c <__assert_fail@plt+0x4e80>
   162cc:	movw	r1, #33996	; 0x84cc
   162d0:	mov	r0, #0
   162d4:	mov	r2, #5
   162d8:	movt	r1, #1
   162dc:	bl	1133c <dcgettext@plt>
   162e0:	ldr	r3, [r7]
   162e4:	mov	r2, r0
   162e8:	mov	r0, r8
   162ec:	mov	r1, #1
   162f0:	sub	sp, fp, #24
   162f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   162f8:	b	11504 <__fprintf_chk@plt>
   162fc:	movw	r1, #34012	; 0x84dc
   16300:	mov	r0, #0
   16304:	mov	r2, #5
   16308:	movt	r1, #1
   1630c:	bl	1133c <dcgettext@plt>
   16310:	mov	r2, r0
   16314:	ldr	r3, [r7]
   16318:	ldr	r0, [r7, #4]
   1631c:	str	r0, [sp]
   16320:	b	16410 <__assert_fail@plt+0x4e64>
   16324:	movw	r1, #34035	; 0x84f3
   16328:	mov	r0, #0
   1632c:	mov	r2, #5
   16330:	movt	r1, #1
   16334:	bl	1133c <dcgettext@plt>
   16338:	mov	r2, r0
   1633c:	ldr	r3, [r7]
   16340:	ldmib	r7, {r0, r1}
   16344:	stm	sp, {r0, r1}
   16348:	b	16410 <__assert_fail@plt+0x4e64>
   1634c:	movw	r1, #34063	; 0x850f
   16350:	mov	r0, #0
   16354:	mov	r2, #5
   16358:	movt	r1, #1
   1635c:	bl	1133c <dcgettext@plt>
   16360:	ldr	r3, [r7]
   16364:	mov	r2, r0
   16368:	ldmib	r7, {r0, r1, r7}
   1636c:	stm	sp, {r0, r1, r7}
   16370:	b	16410 <__assert_fail@plt+0x4e64>
   16374:	movw	r1, #34095	; 0x852f
   16378:	mov	r0, #0
   1637c:	mov	r2, #5
   16380:	movt	r1, #1
   16384:	bl	1133c <dcgettext@plt>
   16388:	ldr	r3, [r7]
   1638c:	mov	r2, r0
   16390:	ldmib	r7, {r0, r1, r6, r7}
   16394:	stm	sp, {r0, r1, r6, r7}
   16398:	b	16410 <__assert_fail@plt+0x4e64>
   1639c:	movw	r1, #34131	; 0x8553
   163a0:	mov	r0, #0
   163a4:	mov	r2, #5
   163a8:	movt	r1, #1
   163ac:	bl	1133c <dcgettext@plt>
   163b0:	mov	r2, r0
   163b4:	ldr	r3, [r7]
   163b8:	ldmib	r7, {r0, r1, r6}
   163bc:	ldr	r5, [r7, #16]
   163c0:	ldr	r7, [r7, #20]
   163c4:	stm	sp, {r0, r1, r6}
   163c8:	str	r5, [sp, #12]
   163cc:	str	r7, [sp, #16]
   163d0:	b	16410 <__assert_fail@plt+0x4e64>
   163d4:	movw	r1, #34171	; 0x857b
   163d8:	mov	r0, #0
   163dc:	mov	r2, #5
   163e0:	movt	r1, #1
   163e4:	bl	1133c <dcgettext@plt>
   163e8:	mov	r2, r0
   163ec:	ldr	r3, [r7]
   163f0:	ldmib	r7, {r0, r1, r6}
   163f4:	ldr	r5, [r7, #16]
   163f8:	ldr	r4, [r7, #20]
   163fc:	ldr	r7, [r7, #24]
   16400:	stm	sp, {r0, r1, r6}
   16404:	str	r5, [sp, #12]
   16408:	str	r4, [sp, #16]
   1640c:	str	r7, [sp, #20]
   16410:	mov	r0, r8
   16414:	mov	r1, #1
   16418:	bl	11504 <__fprintf_chk@plt>
   1641c:	sub	sp, fp, #24
   16420:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16424:	movw	r1, #34263	; 0x85d7
   16428:	movt	r1, #1
   1642c:	mov	r0, #0
   16430:	mov	r2, #5
   16434:	bl	1133c <dcgettext@plt>
   16438:	mov	ip, r0
   1643c:	ldr	r3, [r7]
   16440:	ldr	r0, [r7, #4]
   16444:	ldr	r1, [r7, #8]
   16448:	ldr	r6, [r7, #12]
   1644c:	ldr	r5, [r7, #16]
   16450:	ldr	r4, [r7, #20]
   16454:	ldr	r2, [r7, #24]
   16458:	ldr	lr, [r7, #28]
   1645c:	ldr	r7, [r7, #32]
   16460:	stm	sp, {r0, r1, r6}
   16464:	str	r5, [sp, #12]
   16468:	str	r4, [sp, #16]
   1646c:	str	r2, [sp, #20]
   16470:	str	lr, [sp, #24]
   16474:	str	r7, [sp, #28]
   16478:	b	164c0 <__assert_fail@plt+0x4f14>
   1647c:	movw	r1, #34215	; 0x85a7
   16480:	mov	r0, #0
   16484:	mov	r2, #5
   16488:	movt	r1, #1
   1648c:	bl	1133c <dcgettext@plt>
   16490:	mov	ip, r0
   16494:	ldr	r3, [r7]
   16498:	ldmib	r7, {r0, r1, r6}
   1649c:	ldr	r5, [r7, #16]
   164a0:	ldr	r4, [r7, #20]
   164a4:	ldr	r2, [r7, #24]
   164a8:	ldr	r7, [r7, #28]
   164ac:	stm	sp, {r0, r1, r6}
   164b0:	str	r5, [sp, #12]
   164b4:	str	r4, [sp, #16]
   164b8:	str	r2, [sp, #20]
   164bc:	str	r7, [sp, #24]
   164c0:	mov	r0, r8
   164c4:	mov	r1, #1
   164c8:	mov	r2, ip
   164cc:	bl	11504 <__fprintf_chk@plt>
   164d0:	sub	sp, fp, #24
   164d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   164d8:	push	{r4, sl, fp, lr}
   164dc:	add	fp, sp, #8
   164e0:	sub	sp, sp, #8
   164e4:	ldr	ip, [fp, #8]
   164e8:	mov	lr, #0
   164ec:	ldr	r4, [ip, lr, lsl #2]
   164f0:	add	lr, lr, #1
   164f4:	cmp	r4, #0
   164f8:	bne	164ec <__assert_fail@plt+0x4f40>
   164fc:	sub	r4, lr, #1
   16500:	str	ip, [sp]
   16504:	str	r4, [sp, #4]
   16508:	bl	1619c <__assert_fail@plt+0x4bf0>
   1650c:	sub	sp, fp, #8
   16510:	pop	{r4, sl, fp, pc}
   16514:	push	{fp, lr}
   16518:	mov	fp, sp
   1651c:	sub	sp, sp, #48	; 0x30
   16520:	ldr	ip, [fp, #8]
   16524:	ldr	lr, [ip]
   16528:	cmp	lr, #0
   1652c:	str	lr, [sp, #8]
   16530:	beq	165cc <__assert_fail@plt+0x5020>
   16534:	ldr	lr, [ip, #4]
   16538:	cmp	lr, #0
   1653c:	str	lr, [sp, #12]
   16540:	beq	165d4 <__assert_fail@plt+0x5028>
   16544:	ldr	lr, [ip, #8]
   16548:	cmp	lr, #0
   1654c:	str	lr, [sp, #16]
   16550:	beq	165dc <__assert_fail@plt+0x5030>
   16554:	ldr	lr, [ip, #12]
   16558:	cmp	lr, #0
   1655c:	str	lr, [sp, #20]
   16560:	beq	165e4 <__assert_fail@plt+0x5038>
   16564:	ldr	lr, [ip, #16]
   16568:	cmp	lr, #0
   1656c:	str	lr, [sp, #24]
   16570:	beq	165ec <__assert_fail@plt+0x5040>
   16574:	ldr	lr, [ip, #20]
   16578:	cmp	lr, #0
   1657c:	str	lr, [sp, #28]
   16580:	beq	165f4 <__assert_fail@plt+0x5048>
   16584:	ldr	lr, [ip, #24]
   16588:	cmp	lr, #0
   1658c:	str	lr, [sp, #32]
   16590:	beq	165fc <__assert_fail@plt+0x5050>
   16594:	ldr	lr, [ip, #28]
   16598:	cmp	lr, #0
   1659c:	str	lr, [sp, #36]	; 0x24
   165a0:	beq	16604 <__assert_fail@plt+0x5058>
   165a4:	ldr	lr, [ip, #32]
   165a8:	cmp	lr, #0
   165ac:	str	lr, [sp, #40]	; 0x28
   165b0:	beq	1660c <__assert_fail@plt+0x5060>
   165b4:	ldr	lr, [ip, #36]	; 0x24
   165b8:	mov	ip, #10
   165bc:	cmp	lr, #0
   165c0:	str	lr, [sp, #44]	; 0x2c
   165c4:	movweq	ip, #9
   165c8:	b	16610 <__assert_fail@plt+0x5064>
   165cc:	mov	ip, #0
   165d0:	b	16610 <__assert_fail@plt+0x5064>
   165d4:	mov	ip, #1
   165d8:	b	16610 <__assert_fail@plt+0x5064>
   165dc:	mov	ip, #2
   165e0:	b	16610 <__assert_fail@plt+0x5064>
   165e4:	mov	ip, #3
   165e8:	b	16610 <__assert_fail@plt+0x5064>
   165ec:	mov	ip, #4
   165f0:	b	16610 <__assert_fail@plt+0x5064>
   165f4:	mov	ip, #5
   165f8:	b	16610 <__assert_fail@plt+0x5064>
   165fc:	mov	ip, #6
   16600:	b	16610 <__assert_fail@plt+0x5064>
   16604:	mov	ip, #7
   16608:	b	16610 <__assert_fail@plt+0x5064>
   1660c:	mov	ip, #8
   16610:	add	lr, sp, #8
   16614:	str	ip, [sp, #4]
   16618:	str	lr, [sp]
   1661c:	bl	1619c <__assert_fail@plt+0x4bf0>
   16620:	mov	sp, fp
   16624:	pop	{fp, pc}
   16628:	push	{fp, lr}
   1662c:	mov	fp, sp
   16630:	sub	sp, sp, #56	; 0x38
   16634:	add	ip, fp, #8
   16638:	str	ip, [sp, #12]
   1663c:	ldr	lr, [fp, #8]
   16640:	cmp	lr, #0
   16644:	str	lr, [sp, #16]
   16648:	beq	166e4 <__assert_fail@plt+0x5138>
   1664c:	ldr	lr, [ip, #4]
   16650:	cmp	lr, #0
   16654:	str	lr, [sp, #20]
   16658:	beq	166ec <__assert_fail@plt+0x5140>
   1665c:	ldr	lr, [ip, #8]
   16660:	cmp	lr, #0
   16664:	str	lr, [sp, #24]
   16668:	beq	166f4 <__assert_fail@plt+0x5148>
   1666c:	ldr	lr, [ip, #12]
   16670:	cmp	lr, #0
   16674:	str	lr, [sp, #28]
   16678:	beq	166fc <__assert_fail@plt+0x5150>
   1667c:	ldr	lr, [ip, #16]
   16680:	cmp	lr, #0
   16684:	str	lr, [sp, #32]
   16688:	beq	16704 <__assert_fail@plt+0x5158>
   1668c:	ldr	lr, [ip, #20]
   16690:	cmp	lr, #0
   16694:	str	lr, [sp, #36]	; 0x24
   16698:	beq	1670c <__assert_fail@plt+0x5160>
   1669c:	ldr	lr, [ip, #24]
   166a0:	cmp	lr, #0
   166a4:	str	lr, [sp, #40]	; 0x28
   166a8:	beq	16714 <__assert_fail@plt+0x5168>
   166ac:	ldr	lr, [ip, #28]
   166b0:	cmp	lr, #0
   166b4:	str	lr, [sp, #44]	; 0x2c
   166b8:	beq	1671c <__assert_fail@plt+0x5170>
   166bc:	ldr	lr, [ip, #32]
   166c0:	cmp	lr, #0
   166c4:	str	lr, [sp, #48]	; 0x30
   166c8:	beq	16724 <__assert_fail@plt+0x5178>
   166cc:	ldr	lr, [ip, #36]	; 0x24
   166d0:	mov	ip, #10
   166d4:	cmp	lr, #0
   166d8:	str	lr, [sp, #52]	; 0x34
   166dc:	movweq	ip, #9
   166e0:	b	16728 <__assert_fail@plt+0x517c>
   166e4:	mov	ip, #0
   166e8:	b	16728 <__assert_fail@plt+0x517c>
   166ec:	mov	ip, #1
   166f0:	b	16728 <__assert_fail@plt+0x517c>
   166f4:	mov	ip, #2
   166f8:	b	16728 <__assert_fail@plt+0x517c>
   166fc:	mov	ip, #3
   16700:	b	16728 <__assert_fail@plt+0x517c>
   16704:	mov	ip, #4
   16708:	b	16728 <__assert_fail@plt+0x517c>
   1670c:	mov	ip, #5
   16710:	b	16728 <__assert_fail@plt+0x517c>
   16714:	mov	ip, #6
   16718:	b	16728 <__assert_fail@plt+0x517c>
   1671c:	mov	ip, #7
   16720:	b	16728 <__assert_fail@plt+0x517c>
   16724:	mov	ip, #8
   16728:	add	lr, sp, #16
   1672c:	str	ip, [sp, #4]
   16730:	str	lr, [sp]
   16734:	bl	1619c <__assert_fail@plt+0x4bf0>
   16738:	mov	sp, fp
   1673c:	pop	{fp, pc}
   16740:	push	{fp, lr}
   16744:	mov	fp, sp
   16748:	movw	r0, #37268	; 0x9194
   1674c:	movt	r0, #2
   16750:	ldr	r1, [r0]
   16754:	movw	r0, #33156	; 0x8184
   16758:	movt	r0, #1
   1675c:	bl	112a0 <fputs_unlocked@plt>
   16760:	movw	r1, #34375	; 0x8647
   16764:	mov	r0, #0
   16768:	mov	r2, #5
   1676c:	movt	r1, #1
   16770:	bl	1133c <dcgettext@plt>
   16774:	movw	r2, #34395	; 0x865b
   16778:	mov	r1, r0
   1677c:	mov	r0, #1
   16780:	movt	r2, #1
   16784:	bl	114ec <__printf_chk@plt>
   16788:	movw	r1, #34417	; 0x8671
   1678c:	mov	r0, #0
   16790:	mov	r2, #5
   16794:	movt	r1, #1
   16798:	bl	1133c <dcgettext@plt>
   1679c:	movw	r2, #32426	; 0x7eaa
   167a0:	movw	r3, #32965	; 0x80c5
   167a4:	mov	r1, r0
   167a8:	mov	r0, #1
   167ac:	movt	r2, #1
   167b0:	movt	r3, #1
   167b4:	bl	114ec <__printf_chk@plt>
   167b8:	movw	r1, #34437	; 0x8685
   167bc:	mov	r0, #0
   167c0:	mov	r2, #5
   167c4:	movt	r1, #1
   167c8:	bl	1133c <dcgettext@plt>
   167cc:	movw	r2, #34476	; 0x86ac
   167d0:	mov	r1, r0
   167d4:	mov	r0, #1
   167d8:	movt	r2, #1
   167dc:	pop	{fp, lr}
   167e0:	b	114ec <__printf_chk@plt>
   167e4:	push	{r4, r5, r6, sl, fp, lr}
   167e8:	add	fp, sp, #16
   167ec:	mov	r4, r2
   167f0:	mov	r5, r1
   167f4:	mov	r6, r0
   167f8:	bl	173f0 <_obstack_memory_used@@Base+0x78>
   167fc:	cmp	r0, #0
   16800:	popne	{r4, r5, r6, sl, fp, pc}
   16804:	cmp	r6, #0
   16808:	beq	1681c <__assert_fail@plt+0x5270>
   1680c:	cmp	r5, #0
   16810:	cmpne	r4, #0
   16814:	bne	1681c <__assert_fail@plt+0x5270>
   16818:	pop	{r4, r5, r6, sl, fp, pc}
   1681c:	bl	16d98 <__assert_fail@plt+0x57ec>
   16820:	push	{r4, r5, r6, sl, fp, lr}
   16824:	add	fp, sp, #16
   16828:	mov	r4, r2
   1682c:	mov	r5, r1
   16830:	mov	r6, r0
   16834:	bl	173f0 <_obstack_memory_used@@Base+0x78>
   16838:	cmp	r0, #0
   1683c:	popne	{r4, r5, r6, sl, fp, pc}
   16840:	cmp	r6, #0
   16844:	beq	16858 <__assert_fail@plt+0x52ac>
   16848:	cmp	r5, #0
   1684c:	cmpne	r4, #0
   16850:	bne	16858 <__assert_fail@plt+0x52ac>
   16854:	pop	{r4, r5, r6, sl, fp, pc}
   16858:	bl	16d98 <__assert_fail@plt+0x57ec>
   1685c:	push	{fp, lr}
   16860:	mov	fp, sp
   16864:	bl	16e30 <__assert_fail@plt+0x5884>
   16868:	cmp	r0, #0
   1686c:	popne	{fp, pc}
   16870:	bl	16d98 <__assert_fail@plt+0x57ec>
   16874:	push	{fp, lr}
   16878:	mov	fp, sp
   1687c:	bl	16e30 <__assert_fail@plt+0x5884>
   16880:	cmp	r0, #0
   16884:	popne	{fp, pc}
   16888:	bl	16d98 <__assert_fail@plt+0x57ec>
   1688c:	push	{fp, lr}
   16890:	mov	fp, sp
   16894:	bl	16e30 <__assert_fail@plt+0x5884>
   16898:	cmp	r0, #0
   1689c:	popne	{fp, pc}
   168a0:	bl	16d98 <__assert_fail@plt+0x57ec>
   168a4:	push	{r4, r5, fp, lr}
   168a8:	add	fp, sp, #8
   168ac:	mov	r4, r1
   168b0:	mov	r5, r0
   168b4:	bl	16e60 <__assert_fail@plt+0x58b4>
   168b8:	cmp	r0, #0
   168bc:	popne	{r4, r5, fp, pc}
   168c0:	cmp	r5, #0
   168c4:	beq	168d4 <__assert_fail@plt+0x5328>
   168c8:	cmp	r4, #0
   168cc:	bne	168d4 <__assert_fail@plt+0x5328>
   168d0:	pop	{r4, r5, fp, pc}
   168d4:	bl	16d98 <__assert_fail@plt+0x57ec>
   168d8:	push	{fp, lr}
   168dc:	mov	fp, sp
   168e0:	cmp	r1, #0
   168e4:	orreq	r1, r1, #1
   168e8:	bl	16e60 <__assert_fail@plt+0x58b4>
   168ec:	cmp	r0, #0
   168f0:	popne	{fp, pc}
   168f4:	bl	16d98 <__assert_fail@plt+0x57ec>
   168f8:	push	{fp, lr}
   168fc:	mov	fp, sp
   16900:	clz	r3, r2
   16904:	lsr	ip, r3, #5
   16908:	clz	r3, r1
   1690c:	lsr	r3, r3, #5
   16910:	orrs	r3, r3, ip
   16914:	movwne	r1, #1
   16918:	movwne	r2, #1
   1691c:	bl	173f0 <_obstack_memory_used@@Base+0x78>
   16920:	cmp	r0, #0
   16924:	popne	{fp, pc}
   16928:	bl	16d98 <__assert_fail@plt+0x57ec>
   1692c:	push	{fp, lr}
   16930:	mov	fp, sp
   16934:	mov	r2, r1
   16938:	mov	r1, r0
   1693c:	mov	r0, #0
   16940:	bl	173f0 <_obstack_memory_used@@Base+0x78>
   16944:	cmp	r0, #0
   16948:	popne	{fp, pc}
   1694c:	bl	16d98 <__assert_fail@plt+0x57ec>
   16950:	push	{fp, lr}
   16954:	mov	fp, sp
   16958:	mov	r2, r1
   1695c:	mov	r1, r0
   16960:	clz	r0, r2
   16964:	clz	r3, r1
   16968:	lsr	r0, r0, #5
   1696c:	lsr	r3, r3, #5
   16970:	orrs	r0, r3, r0
   16974:	mov	r0, #0
   16978:	movwne	r1, #1
   1697c:	movwne	r2, #1
   16980:	bl	173f0 <_obstack_memory_used@@Base+0x78>
   16984:	cmp	r0, #0
   16988:	popne	{fp, pc}
   1698c:	bl	16d98 <__assert_fail@plt+0x57ec>
   16990:	push	{r4, r5, r6, sl, fp, lr}
   16994:	add	fp, sp, #16
   16998:	ldr	r5, [r1]
   1699c:	mov	r4, r1
   169a0:	mov	r6, r0
   169a4:	cmp	r0, #0
   169a8:	beq	169c0 <__assert_fail@plt+0x5414>
   169ac:	mov	r0, #1
   169b0:	add	r0, r0, r5, lsr #1
   169b4:	adds	r5, r5, r0
   169b8:	bcc	169c8 <__assert_fail@plt+0x541c>
   169bc:	b	16a04 <__assert_fail@plt+0x5458>
   169c0:	cmp	r5, #0
   169c4:	movweq	r5, #64	; 0x40
   169c8:	mov	r0, r6
   169cc:	mov	r1, r5
   169d0:	mov	r2, #1
   169d4:	bl	173f0 <_obstack_memory_used@@Base+0x78>
   169d8:	cmp	r5, #0
   169dc:	mov	r1, r5
   169e0:	movwne	r1, #1
   169e4:	cmp	r0, #0
   169e8:	bne	169fc <__assert_fail@plt+0x5450>
   169ec:	clz	r2, r6
   169f0:	lsr	r2, r2, #5
   169f4:	orrs	r1, r2, r1
   169f8:	bne	16a04 <__assert_fail@plt+0x5458>
   169fc:	str	r5, [r4]
   16a00:	pop	{r4, r5, r6, sl, fp, pc}
   16a04:	bl	16d98 <__assert_fail@plt+0x57ec>
   16a08:	push	{r4, r5, r6, r7, fp, lr}
   16a0c:	add	fp, sp, #16
   16a10:	ldr	r5, [r1]
   16a14:	mov	r6, r2
   16a18:	mov	r4, r1
   16a1c:	mov	r7, r0
   16a20:	cmp	r0, #0
   16a24:	beq	16a3c <__assert_fail@plt+0x5490>
   16a28:	mov	r0, #1
   16a2c:	add	r0, r0, r5, lsr #1
   16a30:	adds	r5, r5, r0
   16a34:	bcc	16a54 <__assert_fail@plt+0x54a8>
   16a38:	b	16a88 <__assert_fail@plt+0x54dc>
   16a3c:	cmp	r5, #0
   16a40:	bne	16a54 <__assert_fail@plt+0x54a8>
   16a44:	mov	r0, #64	; 0x40
   16a48:	cmp	r6, #64	; 0x40
   16a4c:	udiv	r5, r0, r6
   16a50:	addhi	r5, r5, #1
   16a54:	mov	r0, r7
   16a58:	mov	r1, r5
   16a5c:	mov	r2, r6
   16a60:	bl	173f0 <_obstack_memory_used@@Base+0x78>
   16a64:	cmp	r0, #0
   16a68:	bne	16a80 <__assert_fail@plt+0x54d4>
   16a6c:	cmp	r7, #0
   16a70:	beq	16a88 <__assert_fail@plt+0x54dc>
   16a74:	cmp	r6, #0
   16a78:	cmpne	r5, #0
   16a7c:	bne	16a88 <__assert_fail@plt+0x54dc>
   16a80:	str	r5, [r4]
   16a84:	pop	{r4, r5, r6, r7, fp, pc}
   16a88:	bl	16d98 <__assert_fail@plt+0x57ec>
   16a8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16a90:	add	fp, sp, #24
   16a94:	mov	r8, r1
   16a98:	ldr	r1, [r1]
   16a9c:	mov	r5, r0
   16aa0:	add	r0, r1, r1, asr #1
   16aa4:	cmp	r0, r1
   16aa8:	mvnvs	r0, #-2147483648	; 0x80000000
   16aac:	cmp	r0, r3
   16ab0:	mov	r7, r0
   16ab4:	movgt	r7, r3
   16ab8:	cmn	r3, #1
   16abc:	movle	r7, r0
   16ac0:	ldr	r0, [fp, #8]
   16ac4:	cmn	r0, #1
   16ac8:	ble	16af0 <__assert_fail@plt+0x5544>
   16acc:	cmp	r0, #0
   16ad0:	beq	16b44 <__assert_fail@plt+0x5598>
   16ad4:	cmn	r7, #1
   16ad8:	ble	16b18 <__assert_fail@plt+0x556c>
   16adc:	mvn	r4, #-2147483648	; 0x80000000
   16ae0:	udiv	r6, r4, r0
   16ae4:	cmp	r6, r7
   16ae8:	bge	16b44 <__assert_fail@plt+0x5598>
   16aec:	b	16b54 <__assert_fail@plt+0x55a8>
   16af0:	cmn	r7, #1
   16af4:	ble	16b34 <__assert_fail@plt+0x5588>
   16af8:	cmn	r0, #1
   16afc:	beq	16b44 <__assert_fail@plt+0x5598>
   16b00:	mov	r6, #-2147483648	; 0x80000000
   16b04:	mvn	r4, #-2147483648	; 0x80000000
   16b08:	sdiv	r6, r6, r0
   16b0c:	cmp	r6, r7
   16b10:	bge	16b44 <__assert_fail@plt+0x5598>
   16b14:	b	16b54 <__assert_fail@plt+0x55a8>
   16b18:	beq	16b44 <__assert_fail@plt+0x5598>
   16b1c:	mov	r6, #-2147483648	; 0x80000000
   16b20:	mvn	r4, #-2147483648	; 0x80000000
   16b24:	sdiv	r6, r6, r7
   16b28:	cmp	r6, r0
   16b2c:	bge	16b44 <__assert_fail@plt+0x5598>
   16b30:	b	16b54 <__assert_fail@plt+0x55a8>
   16b34:	mvn	r4, #-2147483648	; 0x80000000
   16b38:	sdiv	r6, r4, r0
   16b3c:	cmp	r7, r6
   16b40:	blt	16b54 <__assert_fail@plt+0x55a8>
   16b44:	mul	r6, r7, r0
   16b48:	mov	r4, #64	; 0x40
   16b4c:	cmp	r6, #63	; 0x3f
   16b50:	bgt	16b5c <__assert_fail@plt+0x55b0>
   16b54:	sdiv	r7, r4, r0
   16b58:	mul	r6, r7, r0
   16b5c:	cmp	r5, #0
   16b60:	moveq	r4, #0
   16b64:	streq	r4, [r8]
   16b68:	sub	r4, r7, r1
   16b6c:	cmp	r4, r2
   16b70:	bge	16c1c <__assert_fail@plt+0x5670>
   16b74:	add	r7, r1, r2
   16b78:	mov	r6, #0
   16b7c:	mov	r2, #0
   16b80:	cmp	r7, r3
   16b84:	movwgt	r6, #1
   16b88:	cmn	r3, #1
   16b8c:	movwgt	r2, #1
   16b90:	cmp	r7, r1
   16b94:	bvs	16c50 <__assert_fail@plt+0x56a4>
   16b98:	ands	r1, r2, r6
   16b9c:	bne	16c50 <__assert_fail@plt+0x56a4>
   16ba0:	cmn	r0, #1
   16ba4:	ble	16bcc <__assert_fail@plt+0x5620>
   16ba8:	cmp	r0, #0
   16bac:	beq	16c18 <__assert_fail@plt+0x566c>
   16bb0:	cmn	r7, #1
   16bb4:	ble	16bf0 <__assert_fail@plt+0x5644>
   16bb8:	mvn	r1, #-2147483648	; 0x80000000
   16bbc:	udiv	r1, r1, r0
   16bc0:	cmp	r1, r7
   16bc4:	bge	16c18 <__assert_fail@plt+0x566c>
   16bc8:	b	16c50 <__assert_fail@plt+0x56a4>
   16bcc:	cmn	r7, #1
   16bd0:	ble	16c08 <__assert_fail@plt+0x565c>
   16bd4:	cmn	r0, #1
   16bd8:	beq	16c18 <__assert_fail@plt+0x566c>
   16bdc:	mov	r1, #-2147483648	; 0x80000000
   16be0:	sdiv	r1, r1, r0
   16be4:	cmp	r1, r7
   16be8:	bge	16c18 <__assert_fail@plt+0x566c>
   16bec:	b	16c50 <__assert_fail@plt+0x56a4>
   16bf0:	beq	16c18 <__assert_fail@plt+0x566c>
   16bf4:	mov	r1, #-2147483648	; 0x80000000
   16bf8:	sdiv	r1, r1, r7
   16bfc:	cmp	r1, r0
   16c00:	bge	16c18 <__assert_fail@plt+0x566c>
   16c04:	b	16c50 <__assert_fail@plt+0x56a4>
   16c08:	mvn	r1, #-2147483648	; 0x80000000
   16c0c:	sdiv	r1, r1, r0
   16c10:	cmp	r7, r1
   16c14:	blt	16c50 <__assert_fail@plt+0x56a4>
   16c18:	mul	r6, r7, r0
   16c1c:	mov	r0, r5
   16c20:	mov	r1, r6
   16c24:	bl	16e60 <__assert_fail@plt+0x58b4>
   16c28:	cmp	r6, #0
   16c2c:	movwne	r6, #1
   16c30:	cmp	r0, #0
   16c34:	bne	16c48 <__assert_fail@plt+0x569c>
   16c38:	clz	r1, r5
   16c3c:	lsr	r1, r1, #5
   16c40:	orrs	r1, r1, r6
   16c44:	bne	16c50 <__assert_fail@plt+0x56a4>
   16c48:	str	r7, [r8]
   16c4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c50:	bl	16d98 <__assert_fail@plt+0x57ec>
   16c54:	push	{fp, lr}
   16c58:	mov	fp, sp
   16c5c:	mov	r1, #1
   16c60:	bl	16ddc <__assert_fail@plt+0x5830>
   16c64:	cmp	r0, #0
   16c68:	popne	{fp, pc}
   16c6c:	bl	16d98 <__assert_fail@plt+0x57ec>
   16c70:	push	{fp, lr}
   16c74:	mov	fp, sp
   16c78:	bl	16ddc <__assert_fail@plt+0x5830>
   16c7c:	cmp	r0, #0
   16c80:	popne	{fp, pc}
   16c84:	bl	16d98 <__assert_fail@plt+0x57ec>
   16c88:	push	{fp, lr}
   16c8c:	mov	fp, sp
   16c90:	mov	r1, #1
   16c94:	bl	16ddc <__assert_fail@plt+0x5830>
   16c98:	cmp	r0, #0
   16c9c:	popne	{fp, pc}
   16ca0:	bl	16d98 <__assert_fail@plt+0x57ec>
   16ca4:	push	{fp, lr}
   16ca8:	mov	fp, sp
   16cac:	bl	16ddc <__assert_fail@plt+0x5830>
   16cb0:	cmp	r0, #0
   16cb4:	popne	{fp, pc}
   16cb8:	bl	16d98 <__assert_fail@plt+0x57ec>
   16cbc:	push	{r4, r5, fp, lr}
   16cc0:	add	fp, sp, #8
   16cc4:	mov	r5, r0
   16cc8:	mov	r0, r1
   16ccc:	mov	r4, r1
   16cd0:	bl	16e30 <__assert_fail@plt+0x5884>
   16cd4:	cmp	r0, #0
   16cd8:	beq	16cec <__assert_fail@plt+0x5740>
   16cdc:	mov	r1, r5
   16ce0:	mov	r2, r4
   16ce4:	pop	{r4, r5, fp, lr}
   16ce8:	b	11324 <memcpy@plt>
   16cec:	bl	16d98 <__assert_fail@plt+0x57ec>
   16cf0:	push	{r4, r5, fp, lr}
   16cf4:	add	fp, sp, #8
   16cf8:	mov	r5, r0
   16cfc:	mov	r0, r1
   16d00:	mov	r4, r1
   16d04:	bl	16e30 <__assert_fail@plt+0x5884>
   16d08:	cmp	r0, #0
   16d0c:	beq	16d20 <__assert_fail@plt+0x5774>
   16d10:	mov	r1, r5
   16d14:	mov	r2, r4
   16d18:	pop	{r4, r5, fp, lr}
   16d1c:	b	11324 <memcpy@plt>
   16d20:	bl	16d98 <__assert_fail@plt+0x57ec>
   16d24:	push	{r4, r5, fp, lr}
   16d28:	add	fp, sp, #8
   16d2c:	mov	r5, r0
   16d30:	add	r0, r1, #1
   16d34:	mov	r4, r1
   16d38:	bl	16e30 <__assert_fail@plt+0x5884>
   16d3c:	cmp	r0, #0
   16d40:	beq	16d5c <__assert_fail@plt+0x57b0>
   16d44:	mov	r1, #0
   16d48:	mov	r2, r4
   16d4c:	strb	r1, [r0, r4]
   16d50:	mov	r1, r5
   16d54:	pop	{r4, r5, fp, lr}
   16d58:	b	11324 <memcpy@plt>
   16d5c:	bl	16d98 <__assert_fail@plt+0x57ec>
   16d60:	push	{r4, r5, fp, lr}
   16d64:	add	fp, sp, #8
   16d68:	mov	r4, r0
   16d6c:	bl	11480 <strlen@plt>
   16d70:	add	r5, r0, #1
   16d74:	mov	r0, r5
   16d78:	bl	16e30 <__assert_fail@plt+0x5884>
   16d7c:	cmp	r0, #0
   16d80:	beq	16d94 <__assert_fail@plt+0x57e8>
   16d84:	mov	r1, r4
   16d88:	mov	r2, r5
   16d8c:	pop	{r4, r5, fp, lr}
   16d90:	b	11324 <memcpy@plt>
   16d94:	bl	16d98 <__assert_fail@plt+0x57ec>
   16d98:	push	{fp, lr}
   16d9c:	mov	fp, sp
   16da0:	movw	r0, #37164	; 0x912c
   16da4:	movw	r1, #34552	; 0x86f8
   16da8:	mov	r2, #5
   16dac:	movt	r0, #2
   16db0:	movt	r1, #1
   16db4:	ldr	r4, [r0]
   16db8:	mov	r0, #0
   16dbc:	bl	1133c <dcgettext@plt>
   16dc0:	movw	r2, #33484	; 0x82cc
   16dc4:	mov	r3, r0
   16dc8:	mov	r0, r4
   16dcc:	mov	r1, #0
   16dd0:	movt	r2, #1
   16dd4:	bl	113d8 <error@plt>
   16dd8:	bl	11594 <abort@plt>
   16ddc:	clz	r2, r1
   16de0:	clz	r3, r0
   16de4:	lsr	r2, r2, #5
   16de8:	lsr	r3, r3, #5
   16dec:	orrs	r2, r3, r2
   16df0:	movwne	r1, #1
   16df4:	movwne	r0, #1
   16df8:	cmp	r1, #0
   16dfc:	beq	16e2c <__assert_fail@plt+0x5880>
   16e00:	mvn	r2, #-2147483648	; 0x80000000
   16e04:	udiv	r2, r2, r1
   16e08:	cmp	r2, r0
   16e0c:	bcs	16e2c <__assert_fail@plt+0x5880>
   16e10:	push	{fp, lr}
   16e14:	mov	fp, sp
   16e18:	bl	114a4 <__errno_location@plt>
   16e1c:	mov	r1, #12
   16e20:	str	r1, [r0]
   16e24:	mov	r0, #0
   16e28:	pop	{fp, pc}
   16e2c:	b	11294 <calloc@plt>
   16e30:	cmp	r0, #0
   16e34:	movweq	r0, #1
   16e38:	cmn	r0, #1
   16e3c:	ble	16e44 <__assert_fail@plt+0x5898>
   16e40:	b	11408 <malloc@plt>
   16e44:	push	{fp, lr}
   16e48:	mov	fp, sp
   16e4c:	bl	114a4 <__errno_location@plt>
   16e50:	mov	r1, #12
   16e54:	str	r1, [r0]
   16e58:	mov	r0, #0
   16e5c:	pop	{fp, pc}
   16e60:	push	{fp, lr}
   16e64:	mov	fp, sp
   16e68:	cmp	r0, #0
   16e6c:	beq	16e88 <__assert_fail@plt+0x58dc>
   16e70:	cmp	r1, #0
   16e74:	beq	16e94 <__assert_fail@plt+0x58e8>
   16e78:	cmn	r1, #1
   16e7c:	ble	16ea0 <__assert_fail@plt+0x58f4>
   16e80:	pop	{fp, lr}
   16e84:	b	11354 <realloc@plt>
   16e88:	mov	r0, r1
   16e8c:	pop	{fp, lr}
   16e90:	b	16e30 <__assert_fail@plt+0x5884>
   16e94:	bl	13a58 <__assert_fail@plt+0x24ac>
   16e98:	mov	r0, #0
   16e9c:	pop	{fp, pc}
   16ea0:	bl	114a4 <__errno_location@plt>
   16ea4:	mov	r1, #12
   16ea8:	str	r1, [r0]
   16eac:	mov	r0, #0
   16eb0:	pop	{fp, pc}
   16eb4:	push	{r4, r5, r6, sl, fp, lr}
   16eb8:	add	fp, sp, #16
   16ebc:	mov	r4, r0
   16ec0:	bl	113c0 <__fpending@plt>
   16ec4:	ldr	r6, [r4]
   16ec8:	mov	r5, r0
   16ecc:	mov	r0, r4
   16ed0:	bl	13960 <__assert_fail@plt+0x23b4>
   16ed4:	tst	r6, #32
   16ed8:	bne	16f10 <__assert_fail@plt+0x5964>
   16edc:	cmp	r0, #0
   16ee0:	mov	r4, r0
   16ee4:	mvnne	r4, #0
   16ee8:	cmp	r5, #0
   16eec:	bne	16f1c <__assert_fail@plt+0x5970>
   16ef0:	cmp	r0, #0
   16ef4:	beq	16f1c <__assert_fail@plt+0x5970>
   16ef8:	bl	114a4 <__errno_location@plt>
   16efc:	ldr	r0, [r0]
   16f00:	subs	r4, r0, #9
   16f04:	mvnne	r4, #0
   16f08:	mov	r0, r4
   16f0c:	pop	{r4, r5, r6, sl, fp, pc}
   16f10:	mvn	r4, #0
   16f14:	cmp	r0, #0
   16f18:	beq	16f24 <__assert_fail@plt+0x5978>
   16f1c:	mov	r0, r4
   16f20:	pop	{r4, r5, r6, sl, fp, pc}
   16f24:	bl	114a4 <__errno_location@plt>
   16f28:	mov	r1, #0
   16f2c:	str	r1, [r0]
   16f30:	mov	r0, r4
   16f34:	pop	{r4, r5, r6, sl, fp, pc}
   16f38:	push	{r4, sl, fp, lr}
   16f3c:	add	fp, sp, #8
   16f40:	sub	sp, sp, #264	; 0x108
   16f44:	add	r1, sp, #7
   16f48:	movw	r2, #257	; 0x101
   16f4c:	bl	1742c <_obstack_memory_used@@Base+0xb4>
   16f50:	mov	r4, #0
   16f54:	cmp	r0, #0
   16f58:	bne	16f98 <__assert_fail@plt+0x59ec>
   16f5c:	movw	r1, #34569	; 0x8709
   16f60:	add	r0, sp, #7
   16f64:	mov	r2, #2
   16f68:	movt	r1, #1
   16f6c:	bl	11474 <bcmp@plt>
   16f70:	cmp	r0, #0
   16f74:	beq	16f98 <__assert_fail@plt+0x59ec>
   16f78:	movw	r1, #34571	; 0x870b
   16f7c:	add	r0, sp, #7
   16f80:	mov	r2, #6
   16f84:	movt	r1, #1
   16f88:	bl	11474 <bcmp@plt>
   16f8c:	cmp	r0, #0
   16f90:	mov	r4, r0
   16f94:	movwne	r4, #1
   16f98:	mov	r0, r4
   16f9c:	sub	sp, fp, #8
   16fa0:	pop	{r4, sl, fp, pc}
   16fa4:	push	{fp, lr}
   16fa8:	mov	fp, sp
   16fac:	mov	r0, #14
   16fb0:	bl	1154c <nl_langinfo@plt>
   16fb4:	movw	r1, #33157	; 0x8185
   16fb8:	cmp	r0, #0
   16fbc:	movt	r1, #1
   16fc0:	movne	r1, r0
   16fc4:	movw	r0, #34577	; 0x8711
   16fc8:	ldrb	r2, [r1]
   16fcc:	movt	r0, #1
   16fd0:	cmp	r2, #0
   16fd4:	movne	r0, r1
   16fd8:	pop	{fp, pc}

00016fdc <_obstack_begin@@Base>:
   16fdc:	push	{r4, r5, r6, sl, fp, lr}
   16fe0:	add	fp, sp, #16
   16fe4:	cmp	r1, #0
   16fe8:	mov	r4, r0
   16fec:	str	r3, [r0, #28]
   16ff0:	mov	r5, r2
   16ff4:	movweq	r1, #4072	; 0xfe8
   16ff8:	cmp	r2, #0
   16ffc:	str	r1, [r0]
   17000:	ldr	r0, [fp, #8]
   17004:	movweq	r5, #8
   17008:	sub	r6, r5, #1
   1700c:	str	r0, [r4, #32]
   17010:	str	r6, [r4, #24]
   17014:	ldrb	r0, [r4, #40]	; 0x28
   17018:	and	r0, r0, #254	; 0xfe
   1701c:	strb	r0, [r4, #40]	; 0x28
   17020:	mov	r0, r1
   17024:	blx	r3
   17028:	cmp	r0, #0
   1702c:	str	r0, [r4, #4]
   17030:	addne	r1, r0, r6
   17034:	rsbne	r2, r5, #0
   17038:	addne	r1, r1, #8
   1703c:	andne	r1, r1, r2
   17040:	strne	r1, [r4, #12]
   17044:	strne	r1, [r4, #8]
   17048:	ldrne	r1, [r4]
   1704c:	addne	r1, r0, r1
   17050:	strne	r1, [r0]
   17054:	strne	r1, [r4, #16]
   17058:	movne	r1, #0
   1705c:	strne	r1, [r0, #4]
   17060:	ldrbne	r0, [r4, #40]	; 0x28
   17064:	andne	r0, r0, #249	; 0xf9
   17068:	strbne	r0, [r4, #40]	; 0x28
   1706c:	movne	r0, #1
   17070:	popne	{r4, r5, r6, sl, fp, pc}
   17074:	movw	r0, #37232	; 0x9170
   17078:	movt	r0, #2
   1707c:	ldr	r0, [r0]
   17080:	blx	r0

00017084 <_obstack_begin_1@@Base>:
   17084:	push	{r4, r5, r6, sl, fp, lr}
   17088:	add	fp, sp, #16
   1708c:	cmp	r1, #0
   17090:	mov	r5, r2
   17094:	mov	r4, r0
   17098:	str	r3, [r0, #28]
   1709c:	ldr	r2, [fp, #8]
   170a0:	movweq	r1, #4072	; 0xfe8
   170a4:	cmp	r5, #0
   170a8:	str	r1, [r0]
   170ac:	ldr	r0, [fp, #12]
   170b0:	movweq	r5, #8
   170b4:	sub	r6, r5, #1
   170b8:	str	r0, [r4, #36]	; 0x24
   170bc:	str	r2, [r4, #32]
   170c0:	str	r6, [r4, #24]
   170c4:	ldrb	r2, [r4, #40]	; 0x28
   170c8:	orr	r2, r2, #1
   170cc:	strb	r2, [r4, #40]	; 0x28
   170d0:	blx	r3
   170d4:	cmp	r0, #0
   170d8:	str	r0, [r4, #4]
   170dc:	addne	r1, r0, r6
   170e0:	rsbne	r2, r5, #0
   170e4:	addne	r1, r1, #8
   170e8:	andne	r1, r1, r2
   170ec:	strne	r1, [r4, #12]
   170f0:	strne	r1, [r4, #8]
   170f4:	ldrne	r1, [r4]
   170f8:	addne	r1, r0, r1
   170fc:	strne	r1, [r0]
   17100:	strne	r1, [r4, #16]
   17104:	movne	r1, #0
   17108:	strne	r1, [r0, #4]
   1710c:	ldrbne	r0, [r4, #40]	; 0x28
   17110:	andne	r0, r0, #249	; 0xf9
   17114:	strbne	r0, [r4, #40]	; 0x28
   17118:	movne	r0, #1
   1711c:	popne	{r4, r5, r6, sl, fp, pc}
   17120:	movw	r0, #37232	; 0x9170
   17124:	movt	r0, #2
   17128:	ldr	r0, [r0]
   1712c:	blx	r0

00017130 <_obstack_newchunk@@Base>:
   17130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17134:	add	fp, sp, #28
   17138:	sub	sp, sp, #4
   1713c:	mov	r4, r0
   17140:	ldr	r2, [r0]
   17144:	ldr	r0, [r0, #8]
   17148:	ldr	r3, [r4, #12]
   1714c:	sub	r9, r3, r0
   17150:	ldr	r0, [r4, #24]
   17154:	mov	r3, #0
   17158:	add	r1, r9, r1
   1715c:	adds	r6, r1, r0
   17160:	adc	r0, r3, #0
   17164:	mov	r3, #100	; 0x64
   17168:	add	r3, r3, r9, lsr #3
   1716c:	adds	r7, r3, r6
   17170:	movcs	r7, r6
   17174:	cmp	r7, r2
   17178:	movcc	r7, r2
   1717c:	cmp	r1, r9
   17180:	bcc	17284 <_obstack_newchunk@@Base+0x154>
   17184:	cmp	r0, #0
   17188:	bne	17284 <_obstack_newchunk@@Base+0x154>
   1718c:	ldrb	r0, [r4, #40]	; 0x28
   17190:	ldr	r8, [r4, #4]
   17194:	tst	r0, #1
   17198:	bne	171b8 <_obstack_newchunk@@Base+0x88>
   1719c:	ldr	r1, [r4, #28]
   171a0:	mov	r0, r7
   171a4:	blx	r1
   171a8:	mov	r6, r0
   171ac:	cmp	r0, #0
   171b0:	bne	171d4 <_obstack_newchunk@@Base+0xa4>
   171b4:	b	17284 <_obstack_newchunk@@Base+0x154>
   171b8:	ldr	r2, [r4, #28]
   171bc:	ldr	r0, [r4, #36]	; 0x24
   171c0:	mov	r1, r7
   171c4:	blx	r2
   171c8:	mov	r6, r0
   171cc:	cmp	r0, #0
   171d0:	beq	17284 <_obstack_newchunk@@Base+0x154>
   171d4:	add	r0, r6, r7
   171d8:	str	r6, [r4, #4]
   171dc:	str	r8, [r6, #4]
   171e0:	mov	r2, r9
   171e4:	str	r0, [r4, #16]
   171e8:	str	r0, [r6]
   171ec:	ldr	r5, [r4, #24]
   171f0:	ldr	sl, [r4, #8]
   171f4:	add	r0, r6, r5
   171f8:	mov	r1, sl
   171fc:	add	r0, r0, #8
   17200:	bic	r7, r0, r5
   17204:	mov	r0, r7
   17208:	bl	11324 <memcpy@plt>
   1720c:	ldrb	r0, [r4, #40]	; 0x28
   17210:	tst	r0, #2
   17214:	bne	17264 <_obstack_newchunk@@Base+0x134>
   17218:	add	r1, r8, r5
   1721c:	mvn	r0, r5
   17220:	add	r1, r1, #8
   17224:	and	r0, r1, r0
   17228:	cmp	sl, r0
   1722c:	bne	17264 <_obstack_newchunk@@Base+0x134>
   17230:	ldr	r0, [r8, #4]
   17234:	str	r0, [r6, #4]
   17238:	ldrb	r0, [r4, #40]	; 0x28
   1723c:	tst	r0, #1
   17240:	bne	17254 <_obstack_newchunk@@Base+0x124>
   17244:	ldr	r1, [r4, #32]
   17248:	mov	r0, r8
   1724c:	blx	r1
   17250:	b	17264 <_obstack_newchunk@@Base+0x134>
   17254:	ldr	r2, [r4, #32]
   17258:	ldr	r0, [r4, #36]	; 0x24
   1725c:	mov	r1, r8
   17260:	blx	r2
   17264:	add	r0, r7, r9
   17268:	str	r7, [r4, #8]
   1726c:	str	r0, [r4, #12]
   17270:	ldrb	r0, [r4, #40]	; 0x28
   17274:	and	r0, r0, #253	; 0xfd
   17278:	strb	r0, [r4, #40]	; 0x28
   1727c:	sub	sp, fp, #28
   17280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17284:	movw	r0, #37232	; 0x9170
   17288:	movt	r0, #2
   1728c:	ldr	r0, [r0]
   17290:	blx	r0

00017294 <_obstack_allocated_p@@Base>:
   17294:	ldr	r2, [r0, #4]
   17298:	mov	r0, #0
   1729c:	cmp	r2, #0
   172a0:	bxeq	lr
   172a4:	cmp	r2, r1
   172a8:	bcc	172c0 <_obstack_allocated_p@@Base+0x2c>
   172ac:	ldr	r2, [r2, #4]
   172b0:	cmp	r2, #0
   172b4:	bxeq	lr
   172b8:	cmp	r2, r1
   172bc:	bcs	172ac <_obstack_allocated_p@@Base+0x18>
   172c0:	ldr	r3, [r2]
   172c4:	cmp	r3, r1
   172c8:	bcc	172ac <_obstack_allocated_p@@Base+0x18>
   172cc:	mov	r0, #1
   172d0:	bx	lr

000172d4 <_obstack_free@@Base>:
   172d4:	push	{r4, r5, r6, sl, fp, lr}
   172d8:	add	fp, sp, #16
   172dc:	mov	r5, r1
   172e0:	ldr	r1, [r0, #4]
   172e4:	cmp	r1, #0
   172e8:	beq	17354 <_obstack_free@@Base+0x80>
   172ec:	mov	r4, r0
   172f0:	cmp	r1, r5
   172f4:	bcs	17334 <_obstack_free@@Base+0x60>
   172f8:	b	17328 <_obstack_free@@Base+0x54>
   172fc:	ldr	r2, [r4, #32]
   17300:	mov	r0, r1
   17304:	blx	r2
   17308:	ldrb	r0, [r4, #40]	; 0x28
   1730c:	cmp	r6, #0
   17310:	mov	r1, r6
   17314:	orr	r0, r0, #2
   17318:	strb	r0, [r4, #40]	; 0x28
   1731c:	beq	17354 <_obstack_free@@Base+0x80>
   17320:	cmp	r1, r5
   17324:	bcs	17334 <_obstack_free@@Base+0x60>
   17328:	ldr	r0, [r1]
   1732c:	cmp	r0, r5
   17330:	bcs	17360 <_obstack_free@@Base+0x8c>
   17334:	ldrb	r0, [r4, #40]	; 0x28
   17338:	ldr	r6, [r1, #4]
   1733c:	tst	r0, #1
   17340:	beq	172fc <_obstack_free@@Base+0x28>
   17344:	ldr	r2, [r4, #32]
   17348:	ldr	r0, [r4, #36]	; 0x24
   1734c:	blx	r2
   17350:	b	17308 <_obstack_free@@Base+0x34>
   17354:	cmp	r5, #0
   17358:	popeq	{r4, r5, r6, sl, fp, pc}
   1735c:	bl	11594 <abort@plt>
   17360:	str	r5, [r4, #8]
   17364:	str	r5, [r4, #12]
   17368:	ldr	r0, [r1]
   1736c:	str	r1, [r4, #4]
   17370:	str	r0, [r4, #16]
   17374:	pop	{r4, r5, r6, sl, fp, pc}

00017378 <_obstack_memory_used@@Base>:
   17378:	ldr	r1, [r0, #4]
   1737c:	mov	r0, #0
   17380:	b	17394 <_obstack_memory_used@@Base+0x1c>
   17384:	ldr	r2, [r1]
   17388:	sub	r0, r0, r1
   1738c:	ldr	r1, [r1, #4]
   17390:	add	r0, r0, r2
   17394:	cmp	r1, #0
   17398:	bxeq	lr
   1739c:	b	17384 <_obstack_memory_used@@Base+0xc>
   173a0:	push	{fp, lr}
   173a4:	mov	fp, sp
   173a8:	movw	r0, #37256	; 0x9188
   173ac:	movw	r1, #34552	; 0x86f8
   173b0:	mov	r2, #5
   173b4:	movt	r0, #2
   173b8:	movt	r1, #1
   173bc:	ldr	r4, [r0]
   173c0:	mov	r0, #0
   173c4:	bl	1133c <dcgettext@plt>
   173c8:	movw	r2, #33776	; 0x83f0
   173cc:	mov	r3, r0
   173d0:	mov	r0, r4
   173d4:	mov	r1, #1
   173d8:	movt	r2, #1
   173dc:	bl	11504 <__fprintf_chk@plt>
   173e0:	movw	r0, #37164	; 0x912c
   173e4:	movt	r0, #2
   173e8:	ldr	r0, [r0]
   173ec:	bl	11450 <exit@plt>
   173f0:	cmp	r2, #0
   173f4:	beq	17424 <_obstack_memory_used@@Base+0xac>
   173f8:	mvn	r3, #0
   173fc:	udiv	r3, r3, r2
   17400:	cmp	r3, r1
   17404:	bcs	17424 <_obstack_memory_used@@Base+0xac>
   17408:	push	{fp, lr}
   1740c:	mov	fp, sp
   17410:	bl	114a4 <__errno_location@plt>
   17414:	mov	r1, #12
   17418:	str	r1, [r0]
   1741c:	mov	r0, #0
   17420:	pop	{fp, pc}
   17424:	mul	r1, r2, r1
   17428:	b	16e60 <__assert_fail@plt+0x58b4>
   1742c:	push	{r4, r5, r6, r7, fp, lr}
   17430:	add	fp, sp, #16
   17434:	mov	r4, r1
   17438:	mov	r1, #0
   1743c:	mov	r6, r2
   17440:	bl	11534 <setlocale@plt>
   17444:	cmp	r0, #0
   17448:	beq	17478 <_obstack_memory_used@@Base+0x100>
   1744c:	mov	r7, r0
   17450:	bl	11480 <strlen@plt>
   17454:	cmp	r0, r6
   17458:	bcs	17494 <_obstack_memory_used@@Base+0x11c>
   1745c:	add	r2, r0, #1
   17460:	mov	r0, r4
   17464:	mov	r1, r7
   17468:	bl	11324 <memcpy@plt>
   1746c:	mov	r5, #0
   17470:	mov	r0, r5
   17474:	pop	{r4, r5, r6, r7, fp, pc}
   17478:	mov	r5, #22
   1747c:	cmp	r6, #0
   17480:	beq	174bc <_obstack_memory_used@@Base+0x144>
   17484:	mov	r0, #0
   17488:	strb	r0, [r4]
   1748c:	mov	r0, r5
   17490:	pop	{r4, r5, r6, r7, fp, pc}
   17494:	mov	r5, #34	; 0x22
   17498:	cmp	r6, #0
   1749c:	beq	174bc <_obstack_memory_used@@Base+0x144>
   174a0:	sub	r6, r6, #1
   174a4:	mov	r0, r4
   174a8:	mov	r1, r7
   174ac:	mov	r2, r6
   174b0:	bl	11324 <memcpy@plt>
   174b4:	mov	r0, #0
   174b8:	strb	r0, [r4, r6]
   174bc:	mov	r0, r5
   174c0:	pop	{r4, r5, r6, r7, fp, pc}
   174c4:	mov	r1, #0
   174c8:	b	11534 <setlocale@plt>
   174cc:	eor	r1, r1, #-2147483648	; 0x80000000
   174d0:	b	174d8 <_obstack_memory_used@@Base+0x160>
   174d4:	eor	r3, r3, #-2147483648	; 0x80000000
   174d8:	push	{r4, r5, lr}
   174dc:	lsl	r4, r1, #1
   174e0:	lsl	r5, r3, #1
   174e4:	teq	r4, r5
   174e8:	teqeq	r0, r2
   174ec:	orrsne	ip, r4, r0
   174f0:	orrsne	ip, r5, r2
   174f4:	mvnsne	ip, r4, asr #21
   174f8:	mvnsne	ip, r5, asr #21
   174fc:	beq	176e8 <_obstack_memory_used@@Base+0x370>
   17500:	lsr	r4, r4, #21
   17504:	rsbs	r5, r4, r5, lsr #21
   17508:	rsblt	r5, r5, #0
   1750c:	ble	1752c <_obstack_memory_used@@Base+0x1b4>
   17510:	add	r4, r4, r5
   17514:	eor	r2, r0, r2
   17518:	eor	r3, r1, r3
   1751c:	eor	r0, r2, r0
   17520:	eor	r1, r3, r1
   17524:	eor	r2, r0, r2
   17528:	eor	r3, r1, r3
   1752c:	cmp	r5, #54	; 0x36
   17530:	pophi	{r4, r5, pc}
   17534:	tst	r1, #-2147483648	; 0x80000000
   17538:	lsl	r1, r1, #12
   1753c:	mov	ip, #1048576	; 0x100000
   17540:	orr	r1, ip, r1, lsr #12
   17544:	beq	17550 <_obstack_memory_used@@Base+0x1d8>
   17548:	rsbs	r0, r0, #0
   1754c:	rsc	r1, r1, #0
   17550:	tst	r3, #-2147483648	; 0x80000000
   17554:	lsl	r3, r3, #12
   17558:	orr	r3, ip, r3, lsr #12
   1755c:	beq	17568 <_obstack_memory_used@@Base+0x1f0>
   17560:	rsbs	r2, r2, #0
   17564:	rsc	r3, r3, #0
   17568:	teq	r4, r5
   1756c:	beq	176d0 <_obstack_memory_used@@Base+0x358>
   17570:	sub	r4, r4, #1
   17574:	rsbs	lr, r5, #32
   17578:	blt	17594 <_obstack_memory_used@@Base+0x21c>
   1757c:	lsl	ip, r2, lr
   17580:	adds	r0, r0, r2, lsr r5
   17584:	adc	r1, r1, #0
   17588:	adds	r0, r0, r3, lsl lr
   1758c:	adcs	r1, r1, r3, asr r5
   17590:	b	175b0 <_obstack_memory_used@@Base+0x238>
   17594:	sub	r5, r5, #32
   17598:	add	lr, lr, #32
   1759c:	cmp	r2, #1
   175a0:	lsl	ip, r3, lr
   175a4:	orrcs	ip, ip, #2
   175a8:	adds	r0, r0, r3, asr r5
   175ac:	adcs	r1, r1, r3, asr #31
   175b0:	and	r5, r1, #-2147483648	; 0x80000000
   175b4:	bpl	175c4 <_obstack_memory_used@@Base+0x24c>
   175b8:	rsbs	ip, ip, #0
   175bc:	rscs	r0, r0, #0
   175c0:	rsc	r1, r1, #0
   175c4:	cmp	r1, #1048576	; 0x100000
   175c8:	bcc	17608 <_obstack_memory_used@@Base+0x290>
   175cc:	cmp	r1, #2097152	; 0x200000
   175d0:	bcc	175f0 <_obstack_memory_used@@Base+0x278>
   175d4:	lsrs	r1, r1, #1
   175d8:	rrxs	r0, r0
   175dc:	rrx	ip, ip
   175e0:	add	r4, r4, #1
   175e4:	lsl	r2, r4, #21
   175e8:	cmn	r2, #4194304	; 0x400000
   175ec:	bcs	17748 <_obstack_memory_used@@Base+0x3d0>
   175f0:	cmp	ip, #-2147483648	; 0x80000000
   175f4:	lsrseq	ip, r0, #1
   175f8:	adcs	r0, r0, #0
   175fc:	adc	r1, r1, r4, lsl #20
   17600:	orr	r1, r1, r5
   17604:	pop	{r4, r5, pc}
   17608:	lsls	ip, ip, #1
   1760c:	adcs	r0, r0, r0
   17610:	adc	r1, r1, r1
   17614:	tst	r1, #1048576	; 0x100000
   17618:	sub	r4, r4, #1
   1761c:	bne	175f0 <_obstack_memory_used@@Base+0x278>
   17620:	teq	r1, #0
   17624:	moveq	r1, r0
   17628:	moveq	r0, #0
   1762c:	clz	r3, r1
   17630:	addeq	r3, r3, #32
   17634:	sub	r3, r3, #11
   17638:	subs	r2, r3, #32
   1763c:	bge	17660 <_obstack_memory_used@@Base+0x2e8>
   17640:	adds	r2, r2, #12
   17644:	ble	1765c <_obstack_memory_used@@Base+0x2e4>
   17648:	add	ip, r2, #20
   1764c:	rsb	r2, r2, #12
   17650:	lsl	r0, r1, ip
   17654:	lsr	r1, r1, r2
   17658:	b	17670 <_obstack_memory_used@@Base+0x2f8>
   1765c:	add	r2, r2, #20
   17660:	rsble	ip, r2, #32
   17664:	lsl	r1, r1, r2
   17668:	orrle	r1, r1, r0, lsr ip
   1766c:	lslle	r0, r0, r2
   17670:	subs	r4, r4, r3
   17674:	addge	r1, r1, r4, lsl #20
   17678:	orrge	r1, r1, r5
   1767c:	popge	{r4, r5, pc}
   17680:	mvn	r4, r4
   17684:	subs	r4, r4, #31
   17688:	bge	176c4 <_obstack_memory_used@@Base+0x34c>
   1768c:	adds	r4, r4, #12
   17690:	bgt	176ac <_obstack_memory_used@@Base+0x334>
   17694:	add	r4, r4, #20
   17698:	rsb	r2, r4, #32
   1769c:	lsr	r0, r0, r4
   176a0:	orr	r0, r0, r1, lsl r2
   176a4:	orr	r1, r5, r1, lsr r4
   176a8:	pop	{r4, r5, pc}
   176ac:	rsb	r4, r4, #12
   176b0:	rsb	r2, r4, #32
   176b4:	lsr	r0, r0, r2
   176b8:	orr	r0, r0, r1, lsl r4
   176bc:	mov	r1, r5
   176c0:	pop	{r4, r5, pc}
   176c4:	lsr	r0, r1, r4
   176c8:	mov	r1, r5
   176cc:	pop	{r4, r5, pc}
   176d0:	teq	r4, #0
   176d4:	eor	r3, r3, #1048576	; 0x100000
   176d8:	eoreq	r1, r1, #1048576	; 0x100000
   176dc:	addeq	r4, r4, #1
   176e0:	subne	r5, r5, #1
   176e4:	b	17570 <_obstack_memory_used@@Base+0x1f8>
   176e8:	mvns	ip, r4, asr #21
   176ec:	mvnsne	ip, r5, asr #21
   176f0:	beq	17758 <_obstack_memory_used@@Base+0x3e0>
   176f4:	teq	r4, r5
   176f8:	teqeq	r0, r2
   176fc:	beq	17710 <_obstack_memory_used@@Base+0x398>
   17700:	orrs	ip, r4, r0
   17704:	moveq	r1, r3
   17708:	moveq	r0, r2
   1770c:	pop	{r4, r5, pc}
   17710:	teq	r1, r3
   17714:	movne	r1, #0
   17718:	movne	r0, #0
   1771c:	popne	{r4, r5, pc}
   17720:	lsrs	ip, r4, #21
   17724:	bne	17738 <_obstack_memory_used@@Base+0x3c0>
   17728:	lsls	r0, r0, #1
   1772c:	adcs	r1, r1, r1
   17730:	orrcs	r1, r1, #-2147483648	; 0x80000000
   17734:	pop	{r4, r5, pc}
   17738:	adds	r4, r4, #4194304	; 0x400000
   1773c:	addcc	r1, r1, #1048576	; 0x100000
   17740:	popcc	{r4, r5, pc}
   17744:	and	r5, r1, #-2147483648	; 0x80000000
   17748:	orr	r1, r5, #2130706432	; 0x7f000000
   1774c:	orr	r1, r1, #15728640	; 0xf00000
   17750:	mov	r0, #0
   17754:	pop	{r4, r5, pc}
   17758:	mvns	ip, r4, asr #21
   1775c:	movne	r1, r3
   17760:	movne	r0, r2
   17764:	mvnseq	ip, r5, asr #21
   17768:	movne	r3, r1
   1776c:	movne	r2, r0
   17770:	orrs	r4, r0, r1, lsl #12
   17774:	orrseq	r5, r2, r3, lsl #12
   17778:	teqeq	r1, r3
   1777c:	orrne	r1, r1, #524288	; 0x80000
   17780:	pop	{r4, r5, pc}
   17784:	teq	r0, #0
   17788:	moveq	r1, #0
   1778c:	bxeq	lr
   17790:	push	{r4, r5, lr}
   17794:	mov	r4, #1024	; 0x400
   17798:	add	r4, r4, #50	; 0x32
   1779c:	mov	r5, #0
   177a0:	mov	r1, #0
   177a4:	b	17620 <_obstack_memory_used@@Base+0x2a8>
   177a8:	teq	r0, #0
   177ac:	moveq	r1, #0
   177b0:	bxeq	lr
   177b4:	push	{r4, r5, lr}
   177b8:	mov	r4, #1024	; 0x400
   177bc:	add	r4, r4, #50	; 0x32
   177c0:	ands	r5, r0, #-2147483648	; 0x80000000
   177c4:	rsbmi	r0, r0, #0
   177c8:	mov	r1, #0
   177cc:	b	17620 <_obstack_memory_used@@Base+0x2a8>
   177d0:	lsls	r2, r0, #1
   177d4:	asr	r1, r2, #3
   177d8:	rrx	r1, r1
   177dc:	lsl	r0, r2, #28
   177e0:	andsne	r3, r2, #-16777216	; 0xff000000
   177e4:	teqne	r3, #-16777216	; 0xff000000
   177e8:	eorne	r1, r1, #939524096	; 0x38000000
   177ec:	bxne	lr
   177f0:	bics	r2, r2, #-16777216	; 0xff000000
   177f4:	bxeq	lr
   177f8:	teq	r3, #-16777216	; 0xff000000
   177fc:	orreq	r1, r1, #524288	; 0x80000
   17800:	bxeq	lr
   17804:	push	{r4, r5, lr}
   17808:	mov	r4, #896	; 0x380
   1780c:	and	r5, r1, #-2147483648	; 0x80000000
   17810:	bic	r1, r1, #-2147483648	; 0x80000000
   17814:	b	17620 <_obstack_memory_used@@Base+0x2a8>
   17818:	orrs	r2, r0, r1
   1781c:	bxeq	lr
   17820:	push	{r4, r5, lr}
   17824:	mov	r5, #0
   17828:	b	17848 <_obstack_memory_used@@Base+0x4d0>
   1782c:	orrs	r2, r0, r1
   17830:	bxeq	lr
   17834:	push	{r4, r5, lr}
   17838:	ands	r5, r1, #-2147483648	; 0x80000000
   1783c:	bpl	17848 <_obstack_memory_used@@Base+0x4d0>
   17840:	rsbs	r0, r0, #0
   17844:	rsc	r1, r1, #0
   17848:	mov	r4, #1024	; 0x400
   1784c:	add	r4, r4, #50	; 0x32
   17850:	lsrs	ip, r1, #22
   17854:	beq	175c4 <_obstack_memory_used@@Base+0x24c>
   17858:	mov	r2, #3
   1785c:	lsrs	ip, ip, #3
   17860:	addne	r2, r2, #3
   17864:	lsrs	ip, ip, #3
   17868:	addne	r2, r2, #3
   1786c:	add	r2, r2, ip, lsr #3
   17870:	rsb	r3, r2, #32
   17874:	lsl	ip, r0, r3
   17878:	lsr	r0, r0, r2
   1787c:	orr	r0, r0, r1, lsl r3
   17880:	lsr	r1, r1, r2
   17884:	add	r4, r4, r2
   17888:	b	175c4 <_obstack_memory_used@@Base+0x24c>
   1788c:	cmp	r3, #0
   17890:	cmpeq	r2, #0
   17894:	bne	178ac <_obstack_memory_used@@Base+0x534>
   17898:	cmp	r1, #0
   1789c:	cmpeq	r0, #0
   178a0:	mvnne	r1, #0
   178a4:	mvnne	r0, #0
   178a8:	b	178c8 <_obstack_memory_used@@Base+0x550>
   178ac:	sub	sp, sp, #8
   178b0:	push	{sp, lr}
   178b4:	bl	178d8 <_obstack_memory_used@@Base+0x560>
   178b8:	ldr	lr, [sp, #4]
   178bc:	add	sp, sp, #8
   178c0:	pop	{r2, r3}
   178c4:	bx	lr
   178c8:	push	{r1, lr}
   178cc:	mov	r0, #8
   178d0:	bl	112ac <raise@plt>
   178d4:	pop	{r1, pc}
   178d8:	cmp	r1, r3
   178dc:	cmpeq	r0, r2
   178e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178e4:	mov	r4, r0
   178e8:	movcc	r0, #0
   178ec:	mov	r5, r1
   178f0:	ldr	lr, [sp, #36]	; 0x24
   178f4:	movcc	r1, r0
   178f8:	bcc	179f4 <_obstack_memory_used@@Base+0x67c>
   178fc:	cmp	r3, #0
   17900:	clzeq	ip, r2
   17904:	clzne	ip, r3
   17908:	addeq	ip, ip, #32
   1790c:	cmp	r5, #0
   17910:	clzeq	r1, r4
   17914:	addeq	r1, r1, #32
   17918:	clzne	r1, r5
   1791c:	sub	ip, ip, r1
   17920:	sub	sl, ip, #32
   17924:	lsl	r9, r3, ip
   17928:	rsb	fp, ip, #32
   1792c:	orr	r9, r9, r2, lsl sl
   17930:	orr	r9, r9, r2, lsr fp
   17934:	lsl	r8, r2, ip
   17938:	cmp	r5, r9
   1793c:	cmpeq	r4, r8
   17940:	movcc	r0, #0
   17944:	movcc	r1, r0
   17948:	bcc	17964 <_obstack_memory_used@@Base+0x5ec>
   1794c:	mov	r0, #1
   17950:	subs	r4, r4, r8
   17954:	lsl	r1, r0, sl
   17958:	orr	r1, r1, r0, lsr fp
   1795c:	lsl	r0, r0, ip
   17960:	sbc	r5, r5, r9
   17964:	cmp	ip, #0
   17968:	beq	179f4 <_obstack_memory_used@@Base+0x67c>
   1796c:	lsr	r6, r8, #1
   17970:	orr	r6, r6, r9, lsl #31
   17974:	lsr	r7, r9, #1
   17978:	mov	r2, ip
   1797c:	b	179a0 <_obstack_memory_used@@Base+0x628>
   17980:	subs	r3, r4, r6
   17984:	sbc	r8, r5, r7
   17988:	adds	r3, r3, r3
   1798c:	adc	r8, r8, r8
   17990:	adds	r4, r3, #1
   17994:	adc	r5, r8, #0
   17998:	subs	r2, r2, #1
   1799c:	beq	179bc <_obstack_memory_used@@Base+0x644>
   179a0:	cmp	r5, r7
   179a4:	cmpeq	r4, r6
   179a8:	bcs	17980 <_obstack_memory_used@@Base+0x608>
   179ac:	adds	r4, r4, r4
   179b0:	adc	r5, r5, r5
   179b4:	subs	r2, r2, #1
   179b8:	bne	179a0 <_obstack_memory_used@@Base+0x628>
   179bc:	lsr	r3, r4, ip
   179c0:	orr	r3, r3, r5, lsl fp
   179c4:	lsr	r2, r5, ip
   179c8:	orr	r3, r3, r5, lsr sl
   179cc:	adds	r0, r0, r4
   179d0:	mov	r4, r3
   179d4:	lsl	r3, r2, ip
   179d8:	orr	r3, r3, r4, lsl sl
   179dc:	lsl	ip, r4, ip
   179e0:	orr	r3, r3, r4, lsr fp
   179e4:	adc	r1, r1, r5
   179e8:	subs	r0, r0, ip
   179ec:	mov	r5, r2
   179f0:	sbc	r1, r1, r3
   179f4:	cmp	lr, #0
   179f8:	strdne	r4, [lr]
   179fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a04:	mov	r7, r0
   17a08:	ldr	r6, [pc, #72]	; 17a58 <_obstack_memory_used@@Base+0x6e0>
   17a0c:	ldr	r5, [pc, #72]	; 17a5c <_obstack_memory_used@@Base+0x6e4>
   17a10:	add	r6, pc, r6
   17a14:	add	r5, pc, r5
   17a18:	sub	r6, r6, r5
   17a1c:	mov	r8, r1
   17a20:	mov	r9, r2
   17a24:	bl	11274 <calloc@plt-0x20>
   17a28:	asrs	r6, r6, #2
   17a2c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a30:	mov	r4, #0
   17a34:	add	r4, r4, #1
   17a38:	ldr	r3, [r5], #4
   17a3c:	mov	r2, r9
   17a40:	mov	r1, r8
   17a44:	mov	r0, r7
   17a48:	blx	r3
   17a4c:	cmp	r6, r4
   17a50:	bne	17a34 <_obstack_memory_used@@Base+0x6bc>
   17a54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a58:	strdeq	r1, [r1], -r4
   17a5c:	andeq	r1, r1, ip, ror #9
   17a60:	bx	lr
   17a64:	ldr	r3, [pc, #12]	; 17a78 <_obstack_memory_used@@Base+0x700>
   17a68:	mov	r1, #0
   17a6c:	add	r3, pc, r3
   17a70:	ldr	r2, [r3]
   17a74:	b	114b0 <__cxa_atexit@plt>
   17a78:			; <UNDEFINED> instruction: 0x000116b0

Disassembly of section .fini:

00017a7c <.fini>:
   17a7c:	push	{r3, lr}
   17a80:	pop	{r3, pc}
